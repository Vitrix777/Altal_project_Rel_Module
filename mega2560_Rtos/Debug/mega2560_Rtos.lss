
mega2560_Rtos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000046a  00800200  0000bc76  0000bd0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000bc76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000044f  0080066a  0080066a  0000c174  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000c174  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000c1d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000aa8  00000000  00000000  0000c210  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011ba7  00000000  00000000  0000ccb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e45  00000000  00000000  0001e85f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008ecc  00000000  00000000  000216a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002984  00000000  00000000  0002a570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003a4a  00000000  00000000  0002cef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f511  00000000  00000000  0003093e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ca0  00000000  00000000  0003fe4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6c c5       	rjmp	.+2776   	; 0xada <__ctors_end>
       2:	00 00       	nop
       4:	8b c5       	rjmp	.+2838   	; 0xb1c <__bad_interrupt>
       6:	00 00       	nop
       8:	89 c5       	rjmp	.+2834   	; 0xb1c <__bad_interrupt>
       a:	00 00       	nop
       c:	87 c5       	rjmp	.+2830   	; 0xb1c <__bad_interrupt>
       e:	00 00       	nop
      10:	85 c5       	rjmp	.+2826   	; 0xb1c <__bad_interrupt>
      12:	00 00       	nop
      14:	83 c5       	rjmp	.+2822   	; 0xb1c <__bad_interrupt>
      16:	00 00       	nop
      18:	81 c5       	rjmp	.+2818   	; 0xb1c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7f c5       	rjmp	.+2814   	; 0xb1c <__bad_interrupt>
      1e:	00 00       	nop
      20:	7d c5       	rjmp	.+2810   	; 0xb1c <__bad_interrupt>
      22:	00 00       	nop
      24:	7b c5       	rjmp	.+2806   	; 0xb1c <__bad_interrupt>
      26:	00 00       	nop
      28:	79 c5       	rjmp	.+2802   	; 0xb1c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	77 c5       	rjmp	.+2798   	; 0xb1c <__bad_interrupt>
      2e:	00 00       	nop
      30:	75 c5       	rjmp	.+2794   	; 0xb1c <__bad_interrupt>
      32:	00 00       	nop
      34:	73 c5       	rjmp	.+2790   	; 0xb1c <__bad_interrupt>
      36:	00 00       	nop
      38:	71 c5       	rjmp	.+2786   	; 0xb1c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6f c5       	rjmp	.+2782   	; 0xb1c <__bad_interrupt>
      3e:	00 00       	nop
      40:	6d c5       	rjmp	.+2778   	; 0xb1c <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 a0 22 	jmp	0x4540	; 0x4540 <__vector_17>
      48:	69 c5       	rjmp	.+2770   	; 0xb1c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	67 c5       	rjmp	.+2766   	; 0xb1c <__bad_interrupt>
      4e:	00 00       	nop
      50:	65 c5       	rjmp	.+2762   	; 0xb1c <__bad_interrupt>
      52:	00 00       	nop
      54:	63 c5       	rjmp	.+2758   	; 0xb1c <__bad_interrupt>
      56:	00 00       	nop
      58:	61 c5       	rjmp	.+2754   	; 0xb1c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5f c5       	rjmp	.+2750   	; 0xb1c <__bad_interrupt>
      5e:	00 00       	nop
      60:	5d c5       	rjmp	.+2746   	; 0xb1c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 8f 10 	jmp	0x211e	; 0x211e <__vector_25>
      68:	0c 94 17 11 	jmp	0x222e	; 0x222e <__vector_26>
      6c:	57 c5       	rjmp	.+2734   	; 0xb1c <__bad_interrupt>
      6e:	00 00       	nop
      70:	55 c5       	rjmp	.+2730   	; 0xb1c <__bad_interrupt>
      72:	00 00       	nop
      74:	53 c5       	rjmp	.+2726   	; 0xb1c <__bad_interrupt>
      76:	00 00       	nop
      78:	51 c5       	rjmp	.+2722   	; 0xb1c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4f c5       	rjmp	.+2718   	; 0xb1c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c7       	rjmp	.+3754   	; 0xf2c <__vector_32>
      82:	00 00       	nop
      84:	4b c5       	rjmp	.+2710   	; 0xb1c <__bad_interrupt>
      86:	00 00       	nop
      88:	49 c5       	rjmp	.+2706   	; 0xb1c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	47 c5       	rjmp	.+2702   	; 0xb1c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__vector_36>
      94:	0c 94 bf 11 	jmp	0x237e	; 0x237e <__vector_37>
      98:	41 c5       	rjmp	.+2690   	; 0xb1c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	3f c5       	rjmp	.+2686   	; 0xb1c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3d c5       	rjmp	.+2682   	; 0xb1c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3b c5       	rjmp	.+2678   	; 0xb1c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	39 c5       	rjmp	.+2674   	; 0xb1c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	37 c5       	rjmp	.+2670   	; 0xb1c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	35 c5       	rjmp	.+2666   	; 0xb1c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	33 c5       	rjmp	.+2662   	; 0xb1c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	31 c5       	rjmp	.+2658   	; 0xb1c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2f c5       	rjmp	.+2654   	; 0xb1c <__bad_interrupt>
      be:	00 00       	nop
      c0:	2d c5       	rjmp	.+2650   	; 0xb1c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2b c5       	rjmp	.+2646   	; 0xb1c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	29 c5       	rjmp	.+2642   	; 0xb1c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__vector_51>
      d0:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__vector_52>
      d4:	23 c5       	rjmp	.+2630   	; 0xb1c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <__vector_54>
      dc:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__vector_55>
      e0:	1d c5       	rjmp	.+2618   	; 0xb1c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0c 0d       	add	r16, r12
      e6:	0c 0d       	add	r16, r12
      e8:	11 0d       	add	r17, r1
      ea:	11 0d       	add	r17, r1
      ec:	16 0d       	add	r17, r6
      ee:	16 0d       	add	r17, r6
      f0:	1b 0d       	add	r17, r11
      f2:	1b 0d       	add	r17, r11
      f4:	7d 0d       	add	r23, r13
      f6:	7d 0d       	add	r23, r13
      f8:	78 0d       	add	r23, r8
      fa:	78 0d       	add	r23, r8
      fc:	73 0d       	add	r23, r3
      fe:	73 0d       	add	r23, r3
     100:	6e 0d       	add	r22, r14
     102:	6e 0d       	add	r22, r14
     104:	31 0e       	add	r3, r17
     106:	31 0e       	add	r3, r17
     108:	38 0e       	add	r3, r24
     10a:	38 0e       	add	r3, r24
     10c:	3f 0e       	add	r3, r31
     10e:	3f 0e       	add	r3, r31
     110:	46 0e       	add	r4, r22
     112:	46 0e       	add	r4, r22
     114:	bd 0e       	add	r11, r29
     116:	ee 0e       	add	r14, r30
     118:	28 0f       	add	r18, r24
     11a:	59 0f       	add	r21, r25
     11c:	93 0f       	add	r25, r19
     11e:	c4 0f       	add	r28, r20
     120:	02 10       	cpse	r0, r2
     122:	33 10       	cpse	r3, r3
     124:	39 1d       	adc	r19, r9
     126:	39 1d       	adc	r19, r9
     128:	39 1d       	adc	r19, r9
     12a:	84 1d       	adc	r24, r4
     12c:	6d 1d       	adc	r22, r13
     12e:	81 1d       	adc	r24, r1
     130:	39 1d       	adc	r19, r9
     132:	39 1d       	adc	r19, r9
     134:	84 1d       	adc	r24, r4
     136:	6d 1d       	adc	r22, r13
     138:	2a 27       	eor	r18, r26
     13a:	3e 26       	eor	r3, r30
     13c:	3e 26       	eor	r3, r30
     13e:	47 28       	or	r4, r7
     140:	47 28       	or	r4, r7
     142:	47 28       	or	r4, r7
     144:	47 28       	or	r4, r7
     146:	47 28       	or	r4, r7
     148:	47 28       	or	r4, r7
     14a:	47 28       	or	r4, r7
     14c:	2e 27       	eor	r18, r30
     14e:	43 26       	eor	r4, r19
     150:	43 26       	eor	r4, r19
     152:	47 28       	or	r4, r7
     154:	47 28       	or	r4, r7
     156:	47 28       	or	r4, r7
     158:	47 28       	or	r4, r7
     15a:	47 28       	or	r4, r7
     15c:	47 28       	or	r4, r7
     15e:	47 28       	or	r4, r7
     160:	32 27       	eor	r19, r18
     162:	48 26       	eor	r4, r24
     164:	48 26       	eor	r4, r24
     166:	47 28       	or	r4, r7
     168:	47 28       	or	r4, r7
     16a:	47 28       	or	r4, r7
     16c:	47 28       	or	r4, r7
     16e:	47 28       	or	r4, r7
     170:	47 28       	or	r4, r7
     172:	47 28       	or	r4, r7
     174:	36 27       	eor	r19, r22
     176:	4d 26       	eor	r4, r29
     178:	4d 26       	eor	r4, r29
     17a:	47 28       	or	r4, r7
     17c:	47 28       	or	r4, r7
     17e:	47 28       	or	r4, r7
     180:	47 28       	or	r4, r7
     182:	47 28       	or	r4, r7
     184:	47 28       	or	r4, r7
     186:	47 28       	or	r4, r7
     188:	3a 27       	eor	r19, r26
     18a:	52 26       	eor	r5, r18
     18c:	52 26       	eor	r5, r18
     18e:	47 28       	or	r4, r7
     190:	47 28       	or	r4, r7
     192:	47 28       	or	r4, r7
     194:	47 28       	or	r4, r7
     196:	47 28       	or	r4, r7
     198:	47 28       	or	r4, r7
     19a:	47 28       	or	r4, r7
     19c:	3e 27       	eor	r19, r30
     19e:	57 26       	eor	r5, r23
     1a0:	57 26       	eor	r5, r23
     1a2:	47 28       	or	r4, r7
     1a4:	47 28       	or	r4, r7
     1a6:	47 28       	or	r4, r7
     1a8:	47 28       	or	r4, r7
     1aa:	47 28       	or	r4, r7
     1ac:	47 28       	or	r4, r7
     1ae:	47 28       	or	r4, r7
     1b0:	42 27       	eor	r20, r18
     1b2:	5c 26       	eor	r5, r28
     1b4:	5c 26       	eor	r5, r28
     1b6:	47 28       	or	r4, r7
     1b8:	47 28       	or	r4, r7
     1ba:	47 28       	or	r4, r7
     1bc:	47 28       	or	r4, r7
     1be:	47 28       	or	r4, r7
     1c0:	47 28       	or	r4, r7
     1c2:	47 28       	or	r4, r7
     1c4:	46 27       	eor	r20, r22
     1c6:	6c 26       	eor	r6, r28
     1c8:	6c 26       	eor	r6, r28
     1ca:	47 28       	or	r4, r7
     1cc:	47 28       	or	r4, r7
     1ce:	47 28       	or	r4, r7
     1d0:	47 28       	or	r4, r7
     1d2:	47 28       	or	r4, r7
     1d4:	47 28       	or	r4, r7
     1d6:	47 28       	or	r4, r7
     1d8:	4a 27       	eor	r20, r26
     1da:	7c 26       	eor	r7, r28
     1dc:	7c 26       	eor	r7, r28
     1de:	47 28       	or	r4, r7
     1e0:	47 28       	or	r4, r7
     1e2:	47 28       	or	r4, r7
     1e4:	47 28       	or	r4, r7
     1e6:	47 28       	or	r4, r7
     1e8:	47 28       	or	r4, r7
     1ea:	47 28       	or	r4, r7
     1ec:	4e 27       	eor	r20, r30
     1ee:	8c 26       	eor	r8, r28
     1f0:	8c 26       	eor	r8, r28
     1f2:	47 28       	or	r4, r7
     1f4:	47 28       	or	r4, r7
     1f6:	47 28       	or	r4, r7
     1f8:	47 28       	or	r4, r7
     1fa:	47 28       	or	r4, r7
     1fc:	47 28       	or	r4, r7
     1fe:	47 28       	or	r4, r7
     200:	52 27       	eor	r21, r18
     202:	9c 26       	eor	r9, r28
     204:	9c 26       	eor	r9, r28
     206:	47 28       	or	r4, r7
     208:	47 28       	or	r4, r7
     20a:	47 28       	or	r4, r7
     20c:	47 28       	or	r4, r7
     20e:	47 28       	or	r4, r7
     210:	47 28       	or	r4, r7
     212:	47 28       	or	r4, r7
     214:	56 27       	eor	r21, r22
     216:	a1 26       	eor	r10, r17
     218:	a1 26       	eor	r10, r17
     21a:	47 28       	or	r4, r7
     21c:	47 28       	or	r4, r7
     21e:	47 28       	or	r4, r7
     220:	47 28       	or	r4, r7
     222:	47 28       	or	r4, r7
     224:	47 28       	or	r4, r7
     226:	47 28       	or	r4, r7
     228:	5a 27       	eor	r21, r26
     22a:	b1 26       	eor	r11, r17
     22c:	b1 26       	eor	r11, r17
     22e:	47 28       	or	r4, r7
     230:	47 28       	or	r4, r7
     232:	47 28       	or	r4, r7
     234:	47 28       	or	r4, r7
     236:	47 28       	or	r4, r7
     238:	47 28       	or	r4, r7
     23a:	47 28       	or	r4, r7
     23c:	5e 27       	eor	r21, r30
     23e:	c0 26       	eor	r12, r16
     240:	c0 26       	eor	r12, r16
     242:	47 28       	or	r4, r7
     244:	47 28       	or	r4, r7
     246:	47 28       	or	r4, r7
     248:	47 28       	or	r4, r7
     24a:	47 28       	or	r4, r7
     24c:	47 28       	or	r4, r7
     24e:	47 28       	or	r4, r7
     250:	62 27       	eor	r22, r18
     252:	d0 26       	eor	r13, r16
     254:	d0 26       	eor	r13, r16
     256:	47 28       	or	r4, r7
     258:	47 28       	or	r4, r7
     25a:	47 28       	or	r4, r7
     25c:	47 28       	or	r4, r7
     25e:	47 28       	or	r4, r7
     260:	47 28       	or	r4, r7
     262:	47 28       	or	r4, r7
     264:	66 27       	eor	r22, r22
     266:	e0 26       	eor	r14, r16
     268:	e0 26       	eor	r14, r16
     26a:	47 28       	or	r4, r7
     26c:	47 28       	or	r4, r7
     26e:	47 28       	or	r4, r7
     270:	47 28       	or	r4, r7
     272:	47 28       	or	r4, r7
     274:	47 28       	or	r4, r7
     276:	47 28       	or	r4, r7
     278:	6a 27       	eor	r22, r26
     27a:	f0 26       	eor	r15, r16
     27c:	f0 26       	eor	r15, r16
     27e:	47 28       	or	r4, r7
     280:	47 28       	or	r4, r7
     282:	47 28       	or	r4, r7
     284:	47 28       	or	r4, r7
     286:	47 28       	or	r4, r7
     288:	47 28       	or	r4, r7
     28a:	47 28       	or	r4, r7
     28c:	6e 27       	eor	r22, r30
     28e:	00 27       	eor	r16, r16
     290:	00 27       	eor	r16, r16
     292:	47 28       	or	r4, r7
     294:	47 28       	or	r4, r7
     296:	47 28       	or	r4, r7
     298:	47 28       	or	r4, r7
     29a:	47 28       	or	r4, r7
     29c:	47 28       	or	r4, r7
     29e:	47 28       	or	r4, r7
     2a0:	72 27       	eor	r23, r18
     2a2:	10 27       	eor	r17, r16
     2a4:	10 27       	eor	r17, r16
     2a6:	47 28       	or	r4, r7
     2a8:	47 28       	or	r4, r7
     2aa:	47 28       	or	r4, r7
     2ac:	47 28       	or	r4, r7
     2ae:	47 28       	or	r4, r7
     2b0:	47 28       	or	r4, r7
     2b2:	47 28       	or	r4, r7
     2b4:	76 27       	eor	r23, r22
     2b6:	20 27       	eor	r18, r16
     2b8:	20 27       	eor	r18, r16
     2ba:	47 28       	or	r4, r7
     2bc:	47 28       	or	r4, r7
     2be:	47 28       	or	r4, r7
     2c0:	47 28       	or	r4, r7
     2c2:	47 28       	or	r4, r7
     2c4:	47 28       	or	r4, r7
     2c6:	47 28       	or	r4, r7
     2c8:	7a 27       	eor	r23, r26
     2ca:	47 28       	or	r4, r7
     2cc:	47 28       	or	r4, r7
     2ce:	47 28       	or	r4, r7
     2d0:	47 28       	or	r4, r7
     2d2:	47 28       	or	r4, r7
     2d4:	47 28       	or	r4, r7
     2d6:	47 28       	or	r4, r7
     2d8:	47 28       	or	r4, r7
     2da:	47 28       	or	r4, r7
     2dc:	7e 27       	eor	r23, r30
     2de:	47 28       	or	r4, r7
     2e0:	47 28       	or	r4, r7
     2e2:	47 28       	or	r4, r7
     2e4:	47 28       	or	r4, r7
     2e6:	47 28       	or	r4, r7
     2e8:	47 28       	or	r4, r7
     2ea:	47 28       	or	r4, r7
     2ec:	47 28       	or	r4, r7
     2ee:	47 28       	or	r4, r7
     2f0:	82 27       	eor	r24, r18
     2f2:	47 28       	or	r4, r7
     2f4:	47 28       	or	r4, r7
     2f6:	47 28       	or	r4, r7
     2f8:	47 28       	or	r4, r7
     2fa:	47 28       	or	r4, r7
     2fc:	47 28       	or	r4, r7
     2fe:	47 28       	or	r4, r7
     300:	47 28       	or	r4, r7
     302:	47 28       	or	r4, r7
     304:	86 27       	eor	r24, r22
     306:	47 28       	or	r4, r7
     308:	47 28       	or	r4, r7
     30a:	47 28       	or	r4, r7
     30c:	47 28       	or	r4, r7
     30e:	47 28       	or	r4, r7
     310:	47 28       	or	r4, r7
     312:	47 28       	or	r4, r7
     314:	47 28       	or	r4, r7
     316:	47 28       	or	r4, r7
     318:	8a 27       	eor	r24, r26
     31a:	47 28       	or	r4, r7
     31c:	47 28       	or	r4, r7
     31e:	47 28       	or	r4, r7
     320:	47 28       	or	r4, r7
     322:	47 28       	or	r4, r7
     324:	47 28       	or	r4, r7
     326:	47 28       	or	r4, r7
     328:	47 28       	or	r4, r7
     32a:	47 28       	or	r4, r7
     32c:	95 27       	eor	r25, r21
     32e:	47 28       	or	r4, r7
     330:	47 28       	or	r4, r7
     332:	47 28       	or	r4, r7
     334:	47 28       	or	r4, r7
     336:	47 28       	or	r4, r7
     338:	47 28       	or	r4, r7
     33a:	47 28       	or	r4, r7
     33c:	47 28       	or	r4, r7
     33e:	47 28       	or	r4, r7
     340:	99 27       	eor	r25, r25
     342:	47 28       	or	r4, r7
     344:	47 28       	or	r4, r7
     346:	47 28       	or	r4, r7
     348:	47 28       	or	r4, r7
     34a:	47 28       	or	r4, r7
     34c:	47 28       	or	r4, r7
     34e:	47 28       	or	r4, r7
     350:	47 28       	or	r4, r7
     352:	47 28       	or	r4, r7
     354:	9d 27       	eor	r25, r29
     356:	47 28       	or	r4, r7
     358:	47 28       	or	r4, r7
     35a:	47 28       	or	r4, r7
     35c:	47 28       	or	r4, r7
     35e:	47 28       	or	r4, r7
     360:	47 28       	or	r4, r7
     362:	47 28       	or	r4, r7
     364:	47 28       	or	r4, r7
     366:	47 28       	or	r4, r7
     368:	a1 27       	eor	r26, r17
     36a:	47 28       	or	r4, r7
     36c:	47 28       	or	r4, r7
     36e:	47 28       	or	r4, r7
     370:	47 28       	or	r4, r7
     372:	47 28       	or	r4, r7
     374:	47 28       	or	r4, r7
     376:	47 28       	or	r4, r7
     378:	47 28       	or	r4, r7
     37a:	47 28       	or	r4, r7
     37c:	a5 27       	eor	r26, r21
     37e:	ee 27       	eor	r30, r30
     380:	12 28       	or	r1, r2
     382:	47 28       	or	r4, r7
     384:	47 28       	or	r4, r7
     386:	47 28       	or	r4, r7
     388:	47 28       	or	r4, r7
     38a:	47 28       	or	r4, r7
     38c:	47 28       	or	r4, r7
     38e:	47 28       	or	r4, r7
     390:	ab 27       	eor	r26, r27
     392:	f1 27       	eor	r31, r17
     394:	18 28       	or	r1, r8
     396:	47 28       	or	r4, r7
     398:	47 28       	or	r4, r7
     39a:	47 28       	or	r4, r7
     39c:	47 28       	or	r4, r7
     39e:	47 28       	or	r4, r7
     3a0:	47 28       	or	r4, r7
     3a2:	47 28       	or	r4, r7
     3a4:	af 27       	eor	r26, r31
     3a6:	f7 27       	eor	r31, r23
     3a8:	1e 28       	or	r1, r14
     3aa:	47 28       	or	r4, r7
     3ac:	47 28       	or	r4, r7
     3ae:	47 28       	or	r4, r7
     3b0:	47 28       	or	r4, r7
     3b2:	47 28       	or	r4, r7
     3b4:	47 28       	or	r4, r7
     3b6:	47 28       	or	r4, r7
     3b8:	b3 27       	eor	r27, r19
     3ba:	fd 27       	eor	r31, r29
     3bc:	24 28       	or	r2, r4
     3be:	47 28       	or	r4, r7
     3c0:	47 28       	or	r4, r7
     3c2:	47 28       	or	r4, r7
     3c4:	47 28       	or	r4, r7
     3c6:	47 28       	or	r4, r7
     3c8:	47 28       	or	r4, r7
     3ca:	47 28       	or	r4, r7
     3cc:	b7 27       	eor	r27, r23
     3ce:	03 28       	or	r0, r3
     3d0:	2a 28       	or	r2, r10
     3d2:	47 28       	or	r4, r7
     3d4:	47 28       	or	r4, r7
     3d6:	47 28       	or	r4, r7
     3d8:	47 28       	or	r4, r7
     3da:	47 28       	or	r4, r7
     3dc:	47 28       	or	r4, r7
     3de:	47 28       	or	r4, r7
     3e0:	bb 27       	eor	r27, r27
     3e2:	06 28       	or	r0, r6
     3e4:	30 28       	or	r3, r0
     3e6:	47 28       	or	r4, r7
     3e8:	47 28       	or	r4, r7
     3ea:	47 28       	or	r4, r7
     3ec:	47 28       	or	r4, r7
     3ee:	47 28       	or	r4, r7
     3f0:	47 28       	or	r4, r7
     3f2:	47 28       	or	r4, r7
     3f4:	be 27       	eor	r27, r30
     3f6:	47 28       	or	r4, r7
     3f8:	47 28       	or	r4, r7
     3fa:	47 28       	or	r4, r7
     3fc:	47 28       	or	r4, r7
     3fe:	47 28       	or	r4, r7
     400:	47 28       	or	r4, r7
     402:	47 28       	or	r4, r7
     404:	47 28       	or	r4, r7
     406:	47 28       	or	r4, r7
     408:	c2 27       	eor	r28, r18
     40a:	09 28       	or	r0, r9
     40c:	36 28       	or	r3, r6
     40e:	47 28       	or	r4, r7
     410:	47 28       	or	r4, r7
     412:	47 28       	or	r4, r7
     414:	47 28       	or	r4, r7
     416:	47 28       	or	r4, r7
     418:	47 28       	or	r4, r7
     41a:	47 28       	or	r4, r7
     41c:	c5 27       	eor	r28, r21
     41e:	0c 28       	or	r0, r12
     420:	3c 28       	or	r3, r12
     422:	47 28       	or	r4, r7
     424:	47 28       	or	r4, r7
     426:	47 28       	or	r4, r7
     428:	47 28       	or	r4, r7
     42a:	47 28       	or	r4, r7
     42c:	47 28       	or	r4, r7
     42e:	47 28       	or	r4, r7
     430:	c8 27       	eor	r28, r24
     432:	0f 28       	or	r0, r15
     434:	42 28       	or	r4, r2
     436:	47 28       	or	r4, r7
     438:	47 28       	or	r4, r7
     43a:	47 28       	or	r4, r7
     43c:	47 28       	or	r4, r7
     43e:	47 28       	or	r4, r7
     440:	47 28       	or	r4, r7
     442:	47 28       	or	r4, r7
     444:	cb 27       	eor	r28, r27
     446:	47 28       	or	r4, r7
     448:	47 28       	or	r4, r7
     44a:	47 28       	or	r4, r7
     44c:	47 28       	or	r4, r7
     44e:	47 28       	or	r4, r7
     450:	47 28       	or	r4, r7
     452:	47 28       	or	r4, r7
     454:	47 28       	or	r4, r7
     456:	47 28       	or	r4, r7
     458:	cf 27       	eor	r28, r31
     45a:	47 28       	or	r4, r7
     45c:	47 28       	or	r4, r7
     45e:	47 28       	or	r4, r7
     460:	47 28       	or	r4, r7
     462:	47 28       	or	r4, r7
     464:	47 28       	or	r4, r7
     466:	47 28       	or	r4, r7
     468:	47 28       	or	r4, r7
     46a:	47 28       	or	r4, r7
     46c:	d3 27       	eor	r29, r19
     46e:	47 28       	or	r4, r7
     470:	47 28       	or	r4, r7
     472:	47 28       	or	r4, r7
     474:	47 28       	or	r4, r7
     476:	47 28       	or	r4, r7
     478:	47 28       	or	r4, r7
     47a:	47 28       	or	r4, r7
     47c:	47 28       	or	r4, r7
     47e:	47 28       	or	r4, r7
     480:	d7 27       	eor	r29, r23
     482:	47 28       	or	r4, r7
     484:	47 28       	or	r4, r7
     486:	47 28       	or	r4, r7
     488:	47 28       	or	r4, r7
     48a:	47 28       	or	r4, r7
     48c:	47 28       	or	r4, r7
     48e:	47 28       	or	r4, r7
     490:	47 28       	or	r4, r7
     492:	47 28       	or	r4, r7
     494:	db 27       	eor	r29, r27
     496:	47 28       	or	r4, r7
     498:	47 28       	or	r4, r7
     49a:	47 28       	or	r4, r7
     49c:	47 28       	or	r4, r7
     49e:	47 28       	or	r4, r7
     4a0:	47 28       	or	r4, r7
     4a2:	47 28       	or	r4, r7
     4a4:	47 28       	or	r4, r7
     4a6:	47 28       	or	r4, r7
     4a8:	de 27       	eor	r29, r30
     4aa:	47 28       	or	r4, r7
     4ac:	47 28       	or	r4, r7
     4ae:	47 28       	or	r4, r7
     4b0:	47 28       	or	r4, r7
     4b2:	47 28       	or	r4, r7
     4b4:	47 28       	or	r4, r7
     4b6:	47 28       	or	r4, r7
     4b8:	47 28       	or	r4, r7
     4ba:	47 28       	or	r4, r7
     4bc:	e2 27       	eor	r30, r18
     4be:	47 28       	or	r4, r7
     4c0:	47 28       	or	r4, r7
     4c2:	47 28       	or	r4, r7
     4c4:	47 28       	or	r4, r7
     4c6:	47 28       	or	r4, r7
     4c8:	47 28       	or	r4, r7
     4ca:	47 28       	or	r4, r7
     4cc:	47 28       	or	r4, r7
     4ce:	47 28       	or	r4, r7
     4d0:	e6 27       	eor	r30, r22
     4d2:	47 28       	or	r4, r7
     4d4:	47 28       	or	r4, r7
     4d6:	47 28       	or	r4, r7
     4d8:	47 28       	or	r4, r7
     4da:	47 28       	or	r4, r7
     4dc:	47 28       	or	r4, r7
     4de:	47 28       	or	r4, r7
     4e0:	47 28       	or	r4, r7
     4e2:	47 28       	or	r4, r7
     4e4:	ea 27       	eor	r30, r26
     4e6:	5b 28       	or	r5, r11
     4e8:	10 29       	or	r17, r0
     4ea:	10 29       	or	r17, r0
     4ec:	10 29       	or	r17, r0
     4ee:	10 29       	or	r17, r0
     4f0:	10 29       	or	r17, r0
     4f2:	10 29       	or	r17, r0
     4f4:	10 29       	or	r17, r0
     4f6:	10 29       	or	r17, r0
     4f8:	10 29       	or	r17, r0
     4fa:	5d 28       	or	r5, r13
     4fc:	10 29       	or	r17, r0
     4fe:	10 29       	or	r17, r0
     500:	10 29       	or	r17, r0
     502:	10 29       	or	r17, r0
     504:	10 29       	or	r17, r0
     506:	10 29       	or	r17, r0
     508:	10 29       	or	r17, r0
     50a:	10 29       	or	r17, r0
     50c:	10 29       	or	r17, r0
     50e:	60 28       	or	r6, r0
     510:	10 29       	or	r17, r0
     512:	10 29       	or	r17, r0
     514:	10 29       	or	r17, r0
     516:	10 29       	or	r17, r0
     518:	10 29       	or	r17, r0
     51a:	10 29       	or	r17, r0
     51c:	10 29       	or	r17, r0
     51e:	10 29       	or	r17, r0
     520:	10 29       	or	r17, r0
     522:	63 28       	or	r6, r3
     524:	10 29       	or	r17, r0
     526:	10 29       	or	r17, r0
     528:	10 29       	or	r17, r0
     52a:	10 29       	or	r17, r0
     52c:	10 29       	or	r17, r0
     52e:	10 29       	or	r17, r0
     530:	10 29       	or	r17, r0
     532:	10 29       	or	r17, r0
     534:	10 29       	or	r17, r0
     536:	66 28       	or	r6, r6
     538:	10 29       	or	r17, r0
     53a:	10 29       	or	r17, r0
     53c:	10 29       	or	r17, r0
     53e:	10 29       	or	r17, r0
     540:	10 29       	or	r17, r0
     542:	10 29       	or	r17, r0
     544:	10 29       	or	r17, r0
     546:	10 29       	or	r17, r0
     548:	10 29       	or	r17, r0
     54a:	69 28       	or	r6, r9
     54c:	10 29       	or	r17, r0
     54e:	10 29       	or	r17, r0
     550:	10 29       	or	r17, r0
     552:	10 29       	or	r17, r0
     554:	10 29       	or	r17, r0
     556:	10 29       	or	r17, r0
     558:	10 29       	or	r17, r0
     55a:	10 29       	or	r17, r0
     55c:	10 29       	or	r17, r0
     55e:	6c 28       	or	r6, r12
     560:	10 29       	or	r17, r0
     562:	10 29       	or	r17, r0
     564:	10 29       	or	r17, r0
     566:	10 29       	or	r17, r0
     568:	10 29       	or	r17, r0
     56a:	10 29       	or	r17, r0
     56c:	10 29       	or	r17, r0
     56e:	10 29       	or	r17, r0
     570:	10 29       	or	r17, r0
     572:	6f 28       	or	r6, r15
     574:	10 29       	or	r17, r0
     576:	10 29       	or	r17, r0
     578:	10 29       	or	r17, r0
     57a:	10 29       	or	r17, r0
     57c:	10 29       	or	r17, r0
     57e:	10 29       	or	r17, r0
     580:	10 29       	or	r17, r0
     582:	10 29       	or	r17, r0
     584:	10 29       	or	r17, r0
     586:	72 28       	or	r7, r2
     588:	10 29       	or	r17, r0
     58a:	10 29       	or	r17, r0
     58c:	10 29       	or	r17, r0
     58e:	10 29       	or	r17, r0
     590:	10 29       	or	r17, r0
     592:	10 29       	or	r17, r0
     594:	10 29       	or	r17, r0
     596:	10 29       	or	r17, r0
     598:	10 29       	or	r17, r0
     59a:	75 28       	or	r7, r5
     59c:	10 29       	or	r17, r0
     59e:	10 29       	or	r17, r0
     5a0:	10 29       	or	r17, r0
     5a2:	10 29       	or	r17, r0
     5a4:	10 29       	or	r17, r0
     5a6:	10 29       	or	r17, r0
     5a8:	10 29       	or	r17, r0
     5aa:	10 29       	or	r17, r0
     5ac:	10 29       	or	r17, r0
     5ae:	78 28       	or	r7, r8
     5b0:	10 29       	or	r17, r0
     5b2:	10 29       	or	r17, r0
     5b4:	10 29       	or	r17, r0
     5b6:	10 29       	or	r17, r0
     5b8:	10 29       	or	r17, r0
     5ba:	10 29       	or	r17, r0
     5bc:	10 29       	or	r17, r0
     5be:	10 29       	or	r17, r0
     5c0:	10 29       	or	r17, r0
     5c2:	7b 28       	or	r7, r11
     5c4:	10 29       	or	r17, r0
     5c6:	10 29       	or	r17, r0
     5c8:	10 29       	or	r17, r0
     5ca:	10 29       	or	r17, r0
     5cc:	10 29       	or	r17, r0
     5ce:	10 29       	or	r17, r0
     5d0:	10 29       	or	r17, r0
     5d2:	10 29       	or	r17, r0
     5d4:	10 29       	or	r17, r0
     5d6:	7e 28       	or	r7, r14
     5d8:	10 29       	or	r17, r0
     5da:	10 29       	or	r17, r0
     5dc:	10 29       	or	r17, r0
     5de:	10 29       	or	r17, r0
     5e0:	10 29       	or	r17, r0
     5e2:	10 29       	or	r17, r0
     5e4:	10 29       	or	r17, r0
     5e6:	10 29       	or	r17, r0
     5e8:	10 29       	or	r17, r0
     5ea:	81 28       	or	r8, r1
     5ec:	10 29       	or	r17, r0
     5ee:	10 29       	or	r17, r0
     5f0:	10 29       	or	r17, r0
     5f2:	10 29       	or	r17, r0
     5f4:	10 29       	or	r17, r0
     5f6:	10 29       	or	r17, r0
     5f8:	10 29       	or	r17, r0
     5fa:	10 29       	or	r17, r0
     5fc:	10 29       	or	r17, r0
     5fe:	84 28       	or	r8, r4
     600:	10 29       	or	r17, r0
     602:	10 29       	or	r17, r0
     604:	10 29       	or	r17, r0
     606:	10 29       	or	r17, r0
     608:	10 29       	or	r17, r0
     60a:	10 29       	or	r17, r0
     60c:	10 29       	or	r17, r0
     60e:	10 29       	or	r17, r0
     610:	10 29       	or	r17, r0
     612:	87 28       	or	r8, r7
     614:	10 29       	or	r17, r0
     616:	10 29       	or	r17, r0
     618:	10 29       	or	r17, r0
     61a:	10 29       	or	r17, r0
     61c:	10 29       	or	r17, r0
     61e:	10 29       	or	r17, r0
     620:	10 29       	or	r17, r0
     622:	10 29       	or	r17, r0
     624:	10 29       	or	r17, r0
     626:	8a 28       	or	r8, r10
     628:	10 29       	or	r17, r0
     62a:	10 29       	or	r17, r0
     62c:	10 29       	or	r17, r0
     62e:	10 29       	or	r17, r0
     630:	10 29       	or	r17, r0
     632:	10 29       	or	r17, r0
     634:	10 29       	or	r17, r0
     636:	10 29       	or	r17, r0
     638:	10 29       	or	r17, r0
     63a:	8d 28       	or	r8, r13
     63c:	10 29       	or	r17, r0
     63e:	10 29       	or	r17, r0
     640:	10 29       	or	r17, r0
     642:	10 29       	or	r17, r0
     644:	10 29       	or	r17, r0
     646:	10 29       	or	r17, r0
     648:	10 29       	or	r17, r0
     64a:	10 29       	or	r17, r0
     64c:	10 29       	or	r17, r0
     64e:	90 28       	or	r9, r0
     650:	10 29       	or	r17, r0
     652:	10 29       	or	r17, r0
     654:	10 29       	or	r17, r0
     656:	10 29       	or	r17, r0
     658:	10 29       	or	r17, r0
     65a:	10 29       	or	r17, r0
     65c:	10 29       	or	r17, r0
     65e:	10 29       	or	r17, r0
     660:	10 29       	or	r17, r0
     662:	93 28       	or	r9, r3
     664:	10 29       	or	r17, r0
     666:	10 29       	or	r17, r0
     668:	10 29       	or	r17, r0
     66a:	10 29       	or	r17, r0
     66c:	10 29       	or	r17, r0
     66e:	10 29       	or	r17, r0
     670:	10 29       	or	r17, r0
     672:	10 29       	or	r17, r0
     674:	10 29       	or	r17, r0
     676:	96 28       	or	r9, r6
     678:	10 29       	or	r17, r0
     67a:	10 29       	or	r17, r0
     67c:	10 29       	or	r17, r0
     67e:	10 29       	or	r17, r0
     680:	10 29       	or	r17, r0
     682:	10 29       	or	r17, r0
     684:	10 29       	or	r17, r0
     686:	10 29       	or	r17, r0
     688:	10 29       	or	r17, r0
     68a:	99 28       	or	r9, r9
     68c:	10 29       	or	r17, r0
     68e:	10 29       	or	r17, r0
     690:	10 29       	or	r17, r0
     692:	10 29       	or	r17, r0
     694:	10 29       	or	r17, r0
     696:	10 29       	or	r17, r0
     698:	10 29       	or	r17, r0
     69a:	10 29       	or	r17, r0
     69c:	10 29       	or	r17, r0
     69e:	9c 28       	or	r9, r12
     6a0:	10 29       	or	r17, r0
     6a2:	10 29       	or	r17, r0
     6a4:	10 29       	or	r17, r0
     6a6:	10 29       	or	r17, r0
     6a8:	10 29       	or	r17, r0
     6aa:	10 29       	or	r17, r0
     6ac:	10 29       	or	r17, r0
     6ae:	10 29       	or	r17, r0
     6b0:	10 29       	or	r17, r0
     6b2:	9f 28       	or	r9, r15
     6b4:	10 29       	or	r17, r0
     6b6:	10 29       	or	r17, r0
     6b8:	10 29       	or	r17, r0
     6ba:	10 29       	or	r17, r0
     6bc:	10 29       	or	r17, r0
     6be:	10 29       	or	r17, r0
     6c0:	10 29       	or	r17, r0
     6c2:	10 29       	or	r17, r0
     6c4:	10 29       	or	r17, r0
     6c6:	a2 28       	or	r10, r2
     6c8:	10 29       	or	r17, r0
     6ca:	10 29       	or	r17, r0
     6cc:	10 29       	or	r17, r0
     6ce:	10 29       	or	r17, r0
     6d0:	10 29       	or	r17, r0
     6d2:	10 29       	or	r17, r0
     6d4:	10 29       	or	r17, r0
     6d6:	10 29       	or	r17, r0
     6d8:	10 29       	or	r17, r0
     6da:	af 28       	or	r10, r15
     6dc:	10 29       	or	r17, r0
     6de:	10 29       	or	r17, r0
     6e0:	10 29       	or	r17, r0
     6e2:	10 29       	or	r17, r0
     6e4:	10 29       	or	r17, r0
     6e6:	10 29       	or	r17, r0
     6e8:	10 29       	or	r17, r0
     6ea:	10 29       	or	r17, r0
     6ec:	10 29       	or	r17, r0
     6ee:	b2 28       	or	r11, r2
     6f0:	10 29       	or	r17, r0
     6f2:	10 29       	or	r17, r0
     6f4:	10 29       	or	r17, r0
     6f6:	10 29       	or	r17, r0
     6f8:	10 29       	or	r17, r0
     6fa:	10 29       	or	r17, r0
     6fc:	10 29       	or	r17, r0
     6fe:	10 29       	or	r17, r0
     700:	10 29       	or	r17, r0
     702:	b5 28       	or	r11, r5
     704:	10 29       	or	r17, r0
     706:	10 29       	or	r17, r0
     708:	10 29       	or	r17, r0
     70a:	10 29       	or	r17, r0
     70c:	10 29       	or	r17, r0
     70e:	10 29       	or	r17, r0
     710:	10 29       	or	r17, r0
     712:	10 29       	or	r17, r0
     714:	10 29       	or	r17, r0
     716:	b8 28       	or	r11, r8
     718:	10 29       	or	r17, r0
     71a:	10 29       	or	r17, r0
     71c:	10 29       	or	r17, r0
     71e:	10 29       	or	r17, r0
     720:	10 29       	or	r17, r0
     722:	10 29       	or	r17, r0
     724:	10 29       	or	r17, r0
     726:	10 29       	or	r17, r0
     728:	10 29       	or	r17, r0
     72a:	bb 28       	or	r11, r11
     72c:	10 29       	or	r17, r0
     72e:	10 29       	or	r17, r0
     730:	10 29       	or	r17, r0
     732:	10 29       	or	r17, r0
     734:	10 29       	or	r17, r0
     736:	10 29       	or	r17, r0
     738:	10 29       	or	r17, r0
     73a:	10 29       	or	r17, r0
     73c:	10 29       	or	r17, r0
     73e:	c0 28       	or	r12, r0
     740:	10 29       	or	r17, r0
     742:	10 29       	or	r17, r0
     744:	10 29       	or	r17, r0
     746:	10 29       	or	r17, r0
     748:	10 29       	or	r17, r0
     74a:	10 29       	or	r17, r0
     74c:	10 29       	or	r17, r0
     74e:	10 29       	or	r17, r0
     750:	10 29       	or	r17, r0
     752:	c3 28       	or	r12, r3
     754:	10 29       	or	r17, r0
     756:	10 29       	or	r17, r0
     758:	10 29       	or	r17, r0
     75a:	10 29       	or	r17, r0
     75c:	10 29       	or	r17, r0
     75e:	10 29       	or	r17, r0
     760:	10 29       	or	r17, r0
     762:	10 29       	or	r17, r0
     764:	10 29       	or	r17, r0
     766:	c6 28       	or	r12, r6
     768:	10 29       	or	r17, r0
     76a:	10 29       	or	r17, r0
     76c:	10 29       	or	r17, r0
     76e:	10 29       	or	r17, r0
     770:	10 29       	or	r17, r0
     772:	10 29       	or	r17, r0
     774:	10 29       	or	r17, r0
     776:	10 29       	or	r17, r0
     778:	10 29       	or	r17, r0
     77a:	c9 28       	or	r12, r9
     77c:	10 29       	or	r17, r0
     77e:	10 29       	or	r17, r0
     780:	10 29       	or	r17, r0
     782:	10 29       	or	r17, r0
     784:	10 29       	or	r17, r0
     786:	10 29       	or	r17, r0
     788:	10 29       	or	r17, r0
     78a:	10 29       	or	r17, r0
     78c:	10 29       	or	r17, r0
     78e:	cc 28       	or	r12, r12
     790:	10 29       	or	r17, r0
     792:	10 29       	or	r17, r0
     794:	10 29       	or	r17, r0
     796:	10 29       	or	r17, r0
     798:	10 29       	or	r17, r0
     79a:	10 29       	or	r17, r0
     79c:	10 29       	or	r17, r0
     79e:	10 29       	or	r17, r0
     7a0:	10 29       	or	r17, r0
     7a2:	d1 28       	or	r13, r1
     7a4:	10 29       	or	r17, r0
     7a6:	10 29       	or	r17, r0
     7a8:	10 29       	or	r17, r0
     7aa:	10 29       	or	r17, r0
     7ac:	10 29       	or	r17, r0
     7ae:	10 29       	or	r17, r0
     7b0:	10 29       	or	r17, r0
     7b2:	10 29       	or	r17, r0
     7b4:	10 29       	or	r17, r0
     7b6:	d4 28       	or	r13, r4
     7b8:	10 29       	or	r17, r0
     7ba:	10 29       	or	r17, r0
     7bc:	10 29       	or	r17, r0
     7be:	10 29       	or	r17, r0
     7c0:	10 29       	or	r17, r0
     7c2:	10 29       	or	r17, r0
     7c4:	10 29       	or	r17, r0
     7c6:	10 29       	or	r17, r0
     7c8:	10 29       	or	r17, r0
     7ca:	d9 28       	or	r13, r9
     7cc:	10 29       	or	r17, r0
     7ce:	10 29       	or	r17, r0
     7d0:	10 29       	or	r17, r0
     7d2:	10 29       	or	r17, r0
     7d4:	10 29       	or	r17, r0
     7d6:	10 29       	or	r17, r0
     7d8:	10 29       	or	r17, r0
     7da:	10 29       	or	r17, r0
     7dc:	10 29       	or	r17, r0
     7de:	de 28       	or	r13, r14
     7e0:	00 29       	or	r16, r0
     7e2:	05 29       	or	r16, r5
     7e4:	0a 29       	or	r16, r10
     7e6:	10 29       	or	r17, r0
     7e8:	10 29       	or	r17, r0
     7ea:	10 29       	or	r17, r0
     7ec:	10 29       	or	r17, r0
     7ee:	10 29       	or	r17, r0
     7f0:	10 29       	or	r17, r0
     7f2:	e3 28       	or	r14, r3
     7f4:	10 29       	or	r17, r0
     7f6:	10 29       	or	r17, r0
     7f8:	10 29       	or	r17, r0
     7fa:	10 29       	or	r17, r0
     7fc:	10 29       	or	r17, r0
     7fe:	10 29       	or	r17, r0
     800:	10 29       	or	r17, r0
     802:	10 29       	or	r17, r0
     804:	10 29       	or	r17, r0
     806:	e6 28       	or	r14, r6
     808:	10 29       	or	r17, r0
     80a:	10 29       	or	r17, r0
     80c:	10 29       	or	r17, r0
     80e:	10 29       	or	r17, r0
     810:	10 29       	or	r17, r0
     812:	10 29       	or	r17, r0
     814:	10 29       	or	r17, r0
     816:	10 29       	or	r17, r0
     818:	10 29       	or	r17, r0
     81a:	e9 28       	or	r14, r9
     81c:	10 29       	or	r17, r0
     81e:	10 29       	or	r17, r0
     820:	10 29       	or	r17, r0
     822:	10 29       	or	r17, r0
     824:	10 29       	or	r17, r0
     826:	10 29       	or	r17, r0
     828:	10 29       	or	r17, r0
     82a:	10 29       	or	r17, r0
     82c:	10 29       	or	r17, r0
     82e:	ec 28       	or	r14, r12
     830:	10 29       	or	r17, r0
     832:	10 29       	or	r17, r0
     834:	10 29       	or	r17, r0
     836:	10 29       	or	r17, r0
     838:	10 29       	or	r17, r0
     83a:	10 29       	or	r17, r0
     83c:	10 29       	or	r17, r0
     83e:	10 29       	or	r17, r0
     840:	10 29       	or	r17, r0
     842:	ef 28       	or	r14, r15
     844:	10 29       	or	r17, r0
     846:	10 29       	or	r17, r0
     848:	10 29       	or	r17, r0
     84a:	10 29       	or	r17, r0
     84c:	10 29       	or	r17, r0
     84e:	10 29       	or	r17, r0
     850:	10 29       	or	r17, r0
     852:	10 29       	or	r17, r0
     854:	10 29       	or	r17, r0
     856:	f4 28       	or	r15, r4
     858:	10 29       	or	r17, r0
     85a:	10 29       	or	r17, r0
     85c:	10 29       	or	r17, r0
     85e:	10 29       	or	r17, r0
     860:	10 29       	or	r17, r0
     862:	10 29       	or	r17, r0
     864:	10 29       	or	r17, r0
     866:	10 29       	or	r17, r0
     868:	10 29       	or	r17, r0
     86a:	f7 28       	or	r15, r7
     86c:	10 29       	or	r17, r0
     86e:	10 29       	or	r17, r0
     870:	10 29       	or	r17, r0
     872:	10 29       	or	r17, r0
     874:	10 29       	or	r17, r0
     876:	10 29       	or	r17, r0
     878:	10 29       	or	r17, r0
     87a:	10 29       	or	r17, r0
     87c:	10 29       	or	r17, r0
     87e:	fa 28       	or	r15, r10
     880:	10 29       	or	r17, r0
     882:	10 29       	or	r17, r0
     884:	10 29       	or	r17, r0
     886:	10 29       	or	r17, r0
     888:	10 29       	or	r17, r0
     88a:	10 29       	or	r17, r0
     88c:	10 29       	or	r17, r0
     88e:	10 29       	or	r17, r0
     890:	10 29       	or	r17, r0
     892:	fd 28       	or	r15, r13
     894:	08 00       	.word	0x0008	; ????
     896:	00 00       	nop
     898:	be 92       	st	-X, r11
     89a:	24 49       	sbci	r18, 0x94	; 148
     89c:	12 3e       	cpi	r17, 0xE2	; 226
     89e:	ab aa       	std	Y+51, r10	; 0x33
     8a0:	aa 2a       	or	r10, r26
     8a2:	be cd       	rjmp	.-1156   	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     8a4:	cc cc       	rjmp	.-1640   	; 0x23e <__SREG__+0x1ff>
     8a6:	4c 3e       	cpi	r20, 0xEC	; 236
     8a8:	00 00       	nop
     8aa:	00 80       	ld	r0, Z
     8ac:	be ab       	std	Y+54, r27	; 0x36
     8ae:	aa aa       	std	Y+50, r10	; 0x32
     8b0:	aa 3e       	cpi	r26, 0xEA	; 234
     8b2:	00 00       	nop
     8b4:	00 00       	nop
     8b6:	bf 00       	.word	0x00bf	; ????
     8b8:	00 00       	nop
     8ba:	80 3f       	cpi	r24, 0xF0	; 240
     8bc:	00 00       	nop
     8be:	00 00       	nop
     8c0:	00 08       	sbc	r0, r0
     8c2:	41 78       	andi	r20, 0x81	; 129
     8c4:	d3 bb       	out	0x13, r29	; 19
     8c6:	43 87       	std	Z+11, r20	; 0x0b
     8c8:	d1 13       	cpse	r29, r17
     8ca:	3d 19       	sub	r19, r13
     8cc:	0e 3c       	cpi	r16, 0xCE	; 206
     8ce:	c3 bd       	out	0x23, r28	; 35
     8d0:	42 82       	std	Z+2, r4	; 0x02
     8d2:	ad 2b       	or	r26, r29
     8d4:	3e 68       	ori	r19, 0x8E	; 142
     8d6:	ec 82       	std	Y+4, r14	; 0x04
     8d8:	76 be       	out	0x36, r7	; 54
     8da:	d9 8f       	std	Y+25, r29	; 0x19
     8dc:	e1 a9       	ldd	r30, Z+49	; 0x31
     8de:	3e 4c       	sbci	r19, 0xCE	; 206
     8e0:	80 ef       	ldi	r24, 0xF0	; 240
     8e2:	ff be       	out	0x3f, r15	; 63
     8e4:	01 c4       	rjmp	.+2050   	; 0x10e8 <vListInsert+0x78>
     8e6:	ff 7f       	andi	r31, 0xFF	; 255
     8e8:	3f 00       	.word	0x003f	; ????
     8ea:	00 00       	nop
	...

000008ee <__trampolines_end>:
     8ee:	6e 61       	ori	r22, 0x1E	; 30
     8f0:	6e 00       	.word	0x006e	; ????

000008f2 <__c.2332>:
     8f2:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     902:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     912:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     922:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     932:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     942:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     952:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     962:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     972:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     982:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     992:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     9a2:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     9b2:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     9c2:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     9d2:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     9e2:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000009f0 <R22_Saturation_Temp>:
     9f0:	9a 99 c9 c1 33 33 6b c1 33 33 d3 c0 cd cc cc 3d     ....33k.33.....=
     a00:	48 e1 a2 40 66 66 2e 41 00 00 78 41 9a 99 9d 41     H..@ff.A..xA...A
     a10:	00 00 bc 41 cd cc d8 41 33 33 f3 41 66 66 06 42     ...A...A33.Aff.B
     a20:	66 66 12 42 9a 99 1d 42 66 66 28 42 cd cc 32 42     ff.B...Bff(B..2B
     a30:	cd cc 28 42 66 66 46 42 9a 99 4f 42 66 66 58 42     ..(BffFB..OBffXB
     a40:	33 33 61 42 9a 99 69 42 9a 99 71 42 33 33 79 42     33aB..iB..qB33yB
     a50:	9a 99 80 42 33 33 84 42 cd cc 87 42 66 66 8b 42     ...B33.B...Bff.B
     a60:	00 00 8f 42 66 66 92 42 9a 99 95 42 cd cc 98 42     ...Bff.B...B...B

00000a70 <prvIdleTask>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
     a70:	0a e8       	ldi	r16, 0x8A	; 138
     a72:	16 e0       	ldi	r17, 0x06	; 6
     a74:	0f 2e       	mov	r0, r31
     a76:	fa eb       	ldi	r31, 0xBA	; 186
     a78:	ef 2e       	mov	r14, r31
     a7a:	f6 e0       	ldi	r31, 0x06	; 6
     a7c:	ff 2e       	mov	r15, r31
     a7e:	f0 2d       	mov	r31, r0
     a80:	80 91 89 06 	lds	r24, 0x0689	; 0x800689 <uxDeletedTasksWaitingCleanUp>
     a84:	88 23       	and	r24, r24
     a86:	11 f1       	breq	.+68     	; 0xacc <prvIdleTask+0x5c>
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	0f 92       	push	r0
     a8e:	d8 01       	movw	r26, r16
     a90:	17 96       	adiw	r26, 0x07	; 7
     a92:	ed 91       	ld	r30, X+
     a94:	fc 91       	ld	r31, X
     a96:	18 97       	sbiw	r26, 0x08	; 8
     a98:	c0 85       	ldd	r28, Z+8	; 0x08
     a9a:	d1 85       	ldd	r29, Z+9	; 0x09
     a9c:	ce 01       	movw	r24, r28
     a9e:	02 96       	adiw	r24, 0x02	; 2
     aa0:	24 d3       	rcall	.+1608   	; 0x10ea <uxListRemove>
     aa2:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <uxCurrentNumberOfTasks>
     aa6:	81 50       	subi	r24, 0x01	; 1
     aa8:	80 93 7d 06 	sts	0x067D, r24	; 0x80067d <uxCurrentNumberOfTasks>
     aac:	80 91 89 06 	lds	r24, 0x0689	; 0x800689 <uxDeletedTasksWaitingCleanUp>
     ab0:	81 50       	subi	r24, 0x01	; 1
     ab2:	80 93 89 06 	sts	0x0689, r24	; 0x800689 <uxDeletedTasksWaitingCleanUp>
     ab6:	0f 90       	pop	r0
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     abc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     abe:	75 d0       	rcall	.+234    	; 0xbaa <vPortFree>
     ac0:	ce 01       	movw	r24, r28
     ac2:	73 d0       	rcall	.+230    	; 0xbaa <vPortFree>
     ac4:	80 91 89 06 	lds	r24, 0x0689	; 0x800689 <uxDeletedTasksWaitingCleanUp>
     ac8:	81 11       	cpse	r24, r1
     aca:	de cf       	rjmp	.-68     	; 0xa88 <prvIdleTask+0x18>
     acc:	f7 01       	movw	r30, r14
     ace:	80 81       	ld	r24, Z
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	08 f0       	brcs	.+2      	; 0xad6 <prvIdleTask+0x66>
     ad4:	3d d1       	rcall	.+634    	; 0xd50 <vPortYield>
     ad6:	73 d2       	rcall	.+1254   	; 0xfbe <vApplicationIdleHook>
     ad8:	d3 cf       	rjmp	.-90     	; 0xa80 <prvIdleTask+0x10>

00000ada <__ctors_end>:
     ada:	11 24       	eor	r1, r1
     adc:	1f be       	out	0x3f, r1	; 63
     ade:	cf ef       	ldi	r28, 0xFF	; 255
     ae0:	d1 e2       	ldi	r29, 0x21	; 33
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	cd bf       	out	0x3d, r28	; 61
     ae6:	00 e0       	ldi	r16, 0x00	; 0
     ae8:	0c bf       	out	0x3c, r16	; 60

00000aea <__do_copy_data>:
     aea:	16 e0       	ldi	r17, 0x06	; 6
     aec:	a0 e0       	ldi	r26, 0x00	; 0
     aee:	b2 e0       	ldi	r27, 0x02	; 2
     af0:	e6 e7       	ldi	r30, 0x76	; 118
     af2:	fc eb       	ldi	r31, 0xBC	; 188
     af4:	00 e0       	ldi	r16, 0x00	; 0
     af6:	0b bf       	out	0x3b, r16	; 59
     af8:	02 c0       	rjmp	.+4      	; 0xafe <__do_copy_data+0x14>
     afa:	07 90       	elpm	r0, Z+
     afc:	0d 92       	st	X+, r0
     afe:	aa 36       	cpi	r26, 0x6A	; 106
     b00:	b1 07       	cpc	r27, r17
     b02:	d9 f7       	brne	.-10     	; 0xafa <__do_copy_data+0x10>

00000b04 <__do_clear_bss>:
     b04:	2a e0       	ldi	r18, 0x0A	; 10
     b06:	aa e6       	ldi	r26, 0x6A	; 106
     b08:	b6 e0       	ldi	r27, 0x06	; 6
     b0a:	01 c0       	rjmp	.+2      	; 0xb0e <.do_clear_bss_start>

00000b0c <.do_clear_bss_loop>:
     b0c:	1d 92       	st	X+, r1

00000b0e <.do_clear_bss_start>:
     b0e:	a9 3b       	cpi	r26, 0xB9	; 185
     b10:	b2 07       	cpc	r27, r18
     b12:	e1 f7       	brne	.-8      	; 0xb0c <.do_clear_bss_loop>
     b14:	0e 94 c0 21 	call	0x4380	; 0x4380 <main>
     b18:	0c 94 39 5e 	jmp	0xbc72	; 0xbc72 <_exit>

00000b1c <__bad_interrupt>:
     b1c:	71 ca       	rjmp	.-2846   	; 0x0 <__vectors>

00000b1e <difftime>:
     b1e:	62 1b       	sub	r22, r18
     b20:	73 0b       	sbc	r23, r19
     b22:	84 0b       	sbc	r24, r20
     b24:	95 0b       	sbc	r25, r21
     b26:	08 95       	ret

00000b28 <time>:
     b28:	fc 01       	movw	r30, r24
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	60 91 b5 0a 	lds	r22, 0x0AB5	; 0x800ab5 <__system_time>
     b32:	70 91 b6 0a 	lds	r23, 0x0AB6	; 0x800ab6 <__system_time+0x1>
     b36:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <__system_time+0x2>
     b3a:	90 91 b8 0a 	lds	r25, 0x0AB8	; 0x800ab8 <__system_time+0x3>
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	30 97       	sbiw	r30, 0x00	; 0
     b42:	21 f0       	breq	.+8      	; 0xb4c <time+0x24>
     b44:	60 83       	st	Z, r22
     b46:	71 83       	std	Z+1, r23	; 0x01
     b48:	82 83       	std	Z+2, r24	; 0x02
     b4a:	93 83       	std	Z+3, r25	; 0x03
     b4c:	08 95       	ret

00000b4e <system_tick>:
     b4e:	8f 93       	push	r24
     b50:	8f b7       	in	r24, 0x3f	; 63
     b52:	8f 93       	push	r24
     b54:	f8 94       	cli
     b56:	80 91 b5 0a 	lds	r24, 0x0AB5	; 0x800ab5 <__system_time>
     b5a:	8f 5f       	subi	r24, 0xFF	; 255
     b5c:	80 93 b5 0a 	sts	0x0AB5, r24	; 0x800ab5 <__system_time>
     b60:	80 91 b6 0a 	lds	r24, 0x0AB6	; 0x800ab6 <__system_time+0x1>
     b64:	8f 4f       	sbci	r24, 0xFF	; 255
     b66:	80 93 b6 0a 	sts	0x0AB6, r24	; 0x800ab6 <__system_time+0x1>
     b6a:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <__system_time+0x2>
     b6e:	8f 4f       	sbci	r24, 0xFF	; 255
     b70:	80 93 b7 0a 	sts	0x0AB7, r24	; 0x800ab7 <__system_time+0x2>
     b74:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <__system_time+0x3>
     b78:	8f 4f       	sbci	r24, 0xFF	; 255
     b7a:	80 93 b8 0a 	sts	0x0AB8, r24	; 0x800ab8 <__system_time+0x3>
     b7e:	8f 91       	pop	r24
     b80:	8f bf       	out	0x3f, r24	; 63
     b82:	8f 91       	pop	r24
     b84:	08 95       	ret

00000b86 <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
     b8c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
     b90:	ce 01       	movw	r24, r28
     b92:	0e 94 00 5b 	call	0xb600	; 0xb600 <malloc>
     b96:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     b98:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     b9c:	20 97       	sbiw	r28, 0x00	; 0
     b9e:	09 f4       	brne	.+2      	; 0xba2 <pvPortMalloc+0x1c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     ba0:	27 d2       	rcall	.+1102   	; 0xff0 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
     ba2:	ce 01       	movw	r24, r28
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
	if( pv )
     bae:	00 97       	sbiw	r24, 0x00	; 0
     bb0:	41 f0       	breq	.+16     	; 0xbc2 <vPortFree+0x18>
     bb2:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
     bb4:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
		{
			free( pv );
     bb8:	ce 01       	movw	r24, r28
     bba:	0e 94 98 5b 	call	0xb730	; 0xb730 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
     bbe:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
	}
}
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <pxPortInitialiseStack>:
#elif defined( portUSE_TIMER2 )
        portTIMSK &= ~( _BV(OCIE2B)|_BV(OCIE2A)|_BV(TOIE2) );	// disable all Timer2 interrupts
        ASSR = 0x00;              								// set Timer/Counter2 to be off

#elif defined( portUSE_TIMER3 )
        portTIMSK &= ~( _BV(OCIE3B)|_BV(OCIE3A)|_BV(TOIE3) );	// disable all Timer3 interrupts
     bc8:	31 e1       	ldi	r19, 0x11	; 17
     bca:	fc 01       	movw	r30, r24
     bcc:	30 83       	st	Z, r19
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	22 e2       	ldi	r18, 0x22	; 34
     bd2:	20 83       	st	Z, r18
     bd4:	31 97       	sbiw	r30, 0x01	; 1
     bd6:	a3 e3       	ldi	r26, 0x33	; 51
     bd8:	a0 83       	st	Z, r26
     bda:	31 97       	sbiw	r30, 0x01	; 1
     bdc:	60 83       	st	Z, r22
     bde:	31 97       	sbiw	r30, 0x01	; 1
     be0:	70 83       	st	Z, r23
     be2:	31 97       	sbiw	r30, 0x01	; 1
     be4:	10 82       	st	Z, r1
     be6:	31 97       	sbiw	r30, 0x01	; 1
     be8:	10 82       	st	Z, r1
     bea:	31 97       	sbiw	r30, 0x01	; 1
     bec:	60 e8       	ldi	r22, 0x80	; 128
     bee:	60 83       	st	Z, r22
     bf0:	31 97       	sbiw	r30, 0x01	; 1
     bf2:	10 82       	st	Z, r1
     bf4:	31 97       	sbiw	r30, 0x01	; 1
     bf6:	10 82       	st	Z, r1
     bf8:	31 97       	sbiw	r30, 0x01	; 1
     bfa:	10 82       	st	Z, r1
     bfc:	31 97       	sbiw	r30, 0x01	; 1
     bfe:	62 e0       	ldi	r22, 0x02	; 2
     c00:	60 83       	st	Z, r22
     c02:	31 97       	sbiw	r30, 0x01	; 1
     c04:	63 e0       	ldi	r22, 0x03	; 3
     c06:	60 83       	st	Z, r22
     c08:	31 97       	sbiw	r30, 0x01	; 1
     c0a:	64 e0       	ldi	r22, 0x04	; 4
     c0c:	60 83       	st	Z, r22
     c0e:	31 97       	sbiw	r30, 0x01	; 1
     c10:	65 e0       	ldi	r22, 0x05	; 5
     c12:	60 83       	st	Z, r22
     c14:	31 97       	sbiw	r30, 0x01	; 1
     c16:	66 e0       	ldi	r22, 0x06	; 6
     c18:	60 83       	st	Z, r22
     c1a:	31 97       	sbiw	r30, 0x01	; 1
     c1c:	67 e0       	ldi	r22, 0x07	; 7
     c1e:	60 83       	st	Z, r22
     c20:	31 97       	sbiw	r30, 0x01	; 1
     c22:	68 e0       	ldi	r22, 0x08	; 8
     c24:	60 83       	st	Z, r22
     c26:	31 97       	sbiw	r30, 0x01	; 1
     c28:	69 e0       	ldi	r22, 0x09	; 9
     c2a:	60 83       	st	Z, r22
     c2c:	31 97       	sbiw	r30, 0x01	; 1
     c2e:	60 e1       	ldi	r22, 0x10	; 16
     c30:	60 83       	st	Z, r22
     c32:	31 97       	sbiw	r30, 0x01	; 1
     c34:	30 83       	st	Z, r19
     c36:	31 97       	sbiw	r30, 0x01	; 1
     c38:	32 e1       	ldi	r19, 0x12	; 18
     c3a:	30 83       	st	Z, r19
     c3c:	31 97       	sbiw	r30, 0x01	; 1
     c3e:	33 e1       	ldi	r19, 0x13	; 19
     c40:	30 83       	st	Z, r19
     c42:	31 97       	sbiw	r30, 0x01	; 1
     c44:	34 e1       	ldi	r19, 0x14	; 20
     c46:	30 83       	st	Z, r19
     c48:	31 97       	sbiw	r30, 0x01	; 1
     c4a:	35 e1       	ldi	r19, 0x15	; 21
     c4c:	30 83       	st	Z, r19
     c4e:	31 97       	sbiw	r30, 0x01	; 1
     c50:	36 e1       	ldi	r19, 0x16	; 22
     c52:	30 83       	st	Z, r19
     c54:	31 97       	sbiw	r30, 0x01	; 1
     c56:	37 e1       	ldi	r19, 0x17	; 23
     c58:	30 83       	st	Z, r19
     c5a:	31 97       	sbiw	r30, 0x01	; 1
     c5c:	38 e1       	ldi	r19, 0x18	; 24
     c5e:	30 83       	st	Z, r19
     c60:	31 97       	sbiw	r30, 0x01	; 1
     c62:	39 e1       	ldi	r19, 0x19	; 25
     c64:	30 83       	st	Z, r19
     c66:	31 97       	sbiw	r30, 0x01	; 1
     c68:	30 e2       	ldi	r19, 0x20	; 32
     c6a:	30 83       	st	Z, r19
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	31 e2       	ldi	r19, 0x21	; 33
     c70:	30 83       	st	Z, r19
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	20 83       	st	Z, r18
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	23 e2       	ldi	r18, 0x23	; 35
     c7a:	20 83       	st	Z, r18
     c7c:	31 97       	sbiw	r30, 0x01	; 1
     c7e:	40 83       	st	Z, r20
     c80:	31 97       	sbiw	r30, 0x01	; 1
     c82:	50 83       	st	Z, r21
     c84:	31 97       	sbiw	r30, 0x01	; 1
     c86:	26 e2       	ldi	r18, 0x26	; 38
     c88:	20 83       	st	Z, r18
     c8a:	31 97       	sbiw	r30, 0x01	; 1
     c8c:	27 e2       	ldi	r18, 0x27	; 39
     c8e:	20 83       	st	Z, r18
     c90:	31 97       	sbiw	r30, 0x01	; 1
     c92:	28 e2       	ldi	r18, 0x28	; 40
     c94:	20 83       	st	Z, r18
     c96:	31 97       	sbiw	r30, 0x01	; 1
     c98:	29 e2       	ldi	r18, 0x29	; 41
     c9a:	20 83       	st	Z, r18
     c9c:	31 97       	sbiw	r30, 0x01	; 1
     c9e:	20 e3       	ldi	r18, 0x30	; 48
     ca0:	20 83       	st	Z, r18
     ca2:	31 97       	sbiw	r30, 0x01	; 1
     ca4:	21 e3       	ldi	r18, 0x31	; 49
     ca6:	20 83       	st	Z, r18
     ca8:	89 97       	sbiw	r24, 0x29	; 41
     caa:	08 95       	ret

00000cac <xPortStartScheduler>:
     cac:	88 ee       	ldi	r24, 0xE8	; 232
     cae:	93 e0       	ldi	r25, 0x03	; 3
     cb0:	a0 e0       	ldi	r26, 0x00	; 0
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <portTickRateHz>
     cb8:	90 93 52 07 	sts	0x0752, r25	; 0x800752 <portTickRateHz+0x1>
     cbc:	a0 93 53 07 	sts	0x0753, r26	; 0x800753 <portTickRateHz+0x2>
     cc0:	b0 93 54 07 	sts	0x0754, r27	; 0x800754 <portTickRateHz+0x3>
     cc4:	80 93 55 07 	sts	0x0755, r24	; 0x800755 <ticksRemainingInSec>
     cc8:	90 93 56 07 	sts	0x0756, r25	; 0x800756 <ticksRemainingInSec+0x1>
     ccc:	a0 93 57 07 	sts	0x0757, r26	; 0x800757 <ticksRemainingInSec+0x2>
     cd0:	b0 93 58 07 	sts	0x0758, r27	; 0x800758 <ticksRemainingInSec+0x3>
     cd4:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     cd8:	89 ef       	ldi	r24, 0xF9	; 249
     cda:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     cde:	8b e0       	ldi	r24, 0x0B	; 11
     ce0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
     ce4:	e1 e7       	ldi	r30, 0x71	; 113
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	82 60       	ori	r24, 0x02	; 2
     cec:	80 83       	st	Z, r24
     cee:	a0 91 e6 06 	lds	r26, 0x06E6	; 0x8006e6 <pxCurrentTCB>
     cf2:	b0 91 e7 06 	lds	r27, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
     cf6:	cd 91       	ld	r28, X+
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	dd 91       	ld	r29, X+
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	ff 91       	pop	r31
     d00:	ef 91       	pop	r30
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	bf 91       	pop	r27
     d08:	af 91       	pop	r26
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	7f 91       	pop	r23
     d10:	6f 91       	pop	r22
     d12:	5f 91       	pop	r21
     d14:	4f 91       	pop	r20
     d16:	3f 91       	pop	r19
     d18:	2f 91       	pop	r18
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	ff 90       	pop	r15
     d20:	ef 90       	pop	r14
     d22:	df 90       	pop	r13
     d24:	cf 90       	pop	r12
     d26:	bf 90       	pop	r11
     d28:	af 90       	pop	r10
     d2a:	9f 90       	pop	r9
     d2c:	8f 90       	pop	r8
     d2e:	7f 90       	pop	r7
     d30:	6f 90       	pop	r6
     d32:	5f 90       	pop	r5
     d34:	4f 90       	pop	r4
     d36:	3f 90       	pop	r3
     d38:	2f 90       	pop	r2
     d3a:	1f 90       	pop	r1
     d3c:	0f 90       	pop	r0
     d3e:	0c be       	out	0x3c, r0	; 60
     d40:	0f 90       	pop	r0
     d42:	0b be       	out	0x3b, r0	; 59
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	0f 90       	pop	r0
     d4a:	08 95       	ret
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	08 95       	ret

00000d50 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	0f 92       	push	r0
     d58:	0b b6       	in	r0, 0x3b	; 59
     d5a:	0f 92       	push	r0
     d5c:	0c b6       	in	r0, 0x3c	; 60
     d5e:	0f 92       	push	r0
     d60:	1f 92       	push	r1
     d62:	11 24       	eor	r1, r1
     d64:	2f 92       	push	r2
     d66:	3f 92       	push	r3
     d68:	4f 92       	push	r4
     d6a:	5f 92       	push	r5
     d6c:	6f 92       	push	r6
     d6e:	7f 92       	push	r7
     d70:	8f 92       	push	r8
     d72:	9f 92       	push	r9
     d74:	af 92       	push	r10
     d76:	bf 92       	push	r11
     d78:	cf 92       	push	r12
     d7a:	df 92       	push	r13
     d7c:	ef 92       	push	r14
     d7e:	ff 92       	push	r15
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	2f 93       	push	r18
     d86:	3f 93       	push	r19
     d88:	4f 93       	push	r20
     d8a:	5f 93       	push	r21
     d8c:	6f 93       	push	r22
     d8e:	7f 93       	push	r23
     d90:	8f 93       	push	r24
     d92:	9f 93       	push	r25
     d94:	af 93       	push	r26
     d96:	bf 93       	push	r27
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31
     da0:	a0 91 e6 06 	lds	r26, 0x06E6	; 0x8006e6 <pxCurrentTCB>
     da4:	b0 91 e7 06 	lds	r27, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
     da8:	0d b6       	in	r0, 0x3d	; 61
     daa:	0d 92       	st	X+, r0
     dac:	0e b6       	in	r0, 0x3e	; 62
     dae:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     db0:	0e 94 09 18 	call	0x3012	; 0x3012 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     db4:	a0 91 e6 06 	lds	r26, 0x06E6	; 0x8006e6 <pxCurrentTCB>
     db8:	b0 91 e7 06 	lds	r27, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
     dbc:	cd 91       	ld	r28, X+
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	dd 91       	ld	r29, X+
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	bf 91       	pop	r27
     dce:	af 91       	pop	r26
     dd0:	9f 91       	pop	r25
     dd2:	8f 91       	pop	r24
     dd4:	7f 91       	pop	r23
     dd6:	6f 91       	pop	r22
     dd8:	5f 91       	pop	r21
     dda:	4f 91       	pop	r20
     ddc:	3f 91       	pop	r19
     dde:	2f 91       	pop	r18
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	ff 90       	pop	r15
     de6:	ef 90       	pop	r14
     de8:	df 90       	pop	r13
     dea:	cf 90       	pop	r12
     dec:	bf 90       	pop	r11
     dee:	af 90       	pop	r10
     df0:	9f 90       	pop	r9
     df2:	8f 90       	pop	r8
     df4:	7f 90       	pop	r7
     df6:	6f 90       	pop	r6
     df8:	5f 90       	pop	r5
     dfa:	4f 90       	pop	r4
     dfc:	3f 90       	pop	r3
     dfe:	2f 90       	pop	r2
     e00:	1f 90       	pop	r1
     e02:	0f 90       	pop	r0
     e04:	0c be       	out	0x3c, r0	; 60
     e06:	0f 90       	pop	r0
     e08:	0b be       	out	0x3b, r0	; 59
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
     e10:	08 95       	ret

00000e12 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     e12:	0f 92       	push	r0
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	0f 92       	push	r0
     e1a:	0b b6       	in	r0, 0x3b	; 59
     e1c:	0f 92       	push	r0
     e1e:	0c b6       	in	r0, 0x3c	; 60
     e20:	0f 92       	push	r0
     e22:	1f 92       	push	r1
     e24:	11 24       	eor	r1, r1
     e26:	2f 92       	push	r2
     e28:	3f 92       	push	r3
     e2a:	4f 92       	push	r4
     e2c:	5f 92       	push	r5
     e2e:	6f 92       	push	r6
     e30:	7f 92       	push	r7
     e32:	8f 92       	push	r8
     e34:	9f 92       	push	r9
     e36:	af 92       	push	r10
     e38:	bf 92       	push	r11
     e3a:	cf 92       	push	r12
     e3c:	df 92       	push	r13
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	2f 93       	push	r18
     e48:	3f 93       	push	r19
     e4a:	4f 93       	push	r20
     e4c:	5f 93       	push	r21
     e4e:	6f 93       	push	r22
     e50:	7f 93       	push	r23
     e52:	8f 93       	push	r24
     e54:	9f 93       	push	r25
     e56:	af 93       	push	r26
     e58:	bf 93       	push	r27
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
     e62:	a0 91 e6 06 	lds	r26, 0x06E6	; 0x8006e6 <pxCurrentTCB>
     e66:	b0 91 e7 06 	lds	r27, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
     e6a:	0d b6       	in	r0, 0x3d	; 61
     e6c:	0d 92       	st	X+, r0
     e6e:	0e b6       	in	r0, 0x3e	; 62
     e70:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
     e72:	13 be       	out	0x33, r1	; 51
	// start mark - check for start of interrupt - for debugging only
	PORTD |=  _BV(PORTD7);				// Ping IO line.
#endif

#if !defined(portUSE_TIMER2_RTC)
	if (--ticksRemainingInSec == 0)
     e74:	80 91 55 07 	lds	r24, 0x0755	; 0x800755 <ticksRemainingInSec>
     e78:	90 91 56 07 	lds	r25, 0x0756	; 0x800756 <ticksRemainingInSec+0x1>
     e7c:	a0 91 57 07 	lds	r26, 0x0757	; 0x800757 <ticksRemainingInSec+0x2>
     e80:	b0 91 58 07 	lds	r27, 0x0758	; 0x800758 <ticksRemainingInSec+0x3>
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	a1 09       	sbc	r26, r1
     e88:	b1 09       	sbc	r27, r1
     e8a:	80 93 55 07 	sts	0x0755, r24	; 0x800755 <ticksRemainingInSec>
     e8e:	90 93 56 07 	sts	0x0756, r25	; 0x800756 <ticksRemainingInSec+0x1>
     e92:	a0 93 57 07 	sts	0x0757, r26	; 0x800757 <ticksRemainingInSec+0x2>
     e96:	b0 93 58 07 	sts	0x0758, r27	; 0x800758 <ticksRemainingInSec+0x3>
     e9a:	89 2b       	or	r24, r25
     e9c:	8a 2b       	or	r24, r26
     e9e:	8b 2b       	or	r24, r27
     ea0:	89 f4       	brne	.+34     	; 0xec4 <vPortYieldFromTick+0xb2>
	{
		system_tick();
     ea2:	55 de       	rcall	.-854    	; 0xb4e <system_tick>
		ticksRemainingInSec = portTickRateHz;
     ea4:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <portTickRateHz>
     ea8:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <portTickRateHz+0x1>
     eac:	a0 91 53 07 	lds	r26, 0x0753	; 0x800753 <portTickRateHz+0x2>
     eb0:	b0 91 54 07 	lds	r27, 0x0754	; 0x800754 <portTickRateHz+0x3>
     eb4:	80 93 55 07 	sts	0x0755, r24	; 0x800755 <ticksRemainingInSec>
     eb8:	90 93 56 07 	sts	0x0756, r25	; 0x800756 <ticksRemainingInSec+0x1>
     ebc:	a0 93 57 07 	sts	0x0757, r26	; 0x800757 <ticksRemainingInSec+0x2>
     ec0:	b0 93 58 07 	sts	0x0758, r27	; 0x800758 <ticksRemainingInSec+0x3>
	}
#endif

	if( xTaskIncrementTick() != pdFALSE )
     ec4:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <xTaskIncrementTick>
     ec8:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     eca:	0e 94 09 18 	call	0x3012	; 0x3012 <vTaskSwitchContext>
#if defined(DEBUG_PING)
	// end mark - check for end of interrupt - for debugging only
	PORTD &= ~_BV(PORTD7);
#endif

	portRESTORE_CONTEXT();
     ece:	a0 91 e6 06 	lds	r26, 0x06E6	; 0x8006e6 <pxCurrentTCB>
     ed2:	b0 91 e7 06 	lds	r27, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
     ed6:	cd 91       	ld	r28, X+
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	dd 91       	ld	r29, X+
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	ff 91       	pop	r31
     ee0:	ef 91       	pop	r30
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	bf 91       	pop	r27
     ee8:	af 91       	pop	r26
     eea:	9f 91       	pop	r25
     eec:	8f 91       	pop	r24
     eee:	7f 91       	pop	r23
     ef0:	6f 91       	pop	r22
     ef2:	5f 91       	pop	r21
     ef4:	4f 91       	pop	r20
     ef6:	3f 91       	pop	r19
     ef8:	2f 91       	pop	r18
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
     f02:	df 90       	pop	r13
     f04:	cf 90       	pop	r12
     f06:	bf 90       	pop	r11
     f08:	af 90       	pop	r10
     f0a:	9f 90       	pop	r9
     f0c:	8f 90       	pop	r8
     f0e:	7f 90       	pop	r7
     f10:	6f 90       	pop	r6
     f12:	5f 90       	pop	r5
     f14:	4f 90       	pop	r4
     f16:	3f 90       	pop	r3
     f18:	2f 90       	pop	r2
     f1a:	1f 90       	pop	r1
     f1c:	0f 90       	pop	r0
     f1e:	0c be       	out	0x3c, r0	; 60
     f20:	0f 90       	pop	r0
     f22:	0b be       	out	0x3b, r0	; 59
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
     f2a:	08 95       	ret

00000f2c <__vector_32>:
	 * count is incremented after the context is saved.
	 */
	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
     f2c:	72 df       	rcall	.-284    	; 0xe12 <vPortYieldFromTick>
		__asm__ __volatile__ ( "reti" );
     f2e:	18 95       	reti

00000f30 <setAnalogMode>:
// For example: if (getMode() == MODE_8_BIT) ...

inline uint8_t getAnalogMode(void)
{
	return (ADMUX >> ADLAR) & 1;
}
     f30:	81 11       	cpse	r24, r1
     f32:	06 c0       	rjmp	.+12     	; 0xf40 <setAnalogMode+0x10>
     f34:	ec e7       	ldi	r30, 0x7C	; 124
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	8f 7d       	andi	r24, 0xDF	; 223
     f3c:	80 83       	st	Z, r24
     f3e:	08 95       	ret
     f40:	ec e7       	ldi	r30, 0x7C	; 124
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	80 62       	ori	r24, 0x20	; 32
     f48:	80 83       	st	Z, r24
     f4a:	08 95       	ret

00000f4c <analogIsConverting>:

// returns 1 if the ADC is in the middle of an conversion, otherwise
// returns 0
inline uint8_t analogIsConverting(void)
{
	return (ADCSRA >> ADSC) & 1;
     f4c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
}
     f50:	86 fb       	bst	r24, 6
     f52:	88 27       	eor	r24, r24
     f54:	80 f9       	bld	r24, 0
     f56:	08 95       	ret

00000f58 <startAnalogConversion>:
//  Orangutan SVP.

inline void startAnalogConversion(uint8_t channel, uint8_t use_internal_reference)
{
	// Channel numbers greater than 15 on 328p or 1284p or 31 on 2560 are invalid.
	if (channel > 0x1F)
     f58:	80 32       	cpi	r24, 0x20	; 32
     f5a:	18 f5       	brcc	.+70     	; 0xfa2 <startAnalogConversion+0x4a>
	{
		return;
	}

	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
     f5c:	97 e8       	ldi	r25, 0x87	; 135
     f5e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	// to channel 0, which can affect the ADC charge capacitor.  For example, if you have a
	// high output impedance voltage on channel 1 and a low output impedance voltage on channel
	// 0, the voltage on channel 0 be briefly applied to the ADC capacitor before every conversion,
	// which could prevent the capacitor from settling to the voltage on channel 1, even over
	// many reads.
	uint8_t tempADMUX = ADMUX;
     f62:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	tempADMUX |= _BV(REFS0);		// Use external capacitor on ARef
	if(use_internal_reference)		// Note: internal reference should NOT be used on devices
     f66:	66 23       	and	r22, r22
     f68:	11 f0       	breq	.+4      	; 0xf6e <startAnalogConversion+0x16>
	{								//  where AREF is connected to an external voltage!
		// use the internal voltage reference
		tempADMUX |= _BV(REFS1);	// Internal reference: 1.1 V on ATmega48/168/328; 2.56 V on ATmega324/644/1284
     f6a:	90 6c       	ori	r25, 0xC0	; 192
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <startAnalogConversion+0x1a>
     f6e:	9f 77       	andi	r25, 0x7F	; 127
	}
	else
	{
		// use AVcc as a reference
		tempADMUX &= ~_BV(REFS1);	// External reference: on AVcc
     f70:	90 64       	ori	r25, 0x40	; 64
	}

	tempADMUX &= ~0x1F;		 // clear channel selection bits of ADMUX
     f72:	90 7e       	andi	r25, 0xE0	; 224
	#ifdef MUX5
	if (channel > 7) {
     f74:	88 30       	cpi	r24, 0x08	; 8
     f76:	40 f0       	brcs	.+16     	; 0xf88 <startAnalogConversion+0x30>
		ADCSRB |= _BV(MUX5);
     f78:	eb e7       	ldi	r30, 0x7B	; 123
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	20 81       	ld	r18, Z
     f7e:	28 60       	ori	r18, 0x08	; 8
     f80:	20 83       	st	Z, r18
		tempADMUX |= channel - 8; 
     f82:	88 50       	subi	r24, 0x08	; 8
     f84:	89 2b       	or	r24, r25
     f86:	06 c0       	rjmp	.+12     	; 0xf94 <startAnalogConversion+0x3c>
		} else {
		ADCSRB &= ~(_BV(MUX5));
     f88:	eb e7       	ldi	r30, 0x7B	; 123
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	20 81       	ld	r18, Z
     f8e:	27 7f       	andi	r18, 0xF7	; 247
     f90:	20 83       	st	Z, r18
		tempADMUX |= channel;
     f92:	89 2b       	or	r24, r25
	}
	#endif
	
	   // we only get this far if channel is less than 32
	ADMUX = tempADMUX;
     f94:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA |= _BV(ADSC); // start the conversion
     f98:	ea e7       	ldi	r30, 0x7A	; 122
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	80 64       	ori	r24, 0x40	; 64
     fa0:	80 83       	st	Z, r24
     fa2:	08 95       	ret

00000fa4 <analogConversionResult>:
// MODE_8_BIT and MODE_10_BIT:
// For example: if (getMode() == MODE_8_BIT) ...

inline uint8_t getAnalogMode(void)
{
	return (ADMUX >> ADLAR) & 1;
     fa4:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
}

// returns the result of the previous ADC conversion.
inline uint16_t analogConversionResult(void)
{
	if (getAnalogMode())				// if left-adjusted (i.e. 8-bit mode)
     fa8:	85 ff       	sbrs	r24, 5
     faa:	04 c0       	rjmp	.+8      	; 0xfb4 <analogConversionResult+0x10>
	{
		return (uint16_t) ADCH;			// 8-bit result
     fac:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	08 95       	ret
	}
	else
	{
		return ADC;				// 10-bit result
     fb4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     fb8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	}
}
     fbc:	08 95       	ret

00000fbe <vApplicationIdleHook>:
	// The corresponding PIN Register bit will always read as zero when this bit is set. When an
	// analogue signal is applied to the ADC7..0 pin and the digital input from this pin is not needed, this
	// bit should be written logic one to reduce power consumption in the digital input buffer.

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
	DIDR0 = 0xFF;
     fbe:	8f ef       	ldi	r24, 0xFF	; 255
     fc0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xFF;
     fc4:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	// When the ACD bit is written logic one, the power to the Analogue Comparator is switched off.
	// This bit can be set at any time to turn off the Analogue Comparator.
	// This will reduce power consumption in Active and Idle mode.
	// When changing the ACD bit, the Analogue Comparator Interrupt must be disabled by clearing the ACIE bit in ACSR.
	// Otherwise an interrupt can occur when the ACD bit is changed.
	ACSR &= ~_BV(ACIE);
     fc8:	80 b7       	in	r24, 0x30	; 48
     fca:	87 7f       	andi	r24, 0xF7	; 247
     fcc:	80 bf       	out	0x30, r24	; 48
	ACSR |=  _BV(ACD);
     fce:	80 b7       	in	r24, 0x30	; 48
     fd0:	80 68       	ori	r24, 0x80	; 128
     fd2:	80 bf       	out	0x30, r24	; 48
	// SLEEP_MODE_PWR_DOWN     _BV(SM1)
	// SLEEP_MODE_PWR_SAVE     (_BV(SM0) | _BV(SM1))
	// SLEEP_MODE_STANDBY      (_BV(SM1) | _BV(SM2))
	// SLEEP_MODE_EXT_STANDBY  (_BV(SM0) | _BV(SM1) | _BV(SM2))

	set_sleep_mode( SLEEP_MODE_IDLE );
     fd4:	83 b7       	in	r24, 0x33	; 51
     fd6:	81 7f       	andi	r24, 0xF1	; 241
     fd8:	83 bf       	out	0x33, r24	; 51

	portENTER_CRITICAL();
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	0f 92       	push	r0
	sleep_enable();
     fe0:	83 b7       	in	r24, 0x33	; 51
     fe2:	81 60       	ori	r24, 0x01	; 1
     fe4:	83 bf       	out	0x33, r24	; 51

#if defined(BODS) && defined(BODSE) // only if there is support to disable the BOD.
	sleep_bod_disable();
#endif

	portEXIT_CRITICAL();
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
	sleep_cpu();		// good night.
     fea:	88 95       	sleep

	sleep_reset();		// reset the sleep_mode() faster than sleep_disable();
     fec:	13 be       	out	0x33, r1	; 51
     fee:	08 95       	ret

00000ff0 <vApplicationMallocFailedHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
     ff0:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     ff2:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ff4:	00 00       	nop
	for(;;)
	{
		_delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
     ff6:	1f 9a       	sbi	0x03, 7	; 3
     ff8:	fd cf       	rjmp	.-6      	; 0xff4 <vApplicationMallocFailedHook+0x4>

00000ffa <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
     ffa:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     ffc:	2f 9a       	sbi	0x05, 7	; 5
     ffe:	00 c0       	rjmp	.+0      	; 0x1000 <vApplicationStackOverflowHook+0x6>
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    1000:	1f 9a       	sbi	0x03, 7	; 3
    1002:	fd cf       	rjmp	.-6      	; 0xffe <vApplicationStackOverflowHook+0x4>

00001004 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1004:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1006:	03 96       	adiw	r24, 0x03	; 3
    1008:	92 83       	std	Z+2, r25	; 0x02
    100a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    100c:	4f ef       	ldi	r20, 0xFF	; 255
    100e:	5f ef       	ldi	r21, 0xFF	; 255
    1010:	ba 01       	movw	r22, r20
    1012:	43 83       	std	Z+3, r20	; 0x03
    1014:	54 83       	std	Z+4, r21	; 0x04
    1016:	65 83       	std	Z+5, r22	; 0x05
    1018:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    101a:	90 87       	std	Z+8, r25	; 0x08
    101c:	87 83       	std	Z+7, r24	; 0x07
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    101e:	92 87       	std	Z+10, r25	; 0x0a
    1020:	81 87       	std	Z+9, r24	; 0x09

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1022:	10 82       	st	Z, r1
    1024:	08 95       	ret

00001026 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1026:	fc 01       	movw	r30, r24
    1028:	13 86       	std	Z+11, r1	; 0x0b
    102a:	12 86       	std	Z+10, r1	; 0x0a
    102c:	08 95       	ret

0000102e <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	9c 01       	movw	r18, r24
    1034:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1036:	dc 01       	movw	r26, r24
    1038:	11 96       	adiw	r26, 0x01	; 1
    103a:	cd 91       	ld	r28, X+
    103c:	dc 91       	ld	r29, X
    103e:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1040:	d5 83       	std	Z+5, r29	; 0x05
    1042:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1044:	8e 81       	ldd	r24, Y+6	; 0x06
    1046:	9f 81       	ldd	r25, Y+7	; 0x07
    1048:	97 83       	std	Z+7, r25	; 0x07
    104a:	86 83       	std	Z+6, r24	; 0x06

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    104c:	8e 81       	ldd	r24, Y+6	; 0x06
    104e:	9f 81       	ldd	r25, Y+7	; 0x07
    1050:	dc 01       	movw	r26, r24
    1052:	15 96       	adiw	r26, 0x05	; 5
    1054:	7c 93       	st	X, r23
    1056:	6e 93       	st	-X, r22
    1058:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxPrevious = pxNewListItem;
    105a:	7f 83       	std	Y+7, r23	; 0x07
    105c:	6e 83       	std	Y+6, r22	; 0x06

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    105e:	33 87       	std	Z+11, r19	; 0x0b
    1060:	22 87       	std	Z+10, r18	; 0x0a

	( pxList->uxNumberOfItems )++;
    1062:	f9 01       	movw	r30, r18
    1064:	80 81       	ld	r24, Z
    1066:	8f 5f       	subi	r24, 0xFF	; 255
    1068:	80 83       	st	Z, r24
}
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	08 95       	ret

00001070 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    107a:	08 81       	ld	r16, Y
    107c:	19 81       	ldd	r17, Y+1	; 0x01
    107e:	2a 81       	ldd	r18, Y+2	; 0x02
    1080:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1082:	0f 3f       	cpi	r16, 0xFF	; 255
    1084:	4f ef       	ldi	r20, 0xFF	; 255
    1086:	14 07       	cpc	r17, r20
    1088:	24 07       	cpc	r18, r20
    108a:	34 07       	cpc	r19, r20
    108c:	21 f4       	brne	.+8      	; 0x1096 <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    108e:	fc 01       	movw	r30, r24
    1090:	a1 85       	ldd	r26, Z+9	; 0x09
    1092:	b2 85       	ldd	r27, Z+10	; 0x0a
    1094:	11 c0       	rjmp	.+34     	; 0x10b8 <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1096:	dc 01       	movw	r26, r24
    1098:	13 96       	adiw	r26, 0x03	; 3
    109a:	01 c0       	rjmp	.+2      	; 0x109e <vListInsert+0x2e>
    109c:	df 01       	movw	r26, r30
    109e:	14 96       	adiw	r26, 0x04	; 4
    10a0:	ed 91       	ld	r30, X+
    10a2:	fc 91       	ld	r31, X
    10a4:	15 97       	sbiw	r26, 0x05	; 5
    10a6:	40 81       	ld	r20, Z
    10a8:	51 81       	ldd	r21, Z+1	; 0x01
    10aa:	62 81       	ldd	r22, Z+2	; 0x02
    10ac:	73 81       	ldd	r23, Z+3	; 0x03
    10ae:	04 17       	cp	r16, r20
    10b0:	15 07       	cpc	r17, r21
    10b2:	26 07       	cpc	r18, r22
    10b4:	37 07       	cpc	r19, r23
    10b6:	90 f7       	brcc	.-28     	; 0x109c <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    10b8:	14 96       	adiw	r26, 0x04	; 4
    10ba:	ed 91       	ld	r30, X+
    10bc:	fc 91       	ld	r31, X
    10be:	15 97       	sbiw	r26, 0x05	; 5
    10c0:	fd 83       	std	Y+5, r31	; 0x05
    10c2:	ec 83       	std	Y+4, r30	; 0x04
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    10c4:	d7 83       	std	Z+7, r29	; 0x07
    10c6:	c6 83       	std	Z+6, r28	; 0x06
	pxNewListItem->pxPrevious = pxIterator;
    10c8:	bf 83       	std	Y+7, r27	; 0x07
    10ca:	ae 83       	std	Y+6, r26	; 0x06
	pxIterator->pxNext = pxNewListItem;
    10cc:	15 96       	adiw	r26, 0x05	; 5
    10ce:	dc 93       	st	X, r29
    10d0:	ce 93       	st	-X, r28
    10d2:	14 97       	sbiw	r26, 0x04	; 4

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    10d4:	9b 87       	std	Y+11, r25	; 0x0b
    10d6:	8a 87       	std	Y+10, r24	; 0x0a

	( pxList->uxNumberOfItems )++;
    10d8:	fc 01       	movw	r30, r24
    10da:	20 81       	ld	r18, Z
    10dc:	2f 5f       	subi	r18, 0xFF	; 255
    10de:	20 83       	st	Z, r18
}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	08 95       	ret

000010ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    10f0:	a2 85       	ldd	r26, Z+10	; 0x0a
    10f2:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    10f4:	c4 81       	ldd	r28, Z+4	; 0x04
    10f6:	d5 81       	ldd	r29, Z+5	; 0x05
    10f8:	86 81       	ldd	r24, Z+6	; 0x06
    10fa:	97 81       	ldd	r25, Z+7	; 0x07
    10fc:	9f 83       	std	Y+7, r25	; 0x07
    10fe:	8e 83       	std	Y+6, r24	; 0x06
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1100:	c6 81       	ldd	r28, Z+6	; 0x06
    1102:	d7 81       	ldd	r29, Z+7	; 0x07
    1104:	84 81       	ldd	r24, Z+4	; 0x04
    1106:	95 81       	ldd	r25, Z+5	; 0x05
    1108:	9d 83       	std	Y+5, r25	; 0x05
    110a:	8c 83       	std	Y+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    110c:	11 96       	adiw	r26, 0x01	; 1
    110e:	8d 91       	ld	r24, X+
    1110:	9c 91       	ld	r25, X
    1112:	12 97       	sbiw	r26, 0x02	; 2
    1114:	e8 17       	cp	r30, r24
    1116:	f9 07       	cpc	r31, r25
    1118:	31 f4       	brne	.+12     	; 0x1126 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    111a:	86 81       	ldd	r24, Z+6	; 0x06
    111c:	97 81       	ldd	r25, Z+7	; 0x07
    111e:	12 96       	adiw	r26, 0x02	; 2
    1120:	9c 93       	st	X, r25
    1122:	8e 93       	st	-X, r24
    1124:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1126:	13 86       	std	Z+11, r1	; 0x0b
    1128:	12 86       	std	Z+10, r1	; 0x0a
	( pxList->uxNumberOfItems )--;
    112a:	8c 91       	ld	r24, X
    112c:	81 50       	subi	r24, 0x01	; 1
    112e:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
    1130:	8c 91       	ld	r24, X
}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	0f 92       	push	r0
    113e:	fc 01       	movw	r30, r24
    1140:	96 8d       	ldd	r25, Z+30	; 0x1e
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	91 11       	cpse	r25, r1
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	08 95       	ret

0000114e <prvCopyDataToQueue>:
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	ec 01       	movw	r28, r24
    1158:	04 2f       	mov	r16, r20
    115a:	1e 8d       	ldd	r17, Y+30	; 0x1e
    115c:	48 a1       	ldd	r20, Y+32	; 0x20
    115e:	41 11       	cpse	r20, r1
    1160:	0c c0       	rjmp	.+24     	; 0x117a <prvCopyDataToQueue+0x2c>
    1162:	88 81       	ld	r24, Y
    1164:	99 81       	ldd	r25, Y+1	; 0x01
    1166:	89 2b       	or	r24, r25
    1168:	09 f0       	breq	.+2      	; 0x116c <prvCopyDataToQueue+0x1e>
    116a:	42 c0       	rjmp	.+132    	; 0x11f0 <prvCopyDataToQueue+0xa2>
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	9b 81       	ldd	r25, Y+3	; 0x03
    1170:	0e 94 2a 1a 	call	0x3454	; 0x3454 <xTaskPriorityDisinherit>
    1174:	1b 82       	std	Y+3, r1	; 0x03
    1176:	1a 82       	std	Y+2, r1	; 0x02
    1178:	42 c0       	rjmp	.+132    	; 0x11fe <prvCopyDataToQueue+0xb0>
    117a:	01 11       	cpse	r16, r1
    117c:	17 c0       	rjmp	.+46     	; 0x11ac <prvCopyDataToQueue+0x5e>
    117e:	50 e0       	ldi	r21, 0x00	; 0
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	9d 81       	ldd	r25, Y+5	; 0x05
    1184:	0e 94 04 5d 	call	0xba08	; 0xba08 <memcpy>
    1188:	28 a1       	ldd	r18, Y+32	; 0x20
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	9d 81       	ldd	r25, Y+5	; 0x05
    118e:	82 0f       	add	r24, r18
    1190:	91 1d       	adc	r25, r1
    1192:	9d 83       	std	Y+5, r25	; 0x05
    1194:	8c 83       	std	Y+4, r24	; 0x04
    1196:	2a 81       	ldd	r18, Y+2	; 0x02
    1198:	3b 81       	ldd	r19, Y+3	; 0x03
    119a:	82 17       	cp	r24, r18
    119c:	93 07       	cpc	r25, r19
    119e:	50 f1       	brcs	.+84     	; 0x11f4 <prvCopyDataToQueue+0xa6>
    11a0:	88 81       	ld	r24, Y
    11a2:	99 81       	ldd	r25, Y+1	; 0x01
    11a4:	9d 83       	std	Y+5, r25	; 0x05
    11a6:	8c 83       	std	Y+4, r24	; 0x04
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	29 c0       	rjmp	.+82     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11ac:	50 e0       	ldi	r21, 0x00	; 0
    11ae:	8e 81       	ldd	r24, Y+6	; 0x06
    11b0:	9f 81       	ldd	r25, Y+7	; 0x07
    11b2:	0e 94 04 5d 	call	0xba08	; 0xba08 <memcpy>
    11b6:	88 a1       	ldd	r24, Y+32	; 0x20
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	91 95       	neg	r25
    11bc:	81 95       	neg	r24
    11be:	91 09       	sbc	r25, r1
    11c0:	2e 81       	ldd	r18, Y+6	; 0x06
    11c2:	3f 81       	ldd	r19, Y+7	; 0x07
    11c4:	28 0f       	add	r18, r24
    11c6:	39 1f       	adc	r19, r25
    11c8:	3f 83       	std	Y+7, r19	; 0x07
    11ca:	2e 83       	std	Y+6, r18	; 0x06
    11cc:	48 81       	ld	r20, Y
    11ce:	59 81       	ldd	r21, Y+1	; 0x01
    11d0:	24 17       	cp	r18, r20
    11d2:	35 07       	cpc	r19, r21
    11d4:	30 f4       	brcc	.+12     	; 0x11e2 <prvCopyDataToQueue+0x94>
    11d6:	2a 81       	ldd	r18, Y+2	; 0x02
    11d8:	3b 81       	ldd	r19, Y+3	; 0x03
    11da:	82 0f       	add	r24, r18
    11dc:	93 1f       	adc	r25, r19
    11de:	9f 83       	std	Y+7, r25	; 0x07
    11e0:	8e 83       	std	Y+6, r24	; 0x06
    11e2:	02 30       	cpi	r16, 0x02	; 2
    11e4:	49 f4       	brne	.+18     	; 0x11f8 <prvCopyDataToQueue+0xaa>
    11e6:	11 23       	and	r17, r17
    11e8:	49 f0       	breq	.+18     	; 0x11fc <prvCopyDataToQueue+0xae>
    11ea:	11 50       	subi	r17, 0x01	; 1
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	07 c0       	rjmp	.+14     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	05 c0       	rjmp	.+10     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <prvCopyDataToQueue+0xb0>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	1f 5f       	subi	r17, 0xFF	; 255
    1200:	1e 8f       	std	Y+30, r17	; 0x1e
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	08 95       	ret

0000120c <prvCopyDataFromQueue>:
    120c:	fc 01       	movw	r30, r24
    120e:	40 a1       	ldd	r20, Z+32	; 0x20
    1210:	44 23       	and	r20, r20
    1212:	a9 f0       	breq	.+42     	; 0x123e <prvCopyDataFromQueue+0x32>
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	26 81       	ldd	r18, Z+6	; 0x06
    1218:	37 81       	ldd	r19, Z+7	; 0x07
    121a:	24 0f       	add	r18, r20
    121c:	35 1f       	adc	r19, r21
    121e:	37 83       	std	Z+7, r19	; 0x07
    1220:	26 83       	std	Z+6, r18	; 0x06
    1222:	82 81       	ldd	r24, Z+2	; 0x02
    1224:	93 81       	ldd	r25, Z+3	; 0x03
    1226:	28 17       	cp	r18, r24
    1228:	39 07       	cpc	r19, r25
    122a:	20 f0       	brcs	.+8      	; 0x1234 <prvCopyDataFromQueue+0x28>
    122c:	80 81       	ld	r24, Z
    122e:	91 81       	ldd	r25, Z+1	; 0x01
    1230:	97 83       	std	Z+7, r25	; 0x07
    1232:	86 83       	std	Z+6, r24	; 0x06
    1234:	cb 01       	movw	r24, r22
    1236:	66 81       	ldd	r22, Z+6	; 0x06
    1238:	77 81       	ldd	r23, Z+7	; 0x07
    123a:	0c 94 04 5d 	jmp	0xba08	; 0xba08 <memcpy>
    123e:	08 95       	ret

00001240 <prvUnlockQueue>:
    1240:	ef 92       	push	r14
    1242:	ff 92       	push	r15
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	8c 01       	movw	r16, r24
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	0f 92       	push	r0
    1252:	fc 01       	movw	r30, r24
    1254:	c2 a1       	ldd	r28, Z+34	; 0x22
    1256:	1c 16       	cp	r1, r28
    1258:	ac f4       	brge	.+42     	; 0x1284 <prvUnlockQueue+0x44>
    125a:	83 89       	ldd	r24, Z+19	; 0x13
    125c:	81 11       	cpse	r24, r1
    125e:	06 c0       	rjmp	.+12     	; 0x126c <prvUnlockQueue+0x2c>
    1260:	11 c0       	rjmp	.+34     	; 0x1284 <prvUnlockQueue+0x44>
    1262:	f8 01       	movw	r30, r16
    1264:	83 89       	ldd	r24, Z+19	; 0x13
    1266:	81 11       	cpse	r24, r1
    1268:	05 c0       	rjmp	.+10     	; 0x1274 <prvUnlockQueue+0x34>
    126a:	0c c0       	rjmp	.+24     	; 0x1284 <prvUnlockQueue+0x44>
    126c:	78 01       	movw	r14, r16
    126e:	f3 e1       	ldi	r31, 0x13	; 19
    1270:	ef 0e       	add	r14, r31
    1272:	f1 1c       	adc	r15, r1
    1274:	c7 01       	movw	r24, r14
    1276:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    127a:	81 11       	cpse	r24, r1
    127c:	0e 94 aa 19 	call	0x3354	; 0x3354 <vTaskMissedYield>
    1280:	c1 50       	subi	r28, 0x01	; 1
    1282:	79 f7       	brne	.-34     	; 0x1262 <prvUnlockQueue+0x22>
    1284:	8f ef       	ldi	r24, 0xFF	; 255
    1286:	f8 01       	movw	r30, r16
    1288:	82 a3       	std	Z+34, r24	; 0x22
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	0f 92       	push	r0
    1294:	c1 a1       	ldd	r28, Z+33	; 0x21
    1296:	1c 16       	cp	r1, r28
    1298:	ac f4       	brge	.+42     	; 0x12c4 <prvUnlockQueue+0x84>
    129a:	80 85       	ldd	r24, Z+8	; 0x08
    129c:	81 11       	cpse	r24, r1
    129e:	06 c0       	rjmp	.+12     	; 0x12ac <prvUnlockQueue+0x6c>
    12a0:	11 c0       	rjmp	.+34     	; 0x12c4 <prvUnlockQueue+0x84>
    12a2:	f8 01       	movw	r30, r16
    12a4:	80 85       	ldd	r24, Z+8	; 0x08
    12a6:	81 11       	cpse	r24, r1
    12a8:	05 c0       	rjmp	.+10     	; 0x12b4 <prvUnlockQueue+0x74>
    12aa:	0c c0       	rjmp	.+24     	; 0x12c4 <prvUnlockQueue+0x84>
    12ac:	78 01       	movw	r14, r16
    12ae:	f8 e0       	ldi	r31, 0x08	; 8
    12b0:	ef 0e       	add	r14, r31
    12b2:	f1 1c       	adc	r15, r1
    12b4:	c7 01       	movw	r24, r14
    12b6:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    12ba:	81 11       	cpse	r24, r1
    12bc:	0e 94 aa 19 	call	0x3354	; 0x3354 <vTaskMissedYield>
    12c0:	c1 50       	subi	r28, 0x01	; 1
    12c2:	79 f7       	brne	.-34     	; 0x12a2 <prvUnlockQueue+0x62>
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	f8 01       	movw	r30, r16
    12c8:	81 a3       	std	Z+33, r24	; 0x21
    12ca:	0f 90       	pop	r0
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	ff 90       	pop	r15
    12d6:	ef 90       	pop	r14
    12d8:	08 95       	ret

000012da <xQueueGenericReset>:
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	ec 01       	movw	r28, r24
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	0f 92       	push	r0
    12e6:	48 81       	ld	r20, Y
    12e8:	59 81       	ldd	r21, Y+1	; 0x01
    12ea:	28 a1       	ldd	r18, Y+32	; 0x20
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	7f 8d       	ldd	r23, Y+31	; 0x1f
    12f0:	72 9f       	mul	r23, r18
    12f2:	c0 01       	movw	r24, r0
    12f4:	73 9f       	mul	r23, r19
    12f6:	90 0d       	add	r25, r0
    12f8:	11 24       	eor	r1, r1
    12fa:	fa 01       	movw	r30, r20
    12fc:	e8 0f       	add	r30, r24
    12fe:	f9 1f       	adc	r31, r25
    1300:	fb 83       	std	Y+3, r31	; 0x03
    1302:	ea 83       	std	Y+2, r30	; 0x02
    1304:	1e 8e       	std	Y+30, r1	; 0x1e
    1306:	5d 83       	std	Y+5, r21	; 0x05
    1308:	4c 83       	std	Y+4, r20	; 0x04
    130a:	82 1b       	sub	r24, r18
    130c:	93 0b       	sbc	r25, r19
    130e:	84 0f       	add	r24, r20
    1310:	95 1f       	adc	r25, r21
    1312:	9f 83       	std	Y+7, r25	; 0x07
    1314:	8e 83       	std	Y+6, r24	; 0x06
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	89 a3       	std	Y+33, r24	; 0x21
    131a:	8a a3       	std	Y+34, r24	; 0x22
    131c:	61 11       	cpse	r22, r1
    131e:	0b c0       	rjmp	.+22     	; 0x1336 <xQueueGenericReset+0x5c>
    1320:	88 85       	ldd	r24, Y+8	; 0x08
    1322:	88 23       	and	r24, r24
    1324:	71 f0       	breq	.+28     	; 0x1342 <xQueueGenericReset+0x68>
    1326:	ce 01       	movw	r24, r28
    1328:	08 96       	adiw	r24, 0x08	; 8
    132a:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    132e:	88 23       	and	r24, r24
    1330:	41 f0       	breq	.+16     	; 0x1342 <xQueueGenericReset+0x68>
    1332:	0e dd       	rcall	.-1508   	; 0xd50 <vPortYield>
    1334:	06 c0       	rjmp	.+12     	; 0x1342 <xQueueGenericReset+0x68>
    1336:	ce 01       	movw	r24, r28
    1338:	08 96       	adiw	r24, 0x08	; 8
    133a:	64 de       	rcall	.-824    	; 0x1004 <vListInitialise>
    133c:	ce 01       	movw	r24, r28
    133e:	43 96       	adiw	r24, 0x13	; 19
    1340:	61 de       	rcall	.-830    	; 0x1004 <vListInitialise>
    1342:	0f 90       	pop	r0
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	08 95       	ret

0000134e <xQueueGenericCreate>:
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	08 2f       	mov	r16, r24
    1358:	16 2f       	mov	r17, r22
    135a:	66 23       	and	r22, r22
    135c:	b1 f0       	breq	.+44     	; 0x138a <xQueueGenericCreate+0x3c>
    135e:	86 9f       	mul	r24, r22
    1360:	c0 01       	movw	r24, r0
    1362:	11 24       	eor	r1, r1
    1364:	83 96       	adiw	r24, 0x23	; 35
    1366:	0f dc       	rcall	.-2018   	; 0xb86 <pvPortMalloc>
    1368:	ec 01       	movw	r28, r24
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	39 f4       	brne	.+14     	; 0x137c <xQueueGenericCreate+0x2e>
    136e:	13 c0       	rjmp	.+38     	; 0x1396 <xQueueGenericCreate+0x48>
    1370:	0f 8f       	std	Y+31, r16	; 0x1f
    1372:	18 a3       	std	Y+32, r17	; 0x20
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	ce 01       	movw	r24, r28
    1378:	b0 df       	rcall	.-160    	; 0x12da <xQueueGenericReset>
    137a:	0d c0       	rjmp	.+26     	; 0x1396 <xQueueGenericCreate+0x48>
    137c:	83 96       	adiw	r24, 0x23	; 35
    137e:	99 83       	std	Y+1, r25	; 0x01
    1380:	88 83       	st	Y, r24
    1382:	f6 cf       	rjmp	.-20     	; 0x1370 <xQueueGenericCreate+0x22>
    1384:	d9 83       	std	Y+1, r29	; 0x01
    1386:	c8 83       	st	Y, r28
    1388:	f3 cf       	rjmp	.-26     	; 0x1370 <xQueueGenericCreate+0x22>
    138a:	83 e2       	ldi	r24, 0x23	; 35
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	fb db       	rcall	.-2058   	; 0xb86 <pvPortMalloc>
    1390:	ec 01       	movw	r28, r24
    1392:	89 2b       	or	r24, r25
    1394:	b9 f7       	brne	.-18     	; 0x1384 <xQueueGenericCreate+0x36>
    1396:	ce 01       	movw	r24, r28
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	08 95       	ret

000013a2 <xQueueGenericSend>:
    13a2:	9f 92       	push	r9
    13a4:	af 92       	push	r10
    13a6:	bf 92       	push	r11
    13a8:	cf 92       	push	r12
    13aa:	df 92       	push	r13
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	29 97       	sbiw	r28, 0x09	; 9
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	7c 01       	movw	r14, r24
    13ca:	5b 01       	movw	r10, r22
    13cc:	2e 83       	std	Y+6, r18	; 0x06
    13ce:	3f 83       	std	Y+7, r19	; 0x07
    13d0:	48 87       	std	Y+8, r20	; 0x08
    13d2:	59 87       	std	Y+9, r21	; 0x09
    13d4:	10 e0       	ldi	r17, 0x00	; 0
    13d6:	99 24       	eor	r9, r9
    13d8:	93 94       	inc	r9
    13da:	6c 01       	movw	r12, r24
    13dc:	88 e0       	ldi	r24, 0x08	; 8
    13de:	c8 0e       	add	r12, r24
    13e0:	d1 1c       	adc	r13, r1
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	0f 92       	push	r0
    13e8:	f7 01       	movw	r30, r14
    13ea:	96 8d       	ldd	r25, Z+30	; 0x1e
    13ec:	87 8d       	ldd	r24, Z+31	; 0x1f
    13ee:	98 17       	cp	r25, r24
    13f0:	10 f0       	brcs	.+4      	; 0x13f6 <xQueueGenericSend+0x54>
    13f2:	02 30       	cpi	r16, 0x02	; 2
    13f4:	b1 f4       	brne	.+44     	; 0x1422 <xQueueGenericSend+0x80>
    13f6:	40 2f       	mov	r20, r16
    13f8:	b5 01       	movw	r22, r10
    13fa:	c7 01       	movw	r24, r14
    13fc:	a8 de       	rcall	.-688    	; 0x114e <prvCopyDataToQueue>
    13fe:	f7 01       	movw	r30, r14
    1400:	93 89       	ldd	r25, Z+19	; 0x13
    1402:	99 23       	and	r25, r25
    1404:	41 f0       	breq	.+16     	; 0x1416 <xQueueGenericSend+0x74>
    1406:	c7 01       	movw	r24, r14
    1408:	43 96       	adiw	r24, 0x13	; 19
    140a:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    140e:	88 23       	and	r24, r24
    1410:	21 f0       	breq	.+8      	; 0x141a <xQueueGenericSend+0x78>
    1412:	9e dc       	rcall	.-1732   	; 0xd50 <vPortYield>
    1414:	02 c0       	rjmp	.+4      	; 0x141a <xQueueGenericSend+0x78>
    1416:	81 11       	cpse	r24, r1
    1418:	9b dc       	rcall	.-1738   	; 0xd50 <vPortYield>
    141a:	0f 90       	pop	r0
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	52 c0       	rjmp	.+164    	; 0x14c6 <xQueueGenericSend+0x124>
    1422:	8e 81       	ldd	r24, Y+6	; 0x06
    1424:	9f 81       	ldd	r25, Y+7	; 0x07
    1426:	a8 85       	ldd	r26, Y+8	; 0x08
    1428:	b9 85       	ldd	r27, Y+9	; 0x09
    142a:	89 2b       	or	r24, r25
    142c:	8a 2b       	or	r24, r26
    142e:	8b 2b       	or	r24, r27
    1430:	21 f4       	brne	.+8      	; 0x143a <xQueueGenericSend+0x98>
    1432:	0f 90       	pop	r0
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	46 c0       	rjmp	.+140    	; 0x14c6 <xQueueGenericSend+0x124>
    143a:	11 11       	cpse	r17, r1
    143c:	05 c0       	rjmp	.+10     	; 0x1448 <xQueueGenericSend+0xa6>
    143e:	ce 01       	movw	r24, r28
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    1446:	19 2d       	mov	r17, r9
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	0f 92       	push	r0
    1456:	f7 01       	movw	r30, r14
    1458:	81 a1       	ldd	r24, Z+33	; 0x21
    145a:	8f 3f       	cpi	r24, 0xFF	; 255
    145c:	09 f4       	brne	.+2      	; 0x1460 <xQueueGenericSend+0xbe>
    145e:	11 a2       	std	Z+33, r1	; 0x21
    1460:	f7 01       	movw	r30, r14
    1462:	82 a1       	ldd	r24, Z+34	; 0x22
    1464:	8f 3f       	cpi	r24, 0xFF	; 255
    1466:	09 f4       	brne	.+2      	; 0x146a <xQueueGenericSend+0xc8>
    1468:	12 a2       	std	Z+34, r1	; 0x22
    146a:	0f 90       	pop	r0
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	be 01       	movw	r22, r28
    1470:	6a 5f       	subi	r22, 0xFA	; 250
    1472:	7f 4f       	sbci	r23, 0xFF	; 255
    1474:	ce 01       	movw	r24, r28
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    147c:	81 11       	cpse	r24, r1
    147e:	1e c0       	rjmp	.+60     	; 0x14bc <xQueueGenericSend+0x11a>
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	0f 92       	push	r0
    1486:	f7 01       	movw	r30, r14
    1488:	96 8d       	ldd	r25, Z+30	; 0x1e
    148a:	87 8d       	ldd	r24, Z+31	; 0x1f
    148c:	0f 90       	pop	r0
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	98 13       	cpse	r25, r24
    1492:	0f c0       	rjmp	.+30     	; 0x14b2 <xQueueGenericSend+0x110>
    1494:	4e 81       	ldd	r20, Y+6	; 0x06
    1496:	5f 81       	ldd	r21, Y+7	; 0x07
    1498:	68 85       	ldd	r22, Y+8	; 0x08
    149a:	79 85       	ldd	r23, Y+9	; 0x09
    149c:	c6 01       	movw	r24, r12
    149e:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    14a2:	c7 01       	movw	r24, r14
    14a4:	cd de       	rcall	.-614    	; 0x1240 <prvUnlockQueue>
    14a6:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14aa:	81 11       	cpse	r24, r1
    14ac:	9a cf       	rjmp	.-204    	; 0x13e2 <xQueueGenericSend+0x40>
    14ae:	50 dc       	rcall	.-1888   	; 0xd50 <vPortYield>
    14b0:	98 cf       	rjmp	.-208    	; 0x13e2 <xQueueGenericSend+0x40>
    14b2:	c7 01       	movw	r24, r14
    14b4:	c5 de       	rcall	.-630    	; 0x1240 <prvUnlockQueue>
    14b6:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14ba:	93 cf       	rjmp	.-218    	; 0x13e2 <xQueueGenericSend+0x40>
    14bc:	c7 01       	movw	r24, r14
    14be:	c0 de       	rcall	.-640    	; 0x1240 <prvUnlockQueue>
    14c0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	29 96       	adiw	r28, 0x09	; 9
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	ff 90       	pop	r15
    14dc:	ef 90       	pop	r14
    14de:	df 90       	pop	r13
    14e0:	cf 90       	pop	r12
    14e2:	bf 90       	pop	r11
    14e4:	af 90       	pop	r10
    14e6:	9f 90       	pop	r9
    14e8:	08 95       	ret

000014ea <xQueueCreateMutex>:
    14ea:	0f 93       	push	r16
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	48 2f       	mov	r20, r24
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	2b df       	rcall	.-426    	; 0x134e <xQueueGenericCreate>
    14f8:	ec 01       	movw	r28, r24
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	61 f0       	breq	.+24     	; 0x1516 <xQueueCreateMutex+0x2c>
    14fe:	1b 82       	std	Y+3, r1	; 0x03
    1500:	1a 82       	std	Y+2, r1	; 0x02
    1502:	19 82       	std	Y+1, r1	; 0x01
    1504:	18 82       	st	Y, r1
    1506:	1e 82       	std	Y+6, r1	; 0x06
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	a9 01       	movw	r20, r18
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	46 df       	rcall	.-372    	; 0x13a2 <xQueueGenericSend>
    1516:	ce 01       	movw	r24, r28
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	0f 91       	pop	r16
    151e:	08 95       	ret

00001520 <xQueueGenericSendFromISR>:
    1520:	ef 92       	push	r14
    1522:	ff 92       	push	r15
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	8a 01       	movw	r16, r20
    152e:	fc 01       	movw	r30, r24
    1530:	56 8d       	ldd	r21, Z+30	; 0x1e
    1532:	37 8d       	ldd	r19, Z+31	; 0x1f
    1534:	53 17       	cp	r21, r19
    1536:	10 f0       	brcs	.+4      	; 0x153c <xQueueGenericSendFromISR+0x1c>
    1538:	22 30       	cpi	r18, 0x02	; 2
    153a:	e9 f4       	brne	.+58     	; 0x1576 <xQueueGenericSendFromISR+0x56>
    153c:	42 2f       	mov	r20, r18
    153e:	78 01       	movw	r14, r16
    1540:	ec 01       	movw	r28, r24
    1542:	1a a1       	ldd	r17, Y+34	; 0x22
    1544:	04 de       	rcall	.-1016   	; 0x114e <prvCopyDataToQueue>
    1546:	1f 3f       	cpi	r17, 0xFF	; 255
    1548:	81 f4       	brne	.+32     	; 0x156a <xQueueGenericSendFromISR+0x4a>
    154a:	8b 89       	ldd	r24, Y+19	; 0x13
    154c:	88 23       	and	r24, r24
    154e:	a9 f0       	breq	.+42     	; 0x157a <xQueueGenericSendFromISR+0x5a>
    1550:	ce 01       	movw	r24, r28
    1552:	43 96       	adiw	r24, 0x13	; 19
    1554:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    1558:	88 23       	and	r24, r24
    155a:	89 f0       	breq	.+34     	; 0x157e <xQueueGenericSendFromISR+0x5e>
    155c:	e1 14       	cp	r14, r1
    155e:	f1 04       	cpc	r15, r1
    1560:	81 f0       	breq	.+32     	; 0x1582 <xQueueGenericSendFromISR+0x62>
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	f7 01       	movw	r30, r14
    1566:	80 83       	st	Z, r24
    1568:	0d c0       	rjmp	.+26     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    156a:	ff 24       	eor	r15, r15
    156c:	f3 94       	inc	r15
    156e:	f1 0e       	add	r15, r17
    1570:	fa a2       	std	Y+34, r15	; 0x22
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	07 c0       	rjmp	.+14     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	05 c0       	rjmp	.+10     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <xQueueGenericSendFromISR+0x64>
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	01 c0       	rjmp	.+2      	; 0x1584 <xQueueGenericSendFromISR+0x64>
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	ff 90       	pop	r15
    158e:	ef 90       	pop	r14
    1590:	08 95       	ret

00001592 <xQueueGiveFromISR>:
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	fc 01       	movw	r30, r24
    1598:	86 8d       	ldd	r24, Z+30	; 0x1e
    159a:	97 8d       	ldd	r25, Z+31	; 0x1f
    159c:	89 17       	cp	r24, r25
    159e:	c0 f4       	brcc	.+48     	; 0x15d0 <xQueueGiveFromISR+0x3e>
    15a0:	92 a1       	ldd	r25, Z+34	; 0x22
    15a2:	8f 5f       	subi	r24, 0xFF	; 255
    15a4:	86 8f       	std	Z+30, r24	; 0x1e
    15a6:	9f 3f       	cpi	r25, 0xFF	; 255
    15a8:	79 f4       	brne	.+30     	; 0x15c8 <xQueueGiveFromISR+0x36>
    15aa:	83 89       	ldd	r24, Z+19	; 0x13
    15ac:	88 23       	and	r24, r24
    15ae:	91 f0       	breq	.+36     	; 0x15d4 <xQueueGiveFromISR+0x42>
    15b0:	eb 01       	movw	r28, r22
    15b2:	cf 01       	movw	r24, r30
    15b4:	43 96       	adiw	r24, 0x13	; 19
    15b6:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    15ba:	88 23       	and	r24, r24
    15bc:	69 f0       	breq	.+26     	; 0x15d8 <xQueueGiveFromISR+0x46>
    15be:	20 97       	sbiw	r28, 0x00	; 0
    15c0:	69 f0       	breq	.+26     	; 0x15dc <xQueueGiveFromISR+0x4a>
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	88 83       	st	Y, r24
    15c6:	0b c0       	rjmp	.+22     	; 0x15de <xQueueGiveFromISR+0x4c>
    15c8:	9f 5f       	subi	r25, 0xFF	; 255
    15ca:	92 a3       	std	Z+34, r25	; 0x22
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	07 c0       	rjmp	.+14     	; 0x15de <xQueueGiveFromISR+0x4c>
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	05 c0       	rjmp	.+10     	; 0x15de <xQueueGiveFromISR+0x4c>
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	03 c0       	rjmp	.+6      	; 0x15de <xQueueGiveFromISR+0x4c>
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	01 c0       	rjmp	.+2      	; 0x15de <xQueueGiveFromISR+0x4c>
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	08 95       	ret

000015e4 <xQueueReceive>:
    15e4:	9f 92       	push	r9
    15e6:	af 92       	push	r10
    15e8:	bf 92       	push	r11
    15ea:	cf 92       	push	r12
    15ec:	df 92       	push	r13
    15ee:	ef 92       	push	r14
    15f0:	ff 92       	push	r15
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	29 97       	sbiw	r28, 0x09	; 9
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	8c 01       	movw	r16, r24
    160c:	5b 01       	movw	r10, r22
    160e:	2e 83       	std	Y+6, r18	; 0x06
    1610:	3f 83       	std	Y+7, r19	; 0x07
    1612:	48 87       	std	Y+8, r20	; 0x08
    1614:	59 87       	std	Y+9, r21	; 0x09
    1616:	e1 2c       	mov	r14, r1
    1618:	99 24       	eor	r9, r9
    161a:	93 94       	inc	r9
    161c:	6c 01       	movw	r12, r24
    161e:	83 e1       	ldi	r24, 0x13	; 19
    1620:	c8 0e       	add	r12, r24
    1622:	d1 1c       	adc	r13, r1
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	0f 92       	push	r0
    162a:	f8 01       	movw	r30, r16
    162c:	f6 8c       	ldd	r15, Z+30	; 0x1e
    162e:	ff 20       	and	r15, r15
    1630:	99 f0       	breq	.+38     	; 0x1658 <xQueueReceive+0x74>
    1632:	b5 01       	movw	r22, r10
    1634:	c8 01       	movw	r24, r16
    1636:	ea dd       	rcall	.-1068   	; 0x120c <prvCopyDataFromQueue>
    1638:	fa 94       	dec	r15
    163a:	f8 01       	movw	r30, r16
    163c:	f6 8e       	std	Z+30, r15	; 0x1e
    163e:	80 85       	ldd	r24, Z+8	; 0x08
    1640:	88 23       	and	r24, r24
    1642:	31 f0       	breq	.+12     	; 0x1650 <xQueueReceive+0x6c>
    1644:	c8 01       	movw	r24, r16
    1646:	08 96       	adiw	r24, 0x08	; 8
    1648:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    164c:	81 11       	cpse	r24, r1
    164e:	80 db       	rcall	.-2304   	; 0xd50 <vPortYield>
    1650:	0f 90       	pop	r0
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	51 c0       	rjmp	.+162    	; 0x16fa <xQueueReceive+0x116>
    1658:	8e 81       	ldd	r24, Y+6	; 0x06
    165a:	9f 81       	ldd	r25, Y+7	; 0x07
    165c:	a8 85       	ldd	r26, Y+8	; 0x08
    165e:	b9 85       	ldd	r27, Y+9	; 0x09
    1660:	89 2b       	or	r24, r25
    1662:	8a 2b       	or	r24, r26
    1664:	8b 2b       	or	r24, r27
    1666:	21 f4       	brne	.+8      	; 0x1670 <xQueueReceive+0x8c>
    1668:	0f 90       	pop	r0
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	45 c0       	rjmp	.+138    	; 0x16fa <xQueueReceive+0x116>
    1670:	e1 10       	cpse	r14, r1
    1672:	05 c0       	rjmp	.+10     	; 0x167e <xQueueReceive+0x9a>
    1674:	ce 01       	movw	r24, r28
    1676:	01 96       	adiw	r24, 0x01	; 1
    1678:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    167c:	e9 2c       	mov	r14, r9
    167e:	0f 90       	pop	r0
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	0f 92       	push	r0
    168c:	f8 01       	movw	r30, r16
    168e:	81 a1       	ldd	r24, Z+33	; 0x21
    1690:	8f 3f       	cpi	r24, 0xFF	; 255
    1692:	09 f4       	brne	.+2      	; 0x1696 <xQueueReceive+0xb2>
    1694:	11 a2       	std	Z+33, r1	; 0x21
    1696:	f8 01       	movw	r30, r16
    1698:	82 a1       	ldd	r24, Z+34	; 0x22
    169a:	8f 3f       	cpi	r24, 0xFF	; 255
    169c:	09 f4       	brne	.+2      	; 0x16a0 <xQueueReceive+0xbc>
    169e:	12 a2       	std	Z+34, r1	; 0x22
    16a0:	0f 90       	pop	r0
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	be 01       	movw	r22, r28
    16a6:	6a 5f       	subi	r22, 0xFA	; 250
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	ce 01       	movw	r24, r28
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    16b2:	81 11       	cpse	r24, r1
    16b4:	18 c0       	rjmp	.+48     	; 0x16e6 <xQueueReceive+0x102>
    16b6:	c8 01       	movw	r24, r16
    16b8:	3f dd       	rcall	.-1410   	; 0x1138 <prvIsQueueEmpty>
    16ba:	88 23       	and	r24, r24
    16bc:	79 f0       	breq	.+30     	; 0x16dc <xQueueReceive+0xf8>
    16be:	4e 81       	ldd	r20, Y+6	; 0x06
    16c0:	5f 81       	ldd	r21, Y+7	; 0x07
    16c2:	68 85       	ldd	r22, Y+8	; 0x08
    16c4:	79 85       	ldd	r23, Y+9	; 0x09
    16c6:	c6 01       	movw	r24, r12
    16c8:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    16cc:	c8 01       	movw	r24, r16
    16ce:	b8 dd       	rcall	.-1168   	; 0x1240 <prvUnlockQueue>
    16d0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16d4:	81 11       	cpse	r24, r1
    16d6:	a6 cf       	rjmp	.-180    	; 0x1624 <xQueueReceive+0x40>
    16d8:	3b db       	rcall	.-2442   	; 0xd50 <vPortYield>
    16da:	a4 cf       	rjmp	.-184    	; 0x1624 <xQueueReceive+0x40>
    16dc:	c8 01       	movw	r24, r16
    16de:	b0 dd       	rcall	.-1184   	; 0x1240 <prvUnlockQueue>
    16e0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16e4:	9f cf       	rjmp	.-194    	; 0x1624 <xQueueReceive+0x40>
    16e6:	c8 01       	movw	r24, r16
    16e8:	ab dd       	rcall	.-1194   	; 0x1240 <prvUnlockQueue>
    16ea:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16ee:	c8 01       	movw	r24, r16
    16f0:	23 dd       	rcall	.-1466   	; 0x1138 <prvIsQueueEmpty>
    16f2:	88 23       	and	r24, r24
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <xQueueReceive+0x114>
    16f6:	96 cf       	rjmp	.-212    	; 0x1624 <xQueueReceive+0x40>
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	29 96       	adiw	r28, 0x09	; 9
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	bf 90       	pop	r11
    1718:	af 90       	pop	r10
    171a:	9f 90       	pop	r9
    171c:	08 95       	ret

0000171e <xQueueSemaphoreTake>:
    171e:	bf 92       	push	r11
    1720:	cf 92       	push	r12
    1722:	df 92       	push	r13
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	29 97       	sbiw	r28, 0x09	; 9
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	8c 01       	movw	r16, r24
    1742:	4e 83       	std	Y+6, r20	; 0x06
    1744:	5f 83       	std	Y+7, r21	; 0x07
    1746:	68 87       	std	Y+8, r22	; 0x08
    1748:	79 87       	std	Y+9, r23	; 0x09
    174a:	b1 2c       	mov	r11, r1
    174c:	d1 2c       	mov	r13, r1
    174e:	cc 24       	eor	r12, r12
    1750:	c3 94       	inc	r12
    1752:	7c 01       	movw	r14, r24
    1754:	83 e1       	ldi	r24, 0x13	; 19
    1756:	e8 0e       	add	r14, r24
    1758:	f1 1c       	adc	r15, r1
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	0f 92       	push	r0
    1760:	d8 01       	movw	r26, r16
    1762:	5e 96       	adiw	r26, 0x1e	; 30
    1764:	8c 91       	ld	r24, X
    1766:	5e 97       	sbiw	r26, 0x1e	; 30
    1768:	88 23       	and	r24, r24
    176a:	e1 f0       	breq	.+56     	; 0x17a4 <xQueueSemaphoreTake+0x86>
    176c:	81 50       	subi	r24, 0x01	; 1
    176e:	5e 96       	adiw	r26, 0x1e	; 30
    1770:	8c 93       	st	X, r24
    1772:	5e 97       	sbiw	r26, 0x1e	; 30
    1774:	8d 91       	ld	r24, X+
    1776:	9c 91       	ld	r25, X
    1778:	89 2b       	or	r24, r25
    177a:	29 f4       	brne	.+10     	; 0x1786 <xQueueSemaphoreTake+0x68>
    177c:	0e 94 b6 1a 	call	0x356c	; 0x356c <pvTaskIncrementMutexHeldCount>
    1780:	f8 01       	movw	r30, r16
    1782:	93 83       	std	Z+3, r25	; 0x03
    1784:	82 83       	std	Z+2, r24	; 0x02
    1786:	d8 01       	movw	r26, r16
    1788:	18 96       	adiw	r26, 0x08	; 8
    178a:	8c 91       	ld	r24, X
    178c:	88 23       	and	r24, r24
    178e:	31 f0       	breq	.+12     	; 0x179c <xQueueSemaphoreTake+0x7e>
    1790:	c8 01       	movw	r24, r16
    1792:	08 96       	adiw	r24, 0x08	; 8
    1794:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    1798:	81 11       	cpse	r24, r1
    179a:	da da       	rcall	.-2636   	; 0xd50 <vPortYield>
    179c:	0f 90       	pop	r0
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	7f c0       	rjmp	.+254    	; 0x18a2 <xQueueSemaphoreTake+0x184>
    17a4:	8e 81       	ldd	r24, Y+6	; 0x06
    17a6:	9f 81       	ldd	r25, Y+7	; 0x07
    17a8:	a8 85       	ldd	r26, Y+8	; 0x08
    17aa:	b9 85       	ldd	r27, Y+9	; 0x09
    17ac:	89 2b       	or	r24, r25
    17ae:	8a 2b       	or	r24, r26
    17b0:	8b 2b       	or	r24, r27
    17b2:	21 f4       	brne	.+8      	; 0x17bc <xQueueSemaphoreTake+0x9e>
    17b4:	0f 90       	pop	r0
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	73 c0       	rjmp	.+230    	; 0x18a2 <xQueueSemaphoreTake+0x184>
    17bc:	d1 10       	cpse	r13, r1
    17be:	05 c0       	rjmp	.+10     	; 0x17ca <xQueueSemaphoreTake+0xac>
    17c0:	ce 01       	movw	r24, r28
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    17c8:	dc 2c       	mov	r13, r12
    17ca:	0f 90       	pop	r0
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	0f 92       	push	r0
    17d8:	f8 01       	movw	r30, r16
    17da:	81 a1       	ldd	r24, Z+33	; 0x21
    17dc:	8f 3f       	cpi	r24, 0xFF	; 255
    17de:	09 f4       	brne	.+2      	; 0x17e2 <xQueueSemaphoreTake+0xc4>
    17e0:	11 a2       	std	Z+33, r1	; 0x21
    17e2:	d8 01       	movw	r26, r16
    17e4:	92 96       	adiw	r26, 0x22	; 34
    17e6:	8c 91       	ld	r24, X
    17e8:	92 97       	sbiw	r26, 0x22	; 34
    17ea:	8f 3f       	cpi	r24, 0xFF	; 255
    17ec:	11 f4       	brne	.+4      	; 0x17f2 <xQueueSemaphoreTake+0xd4>
    17ee:	92 96       	adiw	r26, 0x22	; 34
    17f0:	1c 92       	st	X, r1
    17f2:	0f 90       	pop	r0
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	be 01       	movw	r22, r28
    17f8:	6a 5f       	subi	r22, 0xFA	; 250
    17fa:	7f 4f       	sbci	r23, 0xFF	; 255
    17fc:	ce 01       	movw	r24, r28
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    1804:	81 11       	cpse	r24, r1
    1806:	27 c0       	rjmp	.+78     	; 0x1856 <xQueueSemaphoreTake+0x138>
    1808:	c8 01       	movw	r24, r16
    180a:	96 dc       	rcall	.-1748   	; 0x1138 <prvIsQueueEmpty>
    180c:	88 23       	and	r24, r24
    180e:	f1 f0       	breq	.+60     	; 0x184c <xQueueSemaphoreTake+0x12e>
    1810:	f8 01       	movw	r30, r16
    1812:	80 81       	ld	r24, Z
    1814:	91 81       	ldd	r25, Z+1	; 0x01
    1816:	89 2b       	or	r24, r25
    1818:	51 f4       	brne	.+20     	; 0x182e <xQueueSemaphoreTake+0x110>
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	0f 92       	push	r0
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	93 81       	ldd	r25, Z+3	; 0x03
    1824:	0e 94 bc 19 	call	0x3378	; 0x3378 <xTaskPriorityInherit>
    1828:	b8 2e       	mov	r11, r24
    182a:	0f 90       	pop	r0
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	4e 81       	ldd	r20, Y+6	; 0x06
    1830:	5f 81       	ldd	r21, Y+7	; 0x07
    1832:	68 85       	ldd	r22, Y+8	; 0x08
    1834:	79 85       	ldd	r23, Y+9	; 0x09
    1836:	c7 01       	movw	r24, r14
    1838:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    183c:	c8 01       	movw	r24, r16
    183e:	00 dd       	rcall	.-1536   	; 0x1240 <prvUnlockQueue>
    1840:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    1844:	81 11       	cpse	r24, r1
    1846:	89 cf       	rjmp	.-238    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1848:	83 da       	rcall	.-2810   	; 0xd50 <vPortYield>
    184a:	87 cf       	rjmp	.-242    	; 0x175a <xQueueSemaphoreTake+0x3c>
    184c:	c8 01       	movw	r24, r16
    184e:	f8 dc       	rcall	.-1552   	; 0x1240 <prvUnlockQueue>
    1850:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    1854:	82 cf       	rjmp	.-252    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1856:	c8 01       	movw	r24, r16
    1858:	f3 dc       	rcall	.-1562   	; 0x1240 <prvUnlockQueue>
    185a:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    185e:	c8 01       	movw	r24, r16
    1860:	6b dc       	rcall	.-1834   	; 0x1138 <prvIsQueueEmpty>
    1862:	88 23       	and	r24, r24
    1864:	09 f4       	brne	.+2      	; 0x1868 <xQueueSemaphoreTake+0x14a>
    1866:	79 cf       	rjmp	.-270    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1868:	bb 20       	and	r11, r11
    186a:	d1 f0       	breq	.+52     	; 0x18a0 <xQueueSemaphoreTake+0x182>
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	0f 92       	push	r0
    1872:	f8 01       	movw	r30, r16
    1874:	83 89       	ldd	r24, Z+19	; 0x13
    1876:	88 23       	and	r24, r24
    1878:	39 f0       	breq	.+14     	; 0x1888 <xQueueSemaphoreTake+0x16a>
    187a:	02 8c       	ldd	r0, Z+26	; 0x1a
    187c:	f3 8d       	ldd	r31, Z+27	; 0x1b
    187e:	e0 2d       	mov	r30, r0
    1880:	80 81       	ld	r24, Z
    1882:	64 e0       	ldi	r22, 0x04	; 4
    1884:	68 1b       	sub	r22, r24
    1886:	01 c0       	rjmp	.+2      	; 0x188a <xQueueSemaphoreTake+0x16c>
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	d8 01       	movw	r26, r16
    188c:	12 96       	adiw	r26, 0x02	; 2
    188e:	8d 91       	ld	r24, X+
    1890:	9c 91       	ld	r25, X
    1892:	13 97       	sbiw	r26, 0x03	; 3
    1894:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <vTaskPriorityDisinheritAfterTimeout>
    1898:	0f 90       	pop	r0
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <xQueueSemaphoreTake+0x184>
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	29 96       	adiw	r28, 0x09	; 9
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	ff 90       	pop	r15
    18b8:	ef 90       	pop	r14
    18ba:	df 90       	pop	r13
    18bc:	cf 90       	pop	r12
    18be:	bf 90       	pop	r11
    18c0:	08 95       	ret

000018c2 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	0f 92       	push	r0
    18ce:	89 a1       	ldd	r24, Y+33	; 0x21
    18d0:	8f 3f       	cpi	r24, 0xFF	; 255
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <vQueueWaitForMessageRestricted+0x14>
    18d4:	19 a2       	std	Y+33, r1	; 0x21
    18d6:	8a a1       	ldd	r24, Y+34	; 0x22
    18d8:	8f 3f       	cpi	r24, 0xFF	; 255
    18da:	09 f4       	brne	.+2      	; 0x18de <vQueueWaitForMessageRestricted+0x1c>
    18dc:	1a a2       	std	Y+34, r1	; 0x22
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    18e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18e4:	81 11       	cpse	r24, r1
    18e6:	04 c0       	rjmp	.+8      	; 0x18f0 <vQueueWaitForMessageRestricted+0x2e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    18e8:	ce 01       	movw	r24, r28
    18ea:	43 96       	adiw	r24, 0x13	; 19
    18ec:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    18f0:	ce 01       	movw	r24, r28
    18f2:	a6 dc       	rcall	.-1716   	; 0x1240 <prvUnlockQueue>
	}
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	08 95       	ret

000018fa <xSerialxPrint>:

		default:
			break;
	}
	return 0;
}
    18fa:	4f 92       	push	r4
    18fc:	5f 92       	push	r5
    18fe:	6f 92       	push	r6
    1900:	7f 92       	push	r7
    1902:	8f 92       	push	r8
    1904:	9f 92       	push	r9
    1906:	af 92       	push	r10
    1908:	bf 92       	push	r11
    190a:	cf 92       	push	r12
    190c:	df 92       	push	r13
    190e:	ef 92       	push	r14
    1910:	ff 92       	push	r15
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	ec 01       	movw	r28, r24
    191c:	fb 01       	movw	r30, r22
    191e:	01 90       	ld	r0, Z+
    1920:	00 20       	and	r0, r0
    1922:	e9 f7       	brne	.-6      	; 0x191e <xSerialxPrint+0x24>
    1924:	4b 01       	movw	r8, r22
    1926:	9f 01       	movw	r18, r30
    1928:	21 50       	subi	r18, 0x01	; 1
    192a:	31 09       	sbc	r19, r1
    192c:	0f 2e       	mov	r0, r31
    192e:	f1 e3       	ldi	r31, 0x31	; 49
    1930:	ef 2e       	mov	r14, r31
    1932:	ff 24       	eor	r15, r15
    1934:	f3 94       	inc	r15
    1936:	f0 2d       	mov	r31, r0
    1938:	01 ed       	ldi	r16, 0xD1	; 209
    193a:	10 e0       	ldi	r17, 0x00	; 0
    193c:	69 ec       	ldi	r22, 0xC9	; 201
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	41 ec       	ldi	r20, 0xC1	; 193
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	5c 01       	movw	r10, r24
    1946:	8d e0       	ldi	r24, 0x0D	; 13
    1948:	a8 0e       	add	r10, r24
    194a:	b1 1c       	adc	r11, r1
    194c:	78 c0       	rjmp	.+240    	; 0x1a3e <xSerialxPrint+0x144>
    194e:	d4 01       	movw	r26, r8
    1950:	dd 90       	ld	r13, X+
    1952:	4d 01       	movw	r8, r26
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	0f 92       	push	r0
    195a:	ed 85       	ldd	r30, Y+13	; 0x0d
    195c:	fe 85       	ldd	r31, Y+14	; 0x0e
    195e:	0f 90       	pop	r0
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	8f 89       	ldd	r24, Y+23	; 0x17
    1964:	98 8d       	ldd	r25, Y+24	; 0x18
    1966:	e8 17       	cp	r30, r24
    1968:	f9 07       	cpc	r31, r25
    196a:	f1 f0       	breq	.+60     	; 0x19a8 <xSerialxPrint+0xae>
    196c:	f5 01       	movw	r30, r10
    196e:	82 81       	ldd	r24, Z+2	; 0x02
    1970:	93 81       	ldd	r25, Z+3	; 0x03
    1972:	dc 01       	movw	r26, r24
    1974:	dc 92       	st	X, r13
    1976:	82 81       	ldd	r24, Z+2	; 0x02
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	93 83       	std	Z+3, r25	; 0x03
    197e:	82 83       	std	Z+2, r24	; 0x02
    1980:	c0 84       	ldd	r12, Z+8	; 0x08
    1982:	d1 84       	ldd	r13, Z+9	; 0x09
    1984:	8c 15       	cp	r24, r12
    1986:	9d 05       	cpc	r25, r13
    1988:	21 f4       	brne	.+8      	; 0x1992 <xSerialxPrint+0x98>
    198a:	86 81       	ldd	r24, Z+6	; 0x06
    198c:	97 81       	ldd	r25, Z+7	; 0x07
    198e:	93 83       	std	Z+3, r25	; 0x03
    1990:	82 83       	std	Z+2, r24	; 0x02
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	0f 92       	push	r0
    1998:	80 81       	ld	r24, Z
    199a:	91 81       	ldd	r25, Z+1	; 0x01
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	80 83       	st	Z, r24
    19a2:	0f 90       	pop	r0
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	2b c0       	rjmp	.+86     	; 0x19fe <xSerialxPrint+0x104>
    19a8:	00 00       	nop
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	0f 92       	push	r0
    19b0:	ed 85       	ldd	r30, Y+13	; 0x0d
    19b2:	fe 85       	ldd	r31, Y+14	; 0x0e
    19b4:	0f 90       	pop	r0
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ba:	98 8d       	ldd	r25, Y+24	; 0x18
    19bc:	e8 17       	cp	r30, r24
    19be:	f9 07       	cpc	r31, r25
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <xSerialxPrint+0xca>
    19c2:	3d c0       	rjmp	.+122    	; 0x1a3e <xSerialxPrint+0x144>
    19c4:	f5 01       	movw	r30, r10
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	dc 01       	movw	r26, r24
    19cc:	dc 92       	st	X, r13
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	93 83       	std	Z+3, r25	; 0x03
    19d6:	82 83       	std	Z+2, r24	; 0x02
    19d8:	c0 84       	ldd	r12, Z+8	; 0x08
    19da:	d1 84       	ldd	r13, Z+9	; 0x09
    19dc:	8c 15       	cp	r24, r12
    19de:	9d 05       	cpc	r25, r13
    19e0:	21 f4       	brne	.+8      	; 0x19ea <xSerialxPrint+0xf0>
    19e2:	86 81       	ldd	r24, Z+6	; 0x06
    19e4:	97 81       	ldd	r25, Z+7	; 0x07
    19e6:	93 83       	std	Z+3, r25	; 0x03
    19e8:	82 83       	std	Z+2, r24	; 0x02
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	0f 92       	push	r0
    19f0:	80 81       	ld	r24, Z
    19f2:	91 81       	ldd	r25, Z+1	; 0x01
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	80 83       	st	Z, r24
    19fa:	0f 90       	pop	r0
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	48 80       	ld	r4, Y
    1a00:	51 2c       	mov	r5, r1
    1a02:	b8 e0       	ldi	r27, 0x08	; 8
    1a04:	4b 16       	cp	r4, r27
    1a06:	51 04       	cpc	r5, r1
    1a08:	d0 f4       	brcc	.+52     	; 0x1a3e <xSerialxPrint+0x144>
    1a0a:	f2 01       	movw	r30, r4
    1a0c:	88 27       	eor	r24, r24
    1a0e:	ee 58       	subi	r30, 0x8E	; 142
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	8f 4f       	sbci	r24, 0xFF	; 255
    1a14:	0c 94 e9 5a 	jmp	0xb5d2	; 0xb5d2 <__tablejump2__>
    1a18:	fa 01       	movw	r30, r20
    1a1a:	80 81       	ld	r24, Z
    1a1c:	80 62       	ori	r24, 0x20	; 32
    1a1e:	80 83       	st	Z, r24
    1a20:	0e c0       	rjmp	.+28     	; 0x1a3e <xSerialxPrint+0x144>
    1a22:	db 01       	movw	r26, r22
    1a24:	8c 91       	ld	r24, X
    1a26:	80 62       	ori	r24, 0x20	; 32
    1a28:	8c 93       	st	X, r24
    1a2a:	09 c0       	rjmp	.+18     	; 0x1a3e <xSerialxPrint+0x144>
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	80 81       	ld	r24, Z
    1a30:	80 62       	ori	r24, 0x20	; 32
    1a32:	80 83       	st	Z, r24
    1a34:	04 c0       	rjmp	.+8      	; 0x1a3e <xSerialxPrint+0x144>
    1a36:	d7 01       	movw	r26, r14
    1a38:	8c 91       	ld	r24, X
    1a3a:	80 62       	ori	r24, 0x20	; 32
    1a3c:	8c 93       	st	X, r24
    1a3e:	82 16       	cp	r8, r18
    1a40:	93 06       	cpc	r9, r19
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <xSerialxPrint+0x14c>
    1a44:	84 cf       	rjmp	.-248    	; 0x194e <xSerialxPrint+0x54>
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	ff 90       	pop	r15
    1a50:	ef 90       	pop	r14
    1a52:	df 90       	pop	r13
    1a54:	cf 90       	pop	r12
    1a56:	bf 90       	pop	r11
    1a58:	af 90       	pop	r10
    1a5a:	9f 90       	pop	r9
    1a5c:	8f 90       	pop	r8
    1a5e:	7f 90       	pop	r7
    1a60:	6f 90       	pop	r6
    1a62:	5f 90       	pop	r5
    1a64:	4f 90       	pop	r4
    1a66:	08 95       	ret

00001a68 <xSerialxPrintf>:
    1a68:	0f 93       	push	r16
    1a6a:	1f 93       	push	r17
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	08 85       	ldd	r16, Y+8	; 0x08
    1a76:	19 85       	ldd	r17, Y+9	; 0x09
    1a78:	f8 01       	movw	r30, r16
    1a7a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	29 f4       	brne	.+10     	; 0x1a8a <xSerialxPrintf+0x22>
    1a80:	67 d9       	rcall	.-3378   	; 0xd50 <vPortYield>
    1a82:	f8 01       	movw	r30, r16
    1a84:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a86:	81 30       	cpi	r24, 0x01	; 1
    1a88:	d9 f3       	breq	.-10     	; 0x1a80 <xSerialxPrintf+0x18>
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	85 8f       	std	Z+29, r24	; 0x1d
    1a90:	63 8d       	ldd	r22, Z+27	; 0x1b
    1a92:	74 8d       	ldd	r23, Z+28	; 0x1c
    1a94:	9e 01       	movw	r18, r28
    1a96:	24 5f       	subi	r18, 0xF4	; 244
    1a98:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9a:	4a 85       	ldd	r20, Y+10	; 0x0a
    1a9c:	5b 85       	ldd	r21, Y+11	; 0x0b
    1a9e:	81 8d       	ldd	r24, Z+25	; 0x19
    1aa0:	92 8d       	ldd	r25, Z+26	; 0x1a
    1aa2:	0e 94 5b 5d 	call	0xbab6	; 0xbab6 <vsnprintf>
    1aa6:	f8 01       	movw	r30, r16
    1aa8:	61 8d       	ldd	r22, Z+25	; 0x19
    1aaa:	72 8d       	ldd	r23, Z+26	; 0x1a
    1aac:	c8 01       	movw	r24, r16
    1aae:	25 df       	rcall	.-438    	; 0x18fa <xSerialxPrint>
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	15 8e       	std	Z+29, r1	; 0x1d
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	08 95       	ret

00001abe <xSerialRxFlush>:
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	4c 91       	ld	r20, X
    1ac6:	50 e0       	ldi	r21, 0x00	; 0
    1ac8:	48 30       	cpi	r20, 0x08	; 8
    1aca:	51 05       	cpc	r21, r1
    1acc:	e8 f5       	brcc	.+122    	; 0x1b48 <xSerialRxFlush+0x8a>
    1ace:	fa 01       	movw	r30, r20
    1ad0:	88 27       	eor	r24, r24
    1ad2:	e6 58       	subi	r30, 0x86	; 134
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad8:	0c 94 e9 5a 	jmp	0xb5d2	; 0xb5d2 <__tablejump2__>
    1adc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1ae0:	88 23       	and	r24, r24
    1ae2:	54 f1       	brlt	.+84     	; 0x1b38 <xSerialRxFlush+0x7a>
    1ae4:	31 c0       	rjmp	.+98     	; 0x1b48 <xSerialRxFlush+0x8a>
    1ae6:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1aea:	88 23       	and	r24, r24
    1aec:	e4 f0       	brlt	.+56     	; 0x1b26 <xSerialRxFlush+0x68>
    1aee:	2c c0       	rjmp	.+88     	; 0x1b48 <xSerialRxFlush+0x8a>
    1af0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1af4:	88 23       	and	r24, r24
    1af6:	74 f0       	brlt	.+28     	; 0x1b14 <xSerialRxFlush+0x56>
    1af8:	27 c0       	rjmp	.+78     	; 0x1b48 <xSerialRxFlush+0x8a>
    1afa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1afe:	88 23       	and	r24, r24
    1b00:	1c f5       	brge	.+70     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b02:	c6 ec       	ldi	r28, 0xC6	; 198
    1b04:	d0 e0       	ldi	r29, 0x00	; 0
    1b06:	e0 ec       	ldi	r30, 0xC0	; 192
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	88 81       	ld	r24, Y
    1b0c:	80 81       	ld	r24, Z
    1b0e:	88 23       	and	r24, r24
    1b10:	e4 f3       	brlt	.-8      	; 0x1b0a <xSerialRxFlush+0x4c>
    1b12:	1a c0       	rjmp	.+52     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b14:	ce ec       	ldi	r28, 0xCE	; 206
    1b16:	d0 e0       	ldi	r29, 0x00	; 0
    1b18:	e8 ec       	ldi	r30, 0xC8	; 200
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	88 81       	ld	r24, Y
    1b1e:	80 81       	ld	r24, Z
    1b20:	88 23       	and	r24, r24
    1b22:	e4 f3       	brlt	.-8      	; 0x1b1c <xSerialRxFlush+0x5e>
    1b24:	11 c0       	rjmp	.+34     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b26:	c6 ed       	ldi	r28, 0xD6	; 214
    1b28:	d0 e0       	ldi	r29, 0x00	; 0
    1b2a:	e0 ed       	ldi	r30, 0xD0	; 208
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	88 81       	ld	r24, Y
    1b30:	80 81       	ld	r24, Z
    1b32:	88 23       	and	r24, r24
    1b34:	e4 f3       	brlt	.-8      	; 0x1b2e <xSerialRxFlush+0x70>
    1b36:	08 c0       	rjmp	.+16     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b38:	c6 e3       	ldi	r28, 0x36	; 54
    1b3a:	d1 e0       	ldi	r29, 0x01	; 1
    1b3c:	e0 e3       	ldi	r30, 0x30	; 48
    1b3e:	f1 e0       	ldi	r31, 0x01	; 1
    1b40:	88 81       	ld	r24, Y
    1b42:	80 81       	ld	r24, Z
    1b44:	88 23       	and	r24, r24
    1b46:	e4 f3       	brlt	.-8      	; 0x1b40 <xSerialRxFlush+0x82>
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	0f 92       	push	r0
    1b4e:	12 96       	adiw	r26, 0x02	; 2
    1b50:	1c 92       	st	X, r1
    1b52:	1e 92       	st	-X, r1
    1b54:	11 97       	sbiw	r26, 0x01	; 1
    1b56:	17 96       	adiw	r26, 0x07	; 7
    1b58:	8d 91       	ld	r24, X+
    1b5a:	9c 91       	ld	r25, X
    1b5c:	18 97       	sbiw	r26, 0x08	; 8
    1b5e:	14 96       	adiw	r26, 0x04	; 4
    1b60:	9c 93       	st	X, r25
    1b62:	8e 93       	st	-X, r24
    1b64:	13 97       	sbiw	r26, 0x03	; 3
    1b66:	16 96       	adiw	r26, 0x06	; 6
    1b68:	9c 93       	st	X, r25
    1b6a:	8e 93       	st	-X, r24
    1b6c:	15 97       	sbiw	r26, 0x05	; 5
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	08 95       	ret

00001b78 <xSerialAvailableChar>:
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	0f 92       	push	r0
    1b7e:	fc 01       	movw	r30, r24
    1b80:	81 81       	ldd	r24, Z+1	; 0x01
    1b82:	92 81       	ldd	r25, Z+2	; 0x02
    1b84:	0f 90       	pop	r0
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	08 95       	ret

00001b8a <xSerialPutChar>:
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	dc 01       	movw	r26, r24
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	0f 92       	push	r0
    1b96:	1d 96       	adiw	r26, 0x0d	; 13
    1b98:	2d 91       	ld	r18, X+
    1b9a:	3c 91       	ld	r19, X
    1b9c:	1e 97       	sbiw	r26, 0x0e	; 14
    1b9e:	0f 90       	pop	r0
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	57 96       	adiw	r26, 0x17	; 23
    1ba4:	8d 91       	ld	r24, X+
    1ba6:	9c 91       	ld	r25, X
    1ba8:	58 97       	sbiw	r26, 0x18	; 24
    1baa:	28 17       	cp	r18, r24
    1bac:	39 07       	cpc	r19, r25
    1bae:	f1 f0       	breq	.+60     	; 0x1bec <xSerialPutChar+0x62>
    1bb0:	fd 01       	movw	r30, r26
    1bb2:	3d 96       	adiw	r30, 0x0d	; 13
    1bb4:	c2 81       	ldd	r28, Z+2	; 0x02
    1bb6:	d3 81       	ldd	r29, Z+3	; 0x03
    1bb8:	68 83       	st	Y, r22
    1bba:	82 81       	ldd	r24, Z+2	; 0x02
    1bbc:	93 81       	ldd	r25, Z+3	; 0x03
    1bbe:	01 96       	adiw	r24, 0x01	; 1
    1bc0:	93 83       	std	Z+3, r25	; 0x03
    1bc2:	82 83       	std	Z+2, r24	; 0x02
    1bc4:	20 85       	ldd	r18, Z+8	; 0x08
    1bc6:	31 85       	ldd	r19, Z+9	; 0x09
    1bc8:	82 17       	cp	r24, r18
    1bca:	93 07       	cpc	r25, r19
    1bcc:	21 f4       	brne	.+8      	; 0x1bd6 <xSerialPutChar+0x4c>
    1bce:	86 81       	ldd	r24, Z+6	; 0x06
    1bd0:	97 81       	ldd	r25, Z+7	; 0x07
    1bd2:	93 83       	std	Z+3, r25	; 0x03
    1bd4:	82 83       	std	Z+2, r24	; 0x02
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	0f 92       	push	r0
    1bdc:	80 81       	ld	r24, Z
    1bde:	91 81       	ldd	r25, Z+1	; 0x01
    1be0:	01 96       	adiw	r24, 0x01	; 1
    1be2:	91 83       	std	Z+1, r25	; 0x01
    1be4:	80 83       	st	Z, r24
    1be6:	0f 90       	pop	r0
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	2f c0       	rjmp	.+94     	; 0x1c4a <xSerialPutChar+0xc0>
    1bec:	00 00       	nop
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	0f 92       	push	r0
    1bf4:	1d 96       	adiw	r26, 0x0d	; 13
    1bf6:	2d 91       	ld	r18, X+
    1bf8:	3c 91       	ld	r19, X
    1bfa:	1e 97       	sbiw	r26, 0x0e	; 14
    1bfc:	0f 90       	pop	r0
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	57 96       	adiw	r26, 0x17	; 23
    1c02:	8d 91       	ld	r24, X+
    1c04:	9c 91       	ld	r25, X
    1c06:	58 97       	sbiw	r26, 0x18	; 24
    1c08:	28 17       	cp	r18, r24
    1c0a:	39 07       	cpc	r19, r25
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <xSerialPutChar+0x86>
    1c0e:	45 c0       	rjmp	.+138    	; 0x1c9a <xSerialPutChar+0x110>
    1c10:	fd 01       	movw	r30, r26
    1c12:	3d 96       	adiw	r30, 0x0d	; 13
    1c14:	c2 81       	ldd	r28, Z+2	; 0x02
    1c16:	d3 81       	ldd	r29, Z+3	; 0x03
    1c18:	68 83       	st	Y, r22
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	01 96       	adiw	r24, 0x01	; 1
    1c20:	93 83       	std	Z+3, r25	; 0x03
    1c22:	82 83       	std	Z+2, r24	; 0x02
    1c24:	20 85       	ldd	r18, Z+8	; 0x08
    1c26:	31 85       	ldd	r19, Z+9	; 0x09
    1c28:	82 17       	cp	r24, r18
    1c2a:	93 07       	cpc	r25, r19
    1c2c:	21 f4       	brne	.+8      	; 0x1c36 <xSerialPutChar+0xac>
    1c2e:	86 81       	ldd	r24, Z+6	; 0x06
    1c30:	97 81       	ldd	r25, Z+7	; 0x07
    1c32:	93 83       	std	Z+3, r25	; 0x03
    1c34:	82 83       	std	Z+2, r24	; 0x02
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	0f 92       	push	r0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	91 81       	ldd	r25, Z+1	; 0x01
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	80 83       	st	Z, r24
    1c46:	0f 90       	pop	r0
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	8c 91       	ld	r24, X
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	88 30       	cpi	r24, 0x08	; 8
    1c50:	91 05       	cpc	r25, r1
    1c52:	28 f5       	brcc	.+74     	; 0x1c9e <xSerialPutChar+0x114>
    1c54:	fc 01       	movw	r30, r24
    1c56:	88 27       	eor	r24, r24
    1c58:	ee 57       	subi	r30, 0x7E	; 126
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5e:	0c 94 e9 5a 	jmp	0xb5d2	; 0xb5d2 <__tablejump2__>
    1c62:	e1 ec       	ldi	r30, 0xC1	; 193
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	80 62       	ori	r24, 0x20	; 32
    1c6a:	80 83       	st	Z, r24
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	18 c0       	rjmp	.+48     	; 0x1ca0 <xSerialPutChar+0x116>
    1c70:	e9 ec       	ldi	r30, 0xC9	; 201
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	80 62       	ori	r24, 0x20	; 32
    1c78:	80 83       	st	Z, r24
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	11 c0       	rjmp	.+34     	; 0x1ca0 <xSerialPutChar+0x116>
    1c7e:	e1 ed       	ldi	r30, 0xD1	; 209
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	80 62       	ori	r24, 0x20	; 32
    1c86:	80 83       	st	Z, r24
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	0a c0       	rjmp	.+20     	; 0x1ca0 <xSerialPutChar+0x116>
    1c8c:	e1 e3       	ldi	r30, 0x31	; 49
    1c8e:	f1 e0       	ldi	r31, 0x01	; 1
    1c90:	80 81       	ld	r24, Z
    1c92:	80 62       	ori	r24, 0x20	; 32
    1c94:	80 83       	st	Z, r24
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	03 c0       	rjmp	.+6      	; 0x1ca0 <xSerialPutChar+0x116>
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	01 c0       	rjmp	.+2      	; 0x1ca0 <xSerialPutChar+0x116>
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	08 95       	ret

00001ca6 <xSerialPortInitMinimal>:
    1ca6:	7f 92       	push	r7
    1ca8:	8f 92       	push	r8
    1caa:	9f 92       	push	r9
    1cac:	af 92       	push	r10
    1cae:	bf 92       	push	r11
    1cb0:	cf 92       	push	r12
    1cb2:	df 92       	push	r13
    1cb4:	ef 92       	push	r14
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	a2 97       	sbiw	r28, 0x22	; 34
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	6c 01       	movw	r12, r24
    1cd2:	76 2e       	mov	r7, r22
    1cd4:	49 01       	movw	r8, r18
    1cd6:	5a 01       	movw	r10, r20
    1cd8:	c7 01       	movw	r24, r14
    1cda:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	a9 f0       	breq	.+42     	; 0x1d0c <xSerialPortInitMinimal+0x66>
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	32 96       	adiw	r30, 0x02	; 2
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	0f 92       	push	r0
    1cec:	11 82       	std	Z+1, r1	; 0x01
    1cee:	10 82       	st	Z, r1
    1cf0:	93 83       	std	Z+3, r25	; 0x03
    1cf2:	82 83       	std	Z+2, r24	; 0x02
    1cf4:	95 83       	std	Z+5, r25	; 0x05
    1cf6:	84 83       	std	Z+4, r24	; 0x04
    1cf8:	97 83       	std	Z+7, r25	; 0x07
    1cfa:	86 83       	std	Z+6, r24	; 0x06
    1cfc:	8e 0d       	add	r24, r14
    1cfe:	9f 1d       	adc	r25, r15
    1d00:	91 87       	std	Z+9, r25	; 0x09
    1d02:	80 87       	std	Z+8, r24	; 0x08
    1d04:	f3 86       	std	Z+11, r15	; 0x0b
    1d06:	e2 86       	std	Z+10, r14	; 0x0a
    1d08:	0f 90       	pop	r0
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	c8 01       	movw	r24, r16
    1d0e:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	a9 f0       	breq	.+42     	; 0x1d40 <xSerialPortInitMinimal+0x9a>
    1d16:	fe 01       	movw	r30, r28
    1d18:	3e 96       	adiw	r30, 0x0e	; 14
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	0f 92       	push	r0
    1d20:	11 82       	std	Z+1, r1	; 0x01
    1d22:	10 82       	st	Z, r1
    1d24:	93 83       	std	Z+3, r25	; 0x03
    1d26:	82 83       	std	Z+2, r24	; 0x02
    1d28:	95 83       	std	Z+5, r25	; 0x05
    1d2a:	84 83       	std	Z+4, r24	; 0x04
    1d2c:	97 83       	std	Z+7, r25	; 0x07
    1d2e:	86 83       	std	Z+6, r24	; 0x06
    1d30:	80 0f       	add	r24, r16
    1d32:	91 1f       	adc	r25, r17
    1d34:	91 87       	std	Z+9, r25	; 0x09
    1d36:	80 87       	std	Z+8, r24	; 0x08
    1d38:	13 87       	std	Z+11, r17	; 0x0b
    1d3a:	02 87       	std	Z+10, r16	; 0x0a
    1d3c:	0f 90       	pop	r0
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	c8 01       	movw	r24, r16
    1d42:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1d46:	9b 8f       	std	Y+27, r25	; 0x1b
    1d48:	8a 8f       	std	Y+26, r24	; 0x1a
    1d4a:	79 82       	std	Y+1, r7	; 0x01
    1d4c:	1d 8f       	std	Y+29, r17	; 0x1d
    1d4e:	0c 8f       	std	Y+28, r16	; 0x1c
    1d50:	1e 8e       	std	Y+30, r1	; 0x1e
    1d52:	8f 8e       	std	Y+31, r8	; 0x1f
    1d54:	98 a2       	std	Y+32, r9	; 0x20
    1d56:	a9 a2       	std	Y+33, r10	; 0x21
    1d58:	ba a2       	std	Y+34, r11	; 0x22
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	f8 94       	cli
    1d5e:	0f 92       	push	r0
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	88 30       	cpi	r24, 0x08	; 8
    1d66:	91 05       	cpc	r25, r1
    1d68:	08 f0       	brcs	.+2      	; 0x1d6c <xSerialPortInitMinimal+0xc6>
    1d6a:	ba c1       	rjmp	.+884    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	88 27       	eor	r24, r24
    1d70:	e6 57       	subi	r30, 0x76	; 118
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	8f 4f       	sbci	r24, 0xFF	; 255
    1d76:	0c 94 e9 5a 	jmp	0xb5d2	; 0xb5d2 <__tablejump2__>
    1d7a:	d5 01       	movw	r26, r10
    1d7c:	c4 01       	movw	r24, r8
    1d7e:	97 5f       	subi	r25, 0xF7	; 247
    1d80:	a2 4c       	sbci	r26, 0xC2	; 194
    1d82:	bf 4f       	sbci	r27, 0xFF	; 255
    1d84:	bc 01       	movw	r22, r24
    1d86:	cd 01       	movw	r24, r26
    1d88:	66 0f       	add	r22, r22
    1d8a:	77 1f       	adc	r23, r23
    1d8c:	88 1f       	adc	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	66 0f       	add	r22, r22
    1d92:	77 1f       	adc	r23, r23
    1d94:	88 1f       	adc	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	95 01       	movw	r18, r10
    1d9a:	84 01       	movw	r16, r8
    1d9c:	00 0f       	add	r16, r16
    1d9e:	11 1f       	adc	r17, r17
    1da0:	22 1f       	adc	r18, r18
    1da2:	33 1f       	adc	r19, r19
    1da4:	00 0f       	add	r16, r16
    1da6:	11 1f       	adc	r17, r17
    1da8:	22 1f       	adc	r18, r18
    1daa:	33 1f       	adc	r19, r19
    1dac:	a9 01       	movw	r20, r18
    1dae:	98 01       	movw	r18, r16
    1db0:	22 0f       	add	r18, r18
    1db2:	33 1f       	adc	r19, r19
    1db4:	44 1f       	adc	r20, r20
    1db6:	55 1f       	adc	r21, r21
    1db8:	0e 94 c7 5a 	call	0xb58e	; 0xb58e <__udivmodsi4>
    1dbc:	21 50       	subi	r18, 0x01	; 1
    1dbe:	31 09       	sbc	r19, r1
    1dc0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1dc4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1dce:	88 e9       	ldi	r24, 0x98	; 152
    1dd0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1dd4:	8e e0       	ldi	r24, 0x0E	; 14
    1dd6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1dda:	82 c1       	rjmp	.+772    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1ddc:	04 ec       	ldi	r16, 0xC4	; 196
    1dde:	10 e0       	ldi	r17, 0x00	; 0
    1de0:	f8 01       	movw	r30, r16
    1de2:	11 82       	std	Z+1, r1	; 0x01
    1de4:	10 82       	st	Z, r1
    1de6:	6a 9a       	sbi	0x0d, 2	; 13
    1de8:	80 ec       	ldi	r24, 0xC0	; 192
    1dea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1dee:	88 e9       	ldi	r24, 0x98	; 152
    1df0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1df4:	d5 01       	movw	r26, r10
    1df6:	c4 01       	movw	r24, r8
    1df8:	80 58       	subi	r24, 0x80	; 128
    1dfa:	9b 47       	sbci	r25, 0x7B	; 123
    1dfc:	a1 4e       	sbci	r26, 0xE1	; 225
    1dfe:	bf 4f       	sbci	r27, 0xFF	; 255
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	aa 1f       	adc	r26, r26
    1e06:	bb 1f       	adc	r27, r27
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	aa 1f       	adc	r26, r26
    1e0e:	bb 1f       	adc	r27, r27
    1e10:	bc 01       	movw	r22, r24
    1e12:	cd 01       	movw	r24, r26
    1e14:	66 0f       	add	r22, r22
    1e16:	77 1f       	adc	r23, r23
    1e18:	88 1f       	adc	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	88 0c       	add	r8, r8
    1e1e:	99 1c       	adc	r9, r9
    1e20:	aa 1c       	adc	r10, r10
    1e22:	bb 1c       	adc	r11, r11
    1e24:	88 0c       	add	r8, r8
    1e26:	99 1c       	adc	r9, r9
    1e28:	aa 1c       	adc	r10, r10
    1e2a:	bb 1c       	adc	r11, r11
    1e2c:	a5 01       	movw	r20, r10
    1e2e:	94 01       	movw	r18, r8
    1e30:	22 0f       	add	r18, r18
    1e32:	33 1f       	adc	r19, r19
    1e34:	44 1f       	adc	r20, r20
    1e36:	55 1f       	adc	r21, r21
    1e38:	22 0f       	add	r18, r18
    1e3a:	33 1f       	adc	r19, r19
    1e3c:	44 1f       	adc	r20, r20
    1e3e:	55 1f       	adc	r21, r21
    1e40:	0e 94 c7 5a 	call	0xb58e	; 0xb58e <__udivmodsi4>
    1e44:	21 50       	subi	r18, 0x01	; 1
    1e46:	31 09       	sbc	r19, r1
    1e48:	f8 01       	movw	r30, r16
    1e4a:	31 83       	std	Z+1, r19	; 0x01
    1e4c:	20 83       	st	Z, r18
    1e4e:	48 c1       	rjmp	.+656    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1e50:	d5 01       	movw	r26, r10
    1e52:	c4 01       	movw	r24, r8
    1e54:	97 5f       	subi	r25, 0xF7	; 247
    1e56:	a2 4c       	sbci	r26, 0xC2	; 194
    1e58:	bf 4f       	sbci	r27, 0xFF	; 255
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	66 0f       	add	r22, r22
    1e60:	77 1f       	adc	r23, r23
    1e62:	88 1f       	adc	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	66 0f       	add	r22, r22
    1e68:	77 1f       	adc	r23, r23
    1e6a:	88 1f       	adc	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	95 01       	movw	r18, r10
    1e70:	84 01       	movw	r16, r8
    1e72:	00 0f       	add	r16, r16
    1e74:	11 1f       	adc	r17, r17
    1e76:	22 1f       	adc	r18, r18
    1e78:	33 1f       	adc	r19, r19
    1e7a:	00 0f       	add	r16, r16
    1e7c:	11 1f       	adc	r17, r17
    1e7e:	22 1f       	adc	r18, r18
    1e80:	33 1f       	adc	r19, r19
    1e82:	a9 01       	movw	r20, r18
    1e84:	98 01       	movw	r18, r16
    1e86:	22 0f       	add	r18, r18
    1e88:	33 1f       	adc	r19, r19
    1e8a:	44 1f       	adc	r20, r20
    1e8c:	55 1f       	adc	r21, r21
    1e8e:	0e 94 c7 5a 	call	0xb58e	; 0xb58e <__udivmodsi4>
    1e92:	21 50       	subi	r18, 0x01	; 1
    1e94:	31 09       	sbc	r19, r1
    1e96:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    1e9a:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    1e9e:	82 e0       	ldi	r24, 0x02	; 2
    1ea0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1ea4:	88 e9       	ldi	r24, 0x98	; 152
    1ea6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1eaa:	8e e0       	ldi	r24, 0x0E	; 14
    1eac:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1eb0:	17 c1       	rjmp	.+558    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1eb2:	0c ec       	ldi	r16, 0xCC	; 204
    1eb4:	10 e0       	ldi	r17, 0x00	; 0
    1eb6:	f8 01       	movw	r30, r16
    1eb8:	11 82       	std	Z+1, r1	; 0x01
    1eba:	10 82       	st	Z, r1
    1ebc:	55 9a       	sbi	0x0a, 5	; 10
    1ebe:	80 ec       	ldi	r24, 0xC0	; 192
    1ec0:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1ec4:	88 e9       	ldi	r24, 0x98	; 152
    1ec6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1eca:	d5 01       	movw	r26, r10
    1ecc:	c4 01       	movw	r24, r8
    1ece:	80 58       	subi	r24, 0x80	; 128
    1ed0:	9b 47       	sbci	r25, 0x7B	; 123
    1ed2:	a1 4e       	sbci	r26, 0xE1	; 225
    1ed4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	aa 1f       	adc	r26, r26
    1edc:	bb 1f       	adc	r27, r27
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	aa 1f       	adc	r26, r26
    1ee4:	bb 1f       	adc	r27, r27
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	66 0f       	add	r22, r22
    1eec:	77 1f       	adc	r23, r23
    1eee:	88 1f       	adc	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	88 0c       	add	r8, r8
    1ef4:	99 1c       	adc	r9, r9
    1ef6:	aa 1c       	adc	r10, r10
    1ef8:	bb 1c       	adc	r11, r11
    1efa:	88 0c       	add	r8, r8
    1efc:	99 1c       	adc	r9, r9
    1efe:	aa 1c       	adc	r10, r10
    1f00:	bb 1c       	adc	r11, r11
    1f02:	a5 01       	movw	r20, r10
    1f04:	94 01       	movw	r18, r8
    1f06:	22 0f       	add	r18, r18
    1f08:	33 1f       	adc	r19, r19
    1f0a:	44 1f       	adc	r20, r20
    1f0c:	55 1f       	adc	r21, r21
    1f0e:	22 0f       	add	r18, r18
    1f10:	33 1f       	adc	r19, r19
    1f12:	44 1f       	adc	r20, r20
    1f14:	55 1f       	adc	r21, r21
    1f16:	0e 94 c7 5a 	call	0xb58e	; 0xb58e <__udivmodsi4>
    1f1a:	21 50       	subi	r18, 0x01	; 1
    1f1c:	31 09       	sbc	r19, r1
    1f1e:	f8 01       	movw	r30, r16
    1f20:	31 83       	std	Z+1, r19	; 0x01
    1f22:	20 83       	st	Z, r18
    1f24:	dd c0       	rjmp	.+442    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1f26:	d5 01       	movw	r26, r10
    1f28:	c4 01       	movw	r24, r8
    1f2a:	97 5f       	subi	r25, 0xF7	; 247
    1f2c:	a2 4c       	sbci	r26, 0xC2	; 194
    1f2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	66 0f       	add	r22, r22
    1f36:	77 1f       	adc	r23, r23
    1f38:	88 1f       	adc	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	66 0f       	add	r22, r22
    1f3e:	77 1f       	adc	r23, r23
    1f40:	88 1f       	adc	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	95 01       	movw	r18, r10
    1f46:	84 01       	movw	r16, r8
    1f48:	00 0f       	add	r16, r16
    1f4a:	11 1f       	adc	r17, r17
    1f4c:	22 1f       	adc	r18, r18
    1f4e:	33 1f       	adc	r19, r19
    1f50:	00 0f       	add	r16, r16
    1f52:	11 1f       	adc	r17, r17
    1f54:	22 1f       	adc	r18, r18
    1f56:	33 1f       	adc	r19, r19
    1f58:	a9 01       	movw	r20, r18
    1f5a:	98 01       	movw	r18, r16
    1f5c:	22 0f       	add	r18, r18
    1f5e:	33 1f       	adc	r19, r19
    1f60:	44 1f       	adc	r20, r20
    1f62:	55 1f       	adc	r21, r21
    1f64:	0e 94 c7 5a 	call	0xb58e	; 0xb58e <__udivmodsi4>
    1f68:	21 50       	subi	r18, 0x01	; 1
    1f6a:	31 09       	sbc	r19, r1
    1f6c:	30 93 d5 00 	sts	0x00D5, r19	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    1f70:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    1f74:	82 e0       	ldi	r24, 0x02	; 2
    1f76:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1f7a:	88 e9       	ldi	r24, 0x98	; 152
    1f7c:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1f80:	8e e0       	ldi	r24, 0x0E	; 14
    1f82:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1f86:	ac c0       	rjmp	.+344    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1f88:	04 ed       	ldi	r16, 0xD4	; 212
    1f8a:	10 e0       	ldi	r17, 0x00	; 0
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	11 82       	std	Z+1, r1	; 0x01
    1f90:	10 82       	st	Z, r1
    1f92:	e1 e0       	ldi	r30, 0x01	; 1
    1f94:	f1 e0       	ldi	r31, 0x01	; 1
    1f96:	80 81       	ld	r24, Z
    1f98:	84 60       	ori	r24, 0x04	; 4
    1f9a:	80 83       	st	Z, r24
    1f9c:	80 ec       	ldi	r24, 0xC0	; 192
    1f9e:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1fa2:	88 e9       	ldi	r24, 0x98	; 152
    1fa4:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1fa8:	d5 01       	movw	r26, r10
    1faa:	c4 01       	movw	r24, r8
    1fac:	80 58       	subi	r24, 0x80	; 128
    1fae:	9b 47       	sbci	r25, 0x7B	; 123
    1fb0:	a1 4e       	sbci	r26, 0xE1	; 225
    1fb2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	aa 1f       	adc	r26, r26
    1fba:	bb 1f       	adc	r27, r27
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	aa 1f       	adc	r26, r26
    1fc2:	bb 1f       	adc	r27, r27
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	66 0f       	add	r22, r22
    1fca:	77 1f       	adc	r23, r23
    1fcc:	88 1f       	adc	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	88 0c       	add	r8, r8
    1fd2:	99 1c       	adc	r9, r9
    1fd4:	aa 1c       	adc	r10, r10
    1fd6:	bb 1c       	adc	r11, r11
    1fd8:	88 0c       	add	r8, r8
    1fda:	99 1c       	adc	r9, r9
    1fdc:	aa 1c       	adc	r10, r10
    1fde:	bb 1c       	adc	r11, r11
    1fe0:	a5 01       	movw	r20, r10
    1fe2:	94 01       	movw	r18, r8
    1fe4:	22 0f       	add	r18, r18
    1fe6:	33 1f       	adc	r19, r19
    1fe8:	44 1f       	adc	r20, r20
    1fea:	55 1f       	adc	r21, r21
    1fec:	22 0f       	add	r18, r18
    1fee:	33 1f       	adc	r19, r19
    1ff0:	44 1f       	adc	r20, r20
    1ff2:	55 1f       	adc	r21, r21
    1ff4:	0e 94 c7 5a 	call	0xb58e	; 0xb58e <__udivmodsi4>
    1ff8:	21 50       	subi	r18, 0x01	; 1
    1ffa:	31 09       	sbc	r19, r1
    1ffc:	f8 01       	movw	r30, r16
    1ffe:	31 83       	std	Z+1, r19	; 0x01
    2000:	20 83       	st	Z, r18
    2002:	6e c0       	rjmp	.+220    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    2004:	d5 01       	movw	r26, r10
    2006:	c4 01       	movw	r24, r8
    2008:	97 5f       	subi	r25, 0xF7	; 247
    200a:	a2 4c       	sbci	r26, 0xC2	; 194
    200c:	bf 4f       	sbci	r27, 0xFF	; 255
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	66 0f       	add	r22, r22
    2014:	77 1f       	adc	r23, r23
    2016:	88 1f       	adc	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	66 0f       	add	r22, r22
    201c:	77 1f       	adc	r23, r23
    201e:	88 1f       	adc	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	95 01       	movw	r18, r10
    2024:	84 01       	movw	r16, r8
    2026:	00 0f       	add	r16, r16
    2028:	11 1f       	adc	r17, r17
    202a:	22 1f       	adc	r18, r18
    202c:	33 1f       	adc	r19, r19
    202e:	00 0f       	add	r16, r16
    2030:	11 1f       	adc	r17, r17
    2032:	22 1f       	adc	r18, r18
    2034:	33 1f       	adc	r19, r19
    2036:	a9 01       	movw	r20, r18
    2038:	98 01       	movw	r18, r16
    203a:	22 0f       	add	r18, r18
    203c:	33 1f       	adc	r19, r19
    203e:	44 1f       	adc	r20, r20
    2040:	55 1f       	adc	r21, r21
    2042:	0e 94 c7 5a 	call	0xb58e	; 0xb58e <__udivmodsi4>
    2046:	21 50       	subi	r18, 0x01	; 1
    2048:	31 09       	sbc	r19, r1
    204a:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    204e:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2058:	88 e9       	ldi	r24, 0x98	; 152
    205a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    205e:	8e e0       	ldi	r24, 0x0E	; 14
    2060:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    2064:	3d c0       	rjmp	.+122    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    2066:	04 e3       	ldi	r16, 0x34	; 52
    2068:	11 e0       	ldi	r17, 0x01	; 1
    206a:	f8 01       	movw	r30, r16
    206c:	11 82       	std	Z+1, r1	; 0x01
    206e:	10 82       	st	Z, r1
    2070:	e4 e0       	ldi	r30, 0x04	; 4
    2072:	f1 e0       	ldi	r31, 0x01	; 1
    2074:	80 81       	ld	r24, Z
    2076:	84 60       	ori	r24, 0x04	; 4
    2078:	80 83       	st	Z, r24
    207a:	80 ec       	ldi	r24, 0xC0	; 192
    207c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    2080:	88 e9       	ldi	r24, 0x98	; 152
    2082:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    2086:	d5 01       	movw	r26, r10
    2088:	c4 01       	movw	r24, r8
    208a:	80 58       	subi	r24, 0x80	; 128
    208c:	9b 47       	sbci	r25, 0x7B	; 123
    208e:	a1 4e       	sbci	r26, 0xE1	; 225
    2090:	bf 4f       	sbci	r27, 0xFF	; 255
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	aa 1f       	adc	r26, r26
    2098:	bb 1f       	adc	r27, r27
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	aa 1f       	adc	r26, r26
    20a0:	bb 1f       	adc	r27, r27
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	66 0f       	add	r22, r22
    20a8:	77 1f       	adc	r23, r23
    20aa:	88 1f       	adc	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	88 0c       	add	r8, r8
    20b0:	99 1c       	adc	r9, r9
    20b2:	aa 1c       	adc	r10, r10
    20b4:	bb 1c       	adc	r11, r11
    20b6:	88 0c       	add	r8, r8
    20b8:	99 1c       	adc	r9, r9
    20ba:	aa 1c       	adc	r10, r10
    20bc:	bb 1c       	adc	r11, r11
    20be:	a5 01       	movw	r20, r10
    20c0:	94 01       	movw	r18, r8
    20c2:	22 0f       	add	r18, r18
    20c4:	33 1f       	adc	r19, r19
    20c6:	44 1f       	adc	r20, r20
    20c8:	55 1f       	adc	r21, r21
    20ca:	22 0f       	add	r18, r18
    20cc:	33 1f       	adc	r19, r19
    20ce:	44 1f       	adc	r20, r20
    20d0:	55 1f       	adc	r21, r21
    20d2:	0e 94 c7 5a 	call	0xb58e	; 0xb58e <__udivmodsi4>
    20d6:	21 50       	subi	r18, 0x01	; 1
    20d8:	31 09       	sbc	r19, r1
    20da:	f8 01       	movw	r30, r16
    20dc:	31 83       	std	Z+1, r19	; 0x01
    20de:	20 83       	st	Z, r18
    20e0:	0f 90       	pop	r0
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	82 e2       	ldi	r24, 0x22	; 34
    20e6:	fe 01       	movw	r30, r28
    20e8:	31 96       	adiw	r30, 0x01	; 1
    20ea:	d6 01       	movw	r26, r12
    20ec:	01 90       	ld	r0, Z+
    20ee:	0d 92       	st	X+, r0
    20f0:	8a 95       	dec	r24
    20f2:	e1 f7       	brne	.-8      	; 0x20ec <xSerialPortInitMinimal+0x446>
    20f4:	c6 01       	movw	r24, r12
    20f6:	a2 96       	adiw	r28, 0x22	; 34
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	ff 90       	pop	r15
    210c:	ef 90       	pop	r14
    210e:	df 90       	pop	r13
    2110:	cf 90       	pop	r12
    2112:	bf 90       	pop	r11
    2114:	af 90       	pop	r10
    2116:	9f 90       	pop	r9
    2118:	8f 90       	pop	r8
    211a:	7f 90       	pop	r7
    211c:	08 95       	ret

0000211e <__vector_25>:
#elif defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
ISR( USART0_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART0_RX_vect )

#endif
{
    211e:	1f 92       	push	r1
    2120:	0f 92       	push	r0
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	0f 92       	push	r0
    2126:	11 24       	eor	r1, r1
    2128:	0b b6       	in	r0, 0x3b	; 59
    212a:	0f 92       	push	r0
    212c:	2f 93       	push	r18
    212e:	3f 93       	push	r19
    2130:	4f 93       	push	r20
    2132:	5f 93       	push	r21
    2134:	6f 93       	push	r22
    2136:	7f 93       	push	r23
    2138:	8f 93       	push	r24
    213a:	9f 93       	push	r25
    213c:	af 93       	push	r26
    213e:	bf 93       	push	r27
    2140:	cf 93       	push	r28
    2142:	ef 93       	push	r30
    2144:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR0A & (_BV(FE0)|_BV(DOR0)|_BV(UPE0)) ) )
    2146:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    214a:	8c 71       	andi	r24, 0x1C	; 28
    214c:	71 f0       	breq	.+28     	; 0x216a <__vector_25+0x4c>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR0A & (1<<RXC0) ) erroredByte = UDR0;
    214e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    2152:	88 23       	and	r24, r24
    2154:	0c f0       	brlt	.+2      	; 0x2158 <__vector_25+0x3a>
    2156:	57 c0       	rjmp	.+174    	; 0x2206 <__stack+0x7>
    2158:	a6 ec       	ldi	r26, 0xC6	; 198
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e0 ec       	ldi	r30, 0xC0	; 192
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	8c 91       	ld	r24, X
    2162:	80 81       	ld	r24, Z
    2164:	88 23       	and	r24, r24
    2166:	e4 f3       	brlt	.-8      	; 0x2160 <__vector_25+0x42>
    2168:	4e c0       	rjmp	.+156    	; 0x2206 <__stack+0x7>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR0;
    216a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
//UCSR3B &= ~ ( _BV(RXCIE3) | _BV(RXEN3) | _BV(TXEN3));
if(!port_3)
    216e:	80 91 01 09 	lds	r24, 0x0901	; 0x800901 <port_3>
    2172:	81 11       	cpse	r24, r1
    2174:	1d c0       	rjmp	.+58     	; 0x21b0 <__vector_25+0x92>
{
port_0=true;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	80 93 a7 0a 	sts	0x0AA7, r24	; 0x800aa7 <port_0>
//timer_1_Init();
stop_1_Timer();
    217c:	0e 94 12 26 	call	0x4c24	; 0x4c24 <stop_1_Timer>
TCNT1=0;//my cod		
    2180:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    2184:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
frame[indexBuf] = cChar;//my cod
    2188:	e0 91 9f 07 	lds	r30, 0x079F	; 0x80079f <indexBuf>
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	ee 53       	subi	r30, 0x3E	; 62
    2190:	f8 4f       	sbci	r31, 0xF8	; 248
    2192:	c0 83       	st	Z, r28
indexBuf++;//my cod
    2194:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <indexBuf>
    2198:	8f 5f       	subi	r24, 0xFF	; 255
    219a:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <indexBuf>
if(indexBuf == portSERIAL_BUFFER_RX ) overflow=1;//my cod
    219e:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <indexBuf>
    21a2:	8f 3f       	cpi	r24, 0xFF	; 255
    21a4:	19 f4       	brne	.+6      	; 0x21ac <__vector_25+0x8e>
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <overflow>
start_1_Timer();//my cod
    21ac:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <start_1_Timer>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	0f 92       	push	r0
	{
	    count = buffer->count;
    21b6:	e9 e5       	ldi	r30, 0x59	; 89
    21b8:	f7 e0       	ldi	r31, 0x07	; 7
    21ba:	21 81       	ldd	r18, Z+1	; 0x01
    21bc:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    21be:	0f 90       	pop	r0
    21c0:	0f be       	out	0x3f, r0	; 63
}
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerialPort.xRxedChars) ) )
    21c2:	83 85       	ldd	r24, Z+11	; 0x0b
    21c4:	94 85       	ldd	r25, Z+12	; 0x0c
    21c6:	28 17       	cp	r18, r24
    21c8:	39 07       	cpc	r19, r25
    21ca:	e9 f0       	breq	.+58     	; 0x2206 <__stack+0x7>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    21cc:	ea e5       	ldi	r30, 0x5A	; 90
    21ce:	f7 e0       	ldi	r31, 0x07	; 7

	*buffer->in = data;
    21d0:	a2 81       	ldd	r26, Z+2	; 0x02
    21d2:	b3 81       	ldd	r27, Z+3	; 0x03
    21d4:	cc 93       	st	X, r28

	if (++buffer->in == buffer->end)
    21d6:	82 81       	ldd	r24, Z+2	; 0x02
    21d8:	93 81       	ldd	r25, Z+3	; 0x03
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	93 83       	std	Z+3, r25	; 0x03
    21de:	82 83       	std	Z+2, r24	; 0x02
    21e0:	20 85       	ldd	r18, Z+8	; 0x08
    21e2:	31 85       	ldd	r19, Z+9	; 0x09
    21e4:	82 17       	cp	r24, r18
    21e6:	93 07       	cpc	r25, r19
    21e8:	21 f4       	brne	.+8      	; 0x21f2 <__vector_25+0xd4>
	  buffer->in = buffer->start;
    21ea:	86 81       	ldd	r24, Z+6	; 0x06
    21ec:	97 81       	ldd	r25, Z+7	; 0x07
    21ee:	93 83       	std	Z+3, r25	; 0x03
    21f0:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	0f 92       	push	r0
	{
	    buffer->count++;
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	01 96       	adiw	r24, 0x01	; 1
    21fe:	91 83       	std	Z+1, r25	; 0x01
    2200:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    2202:	0f 90       	pop	r0
    2204:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerialPort.xRxedChars), cChar);
	}
}
    2206:	ff 91       	pop	r31
    2208:	ef 91       	pop	r30
    220a:	cf 91       	pop	r28
    220c:	bf 91       	pop	r27
    220e:	af 91       	pop	r26
    2210:	9f 91       	pop	r25
    2212:	8f 91       	pop	r24
    2214:	7f 91       	pop	r23
    2216:	6f 91       	pop	r22
    2218:	5f 91       	pop	r21
    221a:	4f 91       	pop	r20
    221c:	3f 91       	pop	r19
    221e:	2f 91       	pop	r18
    2220:	0f 90       	pop	r0
    2222:	0b be       	out	0x3b, r0	; 59
    2224:	0f 90       	pop	r0
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	0f 90       	pop	r0
    222a:	1f 90       	pop	r1
    222c:	18 95       	reti

0000222e <__vector_26>:
#elif defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
ISR( USART0_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART0_UDRE_vect )

#endif
{
    222e:	1f 92       	push	r1
    2230:	0f 92       	push	r0
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	0f 92       	push	r0
    2236:	11 24       	eor	r1, r1
    2238:	0b b6       	in	r0, 0x3b	; 59
    223a:	0f 92       	push	r0
    223c:	2f 93       	push	r18
    223e:	8f 93       	push	r24
    2240:	9f 93       	push	r25
    2242:	af 93       	push	r26
    2244:	bf 93       	push	r27
    2246:	ef 93       	push	r30
    2248:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	0f 92       	push	r0
	{
	    count = buffer->count;
    2250:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <xSerialPort+0xd>
    2254:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <xSerialPort+0xe>
	}
	portEXIT_CRITICAL();
    2258:	0f 90       	pop	r0
    225a:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerialPort.xCharsForTx) ) )
    225c:	89 2b       	or	r24, r25
    225e:	31 f4       	brne	.+12     	; 0x226c <__vector_26+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt0_Off();
    2260:	e1 ec       	ldi	r30, 0xC1	; 193
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	8f 7d       	andi	r24, 0xDF	; 223
    2268:	80 83       	st	Z, r24
    226a:	1c c0       	rjmp	.+56     	; 0x22a4 <__vector_26+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    226c:	e6 e6       	ldi	r30, 0x66	; 102
    226e:	f7 e0       	ldi	r31, 0x07	; 7

	uint8_t data = *buffer->out;
    2270:	a4 81       	ldd	r26, Z+4	; 0x04
    2272:	b5 81       	ldd	r27, Z+5	; 0x05
    2274:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    2276:	b5 83       	std	Z+5, r27	; 0x05
    2278:	a4 83       	std	Z+4, r26	; 0x04
    227a:	80 85       	ldd	r24, Z+8	; 0x08
    227c:	91 85       	ldd	r25, Z+9	; 0x09
    227e:	a8 17       	cp	r26, r24
    2280:	b9 07       	cpc	r27, r25
    2282:	21 f4       	brne	.+8      	; 0x228c <__vector_26+0x5e>
	  buffer->out = buffer->start;
    2284:	86 81       	ldd	r24, Z+6	; 0x06
    2286:	97 81       	ldd	r25, Z+7	; 0x07
    2288:	95 83       	std	Z+5, r25	; 0x05
    228a:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	0f 92       	push	r0
	{
	    buffer->count--;
    2292:	80 81       	ld	r24, Z
    2294:	91 81       	ldd	r25, Z+1	; 0x01
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    229c:	0f 90       	pop	r0
    229e:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR0 = ringBuffer_Pop( (ringBuffer_t*) &(xSerialPort.xCharsForTx) );
    22a0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    22a4:	ff 91       	pop	r31
    22a6:	ef 91       	pop	r30
    22a8:	bf 91       	pop	r27
    22aa:	af 91       	pop	r26
    22ac:	9f 91       	pop	r25
    22ae:	8f 91       	pop	r24
    22b0:	2f 91       	pop	r18
    22b2:	0f 90       	pop	r0
    22b4:	0b be       	out	0x3b, r0	; 59
    22b6:	0f 90       	pop	r0
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	0f 90       	pop	r0
    22bc:	1f 90       	pop	r1
    22be:	18 95       	reti

000022c0 <__vector_36>:

#if defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

ISR( USART1_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART1_RX_vect )
{
    22c0:	1f 92       	push	r1
    22c2:	0f 92       	push	r0
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	0f 92       	push	r0
    22c8:	11 24       	eor	r1, r1
    22ca:	0b b6       	in	r0, 0x3b	; 59
    22cc:	0f 92       	push	r0
    22ce:	2f 93       	push	r18
    22d0:	3f 93       	push	r19
    22d2:	4f 93       	push	r20
    22d4:	8f 93       	push	r24
    22d6:	9f 93       	push	r25
    22d8:	af 93       	push	r26
    22da:	bf 93       	push	r27
    22dc:	ef 93       	push	r30
    22de:	ff 93       	push	r31
	/* Get status and data from buffer */
     
	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR1A &  (_BV(FE1)|_BV(DOR1)|_BV(UPE1)) ) )
    22e0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    22e4:	8c 71       	andi	r24, 0x1C	; 28
    22e6:	71 f0       	breq	.+28     	; 0x2304 <__vector_36+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR1A & (1<<RXC1) ) erroredByte = UDR1;
    22e8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    22ec:	88 23       	and	r24, r24
    22ee:	0c f0       	brlt	.+2      	; 0x22f2 <__vector_36+0x32>
    22f0:	36 c0       	rjmp	.+108    	; 0x235e <__vector_36+0x9e>
    22f2:	ae ec       	ldi	r26, 0xCE	; 206
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e8 ec       	ldi	r30, 0xC8	; 200
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	8c 91       	ld	r24, X
    22fc:	80 81       	ld	r24, Z
    22fe:	88 23       	and	r24, r24
    2300:	e4 f3       	brlt	.-8      	; 0x22fa <__vector_36+0x3a>
    2302:	2d c0       	rjmp	.+90     	; 0x235e <__vector_36+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR1;
    2304:	40 91 ce 00 	lds	r20, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	0f 92       	push	r0
	{
	    count = buffer->count;
    230e:	e1 ec       	ldi	r30, 0xC1	; 193
    2310:	f8 e0       	ldi	r31, 0x08	; 8
    2312:	21 81       	ldd	r18, Z+1	; 0x01
    2314:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2316:	0f 90       	pop	r0
    2318:	0f be       	out	0x3f, r0	; 63
				
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial1Port.xRxedChars) ) )
    231a:	83 85       	ldd	r24, Z+11	; 0x0b
    231c:	94 85       	ldd	r25, Z+12	; 0x0c
    231e:	28 17       	cp	r18, r24
    2320:	39 07       	cpc	r19, r25
    2322:	e9 f0       	breq	.+58     	; 0x235e <__vector_36+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    2324:	e2 ec       	ldi	r30, 0xC2	; 194
    2326:	f8 e0       	ldi	r31, 0x08	; 8

	*buffer->in = data;
    2328:	a2 81       	ldd	r26, Z+2	; 0x02
    232a:	b3 81       	ldd	r27, Z+3	; 0x03
    232c:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	01 96       	adiw	r24, 0x01	; 1
    2334:	93 83       	std	Z+3, r25	; 0x03
    2336:	82 83       	std	Z+2, r24	; 0x02
    2338:	20 85       	ldd	r18, Z+8	; 0x08
    233a:	31 85       	ldd	r19, Z+9	; 0x09
    233c:	82 17       	cp	r24, r18
    233e:	93 07       	cpc	r25, r19
    2340:	21 f4       	brne	.+8      	; 0x234a <__vector_36+0x8a>
	  buffer->in = buffer->start;
    2342:	86 81       	ldd	r24, Z+6	; 0x06
    2344:	97 81       	ldd	r25, Z+7	; 0x07
    2346:	93 83       	std	Z+3, r25	; 0x03
    2348:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	0f 92       	push	r0
	{
	    buffer->count++;
    2350:	80 81       	ld	r24, Z
    2352:	91 81       	ldd	r25, Z+1	; 0x01
    2354:	01 96       	adiw	r24, 0x01	; 1
    2356:	91 83       	std	Z+1, r25	; 0x01
    2358:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    235a:	0f 90       	pop	r0
    235c:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial1Port.xRxedChars), cChar);
			
	}
}
    235e:	ff 91       	pop	r31
    2360:	ef 91       	pop	r30
    2362:	bf 91       	pop	r27
    2364:	af 91       	pop	r26
    2366:	9f 91       	pop	r25
    2368:	8f 91       	pop	r24
    236a:	4f 91       	pop	r20
    236c:	3f 91       	pop	r19
    236e:	2f 91       	pop	r18
    2370:	0f 90       	pop	r0
    2372:	0b be       	out	0x3b, r0	; 59
    2374:	0f 90       	pop	r0
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	0f 90       	pop	r0
    237a:	1f 90       	pop	r1
    237c:	18 95       	reti

0000237e <__vector_37>:
/*-----------------------------------------------------------*/

ISR( USART1_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART1_UDRE_vect )
{
    237e:	1f 92       	push	r1
    2380:	0f 92       	push	r0
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	0f 92       	push	r0
    2386:	11 24       	eor	r1, r1
    2388:	0b b6       	in	r0, 0x3b	; 59
    238a:	0f 92       	push	r0
    238c:	2f 93       	push	r18
    238e:	8f 93       	push	r24
    2390:	9f 93       	push	r25
    2392:	af 93       	push	r26
    2394:	bf 93       	push	r27
    2396:	ef 93       	push	r30
    2398:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	0f 92       	push	r0
	{
	    count = buffer->count;
    23a0:	80 91 ce 08 	lds	r24, 0x08CE	; 0x8008ce <xSerial1Port+0xd>
    23a4:	90 91 cf 08 	lds	r25, 0x08CF	; 0x8008cf <xSerial1Port+0xe>
	}
	portEXIT_CRITICAL();
    23a8:	0f 90       	pop	r0
    23aa:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) ) )
    23ac:	89 2b       	or	r24, r25
    23ae:	31 f4       	brne	.+12     	; 0x23bc <__vector_37+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt1_Off();
    23b0:	e9 ec       	ldi	r30, 0xC9	; 201
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	8f 7d       	andi	r24, 0xDF	; 223
    23b8:	80 83       	st	Z, r24
    23ba:	1c c0       	rjmp	.+56     	; 0x23f4 <__vector_37+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    23bc:	ee ec       	ldi	r30, 0xCE	; 206
    23be:	f8 e0       	ldi	r31, 0x08	; 8

	uint8_t data = *buffer->out;
    23c0:	a4 81       	ldd	r26, Z+4	; 0x04
    23c2:	b5 81       	ldd	r27, Z+5	; 0x05
    23c4:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    23c6:	b5 83       	std	Z+5, r27	; 0x05
    23c8:	a4 83       	std	Z+4, r26	; 0x04
    23ca:	80 85       	ldd	r24, Z+8	; 0x08
    23cc:	91 85       	ldd	r25, Z+9	; 0x09
    23ce:	a8 17       	cp	r26, r24
    23d0:	b9 07       	cpc	r27, r25
    23d2:	21 f4       	brne	.+8      	; 0x23dc <__vector_37+0x5e>
	  buffer->out = buffer->start;
    23d4:	86 81       	ldd	r24, Z+6	; 0x06
    23d6:	97 81       	ldd	r25, Z+7	; 0x07
    23d8:	95 83       	std	Z+5, r25	; 0x05
    23da:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	0f 92       	push	r0
	{
	    buffer->count--;
    23e2:	80 81       	ld	r24, Z
    23e4:	91 81       	ldd	r25, Z+1	; 0x01
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	91 83       	std	Z+1, r25	; 0x01
    23ea:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    23ec:	0f 90       	pop	r0
    23ee:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR1 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) );
    23f0:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
	}
}
    23f4:	ff 91       	pop	r31
    23f6:	ef 91       	pop	r30
    23f8:	bf 91       	pop	r27
    23fa:	af 91       	pop	r26
    23fc:	9f 91       	pop	r25
    23fe:	8f 91       	pop	r24
    2400:	2f 91       	pop	r18
    2402:	0f 90       	pop	r0
    2404:	0b be       	out	0x3b, r0	; 59
    2406:	0f 90       	pop	r0
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	0f 90       	pop	r0
    240c:	1f 90       	pop	r1
    240e:	18 95       	reti

00002410 <__vector_51>:

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

ISR( USART2_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART2_RX_vect )
{
    2410:	1f 92       	push	r1
    2412:	0f 92       	push	r0
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	0f 92       	push	r0
    2418:	11 24       	eor	r1, r1
    241a:	0b b6       	in	r0, 0x3b	; 59
    241c:	0f 92       	push	r0
    241e:	2f 93       	push	r18
    2420:	3f 93       	push	r19
    2422:	4f 93       	push	r20
    2424:	8f 93       	push	r24
    2426:	9f 93       	push	r25
    2428:	af 93       	push	r26
    242a:	bf 93       	push	r27
    242c:	ef 93       	push	r30
    242e:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR2A & (_BV(FE2)|_BV(DOR2)|_BV(UPE2)) ) )
    2430:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    2434:	8c 71       	andi	r24, 0x1C	; 28
    2436:	71 f0       	breq	.+28     	; 0x2454 <__vector_51+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR2A & (1<<RXC2) ) erroredByte = UDR2;
    2438:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    243c:	88 23       	and	r24, r24
    243e:	0c f0       	brlt	.+2      	; 0x2442 <__vector_51+0x32>
    2440:	36 c0       	rjmp	.+108    	; 0x24ae <__vector_51+0x9e>
    2442:	a6 ed       	ldi	r26, 0xD6	; 214
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e0 ed       	ldi	r30, 0xD0	; 208
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	8c 91       	ld	r24, X
    244c:	80 81       	ld	r24, Z
    244e:	88 23       	and	r24, r24
    2450:	e4 f3       	brlt	.-8      	; 0x244a <__vector_51+0x3a>
    2452:	2d c0       	rjmp	.+90     	; 0x24ae <__vector_51+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR2;
    2454:	40 91 d6 00 	lds	r20, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	0f 92       	push	r0
	{
	    count = buffer->count;
    245e:	ed e7       	ldi	r30, 0x7D	; 125
    2460:	f7 e0       	ldi	r31, 0x07	; 7
    2462:	21 81       	ldd	r18, Z+1	; 0x01
    2464:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2466:	0f 90       	pop	r0
    2468:	0f be       	out	0x3f, r0	; 63

		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial2Port.xRxedChars) ) )
    246a:	83 85       	ldd	r24, Z+11	; 0x0b
    246c:	94 85       	ldd	r25, Z+12	; 0x0c
    246e:	28 17       	cp	r18, r24
    2470:	39 07       	cpc	r19, r25
    2472:	e9 f0       	breq	.+58     	; 0x24ae <__vector_51+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    2474:	ee e7       	ldi	r30, 0x7E	; 126
    2476:	f7 e0       	ldi	r31, 0x07	; 7

	*buffer->in = data;
    2478:	a2 81       	ldd	r26, Z+2	; 0x02
    247a:	b3 81       	ldd	r27, Z+3	; 0x03
    247c:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	93 81       	ldd	r25, Z+3	; 0x03
    2482:	01 96       	adiw	r24, 0x01	; 1
    2484:	93 83       	std	Z+3, r25	; 0x03
    2486:	82 83       	std	Z+2, r24	; 0x02
    2488:	20 85       	ldd	r18, Z+8	; 0x08
    248a:	31 85       	ldd	r19, Z+9	; 0x09
    248c:	82 17       	cp	r24, r18
    248e:	93 07       	cpc	r25, r19
    2490:	21 f4       	brne	.+8      	; 0x249a <__vector_51+0x8a>
	  buffer->in = buffer->start;
    2492:	86 81       	ldd	r24, Z+6	; 0x06
    2494:	97 81       	ldd	r25, Z+7	; 0x07
    2496:	93 83       	std	Z+3, r25	; 0x03
    2498:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	0f 92       	push	r0
	{
	    buffer->count++;
    24a0:	80 81       	ld	r24, Z
    24a2:	91 81       	ldd	r25, Z+1	; 0x01
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    24aa:	0f 90       	pop	r0
    24ac:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial2Port.xRxedChars), cChar);
	}
}
    24ae:	ff 91       	pop	r31
    24b0:	ef 91       	pop	r30
    24b2:	bf 91       	pop	r27
    24b4:	af 91       	pop	r26
    24b6:	9f 91       	pop	r25
    24b8:	8f 91       	pop	r24
    24ba:	4f 91       	pop	r20
    24bc:	3f 91       	pop	r19
    24be:	2f 91       	pop	r18
    24c0:	0f 90       	pop	r0
    24c2:	0b be       	out	0x3b, r0	; 59
    24c4:	0f 90       	pop	r0
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	0f 90       	pop	r0
    24ca:	1f 90       	pop	r1
    24cc:	18 95       	reti

000024ce <__vector_52>:
/*-----------------------------------------------------------*/

ISR( USART2_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART2_UDRE_vect )
{
    24ce:	1f 92       	push	r1
    24d0:	0f 92       	push	r0
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	0f 92       	push	r0
    24d6:	11 24       	eor	r1, r1
    24d8:	0b b6       	in	r0, 0x3b	; 59
    24da:	0f 92       	push	r0
    24dc:	2f 93       	push	r18
    24de:	8f 93       	push	r24
    24e0:	9f 93       	push	r25
    24e2:	af 93       	push	r26
    24e4:	bf 93       	push	r27
    24e6:	ef 93       	push	r30
    24e8:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	0f 92       	push	r0
	{
	    count = buffer->count;
    24f0:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <xSerial2Port+0xd>
    24f4:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <xSerial2Port+0xe>
	}
	portEXIT_CRITICAL();
    24f8:	0f 90       	pop	r0
    24fa:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) ) )
    24fc:	89 2b       	or	r24, r25
    24fe:	31 f4       	brne	.+12     	; 0x250c <__vector_52+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt2_Off();
    2500:	e1 ed       	ldi	r30, 0xD1	; 209
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	8f 7d       	andi	r24, 0xDF	; 223
    2508:	80 83       	st	Z, r24
    250a:	1c c0       	rjmp	.+56     	; 0x2544 <__vector_52+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    250c:	ea e8       	ldi	r30, 0x8A	; 138
    250e:	f7 e0       	ldi	r31, 0x07	; 7

	uint8_t data = *buffer->out;
    2510:	a4 81       	ldd	r26, Z+4	; 0x04
    2512:	b5 81       	ldd	r27, Z+5	; 0x05
    2514:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    2516:	b5 83       	std	Z+5, r27	; 0x05
    2518:	a4 83       	std	Z+4, r26	; 0x04
    251a:	80 85       	ldd	r24, Z+8	; 0x08
    251c:	91 85       	ldd	r25, Z+9	; 0x09
    251e:	a8 17       	cp	r26, r24
    2520:	b9 07       	cpc	r27, r25
    2522:	21 f4       	brne	.+8      	; 0x252c <__vector_52+0x5e>
	  buffer->out = buffer->start;
    2524:	86 81       	ldd	r24, Z+6	; 0x06
    2526:	97 81       	ldd	r25, Z+7	; 0x07
    2528:	95 83       	std	Z+5, r25	; 0x05
    252a:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	0f 92       	push	r0
	{
	    buffer->count--;
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	91 83       	std	Z+1, r25	; 0x01
    253a:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    253c:	0f 90       	pop	r0
    253e:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR2 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) );
    2540:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	}
}
    2544:	ff 91       	pop	r31
    2546:	ef 91       	pop	r30
    2548:	bf 91       	pop	r27
    254a:	af 91       	pop	r26
    254c:	9f 91       	pop	r25
    254e:	8f 91       	pop	r24
    2550:	2f 91       	pop	r18
    2552:	0f 90       	pop	r0
    2554:	0b be       	out	0x3b, r0	; 59
    2556:	0f 90       	pop	r0
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	0f 90       	pop	r0
    255c:	1f 90       	pop	r1
    255e:	18 95       	reti

00002560 <__vector_54>:
/*-----------------------------------------------------------*/

ISR( USART3_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART3_RX_vect )
{
    2560:	1f 92       	push	r1
    2562:	0f 92       	push	r0
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	0f 92       	push	r0
    2568:	11 24       	eor	r1, r1
    256a:	0b b6       	in	r0, 0x3b	; 59
    256c:	0f 92       	push	r0
    256e:	2f 93       	push	r18
    2570:	3f 93       	push	r19
    2572:	4f 93       	push	r20
    2574:	5f 93       	push	r21
    2576:	6f 93       	push	r22
    2578:	7f 93       	push	r23
    257a:	8f 93       	push	r24
    257c:	9f 93       	push	r25
    257e:	af 93       	push	r26
    2580:	bf 93       	push	r27
    2582:	cf 93       	push	r28
    2584:	ef 93       	push	r30
    2586:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR3A & (_BV(FE3)|_BV(DOR3)|_BV(UPE3)) ) )
    2588:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    258c:	8c 71       	andi	r24, 0x1C	; 28
    258e:	71 f0       	breq	.+28     	; 0x25ac <__vector_54+0x4c>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR3A & (1<<RXC3) ) erroredByte = UDR3;
    2590:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2594:	88 23       	and	r24, r24
    2596:	0c f0       	brlt	.+2      	; 0x259a <__vector_54+0x3a>
    2598:	57 c0       	rjmp	.+174    	; 0x2648 <__vector_54+0xe8>
    259a:	a6 e3       	ldi	r26, 0x36	; 54
    259c:	b1 e0       	ldi	r27, 0x01	; 1
    259e:	e0 e3       	ldi	r30, 0x30	; 48
    25a0:	f1 e0       	ldi	r31, 0x01	; 1
    25a2:	8c 91       	ld	r24, X
    25a4:	80 81       	ld	r24, Z
    25a6:	88 23       	and	r24, r24
    25a8:	e4 f3       	brlt	.-8      	; 0x25a2 <__vector_54+0x42>
    25aa:	4e c0       	rjmp	.+156    	; 0x2648 <__vector_54+0xe8>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR3;
    25ac:	c0 91 36 01 	lds	r28, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		
	//xSerialxPrintf(&xSerial3Port,"interrupt\r\n");	
if(!port_0)
    25b0:	80 91 a7 0a 	lds	r24, 0x0AA7	; 0x800aa7 <port_0>
    25b4:	81 11       	cpse	r24, r1
    25b6:	1d c0       	rjmp	.+58     	; 0x25f2 <__vector_54+0x92>
{			//xSerialxPrintf(&xSerial3Port,"port_3\r\n");
			port_3=true;
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	80 93 01 09 	sts	0x0901, r24	; 0x800901 <port_3>
			//timer_1_Init();
			stop_1_Timer();
    25be:	0e 94 12 26 	call	0x4c24	; 0x4c24 <stop_1_Timer>
			TCNT1=0;//my cod
    25c2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    25c6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
			frame[indexBuf] = cChar;//my cod
    25ca:	e0 91 9f 07 	lds	r30, 0x079F	; 0x80079f <indexBuf>
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	ee 53       	subi	r30, 0x3E	; 62
    25d2:	f8 4f       	sbci	r31, 0xF8	; 248
    25d4:	c0 83       	st	Z, r28
			indexBuf++;//my cod
    25d6:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <indexBuf>
    25da:	8f 5f       	subi	r24, 0xFF	; 255
    25dc:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <indexBuf>
			if(indexBuf == portSERIAL_BUFFER_RX ) overflow=1;//my cod
    25e0:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <indexBuf>
    25e4:	8f 3f       	cpi	r24, 0xFF	; 255
    25e6:	19 f4       	brne	.+6      	; 0x25ee <__vector_54+0x8e>
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <overflow>
			start_1_Timer();//my cod
    25ee:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <start_1_Timer>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	0f 92       	push	r0
	{
	    count = buffer->count;
    25f8:	e0 ea       	ldi	r30, 0xA0	; 160
    25fa:	f7 e0       	ldi	r31, 0x07	; 7
    25fc:	21 81       	ldd	r18, Z+1	; 0x01
    25fe:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2600:	0f 90       	pop	r0
    2602:	0f be       	out	0x3f, r0	; 63
}
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial3Port.xRxedChars) ) )
    2604:	83 85       	ldd	r24, Z+11	; 0x0b
    2606:	94 85       	ldd	r25, Z+12	; 0x0c
    2608:	28 17       	cp	r18, r24
    260a:	39 07       	cpc	r19, r25
    260c:	e9 f0       	breq	.+58     	; 0x2648 <__vector_54+0xe8>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    260e:	e1 ea       	ldi	r30, 0xA1	; 161
    2610:	f7 e0       	ldi	r31, 0x07	; 7

	*buffer->in = data;
    2612:	a2 81       	ldd	r26, Z+2	; 0x02
    2614:	b3 81       	ldd	r27, Z+3	; 0x03
    2616:	cc 93       	st	X, r28

	if (++buffer->in == buffer->end)
    2618:	82 81       	ldd	r24, Z+2	; 0x02
    261a:	93 81       	ldd	r25, Z+3	; 0x03
    261c:	01 96       	adiw	r24, 0x01	; 1
    261e:	93 83       	std	Z+3, r25	; 0x03
    2620:	82 83       	std	Z+2, r24	; 0x02
    2622:	20 85       	ldd	r18, Z+8	; 0x08
    2624:	31 85       	ldd	r19, Z+9	; 0x09
    2626:	82 17       	cp	r24, r18
    2628:	93 07       	cpc	r25, r19
    262a:	21 f4       	brne	.+8      	; 0x2634 <__vector_54+0xd4>
	  buffer->in = buffer->start;
    262c:	86 81       	ldd	r24, Z+6	; 0x06
    262e:	97 81       	ldd	r25, Z+7	; 0x07
    2630:	93 83       	std	Z+3, r25	; 0x03
    2632:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	0f 92       	push	r0
	{
	    buffer->count++;
    263a:	80 81       	ld	r24, Z
    263c:	91 81       	ldd	r25, Z+1	; 0x01
    263e:	01 96       	adiw	r24, 0x01	; 1
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    2644:	0f 90       	pop	r0
    2646:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial3Port.xRxedChars), cChar);
	}
}
    2648:	ff 91       	pop	r31
    264a:	ef 91       	pop	r30
    264c:	cf 91       	pop	r28
    264e:	bf 91       	pop	r27
    2650:	af 91       	pop	r26
    2652:	9f 91       	pop	r25
    2654:	8f 91       	pop	r24
    2656:	7f 91       	pop	r23
    2658:	6f 91       	pop	r22
    265a:	5f 91       	pop	r21
    265c:	4f 91       	pop	r20
    265e:	3f 91       	pop	r19
    2660:	2f 91       	pop	r18
    2662:	0f 90       	pop	r0
    2664:	0b be       	out	0x3b, r0	; 59
    2666:	0f 90       	pop	r0
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	0f 90       	pop	r0
    266c:	1f 90       	pop	r1
    266e:	18 95       	reti

00002670 <__vector_55>:
/*-----------------------------------------------------------*/

ISR( USART3_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART3_UDRE_vect )
{
    2670:	1f 92       	push	r1
    2672:	0f 92       	push	r0
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	0f 92       	push	r0
    2678:	11 24       	eor	r1, r1
    267a:	0b b6       	in	r0, 0x3b	; 59
    267c:	0f 92       	push	r0
    267e:	2f 93       	push	r18
    2680:	8f 93       	push	r24
    2682:	9f 93       	push	r25
    2684:	af 93       	push	r26
    2686:	bf 93       	push	r27
    2688:	ef 93       	push	r30
    268a:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	0f 92       	push	r0
	{
	    count = buffer->count;
    2692:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <xSerial3Port+0xd>
    2696:	90 91 ae 07 	lds	r25, 0x07AE	; 0x8007ae <xSerial3Port+0xe>
	}
	portEXIT_CRITICAL();
    269a:	0f 90       	pop	r0
    269c:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) ) )
    269e:	89 2b       	or	r24, r25
    26a0:	31 f4       	brne	.+12     	; 0x26ae <__vector_55+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt3_Off();
    26a2:	e1 e3       	ldi	r30, 0x31	; 49
    26a4:	f1 e0       	ldi	r31, 0x01	; 1
    26a6:	80 81       	ld	r24, Z
    26a8:	8f 7d       	andi	r24, 0xDF	; 223
    26aa:	80 83       	st	Z, r24
    26ac:	1c c0       	rjmp	.+56     	; 0x26e6 <__vector_55+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    26ae:	ed ea       	ldi	r30, 0xAD	; 173
    26b0:	f7 e0       	ldi	r31, 0x07	; 7

	uint8_t data = *buffer->out;
    26b2:	a4 81       	ldd	r26, Z+4	; 0x04
    26b4:	b5 81       	ldd	r27, Z+5	; 0x05
    26b6:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    26b8:	b5 83       	std	Z+5, r27	; 0x05
    26ba:	a4 83       	std	Z+4, r26	; 0x04
    26bc:	80 85       	ldd	r24, Z+8	; 0x08
    26be:	91 85       	ldd	r25, Z+9	; 0x09
    26c0:	a8 17       	cp	r26, r24
    26c2:	b9 07       	cpc	r27, r25
    26c4:	21 f4       	brne	.+8      	; 0x26ce <__vector_55+0x5e>
	  buffer->out = buffer->start;
    26c6:	86 81       	ldd	r24, Z+6	; 0x06
    26c8:	97 81       	ldd	r25, Z+7	; 0x07
    26ca:	95 83       	std	Z+5, r25	; 0x05
    26cc:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	0f 92       	push	r0
	{
	    buffer->count--;
    26d4:	80 81       	ld	r24, Z
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    26de:	0f 90       	pop	r0
    26e0:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR3 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) );
    26e2:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	}
}
    26e6:	ff 91       	pop	r31
    26e8:	ef 91       	pop	r30
    26ea:	bf 91       	pop	r27
    26ec:	af 91       	pop	r26
    26ee:	9f 91       	pop	r25
    26f0:	8f 91       	pop	r24
    26f2:	2f 91       	pop	r18
    26f4:	0f 90       	pop	r0
    26f6:	0b be       	out	0x3b, r0	; 59
    26f8:	0f 90       	pop	r0
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	0f 90       	pop	r0
    26fe:	1f 90       	pop	r1
    2700:	18 95       	reti

00002702 <spiBegin>:
	SPCR |= _BV(SPIE);
}

void spiDetachInterrupt(void)
{
	SPCR &= ~_BV(SPIE);
    2702:	0f 93       	push	r16
    2704:	81 30       	cpi	r24, 0x01	; 1
    2706:	71 f0       	breq	.+28     	; 0x2724 <spiBegin+0x22>
    2708:	18 f0       	brcs	.+6      	; 0x2710 <spiBegin+0xe>
    270a:	82 30       	cpi	r24, 0x02	; 2
    270c:	a9 f0       	breq	.+42     	; 0x2738 <spiBegin+0x36>
    270e:	26 c0       	rjmp	.+76     	; 0x275c <spiBegin+0x5a>
    2710:	84 b1       	in	r24, 0x04	; 4
    2712:	87 60       	ori	r24, 0x07	; 7
    2714:	84 b9       	out	0x04, r24	; 4
    2716:	23 98       	cbi	0x04, 3	; 4
    2718:	85 b1       	in	r24, 0x05	; 5
    271a:	89 60       	ori	r24, 0x09	; 9
    271c:	85 b9       	out	0x05, r24	; 5
    271e:	24 9a       	sbi	0x04, 4	; 4
    2720:	2c 9a       	sbi	0x05, 4	; 5
    2722:	23 c0       	rjmp	.+70     	; 0x276a <spiBegin+0x68>
    2724:	84 b1       	in	r24, 0x04	; 4
    2726:	87 60       	ori	r24, 0x07	; 7
    2728:	84 b9       	out	0x04, r24	; 4
    272a:	23 98       	cbi	0x04, 3	; 4
    272c:	85 b1       	in	r24, 0x05	; 5
    272e:	89 60       	ori	r24, 0x09	; 9
    2730:	85 b9       	out	0x05, r24	; 5
    2732:	9d 9a       	sbi	0x13, 5	; 19
    2734:	a5 9a       	sbi	0x14, 5	; 20
    2736:	19 c0       	rjmp	.+50     	; 0x276a <spiBegin+0x68>
    2738:	84 b1       	in	r24, 0x04	; 4
    273a:	87 60       	ori	r24, 0x07	; 7
    273c:	84 b9       	out	0x04, r24	; 4
    273e:	23 98       	cbi	0x04, 3	; 4
    2740:	85 b1       	in	r24, 0x05	; 5
    2742:	89 60       	ori	r24, 0x09	; 9
    2744:	85 b9       	out	0x05, r24	; 5
    2746:	e1 e0       	ldi	r30, 0x01	; 1
    2748:	f1 e0       	ldi	r31, 0x01	; 1
    274a:	80 81       	ld	r24, Z
    274c:	80 62       	ori	r24, 0x20	; 32
    274e:	80 83       	st	Z, r24
    2750:	e2 e0       	ldi	r30, 0x02	; 2
    2752:	f1 e0       	ldi	r31, 0x01	; 1
    2754:	80 81       	ld	r24, Z
    2756:	80 62       	ori	r24, 0x20	; 32
    2758:	80 83       	st	Z, r24
    275a:	07 c0       	rjmp	.+14     	; 0x276a <spiBegin+0x68>
    275c:	84 b1       	in	r24, 0x04	; 4
    275e:	87 60       	ori	r24, 0x07	; 7
    2760:	84 b9       	out	0x04, r24	; 4
    2762:	23 98       	cbi	0x04, 3	; 4
    2764:	85 b1       	in	r24, 0x05	; 5
    2766:	89 60       	ori	r24, 0x09	; 9
    2768:	85 b9       	out	0x05, r24	; 5
    276a:	8c b5       	in	r24, 0x2c	; 44
    276c:	80 65       	ori	r24, 0x50	; 80
    276e:	8c bd       	out	0x2c, r24	; 44
    2770:	8d b5       	in	r24, 0x2d	; 45
    2772:	8e b5       	in	r24, 0x2e	; 46
    2774:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <__data_end>
    2778:	90 91 6b 06 	lds	r25, 0x066B	; 0x80066b <__data_end+0x1>
    277c:	89 2b       	or	r24, r25
    277e:	89 f4       	brne	.+34     	; 0x27a2 <spiBegin+0xa0>
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	0e 94 75 0a 	call	0x14ea	; 0x14ea <xQueueCreateMutex>
    2786:	90 93 6b 06 	sts	0x066B, r25	; 0x80066b <__data_end+0x1>
    278a:	80 93 6a 06 	sts	0x066A, r24	; 0x80066a <__data_end>
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	41 f0       	breq	.+16     	; 0x27a2 <spiBegin+0xa0>
    2792:	00 e0       	ldi	r16, 0x00	; 0
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	a9 01       	movw	r20, r18
    279a:	60 e0       	ldi	r22, 0x00	; 0
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    27a2:	0f 91       	pop	r16
    27a4:	08 95       	ret

000027a6 <spiSetClockDivider>:
    27a6:	9c b5       	in	r25, 0x2c	; 44
    27a8:	9c 7f       	andi	r25, 0xFC	; 252
    27aa:	28 2f       	mov	r18, r24
    27ac:	23 70       	andi	r18, 0x03	; 3
    27ae:	92 2b       	or	r25, r18
    27b0:	9c bd       	out	0x2c, r25	; 44
    27b2:	9d b5       	in	r25, 0x2d	; 45
    27b4:	82 fb       	bst	r24, 2
    27b6:	88 27       	eor	r24, r24
    27b8:	80 f9       	bld	r24, 0
    27ba:	9e 7f       	andi	r25, 0xFE	; 254
    27bc:	89 2b       	or	r24, r25
    27be:	8d bd       	out	0x2d, r24	; 45
    27c0:	08 95       	ret

000027c2 <spiSetBitOrder>:
    27c2:	81 11       	cpse	r24, r1
    27c4:	04 c0       	rjmp	.+8      	; 0x27ce <spiSetBitOrder+0xc>
    27c6:	8c b5       	in	r24, 0x2c	; 44
    27c8:	80 62       	ori	r24, 0x20	; 32
    27ca:	8c bd       	out	0x2c, r24	; 44
    27cc:	08 95       	ret
    27ce:	8c b5       	in	r24, 0x2c	; 44
    27d0:	8f 7d       	andi	r24, 0xDF	; 223
    27d2:	8c bd       	out	0x2c, r24	; 44
    27d4:	08 95       	ret

000027d6 <spiSetDataMode>:
    27d6:	9c b5       	in	r25, 0x2c	; 44
    27d8:	93 7f       	andi	r25, 0xF3	; 243
    27da:	89 2b       	or	r24, r25
    27dc:	8c bd       	out	0x2c, r24	; 44
    27de:	08 95       	ret

000027e0 <spiSelect>:
/*-----------------------------------------------------------------------*/
/* Select the SPI device                                    */
/*-----------------------------------------------------------------------*/

uint8_t spiSelect(SPI_SLAVE_SELECT SS_pin)	/* 1:Successful, 0:Timeout */
{
    27e0:	cf 93       	push	r28
    27e2:	c8 2f       	mov	r28, r24

	if( (xSemaphoreTake( xSPISemaphore, (SPI_TIMEOUT / portTICK_PERIOD_MS )) == pdTRUE ) )
    27e4:	48 ee       	ldi	r20, 0xE8	; 232
    27e6:	53 e0       	ldi	r21, 0x03	; 3
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	70 e0       	ldi	r23, 0x00	; 0
    27ec:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <__data_end>
    27f0:	90 91 6b 06 	lds	r25, 0x066B	; 0x80066b <__data_end+0x1>
    27f4:	0e 94 8f 0b 	call	0x171e	; 0x171e <xQueueSemaphoreTake>
    27f8:	81 30       	cpi	r24, 0x01	; 1
    27fa:	b1 f4       	brne	.+44     	; 0x2828 <spiSelect+0x48>
	{

		switch( SS_pin )
    27fc:	c1 30       	cpi	r28, 0x01	; 1
    27fe:	39 f0       	breq	.+14     	; 0x280e <spiSelect+0x2e>
    2800:	18 f0       	brcs	.+6      	; 0x2808 <spiSelect+0x28>
    2802:	c2 30       	cpi	r28, 0x02	; 2
    2804:	39 f0       	breq	.+14     	; 0x2814 <spiSelect+0x34>
    2806:	0d c0       	rjmp	.+26     	; 0x2822 <spiSelect+0x42>
		{
		case Wiznet:	// added for EtherMega Wiznet 5100/5200 support
#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
			W5100_SEN_ENABLE(1); // Enable SEN, to get on the SPI bus. PORT D7
#endif
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
    2808:	2c 98       	cbi	0x05, 4	; 5
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    280a:	81 e0       	ldi	r24, 0x01	; 1
		case Wiznet:	// added for EtherMega Wiznet 5100/5200 support
#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
			W5100_SEN_ENABLE(1); // Enable SEN, to get on the SPI bus. PORT D7
#endif
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
			break;
    280c:	0e c0       	rjmp	.+28     	; 0x282a <spiSelect+0x4a>

		case SDCard:	// added for  SD Card support
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
    280e:	a5 98       	cbi	0x14, 5	; 20
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    2810:	81 e0       	ldi	r24, 0x01	; 1
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
			break;

		case SDCard:	// added for  SD Card support
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
			break;
    2812:	0b c0       	rjmp	.+22     	; 0x282a <spiSelect+0x4a>

		case Gameduino2:// added for Gameduino2 using FTDI FT800
			SPI_PORT_SS_G2 &= ~SPI_BIT_SS_G2; // Pull SS low to select the Gameduino 2.
    2814:	e2 e0       	ldi	r30, 0x02	; 2
    2816:	f1 e0       	ldi	r31, 0x01	; 1
    2818:	80 81       	ld	r24, Z
    281a:	8f 7d       	andi	r24, 0xDF	; 223
    281c:	80 83       	st	Z, r24
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    281e:	81 e0       	ldi	r24, 0x01	; 1
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
			break;

		case Gameduino2:// added for Gameduino2 using FTDI FT800
			SPI_PORT_SS_G2 &= ~SPI_BIT_SS_G2; // Pull SS low to select the Gameduino 2.
			break;
    2820:	04 c0       	rjmp	.+8      	; 0x282a <spiSelect+0x4a>
			break;
#endif

		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
    2822:	28 98       	cbi	0x05, 0	; 5
			break;
		}
		return 1;		// OK /
    2824:	81 e0       	ldi	r24, 0x01	; 1
#endif

		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
    2826:	01 c0       	rjmp	.+2      	; 0x282a <spiSelect+0x4a>
		}
		return 1;		// OK /
	}
	else
		return 0;		// Timeout
    2828:	80 e0       	ldi	r24, 0x00	; 0
}
    282a:	cf 91       	pop	r28
    282c:	08 95       	ret

0000282e <spiDeselect>:
/*-----------------------------------------------------------------------*/
/* Deselect the SPI device                                 */
/*-----------------------------------------------------------------------*/

void spiDeselect(SPI_SLAVE_SELECT SS_pin)
{
    282e:	0f 93       	push	r16
	// Pull SS high to Deselect the card.
	switch( SS_pin )
    2830:	81 30       	cpi	r24, 0x01	; 1
    2832:	31 f0       	breq	.+12     	; 0x2840 <spiDeselect+0x12>
    2834:	18 f0       	brcs	.+6      	; 0x283c <spiDeselect+0xe>
    2836:	82 30       	cpi	r24, 0x02	; 2
    2838:	29 f0       	breq	.+10     	; 0x2844 <spiDeselect+0x16>
    283a:	0a c0       	rjmp	.+20     	; 0x2850 <spiDeselect+0x22>
	{
	case Wiznet:		// added for EtherMega Wiznet 5100/5200 support
		SPI_PORT |= SPI_BIT_SS_WIZNET;
    283c:	2c 9a       	sbi	0x05, 4	; 5

#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
		W5100_SEN_ENABLE(0); // Disable SEN, to get off the SPI bus. PORT D7
#endif
		break;
    283e:	09 c0       	rjmp	.+18     	; 0x2852 <spiDeselect+0x24>

	case SDCard:		// added for  SD Card support
		SPI_PORT_SS_SD |= SPI_BIT_SS_SD;	// Pull SS high to deselect the uSD card.
    2840:	a5 9a       	sbi	0x14, 5	; 20
		break;
    2842:	07 c0       	rjmp	.+14     	; 0x2852 <spiDeselect+0x24>

	case Gameduino2:	// added for Gameduino 2 using FTDI FT800
		SPI_PORT_SS_G2 |= SPI_BIT_SS_G2;	// Pull SS high to deselect the Gameduino 2.
    2844:	e2 e0       	ldi	r30, 0x02	; 2
    2846:	f1 e0       	ldi	r31, 0x01	; 1
    2848:	80 81       	ld	r24, Z
    284a:	80 62       	ori	r24, 0x20	; 32
    284c:	80 83       	st	Z, r24
		break;
    284e:	01 c0       	rjmp	.+2      	; 0x2852 <spiDeselect+0x24>
		break;
#endif

	case Default:		// default SS line for Arduino Uno
	default:
		SPI_PORT |= SPI_BIT_SS;
    2850:	28 9a       	sbi	0x05, 0	; 5
		break;
	}

	xSemaphoreGive( xSPISemaphore );	/* Free FreeRTOS semaphore to allow other SPI access */
    2852:	00 e0       	ldi	r16, 0x00	; 0
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	a9 01       	movw	r20, r18
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <__data_end>
    2862:	90 91 6b 06 	lds	r25, 0x066B	; 0x80066b <__data_end+0x1>
    2866:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
}
    286a:	0f 91       	pop	r16
    286c:	08 95       	ret

0000286e <spiTransfer>:



uint8_t spiTransfer(uint8_t data)
{
    286e:	28 2f       	mov	r18, r24
	// That is NOT done by this function..., because...
	// Some devices need to have their SS held low across multiple transfer calls.
	// Using spiSelect (SS_pin);

	// If the SPI module has not been enabled yet, then return with nothing.
	if( !(SPCR & _BV(SPE)) ) return 0;
    2870:	9c b5       	in	r25, 0x2c	; 44
    2872:	89 2f       	mov	r24, r25
    2874:	80 74       	andi	r24, 0x40	; 64
    2876:	96 ff       	sbrs	r25, 6
    2878:	17 c0       	rjmp	.+46     	; 0x28a8 <spiTransfer+0x3a>

	// The SPI module is enabled, but it is in slave mode, so we can not
	// transmit the byte. This can happen if SSbar is an input and it went low.
	// We will try to recover by setting the MSTR bit.
	if( !(SPCR & _BV(MSTR)) )
    287a:	0c b4       	in	r0, 0x2c	; 44
    287c:	04 fc       	sbrc	r0, 4
    287e:	08 c0       	rjmp	.+16     	; 0x2890 <spiTransfer+0x22>
		{
			SPCR |= _BV(MSTR);
    2880:	8c b5       	in	r24, 0x2c	; 44
    2882:	80 61       	ori	r24, 0x10	; 16
    2884:	8c bd       	out	0x2c, r24	; 44
			if( !(SPCR & _BV(MSTR)) ) return 0;
    2886:	9c b5       	in	r25, 0x2c	; 44
    2888:	89 2f       	mov	r24, r25
    288a:	80 71       	andi	r24, 0x10	; 16
    288c:	94 ff       	sbrs	r25, 4
    288e:	0c c0       	rjmp	.+24     	; 0x28a8 <spiTransfer+0x3a>
		}

	SPDR = data; 	// Begin transmission
    2890:	2e bd       	out	0x2e, r18	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop from iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
	__asm__ __volatile__("nop");
    2892:	00 00       	nop

	while( !(SPSR & _BV(SPIF)) )
    2894:	05 c0       	rjmp	.+10     	; 0x28a0 <spiTransfer+0x32>
	{
		if( !(SPCR & _BV(MSTR)) ) return 0;
    2896:	9c b5       	in	r25, 0x2c	; 44
    2898:	89 2f       	mov	r24, r25
    289a:	80 71       	andi	r24, 0x10	; 16
    289c:	94 ff       	sbrs	r25, 4
    289e:	04 c0       	rjmp	.+8      	; 0x28a8 <spiTransfer+0x3a>
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
	__asm__ __volatile__("nop");

	while( !(SPSR & _BV(SPIF)) )
    28a0:	0d b4       	in	r0, 0x2d	; 45
    28a2:	07 fe       	sbrs	r0, 7
    28a4:	f8 cf       	rjmp	.-16     	; 0x2896 <spiTransfer+0x28>
		if( !(SPCR & _BV(MSTR)) ) return 0;
			// The SPI module has left master mode, so return.
			// Otherwise, this will be an infinite loop.
	}

	return SPDR;
    28a6:	8e b5       	in	r24, 0x2e	; 46

	// Make sure you pull slave select high to indicate end of transfer.
	// That is NOT done by this function.
	// Using spiDeselect (SS_pin);
}
    28a8:	08 95       	ret

000028aa <prvResetNextTaskUnblockTime>:
    28aa:	e0 91 a2 06 	lds	r30, 0x06A2	; 0x8006a2 <pxDelayedTaskList>
    28ae:	f0 91 a3 06 	lds	r31, 0x06A3	; 0x8006a3 <pxDelayedTaskList+0x1>
    28b2:	80 81       	ld	r24, Z
    28b4:	81 11       	cpse	r24, r1
    28b6:	0c c0       	rjmp	.+24     	; 0x28d0 <prvResetNextTaskUnblockTime+0x26>
    28b8:	8f ef       	ldi	r24, 0xFF	; 255
    28ba:	9f ef       	ldi	r25, 0xFF	; 255
    28bc:	dc 01       	movw	r26, r24
    28be:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <xNextTaskUnblockTime>
    28c2:	90 93 70 06 	sts	0x0670, r25	; 0x800670 <xNextTaskUnblockTime+0x1>
    28c6:	a0 93 71 06 	sts	0x0671, r26	; 0x800671 <xNextTaskUnblockTime+0x2>
    28ca:	b0 93 72 06 	sts	0x0672, r27	; 0x800672 <xNextTaskUnblockTime+0x3>
    28ce:	08 95       	ret
    28d0:	e0 91 a2 06 	lds	r30, 0x06A2	; 0x8006a2 <pxDelayedTaskList>
    28d4:	f0 91 a3 06 	lds	r31, 0x06A3	; 0x8006a3 <pxDelayedTaskList+0x1>
    28d8:	07 80       	ldd	r0, Z+7	; 0x07
    28da:	f0 85       	ldd	r31, Z+8	; 0x08
    28dc:	e0 2d       	mov	r30, r0
    28de:	00 84       	ldd	r0, Z+8	; 0x08
    28e0:	f1 85       	ldd	r31, Z+9	; 0x09
    28e2:	e0 2d       	mov	r30, r0
    28e4:	82 81       	ldd	r24, Z+2	; 0x02
    28e6:	93 81       	ldd	r25, Z+3	; 0x03
    28e8:	a4 81       	ldd	r26, Z+4	; 0x04
    28ea:	b5 81       	ldd	r27, Z+5	; 0x05
    28ec:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <xNextTaskUnblockTime>
    28f0:	90 93 70 06 	sts	0x0670, r25	; 0x800670 <xNextTaskUnblockTime+0x1>
    28f4:	a0 93 71 06 	sts	0x0671, r26	; 0x800671 <xNextTaskUnblockTime+0x2>
    28f8:	b0 93 72 06 	sts	0x0672, r27	; 0x800672 <xNextTaskUnblockTime+0x3>
    28fc:	08 95       	ret

000028fe <prvAddCurrentTaskToDelayedList>:
    28fe:	8f 92       	push	r8
    2900:	9f 92       	push	r9
    2902:	af 92       	push	r10
    2904:	bf 92       	push	r11
    2906:	cf 92       	push	r12
    2908:	df 92       	push	r13
    290a:	ef 92       	push	r14
    290c:	ff 92       	push	r15
    290e:	cf 93       	push	r28
    2910:	6b 01       	movw	r12, r22
    2912:	7c 01       	movw	r14, r24
    2914:	c4 2f       	mov	r28, r20
    2916:	80 90 79 06 	lds	r8, 0x0679	; 0x800679 <xTickCount>
    291a:	90 90 7a 06 	lds	r9, 0x067A	; 0x80067a <xTickCount+0x1>
    291e:	a0 90 7b 06 	lds	r10, 0x067B	; 0x80067b <xTickCount+0x2>
    2922:	b0 90 7c 06 	lds	r11, 0x067C	; 0x80067c <xTickCount+0x3>
    2926:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    292a:	90 91 e7 06 	lds	r25, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    292e:	02 96       	adiw	r24, 0x02	; 2
    2930:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2934:	8f ef       	ldi	r24, 0xFF	; 255
    2936:	c8 16       	cp	r12, r24
    2938:	d8 06       	cpc	r13, r24
    293a:	e8 06       	cpc	r14, r24
    293c:	f8 06       	cpc	r15, r24
    293e:	69 f4       	brne	.+26     	; 0x295a <prvAddCurrentTaskToDelayedList+0x5c>
    2940:	cc 23       	and	r28, r28
    2942:	59 f0       	breq	.+22     	; 0x295a <prvAddCurrentTaskToDelayedList+0x5c>
    2944:	60 91 e6 06 	lds	r22, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    2948:	70 91 e7 06 	lds	r23, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    294c:	6e 5f       	subi	r22, 0xFE	; 254
    294e:	7f 4f       	sbci	r23, 0xFF	; 255
    2950:	8e e7       	ldi	r24, 0x7E	; 126
    2952:	96 e0       	ldi	r25, 0x06	; 6
    2954:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2958:	3f c0       	rjmp	.+126    	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    295a:	c8 0c       	add	r12, r8
    295c:	d9 1c       	adc	r13, r9
    295e:	ea 1c       	adc	r14, r10
    2960:	fb 1c       	adc	r15, r11
    2962:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    2966:	f0 91 e7 06 	lds	r31, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    296a:	c2 82       	std	Z+2, r12	; 0x02
    296c:	d3 82       	std	Z+3, r13	; 0x03
    296e:	e4 82       	std	Z+4, r14	; 0x04
    2970:	f5 82       	std	Z+5, r15	; 0x05
    2972:	c8 14       	cp	r12, r8
    2974:	d9 04       	cpc	r13, r9
    2976:	ea 04       	cpc	r14, r10
    2978:	fb 04       	cpc	r15, r11
    297a:	68 f4       	brcc	.+26     	; 0x2996 <prvAddCurrentTaskToDelayedList+0x98>
    297c:	60 91 e6 06 	lds	r22, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    2980:	70 91 e7 06 	lds	r23, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    2984:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <pxOverflowDelayedTaskList>
    2988:	90 91 a1 06 	lds	r25, 0x06A1	; 0x8006a1 <pxOverflowDelayedTaskList+0x1>
    298c:	6e 5f       	subi	r22, 0xFE	; 254
    298e:	7f 4f       	sbci	r23, 0xFF	; 255
    2990:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    2994:	21 c0       	rjmp	.+66     	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    2996:	60 91 e6 06 	lds	r22, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    299a:	70 91 e7 06 	lds	r23, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    299e:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <pxDelayedTaskList>
    29a2:	90 91 a3 06 	lds	r25, 0x06A3	; 0x8006a3 <pxDelayedTaskList+0x1>
    29a6:	6e 5f       	subi	r22, 0xFE	; 254
    29a8:	7f 4f       	sbci	r23, 0xFF	; 255
    29aa:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    29ae:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <xNextTaskUnblockTime>
    29b2:	90 91 70 06 	lds	r25, 0x0670	; 0x800670 <xNextTaskUnblockTime+0x1>
    29b6:	a0 91 71 06 	lds	r26, 0x0671	; 0x800671 <xNextTaskUnblockTime+0x2>
    29ba:	b0 91 72 06 	lds	r27, 0x0672	; 0x800672 <xNextTaskUnblockTime+0x3>
    29be:	c8 16       	cp	r12, r24
    29c0:	d9 06       	cpc	r13, r25
    29c2:	ea 06       	cpc	r14, r26
    29c4:	fb 06       	cpc	r15, r27
    29c6:	40 f4       	brcc	.+16     	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    29c8:	c0 92 6f 06 	sts	0x066F, r12	; 0x80066f <xNextTaskUnblockTime>
    29cc:	d0 92 70 06 	sts	0x0670, r13	; 0x800670 <xNextTaskUnblockTime+0x1>
    29d0:	e0 92 71 06 	sts	0x0671, r14	; 0x800671 <xNextTaskUnblockTime+0x2>
    29d4:	f0 92 72 06 	sts	0x0672, r15	; 0x800672 <xNextTaskUnblockTime+0x3>
    29d8:	cf 91       	pop	r28
    29da:	ff 90       	pop	r15
    29dc:	ef 90       	pop	r14
    29de:	df 90       	pop	r13
    29e0:	cf 90       	pop	r12
    29e2:	bf 90       	pop	r11
    29e4:	af 90       	pop	r10
    29e6:	9f 90       	pop	r9
    29e8:	8f 90       	pop	r8
    29ea:	08 95       	ret

000029ec <xTaskCreate>:
    29ec:	4f 92       	push	r4
    29ee:	5f 92       	push	r5
    29f0:	6f 92       	push	r6
    29f2:	7f 92       	push	r7
    29f4:	8f 92       	push	r8
    29f6:	9f 92       	push	r9
    29f8:	af 92       	push	r10
    29fa:	bf 92       	push	r11
    29fc:	cf 92       	push	r12
    29fe:	df 92       	push	r13
    2a00:	ef 92       	push	r14
    2a02:	ff 92       	push	r15
    2a04:	0f 93       	push	r16
    2a06:	cf 93       	push	r28
    2a08:	df 93       	push	r29
    2a0a:	4c 01       	movw	r8, r24
    2a0c:	6b 01       	movw	r12, r22
    2a0e:	5a 01       	movw	r10, r20
    2a10:	29 01       	movw	r4, r18
    2a12:	ca 01       	movw	r24, r20
    2a14:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    2a18:	3c 01       	movw	r6, r24
    2a1a:	89 2b       	or	r24, r25
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <xTaskCreate+0x34>
    2a1e:	ec c0       	rjmp	.+472    	; 0x2bf8 <xTaskCreate+0x20c>
    2a20:	83 e3       	ldi	r24, 0x33	; 51
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    2a28:	ec 01       	movw	r28, r24
    2a2a:	89 2b       	or	r24, r25
    2a2c:	b1 f0       	breq	.+44     	; 0x2a5a <xTaskCreate+0x6e>
    2a2e:	7c 8e       	std	Y+28, r7	; 0x1c
    2a30:	6b 8e       	std	Y+27, r6	; 0x1b
    2a32:	a5 01       	movw	r20, r10
    2a34:	65 ea       	ldi	r22, 0xA5	; 165
    2a36:	70 e0       	ldi	r23, 0x00	; 0
    2a38:	c3 01       	movw	r24, r6
    2a3a:	0e 94 0d 5d 	call	0xba1a	; 0xba1a <memset>
    2a3e:	21 e0       	ldi	r18, 0x01	; 1
    2a40:	a2 1a       	sub	r10, r18
    2a42:	b1 08       	sbc	r11, r1
    2a44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a48:	a8 0e       	add	r10, r24
    2a4a:	b9 1e       	adc	r11, r25
    2a4c:	d6 01       	movw	r26, r12
    2a4e:	8c 91       	ld	r24, X
    2a50:	8d 8f       	std	Y+29, r24	; 0x1d
    2a52:	8c 91       	ld	r24, X
    2a54:	81 11       	cpse	r24, r1
    2a56:	05 c0       	rjmp	.+10     	; 0x2a62 <xTaskCreate+0x76>
    2a58:	18 c0       	rjmp	.+48     	; 0x2a8a <xTaskCreate+0x9e>
    2a5a:	c3 01       	movw	r24, r6
    2a5c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vPortFree>
    2a60:	cb c0       	rjmp	.+406    	; 0x2bf8 <xTaskCreate+0x20c>
    2a62:	ae 01       	movw	r20, r28
    2a64:	42 5e       	subi	r20, 0xE2	; 226
    2a66:	5f 4f       	sbci	r21, 0xFF	; 255
    2a68:	f6 01       	movw	r30, r12
    2a6a:	31 96       	adiw	r30, 0x01	; 1
    2a6c:	bf e0       	ldi	r27, 0x0F	; 15
    2a6e:	cb 0e       	add	r12, r27
    2a70:	d1 1c       	adc	r13, r1
    2a72:	cf 01       	movw	r24, r30
    2a74:	21 91       	ld	r18, Z+
    2a76:	da 01       	movw	r26, r20
    2a78:	2d 93       	st	X+, r18
    2a7a:	ad 01       	movw	r20, r26
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	8c 91       	ld	r24, X
    2a80:	88 23       	and	r24, r24
    2a82:	19 f0       	breq	.+6      	; 0x2a8a <xTaskCreate+0x9e>
    2a84:	ec 15       	cp	r30, r12
    2a86:	fd 05       	cpc	r31, r13
    2a88:	a1 f7       	brne	.-24     	; 0x2a72 <xTaskCreate+0x86>
    2a8a:	1b a6       	std	Y+43, r1	; 0x2b
    2a8c:	04 30       	cpi	r16, 0x04	; 4
    2a8e:	08 f0       	brcs	.+2      	; 0x2a92 <xTaskCreate+0xa6>
    2a90:	03 e0       	ldi	r16, 0x03	; 3
    2a92:	0a 8f       	std	Y+26, r16	; 0x1a
    2a94:	0c a7       	std	Y+44, r16	; 0x2c
    2a96:	1d a6       	std	Y+45, r1	; 0x2d
    2a98:	6e 01       	movw	r12, r28
    2a9a:	b2 e0       	ldi	r27, 0x02	; 2
    2a9c:	cb 0e       	add	r12, r27
    2a9e:	d1 1c       	adc	r13, r1
    2aa0:	c6 01       	movw	r24, r12
    2aa2:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    2aa6:	ce 01       	movw	r24, r28
    2aa8:	0e 96       	adiw	r24, 0x0e	; 14
    2aaa:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    2aae:	db 87       	std	Y+11, r29	; 0x0b
    2ab0:	ca 87       	std	Y+10, r28	; 0x0a
    2ab2:	84 e0       	ldi	r24, 0x04	; 4
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	a0 e0       	ldi	r26, 0x00	; 0
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	80 1b       	sub	r24, r16
    2abc:	91 09       	sbc	r25, r1
    2abe:	a1 09       	sbc	r26, r1
    2ac0:	b1 09       	sbc	r27, r1
    2ac2:	8e 87       	std	Y+14, r24	; 0x0e
    2ac4:	9f 87       	std	Y+15, r25	; 0x0f
    2ac6:	a8 8b       	std	Y+16, r26	; 0x10
    2ac8:	b9 8b       	std	Y+17, r27	; 0x11
    2aca:	df 8b       	std	Y+23, r29	; 0x17
    2acc:	ce 8b       	std	Y+22, r28	; 0x16
    2ace:	1e a6       	std	Y+46, r1	; 0x2e
    2ad0:	1f a6       	std	Y+47, r1	; 0x2f
    2ad2:	18 aa       	std	Y+48, r1	; 0x30
    2ad4:	19 aa       	std	Y+49, r1	; 0x31
    2ad6:	1a aa       	std	Y+50, r1	; 0x32
    2ad8:	a2 01       	movw	r20, r4
    2ada:	b4 01       	movw	r22, r8
    2adc:	c5 01       	movw	r24, r10
    2ade:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pxPortInitialiseStack>
    2ae2:	99 83       	std	Y+1, r25	; 0x01
    2ae4:	88 83       	st	Y, r24
    2ae6:	e1 14       	cp	r14, r1
    2ae8:	f1 04       	cpc	r15, r1
    2aea:	19 f0       	breq	.+6      	; 0x2af2 <xTaskCreate+0x106>
    2aec:	f7 01       	movw	r30, r14
    2aee:	d1 83       	std	Z+1, r29	; 0x01
    2af0:	c0 83       	st	Z, r28
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	0f 92       	push	r0
    2af8:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <uxCurrentNumberOfTasks>
    2afc:	8f 5f       	subi	r24, 0xFF	; 255
    2afe:	80 93 7d 06 	sts	0x067D, r24	; 0x80067d <uxCurrentNumberOfTasks>
    2b02:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    2b06:	90 91 e7 06 	lds	r25, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    2b0a:	89 2b       	or	r24, r25
    2b0c:	d1 f5       	brne	.+116    	; 0x2b82 <xTaskCreate+0x196>
    2b0e:	d0 93 e7 06 	sts	0x06E7, r29	; 0x8006e7 <pxCurrentTCB+0x1>
    2b12:	c0 93 e6 06 	sts	0x06E6, r28	; 0x8006e6 <pxCurrentTCB>
    2b16:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <uxCurrentNumberOfTasks>
    2b1a:	81 30       	cpi	r24, 0x01	; 1
    2b1c:	09 f0       	breq	.+2      	; 0x2b20 <xTaskCreate+0x134>
    2b1e:	41 c0       	rjmp	.+130    	; 0x2ba2 <xTaskCreate+0x1b6>
    2b20:	8a eb       	ldi	r24, 0xBA	; 186
    2b22:	96 e0       	ldi	r25, 0x06	; 6
    2b24:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b28:	85 ec       	ldi	r24, 0xC5	; 197
    2b2a:	96 e0       	ldi	r25, 0x06	; 6
    2b2c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b30:	80 ed       	ldi	r24, 0xD0	; 208
    2b32:	96 e0       	ldi	r25, 0x06	; 6
    2b34:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b38:	8b ed       	ldi	r24, 0xDB	; 219
    2b3a:	96 e0       	ldi	r25, 0x06	; 6
    2b3c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b40:	8f ea       	ldi	r24, 0xAF	; 175
    2b42:	96 e0       	ldi	r25, 0x06	; 6
    2b44:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b48:	84 ea       	ldi	r24, 0xA4	; 164
    2b4a:	96 e0       	ldi	r25, 0x06	; 6
    2b4c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b50:	85 e9       	ldi	r24, 0x95	; 149
    2b52:	96 e0       	ldi	r25, 0x06	; 6
    2b54:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b58:	8a e8       	ldi	r24, 0x8A	; 138
    2b5a:	96 e0       	ldi	r25, 0x06	; 6
    2b5c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b60:	8e e7       	ldi	r24, 0x7E	; 126
    2b62:	96 e0       	ldi	r25, 0x06	; 6
    2b64:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b68:	8f ea       	ldi	r24, 0xAF	; 175
    2b6a:	96 e0       	ldi	r25, 0x06	; 6
    2b6c:	90 93 a3 06 	sts	0x06A3, r25	; 0x8006a3 <pxDelayedTaskList+0x1>
    2b70:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <pxDelayedTaskList>
    2b74:	84 ea       	ldi	r24, 0xA4	; 164
    2b76:	96 e0       	ldi	r25, 0x06	; 6
    2b78:	90 93 a1 06 	sts	0x06A1, r25	; 0x8006a1 <pxOverflowDelayedTaskList+0x1>
    2b7c:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <pxOverflowDelayedTaskList>
    2b80:	10 c0       	rjmp	.+32     	; 0x2ba2 <xTaskCreate+0x1b6>
    2b82:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <xSchedulerRunning>
    2b86:	81 11       	cpse	r24, r1
    2b88:	0c c0       	rjmp	.+24     	; 0x2ba2 <xTaskCreate+0x1b6>
    2b8a:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    2b8e:	f0 91 e7 06 	lds	r31, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    2b92:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b94:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b96:	89 17       	cp	r24, r25
    2b98:	20 f0       	brcs	.+8      	; 0x2ba2 <xTaskCreate+0x1b6>
    2b9a:	d0 93 e7 06 	sts	0x06E7, r29	; 0x8006e7 <pxCurrentTCB+0x1>
    2b9e:	c0 93 e6 06 	sts	0x06E6, r28	; 0x8006e6 <pxCurrentTCB>
    2ba2:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <uxTaskNumber>
    2ba6:	8f 5f       	subi	r24, 0xFF	; 255
    2ba8:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <uxTaskNumber>
    2bac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bae:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <uxTopReadyPriority>
    2bb2:	98 17       	cp	r25, r24
    2bb4:	10 f4       	brcc	.+4      	; 0x2bba <xTaskCreate+0x1ce>
    2bb6:	80 93 78 06 	sts	0x0678, r24	; 0x800678 <uxTopReadyPriority>
    2bba:	fb e0       	ldi	r31, 0x0B	; 11
    2bbc:	8f 9f       	mul	r24, r31
    2bbe:	c0 01       	movw	r24, r0
    2bc0:	11 24       	eor	r1, r1
    2bc2:	b6 01       	movw	r22, r12
    2bc4:	86 54       	subi	r24, 0x46	; 70
    2bc6:	99 4f       	sbci	r25, 0xF9	; 249
    2bc8:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2bcc:	0f 90       	pop	r0
    2bce:	0f be       	out	0x3f, r0	; 63
    2bd0:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <xSchedulerRunning>
    2bd4:	88 23       	and	r24, r24
    2bd6:	61 f0       	breq	.+24     	; 0x2bf0 <xTaskCreate+0x204>
    2bd8:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    2bdc:	f0 91 e7 06 	lds	r31, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    2be0:	92 8d       	ldd	r25, Z+26	; 0x1a
    2be2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2be4:	98 17       	cp	r25, r24
    2be6:	30 f4       	brcc	.+12     	; 0x2bf4 <xTaskCreate+0x208>
    2be8:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	05 c0       	rjmp	.+10     	; 0x2bfa <xTaskCreate+0x20e>
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	03 c0       	rjmp	.+6      	; 0x2bfa <xTaskCreate+0x20e>
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	01 c0       	rjmp	.+2      	; 0x2bfa <xTaskCreate+0x20e>
    2bf8:	8f ef       	ldi	r24, 0xFF	; 255
    2bfa:	df 91       	pop	r29
    2bfc:	cf 91       	pop	r28
    2bfe:	0f 91       	pop	r16
    2c00:	ff 90       	pop	r15
    2c02:	ef 90       	pop	r14
    2c04:	df 90       	pop	r13
    2c06:	cf 90       	pop	r12
    2c08:	bf 90       	pop	r11
    2c0a:	af 90       	pop	r10
    2c0c:	9f 90       	pop	r9
    2c0e:	8f 90       	pop	r8
    2c10:	7f 90       	pop	r7
    2c12:	6f 90       	pop	r6
    2c14:	5f 90       	pop	r5
    2c16:	4f 90       	pop	r4
    2c18:	08 95       	ret

00002c1a <vTaskResume>:
    2c1a:	0f 93       	push	r16
    2c1c:	1f 93       	push	r17
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
    2c22:	00 97       	sbiw	r24, 0x00	; 0
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <vTaskResume+0xe>
    2c26:	3d c0       	rjmp	.+122    	; 0x2ca2 <vTaskResume+0x88>
    2c28:	20 91 e6 06 	lds	r18, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    2c2c:	30 91 e7 06 	lds	r19, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    2c30:	82 17       	cp	r24, r18
    2c32:	93 07       	cpc	r25, r19
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <vTaskResume+0x1e>
    2c36:	35 c0       	rjmp	.+106    	; 0x2ca2 <vTaskResume+0x88>
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	0f 92       	push	r0
    2c3e:	fc 01       	movw	r30, r24
    2c40:	24 85       	ldd	r18, Z+12	; 0x0c
    2c42:	35 85       	ldd	r19, Z+13	; 0x0d
    2c44:	2e 57       	subi	r18, 0x7E	; 126
    2c46:	36 40       	sbci	r19, 0x06	; 6
    2c48:	51 f5       	brne	.+84     	; 0x2c9e <vTaskResume+0x84>
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	20 8d       	ldd	r18, Z+24	; 0x18
    2c4e:	31 8d       	ldd	r19, Z+25	; 0x19
    2c50:	f6 e0       	ldi	r31, 0x06	; 6
    2c52:	25 39       	cpi	r18, 0x95	; 149
    2c54:	3f 07       	cpc	r19, r31
    2c56:	19 f1       	breq	.+70     	; 0x2c9e <vTaskResume+0x84>
    2c58:	23 2b       	or	r18, r19
    2c5a:	09 f5       	brne	.+66     	; 0x2c9e <vTaskResume+0x84>
    2c5c:	ec 01       	movw	r28, r24
    2c5e:	8c 01       	movw	r16, r24
    2c60:	0e 5f       	subi	r16, 0xFE	; 254
    2c62:	1f 4f       	sbci	r17, 0xFF	; 255
    2c64:	c8 01       	movw	r24, r16
    2c66:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2c6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c6c:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <uxTopReadyPriority>
    2c70:	98 17       	cp	r25, r24
    2c72:	10 f4       	brcc	.+4      	; 0x2c78 <vTaskResume+0x5e>
    2c74:	80 93 78 06 	sts	0x0678, r24	; 0x800678 <uxTopReadyPriority>
    2c78:	2b e0       	ldi	r18, 0x0B	; 11
    2c7a:	82 9f       	mul	r24, r18
    2c7c:	c0 01       	movw	r24, r0
    2c7e:	11 24       	eor	r1, r1
    2c80:	b8 01       	movw	r22, r16
    2c82:	86 54       	subi	r24, 0x46	; 70
    2c84:	99 4f       	sbci	r25, 0xF9	; 249
    2c86:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2c8a:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    2c8e:	f0 91 e7 06 	lds	r31, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    2c92:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c94:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c96:	98 17       	cp	r25, r24
    2c98:	10 f0       	brcs	.+4      	; 0x2c9e <vTaskResume+0x84>
    2c9a:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2c9e:	0f 90       	pop	r0
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	df 91       	pop	r29
    2ca4:	cf 91       	pop	r28
    2ca6:	1f 91       	pop	r17
    2ca8:	0f 91       	pop	r16
    2caa:	08 95       	ret

00002cac <vTaskStartScheduler>:
    2cac:	ef 92       	push	r14
    2cae:	ff 92       	push	r15
    2cb0:	0f 93       	push	r16
    2cb2:	0f 2e       	mov	r0, r31
    2cb4:	fd e6       	ldi	r31, 0x6D	; 109
    2cb6:	ef 2e       	mov	r14, r31
    2cb8:	f6 e0       	ldi	r31, 0x06	; 6
    2cba:	ff 2e       	mov	r15, r31
    2cbc:	f0 2d       	mov	r31, r0
    2cbe:	00 e0       	ldi	r16, 0x00	; 0
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	40 e8       	ldi	r20, 0x80	; 128
    2cc6:	50 e0       	ldi	r21, 0x00	; 0
    2cc8:	66 e1       	ldi	r22, 0x16	; 22
    2cca:	72 e0       	ldi	r23, 0x02	; 2
    2ccc:	88 e3       	ldi	r24, 0x38	; 56
    2cce:	95 e0       	ldi	r25, 0x05	; 5
    2cd0:	8d de       	rcall	.-742    	; 0x29ec <xTaskCreate>
    2cd2:	81 30       	cpi	r24, 0x01	; 1
    2cd4:	e1 f4       	brne	.+56     	; 0x2d0e <vTaskStartScheduler+0x62>
    2cd6:	ce d4       	rcall	.+2460   	; 0x3674 <xTimerCreateTimerTask>
    2cd8:	81 30       	cpi	r24, 0x01	; 1
    2cda:	c9 f4       	brne	.+50     	; 0x2d0e <vTaskStartScheduler+0x62>
    2cdc:	f8 94       	cli
    2cde:	8f ef       	ldi	r24, 0xFF	; 255
    2ce0:	9f ef       	ldi	r25, 0xFF	; 255
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <xNextTaskUnblockTime>
    2ce8:	90 93 70 06 	sts	0x0670, r25	; 0x800670 <xNextTaskUnblockTime+0x1>
    2cec:	a0 93 71 06 	sts	0x0671, r26	; 0x800671 <xNextTaskUnblockTime+0x2>
    2cf0:	b0 93 72 06 	sts	0x0672, r27	; 0x800672 <xNextTaskUnblockTime+0x3>
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <xSchedulerRunning>
    2cfa:	10 92 79 06 	sts	0x0679, r1	; 0x800679 <xTickCount>
    2cfe:	10 92 7a 06 	sts	0x067A, r1	; 0x80067a <xTickCount+0x1>
    2d02:	10 92 7b 06 	sts	0x067B, r1	; 0x80067b <xTickCount+0x2>
    2d06:	10 92 7c 06 	sts	0x067C, r1	; 0x80067c <xTickCount+0x3>
    2d0a:	0e 94 56 06 	call	0xcac	; 0xcac <xPortStartScheduler>
    2d0e:	0f 91       	pop	r16
    2d10:	ff 90       	pop	r15
    2d12:	ef 90       	pop	r14
    2d14:	08 95       	ret

00002d16 <vTaskSuspendAll>:
    2d16:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <uxSchedulerSuspended>
    2d1a:	8f 5f       	subi	r24, 0xFF	; 255
    2d1c:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <uxSchedulerSuspended>
    2d20:	08 95       	ret

00002d22 <xTaskGetTickCount>:
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	0f 92       	push	r0
    2d28:	60 91 79 06 	lds	r22, 0x0679	; 0x800679 <xTickCount>
    2d2c:	70 91 7a 06 	lds	r23, 0x067A	; 0x80067a <xTickCount+0x1>
    2d30:	80 91 7b 06 	lds	r24, 0x067B	; 0x80067b <xTickCount+0x2>
    2d34:	90 91 7c 06 	lds	r25, 0x067C	; 0x80067c <xTickCount+0x3>
    2d38:	0f 90       	pop	r0
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	08 95       	ret

00002d3e <xTaskIncrementTick>:
    2d3e:	9f 92       	push	r9
    2d40:	af 92       	push	r10
    2d42:	bf 92       	push	r11
    2d44:	cf 92       	push	r12
    2d46:	df 92       	push	r13
    2d48:	ef 92       	push	r14
    2d4a:	ff 92       	push	r15
    2d4c:	0f 93       	push	r16
    2d4e:	1f 93       	push	r17
    2d50:	cf 93       	push	r28
    2d52:	df 93       	push	r29
    2d54:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <uxSchedulerSuspended>
    2d58:	81 11       	cpse	r24, r1
    2d5a:	ad c0       	rjmp	.+346    	; 0x2eb6 <xTaskIncrementTick+0x178>
    2d5c:	c0 90 79 06 	lds	r12, 0x0679	; 0x800679 <xTickCount>
    2d60:	d0 90 7a 06 	lds	r13, 0x067A	; 0x80067a <xTickCount+0x1>
    2d64:	e0 90 7b 06 	lds	r14, 0x067B	; 0x80067b <xTickCount+0x2>
    2d68:	f0 90 7c 06 	lds	r15, 0x067C	; 0x80067c <xTickCount+0x3>
    2d6c:	8f ef       	ldi	r24, 0xFF	; 255
    2d6e:	c8 1a       	sub	r12, r24
    2d70:	d8 0a       	sbc	r13, r24
    2d72:	e8 0a       	sbc	r14, r24
    2d74:	f8 0a       	sbc	r15, r24
    2d76:	c0 92 79 06 	sts	0x0679, r12	; 0x800679 <xTickCount>
    2d7a:	d0 92 7a 06 	sts	0x067A, r13	; 0x80067a <xTickCount+0x1>
    2d7e:	e0 92 7b 06 	sts	0x067B, r14	; 0x80067b <xTickCount+0x2>
    2d82:	f0 92 7c 06 	sts	0x067C, r15	; 0x80067c <xTickCount+0x3>
    2d86:	c1 14       	cp	r12, r1
    2d88:	d1 04       	cpc	r13, r1
    2d8a:	e1 04       	cpc	r14, r1
    2d8c:	f1 04       	cpc	r15, r1
    2d8e:	b1 f4       	brne	.+44     	; 0x2dbc <xTaskIncrementTick+0x7e>
    2d90:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <pxDelayedTaskList>
    2d94:	90 91 a3 06 	lds	r25, 0x06A3	; 0x8006a3 <pxDelayedTaskList+0x1>
    2d98:	20 91 a0 06 	lds	r18, 0x06A0	; 0x8006a0 <pxOverflowDelayedTaskList>
    2d9c:	30 91 a1 06 	lds	r19, 0x06A1	; 0x8006a1 <pxOverflowDelayedTaskList+0x1>
    2da0:	30 93 a3 06 	sts	0x06A3, r19	; 0x8006a3 <pxDelayedTaskList+0x1>
    2da4:	20 93 a2 06 	sts	0x06A2, r18	; 0x8006a2 <pxDelayedTaskList>
    2da8:	90 93 a1 06 	sts	0x06A1, r25	; 0x8006a1 <pxOverflowDelayedTaskList+0x1>
    2dac:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <pxOverflowDelayedTaskList>
    2db0:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <xNumOfOverflows>
    2db4:	8f 5f       	subi	r24, 0xFF	; 255
    2db6:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <xNumOfOverflows>
    2dba:	77 dd       	rcall	.-1298   	; 0x28aa <prvResetNextTaskUnblockTime>
    2dbc:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <xNextTaskUnblockTime>
    2dc0:	90 91 70 06 	lds	r25, 0x0670	; 0x800670 <xNextTaskUnblockTime+0x1>
    2dc4:	a0 91 71 06 	lds	r26, 0x0671	; 0x800671 <xNextTaskUnblockTime+0x2>
    2dc8:	b0 91 72 06 	lds	r27, 0x0672	; 0x800672 <xNextTaskUnblockTime+0x3>
    2dcc:	c8 16       	cp	r12, r24
    2dce:	d9 06       	cpc	r13, r25
    2dd0:	ea 06       	cpc	r14, r26
    2dd2:	fb 06       	cpc	r15, r27
    2dd4:	10 f4       	brcc	.+4      	; 0x2dda <xTaskIncrementTick+0x9c>
    2dd6:	b1 2c       	mov	r11, r1
    2dd8:	5d c0       	rjmp	.+186    	; 0x2e94 <xTaskIncrementTick+0x156>
    2dda:	b1 2c       	mov	r11, r1
    2ddc:	0f 2e       	mov	r0, r31
    2dde:	fb e0       	ldi	r31, 0x0B	; 11
    2de0:	af 2e       	mov	r10, r31
    2de2:	f0 2d       	mov	r31, r0
    2de4:	99 24       	eor	r9, r9
    2de6:	93 94       	inc	r9
    2de8:	e0 91 a2 06 	lds	r30, 0x06A2	; 0x8006a2 <pxDelayedTaskList>
    2dec:	f0 91 a3 06 	lds	r31, 0x06A3	; 0x8006a3 <pxDelayedTaskList+0x1>
    2df0:	80 81       	ld	r24, Z
    2df2:	81 11       	cpse	r24, r1
    2df4:	0c c0       	rjmp	.+24     	; 0x2e0e <xTaskIncrementTick+0xd0>
    2df6:	8f ef       	ldi	r24, 0xFF	; 255
    2df8:	9f ef       	ldi	r25, 0xFF	; 255
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <xNextTaskUnblockTime>
    2e00:	90 93 70 06 	sts	0x0670, r25	; 0x800670 <xNextTaskUnblockTime+0x1>
    2e04:	a0 93 71 06 	sts	0x0671, r26	; 0x800671 <xNextTaskUnblockTime+0x2>
    2e08:	b0 93 72 06 	sts	0x0672, r27	; 0x800672 <xNextTaskUnblockTime+0x3>
    2e0c:	43 c0       	rjmp	.+134    	; 0x2e94 <xTaskIncrementTick+0x156>
    2e0e:	e0 91 a2 06 	lds	r30, 0x06A2	; 0x8006a2 <pxDelayedTaskList>
    2e12:	f0 91 a3 06 	lds	r31, 0x06A3	; 0x8006a3 <pxDelayedTaskList+0x1>
    2e16:	07 80       	ldd	r0, Z+7	; 0x07
    2e18:	f0 85       	ldd	r31, Z+8	; 0x08
    2e1a:	e0 2d       	mov	r30, r0
    2e1c:	c0 85       	ldd	r28, Z+8	; 0x08
    2e1e:	d1 85       	ldd	r29, Z+9	; 0x09
    2e20:	8a 81       	ldd	r24, Y+2	; 0x02
    2e22:	9b 81       	ldd	r25, Y+3	; 0x03
    2e24:	ac 81       	ldd	r26, Y+4	; 0x04
    2e26:	bd 81       	ldd	r27, Y+5	; 0x05
    2e28:	c8 16       	cp	r12, r24
    2e2a:	d9 06       	cpc	r13, r25
    2e2c:	ea 06       	cpc	r14, r26
    2e2e:	fb 06       	cpc	r15, r27
    2e30:	48 f4       	brcc	.+18     	; 0x2e44 <xTaskIncrementTick+0x106>
    2e32:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <xNextTaskUnblockTime>
    2e36:	90 93 70 06 	sts	0x0670, r25	; 0x800670 <xNextTaskUnblockTime+0x1>
    2e3a:	a0 93 71 06 	sts	0x0671, r26	; 0x800671 <xNextTaskUnblockTime+0x2>
    2e3e:	b0 93 72 06 	sts	0x0672, r27	; 0x800672 <xNextTaskUnblockTime+0x3>
    2e42:	28 c0       	rjmp	.+80     	; 0x2e94 <xTaskIncrementTick+0x156>
    2e44:	8e 01       	movw	r16, r28
    2e46:	0e 5f       	subi	r16, 0xFE	; 254
    2e48:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4a:	c8 01       	movw	r24, r16
    2e4c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2e50:	88 8d       	ldd	r24, Y+24	; 0x18
    2e52:	99 8d       	ldd	r25, Y+25	; 0x19
    2e54:	89 2b       	or	r24, r25
    2e56:	21 f0       	breq	.+8      	; 0x2e60 <xTaskIncrementTick+0x122>
    2e58:	ce 01       	movw	r24, r28
    2e5a:	0e 96       	adiw	r24, 0x0e	; 14
    2e5c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2e60:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e62:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <uxTopReadyPriority>
    2e66:	98 17       	cp	r25, r24
    2e68:	10 f4       	brcc	.+4      	; 0x2e6e <xTaskIncrementTick+0x130>
    2e6a:	80 93 78 06 	sts	0x0678, r24	; 0x800678 <uxTopReadyPriority>
    2e6e:	a8 9e       	mul	r10, r24
    2e70:	c0 01       	movw	r24, r0
    2e72:	11 24       	eor	r1, r1
    2e74:	b8 01       	movw	r22, r16
    2e76:	86 54       	subi	r24, 0x46	; 70
    2e78:	99 4f       	sbci	r25, 0xF9	; 249
    2e7a:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2e7e:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    2e82:	f0 91 e7 06 	lds	r31, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    2e86:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e88:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e8a:	98 17       	cp	r25, r24
    2e8c:	08 f4       	brcc	.+2      	; 0x2e90 <xTaskIncrementTick+0x152>
    2e8e:	ac cf       	rjmp	.-168    	; 0x2de8 <xTaskIncrementTick+0xaa>
    2e90:	b9 2c       	mov	r11, r9
    2e92:	aa cf       	rjmp	.-172    	; 0x2de8 <xTaskIncrementTick+0xaa>
    2e94:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    2e98:	f0 91 e7 06 	lds	r31, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    2e9c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2e9e:	8b e0       	ldi	r24, 0x0B	; 11
    2ea0:	e8 9f       	mul	r30, r24
    2ea2:	f0 01       	movw	r30, r0
    2ea4:	11 24       	eor	r1, r1
    2ea6:	e6 54       	subi	r30, 0x46	; 70
    2ea8:	f9 4f       	sbci	r31, 0xF9	; 249
    2eaa:	80 81       	ld	r24, Z
    2eac:	82 30       	cpi	r24, 0x02	; 2
    2eae:	48 f0       	brcs	.+18     	; 0x2ec2 <xTaskIncrementTick+0x184>
    2eb0:	bb 24       	eor	r11, r11
    2eb2:	b3 94       	inc	r11
    2eb4:	06 c0       	rjmp	.+12     	; 0x2ec2 <xTaskIncrementTick+0x184>
    2eb6:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <uxPendedTicks>
    2eba:	8f 5f       	subi	r24, 0xFF	; 255
    2ebc:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <uxPendedTicks>
    2ec0:	b1 2c       	mov	r11, r1
    2ec2:	80 91 75 06 	lds	r24, 0x0675	; 0x800675 <xYieldPending>
    2ec6:	88 23       	and	r24, r24
    2ec8:	11 f0       	breq	.+4      	; 0x2ece <xTaskIncrementTick+0x190>
    2eca:	bb 24       	eor	r11, r11
    2ecc:	b3 94       	inc	r11
    2ece:	8b 2d       	mov	r24, r11
    2ed0:	df 91       	pop	r29
    2ed2:	cf 91       	pop	r28
    2ed4:	1f 91       	pop	r17
    2ed6:	0f 91       	pop	r16
    2ed8:	ff 90       	pop	r15
    2eda:	ef 90       	pop	r14
    2edc:	df 90       	pop	r13
    2ede:	cf 90       	pop	r12
    2ee0:	bf 90       	pop	r11
    2ee2:	af 90       	pop	r10
    2ee4:	9f 90       	pop	r9
    2ee6:	08 95       	ret

00002ee8 <xTaskResumeAll>:
    2ee8:	cf 92       	push	r12
    2eea:	df 92       	push	r13
    2eec:	ef 92       	push	r14
    2eee:	ff 92       	push	r15
    2ef0:	0f 93       	push	r16
    2ef2:	1f 93       	push	r17
    2ef4:	cf 93       	push	r28
    2ef6:	df 93       	push	r29
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	f8 94       	cli
    2efc:	0f 92       	push	r0
    2efe:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <uxSchedulerSuspended>
    2f02:	81 50       	subi	r24, 0x01	; 1
    2f04:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <uxSchedulerSuspended>
    2f08:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <uxSchedulerSuspended>
    2f0c:	81 11       	cpse	r24, r1
    2f0e:	5a c0       	rjmp	.+180    	; 0x2fc4 <xTaskResumeAll+0xdc>
    2f10:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <uxCurrentNumberOfTasks>
    2f14:	81 11       	cpse	r24, r1
    2f16:	2c c0       	rjmp	.+88     	; 0x2f70 <xTaskResumeAll+0x88>
    2f18:	58 c0       	rjmp	.+176    	; 0x2fca <xTaskResumeAll+0xe2>
    2f1a:	d7 01       	movw	r26, r14
    2f1c:	17 96       	adiw	r26, 0x07	; 7
    2f1e:	ed 91       	ld	r30, X+
    2f20:	fc 91       	ld	r31, X
    2f22:	18 97       	sbiw	r26, 0x08	; 8
    2f24:	c0 85       	ldd	r28, Z+8	; 0x08
    2f26:	d1 85       	ldd	r29, Z+9	; 0x09
    2f28:	ce 01       	movw	r24, r28
    2f2a:	0e 96       	adiw	r24, 0x0e	; 14
    2f2c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2f30:	8e 01       	movw	r16, r28
    2f32:	0e 5f       	subi	r16, 0xFE	; 254
    2f34:	1f 4f       	sbci	r17, 0xFF	; 255
    2f36:	c8 01       	movw	r24, r16
    2f38:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2f3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f3e:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <uxTopReadyPriority>
    2f42:	98 17       	cp	r25, r24
    2f44:	10 f4       	brcc	.+4      	; 0x2f4a <xTaskResumeAll+0x62>
    2f46:	80 93 78 06 	sts	0x0678, r24	; 0x800678 <uxTopReadyPriority>
    2f4a:	d8 9e       	mul	r13, r24
    2f4c:	c0 01       	movw	r24, r0
    2f4e:	11 24       	eor	r1, r1
    2f50:	b8 01       	movw	r22, r16
    2f52:	86 54       	subi	r24, 0x46	; 70
    2f54:	99 4f       	sbci	r25, 0xF9	; 249
    2f56:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2f5a:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    2f5e:	f0 91 e7 06 	lds	r31, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    2f62:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f64:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f66:	98 17       	cp	r25, r24
    2f68:	88 f0       	brcs	.+34     	; 0x2f8c <xTaskResumeAll+0xa4>
    2f6a:	c0 92 75 06 	sts	0x0675, r12	; 0x800675 <xYieldPending>
    2f6e:	0e c0       	rjmp	.+28     	; 0x2f8c <xTaskResumeAll+0xa4>
    2f70:	c0 e0       	ldi	r28, 0x00	; 0
    2f72:	d0 e0       	ldi	r29, 0x00	; 0
    2f74:	0f 2e       	mov	r0, r31
    2f76:	f5 e9       	ldi	r31, 0x95	; 149
    2f78:	ef 2e       	mov	r14, r31
    2f7a:	f6 e0       	ldi	r31, 0x06	; 6
    2f7c:	ff 2e       	mov	r15, r31
    2f7e:	f0 2d       	mov	r31, r0
    2f80:	0f 2e       	mov	r0, r31
    2f82:	fb e0       	ldi	r31, 0x0B	; 11
    2f84:	df 2e       	mov	r13, r31
    2f86:	f0 2d       	mov	r31, r0
    2f88:	cc 24       	eor	r12, r12
    2f8a:	c3 94       	inc	r12
    2f8c:	f7 01       	movw	r30, r14
    2f8e:	80 81       	ld	r24, Z
    2f90:	81 11       	cpse	r24, r1
    2f92:	c3 cf       	rjmp	.-122    	; 0x2f1a <xTaskResumeAll+0x32>
    2f94:	cd 2b       	or	r28, r29
    2f96:	09 f0       	breq	.+2      	; 0x2f9a <xTaskResumeAll+0xb2>
    2f98:	88 dc       	rcall	.-1776   	; 0x28aa <prvResetNextTaskUnblockTime>
    2f9a:	c0 91 76 06 	lds	r28, 0x0676	; 0x800676 <uxPendedTicks>
    2f9e:	cc 23       	and	r28, r28
    2fa0:	49 f0       	breq	.+18     	; 0x2fb4 <xTaskResumeAll+0xcc>
    2fa2:	d1 e0       	ldi	r29, 0x01	; 1
    2fa4:	cc de       	rcall	.-616    	; 0x2d3e <xTaskIncrementTick>
    2fa6:	81 11       	cpse	r24, r1
    2fa8:	d0 93 75 06 	sts	0x0675, r29	; 0x800675 <xYieldPending>
    2fac:	c1 50       	subi	r28, 0x01	; 1
    2fae:	d1 f7       	brne	.-12     	; 0x2fa4 <xTaskResumeAll+0xbc>
    2fb0:	10 92 76 06 	sts	0x0676, r1	; 0x800676 <uxPendedTicks>
    2fb4:	80 91 75 06 	lds	r24, 0x0675	; 0x800675 <xYieldPending>
    2fb8:	88 23       	and	r24, r24
    2fba:	31 f0       	breq	.+12     	; 0x2fc8 <xTaskResumeAll+0xe0>
    2fbc:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	03 c0       	rjmp	.+6      	; 0x2fca <xTaskResumeAll+0xe2>
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	01 c0       	rjmp	.+2      	; 0x2fca <xTaskResumeAll+0xe2>
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	0f 90       	pop	r0
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	ff 90       	pop	r15
    2fd8:	ef 90       	pop	r14
    2fda:	df 90       	pop	r13
    2fdc:	cf 90       	pop	r12
    2fde:	08 95       	ret

00002fe0 <vTaskDelay>:
    2fe0:	cf 92       	push	r12
    2fe2:	df 92       	push	r13
    2fe4:	ef 92       	push	r14
    2fe6:	ff 92       	push	r15
    2fe8:	6b 01       	movw	r12, r22
    2fea:	7c 01       	movw	r14, r24
    2fec:	67 2b       	or	r22, r23
    2fee:	68 2b       	or	r22, r24
    2ff0:	69 2b       	or	r22, r25
    2ff2:	41 f0       	breq	.+16     	; 0x3004 <vTaskDelay+0x24>
    2ff4:	90 de       	rcall	.-736    	; 0x2d16 <vTaskSuspendAll>
    2ff6:	40 e0       	ldi	r20, 0x00	; 0
    2ff8:	c7 01       	movw	r24, r14
    2ffa:	b6 01       	movw	r22, r12
    2ffc:	80 dc       	rcall	.-1792   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    2ffe:	74 df       	rcall	.-280    	; 0x2ee8 <xTaskResumeAll>
    3000:	81 11       	cpse	r24, r1
    3002:	02 c0       	rjmp	.+4      	; 0x3008 <vTaskDelay+0x28>
    3004:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3008:	ff 90       	pop	r15
    300a:	ef 90       	pop	r14
    300c:	df 90       	pop	r13
    300e:	cf 90       	pop	r12
    3010:	08 95       	ret

00003012 <vTaskSwitchContext>:
    3012:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <uxSchedulerSuspended>
    3016:	88 23       	and	r24, r24
    3018:	21 f0       	breq	.+8      	; 0x3022 <vTaskSwitchContext+0x10>
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <xYieldPending>
    3020:	08 95       	ret
    3022:	10 92 75 06 	sts	0x0675, r1	; 0x800675 <xYieldPending>
    3026:	a0 91 e6 06 	lds	r26, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    302a:	b0 91 e7 06 	lds	r27, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    302e:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    3032:	f0 91 e7 06 	lds	r31, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    3036:	2d 91       	ld	r18, X+
    3038:	3c 91       	ld	r19, X
    303a:	83 8d       	ldd	r24, Z+27	; 0x1b
    303c:	94 8d       	ldd	r25, Z+28	; 0x1c
    303e:	82 17       	cp	r24, r18
    3040:	93 07       	cpc	r25, r19
    3042:	60 f0       	brcs	.+24     	; 0x305c <vTaskSwitchContext+0x4a>
    3044:	60 91 e6 06 	lds	r22, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    3048:	70 91 e7 06 	lds	r23, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    304c:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    3050:	90 91 e7 06 	lds	r25, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    3054:	63 5e       	subi	r22, 0xE3	; 227
    3056:	7f 4f       	sbci	r23, 0xFF	; 255
    3058:	0e 94 fd 07 	call	0xffa	; 0xffa <vApplicationStackOverflowHook>
    305c:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <uxTopReadyPriority>
    3060:	28 2f       	mov	r18, r24
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	9b e0       	ldi	r25, 0x0B	; 11
    3066:	89 9f       	mul	r24, r25
    3068:	f0 01       	movw	r30, r0
    306a:	11 24       	eor	r1, r1
    306c:	e6 54       	subi	r30, 0x46	; 70
    306e:	f9 4f       	sbci	r31, 0xF9	; 249
    3070:	90 81       	ld	r25, Z
    3072:	91 11       	cpse	r25, r1
    3074:	0e c0       	rjmp	.+28     	; 0x3092 <vTaskSwitchContext+0x80>
    3076:	4b e0       	ldi	r20, 0x0B	; 11
    3078:	81 50       	subi	r24, 0x01	; 1
    307a:	28 2f       	mov	r18, r24
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	42 9f       	mul	r20, r18
    3080:	f0 01       	movw	r30, r0
    3082:	43 9f       	mul	r20, r19
    3084:	f0 0d       	add	r31, r0
    3086:	11 24       	eor	r1, r1
    3088:	e6 54       	subi	r30, 0x46	; 70
    308a:	f9 4f       	sbci	r31, 0xF9	; 249
    308c:	90 81       	ld	r25, Z
    308e:	99 23       	and	r25, r25
    3090:	99 f3       	breq	.-26     	; 0x3078 <vTaskSwitchContext+0x66>
    3092:	9b e0       	ldi	r25, 0x0B	; 11
    3094:	92 9f       	mul	r25, r18
    3096:	a0 01       	movw	r20, r0
    3098:	93 9f       	mul	r25, r19
    309a:	50 0d       	add	r21, r0
    309c:	11 24       	eor	r1, r1
    309e:	da 01       	movw	r26, r20
    30a0:	a6 54       	subi	r26, 0x46	; 70
    30a2:	b9 4f       	sbci	r27, 0xF9	; 249
    30a4:	11 96       	adiw	r26, 0x01	; 1
    30a6:	ed 91       	ld	r30, X+
    30a8:	fc 91       	ld	r31, X
    30aa:	12 97       	sbiw	r26, 0x02	; 2
    30ac:	04 80       	ldd	r0, Z+4	; 0x04
    30ae:	f5 81       	ldd	r31, Z+5	; 0x05
    30b0:	e0 2d       	mov	r30, r0
    30b2:	12 96       	adiw	r26, 0x02	; 2
    30b4:	fc 93       	st	X, r31
    30b6:	ee 93       	st	-X, r30
    30b8:	11 97       	sbiw	r26, 0x01	; 1
    30ba:	43 54       	subi	r20, 0x43	; 67
    30bc:	59 4f       	sbci	r21, 0xF9	; 249
    30be:	e4 17       	cp	r30, r20
    30c0:	f5 07       	cpc	r31, r21
    30c2:	29 f4       	brne	.+10     	; 0x30ce <vTaskSwitchContext+0xbc>
    30c4:	44 81       	ldd	r20, Z+4	; 0x04
    30c6:	55 81       	ldd	r21, Z+5	; 0x05
    30c8:	fd 01       	movw	r30, r26
    30ca:	52 83       	std	Z+2, r21	; 0x02
    30cc:	41 83       	std	Z+1, r20	; 0x01
    30ce:	9b e0       	ldi	r25, 0x0B	; 11
    30d0:	92 9f       	mul	r25, r18
    30d2:	f0 01       	movw	r30, r0
    30d4:	93 9f       	mul	r25, r19
    30d6:	f0 0d       	add	r31, r0
    30d8:	11 24       	eor	r1, r1
    30da:	e6 54       	subi	r30, 0x46	; 70
    30dc:	f9 4f       	sbci	r31, 0xF9	; 249
    30de:	01 80       	ldd	r0, Z+1	; 0x01
    30e0:	f2 81       	ldd	r31, Z+2	; 0x02
    30e2:	e0 2d       	mov	r30, r0
    30e4:	20 85       	ldd	r18, Z+8	; 0x08
    30e6:	31 85       	ldd	r19, Z+9	; 0x09
    30e8:	30 93 e7 06 	sts	0x06E7, r19	; 0x8006e7 <pxCurrentTCB+0x1>
    30ec:	20 93 e6 06 	sts	0x06E6, r18	; 0x8006e6 <pxCurrentTCB>
    30f0:	80 93 78 06 	sts	0x0678, r24	; 0x800678 <uxTopReadyPriority>
    30f4:	08 95       	ret

000030f6 <vTaskSuspend>:
    30f6:	0f 93       	push	r16
    30f8:	1f 93       	push	r17
    30fa:	cf 93       	push	r28
    30fc:	df 93       	push	r29
    30fe:	ec 01       	movw	r28, r24
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	0f 92       	push	r0
    3106:	89 2b       	or	r24, r25
    3108:	21 f4       	brne	.+8      	; 0x3112 <vTaskSuspend+0x1c>
    310a:	c0 91 e6 06 	lds	r28, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    310e:	d0 91 e7 06 	lds	r29, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    3112:	8e 01       	movw	r16, r28
    3114:	0e 5f       	subi	r16, 0xFE	; 254
    3116:	1f 4f       	sbci	r17, 0xFF	; 255
    3118:	c8 01       	movw	r24, r16
    311a:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    311e:	88 8d       	ldd	r24, Y+24	; 0x18
    3120:	99 8d       	ldd	r25, Y+25	; 0x19
    3122:	89 2b       	or	r24, r25
    3124:	21 f0       	breq	.+8      	; 0x312e <vTaskSuspend+0x38>
    3126:	ce 01       	movw	r24, r28
    3128:	0e 96       	adiw	r24, 0x0e	; 14
    312a:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    312e:	b8 01       	movw	r22, r16
    3130:	8e e7       	ldi	r24, 0x7E	; 126
    3132:	96 e0       	ldi	r25, 0x06	; 6
    3134:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3138:	8a a9       	ldd	r24, Y+50	; 0x32
    313a:	81 30       	cpi	r24, 0x01	; 1
    313c:	09 f4       	brne	.+2      	; 0x3140 <vTaskSuspend+0x4a>
    313e:	1a aa       	std	Y+50, r1	; 0x32
    3140:	0f 90       	pop	r0
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <xSchedulerRunning>
    3148:	88 23       	and	r24, r24
    314a:	31 f0       	breq	.+12     	; 0x3158 <vTaskSuspend+0x62>
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	0f 92       	push	r0
    3152:	ab db       	rcall	.-2218   	; 0x28aa <prvResetNextTaskUnblockTime>
    3154:	0f 90       	pop	r0
    3156:	0f be       	out	0x3f, r0	; 63
    3158:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    315c:	90 91 e7 06 	lds	r25, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    3160:	c8 17       	cp	r28, r24
    3162:	d9 07       	cpc	r29, r25
    3164:	99 f4       	brne	.+38     	; 0x318c <vTaskSuspend+0x96>
    3166:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <xSchedulerRunning>
    316a:	88 23       	and	r24, r24
    316c:	19 f0       	breq	.+6      	; 0x3174 <vTaskSuspend+0x7e>
    316e:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3172:	0c c0       	rjmp	.+24     	; 0x318c <vTaskSuspend+0x96>
    3174:	90 91 7e 06 	lds	r25, 0x067E	; 0x80067e <xSuspendedTaskList>
    3178:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <uxCurrentNumberOfTasks>
    317c:	98 13       	cpse	r25, r24
    317e:	05 c0       	rjmp	.+10     	; 0x318a <vTaskSuspend+0x94>
    3180:	10 92 e7 06 	sts	0x06E7, r1	; 0x8006e7 <pxCurrentTCB+0x1>
    3184:	10 92 e6 06 	sts	0x06E6, r1	; 0x8006e6 <pxCurrentTCB>
    3188:	01 c0       	rjmp	.+2      	; 0x318c <vTaskSuspend+0x96>
    318a:	43 df       	rcall	.-378    	; 0x3012 <vTaskSwitchContext>
    318c:	df 91       	pop	r29
    318e:	cf 91       	pop	r28
    3190:	1f 91       	pop	r17
    3192:	0f 91       	pop	r16
    3194:	08 95       	ret

00003196 <vTaskPlaceOnEventList>:
    3196:	cf 92       	push	r12
    3198:	df 92       	push	r13
    319a:	ef 92       	push	r14
    319c:	ff 92       	push	r15
    319e:	6a 01       	movw	r12, r20
    31a0:	7b 01       	movw	r14, r22
    31a2:	60 91 e6 06 	lds	r22, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    31a6:	70 91 e7 06 	lds	r23, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    31aa:	62 5f       	subi	r22, 0xF2	; 242
    31ac:	7f 4f       	sbci	r23, 0xFF	; 255
    31ae:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    31b2:	41 e0       	ldi	r20, 0x01	; 1
    31b4:	c7 01       	movw	r24, r14
    31b6:	b6 01       	movw	r22, r12
    31b8:	a2 db       	rcall	.-2236   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    31ba:	ff 90       	pop	r15
    31bc:	ef 90       	pop	r14
    31be:	df 90       	pop	r13
    31c0:	cf 90       	pop	r12
    31c2:	08 95       	ret

000031c4 <vTaskPlaceOnEventListRestricted>:
    31c4:	cf 92       	push	r12
    31c6:	df 92       	push	r13
    31c8:	ef 92       	push	r14
    31ca:	ff 92       	push	r15
    31cc:	cf 93       	push	r28
    31ce:	6a 01       	movw	r12, r20
    31d0:	7b 01       	movw	r14, r22
    31d2:	c2 2f       	mov	r28, r18
    31d4:	60 91 e6 06 	lds	r22, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    31d8:	70 91 e7 06 	lds	r23, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    31dc:	62 5f       	subi	r22, 0xF2	; 242
    31de:	7f 4f       	sbci	r23, 0xFF	; 255
    31e0:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    31e4:	cc 23       	and	r28, r28
    31e6:	21 f0       	breq	.+8      	; 0x31f0 <vTaskPlaceOnEventListRestricted+0x2c>
    31e8:	cc 24       	eor	r12, r12
    31ea:	ca 94       	dec	r12
    31ec:	dc 2c       	mov	r13, r12
    31ee:	76 01       	movw	r14, r12
    31f0:	4c 2f       	mov	r20, r28
    31f2:	c7 01       	movw	r24, r14
    31f4:	b6 01       	movw	r22, r12
    31f6:	83 db       	rcall	.-2298   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    31f8:	cf 91       	pop	r28
    31fa:	ff 90       	pop	r15
    31fc:	ef 90       	pop	r14
    31fe:	df 90       	pop	r13
    3200:	cf 90       	pop	r12
    3202:	08 95       	ret

00003204 <xTaskRemoveFromEventList>:
    3204:	0f 93       	push	r16
    3206:	1f 93       	push	r17
    3208:	cf 93       	push	r28
    320a:	df 93       	push	r29
    320c:	dc 01       	movw	r26, r24
    320e:	17 96       	adiw	r26, 0x07	; 7
    3210:	ed 91       	ld	r30, X+
    3212:	fc 91       	ld	r31, X
    3214:	18 97       	sbiw	r26, 0x08	; 8
    3216:	c0 85       	ldd	r28, Z+8	; 0x08
    3218:	d1 85       	ldd	r29, Z+9	; 0x09
    321a:	8e 01       	movw	r16, r28
    321c:	02 5f       	subi	r16, 0xF2	; 242
    321e:	1f 4f       	sbci	r17, 0xFF	; 255
    3220:	c8 01       	movw	r24, r16
    3222:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3226:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <uxSchedulerSuspended>
    322a:	81 11       	cpse	r24, r1
    322c:	16 c0       	rjmp	.+44     	; 0x325a <xTaskRemoveFromEventList+0x56>
    322e:	0c 50       	subi	r16, 0x0C	; 12
    3230:	11 09       	sbc	r17, r1
    3232:	c8 01       	movw	r24, r16
    3234:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3238:	8a 8d       	ldd	r24, Y+26	; 0x1a
    323a:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <uxTopReadyPriority>
    323e:	98 17       	cp	r25, r24
    3240:	10 f4       	brcc	.+4      	; 0x3246 <xTaskRemoveFromEventList+0x42>
    3242:	80 93 78 06 	sts	0x0678, r24	; 0x800678 <uxTopReadyPriority>
    3246:	bb e0       	ldi	r27, 0x0B	; 11
    3248:	8b 9f       	mul	r24, r27
    324a:	c0 01       	movw	r24, r0
    324c:	11 24       	eor	r1, r1
    324e:	b8 01       	movw	r22, r16
    3250:	86 54       	subi	r24, 0x46	; 70
    3252:	99 4f       	sbci	r25, 0xF9	; 249
    3254:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3258:	05 c0       	rjmp	.+10     	; 0x3264 <xTaskRemoveFromEventList+0x60>
    325a:	b8 01       	movw	r22, r16
    325c:	85 e9       	ldi	r24, 0x95	; 149
    325e:	96 e0       	ldi	r25, 0x06	; 6
    3260:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3264:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    3268:	f0 91 e7 06 	lds	r31, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    326c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    326e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3270:	89 17       	cp	r24, r25
    3272:	20 f4       	brcc	.+8      	; 0x327c <xTaskRemoveFromEventList+0x78>
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <xYieldPending>
    327a:	01 c0       	rjmp	.+2      	; 0x327e <xTaskRemoveFromEventList+0x7a>
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	df 91       	pop	r29
    3280:	cf 91       	pop	r28
    3282:	1f 91       	pop	r17
    3284:	0f 91       	pop	r16
    3286:	08 95       	ret

00003288 <vTaskInternalSetTimeOutState>:
    3288:	20 91 74 06 	lds	r18, 0x0674	; 0x800674 <xNumOfOverflows>
    328c:	fc 01       	movw	r30, r24
    328e:	20 83       	st	Z, r18
    3290:	40 91 79 06 	lds	r20, 0x0679	; 0x800679 <xTickCount>
    3294:	50 91 7a 06 	lds	r21, 0x067A	; 0x80067a <xTickCount+0x1>
    3298:	60 91 7b 06 	lds	r22, 0x067B	; 0x80067b <xTickCount+0x2>
    329c:	70 91 7c 06 	lds	r23, 0x067C	; 0x80067c <xTickCount+0x3>
    32a0:	41 83       	std	Z+1, r20	; 0x01
    32a2:	52 83       	std	Z+2, r21	; 0x02
    32a4:	63 83       	std	Z+3, r22	; 0x03
    32a6:	74 83       	std	Z+4, r23	; 0x04
    32a8:	08 95       	ret

000032aa <xTaskCheckForTimeOut>:
    32aa:	cf 92       	push	r12
    32ac:	df 92       	push	r13
    32ae:	ef 92       	push	r14
    32b0:	ff 92       	push	r15
    32b2:	0f 93       	push	r16
    32b4:	1f 93       	push	r17
    32b6:	cf 93       	push	r28
    32b8:	df 93       	push	r29
    32ba:	fb 01       	movw	r30, r22
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	f8 94       	cli
    32c0:	0f 92       	push	r0
    32c2:	40 91 79 06 	lds	r20, 0x0679	; 0x800679 <xTickCount>
    32c6:	50 91 7a 06 	lds	r21, 0x067A	; 0x80067a <xTickCount+0x1>
    32ca:	60 91 7b 06 	lds	r22, 0x067B	; 0x80067b <xTickCount+0x2>
    32ce:	70 91 7c 06 	lds	r23, 0x067C	; 0x80067c <xTickCount+0x3>
    32d2:	00 81       	ld	r16, Z
    32d4:	11 81       	ldd	r17, Z+1	; 0x01
    32d6:	22 81       	ldd	r18, Z+2	; 0x02
    32d8:	33 81       	ldd	r19, Z+3	; 0x03
    32da:	0f 3f       	cpi	r16, 0xFF	; 255
    32dc:	af ef       	ldi	r26, 0xFF	; 255
    32de:	1a 07       	cpc	r17, r26
    32e0:	2a 07       	cpc	r18, r26
    32e2:	3a 07       	cpc	r19, r26
    32e4:	49 f1       	breq	.+82     	; 0x3338 <xTaskCheckForTimeOut+0x8e>
    32e6:	ec 01       	movw	r28, r24
    32e8:	c9 80       	ldd	r12, Y+1	; 0x01
    32ea:	da 80       	ldd	r13, Y+2	; 0x02
    32ec:	eb 80       	ldd	r14, Y+3	; 0x03
    32ee:	fc 80       	ldd	r15, Y+4	; 0x04
    32f0:	a0 91 74 06 	lds	r26, 0x0674	; 0x800674 <xNumOfOverflows>
    32f4:	b8 81       	ld	r27, Y
    32f6:	ba 17       	cp	r27, r26
    32f8:	29 f0       	breq	.+10     	; 0x3304 <xTaskCheckForTimeOut+0x5a>
    32fa:	4c 15       	cp	r20, r12
    32fc:	5d 05       	cpc	r21, r13
    32fe:	6e 05       	cpc	r22, r14
    3300:	7f 05       	cpc	r23, r15
    3302:	e0 f4       	brcc	.+56     	; 0x333c <xTaskCheckForTimeOut+0x92>
    3304:	4c 19       	sub	r20, r12
    3306:	5d 09       	sbc	r21, r13
    3308:	6e 09       	sbc	r22, r14
    330a:	7f 09       	sbc	r23, r15
    330c:	40 17       	cp	r20, r16
    330e:	51 07       	cpc	r21, r17
    3310:	62 07       	cpc	r22, r18
    3312:	73 07       	cpc	r23, r19
    3314:	58 f4       	brcc	.+22     	; 0x332c <xTaskCheckForTimeOut+0x82>
    3316:	04 1b       	sub	r16, r20
    3318:	15 0b       	sbc	r17, r21
    331a:	26 0b       	sbc	r18, r22
    331c:	37 0b       	sbc	r19, r23
    331e:	00 83       	st	Z, r16
    3320:	11 83       	std	Z+1, r17	; 0x01
    3322:	22 83       	std	Z+2, r18	; 0x02
    3324:	33 83       	std	Z+3, r19	; 0x03
    3326:	b0 df       	rcall	.-160    	; 0x3288 <vTaskInternalSetTimeOutState>
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	09 c0       	rjmp	.+18     	; 0x333e <xTaskCheckForTimeOut+0x94>
    332c:	10 82       	st	Z, r1
    332e:	11 82       	std	Z+1, r1	; 0x01
    3330:	12 82       	std	Z+2, r1	; 0x02
    3332:	13 82       	std	Z+3, r1	; 0x03
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	03 c0       	rjmp	.+6      	; 0x333e <xTaskCheckForTimeOut+0x94>
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	01 c0       	rjmp	.+2      	; 0x333e <xTaskCheckForTimeOut+0x94>
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	0f 90       	pop	r0
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	1f 91       	pop	r17
    3348:	0f 91       	pop	r16
    334a:	ff 90       	pop	r15
    334c:	ef 90       	pop	r14
    334e:	df 90       	pop	r13
    3350:	cf 90       	pop	r12
    3352:	08 95       	ret

00003354 <vTaskMissedYield>:
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <xYieldPending>
    335a:	08 95       	ret

0000335c <xTaskGetSchedulerState>:
    335c:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <xSchedulerRunning>
    3360:	88 23       	and	r24, r24
    3362:	31 f0       	breq	.+12     	; 0x3370 <xTaskGetSchedulerState+0x14>
    3364:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <uxSchedulerSuspended>
    3368:	88 23       	and	r24, r24
    336a:	21 f0       	breq	.+8      	; 0x3374 <xTaskGetSchedulerState+0x18>
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	08 95       	ret
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	08 95       	ret
    3374:	82 e0       	ldi	r24, 0x02	; 2
    3376:	08 95       	ret

00003378 <xTaskPriorityInherit>:
    3378:	0f 93       	push	r16
    337a:	1f 93       	push	r17
    337c:	cf 93       	push	r28
    337e:	df 93       	push	r29
    3380:	fc 01       	movw	r30, r24
    3382:	89 2b       	or	r24, r25
    3384:	09 f4       	brne	.+2      	; 0x3388 <xTaskPriorityInherit+0x10>
    3386:	60 c0       	rjmp	.+192    	; 0x3448 <xTaskPriorityInherit+0xd0>
    3388:	82 8d       	ldd	r24, Z+26	; 0x1a
    338a:	a0 91 e6 06 	lds	r26, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    338e:	b0 91 e7 06 	lds	r27, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    3392:	5a 96       	adiw	r26, 0x1a	; 26
    3394:	9c 91       	ld	r25, X
    3396:	89 17       	cp	r24, r25
    3398:	08 f0       	brcs	.+2      	; 0x339c <xTaskPriorityInherit+0x24>
    339a:	4a c0       	rjmp	.+148    	; 0x3430 <xTaskPriorityInherit+0xb8>
    339c:	46 85       	ldd	r20, Z+14	; 0x0e
    339e:	57 85       	ldd	r21, Z+15	; 0x0f
    33a0:	60 89       	ldd	r22, Z+16	; 0x10
    33a2:	71 89       	ldd	r23, Z+17	; 0x11
    33a4:	77 23       	and	r23, r23
    33a6:	94 f0       	brlt	.+36     	; 0x33cc <xTaskPriorityInherit+0x54>
    33a8:	a0 91 e6 06 	lds	r26, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    33ac:	b0 91 e7 06 	lds	r27, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    33b0:	5a 96       	adiw	r26, 0x1a	; 26
    33b2:	9c 91       	ld	r25, X
    33b4:	44 e0       	ldi	r20, 0x04	; 4
    33b6:	50 e0       	ldi	r21, 0x00	; 0
    33b8:	60 e0       	ldi	r22, 0x00	; 0
    33ba:	70 e0       	ldi	r23, 0x00	; 0
    33bc:	49 1b       	sub	r20, r25
    33be:	51 09       	sbc	r21, r1
    33c0:	61 09       	sbc	r22, r1
    33c2:	71 09       	sbc	r23, r1
    33c4:	46 87       	std	Z+14, r20	; 0x0e
    33c6:	57 87       	std	Z+15, r21	; 0x0f
    33c8:	60 8b       	std	Z+16, r22	; 0x10
    33ca:	71 8b       	std	Z+17, r23	; 0x11
    33cc:	2b e0       	ldi	r18, 0x0B	; 11
    33ce:	82 9f       	mul	r24, r18
    33d0:	c0 01       	movw	r24, r0
    33d2:	11 24       	eor	r1, r1
    33d4:	86 54       	subi	r24, 0x46	; 70
    33d6:	99 4f       	sbci	r25, 0xF9	; 249
    33d8:	24 85       	ldd	r18, Z+12	; 0x0c
    33da:	35 85       	ldd	r19, Z+13	; 0x0d
    33dc:	28 17       	cp	r18, r24
    33de:	39 07       	cpc	r19, r25
    33e0:	f1 f4       	brne	.+60     	; 0x341e <xTaskPriorityInherit+0xa6>
    33e2:	8f 01       	movw	r16, r30
    33e4:	ef 01       	movw	r28, r30
    33e6:	22 96       	adiw	r28, 0x02	; 2
    33e8:	ce 01       	movw	r24, r28
    33ea:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    33ee:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    33f2:	f0 91 e7 06 	lds	r31, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    33f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    33f8:	f8 01       	movw	r30, r16
    33fa:	82 8f       	std	Z+26, r24	; 0x1a
    33fc:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <uxTopReadyPriority>
    3400:	98 17       	cp	r25, r24
    3402:	10 f4       	brcc	.+4      	; 0x3408 <xTaskPriorityInherit+0x90>
    3404:	80 93 78 06 	sts	0x0678, r24	; 0x800678 <uxTopReadyPriority>
    3408:	fb e0       	ldi	r31, 0x0B	; 11
    340a:	8f 9f       	mul	r24, r31
    340c:	c0 01       	movw	r24, r0
    340e:	11 24       	eor	r1, r1
    3410:	be 01       	movw	r22, r28
    3412:	86 54       	subi	r24, 0x46	; 70
    3414:	99 4f       	sbci	r25, 0xF9	; 249
    3416:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	16 c0       	rjmp	.+44     	; 0x344a <xTaskPriorityInherit+0xd2>
    341e:	a0 91 e6 06 	lds	r26, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    3422:	b0 91 e7 06 	lds	r27, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    3426:	5a 96       	adiw	r26, 0x1a	; 26
    3428:	8c 91       	ld	r24, X
    342a:	82 8f       	std	Z+26, r24	; 0x1a
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	0d c0       	rjmp	.+26     	; 0x344a <xTaskPriorityInherit+0xd2>
    3430:	a0 91 e6 06 	lds	r26, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    3434:	b0 91 e7 06 	lds	r27, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	24 a5       	ldd	r18, Z+44	; 0x2c
    343c:	5a 96       	adiw	r26, 0x1a	; 26
    343e:	9c 91       	ld	r25, X
    3440:	29 17       	cp	r18, r25
    3442:	18 f0       	brcs	.+6      	; 0x344a <xTaskPriorityInherit+0xd2>
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	01 c0       	rjmp	.+2      	; 0x344a <xTaskPriorityInherit+0xd2>
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	df 91       	pop	r29
    344c:	cf 91       	pop	r28
    344e:	1f 91       	pop	r17
    3450:	0f 91       	pop	r16
    3452:	08 95       	ret

00003454 <xTaskPriorityDisinherit>:
    3454:	0f 93       	push	r16
    3456:	1f 93       	push	r17
    3458:	cf 93       	push	r28
    345a:	df 93       	push	r29
    345c:	fc 01       	movw	r30, r24
    345e:	89 2b       	or	r24, r25
    3460:	79 f1       	breq	.+94     	; 0x34c0 <xTaskPriorityDisinherit+0x6c>
    3462:	85 a5       	ldd	r24, Z+45	; 0x2d
    3464:	81 50       	subi	r24, 0x01	; 1
    3466:	85 a7       	std	Z+45, r24	; 0x2d
    3468:	22 8d       	ldd	r18, Z+26	; 0x1a
    346a:	94 a5       	ldd	r25, Z+44	; 0x2c
    346c:	29 17       	cp	r18, r25
    346e:	51 f1       	breq	.+84     	; 0x34c4 <xTaskPriorityDisinherit+0x70>
    3470:	81 11       	cpse	r24, r1
    3472:	2a c0       	rjmp	.+84     	; 0x34c8 <xTaskPriorityDisinherit+0x74>
    3474:	ef 01       	movw	r28, r30
    3476:	8f 01       	movw	r16, r30
    3478:	0e 5f       	subi	r16, 0xFE	; 254
    347a:	1f 4f       	sbci	r17, 0xFF	; 255
    347c:	c8 01       	movw	r24, r16
    347e:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3482:	8c a5       	ldd	r24, Y+44	; 0x2c
    3484:	8a 8f       	std	Y+26, r24	; 0x1a
    3486:	44 e0       	ldi	r20, 0x04	; 4
    3488:	50 e0       	ldi	r21, 0x00	; 0
    348a:	60 e0       	ldi	r22, 0x00	; 0
    348c:	70 e0       	ldi	r23, 0x00	; 0
    348e:	48 1b       	sub	r20, r24
    3490:	51 09       	sbc	r21, r1
    3492:	61 09       	sbc	r22, r1
    3494:	71 09       	sbc	r23, r1
    3496:	4e 87       	std	Y+14, r20	; 0x0e
    3498:	5f 87       	std	Y+15, r21	; 0x0f
    349a:	68 8b       	std	Y+16, r22	; 0x10
    349c:	79 8b       	std	Y+17, r23	; 0x11
    349e:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <uxTopReadyPriority>
    34a2:	98 17       	cp	r25, r24
    34a4:	10 f4       	brcc	.+4      	; 0x34aa <xTaskPriorityDisinherit+0x56>
    34a6:	80 93 78 06 	sts	0x0678, r24	; 0x800678 <uxTopReadyPriority>
    34aa:	2b e0       	ldi	r18, 0x0B	; 11
    34ac:	82 9f       	mul	r24, r18
    34ae:	c0 01       	movw	r24, r0
    34b0:	11 24       	eor	r1, r1
    34b2:	b8 01       	movw	r22, r16
    34b4:	86 54       	subi	r24, 0x46	; 70
    34b6:	99 4f       	sbci	r25, 0xF9	; 249
    34b8:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	05 c0       	rjmp	.+10     	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	03 c0       	rjmp	.+6      	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	01 c0       	rjmp	.+2      	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	df 91       	pop	r29
    34cc:	cf 91       	pop	r28
    34ce:	1f 91       	pop	r17
    34d0:	0f 91       	pop	r16
    34d2:	08 95       	ret

000034d4 <vTaskPriorityDisinheritAfterTimeout>:
    34d4:	0f 93       	push	r16
    34d6:	1f 93       	push	r17
    34d8:	cf 93       	push	r28
    34da:	df 93       	push	r29
    34dc:	fc 01       	movw	r30, r24
    34de:	89 2b       	or	r24, r25
    34e0:	09 f4       	brne	.+2      	; 0x34e4 <vTaskPriorityDisinheritAfterTimeout+0x10>
    34e2:	3f c0       	rjmp	.+126    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34e4:	84 a5       	ldd	r24, Z+44	; 0x2c
    34e6:	86 17       	cp	r24, r22
    34e8:	08 f4       	brcc	.+2      	; 0x34ec <vTaskPriorityDisinheritAfterTimeout+0x18>
    34ea:	86 2f       	mov	r24, r22
    34ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    34ee:	98 17       	cp	r25, r24
    34f0:	c1 f1       	breq	.+112    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34f2:	25 a5       	ldd	r18, Z+45	; 0x2d
    34f4:	21 30       	cpi	r18, 0x01	; 1
    34f6:	a9 f5       	brne	.+106    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34f8:	82 8f       	std	Z+26, r24	; 0x1a
    34fa:	46 85       	ldd	r20, Z+14	; 0x0e
    34fc:	57 85       	ldd	r21, Z+15	; 0x0f
    34fe:	60 89       	ldd	r22, Z+16	; 0x10
    3500:	71 89       	ldd	r23, Z+17	; 0x11
    3502:	77 23       	and	r23, r23
    3504:	64 f0       	brlt	.+24     	; 0x351e <vTaskPriorityDisinheritAfterTimeout+0x4a>
    3506:	44 e0       	ldi	r20, 0x04	; 4
    3508:	50 e0       	ldi	r21, 0x00	; 0
    350a:	60 e0       	ldi	r22, 0x00	; 0
    350c:	70 e0       	ldi	r23, 0x00	; 0
    350e:	48 1b       	sub	r20, r24
    3510:	51 09       	sbc	r21, r1
    3512:	61 09       	sbc	r22, r1
    3514:	71 09       	sbc	r23, r1
    3516:	46 87       	std	Z+14, r20	; 0x0e
    3518:	57 87       	std	Z+15, r21	; 0x0f
    351a:	60 8b       	std	Z+16, r22	; 0x10
    351c:	71 8b       	std	Z+17, r23	; 0x11
    351e:	2b e0       	ldi	r18, 0x0B	; 11
    3520:	92 9f       	mul	r25, r18
    3522:	c0 01       	movw	r24, r0
    3524:	11 24       	eor	r1, r1
    3526:	86 54       	subi	r24, 0x46	; 70
    3528:	99 4f       	sbci	r25, 0xF9	; 249
    352a:	24 85       	ldd	r18, Z+12	; 0x0c
    352c:	35 85       	ldd	r19, Z+13	; 0x0d
    352e:	28 17       	cp	r18, r24
    3530:	39 07       	cpc	r19, r25
    3532:	b9 f4       	brne	.+46     	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3534:	ef 01       	movw	r28, r30
    3536:	8f 01       	movw	r16, r30
    3538:	0e 5f       	subi	r16, 0xFE	; 254
    353a:	1f 4f       	sbci	r17, 0xFF	; 255
    353c:	c8 01       	movw	r24, r16
    353e:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3542:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3544:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <uxTopReadyPriority>
    3548:	98 17       	cp	r25, r24
    354a:	10 f4       	brcc	.+4      	; 0x3550 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    354c:	80 93 78 06 	sts	0x0678, r24	; 0x800678 <uxTopReadyPriority>
    3550:	2b e0       	ldi	r18, 0x0B	; 11
    3552:	82 9f       	mul	r24, r18
    3554:	c0 01       	movw	r24, r0
    3556:	11 24       	eor	r1, r1
    3558:	b8 01       	movw	r22, r16
    355a:	86 54       	subi	r24, 0x46	; 70
    355c:	99 4f       	sbci	r25, 0xF9	; 249
    355e:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3562:	df 91       	pop	r29
    3564:	cf 91       	pop	r28
    3566:	1f 91       	pop	r17
    3568:	0f 91       	pop	r16
    356a:	08 95       	ret

0000356c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    356c:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    3570:	90 91 e7 06 	lds	r25, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    3574:	89 2b       	or	r24, r25
    3576:	39 f0       	breq	.+14     	; 0x3586 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    3578:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    357c:	f0 91 e7 06 	lds	r31, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
    3580:	85 a5       	ldd	r24, Z+45	; 0x2d
    3582:	8f 5f       	subi	r24, 0xFF	; 255
    3584:	85 a7       	std	Z+45, r24	; 0x2d
		}

		return pxCurrentTCB;
    3586:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <pxCurrentTCB>
    358a:	90 91 e7 06 	lds	r25, 0x06E7	; 0x8006e7 <pxCurrentTCB+0x1>
	}
    358e:	08 95       	ret

00003590 <prvInsertTimerInActiveList>:
{
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );
	return pxTimer->pcTimerName;
}
    3590:	cf 92       	push	r12
    3592:	df 92       	push	r13
    3594:	ef 92       	push	r14
    3596:	ff 92       	push	r15
    3598:	0f 93       	push	r16
    359a:	1f 93       	push	r17
    359c:	fc 01       	movw	r30, r24
    359e:	42 83       	std	Z+2, r20	; 0x02
    35a0:	53 83       	std	Z+3, r21	; 0x03
    35a2:	64 83       	std	Z+4, r22	; 0x04
    35a4:	75 83       	std	Z+5, r23	; 0x05
    35a6:	93 87       	std	Z+11, r25	; 0x0b
    35a8:	82 87       	std	Z+10, r24	; 0x0a
    35aa:	04 17       	cp	r16, r20
    35ac:	15 07       	cpc	r17, r21
    35ae:	26 07       	cpc	r18, r22
    35b0:	37 07       	cpc	r19, r23
    35b2:	c0 f0       	brcs	.+48     	; 0x35e4 <prvInsertTimerInActiveList+0x54>
    35b4:	0c 19       	sub	r16, r12
    35b6:	1d 09       	sbc	r17, r13
    35b8:	2e 09       	sbc	r18, r14
    35ba:	3f 09       	sbc	r19, r15
    35bc:	86 85       	ldd	r24, Z+14	; 0x0e
    35be:	97 85       	ldd	r25, Z+15	; 0x0f
    35c0:	a0 89       	ldd	r26, Z+16	; 0x10
    35c2:	b1 89       	ldd	r27, Z+17	; 0x11
    35c4:	08 17       	cp	r16, r24
    35c6:	19 07       	cpc	r17, r25
    35c8:	2a 07       	cpc	r18, r26
    35ca:	3b 07       	cpc	r19, r27
    35cc:	00 f5       	brcc	.+64     	; 0x360e <prvInsertTimerInActiveList+0x7e>
    35ce:	bf 01       	movw	r22, r30
    35d0:	6e 5f       	subi	r22, 0xFE	; 254
    35d2:	7f 4f       	sbci	r23, 0xFF	; 255
    35d4:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <pxOverflowTimerList>
    35d8:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <pxOverflowTimerList+0x1>
    35dc:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	18 c0       	rjmp	.+48     	; 0x3614 <prvInsertTimerInActiveList+0x84>
    35e4:	0c 15       	cp	r16, r12
    35e6:	1d 05       	cpc	r17, r13
    35e8:	2e 05       	cpc	r18, r14
    35ea:	3f 05       	cpc	r19, r15
    35ec:	28 f4       	brcc	.+10     	; 0x35f8 <prvInsertTimerInActiveList+0x68>
    35ee:	4c 15       	cp	r20, r12
    35f0:	5d 05       	cpc	r21, r13
    35f2:	6e 05       	cpc	r22, r14
    35f4:	7f 05       	cpc	r23, r15
    35f6:	68 f4       	brcc	.+26     	; 0x3612 <prvInsertTimerInActiveList+0x82>
    35f8:	bf 01       	movw	r22, r30
    35fa:	6e 5f       	subi	r22, 0xFE	; 254
    35fc:	7f 4f       	sbci	r23, 0xFF	; 255
    35fe:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <pxCurrentTimerList>
    3602:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <pxCurrentTimerList+0x1>
    3606:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	03 c0       	rjmp	.+6      	; 0x3614 <prvInsertTimerInActiveList+0x84>
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	01 c0       	rjmp	.+2      	; 0x3614 <prvInsertTimerInActiveList+0x84>
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	1f 91       	pop	r17
    3616:	0f 91       	pop	r16
    3618:	ff 90       	pop	r15
    361a:	ef 90       	pop	r14
    361c:	df 90       	pop	r13
    361e:	cf 90       	pop	r12
    3620:	08 95       	ret

00003622 <prvCheckForValidListAndQueue>:
    3622:	0f b6       	in	r0, 0x3f	; 63
    3624:	f8 94       	cli
    3626:	0f 92       	push	r0
    3628:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <xTimerQueue>
    362c:	90 91 ef 06 	lds	r25, 0x06EF	; 0x8006ef <xTimerQueue+0x1>
    3630:	89 2b       	or	r24, r25
    3632:	e9 f4       	brne	.+58     	; 0x366e <prvCheckForValidListAndQueue+0x4c>
    3634:	8f ef       	ldi	r24, 0xFF	; 255
    3636:	96 e0       	ldi	r25, 0x06	; 6
    3638:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    363c:	84 ef       	ldi	r24, 0xF4	; 244
    363e:	96 e0       	ldi	r25, 0x06	; 6
    3640:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    3644:	8f ef       	ldi	r24, 0xFF	; 255
    3646:	96 e0       	ldi	r25, 0x06	; 6
    3648:	90 93 f3 06 	sts	0x06F3, r25	; 0x8006f3 <pxCurrentTimerList+0x1>
    364c:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <pxCurrentTimerList>
    3650:	84 ef       	ldi	r24, 0xF4	; 244
    3652:	96 e0       	ldi	r25, 0x06	; 6
    3654:	90 93 f1 06 	sts	0x06F1, r25	; 0x8006f1 <pxOverflowTimerList+0x1>
    3658:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <pxOverflowTimerList>
    365c:	40 e0       	ldi	r20, 0x00	; 0
    365e:	67 e0       	ldi	r22, 0x07	; 7
    3660:	8a e0       	ldi	r24, 0x0A	; 10
    3662:	0e 94 a7 09 	call	0x134e	; 0x134e <xQueueGenericCreate>
    3666:	90 93 ef 06 	sts	0x06EF, r25	; 0x8006ef <xTimerQueue+0x1>
    366a:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <xTimerQueue>
    366e:	0f 90       	pop	r0
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	08 95       	ret

00003674 <xTimerCreateTimerTask>:
    3674:	ef 92       	push	r14
    3676:	ff 92       	push	r15
    3678:	0f 93       	push	r16
    367a:	d3 df       	rcall	.-90     	; 0x3622 <prvCheckForValidListAndQueue>
    367c:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <xTimerQueue>
    3680:	90 91 ef 06 	lds	r25, 0x06EF	; 0x8006ef <xTimerQueue+0x1>
    3684:	89 2b       	or	r24, r25
    3686:	89 f0       	breq	.+34     	; 0x36aa <xTimerCreateTimerTask+0x36>
    3688:	0f 2e       	mov	r0, r31
    368a:	fc ee       	ldi	r31, 0xEC	; 236
    368c:	ef 2e       	mov	r14, r31
    368e:	f6 e0       	ldi	r31, 0x06	; 6
    3690:	ff 2e       	mov	r15, r31
    3692:	f0 2d       	mov	r31, r0
    3694:	03 e0       	ldi	r16, 0x03	; 3
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	40 e8       	ldi	r20, 0x80	; 128
    369c:	50 e0       	ldi	r21, 0x00	; 0
    369e:	6b e1       	ldi	r22, 0x1B	; 27
    36a0:	72 e0       	ldi	r23, 0x02	; 2
    36a2:	85 e8       	ldi	r24, 0x85	; 133
    36a4:	9c e1       	ldi	r25, 0x1C	; 28
    36a6:	a2 d9       	rcall	.-3260   	; 0x29ec <xTaskCreate>
    36a8:	01 c0       	rjmp	.+2      	; 0x36ac <xTimerCreateTimerTask+0x38>
    36aa:	80 e0       	ldi	r24, 0x00	; 0
    36ac:	0f 91       	pop	r16
    36ae:	ff 90       	pop	r15
    36b0:	ef 90       	pop	r14
    36b2:	08 95       	ret

000036b4 <xTimerCreate>:
    36b4:	7f 92       	push	r7
    36b6:	8f 92       	push	r8
    36b8:	9f 92       	push	r9
    36ba:	af 92       	push	r10
    36bc:	bf 92       	push	r11
    36be:	cf 92       	push	r12
    36c0:	df 92       	push	r13
    36c2:	ef 92       	push	r14
    36c4:	ff 92       	push	r15
    36c6:	0f 93       	push	r16
    36c8:	1f 93       	push	r17
    36ca:	cf 93       	push	r28
    36cc:	df 93       	push	r29
    36ce:	6c 01       	movw	r12, r24
    36d0:	4a 01       	movw	r8, r20
    36d2:	5b 01       	movw	r10, r22
    36d4:	72 2e       	mov	r7, r18
    36d6:	87 e1       	ldi	r24, 0x17	; 23
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    36de:	ec 01       	movw	r28, r24
    36e0:	89 2b       	or	r24, r25
    36e2:	81 f0       	breq	.+32     	; 0x3704 <xTimerCreate+0x50>
    36e4:	9e df       	rcall	.-196    	; 0x3622 <prvCheckForValidListAndQueue>
    36e6:	d9 82       	std	Y+1, r13	; 0x01
    36e8:	c8 82       	st	Y, r12
    36ea:	8e 86       	std	Y+14, r8	; 0x0e
    36ec:	9f 86       	std	Y+15, r9	; 0x0f
    36ee:	a8 8a       	std	Y+16, r10	; 0x10
    36f0:	b9 8a       	std	Y+17, r11	; 0x11
    36f2:	7a 8a       	std	Y+18, r7	; 0x12
    36f4:	1c 8b       	std	Y+20, r17	; 0x14
    36f6:	0b 8b       	std	Y+19, r16	; 0x13
    36f8:	fe 8a       	std	Y+22, r15	; 0x16
    36fa:	ed 8a       	std	Y+21, r14	; 0x15
    36fc:	ce 01       	movw	r24, r28
    36fe:	02 96       	adiw	r24, 0x02	; 2
    3700:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    3704:	ce 01       	movw	r24, r28
    3706:	df 91       	pop	r29
    3708:	cf 91       	pop	r28
    370a:	1f 91       	pop	r17
    370c:	0f 91       	pop	r16
    370e:	ff 90       	pop	r15
    3710:	ef 90       	pop	r14
    3712:	df 90       	pop	r13
    3714:	cf 90       	pop	r12
    3716:	bf 90       	pop	r11
    3718:	af 90       	pop	r10
    371a:	9f 90       	pop	r9
    371c:	8f 90       	pop	r8
    371e:	7f 90       	pop	r7
    3720:	08 95       	ret

00003722 <xTimerGenericCommand>:
    3722:	8f 92       	push	r8
    3724:	9f 92       	push	r9
    3726:	af 92       	push	r10
    3728:	bf 92       	push	r11
    372a:	cf 92       	push	r12
    372c:	df 92       	push	r13
    372e:	ef 92       	push	r14
    3730:	ff 92       	push	r15
    3732:	0f 93       	push	r16
    3734:	1f 93       	push	r17
    3736:	cf 93       	push	r28
    3738:	df 93       	push	r29
    373a:	cd b7       	in	r28, 0x3d	; 61
    373c:	de b7       	in	r29, 0x3e	; 62
    373e:	27 97       	sbiw	r28, 0x07	; 7
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	f8 94       	cli
    3744:	de bf       	out	0x3e, r29	; 62
    3746:	0f be       	out	0x3f, r0	; 63
    3748:	cd bf       	out	0x3d, r28	; 61
    374a:	e0 91 ee 06 	lds	r30, 0x06EE	; 0x8006ee <xTimerQueue>
    374e:	f0 91 ef 06 	lds	r31, 0x06EF	; 0x8006ef <xTimerQueue+0x1>
    3752:	30 97       	sbiw	r30, 0x00	; 0
    3754:	81 f1       	breq	.+96     	; 0x37b6 <xTimerGenericCommand+0x94>
    3756:	69 83       	std	Y+1, r22	; 0x01
    3758:	2a 83       	std	Y+2, r18	; 0x02
    375a:	3b 83       	std	Y+3, r19	; 0x03
    375c:	4c 83       	std	Y+4, r20	; 0x04
    375e:	5d 83       	std	Y+5, r21	; 0x05
    3760:	9f 83       	std	Y+7, r25	; 0x07
    3762:	8e 83       	std	Y+6, r24	; 0x06
    3764:	66 30       	cpi	r22, 0x06	; 6
    3766:	f4 f4       	brge	.+60     	; 0x37a4 <xTimerGenericCommand+0x82>
    3768:	f9 dd       	rcall	.-1038   	; 0x335c <xTaskGetSchedulerState>
    376a:	82 30       	cpi	r24, 0x02	; 2
    376c:	69 f4       	brne	.+26     	; 0x3788 <xTimerGenericCommand+0x66>
    376e:	00 e0       	ldi	r16, 0x00	; 0
    3770:	a7 01       	movw	r20, r14
    3772:	96 01       	movw	r18, r12
    3774:	be 01       	movw	r22, r28
    3776:	6f 5f       	subi	r22, 0xFF	; 255
    3778:	7f 4f       	sbci	r23, 0xFF	; 255
    377a:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <xTimerQueue>
    377e:	90 91 ef 06 	lds	r25, 0x06EF	; 0x8006ef <xTimerQueue+0x1>
    3782:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    3786:	18 c0       	rjmp	.+48     	; 0x37b8 <xTimerGenericCommand+0x96>
    3788:	00 e0       	ldi	r16, 0x00	; 0
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	a9 01       	movw	r20, r18
    3790:	be 01       	movw	r22, r28
    3792:	6f 5f       	subi	r22, 0xFF	; 255
    3794:	7f 4f       	sbci	r23, 0xFF	; 255
    3796:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <xTimerQueue>
    379a:	90 91 ef 06 	lds	r25, 0x06EF	; 0x8006ef <xTimerQueue+0x1>
    379e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    37a2:	0a c0       	rjmp	.+20     	; 0x37b8 <xTimerGenericCommand+0x96>
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	a8 01       	movw	r20, r16
    37a8:	be 01       	movw	r22, r28
    37aa:	6f 5f       	subi	r22, 0xFF	; 255
    37ac:	7f 4f       	sbci	r23, 0xFF	; 255
    37ae:	cf 01       	movw	r24, r30
    37b0:	0e 94 90 0a 	call	0x1520	; 0x1520 <xQueueGenericSendFromISR>
    37b4:	01 c0       	rjmp	.+2      	; 0x37b8 <xTimerGenericCommand+0x96>
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	27 96       	adiw	r28, 0x07	; 7
    37ba:	0f b6       	in	r0, 0x3f	; 63
    37bc:	f8 94       	cli
    37be:	de bf       	out	0x3e, r29	; 62
    37c0:	0f be       	out	0x3f, r0	; 63
    37c2:	cd bf       	out	0x3d, r28	; 61
    37c4:	df 91       	pop	r29
    37c6:	cf 91       	pop	r28
    37c8:	1f 91       	pop	r17
    37ca:	0f 91       	pop	r16
    37cc:	ff 90       	pop	r15
    37ce:	ef 90       	pop	r14
    37d0:	df 90       	pop	r13
    37d2:	cf 90       	pop	r12
    37d4:	bf 90       	pop	r11
    37d6:	af 90       	pop	r10
    37d8:	9f 90       	pop	r9
    37da:	8f 90       	pop	r8
    37dc:	08 95       	ret

000037de <prvSampleTimeNow>:
    37de:	2f 92       	push	r2
    37e0:	3f 92       	push	r3
    37e2:	4f 92       	push	r4
    37e4:	5f 92       	push	r5
    37e6:	6f 92       	push	r6
    37e8:	7f 92       	push	r7
    37ea:	8f 92       	push	r8
    37ec:	9f 92       	push	r9
    37ee:	af 92       	push	r10
    37f0:	bf 92       	push	r11
    37f2:	cf 92       	push	r12
    37f4:	df 92       	push	r13
    37f6:	ef 92       	push	r14
    37f8:	ff 92       	push	r15
    37fa:	0f 93       	push	r16
    37fc:	1f 93       	push	r17
    37fe:	cf 93       	push	r28
    3800:	df 93       	push	r29
    3802:	1c 01       	movw	r2, r24
    3804:	8e da       	rcall	.-2788   	; 0x2d22 <xTaskGetTickCount>
    3806:	2b 01       	movw	r4, r22
    3808:	3c 01       	movw	r6, r24
    380a:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <xLastTime.2378>
    380e:	90 91 e9 06 	lds	r25, 0x06E9	; 0x8006e9 <xLastTime.2378+0x1>
    3812:	a0 91 ea 06 	lds	r26, 0x06EA	; 0x8006ea <xLastTime.2378+0x2>
    3816:	b0 91 eb 06 	lds	r27, 0x06EB	; 0x8006eb <xLastTime.2378+0x3>
    381a:	48 16       	cp	r4, r24
    381c:	59 06       	cpc	r5, r25
    381e:	6a 06       	cpc	r6, r26
    3820:	7b 06       	cpc	r7, r27
    3822:	08 f0       	brcs	.+2      	; 0x3826 <prvSampleTimeNow+0x48>
    3824:	53 c0       	rjmp	.+166    	; 0x38cc <prvSampleTimeNow+0xee>
    3826:	3b c0       	rjmp	.+118    	; 0x389e <prvSampleTimeNow+0xc0>
    3828:	07 80       	ldd	r0, Z+7	; 0x07
    382a:	f0 85       	ldd	r31, Z+8	; 0x08
    382c:	e0 2d       	mov	r30, r0
    382e:	80 80       	ld	r8, Z
    3830:	91 80       	ldd	r9, Z+1	; 0x01
    3832:	a2 80       	ldd	r10, Z+2	; 0x02
    3834:	b3 80       	ldd	r11, Z+3	; 0x03
    3836:	c0 85       	ldd	r28, Z+8	; 0x08
    3838:	d1 85       	ldd	r29, Z+9	; 0x09
    383a:	8e 01       	movw	r16, r28
    383c:	0e 5f       	subi	r16, 0xFE	; 254
    383e:	1f 4f       	sbci	r17, 0xFF	; 255
    3840:	c8 01       	movw	r24, r16
    3842:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3846:	ed 89       	ldd	r30, Y+21	; 0x15
    3848:	fe 89       	ldd	r31, Y+22	; 0x16
    384a:	ce 01       	movw	r24, r28
    384c:	19 95       	eicall
    384e:	8a 89       	ldd	r24, Y+18	; 0x12
    3850:	81 30       	cpi	r24, 0x01	; 1
    3852:	29 f5       	brne	.+74     	; 0x389e <prvSampleTimeNow+0xc0>
    3854:	8e 85       	ldd	r24, Y+14	; 0x0e
    3856:	9f 85       	ldd	r25, Y+15	; 0x0f
    3858:	a8 89       	ldd	r26, Y+16	; 0x10
    385a:	b9 89       	ldd	r27, Y+17	; 0x11
    385c:	88 0d       	add	r24, r8
    385e:	99 1d       	adc	r25, r9
    3860:	aa 1d       	adc	r26, r10
    3862:	bb 1d       	adc	r27, r11
    3864:	88 16       	cp	r8, r24
    3866:	99 06       	cpc	r9, r25
    3868:	aa 06       	cpc	r10, r26
    386a:	bb 06       	cpc	r11, r27
    386c:	70 f4       	brcc	.+28     	; 0x388a <prvSampleTimeNow+0xac>
    386e:	8a 83       	std	Y+2, r24	; 0x02
    3870:	9b 83       	std	Y+3, r25	; 0x03
    3872:	ac 83       	std	Y+4, r26	; 0x04
    3874:	bd 83       	std	Y+5, r27	; 0x05
    3876:	db 87       	std	Y+11, r29	; 0x0b
    3878:	ca 87       	std	Y+10, r28	; 0x0a
    387a:	b8 01       	movw	r22, r16
    387c:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <pxCurrentTimerList>
    3880:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <pxCurrentTimerList+0x1>
    3884:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    3888:	0a c0       	rjmp	.+20     	; 0x389e <prvSampleTimeNow+0xc0>
    388a:	c1 2c       	mov	r12, r1
    388c:	d1 2c       	mov	r13, r1
    388e:	76 01       	movw	r14, r12
    3890:	00 e0       	ldi	r16, 0x00	; 0
    3892:	10 e0       	ldi	r17, 0x00	; 0
    3894:	a5 01       	movw	r20, r10
    3896:	94 01       	movw	r18, r8
    3898:	60 e0       	ldi	r22, 0x00	; 0
    389a:	ce 01       	movw	r24, r28
    389c:	42 df       	rcall	.-380    	; 0x3722 <xTimerGenericCommand>
    389e:	e0 91 f2 06 	lds	r30, 0x06F2	; 0x8006f2 <pxCurrentTimerList>
    38a2:	f0 91 f3 06 	lds	r31, 0x06F3	; 0x8006f3 <pxCurrentTimerList+0x1>
    38a6:	80 81       	ld	r24, Z
    38a8:	81 11       	cpse	r24, r1
    38aa:	be cf       	rjmp	.-132    	; 0x3828 <prvSampleTimeNow+0x4a>
    38ac:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <pxOverflowTimerList>
    38b0:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <pxOverflowTimerList+0x1>
    38b4:	90 93 f3 06 	sts	0x06F3, r25	; 0x8006f3 <pxCurrentTimerList+0x1>
    38b8:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <pxCurrentTimerList>
    38bc:	f0 93 f1 06 	sts	0x06F1, r31	; 0x8006f1 <pxOverflowTimerList+0x1>
    38c0:	e0 93 f0 06 	sts	0x06F0, r30	; 0x8006f0 <pxOverflowTimerList>
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	f1 01       	movw	r30, r2
    38c8:	80 83       	st	Z, r24
    38ca:	02 c0       	rjmp	.+4      	; 0x38d0 <prvSampleTimeNow+0xf2>
    38cc:	f1 01       	movw	r30, r2
    38ce:	10 82       	st	Z, r1
    38d0:	40 92 e8 06 	sts	0x06E8, r4	; 0x8006e8 <xLastTime.2378>
    38d4:	50 92 e9 06 	sts	0x06E9, r5	; 0x8006e9 <xLastTime.2378+0x1>
    38d8:	60 92 ea 06 	sts	0x06EA, r6	; 0x8006ea <xLastTime.2378+0x2>
    38dc:	70 92 eb 06 	sts	0x06EB, r7	; 0x8006eb <xLastTime.2378+0x3>
    38e0:	c3 01       	movw	r24, r6
    38e2:	b2 01       	movw	r22, r4
    38e4:	df 91       	pop	r29
    38e6:	cf 91       	pop	r28
    38e8:	1f 91       	pop	r17
    38ea:	0f 91       	pop	r16
    38ec:	ff 90       	pop	r15
    38ee:	ef 90       	pop	r14
    38f0:	df 90       	pop	r13
    38f2:	cf 90       	pop	r12
    38f4:	bf 90       	pop	r11
    38f6:	af 90       	pop	r10
    38f8:	9f 90       	pop	r9
    38fa:	8f 90       	pop	r8
    38fc:	7f 90       	pop	r7
    38fe:	6f 90       	pop	r6
    3900:	5f 90       	pop	r5
    3902:	4f 90       	pop	r4
    3904:	3f 90       	pop	r3
    3906:	2f 90       	pop	r2
    3908:	08 95       	ret

0000390a <prvTimerTask>:
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
    3912:	60 97       	sbiw	r28, 0x10	; 16
    3914:	0f b6       	in	r0, 0x3f	; 63
    3916:	f8 94       	cli
    3918:	de bf       	out	0x3e, r29	; 62
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	cd bf       	out	0x3d, r28	; 61
    391e:	ce 01       	movw	r24, r28
    3920:	01 96       	adiw	r24, 0x01	; 1
    3922:	9a 87       	std	Y+10, r25	; 0x0a
    3924:	89 87       	std	Y+9, r24	; 0x09
    3926:	81 2c       	mov	r8, r1
    3928:	91 2c       	mov	r9, r1
    392a:	a1 2c       	mov	r10, r1
    392c:	b1 2c       	mov	r11, r1
    392e:	69 84       	ldd	r6, Y+9	; 0x09
    3930:	7a 84       	ldd	r7, Y+10	; 0x0a
    3932:	e0 91 f2 06 	lds	r30, 0x06F2	; 0x8006f2 <pxCurrentTimerList>
    3936:	f0 91 f3 06 	lds	r31, 0x06F3	; 0x8006f3 <pxCurrentTimerList+0x1>
    393a:	80 81       	ld	r24, Z
    393c:	88 23       	and	r24, r24
    393e:	09 f4       	brne	.+2      	; 0x3942 <prvTimerTask+0x38>
    3940:	f2 c0       	rjmp	.+484    	; 0x3b26 <prvTimerTask+0x21c>
    3942:	07 80       	ldd	r0, Z+7	; 0x07
    3944:	f0 85       	ldd	r31, Z+8	; 0x08
    3946:	e0 2d       	mov	r30, r0
    3948:	20 80       	ld	r2, Z
    394a:	31 80       	ldd	r3, Z+1	; 0x01
    394c:	42 80       	ldd	r4, Z+2	; 0x02
    394e:	53 80       	ldd	r5, Z+3	; 0x03
    3950:	e2 d9       	rcall	.-3132   	; 0x2d16 <vTaskSuspendAll>
    3952:	ce 01       	movw	r24, r28
    3954:	01 96       	adiw	r24, 0x01	; 1
    3956:	43 df       	rcall	.-378    	; 0x37de <prvSampleTimeNow>
    3958:	6b 87       	std	Y+11, r22	; 0x0b
    395a:	7c 87       	std	Y+12, r23	; 0x0c
    395c:	8d 87       	std	Y+13, r24	; 0x0d
    395e:	9e 87       	std	Y+14, r25	; 0x0e
    3960:	89 81       	ldd	r24, Y+1	; 0x01
    3962:	81 11       	cpse	r24, r1
    3964:	5d c0       	rjmp	.+186    	; 0x3a20 <prvTimerTask+0x116>
    3966:	8b 85       	ldd	r24, Y+11	; 0x0b
    3968:	9c 85       	ldd	r25, Y+12	; 0x0c
    396a:	ad 85       	ldd	r26, Y+13	; 0x0d
    396c:	be 85       	ldd	r27, Y+14	; 0x0e
    396e:	82 15       	cp	r24, r2
    3970:	93 05       	cpc	r25, r3
    3972:	a4 05       	cpc	r26, r4
    3974:	b5 05       	cpc	r27, r5
    3976:	08 f4       	brcc	.+2      	; 0x397a <prvTimerTask+0x70>
    3978:	3c c0       	rjmp	.+120    	; 0x39f2 <prvTimerTask+0xe8>
    397a:	b6 da       	rcall	.-2708   	; 0x2ee8 <xTaskResumeAll>
    397c:	e0 91 f2 06 	lds	r30, 0x06F2	; 0x8006f2 <pxCurrentTimerList>
    3980:	f0 91 f3 06 	lds	r31, 0x06F3	; 0x8006f3 <pxCurrentTimerList+0x1>
    3984:	07 80       	ldd	r0, Z+7	; 0x07
    3986:	f0 85       	ldd	r31, Z+8	; 0x08
    3988:	e0 2d       	mov	r30, r0
    398a:	a0 85       	ldd	r26, Z+8	; 0x08
    398c:	b1 85       	ldd	r27, Z+9	; 0x09
    398e:	b8 8b       	std	Y+16, r27	; 0x10
    3990:	af 87       	std	Y+15, r26	; 0x0f
    3992:	cd 01       	movw	r24, r26
    3994:	02 96       	adiw	r24, 0x02	; 2
    3996:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    399a:	ef 85       	ldd	r30, Y+15	; 0x0f
    399c:	f8 89       	ldd	r31, Y+16	; 0x10
    399e:	82 89       	ldd	r24, Z+18	; 0x12
    39a0:	81 30       	cpi	r24, 0x01	; 1
    39a2:	f1 f4       	brne	.+60     	; 0x39e0 <prvTimerTask+0xd6>
    39a4:	46 85       	ldd	r20, Z+14	; 0x0e
    39a6:	57 85       	ldd	r21, Z+15	; 0x0f
    39a8:	60 89       	ldd	r22, Z+16	; 0x10
    39aa:	71 89       	ldd	r23, Z+17	; 0x11
    39ac:	42 0d       	add	r20, r2
    39ae:	53 1d       	adc	r21, r3
    39b0:	64 1d       	adc	r22, r4
    39b2:	75 1d       	adc	r23, r5
    39b4:	72 01       	movw	r14, r4
    39b6:	61 01       	movw	r12, r2
    39b8:	0b 85       	ldd	r16, Y+11	; 0x0b
    39ba:	1c 85       	ldd	r17, Y+12	; 0x0c
    39bc:	2d 85       	ldd	r18, Y+13	; 0x0d
    39be:	3e 85       	ldd	r19, Y+14	; 0x0e
    39c0:	cf 01       	movw	r24, r30
    39c2:	e6 dd       	rcall	.-1076   	; 0x3590 <prvInsertTimerInActiveList>
    39c4:	88 23       	and	r24, r24
    39c6:	61 f0       	breq	.+24     	; 0x39e0 <prvTimerTask+0xd6>
    39c8:	c8 2c       	mov	r12, r8
    39ca:	d9 2c       	mov	r13, r9
    39cc:	ea 2c       	mov	r14, r10
    39ce:	fb 2c       	mov	r15, r11
    39d0:	00 e0       	ldi	r16, 0x00	; 0
    39d2:	10 e0       	ldi	r17, 0x00	; 0
    39d4:	a2 01       	movw	r20, r4
    39d6:	91 01       	movw	r18, r2
    39d8:	60 e0       	ldi	r22, 0x00	; 0
    39da:	8f 85       	ldd	r24, Y+15	; 0x0f
    39dc:	98 89       	ldd	r25, Y+16	; 0x10
    39de:	a1 de       	rcall	.-702    	; 0x3722 <xTimerGenericCommand>
    39e0:	af 85       	ldd	r26, Y+15	; 0x0f
    39e2:	b8 89       	ldd	r27, Y+16	; 0x10
    39e4:	55 96       	adiw	r26, 0x15	; 21
    39e6:	ed 91       	ld	r30, X+
    39e8:	fc 91       	ld	r31, X
    39ea:	56 97       	sbiw	r26, 0x16	; 22
    39ec:	cd 01       	movw	r24, r26
    39ee:	19 95       	eicall
    39f0:	8b c0       	rjmp	.+278    	; 0x3b08 <prvTimerTask+0x1fe>
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	b2 01       	movw	r22, r4
    39f6:	a1 01       	movw	r20, r2
    39f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    39fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    39fc:	ad 85       	ldd	r26, Y+13	; 0x0d
    39fe:	be 85       	ldd	r27, Y+14	; 0x0e
    3a00:	48 1b       	sub	r20, r24
    3a02:	59 0b       	sbc	r21, r25
    3a04:	6a 0b       	sbc	r22, r26
    3a06:	7b 0b       	sbc	r23, r27
    3a08:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <xTimerQueue>
    3a0c:	90 91 ef 06 	lds	r25, 0x06EF	; 0x8006ef <xTimerQueue+0x1>
    3a10:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <vQueueWaitForMessageRestricted>
    3a14:	69 da       	rcall	.-2862   	; 0x2ee8 <xTaskResumeAll>
    3a16:	81 11       	cpse	r24, r1
    3a18:	77 c0       	rjmp	.+238    	; 0x3b08 <prvTimerTask+0x1fe>
    3a1a:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3a1e:	74 c0       	rjmp	.+232    	; 0x3b08 <prvTimerTask+0x1fe>
    3a20:	63 da       	rcall	.-2874   	; 0x2ee8 <xTaskResumeAll>
    3a22:	72 c0       	rjmp	.+228    	; 0x3b08 <prvTimerTask+0x1fe>
    3a24:	89 81       	ldd	r24, Y+1	; 0x01
    3a26:	88 23       	and	r24, r24
    3a28:	0c f4       	brge	.+2      	; 0x3a2c <prvTimerTask+0x122>
    3a2a:	6e c0       	rjmp	.+220    	; 0x3b08 <prvTimerTask+0x1fe>
    3a2c:	4e 80       	ldd	r4, Y+6	; 0x06
    3a2e:	5f 80       	ldd	r5, Y+7	; 0x07
    3a30:	d2 01       	movw	r26, r4
    3a32:	1c 96       	adiw	r26, 0x0c	; 12
    3a34:	8d 91       	ld	r24, X+
    3a36:	9c 91       	ld	r25, X
    3a38:	1d 97       	sbiw	r26, 0x0d	; 13
    3a3a:	89 2b       	or	r24, r25
    3a3c:	21 f0       	breq	.+8      	; 0x3a46 <prvTimerTask+0x13c>
    3a3e:	c2 01       	movw	r24, r4
    3a40:	02 96       	adiw	r24, 0x02	; 2
    3a42:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3a46:	ce 01       	movw	r24, r28
    3a48:	08 96       	adiw	r24, 0x08	; 8
    3a4a:	c9 de       	rcall	.-622    	; 0x37de <prvSampleTimeNow>
    3a4c:	8b 01       	movw	r16, r22
    3a4e:	9c 01       	movw	r18, r24
    3a50:	89 81       	ldd	r24, Y+1	; 0x01
    3a52:	08 2e       	mov	r0, r24
    3a54:	00 0c       	add	r0, r0
    3a56:	99 0b       	sbc	r25, r25
    3a58:	aa 0b       	sbc	r26, r26
    3a5a:	bb 0b       	sbc	r27, r27
    3a5c:	8a 30       	cpi	r24, 0x0A	; 10
    3a5e:	91 05       	cpc	r25, r1
    3a60:	08 f0       	brcs	.+2      	; 0x3a64 <prvTimerTask+0x15a>
    3a62:	52 c0       	rjmp	.+164    	; 0x3b08 <prvTimerTask+0x1fe>
    3a64:	fc 01       	movw	r30, r24
    3a66:	88 27       	eor	r24, r24
    3a68:	ee 56       	subi	r30, 0x6E	; 110
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a6e:	0c 94 e9 5a 	jmp	0xb5d2	; 0xb5d2 <__tablejump2__>
    3a72:	ca 80       	ldd	r12, Y+2	; 0x02
    3a74:	db 80       	ldd	r13, Y+3	; 0x03
    3a76:	ec 80       	ldd	r14, Y+4	; 0x04
    3a78:	fd 80       	ldd	r15, Y+5	; 0x05
    3a7a:	f2 01       	movw	r30, r4
    3a7c:	46 85       	ldd	r20, Z+14	; 0x0e
    3a7e:	57 85       	ldd	r21, Z+15	; 0x0f
    3a80:	60 89       	ldd	r22, Z+16	; 0x10
    3a82:	71 89       	ldd	r23, Z+17	; 0x11
    3a84:	4c 0d       	add	r20, r12
    3a86:	5d 1d       	adc	r21, r13
    3a88:	6e 1d       	adc	r22, r14
    3a8a:	7f 1d       	adc	r23, r15
    3a8c:	c2 01       	movw	r24, r4
    3a8e:	80 dd       	rcall	.-1280   	; 0x3590 <prvInsertTimerInActiveList>
    3a90:	88 23       	and	r24, r24
    3a92:	d1 f1       	breq	.+116    	; 0x3b08 <prvTimerTask+0x1fe>
    3a94:	d2 01       	movw	r26, r4
    3a96:	55 96       	adiw	r26, 0x15	; 21
    3a98:	ed 91       	ld	r30, X+
    3a9a:	fc 91       	ld	r31, X
    3a9c:	56 97       	sbiw	r26, 0x16	; 22
    3a9e:	c2 01       	movw	r24, r4
    3aa0:	19 95       	eicall
    3aa2:	f2 01       	movw	r30, r4
    3aa4:	82 89       	ldd	r24, Z+18	; 0x12
    3aa6:	81 30       	cpi	r24, 0x01	; 1
    3aa8:	79 f5       	brne	.+94     	; 0x3b08 <prvTimerTask+0x1fe>
    3aaa:	4a 81       	ldd	r20, Y+2	; 0x02
    3aac:	5b 81       	ldd	r21, Y+3	; 0x03
    3aae:	6c 81       	ldd	r22, Y+4	; 0x04
    3ab0:	7d 81       	ldd	r23, Y+5	; 0x05
    3ab2:	86 85       	ldd	r24, Z+14	; 0x0e
    3ab4:	97 85       	ldd	r25, Z+15	; 0x0f
    3ab6:	a0 89       	ldd	r26, Z+16	; 0x10
    3ab8:	b1 89       	ldd	r27, Z+17	; 0x11
    3aba:	9a 01       	movw	r18, r20
    3abc:	ab 01       	movw	r20, r22
    3abe:	28 0f       	add	r18, r24
    3ac0:	39 1f       	adc	r19, r25
    3ac2:	4a 1f       	adc	r20, r26
    3ac4:	5b 1f       	adc	r21, r27
    3ac6:	c8 2c       	mov	r12, r8
    3ac8:	d9 2c       	mov	r13, r9
    3aca:	ea 2c       	mov	r14, r10
    3acc:	fb 2c       	mov	r15, r11
    3ace:	00 e0       	ldi	r16, 0x00	; 0
    3ad0:	10 e0       	ldi	r17, 0x00	; 0
    3ad2:	60 e0       	ldi	r22, 0x00	; 0
    3ad4:	c2 01       	movw	r24, r4
    3ad6:	25 de       	rcall	.-950    	; 0x3722 <xTimerGenericCommand>
    3ad8:	17 c0       	rjmp	.+46     	; 0x3b08 <prvTimerTask+0x1fe>
    3ada:	4a 81       	ldd	r20, Y+2	; 0x02
    3adc:	5b 81       	ldd	r21, Y+3	; 0x03
    3ade:	6c 81       	ldd	r22, Y+4	; 0x04
    3ae0:	7d 81       	ldd	r23, Y+5	; 0x05
    3ae2:	d2 01       	movw	r26, r4
    3ae4:	1e 96       	adiw	r26, 0x0e	; 14
    3ae6:	4d 93       	st	X+, r20
    3ae8:	5d 93       	st	X+, r21
    3aea:	6d 93       	st	X+, r22
    3aec:	7c 93       	st	X, r23
    3aee:	51 97       	sbiw	r26, 0x11	; 17
    3af0:	40 0f       	add	r20, r16
    3af2:	51 1f       	adc	r21, r17
    3af4:	62 1f       	adc	r22, r18
    3af6:	73 1f       	adc	r23, r19
    3af8:	68 01       	movw	r12, r16
    3afa:	79 01       	movw	r14, r18
    3afc:	c2 01       	movw	r24, r4
    3afe:	48 dd       	rcall	.-1392   	; 0x3590 <prvInsertTimerInActiveList>
    3b00:	03 c0       	rjmp	.+6      	; 0x3b08 <prvTimerTask+0x1fe>
    3b02:	c2 01       	movw	r24, r4
    3b04:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vPortFree>
    3b08:	28 2d       	mov	r18, r8
    3b0a:	39 2d       	mov	r19, r9
    3b0c:	4a 2d       	mov	r20, r10
    3b0e:	5b 2d       	mov	r21, r11
    3b10:	66 2d       	mov	r22, r6
    3b12:	77 2d       	mov	r23, r7
    3b14:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <xTimerQueue>
    3b18:	90 91 ef 06 	lds	r25, 0x06EF	; 0x8006ef <xTimerQueue+0x1>
    3b1c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <xQueueReceive>
    3b20:	81 11       	cpse	r24, r1
    3b22:	80 cf       	rjmp	.-256    	; 0x3a24 <prvTimerTask+0x11a>
    3b24:	06 cf       	rjmp	.-500    	; 0x3932 <prvTimerTask+0x28>
    3b26:	f7 d8       	rcall	.-3602   	; 0x2d16 <vTaskSuspendAll>
    3b28:	ce 01       	movw	r24, r28
    3b2a:	01 96       	adiw	r24, 0x01	; 1
    3b2c:	58 de       	rcall	.-848    	; 0x37de <prvSampleTimeNow>
    3b2e:	6b 87       	std	Y+11, r22	; 0x0b
    3b30:	7c 87       	std	Y+12, r23	; 0x0c
    3b32:	8d 87       	std	Y+13, r24	; 0x0d
    3b34:	9e 87       	std	Y+14, r25	; 0x0e
    3b36:	89 81       	ldd	r24, Y+1	; 0x01
    3b38:	81 11       	cpse	r24, r1
    3b3a:	72 cf       	rjmp	.-284    	; 0x3a20 <prvTimerTask+0x116>
    3b3c:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxOverflowTimerList>
    3b40:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxOverflowTimerList+0x1>
    3b44:	80 81       	ld	r24, Z
    3b46:	21 e0       	ldi	r18, 0x01	; 1
    3b48:	81 11       	cpse	r24, r1
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	28 2c       	mov	r2, r8
    3b4e:	39 2c       	mov	r3, r9
    3b50:	4a 2c       	mov	r4, r10
    3b52:	5b 2c       	mov	r5, r11
    3b54:	4f cf       	rjmp	.-354    	; 0x39f4 <prvTimerTask+0xea>

00003b56 <xTimerIsTimerActive>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
    3b56:	fc 01       	movw	r30, r24
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
    3b58:	0f b6       	in	r0, 0x3f	; 63
    3b5a:	f8 94       	cli
    3b5c:	0f 92       	push	r0
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	24 85       	ldd	r18, Z+12	; 0x0c
    3b62:	35 85       	ldd	r19, Z+13	; 0x0d
    3b64:	23 2b       	or	r18, r19
    3b66:	09 f4       	brne	.+2      	; 0x3b6a <xTimerIsTimerActive+0x14>
    3b68:	80 e0       	ldi	r24, 0x00	; 0
	}
	taskEXIT_CRITICAL();
    3b6a:	0f 90       	pop	r0
    3b6c:	0f be       	out	0x3f, r0	; 63

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
    3b6e:	08 95       	ret

00003b70 <pvTimerGetTimerID>:
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
    3b70:	0f b6       	in	r0, 0x3f	; 63
    3b72:	f8 94       	cli
    3b74:	0f 92       	push	r0
	{
		pvReturn = pxTimer->pvTimerID;
    3b76:	fc 01       	movw	r30, r24
    3b78:	83 89       	ldd	r24, Z+19	; 0x13
    3b7a:	94 89       	ldd	r25, Z+20	; 0x14
	}
	taskEXIT_CRITICAL();
    3b7c:	0f 90       	pop	r0
    3b7e:	0f be       	out	0x3f, r0	; 63

	return pvReturn;
}
    3b80:	08 95       	ret

00003b82 <Defrost>:
{
	
while(1){
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
    3b82:	c2 e0       	ldi	r28, 0x02	; 2
    3b84:	d9 e0       	ldi	r29, 0x09	; 9
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Src_In<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3b86:	02 e6       	ldi	r16, 0x62	; 98
    3b88:	19 e0       	ldi	r17, 0x09	; 9
				if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
				else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3b8a:	0f 2e       	mov	r0, r31
    3b8c:	fe e3       	ldi	r31, 0x3E	; 62
    3b8e:	cf 2e       	mov	r12, r31
    3b90:	f2 e0       	ldi	r31, 0x02	; 2
    3b92:	df 2e       	mov	r13, r31
    3b94:	f0 2d       	mov	r31, r0
    3b96:	0f 2e       	mov	r0, r31
    3b98:	f0 ea       	ldi	r31, 0xA0	; 160
    3b9a:	ef 2e       	mov	r14, r31
    3b9c:	f7 e0       	ldi	r31, 0x07	; 7
    3b9e:	ff 2e       	mov	r15, r31
    3ba0:	f0 2d       	mov	r31, r0
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Src_In<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3ba2:	33 24       	eor	r3, r3
    3ba4:	33 94       	inc	r3
    3ba6:	0f 2e       	mov	r0, r31
    3ba8:	f3 e3       	ldi	r31, 0x33	; 51
    3baa:	8f 2e       	mov	r8, r31
    3bac:	f2 e0       	ldi	r31, 0x02	; 2
    3bae:	9f 2e       	mov	r9, r31
    3bb0:	f0 2d       	mov	r31, r0
while(1){
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
    3bb2:	0f 2e       	mov	r0, r31
    3bb4:	f3 e2       	ldi	r31, 0x23	; 35
    3bb6:	af 2e       	mov	r10, r31
    3bb8:	f2 e0       	ldi	r31, 0x02	; 2
    3bba:	bf 2e       	mov	r11, r31
    3bbc:	f0 2d       	mov	r31, r0
//////////////////////////////////////////////////
static void Defrost(void *pvParameters)
{
	
while(1){
			wdt_reset();
    3bbe:	a8 95       	wdr
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
    3bc0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bc2:	81 30       	cpi	r24, 0x01	; 1
    3bc4:	09 f0       	breq	.+2      	; 0x3bc8 <Defrost+0x46>
    3bc6:	cf c0       	rjmp	.+414    	; 0x3d66 <Defrost+0x1e4>
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
    3bc8:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <forsDefrost>
    3bcc:	81 30       	cpi	r24, 0x01	; 1
    3bce:	91 f4       	brne	.+36     	; 0x3bf4 <Defrost+0x72>
    3bd0:	be 01       	movw	r22, r28
    3bd2:	c8 01       	movw	r24, r16
    3bd4:	0e 94 c0 35 	call	0x6b80	; 0x6b80 <startDefrost>
    3bd8:	f8 01       	movw	r30, r16
    3bda:	31 86       	std	Z+9, r3	; 0x09
    3bdc:	10 92 0b 07 	sts	0x070B, r1	; 0x80070b <forsDefrost>
    3be0:	bf 92       	push	r11
    3be2:	af 92       	push	r10
    3be4:	ff 92       	push	r15
    3be6:	ef 92       	push	r14
    3be8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3bec:	0f 90       	pop	r0
    3bee:	0f 90       	pop	r0
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Src_In<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3bf4:	f8 01       	movw	r30, r16
    3bf6:	81 85       	ldd	r24, Z+9	; 0x09
    3bf8:	81 11       	cpse	r24, r1
    3bfa:	48 c0       	rjmp	.+144    	; 0x3c8c <Defrost+0x10a>
    3bfc:	92 d8       	rcall	.-3804   	; 0x2d22 <xTaskGetTickCount>
    3bfe:	40 90 e3 08 	lds	r4, 0x08E3	; 0x8008e3 <timeTillDef>
    3c02:	50 90 e4 08 	lds	r5, 0x08E4	; 0x8008e4 <timeTillDef+0x1>
    3c06:	60 90 e5 08 	lds	r6, 0x08E5	; 0x8008e5 <timeTillDef+0x2>
    3c0a:	70 90 e6 08 	lds	r7, 0x08E6	; 0x8008e6 <timeTillDef+0x3>
    3c0e:	9b 01       	movw	r18, r22
    3c10:	ac 01       	movw	r20, r24
    3c12:	24 19       	sub	r18, r4
    3c14:	35 09       	sbc	r19, r5
    3c16:	46 09       	sbc	r20, r6
    3c18:	57 09       	sbc	r21, r7
    3c1a:	29 01       	movw	r4, r18
    3c1c:	3a 01       	movw	r6, r20
    3c1e:	2a a1       	ldd	r18, Y+34	; 0x22
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	a0 e6       	ldi	r26, 0x60	; 96
    3c24:	ba ee       	ldi	r27, 0xEA	; 234
    3c26:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    3c2a:	64 15       	cp	r22, r4
    3c2c:	75 05       	cpc	r23, r5
    3c2e:	86 05       	cpc	r24, r6
    3c30:	97 05       	cpc	r25, r7
    3c32:	38 f5       	brcc	.+78     	; 0x3c82 <Defrost+0x100>
    3c34:	6a a5       	ldd	r22, Y+42	; 0x2a
    3c36:	7b a5       	ldd	r23, Y+43	; 0x2b
    3c38:	07 2e       	mov	r0, r23
    3c3a:	00 0c       	add	r0, r0
    3c3c:	88 0b       	sbc	r24, r24
    3c3e:	99 0b       	sbc	r25, r25
    3c40:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    3c44:	9b 01       	movw	r18, r22
    3c46:	ac 01       	movw	r20, r24
    3c48:	f8 01       	movw	r30, r16
    3c4a:	62 a9       	ldd	r22, Z+50	; 0x32
    3c4c:	73 a9       	ldd	r23, Z+51	; 0x33
    3c4e:	84 a9       	ldd	r24, Z+52	; 0x34
    3c50:	95 a9       	ldd	r25, Z+53	; 0x35
    3c52:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    3c56:	88 23       	and	r24, r24
    3c58:	a4 f4       	brge	.+40     	; 0x3c82 <Defrost+0x100>
    3c5a:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <forsDefrost>
    3c5e:	81 11       	cpse	r24, r1
    3c60:	10 c0       	rjmp	.+32     	; 0x3c82 <Defrost+0x100>
    3c62:	be 01       	movw	r22, r28
    3c64:	c8 01       	movw	r24, r16
    3c66:	0e 94 c0 35 	call	0x6b80	; 0x6b80 <startDefrost>
    3c6a:	f8 01       	movw	r30, r16
    3c6c:	31 86       	std	Z+9, r3	; 0x09
    3c6e:	9f 92       	push	r9
    3c70:	8f 92       	push	r8
    3c72:	ff 92       	push	r15
    3c74:	ef 92       	push	r14
    3c76:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3c7a:	0f 90       	pop	r0
    3c7c:	0f 90       	pop	r0
    3c7e:	0f 90       	pop	r0
    3c80:	0f 90       	pop	r0
				if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3c82:	f8 01       	movw	r30, r16
    3c84:	81 85       	ldd	r24, Z+9	; 0x09
    3c86:	88 23       	and	r24, r24
    3c88:	09 f4       	brne	.+2      	; 0x3c8c <Defrost+0x10a>
    3c8a:	6d c0       	rjmp	.+218    	; 0x3d66 <Defrost+0x1e4>
    3c8c:	4a d8       	rcall	.-3948   	; 0x2d22 <xTaskGetTickCount>
    3c8e:	40 90 e3 08 	lds	r4, 0x08E3	; 0x8008e3 <timeTillDef>
    3c92:	50 90 e4 08 	lds	r5, 0x08E4	; 0x8008e4 <timeTillDef+0x1>
    3c96:	60 90 e5 08 	lds	r6, 0x08E5	; 0x8008e5 <timeTillDef+0x2>
    3c9a:	70 90 e6 08 	lds	r7, 0x08E6	; 0x8008e6 <timeTillDef+0x3>
    3c9e:	9b 01       	movw	r18, r22
    3ca0:	ac 01       	movw	r20, r24
    3ca2:	24 19       	sub	r18, r4
    3ca4:	35 09       	sbc	r19, r5
    3ca6:	46 09       	sbc	r20, r6
    3ca8:	57 09       	sbc	r21, r7
    3caa:	29 01       	movw	r4, r18
    3cac:	3a 01       	movw	r6, r20
    3cae:	29 a1       	ldd	r18, Y+33	; 0x21
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	a0 e6       	ldi	r26, 0x60	; 96
    3cb4:	ba ee       	ldi	r27, 0xEA	; 234
    3cb6:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    3cba:	64 15       	cp	r22, r4
    3cbc:	75 05       	cpc	r23, r5
    3cbe:	86 05       	cpc	r24, r6
    3cc0:	97 05       	cpc	r25, r7
    3cc2:	f8 f4       	brcc	.+62     	; 0x3d02 <Defrost+0x180>
    3cc4:	f8 01       	movw	r30, r16
    3cc6:	82 85       	ldd	r24, Z+10	; 0x0a
    3cc8:	88 23       	and	r24, r24
    3cca:	d9 f0       	breq	.+54     	; 0x3d02 <Defrost+0x180>
    3ccc:	be 01       	movw	r22, r28
    3cce:	c8 01       	movw	r24, r16
    3cd0:	0e 94 db 35 	call	0x6bb6	; 0x6bb6 <stopDefrost>
    3cd4:	f8 01       	movw	r30, r16
    3cd6:	11 86       	std	Z+9, r1	; 0x09
    3cd8:	12 86       	std	Z+10, r1	; 0x0a
    3cda:	23 d8       	rcall	.-4026   	; 0x2d22 <xTaskGetTickCount>
    3cdc:	60 93 e3 08 	sts	0x08E3, r22	; 0x8008e3 <timeTillDef>
    3ce0:	70 93 e4 08 	sts	0x08E4, r23	; 0x8008e4 <timeTillDef+0x1>
    3ce4:	80 93 e5 08 	sts	0x08E5, r24	; 0x8008e5 <timeTillDef+0x2>
    3ce8:	90 93 e6 08 	sts	0x08E6, r25	; 0x8008e6 <timeTillDef+0x3>
    3cec:	df 92       	push	r13
    3cee:	cf 92       	push	r12
    3cf0:	ff 92       	push	r15
    3cf2:	ef 92       	push	r14
    3cf4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3cf8:	0f 90       	pop	r0
    3cfa:	0f 90       	pop	r0
    3cfc:	0f 90       	pop	r0
    3cfe:	0f 90       	pop	r0
    3d00:	32 c0       	rjmp	.+100    	; 0x3d66 <Defrost+0x1e4>
				else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3d02:	f8 01       	movw	r30, r16
    3d04:	81 85       	ldd	r24, Z+9	; 0x09
    3d06:	88 23       	and	r24, r24
    3d08:	71 f1       	breq	.+92     	; 0x3d66 <Defrost+0x1e4>
    3d0a:	6c a5       	ldd	r22, Y+44	; 0x2c
    3d0c:	7d a5       	ldd	r23, Y+45	; 0x2d
    3d0e:	07 2e       	mov	r0, r23
    3d10:	00 0c       	add	r0, r0
    3d12:	88 0b       	sbc	r24, r24
    3d14:	99 0b       	sbc	r25, r25
    3d16:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    3d1a:	9b 01       	movw	r18, r22
    3d1c:	ac 01       	movw	r20, r24
    3d1e:	f8 01       	movw	r30, r16
    3d20:	62 a9       	ldd	r22, Z+50	; 0x32
    3d22:	73 a9       	ldd	r23, Z+51	; 0x33
    3d24:	84 a9       	ldd	r24, Z+52	; 0x34
    3d26:	95 a9       	ldd	r25, Z+53	; 0x35
    3d28:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    3d2c:	18 16       	cp	r1, r24
    3d2e:	dc f4       	brge	.+54     	; 0x3d66 <Defrost+0x1e4>
    3d30:	be 01       	movw	r22, r28
    3d32:	c8 01       	movw	r24, r16
    3d34:	0e 94 db 35 	call	0x6bb6	; 0x6bb6 <stopDefrost>
    3d38:	f8 01       	movw	r30, r16
    3d3a:	11 86       	std	Z+9, r1	; 0x09
    3d3c:	12 86       	std	Z+10, r1	; 0x0a
    3d3e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3d42:	60 93 e3 08 	sts	0x08E3, r22	; 0x8008e3 <timeTillDef>
    3d46:	70 93 e4 08 	sts	0x08E4, r23	; 0x8008e4 <timeTillDef+0x1>
    3d4a:	80 93 e5 08 	sts	0x08E5, r24	; 0x8008e5 <timeTillDef+0x2>
    3d4e:	90 93 e6 08 	sts	0x08E6, r25	; 0x8008e6 <timeTillDef+0x3>
    3d52:	df 92       	push	r13
    3d54:	cf 92       	push	r12
    3d56:	ff 92       	push	r15
    3d58:	ef 92       	push	r14
    3d5a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3d5e:	0f 90       	pop	r0
    3d60:	0f 90       	pop	r0
    3d62:	0f 90       	pop	r0
    3d64:	0f 90       	pop	r0
	
			}
			//xSerialxPrintf(&xSerial3Port,"defrost\r\n");
vTaskDelay(2000);
    3d66:	60 ed       	ldi	r22, 0xD0	; 208
    3d68:	77 e0       	ldi	r23, 0x07	; 7
    3d6a:	80 e0       	ldi	r24, 0x00	; 0
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	38 d9       	rcall	.-3472   	; 0x2fe0 <vTaskDelay>
//xSerialxPrintf(&xSerial3Port,"Stack_0 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
//portYIELD();			
}
    3d70:	26 cf       	rjmp	.-436    	; 0x3bbe <Defrost+0x3c>

00003d72 <System_2>:
ReadSensors(&Comp_2);
portEXIT_CRITICAL();
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3d72:	c2 e0       	ldi	r28, 0x02	; 2
    3d74:	d9 e0       	ldi	r29, 0x09	; 9
		{
			_err2=Check_Erors(&Comp_2,&EEpromData);
		
			if(_err2>0 && Comp_1.error==0){Comp_2.error=_err2;Comp_2.countError++;Comp_2.Steps=0;Comp_Stop(&Comp_2);}//if(Comp_2.countError==3)EEpromData.power=0;
			mod_pump(&Comp_2,&EEpromData);
	       if(Comp_2.checkTrv && xTaskGetTickCount()-countTrvTime_2>10000 ){Comp_2.Steps = Fuzzy(&Comp_2,EEpromData.trv_corection_2);countTrvTime_2=xTaskGetTickCount();}
    3d76:	0f 2e       	mov	r0, r31
    3d78:	fa e4       	ldi	r31, 0x4A	; 74
    3d7a:	4f 2e       	mov	r4, r31
    3d7c:	f9 e0       	ldi	r31, 0x09	; 9
    3d7e:	5f 2e       	mov	r5, r31
    3d80:	f0 2d       	mov	r31, r0
    3d82:	0f 2e       	mov	r0, r31
    3d84:	f0 e5       	ldi	r31, 0x50	; 80
    3d86:	8f 2e       	mov	r8, r31
    3d88:	fa e0       	ldi	r31, 0x0A	; 10
    3d8a:	9f 2e       	mov	r9, r31
    3d8c:	f0 2d       	mov	r31, r0
	
		if(Comp_2.suply && Comp_2.countError<3)
		{
			_err2=Check_Erors(&Comp_2,&EEpromData);
		
			if(_err2>0 && Comp_1.error==0){Comp_2.error=_err2;Comp_2.countError++;Comp_2.Steps=0;Comp_Stop(&Comp_2);}//if(Comp_2.countError==3)EEpromData.power=0;
    3d8e:	0f 2e       	mov	r0, r31
    3d90:	fe ec       	ldi	r31, 0xCE	; 206
    3d92:	af 2e       	mov	r10, r31
    3d94:	f9 e0       	ldi	r31, 0x09	; 9
    3d96:	bf 2e       	mov	r11, r31
    3d98:	f0 2d       	mov	r31, r0
    3d9a:	0f 2e       	mov	r0, r31
    3d9c:	f4 e5       	ldi	r31, 0x54	; 84
    3d9e:	cf 2e       	mov	r12, r31
    3da0:	fa e0       	ldi	r31, 0x0A	; 10
    3da2:	df 2e       	mov	r13, r31
    3da4:	f0 2d       	mov	r31, r0
portEXIT_CRITICAL();
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
		else if(EEpromData.power==0 && Comp_2.suply){Comp_2.suply=false;Comp_2.error=0;_err2=0;Comp_2.countError=0; xSerialxPrintf(&xSerial3Port,"OFF_System_2\r\n");stopTrvTimer(&Comp_2);Comp_Stop(&Comp_2);}
    3da6:	0f 2e       	mov	r0, r31
    3da8:	f6 e5       	ldi	r31, 0x56	; 86
    3daa:	ef 2e       	mov	r14, r31
    3dac:	f2 e0       	ldi	r31, 0x02	; 2
    3dae:	ff 2e       	mov	r15, r31
    3db0:	f0 2d       	mov	r31, r0
    3db2:	00 ea       	ldi	r16, 0xA0	; 160
    3db4:	17 e0       	ldi	r17, 0x07	; 7
ReadSensors(&Comp_2);
portEXIT_CRITICAL();
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3db6:	33 24       	eor	r3, r3
    3db8:	33 94       	inc	r3
    3dba:	0f 2e       	mov	r0, r31
    3dbc:	f8 e4       	ldi	r31, 0x48	; 72
    3dbe:	6f 2e       	mov	r6, r31
    3dc0:	f2 e0       	ldi	r31, 0x02	; 2
    3dc2:	7f 2e       	mov	r7, r31
    3dc4:	f0 2d       	mov	r31, r0
	(void) pvParameters;

	while (1)
	{
		
    	wdt_reset();
    3dc6:	a8 95       	wdr
		//xSerialxPrintf(&xSerial3Port,"System_2_task\r\n");
vTaskSuspend( xHandleFirst );				
    3dc8:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <xHandleFirst>
    3dcc:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <xHandleFirst+0x1>
    3dd0:	92 d9       	rcall	.-3292   	; 0x30f6 <vTaskSuspend>
portENTER_CRITICAL();
    3dd2:	0f b6       	in	r0, 0x3f	; 63
    3dd4:	f8 94       	cli
    3dd6:	0f 92       	push	r0
ReadSensors(&Comp_2);
    3dd8:	88 ee       	ldi	r24, 0xE8	; 232
    3dda:	99 e0       	ldi	r25, 0x09	; 9
    3ddc:	0e 94 f2 4d 	call	0x9be4	; 0x9be4 <ReadSensors>
portEXIT_CRITICAL();
    3de0:	0f 90       	pop	r0
    3de2:	0f be       	out	0x3f, r0	; 63
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
    3de4:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <xHandleFirst>
    3de8:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <xHandleFirst+0x1>
    3dec:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <vTaskResume>
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3df0:	8c a1       	ldd	r24, Y+36	; 0x24
    3df2:	81 30       	cpi	r24, 0x01	; 1
    3df4:	a9 f4       	brne	.+42     	; 0x3e20 <System_2+0xae>
    3df6:	80 91 ee 09 	lds	r24, 0x09EE	; 0x8009ee <Comp_2+0x6>
    3dfa:	81 11       	cpse	r24, r1
    3dfc:	3a c0       	rjmp	.+116    	; 0x3e72 <System_2+0x100>
    3dfe:	80 91 e8 09 	lds	r24, 0x09E8	; 0x8009e8 <Comp_2>
    3e02:	81 11       	cpse	r24, r1
    3e04:	8c c0       	rjmp	.+280    	; 0x3f1e <System_2+0x1ac>
    3e06:	30 92 ee 09 	sts	0x09EE, r3	; 0x8009ee <Comp_2+0x6>
    3e0a:	7f 92       	push	r7
    3e0c:	6f 92       	push	r6
    3e0e:	1f 93       	push	r17
    3e10:	0f 93       	push	r16
    3e12:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3e16:	0f 90       	pop	r0
    3e18:	0f 90       	pop	r0
    3e1a:	0f 90       	pop	r0
    3e1c:	0f 90       	pop	r0
    3e1e:	24 c0       	rjmp	.+72     	; 0x3e68 <System_2+0xf6>
		else if(EEpromData.power==0 && Comp_2.suply){Comp_2.suply=false;Comp_2.error=0;_err2=0;Comp_2.countError=0; xSerialxPrintf(&xSerial3Port,"OFF_System_2\r\n");stopTrvTimer(&Comp_2);Comp_Stop(&Comp_2);}
    3e20:	81 11       	cpse	r24, r1
    3e22:	22 c0       	rjmp	.+68     	; 0x3e68 <System_2+0xf6>
    3e24:	80 91 ee 09 	lds	r24, 0x09EE	; 0x8009ee <Comp_2+0x6>
    3e28:	88 23       	and	r24, r24
    3e2a:	09 f4       	brne	.+2      	; 0x3e2e <System_2+0xbc>
    3e2c:	78 c0       	rjmp	.+240    	; 0x3f1e <System_2+0x1ac>
    3e2e:	e8 ee       	ldi	r30, 0xE8	; 232
    3e30:	f9 e0       	ldi	r31, 0x09	; 9
    3e32:	16 82       	std	Z+6, r1	; 0x06
    3e34:	d6 01       	movw	r26, r12
    3e36:	1d 92       	st	X+, r1
    3e38:	1c 92       	st	X, r1
    3e3a:	10 92 a0 0a 	sts	0x0AA0, r1	; 0x800aa0 <_err2+0x1>
    3e3e:	10 92 9f 0a 	sts	0x0A9F, r1	; 0x800a9f <_err2>
    3e42:	11 8a       	std	Z+17, r1	; 0x11
    3e44:	ff 92       	push	r15
    3e46:	ef 92       	push	r14
    3e48:	1f 93       	push	r17
    3e4a:	0f 93       	push	r16
    3e4c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3e50:	88 ee       	ldi	r24, 0xE8	; 232
    3e52:	99 e0       	ldi	r25, 0x09	; 9
    3e54:	0e 94 72 52 	call	0xa4e4	; 0xa4e4 <stopTrvTimer>
    3e58:	88 ee       	ldi	r24, 0xE8	; 232
    3e5a:	99 e0       	ldi	r25, 0x09	; 9
    3e5c:	0e 94 49 39 	call	0x7292	; 0x7292 <Comp_Stop>
    3e60:	0f 90       	pop	r0
    3e62:	0f 90       	pop	r0
    3e64:	0f 90       	pop	r0
    3e66:	0f 90       	pop	r0
	
		if(Comp_2.suply && Comp_2.countError<3)
    3e68:	80 91 ee 09 	lds	r24, 0x09EE	; 0x8009ee <Comp_2+0x6>
    3e6c:	88 23       	and	r24, r24
    3e6e:	09 f4       	brne	.+2      	; 0x3e72 <System_2+0x100>
    3e70:	56 c0       	rjmp	.+172    	; 0x3f1e <System_2+0x1ac>
    3e72:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <Comp_2+0x11>
    3e76:	83 30       	cpi	r24, 0x03	; 3
    3e78:	08 f0       	brcs	.+2      	; 0x3e7c <System_2+0x10a>
    3e7a:	51 c0       	rjmp	.+162    	; 0x3f1e <System_2+0x1ac>
		{
			_err2=Check_Erors(&Comp_2,&EEpromData);
    3e7c:	be 01       	movw	r22, r28
    3e7e:	88 ee       	ldi	r24, 0xE8	; 232
    3e80:	99 e0       	ldi	r25, 0x09	; 9
    3e82:	39 d4       	rcall	.+2162   	; 0x46f6 <Check_Erors>
    3e84:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <_err2+0x1>
    3e88:	80 93 9f 0a 	sts	0x0A9F, r24	; 0x800a9f <_err2>
		
			if(_err2>0 && Comp_1.error==0){Comp_2.error=_err2;Comp_2.countError++;Comp_2.Steps=0;Comp_Stop(&Comp_2);}//if(Comp_2.countError==3)EEpromData.power=0;
    3e8c:	18 16       	cp	r1, r24
    3e8e:	19 06       	cpc	r1, r25
    3e90:	a4 f4       	brge	.+40     	; 0x3eba <System_2+0x148>
    3e92:	f5 01       	movw	r30, r10
    3e94:	20 81       	ld	r18, Z
    3e96:	31 81       	ldd	r19, Z+1	; 0x01
    3e98:	23 2b       	or	r18, r19
    3e9a:	79 f4       	brne	.+30     	; 0x3eba <System_2+0x148>
    3e9c:	e8 ee       	ldi	r30, 0xE8	; 232
    3e9e:	f9 e0       	ldi	r31, 0x09	; 9
    3ea0:	d6 01       	movw	r26, r12
    3ea2:	8d 93       	st	X+, r24
    3ea4:	9c 93       	st	X, r25
    3ea6:	81 89       	ldd	r24, Z+17	; 0x11
    3ea8:	8f 5f       	subi	r24, 0xFF	; 255
    3eaa:	81 8b       	std	Z+17, r24	; 0x11
    3eac:	f4 01       	movw	r30, r8
    3eae:	11 82       	std	Z+1, r1	; 0x01
    3eb0:	10 82       	st	Z, r1
    3eb2:	88 ee       	ldi	r24, 0xE8	; 232
    3eb4:	99 e0       	ldi	r25, 0x09	; 9
    3eb6:	0e 94 49 39 	call	0x7292	; 0x7292 <Comp_Stop>
			mod_pump(&Comp_2,&EEpromData);
    3eba:	be 01       	movw	r22, r28
    3ebc:	88 ee       	ldi	r24, 0xE8	; 232
    3ebe:	99 e0       	ldi	r25, 0x09	; 9
    3ec0:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <mod_pump>
	       if(Comp_2.checkTrv && xTaskGetTickCount()-countTrvTime_2>10000 ){Comp_2.Steps = Fuzzy(&Comp_2,EEpromData.trv_corection_2);countTrvTime_2=xTaskGetTickCount();}
    3ec4:	80 91 e9 09 	lds	r24, 0x09E9	; 0x8009e9 <Comp_2+0x1>
    3ec8:	88 23       	and	r24, r24
    3eca:	49 f1       	breq	.+82     	; 0x3f1e <System_2+0x1ac>
    3ecc:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3ed0:	20 91 0f 07 	lds	r18, 0x070F	; 0x80070f <countTrvTime_2>
    3ed4:	30 91 10 07 	lds	r19, 0x0710	; 0x800710 <countTrvTime_2+0x1>
    3ed8:	40 91 11 07 	lds	r20, 0x0711	; 0x800711 <countTrvTime_2+0x2>
    3edc:	50 91 12 07 	lds	r21, 0x0712	; 0x800712 <countTrvTime_2+0x3>
    3ee0:	dc 01       	movw	r26, r24
    3ee2:	cb 01       	movw	r24, r22
    3ee4:	82 1b       	sub	r24, r18
    3ee6:	93 0b       	sbc	r25, r19
    3ee8:	a4 0b       	sbc	r26, r20
    3eea:	b5 0b       	sbc	r27, r21
    3eec:	81 31       	cpi	r24, 0x11	; 17
    3eee:	97 42       	sbci	r25, 0x27	; 39
    3ef0:	a1 05       	cpc	r26, r1
    3ef2:	b1 05       	cpc	r27, r1
    3ef4:	a0 f0       	brcs	.+40     	; 0x3f1e <System_2+0x1ac>
    3ef6:	d2 01       	movw	r26, r4
    3ef8:	6d 91       	ld	r22, X+
    3efa:	7c 91       	ld	r23, X
    3efc:	88 ee       	ldi	r24, 0xE8	; 232
    3efe:	99 e0       	ldi	r25, 0x09	; 9
    3f00:	0e 94 c1 52 	call	0xa582	; 0xa582 <Fuzzy>
    3f04:	f4 01       	movw	r30, r8
    3f06:	91 83       	std	Z+1, r25	; 0x01
    3f08:	80 83       	st	Z, r24
    3f0a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3f0e:	60 93 0f 07 	sts	0x070F, r22	; 0x80070f <countTrvTime_2>
    3f12:	70 93 10 07 	sts	0x0710, r23	; 0x800710 <countTrvTime_2+0x1>
    3f16:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <countTrvTime_2+0x2>
    3f1a:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <countTrvTime_2+0x3>
		}

		vTaskDelay(1000);
    3f1e:	68 ee       	ldi	r22, 0xE8	; 232
    3f20:	73 e0       	ldi	r23, 0x03	; 3
    3f22:	80 e0       	ldi	r24, 0x00	; 0
    3f24:	90 e0       	ldi	r25, 0x00	; 0
    3f26:	5c d8       	rcall	.-3912   	; 0x2fe0 <vTaskDelay>
		//xSerialxPrintf(&xSerial3Port,"Stack_2 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
		//portYIELD();
		//xSerialxPrintf(&xSerial3Port,"Stack2 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
	}
    3f28:	4e cf       	rjmp	.-356    	; 0x3dc6 <System_2+0x54>

00003f2a <System_1>:
portENTER_CRITICAL();
ReadSensors(&Comp_1);
portEXIT_CRITICAL();
//EEpromData.AireToWater==1 &&

		if(EEpromData.NombComp==2 )
    3f2a:	c2 e0       	ldi	r28, 0x02	; 2
    3f2c:	d9 e0       	ldi	r29, 0x09	; 9
			vTaskResume( xHandleSecond );
			stop_second=false;
			
		}
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
    3f2e:	77 24       	eor	r7, r7
    3f30:	73 94       	inc	r7
			
			}
			
			if(!init_system){_err1=Check_Erors(&Comp_1,&EEpromData);ADE7758_resetStatus();} else init_system=false;
				
			if(_err1>0 && Comp_1.error==0){Comp_1.error=_err1;Comp_1.countError++;Comp_1.Steps=0;Comp_Stop(&Comp_1);xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);}//
    3f32:	0f 2e       	mov	r0, r31
    3f34:	fe ec       	ldi	r31, 0xCE	; 206
    3f36:	ef 2e       	mov	r14, r31
    3f38:	f9 e0       	ldi	r31, 0x09	; 9
    3f3a:	ff 2e       	mov	r15, r31
    3f3c:	f0 2d       	mov	r31, r0
    3f3e:	0f 2e       	mov	r0, r31
    3f40:	f2 e8       	ldi	r31, 0x82	; 130
    3f42:	af 2e       	mov	r10, r31
    3f44:	f2 e0       	ldi	r31, 0x02	; 2
    3f46:	bf 2e       	mov	r11, r31
    3f48:	f0 2d       	mov	r31, r0
    3f4a:	00 ea       	ldi	r16, 0xA0	; 160
    3f4c:	17 e0       	ldi	r17, 0x07	; 7
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",xTaskGetSchedulerState());
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
		else if(EEpromData.power==0 && Comp_1.suply){Comp_1.suply=false;PORTA &= 0x0;Comp_1.error=0;_err1=0;Comp_1.countError=0;xSerialxPrintf(&xSerial3Port,"OFF_System_1\r\n"); stopTrvTimer(&Comp_1);Comp_Stop(&Comp_1);}
    3f4e:	0f 2e       	mov	r0, r31
    3f50:	f3 e7       	ldi	r31, 0x73	; 115
    3f52:	cf 2e       	mov	r12, r31
    3f54:	f2 e0       	ldi	r31, 0x02	; 2
    3f56:	df 2e       	mov	r13, r31
    3f58:	f0 2d       	mov	r31, r0
		}
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",xTaskGetSchedulerState());
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
    3f5a:	0f 2e       	mov	r0, r31
    3f5c:	f5 e6       	ldi	r31, 0x65	; 101
    3f5e:	8f 2e       	mov	r8, r31
    3f60:	f2 e0       	ldi	r31, 0x02	; 2
    3f62:	9f 2e       	mov	r9, r31
    3f64:	f0 2d       	mov	r31, r0
	
	
	while (1)
	{

		wdt_reset();
    3f66:	a8 95       	wdr
		//xSerialxPrintf(&xSerial3Port,"System_1_task\r\n");
vTaskSuspend( xHandleSecond );		
    3f68:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <xHandleSecond>
    3f6c:	90 91 18 07 	lds	r25, 0x0718	; 0x800718 <xHandleSecond+0x1>
    3f70:	c2 d8       	rcall	.-3708   	; 0x30f6 <vTaskSuspend>
portENTER_CRITICAL();
    3f72:	0f b6       	in	r0, 0x3f	; 63
    3f74:	f8 94       	cli
    3f76:	0f 92       	push	r0
ReadSensors(&Comp_1);
    3f78:	82 e6       	ldi	r24, 0x62	; 98
    3f7a:	99 e0       	ldi	r25, 0x09	; 9
    3f7c:	0e 94 f2 4d 	call	0x9be4	; 0x9be4 <ReadSensors>
portEXIT_CRITICAL();
    3f80:	0f 90       	pop	r0
    3f82:	0f be       	out	0x3f, r0	; 63
//EEpromData.AireToWater==1 &&

		if(EEpromData.NombComp==2 )
    3f84:	88 a1       	ldd	r24, Y+32	; 0x20
    3f86:	82 30       	cpi	r24, 0x02	; 2
    3f88:	61 f4       	brne	.+24     	; 0x3fa2 <System_1+0x78>
		{
			vTaskResume( xHandleSecond );
    3f8a:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <xHandleSecond>
    3f8e:	90 91 18 07 	lds	r25, 0x0718	; 0x800718 <xHandleSecond+0x1>
    3f92:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <vTaskResume>
			stop_second=false;
    3f96:	10 92 b0 0a 	sts	0x0AB0, r1	; 0x800ab0 <stop_second>
			
		}
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
    3f9a:	88 a1       	ldd	r24, Y+32	; 0x20
    3f9c:	81 30       	cpi	r24, 0x01	; 1
    3f9e:	69 f4       	brne	.+26     	; 0x3fba <System_1+0x90>
    3fa0:	06 c0       	rjmp	.+12     	; 0x3fae <System_1+0x84>
    3fa2:	81 30       	cpi	r24, 0x01	; 1
    3fa4:	51 f4       	brne	.+20     	; 0x3fba <System_1+0x90>
    3fa6:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <stop_second>
    3faa:	81 11       	cpse	r24, r1
    3fac:	06 c0       	rjmp	.+12     	; 0x3fba <System_1+0x90>
    3fae:	70 92 b0 0a 	sts	0x0AB0, r7	; 0x800ab0 <stop_second>
    3fb2:	88 ee       	ldi	r24, 0xE8	; 232
    3fb4:	99 e0       	ldi	r25, 0x09	; 9
    3fb6:	0e 94 49 39 	call	0x7292	; 0x7292 <Comp_Stop>
//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",xTaskGetSchedulerState());
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
    3fba:	8c a1       	ldd	r24, Y+36	; 0x24
    3fbc:	81 30       	cpi	r24, 0x01	; 1
    3fbe:	f9 f4       	brne	.+62     	; 0x3ffe <System_1+0xd4>
    3fc0:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <Comp_1+0x6>
    3fc4:	81 11       	cpse	r24, r1
    3fc6:	46 c0       	rjmp	.+140    	; 0x4054 <System_1+0x12a>
    3fc8:	80 91 62 09 	lds	r24, 0x0962	; 0x800962 <Comp_1>
    3fcc:	81 11       	cpse	r24, r1
    3fce:	9e c1       	rjmp	.+828    	; 0x430c <System_1+0x3e2>
    3fd0:	70 92 68 09 	sts	0x0968, r7	; 0x800968 <Comp_1+0x6>
    3fd4:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3fd8:	60 93 e3 08 	sts	0x08E3, r22	; 0x8008e3 <timeTillDef>
    3fdc:	70 93 e4 08 	sts	0x08E4, r23	; 0x8008e4 <timeTillDef+0x1>
    3fe0:	80 93 e5 08 	sts	0x08E5, r24	; 0x8008e5 <timeTillDef+0x2>
    3fe4:	90 93 e6 08 	sts	0x08E6, r25	; 0x8008e6 <timeTillDef+0x3>
    3fe8:	9f 92       	push	r9
    3fea:	8f 92       	push	r8
    3fec:	1f 93       	push	r17
    3fee:	0f 93       	push	r16
    3ff0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3ff4:	0f 90       	pop	r0
    3ff6:	0f 90       	pop	r0
    3ff8:	0f 90       	pop	r0
    3ffa:	0f 90       	pop	r0
    3ffc:	26 c0       	rjmp	.+76     	; 0x404a <System_1+0x120>
		else if(EEpromData.power==0 && Comp_1.suply){Comp_1.suply=false;PORTA &= 0x0;Comp_1.error=0;_err1=0;Comp_1.countError=0;xSerialxPrintf(&xSerial3Port,"OFF_System_1\r\n"); stopTrvTimer(&Comp_1);Comp_Stop(&Comp_1);}
    3ffe:	81 11       	cpse	r24, r1
    4000:	24 c0       	rjmp	.+72     	; 0x404a <System_1+0x120>
    4002:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <Comp_1+0x6>
    4006:	88 23       	and	r24, r24
    4008:	09 f4       	brne	.+2      	; 0x400c <System_1+0xe2>
    400a:	80 c1       	rjmp	.+768    	; 0x430c <System_1+0x3e2>
    400c:	e2 e6       	ldi	r30, 0x62	; 98
    400e:	f9 e0       	ldi	r31, 0x09	; 9
    4010:	16 82       	std	Z+6, r1	; 0x06
    4012:	82 b1       	in	r24, 0x02	; 2
    4014:	12 b8       	out	0x02, r1	; 2
    4016:	d7 01       	movw	r26, r14
    4018:	1d 92       	st	X+, r1
    401a:	1c 92       	st	X, r1
    401c:	10 92 6d 0a 	sts	0x0A6D, r1	; 0x800a6d <_err1+0x1>
    4020:	10 92 6c 0a 	sts	0x0A6C, r1	; 0x800a6c <_err1>
    4024:	11 8a       	std	Z+17, r1	; 0x11
    4026:	df 92       	push	r13
    4028:	cf 92       	push	r12
    402a:	1f 93       	push	r17
    402c:	0f 93       	push	r16
    402e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    4032:	82 e6       	ldi	r24, 0x62	; 98
    4034:	99 e0       	ldi	r25, 0x09	; 9
    4036:	0e 94 72 52 	call	0xa4e4	; 0xa4e4 <stopTrvTimer>
    403a:	82 e6       	ldi	r24, 0x62	; 98
    403c:	99 e0       	ldi	r25, 0x09	; 9
    403e:	0e 94 49 39 	call	0x7292	; 0x7292 <Comp_Stop>
    4042:	0f 90       	pop	r0
    4044:	0f 90       	pop	r0
    4046:	0f 90       	pop	r0
    4048:	0f 90       	pop	r0
		//xSerialxPrintf(&xSerial3Port,"mod =%d\r\n",EEpromData.AireToWater);
		//xSerialxPrintf(&xSerial3Port,"TimeBetweenDef =%d\r\n",EEpromData.TimeBetweenDef);
		
	
		
		if(Comp_1.suply &&  Comp_1.countError<3)
    404a:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <Comp_1+0x6>
    404e:	88 23       	and	r24, r24
    4050:	09 f4       	brne	.+2      	; 0x4054 <System_1+0x12a>
    4052:	5c c1       	rjmp	.+696    	; 0x430c <System_1+0x3e2>
    4054:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <Comp_1+0x11>
    4058:	83 30       	cpi	r24, 0x03	; 3
    405a:	08 f0       	brcs	.+2      	; 0x405e <System_1+0x134>
    405c:	57 c1       	rjmp	.+686    	; 0x430c <System_1+0x3e2>
		{
			//>EEpromData.TimeBetweenDef EEpromData.TimeDef
			
			if(EEpromData.AireToWater==1){
    405e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4060:	81 30       	cpi	r24, 0x01	; 1
    4062:	09 f0       	breq	.+2      	; 0x4066 <System_1+0x13c>
    4064:	e2 c0       	rjmp	.+452    	; 0x422a <System_1+0x300>
			//xSerialxPrintf(&xSerial3Port,"forsDefrost =%d\r\n",forsDefrost);	
			if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}	
    4066:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <forsDefrost>
    406a:	81 30       	cpi	r24, 0x01	; 1
    406c:	a9 f4       	brne	.+42     	; 0x4098 <System_1+0x16e>
    406e:	be 01       	movw	r22, r28
    4070:	82 e6       	ldi	r24, 0x62	; 98
    4072:	99 e0       	ldi	r25, 0x09	; 9
    4074:	0e 94 c0 35 	call	0x6b80	; 0x6b80 <startDefrost>
    4078:	70 92 6b 09 	sts	0x096B, r7	; 0x80096b <Comp_1+0x9>
    407c:	10 92 0b 07 	sts	0x070B, r1	; 0x80070b <forsDefrost>
    4080:	e3 e2       	ldi	r30, 0x23	; 35
    4082:	f2 e0       	ldi	r31, 0x02	; 2
    4084:	ff 93       	push	r31
    4086:	ef 93       	push	r30
    4088:	1f 93       	push	r17
    408a:	0f 93       	push	r16
    408c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    4090:	0f 90       	pop	r0
    4092:	0f 90       	pop	r0
    4094:	0f 90       	pop	r0
    4096:	0f 90       	pop	r0
			if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Src_In<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    4098:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <Comp_1+0x9>
    409c:	81 11       	cpse	r24, r1
    409e:	4d c0       	rjmp	.+154    	; 0x413a <System_1+0x210>
    40a0:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    40a4:	20 91 e3 08 	lds	r18, 0x08E3	; 0x8008e3 <timeTillDef>
    40a8:	30 91 e4 08 	lds	r19, 0x08E4	; 0x8008e4 <timeTillDef+0x1>
    40ac:	40 91 e5 08 	lds	r20, 0x08E5	; 0x8008e5 <timeTillDef+0x2>
    40b0:	50 91 e6 08 	lds	r21, 0x08E6	; 0x8008e6 <timeTillDef+0x3>
    40b4:	1b 01       	movw	r2, r22
    40b6:	2c 01       	movw	r4, r24
    40b8:	22 1a       	sub	r2, r18
    40ba:	33 0a       	sbc	r3, r19
    40bc:	44 0a       	sbc	r4, r20
    40be:	55 0a       	sbc	r5, r21
    40c0:	2a a1       	ldd	r18, Y+34	; 0x22
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	a0 e6       	ldi	r26, 0x60	; 96
    40c6:	ba ee       	ldi	r27, 0xEA	; 234
    40c8:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    40cc:	62 15       	cp	r22, r2
    40ce:	73 05       	cpc	r23, r3
    40d0:	84 05       	cpc	r24, r4
    40d2:	95 05       	cpc	r25, r5
    40d4:	68 f5       	brcc	.+90     	; 0x4130 <System_1+0x206>
    40d6:	6a a5       	ldd	r22, Y+42	; 0x2a
    40d8:	7b a5       	ldd	r23, Y+43	; 0x2b
    40da:	07 2e       	mov	r0, r23
    40dc:	00 0c       	add	r0, r0
    40de:	88 0b       	sbc	r24, r24
    40e0:	99 0b       	sbc	r25, r25
    40e2:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    40e6:	9b 01       	movw	r18, r22
    40e8:	ac 01       	movw	r20, r24
    40ea:	60 91 94 09 	lds	r22, 0x0994	; 0x800994 <Comp_1+0x32>
    40ee:	70 91 95 09 	lds	r23, 0x0995	; 0x800995 <Comp_1+0x33>
    40f2:	80 91 96 09 	lds	r24, 0x0996	; 0x800996 <Comp_1+0x34>
    40f6:	90 91 97 09 	lds	r25, 0x0997	; 0x800997 <Comp_1+0x35>
    40fa:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    40fe:	88 23       	and	r24, r24
    4100:	bc f4       	brge	.+46     	; 0x4130 <System_1+0x206>
    4102:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <forsDefrost>
    4106:	81 11       	cpse	r24, r1
    4108:	13 c0       	rjmp	.+38     	; 0x4130 <System_1+0x206>
    410a:	be 01       	movw	r22, r28
    410c:	82 e6       	ldi	r24, 0x62	; 98
    410e:	99 e0       	ldi	r25, 0x09	; 9
    4110:	0e 94 c0 35 	call	0x6b80	; 0x6b80 <startDefrost>
    4114:	70 92 6b 09 	sts	0x096B, r7	; 0x80096b <Comp_1+0x9>
    4118:	83 e3       	ldi	r24, 0x33	; 51
    411a:	92 e0       	ldi	r25, 0x02	; 2
    411c:	9f 93       	push	r25
    411e:	8f 93       	push	r24
    4120:	1f 93       	push	r17
    4122:	0f 93       	push	r16
    4124:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    4128:	0f 90       	pop	r0
    412a:	0f 90       	pop	r0
    412c:	0f 90       	pop	r0
    412e:	0f 90       	pop	r0
			if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    4130:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <Comp_1+0x9>
    4134:	88 23       	and	r24, r24
    4136:	09 f4       	brne	.+2      	; 0x413a <System_1+0x210>
    4138:	78 c0       	rjmp	.+240    	; 0x422a <System_1+0x300>
    413a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    413e:	20 91 e3 08 	lds	r18, 0x08E3	; 0x8008e3 <timeTillDef>
    4142:	30 91 e4 08 	lds	r19, 0x08E4	; 0x8008e4 <timeTillDef+0x1>
    4146:	40 91 e5 08 	lds	r20, 0x08E5	; 0x8008e5 <timeTillDef+0x2>
    414a:	50 91 e6 08 	lds	r21, 0x08E6	; 0x8008e6 <timeTillDef+0x3>
    414e:	1b 01       	movw	r2, r22
    4150:	2c 01       	movw	r4, r24
    4152:	22 1a       	sub	r2, r18
    4154:	33 0a       	sbc	r3, r19
    4156:	44 0a       	sbc	r4, r20
    4158:	55 0a       	sbc	r5, r21
    415a:	29 a1       	ldd	r18, Y+33	; 0x21
    415c:	30 e0       	ldi	r19, 0x00	; 0
    415e:	a0 e6       	ldi	r26, 0x60	; 96
    4160:	ba ee       	ldi	r27, 0xEA	; 234
    4162:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    4166:	62 15       	cp	r22, r2
    4168:	73 05       	cpc	r23, r3
    416a:	84 05       	cpc	r24, r4
    416c:	95 05       	cpc	r25, r5
    416e:	20 f5       	brcc	.+72     	; 0x41b8 <System_1+0x28e>
    4170:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <Comp_1+0xa>
    4174:	88 23       	and	r24, r24
    4176:	01 f1       	breq	.+64     	; 0x41b8 <System_1+0x28e>
    4178:	be 01       	movw	r22, r28
    417a:	82 e6       	ldi	r24, 0x62	; 98
    417c:	99 e0       	ldi	r25, 0x09	; 9
    417e:	0e 94 db 35 	call	0x6bb6	; 0x6bb6 <stopDefrost>
    4182:	e2 e6       	ldi	r30, 0x62	; 98
    4184:	f9 e0       	ldi	r31, 0x09	; 9
    4186:	11 86       	std	Z+9, r1	; 0x09
    4188:	12 86       	std	Z+10, r1	; 0x0a
    418a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    418e:	60 93 e3 08 	sts	0x08E3, r22	; 0x8008e3 <timeTillDef>
    4192:	70 93 e4 08 	sts	0x08E4, r23	; 0x8008e4 <timeTillDef+0x1>
    4196:	80 93 e5 08 	sts	0x08E5, r24	; 0x8008e5 <timeTillDef+0x2>
    419a:	90 93 e6 08 	sts	0x08E6, r25	; 0x8008e6 <timeTillDef+0x3>
    419e:	ee e3       	ldi	r30, 0x3E	; 62
    41a0:	f2 e0       	ldi	r31, 0x02	; 2
    41a2:	ff 93       	push	r31
    41a4:	ef 93       	push	r30
    41a6:	1f 93       	push	r17
    41a8:	0f 93       	push	r16
    41aa:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    41ae:	0f 90       	pop	r0
    41b0:	0f 90       	pop	r0
    41b2:	0f 90       	pop	r0
    41b4:	0f 90       	pop	r0
    41b6:	39 c0       	rjmp	.+114    	; 0x422a <System_1+0x300>
			else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    41b8:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <Comp_1+0x9>
    41bc:	88 23       	and	r24, r24
    41be:	a9 f1       	breq	.+106    	; 0x422a <System_1+0x300>
    41c0:	6c a5       	ldd	r22, Y+44	; 0x2c
    41c2:	7d a5       	ldd	r23, Y+45	; 0x2d
    41c4:	07 2e       	mov	r0, r23
    41c6:	00 0c       	add	r0, r0
    41c8:	88 0b       	sbc	r24, r24
    41ca:	99 0b       	sbc	r25, r25
    41cc:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    41d0:	9b 01       	movw	r18, r22
    41d2:	ac 01       	movw	r20, r24
    41d4:	60 91 94 09 	lds	r22, 0x0994	; 0x800994 <Comp_1+0x32>
    41d8:	70 91 95 09 	lds	r23, 0x0995	; 0x800995 <Comp_1+0x33>
    41dc:	80 91 96 09 	lds	r24, 0x0996	; 0x800996 <Comp_1+0x34>
    41e0:	90 91 97 09 	lds	r25, 0x0997	; 0x800997 <Comp_1+0x35>
    41e4:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    41e8:	18 16       	cp	r1, r24
    41ea:	fc f4       	brge	.+62     	; 0x422a <System_1+0x300>
    41ec:	be 01       	movw	r22, r28
    41ee:	82 e6       	ldi	r24, 0x62	; 98
    41f0:	99 e0       	ldi	r25, 0x09	; 9
    41f2:	0e 94 db 35 	call	0x6bb6	; 0x6bb6 <stopDefrost>
    41f6:	e2 e6       	ldi	r30, 0x62	; 98
    41f8:	f9 e0       	ldi	r31, 0x09	; 9
    41fa:	11 86       	std	Z+9, r1	; 0x09
    41fc:	12 86       	std	Z+10, r1	; 0x0a
    41fe:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    4202:	60 93 e3 08 	sts	0x08E3, r22	; 0x8008e3 <timeTillDef>
    4206:	70 93 e4 08 	sts	0x08E4, r23	; 0x8008e4 <timeTillDef+0x1>
    420a:	80 93 e5 08 	sts	0x08E5, r24	; 0x8008e5 <timeTillDef+0x2>
    420e:	90 93 e6 08 	sts	0x08E6, r25	; 0x8008e6 <timeTillDef+0x3>
    4212:	8e e3       	ldi	r24, 0x3E	; 62
    4214:	92 e0       	ldi	r25, 0x02	; 2
    4216:	9f 93       	push	r25
    4218:	8f 93       	push	r24
    421a:	1f 93       	push	r17
    421c:	0f 93       	push	r16
    421e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    4222:	0f 90       	pop	r0
    4224:	0f 90       	pop	r0
    4226:	0f 90       	pop	r0
    4228:	0f 90       	pop	r0
			
			}
			
			if(!init_system){_err1=Check_Erors(&Comp_1,&EEpromData);ADE7758_resetStatus();} else init_system=false;
    422a:	80 91 8c 0a 	lds	r24, 0x0A8C	; 0x800a8c <init_system>
    422e:	81 11       	cpse	r24, r1
    4230:	0a c0       	rjmp	.+20     	; 0x4246 <System_1+0x31c>
    4232:	be 01       	movw	r22, r28
    4234:	82 e6       	ldi	r24, 0x62	; 98
    4236:	99 e0       	ldi	r25, 0x09	; 9
    4238:	5e d2       	rcall	.+1212   	; 0x46f6 <Check_Erors>
    423a:	90 93 6d 0a 	sts	0x0A6D, r25	; 0x800a6d <_err1+0x1>
    423e:	80 93 6c 0a 	sts	0x0A6C, r24	; 0x800a6c <_err1>
    4242:	56 d2       	rcall	.+1196   	; 0x46f0 <ADE7758_resetStatus>
    4244:	02 c0       	rjmp	.+4      	; 0x424a <System_1+0x320>
    4246:	10 92 8c 0a 	sts	0x0A8C, r1	; 0x800a8c <init_system>
				
			if(_err1>0 && Comp_1.error==0){Comp_1.error=_err1;Comp_1.countError++;Comp_1.Steps=0;Comp_Stop(&Comp_1);xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);}//
    424a:	80 91 6c 0a 	lds	r24, 0x0A6C	; 0x800a6c <_err1>
    424e:	90 91 6d 0a 	lds	r25, 0x0A6D	; 0x800a6d <_err1+0x1>
    4252:	18 16       	cp	r1, r24
    4254:	19 06       	cpc	r1, r25
    4256:	44 f5       	brge	.+80     	; 0x42a8 <System_1+0x37e>
    4258:	f7 01       	movw	r30, r14
    425a:	20 81       	ld	r18, Z
    425c:	31 81       	ldd	r19, Z+1	; 0x01
    425e:	23 2b       	or	r18, r19
    4260:	19 f5       	brne	.+70     	; 0x42a8 <System_1+0x37e>
    4262:	e2 e6       	ldi	r30, 0x62	; 98
    4264:	f9 e0       	ldi	r31, 0x09	; 9
    4266:	d7 01       	movw	r26, r14
    4268:	8d 93       	st	X+, r24
    426a:	9c 93       	st	X, r25
    426c:	81 89       	ldd	r24, Z+17	; 0x11
    426e:	8f 5f       	subi	r24, 0xFF	; 255
    4270:	81 8b       	std	Z+17, r24	; 0x11
    4272:	ea ec       	ldi	r30, 0xCA	; 202
    4274:	f9 e0       	ldi	r31, 0x09	; 9
    4276:	11 82       	std	Z+1, r1	; 0x01
    4278:	10 82       	st	Z, r1
    427a:	82 e6       	ldi	r24, 0x62	; 98
    427c:	99 e0       	ldi	r25, 0x09	; 9
    427e:	0e 94 49 39 	call	0x7292	; 0x7292 <Comp_Stop>
    4282:	d7 01       	movw	r26, r14
    4284:	11 96       	adiw	r26, 0x01	; 1
    4286:	8c 91       	ld	r24, X
    4288:	11 97       	sbiw	r26, 0x01	; 1
    428a:	8f 93       	push	r24
    428c:	8c 91       	ld	r24, X
    428e:	8f 93       	push	r24
    4290:	bf 92       	push	r11
    4292:	af 92       	push	r10
    4294:	1f 93       	push	r17
    4296:	0f 93       	push	r16
    4298:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    429c:	0f 90       	pop	r0
    429e:	0f 90       	pop	r0
    42a0:	0f 90       	pop	r0
    42a2:	0f 90       	pop	r0
    42a4:	0f 90       	pop	r0
    42a6:	0f 90       	pop	r0
				
			 mod_pump(&Comp_1,&EEpromData);
    42a8:	be 01       	movw	r22, r28
    42aa:	82 e6       	ldi	r24, 0x62	; 98
    42ac:	99 e0       	ldi	r25, 0x09	; 9
    42ae:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <mod_pump>
			//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);
			if(Comp_1.checkTrv && xTaskGetTickCount()-countTrvTime_1>10000 ){Comp_1.Steps = Fuzzy(&Comp_1,EEpromData.trv_corection_1);countTrvTime_1=xTaskGetTickCount();}
    42b2:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <Comp_1+0x1>
    42b6:	88 23       	and	r24, r24
    42b8:	49 f1       	breq	.+82     	; 0x430c <System_1+0x3e2>
    42ba:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    42be:	20 91 13 07 	lds	r18, 0x0713	; 0x800713 <countTrvTime_1>
    42c2:	30 91 14 07 	lds	r19, 0x0714	; 0x800714 <countTrvTime_1+0x1>
    42c6:	40 91 15 07 	lds	r20, 0x0715	; 0x800715 <countTrvTime_1+0x2>
    42ca:	50 91 16 07 	lds	r21, 0x0716	; 0x800716 <countTrvTime_1+0x3>
    42ce:	dc 01       	movw	r26, r24
    42d0:	cb 01       	movw	r24, r22
    42d2:	82 1b       	sub	r24, r18
    42d4:	93 0b       	sbc	r25, r19
    42d6:	a4 0b       	sbc	r26, r20
    42d8:	b5 0b       	sbc	r27, r21
    42da:	81 31       	cpi	r24, 0x11	; 17
    42dc:	97 42       	sbci	r25, 0x27	; 39
    42de:	a1 05       	cpc	r26, r1
    42e0:	b1 05       	cpc	r27, r1
    42e2:	a0 f0       	brcs	.+40     	; 0x430c <System_1+0x3e2>
    42e4:	6a a9       	ldd	r22, Y+50	; 0x32
    42e6:	7b a9       	ldd	r23, Y+51	; 0x33
    42e8:	82 e6       	ldi	r24, 0x62	; 98
    42ea:	99 e0       	ldi	r25, 0x09	; 9
    42ec:	0e 94 c1 52 	call	0xa582	; 0xa582 <Fuzzy>
    42f0:	aa ec       	ldi	r26, 0xCA	; 202
    42f2:	b9 e0       	ldi	r27, 0x09	; 9
    42f4:	8d 93       	st	X+, r24
    42f6:	9c 93       	st	X, r25
    42f8:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    42fc:	60 93 13 07 	sts	0x0713, r22	; 0x800713 <countTrvTime_1>
    4300:	70 93 14 07 	sts	0x0714, r23	; 0x800714 <countTrvTime_1+0x1>
    4304:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <countTrvTime_1+0x2>
    4308:	90 93 16 07 	sts	0x0716, r25	; 0x800716 <countTrvTime_1+0x3>
			
			
		}
		
		vTaskDelay(1000);
    430c:	68 ee       	ldi	r22, 0xE8	; 232
    430e:	73 e0       	ldi	r23, 0x03	; 3
    4310:	80 e0       	ldi	r24, 0x00	; 0
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <vTaskDelay>
		//xSerialxPrintf(&xSerial3Port,"Stack1 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
	}
    4318:	26 ce       	rjmp	.-948    	; 0x3f66 <System_1+0x3c>

0000431a <ModBus>:
	(void) pvParameters;

	while (1)
	{   
		//wdt_reset();
		xSerialxPrintf(&xSerial3Port,"ModBus_task\r\n");
    431a:	0e e8       	ldi	r16, 0x8E	; 142
    431c:	12 e0       	ldi	r17, 0x02	; 2
    431e:	c0 ea       	ldi	r28, 0xA0	; 160
    4320:	d7 e0       	ldi	r29, 0x07	; 7
    4322:	1f 93       	push	r17
    4324:	0f 93       	push	r16
    4326:	df 93       	push	r29
    4328:	cf 93       	push	r28
    432a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if (xSemaphoreTake(xMbBinarySemaphore, portMAX_DELAY) == pdTRUE )
    432e:	4f ef       	ldi	r20, 0xFF	; 255
    4330:	5f ef       	ldi	r21, 0xFF	; 255
    4332:	ba 01       	movw	r22, r20
    4334:	80 91 8d 0a 	lds	r24, 0x0A8D	; 0x800a8d <xMbBinarySemaphore>
    4338:	90 91 8e 0a 	lds	r25, 0x0A8E	; 0x800a8e <xMbBinarySemaphore+0x1>
    433c:	0e 94 8f 0b 	call	0x171e	; 0x171e <xQueueSemaphoreTake>
    4340:	0f 90       	pop	r0
    4342:	0f 90       	pop	r0
    4344:	0f 90       	pop	r0
    4346:	0f 90       	pop	r0
    4348:	81 30       	cpi	r24, 0x01	; 1
    434a:	59 f7       	brne	.-42     	; 0x4322 <ModBus+0x8>
		{
			modbus_update();
    434c:	d8 d7       	rcall	.+4016   	; 0x52fe <modbus_update>
			//xSerialxPrintf(&xSerial3Port,"Interrupt\r\n");
			if(port_0){xSerialRxFlush( &xSerialPort );port_0=false;indexBuf=0;}
    434e:	80 91 a7 0a 	lds	r24, 0x0AA7	; 0x800aa7 <port_0>
    4352:	88 23       	and	r24, r24
    4354:	49 f0       	breq	.+18     	; 0x4368 <ModBus+0x4e>
    4356:	89 e5       	ldi	r24, 0x59	; 89
    4358:	97 e0       	ldi	r25, 0x07	; 7
    435a:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xSerialRxFlush>
    435e:	10 92 a7 0a 	sts	0x0AA7, r1	; 0x800aa7 <port_0>
    4362:	10 92 9f 07 	sts	0x079F, r1	; 0x80079f <indexBuf>
    4366:	dd cf       	rjmp	.-70     	; 0x4322 <ModBus+0x8>
			else if(port_3){xSerialRxFlush( &xSerial3Port );port_3=false;indexBuf=0;}
    4368:	80 91 01 09 	lds	r24, 0x0901	; 0x800901 <port_3>
    436c:	88 23       	and	r24, r24
    436e:	c9 f2       	breq	.-78     	; 0x4322 <ModBus+0x8>
    4370:	ce 01       	movw	r24, r28
    4372:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xSerialRxFlush>
    4376:	10 92 01 09 	sts	0x0901, r1	; 0x800901 <port_3>
    437a:	10 92 9f 07 	sts	0x079F, r1	; 0x80079f <indexBuf>
    437e:	d1 cf       	rjmp	.-94     	; 0x4322 <ModBus+0x8>

00004380 <main>:
//--------------------------------------------------------
volatile long  countTimer;
int main(void) __attribute__ ((OS_main));

int main(void)
{
    4380:	cd b7       	in	r28, 0x3d	; 61
    4382:	de b7       	in	r29, 0x3e	; 62
    4384:	a2 97       	sbiw	r28, 0x22	; 34
    4386:	de bf       	out	0x3e, r29	; 62
    4388:	cd bf       	out	0x3d, r28	; 61

	initPins();
    438a:	0e 94 a0 3f 	call	0x7f40	; 0x7f40 <initPins>
	ADE7758_Init();
    438e:	93 d1       	rcall	.+806    	; 0x46b6 <ADE7758_Init>
	timer_1_Init();
    4390:	59 d4       	rcall	.+2226   	; 0x4c44 <timer_1_Init>
    4392:	81 e0       	ldi	r24, 0x01	; 1
	Comp_1.Index=1;
    4394:	90 e0       	ldi	r25, 0x00	; 0
    4396:	90 93 d1 09 	sts	0x09D1, r25	; 0x8009d1 <Comp_1+0x6f>
    439a:	80 93 d0 09 	sts	0x09D0, r24	; 0x8009d0 <Comp_1+0x6e>
    439e:	82 e0       	ldi	r24, 0x02	; 2
	Comp_2.Index=2;
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	90 93 57 0a 	sts	0x0A57, r25	; 0x800a57 <Comp_2+0x6f>
    43a6:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <Comp_2+0x6e>
    43aa:	80 e0       	ldi	r24, 0x00	; 0
	//eeprom_write_block((void*)&EEpromData, ( void*)0, sizeof (xEEdata));
	current_time = time(NULL);
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    43b2:	60 93 fd 08 	sts	0x08FD, r22	; 0x8008fd <current_time>
    43b6:	70 93 fe 08 	sts	0x08FE, r23	; 0x8008fe <current_time+0x1>
    43ba:	80 93 ff 08 	sts	0x08FF, r24	; 0x8008ff <current_time+0x2>
    43be:	90 93 00 09 	sts	0x0900, r25	; 0x800900 <current_time+0x3>
    43c2:	ee 24       	eor	r14, r14
	xSerialPort = xSerialPortInitMinimal( USART0, 9600, portSERIAL_BUFFER_TX, portSERIAL_BUFFER_RX);
    43c4:	ea 94       	dec	r14
    43c6:	f1 2c       	mov	r15, r1
    43c8:	0f ef       	ldi	r16, 0xFF	; 255
    43ca:	10 e0       	ldi	r17, 0x00	; 0
    43cc:	20 e8       	ldi	r18, 0x80	; 128
    43ce:	35 e2       	ldi	r19, 0x25	; 37
    43d0:	40 e0       	ldi	r20, 0x00	; 0
    43d2:	50 e0       	ldi	r21, 0x00	; 0
    43d4:	60 e0       	ldi	r22, 0x00	; 0
    43d6:	ce 01       	movw	r24, r28
    43d8:	01 96       	adiw	r24, 0x01	; 1
    43da:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <xSerialPortInitMinimal>
    43de:	82 e2       	ldi	r24, 0x22	; 34
    43e0:	fe 01       	movw	r30, r28
    43e2:	31 96       	adiw	r30, 0x01	; 1
    43e4:	a9 e5       	ldi	r26, 0x59	; 89
    43e6:	b7 e0       	ldi	r27, 0x07	; 7
    43e8:	01 90       	ld	r0, Z+
    43ea:	0d 92       	st	X+, r0
    43ec:	8a 95       	dec	r24
    43ee:	e1 f7       	brne	.-8      	; 0x43e8 <main+0x68>
    43f0:	20 e8       	ldi	r18, 0x80	; 128
	xSerial3Port = xSerialPortInitMinimal( USART3, 9600, portSERIAL_BUFFER_TX, portSERIAL_BUFFER_RX);
    43f2:	35 e2       	ldi	r19, 0x25	; 37
    43f4:	40 e0       	ldi	r20, 0x00	; 0
    43f6:	50 e0       	ldi	r21, 0x00	; 0
    43f8:	66 e0       	ldi	r22, 0x06	; 6
    43fa:	ce 01       	movw	r24, r28
    43fc:	01 96       	adiw	r24, 0x01	; 1
    43fe:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <xSerialPortInitMinimal>
    4402:	82 e2       	ldi	r24, 0x22	; 34
    4404:	fe 01       	movw	r30, r28
    4406:	31 96       	adiw	r30, 0x01	; 1
    4408:	a0 ea       	ldi	r26, 0xA0	; 160
    440a:	b7 e0       	ldi	r27, 0x07	; 7
    440c:	01 90       	ld	r0, Z+
    440e:	0d 92       	st	X+, r0
    4410:	8a 95       	dec	r24
    4412:	e1 f7       	brne	.-8      	; 0x440c <main+0x8c>
    4414:	43 e0       	ldi	r20, 0x03	; 3
	vSemaphoreCreateBinary(xMbBinarySemaphore);
    4416:	60 e0       	ldi	r22, 0x00	; 0
    4418:	81 e0       	ldi	r24, 0x01	; 1
    441a:	0e 94 a7 09 	call	0x134e	; 0x134e <xQueueGenericCreate>
    441e:	90 93 8e 0a 	sts	0x0A8E, r25	; 0x800a8e <xMbBinarySemaphore+0x1>
    4422:	80 93 8d 0a 	sts	0x0A8D, r24	; 0x800a8d <xMbBinarySemaphore>
    4426:	00 97       	sbiw	r24, 0x00	; 0
    4428:	41 f0       	breq	.+16     	; 0x443a <main+0xba>
    442a:	00 e0       	ldi	r16, 0x00	; 0
    442c:	20 e0       	ldi	r18, 0x00	; 0
    442e:	30 e0       	ldi	r19, 0x00	; 0
    4430:	a9 01       	movw	r20, r18
    4432:	60 e0       	ldi	r22, 0x00	; 0
    4434:	70 e0       	ldi	r23, 0x00	; 0
    4436:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    443a:	40 e6       	ldi	r20, 0x60	; 96

    
	eeprom_read_block((void*)&EEpromData, (const void*)0, sizeof (xEEdata));
    443c:	50 e0       	ldi	r21, 0x00	; 0
    443e:	60 e0       	ldi	r22, 0x00	; 0
    4440:	70 e0       	ldi	r23, 0x00	; 0
    4442:	82 e0       	ldi	r24, 0x02	; 2
    4444:	99 e0       	ldi	r25, 0x09	; 9
    4446:	0e 94 f1 5d 	call	0xbbe2	; 0xbbe2 <eeprom_read_block>
    444a:	82 e6       	ldi	r24, 0x62	; 98
	activateTimers(&Comp_1);
    444c:	99 e0       	ldi	r25, 0x09	; 9
    444e:	0e 94 d5 33 	call	0x67aa	; 0x67aa <activateTimers>
    4452:	88 ee       	ldi	r24, 0xE8	; 232
	activateTimers(&Comp_2);
    4454:	99 e0       	ldi	r25, 0x09	; 9
    4456:	0e 94 d5 33 	call	0x67aa	; 0x67aa <activateTimers>
    445a:	82 e6       	ldi	r24, 0x62	; 98
	activateTrvTimer(&Comp_1);
    445c:	99 e0       	ldi	r25, 0x09	; 9
    445e:	0e 94 fc 51 	call	0xa3f8	; 0xa3f8 <activateTrvTimer>
    4462:	88 ee       	ldi	r24, 0xE8	; 232
	activateTrvTimer(&Comp_2);
    4464:	99 e0       	ldi	r25, 0x09	; 9
    4466:	0e 94 fc 51 	call	0xa3f8	; 0xa3f8 <activateTrvTimer>
    446a:	81 e0       	ldi	r24, 0x01	; 1
	init_system=true;
    446c:	80 93 8c 0a 	sts	0x0A8C, r24	; 0x800a8c <init_system>
    4470:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <EEpromData+0x32>
	old_corection_1=EEpromData.trv_corection_1;
    4474:	90 91 35 09 	lds	r25, 0x0935	; 0x800935 <EEpromData+0x33>
    4478:	90 93 73 0a 	sts	0x0A73, r25	; 0x800a73 <old_corection_1+0x1>
    447c:	80 93 72 0a 	sts	0x0A72, r24	; 0x800a72 <old_corection_1>
    4480:	80 91 4a 09 	lds	r24, 0x094A	; 0x80094a <EEpromData+0x48>
	old_corection_2=EEpromData.trv_corection_2;
    4484:	90 91 4b 09 	lds	r25, 0x094B	; 0x80094b <EEpromData+0x49>
    4488:	90 93 e7 09 	sts	0x09E7, r25	; 0x8009e7 <old_corection_2+0x1>
    448c:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <old_corection_2>
    4490:	82 e0       	ldi	r24, 0x02	; 2
	Comp_1.modeOfPump=Comp_2.modeOfPump=selmode(&EEpromData);
    4492:	99 e0       	ldi	r25, 0x09	; 9
    4494:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <selmode>
    4498:	80 93 f8 09 	sts	0x09F8, r24	; 0x8009f8 <Comp_2+0x10>
    449c:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <Comp_1+0x10>
    44a0:	99 e2       	ldi	r25, 0x29	; 41
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    44a2:	88 e1       	ldi	r24, 0x18	; 24
    44a4:	0f b6       	in	r0, 0x3f	; 63
    44a6:	f8 94       	cli
    44a8:	a8 95       	wdr
    44aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    44ae:	0f be       	out	0x3f, r0	; 63
    44b0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    44b4:	78 94       	sei
	wdt_enable(WDTO_8S);
	//-------------------------------------
	sei(); 
    44b6:	e1 2c       	mov	r14, r1
	//-------------------------------------
	xTaskCreate(ModBus,(const portCHAR *)"ModBus",256,NULL,2, NULL );
    44b8:	f1 2c       	mov	r15, r1
    44ba:	02 e0       	ldi	r16, 0x02	; 2
    44bc:	20 e0       	ldi	r18, 0x00	; 0
    44be:	30 e0       	ldi	r19, 0x00	; 0
    44c0:	40 e0       	ldi	r20, 0x00	; 0
    44c2:	51 e0       	ldi	r21, 0x01	; 1
    44c4:	6c e9       	ldi	r22, 0x9C	; 156
    44c6:	72 e0       	ldi	r23, 0x02	; 2
    44c8:	8d e8       	ldi	r24, 0x8D	; 141
    44ca:	91 e2       	ldi	r25, 0x21	; 33
    44cc:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    44d0:	0f 2e       	mov	r0, r31
	xTaskCreate(System_1,(const portCHAR *)"System_1",512,NULL,0, &xHandleFirst );
    44d2:	f9 e1       	ldi	r31, 0x19	; 25
    44d4:	ef 2e       	mov	r14, r31
    44d6:	f7 e0       	ldi	r31, 0x07	; 7
    44d8:	ff 2e       	mov	r15, r31
    44da:	f0 2d       	mov	r31, r0
    44dc:	00 e0       	ldi	r16, 0x00	; 0
    44de:	20 e0       	ldi	r18, 0x00	; 0
    44e0:	30 e0       	ldi	r19, 0x00	; 0
    44e2:	40 e0       	ldi	r20, 0x00	; 0
    44e4:	52 e0       	ldi	r21, 0x02	; 2
    44e6:	63 ea       	ldi	r22, 0xA3	; 163
    44e8:	72 e0       	ldi	r23, 0x02	; 2
    44ea:	85 e9       	ldi	r24, 0x95	; 149
    44ec:	9f e1       	ldi	r25, 0x1F	; 31
    44ee:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    44f2:	0f 2e       	mov	r0, r31
	xTaskCreate(System_2,(const portCHAR *)"System_2",512,NULL,0, &xHandleSecond );
    44f4:	f7 e1       	ldi	r31, 0x17	; 23
    44f6:	ef 2e       	mov	r14, r31
    44f8:	f7 e0       	ldi	r31, 0x07	; 7
    44fa:	ff 2e       	mov	r15, r31
    44fc:	f0 2d       	mov	r31, r0
    44fe:	20 e0       	ldi	r18, 0x00	; 0
    4500:	30 e0       	ldi	r19, 0x00	; 0
    4502:	40 e0       	ldi	r20, 0x00	; 0
    4504:	52 e0       	ldi	r21, 0x02	; 2
    4506:	6c ea       	ldi	r22, 0xAC	; 172
    4508:	72 e0       	ldi	r23, 0x02	; 2
    450a:	89 eb       	ldi	r24, 0xB9	; 185
    450c:	9e e1       	ldi	r25, 0x1E	; 30
    450e:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    4512:	e1 2c       	mov	r14, r1
	xTaskCreate(Defrost,(const portCHAR *)"Defrost",256,NULL,0, NULL );
    4514:	f1 2c       	mov	r15, r1
    4516:	20 e0       	ldi	r18, 0x00	; 0
    4518:	30 e0       	ldi	r19, 0x00	; 0
    451a:	40 e0       	ldi	r20, 0x00	; 0
    451c:	51 e0       	ldi	r21, 0x01	; 1
    451e:	65 eb       	ldi	r22, 0xB5	; 181
    4520:	72 e0       	ldi	r23, 0x02	; 2
    4522:	81 ec       	ldi	r24, 0xC1	; 193
    4524:	9d e1       	ldi	r25, 0x1D	; 29
    4526:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    452a:	0e 94 56 16 	call	0x2cac	; 0x2cac <vTaskStartScheduler>
	//--------------------------------------
	vTaskStartScheduler();
    452e:	80 e0       	ldi	r24, 0x00	; 0
}
    4530:	90 e0       	ldi	r25, 0x00	; 0
    4532:	a2 96       	adiw	r28, 0x22	; 34
    4534:	0f b6       	in	r0, 0x3f	; 63
    4536:	f8 94       	cli
    4538:	de bf       	out	0x3e, r29	; 62
    453a:	0f be       	out	0x3f, r0	; 63
    453c:	cd bf       	out	0x3d, r28	; 61
    453e:	08 95       	ret

00004540 <__vector_17>:
    4540:	1f 92       	push	r1

ISR(TIMER1_COMPA_vect) // timer_compare_a
{
    4542:	0f 92       	push	r0
    4544:	0f b6       	in	r0, 0x3f	; 63
    4546:	0f 92       	push	r0
    4548:	11 24       	eor	r1, r1
    454a:	0b b6       	in	r0, 0x3b	; 59
    454c:	0f 92       	push	r0
    454e:	2f 93       	push	r18
    4550:	3f 93       	push	r19
    4552:	4f 93       	push	r20
    4554:	5f 93       	push	r21
    4556:	6f 93       	push	r22
    4558:	7f 93       	push	r23
    455a:	8f 93       	push	r24
    455c:	9f 93       	push	r25
    455e:	af 93       	push	r26
    4560:	bf 93       	push	r27
    4562:	ef 93       	push	r30
    4564:	ff 93       	push	r31
	
	static BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
    4566:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <xHigherPriorityTaskWoken.3696>
	countTimer++;
    456a:	80 91 a3 0a 	lds	r24, 0x0AA3	; 0x800aa3 <countTimer>
    456e:	90 91 a4 0a 	lds	r25, 0x0AA4	; 0x800aa4 <countTimer+0x1>
    4572:	a0 91 a5 0a 	lds	r26, 0x0AA5	; 0x800aa5 <countTimer+0x2>
    4576:	b0 91 a6 0a 	lds	r27, 0x0AA6	; 0x800aa6 <countTimer+0x3>
    457a:	01 96       	adiw	r24, 0x01	; 1
    457c:	a1 1d       	adc	r26, r1
    457e:	b1 1d       	adc	r27, r1
    4580:	80 93 a3 0a 	sts	0x0AA3, r24	; 0x800aa3 <countTimer>
    4584:	90 93 a4 0a 	sts	0x0AA4, r25	; 0x800aa4 <countTimer+0x1>
    4588:	a0 93 a5 0a 	sts	0x0AA5, r26	; 0x800aa5 <countTimer+0x2>
    458c:	b0 93 a6 0a 	sts	0x0AA6, r27	; 0x800aa6 <countTimer+0x3>
	if(countTimer==7){stop_1_Timer();countTimer=0;xSemaphoreGiveFromISR(xMbBinarySemaphore,&xHigherPriorityTaskWoken);}
    4590:	80 91 a3 0a 	lds	r24, 0x0AA3	; 0x800aa3 <countTimer>
    4594:	90 91 a4 0a 	lds	r25, 0x0AA4	; 0x800aa4 <countTimer+0x1>
    4598:	a0 91 a5 0a 	lds	r26, 0x0AA5	; 0x800aa5 <countTimer+0x2>
    459c:	b0 91 a6 0a 	lds	r27, 0x0AA6	; 0x800aa6 <countTimer+0x3>
    45a0:	07 97       	sbiw	r24, 0x07	; 7
    45a2:	a1 05       	cpc	r26, r1
    45a4:	b1 05       	cpc	r27, r1
    45a6:	89 f4       	brne	.+34     	; 0x45ca <__vector_17+0x8a>
    45a8:	3d d3       	rcall	.+1658   	; 0x4c24 <stop_1_Timer>
    45aa:	10 92 a3 0a 	sts	0x0AA3, r1	; 0x800aa3 <countTimer>
    45ae:	10 92 a4 0a 	sts	0x0AA4, r1	; 0x800aa4 <countTimer+0x1>
    45b2:	10 92 a5 0a 	sts	0x0AA5, r1	; 0x800aa5 <countTimer+0x2>
    45b6:	10 92 a6 0a 	sts	0x0AA6, r1	; 0x800aa6 <countTimer+0x3>
    45ba:	6a e0       	ldi	r22, 0x0A	; 10
    45bc:	77 e0       	ldi	r23, 0x07	; 7
    45be:	80 91 8d 0a 	lds	r24, 0x0A8D	; 0x800a8d <xMbBinarySemaphore>
    45c2:	90 91 8e 0a 	lds	r25, 0x0A8E	; 0x800a8e <xMbBinarySemaphore+0x1>
    45c6:	0e 94 c9 0a 	call	0x1592	; 0x1592 <xQueueGiveFromISR>
	//if( xHigherPriorityTaskWoken == pdTRUE )portYIELD();

}
    45ca:	ff 91       	pop	r31
    45cc:	ef 91       	pop	r30
    45ce:	bf 91       	pop	r27
    45d0:	af 91       	pop	r26
    45d2:	9f 91       	pop	r25
    45d4:	8f 91       	pop	r24
    45d6:	7f 91       	pop	r23
    45d8:	6f 91       	pop	r22
    45da:	5f 91       	pop	r21
    45dc:	4f 91       	pop	r20
    45de:	3f 91       	pop	r19
    45e0:	2f 91       	pop	r18
    45e2:	0f 90       	pop	r0
    45e4:	0b be       	out	0x3b, r0	; 59
    45e6:	0f 90       	pop	r0
    45e8:	0f be       	out	0x3f, r0	; 63
    45ea:	0f 90       	pop	r0
    45ec:	1f 90       	pop	r1
    45ee:	18 95       	reti

000045f0 <ADE7758_read24>:
}
long ADE7758_getMaskInterrupts(void){
	return ADE7758_read24(MASK);
}
void ADE7758_setMaskInterrupts(unsigned long data){
	return ADE7758_write24(MASK, data);
    45f0:	1f 93       	push	r17
    45f2:	cf 93       	push	r28
    45f4:	df 93       	push	r29
    45f6:	c8 2f       	mov	r28, r24
    45f8:	0f b6       	in	r0, 0x3f	; 63
    45fa:	f8 94       	cli
    45fc:	0f 92       	push	r0
    45fe:	84 e0       	ldi	r24, 0x04	; 4
    4600:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <spiSelect>
    4604:	8c 2f       	mov	r24, r28
    4606:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    460a:	80 e0       	ldi	r24, 0x00	; 0
    460c:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    4610:	18 2f       	mov	r17, r24
    4612:	80 e0       	ldi	r24, 0x00	; 0
    4614:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    4618:	c8 2f       	mov	r28, r24
    461a:	80 e0       	ldi	r24, 0x00	; 0
    461c:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    4620:	d8 2f       	mov	r29, r24
    4622:	84 e0       	ldi	r24, 0x04	; 4
    4624:	0e 94 17 14 	call	0x282e	; 0x282e <spiDeselect>
    4628:	0f 90       	pop	r0
    462a:	0f be       	out	0x3f, r0	; 63
    462c:	8c 2f       	mov	r24, r28
    462e:	90 e0       	ldi	r25, 0x00	; 0
    4630:	a0 e0       	ldi	r26, 0x00	; 0
    4632:	b0 e0       	ldi	r27, 0x00	; 0
    4634:	ba 2f       	mov	r27, r26
    4636:	a9 2f       	mov	r26, r25
    4638:	98 2f       	mov	r25, r24
    463a:	88 27       	eor	r24, r24
    463c:	a1 2b       	or	r26, r17
    463e:	bc 01       	movw	r22, r24
    4640:	cd 01       	movw	r24, r26
    4642:	6d 2b       	or	r22, r29
    4644:	df 91       	pop	r29
    4646:	cf 91       	pop	r28
    4648:	1f 91       	pop	r17
    464a:	08 95       	ret

0000464c <ADE7758_write8>:
    464c:	cf 93       	push	r28
    464e:	df 93       	push	r29
    4650:	d8 2f       	mov	r29, r24
    4652:	c6 2f       	mov	r28, r22
    4654:	0f b6       	in	r0, 0x3f	; 63
    4656:	f8 94       	cli
    4658:	0f 92       	push	r0
    465a:	84 e0       	ldi	r24, 0x04	; 4
    465c:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <spiSelect>
    4660:	8d 2f       	mov	r24, r29
    4662:	80 68       	ori	r24, 0x80	; 128
    4664:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    4668:	8c 2f       	mov	r24, r28
    466a:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    466e:	84 e0       	ldi	r24, 0x04	; 4
    4670:	0e 94 17 14 	call	0x282e	; 0x282e <spiDeselect>
    4674:	0f 90       	pop	r0
    4676:	0f be       	out	0x3f, r0	; 63
    4678:	df 91       	pop	r29
    467a:	cf 91       	pop	r28
    467c:	08 95       	ret

0000467e <ADE7758_setOpMode>:
    467e:	68 2f       	mov	r22, r24
    4680:	83 e1       	ldi	r24, 0x13	; 19
    4682:	e4 cf       	rjmp	.-56     	; 0x464c <ADE7758_write8>
    4684:	08 95       	ret

00004686 <ADE7758_setWavMode>:
    4686:	68 2f       	mov	r22, r24
    4688:	85 e1       	ldi	r24, 0x15	; 21
    468a:	e0 cf       	rjmp	.-64     	; 0x464c <ADE7758_write8>
    468c:	08 95       	ret

0000468e <ADE7758_setLcycMode>:
    468e:	68 2f       	mov	r22, r24
    4690:	87 e1       	ldi	r24, 0x17	; 23
    4692:	dc cf       	rjmp	.-72     	; 0x464c <ADE7758_write8>
    4694:	08 95       	ret

00004696 <ADE7758_setupDivs>:
    4696:	cf 93       	push	r28
    4698:	df 93       	push	r29
    469a:	d6 2f       	mov	r29, r22
    469c:	c4 2f       	mov	r28, r20
    469e:	68 2f       	mov	r22, r24
    46a0:	82 e4       	ldi	r24, 0x42	; 66
    46a2:	d4 df       	rcall	.-88     	; 0x464c <ADE7758_write8>
    46a4:	6d 2f       	mov	r22, r29
    46a6:	83 e4       	ldi	r24, 0x43	; 67
    46a8:	d1 df       	rcall	.-94     	; 0x464c <ADE7758_write8>
    46aa:	6c 2f       	mov	r22, r28
    46ac:	84 e4       	ldi	r24, 0x44	; 68
    46ae:	ce df       	rcall	.-100    	; 0x464c <ADE7758_write8>
    46b0:	df 91       	pop	r29
    46b2:	cf 91       	pop	r28
    46b4:	08 95       	ret

000046b6 <ADE7758_Init>:
    46b6:	88 e0       	ldi	r24, 0x08	; 8
    46b8:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <spiSetDataMode>
    46bc:	86 e0       	ldi	r24, 0x06	; 6
    46be:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <spiSetClockDivider>
    46c2:	81 e0       	ldi	r24, 0x01	; 1
    46c4:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <spiSetBitOrder>
    46c8:	84 e0       	ldi	r24, 0x04	; 4
    46ca:	0e 94 81 13 	call	0x2702	; 0x2702 <spiBegin>
    46ce:	80 e0       	ldi	r24, 0x00	; 0
    46d0:	de df       	rcall	.-68     	; 0x468e <ADE7758_setLcycMode>
    46d2:	60 e0       	ldi	r22, 0x00	; 0
    46d4:	83 e2       	ldi	r24, 0x23	; 35
    46d6:	ba df       	rcall	.-140    	; 0x464c <ADE7758_write8>
    46d8:	42 e0       	ldi	r20, 0x02	; 2
    46da:	62 e0       	ldi	r22, 0x02	; 2
    46dc:	82 e0       	ldi	r24, 0x02	; 2
    46de:	db df       	rcall	.-74     	; 0x4696 <ADE7758_setupDivs>
    46e0:	84 e0       	ldi	r24, 0x04	; 4
    46e2:	cd df       	rcall	.-102    	; 0x467e <ADE7758_setOpMode>
    46e4:	80 e1       	ldi	r24, 0x10	; 16
    46e6:	cf cf       	rjmp	.-98     	; 0x4686 <ADE7758_setWavMode>
    46e8:	08 95       	ret

000046ea <ADE7758_getStatus>:
}
unsigned long ADE7758_getStatus(){
	return ADE7758_read24(STATUS);
    46ea:	89 e1       	ldi	r24, 0x19	; 25
    46ec:	81 cf       	rjmp	.-254    	; 0x45f0 <ADE7758_read24>
}
    46ee:	08 95       	ret

000046f0 <ADE7758_resetStatus>:
unsigned long ADE7758_resetStatus(){
	return ADE7758_read24(RSTATUS);
    46f0:	8a e1       	ldi	r24, 0x1A	; 26
    46f2:	7e cf       	rjmp	.-260    	; 0x45f0 <ADE7758_read24>
}
    46f4:	08 95       	ret

000046f6 <Check_Erors>:
#include "Errors.h"

extern  bool def;
int Check_Erors(xCompressor *comp,xEEdata *EElimit)
{
    46f6:	4f 92       	push	r4
    46f8:	5f 92       	push	r5
    46fa:	6f 92       	push	r6
    46fc:	7f 92       	push	r7
    46fe:	8f 92       	push	r8
    4700:	9f 92       	push	r9
    4702:	af 92       	push	r10
    4704:	bf 92       	push	r11
    4706:	cf 92       	push	r12
    4708:	df 92       	push	r13
    470a:	ef 92       	push	r14
    470c:	ff 92       	push	r15
    470e:	0f 93       	push	r16
    4710:	1f 93       	push	r17
    4712:	cf 93       	push	r28
    4714:	df 93       	push	r29
    4716:	00 d0       	rcall	.+0      	; 0x4718 <Check_Erors+0x22>
    4718:	00 d0       	rcall	.+0      	; 0x471a <Check_Erors+0x24>
    471a:	cd b7       	in	r28, 0x3d	; 61
    471c:	de b7       	in	r29, 0x3e	; 62
    471e:	9e 83       	std	Y+6, r25	; 0x06
    4720:	8d 83       	std	Y+5, r24	; 0x05
    4722:	8b 01       	movw	r16, r22
		if( comp->Dhw_Temp<-100){return (10+comp->Index);}
    4724:	20 e0       	ldi	r18, 0x00	; 0
    4726:	30 e0       	ldi	r19, 0x00	; 0
    4728:	48 ec       	ldi	r20, 0xC8	; 200
    472a:	52 ec       	ldi	r21, 0xC2	; 194
    472c:	dc 01       	movw	r26, r24
    472e:	52 96       	adiw	r26, 0x12	; 18
    4730:	6d 91       	ld	r22, X+
    4732:	7d 91       	ld	r23, X+
    4734:	8d 91       	ld	r24, X+
    4736:	9c 91       	ld	r25, X
    4738:	55 97       	sbiw	r26, 0x15	; 21
    473a:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    473e:	88 23       	and	r24, r24
    4740:	44 f4       	brge	.+16     	; 0x4752 <Check_Erors+0x5c>
    4742:	ed 81       	ldd	r30, Y+5	; 0x05
    4744:	fe 81       	ldd	r31, Y+6	; 0x06
    4746:	e2 59       	subi	r30, 0x92	; 146
    4748:	ff 4f       	sbci	r31, 0xFF	; 255
    474a:	80 81       	ld	r24, Z
    474c:	91 81       	ldd	r25, Z+1	; 0x01
    474e:	0a 96       	adiw	r24, 0x0a	; 10
    4750:	47 c2       	rjmp	.+1166   	; 0x4be0 <Check_Erors+0x4ea>
		else if(comp->Bac_Temp<-100) {return (20+comp->Index);}
    4752:	ad 81       	ldd	r26, Y+5	; 0x05
    4754:	be 81       	ldd	r27, Y+6	; 0x06
    4756:	56 96       	adiw	r26, 0x16	; 22
    4758:	cd 90       	ld	r12, X+
    475a:	dd 90       	ld	r13, X+
    475c:	ed 90       	ld	r14, X+
    475e:	fc 90       	ld	r15, X
    4760:	59 97       	sbiw	r26, 0x19	; 25
    4762:	20 e0       	ldi	r18, 0x00	; 0
    4764:	30 e0       	ldi	r19, 0x00	; 0
    4766:	48 ec       	ldi	r20, 0xC8	; 200
    4768:	52 ec       	ldi	r21, 0xC2	; 194
    476a:	c7 01       	movw	r24, r14
    476c:	b6 01       	movw	r22, r12
    476e:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    4772:	88 23       	and	r24, r24
    4774:	44 f4       	brge	.+16     	; 0x4786 <Check_Erors+0x90>
    4776:	ed 81       	ldd	r30, Y+5	; 0x05
    4778:	fe 81       	ldd	r31, Y+6	; 0x06
    477a:	e2 59       	subi	r30, 0x92	; 146
    477c:	ff 4f       	sbci	r31, 0xFF	; 255
    477e:	80 81       	ld	r24, Z
    4780:	91 81       	ldd	r25, Z+1	; 0x01
    4782:	44 96       	adiw	r24, 0x14	; 20
    4784:	2d c2       	rjmp	.+1114   	; 0x4be0 <Check_Erors+0x4ea>
		else if (comp->Heat_Out<-100) {return (30+comp->Index);}
    4786:	ad 81       	ldd	r26, Y+5	; 0x05
    4788:	be 81       	ldd	r27, Y+6	; 0x06
    478a:	9a 96       	adiw	r26, 0x2a	; 42
    478c:	4d 90       	ld	r4, X+
    478e:	5d 90       	ld	r5, X+
    4790:	6d 90       	ld	r6, X+
    4792:	7c 90       	ld	r7, X
    4794:	9d 97       	sbiw	r26, 0x2d	; 45
    4796:	20 e0       	ldi	r18, 0x00	; 0
    4798:	30 e0       	ldi	r19, 0x00	; 0
    479a:	48 ec       	ldi	r20, 0xC8	; 200
    479c:	52 ec       	ldi	r21, 0xC2	; 194
    479e:	c3 01       	movw	r24, r6
    47a0:	b2 01       	movw	r22, r4
    47a2:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    47a6:	88 23       	and	r24, r24
    47a8:	44 f4       	brge	.+16     	; 0x47ba <Check_Erors+0xc4>
    47aa:	ed 81       	ldd	r30, Y+5	; 0x05
    47ac:	fe 81       	ldd	r31, Y+6	; 0x06
    47ae:	e2 59       	subi	r30, 0x92	; 146
    47b0:	ff 4f       	sbci	r31, 0xFF	; 255
    47b2:	80 81       	ld	r24, Z
    47b4:	91 81       	ldd	r25, Z+1	; 0x01
    47b6:	4e 96       	adiw	r24, 0x1e	; 30
    47b8:	13 c2       	rjmp	.+1062   	; 0x4be0 <Check_Erors+0x4ea>
		else if (comp->Heat_In<-100){return (40+comp->Index);}
    47ba:	ad 81       	ldd	r26, Y+5	; 0x05
    47bc:	be 81       	ldd	r27, Y+6	; 0x06
    47be:	9e 96       	adiw	r26, 0x2e	; 46
    47c0:	8d 90       	ld	r8, X+
    47c2:	9d 90       	ld	r9, X+
    47c4:	ad 90       	ld	r10, X+
    47c6:	bc 90       	ld	r11, X
    47c8:	d1 97       	sbiw	r26, 0x31	; 49
    47ca:	20 e0       	ldi	r18, 0x00	; 0
    47cc:	30 e0       	ldi	r19, 0x00	; 0
    47ce:	48 ec       	ldi	r20, 0xC8	; 200
    47d0:	52 ec       	ldi	r21, 0xC2	; 194
    47d2:	c5 01       	movw	r24, r10
    47d4:	b4 01       	movw	r22, r8
    47d6:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    47da:	88 23       	and	r24, r24
    47dc:	44 f4       	brge	.+16     	; 0x47ee <Check_Erors+0xf8>
    47de:	ed 81       	ldd	r30, Y+5	; 0x05
    47e0:	fe 81       	ldd	r31, Y+6	; 0x06
    47e2:	e2 59       	subi	r30, 0x92	; 146
    47e4:	ff 4f       	sbci	r31, 0xFF	; 255
    47e6:	80 81       	ld	r24, Z
    47e8:	91 81       	ldd	r25, Z+1	; 0x01
    47ea:	88 96       	adiw	r24, 0x28	; 40
    47ec:	f9 c1       	rjmp	.+1010   	; 0x4be0 <Check_Erors+0x4ea>
		else if(comp->Src_In<-100) {return (50+comp->Index);}
    47ee:	20 e0       	ldi	r18, 0x00	; 0
    47f0:	30 e0       	ldi	r19, 0x00	; 0
    47f2:	48 ec       	ldi	r20, 0xC8	; 200
    47f4:	52 ec       	ldi	r21, 0xC2	; 194
    47f6:	ad 81       	ldd	r26, Y+5	; 0x05
    47f8:	be 81       	ldd	r27, Y+6	; 0x06
    47fa:	d2 96       	adiw	r26, 0x32	; 50
    47fc:	6d 91       	ld	r22, X+
    47fe:	7d 91       	ld	r23, X+
    4800:	8d 91       	ld	r24, X+
    4802:	9c 91       	ld	r25, X
    4804:	d5 97       	sbiw	r26, 0x35	; 53
    4806:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    480a:	88 23       	and	r24, r24
    480c:	44 f4       	brge	.+16     	; 0x481e <Check_Erors+0x128>
    480e:	ed 81       	ldd	r30, Y+5	; 0x05
    4810:	fe 81       	ldd	r31, Y+6	; 0x06
    4812:	e2 59       	subi	r30, 0x92	; 146
    4814:	ff 4f       	sbci	r31, 0xFF	; 255
    4816:	80 81       	ld	r24, Z
    4818:	91 81       	ldd	r25, Z+1	; 0x01
    481a:	c2 96       	adiw	r24, 0x32	; 50
    481c:	e1 c1       	rjmp	.+962    	; 0x4be0 <Check_Erors+0x4ea>
		else if (comp->Src_Out<-100) {return (60+comp->Index);}
    481e:	20 e0       	ldi	r18, 0x00	; 0
    4820:	30 e0       	ldi	r19, 0x00	; 0
    4822:	48 ec       	ldi	r20, 0xC8	; 200
    4824:	52 ec       	ldi	r21, 0xC2	; 194
    4826:	ad 81       	ldd	r26, Y+5	; 0x05
    4828:	be 81       	ldd	r27, Y+6	; 0x06
    482a:	d6 96       	adiw	r26, 0x36	; 54
    482c:	6d 91       	ld	r22, X+
    482e:	7d 91       	ld	r23, X+
    4830:	8d 91       	ld	r24, X+
    4832:	9c 91       	ld	r25, X
    4834:	d9 97       	sbiw	r26, 0x39	; 57
    4836:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    483a:	88 23       	and	r24, r24
    483c:	44 f4       	brge	.+16     	; 0x484e <Check_Erors+0x158>
    483e:	ed 81       	ldd	r30, Y+5	; 0x05
    4840:	fe 81       	ldd	r31, Y+6	; 0x06
    4842:	e2 59       	subi	r30, 0x92	; 146
    4844:	ff 4f       	sbci	r31, 0xFF	; 255
    4846:	80 81       	ld	r24, Z
    4848:	91 81       	ldd	r25, Z+1	; 0x01
    484a:	cc 96       	adiw	r24, 0x3c	; 60
    484c:	c9 c1       	rjmp	.+914    	; 0x4be0 <Check_Erors+0x4ea>
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
    484e:	ad 81       	ldd	r26, Y+5	; 0x05
    4850:	be 81       	ldd	r27, Y+6	; 0x06
    4852:	da 96       	adiw	r26, 0x3a	; 58
    4854:	8d 91       	ld	r24, X+
    4856:	9d 91       	ld	r25, X+
    4858:	0d 90       	ld	r0, X+
    485a:	bc 91       	ld	r27, X
    485c:	a0 2d       	mov	r26, r0
    485e:	89 83       	std	Y+1, r24	; 0x01
    4860:	9a 83       	std	Y+2, r25	; 0x02
    4862:	ab 83       	std	Y+3, r26	; 0x03
    4864:	bc 83       	std	Y+4, r27	; 0x04
    4866:	20 e0       	ldi	r18, 0x00	; 0
    4868:	30 e0       	ldi	r19, 0x00	; 0
    486a:	48 ec       	ldi	r20, 0xC8	; 200
    486c:	52 ec       	ldi	r21, 0xC2	; 194
    486e:	bc 01       	movw	r22, r24
    4870:	cd 01       	movw	r24, r26
    4872:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    4876:	88 23       	and	r24, r24
    4878:	4c f4       	brge	.+18     	; 0x488c <Check_Erors+0x196>
    487a:	ed 81       	ldd	r30, Y+5	; 0x05
    487c:	fe 81       	ldd	r31, Y+6	; 0x06
    487e:	e2 59       	subi	r30, 0x92	; 146
    4880:	ff 4f       	sbci	r31, 0xFF	; 255
    4882:	80 81       	ld	r24, Z
    4884:	91 81       	ldd	r25, Z+1	; 0x01
    4886:	8a 5b       	subi	r24, 0xBA	; 186
    4888:	9f 4f       	sbci	r25, 0xFF	; 255
    488a:	aa c1       	rjmp	.+852    	; 0x4be0 <Check_Erors+0x4ea>
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
    488c:	20 e0       	ldi	r18, 0x00	; 0
    488e:	30 e0       	ldi	r19, 0x00	; 0
    4890:	48 ec       	ldi	r20, 0xC8	; 200
    4892:	52 ec       	ldi	r21, 0xC2	; 194
    4894:	ed 81       	ldd	r30, Y+5	; 0x05
    4896:	fe 81       	ldd	r31, Y+6	; 0x06
    4898:	fe 96       	adiw	r30, 0x3e	; 62
    489a:	60 81       	ld	r22, Z
    489c:	71 81       	ldd	r23, Z+1	; 0x01
    489e:	82 81       	ldd	r24, Z+2	; 0x02
    48a0:	93 81       	ldd	r25, Z+3	; 0x03
    48a2:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    48a6:	88 23       	and	r24, r24
    48a8:	54 f4       	brge	.+20     	; 0x48be <Check_Erors+0x1c8>
    48aa:	8d 81       	ldd	r24, Y+5	; 0x05
    48ac:	9e 81       	ldd	r25, Y+6	; 0x06
    48ae:	82 59       	subi	r24, 0x92	; 146
    48b0:	9f 4f       	sbci	r25, 0xFF	; 255
    48b2:	dc 01       	movw	r26, r24
    48b4:	8d 91       	ld	r24, X+
    48b6:	9c 91       	ld	r25, X
    48b8:	80 5b       	subi	r24, 0xB0	; 176
    48ba:	9f 4f       	sbci	r25, 0xFF	; 255
    48bc:	91 c1       	rjmp	.+802    	; 0x4be0 <Check_Erors+0x4ea>
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
    48be:	20 e0       	ldi	r18, 0x00	; 0
    48c0:	30 e0       	ldi	r19, 0x00	; 0
    48c2:	48 ec       	ldi	r20, 0xC8	; 200
    48c4:	52 ec       	ldi	r21, 0xC2	; 194
    48c6:	ed 81       	ldd	r30, Y+5	; 0x05
    48c8:	fe 81       	ldd	r31, Y+6	; 0x06
    48ca:	ee 5b       	subi	r30, 0xBE	; 190
    48cc:	ff 4f       	sbci	r31, 0xFF	; 255
    48ce:	60 81       	ld	r22, Z
    48d0:	71 81       	ldd	r23, Z+1	; 0x01
    48d2:	82 81       	ldd	r24, Z+2	; 0x02
    48d4:	93 81       	ldd	r25, Z+3	; 0x03
    48d6:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    48da:	88 23       	and	r24, r24
    48dc:	4c f4       	brge	.+18     	; 0x48f0 <Check_Erors+0x1fa>
    48de:	ed 81       	ldd	r30, Y+5	; 0x05
    48e0:	fe 81       	ldd	r31, Y+6	; 0x06
    48e2:	e2 59       	subi	r30, 0x92	; 146
    48e4:	ff 4f       	sbci	r31, 0xFF	; 255
    48e6:	80 81       	ld	r24, Z
    48e8:	91 81       	ldd	r25, Z+1	; 0x01
    48ea:	86 5a       	subi	r24, 0xA6	; 166
    48ec:	9f 4f       	sbci	r25, 0xFF	; 255
    48ee:	78 c1       	rjmp	.+752    	; 0x4be0 <Check_Erors+0x4ea>
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
    48f0:	4a 9b       	sbis	0x09, 2	; 9
    48f2:	10 c0       	rjmp	.+32     	; 0x4914 <Check_Erors+0x21e>
    48f4:	ad 81       	ldd	r26, Y+5	; 0x05
    48f6:	be 81       	ldd	r27, Y+6	; 0x06
    48f8:	1f 96       	adiw	r26, 0x0f	; 15
    48fa:	8c 91       	ld	r24, X
    48fc:	1f 97       	sbiw	r26, 0x0f	; 15
    48fe:	81 30       	cpi	r24, 0x01	; 1
    4900:	49 f4       	brne	.+18     	; 0x4914 <Check_Erors+0x21e>
    4902:	fd 01       	movw	r30, r26
    4904:	e2 59       	subi	r30, 0x92	; 146
    4906:	ff 4f       	sbci	r31, 0xFF	; 255
    4908:	80 81       	ld	r24, Z
    490a:	91 81       	ldd	r25, Z+1	; 0x01
    490c:	01 97       	sbiw	r24, 0x01	; 1
    490e:	09 f0       	breq	.+2      	; 0x4912 <Check_Erors+0x21c>
    4910:	56 c1       	rjmp	.+684    	; 0x4bbe <Check_Erors+0x4c8>
    4912:	34 c1       	rjmp	.+616    	; 0x4b7c <Check_Erors+0x486>
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    4914:	4b 9b       	sbis	0x09, 3	; 9
    4916:	10 c0       	rjmp	.+32     	; 0x4938 <Check_Erors+0x242>
    4918:	ed 81       	ldd	r30, Y+5	; 0x05
    491a:	fe 81       	ldd	r31, Y+6	; 0x06
    491c:	87 85       	ldd	r24, Z+15	; 0x0f
    491e:	81 30       	cpi	r24, 0x01	; 1
    4920:	09 f0       	breq	.+2      	; 0x4924 <Check_Erors+0x22e>
    4922:	5b c1       	rjmp	.+694    	; 0x4bda <Check_Erors+0x4e4>
    4924:	ed 81       	ldd	r30, Y+5	; 0x05
    4926:	fe 81       	ldd	r31, Y+6	; 0x06
    4928:	e2 59       	subi	r30, 0x92	; 146
    492a:	ff 4f       	sbci	r31, 0xFF	; 255
    492c:	80 81       	ld	r24, Z
    492e:	91 81       	ldd	r25, Z+1	; 0x01
    4930:	02 97       	sbiw	r24, 0x02	; 2
    4932:	09 f0       	breq	.+2      	; 0x4936 <Check_Erors+0x240>
    4934:	47 c1       	rjmp	.+654    	; 0x4bc4 <Check_Erors+0x4ce>
    4936:	25 c1       	rjmp	.+586    	; 0x4b82 <Check_Erors+0x48c>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    4938:	65 9b       	sbis	0x0c, 5	; 12
    493a:	11 c0       	rjmp	.+34     	; 0x495e <Check_Erors+0x268>
    493c:	ad 81       	ldd	r26, Y+5	; 0x05
    493e:	be 81       	ldd	r27, Y+6	; 0x06
    4940:	1f 96       	adiw	r26, 0x0f	; 15
    4942:	8c 91       	ld	r24, X
    4944:	81 30       	cpi	r24, 0x01	; 1
    4946:	09 f0       	breq	.+2      	; 0x494a <Check_Erors+0x254>
    4948:	40 c1       	rjmp	.+640    	; 0x4bca <Check_Erors+0x4d4>
    494a:	ed 81       	ldd	r30, Y+5	; 0x05
    494c:	fe 81       	ldd	r31, Y+6	; 0x06
    494e:	e2 59       	subi	r30, 0x92	; 146
    4950:	ff 4f       	sbci	r31, 0xFF	; 255
    4952:	80 81       	ld	r24, Z
    4954:	91 81       	ldd	r25, Z+1	; 0x01
    4956:	01 97       	sbiw	r24, 0x01	; 1
    4958:	09 f0       	breq	.+2      	; 0x495c <Check_Erors+0x266>
    495a:	39 c1       	rjmp	.+626    	; 0x4bce <Check_Erors+0x4d8>
    495c:	15 c1       	rjmp	.+554    	; 0x4b88 <Check_Erors+0x492>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    495e:	65 9b       	sbis	0x0c, 5	; 12
    4960:	0e c0       	rjmp	.+28     	; 0x497e <Check_Erors+0x288>
    4962:	ed 81       	ldd	r30, Y+5	; 0x05
    4964:	fe 81       	ldd	r31, Y+6	; 0x06
    4966:	87 85       	ldd	r24, Z+15	; 0x0f
    4968:	81 30       	cpi	r24, 0x01	; 1
    496a:	49 f4       	brne	.+18     	; 0x497e <Check_Erors+0x288>
    496c:	ed 81       	ldd	r30, Y+5	; 0x05
    496e:	fe 81       	ldd	r31, Y+6	; 0x06
    4970:	e2 59       	subi	r30, 0x92	; 146
    4972:	ff 4f       	sbci	r31, 0xFF	; 255
    4974:	80 81       	ld	r24, Z
    4976:	91 81       	ldd	r25, Z+1	; 0x01
    4978:	02 97       	sbiw	r24, 0x02	; 2
    497a:	09 f4       	brne	.+2      	; 0x497e <Check_Erors+0x288>
    497c:	08 c1       	rjmp	.+528    	; 0x4b8e <Check_Erors+0x498>
		//else if ( comp->High_Press > 0){return (140+comp->Index);}
		//else if ( comp->Low_Press>0 ) {return (120+comp->Index);}
		else if ( comp->Low_Press< EElimit->LP_Min ) {return (120+comp->Index);}
    497e:	f8 01       	movw	r30, r16
    4980:	e4 5a       	subi	r30, 0xA4	; 164
    4982:	ff 4f       	sbci	r31, 0xFF	; 255
    4984:	20 81       	ld	r18, Z
    4986:	31 81       	ldd	r19, Z+1	; 0x01
    4988:	42 81       	ldd	r20, Z+2	; 0x02
    498a:	53 81       	ldd	r21, Z+3	; 0x03
    498c:	ad 81       	ldd	r26, Y+5	; 0x05
    498e:	be 81       	ldd	r27, Y+6	; 0x06
    4990:	5e 96       	adiw	r26, 0x1e	; 30
    4992:	6d 91       	ld	r22, X+
    4994:	7d 91       	ld	r23, X+
    4996:	8d 91       	ld	r24, X+
    4998:	9c 91       	ld	r25, X
    499a:	91 97       	sbiw	r26, 0x21	; 33
    499c:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    49a0:	88 23       	and	r24, r24
    49a2:	4c f4       	brge	.+18     	; 0x49b6 <Check_Erors+0x2c0>
    49a4:	ed 81       	ldd	r30, Y+5	; 0x05
    49a6:	fe 81       	ldd	r31, Y+6	; 0x06
    49a8:	e2 59       	subi	r30, 0x92	; 146
    49aa:	ff 4f       	sbci	r31, 0xFF	; 255
    49ac:	80 81       	ld	r24, Z
    49ae:	91 81       	ldd	r25, Z+1	; 0x01
    49b0:	88 58       	subi	r24, 0x88	; 136
    49b2:	9f 4f       	sbci	r25, 0xFF	; 255
    49b4:	15 c1       	rjmp	.+554    	; 0x4be0 <Check_Erors+0x4ea>
		else if ( comp->High_Press > EElimit->HP_Max){return (140+comp->Index);}	
    49b6:	d8 01       	movw	r26, r16
    49b8:	16 96       	adiw	r26, 0x06	; 6
    49ba:	6c 91       	ld	r22, X
    49bc:	70 e0       	ldi	r23, 0x00	; 0
    49be:	80 e0       	ldi	r24, 0x00	; 0
    49c0:	90 e0       	ldi	r25, 0x00	; 0
    49c2:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    49c6:	9b 01       	movw	r18, r22
    49c8:	ac 01       	movw	r20, r24
    49ca:	ed 81       	ldd	r30, Y+5	; 0x05
    49cc:	fe 81       	ldd	r31, Y+6	; 0x06
    49ce:	62 8d       	ldd	r22, Z+26	; 0x1a
    49d0:	73 8d       	ldd	r23, Z+27	; 0x1b
    49d2:	84 8d       	ldd	r24, Z+28	; 0x1c
    49d4:	95 8d       	ldd	r25, Z+29	; 0x1d
    49d6:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    49da:	18 16       	cp	r1, r24
    49dc:	54 f4       	brge	.+20     	; 0x49f2 <Check_Erors+0x2fc>
    49de:	8d 81       	ldd	r24, Y+5	; 0x05
    49e0:	9e 81       	ldd	r25, Y+6	; 0x06
    49e2:	82 59       	subi	r24, 0x92	; 146
    49e4:	9f 4f       	sbci	r25, 0xFF	; 255
    49e6:	dc 01       	movw	r26, r24
    49e8:	8d 91       	ld	r24, X+
    49ea:	9c 91       	ld	r25, X
    49ec:	84 57       	subi	r24, 0x74	; 116
    49ee:	9f 4f       	sbci	r25, 0xFF	; 255
    49f0:	f7 c0       	rjmp	.+494    	; 0x4be0 <Check_Erors+0x4ea>
		else if ( comp->Bac_Temp > EElimit->HEAT_Max && comp->Heating==1){return (160+comp->Index);}
    49f2:	f8 01       	movw	r30, r16
    49f4:	61 85       	ldd	r22, Z+9	; 0x09
    49f6:	70 e0       	ldi	r23, 0x00	; 0
    49f8:	80 e0       	ldi	r24, 0x00	; 0
    49fa:	90 e0       	ldi	r25, 0x00	; 0
    49fc:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    4a00:	9b 01       	movw	r18, r22
    4a02:	ac 01       	movw	r20, r24
    4a04:	c7 01       	movw	r24, r14
    4a06:	b6 01       	movw	r22, r12
    4a08:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    4a0c:	18 16       	cp	r1, r24
    4a0e:	74 f4       	brge	.+28     	; 0x4a2c <Check_Erors+0x336>
    4a10:	ad 81       	ldd	r26, Y+5	; 0x05
    4a12:	be 81       	ldd	r27, Y+6	; 0x06
    4a14:	12 96       	adiw	r26, 0x02	; 2
    4a16:	8c 91       	ld	r24, X
    4a18:	12 97       	sbiw	r26, 0x02	; 2
    4a1a:	88 23       	and	r24, r24
    4a1c:	39 f0       	breq	.+14     	; 0x4a2c <Check_Erors+0x336>
    4a1e:	a2 59       	subi	r26, 0x92	; 146
    4a20:	bf 4f       	sbci	r27, 0xFF	; 255
    4a22:	8d 91       	ld	r24, X+
    4a24:	9c 91       	ld	r25, X
    4a26:	80 56       	subi	r24, 0x60	; 96
    4a28:	9f 4f       	sbci	r25, 0xFF	; 255
    4a2a:	da c0       	rjmp	.+436    	; 0x4be0 <Check_Erors+0x4ea>
		else if ( comp->Bac_Temp < EElimit->HEAT_Min && comp->Cooling==1) {return (170+comp->Index);}	
    4a2c:	f8 01       	movw	r30, r16
    4a2e:	62 85       	ldd	r22, Z+10	; 0x0a
    4a30:	70 e0       	ldi	r23, 0x00	; 0
    4a32:	80 e0       	ldi	r24, 0x00	; 0
    4a34:	90 e0       	ldi	r25, 0x00	; 0
    4a36:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    4a3a:	9b 01       	movw	r18, r22
    4a3c:	ac 01       	movw	r20, r24
    4a3e:	c7 01       	movw	r24, r14
    4a40:	b6 01       	movw	r22, r12
    4a42:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    4a46:	88 23       	and	r24, r24
    4a48:	74 f4       	brge	.+28     	; 0x4a66 <Check_Erors+0x370>
    4a4a:	ad 81       	ldd	r26, Y+5	; 0x05
    4a4c:	be 81       	ldd	r27, Y+6	; 0x06
    4a4e:	13 96       	adiw	r26, 0x03	; 3
    4a50:	8c 91       	ld	r24, X
    4a52:	13 97       	sbiw	r26, 0x03	; 3
    4a54:	88 23       	and	r24, r24
    4a56:	39 f0       	breq	.+14     	; 0x4a66 <Check_Erors+0x370>
    4a58:	a2 59       	subi	r26, 0x92	; 146
    4a5a:	bf 4f       	sbci	r27, 0xFF	; 255
    4a5c:	8d 91       	ld	r24, X+
    4a5e:	9c 91       	ld	r25, X
    4a60:	86 55       	subi	r24, 0x56	; 86
    4a62:	9f 4f       	sbci	r25, 0xFF	; 255
    4a64:	bd c0       	rjmp	.+378    	; 0x4be0 <Check_Erors+0x4ea>
		//else if ( comp->Bac_Temp < EElimit->Cool_Min && comp->Cooling==1){return (170+comp->Index);}
		//else if ( comp->SuperHeat < EElimit->MinSuperheat && comp->checkTrv) {return (180+comp->Index);}
		//else if ( comp->SuperHeat > EElimit->MaxSuperheat && comp->checkTrv && !comp->def) {return (190+comp->Index);}
		//else if ( comp->SuperCool < EElimit->MinSupercool && comp->checkTrv){return (200+comp->Index);}
		//else if ( comp->SuperCool > EElimit->MaxSupercool && comp->checkTrv && !comp->def){return (210+comp->Index);}
		else if ( comp->Ex_Comp > EElimit->ExhaustMax){return 220;}	
    4a66:	f8 01       	movw	r30, r16
    4a68:	66 85       	ldd	r22, Z+14	; 0x0e
    4a6a:	70 e0       	ldi	r23, 0x00	; 0
    4a6c:	80 e0       	ldi	r24, 0x00	; 0
    4a6e:	90 e0       	ldi	r25, 0x00	; 0
    4a70:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    4a74:	9b 01       	movw	r18, r22
    4a76:	ac 01       	movw	r20, r24
    4a78:	69 81       	ldd	r22, Y+1	; 0x01
    4a7a:	7a 81       	ldd	r23, Y+2	; 0x02
    4a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    4a80:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    4a84:	18 16       	cp	r1, r24
    4a86:	0c f4       	brge	.+2      	; 0x4a8a <Check_Erors+0x394>
    4a88:	85 c0       	rjmp	.+266    	; 0x4b94 <Check_Erors+0x49e>
		//else if (abs(comp->Src_In - comp->Src_Out) > EElimit->Delta_source_max && comp->checkErrors && EEpromData.AireToWater==0) {return (230+comp->Index);}
		//else if (abs(comp->Src_In - comp->Src_Out) <  EElimit->Delta_source_min && comp->checkErrors && EEpromData.AireToWater==0) {return (240+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out)  > EElimit->Delta_heating_max && comp->checkErrors) {return (250+comp->Index);}
    4a8a:	a3 01       	movw	r20, r6
    4a8c:	92 01       	movw	r18, r4
    4a8e:	c5 01       	movw	r24, r10
    4a90:	b4 01       	movw	r22, r8
    4a92:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    4a96:	0e 94 7c 55 	call	0xaaf8	; 0xaaf8 <__fixsfsi>
    4a9a:	9b 01       	movw	r18, r22
    4a9c:	77 23       	and	r23, r23
    4a9e:	24 f4       	brge	.+8      	; 0x4aa8 <Check_Erors+0x3b2>
    4aa0:	22 27       	eor	r18, r18
    4aa2:	33 27       	eor	r19, r19
    4aa4:	26 1b       	sub	r18, r22
    4aa6:	37 0b       	sbc	r19, r23
    4aa8:	c9 01       	movw	r24, r18
    4aaa:	d8 01       	movw	r26, r16
    4aac:	54 96       	adiw	r26, 0x14	; 20
    4aae:	2c 91       	ld	r18, X
    4ab0:	30 e0       	ldi	r19, 0x00	; 0
    4ab2:	28 17       	cp	r18, r24
    4ab4:	39 07       	cpc	r19, r25
    4ab6:	64 f4       	brge	.+24     	; 0x4ad0 <Check_Erors+0x3da>
    4ab8:	ed 81       	ldd	r30, Y+5	; 0x05
    4aba:	fe 81       	ldd	r31, Y+6	; 0x06
    4abc:	85 81       	ldd	r24, Z+5	; 0x05
    4abe:	88 23       	and	r24, r24
    4ac0:	d1 f0       	breq	.+52     	; 0x4af6 <Check_Erors+0x400>
    4ac2:	e2 59       	subi	r30, 0x92	; 146
    4ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac6:	80 81       	ld	r24, Z
    4ac8:	91 81       	ldd	r25, Z+1	; 0x01
    4aca:	86 50       	subi	r24, 0x06	; 6
    4acc:	9f 4f       	sbci	r25, 0xFF	; 255
    4ace:	88 c0       	rjmp	.+272    	; 0x4be0 <Check_Erors+0x4ea>
		else if (abs(comp->Heat_In - comp->Heat_Out) < EElimit->Delta_heating_min &&  comp->checkErrors) {return (260+comp->Index);} 
    4ad0:	d8 01       	movw	r26, r16
    4ad2:	53 96       	adiw	r26, 0x13	; 19
    4ad4:	2c 91       	ld	r18, X
    4ad6:	30 e0       	ldi	r19, 0x00	; 0
    4ad8:	82 17       	cp	r24, r18
    4ada:	93 07       	cpc	r25, r19
    4adc:	64 f4       	brge	.+24     	; 0x4af6 <Check_Erors+0x400>
    4ade:	ed 81       	ldd	r30, Y+5	; 0x05
    4ae0:	fe 81       	ldd	r31, Y+6	; 0x06
    4ae2:	85 81       	ldd	r24, Z+5	; 0x05
    4ae4:	88 23       	and	r24, r24
    4ae6:	39 f0       	breq	.+14     	; 0x4af6 <Check_Erors+0x400>
    4ae8:	e2 59       	subi	r30, 0x92	; 146
    4aea:	ff 4f       	sbci	r31, 0xFF	; 255
    4aec:	80 81       	ld	r24, Z
    4aee:	91 81       	ldd	r25, Z+1	; 0x01
    4af0:	8c 5f       	subi	r24, 0xFC	; 252
    4af2:	9e 4f       	sbci	r25, 0xFE	; 254
    4af4:	75 c0       	rjmp	.+234    	; 0x4be0 <Check_Erors+0x4ea>
		else if (!(ADE7758_getStatus() & ZXA) && EElimit->Power_380==1 && comp->Index==1){return 271;} // ADE7758_resetStatus();
    4af6:	f9 dd       	rcall	.-1038   	; 0x46ea <ADE7758_getStatus>
    4af8:	71 fd       	sbrc	r23, 1
    4afa:	0e c0       	rjmp	.+28     	; 0x4b18 <Check_Erors+0x422>
    4afc:	d8 01       	movw	r26, r16
    4afe:	99 96       	adiw	r26, 0x29	; 41
    4b00:	8c 91       	ld	r24, X
    4b02:	81 30       	cpi	r24, 0x01	; 1
    4b04:	49 f4       	brne	.+18     	; 0x4b18 <Check_Erors+0x422>
    4b06:	ed 81       	ldd	r30, Y+5	; 0x05
    4b08:	fe 81       	ldd	r31, Y+6	; 0x06
    4b0a:	e2 59       	subi	r30, 0x92	; 146
    4b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0e:	80 81       	ld	r24, Z
    4b10:	91 81       	ldd	r25, Z+1	; 0x01
    4b12:	01 97       	sbiw	r24, 0x01	; 1
    4b14:	09 f4       	brne	.+2      	; 0x4b18 <Check_Erors+0x422>
		else if (!(ADE7758_getStatus() & ZXB) && EElimit->Power_380==1 && comp->Index==1){return 281;}//ADE7758_resetStatus();
    4b16:	41 c0       	rjmp	.+130    	; 0x4b9a <Check_Erors+0x4a4>
    4b18:	e8 dd       	rcall	.-1072   	; 0x46ea <ADE7758_getStatus>
    4b1a:	72 fd       	sbrc	r23, 2
    4b1c:	0c c0       	rjmp	.+24     	; 0x4b36 <Check_Erors+0x440>
    4b1e:	f8 01       	movw	r30, r16
    4b20:	81 a5       	ldd	r24, Z+41	; 0x29
    4b22:	81 30       	cpi	r24, 0x01	; 1
    4b24:	41 f4       	brne	.+16     	; 0x4b36 <Check_Erors+0x440>
    4b26:	ed 81       	ldd	r30, Y+5	; 0x05
    4b28:	fe 81       	ldd	r31, Y+6	; 0x06
    4b2a:	e2 59       	subi	r30, 0x92	; 146
    4b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2e:	80 81       	ld	r24, Z
    4b30:	91 81       	ldd	r25, Z+1	; 0x01
    4b32:	01 97       	sbiw	r24, 0x01	; 1
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 && comp->Index==1){return 291;}//ADE7758_resetStatus();
    4b34:	a9 f1       	breq	.+106    	; 0x4ba0 <Check_Erors+0x4aa>
    4b36:	d9 dd       	rcall	.-1102   	; 0x46ea <ADE7758_getStatus>
    4b38:	73 fd       	sbrc	r23, 3
    4b3a:	0d c0       	rjmp	.+26     	; 0x4b56 <Check_Erors+0x460>
    4b3c:	d8 01       	movw	r26, r16
    4b3e:	99 96       	adiw	r26, 0x29	; 41
    4b40:	8c 91       	ld	r24, X
    4b42:	81 30       	cpi	r24, 0x01	; 1
    4b44:	41 f4       	brne	.+16     	; 0x4b56 <Check_Erors+0x460>
    4b46:	ed 81       	ldd	r30, Y+5	; 0x05
    4b48:	fe 81       	ldd	r31, Y+6	; 0x06
    4b4a:	e2 59       	subi	r30, 0x92	; 146
    4b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b4e:	80 81       	ld	r24, Z
    4b50:	91 81       	ldd	r25, Z+1	; 0x01
    4b52:	01 97       	sbiw	r24, 0x01	; 1
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1 && comp->Index==1){return 301;}//ADE7758_resetStatus();
    4b54:	41 f1       	breq	.+80     	; 0x4ba6 <Check_Erors+0x4b0>
    4b56:	c9 dd       	rcall	.-1134   	; 0x46ea <ADE7758_getStatus>
    4b58:	83 fd       	sbrc	r24, 3
    4b5a:	28 c0       	rjmp	.+80     	; 0x4bac <Check_Erors+0x4b6>
    4b5c:	f8 01       	movw	r30, r16
    4b5e:	81 a5       	ldd	r24, Z+41	; 0x29
    4b60:	81 30       	cpi	r24, 0x01	; 1
    4b62:	39 f5       	brne	.+78     	; 0x4bb2 <Check_Erors+0x4bc>
    4b64:	8d 81       	ldd	r24, Y+5	; 0x05
    4b66:	9e 81       	ldd	r25, Y+6	; 0x06
    4b68:	82 59       	subi	r24, 0x92	; 146
    4b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    4b6c:	dc 01       	movw	r26, r24
    4b6e:	8d 91       	ld	r24, X+
    4b70:	9c 91       	ld	r25, X
    4b72:	01 97       	sbiw	r24, 0x01	; 1
    4b74:	09 f5       	brne	.+66     	; 0x4bb8 <Check_Erors+0x4c2>
    4b76:	8d e2       	ldi	r24, 0x2D	; 45
    4b78:	91 e0       	ldi	r25, 0x01	; 1
    4b7a:	32 c0       	rjmp	.+100    	; 0x4be0 <Check_Erors+0x4ea>
		else if (comp->Src_Out<-100) {return (60+comp->Index);}
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
    4b7c:	85 e6       	ldi	r24, 0x65	; 101
    4b7e:	90 e0       	ldi	r25, 0x00	; 0
    4b80:	2f c0       	rjmp	.+94     	; 0x4be0 <Check_Erors+0x4ea>
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    4b82:	86 e6       	ldi	r24, 0x66	; 102
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	2c c0       	rjmp	.+88     	; 0x4be0 <Check_Erors+0x4ea>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    4b88:	8f e6       	ldi	r24, 0x6F	; 111
    4b8a:	90 e0       	ldi	r25, 0x00	; 0
    4b8c:	29 c0       	rjmp	.+82     	; 0x4be0 <Check_Erors+0x4ea>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    4b8e:	80 e7       	ldi	r24, 0x70	; 112
    4b90:	90 e0       	ldi	r25, 0x00	; 0
    4b92:	26 c0       	rjmp	.+76     	; 0x4be0 <Check_Erors+0x4ea>
		//else if ( comp->Bac_Temp < EElimit->Cool_Min && comp->Cooling==1){return (170+comp->Index);}
		//else if ( comp->SuperHeat < EElimit->MinSuperheat && comp->checkTrv) {return (180+comp->Index);}
		//else if ( comp->SuperHeat > EElimit->MaxSuperheat && comp->checkTrv && !comp->def) {return (190+comp->Index);}
		//else if ( comp->SuperCool < EElimit->MinSupercool && comp->checkTrv){return (200+comp->Index);}
		//else if ( comp->SuperCool > EElimit->MaxSupercool && comp->checkTrv && !comp->def){return (210+comp->Index);}
		else if ( comp->Ex_Comp > EElimit->ExhaustMax){return 220;}	
    4b94:	8c ed       	ldi	r24, 0xDC	; 220
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	23 c0       	rjmp	.+70     	; 0x4be0 <Check_Erors+0x4ea>
		//else if (abs(comp->Src_In - comp->Src_Out) > EElimit->Delta_source_max && comp->checkErrors && EEpromData.AireToWater==0) {return (230+comp->Index);}
		//else if (abs(comp->Src_In - comp->Src_Out) <  EElimit->Delta_source_min && comp->checkErrors && EEpromData.AireToWater==0) {return (240+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out)  > EElimit->Delta_heating_max && comp->checkErrors) {return (250+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out) < EElimit->Delta_heating_min &&  comp->checkErrors) {return (260+comp->Index);} 
		else if (!(ADE7758_getStatus() & ZXA) && EElimit->Power_380==1 && comp->Index==1){return 271;} // ADE7758_resetStatus();
    4b9a:	8f e0       	ldi	r24, 0x0F	; 15
    4b9c:	91 e0       	ldi	r25, 0x01	; 1
    4b9e:	20 c0       	rjmp	.+64     	; 0x4be0 <Check_Erors+0x4ea>
		else if (!(ADE7758_getStatus() & ZXB) && EElimit->Power_380==1 && comp->Index==1){return 281;}//ADE7758_resetStatus();
    4ba0:	89 e1       	ldi	r24, 0x19	; 25
    4ba2:	91 e0       	ldi	r25, 0x01	; 1
    4ba4:	1d c0       	rjmp	.+58     	; 0x4be0 <Check_Erors+0x4ea>
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 && comp->Index==1){return 291;}//ADE7758_resetStatus();
    4ba6:	83 e2       	ldi	r24, 0x23	; 35
    4ba8:	91 e0       	ldi	r25, 0x01	; 1
    4baa:	1a c0       	rjmp	.+52     	; 0x4be0 <Check_Erors+0x4ea>
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1 && comp->Index==1){return 301;}//ADE7758_resetStatus();
		//else if (comp->Src_In > EElimit->Source_Max){return (400+comp->Index);}
		//else if (comp->Src_In < EElimit->Source_Min){return (410+comp->Index);}			
		else {return 0;}
    4bac:	80 e0       	ldi	r24, 0x00	; 0
    4bae:	90 e0       	ldi	r25, 0x00	; 0
    4bb0:	17 c0       	rjmp	.+46     	; 0x4be0 <Check_Erors+0x4ea>
    4bb2:	80 e0       	ldi	r24, 0x00	; 0
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	14 c0       	rjmp	.+40     	; 0x4be0 <Check_Erors+0x4ea>
    4bb8:	80 e0       	ldi	r24, 0x00	; 0
    4bba:	90 e0       	ldi	r25, 0x00	; 0
    4bbc:	11 c0       	rjmp	.+34     	; 0x4be0 <Check_Erors+0x4ea>
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    4bbe:	4b 99       	sbic	0x09, 3	; 9
    4bc0:	b1 ce       	rjmp	.-670    	; 0x4924 <Check_Erors+0x22e>
    4bc2:	08 c0       	rjmp	.+16     	; 0x4bd4 <Check_Erors+0x4de>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    4bc4:	65 99       	sbic	0x0c, 5	; 12
    4bc6:	c1 ce       	rjmp	.-638    	; 0x494a <Check_Erors+0x254>
    4bc8:	ca ce       	rjmp	.-620    	; 0x495e <Check_Erors+0x268>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    4bca:	8c b1       	in	r24, 0x0c	; 12
    4bcc:	d8 ce       	rjmp	.-592    	; 0x497e <Check_Erors+0x288>
    4bce:	65 99       	sbic	0x0c, 5	; 12
    4bd0:	cd ce       	rjmp	.-614    	; 0x496c <Check_Erors+0x276>
    4bd2:	d5 ce       	rjmp	.-598    	; 0x497e <Check_Erors+0x288>
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    4bd4:	65 99       	sbic	0x0c, 5	; 12
    4bd6:	b9 ce       	rjmp	.-654    	; 0x494a <Check_Erors+0x254>
    4bd8:	c2 ce       	rjmp	.-636    	; 0x495e <Check_Erors+0x268>
    4bda:	65 99       	sbic	0x0c, 5	; 12
    4bdc:	f6 cf       	rjmp	.-20     	; 0x4bca <Check_Erors+0x4d4>
    4bde:	bf ce       	rjmp	.-642    	; 0x495e <Check_Erors+0x268>
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 && comp->Index==1){return 291;}//ADE7758_resetStatus();
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1 && comp->Index==1){return 301;}//ADE7758_resetStatus();
		//else if (comp->Src_In > EElimit->Source_Max){return (400+comp->Index);}
		//else if (comp->Src_In < EElimit->Source_Min){return (410+comp->Index);}			
		else {return 0;}
    4be0:	26 96       	adiw	r28, 0x06	; 6
    4be2:	0f b6       	in	r0, 0x3f	; 63
    4be4:	f8 94       	cli
    4be6:	de bf       	out	0x3e, r29	; 62
    4be8:	0f be       	out	0x3f, r0	; 63
    4bea:	cd bf       	out	0x3d, r28	; 61
    4bec:	df 91       	pop	r29
    4bee:	cf 91       	pop	r28
    4bf0:	1f 91       	pop	r17
    4bf2:	0f 91       	pop	r16
    4bf4:	ff 90       	pop	r15
    4bf6:	ef 90       	pop	r14
    4bf8:	df 90       	pop	r13
    4bfa:	cf 90       	pop	r12
    4bfc:	bf 90       	pop	r11
    4bfe:	af 90       	pop	r10
    4c00:	9f 90       	pop	r9
    4c02:	8f 90       	pop	r8
    4c04:	7f 90       	pop	r7
    4c06:	6f 90       	pop	r6
    4c08:	5f 90       	pop	r5
    4c0a:	4f 90       	pop	r4
    4c0c:	08 95       	ret

00004c0e <start_1_Timer>:
	
	
}
void start_1_Timer()
{
	TIMSK1 |= (1<<OCIE1A);
    4c0e:	ef e6       	ldi	r30, 0x6F	; 111
    4c10:	f0 e0       	ldi	r31, 0x00	; 0
    4c12:	80 81       	ld	r24, Z
    4c14:	82 60       	ori	r24, 0x02	; 2
    4c16:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11);//1<<CS10 |
    4c18:	e1 e8       	ldi	r30, 0x81	; 129
    4c1a:	f0 e0       	ldi	r31, 0x00	; 0
    4c1c:	80 81       	ld	r24, Z
    4c1e:	82 60       	ori	r24, 0x02	; 2
    4c20:	80 83       	st	Z, r24
    4c22:	08 95       	ret

00004c24 <stop_1_Timer>:
	
}
void stop_1_Timer()
{
	TCCR1B &= ~ (1<<CS10);
    4c24:	e1 e8       	ldi	r30, 0x81	; 129
    4c26:	f0 e0       	ldi	r31, 0x00	; 0
    4c28:	80 81       	ld	r24, Z
    4c2a:	8e 7f       	andi	r24, 0xFE	; 254
    4c2c:	80 83       	st	Z, r24
	TCNT1=0;
    4c2e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    4c32:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TIMSK1 &= ~( _BV( OCIE1A ) );
    4c36:	ef e6       	ldi	r30, 0x6F	; 111
    4c38:	f0 e0       	ldi	r31, 0x00	; 0
    4c3a:	80 81       	ld	r24, Z
    4c3c:	8d 7f       	andi	r24, 0xFD	; 253
    4c3e:	80 83       	st	Z, r24
	TIFR1 |= _BV( OCF1A );
    4c40:	b1 9a       	sbi	0x16, 1	; 22
    4c42:	08 95       	ret

00004c44 <timer_1_Init>:
void timer_1_Init()
{
	// --- TIMER1_COMPA irq ---
	// selected time = 1562 us (24992 ticks)
	// prescaler = 1 (1 ticks ... 4.096 ms)
	TCCR1B = (1<<WGM12);//|(1<<CS10)
    4c44:	88 e0       	ldi	r24, 0x08	; 8
    4c46:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	OCR1AH = 158 ;//158
    4c4a:	8e e9       	ldi	r24, 0x9E	; 158
    4c4c:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL =96;//96
    4c50:	80 e6       	ldi	r24, 0x60	; 96
    4c52:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	stop_1_Timer();
    4c56:	e6 cf       	rjmp	.-52     	; 0x4c24 <stop_1_Timer>
    4c58:	08 95       	ret

00004c5a <readSysReg>:
	TIMSK1 &= ~( _BV( OCIE1A ) );
	TIFR1 |= _BV( OCF1A );
}

int readSysReg(xCompressor*compPtr,xEEdata *eeprom,uint16_t adress)
{
    4c5a:	cf 93       	push	r28
    4c5c:	df 93       	push	r29
	int temp;
	switch(adress)
    4c5e:	fa 01       	movw	r30, r20
    4c60:	3a 97       	sbiw	r30, 0x0a	; 10
    4c62:	e7 3d       	cpi	r30, 0xD7	; 215
    4c64:	41 e0       	ldi	r20, 0x01	; 1
    4c66:	f4 07       	cpc	r31, r20
    4c68:	08 f0       	brcs	.+2      	; 0x4c6c <readSysReg+0x12>
    4c6a:	11 c2       	rjmp	.+1058   	; 0x508e <readSysReg+0x434>
    4c6c:	eb 01       	movw	r28, r22
    4c6e:	dc 01       	movw	r26, r24
    4c70:	88 27       	eor	r24, r24
    4c72:	e4 56       	subi	r30, 0x64	; 100
    4c74:	ff 4f       	sbci	r31, 0xFF	; 255
    4c76:	8f 4f       	sbci	r24, 0xFF	; 255
    4c78:	0c 94 e9 5a 	jmp	0xb5d2	; 0xb5d2 <__tablejump2__>
	{
		case 11: case 12: temp =  (int)   compPtr->compOn;break;
    4c7c:	1b 96       	adiw	r26, 0x0b	; 11
    4c7e:	6c 91       	ld	r22, X
    4c80:	26 2f       	mov	r18, r22
    4c82:	30 e0       	ldi	r19, 0x00	; 0
    4c84:	04 c2       	rjmp	.+1032   	; 0x508e <readSysReg+0x434>
		case 21: case 22: temp =   (int)  compPtr->srcPOn;break;
    4c86:	1f 96       	adiw	r26, 0x0f	; 15
    4c88:	6c 91       	ld	r22, X
    4c8a:	26 2f       	mov	r18, r22
    4c8c:	30 e0       	ldi	r19, 0x00	; 0
    4c8e:	ff c1       	rjmp	.+1022   	; 0x508e <readSysReg+0x434>
		case 31: case 32: temp =   (int)  compPtr->heatPOn;break;
    4c90:	1c 96       	adiw	r26, 0x0c	; 12
    4c92:	6c 91       	ld	r22, X
    4c94:	26 2f       	mov	r18, r22
    4c96:	30 e0       	ldi	r19, 0x00	; 0
    4c98:	fa c1       	rjmp	.+1012   	; 0x508e <readSysReg+0x434>
		case 41: case 42: temp =   (int)  compPtr->revVOn;break;
    4c9a:	1e 96       	adiw	r26, 0x0e	; 14
    4c9c:	6c 91       	ld	r22, X
    4c9e:	26 2f       	mov	r18, r22
    4ca0:	30 e0       	ldi	r19, 0x00	; 0
    4ca2:	f5 c1       	rjmp	.+1002   	; 0x508e <readSysReg+0x434>
		case 51: case 52: temp =   (int)  compPtr->threeWOn;break;
    4ca4:	1d 96       	adiw	r26, 0x0d	; 13
    4ca6:	6c 91       	ld	r22, X
    4ca8:	26 2f       	mov	r18, r22
    4caa:	30 e0       	ldi	r19, 0x00	; 0
    4cac:	f0 c1       	rjmp	.+992    	; 0x508e <readSysReg+0x434>
		case 61: case 62: temp =   (int)  compPtr->Trv_position;break;
    4cae:	a6 59       	subi	r26, 0x96	; 150
    4cb0:	bf 4f       	sbci	r27, 0xFF	; 255
    4cb2:	2d 91       	ld	r18, X+
    4cb4:	3c 91       	ld	r19, X
    4cb6:	eb c1       	rjmp	.+982    	; 0x508e <readSysReg+0x434>
		
		case 71: case 72: temp =   (int)   (compPtr->Bac_Temp*10);break;
    4cb8:	20 e0       	ldi	r18, 0x00	; 0
    4cba:	30 e0       	ldi	r19, 0x00	; 0
    4cbc:	40 e2       	ldi	r20, 0x20	; 32
    4cbe:	51 e4       	ldi	r21, 0x41	; 65
    4cc0:	56 96       	adiw	r26, 0x16	; 22
    4cc2:	6d 91       	ld	r22, X+
    4cc4:	7d 91       	ld	r23, X+
    4cc6:	8d 91       	ld	r24, X+
    4cc8:	9c 91       	ld	r25, X
    4cca:	59 97       	sbiw	r26, 0x19	; 25
    4ccc:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    4cd0:	0e 94 7c 55 	call	0xaaf8	; 0xaaf8 <__fixsfsi>
    4cd4:	9b 01       	movw	r18, r22
    4cd6:	db c1       	rjmp	.+950    	; 0x508e <readSysReg+0x434>
		case 81: case 82:  temp =   (int)  (compPtr->Dhw_Temp*10);break;
    4cd8:	20 e0       	ldi	r18, 0x00	; 0
    4cda:	30 e0       	ldi	r19, 0x00	; 0
    4cdc:	40 e2       	ldi	r20, 0x20	; 32
    4cde:	51 e4       	ldi	r21, 0x41	; 65
    4ce0:	52 96       	adiw	r26, 0x12	; 18
    4ce2:	6d 91       	ld	r22, X+
    4ce4:	7d 91       	ld	r23, X+
    4ce6:	8d 91       	ld	r24, X+
    4ce8:	9c 91       	ld	r25, X
    4cea:	55 97       	sbiw	r26, 0x15	; 21
    4cec:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    4cf0:	0e 94 7c 55 	call	0xaaf8	; 0xaaf8 <__fixsfsi>
    4cf4:	9b 01       	movw	r18, r22
    4cf6:	cb c1       	rjmp	.+918    	; 0x508e <readSysReg+0x434>
		case 91:case 92:  temp =  (int)  (compPtr->Src_In*10);break;
    4cf8:	20 e0       	ldi	r18, 0x00	; 0
    4cfa:	30 e0       	ldi	r19, 0x00	; 0
    4cfc:	40 e2       	ldi	r20, 0x20	; 32
    4cfe:	51 e4       	ldi	r21, 0x41	; 65
    4d00:	d2 96       	adiw	r26, 0x32	; 50
    4d02:	6d 91       	ld	r22, X+
    4d04:	7d 91       	ld	r23, X+
    4d06:	8d 91       	ld	r24, X+
    4d08:	9c 91       	ld	r25, X
    4d0a:	d5 97       	sbiw	r26, 0x35	; 53
    4d0c:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    4d10:	0e 94 7c 55 	call	0xaaf8	; 0xaaf8 <__fixsfsi>
    4d14:	9b 01       	movw	r18, r22
    4d16:	bb c1       	rjmp	.+886    	; 0x508e <readSysReg+0x434>
		case 101:case 102:  temp =  (int)  (compPtr->Src_Out*10);break;
    4d18:	20 e0       	ldi	r18, 0x00	; 0
    4d1a:	30 e0       	ldi	r19, 0x00	; 0
    4d1c:	40 e2       	ldi	r20, 0x20	; 32
    4d1e:	51 e4       	ldi	r21, 0x41	; 65
    4d20:	d6 96       	adiw	r26, 0x36	; 54
    4d22:	6d 91       	ld	r22, X+
    4d24:	7d 91       	ld	r23, X+
    4d26:	8d 91       	ld	r24, X+
    4d28:	9c 91       	ld	r25, X
    4d2a:	d9 97       	sbiw	r26, 0x39	; 57
    4d2c:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    4d30:	0e 94 7c 55 	call	0xaaf8	; 0xaaf8 <__fixsfsi>
    4d34:	9b 01       	movw	r18, r22
    4d36:	ab c1       	rjmp	.+854    	; 0x508e <readSysReg+0x434>
		case 111:case 112: temp =   (int)  (compPtr->error);break;
    4d38:	a4 59       	subi	r26, 0x94	; 148
    4d3a:	bf 4f       	sbci	r27, 0xFF	; 255
    4d3c:	2d 91       	ld	r18, X+
    4d3e:	3c 91       	ld	r19, X
    4d40:	a6 c1       	rjmp	.+844    	; 0x508e <readSysReg+0x434>
		case 121: case 122: temp =   (int)   (compPtr->Cond_Temp*10);break;
    4d42:	ae 5b       	subi	r26, 0xBE	; 190
    4d44:	bf 4f       	sbci	r27, 0xFF	; 255
    4d46:	20 e0       	ldi	r18, 0x00	; 0
    4d48:	30 e0       	ldi	r19, 0x00	; 0
    4d4a:	40 e2       	ldi	r20, 0x20	; 32
    4d4c:	51 e4       	ldi	r21, 0x41	; 65
    4d4e:	6d 91       	ld	r22, X+
    4d50:	7d 91       	ld	r23, X+
    4d52:	8d 91       	ld	r24, X+
    4d54:	9c 91       	ld	r25, X
    4d56:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    4d5a:	0e 94 7c 55 	call	0xaaf8	; 0xaaf8 <__fixsfsi>
    4d5e:	9b 01       	movw	r18, r22
    4d60:	96 c1       	rjmp	.+812    	; 0x508e <readSysReg+0x434>
		case 131:case 132: temp =   (int)  (compPtr->Suc_Comp*10);break;
    4d62:	de 96       	adiw	r26, 0x3e	; 62
    4d64:	20 e0       	ldi	r18, 0x00	; 0
    4d66:	30 e0       	ldi	r19, 0x00	; 0
    4d68:	40 e2       	ldi	r20, 0x20	; 32
    4d6a:	51 e4       	ldi	r21, 0x41	; 65
    4d6c:	6d 91       	ld	r22, X+
    4d6e:	7d 91       	ld	r23, X+
    4d70:	8d 91       	ld	r24, X+
    4d72:	9c 91       	ld	r25, X
    4d74:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    4d78:	0e 94 7c 55 	call	0xaaf8	; 0xaaf8 <__fixsfsi>
    4d7c:	9b 01       	movw	r18, r22
    4d7e:	87 c1       	rjmp	.+782    	; 0x508e <readSysReg+0x434>
		case 141:case 142: temp =   (int)  (compPtr->SuperCool*10);break;
    4d80:	a6 5b       	subi	r26, 0xB6	; 182
    4d82:	bf 4f       	sbci	r27, 0xFF	; 255
    4d84:	20 e0       	ldi	r18, 0x00	; 0
    4d86:	30 e0       	ldi	r19, 0x00	; 0
    4d88:	40 e2       	ldi	r20, 0x20	; 32
    4d8a:	51 e4       	ldi	r21, 0x41	; 65
    4d8c:	6d 91       	ld	r22, X+
    4d8e:	7d 91       	ld	r23, X+
    4d90:	8d 91       	ld	r24, X+
    4d92:	9c 91       	ld	r25, X
    4d94:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    4d98:	0e 94 7c 55 	call	0xaaf8	; 0xaaf8 <__fixsfsi>
    4d9c:	9b 01       	movw	r18, r22
    4d9e:	77 c1       	rjmp	.+750    	; 0x508e <readSysReg+0x434>
		case 151:case 152: temp =   (int)  (compPtr->SuperHeat*10);break;
    4da0:	aa 5b       	subi	r26, 0xBA	; 186
    4da2:	bf 4f       	sbci	r27, 0xFF	; 255
    4da4:	20 e0       	ldi	r18, 0x00	; 0
    4da6:	30 e0       	ldi	r19, 0x00	; 0
    4da8:	40 e2       	ldi	r20, 0x20	; 32
    4daa:	51 e4       	ldi	r21, 0x41	; 65
    4dac:	6d 91       	ld	r22, X+
    4dae:	7d 91       	ld	r23, X+
    4db0:	8d 91       	ld	r24, X+
    4db2:	9c 91       	ld	r25, X
    4db4:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    4db8:	0e 94 7c 55 	call	0xaaf8	; 0xaaf8 <__fixsfsi>
    4dbc:	9b 01       	movw	r18, r22
    4dbe:	67 c1       	rjmp	.+718    	; 0x508e <readSysReg+0x434>
		case 161:case 162:  temp =  (int)  (compPtr->Heat_In*10);break;
    4dc0:	20 e0       	ldi	r18, 0x00	; 0
    4dc2:	30 e0       	ldi	r19, 0x00	; 0
    4dc4:	40 e2       	ldi	r20, 0x20	; 32
    4dc6:	51 e4       	ldi	r21, 0x41	; 65
    4dc8:	9e 96       	adiw	r26, 0x2e	; 46
    4dca:	6d 91       	ld	r22, X+
    4dcc:	7d 91       	ld	r23, X+
    4dce:	8d 91       	ld	r24, X+
    4dd0:	9c 91       	ld	r25, X
    4dd2:	d1 97       	sbiw	r26, 0x31	; 49
    4dd4:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    4dd8:	0e 94 7c 55 	call	0xaaf8	; 0xaaf8 <__fixsfsi>
    4ddc:	9b 01       	movw	r18, r22
    4dde:	57 c1       	rjmp	.+686    	; 0x508e <readSysReg+0x434>
		case 171:case 172:  temp =  (int)  (compPtr->Heat_Out*10);break;		
    4de0:	20 e0       	ldi	r18, 0x00	; 0
    4de2:	30 e0       	ldi	r19, 0x00	; 0
    4de4:	40 e2       	ldi	r20, 0x20	; 32
    4de6:	51 e4       	ldi	r21, 0x41	; 65
    4de8:	9a 96       	adiw	r26, 0x2a	; 42
    4dea:	6d 91       	ld	r22, X+
    4dec:	7d 91       	ld	r23, X+
    4dee:	8d 91       	ld	r24, X+
    4df0:	9c 91       	ld	r25, X
    4df2:	9d 97       	sbiw	r26, 0x2d	; 45
    4df4:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    4df8:	0e 94 7c 55 	call	0xaaf8	; 0xaaf8 <__fixsfsi>
    4dfc:	9b 01       	movw	r18, r22
    4dfe:	47 c1       	rjmp	.+654    	; 0x508e <readSysReg+0x434>
		case 181:case 182: temp =   (int)  (compPtr->High_Press*10);break;
    4e00:	20 e0       	ldi	r18, 0x00	; 0
    4e02:	30 e0       	ldi	r19, 0x00	; 0
    4e04:	40 e2       	ldi	r20, 0x20	; 32
    4e06:	51 e4       	ldi	r21, 0x41	; 65
    4e08:	5a 96       	adiw	r26, 0x1a	; 26
    4e0a:	6d 91       	ld	r22, X+
    4e0c:	7d 91       	ld	r23, X+
    4e0e:	8d 91       	ld	r24, X+
    4e10:	9c 91       	ld	r25, X
    4e12:	5d 97       	sbiw	r26, 0x1d	; 29
    4e14:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    4e18:	0e 94 7c 55 	call	0xaaf8	; 0xaaf8 <__fixsfsi>
    4e1c:	9b 01       	movw	r18, r22
    4e1e:	37 c1       	rjmp	.+622    	; 0x508e <readSysReg+0x434>
		case 191:case 192: temp =   (int)  (compPtr->Low_Press*10);break;
    4e20:	20 e0       	ldi	r18, 0x00	; 0
    4e22:	30 e0       	ldi	r19, 0x00	; 0
    4e24:	40 e2       	ldi	r20, 0x20	; 32
    4e26:	51 e4       	ldi	r21, 0x41	; 65
    4e28:	5e 96       	adiw	r26, 0x1e	; 30
    4e2a:	6d 91       	ld	r22, X+
    4e2c:	7d 91       	ld	r23, X+
    4e2e:	8d 91       	ld	r24, X+
    4e30:	9c 91       	ld	r25, X
    4e32:	91 97       	sbiw	r26, 0x21	; 33
    4e34:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    4e38:	0e 94 7c 55 	call	0xaaf8	; 0xaaf8 <__fixsfsi>
    4e3c:	9b 01       	movw	r18, r22
    4e3e:	27 c1       	rjmp	.+590    	; 0x508e <readSysReg+0x434>
		case 201:case 202: temp =   (int)  (compPtr->Ex_Comp);break;
    4e40:	da 96       	adiw	r26, 0x3a	; 58
    4e42:	6d 91       	ld	r22, X+
    4e44:	7d 91       	ld	r23, X+
    4e46:	8d 91       	ld	r24, X+
    4e48:	9c 91       	ld	r25, X
    4e4a:	dd 97       	sbiw	r26, 0x3d	; 61
    4e4c:	0e 94 7c 55 	call	0xaaf8	; 0xaaf8 <__fixsfsi>
    4e50:	9b 01       	movw	r18, r22
    4e52:	1d c1       	rjmp	.+570    	; 0x508e <readSysReg+0x434>
		
	
		
		//-----------------------------------eeprom--------
		case 10:  temp =    eeprom->Compressor_delay;break;
    4e54:	68 81       	ld	r22, Y
    4e56:	26 2f       	mov	r18, r22
    4e58:	30 e0       	ldi	r19, 0x00	; 0
    4e5a:	19 c1       	rjmp	.+562    	; 0x508e <readSysReg+0x434>
		case 20:  temp =    eeprom->HeatingPump_delay;break;
    4e5c:	6b 81       	ldd	r22, Y+3	; 0x03
    4e5e:	26 2f       	mov	r18, r22
    4e60:	30 e0       	ldi	r19, 0x00	; 0
    4e62:	15 c1       	rjmp	.+554    	; 0x508e <readSysReg+0x434>
		case 30:  temp =    eeprom->Source_Pump_delay;break;
    4e64:	69 81       	ldd	r22, Y+1	; 0x01
    4e66:	26 2f       	mov	r18, r22
    4e68:	30 e0       	ldi	r19, 0x00	; 0
    4e6a:	11 c1       	rjmp	.+546    	; 0x508e <readSysReg+0x434>
		case 40:  temp =    eeprom->Revers_Valve_delay;break;
    4e6c:	6a 81       	ldd	r22, Y+2	; 0x02
    4e6e:	26 2f       	mov	r18, r22
    4e70:	30 e0       	ldi	r19, 0x00	; 0
    4e72:	0d c1       	rjmp	.+538    	; 0x508e <readSysReg+0x434>
		case 50:  temp =    eeprom->Three_Way_delay;break;
    4e74:	6c 81       	ldd	r22, Y+4	; 0x04
    4e76:	26 2f       	mov	r18, r22
    4e78:	30 e0       	ldi	r19, 0x00	; 0
    4e7a:	09 c1       	rjmp	.+530    	; 0x508e <readSysReg+0x434>
		case 60:  temp =    (int)  eeprom->Cool_Max;break;
    4e7c:	6c 85       	ldd	r22, Y+12	; 0x0c
    4e7e:	26 2f       	mov	r18, r22
    4e80:	30 e0       	ldi	r19, 0x00	; 0
    4e82:	05 c1       	rjmp	.+522    	; 0x508e <readSysReg+0x434>
		case 70:  temp =    (int)  eeprom->Cool_Min;break;
    4e84:	6d 85       	ldd	r22, Y+13	; 0x0d
    4e86:	26 2f       	mov	r18, r22
    4e88:	30 e0       	ldi	r19, 0x00	; 0
    4e8a:	01 c1       	rjmp	.+514    	; 0x508e <readSysReg+0x434>
		case 80:  temp =    (int)  eeprom->HEAT_Max;break;
    4e8c:	69 85       	ldd	r22, Y+9	; 0x09
    4e8e:	26 2f       	mov	r18, r22
    4e90:	30 e0       	ldi	r19, 0x00	; 0
    4e92:	fd c0       	rjmp	.+506    	; 0x508e <readSysReg+0x434>
		case 90:  temp =    (int)  eeprom->HEAT_Min;break;
    4e94:	6a 85       	ldd	r22, Y+10	; 0x0a
    4e96:	26 2f       	mov	r18, r22
    4e98:	30 e0       	ldi	r19, 0x00	; 0
    4e9a:	f9 c0       	rjmp	.+498    	; 0x508e <readSysReg+0x434>
		case 100: temp =    (int)  eeprom->Delta_heating_max;break;
    4e9c:	6c 89       	ldd	r22, Y+20	; 0x14
    4e9e:	26 2f       	mov	r18, r22
    4ea0:	30 e0       	ldi	r19, 0x00	; 0
    4ea2:	f5 c0       	rjmp	.+490    	; 0x508e <readSysReg+0x434>
		case 110: temp =    (int)  eeprom->Delta_heating_min;break;
    4ea4:	6b 89       	ldd	r22, Y+19	; 0x13
    4ea6:	26 2f       	mov	r18, r22
    4ea8:	30 e0       	ldi	r19, 0x00	; 0
    4eaa:	f1 c0       	rjmp	.+482    	; 0x508e <readSysReg+0x434>
		case 120: temp =    (int)  eeprom->Delta_source_max;break;
    4eac:	6e 89       	ldd	r22, Y+22	; 0x16
    4eae:	26 2f       	mov	r18, r22
    4eb0:	30 e0       	ldi	r19, 0x00	; 0
    4eb2:	ed c0       	rjmp	.+474    	; 0x508e <readSysReg+0x434>
		case 130: temp =    (int)  eeprom->Delta_source_min;break;
    4eb4:	6d 89       	ldd	r22, Y+21	; 0x15
    4eb6:	26 2f       	mov	r18, r22
    4eb8:	30 e0       	ldi	r19, 0x00	; 0
    4eba:	e9 c0       	rjmp	.+466    	; 0x508e <readSysReg+0x434>
		case 140: temp =    (int)  eeprom->diffCOOL;break;
    4ebc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4ebe:	26 2f       	mov	r18, r22
    4ec0:	30 e0       	ldi	r19, 0x00	; 0
    4ec2:	e5 c0       	rjmp	.+458    	; 0x508e <readSysReg+0x434>
		case 150: temp =    (int)  eeprom->diffDHW ;break;
    4ec4:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4ec6:	26 2f       	mov	r18, r22
    4ec8:	30 e0       	ldi	r19, 0x00	; 0
    4eca:	e1 c0       	rjmp	.+450    	; 0x508e <readSysReg+0x434>
		case 160: temp =    (int)  eeprom->diffHEAT;break;
    4ecc:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4ece:	26 2f       	mov	r18, r22
    4ed0:	30 e0       	ldi	r19, 0x00	; 0
    4ed2:	dd c0       	rjmp	.+442    	; 0x508e <readSysReg+0x434>
		case 170: temp =    (int)  eeprom->AireToWater;break;
    4ed4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4ed6:	26 2f       	mov	r18, r22
    4ed8:	30 e0       	ldi	r19, 0x00	; 0
    4eda:	d9 c0       	rjmp	.+434    	; 0x508e <readSysReg+0x434>
		case 180: temp =    (int)  eeprom->ExhaustMax;break;
    4edc:	6e 85       	ldd	r22, Y+14	; 0x0e
    4ede:	26 2f       	mov	r18, r22
    4ee0:	30 e0       	ldi	r19, 0x00	; 0
    4ee2:	d5 c0       	rjmp	.+426    	; 0x508e <readSysReg+0x434>
		case 190: temp =    (int)  eeprom->cool;break;
    4ee4:	6f a1       	ldd	r22, Y+39	; 0x27
    4ee6:	26 2f       	mov	r18, r22
    4ee8:	30 e0       	ldi	r19, 0x00	; 0
    4eea:	d1 c0       	rjmp	.+418    	; 0x508e <readSysReg+0x434>
		case 200: temp =    (int)  eeprom->heat;break;
    4eec:	6e a1       	ldd	r22, Y+38	; 0x26
    4eee:	26 2f       	mov	r18, r22
    4ef0:	30 e0       	ldi	r19, 0x00	; 0
    4ef2:	cd c0       	rjmp	.+410    	; 0x508e <readSysReg+0x434>
		case 210: temp =    (int)  eeprom->heatWater;break;
    4ef4:	6d a1       	ldd	r22, Y+37	; 0x25
    4ef6:	26 2f       	mov	r18, r22
    4ef8:	30 e0       	ldi	r19, 0x00	; 0
    4efa:	c9 c0       	rjmp	.+402    	; 0x508e <readSysReg+0x434>
		case 220: temp =    (int)  eeprom->HP_Max;break;
    4efc:	6e 81       	ldd	r22, Y+6	; 0x06
    4efe:	26 2f       	mov	r18, r22
    4f00:	30 e0       	ldi	r19, 0x00	; 0
    4f02:	c5 c0       	rjmp	.+394    	; 0x508e <readSysReg+0x434>
		case 230: temp =    (int)  eeprom->LP_Max;break;
    4f04:	68 85       	ldd	r22, Y+8	; 0x08
    4f06:	26 2f       	mov	r18, r22
    4f08:	30 e0       	ldi	r19, 0x00	; 0
    4f0a:	c1 c0       	rjmp	.+386    	; 0x508e <readSysReg+0x434>
		case 240: temp =    (int)  eeprom->HP_Min;break;
    4f0c:	6f 81       	ldd	r22, Y+7	; 0x07
    4f0e:	26 2f       	mov	r18, r22
    4f10:	30 e0       	ldi	r19, 0x00	; 0
    4f12:	bd c0       	rjmp	.+378    	; 0x508e <readSysReg+0x434>
		case 250: temp =    (int)  eeprom->LP_Min;break;
    4f14:	fb 01       	movw	r30, r22
    4f16:	e4 5a       	subi	r30, 0xA4	; 164
    4f18:	ff 4f       	sbci	r31, 0xFF	; 255
    4f1a:	60 81       	ld	r22, Z
    4f1c:	71 81       	ldd	r23, Z+1	; 0x01
    4f1e:	82 81       	ldd	r24, Z+2	; 0x02
    4f20:	93 81       	ldd	r25, Z+3	; 0x03
    4f22:	0e 94 7c 55 	call	0xaaf8	; 0xaaf8 <__fixsfsi>
    4f26:	9b 01       	movw	r18, r22
    4f28:	b2 c0       	rjmp	.+356    	; 0x508e <readSysReg+0x434>
		case 260: temp =    (int)  eeprom->MaxSupercool;break;
    4f2a:	6a 89       	ldd	r22, Y+18	; 0x12
    4f2c:	26 2f       	mov	r18, r22
    4f2e:	30 e0       	ldi	r19, 0x00	; 0
    4f30:	ae c0       	rjmp	.+348    	; 0x508e <readSysReg+0x434>
		case 270: temp =    (int)  eeprom->MinSupercool;break;
    4f32:	69 89       	ldd	r22, Y+17	; 0x11
    4f34:	26 2f       	mov	r18, r22
    4f36:	30 e0       	ldi	r19, 0x00	; 0
    4f38:	aa c0       	rjmp	.+340    	; 0x508e <readSysReg+0x434>
		case 280: temp =    (int)  eeprom->MaxSuperheat;break;
    4f3a:	68 89       	ldd	r22, Y+16	; 0x10
    4f3c:	26 2f       	mov	r18, r22
    4f3e:	30 e0       	ldi	r19, 0x00	; 0
    4f40:	a6 c0       	rjmp	.+332    	; 0x508e <readSysReg+0x434>
		case 290: temp =    (int)  eeprom->MinSuperheat;break;
    4f42:	6f 85       	ldd	r22, Y+15	; 0x0f
    4f44:	26 2f       	mov	r18, r22
    4f46:	30 e0       	ldi	r19, 0x00	; 0
    4f48:	a2 c0       	rjmp	.+324    	; 0x508e <readSysReg+0x434>
		case 300: temp =    (int)  eeprom->number_turnon_threeway;break;
    4f4a:	fb 01       	movw	r30, r22
    4f4c:	ea 5b       	subi	r30, 0xBA	; 186
    4f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f50:	20 81       	ld	r18, Z
    4f52:	31 81       	ldd	r19, Z+1	; 0x01
    4f54:	9c c0       	rjmp	.+312    	; 0x508e <readSysReg+0x434>
		case 310: temp =    (int)  eeprom->power;break;
    4f56:	6c a1       	ldd	r22, Y+36	; 0x24
    4f58:	26 2f       	mov	r18, r22
    4f5a:	30 e0       	ldi	r19, 0x00	; 0
    4f5c:	98 c0       	rjmp	.+304    	; 0x508e <readSysReg+0x434>
		case 320: temp =    (int)  eeprom->Set_Cooling;break;
    4f5e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4f60:	26 2f       	mov	r18, r22
    4f62:	30 e0       	ldi	r19, 0x00	; 0
    4f64:	94 c0       	rjmp	.+296    	; 0x508e <readSysReg+0x434>
		case 330: temp =    (int)  eeprom->Set_DHW;break;
    4f66:	6b 8d       	ldd	r22, Y+27	; 0x1b
    4f68:	26 2f       	mov	r18, r22
    4f6a:	30 e0       	ldi	r19, 0x00	; 0
    4f6c:	90 c0       	rjmp	.+288    	; 0x508e <readSysReg+0x434>
		case 340: temp =    (int)  eeprom->Set_Heating;break;
    4f6e:	69 8d       	ldd	r22, Y+25	; 0x19
    4f70:	26 2f       	mov	r18, r22
    4f72:	30 e0       	ldi	r19, 0x00	; 0
    4f74:	8c c0       	rjmp	.+280    	; 0x508e <readSysReg+0x434>
		case 350: temp =    (int)  eeprom->TempDef;break;
    4f76:	2a a5       	ldd	r18, Y+42	; 0x2a
    4f78:	3b a5       	ldd	r19, Y+43	; 0x2b
    4f7a:	89 c0       	rjmp	.+274    	; 0x508e <readSysReg+0x434>
		case 360: temp =    (int)  eeprom->TimeDef;break;
    4f7c:	69 a1       	ldd	r22, Y+33	; 0x21
    4f7e:	26 2f       	mov	r18, r22
    4f80:	30 e0       	ldi	r19, 0x00	; 0
    4f82:	85 c0       	rjmp	.+266    	; 0x508e <readSysReg+0x434>
		
		
		case 370: temp =    (int)  eeprom->TempOut;break;
    4f84:	2e a5       	ldd	r18, Y+46	; 0x2e
    4f86:	3f a5       	ldd	r19, Y+47	; 0x2f
    4f88:	82 c0       	rjmp	.+260    	; 0x508e <readSysReg+0x434>
		case 380: temp =    (int)  eeprom->TempStopDef;break;
    4f8a:	2c a5       	ldd	r18, Y+44	; 0x2c
    4f8c:	3d a5       	ldd	r19, Y+45	; 0x2d
    4f8e:	7f c0       	rjmp	.+254    	; 0x508e <readSysReg+0x434>
		case 390: temp =    (int)  eeprom->time_threeway;break;
    4f90:	2c ad       	ldd	r18, Y+60	; 0x3c
    4f92:	3d ad       	ldd	r19, Y+61	; 0x3d
    4f94:	7c c0       	rjmp	.+248    	; 0x508e <readSysReg+0x434>
		case 400: temp =    (int)  eeprom->NombComp;break;
    4f96:	68 a1       	ldd	r22, Y+32	; 0x20
    4f98:	26 2f       	mov	r18, r22
    4f9a:	30 e0       	ldi	r19, 0x00	; 0
    4f9c:	78 c0       	rjmp	.+240    	; 0x508e <readSysReg+0x434>
		case 410: temp =    (int)  eeprom->reversMod;break;
    4f9e:	68 a5       	ldd	r22, Y+40	; 0x28
    4fa0:	26 2f       	mov	r18, r22
    4fa2:	30 e0       	ldi	r19, 0x00	; 0
    4fa4:	74 c0       	rjmp	.+232    	; 0x508e <readSysReg+0x434>
		case 420: temp =    (int)  eeprom->TRV_Delay;break;
    4fa6:	6d 81       	ldd	r22, Y+5	; 0x05
    4fa8:	26 2f       	mov	r18, r22
    4faa:	30 e0       	ldi	r19, 0x00	; 0
    4fac:	70 c0       	rjmp	.+224    	; 0x508e <readSysReg+0x434>
		case 430: temp =    (int)  eeprom->Source_Max;break;
    4fae:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fb0:	26 2f       	mov	r18, r22
    4fb2:	30 e0       	ldi	r19, 0x00	; 0
    4fb4:	6c c0       	rjmp	.+216    	; 0x508e <readSysReg+0x434>
		case 440: temp =    (int)  eeprom->Source_Min;break;
    4fb6:	28 a9       	ldd	r18, Y+48	; 0x30
    4fb8:	39 a9       	ldd	r19, Y+49	; 0x31
    4fba:	69 c0       	rjmp	.+210    	; 0x508e <readSysReg+0x434>
		case 450: temp =    (int)  eeprom->Delta_dhw_max;break;
    4fbc:	68 8d       	ldd	r22, Y+24	; 0x18
    4fbe:	26 2f       	mov	r18, r22
    4fc0:	30 e0       	ldi	r19, 0x00	; 0
    4fc2:	65 c0       	rjmp	.+202    	; 0x508e <readSysReg+0x434>
		case 460: temp =    (int)  eeprom->Delta_dhw_min;break;
    4fc4:	6f 89       	ldd	r22, Y+23	; 0x17
    4fc6:	26 2f       	mov	r18, r22
    4fc8:	30 e0       	ldi	r19, 0x00	; 0
    4fca:	61 c0       	rjmp	.+194    	; 0x508e <readSysReg+0x434>
		case 470: temp =    (int)  eeprom->Power_380;break;
    4fcc:	69 a5       	ldd	r22, Y+41	; 0x29
    4fce:	26 2f       	mov	r18, r22
    4fd0:	30 e0       	ldi	r19, 0x00	; 0
    4fd2:	5d c0       	rjmp	.+186    	; 0x508e <readSysReg+0x434>
		case 480: temp =    (int)  eeprom->TimeBetweenDef;break;
    4fd4:	6a a1       	ldd	r22, Y+34	; 0x22
    4fd6:	26 2f       	mov	r18, r22
    4fd8:	30 e0       	ldi	r19, 0x00	; 0
    4fda:	59 c0       	rjmp	.+178    	; 0x508e <readSysReg+0x434>
		//case 500: temp =    (int)  compPtr-> Curr_A;break;
		//case 510: temp =    (int)  compPtr-> Curr_B;break;
		//case 520: temp =    (int)  compPtr-> Curr_C;break;
		
		//--------------------------------------
		case 301: temp =    (int)  eeprom->number_turnon_compressor_1;break;
    4fdc:	2e ad       	ldd	r18, Y+62	; 0x3e
    4fde:	3f ad       	ldd	r19, Y+63	; 0x3f
    4fe0:	56 c0       	rjmp	.+172    	; 0x508e <readSysReg+0x434>
		case 311: temp =    (int)  eeprom->number_turnon_hiter_1;break;
    4fe2:	fb 01       	movw	r30, r22
    4fe4:	ee 5b       	subi	r30, 0xBE	; 190
    4fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe8:	20 81       	ld	r18, Z
    4fea:	31 81       	ldd	r19, Z+1	; 0x01
    4fec:	50 c0       	rjmp	.+160    	; 0x508e <readSysReg+0x434>
		case 321: temp =    (int)  eeprom->number_turnon_revers_1;break;
    4fee:	fb 01       	movw	r30, r22
    4ff0:	ec 5b       	subi	r30, 0xBC	; 188
    4ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff4:	20 81       	ld	r18, Z
    4ff6:	31 81       	ldd	r19, Z+1	; 0x01
    4ff8:	4a c0       	rjmp	.+148    	; 0x508e <readSysReg+0x434>
		case 331: temp =    (int)  eeprom->number_turnon_source_1;break;
    4ffa:	fb 01       	movw	r30, r22
    4ffc:	e0 5c       	subi	r30, 0xC0	; 192
    4ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    5000:	20 81       	ld	r18, Z
    5002:	31 81       	ldd	r19, Z+1	; 0x01
    5004:	44 c0       	rjmp	.+136    	; 0x508e <readSysReg+0x434>
		case 341: temp =    (int)  eeprom->time_compressor_1;break;
    5006:	2a ad       	ldd	r18, Y+58	; 0x3a
    5008:	3b ad       	ldd	r19, Y+59	; 0x3b
    500a:	41 c0       	rjmp	.+130    	; 0x508e <readSysReg+0x434>
		case 351: temp =    (int)  eeprom->time_pump_hiter_1;break;
    500c:	2c a9       	ldd	r18, Y+52	; 0x34
    500e:	3d a9       	ldd	r19, Y+53	; 0x35
    5010:	3e c0       	rjmp	.+124    	; 0x508e <readSysReg+0x434>
		case 371: temp =    (int)  eeprom->time_pump_source_1;break;
    5012:	2e a9       	ldd	r18, Y+54	; 0x36
    5014:	3f a9       	ldd	r19, Y+55	; 0x37
    5016:	3b c0       	rjmp	.+118    	; 0x508e <readSysReg+0x434>
		case 381: temp =    (int)  eeprom->time_revers_1;break;
    5018:	28 ad       	ldd	r18, Y+56	; 0x38
    501a:	39 ad       	ldd	r19, Y+57	; 0x39
    501c:	38 c0       	rjmp	.+112    	; 0x508e <readSysReg+0x434>
		case 391: temp =    (int)  eeprom->trv_corection_1;break;
    501e:	2a a9       	ldd	r18, Y+50	; 0x32
    5020:	3b a9       	ldd	r19, Y+51	; 0x33
    5022:	35 c0       	rjmp	.+106    	; 0x508e <readSysReg+0x434>
		//------------------------------------
		case 302: temp =    (int)  eeprom->number_turnon_compressor_2;break;
    5024:	fb 01       	movw	r30, r22
    5026:	ee 5a       	subi	r30, 0xAE	; 174
    5028:	ff 4f       	sbci	r31, 0xFF	; 255
    502a:	20 81       	ld	r18, Z
    502c:	31 81       	ldd	r19, Z+1	; 0x01
    502e:	2f c0       	rjmp	.+94     	; 0x508e <readSysReg+0x434>
		case 312: temp =    (int)  eeprom->number_turnon_hiter_2;break;
    5030:	fb 01       	movw	r30, r22
    5032:	ea 5a       	subi	r30, 0xAA	; 170
    5034:	ff 4f       	sbci	r31, 0xFF	; 255
    5036:	20 81       	ld	r18, Z
    5038:	31 81       	ldd	r19, Z+1	; 0x01
    503a:	29 c0       	rjmp	.+82     	; 0x508e <readSysReg+0x434>
		case 322: temp =    (int)  eeprom->number_turnon_revers_2;break;
    503c:	fb 01       	movw	r30, r22
    503e:	e8 5a       	subi	r30, 0xA8	; 168
    5040:	ff 4f       	sbci	r31, 0xFF	; 255
    5042:	20 81       	ld	r18, Z
    5044:	31 81       	ldd	r19, Z+1	; 0x01
    5046:	23 c0       	rjmp	.+70     	; 0x508e <readSysReg+0x434>
		case 332: temp =    (int)  eeprom->number_turnon_source_2;break;
    5048:	fb 01       	movw	r30, r22
    504a:	ec 5a       	subi	r30, 0xAC	; 172
    504c:	ff 4f       	sbci	r31, 0xFF	; 255
    504e:	20 81       	ld	r18, Z
    5050:	31 81       	ldd	r19, Z+1	; 0x01
    5052:	1d c0       	rjmp	.+58     	; 0x508e <readSysReg+0x434>
		case 342: temp =    (int)  eeprom->time_compressor_2;break;
    5054:	fb 01       	movw	r30, r22
    5056:	e0 5b       	subi	r30, 0xB0	; 176
    5058:	ff 4f       	sbci	r31, 0xFF	; 255
    505a:	20 81       	ld	r18, Z
    505c:	31 81       	ldd	r19, Z+1	; 0x01
    505e:	17 c0       	rjmp	.+46     	; 0x508e <readSysReg+0x434>
		case 352: temp =    (int)  eeprom->time_pump_hiter_2;break;
    5060:	fb 01       	movw	r30, r22
    5062:	e6 5b       	subi	r30, 0xB6	; 182
    5064:	ff 4f       	sbci	r31, 0xFF	; 255
    5066:	20 81       	ld	r18, Z
    5068:	31 81       	ldd	r19, Z+1	; 0x01
    506a:	11 c0       	rjmp	.+34     	; 0x508e <readSysReg+0x434>
		case 372: temp =    (int)  eeprom->time_pump_source_2;break;
    506c:	fb 01       	movw	r30, r22
    506e:	e4 5b       	subi	r30, 0xB4	; 180
    5070:	ff 4f       	sbci	r31, 0xFF	; 255
    5072:	20 81       	ld	r18, Z
    5074:	31 81       	ldd	r19, Z+1	; 0x01
    5076:	0b c0       	rjmp	.+22     	; 0x508e <readSysReg+0x434>
		case 382: temp =    (int)  eeprom->time_revers_2;break;
    5078:	fb 01       	movw	r30, r22
    507a:	e2 5b       	subi	r30, 0xB2	; 178
    507c:	ff 4f       	sbci	r31, 0xFF	; 255
    507e:	20 81       	ld	r18, Z
    5080:	31 81       	ldd	r19, Z+1	; 0x01
    5082:	05 c0       	rjmp	.+10     	; 0x508e <readSysReg+0x434>
		case 392: temp =    (int)  eeprom->trv_corection_2;break;
    5084:	fb 01       	movw	r30, r22
    5086:	e8 5b       	subi	r30, 0xB8	; 184
    5088:	ff 4f       	sbci	r31, 0xFF	; 255
    508a:	20 81       	ld	r18, Z
    508c:	31 81       	ldd	r19, Z+1	; 0x01
		
	}
	return temp;
}
    508e:	c9 01       	movw	r24, r18
    5090:	df 91       	pop	r29
    5092:	cf 91       	pop	r28
    5094:	08 95       	ret

00005096 <writeSysReg>:
void writeSysReg(xEEdata*comp,uint16_t adress,uint16_t value)
{
    5096:	cf 93       	push	r28
    5098:	df 93       	push	r29
    509a:	dc 01       	movw	r26, r24
	
	switch(adress)
    509c:	fb 01       	movw	r30, r22
    509e:	3a 97       	sbiw	r30, 0x0a	; 10
    50a0:	e7 3d       	cpi	r30, 0xD7	; 215
    50a2:	81 e0       	ldi	r24, 0x01	; 1
    50a4:	f8 07       	cpc	r31, r24
    50a6:	08 f0       	brcs	.+2      	; 0x50aa <writeSysReg+0x14>
    50a8:	bb c0       	rjmp	.+374    	; 0x5220 <writeSysReg+0x18a>
    50aa:	88 27       	eor	r24, r24
    50ac:	ed 58       	subi	r30, 0x8D	; 141
    50ae:	fd 4f       	sbci	r31, 0xFD	; 253
    50b0:	8f 4f       	sbci	r24, 0xFF	; 255
    50b2:	0c 94 e9 5a 	jmp	0xb5d2	; 0xb5d2 <__tablejump2__>
	{
		case 10:  comp->Compressor_delay  = value;break;
    50b6:	4c 93       	st	X, r20
    50b8:	b3 c0       	rjmp	.+358    	; 0x5220 <writeSysReg+0x18a>
		case 20:  comp->HeatingPump_delay = value;break;
    50ba:	13 96       	adiw	r26, 0x03	; 3
    50bc:	4c 93       	st	X, r20
    50be:	b0 c0       	rjmp	.+352    	; 0x5220 <writeSysReg+0x18a>
		case 30:  comp->Source_Pump_delay = value;break;
    50c0:	11 96       	adiw	r26, 0x01	; 1
    50c2:	4c 93       	st	X, r20
    50c4:	ad c0       	rjmp	.+346    	; 0x5220 <writeSysReg+0x18a>
		case 40:  comp->Revers_Valve_delay = value;break;
    50c6:	12 96       	adiw	r26, 0x02	; 2
    50c8:	4c 93       	st	X, r20
    50ca:	aa c0       	rjmp	.+340    	; 0x5220 <writeSysReg+0x18a>
		case 50:  comp->Three_Way_delay  = value;break;
    50cc:	14 96       	adiw	r26, 0x04	; 4
    50ce:	4c 93       	st	X, r20
    50d0:	a7 c0       	rjmp	.+334    	; 0x5220 <writeSysReg+0x18a>
		case 60:  comp->Cool_Max = value;break;
    50d2:	1c 96       	adiw	r26, 0x0c	; 12
    50d4:	4c 93       	st	X, r20
    50d6:	a4 c0       	rjmp	.+328    	; 0x5220 <writeSysReg+0x18a>
		case 70:  comp->Cool_Min = value;break;
    50d8:	1d 96       	adiw	r26, 0x0d	; 13
    50da:	4c 93       	st	X, r20
    50dc:	a1 c0       	rjmp	.+322    	; 0x5220 <writeSysReg+0x18a>
		case 80:  comp->HEAT_Max  = value;break;
    50de:	19 96       	adiw	r26, 0x09	; 9
    50e0:	4c 93       	st	X, r20
    50e2:	9e c0       	rjmp	.+316    	; 0x5220 <writeSysReg+0x18a>
		case 90:  comp->HEAT_Min = value;break;
    50e4:	1a 96       	adiw	r26, 0x0a	; 10
    50e6:	4c 93       	st	X, r20
    50e8:	9b c0       	rjmp	.+310    	; 0x5220 <writeSysReg+0x18a>
		case 100: comp->Delta_heating_max  = value;break;
    50ea:	54 96       	adiw	r26, 0x14	; 20
    50ec:	4c 93       	st	X, r20
    50ee:	98 c0       	rjmp	.+304    	; 0x5220 <writeSysReg+0x18a>
		case 110: comp->Delta_heating_min  = value;break;
    50f0:	53 96       	adiw	r26, 0x13	; 19
    50f2:	4c 93       	st	X, r20
    50f4:	95 c0       	rjmp	.+298    	; 0x5220 <writeSysReg+0x18a>
		case 120: comp->Delta_source_max  = value;break;
    50f6:	56 96       	adiw	r26, 0x16	; 22
    50f8:	4c 93       	st	X, r20
    50fa:	92 c0       	rjmp	.+292    	; 0x5220 <writeSysReg+0x18a>
		case 130: comp->Delta_source_min  = value;break;
    50fc:	55 96       	adiw	r26, 0x15	; 21
    50fe:	4c 93       	st	X, r20
    5100:	8f c0       	rjmp	.+286    	; 0x5220 <writeSysReg+0x18a>
		case 140: comp->diffCOOL  = value;break;
    5102:	5d 96       	adiw	r26, 0x1d	; 29
    5104:	4c 93       	st	X, r20
    5106:	8c c0       	rjmp	.+280    	; 0x5220 <writeSysReg+0x18a>
		case 150: comp->diffDHW  = value;break;
    5108:	5e 96       	adiw	r26, 0x1e	; 30
    510a:	4c 93       	st	X, r20
    510c:	89 c0       	rjmp	.+274    	; 0x5220 <writeSysReg+0x18a>
		case 160: comp->diffHEAT  = value;break;
    510e:	5c 96       	adiw	r26, 0x1c	; 28
    5110:	4c 93       	st	X, r20
    5112:	86 c0       	rjmp	.+268    	; 0x5220 <writeSysReg+0x18a>
		case 170: comp->AireToWater  = value;break;
    5114:	5f 96       	adiw	r26, 0x1f	; 31
    5116:	4c 93       	st	X, r20
    5118:	83 c0       	rjmp	.+262    	; 0x5220 <writeSysReg+0x18a>
		case 180: comp->ExhaustMax  = value;break;
    511a:	1e 96       	adiw	r26, 0x0e	; 14
    511c:	4c 93       	st	X, r20
    511e:	80 c0       	rjmp	.+256    	; 0x5220 <writeSysReg+0x18a>
		case 190: comp->cool  = value;break;
    5120:	97 96       	adiw	r26, 0x27	; 39
    5122:	4c 93       	st	X, r20
    5124:	7d c0       	rjmp	.+250    	; 0x5220 <writeSysReg+0x18a>
		case 200: comp->heat  = value;break;
    5126:	96 96       	adiw	r26, 0x26	; 38
    5128:	4c 93       	st	X, r20
    512a:	7a c0       	rjmp	.+244    	; 0x5220 <writeSysReg+0x18a>
		case 210: comp->heatWater  = value;break;
    512c:	95 96       	adiw	r26, 0x25	; 37
    512e:	4c 93       	st	X, r20
    5130:	77 c0       	rjmp	.+238    	; 0x5220 <writeSysReg+0x18a>
		case 220: comp->HP_Max  = value;break;
    5132:	16 96       	adiw	r26, 0x06	; 6
    5134:	4c 93       	st	X, r20
    5136:	74 c0       	rjmp	.+232    	; 0x5220 <writeSysReg+0x18a>
		case 230: comp->LP_Max  = value;break;
    5138:	18 96       	adiw	r26, 0x08	; 8
    513a:	4c 93       	st	X, r20
    513c:	71 c0       	rjmp	.+226    	; 0x5220 <writeSysReg+0x18a>
		case 240: comp->HP_Min  = value;break;
    513e:	17 96       	adiw	r26, 0x07	; 7
    5140:	4c 93       	st	X, r20
    5142:	6e c0       	rjmp	.+220    	; 0x5220 <writeSysReg+0x18a>
		case 250: comp->LP_Min  = value;break;
    5144:	ed 01       	movw	r28, r26
    5146:	c4 5a       	subi	r28, 0xA4	; 164
    5148:	df 4f       	sbci	r29, 0xFF	; 255
    514a:	ba 01       	movw	r22, r20
    514c:	80 e0       	ldi	r24, 0x00	; 0
    514e:	90 e0       	ldi	r25, 0x00	; 0
    5150:	0e 94 ad 55 	call	0xab5a	; 0xab5a <__floatunsisf>
    5154:	68 83       	st	Y, r22
    5156:	79 83       	std	Y+1, r23	; 0x01
    5158:	8a 83       	std	Y+2, r24	; 0x02
    515a:	9b 83       	std	Y+3, r25	; 0x03
    515c:	61 c0       	rjmp	.+194    	; 0x5220 <writeSysReg+0x18a>
		case 260: comp->MaxSupercool  = value;break;
    515e:	52 96       	adiw	r26, 0x12	; 18
    5160:	4c 93       	st	X, r20
    5162:	5e c0       	rjmp	.+188    	; 0x5220 <writeSysReg+0x18a>
		case 270: comp->MinSupercool  = value;break;
    5164:	51 96       	adiw	r26, 0x11	; 17
    5166:	4c 93       	st	X, r20
    5168:	5b c0       	rjmp	.+182    	; 0x5220 <writeSysReg+0x18a>
		case 280: comp->MaxSuperheat  = value;break;
    516a:	50 96       	adiw	r26, 0x10	; 16
    516c:	4c 93       	st	X, r20
    516e:	58 c0       	rjmp	.+176    	; 0x5220 <writeSysReg+0x18a>
		case 290: comp->MinSuperheat  = value;break;
    5170:	1f 96       	adiw	r26, 0x0f	; 15
    5172:	4c 93       	st	X, r20
    5174:	55 c0       	rjmp	.+170    	; 0x5220 <writeSysReg+0x18a>
		case 300: comp->number_turnon_threeway  = value;break;
    5176:	aa 5b       	subi	r26, 0xBA	; 186
    5178:	bf 4f       	sbci	r27, 0xFF	; 255
    517a:	4d 93       	st	X+, r20
    517c:	5c 93       	st	X, r21
    517e:	50 c0       	rjmp	.+160    	; 0x5220 <writeSysReg+0x18a>
		case 310: comp->power  = value;break;
    5180:	94 96       	adiw	r26, 0x24	; 36
    5182:	4c 93       	st	X, r20
    5184:	4d c0       	rjmp	.+154    	; 0x5220 <writeSysReg+0x18a>
		case 320: comp->Set_Cooling  = value;break;
    5186:	5a 96       	adiw	r26, 0x1a	; 26
    5188:	4c 93       	st	X, r20
    518a:	4a c0       	rjmp	.+148    	; 0x5220 <writeSysReg+0x18a>
		case 330: comp->Set_DHW  = value;break;
    518c:	5b 96       	adiw	r26, 0x1b	; 27
    518e:	4c 93       	st	X, r20
    5190:	47 c0       	rjmp	.+142    	; 0x5220 <writeSysReg+0x18a>
		case 340: comp->Set_Heating  = value;break;
    5192:	59 96       	adiw	r26, 0x19	; 25
    5194:	4c 93       	st	X, r20
    5196:	44 c0       	rjmp	.+136    	; 0x5220 <writeSysReg+0x18a>
		case 350: comp->TempDef  = value;break;//
    5198:	9b 96       	adiw	r26, 0x2b	; 43
    519a:	5c 93       	st	X, r21
    519c:	4e 93       	st	-X, r20
    519e:	9a 97       	sbiw	r26, 0x2a	; 42
    51a0:	3f c0       	rjmp	.+126    	; 0x5220 <writeSysReg+0x18a>
		case 360: comp->TimeDef  = value;break;//
    51a2:	91 96       	adiw	r26, 0x21	; 33
    51a4:	4c 93       	st	X, r20
    51a6:	3c c0       	rjmp	.+120    	; 0x5220 <writeSysReg+0x18a>
		case 370: comp->TempOut  = value;break;
    51a8:	9f 96       	adiw	r26, 0x2f	; 47
    51aa:	5c 93       	st	X, r21
    51ac:	4e 93       	st	-X, r20
    51ae:	9e 97       	sbiw	r26, 0x2e	; 46
    51b0:	37 c0       	rjmp	.+110    	; 0x5220 <writeSysReg+0x18a>
		case 380: comp->TempStopDef  = value;break;//
    51b2:	9d 96       	adiw	r26, 0x2d	; 45
    51b4:	5c 93       	st	X, r21
    51b6:	4e 93       	st	-X, r20
    51b8:	9c 97       	sbiw	r26, 0x2c	; 44
    51ba:	32 c0       	rjmp	.+100    	; 0x5220 <writeSysReg+0x18a>
		case 390: comp->time_threeway  = value;break;
    51bc:	dd 96       	adiw	r26, 0x3d	; 61
    51be:	5c 93       	st	X, r21
    51c0:	4e 93       	st	-X, r20
    51c2:	dc 97       	sbiw	r26, 0x3c	; 60
    51c4:	2d c0       	rjmp	.+90     	; 0x5220 <writeSysReg+0x18a>
		case 400: comp->NombComp  = value;break;
    51c6:	90 96       	adiw	r26, 0x20	; 32
    51c8:	4c 93       	st	X, r20
    51ca:	2a c0       	rjmp	.+84     	; 0x5220 <writeSysReg+0x18a>
		case 410: comp->reversMod =value;break;
    51cc:	98 96       	adiw	r26, 0x28	; 40
    51ce:	4c 93       	st	X, r20
    51d0:	27 c0       	rjmp	.+78     	; 0x5220 <writeSysReg+0x18a>
		case 420: comp->TRV_Delay=value;break;
    51d2:	15 96       	adiw	r26, 0x05	; 5
    51d4:	4c 93       	st	X, r20
    51d6:	24 c0       	rjmp	.+72     	; 0x5220 <writeSysReg+0x18a>
		case 430: comp->Source_Max=value;break;
    51d8:	1b 96       	adiw	r26, 0x0b	; 11
    51da:	4c 93       	st	X, r20
    51dc:	21 c0       	rjmp	.+66     	; 0x5220 <writeSysReg+0x18a>
		case 440: comp->Source_Min=value;break;
    51de:	d1 96       	adiw	r26, 0x31	; 49
    51e0:	5c 93       	st	X, r21
    51e2:	4e 93       	st	-X, r20
    51e4:	d0 97       	sbiw	r26, 0x30	; 48
    51e6:	1c c0       	rjmp	.+56     	; 0x5220 <writeSysReg+0x18a>
		case 450: comp->Delta_dhw_max  = value;break;
    51e8:	58 96       	adiw	r26, 0x18	; 24
    51ea:	4c 93       	st	X, r20
    51ec:	19 c0       	rjmp	.+50     	; 0x5220 <writeSysReg+0x18a>
		case 460: comp->Delta_dhw_min  = value;break;
    51ee:	57 96       	adiw	r26, 0x17	; 23
    51f0:	4c 93       	st	X, r20
    51f2:	16 c0       	rjmp	.+44     	; 0x5220 <writeSysReg+0x18a>
		case 470: comp->Power_380 = value;break;
    51f4:	99 96       	adiw	r26, 0x29	; 41
    51f6:	4c 93       	st	X, r20
    51f8:	13 c0       	rjmp	.+38     	; 0x5220 <writeSysReg+0x18a>
		case 480: comp->TimeBetweenDef = value;break;//
    51fa:	92 96       	adiw	r26, 0x22	; 34
    51fc:	4c 93       	st	X, r20
    51fe:	10 c0       	rjmp	.+32     	; 0x5220 <writeSysReg+0x18a>
		case 391: comp->trv_corection_1 = value;break;
    5200:	d3 96       	adiw	r26, 0x33	; 51
    5202:	5c 93       	st	X, r21
    5204:	4e 93       	st	-X, r20
    5206:	d2 97       	sbiw	r26, 0x32	; 50
    5208:	0b c0       	rjmp	.+22     	; 0x5220 <writeSysReg+0x18a>
		case 392: comp->trv_corection_2 = value;break;
    520a:	a8 5b       	subi	r26, 0xB8	; 184
    520c:	bf 4f       	sbci	r27, 0xFF	; 255
    520e:	4d 93       	st	X+, r20
    5210:	5c 93       	st	X, r21
    5212:	06 c0       	rjmp	.+12     	; 0x5220 <writeSysReg+0x18a>
		case 393:if(comp->AireToWater==1) forsDefrost = value;break;
    5214:	5f 96       	adiw	r26, 0x1f	; 31
    5216:	8c 91       	ld	r24, X
    5218:	81 30       	cpi	r24, 0x01	; 1
    521a:	11 f4       	brne	.+4      	; 0x5220 <writeSysReg+0x18a>
    521c:	40 93 0b 07 	sts	0x070B, r20	; 0x80070b <forsDefrost>
	}
}
    5220:	df 91       	pop	r29
    5222:	cf 91       	pop	r28
    5224:	08 95       	ret

00005226 <calculateCRC>:
}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
    5226:	88 23       	and	r24, r24
    5228:	09 f1       	breq	.+66     	; 0x526c <calculateCRC+0x46>
    522a:	af ef       	ldi	r26, 0xFF	; 255
    522c:	a8 0f       	add	r26, r24
    522e:	b0 e0       	ldi	r27, 0x00	; 0
    5230:	11 96       	adiw	r26, 0x01	; 1
    5232:	60 e0       	ldi	r22, 0x00	; 0
    5234:	70 e0       	ldi	r23, 0x00	; 0
    5236:	8f ef       	ldi	r24, 0xFF	; 255
    5238:	9f ef       	ldi	r25, 0xFF	; 255
	{
		temp = temp ^ frame[i];
    523a:	fb 01       	movw	r30, r22
    523c:	ee 53       	subi	r30, 0x3E	; 62
    523e:	f8 4f       	sbci	r31, 0xF8	; 248
    5240:	20 81       	ld	r18, Z
    5242:	82 27       	eor	r24, r18
    5244:	28 e0       	ldi	r18, 0x08	; 8
		for (unsigned char j = 1; j <= 8; j++)
		{
			flag = temp & 0x0001;
    5246:	ac 01       	movw	r20, r24
    5248:	41 70       	andi	r20, 0x01	; 1
    524a:	55 27       	eor	r21, r21
			temp >>= 1;
    524c:	96 95       	lsr	r25
    524e:	87 95       	ror	r24
			if (flag)
    5250:	45 2b       	or	r20, r21
    5252:	21 f0       	breq	.+8      	; 0x525c <calculateCRC+0x36>
			temp ^= 0xA001;
    5254:	31 e0       	ldi	r19, 0x01	; 1
    5256:	83 27       	eor	r24, r19
    5258:	30 ea       	ldi	r19, 0xA0	; 160
    525a:	93 27       	eor	r25, r19
    525c:	21 50       	subi	r18, 0x01	; 1
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
	{
		temp = temp ^ frame[i];
		for (unsigned char j = 1; j <= 8; j++)
    525e:	99 f7       	brne	.-26     	; 0x5246 <calculateCRC+0x20>
    5260:	6f 5f       	subi	r22, 0xFF	; 255
    5262:	7f 4f       	sbci	r23, 0xFF	; 255
}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
    5264:	6a 17       	cp	r22, r26
    5266:	7b 07       	cpc	r23, r27
    5268:	41 f7       	brne	.-48     	; 0x523a <calculateCRC+0x14>
    526a:	02 c0       	rjmp	.+4      	; 0x5270 <calculateCRC+0x4a>

}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
    526c:	8f ef       	ldi	r24, 0xFF	; 255
    526e:	9f ef       	ldi	r25, 0xFF	; 255
	// Reverse byte order.
	temp2 = temp >> 8;
	temp = (temp << 8) | temp2;
	temp &= 0xFFFF;
	return temp; // the returned value is already swopped - crcLo byte is first & crcHi byte is last
}
    5270:	98 27       	eor	r25, r24
    5272:	89 27       	eor	r24, r25
    5274:	98 27       	eor	r25, r24
    5276:	08 95       	ret

00005278 <sendPacket>:

void sendPacket(unsigned char bufferSize)
{
    5278:	ef 92       	push	r14
    527a:	ff 92       	push	r15
    527c:	0f 93       	push	r16
    527e:	1f 93       	push	r17
    5280:	cf 93       	push	r28
    5282:	df 93       	push	r29
	
	for (unsigned char i = 0; i < bufferSize; i++) if(port_0)xSerialPutChar(&xSerialPort,frame[i]); else if(port_3){PORTJ|= (_BV(PIN_rs485));xSerialPutChar(&xSerial3Port,frame[i]);}
    5284:	88 23       	and	r24, r24
    5286:	71 f1       	breq	.+92     	; 0x52e4 <sendPacket+0x6c>
    5288:	81 50       	subi	r24, 0x01	; 1
    528a:	08 2f       	mov	r16, r24
    528c:	10 e0       	ldi	r17, 0x00	; 0
    528e:	0f 5f       	subi	r16, 0xFF	; 255
    5290:	1f 4f       	sbci	r17, 0xFF	; 255
    5292:	c0 e0       	ldi	r28, 0x00	; 0
    5294:	d0 e0       	ldi	r29, 0x00	; 0
    5296:	0f 2e       	mov	r0, r31
    5298:	f5 e0       	ldi	r31, 0x05	; 5
    529a:	ef 2e       	mov	r14, r31
    529c:	ff 24       	eor	r15, r15
    529e:	f3 94       	inc	r15
    52a0:	f0 2d       	mov	r31, r0
    52a2:	80 91 a7 0a 	lds	r24, 0x0AA7	; 0x800aa7 <port_0>
    52a6:	88 23       	and	r24, r24
    52a8:	49 f0       	breq	.+18     	; 0x52bc <sendPacket+0x44>
    52aa:	fe 01       	movw	r30, r28
    52ac:	ee 53       	subi	r30, 0x3E	; 62
    52ae:	f8 4f       	sbci	r31, 0xF8	; 248
    52b0:	60 81       	ld	r22, Z
    52b2:	89 e5       	ldi	r24, 0x59	; 89
    52b4:	97 e0       	ldi	r25, 0x07	; 7
    52b6:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <xSerialPutChar>
    52ba:	10 c0       	rjmp	.+32     	; 0x52dc <sendPacket+0x64>
    52bc:	80 91 01 09 	lds	r24, 0x0901	; 0x800901 <port_3>
    52c0:	88 23       	and	r24, r24
    52c2:	61 f0       	breq	.+24     	; 0x52dc <sendPacket+0x64>
    52c4:	f7 01       	movw	r30, r14
    52c6:	80 81       	ld	r24, Z
    52c8:	84 60       	ori	r24, 0x04	; 4
    52ca:	80 83       	st	Z, r24
    52cc:	fe 01       	movw	r30, r28
    52ce:	ee 53       	subi	r30, 0x3E	; 62
    52d0:	f8 4f       	sbci	r31, 0xF8	; 248
    52d2:	60 81       	ld	r22, Z
    52d4:	80 ea       	ldi	r24, 0xA0	; 160
    52d6:	97 e0       	ldi	r25, 0x07	; 7
    52d8:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <xSerialPutChar>
    52dc:	21 96       	adiw	r28, 0x01	; 1
    52de:	c0 17       	cp	r28, r16
    52e0:	d1 07       	cpc	r29, r17
    52e2:	f9 f6       	brne	.-66     	; 0x52a2 <sendPacket+0x2a>
	//xSerialRxFlush(&xSerialPort);
	PORTJ &= (_BV(PIN_rs485));
    52e4:	e5 e0       	ldi	r30, 0x05	; 5
    52e6:	f1 e0       	ldi	r31, 0x01	; 1
    52e8:	80 81       	ld	r24, Z
    52ea:	84 70       	andi	r24, 0x04	; 4
    52ec:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    52ee:	00 00       	nop

	_delay_us(3645);
	
	
    52f0:	df 91       	pop	r29
    52f2:	cf 91       	pop	r28
    52f4:	1f 91       	pop	r17
    52f6:	0f 91       	pop	r16
    52f8:	ff 90       	pop	r15
    52fa:	ef 90       	pop	r14
    52fc:	08 95       	ret

000052fe <modbus_update>:
		case 393:if(comp->AireToWater==1) forsDefrost = value;break;
	}
}

void modbus_update()
{
    52fe:	af 92       	push	r10
    5300:	bf 92       	push	r11
    5302:	cf 92       	push	r12
    5304:	df 92       	push	r13
    5306:	ef 92       	push	r14
    5308:	ff 92       	push	r15
    530a:	0f 93       	push	r16
    530c:	1f 93       	push	r17
    530e:	cf 93       	push	r28
    5310:	df 93       	push	r29
	unsigned char noOfBytes;
	unsigned char responseFrameSize;
	unsigned int temp;
	void* ptr=NULL;
	
	if(port_0)buffer=xSerialAvailableChar( &xSerialPort );
    5312:	80 91 a7 0a 	lds	r24, 0x0AA7	; 0x800aa7 <port_0>
    5316:	88 23       	and	r24, r24
    5318:	29 f0       	breq	.+10     	; 0x5324 <modbus_update+0x26>
    531a:	89 e5       	ldi	r24, 0x59	; 89
    531c:	97 e0       	ldi	r25, 0x07	; 7
    531e:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <xSerialAvailableChar>
    5322:	09 c0       	rjmp	.+18     	; 0x5336 <modbus_update+0x38>
	else if (port_3)buffer=xSerialAvailableChar( &xSerial3Port );
    5324:	80 91 01 09 	lds	r24, 0x0901	; 0x800901 <port_3>
    5328:	88 23       	and	r24, r24
    532a:	09 f4       	brne	.+2      	; 0x532e <modbus_update+0x30>
    532c:	da c0       	rjmp	.+436    	; 0x54e2 <modbus_update+0x1e4>
    532e:	80 ea       	ldi	r24, 0xA0	; 160
    5330:	97 e0       	ldi	r25, 0x07	; 7
    5332:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <xSerialAvailableChar>
	
	//avrSerialPrintf("buffer = %d \r\n",buffer );
	//avrSerialPrintf("overflow= %d \r\n",overflow);
	if (overflow){ return;}//exceptionResponse(OVERFLOW_BUFF);
    5336:	90 91 7b 07 	lds	r25, 0x077B	; 0x80077b <overflow>
    533a:	91 11       	cpse	r25, r1
    533c:	d7 c0       	rjmp	.+430    	; 0x54ec <modbus_update+0x1ee>
	if (buffer > 0 && buffer < 8) {  return;}// exceptionResponse(CORRUPT_PACKET);
    533e:	9f ef       	ldi	r25, 0xFF	; 255
    5340:	98 0f       	add	r25, r24
    5342:	97 30       	cpi	r25, 0x07	; 7
    5344:	08 f4       	brcc	.+2      	; 0x5348 <modbus_update+0x4a>
    5346:	d2 c0       	rjmp	.+420    	; 0x54ec <modbus_update+0x1ee>
	
	// The minimum request packet is 8 bytes for function 3 & 16
	
	id = frame[0];
    5348:	90 91 c2 07 	lds	r25, 0x07C2	; 0x8007c2 <frame>
	//avrSerialPrintf("buffer= %d \r\n",buffer);
	
	if (id == slaveID ) // if the recieved ID matches the slaveID or broadcasting id (0), continue
    534c:	91 30       	cpi	r25, 0x01	; 1
    534e:	09 f0       	breq	.+2      	; 0x5352 <modbus_update+0x54>
    5350:	cd c0       	rjmp	.+410    	; 0x54ec <modbus_update+0x1ee>
	{
		crc = ((frame[buffer - 2] << 8) | frame[buffer - 1]); // combine the crc Low & High bytes
    5352:	28 2f       	mov	r18, r24
    5354:	30 e0       	ldi	r19, 0x00	; 0
    5356:	f9 01       	movw	r30, r18
    5358:	e0 54       	subi	r30, 0x40	; 64
    535a:	f8 4f       	sbci	r31, 0xF8	; 248
    535c:	d0 81       	ld	r29, Z
    535e:	f9 01       	movw	r30, r18
    5360:	ef 53       	subi	r30, 0x3F	; 63
    5362:	f8 4f       	sbci	r31, 0xF8	; 248
    5364:	c0 81       	ld	r28, Z
		//avrSerialPrintf("crc= %d \r\n",crc);
		if (calculateCRC(buffer - 2) == crc) // if the calculated crc matches the recieved crc continue
    5366:	82 50       	subi	r24, 0x02	; 2
    5368:	5e df       	rcall	.-324    	; 0x5226 <calculateCRC>
    536a:	2c 2f       	mov	r18, r28
    536c:	30 e0       	ldi	r19, 0x00	; 0
    536e:	3d 2b       	or	r19, r29
    5370:	28 17       	cp	r18, r24
    5372:	39 07       	cpc	r19, r25
    5374:	09 f0       	breq	.+2      	; 0x5378 <modbus_update+0x7a>
    5376:	ba c0       	rjmp	.+372    	; 0x54ec <modbus_update+0x1ee>
		{
			function = frame[1];
    5378:	e2 ec       	ldi	r30, 0xC2	; 194
    537a:	f7 e0       	ldi	r31, 0x07	; 7
    537c:	21 81       	ldd	r18, Z+1	; 0x01
    537e:	20 93 7c 07 	sts	0x077C, r18	; 0x80077c <function>
			startingAddress = ((frame[2] << 8) | frame[3]); // combine the starting address bytes
    5382:	82 81       	ldd	r24, Z+2	; 0x02
    5384:	c3 81       	ldd	r28, Z+3	; 0x03
    5386:	d0 e0       	ldi	r29, 0x00	; 0
    5388:	d8 2b       	or	r29, r24
			no_of_registers = ((frame[4] << 8) | frame[5]);
    538a:	84 81       	ldd	r24, Z+4	; 0x04
    538c:	45 81       	ldd	r20, Z+5	; 0x05
    538e:	50 e0       	ldi	r21, 0x00	; 0
    5390:	58 2b       	or	r21, r24
			maxData = startingAddress + no_of_registers *10;
    5392:	7a 01       	movw	r14, r20
    5394:	ee 0c       	add	r14, r14
    5396:	ff 1c       	adc	r15, r15
    5398:	ca 01       	movw	r24, r20
    539a:	88 0f       	add	r24, r24
    539c:	99 1f       	adc	r25, r25
    539e:	88 0f       	add	r24, r24
    53a0:	99 1f       	adc	r25, r25
    53a2:	88 0f       	add	r24, r24
    53a4:	99 1f       	adc	r25, r25
    53a6:	e8 0e       	add	r14, r24
    53a8:	f9 1e       	adc	r15, r25
    53aa:	ec 0e       	add	r14, r28
    53ac:	fd 1e       	adc	r15, r29
			//avrSerialPrintf("function= %d \r\n",function);
			//avrSerialPrintf("startingAddress= %d \r\n",startingAddress);
			//avrSerialPrintf("no_of_registers= %d \r\n",no_of_registers);
			//avrSerialPrintf("maxData= %d \r\n",maxData);
			if (function == 3)
    53ae:	23 30       	cpi	r18, 0x03	; 3
    53b0:	09 f0       	breq	.+2      	; 0x53b4 <modbus_update+0xb6>
    53b2:	65 c0       	rjmp	.+202    	; 0x547e <modbus_update+0x180>
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
    53b4:	9e 01       	movw	r18, r28
    53b6:	ad ec       	ldi	r26, 0xCD	; 205
    53b8:	bc ec       	ldi	r27, 0xCC	; 204
    53ba:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    53be:	96 95       	lsr	r25
    53c0:	87 95       	ror	r24
    53c2:	96 95       	lsr	r25
    53c4:	87 95       	ror	r24
    53c6:	96 95       	lsr	r25
    53c8:	87 95       	ror	r24
    53ca:	9c 01       	movw	r18, r24
    53cc:	22 0f       	add	r18, r18
    53ce:	33 1f       	adc	r19, r19
    53d0:	88 0f       	add	r24, r24
    53d2:	99 1f       	adc	r25, r25
    53d4:	88 0f       	add	r24, r24
    53d6:	99 1f       	adc	r25, r25
    53d8:	88 0f       	add	r24, r24
    53da:	99 1f       	adc	r25, r25
    53dc:	82 0f       	add	r24, r18
    53de:	93 1f       	adc	r25, r19
    53e0:	9e 01       	movw	r18, r28
    53e2:	28 1b       	sub	r18, r24
    53e4:	39 0b       	sbc	r19, r25
    53e6:	21 30       	cpi	r18, 0x01	; 1
    53e8:	31 05       	cpc	r19, r1
    53ea:	51 f0       	breq	.+20     	; 0x5400 <modbus_update+0x102>
				else if(startingAddress%10==2){ptr=&Comp_2;}
    53ec:	22 30       	cpi	r18, 0x02	; 2
    53ee:	31 05       	cpc	r19, r1
    53f0:	71 f4       	brne	.+28     	; 0x540e <modbus_update+0x110>
    53f2:	0f 2e       	mov	r0, r31
    53f4:	f8 ee       	ldi	r31, 0xE8	; 232
    53f6:	cf 2e       	mov	r12, r31
    53f8:	f9 e0       	ldi	r31, 0x09	; 9
    53fa:	df 2e       	mov	r13, r31
    53fc:	f0 2d       	mov	r31, r0
    53fe:	09 c0       	rjmp	.+18     	; 0x5412 <modbus_update+0x114>
			//avrSerialPrintf("startingAddress= %d \r\n",startingAddress);
			//avrSerialPrintf("no_of_registers= %d \r\n",no_of_registers);
			//avrSerialPrintf("maxData= %d \r\n",maxData);
			if (function == 3)
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
    5400:	0f 2e       	mov	r0, r31
    5402:	f2 e6       	ldi	r31, 0x62	; 98
    5404:	cf 2e       	mov	r12, r31
    5406:	f9 e0       	ldi	r31, 0x09	; 9
    5408:	df 2e       	mov	r13, r31
    540a:	f0 2d       	mov	r31, r0
    540c:	02 c0       	rjmp	.+4      	; 0x5412 <modbus_update+0x114>
	unsigned int crc16;
	unsigned int crc;
	unsigned char noOfBytes;
	unsigned char responseFrameSize;
	unsigned int temp;
	void* ptr=NULL;
    540e:	c1 2c       	mov	r12, r1
    5410:	d1 2c       	mov	r13, r1
			if (function == 3)
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
				else if(startingAddress%10==2){ptr=&Comp_2;}
				
				noOfBytes = no_of_registers * 2;
    5412:	a4 2e       	mov	r10, r20
    5414:	aa 0c       	add	r10, r10
				responseFrameSize = 5 + noOfBytes; // ID, function, noOfBytes, (dataLo + dataHi) * number of registers, crcLo, crcHi
    5416:	0f 2e       	mov	r0, r31
    5418:	f5 e0       	ldi	r31, 0x05	; 5
    541a:	bf 2e       	mov	r11, r31
    541c:	f0 2d       	mov	r31, r0
    541e:	ba 0c       	add	r11, r10
				frame[0] = slaveID;
    5420:	e2 ec       	ldi	r30, 0xC2	; 194
    5422:	f7 e0       	ldi	r31, 0x07	; 7
    5424:	81 e0       	ldi	r24, 0x01	; 1
    5426:	80 83       	st	Z, r24
				frame[1] = function;
    5428:	83 e0       	ldi	r24, 0x03	; 3
    542a:	81 83       	std	Z+1, r24	; 0x01
				frame[2] = noOfBytes;
    542c:	a2 82       	std	Z+2, r10	; 0x02
				//avrSerialPrintf("FrameSize= %d \r\n",responseFrameSize);
				//avrSerialPrintf("frame[1]= %d \r\n",frame[1]);
				//avrSerialPrintf("frame[2]= %d \r\n",frame[2]);
				address = 3; // PDU starts at the 4th byte
				for (index = startingAddress; index < maxData; )
    542e:	ce 15       	cp	r28, r14
    5430:	df 05       	cpc	r29, r15
    5432:	a8 f4       	brcc	.+42     	; 0x545e <modbus_update+0x160>
    5434:	03 e0       	ldi	r16, 0x03	; 3
    5436:	10 e0       	ldi	r17, 0x00	; 0
				{
					temp = readSysReg(ptr,&EEpromData,index);//holdingRegs[index]
    5438:	ae 01       	movw	r20, r28
    543a:	62 e0       	ldi	r22, 0x02	; 2
    543c:	79 e0       	ldi	r23, 0x09	; 9
    543e:	c6 01       	movw	r24, r12
    5440:	0c dc       	rcall	.-2024   	; 0x4c5a <readSysReg>
					frame[address] = temp >> 8; // split the register into 2 bytes
    5442:	f8 01       	movw	r30, r16
    5444:	ee 53       	subi	r30, 0x3E	; 62
    5446:	f8 4f       	sbci	r31, 0xF8	; 248
    5448:	90 83       	st	Z, r25
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
					frame[address] = temp & 0xFF;
    544a:	f8 01       	movw	r30, r16
    544c:	ed 53       	subi	r30, 0x3D	; 61
    544e:	f8 4f       	sbci	r31, 0xF8	; 248
    5450:	80 83       	st	Z, r24
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
    5452:	0e 5f       	subi	r16, 0xFE	; 254
    5454:	1f 4f       	sbci	r17, 0xFF	; 255
					index +=10;
    5456:	2a 96       	adiw	r28, 0x0a	; 10
				frame[2] = noOfBytes;
				//avrSerialPrintf("FrameSize= %d \r\n",responseFrameSize);
				//avrSerialPrintf("frame[1]= %d \r\n",frame[1]);
				//avrSerialPrintf("frame[2]= %d \r\n",frame[2]);
				address = 3; // PDU starts at the 4th byte
				for (index = startingAddress; index < maxData; )
    5458:	ce 15       	cp	r28, r14
    545a:	df 05       	cpc	r29, r15
    545c:	68 f3       	brcs	.-38     	; 0x5438 <modbus_update+0x13a>
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
					index +=10;
				}
				
				crc16 = calculateCRC(responseFrameSize - 2);
    545e:	83 e0       	ldi	r24, 0x03	; 3
    5460:	8a 0d       	add	r24, r10
    5462:	e1 de       	rcall	.-574    	; 0x5226 <calculateCRC>
				frame[responseFrameSize - 2] = crc16 >> 8; // split crc into 2 bytes
    5464:	2b 2d       	mov	r18, r11
    5466:	30 e0       	ldi	r19, 0x00	; 0
    5468:	f9 01       	movw	r30, r18
    546a:	e0 54       	subi	r30, 0x40	; 64
    546c:	f8 4f       	sbci	r31, 0xF8	; 248
    546e:	90 83       	st	Z, r25
				frame[responseFrameSize - 1] = crc16 & 0xFF;
    5470:	f9 01       	movw	r30, r18
    5472:	ef 53       	subi	r30, 0x3F	; 63
    5474:	f8 4f       	sbci	r31, 0xF8	; 248
				//return;
				sendPacket(responseFrameSize);
    5476:	80 83       	st	Z, r24
    5478:	8b 2d       	mov	r24, r11
    547a:	fe de       	rcall	.-516    	; 0x5278 <sendPacket>
    547c:	37 c0       	rjmp	.+110    	; 0x54ec <modbus_update+0x1ee>
				
			}
			
			else if (function == 16)
    547e:	20 31       	cpi	r18, 0x10	; 16
    5480:	09 f0       	breq	.+2      	; 0x5484 <modbus_update+0x186>
    5482:	34 c0       	rjmp	.+104    	; 0x54ec <modbus_update+0x1ee>
			{
				address = 7; // start at the 8th byte in the frame
				
				for (index = startingAddress; index < maxData; )
    5484:	ce 15       	cp	r28, r14
    5486:	df 05       	cpc	r29, r15
    5488:	b0 f4       	brcc	.+44     	; 0x54b6 <modbus_update+0x1b8>
    548a:	07 e0       	ldi	r16, 0x07	; 7
    548c:	10 e0       	ldi	r17, 0x00	; 0
				{
					temp = ((frame[address] << 8) | frame[address + 1]);
    548e:	f8 01       	movw	r30, r16
    5490:	ee 53       	subi	r30, 0x3E	; 62
    5492:	f8 4f       	sbci	r31, 0xF8	; 248
    5494:	80 81       	ld	r24, Z
    5496:	f8 01       	movw	r30, r16
    5498:	ed 53       	subi	r30, 0x3D	; 61
    549a:	f8 4f       	sbci	r31, 0xF8	; 248
    549c:	40 81       	ld	r20, Z
					writeSysReg(&EEpromData,index,temp);
    549e:	50 e0       	ldi	r21, 0x00	; 0
    54a0:	58 2b       	or	r21, r24
    54a2:	be 01       	movw	r22, r28
    54a4:	82 e0       	ldi	r24, 0x02	; 2
    54a6:	99 e0       	ldi	r25, 0x09	; 9
    54a8:	f6 dd       	rcall	.-1044   	; 0x5096 <writeSysReg>
					address += 2;
    54aa:	0e 5f       	subi	r16, 0xFE	; 254
    54ac:	1f 4f       	sbci	r17, 0xFF	; 255
					index+=10;
    54ae:	2a 96       	adiw	r28, 0x0a	; 10
			
			else if (function == 16)
			{
				address = 7; // start at the 8th byte in the frame
				
				for (index = startingAddress; index < maxData; )
    54b0:	ce 15       	cp	r28, r14
    54b2:	df 05       	cpc	r29, r15
    54b4:	60 f3       	brcs	.-40     	; 0x548e <modbus_update+0x190>
					temp = ((frame[address] << 8) | frame[address + 1]);
					writeSysReg(&EEpromData,index,temp);
					address += 2;
					index+=10;
				}
				portENTER_CRITICAL();
    54b6:	0f b6       	in	r0, 0x3f	; 63
    54b8:	f8 94       	cli
    54ba:	0f 92       	push	r0
				eeprom_write_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));
    54bc:	40 e6       	ldi	r20, 0x60	; 96
    54be:	50 e0       	ldi	r21, 0x00	; 0
    54c0:	60 e0       	ldi	r22, 0x00	; 0
    54c2:	70 e0       	ldi	r23, 0x00	; 0
    54c4:	82 e0       	ldi	r24, 0x02	; 2
    54c6:	99 e0       	ldi	r25, 0x09	; 9
    54c8:	0e 94 22 5e 	call	0xbc44	; 0xbc44 <eeprom_write_block>
				portEXIT_CRITICAL();
    54cc:	0f 90       	pop	r0
				// only the first 6 bytes are used for CRC calculation
				crc16 = calculateCRC(6);
    54ce:	0f be       	out	0x3f, r0	; 63
    54d0:	86 e0       	ldi	r24, 0x06	; 6
				frame[6] = crc16 >> 8; // split crc into 2 bytes
    54d2:	a9 de       	rcall	.-686    	; 0x5226 <calculateCRC>
    54d4:	e2 ec       	ldi	r30, 0xC2	; 194
    54d6:	f7 e0       	ldi	r31, 0x07	; 7
				frame[7] = crc16 & 0xFF;
    54d8:	96 83       	std	Z+6, r25	; 0x06
				
				// a function 16 response is an echo of the first 6 bytes from the request + 2 crc bytes
				
				sendPacket(8);
    54da:	87 83       	std	Z+7, r24	; 0x07
    54dc:	88 e0       	ldi	r24, 0x08	; 8
    54de:	cc de       	rcall	.-616    	; 0x5278 <sendPacket>
    54e0:	05 c0       	rjmp	.+10     	; 0x54ec <modbus_update+0x1ee>
	if(port_0)buffer=xSerialAvailableChar( &xSerialPort );
	else if (port_3)buffer=xSerialAvailableChar( &xSerial3Port );
	
	//avrSerialPrintf("buffer = %d \r\n",buffer );
	//avrSerialPrintf("overflow= %d \r\n",overflow);
	if (overflow){ return;}//exceptionResponse(OVERFLOW_BUFF);
    54e2:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <overflow>
    54e6:	88 23       	and	r24, r24
    54e8:	09 f4       	brne	.+2      	; 0x54ec <modbus_update+0x1ee>
    54ea:	2e cf       	rjmp	.-420    	; 0x5348 <modbus_update+0x4a>
			
		}
		else {return;}// exceptionResponse(CHECKSUM_FAIL);
	}
	else {return;}//exceptionResponse(ERROR_FUNC);
}
    54ec:	df 91       	pop	r29
    54ee:	cf 91       	pop	r28
    54f0:	1f 91       	pop	r17
    54f2:	0f 91       	pop	r16
    54f4:	ff 90       	pop	r15
    54f6:	ef 90       	pop	r14
    54f8:	df 90       	pop	r13
    54fa:	cf 90       	pop	r12
    54fc:	bf 90       	pop	r11
    54fe:	af 90       	pop	r10
    5500:	08 95       	ret

00005502 <StartHeatPump>:
}

//------------------------------------------------

void StartHeatPump(TimerHandle_t xTimer)
{
    5502:	8f 92       	push	r8
    5504:	9f 92       	push	r9
    5506:	af 92       	push	r10
    5508:	bf 92       	push	r11
    550a:	cf 92       	push	r12
    550c:	df 92       	push	r13
    550e:	ef 92       	push	r14
    5510:	ff 92       	push	r15
    5512:	0f 93       	push	r16
    5514:	1f 93       	push	r17
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5516:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    551a:	fc 01       	movw	r30, r24
	TickType_t period;
	period=(TickType_t)EEpromData.Compressor_delay;
    551c:	20 91 02 09 	lds	r18, 0x0902	; 0x800902 <EEpromData>
	period*=1000;
    5520:	30 e0       	ldi	r19, 0x00	; 0
    5522:	a8 ee       	ldi	r26, 0xE8	; 232
    5524:	b3 e0       	ldi	r27, 0x03	; 3
    5526:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    552a:	4b 01       	movw	r8, r22
    552c:	5c 01       	movw	r10, r24
	//xSerialxPrintf(&xSerial3Port,"StartHeatPump\r\n");
	if((*pxTimerID) == uxStartDelayHeatPTimer_1_ID) {
    552e:	80 81       	ld	r24, Z
    5530:	82 30       	cpi	r24, 0x02	; 2
    5532:	09 f0       	breq	.+2      	; 0x5536 <StartHeatPump+0x34>
    5534:	40 c0       	rjmp	.+128    	; 0x55b6 <StartHeatPump+0xb4>
		xSerialxPrintf(&xSerial3Port,"StartHeatPump_1\r\n");
    5536:	8d eb       	ldi	r24, 0xBD	; 189
    5538:	92 e0       	ldi	r25, 0x02	; 2
    553a:	9f 93       	push	r25
    553c:	8f 93       	push	r24
    553e:	80 ea       	ldi	r24, 0xA0	; 160
    5540:	97 e0       	ldi	r25, 0x07	; 7
    5542:	9f 93       	push	r25
    5544:	8f 93       	push	r24
    5546:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_1 ==0)
    554a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    554e:	0f 90       	pop	r0
    5550:	0f 90       	pop	r0
    5552:	0f 90       	pop	r0
    5554:	0f 90       	pop	r0
    5556:	83 fd       	sbrc	r24, 3
    5558:	70 c0       	rjmp	.+224    	; 0x563a <StartHeatPump+0x138>
		{
			
			//xSerialxPrintf(&xSerial3Port,"StartHeatPump_1\r\n");
			Comp_1.heatPOn=1;
    555a:	81 e0       	ldi	r24, 0x01	; 1
    555c:	80 93 6e 09 	sts	0x096E, r24	; 0x80096e <Comp_1+0xc>
			START_HEAT_PUMP_1;
    5560:	e2 e0       	ldi	r30, 0x02	; 2
    5562:	f1 e0       	ldi	r31, 0x01	; 1
    5564:	80 81       	ld	r24, Z
    5566:	88 60       	ori	r24, 0x08	; 8
    5568:	80 83       	st	Z, r24
			timeStartHeatP_1=time(&current_time);
    556a:	8d ef       	ldi	r24, 0xFD	; 253
    556c:	98 e0       	ldi	r25, 0x08	; 8
    556e:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5572:	60 93 6e 0a 	sts	0x0A6E, r22	; 0x800a6e <timeStartHeatP_1>
    5576:	70 93 6f 0a 	sts	0x0A6F, r23	; 0x800a6f <timeStartHeatP_1+0x1>
    557a:	80 93 70 0a 	sts	0x0A70, r24	; 0x800a70 <timeStartHeatP_1+0x2>
    557e:	90 93 71 0a 	sts	0x0A71, r25	; 0x800a71 <timeStartHeatP_1+0x3>
			EEpromData.number_turnon_hiter_1+=1;			
    5582:	e4 e4       	ldi	r30, 0x44	; 68
    5584:	f9 e0       	ldi	r31, 0x09	; 9
    5586:	80 81       	ld	r24, Z
    5588:	91 81       	ldd	r25, Z+1	; 0x01
    558a:	01 96       	adiw	r24, 0x01	; 1
    558c:	91 83       	std	Z+1, r25	; 0x01
    558e:	80 83       	st	Z, r24
			xTimerChangePeriod( xStartCompressor_1,period, 100 );
    5590:	0f 2e       	mov	r0, r31
    5592:	f4 e6       	ldi	r31, 0x64	; 100
    5594:	cf 2e       	mov	r12, r31
    5596:	d1 2c       	mov	r13, r1
    5598:	e1 2c       	mov	r14, r1
    559a:	f1 2c       	mov	r15, r1
    559c:	f0 2d       	mov	r31, r0
    559e:	00 e0       	ldi	r16, 0x00	; 0
    55a0:	10 e0       	ldi	r17, 0x00	; 0
    55a2:	a5 01       	movw	r20, r10
    55a4:	94 01       	movw	r18, r8
    55a6:	64 e0       	ldi	r22, 0x04	; 4
    55a8:	80 91 78 0a 	lds	r24, 0x0A78	; 0x800a78 <xStartCompressor_1>
    55ac:	90 91 79 0a 	lds	r25, 0x0A79	; 0x800a79 <xStartCompressor_1+0x1>
    55b0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    55b4:	42 c0       	rjmp	.+132    	; 0x563a <StartHeatPump+0x138>
			
		}
	}

	else if((*pxTimerID) == uxStartDelayHeatPTimer_2_ID) {
    55b6:	8f 30       	cpi	r24, 0x0F	; 15
    55b8:	09 f0       	breq	.+2      	; 0x55bc <StartHeatPump+0xba>
    55ba:	3f c0       	rjmp	.+126    	; 0x563a <StartHeatPump+0x138>
		xSerialxPrintf(&xSerial3Port,"StartHeatPump_2\r\n");
    55bc:	8f ec       	ldi	r24, 0xCF	; 207
    55be:	92 e0       	ldi	r25, 0x02	; 2
    55c0:	9f 93       	push	r25
    55c2:	8f 93       	push	r24
    55c4:	80 ea       	ldi	r24, 0xA0	; 160
    55c6:	97 e0       	ldi	r25, 0x07	; 7
    55c8:	9f 93       	push	r25
    55ca:	8f 93       	push	r24
    55cc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_2 == 0)
    55d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    55d4:	0f 90       	pop	r0
    55d6:	0f 90       	pop	r0
    55d8:	0f 90       	pop	r0
    55da:	0f 90       	pop	r0
    55dc:	84 fd       	sbrc	r24, 4
    55de:	2d c0       	rjmp	.+90     	; 0x563a <StartHeatPump+0x138>
		{
			Comp_2.heatPOn=2;
    55e0:	82 e0       	ldi	r24, 0x02	; 2
    55e2:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <Comp_2+0xc>
			START_HEAT_PUMP_2;
    55e6:	e2 e0       	ldi	r30, 0x02	; 2
    55e8:	f1 e0       	ldi	r31, 0x01	; 1
    55ea:	80 81       	ld	r24, Z
    55ec:	80 61       	ori	r24, 0x10	; 16
    55ee:	80 83       	st	Z, r24
			timeStartHeatP_2=time(&current_time);
    55f0:	8d ef       	ldi	r24, 0xFD	; 253
    55f2:	98 e0       	ldi	r25, 0x08	; 8
    55f4:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    55f8:	60 93 82 0a 	sts	0x0A82, r22	; 0x800a82 <timeStartHeatP_2>
    55fc:	70 93 83 0a 	sts	0x0A83, r23	; 0x800a83 <timeStartHeatP_2+0x1>
    5600:	80 93 84 0a 	sts	0x0A84, r24	; 0x800a84 <timeStartHeatP_2+0x2>
    5604:	90 93 85 0a 	sts	0x0A85, r25	; 0x800a85 <timeStartHeatP_2+0x3>
			EEpromData.number_turnon_hiter_2+=1;
    5608:	e8 e5       	ldi	r30, 0x58	; 88
    560a:	f9 e0       	ldi	r31, 0x09	; 9
    560c:	80 81       	ld	r24, Z
    560e:	91 81       	ldd	r25, Z+1	; 0x01
    5610:	01 96       	adiw	r24, 0x01	; 1
    5612:	91 83       	std	Z+1, r25	; 0x01
    5614:	80 83       	st	Z, r24
			xTimerChangePeriod( xStartCompressor_2,period, 100 );
    5616:	0f 2e       	mov	r0, r31
    5618:	f4 e6       	ldi	r31, 0x64	; 100
    561a:	cf 2e       	mov	r12, r31
    561c:	d1 2c       	mov	r13, r1
    561e:	e1 2c       	mov	r14, r1
    5620:	f1 2c       	mov	r15, r1
    5622:	f0 2d       	mov	r31, r0
    5624:	00 e0       	ldi	r16, 0x00	; 0
    5626:	10 e0       	ldi	r17, 0x00	; 0
    5628:	a5 01       	movw	r20, r10
    562a:	94 01       	movw	r18, r8
    562c:	64 e0       	ldi	r22, 0x04	; 4
    562e:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <xStartCompressor_2>
    5632:	90 91 8b 0a 	lds	r25, 0x0A8B	; 0x800a8b <xStartCompressor_2+0x1>
    5636:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		}
		
	}
}
    563a:	1f 91       	pop	r17
    563c:	0f 91       	pop	r16
    563e:	ff 90       	pop	r15
    5640:	ef 90       	pop	r14
    5642:	df 90       	pop	r13
    5644:	cf 90       	pop	r12
    5646:	bf 90       	pop	r11
    5648:	af 90       	pop	r10
    564a:	9f 90       	pop	r9
    564c:	8f 90       	pop	r8
    564e:	08 95       	ret

00005650 <SwitchRev_2_Time>:
		xTimerStart(xSwitchRevTwo_2_time, 0);
	}
}
//-------------------------------------------------------------------------
void SwitchRev_2_Time(TimerHandle_t xTimer)
{
    5650:	8f 92       	push	r8
    5652:	9f 92       	push	r9
    5654:	af 92       	push	r10
    5656:	bf 92       	push	r11
    5658:	cf 92       	push	r12
    565a:	df 92       	push	r13
    565c:	ef 92       	push	r14
    565e:	ff 92       	push	r15
    5660:	0f 93       	push	r16
    5662:	1f 93       	push	r17
    5664:	cf 93       	push	r28
    5666:	df 93       	push	r29
    5668:	ac 01       	movw	r20, r24
	portBASE_TYPE *pxTimerID;
	
	TickType_t period;
	period=(TickType_t)EEpromData.HeatingPump_delay;
    566a:	20 91 05 09 	lds	r18, 0x0905	; 0x800905 <EEpromData+0x3>
	period*=1000;
    566e:	30 e0       	ldi	r19, 0x00	; 0
    5670:	a8 ee       	ldi	r26, 0xE8	; 232
    5672:	b3 e0       	ldi	r27, 0x03	; 3
    5674:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    5678:	4b 01       	movw	r8, r22
    567a:	5c 01       	movw	r10, r24
	pxTimerID = pvTimerGetTimerID(xTimer);
    567c:	ca 01       	movw	r24, r20
    567e:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    5682:	ec 01       	movw	r28, r24
	
	//xSerialxPrintf(&xSerial3Port,"SwitchRev_2\r\n");
	
	if((*pxTimerID) == uxSwitchRevTwo_1_ID)
    5684:	88 81       	ld	r24, Y
    5686:	8d 30       	cpi	r24, 0x0D	; 13
    5688:	29 f5       	brne	.+74     	; 0x56d4 <SwitchRev_2_Time+0x84>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_ON_1_2\r\n");
    568a:	81 ee       	ldi	r24, 0xE1	; 225
    568c:	92 e0       	ldi	r25, 0x02	; 2
    568e:	9f 93       	push	r25
    5690:	8f 93       	push	r24
    5692:	80 ea       	ldi	r24, 0xA0	; 160
    5694:	97 e0       	ldi	r25, 0x07	; 7
    5696:	9f 93       	push	r25
    5698:	8f 93       	push	r24
    569a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_REV_VALVE_1 == 0){START_REV_VALVE_1;}//
    569e:	0f 90       	pop	r0
    56a0:	0f 90       	pop	r0
    56a2:	0f 90       	pop	r0
    56a4:	0f 90       	pop	r0
    56a6:	94 99       	sbic	0x12, 4	; 18
    56a8:	02 c0       	rjmp	.+4      	; 0x56ae <SwitchRev_2_Time+0x5e>
    56aa:	a4 9a       	sbi	0x14, 4	; 20
    56ac:	01 c0       	rjmp	.+2      	; 0x56b0 <SwitchRev_2_Time+0x60>
		else {STOP_REV_VALVE_1;}//xSerialxPrintf(&xSerial3Port,"SwitchRev_OFF_2\r\n");
    56ae:	a4 98       	cbi	0x14, 4	; 20
		xTimerChangePeriod( xStopHeatPump_1,period, 100 );
    56b0:	0f 2e       	mov	r0, r31
    56b2:	f4 e6       	ldi	r31, 0x64	; 100
    56b4:	cf 2e       	mov	r12, r31
    56b6:	d1 2c       	mov	r13, r1
    56b8:	e1 2c       	mov	r14, r1
    56ba:	f1 2c       	mov	r15, r1
    56bc:	f0 2d       	mov	r31, r0
    56be:	00 e0       	ldi	r16, 0x00	; 0
    56c0:	10 e0       	ldi	r17, 0x00	; 0
    56c2:	a5 01       	movw	r20, r10
    56c4:	94 01       	movw	r18, r8
    56c6:	64 e0       	ldi	r22, 0x04	; 4
    56c8:	80 91 ef 08 	lds	r24, 0x08EF	; 0x8008ef <xStopHeatPump_1>
    56cc:	90 91 f0 08 	lds	r25, 0x08F0	; 0x8008f0 <xStopHeatPump_1+0x1>
    56d0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
	if((*pxTimerID) == uxSwitchRevTwo_2_ID)
    56d4:	88 81       	ld	r24, Y
    56d6:	89 31       	cpi	r24, 0x19	; 25
    56d8:	b9 f4       	brne	.+46     	; 0x5708 <SwitchRev_2_Time+0xb8>
	{
		//xSerialxPrintf(&xSerial3Port,"SwitchRev_2_2\r\n");
		if(PIN_REV_VALVE_2 == 0) START_REV_VALVE_2;
    56da:	93 99       	sbic	0x12, 3	; 18
    56dc:	02 c0       	rjmp	.+4      	; 0x56e2 <SwitchRev_2_Time+0x92>
    56de:	a3 9a       	sbi	0x14, 3	; 20
    56e0:	01 c0       	rjmp	.+2      	; 0x56e4 <SwitchRev_2_Time+0x94>
		else STOP_REV_VALVE_2;
    56e2:	a3 98       	cbi	0x14, 3	; 20
		xTimerChangePeriod( xStopHeatPump_2,period, 100 );
    56e4:	0f 2e       	mov	r0, r31
    56e6:	f4 e6       	ldi	r31, 0x64	; 100
    56e8:	cf 2e       	mov	r12, r31
    56ea:	d1 2c       	mov	r13, r1
    56ec:	e1 2c       	mov	r14, r1
    56ee:	f1 2c       	mov	r15, r1
    56f0:	f0 2d       	mov	r31, r0
    56f2:	00 e0       	ldi	r16, 0x00	; 0
    56f4:	10 e0       	ldi	r17, 0x00	; 0
    56f6:	a5 01       	movw	r20, r10
    56f8:	94 01       	movw	r18, r8
    56fa:	64 e0       	ldi	r22, 0x04	; 4
    56fc:	80 91 68 0a 	lds	r24, 0x0A68	; 0x800a68 <xStopHeatPump_2>
    5700:	90 91 69 0a 	lds	r25, 0x0A69	; 0x800a69 <xStopHeatPump_2+0x1>
    5704:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
}
    5708:	df 91       	pop	r29
    570a:	cf 91       	pop	r28
    570c:	1f 91       	pop	r17
    570e:	0f 91       	pop	r16
    5710:	ff 90       	pop	r15
    5712:	ef 90       	pop	r14
    5714:	df 90       	pop	r13
    5716:	cf 90       	pop	r12
    5718:	bf 90       	pop	r11
    571a:	af 90       	pop	r10
    571c:	9f 90       	pop	r9
    571e:	8f 90       	pop	r8
    5720:	08 95       	ret

00005722 <StartCheckErrors>:
}
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------
void StartCheckErrors(TimerHandle_t xTimer)
{
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5722:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
	
	
	if((*pxTimerID) == uxStartDelayChekErrTimer_1_ID){Comp_1.countError=0; Comp_1.checkErrors=true;xSerialxPrintf(&xSerial3Port,"StartCheckErrors_1\r\n");}
    5726:	fc 01       	movw	r30, r24
    5728:	80 81       	ld	r24, Z
    572a:	87 30       	cpi	r24, 0x07	; 7
    572c:	a1 f4       	brne	.+40     	; 0x5756 <StartCheckErrors+0x34>
    572e:	e2 e6       	ldi	r30, 0x62	; 98
    5730:	f9 e0       	ldi	r31, 0x09	; 9
    5732:	11 8a       	std	Z+17, r1	; 0x11
    5734:	81 e0       	ldi	r24, 0x01	; 1
    5736:	85 83       	std	Z+5, r24	; 0x05
    5738:	84 ef       	ldi	r24, 0xF4	; 244
    573a:	92 e0       	ldi	r25, 0x02	; 2
    573c:	9f 93       	push	r25
    573e:	8f 93       	push	r24
    5740:	80 ea       	ldi	r24, 0xA0	; 160
    5742:	97 e0       	ldi	r25, 0x07	; 7
    5744:	9f 93       	push	r25
    5746:	8f 93       	push	r24
    5748:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    574c:	0f 90       	pop	r0
    574e:	0f 90       	pop	r0
    5750:	0f 90       	pop	r0
    5752:	0f 90       	pop	r0
    5754:	08 95       	ret
	else if((*pxTimerID) == uxStartDelayChekErrTimer_2_ID){Comp_2.countError=0;Comp_2.checkErrors=true;xSerialxPrintf(&xSerial3Port,"StartCheckErrors_2\r\n");}
    5756:	84 31       	cpi	r24, 0x14	; 20
    5758:	99 f4       	brne	.+38     	; 0x5780 <StartCheckErrors+0x5e>
    575a:	e8 ee       	ldi	r30, 0xE8	; 232
    575c:	f9 e0       	ldi	r31, 0x09	; 9
    575e:	11 8a       	std	Z+17, r1	; 0x11
    5760:	81 e0       	ldi	r24, 0x01	; 1
    5762:	85 83       	std	Z+5, r24	; 0x05
    5764:	89 e0       	ldi	r24, 0x09	; 9
    5766:	93 e0       	ldi	r25, 0x03	; 3
    5768:	9f 93       	push	r25
    576a:	8f 93       	push	r24
    576c:	80 ea       	ldi	r24, 0xA0	; 160
    576e:	97 e0       	ldi	r25, 0x07	; 7
    5770:	9f 93       	push	r25
    5772:	8f 93       	push	r24
    5774:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    5778:	0f 90       	pop	r0
    577a:	0f 90       	pop	r0
    577c:	0f 90       	pop	r0
    577e:	0f 90       	pop	r0
    5780:	08 95       	ret

00005782 <StartCheckTrv>:
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------
void StartCheckTrv(TimerHandle_t xTimer)
{
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5782:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	if((*pxTimerID) == uxStartDelayChekTrvTimer_1_ID)       {Comp_1.checkTrv=true;xSerialxPrintf(&xSerial3Port,"StartCheckTrv_1\r\n");}
    5786:	fc 01       	movw	r30, r24
    5788:	80 81       	ld	r24, Z
    578a:	86 30       	cpi	r24, 0x06	; 6
    578c:	91 f4       	brne	.+36     	; 0x57b2 <StartCheckTrv+0x30>
    578e:	81 e0       	ldi	r24, 0x01	; 1
    5790:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <Comp_1+0x1>
    5794:	8e e1       	ldi	r24, 0x1E	; 30
    5796:	93 e0       	ldi	r25, 0x03	; 3
    5798:	9f 93       	push	r25
    579a:	8f 93       	push	r24
    579c:	80 ea       	ldi	r24, 0xA0	; 160
    579e:	97 e0       	ldi	r25, 0x07	; 7
    57a0:	9f 93       	push	r25
    57a2:	8f 93       	push	r24
    57a4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    57a8:	0f 90       	pop	r0
    57aa:	0f 90       	pop	r0
    57ac:	0f 90       	pop	r0
    57ae:	0f 90       	pop	r0
    57b0:	08 95       	ret
	else if((*pxTimerID) == uxStartDelayChekTrvTimer_2_ID) {Comp_2.checkTrv=true;xSerialxPrintf(&xSerial3Port,"StartCheckTrv_2\r\n");}
    57b2:	83 31       	cpi	r24, 0x13	; 19
    57b4:	89 f4       	brne	.+34     	; 0x57d8 <StartCheckTrv+0x56>
    57b6:	81 e0       	ldi	r24, 0x01	; 1
    57b8:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <Comp_2+0x1>
    57bc:	80 e3       	ldi	r24, 0x30	; 48
    57be:	93 e0       	ldi	r25, 0x03	; 3
    57c0:	9f 93       	push	r25
    57c2:	8f 93       	push	r24
    57c4:	80 ea       	ldi	r24, 0xA0	; 160
    57c6:	97 e0       	ldi	r25, 0x07	; 7
    57c8:	9f 93       	push	r25
    57ca:	8f 93       	push	r24
    57cc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    57d0:	0f 90       	pop	r0
    57d2:	0f 90       	pop	r0
    57d4:	0f 90       	pop	r0
    57d6:	0f 90       	pop	r0
    57d8:	08 95       	ret

000057da <StartReversingValve>:
		xTimerChangePeriod( xStartRevValve_2,period, 100 );
	}
	
}
//------------------------------------------------
void StartReversingValve(TimerHandle_t xTimer){
    57da:	8f 92       	push	r8
    57dc:	9f 92       	push	r9
    57de:	af 92       	push	r10
    57e0:	bf 92       	push	r11
    57e2:	cf 92       	push	r12
    57e4:	df 92       	push	r13
    57e6:	ef 92       	push	r14
    57e8:	ff 92       	push	r15
    57ea:	0f 93       	push	r16
    57ec:	1f 93       	push	r17
	TickType_t period;
	static time_t time_count_1;
	static time_t time_count_2;
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    57ee:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
	if((*pxTimerID) == uxStartDelayRevVTimer_1_ID)
    57f2:	fc 01       	movw	r30, r24
    57f4:	80 81       	ld	r24, Z
    57f6:	84 30       	cpi	r24, 0x04	; 4
    57f8:	09 f0       	breq	.+2      	; 0x57fc <StartReversingValve+0x22>
    57fa:	3a c1       	rjmp	.+628    	; 0x5a70 <StartReversingValve+0x296>
	{	period=(TickType_t)EEpromData.Three_Way_delay;
    57fc:	20 91 06 09 	lds	r18, 0x0906	; 0x800906 <EEpromData+0x4>
		period*=1000;
    5800:	30 e0       	ldi	r19, 0x00	; 0
    5802:	a8 ee       	ldi	r26, 0xE8	; 232
    5804:	b3 e0       	ldi	r27, 0x03	; 3
    5806:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
		period+=10000;
    580a:	4b 01       	movw	r8, r22
    580c:	5c 01       	movw	r10, r24
    580e:	f0 e1       	ldi	r31, 0x10	; 16
    5810:	8f 0e       	add	r8, r31
    5812:	f7 e2       	ldi	r31, 0x27	; 39
    5814:	9f 1e       	adc	r9, r31
    5816:	a1 1c       	adc	r10, r1
    5818:	b1 1c       	adc	r11, r1
		//////////////////////////////////////////

     //xSerialxPrintf(&xSerial3Port,"StartReversingValve\r\n");

		if(Comp_1.Cooling  )
    581a:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <Comp_1+0x3>
    581e:	88 23       	and	r24, r24
    5820:	09 f4       	brne	.+2      	; 0x5824 <StartReversingValve+0x4a>
    5822:	86 c0       	rjmp	.+268    	; 0x5930 <StartReversingValve+0x156>
		{
			
			if(PIN_REV_VALVE_1 >0 && EEpromData.reversMod==1){
    5824:	94 9b       	sbis	0x12, 4	; 18
    5826:	59 c0       	rjmp	.+178    	; 0x58da <StartReversingValve+0x100>
    5828:	80 91 2a 09 	lds	r24, 0x092A	; 0x80092a <EEpromData+0x28>
    582c:	81 30       	cpi	r24, 0x01	; 1
    582e:	09 f0       	breq	.+2      	; 0x5832 <StartReversingValve+0x58>
    5830:	54 c0       	rjmp	.+168    	; 0x58da <StartReversingValve+0x100>
				
				STOP_REV_VALVE_1;//
    5832:	a4 98       	cbi	0x14, 4	; 20
				xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    5834:	82 e4       	ldi	r24, 0x42	; 66
    5836:	93 e0       	ldi	r25, 0x03	; 3
    5838:	9f 93       	push	r25
    583a:	8f 93       	push	r24
    583c:	80 ea       	ldi	r24, 0xA0	; 160
    583e:	97 e0       	ldi	r25, 0x07	; 7
    5840:	9f 93       	push	r25
    5842:	8f 93       	push	r24
    5844:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_1.revVOn=0;
    5848:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <Comp_1+0xe>
				time_count_1+= difftime(time(&current_time), timeStartRevV_1);
    584c:	c0 90 91 0a 	lds	r12, 0x0A91	; 0x800a91 <timeStartRevV_1>
    5850:	d0 90 92 0a 	lds	r13, 0x0A92	; 0x800a92 <timeStartRevV_1+0x1>
    5854:	e0 90 93 0a 	lds	r14, 0x0A93	; 0x800a93 <timeStartRevV_1+0x2>
    5858:	f0 90 94 0a 	lds	r15, 0x0A94	; 0x800a94 <timeStartRevV_1+0x3>
    585c:	8d ef       	ldi	r24, 0xFD	; 253
    585e:	98 e0       	ldi	r25, 0x08	; 8
    5860:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5864:	a7 01       	movw	r20, r14
    5866:	96 01       	movw	r18, r12
    5868:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    586c:	c0 90 47 07 	lds	r12, 0x0747	; 0x800747 <time_count_1.3175>
    5870:	d0 90 48 07 	lds	r13, 0x0748	; 0x800748 <time_count_1.3175+0x1>
    5874:	e0 90 49 07 	lds	r14, 0x0749	; 0x800749 <time_count_1.3175+0x2>
    5878:	f0 90 4a 07 	lds	r15, 0x074A	; 0x80074a <time_count_1.3175+0x3>
    587c:	dc 01       	movw	r26, r24
    587e:	cb 01       	movw	r24, r22
    5880:	8c 0d       	add	r24, r12
    5882:	9d 1d       	adc	r25, r13
    5884:	ae 1d       	adc	r26, r14
    5886:	bf 1d       	adc	r27, r15
    5888:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <time_count_1.3175>
    588c:	90 93 48 07 	sts	0x0748, r25	; 0x800748 <time_count_1.3175+0x1>
    5890:	a0 93 49 07 	sts	0x0749, r26	; 0x800749 <time_count_1.3175+0x2>
    5894:	b0 93 4a 07 	sts	0x074A, r27	; 0x80074a <time_count_1.3175+0x3>
				if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    5898:	0f 90       	pop	r0
    589a:	0f 90       	pop	r0
    589c:	0f 90       	pop	r0
    589e:	0f 90       	pop	r0
    58a0:	81 31       	cpi	r24, 0x11	; 17
    58a2:	9e 40       	sbci	r25, 0x0E	; 14
    58a4:	a1 05       	cpc	r26, r1
    58a6:	b1 05       	cpc	r27, r1
    58a8:	08 f4       	brcc	.+2      	; 0x58ac <StartReversingValve+0xd2>
    58aa:	42 c0       	rjmp	.+132    	; 0x5930 <StartReversingValve+0x156>
    58ac:	e2 e0       	ldi	r30, 0x02	; 2
    58ae:	f9 e0       	ldi	r31, 0x09	; 9
    58b0:	80 ad       	ldd	r24, Z+56	; 0x38
    58b2:	91 ad       	ldd	r25, Z+57	; 0x39
    58b4:	01 96       	adiw	r24, 0x01	; 1
    58b6:	91 af       	std	Z+57, r25	; 0x39
    58b8:	80 af       	std	Z+56, r24	; 0x38
    58ba:	40 e6       	ldi	r20, 0x60	; 96
    58bc:	50 e0       	ldi	r21, 0x00	; 0
    58be:	60 e0       	ldi	r22, 0x00	; 0
    58c0:	70 e0       	ldi	r23, 0x00	; 0
    58c2:	cf 01       	movw	r24, r30
    58c4:	0e 94 01 5e 	call	0xbc02	; 0xbc02 <eeprom_update_block>
    58c8:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <time_count_1.3175>
    58cc:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <time_count_1.3175+0x1>
    58d0:	10 92 49 07 	sts	0x0749, r1	; 0x800749 <time_count_1.3175+0x2>
    58d4:	10 92 4a 07 	sts	0x074A, r1	; 0x80074a <time_count_1.3175+0x3>
    58d8:	2b c0       	rjmp	.+86     	; 0x5930 <StartReversingValve+0x156>
				
				
			}
			else if(PIN_REV_VALVE_1 == 0 && EEpromData.reversMod==0){
    58da:	94 99       	sbic	0x12, 4	; 18
    58dc:	29 c0       	rjmp	.+82     	; 0x5930 <StartReversingValve+0x156>
    58de:	80 91 2a 09 	lds	r24, 0x092A	; 0x80092a <EEpromData+0x28>
    58e2:	81 11       	cpse	r24, r1
    58e4:	25 c0       	rjmp	.+74     	; 0x5930 <StartReversingValve+0x156>
				START_REV_VALVE_1;
    58e6:	a4 9a       	sbi	0x14, 4	; 20
				Comp_1.revVOn=1;
    58e8:	81 e0       	ldi	r24, 0x01	; 1
    58ea:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <Comp_1+0xe>
				xSerialxPrintf(&xSerial3Port,"StarRevValve_1\r\n");
    58ee:	83 e5       	ldi	r24, 0x53	; 83
    58f0:	93 e0       	ldi	r25, 0x03	; 3
    58f2:	9f 93       	push	r25
    58f4:	8f 93       	push	r24
    58f6:	80 ea       	ldi	r24, 0xA0	; 160
    58f8:	97 e0       	ldi	r25, 0x07	; 7
    58fa:	9f 93       	push	r25
    58fc:	8f 93       	push	r24
    58fe:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_1=time(&current_time);
    5902:	8d ef       	ldi	r24, 0xFD	; 253
    5904:	98 e0       	ldi	r25, 0x08	; 8
    5906:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    590a:	60 93 91 0a 	sts	0x0A91, r22	; 0x800a91 <timeStartRevV_1>
    590e:	70 93 92 0a 	sts	0x0A92, r23	; 0x800a92 <timeStartRevV_1+0x1>
    5912:	80 93 93 0a 	sts	0x0A93, r24	; 0x800a93 <timeStartRevV_1+0x2>
    5916:	90 93 94 0a 	sts	0x0A94, r25	; 0x800a94 <timeStartRevV_1+0x3>
				EEpromData.number_turnon_revers_1+=1;
    591a:	e6 e4       	ldi	r30, 0x46	; 70
    591c:	f9 e0       	ldi	r31, 0x09	; 9
    591e:	80 81       	ld	r24, Z
    5920:	91 81       	ldd	r25, Z+1	; 0x01
    5922:	01 96       	adiw	r24, 0x01	; 1
    5924:	91 83       	std	Z+1, r25	; 0x01
    5926:	80 83       	st	Z, r24
    5928:	0f 90       	pop	r0
    592a:	0f 90       	pop	r0
    592c:	0f 90       	pop	r0
    592e:	0f 90       	pop	r0
			}
		}
		if(Comp_1.heatingWater || Comp_1.Heating)
    5930:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <Comp_1+0x4>
    5934:	81 11       	cpse	r24, r1
    5936:	05 c0       	rjmp	.+10     	; 0x5942 <StartReversingValve+0x168>
    5938:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <Comp_1+0x2>
    593c:	88 23       	and	r24, r24
    593e:	09 f4       	brne	.+2      	; 0x5942 <StartReversingValve+0x168>
    5940:	84 c0       	rjmp	.+264    	; 0x5a4a <StartReversingValve+0x270>
		{
			
			if(PIN_REV_VALVE_1 > 0 && EEpromData.reversMod==0){//
    5942:	94 9b       	sbis	0x12, 4	; 18
    5944:	58 c0       	rjmp	.+176    	; 0x59f6 <StartReversingValve+0x21c>
    5946:	80 91 2a 09 	lds	r24, 0x092A	; 0x80092a <EEpromData+0x28>
    594a:	81 11       	cpse	r24, r1
    594c:	54 c0       	rjmp	.+168    	; 0x59f6 <StartReversingValve+0x21c>
				
				STOP_REV_VALVE_1;
    594e:	a4 98       	cbi	0x14, 4	; 20
				
				xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    5950:	82 e4       	ldi	r24, 0x42	; 66
    5952:	93 e0       	ldi	r25, 0x03	; 3
    5954:	9f 93       	push	r25
    5956:	8f 93       	push	r24
    5958:	80 ea       	ldi	r24, 0xA0	; 160
    595a:	97 e0       	ldi	r25, 0x07	; 7
    595c:	9f 93       	push	r25
    595e:	8f 93       	push	r24
    5960:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_1.revVOn=0;
    5964:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <Comp_1+0xe>
				time_count_1+= difftime(time(&current_time), timeStartRevV_1);
    5968:	c0 90 91 0a 	lds	r12, 0x0A91	; 0x800a91 <timeStartRevV_1>
    596c:	d0 90 92 0a 	lds	r13, 0x0A92	; 0x800a92 <timeStartRevV_1+0x1>
    5970:	e0 90 93 0a 	lds	r14, 0x0A93	; 0x800a93 <timeStartRevV_1+0x2>
    5974:	f0 90 94 0a 	lds	r15, 0x0A94	; 0x800a94 <timeStartRevV_1+0x3>
    5978:	8d ef       	ldi	r24, 0xFD	; 253
    597a:	98 e0       	ldi	r25, 0x08	; 8
    597c:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5980:	a7 01       	movw	r20, r14
    5982:	96 01       	movw	r18, r12
    5984:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5988:	c0 90 47 07 	lds	r12, 0x0747	; 0x800747 <time_count_1.3175>
    598c:	d0 90 48 07 	lds	r13, 0x0748	; 0x800748 <time_count_1.3175+0x1>
    5990:	e0 90 49 07 	lds	r14, 0x0749	; 0x800749 <time_count_1.3175+0x2>
    5994:	f0 90 4a 07 	lds	r15, 0x074A	; 0x80074a <time_count_1.3175+0x3>
    5998:	dc 01       	movw	r26, r24
    599a:	cb 01       	movw	r24, r22
    599c:	8c 0d       	add	r24, r12
    599e:	9d 1d       	adc	r25, r13
    59a0:	ae 1d       	adc	r26, r14
    59a2:	bf 1d       	adc	r27, r15
    59a4:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <time_count_1.3175>
    59a8:	90 93 48 07 	sts	0x0748, r25	; 0x800748 <time_count_1.3175+0x1>
    59ac:	a0 93 49 07 	sts	0x0749, r26	; 0x800749 <time_count_1.3175+0x2>
    59b0:	b0 93 4a 07 	sts	0x074A, r27	; 0x80074a <time_count_1.3175+0x3>
				if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    59b4:	0f 90       	pop	r0
    59b6:	0f 90       	pop	r0
    59b8:	0f 90       	pop	r0
    59ba:	0f 90       	pop	r0
    59bc:	81 31       	cpi	r24, 0x11	; 17
    59be:	9e 40       	sbci	r25, 0x0E	; 14
    59c0:	a1 05       	cpc	r26, r1
    59c2:	b1 05       	cpc	r27, r1
    59c4:	08 f4       	brcc	.+2      	; 0x59c8 <StartReversingValve+0x1ee>
    59c6:	41 c0       	rjmp	.+130    	; 0x5a4a <StartReversingValve+0x270>
    59c8:	e2 e0       	ldi	r30, 0x02	; 2
    59ca:	f9 e0       	ldi	r31, 0x09	; 9
    59cc:	80 ad       	ldd	r24, Z+56	; 0x38
    59ce:	91 ad       	ldd	r25, Z+57	; 0x39
    59d0:	01 96       	adiw	r24, 0x01	; 1
    59d2:	91 af       	std	Z+57, r25	; 0x39
    59d4:	80 af       	std	Z+56, r24	; 0x38
    59d6:	40 e6       	ldi	r20, 0x60	; 96
    59d8:	50 e0       	ldi	r21, 0x00	; 0
    59da:	60 e0       	ldi	r22, 0x00	; 0
    59dc:	70 e0       	ldi	r23, 0x00	; 0
    59de:	cf 01       	movw	r24, r30
    59e0:	0e 94 01 5e 	call	0xbc02	; 0xbc02 <eeprom_update_block>
    59e4:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <time_count_1.3175>
    59e8:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <time_count_1.3175+0x1>
    59ec:	10 92 49 07 	sts	0x0749, r1	; 0x800749 <time_count_1.3175+0x2>
    59f0:	10 92 4a 07 	sts	0x074A, r1	; 0x80074a <time_count_1.3175+0x3>
    59f4:	2a c0       	rjmp	.+84     	; 0x5a4a <StartReversingValve+0x270>
				
			}
			else if(PIN_REV_VALVE_1 == 0 && EEpromData.reversMod==1){
    59f6:	94 99       	sbic	0x12, 4	; 18
    59f8:	28 c0       	rjmp	.+80     	; 0x5a4a <StartReversingValve+0x270>
    59fa:	80 91 2a 09 	lds	r24, 0x092A	; 0x80092a <EEpromData+0x28>
    59fe:	81 30       	cpi	r24, 0x01	; 1
    5a00:	21 f5       	brne	.+72     	; 0x5a4a <StartReversingValve+0x270>
				START_REV_VALVE_1;
    5a02:	a4 9a       	sbi	0x14, 4	; 20
				Comp_1.revVOn=1;
    5a04:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <Comp_1+0xe>
				xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    5a08:	82 e4       	ldi	r24, 0x42	; 66
    5a0a:	93 e0       	ldi	r25, 0x03	; 3
    5a0c:	9f 93       	push	r25
    5a0e:	8f 93       	push	r24
    5a10:	80 ea       	ldi	r24, 0xA0	; 160
    5a12:	97 e0       	ldi	r25, 0x07	; 7
    5a14:	9f 93       	push	r25
    5a16:	8f 93       	push	r24
    5a18:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_1=time(&current_time);
    5a1c:	8d ef       	ldi	r24, 0xFD	; 253
    5a1e:	98 e0       	ldi	r25, 0x08	; 8
    5a20:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5a24:	60 93 91 0a 	sts	0x0A91, r22	; 0x800a91 <timeStartRevV_1>
    5a28:	70 93 92 0a 	sts	0x0A92, r23	; 0x800a92 <timeStartRevV_1+0x1>
    5a2c:	80 93 93 0a 	sts	0x0A93, r24	; 0x800a93 <timeStartRevV_1+0x2>
    5a30:	90 93 94 0a 	sts	0x0A94, r25	; 0x800a94 <timeStartRevV_1+0x3>
				EEpromData.number_turnon_revers_1+=1;
    5a34:	e6 e4       	ldi	r30, 0x46	; 70
    5a36:	f9 e0       	ldi	r31, 0x09	; 9
    5a38:	80 81       	ld	r24, Z
    5a3a:	91 81       	ldd	r25, Z+1	; 0x01
    5a3c:	01 96       	adiw	r24, 0x01	; 1
    5a3e:	91 83       	std	Z+1, r25	; 0x01
    5a40:	80 83       	st	Z, r24
    5a42:	0f 90       	pop	r0
    5a44:	0f 90       	pop	r0
    5a46:	0f 90       	pop	r0
    5a48:	0f 90       	pop	r0
			}
		}
		
		xTimerChangePeriod( xStartThreeWay,period, 100 );
    5a4a:	0f 2e       	mov	r0, r31
    5a4c:	f4 e6       	ldi	r31, 0x64	; 100
    5a4e:	cf 2e       	mov	r12, r31
    5a50:	d1 2c       	mov	r13, r1
    5a52:	e1 2c       	mov	r14, r1
    5a54:	f1 2c       	mov	r15, r1
    5a56:	f0 2d       	mov	r31, r0
    5a58:	00 e0       	ldi	r16, 0x00	; 0
    5a5a:	10 e0       	ldi	r17, 0x00	; 0
    5a5c:	a5 01       	movw	r20, r10
    5a5e:	94 01       	movw	r18, r8
    5a60:	64 e0       	ldi	r22, 0x04	; 4
    5a62:	80 91 d6 09 	lds	r24, 0x09D6	; 0x8009d6 <xStartThreeWay>
    5a66:	90 91 d7 09 	lds	r25, 0x09D7	; 0x8009d7 <xStartThreeWay+0x1>
    5a6a:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    5a6e:	34 c1       	rjmp	.+616    	; 0x5cd8 <StartReversingValve+0x4fe>
		
	}
	else if((*pxTimerID) == uxStartDelayRevVTimer_2_ID)
    5a70:	81 31       	cpi	r24, 0x11	; 17
    5a72:	09 f0       	breq	.+2      	; 0x5a76 <StartReversingValve+0x29c>
    5a74:	31 c1       	rjmp	.+610    	; 0x5cd8 <StartReversingValve+0x4fe>
	{
		period=(TickType_t)EEpromData.HeatingPump_delay;
    5a76:	20 91 05 09 	lds	r18, 0x0905	; 0x800905 <EEpromData+0x3>
		period*=1000;
    5a7a:	30 e0       	ldi	r19, 0x00	; 0
    5a7c:	a8 ee       	ldi	r26, 0xE8	; 232
    5a7e:	b3 e0       	ldi	r27, 0x03	; 3
    5a80:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    5a84:	4b 01       	movw	r8, r22
    5a86:	5c 01       	movw	r10, r24
		
		if(Comp_2.Cooling)
    5a88:	80 91 eb 09 	lds	r24, 0x09EB	; 0x8009eb <Comp_2+0x3>
    5a8c:	88 23       	and	r24, r24
    5a8e:	09 f4       	brne	.+2      	; 0x5a92 <StartReversingValve+0x2b8>
    5a90:	87 c0       	rjmp	.+270    	; 0x5ba0 <StartReversingValve+0x3c6>
		{
			if(PIN_REV_VALVE_2 >0 && EEpromData.reversMod==1){
    5a92:	93 9b       	sbis	0x12, 3	; 18
    5a94:	5a c0       	rjmp	.+180    	; 0x5b4a <StartReversingValve+0x370>
    5a96:	80 91 2a 09 	lds	r24, 0x092A	; 0x80092a <EEpromData+0x28>
    5a9a:	81 30       	cpi	r24, 0x01	; 1
    5a9c:	09 f0       	breq	.+2      	; 0x5aa0 <StartReversingValve+0x2c6>
    5a9e:	55 c0       	rjmp	.+170    	; 0x5b4a <StartReversingValve+0x370>
				
				STOP_REV_VALVE_2;//
    5aa0:	a3 98       	cbi	0x14, 3	; 20
				
				xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    5aa2:	84 e6       	ldi	r24, 0x64	; 100
    5aa4:	93 e0       	ldi	r25, 0x03	; 3
    5aa6:	9f 93       	push	r25
    5aa8:	8f 93       	push	r24
    5aaa:	80 ea       	ldi	r24, 0xA0	; 160
    5aac:	97 e0       	ldi	r25, 0x07	; 7
    5aae:	9f 93       	push	r25
    5ab0:	8f 93       	push	r24
    5ab2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_2.revVOn=0;
    5ab6:	10 92 f6 09 	sts	0x09F6, r1	; 0x8009f6 <Comp_2+0xe>
				time_count_2+= difftime(time(&current_time), timeStartRevV_2);
    5aba:	c0 90 ac 0a 	lds	r12, 0x0AAC	; 0x800aac <timeStartRevV_2>
    5abe:	d0 90 ad 0a 	lds	r13, 0x0AAD	; 0x800aad <timeStartRevV_2+0x1>
    5ac2:	e0 90 ae 0a 	lds	r14, 0x0AAE	; 0x800aae <timeStartRevV_2+0x2>
    5ac6:	f0 90 af 0a 	lds	r15, 0x0AAF	; 0x800aaf <timeStartRevV_2+0x3>
    5aca:	8d ef       	ldi	r24, 0xFD	; 253
    5acc:	98 e0       	ldi	r25, 0x08	; 8
    5ace:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5ad2:	a7 01       	movw	r20, r14
    5ad4:	96 01       	movw	r18, r12
    5ad6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5ada:	c0 90 43 07 	lds	r12, 0x0743	; 0x800743 <time_count_2.3176>
    5ade:	d0 90 44 07 	lds	r13, 0x0744	; 0x800744 <time_count_2.3176+0x1>
    5ae2:	e0 90 45 07 	lds	r14, 0x0745	; 0x800745 <time_count_2.3176+0x2>
    5ae6:	f0 90 46 07 	lds	r15, 0x0746	; 0x800746 <time_count_2.3176+0x3>
    5aea:	dc 01       	movw	r26, r24
    5aec:	cb 01       	movw	r24, r22
    5aee:	8c 0d       	add	r24, r12
    5af0:	9d 1d       	adc	r25, r13
    5af2:	ae 1d       	adc	r26, r14
    5af4:	bf 1d       	adc	r27, r15
    5af6:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <time_count_2.3176>
    5afa:	90 93 44 07 	sts	0x0744, r25	; 0x800744 <time_count_2.3176+0x1>
    5afe:	a0 93 45 07 	sts	0x0745, r26	; 0x800745 <time_count_2.3176+0x2>
    5b02:	b0 93 46 07 	sts	0x0746, r27	; 0x800746 <time_count_2.3176+0x3>
				if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    5b06:	0f 90       	pop	r0
    5b08:	0f 90       	pop	r0
    5b0a:	0f 90       	pop	r0
    5b0c:	0f 90       	pop	r0
    5b0e:	81 31       	cpi	r24, 0x11	; 17
    5b10:	9e 40       	sbci	r25, 0x0E	; 14
    5b12:	a1 05       	cpc	r26, r1
    5b14:	b1 05       	cpc	r27, r1
    5b16:	08 f4       	brcc	.+2      	; 0x5b1a <StartReversingValve+0x340>
    5b18:	43 c0       	rjmp	.+134    	; 0x5ba0 <StartReversingValve+0x3c6>
    5b1a:	e0 e5       	ldi	r30, 0x50	; 80
    5b1c:	f9 e0       	ldi	r31, 0x09	; 9
    5b1e:	80 81       	ld	r24, Z
    5b20:	91 81       	ldd	r25, Z+1	; 0x01
    5b22:	01 96       	adiw	r24, 0x01	; 1
    5b24:	91 83       	std	Z+1, r25	; 0x01
    5b26:	80 83       	st	Z, r24
    5b28:	40 e6       	ldi	r20, 0x60	; 96
    5b2a:	50 e0       	ldi	r21, 0x00	; 0
    5b2c:	60 e0       	ldi	r22, 0x00	; 0
    5b2e:	70 e0       	ldi	r23, 0x00	; 0
    5b30:	82 e0       	ldi	r24, 0x02	; 2
    5b32:	99 e0       	ldi	r25, 0x09	; 9
    5b34:	0e 94 01 5e 	call	0xbc02	; 0xbc02 <eeprom_update_block>
    5b38:	10 92 43 07 	sts	0x0743, r1	; 0x800743 <time_count_2.3176>
    5b3c:	10 92 44 07 	sts	0x0744, r1	; 0x800744 <time_count_2.3176+0x1>
    5b40:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <time_count_2.3176+0x2>
    5b44:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <time_count_2.3176+0x3>
    5b48:	2b c0       	rjmp	.+86     	; 0x5ba0 <StartReversingValve+0x3c6>
				
				
			}
			else if(PIN_REV_VALVE_2 == 0 && EEpromData.reversMod==0){
    5b4a:	93 99       	sbic	0x12, 3	; 18
    5b4c:	29 c0       	rjmp	.+82     	; 0x5ba0 <StartReversingValve+0x3c6>
    5b4e:	80 91 2a 09 	lds	r24, 0x092A	; 0x80092a <EEpromData+0x28>
    5b52:	81 11       	cpse	r24, r1
    5b54:	25 c0       	rjmp	.+74     	; 0x5ba0 <StartReversingValve+0x3c6>
				START_REV_VALVE_2;
    5b56:	a3 9a       	sbi	0x14, 3	; 20
				Comp_1.revVOn=1;
    5b58:	81 e0       	ldi	r24, 0x01	; 1
    5b5a:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <Comp_1+0xe>
				xSerialxPrintf(&xSerial3Port,"StarRevValve_2\r\n");
    5b5e:	85 e7       	ldi	r24, 0x75	; 117
    5b60:	93 e0       	ldi	r25, 0x03	; 3
    5b62:	9f 93       	push	r25
    5b64:	8f 93       	push	r24
    5b66:	80 ea       	ldi	r24, 0xA0	; 160
    5b68:	97 e0       	ldi	r25, 0x07	; 7
    5b6a:	9f 93       	push	r25
    5b6c:	8f 93       	push	r24
    5b6e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_2=time(&current_time);
    5b72:	8d ef       	ldi	r24, 0xFD	; 253
    5b74:	98 e0       	ldi	r25, 0x08	; 8
    5b76:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5b7a:	60 93 ac 0a 	sts	0x0AAC, r22	; 0x800aac <timeStartRevV_2>
    5b7e:	70 93 ad 0a 	sts	0x0AAD, r23	; 0x800aad <timeStartRevV_2+0x1>
    5b82:	80 93 ae 0a 	sts	0x0AAE, r24	; 0x800aae <timeStartRevV_2+0x2>
    5b86:	90 93 af 0a 	sts	0x0AAF, r25	; 0x800aaf <timeStartRevV_2+0x3>
				EEpromData.number_turnon_revers_2+=1;
    5b8a:	ea e5       	ldi	r30, 0x5A	; 90
    5b8c:	f9 e0       	ldi	r31, 0x09	; 9
    5b8e:	80 81       	ld	r24, Z
    5b90:	91 81       	ldd	r25, Z+1	; 0x01
    5b92:	01 96       	adiw	r24, 0x01	; 1
    5b94:	91 83       	std	Z+1, r25	; 0x01
    5b96:	80 83       	st	Z, r24
    5b98:	0f 90       	pop	r0
    5b9a:	0f 90       	pop	r0
    5b9c:	0f 90       	pop	r0
    5b9e:	0f 90       	pop	r0
			}
		}
		if(Comp_2.Heating)
    5ba0:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <Comp_2+0x2>
    5ba4:	88 23       	and	r24, r24
    5ba6:	09 f4       	brne	.+2      	; 0x5baa <StartReversingValve+0x3d0>
    5ba8:	85 c0       	rjmp	.+266    	; 0x5cb4 <StartReversingValve+0x4da>
		{
			if(PIN_REV_VALVE_2 > 0 && EEpromData.reversMod==0){//
    5baa:	93 9b       	sbis	0x12, 3	; 18
    5bac:	59 c0       	rjmp	.+178    	; 0x5c60 <StartReversingValve+0x486>
    5bae:	80 91 2a 09 	lds	r24, 0x092A	; 0x80092a <EEpromData+0x28>
    5bb2:	81 11       	cpse	r24, r1
    5bb4:	55 c0       	rjmp	.+170    	; 0x5c60 <StartReversingValve+0x486>
				
				STOP_REV_VALVE_2;
    5bb6:	a3 98       	cbi	0x14, 3	; 20
				
				xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    5bb8:	84 e6       	ldi	r24, 0x64	; 100
    5bba:	93 e0       	ldi	r25, 0x03	; 3
    5bbc:	9f 93       	push	r25
    5bbe:	8f 93       	push	r24
    5bc0:	80 ea       	ldi	r24, 0xA0	; 160
    5bc2:	97 e0       	ldi	r25, 0x07	; 7
    5bc4:	9f 93       	push	r25
    5bc6:	8f 93       	push	r24
    5bc8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_2.revVOn=0;
    5bcc:	10 92 f6 09 	sts	0x09F6, r1	; 0x8009f6 <Comp_2+0xe>
				time_count_2+= difftime(time(&current_time), timeStartRevV_2);
    5bd0:	c0 90 ac 0a 	lds	r12, 0x0AAC	; 0x800aac <timeStartRevV_2>
    5bd4:	d0 90 ad 0a 	lds	r13, 0x0AAD	; 0x800aad <timeStartRevV_2+0x1>
    5bd8:	e0 90 ae 0a 	lds	r14, 0x0AAE	; 0x800aae <timeStartRevV_2+0x2>
    5bdc:	f0 90 af 0a 	lds	r15, 0x0AAF	; 0x800aaf <timeStartRevV_2+0x3>
    5be0:	8d ef       	ldi	r24, 0xFD	; 253
    5be2:	98 e0       	ldi	r25, 0x08	; 8
    5be4:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5be8:	a7 01       	movw	r20, r14
    5bea:	96 01       	movw	r18, r12
    5bec:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5bf0:	c0 90 43 07 	lds	r12, 0x0743	; 0x800743 <time_count_2.3176>
    5bf4:	d0 90 44 07 	lds	r13, 0x0744	; 0x800744 <time_count_2.3176+0x1>
    5bf8:	e0 90 45 07 	lds	r14, 0x0745	; 0x800745 <time_count_2.3176+0x2>
    5bfc:	f0 90 46 07 	lds	r15, 0x0746	; 0x800746 <time_count_2.3176+0x3>
    5c00:	dc 01       	movw	r26, r24
    5c02:	cb 01       	movw	r24, r22
    5c04:	8c 0d       	add	r24, r12
    5c06:	9d 1d       	adc	r25, r13
    5c08:	ae 1d       	adc	r26, r14
    5c0a:	bf 1d       	adc	r27, r15
    5c0c:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <time_count_2.3176>
    5c10:	90 93 44 07 	sts	0x0744, r25	; 0x800744 <time_count_2.3176+0x1>
    5c14:	a0 93 45 07 	sts	0x0745, r26	; 0x800745 <time_count_2.3176+0x2>
    5c18:	b0 93 46 07 	sts	0x0746, r27	; 0x800746 <time_count_2.3176+0x3>
				if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    5c1c:	0f 90       	pop	r0
    5c1e:	0f 90       	pop	r0
    5c20:	0f 90       	pop	r0
    5c22:	0f 90       	pop	r0
    5c24:	81 31       	cpi	r24, 0x11	; 17
    5c26:	9e 40       	sbci	r25, 0x0E	; 14
    5c28:	a1 05       	cpc	r26, r1
    5c2a:	b1 05       	cpc	r27, r1
    5c2c:	08 f4       	brcc	.+2      	; 0x5c30 <StartReversingValve+0x456>
    5c2e:	42 c0       	rjmp	.+132    	; 0x5cb4 <StartReversingValve+0x4da>
    5c30:	e0 e5       	ldi	r30, 0x50	; 80
    5c32:	f9 e0       	ldi	r31, 0x09	; 9
    5c34:	80 81       	ld	r24, Z
    5c36:	91 81       	ldd	r25, Z+1	; 0x01
    5c38:	01 96       	adiw	r24, 0x01	; 1
    5c3a:	91 83       	std	Z+1, r25	; 0x01
    5c3c:	80 83       	st	Z, r24
    5c3e:	40 e6       	ldi	r20, 0x60	; 96
    5c40:	50 e0       	ldi	r21, 0x00	; 0
    5c42:	60 e0       	ldi	r22, 0x00	; 0
    5c44:	70 e0       	ldi	r23, 0x00	; 0
    5c46:	82 e0       	ldi	r24, 0x02	; 2
    5c48:	99 e0       	ldi	r25, 0x09	; 9
    5c4a:	0e 94 01 5e 	call	0xbc02	; 0xbc02 <eeprom_update_block>
    5c4e:	10 92 43 07 	sts	0x0743, r1	; 0x800743 <time_count_2.3176>
    5c52:	10 92 44 07 	sts	0x0744, r1	; 0x800744 <time_count_2.3176+0x1>
    5c56:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <time_count_2.3176+0x2>
    5c5a:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <time_count_2.3176+0x3>
    5c5e:	2a c0       	rjmp	.+84     	; 0x5cb4 <StartReversingValve+0x4da>
				
			}
			else if(PIN_REV_VALVE_2 == 0 && EEpromData.reversMod==1){
    5c60:	93 99       	sbic	0x12, 3	; 18
    5c62:	28 c0       	rjmp	.+80     	; 0x5cb4 <StartReversingValve+0x4da>
    5c64:	80 91 2a 09 	lds	r24, 0x092A	; 0x80092a <EEpromData+0x28>
    5c68:	81 30       	cpi	r24, 0x01	; 1
    5c6a:	21 f5       	brne	.+72     	; 0x5cb4 <StartReversingValve+0x4da>
				START_REV_VALVE_2;
    5c6c:	a3 9a       	sbi	0x14, 3	; 20
				Comp_2.revVOn=1;
    5c6e:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <Comp_2+0xe>
				xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    5c72:	84 e6       	ldi	r24, 0x64	; 100
    5c74:	93 e0       	ldi	r25, 0x03	; 3
    5c76:	9f 93       	push	r25
    5c78:	8f 93       	push	r24
    5c7a:	80 ea       	ldi	r24, 0xA0	; 160
    5c7c:	97 e0       	ldi	r25, 0x07	; 7
    5c7e:	9f 93       	push	r25
    5c80:	8f 93       	push	r24
    5c82:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_2=time(&current_time);
    5c86:	8d ef       	ldi	r24, 0xFD	; 253
    5c88:	98 e0       	ldi	r25, 0x08	; 8
    5c8a:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5c8e:	60 93 ac 0a 	sts	0x0AAC, r22	; 0x800aac <timeStartRevV_2>
    5c92:	70 93 ad 0a 	sts	0x0AAD, r23	; 0x800aad <timeStartRevV_2+0x1>
    5c96:	80 93 ae 0a 	sts	0x0AAE, r24	; 0x800aae <timeStartRevV_2+0x2>
    5c9a:	90 93 af 0a 	sts	0x0AAF, r25	; 0x800aaf <timeStartRevV_2+0x3>
				EEpromData.number_turnon_revers_2+=1;
    5c9e:	ea e5       	ldi	r30, 0x5A	; 90
    5ca0:	f9 e0       	ldi	r31, 0x09	; 9
    5ca2:	80 81       	ld	r24, Z
    5ca4:	91 81       	ldd	r25, Z+1	; 0x01
    5ca6:	01 96       	adiw	r24, 0x01	; 1
    5ca8:	91 83       	std	Z+1, r25	; 0x01
    5caa:	80 83       	st	Z, r24
    5cac:	0f 90       	pop	r0
    5cae:	0f 90       	pop	r0
    5cb0:	0f 90       	pop	r0
    5cb2:	0f 90       	pop	r0
			}
		}

		xTimerChangePeriod( xStartHeatPump_2,period, 100 );
    5cb4:	0f 2e       	mov	r0, r31
    5cb6:	f4 e6       	ldi	r31, 0x64	; 100
    5cb8:	cf 2e       	mov	r12, r31
    5cba:	d1 2c       	mov	r13, r1
    5cbc:	e1 2c       	mov	r14, r1
    5cbe:	f1 2c       	mov	r15, r1
    5cc0:	f0 2d       	mov	r31, r0
    5cc2:	00 e0       	ldi	r16, 0x00	; 0
    5cc4:	10 e0       	ldi	r17, 0x00	; 0
    5cc6:	a5 01       	movw	r20, r10
    5cc8:	94 01       	movw	r18, r8
    5cca:	64 e0       	ldi	r22, 0x04	; 4
    5ccc:	80 91 d8 09 	lds	r24, 0x09D8	; 0x8009d8 <xStartHeatPump_2>
    5cd0:	90 91 d9 09 	lds	r25, 0x09D9	; 0x8009d9 <xStartHeatPump_2+0x1>
    5cd4:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}


}
    5cd8:	1f 91       	pop	r17
    5cda:	0f 91       	pop	r16
    5cdc:	ff 90       	pop	r15
    5cde:	ef 90       	pop	r14
    5ce0:	df 90       	pop	r13
    5ce2:	cf 90       	pop	r12
    5ce4:	bf 90       	pop	r11
    5ce6:	af 90       	pop	r10
    5ce8:	9f 90       	pop	r9
    5cea:	8f 90       	pop	r8
    5cec:	08 95       	ret

00005cee <StartThreeWay>:
//------------------------------------------------
void StartThreeWay()
{
    5cee:	8f 92       	push	r8
    5cf0:	9f 92       	push	r9
    5cf2:	af 92       	push	r10
    5cf4:	bf 92       	push	r11
    5cf6:	cf 92       	push	r12
    5cf8:	df 92       	push	r13
    5cfa:	ef 92       	push	r14
    5cfc:	ff 92       	push	r15
    5cfe:	0f 93       	push	r16
    5d00:	1f 93       	push	r17
	static time_t time_count;
    TickType_t period;
	
	
	period=(TickType_t)EEpromData.HeatingPump_delay;
    5d02:	20 91 05 09 	lds	r18, 0x0905	; 0x800905 <EEpromData+0x3>
	period*=1000;
    5d06:	30 e0       	ldi	r19, 0x00	; 0
    5d08:	a8 ee       	ldi	r26, 0xE8	; 232
    5d0a:	b3 e0       	ldi	r27, 0x03	; 3
    5d0c:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    5d10:	4b 01       	movw	r8, r22
    5d12:	5c 01       	movw	r10, r24
	xSerialxPrintf(&xSerial3Port,"StartThreeWay\r\n");
    5d14:	86 e8       	ldi	r24, 0x86	; 134
    5d16:	93 e0       	ldi	r25, 0x03	; 3
    5d18:	9f 93       	push	r25
    5d1a:	8f 93       	push	r24
    5d1c:	80 ea       	ldi	r24, 0xA0	; 160
    5d1e:	97 e0       	ldi	r25, 0x07	; 7
    5d20:	9f 93       	push	r25
    5d22:	8f 93       	push	r24
    5d24:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(Comp_1.heatingWater)
    5d28:	0f 90       	pop	r0
    5d2a:	0f 90       	pop	r0
    5d2c:	0f 90       	pop	r0
    5d2e:	0f 90       	pop	r0
    5d30:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <Comp_1+0x4>
    5d34:	88 23       	and	r24, r24
    5d36:	71 f1       	breq	.+92     	; 0x5d94 <StartThreeWay+0xa6>
	{
		
		if(PIN_THWAY_VALVE == 0)//
    5d38:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5d3c:	88 23       	and	r24, r24
    5d3e:	e4 f0       	brlt	.+56     	; 0x5d78 <StartThreeWay+0x8a>
		{
			START_THWAY_VALVE;
    5d40:	e2 e0       	ldi	r30, 0x02	; 2
    5d42:	f1 e0       	ldi	r31, 0x01	; 1
    5d44:	80 81       	ld	r24, Z
    5d46:	80 68       	ori	r24, 0x80	; 128
    5d48:	80 83       	st	Z, r24
			
			//xSerialxPrintf(&xSerial3Port,"StartThreeWay\r\n");
			Comp_1.threeWOn=1;
    5d4a:	81 e0       	ldi	r24, 0x01	; 1
    5d4c:	80 93 6f 09 	sts	0x096F, r24	; 0x80096f <Comp_1+0xd>
			timeStartThreeW=time(&current_time);
    5d50:	8d ef       	ldi	r24, 0xFD	; 253
    5d52:	98 e0       	ldi	r25, 0x08	; 8
    5d54:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5d58:	60 93 86 0a 	sts	0x0A86, r22	; 0x800a86 <timeStartThreeW>
    5d5c:	70 93 87 0a 	sts	0x0A87, r23	; 0x800a87 <timeStartThreeW+0x1>
    5d60:	80 93 88 0a 	sts	0x0A88, r24	; 0x800a88 <timeStartThreeW+0x2>
    5d64:	90 93 89 0a 	sts	0x0A89, r25	; 0x800a89 <timeStartThreeW+0x3>
			EEpromData.number_turnon_threeway+=1;
    5d68:	e8 e4       	ldi	r30, 0x48	; 72
    5d6a:	f9 e0       	ldi	r31, 0x09	; 9
    5d6c:	80 81       	ld	r24, Z
    5d6e:	91 81       	ldd	r25, Z+1	; 0x01
    5d70:	01 96       	adiw	r24, 0x01	; 1
    5d72:	91 83       	std	Z+1, r25	; 0x01
    5d74:	80 83       	st	Z, r24
    5d76:	0e c0       	rjmp	.+28     	; 0x5d94 <StartThreeWay+0xa6>
			
		} else xSerialxPrintf(&xSerial3Port,"StopThreeWay\r\n");
    5d78:	86 e9       	ldi	r24, 0x96	; 150
    5d7a:	93 e0       	ldi	r25, 0x03	; 3
    5d7c:	9f 93       	push	r25
    5d7e:	8f 93       	push	r24
    5d80:	80 ea       	ldi	r24, 0xA0	; 160
    5d82:	97 e0       	ldi	r25, 0x07	; 7
    5d84:	9f 93       	push	r25
    5d86:	8f 93       	push	r24
    5d88:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    5d8c:	0f 90       	pop	r0
    5d8e:	0f 90       	pop	r0
    5d90:	0f 90       	pop	r0
    5d92:	0f 90       	pop	r0
	}
	if(Comp_1.Heating || Comp_1.Cooling)
    5d94:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <Comp_1+0x2>
    5d98:	81 11       	cpse	r24, r1
    5d9a:	05 c0       	rjmp	.+10     	; 0x5da6 <StartThreeWay+0xb8>
    5d9c:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <Comp_1+0x3>
    5da0:	88 23       	and	r24, r24
    5da2:	09 f4       	brne	.+2      	; 0x5da6 <StartThreeWay+0xb8>
    5da4:	4d c0       	rjmp	.+154    	; 0x5e40 <StartThreeWay+0x152>
	{
		if(PIN_THWAY_VALVE > 0)//
    5da6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5daa:	88 23       	and	r24, r24
    5dac:	0c f0       	brlt	.+2      	; 0x5db0 <StartThreeWay+0xc2>
    5dae:	48 c0       	rjmp	.+144    	; 0x5e40 <StartThreeWay+0x152>
		{
			STOP_THWAY_VALVE;
    5db0:	e2 e0       	ldi	r30, 0x02	; 2
    5db2:	f1 e0       	ldi	r31, 0x01	; 1
    5db4:	80 81       	ld	r24, Z
    5db6:	8f 77       	andi	r24, 0x7F	; 127
    5db8:	80 83       	st	Z, r24
			
			//xSerialxPrintf(&xSerial3Port,"StopThreeWay\r\n");
			Comp_1.threeWOn=0;
    5dba:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <Comp_1+0xd>
			time_count+= difftime(time(&current_time), timeStartThreeW);
    5dbe:	c0 90 86 0a 	lds	r12, 0x0A86	; 0x800a86 <timeStartThreeW>
    5dc2:	d0 90 87 0a 	lds	r13, 0x0A87	; 0x800a87 <timeStartThreeW+0x1>
    5dc6:	e0 90 88 0a 	lds	r14, 0x0A88	; 0x800a88 <timeStartThreeW+0x2>
    5dca:	f0 90 89 0a 	lds	r15, 0x0A89	; 0x800a89 <timeStartThreeW+0x3>
    5dce:	8d ef       	ldi	r24, 0xFD	; 253
    5dd0:	98 e0       	ldi	r25, 0x08	; 8
    5dd2:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5dd6:	a7 01       	movw	r20, r14
    5dd8:	96 01       	movw	r18, r12
    5dda:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5dde:	c0 90 3f 07 	lds	r12, 0x073F	; 0x80073f <time_count.3180>
    5de2:	d0 90 40 07 	lds	r13, 0x0740	; 0x800740 <time_count.3180+0x1>
    5de6:	e0 90 41 07 	lds	r14, 0x0741	; 0x800741 <time_count.3180+0x2>
    5dea:	f0 90 42 07 	lds	r15, 0x0742	; 0x800742 <time_count.3180+0x3>
    5dee:	dc 01       	movw	r26, r24
    5df0:	cb 01       	movw	r24, r22
    5df2:	8c 0d       	add	r24, r12
    5df4:	9d 1d       	adc	r25, r13
    5df6:	ae 1d       	adc	r26, r14
    5df8:	bf 1d       	adc	r27, r15
    5dfa:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <time_count.3180>
    5dfe:	90 93 40 07 	sts	0x0740, r25	; 0x800740 <time_count.3180+0x1>
    5e02:	a0 93 41 07 	sts	0x0741, r26	; 0x800741 <time_count.3180+0x2>
    5e06:	b0 93 42 07 	sts	0x0742, r27	; 0x800742 <time_count.3180+0x3>
			if(time_count>ONE_HOUR){EEpromData.time_threeway++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count=0;}
    5e0a:	81 31       	cpi	r24, 0x11	; 17
    5e0c:	9e 40       	sbci	r25, 0x0E	; 14
    5e0e:	a1 05       	cpc	r26, r1
    5e10:	b1 05       	cpc	r27, r1
    5e12:	b0 f0       	brcs	.+44     	; 0x5e40 <StartThreeWay+0x152>
    5e14:	e2 e0       	ldi	r30, 0x02	; 2
    5e16:	f9 e0       	ldi	r31, 0x09	; 9
    5e18:	84 ad       	ldd	r24, Z+60	; 0x3c
    5e1a:	95 ad       	ldd	r25, Z+61	; 0x3d
    5e1c:	01 96       	adiw	r24, 0x01	; 1
    5e1e:	95 af       	std	Z+61, r25	; 0x3d
    5e20:	84 af       	std	Z+60, r24	; 0x3c
    5e22:	40 e6       	ldi	r20, 0x60	; 96
    5e24:	50 e0       	ldi	r21, 0x00	; 0
    5e26:	60 e0       	ldi	r22, 0x00	; 0
    5e28:	70 e0       	ldi	r23, 0x00	; 0
    5e2a:	cf 01       	movw	r24, r30
    5e2c:	0e 94 01 5e 	call	0xbc02	; 0xbc02 <eeprom_update_block>
    5e30:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <time_count.3180>
    5e34:	10 92 40 07 	sts	0x0740, r1	; 0x800740 <time_count.3180+0x1>
    5e38:	10 92 41 07 	sts	0x0741, r1	; 0x800741 <time_count.3180+0x2>
    5e3c:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <time_count.3180+0x3>
		}
	}
	
	xTimerChangePeriod( xStartHeatPump_1,period, 100 );
    5e40:	0f 2e       	mov	r0, r31
    5e42:	f4 e6       	ldi	r31, 0x64	; 100
    5e44:	cf 2e       	mov	r12, r31
    5e46:	d1 2c       	mov	r13, r1
    5e48:	e1 2c       	mov	r14, r1
    5e4a:	f1 2c       	mov	r15, r1
    5e4c:	f0 2d       	mov	r31, r0
    5e4e:	00 e0       	ldi	r16, 0x00	; 0
    5e50:	10 e0       	ldi	r17, 0x00	; 0
    5e52:	a5 01       	movw	r20, r10
    5e54:	94 01       	movw	r18, r8
    5e56:	64 e0       	ldi	r22, 0x04	; 4
    5e58:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <xStartHeatPump_1>
    5e5c:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <xStartHeatPump_1+0x1>
    5e60:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	
}
    5e64:	1f 91       	pop	r17
    5e66:	0f 91       	pop	r16
    5e68:	ff 90       	pop	r15
    5e6a:	ef 90       	pop	r14
    5e6c:	df 90       	pop	r13
    5e6e:	cf 90       	pop	r12
    5e70:	bf 90       	pop	r11
    5e72:	af 90       	pop	r10
    5e74:	9f 90       	pop	r9
    5e76:	8f 90       	pop	r8
    5e78:	08 95       	ret

00005e7a <HeatPump_Stop>:
		
	}
}
//-------------------------------------------------------------------------
void HeatPump_Stop(TimerHandle_t xTimer)
{
    5e7a:	8f 92       	push	r8
    5e7c:	9f 92       	push	r9
    5e7e:	af 92       	push	r10
    5e80:	bf 92       	push	r11
    5e82:	cf 92       	push	r12
    5e84:	df 92       	push	r13
    5e86:	ef 92       	push	r14
    5e88:	ff 92       	push	r15
    5e8a:	0f 93       	push	r16
    5e8c:	1f 93       	push	r17
	
	TickType_t period;
	
	//xSerialxPrintf(&xSerial3Port,"StopHeatPump\r\n");
	
	pxTimerID = pvTimerGetTimerID(xTimer);
    5e8e:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>

	if((*pxTimerID) == uxStopDelayHeatPTimer_1_ID)
    5e92:	fc 01       	movw	r30, r24
    5e94:	80 81       	ld	r24, Z
    5e96:	88 30       	cpi	r24, 0x08	; 8
    5e98:	09 f0       	breq	.+2      	; 0x5e9c <HeatPump_Stop+0x22>
    5e9a:	76 c0       	rjmp	.+236    	; 0x5f88 <HeatPump_Stop+0x10e>
	{
		period=(TickType_t)EEpromData.Three_Way_delay;
    5e9c:	20 91 06 09 	lds	r18, 0x0906	; 0x800906 <EEpromData+0x4>
		period*=1000;
    5ea0:	30 e0       	ldi	r19, 0x00	; 0
    5ea2:	a8 ee       	ldi	r26, 0xE8	; 232
    5ea4:	b3 e0       	ldi	r27, 0x03	; 3
    5ea6:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    5eaa:	4b 01       	movw	r8, r22
    5eac:	5c 01       	movw	r10, r24
		
		if(PIN_HEAT_PUMP_1 > 0)//
    5eae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5eb2:	83 ff       	sbrs	r24, 3
    5eb4:	56 c0       	rjmp	.+172    	; 0x5f62 <HeatPump_Stop+0xe8>
		{
			STOP_HEAT_PUMP_1;
    5eb6:	e2 e0       	ldi	r30, 0x02	; 2
    5eb8:	f1 e0       	ldi	r31, 0x01	; 1
    5eba:	80 81       	ld	r24, Z
    5ebc:	87 7f       	andi	r24, 0xF7	; 247
    5ebe:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopHeatPump_1\r\n");
    5ec0:	85 ea       	ldi	r24, 0xA5	; 165
    5ec2:	93 e0       	ldi	r25, 0x03	; 3
    5ec4:	9f 93       	push	r25
    5ec6:	8f 93       	push	r24
    5ec8:	80 ea       	ldi	r24, 0xA0	; 160
    5eca:	97 e0       	ldi	r25, 0x07	; 7
    5ecc:	9f 93       	push	r25
    5ece:	8f 93       	push	r24
    5ed0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.heatPOn=0;
    5ed4:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <Comp_1+0xc>
			time_count_1+= difftime(time(&current_time), timeStartHeatP_1);
    5ed8:	c0 90 6e 0a 	lds	r12, 0x0A6E	; 0x800a6e <timeStartHeatP_1>
    5edc:	d0 90 6f 0a 	lds	r13, 0x0A6F	; 0x800a6f <timeStartHeatP_1+0x1>
    5ee0:	e0 90 70 0a 	lds	r14, 0x0A70	; 0x800a70 <timeStartHeatP_1+0x2>
    5ee4:	f0 90 71 0a 	lds	r15, 0x0A71	; 0x800a71 <timeStartHeatP_1+0x3>
    5ee8:	8d ef       	ldi	r24, 0xFD	; 253
    5eea:	98 e0       	ldi	r25, 0x08	; 8
    5eec:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5ef0:	a7 01       	movw	r20, r14
    5ef2:	96 01       	movw	r18, r12
    5ef4:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5ef8:	c0 90 33 07 	lds	r12, 0x0733	; 0x800733 <time_count_1.3209>
    5efc:	d0 90 34 07 	lds	r13, 0x0734	; 0x800734 <time_count_1.3209+0x1>
    5f00:	e0 90 35 07 	lds	r14, 0x0735	; 0x800735 <time_count_1.3209+0x2>
    5f04:	f0 90 36 07 	lds	r15, 0x0736	; 0x800736 <time_count_1.3209+0x3>
    5f08:	dc 01       	movw	r26, r24
    5f0a:	cb 01       	movw	r24, r22
    5f0c:	8c 0d       	add	r24, r12
    5f0e:	9d 1d       	adc	r25, r13
    5f10:	ae 1d       	adc	r26, r14
    5f12:	bf 1d       	adc	r27, r15
    5f14:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <time_count_1.3209>
    5f18:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <time_count_1.3209+0x1>
    5f1c:	a0 93 35 07 	sts	0x0735, r26	; 0x800735 <time_count_1.3209+0x2>
    5f20:	b0 93 36 07 	sts	0x0736, r27	; 0x800736 <time_count_1.3209+0x3>
			if(time_count_1>ONE_HOUR){EEpromData.time_pump_hiter_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    5f24:	0f 90       	pop	r0
    5f26:	0f 90       	pop	r0
    5f28:	0f 90       	pop	r0
    5f2a:	0f 90       	pop	r0
    5f2c:	81 31       	cpi	r24, 0x11	; 17
    5f2e:	9e 40       	sbci	r25, 0x0E	; 14
    5f30:	a1 05       	cpc	r26, r1
    5f32:	b1 05       	cpc	r27, r1
    5f34:	b0 f0       	brcs	.+44     	; 0x5f62 <HeatPump_Stop+0xe8>
    5f36:	e2 e0       	ldi	r30, 0x02	; 2
    5f38:	f9 e0       	ldi	r31, 0x09	; 9
    5f3a:	84 a9       	ldd	r24, Z+52	; 0x34
    5f3c:	95 a9       	ldd	r25, Z+53	; 0x35
    5f3e:	01 96       	adiw	r24, 0x01	; 1
    5f40:	95 ab       	std	Z+53, r25	; 0x35
    5f42:	84 ab       	std	Z+52, r24	; 0x34
    5f44:	40 e6       	ldi	r20, 0x60	; 96
    5f46:	50 e0       	ldi	r21, 0x00	; 0
    5f48:	60 e0       	ldi	r22, 0x00	; 0
    5f4a:	70 e0       	ldi	r23, 0x00	; 0
    5f4c:	cf 01       	movw	r24, r30
    5f4e:	0e 94 01 5e 	call	0xbc02	; 0xbc02 <eeprom_update_block>
    5f52:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <time_count_1.3209>
    5f56:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <time_count_1.3209+0x1>
    5f5a:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <time_count_1.3209+0x2>
    5f5e:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <time_count_1.3209+0x3>
			
		}
		xTimerChangePeriod( xStopThreeWay,period, 100 );
    5f62:	0f 2e       	mov	r0, r31
    5f64:	f4 e6       	ldi	r31, 0x64	; 100
    5f66:	cf 2e       	mov	r12, r31
    5f68:	d1 2c       	mov	r13, r1
    5f6a:	e1 2c       	mov	r14, r1
    5f6c:	f1 2c       	mov	r15, r1
    5f6e:	f0 2d       	mov	r31, r0
    5f70:	00 e0       	ldi	r16, 0x00	; 0
    5f72:	10 e0       	ldi	r17, 0x00	; 0
    5f74:	a5 01       	movw	r20, r10
    5f76:	94 01       	movw	r18, r8
    5f78:	64 e0       	ldi	r22, 0x04	; 4
    5f7a:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <xStopThreeWay>
    5f7e:	90 91 d5 09 	lds	r25, 0x09D5	; 0x8009d5 <xStopThreeWay+0x1>
    5f82:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    5f86:	7b c0       	rjmp	.+246    	; 0x607e <HeatPump_Stop+0x204>
		//xTimerStart(xStopThreeWay, 0);
	}

	else if((*pxTimerID) == uxStopDelayHeatPTimer_2_ID)
    5f88:	85 31       	cpi	r24, 0x15	; 21
    5f8a:	09 f0       	breq	.+2      	; 0x5f8e <HeatPump_Stop+0x114>
    5f8c:	78 c0       	rjmp	.+240    	; 0x607e <HeatPump_Stop+0x204>
	{
		period=(TickType_t)EEpromData.Revers_Valve_delay;
		period*=1000;
		xSerialxPrintf(&xSerial3Port,"StopHeatPump_2\r\n");
    5f8e:	86 eb       	ldi	r24, 0xB6	; 182
    5f90:	93 e0       	ldi	r25, 0x03	; 3
    5f92:	9f 93       	push	r25
    5f94:	8f 93       	push	r24
    5f96:	80 ea       	ldi	r24, 0xA0	; 160
    5f98:	97 e0       	ldi	r25, 0x07	; 7
    5f9a:	9f 93       	push	r25
    5f9c:	8f 93       	push	r24
    5f9e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_2 > 0)//
    5fa2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5fa6:	0f 90       	pop	r0
    5fa8:	0f 90       	pop	r0
    5faa:	0f 90       	pop	r0
    5fac:	0f 90       	pop	r0
    5fae:	84 ff       	sbrs	r24, 4
    5fb0:	49 c0       	rjmp	.+146    	; 0x6044 <HeatPump_Stop+0x1ca>
		{
			STOP_HEAT_PUMP_2;
    5fb2:	e2 e0       	ldi	r30, 0x02	; 2
    5fb4:	f1 e0       	ldi	r31, 0x01	; 1
    5fb6:	80 81       	ld	r24, Z
    5fb8:	8f 7e       	andi	r24, 0xEF	; 239
    5fba:	80 83       	st	Z, r24
			
			
			Comp_2.heatPOn=0;
    5fbc:	10 92 f4 09 	sts	0x09F4, r1	; 0x8009f4 <Comp_2+0xc>
			time_count_2+= difftime(time(&current_time), timeStartHeatP_2);
    5fc0:	c0 90 82 0a 	lds	r12, 0x0A82	; 0x800a82 <timeStartHeatP_2>
    5fc4:	d0 90 83 0a 	lds	r13, 0x0A83	; 0x800a83 <timeStartHeatP_2+0x1>
    5fc8:	e0 90 84 0a 	lds	r14, 0x0A84	; 0x800a84 <timeStartHeatP_2+0x2>
    5fcc:	f0 90 85 0a 	lds	r15, 0x0A85	; 0x800a85 <timeStartHeatP_2+0x3>
    5fd0:	8d ef       	ldi	r24, 0xFD	; 253
    5fd2:	98 e0       	ldi	r25, 0x08	; 8
    5fd4:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5fd8:	a7 01       	movw	r20, r14
    5fda:	96 01       	movw	r18, r12
    5fdc:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5fe0:	c0 90 2f 07 	lds	r12, 0x072F	; 0x80072f <time_count_2.3210>
    5fe4:	d0 90 30 07 	lds	r13, 0x0730	; 0x800730 <time_count_2.3210+0x1>
    5fe8:	e0 90 31 07 	lds	r14, 0x0731	; 0x800731 <time_count_2.3210+0x2>
    5fec:	f0 90 32 07 	lds	r15, 0x0732	; 0x800732 <time_count_2.3210+0x3>
    5ff0:	dc 01       	movw	r26, r24
    5ff2:	cb 01       	movw	r24, r22
    5ff4:	8c 0d       	add	r24, r12
    5ff6:	9d 1d       	adc	r25, r13
    5ff8:	ae 1d       	adc	r26, r14
    5ffa:	bf 1d       	adc	r27, r15
    5ffc:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <time_count_2.3210>
    6000:	90 93 30 07 	sts	0x0730, r25	; 0x800730 <time_count_2.3210+0x1>
    6004:	a0 93 31 07 	sts	0x0731, r26	; 0x800731 <time_count_2.3210+0x2>
    6008:	b0 93 32 07 	sts	0x0732, r27	; 0x800732 <time_count_2.3210+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_pump_hiter_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    600c:	81 31       	cpi	r24, 0x11	; 17
    600e:	9e 40       	sbci	r25, 0x0E	; 14
    6010:	a1 05       	cpc	r26, r1
    6012:	b1 05       	cpc	r27, r1
    6014:	b8 f0       	brcs	.+46     	; 0x6044 <HeatPump_Stop+0x1ca>
    6016:	ec e4       	ldi	r30, 0x4C	; 76
    6018:	f9 e0       	ldi	r31, 0x09	; 9
    601a:	80 81       	ld	r24, Z
    601c:	91 81       	ldd	r25, Z+1	; 0x01
    601e:	01 96       	adiw	r24, 0x01	; 1
    6020:	91 83       	std	Z+1, r25	; 0x01
    6022:	80 83       	st	Z, r24
    6024:	40 e6       	ldi	r20, 0x60	; 96
    6026:	50 e0       	ldi	r21, 0x00	; 0
    6028:	60 e0       	ldi	r22, 0x00	; 0
    602a:	70 e0       	ldi	r23, 0x00	; 0
    602c:	82 e0       	ldi	r24, 0x02	; 2
    602e:	99 e0       	ldi	r25, 0x09	; 9
    6030:	0e 94 01 5e 	call	0xbc02	; 0xbc02 <eeprom_update_block>
    6034:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <time_count_2.3210>
    6038:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <time_count_2.3210+0x1>
    603c:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <time_count_2.3210+0x2>
    6040:	10 92 32 07 	sts	0x0732, r1	; 0x800732 <time_count_2.3210+0x3>
			
		}
		xTimerChangePeriod( xStopRevValve_2,(EEpromData.Revers_Valve_delay*1000) / portTICK_PERIOD_MS, 100 );
    6044:	40 91 04 09 	lds	r20, 0x0904	; 0x800904 <EEpromData+0x2>
    6048:	88 ee       	ldi	r24, 0xE8	; 232
    604a:	93 e0       	ldi	r25, 0x03	; 3
    604c:	48 9f       	mul	r20, r24
    604e:	90 01       	movw	r18, r0
    6050:	49 9f       	mul	r20, r25
    6052:	30 0d       	add	r19, r0
    6054:	11 24       	eor	r1, r1
    6056:	03 2e       	mov	r0, r19
    6058:	00 0c       	add	r0, r0
    605a:	44 0b       	sbc	r20, r20
    605c:	55 0b       	sbc	r21, r21
    605e:	0f 2e       	mov	r0, r31
    6060:	f4 e6       	ldi	r31, 0x64	; 100
    6062:	cf 2e       	mov	r12, r31
    6064:	d1 2c       	mov	r13, r1
    6066:	e1 2c       	mov	r14, r1
    6068:	f1 2c       	mov	r15, r1
    606a:	f0 2d       	mov	r31, r0
    606c:	00 e0       	ldi	r16, 0x00	; 0
    606e:	10 e0       	ldi	r17, 0x00	; 0
    6070:	64 e0       	ldi	r22, 0x04	; 4
    6072:	80 91 f7 08 	lds	r24, 0x08F7	; 0x8008f7 <xStopRevValve_2>
    6076:	90 91 f8 08 	lds	r25, 0x08F8	; 0x8008f8 <xStopRevValve_2+0x1>
    607a:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
}
    607e:	1f 91       	pop	r17
    6080:	0f 91       	pop	r16
    6082:	ff 90       	pop	r15
    6084:	ef 90       	pop	r14
    6086:	df 90       	pop	r13
    6088:	cf 90       	pop	r12
    608a:	bf 90       	pop	r11
    608c:	af 90       	pop	r10
    608e:	9f 90       	pop	r9
    6090:	8f 90       	pop	r8
    6092:	08 95       	ret

00006094 <ThreeWay_Stop>:
//-------------------------------------------------------------------------
void ThreeWay_Stop()
{
    6094:	8f 92       	push	r8
    6096:	9f 92       	push	r9
    6098:	af 92       	push	r10
    609a:	bf 92       	push	r11
    609c:	cf 92       	push	r12
    609e:	df 92       	push	r13
    60a0:	ef 92       	push	r14
    60a2:	ff 92       	push	r15
    60a4:	0f 93       	push	r16
    60a6:	1f 93       	push	r17
	static time_t time_count;
	TickType_t period;
	period=(TickType_t)EEpromData.Revers_Valve_delay;
    60a8:	20 91 04 09 	lds	r18, 0x0904	; 0x800904 <EEpromData+0x2>
	period*=1000;
    60ac:	30 e0       	ldi	r19, 0x00	; 0
    60ae:	a8 ee       	ldi	r26, 0xE8	; 232
    60b0:	b3 e0       	ldi	r27, 0x03	; 3
    60b2:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    60b6:	4b 01       	movw	r8, r22
    60b8:	5c 01       	movw	r10, r24
	
	xSerialxPrintf(&xSerial3Port,"ThreeWay_Stop\r\n");
    60ba:	87 ec       	ldi	r24, 0xC7	; 199
    60bc:	93 e0       	ldi	r25, 0x03	; 3
    60be:	9f 93       	push	r25
    60c0:	8f 93       	push	r24
    60c2:	80 ea       	ldi	r24, 0xA0	; 160
    60c4:	97 e0       	ldi	r25, 0x07	; 7
    60c6:	9f 93       	push	r25
    60c8:	8f 93       	push	r24
    60ca:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(PIN_THWAY_VALVE > 0)
    60ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    60d2:	0f 90       	pop	r0
    60d4:	0f 90       	pop	r0
    60d6:	0f 90       	pop	r0
    60d8:	0f 90       	pop	r0
    60da:	88 23       	and	r24, r24
    60dc:	0c f0       	brlt	.+2      	; 0x60e0 <ThreeWay_Stop+0x4c>
    60de:	48 c0       	rjmp	.+144    	; 0x6170 <ThreeWay_Stop+0xdc>
	{
		STOP_THWAY_VALVE;
    60e0:	e2 e0       	ldi	r30, 0x02	; 2
    60e2:	f1 e0       	ldi	r31, 0x01	; 1
    60e4:	80 81       	ld	r24, Z
    60e6:	8f 77       	andi	r24, 0x7F	; 127
    60e8:	80 83       	st	Z, r24
		//xSerialxPrintf(&xSerial3Port,"ThreeWay_Stop\r\n");
		Comp_1.threeWOn=0;
    60ea:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <Comp_1+0xd>
		time_count+= difftime(time(&current_time), timeStartThreeW);
    60ee:	c0 90 86 0a 	lds	r12, 0x0A86	; 0x800a86 <timeStartThreeW>
    60f2:	d0 90 87 0a 	lds	r13, 0x0A87	; 0x800a87 <timeStartThreeW+0x1>
    60f6:	e0 90 88 0a 	lds	r14, 0x0A88	; 0x800a88 <timeStartThreeW+0x2>
    60fa:	f0 90 89 0a 	lds	r15, 0x0A89	; 0x800a89 <timeStartThreeW+0x3>
    60fe:	8d ef       	ldi	r24, 0xFD	; 253
    6100:	98 e0       	ldi	r25, 0x08	; 8
    6102:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6106:	a7 01       	movw	r20, r14
    6108:	96 01       	movw	r18, r12
    610a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    610e:	c0 90 2b 07 	lds	r12, 0x072B	; 0x80072b <time_count.3215>
    6112:	d0 90 2c 07 	lds	r13, 0x072C	; 0x80072c <time_count.3215+0x1>
    6116:	e0 90 2d 07 	lds	r14, 0x072D	; 0x80072d <time_count.3215+0x2>
    611a:	f0 90 2e 07 	lds	r15, 0x072E	; 0x80072e <time_count.3215+0x3>
    611e:	dc 01       	movw	r26, r24
    6120:	cb 01       	movw	r24, r22
    6122:	8c 0d       	add	r24, r12
    6124:	9d 1d       	adc	r25, r13
    6126:	ae 1d       	adc	r26, r14
    6128:	bf 1d       	adc	r27, r15
    612a:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <time_count.3215>
    612e:	90 93 2c 07 	sts	0x072C, r25	; 0x80072c <time_count.3215+0x1>
    6132:	a0 93 2d 07 	sts	0x072D, r26	; 0x80072d <time_count.3215+0x2>
    6136:	b0 93 2e 07 	sts	0x072E, r27	; 0x80072e <time_count.3215+0x3>
		if(time_count>ONE_HOUR){EEpromData.time_threeway++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count=0;}
    613a:	81 31       	cpi	r24, 0x11	; 17
    613c:	9e 40       	sbci	r25, 0x0E	; 14
    613e:	a1 05       	cpc	r26, r1
    6140:	b1 05       	cpc	r27, r1
    6142:	b0 f0       	brcs	.+44     	; 0x6170 <ThreeWay_Stop+0xdc>
    6144:	e2 e0       	ldi	r30, 0x02	; 2
    6146:	f9 e0       	ldi	r31, 0x09	; 9
    6148:	84 ad       	ldd	r24, Z+60	; 0x3c
    614a:	95 ad       	ldd	r25, Z+61	; 0x3d
    614c:	01 96       	adiw	r24, 0x01	; 1
    614e:	95 af       	std	Z+61, r25	; 0x3d
    6150:	84 af       	std	Z+60, r24	; 0x3c
    6152:	40 e6       	ldi	r20, 0x60	; 96
    6154:	50 e0       	ldi	r21, 0x00	; 0
    6156:	60 e0       	ldi	r22, 0x00	; 0
    6158:	70 e0       	ldi	r23, 0x00	; 0
    615a:	cf 01       	movw	r24, r30
    615c:	0e 94 01 5e 	call	0xbc02	; 0xbc02 <eeprom_update_block>
    6160:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <time_count.3215>
    6164:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <time_count.3215+0x1>
    6168:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <time_count.3215+0x2>
    616c:	10 92 2e 07 	sts	0x072E, r1	; 0x80072e <time_count.3215+0x3>
		
	} else{ }//xSerialxPrintf(&xSerial3Port,"ThreeWay_isRun\r\n");
	xTimerChangePeriod( xStopRevValve_1,period, 100 );
    6170:	0f 2e       	mov	r0, r31
    6172:	f4 e6       	ldi	r31, 0x64	; 100
    6174:	cf 2e       	mov	r12, r31
    6176:	d1 2c       	mov	r13, r1
    6178:	e1 2c       	mov	r14, r1
    617a:	f1 2c       	mov	r15, r1
    617c:	f0 2d       	mov	r31, r0
    617e:	00 e0       	ldi	r16, 0x00	; 0
    6180:	10 e0       	ldi	r17, 0x00	; 0
    6182:	a5 01       	movw	r20, r10
    6184:	94 01       	movw	r18, r8
    6186:	64 e0       	ldi	r22, 0x04	; 4
    6188:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <xStopRevValve_1>
    618c:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <xStopRevValve_1+0x1>
    6190:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	
}
    6194:	1f 91       	pop	r17
    6196:	0f 91       	pop	r16
    6198:	ff 90       	pop	r15
    619a:	ef 90       	pop	r14
    619c:	df 90       	pop	r13
    619e:	cf 90       	pop	r12
    61a0:	bf 90       	pop	r11
    61a2:	af 90       	pop	r10
    61a4:	9f 90       	pop	r9
    61a6:	8f 90       	pop	r8
    61a8:	08 95       	ret

000061aa <Revers_Stop>:

//-------------------------------------------------------------------------
void Revers_Stop(TimerHandle_t xTimer)
{
    61aa:	8f 92       	push	r8
    61ac:	9f 92       	push	r9
    61ae:	af 92       	push	r10
    61b0:	bf 92       	push	r11
    61b2:	cf 92       	push	r12
    61b4:	df 92       	push	r13
    61b6:	ef 92       	push	r14
    61b8:	ff 92       	push	r15
    61ba:	0f 93       	push	r16
    61bc:	1f 93       	push	r17
    61be:	ac 01       	movw	r20, r24
	static time_t time_count_1;
	static time_t time_count_2;
	TickType_t period;
	period=(TickType_t)EEpromData.Source_Pump_delay;
    61c0:	20 91 03 09 	lds	r18, 0x0903	; 0x800903 <EEpromData+0x1>
	period*=1000;
    61c4:	30 e0       	ldi	r19, 0x00	; 0
    61c6:	a8 ee       	ldi	r26, 0xE8	; 232
    61c8:	b3 e0       	ldi	r27, 0x03	; 3
    61ca:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    61ce:	4b 01       	movw	r8, r22
    61d0:	5c 01       	movw	r10, r24

	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    61d2:	ca 01       	movw	r24, r20
    61d4:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
   // xSerialxPrintf(&xSerial3Port,"StopRevValve\r\n");

	if((*pxTimerID) == uxStopDelayRevVTimer_1_ID)
    61d8:	fc 01       	movw	r30, r24
    61da:	80 81       	ld	r24, Z
    61dc:	8a 30       	cpi	r24, 0x0A	; 10
    61de:	09 f0       	breq	.+2      	; 0x61e2 <Revers_Stop+0x38>
    61e0:	67 c0       	rjmp	.+206    	; 0x62b0 <Revers_Stop+0x106>
	{
		
		
		if(PIN_REV_VALVE_1 > 0)//
    61e2:	94 9b       	sbis	0x12, 4	; 18
    61e4:	52 c0       	rjmp	.+164    	; 0x628a <Revers_Stop+0xe0>
		{
			STOP_REV_VALVE_1;
    61e6:	a4 98       	cbi	0x14, 4	; 20
			xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    61e8:	82 e4       	ldi	r24, 0x42	; 66
    61ea:	93 e0       	ldi	r25, 0x03	; 3
    61ec:	9f 93       	push	r25
    61ee:	8f 93       	push	r24
    61f0:	80 ea       	ldi	r24, 0xA0	; 160
    61f2:	97 e0       	ldi	r25, 0x07	; 7
    61f4:	9f 93       	push	r25
    61f6:	8f 93       	push	r24
    61f8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.revVOn=0;
    61fc:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <Comp_1+0xe>
			time_count_1+= difftime(time(&current_time), timeStartRevV_1);
    6200:	c0 90 91 0a 	lds	r12, 0x0A91	; 0x800a91 <timeStartRevV_1>
    6204:	d0 90 92 0a 	lds	r13, 0x0A92	; 0x800a92 <timeStartRevV_1+0x1>
    6208:	e0 90 93 0a 	lds	r14, 0x0A93	; 0x800a93 <timeStartRevV_1+0x2>
    620c:	f0 90 94 0a 	lds	r15, 0x0A94	; 0x800a94 <timeStartRevV_1+0x3>
    6210:	8d ef       	ldi	r24, 0xFD	; 253
    6212:	98 e0       	ldi	r25, 0x08	; 8
    6214:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6218:	a7 01       	movw	r20, r14
    621a:	96 01       	movw	r18, r12
    621c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    6220:	c0 90 27 07 	lds	r12, 0x0727	; 0x800727 <time_count_1.3220>
    6224:	d0 90 28 07 	lds	r13, 0x0728	; 0x800728 <time_count_1.3220+0x1>
    6228:	e0 90 29 07 	lds	r14, 0x0729	; 0x800729 <time_count_1.3220+0x2>
    622c:	f0 90 2a 07 	lds	r15, 0x072A	; 0x80072a <time_count_1.3220+0x3>
    6230:	dc 01       	movw	r26, r24
    6232:	cb 01       	movw	r24, r22
    6234:	8c 0d       	add	r24, r12
    6236:	9d 1d       	adc	r25, r13
    6238:	ae 1d       	adc	r26, r14
    623a:	bf 1d       	adc	r27, r15
    623c:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <time_count_1.3220>
    6240:	90 93 28 07 	sts	0x0728, r25	; 0x800728 <time_count_1.3220+0x1>
    6244:	a0 93 29 07 	sts	0x0729, r26	; 0x800729 <time_count_1.3220+0x2>
    6248:	b0 93 2a 07 	sts	0x072A, r27	; 0x80072a <time_count_1.3220+0x3>
			if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    624c:	0f 90       	pop	r0
    624e:	0f 90       	pop	r0
    6250:	0f 90       	pop	r0
    6252:	0f 90       	pop	r0
    6254:	81 31       	cpi	r24, 0x11	; 17
    6256:	9e 40       	sbci	r25, 0x0E	; 14
    6258:	a1 05       	cpc	r26, r1
    625a:	b1 05       	cpc	r27, r1
    625c:	b0 f0       	brcs	.+44     	; 0x628a <Revers_Stop+0xe0>
    625e:	e2 e0       	ldi	r30, 0x02	; 2
    6260:	f9 e0       	ldi	r31, 0x09	; 9
    6262:	80 ad       	ldd	r24, Z+56	; 0x38
    6264:	91 ad       	ldd	r25, Z+57	; 0x39
    6266:	01 96       	adiw	r24, 0x01	; 1
    6268:	91 af       	std	Z+57, r25	; 0x39
    626a:	80 af       	std	Z+56, r24	; 0x38
    626c:	40 e6       	ldi	r20, 0x60	; 96
    626e:	50 e0       	ldi	r21, 0x00	; 0
    6270:	60 e0       	ldi	r22, 0x00	; 0
    6272:	70 e0       	ldi	r23, 0x00	; 0
    6274:	cf 01       	movw	r24, r30
    6276:	0e 94 01 5e 	call	0xbc02	; 0xbc02 <eeprom_update_block>
    627a:	10 92 27 07 	sts	0x0727, r1	; 0x800727 <time_count_1.3220>
    627e:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <time_count_1.3220+0x1>
    6282:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <time_count_1.3220+0x2>
    6286:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <time_count_1.3220+0x3>

		}
		xTimerChangePeriod( xStopSource_1,period, 100 );
    628a:	0f 2e       	mov	r0, r31
    628c:	f4 e6       	ldi	r31, 0x64	; 100
    628e:	cf 2e       	mov	r12, r31
    6290:	d1 2c       	mov	r13, r1
    6292:	e1 2c       	mov	r14, r1
    6294:	f1 2c       	mov	r15, r1
    6296:	f0 2d       	mov	r31, r0
    6298:	00 e0       	ldi	r16, 0x00	; 0
    629a:	10 e0       	ldi	r17, 0x00	; 0
    629c:	a5 01       	movw	r20, r10
    629e:	94 01       	movw	r18, r8
    62a0:	64 e0       	ldi	r22, 0x04	; 4
    62a2:	80 91 f9 08 	lds	r24, 0x08F9	; 0x8008f9 <xStopSource_1>
    62a6:	90 91 fa 08 	lds	r25, 0x08FA	; 0x8008fa <xStopSource_1+0x1>
    62aa:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    62ae:	6a c0       	rjmp	.+212    	; 0x6384 <Revers_Stop+0x1da>
		//xTimerStart(xStopSource_1, 0);
	}
	
	else if((*pxTimerID) == uxStopDelayRevVTimer_2_ID)
    62b0:	87 31       	cpi	r24, 0x17	; 23
    62b2:	09 f0       	breq	.+2      	; 0x62b6 <Revers_Stop+0x10c>
    62b4:	67 c0       	rjmp	.+206    	; 0x6384 <Revers_Stop+0x1da>
	{
		
		if(PIN_REV_VALVE_2 > 0)//
    62b6:	93 9b       	sbis	0x12, 3	; 18
    62b8:	53 c0       	rjmp	.+166    	; 0x6360 <Revers_Stop+0x1b6>
		{   
			xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    62ba:	84 e6       	ldi	r24, 0x64	; 100
    62bc:	93 e0       	ldi	r25, 0x03	; 3
    62be:	9f 93       	push	r25
    62c0:	8f 93       	push	r24
    62c2:	80 ea       	ldi	r24, 0xA0	; 160
    62c4:	97 e0       	ldi	r25, 0x07	; 7
    62c6:	9f 93       	push	r25
    62c8:	8f 93       	push	r24
    62ca:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			STOP_REV_VALVE_2;
    62ce:	a3 98       	cbi	0x14, 3	; 20
			
			
			Comp_2.revVOn=0;
    62d0:	10 92 f6 09 	sts	0x09F6, r1	; 0x8009f6 <Comp_2+0xe>
			time_count_2+= difftime(time(&current_time), timeStartRevV_2);
    62d4:	c0 90 ac 0a 	lds	r12, 0x0AAC	; 0x800aac <timeStartRevV_2>
    62d8:	d0 90 ad 0a 	lds	r13, 0x0AAD	; 0x800aad <timeStartRevV_2+0x1>
    62dc:	e0 90 ae 0a 	lds	r14, 0x0AAE	; 0x800aae <timeStartRevV_2+0x2>
    62e0:	f0 90 af 0a 	lds	r15, 0x0AAF	; 0x800aaf <timeStartRevV_2+0x3>
    62e4:	8d ef       	ldi	r24, 0xFD	; 253
    62e6:	98 e0       	ldi	r25, 0x08	; 8
    62e8:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    62ec:	a7 01       	movw	r20, r14
    62ee:	96 01       	movw	r18, r12
    62f0:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    62f4:	c0 90 23 07 	lds	r12, 0x0723	; 0x800723 <time_count_2.3221>
    62f8:	d0 90 24 07 	lds	r13, 0x0724	; 0x800724 <time_count_2.3221+0x1>
    62fc:	e0 90 25 07 	lds	r14, 0x0725	; 0x800725 <time_count_2.3221+0x2>
    6300:	f0 90 26 07 	lds	r15, 0x0726	; 0x800726 <time_count_2.3221+0x3>
    6304:	dc 01       	movw	r26, r24
    6306:	cb 01       	movw	r24, r22
    6308:	8c 0d       	add	r24, r12
    630a:	9d 1d       	adc	r25, r13
    630c:	ae 1d       	adc	r26, r14
    630e:	bf 1d       	adc	r27, r15
    6310:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <time_count_2.3221>
    6314:	90 93 24 07 	sts	0x0724, r25	; 0x800724 <time_count_2.3221+0x1>
    6318:	a0 93 25 07 	sts	0x0725, r26	; 0x800725 <time_count_2.3221+0x2>
    631c:	b0 93 26 07 	sts	0x0726, r27	; 0x800726 <time_count_2.3221+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    6320:	0f 90       	pop	r0
    6322:	0f 90       	pop	r0
    6324:	0f 90       	pop	r0
    6326:	0f 90       	pop	r0
    6328:	81 31       	cpi	r24, 0x11	; 17
    632a:	9e 40       	sbci	r25, 0x0E	; 14
    632c:	a1 05       	cpc	r26, r1
    632e:	b1 05       	cpc	r27, r1
    6330:	b8 f0       	brcs	.+46     	; 0x6360 <Revers_Stop+0x1b6>
    6332:	e0 e5       	ldi	r30, 0x50	; 80
    6334:	f9 e0       	ldi	r31, 0x09	; 9
    6336:	80 81       	ld	r24, Z
    6338:	91 81       	ldd	r25, Z+1	; 0x01
    633a:	01 96       	adiw	r24, 0x01	; 1
    633c:	91 83       	std	Z+1, r25	; 0x01
    633e:	80 83       	st	Z, r24
    6340:	40 e6       	ldi	r20, 0x60	; 96
    6342:	50 e0       	ldi	r21, 0x00	; 0
    6344:	60 e0       	ldi	r22, 0x00	; 0
    6346:	70 e0       	ldi	r23, 0x00	; 0
    6348:	82 e0       	ldi	r24, 0x02	; 2
    634a:	99 e0       	ldi	r25, 0x09	; 9
    634c:	0e 94 01 5e 	call	0xbc02	; 0xbc02 <eeprom_update_block>
    6350:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <time_count_2.3221>
    6354:	10 92 24 07 	sts	0x0724, r1	; 0x800724 <time_count_2.3221+0x1>
    6358:	10 92 25 07 	sts	0x0725, r1	; 0x800725 <time_count_2.3221+0x2>
    635c:	10 92 26 07 	sts	0x0726, r1	; 0x800726 <time_count_2.3221+0x3>

		}
		xTimerChangePeriod( xStopSource_2,period, 100 );
    6360:	0f 2e       	mov	r0, r31
    6362:	f4 e6       	ldi	r31, 0x64	; 100
    6364:	cf 2e       	mov	r12, r31
    6366:	d1 2c       	mov	r13, r1
    6368:	e1 2c       	mov	r14, r1
    636a:	f1 2c       	mov	r15, r1
    636c:	f0 2d       	mov	r31, r0
    636e:	00 e0       	ldi	r16, 0x00	; 0
    6370:	10 e0       	ldi	r17, 0x00	; 0
    6372:	a5 01       	movw	r20, r10
    6374:	94 01       	movw	r18, r8
    6376:	64 e0       	ldi	r22, 0x04	; 4
    6378:	80 91 58 0a 	lds	r24, 0x0A58	; 0x800a58 <xStopSource_2>
    637c:	90 91 59 0a 	lds	r25, 0x0A59	; 0x800a59 <xStopSource_2+0x1>
    6380:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		//xTimerStart(xStopSource_2, 0);
	}
	
	
}
    6384:	1f 91       	pop	r17
    6386:	0f 91       	pop	r16
    6388:	ff 90       	pop	r15
    638a:	ef 90       	pop	r14
    638c:	df 90       	pop	r13
    638e:	cf 90       	pop	r12
    6390:	bf 90       	pop	r11
    6392:	af 90       	pop	r10
    6394:	9f 90       	pop	r9
    6396:	8f 90       	pop	r8
    6398:	08 95       	ret

0000639a <SorcePump_Stop>:
//---------------------------------------------------------------------------
void SorcePump_Stop(TimerHandle_t xTimer)
{
    639a:	cf 92       	push	r12
    639c:	df 92       	push	r13
    639e:	ef 92       	push	r14
    63a0:	ff 92       	push	r15
	static time_t time_count_1;
	static time_t time_count_2;
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    63a2:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
     // xSerialxPrintf(&xSerial3Port,"StopSource\r\n");
    
	 	
	 
	if((*pxTimerID) == uxStopDelaySourcePTimer_1_ID)
    63a6:	fc 01       	movw	r30, r24
    63a8:	80 81       	ld	r24, Z
    63aa:	89 30       	cpi	r24, 0x09	; 9
    63ac:	09 f0       	breq	.+2      	; 0x63b0 <SorcePump_Stop+0x16>
    63ae:	5e c0       	rjmp	.+188    	; 0x646c <SorcePump_Stop+0xd2>
	{
		Comp_1.switchToMode=false ;
    63b0:	10 92 62 09 	sts	0x0962, r1	; 0x800962 <Comp_1>
		
		
		if(PIN_SOURCE_PUMP_1 > 0)//
    63b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    63b8:	81 ff       	sbrs	r24, 1
    63ba:	b8 c0       	rjmp	.+368    	; 0x652c <SorcePump_Stop+0x192>
		{
			STOP_SOURCE_PUMP_1;
    63bc:	e2 e0       	ldi	r30, 0x02	; 2
    63be:	f1 e0       	ldi	r31, 0x01	; 1
    63c0:	80 81       	ld	r24, Z
    63c2:	8d 7f       	andi	r24, 0xFD	; 253
    63c4:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopSource_1\r\n");
    63c6:	87 ed       	ldi	r24, 0xD7	; 215
    63c8:	93 e0       	ldi	r25, 0x03	; 3
    63ca:	9f 93       	push	r25
    63cc:	8f 93       	push	r24
    63ce:	80 ea       	ldi	r24, 0xA0	; 160
    63d0:	97 e0       	ldi	r25, 0x07	; 7
    63d2:	9f 93       	push	r25
    63d4:	8f 93       	push	r24
    63d6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.srcPOn=0;
    63da:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <Comp_1+0xf>
			
			
			time_count_1+= difftime(time(&current_time), timeStartSrcP_1);
    63de:	c0 90 da 09 	lds	r12, 0x09DA	; 0x8009da <timeStartSrcP_1>
    63e2:	d0 90 db 09 	lds	r13, 0x09DB	; 0x8009db <timeStartSrcP_1+0x1>
    63e6:	e0 90 dc 09 	lds	r14, 0x09DC	; 0x8009dc <timeStartSrcP_1+0x2>
    63ea:	f0 90 dd 09 	lds	r15, 0x09DD	; 0x8009dd <timeStartSrcP_1+0x3>
    63ee:	8d ef       	ldi	r24, 0xFD	; 253
    63f0:	98 e0       	ldi	r25, 0x08	; 8
    63f2:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    63f6:	a7 01       	movw	r20, r14
    63f8:	96 01       	movw	r18, r12
    63fa:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    63fe:	c0 90 1f 07 	lds	r12, 0x071F	; 0x80071f <time_count_1.3227>
    6402:	d0 90 20 07 	lds	r13, 0x0720	; 0x800720 <time_count_1.3227+0x1>
    6406:	e0 90 21 07 	lds	r14, 0x0721	; 0x800721 <time_count_1.3227+0x2>
    640a:	f0 90 22 07 	lds	r15, 0x0722	; 0x800722 <time_count_1.3227+0x3>
    640e:	dc 01       	movw	r26, r24
    6410:	cb 01       	movw	r24, r22
    6412:	8c 0d       	add	r24, r12
    6414:	9d 1d       	adc	r25, r13
    6416:	ae 1d       	adc	r26, r14
    6418:	bf 1d       	adc	r27, r15
    641a:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <time_count_1.3227>
    641e:	90 93 20 07 	sts	0x0720, r25	; 0x800720 <time_count_1.3227+0x1>
    6422:	a0 93 21 07 	sts	0x0721, r26	; 0x800721 <time_count_1.3227+0x2>
    6426:	b0 93 22 07 	sts	0x0722, r27	; 0x800722 <time_count_1.3227+0x3>
			//xSerialxPrintf(&xSerial3Port,"time_count_1=%d\r\n",time_count_1);
			if(time_count_1>ONE_HOUR){EEpromData.time_pump_source_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    642a:	0f 90       	pop	r0
    642c:	0f 90       	pop	r0
    642e:	0f 90       	pop	r0
    6430:	0f 90       	pop	r0
    6432:	81 31       	cpi	r24, 0x11	; 17
    6434:	9e 40       	sbci	r25, 0x0E	; 14
    6436:	a1 05       	cpc	r26, r1
    6438:	b1 05       	cpc	r27, r1
    643a:	08 f4       	brcc	.+2      	; 0x643e <SorcePump_Stop+0xa4>
    643c:	77 c0       	rjmp	.+238    	; 0x652c <SorcePump_Stop+0x192>
    643e:	e2 e0       	ldi	r30, 0x02	; 2
    6440:	f9 e0       	ldi	r31, 0x09	; 9
    6442:	86 a9       	ldd	r24, Z+54	; 0x36
    6444:	97 a9       	ldd	r25, Z+55	; 0x37
    6446:	01 96       	adiw	r24, 0x01	; 1
    6448:	97 ab       	std	Z+55, r25	; 0x37
    644a:	86 ab       	std	Z+54, r24	; 0x36
    644c:	40 e6       	ldi	r20, 0x60	; 96
    644e:	50 e0       	ldi	r21, 0x00	; 0
    6450:	60 e0       	ldi	r22, 0x00	; 0
    6452:	70 e0       	ldi	r23, 0x00	; 0
    6454:	cf 01       	movw	r24, r30
    6456:	0e 94 01 5e 	call	0xbc02	; 0xbc02 <eeprom_update_block>
    645a:	10 92 1f 07 	sts	0x071F, r1	; 0x80071f <time_count_1.3227>
    645e:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <time_count_1.3227+0x1>
    6462:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <time_count_1.3227+0x2>
    6466:	10 92 22 07 	sts	0x0722, r1	; 0x800722 <time_count_1.3227+0x3>
    646a:	60 c0       	rjmp	.+192    	; 0x652c <SorcePump_Stop+0x192>

		}
		
	}
	
	else if((*pxTimerID) == uxStopDelaySourcePTimer_2_ID)
    646c:	86 31       	cpi	r24, 0x16	; 22
    646e:	09 f0       	breq	.+2      	; 0x6472 <SorcePump_Stop+0xd8>
    6470:	5d c0       	rjmp	.+186    	; 0x652c <SorcePump_Stop+0x192>
	{
		//xSerialxPrintf(&xSerial3Port,"StopSource_2\r\n");
		if(PIN_SOURCE_PUMP_2 > 0)//
    6472:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6476:	82 ff       	sbrs	r24, 2
    6478:	59 c0       	rjmp	.+178    	; 0x652c <SorcePump_Stop+0x192>
		{
			STOP_SOURCE_PUMP_2;
    647a:	e2 e0       	ldi	r30, 0x02	; 2
    647c:	f1 e0       	ldi	r31, 0x01	; 1
    647e:	80 81       	ld	r24, Z
    6480:	8b 7f       	andi	r24, 0xFB	; 251
    6482:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopSource_2\r\n");
    6484:	86 ee       	ldi	r24, 0xE6	; 230
    6486:	93 e0       	ldi	r25, 0x03	; 3
    6488:	9f 93       	push	r25
    648a:	8f 93       	push	r24
    648c:	80 ea       	ldi	r24, 0xA0	; 160
    648e:	97 e0       	ldi	r25, 0x07	; 7
    6490:	9f 93       	push	r25
    6492:	8f 93       	push	r24
    6494:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			Comp_2.srcPOn=0;
    6498:	e8 ee       	ldi	r30, 0xE8	; 232
    649a:	f9 e0       	ldi	r31, 0x09	; 9
    649c:	17 86       	std	Z+15, r1	; 0x0f
			Comp_2.switchToMode=false;
    649e:	10 82       	st	Z, r1
			time_count_2+= difftime(time(&current_time), timeStartSrcP_2);
    64a0:	c0 90 95 0a 	lds	r12, 0x0A95	; 0x800a95 <timeStartSrcP_2>
    64a4:	d0 90 96 0a 	lds	r13, 0x0A96	; 0x800a96 <timeStartSrcP_2+0x1>
    64a8:	e0 90 97 0a 	lds	r14, 0x0A97	; 0x800a97 <timeStartSrcP_2+0x2>
    64ac:	f0 90 98 0a 	lds	r15, 0x0A98	; 0x800a98 <timeStartSrcP_2+0x3>
    64b0:	8d ef       	ldi	r24, 0xFD	; 253
    64b2:	98 e0       	ldi	r25, 0x08	; 8
    64b4:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    64b8:	a7 01       	movw	r20, r14
    64ba:	96 01       	movw	r18, r12
    64bc:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    64c0:	c0 90 1b 07 	lds	r12, 0x071B	; 0x80071b <time_count_2.3228>
    64c4:	d0 90 1c 07 	lds	r13, 0x071C	; 0x80071c <time_count_2.3228+0x1>
    64c8:	e0 90 1d 07 	lds	r14, 0x071D	; 0x80071d <time_count_2.3228+0x2>
    64cc:	f0 90 1e 07 	lds	r15, 0x071E	; 0x80071e <time_count_2.3228+0x3>
    64d0:	dc 01       	movw	r26, r24
    64d2:	cb 01       	movw	r24, r22
    64d4:	8c 0d       	add	r24, r12
    64d6:	9d 1d       	adc	r25, r13
    64d8:	ae 1d       	adc	r26, r14
    64da:	bf 1d       	adc	r27, r15
    64dc:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <time_count_2.3228>
    64e0:	90 93 1c 07 	sts	0x071C, r25	; 0x80071c <time_count_2.3228+0x1>
    64e4:	a0 93 1d 07 	sts	0x071D, r26	; 0x80071d <time_count_2.3228+0x2>
    64e8:	b0 93 1e 07 	sts	0x071E, r27	; 0x80071e <time_count_2.3228+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_pump_source_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    64ec:	0f 90       	pop	r0
    64ee:	0f 90       	pop	r0
    64f0:	0f 90       	pop	r0
    64f2:	0f 90       	pop	r0
    64f4:	81 31       	cpi	r24, 0x11	; 17
    64f6:	9e 40       	sbci	r25, 0x0E	; 14
    64f8:	a1 05       	cpc	r26, r1
    64fa:	b1 05       	cpc	r27, r1
    64fc:	b8 f0       	brcs	.+46     	; 0x652c <SorcePump_Stop+0x192>
    64fe:	ee e4       	ldi	r30, 0x4E	; 78
    6500:	f9 e0       	ldi	r31, 0x09	; 9
    6502:	80 81       	ld	r24, Z
    6504:	91 81       	ldd	r25, Z+1	; 0x01
    6506:	01 96       	adiw	r24, 0x01	; 1
    6508:	91 83       	std	Z+1, r25	; 0x01
    650a:	80 83       	st	Z, r24
    650c:	40 e6       	ldi	r20, 0x60	; 96
    650e:	50 e0       	ldi	r21, 0x00	; 0
    6510:	60 e0       	ldi	r22, 0x00	; 0
    6512:	70 e0       	ldi	r23, 0x00	; 0
    6514:	82 e0       	ldi	r24, 0x02	; 2
    6516:	99 e0       	ldi	r25, 0x09	; 9
    6518:	0e 94 01 5e 	call	0xbc02	; 0xbc02 <eeprom_update_block>
    651c:	10 92 1b 07 	sts	0x071B, r1	; 0x80071b <time_count_2.3228>
    6520:	10 92 1c 07 	sts	0x071C, r1	; 0x80071c <time_count_2.3228+0x1>
    6524:	10 92 1d 07 	sts	0x071D, r1	; 0x80071d <time_count_2.3228+0x2>
    6528:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <time_count_2.3228+0x3>

		}
	}
}
    652c:	ff 90       	pop	r15
    652e:	ef 90       	pop	r14
    6530:	df 90       	pop	r13
    6532:	cf 90       	pop	r12
    6534:	08 95       	ret

00006536 <StartComp>:
		
	}
}


void StartComp(TimerHandle_t xTimer){
    6536:	8f 92       	push	r8
    6538:	9f 92       	push	r9
    653a:	af 92       	push	r10
    653c:	bf 92       	push	r11
    653e:	cf 92       	push	r12
    6540:	df 92       	push	r13
    6542:	ef 92       	push	r14
    6544:	ff 92       	push	r15
    6546:	0f 93       	push	r16
    6548:	1f 93       	push	r17
    654a:	ac 01       	movw	r20, r24
	
	portBASE_TYPE *pxTimerID;
	
	TickType_t period;	
	period=(TickType_t)EEpromData.TRV_Delay;
    654c:	20 91 07 09 	lds	r18, 0x0907	; 0x800907 <EEpromData+0x5>
    period*=1000;
    6550:	30 e0       	ldi	r19, 0x00	; 0
    6552:	a8 ee       	ldi	r26, 0xE8	; 232
    6554:	b3 e0       	ldi	r27, 0x03	; 3
    6556:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    655a:	4b 01       	movw	r8, r22
    655c:	5c 01       	movw	r10, r24
	
	pxTimerID = pvTimerGetTimerID(xTimer);
    655e:	ca 01       	movw	r24, r20
    6560:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
//xSerialxPrintf(&xSerial3Port,"StartCompressor\r\n");
	if((*pxTimerID) == uxStartDelayCompTimer_1_ID) {
    6564:	fc 01       	movw	r30, r24
    6566:	80 81       	ld	r24, Z
    6568:	81 30       	cpi	r24, 0x01	; 1
    656a:	09 f0       	breq	.+2      	; 0x656e <StartComp+0x38>
    656c:	61 c0       	rjmp	.+194    	; 0x6630 <StartComp+0xfa>
		Comp_1.switchToMode=false;
    656e:	e2 e6       	ldi	r30, 0x62	; 98
    6570:	f9 e0       	ldi	r31, 0x09	; 9
    6572:	10 82       	st	Z, r1
		 if(Comp_1.def) {timeTillDef=xTaskGetTickCount();Comp_1.stopdef=true;}
    6574:	81 85       	ldd	r24, Z+9	; 0x09
    6576:	88 23       	and	r24, r24
    6578:	69 f0       	breq	.+26     	; 0x6594 <StartComp+0x5e>
    657a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    657e:	60 93 e3 08 	sts	0x08E3, r22	; 0x8008e3 <timeTillDef>
    6582:	70 93 e4 08 	sts	0x08E4, r23	; 0x8008e4 <timeTillDef+0x1>
    6586:	80 93 e5 08 	sts	0x08E5, r24	; 0x8008e5 <timeTillDef+0x2>
    658a:	90 93 e6 08 	sts	0x08E6, r25	; 0x8008e6 <timeTillDef+0x3>
    658e:	81 e0       	ldi	r24, 0x01	; 1
    6590:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <Comp_1+0xa>
		if(PIN_COMPRESSOR_1 == 0)
    6594:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6598:	85 fd       	sbrc	r24, 5
    659a:	9c c0       	rjmp	.+312    	; 0x66d4 <StartComp+0x19e>
		{   
			
			Comp_1.compOn=1;
    659c:	81 e0       	ldi	r24, 0x01	; 1
    659e:	80 93 6d 09 	sts	0x096D, r24	; 0x80096d <Comp_1+0xb>
			//if(Comp_2.compOn)vTaskDelay(5000);
			START_COMPRESSOR_1;
    65a2:	e2 e0       	ldi	r30, 0x02	; 2
    65a4:	f1 e0       	ldi	r31, 0x01	; 1
    65a6:	80 81       	ld	r24, Z
    65a8:	80 62       	ori	r24, 0x20	; 32
    65aa:	80 83       	st	Z, r24
			
			xSerialxPrintf(&xSerial3Port,"StartCompressor_1\r\n");
    65ac:	85 ef       	ldi	r24, 0xF5	; 245
    65ae:	93 e0       	ldi	r25, 0x03	; 3
    65b0:	9f 93       	push	r25
    65b2:	8f 93       	push	r24
    65b4:	80 ea       	ldi	r24, 0xA0	; 160
    65b6:	97 e0       	ldi	r25, 0x07	; 7
    65b8:	9f 93       	push	r25
    65ba:	8f 93       	push	r24
    65bc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			
			timeStartComp_1=time(&current_time);
    65c0:	8d ef       	ldi	r24, 0xFD	; 253
    65c2:	98 e0       	ldi	r25, 0x08	; 8
    65c4:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    65c8:	60 93 f1 08 	sts	0x08F1, r22	; 0x8008f1 <timeStartComp_1>
    65cc:	70 93 f2 08 	sts	0x08F2, r23	; 0x8008f2 <timeStartComp_1+0x1>
    65d0:	80 93 f3 08 	sts	0x08F3, r24	; 0x8008f3 <timeStartComp_1+0x2>
    65d4:	90 93 f4 08 	sts	0x08F4, r25	; 0x8008f4 <timeStartComp_1+0x3>
			EEpromData.number_turnon_compressor_1+=1;
    65d8:	e2 e0       	ldi	r30, 0x02	; 2
    65da:	f9 e0       	ldi	r31, 0x09	; 9
    65dc:	86 ad       	ldd	r24, Z+62	; 0x3e
    65de:	97 ad       	ldd	r25, Z+63	; 0x3f
    65e0:	01 96       	adiw	r24, 0x01	; 1
    65e2:	97 af       	std	Z+63, r25	; 0x3f
    65e4:	86 af       	std	Z+62, r24	; 0x3e
			//xSerialxPrintf(&xSerial3Port,"Number_turnon_Compressor_=%d\r\n",EEpromData.number_turnon_compressor_1);
			xTimerChangePeriod( xTStartCheckTrv_1,period, 100 );
    65e6:	0f 2e       	mov	r0, r31
    65e8:	f4 e6       	ldi	r31, 0x64	; 100
    65ea:	cf 2e       	mov	r12, r31
    65ec:	d1 2c       	mov	r13, r1
    65ee:	e1 2c       	mov	r14, r1
    65f0:	f1 2c       	mov	r15, r1
    65f2:	f0 2d       	mov	r31, r0
    65f4:	00 e0       	ldi	r16, 0x00	; 0
    65f6:	10 e0       	ldi	r17, 0x00	; 0
    65f8:	a5 01       	movw	r20, r10
    65fa:	94 01       	movw	r18, r8
    65fc:	64 e0       	ldi	r22, 0x04	; 4
    65fe:	80 91 fb 08 	lds	r24, 0x08FB	; 0x8008fb <xTStartCheckTrv_1>
    6602:	90 91 fc 08 	lds	r25, 0x08FC	; 0x8008fc <xTStartCheckTrv_1+0x1>
    6606:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
			xTimerStart(xTStartCheckErrors_1, 0);
    660a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    660e:	9b 01       	movw	r18, r22
    6610:	ac 01       	movw	r20, r24
    6612:	c1 2c       	mov	r12, r1
    6614:	d1 2c       	mov	r13, r1
    6616:	76 01       	movw	r14, r12
    6618:	61 e0       	ldi	r22, 0x01	; 1
    661a:	80 91 99 0a 	lds	r24, 0x0A99	; 0x800a99 <xTStartCheckErrors_1>
    661e:	90 91 9a 0a 	lds	r25, 0x0A9A	; 0x800a9a <xTStartCheckErrors_1+0x1>
    6622:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    6626:	0f 90       	pop	r0
    6628:	0f 90       	pop	r0
    662a:	0f 90       	pop	r0
    662c:	0f 90       	pop	r0
    662e:	52 c0       	rjmp	.+164    	; 0x66d4 <StartComp+0x19e>
	
		}
	}
	else if((*pxTimerID) == uxStartDelayCompTimer_2_ID) {
    6630:	8e 30       	cpi	r24, 0x0E	; 14
    6632:	09 f0       	breq	.+2      	; 0x6636 <StartComp+0x100>
    6634:	4f c0       	rjmp	.+158    	; 0x66d4 <StartComp+0x19e>
		xSerialxPrintf(&xSerial3Port,"StartCompressor_2\r\n");
    6636:	89 e0       	ldi	r24, 0x09	; 9
    6638:	94 e0       	ldi	r25, 0x04	; 4
    663a:	9f 93       	push	r25
    663c:	8f 93       	push	r24
    663e:	80 ea       	ldi	r24, 0xA0	; 160
    6640:	97 e0       	ldi	r25, 0x07	; 7
    6642:	9f 93       	push	r25
    6644:	8f 93       	push	r24
    6646:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_COMPRESSOR_2 == 0)
    664a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    664e:	0f 90       	pop	r0
    6650:	0f 90       	pop	r0
    6652:	0f 90       	pop	r0
    6654:	0f 90       	pop	r0
    6656:	86 fd       	sbrc	r24, 6
    6658:	3d c0       	rjmp	.+122    	; 0x66d4 <StartComp+0x19e>
		{
			//if(Comp_1.compOn)vTaskDelay(5000);
			Comp_2.compOn=1;
    665a:	e8 ee       	ldi	r30, 0xE8	; 232
    665c:	f9 e0       	ldi	r31, 0x09	; 9
    665e:	81 e0       	ldi	r24, 0x01	; 1
    6660:	83 87       	std	Z+11, r24	; 0x0b
			START_COMPRESSOR_2;
    6662:	a2 e0       	ldi	r26, 0x02	; 2
    6664:	b1 e0       	ldi	r27, 0x01	; 1
    6666:	8c 91       	ld	r24, X
    6668:	80 64       	ori	r24, 0x40	; 64
    666a:	8c 93       	st	X, r24
			
			
			Comp_2.switchToMode=false;
    666c:	10 82       	st	Z, r1
			
			timeStartComp_2=time(&current_time);
    666e:	8d ef       	ldi	r24, 0xFD	; 253
    6670:	98 e0       	ldi	r25, 0x08	; 8
    6672:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6676:	60 93 9b 0a 	sts	0x0A9B, r22	; 0x800a9b <timeStartComp_2>
    667a:	70 93 9c 0a 	sts	0x0A9C, r23	; 0x800a9c <timeStartComp_2+0x1>
    667e:	80 93 9d 0a 	sts	0x0A9D, r24	; 0x800a9d <timeStartComp_2+0x2>
    6682:	90 93 9e 0a 	sts	0x0A9E, r25	; 0x800a9e <timeStartComp_2+0x3>
			EEpromData.number_turnon_compressor_2+=1;
    6686:	e4 e5       	ldi	r30, 0x54	; 84
    6688:	f9 e0       	ldi	r31, 0x09	; 9
    668a:	80 81       	ld	r24, Z
    668c:	91 81       	ldd	r25, Z+1	; 0x01
    668e:	01 96       	adiw	r24, 0x01	; 1
    6690:	91 83       	std	Z+1, r25	; 0x01
    6692:	80 83       	st	Z, r24
			xTimerChangePeriod( xTStartCheckTrv_2,period, 100 );
    6694:	0f 2e       	mov	r0, r31
    6696:	f4 e6       	ldi	r31, 0x64	; 100
    6698:	cf 2e       	mov	r12, r31
    669a:	d1 2c       	mov	r13, r1
    669c:	e1 2c       	mov	r14, r1
    669e:	f1 2c       	mov	r15, r1
    66a0:	f0 2d       	mov	r31, r0
    66a2:	00 e0       	ldi	r16, 0x00	; 0
    66a4:	10 e0       	ldi	r17, 0x00	; 0
    66a6:	a5 01       	movw	r20, r10
    66a8:	94 01       	movw	r18, r8
    66aa:	64 e0       	ldi	r22, 0x04	; 4
    66ac:	80 91 d2 09 	lds	r24, 0x09D2	; 0x8009d2 <xTStartCheckTrv_2>
    66b0:	90 91 d3 09 	lds	r25, 0x09D3	; 0x8009d3 <xTStartCheckTrv_2+0x1>
    66b4:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
			xTimerStart(xTStartCheckErrors_2, 0);
    66b8:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    66bc:	9b 01       	movw	r18, r22
    66be:	ac 01       	movw	r20, r24
    66c0:	c1 2c       	mov	r12, r1
    66c2:	d1 2c       	mov	r13, r1
    66c4:	76 01       	movw	r14, r12
    66c6:	61 e0       	ldi	r22, 0x01	; 1
    66c8:	80 91 e9 08 	lds	r24, 0x08E9	; 0x8008e9 <xTStartCheckErrors_2>
    66cc:	90 91 ea 08 	lds	r25, 0x08EA	; 0x8008ea <xTStartCheckErrors_2+0x1>
    66d0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		}
	}
	
	
}
    66d4:	1f 91       	pop	r17
    66d6:	0f 91       	pop	r16
    66d8:	ff 90       	pop	r15
    66da:	ef 90       	pop	r14
    66dc:	df 90       	pop	r13
    66de:	cf 90       	pop	r12
    66e0:	bf 90       	pop	r11
    66e2:	af 90       	pop	r10
    66e4:	9f 90       	pop	r9
    66e6:	8f 90       	pop	r8
    66e8:	08 95       	ret

000066ea <SwitchRev_1_Time>:
	
	
}
//-------------------------------------------------------------------------
void SwitchRev_1_Time(TimerHandle_t xTimer)
{
    66ea:	cf 92       	push	r12
    66ec:	df 92       	push	r13
    66ee:	ef 92       	push	r14
    66f0:	ff 92       	push	r15
    66f2:	0f 93       	push	r16
    66f4:	1f 93       	push	r17
    66f6:	cf 93       	push	r28
    66f8:	df 93       	push	r29
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    66fa:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    66fe:	ec 01       	movw	r28, r24
	
	//xSerialxPrintf(&xSerial3Port,"SwitchRev_1\r\n");
	
	if((*pxTimerID) == uxSwitchRevOne_1_ID)
    6700:	88 81       	ld	r24, Y
    6702:	8c 30       	cpi	r24, 0x0C	; 12
    6704:	19 f5       	brne	.+70     	; 0x674c <SwitchRev_1_Time+0x62>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_ON_1_1\r\n");
    6706:	8d e1       	ldi	r24, 0x1D	; 29
    6708:	94 e0       	ldi	r25, 0x04	; 4
    670a:	9f 93       	push	r25
    670c:	8f 93       	push	r24
    670e:	80 ea       	ldi	r24, 0xA0	; 160
    6710:	97 e0       	ldi	r25, 0x07	; 7
    6712:	9f 93       	push	r25
    6714:	8f 93       	push	r24
    6716:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_REV_VALVE_1 == 0){START_REV_VALVE_1;}//
    671a:	0f 90       	pop	r0
    671c:	0f 90       	pop	r0
    671e:	0f 90       	pop	r0
    6720:	0f 90       	pop	r0
    6722:	94 99       	sbic	0x12, 4	; 18
    6724:	02 c0       	rjmp	.+4      	; 0x672a <SwitchRev_1_Time+0x40>
    6726:	a4 9a       	sbi	0x14, 4	; 20
    6728:	01 c0       	rjmp	.+2      	; 0x672c <SwitchRev_1_Time+0x42>
		else {STOP_REV_VALVE_1;}//xSerialxPrintf(&xSerial3Port,"SwitchRev_OFF_1\r\n");
    672a:	a4 98       	cbi	0x14, 4	; 20
		xTimerStart(xSwitchRevTwo_1_time, 0);
    672c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    6730:	9b 01       	movw	r18, r22
    6732:	ac 01       	movw	r20, r24
    6734:	c1 2c       	mov	r12, r1
    6736:	d1 2c       	mov	r13, r1
    6738:	76 01       	movw	r14, r12
    673a:	00 e0       	ldi	r16, 0x00	; 0
    673c:	10 e0       	ldi	r17, 0x00	; 0
    673e:	61 e0       	ldi	r22, 0x01	; 1
    6740:	80 91 74 0a 	lds	r24, 0x0A74	; 0x800a74 <xSwitchRevTwo_1_time>
    6744:	90 91 75 0a 	lds	r25, 0x0A75	; 0x800a75 <xSwitchRevTwo_1_time+0x1>
    6748:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if((*pxTimerID) == uxSwitchRevOne_2_ID)
    674c:	88 81       	ld	r24, Y
    674e:	88 31       	cpi	r24, 0x18	; 24
    6750:	19 f5       	brne	.+70     	; 0x6798 <SwitchRev_1_Time+0xae>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_2_1\r\n");
    6752:	80 e3       	ldi	r24, 0x30	; 48
    6754:	94 e0       	ldi	r25, 0x04	; 4
    6756:	9f 93       	push	r25
    6758:	8f 93       	push	r24
    675a:	80 ea       	ldi	r24, 0xA0	; 160
    675c:	97 e0       	ldi	r25, 0x07	; 7
    675e:	9f 93       	push	r25
    6760:	8f 93       	push	r24
    6762:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		
		if(PIN_REV_VALVE_2 == 0)START_REV_VALVE_2;
    6766:	0f 90       	pop	r0
    6768:	0f 90       	pop	r0
    676a:	0f 90       	pop	r0
    676c:	0f 90       	pop	r0
    676e:	93 99       	sbic	0x12, 3	; 18
    6770:	02 c0       	rjmp	.+4      	; 0x6776 <SwitchRev_1_Time+0x8c>
    6772:	a3 9a       	sbi	0x14, 3	; 20
    6774:	01 c0       	rjmp	.+2      	; 0x6778 <SwitchRev_1_Time+0x8e>
		else STOP_REV_VALVE_2;
    6776:	a3 98       	cbi	0x14, 3	; 20
		xTimerStart(xSwitchRevTwo_2_time, 0);
    6778:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    677c:	9b 01       	movw	r18, r22
    677e:	ac 01       	movw	r20, r24
    6780:	c1 2c       	mov	r12, r1
    6782:	d1 2c       	mov	r13, r1
    6784:	76 01       	movw	r14, r12
    6786:	00 e0       	ldi	r16, 0x00	; 0
    6788:	10 e0       	ldi	r17, 0x00	; 0
    678a:	61 e0       	ldi	r22, 0x01	; 1
    678c:	80 91 8f 0a 	lds	r24, 0x0A8F	; 0x800a8f <xSwitchRevTwo_2_time>
    6790:	90 91 90 0a 	lds	r25, 0x0A90	; 0x800a90 <xSwitchRevTwo_2_time+0x1>
    6794:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
}
    6798:	df 91       	pop	r29
    679a:	cf 91       	pop	r28
    679c:	1f 91       	pop	r17
    679e:	0f 91       	pop	r16
    67a0:	ff 90       	pop	r15
    67a2:	ef 90       	pop	r14
    67a4:	df 90       	pop	r13
    67a6:	cf 90       	pop	r12
    67a8:	08 95       	ret

000067aa <activateTimers>:
const portBASE_TYPE uxStopDelayRevVTimer_2_ID		= 23;
const portBASE_TYPE uxSwitchRevOne_2_ID				= 24;
const portBASE_TYPE uxSwitchRevTwo_2_ID				= 25;

void activateTimers(xCompressor *comp)
{
    67aa:	ef 92       	push	r14
    67ac:	ff 92       	push	r15
    67ae:	0f 93       	push	r16
    67b0:	1f 93       	push	r17
    67b2:	cf 93       	push	r28
    67b4:	df 93       	push	r29
    67b6:	ec 01       	movw	r28, r24
	
	
	if(comp->Index==1)
    67b8:	fc 01       	movw	r30, r24
    67ba:	e2 59       	subi	r30, 0x92	; 146
    67bc:	ff 4f       	sbci	r31, 0xFF	; 255
    67be:	80 81       	ld	r24, Z
    67c0:	91 81       	ldd	r25, Z+1	; 0x01
    67c2:	01 97       	sbiw	r24, 0x01	; 1
    67c4:	09 f0       	breq	.+2      	; 0x67c8 <activateTimers+0x1e>
    67c6:	fc c0       	rjmp	.+504    	; 0x69c0 <activateTimers+0x216>
	{
		
		xStartRevValve_1   =	xTimerCreate("StRevV_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayRevVTimer_1_ID, StartReversingValve);//(EEpromData.Revers_Valve_delay*1000) 
    67c8:	0f 2e       	mov	r0, r31
    67ca:	fd ee       	ldi	r31, 0xED	; 237
    67cc:	ef 2e       	mov	r14, r31
    67ce:	fb e2       	ldi	r31, 0x2B	; 43
    67d0:	ff 2e       	mov	r15, r31
    67d2:	f0 2d       	mov	r31, r0
    67d4:	05 e2       	ldi	r16, 0x25	; 37
    67d6:	16 e0       	ldi	r17, 0x06	; 6
    67d8:	20 e0       	ldi	r18, 0x00	; 0
    67da:	48 e5       	ldi	r20, 0x58	; 88
    67dc:	5b e1       	ldi	r21, 0x1B	; 27
    67de:	60 e0       	ldi	r22, 0x00	; 0
    67e0:	70 e0       	ldi	r23, 0x00	; 0
    67e2:	80 e4       	ldi	r24, 0x40	; 64
    67e4:	94 e0       	ldi	r25, 0x04	; 4
    67e6:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    67ea:	90 93 a2 0a 	sts	0x0AA2, r25	; 0x800aa2 <xStartRevValve_1+0x1>
    67ee:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <xStartRevValve_1>
		xStartThreeWay     =	xTimerCreate("StThreeW",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayThreeVTimer_1_ID, StartThreeWay);//(EEpromData.Three_Way_delay*1000)
    67f2:	0f 2e       	mov	r0, r31
    67f4:	f7 e7       	ldi	r31, 0x77	; 119
    67f6:	ef 2e       	mov	r14, r31
    67f8:	fe e2       	ldi	r31, 0x2E	; 46
    67fa:	ff 2e       	mov	r15, r31
    67fc:	f0 2d       	mov	r31, r0
    67fe:	04 e2       	ldi	r16, 0x24	; 36
    6800:	16 e0       	ldi	r17, 0x06	; 6
    6802:	20 e0       	ldi	r18, 0x00	; 0
    6804:	48 e5       	ldi	r20, 0x58	; 88
    6806:	5b e1       	ldi	r21, 0x1B	; 27
    6808:	60 e0       	ldi	r22, 0x00	; 0
    680a:	70 e0       	ldi	r23, 0x00	; 0
    680c:	89 e4       	ldi	r24, 0x49	; 73
    680e:	94 e0       	ldi	r25, 0x04	; 4
    6810:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6814:	90 93 d7 09 	sts	0x09D7, r25	; 0x8009d7 <xStartThreeWay+0x1>
    6818:	80 93 d6 09 	sts	0x09D6, r24	; 0x8009d6 <xStartThreeWay>
		xStartHeatPump_1   =	xTimerCreate("StHeatP_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayHeatPTimer_1_ID, StartHeatPump);//(EEpromData.HeatingPump_delay*1000) 
    681c:	0f 2e       	mov	r0, r31
    681e:	f1 e8       	ldi	r31, 0x81	; 129
    6820:	ef 2e       	mov	r14, r31
    6822:	fa e2       	ldi	r31, 0x2A	; 42
    6824:	ff 2e       	mov	r15, r31
    6826:	f0 2d       	mov	r31, r0
    6828:	06 e2       	ldi	r16, 0x26	; 38
    682a:	16 e0       	ldi	r17, 0x06	; 6
    682c:	20 e0       	ldi	r18, 0x00	; 0
    682e:	48 e5       	ldi	r20, 0x58	; 88
    6830:	5b e1       	ldi	r21, 0x1B	; 27
    6832:	60 e0       	ldi	r22, 0x00	; 0
    6834:	70 e0       	ldi	r23, 0x00	; 0
    6836:	82 e5       	ldi	r24, 0x52	; 82
    6838:	94 e0       	ldi	r25, 0x04	; 4
    683a:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    683e:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <xStartHeatPump_1+0x1>
    6842:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <xStartHeatPump_1>
		xStartCompressor_1 =	xTimerCreate("StComp_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayCompTimer_1_ID, StartComp);//(EEpromData.Compressor_delay*1000)
    6846:	0f 2e       	mov	r0, r31
    6848:	fb e9       	ldi	r31, 0x9B	; 155
    684a:	ef 2e       	mov	r14, r31
    684c:	f2 e3       	ldi	r31, 0x32	; 50
    684e:	ff 2e       	mov	r15, r31
    6850:	f0 2d       	mov	r31, r0
    6852:	07 e2       	ldi	r16, 0x27	; 39
    6854:	16 e0       	ldi	r17, 0x06	; 6
    6856:	20 e0       	ldi	r18, 0x00	; 0
    6858:	48 e5       	ldi	r20, 0x58	; 88
    685a:	5b e1       	ldi	r21, 0x1B	; 27
    685c:	60 e0       	ldi	r22, 0x00	; 0
    685e:	70 e0       	ldi	r23, 0x00	; 0
    6860:	8c e5       	ldi	r24, 0x5C	; 92
    6862:	94 e0       	ldi	r25, 0x04	; 4
    6864:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6868:	90 93 79 0a 	sts	0x0A79, r25	; 0x800a79 <xStartCompressor_1+0x1>
    686c:	80 93 78 0a 	sts	0x0A78, r24	; 0x800a78 <xStartCompressor_1>
		xTStartCheckErrors_1 =	xTimerCreate("ChErr_1",			300000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayChekErrTimer_1_ID, StartCheckErrors);
    6870:	0f 2e       	mov	r0, r31
    6872:	f1 e9       	ldi	r31, 0x91	; 145
    6874:	ef 2e       	mov	r14, r31
    6876:	fb e2       	ldi	r31, 0x2B	; 43
    6878:	ff 2e       	mov	r15, r31
    687a:	f0 2d       	mov	r31, r0
    687c:	02 e2       	ldi	r16, 0x22	; 34
    687e:	16 e0       	ldi	r17, 0x06	; 6
    6880:	20 e0       	ldi	r18, 0x00	; 0
    6882:	40 ee       	ldi	r20, 0xE0	; 224
    6884:	53 e9       	ldi	r21, 0x93	; 147
    6886:	64 e0       	ldi	r22, 0x04	; 4
    6888:	70 e0       	ldi	r23, 0x00	; 0
    688a:	85 e6       	ldi	r24, 0x65	; 101
    688c:	94 e0       	ldi	r25, 0x04	; 4
    688e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6892:	90 93 9a 0a 	sts	0x0A9A, r25	; 0x800a9a <xTStartCheckErrors_1+0x1>
    6896:	80 93 99 0a 	sts	0x0A99, r24	; 0x800a99 <xTStartCheckErrors_1>
		xTStartCheckTrv_1 =		xTimerCreate("ChTrv_1",			7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayChekTrvTimer_1_ID, StartCheckTrv);//(EEpromData.TRV_Delay*1000)
    689a:	0f 2e       	mov	r0, r31
    689c:	f1 ec       	ldi	r31, 0xC1	; 193
    689e:	ef 2e       	mov	r14, r31
    68a0:	fb e2       	ldi	r31, 0x2B	; 43
    68a2:	ff 2e       	mov	r15, r31
    68a4:	f0 2d       	mov	r31, r0
    68a6:	03 e2       	ldi	r16, 0x23	; 35
    68a8:	16 e0       	ldi	r17, 0x06	; 6
    68aa:	20 e0       	ldi	r18, 0x00	; 0
    68ac:	48 e5       	ldi	r20, 0x58	; 88
    68ae:	5b e1       	ldi	r21, 0x1B	; 27
    68b0:	60 e0       	ldi	r22, 0x00	; 0
    68b2:	70 e0       	ldi	r23, 0x00	; 0
    68b4:	8d e6       	ldi	r24, 0x6D	; 109
    68b6:	94 e0       	ldi	r25, 0x04	; 4
    68b8:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    68bc:	90 93 fc 08 	sts	0x08FC, r25	; 0x8008fc <xTStartCheckTrv_1+0x1>
    68c0:	80 93 fb 08 	sts	0x08FB, r24	; 0x8008fb <xTStartCheckTrv_1>
		//----------stop

		xSwitchRevOne_1_time =	xTimerCreate("swRevOne_1",		5000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxSwitchRevOne_1_ID, SwitchRev_1_Time);
    68c4:	0f 2e       	mov	r0, r31
    68c6:	f5 e7       	ldi	r31, 0x75	; 117
    68c8:	ef 2e       	mov	r14, r31
    68ca:	f3 e3       	ldi	r31, 0x33	; 51
    68cc:	ff 2e       	mov	r15, r31
    68ce:	f0 2d       	mov	r31, r0
    68d0:	0d e1       	ldi	r16, 0x1D	; 29
    68d2:	16 e0       	ldi	r17, 0x06	; 6
    68d4:	20 e0       	ldi	r18, 0x00	; 0
    68d6:	48 e8       	ldi	r20, 0x88	; 136
    68d8:	53 e1       	ldi	r21, 0x13	; 19
    68da:	60 e0       	ldi	r22, 0x00	; 0
    68dc:	70 e0       	ldi	r23, 0x00	; 0
    68de:	85 e7       	ldi	r24, 0x75	; 117
    68e0:	94 e0       	ldi	r25, 0x04	; 4
    68e2:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    68e6:	90 93 f6 08 	sts	0x08F6, r25	; 0x8008f6 <xSwitchRevOne_1_time+0x1>
    68ea:	80 93 f5 08 	sts	0x08F5, r24	; 0x8008f5 <xSwitchRevOne_1_time>
		xSwitchRevTwo_1_time =	xTimerCreate("swRevTwo_1",		5000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxSwitchRevTwo_1_ID, SwitchRev_2_Time);
    68ee:	0f 2e       	mov	r0, r31
    68f0:	f8 e2       	ldi	r31, 0x28	; 40
    68f2:	ef 2e       	mov	r14, r31
    68f4:	fb e2       	ldi	r31, 0x2B	; 43
    68f6:	ff 2e       	mov	r15, r31
    68f8:	f0 2d       	mov	r31, r0
    68fa:	0c e1       	ldi	r16, 0x1C	; 28
    68fc:	16 e0       	ldi	r17, 0x06	; 6
    68fe:	20 e0       	ldi	r18, 0x00	; 0
    6900:	48 e8       	ldi	r20, 0x88	; 136
    6902:	53 e1       	ldi	r21, 0x13	; 19
    6904:	60 e0       	ldi	r22, 0x00	; 0
    6906:	70 e0       	ldi	r23, 0x00	; 0
    6908:	80 e8       	ldi	r24, 0x80	; 128
    690a:	94 e0       	ldi	r25, 0x04	; 4
    690c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6910:	90 93 75 0a 	sts	0x0A75, r25	; 0x800a75 <xSwitchRevTwo_1_time+0x1>
    6914:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <xSwitchRevTwo_1_time>
		xStopHeatPump_1   =		xTimerCreate("offHeatP_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayHeatPTimer_1_ID, HeatPump_Stop);//(EEpromData.HeatingPump_delay*1000)
    6918:	0f 2e       	mov	r0, r31
    691a:	fd e3       	ldi	r31, 0x3D	; 61
    691c:	ef 2e       	mov	r14, r31
    691e:	ff e2       	ldi	r31, 0x2F	; 47
    6920:	ff 2e       	mov	r15, r31
    6922:	f0 2d       	mov	r31, r0
    6924:	01 e2       	ldi	r16, 0x21	; 33
    6926:	16 e0       	ldi	r17, 0x06	; 6
    6928:	20 e0       	ldi	r18, 0x00	; 0
    692a:	48 e5       	ldi	r20, 0x58	; 88
    692c:	5b e1       	ldi	r21, 0x1B	; 27
    692e:	60 e0       	ldi	r22, 0x00	; 0
    6930:	70 e0       	ldi	r23, 0x00	; 0
    6932:	8b e8       	ldi	r24, 0x8B	; 139
    6934:	94 e0       	ldi	r25, 0x04	; 4
    6936:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    693a:	90 93 f0 08 	sts	0x08F0, r25	; 0x8008f0 <xStopHeatPump_1+0x1>
    693e:	80 93 ef 08 	sts	0x08EF, r24	; 0x8008ef <xStopHeatPump_1>
		xStopThreeWay     =		xTimerCreate("offThreeW",		7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayThreeVTimer_1_ID, ThreeWay_Stop);//(EEpromData.Three_Way_delay*1000)
    6942:	0f 2e       	mov	r0, r31
    6944:	fa e4       	ldi	r31, 0x4A	; 74
    6946:	ef 2e       	mov	r14, r31
    6948:	f0 e3       	ldi	r31, 0x30	; 48
    694a:	ff 2e       	mov	r15, r31
    694c:	f0 2d       	mov	r31, r0
    694e:	0e e1       	ldi	r16, 0x1E	; 30
    6950:	16 e0       	ldi	r17, 0x06	; 6
    6952:	20 e0       	ldi	r18, 0x00	; 0
    6954:	48 e5       	ldi	r20, 0x58	; 88
    6956:	5b e1       	ldi	r21, 0x1B	; 27
    6958:	60 e0       	ldi	r22, 0x00	; 0
    695a:	70 e0       	ldi	r23, 0x00	; 0
    695c:	86 e9       	ldi	r24, 0x96	; 150
    695e:	94 e0       	ldi	r25, 0x04	; 4
    6960:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6964:	90 93 d5 09 	sts	0x09D5, r25	; 0x8009d5 <xStopThreeWay+0x1>
    6968:	80 93 d4 09 	sts	0x09D4, r24	; 0x8009d4 <xStopThreeWay>
		xStopRevValve_1   =		xTimerCreate("offRevV_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayRevVTimer_1_ID, Revers_Stop);//(EEpromData.Revers_Valve_delay*1000)
    696c:	0f 2e       	mov	r0, r31
    696e:	f5 ed       	ldi	r31, 0xD5	; 213
    6970:	ef 2e       	mov	r14, r31
    6972:	f0 e3       	ldi	r31, 0x30	; 48
    6974:	ff 2e       	mov	r15, r31
    6976:	f0 2d       	mov	r31, r0
    6978:	0f e1       	ldi	r16, 0x1F	; 31
    697a:	16 e0       	ldi	r17, 0x06	; 6
    697c:	20 e0       	ldi	r18, 0x00	; 0
    697e:	48 e5       	ldi	r20, 0x58	; 88
    6980:	5b e1       	ldi	r21, 0x1B	; 27
    6982:	60 e0       	ldi	r22, 0x00	; 0
    6984:	70 e0       	ldi	r23, 0x00	; 0
    6986:	80 ea       	ldi	r24, 0xA0	; 160
    6988:	94 e0       	ldi	r25, 0x04	; 4
    698a:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    698e:	90 93 6b 0a 	sts	0x0A6B, r25	; 0x800a6b <xStopRevValve_1+0x1>
    6992:	80 93 6a 0a 	sts	0x0A6A, r24	; 0x800a6a <xStopRevValve_1>
		xStopSource_1   =		xTimerCreate("offSourceP_1",	7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelaySourcePTimer_1_ID, SorcePump_Stop);//(EEpromData.Source_Pump_delay*1000)
    6996:	0f 2e       	mov	r0, r31
    6998:	fd ec       	ldi	r31, 0xCD	; 205
    699a:	ef 2e       	mov	r14, r31
    699c:	f1 e3       	ldi	r31, 0x31	; 49
    699e:	ff 2e       	mov	r15, r31
    69a0:	f0 2d       	mov	r31, r0
    69a2:	00 e2       	ldi	r16, 0x20	; 32
    69a4:	16 e0       	ldi	r17, 0x06	; 6
    69a6:	20 e0       	ldi	r18, 0x00	; 0
    69a8:	48 e5       	ldi	r20, 0x58	; 88
    69aa:	5b e1       	ldi	r21, 0x1B	; 27
    69ac:	60 e0       	ldi	r22, 0x00	; 0
    69ae:	70 e0       	ldi	r23, 0x00	; 0
    69b0:	8a ea       	ldi	r24, 0xAA	; 170
    69b2:	94 e0       	ldi	r25, 0x04	; 4
    69b4:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    69b8:	90 93 fa 08 	sts	0x08FA, r25	; 0x8008fa <xStopSource_1+0x1>
    69bc:	80 93 f9 08 	sts	0x08F9, r24	; 0x8008f9 <xStopSource_1>
	}
	if (comp->Index==2)
    69c0:	c2 59       	subi	r28, 0x92	; 146
    69c2:	df 4f       	sbci	r29, 0xFF	; 255
    69c4:	88 81       	ld	r24, Y
    69c6:	99 81       	ldd	r25, Y+1	; 0x01
    69c8:	02 97       	sbiw	r24, 0x02	; 2
    69ca:	09 f0       	breq	.+2      	; 0x69ce <activateTimers+0x224>
    69cc:	d2 c0       	rjmp	.+420    	; 0x6b72 <activateTimers+0x3c8>
	{
		
		xStartRevValve_2   =	xTimerCreate("StRevV_2",		7000, pdFALSE, (void*) &uxStartDelayRevVTimer_2_ID, StartReversingValve);
    69ce:	0f 2e       	mov	r0, r31
    69d0:	fd ee       	ldi	r31, 0xED	; 237
    69d2:	ef 2e       	mov	r14, r31
    69d4:	fb e2       	ldi	r31, 0x2B	; 43
    69d6:	ff 2e       	mov	r15, r31
    69d8:	f0 2d       	mov	r31, r0
    69da:	09 e1       	ldi	r16, 0x19	; 25
    69dc:	16 e0       	ldi	r17, 0x06	; 6
    69de:	20 e0       	ldi	r18, 0x00	; 0
    69e0:	48 e5       	ldi	r20, 0x58	; 88
    69e2:	5b e1       	ldi	r21, 0x1B	; 27
    69e4:	60 e0       	ldi	r22, 0x00	; 0
    69e6:	70 e0       	ldi	r23, 0x00	; 0
    69e8:	87 eb       	ldi	r24, 0xB7	; 183
    69ea:	94 e0       	ldi	r25, 0x04	; 4
    69ec:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    69f0:	90 93 63 0a 	sts	0x0A63, r25	; 0x800a63 <xStartRevValve_2+0x1>
    69f4:	80 93 62 0a 	sts	0x0A62, r24	; 0x800a62 <xStartRevValve_2>
		xStartHeatPump_2   =	xTimerCreate("StHeatP_2",		7000, pdFALSE, (void*) &uxStartDelayHeatPTimer_2_ID, StartHeatPump);
    69f8:	0f 2e       	mov	r0, r31
    69fa:	f1 e8       	ldi	r31, 0x81	; 129
    69fc:	ef 2e       	mov	r14, r31
    69fe:	fa e2       	ldi	r31, 0x2A	; 42
    6a00:	ff 2e       	mov	r15, r31
    6a02:	f0 2d       	mov	r31, r0
    6a04:	0a e1       	ldi	r16, 0x1A	; 26
    6a06:	16 e0       	ldi	r17, 0x06	; 6
    6a08:	20 e0       	ldi	r18, 0x00	; 0
    6a0a:	48 e5       	ldi	r20, 0x58	; 88
    6a0c:	5b e1       	ldi	r21, 0x1B	; 27
    6a0e:	60 e0       	ldi	r22, 0x00	; 0
    6a10:	70 e0       	ldi	r23, 0x00	; 0
    6a12:	80 ec       	ldi	r24, 0xC0	; 192
    6a14:	94 e0       	ldi	r25, 0x04	; 4
    6a16:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6a1a:	90 93 d9 09 	sts	0x09D9, r25	; 0x8009d9 <xStartHeatPump_2+0x1>
    6a1e:	80 93 d8 09 	sts	0x09D8, r24	; 0x8009d8 <xStartHeatPump_2>
		xStartCompressor_2 =	xTimerCreate("StComp_2",		7000, pdFALSE, (void*) &uxStartDelayCompTimer_2_ID, StartComp);
    6a22:	0f 2e       	mov	r0, r31
    6a24:	fb e9       	ldi	r31, 0x9B	; 155
    6a26:	ef 2e       	mov	r14, r31
    6a28:	f2 e3       	ldi	r31, 0x32	; 50
    6a2a:	ff 2e       	mov	r15, r31
    6a2c:	f0 2d       	mov	r31, r0
    6a2e:	0b e1       	ldi	r16, 0x1B	; 27
    6a30:	16 e0       	ldi	r17, 0x06	; 6
    6a32:	20 e0       	ldi	r18, 0x00	; 0
    6a34:	48 e5       	ldi	r20, 0x58	; 88
    6a36:	5b e1       	ldi	r21, 0x1B	; 27
    6a38:	60 e0       	ldi	r22, 0x00	; 0
    6a3a:	70 e0       	ldi	r23, 0x00	; 0
    6a3c:	8a ec       	ldi	r24, 0xCA	; 202
    6a3e:	94 e0       	ldi	r25, 0x04	; 4
    6a40:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6a44:	90 93 8b 0a 	sts	0x0A8B, r25	; 0x800a8b <xStartCompressor_2+0x1>
    6a48:	80 93 8a 0a 	sts	0x0A8A, r24	; 0x800a8a <xStartCompressor_2>
		xTStartCheckErrors_2 =	xTimerCreate("ChErr_2",			300000, pdFALSE, (void*) &uxStartDelayChekErrTimer_2_ID, StartCheckErrors);
    6a4c:	0f 2e       	mov	r0, r31
    6a4e:	f1 e9       	ldi	r31, 0x91	; 145
    6a50:	ef 2e       	mov	r14, r31
    6a52:	fb e2       	ldi	r31, 0x2B	; 43
    6a54:	ff 2e       	mov	r15, r31
    6a56:	f0 2d       	mov	r31, r0
    6a58:	07 e1       	ldi	r16, 0x17	; 23
    6a5a:	16 e0       	ldi	r17, 0x06	; 6
    6a5c:	20 e0       	ldi	r18, 0x00	; 0
    6a5e:	40 ee       	ldi	r20, 0xE0	; 224
    6a60:	53 e9       	ldi	r21, 0x93	; 147
    6a62:	64 e0       	ldi	r22, 0x04	; 4
    6a64:	70 e0       	ldi	r23, 0x00	; 0
    6a66:	83 ed       	ldi	r24, 0xD3	; 211
    6a68:	94 e0       	ldi	r25, 0x04	; 4
    6a6a:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6a6e:	90 93 ea 08 	sts	0x08EA, r25	; 0x8008ea <xTStartCheckErrors_2+0x1>
    6a72:	80 93 e9 08 	sts	0x08E9, r24	; 0x8008e9 <xTStartCheckErrors_2>
		xTStartCheckTrv_2 =		xTimerCreate("ChTrv_2",			7000, pdFALSE, (void*) &uxStartDelayChekTrvTimer_2_ID, StartCheckTrv);
    6a76:	0f 2e       	mov	r0, r31
    6a78:	f1 ec       	ldi	r31, 0xC1	; 193
    6a7a:	ef 2e       	mov	r14, r31
    6a7c:	fb e2       	ldi	r31, 0x2B	; 43
    6a7e:	ff 2e       	mov	r15, r31
    6a80:	f0 2d       	mov	r31, r0
    6a82:	08 e1       	ldi	r16, 0x18	; 24
    6a84:	16 e0       	ldi	r17, 0x06	; 6
    6a86:	20 e0       	ldi	r18, 0x00	; 0
    6a88:	48 e5       	ldi	r20, 0x58	; 88
    6a8a:	5b e1       	ldi	r21, 0x1B	; 27
    6a8c:	60 e0       	ldi	r22, 0x00	; 0
    6a8e:	70 e0       	ldi	r23, 0x00	; 0
    6a90:	8b ed       	ldi	r24, 0xDB	; 219
    6a92:	94 e0       	ldi	r25, 0x04	; 4
    6a94:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6a98:	90 93 d3 09 	sts	0x09D3, r25	; 0x8009d3 <xTStartCheckTrv_2+0x1>
    6a9c:	80 93 d2 09 	sts	0x09D2, r24	; 0x8009d2 <xTStartCheckTrv_2>
		//---------stop
		xSwitchRevOne_2_time =	xTimerCreate("swRevOne_2",		5000, pdFALSE, (void*) &uxSwitchRevOne_2_ID, SwitchRev_1_Time);
    6aa0:	0f 2e       	mov	r0, r31
    6aa2:	f5 e7       	ldi	r31, 0x75	; 117
    6aa4:	ef 2e       	mov	r14, r31
    6aa6:	f3 e3       	ldi	r31, 0x33	; 51
    6aa8:	ff 2e       	mov	r15, r31
    6aaa:	f0 2d       	mov	r31, r0
    6aac:	03 e1       	ldi	r16, 0x13	; 19
    6aae:	16 e0       	ldi	r17, 0x06	; 6
    6ab0:	20 e0       	ldi	r18, 0x00	; 0
    6ab2:	48 e8       	ldi	r20, 0x88	; 136
    6ab4:	53 e1       	ldi	r21, 0x13	; 19
    6ab6:	60 e0       	ldi	r22, 0x00	; 0
    6ab8:	70 e0       	ldi	r23, 0x00	; 0
    6aba:	83 ee       	ldi	r24, 0xE3	; 227
    6abc:	94 e0       	ldi	r25, 0x04	; 4
    6abe:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6ac2:	90 93 ab 0a 	sts	0x0AAB, r25	; 0x800aab <xSwitchRevOne_2_time+0x1>
    6ac6:	80 93 aa 0a 	sts	0x0AAA, r24	; 0x800aaa <xSwitchRevOne_2_time>
		xSwitchRevTwo_2_time =	xTimerCreate("swRevTwo_2",		5000, pdFALSE, (void*) &uxSwitchRevTwo_2_ID, SwitchRev_2_Time);
    6aca:	0f 2e       	mov	r0, r31
    6acc:	f8 e2       	ldi	r31, 0x28	; 40
    6ace:	ef 2e       	mov	r14, r31
    6ad0:	fb e2       	ldi	r31, 0x2B	; 43
    6ad2:	ff 2e       	mov	r15, r31
    6ad4:	f0 2d       	mov	r31, r0
    6ad6:	02 e1       	ldi	r16, 0x12	; 18
    6ad8:	16 e0       	ldi	r17, 0x06	; 6
    6ada:	20 e0       	ldi	r18, 0x00	; 0
    6adc:	48 e8       	ldi	r20, 0x88	; 136
    6ade:	53 e1       	ldi	r21, 0x13	; 19
    6ae0:	60 e0       	ldi	r22, 0x00	; 0
    6ae2:	70 e0       	ldi	r23, 0x00	; 0
    6ae4:	8e ee       	ldi	r24, 0xEE	; 238
    6ae6:	94 e0       	ldi	r25, 0x04	; 4
    6ae8:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6aec:	90 93 90 0a 	sts	0x0A90, r25	; 0x800a90 <xSwitchRevTwo_2_time+0x1>
    6af0:	80 93 8f 0a 	sts	0x0A8F, r24	; 0x800a8f <xSwitchRevTwo_2_time>
		xStopHeatPump_2   =		xTimerCreate("offHeatP_2",		7000, pdFALSE, (void*) &uxStopDelayHeatPTimer_2_ID, HeatPump_Stop);
    6af4:	0f 2e       	mov	r0, r31
    6af6:	fd e3       	ldi	r31, 0x3D	; 61
    6af8:	ef 2e       	mov	r14, r31
    6afa:	ff e2       	ldi	r31, 0x2F	; 47
    6afc:	ff 2e       	mov	r15, r31
    6afe:	f0 2d       	mov	r31, r0
    6b00:	06 e1       	ldi	r16, 0x16	; 22
    6b02:	16 e0       	ldi	r17, 0x06	; 6
    6b04:	20 e0       	ldi	r18, 0x00	; 0
    6b06:	48 e5       	ldi	r20, 0x58	; 88
    6b08:	5b e1       	ldi	r21, 0x1B	; 27
    6b0a:	60 e0       	ldi	r22, 0x00	; 0
    6b0c:	70 e0       	ldi	r23, 0x00	; 0
    6b0e:	89 ef       	ldi	r24, 0xF9	; 249
    6b10:	94 e0       	ldi	r25, 0x04	; 4
    6b12:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6b16:	90 93 69 0a 	sts	0x0A69, r25	; 0x800a69 <xStopHeatPump_2+0x1>
    6b1a:	80 93 68 0a 	sts	0x0A68, r24	; 0x800a68 <xStopHeatPump_2>
		xStopRevValve_2    =	xTimerCreate("offRevV_2",		7000, pdFALSE, (void*) &uxStopDelayRevVTimer_2_ID, Revers_Stop);
    6b1e:	0f 2e       	mov	r0, r31
    6b20:	f5 ed       	ldi	r31, 0xD5	; 213
    6b22:	ef 2e       	mov	r14, r31
    6b24:	f0 e3       	ldi	r31, 0x30	; 48
    6b26:	ff 2e       	mov	r15, r31
    6b28:	f0 2d       	mov	r31, r0
    6b2a:	04 e1       	ldi	r16, 0x14	; 20
    6b2c:	16 e0       	ldi	r17, 0x06	; 6
    6b2e:	20 e0       	ldi	r18, 0x00	; 0
    6b30:	48 e5       	ldi	r20, 0x58	; 88
    6b32:	5b e1       	ldi	r21, 0x1B	; 27
    6b34:	60 e0       	ldi	r22, 0x00	; 0
    6b36:	70 e0       	ldi	r23, 0x00	; 0
    6b38:	84 e0       	ldi	r24, 0x04	; 4
    6b3a:	95 e0       	ldi	r25, 0x05	; 5
    6b3c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6b40:	90 93 f8 08 	sts	0x08F8, r25	; 0x8008f8 <xStopRevValve_2+0x1>
    6b44:	80 93 f7 08 	sts	0x08F7, r24	; 0x8008f7 <xStopRevValve_2>
		xStopSource_2   =		xTimerCreate("offSourceP_2",	7000, pdFALSE, (void*) &uxStopDelaySourcePTimer_2_ID, SorcePump_Stop);
    6b48:	0f 2e       	mov	r0, r31
    6b4a:	fd ec       	ldi	r31, 0xCD	; 205
    6b4c:	ef 2e       	mov	r14, r31
    6b4e:	f1 e3       	ldi	r31, 0x31	; 49
    6b50:	ff 2e       	mov	r15, r31
    6b52:	f0 2d       	mov	r31, r0
    6b54:	05 e1       	ldi	r16, 0x15	; 21
    6b56:	16 e0       	ldi	r17, 0x06	; 6
    6b58:	20 e0       	ldi	r18, 0x00	; 0
    6b5a:	48 e5       	ldi	r20, 0x58	; 88
    6b5c:	5b e1       	ldi	r21, 0x1B	; 27
    6b5e:	60 e0       	ldi	r22, 0x00	; 0
    6b60:	70 e0       	ldi	r23, 0x00	; 0
    6b62:	8e e0       	ldi	r24, 0x0E	; 14
    6b64:	95 e0       	ldi	r25, 0x05	; 5
    6b66:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6b6a:	90 93 59 0a 	sts	0x0A59, r25	; 0x800a59 <xStopSource_2+0x1>
    6b6e:	80 93 58 0a 	sts	0x0A58, r24	; 0x800a58 <xStopSource_2>
	}
	
	
}
    6b72:	df 91       	pop	r29
    6b74:	cf 91       	pop	r28
    6b76:	1f 91       	pop	r17
    6b78:	0f 91       	pop	r16
    6b7a:	ff 90       	pop	r15
    6b7c:	ef 90       	pop	r14
    6b7e:	08 95       	ret

00006b80 <startDefrost>:
//------------------------------------------------
void startDefrost(xCompressor *comp,xEEdata* eeData){
    6b80:	fb 01       	movw	r30, r22
	_heatWater=eeData->heatWater;
    6b82:	81 e0       	ldi	r24, 0x01	; 1
    6b84:	95 a1       	ldd	r25, Z+37	; 0x25
    6b86:	91 11       	cpse	r25, r1
    6b88:	01 c0       	rjmp	.+2      	; 0x6b8c <startDefrost+0xc>
    6b8a:	80 e0       	ldi	r24, 0x00	; 0
    6b8c:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <_heatWater>
	_heat =eeData->heat;
    6b90:	81 e0       	ldi	r24, 0x01	; 1
    6b92:	96 a1       	ldd	r25, Z+38	; 0x26
    6b94:	91 11       	cpse	r25, r1
    6b96:	01 c0       	rjmp	.+2      	; 0x6b9a <startDefrost+0x1a>
    6b98:	80 e0       	ldi	r24, 0x00	; 0
    6b9a:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <_heat>
	_cool =eeData->cool;
    6b9e:	81 e0       	ldi	r24, 0x01	; 1
    6ba0:	97 a1       	ldd	r25, Z+39	; 0x27
    6ba2:	91 11       	cpse	r25, r1
    6ba4:	01 c0       	rjmp	.+2      	; 0x6ba8 <startDefrost+0x28>
    6ba6:	80 e0       	ldi	r24, 0x00	; 0
    6ba8:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <_cool>
	eeData->heatWater=false;
    6bac:	15 a2       	std	Z+37, r1	; 0x25
	eeData->heat =false;
    6bae:	16 a2       	std	Z+38, r1	; 0x26
	eeData->cool =true;
    6bb0:	81 e0       	ldi	r24, 0x01	; 1
    6bb2:	87 a3       	std	Z+39, r24	; 0x27
    6bb4:	08 95       	ret

00006bb6 <stopDefrost>:
	//Comp_Stop(comp);
		
}
void stopDefrost(xCompressor *comp,xEEdata* eeData){
    6bb6:	fb 01       	movw	r30, r22
	
	//Comp_Stop(comp);
	//eeData->heatWater=false;
	//eeData->heat =true;
	//eeData->cool =false;
	eeData->heatWater=_heatWater;
    6bb8:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <_heatWater>
    6bbc:	85 a3       	std	Z+37, r24	; 0x25
	eeData->heat =_heat;
    6bbe:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <_heat>
    6bc2:	86 a3       	std	Z+38, r24	; 0x26
	eeData->cool =_cool;
    6bc4:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <_cool>
    6bc8:	87 a3       	std	Z+39, r24	; 0x27
    6bca:	08 95       	ret

00006bcc <StarSoursePump>:




//------------------------------------------------
void StarSoursePump(xCompressor *comp){
    6bcc:	4f 92       	push	r4
    6bce:	5f 92       	push	r5
    6bd0:	6f 92       	push	r6
    6bd2:	7f 92       	push	r7
    6bd4:	af 92       	push	r10
    6bd6:	bf 92       	push	r11
    6bd8:	cf 92       	push	r12
    6bda:	df 92       	push	r13
    6bdc:	ef 92       	push	r14
    6bde:	ff 92       	push	r15
    6be0:	0f 93       	push	r16
    6be2:	1f 93       	push	r17
    6be4:	cf 93       	push	r28
    6be6:	df 93       	push	r29
    6be8:	5c 01       	movw	r10, r24
TickType_t period;

	period=(TickType_t)EEpromData.Revers_Valve_delay;
    6bea:	20 91 04 09 	lds	r18, 0x0904	; 0x800904 <EEpromData+0x2>
	period*=1000;
    6bee:	30 e0       	ldi	r19, 0x00	; 0
    6bf0:	a8 ee       	ldi	r26, 0xE8	; 232
    6bf2:	b3 e0       	ldi	r27, 0x03	; 3
    6bf4:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    6bf8:	2b 01       	movw	r4, r22
    6bfa:	3c 01       	movw	r6, r24
	xSerialxPrintf(&xSerial3Port,"SoursePump_f_%d\r\n",comp->Index);
    6bfc:	e5 01       	movw	r28, r10
    6bfe:	c2 59       	subi	r28, 0x92	; 146
    6c00:	df 4f       	sbci	r29, 0xFF	; 255
    6c02:	89 81       	ldd	r24, Y+1	; 0x01
    6c04:	8f 93       	push	r24
    6c06:	88 81       	ld	r24, Y
    6c08:	8f 93       	push	r24
    6c0a:	8b e1       	ldi	r24, 0x1B	; 27
    6c0c:	95 e0       	ldi	r25, 0x05	; 5
    6c0e:	9f 93       	push	r25
    6c10:	8f 93       	push	r24
    6c12:	80 ea       	ldi	r24, 0xA0	; 160
    6c14:	97 e0       	ldi	r25, 0x07	; 7
    6c16:	9f 93       	push	r25
    6c18:	8f 93       	push	r24
    6c1a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(comp->Index == 1)
    6c1e:	0f 90       	pop	r0
    6c20:	0f 90       	pop	r0
    6c22:	0f 90       	pop	r0
    6c24:	0f 90       	pop	r0
    6c26:	0f 90       	pop	r0
    6c28:	0f 90       	pop	r0
    6c2a:	88 81       	ld	r24, Y
    6c2c:	99 81       	ldd	r25, Y+1	; 0x01
    6c2e:	01 97       	sbiw	r24, 0x01	; 1
    6c30:	09 f0       	breq	.+2      	; 0x6c34 <StarSoursePump+0x68>
    6c32:	4a c0       	rjmp	.+148    	; 0x6cc8 <StarSoursePump+0xfc>
	{
		
		Comp_1.error=0;
    6c34:	10 92 cf 09 	sts	0x09CF, r1	; 0x8009cf <Comp_1+0x6d>
    6c38:	10 92 ce 09 	sts	0x09CE, r1	; 0x8009ce <Comp_1+0x6c>
		Comp_1.switchToMode=true;
    6c3c:	81 e0       	ldi	r24, 0x01	; 1
    6c3e:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <Comp_1>
		if(PIN_SOURCE_PUMP_1 == 0 && !comp->def )
    6c42:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6c46:	81 fd       	sbrc	r24, 1
    6c48:	2d c0       	rjmp	.+90     	; 0x6ca4 <StarSoursePump+0xd8>
    6c4a:	f5 01       	movw	r30, r10
    6c4c:	81 85       	ldd	r24, Z+9	; 0x09
    6c4e:	81 11       	cpse	r24, r1
    6c50:	29 c0       	rjmp	.+82     	; 0x6ca4 <StarSoursePump+0xd8>
		{
			START_SOURCE_PUMP_1;
    6c52:	e2 e0       	ldi	r30, 0x02	; 2
    6c54:	f1 e0       	ldi	r31, 0x01	; 1
    6c56:	80 81       	ld	r24, Z
    6c58:	82 60       	ori	r24, 0x02	; 2
    6c5a:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StartSourcePump_1\r\n");
    6c5c:	8d e2       	ldi	r24, 0x2D	; 45
    6c5e:	95 e0       	ldi	r25, 0x05	; 5
    6c60:	9f 93       	push	r25
    6c62:	8f 93       	push	r24
    6c64:	80 ea       	ldi	r24, 0xA0	; 160
    6c66:	97 e0       	ldi	r25, 0x07	; 7
    6c68:	9f 93       	push	r25
    6c6a:	8f 93       	push	r24
    6c6c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->srcPOn=1;
    6c70:	81 e0       	ldi	r24, 0x01	; 1
    6c72:	f5 01       	movw	r30, r10
    6c74:	87 87       	std	Z+15, r24	; 0x0f
			timeStartSrcP_1=time(&current_time);
    6c76:	8d ef       	ldi	r24, 0xFD	; 253
    6c78:	98 e0       	ldi	r25, 0x08	; 8
    6c7a:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6c7e:	60 93 da 09 	sts	0x09DA, r22	; 0x8009da <timeStartSrcP_1>
    6c82:	70 93 db 09 	sts	0x09DB, r23	; 0x8009db <timeStartSrcP_1+0x1>
    6c86:	80 93 dc 09 	sts	0x09DC, r24	; 0x8009dc <timeStartSrcP_1+0x2>
    6c8a:	90 93 dd 09 	sts	0x09DD, r25	; 0x8009dd <timeStartSrcP_1+0x3>
			EEpromData.number_turnon_source_1+=1;
    6c8e:	e2 e4       	ldi	r30, 0x42	; 66
    6c90:	f9 e0       	ldi	r31, 0x09	; 9
    6c92:	80 81       	ld	r24, Z
    6c94:	91 81       	ldd	r25, Z+1	; 0x01
    6c96:	01 96       	adiw	r24, 0x01	; 1
    6c98:	91 83       	std	Z+1, r25	; 0x01
    6c9a:	80 83       	st	Z, r24
    6c9c:	0f 90       	pop	r0
    6c9e:	0f 90       	pop	r0
    6ca0:	0f 90       	pop	r0
    6ca2:	0f 90       	pop	r0
			//xSerialxPrintf(&xSerial3Port,"Number_turnon_source_=%d\r\n",EEpromData.number_turnon_source_1);
			
						
		}
		xTimerChangePeriod( xStartRevValve_1,period, 100 );
    6ca4:	0f 2e       	mov	r0, r31
    6ca6:	f4 e6       	ldi	r31, 0x64	; 100
    6ca8:	cf 2e       	mov	r12, r31
    6caa:	d1 2c       	mov	r13, r1
    6cac:	e1 2c       	mov	r14, r1
    6cae:	f1 2c       	mov	r15, r1
    6cb0:	f0 2d       	mov	r31, r0
    6cb2:	00 e0       	ldi	r16, 0x00	; 0
    6cb4:	10 e0       	ldi	r17, 0x00	; 0
    6cb6:	a3 01       	movw	r20, r6
    6cb8:	92 01       	movw	r18, r4
    6cba:	64 e0       	ldi	r22, 0x04	; 4
    6cbc:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <xStartRevValve_1>
    6cc0:	90 91 a2 0a 	lds	r25, 0x0AA2	; 0x800aa2 <xStartRevValve_1+0x1>
    6cc4:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if(comp->Index == 2)
    6cc8:	f5 01       	movw	r30, r10
    6cca:	e2 59       	subi	r30, 0x92	; 146
    6ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    6cce:	80 81       	ld	r24, Z
    6cd0:	91 81       	ldd	r25, Z+1	; 0x01
    6cd2:	02 97       	sbiw	r24, 0x02	; 2
    6cd4:	09 f0       	breq	.+2      	; 0x6cd8 <StarSoursePump+0x10c>
    6cd6:	4a c0       	rjmp	.+148    	; 0x6d6c <StarSoursePump+0x1a0>
	{
		Comp_2.error=0;
    6cd8:	10 92 55 0a 	sts	0x0A55, r1	; 0x800a55 <Comp_2+0x6d>
    6cdc:	10 92 54 0a 	sts	0x0A54, r1	; 0x800a54 <Comp_2+0x6c>
		Comp_1.switchToMode=true;
    6ce0:	81 e0       	ldi	r24, 0x01	; 1
    6ce2:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <Comp_1>
		
		xSerialxPrintf(&xSerial3Port,"StartSourcePump_2\r\n");
    6ce6:	81 e4       	ldi	r24, 0x41	; 65
    6ce8:	95 e0       	ldi	r25, 0x05	; 5
    6cea:	9f 93       	push	r25
    6cec:	8f 93       	push	r24
    6cee:	80 ea       	ldi	r24, 0xA0	; 160
    6cf0:	97 e0       	ldi	r25, 0x07	; 7
    6cf2:	9f 93       	push	r25
    6cf4:	8f 93       	push	r24
    6cf6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		
		if(PIN_SOURCE_PUMP_2 == 0 && !comp->def)
    6cfa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6cfe:	0f 90       	pop	r0
    6d00:	0f 90       	pop	r0
    6d02:	0f 90       	pop	r0
    6d04:	0f 90       	pop	r0
    6d06:	82 fd       	sbrc	r24, 2
    6d08:	1f c0       	rjmp	.+62     	; 0x6d48 <StarSoursePump+0x17c>
    6d0a:	f5 01       	movw	r30, r10
    6d0c:	81 85       	ldd	r24, Z+9	; 0x09
    6d0e:	81 11       	cpse	r24, r1
    6d10:	1b c0       	rjmp	.+54     	; 0x6d48 <StarSoursePump+0x17c>
		{
			START_SOURCE_PUMP_2;						
    6d12:	e2 e0       	ldi	r30, 0x02	; 2
    6d14:	f1 e0       	ldi	r31, 0x01	; 1
    6d16:	80 81       	ld	r24, Z
    6d18:	84 60       	ori	r24, 0x04	; 4
    6d1a:	80 83       	st	Z, r24
			comp->srcPOn=1;
    6d1c:	81 e0       	ldi	r24, 0x01	; 1
    6d1e:	f5 01       	movw	r30, r10
    6d20:	87 87       	std	Z+15, r24	; 0x0f
			timeStartSrcP_2=time(&current_time);
    6d22:	8d ef       	ldi	r24, 0xFD	; 253
    6d24:	98 e0       	ldi	r25, 0x08	; 8
    6d26:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6d2a:	60 93 95 0a 	sts	0x0A95, r22	; 0x800a95 <timeStartSrcP_2>
    6d2e:	70 93 96 0a 	sts	0x0A96, r23	; 0x800a96 <timeStartSrcP_2+0x1>
    6d32:	80 93 97 0a 	sts	0x0A97, r24	; 0x800a97 <timeStartSrcP_2+0x2>
    6d36:	90 93 98 0a 	sts	0x0A98, r25	; 0x800a98 <timeStartSrcP_2+0x3>
			EEpromData.number_turnon_source_2+=1;
    6d3a:	e6 e5       	ldi	r30, 0x56	; 86
    6d3c:	f9 e0       	ldi	r31, 0x09	; 9
    6d3e:	80 81       	ld	r24, Z
    6d40:	91 81       	ldd	r25, Z+1	; 0x01
    6d42:	01 96       	adiw	r24, 0x01	; 1
    6d44:	91 83       	std	Z+1, r25	; 0x01
    6d46:	80 83       	st	Z, r24
						
		}
		xTimerChangePeriod( xStartRevValve_2,period, 100 );
    6d48:	0f 2e       	mov	r0, r31
    6d4a:	f4 e6       	ldi	r31, 0x64	; 100
    6d4c:	cf 2e       	mov	r12, r31
    6d4e:	d1 2c       	mov	r13, r1
    6d50:	e1 2c       	mov	r14, r1
    6d52:	f1 2c       	mov	r15, r1
    6d54:	f0 2d       	mov	r31, r0
    6d56:	00 e0       	ldi	r16, 0x00	; 0
    6d58:	10 e0       	ldi	r17, 0x00	; 0
    6d5a:	a3 01       	movw	r20, r6
    6d5c:	92 01       	movw	r18, r4
    6d5e:	64 e0       	ldi	r22, 0x04	; 4
    6d60:	80 91 62 0a 	lds	r24, 0x0A62	; 0x800a62 <xStartRevValve_2>
    6d64:	90 91 63 0a 	lds	r25, 0x0A63	; 0x800a63 <xStartRevValve_2+0x1>
    6d68:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
}
    6d6c:	df 91       	pop	r29
    6d6e:	cf 91       	pop	r28
    6d70:	1f 91       	pop	r17
    6d72:	0f 91       	pop	r16
    6d74:	ff 90       	pop	r15
    6d76:	ef 90       	pop	r14
    6d78:	df 90       	pop	r13
    6d7a:	cf 90       	pop	r12
    6d7c:	bf 90       	pop	r11
    6d7e:	af 90       	pop	r10
    6d80:	7f 90       	pop	r7
    6d82:	6f 90       	pop	r6
    6d84:	5f 90       	pop	r5
    6d86:	4f 90       	pop	r4
    6d88:	08 95       	ret

00006d8a <selmode>:
   
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t selmode(xEEdata* eeData)
{
    6d8a:	fc 01       	movw	r30, r24

	if(eeData->heatWater && !eeData->heat && !eeData->cool)
    6d8c:	85 a1       	ldd	r24, Z+37	; 0x25
    6d8e:	88 23       	and	r24, r24
    6d90:	39 f0       	breq	.+14     	; 0x6da0 <selmode+0x16>
    6d92:	86 a1       	ldd	r24, Z+38	; 0x26
    6d94:	81 11       	cpse	r24, r1
    6d96:	1a c0       	rjmp	.+52     	; 0x6dcc <selmode+0x42>
    6d98:	97 a1       	ldd	r25, Z+39	; 0x27
    6d9a:	91 11       	cpse	r25, r1
    6d9c:	1c c0       	rjmp	.+56     	; 0x6dd6 <selmode+0x4c>
    6d9e:	0d c0       	rjmp	.+26     	; 0x6dba <selmode+0x30>
	{
		return DHW;
		
	}
	if(!eeData->heatWater && eeData->heat && !eeData->cool)
    6da0:	96 a1       	ldd	r25, Z+38	; 0x26
    6da2:	99 23       	and	r25, r25
    6da4:	71 f0       	breq	.+28     	; 0x6dc2 <selmode+0x38>
    6da6:	97 a1       	ldd	r25, Z+39	; 0x27
    6da8:	91 11       	cpse	r25, r1
    6daa:	17 c0       	rjmp	.+46     	; 0x6dda <selmode+0x50>
	{
		return HEAT;
    6dac:	82 e0       	ldi	r24, 0x02	; 2
    6dae:	08 95       	ret
	}
	if(eeData->heatWater && eeData->heat && !eeData->cool)
	{
		return HEAT_DHW;
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
    6db0:	87 a1       	ldd	r24, Z+39	; 0x27
    6db2:	88 23       	and	r24, r24
    6db4:	91 f0       	breq	.+36     	; 0x6dda <selmode+0x50>
	{
		return COOL_DHW;
    6db6:	85 e0       	ldi	r24, 0x05	; 5
    6db8:	08 95       	ret
uint8_t selmode(xEEdata* eeData)
{

	if(eeData->heatWater && !eeData->heat && !eeData->cool)
	{
		return DHW;
    6dba:	81 e0       	ldi	r24, 0x01	; 1
    6dbc:	08 95       	ret
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
	{
		return COOL_DHW;
	}
	else return OFF;
    6dbe:	80 e0       	ldi	r24, 0x00	; 0
    6dc0:	08 95       	ret
	}
	if(!eeData->heatWater && eeData->heat && !eeData->cool)
	{
		return HEAT;
	}
	if(!eeData->heatWater && !eeData->heat && eeData->cool)
    6dc2:	87 a1       	ldd	r24, Z+39	; 0x27
    6dc4:	88 23       	and	r24, r24
    6dc6:	49 f0       	breq	.+18     	; 0x6dda <selmode+0x50>
	{
		return COOL;
    6dc8:	83 e0       	ldi	r24, 0x03	; 3
    6dca:	08 95       	ret
	}
	if(eeData->heatWater && eeData->heat && !eeData->cool)
    6dcc:	87 a1       	ldd	r24, Z+39	; 0x27
    6dce:	81 11       	cpse	r24, r1
    6dd0:	f6 cf       	rjmp	.-20     	; 0x6dbe <selmode+0x34>
	{
		return HEAT_DHW;
    6dd2:	84 e0       	ldi	r24, 0x04	; 4
    6dd4:	08 95       	ret
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
    6dd6:	88 23       	and	r24, r24
    6dd8:	59 f3       	breq	.-42     	; 0x6db0 <selmode+0x26>
	{
		return COOL_DHW;
	}
	else return OFF;

}
    6dda:	08 95       	ret

00006ddc <stop_timers>:
			}
		}break;
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void stop_timers( xCompressor *comp){
    6ddc:	cf 92       	push	r12
    6dde:	df 92       	push	r13
    6de0:	ef 92       	push	r14
    6de2:	ff 92       	push	r15
    6de4:	0f 93       	push	r16
    6de6:	1f 93       	push	r17
	if(comp->Index==1)
    6de8:	82 59       	subi	r24, 0x92	; 146
    6dea:	9f 4f       	sbci	r25, 0xFF	; 255
    6dec:	fc 01       	movw	r30, r24
    6dee:	80 81       	ld	r24, Z
    6df0:	91 81       	ldd	r25, Z+1	; 0x01
    6df2:	81 30       	cpi	r24, 0x01	; 1
    6df4:	91 05       	cpc	r25, r1
    6df6:	09 f0       	breq	.+2      	; 0x6dfa <stop_timers+0x1e>
    6df8:	3a c1       	rjmp	.+628    	; 0x706e <stop_timers+0x292>
	{
		if( xTimerIsTimerActive( xStartCompressor_1 ) != pdFALSE )      xTimerStop(xStartCompressor_1,1);
    6dfa:	80 91 78 0a 	lds	r24, 0x0A78	; 0x800a78 <xStartCompressor_1>
    6dfe:	90 91 79 0a 	lds	r25, 0x0A79	; 0x800a79 <xStartCompressor_1+0x1>
    6e02:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6e06:	88 23       	and	r24, r24
    6e08:	81 f0       	breq	.+32     	; 0x6e2a <stop_timers+0x4e>
    6e0a:	c1 2c       	mov	r12, r1
    6e0c:	d1 2c       	mov	r13, r1
    6e0e:	76 01       	movw	r14, r12
    6e10:	c3 94       	inc	r12
    6e12:	00 e0       	ldi	r16, 0x00	; 0
    6e14:	10 e0       	ldi	r17, 0x00	; 0
    6e16:	20 e0       	ldi	r18, 0x00	; 0
    6e18:	30 e0       	ldi	r19, 0x00	; 0
    6e1a:	a9 01       	movw	r20, r18
    6e1c:	63 e0       	ldi	r22, 0x03	; 3
    6e1e:	80 91 78 0a 	lds	r24, 0x0A78	; 0x800a78 <xStartCompressor_1>
    6e22:	90 91 79 0a 	lds	r25, 0x0A79	; 0x800a79 <xStartCompressor_1+0x1>
    6e26:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartHeatPump_1 ) != pdFALSE )        xTimerStop(xStartHeatPump_1,1);
    6e2a:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <xStartHeatPump_1>
    6e2e:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <xStartHeatPump_1+0x1>
    6e32:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6e36:	88 23       	and	r24, r24
    6e38:	81 f0       	breq	.+32     	; 0x6e5a <stop_timers+0x7e>
    6e3a:	c1 2c       	mov	r12, r1
    6e3c:	d1 2c       	mov	r13, r1
    6e3e:	76 01       	movw	r14, r12
    6e40:	c3 94       	inc	r12
    6e42:	00 e0       	ldi	r16, 0x00	; 0
    6e44:	10 e0       	ldi	r17, 0x00	; 0
    6e46:	20 e0       	ldi	r18, 0x00	; 0
    6e48:	30 e0       	ldi	r19, 0x00	; 0
    6e4a:	a9 01       	movw	r20, r18
    6e4c:	63 e0       	ldi	r22, 0x03	; 3
    6e4e:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <xStartHeatPump_1>
    6e52:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <xStartHeatPump_1+0x1>
    6e56:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartThreeWay ) != pdFALSE )			xTimerStop(xStartThreeWay,1);
    6e5a:	80 91 d6 09 	lds	r24, 0x09D6	; 0x8009d6 <xStartThreeWay>
    6e5e:	90 91 d7 09 	lds	r25, 0x09D7	; 0x8009d7 <xStartThreeWay+0x1>
    6e62:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6e66:	88 23       	and	r24, r24
    6e68:	81 f0       	breq	.+32     	; 0x6e8a <stop_timers+0xae>
    6e6a:	c1 2c       	mov	r12, r1
    6e6c:	d1 2c       	mov	r13, r1
    6e6e:	76 01       	movw	r14, r12
    6e70:	c3 94       	inc	r12
    6e72:	00 e0       	ldi	r16, 0x00	; 0
    6e74:	10 e0       	ldi	r17, 0x00	; 0
    6e76:	20 e0       	ldi	r18, 0x00	; 0
    6e78:	30 e0       	ldi	r19, 0x00	; 0
    6e7a:	a9 01       	movw	r20, r18
    6e7c:	63 e0       	ldi	r22, 0x03	; 3
    6e7e:	80 91 d6 09 	lds	r24, 0x09D6	; 0x8009d6 <xStartThreeWay>
    6e82:	90 91 d7 09 	lds	r25, 0x09D7	; 0x8009d7 <xStartThreeWay+0x1>
    6e86:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartRevValve_1 ) != pdFALSE )		xTimerStop(xStartRevValve_1,1);
    6e8a:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <xStartRevValve_1>
    6e8e:	90 91 a2 0a 	lds	r25, 0x0AA2	; 0x800aa2 <xStartRevValve_1+0x1>
    6e92:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6e96:	88 23       	and	r24, r24
    6e98:	81 f0       	breq	.+32     	; 0x6eba <stop_timers+0xde>
    6e9a:	c1 2c       	mov	r12, r1
    6e9c:	d1 2c       	mov	r13, r1
    6e9e:	76 01       	movw	r14, r12
    6ea0:	c3 94       	inc	r12
    6ea2:	00 e0       	ldi	r16, 0x00	; 0
    6ea4:	10 e0       	ldi	r17, 0x00	; 0
    6ea6:	20 e0       	ldi	r18, 0x00	; 0
    6ea8:	30 e0       	ldi	r19, 0x00	; 0
    6eaa:	a9 01       	movw	r20, r18
    6eac:	63 e0       	ldi	r22, 0x03	; 3
    6eae:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <xStartRevValve_1>
    6eb2:	90 91 a2 0a 	lds	r25, 0x0AA2	; 0x800aa2 <xStartRevValve_1+0x1>
    6eb6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevOne_1_time ) != pdFALSE )    xTimerStop(xSwitchRevOne_1_time,1);
    6eba:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <xSwitchRevOne_1_time>
    6ebe:	90 91 f6 08 	lds	r25, 0x08F6	; 0x8008f6 <xSwitchRevOne_1_time+0x1>
    6ec2:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6ec6:	88 23       	and	r24, r24
    6ec8:	81 f0       	breq	.+32     	; 0x6eea <stop_timers+0x10e>
    6eca:	c1 2c       	mov	r12, r1
    6ecc:	d1 2c       	mov	r13, r1
    6ece:	76 01       	movw	r14, r12
    6ed0:	c3 94       	inc	r12
    6ed2:	00 e0       	ldi	r16, 0x00	; 0
    6ed4:	10 e0       	ldi	r17, 0x00	; 0
    6ed6:	20 e0       	ldi	r18, 0x00	; 0
    6ed8:	30 e0       	ldi	r19, 0x00	; 0
    6eda:	a9 01       	movw	r20, r18
    6edc:	63 e0       	ldi	r22, 0x03	; 3
    6ede:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <xSwitchRevOne_1_time>
    6ee2:	90 91 f6 08 	lds	r25, 0x08F6	; 0x8008f6 <xSwitchRevOne_1_time+0x1>
    6ee6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevTwo_1_time ) != pdFALSE )	xTimerStop(xSwitchRevTwo_1_time,1);
    6eea:	80 91 74 0a 	lds	r24, 0x0A74	; 0x800a74 <xSwitchRevTwo_1_time>
    6eee:	90 91 75 0a 	lds	r25, 0x0A75	; 0x800a75 <xSwitchRevTwo_1_time+0x1>
    6ef2:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6ef6:	88 23       	and	r24, r24
    6ef8:	81 f0       	breq	.+32     	; 0x6f1a <stop_timers+0x13e>
    6efa:	c1 2c       	mov	r12, r1
    6efc:	d1 2c       	mov	r13, r1
    6efe:	76 01       	movw	r14, r12
    6f00:	c3 94       	inc	r12
    6f02:	00 e0       	ldi	r16, 0x00	; 0
    6f04:	10 e0       	ldi	r17, 0x00	; 0
    6f06:	20 e0       	ldi	r18, 0x00	; 0
    6f08:	30 e0       	ldi	r19, 0x00	; 0
    6f0a:	a9 01       	movw	r20, r18
    6f0c:	63 e0       	ldi	r22, 0x03	; 3
    6f0e:	80 91 74 0a 	lds	r24, 0x0A74	; 0x800a74 <xSwitchRevTwo_1_time>
    6f12:	90 91 75 0a 	lds	r25, 0x0A75	; 0x800a75 <xSwitchRevTwo_1_time+0x1>
    6f16:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopHeatPump_1 ) != pdFALSE )			xTimerStop(xStopHeatPump_1,1);
    6f1a:	80 91 ef 08 	lds	r24, 0x08EF	; 0x8008ef <xStopHeatPump_1>
    6f1e:	90 91 f0 08 	lds	r25, 0x08F0	; 0x8008f0 <xStopHeatPump_1+0x1>
    6f22:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6f26:	88 23       	and	r24, r24
    6f28:	81 f0       	breq	.+32     	; 0x6f4a <stop_timers+0x16e>
    6f2a:	c1 2c       	mov	r12, r1
    6f2c:	d1 2c       	mov	r13, r1
    6f2e:	76 01       	movw	r14, r12
    6f30:	c3 94       	inc	r12
    6f32:	00 e0       	ldi	r16, 0x00	; 0
    6f34:	10 e0       	ldi	r17, 0x00	; 0
    6f36:	20 e0       	ldi	r18, 0x00	; 0
    6f38:	30 e0       	ldi	r19, 0x00	; 0
    6f3a:	a9 01       	movw	r20, r18
    6f3c:	63 e0       	ldi	r22, 0x03	; 3
    6f3e:	80 91 ef 08 	lds	r24, 0x08EF	; 0x8008ef <xStopHeatPump_1>
    6f42:	90 91 f0 08 	lds	r25, 0x08F0	; 0x8008f0 <xStopHeatPump_1+0x1>
    6f46:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopThreeWay ) != pdFALSE )			xTimerStop(xStopThreeWay,1);
    6f4a:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <xStopThreeWay>
    6f4e:	90 91 d5 09 	lds	r25, 0x09D5	; 0x8009d5 <xStopThreeWay+0x1>
    6f52:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6f56:	88 23       	and	r24, r24
    6f58:	81 f0       	breq	.+32     	; 0x6f7a <stop_timers+0x19e>
    6f5a:	c1 2c       	mov	r12, r1
    6f5c:	d1 2c       	mov	r13, r1
    6f5e:	76 01       	movw	r14, r12
    6f60:	c3 94       	inc	r12
    6f62:	00 e0       	ldi	r16, 0x00	; 0
    6f64:	10 e0       	ldi	r17, 0x00	; 0
    6f66:	20 e0       	ldi	r18, 0x00	; 0
    6f68:	30 e0       	ldi	r19, 0x00	; 0
    6f6a:	a9 01       	movw	r20, r18
    6f6c:	63 e0       	ldi	r22, 0x03	; 3
    6f6e:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <xStopThreeWay>
    6f72:	90 91 d5 09 	lds	r25, 0x09D5	; 0x8009d5 <xStopThreeWay+0x1>
    6f76:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopRevValve_1 ) != pdFALSE )			xTimerStop(xStopRevValve_1,1);
    6f7a:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <xStopRevValve_1>
    6f7e:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <xStopRevValve_1+0x1>
    6f82:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6f86:	88 23       	and	r24, r24
    6f88:	81 f0       	breq	.+32     	; 0x6faa <stop_timers+0x1ce>
    6f8a:	c1 2c       	mov	r12, r1
    6f8c:	d1 2c       	mov	r13, r1
    6f8e:	76 01       	movw	r14, r12
    6f90:	c3 94       	inc	r12
    6f92:	00 e0       	ldi	r16, 0x00	; 0
    6f94:	10 e0       	ldi	r17, 0x00	; 0
    6f96:	20 e0       	ldi	r18, 0x00	; 0
    6f98:	30 e0       	ldi	r19, 0x00	; 0
    6f9a:	a9 01       	movw	r20, r18
    6f9c:	63 e0       	ldi	r22, 0x03	; 3
    6f9e:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <xStopRevValve_1>
    6fa2:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <xStopRevValve_1+0x1>
    6fa6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopSource_1 ) != pdFALSE )			xTimerStop(xStopSource_1,1);
    6faa:	80 91 f9 08 	lds	r24, 0x08F9	; 0x8008f9 <xStopSource_1>
    6fae:	90 91 fa 08 	lds	r25, 0x08FA	; 0x8008fa <xStopSource_1+0x1>
    6fb2:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6fb6:	88 23       	and	r24, r24
    6fb8:	81 f0       	breq	.+32     	; 0x6fda <stop_timers+0x1fe>
    6fba:	c1 2c       	mov	r12, r1
    6fbc:	d1 2c       	mov	r13, r1
    6fbe:	76 01       	movw	r14, r12
    6fc0:	c3 94       	inc	r12
    6fc2:	00 e0       	ldi	r16, 0x00	; 0
    6fc4:	10 e0       	ldi	r17, 0x00	; 0
    6fc6:	20 e0       	ldi	r18, 0x00	; 0
    6fc8:	30 e0       	ldi	r19, 0x00	; 0
    6fca:	a9 01       	movw	r20, r18
    6fcc:	63 e0       	ldi	r22, 0x03	; 3
    6fce:	80 91 f9 08 	lds	r24, 0x08F9	; 0x8008f9 <xStopSource_1>
    6fd2:	90 91 fa 08 	lds	r25, 0x08FA	; 0x8008fa <xStopSource_1+0x1>
    6fd6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckErrors_1 ) != pdFALSE )    xTimerStop(xTStartCheckErrors_1,1);
    6fda:	80 91 99 0a 	lds	r24, 0x0A99	; 0x800a99 <xTStartCheckErrors_1>
    6fde:	90 91 9a 0a 	lds	r25, 0x0A9A	; 0x800a9a <xTStartCheckErrors_1+0x1>
    6fe2:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6fe6:	88 23       	and	r24, r24
    6fe8:	81 f0       	breq	.+32     	; 0x700a <stop_timers+0x22e>
    6fea:	c1 2c       	mov	r12, r1
    6fec:	d1 2c       	mov	r13, r1
    6fee:	76 01       	movw	r14, r12
    6ff0:	c3 94       	inc	r12
    6ff2:	00 e0       	ldi	r16, 0x00	; 0
    6ff4:	10 e0       	ldi	r17, 0x00	; 0
    6ff6:	20 e0       	ldi	r18, 0x00	; 0
    6ff8:	30 e0       	ldi	r19, 0x00	; 0
    6ffa:	a9 01       	movw	r20, r18
    6ffc:	63 e0       	ldi	r22, 0x03	; 3
    6ffe:	80 91 99 0a 	lds	r24, 0x0A99	; 0x800a99 <xTStartCheckErrors_1>
    7002:	90 91 9a 0a 	lds	r25, 0x0A9A	; 0x800a9a <xTStartCheckErrors_1+0x1>
    7006:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckTrv_1 ) != pdFALSE )       xTimerStop(xTStartCheckTrv_1,1);
    700a:	80 91 fb 08 	lds	r24, 0x08FB	; 0x8008fb <xTStartCheckTrv_1>
    700e:	90 91 fc 08 	lds	r25, 0x08FC	; 0x8008fc <xTStartCheckTrv_1+0x1>
    7012:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7016:	88 23       	and	r24, r24
    7018:	81 f0       	breq	.+32     	; 0x703a <stop_timers+0x25e>
    701a:	c1 2c       	mov	r12, r1
    701c:	d1 2c       	mov	r13, r1
    701e:	76 01       	movw	r14, r12
    7020:	c3 94       	inc	r12
    7022:	00 e0       	ldi	r16, 0x00	; 0
    7024:	10 e0       	ldi	r17, 0x00	; 0
    7026:	20 e0       	ldi	r18, 0x00	; 0
    7028:	30 e0       	ldi	r19, 0x00	; 0
    702a:	a9 01       	movw	r20, r18
    702c:	63 e0       	ldi	r22, 0x03	; 3
    702e:	80 91 fb 08 	lds	r24, 0x08FB	; 0x8008fb <xTStartCheckTrv_1>
    7032:	90 91 fc 08 	lds	r25, 0x08FC	; 0x8008fc <xTStartCheckTrv_1+0x1>
    7036:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xComutateTrv_1 ) != pdFALSE )          xTimerStop(xComutateTrv_1,1);
    703a:	80 91 e7 08 	lds	r24, 0x08E7	; 0x8008e7 <xComutateTrv_1>
    703e:	90 91 e8 08 	lds	r25, 0x08E8	; 0x8008e8 <xComutateTrv_1+0x1>
    7042:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7046:	88 23       	and	r24, r24
    7048:	09 f4       	brne	.+2      	; 0x704c <stop_timers+0x270>
    704a:	1c c1       	rjmp	.+568    	; 0x7284 <stop_timers+0x4a8>
    704c:	c1 2c       	mov	r12, r1
    704e:	d1 2c       	mov	r13, r1
    7050:	76 01       	movw	r14, r12
    7052:	c3 94       	inc	r12
    7054:	00 e0       	ldi	r16, 0x00	; 0
    7056:	10 e0       	ldi	r17, 0x00	; 0
    7058:	20 e0       	ldi	r18, 0x00	; 0
    705a:	30 e0       	ldi	r19, 0x00	; 0
    705c:	a9 01       	movw	r20, r18
    705e:	63 e0       	ldi	r22, 0x03	; 3
    7060:	80 91 e7 08 	lds	r24, 0x08E7	; 0x8008e7 <xComutateTrv_1>
    7064:	90 91 e8 08 	lds	r25, 0x08E8	; 0x8008e8 <xComutateTrv_1+0x1>
    7068:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    706c:	0b c1       	rjmp	.+534    	; 0x7284 <stop_timers+0x4a8>
	}
	else if (comp->Index==2)
    706e:	02 97       	sbiw	r24, 0x02	; 2
    7070:	09 f0       	breq	.+2      	; 0x7074 <stop_timers+0x298>
    7072:	08 c1       	rjmp	.+528    	; 0x7284 <stop_timers+0x4a8>
	{
		if( xTimerIsTimerActive( xStartCompressor_2 ) != pdFALSE )      xTimerStop(xStartCompressor_2,1);
    7074:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <xStartCompressor_2>
    7078:	90 91 8b 0a 	lds	r25, 0x0A8B	; 0x800a8b <xStartCompressor_2+0x1>
    707c:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7080:	88 23       	and	r24, r24
    7082:	81 f0       	breq	.+32     	; 0x70a4 <stop_timers+0x2c8>
    7084:	c1 2c       	mov	r12, r1
    7086:	d1 2c       	mov	r13, r1
    7088:	76 01       	movw	r14, r12
    708a:	c3 94       	inc	r12
    708c:	00 e0       	ldi	r16, 0x00	; 0
    708e:	10 e0       	ldi	r17, 0x00	; 0
    7090:	20 e0       	ldi	r18, 0x00	; 0
    7092:	30 e0       	ldi	r19, 0x00	; 0
    7094:	a9 01       	movw	r20, r18
    7096:	63 e0       	ldi	r22, 0x03	; 3
    7098:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <xStartCompressor_2>
    709c:	90 91 8b 0a 	lds	r25, 0x0A8B	; 0x800a8b <xStartCompressor_2+0x1>
    70a0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartHeatPump_2 ) != pdFALSE )        xTimerStop(xStartHeatPump_2,1);
    70a4:	80 91 d8 09 	lds	r24, 0x09D8	; 0x8009d8 <xStartHeatPump_2>
    70a8:	90 91 d9 09 	lds	r25, 0x09D9	; 0x8009d9 <xStartHeatPump_2+0x1>
    70ac:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    70b0:	88 23       	and	r24, r24
    70b2:	81 f0       	breq	.+32     	; 0x70d4 <stop_timers+0x2f8>
    70b4:	c1 2c       	mov	r12, r1
    70b6:	d1 2c       	mov	r13, r1
    70b8:	76 01       	movw	r14, r12
    70ba:	c3 94       	inc	r12
    70bc:	00 e0       	ldi	r16, 0x00	; 0
    70be:	10 e0       	ldi	r17, 0x00	; 0
    70c0:	20 e0       	ldi	r18, 0x00	; 0
    70c2:	30 e0       	ldi	r19, 0x00	; 0
    70c4:	a9 01       	movw	r20, r18
    70c6:	63 e0       	ldi	r22, 0x03	; 3
    70c8:	80 91 d8 09 	lds	r24, 0x09D8	; 0x8009d8 <xStartHeatPump_2>
    70cc:	90 91 d9 09 	lds	r25, 0x09D9	; 0x8009d9 <xStartHeatPump_2+0x1>
    70d0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartRevValve_2 ) != pdFALSE )		xTimerStop(xStartRevValve_2,1);
    70d4:	80 91 62 0a 	lds	r24, 0x0A62	; 0x800a62 <xStartRevValve_2>
    70d8:	90 91 63 0a 	lds	r25, 0x0A63	; 0x800a63 <xStartRevValve_2+0x1>
    70dc:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    70e0:	88 23       	and	r24, r24
    70e2:	81 f0       	breq	.+32     	; 0x7104 <stop_timers+0x328>
    70e4:	c1 2c       	mov	r12, r1
    70e6:	d1 2c       	mov	r13, r1
    70e8:	76 01       	movw	r14, r12
    70ea:	c3 94       	inc	r12
    70ec:	00 e0       	ldi	r16, 0x00	; 0
    70ee:	10 e0       	ldi	r17, 0x00	; 0
    70f0:	20 e0       	ldi	r18, 0x00	; 0
    70f2:	30 e0       	ldi	r19, 0x00	; 0
    70f4:	a9 01       	movw	r20, r18
    70f6:	63 e0       	ldi	r22, 0x03	; 3
    70f8:	80 91 62 0a 	lds	r24, 0x0A62	; 0x800a62 <xStartRevValve_2>
    70fc:	90 91 63 0a 	lds	r25, 0x0A63	; 0x800a63 <xStartRevValve_2+0x1>
    7100:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevOne_2_time ) != pdFALSE )    xTimerStop(xSwitchRevOne_2_time,1);
    7104:	80 91 aa 0a 	lds	r24, 0x0AAA	; 0x800aaa <xSwitchRevOne_2_time>
    7108:	90 91 ab 0a 	lds	r25, 0x0AAB	; 0x800aab <xSwitchRevOne_2_time+0x1>
    710c:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7110:	88 23       	and	r24, r24
    7112:	81 f0       	breq	.+32     	; 0x7134 <stop_timers+0x358>
    7114:	c1 2c       	mov	r12, r1
    7116:	d1 2c       	mov	r13, r1
    7118:	76 01       	movw	r14, r12
    711a:	c3 94       	inc	r12
    711c:	00 e0       	ldi	r16, 0x00	; 0
    711e:	10 e0       	ldi	r17, 0x00	; 0
    7120:	20 e0       	ldi	r18, 0x00	; 0
    7122:	30 e0       	ldi	r19, 0x00	; 0
    7124:	a9 01       	movw	r20, r18
    7126:	63 e0       	ldi	r22, 0x03	; 3
    7128:	80 91 aa 0a 	lds	r24, 0x0AAA	; 0x800aaa <xSwitchRevOne_2_time>
    712c:	90 91 ab 0a 	lds	r25, 0x0AAB	; 0x800aab <xSwitchRevOne_2_time+0x1>
    7130:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevTwo_2_time ) != pdFALSE )	xTimerStop(xSwitchRevTwo_1_time,1);
    7134:	80 91 8f 0a 	lds	r24, 0x0A8F	; 0x800a8f <xSwitchRevTwo_2_time>
    7138:	90 91 90 0a 	lds	r25, 0x0A90	; 0x800a90 <xSwitchRevTwo_2_time+0x1>
    713c:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7140:	88 23       	and	r24, r24
    7142:	81 f0       	breq	.+32     	; 0x7164 <stop_timers+0x388>
    7144:	c1 2c       	mov	r12, r1
    7146:	d1 2c       	mov	r13, r1
    7148:	76 01       	movw	r14, r12
    714a:	c3 94       	inc	r12
    714c:	00 e0       	ldi	r16, 0x00	; 0
    714e:	10 e0       	ldi	r17, 0x00	; 0
    7150:	20 e0       	ldi	r18, 0x00	; 0
    7152:	30 e0       	ldi	r19, 0x00	; 0
    7154:	a9 01       	movw	r20, r18
    7156:	63 e0       	ldi	r22, 0x03	; 3
    7158:	80 91 74 0a 	lds	r24, 0x0A74	; 0x800a74 <xSwitchRevTwo_1_time>
    715c:	90 91 75 0a 	lds	r25, 0x0A75	; 0x800a75 <xSwitchRevTwo_1_time+0x1>
    7160:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopHeatPump_2 ) != pdFALSE )			xTimerStop(xStopHeatPump_2,1);
    7164:	80 91 68 0a 	lds	r24, 0x0A68	; 0x800a68 <xStopHeatPump_2>
    7168:	90 91 69 0a 	lds	r25, 0x0A69	; 0x800a69 <xStopHeatPump_2+0x1>
    716c:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7170:	88 23       	and	r24, r24
    7172:	81 f0       	breq	.+32     	; 0x7194 <stop_timers+0x3b8>
    7174:	c1 2c       	mov	r12, r1
    7176:	d1 2c       	mov	r13, r1
    7178:	76 01       	movw	r14, r12
    717a:	c3 94       	inc	r12
    717c:	00 e0       	ldi	r16, 0x00	; 0
    717e:	10 e0       	ldi	r17, 0x00	; 0
    7180:	20 e0       	ldi	r18, 0x00	; 0
    7182:	30 e0       	ldi	r19, 0x00	; 0
    7184:	a9 01       	movw	r20, r18
    7186:	63 e0       	ldi	r22, 0x03	; 3
    7188:	80 91 68 0a 	lds	r24, 0x0A68	; 0x800a68 <xStopHeatPump_2>
    718c:	90 91 69 0a 	lds	r25, 0x0A69	; 0x800a69 <xStopHeatPump_2+0x1>
    7190:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopRevValve_2 ) != pdFALSE )			xTimerStop(xStopRevValve_2,1);
    7194:	80 91 f7 08 	lds	r24, 0x08F7	; 0x8008f7 <xStopRevValve_2>
    7198:	90 91 f8 08 	lds	r25, 0x08F8	; 0x8008f8 <xStopRevValve_2+0x1>
    719c:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    71a0:	88 23       	and	r24, r24
    71a2:	81 f0       	breq	.+32     	; 0x71c4 <stop_timers+0x3e8>
    71a4:	c1 2c       	mov	r12, r1
    71a6:	d1 2c       	mov	r13, r1
    71a8:	76 01       	movw	r14, r12
    71aa:	c3 94       	inc	r12
    71ac:	00 e0       	ldi	r16, 0x00	; 0
    71ae:	10 e0       	ldi	r17, 0x00	; 0
    71b0:	20 e0       	ldi	r18, 0x00	; 0
    71b2:	30 e0       	ldi	r19, 0x00	; 0
    71b4:	a9 01       	movw	r20, r18
    71b6:	63 e0       	ldi	r22, 0x03	; 3
    71b8:	80 91 f7 08 	lds	r24, 0x08F7	; 0x8008f7 <xStopRevValve_2>
    71bc:	90 91 f8 08 	lds	r25, 0x08F8	; 0x8008f8 <xStopRevValve_2+0x1>
    71c0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopSource_2 ) != pdFALSE )			xTimerStop(xStopSource_2,1);
    71c4:	80 91 58 0a 	lds	r24, 0x0A58	; 0x800a58 <xStopSource_2>
    71c8:	90 91 59 0a 	lds	r25, 0x0A59	; 0x800a59 <xStopSource_2+0x1>
    71cc:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    71d0:	88 23       	and	r24, r24
    71d2:	81 f0       	breq	.+32     	; 0x71f4 <stop_timers+0x418>
    71d4:	c1 2c       	mov	r12, r1
    71d6:	d1 2c       	mov	r13, r1
    71d8:	76 01       	movw	r14, r12
    71da:	c3 94       	inc	r12
    71dc:	00 e0       	ldi	r16, 0x00	; 0
    71de:	10 e0       	ldi	r17, 0x00	; 0
    71e0:	20 e0       	ldi	r18, 0x00	; 0
    71e2:	30 e0       	ldi	r19, 0x00	; 0
    71e4:	a9 01       	movw	r20, r18
    71e6:	63 e0       	ldi	r22, 0x03	; 3
    71e8:	80 91 58 0a 	lds	r24, 0x0A58	; 0x800a58 <xStopSource_2>
    71ec:	90 91 59 0a 	lds	r25, 0x0A59	; 0x800a59 <xStopSource_2+0x1>
    71f0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckErrors_2 ) != pdFALSE )    xTimerStop(xTStartCheckErrors_2,1);
    71f4:	80 91 e9 08 	lds	r24, 0x08E9	; 0x8008e9 <xTStartCheckErrors_2>
    71f8:	90 91 ea 08 	lds	r25, 0x08EA	; 0x8008ea <xTStartCheckErrors_2+0x1>
    71fc:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7200:	88 23       	and	r24, r24
    7202:	81 f0       	breq	.+32     	; 0x7224 <stop_timers+0x448>
    7204:	c1 2c       	mov	r12, r1
    7206:	d1 2c       	mov	r13, r1
    7208:	76 01       	movw	r14, r12
    720a:	c3 94       	inc	r12
    720c:	00 e0       	ldi	r16, 0x00	; 0
    720e:	10 e0       	ldi	r17, 0x00	; 0
    7210:	20 e0       	ldi	r18, 0x00	; 0
    7212:	30 e0       	ldi	r19, 0x00	; 0
    7214:	a9 01       	movw	r20, r18
    7216:	63 e0       	ldi	r22, 0x03	; 3
    7218:	80 91 e9 08 	lds	r24, 0x08E9	; 0x8008e9 <xTStartCheckErrors_2>
    721c:	90 91 ea 08 	lds	r25, 0x08EA	; 0x8008ea <xTStartCheckErrors_2+0x1>
    7220:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckTrv_2 ) != pdFALSE )       xTimerStop(xTStartCheckTrv_2,1);
    7224:	80 91 d2 09 	lds	r24, 0x09D2	; 0x8009d2 <xTStartCheckTrv_2>
    7228:	90 91 d3 09 	lds	r25, 0x09D3	; 0x8009d3 <xTStartCheckTrv_2+0x1>
    722c:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7230:	88 23       	and	r24, r24
    7232:	81 f0       	breq	.+32     	; 0x7254 <stop_timers+0x478>
    7234:	c1 2c       	mov	r12, r1
    7236:	d1 2c       	mov	r13, r1
    7238:	76 01       	movw	r14, r12
    723a:	c3 94       	inc	r12
    723c:	00 e0       	ldi	r16, 0x00	; 0
    723e:	10 e0       	ldi	r17, 0x00	; 0
    7240:	20 e0       	ldi	r18, 0x00	; 0
    7242:	30 e0       	ldi	r19, 0x00	; 0
    7244:	a9 01       	movw	r20, r18
    7246:	63 e0       	ldi	r22, 0x03	; 3
    7248:	80 91 d2 09 	lds	r24, 0x09D2	; 0x8009d2 <xTStartCheckTrv_2>
    724c:	90 91 d3 09 	lds	r25, 0x09D3	; 0x8009d3 <xTStartCheckTrv_2+0x1>
    7250:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xComutateTrv_2 ) != pdFALSE )          xTimerStop(xComutateTrv_2,1);
    7254:	80 91 de 09 	lds	r24, 0x09DE	; 0x8009de <xComutateTrv_2>
    7258:	90 91 df 09 	lds	r25, 0x09DF	; 0x8009df <xComutateTrv_2+0x1>
    725c:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7260:	88 23       	and	r24, r24
    7262:	81 f0       	breq	.+32     	; 0x7284 <stop_timers+0x4a8>
    7264:	c1 2c       	mov	r12, r1
    7266:	d1 2c       	mov	r13, r1
    7268:	76 01       	movw	r14, r12
    726a:	c3 94       	inc	r12
    726c:	00 e0       	ldi	r16, 0x00	; 0
    726e:	10 e0       	ldi	r17, 0x00	; 0
    7270:	20 e0       	ldi	r18, 0x00	; 0
    7272:	30 e0       	ldi	r19, 0x00	; 0
    7274:	a9 01       	movw	r20, r18
    7276:	63 e0       	ldi	r22, 0x03	; 3
    7278:	80 91 de 09 	lds	r24, 0x09DE	; 0x8009de <xComutateTrv_2>
    727c:	90 91 df 09 	lds	r25, 0x09DF	; 0x8009df <xComutateTrv_2+0x1>
    7280:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
}
    7284:	1f 91       	pop	r17
    7286:	0f 91       	pop	r16
    7288:	ff 90       	pop	r15
    728a:	ef 90       	pop	r14
    728c:	df 90       	pop	r13
    728e:	cf 90       	pop	r12
    7290:	08 95       	ret

00007292 <Comp_Stop>:
	}
	
	
}
//-------------------------------------------------------------------------Stop mod
void Comp_Stop(xCompressor *comp){
    7292:	cf 92       	push	r12
    7294:	df 92       	push	r13
    7296:	ef 92       	push	r14
    7298:	ff 92       	push	r15
    729a:	0f 93       	push	r16
    729c:	1f 93       	push	r17
    729e:	cf 93       	push	r28
    72a0:	df 93       	push	r29
    72a2:	ec 01       	movw	r28, r24
	static time_t time_count_1;
	static time_t time_count_2;
	
	//xSerialxPrintf(&xSerial3Port,"StopCompressor\r\n");
	stop_timers(comp);
    72a4:	9b dd       	rcall	.-1226   	; 0x6ddc <stop_timers>
	comp->Cooling=comp->heatingWater=comp->Heating=false;
    72a6:	1a 82       	std	Y+2, r1	; 0x02
    72a8:	1c 82       	std	Y+4, r1	; 0x04
    72aa:	1b 82       	std	Y+3, r1	; 0x03
    comp->switchToMode=true;
    72ac:	81 e0       	ldi	r24, 0x01	; 1
    72ae:	88 83       	st	Y, r24
	if(comp->Index == 1)
    72b0:	fe 01       	movw	r30, r28
    72b2:	e2 59       	subi	r30, 0x92	; 146
    72b4:	ff 4f       	sbci	r31, 0xFF	; 255
    72b6:	80 81       	ld	r24, Z
    72b8:	91 81       	ldd	r25, Z+1	; 0x01
    72ba:	81 30       	cpi	r24, 0x01	; 1
    72bc:	91 05       	cpc	r25, r1
    72be:	09 f0       	breq	.+2      	; 0x72c2 <Comp_Stop+0x30>
    72c0:	6c c0       	rjmp	.+216    	; 0x739a <Comp_Stop+0x108>
	{
		if(PIN_COMPRESSOR_1 > 0)
    72c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    72c6:	85 ff       	sbrs	r24, 5
    72c8:	57 c0       	rjmp	.+174    	; 0x7378 <Comp_Stop+0xe6>
		{
			STOP_COMPRESSOR_1;
    72ca:	e2 e0       	ldi	r30, 0x02	; 2
    72cc:	f1 e0       	ldi	r31, 0x01	; 1
    72ce:	80 81       	ld	r24, Z
    72d0:	8f 7d       	andi	r24, 0xDF	; 223
    72d2:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopCompressor_1\r\n");
    72d4:	85 e5       	ldi	r24, 0x55	; 85
    72d6:	95 e0       	ldi	r25, 0x05	; 5
    72d8:	9f 93       	push	r25
    72da:	8f 93       	push	r24
    72dc:	80 ea       	ldi	r24, 0xA0	; 160
    72de:	97 e0       	ldi	r25, 0x07	; 7
    72e0:	9f 93       	push	r25
    72e2:	8f 93       	push	r24
    72e4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->checkErrors =false;
    72e8:	1d 82       	std	Y+5, r1	; 0x05
			
			comp->checkTrv =false;
    72ea:	19 82       	std	Y+1, r1	; 0x01
			comp->compOn=0;
    72ec:	1b 86       	std	Y+11, r1	; 0x0b
			time_count_1+= difftime(time(&current_time), timeStartComp_1);
    72ee:	c0 90 f1 08 	lds	r12, 0x08F1	; 0x8008f1 <timeStartComp_1>
    72f2:	d0 90 f2 08 	lds	r13, 0x08F2	; 0x8008f2 <timeStartComp_1+0x1>
    72f6:	e0 90 f3 08 	lds	r14, 0x08F3	; 0x8008f3 <timeStartComp_1+0x2>
    72fa:	f0 90 f4 08 	lds	r15, 0x08F4	; 0x8008f4 <timeStartComp_1+0x3>
    72fe:	8d ef       	ldi	r24, 0xFD	; 253
    7300:	98 e0       	ldi	r25, 0x08	; 8
    7302:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    7306:	a7 01       	movw	r20, r14
    7308:	96 01       	movw	r18, r12
    730a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    730e:	c0 90 3b 07 	lds	r12, 0x073B	; 0x80073b <time_count_1.3195>
    7312:	d0 90 3c 07 	lds	r13, 0x073C	; 0x80073c <time_count_1.3195+0x1>
    7316:	e0 90 3d 07 	lds	r14, 0x073D	; 0x80073d <time_count_1.3195+0x2>
    731a:	f0 90 3e 07 	lds	r15, 0x073E	; 0x80073e <time_count_1.3195+0x3>
    731e:	dc 01       	movw	r26, r24
    7320:	cb 01       	movw	r24, r22
    7322:	8c 0d       	add	r24, r12
    7324:	9d 1d       	adc	r25, r13
    7326:	ae 1d       	adc	r26, r14
    7328:	bf 1d       	adc	r27, r15
    732a:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <time_count_1.3195>
    732e:	90 93 3c 07 	sts	0x073C, r25	; 0x80073c <time_count_1.3195+0x1>
    7332:	a0 93 3d 07 	sts	0x073D, r26	; 0x80073d <time_count_1.3195+0x2>
    7336:	b0 93 3e 07 	sts	0x073E, r27	; 0x80073e <time_count_1.3195+0x3>
			
			//xSerialxPrintf(&xSerial3Port,"time_Compressor_=%d\r\n",time_count_1);
			if(time_count_1>ONE_HOUR){EEpromData.time_compressor_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    733a:	0f 90       	pop	r0
    733c:	0f 90       	pop	r0
    733e:	0f 90       	pop	r0
    7340:	0f 90       	pop	r0
    7342:	81 31       	cpi	r24, 0x11	; 17
    7344:	9e 40       	sbci	r25, 0x0E	; 14
    7346:	a1 05       	cpc	r26, r1
    7348:	b1 05       	cpc	r27, r1
    734a:	b0 f0       	brcs	.+44     	; 0x7378 <Comp_Stop+0xe6>
    734c:	e2 e0       	ldi	r30, 0x02	; 2
    734e:	f9 e0       	ldi	r31, 0x09	; 9
    7350:	82 ad       	ldd	r24, Z+58	; 0x3a
    7352:	93 ad       	ldd	r25, Z+59	; 0x3b
    7354:	01 96       	adiw	r24, 0x01	; 1
    7356:	93 af       	std	Z+59, r25	; 0x3b
    7358:	82 af       	std	Z+58, r24	; 0x3a
    735a:	40 e6       	ldi	r20, 0x60	; 96
    735c:	50 e0       	ldi	r21, 0x00	; 0
    735e:	60 e0       	ldi	r22, 0x00	; 0
    7360:	70 e0       	ldi	r23, 0x00	; 0
    7362:	cf 01       	movw	r24, r30
    7364:	0e 94 01 5e 	call	0xbc02	; 0xbc02 <eeprom_update_block>
    7368:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <time_count_1.3195>
    736c:	10 92 3c 07 	sts	0x073C, r1	; 0x80073c <time_count_1.3195+0x1>
    7370:	10 92 3d 07 	sts	0x073D, r1	; 0x80073d <time_count_1.3195+0x2>
    7374:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <time_count_1.3195+0x3>
			
		}
		xTimerStart(xSwitchRevOne_1_time, 0);
    7378:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    737c:	9b 01       	movw	r18, r22
    737e:	ac 01       	movw	r20, r24
    7380:	c1 2c       	mov	r12, r1
    7382:	d1 2c       	mov	r13, r1
    7384:	76 01       	movw	r14, r12
    7386:	00 e0       	ldi	r16, 0x00	; 0
    7388:	10 e0       	ldi	r17, 0x00	; 0
    738a:	61 e0       	ldi	r22, 0x01	; 1
    738c:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <xSwitchRevOne_1_time>
    7390:	90 91 f6 08 	lds	r25, 0x08F6	; 0x8008f6 <xSwitchRevOne_1_time+0x1>
    7394:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    7398:	71 c0       	rjmp	.+226    	; 0x747c <Comp_Stop+0x1ea>
		
	}
	else if(comp->Index == 2)
    739a:	02 97       	sbiw	r24, 0x02	; 2
    739c:	09 f0       	breq	.+2      	; 0x73a0 <Comp_Stop+0x10e>
    739e:	6e c0       	rjmp	.+220    	; 0x747c <Comp_Stop+0x1ea>
	{
		if(PIN_COMPRESSOR_2 > 0)
    73a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    73a4:	86 ff       	sbrs	r24, 6
    73a6:	5a c0       	rjmp	.+180    	; 0x745c <Comp_Stop+0x1ca>
		{
			
			STOP_COMPRESSOR_2;
    73a8:	e2 e0       	ldi	r30, 0x02	; 2
    73aa:	f1 e0       	ldi	r31, 0x01	; 1
    73ac:	80 81       	ld	r24, Z
    73ae:	8f 7b       	andi	r24, 0xBF	; 191
    73b0:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopCompressor_2\r\n");
    73b2:	88 e6       	ldi	r24, 0x68	; 104
    73b4:	95 e0       	ldi	r25, 0x05	; 5
    73b6:	9f 93       	push	r25
    73b8:	8f 93       	push	r24
    73ba:	80 ea       	ldi	r24, 0xA0	; 160
    73bc:	97 e0       	ldi	r25, 0x07	; 7
    73be:	9f 93       	push	r25
    73c0:	8f 93       	push	r24
    73c2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->checkErrors =false;
    73c6:	1d 82       	std	Y+5, r1	; 0x05
			comp->switchToMode=true;
    73c8:	81 e0       	ldi	r24, 0x01	; 1
    73ca:	88 83       	st	Y, r24
			comp->checkTrv =false;
    73cc:	19 82       	std	Y+1, r1	; 0x01
			comp->compOn=0;
    73ce:	1b 86       	std	Y+11, r1	; 0x0b
			time_count_2+= difftime(time(&current_time), timeStartComp_2);
    73d0:	c0 90 9b 0a 	lds	r12, 0x0A9B	; 0x800a9b <timeStartComp_2>
    73d4:	d0 90 9c 0a 	lds	r13, 0x0A9C	; 0x800a9c <timeStartComp_2+0x1>
    73d8:	e0 90 9d 0a 	lds	r14, 0x0A9D	; 0x800a9d <timeStartComp_2+0x2>
    73dc:	f0 90 9e 0a 	lds	r15, 0x0A9E	; 0x800a9e <timeStartComp_2+0x3>
    73e0:	8d ef       	ldi	r24, 0xFD	; 253
    73e2:	98 e0       	ldi	r25, 0x08	; 8
    73e4:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    73e8:	a7 01       	movw	r20, r14
    73ea:	96 01       	movw	r18, r12
    73ec:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    73f0:	c0 90 37 07 	lds	r12, 0x0737	; 0x800737 <time_count_2.3196>
    73f4:	d0 90 38 07 	lds	r13, 0x0738	; 0x800738 <time_count_2.3196+0x1>
    73f8:	e0 90 39 07 	lds	r14, 0x0739	; 0x800739 <time_count_2.3196+0x2>
    73fc:	f0 90 3a 07 	lds	r15, 0x073A	; 0x80073a <time_count_2.3196+0x3>
    7400:	dc 01       	movw	r26, r24
    7402:	cb 01       	movw	r24, r22
    7404:	8c 0d       	add	r24, r12
    7406:	9d 1d       	adc	r25, r13
    7408:	ae 1d       	adc	r26, r14
    740a:	bf 1d       	adc	r27, r15
    740c:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <time_count_2.3196>
    7410:	90 93 38 07 	sts	0x0738, r25	; 0x800738 <time_count_2.3196+0x1>
    7414:	a0 93 39 07 	sts	0x0739, r26	; 0x800739 <time_count_2.3196+0x2>
    7418:	b0 93 3a 07 	sts	0x073A, r27	; 0x80073a <time_count_2.3196+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_compressor_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    741c:	0f 90       	pop	r0
    741e:	0f 90       	pop	r0
    7420:	0f 90       	pop	r0
    7422:	0f 90       	pop	r0
    7424:	81 31       	cpi	r24, 0x11	; 17
    7426:	9e 40       	sbci	r25, 0x0E	; 14
    7428:	a1 05       	cpc	r26, r1
    742a:	b1 05       	cpc	r27, r1
    742c:	b8 f0       	brcs	.+46     	; 0x745c <Comp_Stop+0x1ca>
    742e:	e2 e5       	ldi	r30, 0x52	; 82
    7430:	f9 e0       	ldi	r31, 0x09	; 9
    7432:	80 81       	ld	r24, Z
    7434:	91 81       	ldd	r25, Z+1	; 0x01
    7436:	01 96       	adiw	r24, 0x01	; 1
    7438:	91 83       	std	Z+1, r25	; 0x01
    743a:	80 83       	st	Z, r24
    743c:	40 e6       	ldi	r20, 0x60	; 96
    743e:	50 e0       	ldi	r21, 0x00	; 0
    7440:	60 e0       	ldi	r22, 0x00	; 0
    7442:	70 e0       	ldi	r23, 0x00	; 0
    7444:	82 e0       	ldi	r24, 0x02	; 2
    7446:	99 e0       	ldi	r25, 0x09	; 9
    7448:	0e 94 01 5e 	call	0xbc02	; 0xbc02 <eeprom_update_block>
    744c:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <time_count_2.3196>
    7450:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <time_count_2.3196+0x1>
    7454:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <time_count_2.3196+0x2>
    7458:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <time_count_2.3196+0x3>
			
		}
		xTimerStart(xSwitchRevOne_2_time, 0);
    745c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    7460:	9b 01       	movw	r18, r22
    7462:	ac 01       	movw	r20, r24
    7464:	c1 2c       	mov	r12, r1
    7466:	d1 2c       	mov	r13, r1
    7468:	76 01       	movw	r14, r12
    746a:	00 e0       	ldi	r16, 0x00	; 0
    746c:	10 e0       	ldi	r17, 0x00	; 0
    746e:	61 e0       	ldi	r22, 0x01	; 1
    7470:	80 91 aa 0a 	lds	r24, 0x0AAA	; 0x800aaa <xSwitchRevOne_2_time>
    7474:	90 91 ab 0a 	lds	r25, 0x0AAB	; 0x800aab <xSwitchRevOne_2_time+0x1>
    7478:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
	
	
}
    747c:	df 91       	pop	r29
    747e:	cf 91       	pop	r28
    7480:	1f 91       	pop	r17
    7482:	0f 91       	pop	r16
    7484:	ff 90       	pop	r15
    7486:	ef 90       	pop	r14
    7488:	df 90       	pop	r13
    748a:	cf 90       	pop	r12
    748c:	08 95       	ret

0000748e <goToMode>:
	else return OFF;

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void goToMode(xCompressor *comp)
{   //calibration(comp);
    748e:	cf 93       	push	r28
    7490:	df 93       	push	r29
    7492:	ec 01       	movw	r28, r24
	stop_timers(comp);
    7494:	a3 dc       	rcall	.-1722   	; 0x6ddc <stop_timers>
	startTrvTimer(comp);
    7496:	ce 01       	movw	r24, r28
    7498:	0e 94 3a 52 	call	0xa474	; 0xa474 <startTrvTimer>
	//comp->switchToMode=true;
	
	StarSoursePump(comp);
    749c:	ce 01       	movw	r24, r28
    749e:	96 db       	rcall	.-2260   	; 0x6bcc <StarSoursePump>
	//Comp_1.Steps = Fuzzy(&Comp_1,EEpromData.trv_corection_1);
	
}
    74a0:	df 91       	pop	r29
    74a2:	cf 91       	pop	r28
    74a4:	08 95       	ret

000074a6 <mod_pump>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void mod_pump( xCompressor *comp,xEEdata* eeData){
    74a6:	2f 92       	push	r2
    74a8:	3f 92       	push	r3
    74aa:	4f 92       	push	r4
    74ac:	5f 92       	push	r5
    74ae:	6f 92       	push	r6
    74b0:	7f 92       	push	r7
    74b2:	8f 92       	push	r8
    74b4:	9f 92       	push	r9
    74b6:	af 92       	push	r10
    74b8:	bf 92       	push	r11
    74ba:	cf 92       	push	r12
    74bc:	df 92       	push	r13
    74be:	ef 92       	push	r14
    74c0:	ff 92       	push	r15
    74c2:	1f 93       	push	r17
    74c4:	cf 93       	push	r28
    74c6:	df 93       	push	r29
    74c8:	ec 01       	movw	r28, r24
    74ca:	1b 01       	movw	r2, r22

	uint8_t temp;
	temp = selmode(&EEpromData);
    74cc:	82 e0       	ldi	r24, 0x02	; 2
    74ce:	99 e0       	ldi	r25, 0x09	; 9
    74d0:	5c dc       	rcall	.-1864   	; 0x6d8a <selmode>
    74d2:	18 2f       	mov	r17, r24
	if(temp!=comp->modeOfPump ){comp->modeOfPump=temp; Comp_Stop(comp);}
    74d4:	88 89       	ldd	r24, Y+16	; 0x10
    74d6:	18 17       	cp	r17, r24
    74d8:	19 f0       	breq	.+6      	; 0x74e0 <mod_pump+0x3a>
    74da:	18 8b       	std	Y+16, r17	; 0x10
    74dc:	ce 01       	movw	r24, r28
    74de:	d9 de       	rcall	.-590    	; 0x7292 <Comp_Stop>

	switch(temp){
    74e0:	13 30       	cpi	r17, 0x03	; 3
    74e2:	09 f4       	brne	.+2      	; 0x74e6 <mod_pump+0x40>
    74e4:	c8 c0       	rjmp	.+400    	; 0x7676 <mod_pump+0x1d0>
    74e6:	30 f4       	brcc	.+12     	; 0x74f4 <mod_pump+0x4e>
    74e8:	11 30       	cpi	r17, 0x01	; 1
    74ea:	59 f0       	breq	.+22     	; 0x7502 <mod_pump+0x5c>
    74ec:	12 30       	cpi	r17, 0x02	; 2
    74ee:	09 f4       	brne	.+2      	; 0x74f2 <mod_pump+0x4c>
    74f0:	6a c0       	rjmp	.+212    	; 0x75c6 <mod_pump+0x120>
    74f2:	14 c5       	rjmp	.+2600   	; 0x7f1c <mod_pump+0xa76>
    74f4:	14 30       	cpi	r17, 0x04	; 4
    74f6:	09 f4       	brne	.+2      	; 0x74fa <mod_pump+0x54>
    74f8:	18 c1       	rjmp	.+560    	; 0x772a <mod_pump+0x284>
    74fa:	15 30       	cpi	r17, 0x05	; 5
    74fc:	09 f4       	brne	.+2      	; 0x7500 <mod_pump+0x5a>
    74fe:	62 c2       	rjmp	.+1220   	; 0x79c4 <mod_pump+0x51e>
    7500:	0d c5       	rjmp	.+2586   	; 0x7f1c <mod_pump+0xa76>
		case DHW: {
		if(comp->Index==1){
    7502:	fe 01       	movw	r30, r28
    7504:	e2 59       	subi	r30, 0x92	; 146
    7506:	ff 4f       	sbci	r31, 0xFF	; 255
    7508:	80 81       	ld	r24, Z
    750a:	91 81       	ldd	r25, Z+1	; 0x01
    750c:	01 97       	sbiw	r24, 0x01	; 1
    750e:	09 f0       	breq	.+2      	; 0x7512 <mod_pump+0x6c>
    7510:	05 c5       	rjmp	.+2570   	; 0x7f1c <mod_pump+0xa76>
			if ( comp->Dhw_Temp > eeData->Set_DHW && comp->heatingWater && !comp->switchToMode) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp);}
    7512:	8a 88       	ldd	r8, Y+18	; 0x12
    7514:	9b 88       	ldd	r9, Y+19	; 0x13
    7516:	ac 88       	ldd	r10, Y+20	; 0x14
    7518:	bd 88       	ldd	r11, Y+21	; 0x15
    751a:	f1 01       	movw	r30, r2
    751c:	e3 8c       	ldd	r14, Z+27	; 0x1b
    751e:	f1 2c       	mov	r15, r1
    7520:	b7 01       	movw	r22, r14
    7522:	0f 2c       	mov	r0, r15
    7524:	00 0c       	add	r0, r0
    7526:	88 0b       	sbc	r24, r24
    7528:	99 0b       	sbc	r25, r25
    752a:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    752e:	9b 01       	movw	r18, r22
    7530:	ac 01       	movw	r20, r24
    7532:	c5 01       	movw	r24, r10
    7534:	b4 01       	movw	r22, r8
    7536:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    753a:	18 16       	cp	r1, r24
    753c:	6c f4       	brge	.+26     	; 0x7558 <mod_pump+0xb2>
    753e:	8c 81       	ldd	r24, Y+4	; 0x04
    7540:	88 23       	and	r24, r24
    7542:	09 f4       	brne	.+2      	; 0x7546 <mod_pump+0xa0>
    7544:	82 c3       	rjmp	.+1796   	; 0x7c4a <mod_pump+0x7a4>
    7546:	88 81       	ld	r24, Y
    7548:	81 11       	cpse	r24, r1
    754a:	e8 c4       	rjmp	.+2512   	; 0x7f1c <mod_pump+0xa76>
    754c:	1c 82       	std	Y+4, r1	; 0x04
    754e:	ce 01       	movw	r24, r28
    7550:	a0 de       	rcall	.-704    	; 0x7292 <Comp_Stop>
    7552:	ce 01       	movw	r24, r28
    7554:	0e 94 72 52 	call	0xa4e4	; 0xa4e4 <stopTrvTimer>
			if ( comp->Dhw_Temp < (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->switchToMode){calibration(comp);Comp_1.error=0; comp->heatingWater=true; goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_Dhw\r\n");}//Start_Dhw();
    7558:	f1 01       	movw	r30, r2
    755a:	63 8d       	ldd	r22, Z+27	; 0x1b
    755c:	70 e0       	ldi	r23, 0x00	; 0
    755e:	86 8d       	ldd	r24, Z+30	; 0x1e
    7560:	68 1b       	sub	r22, r24
    7562:	71 09       	sbc	r23, r1
    7564:	07 2e       	mov	r0, r23
    7566:	00 0c       	add	r0, r0
    7568:	88 0b       	sbc	r24, r24
    756a:	99 0b       	sbc	r25, r25
    756c:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7570:	9b 01       	movw	r18, r22
    7572:	ac 01       	movw	r20, r24
    7574:	6a 89       	ldd	r22, Y+18	; 0x12
    7576:	7b 89       	ldd	r23, Y+19	; 0x13
    7578:	8c 89       	ldd	r24, Y+20	; 0x14
    757a:	9d 89       	ldd	r25, Y+21	; 0x15
    757c:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    7580:	88 23       	and	r24, r24
    7582:	0c f0       	brlt	.+2      	; 0x7586 <mod_pump+0xe0>
    7584:	cb c4       	rjmp	.+2454   	; 0x7f1c <mod_pump+0xa76>
    7586:	8c 81       	ldd	r24, Y+4	; 0x04
    7588:	81 11       	cpse	r24, r1
    758a:	c8 c4       	rjmp	.+2448   	; 0x7f1c <mod_pump+0xa76>
    758c:	88 81       	ld	r24, Y
    758e:	81 11       	cpse	r24, r1
    7590:	c5 c4       	rjmp	.+2442   	; 0x7f1c <mod_pump+0xa76>
    7592:	ce 01       	movw	r24, r28
    7594:	0e 94 9c 54 	call	0xa938	; 0xa938 <calibration>
    7598:	10 92 cf 09 	sts	0x09CF, r1	; 0x8009cf <Comp_1+0x6d>
    759c:	10 92 ce 09 	sts	0x09CE, r1	; 0x8009ce <Comp_1+0x6c>
    75a0:	81 e0       	ldi	r24, 0x01	; 1
    75a2:	8c 83       	std	Y+4, r24	; 0x04
    75a4:	ce 01       	movw	r24, r28
    75a6:	73 df       	rcall	.-282    	; 0x748e <goToMode>
    75a8:	8b e7       	ldi	r24, 0x7B	; 123
    75aa:	95 e0       	ldi	r25, 0x05	; 5
    75ac:	9f 93       	push	r25
    75ae:	8f 93       	push	r24
    75b0:	80 ea       	ldi	r24, 0xA0	; 160
    75b2:	97 e0       	ldi	r25, 0x07	; 7
    75b4:	9f 93       	push	r25
    75b6:	8f 93       	push	r24
    75b8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    75bc:	0f 90       	pop	r0
    75be:	0f 90       	pop	r0
    75c0:	0f 90       	pop	r0
    75c2:	0f 90       	pop	r0
    75c4:	ab c4       	rjmp	.+2390   	; 0x7f1c <mod_pump+0xa76>
		
		case HEAT:{
			//xSerialxPrintf(&xSerial3Port,"Set_Heating =%d\r\n,diffHEAT =%d\r\n,Bac_Temp =%f\r\n",eeData->Set_Heating,eeData->diffHEAT,data->Bac_Temp);
			//xSerialxPrintf(&xSerial3Port,"diffHEAT =%d\r\n",eeData->diffHEAT);
			//xSerialxPrintf(&xSerial3Port,"heat mode\r\n");
			if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {comp->Heating=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat\r\n");}
    75c6:	8e 88       	ldd	r8, Y+22	; 0x16
    75c8:	9f 88       	ldd	r9, Y+23	; 0x17
    75ca:	a8 8c       	ldd	r10, Y+24	; 0x18
    75cc:	b9 8c       	ldd	r11, Y+25	; 0x19
    75ce:	f1 01       	movw	r30, r2
    75d0:	e1 8c       	ldd	r14, Z+25	; 0x19
    75d2:	f1 2c       	mov	r15, r1
    75d4:	84 8d       	ldd	r24, Z+28	; 0x1c
    75d6:	b7 01       	movw	r22, r14
    75d8:	68 1b       	sub	r22, r24
    75da:	71 09       	sbc	r23, r1
    75dc:	07 2e       	mov	r0, r23
    75de:	00 0c       	add	r0, r0
    75e0:	88 0b       	sbc	r24, r24
    75e2:	99 0b       	sbc	r25, r25
    75e4:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    75e8:	9b 01       	movw	r18, r22
    75ea:	ac 01       	movw	r20, r24
    75ec:	c5 01       	movw	r24, r10
    75ee:	b4 01       	movw	r22, r8
    75f0:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    75f4:	88 23       	and	r24, r24
    75f6:	fc f4       	brge	.+62     	; 0x7636 <mod_pump+0x190>
    75f8:	8a 81       	ldd	r24, Y+2	; 0x02
    75fa:	81 11       	cpse	r24, r1
    75fc:	3b c3       	rjmp	.+1654   	; 0x7c74 <mod_pump+0x7ce>
    75fe:	88 81       	ld	r24, Y
    7600:	81 11       	cpse	r24, r1
    7602:	8c c4       	rjmp	.+2328   	; 0x7f1c <mod_pump+0xa76>
    7604:	81 e0       	ldi	r24, 0x01	; 1
    7606:	8a 83       	std	Y+2, r24	; 0x02
    7608:	ce 01       	movw	r24, r28
    760a:	0e 94 9c 54 	call	0xa938	; 0xa938 <calibration>
    760e:	10 92 cf 09 	sts	0x09CF, r1	; 0x8009cf <Comp_1+0x6d>
    7612:	10 92 ce 09 	sts	0x09CE, r1	; 0x8009ce <Comp_1+0x6c>
    7616:	ce 01       	movw	r24, r28
    7618:	3a df       	rcall	.-396    	; 0x748e <goToMode>
    761a:	87 e8       	ldi	r24, 0x87	; 135
    761c:	95 e0       	ldi	r25, 0x05	; 5
    761e:	9f 93       	push	r25
    7620:	8f 93       	push	r24
    7622:	80 ea       	ldi	r24, 0xA0	; 160
    7624:	97 e0       	ldi	r25, 0x07	; 7
    7626:	9f 93       	push	r25
    7628:	8f 93       	push	r24
    762a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    762e:	0f 90       	pop	r0
    7630:	0f 90       	pop	r0
    7632:	0f 90       	pop	r0
    7634:	0f 90       	pop	r0
			if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    7636:	f1 01       	movw	r30, r2
    7638:	61 8d       	ldd	r22, Z+25	; 0x19
    763a:	70 e0       	ldi	r23, 0x00	; 0
    763c:	80 e0       	ldi	r24, 0x00	; 0
    763e:	90 e0       	ldi	r25, 0x00	; 0
    7640:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7644:	9b 01       	movw	r18, r22
    7646:	ac 01       	movw	r20, r24
    7648:	6e 89       	ldd	r22, Y+22	; 0x16
    764a:	7f 89       	ldd	r23, Y+23	; 0x17
    764c:	88 8d       	ldd	r24, Y+24	; 0x18
    764e:	99 8d       	ldd	r25, Y+25	; 0x19
    7650:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    7654:	18 16       	cp	r1, r24
    7656:	0c f0       	brlt	.+2      	; 0x765a <mod_pump+0x1b4>
    7658:	61 c4       	rjmp	.+2242   	; 0x7f1c <mod_pump+0xa76>
    765a:	8a 81       	ldd	r24, Y+2	; 0x02
    765c:	88 23       	and	r24, r24
    765e:	09 f4       	brne	.+2      	; 0x7662 <mod_pump+0x1bc>
    7660:	5d c4       	rjmp	.+2234   	; 0x7f1c <mod_pump+0xa76>
    7662:	88 81       	ld	r24, Y
    7664:	81 11       	cpse	r24, r1
    7666:	5a c4       	rjmp	.+2228   	; 0x7f1c <mod_pump+0xa76>
    7668:	1a 82       	std	Y+2, r1	; 0x02
    766a:	ce 01       	movw	r24, r28
    766c:	12 de       	rcall	.-988    	; 0x7292 <Comp_Stop>
    766e:	ce 01       	movw	r24, r28
    7670:	0e 94 72 52 	call	0xa4e4	; 0xa4e4 <stopTrvTimer>
    7674:	53 c4       	rjmp	.+2214   	; 0x7f1c <mod_pump+0xa76>
		} break;
		
		case COOL:{
			//xSerialxPrintf(&xSerial3Port,"COOL mode\r\n");
			if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
    7676:	8e 88       	ldd	r8, Y+22	; 0x16
    7678:	9f 88       	ldd	r9, Y+23	; 0x17
    767a:	a8 8c       	ldd	r10, Y+24	; 0x18
    767c:	b9 8c       	ldd	r11, Y+25	; 0x19
    767e:	f1 01       	movw	r30, r2
    7680:	e2 8c       	ldd	r14, Z+26	; 0x1a
    7682:	f1 2c       	mov	r15, r1
    7684:	b7 01       	movw	r22, r14
    7686:	0f 2c       	mov	r0, r15
    7688:	00 0c       	add	r0, r0
    768a:	88 0b       	sbc	r24, r24
    768c:	99 0b       	sbc	r25, r25
    768e:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7692:	9b 01       	movw	r18, r22
    7694:	ac 01       	movw	r20, r24
    7696:	c5 01       	movw	r24, r10
    7698:	b4 01       	movw	r22, r8
    769a:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    769e:	88 23       	and	r24, r24
    76a0:	6c f4       	brge	.+26     	; 0x76bc <mod_pump+0x216>
    76a2:	8b 81       	ldd	r24, Y+3	; 0x03
    76a4:	88 23       	and	r24, r24
    76a6:	09 f4       	brne	.+2      	; 0x76aa <mod_pump+0x204>
    76a8:	f5 c2       	rjmp	.+1514   	; 0x7c94 <mod_pump+0x7ee>
    76aa:	88 81       	ld	r24, Y
    76ac:	81 11       	cpse	r24, r1
    76ae:	36 c4       	rjmp	.+2156   	; 0x7f1c <mod_pump+0xa76>
    76b0:	1b 82       	std	Y+3, r1	; 0x03
    76b2:	ce 01       	movw	r24, r28
    76b4:	ee dd       	rcall	.-1060   	; 0x7292 <Comp_Stop>
    76b6:	ce 01       	movw	r24, r28
    76b8:	0e 94 72 52 	call	0xa4e4	; 0xa4e4 <stopTrvTimer>
			if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {comp->Cooling=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool\r\n");}//
    76bc:	f1 01       	movw	r30, r2
    76be:	82 8d       	ldd	r24, Z+26	; 0x1a
    76c0:	65 8d       	ldd	r22, Z+29	; 0x1d
    76c2:	70 e0       	ldi	r23, 0x00	; 0
    76c4:	68 0f       	add	r22, r24
    76c6:	71 1d       	adc	r23, r1
    76c8:	07 2e       	mov	r0, r23
    76ca:	00 0c       	add	r0, r0
    76cc:	88 0b       	sbc	r24, r24
    76ce:	99 0b       	sbc	r25, r25
    76d0:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    76d4:	9b 01       	movw	r18, r22
    76d6:	ac 01       	movw	r20, r24
    76d8:	6e 89       	ldd	r22, Y+22	; 0x16
    76da:	7f 89       	ldd	r23, Y+23	; 0x17
    76dc:	88 8d       	ldd	r24, Y+24	; 0x18
    76de:	99 8d       	ldd	r25, Y+25	; 0x19
    76e0:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    76e4:	18 16       	cp	r1, r24
    76e6:	0c f0       	brlt	.+2      	; 0x76ea <mod_pump+0x244>
    76e8:	19 c4       	rjmp	.+2098   	; 0x7f1c <mod_pump+0xa76>
    76ea:	8b 81       	ldd	r24, Y+3	; 0x03
    76ec:	81 11       	cpse	r24, r1
    76ee:	16 c4       	rjmp	.+2092   	; 0x7f1c <mod_pump+0xa76>
    76f0:	88 81       	ld	r24, Y
    76f2:	81 11       	cpse	r24, r1
    76f4:	13 c4       	rjmp	.+2086   	; 0x7f1c <mod_pump+0xa76>
    76f6:	81 e0       	ldi	r24, 0x01	; 1
    76f8:	8b 83       	std	Y+3, r24	; 0x03
    76fa:	ce 01       	movw	r24, r28
    76fc:	0e 94 9c 54 	call	0xa938	; 0xa938 <calibration>
    7700:	10 92 cf 09 	sts	0x09CF, r1	; 0x8009cf <Comp_1+0x6d>
    7704:	10 92 ce 09 	sts	0x09CE, r1	; 0x8009ce <Comp_1+0x6c>
    7708:	ce 01       	movw	r24, r28
    770a:	c1 de       	rcall	.-638    	; 0x748e <goToMode>
    770c:	84 e9       	ldi	r24, 0x94	; 148
    770e:	95 e0       	ldi	r25, 0x05	; 5
    7710:	9f 93       	push	r25
    7712:	8f 93       	push	r24
    7714:	80 ea       	ldi	r24, 0xA0	; 160
    7716:	97 e0       	ldi	r25, 0x07	; 7
    7718:	9f 93       	push	r25
    771a:	8f 93       	push	r24
    771c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7720:	0f 90       	pop	r0
    7722:	0f 90       	pop	r0
    7724:	0f 90       	pop	r0
    7726:	0f 90       	pop	r0
    7728:	f9 c3       	rjmp	.+2034   	; 0x7f1c <mod_pump+0xa76>
		}break;
		
		case HEAT_DHW:
		
		{
			if(comp->Index==1)
    772a:	fe 01       	movw	r30, r28
    772c:	e2 59       	subi	r30, 0x92	; 146
    772e:	ff 4f       	sbci	r31, 0xFF	; 255
    7730:	80 81       	ld	r24, Z
    7732:	91 81       	ldd	r25, Z+1	; 0x01
    7734:	81 30       	cpi	r24, 0x01	; 1
    7736:	91 05       	cpc	r25, r1
    7738:	09 f0       	breq	.+2      	; 0x773c <mod_pump+0x296>
    773a:	ed c0       	rjmp	.+474    	; 0x7916 <mod_pump+0x470>
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
    773c:	8a 88       	ldd	r8, Y+18	; 0x12
    773e:	9b 88       	ldd	r9, Y+19	; 0x13
    7740:	ac 88       	ldd	r10, Y+20	; 0x14
    7742:	bd 88       	ldd	r11, Y+21	; 0x15
    7744:	f1 01       	movw	r30, r2
    7746:	e3 8c       	ldd	r14, Z+27	; 0x1b
    7748:	f1 2c       	mov	r15, r1
    774a:	86 8d       	ldd	r24, Z+30	; 0x1e
    774c:	b7 01       	movw	r22, r14
    774e:	68 1b       	sub	r22, r24
    7750:	71 09       	sbc	r23, r1
    7752:	07 2e       	mov	r0, r23
    7754:	00 0c       	add	r0, r0
    7756:	88 0b       	sbc	r24, r24
    7758:	99 0b       	sbc	r25, r25
    775a:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    775e:	9b 01       	movw	r18, r22
    7760:	ac 01       	movw	r20, r24
    7762:	c5 01       	movw	r24, r10
    7764:	b4 01       	movw	r22, r8
    7766:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    776a:	88 23       	and	r24, r24
    776c:	1c f5       	brge	.+70     	; 0x77b4 <mod_pump+0x30e>
    776e:	8c 81       	ldd	r24, Y+4	; 0x04
    7770:	81 11       	cpse	r24, r1
    7772:	3c c3       	rjmp	.+1656   	; 0x7dec <mod_pump+0x946>
    7774:	8a 81       	ldd	r24, Y+2	; 0x02
    7776:	81 11       	cpse	r24, r1
    7778:	a2 c2       	rjmp	.+1348   	; 0x7cbe <mod_pump+0x818>
    777a:	88 81       	ld	r24, Y
    777c:	81 11       	cpse	r24, r1
    777e:	98 c3       	rjmp	.+1840   	; 0x7eb0 <mod_pump+0xa0a>
    7780:	81 e0       	ldi	r24, 0x01	; 1
    7782:	8c 83       	std	Y+4, r24	; 0x04
    7784:	ce 01       	movw	r24, r28
    7786:	0e 94 9c 54 	call	0xa938	; 0xa938 <calibration>
    778a:	10 92 cf 09 	sts	0x09CF, r1	; 0x8009cf <Comp_1+0x6d>
    778e:	10 92 ce 09 	sts	0x09CE, r1	; 0x8009ce <Comp_1+0x6c>
    7792:	ce 01       	movw	r24, r28
    7794:	7c de       	rcall	.-776    	; 0x748e <goToMode>
    7796:	81 ea       	ldi	r24, 0xA1	; 161
    7798:	95 e0       	ldi	r25, 0x05	; 5
    779a:	9f 93       	push	r25
    779c:	8f 93       	push	r24
    779e:	80 ea       	ldi	r24, 0xA0	; 160
    77a0:	97 e0       	ldi	r25, 0x07	; 7
    77a2:	9f 93       	push	r25
    77a4:	8f 93       	push	r24
    77a6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    77aa:	0f 90       	pop	r0
    77ac:	0f 90       	pop	r0
    77ae:	0f 90       	pop	r0
    77b0:	0f 90       	pop	r0
    77b2:	76 c0       	rjmp	.+236    	; 0x78a0 <mod_pump+0x3fa>
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    77b4:	4e 88       	ldd	r4, Y+22	; 0x16
    77b6:	5f 88       	ldd	r5, Y+23	; 0x17
    77b8:	68 8c       	ldd	r6, Y+24	; 0x18
    77ba:	79 8c       	ldd	r7, Y+25	; 0x19
    77bc:	f1 01       	movw	r30, r2
    77be:	c1 8c       	ldd	r12, Z+25	; 0x19
    77c0:	d1 2c       	mov	r13, r1
    77c2:	84 8d       	ldd	r24, Z+28	; 0x1c
    77c4:	b6 01       	movw	r22, r12
    77c6:	68 1b       	sub	r22, r24
    77c8:	71 09       	sbc	r23, r1
    77ca:	07 2e       	mov	r0, r23
    77cc:	00 0c       	add	r0, r0
    77ce:	88 0b       	sbc	r24, r24
    77d0:	99 0b       	sbc	r25, r25
    77d2:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    77d6:	9b 01       	movw	r18, r22
    77d8:	ac 01       	movw	r20, r24
    77da:	c3 01       	movw	r24, r6
    77dc:	b2 01       	movw	r22, r4
    77de:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    77e2:	88 23       	and	r24, r24
    77e4:	1c f5       	brge	.+70     	; 0x782c <mod_pump+0x386>
    77e6:	8c 81       	ldd	r24, Y+4	; 0x04
    77e8:	81 11       	cpse	r24, r1
    77ea:	84 c2       	rjmp	.+1288   	; 0x7cf4 <mod_pump+0x84e>
    77ec:	8a 81       	ldd	r24, Y+2	; 0x02
    77ee:	81 11       	cpse	r24, r1
    77f0:	1d c0       	rjmp	.+58     	; 0x782c <mod_pump+0x386>
    77f2:	88 81       	ld	r24, Y
    77f4:	81 11       	cpse	r24, r1
    77f6:	1a c0       	rjmp	.+52     	; 0x782c <mod_pump+0x386>
    77f8:	ce 01       	movw	r24, r28
    77fa:	0e 94 9c 54 	call	0xa938	; 0xa938 <calibration>
    77fe:	10 92 cf 09 	sts	0x09CF, r1	; 0x8009cf <Comp_1+0x6d>
    7802:	10 92 ce 09 	sts	0x09CE, r1	; 0x8009ce <Comp_1+0x6c>
    7806:	81 e0       	ldi	r24, 0x01	; 1
    7808:	8a 83       	std	Y+2, r24	; 0x02
    780a:	ce 01       	movw	r24, r28
    780c:	40 de       	rcall	.-896    	; 0x748e <goToMode>
    780e:	8f ea       	ldi	r24, 0xAF	; 175
    7810:	95 e0       	ldi	r25, 0x05	; 5
    7812:	9f 93       	push	r25
    7814:	8f 93       	push	r24
    7816:	80 ea       	ldi	r24, 0xA0	; 160
    7818:	97 e0       	ldi	r25, 0x07	; 7
    781a:	9f 93       	push	r25
    781c:	8f 93       	push	r24
    781e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7822:	0f 90       	pop	r0
    7824:	0f 90       	pop	r0
    7826:	0f 90       	pop	r0
    7828:	0f 90       	pop	r0
    782a:	3a c0       	rjmp	.+116    	; 0x78a0 <mod_pump+0x3fa>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    782c:	b7 01       	movw	r22, r14
    782e:	ff 0c       	add	r15, r15
    7830:	88 0b       	sbc	r24, r24
    7832:	99 0b       	sbc	r25, r25
    7834:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7838:	9b 01       	movw	r18, r22
    783a:	ac 01       	movw	r20, r24
    783c:	c5 01       	movw	r24, r10
    783e:	b4 01       	movw	r22, r8
    7840:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    7844:	18 16       	cp	r1, r24
    7846:	8c f4       	brge	.+34     	; 0x786a <mod_pump+0x3c4>
    7848:	8c 81       	ldd	r24, Y+4	; 0x04
    784a:	88 23       	and	r24, r24
    784c:	09 f4       	brne	.+2      	; 0x7850 <mod_pump+0x3aa>
    784e:	62 c2       	rjmp	.+1220   	; 0x7d14 <mod_pump+0x86e>
    7850:	8a 81       	ldd	r24, Y+2	; 0x02
    7852:	81 11       	cpse	r24, r1
    7854:	25 c0       	rjmp	.+74     	; 0x78a0 <mod_pump+0x3fa>
    7856:	88 81       	ld	r24, Y
    7858:	81 11       	cpse	r24, r1
    785a:	22 c0       	rjmp	.+68     	; 0x78a0 <mod_pump+0x3fa>
    785c:	1c 82       	std	Y+4, r1	; 0x04
    785e:	ce 01       	movw	r24, r28
    7860:	18 dd       	rcall	.-1488   	; 0x7292 <Comp_Stop>
    7862:	ce 01       	movw	r24, r28
    7864:	0e 94 72 52 	call	0xa4e4	; 0xa4e4 <stopTrvTimer>
    7868:	1b c0       	rjmp	.+54     	; 0x78a0 <mod_pump+0x3fa>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    786a:	b6 01       	movw	r22, r12
    786c:	dd 0c       	add	r13, r13
    786e:	88 0b       	sbc	r24, r24
    7870:	99 0b       	sbc	r25, r25
    7872:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7876:	a3 01       	movw	r20, r6
    7878:	92 01       	movw	r18, r4
    787a:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    787e:	88 23       	and	r24, r24
    7880:	7c f4       	brge	.+30     	; 0x78a0 <mod_pump+0x3fa>
    7882:	8c 81       	ldd	r24, Y+4	; 0x04
    7884:	81 11       	cpse	r24, r1
    7886:	0c c0       	rjmp	.+24     	; 0x78a0 <mod_pump+0x3fa>
    7888:	8a 81       	ldd	r24, Y+2	; 0x02
    788a:	88 23       	and	r24, r24
    788c:	49 f0       	breq	.+18     	; 0x78a0 <mod_pump+0x3fa>
    788e:	88 81       	ld	r24, Y
    7890:	81 11       	cpse	r24, r1
    7892:	06 c0       	rjmp	.+12     	; 0x78a0 <mod_pump+0x3fa>
    7894:	1a 82       	std	Y+2, r1	; 0x02
    7896:	ce 01       	movw	r24, r28
    7898:	fc dc       	rcall	.-1544   	; 0x7292 <Comp_Stop>
    789a:	ce 01       	movw	r24, r28
    789c:	0e 94 72 52 	call	0xa4e4	; 0xa4e4 <stopTrvTimer>
				if(EEpromData.NombComp==2) if(comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW)&& !comp->heatingWater && comp->Heating && !comp->switchToMode){comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_again\r\n");}	
    78a0:	80 91 22 09 	lds	r24, 0x0922	; 0x800922 <EEpromData+0x20>
    78a4:	82 30       	cpi	r24, 0x02	; 2
    78a6:	09 f0       	breq	.+2      	; 0x78aa <mod_pump+0x404>
    78a8:	39 c3       	rjmp	.+1650   	; 0x7f1c <mod_pump+0xa76>
    78aa:	f1 01       	movw	r30, r2
    78ac:	63 8d       	ldd	r22, Z+27	; 0x1b
    78ae:	70 e0       	ldi	r23, 0x00	; 0
    78b0:	86 8d       	ldd	r24, Z+30	; 0x1e
    78b2:	68 1b       	sub	r22, r24
    78b4:	71 09       	sbc	r23, r1
    78b6:	07 2e       	mov	r0, r23
    78b8:	00 0c       	add	r0, r0
    78ba:	88 0b       	sbc	r24, r24
    78bc:	99 0b       	sbc	r25, r25
    78be:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    78c2:	9b 01       	movw	r18, r22
    78c4:	ac 01       	movw	r20, r24
    78c6:	6a 89       	ldd	r22, Y+18	; 0x12
    78c8:	7b 89       	ldd	r23, Y+19	; 0x13
    78ca:	8c 89       	ldd	r24, Y+20	; 0x14
    78cc:	9d 89       	ldd	r25, Y+21	; 0x15
    78ce:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    78d2:	88 23       	and	r24, r24
    78d4:	0c f0       	brlt	.+2      	; 0x78d8 <mod_pump+0x432>
    78d6:	22 c3       	rjmp	.+1604   	; 0x7f1c <mod_pump+0xa76>
    78d8:	8c 81       	ldd	r24, Y+4	; 0x04
    78da:	81 11       	cpse	r24, r1
    78dc:	1f c3       	rjmp	.+1598   	; 0x7f1c <mod_pump+0xa76>
    78de:	8a 81       	ldd	r24, Y+2	; 0x02
    78e0:	88 23       	and	r24, r24
    78e2:	09 f4       	brne	.+2      	; 0x78e6 <mod_pump+0x440>
    78e4:	1b c3       	rjmp	.+1590   	; 0x7f1c <mod_pump+0xa76>
    78e6:	88 81       	ld	r24, Y
    78e8:	81 11       	cpse	r24, r1
    78ea:	18 c3       	rjmp	.+1584   	; 0x7f1c <mod_pump+0xa76>
    78ec:	1a 82       	std	Y+2, r1	; 0x02
    78ee:	ce 01       	movw	r24, r28
    78f0:	d0 dc       	rcall	.-1632   	; 0x7292 <Comp_Stop>
    78f2:	ce 01       	movw	r24, r28
    78f4:	0e 94 72 52 	call	0xa4e4	; 0xa4e4 <stopTrvTimer>
    78f8:	8e eb       	ldi	r24, 0xBE	; 190
    78fa:	95 e0       	ldi	r25, 0x05	; 5
    78fc:	9f 93       	push	r25
    78fe:	8f 93       	push	r24
    7900:	80 ea       	ldi	r24, 0xA0	; 160
    7902:	97 e0       	ldi	r25, 0x07	; 7
    7904:	9f 93       	push	r25
    7906:	8f 93       	push	r24
    7908:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    790c:	0f 90       	pop	r0
    790e:	0f 90       	pop	r0
    7910:	0f 90       	pop	r0
    7912:	0f 90       	pop	r0
    7914:	03 c3       	rjmp	.+1542   	; 0x7f1c <mod_pump+0xa76>
			}
			else if(comp->Index==2)
    7916:	02 97       	sbiw	r24, 0x02	; 2
    7918:	09 f0       	breq	.+2      	; 0x791c <mod_pump+0x476>
    791a:	00 c3       	rjmp	.+1536   	; 0x7f1c <mod_pump+0xa76>
			{
				if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {calibration(comp);comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_2\r\n");}
    791c:	8e 88       	ldd	r8, Y+22	; 0x16
    791e:	9f 88       	ldd	r9, Y+23	; 0x17
    7920:	a8 8c       	ldd	r10, Y+24	; 0x18
    7922:	b9 8c       	ldd	r11, Y+25	; 0x19
    7924:	f1 01       	movw	r30, r2
    7926:	e1 8c       	ldd	r14, Z+25	; 0x19
    7928:	f1 2c       	mov	r15, r1
    792a:	84 8d       	ldd	r24, Z+28	; 0x1c
    792c:	b7 01       	movw	r22, r14
    792e:	68 1b       	sub	r22, r24
    7930:	71 09       	sbc	r23, r1
    7932:	07 2e       	mov	r0, r23
    7934:	00 0c       	add	r0, r0
    7936:	88 0b       	sbc	r24, r24
    7938:	99 0b       	sbc	r25, r25
    793a:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    793e:	9b 01       	movw	r18, r22
    7940:	ac 01       	movw	r20, r24
    7942:	c5 01       	movw	r24, r10
    7944:	b4 01       	movw	r22, r8
    7946:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    794a:	88 23       	and	r24, r24
    794c:	dc f4       	brge	.+54     	; 0x7984 <mod_pump+0x4de>
    794e:	8a 81       	ldd	r24, Y+2	; 0x02
    7950:	81 11       	cpse	r24, r1
    7952:	ee c1       	rjmp	.+988    	; 0x7d30 <mod_pump+0x88a>
    7954:	88 81       	ld	r24, Y
    7956:	81 11       	cpse	r24, r1
    7958:	e1 c2       	rjmp	.+1474   	; 0x7f1c <mod_pump+0xa76>
    795a:	ce 01       	movw	r24, r28
    795c:	0e 94 9c 54 	call	0xa938	; 0xa938 <calibration>
    7960:	81 e0       	ldi	r24, 0x01	; 1
    7962:	8a 83       	std	Y+2, r24	; 0x02
    7964:	ce 01       	movw	r24, r28
    7966:	93 dd       	rcall	.-1242   	; 0x748e <goToMode>
    7968:	80 ed       	ldi	r24, 0xD0	; 208
    796a:	95 e0       	ldi	r25, 0x05	; 5
    796c:	9f 93       	push	r25
    796e:	8f 93       	push	r24
    7970:	80 ea       	ldi	r24, 0xA0	; 160
    7972:	97 e0       	ldi	r25, 0x07	; 7
    7974:	9f 93       	push	r25
    7976:	8f 93       	push	r24
    7978:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    797c:	0f 90       	pop	r0
    797e:	0f 90       	pop	r0
    7980:	0f 90       	pop	r0
    7982:	0f 90       	pop	r0
				if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    7984:	f1 01       	movw	r30, r2
    7986:	61 8d       	ldd	r22, Z+25	; 0x19
    7988:	70 e0       	ldi	r23, 0x00	; 0
    798a:	80 e0       	ldi	r24, 0x00	; 0
    798c:	90 e0       	ldi	r25, 0x00	; 0
    798e:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7992:	9b 01       	movw	r18, r22
    7994:	ac 01       	movw	r20, r24
    7996:	6e 89       	ldd	r22, Y+22	; 0x16
    7998:	7f 89       	ldd	r23, Y+23	; 0x17
    799a:	88 8d       	ldd	r24, Y+24	; 0x18
    799c:	99 8d       	ldd	r25, Y+25	; 0x19
    799e:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    79a2:	18 16       	cp	r1, r24
    79a4:	0c f0       	brlt	.+2      	; 0x79a8 <mod_pump+0x502>
    79a6:	ba c2       	rjmp	.+1396   	; 0x7f1c <mod_pump+0xa76>
    79a8:	8a 81       	ldd	r24, Y+2	; 0x02
    79aa:	88 23       	and	r24, r24
    79ac:	09 f4       	brne	.+2      	; 0x79b0 <mod_pump+0x50a>
    79ae:	b6 c2       	rjmp	.+1388   	; 0x7f1c <mod_pump+0xa76>
    79b0:	88 81       	ld	r24, Y
    79b2:	81 11       	cpse	r24, r1
    79b4:	b3 c2       	rjmp	.+1382   	; 0x7f1c <mod_pump+0xa76>
    79b6:	1a 82       	std	Y+2, r1	; 0x02
    79b8:	ce 01       	movw	r24, r28
    79ba:	6b dc       	rcall	.-1834   	; 0x7292 <Comp_Stop>
    79bc:	ce 01       	movw	r24, r28
    79be:	0e 94 72 52 	call	0xa4e4	; 0xa4e4 <stopTrvTimer>
    79c2:	ac c2       	rjmp	.+1368   	; 0x7f1c <mod_pump+0xa76>
			
		}break;
		
		case COOL_DHW:
		{
			if(comp->Index==1)
    79c4:	fe 01       	movw	r30, r28
    79c6:	e2 59       	subi	r30, 0x92	; 146
    79c8:	ff 4f       	sbci	r31, 0xFF	; 255
    79ca:	80 81       	ld	r24, Z
    79cc:	91 81       	ldd	r25, Z+1	; 0x01
    79ce:	81 30       	cpi	r24, 0x01	; 1
    79d0:	91 05       	cpc	r25, r1
    79d2:	09 f0       	breq	.+2      	; 0x79d6 <mod_pump+0x530>
    79d4:	e1 c0       	rjmp	.+450    	; 0x7b98 <mod_pump+0x6f2>
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
    79d6:	8a 88       	ldd	r8, Y+18	; 0x12
    79d8:	9b 88       	ldd	r9, Y+19	; 0x13
    79da:	ac 88       	ldd	r10, Y+20	; 0x14
    79dc:	bd 88       	ldd	r11, Y+21	; 0x15
    79de:	f1 01       	movw	r30, r2
    79e0:	e3 8c       	ldd	r14, Z+27	; 0x1b
    79e2:	f1 2c       	mov	r15, r1
    79e4:	86 8d       	ldd	r24, Z+30	; 0x1e
    79e6:	b7 01       	movw	r22, r14
    79e8:	68 1b       	sub	r22, r24
    79ea:	71 09       	sbc	r23, r1
    79ec:	07 2e       	mov	r0, r23
    79ee:	00 0c       	add	r0, r0
    79f0:	88 0b       	sbc	r24, r24
    79f2:	99 0b       	sbc	r25, r25
    79f4:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    79f8:	9b 01       	movw	r18, r22
    79fa:	ac 01       	movw	r20, r24
    79fc:	c5 01       	movw	r24, r10
    79fe:	b4 01       	movw	r22, r8
    7a00:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    7a04:	88 23       	and	r24, r24
    7a06:	2c f5       	brge	.+74     	; 0x7a52 <mod_pump+0x5ac>
    7a08:	8c 81       	ldd	r24, Y+4	; 0x04
    7a0a:	81 11       	cpse	r24, r1
    7a0c:	21 c2       	rjmp	.+1090   	; 0x7e50 <mod_pump+0x9aa>
    7a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    7a10:	81 11       	cpse	r24, r1
    7a12:	9e c1       	rjmp	.+828    	; 0x7d50 <mod_pump+0x8aa>
    7a14:	88 81       	ld	r24, Y
    7a16:	81 11       	cpse	r24, r1
    7a18:	66 c2       	rjmp	.+1228   	; 0x7ee6 <mod_pump+0xa40>
    7a1a:	ff 24       	eor	r15, r15
    7a1c:	f3 94       	inc	r15
    7a1e:	fc 82       	std	Y+4, r15	; 0x04
    7a20:	ce 01       	movw	r24, r28
    7a22:	0e 94 9c 54 	call	0xa938	; 0xa938 <calibration>
    7a26:	10 92 cf 09 	sts	0x09CF, r1	; 0x8009cf <Comp_1+0x6d>
    7a2a:	10 92 ce 09 	sts	0x09CE, r1	; 0x8009ce <Comp_1+0x6c>
    7a2e:	fc 82       	std	Y+4, r15	; 0x04
    7a30:	ce 01       	movw	r24, r28
    7a32:	2d dd       	rcall	.-1446   	; 0x748e <goToMode>
    7a34:	8f ed       	ldi	r24, 0xDF	; 223
    7a36:	95 e0       	ldi	r25, 0x05	; 5
    7a38:	9f 93       	push	r25
    7a3a:	8f 93       	push	r24
    7a3c:	80 ea       	ldi	r24, 0xA0	; 160
    7a3e:	97 e0       	ldi	r25, 0x07	; 7
    7a40:	9f 93       	push	r25
    7a42:	8f 93       	push	r24
    7a44:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7a48:	0f 90       	pop	r0
    7a4a:	0f 90       	pop	r0
    7a4c:	0f 90       	pop	r0
    7a4e:	0f 90       	pop	r0
    7a50:	76 c0       	rjmp	.+236    	; 0x7b3e <mod_pump+0x698>
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7a52:	4e 88       	ldd	r4, Y+22	; 0x16
    7a54:	5f 88       	ldd	r5, Y+23	; 0x17
    7a56:	68 8c       	ldd	r6, Y+24	; 0x18
    7a58:	79 8c       	ldd	r7, Y+25	; 0x19
    7a5a:	f1 01       	movw	r30, r2
    7a5c:	c1 8c       	ldd	r12, Z+25	; 0x19
    7a5e:	d1 2c       	mov	r13, r1
    7a60:	84 8d       	ldd	r24, Z+28	; 0x1c
    7a62:	b6 01       	movw	r22, r12
    7a64:	68 1b       	sub	r22, r24
    7a66:	71 09       	sbc	r23, r1
    7a68:	07 2e       	mov	r0, r23
    7a6a:	00 0c       	add	r0, r0
    7a6c:	88 0b       	sbc	r24, r24
    7a6e:	99 0b       	sbc	r25, r25
    7a70:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7a74:	9b 01       	movw	r18, r22
    7a76:	ac 01       	movw	r20, r24
    7a78:	c3 01       	movw	r24, r6
    7a7a:	b2 01       	movw	r22, r4
    7a7c:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    7a80:	88 23       	and	r24, r24
    7a82:	1c f5       	brge	.+70     	; 0x7aca <mod_pump+0x624>
    7a84:	8c 81       	ldd	r24, Y+4	; 0x04
    7a86:	81 11       	cpse	r24, r1
    7a88:	7e c1       	rjmp	.+764    	; 0x7d86 <mod_pump+0x8e0>
    7a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    7a8c:	81 11       	cpse	r24, r1
    7a8e:	1d c0       	rjmp	.+58     	; 0x7aca <mod_pump+0x624>
    7a90:	88 81       	ld	r24, Y
    7a92:	81 11       	cpse	r24, r1
    7a94:	1a c0       	rjmp	.+52     	; 0x7aca <mod_pump+0x624>
    7a96:	ce 01       	movw	r24, r28
    7a98:	0e 94 9c 54 	call	0xa938	; 0xa938 <calibration>
    7a9c:	10 92 cf 09 	sts	0x09CF, r1	; 0x8009cf <Comp_1+0x6d>
    7aa0:	10 92 ce 09 	sts	0x09CE, r1	; 0x8009ce <Comp_1+0x6c>
    7aa4:	81 e0       	ldi	r24, 0x01	; 1
    7aa6:	8b 83       	std	Y+3, r24	; 0x03
    7aa8:	ce 01       	movw	r24, r28
    7aaa:	f1 dc       	rcall	.-1566   	; 0x748e <goToMode>
    7aac:	81 ef       	ldi	r24, 0xF1	; 241
    7aae:	95 e0       	ldi	r25, 0x05	; 5
    7ab0:	9f 93       	push	r25
    7ab2:	8f 93       	push	r24
    7ab4:	80 ea       	ldi	r24, 0xA0	; 160
    7ab6:	97 e0       	ldi	r25, 0x07	; 7
    7ab8:	9f 93       	push	r25
    7aba:	8f 93       	push	r24
    7abc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7ac0:	0f 90       	pop	r0
    7ac2:	0f 90       	pop	r0
    7ac4:	0f 90       	pop	r0
    7ac6:	0f 90       	pop	r0
    7ac8:	3a c0       	rjmp	.+116    	; 0x7b3e <mod_pump+0x698>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7aca:	b7 01       	movw	r22, r14
    7acc:	ff 0c       	add	r15, r15
    7ace:	88 0b       	sbc	r24, r24
    7ad0:	99 0b       	sbc	r25, r25
    7ad2:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7ad6:	9b 01       	movw	r18, r22
    7ad8:	ac 01       	movw	r20, r24
    7ada:	c5 01       	movw	r24, r10
    7adc:	b4 01       	movw	r22, r8
    7ade:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    7ae2:	18 16       	cp	r1, r24
    7ae4:	8c f4       	brge	.+34     	; 0x7b08 <mod_pump+0x662>
    7ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    7ae8:	88 23       	and	r24, r24
    7aea:	09 f4       	brne	.+2      	; 0x7aee <mod_pump+0x648>
    7aec:	5c c1       	rjmp	.+696    	; 0x7da6 <mod_pump+0x900>
    7aee:	8b 81       	ldd	r24, Y+3	; 0x03
    7af0:	81 11       	cpse	r24, r1
    7af2:	25 c0       	rjmp	.+74     	; 0x7b3e <mod_pump+0x698>
    7af4:	88 81       	ld	r24, Y
    7af6:	81 11       	cpse	r24, r1
    7af8:	22 c0       	rjmp	.+68     	; 0x7b3e <mod_pump+0x698>
    7afa:	1c 82       	std	Y+4, r1	; 0x04
    7afc:	ce 01       	movw	r24, r28
    7afe:	c9 db       	rcall	.-2158   	; 0x7292 <Comp_Stop>
    7b00:	ce 01       	movw	r24, r28
    7b02:	0e 94 72 52 	call	0xa4e4	; 0xa4e4 <stopTrvTimer>
    7b06:	1b c0       	rjmp	.+54     	; 0x7b3e <mod_pump+0x698>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7b08:	b6 01       	movw	r22, r12
    7b0a:	dd 0c       	add	r13, r13
    7b0c:	88 0b       	sbc	r24, r24
    7b0e:	99 0b       	sbc	r25, r25
    7b10:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7b14:	a3 01       	movw	r20, r6
    7b16:	92 01       	movw	r18, r4
    7b18:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    7b1c:	88 23       	and	r24, r24
    7b1e:	7c f4       	brge	.+30     	; 0x7b3e <mod_pump+0x698>
    7b20:	8c 81       	ldd	r24, Y+4	; 0x04
    7b22:	81 11       	cpse	r24, r1
    7b24:	0c c0       	rjmp	.+24     	; 0x7b3e <mod_pump+0x698>
    7b26:	8b 81       	ldd	r24, Y+3	; 0x03
    7b28:	88 23       	and	r24, r24
    7b2a:	49 f0       	breq	.+18     	; 0x7b3e <mod_pump+0x698>
    7b2c:	88 81       	ld	r24, Y
    7b2e:	81 11       	cpse	r24, r1
    7b30:	06 c0       	rjmp	.+12     	; 0x7b3e <mod_pump+0x698>
    7b32:	1b 82       	std	Y+3, r1	; 0x03
    7b34:	ce 01       	movw	r24, r28
    7b36:	ad db       	rcall	.-2214   	; 0x7292 <Comp_Stop>
    7b38:	ce 01       	movw	r24, r28
    7b3a:	0e 94 72 52 	call	0xa4e4	; 0xa4e4 <stopTrvTimer>
				if(EEpromData.NombComp==2) if (comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && comp->Cooling && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}	
    7b3e:	80 91 22 09 	lds	r24, 0x0922	; 0x800922 <EEpromData+0x20>
    7b42:	82 30       	cpi	r24, 0x02	; 2
    7b44:	09 f0       	breq	.+2      	; 0x7b48 <mod_pump+0x6a2>
    7b46:	ea c1       	rjmp	.+980    	; 0x7f1c <mod_pump+0xa76>
    7b48:	f1 01       	movw	r30, r2
    7b4a:	63 8d       	ldd	r22, Z+27	; 0x1b
    7b4c:	70 e0       	ldi	r23, 0x00	; 0
    7b4e:	86 8d       	ldd	r24, Z+30	; 0x1e
    7b50:	68 1b       	sub	r22, r24
    7b52:	71 09       	sbc	r23, r1
    7b54:	07 2e       	mov	r0, r23
    7b56:	00 0c       	add	r0, r0
    7b58:	88 0b       	sbc	r24, r24
    7b5a:	99 0b       	sbc	r25, r25
    7b5c:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7b60:	9b 01       	movw	r18, r22
    7b62:	ac 01       	movw	r20, r24
    7b64:	6a 89       	ldd	r22, Y+18	; 0x12
    7b66:	7b 89       	ldd	r23, Y+19	; 0x13
    7b68:	8c 89       	ldd	r24, Y+20	; 0x14
    7b6a:	9d 89       	ldd	r25, Y+21	; 0x15
    7b6c:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    7b70:	88 23       	and	r24, r24
    7b72:	0c f0       	brlt	.+2      	; 0x7b76 <mod_pump+0x6d0>
    7b74:	d3 c1       	rjmp	.+934    	; 0x7f1c <mod_pump+0xa76>
    7b76:	8c 81       	ldd	r24, Y+4	; 0x04
    7b78:	81 11       	cpse	r24, r1
    7b7a:	d0 c1       	rjmp	.+928    	; 0x7f1c <mod_pump+0xa76>
    7b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    7b7e:	88 23       	and	r24, r24
    7b80:	09 f4       	brne	.+2      	; 0x7b84 <mod_pump+0x6de>
    7b82:	cc c1       	rjmp	.+920    	; 0x7f1c <mod_pump+0xa76>
    7b84:	88 81       	ld	r24, Y
    7b86:	81 11       	cpse	r24, r1
    7b88:	c9 c1       	rjmp	.+914    	; 0x7f1c <mod_pump+0xa76>
    7b8a:	1b 82       	std	Y+3, r1	; 0x03
    7b8c:	ce 01       	movw	r24, r28
    7b8e:	81 db       	rcall	.-2302   	; 0x7292 <Comp_Stop>
    7b90:	ce 01       	movw	r24, r28
    7b92:	0e 94 72 52 	call	0xa4e4	; 0xa4e4 <stopTrvTimer>
    7b96:	c2 c1       	rjmp	.+900    	; 0x7f1c <mod_pump+0xa76>
			}
			else if(comp->Index==2)
    7b98:	02 97       	sbiw	r24, 0x02	; 2
    7b9a:	09 f0       	breq	.+2      	; 0x7b9e <mod_pump+0x6f8>
    7b9c:	bf c1       	rjmp	.+894    	; 0x7f1c <mod_pump+0xa76>
			{
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
    7b9e:	8e 88       	ldd	r8, Y+22	; 0x16
    7ba0:	9f 88       	ldd	r9, Y+23	; 0x17
    7ba2:	a8 8c       	ldd	r10, Y+24	; 0x18
    7ba4:	b9 8c       	ldd	r11, Y+25	; 0x19
    7ba6:	f1 01       	movw	r30, r2
    7ba8:	e2 8c       	ldd	r14, Z+26	; 0x1a
    7baa:	f1 2c       	mov	r15, r1
    7bac:	b7 01       	movw	r22, r14
    7bae:	0f 2c       	mov	r0, r15
    7bb0:	00 0c       	add	r0, r0
    7bb2:	88 0b       	sbc	r24, r24
    7bb4:	99 0b       	sbc	r25, r25
    7bb6:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7bba:	9b 01       	movw	r18, r22
    7bbc:	ac 01       	movw	r20, r24
    7bbe:	c5 01       	movw	r24, r10
    7bc0:	b4 01       	movw	r22, r8
    7bc2:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    7bc6:	88 23       	and	r24, r24
    7bc8:	6c f4       	brge	.+26     	; 0x7be4 <mod_pump+0x73e>
    7bca:	8b 81       	ldd	r24, Y+3	; 0x03
    7bcc:	88 23       	and	r24, r24
    7bce:	09 f4       	brne	.+2      	; 0x7bd2 <mod_pump+0x72c>
    7bd0:	f8 c0       	rjmp	.+496    	; 0x7dc2 <mod_pump+0x91c>
    7bd2:	88 81       	ld	r24, Y
    7bd4:	81 11       	cpse	r24, r1
    7bd6:	a2 c1       	rjmp	.+836    	; 0x7f1c <mod_pump+0xa76>
    7bd8:	1b 82       	std	Y+3, r1	; 0x03
    7bda:	ce 01       	movw	r24, r28
    7bdc:	5a db       	rcall	.-2380   	; 0x7292 <Comp_Stop>
    7bde:	ce 01       	movw	r24, r28
    7be0:	0e 94 72 52 	call	0xa4e4	; 0xa4e4 <stopTrvTimer>
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
    7be4:	f1 01       	movw	r30, r2
    7be6:	82 8d       	ldd	r24, Z+26	; 0x1a
    7be8:	65 8d       	ldd	r22, Z+29	; 0x1d
    7bea:	70 e0       	ldi	r23, 0x00	; 0
    7bec:	68 0f       	add	r22, r24
    7bee:	71 1d       	adc	r23, r1
    7bf0:	07 2e       	mov	r0, r23
    7bf2:	00 0c       	add	r0, r0
    7bf4:	88 0b       	sbc	r24, r24
    7bf6:	99 0b       	sbc	r25, r25
    7bf8:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7bfc:	9b 01       	movw	r18, r22
    7bfe:	ac 01       	movw	r20, r24
    7c00:	6e 89       	ldd	r22, Y+22	; 0x16
    7c02:	7f 89       	ldd	r23, Y+23	; 0x17
    7c04:	88 8d       	ldd	r24, Y+24	; 0x18
    7c06:	99 8d       	ldd	r25, Y+25	; 0x19
    7c08:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    7c0c:	18 16       	cp	r1, r24
    7c0e:	0c f0       	brlt	.+2      	; 0x7c12 <mod_pump+0x76c>
    7c10:	85 c1       	rjmp	.+778    	; 0x7f1c <mod_pump+0xa76>
    7c12:	8b 81       	ldd	r24, Y+3	; 0x03
    7c14:	81 11       	cpse	r24, r1
    7c16:	82 c1       	rjmp	.+772    	; 0x7f1c <mod_pump+0xa76>
    7c18:	88 81       	ld	r24, Y
    7c1a:	81 11       	cpse	r24, r1
    7c1c:	7f c1       	rjmp	.+766    	; 0x7f1c <mod_pump+0xa76>
    7c1e:	ce 01       	movw	r24, r28
    7c20:	0e 94 9c 54 	call	0xa938	; 0xa938 <calibration>
    7c24:	81 e0       	ldi	r24, 0x01	; 1
    7c26:	8b 83       	std	Y+3, r24	; 0x03
    7c28:	ce 01       	movw	r24, r28
    7c2a:	31 dc       	rcall	.-1950   	; 0x748e <goToMode>
    7c2c:	83 e0       	ldi	r24, 0x03	; 3
    7c2e:	96 e0       	ldi	r25, 0x06	; 6
    7c30:	9f 93       	push	r25
    7c32:	8f 93       	push	r24
    7c34:	80 ea       	ldi	r24, 0xA0	; 160
    7c36:	97 e0       	ldi	r25, 0x07	; 7
    7c38:	9f 93       	push	r25
    7c3a:	8f 93       	push	r24
    7c3c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7c40:	0f 90       	pop	r0
    7c42:	0f 90       	pop	r0
    7c44:	0f 90       	pop	r0
    7c46:	0f 90       	pop	r0
			}
		}break;
	}
}
    7c48:	69 c1       	rjmp	.+722    	; 0x7f1c <mod_pump+0xa76>

	switch(temp){
		case DHW: {
		if(comp->Index==1){
			if ( comp->Dhw_Temp > eeData->Set_DHW && comp->heatingWater && !comp->switchToMode) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp);}
			if ( comp->Dhw_Temp < (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->switchToMode){calibration(comp);Comp_1.error=0; comp->heatingWater=true; goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_Dhw\r\n");}//Start_Dhw();
    7c4a:	f1 01       	movw	r30, r2
    7c4c:	86 8d       	ldd	r24, Z+30	; 0x1e
    7c4e:	b7 01       	movw	r22, r14
    7c50:	68 1b       	sub	r22, r24
    7c52:	71 09       	sbc	r23, r1
    7c54:	07 2e       	mov	r0, r23
    7c56:	00 0c       	add	r0, r0
    7c58:	88 0b       	sbc	r24, r24
    7c5a:	99 0b       	sbc	r25, r25
    7c5c:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7c60:	9b 01       	movw	r18, r22
    7c62:	ac 01       	movw	r20, r24
    7c64:	c5 01       	movw	r24, r10
    7c66:	b4 01       	movw	r22, r8
    7c68:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    7c6c:	88 23       	and	r24, r24
    7c6e:	0c f4       	brge	.+2      	; 0x7c72 <mod_pump+0x7cc>
    7c70:	8d cc       	rjmp	.-1766   	; 0x758c <mod_pump+0xe6>
    7c72:	54 c1       	rjmp	.+680    	; 0x7f1c <mod_pump+0xa76>
		case HEAT:{
			//xSerialxPrintf(&xSerial3Port,"Set_Heating =%d\r\n,diffHEAT =%d\r\n,Bac_Temp =%f\r\n",eeData->Set_Heating,eeData->diffHEAT,data->Bac_Temp);
			//xSerialxPrintf(&xSerial3Port,"diffHEAT =%d\r\n",eeData->diffHEAT);
			//xSerialxPrintf(&xSerial3Port,"heat mode\r\n");
			if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {comp->Heating=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat\r\n");}
			if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    7c74:	b7 01       	movw	r22, r14
    7c76:	ff 0c       	add	r15, r15
    7c78:	88 0b       	sbc	r24, r24
    7c7a:	99 0b       	sbc	r25, r25
    7c7c:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7c80:	9b 01       	movw	r18, r22
    7c82:	ac 01       	movw	r20, r24
    7c84:	c5 01       	movw	r24, r10
    7c86:	b4 01       	movw	r22, r8
    7c88:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    7c8c:	18 16       	cp	r1, r24
    7c8e:	0c f4       	brge	.+2      	; 0x7c92 <mod_pump+0x7ec>
    7c90:	e8 cc       	rjmp	.-1584   	; 0x7662 <mod_pump+0x1bc>
    7c92:	44 c1       	rjmp	.+648    	; 0x7f1c <mod_pump+0xa76>
		} break;
		
		case COOL:{
			//xSerialxPrintf(&xSerial3Port,"COOL mode\r\n");
			if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
			if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {comp->Cooling=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool\r\n");}//
    7c94:	f1 01       	movw	r30, r2
    7c96:	85 8d       	ldd	r24, Z+29	; 0x1d
    7c98:	b7 01       	movw	r22, r14
    7c9a:	68 0f       	add	r22, r24
    7c9c:	71 1d       	adc	r23, r1
    7c9e:	07 2e       	mov	r0, r23
    7ca0:	00 0c       	add	r0, r0
    7ca2:	88 0b       	sbc	r24, r24
    7ca4:	99 0b       	sbc	r25, r25
    7ca6:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7caa:	9b 01       	movw	r18, r22
    7cac:	ac 01       	movw	r20, r24
    7cae:	c5 01       	movw	r24, r10
    7cb0:	b4 01       	movw	r22, r8
    7cb2:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    7cb6:	18 16       	cp	r1, r24
    7cb8:	0c f4       	brge	.+2      	; 0x7cbc <mod_pump+0x816>
    7cba:	1a cd       	rjmp	.-1484   	; 0x76f0 <mod_pump+0x24a>
    7cbc:	2f c1       	rjmp	.+606    	; 0x7f1c <mod_pump+0xa76>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    7cbe:	4e 88       	ldd	r4, Y+22	; 0x16
    7cc0:	5f 88       	ldd	r5, Y+23	; 0x17
    7cc2:	68 8c       	ldd	r6, Y+24	; 0x18
    7cc4:	79 8c       	ldd	r7, Y+25	; 0x19
    7cc6:	f1 01       	movw	r30, r2
    7cc8:	c1 8c       	ldd	r12, Z+25	; 0x19
    7cca:	d1 2c       	mov	r13, r1
    7ccc:	84 8d       	ldd	r24, Z+28	; 0x1c
    7cce:	b6 01       	movw	r22, r12
    7cd0:	68 1b       	sub	r22, r24
    7cd2:	71 09       	sbc	r23, r1
    7cd4:	07 2e       	mov	r0, r23
    7cd6:	00 0c       	add	r0, r0
    7cd8:	88 0b       	sbc	r24, r24
    7cda:	99 0b       	sbc	r25, r25
    7cdc:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7ce0:	9b 01       	movw	r18, r22
    7ce2:	ac 01       	movw	r20, r24
    7ce4:	c3 01       	movw	r24, r6
    7ce6:	b2 01       	movw	r22, r4
    7ce8:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    7cec:	88 23       	and	r24, r24
    7cee:	0c f4       	brge	.+2      	; 0x7cf2 <mod_pump+0x84c>
    7cf0:	7d cd       	rjmp	.-1286   	; 0x77ec <mod_pump+0x346>
    7cf2:	97 c0       	rjmp	.+302    	; 0x7e22 <mod_pump+0x97c>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7cf4:	b7 01       	movw	r22, r14
    7cf6:	ff 0c       	add	r15, r15
    7cf8:	88 0b       	sbc	r24, r24
    7cfa:	99 0b       	sbc	r25, r25
    7cfc:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7d00:	9b 01       	movw	r18, r22
    7d02:	ac 01       	movw	r20, r24
    7d04:	c5 01       	movw	r24, r10
    7d06:	b4 01       	movw	r22, r8
    7d08:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    7d0c:	18 16       	cp	r1, r24
    7d0e:	0c f4       	brge	.+2      	; 0x7d12 <mod_pump+0x86c>
    7d10:	9f cd       	rjmp	.-1218   	; 0x7850 <mod_pump+0x3aa>
    7d12:	97 c0       	rjmp	.+302    	; 0x7e42 <mod_pump+0x99c>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7d14:	b6 01       	movw	r22, r12
    7d16:	dd 0c       	add	r13, r13
    7d18:	88 0b       	sbc	r24, r24
    7d1a:	99 0b       	sbc	r25, r25
    7d1c:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7d20:	a3 01       	movw	r20, r6
    7d22:	92 01       	movw	r18, r4
    7d24:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    7d28:	88 23       	and	r24, r24
    7d2a:	0c f4       	brge	.+2      	; 0x7d2e <mod_pump+0x888>
    7d2c:	ad cd       	rjmp	.-1190   	; 0x7888 <mod_pump+0x3e2>
    7d2e:	b8 cd       	rjmp	.-1168   	; 0x78a0 <mod_pump+0x3fa>
				if(EEpromData.NombComp==2) if(comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW)&& !comp->heatingWater && comp->Heating && !comp->switchToMode){comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_again\r\n");}	
			}
			else if(comp->Index==2)
			{
				if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {calibration(comp);comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_2\r\n");}
				if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    7d30:	b7 01       	movw	r22, r14
    7d32:	ff 0c       	add	r15, r15
    7d34:	88 0b       	sbc	r24, r24
    7d36:	99 0b       	sbc	r25, r25
    7d38:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7d3c:	9b 01       	movw	r18, r22
    7d3e:	ac 01       	movw	r20, r24
    7d40:	c5 01       	movw	r24, r10
    7d42:	b4 01       	movw	r22, r8
    7d44:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    7d48:	18 16       	cp	r1, r24
    7d4a:	0c f4       	brge	.+2      	; 0x7d4e <mod_pump+0x8a8>
    7d4c:	31 ce       	rjmp	.-926    	; 0x79b0 <mod_pump+0x50a>
    7d4e:	e6 c0       	rjmp	.+460    	; 0x7f1c <mod_pump+0xa76>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7d50:	4e 88       	ldd	r4, Y+22	; 0x16
    7d52:	5f 88       	ldd	r5, Y+23	; 0x17
    7d54:	68 8c       	ldd	r6, Y+24	; 0x18
    7d56:	79 8c       	ldd	r7, Y+25	; 0x19
    7d58:	f1 01       	movw	r30, r2
    7d5a:	c1 8c       	ldd	r12, Z+25	; 0x19
    7d5c:	d1 2c       	mov	r13, r1
    7d5e:	84 8d       	ldd	r24, Z+28	; 0x1c
    7d60:	b6 01       	movw	r22, r12
    7d62:	68 1b       	sub	r22, r24
    7d64:	71 09       	sbc	r23, r1
    7d66:	07 2e       	mov	r0, r23
    7d68:	00 0c       	add	r0, r0
    7d6a:	88 0b       	sbc	r24, r24
    7d6c:	99 0b       	sbc	r25, r25
    7d6e:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7d72:	9b 01       	movw	r18, r22
    7d74:	ac 01       	movw	r20, r24
    7d76:	c3 01       	movw	r24, r6
    7d78:	b2 01       	movw	r22, r4
    7d7a:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    7d7e:	88 23       	and	r24, r24
    7d80:	0c f4       	brge	.+2      	; 0x7d84 <mod_pump+0x8de>
    7d82:	83 ce       	rjmp	.-762    	; 0x7a8a <mod_pump+0x5e4>
    7d84:	7e c0       	rjmp	.+252    	; 0x7e82 <mod_pump+0x9dc>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7d86:	b7 01       	movw	r22, r14
    7d88:	ff 0c       	add	r15, r15
    7d8a:	88 0b       	sbc	r24, r24
    7d8c:	99 0b       	sbc	r25, r25
    7d8e:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7d92:	9b 01       	movw	r18, r22
    7d94:	ac 01       	movw	r20, r24
    7d96:	c5 01       	movw	r24, r10
    7d98:	b4 01       	movw	r22, r8
    7d9a:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    7d9e:	18 16       	cp	r1, r24
    7da0:	0c f4       	brge	.+2      	; 0x7da4 <mod_pump+0x8fe>
    7da2:	a5 ce       	rjmp	.-694    	; 0x7aee <mod_pump+0x648>
    7da4:	7e c0       	rjmp	.+252    	; 0x7ea2 <mod_pump+0x9fc>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7da6:	b6 01       	movw	r22, r12
    7da8:	dd 0c       	add	r13, r13
    7daa:	88 0b       	sbc	r24, r24
    7dac:	99 0b       	sbc	r25, r25
    7dae:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7db2:	a3 01       	movw	r20, r6
    7db4:	92 01       	movw	r18, r4
    7db6:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    7dba:	88 23       	and	r24, r24
    7dbc:	0c f4       	brge	.+2      	; 0x7dc0 <mod_pump+0x91a>
    7dbe:	b3 ce       	rjmp	.-666    	; 0x7b26 <mod_pump+0x680>
    7dc0:	be ce       	rjmp	.-644    	; 0x7b3e <mod_pump+0x698>
				if(EEpromData.NombComp==2) if (comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && comp->Cooling && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}	
			}
			else if(comp->Index==2)
			{
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
    7dc2:	f1 01       	movw	r30, r2
    7dc4:	85 8d       	ldd	r24, Z+29	; 0x1d
    7dc6:	b7 01       	movw	r22, r14
    7dc8:	68 0f       	add	r22, r24
    7dca:	71 1d       	adc	r23, r1
    7dcc:	07 2e       	mov	r0, r23
    7dce:	00 0c       	add	r0, r0
    7dd0:	88 0b       	sbc	r24, r24
    7dd2:	99 0b       	sbc	r25, r25
    7dd4:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7dd8:	9b 01       	movw	r18, r22
    7dda:	ac 01       	movw	r20, r24
    7ddc:	c5 01       	movw	r24, r10
    7dde:	b4 01       	movw	r22, r8
    7de0:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    7de4:	18 16       	cp	r1, r24
    7de6:	0c f4       	brge	.+2      	; 0x7dea <mod_pump+0x944>
    7de8:	17 cf       	rjmp	.-466    	; 0x7c18 <mod_pump+0x772>
    7dea:	98 c0       	rjmp	.+304    	; 0x7f1c <mod_pump+0xa76>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    7dec:	4e 88       	ldd	r4, Y+22	; 0x16
    7dee:	5f 88       	ldd	r5, Y+23	; 0x17
    7df0:	68 8c       	ldd	r6, Y+24	; 0x18
    7df2:	79 8c       	ldd	r7, Y+25	; 0x19
    7df4:	f1 01       	movw	r30, r2
    7df6:	c1 8c       	ldd	r12, Z+25	; 0x19
    7df8:	d1 2c       	mov	r13, r1
    7dfa:	84 8d       	ldd	r24, Z+28	; 0x1c
    7dfc:	b6 01       	movw	r22, r12
    7dfe:	68 1b       	sub	r22, r24
    7e00:	71 09       	sbc	r23, r1
    7e02:	07 2e       	mov	r0, r23
    7e04:	00 0c       	add	r0, r0
    7e06:	88 0b       	sbc	r24, r24
    7e08:	99 0b       	sbc	r25, r25
    7e0a:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7e0e:	9b 01       	movw	r18, r22
    7e10:	ac 01       	movw	r20, r24
    7e12:	c3 01       	movw	r24, r6
    7e14:	b2 01       	movw	r22, r4
    7e16:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    7e1a:	88 23       	and	r24, r24
    7e1c:	0c f4       	brge	.+2      	; 0x7e20 <mod_pump+0x97a>
    7e1e:	6a cf       	rjmp	.-300    	; 0x7cf4 <mod_pump+0x84e>
    7e20:	05 cd       	rjmp	.-1526   	; 0x782c <mod_pump+0x386>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7e22:	b7 01       	movw	r22, r14
    7e24:	ff 0c       	add	r15, r15
    7e26:	88 0b       	sbc	r24, r24
    7e28:	99 0b       	sbc	r25, r25
    7e2a:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7e2e:	9b 01       	movw	r18, r22
    7e30:	ac 01       	movw	r20, r24
    7e32:	c5 01       	movw	r24, r10
    7e34:	b4 01       	movw	r22, r8
    7e36:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    7e3a:	18 16       	cp	r1, r24
    7e3c:	0c f4       	brge	.+2      	; 0x7e40 <mod_pump+0x99a>
    7e3e:	6a cf       	rjmp	.-300    	; 0x7d14 <mod_pump+0x86e>
    7e40:	14 cd       	rjmp	.-1496   	; 0x786a <mod_pump+0x3c4>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7e42:	b6 01       	movw	r22, r12
    7e44:	dd 0c       	add	r13, r13
    7e46:	88 0b       	sbc	r24, r24
    7e48:	99 0b       	sbc	r25, r25
    7e4a:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7e4e:	28 cd       	rjmp	.-1456   	; 0x78a0 <mod_pump+0x3fa>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7e50:	4e 88       	ldd	r4, Y+22	; 0x16
    7e52:	5f 88       	ldd	r5, Y+23	; 0x17
    7e54:	68 8c       	ldd	r6, Y+24	; 0x18
    7e56:	79 8c       	ldd	r7, Y+25	; 0x19
    7e58:	f1 01       	movw	r30, r2
    7e5a:	c1 8c       	ldd	r12, Z+25	; 0x19
    7e5c:	d1 2c       	mov	r13, r1
    7e5e:	84 8d       	ldd	r24, Z+28	; 0x1c
    7e60:	b6 01       	movw	r22, r12
    7e62:	68 1b       	sub	r22, r24
    7e64:	71 09       	sbc	r23, r1
    7e66:	07 2e       	mov	r0, r23
    7e68:	00 0c       	add	r0, r0
    7e6a:	88 0b       	sbc	r24, r24
    7e6c:	99 0b       	sbc	r25, r25
    7e6e:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7e72:	a3 01       	movw	r20, r6
    7e74:	92 01       	movw	r18, r4
    7e76:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    7e7a:	18 16       	cp	r1, r24
    7e7c:	0c f4       	brge	.+2      	; 0x7e80 <mod_pump+0x9da>
    7e7e:	83 cf       	rjmp	.-250    	; 0x7d86 <mod_pump+0x8e0>
    7e80:	24 ce       	rjmp	.-952    	; 0x7aca <mod_pump+0x624>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7e82:	b7 01       	movw	r22, r14
    7e84:	ff 0c       	add	r15, r15
    7e86:	88 0b       	sbc	r24, r24
    7e88:	99 0b       	sbc	r25, r25
    7e8a:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7e8e:	9b 01       	movw	r18, r22
    7e90:	ac 01       	movw	r20, r24
    7e92:	c5 01       	movw	r24, r10
    7e94:	b4 01       	movw	r22, r8
    7e96:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    7e9a:	18 16       	cp	r1, r24
    7e9c:	0c f4       	brge	.+2      	; 0x7ea0 <mod_pump+0x9fa>
    7e9e:	83 cf       	rjmp	.-250    	; 0x7da6 <mod_pump+0x900>
    7ea0:	33 ce       	rjmp	.-922    	; 0x7b08 <mod_pump+0x662>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7ea2:	b6 01       	movw	r22, r12
    7ea4:	dd 0c       	add	r13, r13
    7ea6:	88 0b       	sbc	r24, r24
    7ea8:	99 0b       	sbc	r25, r25
    7eaa:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7eae:	47 ce       	rjmp	.-882    	; 0x7b3e <mod_pump+0x698>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    7eb0:	4e 88       	ldd	r4, Y+22	; 0x16
    7eb2:	5f 88       	ldd	r5, Y+23	; 0x17
    7eb4:	68 8c       	ldd	r6, Y+24	; 0x18
    7eb6:	79 8c       	ldd	r7, Y+25	; 0x19
    7eb8:	f1 01       	movw	r30, r2
    7eba:	c1 8c       	ldd	r12, Z+25	; 0x19
    7ebc:	d1 2c       	mov	r13, r1
    7ebe:	84 8d       	ldd	r24, Z+28	; 0x1c
    7ec0:	b6 01       	movw	r22, r12
    7ec2:	68 1b       	sub	r22, r24
    7ec4:	71 09       	sbc	r23, r1
    7ec6:	07 2e       	mov	r0, r23
    7ec8:	00 0c       	add	r0, r0
    7eca:	88 0b       	sbc	r24, r24
    7ecc:	99 0b       	sbc	r25, r25
    7ece:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7ed2:	9b 01       	movw	r18, r22
    7ed4:	ac 01       	movw	r20, r24
    7ed6:	c3 01       	movw	r24, r6
    7ed8:	b2 01       	movw	r22, r4
    7eda:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    7ede:	88 23       	and	r24, r24
    7ee0:	0c f4       	brge	.+2      	; 0x7ee4 <mod_pump+0xa3e>
    7ee2:	87 cc       	rjmp	.-1778   	; 0x77f2 <mod_pump+0x34c>
    7ee4:	9e cf       	rjmp	.-196    	; 0x7e22 <mod_pump+0x97c>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7ee6:	4e 88       	ldd	r4, Y+22	; 0x16
    7ee8:	5f 88       	ldd	r5, Y+23	; 0x17
    7eea:	68 8c       	ldd	r6, Y+24	; 0x18
    7eec:	79 8c       	ldd	r7, Y+25	; 0x19
    7eee:	f1 01       	movw	r30, r2
    7ef0:	c1 8c       	ldd	r12, Z+25	; 0x19
    7ef2:	d1 2c       	mov	r13, r1
    7ef4:	84 8d       	ldd	r24, Z+28	; 0x1c
    7ef6:	b6 01       	movw	r22, r12
    7ef8:	68 1b       	sub	r22, r24
    7efa:	71 09       	sbc	r23, r1
    7efc:	07 2e       	mov	r0, r23
    7efe:	00 0c       	add	r0, r0
    7f00:	88 0b       	sbc	r24, r24
    7f02:	99 0b       	sbc	r25, r25
    7f04:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    7f08:	9b 01       	movw	r18, r22
    7f0a:	ac 01       	movw	r20, r24
    7f0c:	c3 01       	movw	r24, r6
    7f0e:	b2 01       	movw	r22, r4
    7f10:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    7f14:	88 23       	and	r24, r24
    7f16:	0c f4       	brge	.+2      	; 0x7f1a <mod_pump+0xa74>
    7f18:	bb cd       	rjmp	.-1162   	; 0x7a90 <mod_pump+0x5ea>
    7f1a:	b3 cf       	rjmp	.-154    	; 0x7e82 <mod_pump+0x9dc>
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
			}
		}break;
	}
}
    7f1c:	df 91       	pop	r29
    7f1e:	cf 91       	pop	r28
    7f20:	1f 91       	pop	r17
    7f22:	ff 90       	pop	r15
    7f24:	ef 90       	pop	r14
    7f26:	df 90       	pop	r13
    7f28:	cf 90       	pop	r12
    7f2a:	bf 90       	pop	r11
    7f2c:	af 90       	pop	r10
    7f2e:	9f 90       	pop	r9
    7f30:	8f 90       	pop	r8
    7f32:	7f 90       	pop	r7
    7f34:	6f 90       	pop	r6
    7f36:	5f 90       	pop	r5
    7f38:	4f 90       	pop	r4
    7f3a:	3f 90       	pop	r3
    7f3c:	2f 90       	pop	r2
    7f3e:	08 95       	ret

00007f40 <initPins>:
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void initPins()
{

	DDRG |= (_BV(PG4) | _BV(PG3));
    7f40:	83 b3       	in	r24, 0x13	; 19
    7f42:	88 61       	ori	r24, 0x18	; 24
    7f44:	83 bb       	out	0x13, r24	; 19
	DDRH |= (_BV(PH7) | _BV(PH6) | _BV(PH5) | _BV(PH4) | _BV(PH3) | _BV(PH1) | _BV(PH2));
    7f46:	e1 e0       	ldi	r30, 0x01	; 1
    7f48:	f1 e0       	ldi	r31, 0x01	; 1
    7f4a:	80 81       	ld	r24, Z
    7f4c:	8e 6f       	ori	r24, 0xFE	; 254
    7f4e:	80 83       	st	Z, r24
	DDRL |= (_BV(PL2) | _BV(PL1) | _BV(PL0));
    7f50:	ea e0       	ldi	r30, 0x0A	; 10
    7f52:	f1 e0       	ldi	r31, 0x01	; 1
    7f54:	80 81       	ld	r24, Z
    7f56:	87 60       	ori	r24, 0x07	; 7
    7f58:	80 83       	st	Z, r24
	DDRD &= (_BV(PD2) | _BV(PD3));
    7f5a:	8a b1       	in	r24, 0x0a	; 10
    7f5c:	8c 70       	andi	r24, 0x0C	; 12
    7f5e:	8a b9       	out	0x0a, r24	; 10
	DDRE &= (_BV(PE5));
    7f60:	8d b1       	in	r24, 0x0d	; 13
    7f62:	80 72       	andi	r24, 0x20	; 32
    7f64:	8d b9       	out	0x0d, r24	; 13
	DDRA = 0xFF;
    7f66:	8f ef       	ldi	r24, 0xFF	; 255
    7f68:	81 b9       	out	0x01, r24	; 1
	PORTD|= (_BV(PD2) | _BV(PD3));
    7f6a:	8b b1       	in	r24, 0x0b	; 11
    7f6c:	8c 60       	ori	r24, 0x0C	; 12
    7f6e:	8b b9       	out	0x0b, r24	; 11
	PORTE|= (_BV(PE5));
    7f70:	75 9a       	sbi	0x0e, 5	; 14
	
    DDRJ|= (_BV(PIN_rs485));
    7f72:	e4 e0       	ldi	r30, 0x04	; 4
    7f74:	f1 e0       	ldi	r31, 0x01	; 1
    7f76:	80 81       	ld	r24, Z
    7f78:	84 60       	ori	r24, 0x04	; 4
    7f7a:	80 83       	st	Z, r24
    7f7c:	08 95       	ret

00007f7e <ConvertToTemp>:
	return (ADC_value - Low_Limit_HP) * HP_max/ (Hi_Limit_HP - Low_Limit_HP);
}

float ConvertToLowPress(uint16_t ADC_value){
	return (ADC_value - Low_Limit_LP) * LP_max/ (Hi_Limit_LP - Low_Limit_LP) ;
}
    7f7e:	8f 92       	push	r8
    7f80:	9f 92       	push	r9
    7f82:	af 92       	push	r10
    7f84:	bf 92       	push	r11
    7f86:	cf 92       	push	r12
    7f88:	df 92       	push	r13
    7f8a:	ef 92       	push	r14
    7f8c:	ff 92       	push	r15
    7f8e:	bc 01       	movw	r22, r24
    7f90:	80 e0       	ldi	r24, 0x00	; 0
    7f92:	90 e0       	ldi	r25, 0x00	; 0
    7f94:	0e 94 ad 55 	call	0xab5a	; 0xab5a <__floatunsisf>
    7f98:	9b 01       	movw	r18, r22
    7f9a:	ac 01       	movw	r20, r24
    7f9c:	60 e0       	ldi	r22, 0x00	; 0
    7f9e:	70 ec       	ldi	r23, 0xC0	; 192
    7fa0:	8f e7       	ldi	r24, 0x7F	; 127
    7fa2:	94 e4       	ldi	r25, 0x44	; 68
    7fa4:	0e 94 14 55 	call	0xaa28	; 0xaa28 <__divsf3>
    7fa8:	20 e0       	ldi	r18, 0x00	; 0
    7faa:	30 e0       	ldi	r19, 0x00	; 0
    7fac:	40 e8       	ldi	r20, 0x80	; 128
    7fae:	5f e3       	ldi	r21, 0x3F	; 63
    7fb0:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    7fb4:	20 e0       	ldi	r18, 0x00	; 0
    7fb6:	30 e4       	ldi	r19, 0x40	; 64
    7fb8:	4c e1       	ldi	r20, 0x1C	; 28
    7fba:	56 e4       	ldi	r21, 0x46	; 70
    7fbc:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    7fc0:	0e 94 68 56 	call	0xacd0	; 0xacd0 <log>
    7fc4:	6b 01       	movw	r12, r22
    7fc6:	7c 01       	movw	r14, r24
    7fc8:	29 e5       	ldi	r18, 0x59	; 89
    7fca:	37 e4       	ldi	r19, 0x47	; 71
    7fcc:	4c eb       	ldi	r20, 0xBC	; 188
    7fce:	53 e3       	ldi	r21, 0x33	; 51
    7fd0:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    7fd4:	a7 01       	movw	r20, r14
    7fd6:	96 01       	movw	r18, r12
    7fd8:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    7fdc:	a7 01       	movw	r20, r14
    7fde:	96 01       	movw	r18, r12
    7fe0:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    7fe4:	4b 01       	movw	r8, r22
    7fe6:	5c 01       	movw	r10, r24
    7fe8:	2b e0       	ldi	r18, 0x0B	; 11
    7fea:	31 ee       	ldi	r19, 0xE1	; 225
    7fec:	45 e7       	ldi	r20, 0x75	; 117
    7fee:	59 e3       	ldi	r21, 0x39	; 57
    7ff0:	c7 01       	movw	r24, r14
    7ff2:	b6 01       	movw	r22, r12
    7ff4:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    7ff8:	29 ed       	ldi	r18, 0xD9	; 217
    7ffa:	3d ea       	ldi	r19, 0xAD	; 173
    7ffc:	49 ea       	ldi	r20, 0xA9	; 169
    7ffe:	5a e3       	ldi	r21, 0x3A	; 58
    8000:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8004:	9b 01       	movw	r18, r22
    8006:	ac 01       	movw	r20, r24
    8008:	c5 01       	movw	r24, r10
    800a:	b4 01       	movw	r22, r8
    800c:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8010:	9b 01       	movw	r18, r22
    8012:	ac 01       	movw	r20, r24
    8014:	60 e0       	ldi	r22, 0x00	; 0
    8016:	70 e0       	ldi	r23, 0x00	; 0
    8018:	80 e8       	ldi	r24, 0x80	; 128
    801a:	9f e3       	ldi	r25, 0x3F	; 63
    801c:	0e 94 14 55 	call	0xaa28	; 0xaa28 <__divsf3>
    8020:	23 e3       	ldi	r18, 0x33	; 51
    8022:	33 e9       	ldi	r19, 0x93	; 147
    8024:	48 e8       	ldi	r20, 0x88	; 136
    8026:	53 e4       	ldi	r21, 0x43	; 67
    8028:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    802c:	ff 90       	pop	r15
    802e:	ef 90       	pop	r14
    8030:	df 90       	pop	r13
    8032:	cf 90       	pop	r12
    8034:	bf 90       	pop	r11
    8036:	af 90       	pop	r10
    8038:	9f 90       	pop	r9
    803a:	8f 90       	pop	r8
    803c:	08 95       	ret

0000803e <ReadSuperHeat>:
					}

return;	
}

float  ReadSuperHeat (xCompressor *comp){
    803e:	4f 92       	push	r4
    8040:	5f 92       	push	r5
    8042:	6f 92       	push	r6
    8044:	7f 92       	push	r7
    8046:	8f 92       	push	r8
    8048:	9f 92       	push	r9
    804a:	af 92       	push	r10
    804c:	bf 92       	push	r11
    804e:	cf 92       	push	r12
    8050:	df 92       	push	r13
    8052:	ef 92       	push	r14
    8054:	ff 92       	push	r15
    8056:	cf 93       	push	r28
    8058:	df 93       	push	r29
    805a:	ec 01       	movw	r28, r24
	float Val, Next_val, Span, Saturation_Temp, decimals, work;
	int I;
	work = ((comp->Low_Press - 1.0) / 1.0);
    805c:	20 e0       	ldi	r18, 0x00	; 0
    805e:	30 e0       	ldi	r19, 0x00	; 0
    8060:	40 e8       	ldi	r20, 0x80	; 128
    8062:	5f e3       	ldi	r21, 0x3F	; 63
    8064:	6e 8d       	ldd	r22, Y+30	; 0x1e
    8066:	7f 8d       	ldd	r23, Y+31	; 0x1f
    8068:	88 a1       	ldd	r24, Y+32	; 0x20
    806a:	99 a1       	ldd	r25, Y+33	; 0x21
    806c:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    8070:	4b 01       	movw	r8, r22
    8072:	5c 01       	movw	r10, r24
	I = work;                                //drop decimals to get array index
    8074:	0e 94 7c 55 	call	0xaaf8	; 0xaaf8 <__fixsfsi>
	decimals = work - I; //restore decimals for interpolation between array points
	Val = pgm_read_float(&R22_Saturation_Temp[I]);           //get array value
    8078:	fb 01       	movw	r30, r22
    807a:	ee 0f       	add	r30, r30
    807c:	ff 1f       	adc	r31, r31
    807e:	ee 0f       	add	r30, r30
    8080:	ff 1f       	adc	r31, r31
    8082:	e0 51       	subi	r30, 0x10	; 16
    8084:	f6 4f       	sbci	r31, 0xF6	; 246
    8086:	c5 90       	lpm	r12, Z+
    8088:	d5 90       	lpm	r13, Z+
    808a:	e5 90       	lpm	r14, Z+
    808c:	f4 90       	lpm	r15, Z
	Next_val = pgm_read_float(&R22_Saturation_Temp[I + 1]);  //get Next array value
    808e:	fb 01       	movw	r30, r22
    8090:	31 96       	adiw	r30, 0x01	; 1
    8092:	ee 0f       	add	r30, r30
    8094:	ff 1f       	adc	r31, r31
    8096:	ee 0f       	add	r30, r30
    8098:	ff 1f       	adc	r31, r31
    809a:	e0 51       	subi	r30, 0x10	; 16
    809c:	f6 4f       	sbci	r31, 0xF6	; 246
    809e:	45 90       	lpm	r4, Z+
    80a0:	55 90       	lpm	r5, Z+
    80a2:	65 90       	lpm	r6, Z+
    80a4:	74 90       	lpm	r7, Z
	Span = Next_val - Val;                  //Calc Span
	Saturation_Temp = Val + (Span * decimals);//interpolate between array points
		
	return(comp->Suc_Comp - Saturation_Temp);// Suct_T - Saturation_Temp;
    80a6:	ee 96       	adiw	r28, 0x3e	; 62
    80a8:	07 2e       	mov	r0, r23
    80aa:	00 0c       	add	r0, r0
    80ac:	88 0b       	sbc	r24, r24
    80ae:	99 0b       	sbc	r25, r25
    80b0:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    80b4:	9b 01       	movw	r18, r22
    80b6:	ac 01       	movw	r20, r24
    80b8:	c5 01       	movw	r24, r10
    80ba:	b4 01       	movw	r22, r8
    80bc:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    80c0:	4b 01       	movw	r8, r22
    80c2:	5c 01       	movw	r10, r24
    80c4:	a7 01       	movw	r20, r14
    80c6:	96 01       	movw	r18, r12
    80c8:	c3 01       	movw	r24, r6
    80ca:	b2 01       	movw	r22, r4
    80cc:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    80d0:	9b 01       	movw	r18, r22
    80d2:	ac 01       	movw	r20, r24
    80d4:	c5 01       	movw	r24, r10
    80d6:	b4 01       	movw	r22, r8
    80d8:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    80dc:	a7 01       	movw	r20, r14
    80de:	96 01       	movw	r18, r12
    80e0:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    80e4:	9b 01       	movw	r18, r22
    80e6:	ac 01       	movw	r20, r24
    80e8:	68 81       	ld	r22, Y
    80ea:	79 81       	ldd	r23, Y+1	; 0x01
    80ec:	8a 81       	ldd	r24, Y+2	; 0x02
    80ee:	9b 81       	ldd	r25, Y+3	; 0x03
    80f0:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>

}
    80f4:	df 91       	pop	r29
    80f6:	cf 91       	pop	r28
    80f8:	ff 90       	pop	r15
    80fa:	ef 90       	pop	r14
    80fc:	df 90       	pop	r13
    80fe:	cf 90       	pop	r12
    8100:	bf 90       	pop	r11
    8102:	af 90       	pop	r10
    8104:	9f 90       	pop	r9
    8106:	8f 90       	pop	r8
    8108:	7f 90       	pop	r7
    810a:	6f 90       	pop	r6
    810c:	5f 90       	pop	r5
    810e:	4f 90       	pop	r4
    8110:	08 95       	ret

00008112 <ReadSuperCool>:
float ReadSuperCool (xCompressor *comp){
    8112:	4f 92       	push	r4
    8114:	5f 92       	push	r5
    8116:	6f 92       	push	r6
    8118:	7f 92       	push	r7
    811a:	8f 92       	push	r8
    811c:	9f 92       	push	r9
    811e:	af 92       	push	r10
    8120:	bf 92       	push	r11
    8122:	cf 92       	push	r12
    8124:	df 92       	push	r13
    8126:	ef 92       	push	r14
    8128:	ff 92       	push	r15
    812a:	cf 93       	push	r28
    812c:	df 93       	push	r29
    812e:	ec 01       	movw	r28, r24
	float Val, Next_val, Span, Saturation_Temp, decimals, work;
	int I;
	work = ((comp->High_Press - 1.0) / 1.0);
    8130:	20 e0       	ldi	r18, 0x00	; 0
    8132:	30 e0       	ldi	r19, 0x00	; 0
    8134:	40 e8       	ldi	r20, 0x80	; 128
    8136:	5f e3       	ldi	r21, 0x3F	; 63
    8138:	6a 8d       	ldd	r22, Y+26	; 0x1a
    813a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    813c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    813e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    8140:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    8144:	4b 01       	movw	r8, r22
    8146:	5c 01       	movw	r10, r24

	I = work;                                //drop decimals to get array index
    8148:	0e 94 7c 55 	call	0xaaf8	; 0xaaf8 <__fixsfsi>

	decimals = work - I; //restore decimals for interpolation between array points
	Val = pgm_read_float(&R22_Saturation_Temp[I]);           //get array value
    814c:	fb 01       	movw	r30, r22
    814e:	ee 0f       	add	r30, r30
    8150:	ff 1f       	adc	r31, r31
    8152:	ee 0f       	add	r30, r30
    8154:	ff 1f       	adc	r31, r31
    8156:	e0 51       	subi	r30, 0x10	; 16
    8158:	f6 4f       	sbci	r31, 0xF6	; 246
    815a:	c5 90       	lpm	r12, Z+
    815c:	d5 90       	lpm	r13, Z+
    815e:	e5 90       	lpm	r14, Z+
    8160:	f4 90       	lpm	r15, Z
	Next_val = pgm_read_float(&R22_Saturation_Temp[I + 1]);  //get Next array value
    8162:	fb 01       	movw	r30, r22
    8164:	31 96       	adiw	r30, 0x01	; 1
    8166:	ee 0f       	add	r30, r30
    8168:	ff 1f       	adc	r31, r31
    816a:	ee 0f       	add	r30, r30
    816c:	ff 1f       	adc	r31, r31
    816e:	e0 51       	subi	r30, 0x10	; 16
    8170:	f6 4f       	sbci	r31, 0xF6	; 246
    8172:	45 90       	lpm	r4, Z+
    8174:	55 90       	lpm	r5, Z+
    8176:	65 90       	lpm	r6, Z+
    8178:	74 90       	lpm	r7, Z
	Span = Next_val - Val;                   //Calc Span
	Saturation_Temp = Val + (Span * decimals);//interpolate between array points
	
    return(Saturation_Temp - comp->Cond_Temp);// Suct_T - Saturation_Temp;	
    817a:	07 2e       	mov	r0, r23
    817c:	00 0c       	add	r0, r0
    817e:	88 0b       	sbc	r24, r24
    8180:	99 0b       	sbc	r25, r25
    8182:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    8186:	9b 01       	movw	r18, r22
    8188:	ac 01       	movw	r20, r24
    818a:	c5 01       	movw	r24, r10
    818c:	b4 01       	movw	r22, r8
    818e:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    8192:	4b 01       	movw	r8, r22
    8194:	5c 01       	movw	r10, r24
    8196:	a7 01       	movw	r20, r14
    8198:	96 01       	movw	r18, r12
    819a:	c3 01       	movw	r24, r6
    819c:	b2 01       	movw	r22, r4
    819e:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    81a2:	9b 01       	movw	r18, r22
    81a4:	ac 01       	movw	r20, r24
    81a6:	c5 01       	movw	r24, r10
    81a8:	b4 01       	movw	r22, r8
    81aa:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    81ae:	a7 01       	movw	r20, r14
    81b0:	96 01       	movw	r18, r12
    81b2:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    81b6:	ce 5b       	subi	r28, 0xBE	; 190
    81b8:	df 4f       	sbci	r29, 0xFF	; 255
    81ba:	28 81       	ld	r18, Y
    81bc:	39 81       	ldd	r19, Y+1	; 0x01
    81be:	4a 81       	ldd	r20, Y+2	; 0x02
    81c0:	5b 81       	ldd	r21, Y+3	; 0x03
    81c2:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
}
    81c6:	df 91       	pop	r29
    81c8:	cf 91       	pop	r28
    81ca:	ff 90       	pop	r15
    81cc:	ef 90       	pop	r14
    81ce:	df 90       	pop	r13
    81d0:	cf 90       	pop	r12
    81d2:	bf 90       	pop	r11
    81d4:	af 90       	pop	r10
    81d6:	9f 90       	pop	r9
    81d8:	8f 90       	pop	r8
    81da:	7f 90       	pop	r7
    81dc:	6f 90       	pop	r6
    81de:	5f 90       	pop	r5
    81e0:	4f 90       	pop	r4
    81e2:	08 95       	ret

000081e4 <corectTrv>:
//-------------------------------------------------------------
float  corectTrv(xCompressor *comp){
    81e4:	4f 92       	push	r4
    81e6:	5f 92       	push	r5
    81e8:	6f 92       	push	r6
    81ea:	7f 92       	push	r7
    81ec:	8f 92       	push	r8
    81ee:	9f 92       	push	r9
    81f0:	af 92       	push	r10
    81f2:	bf 92       	push	r11
    81f4:	cf 92       	push	r12
    81f6:	df 92       	push	r13
    81f8:	ef 92       	push	r14
    81fa:	ff 92       	push	r15
    81fc:	cf 93       	push	r28
    81fe:	df 93       	push	r29
	static float Superheat_old=0;
	int SSet;
	float ds;
	float Superheat;
	Superheat=comp->SuperHeat;
    8200:	8a 5b       	subi	r24, 0xBA	; 186
    8202:	9f 4f       	sbci	r25, 0xFF	; 255
    8204:	fc 01       	movw	r30, r24
    8206:	c0 80       	ld	r12, Z
    8208:	d1 80       	ldd	r13, Z+1	; 0x01
    820a:	e2 80       	ldd	r14, Z+2	; 0x02
    820c:	f3 80       	ldd	r15, Z+3	; 0x03
	ds = Superheat - Superheat_old; // calculate the change in Superheat
    820e:	20 91 4b 07 	lds	r18, 0x074B	; 0x80074b <Superheat_old.3257>
    8212:	30 91 4c 07 	lds	r19, 0x074C	; 0x80074c <Superheat_old.3257+0x1>
    8216:	40 91 4d 07 	lds	r20, 0x074D	; 0x80074d <Superheat_old.3257+0x2>
    821a:	50 91 4e 07 	lds	r21, 0x074E	; 0x80074e <Superheat_old.3257+0x3>
    821e:	c7 01       	movw	r24, r14
    8220:	b6 01       	movw	r22, r12
    8222:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
	ds = ds * 2; // scaling factor for DS
    8226:	9b 01       	movw	r18, r22
    8228:	ac 01       	movw	r20, r24
    822a:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    822e:	4b 01       	movw	r8, r22
    8230:	5c 01       	movw	r10, r24
	SSet=7;

	// Variable sampling rate --------------------------------------------
	int  k = 1; // Gain for the steps

	if ( Superheat - SSet > 3)
    8232:	20 e0       	ldi	r18, 0x00	; 0
    8234:	30 e0       	ldi	r19, 0x00	; 0
    8236:	40 ee       	ldi	r20, 0xE0	; 224
    8238:	50 e4       	ldi	r21, 0x40	; 64
    823a:	c7 01       	movw	r24, r14
    823c:	b6 01       	movw	r22, r12
    823e:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    8242:	2b 01       	movw	r4, r22
    8244:	3c 01       	movw	r6, r24
    8246:	20 e0       	ldi	r18, 0x00	; 0
    8248:	30 e0       	ldi	r19, 0x00	; 0
    824a:	40 e4       	ldi	r20, 0x40	; 64
    824c:	50 e4       	ldi	r21, 0x40	; 64
    824e:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    8252:	18 16       	cp	r1, r24
    8254:	e4 f4       	brge	.+56     	; 0x828e <corectTrv+0xaa>
	{
		if (ds > 2 || ds < -2)
    8256:	20 e0       	ldi	r18, 0x00	; 0
    8258:	30 e0       	ldi	r19, 0x00	; 0
    825a:	40 e0       	ldi	r20, 0x00	; 0
    825c:	50 e4       	ldi	r21, 0x40	; 64
    825e:	c5 01       	movw	r24, r10
    8260:	b4 01       	movw	r22, r8
    8262:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    8266:	18 16       	cp	r1, r24
    8268:	ac f0       	brlt	.+42     	; 0x8294 <corectTrv+0xb0>
    826a:	20 e0       	ldi	r18, 0x00	; 0
    826c:	30 e0       	ldi	r19, 0x00	; 0
    826e:	40 e0       	ldi	r20, 0x00	; 0
    8270:	50 ec       	ldi	r21, 0xC0	; 192
    8272:	c5 01       	movw	r24, r10
    8274:	b4 01       	movw	r22, r8
    8276:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
	ds = Superheat - Superheat_old; // calculate the change in Superheat
	ds = ds * 2; // scaling factor for DS
	SSet=7;

	// Variable sampling rate --------------------------------------------
	int  k = 1; // Gain for the steps
    827a:	68 2f       	mov	r22, r24
    827c:	88 0f       	add	r24, r24
    827e:	77 0b       	sbc	r23, r23
    8280:	eb 01       	movw	r28, r22
    8282:	cc 27       	eor	r28, r28
    8284:	dd 0f       	add	r29, r29
    8286:	cc 1f       	adc	r28, r28
    8288:	dd 27       	eor	r29, r29
    828a:	21 96       	adiw	r28, 0x01	; 1
    828c:	05 c0       	rjmp	.+10     	; 0x8298 <corectTrv+0xb4>
    828e:	c1 e0       	ldi	r28, 0x01	; 1
    8290:	d0 e0       	ldi	r29, 0x00	; 0
    8292:	02 c0       	rjmp	.+4      	; 0x8298 <corectTrv+0xb4>
	if ( Superheat - SSet > 3)
	{
		if (ds > 2 || ds < -2)

		{
			k = 2; // Gain for the steps
    8294:	c2 e0       	ldi	r28, 0x02	; 2
    8296:	d0 e0       	ldi	r29, 0x00	; 0
			
		}
	}

	if ( Superheat - SSet >= 5)
    8298:	20 e0       	ldi	r18, 0x00	; 0
    829a:	30 e0       	ldi	r19, 0x00	; 0
    829c:	40 ea       	ldi	r20, 0xA0	; 160
    829e:	50 e4       	ldi	r21, 0x40	; 64
    82a0:	c3 01       	movw	r24, r6
    82a2:	b2 01       	movw	r22, r4
    82a4:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    82a8:	88 23       	and	r24, r24
    82aa:	cc f0       	brlt	.+50     	; 0x82de <corectTrv+0xfa>
	{
		if (ds > 2 || ds < -2)
    82ac:	20 e0       	ldi	r18, 0x00	; 0
    82ae:	30 e0       	ldi	r19, 0x00	; 0
    82b0:	40 e0       	ldi	r20, 0x00	; 0
    82b2:	50 e4       	ldi	r21, 0x40	; 64
    82b4:	c5 01       	movw	r24, r10
    82b6:	b4 01       	movw	r22, r8
    82b8:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    82bc:	18 16       	cp	r1, r24
    82be:	6c f0       	brlt	.+26     	; 0x82da <corectTrv+0xf6>
    82c0:	20 e0       	ldi	r18, 0x00	; 0
    82c2:	30 e0       	ldi	r19, 0x00	; 0
    82c4:	40 e0       	ldi	r20, 0x00	; 0
    82c6:	50 ec       	ldi	r21, 0xC0	; 192
    82c8:	c5 01       	movw	r24, r10
    82ca:	b4 01       	movw	r22, r8
    82cc:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    82d0:	88 23       	and	r24, r24
    82d2:	2c f4       	brge	.+10     	; 0x82de <corectTrv+0xfa>
		{
			k = 3; // Gain for the steps
    82d4:	c3 e0       	ldi	r28, 0x03	; 3
    82d6:	d0 e0       	ldi	r29, 0x00	; 0
    82d8:	02 c0       	rjmp	.+4      	; 0x82de <corectTrv+0xfa>
    82da:	c3 e0       	ldi	r28, 0x03	; 3
    82dc:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}

	//------------------------

	if (Superheat < SSet)
    82de:	20 e0       	ldi	r18, 0x00	; 0
    82e0:	30 e0       	ldi	r19, 0x00	; 0
    82e2:	40 ee       	ldi	r20, 0xE0	; 224
    82e4:	50 e4       	ldi	r21, 0x40	; 64
    82e6:	c7 01       	movw	r24, r14
    82e8:	b6 01       	movw	r22, r12
    82ea:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    82ee:	88 23       	and	r24, r24
    82f0:	84 f4       	brge	.+32     	; 0x8312 <corectTrv+0x12e>
	{
		k = -1; // if the Superheat is too low, this gain changes the step direction
		Superheat = SSet + 10 - Superheat;
    82f2:	a7 01       	movw	r20, r14
    82f4:	96 01       	movw	r18, r12
    82f6:	60 e0       	ldi	r22, 0x00	; 0
    82f8:	70 e0       	ldi	r23, 0x00	; 0
    82fa:	88 e8       	ldi	r24, 0x88	; 136
    82fc:	91 e4       	ldi	r25, 0x41	; 65
    82fe:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    8302:	6b 01       	movw	r12, r22
    8304:	7c 01       	movw	r14, r24
		ds = -ds;
    8306:	b7 fa       	bst	r11, 7
    8308:	b0 94       	com	r11
    830a:	b7 f8       	bld	r11, 7
    830c:	b0 94       	com	r11

	//------------------------

	if (Superheat < SSet)
	{
		k = -1; // if the Superheat is too low, this gain changes the step direction
    830e:	cf ef       	ldi	r28, 0xFF	; 255
    8310:	df ef       	ldi	r29, 0xFF	; 255
		Superheat = SSet + 10 - Superheat;
		ds = -ds;
	}
	
	Superheat_old = Superheat;
    8312:	c0 92 4b 07 	sts	0x074B, r12	; 0x80074b <Superheat_old.3257>
    8316:	d0 92 4c 07 	sts	0x074C, r13	; 0x80074c <Superheat_old.3257+0x1>
    831a:	e0 92 4d 07 	sts	0x074D, r14	; 0x80074d <Superheat_old.3257+0x2>
    831e:	f0 92 4e 07 	sts	0x074E, r15	; 0x80074e <Superheat_old.3257+0x3>
	
	if (ds > 20)
    8322:	20 e0       	ldi	r18, 0x00	; 0
    8324:	30 e0       	ldi	r19, 0x00	; 0
    8326:	40 ea       	ldi	r20, 0xA0	; 160
    8328:	51 e4       	ldi	r21, 0x41	; 65
    832a:	c5 01       	movw	r24, r10
    832c:	b4 01       	movw	r22, r8
    832e:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    8332:	18 16       	cp	r1, r24
    8334:	14 f4       	brge	.+4      	; 0x833a <corectTrv+0x156>
    8336:	0c 94 3c 4c 	jmp	0x9878	; 0x9878 <corectTrv+0x1694>
	{
		ds = 20;
	}

	 else if (ds < -20)
    833a:	20 e0       	ldi	r18, 0x00	; 0
    833c:	30 e0       	ldi	r19, 0x00	; 0
    833e:	40 ea       	ldi	r20, 0xA0	; 160
    8340:	51 ec       	ldi	r21, 0xC1	; 193
    8342:	c5 01       	movw	r24, r10
    8344:	b4 01       	movw	r22, r8
    8346:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    834a:	88 23       	and	r24, r24
    834c:	64 f0       	brlt	.+24     	; 0x8366 <corectTrv+0x182>
	{
		ds = -20;
	}
//--------------------------------------
	if (ds < -10)
    834e:	20 e0       	ldi	r18, 0x00	; 0
    8350:	30 e0       	ldi	r19, 0x00	; 0
    8352:	40 e2       	ldi	r20, 0x20	; 32
    8354:	51 ec       	ldi	r21, 0xC1	; 193
    8356:	c5 01       	movw	r24, r10
    8358:	b4 01       	movw	r22, r8
    835a:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    835e:	88 23       	and	r24, r24
    8360:	0c f0       	brlt	.+2      	; 0x8364 <corectTrv+0x180>
    8362:	ab c3       	rjmp	.+1878   	; 0x8aba <corectTrv+0x8d6>
    8364:	08 c0       	rjmp	.+16     	; 0x8376 <corectTrv+0x192>
		ds = 20;
	}

	 else if (ds < -20)
	{
		ds = -20;
    8366:	0f 2e       	mov	r0, r31
    8368:	81 2c       	mov	r8, r1
    836a:	91 2c       	mov	r9, r1
    836c:	f0 ea       	ldi	r31, 0xA0	; 160
    836e:	af 2e       	mov	r10, r31
    8370:	f1 ec       	ldi	r31, 0xC1	; 193
    8372:	bf 2e       	mov	r11, r31
    8374:	f0 2d       	mov	r31, r0
	}
//--------------------------------------
	if (ds < -10)
	{
		if (Superheat == SSet)
    8376:	20 e0       	ldi	r18, 0x00	; 0
    8378:	30 e0       	ldi	r19, 0x00	; 0
    837a:	40 ee       	ldi	r20, 0xE0	; 224
    837c:	50 e4       	ldi	r21, 0x40	; 64
    837e:	c7 01       	movw	r24, r14
    8380:	b6 01       	movw	r22, r12
    8382:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    8386:	81 11       	cpse	r24, r1
    8388:	32 c0       	rjmp	.+100    	; 0x83ee <corectTrv+0x20a>
		{
			return(-0.123 * ds * ds - 2.768 * ds - 30.62)* k ;
    838a:	2d e6       	ldi	r18, 0x6D	; 109
    838c:	37 ee       	ldi	r19, 0xE7	; 231
    838e:	4b ef       	ldi	r20, 0xFB	; 251
    8390:	5d eb       	ldi	r21, 0xBD	; 189
    8392:	c5 01       	movw	r24, r10
    8394:	b4 01       	movw	r22, r8
    8396:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    839a:	a5 01       	movw	r20, r10
    839c:	94 01       	movw	r18, r8
    839e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    83a2:	6b 01       	movw	r12, r22
    83a4:	7c 01       	movw	r14, r24
    83a6:	29 ee       	ldi	r18, 0xE9	; 233
    83a8:	36 e2       	ldi	r19, 0x26	; 38
    83aa:	41 e3       	ldi	r20, 0x31	; 49
    83ac:	50 e4       	ldi	r21, 0x40	; 64
    83ae:	c5 01       	movw	r24, r10
    83b0:	b4 01       	movw	r22, r8
    83b2:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    83b6:	9b 01       	movw	r18, r22
    83b8:	ac 01       	movw	r20, r24
    83ba:	c7 01       	movw	r24, r14
    83bc:	b6 01       	movw	r22, r12
    83be:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    83c2:	23 ec       	ldi	r18, 0xC3	; 195
    83c4:	35 ef       	ldi	r19, 0xF5	; 245
    83c6:	44 ef       	ldi	r20, 0xF4	; 244
    83c8:	51 e4       	ldi	r21, 0x41	; 65
    83ca:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    83ce:	6b 01       	movw	r12, r22
    83d0:	7c 01       	movw	r14, r24
    83d2:	be 01       	movw	r22, r28
    83d4:	dd 0f       	add	r29, r29
    83d6:	88 0b       	sbc	r24, r24
    83d8:	99 0b       	sbc	r25, r25
    83da:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    83de:	9b 01       	movw	r18, r22
    83e0:	ac 01       	movw	r20, r24
    83e2:	c7 01       	movw	r24, r14
    83e4:	b6 01       	movw	r22, r12
    83e6:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    83ea:	0c 94 e3 4d 	jmp	0x9bc6	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    83ee:	20 e0       	ldi	r18, 0x00	; 0
    83f0:	30 e0       	ldi	r19, 0x00	; 0
    83f2:	40 ee       	ldi	r20, 0xE0	; 224
    83f4:	50 e4       	ldi	r21, 0x40	; 64
    83f6:	c7 01       	movw	r24, r14
    83f8:	b6 01       	movw	r22, r12
    83fa:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    83fe:	18 16       	cp	r1, r24
    8400:	0c f0       	brlt	.+2      	; 0x8404 <corectTrv+0x220>
    8402:	55 c0       	rjmp	.+170    	; 0x84ae <corectTrv+0x2ca>
    8404:	20 e0       	ldi	r18, 0x00	; 0
    8406:	30 e0       	ldi	r19, 0x00	; 0
    8408:	40 e0       	ldi	r20, 0x00	; 0
    840a:	51 e4       	ldi	r21, 0x41	; 65
    840c:	c7 01       	movw	r24, r14
    840e:	b6 01       	movw	r22, r12
    8410:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    8414:	18 16       	cp	r1, r24
    8416:	0c f4       	brge	.+2      	; 0x841a <corectTrv+0x236>
    8418:	4a c0       	rjmp	.+148    	; 0x84ae <corectTrv+0x2ca>
		{
			return( 0.02416 * ds * ds * ds + 0.95688 * ds * ds + 12.69588 * ds + 44.31142)* k;
    841a:	21 e3       	ldi	r18, 0x31	; 49
    841c:	3b ee       	ldi	r19, 0xEB	; 235
    841e:	45 ec       	ldi	r20, 0xC5	; 197
    8420:	5c e3       	ldi	r21, 0x3C	; 60
    8422:	c5 01       	movw	r24, r10
    8424:	b4 01       	movw	r22, r8
    8426:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    842a:	a5 01       	movw	r20, r10
    842c:	94 01       	movw	r18, r8
    842e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8432:	a5 01       	movw	r20, r10
    8434:	94 01       	movw	r18, r8
    8436:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    843a:	6b 01       	movw	r12, r22
    843c:	7c 01       	movw	r14, r24
    843e:	26 e1       	ldi	r18, 0x16	; 22
    8440:	36 ef       	ldi	r19, 0xF6	; 246
    8442:	44 e7       	ldi	r20, 0x74	; 116
    8444:	5f e3       	ldi	r21, 0x3F	; 63
    8446:	c5 01       	movw	r24, r10
    8448:	b4 01       	movw	r22, r8
    844a:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    844e:	a5 01       	movw	r20, r10
    8450:	94 01       	movw	r18, r8
    8452:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8456:	9b 01       	movw	r18, r22
    8458:	ac 01       	movw	r20, r24
    845a:	c7 01       	movw	r24, r14
    845c:	b6 01       	movw	r22, r12
    845e:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8462:	6b 01       	movw	r12, r22
    8464:	7c 01       	movw	r14, r24
    8466:	23 e5       	ldi	r18, 0x53	; 83
    8468:	32 e2       	ldi	r19, 0x22	; 34
    846a:	4b e4       	ldi	r20, 0x4B	; 75
    846c:	51 e4       	ldi	r21, 0x41	; 65
    846e:	c5 01       	movw	r24, r10
    8470:	b4 01       	movw	r22, r8
    8472:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8476:	9b 01       	movw	r18, r22
    8478:	ac 01       	movw	r20, r24
    847a:	c7 01       	movw	r24, r14
    847c:	b6 01       	movw	r22, r12
    847e:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8482:	25 ee       	ldi	r18, 0xE5	; 229
    8484:	3e e3       	ldi	r19, 0x3E	; 62
    8486:	41 e3       	ldi	r20, 0x31	; 49
    8488:	52 e4       	ldi	r21, 0x42	; 66
    848a:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    848e:	6b 01       	movw	r12, r22
    8490:	7c 01       	movw	r14, r24
    8492:	be 01       	movw	r22, r28
    8494:	dd 0f       	add	r29, r29
    8496:	88 0b       	sbc	r24, r24
    8498:	99 0b       	sbc	r25, r25
    849a:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    849e:	9b 01       	movw	r18, r22
    84a0:	ac 01       	movw	r20, r24
    84a2:	c7 01       	movw	r24, r14
    84a4:	b6 01       	movw	r22, r12
    84a6:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    84aa:	0c 94 e3 4d 	jmp	0x9bc6	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    84ae:	20 e0       	ldi	r18, 0x00	; 0
    84b0:	30 e0       	ldi	r19, 0x00	; 0
    84b2:	40 e0       	ldi	r20, 0x00	; 0
    84b4:	51 e4       	ldi	r21, 0x41	; 65
    84b6:	c7 01       	movw	r24, r14
    84b8:	b6 01       	movw	r22, r12
    84ba:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    84be:	18 16       	cp	r1, r24
    84c0:	0c f0       	brlt	.+2      	; 0x84c4 <corectTrv+0x2e0>
    84c2:	55 c0       	rjmp	.+170    	; 0x856e <corectTrv+0x38a>
    84c4:	20 e0       	ldi	r18, 0x00	; 0
    84c6:	30 e0       	ldi	r19, 0x00	; 0
    84c8:	40 e1       	ldi	r20, 0x10	; 16
    84ca:	51 e4       	ldi	r21, 0x41	; 65
    84cc:	c7 01       	movw	r24, r14
    84ce:	b6 01       	movw	r22, r12
    84d0:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    84d4:	18 16       	cp	r1, r24
    84d6:	0c f4       	brge	.+2      	; 0x84da <corectTrv+0x2f6>
    84d8:	4a c0       	rjmp	.+148    	; 0x856e <corectTrv+0x38a>
		{
			return( 0.01715 * ds * ds * ds + 0.64880 * ds * ds + 8.39021 * ds + 27.61058)* k;
    84da:	28 e2       	ldi	r18, 0x28	; 40
    84dc:	3e e7       	ldi	r19, 0x7E	; 126
    84de:	4c e8       	ldi	r20, 0x8C	; 140
    84e0:	5c e3       	ldi	r21, 0x3C	; 60
    84e2:	c5 01       	movw	r24, r10
    84e4:	b4 01       	movw	r22, r8
    84e6:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    84ea:	a5 01       	movw	r20, r10
    84ec:	94 01       	movw	r18, r8
    84ee:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    84f2:	a5 01       	movw	r20, r10
    84f4:	94 01       	movw	r18, r8
    84f6:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    84fa:	6b 01       	movw	r12, r22
    84fc:	7c 01       	movw	r14, r24
    84fe:	22 ec       	ldi	r18, 0xC2	; 194
    8500:	37 e1       	ldi	r19, 0x17	; 23
    8502:	46 e2       	ldi	r20, 0x26	; 38
    8504:	5f e3       	ldi	r21, 0x3F	; 63
    8506:	c5 01       	movw	r24, r10
    8508:	b4 01       	movw	r22, r8
    850a:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    850e:	a5 01       	movw	r20, r10
    8510:	94 01       	movw	r18, r8
    8512:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8516:	9b 01       	movw	r18, r22
    8518:	ac 01       	movw	r20, r24
    851a:	c7 01       	movw	r24, r14
    851c:	b6 01       	movw	r22, r12
    851e:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8522:	6b 01       	movw	r12, r22
    8524:	7c 01       	movw	r14, r24
    8526:	2d e4       	ldi	r18, 0x4D	; 77
    8528:	3e e3       	ldi	r19, 0x3E	; 62
    852a:	46 e0       	ldi	r20, 0x06	; 6
    852c:	51 e4       	ldi	r21, 0x41	; 65
    852e:	c5 01       	movw	r24, r10
    8530:	b4 01       	movw	r22, r8
    8532:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8536:	9b 01       	movw	r18, r22
    8538:	ac 01       	movw	r20, r24
    853a:	c7 01       	movw	r24, r14
    853c:	b6 01       	movw	r22, r12
    853e:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8542:	28 e7       	ldi	r18, 0x78	; 120
    8544:	32 ee       	ldi	r19, 0xE2	; 226
    8546:	4c ed       	ldi	r20, 0xDC	; 220
    8548:	51 e4       	ldi	r21, 0x41	; 65
    854a:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    854e:	6b 01       	movw	r12, r22
    8550:	7c 01       	movw	r14, r24
    8552:	be 01       	movw	r22, r28
    8554:	dd 0f       	add	r29, r29
    8556:	88 0b       	sbc	r24, r24
    8558:	99 0b       	sbc	r25, r25
    855a:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    855e:	9b 01       	movw	r18, r22
    8560:	ac 01       	movw	r20, r24
    8562:	c7 01       	movw	r24, r14
    8564:	b6 01       	movw	r22, r12
    8566:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    856a:	0c 94 e3 4d 	jmp	0x9bc6	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    856e:	20 e0       	ldi	r18, 0x00	; 0
    8570:	30 e0       	ldi	r19, 0x00	; 0
    8572:	40 e1       	ldi	r20, 0x10	; 16
    8574:	51 e4       	ldi	r21, 0x41	; 65
    8576:	c7 01       	movw	r24, r14
    8578:	b6 01       	movw	r22, r12
    857a:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    857e:	18 16       	cp	r1, r24
    8580:	74 f5       	brge	.+92     	; 0x85de <corectTrv+0x3fa>
    8582:	20 e0       	ldi	r18, 0x00	; 0
    8584:	30 e0       	ldi	r19, 0x00	; 0
    8586:	40 e2       	ldi	r20, 0x20	; 32
    8588:	51 e4       	ldi	r21, 0x41	; 65
    858a:	c7 01       	movw	r24, r14
    858c:	b6 01       	movw	r22, r12
    858e:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    8592:	18 16       	cp	r1, r24
    8594:	24 f1       	brlt	.+72     	; 0x85de <corectTrv+0x3fa>
		{
			return( -0.099 * ds * ds - 2.002 * ds - 16.444);
    8596:	23 e8       	ldi	r18, 0x83	; 131
    8598:	30 ec       	ldi	r19, 0xC0	; 192
    859a:	4a ec       	ldi	r20, 0xCA	; 202
    859c:	5d eb       	ldi	r21, 0xBD	; 189
    859e:	c5 01       	movw	r24, r10
    85a0:	b4 01       	movw	r22, r8
    85a2:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    85a6:	a5 01       	movw	r20, r10
    85a8:	94 01       	movw	r18, r8
    85aa:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    85ae:	6b 01       	movw	r12, r22
    85b0:	7c 01       	movw	r14, r24
    85b2:	25 ec       	ldi	r18, 0xC5	; 197
    85b4:	30 e2       	ldi	r19, 0x20	; 32
    85b6:	40 e0       	ldi	r20, 0x00	; 0
    85b8:	50 e4       	ldi	r21, 0x40	; 64
    85ba:	c5 01       	movw	r24, r10
    85bc:	b4 01       	movw	r22, r8
    85be:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    85c2:	9b 01       	movw	r18, r22
    85c4:	ac 01       	movw	r20, r24
    85c6:	c7 01       	movw	r24, r14
    85c8:	b6 01       	movw	r22, r12
    85ca:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    85ce:	20 e5       	ldi	r18, 0x50	; 80
    85d0:	3d e8       	ldi	r19, 0x8D	; 141
    85d2:	43 e8       	ldi	r20, 0x83	; 131
    85d4:	51 e4       	ldi	r21, 0x41	; 65
    85d6:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    85da:	0c 94 e3 4d 	jmp	0x9bc6	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    85de:	20 e0       	ldi	r18, 0x00	; 0
    85e0:	30 e0       	ldi	r19, 0x00	; 0
    85e2:	40 e2       	ldi	r20, 0x20	; 32
    85e4:	51 e4       	ldi	r21, 0x41	; 65
    85e6:	c7 01       	movw	r24, r14
    85e8:	b6 01       	movw	r22, r12
    85ea:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    85ee:	18 16       	cp	r1, r24
    85f0:	74 f5       	brge	.+92     	; 0x864e <corectTrv+0x46a>
    85f2:	20 e0       	ldi	r18, 0x00	; 0
    85f4:	30 e0       	ldi	r19, 0x00	; 0
    85f6:	40 e3       	ldi	r20, 0x30	; 48
    85f8:	51 e4       	ldi	r21, 0x41	; 65
    85fa:	c7 01       	movw	r24, r14
    85fc:	b6 01       	movw	r22, r12
    85fe:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    8602:	18 16       	cp	r1, r24
    8604:	24 f1       	brlt	.+72     	; 0x864e <corectTrv+0x46a>
		{
			return( -0.065 * ds * ds - 0.773 * ds - 4.451);
    8606:	28 eb       	ldi	r18, 0xB8	; 184
    8608:	3e e1       	ldi	r19, 0x1E	; 30
    860a:	45 e8       	ldi	r20, 0x85	; 133
    860c:	5d eb       	ldi	r21, 0xBD	; 189
    860e:	c5 01       	movw	r24, r10
    8610:	b4 01       	movw	r22, r8
    8612:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8616:	a5 01       	movw	r20, r10
    8618:	94 01       	movw	r18, r8
    861a:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    861e:	6b 01       	movw	r12, r22
    8620:	7c 01       	movw	r14, r24
    8622:	24 e5       	ldi	r18, 0x54	; 84
    8624:	33 ee       	ldi	r19, 0xE3	; 227
    8626:	45 e4       	ldi	r20, 0x45	; 69
    8628:	5f e3       	ldi	r21, 0x3F	; 63
    862a:	c5 01       	movw	r24, r10
    862c:	b4 01       	movw	r22, r8
    862e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8632:	9b 01       	movw	r18, r22
    8634:	ac 01       	movw	r20, r24
    8636:	c7 01       	movw	r24, r14
    8638:	b6 01       	movw	r22, r12
    863a:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    863e:	28 e9       	ldi	r18, 0x98	; 152
    8640:	3e e6       	ldi	r19, 0x6E	; 110
    8642:	4e e8       	ldi	r20, 0x8E	; 142
    8644:	50 e4       	ldi	r21, 0x40	; 64
    8646:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    864a:	0c 94 e3 4d 	jmp	0x9bc6	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    864e:	20 e0       	ldi	r18, 0x00	; 0
    8650:	30 e0       	ldi	r19, 0x00	; 0
    8652:	40 e3       	ldi	r20, 0x30	; 48
    8654:	51 e4       	ldi	r21, 0x41	; 65
    8656:	c7 01       	movw	r24, r14
    8658:	b6 01       	movw	r22, r12
    865a:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    865e:	18 16       	cp	r1, r24
    8660:	0c f0       	brlt	.+2      	; 0x8664 <corectTrv+0x480>
    8662:	55 c0       	rjmp	.+170    	; 0x870e <corectTrv+0x52a>
    8664:	20 e0       	ldi	r18, 0x00	; 0
    8666:	30 e0       	ldi	r19, 0x00	; 0
    8668:	40 e4       	ldi	r20, 0x40	; 64
    866a:	51 e4       	ldi	r21, 0x41	; 65
    866c:	c7 01       	movw	r24, r14
    866e:	b6 01       	movw	r22, r12
    8670:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    8674:	18 16       	cp	r1, r24
    8676:	0c f4       	brge	.+2      	; 0x867a <corectTrv+0x496>
    8678:	4a c0       	rjmp	.+148    	; 0x870e <corectTrv+0x52a>
		{
			return( 0.01315 * ds * ds * ds + 0.59145 * ds * ds + 10.05298 * ds + 54.52301)* k;
    867a:	29 e1       	ldi	r18, 0x19	; 25
    867c:	33 e7       	ldi	r19, 0x73	; 115
    867e:	47 e5       	ldi	r20, 0x57	; 87
    8680:	5c e3       	ldi	r21, 0x3C	; 60
    8682:	c5 01       	movw	r24, r10
    8684:	b4 01       	movw	r22, r8
    8686:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    868a:	a5 01       	movw	r20, r10
    868c:	94 01       	movw	r18, r8
    868e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8692:	a5 01       	movw	r20, r10
    8694:	94 01       	movw	r18, r8
    8696:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    869a:	6b 01       	movw	r12, r22
    869c:	7c 01       	movw	r14, r24
    869e:	24 e4       	ldi	r18, 0x44	; 68
    86a0:	39 e6       	ldi	r19, 0x69	; 105
    86a2:	47 e1       	ldi	r20, 0x17	; 23
    86a4:	5f e3       	ldi	r21, 0x3F	; 63
    86a6:	c5 01       	movw	r24, r10
    86a8:	b4 01       	movw	r22, r8
    86aa:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    86ae:	a5 01       	movw	r20, r10
    86b0:	94 01       	movw	r18, r8
    86b2:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    86b6:	9b 01       	movw	r18, r22
    86b8:	ac 01       	movw	r20, r24
    86ba:	c7 01       	movw	r24, r14
    86bc:	b6 01       	movw	r22, r12
    86be:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    86c2:	6b 01       	movw	r12, r22
    86c4:	7c 01       	movw	r14, r24
    86c6:	22 e0       	ldi	r18, 0x02	; 2
    86c8:	39 ed       	ldi	r19, 0xD9	; 217
    86ca:	40 e2       	ldi	r20, 0x20	; 32
    86cc:	51 e4       	ldi	r21, 0x41	; 65
    86ce:	c5 01       	movw	r24, r10
    86d0:	b4 01       	movw	r22, r8
    86d2:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    86d6:	9b 01       	movw	r18, r22
    86d8:	ac 01       	movw	r20, r24
    86da:	c7 01       	movw	r24, r14
    86dc:	b6 01       	movw	r22, r12
    86de:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    86e2:	20 e9       	ldi	r18, 0x90	; 144
    86e4:	37 e1       	ldi	r19, 0x17	; 23
    86e6:	4a e5       	ldi	r20, 0x5A	; 90
    86e8:	52 e4       	ldi	r21, 0x42	; 66
    86ea:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    86ee:	6b 01       	movw	r12, r22
    86f0:	7c 01       	movw	r14, r24
    86f2:	be 01       	movw	r22, r28
    86f4:	dd 0f       	add	r29, r29
    86f6:	88 0b       	sbc	r24, r24
    86f8:	99 0b       	sbc	r25, r25
    86fa:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    86fe:	9b 01       	movw	r18, r22
    8700:	ac 01       	movw	r20, r24
    8702:	c7 01       	movw	r24, r14
    8704:	b6 01       	movw	r22, r12
    8706:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    870a:	0c 94 e3 4d 	jmp	0x9bc6	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    870e:	20 e0       	ldi	r18, 0x00	; 0
    8710:	30 e0       	ldi	r19, 0x00	; 0
    8712:	40 e4       	ldi	r20, 0x40	; 64
    8714:	51 e4       	ldi	r21, 0x41	; 65
    8716:	c7 01       	movw	r24, r14
    8718:	b6 01       	movw	r22, r12
    871a:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    871e:	18 16       	cp	r1, r24
    8720:	0c f0       	brlt	.+2      	; 0x8724 <corectTrv+0x540>
    8722:	55 c0       	rjmp	.+170    	; 0x87ce <corectTrv+0x5ea>
    8724:	20 e0       	ldi	r18, 0x00	; 0
    8726:	30 e0       	ldi	r19, 0x00	; 0
    8728:	40 e5       	ldi	r20, 0x50	; 80
    872a:	51 e4       	ldi	r21, 0x41	; 65
    872c:	c7 01       	movw	r24, r14
    872e:	b6 01       	movw	r22, r12
    8730:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    8734:	18 16       	cp	r1, r24
    8736:	0c f4       	brge	.+2      	; 0x873a <corectTrv+0x556>
    8738:	4a c0       	rjmp	.+148    	; 0x87ce <corectTrv+0x5ea>
		{
			return( 0.02485 * ds * ds * ds + 1.09724 * ds * ds + 17.05530 * ds + 89.43916)* k;
    873a:	2a e3       	ldi	r18, 0x3A	; 58
    873c:	32 e9       	ldi	r19, 0x92	; 146
    873e:	4b ec       	ldi	r20, 0xCB	; 203
    8740:	5c e3       	ldi	r21, 0x3C	; 60
    8742:	c5 01       	movw	r24, r10
    8744:	b4 01       	movw	r22, r8
    8746:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    874a:	a5 01       	movw	r20, r10
    874c:	94 01       	movw	r18, r8
    874e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8752:	a5 01       	movw	r20, r10
    8754:	94 01       	movw	r18, r8
    8756:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    875a:	6b 01       	movw	r12, r22
    875c:	7c 01       	movw	r14, r24
    875e:	2c e5       	ldi	r18, 0x5C	; 92
    8760:	32 e7       	ldi	r19, 0x72	; 114
    8762:	4c e8       	ldi	r20, 0x8C	; 140
    8764:	5f e3       	ldi	r21, 0x3F	; 63
    8766:	c5 01       	movw	r24, r10
    8768:	b4 01       	movw	r22, r8
    876a:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    876e:	a5 01       	movw	r20, r10
    8770:	94 01       	movw	r18, r8
    8772:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8776:	9b 01       	movw	r18, r22
    8778:	ac 01       	movw	r20, r24
    877a:	c7 01       	movw	r24, r14
    877c:	b6 01       	movw	r22, r12
    877e:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8782:	6b 01       	movw	r12, r22
    8784:	7c 01       	movw	r14, r24
    8786:	21 e4       	ldi	r18, 0x41	; 65
    8788:	31 e7       	ldi	r19, 0x71	; 113
    878a:	48 e8       	ldi	r20, 0x88	; 136
    878c:	51 e4       	ldi	r21, 0x41	; 65
    878e:	c5 01       	movw	r24, r10
    8790:	b4 01       	movw	r22, r8
    8792:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8796:	9b 01       	movw	r18, r22
    8798:	ac 01       	movw	r20, r24
    879a:	c7 01       	movw	r24, r14
    879c:	b6 01       	movw	r22, r12
    879e:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    87a2:	2a ed       	ldi	r18, 0xDA	; 218
    87a4:	30 ee       	ldi	r19, 0xE0	; 224
    87a6:	42 eb       	ldi	r20, 0xB2	; 178
    87a8:	52 e4       	ldi	r21, 0x42	; 66
    87aa:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    87ae:	6b 01       	movw	r12, r22
    87b0:	7c 01       	movw	r14, r24
    87b2:	be 01       	movw	r22, r28
    87b4:	dd 0f       	add	r29, r29
    87b6:	88 0b       	sbc	r24, r24
    87b8:	99 0b       	sbc	r25, r25
    87ba:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    87be:	9b 01       	movw	r18, r22
    87c0:	ac 01       	movw	r20, r24
    87c2:	c7 01       	movw	r24, r14
    87c4:	b6 01       	movw	r22, r12
    87c6:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    87ca:	0c 94 e3 4d 	jmp	0x9bc6	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    87ce:	20 e0       	ldi	r18, 0x00	; 0
    87d0:	30 e0       	ldi	r19, 0x00	; 0
    87d2:	40 e5       	ldi	r20, 0x50	; 80
    87d4:	51 e4       	ldi	r21, 0x41	; 65
    87d6:	c7 01       	movw	r24, r14
    87d8:	b6 01       	movw	r22, r12
    87da:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    87de:	18 16       	cp	r1, r24
    87e0:	0c f0       	brlt	.+2      	; 0x87e4 <corectTrv+0x600>
    87e2:	55 c0       	rjmp	.+170    	; 0x888e <corectTrv+0x6aa>
    87e4:	20 e0       	ldi	r18, 0x00	; 0
    87e6:	30 e0       	ldi	r19, 0x00	; 0
    87e8:	40 e6       	ldi	r20, 0x60	; 96
    87ea:	51 e4       	ldi	r21, 0x41	; 65
    87ec:	c7 01       	movw	r24, r14
    87ee:	b6 01       	movw	r22, r12
    87f0:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    87f4:	18 16       	cp	r1, r24
    87f6:	0c f4       	brge	.+2      	; 0x87fa <corectTrv+0x616>
    87f8:	4a c0       	rjmp	.+148    	; 0x888e <corectTrv+0x6aa>
		{
			return( 0.02257 * ds * ds * ds + 0.99967 * ds * ds + 15.71735 * ds + 86.11652)* k;
    87fa:	28 eb       	ldi	r18, 0xB8	; 184
    87fc:	34 ee       	ldi	r19, 0xE4	; 228
    87fe:	48 eb       	ldi	r20, 0xB8	; 184
    8800:	5c e3       	ldi	r21, 0x3C	; 60
    8802:	c5 01       	movw	r24, r10
    8804:	b4 01       	movw	r22, r8
    8806:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    880a:	a5 01       	movw	r20, r10
    880c:	94 01       	movw	r18, r8
    880e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8812:	a5 01       	movw	r20, r10
    8814:	94 01       	movw	r18, r8
    8816:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    881a:	6b 01       	movw	r12, r22
    881c:	7c 01       	movw	r14, r24
    881e:	20 e6       	ldi	r18, 0x60	; 96
    8820:	3a ee       	ldi	r19, 0xEA	; 234
    8822:	4f e7       	ldi	r20, 0x7F	; 127
    8824:	5f e3       	ldi	r21, 0x3F	; 63
    8826:	c5 01       	movw	r24, r10
    8828:	b4 01       	movw	r22, r8
    882a:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    882e:	a5 01       	movw	r20, r10
    8830:	94 01       	movw	r18, r8
    8832:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8836:	9b 01       	movw	r18, r22
    8838:	ac 01       	movw	r20, r24
    883a:	c7 01       	movw	r24, r14
    883c:	b6 01       	movw	r22, r12
    883e:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8842:	6b 01       	movw	r12, r22
    8844:	7c 01       	movw	r14, r24
    8846:	24 e4       	ldi	r18, 0x44	; 68
    8848:	3a e7       	ldi	r19, 0x7A	; 122
    884a:	4b e7       	ldi	r20, 0x7B	; 123
    884c:	51 e4       	ldi	r21, 0x41	; 65
    884e:	c5 01       	movw	r24, r10
    8850:	b4 01       	movw	r22, r8
    8852:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8856:	9b 01       	movw	r18, r22
    8858:	ac 01       	movw	r20, r24
    885a:	c7 01       	movw	r24, r14
    885c:	b6 01       	movw	r22, r12
    885e:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8862:	29 ea       	ldi	r18, 0xA9	; 169
    8864:	3b e3       	ldi	r19, 0x3B	; 59
    8866:	4c ea       	ldi	r20, 0xAC	; 172
    8868:	52 e4       	ldi	r21, 0x42	; 66
    886a:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    886e:	6b 01       	movw	r12, r22
    8870:	7c 01       	movw	r14, r24
    8872:	be 01       	movw	r22, r28
    8874:	dd 0f       	add	r29, r29
    8876:	88 0b       	sbc	r24, r24
    8878:	99 0b       	sbc	r25, r25
    887a:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    887e:	9b 01       	movw	r18, r22
    8880:	ac 01       	movw	r20, r24
    8882:	c7 01       	movw	r24, r14
    8884:	b6 01       	movw	r22, r12
    8886:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    888a:	0c 94 e3 4d 	jmp	0x9bc6	; 0x9bc6 <corectTrv+0x19e2>
		}
		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    888e:	20 e0       	ldi	r18, 0x00	; 0
    8890:	30 e0       	ldi	r19, 0x00	; 0
    8892:	40 e6       	ldi	r20, 0x60	; 96
    8894:	51 e4       	ldi	r21, 0x41	; 65
    8896:	c7 01       	movw	r24, r14
    8898:	b6 01       	movw	r22, r12
    889a:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    889e:	18 16       	cp	r1, r24
    88a0:	0c f0       	brlt	.+2      	; 0x88a4 <corectTrv+0x6c0>
    88a2:	55 c0       	rjmp	.+170    	; 0x894e <corectTrv+0x76a>
    88a4:	20 e0       	ldi	r18, 0x00	; 0
    88a6:	30 e0       	ldi	r19, 0x00	; 0
    88a8:	40 e7       	ldi	r20, 0x70	; 112
    88aa:	51 e4       	ldi	r21, 0x41	; 65
    88ac:	c7 01       	movw	r24, r14
    88ae:	b6 01       	movw	r22, r12
    88b0:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    88b4:	18 16       	cp	r1, r24
    88b6:	0c f4       	brge	.+2      	; 0x88ba <corectTrv+0x6d6>
    88b8:	4a c0       	rjmp	.+148    	; 0x894e <corectTrv+0x76a>
		{
			return( 0.02199 * ds * ds * ds + 0.99841 * ds * ds + 16.07877 * ds + 91.69972)* k;
    88ba:	2f e5       	ldi	r18, 0x5F	; 95
    88bc:	34 e2       	ldi	r19, 0x24	; 36
    88be:	44 eb       	ldi	r20, 0xB4	; 180
    88c0:	5c e3       	ldi	r21, 0x3C	; 60
    88c2:	c5 01       	movw	r24, r10
    88c4:	b4 01       	movw	r22, r8
    88c6:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    88ca:	a5 01       	movw	r20, r10
    88cc:	94 01       	movw	r18, r8
    88ce:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    88d2:	a5 01       	movw	r20, r10
    88d4:	94 01       	movw	r18, r8
    88d6:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    88da:	6b 01       	movw	r12, r22
    88dc:	7c 01       	movw	r14, r24
    88de:	2c ec       	ldi	r18, 0xCC	; 204
    88e0:	37 e9       	ldi	r19, 0x97	; 151
    88e2:	4f e7       	ldi	r20, 0x7F	; 127
    88e4:	5f e3       	ldi	r21, 0x3F	; 63
    88e6:	c5 01       	movw	r24, r10
    88e8:	b4 01       	movw	r22, r8
    88ea:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    88ee:	a5 01       	movw	r20, r10
    88f0:	94 01       	movw	r18, r8
    88f2:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    88f6:	9b 01       	movw	r18, r22
    88f8:	ac 01       	movw	r20, r24
    88fa:	c7 01       	movw	r24, r14
    88fc:	b6 01       	movw	r22, r12
    88fe:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8902:	6b 01       	movw	r12, r22
    8904:	7c 01       	movw	r14, r24
    8906:	22 e5       	ldi	r18, 0x52	; 82
    8908:	31 ea       	ldi	r19, 0xA1	; 161
    890a:	40 e8       	ldi	r20, 0x80	; 128
    890c:	51 e4       	ldi	r21, 0x41	; 65
    890e:	c5 01       	movw	r24, r10
    8910:	b4 01       	movw	r22, r8
    8912:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8916:	9b 01       	movw	r18, r22
    8918:	ac 01       	movw	r20, r24
    891a:	c7 01       	movw	r24, r14
    891c:	b6 01       	movw	r22, r12
    891e:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8922:	22 e4       	ldi	r18, 0x42	; 66
    8924:	36 e6       	ldi	r19, 0x66	; 102
    8926:	47 eb       	ldi	r20, 0xB7	; 183
    8928:	52 e4       	ldi	r21, 0x42	; 66
    892a:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    892e:	6b 01       	movw	r12, r22
    8930:	7c 01       	movw	r14, r24
    8932:	be 01       	movw	r22, r28
    8934:	dd 0f       	add	r29, r29
    8936:	88 0b       	sbc	r24, r24
    8938:	99 0b       	sbc	r25, r25
    893a:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    893e:	9b 01       	movw	r18, r22
    8940:	ac 01       	movw	r20, r24
    8942:	c7 01       	movw	r24, r14
    8944:	b6 01       	movw	r22, r12
    8946:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    894a:	0c 94 e3 4d 	jmp	0x9bc6	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    894e:	20 e0       	ldi	r18, 0x00	; 0
    8950:	30 e0       	ldi	r19, 0x00	; 0
    8952:	40 e7       	ldi	r20, 0x70	; 112
    8954:	51 e4       	ldi	r21, 0x41	; 65
    8956:	c7 01       	movw	r24, r14
    8958:	b6 01       	movw	r22, r12
    895a:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    895e:	18 16       	cp	r1, r24
    8960:	0c f0       	brlt	.+2      	; 0x8964 <corectTrv+0x780>
    8962:	55 c0       	rjmp	.+170    	; 0x8a0e <corectTrv+0x82a>
    8964:	20 e0       	ldi	r18, 0x00	; 0
    8966:	30 e0       	ldi	r19, 0x00	; 0
    8968:	40 e8       	ldi	r20, 0x80	; 128
    896a:	51 e4       	ldi	r21, 0x41	; 65
    896c:	c7 01       	movw	r24, r14
    896e:	b6 01       	movw	r22, r12
    8970:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    8974:	18 16       	cp	r1, r24
    8976:	0c f4       	brge	.+2      	; 0x897a <corectTrv+0x796>
    8978:	4a c0       	rjmp	.+148    	; 0x8a0e <corectTrv+0x82a>
		{
			return( 0.02293 * ds * ds * ds + 1.04454 * ds * ds + 16.79148 * ds + 97.65075)* k;
    897a:	22 eb       	ldi	r18, 0xB2	; 178
    897c:	37 ed       	ldi	r19, 0xD7	; 215
    897e:	4b eb       	ldi	r20, 0xBB	; 187
    8980:	5c e3       	ldi	r21, 0x3C	; 60
    8982:	c5 01       	movw	r24, r10
    8984:	b4 01       	movw	r22, r8
    8986:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    898a:	a5 01       	movw	r20, r10
    898c:	94 01       	movw	r18, r8
    898e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8992:	a5 01       	movw	r20, r10
    8994:	94 01       	movw	r18, r8
    8996:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    899a:	6b 01       	movw	r12, r22
    899c:	7c 01       	movw	r14, r24
    899e:	2d e7       	ldi	r18, 0x7D	; 125
    89a0:	33 eb       	ldi	r19, 0xB3	; 179
    89a2:	45 e8       	ldi	r20, 0x85	; 133
    89a4:	5f e3       	ldi	r21, 0x3F	; 63
    89a6:	c5 01       	movw	r24, r10
    89a8:	b4 01       	movw	r22, r8
    89aa:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    89ae:	a5 01       	movw	r20, r10
    89b0:	94 01       	movw	r18, r8
    89b2:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    89b6:	9b 01       	movw	r18, r22
    89b8:	ac 01       	movw	r20, r24
    89ba:	c7 01       	movw	r24, r14
    89bc:	b6 01       	movw	r22, r12
    89be:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    89c2:	6b 01       	movw	r12, r22
    89c4:	7c 01       	movw	r14, r24
    89c6:	23 ef       	ldi	r18, 0xF3	; 243
    89c8:	34 e5       	ldi	r19, 0x54	; 84
    89ca:	46 e8       	ldi	r20, 0x86	; 134
    89cc:	51 e4       	ldi	r21, 0x41	; 65
    89ce:	c5 01       	movw	r24, r10
    89d0:	b4 01       	movw	r22, r8
    89d2:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    89d6:	9b 01       	movw	r18, r22
    89d8:	ac 01       	movw	r20, r24
    89da:	c7 01       	movw	r24, r14
    89dc:	b6 01       	movw	r22, r12
    89de:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    89e2:	2f e2       	ldi	r18, 0x2F	; 47
    89e4:	3d e4       	ldi	r19, 0x4D	; 77
    89e6:	43 ec       	ldi	r20, 0xC3	; 195
    89e8:	52 e4       	ldi	r21, 0x42	; 66
    89ea:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    89ee:	6b 01       	movw	r12, r22
    89f0:	7c 01       	movw	r14, r24
    89f2:	be 01       	movw	r22, r28
    89f4:	dd 0f       	add	r29, r29
    89f6:	88 0b       	sbc	r24, r24
    89f8:	99 0b       	sbc	r25, r25
    89fa:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    89fe:	9b 01       	movw	r18, r22
    8a00:	ac 01       	movw	r20, r24
    8a02:	c7 01       	movw	r24, r14
    8a04:	b6 01       	movw	r22, r12
    8a06:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8a0a:	0c 94 e3 4d 	jmp	0x9bc6	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 9)
    8a0e:	20 e0       	ldi	r18, 0x00	; 0
    8a10:	30 e0       	ldi	r19, 0x00	; 0
    8a12:	40 e8       	ldi	r20, 0x80	; 128
    8a14:	51 e4       	ldi	r21, 0x41	; 65
    8a16:	c7 01       	movw	r24, r14
    8a18:	b6 01       	movw	r22, r12
    8a1a:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    8a1e:	18 16       	cp	r1, r24
    8a20:	14 f0       	brlt	.+4      	; 0x8a26 <corectTrv+0x842>
    8a22:	0c 94 d0 4d 	jmp	0x9ba0	; 0x9ba0 <corectTrv+0x19bc>
		{
			return( 0.01242 * ds * ds * ds + 0.55907 * ds * ds + 9.57142 * ds + 67.21499)* k;
    8a26:	21 e4       	ldi	r18, 0x41	; 65
    8a28:	3d e7       	ldi	r19, 0x7D	; 125
    8a2a:	4b e4       	ldi	r20, 0x4B	; 75
    8a2c:	5c e3       	ldi	r21, 0x3C	; 60
    8a2e:	c5 01       	movw	r24, r10
    8a30:	b4 01       	movw	r22, r8
    8a32:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8a36:	a5 01       	movw	r20, r10
    8a38:	94 01       	movw	r18, r8
    8a3a:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8a3e:	a5 01       	movw	r20, r10
    8a40:	94 01       	movw	r18, r8
    8a42:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8a46:	6b 01       	movw	r12, r22
    8a48:	7c 01       	movw	r14, r24
    8a4a:	26 e3       	ldi	r18, 0x36	; 54
    8a4c:	3f e1       	ldi	r19, 0x1F	; 31
    8a4e:	4f e0       	ldi	r20, 0x0F	; 15
    8a50:	5f e3       	ldi	r21, 0x3F	; 63
    8a52:	c5 01       	movw	r24, r10
    8a54:	b4 01       	movw	r22, r8
    8a56:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8a5a:	a5 01       	movw	r20, r10
    8a5c:	94 01       	movw	r18, r8
    8a5e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8a62:	9b 01       	movw	r18, r22
    8a64:	ac 01       	movw	r20, r24
    8a66:	c7 01       	movw	r24, r14
    8a68:	b6 01       	movw	r22, r12
    8a6a:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8a6e:	6b 01       	movw	r12, r22
    8a70:	7c 01       	movw	r14, r24
    8a72:	29 e8       	ldi	r18, 0x89	; 137
    8a74:	34 e2       	ldi	r19, 0x24	; 36
    8a76:	49 e1       	ldi	r20, 0x19	; 25
    8a78:	51 e4       	ldi	r21, 0x41	; 65
    8a7a:	c5 01       	movw	r24, r10
    8a7c:	b4 01       	movw	r22, r8
    8a7e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8a82:	9b 01       	movw	r18, r22
    8a84:	ac 01       	movw	r20, r24
    8a86:	c7 01       	movw	r24, r14
    8a88:	b6 01       	movw	r22, r12
    8a8a:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8a8e:	23 e1       	ldi	r18, 0x13	; 19
    8a90:	3e e6       	ldi	r19, 0x6E	; 110
    8a92:	46 e8       	ldi	r20, 0x86	; 134
    8a94:	52 e4       	ldi	r21, 0x42	; 66
    8a96:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8a9a:	6b 01       	movw	r12, r22
    8a9c:	7c 01       	movw	r14, r24
    8a9e:	be 01       	movw	r22, r28
    8aa0:	dd 0f       	add	r29, r29
    8aa2:	88 0b       	sbc	r24, r24
    8aa4:	99 0b       	sbc	r25, r25
    8aa6:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    8aaa:	9b 01       	movw	r18, r22
    8aac:	ac 01       	movw	r20, r24
    8aae:	c7 01       	movw	r24, r14
    8ab0:	b6 01       	movw	r22, r12
    8ab2:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8ab6:	0c 94 e3 4d 	jmp	0x9bc6	; 0x9bc6 <corectTrv+0x19e2>
		}
	}

	else if (ds < 0 && ds >= -10)
    8aba:	20 e0       	ldi	r18, 0x00	; 0
    8abc:	30 e0       	ldi	r19, 0x00	; 0
    8abe:	a9 01       	movw	r20, r18
    8ac0:	c5 01       	movw	r24, r10
    8ac2:	b4 01       	movw	r22, r8
    8ac4:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    8ac8:	88 23       	and	r24, r24
    8aca:	0c f0       	brlt	.+2      	; 0x8ace <corectTrv+0x8ea>
    8acc:	d6 c3       	rjmp	.+1964   	; 0x927a <corectTrv+0x1096>
    8ace:	20 e0       	ldi	r18, 0x00	; 0
    8ad0:	30 e0       	ldi	r19, 0x00	; 0
    8ad2:	40 e2       	ldi	r20, 0x20	; 32
    8ad4:	51 ec       	ldi	r21, 0xC1	; 193
    8ad6:	c5 01       	movw	r24, r10
    8ad8:	b4 01       	movw	r22, r8
    8ada:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    8ade:	88 23       	and	r24, r24
    8ae0:	0c f4       	brge	.+2      	; 0x8ae4 <corectTrv+0x900>
    8ae2:	cb c3       	rjmp	.+1942   	; 0x927a <corectTrv+0x1096>
	{
		if (Superheat == SSet)
    8ae4:	20 e0       	ldi	r18, 0x00	; 0
    8ae6:	30 e0       	ldi	r19, 0x00	; 0
    8ae8:	40 ee       	ldi	r20, 0xE0	; 224
    8aea:	50 e4       	ldi	r21, 0x40	; 64
    8aec:	c7 01       	movw	r24, r14
    8aee:	b6 01       	movw	r22, r12
    8af0:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    8af4:	81 11       	cpse	r24, r1
    8af6:	4a c0       	rjmp	.+148    	; 0x8b8c <corectTrv+0x9a8>
		{
			return( 0.01259 * ds * ds * ds + 0.18896 * ds * ds + 2.12770 * ds - 0.01350)* k;
    8af8:	2a e4       	ldi	r18, 0x4A	; 74
    8afa:	36 e4       	ldi	r19, 0x46	; 70
    8afc:	4e e4       	ldi	r20, 0x4E	; 78
    8afe:	5c e3       	ldi	r21, 0x3C	; 60
    8b00:	c5 01       	movw	r24, r10
    8b02:	b4 01       	movw	r22, r8
    8b04:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8b08:	a5 01       	movw	r20, r10
    8b0a:	94 01       	movw	r18, r8
    8b0c:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8b10:	a5 01       	movw	r20, r10
    8b12:	94 01       	movw	r18, r8
    8b14:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8b18:	6b 01       	movw	r12, r22
    8b1a:	7c 01       	movw	r14, r24
    8b1c:	2b eb       	ldi	r18, 0xBB	; 187
    8b1e:	3e e7       	ldi	r19, 0x7E	; 126
    8b20:	41 e4       	ldi	r20, 0x41	; 65
    8b22:	5e e3       	ldi	r21, 0x3E	; 62
    8b24:	c5 01       	movw	r24, r10
    8b26:	b4 01       	movw	r22, r8
    8b28:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8b2c:	a5 01       	movw	r20, r10
    8b2e:	94 01       	movw	r18, r8
    8b30:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8b34:	9b 01       	movw	r18, r22
    8b36:	ac 01       	movw	r20, r24
    8b38:	c7 01       	movw	r24, r14
    8b3a:	b6 01       	movw	r22, r12
    8b3c:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8b40:	6b 01       	movw	r12, r22
    8b42:	7c 01       	movw	r14, r24
    8b44:	2d e3       	ldi	r18, 0x3D	; 61
    8b46:	3c e2       	ldi	r19, 0x2C	; 44
    8b48:	48 e0       	ldi	r20, 0x08	; 8
    8b4a:	50 e4       	ldi	r21, 0x40	; 64
    8b4c:	c5 01       	movw	r24, r10
    8b4e:	b4 01       	movw	r22, r8
    8b50:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8b54:	9b 01       	movw	r18, r22
    8b56:	ac 01       	movw	r20, r24
    8b58:	c7 01       	movw	r24, r14
    8b5a:	b6 01       	movw	r22, r12
    8b5c:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8b60:	2b e1       	ldi	r18, 0x1B	; 27
    8b62:	3f e2       	ldi	r19, 0x2F	; 47
    8b64:	4d e5       	ldi	r20, 0x5D	; 93
    8b66:	5c e3       	ldi	r21, 0x3C	; 60
    8b68:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    8b6c:	6b 01       	movw	r12, r22
    8b6e:	7c 01       	movw	r14, r24
    8b70:	be 01       	movw	r22, r28
    8b72:	dd 0f       	add	r29, r29
    8b74:	88 0b       	sbc	r24, r24
    8b76:	99 0b       	sbc	r25, r25
    8b78:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    8b7c:	9b 01       	movw	r18, r22
    8b7e:	ac 01       	movw	r20, r24
    8b80:	c7 01       	movw	r24, r14
    8b82:	b6 01       	movw	r22, r12
    8b84:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8b88:	0c 94 e3 4d 	jmp	0x9bc6	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    8b8c:	20 e0       	ldi	r18, 0x00	; 0
    8b8e:	30 e0       	ldi	r19, 0x00	; 0
    8b90:	40 ee       	ldi	r20, 0xE0	; 224
    8b92:	50 e4       	ldi	r21, 0x40	; 64
    8b94:	c7 01       	movw	r24, r14
    8b96:	b6 01       	movw	r22, r12
    8b98:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    8b9c:	18 16       	cp	r1, r24
    8b9e:	0c f0       	brlt	.+2      	; 0x8ba2 <corectTrv+0x9be>
    8ba0:	54 c0       	rjmp	.+168    	; 0x8c4a <corectTrv+0xa66>
    8ba2:	20 e0       	ldi	r18, 0x00	; 0
    8ba4:	30 e0       	ldi	r19, 0x00	; 0
    8ba6:	40 e0       	ldi	r20, 0x00	; 0
    8ba8:	51 e4       	ldi	r21, 0x41	; 65
    8baa:	c7 01       	movw	r24, r14
    8bac:	b6 01       	movw	r22, r12
    8bae:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    8bb2:	18 16       	cp	r1, r24
    8bb4:	0c f4       	brge	.+2      	; 0x8bb8 <corectTrv+0x9d4>
    8bb6:	49 c0       	rjmp	.+146    	; 0x8c4a <corectTrv+0xa66>
		{
			return( 0.02252 * ds * ds * ds + 0.32376 * ds * ds + 2.48397 * ds + 3.72657)* k;
    8bb8:	2d ed       	ldi	r18, 0xDD	; 221
    8bba:	3b e7       	ldi	r19, 0x7B	; 123
    8bbc:	48 eb       	ldi	r20, 0xB8	; 184
    8bbe:	5c e3       	ldi	r21, 0x3C	; 60
    8bc0:	c5 01       	movw	r24, r10
    8bc2:	b4 01       	movw	r22, r8
    8bc4:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8bc8:	a5 01       	movw	r20, r10
    8bca:	94 01       	movw	r18, r8
    8bcc:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8bd0:	a5 01       	movw	r20, r10
    8bd2:	94 01       	movw	r18, r8
    8bd4:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8bd8:	6b 01       	movw	r12, r22
    8bda:	7c 01       	movw	r14, r24
    8bdc:	2f ed       	ldi	r18, 0xDF	; 223
    8bde:	33 ec       	ldi	r19, 0xC3	; 195
    8be0:	45 ea       	ldi	r20, 0xA5	; 165
    8be2:	5e e3       	ldi	r21, 0x3E	; 62
    8be4:	c5 01       	movw	r24, r10
    8be6:	b4 01       	movw	r22, r8
    8be8:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8bec:	a5 01       	movw	r20, r10
    8bee:	94 01       	movw	r18, r8
    8bf0:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8bf4:	9b 01       	movw	r18, r22
    8bf6:	ac 01       	movw	r20, r24
    8bf8:	c7 01       	movw	r24, r14
    8bfa:	b6 01       	movw	r22, r12
    8bfc:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8c00:	6b 01       	movw	r12, r22
    8c02:	7c 01       	movw	r14, r24
    8c04:	2d e5       	ldi	r18, 0x5D	; 93
    8c06:	39 ef       	ldi	r19, 0xF9	; 249
    8c08:	4e e1       	ldi	r20, 0x1E	; 30
    8c0a:	50 e4       	ldi	r21, 0x40	; 64
    8c0c:	c5 01       	movw	r24, r10
    8c0e:	b4 01       	movw	r22, r8
    8c10:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8c14:	9b 01       	movw	r18, r22
    8c16:	ac 01       	movw	r20, r24
    8c18:	c7 01       	movw	r24, r14
    8c1a:	b6 01       	movw	r22, r12
    8c1c:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8c20:	2f e1       	ldi	r18, 0x1F	; 31
    8c22:	30 e8       	ldi	r19, 0x80	; 128
    8c24:	4e e6       	ldi	r20, 0x6E	; 110
    8c26:	50 e4       	ldi	r21, 0x40	; 64
    8c28:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8c2c:	6b 01       	movw	r12, r22
    8c2e:	7c 01       	movw	r14, r24
    8c30:	be 01       	movw	r22, r28
    8c32:	dd 0f       	add	r29, r29
    8c34:	88 0b       	sbc	r24, r24
    8c36:	99 0b       	sbc	r25, r25
    8c38:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    8c3c:	9b 01       	movw	r18, r22
    8c3e:	ac 01       	movw	r20, r24
    8c40:	c7 01       	movw	r24, r14
    8c42:	b6 01       	movw	r22, r12
    8c44:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8c48:	be c7       	rjmp	.+3964   	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    8c4a:	20 e0       	ldi	r18, 0x00	; 0
    8c4c:	30 e0       	ldi	r19, 0x00	; 0
    8c4e:	40 e0       	ldi	r20, 0x00	; 0
    8c50:	51 e4       	ldi	r21, 0x41	; 65
    8c52:	c7 01       	movw	r24, r14
    8c54:	b6 01       	movw	r22, r12
    8c56:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    8c5a:	18 16       	cp	r1, r24
    8c5c:	0c f0       	brlt	.+2      	; 0x8c60 <corectTrv+0xa7c>
    8c5e:	54 c0       	rjmp	.+168    	; 0x8d08 <corectTrv+0xb24>
    8c60:	20 e0       	ldi	r18, 0x00	; 0
    8c62:	30 e0       	ldi	r19, 0x00	; 0
    8c64:	40 e1       	ldi	r20, 0x10	; 16
    8c66:	51 e4       	ldi	r21, 0x41	; 65
    8c68:	c7 01       	movw	r24, r14
    8c6a:	b6 01       	movw	r22, r12
    8c6c:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    8c70:	18 16       	cp	r1, r24
    8c72:	0c f4       	brge	.+2      	; 0x8c76 <corectTrv+0xa92>
    8c74:	49 c0       	rjmp	.+146    	; 0x8d08 <corectTrv+0xb24>
		{
			return( 0.02106 * ds * ds * ds + 0.30427 * ds * ds + 2.44311 * ds + 6.31417)* k;
    8c76:	25 e0       	ldi	r18, 0x05	; 5
    8c78:	36 e8       	ldi	r19, 0x86	; 134
    8c7a:	4c ea       	ldi	r20, 0xAC	; 172
    8c7c:	5c e3       	ldi	r21, 0x3C	; 60
    8c7e:	c5 01       	movw	r24, r10
    8c80:	b4 01       	movw	r22, r8
    8c82:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8c86:	a5 01       	movw	r20, r10
    8c88:	94 01       	movw	r18, r8
    8c8a:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8c8e:	a5 01       	movw	r20, r10
    8c90:	94 01       	movw	r18, r8
    8c92:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8c96:	6b 01       	movw	r12, r22
    8c98:	7c 01       	movw	r14, r24
    8c9a:	27 e4       	ldi	r18, 0x47	; 71
    8c9c:	39 ec       	ldi	r19, 0xC9	; 201
    8c9e:	4b e9       	ldi	r20, 0x9B	; 155
    8ca0:	5e e3       	ldi	r21, 0x3E	; 62
    8ca2:	c5 01       	movw	r24, r10
    8ca4:	b4 01       	movw	r22, r8
    8ca6:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8caa:	a5 01       	movw	r20, r10
    8cac:	94 01       	movw	r18, r8
    8cae:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8cb2:	9b 01       	movw	r18, r22
    8cb4:	ac 01       	movw	r20, r24
    8cb6:	c7 01       	movw	r24, r14
    8cb8:	b6 01       	movw	r22, r12
    8cba:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8cbe:	6b 01       	movw	r12, r22
    8cc0:	7c 01       	movw	r14, r24
    8cc2:	2a ee       	ldi	r18, 0xEA	; 234
    8cc4:	3b e5       	ldi	r19, 0x5B	; 91
    8cc6:	4c e1       	ldi	r20, 0x1C	; 28
    8cc8:	50 e4       	ldi	r21, 0x40	; 64
    8cca:	c5 01       	movw	r24, r10
    8ccc:	b4 01       	movw	r22, r8
    8cce:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8cd2:	9b 01       	movw	r18, r22
    8cd4:	ac 01       	movw	r20, r24
    8cd6:	c7 01       	movw	r24, r14
    8cd8:	b6 01       	movw	r22, r12
    8cda:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8cde:	2e ea       	ldi	r18, 0xAE	; 174
    8ce0:	3d e0       	ldi	r19, 0x0D	; 13
    8ce2:	4a ec       	ldi	r20, 0xCA	; 202
    8ce4:	50 e4       	ldi	r21, 0x40	; 64
    8ce6:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8cea:	6b 01       	movw	r12, r22
    8cec:	7c 01       	movw	r14, r24
    8cee:	be 01       	movw	r22, r28
    8cf0:	dd 0f       	add	r29, r29
    8cf2:	88 0b       	sbc	r24, r24
    8cf4:	99 0b       	sbc	r25, r25
    8cf6:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    8cfa:	9b 01       	movw	r18, r22
    8cfc:	ac 01       	movw	r20, r24
    8cfe:	c7 01       	movw	r24, r14
    8d00:	b6 01       	movw	r22, r12
    8d02:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8d06:	5f c7       	rjmp	.+3774   	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    8d08:	20 e0       	ldi	r18, 0x00	; 0
    8d0a:	30 e0       	ldi	r19, 0x00	; 0
    8d0c:	40 e1       	ldi	r20, 0x10	; 16
    8d0e:	51 e4       	ldi	r21, 0x41	; 65
    8d10:	c7 01       	movw	r24, r14
    8d12:	b6 01       	movw	r22, r12
    8d14:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    8d18:	18 16       	cp	r1, r24
    8d1a:	0c f0       	brlt	.+2      	; 0x8d1e <corectTrv+0xb3a>
    8d1c:	54 c0       	rjmp	.+168    	; 0x8dc6 <corectTrv+0xbe2>
    8d1e:	20 e0       	ldi	r18, 0x00	; 0
    8d20:	30 e0       	ldi	r19, 0x00	; 0
    8d22:	40 e2       	ldi	r20, 0x20	; 32
    8d24:	51 e4       	ldi	r21, 0x41	; 65
    8d26:	c7 01       	movw	r24, r14
    8d28:	b6 01       	movw	r22, r12
    8d2a:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    8d2e:	18 16       	cp	r1, r24
    8d30:	0c f4       	brge	.+2      	; 0x8d34 <corectTrv+0xb50>
    8d32:	49 c0       	rjmp	.+146    	; 0x8dc6 <corectTrv+0xbe2>
		{
			return( 0.02106 * ds * ds * ds + 0.32749 * ds * ds + 2.67528 * ds + 8.74842)* k;
    8d34:	25 e0       	ldi	r18, 0x05	; 5
    8d36:	36 e8       	ldi	r19, 0x86	; 134
    8d38:	4c ea       	ldi	r20, 0xAC	; 172
    8d3a:	5c e3       	ldi	r21, 0x3C	; 60
    8d3c:	c5 01       	movw	r24, r10
    8d3e:	b4 01       	movw	r22, r8
    8d40:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8d44:	a5 01       	movw	r20, r10
    8d46:	94 01       	movw	r18, r8
    8d48:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8d4c:	a5 01       	movw	r20, r10
    8d4e:	94 01       	movw	r18, r8
    8d50:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8d54:	6b 01       	movw	r12, r22
    8d56:	7c 01       	movw	r14, r24
    8d58:	25 ec       	ldi	r18, 0xC5	; 197
    8d5a:	3c ea       	ldi	r19, 0xAC	; 172
    8d5c:	47 ea       	ldi	r20, 0xA7	; 167
    8d5e:	5e e3       	ldi	r21, 0x3E	; 62
    8d60:	c5 01       	movw	r24, r10
    8d62:	b4 01       	movw	r22, r8
    8d64:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8d68:	a5 01       	movw	r20, r10
    8d6a:	94 01       	movw	r18, r8
    8d6c:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8d70:	9b 01       	movw	r18, r22
    8d72:	ac 01       	movw	r20, r24
    8d74:	c7 01       	movw	r24, r14
    8d76:	b6 01       	movw	r22, r12
    8d78:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8d7c:	6b 01       	movw	r12, r22
    8d7e:	7c 01       	movw	r14, r24
    8d80:	2a ec       	ldi	r18, 0xCA	; 202
    8d82:	37 e3       	ldi	r19, 0x37	; 55
    8d84:	4b e2       	ldi	r20, 0x2B	; 43
    8d86:	50 e4       	ldi	r21, 0x40	; 64
    8d88:	c5 01       	movw	r24, r10
    8d8a:	b4 01       	movw	r22, r8
    8d8c:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8d90:	9b 01       	movw	r18, r22
    8d92:	ac 01       	movw	r20, r24
    8d94:	c7 01       	movw	r24, r14
    8d96:	b6 01       	movw	r22, r12
    8d98:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8d9c:	27 e8       	ldi	r18, 0x87	; 135
    8d9e:	39 ef       	ldi	r19, 0xF9	; 249
    8da0:	4b e0       	ldi	r20, 0x0B	; 11
    8da2:	51 e4       	ldi	r21, 0x41	; 65
    8da4:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8da8:	6b 01       	movw	r12, r22
    8daa:	7c 01       	movw	r14, r24
    8dac:	be 01       	movw	r22, r28
    8dae:	dd 0f       	add	r29, r29
    8db0:	88 0b       	sbc	r24, r24
    8db2:	99 0b       	sbc	r25, r25
    8db4:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    8db8:	9b 01       	movw	r18, r22
    8dba:	ac 01       	movw	r20, r24
    8dbc:	c7 01       	movw	r24, r14
    8dbe:	b6 01       	movw	r22, r12
    8dc0:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8dc4:	00 c7       	rjmp	.+3584   	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    8dc6:	20 e0       	ldi	r18, 0x00	; 0
    8dc8:	30 e0       	ldi	r19, 0x00	; 0
    8dca:	40 e2       	ldi	r20, 0x20	; 32
    8dcc:	51 e4       	ldi	r21, 0x41	; 65
    8dce:	c7 01       	movw	r24, r14
    8dd0:	b6 01       	movw	r22, r12
    8dd2:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    8dd6:	18 16       	cp	r1, r24
    8dd8:	0c f0       	brlt	.+2      	; 0x8ddc <corectTrv+0xbf8>
    8dda:	54 c0       	rjmp	.+168    	; 0x8e84 <corectTrv+0xca0>
    8ddc:	20 e0       	ldi	r18, 0x00	; 0
    8dde:	30 e0       	ldi	r19, 0x00	; 0
    8de0:	40 e3       	ldi	r20, 0x30	; 48
    8de2:	51 e4       	ldi	r21, 0x41	; 65
    8de4:	c7 01       	movw	r24, r14
    8de6:	b6 01       	movw	r22, r12
    8de8:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    8dec:	18 16       	cp	r1, r24
    8dee:	0c f4       	brge	.+2      	; 0x8df2 <corectTrv+0xc0e>
    8df0:	49 c0       	rjmp	.+146    	; 0x8e84 <corectTrv+0xca0>
		{
			return( 0.02252 * ds * ds * ds + 0.35182 * ds * ds + 2.76462 * ds + 11.25664)* k;
    8df2:	2d ed       	ldi	r18, 0xDD	; 221
    8df4:	3b e7       	ldi	r19, 0x7B	; 123
    8df6:	48 eb       	ldi	r20, 0xB8	; 184
    8df8:	5c e3       	ldi	r21, 0x3C	; 60
    8dfa:	c5 01       	movw	r24, r10
    8dfc:	b4 01       	movw	r22, r8
    8dfe:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8e02:	a5 01       	movw	r20, r10
    8e04:	94 01       	movw	r18, r8
    8e06:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8e0a:	a5 01       	movw	r20, r10
    8e0c:	94 01       	movw	r18, r8
    8e0e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8e12:	6b 01       	movw	r12, r22
    8e14:	7c 01       	movw	r14, r24
    8e16:	20 ec       	ldi	r18, 0xC0	; 192
    8e18:	31 e2       	ldi	r19, 0x21	; 33
    8e1a:	44 eb       	ldi	r20, 0xB4	; 180
    8e1c:	5e e3       	ldi	r21, 0x3E	; 62
    8e1e:	c5 01       	movw	r24, r10
    8e20:	b4 01       	movw	r22, r8
    8e22:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8e26:	a5 01       	movw	r20, r10
    8e28:	94 01       	movw	r18, r8
    8e2a:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8e2e:	9b 01       	movw	r18, r22
    8e30:	ac 01       	movw	r20, r24
    8e32:	c7 01       	movw	r24, r14
    8e34:	b6 01       	movw	r22, r12
    8e36:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8e3a:	6b 01       	movw	r12, r22
    8e3c:	7c 01       	movw	r14, r24
    8e3e:	29 e8       	ldi	r18, 0x89	; 137
    8e40:	3f ee       	ldi	r19, 0xEF	; 239
    8e42:	40 e3       	ldi	r20, 0x30	; 48
    8e44:	50 e4       	ldi	r21, 0x40	; 64
    8e46:	c5 01       	movw	r24, r10
    8e48:	b4 01       	movw	r22, r8
    8e4a:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8e4e:	9b 01       	movw	r18, r22
    8e50:	ac 01       	movw	r20, r24
    8e52:	c7 01       	movw	r24, r14
    8e54:	b6 01       	movw	r22, r12
    8e56:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8e5a:	23 e3       	ldi	r18, 0x33	; 51
    8e5c:	3b e1       	ldi	r19, 0x1B	; 27
    8e5e:	44 e3       	ldi	r20, 0x34	; 52
    8e60:	51 e4       	ldi	r21, 0x41	; 65
    8e62:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8e66:	6b 01       	movw	r12, r22
    8e68:	7c 01       	movw	r14, r24
    8e6a:	be 01       	movw	r22, r28
    8e6c:	dd 0f       	add	r29, r29
    8e6e:	88 0b       	sbc	r24, r24
    8e70:	99 0b       	sbc	r25, r25
    8e72:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    8e76:	9b 01       	movw	r18, r22
    8e78:	ac 01       	movw	r20, r24
    8e7a:	c7 01       	movw	r24, r14
    8e7c:	b6 01       	movw	r22, r12
    8e7e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8e82:	a1 c6       	rjmp	.+3394   	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    8e84:	20 e0       	ldi	r18, 0x00	; 0
    8e86:	30 e0       	ldi	r19, 0x00	; 0
    8e88:	40 e3       	ldi	r20, 0x30	; 48
    8e8a:	51 e4       	ldi	r21, 0x41	; 65
    8e8c:	c7 01       	movw	r24, r14
    8e8e:	b6 01       	movw	r22, r12
    8e90:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    8e94:	18 16       	cp	r1, r24
    8e96:	0c f0       	brlt	.+2      	; 0x8e9a <corectTrv+0xcb6>
    8e98:	54 c0       	rjmp	.+168    	; 0x8f42 <corectTrv+0xd5e>
    8e9a:	20 e0       	ldi	r18, 0x00	; 0
    8e9c:	30 e0       	ldi	r19, 0x00	; 0
    8e9e:	40 e4       	ldi	r20, 0x40	; 64
    8ea0:	51 e4       	ldi	r21, 0x41	; 65
    8ea2:	c7 01       	movw	r24, r14
    8ea4:	b6 01       	movw	r22, r12
    8ea6:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    8eaa:	18 16       	cp	r1, r24
    8eac:	0c f4       	brge	.+2      	; 0x8eb0 <corectTrv+0xccc>
    8eae:	49 c0       	rjmp	.+146    	; 0x8f42 <corectTrv+0xd5e>
		{
			return( 0.01251 * ds * ds * ds + 0.18754 * ds * ds + 2.12069 * ds + 14.98441)* k;
    8eb0:	2e eb       	ldi	r18, 0xBE	; 190
    8eb2:	36 ef       	ldi	r19, 0xF6	; 246
    8eb4:	4c e4       	ldi	r20, 0x4C	; 76
    8eb6:	5c e3       	ldi	r21, 0x3C	; 60
    8eb8:	c5 01       	movw	r24, r10
    8eba:	b4 01       	movw	r22, r8
    8ebc:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8ec0:	a5 01       	movw	r20, r10
    8ec2:	94 01       	movw	r18, r8
    8ec4:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8ec8:	a5 01       	movw	r20, r10
    8eca:	94 01       	movw	r18, r8
    8ecc:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8ed0:	6b 01       	movw	r12, r22
    8ed2:	7c 01       	movw	r14, r24
    8ed4:	2c e7       	ldi	r18, 0x7C	; 124
    8ed6:	3a e0       	ldi	r19, 0x0A	; 10
    8ed8:	40 e4       	ldi	r20, 0x40	; 64
    8eda:	5e e3       	ldi	r21, 0x3E	; 62
    8edc:	c5 01       	movw	r24, r10
    8ede:	b4 01       	movw	r22, r8
    8ee0:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8ee4:	a5 01       	movw	r20, r10
    8ee6:	94 01       	movw	r18, r8
    8ee8:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8eec:	9b 01       	movw	r18, r22
    8eee:	ac 01       	movw	r20, r24
    8ef0:	c7 01       	movw	r24, r14
    8ef2:	b6 01       	movw	r22, r12
    8ef4:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8ef8:	6b 01       	movw	r12, r22
    8efa:	7c 01       	movw	r14, r24
    8efc:	23 e6       	ldi	r18, 0x63	; 99
    8efe:	39 eb       	ldi	r19, 0xB9	; 185
    8f00:	47 e0       	ldi	r20, 0x07	; 7
    8f02:	50 e4       	ldi	r21, 0x40	; 64
    8f04:	c5 01       	movw	r24, r10
    8f06:	b4 01       	movw	r22, r8
    8f08:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8f0c:	9b 01       	movw	r18, r22
    8f0e:	ac 01       	movw	r20, r24
    8f10:	c7 01       	movw	r24, r14
    8f12:	b6 01       	movw	r22, r12
    8f14:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8f18:	25 e2       	ldi	r18, 0x25	; 37
    8f1a:	30 ec       	ldi	r19, 0xC0	; 192
    8f1c:	4f e6       	ldi	r20, 0x6F	; 111
    8f1e:	51 e4       	ldi	r21, 0x41	; 65
    8f20:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8f24:	6b 01       	movw	r12, r22
    8f26:	7c 01       	movw	r14, r24
    8f28:	be 01       	movw	r22, r28
    8f2a:	dd 0f       	add	r29, r29
    8f2c:	88 0b       	sbc	r24, r24
    8f2e:	99 0b       	sbc	r25, r25
    8f30:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    8f34:	9b 01       	movw	r18, r22
    8f36:	ac 01       	movw	r20, r24
    8f38:	c7 01       	movw	r24, r14
    8f3a:	b6 01       	movw	r22, r12
    8f3c:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8f40:	42 c6       	rjmp	.+3204   	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    8f42:	20 e0       	ldi	r18, 0x00	; 0
    8f44:	30 e0       	ldi	r19, 0x00	; 0
    8f46:	40 e4       	ldi	r20, 0x40	; 64
    8f48:	51 e4       	ldi	r21, 0x41	; 65
    8f4a:	c7 01       	movw	r24, r14
    8f4c:	b6 01       	movw	r22, r12
    8f4e:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    8f52:	18 16       	cp	r1, r24
    8f54:	dc f5       	brge	.+118    	; 0x8fcc <corectTrv+0xde8>
    8f56:	20 e0       	ldi	r18, 0x00	; 0
    8f58:	30 e0       	ldi	r19, 0x00	; 0
    8f5a:	40 e5       	ldi	r20, 0x50	; 80
    8f5c:	51 e4       	ldi	r21, 0x41	; 65
    8f5e:	c7 01       	movw	r24, r14
    8f60:	b6 01       	movw	r22, r12
    8f62:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    8f66:	18 16       	cp	r1, r24
    8f68:	8c f1       	brlt	.+98     	; 0x8fcc <corectTrv+0xde8>
		{
			return(0.062 * ds * ds + 1.818 * ds + 15.22)* k;
    8f6a:	26 eb       	ldi	r18, 0xB6	; 182
    8f6c:	33 ef       	ldi	r19, 0xF3	; 243
    8f6e:	4d e7       	ldi	r20, 0x7D	; 125
    8f70:	5d e3       	ldi	r21, 0x3D	; 61
    8f72:	c5 01       	movw	r24, r10
    8f74:	b4 01       	movw	r22, r8
    8f76:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8f7a:	a5 01       	movw	r20, r10
    8f7c:	94 01       	movw	r18, r8
    8f7e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8f82:	6b 01       	movw	r12, r22
    8f84:	7c 01       	movw	r14, r24
    8f86:	29 e3       	ldi	r18, 0x39	; 57
    8f88:	34 eb       	ldi	r19, 0xB4	; 180
    8f8a:	48 ee       	ldi	r20, 0xE8	; 232
    8f8c:	5f e3       	ldi	r21, 0x3F	; 63
    8f8e:	c5 01       	movw	r24, r10
    8f90:	b4 01       	movw	r22, r8
    8f92:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8f96:	9b 01       	movw	r18, r22
    8f98:	ac 01       	movw	r20, r24
    8f9a:	c7 01       	movw	r24, r14
    8f9c:	b6 01       	movw	r22, r12
    8f9e:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8fa2:	2f e1       	ldi	r18, 0x1F	; 31
    8fa4:	35 e8       	ldi	r19, 0x85	; 133
    8fa6:	43 e7       	ldi	r20, 0x73	; 115
    8fa8:	51 e4       	ldi	r21, 0x41	; 65
    8faa:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    8fae:	6b 01       	movw	r12, r22
    8fb0:	7c 01       	movw	r14, r24
    8fb2:	be 01       	movw	r22, r28
    8fb4:	dd 0f       	add	r29, r29
    8fb6:	88 0b       	sbc	r24, r24
    8fb8:	99 0b       	sbc	r25, r25
    8fba:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    8fbe:	9b 01       	movw	r18, r22
    8fc0:	ac 01       	movw	r20, r24
    8fc2:	c7 01       	movw	r24, r14
    8fc4:	b6 01       	movw	r22, r12
    8fc6:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    8fca:	fd c5       	rjmp	.+3066   	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    8fcc:	20 e0       	ldi	r18, 0x00	; 0
    8fce:	30 e0       	ldi	r19, 0x00	; 0
    8fd0:	40 e5       	ldi	r20, 0x50	; 80
    8fd2:	51 e4       	ldi	r21, 0x41	; 65
    8fd4:	c7 01       	movw	r24, r14
    8fd6:	b6 01       	movw	r22, r12
    8fd8:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    8fdc:	18 16       	cp	r1, r24
    8fde:	dc f5       	brge	.+118    	; 0x9056 <corectTrv+0xe72>
    8fe0:	20 e0       	ldi	r18, 0x00	; 0
    8fe2:	30 e0       	ldi	r19, 0x00	; 0
    8fe4:	40 e6       	ldi	r20, 0x60	; 96
    8fe6:	51 e4       	ldi	r21, 0x41	; 65
    8fe8:	c7 01       	movw	r24, r14
    8fea:	b6 01       	movw	r22, r12
    8fec:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    8ff0:	18 16       	cp	r1, r24
    8ff2:	8c f1       	brlt	.+98     	; 0x9056 <corectTrv+0xe72>
		{
			return( 0.097 * ds * ds + 1.941 * ds + 16.00)* k;
    8ff4:	20 ef       	ldi	r18, 0xF0	; 240
    8ff6:	37 ea       	ldi	r19, 0xA7	; 167
    8ff8:	46 ec       	ldi	r20, 0xC6	; 198
    8ffa:	5d e3       	ldi	r21, 0x3D	; 61
    8ffc:	c5 01       	movw	r24, r10
    8ffe:	b4 01       	movw	r22, r8
    9000:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9004:	a5 01       	movw	r20, r10
    9006:	94 01       	movw	r18, r8
    9008:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    900c:	6b 01       	movw	r12, r22
    900e:	7c 01       	movw	r14, r24
    9010:	20 eb       	ldi	r18, 0xB0	; 176
    9012:	32 e7       	ldi	r19, 0x72	; 114
    9014:	48 ef       	ldi	r20, 0xF8	; 248
    9016:	5f e3       	ldi	r21, 0x3F	; 63
    9018:	c5 01       	movw	r24, r10
    901a:	b4 01       	movw	r22, r8
    901c:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9020:	9b 01       	movw	r18, r22
    9022:	ac 01       	movw	r20, r24
    9024:	c7 01       	movw	r24, r14
    9026:	b6 01       	movw	r22, r12
    9028:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    902c:	20 e0       	ldi	r18, 0x00	; 0
    902e:	30 e0       	ldi	r19, 0x00	; 0
    9030:	40 e8       	ldi	r20, 0x80	; 128
    9032:	51 e4       	ldi	r21, 0x41	; 65
    9034:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    9038:	6b 01       	movw	r12, r22
    903a:	7c 01       	movw	r14, r24
    903c:	be 01       	movw	r22, r28
    903e:	dd 0f       	add	r29, r29
    9040:	88 0b       	sbc	r24, r24
    9042:	99 0b       	sbc	r25, r25
    9044:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    9048:	9b 01       	movw	r18, r22
    904a:	ac 01       	movw	r20, r24
    904c:	c7 01       	movw	r24, r14
    904e:	b6 01       	movw	r22, r12
    9050:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9054:	b8 c5       	rjmp	.+2928   	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    9056:	20 e0       	ldi	r18, 0x00	; 0
    9058:	30 e0       	ldi	r19, 0x00	; 0
    905a:	40 e6       	ldi	r20, 0x60	; 96
    905c:	51 e4       	ldi	r21, 0x41	; 65
    905e:	c7 01       	movw	r24, r14
    9060:	b6 01       	movw	r22, r12
    9062:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    9066:	18 16       	cp	r1, r24
    9068:	0c f0       	brlt	.+2      	; 0x906c <corectTrv+0xe88>
    906a:	54 c0       	rjmp	.+168    	; 0x9114 <corectTrv+0xf30>
    906c:	20 e0       	ldi	r18, 0x00	; 0
    906e:	30 e0       	ldi	r19, 0x00	; 0
    9070:	40 e7       	ldi	r20, 0x70	; 112
    9072:	51 e4       	ldi	r21, 0x41	; 65
    9074:	c7 01       	movw	r24, r14
    9076:	b6 01       	movw	r22, r12
    9078:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    907c:	18 16       	cp	r1, r24
    907e:	0c f4       	brge	.+2      	; 0x9082 <corectTrv+0xe9e>
    9080:	49 c0       	rjmp	.+146    	; 0x9114 <corectTrv+0xf30>
		{
			return( 0.01598 * ds * ds * ds + 0.35913 * ds * ds + 2.90559 * ds + 17.70294)* k;
    9082:	2d e7       	ldi	r18, 0x7D	; 125
    9084:	38 ee       	ldi	r19, 0xE8	; 232
    9086:	42 e8       	ldi	r20, 0x82	; 130
    9088:	5c e3       	ldi	r21, 0x3C	; 60
    908a:	c5 01       	movw	r24, r10
    908c:	b4 01       	movw	r22, r8
    908e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9092:	a5 01       	movw	r20, r10
    9094:	94 01       	movw	r18, r8
    9096:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    909a:	a5 01       	movw	r20, r10
    909c:	94 01       	movw	r18, r8
    909e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    90a2:	6b 01       	movw	r12, r22
    90a4:	7c 01       	movw	r14, r24
    90a6:	23 ee       	ldi	r18, 0xE3	; 227
    90a8:	3f ed       	ldi	r19, 0xDF	; 223
    90aa:	47 eb       	ldi	r20, 0xB7	; 183
    90ac:	5e e3       	ldi	r21, 0x3E	; 62
    90ae:	c5 01       	movw	r24, r10
    90b0:	b4 01       	movw	r22, r8
    90b2:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    90b6:	a5 01       	movw	r20, r10
    90b8:	94 01       	movw	r18, r8
    90ba:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    90be:	9b 01       	movw	r18, r22
    90c0:	ac 01       	movw	r20, r24
    90c2:	c7 01       	movw	r24, r14
    90c4:	b6 01       	movw	r22, r12
    90c6:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    90ca:	6b 01       	movw	r12, r22
    90cc:	7c 01       	movw	r14, r24
    90ce:	20 e3       	ldi	r18, 0x30	; 48
    90d0:	35 ef       	ldi	r19, 0xF5	; 245
    90d2:	49 e3       	ldi	r20, 0x39	; 57
    90d4:	50 e4       	ldi	r21, 0x40	; 64
    90d6:	c5 01       	movw	r24, r10
    90d8:	b4 01       	movw	r22, r8
    90da:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    90de:	9b 01       	movw	r18, r22
    90e0:	ac 01       	movw	r20, r24
    90e2:	c7 01       	movw	r24, r14
    90e4:	b6 01       	movw	r22, r12
    90e6:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    90ea:	2f e9       	ldi	r18, 0x9F	; 159
    90ec:	3f e9       	ldi	r19, 0x9F	; 159
    90ee:	4d e8       	ldi	r20, 0x8D	; 141
    90f0:	51 e4       	ldi	r21, 0x41	; 65
    90f2:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    90f6:	6b 01       	movw	r12, r22
    90f8:	7c 01       	movw	r14, r24
    90fa:	be 01       	movw	r22, r28
    90fc:	dd 0f       	add	r29, r29
    90fe:	88 0b       	sbc	r24, r24
    9100:	99 0b       	sbc	r25, r25
    9102:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    9106:	9b 01       	movw	r18, r22
    9108:	ac 01       	movw	r20, r24
    910a:	c7 01       	movw	r24, r14
    910c:	b6 01       	movw	r22, r12
    910e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9112:	59 c5       	rjmp	.+2738   	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    9114:	20 e0       	ldi	r18, 0x00	; 0
    9116:	30 e0       	ldi	r19, 0x00	; 0
    9118:	40 e7       	ldi	r20, 0x70	; 112
    911a:	51 e4       	ldi	r21, 0x41	; 65
    911c:	c7 01       	movw	r24, r14
    911e:	b6 01       	movw	r22, r12
    9120:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    9124:	18 16       	cp	r1, r24
    9126:	0c f0       	brlt	.+2      	; 0x912a <corectTrv+0xf46>
    9128:	54 c0       	rjmp	.+168    	; 0x91d2 <corectTrv+0xfee>
    912a:	20 e0       	ldi	r18, 0x00	; 0
    912c:	30 e0       	ldi	r19, 0x00	; 0
    912e:	40 e8       	ldi	r20, 0x80	; 128
    9130:	51 e4       	ldi	r21, 0x41	; 65
    9132:	c7 01       	movw	r24, r14
    9134:	b6 01       	movw	r22, r12
    9136:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    913a:	18 16       	cp	r1, r24
    913c:	0c f4       	brge	.+2      	; 0x9140 <corectTrv+0xf5c>
    913e:	49 c0       	rjmp	.+146    	; 0x91d2 <corectTrv+0xfee>
		{
			return( 0.02358 * ds * ds * ds + 0.48252 * ds * ds + 3.36313 * ds + 20.09441)* k;
    9140:	28 ed       	ldi	r18, 0xD8	; 216
    9142:	3a e2       	ldi	r19, 0x2A	; 42
    9144:	41 ec       	ldi	r20, 0xC1	; 193
    9146:	5c e3       	ldi	r21, 0x3C	; 60
    9148:	c5 01       	movw	r24, r10
    914a:	b4 01       	movw	r22, r8
    914c:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9150:	a5 01       	movw	r20, r10
    9152:	94 01       	movw	r18, r8
    9154:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9158:	a5 01       	movw	r20, r10
    915a:	94 01       	movw	r18, r8
    915c:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9160:	6b 01       	movw	r12, r22
    9162:	7c 01       	movw	r14, r24
    9164:	2d ed       	ldi	r18, 0xDD	; 221
    9166:	3c e0       	ldi	r19, 0x0C	; 12
    9168:	47 ef       	ldi	r20, 0xF7	; 247
    916a:	5e e3       	ldi	r21, 0x3E	; 62
    916c:	c5 01       	movw	r24, r10
    916e:	b4 01       	movw	r22, r8
    9170:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9174:	a5 01       	movw	r20, r10
    9176:	94 01       	movw	r18, r8
    9178:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    917c:	9b 01       	movw	r18, r22
    917e:	ac 01       	movw	r20, r24
    9180:	c7 01       	movw	r24, r14
    9182:	b6 01       	movw	r22, r12
    9184:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    9188:	6b 01       	movw	r12, r22
    918a:	7c 01       	movw	r14, r24
    918c:	26 e8       	ldi	r18, 0x86	; 134
    918e:	3d e3       	ldi	r19, 0x3D	; 61
    9190:	47 e5       	ldi	r20, 0x57	; 87
    9192:	50 e4       	ldi	r21, 0x40	; 64
    9194:	c5 01       	movw	r24, r10
    9196:	b4 01       	movw	r22, r8
    9198:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    919c:	9b 01       	movw	r18, r22
    919e:	ac 01       	movw	r20, r24
    91a0:	c7 01       	movw	r24, r14
    91a2:	b6 01       	movw	r22, r12
    91a4:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    91a8:	2a e5       	ldi	r18, 0x5A	; 90
    91aa:	31 ec       	ldi	r19, 0xC1	; 193
    91ac:	40 ea       	ldi	r20, 0xA0	; 160
    91ae:	51 e4       	ldi	r21, 0x41	; 65
    91b0:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    91b4:	6b 01       	movw	r12, r22
    91b6:	7c 01       	movw	r14, r24
    91b8:	be 01       	movw	r22, r28
    91ba:	dd 0f       	add	r29, r29
    91bc:	88 0b       	sbc	r24, r24
    91be:	99 0b       	sbc	r25, r25
    91c0:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    91c4:	9b 01       	movw	r18, r22
    91c6:	ac 01       	movw	r20, r24
    91c8:	c7 01       	movw	r24, r14
    91ca:	b6 01       	movw	r22, r12
    91cc:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    91d0:	fa c4       	rjmp	.+2548   	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 9)
    91d2:	20 e0       	ldi	r18, 0x00	; 0
    91d4:	30 e0       	ldi	r19, 0x00	; 0
    91d6:	40 e8       	ldi	r20, 0x80	; 128
    91d8:	51 e4       	ldi	r21, 0x41	; 65
    91da:	c7 01       	movw	r24, r14
    91dc:	b6 01       	movw	r22, r12
    91de:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    91e2:	18 16       	cp	r1, r24
    91e4:	0c f0       	brlt	.+2      	; 0x91e8 <corectTrv+0x1004>
    91e6:	e0 c4       	rjmp	.+2496   	; 0x9ba8 <corectTrv+0x19c4>
		{
			return( 0.01076 * ds * ds * ds + 0.28823 * ds * ds + 2.82362 * ds + 25.08042)* k;
    91e8:	26 eb       	ldi	r18, 0xB6	; 182
    91ea:	3a e4       	ldi	r19, 0x4A	; 74
    91ec:	40 e3       	ldi	r20, 0x30	; 48
    91ee:	5c e3       	ldi	r21, 0x3C	; 60
    91f0:	c5 01       	movw	r24, r10
    91f2:	b4 01       	movw	r22, r8
    91f4:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    91f8:	a5 01       	movw	r20, r10
    91fa:	94 01       	movw	r18, r8
    91fc:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9200:	a5 01       	movw	r20, r10
    9202:	94 01       	movw	r18, r8
    9204:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9208:	6b 01       	movw	r12, r22
    920a:	7c 01       	movw	r14, r24
    920c:	22 ee       	ldi	r18, 0xE2	; 226
    920e:	32 e9       	ldi	r19, 0x92	; 146
    9210:	43 e9       	ldi	r20, 0x93	; 147
    9212:	5e e3       	ldi	r21, 0x3E	; 62
    9214:	c5 01       	movw	r24, r10
    9216:	b4 01       	movw	r22, r8
    9218:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    921c:	a5 01       	movw	r20, r10
    921e:	94 01       	movw	r18, r8
    9220:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9224:	9b 01       	movw	r18, r22
    9226:	ac 01       	movw	r20, r24
    9228:	c7 01       	movw	r24, r14
    922a:	b6 01       	movw	r22, r12
    922c:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    9230:	6b 01       	movw	r12, r22
    9232:	7c 01       	movw	r14, r24
    9234:	21 e3       	ldi	r18, 0x31	; 49
    9236:	36 eb       	ldi	r19, 0xB6	; 182
    9238:	44 e3       	ldi	r20, 0x34	; 52
    923a:	50 e4       	ldi	r21, 0x40	; 64
    923c:	c5 01       	movw	r24, r10
    923e:	b4 01       	movw	r22, r8
    9240:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9244:	9b 01       	movw	r18, r22
    9246:	ac 01       	movw	r20, r24
    9248:	c7 01       	movw	r24, r14
    924a:	b6 01       	movw	r22, r12
    924c:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    9250:	23 eb       	ldi	r18, 0xB3	; 179
    9252:	34 ea       	ldi	r19, 0xA4	; 164
    9254:	48 ec       	ldi	r20, 0xC8	; 200
    9256:	51 e4       	ldi	r21, 0x41	; 65
    9258:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    925c:	6b 01       	movw	r12, r22
    925e:	7c 01       	movw	r14, r24
    9260:	be 01       	movw	r22, r28
    9262:	dd 0f       	add	r29, r29
    9264:	88 0b       	sbc	r24, r24
    9266:	99 0b       	sbc	r25, r25
    9268:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    926c:	9b 01       	movw	r18, r22
    926e:	ac 01       	movw	r20, r24
    9270:	c7 01       	movw	r24, r14
    9272:	b6 01       	movw	r22, r12
    9274:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9278:	a6 c4       	rjmp	.+2380   	; 0x9bc6 <corectTrv+0x19e2>
		}
	}

	else if (ds >= 0 && ds <= 10)
    927a:	20 e0       	ldi	r18, 0x00	; 0
    927c:	30 e0       	ldi	r19, 0x00	; 0
    927e:	a9 01       	movw	r20, r18
    9280:	c5 01       	movw	r24, r10
    9282:	b4 01       	movw	r22, r8
    9284:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    9288:	88 23       	and	r24, r24
    928a:	0c f4       	brge	.+2      	; 0x928e <corectTrv+0x10aa>
    928c:	e9 c2       	rjmp	.+1490   	; 0x9860 <corectTrv+0x167c>
    928e:	20 e0       	ldi	r18, 0x00	; 0
    9290:	30 e0       	ldi	r19, 0x00	; 0
    9292:	40 e2       	ldi	r20, 0x20	; 32
    9294:	51 e4       	ldi	r21, 0x41	; 65
    9296:	c5 01       	movw	r24, r10
    9298:	b4 01       	movw	r22, r8
    929a:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    929e:	18 16       	cp	r1, r24
    92a0:	0c f4       	brge	.+2      	; 0x92a4 <corectTrv+0x10c0>
    92a2:	de c2       	rjmp	.+1468   	; 0x9860 <corectTrv+0x167c>
	{
		if (Superheat == SSet)
    92a4:	20 e0       	ldi	r18, 0x00	; 0
    92a6:	30 e0       	ldi	r19, 0x00	; 0
    92a8:	40 ee       	ldi	r20, 0xE0	; 224
    92aa:	50 e4       	ldi	r21, 0x40	; 64
    92ac:	c7 01       	movw	r24, r14
    92ae:	b6 01       	movw	r22, r12
    92b0:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    92b4:	81 11       	cpse	r24, r1
    92b6:	2b c0       	rjmp	.+86     	; 0x930e <corectTrv+0x112a>
		{
			return( -2 * .00001 * ds * ds + 1.406 * ds)* k;
    92b8:	2c ea       	ldi	r18, 0xAC	; 172
    92ba:	35 ec       	ldi	r19, 0xC5	; 197
    92bc:	47 ea       	ldi	r20, 0xA7	; 167
    92be:	57 eb       	ldi	r21, 0xB7	; 183
    92c0:	c5 01       	movw	r24, r10
    92c2:	b4 01       	movw	r22, r8
    92c4:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    92c8:	a5 01       	movw	r20, r10
    92ca:	94 01       	movw	r18, r8
    92cc:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    92d0:	6b 01       	movw	r12, r22
    92d2:	7c 01       	movw	r14, r24
    92d4:	2f ec       	ldi	r18, 0xCF	; 207
    92d6:	37 ef       	ldi	r19, 0xF7	; 247
    92d8:	43 eb       	ldi	r20, 0xB3	; 179
    92da:	5f e3       	ldi	r21, 0x3F	; 63
    92dc:	c5 01       	movw	r24, r10
    92de:	b4 01       	movw	r22, r8
    92e0:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    92e4:	9b 01       	movw	r18, r22
    92e6:	ac 01       	movw	r20, r24
    92e8:	c7 01       	movw	r24, r14
    92ea:	b6 01       	movw	r22, r12
    92ec:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    92f0:	6b 01       	movw	r12, r22
    92f2:	7c 01       	movw	r14, r24
    92f4:	be 01       	movw	r22, r28
    92f6:	dd 0f       	add	r29, r29
    92f8:	88 0b       	sbc	r24, r24
    92fa:	99 0b       	sbc	r25, r25
    92fc:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    9300:	9b 01       	movw	r18, r22
    9302:	ac 01       	movw	r20, r24
    9304:	c7 01       	movw	r24, r14
    9306:	b6 01       	movw	r22, r12
    9308:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    930c:	5c c4       	rjmp	.+2232   	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    930e:	20 e0       	ldi	r18, 0x00	; 0
    9310:	30 e0       	ldi	r19, 0x00	; 0
    9312:	40 ee       	ldi	r20, 0xE0	; 224
    9314:	50 e4       	ldi	r21, 0x40	; 64
    9316:	c7 01       	movw	r24, r14
    9318:	b6 01       	movw	r22, r12
    931a:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    931e:	18 16       	cp	r1, r24
    9320:	dc f5       	brge	.+118    	; 0x9398 <corectTrv+0x11b4>
    9322:	20 e0       	ldi	r18, 0x00	; 0
    9324:	30 e0       	ldi	r19, 0x00	; 0
    9326:	40 e0       	ldi	r20, 0x00	; 0
    9328:	51 e4       	ldi	r21, 0x41	; 65
    932a:	c7 01       	movw	r24, r14
    932c:	b6 01       	movw	r22, r12
    932e:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    9332:	18 16       	cp	r1, r24
    9334:	8c f1       	brlt	.+98     	; 0x9398 <corectTrv+0x11b4>
		{
			return( 0.062 * ds * ds + 0.570 * ds + 3.280)* k;
    9336:	26 eb       	ldi	r18, 0xB6	; 182
    9338:	33 ef       	ldi	r19, 0xF3	; 243
    933a:	4d e7       	ldi	r20, 0x7D	; 125
    933c:	5d e3       	ldi	r21, 0x3D	; 61
    933e:	c5 01       	movw	r24, r10
    9340:	b4 01       	movw	r22, r8
    9342:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9346:	a5 01       	movw	r20, r10
    9348:	94 01       	movw	r18, r8
    934a:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    934e:	6b 01       	movw	r12, r22
    9350:	7c 01       	movw	r14, r24
    9352:	25 e8       	ldi	r18, 0x85	; 133
    9354:	3b ee       	ldi	r19, 0xEB	; 235
    9356:	41 e1       	ldi	r20, 0x11	; 17
    9358:	5f e3       	ldi	r21, 0x3F	; 63
    935a:	c5 01       	movw	r24, r10
    935c:	b4 01       	movw	r22, r8
    935e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9362:	9b 01       	movw	r18, r22
    9364:	ac 01       	movw	r20, r24
    9366:	c7 01       	movw	r24, r14
    9368:	b6 01       	movw	r22, r12
    936a:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    936e:	25 e8       	ldi	r18, 0x85	; 133
    9370:	3b ee       	ldi	r19, 0xEB	; 235
    9372:	41 e5       	ldi	r20, 0x51	; 81
    9374:	50 e4       	ldi	r21, 0x40	; 64
    9376:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    937a:	6b 01       	movw	r12, r22
    937c:	7c 01       	movw	r14, r24
    937e:	be 01       	movw	r22, r28
    9380:	dd 0f       	add	r29, r29
    9382:	88 0b       	sbc	r24, r24
    9384:	99 0b       	sbc	r25, r25
    9386:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    938a:	9b 01       	movw	r18, r22
    938c:	ac 01       	movw	r20, r24
    938e:	c7 01       	movw	r24, r14
    9390:	b6 01       	movw	r22, r12
    9392:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9396:	17 c4       	rjmp	.+2094   	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    9398:	20 e0       	ldi	r18, 0x00	; 0
    939a:	30 e0       	ldi	r19, 0x00	; 0
    939c:	40 e0       	ldi	r20, 0x00	; 0
    939e:	51 e4       	ldi	r21, 0x41	; 65
    93a0:	c7 01       	movw	r24, r14
    93a2:	b6 01       	movw	r22, r12
    93a4:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    93a8:	18 16       	cp	r1, r24
    93aa:	dc f5       	brge	.+118    	; 0x9422 <corectTrv+0x123e>
    93ac:	20 e0       	ldi	r18, 0x00	; 0
    93ae:	30 e0       	ldi	r19, 0x00	; 0
    93b0:	40 e1       	ldi	r20, 0x10	; 16
    93b2:	51 e4       	ldi	r21, 0x41	; 65
    93b4:	c7 01       	movw	r24, r14
    93b6:	b6 01       	movw	r22, r12
    93b8:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    93bc:	18 16       	cp	r1, r24
    93be:	8c f1       	brlt	.+98     	; 0x9422 <corectTrv+0x123e>
		{
			return( 0.099 * ds * ds - 0.019 * ds + 6.338)* k;
    93c0:	23 e8       	ldi	r18, 0x83	; 131
    93c2:	30 ec       	ldi	r19, 0xC0	; 192
    93c4:	4a ec       	ldi	r20, 0xCA	; 202
    93c6:	5d e3       	ldi	r21, 0x3D	; 61
    93c8:	c5 01       	movw	r24, r10
    93ca:	b4 01       	movw	r22, r8
    93cc:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    93d0:	a5 01       	movw	r20, r10
    93d2:	94 01       	movw	r18, r8
    93d4:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    93d8:	6b 01       	movw	r12, r22
    93da:	7c 01       	movw	r14, r24
    93dc:	23 ee       	ldi	r18, 0xE3	; 227
    93de:	35 ea       	ldi	r19, 0xA5	; 165
    93e0:	4b e9       	ldi	r20, 0x9B	; 155
    93e2:	5c e3       	ldi	r21, 0x3C	; 60
    93e4:	c5 01       	movw	r24, r10
    93e6:	b4 01       	movw	r22, r8
    93e8:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    93ec:	9b 01       	movw	r18, r22
    93ee:	ac 01       	movw	r20, r24
    93f0:	c7 01       	movw	r24, r14
    93f2:	b6 01       	movw	r22, r12
    93f4:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    93f8:	25 ee       	ldi	r18, 0xE5	; 229
    93fa:	30 ed       	ldi	r19, 0xD0	; 208
    93fc:	4a ec       	ldi	r20, 0xCA	; 202
    93fe:	50 e4       	ldi	r21, 0x40	; 64
    9400:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    9404:	6b 01       	movw	r12, r22
    9406:	7c 01       	movw	r14, r24
    9408:	be 01       	movw	r22, r28
    940a:	dd 0f       	add	r29, r29
    940c:	88 0b       	sbc	r24, r24
    940e:	99 0b       	sbc	r25, r25
    9410:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    9414:	9b 01       	movw	r18, r22
    9416:	ac 01       	movw	r20, r24
    9418:	c7 01       	movw	r24, r14
    941a:	b6 01       	movw	r22, r12
    941c:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9420:	d2 c3       	rjmp	.+1956   	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    9422:	20 e0       	ldi	r18, 0x00	; 0
    9424:	30 e0       	ldi	r19, 0x00	; 0
    9426:	40 e1       	ldi	r20, 0x10	; 16
    9428:	51 e4       	ldi	r21, 0x41	; 65
    942a:	c7 01       	movw	r24, r14
    942c:	b6 01       	movw	r22, r12
    942e:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    9432:	18 16       	cp	r1, r24
    9434:	dc f5       	brge	.+118    	; 0x94ac <corectTrv+0x12c8>
    9436:	20 e0       	ldi	r18, 0x00	; 0
    9438:	30 e0       	ldi	r19, 0x00	; 0
    943a:	40 e2       	ldi	r20, 0x20	; 32
    943c:	51 e4       	ldi	r21, 0x41	; 65
    943e:	c7 01       	movw	r24, r14
    9440:	b6 01       	movw	r22, r12
    9442:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    9446:	18 16       	cp	r1, r24
    9448:	8c f1       	brlt	.+98     	; 0x94ac <corectTrv+0x12c8>
		{
			return( 0.121 * ds * ds - 0.409 * ds + 9.164)* k;
    944a:	29 ed       	ldi	r18, 0xD9	; 217
    944c:	3e ec       	ldi	r19, 0xCE	; 206
    944e:	47 ef       	ldi	r20, 0xF7	; 247
    9450:	5d e3       	ldi	r21, 0x3D	; 61
    9452:	c5 01       	movw	r24, r10
    9454:	b4 01       	movw	r22, r8
    9456:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    945a:	a5 01       	movw	r20, r10
    945c:	94 01       	movw	r18, r8
    945e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9462:	6b 01       	movw	r12, r22
    9464:	7c 01       	movw	r14, r24
    9466:	23 e7       	ldi	r18, 0x73	; 115
    9468:	38 e6       	ldi	r19, 0x68	; 104
    946a:	41 ed       	ldi	r20, 0xD1	; 209
    946c:	5e e3       	ldi	r21, 0x3E	; 62
    946e:	c5 01       	movw	r24, r10
    9470:	b4 01       	movw	r22, r8
    9472:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9476:	9b 01       	movw	r18, r22
    9478:	ac 01       	movw	r20, r24
    947a:	c7 01       	movw	r24, r14
    947c:	b6 01       	movw	r22, r12
    947e:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    9482:	2e eb       	ldi	r18, 0xBE	; 190
    9484:	3f e9       	ldi	r19, 0x9F	; 159
    9486:	42 e1       	ldi	r20, 0x12	; 18
    9488:	51 e4       	ldi	r21, 0x41	; 65
    948a:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    948e:	6b 01       	movw	r12, r22
    9490:	7c 01       	movw	r14, r24
    9492:	be 01       	movw	r22, r28
    9494:	dd 0f       	add	r29, r29
    9496:	88 0b       	sbc	r24, r24
    9498:	99 0b       	sbc	r25, r25
    949a:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    949e:	9b 01       	movw	r18, r22
    94a0:	ac 01       	movw	r20, r24
    94a2:	c7 01       	movw	r24, r14
    94a4:	b6 01       	movw	r22, r12
    94a6:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    94aa:	8d c3       	rjmp	.+1818   	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    94ac:	20 e0       	ldi	r18, 0x00	; 0
    94ae:	30 e0       	ldi	r19, 0x00	; 0
    94b0:	40 e2       	ldi	r20, 0x20	; 32
    94b2:	51 e4       	ldi	r21, 0x41	; 65
    94b4:	c7 01       	movw	r24, r14
    94b6:	b6 01       	movw	r22, r12
    94b8:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    94bc:	18 16       	cp	r1, r24
    94be:	dc f5       	brge	.+118    	; 0x9536 <corectTrv+0x1352>
    94c0:	20 e0       	ldi	r18, 0x00	; 0
    94c2:	30 e0       	ldi	r19, 0x00	; 0
    94c4:	40 e3       	ldi	r20, 0x30	; 48
    94c6:	51 e4       	ldi	r21, 0x41	; 65
    94c8:	c7 01       	movw	r24, r14
    94ca:	b6 01       	movw	r22, r12
    94cc:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    94d0:	18 16       	cp	r1, r24
    94d2:	8c f1       	brlt	.+98     	; 0x9536 <corectTrv+0x1352>
		{
			return( 0.128 * ds * ds - 0.340 * ds + 11.4)* k;
    94d4:	2f e6       	ldi	r18, 0x6F	; 111
    94d6:	32 e1       	ldi	r19, 0x12	; 18
    94d8:	43 e0       	ldi	r20, 0x03	; 3
    94da:	5e e3       	ldi	r21, 0x3E	; 62
    94dc:	c5 01       	movw	r24, r10
    94de:	b4 01       	movw	r22, r8
    94e0:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    94e4:	a5 01       	movw	r20, r10
    94e6:	94 01       	movw	r18, r8
    94e8:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    94ec:	6b 01       	movw	r12, r22
    94ee:	7c 01       	movw	r14, r24
    94f0:	2b e7       	ldi	r18, 0x7B	; 123
    94f2:	34 e1       	ldi	r19, 0x14	; 20
    94f4:	4e ea       	ldi	r20, 0xAE	; 174
    94f6:	5e e3       	ldi	r21, 0x3E	; 62
    94f8:	c5 01       	movw	r24, r10
    94fa:	b4 01       	movw	r22, r8
    94fc:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9500:	9b 01       	movw	r18, r22
    9502:	ac 01       	movw	r20, r24
    9504:	c7 01       	movw	r24, r14
    9506:	b6 01       	movw	r22, r12
    9508:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    950c:	26 e6       	ldi	r18, 0x66	; 102
    950e:	36 e6       	ldi	r19, 0x66	; 102
    9510:	46 e3       	ldi	r20, 0x36	; 54
    9512:	51 e4       	ldi	r21, 0x41	; 65
    9514:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    9518:	6b 01       	movw	r12, r22
    951a:	7c 01       	movw	r14, r24
    951c:	be 01       	movw	r22, r28
    951e:	dd 0f       	add	r29, r29
    9520:	88 0b       	sbc	r24, r24
    9522:	99 0b       	sbc	r25, r25
    9524:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    9528:	9b 01       	movw	r18, r22
    952a:	ac 01       	movw	r20, r24
    952c:	c7 01       	movw	r24, r14
    952e:	b6 01       	movw	r22, r12
    9530:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9534:	48 c3       	rjmp	.+1680   	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    9536:	20 e0       	ldi	r18, 0x00	; 0
    9538:	30 e0       	ldi	r19, 0x00	; 0
    953a:	40 e3       	ldi	r20, 0x30	; 48
    953c:	51 e4       	ldi	r21, 0x41	; 65
    953e:	c7 01       	movw	r24, r14
    9540:	b6 01       	movw	r22, r12
    9542:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    9546:	18 16       	cp	r1, r24
    9548:	dc f5       	brge	.+118    	; 0x95c0 <corectTrv+0x13dc>
    954a:	20 e0       	ldi	r18, 0x00	; 0
    954c:	30 e0       	ldi	r19, 0x00	; 0
    954e:	40 e4       	ldi	r20, 0x40	; 64
    9550:	51 e4       	ldi	r21, 0x41	; 65
    9552:	c7 01       	movw	r24, r14
    9554:	b6 01       	movw	r22, r12
    9556:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    955a:	18 16       	cp	r1, r24
    955c:	8c f1       	brlt	.+98     	; 0x95c0 <corectTrv+0x13dc>
		{
			return( 0.128 * ds * ds - 0.382 * ds + 15.51)* k;
    955e:	2f e6       	ldi	r18, 0x6F	; 111
    9560:	32 e1       	ldi	r19, 0x12	; 18
    9562:	43 e0       	ldi	r20, 0x03	; 3
    9564:	5e e3       	ldi	r21, 0x3E	; 62
    9566:	c5 01       	movw	r24, r10
    9568:	b4 01       	movw	r22, r8
    956a:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    956e:	a5 01       	movw	r20, r10
    9570:	94 01       	movw	r18, r8
    9572:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9576:	6b 01       	movw	r12, r22
    9578:	7c 01       	movw	r14, r24
    957a:	21 e8       	ldi	r18, 0x81	; 129
    957c:	35 e9       	ldi	r19, 0x95	; 149
    957e:	43 ec       	ldi	r20, 0xC3	; 195
    9580:	5e e3       	ldi	r21, 0x3E	; 62
    9582:	c5 01       	movw	r24, r10
    9584:	b4 01       	movw	r22, r8
    9586:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    958a:	9b 01       	movw	r18, r22
    958c:	ac 01       	movw	r20, r24
    958e:	c7 01       	movw	r24, r14
    9590:	b6 01       	movw	r22, r12
    9592:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    9596:	26 ef       	ldi	r18, 0xF6	; 246
    9598:	38 e2       	ldi	r19, 0x28	; 40
    959a:	48 e7       	ldi	r20, 0x78	; 120
    959c:	51 e4       	ldi	r21, 0x41	; 65
    959e:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    95a2:	6b 01       	movw	r12, r22
    95a4:	7c 01       	movw	r14, r24
    95a6:	be 01       	movw	r22, r28
    95a8:	dd 0f       	add	r29, r29
    95aa:	88 0b       	sbc	r24, r24
    95ac:	99 0b       	sbc	r25, r25
    95ae:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    95b2:	9b 01       	movw	r18, r22
    95b4:	ac 01       	movw	r20, r24
    95b6:	c7 01       	movw	r24, r14
    95b8:	b6 01       	movw	r22, r12
    95ba:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    95be:	03 c3       	rjmp	.+1542   	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    95c0:	20 e0       	ldi	r18, 0x00	; 0
    95c2:	30 e0       	ldi	r19, 0x00	; 0
    95c4:	40 e4       	ldi	r20, 0x40	; 64
    95c6:	51 e4       	ldi	r21, 0x41	; 65
    95c8:	c7 01       	movw	r24, r14
    95ca:	b6 01       	movw	r22, r12
    95cc:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    95d0:	18 16       	cp	r1, r24
    95d2:	dc f5       	brge	.+118    	; 0x964a <corectTrv+0x1466>
    95d4:	20 e0       	ldi	r18, 0x00	; 0
    95d6:	30 e0       	ldi	r19, 0x00	; 0
    95d8:	40 e5       	ldi	r20, 0x50	; 80
    95da:	51 e4       	ldi	r21, 0x41	; 65
    95dc:	c7 01       	movw	r24, r14
    95de:	b6 01       	movw	r22, r12
    95e0:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    95e4:	18 16       	cp	r1, r24
    95e6:	8c f1       	brlt	.+98     	; 0x964a <corectTrv+0x1466>
		{
			return( 0.128 * ds * ds - 0.382 * ds + 15.51)* k;
    95e8:	2f e6       	ldi	r18, 0x6F	; 111
    95ea:	32 e1       	ldi	r19, 0x12	; 18
    95ec:	43 e0       	ldi	r20, 0x03	; 3
    95ee:	5e e3       	ldi	r21, 0x3E	; 62
    95f0:	c5 01       	movw	r24, r10
    95f2:	b4 01       	movw	r22, r8
    95f4:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    95f8:	a5 01       	movw	r20, r10
    95fa:	94 01       	movw	r18, r8
    95fc:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9600:	6b 01       	movw	r12, r22
    9602:	7c 01       	movw	r14, r24
    9604:	21 e8       	ldi	r18, 0x81	; 129
    9606:	35 e9       	ldi	r19, 0x95	; 149
    9608:	43 ec       	ldi	r20, 0xC3	; 195
    960a:	5e e3       	ldi	r21, 0x3E	; 62
    960c:	c5 01       	movw	r24, r10
    960e:	b4 01       	movw	r22, r8
    9610:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9614:	9b 01       	movw	r18, r22
    9616:	ac 01       	movw	r20, r24
    9618:	c7 01       	movw	r24, r14
    961a:	b6 01       	movw	r22, r12
    961c:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    9620:	26 ef       	ldi	r18, 0xF6	; 246
    9622:	38 e2       	ldi	r19, 0x28	; 40
    9624:	48 e7       	ldi	r20, 0x78	; 120
    9626:	51 e4       	ldi	r21, 0x41	; 65
    9628:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    962c:	6b 01       	movw	r12, r22
    962e:	7c 01       	movw	r14, r24
    9630:	be 01       	movw	r22, r28
    9632:	dd 0f       	add	r29, r29
    9634:	88 0b       	sbc	r24, r24
    9636:	99 0b       	sbc	r25, r25
    9638:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    963c:	9b 01       	movw	r18, r22
    963e:	ac 01       	movw	r20, r24
    9640:	c7 01       	movw	r24, r14
    9642:	b6 01       	movw	r22, r12
    9644:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9648:	be c2       	rjmp	.+1404   	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    964a:	20 e0       	ldi	r18, 0x00	; 0
    964c:	30 e0       	ldi	r19, 0x00	; 0
    964e:	40 e5       	ldi	r20, 0x50	; 80
    9650:	51 e4       	ldi	r21, 0x41	; 65
    9652:	c7 01       	movw	r24, r14
    9654:	b6 01       	movw	r22, r12
    9656:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    965a:	18 16       	cp	r1, r24
    965c:	dc f5       	brge	.+118    	; 0x96d4 <corectTrv+0x14f0>
    965e:	20 e0       	ldi	r18, 0x00	; 0
    9660:	30 e0       	ldi	r19, 0x00	; 0
    9662:	40 e6       	ldi	r20, 0x60	; 96
    9664:	51 e4       	ldi	r21, 0x41	; 65
    9666:	c7 01       	movw	r24, r14
    9668:	b6 01       	movw	r22, r12
    966a:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    966e:	18 16       	cp	r1, r24
    9670:	8c f1       	brlt	.+98     	; 0x96d4 <corectTrv+0x14f0>
		{
			return( 0.137 * ds * ds - 0.652 * ds + 16.63)* k;
    9672:	2a eb       	ldi	r18, 0xBA	; 186
    9674:	39 e4       	ldi	r19, 0x49	; 73
    9676:	4c e0       	ldi	r20, 0x0C	; 12
    9678:	5e e3       	ldi	r21, 0x3E	; 62
    967a:	c5 01       	movw	r24, r10
    967c:	b4 01       	movw	r22, r8
    967e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9682:	a5 01       	movw	r20, r10
    9684:	94 01       	movw	r18, r8
    9686:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    968a:	6b 01       	movw	r12, r22
    968c:	7c 01       	movw	r14, r24
    968e:	29 e7       	ldi	r18, 0x79	; 121
    9690:	39 ee       	ldi	r19, 0xE9	; 233
    9692:	46 e2       	ldi	r20, 0x26	; 38
    9694:	5f e3       	ldi	r21, 0x3F	; 63
    9696:	c5 01       	movw	r24, r10
    9698:	b4 01       	movw	r22, r8
    969a:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    969e:	9b 01       	movw	r18, r22
    96a0:	ac 01       	movw	r20, r24
    96a2:	c7 01       	movw	r24, r14
    96a4:	b6 01       	movw	r22, r12
    96a6:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    96aa:	2d e3       	ldi	r18, 0x3D	; 61
    96ac:	3a e0       	ldi	r19, 0x0A	; 10
    96ae:	45 e8       	ldi	r20, 0x85	; 133
    96b0:	51 e4       	ldi	r21, 0x41	; 65
    96b2:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    96b6:	6b 01       	movw	r12, r22
    96b8:	7c 01       	movw	r14, r24
    96ba:	be 01       	movw	r22, r28
    96bc:	dd 0f       	add	r29, r29
    96be:	88 0b       	sbc	r24, r24
    96c0:	99 0b       	sbc	r25, r25
    96c2:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    96c6:	9b 01       	movw	r18, r22
    96c8:	ac 01       	movw	r20, r24
    96ca:	c7 01       	movw	r24, r14
    96cc:	b6 01       	movw	r22, r12
    96ce:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    96d2:	79 c2       	rjmp	.+1266   	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    96d4:	20 e0       	ldi	r18, 0x00	; 0
    96d6:	30 e0       	ldi	r19, 0x00	; 0
    96d8:	40 e6       	ldi	r20, 0x60	; 96
    96da:	51 e4       	ldi	r21, 0x41	; 65
    96dc:	c7 01       	movw	r24, r14
    96de:	b6 01       	movw	r22, r12
    96e0:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    96e4:	18 16       	cp	r1, r24
    96e6:	dc f5       	brge	.+118    	; 0x975e <corectTrv+0x157a>
    96e8:	20 e0       	ldi	r18, 0x00	; 0
    96ea:	30 e0       	ldi	r19, 0x00	; 0
    96ec:	40 e7       	ldi	r20, 0x70	; 112
    96ee:	51 e4       	ldi	r21, 0x41	; 65
    96f0:	c7 01       	movw	r24, r14
    96f2:	b6 01       	movw	r22, r12
    96f4:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    96f8:	18 16       	cp	r1, r24
    96fa:	8c f1       	brlt	.+98     	; 0x975e <corectTrv+0x157a>
		{
			return( 0.142 * ds * ds - 0.630 * ds + 17.7)* k;
    96fc:	23 e7       	ldi	r18, 0x73	; 115
    96fe:	38 e6       	ldi	r19, 0x68	; 104
    9700:	41 e1       	ldi	r20, 0x11	; 17
    9702:	5e e3       	ldi	r21, 0x3E	; 62
    9704:	c5 01       	movw	r24, r10
    9706:	b4 01       	movw	r22, r8
    9708:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    970c:	a5 01       	movw	r20, r10
    970e:	94 01       	movw	r18, r8
    9710:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9714:	6b 01       	movw	r12, r22
    9716:	7c 01       	movw	r14, r24
    9718:	2e ea       	ldi	r18, 0xAE	; 174
    971a:	37 e4       	ldi	r19, 0x47	; 71
    971c:	41 e2       	ldi	r20, 0x21	; 33
    971e:	5f e3       	ldi	r21, 0x3F	; 63
    9720:	c5 01       	movw	r24, r10
    9722:	b4 01       	movw	r22, r8
    9724:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9728:	9b 01       	movw	r18, r22
    972a:	ac 01       	movw	r20, r24
    972c:	c7 01       	movw	r24, r14
    972e:	b6 01       	movw	r22, r12
    9730:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    9734:	2a e9       	ldi	r18, 0x9A	; 154
    9736:	39 e9       	ldi	r19, 0x99	; 153
    9738:	4d e8       	ldi	r20, 0x8D	; 141
    973a:	51 e4       	ldi	r21, 0x41	; 65
    973c:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    9740:	6b 01       	movw	r12, r22
    9742:	7c 01       	movw	r14, r24
    9744:	be 01       	movw	r22, r28
    9746:	dd 0f       	add	r29, r29
    9748:	88 0b       	sbc	r24, r24
    974a:	99 0b       	sbc	r25, r25
    974c:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    9750:	9b 01       	movw	r18, r22
    9752:	ac 01       	movw	r20, r24
    9754:	c7 01       	movw	r24, r14
    9756:	b6 01       	movw	r22, r12
    9758:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    975c:	34 c2       	rjmp	.+1128   	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    975e:	20 e0       	ldi	r18, 0x00	; 0
    9760:	30 e0       	ldi	r19, 0x00	; 0
    9762:	40 e7       	ldi	r20, 0x70	; 112
    9764:	51 e4       	ldi	r21, 0x41	; 65
    9766:	c7 01       	movw	r24, r14
    9768:	b6 01       	movw	r22, r12
    976a:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    976e:	18 16       	cp	r1, r24
    9770:	dc f5       	brge	.+118    	; 0x97e8 <corectTrv+0x1604>
    9772:	20 e0       	ldi	r18, 0x00	; 0
    9774:	30 e0       	ldi	r19, 0x00	; 0
    9776:	40 e8       	ldi	r20, 0x80	; 128
    9778:	51 e4       	ldi	r21, 0x41	; 65
    977a:	c7 01       	movw	r24, r14
    977c:	b6 01       	movw	r22, r12
    977e:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    9782:	18 16       	cp	r1, r24
    9784:	8c f1       	brlt	.+98     	; 0x97e8 <corectTrv+0x1604>
		{
			return( 0.126 * ds * ds - 0.683 * ds + 20.4)* k;
    9786:	25 e2       	ldi	r18, 0x25	; 37
    9788:	36 e0       	ldi	r19, 0x06	; 6
    978a:	41 e0       	ldi	r20, 0x01	; 1
    978c:	5e e3       	ldi	r21, 0x3E	; 62
    978e:	c5 01       	movw	r24, r10
    9790:	b4 01       	movw	r22, r8
    9792:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9796:	a5 01       	movw	r20, r10
    9798:	94 01       	movw	r18, r8
    979a:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    979e:	6b 01       	movw	r12, r22
    97a0:	7c 01       	movw	r14, r24
    97a2:	27 e1       	ldi	r18, 0x17	; 23
    97a4:	39 ed       	ldi	r19, 0xD9	; 217
    97a6:	4e e2       	ldi	r20, 0x2E	; 46
    97a8:	5f e3       	ldi	r21, 0x3F	; 63
    97aa:	c5 01       	movw	r24, r10
    97ac:	b4 01       	movw	r22, r8
    97ae:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    97b2:	9b 01       	movw	r18, r22
    97b4:	ac 01       	movw	r20, r24
    97b6:	c7 01       	movw	r24, r14
    97b8:	b6 01       	movw	r22, r12
    97ba:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    97be:	23 e3       	ldi	r18, 0x33	; 51
    97c0:	33 e3       	ldi	r19, 0x33	; 51
    97c2:	43 ea       	ldi	r20, 0xA3	; 163
    97c4:	51 e4       	ldi	r21, 0x41	; 65
    97c6:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    97ca:	6b 01       	movw	r12, r22
    97cc:	7c 01       	movw	r14, r24
    97ce:	be 01       	movw	r22, r28
    97d0:	dd 0f       	add	r29, r29
    97d2:	88 0b       	sbc	r24, r24
    97d4:	99 0b       	sbc	r25, r25
    97d6:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    97da:	9b 01       	movw	r18, r22
    97dc:	ac 01       	movw	r20, r24
    97de:	c7 01       	movw	r24, r14
    97e0:	b6 01       	movw	r22, r12
    97e2:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    97e6:	ef c1       	rjmp	.+990    	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 9)
    97e8:	20 e0       	ldi	r18, 0x00	; 0
    97ea:	30 e0       	ldi	r19, 0x00	; 0
    97ec:	40 e8       	ldi	r20, 0x80	; 128
    97ee:	51 e4       	ldi	r21, 0x41	; 65
    97f0:	c7 01       	movw	r24, r14
    97f2:	b6 01       	movw	r22, r12
    97f4:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    97f8:	18 16       	cp	r1, r24
    97fa:	0c f0       	brlt	.+2      	; 0x97fe <corectTrv+0x161a>
    97fc:	d9 c1       	rjmp	.+946    	; 0x9bb0 <corectTrv+0x19cc>
		{
			return( 0.027 * ds * ds - 0.277 * ds + 25.29)* k;
    97fe:	2b e1       	ldi	r18, 0x1B	; 27
    9800:	3f e2       	ldi	r19, 0x2F	; 47
    9802:	4d ed       	ldi	r20, 0xDD	; 221
    9804:	5c e3       	ldi	r21, 0x3C	; 60
    9806:	c5 01       	movw	r24, r10
    9808:	b4 01       	movw	r22, r8
    980a:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    980e:	a5 01       	movw	r20, r10
    9810:	94 01       	movw	r18, r8
    9812:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9816:	6b 01       	movw	r12, r22
    9818:	7c 01       	movw	r14, r24
    981a:	22 ef       	ldi	r18, 0xF2	; 242
    981c:	32 ed       	ldi	r19, 0xD2	; 210
    981e:	4d e8       	ldi	r20, 0x8D	; 141
    9820:	5e e3       	ldi	r21, 0x3E	; 62
    9822:	c5 01       	movw	r24, r10
    9824:	b4 01       	movw	r22, r8
    9826:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    982a:	9b 01       	movw	r18, r22
    982c:	ac 01       	movw	r20, r24
    982e:	c7 01       	movw	r24, r14
    9830:	b6 01       	movw	r22, r12
    9832:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    9836:	2c ee       	ldi	r18, 0xEC	; 236
    9838:	31 e5       	ldi	r19, 0x51	; 81
    983a:	4a ec       	ldi	r20, 0xCA	; 202
    983c:	51 e4       	ldi	r21, 0x41	; 65
    983e:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    9842:	6b 01       	movw	r12, r22
    9844:	7c 01       	movw	r14, r24
    9846:	be 01       	movw	r22, r28
    9848:	dd 0f       	add	r29, r29
    984a:	88 0b       	sbc	r24, r24
    984c:	99 0b       	sbc	r25, r25
    984e:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    9852:	9b 01       	movw	r18, r22
    9854:	ac 01       	movw	r20, r24
    9856:	c7 01       	movw	r24, r14
    9858:	b6 01       	movw	r22, r12
    985a:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    985e:	b3 c1       	rjmp	.+870    	; 0x9bc6 <corectTrv+0x19e2>
		}
	}

	else if (ds > 10)
    9860:	20 e0       	ldi	r18, 0x00	; 0
    9862:	30 e0       	ldi	r19, 0x00	; 0
    9864:	40 e2       	ldi	r20, 0x20	; 32
    9866:	51 e4       	ldi	r21, 0x41	; 65
    9868:	c5 01       	movw	r24, r10
    986a:	b4 01       	movw	r22, r8
    986c:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    9870:	18 16       	cp	r1, r24
    9872:	0c f0       	brlt	.+2      	; 0x9876 <corectTrv+0x1692>
    9874:	a1 c1       	rjmp	.+834    	; 0x9bb8 <corectTrv+0x19d4>
    9876:	08 c0       	rjmp	.+16     	; 0x9888 <corectTrv+0x16a4>
	
	Superheat_old = Superheat;
	
	if (ds > 20)
	{
		ds = 20;
    9878:	0f 2e       	mov	r0, r31
    987a:	81 2c       	mov	r8, r1
    987c:	91 2c       	mov	r9, r1
    987e:	f0 ea       	ldi	r31, 0xA0	; 160
    9880:	af 2e       	mov	r10, r31
    9882:	f1 e4       	ldi	r31, 0x41	; 65
    9884:	bf 2e       	mov	r11, r31
    9886:	f0 2d       	mov	r31, r0
		}
	}

	else if (ds > 10)
	{
		if (Superheat == SSet)
    9888:	20 e0       	ldi	r18, 0x00	; 0
    988a:	30 e0       	ldi	r19, 0x00	; 0
    988c:	40 ee       	ldi	r20, 0xE0	; 224
    988e:	50 e4       	ldi	r21, 0x40	; 64
    9890:	c7 01       	movw	r24, r14
    9892:	b6 01       	movw	r22, r12
    9894:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    9898:	81 11       	cpse	r24, r1
    989a:	31 c0       	rjmp	.+98     	; 0x98fe <corectTrv+0x171a>
		{
			return( 0.137 * ds * ds - 3.245 * ds + 34.51)* k;
    989c:	2a eb       	ldi	r18, 0xBA	; 186
    989e:	39 e4       	ldi	r19, 0x49	; 73
    98a0:	4c e0       	ldi	r20, 0x0C	; 12
    98a2:	5e e3       	ldi	r21, 0x3E	; 62
    98a4:	c5 01       	movw	r24, r10
    98a6:	b4 01       	movw	r22, r8
    98a8:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    98ac:	a5 01       	movw	r20, r10
    98ae:	94 01       	movw	r18, r8
    98b0:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    98b4:	6b 01       	movw	r12, r22
    98b6:	7c 01       	movw	r14, r24
    98b8:	24 e1       	ldi	r18, 0x14	; 20
    98ba:	3e ea       	ldi	r19, 0xAE	; 174
    98bc:	4f e4       	ldi	r20, 0x4F	; 79
    98be:	50 e4       	ldi	r21, 0x40	; 64
    98c0:	c5 01       	movw	r24, r10
    98c2:	b4 01       	movw	r22, r8
    98c4:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    98c8:	9b 01       	movw	r18, r22
    98ca:	ac 01       	movw	r20, r24
    98cc:	c7 01       	movw	r24, r14
    98ce:	b6 01       	movw	r22, r12
    98d0:	0e 94 ab 54 	call	0xa956	; 0xa956 <__subsf3>
    98d4:	2d e3       	ldi	r18, 0x3D	; 61
    98d6:	3a e0       	ldi	r19, 0x0A	; 10
    98d8:	4a e0       	ldi	r20, 0x0A	; 10
    98da:	52 e4       	ldi	r21, 0x42	; 66
    98dc:	0e 94 ac 54 	call	0xa958	; 0xa958 <__addsf3>
    98e0:	6b 01       	movw	r12, r22
    98e2:	7c 01       	movw	r14, r24
    98e4:	be 01       	movw	r22, r28
    98e6:	dd 0f       	add	r29, r29
    98e8:	88 0b       	sbc	r24, r24
    98ea:	99 0b       	sbc	r25, r25
    98ec:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    98f0:	9b 01       	movw	r18, r22
    98f2:	ac 01       	movw	r20, r24
    98f4:	c7 01       	movw	r24, r14
    98f6:	b6 01       	movw	r22, r12
    98f8:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    98fc:	64 c1       	rjmp	.+712    	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    98fe:	20 e0       	ldi	r18, 0x00	; 0
    9900:	30 e0       	ldi	r19, 0x00	; 0
    9902:	40 ee       	ldi	r20, 0xE0	; 224
    9904:	50 e4       	ldi	r21, 0x40	; 64
    9906:	c7 01       	movw	r24, r14
    9908:	b6 01       	movw	r22, r12
    990a:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    990e:	18 16       	cp	r1, r24
    9910:	cc f5       	brge	.+114    	; 0x9984 <corectTrv+0x17a0>
    9912:	20 e0       	ldi	r18, 0x00	; 0
    9914:	30 e0       	ldi	r19, 0x00	; 0
    9916:	40 e0       	ldi	r20, 0x00	; 0
    9918:	51 e4       	ldi	r21, 0x41	; 65
    991a:	c7 01       	movw	r24, r14
    991c:	b6 01       	movw	r22, r12
    991e:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    9922:	18 16       	cp	r1, r24
    9924:	7c f1       	brlt	.+94     	; 0x9984 <corectTrv+0x17a0>
		{
			return( 0.137 * ds * ds - 3.245 * ds + 34.51)* k;
    9926:	2a eb       	ldi	r18, 0xBA	; 186
    9928:	39 e4       	ldi	r19, 0x49	; 73
    992a:	4c e0       	ldi	r20, 0x0C	; 12
    992c:	5e e3       	ldi	r21, 0x3E	; 62
    992e:	c5 01       	movw	r24, r10
    9930:	b4 01       	movw	r22, r8
    9932:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9936:	a5 01       	movw	r20, r10
    9938:	94 01       	movw	r18, r8
    993a:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    993e:	6b 01       	movw	r12, r22
    9940:	7c 01       	movw	r14, r24
    9942:	24 e1       	ldi	r18, 0x14	; 20
    9944:	3e ea       	ldi	r19, 0xAE	; 174
    9946:	4f e4       	ldi	r20, 0x4F	; 79
    9948:	50 e4       	ldi	r21, 0x40	; 64
    994a:	c5 01       	movw	r24, r10
    994c:	b4 01       	movw	r22, r8
    994e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9952:	9b 01       	movw	r18, r22
    9954:	ac 01       	movw	r20, r24
    9956:	c7 01       	movw	r24, r14
    9958:	b6 01       	movw	r22, r12
    995a:	fd d7       	rcall	.+4090   	; 0xa956 <__subsf3>
    995c:	2d e3       	ldi	r18, 0x3D	; 61
    995e:	3a e0       	ldi	r19, 0x0A	; 10
    9960:	4a e0       	ldi	r20, 0x0A	; 10
    9962:	52 e4       	ldi	r21, 0x42	; 66
    9964:	f9 d7       	rcall	.+4082   	; 0xa958 <__addsf3>
    9966:	6b 01       	movw	r12, r22
    9968:	7c 01       	movw	r14, r24
    996a:	be 01       	movw	r22, r28
    996c:	dd 0f       	add	r29, r29
    996e:	88 0b       	sbc	r24, r24
    9970:	99 0b       	sbc	r25, r25
    9972:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    9976:	9b 01       	movw	r18, r22
    9978:	ac 01       	movw	r20, r24
    997a:	c7 01       	movw	r24, r14
    997c:	b6 01       	movw	r22, r12
    997e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9982:	21 c1       	rjmp	.+578    	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    9984:	20 e0       	ldi	r18, 0x00	; 0
    9986:	30 e0       	ldi	r19, 0x00	; 0
    9988:	40 e0       	ldi	r20, 0x00	; 0
    998a:	51 e4       	ldi	r21, 0x41	; 65
    998c:	c7 01       	movw	r24, r14
    998e:	b6 01       	movw	r22, r12
    9990:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    9994:	18 16       	cp	r1, r24
    9996:	cc f5       	brge	.+114    	; 0x9a0a <corectTrv+0x1826>
    9998:	20 e0       	ldi	r18, 0x00	; 0
    999a:	30 e0       	ldi	r19, 0x00	; 0
    999c:	40 e1       	ldi	r20, 0x10	; 16
    999e:	51 e4       	ldi	r21, 0x41	; 65
    99a0:	c7 01       	movw	r24, r14
    99a2:	b6 01       	movw	r22, r12
    99a4:	0e 94 10 55 	call	0xaa20	; 0xaa20 <__cmpsf2>
    99a8:	18 16       	cp	r1, r24
    99aa:	7c f1       	brlt	.+94     	; 0x9a0a <corectTrv+0x1826>
		{
			return( 0.158 * ds * ds - 4.086 * ds + 42.41)* k;
    99ac:	21 ec       	ldi	r18, 0xC1	; 193
    99ae:	3a ec       	ldi	r19, 0xCA	; 202
    99b0:	41 e2       	ldi	r20, 0x21	; 33
    99b2:	5e e3       	ldi	r21, 0x3E	; 62
    99b4:	c5 01       	movw	r24, r10
    99b6:	b4 01       	movw	r22, r8
    99b8:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    99bc:	a5 01       	movw	r20, r10
    99be:	94 01       	movw	r18, r8
    99c0:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    99c4:	6b 01       	movw	r12, r22
    99c6:	7c 01       	movw	r14, r24
    99c8:	23 e8       	ldi	r18, 0x83	; 131
    99ca:	30 ec       	ldi	r19, 0xC0	; 192
    99cc:	42 e8       	ldi	r20, 0x82	; 130
    99ce:	50 e4       	ldi	r21, 0x40	; 64
    99d0:	c5 01       	movw	r24, r10
    99d2:	b4 01       	movw	r22, r8
    99d4:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    99d8:	9b 01       	movw	r18, r22
    99da:	ac 01       	movw	r20, r24
    99dc:	c7 01       	movw	r24, r14
    99de:	b6 01       	movw	r22, r12
    99e0:	ba d7       	rcall	.+3956   	; 0xa956 <__subsf3>
    99e2:	27 ed       	ldi	r18, 0xD7	; 215
    99e4:	33 ea       	ldi	r19, 0xA3	; 163
    99e6:	49 e2       	ldi	r20, 0x29	; 41
    99e8:	52 e4       	ldi	r21, 0x42	; 66
    99ea:	b6 d7       	rcall	.+3948   	; 0xa958 <__addsf3>
    99ec:	6b 01       	movw	r12, r22
    99ee:	7c 01       	movw	r14, r24
    99f0:	be 01       	movw	r22, r28
    99f2:	dd 0f       	add	r29, r29
    99f4:	88 0b       	sbc	r24, r24
    99f6:	99 0b       	sbc	r25, r25
    99f8:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    99fc:	9b 01       	movw	r18, r22
    99fe:	ac 01       	movw	r20, r24
    9a00:	c7 01       	movw	r24, r14
    9a02:	b6 01       	movw	r22, r12
    9a04:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9a08:	de c0       	rjmp	.+444    	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    9a0a:	20 e0       	ldi	r18, 0x00	; 0
    9a0c:	30 e0       	ldi	r19, 0x00	; 0
    9a0e:	40 e1       	ldi	r20, 0x10	; 16
    9a10:	51 e4       	ldi	r21, 0x41	; 65
    9a12:	c7 01       	movw	r24, r14
    9a14:	b6 01       	movw	r22, r12
    9a16:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    9a1a:	18 16       	cp	r1, r24
    9a1c:	0c f0       	brlt	.+2      	; 0x9a20 <corectTrv+0x183c>
    9a1e:	50 c0       	rjmp	.+160    	; 0x9ac0 <corectTrv+0x18dc>
    9a20:	20 e0       	ldi	r18, 0x00	; 0
    9a22:	30 e0       	ldi	r19, 0x00	; 0
    9a24:	40 e2       	ldi	r20, 0x20	; 32
    9a26:	51 e4       	ldi	r21, 0x41	; 65
    9a28:	c7 01       	movw	r24, r14
    9a2a:	b6 01       	movw	r22, r12
    9a2c:	f9 d7       	rcall	.+4082   	; 0xaa20 <__cmpsf2>
    9a2e:	18 16       	cp	r1, r24
    9a30:	0c f4       	brge	.+2      	; 0x9a34 <corectTrv+0x1850>
    9a32:	46 c0       	rjmp	.+140    	; 0x9ac0 <corectTrv+0x18dc>
		{
			return( 0.027 * ds * ds * ds - 1.086 * ds * ds + 14.32 * ds - 44.48)* k;
    9a34:	2b e1       	ldi	r18, 0x1B	; 27
    9a36:	3f e2       	ldi	r19, 0x2F	; 47
    9a38:	4d ed       	ldi	r20, 0xDD	; 221
    9a3a:	5c e3       	ldi	r21, 0x3C	; 60
    9a3c:	c5 01       	movw	r24, r10
    9a3e:	b4 01       	movw	r22, r8
    9a40:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9a44:	a5 01       	movw	r20, r10
    9a46:	94 01       	movw	r18, r8
    9a48:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9a4c:	a5 01       	movw	r20, r10
    9a4e:	94 01       	movw	r18, r8
    9a50:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9a54:	6b 01       	movw	r12, r22
    9a56:	7c 01       	movw	r14, r24
    9a58:	2c e0       	ldi	r18, 0x0C	; 12
    9a5a:	32 e0       	ldi	r19, 0x02	; 2
    9a5c:	4b e8       	ldi	r20, 0x8B	; 139
    9a5e:	5f e3       	ldi	r21, 0x3F	; 63
    9a60:	c5 01       	movw	r24, r10
    9a62:	b4 01       	movw	r22, r8
    9a64:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9a68:	a5 01       	movw	r20, r10
    9a6a:	94 01       	movw	r18, r8
    9a6c:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9a70:	9b 01       	movw	r18, r22
    9a72:	ac 01       	movw	r20, r24
    9a74:	c7 01       	movw	r24, r14
    9a76:	b6 01       	movw	r22, r12
    9a78:	6e d7       	rcall	.+3804   	; 0xa956 <__subsf3>
    9a7a:	6b 01       	movw	r12, r22
    9a7c:	7c 01       	movw	r14, r24
    9a7e:	28 eb       	ldi	r18, 0xB8	; 184
    9a80:	3e e1       	ldi	r19, 0x1E	; 30
    9a82:	45 e6       	ldi	r20, 0x65	; 101
    9a84:	51 e4       	ldi	r21, 0x41	; 65
    9a86:	c5 01       	movw	r24, r10
    9a88:	b4 01       	movw	r22, r8
    9a8a:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9a8e:	9b 01       	movw	r18, r22
    9a90:	ac 01       	movw	r20, r24
    9a92:	c7 01       	movw	r24, r14
    9a94:	b6 01       	movw	r22, r12
    9a96:	60 d7       	rcall	.+3776   	; 0xa958 <__addsf3>
    9a98:	25 e8       	ldi	r18, 0x85	; 133
    9a9a:	3b ee       	ldi	r19, 0xEB	; 235
    9a9c:	41 e3       	ldi	r20, 0x31	; 49
    9a9e:	52 e4       	ldi	r21, 0x42	; 66
    9aa0:	5a d7       	rcall	.+3764   	; 0xa956 <__subsf3>
    9aa2:	6b 01       	movw	r12, r22
    9aa4:	7c 01       	movw	r14, r24
    9aa6:	be 01       	movw	r22, r28
    9aa8:	dd 0f       	add	r29, r29
    9aaa:	88 0b       	sbc	r24, r24
    9aac:	99 0b       	sbc	r25, r25
    9aae:	0e 94 af 55 	call	0xab5e	; 0xab5e <__floatsisf>
    9ab2:	9b 01       	movw	r18, r22
    9ab4:	ac 01       	movw	r20, r24
    9ab6:	c7 01       	movw	r24, r14
    9ab8:	b6 01       	movw	r22, r12
    9aba:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9abe:	83 c0       	rjmp	.+262    	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    9ac0:	20 e0       	ldi	r18, 0x00	; 0
    9ac2:	30 e0       	ldi	r19, 0x00	; 0
    9ac4:	40 e2       	ldi	r20, 0x20	; 32
    9ac6:	51 e4       	ldi	r21, 0x41	; 65
    9ac8:	c7 01       	movw	r24, r14
    9aca:	b6 01       	movw	r22, r12
    9acc:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    9ad0:	18 16       	cp	r1, r24
    9ad2:	0c f0       	brlt	.+2      	; 0x9ad6 <corectTrv+0x18f2>
    9ad4:	4f c0       	rjmp	.+158    	; 0x9b74 <corectTrv+0x1990>
    9ad6:	20 e0       	ldi	r18, 0x00	; 0
    9ad8:	30 e0       	ldi	r19, 0x00	; 0
    9ada:	40 e3       	ldi	r20, 0x30	; 48
    9adc:	51 e4       	ldi	r21, 0x41	; 65
    9ade:	c7 01       	movw	r24, r14
    9ae0:	b6 01       	movw	r22, r12
    9ae2:	9e d7       	rcall	.+3900   	; 0xaa20 <__cmpsf2>
    9ae4:	18 16       	cp	r1, r24
    9ae6:	0c f4       	brge	.+2      	; 0x9aea <corectTrv+0x1906>
    9ae8:	45 c0       	rjmp	.+138    	; 0x9b74 <corectTrv+0x1990>
		{
			return( 0.026 * ds * ds * ds - 1.084 * ds * ds + 14.27 * ds - 40.99)* k;
    9aea:	24 ef       	ldi	r18, 0xF4	; 244
    9aec:	3d ef       	ldi	r19, 0xFD	; 253
    9aee:	44 ed       	ldi	r20, 0xD4	; 212
    9af0:	5c e3       	ldi	r21, 0x3C	; 60
    9af2:	c5 01       	movw	r24, r10
    9af4:	b4 01       	movw	r22, r8
    9af6:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9afa:	a5 01       	movw	r20, r10
    9afc:	94 01       	movw	r18, r8
    9afe:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9b02:	a5 01       	movw	r20, r10
    9b04:	94 01       	movw	r18, r8
    9b06:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9b0a:	6b 01       	movw	r12, r22
    9b0c:	7c 01       	movw	r14, r24
    9b0e:	23 e8       	ldi	r18, 0x83	; 131
    9b10:	30 ec       	ldi	r19, 0xC0	; 192
    9b12:	4a e8       	ldi	r20, 0x8A	; 138
    9b14:	5f e3       	ldi	r21, 0x3F	; 63
    9b16:	c5 01       	movw	r24, r10
    9b18:	b4 01       	movw	r22, r8
    9b1a:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9b1e:	a5 01       	movw	r20, r10
    9b20:	94 01       	movw	r18, r8
    9b22:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9b26:	9b 01       	movw	r18, r22
    9b28:	ac 01       	movw	r20, r24
    9b2a:	c7 01       	movw	r24, r14
    9b2c:	b6 01       	movw	r22, r12
    9b2e:	13 d7       	rcall	.+3622   	; 0xa956 <__subsf3>
    9b30:	6b 01       	movw	r12, r22
    9b32:	7c 01       	movw	r14, r24
    9b34:	2c ee       	ldi	r18, 0xEC	; 236
    9b36:	31 e5       	ldi	r19, 0x51	; 81
    9b38:	44 e6       	ldi	r20, 0x64	; 100
    9b3a:	51 e4       	ldi	r21, 0x41	; 65
    9b3c:	c5 01       	movw	r24, r10
    9b3e:	b4 01       	movw	r22, r8
    9b40:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9b44:	9b 01       	movw	r18, r22
    9b46:	ac 01       	movw	r20, r24
    9b48:	c7 01       	movw	r24, r14
    9b4a:	b6 01       	movw	r22, r12
    9b4c:	05 d7       	rcall	.+3594   	; 0xa958 <__addsf3>
    9b4e:	23 ec       	ldi	r18, 0xC3	; 195
    9b50:	35 ef       	ldi	r19, 0xF5	; 245
    9b52:	43 e2       	ldi	r20, 0x23	; 35
    9b54:	52 e4       	ldi	r21, 0x42	; 66
    9b56:	ff d6       	rcall	.+3582   	; 0xa956 <__subsf3>
    9b58:	6b 01       	movw	r12, r22
    9b5a:	7c 01       	movw	r14, r24
    9b5c:	be 01       	movw	r22, r28
    9b5e:	dd 0f       	add	r29, r29
    9b60:	88 0b       	sbc	r24, r24
    9b62:	99 0b       	sbc	r25, r25
    9b64:	fc d7       	rcall	.+4088   	; 0xab5e <__floatsisf>
    9b66:	9b 01       	movw	r18, r22
    9b68:	ac 01       	movw	r20, r24
    9b6a:	c7 01       	movw	r24, r14
    9b6c:	b6 01       	movw	r22, r12
    9b6e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9b72:	29 c0       	rjmp	.+82     	; 0x9bc6 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 4)
    9b74:	20 e0       	ldi	r18, 0x00	; 0
    9b76:	30 e0       	ldi	r19, 0x00	; 0
    9b78:	40 e3       	ldi	r20, 0x30	; 48
    9b7a:	51 e4       	ldi	r21, 0x41	; 65
    9b7c:	c7 01       	movw	r24, r14
    9b7e:	b6 01       	movw	r22, r12
    9b80:	0e 94 5f 56 	call	0xacbe	; 0xacbe <__gesf2>
    9b84:	18 16       	cp	r1, r24
    9b86:	e4 f4       	brge	.+56     	; 0x9bc0 <corectTrv+0x19dc>
		{
			return 25* k;
    9b88:	89 e1       	ldi	r24, 0x19	; 25
    9b8a:	8c 9f       	mul	r24, r28
    9b8c:	b0 01       	movw	r22, r0
    9b8e:	8d 9f       	mul	r24, r29
    9b90:	70 0d       	add	r23, r0
    9b92:	11 24       	eor	r1, r1
    9b94:	07 2e       	mov	r0, r23
    9b96:	00 0c       	add	r0, r0
    9b98:	88 0b       	sbc	r24, r24
    9b9a:	99 0b       	sbc	r25, r25
    9b9c:	e0 d7       	rcall	.+4032   	; 0xab5e <__floatsisf>
    9b9e:	13 c0       	rjmp	.+38     	; 0x9bc6 <corectTrv+0x19e2>
		}
	}

	
	return 0;
    9ba0:	60 e0       	ldi	r22, 0x00	; 0
    9ba2:	70 e0       	ldi	r23, 0x00	; 0
    9ba4:	cb 01       	movw	r24, r22
    9ba6:	0f c0       	rjmp	.+30     	; 0x9bc6 <corectTrv+0x19e2>
    9ba8:	60 e0       	ldi	r22, 0x00	; 0
    9baa:	70 e0       	ldi	r23, 0x00	; 0
    9bac:	cb 01       	movw	r24, r22
    9bae:	0b c0       	rjmp	.+22     	; 0x9bc6 <corectTrv+0x19e2>
    9bb0:	60 e0       	ldi	r22, 0x00	; 0
    9bb2:	70 e0       	ldi	r23, 0x00	; 0
    9bb4:	cb 01       	movw	r24, r22
    9bb6:	07 c0       	rjmp	.+14     	; 0x9bc6 <corectTrv+0x19e2>
    9bb8:	60 e0       	ldi	r22, 0x00	; 0
    9bba:	70 e0       	ldi	r23, 0x00	; 0
    9bbc:	cb 01       	movw	r24, r22
    9bbe:	03 c0       	rjmp	.+6      	; 0x9bc6 <corectTrv+0x19e2>
    9bc0:	60 e0       	ldi	r22, 0x00	; 0
    9bc2:	70 e0       	ldi	r23, 0x00	; 0
    9bc4:	cb 01       	movw	r24, r22

}
    9bc6:	df 91       	pop	r29
    9bc8:	cf 91       	pop	r28
    9bca:	ff 90       	pop	r15
    9bcc:	ef 90       	pop	r14
    9bce:	df 90       	pop	r13
    9bd0:	cf 90       	pop	r12
    9bd2:	bf 90       	pop	r11
    9bd4:	af 90       	pop	r10
    9bd6:	9f 90       	pop	r9
    9bd8:	8f 90       	pop	r8
    9bda:	7f 90       	pop	r7
    9bdc:	6f 90       	pop	r6
    9bde:	5f 90       	pop	r5
    9be0:	4f 90       	pop	r4
    9be2:	08 95       	ret

00009be4 <ReadSensors>:
float ConvertToLowPress(uint16_t ADC_value){
	return (ADC_value - Low_Limit_LP) * LP_max/ (Hi_Limit_LP - Low_Limit_LP) ;
}

void ReadSensors(xCompressor *comp)  
{ 
    9be4:	ef 92       	push	r14
    9be6:	ff 92       	push	r15
    9be8:	0f 93       	push	r16
    9bea:	1f 93       	push	r17
    9bec:	cf 93       	push	r28
    9bee:	df 93       	push	r29
    9bf0:	7c 01       	movw	r14, r24
 uint16_t temp = 0;
 const uint8_t samples = 10;        // determines the number of samples taken
 unsigned int sum;               // holds the summated samples
 uint8_t i;
 //static TickType_t countTrvTime=0;
 setAnalogMode(MODE_10_BIT);
    9bf2:	80 e0       	ldi	r24, 0x00	; 0
    9bf4:	0e 94 98 07 	call	0xf30	; 0xf30 <setAnalogMode>
    9bf8:	ca e0       	ldi	r28, 0x0A	; 10
 i = samples;                     // clean up for next channel
 sum = 0;
    9bfa:	00 e0       	ldi	r16, 0x00	; 0
    9bfc:	10 e0       	ldi	r17, 0x00	; 0
 
 do
 {
	 startAnalogConversion(1, 0);
    9bfe:	60 e0       	ldi	r22, 0x00	; 0
    9c00:	81 e0       	ldi	r24, 0x01	; 1
    9c02:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
	 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9c06:	01 c0       	rjmp	.+2      	; 0x9c0a <ReadSensors+0x26>
    9c08:	00 00       	nop
    9c0a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9c0e:	81 11       	cpse	r24, r1
    9c10:	fb cf       	rjmp	.-10     	; 0x9c08 <ReadSensors+0x24>
	 sum += 	analogConversionResult();
    9c12:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9c16:	08 0f       	add	r16, r24
    9c18:	19 1f       	adc	r17, r25
    9c1a:	c1 50       	subi	r28, 0x01	; 1
	 //temp =analogConversionResult();
 } while (--i);
    9c1c:	81 f7       	brne	.-32     	; 0x9bfe <ReadSensors+0x1a>
 temp = (unsigned int) (sum / samples);
 comp->Bac_Temp = ConvertToTemp(temp);
    9c1e:	98 01       	movw	r18, r16
    9c20:	ad ec       	ldi	r26, 0xCD	; 205
    9c22:	bc ec       	ldi	r27, 0xCC	; 204
    9c24:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    9c28:	96 95       	lsr	r25
    9c2a:	87 95       	ror	r24
    9c2c:	96 95       	lsr	r25
    9c2e:	87 95       	ror	r24
    9c30:	96 95       	lsr	r25
    9c32:	87 95       	ror	r24
    9c34:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <ConvertToTemp>
    9c38:	f7 01       	movw	r30, r14
    9c3a:	66 8b       	std	Z+22, r22	; 0x16
    9c3c:	77 8b       	std	Z+23, r23	; 0x17
    9c3e:	80 8f       	std	Z+24, r24	; 0x18
    9c40:	91 8f       	std	Z+25, r25	; 0x19
 //read DHW
 PORTL &= ~ (1 << PL2);//A0
    9c42:	eb e0       	ldi	r30, 0x0B	; 11
    9c44:	f1 e0       	ldi	r31, 0x01	; 1
    9c46:	80 81       	ld	r24, Z
    9c48:	8b 7f       	andi	r24, 0xFB	; 251
    9c4a:	80 83       	st	Z, r24
 PORTL &= ~ (1 << PL1);//A1
    9c4c:	80 81       	ld	r24, Z
    9c4e:	8d 7f       	andi	r24, 0xFD	; 253
    9c50:	80 83       	st	Z, r24
 PORTL |=   (1 << PL0);//A2
    9c52:	80 81       	ld	r24, Z
    9c54:	81 60       	ori	r24, 0x01	; 1
    9c56:	80 83       	st	Z, r24
    9c58:	ca e0       	ldi	r28, 0x0A	; 10
 i = samples;
 sum = 0;
    9c5a:	00 e0       	ldi	r16, 0x00	; 0
    9c5c:	10 e0       	ldi	r17, 0x00	; 0
 do
 {
	 startAnalogConversion(0, 0);
    9c5e:	60 e0       	ldi	r22, 0x00	; 0
    9c60:	80 e0       	ldi	r24, 0x00	; 0
    9c62:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
	 while( analogIsConverting())_delay_us(25);// portYIELD();
    9c66:	01 c0       	rjmp	.+2      	; 0x9c6a <ReadSensors+0x86>
    9c68:	00 00       	nop
    9c6a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9c6e:	81 11       	cpse	r24, r1
    9c70:	fb cf       	rjmp	.-10     	; 0x9c68 <ReadSensors+0x84>
	 sum += 	analogConversionResult();
    9c72:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9c76:	08 0f       	add	r16, r24
    9c78:	19 1f       	adc	r17, r25
    9c7a:	c1 50       	subi	r28, 0x01	; 1
 } while (--i);
    9c7c:	81 f7       	brne	.-32     	; 0x9c5e <ReadSensors+0x7a>
 //temp = analogConversionResult();
 temp = (unsigned int) (sum / samples);
 comp->Dhw_Temp = ConvertToTemp(temp);
    9c7e:	98 01       	movw	r18, r16
    9c80:	ad ec       	ldi	r26, 0xCD	; 205
    9c82:	bc ec       	ldi	r27, 0xCC	; 204
    9c84:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    9c88:	96 95       	lsr	r25
    9c8a:	87 95       	ror	r24
    9c8c:	96 95       	lsr	r25
    9c8e:	87 95       	ror	r24
    9c90:	96 95       	lsr	r25
    9c92:	87 95       	ror	r24
    9c94:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <ConvertToTemp>
    9c98:	f7 01       	movw	r30, r14
    9c9a:	62 8b       	std	Z+18, r22	; 0x12
    9c9c:	73 8b       	std	Z+19, r23	; 0x13
    9c9e:	84 8b       	std	Z+20, r24	; 0x14
    9ca0:	95 8b       	std	Z+21, r25	; 0x15
 
 if(comp->Index==1){
    9ca2:	e2 59       	subi	r30, 0x92	; 146
    9ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    9ca6:	80 81       	ld	r24, Z
    9ca8:	91 81       	ldd	r25, Z+1	; 0x01
    9caa:	01 97       	sbiw	r24, 0x01	; 1
    9cac:	09 f0       	breq	.+2      	; 0x9cb0 <ReadSensors+0xcc>
    9cae:	9d c1       	rjmp	.+826    	; 0x9fea <ReadSensors+0x406>
	 
	 //read High_Pressure_1
	 PORTL |=    (1 << PL2);//a0
    9cb0:	eb e0       	ldi	r30, 0x0B	; 11
    9cb2:	f1 e0       	ldi	r31, 0x01	; 1
    9cb4:	80 81       	ld	r24, Z
    9cb6:	84 60       	ori	r24, 0x04	; 4
    9cb8:	80 83       	st	Z, r24
	 PORTL |=    (1 << PL1);//a1
    9cba:	80 81       	ld	r24, Z
    9cbc:	82 60       	ori	r24, 0x02	; 2
    9cbe:	80 83       	st	Z, r24
	 PORTL &= ~  (1 << PL0);//a2
    9cc0:	80 81       	ld	r24, Z
    9cc2:	8e 7f       	andi	r24, 0xFE	; 254
    9cc4:	80 83       	st	Z, r24
    9cc6:	ca e0       	ldi	r28, 0x0A	; 10
	 i = samples;
	 sum = 0;
    9cc8:	00 e0       	ldi	r16, 0x00	; 0
    9cca:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {		     startAnalogConversion(0, 0);
    9ccc:	60 e0       	ldi	r22, 0x00	; 0
    9cce:	80 e0       	ldi	r24, 0x00	; 0
    9cd0:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() ) _delay_us(25);//portYIELD();
    9cd4:	01 c0       	rjmp	.+2      	; 0x9cd8 <ReadSensors+0xf4>
    9cd6:	00 00       	nop
    9cd8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9cdc:	81 11       	cpse	r24, r1
    9cde:	fb cf       	rjmp	.-10     	; 0x9cd6 <ReadSensors+0xf2>
		 sum += analogConversionResult();
    9ce0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9ce4:	08 0f       	add	r16, r24
    9ce6:	19 1f       	adc	r17, r25
    9ce8:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9cea:	81 f7       	brne	.-32     	; 0x9ccc <ReadSensors+0xe8>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->High_Press = ConvertToHighPress(temp);
    9cec:	98 01       	movw	r18, r16
    9cee:	ad ec       	ldi	r26, 0xCD	; 205
    9cf0:	bc ec       	ldi	r27, 0xCC	; 204
    9cf2:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    9cf6:	96 95       	lsr	r25
    9cf8:	87 95       	ror	r24
    9cfa:	96 95       	lsr	r25
    9cfc:	87 95       	ror	r24
    9cfe:	96 95       	lsr	r25
    9d00:	87 95       	ror	r24
    9d02:	bc 01       	movw	r22, r24
    9d04:	80 e0       	ldi	r24, 0x00	; 0
    9d06:	90 e0       	ldi	r25, 0x00	; 0
    9d08:	28 d7       	rcall	.+3664   	; 0xab5a <__floatunsisf>
    9d0a:	20 e0       	ldi	r18, 0x00	; 0
    9d0c:	30 e0       	ldi	r19, 0x00	; 0
    9d0e:	4c ec       	ldi	r20, 0xCC	; 204
    9d10:	52 e4       	ldi	r21, 0x42	; 66
    9d12:	21 d6       	rcall	.+3138   	; 0xa956 <__subsf3>
    9d14:	20 e0       	ldi	r18, 0x00	; 0
    9d16:	30 e0       	ldi	r19, 0x00	; 0
    9d18:	48 e0       	ldi	r20, 0x08	; 8
    9d1a:	52 e4       	ldi	r21, 0x42	; 66
    9d1c:	0e 94 a8 56 	call	0xad50	; 0xad50 <__mulsf3>
    9d20:	20 e0       	ldi	r18, 0x00	; 0
    9d22:	30 e0       	ldi	r19, 0x00	; 0
    9d24:	4d e4       	ldi	r20, 0x4D	; 77
    9d26:	54 e4       	ldi	r21, 0x44	; 68
    9d28:	7f d6       	rcall	.+3326   	; 0xaa28 <__divsf3>
    9d2a:	f7 01       	movw	r30, r14
    9d2c:	62 8f       	std	Z+26, r22	; 0x1a
    9d2e:	73 8f       	std	Z+27, r23	; 0x1b
    9d30:	84 8f       	std	Z+28, r24	; 0x1c
    9d32:	95 8f       	std	Z+29, r25	; 0x1d
	 //read Low_Pressure_1
	 PORTL &= ~   (1 << PL2);
    9d34:	eb e0       	ldi	r30, 0x0B	; 11
    9d36:	f1 e0       	ldi	r31, 0x01	; 1
    9d38:	80 81       	ld	r24, Z
    9d3a:	8b 7f       	andi	r24, 0xFB	; 251
    9d3c:	80 83       	st	Z, r24
	 PORTL &= ~   (1 << PL1);
    9d3e:	80 81       	ld	r24, Z
    9d40:	8d 7f       	andi	r24, 0xFD	; 253
    9d42:	80 83       	st	Z, r24
	 PORTL &= ~   (1 << PL0);
    9d44:	80 81       	ld	r24, Z
    9d46:	8e 7f       	andi	r24, 0xFE	; 254
    9d48:	80 83       	st	Z, r24
    9d4a:	ca e0       	ldi	r28, 0x0A	; 10
	 i = samples;
	 sum = 0;
    9d4c:	00 e0       	ldi	r16, 0x00	; 0
    9d4e:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(0, 0);
    9d50:	60 e0       	ldi	r22, 0x00	; 0
    9d52:	80 e0       	ldi	r24, 0x00	; 0
    9d54:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9d58:	01 c0       	rjmp	.+2      	; 0x9d5c <ReadSensors+0x178>
    9d5a:	00 00       	nop
    9d5c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9d60:	81 11       	cpse	r24, r1
    9d62:	fb cf       	rjmp	.-10     	; 0x9d5a <ReadSensors+0x176>
		 sum += analogConversionResult();
    9d64:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9d68:	08 0f       	add	r16, r24
    9d6a:	19 1f       	adc	r17, r25
    9d6c:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9d6e:	81 f7       	brne	.-32     	; 0x9d50 <ReadSensors+0x16c>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Low_Press = ConvertToLowPress( temp );
    9d70:	98 01       	movw	r18, r16
    9d72:	ad ec       	ldi	r26, 0xCD	; 205
    9d74:	bc ec       	ldi	r27, 0xCC	; 204
    9d76:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    9d7a:	96 95       	lsr	r25
    9d7c:	87 95       	ror	r24
    9d7e:	96 95       	lsr	r25
    9d80:	87 95       	ror	r24
    9d82:	96 95       	lsr	r25
    9d84:	87 95       	ror	r24
    9d86:	bc 01       	movw	r22, r24
    9d88:	80 e0       	ldi	r24, 0x00	; 0
    9d8a:	90 e0       	ldi	r25, 0x00	; 0
    9d8c:	e6 d6       	rcall	.+3532   	; 0xab5a <__floatunsisf>
    9d8e:	20 e0       	ldi	r18, 0x00	; 0
    9d90:	30 e0       	ldi	r19, 0x00	; 0
    9d92:	4c e5       	ldi	r20, 0x5C	; 92
    9d94:	52 e4       	ldi	r21, 0x42	; 66
    9d96:	df d5       	rcall	.+3006   	; 0xa956 <__subsf3>
    9d98:	20 e0       	ldi	r18, 0x00	; 0
    9d9a:	30 e0       	ldi	r19, 0x00	; 0
    9d9c:	40 e9       	ldi	r20, 0x90	; 144
    9d9e:	51 e4       	ldi	r21, 0x41	; 65
    9da0:	d7 d7       	rcall	.+4014   	; 0xad50 <__mulsf3>
    9da2:	20 e0       	ldi	r18, 0x00	; 0
    9da4:	30 ec       	ldi	r19, 0xC0	; 192
    9da6:	48 e5       	ldi	r20, 0x58	; 88
    9da8:	54 e4       	ldi	r21, 0x44	; 68
    9daa:	3e d6       	rcall	.+3196   	; 0xaa28 <__divsf3>
    9dac:	f7 01       	movw	r30, r14
    9dae:	66 8f       	std	Z+30, r22	; 0x1e
    9db0:	77 8f       	std	Z+31, r23	; 0x1f
    9db2:	80 a3       	std	Z+32, r24	; 0x20
    9db4:	91 a3       	std	Z+33, r25	; 0x21
    9db6:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9db8:	00 e0       	ldi	r16, 0x00	; 0
    9dba:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(9, 0);
    9dbc:	60 e0       	ldi	r22, 0x00	; 0
    9dbe:	89 e0       	ldi	r24, 0x09	; 9
    9dc0:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9dc4:	01 c0       	rjmp	.+2      	; 0x9dc8 <ReadSensors+0x1e4>
    9dc6:	00 00       	nop
    9dc8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9dcc:	81 11       	cpse	r24, r1
    9dce:	fb cf       	rjmp	.-10     	; 0x9dc6 <ReadSensors+0x1e2>
		 sum += analogConversionResult();
    9dd0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9dd4:	08 0f       	add	r16, r24
    9dd6:	19 1f       	adc	r17, r25
    9dd8:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9dda:	81 f7       	brne	.-32     	; 0x9dbc <ReadSensors+0x1d8>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Heat_Out = ConvertToTemp( temp );
    9ddc:	98 01       	movw	r18, r16
    9dde:	ad ec       	ldi	r26, 0xCD	; 205
    9de0:	bc ec       	ldi	r27, 0xCC	; 204
    9de2:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    9de6:	96 95       	lsr	r25
    9de8:	87 95       	ror	r24
    9dea:	96 95       	lsr	r25
    9dec:	87 95       	ror	r24
    9dee:	96 95       	lsr	r25
    9df0:	87 95       	ror	r24
    9df2:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <ConvertToTemp>
    9df6:	f7 01       	movw	r30, r14
    9df8:	62 a7       	std	Z+42, r22	; 0x2a
    9dfa:	73 a7       	std	Z+43, r23	; 0x2b
    9dfc:	84 a7       	std	Z+44, r24	; 0x2c
    9dfe:	95 a7       	std	Z+45, r25	; 0x2d
    9e00:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9e02:	00 e0       	ldi	r16, 0x00	; 0
    9e04:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(10, 0);
    9e06:	60 e0       	ldi	r22, 0x00	; 0
    9e08:	8a e0       	ldi	r24, 0x0A	; 10
    9e0a:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9e0e:	01 c0       	rjmp	.+2      	; 0x9e12 <ReadSensors+0x22e>
    9e10:	00 00       	nop
    9e12:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9e16:	81 11       	cpse	r24, r1
    9e18:	fb cf       	rjmp	.-10     	; 0x9e10 <ReadSensors+0x22c>
		 sum += analogConversionResult();
    9e1a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9e1e:	08 0f       	add	r16, r24
    9e20:	19 1f       	adc	r17, r25
    9e22:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9e24:	81 f7       	brne	.-32     	; 0x9e06 <ReadSensors+0x222>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Heat_In = ConvertToTemp( temp );
    9e26:	98 01       	movw	r18, r16
    9e28:	ad ec       	ldi	r26, 0xCD	; 205
    9e2a:	bc ec       	ldi	r27, 0xCC	; 204
    9e2c:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    9e30:	96 95       	lsr	r25
    9e32:	87 95       	ror	r24
    9e34:	96 95       	lsr	r25
    9e36:	87 95       	ror	r24
    9e38:	96 95       	lsr	r25
    9e3a:	87 95       	ror	r24
    9e3c:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <ConvertToTemp>
    9e40:	f7 01       	movw	r30, r14
    9e42:	66 a7       	std	Z+46, r22	; 0x2e
    9e44:	77 a7       	std	Z+47, r23	; 0x2f
    9e46:	80 ab       	std	Z+48, r24	; 0x30
    9e48:	91 ab       	std	Z+49, r25	; 0x31
    9e4a:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9e4c:	00 e0       	ldi	r16, 0x00	; 0
    9e4e:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(11, 0);
    9e50:	60 e0       	ldi	r22, 0x00	; 0
    9e52:	8b e0       	ldi	r24, 0x0B	; 11
    9e54:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9e58:	01 c0       	rjmp	.+2      	; 0x9e5c <ReadSensors+0x278>
    9e5a:	00 00       	nop
    9e5c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9e60:	81 11       	cpse	r24, r1
    9e62:	fb cf       	rjmp	.-10     	; 0x9e5a <ReadSensors+0x276>
		 sum += analogConversionResult();
    9e64:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9e68:	08 0f       	add	r16, r24
    9e6a:	19 1f       	adc	r17, r25
    9e6c:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9e6e:	81 f7       	brne	.-32     	; 0x9e50 <ReadSensors+0x26c>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Src_In = ConvertToTemp( temp );
    9e70:	98 01       	movw	r18, r16
    9e72:	ad ec       	ldi	r26, 0xCD	; 205
    9e74:	bc ec       	ldi	r27, 0xCC	; 204
    9e76:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    9e7a:	96 95       	lsr	r25
    9e7c:	87 95       	ror	r24
    9e7e:	96 95       	lsr	r25
    9e80:	87 95       	ror	r24
    9e82:	96 95       	lsr	r25
    9e84:	87 95       	ror	r24
    9e86:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <ConvertToTemp>
    9e8a:	f7 01       	movw	r30, r14
    9e8c:	62 ab       	std	Z+50, r22	; 0x32
    9e8e:	73 ab       	std	Z+51, r23	; 0x33
    9e90:	84 ab       	std	Z+52, r24	; 0x34
    9e92:	95 ab       	std	Z+53, r25	; 0x35
    9e94:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9e96:	00 e0       	ldi	r16, 0x00	; 0
    9e98:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(12, 0);
    9e9a:	60 e0       	ldi	r22, 0x00	; 0
    9e9c:	8c e0       	ldi	r24, 0x0C	; 12
    9e9e:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);
    9ea2:	01 c0       	rjmp	.+2      	; 0x9ea6 <ReadSensors+0x2c2>
    9ea4:	00 00       	nop
    9ea6:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9eaa:	81 11       	cpse	r24, r1
    9eac:	fb cf       	rjmp	.-10     	; 0x9ea4 <ReadSensors+0x2c0>
		 sum += analogConversionResult();
    9eae:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9eb2:	08 0f       	add	r16, r24
    9eb4:	19 1f       	adc	r17, r25
    9eb6:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9eb8:	81 f7       	brne	.-32     	; 0x9e9a <ReadSensors+0x2b6>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Src_Out = ConvertToTemp( temp );
    9eba:	98 01       	movw	r18, r16
    9ebc:	ad ec       	ldi	r26, 0xCD	; 205
    9ebe:	bc ec       	ldi	r27, 0xCC	; 204
    9ec0:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    9ec4:	96 95       	lsr	r25
    9ec6:	87 95       	ror	r24
    9ec8:	96 95       	lsr	r25
    9eca:	87 95       	ror	r24
    9ecc:	96 95       	lsr	r25
    9ece:	87 95       	ror	r24
    9ed0:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <ConvertToTemp>
    9ed4:	f7 01       	movw	r30, r14
    9ed6:	66 ab       	std	Z+54, r22	; 0x36
    9ed8:	77 ab       	std	Z+55, r23	; 0x37
    9eda:	80 af       	std	Z+56, r24	; 0x38
    9edc:	91 af       	std	Z+57, r25	; 0x39
    9ede:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9ee0:	00 e0       	ldi	r16, 0x00	; 0
    9ee2:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(13, 0);
    9ee4:	60 e0       	ldi	r22, 0x00	; 0
    9ee6:	8d e0       	ldi	r24, 0x0D	; 13
    9ee8:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9eec:	01 c0       	rjmp	.+2      	; 0x9ef0 <ReadSensors+0x30c>
    9eee:	00 00       	nop
    9ef0:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9ef4:	81 11       	cpse	r24, r1
    9ef6:	fb cf       	rjmp	.-10     	; 0x9eee <ReadSensors+0x30a>
		 sum += analogConversionResult();
    9ef8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9efc:	08 0f       	add	r16, r24
    9efe:	19 1f       	adc	r17, r25
    9f00:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9f02:	81 f7       	brne	.-32     	; 0x9ee4 <ReadSensors+0x300>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Ex_Comp = ConvertToTemp( temp );
    9f04:	98 01       	movw	r18, r16
    9f06:	ad ec       	ldi	r26, 0xCD	; 205
    9f08:	bc ec       	ldi	r27, 0xCC	; 204
    9f0a:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    9f0e:	96 95       	lsr	r25
    9f10:	87 95       	ror	r24
    9f12:	96 95       	lsr	r25
    9f14:	87 95       	ror	r24
    9f16:	96 95       	lsr	r25
    9f18:	87 95       	ror	r24
    9f1a:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <ConvertToTemp>
    9f1e:	f7 01       	movw	r30, r14
    9f20:	62 af       	std	Z+58, r22	; 0x3a
    9f22:	73 af       	std	Z+59, r23	; 0x3b
    9f24:	84 af       	std	Z+60, r24	; 0x3c
    9f26:	95 af       	std	Z+61, r25	; 0x3d
    9f28:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9f2a:	00 e0       	ldi	r16, 0x00	; 0
    9f2c:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(14, 0);
    9f2e:	60 e0       	ldi	r22, 0x00	; 0
    9f30:	8e e0       	ldi	r24, 0x0E	; 14
    9f32:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9f36:	01 c0       	rjmp	.+2      	; 0x9f3a <ReadSensors+0x356>
    9f38:	00 00       	nop
    9f3a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9f3e:	81 11       	cpse	r24, r1
    9f40:	fb cf       	rjmp	.-10     	; 0x9f38 <ReadSensors+0x354>
		 sum += analogConversionResult();
    9f42:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9f46:	08 0f       	add	r16, r24
    9f48:	19 1f       	adc	r17, r25
    9f4a:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9f4c:	81 f7       	brne	.-32     	; 0x9f2e <ReadSensors+0x34a>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Suc_Comp = ConvertToTemp( temp );
    9f4e:	98 01       	movw	r18, r16
    9f50:	ad ec       	ldi	r26, 0xCD	; 205
    9f52:	bc ec       	ldi	r27, 0xCC	; 204
    9f54:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    9f58:	96 95       	lsr	r25
    9f5a:	87 95       	ror	r24
    9f5c:	96 95       	lsr	r25
    9f5e:	87 95       	ror	r24
    9f60:	96 95       	lsr	r25
    9f62:	87 95       	ror	r24
    9f64:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <ConvertToTemp>
    9f68:	f7 01       	movw	r30, r14
    9f6a:	fe 96       	adiw	r30, 0x3e	; 62
    9f6c:	60 83       	st	Z, r22
    9f6e:	71 83       	std	Z+1, r23	; 0x01
    9f70:	82 83       	std	Z+2, r24	; 0x02
    9f72:	93 83       	std	Z+3, r25	; 0x03
    9f74:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9f76:	00 e0       	ldi	r16, 0x00	; 0
    9f78:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(15, 0);
    9f7a:	60 e0       	ldi	r22, 0x00	; 0
    9f7c:	8f e0       	ldi	r24, 0x0F	; 15
    9f7e:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9f82:	01 c0       	rjmp	.+2      	; 0x9f86 <ReadSensors+0x3a2>
    9f84:	00 00       	nop
    9f86:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9f8a:	81 11       	cpse	r24, r1
    9f8c:	fb cf       	rjmp	.-10     	; 0x9f84 <ReadSensors+0x3a0>
		 sum += analogConversionResult();
    9f8e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9f92:	08 0f       	add	r16, r24
    9f94:	19 1f       	adc	r17, r25
    9f96:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9f98:	81 f7       	brne	.-32     	; 0x9f7a <ReadSensors+0x396>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Cond_Temp = ConvertToTemp( temp )	;
    9f9a:	98 01       	movw	r18, r16
    9f9c:	ad ec       	ldi	r26, 0xCD	; 205
    9f9e:	bc ec       	ldi	r27, 0xCC	; 204
    9fa0:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <__umulhisi3>
    9fa4:	96 95       	lsr	r25
    9fa6:	87 95       	ror	r24
    9fa8:	96 95       	lsr	r25
    9faa:	87 95       	ror	r24
    9fac:	96 95       	lsr	r25
    9fae:	87 95       	ror	r24
    9fb0:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <ConvertToTemp>
    9fb4:	f7 01       	movw	r30, r14
    9fb6:	ee 5b       	subi	r30, 0xBE	; 190
    9fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    9fba:	60 83       	st	Z, r22
    9fbc:	71 83       	std	Z+1, r23	; 0x01
    9fbe:	82 83       	std	Z+2, r24	; 0x02
    9fc0:	93 83       	std	Z+3, r25	; 0x03
	 //--------------------------------------------------------------
	 comp->SuperHeat=ReadSuperHeat (comp);
    9fc2:	c7 01       	movw	r24, r14
    9fc4:	0e 94 1f 40 	call	0x803e	; 0x803e <ReadSuperHeat>
    9fc8:	f7 01       	movw	r30, r14
    9fca:	ea 5b       	subi	r30, 0xBA	; 186
    9fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    9fce:	60 83       	st	Z, r22
    9fd0:	71 83       	std	Z+1, r23	; 0x01
    9fd2:	82 83       	std	Z+2, r24	; 0x02
    9fd4:	93 83       	std	Z+3, r25	; 0x03
	 comp->SuperCool=ReadSuperCool (comp);				
    9fd6:	c7 01       	movw	r24, r14
    9fd8:	0e 94 89 40 	call	0x8112	; 0x8112 <ReadSuperCool>
    9fdc:	f7 01       	movw	r30, r14
    9fde:	e6 5b       	subi	r30, 0xB6	; 182
    9fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    9fe2:	60 83       	st	Z, r22
    9fe4:	71 83       	std	Z+1, r23	; 0x01
    9fe6:	82 83       	std	Z+2, r24	; 0x02
    9fe8:	93 83       	std	Z+3, r25	; 0x03
						}
						
    if(comp->Index==2) 
    9fea:	f7 01       	movw	r30, r14
    9fec:	e2 59       	subi	r30, 0x92	; 146
    9fee:	ff 4f       	sbci	r31, 0xFF	; 255
    9ff0:	80 81       	ld	r24, Z
    9ff2:	91 81       	ldd	r25, Z+1	; 0x01
    9ff4:	02 97       	sbiw	r24, 0x02	; 2
    9ff6:	09 f0       	breq	.+2      	; 0x9ffa <ReadSensors+0x416>
    9ff8:	07 c1       	rjmp	.+526    	; 0xa208 <ReadSensors+0x624>
	{
					 //read High_Pressure_1
					 PORTL |=    (1 << PL2);//a0
    9ffa:	eb e0       	ldi	r30, 0x0B	; 11
    9ffc:	f1 e0       	ldi	r31, 0x01	; 1
    9ffe:	80 81       	ld	r24, Z
    a000:	84 60       	ori	r24, 0x04	; 4
    a002:	80 83       	st	Z, r24
					 PORTL &= ~  (1 << PL1);//a1
    a004:	80 81       	ld	r24, Z
    a006:	8d 7f       	andi	r24, 0xFD	; 253
    a008:	80 83       	st	Z, r24
					 PORTL &= ~  (1 << PL0);//a2
    a00a:	80 81       	ld	r24, Z
    a00c:	8e 7f       	andi	r24, 0xFE	; 254
    a00e:	80 83       	st	Z, r24
					 startAnalogConversion(0, 0);
    a010:	60 e0       	ldi	r22, 0x00	; 0
    a012:	80 e0       	ldi	r24, 0x00	; 0
    a014:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					 while( analogIsConverting() )
    a018:	01 c0       	rjmp	.+2      	; 0xa01c <ReadSensors+0x438>
    a01a:	00 00       	nop
    a01c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    a020:	81 11       	cpse	r24, r1
					 _delay_us(25);//portYIELD();
					 temp = analogConversionResult();
    a022:	fb cf       	rjmp	.-10     	; 0xa01a <ReadSensors+0x436>
    a024:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					 comp->High_Press = ConvertToHighPress(temp);
    a028:	bc 01       	movw	r22, r24
    a02a:	80 e0       	ldi	r24, 0x00	; 0
    a02c:	90 e0       	ldi	r25, 0x00	; 0
    a02e:	95 d5       	rcall	.+2858   	; 0xab5a <__floatunsisf>
    a030:	20 e0       	ldi	r18, 0x00	; 0
    a032:	30 e0       	ldi	r19, 0x00	; 0
    a034:	4c ec       	ldi	r20, 0xCC	; 204
    a036:	52 e4       	ldi	r21, 0x42	; 66
    a038:	8e d4       	rcall	.+2332   	; 0xa956 <__subsf3>
    a03a:	20 e0       	ldi	r18, 0x00	; 0
    a03c:	30 e0       	ldi	r19, 0x00	; 0
    a03e:	48 e0       	ldi	r20, 0x08	; 8
    a040:	52 e4       	ldi	r21, 0x42	; 66
    a042:	86 d6       	rcall	.+3340   	; 0xad50 <__mulsf3>
    a044:	20 e0       	ldi	r18, 0x00	; 0
    a046:	30 e0       	ldi	r19, 0x00	; 0
    a048:	4d e4       	ldi	r20, 0x4D	; 77
    a04a:	54 e4       	ldi	r21, 0x44	; 68
    a04c:	ed d4       	rcall	.+2522   	; 0xaa28 <__divsf3>
    a04e:	f7 01       	movw	r30, r14
    a050:	62 8f       	std	Z+26, r22	; 0x1a
    a052:	73 8f       	std	Z+27, r23	; 0x1b
    a054:	84 8f       	std	Z+28, r24	; 0x1c
    a056:	95 8f       	std	Z+29, r25	; 0x1d
					 //read Low_Pressure_1
					 PORTL &= ~   (1 << PL2);
    a058:	eb e0       	ldi	r30, 0x0B	; 11
    a05a:	f1 e0       	ldi	r31, 0x01	; 1
    a05c:	80 81       	ld	r24, Z
    a05e:	8b 7f       	andi	r24, 0xFB	; 251
    a060:	80 83       	st	Z, r24
					 PORTL |=     (1 << PL1);
    a062:	80 81       	ld	r24, Z
    a064:	82 60       	ori	r24, 0x02	; 2
    a066:	80 83       	st	Z, r24
					 PORTL &= ~   (1 << PL0);
    a068:	80 81       	ld	r24, Z
    a06a:	8e 7f       	andi	r24, 0xFE	; 254
    a06c:	80 83       	st	Z, r24
					 startAnalogConversion(0, 0);
    a06e:	60 e0       	ldi	r22, 0x00	; 0
    a070:	80 e0       	ldi	r24, 0x00	; 0
    a072:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					 while( analogIsConverting() )
    a076:	01 c0       	rjmp	.+2      	; 0xa07a <ReadSensors+0x496>
    a078:	00 00       	nop
    a07a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    a07e:	81 11       	cpse	r24, r1
					_delay_us(25);// portYIELD();
					 temp = analogConversionResult();
    a080:	fb cf       	rjmp	.-10     	; 0xa078 <ReadSensors+0x494>
					 comp->Low_Press = ConvertToLowPress( temp );
    a082:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    a086:	bc 01       	movw	r22, r24
    a088:	80 e0       	ldi	r24, 0x00	; 0
    a08a:	90 e0       	ldi	r25, 0x00	; 0
    a08c:	66 d5       	rcall	.+2764   	; 0xab5a <__floatunsisf>
    a08e:	20 e0       	ldi	r18, 0x00	; 0
    a090:	30 e0       	ldi	r19, 0x00	; 0
    a092:	4c e5       	ldi	r20, 0x5C	; 92
    a094:	52 e4       	ldi	r21, 0x42	; 66
    a096:	5f d4       	rcall	.+2238   	; 0xa956 <__subsf3>
    a098:	20 e0       	ldi	r18, 0x00	; 0
    a09a:	30 e0       	ldi	r19, 0x00	; 0
    a09c:	40 e9       	ldi	r20, 0x90	; 144
    a09e:	51 e4       	ldi	r21, 0x41	; 65
    a0a0:	57 d6       	rcall	.+3246   	; 0xad50 <__mulsf3>
    a0a2:	20 e0       	ldi	r18, 0x00	; 0
    a0a4:	30 ec       	ldi	r19, 0xC0	; 192
    a0a6:	48 e5       	ldi	r20, 0x58	; 88
    a0a8:	54 e4       	ldi	r21, 0x44	; 68
    a0aa:	be d4       	rcall	.+2428   	; 0xaa28 <__divsf3>
    a0ac:	f7 01       	movw	r30, r14
    a0ae:	66 8f       	std	Z+30, r22	; 0x1e
    a0b0:	77 8f       	std	Z+31, r23	; 0x1f
    a0b2:	80 a3       	std	Z+32, r24	; 0x20
    a0b4:	91 a3       	std	Z+33, r25	; 0x21
					startAnalogConversion(2, 0);
    a0b6:	60 e0       	ldi	r22, 0x00	; 0
    a0b8:	82 e0       	ldi	r24, 0x02	; 2
    a0ba:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    a0be:	01 c0       	rjmp	.+2      	; 0xa0c2 <ReadSensors+0x4de>
    a0c0:	00 00       	nop
    a0c2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    a0c6:	81 11       	cpse	r24, r1
    a0c8:	fb cf       	rjmp	.-10     	; 0xa0c0 <ReadSensors+0x4dc>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    a0ca:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Heat_Out = ConvertToTemp( temp );
    a0ce:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <ConvertToTemp>
    a0d2:	f7 01       	movw	r30, r14
    a0d4:	62 a7       	std	Z+42, r22	; 0x2a
    a0d6:	73 a7       	std	Z+43, r23	; 0x2b
    a0d8:	84 a7       	std	Z+44, r24	; 0x2c
    a0da:	95 a7       	std	Z+45, r25	; 0x2d
					//---------------------------------------------------------------
					startAnalogConversion(3, 0);
    a0dc:	60 e0       	ldi	r22, 0x00	; 0
    a0de:	83 e0       	ldi	r24, 0x03	; 3
    a0e0:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    a0e4:	01 c0       	rjmp	.+2      	; 0xa0e8 <ReadSensors+0x504>
    a0e6:	00 00       	nop
    a0e8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    a0ec:	81 11       	cpse	r24, r1
    a0ee:	fb cf       	rjmp	.-10     	; 0xa0e6 <ReadSensors+0x502>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    a0f0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Heat_In = ConvertToTemp( temp );
    a0f4:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <ConvertToTemp>
    a0f8:	f7 01       	movw	r30, r14
    a0fa:	66 a7       	std	Z+46, r22	; 0x2e
    a0fc:	77 a7       	std	Z+47, r23	; 0x2f
    a0fe:	80 ab       	std	Z+48, r24	; 0x30
    a100:	91 ab       	std	Z+49, r25	; 0x31
					//---------------------------------------------------------------
					startAnalogConversion(4, 0);
    a102:	60 e0       	ldi	r22, 0x00	; 0
    a104:	84 e0       	ldi	r24, 0x04	; 4
    a106:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    a10a:	01 c0       	rjmp	.+2      	; 0xa10e <ReadSensors+0x52a>
    a10c:	00 00       	nop
    a10e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    a112:	81 11       	cpse	r24, r1
    a114:	fb cf       	rjmp	.-10     	; 0xa10c <ReadSensors+0x528>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    a116:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Src_In = ConvertToTemp( temp );
    a11a:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <ConvertToTemp>
    a11e:	f7 01       	movw	r30, r14
    a120:	62 ab       	std	Z+50, r22	; 0x32
    a122:	73 ab       	std	Z+51, r23	; 0x33
    a124:	84 ab       	std	Z+52, r24	; 0x34
    a126:	95 ab       	std	Z+53, r25	; 0x35
					//---------------------------------------------------------------
					startAnalogConversion(5, 0);
    a128:	60 e0       	ldi	r22, 0x00	; 0
    a12a:	85 e0       	ldi	r24, 0x05	; 5
    a12c:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    a130:	01 c0       	rjmp	.+2      	; 0xa134 <ReadSensors+0x550>
    a132:	00 00       	nop
    a134:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    a138:	81 11       	cpse	r24, r1
    a13a:	fb cf       	rjmp	.-10     	; 0xa132 <ReadSensors+0x54e>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    a13c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Src_Out = ConvertToTemp( temp );
    a140:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <ConvertToTemp>
    a144:	f7 01       	movw	r30, r14
    a146:	66 ab       	std	Z+54, r22	; 0x36
    a148:	77 ab       	std	Z+55, r23	; 0x37
    a14a:	80 af       	std	Z+56, r24	; 0x38
    a14c:	91 af       	std	Z+57, r25	; 0x39
					//---------------------------------------------------------------
					startAnalogConversion(6, 0);
    a14e:	60 e0       	ldi	r22, 0x00	; 0
    a150:	86 e0       	ldi	r24, 0x06	; 6
    a152:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    a156:	01 c0       	rjmp	.+2      	; 0xa15a <ReadSensors+0x576>
    a158:	00 00       	nop
    a15a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    a15e:	81 11       	cpse	r24, r1
    a160:	fb cf       	rjmp	.-10     	; 0xa158 <ReadSensors+0x574>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    a162:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Ex_Comp = ConvertToTemp( temp );
    a166:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <ConvertToTemp>
    a16a:	f7 01       	movw	r30, r14
    a16c:	62 af       	std	Z+58, r22	; 0x3a
    a16e:	73 af       	std	Z+59, r23	; 0x3b
    a170:	84 af       	std	Z+60, r24	; 0x3c
    a172:	95 af       	std	Z+61, r25	; 0x3d
					//---------------------------------------------------------------
					startAnalogConversion(7, 0);
    a174:	60 e0       	ldi	r22, 0x00	; 0
    a176:	87 e0       	ldi	r24, 0x07	; 7
    a178:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    a17c:	01 c0       	rjmp	.+2      	; 0xa180 <ReadSensors+0x59c>
    a17e:	00 00       	nop
    a180:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    a184:	81 11       	cpse	r24, r1
    a186:	fb cf       	rjmp	.-10     	; 0xa17e <ReadSensors+0x59a>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    a188:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Suc_Comp = ConvertToTemp( temp );
    a18c:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <ConvertToTemp>
    a190:	f7 01       	movw	r30, r14
    a192:	fe 96       	adiw	r30, 0x3e	; 62
    a194:	60 83       	st	Z, r22
    a196:	71 83       	std	Z+1, r23	; 0x01
    a198:	82 83       	std	Z+2, r24	; 0x02
    a19a:	93 83       	std	Z+3, r25	; 0x03
					//---------------------------------------------------------------
					startAnalogConversion(8, 0);
    a19c:	60 e0       	ldi	r22, 0x00	; 0
    a19e:	88 e0       	ldi	r24, 0x08	; 8
    a1a0:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    a1a4:	01 c0       	rjmp	.+2      	; 0xa1a8 <ReadSensors+0x5c4>
    a1a6:	00 00       	nop
    a1a8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    a1ac:	81 11       	cpse	r24, r1
    a1ae:	fb cf       	rjmp	.-10     	; 0xa1a6 <ReadSensors+0x5c2>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    a1b0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Cond_Temp = ConvertToTemp( temp )	;
    a1b4:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <ConvertToTemp>
    a1b8:	f7 01       	movw	r30, r14
    a1ba:	ee 5b       	subi	r30, 0xBE	; 190
    a1bc:	ff 4f       	sbci	r31, 0xFF	; 255
    a1be:	60 83       	st	Z, r22
    a1c0:	71 83       	std	Z+1, r23	; 0x01
    a1c2:	82 83       	std	Z+2, r24	; 0x02
    a1c4:	93 83       	std	Z+3, r25	; 0x03
					//--------------------------------------------------------------
					comp->SuperHeat=ReadSuperHeat (comp);
    a1c6:	c7 01       	movw	r24, r14
    a1c8:	0e 94 1f 40 	call	0x803e	; 0x803e <ReadSuperHeat>
    a1cc:	f7 01       	movw	r30, r14
    a1ce:	ea 5b       	subi	r30, 0xBA	; 186
    a1d0:	ff 4f       	sbci	r31, 0xFF	; 255
    a1d2:	60 83       	st	Z, r22
    a1d4:	71 83       	std	Z+1, r23	; 0x01
    a1d6:	82 83       	std	Z+2, r24	; 0x02
    a1d8:	93 83       	std	Z+3, r25	; 0x03
					comp->SuperCool=ReadSuperCool (comp);
    a1da:	c7 01       	movw	r24, r14
    a1dc:	0e 94 89 40 	call	0x8112	; 0x8112 <ReadSuperCool>
    a1e0:	f7 01       	movw	r30, r14
    a1e2:	e6 5b       	subi	r30, 0xB6	; 182
    a1e4:	ff 4f       	sbci	r31, 0xFF	; 255
    a1e6:	60 83       	st	Z, r22
    a1e8:	71 83       	std	Z+1, r23	; 0x01
    a1ea:	82 83       	std	Z+2, r24	; 0x02
					if(comp->checkTrv)comp->trvCorection=corectTrv(comp);
    a1ec:	93 83       	std	Z+3, r25	; 0x03
    a1ee:	f7 01       	movw	r30, r14
    a1f0:	81 81       	ldd	r24, Z+1	; 0x01
    a1f2:	88 23       	and	r24, r24
    a1f4:	49 f0       	breq	.+18     	; 0xa208 <ReadSensors+0x624>
    a1f6:	c7 01       	movw	r24, r14
    a1f8:	0e 94 f2 40 	call	0x81e4	; 0x81e4 <corectTrv>
    a1fc:	e7 01       	movw	r28, r14
    a1fe:	ca 59       	subi	r28, 0x9A	; 154
    a200:	df 4f       	sbci	r29, 0xFF	; 255
    a202:	7a d4       	rcall	.+2292   	; 0xaaf8 <__fixsfsi>
    a204:	79 83       	std	Y+1, r23	; 0x01
    a206:	68 83       	st	Y, r22
					//EEpromData.Volt_B= ADE7758_bvrms();
					//EEpromData.Volt_C= ADE7758_cvrms();
					}

return;	
}
    a208:	df 91       	pop	r29
    a20a:	cf 91       	pop	r28
    a20c:	1f 91       	pop	r17
    a20e:	0f 91       	pop	r16
    a210:	ff 90       	pop	r15
    a212:	ef 90       	pop	r14
    a214:	08 95       	ret

0000a216 <ComutateTrv>:
	}
	if(comp->Index==2)
	{
		xTimerDelete(xComutateTrv_2,0);
	}
}
    a216:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    a21a:	fc 01       	movw	r30, r24
    a21c:	20 81       	ld	r18, Z
    a21e:	2a 31       	cpi	r18, 0x1A	; 26
    a220:	09 f0       	breq	.+2      	; 0xa224 <ComutateTrv+0xe>
    a222:	74 c0       	rjmp	.+232    	; 0xa30c <ComutateTrv+0xf6>
    a224:	22 b1       	in	r18, 0x02	; 2
    a226:	20 7f       	andi	r18, 0xF0	; 240
    a228:	22 b9       	out	0x02, r18	; 2
    a22a:	20 91 ca 09 	lds	r18, 0x09CA	; 0x8009ca <Comp_1+0x68>
    a22e:	30 91 cb 09 	lds	r19, 0x09CB	; 0x8009cb <Comp_1+0x69>
    a232:	12 16       	cp	r1, r18
    a234:	13 06       	cpc	r1, r19
    a236:	54 f5       	brge	.+84     	; 0xa28c <ComutateTrv+0x76>
    a238:	e0 91 50 07 	lds	r30, 0x0750	; 0x800750 <step_index.2937>
    a23c:	21 e0       	ldi	r18, 0x01	; 1
    a23e:	2e 0f       	add	r18, r30
    a240:	20 93 50 07 	sts	0x0750, r18	; 0x800750 <step_index.2937>
    a244:	32 b1       	in	r19, 0x02	; 2
    a246:	f0 e0       	ldi	r31, 0x00	; 0
    a248:	ee 5e       	subi	r30, 0xEE	; 238
    a24a:	fd 4f       	sbci	r31, 0xFD	; 253
    a24c:	20 81       	ld	r18, Z
    a24e:	23 2b       	or	r18, r19
    a250:	22 b9       	out	0x02, r18	; 2
    a252:	ea ec       	ldi	r30, 0xCA	; 202
    a254:	f9 e0       	ldi	r31, 0x09	; 9
    a256:	20 81       	ld	r18, Z
    a258:	31 81       	ldd	r19, Z+1	; 0x01
    a25a:	21 50       	subi	r18, 0x01	; 1
    a25c:	31 09       	sbc	r19, r1
    a25e:	31 83       	std	Z+1, r19	; 0x01
    a260:	20 83       	st	Z, r18
    a262:	20 91 cc 09 	lds	r18, 0x09CC	; 0x8009cc <Comp_1+0x6a>
    a266:	30 91 cd 09 	lds	r19, 0x09CD	; 0x8009cd <Comp_1+0x6b>
    a26a:	2f 5f       	subi	r18, 0xFF	; 255
    a26c:	3f 4f       	sbci	r19, 0xFF	; 255
    a26e:	21 3f       	cpi	r18, 0xF1	; 241
    a270:	31 05       	cpc	r19, r1
    a272:	2c f4       	brge	.+10     	; 0xa27e <ComutateTrv+0x68>
    a274:	30 93 cd 09 	sts	0x09CD, r19	; 0x8009cd <Comp_1+0x6b>
    a278:	20 93 cc 09 	sts	0x09CC, r18	; 0x8009cc <Comp_1+0x6a>
    a27c:	41 c0       	rjmp	.+130    	; 0xa300 <ComutateTrv+0xea>
    a27e:	20 ef       	ldi	r18, 0xF0	; 240
    a280:	30 e0       	ldi	r19, 0x00	; 0
    a282:	30 93 cd 09 	sts	0x09CD, r19	; 0x8009cd <Comp_1+0x6b>
    a286:	20 93 cc 09 	sts	0x09CC, r18	; 0x8009cc <Comp_1+0x6a>
    a28a:	3a c0       	rjmp	.+116    	; 0xa300 <ComutateTrv+0xea>
    a28c:	33 23       	and	r19, r19
    a28e:	24 f5       	brge	.+72     	; 0xa2d8 <ComutateTrv+0xc2>
    a290:	e0 91 50 07 	lds	r30, 0x0750	; 0x800750 <step_index.2937>
    a294:	21 e0       	ldi	r18, 0x01	; 1
    a296:	2e 0f       	add	r18, r30
    a298:	20 93 50 07 	sts	0x0750, r18	; 0x800750 <step_index.2937>
    a29c:	f0 e0       	ldi	r31, 0x00	; 0
    a29e:	e2 5f       	subi	r30, 0xF2	; 242
    a2a0:	fd 4f       	sbci	r31, 0xFD	; 253
    a2a2:	20 81       	ld	r18, Z
    a2a4:	22 b9       	out	0x02, r18	; 2
    a2a6:	ea ec       	ldi	r30, 0xCA	; 202
    a2a8:	f9 e0       	ldi	r31, 0x09	; 9
    a2aa:	20 81       	ld	r18, Z
    a2ac:	31 81       	ldd	r19, Z+1	; 0x01
    a2ae:	2f 5f       	subi	r18, 0xFF	; 255
    a2b0:	3f 4f       	sbci	r19, 0xFF	; 255
    a2b2:	31 83       	std	Z+1, r19	; 0x01
    a2b4:	20 83       	st	Z, r18
    a2b6:	20 91 cc 09 	lds	r18, 0x09CC	; 0x8009cc <Comp_1+0x6a>
    a2ba:	30 91 cd 09 	lds	r19, 0x09CD	; 0x8009cd <Comp_1+0x6b>
    a2be:	21 50       	subi	r18, 0x01	; 1
    a2c0:	31 09       	sbc	r19, r1
    a2c2:	2a f0       	brmi	.+10     	; 0xa2ce <ComutateTrv+0xb8>
    a2c4:	30 93 cd 09 	sts	0x09CD, r19	; 0x8009cd <Comp_1+0x6b>
    a2c8:	20 93 cc 09 	sts	0x09CC, r18	; 0x8009cc <Comp_1+0x6a>
    a2cc:	19 c0       	rjmp	.+50     	; 0xa300 <ComutateTrv+0xea>
    a2ce:	10 92 cd 09 	sts	0x09CD, r1	; 0x8009cd <Comp_1+0x6b>
    a2d2:	10 92 cc 09 	sts	0x09CC, r1	; 0x8009cc <Comp_1+0x6a>
    a2d6:	14 c0       	rjmp	.+40     	; 0xa300 <ComutateTrv+0xea>
    a2d8:	23 2b       	or	r18, r19
    a2da:	69 f4       	brne	.+26     	; 0xa2f6 <ComutateTrv+0xe0>
    a2dc:	20 91 69 09 	lds	r18, 0x0969	; 0x800969 <Comp_1+0x7>
    a2e0:	22 23       	and	r18, r18
    a2e2:	49 f0       	breq	.+18     	; 0xa2f6 <ComutateTrv+0xe0>
    a2e4:	20 ef       	ldi	r18, 0xF0	; 240
    a2e6:	30 e0       	ldi	r19, 0x00	; 0
    a2e8:	30 93 cb 09 	sts	0x09CB, r19	; 0x8009cb <Comp_1+0x69>
    a2ec:	20 93 ca 09 	sts	0x09CA, r18	; 0x8009ca <Comp_1+0x68>
    a2f0:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <Comp_1+0x7>
    a2f4:	05 c0       	rjmp	.+10     	; 0xa300 <ComutateTrv+0xea>
    a2f6:	22 b1       	in	r18, 0x02	; 2
    a2f8:	20 7f       	andi	r18, 0xF0	; 240
    a2fa:	22 b9       	out	0x02, r18	; 2
    a2fc:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <Comp_1+0x7>
    a300:	20 91 50 07 	lds	r18, 0x0750	; 0x800750 <step_index.2937>
    a304:	24 30       	cpi	r18, 0x04	; 4
    a306:	10 f0       	brcs	.+4      	; 0xa30c <ComutateTrv+0xf6>
    a308:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <step_index.2937>
    a30c:	fc 01       	movw	r30, r24
    a30e:	80 81       	ld	r24, Z
    a310:	8b 31       	cpi	r24, 0x1B	; 27
    a312:	09 f0       	breq	.+2      	; 0xa316 <ComutateTrv+0x100>
    a314:	70 c0       	rjmp	.+224    	; 0xa3f6 <ComutateTrv+0x1e0>
    a316:	82 b1       	in	r24, 0x02	; 2
    a318:	8f 70       	andi	r24, 0x0F	; 15
    a31a:	82 b9       	out	0x02, r24	; 2
    a31c:	80 91 50 0a 	lds	r24, 0x0A50	; 0x800a50 <Comp_2+0x68>
    a320:	90 91 51 0a 	lds	r25, 0x0A51	; 0x800a51 <Comp_2+0x69>
    a324:	18 16       	cp	r1, r24
    a326:	19 06       	cpc	r1, r25
    a328:	44 f5       	brge	.+80     	; 0xa37a <ComutateTrv+0x164>
    a32a:	e0 91 4f 07 	lds	r30, 0x074F	; 0x80074f <step_index.2938>
    a32e:	81 e0       	ldi	r24, 0x01	; 1
    a330:	8e 0f       	add	r24, r30
    a332:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <step_index.2938>
    a336:	92 b1       	in	r25, 0x02	; 2
    a338:	f0 e0       	ldi	r31, 0x00	; 0
    a33a:	e6 5f       	subi	r30, 0xF6	; 246
    a33c:	fd 4f       	sbci	r31, 0xFD	; 253
    a33e:	80 81       	ld	r24, Z
    a340:	89 2b       	or	r24, r25
    a342:	82 b9       	out	0x02, r24	; 2
    a344:	e0 e5       	ldi	r30, 0x50	; 80
    a346:	fa e0       	ldi	r31, 0x0A	; 10
    a348:	80 81       	ld	r24, Z
    a34a:	91 81       	ldd	r25, Z+1	; 0x01
    a34c:	01 97       	sbiw	r24, 0x01	; 1
    a34e:	91 83       	std	Z+1, r25	; 0x01
    a350:	80 83       	st	Z, r24
    a352:	80 91 52 0a 	lds	r24, 0x0A52	; 0x800a52 <Comp_2+0x6a>
    a356:	90 91 53 0a 	lds	r25, 0x0A53	; 0x800a53 <Comp_2+0x6b>
    a35a:	01 96       	adiw	r24, 0x01	; 1
    a35c:	81 3f       	cpi	r24, 0xF1	; 241
    a35e:	91 05       	cpc	r25, r1
    a360:	2c f4       	brge	.+10     	; 0xa36c <ComutateTrv+0x156>
    a362:	90 93 53 0a 	sts	0x0A53, r25	; 0x800a53 <Comp_2+0x6b>
    a366:	80 93 52 0a 	sts	0x0A52, r24	; 0x800a52 <Comp_2+0x6a>
    a36a:	3f c0       	rjmp	.+126    	; 0xa3ea <ComutateTrv+0x1d4>
    a36c:	80 ef       	ldi	r24, 0xF0	; 240
    a36e:	90 e0       	ldi	r25, 0x00	; 0
    a370:	90 93 53 0a 	sts	0x0A53, r25	; 0x800a53 <Comp_2+0x6b>
    a374:	80 93 52 0a 	sts	0x0A52, r24	; 0x800a52 <Comp_2+0x6a>
    a378:	38 c0       	rjmp	.+112    	; 0xa3ea <ComutateTrv+0x1d4>
    a37a:	99 23       	and	r25, r25
    a37c:	14 f5       	brge	.+68     	; 0xa3c2 <ComutateTrv+0x1ac>
    a37e:	e0 91 4f 07 	lds	r30, 0x074F	; 0x80074f <step_index.2938>
    a382:	81 e0       	ldi	r24, 0x01	; 1
    a384:	8e 0f       	add	r24, r30
    a386:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <step_index.2938>
    a38a:	f0 e0       	ldi	r31, 0x00	; 0
    a38c:	ea 5f       	subi	r30, 0xFA	; 250
    a38e:	fd 4f       	sbci	r31, 0xFD	; 253
    a390:	80 81       	ld	r24, Z
    a392:	82 b9       	out	0x02, r24	; 2
    a394:	e0 e5       	ldi	r30, 0x50	; 80
    a396:	fa e0       	ldi	r31, 0x0A	; 10
    a398:	80 81       	ld	r24, Z
    a39a:	91 81       	ldd	r25, Z+1	; 0x01
    a39c:	01 96       	adiw	r24, 0x01	; 1
    a39e:	91 83       	std	Z+1, r25	; 0x01
    a3a0:	80 83       	st	Z, r24
    a3a2:	80 91 52 0a 	lds	r24, 0x0A52	; 0x800a52 <Comp_2+0x6a>
    a3a6:	90 91 53 0a 	lds	r25, 0x0A53	; 0x800a53 <Comp_2+0x6b>
    a3aa:	01 97       	sbiw	r24, 0x01	; 1
    a3ac:	2a f0       	brmi	.+10     	; 0xa3b8 <ComutateTrv+0x1a2>
    a3ae:	90 93 53 0a 	sts	0x0A53, r25	; 0x800a53 <Comp_2+0x6b>
    a3b2:	80 93 52 0a 	sts	0x0A52, r24	; 0x800a52 <Comp_2+0x6a>
    a3b6:	19 c0       	rjmp	.+50     	; 0xa3ea <ComutateTrv+0x1d4>
    a3b8:	10 92 53 0a 	sts	0x0A53, r1	; 0x800a53 <Comp_2+0x6b>
    a3bc:	10 92 52 0a 	sts	0x0A52, r1	; 0x800a52 <Comp_2+0x6a>
    a3c0:	14 c0       	rjmp	.+40     	; 0xa3ea <ComutateTrv+0x1d4>
    a3c2:	89 2b       	or	r24, r25
    a3c4:	69 f4       	brne	.+26     	; 0xa3e0 <ComutateTrv+0x1ca>
    a3c6:	80 91 ef 09 	lds	r24, 0x09EF	; 0x8009ef <Comp_2+0x7>
    a3ca:	88 23       	and	r24, r24
    a3cc:	49 f0       	breq	.+18     	; 0xa3e0 <ComutateTrv+0x1ca>
    a3ce:	80 ef       	ldi	r24, 0xF0	; 240
    a3d0:	90 e0       	ldi	r25, 0x00	; 0
    a3d2:	90 93 51 0a 	sts	0x0A51, r25	; 0x800a51 <Comp_2+0x69>
    a3d6:	80 93 50 0a 	sts	0x0A50, r24	; 0x800a50 <Comp_2+0x68>
    a3da:	10 92 ef 09 	sts	0x09EF, r1	; 0x8009ef <Comp_2+0x7>
    a3de:	05 c0       	rjmp	.+10     	; 0xa3ea <ComutateTrv+0x1d4>
    a3e0:	82 b1       	in	r24, 0x02	; 2
    a3e2:	8f 70       	andi	r24, 0x0F	; 15
    a3e4:	82 b9       	out	0x02, r24	; 2
    a3e6:	10 92 ef 09 	sts	0x09EF, r1	; 0x8009ef <Comp_2+0x7>
    a3ea:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <step_index.2938>
    a3ee:	84 30       	cpi	r24, 0x04	; 4
    a3f0:	10 f0       	brcs	.+4      	; 0xa3f6 <ComutateTrv+0x1e0>
    a3f2:	10 92 4f 07 	sts	0x074F, r1	; 0x80074f <step_index.2938>
    a3f6:	08 95       	ret

0000a3f8 <activateTrvTimer>:
    a3f8:	ef 92       	push	r14
    a3fa:	ff 92       	push	r15
    a3fc:	0f 93       	push	r16
    a3fe:	1f 93       	push	r17
    a400:	82 59       	subi	r24, 0x92	; 146
    a402:	9f 4f       	sbci	r25, 0xFF	; 255
    a404:	fc 01       	movw	r30, r24
    a406:	80 81       	ld	r24, Z
    a408:	91 81       	ldd	r25, Z+1	; 0x01
    a40a:	81 30       	cpi	r24, 0x01	; 1
    a40c:	91 05       	cpc	r25, r1
    a40e:	b1 f4       	brne	.+44     	; 0xa43c <activateTrvTimer+0x44>
    a410:	0f 2e       	mov	r0, r31
    a412:	fb e0       	ldi	r31, 0x0B	; 11
    a414:	ef 2e       	mov	r14, r31
    a416:	f1 e5       	ldi	r31, 0x51	; 81
    a418:	ff 2e       	mov	r15, r31
    a41a:	f0 2d       	mov	r31, r0
    a41c:	09 e6       	ldi	r16, 0x69	; 105
    a41e:	16 e0       	ldi	r17, 0x06	; 6
    a420:	21 e0       	ldi	r18, 0x01	; 1
    a422:	42 e3       	ldi	r20, 0x32	; 50
    a424:	50 e0       	ldi	r21, 0x00	; 0
    a426:	60 e0       	ldi	r22, 0x00	; 0
    a428:	70 e0       	ldi	r23, 0x00	; 0
    a42a:	88 e2       	ldi	r24, 0x28	; 40
    a42c:	96 e0       	ldi	r25, 0x06	; 6
    a42e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    a432:	90 93 e8 08 	sts	0x08E8, r25	; 0x8008e8 <xComutateTrv_1+0x1>
    a436:	80 93 e7 08 	sts	0x08E7, r24	; 0x8008e7 <xComutateTrv_1>
    a43a:	17 c0       	rjmp	.+46     	; 0xa46a <activateTrvTimer+0x72>
    a43c:	02 97       	sbiw	r24, 0x02	; 2
    a43e:	a9 f4       	brne	.+42     	; 0xa46a <activateTrvTimer+0x72>
    a440:	0f 2e       	mov	r0, r31
    a442:	fb e0       	ldi	r31, 0x0B	; 11
    a444:	ef 2e       	mov	r14, r31
    a446:	f1 e5       	ldi	r31, 0x51	; 81
    a448:	ff 2e       	mov	r15, r31
    a44a:	f0 2d       	mov	r31, r0
    a44c:	08 e6       	ldi	r16, 0x68	; 104
    a44e:	16 e0       	ldi	r17, 0x06	; 6
    a450:	21 e0       	ldi	r18, 0x01	; 1
    a452:	42 e3       	ldi	r20, 0x32	; 50
    a454:	50 e0       	ldi	r21, 0x00	; 0
    a456:	60 e0       	ldi	r22, 0x00	; 0
    a458:	70 e0       	ldi	r23, 0x00	; 0
    a45a:	81 e3       	ldi	r24, 0x31	; 49
    a45c:	96 e0       	ldi	r25, 0x06	; 6
    a45e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    a462:	90 93 df 09 	sts	0x09DF, r25	; 0x8009df <xComutateTrv_2+0x1>
    a466:	80 93 de 09 	sts	0x09DE, r24	; 0x8009de <xComutateTrv_2>
    a46a:	1f 91       	pop	r17
    a46c:	0f 91       	pop	r16
    a46e:	ff 90       	pop	r15
    a470:	ef 90       	pop	r14
    a472:	08 95       	ret

0000a474 <startTrvTimer>:
    a474:	cf 92       	push	r12
    a476:	df 92       	push	r13
    a478:	ef 92       	push	r14
    a47a:	ff 92       	push	r15
    a47c:	0f 93       	push	r16
    a47e:	1f 93       	push	r17
    a480:	82 59       	subi	r24, 0x92	; 146
    a482:	9f 4f       	sbci	r25, 0xFF	; 255
    a484:	fc 01       	movw	r30, r24
    a486:	80 81       	ld	r24, Z
    a488:	91 81       	ldd	r25, Z+1	; 0x01
    a48a:	81 30       	cpi	r24, 0x01	; 1
    a48c:	91 05       	cpc	r25, r1
    a48e:	89 f4       	brne	.+34     	; 0xa4b2 <startTrvTimer+0x3e>
    a490:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    a494:	9b 01       	movw	r18, r22
    a496:	ac 01       	movw	r20, r24
    a498:	c1 2c       	mov	r12, r1
    a49a:	d1 2c       	mov	r13, r1
    a49c:	76 01       	movw	r14, r12
    a49e:	00 e0       	ldi	r16, 0x00	; 0
    a4a0:	10 e0       	ldi	r17, 0x00	; 0
    a4a2:	61 e0       	ldi	r22, 0x01	; 1
    a4a4:	80 91 e7 08 	lds	r24, 0x08E7	; 0x8008e7 <xComutateTrv_1>
    a4a8:	90 91 e8 08 	lds	r25, 0x08E8	; 0x8008e8 <xComutateTrv_1+0x1>
    a4ac:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    a4b0:	12 c0       	rjmp	.+36     	; 0xa4d6 <startTrvTimer+0x62>
    a4b2:	02 97       	sbiw	r24, 0x02	; 2
    a4b4:	81 f4       	brne	.+32     	; 0xa4d6 <startTrvTimer+0x62>
    a4b6:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    a4ba:	9b 01       	movw	r18, r22
    a4bc:	ac 01       	movw	r20, r24
    a4be:	c1 2c       	mov	r12, r1
    a4c0:	d1 2c       	mov	r13, r1
    a4c2:	76 01       	movw	r14, r12
    a4c4:	00 e0       	ldi	r16, 0x00	; 0
    a4c6:	10 e0       	ldi	r17, 0x00	; 0
    a4c8:	61 e0       	ldi	r22, 0x01	; 1
    a4ca:	80 91 de 09 	lds	r24, 0x09DE	; 0x8009de <xComutateTrv_2>
    a4ce:	90 91 df 09 	lds	r25, 0x09DF	; 0x8009df <xComutateTrv_2+0x1>
    a4d2:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    a4d6:	1f 91       	pop	r17
    a4d8:	0f 91       	pop	r16
    a4da:	ff 90       	pop	r15
    a4dc:	ef 90       	pop	r14
    a4de:	df 90       	pop	r13
    a4e0:	cf 90       	pop	r12
    a4e2:	08 95       	ret

0000a4e4 <stopTrvTimer>:
void stopTrvTimer(xCompressor *comp)
{
    a4e4:	cf 92       	push	r12
    a4e6:	df 92       	push	r13
    a4e8:	ef 92       	push	r14
    a4ea:	ff 92       	push	r15
    a4ec:	0f 93       	push	r16
    a4ee:	1f 93       	push	r17
    a4f0:	cf 93       	push	r28
    a4f2:	df 93       	push	r29
    a4f4:	ec 01       	movw	r28, r24
	if(comp->Index==1)
    a4f6:	fc 01       	movw	r30, r24
    a4f8:	e2 59       	subi	r30, 0x92	; 146
    a4fa:	ff 4f       	sbci	r31, 0xFF	; 255
    a4fc:	80 81       	ld	r24, Z
    a4fe:	91 81       	ldd	r25, Z+1	; 0x01
    a500:	01 97       	sbiw	r24, 0x01	; 1
    a502:	c1 f4       	brne	.+48     	; 0xa534 <stopTrvTimer+0x50>
	{
		if( xTimerIsTimerActive( xComutateTrv_1 ) != pdFALSE )	xTimerStop(xComutateTrv_1, 1);
    a504:	80 91 e7 08 	lds	r24, 0x08E7	; 0x8008e7 <xComutateTrv_1>
    a508:	90 91 e8 08 	lds	r25, 0x08E8	; 0x8008e8 <xComutateTrv_1+0x1>
    a50c:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    a510:	88 23       	and	r24, r24
    a512:	81 f0       	breq	.+32     	; 0xa534 <stopTrvTimer+0x50>
    a514:	c1 2c       	mov	r12, r1
    a516:	d1 2c       	mov	r13, r1
    a518:	76 01       	movw	r14, r12
    a51a:	c3 94       	inc	r12
    a51c:	00 e0       	ldi	r16, 0x00	; 0
    a51e:	10 e0       	ldi	r17, 0x00	; 0
    a520:	20 e0       	ldi	r18, 0x00	; 0
    a522:	30 e0       	ldi	r19, 0x00	; 0
    a524:	a9 01       	movw	r20, r18
    a526:	63 e0       	ldi	r22, 0x03	; 3
    a528:	80 91 e7 08 	lds	r24, 0x08E7	; 0x8008e7 <xComutateTrv_1>
    a52c:	90 91 e8 08 	lds	r25, 0x08E8	; 0x8008e8 <xComutateTrv_1+0x1>
    a530:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if(comp->Index==2)
    a534:	c2 59       	subi	r28, 0x92	; 146
    a536:	df 4f       	sbci	r29, 0xFF	; 255
    a538:	88 81       	ld	r24, Y
    a53a:	99 81       	ldd	r25, Y+1	; 0x01
    a53c:	02 97       	sbiw	r24, 0x02	; 2
    a53e:	c1 f4       	brne	.+48     	; 0xa570 <stopTrvTimer+0x8c>
	{
		if( xTimerIsTimerActive( xComutateTrv_2 ) != pdFALSE )	xTimerStop(xComutateTrv_2, 1);
    a540:	80 91 de 09 	lds	r24, 0x09DE	; 0x8009de <xComutateTrv_2>
    a544:	90 91 df 09 	lds	r25, 0x09DF	; 0x8009df <xComutateTrv_2+0x1>
    a548:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    a54c:	88 23       	and	r24, r24
    a54e:	81 f0       	breq	.+32     	; 0xa570 <stopTrvTimer+0x8c>
    a550:	c1 2c       	mov	r12, r1
    a552:	d1 2c       	mov	r13, r1
    a554:	76 01       	movw	r14, r12
    a556:	c3 94       	inc	r12
    a558:	00 e0       	ldi	r16, 0x00	; 0
    a55a:	10 e0       	ldi	r17, 0x00	; 0
    a55c:	20 e0       	ldi	r18, 0x00	; 0
    a55e:	30 e0       	ldi	r19, 0x00	; 0
    a560:	a9 01       	movw	r20, r18
    a562:	63 e0       	ldi	r22, 0x03	; 3
    a564:	80 91 de 09 	lds	r24, 0x09DE	; 0x8009de <xComutateTrv_2>
    a568:	90 91 df 09 	lds	r25, 0x09DF	; 0x8009df <xComutateTrv_2+0x1>
    a56c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
}
    a570:	df 91       	pop	r29
    a572:	cf 91       	pop	r28
    a574:	1f 91       	pop	r17
    a576:	0f 91       	pop	r16
    a578:	ff 90       	pop	r15
    a57a:	ef 90       	pop	r14
    a57c:	df 90       	pop	r13
    a57e:	cf 90       	pop	r12
    a580:	08 95       	ret

0000a582 <Fuzzy>:
		
	}
}
//----------------------------------------------------------------------------------------------------------
int Fuzzy(xCompressor *comp,int corection)
{
    a582:	8f 92       	push	r8
    a584:	9f 92       	push	r9
    a586:	af 92       	push	r10
    a588:	bf 92       	push	r11
    a58a:	cf 92       	push	r12
    a58c:	df 92       	push	r13
    a58e:	ef 92       	push	r14
    a590:	ff 92       	push	r15
    a592:	0f 93       	push	r16
    a594:	1f 93       	push	r17
    a596:	cf 93       	push	r28
    a598:	df 93       	push	r29
    a59a:	ec 01       	movw	r28, r24
    a59c:	8b 01       	movw	r16, r22
	int steps=0;
	//static int old_corection=0;
	//static int old_corection_1=0;
	if(comp->Index==2)xSerialxPrintf(&xSerial3Port,"corection_2 = %d \r\n", corection);
    a59e:	fc 01       	movw	r30, r24
    a5a0:	e2 59       	subi	r30, 0x92	; 146
    a5a2:	ff 4f       	sbci	r31, 0xFF	; 255
    a5a4:	80 81       	ld	r24, Z
    a5a6:	91 81       	ldd	r25, Z+1	; 0x01
    a5a8:	02 97       	sbiw	r24, 0x02	; 2
    a5aa:	91 f4       	brne	.+36     	; 0xa5d0 <Fuzzy+0x4e>
    a5ac:	1f 93       	push	r17
    a5ae:	6f 93       	push	r22
    a5b0:	8d e3       	ldi	r24, 0x3D	; 61
    a5b2:	96 e0       	ldi	r25, 0x06	; 6
    a5b4:	9f 93       	push	r25
    a5b6:	8f 93       	push	r24
    a5b8:	80 ea       	ldi	r24, 0xA0	; 160
    a5ba:	97 e0       	ldi	r25, 0x07	; 7
    a5bc:	9f 93       	push	r25
    a5be:	8f 93       	push	r24
    a5c0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a5c4:	0f 90       	pop	r0
    a5c6:	0f 90       	pop	r0
    a5c8:	0f 90       	pop	r0
    a5ca:	0f 90       	pop	r0
    a5cc:	0f 90       	pop	r0
    a5ce:	0f 90       	pop	r0
	if(comp->Src_In<=10 && comp->Heating==1 ){steps=(comp->Src_In)/10 * 100 ;}
    a5d0:	ca a8       	ldd	r12, Y+50	; 0x32
    a5d2:	db a8       	ldd	r13, Y+51	; 0x33
    a5d4:	ec a8       	ldd	r14, Y+52	; 0x34
    a5d6:	fd a8       	ldd	r15, Y+53	; 0x35
    a5d8:	20 e0       	ldi	r18, 0x00	; 0
    a5da:	30 e0       	ldi	r19, 0x00	; 0
    a5dc:	40 e2       	ldi	r20, 0x20	; 32
    a5de:	51 e4       	ldi	r21, 0x41	; 65
    a5e0:	c7 01       	movw	r24, r14
    a5e2:	b6 01       	movw	r22, r12
    a5e4:	1d d2       	rcall	.+1082   	; 0xaa20 <__cmpsf2>
    a5e6:	18 16       	cp	r1, r24
    a5e8:	94 f0       	brlt	.+36     	; 0xa60e <Fuzzy+0x8c>
    a5ea:	8a 81       	ldd	r24, Y+2	; 0x02
    a5ec:	88 23       	and	r24, r24
    a5ee:	79 f0       	breq	.+30     	; 0xa60e <Fuzzy+0x8c>
    a5f0:	20 e0       	ldi	r18, 0x00	; 0
    a5f2:	30 e0       	ldi	r19, 0x00	; 0
    a5f4:	40 e2       	ldi	r20, 0x20	; 32
    a5f6:	51 e4       	ldi	r21, 0x41	; 65
    a5f8:	c7 01       	movw	r24, r14
    a5fa:	b6 01       	movw	r22, r12
    a5fc:	15 d2       	rcall	.+1066   	; 0xaa28 <__divsf3>
    a5fe:	20 e0       	ldi	r18, 0x00	; 0
    a600:	30 e0       	ldi	r19, 0x00	; 0
    a602:	48 ec       	ldi	r20, 0xC8	; 200
    a604:	52 e4       	ldi	r21, 0x42	; 66
    a606:	a4 d3       	rcall	.+1864   	; 0xad50 <__mulsf3>
    a608:	77 d2       	rcall	.+1262   	; 0xaaf8 <__fixsfsi>
    a60a:	7b 01       	movw	r14, r22
    a60c:	3b c1       	rjmp	.+630    	; 0xa884 <Fuzzy+0x302>
	else if(comp->Src_Out<=10 && comp->Cooling==1){steps=(comp->Src_Out)/10 * 100 ;}
    a60e:	8e a8       	ldd	r8, Y+54	; 0x36
    a610:	9f a8       	ldd	r9, Y+55	; 0x37
    a612:	a8 ac       	ldd	r10, Y+56	; 0x38
    a614:	b9 ac       	ldd	r11, Y+57	; 0x39
    a616:	20 e0       	ldi	r18, 0x00	; 0
    a618:	30 e0       	ldi	r19, 0x00	; 0
    a61a:	40 e2       	ldi	r20, 0x20	; 32
    a61c:	51 e4       	ldi	r21, 0x41	; 65
    a61e:	c5 01       	movw	r24, r10
    a620:	b4 01       	movw	r22, r8
    a622:	fe d1       	rcall	.+1020   	; 0xaa20 <__cmpsf2>
    a624:	18 16       	cp	r1, r24
    a626:	94 f0       	brlt	.+36     	; 0xa64c <Fuzzy+0xca>
    a628:	8b 81       	ldd	r24, Y+3	; 0x03
    a62a:	88 23       	and	r24, r24
    a62c:	79 f0       	breq	.+30     	; 0xa64c <Fuzzy+0xca>
    a62e:	20 e0       	ldi	r18, 0x00	; 0
    a630:	30 e0       	ldi	r19, 0x00	; 0
    a632:	40 e2       	ldi	r20, 0x20	; 32
    a634:	51 e4       	ldi	r21, 0x41	; 65
    a636:	c5 01       	movw	r24, r10
    a638:	b4 01       	movw	r22, r8
    a63a:	f6 d1       	rcall	.+1004   	; 0xaa28 <__divsf3>
    a63c:	20 e0       	ldi	r18, 0x00	; 0
    a63e:	30 e0       	ldi	r19, 0x00	; 0
    a640:	48 ec       	ldi	r20, 0xC8	; 200
    a642:	52 e4       	ldi	r21, 0x42	; 66
    a644:	85 d3       	rcall	.+1802   	; 0xad50 <__mulsf3>
    a646:	58 d2       	rcall	.+1200   	; 0xaaf8 <__fixsfsi>
    a648:	7b 01       	movw	r14, r22
    a64a:	1c c1       	rjmp	.+568    	; 0xa884 <Fuzzy+0x302>
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps); }//comp->trvCorection;
	else if(comp->Src_In>10 && comp->Src_In<=20 && comp->Heating==1)  {steps = (comp->Src_In-10)/10 * 100 + 100;}
    a64c:	20 e0       	ldi	r18, 0x00	; 0
    a64e:	30 e0       	ldi	r19, 0x00	; 0
    a650:	40 e2       	ldi	r20, 0x20	; 32
    a652:	51 e4       	ldi	r21, 0x41	; 65
    a654:	c7 01       	movw	r24, r14
    a656:	b6 01       	movw	r22, r12
    a658:	32 d3       	rcall	.+1636   	; 0xacbe <__gesf2>
    a65a:	18 16       	cp	r1, r24
    a65c:	2c f5       	brge	.+74     	; 0xa6a8 <Fuzzy+0x126>
    a65e:	20 e0       	ldi	r18, 0x00	; 0
    a660:	30 e0       	ldi	r19, 0x00	; 0
    a662:	40 ea       	ldi	r20, 0xA0	; 160
    a664:	51 e4       	ldi	r21, 0x41	; 65
    a666:	c7 01       	movw	r24, r14
    a668:	b6 01       	movw	r22, r12
    a66a:	da d1       	rcall	.+948    	; 0xaa20 <__cmpsf2>
    a66c:	18 16       	cp	r1, r24
    a66e:	e4 f0       	brlt	.+56     	; 0xa6a8 <Fuzzy+0x126>
    a670:	8a 81       	ldd	r24, Y+2	; 0x02
    a672:	88 23       	and	r24, r24
    a674:	c9 f0       	breq	.+50     	; 0xa6a8 <Fuzzy+0x126>
    a676:	20 e0       	ldi	r18, 0x00	; 0
    a678:	30 e0       	ldi	r19, 0x00	; 0
    a67a:	40 e2       	ldi	r20, 0x20	; 32
    a67c:	51 e4       	ldi	r21, 0x41	; 65
    a67e:	c7 01       	movw	r24, r14
    a680:	b6 01       	movw	r22, r12
    a682:	69 d1       	rcall	.+722    	; 0xa956 <__subsf3>
    a684:	20 e0       	ldi	r18, 0x00	; 0
    a686:	30 e0       	ldi	r19, 0x00	; 0
    a688:	40 e2       	ldi	r20, 0x20	; 32
    a68a:	51 e4       	ldi	r21, 0x41	; 65
    a68c:	cd d1       	rcall	.+922    	; 0xaa28 <__divsf3>
    a68e:	20 e0       	ldi	r18, 0x00	; 0
    a690:	30 e0       	ldi	r19, 0x00	; 0
    a692:	48 ec       	ldi	r20, 0xC8	; 200
    a694:	52 e4       	ldi	r21, 0x42	; 66
    a696:	5c d3       	rcall	.+1720   	; 0xad50 <__mulsf3>
    a698:	20 e0       	ldi	r18, 0x00	; 0
    a69a:	30 e0       	ldi	r19, 0x00	; 0
    a69c:	48 ec       	ldi	r20, 0xC8	; 200
    a69e:	52 e4       	ldi	r21, 0x42	; 66
    a6a0:	5b d1       	rcall	.+694    	; 0xa958 <__addsf3>
    a6a2:	2a d2       	rcall	.+1108   	; 0xaaf8 <__fixsfsi>
    a6a4:	7b 01       	movw	r14, r22
    a6a6:	ee c0       	rjmp	.+476    	; 0xa884 <Fuzzy+0x302>
	else if(comp->Src_Out>10 && comp->Src_Out<=20 && comp->Cooling==1)  {steps = (comp->Src_Out-10)/10 * 100 + 100;}	
    a6a8:	20 e0       	ldi	r18, 0x00	; 0
    a6aa:	30 e0       	ldi	r19, 0x00	; 0
    a6ac:	40 e2       	ldi	r20, 0x20	; 32
    a6ae:	51 e4       	ldi	r21, 0x41	; 65
    a6b0:	c5 01       	movw	r24, r10
    a6b2:	b4 01       	movw	r22, r8
    a6b4:	04 d3       	rcall	.+1544   	; 0xacbe <__gesf2>
    a6b6:	18 16       	cp	r1, r24
    a6b8:	2c f5       	brge	.+74     	; 0xa704 <Fuzzy+0x182>
    a6ba:	20 e0       	ldi	r18, 0x00	; 0
    a6bc:	30 e0       	ldi	r19, 0x00	; 0
    a6be:	40 ea       	ldi	r20, 0xA0	; 160
    a6c0:	51 e4       	ldi	r21, 0x41	; 65
    a6c2:	c5 01       	movw	r24, r10
    a6c4:	b4 01       	movw	r22, r8
    a6c6:	ac d1       	rcall	.+856    	; 0xaa20 <__cmpsf2>
    a6c8:	18 16       	cp	r1, r24
    a6ca:	e4 f0       	brlt	.+56     	; 0xa704 <Fuzzy+0x182>
    a6cc:	8b 81       	ldd	r24, Y+3	; 0x03
    a6ce:	88 23       	and	r24, r24
    a6d0:	c9 f0       	breq	.+50     	; 0xa704 <Fuzzy+0x182>
    a6d2:	20 e0       	ldi	r18, 0x00	; 0
    a6d4:	30 e0       	ldi	r19, 0x00	; 0
    a6d6:	40 e2       	ldi	r20, 0x20	; 32
    a6d8:	51 e4       	ldi	r21, 0x41	; 65
    a6da:	c5 01       	movw	r24, r10
    a6dc:	b4 01       	movw	r22, r8
    a6de:	3b d1       	rcall	.+630    	; 0xa956 <__subsf3>
    a6e0:	20 e0       	ldi	r18, 0x00	; 0
    a6e2:	30 e0       	ldi	r19, 0x00	; 0
    a6e4:	40 e2       	ldi	r20, 0x20	; 32
    a6e6:	51 e4       	ldi	r21, 0x41	; 65
    a6e8:	9f d1       	rcall	.+830    	; 0xaa28 <__divsf3>
    a6ea:	20 e0       	ldi	r18, 0x00	; 0
    a6ec:	30 e0       	ldi	r19, 0x00	; 0
    a6ee:	48 ec       	ldi	r20, 0xC8	; 200
    a6f0:	52 e4       	ldi	r21, 0x42	; 66
    a6f2:	2e d3       	rcall	.+1628   	; 0xad50 <__mulsf3>
    a6f4:	20 e0       	ldi	r18, 0x00	; 0
    a6f6:	30 e0       	ldi	r19, 0x00	; 0
    a6f8:	48 ec       	ldi	r20, 0xC8	; 200
    a6fa:	52 e4       	ldi	r21, 0x42	; 66
    a6fc:	2d d1       	rcall	.+602    	; 0xa958 <__addsf3>
    a6fe:	fc d1       	rcall	.+1016   	; 0xaaf8 <__fixsfsi>
    a700:	7b 01       	movw	r14, r22
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps); }//;
	else if(comp->Src_In >20 && comp->Src_In<=30 && comp->Heating==1) {steps = (comp->Src_In-20)/10 * 100 + 150;}
    a702:	c0 c0       	rjmp	.+384    	; 0xa884 <Fuzzy+0x302>
    a704:	20 e0       	ldi	r18, 0x00	; 0
    a706:	30 e0       	ldi	r19, 0x00	; 0
    a708:	40 ea       	ldi	r20, 0xA0	; 160
    a70a:	51 e4       	ldi	r21, 0x41	; 65
    a70c:	c7 01       	movw	r24, r14
    a70e:	b6 01       	movw	r22, r12
    a710:	d6 d2       	rcall	.+1452   	; 0xacbe <__gesf2>
    a712:	18 16       	cp	r1, r24
    a714:	2c f5       	brge	.+74     	; 0xa760 <Fuzzy+0x1de>
    a716:	20 e0       	ldi	r18, 0x00	; 0
    a718:	30 e0       	ldi	r19, 0x00	; 0
    a71a:	40 ef       	ldi	r20, 0xF0	; 240
    a71c:	51 e4       	ldi	r21, 0x41	; 65
    a71e:	c7 01       	movw	r24, r14
    a720:	b6 01       	movw	r22, r12
    a722:	7e d1       	rcall	.+764    	; 0xaa20 <__cmpsf2>
    a724:	18 16       	cp	r1, r24
    a726:	e4 f0       	brlt	.+56     	; 0xa760 <Fuzzy+0x1de>
    a728:	8a 81       	ldd	r24, Y+2	; 0x02
    a72a:	88 23       	and	r24, r24
    a72c:	c9 f0       	breq	.+50     	; 0xa760 <Fuzzy+0x1de>
    a72e:	20 e0       	ldi	r18, 0x00	; 0
    a730:	30 e0       	ldi	r19, 0x00	; 0
    a732:	40 ea       	ldi	r20, 0xA0	; 160
    a734:	51 e4       	ldi	r21, 0x41	; 65
    a736:	c7 01       	movw	r24, r14
    a738:	b6 01       	movw	r22, r12
    a73a:	0d d1       	rcall	.+538    	; 0xa956 <__subsf3>
    a73c:	20 e0       	ldi	r18, 0x00	; 0
    a73e:	30 e0       	ldi	r19, 0x00	; 0
    a740:	40 e2       	ldi	r20, 0x20	; 32
    a742:	51 e4       	ldi	r21, 0x41	; 65
    a744:	71 d1       	rcall	.+738    	; 0xaa28 <__divsf3>
    a746:	20 e0       	ldi	r18, 0x00	; 0
    a748:	30 e0       	ldi	r19, 0x00	; 0
    a74a:	48 ec       	ldi	r20, 0xC8	; 200
    a74c:	52 e4       	ldi	r21, 0x42	; 66
    a74e:	00 d3       	rcall	.+1536   	; 0xad50 <__mulsf3>
    a750:	20 e0       	ldi	r18, 0x00	; 0
    a752:	30 e0       	ldi	r19, 0x00	; 0
    a754:	46 e1       	ldi	r20, 0x16	; 22
    a756:	53 e4       	ldi	r21, 0x43	; 67
    a758:	ff d0       	rcall	.+510    	; 0xa958 <__addsf3>
    a75a:	ce d1       	rcall	.+924    	; 0xaaf8 <__fixsfsi>
    a75c:	7b 01       	movw	r14, r22
	else if(comp->Src_Out >20 && comp->Src_Out<=30 && comp->Cooling==1) {steps = (comp->Src_Out-20)/10 * 100 + 150;}	
    a75e:	92 c0       	rjmp	.+292    	; 0xa884 <Fuzzy+0x302>
    a760:	20 e0       	ldi	r18, 0x00	; 0
    a762:	30 e0       	ldi	r19, 0x00	; 0
    a764:	40 ea       	ldi	r20, 0xA0	; 160
    a766:	51 e4       	ldi	r21, 0x41	; 65
    a768:	c5 01       	movw	r24, r10
    a76a:	b4 01       	movw	r22, r8
    a76c:	a8 d2       	rcall	.+1360   	; 0xacbe <__gesf2>
    a76e:	18 16       	cp	r1, r24
    a770:	2c f5       	brge	.+74     	; 0xa7bc <Fuzzy+0x23a>
    a772:	20 e0       	ldi	r18, 0x00	; 0
    a774:	30 e0       	ldi	r19, 0x00	; 0
    a776:	40 ef       	ldi	r20, 0xF0	; 240
    a778:	51 e4       	ldi	r21, 0x41	; 65
    a77a:	c5 01       	movw	r24, r10
    a77c:	b4 01       	movw	r22, r8
    a77e:	50 d1       	rcall	.+672    	; 0xaa20 <__cmpsf2>
    a780:	18 16       	cp	r1, r24
    a782:	e4 f0       	brlt	.+56     	; 0xa7bc <Fuzzy+0x23a>
    a784:	8b 81       	ldd	r24, Y+3	; 0x03
    a786:	88 23       	and	r24, r24
    a788:	c9 f0       	breq	.+50     	; 0xa7bc <Fuzzy+0x23a>
    a78a:	20 e0       	ldi	r18, 0x00	; 0
    a78c:	30 e0       	ldi	r19, 0x00	; 0
    a78e:	40 ea       	ldi	r20, 0xA0	; 160
    a790:	51 e4       	ldi	r21, 0x41	; 65
    a792:	c5 01       	movw	r24, r10
    a794:	b4 01       	movw	r22, r8
    a796:	df d0       	rcall	.+446    	; 0xa956 <__subsf3>
    a798:	20 e0       	ldi	r18, 0x00	; 0
    a79a:	30 e0       	ldi	r19, 0x00	; 0
    a79c:	40 e2       	ldi	r20, 0x20	; 32
    a79e:	51 e4       	ldi	r21, 0x41	; 65
    a7a0:	43 d1       	rcall	.+646    	; 0xaa28 <__divsf3>
    a7a2:	20 e0       	ldi	r18, 0x00	; 0
    a7a4:	30 e0       	ldi	r19, 0x00	; 0
    a7a6:	48 ec       	ldi	r20, 0xC8	; 200
    a7a8:	52 e4       	ldi	r21, 0x42	; 66
    a7aa:	d2 d2       	rcall	.+1444   	; 0xad50 <__mulsf3>
    a7ac:	20 e0       	ldi	r18, 0x00	; 0
    a7ae:	30 e0       	ldi	r19, 0x00	; 0
    a7b0:	46 e1       	ldi	r20, 0x16	; 22
    a7b2:	53 e4       	ldi	r21, 0x43	; 67
    a7b4:	d1 d0       	rcall	.+418    	; 0xa958 <__addsf3>
    a7b6:	a0 d1       	rcall	.+832    	; 0xaaf8 <__fixsfsi>
		
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps);}// comp->trvCorection;
	else if(comp->Src_In>30 && comp->Src_In<=40 && comp->Heating==1)  {steps = (comp->Src_In-30)/10 * 100 + 200;}
    a7b8:	7b 01       	movw	r14, r22
    a7ba:	64 c0       	rjmp	.+200    	; 0xa884 <Fuzzy+0x302>
    a7bc:	20 e0       	ldi	r18, 0x00	; 0
    a7be:	30 e0       	ldi	r19, 0x00	; 0
    a7c0:	40 ef       	ldi	r20, 0xF0	; 240
    a7c2:	51 e4       	ldi	r21, 0x41	; 65
    a7c4:	c7 01       	movw	r24, r14
    a7c6:	b6 01       	movw	r22, r12
    a7c8:	7a d2       	rcall	.+1268   	; 0xacbe <__gesf2>
    a7ca:	18 16       	cp	r1, r24
    a7cc:	2c f5       	brge	.+74     	; 0xa818 <Fuzzy+0x296>
    a7ce:	20 e0       	ldi	r18, 0x00	; 0
    a7d0:	30 e0       	ldi	r19, 0x00	; 0
    a7d2:	40 e2       	ldi	r20, 0x20	; 32
    a7d4:	52 e4       	ldi	r21, 0x42	; 66
    a7d6:	c7 01       	movw	r24, r14
    a7d8:	b6 01       	movw	r22, r12
    a7da:	22 d1       	rcall	.+580    	; 0xaa20 <__cmpsf2>
    a7dc:	18 16       	cp	r1, r24
    a7de:	e4 f0       	brlt	.+56     	; 0xa818 <Fuzzy+0x296>
    a7e0:	8a 81       	ldd	r24, Y+2	; 0x02
    a7e2:	88 23       	and	r24, r24
    a7e4:	c9 f0       	breq	.+50     	; 0xa818 <Fuzzy+0x296>
    a7e6:	20 e0       	ldi	r18, 0x00	; 0
    a7e8:	30 e0       	ldi	r19, 0x00	; 0
    a7ea:	40 ef       	ldi	r20, 0xF0	; 240
    a7ec:	51 e4       	ldi	r21, 0x41	; 65
    a7ee:	c7 01       	movw	r24, r14
    a7f0:	b6 01       	movw	r22, r12
    a7f2:	b1 d0       	rcall	.+354    	; 0xa956 <__subsf3>
    a7f4:	20 e0       	ldi	r18, 0x00	; 0
    a7f6:	30 e0       	ldi	r19, 0x00	; 0
    a7f8:	40 e2       	ldi	r20, 0x20	; 32
    a7fa:	51 e4       	ldi	r21, 0x41	; 65
    a7fc:	15 d1       	rcall	.+554    	; 0xaa28 <__divsf3>
    a7fe:	20 e0       	ldi	r18, 0x00	; 0
    a800:	30 e0       	ldi	r19, 0x00	; 0
    a802:	48 ec       	ldi	r20, 0xC8	; 200
    a804:	52 e4       	ldi	r21, 0x42	; 66
    a806:	a4 d2       	rcall	.+1352   	; 0xad50 <__mulsf3>
    a808:	20 e0       	ldi	r18, 0x00	; 0
    a80a:	30 e0       	ldi	r19, 0x00	; 0
    a80c:	48 e4       	ldi	r20, 0x48	; 72
    a80e:	53 e4       	ldi	r21, 0x43	; 67
    a810:	a3 d0       	rcall	.+326    	; 0xa958 <__addsf3>
	else if(comp->Src_Out>30 && comp->Src_Out<=40 && comp->Cooling==1)  {steps = (comp->Src_Out-30)/10 * 100 + 200;}	
    a812:	72 d1       	rcall	.+740    	; 0xaaf8 <__fixsfsi>
    a814:	7b 01       	movw	r14, r22
    a816:	36 c0       	rjmp	.+108    	; 0xa884 <Fuzzy+0x302>
    a818:	20 e0       	ldi	r18, 0x00	; 0
    a81a:	30 e0       	ldi	r19, 0x00	; 0
    a81c:	40 ef       	ldi	r20, 0xF0	; 240
    a81e:	51 e4       	ldi	r21, 0x41	; 65
    a820:	c5 01       	movw	r24, r10
    a822:	b4 01       	movw	r22, r8
    a824:	4c d2       	rcall	.+1176   	; 0xacbe <__gesf2>
    a826:	18 16       	cp	r1, r24
    a828:	2c f5       	brge	.+74     	; 0xa874 <Fuzzy+0x2f2>
    a82a:	20 e0       	ldi	r18, 0x00	; 0
    a82c:	30 e0       	ldi	r19, 0x00	; 0
    a82e:	40 e2       	ldi	r20, 0x20	; 32
    a830:	52 e4       	ldi	r21, 0x42	; 66
    a832:	c5 01       	movw	r24, r10
    a834:	b4 01       	movw	r22, r8
    a836:	f4 d0       	rcall	.+488    	; 0xaa20 <__cmpsf2>
    a838:	18 16       	cp	r1, r24
    a83a:	fc f0       	brlt	.+62     	; 0xa87a <Fuzzy+0x2f8>
    a83c:	8b 81       	ldd	r24, Y+3	; 0x03
    a83e:	88 23       	and	r24, r24
    a840:	f9 f0       	breq	.+62     	; 0xa880 <Fuzzy+0x2fe>
    a842:	20 e0       	ldi	r18, 0x00	; 0
    a844:	30 e0       	ldi	r19, 0x00	; 0
    a846:	40 ef       	ldi	r20, 0xF0	; 240
    a848:	51 e4       	ldi	r21, 0x41	; 65
    a84a:	c5 01       	movw	r24, r10
    a84c:	b4 01       	movw	r22, r8
    a84e:	83 d0       	rcall	.+262    	; 0xa956 <__subsf3>
    a850:	20 e0       	ldi	r18, 0x00	; 0
    a852:	30 e0       	ldi	r19, 0x00	; 0
    a854:	40 e2       	ldi	r20, 0x20	; 32
    a856:	51 e4       	ldi	r21, 0x41	; 65
    a858:	e7 d0       	rcall	.+462    	; 0xaa28 <__divsf3>
    a85a:	20 e0       	ldi	r18, 0x00	; 0
    a85c:	30 e0       	ldi	r19, 0x00	; 0
    a85e:	48 ec       	ldi	r20, 0xC8	; 200
    a860:	52 e4       	ldi	r21, 0x42	; 66
    a862:	76 d2       	rcall	.+1260   	; 0xad50 <__mulsf3>
    a864:	20 e0       	ldi	r18, 0x00	; 0
    a866:	30 e0       	ldi	r19, 0x00	; 0
    a868:	48 e4       	ldi	r20, 0x48	; 72
    a86a:	53 e4       	ldi	r21, 0x43	; 67
    a86c:	75 d0       	rcall	.+234    	; 0xa958 <__addsf3>
    a86e:	44 d1       	rcall	.+648    	; 0xaaf8 <__fixsfsi>
    a870:	7b 01       	movw	r14, r22
    a872:	08 c0       	rjmp	.+16     	; 0xa884 <Fuzzy+0x302>
    a874:	e1 2c       	mov	r14, r1
    a876:	f1 2c       	mov	r15, r1
    a878:	05 c0       	rjmp	.+10     	; 0xa884 <Fuzzy+0x302>
	}
}
//----------------------------------------------------------------------------------------------------------
int Fuzzy(xCompressor *comp,int corection)
{
	int steps=0;
    a87a:	e1 2c       	mov	r14, r1
    a87c:	f1 2c       	mov	r15, r1
    a87e:	02 c0       	rjmp	.+4      	; 0xa884 <Fuzzy+0x302>
    a880:	e1 2c       	mov	r14, r1
    a882:	f1 2c       	mov	r15, r1
    a884:	0e 19       	sub	r16, r14
    a886:	1f 09       	sbc	r17, r15
    a888:	fe 01       	movw	r30, r28
		 //if(old_corection_2!=corection && comp->Index==2){comp->trvCorection=corection-steps;old_corection_2=corection;}
	//xSerialxPrintf(&xSerial3Port,"TRVcorection_%d = %d \r\n",comp->Index, corection);
			
	
	
	comp->trvCorection=corection-steps;
    a88a:	ea 59       	subi	r30, 0x9A	; 154
    a88c:	ff 4f       	sbci	r31, 0xFF	; 255
    a88e:	11 83       	std	Z+1, r17	; 0x01
    a890:	00 83       	st	Z, r16
    a892:	38 96       	adiw	r30, 0x08	; 8
    a894:	80 81       	ld	r24, Z
    a896:	91 81       	ldd	r25, Z+1	; 0x01
	if(comp->Index==2)xSerialxPrintf(&xSerial3Port,"TRVcorection_2 = %d \r\n", comp->trvCorection);
    a898:	02 97       	sbiw	r24, 0x02	; 2
    a89a:	91 f4       	brne	.+36     	; 0xa8c0 <Fuzzy+0x33e>
    a89c:	1f 93       	push	r17
    a89e:	0f 93       	push	r16
    a8a0:	8a e3       	ldi	r24, 0x3A	; 58
    a8a2:	96 e0       	ldi	r25, 0x06	; 6
    a8a4:	9f 93       	push	r25
    a8a6:	8f 93       	push	r24
    a8a8:	80 ea       	ldi	r24, 0xA0	; 160
    a8aa:	97 e0       	ldi	r25, 0x07	; 7
    a8ac:	9f 93       	push	r25
    a8ae:	8f 93       	push	r24
    a8b0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a8b4:	0f 90       	pop	r0
    a8b6:	0f 90       	pop	r0
    a8b8:	0f 90       	pop	r0
    a8ba:	0f 90       	pop	r0
    a8bc:	0f 90       	pop	r0
    a8be:	0f 90       	pop	r0
    a8c0:	fe 01       	movw	r30, r28
    a8c2:	e2 59       	subi	r30, 0x92	; 146
    a8c4:	ff 4f       	sbci	r31, 0xFF	; 255
	if(comp->Index==1)xSerialxPrintf(&xSerial3Port,"TRVcorection_1 = %d \r\n", comp->trvCorection);
    a8c6:	80 81       	ld	r24, Z
    a8c8:	91 81       	ldd	r25, Z+1	; 0x01
    a8ca:	01 97       	sbiw	r24, 0x01	; 1
    a8cc:	a9 f4       	brne	.+42     	; 0xa8f8 <Fuzzy+0x376>
    a8ce:	38 97       	sbiw	r30, 0x08	; 8
    a8d0:	81 81       	ldd	r24, Z+1	; 0x01
    a8d2:	8f 93       	push	r24
    a8d4:	80 81       	ld	r24, Z
    a8d6:	8f 93       	push	r24
    a8d8:	81 e5       	ldi	r24, 0x51	; 81
    a8da:	96 e0       	ldi	r25, 0x06	; 6
    a8dc:	9f 93       	push	r25
    a8de:	8f 93       	push	r24
    a8e0:	80 ea       	ldi	r24, 0xA0	; 160
    a8e2:	97 e0       	ldi	r25, 0x07	; 7
    a8e4:	9f 93       	push	r25
    a8e6:	8f 93       	push	r24
    a8e8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a8ec:	0f 90       	pop	r0
    a8ee:	0f 90       	pop	r0
    a8f0:	0f 90       	pop	r0
    a8f2:	0f 90       	pop	r0
    a8f4:	0f 90       	pop	r0
    a8f6:	0f 90       	pop	r0
    a8f8:	fe 01       	movw	r30, r28
    a8fa:	ea 59       	subi	r30, 0x9A	; 154
    a8fc:	ff 4f       	sbci	r31, 0xFF	; 255
	steps=steps+comp->trvCorection;		
    a8fe:	80 81       	ld	r24, Z
    a900:	91 81       	ldd	r25, Z+1	; 0x01
    a902:	b7 01       	movw	r22, r14
	comp->Steps=steps - comp->Trv_position;
    a904:	68 0f       	add	r22, r24
    a906:	79 1f       	adc	r23, r25
    a908:	34 96       	adiw	r30, 0x04	; 4
    a90a:	80 81       	ld	r24, Z
    a90c:	91 81       	ldd	r25, Z+1	; 0x01
    a90e:	9b 01       	movw	r18, r22
    a910:	28 1b       	sub	r18, r24
    a912:	39 0b       	sbc	r19, r25
    a914:	c9 01       	movw	r24, r18
    a916:	c8 59       	subi	r28, 0x98	; 152
    a918:	df 4f       	sbci	r29, 0xFF	; 255
    a91a:	39 83       	std	Y+1, r19	; 0x01
    a91c:	28 83       	st	Y, r18
    a91e:	df 91       	pop	r29
    a920:	cf 91       	pop	r28
    a922:	1f 91       	pop	r17

	return comp->Steps;
}
    a924:	0f 91       	pop	r16
    a926:	ff 90       	pop	r15
    a928:	ef 90       	pop	r14
    a92a:	df 90       	pop	r13
    a92c:	cf 90       	pop	r12
    a92e:	bf 90       	pop	r11
    a930:	af 90       	pop	r10
    a932:	9f 90       	pop	r9
    a934:	8f 90       	pop	r8
    a936:	08 95       	ret

0000a938 <calibration>:
    a938:	21 e0       	ldi	r18, 0x01	; 1
    a93a:	fc 01       	movw	r30, r24
    a93c:	27 83       	std	Z+7, r18	; 0x07
////////////////////////////////////////////////////////////////////////////////////////////////////////
void calibration(xCompressor *comp)
{
	comp->calibrate=true;
	comp->Steps=-240;
    a93e:	e8 59       	subi	r30, 0x98	; 152
    a940:	ff 4f       	sbci	r31, 0xFF	; 255
    a942:	20 e1       	ldi	r18, 0x10	; 16
    a944:	3f ef       	ldi	r19, 0xFF	; 255
    a946:	31 83       	std	Z+1, r19	; 0x01
    a948:	20 83       	st	Z, r18
	comp->Trv_position=240;
    a94a:	32 96       	adiw	r30, 0x02	; 2
    a94c:	20 ef       	ldi	r18, 0xF0	; 240
    a94e:	30 e0       	ldi	r19, 0x00	; 0
    a950:	31 83       	std	Z+1, r19	; 0x01
    a952:	20 83       	st	Z, r18
    a954:	08 95       	ret

0000a956 <__subsf3>:
    a956:	50 58       	subi	r21, 0x80	; 128

0000a958 <__addsf3>:
    a958:	bb 27       	eor	r27, r27
    a95a:	aa 27       	eor	r26, r26
    a95c:	0e d0       	rcall	.+28     	; 0xa97a <__addsf3x>
    a95e:	75 c1       	rjmp	.+746    	; 0xac4a <__fp_round>
    a960:	66 d1       	rcall	.+716    	; 0xac2e <__fp_pscA>
    a962:	30 f0       	brcs	.+12     	; 0xa970 <__addsf3+0x18>
    a964:	6b d1       	rcall	.+726    	; 0xac3c <__fp_pscB>
    a966:	20 f0       	brcs	.+8      	; 0xa970 <__addsf3+0x18>
    a968:	31 f4       	brne	.+12     	; 0xa976 <__addsf3+0x1e>
    a96a:	9f 3f       	cpi	r25, 0xFF	; 255
    a96c:	11 f4       	brne	.+4      	; 0xa972 <__addsf3+0x1a>
    a96e:	1e f4       	brtc	.+6      	; 0xa976 <__addsf3+0x1e>
    a970:	5b c1       	rjmp	.+694    	; 0xac28 <__fp_nan>
    a972:	0e f4       	brtc	.+2      	; 0xa976 <__addsf3+0x1e>
    a974:	e0 95       	com	r30
    a976:	e7 fb       	bst	r30, 7
    a978:	51 c1       	rjmp	.+674    	; 0xac1c <__fp_inf>

0000a97a <__addsf3x>:
    a97a:	e9 2f       	mov	r30, r25
    a97c:	77 d1       	rcall	.+750    	; 0xac6c <__fp_split3>
    a97e:	80 f3       	brcs	.-32     	; 0xa960 <__addsf3+0x8>
    a980:	ba 17       	cp	r27, r26
    a982:	62 07       	cpc	r22, r18
    a984:	73 07       	cpc	r23, r19
    a986:	84 07       	cpc	r24, r20
    a988:	95 07       	cpc	r25, r21
    a98a:	18 f0       	brcs	.+6      	; 0xa992 <__addsf3x+0x18>
    a98c:	71 f4       	brne	.+28     	; 0xa9aa <__addsf3x+0x30>
    a98e:	9e f5       	brtc	.+102    	; 0xa9f6 <__addsf3x+0x7c>
    a990:	8f c1       	rjmp	.+798    	; 0xacb0 <__fp_zero>
    a992:	0e f4       	brtc	.+2      	; 0xa996 <__addsf3x+0x1c>
    a994:	e0 95       	com	r30
    a996:	0b 2e       	mov	r0, r27
    a998:	ba 2f       	mov	r27, r26
    a99a:	a0 2d       	mov	r26, r0
    a99c:	0b 01       	movw	r0, r22
    a99e:	b9 01       	movw	r22, r18
    a9a0:	90 01       	movw	r18, r0
    a9a2:	0c 01       	movw	r0, r24
    a9a4:	ca 01       	movw	r24, r20
    a9a6:	a0 01       	movw	r20, r0
    a9a8:	11 24       	eor	r1, r1
    a9aa:	ff 27       	eor	r31, r31
    a9ac:	59 1b       	sub	r21, r25
    a9ae:	99 f0       	breq	.+38     	; 0xa9d6 <__addsf3x+0x5c>
    a9b0:	59 3f       	cpi	r21, 0xF9	; 249
    a9b2:	50 f4       	brcc	.+20     	; 0xa9c8 <__addsf3x+0x4e>
    a9b4:	50 3e       	cpi	r21, 0xE0	; 224
    a9b6:	68 f1       	brcs	.+90     	; 0xaa12 <__addsf3x+0x98>
    a9b8:	1a 16       	cp	r1, r26
    a9ba:	f0 40       	sbci	r31, 0x00	; 0
    a9bc:	a2 2f       	mov	r26, r18
    a9be:	23 2f       	mov	r18, r19
    a9c0:	34 2f       	mov	r19, r20
    a9c2:	44 27       	eor	r20, r20
    a9c4:	58 5f       	subi	r21, 0xF8	; 248
    a9c6:	f3 cf       	rjmp	.-26     	; 0xa9ae <__addsf3x+0x34>
    a9c8:	46 95       	lsr	r20
    a9ca:	37 95       	ror	r19
    a9cc:	27 95       	ror	r18
    a9ce:	a7 95       	ror	r26
    a9d0:	f0 40       	sbci	r31, 0x00	; 0
    a9d2:	53 95       	inc	r21
    a9d4:	c9 f7       	brne	.-14     	; 0xa9c8 <__addsf3x+0x4e>
    a9d6:	7e f4       	brtc	.+30     	; 0xa9f6 <__addsf3x+0x7c>
    a9d8:	1f 16       	cp	r1, r31
    a9da:	ba 0b       	sbc	r27, r26
    a9dc:	62 0b       	sbc	r22, r18
    a9de:	73 0b       	sbc	r23, r19
    a9e0:	84 0b       	sbc	r24, r20
    a9e2:	ba f0       	brmi	.+46     	; 0xaa12 <__addsf3x+0x98>
    a9e4:	91 50       	subi	r25, 0x01	; 1
    a9e6:	a1 f0       	breq	.+40     	; 0xaa10 <__addsf3x+0x96>
    a9e8:	ff 0f       	add	r31, r31
    a9ea:	bb 1f       	adc	r27, r27
    a9ec:	66 1f       	adc	r22, r22
    a9ee:	77 1f       	adc	r23, r23
    a9f0:	88 1f       	adc	r24, r24
    a9f2:	c2 f7       	brpl	.-16     	; 0xa9e4 <__addsf3x+0x6a>
    a9f4:	0e c0       	rjmp	.+28     	; 0xaa12 <__addsf3x+0x98>
    a9f6:	ba 0f       	add	r27, r26
    a9f8:	62 1f       	adc	r22, r18
    a9fa:	73 1f       	adc	r23, r19
    a9fc:	84 1f       	adc	r24, r20
    a9fe:	48 f4       	brcc	.+18     	; 0xaa12 <__addsf3x+0x98>
    aa00:	87 95       	ror	r24
    aa02:	77 95       	ror	r23
    aa04:	67 95       	ror	r22
    aa06:	b7 95       	ror	r27
    aa08:	f7 95       	ror	r31
    aa0a:	9e 3f       	cpi	r25, 0xFE	; 254
    aa0c:	08 f0       	brcs	.+2      	; 0xaa10 <__addsf3x+0x96>
    aa0e:	b3 cf       	rjmp	.-154    	; 0xa976 <__addsf3+0x1e>
    aa10:	93 95       	inc	r25
    aa12:	88 0f       	add	r24, r24
    aa14:	08 f0       	brcs	.+2      	; 0xaa18 <__addsf3x+0x9e>
    aa16:	99 27       	eor	r25, r25
    aa18:	ee 0f       	add	r30, r30
    aa1a:	97 95       	ror	r25
    aa1c:	87 95       	ror	r24
    aa1e:	08 95       	ret

0000aa20 <__cmpsf2>:
    aa20:	d9 d0       	rcall	.+434    	; 0xabd4 <__fp_cmp>
    aa22:	08 f4       	brcc	.+2      	; 0xaa26 <__cmpsf2+0x6>
    aa24:	81 e0       	ldi	r24, 0x01	; 1
    aa26:	08 95       	ret

0000aa28 <__divsf3>:
    aa28:	0c d0       	rcall	.+24     	; 0xaa42 <__divsf3x>
    aa2a:	0f c1       	rjmp	.+542    	; 0xac4a <__fp_round>
    aa2c:	07 d1       	rcall	.+526    	; 0xac3c <__fp_pscB>
    aa2e:	40 f0       	brcs	.+16     	; 0xaa40 <__divsf3+0x18>
    aa30:	fe d0       	rcall	.+508    	; 0xac2e <__fp_pscA>
    aa32:	30 f0       	brcs	.+12     	; 0xaa40 <__divsf3+0x18>
    aa34:	21 f4       	brne	.+8      	; 0xaa3e <__divsf3+0x16>
    aa36:	5f 3f       	cpi	r21, 0xFF	; 255
    aa38:	19 f0       	breq	.+6      	; 0xaa40 <__divsf3+0x18>
    aa3a:	f0 c0       	rjmp	.+480    	; 0xac1c <__fp_inf>
    aa3c:	51 11       	cpse	r21, r1
    aa3e:	39 c1       	rjmp	.+626    	; 0xacb2 <__fp_szero>
    aa40:	f3 c0       	rjmp	.+486    	; 0xac28 <__fp_nan>

0000aa42 <__divsf3x>:
    aa42:	14 d1       	rcall	.+552    	; 0xac6c <__fp_split3>
    aa44:	98 f3       	brcs	.-26     	; 0xaa2c <__divsf3+0x4>

0000aa46 <__divsf3_pse>:
    aa46:	99 23       	and	r25, r25
    aa48:	c9 f3       	breq	.-14     	; 0xaa3c <__divsf3+0x14>
    aa4a:	55 23       	and	r21, r21
    aa4c:	b1 f3       	breq	.-20     	; 0xaa3a <__divsf3+0x12>
    aa4e:	95 1b       	sub	r25, r21
    aa50:	55 0b       	sbc	r21, r21
    aa52:	bb 27       	eor	r27, r27
    aa54:	aa 27       	eor	r26, r26
    aa56:	62 17       	cp	r22, r18
    aa58:	73 07       	cpc	r23, r19
    aa5a:	84 07       	cpc	r24, r20
    aa5c:	38 f0       	brcs	.+14     	; 0xaa6c <__divsf3_pse+0x26>
    aa5e:	9f 5f       	subi	r25, 0xFF	; 255
    aa60:	5f 4f       	sbci	r21, 0xFF	; 255
    aa62:	22 0f       	add	r18, r18
    aa64:	33 1f       	adc	r19, r19
    aa66:	44 1f       	adc	r20, r20
    aa68:	aa 1f       	adc	r26, r26
    aa6a:	a9 f3       	breq	.-22     	; 0xaa56 <__divsf3_pse+0x10>
    aa6c:	33 d0       	rcall	.+102    	; 0xaad4 <__divsf3_pse+0x8e>
    aa6e:	0e 2e       	mov	r0, r30
    aa70:	3a f0       	brmi	.+14     	; 0xaa80 <__divsf3_pse+0x3a>
    aa72:	e0 e8       	ldi	r30, 0x80	; 128
    aa74:	30 d0       	rcall	.+96     	; 0xaad6 <__divsf3_pse+0x90>
    aa76:	91 50       	subi	r25, 0x01	; 1
    aa78:	50 40       	sbci	r21, 0x00	; 0
    aa7a:	e6 95       	lsr	r30
    aa7c:	00 1c       	adc	r0, r0
    aa7e:	ca f7       	brpl	.-14     	; 0xaa72 <__divsf3_pse+0x2c>
    aa80:	29 d0       	rcall	.+82     	; 0xaad4 <__divsf3_pse+0x8e>
    aa82:	fe 2f       	mov	r31, r30
    aa84:	27 d0       	rcall	.+78     	; 0xaad4 <__divsf3_pse+0x8e>
    aa86:	66 0f       	add	r22, r22
    aa88:	77 1f       	adc	r23, r23
    aa8a:	88 1f       	adc	r24, r24
    aa8c:	bb 1f       	adc	r27, r27
    aa8e:	26 17       	cp	r18, r22
    aa90:	37 07       	cpc	r19, r23
    aa92:	48 07       	cpc	r20, r24
    aa94:	ab 07       	cpc	r26, r27
    aa96:	b0 e8       	ldi	r27, 0x80	; 128
    aa98:	09 f0       	breq	.+2      	; 0xaa9c <__divsf3_pse+0x56>
    aa9a:	bb 0b       	sbc	r27, r27
    aa9c:	80 2d       	mov	r24, r0
    aa9e:	bf 01       	movw	r22, r30
    aaa0:	ff 27       	eor	r31, r31
    aaa2:	93 58       	subi	r25, 0x83	; 131
    aaa4:	5f 4f       	sbci	r21, 0xFF	; 255
    aaa6:	2a f0       	brmi	.+10     	; 0xaab2 <__divsf3_pse+0x6c>
    aaa8:	9e 3f       	cpi	r25, 0xFE	; 254
    aaaa:	51 05       	cpc	r21, r1
    aaac:	68 f0       	brcs	.+26     	; 0xaac8 <__divsf3_pse+0x82>
    aaae:	b6 c0       	rjmp	.+364    	; 0xac1c <__fp_inf>
    aab0:	00 c1       	rjmp	.+512    	; 0xacb2 <__fp_szero>
    aab2:	5f 3f       	cpi	r21, 0xFF	; 255
    aab4:	ec f3       	brlt	.-6      	; 0xaab0 <__divsf3_pse+0x6a>
    aab6:	98 3e       	cpi	r25, 0xE8	; 232
    aab8:	dc f3       	brlt	.-10     	; 0xaab0 <__divsf3_pse+0x6a>
    aaba:	86 95       	lsr	r24
    aabc:	77 95       	ror	r23
    aabe:	67 95       	ror	r22
    aac0:	b7 95       	ror	r27
    aac2:	f7 95       	ror	r31
    aac4:	9f 5f       	subi	r25, 0xFF	; 255
    aac6:	c9 f7       	brne	.-14     	; 0xaaba <__divsf3_pse+0x74>
    aac8:	88 0f       	add	r24, r24
    aaca:	91 1d       	adc	r25, r1
    aacc:	96 95       	lsr	r25
    aace:	87 95       	ror	r24
    aad0:	97 f9       	bld	r25, 7
    aad2:	08 95       	ret
    aad4:	e1 e0       	ldi	r30, 0x01	; 1
    aad6:	66 0f       	add	r22, r22
    aad8:	77 1f       	adc	r23, r23
    aada:	88 1f       	adc	r24, r24
    aadc:	bb 1f       	adc	r27, r27
    aade:	62 17       	cp	r22, r18
    aae0:	73 07       	cpc	r23, r19
    aae2:	84 07       	cpc	r24, r20
    aae4:	ba 07       	cpc	r27, r26
    aae6:	20 f0       	brcs	.+8      	; 0xaaf0 <__divsf3_pse+0xaa>
    aae8:	62 1b       	sub	r22, r18
    aaea:	73 0b       	sbc	r23, r19
    aaec:	84 0b       	sbc	r24, r20
    aaee:	ba 0b       	sbc	r27, r26
    aaf0:	ee 1f       	adc	r30, r30
    aaf2:	88 f7       	brcc	.-30     	; 0xaad6 <__divsf3_pse+0x90>
    aaf4:	e0 95       	com	r30
    aaf6:	08 95       	ret

0000aaf8 <__fixsfsi>:
    aaf8:	04 d0       	rcall	.+8      	; 0xab02 <__fixunssfsi>
    aafa:	68 94       	set
    aafc:	b1 11       	cpse	r27, r1
    aafe:	d9 c0       	rjmp	.+434    	; 0xacb2 <__fp_szero>
    ab00:	08 95       	ret

0000ab02 <__fixunssfsi>:
    ab02:	bc d0       	rcall	.+376    	; 0xac7c <__fp_splitA>
    ab04:	88 f0       	brcs	.+34     	; 0xab28 <__fixunssfsi+0x26>
    ab06:	9f 57       	subi	r25, 0x7F	; 127
    ab08:	90 f0       	brcs	.+36     	; 0xab2e <__fixunssfsi+0x2c>
    ab0a:	b9 2f       	mov	r27, r25
    ab0c:	99 27       	eor	r25, r25
    ab0e:	b7 51       	subi	r27, 0x17	; 23
    ab10:	a0 f0       	brcs	.+40     	; 0xab3a <__fixunssfsi+0x38>
    ab12:	d1 f0       	breq	.+52     	; 0xab48 <__fixunssfsi+0x46>
    ab14:	66 0f       	add	r22, r22
    ab16:	77 1f       	adc	r23, r23
    ab18:	88 1f       	adc	r24, r24
    ab1a:	99 1f       	adc	r25, r25
    ab1c:	1a f0       	brmi	.+6      	; 0xab24 <__fixunssfsi+0x22>
    ab1e:	ba 95       	dec	r27
    ab20:	c9 f7       	brne	.-14     	; 0xab14 <__fixunssfsi+0x12>
    ab22:	12 c0       	rjmp	.+36     	; 0xab48 <__fixunssfsi+0x46>
    ab24:	b1 30       	cpi	r27, 0x01	; 1
    ab26:	81 f0       	breq	.+32     	; 0xab48 <__fixunssfsi+0x46>
    ab28:	c3 d0       	rcall	.+390    	; 0xacb0 <__fp_zero>
    ab2a:	b1 e0       	ldi	r27, 0x01	; 1
    ab2c:	08 95       	ret
    ab2e:	c0 c0       	rjmp	.+384    	; 0xacb0 <__fp_zero>
    ab30:	67 2f       	mov	r22, r23
    ab32:	78 2f       	mov	r23, r24
    ab34:	88 27       	eor	r24, r24
    ab36:	b8 5f       	subi	r27, 0xF8	; 248
    ab38:	39 f0       	breq	.+14     	; 0xab48 <__fixunssfsi+0x46>
    ab3a:	b9 3f       	cpi	r27, 0xF9	; 249
    ab3c:	cc f3       	brlt	.-14     	; 0xab30 <__fixunssfsi+0x2e>
    ab3e:	86 95       	lsr	r24
    ab40:	77 95       	ror	r23
    ab42:	67 95       	ror	r22
    ab44:	b3 95       	inc	r27
    ab46:	d9 f7       	brne	.-10     	; 0xab3e <__fixunssfsi+0x3c>
    ab48:	3e f4       	brtc	.+14     	; 0xab58 <__fixunssfsi+0x56>
    ab4a:	90 95       	com	r25
    ab4c:	80 95       	com	r24
    ab4e:	70 95       	com	r23
    ab50:	61 95       	neg	r22
    ab52:	7f 4f       	sbci	r23, 0xFF	; 255
    ab54:	8f 4f       	sbci	r24, 0xFF	; 255
    ab56:	9f 4f       	sbci	r25, 0xFF	; 255
    ab58:	08 95       	ret

0000ab5a <__floatunsisf>:
    ab5a:	e8 94       	clt
    ab5c:	09 c0       	rjmp	.+18     	; 0xab70 <__floatsisf+0x12>

0000ab5e <__floatsisf>:
    ab5e:	97 fb       	bst	r25, 7
    ab60:	3e f4       	brtc	.+14     	; 0xab70 <__floatsisf+0x12>
    ab62:	90 95       	com	r25
    ab64:	80 95       	com	r24
    ab66:	70 95       	com	r23
    ab68:	61 95       	neg	r22
    ab6a:	7f 4f       	sbci	r23, 0xFF	; 255
    ab6c:	8f 4f       	sbci	r24, 0xFF	; 255
    ab6e:	9f 4f       	sbci	r25, 0xFF	; 255
    ab70:	99 23       	and	r25, r25
    ab72:	a9 f0       	breq	.+42     	; 0xab9e <__floatsisf+0x40>
    ab74:	f9 2f       	mov	r31, r25
    ab76:	96 e9       	ldi	r25, 0x96	; 150
    ab78:	bb 27       	eor	r27, r27
    ab7a:	93 95       	inc	r25
    ab7c:	f6 95       	lsr	r31
    ab7e:	87 95       	ror	r24
    ab80:	77 95       	ror	r23
    ab82:	67 95       	ror	r22
    ab84:	b7 95       	ror	r27
    ab86:	f1 11       	cpse	r31, r1
    ab88:	f8 cf       	rjmp	.-16     	; 0xab7a <__floatsisf+0x1c>
    ab8a:	fa f4       	brpl	.+62     	; 0xabca <__floatsisf+0x6c>
    ab8c:	bb 0f       	add	r27, r27
    ab8e:	11 f4       	brne	.+4      	; 0xab94 <__floatsisf+0x36>
    ab90:	60 ff       	sbrs	r22, 0
    ab92:	1b c0       	rjmp	.+54     	; 0xabca <__floatsisf+0x6c>
    ab94:	6f 5f       	subi	r22, 0xFF	; 255
    ab96:	7f 4f       	sbci	r23, 0xFF	; 255
    ab98:	8f 4f       	sbci	r24, 0xFF	; 255
    ab9a:	9f 4f       	sbci	r25, 0xFF	; 255
    ab9c:	16 c0       	rjmp	.+44     	; 0xabca <__floatsisf+0x6c>
    ab9e:	88 23       	and	r24, r24
    aba0:	11 f0       	breq	.+4      	; 0xaba6 <__floatsisf+0x48>
    aba2:	96 e9       	ldi	r25, 0x96	; 150
    aba4:	11 c0       	rjmp	.+34     	; 0xabc8 <__floatsisf+0x6a>
    aba6:	77 23       	and	r23, r23
    aba8:	21 f0       	breq	.+8      	; 0xabb2 <__floatsisf+0x54>
    abaa:	9e e8       	ldi	r25, 0x8E	; 142
    abac:	87 2f       	mov	r24, r23
    abae:	76 2f       	mov	r23, r22
    abb0:	05 c0       	rjmp	.+10     	; 0xabbc <__floatsisf+0x5e>
    abb2:	66 23       	and	r22, r22
    abb4:	71 f0       	breq	.+28     	; 0xabd2 <__floatsisf+0x74>
    abb6:	96 e8       	ldi	r25, 0x86	; 134
    abb8:	86 2f       	mov	r24, r22
    abba:	70 e0       	ldi	r23, 0x00	; 0
    abbc:	60 e0       	ldi	r22, 0x00	; 0
    abbe:	2a f0       	brmi	.+10     	; 0xabca <__floatsisf+0x6c>
    abc0:	9a 95       	dec	r25
    abc2:	66 0f       	add	r22, r22
    abc4:	77 1f       	adc	r23, r23
    abc6:	88 1f       	adc	r24, r24
    abc8:	da f7       	brpl	.-10     	; 0xabc0 <__floatsisf+0x62>
    abca:	88 0f       	add	r24, r24
    abcc:	96 95       	lsr	r25
    abce:	87 95       	ror	r24
    abd0:	97 f9       	bld	r25, 7
    abd2:	08 95       	ret

0000abd4 <__fp_cmp>:
    abd4:	99 0f       	add	r25, r25
    abd6:	00 08       	sbc	r0, r0
    abd8:	55 0f       	add	r21, r21
    abda:	aa 0b       	sbc	r26, r26
    abdc:	e0 e8       	ldi	r30, 0x80	; 128
    abde:	fe ef       	ldi	r31, 0xFE	; 254
    abe0:	16 16       	cp	r1, r22
    abe2:	17 06       	cpc	r1, r23
    abe4:	e8 07       	cpc	r30, r24
    abe6:	f9 07       	cpc	r31, r25
    abe8:	c0 f0       	brcs	.+48     	; 0xac1a <__fp_cmp+0x46>
    abea:	12 16       	cp	r1, r18
    abec:	13 06       	cpc	r1, r19
    abee:	e4 07       	cpc	r30, r20
    abf0:	f5 07       	cpc	r31, r21
    abf2:	98 f0       	brcs	.+38     	; 0xac1a <__fp_cmp+0x46>
    abf4:	62 1b       	sub	r22, r18
    abf6:	73 0b       	sbc	r23, r19
    abf8:	84 0b       	sbc	r24, r20
    abfa:	95 0b       	sbc	r25, r21
    abfc:	39 f4       	brne	.+14     	; 0xac0c <__fp_cmp+0x38>
    abfe:	0a 26       	eor	r0, r26
    ac00:	61 f0       	breq	.+24     	; 0xac1a <__fp_cmp+0x46>
    ac02:	23 2b       	or	r18, r19
    ac04:	24 2b       	or	r18, r20
    ac06:	25 2b       	or	r18, r21
    ac08:	21 f4       	brne	.+8      	; 0xac12 <__fp_cmp+0x3e>
    ac0a:	08 95       	ret
    ac0c:	0a 26       	eor	r0, r26
    ac0e:	09 f4       	brne	.+2      	; 0xac12 <__fp_cmp+0x3e>
    ac10:	a1 40       	sbci	r26, 0x01	; 1
    ac12:	a6 95       	lsr	r26
    ac14:	8f ef       	ldi	r24, 0xFF	; 255
    ac16:	81 1d       	adc	r24, r1
    ac18:	81 1d       	adc	r24, r1
    ac1a:	08 95       	ret

0000ac1c <__fp_inf>:
    ac1c:	97 f9       	bld	r25, 7
    ac1e:	9f 67       	ori	r25, 0x7F	; 127
    ac20:	80 e8       	ldi	r24, 0x80	; 128
    ac22:	70 e0       	ldi	r23, 0x00	; 0
    ac24:	60 e0       	ldi	r22, 0x00	; 0
    ac26:	08 95       	ret

0000ac28 <__fp_nan>:
    ac28:	9f ef       	ldi	r25, 0xFF	; 255
    ac2a:	80 ec       	ldi	r24, 0xC0	; 192
    ac2c:	08 95       	ret

0000ac2e <__fp_pscA>:
    ac2e:	00 24       	eor	r0, r0
    ac30:	0a 94       	dec	r0
    ac32:	16 16       	cp	r1, r22
    ac34:	17 06       	cpc	r1, r23
    ac36:	18 06       	cpc	r1, r24
    ac38:	09 06       	cpc	r0, r25
    ac3a:	08 95       	ret

0000ac3c <__fp_pscB>:
    ac3c:	00 24       	eor	r0, r0
    ac3e:	0a 94       	dec	r0
    ac40:	12 16       	cp	r1, r18
    ac42:	13 06       	cpc	r1, r19
    ac44:	14 06       	cpc	r1, r20
    ac46:	05 06       	cpc	r0, r21
    ac48:	08 95       	ret

0000ac4a <__fp_round>:
    ac4a:	09 2e       	mov	r0, r25
    ac4c:	03 94       	inc	r0
    ac4e:	00 0c       	add	r0, r0
    ac50:	11 f4       	brne	.+4      	; 0xac56 <__fp_round+0xc>
    ac52:	88 23       	and	r24, r24
    ac54:	52 f0       	brmi	.+20     	; 0xac6a <__fp_round+0x20>
    ac56:	bb 0f       	add	r27, r27
    ac58:	40 f4       	brcc	.+16     	; 0xac6a <__fp_round+0x20>
    ac5a:	bf 2b       	or	r27, r31
    ac5c:	11 f4       	brne	.+4      	; 0xac62 <__fp_round+0x18>
    ac5e:	60 ff       	sbrs	r22, 0
    ac60:	04 c0       	rjmp	.+8      	; 0xac6a <__fp_round+0x20>
    ac62:	6f 5f       	subi	r22, 0xFF	; 255
    ac64:	7f 4f       	sbci	r23, 0xFF	; 255
    ac66:	8f 4f       	sbci	r24, 0xFF	; 255
    ac68:	9f 4f       	sbci	r25, 0xFF	; 255
    ac6a:	08 95       	ret

0000ac6c <__fp_split3>:
    ac6c:	57 fd       	sbrc	r21, 7
    ac6e:	90 58       	subi	r25, 0x80	; 128
    ac70:	44 0f       	add	r20, r20
    ac72:	55 1f       	adc	r21, r21
    ac74:	59 f0       	breq	.+22     	; 0xac8c <__fp_splitA+0x10>
    ac76:	5f 3f       	cpi	r21, 0xFF	; 255
    ac78:	71 f0       	breq	.+28     	; 0xac96 <__fp_splitA+0x1a>
    ac7a:	47 95       	ror	r20

0000ac7c <__fp_splitA>:
    ac7c:	88 0f       	add	r24, r24
    ac7e:	97 fb       	bst	r25, 7
    ac80:	99 1f       	adc	r25, r25
    ac82:	61 f0       	breq	.+24     	; 0xac9c <__fp_splitA+0x20>
    ac84:	9f 3f       	cpi	r25, 0xFF	; 255
    ac86:	79 f0       	breq	.+30     	; 0xaca6 <__fp_splitA+0x2a>
    ac88:	87 95       	ror	r24
    ac8a:	08 95       	ret
    ac8c:	12 16       	cp	r1, r18
    ac8e:	13 06       	cpc	r1, r19
    ac90:	14 06       	cpc	r1, r20
    ac92:	55 1f       	adc	r21, r21
    ac94:	f2 cf       	rjmp	.-28     	; 0xac7a <__fp_split3+0xe>
    ac96:	46 95       	lsr	r20
    ac98:	f1 df       	rcall	.-30     	; 0xac7c <__fp_splitA>
    ac9a:	08 c0       	rjmp	.+16     	; 0xacac <__fp_splitA+0x30>
    ac9c:	16 16       	cp	r1, r22
    ac9e:	17 06       	cpc	r1, r23
    aca0:	18 06       	cpc	r1, r24
    aca2:	99 1f       	adc	r25, r25
    aca4:	f1 cf       	rjmp	.-30     	; 0xac88 <__fp_splitA+0xc>
    aca6:	86 95       	lsr	r24
    aca8:	71 05       	cpc	r23, r1
    acaa:	61 05       	cpc	r22, r1
    acac:	08 94       	sec
    acae:	08 95       	ret

0000acb0 <__fp_zero>:
    acb0:	e8 94       	clt

0000acb2 <__fp_szero>:
    acb2:	bb 27       	eor	r27, r27
    acb4:	66 27       	eor	r22, r22
    acb6:	77 27       	eor	r23, r23
    acb8:	cb 01       	movw	r24, r22
    acba:	97 f9       	bld	r25, 7
    acbc:	08 95       	ret

0000acbe <__gesf2>:
    acbe:	8a df       	rcall	.-236    	; 0xabd4 <__fp_cmp>
    acc0:	08 f4       	brcc	.+2      	; 0xacc4 <__gesf2+0x6>
    acc2:	8f ef       	ldi	r24, 0xFF	; 255
    acc4:	08 95       	ret
    acc6:	0e f0       	brts	.+2      	; 0xacca <__gesf2+0xc>
    acc8:	a6 c0       	rjmp	.+332    	; 0xae16 <__fp_mpack>
    acca:	ae cf       	rjmp	.-164    	; 0xac28 <__fp_nan>
    accc:	68 94       	set
    acce:	a6 cf       	rjmp	.-180    	; 0xac1c <__fp_inf>

0000acd0 <log>:
    acd0:	d5 df       	rcall	.-86     	; 0xac7c <__fp_splitA>
    acd2:	c8 f3       	brcs	.-14     	; 0xacc6 <__gesf2+0x8>
    acd4:	99 23       	and	r25, r25
    acd6:	d1 f3       	breq	.-12     	; 0xaccc <__gesf2+0xe>
    acd8:	c6 f3       	brts	.-16     	; 0xacca <__gesf2+0xc>
    acda:	df 93       	push	r29
    acdc:	cf 93       	push	r28
    acde:	1f 93       	push	r17
    ace0:	0f 93       	push	r16
    ace2:	ff 92       	push	r15
    ace4:	c9 2f       	mov	r28, r25
    ace6:	dd 27       	eor	r29, r29
    ace8:	88 23       	and	r24, r24
    acea:	2a f0       	brmi	.+10     	; 0xacf6 <log+0x26>
    acec:	21 97       	sbiw	r28, 0x01	; 1
    acee:	66 0f       	add	r22, r22
    acf0:	77 1f       	adc	r23, r23
    acf2:	88 1f       	adc	r24, r24
    acf4:	da f7       	brpl	.-10     	; 0xacec <log+0x1c>
    acf6:	20 e0       	ldi	r18, 0x00	; 0
    acf8:	30 e0       	ldi	r19, 0x00	; 0
    acfa:	40 e8       	ldi	r20, 0x80	; 128
    acfc:	5f eb       	ldi	r21, 0xBF	; 191
    acfe:	9f e3       	ldi	r25, 0x3F	; 63
    ad00:	88 39       	cpi	r24, 0x98	; 152
    ad02:	20 f0       	brcs	.+8      	; 0xad0c <log+0x3c>
    ad04:	80 3e       	cpi	r24, 0xE0	; 224
    ad06:	30 f0       	brcs	.+12     	; 0xad14 <log+0x44>
    ad08:	21 96       	adiw	r28, 0x01	; 1
    ad0a:	8f 77       	andi	r24, 0x7F	; 127
    ad0c:	25 de       	rcall	.-950    	; 0xa958 <__addsf3>
    ad0e:	e4 e9       	ldi	r30, 0x94	; 148
    ad10:	f8 e0       	ldi	r31, 0x08	; 8
    ad12:	03 c0       	rjmp	.+6      	; 0xad1a <log+0x4a>
    ad14:	21 de       	rcall	.-958    	; 0xa958 <__addsf3>
    ad16:	e1 ec       	ldi	r30, 0xC1	; 193
    ad18:	f8 e0       	ldi	r31, 0x08	; 8
    ad1a:	8b d0       	rcall	.+278    	; 0xae32 <__fp_powser>
    ad1c:	8b 01       	movw	r16, r22
    ad1e:	be 01       	movw	r22, r28
    ad20:	ec 01       	movw	r28, r24
    ad22:	fb 2e       	mov	r15, r27
    ad24:	6f 57       	subi	r22, 0x7F	; 127
    ad26:	71 09       	sbc	r23, r1
    ad28:	75 95       	asr	r23
    ad2a:	77 1f       	adc	r23, r23
    ad2c:	88 0b       	sbc	r24, r24
    ad2e:	99 0b       	sbc	r25, r25
    ad30:	16 df       	rcall	.-468    	; 0xab5e <__floatsisf>
    ad32:	28 e1       	ldi	r18, 0x18	; 24
    ad34:	32 e7       	ldi	r19, 0x72	; 114
    ad36:	41 e3       	ldi	r20, 0x31	; 49
    ad38:	5f e3       	ldi	r21, 0x3F	; 63
    ad3a:	16 d0       	rcall	.+44     	; 0xad68 <__mulsf3x>
    ad3c:	af 2d       	mov	r26, r15
    ad3e:	98 01       	movw	r18, r16
    ad40:	ae 01       	movw	r20, r28
    ad42:	ff 90       	pop	r15
    ad44:	0f 91       	pop	r16
    ad46:	1f 91       	pop	r17
    ad48:	cf 91       	pop	r28
    ad4a:	df 91       	pop	r29
    ad4c:	16 de       	rcall	.-980    	; 0xa97a <__addsf3x>
    ad4e:	7d cf       	rjmp	.-262    	; 0xac4a <__fp_round>

0000ad50 <__mulsf3>:
    ad50:	0b d0       	rcall	.+22     	; 0xad68 <__mulsf3x>
    ad52:	7b cf       	rjmp	.-266    	; 0xac4a <__fp_round>
    ad54:	6c df       	rcall	.-296    	; 0xac2e <__fp_pscA>
    ad56:	28 f0       	brcs	.+10     	; 0xad62 <__mulsf3+0x12>
    ad58:	71 df       	rcall	.-286    	; 0xac3c <__fp_pscB>
    ad5a:	18 f0       	brcs	.+6      	; 0xad62 <__mulsf3+0x12>
    ad5c:	95 23       	and	r25, r21
    ad5e:	09 f0       	breq	.+2      	; 0xad62 <__mulsf3+0x12>
    ad60:	5d cf       	rjmp	.-326    	; 0xac1c <__fp_inf>
    ad62:	62 cf       	rjmp	.-316    	; 0xac28 <__fp_nan>
    ad64:	11 24       	eor	r1, r1
    ad66:	a5 cf       	rjmp	.-182    	; 0xacb2 <__fp_szero>

0000ad68 <__mulsf3x>:
    ad68:	81 df       	rcall	.-254    	; 0xac6c <__fp_split3>
    ad6a:	a0 f3       	brcs	.-24     	; 0xad54 <__mulsf3+0x4>

0000ad6c <__mulsf3_pse>:
    ad6c:	95 9f       	mul	r25, r21
    ad6e:	d1 f3       	breq	.-12     	; 0xad64 <__mulsf3+0x14>
    ad70:	95 0f       	add	r25, r21
    ad72:	50 e0       	ldi	r21, 0x00	; 0
    ad74:	55 1f       	adc	r21, r21
    ad76:	62 9f       	mul	r22, r18
    ad78:	f0 01       	movw	r30, r0
    ad7a:	72 9f       	mul	r23, r18
    ad7c:	bb 27       	eor	r27, r27
    ad7e:	f0 0d       	add	r31, r0
    ad80:	b1 1d       	adc	r27, r1
    ad82:	63 9f       	mul	r22, r19
    ad84:	aa 27       	eor	r26, r26
    ad86:	f0 0d       	add	r31, r0
    ad88:	b1 1d       	adc	r27, r1
    ad8a:	aa 1f       	adc	r26, r26
    ad8c:	64 9f       	mul	r22, r20
    ad8e:	66 27       	eor	r22, r22
    ad90:	b0 0d       	add	r27, r0
    ad92:	a1 1d       	adc	r26, r1
    ad94:	66 1f       	adc	r22, r22
    ad96:	82 9f       	mul	r24, r18
    ad98:	22 27       	eor	r18, r18
    ad9a:	b0 0d       	add	r27, r0
    ad9c:	a1 1d       	adc	r26, r1
    ad9e:	62 1f       	adc	r22, r18
    ada0:	73 9f       	mul	r23, r19
    ada2:	b0 0d       	add	r27, r0
    ada4:	a1 1d       	adc	r26, r1
    ada6:	62 1f       	adc	r22, r18
    ada8:	83 9f       	mul	r24, r19
    adaa:	a0 0d       	add	r26, r0
    adac:	61 1d       	adc	r22, r1
    adae:	22 1f       	adc	r18, r18
    adb0:	74 9f       	mul	r23, r20
    adb2:	33 27       	eor	r19, r19
    adb4:	a0 0d       	add	r26, r0
    adb6:	61 1d       	adc	r22, r1
    adb8:	23 1f       	adc	r18, r19
    adba:	84 9f       	mul	r24, r20
    adbc:	60 0d       	add	r22, r0
    adbe:	21 1d       	adc	r18, r1
    adc0:	82 2f       	mov	r24, r18
    adc2:	76 2f       	mov	r23, r22
    adc4:	6a 2f       	mov	r22, r26
    adc6:	11 24       	eor	r1, r1
    adc8:	9f 57       	subi	r25, 0x7F	; 127
    adca:	50 40       	sbci	r21, 0x00	; 0
    adcc:	8a f0       	brmi	.+34     	; 0xadf0 <__mulsf3_pse+0x84>
    adce:	e1 f0       	breq	.+56     	; 0xae08 <__mulsf3_pse+0x9c>
    add0:	88 23       	and	r24, r24
    add2:	4a f0       	brmi	.+18     	; 0xade6 <__mulsf3_pse+0x7a>
    add4:	ee 0f       	add	r30, r30
    add6:	ff 1f       	adc	r31, r31
    add8:	bb 1f       	adc	r27, r27
    adda:	66 1f       	adc	r22, r22
    addc:	77 1f       	adc	r23, r23
    adde:	88 1f       	adc	r24, r24
    ade0:	91 50       	subi	r25, 0x01	; 1
    ade2:	50 40       	sbci	r21, 0x00	; 0
    ade4:	a9 f7       	brne	.-22     	; 0xadd0 <__mulsf3_pse+0x64>
    ade6:	9e 3f       	cpi	r25, 0xFE	; 254
    ade8:	51 05       	cpc	r21, r1
    adea:	70 f0       	brcs	.+28     	; 0xae08 <__mulsf3_pse+0x9c>
    adec:	17 cf       	rjmp	.-466    	; 0xac1c <__fp_inf>
    adee:	61 cf       	rjmp	.-318    	; 0xacb2 <__fp_szero>
    adf0:	5f 3f       	cpi	r21, 0xFF	; 255
    adf2:	ec f3       	brlt	.-6      	; 0xadee <__mulsf3_pse+0x82>
    adf4:	98 3e       	cpi	r25, 0xE8	; 232
    adf6:	dc f3       	brlt	.-10     	; 0xadee <__mulsf3_pse+0x82>
    adf8:	86 95       	lsr	r24
    adfa:	77 95       	ror	r23
    adfc:	67 95       	ror	r22
    adfe:	b7 95       	ror	r27
    ae00:	f7 95       	ror	r31
    ae02:	e7 95       	ror	r30
    ae04:	9f 5f       	subi	r25, 0xFF	; 255
    ae06:	c1 f7       	brne	.-16     	; 0xadf8 <__mulsf3_pse+0x8c>
    ae08:	fe 2b       	or	r31, r30
    ae0a:	88 0f       	add	r24, r24
    ae0c:	91 1d       	adc	r25, r1
    ae0e:	96 95       	lsr	r25
    ae10:	87 95       	ror	r24
    ae12:	97 f9       	bld	r25, 7
    ae14:	08 95       	ret

0000ae16 <__fp_mpack>:
    ae16:	9f 3f       	cpi	r25, 0xFF	; 255
    ae18:	31 f0       	breq	.+12     	; 0xae26 <__fp_mpack_finite+0xc>

0000ae1a <__fp_mpack_finite>:
    ae1a:	91 50       	subi	r25, 0x01	; 1
    ae1c:	20 f4       	brcc	.+8      	; 0xae26 <__fp_mpack_finite+0xc>
    ae1e:	87 95       	ror	r24
    ae20:	77 95       	ror	r23
    ae22:	67 95       	ror	r22
    ae24:	b7 95       	ror	r27
    ae26:	88 0f       	add	r24, r24
    ae28:	91 1d       	adc	r25, r1
    ae2a:	96 95       	lsr	r25
    ae2c:	87 95       	ror	r24
    ae2e:	97 f9       	bld	r25, 7
    ae30:	08 95       	ret

0000ae32 <__fp_powser>:
    ae32:	df 93       	push	r29
    ae34:	cf 93       	push	r28
    ae36:	1f 93       	push	r17
    ae38:	0f 93       	push	r16
    ae3a:	ff 92       	push	r15
    ae3c:	ef 92       	push	r14
    ae3e:	df 92       	push	r13
    ae40:	7b 01       	movw	r14, r22
    ae42:	8c 01       	movw	r16, r24
    ae44:	68 94       	set
    ae46:	05 c0       	rjmp	.+10     	; 0xae52 <__fp_powser+0x20>
    ae48:	da 2e       	mov	r13, r26
    ae4a:	ef 01       	movw	r28, r30
    ae4c:	8d df       	rcall	.-230    	; 0xad68 <__mulsf3x>
    ae4e:	fe 01       	movw	r30, r28
    ae50:	e8 94       	clt
    ae52:	a5 91       	lpm	r26, Z+
    ae54:	25 91       	lpm	r18, Z+
    ae56:	35 91       	lpm	r19, Z+
    ae58:	45 91       	lpm	r20, Z+
    ae5a:	55 91       	lpm	r21, Z+
    ae5c:	ae f3       	brts	.-22     	; 0xae48 <__fp_powser+0x16>
    ae5e:	ef 01       	movw	r28, r30
    ae60:	8c dd       	rcall	.-1256   	; 0xa97a <__addsf3x>
    ae62:	fe 01       	movw	r30, r28
    ae64:	97 01       	movw	r18, r14
    ae66:	a8 01       	movw	r20, r16
    ae68:	da 94       	dec	r13
    ae6a:	79 f7       	brne	.-34     	; 0xae4a <__fp_powser+0x18>
    ae6c:	df 90       	pop	r13
    ae6e:	ef 90       	pop	r14
    ae70:	ff 90       	pop	r15
    ae72:	0f 91       	pop	r16
    ae74:	1f 91       	pop	r17
    ae76:	cf 91       	pop	r28
    ae78:	df 91       	pop	r29
    ae7a:	08 95       	ret

0000ae7c <vfprintf>:
    ae7c:	2f 92       	push	r2
    ae7e:	3f 92       	push	r3
    ae80:	4f 92       	push	r4
    ae82:	5f 92       	push	r5
    ae84:	6f 92       	push	r6
    ae86:	7f 92       	push	r7
    ae88:	8f 92       	push	r8
    ae8a:	9f 92       	push	r9
    ae8c:	af 92       	push	r10
    ae8e:	bf 92       	push	r11
    ae90:	cf 92       	push	r12
    ae92:	df 92       	push	r13
    ae94:	ef 92       	push	r14
    ae96:	ff 92       	push	r15
    ae98:	0f 93       	push	r16
    ae9a:	1f 93       	push	r17
    ae9c:	cf 93       	push	r28
    ae9e:	df 93       	push	r29
    aea0:	cd b7       	in	r28, 0x3d	; 61
    aea2:	de b7       	in	r29, 0x3e	; 62
    aea4:	60 97       	sbiw	r28, 0x10	; 16
    aea6:	0f b6       	in	r0, 0x3f	; 63
    aea8:	f8 94       	cli
    aeaa:	de bf       	out	0x3e, r29	; 62
    aeac:	0f be       	out	0x3f, r0	; 63
    aeae:	cd bf       	out	0x3d, r28	; 61
    aeb0:	7c 01       	movw	r14, r24
    aeb2:	1b 01       	movw	r2, r22
    aeb4:	6a 01       	movw	r12, r20
    aeb6:	fc 01       	movw	r30, r24
    aeb8:	17 82       	std	Z+7, r1	; 0x07
    aeba:	16 82       	std	Z+6, r1	; 0x06
    aebc:	83 81       	ldd	r24, Z+3	; 0x03
    aebe:	81 ff       	sbrs	r24, 1
    aec0:	2a c3       	rjmp	.+1620   	; 0xb516 <vfprintf+0x69a>
    aec2:	9e 01       	movw	r18, r28
    aec4:	2f 5f       	subi	r18, 0xFF	; 255
    aec6:	3f 4f       	sbci	r19, 0xFF	; 255
    aec8:	39 01       	movw	r6, r18
    aeca:	f7 01       	movw	r30, r14
    aecc:	93 81       	ldd	r25, Z+3	; 0x03
    aece:	f1 01       	movw	r30, r2
    aed0:	93 fd       	sbrc	r25, 3
    aed2:	85 91       	lpm	r24, Z+
    aed4:	93 ff       	sbrs	r25, 3
    aed6:	81 91       	ld	r24, Z+
    aed8:	1f 01       	movw	r2, r30
    aeda:	88 23       	and	r24, r24
    aedc:	09 f4       	brne	.+2      	; 0xaee0 <vfprintf+0x64>
    aede:	17 c3       	rjmp	.+1582   	; 0xb50e <vfprintf+0x692>
    aee0:	85 32       	cpi	r24, 0x25	; 37
    aee2:	39 f4       	brne	.+14     	; 0xaef2 <vfprintf+0x76>
    aee4:	93 fd       	sbrc	r25, 3
    aee6:	85 91       	lpm	r24, Z+
    aee8:	93 ff       	sbrs	r25, 3
    aeea:	81 91       	ld	r24, Z+
    aeec:	1f 01       	movw	r2, r30
    aeee:	85 32       	cpi	r24, 0x25	; 37
    aef0:	31 f4       	brne	.+12     	; 0xaefe <vfprintf+0x82>
    aef2:	b7 01       	movw	r22, r14
    aef4:	90 e0       	ldi	r25, 0x00	; 0
    aef6:	a3 d5       	rcall	.+2886   	; 0xba3e <fputc>
    aef8:	56 01       	movw	r10, r12
    aefa:	65 01       	movw	r12, r10
    aefc:	e6 cf       	rjmp	.-52     	; 0xaeca <vfprintf+0x4e>
    aefe:	10 e0       	ldi	r17, 0x00	; 0
    af00:	51 2c       	mov	r5, r1
    af02:	91 2c       	mov	r9, r1
    af04:	ff e1       	ldi	r31, 0x1F	; 31
    af06:	f9 15       	cp	r31, r9
    af08:	d8 f0       	brcs	.+54     	; 0xaf40 <vfprintf+0xc4>
    af0a:	8b 32       	cpi	r24, 0x2B	; 43
    af0c:	79 f0       	breq	.+30     	; 0xaf2c <vfprintf+0xb0>
    af0e:	38 f4       	brcc	.+14     	; 0xaf1e <vfprintf+0xa2>
    af10:	80 32       	cpi	r24, 0x20	; 32
    af12:	79 f0       	breq	.+30     	; 0xaf32 <vfprintf+0xb6>
    af14:	83 32       	cpi	r24, 0x23	; 35
    af16:	a1 f4       	brne	.+40     	; 0xaf40 <vfprintf+0xc4>
    af18:	f9 2d       	mov	r31, r9
    af1a:	f0 61       	ori	r31, 0x10	; 16
    af1c:	2e c0       	rjmp	.+92     	; 0xaf7a <vfprintf+0xfe>
    af1e:	8d 32       	cpi	r24, 0x2D	; 45
    af20:	61 f0       	breq	.+24     	; 0xaf3a <vfprintf+0xbe>
    af22:	80 33       	cpi	r24, 0x30	; 48
    af24:	69 f4       	brne	.+26     	; 0xaf40 <vfprintf+0xc4>
    af26:	29 2d       	mov	r18, r9
    af28:	21 60       	ori	r18, 0x01	; 1
    af2a:	2d c0       	rjmp	.+90     	; 0xaf86 <vfprintf+0x10a>
    af2c:	39 2d       	mov	r19, r9
    af2e:	32 60       	ori	r19, 0x02	; 2
    af30:	93 2e       	mov	r9, r19
    af32:	89 2d       	mov	r24, r9
    af34:	84 60       	ori	r24, 0x04	; 4
    af36:	98 2e       	mov	r9, r24
    af38:	2a c0       	rjmp	.+84     	; 0xaf8e <vfprintf+0x112>
    af3a:	e9 2d       	mov	r30, r9
    af3c:	e8 60       	ori	r30, 0x08	; 8
    af3e:	15 c0       	rjmp	.+42     	; 0xaf6a <vfprintf+0xee>
    af40:	97 fc       	sbrc	r9, 7
    af42:	2d c0       	rjmp	.+90     	; 0xaf9e <vfprintf+0x122>
    af44:	20 ed       	ldi	r18, 0xD0	; 208
    af46:	28 0f       	add	r18, r24
    af48:	2a 30       	cpi	r18, 0x0A	; 10
    af4a:	88 f4       	brcc	.+34     	; 0xaf6e <vfprintf+0xf2>
    af4c:	96 fe       	sbrs	r9, 6
    af4e:	06 c0       	rjmp	.+12     	; 0xaf5c <vfprintf+0xe0>
    af50:	3a e0       	ldi	r19, 0x0A	; 10
    af52:	13 9f       	mul	r17, r19
    af54:	20 0d       	add	r18, r0
    af56:	11 24       	eor	r1, r1
    af58:	12 2f       	mov	r17, r18
    af5a:	19 c0       	rjmp	.+50     	; 0xaf8e <vfprintf+0x112>
    af5c:	8a e0       	ldi	r24, 0x0A	; 10
    af5e:	58 9e       	mul	r5, r24
    af60:	20 0d       	add	r18, r0
    af62:	11 24       	eor	r1, r1
    af64:	52 2e       	mov	r5, r18
    af66:	e9 2d       	mov	r30, r9
    af68:	e0 62       	ori	r30, 0x20	; 32
    af6a:	9e 2e       	mov	r9, r30
    af6c:	10 c0       	rjmp	.+32     	; 0xaf8e <vfprintf+0x112>
    af6e:	8e 32       	cpi	r24, 0x2E	; 46
    af70:	31 f4       	brne	.+12     	; 0xaf7e <vfprintf+0x102>
    af72:	96 fc       	sbrc	r9, 6
    af74:	cc c2       	rjmp	.+1432   	; 0xb50e <vfprintf+0x692>
    af76:	f9 2d       	mov	r31, r9
    af78:	f0 64       	ori	r31, 0x40	; 64
    af7a:	9f 2e       	mov	r9, r31
    af7c:	08 c0       	rjmp	.+16     	; 0xaf8e <vfprintf+0x112>
    af7e:	8c 36       	cpi	r24, 0x6C	; 108
    af80:	21 f4       	brne	.+8      	; 0xaf8a <vfprintf+0x10e>
    af82:	29 2d       	mov	r18, r9
    af84:	20 68       	ori	r18, 0x80	; 128
    af86:	92 2e       	mov	r9, r18
    af88:	02 c0       	rjmp	.+4      	; 0xaf8e <vfprintf+0x112>
    af8a:	88 36       	cpi	r24, 0x68	; 104
    af8c:	41 f4       	brne	.+16     	; 0xaf9e <vfprintf+0x122>
    af8e:	f1 01       	movw	r30, r2
    af90:	93 fd       	sbrc	r25, 3
    af92:	85 91       	lpm	r24, Z+
    af94:	93 ff       	sbrs	r25, 3
    af96:	81 91       	ld	r24, Z+
    af98:	1f 01       	movw	r2, r30
    af9a:	81 11       	cpse	r24, r1
    af9c:	b3 cf       	rjmp	.-154    	; 0xaf04 <vfprintf+0x88>
    af9e:	9b eb       	ldi	r25, 0xBB	; 187
    afa0:	98 0f       	add	r25, r24
    afa2:	93 30       	cpi	r25, 0x03	; 3
    afa4:	20 f4       	brcc	.+8      	; 0xafae <vfprintf+0x132>
    afa6:	99 2d       	mov	r25, r9
    afa8:	90 61       	ori	r25, 0x10	; 16
    afaa:	80 5e       	subi	r24, 0xE0	; 224
    afac:	07 c0       	rjmp	.+14     	; 0xafbc <vfprintf+0x140>
    afae:	9b e9       	ldi	r25, 0x9B	; 155
    afb0:	98 0f       	add	r25, r24
    afb2:	93 30       	cpi	r25, 0x03	; 3
    afb4:	08 f0       	brcs	.+2      	; 0xafb8 <vfprintf+0x13c>
    afb6:	59 c1       	rjmp	.+690    	; 0xb26a <vfprintf+0x3ee>
    afb8:	99 2d       	mov	r25, r9
    afba:	9f 7e       	andi	r25, 0xEF	; 239
    afbc:	96 ff       	sbrs	r25, 6
    afbe:	16 e0       	ldi	r17, 0x06	; 6
    afc0:	9f 73       	andi	r25, 0x3F	; 63
    afc2:	99 2e       	mov	r9, r25
    afc4:	85 36       	cpi	r24, 0x65	; 101
    afc6:	19 f4       	brne	.+6      	; 0xafce <vfprintf+0x152>
    afc8:	90 64       	ori	r25, 0x40	; 64
    afca:	99 2e       	mov	r9, r25
    afcc:	08 c0       	rjmp	.+16     	; 0xafde <vfprintf+0x162>
    afce:	86 36       	cpi	r24, 0x66	; 102
    afd0:	21 f4       	brne	.+8      	; 0xafda <vfprintf+0x15e>
    afd2:	39 2f       	mov	r19, r25
    afd4:	30 68       	ori	r19, 0x80	; 128
    afd6:	93 2e       	mov	r9, r19
    afd8:	02 c0       	rjmp	.+4      	; 0xafde <vfprintf+0x162>
    afda:	11 11       	cpse	r17, r1
    afdc:	11 50       	subi	r17, 0x01	; 1
    afde:	97 fe       	sbrs	r9, 7
    afe0:	07 c0       	rjmp	.+14     	; 0xaff0 <vfprintf+0x174>
    afe2:	1c 33       	cpi	r17, 0x3C	; 60
    afe4:	50 f4       	brcc	.+20     	; 0xaffa <vfprintf+0x17e>
    afe6:	44 24       	eor	r4, r4
    afe8:	43 94       	inc	r4
    afea:	41 0e       	add	r4, r17
    afec:	27 e0       	ldi	r18, 0x07	; 7
    afee:	0b c0       	rjmp	.+22     	; 0xb006 <vfprintf+0x18a>
    aff0:	18 30       	cpi	r17, 0x08	; 8
    aff2:	38 f0       	brcs	.+14     	; 0xb002 <vfprintf+0x186>
    aff4:	27 e0       	ldi	r18, 0x07	; 7
    aff6:	17 e0       	ldi	r17, 0x07	; 7
    aff8:	05 c0       	rjmp	.+10     	; 0xb004 <vfprintf+0x188>
    affa:	27 e0       	ldi	r18, 0x07	; 7
    affc:	9c e3       	ldi	r25, 0x3C	; 60
    affe:	49 2e       	mov	r4, r25
    b000:	02 c0       	rjmp	.+4      	; 0xb006 <vfprintf+0x18a>
    b002:	21 2f       	mov	r18, r17
    b004:	41 2c       	mov	r4, r1
    b006:	56 01       	movw	r10, r12
    b008:	84 e0       	ldi	r24, 0x04	; 4
    b00a:	a8 0e       	add	r10, r24
    b00c:	b1 1c       	adc	r11, r1
    b00e:	f6 01       	movw	r30, r12
    b010:	60 81       	ld	r22, Z
    b012:	71 81       	ldd	r23, Z+1	; 0x01
    b014:	82 81       	ldd	r24, Z+2	; 0x02
    b016:	93 81       	ldd	r25, Z+3	; 0x03
    b018:	04 2d       	mov	r16, r4
    b01a:	a3 01       	movw	r20, r6
    b01c:	12 d4       	rcall	.+2084   	; 0xb842 <__ftoa_engine>
    b01e:	6c 01       	movw	r12, r24
    b020:	f9 81       	ldd	r31, Y+1	; 0x01
    b022:	fc 87       	std	Y+12, r31	; 0x0c
    b024:	f0 ff       	sbrs	r31, 0
    b026:	02 c0       	rjmp	.+4      	; 0xb02c <vfprintf+0x1b0>
    b028:	f3 ff       	sbrs	r31, 3
    b02a:	06 c0       	rjmp	.+12     	; 0xb038 <vfprintf+0x1bc>
    b02c:	91 fc       	sbrc	r9, 1
    b02e:	06 c0       	rjmp	.+12     	; 0xb03c <vfprintf+0x1c0>
    b030:	92 fe       	sbrs	r9, 2
    b032:	06 c0       	rjmp	.+12     	; 0xb040 <vfprintf+0x1c4>
    b034:	00 e2       	ldi	r16, 0x20	; 32
    b036:	05 c0       	rjmp	.+10     	; 0xb042 <vfprintf+0x1c6>
    b038:	0d e2       	ldi	r16, 0x2D	; 45
    b03a:	03 c0       	rjmp	.+6      	; 0xb042 <vfprintf+0x1c6>
    b03c:	0b e2       	ldi	r16, 0x2B	; 43
    b03e:	01 c0       	rjmp	.+2      	; 0xb042 <vfprintf+0x1c6>
    b040:	00 e0       	ldi	r16, 0x00	; 0
    b042:	8c 85       	ldd	r24, Y+12	; 0x0c
    b044:	8c 70       	andi	r24, 0x0C	; 12
    b046:	19 f0       	breq	.+6      	; 0xb04e <vfprintf+0x1d2>
    b048:	01 11       	cpse	r16, r1
    b04a:	43 c2       	rjmp	.+1158   	; 0xb4d2 <vfprintf+0x656>
    b04c:	80 c2       	rjmp	.+1280   	; 0xb54e <vfprintf+0x6d2>
    b04e:	97 fe       	sbrs	r9, 7
    b050:	10 c0       	rjmp	.+32     	; 0xb072 <vfprintf+0x1f6>
    b052:	4c 0c       	add	r4, r12
    b054:	fc 85       	ldd	r31, Y+12	; 0x0c
    b056:	f4 ff       	sbrs	r31, 4
    b058:	04 c0       	rjmp	.+8      	; 0xb062 <vfprintf+0x1e6>
    b05a:	8a 81       	ldd	r24, Y+2	; 0x02
    b05c:	81 33       	cpi	r24, 0x31	; 49
    b05e:	09 f4       	brne	.+2      	; 0xb062 <vfprintf+0x1e6>
    b060:	4a 94       	dec	r4
    b062:	14 14       	cp	r1, r4
    b064:	74 f5       	brge	.+92     	; 0xb0c2 <vfprintf+0x246>
    b066:	28 e0       	ldi	r18, 0x08	; 8
    b068:	24 15       	cp	r18, r4
    b06a:	78 f5       	brcc	.+94     	; 0xb0ca <vfprintf+0x24e>
    b06c:	88 e0       	ldi	r24, 0x08	; 8
    b06e:	48 2e       	mov	r4, r24
    b070:	2c c0       	rjmp	.+88     	; 0xb0ca <vfprintf+0x24e>
    b072:	96 fc       	sbrc	r9, 6
    b074:	2a c0       	rjmp	.+84     	; 0xb0ca <vfprintf+0x24e>
    b076:	81 2f       	mov	r24, r17
    b078:	90 e0       	ldi	r25, 0x00	; 0
    b07a:	8c 15       	cp	r24, r12
    b07c:	9d 05       	cpc	r25, r13
    b07e:	9c f0       	brlt	.+38     	; 0xb0a6 <vfprintf+0x22a>
    b080:	3c ef       	ldi	r19, 0xFC	; 252
    b082:	c3 16       	cp	r12, r19
    b084:	3f ef       	ldi	r19, 0xFF	; 255
    b086:	d3 06       	cpc	r13, r19
    b088:	74 f0       	brlt	.+28     	; 0xb0a6 <vfprintf+0x22a>
    b08a:	89 2d       	mov	r24, r9
    b08c:	80 68       	ori	r24, 0x80	; 128
    b08e:	98 2e       	mov	r9, r24
    b090:	0a c0       	rjmp	.+20     	; 0xb0a6 <vfprintf+0x22a>
    b092:	e2 e0       	ldi	r30, 0x02	; 2
    b094:	f0 e0       	ldi	r31, 0x00	; 0
    b096:	ec 0f       	add	r30, r28
    b098:	fd 1f       	adc	r31, r29
    b09a:	e1 0f       	add	r30, r17
    b09c:	f1 1d       	adc	r31, r1
    b09e:	80 81       	ld	r24, Z
    b0a0:	80 33       	cpi	r24, 0x30	; 48
    b0a2:	19 f4       	brne	.+6      	; 0xb0aa <vfprintf+0x22e>
    b0a4:	11 50       	subi	r17, 0x01	; 1
    b0a6:	11 11       	cpse	r17, r1
    b0a8:	f4 cf       	rjmp	.-24     	; 0xb092 <vfprintf+0x216>
    b0aa:	97 fe       	sbrs	r9, 7
    b0ac:	0e c0       	rjmp	.+28     	; 0xb0ca <vfprintf+0x24e>
    b0ae:	44 24       	eor	r4, r4
    b0b0:	43 94       	inc	r4
    b0b2:	41 0e       	add	r4, r17
    b0b4:	81 2f       	mov	r24, r17
    b0b6:	90 e0       	ldi	r25, 0x00	; 0
    b0b8:	c8 16       	cp	r12, r24
    b0ba:	d9 06       	cpc	r13, r25
    b0bc:	2c f4       	brge	.+10     	; 0xb0c8 <vfprintf+0x24c>
    b0be:	1c 19       	sub	r17, r12
    b0c0:	04 c0       	rjmp	.+8      	; 0xb0ca <vfprintf+0x24e>
    b0c2:	44 24       	eor	r4, r4
    b0c4:	43 94       	inc	r4
    b0c6:	01 c0       	rjmp	.+2      	; 0xb0ca <vfprintf+0x24e>
    b0c8:	10 e0       	ldi	r17, 0x00	; 0
    b0ca:	97 fe       	sbrs	r9, 7
    b0cc:	06 c0       	rjmp	.+12     	; 0xb0da <vfprintf+0x25e>
    b0ce:	1c 14       	cp	r1, r12
    b0d0:	1d 04       	cpc	r1, r13
    b0d2:	34 f4       	brge	.+12     	; 0xb0e0 <vfprintf+0x264>
    b0d4:	c6 01       	movw	r24, r12
    b0d6:	01 96       	adiw	r24, 0x01	; 1
    b0d8:	05 c0       	rjmp	.+10     	; 0xb0e4 <vfprintf+0x268>
    b0da:	85 e0       	ldi	r24, 0x05	; 5
    b0dc:	90 e0       	ldi	r25, 0x00	; 0
    b0de:	02 c0       	rjmp	.+4      	; 0xb0e4 <vfprintf+0x268>
    b0e0:	81 e0       	ldi	r24, 0x01	; 1
    b0e2:	90 e0       	ldi	r25, 0x00	; 0
    b0e4:	01 11       	cpse	r16, r1
    b0e6:	01 96       	adiw	r24, 0x01	; 1
    b0e8:	11 23       	and	r17, r17
    b0ea:	31 f0       	breq	.+12     	; 0xb0f8 <vfprintf+0x27c>
    b0ec:	21 2f       	mov	r18, r17
    b0ee:	30 e0       	ldi	r19, 0x00	; 0
    b0f0:	2f 5f       	subi	r18, 0xFF	; 255
    b0f2:	3f 4f       	sbci	r19, 0xFF	; 255
    b0f4:	82 0f       	add	r24, r18
    b0f6:	93 1f       	adc	r25, r19
    b0f8:	25 2d       	mov	r18, r5
    b0fa:	30 e0       	ldi	r19, 0x00	; 0
    b0fc:	82 17       	cp	r24, r18
    b0fe:	93 07       	cpc	r25, r19
    b100:	14 f4       	brge	.+4      	; 0xb106 <vfprintf+0x28a>
    b102:	58 1a       	sub	r5, r24
    b104:	01 c0       	rjmp	.+2      	; 0xb108 <vfprintf+0x28c>
    b106:	51 2c       	mov	r5, r1
    b108:	89 2d       	mov	r24, r9
    b10a:	89 70       	andi	r24, 0x09	; 9
    b10c:	41 f4       	brne	.+16     	; 0xb11e <vfprintf+0x2a2>
    b10e:	55 20       	and	r5, r5
    b110:	31 f0       	breq	.+12     	; 0xb11e <vfprintf+0x2a2>
    b112:	b7 01       	movw	r22, r14
    b114:	80 e2       	ldi	r24, 0x20	; 32
    b116:	90 e0       	ldi	r25, 0x00	; 0
    b118:	92 d4       	rcall	.+2340   	; 0xba3e <fputc>
    b11a:	5a 94       	dec	r5
    b11c:	f8 cf       	rjmp	.-16     	; 0xb10e <vfprintf+0x292>
    b11e:	00 23       	and	r16, r16
    b120:	21 f0       	breq	.+8      	; 0xb12a <vfprintf+0x2ae>
    b122:	b7 01       	movw	r22, r14
    b124:	80 2f       	mov	r24, r16
    b126:	90 e0       	ldi	r25, 0x00	; 0
    b128:	8a d4       	rcall	.+2324   	; 0xba3e <fputc>
    b12a:	93 fc       	sbrc	r9, 3
    b12c:	08 c0       	rjmp	.+16     	; 0xb13e <vfprintf+0x2c2>
    b12e:	55 20       	and	r5, r5
    b130:	31 f0       	breq	.+12     	; 0xb13e <vfprintf+0x2c2>
    b132:	b7 01       	movw	r22, r14
    b134:	80 e3       	ldi	r24, 0x30	; 48
    b136:	90 e0       	ldi	r25, 0x00	; 0
    b138:	82 d4       	rcall	.+2308   	; 0xba3e <fputc>
    b13a:	5a 94       	dec	r5
    b13c:	f8 cf       	rjmp	.-16     	; 0xb12e <vfprintf+0x2b2>
    b13e:	97 fe       	sbrs	r9, 7
    b140:	4a c0       	rjmp	.+148    	; 0xb1d6 <vfprintf+0x35a>
    b142:	46 01       	movw	r8, r12
    b144:	d7 fe       	sbrs	r13, 7
    b146:	02 c0       	rjmp	.+4      	; 0xb14c <vfprintf+0x2d0>
    b148:	81 2c       	mov	r8, r1
    b14a:	91 2c       	mov	r9, r1
    b14c:	c6 01       	movw	r24, r12
    b14e:	88 19       	sub	r24, r8
    b150:	99 09       	sbc	r25, r9
    b152:	f3 01       	movw	r30, r6
    b154:	e8 0f       	add	r30, r24
    b156:	f9 1f       	adc	r31, r25
    b158:	fe 87       	std	Y+14, r31	; 0x0e
    b15a:	ed 87       	std	Y+13, r30	; 0x0d
    b15c:	96 01       	movw	r18, r12
    b15e:	24 19       	sub	r18, r4
    b160:	31 09       	sbc	r19, r1
    b162:	38 8b       	std	Y+16, r19	; 0x10
    b164:	2f 87       	std	Y+15, r18	; 0x0f
    b166:	01 2f       	mov	r16, r17
    b168:	10 e0       	ldi	r17, 0x00	; 0
    b16a:	11 95       	neg	r17
    b16c:	01 95       	neg	r16
    b16e:	11 09       	sbc	r17, r1
    b170:	3f ef       	ldi	r19, 0xFF	; 255
    b172:	83 16       	cp	r8, r19
    b174:	93 06       	cpc	r9, r19
    b176:	21 f4       	brne	.+8      	; 0xb180 <vfprintf+0x304>
    b178:	b7 01       	movw	r22, r14
    b17a:	8e e2       	ldi	r24, 0x2E	; 46
    b17c:	90 e0       	ldi	r25, 0x00	; 0
    b17e:	5f d4       	rcall	.+2238   	; 0xba3e <fputc>
    b180:	c8 14       	cp	r12, r8
    b182:	d9 04       	cpc	r13, r9
    b184:	4c f0       	brlt	.+18     	; 0xb198 <vfprintf+0x31c>
    b186:	8f 85       	ldd	r24, Y+15	; 0x0f
    b188:	98 89       	ldd	r25, Y+16	; 0x10
    b18a:	88 15       	cp	r24, r8
    b18c:	99 05       	cpc	r25, r9
    b18e:	24 f4       	brge	.+8      	; 0xb198 <vfprintf+0x31c>
    b190:	ed 85       	ldd	r30, Y+13	; 0x0d
    b192:	fe 85       	ldd	r31, Y+14	; 0x0e
    b194:	81 81       	ldd	r24, Z+1	; 0x01
    b196:	01 c0       	rjmp	.+2      	; 0xb19a <vfprintf+0x31e>
    b198:	80 e3       	ldi	r24, 0x30	; 48
    b19a:	f1 e0       	ldi	r31, 0x01	; 1
    b19c:	8f 1a       	sub	r8, r31
    b19e:	91 08       	sbc	r9, r1
    b1a0:	2d 85       	ldd	r18, Y+13	; 0x0d
    b1a2:	3e 85       	ldd	r19, Y+14	; 0x0e
    b1a4:	2f 5f       	subi	r18, 0xFF	; 255
    b1a6:	3f 4f       	sbci	r19, 0xFF	; 255
    b1a8:	3e 87       	std	Y+14, r19	; 0x0e
    b1aa:	2d 87       	std	Y+13, r18	; 0x0d
    b1ac:	80 16       	cp	r8, r16
    b1ae:	91 06       	cpc	r9, r17
    b1b0:	24 f0       	brlt	.+8      	; 0xb1ba <vfprintf+0x33e>
    b1b2:	b7 01       	movw	r22, r14
    b1b4:	90 e0       	ldi	r25, 0x00	; 0
    b1b6:	43 d4       	rcall	.+2182   	; 0xba3e <fputc>
    b1b8:	db cf       	rjmp	.-74     	; 0xb170 <vfprintf+0x2f4>
    b1ba:	c8 14       	cp	r12, r8
    b1bc:	d9 04       	cpc	r13, r9
    b1be:	41 f4       	brne	.+16     	; 0xb1d0 <vfprintf+0x354>
    b1c0:	9a 81       	ldd	r25, Y+2	; 0x02
    b1c2:	96 33       	cpi	r25, 0x36	; 54
    b1c4:	20 f4       	brcc	.+8      	; 0xb1ce <vfprintf+0x352>
    b1c6:	95 33       	cpi	r25, 0x35	; 53
    b1c8:	19 f4       	brne	.+6      	; 0xb1d0 <vfprintf+0x354>
    b1ca:	3c 85       	ldd	r19, Y+12	; 0x0c
    b1cc:	34 ff       	sbrs	r19, 4
    b1ce:	81 e3       	ldi	r24, 0x31	; 49
    b1d0:	b7 01       	movw	r22, r14
    b1d2:	90 e0       	ldi	r25, 0x00	; 0
    b1d4:	48 c0       	rjmp	.+144    	; 0xb266 <vfprintf+0x3ea>
    b1d6:	8a 81       	ldd	r24, Y+2	; 0x02
    b1d8:	81 33       	cpi	r24, 0x31	; 49
    b1da:	19 f0       	breq	.+6      	; 0xb1e2 <vfprintf+0x366>
    b1dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    b1de:	9f 7e       	andi	r25, 0xEF	; 239
    b1e0:	9c 87       	std	Y+12, r25	; 0x0c
    b1e2:	b7 01       	movw	r22, r14
    b1e4:	90 e0       	ldi	r25, 0x00	; 0
    b1e6:	2b d4       	rcall	.+2134   	; 0xba3e <fputc>
    b1e8:	11 11       	cpse	r17, r1
    b1ea:	05 c0       	rjmp	.+10     	; 0xb1f6 <vfprintf+0x37a>
    b1ec:	94 fc       	sbrc	r9, 4
    b1ee:	16 c0       	rjmp	.+44     	; 0xb21c <vfprintf+0x3a0>
    b1f0:	85 e6       	ldi	r24, 0x65	; 101
    b1f2:	90 e0       	ldi	r25, 0x00	; 0
    b1f4:	15 c0       	rjmp	.+42     	; 0xb220 <vfprintf+0x3a4>
    b1f6:	b7 01       	movw	r22, r14
    b1f8:	8e e2       	ldi	r24, 0x2E	; 46
    b1fa:	90 e0       	ldi	r25, 0x00	; 0
    b1fc:	20 d4       	rcall	.+2112   	; 0xba3e <fputc>
    b1fe:	1e 5f       	subi	r17, 0xFE	; 254
    b200:	82 e0       	ldi	r24, 0x02	; 2
    b202:	01 e0       	ldi	r16, 0x01	; 1
    b204:	08 0f       	add	r16, r24
    b206:	f3 01       	movw	r30, r6
    b208:	e8 0f       	add	r30, r24
    b20a:	f1 1d       	adc	r31, r1
    b20c:	80 81       	ld	r24, Z
    b20e:	b7 01       	movw	r22, r14
    b210:	90 e0       	ldi	r25, 0x00	; 0
    b212:	15 d4       	rcall	.+2090   	; 0xba3e <fputc>
    b214:	80 2f       	mov	r24, r16
    b216:	01 13       	cpse	r16, r17
    b218:	f4 cf       	rjmp	.-24     	; 0xb202 <vfprintf+0x386>
    b21a:	e8 cf       	rjmp	.-48     	; 0xb1ec <vfprintf+0x370>
    b21c:	85 e4       	ldi	r24, 0x45	; 69
    b21e:	90 e0       	ldi	r25, 0x00	; 0
    b220:	b7 01       	movw	r22, r14
    b222:	0d d4       	rcall	.+2074   	; 0xba3e <fputc>
    b224:	d7 fc       	sbrc	r13, 7
    b226:	06 c0       	rjmp	.+12     	; 0xb234 <vfprintf+0x3b8>
    b228:	c1 14       	cp	r12, r1
    b22a:	d1 04       	cpc	r13, r1
    b22c:	41 f4       	brne	.+16     	; 0xb23e <vfprintf+0x3c2>
    b22e:	ec 85       	ldd	r30, Y+12	; 0x0c
    b230:	e4 ff       	sbrs	r30, 4
    b232:	05 c0       	rjmp	.+10     	; 0xb23e <vfprintf+0x3c2>
    b234:	d1 94       	neg	r13
    b236:	c1 94       	neg	r12
    b238:	d1 08       	sbc	r13, r1
    b23a:	8d e2       	ldi	r24, 0x2D	; 45
    b23c:	01 c0       	rjmp	.+2      	; 0xb240 <vfprintf+0x3c4>
    b23e:	8b e2       	ldi	r24, 0x2B	; 43
    b240:	b7 01       	movw	r22, r14
    b242:	90 e0       	ldi	r25, 0x00	; 0
    b244:	fc d3       	rcall	.+2040   	; 0xba3e <fputc>
    b246:	80 e3       	ldi	r24, 0x30	; 48
    b248:	2a e0       	ldi	r18, 0x0A	; 10
    b24a:	c2 16       	cp	r12, r18
    b24c:	d1 04       	cpc	r13, r1
    b24e:	2c f0       	brlt	.+10     	; 0xb25a <vfprintf+0x3de>
    b250:	8f 5f       	subi	r24, 0xFF	; 255
    b252:	fa e0       	ldi	r31, 0x0A	; 10
    b254:	cf 1a       	sub	r12, r31
    b256:	d1 08       	sbc	r13, r1
    b258:	f7 cf       	rjmp	.-18     	; 0xb248 <vfprintf+0x3cc>
    b25a:	b7 01       	movw	r22, r14
    b25c:	90 e0       	ldi	r25, 0x00	; 0
    b25e:	ef d3       	rcall	.+2014   	; 0xba3e <fputc>
    b260:	b7 01       	movw	r22, r14
    b262:	c6 01       	movw	r24, r12
    b264:	c0 96       	adiw	r24, 0x30	; 48
    b266:	eb d3       	rcall	.+2006   	; 0xba3e <fputc>
    b268:	49 c1       	rjmp	.+658    	; 0xb4fc <vfprintf+0x680>
    b26a:	83 36       	cpi	r24, 0x63	; 99
    b26c:	31 f0       	breq	.+12     	; 0xb27a <vfprintf+0x3fe>
    b26e:	83 37       	cpi	r24, 0x73	; 115
    b270:	79 f0       	breq	.+30     	; 0xb290 <vfprintf+0x414>
    b272:	83 35       	cpi	r24, 0x53	; 83
    b274:	09 f0       	breq	.+2      	; 0xb278 <vfprintf+0x3fc>
    b276:	52 c0       	rjmp	.+164    	; 0xb31c <vfprintf+0x4a0>
    b278:	1f c0       	rjmp	.+62     	; 0xb2b8 <vfprintf+0x43c>
    b27a:	56 01       	movw	r10, r12
    b27c:	32 e0       	ldi	r19, 0x02	; 2
    b27e:	a3 0e       	add	r10, r19
    b280:	b1 1c       	adc	r11, r1
    b282:	f6 01       	movw	r30, r12
    b284:	80 81       	ld	r24, Z
    b286:	89 83       	std	Y+1, r24	; 0x01
    b288:	01 e0       	ldi	r16, 0x01	; 1
    b28a:	10 e0       	ldi	r17, 0x00	; 0
    b28c:	63 01       	movw	r12, r6
    b28e:	11 c0       	rjmp	.+34     	; 0xb2b2 <vfprintf+0x436>
    b290:	56 01       	movw	r10, r12
    b292:	f2 e0       	ldi	r31, 0x02	; 2
    b294:	af 0e       	add	r10, r31
    b296:	b1 1c       	adc	r11, r1
    b298:	f6 01       	movw	r30, r12
    b29a:	c0 80       	ld	r12, Z
    b29c:	d1 80       	ldd	r13, Z+1	; 0x01
    b29e:	96 fe       	sbrs	r9, 6
    b2a0:	03 c0       	rjmp	.+6      	; 0xb2a8 <vfprintf+0x42c>
    b2a2:	61 2f       	mov	r22, r17
    b2a4:	70 e0       	ldi	r23, 0x00	; 0
    b2a6:	02 c0       	rjmp	.+4      	; 0xb2ac <vfprintf+0x430>
    b2a8:	6f ef       	ldi	r22, 0xFF	; 255
    b2aa:	7f ef       	ldi	r23, 0xFF	; 255
    b2ac:	c6 01       	movw	r24, r12
    b2ae:	bc d3       	rcall	.+1912   	; 0xba28 <strnlen>
    b2b0:	8c 01       	movw	r16, r24
    b2b2:	f9 2d       	mov	r31, r9
    b2b4:	ff 77       	andi	r31, 0x7F	; 127
    b2b6:	13 c0       	rjmp	.+38     	; 0xb2de <vfprintf+0x462>
    b2b8:	56 01       	movw	r10, r12
    b2ba:	22 e0       	ldi	r18, 0x02	; 2
    b2bc:	a2 0e       	add	r10, r18
    b2be:	b1 1c       	adc	r11, r1
    b2c0:	f6 01       	movw	r30, r12
    b2c2:	c0 80       	ld	r12, Z
    b2c4:	d1 80       	ldd	r13, Z+1	; 0x01
    b2c6:	96 fe       	sbrs	r9, 6
    b2c8:	03 c0       	rjmp	.+6      	; 0xb2d0 <vfprintf+0x454>
    b2ca:	61 2f       	mov	r22, r17
    b2cc:	70 e0       	ldi	r23, 0x00	; 0
    b2ce:	02 c0       	rjmp	.+4      	; 0xb2d4 <vfprintf+0x458>
    b2d0:	6f ef       	ldi	r22, 0xFF	; 255
    b2d2:	7f ef       	ldi	r23, 0xFF	; 255
    b2d4:	c6 01       	movw	r24, r12
    b2d6:	8d d3       	rcall	.+1818   	; 0xb9f2 <strnlen_P>
    b2d8:	8c 01       	movw	r16, r24
    b2da:	f9 2d       	mov	r31, r9
    b2dc:	f0 68       	ori	r31, 0x80	; 128
    b2de:	9f 2e       	mov	r9, r31
    b2e0:	f3 fd       	sbrc	r31, 3
    b2e2:	18 c0       	rjmp	.+48     	; 0xb314 <vfprintf+0x498>
    b2e4:	85 2d       	mov	r24, r5
    b2e6:	90 e0       	ldi	r25, 0x00	; 0
    b2e8:	08 17       	cp	r16, r24
    b2ea:	19 07       	cpc	r17, r25
    b2ec:	98 f4       	brcc	.+38     	; 0xb314 <vfprintf+0x498>
    b2ee:	b7 01       	movw	r22, r14
    b2f0:	80 e2       	ldi	r24, 0x20	; 32
    b2f2:	90 e0       	ldi	r25, 0x00	; 0
    b2f4:	a4 d3       	rcall	.+1864   	; 0xba3e <fputc>
    b2f6:	5a 94       	dec	r5
    b2f8:	f5 cf       	rjmp	.-22     	; 0xb2e4 <vfprintf+0x468>
    b2fa:	f6 01       	movw	r30, r12
    b2fc:	97 fc       	sbrc	r9, 7
    b2fe:	85 91       	lpm	r24, Z+
    b300:	97 fe       	sbrs	r9, 7
    b302:	81 91       	ld	r24, Z+
    b304:	6f 01       	movw	r12, r30
    b306:	b7 01       	movw	r22, r14
    b308:	90 e0       	ldi	r25, 0x00	; 0
    b30a:	99 d3       	rcall	.+1842   	; 0xba3e <fputc>
    b30c:	51 10       	cpse	r5, r1
    b30e:	5a 94       	dec	r5
    b310:	01 50       	subi	r16, 0x01	; 1
    b312:	11 09       	sbc	r17, r1
    b314:	01 15       	cp	r16, r1
    b316:	11 05       	cpc	r17, r1
    b318:	81 f7       	brne	.-32     	; 0xb2fa <vfprintf+0x47e>
    b31a:	f0 c0       	rjmp	.+480    	; 0xb4fc <vfprintf+0x680>
    b31c:	84 36       	cpi	r24, 0x64	; 100
    b31e:	11 f0       	breq	.+4      	; 0xb324 <vfprintf+0x4a8>
    b320:	89 36       	cpi	r24, 0x69	; 105
    b322:	59 f5       	brne	.+86     	; 0xb37a <vfprintf+0x4fe>
    b324:	56 01       	movw	r10, r12
    b326:	97 fe       	sbrs	r9, 7
    b328:	09 c0       	rjmp	.+18     	; 0xb33c <vfprintf+0x4c0>
    b32a:	24 e0       	ldi	r18, 0x04	; 4
    b32c:	a2 0e       	add	r10, r18
    b32e:	b1 1c       	adc	r11, r1
    b330:	f6 01       	movw	r30, r12
    b332:	60 81       	ld	r22, Z
    b334:	71 81       	ldd	r23, Z+1	; 0x01
    b336:	82 81       	ldd	r24, Z+2	; 0x02
    b338:	93 81       	ldd	r25, Z+3	; 0x03
    b33a:	0a c0       	rjmp	.+20     	; 0xb350 <vfprintf+0x4d4>
    b33c:	f2 e0       	ldi	r31, 0x02	; 2
    b33e:	af 0e       	add	r10, r31
    b340:	b1 1c       	adc	r11, r1
    b342:	f6 01       	movw	r30, r12
    b344:	60 81       	ld	r22, Z
    b346:	71 81       	ldd	r23, Z+1	; 0x01
    b348:	07 2e       	mov	r0, r23
    b34a:	00 0c       	add	r0, r0
    b34c:	88 0b       	sbc	r24, r24
    b34e:	99 0b       	sbc	r25, r25
    b350:	f9 2d       	mov	r31, r9
    b352:	ff 76       	andi	r31, 0x6F	; 111
    b354:	9f 2e       	mov	r9, r31
    b356:	97 ff       	sbrs	r25, 7
    b358:	09 c0       	rjmp	.+18     	; 0xb36c <vfprintf+0x4f0>
    b35a:	90 95       	com	r25
    b35c:	80 95       	com	r24
    b35e:	70 95       	com	r23
    b360:	61 95       	neg	r22
    b362:	7f 4f       	sbci	r23, 0xFF	; 255
    b364:	8f 4f       	sbci	r24, 0xFF	; 255
    b366:	9f 4f       	sbci	r25, 0xFF	; 255
    b368:	f0 68       	ori	r31, 0x80	; 128
    b36a:	9f 2e       	mov	r9, r31
    b36c:	2a e0       	ldi	r18, 0x0A	; 10
    b36e:	30 e0       	ldi	r19, 0x00	; 0
    b370:	a3 01       	movw	r20, r6
    b372:	d9 d3       	rcall	.+1970   	; 0xbb26 <__ultoa_invert>
    b374:	c8 2e       	mov	r12, r24
    b376:	c6 18       	sub	r12, r6
    b378:	3e c0       	rjmp	.+124    	; 0xb3f6 <vfprintf+0x57a>
    b37a:	09 2d       	mov	r16, r9
    b37c:	85 37       	cpi	r24, 0x75	; 117
    b37e:	21 f4       	brne	.+8      	; 0xb388 <vfprintf+0x50c>
    b380:	0f 7e       	andi	r16, 0xEF	; 239
    b382:	2a e0       	ldi	r18, 0x0A	; 10
    b384:	30 e0       	ldi	r19, 0x00	; 0
    b386:	1d c0       	rjmp	.+58     	; 0xb3c2 <vfprintf+0x546>
    b388:	09 7f       	andi	r16, 0xF9	; 249
    b38a:	8f 36       	cpi	r24, 0x6F	; 111
    b38c:	91 f0       	breq	.+36     	; 0xb3b2 <vfprintf+0x536>
    b38e:	18 f4       	brcc	.+6      	; 0xb396 <vfprintf+0x51a>
    b390:	88 35       	cpi	r24, 0x58	; 88
    b392:	59 f0       	breq	.+22     	; 0xb3aa <vfprintf+0x52e>
    b394:	bc c0       	rjmp	.+376    	; 0xb50e <vfprintf+0x692>
    b396:	80 37       	cpi	r24, 0x70	; 112
    b398:	19 f0       	breq	.+6      	; 0xb3a0 <vfprintf+0x524>
    b39a:	88 37       	cpi	r24, 0x78	; 120
    b39c:	11 f0       	breq	.+4      	; 0xb3a2 <vfprintf+0x526>
    b39e:	b7 c0       	rjmp	.+366    	; 0xb50e <vfprintf+0x692>
    b3a0:	00 61       	ori	r16, 0x10	; 16
    b3a2:	04 ff       	sbrs	r16, 4
    b3a4:	09 c0       	rjmp	.+18     	; 0xb3b8 <vfprintf+0x53c>
    b3a6:	04 60       	ori	r16, 0x04	; 4
    b3a8:	07 c0       	rjmp	.+14     	; 0xb3b8 <vfprintf+0x53c>
    b3aa:	94 fe       	sbrs	r9, 4
    b3ac:	08 c0       	rjmp	.+16     	; 0xb3be <vfprintf+0x542>
    b3ae:	06 60       	ori	r16, 0x06	; 6
    b3b0:	06 c0       	rjmp	.+12     	; 0xb3be <vfprintf+0x542>
    b3b2:	28 e0       	ldi	r18, 0x08	; 8
    b3b4:	30 e0       	ldi	r19, 0x00	; 0
    b3b6:	05 c0       	rjmp	.+10     	; 0xb3c2 <vfprintf+0x546>
    b3b8:	20 e1       	ldi	r18, 0x10	; 16
    b3ba:	30 e0       	ldi	r19, 0x00	; 0
    b3bc:	02 c0       	rjmp	.+4      	; 0xb3c2 <vfprintf+0x546>
    b3be:	20 e1       	ldi	r18, 0x10	; 16
    b3c0:	32 e0       	ldi	r19, 0x02	; 2
    b3c2:	56 01       	movw	r10, r12
    b3c4:	07 ff       	sbrs	r16, 7
    b3c6:	09 c0       	rjmp	.+18     	; 0xb3da <vfprintf+0x55e>
    b3c8:	84 e0       	ldi	r24, 0x04	; 4
    b3ca:	a8 0e       	add	r10, r24
    b3cc:	b1 1c       	adc	r11, r1
    b3ce:	f6 01       	movw	r30, r12
    b3d0:	60 81       	ld	r22, Z
    b3d2:	71 81       	ldd	r23, Z+1	; 0x01
    b3d4:	82 81       	ldd	r24, Z+2	; 0x02
    b3d6:	93 81       	ldd	r25, Z+3	; 0x03
    b3d8:	08 c0       	rjmp	.+16     	; 0xb3ea <vfprintf+0x56e>
    b3da:	f2 e0       	ldi	r31, 0x02	; 2
    b3dc:	af 0e       	add	r10, r31
    b3de:	b1 1c       	adc	r11, r1
    b3e0:	f6 01       	movw	r30, r12
    b3e2:	60 81       	ld	r22, Z
    b3e4:	71 81       	ldd	r23, Z+1	; 0x01
    b3e6:	80 e0       	ldi	r24, 0x00	; 0
    b3e8:	90 e0       	ldi	r25, 0x00	; 0
    b3ea:	a3 01       	movw	r20, r6
    b3ec:	9c d3       	rcall	.+1848   	; 0xbb26 <__ultoa_invert>
    b3ee:	c8 2e       	mov	r12, r24
    b3f0:	c6 18       	sub	r12, r6
    b3f2:	0f 77       	andi	r16, 0x7F	; 127
    b3f4:	90 2e       	mov	r9, r16
    b3f6:	96 fe       	sbrs	r9, 6
    b3f8:	0b c0       	rjmp	.+22     	; 0xb410 <vfprintf+0x594>
    b3fa:	09 2d       	mov	r16, r9
    b3fc:	0e 7f       	andi	r16, 0xFE	; 254
    b3fe:	c1 16       	cp	r12, r17
    b400:	50 f4       	brcc	.+20     	; 0xb416 <vfprintf+0x59a>
    b402:	94 fe       	sbrs	r9, 4
    b404:	0a c0       	rjmp	.+20     	; 0xb41a <vfprintf+0x59e>
    b406:	92 fc       	sbrc	r9, 2
    b408:	08 c0       	rjmp	.+16     	; 0xb41a <vfprintf+0x59e>
    b40a:	09 2d       	mov	r16, r9
    b40c:	0e 7e       	andi	r16, 0xEE	; 238
    b40e:	05 c0       	rjmp	.+10     	; 0xb41a <vfprintf+0x59e>
    b410:	dc 2c       	mov	r13, r12
    b412:	09 2d       	mov	r16, r9
    b414:	03 c0       	rjmp	.+6      	; 0xb41c <vfprintf+0x5a0>
    b416:	dc 2c       	mov	r13, r12
    b418:	01 c0       	rjmp	.+2      	; 0xb41c <vfprintf+0x5a0>
    b41a:	d1 2e       	mov	r13, r17
    b41c:	04 ff       	sbrs	r16, 4
    b41e:	0d c0       	rjmp	.+26     	; 0xb43a <vfprintf+0x5be>
    b420:	fe 01       	movw	r30, r28
    b422:	ec 0d       	add	r30, r12
    b424:	f1 1d       	adc	r31, r1
    b426:	80 81       	ld	r24, Z
    b428:	80 33       	cpi	r24, 0x30	; 48
    b42a:	11 f4       	brne	.+4      	; 0xb430 <vfprintf+0x5b4>
    b42c:	09 7e       	andi	r16, 0xE9	; 233
    b42e:	09 c0       	rjmp	.+18     	; 0xb442 <vfprintf+0x5c6>
    b430:	02 ff       	sbrs	r16, 2
    b432:	06 c0       	rjmp	.+12     	; 0xb440 <vfprintf+0x5c4>
    b434:	d3 94       	inc	r13
    b436:	d3 94       	inc	r13
    b438:	04 c0       	rjmp	.+8      	; 0xb442 <vfprintf+0x5c6>
    b43a:	80 2f       	mov	r24, r16
    b43c:	86 78       	andi	r24, 0x86	; 134
    b43e:	09 f0       	breq	.+2      	; 0xb442 <vfprintf+0x5c6>
    b440:	d3 94       	inc	r13
    b442:	03 fd       	sbrc	r16, 3
    b444:	10 c0       	rjmp	.+32     	; 0xb466 <vfprintf+0x5ea>
    b446:	00 ff       	sbrs	r16, 0
    b448:	06 c0       	rjmp	.+12     	; 0xb456 <vfprintf+0x5da>
    b44a:	1c 2d       	mov	r17, r12
    b44c:	d5 14       	cp	r13, r5
    b44e:	78 f4       	brcc	.+30     	; 0xb46e <vfprintf+0x5f2>
    b450:	15 0d       	add	r17, r5
    b452:	1d 19       	sub	r17, r13
    b454:	0c c0       	rjmp	.+24     	; 0xb46e <vfprintf+0x5f2>
    b456:	d5 14       	cp	r13, r5
    b458:	50 f4       	brcc	.+20     	; 0xb46e <vfprintf+0x5f2>
    b45a:	b7 01       	movw	r22, r14
    b45c:	80 e2       	ldi	r24, 0x20	; 32
    b45e:	90 e0       	ldi	r25, 0x00	; 0
    b460:	ee d2       	rcall	.+1500   	; 0xba3e <fputc>
    b462:	d3 94       	inc	r13
    b464:	f8 cf       	rjmp	.-16     	; 0xb456 <vfprintf+0x5da>
    b466:	d5 14       	cp	r13, r5
    b468:	10 f4       	brcc	.+4      	; 0xb46e <vfprintf+0x5f2>
    b46a:	5d 18       	sub	r5, r13
    b46c:	01 c0       	rjmp	.+2      	; 0xb470 <vfprintf+0x5f4>
    b46e:	51 2c       	mov	r5, r1
    b470:	04 ff       	sbrs	r16, 4
    b472:	0f c0       	rjmp	.+30     	; 0xb492 <vfprintf+0x616>
    b474:	b7 01       	movw	r22, r14
    b476:	80 e3       	ldi	r24, 0x30	; 48
    b478:	90 e0       	ldi	r25, 0x00	; 0
    b47a:	e1 d2       	rcall	.+1474   	; 0xba3e <fputc>
    b47c:	02 ff       	sbrs	r16, 2
    b47e:	16 c0       	rjmp	.+44     	; 0xb4ac <vfprintf+0x630>
    b480:	01 fd       	sbrc	r16, 1
    b482:	03 c0       	rjmp	.+6      	; 0xb48a <vfprintf+0x60e>
    b484:	88 e7       	ldi	r24, 0x78	; 120
    b486:	90 e0       	ldi	r25, 0x00	; 0
    b488:	02 c0       	rjmp	.+4      	; 0xb48e <vfprintf+0x612>
    b48a:	88 e5       	ldi	r24, 0x58	; 88
    b48c:	90 e0       	ldi	r25, 0x00	; 0
    b48e:	b7 01       	movw	r22, r14
    b490:	0c c0       	rjmp	.+24     	; 0xb4aa <vfprintf+0x62e>
    b492:	80 2f       	mov	r24, r16
    b494:	86 78       	andi	r24, 0x86	; 134
    b496:	51 f0       	breq	.+20     	; 0xb4ac <vfprintf+0x630>
    b498:	01 ff       	sbrs	r16, 1
    b49a:	02 c0       	rjmp	.+4      	; 0xb4a0 <vfprintf+0x624>
    b49c:	8b e2       	ldi	r24, 0x2B	; 43
    b49e:	01 c0       	rjmp	.+2      	; 0xb4a2 <vfprintf+0x626>
    b4a0:	80 e2       	ldi	r24, 0x20	; 32
    b4a2:	07 fd       	sbrc	r16, 7
    b4a4:	8d e2       	ldi	r24, 0x2D	; 45
    b4a6:	b7 01       	movw	r22, r14
    b4a8:	90 e0       	ldi	r25, 0x00	; 0
    b4aa:	c9 d2       	rcall	.+1426   	; 0xba3e <fputc>
    b4ac:	c1 16       	cp	r12, r17
    b4ae:	30 f4       	brcc	.+12     	; 0xb4bc <vfprintf+0x640>
    b4b0:	b7 01       	movw	r22, r14
    b4b2:	80 e3       	ldi	r24, 0x30	; 48
    b4b4:	90 e0       	ldi	r25, 0x00	; 0
    b4b6:	c3 d2       	rcall	.+1414   	; 0xba3e <fputc>
    b4b8:	11 50       	subi	r17, 0x01	; 1
    b4ba:	f8 cf       	rjmp	.-16     	; 0xb4ac <vfprintf+0x630>
    b4bc:	ca 94       	dec	r12
    b4be:	f3 01       	movw	r30, r6
    b4c0:	ec 0d       	add	r30, r12
    b4c2:	f1 1d       	adc	r31, r1
    b4c4:	80 81       	ld	r24, Z
    b4c6:	b7 01       	movw	r22, r14
    b4c8:	90 e0       	ldi	r25, 0x00	; 0
    b4ca:	b9 d2       	rcall	.+1394   	; 0xba3e <fputc>
    b4cc:	c1 10       	cpse	r12, r1
    b4ce:	f6 cf       	rjmp	.-20     	; 0xb4bc <vfprintf+0x640>
    b4d0:	15 c0       	rjmp	.+42     	; 0xb4fc <vfprintf+0x680>
    b4d2:	f4 e0       	ldi	r31, 0x04	; 4
    b4d4:	f5 15       	cp	r31, r5
    b4d6:	50 f5       	brcc	.+84     	; 0xb52c <vfprintf+0x6b0>
    b4d8:	84 e0       	ldi	r24, 0x04	; 4
    b4da:	58 1a       	sub	r5, r24
    b4dc:	93 fe       	sbrs	r9, 3
    b4de:	1e c0       	rjmp	.+60     	; 0xb51c <vfprintf+0x6a0>
    b4e0:	01 11       	cpse	r16, r1
    b4e2:	25 c0       	rjmp	.+74     	; 0xb52e <vfprintf+0x6b2>
    b4e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    b4e6:	23 ff       	sbrs	r18, 3
    b4e8:	27 c0       	rjmp	.+78     	; 0xb538 <vfprintf+0x6bc>
    b4ea:	0e ee       	ldi	r16, 0xEE	; 238
    b4ec:	18 e0       	ldi	r17, 0x08	; 8
    b4ee:	39 2d       	mov	r19, r9
    b4f0:	30 71       	andi	r19, 0x10	; 16
    b4f2:	93 2e       	mov	r9, r19
    b4f4:	f8 01       	movw	r30, r16
    b4f6:	84 91       	lpm	r24, Z
    b4f8:	81 11       	cpse	r24, r1
    b4fa:	21 c0       	rjmp	.+66     	; 0xb53e <vfprintf+0x6c2>
    b4fc:	55 20       	and	r5, r5
    b4fe:	09 f4       	brne	.+2      	; 0xb502 <vfprintf+0x686>
    b500:	fc cc       	rjmp	.-1544   	; 0xaefa <vfprintf+0x7e>
    b502:	b7 01       	movw	r22, r14
    b504:	80 e2       	ldi	r24, 0x20	; 32
    b506:	90 e0       	ldi	r25, 0x00	; 0
    b508:	9a d2       	rcall	.+1332   	; 0xba3e <fputc>
    b50a:	5a 94       	dec	r5
    b50c:	f7 cf       	rjmp	.-18     	; 0xb4fc <vfprintf+0x680>
    b50e:	f7 01       	movw	r30, r14
    b510:	86 81       	ldd	r24, Z+6	; 0x06
    b512:	97 81       	ldd	r25, Z+7	; 0x07
    b514:	23 c0       	rjmp	.+70     	; 0xb55c <vfprintf+0x6e0>
    b516:	8f ef       	ldi	r24, 0xFF	; 255
    b518:	9f ef       	ldi	r25, 0xFF	; 255
    b51a:	20 c0       	rjmp	.+64     	; 0xb55c <vfprintf+0x6e0>
    b51c:	b7 01       	movw	r22, r14
    b51e:	80 e2       	ldi	r24, 0x20	; 32
    b520:	90 e0       	ldi	r25, 0x00	; 0
    b522:	8d d2       	rcall	.+1306   	; 0xba3e <fputc>
    b524:	5a 94       	dec	r5
    b526:	51 10       	cpse	r5, r1
    b528:	f9 cf       	rjmp	.-14     	; 0xb51c <vfprintf+0x6a0>
    b52a:	da cf       	rjmp	.-76     	; 0xb4e0 <vfprintf+0x664>
    b52c:	51 2c       	mov	r5, r1
    b52e:	b7 01       	movw	r22, r14
    b530:	80 2f       	mov	r24, r16
    b532:	90 e0       	ldi	r25, 0x00	; 0
    b534:	84 d2       	rcall	.+1288   	; 0xba3e <fputc>
    b536:	d6 cf       	rjmp	.-84     	; 0xb4e4 <vfprintf+0x668>
    b538:	02 ef       	ldi	r16, 0xF2	; 242
    b53a:	18 e0       	ldi	r17, 0x08	; 8
    b53c:	d8 cf       	rjmp	.-80     	; 0xb4ee <vfprintf+0x672>
    b53e:	91 10       	cpse	r9, r1
    b540:	80 52       	subi	r24, 0x20	; 32
    b542:	b7 01       	movw	r22, r14
    b544:	90 e0       	ldi	r25, 0x00	; 0
    b546:	7b d2       	rcall	.+1270   	; 0xba3e <fputc>
    b548:	0f 5f       	subi	r16, 0xFF	; 255
    b54a:	1f 4f       	sbci	r17, 0xFF	; 255
    b54c:	d3 cf       	rjmp	.-90     	; 0xb4f4 <vfprintf+0x678>
    b54e:	23 e0       	ldi	r18, 0x03	; 3
    b550:	25 15       	cp	r18, r5
    b552:	10 f4       	brcc	.+4      	; 0xb558 <vfprintf+0x6dc>
    b554:	83 e0       	ldi	r24, 0x03	; 3
    b556:	c1 cf       	rjmp	.-126    	; 0xb4da <vfprintf+0x65e>
    b558:	51 2c       	mov	r5, r1
    b55a:	c4 cf       	rjmp	.-120    	; 0xb4e4 <vfprintf+0x668>
    b55c:	60 96       	adiw	r28, 0x10	; 16
    b55e:	0f b6       	in	r0, 0x3f	; 63
    b560:	f8 94       	cli
    b562:	de bf       	out	0x3e, r29	; 62
    b564:	0f be       	out	0x3f, r0	; 63
    b566:	cd bf       	out	0x3d, r28	; 61
    b568:	df 91       	pop	r29
    b56a:	cf 91       	pop	r28
    b56c:	1f 91       	pop	r17
    b56e:	0f 91       	pop	r16
    b570:	ff 90       	pop	r15
    b572:	ef 90       	pop	r14
    b574:	df 90       	pop	r13
    b576:	cf 90       	pop	r12
    b578:	bf 90       	pop	r11
    b57a:	af 90       	pop	r10
    b57c:	9f 90       	pop	r9
    b57e:	8f 90       	pop	r8
    b580:	7f 90       	pop	r7
    b582:	6f 90       	pop	r6
    b584:	5f 90       	pop	r5
    b586:	4f 90       	pop	r4
    b588:	3f 90       	pop	r3
    b58a:	2f 90       	pop	r2
    b58c:	08 95       	ret

0000b58e <__udivmodsi4>:
    b58e:	a1 e2       	ldi	r26, 0x21	; 33
    b590:	1a 2e       	mov	r1, r26
    b592:	aa 1b       	sub	r26, r26
    b594:	bb 1b       	sub	r27, r27
    b596:	fd 01       	movw	r30, r26
    b598:	0d c0       	rjmp	.+26     	; 0xb5b4 <__udivmodsi4_ep>

0000b59a <__udivmodsi4_loop>:
    b59a:	aa 1f       	adc	r26, r26
    b59c:	bb 1f       	adc	r27, r27
    b59e:	ee 1f       	adc	r30, r30
    b5a0:	ff 1f       	adc	r31, r31
    b5a2:	a2 17       	cp	r26, r18
    b5a4:	b3 07       	cpc	r27, r19
    b5a6:	e4 07       	cpc	r30, r20
    b5a8:	f5 07       	cpc	r31, r21
    b5aa:	20 f0       	brcs	.+8      	; 0xb5b4 <__udivmodsi4_ep>
    b5ac:	a2 1b       	sub	r26, r18
    b5ae:	b3 0b       	sbc	r27, r19
    b5b0:	e4 0b       	sbc	r30, r20
    b5b2:	f5 0b       	sbc	r31, r21

0000b5b4 <__udivmodsi4_ep>:
    b5b4:	66 1f       	adc	r22, r22
    b5b6:	77 1f       	adc	r23, r23
    b5b8:	88 1f       	adc	r24, r24
    b5ba:	99 1f       	adc	r25, r25
    b5bc:	1a 94       	dec	r1
    b5be:	69 f7       	brne	.-38     	; 0xb59a <__udivmodsi4_loop>
    b5c0:	60 95       	com	r22
    b5c2:	70 95       	com	r23
    b5c4:	80 95       	com	r24
    b5c6:	90 95       	com	r25
    b5c8:	9b 01       	movw	r18, r22
    b5ca:	ac 01       	movw	r20, r24
    b5cc:	bd 01       	movw	r22, r26
    b5ce:	cf 01       	movw	r24, r30
    b5d0:	08 95       	ret

0000b5d2 <__tablejump2__>:
    b5d2:	ee 0f       	add	r30, r30
    b5d4:	ff 1f       	adc	r31, r31
    b5d6:	88 1f       	adc	r24, r24
    b5d8:	8b bf       	out	0x3b, r24	; 59
    b5da:	07 90       	elpm	r0, Z+
    b5dc:	f6 91       	elpm	r31, Z
    b5de:	e0 2d       	mov	r30, r0
    b5e0:	19 94       	eijmp

0000b5e2 <__umulhisi3>:
    b5e2:	a2 9f       	mul	r26, r18
    b5e4:	b0 01       	movw	r22, r0
    b5e6:	b3 9f       	mul	r27, r19
    b5e8:	c0 01       	movw	r24, r0
    b5ea:	a3 9f       	mul	r26, r19
    b5ec:	70 0d       	add	r23, r0
    b5ee:	81 1d       	adc	r24, r1
    b5f0:	11 24       	eor	r1, r1
    b5f2:	91 1d       	adc	r25, r1
    b5f4:	b2 9f       	mul	r27, r18
    b5f6:	70 0d       	add	r23, r0
    b5f8:	81 1d       	adc	r24, r1
    b5fa:	11 24       	eor	r1, r1
    b5fc:	91 1d       	adc	r25, r1
    b5fe:	08 95       	ret

0000b600 <malloc>:
    b600:	0f 93       	push	r16
    b602:	1f 93       	push	r17
    b604:	cf 93       	push	r28
    b606:	df 93       	push	r29
    b608:	82 30       	cpi	r24, 0x02	; 2
    b60a:	91 05       	cpc	r25, r1
    b60c:	10 f4       	brcc	.+4      	; 0xb612 <malloc+0x12>
    b60e:	82 e0       	ldi	r24, 0x02	; 2
    b610:	90 e0       	ldi	r25, 0x00	; 0
    b612:	e0 91 b3 0a 	lds	r30, 0x0AB3	; 0x800ab3 <__flp>
    b616:	f0 91 b4 0a 	lds	r31, 0x0AB4	; 0x800ab4 <__flp+0x1>
    b61a:	20 e0       	ldi	r18, 0x00	; 0
    b61c:	30 e0       	ldi	r19, 0x00	; 0
    b61e:	a0 e0       	ldi	r26, 0x00	; 0
    b620:	b0 e0       	ldi	r27, 0x00	; 0
    b622:	30 97       	sbiw	r30, 0x00	; 0
    b624:	19 f1       	breq	.+70     	; 0xb66c <malloc+0x6c>
    b626:	40 81       	ld	r20, Z
    b628:	51 81       	ldd	r21, Z+1	; 0x01
    b62a:	02 81       	ldd	r16, Z+2	; 0x02
    b62c:	13 81       	ldd	r17, Z+3	; 0x03
    b62e:	48 17       	cp	r20, r24
    b630:	59 07       	cpc	r21, r25
    b632:	c8 f0       	brcs	.+50     	; 0xb666 <malloc+0x66>
    b634:	84 17       	cp	r24, r20
    b636:	95 07       	cpc	r25, r21
    b638:	69 f4       	brne	.+26     	; 0xb654 <malloc+0x54>
    b63a:	10 97       	sbiw	r26, 0x00	; 0
    b63c:	31 f0       	breq	.+12     	; 0xb64a <malloc+0x4a>
    b63e:	12 96       	adiw	r26, 0x02	; 2
    b640:	0c 93       	st	X, r16
    b642:	12 97       	sbiw	r26, 0x02	; 2
    b644:	13 96       	adiw	r26, 0x03	; 3
    b646:	1c 93       	st	X, r17
    b648:	27 c0       	rjmp	.+78     	; 0xb698 <malloc+0x98>
    b64a:	00 93 b3 0a 	sts	0x0AB3, r16	; 0x800ab3 <__flp>
    b64e:	10 93 b4 0a 	sts	0x0AB4, r17	; 0x800ab4 <__flp+0x1>
    b652:	22 c0       	rjmp	.+68     	; 0xb698 <malloc+0x98>
    b654:	21 15       	cp	r18, r1
    b656:	31 05       	cpc	r19, r1
    b658:	19 f0       	breq	.+6      	; 0xb660 <malloc+0x60>
    b65a:	42 17       	cp	r20, r18
    b65c:	53 07       	cpc	r21, r19
    b65e:	18 f4       	brcc	.+6      	; 0xb666 <malloc+0x66>
    b660:	9a 01       	movw	r18, r20
    b662:	bd 01       	movw	r22, r26
    b664:	ef 01       	movw	r28, r30
    b666:	df 01       	movw	r26, r30
    b668:	f8 01       	movw	r30, r16
    b66a:	db cf       	rjmp	.-74     	; 0xb622 <malloc+0x22>
    b66c:	21 15       	cp	r18, r1
    b66e:	31 05       	cpc	r19, r1
    b670:	f9 f0       	breq	.+62     	; 0xb6b0 <malloc+0xb0>
    b672:	28 1b       	sub	r18, r24
    b674:	39 0b       	sbc	r19, r25
    b676:	24 30       	cpi	r18, 0x04	; 4
    b678:	31 05       	cpc	r19, r1
    b67a:	80 f4       	brcc	.+32     	; 0xb69c <malloc+0x9c>
    b67c:	8a 81       	ldd	r24, Y+2	; 0x02
    b67e:	9b 81       	ldd	r25, Y+3	; 0x03
    b680:	61 15       	cp	r22, r1
    b682:	71 05       	cpc	r23, r1
    b684:	21 f0       	breq	.+8      	; 0xb68e <malloc+0x8e>
    b686:	fb 01       	movw	r30, r22
    b688:	93 83       	std	Z+3, r25	; 0x03
    b68a:	82 83       	std	Z+2, r24	; 0x02
    b68c:	04 c0       	rjmp	.+8      	; 0xb696 <malloc+0x96>
    b68e:	90 93 b4 0a 	sts	0x0AB4, r25	; 0x800ab4 <__flp+0x1>
    b692:	80 93 b3 0a 	sts	0x0AB3, r24	; 0x800ab3 <__flp>
    b696:	fe 01       	movw	r30, r28
    b698:	32 96       	adiw	r30, 0x02	; 2
    b69a:	44 c0       	rjmp	.+136    	; 0xb724 <malloc+0x124>
    b69c:	fe 01       	movw	r30, r28
    b69e:	e2 0f       	add	r30, r18
    b6a0:	f3 1f       	adc	r31, r19
    b6a2:	81 93       	st	Z+, r24
    b6a4:	91 93       	st	Z+, r25
    b6a6:	22 50       	subi	r18, 0x02	; 2
    b6a8:	31 09       	sbc	r19, r1
    b6aa:	39 83       	std	Y+1, r19	; 0x01
    b6ac:	28 83       	st	Y, r18
    b6ae:	3a c0       	rjmp	.+116    	; 0xb724 <malloc+0x124>
    b6b0:	20 91 b1 0a 	lds	r18, 0x0AB1	; 0x800ab1 <__brkval>
    b6b4:	30 91 b2 0a 	lds	r19, 0x0AB2	; 0x800ab2 <__brkval+0x1>
    b6b8:	23 2b       	or	r18, r19
    b6ba:	41 f4       	brne	.+16     	; 0xb6cc <malloc+0xcc>
    b6bc:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    b6c0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    b6c4:	30 93 b2 0a 	sts	0x0AB2, r19	; 0x800ab2 <__brkval+0x1>
    b6c8:	20 93 b1 0a 	sts	0x0AB1, r18	; 0x800ab1 <__brkval>
    b6cc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    b6d0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    b6d4:	21 15       	cp	r18, r1
    b6d6:	31 05       	cpc	r19, r1
    b6d8:	41 f4       	brne	.+16     	; 0xb6ea <malloc+0xea>
    b6da:	2d b7       	in	r18, 0x3d	; 61
    b6dc:	3e b7       	in	r19, 0x3e	; 62
    b6de:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    b6e2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    b6e6:	24 1b       	sub	r18, r20
    b6e8:	35 0b       	sbc	r19, r21
    b6ea:	e0 91 b1 0a 	lds	r30, 0x0AB1	; 0x800ab1 <__brkval>
    b6ee:	f0 91 b2 0a 	lds	r31, 0x0AB2	; 0x800ab2 <__brkval+0x1>
    b6f2:	e2 17       	cp	r30, r18
    b6f4:	f3 07       	cpc	r31, r19
    b6f6:	a0 f4       	brcc	.+40     	; 0xb720 <malloc+0x120>
    b6f8:	2e 1b       	sub	r18, r30
    b6fa:	3f 0b       	sbc	r19, r31
    b6fc:	28 17       	cp	r18, r24
    b6fe:	39 07       	cpc	r19, r25
    b700:	78 f0       	brcs	.+30     	; 0xb720 <malloc+0x120>
    b702:	ac 01       	movw	r20, r24
    b704:	4e 5f       	subi	r20, 0xFE	; 254
    b706:	5f 4f       	sbci	r21, 0xFF	; 255
    b708:	24 17       	cp	r18, r20
    b70a:	35 07       	cpc	r19, r21
    b70c:	48 f0       	brcs	.+18     	; 0xb720 <malloc+0x120>
    b70e:	4e 0f       	add	r20, r30
    b710:	5f 1f       	adc	r21, r31
    b712:	50 93 b2 0a 	sts	0x0AB2, r21	; 0x800ab2 <__brkval+0x1>
    b716:	40 93 b1 0a 	sts	0x0AB1, r20	; 0x800ab1 <__brkval>
    b71a:	81 93       	st	Z+, r24
    b71c:	91 93       	st	Z+, r25
    b71e:	02 c0       	rjmp	.+4      	; 0xb724 <malloc+0x124>
    b720:	e0 e0       	ldi	r30, 0x00	; 0
    b722:	f0 e0       	ldi	r31, 0x00	; 0
    b724:	cf 01       	movw	r24, r30
    b726:	df 91       	pop	r29
    b728:	cf 91       	pop	r28
    b72a:	1f 91       	pop	r17
    b72c:	0f 91       	pop	r16
    b72e:	08 95       	ret

0000b730 <free>:
    b730:	cf 93       	push	r28
    b732:	df 93       	push	r29
    b734:	00 97       	sbiw	r24, 0x00	; 0
    b736:	09 f4       	brne	.+2      	; 0xb73a <free+0xa>
    b738:	81 c0       	rjmp	.+258    	; 0xb83c <free+0x10c>
    b73a:	fc 01       	movw	r30, r24
    b73c:	32 97       	sbiw	r30, 0x02	; 2
    b73e:	13 82       	std	Z+3, r1	; 0x03
    b740:	12 82       	std	Z+2, r1	; 0x02
    b742:	a0 91 b3 0a 	lds	r26, 0x0AB3	; 0x800ab3 <__flp>
    b746:	b0 91 b4 0a 	lds	r27, 0x0AB4	; 0x800ab4 <__flp+0x1>
    b74a:	10 97       	sbiw	r26, 0x00	; 0
    b74c:	81 f4       	brne	.+32     	; 0xb76e <free+0x3e>
    b74e:	20 81       	ld	r18, Z
    b750:	31 81       	ldd	r19, Z+1	; 0x01
    b752:	82 0f       	add	r24, r18
    b754:	93 1f       	adc	r25, r19
    b756:	20 91 b1 0a 	lds	r18, 0x0AB1	; 0x800ab1 <__brkval>
    b75a:	30 91 b2 0a 	lds	r19, 0x0AB2	; 0x800ab2 <__brkval+0x1>
    b75e:	28 17       	cp	r18, r24
    b760:	39 07       	cpc	r19, r25
    b762:	51 f5       	brne	.+84     	; 0xb7b8 <free+0x88>
    b764:	f0 93 b2 0a 	sts	0x0AB2, r31	; 0x800ab2 <__brkval+0x1>
    b768:	e0 93 b1 0a 	sts	0x0AB1, r30	; 0x800ab1 <__brkval>
    b76c:	67 c0       	rjmp	.+206    	; 0xb83c <free+0x10c>
    b76e:	ed 01       	movw	r28, r26
    b770:	20 e0       	ldi	r18, 0x00	; 0
    b772:	30 e0       	ldi	r19, 0x00	; 0
    b774:	ce 17       	cp	r28, r30
    b776:	df 07       	cpc	r29, r31
    b778:	40 f4       	brcc	.+16     	; 0xb78a <free+0x5a>
    b77a:	4a 81       	ldd	r20, Y+2	; 0x02
    b77c:	5b 81       	ldd	r21, Y+3	; 0x03
    b77e:	9e 01       	movw	r18, r28
    b780:	41 15       	cp	r20, r1
    b782:	51 05       	cpc	r21, r1
    b784:	f1 f0       	breq	.+60     	; 0xb7c2 <free+0x92>
    b786:	ea 01       	movw	r28, r20
    b788:	f5 cf       	rjmp	.-22     	; 0xb774 <free+0x44>
    b78a:	d3 83       	std	Z+3, r29	; 0x03
    b78c:	c2 83       	std	Z+2, r28	; 0x02
    b78e:	40 81       	ld	r20, Z
    b790:	51 81       	ldd	r21, Z+1	; 0x01
    b792:	84 0f       	add	r24, r20
    b794:	95 1f       	adc	r25, r21
    b796:	c8 17       	cp	r28, r24
    b798:	d9 07       	cpc	r29, r25
    b79a:	59 f4       	brne	.+22     	; 0xb7b2 <free+0x82>
    b79c:	88 81       	ld	r24, Y
    b79e:	99 81       	ldd	r25, Y+1	; 0x01
    b7a0:	84 0f       	add	r24, r20
    b7a2:	95 1f       	adc	r25, r21
    b7a4:	02 96       	adiw	r24, 0x02	; 2
    b7a6:	91 83       	std	Z+1, r25	; 0x01
    b7a8:	80 83       	st	Z, r24
    b7aa:	8a 81       	ldd	r24, Y+2	; 0x02
    b7ac:	9b 81       	ldd	r25, Y+3	; 0x03
    b7ae:	93 83       	std	Z+3, r25	; 0x03
    b7b0:	82 83       	std	Z+2, r24	; 0x02
    b7b2:	21 15       	cp	r18, r1
    b7b4:	31 05       	cpc	r19, r1
    b7b6:	29 f4       	brne	.+10     	; 0xb7c2 <free+0x92>
    b7b8:	f0 93 b4 0a 	sts	0x0AB4, r31	; 0x800ab4 <__flp+0x1>
    b7bc:	e0 93 b3 0a 	sts	0x0AB3, r30	; 0x800ab3 <__flp>
    b7c0:	3d c0       	rjmp	.+122    	; 0xb83c <free+0x10c>
    b7c2:	e9 01       	movw	r28, r18
    b7c4:	fb 83       	std	Y+3, r31	; 0x03
    b7c6:	ea 83       	std	Y+2, r30	; 0x02
    b7c8:	49 91       	ld	r20, Y+
    b7ca:	59 91       	ld	r21, Y+
    b7cc:	c4 0f       	add	r28, r20
    b7ce:	d5 1f       	adc	r29, r21
    b7d0:	ec 17       	cp	r30, r28
    b7d2:	fd 07       	cpc	r31, r29
    b7d4:	61 f4       	brne	.+24     	; 0xb7ee <free+0xbe>
    b7d6:	80 81       	ld	r24, Z
    b7d8:	91 81       	ldd	r25, Z+1	; 0x01
    b7da:	84 0f       	add	r24, r20
    b7dc:	95 1f       	adc	r25, r21
    b7de:	02 96       	adiw	r24, 0x02	; 2
    b7e0:	e9 01       	movw	r28, r18
    b7e2:	99 83       	std	Y+1, r25	; 0x01
    b7e4:	88 83       	st	Y, r24
    b7e6:	82 81       	ldd	r24, Z+2	; 0x02
    b7e8:	93 81       	ldd	r25, Z+3	; 0x03
    b7ea:	9b 83       	std	Y+3, r25	; 0x03
    b7ec:	8a 83       	std	Y+2, r24	; 0x02
    b7ee:	e0 e0       	ldi	r30, 0x00	; 0
    b7f0:	f0 e0       	ldi	r31, 0x00	; 0
    b7f2:	12 96       	adiw	r26, 0x02	; 2
    b7f4:	8d 91       	ld	r24, X+
    b7f6:	9c 91       	ld	r25, X
    b7f8:	13 97       	sbiw	r26, 0x03	; 3
    b7fa:	00 97       	sbiw	r24, 0x00	; 0
    b7fc:	19 f0       	breq	.+6      	; 0xb804 <free+0xd4>
    b7fe:	fd 01       	movw	r30, r26
    b800:	dc 01       	movw	r26, r24
    b802:	f7 cf       	rjmp	.-18     	; 0xb7f2 <free+0xc2>
    b804:	8d 91       	ld	r24, X+
    b806:	9c 91       	ld	r25, X
    b808:	11 97       	sbiw	r26, 0x01	; 1
    b80a:	9d 01       	movw	r18, r26
    b80c:	2e 5f       	subi	r18, 0xFE	; 254
    b80e:	3f 4f       	sbci	r19, 0xFF	; 255
    b810:	82 0f       	add	r24, r18
    b812:	93 1f       	adc	r25, r19
    b814:	20 91 b1 0a 	lds	r18, 0x0AB1	; 0x800ab1 <__brkval>
    b818:	30 91 b2 0a 	lds	r19, 0x0AB2	; 0x800ab2 <__brkval+0x1>
    b81c:	28 17       	cp	r18, r24
    b81e:	39 07       	cpc	r19, r25
    b820:	69 f4       	brne	.+26     	; 0xb83c <free+0x10c>
    b822:	30 97       	sbiw	r30, 0x00	; 0
    b824:	29 f4       	brne	.+10     	; 0xb830 <free+0x100>
    b826:	10 92 b4 0a 	sts	0x0AB4, r1	; 0x800ab4 <__flp+0x1>
    b82a:	10 92 b3 0a 	sts	0x0AB3, r1	; 0x800ab3 <__flp>
    b82e:	02 c0       	rjmp	.+4      	; 0xb834 <free+0x104>
    b830:	13 82       	std	Z+3, r1	; 0x03
    b832:	12 82       	std	Z+2, r1	; 0x02
    b834:	b0 93 b2 0a 	sts	0x0AB2, r27	; 0x800ab2 <__brkval+0x1>
    b838:	a0 93 b1 0a 	sts	0x0AB1, r26	; 0x800ab1 <__brkval>
    b83c:	df 91       	pop	r29
    b83e:	cf 91       	pop	r28
    b840:	08 95       	ret

0000b842 <__ftoa_engine>:
    b842:	28 30       	cpi	r18, 0x08	; 8
    b844:	08 f0       	brcs	.+2      	; 0xb848 <__ftoa_engine+0x6>
    b846:	27 e0       	ldi	r18, 0x07	; 7
    b848:	33 27       	eor	r19, r19
    b84a:	da 01       	movw	r26, r20
    b84c:	99 0f       	add	r25, r25
    b84e:	31 1d       	adc	r19, r1
    b850:	87 fd       	sbrc	r24, 7
    b852:	91 60       	ori	r25, 0x01	; 1
    b854:	00 96       	adiw	r24, 0x00	; 0
    b856:	61 05       	cpc	r22, r1
    b858:	71 05       	cpc	r23, r1
    b85a:	39 f4       	brne	.+14     	; 0xb86a <__ftoa_engine+0x28>
    b85c:	32 60       	ori	r19, 0x02	; 2
    b85e:	2e 5f       	subi	r18, 0xFE	; 254
    b860:	3d 93       	st	X+, r19
    b862:	30 e3       	ldi	r19, 0x30	; 48
    b864:	2a 95       	dec	r18
    b866:	e1 f7       	brne	.-8      	; 0xb860 <__ftoa_engine+0x1e>
    b868:	08 95       	ret
    b86a:	9f 3f       	cpi	r25, 0xFF	; 255
    b86c:	30 f0       	brcs	.+12     	; 0xb87a <__ftoa_engine+0x38>
    b86e:	80 38       	cpi	r24, 0x80	; 128
    b870:	71 05       	cpc	r23, r1
    b872:	61 05       	cpc	r22, r1
    b874:	09 f0       	breq	.+2      	; 0xb878 <__ftoa_engine+0x36>
    b876:	3c 5f       	subi	r19, 0xFC	; 252
    b878:	3c 5f       	subi	r19, 0xFC	; 252
    b87a:	3d 93       	st	X+, r19
    b87c:	91 30       	cpi	r25, 0x01	; 1
    b87e:	08 f0       	brcs	.+2      	; 0xb882 <__ftoa_engine+0x40>
    b880:	80 68       	ori	r24, 0x80	; 128
    b882:	91 1d       	adc	r25, r1
    b884:	df 93       	push	r29
    b886:	cf 93       	push	r28
    b888:	1f 93       	push	r17
    b88a:	0f 93       	push	r16
    b88c:	ff 92       	push	r15
    b88e:	ef 92       	push	r14
    b890:	19 2f       	mov	r17, r25
    b892:	98 7f       	andi	r25, 0xF8	; 248
    b894:	96 95       	lsr	r25
    b896:	e9 2f       	mov	r30, r25
    b898:	96 95       	lsr	r25
    b89a:	96 95       	lsr	r25
    b89c:	e9 0f       	add	r30, r25
    b89e:	ff 27       	eor	r31, r31
    b8a0:	e0 5b       	subi	r30, 0xB0	; 176
    b8a2:	f6 4f       	sbci	r31, 0xF6	; 246
    b8a4:	99 27       	eor	r25, r25
    b8a6:	33 27       	eor	r19, r19
    b8a8:	ee 24       	eor	r14, r14
    b8aa:	ff 24       	eor	r15, r15
    b8ac:	a7 01       	movw	r20, r14
    b8ae:	e7 01       	movw	r28, r14
    b8b0:	05 90       	lpm	r0, Z+
    b8b2:	08 94       	sec
    b8b4:	07 94       	ror	r0
    b8b6:	28 f4       	brcc	.+10     	; 0xb8c2 <__ftoa_engine+0x80>
    b8b8:	36 0f       	add	r19, r22
    b8ba:	e7 1e       	adc	r14, r23
    b8bc:	f8 1e       	adc	r15, r24
    b8be:	49 1f       	adc	r20, r25
    b8c0:	51 1d       	adc	r21, r1
    b8c2:	66 0f       	add	r22, r22
    b8c4:	77 1f       	adc	r23, r23
    b8c6:	88 1f       	adc	r24, r24
    b8c8:	99 1f       	adc	r25, r25
    b8ca:	06 94       	lsr	r0
    b8cc:	a1 f7       	brne	.-24     	; 0xb8b6 <__ftoa_engine+0x74>
    b8ce:	05 90       	lpm	r0, Z+
    b8d0:	07 94       	ror	r0
    b8d2:	28 f4       	brcc	.+10     	; 0xb8de <__ftoa_engine+0x9c>
    b8d4:	e7 0e       	add	r14, r23
    b8d6:	f8 1e       	adc	r15, r24
    b8d8:	49 1f       	adc	r20, r25
    b8da:	56 1f       	adc	r21, r22
    b8dc:	c1 1d       	adc	r28, r1
    b8de:	77 0f       	add	r23, r23
    b8e0:	88 1f       	adc	r24, r24
    b8e2:	99 1f       	adc	r25, r25
    b8e4:	66 1f       	adc	r22, r22
    b8e6:	06 94       	lsr	r0
    b8e8:	a1 f7       	brne	.-24     	; 0xb8d2 <__ftoa_engine+0x90>
    b8ea:	05 90       	lpm	r0, Z+
    b8ec:	07 94       	ror	r0
    b8ee:	28 f4       	brcc	.+10     	; 0xb8fa <__ftoa_engine+0xb8>
    b8f0:	f8 0e       	add	r15, r24
    b8f2:	49 1f       	adc	r20, r25
    b8f4:	56 1f       	adc	r21, r22
    b8f6:	c7 1f       	adc	r28, r23
    b8f8:	d1 1d       	adc	r29, r1
    b8fa:	88 0f       	add	r24, r24
    b8fc:	99 1f       	adc	r25, r25
    b8fe:	66 1f       	adc	r22, r22
    b900:	77 1f       	adc	r23, r23
    b902:	06 94       	lsr	r0
    b904:	a1 f7       	brne	.-24     	; 0xb8ee <__ftoa_engine+0xac>
    b906:	05 90       	lpm	r0, Z+
    b908:	07 94       	ror	r0
    b90a:	20 f4       	brcc	.+8      	; 0xb914 <__ftoa_engine+0xd2>
    b90c:	49 0f       	add	r20, r25
    b90e:	56 1f       	adc	r21, r22
    b910:	c7 1f       	adc	r28, r23
    b912:	d8 1f       	adc	r29, r24
    b914:	99 0f       	add	r25, r25
    b916:	66 1f       	adc	r22, r22
    b918:	77 1f       	adc	r23, r23
    b91a:	88 1f       	adc	r24, r24
    b91c:	06 94       	lsr	r0
    b91e:	a9 f7       	brne	.-22     	; 0xb90a <__ftoa_engine+0xc8>
    b920:	84 91       	lpm	r24, Z
    b922:	10 95       	com	r17
    b924:	17 70       	andi	r17, 0x07	; 7
    b926:	41 f0       	breq	.+16     	; 0xb938 <__ftoa_engine+0xf6>
    b928:	d6 95       	lsr	r29
    b92a:	c7 95       	ror	r28
    b92c:	57 95       	ror	r21
    b92e:	47 95       	ror	r20
    b930:	f7 94       	ror	r15
    b932:	e7 94       	ror	r14
    b934:	1a 95       	dec	r17
    b936:	c1 f7       	brne	.-16     	; 0xb928 <__ftoa_engine+0xe6>
    b938:	e6 ef       	ldi	r30, 0xF6	; 246
    b93a:	f8 e0       	ldi	r31, 0x08	; 8
    b93c:	68 94       	set
    b93e:	15 90       	lpm	r1, Z+
    b940:	15 91       	lpm	r17, Z+
    b942:	35 91       	lpm	r19, Z+
    b944:	65 91       	lpm	r22, Z+
    b946:	95 91       	lpm	r25, Z+
    b948:	05 90       	lpm	r0, Z+
    b94a:	7f e2       	ldi	r23, 0x2F	; 47
    b94c:	73 95       	inc	r23
    b94e:	e1 18       	sub	r14, r1
    b950:	f1 0a       	sbc	r15, r17
    b952:	43 0b       	sbc	r20, r19
    b954:	56 0b       	sbc	r21, r22
    b956:	c9 0b       	sbc	r28, r25
    b958:	d0 09       	sbc	r29, r0
    b95a:	c0 f7       	brcc	.-16     	; 0xb94c <__ftoa_engine+0x10a>
    b95c:	e1 0c       	add	r14, r1
    b95e:	f1 1e       	adc	r15, r17
    b960:	43 1f       	adc	r20, r19
    b962:	56 1f       	adc	r21, r22
    b964:	c9 1f       	adc	r28, r25
    b966:	d0 1d       	adc	r29, r0
    b968:	7e f4       	brtc	.+30     	; 0xb988 <__ftoa_engine+0x146>
    b96a:	70 33       	cpi	r23, 0x30	; 48
    b96c:	11 f4       	brne	.+4      	; 0xb972 <__ftoa_engine+0x130>
    b96e:	8a 95       	dec	r24
    b970:	e6 cf       	rjmp	.-52     	; 0xb93e <__ftoa_engine+0xfc>
    b972:	e8 94       	clt
    b974:	01 50       	subi	r16, 0x01	; 1
    b976:	30 f0       	brcs	.+12     	; 0xb984 <__ftoa_engine+0x142>
    b978:	08 0f       	add	r16, r24
    b97a:	0a f4       	brpl	.+2      	; 0xb97e <__ftoa_engine+0x13c>
    b97c:	00 27       	eor	r16, r16
    b97e:	02 17       	cp	r16, r18
    b980:	08 f4       	brcc	.+2      	; 0xb984 <__ftoa_engine+0x142>
    b982:	20 2f       	mov	r18, r16
    b984:	23 95       	inc	r18
    b986:	02 2f       	mov	r16, r18
    b988:	7a 33       	cpi	r23, 0x3A	; 58
    b98a:	28 f0       	brcs	.+10     	; 0xb996 <__ftoa_engine+0x154>
    b98c:	79 e3       	ldi	r23, 0x39	; 57
    b98e:	7d 93       	st	X+, r23
    b990:	2a 95       	dec	r18
    b992:	e9 f7       	brne	.-6      	; 0xb98e <__ftoa_engine+0x14c>
    b994:	10 c0       	rjmp	.+32     	; 0xb9b6 <__ftoa_engine+0x174>
    b996:	7d 93       	st	X+, r23
    b998:	2a 95       	dec	r18
    b99a:	89 f6       	brne	.-94     	; 0xb93e <__ftoa_engine+0xfc>
    b99c:	06 94       	lsr	r0
    b99e:	97 95       	ror	r25
    b9a0:	67 95       	ror	r22
    b9a2:	37 95       	ror	r19
    b9a4:	17 95       	ror	r17
    b9a6:	17 94       	ror	r1
    b9a8:	e1 18       	sub	r14, r1
    b9aa:	f1 0a       	sbc	r15, r17
    b9ac:	43 0b       	sbc	r20, r19
    b9ae:	56 0b       	sbc	r21, r22
    b9b0:	c9 0b       	sbc	r28, r25
    b9b2:	d0 09       	sbc	r29, r0
    b9b4:	98 f0       	brcs	.+38     	; 0xb9dc <__ftoa_engine+0x19a>
    b9b6:	23 95       	inc	r18
    b9b8:	7e 91       	ld	r23, -X
    b9ba:	73 95       	inc	r23
    b9bc:	7a 33       	cpi	r23, 0x3A	; 58
    b9be:	08 f0       	brcs	.+2      	; 0xb9c2 <__ftoa_engine+0x180>
    b9c0:	70 e3       	ldi	r23, 0x30	; 48
    b9c2:	7c 93       	st	X, r23
    b9c4:	20 13       	cpse	r18, r16
    b9c6:	b8 f7       	brcc	.-18     	; 0xb9b6 <__ftoa_engine+0x174>
    b9c8:	7e 91       	ld	r23, -X
    b9ca:	70 61       	ori	r23, 0x10	; 16
    b9cc:	7d 93       	st	X+, r23
    b9ce:	30 f0       	brcs	.+12     	; 0xb9dc <__ftoa_engine+0x19a>
    b9d0:	83 95       	inc	r24
    b9d2:	71 e3       	ldi	r23, 0x31	; 49
    b9d4:	7d 93       	st	X+, r23
    b9d6:	70 e3       	ldi	r23, 0x30	; 48
    b9d8:	2a 95       	dec	r18
    b9da:	e1 f7       	brne	.-8      	; 0xb9d4 <__ftoa_engine+0x192>
    b9dc:	11 24       	eor	r1, r1
    b9de:	ef 90       	pop	r14
    b9e0:	ff 90       	pop	r15
    b9e2:	0f 91       	pop	r16
    b9e4:	1f 91       	pop	r17
    b9e6:	cf 91       	pop	r28
    b9e8:	df 91       	pop	r29
    b9ea:	99 27       	eor	r25, r25
    b9ec:	87 fd       	sbrc	r24, 7
    b9ee:	90 95       	com	r25
    b9f0:	08 95       	ret

0000b9f2 <strnlen_P>:
    b9f2:	fc 01       	movw	r30, r24
    b9f4:	05 90       	lpm	r0, Z+
    b9f6:	61 50       	subi	r22, 0x01	; 1
    b9f8:	70 40       	sbci	r23, 0x00	; 0
    b9fa:	01 10       	cpse	r0, r1
    b9fc:	d8 f7       	brcc	.-10     	; 0xb9f4 <strnlen_P+0x2>
    b9fe:	80 95       	com	r24
    ba00:	90 95       	com	r25
    ba02:	8e 0f       	add	r24, r30
    ba04:	9f 1f       	adc	r25, r31
    ba06:	08 95       	ret

0000ba08 <memcpy>:
    ba08:	fb 01       	movw	r30, r22
    ba0a:	dc 01       	movw	r26, r24
    ba0c:	02 c0       	rjmp	.+4      	; 0xba12 <memcpy+0xa>
    ba0e:	01 90       	ld	r0, Z+
    ba10:	0d 92       	st	X+, r0
    ba12:	41 50       	subi	r20, 0x01	; 1
    ba14:	50 40       	sbci	r21, 0x00	; 0
    ba16:	d8 f7       	brcc	.-10     	; 0xba0e <memcpy+0x6>
    ba18:	08 95       	ret

0000ba1a <memset>:
    ba1a:	dc 01       	movw	r26, r24
    ba1c:	01 c0       	rjmp	.+2      	; 0xba20 <memset+0x6>
    ba1e:	6d 93       	st	X+, r22
    ba20:	41 50       	subi	r20, 0x01	; 1
    ba22:	50 40       	sbci	r21, 0x00	; 0
    ba24:	e0 f7       	brcc	.-8      	; 0xba1e <memset+0x4>
    ba26:	08 95       	ret

0000ba28 <strnlen>:
    ba28:	fc 01       	movw	r30, r24
    ba2a:	61 50       	subi	r22, 0x01	; 1
    ba2c:	70 40       	sbci	r23, 0x00	; 0
    ba2e:	01 90       	ld	r0, Z+
    ba30:	01 10       	cpse	r0, r1
    ba32:	d8 f7       	brcc	.-10     	; 0xba2a <strnlen+0x2>
    ba34:	80 95       	com	r24
    ba36:	90 95       	com	r25
    ba38:	8e 0f       	add	r24, r30
    ba3a:	9f 1f       	adc	r25, r31
    ba3c:	08 95       	ret

0000ba3e <fputc>:
    ba3e:	0f 93       	push	r16
    ba40:	1f 93       	push	r17
    ba42:	cf 93       	push	r28
    ba44:	df 93       	push	r29
    ba46:	fb 01       	movw	r30, r22
    ba48:	23 81       	ldd	r18, Z+3	; 0x03
    ba4a:	21 fd       	sbrc	r18, 1
    ba4c:	03 c0       	rjmp	.+6      	; 0xba54 <fputc+0x16>
    ba4e:	8f ef       	ldi	r24, 0xFF	; 255
    ba50:	9f ef       	ldi	r25, 0xFF	; 255
    ba52:	2c c0       	rjmp	.+88     	; 0xbaac <fputc+0x6e>
    ba54:	22 ff       	sbrs	r18, 2
    ba56:	16 c0       	rjmp	.+44     	; 0xba84 <fputc+0x46>
    ba58:	46 81       	ldd	r20, Z+6	; 0x06
    ba5a:	57 81       	ldd	r21, Z+7	; 0x07
    ba5c:	24 81       	ldd	r18, Z+4	; 0x04
    ba5e:	35 81       	ldd	r19, Z+5	; 0x05
    ba60:	42 17       	cp	r20, r18
    ba62:	53 07       	cpc	r21, r19
    ba64:	44 f4       	brge	.+16     	; 0xba76 <fputc+0x38>
    ba66:	a0 81       	ld	r26, Z
    ba68:	b1 81       	ldd	r27, Z+1	; 0x01
    ba6a:	9d 01       	movw	r18, r26
    ba6c:	2f 5f       	subi	r18, 0xFF	; 255
    ba6e:	3f 4f       	sbci	r19, 0xFF	; 255
    ba70:	31 83       	std	Z+1, r19	; 0x01
    ba72:	20 83       	st	Z, r18
    ba74:	8c 93       	st	X, r24
    ba76:	26 81       	ldd	r18, Z+6	; 0x06
    ba78:	37 81       	ldd	r19, Z+7	; 0x07
    ba7a:	2f 5f       	subi	r18, 0xFF	; 255
    ba7c:	3f 4f       	sbci	r19, 0xFF	; 255
    ba7e:	37 83       	std	Z+7, r19	; 0x07
    ba80:	26 83       	std	Z+6, r18	; 0x06
    ba82:	14 c0       	rjmp	.+40     	; 0xbaac <fputc+0x6e>
    ba84:	8b 01       	movw	r16, r22
    ba86:	ec 01       	movw	r28, r24
    ba88:	fb 01       	movw	r30, r22
    ba8a:	00 84       	ldd	r0, Z+8	; 0x08
    ba8c:	f1 85       	ldd	r31, Z+9	; 0x09
    ba8e:	e0 2d       	mov	r30, r0
    ba90:	19 95       	eicall
    ba92:	89 2b       	or	r24, r25
    ba94:	e1 f6       	brne	.-72     	; 0xba4e <fputc+0x10>
    ba96:	d8 01       	movw	r26, r16
    ba98:	16 96       	adiw	r26, 0x06	; 6
    ba9a:	8d 91       	ld	r24, X+
    ba9c:	9c 91       	ld	r25, X
    ba9e:	17 97       	sbiw	r26, 0x07	; 7
    baa0:	01 96       	adiw	r24, 0x01	; 1
    baa2:	17 96       	adiw	r26, 0x07	; 7
    baa4:	9c 93       	st	X, r25
    baa6:	8e 93       	st	-X, r24
    baa8:	16 97       	sbiw	r26, 0x06	; 6
    baaa:	ce 01       	movw	r24, r28
    baac:	df 91       	pop	r29
    baae:	cf 91       	pop	r28
    bab0:	1f 91       	pop	r17
    bab2:	0f 91       	pop	r16
    bab4:	08 95       	ret

0000bab6 <vsnprintf>:
    bab6:	0f 93       	push	r16
    bab8:	1f 93       	push	r17
    baba:	cf 93       	push	r28
    babc:	df 93       	push	r29
    babe:	cd b7       	in	r28, 0x3d	; 61
    bac0:	de b7       	in	r29, 0x3e	; 62
    bac2:	2e 97       	sbiw	r28, 0x0e	; 14
    bac4:	0f b6       	in	r0, 0x3f	; 63
    bac6:	f8 94       	cli
    bac8:	de bf       	out	0x3e, r29	; 62
    baca:	0f be       	out	0x3f, r0	; 63
    bacc:	cd bf       	out	0x3d, r28	; 61
    bace:	8c 01       	movw	r16, r24
    bad0:	fa 01       	movw	r30, r20
    bad2:	86 e0       	ldi	r24, 0x06	; 6
    bad4:	8c 83       	std	Y+4, r24	; 0x04
    bad6:	1a 83       	std	Y+2, r17	; 0x02
    bad8:	09 83       	std	Y+1, r16	; 0x01
    bada:	77 ff       	sbrs	r23, 7
    badc:	02 c0       	rjmp	.+4      	; 0xbae2 <vsnprintf+0x2c>
    bade:	60 e0       	ldi	r22, 0x00	; 0
    bae0:	70 e8       	ldi	r23, 0x80	; 128
    bae2:	cb 01       	movw	r24, r22
    bae4:	01 97       	sbiw	r24, 0x01	; 1
    bae6:	9e 83       	std	Y+6, r25	; 0x06
    bae8:	8d 83       	std	Y+5, r24	; 0x05
    baea:	a9 01       	movw	r20, r18
    baec:	bf 01       	movw	r22, r30
    baee:	ce 01       	movw	r24, r28
    baf0:	01 96       	adiw	r24, 0x01	; 1
    baf2:	c4 d9       	rcall	.-3192   	; 0xae7c <vfprintf>
    baf4:	4d 81       	ldd	r20, Y+5	; 0x05
    baf6:	5e 81       	ldd	r21, Y+6	; 0x06
    baf8:	57 fd       	sbrc	r21, 7
    bafa:	0a c0       	rjmp	.+20     	; 0xbb10 <vsnprintf+0x5a>
    bafc:	2f 81       	ldd	r18, Y+7	; 0x07
    bafe:	38 85       	ldd	r19, Y+8	; 0x08
    bb00:	42 17       	cp	r20, r18
    bb02:	53 07       	cpc	r21, r19
    bb04:	0c f4       	brge	.+2      	; 0xbb08 <vsnprintf+0x52>
    bb06:	9a 01       	movw	r18, r20
    bb08:	f8 01       	movw	r30, r16
    bb0a:	e2 0f       	add	r30, r18
    bb0c:	f3 1f       	adc	r31, r19
    bb0e:	10 82       	st	Z, r1
    bb10:	2e 96       	adiw	r28, 0x0e	; 14
    bb12:	0f b6       	in	r0, 0x3f	; 63
    bb14:	f8 94       	cli
    bb16:	de bf       	out	0x3e, r29	; 62
    bb18:	0f be       	out	0x3f, r0	; 63
    bb1a:	cd bf       	out	0x3d, r28	; 61
    bb1c:	df 91       	pop	r29
    bb1e:	cf 91       	pop	r28
    bb20:	1f 91       	pop	r17
    bb22:	0f 91       	pop	r16
    bb24:	08 95       	ret

0000bb26 <__ultoa_invert>:
    bb26:	fa 01       	movw	r30, r20
    bb28:	aa 27       	eor	r26, r26
    bb2a:	28 30       	cpi	r18, 0x08	; 8
    bb2c:	51 f1       	breq	.+84     	; 0xbb82 <__ultoa_invert+0x5c>
    bb2e:	20 31       	cpi	r18, 0x10	; 16
    bb30:	81 f1       	breq	.+96     	; 0xbb92 <__ultoa_invert+0x6c>
    bb32:	e8 94       	clt
    bb34:	6f 93       	push	r22
    bb36:	6e 7f       	andi	r22, 0xFE	; 254
    bb38:	6e 5f       	subi	r22, 0xFE	; 254
    bb3a:	7f 4f       	sbci	r23, 0xFF	; 255
    bb3c:	8f 4f       	sbci	r24, 0xFF	; 255
    bb3e:	9f 4f       	sbci	r25, 0xFF	; 255
    bb40:	af 4f       	sbci	r26, 0xFF	; 255
    bb42:	b1 e0       	ldi	r27, 0x01	; 1
    bb44:	3e d0       	rcall	.+124    	; 0xbbc2 <__ultoa_invert+0x9c>
    bb46:	b4 e0       	ldi	r27, 0x04	; 4
    bb48:	3c d0       	rcall	.+120    	; 0xbbc2 <__ultoa_invert+0x9c>
    bb4a:	67 0f       	add	r22, r23
    bb4c:	78 1f       	adc	r23, r24
    bb4e:	89 1f       	adc	r24, r25
    bb50:	9a 1f       	adc	r25, r26
    bb52:	a1 1d       	adc	r26, r1
    bb54:	68 0f       	add	r22, r24
    bb56:	79 1f       	adc	r23, r25
    bb58:	8a 1f       	adc	r24, r26
    bb5a:	91 1d       	adc	r25, r1
    bb5c:	a1 1d       	adc	r26, r1
    bb5e:	6a 0f       	add	r22, r26
    bb60:	71 1d       	adc	r23, r1
    bb62:	81 1d       	adc	r24, r1
    bb64:	91 1d       	adc	r25, r1
    bb66:	a1 1d       	adc	r26, r1
    bb68:	20 d0       	rcall	.+64     	; 0xbbaa <__ultoa_invert+0x84>
    bb6a:	09 f4       	brne	.+2      	; 0xbb6e <__ultoa_invert+0x48>
    bb6c:	68 94       	set
    bb6e:	3f 91       	pop	r19
    bb70:	2a e0       	ldi	r18, 0x0A	; 10
    bb72:	26 9f       	mul	r18, r22
    bb74:	11 24       	eor	r1, r1
    bb76:	30 19       	sub	r19, r0
    bb78:	30 5d       	subi	r19, 0xD0	; 208
    bb7a:	31 93       	st	Z+, r19
    bb7c:	de f6       	brtc	.-74     	; 0xbb34 <__ultoa_invert+0xe>
    bb7e:	cf 01       	movw	r24, r30
    bb80:	08 95       	ret
    bb82:	46 2f       	mov	r20, r22
    bb84:	47 70       	andi	r20, 0x07	; 7
    bb86:	40 5d       	subi	r20, 0xD0	; 208
    bb88:	41 93       	st	Z+, r20
    bb8a:	b3 e0       	ldi	r27, 0x03	; 3
    bb8c:	0f d0       	rcall	.+30     	; 0xbbac <__ultoa_invert+0x86>
    bb8e:	c9 f7       	brne	.-14     	; 0xbb82 <__ultoa_invert+0x5c>
    bb90:	f6 cf       	rjmp	.-20     	; 0xbb7e <__ultoa_invert+0x58>
    bb92:	46 2f       	mov	r20, r22
    bb94:	4f 70       	andi	r20, 0x0F	; 15
    bb96:	40 5d       	subi	r20, 0xD0	; 208
    bb98:	4a 33       	cpi	r20, 0x3A	; 58
    bb9a:	18 f0       	brcs	.+6      	; 0xbba2 <__ultoa_invert+0x7c>
    bb9c:	49 5d       	subi	r20, 0xD9	; 217
    bb9e:	31 fd       	sbrc	r19, 1
    bba0:	40 52       	subi	r20, 0x20	; 32
    bba2:	41 93       	st	Z+, r20
    bba4:	02 d0       	rcall	.+4      	; 0xbbaa <__ultoa_invert+0x84>
    bba6:	a9 f7       	brne	.-22     	; 0xbb92 <__ultoa_invert+0x6c>
    bba8:	ea cf       	rjmp	.-44     	; 0xbb7e <__ultoa_invert+0x58>
    bbaa:	b4 e0       	ldi	r27, 0x04	; 4
    bbac:	a6 95       	lsr	r26
    bbae:	97 95       	ror	r25
    bbb0:	87 95       	ror	r24
    bbb2:	77 95       	ror	r23
    bbb4:	67 95       	ror	r22
    bbb6:	ba 95       	dec	r27
    bbb8:	c9 f7       	brne	.-14     	; 0xbbac <__ultoa_invert+0x86>
    bbba:	00 97       	sbiw	r24, 0x00	; 0
    bbbc:	61 05       	cpc	r22, r1
    bbbe:	71 05       	cpc	r23, r1
    bbc0:	08 95       	ret
    bbc2:	9b 01       	movw	r18, r22
    bbc4:	ac 01       	movw	r20, r24
    bbc6:	0a 2e       	mov	r0, r26
    bbc8:	06 94       	lsr	r0
    bbca:	57 95       	ror	r21
    bbcc:	47 95       	ror	r20
    bbce:	37 95       	ror	r19
    bbd0:	27 95       	ror	r18
    bbd2:	ba 95       	dec	r27
    bbd4:	c9 f7       	brne	.-14     	; 0xbbc8 <__ultoa_invert+0xa2>
    bbd6:	62 0f       	add	r22, r18
    bbd8:	73 1f       	adc	r23, r19
    bbda:	84 1f       	adc	r24, r20
    bbdc:	95 1f       	adc	r25, r21
    bbde:	a0 1d       	adc	r26, r0
    bbe0:	08 95       	ret

0000bbe2 <eeprom_read_block>:
    bbe2:	dc 01       	movw	r26, r24
    bbe4:	cb 01       	movw	r24, r22

0000bbe6 <eeprom_read_blraw>:
    bbe6:	fc 01       	movw	r30, r24
    bbe8:	f9 99       	sbic	0x1f, 1	; 31
    bbea:	fe cf       	rjmp	.-4      	; 0xbbe8 <eeprom_read_blraw+0x2>
    bbec:	06 c0       	rjmp	.+12     	; 0xbbfa <eeprom_read_blraw+0x14>
    bbee:	f2 bd       	out	0x22, r31	; 34
    bbf0:	e1 bd       	out	0x21, r30	; 33
    bbf2:	f8 9a       	sbi	0x1f, 0	; 31
    bbf4:	31 96       	adiw	r30, 0x01	; 1
    bbf6:	00 b4       	in	r0, 0x20	; 32
    bbf8:	0d 92       	st	X+, r0
    bbfa:	41 50       	subi	r20, 0x01	; 1
    bbfc:	50 40       	sbci	r21, 0x00	; 0
    bbfe:	b8 f7       	brcc	.-18     	; 0xbbee <eeprom_read_blraw+0x8>
    bc00:	08 95       	ret

0000bc02 <eeprom_update_block>:
    bc02:	dc 01       	movw	r26, r24
    bc04:	a4 0f       	add	r26, r20
    bc06:	b5 1f       	adc	r27, r21
    bc08:	41 50       	subi	r20, 0x01	; 1
    bc0a:	50 40       	sbci	r21, 0x00	; 0
    bc0c:	40 f0       	brcs	.+16     	; 0xbc1e <eeprom_update_block+0x1c>
    bc0e:	cb 01       	movw	r24, r22
    bc10:	84 0f       	add	r24, r20
    bc12:	95 1f       	adc	r25, r21
    bc14:	2e 91       	ld	r18, -X
    bc16:	05 d0       	rcall	.+10     	; 0xbc22 <eeprom_update_r18>
    bc18:	41 50       	subi	r20, 0x01	; 1
    bc1a:	50 40       	sbci	r21, 0x00	; 0
    bc1c:	d8 f7       	brcc	.-10     	; 0xbc14 <eeprom_update_block+0x12>
    bc1e:	08 95       	ret

0000bc20 <eeprom_update_byte>:
    bc20:	26 2f       	mov	r18, r22

0000bc22 <eeprom_update_r18>:
    bc22:	f9 99       	sbic	0x1f, 1	; 31
    bc24:	fe cf       	rjmp	.-4      	; 0xbc22 <eeprom_update_r18>
    bc26:	92 bd       	out	0x22, r25	; 34
    bc28:	81 bd       	out	0x21, r24	; 33
    bc2a:	f8 9a       	sbi	0x1f, 0	; 31
    bc2c:	01 97       	sbiw	r24, 0x01	; 1
    bc2e:	00 b4       	in	r0, 0x20	; 32
    bc30:	02 16       	cp	r0, r18
    bc32:	39 f0       	breq	.+14     	; 0xbc42 <eeprom_update_r18+0x20>
    bc34:	1f ba       	out	0x1f, r1	; 31
    bc36:	20 bd       	out	0x20, r18	; 32
    bc38:	0f b6       	in	r0, 0x3f	; 63
    bc3a:	f8 94       	cli
    bc3c:	fa 9a       	sbi	0x1f, 2	; 31
    bc3e:	f9 9a       	sbi	0x1f, 1	; 31
    bc40:	0f be       	out	0x3f, r0	; 63
    bc42:	08 95       	ret

0000bc44 <eeprom_write_block>:
    bc44:	dc 01       	movw	r26, r24
    bc46:	cb 01       	movw	r24, r22
    bc48:	02 c0       	rjmp	.+4      	; 0xbc4e <eeprom_write_block+0xa>
    bc4a:	2d 91       	ld	r18, X+
    bc4c:	05 d0       	rcall	.+10     	; 0xbc58 <eeprom_write_r18>
    bc4e:	41 50       	subi	r20, 0x01	; 1
    bc50:	50 40       	sbci	r21, 0x00	; 0
    bc52:	d8 f7       	brcc	.-10     	; 0xbc4a <eeprom_write_block+0x6>
    bc54:	08 95       	ret

0000bc56 <eeprom_write_byte>:
    bc56:	26 2f       	mov	r18, r22

0000bc58 <eeprom_write_r18>:
    bc58:	f9 99       	sbic	0x1f, 1	; 31
    bc5a:	fe cf       	rjmp	.-4      	; 0xbc58 <eeprom_write_r18>
    bc5c:	1f ba       	out	0x1f, r1	; 31
    bc5e:	92 bd       	out	0x22, r25	; 34
    bc60:	81 bd       	out	0x21, r24	; 33
    bc62:	20 bd       	out	0x20, r18	; 32
    bc64:	0f b6       	in	r0, 0x3f	; 63
    bc66:	f8 94       	cli
    bc68:	fa 9a       	sbi	0x1f, 2	; 31
    bc6a:	f9 9a       	sbi	0x1f, 1	; 31
    bc6c:	0f be       	out	0x3f, r0	; 63
    bc6e:	01 96       	adiw	r24, 0x01	; 1
    bc70:	08 95       	ret

0000bc72 <_exit>:
    bc72:	f8 94       	cli

0000bc74 <__stop_program>:
    bc74:	ff cf       	rjmp	.-2      	; 0xbc74 <__stop_program>
