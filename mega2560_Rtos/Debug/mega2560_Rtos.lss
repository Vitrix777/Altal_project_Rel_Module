
mega2560_Rtos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000460  00800200  0000ba10  0000baa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000ba10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000044f  00800660  00800660  0000bf04  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000bf04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000bf60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000aa8  00000000  00000000  0000bfa0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011b5d  00000000  00000000  0000ca48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e6f  00000000  00000000  0001e5a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008db0  00000000  00000000  00021414  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002978  00000000  00000000  0002a1c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003a4a  00000000  00000000  0002cb3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f48c  00000000  00000000  00030586  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ca0  00000000  00000000  0003fa12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6c c5       	rjmp	.+2776   	; 0xada <__ctors_end>
       2:	00 00       	nop
       4:	8b c5       	rjmp	.+2838   	; 0xb1c <__bad_interrupt>
       6:	00 00       	nop
       8:	89 c5       	rjmp	.+2834   	; 0xb1c <__bad_interrupt>
       a:	00 00       	nop
       c:	87 c5       	rjmp	.+2830   	; 0xb1c <__bad_interrupt>
       e:	00 00       	nop
      10:	85 c5       	rjmp	.+2826   	; 0xb1c <__bad_interrupt>
      12:	00 00       	nop
      14:	83 c5       	rjmp	.+2822   	; 0xb1c <__bad_interrupt>
      16:	00 00       	nop
      18:	81 c5       	rjmp	.+2818   	; 0xb1c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7f c5       	rjmp	.+2814   	; 0xb1c <__bad_interrupt>
      1e:	00 00       	nop
      20:	7d c5       	rjmp	.+2810   	; 0xb1c <__bad_interrupt>
      22:	00 00       	nop
      24:	7b c5       	rjmp	.+2806   	; 0xb1c <__bad_interrupt>
      26:	00 00       	nop
      28:	79 c5       	rjmp	.+2802   	; 0xb1c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	77 c5       	rjmp	.+2798   	; 0xb1c <__bad_interrupt>
      2e:	00 00       	nop
      30:	75 c5       	rjmp	.+2794   	; 0xb1c <__bad_interrupt>
      32:	00 00       	nop
      34:	73 c5       	rjmp	.+2790   	; 0xb1c <__bad_interrupt>
      36:	00 00       	nop
      38:	71 c5       	rjmp	.+2786   	; 0xb1c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6f c5       	rjmp	.+2782   	; 0xb1c <__bad_interrupt>
      3e:	00 00       	nop
      40:	6d c5       	rjmp	.+2778   	; 0xb1c <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 5c 22 	jmp	0x44b8	; 0x44b8 <__vector_17>
      48:	69 c5       	rjmp	.+2770   	; 0xb1c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	67 c5       	rjmp	.+2766   	; 0xb1c <__bad_interrupt>
      4e:	00 00       	nop
      50:	65 c5       	rjmp	.+2762   	; 0xb1c <__bad_interrupt>
      52:	00 00       	nop
      54:	63 c5       	rjmp	.+2758   	; 0xb1c <__bad_interrupt>
      56:	00 00       	nop
      58:	61 c5       	rjmp	.+2754   	; 0xb1c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5f c5       	rjmp	.+2750   	; 0xb1c <__bad_interrupt>
      5e:	00 00       	nop
      60:	5d c5       	rjmp	.+2746   	; 0xb1c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 8f 10 	jmp	0x211e	; 0x211e <__vector_25>
      68:	0c 94 17 11 	jmp	0x222e	; 0x222e <__vector_26>
      6c:	57 c5       	rjmp	.+2734   	; 0xb1c <__bad_interrupt>
      6e:	00 00       	nop
      70:	55 c5       	rjmp	.+2730   	; 0xb1c <__bad_interrupt>
      72:	00 00       	nop
      74:	53 c5       	rjmp	.+2726   	; 0xb1c <__bad_interrupt>
      76:	00 00       	nop
      78:	51 c5       	rjmp	.+2722   	; 0xb1c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4f c5       	rjmp	.+2718   	; 0xb1c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c7       	rjmp	.+3754   	; 0xf2c <__vector_32>
      82:	00 00       	nop
      84:	4b c5       	rjmp	.+2710   	; 0xb1c <__bad_interrupt>
      86:	00 00       	nop
      88:	49 c5       	rjmp	.+2706   	; 0xb1c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	47 c5       	rjmp	.+2702   	; 0xb1c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__vector_36>
      94:	0c 94 bf 11 	jmp	0x237e	; 0x237e <__vector_37>
      98:	41 c5       	rjmp	.+2690   	; 0xb1c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	3f c5       	rjmp	.+2686   	; 0xb1c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3d c5       	rjmp	.+2682   	; 0xb1c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3b c5       	rjmp	.+2678   	; 0xb1c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	39 c5       	rjmp	.+2674   	; 0xb1c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	37 c5       	rjmp	.+2670   	; 0xb1c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	35 c5       	rjmp	.+2666   	; 0xb1c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	33 c5       	rjmp	.+2662   	; 0xb1c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	31 c5       	rjmp	.+2658   	; 0xb1c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2f c5       	rjmp	.+2654   	; 0xb1c <__bad_interrupt>
      be:	00 00       	nop
      c0:	2d c5       	rjmp	.+2650   	; 0xb1c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2b c5       	rjmp	.+2646   	; 0xb1c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	29 c5       	rjmp	.+2642   	; 0xb1c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__vector_51>
      d0:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__vector_52>
      d4:	23 c5       	rjmp	.+2630   	; 0xb1c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <__vector_54>
      dc:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__vector_55>
      e0:	1d c5       	rjmp	.+2618   	; 0xb1c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0c 0d       	add	r16, r12
      e6:	0c 0d       	add	r16, r12
      e8:	11 0d       	add	r17, r1
      ea:	11 0d       	add	r17, r1
      ec:	16 0d       	add	r17, r6
      ee:	16 0d       	add	r17, r6
      f0:	1b 0d       	add	r17, r11
      f2:	1b 0d       	add	r17, r11
      f4:	7d 0d       	add	r23, r13
      f6:	7d 0d       	add	r23, r13
      f8:	78 0d       	add	r23, r8
      fa:	78 0d       	add	r23, r8
      fc:	73 0d       	add	r23, r3
      fe:	73 0d       	add	r23, r3
     100:	6e 0d       	add	r22, r14
     102:	6e 0d       	add	r22, r14
     104:	31 0e       	add	r3, r17
     106:	31 0e       	add	r3, r17
     108:	38 0e       	add	r3, r24
     10a:	38 0e       	add	r3, r24
     10c:	3f 0e       	add	r3, r31
     10e:	3f 0e       	add	r3, r31
     110:	46 0e       	add	r4, r22
     112:	46 0e       	add	r4, r22
     114:	bd 0e       	add	r11, r29
     116:	ee 0e       	add	r14, r30
     118:	28 0f       	add	r18, r24
     11a:	59 0f       	add	r21, r25
     11c:	93 0f       	add	r25, r19
     11e:	c4 0f       	add	r28, r20
     120:	02 10       	cpse	r0, r2
     122:	33 10       	cpse	r3, r3
     124:	39 1d       	adc	r19, r9
     126:	39 1d       	adc	r19, r9
     128:	39 1d       	adc	r19, r9
     12a:	84 1d       	adc	r24, r4
     12c:	6d 1d       	adc	r22, r13
     12e:	81 1d       	adc	r24, r1
     130:	39 1d       	adc	r19, r9
     132:	39 1d       	adc	r19, r9
     134:	84 1d       	adc	r24, r4
     136:	6d 1d       	adc	r22, r13
     138:	c0 26       	eor	r12, r16
     13a:	d4 25       	eor	r29, r4
     13c:	d4 25       	eor	r29, r4
     13e:	dd 27       	eor	r29, r29
     140:	dd 27       	eor	r29, r29
     142:	dd 27       	eor	r29, r29
     144:	dd 27       	eor	r29, r29
     146:	dd 27       	eor	r29, r29
     148:	dd 27       	eor	r29, r29
     14a:	dd 27       	eor	r29, r29
     14c:	c4 26       	eor	r12, r20
     14e:	d9 25       	eor	r29, r9
     150:	d9 25       	eor	r29, r9
     152:	dd 27       	eor	r29, r29
     154:	dd 27       	eor	r29, r29
     156:	dd 27       	eor	r29, r29
     158:	dd 27       	eor	r29, r29
     15a:	dd 27       	eor	r29, r29
     15c:	dd 27       	eor	r29, r29
     15e:	dd 27       	eor	r29, r29
     160:	c8 26       	eor	r12, r24
     162:	de 25       	eor	r29, r14
     164:	de 25       	eor	r29, r14
     166:	dd 27       	eor	r29, r29
     168:	dd 27       	eor	r29, r29
     16a:	dd 27       	eor	r29, r29
     16c:	dd 27       	eor	r29, r29
     16e:	dd 27       	eor	r29, r29
     170:	dd 27       	eor	r29, r29
     172:	dd 27       	eor	r29, r29
     174:	cc 26       	eor	r12, r28
     176:	e3 25       	eor	r30, r3
     178:	e3 25       	eor	r30, r3
     17a:	dd 27       	eor	r29, r29
     17c:	dd 27       	eor	r29, r29
     17e:	dd 27       	eor	r29, r29
     180:	dd 27       	eor	r29, r29
     182:	dd 27       	eor	r29, r29
     184:	dd 27       	eor	r29, r29
     186:	dd 27       	eor	r29, r29
     188:	d0 26       	eor	r13, r16
     18a:	e8 25       	eor	r30, r8
     18c:	e8 25       	eor	r30, r8
     18e:	dd 27       	eor	r29, r29
     190:	dd 27       	eor	r29, r29
     192:	dd 27       	eor	r29, r29
     194:	dd 27       	eor	r29, r29
     196:	dd 27       	eor	r29, r29
     198:	dd 27       	eor	r29, r29
     19a:	dd 27       	eor	r29, r29
     19c:	d4 26       	eor	r13, r20
     19e:	ed 25       	eor	r30, r13
     1a0:	ed 25       	eor	r30, r13
     1a2:	dd 27       	eor	r29, r29
     1a4:	dd 27       	eor	r29, r29
     1a6:	dd 27       	eor	r29, r29
     1a8:	dd 27       	eor	r29, r29
     1aa:	dd 27       	eor	r29, r29
     1ac:	dd 27       	eor	r29, r29
     1ae:	dd 27       	eor	r29, r29
     1b0:	d8 26       	eor	r13, r24
     1b2:	f2 25       	eor	r31, r2
     1b4:	f2 25       	eor	r31, r2
     1b6:	dd 27       	eor	r29, r29
     1b8:	dd 27       	eor	r29, r29
     1ba:	dd 27       	eor	r29, r29
     1bc:	dd 27       	eor	r29, r29
     1be:	dd 27       	eor	r29, r29
     1c0:	dd 27       	eor	r29, r29
     1c2:	dd 27       	eor	r29, r29
     1c4:	dc 26       	eor	r13, r28
     1c6:	02 26       	eor	r0, r18
     1c8:	02 26       	eor	r0, r18
     1ca:	dd 27       	eor	r29, r29
     1cc:	dd 27       	eor	r29, r29
     1ce:	dd 27       	eor	r29, r29
     1d0:	dd 27       	eor	r29, r29
     1d2:	dd 27       	eor	r29, r29
     1d4:	dd 27       	eor	r29, r29
     1d6:	dd 27       	eor	r29, r29
     1d8:	e0 26       	eor	r14, r16
     1da:	12 26       	eor	r1, r18
     1dc:	12 26       	eor	r1, r18
     1de:	dd 27       	eor	r29, r29
     1e0:	dd 27       	eor	r29, r29
     1e2:	dd 27       	eor	r29, r29
     1e4:	dd 27       	eor	r29, r29
     1e6:	dd 27       	eor	r29, r29
     1e8:	dd 27       	eor	r29, r29
     1ea:	dd 27       	eor	r29, r29
     1ec:	e4 26       	eor	r14, r20
     1ee:	22 26       	eor	r2, r18
     1f0:	22 26       	eor	r2, r18
     1f2:	dd 27       	eor	r29, r29
     1f4:	dd 27       	eor	r29, r29
     1f6:	dd 27       	eor	r29, r29
     1f8:	dd 27       	eor	r29, r29
     1fa:	dd 27       	eor	r29, r29
     1fc:	dd 27       	eor	r29, r29
     1fe:	dd 27       	eor	r29, r29
     200:	e8 26       	eor	r14, r24
     202:	32 26       	eor	r3, r18
     204:	32 26       	eor	r3, r18
     206:	dd 27       	eor	r29, r29
     208:	dd 27       	eor	r29, r29
     20a:	dd 27       	eor	r29, r29
     20c:	dd 27       	eor	r29, r29
     20e:	dd 27       	eor	r29, r29
     210:	dd 27       	eor	r29, r29
     212:	dd 27       	eor	r29, r29
     214:	ec 26       	eor	r14, r28
     216:	37 26       	eor	r3, r23
     218:	37 26       	eor	r3, r23
     21a:	dd 27       	eor	r29, r29
     21c:	dd 27       	eor	r29, r29
     21e:	dd 27       	eor	r29, r29
     220:	dd 27       	eor	r29, r29
     222:	dd 27       	eor	r29, r29
     224:	dd 27       	eor	r29, r29
     226:	dd 27       	eor	r29, r29
     228:	f0 26       	eor	r15, r16
     22a:	47 26       	eor	r4, r23
     22c:	47 26       	eor	r4, r23
     22e:	dd 27       	eor	r29, r29
     230:	dd 27       	eor	r29, r29
     232:	dd 27       	eor	r29, r29
     234:	dd 27       	eor	r29, r29
     236:	dd 27       	eor	r29, r29
     238:	dd 27       	eor	r29, r29
     23a:	dd 27       	eor	r29, r29
     23c:	f4 26       	eor	r15, r20
     23e:	56 26       	eor	r5, r22
     240:	56 26       	eor	r5, r22
     242:	dd 27       	eor	r29, r29
     244:	dd 27       	eor	r29, r29
     246:	dd 27       	eor	r29, r29
     248:	dd 27       	eor	r29, r29
     24a:	dd 27       	eor	r29, r29
     24c:	dd 27       	eor	r29, r29
     24e:	dd 27       	eor	r29, r29
     250:	f8 26       	eor	r15, r24
     252:	66 26       	eor	r6, r22
     254:	66 26       	eor	r6, r22
     256:	dd 27       	eor	r29, r29
     258:	dd 27       	eor	r29, r29
     25a:	dd 27       	eor	r29, r29
     25c:	dd 27       	eor	r29, r29
     25e:	dd 27       	eor	r29, r29
     260:	dd 27       	eor	r29, r29
     262:	dd 27       	eor	r29, r29
     264:	fc 26       	eor	r15, r28
     266:	76 26       	eor	r7, r22
     268:	76 26       	eor	r7, r22
     26a:	dd 27       	eor	r29, r29
     26c:	dd 27       	eor	r29, r29
     26e:	dd 27       	eor	r29, r29
     270:	dd 27       	eor	r29, r29
     272:	dd 27       	eor	r29, r29
     274:	dd 27       	eor	r29, r29
     276:	dd 27       	eor	r29, r29
     278:	00 27       	eor	r16, r16
     27a:	86 26       	eor	r8, r22
     27c:	86 26       	eor	r8, r22
     27e:	dd 27       	eor	r29, r29
     280:	dd 27       	eor	r29, r29
     282:	dd 27       	eor	r29, r29
     284:	dd 27       	eor	r29, r29
     286:	dd 27       	eor	r29, r29
     288:	dd 27       	eor	r29, r29
     28a:	dd 27       	eor	r29, r29
     28c:	04 27       	eor	r16, r20
     28e:	96 26       	eor	r9, r22
     290:	96 26       	eor	r9, r22
     292:	dd 27       	eor	r29, r29
     294:	dd 27       	eor	r29, r29
     296:	dd 27       	eor	r29, r29
     298:	dd 27       	eor	r29, r29
     29a:	dd 27       	eor	r29, r29
     29c:	dd 27       	eor	r29, r29
     29e:	dd 27       	eor	r29, r29
     2a0:	08 27       	eor	r16, r24
     2a2:	a6 26       	eor	r10, r22
     2a4:	a6 26       	eor	r10, r22
     2a6:	dd 27       	eor	r29, r29
     2a8:	dd 27       	eor	r29, r29
     2aa:	dd 27       	eor	r29, r29
     2ac:	dd 27       	eor	r29, r29
     2ae:	dd 27       	eor	r29, r29
     2b0:	dd 27       	eor	r29, r29
     2b2:	dd 27       	eor	r29, r29
     2b4:	0c 27       	eor	r16, r28
     2b6:	b6 26       	eor	r11, r22
     2b8:	b6 26       	eor	r11, r22
     2ba:	dd 27       	eor	r29, r29
     2bc:	dd 27       	eor	r29, r29
     2be:	dd 27       	eor	r29, r29
     2c0:	dd 27       	eor	r29, r29
     2c2:	dd 27       	eor	r29, r29
     2c4:	dd 27       	eor	r29, r29
     2c6:	dd 27       	eor	r29, r29
     2c8:	10 27       	eor	r17, r16
     2ca:	dd 27       	eor	r29, r29
     2cc:	dd 27       	eor	r29, r29
     2ce:	dd 27       	eor	r29, r29
     2d0:	dd 27       	eor	r29, r29
     2d2:	dd 27       	eor	r29, r29
     2d4:	dd 27       	eor	r29, r29
     2d6:	dd 27       	eor	r29, r29
     2d8:	dd 27       	eor	r29, r29
     2da:	dd 27       	eor	r29, r29
     2dc:	14 27       	eor	r17, r20
     2de:	dd 27       	eor	r29, r29
     2e0:	dd 27       	eor	r29, r29
     2e2:	dd 27       	eor	r29, r29
     2e4:	dd 27       	eor	r29, r29
     2e6:	dd 27       	eor	r29, r29
     2e8:	dd 27       	eor	r29, r29
     2ea:	dd 27       	eor	r29, r29
     2ec:	dd 27       	eor	r29, r29
     2ee:	dd 27       	eor	r29, r29
     2f0:	18 27       	eor	r17, r24
     2f2:	dd 27       	eor	r29, r29
     2f4:	dd 27       	eor	r29, r29
     2f6:	dd 27       	eor	r29, r29
     2f8:	dd 27       	eor	r29, r29
     2fa:	dd 27       	eor	r29, r29
     2fc:	dd 27       	eor	r29, r29
     2fe:	dd 27       	eor	r29, r29
     300:	dd 27       	eor	r29, r29
     302:	dd 27       	eor	r29, r29
     304:	1c 27       	eor	r17, r28
     306:	dd 27       	eor	r29, r29
     308:	dd 27       	eor	r29, r29
     30a:	dd 27       	eor	r29, r29
     30c:	dd 27       	eor	r29, r29
     30e:	dd 27       	eor	r29, r29
     310:	dd 27       	eor	r29, r29
     312:	dd 27       	eor	r29, r29
     314:	dd 27       	eor	r29, r29
     316:	dd 27       	eor	r29, r29
     318:	20 27       	eor	r18, r16
     31a:	dd 27       	eor	r29, r29
     31c:	dd 27       	eor	r29, r29
     31e:	dd 27       	eor	r29, r29
     320:	dd 27       	eor	r29, r29
     322:	dd 27       	eor	r29, r29
     324:	dd 27       	eor	r29, r29
     326:	dd 27       	eor	r29, r29
     328:	dd 27       	eor	r29, r29
     32a:	dd 27       	eor	r29, r29
     32c:	2b 27       	eor	r18, r27
     32e:	dd 27       	eor	r29, r29
     330:	dd 27       	eor	r29, r29
     332:	dd 27       	eor	r29, r29
     334:	dd 27       	eor	r29, r29
     336:	dd 27       	eor	r29, r29
     338:	dd 27       	eor	r29, r29
     33a:	dd 27       	eor	r29, r29
     33c:	dd 27       	eor	r29, r29
     33e:	dd 27       	eor	r29, r29
     340:	2f 27       	eor	r18, r31
     342:	dd 27       	eor	r29, r29
     344:	dd 27       	eor	r29, r29
     346:	dd 27       	eor	r29, r29
     348:	dd 27       	eor	r29, r29
     34a:	dd 27       	eor	r29, r29
     34c:	dd 27       	eor	r29, r29
     34e:	dd 27       	eor	r29, r29
     350:	dd 27       	eor	r29, r29
     352:	dd 27       	eor	r29, r29
     354:	33 27       	eor	r19, r19
     356:	dd 27       	eor	r29, r29
     358:	dd 27       	eor	r29, r29
     35a:	dd 27       	eor	r29, r29
     35c:	dd 27       	eor	r29, r29
     35e:	dd 27       	eor	r29, r29
     360:	dd 27       	eor	r29, r29
     362:	dd 27       	eor	r29, r29
     364:	dd 27       	eor	r29, r29
     366:	dd 27       	eor	r29, r29
     368:	37 27       	eor	r19, r23
     36a:	dd 27       	eor	r29, r29
     36c:	dd 27       	eor	r29, r29
     36e:	dd 27       	eor	r29, r29
     370:	dd 27       	eor	r29, r29
     372:	dd 27       	eor	r29, r29
     374:	dd 27       	eor	r29, r29
     376:	dd 27       	eor	r29, r29
     378:	dd 27       	eor	r29, r29
     37a:	dd 27       	eor	r29, r29
     37c:	3b 27       	eor	r19, r27
     37e:	84 27       	eor	r24, r20
     380:	a8 27       	eor	r26, r24
     382:	dd 27       	eor	r29, r29
     384:	dd 27       	eor	r29, r29
     386:	dd 27       	eor	r29, r29
     388:	dd 27       	eor	r29, r29
     38a:	dd 27       	eor	r29, r29
     38c:	dd 27       	eor	r29, r29
     38e:	dd 27       	eor	r29, r29
     390:	41 27       	eor	r20, r17
     392:	87 27       	eor	r24, r23
     394:	ae 27       	eor	r26, r30
     396:	dd 27       	eor	r29, r29
     398:	dd 27       	eor	r29, r29
     39a:	dd 27       	eor	r29, r29
     39c:	dd 27       	eor	r29, r29
     39e:	dd 27       	eor	r29, r29
     3a0:	dd 27       	eor	r29, r29
     3a2:	dd 27       	eor	r29, r29
     3a4:	45 27       	eor	r20, r21
     3a6:	8d 27       	eor	r24, r29
     3a8:	b4 27       	eor	r27, r20
     3aa:	dd 27       	eor	r29, r29
     3ac:	dd 27       	eor	r29, r29
     3ae:	dd 27       	eor	r29, r29
     3b0:	dd 27       	eor	r29, r29
     3b2:	dd 27       	eor	r29, r29
     3b4:	dd 27       	eor	r29, r29
     3b6:	dd 27       	eor	r29, r29
     3b8:	49 27       	eor	r20, r25
     3ba:	93 27       	eor	r25, r19
     3bc:	ba 27       	eor	r27, r26
     3be:	dd 27       	eor	r29, r29
     3c0:	dd 27       	eor	r29, r29
     3c2:	dd 27       	eor	r29, r29
     3c4:	dd 27       	eor	r29, r29
     3c6:	dd 27       	eor	r29, r29
     3c8:	dd 27       	eor	r29, r29
     3ca:	dd 27       	eor	r29, r29
     3cc:	4d 27       	eor	r20, r29
     3ce:	99 27       	eor	r25, r25
     3d0:	c0 27       	eor	r28, r16
     3d2:	dd 27       	eor	r29, r29
     3d4:	dd 27       	eor	r29, r29
     3d6:	dd 27       	eor	r29, r29
     3d8:	dd 27       	eor	r29, r29
     3da:	dd 27       	eor	r29, r29
     3dc:	dd 27       	eor	r29, r29
     3de:	dd 27       	eor	r29, r29
     3e0:	51 27       	eor	r21, r17
     3e2:	9c 27       	eor	r25, r28
     3e4:	c6 27       	eor	r28, r22
     3e6:	dd 27       	eor	r29, r29
     3e8:	dd 27       	eor	r29, r29
     3ea:	dd 27       	eor	r29, r29
     3ec:	dd 27       	eor	r29, r29
     3ee:	dd 27       	eor	r29, r29
     3f0:	dd 27       	eor	r29, r29
     3f2:	dd 27       	eor	r29, r29
     3f4:	54 27       	eor	r21, r20
     3f6:	dd 27       	eor	r29, r29
     3f8:	dd 27       	eor	r29, r29
     3fa:	dd 27       	eor	r29, r29
     3fc:	dd 27       	eor	r29, r29
     3fe:	dd 27       	eor	r29, r29
     400:	dd 27       	eor	r29, r29
     402:	dd 27       	eor	r29, r29
     404:	dd 27       	eor	r29, r29
     406:	dd 27       	eor	r29, r29
     408:	58 27       	eor	r21, r24
     40a:	9f 27       	eor	r25, r31
     40c:	cc 27       	eor	r28, r28
     40e:	dd 27       	eor	r29, r29
     410:	dd 27       	eor	r29, r29
     412:	dd 27       	eor	r29, r29
     414:	dd 27       	eor	r29, r29
     416:	dd 27       	eor	r29, r29
     418:	dd 27       	eor	r29, r29
     41a:	dd 27       	eor	r29, r29
     41c:	5b 27       	eor	r21, r27
     41e:	a2 27       	eor	r26, r18
     420:	d2 27       	eor	r29, r18
     422:	dd 27       	eor	r29, r29
     424:	dd 27       	eor	r29, r29
     426:	dd 27       	eor	r29, r29
     428:	dd 27       	eor	r29, r29
     42a:	dd 27       	eor	r29, r29
     42c:	dd 27       	eor	r29, r29
     42e:	dd 27       	eor	r29, r29
     430:	5e 27       	eor	r21, r30
     432:	a5 27       	eor	r26, r21
     434:	d8 27       	eor	r29, r24
     436:	dd 27       	eor	r29, r29
     438:	dd 27       	eor	r29, r29
     43a:	dd 27       	eor	r29, r29
     43c:	dd 27       	eor	r29, r29
     43e:	dd 27       	eor	r29, r29
     440:	dd 27       	eor	r29, r29
     442:	dd 27       	eor	r29, r29
     444:	61 27       	eor	r22, r17
     446:	dd 27       	eor	r29, r29
     448:	dd 27       	eor	r29, r29
     44a:	dd 27       	eor	r29, r29
     44c:	dd 27       	eor	r29, r29
     44e:	dd 27       	eor	r29, r29
     450:	dd 27       	eor	r29, r29
     452:	dd 27       	eor	r29, r29
     454:	dd 27       	eor	r29, r29
     456:	dd 27       	eor	r29, r29
     458:	65 27       	eor	r22, r21
     45a:	dd 27       	eor	r29, r29
     45c:	dd 27       	eor	r29, r29
     45e:	dd 27       	eor	r29, r29
     460:	dd 27       	eor	r29, r29
     462:	dd 27       	eor	r29, r29
     464:	dd 27       	eor	r29, r29
     466:	dd 27       	eor	r29, r29
     468:	dd 27       	eor	r29, r29
     46a:	dd 27       	eor	r29, r29
     46c:	69 27       	eor	r22, r25
     46e:	dd 27       	eor	r29, r29
     470:	dd 27       	eor	r29, r29
     472:	dd 27       	eor	r29, r29
     474:	dd 27       	eor	r29, r29
     476:	dd 27       	eor	r29, r29
     478:	dd 27       	eor	r29, r29
     47a:	dd 27       	eor	r29, r29
     47c:	dd 27       	eor	r29, r29
     47e:	dd 27       	eor	r29, r29
     480:	6d 27       	eor	r22, r29
     482:	dd 27       	eor	r29, r29
     484:	dd 27       	eor	r29, r29
     486:	dd 27       	eor	r29, r29
     488:	dd 27       	eor	r29, r29
     48a:	dd 27       	eor	r29, r29
     48c:	dd 27       	eor	r29, r29
     48e:	dd 27       	eor	r29, r29
     490:	dd 27       	eor	r29, r29
     492:	dd 27       	eor	r29, r29
     494:	71 27       	eor	r23, r17
     496:	dd 27       	eor	r29, r29
     498:	dd 27       	eor	r29, r29
     49a:	dd 27       	eor	r29, r29
     49c:	dd 27       	eor	r29, r29
     49e:	dd 27       	eor	r29, r29
     4a0:	dd 27       	eor	r29, r29
     4a2:	dd 27       	eor	r29, r29
     4a4:	dd 27       	eor	r29, r29
     4a6:	dd 27       	eor	r29, r29
     4a8:	74 27       	eor	r23, r20
     4aa:	dd 27       	eor	r29, r29
     4ac:	dd 27       	eor	r29, r29
     4ae:	dd 27       	eor	r29, r29
     4b0:	dd 27       	eor	r29, r29
     4b2:	dd 27       	eor	r29, r29
     4b4:	dd 27       	eor	r29, r29
     4b6:	dd 27       	eor	r29, r29
     4b8:	dd 27       	eor	r29, r29
     4ba:	dd 27       	eor	r29, r29
     4bc:	78 27       	eor	r23, r24
     4be:	dd 27       	eor	r29, r29
     4c0:	dd 27       	eor	r29, r29
     4c2:	dd 27       	eor	r29, r29
     4c4:	dd 27       	eor	r29, r29
     4c6:	dd 27       	eor	r29, r29
     4c8:	dd 27       	eor	r29, r29
     4ca:	dd 27       	eor	r29, r29
     4cc:	dd 27       	eor	r29, r29
     4ce:	dd 27       	eor	r29, r29
     4d0:	7c 27       	eor	r23, r28
     4d2:	dd 27       	eor	r29, r29
     4d4:	dd 27       	eor	r29, r29
     4d6:	dd 27       	eor	r29, r29
     4d8:	dd 27       	eor	r29, r29
     4da:	dd 27       	eor	r29, r29
     4dc:	dd 27       	eor	r29, r29
     4de:	dd 27       	eor	r29, r29
     4e0:	dd 27       	eor	r29, r29
     4e2:	dd 27       	eor	r29, r29
     4e4:	80 27       	eor	r24, r16
     4e6:	f1 27       	eor	r31, r17
     4e8:	a6 28       	or	r10, r6
     4ea:	a6 28       	or	r10, r6
     4ec:	a6 28       	or	r10, r6
     4ee:	a6 28       	or	r10, r6
     4f0:	a6 28       	or	r10, r6
     4f2:	a6 28       	or	r10, r6
     4f4:	a6 28       	or	r10, r6
     4f6:	a6 28       	or	r10, r6
     4f8:	a6 28       	or	r10, r6
     4fa:	f3 27       	eor	r31, r19
     4fc:	a6 28       	or	r10, r6
     4fe:	a6 28       	or	r10, r6
     500:	a6 28       	or	r10, r6
     502:	a6 28       	or	r10, r6
     504:	a6 28       	or	r10, r6
     506:	a6 28       	or	r10, r6
     508:	a6 28       	or	r10, r6
     50a:	a6 28       	or	r10, r6
     50c:	a6 28       	or	r10, r6
     50e:	f6 27       	eor	r31, r22
     510:	a6 28       	or	r10, r6
     512:	a6 28       	or	r10, r6
     514:	a6 28       	or	r10, r6
     516:	a6 28       	or	r10, r6
     518:	a6 28       	or	r10, r6
     51a:	a6 28       	or	r10, r6
     51c:	a6 28       	or	r10, r6
     51e:	a6 28       	or	r10, r6
     520:	a6 28       	or	r10, r6
     522:	f9 27       	eor	r31, r25
     524:	a6 28       	or	r10, r6
     526:	a6 28       	or	r10, r6
     528:	a6 28       	or	r10, r6
     52a:	a6 28       	or	r10, r6
     52c:	a6 28       	or	r10, r6
     52e:	a6 28       	or	r10, r6
     530:	a6 28       	or	r10, r6
     532:	a6 28       	or	r10, r6
     534:	a6 28       	or	r10, r6
     536:	fc 27       	eor	r31, r28
     538:	a6 28       	or	r10, r6
     53a:	a6 28       	or	r10, r6
     53c:	a6 28       	or	r10, r6
     53e:	a6 28       	or	r10, r6
     540:	a6 28       	or	r10, r6
     542:	a6 28       	or	r10, r6
     544:	a6 28       	or	r10, r6
     546:	a6 28       	or	r10, r6
     548:	a6 28       	or	r10, r6
     54a:	ff 27       	eor	r31, r31
     54c:	a6 28       	or	r10, r6
     54e:	a6 28       	or	r10, r6
     550:	a6 28       	or	r10, r6
     552:	a6 28       	or	r10, r6
     554:	a6 28       	or	r10, r6
     556:	a6 28       	or	r10, r6
     558:	a6 28       	or	r10, r6
     55a:	a6 28       	or	r10, r6
     55c:	a6 28       	or	r10, r6
     55e:	02 28       	or	r0, r2
     560:	a6 28       	or	r10, r6
     562:	a6 28       	or	r10, r6
     564:	a6 28       	or	r10, r6
     566:	a6 28       	or	r10, r6
     568:	a6 28       	or	r10, r6
     56a:	a6 28       	or	r10, r6
     56c:	a6 28       	or	r10, r6
     56e:	a6 28       	or	r10, r6
     570:	a6 28       	or	r10, r6
     572:	05 28       	or	r0, r5
     574:	a6 28       	or	r10, r6
     576:	a6 28       	or	r10, r6
     578:	a6 28       	or	r10, r6
     57a:	a6 28       	or	r10, r6
     57c:	a6 28       	or	r10, r6
     57e:	a6 28       	or	r10, r6
     580:	a6 28       	or	r10, r6
     582:	a6 28       	or	r10, r6
     584:	a6 28       	or	r10, r6
     586:	08 28       	or	r0, r8
     588:	a6 28       	or	r10, r6
     58a:	a6 28       	or	r10, r6
     58c:	a6 28       	or	r10, r6
     58e:	a6 28       	or	r10, r6
     590:	a6 28       	or	r10, r6
     592:	a6 28       	or	r10, r6
     594:	a6 28       	or	r10, r6
     596:	a6 28       	or	r10, r6
     598:	a6 28       	or	r10, r6
     59a:	0b 28       	or	r0, r11
     59c:	a6 28       	or	r10, r6
     59e:	a6 28       	or	r10, r6
     5a0:	a6 28       	or	r10, r6
     5a2:	a6 28       	or	r10, r6
     5a4:	a6 28       	or	r10, r6
     5a6:	a6 28       	or	r10, r6
     5a8:	a6 28       	or	r10, r6
     5aa:	a6 28       	or	r10, r6
     5ac:	a6 28       	or	r10, r6
     5ae:	0e 28       	or	r0, r14
     5b0:	a6 28       	or	r10, r6
     5b2:	a6 28       	or	r10, r6
     5b4:	a6 28       	or	r10, r6
     5b6:	a6 28       	or	r10, r6
     5b8:	a6 28       	or	r10, r6
     5ba:	a6 28       	or	r10, r6
     5bc:	a6 28       	or	r10, r6
     5be:	a6 28       	or	r10, r6
     5c0:	a6 28       	or	r10, r6
     5c2:	11 28       	or	r1, r1
     5c4:	a6 28       	or	r10, r6
     5c6:	a6 28       	or	r10, r6
     5c8:	a6 28       	or	r10, r6
     5ca:	a6 28       	or	r10, r6
     5cc:	a6 28       	or	r10, r6
     5ce:	a6 28       	or	r10, r6
     5d0:	a6 28       	or	r10, r6
     5d2:	a6 28       	or	r10, r6
     5d4:	a6 28       	or	r10, r6
     5d6:	14 28       	or	r1, r4
     5d8:	a6 28       	or	r10, r6
     5da:	a6 28       	or	r10, r6
     5dc:	a6 28       	or	r10, r6
     5de:	a6 28       	or	r10, r6
     5e0:	a6 28       	or	r10, r6
     5e2:	a6 28       	or	r10, r6
     5e4:	a6 28       	or	r10, r6
     5e6:	a6 28       	or	r10, r6
     5e8:	a6 28       	or	r10, r6
     5ea:	17 28       	or	r1, r7
     5ec:	a6 28       	or	r10, r6
     5ee:	a6 28       	or	r10, r6
     5f0:	a6 28       	or	r10, r6
     5f2:	a6 28       	or	r10, r6
     5f4:	a6 28       	or	r10, r6
     5f6:	a6 28       	or	r10, r6
     5f8:	a6 28       	or	r10, r6
     5fa:	a6 28       	or	r10, r6
     5fc:	a6 28       	or	r10, r6
     5fe:	1a 28       	or	r1, r10
     600:	a6 28       	or	r10, r6
     602:	a6 28       	or	r10, r6
     604:	a6 28       	or	r10, r6
     606:	a6 28       	or	r10, r6
     608:	a6 28       	or	r10, r6
     60a:	a6 28       	or	r10, r6
     60c:	a6 28       	or	r10, r6
     60e:	a6 28       	or	r10, r6
     610:	a6 28       	or	r10, r6
     612:	1d 28       	or	r1, r13
     614:	a6 28       	or	r10, r6
     616:	a6 28       	or	r10, r6
     618:	a6 28       	or	r10, r6
     61a:	a6 28       	or	r10, r6
     61c:	a6 28       	or	r10, r6
     61e:	a6 28       	or	r10, r6
     620:	a6 28       	or	r10, r6
     622:	a6 28       	or	r10, r6
     624:	a6 28       	or	r10, r6
     626:	20 28       	or	r2, r0
     628:	a6 28       	or	r10, r6
     62a:	a6 28       	or	r10, r6
     62c:	a6 28       	or	r10, r6
     62e:	a6 28       	or	r10, r6
     630:	a6 28       	or	r10, r6
     632:	a6 28       	or	r10, r6
     634:	a6 28       	or	r10, r6
     636:	a6 28       	or	r10, r6
     638:	a6 28       	or	r10, r6
     63a:	23 28       	or	r2, r3
     63c:	a6 28       	or	r10, r6
     63e:	a6 28       	or	r10, r6
     640:	a6 28       	or	r10, r6
     642:	a6 28       	or	r10, r6
     644:	a6 28       	or	r10, r6
     646:	a6 28       	or	r10, r6
     648:	a6 28       	or	r10, r6
     64a:	a6 28       	or	r10, r6
     64c:	a6 28       	or	r10, r6
     64e:	26 28       	or	r2, r6
     650:	a6 28       	or	r10, r6
     652:	a6 28       	or	r10, r6
     654:	a6 28       	or	r10, r6
     656:	a6 28       	or	r10, r6
     658:	a6 28       	or	r10, r6
     65a:	a6 28       	or	r10, r6
     65c:	a6 28       	or	r10, r6
     65e:	a6 28       	or	r10, r6
     660:	a6 28       	or	r10, r6
     662:	29 28       	or	r2, r9
     664:	a6 28       	or	r10, r6
     666:	a6 28       	or	r10, r6
     668:	a6 28       	or	r10, r6
     66a:	a6 28       	or	r10, r6
     66c:	a6 28       	or	r10, r6
     66e:	a6 28       	or	r10, r6
     670:	a6 28       	or	r10, r6
     672:	a6 28       	or	r10, r6
     674:	a6 28       	or	r10, r6
     676:	2c 28       	or	r2, r12
     678:	a6 28       	or	r10, r6
     67a:	a6 28       	or	r10, r6
     67c:	a6 28       	or	r10, r6
     67e:	a6 28       	or	r10, r6
     680:	a6 28       	or	r10, r6
     682:	a6 28       	or	r10, r6
     684:	a6 28       	or	r10, r6
     686:	a6 28       	or	r10, r6
     688:	a6 28       	or	r10, r6
     68a:	2f 28       	or	r2, r15
     68c:	a6 28       	or	r10, r6
     68e:	a6 28       	or	r10, r6
     690:	a6 28       	or	r10, r6
     692:	a6 28       	or	r10, r6
     694:	a6 28       	or	r10, r6
     696:	a6 28       	or	r10, r6
     698:	a6 28       	or	r10, r6
     69a:	a6 28       	or	r10, r6
     69c:	a6 28       	or	r10, r6
     69e:	32 28       	or	r3, r2
     6a0:	a6 28       	or	r10, r6
     6a2:	a6 28       	or	r10, r6
     6a4:	a6 28       	or	r10, r6
     6a6:	a6 28       	or	r10, r6
     6a8:	a6 28       	or	r10, r6
     6aa:	a6 28       	or	r10, r6
     6ac:	a6 28       	or	r10, r6
     6ae:	a6 28       	or	r10, r6
     6b0:	a6 28       	or	r10, r6
     6b2:	35 28       	or	r3, r5
     6b4:	a6 28       	or	r10, r6
     6b6:	a6 28       	or	r10, r6
     6b8:	a6 28       	or	r10, r6
     6ba:	a6 28       	or	r10, r6
     6bc:	a6 28       	or	r10, r6
     6be:	a6 28       	or	r10, r6
     6c0:	a6 28       	or	r10, r6
     6c2:	a6 28       	or	r10, r6
     6c4:	a6 28       	or	r10, r6
     6c6:	38 28       	or	r3, r8
     6c8:	a6 28       	or	r10, r6
     6ca:	a6 28       	or	r10, r6
     6cc:	a6 28       	or	r10, r6
     6ce:	a6 28       	or	r10, r6
     6d0:	a6 28       	or	r10, r6
     6d2:	a6 28       	or	r10, r6
     6d4:	a6 28       	or	r10, r6
     6d6:	a6 28       	or	r10, r6
     6d8:	a6 28       	or	r10, r6
     6da:	45 28       	or	r4, r5
     6dc:	a6 28       	or	r10, r6
     6de:	a6 28       	or	r10, r6
     6e0:	a6 28       	or	r10, r6
     6e2:	a6 28       	or	r10, r6
     6e4:	a6 28       	or	r10, r6
     6e6:	a6 28       	or	r10, r6
     6e8:	a6 28       	or	r10, r6
     6ea:	a6 28       	or	r10, r6
     6ec:	a6 28       	or	r10, r6
     6ee:	48 28       	or	r4, r8
     6f0:	a6 28       	or	r10, r6
     6f2:	a6 28       	or	r10, r6
     6f4:	a6 28       	or	r10, r6
     6f6:	a6 28       	or	r10, r6
     6f8:	a6 28       	or	r10, r6
     6fa:	a6 28       	or	r10, r6
     6fc:	a6 28       	or	r10, r6
     6fe:	a6 28       	or	r10, r6
     700:	a6 28       	or	r10, r6
     702:	4b 28       	or	r4, r11
     704:	a6 28       	or	r10, r6
     706:	a6 28       	or	r10, r6
     708:	a6 28       	or	r10, r6
     70a:	a6 28       	or	r10, r6
     70c:	a6 28       	or	r10, r6
     70e:	a6 28       	or	r10, r6
     710:	a6 28       	or	r10, r6
     712:	a6 28       	or	r10, r6
     714:	a6 28       	or	r10, r6
     716:	4e 28       	or	r4, r14
     718:	a6 28       	or	r10, r6
     71a:	a6 28       	or	r10, r6
     71c:	a6 28       	or	r10, r6
     71e:	a6 28       	or	r10, r6
     720:	a6 28       	or	r10, r6
     722:	a6 28       	or	r10, r6
     724:	a6 28       	or	r10, r6
     726:	a6 28       	or	r10, r6
     728:	a6 28       	or	r10, r6
     72a:	51 28       	or	r5, r1
     72c:	a6 28       	or	r10, r6
     72e:	a6 28       	or	r10, r6
     730:	a6 28       	or	r10, r6
     732:	a6 28       	or	r10, r6
     734:	a6 28       	or	r10, r6
     736:	a6 28       	or	r10, r6
     738:	a6 28       	or	r10, r6
     73a:	a6 28       	or	r10, r6
     73c:	a6 28       	or	r10, r6
     73e:	56 28       	or	r5, r6
     740:	a6 28       	or	r10, r6
     742:	a6 28       	or	r10, r6
     744:	a6 28       	or	r10, r6
     746:	a6 28       	or	r10, r6
     748:	a6 28       	or	r10, r6
     74a:	a6 28       	or	r10, r6
     74c:	a6 28       	or	r10, r6
     74e:	a6 28       	or	r10, r6
     750:	a6 28       	or	r10, r6
     752:	59 28       	or	r5, r9
     754:	a6 28       	or	r10, r6
     756:	a6 28       	or	r10, r6
     758:	a6 28       	or	r10, r6
     75a:	a6 28       	or	r10, r6
     75c:	a6 28       	or	r10, r6
     75e:	a6 28       	or	r10, r6
     760:	a6 28       	or	r10, r6
     762:	a6 28       	or	r10, r6
     764:	a6 28       	or	r10, r6
     766:	5c 28       	or	r5, r12
     768:	a6 28       	or	r10, r6
     76a:	a6 28       	or	r10, r6
     76c:	a6 28       	or	r10, r6
     76e:	a6 28       	or	r10, r6
     770:	a6 28       	or	r10, r6
     772:	a6 28       	or	r10, r6
     774:	a6 28       	or	r10, r6
     776:	a6 28       	or	r10, r6
     778:	a6 28       	or	r10, r6
     77a:	5f 28       	or	r5, r15
     77c:	a6 28       	or	r10, r6
     77e:	a6 28       	or	r10, r6
     780:	a6 28       	or	r10, r6
     782:	a6 28       	or	r10, r6
     784:	a6 28       	or	r10, r6
     786:	a6 28       	or	r10, r6
     788:	a6 28       	or	r10, r6
     78a:	a6 28       	or	r10, r6
     78c:	a6 28       	or	r10, r6
     78e:	62 28       	or	r6, r2
     790:	a6 28       	or	r10, r6
     792:	a6 28       	or	r10, r6
     794:	a6 28       	or	r10, r6
     796:	a6 28       	or	r10, r6
     798:	a6 28       	or	r10, r6
     79a:	a6 28       	or	r10, r6
     79c:	a6 28       	or	r10, r6
     79e:	a6 28       	or	r10, r6
     7a0:	a6 28       	or	r10, r6
     7a2:	67 28       	or	r6, r7
     7a4:	a6 28       	or	r10, r6
     7a6:	a6 28       	or	r10, r6
     7a8:	a6 28       	or	r10, r6
     7aa:	a6 28       	or	r10, r6
     7ac:	a6 28       	or	r10, r6
     7ae:	a6 28       	or	r10, r6
     7b0:	a6 28       	or	r10, r6
     7b2:	a6 28       	or	r10, r6
     7b4:	a6 28       	or	r10, r6
     7b6:	6a 28       	or	r6, r10
     7b8:	a6 28       	or	r10, r6
     7ba:	a6 28       	or	r10, r6
     7bc:	a6 28       	or	r10, r6
     7be:	a6 28       	or	r10, r6
     7c0:	a6 28       	or	r10, r6
     7c2:	a6 28       	or	r10, r6
     7c4:	a6 28       	or	r10, r6
     7c6:	a6 28       	or	r10, r6
     7c8:	a6 28       	or	r10, r6
     7ca:	6f 28       	or	r6, r15
     7cc:	a6 28       	or	r10, r6
     7ce:	a6 28       	or	r10, r6
     7d0:	a6 28       	or	r10, r6
     7d2:	a6 28       	or	r10, r6
     7d4:	a6 28       	or	r10, r6
     7d6:	a6 28       	or	r10, r6
     7d8:	a6 28       	or	r10, r6
     7da:	a6 28       	or	r10, r6
     7dc:	a6 28       	or	r10, r6
     7de:	74 28       	or	r7, r4
     7e0:	96 28       	or	r9, r6
     7e2:	9b 28       	or	r9, r11
     7e4:	a0 28       	or	r10, r0
     7e6:	a6 28       	or	r10, r6
     7e8:	a6 28       	or	r10, r6
     7ea:	a6 28       	or	r10, r6
     7ec:	a6 28       	or	r10, r6
     7ee:	a6 28       	or	r10, r6
     7f0:	a6 28       	or	r10, r6
     7f2:	79 28       	or	r7, r9
     7f4:	a6 28       	or	r10, r6
     7f6:	a6 28       	or	r10, r6
     7f8:	a6 28       	or	r10, r6
     7fa:	a6 28       	or	r10, r6
     7fc:	a6 28       	or	r10, r6
     7fe:	a6 28       	or	r10, r6
     800:	a6 28       	or	r10, r6
     802:	a6 28       	or	r10, r6
     804:	a6 28       	or	r10, r6
     806:	7c 28       	or	r7, r12
     808:	a6 28       	or	r10, r6
     80a:	a6 28       	or	r10, r6
     80c:	a6 28       	or	r10, r6
     80e:	a6 28       	or	r10, r6
     810:	a6 28       	or	r10, r6
     812:	a6 28       	or	r10, r6
     814:	a6 28       	or	r10, r6
     816:	a6 28       	or	r10, r6
     818:	a6 28       	or	r10, r6
     81a:	7f 28       	or	r7, r15
     81c:	a6 28       	or	r10, r6
     81e:	a6 28       	or	r10, r6
     820:	a6 28       	or	r10, r6
     822:	a6 28       	or	r10, r6
     824:	a6 28       	or	r10, r6
     826:	a6 28       	or	r10, r6
     828:	a6 28       	or	r10, r6
     82a:	a6 28       	or	r10, r6
     82c:	a6 28       	or	r10, r6
     82e:	82 28       	or	r8, r2
     830:	a6 28       	or	r10, r6
     832:	a6 28       	or	r10, r6
     834:	a6 28       	or	r10, r6
     836:	a6 28       	or	r10, r6
     838:	a6 28       	or	r10, r6
     83a:	a6 28       	or	r10, r6
     83c:	a6 28       	or	r10, r6
     83e:	a6 28       	or	r10, r6
     840:	a6 28       	or	r10, r6
     842:	85 28       	or	r8, r5
     844:	a6 28       	or	r10, r6
     846:	a6 28       	or	r10, r6
     848:	a6 28       	or	r10, r6
     84a:	a6 28       	or	r10, r6
     84c:	a6 28       	or	r10, r6
     84e:	a6 28       	or	r10, r6
     850:	a6 28       	or	r10, r6
     852:	a6 28       	or	r10, r6
     854:	a6 28       	or	r10, r6
     856:	8a 28       	or	r8, r10
     858:	a6 28       	or	r10, r6
     85a:	a6 28       	or	r10, r6
     85c:	a6 28       	or	r10, r6
     85e:	a6 28       	or	r10, r6
     860:	a6 28       	or	r10, r6
     862:	a6 28       	or	r10, r6
     864:	a6 28       	or	r10, r6
     866:	a6 28       	or	r10, r6
     868:	a6 28       	or	r10, r6
     86a:	8d 28       	or	r8, r13
     86c:	a6 28       	or	r10, r6
     86e:	a6 28       	or	r10, r6
     870:	a6 28       	or	r10, r6
     872:	a6 28       	or	r10, r6
     874:	a6 28       	or	r10, r6
     876:	a6 28       	or	r10, r6
     878:	a6 28       	or	r10, r6
     87a:	a6 28       	or	r10, r6
     87c:	a6 28       	or	r10, r6
     87e:	90 28       	or	r9, r0
     880:	a6 28       	or	r10, r6
     882:	a6 28       	or	r10, r6
     884:	a6 28       	or	r10, r6
     886:	a6 28       	or	r10, r6
     888:	a6 28       	or	r10, r6
     88a:	a6 28       	or	r10, r6
     88c:	a6 28       	or	r10, r6
     88e:	a6 28       	or	r10, r6
     890:	a6 28       	or	r10, r6
     892:	93 28       	or	r9, r3
     894:	08 00       	.word	0x0008	; ????
     896:	00 00       	nop
     898:	be 92       	st	-X, r11
     89a:	24 49       	sbci	r18, 0x94	; 148
     89c:	12 3e       	cpi	r17, 0xE2	; 226
     89e:	ab aa       	std	Y+51, r10	; 0x33
     8a0:	aa 2a       	or	r10, r26
     8a2:	be cd       	rjmp	.-1156   	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     8a4:	cc cc       	rjmp	.-1640   	; 0x23e <__SREG__+0x1ff>
     8a6:	4c 3e       	cpi	r20, 0xEC	; 236
     8a8:	00 00       	nop
     8aa:	00 80       	ld	r0, Z
     8ac:	be ab       	std	Y+54, r27	; 0x36
     8ae:	aa aa       	std	Y+50, r10	; 0x32
     8b0:	aa 3e       	cpi	r26, 0xEA	; 234
     8b2:	00 00       	nop
     8b4:	00 00       	nop
     8b6:	bf 00       	.word	0x00bf	; ????
     8b8:	00 00       	nop
     8ba:	80 3f       	cpi	r24, 0xF0	; 240
     8bc:	00 00       	nop
     8be:	00 00       	nop
     8c0:	00 08       	sbc	r0, r0
     8c2:	41 78       	andi	r20, 0x81	; 129
     8c4:	d3 bb       	out	0x13, r29	; 19
     8c6:	43 87       	std	Z+11, r20	; 0x0b
     8c8:	d1 13       	cpse	r29, r17
     8ca:	3d 19       	sub	r19, r13
     8cc:	0e 3c       	cpi	r16, 0xCE	; 206
     8ce:	c3 bd       	out	0x23, r28	; 35
     8d0:	42 82       	std	Z+2, r4	; 0x02
     8d2:	ad 2b       	or	r26, r29
     8d4:	3e 68       	ori	r19, 0x8E	; 142
     8d6:	ec 82       	std	Y+4, r14	; 0x04
     8d8:	76 be       	out	0x36, r7	; 54
     8da:	d9 8f       	std	Y+25, r29	; 0x19
     8dc:	e1 a9       	ldd	r30, Z+49	; 0x31
     8de:	3e 4c       	sbci	r19, 0xCE	; 206
     8e0:	80 ef       	ldi	r24, 0xF0	; 240
     8e2:	ff be       	out	0x3f, r15	; 63
     8e4:	01 c4       	rjmp	.+2050   	; 0x10e8 <vListInsert+0x78>
     8e6:	ff 7f       	andi	r31, 0xFF	; 255
     8e8:	3f 00       	.word	0x003f	; ????
     8ea:	00 00       	nop
	...

000008ee <__trampolines_end>:
     8ee:	6e 61       	ori	r22, 0x1E	; 30
     8f0:	6e 00       	.word	0x006e	; ????

000008f2 <__c.2332>:
     8f2:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     902:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     912:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     922:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     932:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     942:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     952:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     962:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     972:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     982:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     992:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     9a2:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     9b2:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     9c2:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     9d2:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     9e2:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000009f0 <R22_Saturation_Temp>:
     9f0:	9a 99 c9 c1 33 33 6b c1 33 33 d3 c0 cd cc cc 3d     ....33k.33.....=
     a00:	48 e1 a2 40 66 66 2e 41 00 00 78 41 9a 99 9d 41     H..@ff.A..xA...A
     a10:	00 00 bc 41 cd cc d8 41 33 33 f3 41 66 66 06 42     ...A...A33.Aff.B
     a20:	66 66 12 42 9a 99 1d 42 66 66 28 42 cd cc 32 42     ff.B...Bff(B..2B
     a30:	cd cc 28 42 66 66 46 42 9a 99 4f 42 66 66 58 42     ..(BffFB..OBffXB
     a40:	33 33 61 42 9a 99 69 42 9a 99 71 42 33 33 79 42     33aB..iB..qB33yB
     a50:	9a 99 80 42 33 33 84 42 cd cc 87 42 66 66 8b 42     ...B33.B...Bff.B
     a60:	00 00 8f 42 66 66 92 42 9a 99 95 42 cd cc 98 42     ...Bff.B...B...B

00000a70 <prvIdleTask>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
     a70:	00 e8       	ldi	r16, 0x80	; 128
     a72:	16 e0       	ldi	r17, 0x06	; 6
     a74:	0f 2e       	mov	r0, r31
     a76:	f0 eb       	ldi	r31, 0xB0	; 176
     a78:	ef 2e       	mov	r14, r31
     a7a:	f6 e0       	ldi	r31, 0x06	; 6
     a7c:	ff 2e       	mov	r15, r31
     a7e:	f0 2d       	mov	r31, r0
     a80:	80 91 7f 06 	lds	r24, 0x067F	; 0x80067f <uxDeletedTasksWaitingCleanUp>
     a84:	88 23       	and	r24, r24
     a86:	11 f1       	breq	.+68     	; 0xacc <prvIdleTask+0x5c>
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	0f 92       	push	r0
     a8e:	d8 01       	movw	r26, r16
     a90:	17 96       	adiw	r26, 0x07	; 7
     a92:	ed 91       	ld	r30, X+
     a94:	fc 91       	ld	r31, X
     a96:	18 97       	sbiw	r26, 0x08	; 8
     a98:	c0 85       	ldd	r28, Z+8	; 0x08
     a9a:	d1 85       	ldd	r29, Z+9	; 0x09
     a9c:	ce 01       	movw	r24, r28
     a9e:	02 96       	adiw	r24, 0x02	; 2
     aa0:	24 d3       	rcall	.+1608   	; 0x10ea <uxListRemove>
     aa2:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <uxCurrentNumberOfTasks>
     aa6:	81 50       	subi	r24, 0x01	; 1
     aa8:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <uxCurrentNumberOfTasks>
     aac:	80 91 7f 06 	lds	r24, 0x067F	; 0x80067f <uxDeletedTasksWaitingCleanUp>
     ab0:	81 50       	subi	r24, 0x01	; 1
     ab2:	80 93 7f 06 	sts	0x067F, r24	; 0x80067f <uxDeletedTasksWaitingCleanUp>
     ab6:	0f 90       	pop	r0
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     abc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     abe:	75 d0       	rcall	.+234    	; 0xbaa <vPortFree>
     ac0:	ce 01       	movw	r24, r28
     ac2:	73 d0       	rcall	.+230    	; 0xbaa <vPortFree>
     ac4:	80 91 7f 06 	lds	r24, 0x067F	; 0x80067f <uxDeletedTasksWaitingCleanUp>
     ac8:	81 11       	cpse	r24, r1
     aca:	de cf       	rjmp	.-68     	; 0xa88 <prvIdleTask+0x18>
     acc:	f7 01       	movw	r30, r14
     ace:	80 81       	ld	r24, Z
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	08 f0       	brcs	.+2      	; 0xad6 <prvIdleTask+0x66>
     ad4:	3d d1       	rcall	.+634    	; 0xd50 <vPortYield>
     ad6:	73 d2       	rcall	.+1254   	; 0xfbe <vApplicationIdleHook>
     ad8:	d3 cf       	rjmp	.-90     	; 0xa80 <prvIdleTask+0x10>

00000ada <__ctors_end>:
     ada:	11 24       	eor	r1, r1
     adc:	1f be       	out	0x3f, r1	; 63
     ade:	cf ef       	ldi	r28, 0xFF	; 255
     ae0:	d1 e2       	ldi	r29, 0x21	; 33
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	cd bf       	out	0x3d, r28	; 61
     ae6:	00 e0       	ldi	r16, 0x00	; 0
     ae8:	0c bf       	out	0x3c, r16	; 60

00000aea <__do_copy_data>:
     aea:	16 e0       	ldi	r17, 0x06	; 6
     aec:	a0 e0       	ldi	r26, 0x00	; 0
     aee:	b2 e0       	ldi	r27, 0x02	; 2
     af0:	e0 e1       	ldi	r30, 0x10	; 16
     af2:	fa eb       	ldi	r31, 0xBA	; 186
     af4:	00 e0       	ldi	r16, 0x00	; 0
     af6:	0b bf       	out	0x3b, r16	; 59
     af8:	02 c0       	rjmp	.+4      	; 0xafe <__do_copy_data+0x14>
     afa:	07 90       	elpm	r0, Z+
     afc:	0d 92       	st	X+, r0
     afe:	a0 36       	cpi	r26, 0x60	; 96
     b00:	b1 07       	cpc	r27, r17
     b02:	d9 f7       	brne	.-10     	; 0xafa <__do_copy_data+0x10>

00000b04 <__do_clear_bss>:
     b04:	2a e0       	ldi	r18, 0x0A	; 10
     b06:	a0 e6       	ldi	r26, 0x60	; 96
     b08:	b6 e0       	ldi	r27, 0x06	; 6
     b0a:	01 c0       	rjmp	.+2      	; 0xb0e <.do_clear_bss_start>

00000b0c <.do_clear_bss_loop>:
     b0c:	1d 92       	st	X+, r1

00000b0e <.do_clear_bss_start>:
     b0e:	af 3a       	cpi	r26, 0xAF	; 175
     b10:	b2 07       	cpc	r27, r18
     b12:	e1 f7       	brne	.-8      	; 0xb0c <.do_clear_bss_loop>
     b14:	0e 94 7e 21 	call	0x42fc	; 0x42fc <main>
     b18:	0c 94 06 5d 	jmp	0xba0c	; 0xba0c <_exit>

00000b1c <__bad_interrupt>:
     b1c:	71 ca       	rjmp	.-2846   	; 0x0 <__vectors>

00000b1e <difftime>:
     b1e:	62 1b       	sub	r22, r18
     b20:	73 0b       	sbc	r23, r19
     b22:	84 0b       	sbc	r24, r20
     b24:	95 0b       	sbc	r25, r21
     b26:	08 95       	ret

00000b28 <time>:
     b28:	fc 01       	movw	r30, r24
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	60 91 ab 0a 	lds	r22, 0x0AAB	; 0x800aab <__system_time>
     b32:	70 91 ac 0a 	lds	r23, 0x0AAC	; 0x800aac <__system_time+0x1>
     b36:	80 91 ad 0a 	lds	r24, 0x0AAD	; 0x800aad <__system_time+0x2>
     b3a:	90 91 ae 0a 	lds	r25, 0x0AAE	; 0x800aae <__system_time+0x3>
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	30 97       	sbiw	r30, 0x00	; 0
     b42:	21 f0       	breq	.+8      	; 0xb4c <time+0x24>
     b44:	60 83       	st	Z, r22
     b46:	71 83       	std	Z+1, r23	; 0x01
     b48:	82 83       	std	Z+2, r24	; 0x02
     b4a:	93 83       	std	Z+3, r25	; 0x03
     b4c:	08 95       	ret

00000b4e <system_tick>:
     b4e:	8f 93       	push	r24
     b50:	8f b7       	in	r24, 0x3f	; 63
     b52:	8f 93       	push	r24
     b54:	f8 94       	cli
     b56:	80 91 ab 0a 	lds	r24, 0x0AAB	; 0x800aab <__system_time>
     b5a:	8f 5f       	subi	r24, 0xFF	; 255
     b5c:	80 93 ab 0a 	sts	0x0AAB, r24	; 0x800aab <__system_time>
     b60:	80 91 ac 0a 	lds	r24, 0x0AAC	; 0x800aac <__system_time+0x1>
     b64:	8f 4f       	sbci	r24, 0xFF	; 255
     b66:	80 93 ac 0a 	sts	0x0AAC, r24	; 0x800aac <__system_time+0x1>
     b6a:	80 91 ad 0a 	lds	r24, 0x0AAD	; 0x800aad <__system_time+0x2>
     b6e:	8f 4f       	sbci	r24, 0xFF	; 255
     b70:	80 93 ad 0a 	sts	0x0AAD, r24	; 0x800aad <__system_time+0x2>
     b74:	80 91 ae 0a 	lds	r24, 0x0AAE	; 0x800aae <__system_time+0x3>
     b78:	8f 4f       	sbci	r24, 0xFF	; 255
     b7a:	80 93 ae 0a 	sts	0x0AAE, r24	; 0x800aae <__system_time+0x3>
     b7e:	8f 91       	pop	r24
     b80:	8f bf       	out	0x3f, r24	; 63
     b82:	8f 91       	pop	r24
     b84:	08 95       	ret

00000b86 <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
     b8c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
     b90:	ce 01       	movw	r24, r28
     b92:	0e 94 cd 59 	call	0xb39a	; 0xb39a <malloc>
     b96:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     b98:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     b9c:	20 97       	sbiw	r28, 0x00	; 0
     b9e:	09 f4       	brne	.+2      	; 0xba2 <pvPortMalloc+0x1c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     ba0:	27 d2       	rcall	.+1102   	; 0xff0 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
     ba2:	ce 01       	movw	r24, r28
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
	if( pv )
     bae:	00 97       	sbiw	r24, 0x00	; 0
     bb0:	41 f0       	breq	.+16     	; 0xbc2 <vPortFree+0x18>
     bb2:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
     bb4:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
		{
			free( pv );
     bb8:	ce 01       	movw	r24, r28
     bba:	0e 94 65 5a 	call	0xb4ca	; 0xb4ca <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
     bbe:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
	}
}
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <pxPortInitialiseStack>:
#elif defined( portUSE_TIMER2 )
        portTIMSK &= ~( _BV(OCIE2B)|_BV(OCIE2A)|_BV(TOIE2) );	// disable all Timer2 interrupts
        ASSR = 0x00;              								// set Timer/Counter2 to be off

#elif defined( portUSE_TIMER3 )
        portTIMSK &= ~( _BV(OCIE3B)|_BV(OCIE3A)|_BV(TOIE3) );	// disable all Timer3 interrupts
     bc8:	31 e1       	ldi	r19, 0x11	; 17
     bca:	fc 01       	movw	r30, r24
     bcc:	30 83       	st	Z, r19
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	22 e2       	ldi	r18, 0x22	; 34
     bd2:	20 83       	st	Z, r18
     bd4:	31 97       	sbiw	r30, 0x01	; 1
     bd6:	a3 e3       	ldi	r26, 0x33	; 51
     bd8:	a0 83       	st	Z, r26
     bda:	31 97       	sbiw	r30, 0x01	; 1
     bdc:	60 83       	st	Z, r22
     bde:	31 97       	sbiw	r30, 0x01	; 1
     be0:	70 83       	st	Z, r23
     be2:	31 97       	sbiw	r30, 0x01	; 1
     be4:	10 82       	st	Z, r1
     be6:	31 97       	sbiw	r30, 0x01	; 1
     be8:	10 82       	st	Z, r1
     bea:	31 97       	sbiw	r30, 0x01	; 1
     bec:	60 e8       	ldi	r22, 0x80	; 128
     bee:	60 83       	st	Z, r22
     bf0:	31 97       	sbiw	r30, 0x01	; 1
     bf2:	10 82       	st	Z, r1
     bf4:	31 97       	sbiw	r30, 0x01	; 1
     bf6:	10 82       	st	Z, r1
     bf8:	31 97       	sbiw	r30, 0x01	; 1
     bfa:	10 82       	st	Z, r1
     bfc:	31 97       	sbiw	r30, 0x01	; 1
     bfe:	62 e0       	ldi	r22, 0x02	; 2
     c00:	60 83       	st	Z, r22
     c02:	31 97       	sbiw	r30, 0x01	; 1
     c04:	63 e0       	ldi	r22, 0x03	; 3
     c06:	60 83       	st	Z, r22
     c08:	31 97       	sbiw	r30, 0x01	; 1
     c0a:	64 e0       	ldi	r22, 0x04	; 4
     c0c:	60 83       	st	Z, r22
     c0e:	31 97       	sbiw	r30, 0x01	; 1
     c10:	65 e0       	ldi	r22, 0x05	; 5
     c12:	60 83       	st	Z, r22
     c14:	31 97       	sbiw	r30, 0x01	; 1
     c16:	66 e0       	ldi	r22, 0x06	; 6
     c18:	60 83       	st	Z, r22
     c1a:	31 97       	sbiw	r30, 0x01	; 1
     c1c:	67 e0       	ldi	r22, 0x07	; 7
     c1e:	60 83       	st	Z, r22
     c20:	31 97       	sbiw	r30, 0x01	; 1
     c22:	68 e0       	ldi	r22, 0x08	; 8
     c24:	60 83       	st	Z, r22
     c26:	31 97       	sbiw	r30, 0x01	; 1
     c28:	69 e0       	ldi	r22, 0x09	; 9
     c2a:	60 83       	st	Z, r22
     c2c:	31 97       	sbiw	r30, 0x01	; 1
     c2e:	60 e1       	ldi	r22, 0x10	; 16
     c30:	60 83       	st	Z, r22
     c32:	31 97       	sbiw	r30, 0x01	; 1
     c34:	30 83       	st	Z, r19
     c36:	31 97       	sbiw	r30, 0x01	; 1
     c38:	32 e1       	ldi	r19, 0x12	; 18
     c3a:	30 83       	st	Z, r19
     c3c:	31 97       	sbiw	r30, 0x01	; 1
     c3e:	33 e1       	ldi	r19, 0x13	; 19
     c40:	30 83       	st	Z, r19
     c42:	31 97       	sbiw	r30, 0x01	; 1
     c44:	34 e1       	ldi	r19, 0x14	; 20
     c46:	30 83       	st	Z, r19
     c48:	31 97       	sbiw	r30, 0x01	; 1
     c4a:	35 e1       	ldi	r19, 0x15	; 21
     c4c:	30 83       	st	Z, r19
     c4e:	31 97       	sbiw	r30, 0x01	; 1
     c50:	36 e1       	ldi	r19, 0x16	; 22
     c52:	30 83       	st	Z, r19
     c54:	31 97       	sbiw	r30, 0x01	; 1
     c56:	37 e1       	ldi	r19, 0x17	; 23
     c58:	30 83       	st	Z, r19
     c5a:	31 97       	sbiw	r30, 0x01	; 1
     c5c:	38 e1       	ldi	r19, 0x18	; 24
     c5e:	30 83       	st	Z, r19
     c60:	31 97       	sbiw	r30, 0x01	; 1
     c62:	39 e1       	ldi	r19, 0x19	; 25
     c64:	30 83       	st	Z, r19
     c66:	31 97       	sbiw	r30, 0x01	; 1
     c68:	30 e2       	ldi	r19, 0x20	; 32
     c6a:	30 83       	st	Z, r19
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	31 e2       	ldi	r19, 0x21	; 33
     c70:	30 83       	st	Z, r19
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	20 83       	st	Z, r18
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	23 e2       	ldi	r18, 0x23	; 35
     c7a:	20 83       	st	Z, r18
     c7c:	31 97       	sbiw	r30, 0x01	; 1
     c7e:	40 83       	st	Z, r20
     c80:	31 97       	sbiw	r30, 0x01	; 1
     c82:	50 83       	st	Z, r21
     c84:	31 97       	sbiw	r30, 0x01	; 1
     c86:	26 e2       	ldi	r18, 0x26	; 38
     c88:	20 83       	st	Z, r18
     c8a:	31 97       	sbiw	r30, 0x01	; 1
     c8c:	27 e2       	ldi	r18, 0x27	; 39
     c8e:	20 83       	st	Z, r18
     c90:	31 97       	sbiw	r30, 0x01	; 1
     c92:	28 e2       	ldi	r18, 0x28	; 40
     c94:	20 83       	st	Z, r18
     c96:	31 97       	sbiw	r30, 0x01	; 1
     c98:	29 e2       	ldi	r18, 0x29	; 41
     c9a:	20 83       	st	Z, r18
     c9c:	31 97       	sbiw	r30, 0x01	; 1
     c9e:	20 e3       	ldi	r18, 0x30	; 48
     ca0:	20 83       	st	Z, r18
     ca2:	31 97       	sbiw	r30, 0x01	; 1
     ca4:	21 e3       	ldi	r18, 0x31	; 49
     ca6:	20 83       	st	Z, r18
     ca8:	89 97       	sbiw	r24, 0x29	; 41
     caa:	08 95       	ret

00000cac <xPortStartScheduler>:
     cac:	88 ee       	ldi	r24, 0xE8	; 232
     cae:	93 e0       	ldi	r25, 0x03	; 3
     cb0:	a0 e0       	ldi	r26, 0x00	; 0
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <portTickRateHz>
     cb8:	90 93 48 07 	sts	0x0748, r25	; 0x800748 <portTickRateHz+0x1>
     cbc:	a0 93 49 07 	sts	0x0749, r26	; 0x800749 <portTickRateHz+0x2>
     cc0:	b0 93 4a 07 	sts	0x074A, r27	; 0x80074a <portTickRateHz+0x3>
     cc4:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <ticksRemainingInSec>
     cc8:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <ticksRemainingInSec+0x1>
     ccc:	a0 93 4d 07 	sts	0x074D, r26	; 0x80074d <ticksRemainingInSec+0x2>
     cd0:	b0 93 4e 07 	sts	0x074E, r27	; 0x80074e <ticksRemainingInSec+0x3>
     cd4:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     cd8:	89 ef       	ldi	r24, 0xF9	; 249
     cda:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     cde:	8b e0       	ldi	r24, 0x0B	; 11
     ce0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
     ce4:	e1 e7       	ldi	r30, 0x71	; 113
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	82 60       	ori	r24, 0x02	; 2
     cec:	80 83       	st	Z, r24
     cee:	a0 91 dc 06 	lds	r26, 0x06DC	; 0x8006dc <pxCurrentTCB>
     cf2:	b0 91 dd 06 	lds	r27, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
     cf6:	cd 91       	ld	r28, X+
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	dd 91       	ld	r29, X+
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	ff 91       	pop	r31
     d00:	ef 91       	pop	r30
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	bf 91       	pop	r27
     d08:	af 91       	pop	r26
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	7f 91       	pop	r23
     d10:	6f 91       	pop	r22
     d12:	5f 91       	pop	r21
     d14:	4f 91       	pop	r20
     d16:	3f 91       	pop	r19
     d18:	2f 91       	pop	r18
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	ff 90       	pop	r15
     d20:	ef 90       	pop	r14
     d22:	df 90       	pop	r13
     d24:	cf 90       	pop	r12
     d26:	bf 90       	pop	r11
     d28:	af 90       	pop	r10
     d2a:	9f 90       	pop	r9
     d2c:	8f 90       	pop	r8
     d2e:	7f 90       	pop	r7
     d30:	6f 90       	pop	r6
     d32:	5f 90       	pop	r5
     d34:	4f 90       	pop	r4
     d36:	3f 90       	pop	r3
     d38:	2f 90       	pop	r2
     d3a:	1f 90       	pop	r1
     d3c:	0f 90       	pop	r0
     d3e:	0c be       	out	0x3c, r0	; 60
     d40:	0f 90       	pop	r0
     d42:	0b be       	out	0x3b, r0	; 59
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	0f 90       	pop	r0
     d4a:	08 95       	ret
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	08 95       	ret

00000d50 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	0f 92       	push	r0
     d58:	0b b6       	in	r0, 0x3b	; 59
     d5a:	0f 92       	push	r0
     d5c:	0c b6       	in	r0, 0x3c	; 60
     d5e:	0f 92       	push	r0
     d60:	1f 92       	push	r1
     d62:	11 24       	eor	r1, r1
     d64:	2f 92       	push	r2
     d66:	3f 92       	push	r3
     d68:	4f 92       	push	r4
     d6a:	5f 92       	push	r5
     d6c:	6f 92       	push	r6
     d6e:	7f 92       	push	r7
     d70:	8f 92       	push	r8
     d72:	9f 92       	push	r9
     d74:	af 92       	push	r10
     d76:	bf 92       	push	r11
     d78:	cf 92       	push	r12
     d7a:	df 92       	push	r13
     d7c:	ef 92       	push	r14
     d7e:	ff 92       	push	r15
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	2f 93       	push	r18
     d86:	3f 93       	push	r19
     d88:	4f 93       	push	r20
     d8a:	5f 93       	push	r21
     d8c:	6f 93       	push	r22
     d8e:	7f 93       	push	r23
     d90:	8f 93       	push	r24
     d92:	9f 93       	push	r25
     d94:	af 93       	push	r26
     d96:	bf 93       	push	r27
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31
     da0:	a0 91 dc 06 	lds	r26, 0x06DC	; 0x8006dc <pxCurrentTCB>
     da4:	b0 91 dd 06 	lds	r27, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
     da8:	0d b6       	in	r0, 0x3d	; 61
     daa:	0d 92       	st	X+, r0
     dac:	0e b6       	in	r0, 0x3e	; 62
     dae:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     db0:	0e 94 09 18 	call	0x3012	; 0x3012 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     db4:	a0 91 dc 06 	lds	r26, 0x06DC	; 0x8006dc <pxCurrentTCB>
     db8:	b0 91 dd 06 	lds	r27, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
     dbc:	cd 91       	ld	r28, X+
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	dd 91       	ld	r29, X+
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	bf 91       	pop	r27
     dce:	af 91       	pop	r26
     dd0:	9f 91       	pop	r25
     dd2:	8f 91       	pop	r24
     dd4:	7f 91       	pop	r23
     dd6:	6f 91       	pop	r22
     dd8:	5f 91       	pop	r21
     dda:	4f 91       	pop	r20
     ddc:	3f 91       	pop	r19
     dde:	2f 91       	pop	r18
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	ff 90       	pop	r15
     de6:	ef 90       	pop	r14
     de8:	df 90       	pop	r13
     dea:	cf 90       	pop	r12
     dec:	bf 90       	pop	r11
     dee:	af 90       	pop	r10
     df0:	9f 90       	pop	r9
     df2:	8f 90       	pop	r8
     df4:	7f 90       	pop	r7
     df6:	6f 90       	pop	r6
     df8:	5f 90       	pop	r5
     dfa:	4f 90       	pop	r4
     dfc:	3f 90       	pop	r3
     dfe:	2f 90       	pop	r2
     e00:	1f 90       	pop	r1
     e02:	0f 90       	pop	r0
     e04:	0c be       	out	0x3c, r0	; 60
     e06:	0f 90       	pop	r0
     e08:	0b be       	out	0x3b, r0	; 59
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
     e10:	08 95       	ret

00000e12 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     e12:	0f 92       	push	r0
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	0f 92       	push	r0
     e1a:	0b b6       	in	r0, 0x3b	; 59
     e1c:	0f 92       	push	r0
     e1e:	0c b6       	in	r0, 0x3c	; 60
     e20:	0f 92       	push	r0
     e22:	1f 92       	push	r1
     e24:	11 24       	eor	r1, r1
     e26:	2f 92       	push	r2
     e28:	3f 92       	push	r3
     e2a:	4f 92       	push	r4
     e2c:	5f 92       	push	r5
     e2e:	6f 92       	push	r6
     e30:	7f 92       	push	r7
     e32:	8f 92       	push	r8
     e34:	9f 92       	push	r9
     e36:	af 92       	push	r10
     e38:	bf 92       	push	r11
     e3a:	cf 92       	push	r12
     e3c:	df 92       	push	r13
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	2f 93       	push	r18
     e48:	3f 93       	push	r19
     e4a:	4f 93       	push	r20
     e4c:	5f 93       	push	r21
     e4e:	6f 93       	push	r22
     e50:	7f 93       	push	r23
     e52:	8f 93       	push	r24
     e54:	9f 93       	push	r25
     e56:	af 93       	push	r26
     e58:	bf 93       	push	r27
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
     e62:	a0 91 dc 06 	lds	r26, 0x06DC	; 0x8006dc <pxCurrentTCB>
     e66:	b0 91 dd 06 	lds	r27, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
     e6a:	0d b6       	in	r0, 0x3d	; 61
     e6c:	0d 92       	st	X+, r0
     e6e:	0e b6       	in	r0, 0x3e	; 62
     e70:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
     e72:	13 be       	out	0x33, r1	; 51
	// start mark - check for start of interrupt - for debugging only
	PORTD |=  _BV(PORTD7);				// Ping IO line.
#endif

#if !defined(portUSE_TIMER2_RTC)
	if (--ticksRemainingInSec == 0)
     e74:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <ticksRemainingInSec>
     e78:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <ticksRemainingInSec+0x1>
     e7c:	a0 91 4d 07 	lds	r26, 0x074D	; 0x80074d <ticksRemainingInSec+0x2>
     e80:	b0 91 4e 07 	lds	r27, 0x074E	; 0x80074e <ticksRemainingInSec+0x3>
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	a1 09       	sbc	r26, r1
     e88:	b1 09       	sbc	r27, r1
     e8a:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <ticksRemainingInSec>
     e8e:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <ticksRemainingInSec+0x1>
     e92:	a0 93 4d 07 	sts	0x074D, r26	; 0x80074d <ticksRemainingInSec+0x2>
     e96:	b0 93 4e 07 	sts	0x074E, r27	; 0x80074e <ticksRemainingInSec+0x3>
     e9a:	89 2b       	or	r24, r25
     e9c:	8a 2b       	or	r24, r26
     e9e:	8b 2b       	or	r24, r27
     ea0:	89 f4       	brne	.+34     	; 0xec4 <vPortYieldFromTick+0xb2>
	{
		system_tick();
     ea2:	55 de       	rcall	.-854    	; 0xb4e <system_tick>
		ticksRemainingInSec = portTickRateHz;
     ea4:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <portTickRateHz>
     ea8:	90 91 48 07 	lds	r25, 0x0748	; 0x800748 <portTickRateHz+0x1>
     eac:	a0 91 49 07 	lds	r26, 0x0749	; 0x800749 <portTickRateHz+0x2>
     eb0:	b0 91 4a 07 	lds	r27, 0x074A	; 0x80074a <portTickRateHz+0x3>
     eb4:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <ticksRemainingInSec>
     eb8:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <ticksRemainingInSec+0x1>
     ebc:	a0 93 4d 07 	sts	0x074D, r26	; 0x80074d <ticksRemainingInSec+0x2>
     ec0:	b0 93 4e 07 	sts	0x074E, r27	; 0x80074e <ticksRemainingInSec+0x3>
	}
#endif

	if( xTaskIncrementTick() != pdFALSE )
     ec4:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <xTaskIncrementTick>
     ec8:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     eca:	0e 94 09 18 	call	0x3012	; 0x3012 <vTaskSwitchContext>
#if defined(DEBUG_PING)
	// end mark - check for end of interrupt - for debugging only
	PORTD &= ~_BV(PORTD7);
#endif

	portRESTORE_CONTEXT();
     ece:	a0 91 dc 06 	lds	r26, 0x06DC	; 0x8006dc <pxCurrentTCB>
     ed2:	b0 91 dd 06 	lds	r27, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
     ed6:	cd 91       	ld	r28, X+
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	dd 91       	ld	r29, X+
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	ff 91       	pop	r31
     ee0:	ef 91       	pop	r30
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	bf 91       	pop	r27
     ee8:	af 91       	pop	r26
     eea:	9f 91       	pop	r25
     eec:	8f 91       	pop	r24
     eee:	7f 91       	pop	r23
     ef0:	6f 91       	pop	r22
     ef2:	5f 91       	pop	r21
     ef4:	4f 91       	pop	r20
     ef6:	3f 91       	pop	r19
     ef8:	2f 91       	pop	r18
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
     f02:	df 90       	pop	r13
     f04:	cf 90       	pop	r12
     f06:	bf 90       	pop	r11
     f08:	af 90       	pop	r10
     f0a:	9f 90       	pop	r9
     f0c:	8f 90       	pop	r8
     f0e:	7f 90       	pop	r7
     f10:	6f 90       	pop	r6
     f12:	5f 90       	pop	r5
     f14:	4f 90       	pop	r4
     f16:	3f 90       	pop	r3
     f18:	2f 90       	pop	r2
     f1a:	1f 90       	pop	r1
     f1c:	0f 90       	pop	r0
     f1e:	0c be       	out	0x3c, r0	; 60
     f20:	0f 90       	pop	r0
     f22:	0b be       	out	0x3b, r0	; 59
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
     f2a:	08 95       	ret

00000f2c <__vector_32>:
	 * count is incremented after the context is saved.
	 */
	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
     f2c:	72 df       	rcall	.-284    	; 0xe12 <vPortYieldFromTick>
		__asm__ __volatile__ ( "reti" );
     f2e:	18 95       	reti

00000f30 <setAnalogMode>:
// For example: if (getMode() == MODE_8_BIT) ...

inline uint8_t getAnalogMode(void)
{
	return (ADMUX >> ADLAR) & 1;
}
     f30:	81 11       	cpse	r24, r1
     f32:	06 c0       	rjmp	.+12     	; 0xf40 <setAnalogMode+0x10>
     f34:	ec e7       	ldi	r30, 0x7C	; 124
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	8f 7d       	andi	r24, 0xDF	; 223
     f3c:	80 83       	st	Z, r24
     f3e:	08 95       	ret
     f40:	ec e7       	ldi	r30, 0x7C	; 124
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	80 62       	ori	r24, 0x20	; 32
     f48:	80 83       	st	Z, r24
     f4a:	08 95       	ret

00000f4c <analogIsConverting>:

// returns 1 if the ADC is in the middle of an conversion, otherwise
// returns 0
inline uint8_t analogIsConverting(void)
{
	return (ADCSRA >> ADSC) & 1;
     f4c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
}
     f50:	86 fb       	bst	r24, 6
     f52:	88 27       	eor	r24, r24
     f54:	80 f9       	bld	r24, 0
     f56:	08 95       	ret

00000f58 <startAnalogConversion>:
//  Orangutan SVP.

inline void startAnalogConversion(uint8_t channel, uint8_t use_internal_reference)
{
	// Channel numbers greater than 15 on 328p or 1284p or 31 on 2560 are invalid.
	if (channel > 0x1F)
     f58:	80 32       	cpi	r24, 0x20	; 32
     f5a:	18 f5       	brcc	.+70     	; 0xfa2 <startAnalogConversion+0x4a>
	{
		return;
	}

	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
     f5c:	97 e8       	ldi	r25, 0x87	; 135
     f5e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	// to channel 0, which can affect the ADC charge capacitor.  For example, if you have a
	// high output impedance voltage on channel 1 and a low output impedance voltage on channel
	// 0, the voltage on channel 0 be briefly applied to the ADC capacitor before every conversion,
	// which could prevent the capacitor from settling to the voltage on channel 1, even over
	// many reads.
	uint8_t tempADMUX = ADMUX;
     f62:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	tempADMUX |= _BV(REFS0);		// Use external capacitor on ARef
	if(use_internal_reference)		// Note: internal reference should NOT be used on devices
     f66:	66 23       	and	r22, r22
     f68:	11 f0       	breq	.+4      	; 0xf6e <startAnalogConversion+0x16>
	{								//  where AREF is connected to an external voltage!
		// use the internal voltage reference
		tempADMUX |= _BV(REFS1);	// Internal reference: 1.1 V on ATmega48/168/328; 2.56 V on ATmega324/644/1284
     f6a:	90 6c       	ori	r25, 0xC0	; 192
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <startAnalogConversion+0x1a>
     f6e:	9f 77       	andi	r25, 0x7F	; 127
	}
	else
	{
		// use AVcc as a reference
		tempADMUX &= ~_BV(REFS1);	// External reference: on AVcc
     f70:	90 64       	ori	r25, 0x40	; 64
	}

	tempADMUX &= ~0x1F;		 // clear channel selection bits of ADMUX
     f72:	90 7e       	andi	r25, 0xE0	; 224
	#ifdef MUX5
	if (channel > 7) {
     f74:	88 30       	cpi	r24, 0x08	; 8
     f76:	40 f0       	brcs	.+16     	; 0xf88 <startAnalogConversion+0x30>
		ADCSRB |= _BV(MUX5);
     f78:	eb e7       	ldi	r30, 0x7B	; 123
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	20 81       	ld	r18, Z
     f7e:	28 60       	ori	r18, 0x08	; 8
     f80:	20 83       	st	Z, r18
		tempADMUX |= channel - 8; 
     f82:	88 50       	subi	r24, 0x08	; 8
     f84:	89 2b       	or	r24, r25
     f86:	06 c0       	rjmp	.+12     	; 0xf94 <startAnalogConversion+0x3c>
		} else {
		ADCSRB &= ~(_BV(MUX5));
     f88:	eb e7       	ldi	r30, 0x7B	; 123
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	20 81       	ld	r18, Z
     f8e:	27 7f       	andi	r18, 0xF7	; 247
     f90:	20 83       	st	Z, r18
		tempADMUX |= channel;
     f92:	89 2b       	or	r24, r25
	}
	#endif
	
	   // we only get this far if channel is less than 32
	ADMUX = tempADMUX;
     f94:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA |= _BV(ADSC); // start the conversion
     f98:	ea e7       	ldi	r30, 0x7A	; 122
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	80 64       	ori	r24, 0x40	; 64
     fa0:	80 83       	st	Z, r24
     fa2:	08 95       	ret

00000fa4 <analogConversionResult>:
// MODE_8_BIT and MODE_10_BIT:
// For example: if (getMode() == MODE_8_BIT) ...

inline uint8_t getAnalogMode(void)
{
	return (ADMUX >> ADLAR) & 1;
     fa4:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
}

// returns the result of the previous ADC conversion.
inline uint16_t analogConversionResult(void)
{
	if (getAnalogMode())				// if left-adjusted (i.e. 8-bit mode)
     fa8:	85 ff       	sbrs	r24, 5
     faa:	04 c0       	rjmp	.+8      	; 0xfb4 <analogConversionResult+0x10>
	{
		return (uint16_t) ADCH;			// 8-bit result
     fac:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	08 95       	ret
	}
	else
	{
		return ADC;				// 10-bit result
     fb4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     fb8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	}
}
     fbc:	08 95       	ret

00000fbe <vApplicationIdleHook>:
	// The corresponding PIN Register bit will always read as zero when this bit is set. When an
	// analogue signal is applied to the ADC7..0 pin and the digital input from this pin is not needed, this
	// bit should be written logic one to reduce power consumption in the digital input buffer.

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
	DIDR0 = 0xFF;
     fbe:	8f ef       	ldi	r24, 0xFF	; 255
     fc0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xFF;
     fc4:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	// When the ACD bit is written logic one, the power to the Analogue Comparator is switched off.
	// This bit can be set at any time to turn off the Analogue Comparator.
	// This will reduce power consumption in Active and Idle mode.
	// When changing the ACD bit, the Analogue Comparator Interrupt must be disabled by clearing the ACIE bit in ACSR.
	// Otherwise an interrupt can occur when the ACD bit is changed.
	ACSR &= ~_BV(ACIE);
     fc8:	80 b7       	in	r24, 0x30	; 48
     fca:	87 7f       	andi	r24, 0xF7	; 247
     fcc:	80 bf       	out	0x30, r24	; 48
	ACSR |=  _BV(ACD);
     fce:	80 b7       	in	r24, 0x30	; 48
     fd0:	80 68       	ori	r24, 0x80	; 128
     fd2:	80 bf       	out	0x30, r24	; 48
	// SLEEP_MODE_PWR_DOWN     _BV(SM1)
	// SLEEP_MODE_PWR_SAVE     (_BV(SM0) | _BV(SM1))
	// SLEEP_MODE_STANDBY      (_BV(SM1) | _BV(SM2))
	// SLEEP_MODE_EXT_STANDBY  (_BV(SM0) | _BV(SM1) | _BV(SM2))

	set_sleep_mode( SLEEP_MODE_IDLE );
     fd4:	83 b7       	in	r24, 0x33	; 51
     fd6:	81 7f       	andi	r24, 0xF1	; 241
     fd8:	83 bf       	out	0x33, r24	; 51

	portENTER_CRITICAL();
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	0f 92       	push	r0
	sleep_enable();
     fe0:	83 b7       	in	r24, 0x33	; 51
     fe2:	81 60       	ori	r24, 0x01	; 1
     fe4:	83 bf       	out	0x33, r24	; 51

#if defined(BODS) && defined(BODSE) // only if there is support to disable the BOD.
	sleep_bod_disable();
#endif

	portEXIT_CRITICAL();
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
	sleep_cpu();		// good night.
     fea:	88 95       	sleep

	sleep_reset();		// reset the sleep_mode() faster than sleep_disable();
     fec:	13 be       	out	0x33, r1	; 51
     fee:	08 95       	ret

00000ff0 <vApplicationMallocFailedHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
     ff0:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     ff2:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ff4:	00 00       	nop
	for(;;)
	{
		_delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
     ff6:	1f 9a       	sbi	0x03, 7	; 3
     ff8:	fd cf       	rjmp	.-6      	; 0xff4 <vApplicationMallocFailedHook+0x4>

00000ffa <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
     ffa:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     ffc:	2f 9a       	sbi	0x05, 7	; 5
     ffe:	00 c0       	rjmp	.+0      	; 0x1000 <vApplicationStackOverflowHook+0x6>
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    1000:	1f 9a       	sbi	0x03, 7	; 3
    1002:	fd cf       	rjmp	.-6      	; 0xffe <vApplicationStackOverflowHook+0x4>

00001004 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1004:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1006:	03 96       	adiw	r24, 0x03	; 3
    1008:	92 83       	std	Z+2, r25	; 0x02
    100a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    100c:	4f ef       	ldi	r20, 0xFF	; 255
    100e:	5f ef       	ldi	r21, 0xFF	; 255
    1010:	ba 01       	movw	r22, r20
    1012:	43 83       	std	Z+3, r20	; 0x03
    1014:	54 83       	std	Z+4, r21	; 0x04
    1016:	65 83       	std	Z+5, r22	; 0x05
    1018:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    101a:	90 87       	std	Z+8, r25	; 0x08
    101c:	87 83       	std	Z+7, r24	; 0x07
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    101e:	92 87       	std	Z+10, r25	; 0x0a
    1020:	81 87       	std	Z+9, r24	; 0x09

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1022:	10 82       	st	Z, r1
    1024:	08 95       	ret

00001026 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1026:	fc 01       	movw	r30, r24
    1028:	13 86       	std	Z+11, r1	; 0x0b
    102a:	12 86       	std	Z+10, r1	; 0x0a
    102c:	08 95       	ret

0000102e <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	9c 01       	movw	r18, r24
    1034:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1036:	dc 01       	movw	r26, r24
    1038:	11 96       	adiw	r26, 0x01	; 1
    103a:	cd 91       	ld	r28, X+
    103c:	dc 91       	ld	r29, X
    103e:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1040:	d5 83       	std	Z+5, r29	; 0x05
    1042:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1044:	8e 81       	ldd	r24, Y+6	; 0x06
    1046:	9f 81       	ldd	r25, Y+7	; 0x07
    1048:	97 83       	std	Z+7, r25	; 0x07
    104a:	86 83       	std	Z+6, r24	; 0x06

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    104c:	8e 81       	ldd	r24, Y+6	; 0x06
    104e:	9f 81       	ldd	r25, Y+7	; 0x07
    1050:	dc 01       	movw	r26, r24
    1052:	15 96       	adiw	r26, 0x05	; 5
    1054:	7c 93       	st	X, r23
    1056:	6e 93       	st	-X, r22
    1058:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxPrevious = pxNewListItem;
    105a:	7f 83       	std	Y+7, r23	; 0x07
    105c:	6e 83       	std	Y+6, r22	; 0x06

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    105e:	33 87       	std	Z+11, r19	; 0x0b
    1060:	22 87       	std	Z+10, r18	; 0x0a

	( pxList->uxNumberOfItems )++;
    1062:	f9 01       	movw	r30, r18
    1064:	80 81       	ld	r24, Z
    1066:	8f 5f       	subi	r24, 0xFF	; 255
    1068:	80 83       	st	Z, r24
}
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	08 95       	ret

00001070 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    107a:	08 81       	ld	r16, Y
    107c:	19 81       	ldd	r17, Y+1	; 0x01
    107e:	2a 81       	ldd	r18, Y+2	; 0x02
    1080:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1082:	0f 3f       	cpi	r16, 0xFF	; 255
    1084:	4f ef       	ldi	r20, 0xFF	; 255
    1086:	14 07       	cpc	r17, r20
    1088:	24 07       	cpc	r18, r20
    108a:	34 07       	cpc	r19, r20
    108c:	21 f4       	brne	.+8      	; 0x1096 <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    108e:	fc 01       	movw	r30, r24
    1090:	a1 85       	ldd	r26, Z+9	; 0x09
    1092:	b2 85       	ldd	r27, Z+10	; 0x0a
    1094:	11 c0       	rjmp	.+34     	; 0x10b8 <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1096:	dc 01       	movw	r26, r24
    1098:	13 96       	adiw	r26, 0x03	; 3
    109a:	01 c0       	rjmp	.+2      	; 0x109e <vListInsert+0x2e>
    109c:	df 01       	movw	r26, r30
    109e:	14 96       	adiw	r26, 0x04	; 4
    10a0:	ed 91       	ld	r30, X+
    10a2:	fc 91       	ld	r31, X
    10a4:	15 97       	sbiw	r26, 0x05	; 5
    10a6:	40 81       	ld	r20, Z
    10a8:	51 81       	ldd	r21, Z+1	; 0x01
    10aa:	62 81       	ldd	r22, Z+2	; 0x02
    10ac:	73 81       	ldd	r23, Z+3	; 0x03
    10ae:	04 17       	cp	r16, r20
    10b0:	15 07       	cpc	r17, r21
    10b2:	26 07       	cpc	r18, r22
    10b4:	37 07       	cpc	r19, r23
    10b6:	90 f7       	brcc	.-28     	; 0x109c <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    10b8:	14 96       	adiw	r26, 0x04	; 4
    10ba:	ed 91       	ld	r30, X+
    10bc:	fc 91       	ld	r31, X
    10be:	15 97       	sbiw	r26, 0x05	; 5
    10c0:	fd 83       	std	Y+5, r31	; 0x05
    10c2:	ec 83       	std	Y+4, r30	; 0x04
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    10c4:	d7 83       	std	Z+7, r29	; 0x07
    10c6:	c6 83       	std	Z+6, r28	; 0x06
	pxNewListItem->pxPrevious = pxIterator;
    10c8:	bf 83       	std	Y+7, r27	; 0x07
    10ca:	ae 83       	std	Y+6, r26	; 0x06
	pxIterator->pxNext = pxNewListItem;
    10cc:	15 96       	adiw	r26, 0x05	; 5
    10ce:	dc 93       	st	X, r29
    10d0:	ce 93       	st	-X, r28
    10d2:	14 97       	sbiw	r26, 0x04	; 4

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    10d4:	9b 87       	std	Y+11, r25	; 0x0b
    10d6:	8a 87       	std	Y+10, r24	; 0x0a

	( pxList->uxNumberOfItems )++;
    10d8:	fc 01       	movw	r30, r24
    10da:	20 81       	ld	r18, Z
    10dc:	2f 5f       	subi	r18, 0xFF	; 255
    10de:	20 83       	st	Z, r18
}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	08 95       	ret

000010ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    10f0:	a2 85       	ldd	r26, Z+10	; 0x0a
    10f2:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    10f4:	c4 81       	ldd	r28, Z+4	; 0x04
    10f6:	d5 81       	ldd	r29, Z+5	; 0x05
    10f8:	86 81       	ldd	r24, Z+6	; 0x06
    10fa:	97 81       	ldd	r25, Z+7	; 0x07
    10fc:	9f 83       	std	Y+7, r25	; 0x07
    10fe:	8e 83       	std	Y+6, r24	; 0x06
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1100:	c6 81       	ldd	r28, Z+6	; 0x06
    1102:	d7 81       	ldd	r29, Z+7	; 0x07
    1104:	84 81       	ldd	r24, Z+4	; 0x04
    1106:	95 81       	ldd	r25, Z+5	; 0x05
    1108:	9d 83       	std	Y+5, r25	; 0x05
    110a:	8c 83       	std	Y+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    110c:	11 96       	adiw	r26, 0x01	; 1
    110e:	8d 91       	ld	r24, X+
    1110:	9c 91       	ld	r25, X
    1112:	12 97       	sbiw	r26, 0x02	; 2
    1114:	e8 17       	cp	r30, r24
    1116:	f9 07       	cpc	r31, r25
    1118:	31 f4       	brne	.+12     	; 0x1126 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    111a:	86 81       	ldd	r24, Z+6	; 0x06
    111c:	97 81       	ldd	r25, Z+7	; 0x07
    111e:	12 96       	adiw	r26, 0x02	; 2
    1120:	9c 93       	st	X, r25
    1122:	8e 93       	st	-X, r24
    1124:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1126:	13 86       	std	Z+11, r1	; 0x0b
    1128:	12 86       	std	Z+10, r1	; 0x0a
	( pxList->uxNumberOfItems )--;
    112a:	8c 91       	ld	r24, X
    112c:	81 50       	subi	r24, 0x01	; 1
    112e:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
    1130:	8c 91       	ld	r24, X
}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	0f 92       	push	r0
    113e:	fc 01       	movw	r30, r24
    1140:	96 8d       	ldd	r25, Z+30	; 0x1e
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	91 11       	cpse	r25, r1
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	08 95       	ret

0000114e <prvCopyDataToQueue>:
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	ec 01       	movw	r28, r24
    1158:	04 2f       	mov	r16, r20
    115a:	1e 8d       	ldd	r17, Y+30	; 0x1e
    115c:	48 a1       	ldd	r20, Y+32	; 0x20
    115e:	41 11       	cpse	r20, r1
    1160:	0c c0       	rjmp	.+24     	; 0x117a <prvCopyDataToQueue+0x2c>
    1162:	88 81       	ld	r24, Y
    1164:	99 81       	ldd	r25, Y+1	; 0x01
    1166:	89 2b       	or	r24, r25
    1168:	09 f0       	breq	.+2      	; 0x116c <prvCopyDataToQueue+0x1e>
    116a:	42 c0       	rjmp	.+132    	; 0x11f0 <prvCopyDataToQueue+0xa2>
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	9b 81       	ldd	r25, Y+3	; 0x03
    1170:	0e 94 2a 1a 	call	0x3454	; 0x3454 <xTaskPriorityDisinherit>
    1174:	1b 82       	std	Y+3, r1	; 0x03
    1176:	1a 82       	std	Y+2, r1	; 0x02
    1178:	42 c0       	rjmp	.+132    	; 0x11fe <prvCopyDataToQueue+0xb0>
    117a:	01 11       	cpse	r16, r1
    117c:	17 c0       	rjmp	.+46     	; 0x11ac <prvCopyDataToQueue+0x5e>
    117e:	50 e0       	ldi	r21, 0x00	; 0
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	9d 81       	ldd	r25, Y+5	; 0x05
    1184:	0e 94 d1 5b 	call	0xb7a2	; 0xb7a2 <memcpy>
    1188:	28 a1       	ldd	r18, Y+32	; 0x20
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	9d 81       	ldd	r25, Y+5	; 0x05
    118e:	82 0f       	add	r24, r18
    1190:	91 1d       	adc	r25, r1
    1192:	9d 83       	std	Y+5, r25	; 0x05
    1194:	8c 83       	std	Y+4, r24	; 0x04
    1196:	2a 81       	ldd	r18, Y+2	; 0x02
    1198:	3b 81       	ldd	r19, Y+3	; 0x03
    119a:	82 17       	cp	r24, r18
    119c:	93 07       	cpc	r25, r19
    119e:	50 f1       	brcs	.+84     	; 0x11f4 <prvCopyDataToQueue+0xa6>
    11a0:	88 81       	ld	r24, Y
    11a2:	99 81       	ldd	r25, Y+1	; 0x01
    11a4:	9d 83       	std	Y+5, r25	; 0x05
    11a6:	8c 83       	std	Y+4, r24	; 0x04
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	29 c0       	rjmp	.+82     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11ac:	50 e0       	ldi	r21, 0x00	; 0
    11ae:	8e 81       	ldd	r24, Y+6	; 0x06
    11b0:	9f 81       	ldd	r25, Y+7	; 0x07
    11b2:	0e 94 d1 5b 	call	0xb7a2	; 0xb7a2 <memcpy>
    11b6:	88 a1       	ldd	r24, Y+32	; 0x20
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	91 95       	neg	r25
    11bc:	81 95       	neg	r24
    11be:	91 09       	sbc	r25, r1
    11c0:	2e 81       	ldd	r18, Y+6	; 0x06
    11c2:	3f 81       	ldd	r19, Y+7	; 0x07
    11c4:	28 0f       	add	r18, r24
    11c6:	39 1f       	adc	r19, r25
    11c8:	3f 83       	std	Y+7, r19	; 0x07
    11ca:	2e 83       	std	Y+6, r18	; 0x06
    11cc:	48 81       	ld	r20, Y
    11ce:	59 81       	ldd	r21, Y+1	; 0x01
    11d0:	24 17       	cp	r18, r20
    11d2:	35 07       	cpc	r19, r21
    11d4:	30 f4       	brcc	.+12     	; 0x11e2 <prvCopyDataToQueue+0x94>
    11d6:	2a 81       	ldd	r18, Y+2	; 0x02
    11d8:	3b 81       	ldd	r19, Y+3	; 0x03
    11da:	82 0f       	add	r24, r18
    11dc:	93 1f       	adc	r25, r19
    11de:	9f 83       	std	Y+7, r25	; 0x07
    11e0:	8e 83       	std	Y+6, r24	; 0x06
    11e2:	02 30       	cpi	r16, 0x02	; 2
    11e4:	49 f4       	brne	.+18     	; 0x11f8 <prvCopyDataToQueue+0xaa>
    11e6:	11 23       	and	r17, r17
    11e8:	49 f0       	breq	.+18     	; 0x11fc <prvCopyDataToQueue+0xae>
    11ea:	11 50       	subi	r17, 0x01	; 1
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	07 c0       	rjmp	.+14     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	05 c0       	rjmp	.+10     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <prvCopyDataToQueue+0xb0>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	1f 5f       	subi	r17, 0xFF	; 255
    1200:	1e 8f       	std	Y+30, r17	; 0x1e
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	08 95       	ret

0000120c <prvCopyDataFromQueue>:
    120c:	fc 01       	movw	r30, r24
    120e:	40 a1       	ldd	r20, Z+32	; 0x20
    1210:	44 23       	and	r20, r20
    1212:	a9 f0       	breq	.+42     	; 0x123e <prvCopyDataFromQueue+0x32>
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	26 81       	ldd	r18, Z+6	; 0x06
    1218:	37 81       	ldd	r19, Z+7	; 0x07
    121a:	24 0f       	add	r18, r20
    121c:	35 1f       	adc	r19, r21
    121e:	37 83       	std	Z+7, r19	; 0x07
    1220:	26 83       	std	Z+6, r18	; 0x06
    1222:	82 81       	ldd	r24, Z+2	; 0x02
    1224:	93 81       	ldd	r25, Z+3	; 0x03
    1226:	28 17       	cp	r18, r24
    1228:	39 07       	cpc	r19, r25
    122a:	20 f0       	brcs	.+8      	; 0x1234 <prvCopyDataFromQueue+0x28>
    122c:	80 81       	ld	r24, Z
    122e:	91 81       	ldd	r25, Z+1	; 0x01
    1230:	97 83       	std	Z+7, r25	; 0x07
    1232:	86 83       	std	Z+6, r24	; 0x06
    1234:	cb 01       	movw	r24, r22
    1236:	66 81       	ldd	r22, Z+6	; 0x06
    1238:	77 81       	ldd	r23, Z+7	; 0x07
    123a:	0c 94 d1 5b 	jmp	0xb7a2	; 0xb7a2 <memcpy>
    123e:	08 95       	ret

00001240 <prvUnlockQueue>:
    1240:	ef 92       	push	r14
    1242:	ff 92       	push	r15
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	8c 01       	movw	r16, r24
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	0f 92       	push	r0
    1252:	fc 01       	movw	r30, r24
    1254:	c2 a1       	ldd	r28, Z+34	; 0x22
    1256:	1c 16       	cp	r1, r28
    1258:	ac f4       	brge	.+42     	; 0x1284 <prvUnlockQueue+0x44>
    125a:	83 89       	ldd	r24, Z+19	; 0x13
    125c:	81 11       	cpse	r24, r1
    125e:	06 c0       	rjmp	.+12     	; 0x126c <prvUnlockQueue+0x2c>
    1260:	11 c0       	rjmp	.+34     	; 0x1284 <prvUnlockQueue+0x44>
    1262:	f8 01       	movw	r30, r16
    1264:	83 89       	ldd	r24, Z+19	; 0x13
    1266:	81 11       	cpse	r24, r1
    1268:	05 c0       	rjmp	.+10     	; 0x1274 <prvUnlockQueue+0x34>
    126a:	0c c0       	rjmp	.+24     	; 0x1284 <prvUnlockQueue+0x44>
    126c:	78 01       	movw	r14, r16
    126e:	f3 e1       	ldi	r31, 0x13	; 19
    1270:	ef 0e       	add	r14, r31
    1272:	f1 1c       	adc	r15, r1
    1274:	c7 01       	movw	r24, r14
    1276:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    127a:	81 11       	cpse	r24, r1
    127c:	0e 94 aa 19 	call	0x3354	; 0x3354 <vTaskMissedYield>
    1280:	c1 50       	subi	r28, 0x01	; 1
    1282:	79 f7       	brne	.-34     	; 0x1262 <prvUnlockQueue+0x22>
    1284:	8f ef       	ldi	r24, 0xFF	; 255
    1286:	f8 01       	movw	r30, r16
    1288:	82 a3       	std	Z+34, r24	; 0x22
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	0f 92       	push	r0
    1294:	c1 a1       	ldd	r28, Z+33	; 0x21
    1296:	1c 16       	cp	r1, r28
    1298:	ac f4       	brge	.+42     	; 0x12c4 <prvUnlockQueue+0x84>
    129a:	80 85       	ldd	r24, Z+8	; 0x08
    129c:	81 11       	cpse	r24, r1
    129e:	06 c0       	rjmp	.+12     	; 0x12ac <prvUnlockQueue+0x6c>
    12a0:	11 c0       	rjmp	.+34     	; 0x12c4 <prvUnlockQueue+0x84>
    12a2:	f8 01       	movw	r30, r16
    12a4:	80 85       	ldd	r24, Z+8	; 0x08
    12a6:	81 11       	cpse	r24, r1
    12a8:	05 c0       	rjmp	.+10     	; 0x12b4 <prvUnlockQueue+0x74>
    12aa:	0c c0       	rjmp	.+24     	; 0x12c4 <prvUnlockQueue+0x84>
    12ac:	78 01       	movw	r14, r16
    12ae:	f8 e0       	ldi	r31, 0x08	; 8
    12b0:	ef 0e       	add	r14, r31
    12b2:	f1 1c       	adc	r15, r1
    12b4:	c7 01       	movw	r24, r14
    12b6:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    12ba:	81 11       	cpse	r24, r1
    12bc:	0e 94 aa 19 	call	0x3354	; 0x3354 <vTaskMissedYield>
    12c0:	c1 50       	subi	r28, 0x01	; 1
    12c2:	79 f7       	brne	.-34     	; 0x12a2 <prvUnlockQueue+0x62>
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	f8 01       	movw	r30, r16
    12c8:	81 a3       	std	Z+33, r24	; 0x21
    12ca:	0f 90       	pop	r0
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	ff 90       	pop	r15
    12d6:	ef 90       	pop	r14
    12d8:	08 95       	ret

000012da <xQueueGenericReset>:
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	ec 01       	movw	r28, r24
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	0f 92       	push	r0
    12e6:	48 81       	ld	r20, Y
    12e8:	59 81       	ldd	r21, Y+1	; 0x01
    12ea:	28 a1       	ldd	r18, Y+32	; 0x20
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	7f 8d       	ldd	r23, Y+31	; 0x1f
    12f0:	72 9f       	mul	r23, r18
    12f2:	c0 01       	movw	r24, r0
    12f4:	73 9f       	mul	r23, r19
    12f6:	90 0d       	add	r25, r0
    12f8:	11 24       	eor	r1, r1
    12fa:	fa 01       	movw	r30, r20
    12fc:	e8 0f       	add	r30, r24
    12fe:	f9 1f       	adc	r31, r25
    1300:	fb 83       	std	Y+3, r31	; 0x03
    1302:	ea 83       	std	Y+2, r30	; 0x02
    1304:	1e 8e       	std	Y+30, r1	; 0x1e
    1306:	5d 83       	std	Y+5, r21	; 0x05
    1308:	4c 83       	std	Y+4, r20	; 0x04
    130a:	82 1b       	sub	r24, r18
    130c:	93 0b       	sbc	r25, r19
    130e:	84 0f       	add	r24, r20
    1310:	95 1f       	adc	r25, r21
    1312:	9f 83       	std	Y+7, r25	; 0x07
    1314:	8e 83       	std	Y+6, r24	; 0x06
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	89 a3       	std	Y+33, r24	; 0x21
    131a:	8a a3       	std	Y+34, r24	; 0x22
    131c:	61 11       	cpse	r22, r1
    131e:	0b c0       	rjmp	.+22     	; 0x1336 <xQueueGenericReset+0x5c>
    1320:	88 85       	ldd	r24, Y+8	; 0x08
    1322:	88 23       	and	r24, r24
    1324:	71 f0       	breq	.+28     	; 0x1342 <xQueueGenericReset+0x68>
    1326:	ce 01       	movw	r24, r28
    1328:	08 96       	adiw	r24, 0x08	; 8
    132a:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    132e:	88 23       	and	r24, r24
    1330:	41 f0       	breq	.+16     	; 0x1342 <xQueueGenericReset+0x68>
    1332:	0e dd       	rcall	.-1508   	; 0xd50 <vPortYield>
    1334:	06 c0       	rjmp	.+12     	; 0x1342 <xQueueGenericReset+0x68>
    1336:	ce 01       	movw	r24, r28
    1338:	08 96       	adiw	r24, 0x08	; 8
    133a:	64 de       	rcall	.-824    	; 0x1004 <vListInitialise>
    133c:	ce 01       	movw	r24, r28
    133e:	43 96       	adiw	r24, 0x13	; 19
    1340:	61 de       	rcall	.-830    	; 0x1004 <vListInitialise>
    1342:	0f 90       	pop	r0
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	08 95       	ret

0000134e <xQueueGenericCreate>:
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	08 2f       	mov	r16, r24
    1358:	16 2f       	mov	r17, r22
    135a:	66 23       	and	r22, r22
    135c:	b1 f0       	breq	.+44     	; 0x138a <xQueueGenericCreate+0x3c>
    135e:	86 9f       	mul	r24, r22
    1360:	c0 01       	movw	r24, r0
    1362:	11 24       	eor	r1, r1
    1364:	83 96       	adiw	r24, 0x23	; 35
    1366:	0f dc       	rcall	.-2018   	; 0xb86 <pvPortMalloc>
    1368:	ec 01       	movw	r28, r24
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	39 f4       	brne	.+14     	; 0x137c <xQueueGenericCreate+0x2e>
    136e:	13 c0       	rjmp	.+38     	; 0x1396 <xQueueGenericCreate+0x48>
    1370:	0f 8f       	std	Y+31, r16	; 0x1f
    1372:	18 a3       	std	Y+32, r17	; 0x20
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	ce 01       	movw	r24, r28
    1378:	b0 df       	rcall	.-160    	; 0x12da <xQueueGenericReset>
    137a:	0d c0       	rjmp	.+26     	; 0x1396 <xQueueGenericCreate+0x48>
    137c:	83 96       	adiw	r24, 0x23	; 35
    137e:	99 83       	std	Y+1, r25	; 0x01
    1380:	88 83       	st	Y, r24
    1382:	f6 cf       	rjmp	.-20     	; 0x1370 <xQueueGenericCreate+0x22>
    1384:	d9 83       	std	Y+1, r29	; 0x01
    1386:	c8 83       	st	Y, r28
    1388:	f3 cf       	rjmp	.-26     	; 0x1370 <xQueueGenericCreate+0x22>
    138a:	83 e2       	ldi	r24, 0x23	; 35
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	fb db       	rcall	.-2058   	; 0xb86 <pvPortMalloc>
    1390:	ec 01       	movw	r28, r24
    1392:	89 2b       	or	r24, r25
    1394:	b9 f7       	brne	.-18     	; 0x1384 <xQueueGenericCreate+0x36>
    1396:	ce 01       	movw	r24, r28
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	08 95       	ret

000013a2 <xQueueGenericSend>:
    13a2:	9f 92       	push	r9
    13a4:	af 92       	push	r10
    13a6:	bf 92       	push	r11
    13a8:	cf 92       	push	r12
    13aa:	df 92       	push	r13
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	29 97       	sbiw	r28, 0x09	; 9
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	7c 01       	movw	r14, r24
    13ca:	5b 01       	movw	r10, r22
    13cc:	2e 83       	std	Y+6, r18	; 0x06
    13ce:	3f 83       	std	Y+7, r19	; 0x07
    13d0:	48 87       	std	Y+8, r20	; 0x08
    13d2:	59 87       	std	Y+9, r21	; 0x09
    13d4:	10 e0       	ldi	r17, 0x00	; 0
    13d6:	99 24       	eor	r9, r9
    13d8:	93 94       	inc	r9
    13da:	6c 01       	movw	r12, r24
    13dc:	88 e0       	ldi	r24, 0x08	; 8
    13de:	c8 0e       	add	r12, r24
    13e0:	d1 1c       	adc	r13, r1
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	0f 92       	push	r0
    13e8:	f7 01       	movw	r30, r14
    13ea:	96 8d       	ldd	r25, Z+30	; 0x1e
    13ec:	87 8d       	ldd	r24, Z+31	; 0x1f
    13ee:	98 17       	cp	r25, r24
    13f0:	10 f0       	brcs	.+4      	; 0x13f6 <xQueueGenericSend+0x54>
    13f2:	02 30       	cpi	r16, 0x02	; 2
    13f4:	b1 f4       	brne	.+44     	; 0x1422 <xQueueGenericSend+0x80>
    13f6:	40 2f       	mov	r20, r16
    13f8:	b5 01       	movw	r22, r10
    13fa:	c7 01       	movw	r24, r14
    13fc:	a8 de       	rcall	.-688    	; 0x114e <prvCopyDataToQueue>
    13fe:	f7 01       	movw	r30, r14
    1400:	93 89       	ldd	r25, Z+19	; 0x13
    1402:	99 23       	and	r25, r25
    1404:	41 f0       	breq	.+16     	; 0x1416 <xQueueGenericSend+0x74>
    1406:	c7 01       	movw	r24, r14
    1408:	43 96       	adiw	r24, 0x13	; 19
    140a:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    140e:	88 23       	and	r24, r24
    1410:	21 f0       	breq	.+8      	; 0x141a <xQueueGenericSend+0x78>
    1412:	9e dc       	rcall	.-1732   	; 0xd50 <vPortYield>
    1414:	02 c0       	rjmp	.+4      	; 0x141a <xQueueGenericSend+0x78>
    1416:	81 11       	cpse	r24, r1
    1418:	9b dc       	rcall	.-1738   	; 0xd50 <vPortYield>
    141a:	0f 90       	pop	r0
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	52 c0       	rjmp	.+164    	; 0x14c6 <xQueueGenericSend+0x124>
    1422:	8e 81       	ldd	r24, Y+6	; 0x06
    1424:	9f 81       	ldd	r25, Y+7	; 0x07
    1426:	a8 85       	ldd	r26, Y+8	; 0x08
    1428:	b9 85       	ldd	r27, Y+9	; 0x09
    142a:	89 2b       	or	r24, r25
    142c:	8a 2b       	or	r24, r26
    142e:	8b 2b       	or	r24, r27
    1430:	21 f4       	brne	.+8      	; 0x143a <xQueueGenericSend+0x98>
    1432:	0f 90       	pop	r0
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	46 c0       	rjmp	.+140    	; 0x14c6 <xQueueGenericSend+0x124>
    143a:	11 11       	cpse	r17, r1
    143c:	05 c0       	rjmp	.+10     	; 0x1448 <xQueueGenericSend+0xa6>
    143e:	ce 01       	movw	r24, r28
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    1446:	19 2d       	mov	r17, r9
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	0f 92       	push	r0
    1456:	f7 01       	movw	r30, r14
    1458:	81 a1       	ldd	r24, Z+33	; 0x21
    145a:	8f 3f       	cpi	r24, 0xFF	; 255
    145c:	09 f4       	brne	.+2      	; 0x1460 <xQueueGenericSend+0xbe>
    145e:	11 a2       	std	Z+33, r1	; 0x21
    1460:	f7 01       	movw	r30, r14
    1462:	82 a1       	ldd	r24, Z+34	; 0x22
    1464:	8f 3f       	cpi	r24, 0xFF	; 255
    1466:	09 f4       	brne	.+2      	; 0x146a <xQueueGenericSend+0xc8>
    1468:	12 a2       	std	Z+34, r1	; 0x22
    146a:	0f 90       	pop	r0
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	be 01       	movw	r22, r28
    1470:	6a 5f       	subi	r22, 0xFA	; 250
    1472:	7f 4f       	sbci	r23, 0xFF	; 255
    1474:	ce 01       	movw	r24, r28
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    147c:	81 11       	cpse	r24, r1
    147e:	1e c0       	rjmp	.+60     	; 0x14bc <xQueueGenericSend+0x11a>
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	0f 92       	push	r0
    1486:	f7 01       	movw	r30, r14
    1488:	96 8d       	ldd	r25, Z+30	; 0x1e
    148a:	87 8d       	ldd	r24, Z+31	; 0x1f
    148c:	0f 90       	pop	r0
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	98 13       	cpse	r25, r24
    1492:	0f c0       	rjmp	.+30     	; 0x14b2 <xQueueGenericSend+0x110>
    1494:	4e 81       	ldd	r20, Y+6	; 0x06
    1496:	5f 81       	ldd	r21, Y+7	; 0x07
    1498:	68 85       	ldd	r22, Y+8	; 0x08
    149a:	79 85       	ldd	r23, Y+9	; 0x09
    149c:	c6 01       	movw	r24, r12
    149e:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    14a2:	c7 01       	movw	r24, r14
    14a4:	cd de       	rcall	.-614    	; 0x1240 <prvUnlockQueue>
    14a6:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14aa:	81 11       	cpse	r24, r1
    14ac:	9a cf       	rjmp	.-204    	; 0x13e2 <xQueueGenericSend+0x40>
    14ae:	50 dc       	rcall	.-1888   	; 0xd50 <vPortYield>
    14b0:	98 cf       	rjmp	.-208    	; 0x13e2 <xQueueGenericSend+0x40>
    14b2:	c7 01       	movw	r24, r14
    14b4:	c5 de       	rcall	.-630    	; 0x1240 <prvUnlockQueue>
    14b6:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14ba:	93 cf       	rjmp	.-218    	; 0x13e2 <xQueueGenericSend+0x40>
    14bc:	c7 01       	movw	r24, r14
    14be:	c0 de       	rcall	.-640    	; 0x1240 <prvUnlockQueue>
    14c0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	29 96       	adiw	r28, 0x09	; 9
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	ff 90       	pop	r15
    14dc:	ef 90       	pop	r14
    14de:	df 90       	pop	r13
    14e0:	cf 90       	pop	r12
    14e2:	bf 90       	pop	r11
    14e4:	af 90       	pop	r10
    14e6:	9f 90       	pop	r9
    14e8:	08 95       	ret

000014ea <xQueueCreateMutex>:
    14ea:	0f 93       	push	r16
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	48 2f       	mov	r20, r24
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	2b df       	rcall	.-426    	; 0x134e <xQueueGenericCreate>
    14f8:	ec 01       	movw	r28, r24
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	61 f0       	breq	.+24     	; 0x1516 <xQueueCreateMutex+0x2c>
    14fe:	1b 82       	std	Y+3, r1	; 0x03
    1500:	1a 82       	std	Y+2, r1	; 0x02
    1502:	19 82       	std	Y+1, r1	; 0x01
    1504:	18 82       	st	Y, r1
    1506:	1e 82       	std	Y+6, r1	; 0x06
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	a9 01       	movw	r20, r18
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	46 df       	rcall	.-372    	; 0x13a2 <xQueueGenericSend>
    1516:	ce 01       	movw	r24, r28
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	0f 91       	pop	r16
    151e:	08 95       	ret

00001520 <xQueueGenericSendFromISR>:
    1520:	ef 92       	push	r14
    1522:	ff 92       	push	r15
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	8a 01       	movw	r16, r20
    152e:	fc 01       	movw	r30, r24
    1530:	56 8d       	ldd	r21, Z+30	; 0x1e
    1532:	37 8d       	ldd	r19, Z+31	; 0x1f
    1534:	53 17       	cp	r21, r19
    1536:	10 f0       	brcs	.+4      	; 0x153c <xQueueGenericSendFromISR+0x1c>
    1538:	22 30       	cpi	r18, 0x02	; 2
    153a:	e9 f4       	brne	.+58     	; 0x1576 <xQueueGenericSendFromISR+0x56>
    153c:	42 2f       	mov	r20, r18
    153e:	78 01       	movw	r14, r16
    1540:	ec 01       	movw	r28, r24
    1542:	1a a1       	ldd	r17, Y+34	; 0x22
    1544:	04 de       	rcall	.-1016   	; 0x114e <prvCopyDataToQueue>
    1546:	1f 3f       	cpi	r17, 0xFF	; 255
    1548:	81 f4       	brne	.+32     	; 0x156a <xQueueGenericSendFromISR+0x4a>
    154a:	8b 89       	ldd	r24, Y+19	; 0x13
    154c:	88 23       	and	r24, r24
    154e:	a9 f0       	breq	.+42     	; 0x157a <xQueueGenericSendFromISR+0x5a>
    1550:	ce 01       	movw	r24, r28
    1552:	43 96       	adiw	r24, 0x13	; 19
    1554:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    1558:	88 23       	and	r24, r24
    155a:	89 f0       	breq	.+34     	; 0x157e <xQueueGenericSendFromISR+0x5e>
    155c:	e1 14       	cp	r14, r1
    155e:	f1 04       	cpc	r15, r1
    1560:	81 f0       	breq	.+32     	; 0x1582 <xQueueGenericSendFromISR+0x62>
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	f7 01       	movw	r30, r14
    1566:	80 83       	st	Z, r24
    1568:	0d c0       	rjmp	.+26     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    156a:	ff 24       	eor	r15, r15
    156c:	f3 94       	inc	r15
    156e:	f1 0e       	add	r15, r17
    1570:	fa a2       	std	Y+34, r15	; 0x22
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	07 c0       	rjmp	.+14     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	05 c0       	rjmp	.+10     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <xQueueGenericSendFromISR+0x64>
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	01 c0       	rjmp	.+2      	; 0x1584 <xQueueGenericSendFromISR+0x64>
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	ff 90       	pop	r15
    158e:	ef 90       	pop	r14
    1590:	08 95       	ret

00001592 <xQueueGiveFromISR>:
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	fc 01       	movw	r30, r24
    1598:	86 8d       	ldd	r24, Z+30	; 0x1e
    159a:	97 8d       	ldd	r25, Z+31	; 0x1f
    159c:	89 17       	cp	r24, r25
    159e:	c0 f4       	brcc	.+48     	; 0x15d0 <xQueueGiveFromISR+0x3e>
    15a0:	92 a1       	ldd	r25, Z+34	; 0x22
    15a2:	8f 5f       	subi	r24, 0xFF	; 255
    15a4:	86 8f       	std	Z+30, r24	; 0x1e
    15a6:	9f 3f       	cpi	r25, 0xFF	; 255
    15a8:	79 f4       	brne	.+30     	; 0x15c8 <xQueueGiveFromISR+0x36>
    15aa:	83 89       	ldd	r24, Z+19	; 0x13
    15ac:	88 23       	and	r24, r24
    15ae:	91 f0       	breq	.+36     	; 0x15d4 <xQueueGiveFromISR+0x42>
    15b0:	eb 01       	movw	r28, r22
    15b2:	cf 01       	movw	r24, r30
    15b4:	43 96       	adiw	r24, 0x13	; 19
    15b6:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    15ba:	88 23       	and	r24, r24
    15bc:	69 f0       	breq	.+26     	; 0x15d8 <xQueueGiveFromISR+0x46>
    15be:	20 97       	sbiw	r28, 0x00	; 0
    15c0:	69 f0       	breq	.+26     	; 0x15dc <xQueueGiveFromISR+0x4a>
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	88 83       	st	Y, r24
    15c6:	0b c0       	rjmp	.+22     	; 0x15de <xQueueGiveFromISR+0x4c>
    15c8:	9f 5f       	subi	r25, 0xFF	; 255
    15ca:	92 a3       	std	Z+34, r25	; 0x22
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	07 c0       	rjmp	.+14     	; 0x15de <xQueueGiveFromISR+0x4c>
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	05 c0       	rjmp	.+10     	; 0x15de <xQueueGiveFromISR+0x4c>
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	03 c0       	rjmp	.+6      	; 0x15de <xQueueGiveFromISR+0x4c>
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	01 c0       	rjmp	.+2      	; 0x15de <xQueueGiveFromISR+0x4c>
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	08 95       	ret

000015e4 <xQueueReceive>:
    15e4:	9f 92       	push	r9
    15e6:	af 92       	push	r10
    15e8:	bf 92       	push	r11
    15ea:	cf 92       	push	r12
    15ec:	df 92       	push	r13
    15ee:	ef 92       	push	r14
    15f0:	ff 92       	push	r15
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	29 97       	sbiw	r28, 0x09	; 9
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	8c 01       	movw	r16, r24
    160c:	5b 01       	movw	r10, r22
    160e:	2e 83       	std	Y+6, r18	; 0x06
    1610:	3f 83       	std	Y+7, r19	; 0x07
    1612:	48 87       	std	Y+8, r20	; 0x08
    1614:	59 87       	std	Y+9, r21	; 0x09
    1616:	e1 2c       	mov	r14, r1
    1618:	99 24       	eor	r9, r9
    161a:	93 94       	inc	r9
    161c:	6c 01       	movw	r12, r24
    161e:	83 e1       	ldi	r24, 0x13	; 19
    1620:	c8 0e       	add	r12, r24
    1622:	d1 1c       	adc	r13, r1
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	0f 92       	push	r0
    162a:	f8 01       	movw	r30, r16
    162c:	f6 8c       	ldd	r15, Z+30	; 0x1e
    162e:	ff 20       	and	r15, r15
    1630:	99 f0       	breq	.+38     	; 0x1658 <xQueueReceive+0x74>
    1632:	b5 01       	movw	r22, r10
    1634:	c8 01       	movw	r24, r16
    1636:	ea dd       	rcall	.-1068   	; 0x120c <prvCopyDataFromQueue>
    1638:	fa 94       	dec	r15
    163a:	f8 01       	movw	r30, r16
    163c:	f6 8e       	std	Z+30, r15	; 0x1e
    163e:	80 85       	ldd	r24, Z+8	; 0x08
    1640:	88 23       	and	r24, r24
    1642:	31 f0       	breq	.+12     	; 0x1650 <xQueueReceive+0x6c>
    1644:	c8 01       	movw	r24, r16
    1646:	08 96       	adiw	r24, 0x08	; 8
    1648:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    164c:	81 11       	cpse	r24, r1
    164e:	80 db       	rcall	.-2304   	; 0xd50 <vPortYield>
    1650:	0f 90       	pop	r0
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	51 c0       	rjmp	.+162    	; 0x16fa <xQueueReceive+0x116>
    1658:	8e 81       	ldd	r24, Y+6	; 0x06
    165a:	9f 81       	ldd	r25, Y+7	; 0x07
    165c:	a8 85       	ldd	r26, Y+8	; 0x08
    165e:	b9 85       	ldd	r27, Y+9	; 0x09
    1660:	89 2b       	or	r24, r25
    1662:	8a 2b       	or	r24, r26
    1664:	8b 2b       	or	r24, r27
    1666:	21 f4       	brne	.+8      	; 0x1670 <xQueueReceive+0x8c>
    1668:	0f 90       	pop	r0
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	45 c0       	rjmp	.+138    	; 0x16fa <xQueueReceive+0x116>
    1670:	e1 10       	cpse	r14, r1
    1672:	05 c0       	rjmp	.+10     	; 0x167e <xQueueReceive+0x9a>
    1674:	ce 01       	movw	r24, r28
    1676:	01 96       	adiw	r24, 0x01	; 1
    1678:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    167c:	e9 2c       	mov	r14, r9
    167e:	0f 90       	pop	r0
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	0f 92       	push	r0
    168c:	f8 01       	movw	r30, r16
    168e:	81 a1       	ldd	r24, Z+33	; 0x21
    1690:	8f 3f       	cpi	r24, 0xFF	; 255
    1692:	09 f4       	brne	.+2      	; 0x1696 <xQueueReceive+0xb2>
    1694:	11 a2       	std	Z+33, r1	; 0x21
    1696:	f8 01       	movw	r30, r16
    1698:	82 a1       	ldd	r24, Z+34	; 0x22
    169a:	8f 3f       	cpi	r24, 0xFF	; 255
    169c:	09 f4       	brne	.+2      	; 0x16a0 <xQueueReceive+0xbc>
    169e:	12 a2       	std	Z+34, r1	; 0x22
    16a0:	0f 90       	pop	r0
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	be 01       	movw	r22, r28
    16a6:	6a 5f       	subi	r22, 0xFA	; 250
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	ce 01       	movw	r24, r28
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    16b2:	81 11       	cpse	r24, r1
    16b4:	18 c0       	rjmp	.+48     	; 0x16e6 <xQueueReceive+0x102>
    16b6:	c8 01       	movw	r24, r16
    16b8:	3f dd       	rcall	.-1410   	; 0x1138 <prvIsQueueEmpty>
    16ba:	88 23       	and	r24, r24
    16bc:	79 f0       	breq	.+30     	; 0x16dc <xQueueReceive+0xf8>
    16be:	4e 81       	ldd	r20, Y+6	; 0x06
    16c0:	5f 81       	ldd	r21, Y+7	; 0x07
    16c2:	68 85       	ldd	r22, Y+8	; 0x08
    16c4:	79 85       	ldd	r23, Y+9	; 0x09
    16c6:	c6 01       	movw	r24, r12
    16c8:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    16cc:	c8 01       	movw	r24, r16
    16ce:	b8 dd       	rcall	.-1168   	; 0x1240 <prvUnlockQueue>
    16d0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16d4:	81 11       	cpse	r24, r1
    16d6:	a6 cf       	rjmp	.-180    	; 0x1624 <xQueueReceive+0x40>
    16d8:	3b db       	rcall	.-2442   	; 0xd50 <vPortYield>
    16da:	a4 cf       	rjmp	.-184    	; 0x1624 <xQueueReceive+0x40>
    16dc:	c8 01       	movw	r24, r16
    16de:	b0 dd       	rcall	.-1184   	; 0x1240 <prvUnlockQueue>
    16e0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16e4:	9f cf       	rjmp	.-194    	; 0x1624 <xQueueReceive+0x40>
    16e6:	c8 01       	movw	r24, r16
    16e8:	ab dd       	rcall	.-1194   	; 0x1240 <prvUnlockQueue>
    16ea:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16ee:	c8 01       	movw	r24, r16
    16f0:	23 dd       	rcall	.-1466   	; 0x1138 <prvIsQueueEmpty>
    16f2:	88 23       	and	r24, r24
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <xQueueReceive+0x114>
    16f6:	96 cf       	rjmp	.-212    	; 0x1624 <xQueueReceive+0x40>
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	29 96       	adiw	r28, 0x09	; 9
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	bf 90       	pop	r11
    1718:	af 90       	pop	r10
    171a:	9f 90       	pop	r9
    171c:	08 95       	ret

0000171e <xQueueSemaphoreTake>:
    171e:	bf 92       	push	r11
    1720:	cf 92       	push	r12
    1722:	df 92       	push	r13
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	29 97       	sbiw	r28, 0x09	; 9
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	8c 01       	movw	r16, r24
    1742:	4e 83       	std	Y+6, r20	; 0x06
    1744:	5f 83       	std	Y+7, r21	; 0x07
    1746:	68 87       	std	Y+8, r22	; 0x08
    1748:	79 87       	std	Y+9, r23	; 0x09
    174a:	b1 2c       	mov	r11, r1
    174c:	d1 2c       	mov	r13, r1
    174e:	cc 24       	eor	r12, r12
    1750:	c3 94       	inc	r12
    1752:	7c 01       	movw	r14, r24
    1754:	83 e1       	ldi	r24, 0x13	; 19
    1756:	e8 0e       	add	r14, r24
    1758:	f1 1c       	adc	r15, r1
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	0f 92       	push	r0
    1760:	d8 01       	movw	r26, r16
    1762:	5e 96       	adiw	r26, 0x1e	; 30
    1764:	8c 91       	ld	r24, X
    1766:	5e 97       	sbiw	r26, 0x1e	; 30
    1768:	88 23       	and	r24, r24
    176a:	e1 f0       	breq	.+56     	; 0x17a4 <xQueueSemaphoreTake+0x86>
    176c:	81 50       	subi	r24, 0x01	; 1
    176e:	5e 96       	adiw	r26, 0x1e	; 30
    1770:	8c 93       	st	X, r24
    1772:	5e 97       	sbiw	r26, 0x1e	; 30
    1774:	8d 91       	ld	r24, X+
    1776:	9c 91       	ld	r25, X
    1778:	89 2b       	or	r24, r25
    177a:	29 f4       	brne	.+10     	; 0x1786 <xQueueSemaphoreTake+0x68>
    177c:	0e 94 b6 1a 	call	0x356c	; 0x356c <pvTaskIncrementMutexHeldCount>
    1780:	f8 01       	movw	r30, r16
    1782:	93 83       	std	Z+3, r25	; 0x03
    1784:	82 83       	std	Z+2, r24	; 0x02
    1786:	d8 01       	movw	r26, r16
    1788:	18 96       	adiw	r26, 0x08	; 8
    178a:	8c 91       	ld	r24, X
    178c:	88 23       	and	r24, r24
    178e:	31 f0       	breq	.+12     	; 0x179c <xQueueSemaphoreTake+0x7e>
    1790:	c8 01       	movw	r24, r16
    1792:	08 96       	adiw	r24, 0x08	; 8
    1794:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    1798:	81 11       	cpse	r24, r1
    179a:	da da       	rcall	.-2636   	; 0xd50 <vPortYield>
    179c:	0f 90       	pop	r0
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	7f c0       	rjmp	.+254    	; 0x18a2 <xQueueSemaphoreTake+0x184>
    17a4:	8e 81       	ldd	r24, Y+6	; 0x06
    17a6:	9f 81       	ldd	r25, Y+7	; 0x07
    17a8:	a8 85       	ldd	r26, Y+8	; 0x08
    17aa:	b9 85       	ldd	r27, Y+9	; 0x09
    17ac:	89 2b       	or	r24, r25
    17ae:	8a 2b       	or	r24, r26
    17b0:	8b 2b       	or	r24, r27
    17b2:	21 f4       	brne	.+8      	; 0x17bc <xQueueSemaphoreTake+0x9e>
    17b4:	0f 90       	pop	r0
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	73 c0       	rjmp	.+230    	; 0x18a2 <xQueueSemaphoreTake+0x184>
    17bc:	d1 10       	cpse	r13, r1
    17be:	05 c0       	rjmp	.+10     	; 0x17ca <xQueueSemaphoreTake+0xac>
    17c0:	ce 01       	movw	r24, r28
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    17c8:	dc 2c       	mov	r13, r12
    17ca:	0f 90       	pop	r0
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	0f 92       	push	r0
    17d8:	f8 01       	movw	r30, r16
    17da:	81 a1       	ldd	r24, Z+33	; 0x21
    17dc:	8f 3f       	cpi	r24, 0xFF	; 255
    17de:	09 f4       	brne	.+2      	; 0x17e2 <xQueueSemaphoreTake+0xc4>
    17e0:	11 a2       	std	Z+33, r1	; 0x21
    17e2:	d8 01       	movw	r26, r16
    17e4:	92 96       	adiw	r26, 0x22	; 34
    17e6:	8c 91       	ld	r24, X
    17e8:	92 97       	sbiw	r26, 0x22	; 34
    17ea:	8f 3f       	cpi	r24, 0xFF	; 255
    17ec:	11 f4       	brne	.+4      	; 0x17f2 <xQueueSemaphoreTake+0xd4>
    17ee:	92 96       	adiw	r26, 0x22	; 34
    17f0:	1c 92       	st	X, r1
    17f2:	0f 90       	pop	r0
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	be 01       	movw	r22, r28
    17f8:	6a 5f       	subi	r22, 0xFA	; 250
    17fa:	7f 4f       	sbci	r23, 0xFF	; 255
    17fc:	ce 01       	movw	r24, r28
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    1804:	81 11       	cpse	r24, r1
    1806:	27 c0       	rjmp	.+78     	; 0x1856 <xQueueSemaphoreTake+0x138>
    1808:	c8 01       	movw	r24, r16
    180a:	96 dc       	rcall	.-1748   	; 0x1138 <prvIsQueueEmpty>
    180c:	88 23       	and	r24, r24
    180e:	f1 f0       	breq	.+60     	; 0x184c <xQueueSemaphoreTake+0x12e>
    1810:	f8 01       	movw	r30, r16
    1812:	80 81       	ld	r24, Z
    1814:	91 81       	ldd	r25, Z+1	; 0x01
    1816:	89 2b       	or	r24, r25
    1818:	51 f4       	brne	.+20     	; 0x182e <xQueueSemaphoreTake+0x110>
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	0f 92       	push	r0
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	93 81       	ldd	r25, Z+3	; 0x03
    1824:	0e 94 bc 19 	call	0x3378	; 0x3378 <xTaskPriorityInherit>
    1828:	b8 2e       	mov	r11, r24
    182a:	0f 90       	pop	r0
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	4e 81       	ldd	r20, Y+6	; 0x06
    1830:	5f 81       	ldd	r21, Y+7	; 0x07
    1832:	68 85       	ldd	r22, Y+8	; 0x08
    1834:	79 85       	ldd	r23, Y+9	; 0x09
    1836:	c7 01       	movw	r24, r14
    1838:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    183c:	c8 01       	movw	r24, r16
    183e:	00 dd       	rcall	.-1536   	; 0x1240 <prvUnlockQueue>
    1840:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    1844:	81 11       	cpse	r24, r1
    1846:	89 cf       	rjmp	.-238    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1848:	83 da       	rcall	.-2810   	; 0xd50 <vPortYield>
    184a:	87 cf       	rjmp	.-242    	; 0x175a <xQueueSemaphoreTake+0x3c>
    184c:	c8 01       	movw	r24, r16
    184e:	f8 dc       	rcall	.-1552   	; 0x1240 <prvUnlockQueue>
    1850:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    1854:	82 cf       	rjmp	.-252    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1856:	c8 01       	movw	r24, r16
    1858:	f3 dc       	rcall	.-1562   	; 0x1240 <prvUnlockQueue>
    185a:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    185e:	c8 01       	movw	r24, r16
    1860:	6b dc       	rcall	.-1834   	; 0x1138 <prvIsQueueEmpty>
    1862:	88 23       	and	r24, r24
    1864:	09 f4       	brne	.+2      	; 0x1868 <xQueueSemaphoreTake+0x14a>
    1866:	79 cf       	rjmp	.-270    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1868:	bb 20       	and	r11, r11
    186a:	d1 f0       	breq	.+52     	; 0x18a0 <xQueueSemaphoreTake+0x182>
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	0f 92       	push	r0
    1872:	f8 01       	movw	r30, r16
    1874:	83 89       	ldd	r24, Z+19	; 0x13
    1876:	88 23       	and	r24, r24
    1878:	39 f0       	breq	.+14     	; 0x1888 <xQueueSemaphoreTake+0x16a>
    187a:	02 8c       	ldd	r0, Z+26	; 0x1a
    187c:	f3 8d       	ldd	r31, Z+27	; 0x1b
    187e:	e0 2d       	mov	r30, r0
    1880:	80 81       	ld	r24, Z
    1882:	64 e0       	ldi	r22, 0x04	; 4
    1884:	68 1b       	sub	r22, r24
    1886:	01 c0       	rjmp	.+2      	; 0x188a <xQueueSemaphoreTake+0x16c>
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	d8 01       	movw	r26, r16
    188c:	12 96       	adiw	r26, 0x02	; 2
    188e:	8d 91       	ld	r24, X+
    1890:	9c 91       	ld	r25, X
    1892:	13 97       	sbiw	r26, 0x03	; 3
    1894:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <vTaskPriorityDisinheritAfterTimeout>
    1898:	0f 90       	pop	r0
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <xQueueSemaphoreTake+0x184>
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	29 96       	adiw	r28, 0x09	; 9
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	ff 90       	pop	r15
    18b8:	ef 90       	pop	r14
    18ba:	df 90       	pop	r13
    18bc:	cf 90       	pop	r12
    18be:	bf 90       	pop	r11
    18c0:	08 95       	ret

000018c2 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	0f 92       	push	r0
    18ce:	89 a1       	ldd	r24, Y+33	; 0x21
    18d0:	8f 3f       	cpi	r24, 0xFF	; 255
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <vQueueWaitForMessageRestricted+0x14>
    18d4:	19 a2       	std	Y+33, r1	; 0x21
    18d6:	8a a1       	ldd	r24, Y+34	; 0x22
    18d8:	8f 3f       	cpi	r24, 0xFF	; 255
    18da:	09 f4       	brne	.+2      	; 0x18de <vQueueWaitForMessageRestricted+0x1c>
    18dc:	1a a2       	std	Y+34, r1	; 0x22
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    18e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18e4:	81 11       	cpse	r24, r1
    18e6:	04 c0       	rjmp	.+8      	; 0x18f0 <vQueueWaitForMessageRestricted+0x2e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    18e8:	ce 01       	movw	r24, r28
    18ea:	43 96       	adiw	r24, 0x13	; 19
    18ec:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    18f0:	ce 01       	movw	r24, r28
    18f2:	a6 dc       	rcall	.-1716   	; 0x1240 <prvUnlockQueue>
	}
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	08 95       	ret

000018fa <xSerialxPrint>:

		default:
			break;
	}
	return 0;
}
    18fa:	4f 92       	push	r4
    18fc:	5f 92       	push	r5
    18fe:	6f 92       	push	r6
    1900:	7f 92       	push	r7
    1902:	8f 92       	push	r8
    1904:	9f 92       	push	r9
    1906:	af 92       	push	r10
    1908:	bf 92       	push	r11
    190a:	cf 92       	push	r12
    190c:	df 92       	push	r13
    190e:	ef 92       	push	r14
    1910:	ff 92       	push	r15
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	ec 01       	movw	r28, r24
    191c:	fb 01       	movw	r30, r22
    191e:	01 90       	ld	r0, Z+
    1920:	00 20       	and	r0, r0
    1922:	e9 f7       	brne	.-6      	; 0x191e <xSerialxPrint+0x24>
    1924:	4b 01       	movw	r8, r22
    1926:	9f 01       	movw	r18, r30
    1928:	21 50       	subi	r18, 0x01	; 1
    192a:	31 09       	sbc	r19, r1
    192c:	0f 2e       	mov	r0, r31
    192e:	f1 e3       	ldi	r31, 0x31	; 49
    1930:	ef 2e       	mov	r14, r31
    1932:	ff 24       	eor	r15, r15
    1934:	f3 94       	inc	r15
    1936:	f0 2d       	mov	r31, r0
    1938:	01 ed       	ldi	r16, 0xD1	; 209
    193a:	10 e0       	ldi	r17, 0x00	; 0
    193c:	69 ec       	ldi	r22, 0xC9	; 201
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	41 ec       	ldi	r20, 0xC1	; 193
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	5c 01       	movw	r10, r24
    1946:	8d e0       	ldi	r24, 0x0D	; 13
    1948:	a8 0e       	add	r10, r24
    194a:	b1 1c       	adc	r11, r1
    194c:	78 c0       	rjmp	.+240    	; 0x1a3e <xSerialxPrint+0x144>
    194e:	d4 01       	movw	r26, r8
    1950:	dd 90       	ld	r13, X+
    1952:	4d 01       	movw	r8, r26
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	0f 92       	push	r0
    195a:	ed 85       	ldd	r30, Y+13	; 0x0d
    195c:	fe 85       	ldd	r31, Y+14	; 0x0e
    195e:	0f 90       	pop	r0
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	8f 89       	ldd	r24, Y+23	; 0x17
    1964:	98 8d       	ldd	r25, Y+24	; 0x18
    1966:	e8 17       	cp	r30, r24
    1968:	f9 07       	cpc	r31, r25
    196a:	f1 f0       	breq	.+60     	; 0x19a8 <xSerialxPrint+0xae>
    196c:	f5 01       	movw	r30, r10
    196e:	82 81       	ldd	r24, Z+2	; 0x02
    1970:	93 81       	ldd	r25, Z+3	; 0x03
    1972:	dc 01       	movw	r26, r24
    1974:	dc 92       	st	X, r13
    1976:	82 81       	ldd	r24, Z+2	; 0x02
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	93 83       	std	Z+3, r25	; 0x03
    197e:	82 83       	std	Z+2, r24	; 0x02
    1980:	c0 84       	ldd	r12, Z+8	; 0x08
    1982:	d1 84       	ldd	r13, Z+9	; 0x09
    1984:	8c 15       	cp	r24, r12
    1986:	9d 05       	cpc	r25, r13
    1988:	21 f4       	brne	.+8      	; 0x1992 <xSerialxPrint+0x98>
    198a:	86 81       	ldd	r24, Z+6	; 0x06
    198c:	97 81       	ldd	r25, Z+7	; 0x07
    198e:	93 83       	std	Z+3, r25	; 0x03
    1990:	82 83       	std	Z+2, r24	; 0x02
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	0f 92       	push	r0
    1998:	80 81       	ld	r24, Z
    199a:	91 81       	ldd	r25, Z+1	; 0x01
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	80 83       	st	Z, r24
    19a2:	0f 90       	pop	r0
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	2b c0       	rjmp	.+86     	; 0x19fe <xSerialxPrint+0x104>
    19a8:	00 00       	nop
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	0f 92       	push	r0
    19b0:	ed 85       	ldd	r30, Y+13	; 0x0d
    19b2:	fe 85       	ldd	r31, Y+14	; 0x0e
    19b4:	0f 90       	pop	r0
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ba:	98 8d       	ldd	r25, Y+24	; 0x18
    19bc:	e8 17       	cp	r30, r24
    19be:	f9 07       	cpc	r31, r25
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <xSerialxPrint+0xca>
    19c2:	3d c0       	rjmp	.+122    	; 0x1a3e <xSerialxPrint+0x144>
    19c4:	f5 01       	movw	r30, r10
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	dc 01       	movw	r26, r24
    19cc:	dc 92       	st	X, r13
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	93 83       	std	Z+3, r25	; 0x03
    19d6:	82 83       	std	Z+2, r24	; 0x02
    19d8:	c0 84       	ldd	r12, Z+8	; 0x08
    19da:	d1 84       	ldd	r13, Z+9	; 0x09
    19dc:	8c 15       	cp	r24, r12
    19de:	9d 05       	cpc	r25, r13
    19e0:	21 f4       	brne	.+8      	; 0x19ea <xSerialxPrint+0xf0>
    19e2:	86 81       	ldd	r24, Z+6	; 0x06
    19e4:	97 81       	ldd	r25, Z+7	; 0x07
    19e6:	93 83       	std	Z+3, r25	; 0x03
    19e8:	82 83       	std	Z+2, r24	; 0x02
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	0f 92       	push	r0
    19f0:	80 81       	ld	r24, Z
    19f2:	91 81       	ldd	r25, Z+1	; 0x01
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	80 83       	st	Z, r24
    19fa:	0f 90       	pop	r0
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	48 80       	ld	r4, Y
    1a00:	51 2c       	mov	r5, r1
    1a02:	b8 e0       	ldi	r27, 0x08	; 8
    1a04:	4b 16       	cp	r4, r27
    1a06:	51 04       	cpc	r5, r1
    1a08:	d0 f4       	brcc	.+52     	; 0x1a3e <xSerialxPrint+0x144>
    1a0a:	f2 01       	movw	r30, r4
    1a0c:	88 27       	eor	r24, r24
    1a0e:	ee 58       	subi	r30, 0x8E	; 142
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	8f 4f       	sbci	r24, 0xFF	; 255
    1a14:	0c 94 b6 59 	jmp	0xb36c	; 0xb36c <__tablejump2__>
    1a18:	fa 01       	movw	r30, r20
    1a1a:	80 81       	ld	r24, Z
    1a1c:	80 62       	ori	r24, 0x20	; 32
    1a1e:	80 83       	st	Z, r24
    1a20:	0e c0       	rjmp	.+28     	; 0x1a3e <xSerialxPrint+0x144>
    1a22:	db 01       	movw	r26, r22
    1a24:	8c 91       	ld	r24, X
    1a26:	80 62       	ori	r24, 0x20	; 32
    1a28:	8c 93       	st	X, r24
    1a2a:	09 c0       	rjmp	.+18     	; 0x1a3e <xSerialxPrint+0x144>
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	80 81       	ld	r24, Z
    1a30:	80 62       	ori	r24, 0x20	; 32
    1a32:	80 83       	st	Z, r24
    1a34:	04 c0       	rjmp	.+8      	; 0x1a3e <xSerialxPrint+0x144>
    1a36:	d7 01       	movw	r26, r14
    1a38:	8c 91       	ld	r24, X
    1a3a:	80 62       	ori	r24, 0x20	; 32
    1a3c:	8c 93       	st	X, r24
    1a3e:	82 16       	cp	r8, r18
    1a40:	93 06       	cpc	r9, r19
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <xSerialxPrint+0x14c>
    1a44:	84 cf       	rjmp	.-248    	; 0x194e <xSerialxPrint+0x54>
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	ff 90       	pop	r15
    1a50:	ef 90       	pop	r14
    1a52:	df 90       	pop	r13
    1a54:	cf 90       	pop	r12
    1a56:	bf 90       	pop	r11
    1a58:	af 90       	pop	r10
    1a5a:	9f 90       	pop	r9
    1a5c:	8f 90       	pop	r8
    1a5e:	7f 90       	pop	r7
    1a60:	6f 90       	pop	r6
    1a62:	5f 90       	pop	r5
    1a64:	4f 90       	pop	r4
    1a66:	08 95       	ret

00001a68 <xSerialxPrintf>:
    1a68:	0f 93       	push	r16
    1a6a:	1f 93       	push	r17
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	08 85       	ldd	r16, Y+8	; 0x08
    1a76:	19 85       	ldd	r17, Y+9	; 0x09
    1a78:	f8 01       	movw	r30, r16
    1a7a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	29 f4       	brne	.+10     	; 0x1a8a <xSerialxPrintf+0x22>
    1a80:	67 d9       	rcall	.-3378   	; 0xd50 <vPortYield>
    1a82:	f8 01       	movw	r30, r16
    1a84:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a86:	81 30       	cpi	r24, 0x01	; 1
    1a88:	d9 f3       	breq	.-10     	; 0x1a80 <xSerialxPrintf+0x18>
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	85 8f       	std	Z+29, r24	; 0x1d
    1a90:	63 8d       	ldd	r22, Z+27	; 0x1b
    1a92:	74 8d       	ldd	r23, Z+28	; 0x1c
    1a94:	9e 01       	movw	r18, r28
    1a96:	24 5f       	subi	r18, 0xF4	; 244
    1a98:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9a:	4a 85       	ldd	r20, Y+10	; 0x0a
    1a9c:	5b 85       	ldd	r21, Y+11	; 0x0b
    1a9e:	81 8d       	ldd	r24, Z+25	; 0x19
    1aa0:	92 8d       	ldd	r25, Z+26	; 0x1a
    1aa2:	0e 94 28 5c 	call	0xb850	; 0xb850 <vsnprintf>
    1aa6:	f8 01       	movw	r30, r16
    1aa8:	61 8d       	ldd	r22, Z+25	; 0x19
    1aaa:	72 8d       	ldd	r23, Z+26	; 0x1a
    1aac:	c8 01       	movw	r24, r16
    1aae:	25 df       	rcall	.-438    	; 0x18fa <xSerialxPrint>
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	15 8e       	std	Z+29, r1	; 0x1d
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	08 95       	ret

00001abe <xSerialRxFlush>:
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	4c 91       	ld	r20, X
    1ac6:	50 e0       	ldi	r21, 0x00	; 0
    1ac8:	48 30       	cpi	r20, 0x08	; 8
    1aca:	51 05       	cpc	r21, r1
    1acc:	e8 f5       	brcc	.+122    	; 0x1b48 <xSerialRxFlush+0x8a>
    1ace:	fa 01       	movw	r30, r20
    1ad0:	88 27       	eor	r24, r24
    1ad2:	e6 58       	subi	r30, 0x86	; 134
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad8:	0c 94 b6 59 	jmp	0xb36c	; 0xb36c <__tablejump2__>
    1adc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1ae0:	88 23       	and	r24, r24
    1ae2:	54 f1       	brlt	.+84     	; 0x1b38 <xSerialRxFlush+0x7a>
    1ae4:	31 c0       	rjmp	.+98     	; 0x1b48 <xSerialRxFlush+0x8a>
    1ae6:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1aea:	88 23       	and	r24, r24
    1aec:	e4 f0       	brlt	.+56     	; 0x1b26 <xSerialRxFlush+0x68>
    1aee:	2c c0       	rjmp	.+88     	; 0x1b48 <xSerialRxFlush+0x8a>
    1af0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1af4:	88 23       	and	r24, r24
    1af6:	74 f0       	brlt	.+28     	; 0x1b14 <xSerialRxFlush+0x56>
    1af8:	27 c0       	rjmp	.+78     	; 0x1b48 <xSerialRxFlush+0x8a>
    1afa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1afe:	88 23       	and	r24, r24
    1b00:	1c f5       	brge	.+70     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b02:	c6 ec       	ldi	r28, 0xC6	; 198
    1b04:	d0 e0       	ldi	r29, 0x00	; 0
    1b06:	e0 ec       	ldi	r30, 0xC0	; 192
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	88 81       	ld	r24, Y
    1b0c:	80 81       	ld	r24, Z
    1b0e:	88 23       	and	r24, r24
    1b10:	e4 f3       	brlt	.-8      	; 0x1b0a <xSerialRxFlush+0x4c>
    1b12:	1a c0       	rjmp	.+52     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b14:	ce ec       	ldi	r28, 0xCE	; 206
    1b16:	d0 e0       	ldi	r29, 0x00	; 0
    1b18:	e8 ec       	ldi	r30, 0xC8	; 200
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	88 81       	ld	r24, Y
    1b1e:	80 81       	ld	r24, Z
    1b20:	88 23       	and	r24, r24
    1b22:	e4 f3       	brlt	.-8      	; 0x1b1c <xSerialRxFlush+0x5e>
    1b24:	11 c0       	rjmp	.+34     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b26:	c6 ed       	ldi	r28, 0xD6	; 214
    1b28:	d0 e0       	ldi	r29, 0x00	; 0
    1b2a:	e0 ed       	ldi	r30, 0xD0	; 208
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	88 81       	ld	r24, Y
    1b30:	80 81       	ld	r24, Z
    1b32:	88 23       	and	r24, r24
    1b34:	e4 f3       	brlt	.-8      	; 0x1b2e <xSerialRxFlush+0x70>
    1b36:	08 c0       	rjmp	.+16     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b38:	c6 e3       	ldi	r28, 0x36	; 54
    1b3a:	d1 e0       	ldi	r29, 0x01	; 1
    1b3c:	e0 e3       	ldi	r30, 0x30	; 48
    1b3e:	f1 e0       	ldi	r31, 0x01	; 1
    1b40:	88 81       	ld	r24, Y
    1b42:	80 81       	ld	r24, Z
    1b44:	88 23       	and	r24, r24
    1b46:	e4 f3       	brlt	.-8      	; 0x1b40 <xSerialRxFlush+0x82>
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	0f 92       	push	r0
    1b4e:	12 96       	adiw	r26, 0x02	; 2
    1b50:	1c 92       	st	X, r1
    1b52:	1e 92       	st	-X, r1
    1b54:	11 97       	sbiw	r26, 0x01	; 1
    1b56:	17 96       	adiw	r26, 0x07	; 7
    1b58:	8d 91       	ld	r24, X+
    1b5a:	9c 91       	ld	r25, X
    1b5c:	18 97       	sbiw	r26, 0x08	; 8
    1b5e:	14 96       	adiw	r26, 0x04	; 4
    1b60:	9c 93       	st	X, r25
    1b62:	8e 93       	st	-X, r24
    1b64:	13 97       	sbiw	r26, 0x03	; 3
    1b66:	16 96       	adiw	r26, 0x06	; 6
    1b68:	9c 93       	st	X, r25
    1b6a:	8e 93       	st	-X, r24
    1b6c:	15 97       	sbiw	r26, 0x05	; 5
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	08 95       	ret

00001b78 <xSerialAvailableChar>:
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	0f 92       	push	r0
    1b7e:	fc 01       	movw	r30, r24
    1b80:	81 81       	ldd	r24, Z+1	; 0x01
    1b82:	92 81       	ldd	r25, Z+2	; 0x02
    1b84:	0f 90       	pop	r0
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	08 95       	ret

00001b8a <xSerialPutChar>:
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	dc 01       	movw	r26, r24
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	0f 92       	push	r0
    1b96:	1d 96       	adiw	r26, 0x0d	; 13
    1b98:	2d 91       	ld	r18, X+
    1b9a:	3c 91       	ld	r19, X
    1b9c:	1e 97       	sbiw	r26, 0x0e	; 14
    1b9e:	0f 90       	pop	r0
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	57 96       	adiw	r26, 0x17	; 23
    1ba4:	8d 91       	ld	r24, X+
    1ba6:	9c 91       	ld	r25, X
    1ba8:	58 97       	sbiw	r26, 0x18	; 24
    1baa:	28 17       	cp	r18, r24
    1bac:	39 07       	cpc	r19, r25
    1bae:	f1 f0       	breq	.+60     	; 0x1bec <xSerialPutChar+0x62>
    1bb0:	fd 01       	movw	r30, r26
    1bb2:	3d 96       	adiw	r30, 0x0d	; 13
    1bb4:	c2 81       	ldd	r28, Z+2	; 0x02
    1bb6:	d3 81       	ldd	r29, Z+3	; 0x03
    1bb8:	68 83       	st	Y, r22
    1bba:	82 81       	ldd	r24, Z+2	; 0x02
    1bbc:	93 81       	ldd	r25, Z+3	; 0x03
    1bbe:	01 96       	adiw	r24, 0x01	; 1
    1bc0:	93 83       	std	Z+3, r25	; 0x03
    1bc2:	82 83       	std	Z+2, r24	; 0x02
    1bc4:	20 85       	ldd	r18, Z+8	; 0x08
    1bc6:	31 85       	ldd	r19, Z+9	; 0x09
    1bc8:	82 17       	cp	r24, r18
    1bca:	93 07       	cpc	r25, r19
    1bcc:	21 f4       	brne	.+8      	; 0x1bd6 <xSerialPutChar+0x4c>
    1bce:	86 81       	ldd	r24, Z+6	; 0x06
    1bd0:	97 81       	ldd	r25, Z+7	; 0x07
    1bd2:	93 83       	std	Z+3, r25	; 0x03
    1bd4:	82 83       	std	Z+2, r24	; 0x02
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	0f 92       	push	r0
    1bdc:	80 81       	ld	r24, Z
    1bde:	91 81       	ldd	r25, Z+1	; 0x01
    1be0:	01 96       	adiw	r24, 0x01	; 1
    1be2:	91 83       	std	Z+1, r25	; 0x01
    1be4:	80 83       	st	Z, r24
    1be6:	0f 90       	pop	r0
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	2f c0       	rjmp	.+94     	; 0x1c4a <xSerialPutChar+0xc0>
    1bec:	00 00       	nop
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	0f 92       	push	r0
    1bf4:	1d 96       	adiw	r26, 0x0d	; 13
    1bf6:	2d 91       	ld	r18, X+
    1bf8:	3c 91       	ld	r19, X
    1bfa:	1e 97       	sbiw	r26, 0x0e	; 14
    1bfc:	0f 90       	pop	r0
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	57 96       	adiw	r26, 0x17	; 23
    1c02:	8d 91       	ld	r24, X+
    1c04:	9c 91       	ld	r25, X
    1c06:	58 97       	sbiw	r26, 0x18	; 24
    1c08:	28 17       	cp	r18, r24
    1c0a:	39 07       	cpc	r19, r25
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <xSerialPutChar+0x86>
    1c0e:	45 c0       	rjmp	.+138    	; 0x1c9a <xSerialPutChar+0x110>
    1c10:	fd 01       	movw	r30, r26
    1c12:	3d 96       	adiw	r30, 0x0d	; 13
    1c14:	c2 81       	ldd	r28, Z+2	; 0x02
    1c16:	d3 81       	ldd	r29, Z+3	; 0x03
    1c18:	68 83       	st	Y, r22
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	01 96       	adiw	r24, 0x01	; 1
    1c20:	93 83       	std	Z+3, r25	; 0x03
    1c22:	82 83       	std	Z+2, r24	; 0x02
    1c24:	20 85       	ldd	r18, Z+8	; 0x08
    1c26:	31 85       	ldd	r19, Z+9	; 0x09
    1c28:	82 17       	cp	r24, r18
    1c2a:	93 07       	cpc	r25, r19
    1c2c:	21 f4       	brne	.+8      	; 0x1c36 <xSerialPutChar+0xac>
    1c2e:	86 81       	ldd	r24, Z+6	; 0x06
    1c30:	97 81       	ldd	r25, Z+7	; 0x07
    1c32:	93 83       	std	Z+3, r25	; 0x03
    1c34:	82 83       	std	Z+2, r24	; 0x02
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	0f 92       	push	r0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	91 81       	ldd	r25, Z+1	; 0x01
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	80 83       	st	Z, r24
    1c46:	0f 90       	pop	r0
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	8c 91       	ld	r24, X
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	88 30       	cpi	r24, 0x08	; 8
    1c50:	91 05       	cpc	r25, r1
    1c52:	28 f5       	brcc	.+74     	; 0x1c9e <xSerialPutChar+0x114>
    1c54:	fc 01       	movw	r30, r24
    1c56:	88 27       	eor	r24, r24
    1c58:	ee 57       	subi	r30, 0x7E	; 126
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5e:	0c 94 b6 59 	jmp	0xb36c	; 0xb36c <__tablejump2__>
    1c62:	e1 ec       	ldi	r30, 0xC1	; 193
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	80 62       	ori	r24, 0x20	; 32
    1c6a:	80 83       	st	Z, r24
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	18 c0       	rjmp	.+48     	; 0x1ca0 <xSerialPutChar+0x116>
    1c70:	e9 ec       	ldi	r30, 0xC9	; 201
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	80 62       	ori	r24, 0x20	; 32
    1c78:	80 83       	st	Z, r24
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	11 c0       	rjmp	.+34     	; 0x1ca0 <xSerialPutChar+0x116>
    1c7e:	e1 ed       	ldi	r30, 0xD1	; 209
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	80 62       	ori	r24, 0x20	; 32
    1c86:	80 83       	st	Z, r24
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	0a c0       	rjmp	.+20     	; 0x1ca0 <xSerialPutChar+0x116>
    1c8c:	e1 e3       	ldi	r30, 0x31	; 49
    1c8e:	f1 e0       	ldi	r31, 0x01	; 1
    1c90:	80 81       	ld	r24, Z
    1c92:	80 62       	ori	r24, 0x20	; 32
    1c94:	80 83       	st	Z, r24
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	03 c0       	rjmp	.+6      	; 0x1ca0 <xSerialPutChar+0x116>
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	01 c0       	rjmp	.+2      	; 0x1ca0 <xSerialPutChar+0x116>
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	08 95       	ret

00001ca6 <xSerialPortInitMinimal>:
    1ca6:	7f 92       	push	r7
    1ca8:	8f 92       	push	r8
    1caa:	9f 92       	push	r9
    1cac:	af 92       	push	r10
    1cae:	bf 92       	push	r11
    1cb0:	cf 92       	push	r12
    1cb2:	df 92       	push	r13
    1cb4:	ef 92       	push	r14
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	a2 97       	sbiw	r28, 0x22	; 34
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	6c 01       	movw	r12, r24
    1cd2:	76 2e       	mov	r7, r22
    1cd4:	49 01       	movw	r8, r18
    1cd6:	5a 01       	movw	r10, r20
    1cd8:	c7 01       	movw	r24, r14
    1cda:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	a9 f0       	breq	.+42     	; 0x1d0c <xSerialPortInitMinimal+0x66>
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	32 96       	adiw	r30, 0x02	; 2
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	0f 92       	push	r0
    1cec:	11 82       	std	Z+1, r1	; 0x01
    1cee:	10 82       	st	Z, r1
    1cf0:	93 83       	std	Z+3, r25	; 0x03
    1cf2:	82 83       	std	Z+2, r24	; 0x02
    1cf4:	95 83       	std	Z+5, r25	; 0x05
    1cf6:	84 83       	std	Z+4, r24	; 0x04
    1cf8:	97 83       	std	Z+7, r25	; 0x07
    1cfa:	86 83       	std	Z+6, r24	; 0x06
    1cfc:	8e 0d       	add	r24, r14
    1cfe:	9f 1d       	adc	r25, r15
    1d00:	91 87       	std	Z+9, r25	; 0x09
    1d02:	80 87       	std	Z+8, r24	; 0x08
    1d04:	f3 86       	std	Z+11, r15	; 0x0b
    1d06:	e2 86       	std	Z+10, r14	; 0x0a
    1d08:	0f 90       	pop	r0
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	c8 01       	movw	r24, r16
    1d0e:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	a9 f0       	breq	.+42     	; 0x1d40 <xSerialPortInitMinimal+0x9a>
    1d16:	fe 01       	movw	r30, r28
    1d18:	3e 96       	adiw	r30, 0x0e	; 14
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	0f 92       	push	r0
    1d20:	11 82       	std	Z+1, r1	; 0x01
    1d22:	10 82       	st	Z, r1
    1d24:	93 83       	std	Z+3, r25	; 0x03
    1d26:	82 83       	std	Z+2, r24	; 0x02
    1d28:	95 83       	std	Z+5, r25	; 0x05
    1d2a:	84 83       	std	Z+4, r24	; 0x04
    1d2c:	97 83       	std	Z+7, r25	; 0x07
    1d2e:	86 83       	std	Z+6, r24	; 0x06
    1d30:	80 0f       	add	r24, r16
    1d32:	91 1f       	adc	r25, r17
    1d34:	91 87       	std	Z+9, r25	; 0x09
    1d36:	80 87       	std	Z+8, r24	; 0x08
    1d38:	13 87       	std	Z+11, r17	; 0x0b
    1d3a:	02 87       	std	Z+10, r16	; 0x0a
    1d3c:	0f 90       	pop	r0
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	c8 01       	movw	r24, r16
    1d42:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1d46:	9b 8f       	std	Y+27, r25	; 0x1b
    1d48:	8a 8f       	std	Y+26, r24	; 0x1a
    1d4a:	79 82       	std	Y+1, r7	; 0x01
    1d4c:	1d 8f       	std	Y+29, r17	; 0x1d
    1d4e:	0c 8f       	std	Y+28, r16	; 0x1c
    1d50:	1e 8e       	std	Y+30, r1	; 0x1e
    1d52:	8f 8e       	std	Y+31, r8	; 0x1f
    1d54:	98 a2       	std	Y+32, r9	; 0x20
    1d56:	a9 a2       	std	Y+33, r10	; 0x21
    1d58:	ba a2       	std	Y+34, r11	; 0x22
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	f8 94       	cli
    1d5e:	0f 92       	push	r0
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	88 30       	cpi	r24, 0x08	; 8
    1d66:	91 05       	cpc	r25, r1
    1d68:	08 f0       	brcs	.+2      	; 0x1d6c <xSerialPortInitMinimal+0xc6>
    1d6a:	ba c1       	rjmp	.+884    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	88 27       	eor	r24, r24
    1d70:	e6 57       	subi	r30, 0x76	; 118
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	8f 4f       	sbci	r24, 0xFF	; 255
    1d76:	0c 94 b6 59 	jmp	0xb36c	; 0xb36c <__tablejump2__>
    1d7a:	d5 01       	movw	r26, r10
    1d7c:	c4 01       	movw	r24, r8
    1d7e:	97 5f       	subi	r25, 0xF7	; 247
    1d80:	a2 4c       	sbci	r26, 0xC2	; 194
    1d82:	bf 4f       	sbci	r27, 0xFF	; 255
    1d84:	bc 01       	movw	r22, r24
    1d86:	cd 01       	movw	r24, r26
    1d88:	66 0f       	add	r22, r22
    1d8a:	77 1f       	adc	r23, r23
    1d8c:	88 1f       	adc	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	66 0f       	add	r22, r22
    1d92:	77 1f       	adc	r23, r23
    1d94:	88 1f       	adc	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	95 01       	movw	r18, r10
    1d9a:	84 01       	movw	r16, r8
    1d9c:	00 0f       	add	r16, r16
    1d9e:	11 1f       	adc	r17, r17
    1da0:	22 1f       	adc	r18, r18
    1da2:	33 1f       	adc	r19, r19
    1da4:	00 0f       	add	r16, r16
    1da6:	11 1f       	adc	r17, r17
    1da8:	22 1f       	adc	r18, r18
    1daa:	33 1f       	adc	r19, r19
    1dac:	a9 01       	movw	r20, r18
    1dae:	98 01       	movw	r18, r16
    1db0:	22 0f       	add	r18, r18
    1db2:	33 1f       	adc	r19, r19
    1db4:	44 1f       	adc	r20, r20
    1db6:	55 1f       	adc	r21, r21
    1db8:	0e 94 94 59 	call	0xb328	; 0xb328 <__udivmodsi4>
    1dbc:	21 50       	subi	r18, 0x01	; 1
    1dbe:	31 09       	sbc	r19, r1
    1dc0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1dc4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1dce:	88 e9       	ldi	r24, 0x98	; 152
    1dd0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1dd4:	8e e0       	ldi	r24, 0x0E	; 14
    1dd6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1dda:	82 c1       	rjmp	.+772    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1ddc:	04 ec       	ldi	r16, 0xC4	; 196
    1dde:	10 e0       	ldi	r17, 0x00	; 0
    1de0:	f8 01       	movw	r30, r16
    1de2:	11 82       	std	Z+1, r1	; 0x01
    1de4:	10 82       	st	Z, r1
    1de6:	6a 9a       	sbi	0x0d, 2	; 13
    1de8:	80 ec       	ldi	r24, 0xC0	; 192
    1dea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1dee:	88 e9       	ldi	r24, 0x98	; 152
    1df0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1df4:	d5 01       	movw	r26, r10
    1df6:	c4 01       	movw	r24, r8
    1df8:	80 58       	subi	r24, 0x80	; 128
    1dfa:	9b 47       	sbci	r25, 0x7B	; 123
    1dfc:	a1 4e       	sbci	r26, 0xE1	; 225
    1dfe:	bf 4f       	sbci	r27, 0xFF	; 255
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	aa 1f       	adc	r26, r26
    1e06:	bb 1f       	adc	r27, r27
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	aa 1f       	adc	r26, r26
    1e0e:	bb 1f       	adc	r27, r27
    1e10:	bc 01       	movw	r22, r24
    1e12:	cd 01       	movw	r24, r26
    1e14:	66 0f       	add	r22, r22
    1e16:	77 1f       	adc	r23, r23
    1e18:	88 1f       	adc	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	88 0c       	add	r8, r8
    1e1e:	99 1c       	adc	r9, r9
    1e20:	aa 1c       	adc	r10, r10
    1e22:	bb 1c       	adc	r11, r11
    1e24:	88 0c       	add	r8, r8
    1e26:	99 1c       	adc	r9, r9
    1e28:	aa 1c       	adc	r10, r10
    1e2a:	bb 1c       	adc	r11, r11
    1e2c:	a5 01       	movw	r20, r10
    1e2e:	94 01       	movw	r18, r8
    1e30:	22 0f       	add	r18, r18
    1e32:	33 1f       	adc	r19, r19
    1e34:	44 1f       	adc	r20, r20
    1e36:	55 1f       	adc	r21, r21
    1e38:	22 0f       	add	r18, r18
    1e3a:	33 1f       	adc	r19, r19
    1e3c:	44 1f       	adc	r20, r20
    1e3e:	55 1f       	adc	r21, r21
    1e40:	0e 94 94 59 	call	0xb328	; 0xb328 <__udivmodsi4>
    1e44:	21 50       	subi	r18, 0x01	; 1
    1e46:	31 09       	sbc	r19, r1
    1e48:	f8 01       	movw	r30, r16
    1e4a:	31 83       	std	Z+1, r19	; 0x01
    1e4c:	20 83       	st	Z, r18
    1e4e:	48 c1       	rjmp	.+656    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1e50:	d5 01       	movw	r26, r10
    1e52:	c4 01       	movw	r24, r8
    1e54:	97 5f       	subi	r25, 0xF7	; 247
    1e56:	a2 4c       	sbci	r26, 0xC2	; 194
    1e58:	bf 4f       	sbci	r27, 0xFF	; 255
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	66 0f       	add	r22, r22
    1e60:	77 1f       	adc	r23, r23
    1e62:	88 1f       	adc	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	66 0f       	add	r22, r22
    1e68:	77 1f       	adc	r23, r23
    1e6a:	88 1f       	adc	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	95 01       	movw	r18, r10
    1e70:	84 01       	movw	r16, r8
    1e72:	00 0f       	add	r16, r16
    1e74:	11 1f       	adc	r17, r17
    1e76:	22 1f       	adc	r18, r18
    1e78:	33 1f       	adc	r19, r19
    1e7a:	00 0f       	add	r16, r16
    1e7c:	11 1f       	adc	r17, r17
    1e7e:	22 1f       	adc	r18, r18
    1e80:	33 1f       	adc	r19, r19
    1e82:	a9 01       	movw	r20, r18
    1e84:	98 01       	movw	r18, r16
    1e86:	22 0f       	add	r18, r18
    1e88:	33 1f       	adc	r19, r19
    1e8a:	44 1f       	adc	r20, r20
    1e8c:	55 1f       	adc	r21, r21
    1e8e:	0e 94 94 59 	call	0xb328	; 0xb328 <__udivmodsi4>
    1e92:	21 50       	subi	r18, 0x01	; 1
    1e94:	31 09       	sbc	r19, r1
    1e96:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    1e9a:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    1e9e:	82 e0       	ldi	r24, 0x02	; 2
    1ea0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1ea4:	88 e9       	ldi	r24, 0x98	; 152
    1ea6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1eaa:	8e e0       	ldi	r24, 0x0E	; 14
    1eac:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1eb0:	17 c1       	rjmp	.+558    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1eb2:	0c ec       	ldi	r16, 0xCC	; 204
    1eb4:	10 e0       	ldi	r17, 0x00	; 0
    1eb6:	f8 01       	movw	r30, r16
    1eb8:	11 82       	std	Z+1, r1	; 0x01
    1eba:	10 82       	st	Z, r1
    1ebc:	55 9a       	sbi	0x0a, 5	; 10
    1ebe:	80 ec       	ldi	r24, 0xC0	; 192
    1ec0:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1ec4:	88 e9       	ldi	r24, 0x98	; 152
    1ec6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1eca:	d5 01       	movw	r26, r10
    1ecc:	c4 01       	movw	r24, r8
    1ece:	80 58       	subi	r24, 0x80	; 128
    1ed0:	9b 47       	sbci	r25, 0x7B	; 123
    1ed2:	a1 4e       	sbci	r26, 0xE1	; 225
    1ed4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	aa 1f       	adc	r26, r26
    1edc:	bb 1f       	adc	r27, r27
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	aa 1f       	adc	r26, r26
    1ee4:	bb 1f       	adc	r27, r27
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	66 0f       	add	r22, r22
    1eec:	77 1f       	adc	r23, r23
    1eee:	88 1f       	adc	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	88 0c       	add	r8, r8
    1ef4:	99 1c       	adc	r9, r9
    1ef6:	aa 1c       	adc	r10, r10
    1ef8:	bb 1c       	adc	r11, r11
    1efa:	88 0c       	add	r8, r8
    1efc:	99 1c       	adc	r9, r9
    1efe:	aa 1c       	adc	r10, r10
    1f00:	bb 1c       	adc	r11, r11
    1f02:	a5 01       	movw	r20, r10
    1f04:	94 01       	movw	r18, r8
    1f06:	22 0f       	add	r18, r18
    1f08:	33 1f       	adc	r19, r19
    1f0a:	44 1f       	adc	r20, r20
    1f0c:	55 1f       	adc	r21, r21
    1f0e:	22 0f       	add	r18, r18
    1f10:	33 1f       	adc	r19, r19
    1f12:	44 1f       	adc	r20, r20
    1f14:	55 1f       	adc	r21, r21
    1f16:	0e 94 94 59 	call	0xb328	; 0xb328 <__udivmodsi4>
    1f1a:	21 50       	subi	r18, 0x01	; 1
    1f1c:	31 09       	sbc	r19, r1
    1f1e:	f8 01       	movw	r30, r16
    1f20:	31 83       	std	Z+1, r19	; 0x01
    1f22:	20 83       	st	Z, r18
    1f24:	dd c0       	rjmp	.+442    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1f26:	d5 01       	movw	r26, r10
    1f28:	c4 01       	movw	r24, r8
    1f2a:	97 5f       	subi	r25, 0xF7	; 247
    1f2c:	a2 4c       	sbci	r26, 0xC2	; 194
    1f2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	66 0f       	add	r22, r22
    1f36:	77 1f       	adc	r23, r23
    1f38:	88 1f       	adc	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	66 0f       	add	r22, r22
    1f3e:	77 1f       	adc	r23, r23
    1f40:	88 1f       	adc	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	95 01       	movw	r18, r10
    1f46:	84 01       	movw	r16, r8
    1f48:	00 0f       	add	r16, r16
    1f4a:	11 1f       	adc	r17, r17
    1f4c:	22 1f       	adc	r18, r18
    1f4e:	33 1f       	adc	r19, r19
    1f50:	00 0f       	add	r16, r16
    1f52:	11 1f       	adc	r17, r17
    1f54:	22 1f       	adc	r18, r18
    1f56:	33 1f       	adc	r19, r19
    1f58:	a9 01       	movw	r20, r18
    1f5a:	98 01       	movw	r18, r16
    1f5c:	22 0f       	add	r18, r18
    1f5e:	33 1f       	adc	r19, r19
    1f60:	44 1f       	adc	r20, r20
    1f62:	55 1f       	adc	r21, r21
    1f64:	0e 94 94 59 	call	0xb328	; 0xb328 <__udivmodsi4>
    1f68:	21 50       	subi	r18, 0x01	; 1
    1f6a:	31 09       	sbc	r19, r1
    1f6c:	30 93 d5 00 	sts	0x00D5, r19	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    1f70:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    1f74:	82 e0       	ldi	r24, 0x02	; 2
    1f76:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1f7a:	88 e9       	ldi	r24, 0x98	; 152
    1f7c:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1f80:	8e e0       	ldi	r24, 0x0E	; 14
    1f82:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1f86:	ac c0       	rjmp	.+344    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1f88:	04 ed       	ldi	r16, 0xD4	; 212
    1f8a:	10 e0       	ldi	r17, 0x00	; 0
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	11 82       	std	Z+1, r1	; 0x01
    1f90:	10 82       	st	Z, r1
    1f92:	e1 e0       	ldi	r30, 0x01	; 1
    1f94:	f1 e0       	ldi	r31, 0x01	; 1
    1f96:	80 81       	ld	r24, Z
    1f98:	84 60       	ori	r24, 0x04	; 4
    1f9a:	80 83       	st	Z, r24
    1f9c:	80 ec       	ldi	r24, 0xC0	; 192
    1f9e:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1fa2:	88 e9       	ldi	r24, 0x98	; 152
    1fa4:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1fa8:	d5 01       	movw	r26, r10
    1faa:	c4 01       	movw	r24, r8
    1fac:	80 58       	subi	r24, 0x80	; 128
    1fae:	9b 47       	sbci	r25, 0x7B	; 123
    1fb0:	a1 4e       	sbci	r26, 0xE1	; 225
    1fb2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	aa 1f       	adc	r26, r26
    1fba:	bb 1f       	adc	r27, r27
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	aa 1f       	adc	r26, r26
    1fc2:	bb 1f       	adc	r27, r27
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	66 0f       	add	r22, r22
    1fca:	77 1f       	adc	r23, r23
    1fcc:	88 1f       	adc	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	88 0c       	add	r8, r8
    1fd2:	99 1c       	adc	r9, r9
    1fd4:	aa 1c       	adc	r10, r10
    1fd6:	bb 1c       	adc	r11, r11
    1fd8:	88 0c       	add	r8, r8
    1fda:	99 1c       	adc	r9, r9
    1fdc:	aa 1c       	adc	r10, r10
    1fde:	bb 1c       	adc	r11, r11
    1fe0:	a5 01       	movw	r20, r10
    1fe2:	94 01       	movw	r18, r8
    1fe4:	22 0f       	add	r18, r18
    1fe6:	33 1f       	adc	r19, r19
    1fe8:	44 1f       	adc	r20, r20
    1fea:	55 1f       	adc	r21, r21
    1fec:	22 0f       	add	r18, r18
    1fee:	33 1f       	adc	r19, r19
    1ff0:	44 1f       	adc	r20, r20
    1ff2:	55 1f       	adc	r21, r21
    1ff4:	0e 94 94 59 	call	0xb328	; 0xb328 <__udivmodsi4>
    1ff8:	21 50       	subi	r18, 0x01	; 1
    1ffa:	31 09       	sbc	r19, r1
    1ffc:	f8 01       	movw	r30, r16
    1ffe:	31 83       	std	Z+1, r19	; 0x01
    2000:	20 83       	st	Z, r18
    2002:	6e c0       	rjmp	.+220    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    2004:	d5 01       	movw	r26, r10
    2006:	c4 01       	movw	r24, r8
    2008:	97 5f       	subi	r25, 0xF7	; 247
    200a:	a2 4c       	sbci	r26, 0xC2	; 194
    200c:	bf 4f       	sbci	r27, 0xFF	; 255
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	66 0f       	add	r22, r22
    2014:	77 1f       	adc	r23, r23
    2016:	88 1f       	adc	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	66 0f       	add	r22, r22
    201c:	77 1f       	adc	r23, r23
    201e:	88 1f       	adc	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	95 01       	movw	r18, r10
    2024:	84 01       	movw	r16, r8
    2026:	00 0f       	add	r16, r16
    2028:	11 1f       	adc	r17, r17
    202a:	22 1f       	adc	r18, r18
    202c:	33 1f       	adc	r19, r19
    202e:	00 0f       	add	r16, r16
    2030:	11 1f       	adc	r17, r17
    2032:	22 1f       	adc	r18, r18
    2034:	33 1f       	adc	r19, r19
    2036:	a9 01       	movw	r20, r18
    2038:	98 01       	movw	r18, r16
    203a:	22 0f       	add	r18, r18
    203c:	33 1f       	adc	r19, r19
    203e:	44 1f       	adc	r20, r20
    2040:	55 1f       	adc	r21, r21
    2042:	0e 94 94 59 	call	0xb328	; 0xb328 <__udivmodsi4>
    2046:	21 50       	subi	r18, 0x01	; 1
    2048:	31 09       	sbc	r19, r1
    204a:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    204e:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2058:	88 e9       	ldi	r24, 0x98	; 152
    205a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    205e:	8e e0       	ldi	r24, 0x0E	; 14
    2060:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    2064:	3d c0       	rjmp	.+122    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    2066:	04 e3       	ldi	r16, 0x34	; 52
    2068:	11 e0       	ldi	r17, 0x01	; 1
    206a:	f8 01       	movw	r30, r16
    206c:	11 82       	std	Z+1, r1	; 0x01
    206e:	10 82       	st	Z, r1
    2070:	e4 e0       	ldi	r30, 0x04	; 4
    2072:	f1 e0       	ldi	r31, 0x01	; 1
    2074:	80 81       	ld	r24, Z
    2076:	84 60       	ori	r24, 0x04	; 4
    2078:	80 83       	st	Z, r24
    207a:	80 ec       	ldi	r24, 0xC0	; 192
    207c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    2080:	88 e9       	ldi	r24, 0x98	; 152
    2082:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    2086:	d5 01       	movw	r26, r10
    2088:	c4 01       	movw	r24, r8
    208a:	80 58       	subi	r24, 0x80	; 128
    208c:	9b 47       	sbci	r25, 0x7B	; 123
    208e:	a1 4e       	sbci	r26, 0xE1	; 225
    2090:	bf 4f       	sbci	r27, 0xFF	; 255
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	aa 1f       	adc	r26, r26
    2098:	bb 1f       	adc	r27, r27
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	aa 1f       	adc	r26, r26
    20a0:	bb 1f       	adc	r27, r27
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	66 0f       	add	r22, r22
    20a8:	77 1f       	adc	r23, r23
    20aa:	88 1f       	adc	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	88 0c       	add	r8, r8
    20b0:	99 1c       	adc	r9, r9
    20b2:	aa 1c       	adc	r10, r10
    20b4:	bb 1c       	adc	r11, r11
    20b6:	88 0c       	add	r8, r8
    20b8:	99 1c       	adc	r9, r9
    20ba:	aa 1c       	adc	r10, r10
    20bc:	bb 1c       	adc	r11, r11
    20be:	a5 01       	movw	r20, r10
    20c0:	94 01       	movw	r18, r8
    20c2:	22 0f       	add	r18, r18
    20c4:	33 1f       	adc	r19, r19
    20c6:	44 1f       	adc	r20, r20
    20c8:	55 1f       	adc	r21, r21
    20ca:	22 0f       	add	r18, r18
    20cc:	33 1f       	adc	r19, r19
    20ce:	44 1f       	adc	r20, r20
    20d0:	55 1f       	adc	r21, r21
    20d2:	0e 94 94 59 	call	0xb328	; 0xb328 <__udivmodsi4>
    20d6:	21 50       	subi	r18, 0x01	; 1
    20d8:	31 09       	sbc	r19, r1
    20da:	f8 01       	movw	r30, r16
    20dc:	31 83       	std	Z+1, r19	; 0x01
    20de:	20 83       	st	Z, r18
    20e0:	0f 90       	pop	r0
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	82 e2       	ldi	r24, 0x22	; 34
    20e6:	fe 01       	movw	r30, r28
    20e8:	31 96       	adiw	r30, 0x01	; 1
    20ea:	d6 01       	movw	r26, r12
    20ec:	01 90       	ld	r0, Z+
    20ee:	0d 92       	st	X+, r0
    20f0:	8a 95       	dec	r24
    20f2:	e1 f7       	brne	.-8      	; 0x20ec <xSerialPortInitMinimal+0x446>
    20f4:	c6 01       	movw	r24, r12
    20f6:	a2 96       	adiw	r28, 0x22	; 34
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	ff 90       	pop	r15
    210c:	ef 90       	pop	r14
    210e:	df 90       	pop	r13
    2110:	cf 90       	pop	r12
    2112:	bf 90       	pop	r11
    2114:	af 90       	pop	r10
    2116:	9f 90       	pop	r9
    2118:	8f 90       	pop	r8
    211a:	7f 90       	pop	r7
    211c:	08 95       	ret

0000211e <__vector_25>:
#elif defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
ISR( USART0_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART0_RX_vect )

#endif
{
    211e:	1f 92       	push	r1
    2120:	0f 92       	push	r0
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	0f 92       	push	r0
    2126:	11 24       	eor	r1, r1
    2128:	0b b6       	in	r0, 0x3b	; 59
    212a:	0f 92       	push	r0
    212c:	2f 93       	push	r18
    212e:	3f 93       	push	r19
    2130:	4f 93       	push	r20
    2132:	5f 93       	push	r21
    2134:	6f 93       	push	r22
    2136:	7f 93       	push	r23
    2138:	8f 93       	push	r24
    213a:	9f 93       	push	r25
    213c:	af 93       	push	r26
    213e:	bf 93       	push	r27
    2140:	cf 93       	push	r28
    2142:	ef 93       	push	r30
    2144:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR0A & (_BV(FE0)|_BV(DOR0)|_BV(UPE0)) ) )
    2146:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    214a:	8c 71       	andi	r24, 0x1C	; 28
    214c:	71 f0       	breq	.+28     	; 0x216a <__vector_25+0x4c>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR0A & (1<<RXC0) ) erroredByte = UDR0;
    214e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    2152:	88 23       	and	r24, r24
    2154:	0c f0       	brlt	.+2      	; 0x2158 <__vector_25+0x3a>
    2156:	57 c0       	rjmp	.+174    	; 0x2206 <__stack+0x7>
    2158:	a6 ec       	ldi	r26, 0xC6	; 198
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e0 ec       	ldi	r30, 0xC0	; 192
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	8c 91       	ld	r24, X
    2162:	80 81       	ld	r24, Z
    2164:	88 23       	and	r24, r24
    2166:	e4 f3       	brlt	.-8      	; 0x2160 <__vector_25+0x42>
    2168:	4e c0       	rjmp	.+156    	; 0x2206 <__stack+0x7>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR0;
    216a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
//UCSR3B &= ~ ( _BV(RXCIE3) | _BV(RXEN3) | _BV(TXEN3));
if(!port_3)
    216e:	80 91 f7 08 	lds	r24, 0x08F7	; 0x8008f7 <port_3>
    2172:	81 11       	cpse	r24, r1
    2174:	1d c0       	rjmp	.+58     	; 0x21b0 <__vector_25+0x92>
{
port_0=true;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	80 93 9d 0a 	sts	0x0A9D, r24	; 0x800a9d <port_0>
timer_1_Init();
    217c:	0e 94 b8 25 	call	0x4b70	; 0x4b70 <timer_1_Init>
start_1_Timer();//my cod
    2180:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <start_1_Timer>
TCNT1=0;//my cod		
    2184:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    2188:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
frame[indexBuf] = cChar;//my cod
    218c:	e0 91 95 07 	lds	r30, 0x0795	; 0x800795 <indexBuf>
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	e8 54       	subi	r30, 0x48	; 72
    2194:	f8 4f       	sbci	r31, 0xF8	; 248
    2196:	c0 83       	st	Z, r28
indexBuf++;//my cod
    2198:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <indexBuf>
    219c:	8f 5f       	subi	r24, 0xFF	; 255
    219e:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <indexBuf>
if(indexBuf == portSERIAL_BUFFER_RX ) overflow=1;//my cod
    21a2:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <indexBuf>
    21a6:	8f 3f       	cpi	r24, 0xFF	; 255
    21a8:	19 f4       	brne	.+6      	; 0x21b0 <__vector_25+0x92>
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	80 93 71 07 	sts	0x0771, r24	; 0x800771 <overflow>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	0f 92       	push	r0
	{
	    count = buffer->count;
    21b6:	ef e4       	ldi	r30, 0x4F	; 79
    21b8:	f7 e0       	ldi	r31, 0x07	; 7
    21ba:	21 81       	ldd	r18, Z+1	; 0x01
    21bc:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    21be:	0f 90       	pop	r0
    21c0:	0f be       	out	0x3f, r0	; 63
}
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerialPort.xRxedChars) ) )
    21c2:	83 85       	ldd	r24, Z+11	; 0x0b
    21c4:	94 85       	ldd	r25, Z+12	; 0x0c
    21c6:	28 17       	cp	r18, r24
    21c8:	39 07       	cpc	r19, r25
    21ca:	e9 f0       	breq	.+58     	; 0x2206 <__stack+0x7>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    21cc:	e0 e5       	ldi	r30, 0x50	; 80
    21ce:	f7 e0       	ldi	r31, 0x07	; 7

	*buffer->in = data;
    21d0:	a2 81       	ldd	r26, Z+2	; 0x02
    21d2:	b3 81       	ldd	r27, Z+3	; 0x03
    21d4:	cc 93       	st	X, r28

	if (++buffer->in == buffer->end)
    21d6:	82 81       	ldd	r24, Z+2	; 0x02
    21d8:	93 81       	ldd	r25, Z+3	; 0x03
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	93 83       	std	Z+3, r25	; 0x03
    21de:	82 83       	std	Z+2, r24	; 0x02
    21e0:	20 85       	ldd	r18, Z+8	; 0x08
    21e2:	31 85       	ldd	r19, Z+9	; 0x09
    21e4:	82 17       	cp	r24, r18
    21e6:	93 07       	cpc	r25, r19
    21e8:	21 f4       	brne	.+8      	; 0x21f2 <__vector_25+0xd4>
	  buffer->in = buffer->start;
    21ea:	86 81       	ldd	r24, Z+6	; 0x06
    21ec:	97 81       	ldd	r25, Z+7	; 0x07
    21ee:	93 83       	std	Z+3, r25	; 0x03
    21f0:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	0f 92       	push	r0
	{
	    buffer->count++;
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	01 96       	adiw	r24, 0x01	; 1
    21fe:	91 83       	std	Z+1, r25	; 0x01
    2200:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    2202:	0f 90       	pop	r0
    2204:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerialPort.xRxedChars), cChar);
	}
}
    2206:	ff 91       	pop	r31
    2208:	ef 91       	pop	r30
    220a:	cf 91       	pop	r28
    220c:	bf 91       	pop	r27
    220e:	af 91       	pop	r26
    2210:	9f 91       	pop	r25
    2212:	8f 91       	pop	r24
    2214:	7f 91       	pop	r23
    2216:	6f 91       	pop	r22
    2218:	5f 91       	pop	r21
    221a:	4f 91       	pop	r20
    221c:	3f 91       	pop	r19
    221e:	2f 91       	pop	r18
    2220:	0f 90       	pop	r0
    2222:	0b be       	out	0x3b, r0	; 59
    2224:	0f 90       	pop	r0
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	0f 90       	pop	r0
    222a:	1f 90       	pop	r1
    222c:	18 95       	reti

0000222e <__vector_26>:
#elif defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
ISR( USART0_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART0_UDRE_vect )

#endif
{
    222e:	1f 92       	push	r1
    2230:	0f 92       	push	r0
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	0f 92       	push	r0
    2236:	11 24       	eor	r1, r1
    2238:	0b b6       	in	r0, 0x3b	; 59
    223a:	0f 92       	push	r0
    223c:	2f 93       	push	r18
    223e:	8f 93       	push	r24
    2240:	9f 93       	push	r25
    2242:	af 93       	push	r26
    2244:	bf 93       	push	r27
    2246:	ef 93       	push	r30
    2248:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	0f 92       	push	r0
	{
	    count = buffer->count;
    2250:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <xSerialPort+0xd>
    2254:	90 91 5d 07 	lds	r25, 0x075D	; 0x80075d <xSerialPort+0xe>
	}
	portEXIT_CRITICAL();
    2258:	0f 90       	pop	r0
    225a:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerialPort.xCharsForTx) ) )
    225c:	89 2b       	or	r24, r25
    225e:	31 f4       	brne	.+12     	; 0x226c <__vector_26+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt0_Off();
    2260:	e1 ec       	ldi	r30, 0xC1	; 193
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	8f 7d       	andi	r24, 0xDF	; 223
    2268:	80 83       	st	Z, r24
    226a:	1c c0       	rjmp	.+56     	; 0x22a4 <__vector_26+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    226c:	ec e5       	ldi	r30, 0x5C	; 92
    226e:	f7 e0       	ldi	r31, 0x07	; 7

	uint8_t data = *buffer->out;
    2270:	a4 81       	ldd	r26, Z+4	; 0x04
    2272:	b5 81       	ldd	r27, Z+5	; 0x05
    2274:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    2276:	b5 83       	std	Z+5, r27	; 0x05
    2278:	a4 83       	std	Z+4, r26	; 0x04
    227a:	80 85       	ldd	r24, Z+8	; 0x08
    227c:	91 85       	ldd	r25, Z+9	; 0x09
    227e:	a8 17       	cp	r26, r24
    2280:	b9 07       	cpc	r27, r25
    2282:	21 f4       	brne	.+8      	; 0x228c <__vector_26+0x5e>
	  buffer->out = buffer->start;
    2284:	86 81       	ldd	r24, Z+6	; 0x06
    2286:	97 81       	ldd	r25, Z+7	; 0x07
    2288:	95 83       	std	Z+5, r25	; 0x05
    228a:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	0f 92       	push	r0
	{
	    buffer->count--;
    2292:	80 81       	ld	r24, Z
    2294:	91 81       	ldd	r25, Z+1	; 0x01
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    229c:	0f 90       	pop	r0
    229e:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR0 = ringBuffer_Pop( (ringBuffer_t*) &(xSerialPort.xCharsForTx) );
    22a0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    22a4:	ff 91       	pop	r31
    22a6:	ef 91       	pop	r30
    22a8:	bf 91       	pop	r27
    22aa:	af 91       	pop	r26
    22ac:	9f 91       	pop	r25
    22ae:	8f 91       	pop	r24
    22b0:	2f 91       	pop	r18
    22b2:	0f 90       	pop	r0
    22b4:	0b be       	out	0x3b, r0	; 59
    22b6:	0f 90       	pop	r0
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	0f 90       	pop	r0
    22bc:	1f 90       	pop	r1
    22be:	18 95       	reti

000022c0 <__vector_36>:

#if defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

ISR( USART1_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART1_RX_vect )
{
    22c0:	1f 92       	push	r1
    22c2:	0f 92       	push	r0
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	0f 92       	push	r0
    22c8:	11 24       	eor	r1, r1
    22ca:	0b b6       	in	r0, 0x3b	; 59
    22cc:	0f 92       	push	r0
    22ce:	2f 93       	push	r18
    22d0:	3f 93       	push	r19
    22d2:	4f 93       	push	r20
    22d4:	8f 93       	push	r24
    22d6:	9f 93       	push	r25
    22d8:	af 93       	push	r26
    22da:	bf 93       	push	r27
    22dc:	ef 93       	push	r30
    22de:	ff 93       	push	r31
	/* Get status and data from buffer */
     
	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR1A &  (_BV(FE1)|_BV(DOR1)|_BV(UPE1)) ) )
    22e0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    22e4:	8c 71       	andi	r24, 0x1C	; 28
    22e6:	71 f0       	breq	.+28     	; 0x2304 <__vector_36+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR1A & (1<<RXC1) ) erroredByte = UDR1;
    22e8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    22ec:	88 23       	and	r24, r24
    22ee:	0c f0       	brlt	.+2      	; 0x22f2 <__vector_36+0x32>
    22f0:	36 c0       	rjmp	.+108    	; 0x235e <__vector_36+0x9e>
    22f2:	ae ec       	ldi	r26, 0xCE	; 206
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e8 ec       	ldi	r30, 0xC8	; 200
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	8c 91       	ld	r24, X
    22fc:	80 81       	ld	r24, Z
    22fe:	88 23       	and	r24, r24
    2300:	e4 f3       	brlt	.-8      	; 0x22fa <__vector_36+0x3a>
    2302:	2d c0       	rjmp	.+90     	; 0x235e <__vector_36+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR1;
    2304:	40 91 ce 00 	lds	r20, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	0f 92       	push	r0
	{
	    count = buffer->count;
    230e:	e7 eb       	ldi	r30, 0xB7	; 183
    2310:	f8 e0       	ldi	r31, 0x08	; 8
    2312:	21 81       	ldd	r18, Z+1	; 0x01
    2314:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2316:	0f 90       	pop	r0
    2318:	0f be       	out	0x3f, r0	; 63
				
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial1Port.xRxedChars) ) )
    231a:	83 85       	ldd	r24, Z+11	; 0x0b
    231c:	94 85       	ldd	r25, Z+12	; 0x0c
    231e:	28 17       	cp	r18, r24
    2320:	39 07       	cpc	r19, r25
    2322:	e9 f0       	breq	.+58     	; 0x235e <__vector_36+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    2324:	e8 eb       	ldi	r30, 0xB8	; 184
    2326:	f8 e0       	ldi	r31, 0x08	; 8

	*buffer->in = data;
    2328:	a2 81       	ldd	r26, Z+2	; 0x02
    232a:	b3 81       	ldd	r27, Z+3	; 0x03
    232c:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	01 96       	adiw	r24, 0x01	; 1
    2334:	93 83       	std	Z+3, r25	; 0x03
    2336:	82 83       	std	Z+2, r24	; 0x02
    2338:	20 85       	ldd	r18, Z+8	; 0x08
    233a:	31 85       	ldd	r19, Z+9	; 0x09
    233c:	82 17       	cp	r24, r18
    233e:	93 07       	cpc	r25, r19
    2340:	21 f4       	brne	.+8      	; 0x234a <__vector_36+0x8a>
	  buffer->in = buffer->start;
    2342:	86 81       	ldd	r24, Z+6	; 0x06
    2344:	97 81       	ldd	r25, Z+7	; 0x07
    2346:	93 83       	std	Z+3, r25	; 0x03
    2348:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	0f 92       	push	r0
	{
	    buffer->count++;
    2350:	80 81       	ld	r24, Z
    2352:	91 81       	ldd	r25, Z+1	; 0x01
    2354:	01 96       	adiw	r24, 0x01	; 1
    2356:	91 83       	std	Z+1, r25	; 0x01
    2358:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    235a:	0f 90       	pop	r0
    235c:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial1Port.xRxedChars), cChar);
			
	}
}
    235e:	ff 91       	pop	r31
    2360:	ef 91       	pop	r30
    2362:	bf 91       	pop	r27
    2364:	af 91       	pop	r26
    2366:	9f 91       	pop	r25
    2368:	8f 91       	pop	r24
    236a:	4f 91       	pop	r20
    236c:	3f 91       	pop	r19
    236e:	2f 91       	pop	r18
    2370:	0f 90       	pop	r0
    2372:	0b be       	out	0x3b, r0	; 59
    2374:	0f 90       	pop	r0
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	0f 90       	pop	r0
    237a:	1f 90       	pop	r1
    237c:	18 95       	reti

0000237e <__vector_37>:
/*-----------------------------------------------------------*/

ISR( USART1_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART1_UDRE_vect )
{
    237e:	1f 92       	push	r1
    2380:	0f 92       	push	r0
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	0f 92       	push	r0
    2386:	11 24       	eor	r1, r1
    2388:	0b b6       	in	r0, 0x3b	; 59
    238a:	0f 92       	push	r0
    238c:	2f 93       	push	r18
    238e:	8f 93       	push	r24
    2390:	9f 93       	push	r25
    2392:	af 93       	push	r26
    2394:	bf 93       	push	r27
    2396:	ef 93       	push	r30
    2398:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	0f 92       	push	r0
	{
	    count = buffer->count;
    23a0:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <xSerial1Port+0xd>
    23a4:	90 91 c5 08 	lds	r25, 0x08C5	; 0x8008c5 <xSerial1Port+0xe>
	}
	portEXIT_CRITICAL();
    23a8:	0f 90       	pop	r0
    23aa:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) ) )
    23ac:	89 2b       	or	r24, r25
    23ae:	31 f4       	brne	.+12     	; 0x23bc <__vector_37+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt1_Off();
    23b0:	e9 ec       	ldi	r30, 0xC9	; 201
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	8f 7d       	andi	r24, 0xDF	; 223
    23b8:	80 83       	st	Z, r24
    23ba:	1c c0       	rjmp	.+56     	; 0x23f4 <__vector_37+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    23bc:	e4 ec       	ldi	r30, 0xC4	; 196
    23be:	f8 e0       	ldi	r31, 0x08	; 8

	uint8_t data = *buffer->out;
    23c0:	a4 81       	ldd	r26, Z+4	; 0x04
    23c2:	b5 81       	ldd	r27, Z+5	; 0x05
    23c4:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    23c6:	b5 83       	std	Z+5, r27	; 0x05
    23c8:	a4 83       	std	Z+4, r26	; 0x04
    23ca:	80 85       	ldd	r24, Z+8	; 0x08
    23cc:	91 85       	ldd	r25, Z+9	; 0x09
    23ce:	a8 17       	cp	r26, r24
    23d0:	b9 07       	cpc	r27, r25
    23d2:	21 f4       	brne	.+8      	; 0x23dc <__vector_37+0x5e>
	  buffer->out = buffer->start;
    23d4:	86 81       	ldd	r24, Z+6	; 0x06
    23d6:	97 81       	ldd	r25, Z+7	; 0x07
    23d8:	95 83       	std	Z+5, r25	; 0x05
    23da:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	0f 92       	push	r0
	{
	    buffer->count--;
    23e2:	80 81       	ld	r24, Z
    23e4:	91 81       	ldd	r25, Z+1	; 0x01
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	91 83       	std	Z+1, r25	; 0x01
    23ea:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    23ec:	0f 90       	pop	r0
    23ee:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR1 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) );
    23f0:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
	}
}
    23f4:	ff 91       	pop	r31
    23f6:	ef 91       	pop	r30
    23f8:	bf 91       	pop	r27
    23fa:	af 91       	pop	r26
    23fc:	9f 91       	pop	r25
    23fe:	8f 91       	pop	r24
    2400:	2f 91       	pop	r18
    2402:	0f 90       	pop	r0
    2404:	0b be       	out	0x3b, r0	; 59
    2406:	0f 90       	pop	r0
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	0f 90       	pop	r0
    240c:	1f 90       	pop	r1
    240e:	18 95       	reti

00002410 <__vector_51>:

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

ISR( USART2_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART2_RX_vect )
{
    2410:	1f 92       	push	r1
    2412:	0f 92       	push	r0
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	0f 92       	push	r0
    2418:	11 24       	eor	r1, r1
    241a:	0b b6       	in	r0, 0x3b	; 59
    241c:	0f 92       	push	r0
    241e:	2f 93       	push	r18
    2420:	3f 93       	push	r19
    2422:	4f 93       	push	r20
    2424:	8f 93       	push	r24
    2426:	9f 93       	push	r25
    2428:	af 93       	push	r26
    242a:	bf 93       	push	r27
    242c:	ef 93       	push	r30
    242e:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR2A & (_BV(FE2)|_BV(DOR2)|_BV(UPE2)) ) )
    2430:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    2434:	8c 71       	andi	r24, 0x1C	; 28
    2436:	71 f0       	breq	.+28     	; 0x2454 <__vector_51+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR2A & (1<<RXC2) ) erroredByte = UDR2;
    2438:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    243c:	88 23       	and	r24, r24
    243e:	0c f0       	brlt	.+2      	; 0x2442 <__vector_51+0x32>
    2440:	36 c0       	rjmp	.+108    	; 0x24ae <__vector_51+0x9e>
    2442:	a6 ed       	ldi	r26, 0xD6	; 214
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e0 ed       	ldi	r30, 0xD0	; 208
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	8c 91       	ld	r24, X
    244c:	80 81       	ld	r24, Z
    244e:	88 23       	and	r24, r24
    2450:	e4 f3       	brlt	.-8      	; 0x244a <__vector_51+0x3a>
    2452:	2d c0       	rjmp	.+90     	; 0x24ae <__vector_51+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR2;
    2454:	40 91 d6 00 	lds	r20, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	0f 92       	push	r0
	{
	    count = buffer->count;
    245e:	e3 e7       	ldi	r30, 0x73	; 115
    2460:	f7 e0       	ldi	r31, 0x07	; 7
    2462:	21 81       	ldd	r18, Z+1	; 0x01
    2464:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2466:	0f 90       	pop	r0
    2468:	0f be       	out	0x3f, r0	; 63

		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial2Port.xRxedChars) ) )
    246a:	83 85       	ldd	r24, Z+11	; 0x0b
    246c:	94 85       	ldd	r25, Z+12	; 0x0c
    246e:	28 17       	cp	r18, r24
    2470:	39 07       	cpc	r19, r25
    2472:	e9 f0       	breq	.+58     	; 0x24ae <__vector_51+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    2474:	e4 e7       	ldi	r30, 0x74	; 116
    2476:	f7 e0       	ldi	r31, 0x07	; 7

	*buffer->in = data;
    2478:	a2 81       	ldd	r26, Z+2	; 0x02
    247a:	b3 81       	ldd	r27, Z+3	; 0x03
    247c:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	93 81       	ldd	r25, Z+3	; 0x03
    2482:	01 96       	adiw	r24, 0x01	; 1
    2484:	93 83       	std	Z+3, r25	; 0x03
    2486:	82 83       	std	Z+2, r24	; 0x02
    2488:	20 85       	ldd	r18, Z+8	; 0x08
    248a:	31 85       	ldd	r19, Z+9	; 0x09
    248c:	82 17       	cp	r24, r18
    248e:	93 07       	cpc	r25, r19
    2490:	21 f4       	brne	.+8      	; 0x249a <__vector_51+0x8a>
	  buffer->in = buffer->start;
    2492:	86 81       	ldd	r24, Z+6	; 0x06
    2494:	97 81       	ldd	r25, Z+7	; 0x07
    2496:	93 83       	std	Z+3, r25	; 0x03
    2498:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	0f 92       	push	r0
	{
	    buffer->count++;
    24a0:	80 81       	ld	r24, Z
    24a2:	91 81       	ldd	r25, Z+1	; 0x01
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    24aa:	0f 90       	pop	r0
    24ac:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial2Port.xRxedChars), cChar);
	}
}
    24ae:	ff 91       	pop	r31
    24b0:	ef 91       	pop	r30
    24b2:	bf 91       	pop	r27
    24b4:	af 91       	pop	r26
    24b6:	9f 91       	pop	r25
    24b8:	8f 91       	pop	r24
    24ba:	4f 91       	pop	r20
    24bc:	3f 91       	pop	r19
    24be:	2f 91       	pop	r18
    24c0:	0f 90       	pop	r0
    24c2:	0b be       	out	0x3b, r0	; 59
    24c4:	0f 90       	pop	r0
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	0f 90       	pop	r0
    24ca:	1f 90       	pop	r1
    24cc:	18 95       	reti

000024ce <__vector_52>:
/*-----------------------------------------------------------*/

ISR( USART2_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART2_UDRE_vect )
{
    24ce:	1f 92       	push	r1
    24d0:	0f 92       	push	r0
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	0f 92       	push	r0
    24d6:	11 24       	eor	r1, r1
    24d8:	0b b6       	in	r0, 0x3b	; 59
    24da:	0f 92       	push	r0
    24dc:	2f 93       	push	r18
    24de:	8f 93       	push	r24
    24e0:	9f 93       	push	r25
    24e2:	af 93       	push	r26
    24e4:	bf 93       	push	r27
    24e6:	ef 93       	push	r30
    24e8:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	0f 92       	push	r0
	{
	    count = buffer->count;
    24f0:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <xSerial2Port+0xd>
    24f4:	90 91 81 07 	lds	r25, 0x0781	; 0x800781 <xSerial2Port+0xe>
	}
	portEXIT_CRITICAL();
    24f8:	0f 90       	pop	r0
    24fa:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) ) )
    24fc:	89 2b       	or	r24, r25
    24fe:	31 f4       	brne	.+12     	; 0x250c <__vector_52+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt2_Off();
    2500:	e1 ed       	ldi	r30, 0xD1	; 209
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	8f 7d       	andi	r24, 0xDF	; 223
    2508:	80 83       	st	Z, r24
    250a:	1c c0       	rjmp	.+56     	; 0x2544 <__vector_52+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    250c:	e0 e8       	ldi	r30, 0x80	; 128
    250e:	f7 e0       	ldi	r31, 0x07	; 7

	uint8_t data = *buffer->out;
    2510:	a4 81       	ldd	r26, Z+4	; 0x04
    2512:	b5 81       	ldd	r27, Z+5	; 0x05
    2514:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    2516:	b5 83       	std	Z+5, r27	; 0x05
    2518:	a4 83       	std	Z+4, r26	; 0x04
    251a:	80 85       	ldd	r24, Z+8	; 0x08
    251c:	91 85       	ldd	r25, Z+9	; 0x09
    251e:	a8 17       	cp	r26, r24
    2520:	b9 07       	cpc	r27, r25
    2522:	21 f4       	brne	.+8      	; 0x252c <__vector_52+0x5e>
	  buffer->out = buffer->start;
    2524:	86 81       	ldd	r24, Z+6	; 0x06
    2526:	97 81       	ldd	r25, Z+7	; 0x07
    2528:	95 83       	std	Z+5, r25	; 0x05
    252a:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	0f 92       	push	r0
	{
	    buffer->count--;
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	91 83       	std	Z+1, r25	; 0x01
    253a:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    253c:	0f 90       	pop	r0
    253e:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR2 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) );
    2540:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	}
}
    2544:	ff 91       	pop	r31
    2546:	ef 91       	pop	r30
    2548:	bf 91       	pop	r27
    254a:	af 91       	pop	r26
    254c:	9f 91       	pop	r25
    254e:	8f 91       	pop	r24
    2550:	2f 91       	pop	r18
    2552:	0f 90       	pop	r0
    2554:	0b be       	out	0x3b, r0	; 59
    2556:	0f 90       	pop	r0
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	0f 90       	pop	r0
    255c:	1f 90       	pop	r1
    255e:	18 95       	reti

00002560 <__vector_54>:
/*-----------------------------------------------------------*/

ISR( USART3_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART3_RX_vect )
{
    2560:	1f 92       	push	r1
    2562:	0f 92       	push	r0
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	0f 92       	push	r0
    2568:	11 24       	eor	r1, r1
    256a:	0b b6       	in	r0, 0x3b	; 59
    256c:	0f 92       	push	r0
    256e:	2f 93       	push	r18
    2570:	3f 93       	push	r19
    2572:	4f 93       	push	r20
    2574:	5f 93       	push	r21
    2576:	6f 93       	push	r22
    2578:	7f 93       	push	r23
    257a:	8f 93       	push	r24
    257c:	9f 93       	push	r25
    257e:	af 93       	push	r26
    2580:	bf 93       	push	r27
    2582:	cf 93       	push	r28
    2584:	ef 93       	push	r30
    2586:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR3A & (_BV(FE3)|_BV(DOR3)|_BV(UPE3)) ) )
    2588:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    258c:	8c 71       	andi	r24, 0x1C	; 28
    258e:	71 f0       	breq	.+28     	; 0x25ac <__vector_54+0x4c>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR3A & (1<<RXC3) ) erroredByte = UDR3;
    2590:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2594:	88 23       	and	r24, r24
    2596:	0c f0       	brlt	.+2      	; 0x259a <__vector_54+0x3a>
    2598:	57 c0       	rjmp	.+174    	; 0x2648 <__vector_54+0xe8>
    259a:	a6 e3       	ldi	r26, 0x36	; 54
    259c:	b1 e0       	ldi	r27, 0x01	; 1
    259e:	e0 e3       	ldi	r30, 0x30	; 48
    25a0:	f1 e0       	ldi	r31, 0x01	; 1
    25a2:	8c 91       	ld	r24, X
    25a4:	80 81       	ld	r24, Z
    25a6:	88 23       	and	r24, r24
    25a8:	e4 f3       	brlt	.-8      	; 0x25a2 <__vector_54+0x42>
    25aa:	4e c0       	rjmp	.+156    	; 0x2648 <__vector_54+0xe8>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR3;
    25ac:	c0 91 36 01 	lds	r28, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		
	//xSerialxPrintf(&xSerial3Port,"interrupt\r\n");	
if(!port_0)
    25b0:	80 91 9d 0a 	lds	r24, 0x0A9D	; 0x800a9d <port_0>
    25b4:	81 11       	cpse	r24, r1
    25b6:	1d c0       	rjmp	.+58     	; 0x25f2 <__vector_54+0x92>
{			//xSerialxPrintf(&xSerial3Port,"port_3\r\n");
			port_3=true;
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	80 93 f7 08 	sts	0x08F7, r24	; 0x8008f7 <port_3>
			timer_1_Init();
    25be:	0e 94 b8 25 	call	0x4b70	; 0x4b70 <timer_1_Init>
			start_1_Timer();//my cod
    25c2:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <start_1_Timer>
			TCNT1=0;//my cod
    25c6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    25ca:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
			frame[indexBuf] = cChar;//my cod
    25ce:	e0 91 95 07 	lds	r30, 0x0795	; 0x800795 <indexBuf>
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	e8 54       	subi	r30, 0x48	; 72
    25d6:	f8 4f       	sbci	r31, 0xF8	; 248
    25d8:	c0 83       	st	Z, r28
			indexBuf++;//my cod
    25da:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <indexBuf>
    25de:	8f 5f       	subi	r24, 0xFF	; 255
    25e0:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <indexBuf>
			if(indexBuf == portSERIAL_BUFFER_RX ) overflow=1;//my cod
    25e4:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <indexBuf>
    25e8:	8f 3f       	cpi	r24, 0xFF	; 255
    25ea:	19 f4       	brne	.+6      	; 0x25f2 <__vector_54+0x92>
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	80 93 71 07 	sts	0x0771, r24	; 0x800771 <overflow>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	0f 92       	push	r0
	{
	    count = buffer->count;
    25f8:	e6 e9       	ldi	r30, 0x96	; 150
    25fa:	f7 e0       	ldi	r31, 0x07	; 7
    25fc:	21 81       	ldd	r18, Z+1	; 0x01
    25fe:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2600:	0f 90       	pop	r0
    2602:	0f be       	out	0x3f, r0	; 63
}
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial3Port.xRxedChars) ) )
    2604:	83 85       	ldd	r24, Z+11	; 0x0b
    2606:	94 85       	ldd	r25, Z+12	; 0x0c
    2608:	28 17       	cp	r18, r24
    260a:	39 07       	cpc	r19, r25
    260c:	e9 f0       	breq	.+58     	; 0x2648 <__vector_54+0xe8>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    260e:	e7 e9       	ldi	r30, 0x97	; 151
    2610:	f7 e0       	ldi	r31, 0x07	; 7

	*buffer->in = data;
    2612:	a2 81       	ldd	r26, Z+2	; 0x02
    2614:	b3 81       	ldd	r27, Z+3	; 0x03
    2616:	cc 93       	st	X, r28

	if (++buffer->in == buffer->end)
    2618:	82 81       	ldd	r24, Z+2	; 0x02
    261a:	93 81       	ldd	r25, Z+3	; 0x03
    261c:	01 96       	adiw	r24, 0x01	; 1
    261e:	93 83       	std	Z+3, r25	; 0x03
    2620:	82 83       	std	Z+2, r24	; 0x02
    2622:	20 85       	ldd	r18, Z+8	; 0x08
    2624:	31 85       	ldd	r19, Z+9	; 0x09
    2626:	82 17       	cp	r24, r18
    2628:	93 07       	cpc	r25, r19
    262a:	21 f4       	brne	.+8      	; 0x2634 <__vector_54+0xd4>
	  buffer->in = buffer->start;
    262c:	86 81       	ldd	r24, Z+6	; 0x06
    262e:	97 81       	ldd	r25, Z+7	; 0x07
    2630:	93 83       	std	Z+3, r25	; 0x03
    2632:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	0f 92       	push	r0
	{
	    buffer->count++;
    263a:	80 81       	ld	r24, Z
    263c:	91 81       	ldd	r25, Z+1	; 0x01
    263e:	01 96       	adiw	r24, 0x01	; 1
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    2644:	0f 90       	pop	r0
    2646:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial3Port.xRxedChars), cChar);
	}
}
    2648:	ff 91       	pop	r31
    264a:	ef 91       	pop	r30
    264c:	cf 91       	pop	r28
    264e:	bf 91       	pop	r27
    2650:	af 91       	pop	r26
    2652:	9f 91       	pop	r25
    2654:	8f 91       	pop	r24
    2656:	7f 91       	pop	r23
    2658:	6f 91       	pop	r22
    265a:	5f 91       	pop	r21
    265c:	4f 91       	pop	r20
    265e:	3f 91       	pop	r19
    2660:	2f 91       	pop	r18
    2662:	0f 90       	pop	r0
    2664:	0b be       	out	0x3b, r0	; 59
    2666:	0f 90       	pop	r0
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	0f 90       	pop	r0
    266c:	1f 90       	pop	r1
    266e:	18 95       	reti

00002670 <__vector_55>:
/*-----------------------------------------------------------*/

ISR( USART3_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART3_UDRE_vect )
{
    2670:	1f 92       	push	r1
    2672:	0f 92       	push	r0
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	0f 92       	push	r0
    2678:	11 24       	eor	r1, r1
    267a:	0b b6       	in	r0, 0x3b	; 59
    267c:	0f 92       	push	r0
    267e:	2f 93       	push	r18
    2680:	8f 93       	push	r24
    2682:	9f 93       	push	r25
    2684:	af 93       	push	r26
    2686:	bf 93       	push	r27
    2688:	ef 93       	push	r30
    268a:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	0f 92       	push	r0
	{
	    count = buffer->count;
    2692:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <xSerial3Port+0xd>
    2696:	90 91 a4 07 	lds	r25, 0x07A4	; 0x8007a4 <xSerial3Port+0xe>
	}
	portEXIT_CRITICAL();
    269a:	0f 90       	pop	r0
    269c:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) ) )
    269e:	89 2b       	or	r24, r25
    26a0:	31 f4       	brne	.+12     	; 0x26ae <__vector_55+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt3_Off();
    26a2:	e1 e3       	ldi	r30, 0x31	; 49
    26a4:	f1 e0       	ldi	r31, 0x01	; 1
    26a6:	80 81       	ld	r24, Z
    26a8:	8f 7d       	andi	r24, 0xDF	; 223
    26aa:	80 83       	st	Z, r24
    26ac:	1c c0       	rjmp	.+56     	; 0x26e6 <__vector_55+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    26ae:	e3 ea       	ldi	r30, 0xA3	; 163
    26b0:	f7 e0       	ldi	r31, 0x07	; 7

	uint8_t data = *buffer->out;
    26b2:	a4 81       	ldd	r26, Z+4	; 0x04
    26b4:	b5 81       	ldd	r27, Z+5	; 0x05
    26b6:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    26b8:	b5 83       	std	Z+5, r27	; 0x05
    26ba:	a4 83       	std	Z+4, r26	; 0x04
    26bc:	80 85       	ldd	r24, Z+8	; 0x08
    26be:	91 85       	ldd	r25, Z+9	; 0x09
    26c0:	a8 17       	cp	r26, r24
    26c2:	b9 07       	cpc	r27, r25
    26c4:	21 f4       	brne	.+8      	; 0x26ce <__vector_55+0x5e>
	  buffer->out = buffer->start;
    26c6:	86 81       	ldd	r24, Z+6	; 0x06
    26c8:	97 81       	ldd	r25, Z+7	; 0x07
    26ca:	95 83       	std	Z+5, r25	; 0x05
    26cc:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	0f 92       	push	r0
	{
	    buffer->count--;
    26d4:	80 81       	ld	r24, Z
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    26de:	0f 90       	pop	r0
    26e0:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR3 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) );
    26e2:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	}
}
    26e6:	ff 91       	pop	r31
    26e8:	ef 91       	pop	r30
    26ea:	bf 91       	pop	r27
    26ec:	af 91       	pop	r26
    26ee:	9f 91       	pop	r25
    26f0:	8f 91       	pop	r24
    26f2:	2f 91       	pop	r18
    26f4:	0f 90       	pop	r0
    26f6:	0b be       	out	0x3b, r0	; 59
    26f8:	0f 90       	pop	r0
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	0f 90       	pop	r0
    26fe:	1f 90       	pop	r1
    2700:	18 95       	reti

00002702 <spiBegin>:
	SPCR |= _BV(SPIE);
}

void spiDetachInterrupt(void)
{
	SPCR &= ~_BV(SPIE);
    2702:	0f 93       	push	r16
    2704:	81 30       	cpi	r24, 0x01	; 1
    2706:	71 f0       	breq	.+28     	; 0x2724 <spiBegin+0x22>
    2708:	18 f0       	brcs	.+6      	; 0x2710 <spiBegin+0xe>
    270a:	82 30       	cpi	r24, 0x02	; 2
    270c:	a9 f0       	breq	.+42     	; 0x2738 <spiBegin+0x36>
    270e:	26 c0       	rjmp	.+76     	; 0x275c <spiBegin+0x5a>
    2710:	84 b1       	in	r24, 0x04	; 4
    2712:	87 60       	ori	r24, 0x07	; 7
    2714:	84 b9       	out	0x04, r24	; 4
    2716:	23 98       	cbi	0x04, 3	; 4
    2718:	85 b1       	in	r24, 0x05	; 5
    271a:	89 60       	ori	r24, 0x09	; 9
    271c:	85 b9       	out	0x05, r24	; 5
    271e:	24 9a       	sbi	0x04, 4	; 4
    2720:	2c 9a       	sbi	0x05, 4	; 5
    2722:	23 c0       	rjmp	.+70     	; 0x276a <spiBegin+0x68>
    2724:	84 b1       	in	r24, 0x04	; 4
    2726:	87 60       	ori	r24, 0x07	; 7
    2728:	84 b9       	out	0x04, r24	; 4
    272a:	23 98       	cbi	0x04, 3	; 4
    272c:	85 b1       	in	r24, 0x05	; 5
    272e:	89 60       	ori	r24, 0x09	; 9
    2730:	85 b9       	out	0x05, r24	; 5
    2732:	9d 9a       	sbi	0x13, 5	; 19
    2734:	a5 9a       	sbi	0x14, 5	; 20
    2736:	19 c0       	rjmp	.+50     	; 0x276a <spiBegin+0x68>
    2738:	84 b1       	in	r24, 0x04	; 4
    273a:	87 60       	ori	r24, 0x07	; 7
    273c:	84 b9       	out	0x04, r24	; 4
    273e:	23 98       	cbi	0x04, 3	; 4
    2740:	85 b1       	in	r24, 0x05	; 5
    2742:	89 60       	ori	r24, 0x09	; 9
    2744:	85 b9       	out	0x05, r24	; 5
    2746:	e1 e0       	ldi	r30, 0x01	; 1
    2748:	f1 e0       	ldi	r31, 0x01	; 1
    274a:	80 81       	ld	r24, Z
    274c:	80 62       	ori	r24, 0x20	; 32
    274e:	80 83       	st	Z, r24
    2750:	e2 e0       	ldi	r30, 0x02	; 2
    2752:	f1 e0       	ldi	r31, 0x01	; 1
    2754:	80 81       	ld	r24, Z
    2756:	80 62       	ori	r24, 0x20	; 32
    2758:	80 83       	st	Z, r24
    275a:	07 c0       	rjmp	.+14     	; 0x276a <spiBegin+0x68>
    275c:	84 b1       	in	r24, 0x04	; 4
    275e:	87 60       	ori	r24, 0x07	; 7
    2760:	84 b9       	out	0x04, r24	; 4
    2762:	23 98       	cbi	0x04, 3	; 4
    2764:	85 b1       	in	r24, 0x05	; 5
    2766:	89 60       	ori	r24, 0x09	; 9
    2768:	85 b9       	out	0x05, r24	; 5
    276a:	8c b5       	in	r24, 0x2c	; 44
    276c:	80 65       	ori	r24, 0x50	; 80
    276e:	8c bd       	out	0x2c, r24	; 44
    2770:	8d b5       	in	r24, 0x2d	; 45
    2772:	8e b5       	in	r24, 0x2e	; 46
    2774:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <__data_end>
    2778:	90 91 61 06 	lds	r25, 0x0661	; 0x800661 <__data_end+0x1>
    277c:	89 2b       	or	r24, r25
    277e:	89 f4       	brne	.+34     	; 0x27a2 <spiBegin+0xa0>
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	0e 94 75 0a 	call	0x14ea	; 0x14ea <xQueueCreateMutex>
    2786:	90 93 61 06 	sts	0x0661, r25	; 0x800661 <__data_end+0x1>
    278a:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <__data_end>
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	41 f0       	breq	.+16     	; 0x27a2 <spiBegin+0xa0>
    2792:	00 e0       	ldi	r16, 0x00	; 0
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	a9 01       	movw	r20, r18
    279a:	60 e0       	ldi	r22, 0x00	; 0
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    27a2:	0f 91       	pop	r16
    27a4:	08 95       	ret

000027a6 <spiSetClockDivider>:
    27a6:	9c b5       	in	r25, 0x2c	; 44
    27a8:	9c 7f       	andi	r25, 0xFC	; 252
    27aa:	28 2f       	mov	r18, r24
    27ac:	23 70       	andi	r18, 0x03	; 3
    27ae:	92 2b       	or	r25, r18
    27b0:	9c bd       	out	0x2c, r25	; 44
    27b2:	9d b5       	in	r25, 0x2d	; 45
    27b4:	82 fb       	bst	r24, 2
    27b6:	88 27       	eor	r24, r24
    27b8:	80 f9       	bld	r24, 0
    27ba:	9e 7f       	andi	r25, 0xFE	; 254
    27bc:	89 2b       	or	r24, r25
    27be:	8d bd       	out	0x2d, r24	; 45
    27c0:	08 95       	ret

000027c2 <spiSetBitOrder>:
    27c2:	81 11       	cpse	r24, r1
    27c4:	04 c0       	rjmp	.+8      	; 0x27ce <spiSetBitOrder+0xc>
    27c6:	8c b5       	in	r24, 0x2c	; 44
    27c8:	80 62       	ori	r24, 0x20	; 32
    27ca:	8c bd       	out	0x2c, r24	; 44
    27cc:	08 95       	ret
    27ce:	8c b5       	in	r24, 0x2c	; 44
    27d0:	8f 7d       	andi	r24, 0xDF	; 223
    27d2:	8c bd       	out	0x2c, r24	; 44
    27d4:	08 95       	ret

000027d6 <spiSetDataMode>:
    27d6:	9c b5       	in	r25, 0x2c	; 44
    27d8:	93 7f       	andi	r25, 0xF3	; 243
    27da:	89 2b       	or	r24, r25
    27dc:	8c bd       	out	0x2c, r24	; 44
    27de:	08 95       	ret

000027e0 <spiSelect>:
/*-----------------------------------------------------------------------*/
/* Select the SPI device                                    */
/*-----------------------------------------------------------------------*/

uint8_t spiSelect(SPI_SLAVE_SELECT SS_pin)	/* 1:Successful, 0:Timeout */
{
    27e0:	cf 93       	push	r28
    27e2:	c8 2f       	mov	r28, r24

	if( (xSemaphoreTake( xSPISemaphore, (SPI_TIMEOUT / portTICK_PERIOD_MS )) == pdTRUE ) )
    27e4:	48 ee       	ldi	r20, 0xE8	; 232
    27e6:	53 e0       	ldi	r21, 0x03	; 3
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	70 e0       	ldi	r23, 0x00	; 0
    27ec:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <__data_end>
    27f0:	90 91 61 06 	lds	r25, 0x0661	; 0x800661 <__data_end+0x1>
    27f4:	0e 94 8f 0b 	call	0x171e	; 0x171e <xQueueSemaphoreTake>
    27f8:	81 30       	cpi	r24, 0x01	; 1
    27fa:	b1 f4       	brne	.+44     	; 0x2828 <spiSelect+0x48>
	{

		switch( SS_pin )
    27fc:	c1 30       	cpi	r28, 0x01	; 1
    27fe:	39 f0       	breq	.+14     	; 0x280e <spiSelect+0x2e>
    2800:	18 f0       	brcs	.+6      	; 0x2808 <spiSelect+0x28>
    2802:	c2 30       	cpi	r28, 0x02	; 2
    2804:	39 f0       	breq	.+14     	; 0x2814 <spiSelect+0x34>
    2806:	0d c0       	rjmp	.+26     	; 0x2822 <spiSelect+0x42>
		{
		case Wiznet:	// added for EtherMega Wiznet 5100/5200 support
#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
			W5100_SEN_ENABLE(1); // Enable SEN, to get on the SPI bus. PORT D7
#endif
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
    2808:	2c 98       	cbi	0x05, 4	; 5
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    280a:	81 e0       	ldi	r24, 0x01	; 1
		case Wiznet:	// added for EtherMega Wiznet 5100/5200 support
#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
			W5100_SEN_ENABLE(1); // Enable SEN, to get on the SPI bus. PORT D7
#endif
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
			break;
    280c:	0e c0       	rjmp	.+28     	; 0x282a <spiSelect+0x4a>

		case SDCard:	// added for  SD Card support
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
    280e:	a5 98       	cbi	0x14, 5	; 20
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    2810:	81 e0       	ldi	r24, 0x01	; 1
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
			break;

		case SDCard:	// added for  SD Card support
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
			break;
    2812:	0b c0       	rjmp	.+22     	; 0x282a <spiSelect+0x4a>

		case Gameduino2:// added for Gameduino2 using FTDI FT800
			SPI_PORT_SS_G2 &= ~SPI_BIT_SS_G2; // Pull SS low to select the Gameduino 2.
    2814:	e2 e0       	ldi	r30, 0x02	; 2
    2816:	f1 e0       	ldi	r31, 0x01	; 1
    2818:	80 81       	ld	r24, Z
    281a:	8f 7d       	andi	r24, 0xDF	; 223
    281c:	80 83       	st	Z, r24
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    281e:	81 e0       	ldi	r24, 0x01	; 1
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
			break;

		case Gameduino2:// added for Gameduino2 using FTDI FT800
			SPI_PORT_SS_G2 &= ~SPI_BIT_SS_G2; // Pull SS low to select the Gameduino 2.
			break;
    2820:	04 c0       	rjmp	.+8      	; 0x282a <spiSelect+0x4a>
			break;
#endif

		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
    2822:	28 98       	cbi	0x05, 0	; 5
			break;
		}
		return 1;		// OK /
    2824:	81 e0       	ldi	r24, 0x01	; 1
#endif

		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
    2826:	01 c0       	rjmp	.+2      	; 0x282a <spiSelect+0x4a>
		}
		return 1;		// OK /
	}
	else
		return 0;		// Timeout
    2828:	80 e0       	ldi	r24, 0x00	; 0
}
    282a:	cf 91       	pop	r28
    282c:	08 95       	ret

0000282e <spiDeselect>:
/*-----------------------------------------------------------------------*/
/* Deselect the SPI device                                 */
/*-----------------------------------------------------------------------*/

void spiDeselect(SPI_SLAVE_SELECT SS_pin)
{
    282e:	0f 93       	push	r16
	// Pull SS high to Deselect the card.
	switch( SS_pin )
    2830:	81 30       	cpi	r24, 0x01	; 1
    2832:	31 f0       	breq	.+12     	; 0x2840 <spiDeselect+0x12>
    2834:	18 f0       	brcs	.+6      	; 0x283c <spiDeselect+0xe>
    2836:	82 30       	cpi	r24, 0x02	; 2
    2838:	29 f0       	breq	.+10     	; 0x2844 <spiDeselect+0x16>
    283a:	0a c0       	rjmp	.+20     	; 0x2850 <spiDeselect+0x22>
	{
	case Wiznet:		// added for EtherMega Wiznet 5100/5200 support
		SPI_PORT |= SPI_BIT_SS_WIZNET;
    283c:	2c 9a       	sbi	0x05, 4	; 5

#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
		W5100_SEN_ENABLE(0); // Disable SEN, to get off the SPI bus. PORT D7
#endif
		break;
    283e:	09 c0       	rjmp	.+18     	; 0x2852 <spiDeselect+0x24>

	case SDCard:		// added for  SD Card support
		SPI_PORT_SS_SD |= SPI_BIT_SS_SD;	// Pull SS high to deselect the uSD card.
    2840:	a5 9a       	sbi	0x14, 5	; 20
		break;
    2842:	07 c0       	rjmp	.+14     	; 0x2852 <spiDeselect+0x24>

	case Gameduino2:	// added for Gameduino 2 using FTDI FT800
		SPI_PORT_SS_G2 |= SPI_BIT_SS_G2;	// Pull SS high to deselect the Gameduino 2.
    2844:	e2 e0       	ldi	r30, 0x02	; 2
    2846:	f1 e0       	ldi	r31, 0x01	; 1
    2848:	80 81       	ld	r24, Z
    284a:	80 62       	ori	r24, 0x20	; 32
    284c:	80 83       	st	Z, r24
		break;
    284e:	01 c0       	rjmp	.+2      	; 0x2852 <spiDeselect+0x24>
		break;
#endif

	case Default:		// default SS line for Arduino Uno
	default:
		SPI_PORT |= SPI_BIT_SS;
    2850:	28 9a       	sbi	0x05, 0	; 5
		break;
	}

	xSemaphoreGive( xSPISemaphore );	/* Free FreeRTOS semaphore to allow other SPI access */
    2852:	00 e0       	ldi	r16, 0x00	; 0
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	a9 01       	movw	r20, r18
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <__data_end>
    2862:	90 91 61 06 	lds	r25, 0x0661	; 0x800661 <__data_end+0x1>
    2866:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
}
    286a:	0f 91       	pop	r16
    286c:	08 95       	ret

0000286e <spiTransfer>:



uint8_t spiTransfer(uint8_t data)
{
    286e:	28 2f       	mov	r18, r24
	// That is NOT done by this function..., because...
	// Some devices need to have their SS held low across multiple transfer calls.
	// Using spiSelect (SS_pin);

	// If the SPI module has not been enabled yet, then return with nothing.
	if( !(SPCR & _BV(SPE)) ) return 0;
    2870:	9c b5       	in	r25, 0x2c	; 44
    2872:	89 2f       	mov	r24, r25
    2874:	80 74       	andi	r24, 0x40	; 64
    2876:	96 ff       	sbrs	r25, 6
    2878:	17 c0       	rjmp	.+46     	; 0x28a8 <spiTransfer+0x3a>

	// The SPI module is enabled, but it is in slave mode, so we can not
	// transmit the byte. This can happen if SSbar is an input and it went low.
	// We will try to recover by setting the MSTR bit.
	if( !(SPCR & _BV(MSTR)) )
    287a:	0c b4       	in	r0, 0x2c	; 44
    287c:	04 fc       	sbrc	r0, 4
    287e:	08 c0       	rjmp	.+16     	; 0x2890 <spiTransfer+0x22>
		{
			SPCR |= _BV(MSTR);
    2880:	8c b5       	in	r24, 0x2c	; 44
    2882:	80 61       	ori	r24, 0x10	; 16
    2884:	8c bd       	out	0x2c, r24	; 44
			if( !(SPCR & _BV(MSTR)) ) return 0;
    2886:	9c b5       	in	r25, 0x2c	; 44
    2888:	89 2f       	mov	r24, r25
    288a:	80 71       	andi	r24, 0x10	; 16
    288c:	94 ff       	sbrs	r25, 4
    288e:	0c c0       	rjmp	.+24     	; 0x28a8 <spiTransfer+0x3a>
		}

	SPDR = data; 	// Begin transmission
    2890:	2e bd       	out	0x2e, r18	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop from iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
	__asm__ __volatile__("nop");
    2892:	00 00       	nop

	while( !(SPSR & _BV(SPIF)) )
    2894:	05 c0       	rjmp	.+10     	; 0x28a0 <spiTransfer+0x32>
	{
		if( !(SPCR & _BV(MSTR)) ) return 0;
    2896:	9c b5       	in	r25, 0x2c	; 44
    2898:	89 2f       	mov	r24, r25
    289a:	80 71       	andi	r24, 0x10	; 16
    289c:	94 ff       	sbrs	r25, 4
    289e:	04 c0       	rjmp	.+8      	; 0x28a8 <spiTransfer+0x3a>
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
	__asm__ __volatile__("nop");

	while( !(SPSR & _BV(SPIF)) )
    28a0:	0d b4       	in	r0, 0x2d	; 45
    28a2:	07 fe       	sbrs	r0, 7
    28a4:	f8 cf       	rjmp	.-16     	; 0x2896 <spiTransfer+0x28>
		if( !(SPCR & _BV(MSTR)) ) return 0;
			// The SPI module has left master mode, so return.
			// Otherwise, this will be an infinite loop.
	}

	return SPDR;
    28a6:	8e b5       	in	r24, 0x2e	; 46

	// Make sure you pull slave select high to indicate end of transfer.
	// That is NOT done by this function.
	// Using spiDeselect (SS_pin);
}
    28a8:	08 95       	ret

000028aa <prvResetNextTaskUnblockTime>:
    28aa:	e0 91 98 06 	lds	r30, 0x0698	; 0x800698 <pxDelayedTaskList>
    28ae:	f0 91 99 06 	lds	r31, 0x0699	; 0x800699 <pxDelayedTaskList+0x1>
    28b2:	80 81       	ld	r24, Z
    28b4:	81 11       	cpse	r24, r1
    28b6:	0c c0       	rjmp	.+24     	; 0x28d0 <prvResetNextTaskUnblockTime+0x26>
    28b8:	8f ef       	ldi	r24, 0xFF	; 255
    28ba:	9f ef       	ldi	r25, 0xFF	; 255
    28bc:	dc 01       	movw	r26, r24
    28be:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <xNextTaskUnblockTime>
    28c2:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <xNextTaskUnblockTime+0x1>
    28c6:	a0 93 67 06 	sts	0x0667, r26	; 0x800667 <xNextTaskUnblockTime+0x2>
    28ca:	b0 93 68 06 	sts	0x0668, r27	; 0x800668 <xNextTaskUnblockTime+0x3>
    28ce:	08 95       	ret
    28d0:	e0 91 98 06 	lds	r30, 0x0698	; 0x800698 <pxDelayedTaskList>
    28d4:	f0 91 99 06 	lds	r31, 0x0699	; 0x800699 <pxDelayedTaskList+0x1>
    28d8:	07 80       	ldd	r0, Z+7	; 0x07
    28da:	f0 85       	ldd	r31, Z+8	; 0x08
    28dc:	e0 2d       	mov	r30, r0
    28de:	00 84       	ldd	r0, Z+8	; 0x08
    28e0:	f1 85       	ldd	r31, Z+9	; 0x09
    28e2:	e0 2d       	mov	r30, r0
    28e4:	82 81       	ldd	r24, Z+2	; 0x02
    28e6:	93 81       	ldd	r25, Z+3	; 0x03
    28e8:	a4 81       	ldd	r26, Z+4	; 0x04
    28ea:	b5 81       	ldd	r27, Z+5	; 0x05
    28ec:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <xNextTaskUnblockTime>
    28f0:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <xNextTaskUnblockTime+0x1>
    28f4:	a0 93 67 06 	sts	0x0667, r26	; 0x800667 <xNextTaskUnblockTime+0x2>
    28f8:	b0 93 68 06 	sts	0x0668, r27	; 0x800668 <xNextTaskUnblockTime+0x3>
    28fc:	08 95       	ret

000028fe <prvAddCurrentTaskToDelayedList>:
    28fe:	8f 92       	push	r8
    2900:	9f 92       	push	r9
    2902:	af 92       	push	r10
    2904:	bf 92       	push	r11
    2906:	cf 92       	push	r12
    2908:	df 92       	push	r13
    290a:	ef 92       	push	r14
    290c:	ff 92       	push	r15
    290e:	cf 93       	push	r28
    2910:	6b 01       	movw	r12, r22
    2912:	7c 01       	movw	r14, r24
    2914:	c4 2f       	mov	r28, r20
    2916:	80 90 6f 06 	lds	r8, 0x066F	; 0x80066f <xTickCount>
    291a:	90 90 70 06 	lds	r9, 0x0670	; 0x800670 <xTickCount+0x1>
    291e:	a0 90 71 06 	lds	r10, 0x0671	; 0x800671 <xTickCount+0x2>
    2922:	b0 90 72 06 	lds	r11, 0x0672	; 0x800672 <xTickCount+0x3>
    2926:	80 91 dc 06 	lds	r24, 0x06DC	; 0x8006dc <pxCurrentTCB>
    292a:	90 91 dd 06 	lds	r25, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    292e:	02 96       	adiw	r24, 0x02	; 2
    2930:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2934:	8f ef       	ldi	r24, 0xFF	; 255
    2936:	c8 16       	cp	r12, r24
    2938:	d8 06       	cpc	r13, r24
    293a:	e8 06       	cpc	r14, r24
    293c:	f8 06       	cpc	r15, r24
    293e:	69 f4       	brne	.+26     	; 0x295a <prvAddCurrentTaskToDelayedList+0x5c>
    2940:	cc 23       	and	r28, r28
    2942:	59 f0       	breq	.+22     	; 0x295a <prvAddCurrentTaskToDelayedList+0x5c>
    2944:	60 91 dc 06 	lds	r22, 0x06DC	; 0x8006dc <pxCurrentTCB>
    2948:	70 91 dd 06 	lds	r23, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    294c:	6e 5f       	subi	r22, 0xFE	; 254
    294e:	7f 4f       	sbci	r23, 0xFF	; 255
    2950:	84 e7       	ldi	r24, 0x74	; 116
    2952:	96 e0       	ldi	r25, 0x06	; 6
    2954:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2958:	3f c0       	rjmp	.+126    	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    295a:	c8 0c       	add	r12, r8
    295c:	d9 1c       	adc	r13, r9
    295e:	ea 1c       	adc	r14, r10
    2960:	fb 1c       	adc	r15, r11
    2962:	e0 91 dc 06 	lds	r30, 0x06DC	; 0x8006dc <pxCurrentTCB>
    2966:	f0 91 dd 06 	lds	r31, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    296a:	c2 82       	std	Z+2, r12	; 0x02
    296c:	d3 82       	std	Z+3, r13	; 0x03
    296e:	e4 82       	std	Z+4, r14	; 0x04
    2970:	f5 82       	std	Z+5, r15	; 0x05
    2972:	c8 14       	cp	r12, r8
    2974:	d9 04       	cpc	r13, r9
    2976:	ea 04       	cpc	r14, r10
    2978:	fb 04       	cpc	r15, r11
    297a:	68 f4       	brcc	.+26     	; 0x2996 <prvAddCurrentTaskToDelayedList+0x98>
    297c:	60 91 dc 06 	lds	r22, 0x06DC	; 0x8006dc <pxCurrentTCB>
    2980:	70 91 dd 06 	lds	r23, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    2984:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <pxOverflowDelayedTaskList>
    2988:	90 91 97 06 	lds	r25, 0x0697	; 0x800697 <pxOverflowDelayedTaskList+0x1>
    298c:	6e 5f       	subi	r22, 0xFE	; 254
    298e:	7f 4f       	sbci	r23, 0xFF	; 255
    2990:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    2994:	21 c0       	rjmp	.+66     	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    2996:	60 91 dc 06 	lds	r22, 0x06DC	; 0x8006dc <pxCurrentTCB>
    299a:	70 91 dd 06 	lds	r23, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    299e:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <pxDelayedTaskList>
    29a2:	90 91 99 06 	lds	r25, 0x0699	; 0x800699 <pxDelayedTaskList+0x1>
    29a6:	6e 5f       	subi	r22, 0xFE	; 254
    29a8:	7f 4f       	sbci	r23, 0xFF	; 255
    29aa:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    29ae:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <xNextTaskUnblockTime>
    29b2:	90 91 66 06 	lds	r25, 0x0666	; 0x800666 <xNextTaskUnblockTime+0x1>
    29b6:	a0 91 67 06 	lds	r26, 0x0667	; 0x800667 <xNextTaskUnblockTime+0x2>
    29ba:	b0 91 68 06 	lds	r27, 0x0668	; 0x800668 <xNextTaskUnblockTime+0x3>
    29be:	c8 16       	cp	r12, r24
    29c0:	d9 06       	cpc	r13, r25
    29c2:	ea 06       	cpc	r14, r26
    29c4:	fb 06       	cpc	r15, r27
    29c6:	40 f4       	brcc	.+16     	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    29c8:	c0 92 65 06 	sts	0x0665, r12	; 0x800665 <xNextTaskUnblockTime>
    29cc:	d0 92 66 06 	sts	0x0666, r13	; 0x800666 <xNextTaskUnblockTime+0x1>
    29d0:	e0 92 67 06 	sts	0x0667, r14	; 0x800667 <xNextTaskUnblockTime+0x2>
    29d4:	f0 92 68 06 	sts	0x0668, r15	; 0x800668 <xNextTaskUnblockTime+0x3>
    29d8:	cf 91       	pop	r28
    29da:	ff 90       	pop	r15
    29dc:	ef 90       	pop	r14
    29de:	df 90       	pop	r13
    29e0:	cf 90       	pop	r12
    29e2:	bf 90       	pop	r11
    29e4:	af 90       	pop	r10
    29e6:	9f 90       	pop	r9
    29e8:	8f 90       	pop	r8
    29ea:	08 95       	ret

000029ec <xTaskCreate>:
    29ec:	4f 92       	push	r4
    29ee:	5f 92       	push	r5
    29f0:	6f 92       	push	r6
    29f2:	7f 92       	push	r7
    29f4:	8f 92       	push	r8
    29f6:	9f 92       	push	r9
    29f8:	af 92       	push	r10
    29fa:	bf 92       	push	r11
    29fc:	cf 92       	push	r12
    29fe:	df 92       	push	r13
    2a00:	ef 92       	push	r14
    2a02:	ff 92       	push	r15
    2a04:	0f 93       	push	r16
    2a06:	cf 93       	push	r28
    2a08:	df 93       	push	r29
    2a0a:	4c 01       	movw	r8, r24
    2a0c:	6b 01       	movw	r12, r22
    2a0e:	5a 01       	movw	r10, r20
    2a10:	29 01       	movw	r4, r18
    2a12:	ca 01       	movw	r24, r20
    2a14:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    2a18:	3c 01       	movw	r6, r24
    2a1a:	89 2b       	or	r24, r25
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <xTaskCreate+0x34>
    2a1e:	ec c0       	rjmp	.+472    	; 0x2bf8 <xTaskCreate+0x20c>
    2a20:	83 e3       	ldi	r24, 0x33	; 51
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    2a28:	ec 01       	movw	r28, r24
    2a2a:	89 2b       	or	r24, r25
    2a2c:	b1 f0       	breq	.+44     	; 0x2a5a <xTaskCreate+0x6e>
    2a2e:	7c 8e       	std	Y+28, r7	; 0x1c
    2a30:	6b 8e       	std	Y+27, r6	; 0x1b
    2a32:	a5 01       	movw	r20, r10
    2a34:	65 ea       	ldi	r22, 0xA5	; 165
    2a36:	70 e0       	ldi	r23, 0x00	; 0
    2a38:	c3 01       	movw	r24, r6
    2a3a:	0e 94 da 5b 	call	0xb7b4	; 0xb7b4 <memset>
    2a3e:	21 e0       	ldi	r18, 0x01	; 1
    2a40:	a2 1a       	sub	r10, r18
    2a42:	b1 08       	sbc	r11, r1
    2a44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a48:	a8 0e       	add	r10, r24
    2a4a:	b9 1e       	adc	r11, r25
    2a4c:	d6 01       	movw	r26, r12
    2a4e:	8c 91       	ld	r24, X
    2a50:	8d 8f       	std	Y+29, r24	; 0x1d
    2a52:	8c 91       	ld	r24, X
    2a54:	81 11       	cpse	r24, r1
    2a56:	05 c0       	rjmp	.+10     	; 0x2a62 <xTaskCreate+0x76>
    2a58:	18 c0       	rjmp	.+48     	; 0x2a8a <xTaskCreate+0x9e>
    2a5a:	c3 01       	movw	r24, r6
    2a5c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vPortFree>
    2a60:	cb c0       	rjmp	.+406    	; 0x2bf8 <xTaskCreate+0x20c>
    2a62:	ae 01       	movw	r20, r28
    2a64:	42 5e       	subi	r20, 0xE2	; 226
    2a66:	5f 4f       	sbci	r21, 0xFF	; 255
    2a68:	f6 01       	movw	r30, r12
    2a6a:	31 96       	adiw	r30, 0x01	; 1
    2a6c:	bf e0       	ldi	r27, 0x0F	; 15
    2a6e:	cb 0e       	add	r12, r27
    2a70:	d1 1c       	adc	r13, r1
    2a72:	cf 01       	movw	r24, r30
    2a74:	21 91       	ld	r18, Z+
    2a76:	da 01       	movw	r26, r20
    2a78:	2d 93       	st	X+, r18
    2a7a:	ad 01       	movw	r20, r26
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	8c 91       	ld	r24, X
    2a80:	88 23       	and	r24, r24
    2a82:	19 f0       	breq	.+6      	; 0x2a8a <xTaskCreate+0x9e>
    2a84:	ec 15       	cp	r30, r12
    2a86:	fd 05       	cpc	r31, r13
    2a88:	a1 f7       	brne	.-24     	; 0x2a72 <xTaskCreate+0x86>
    2a8a:	1b a6       	std	Y+43, r1	; 0x2b
    2a8c:	04 30       	cpi	r16, 0x04	; 4
    2a8e:	08 f0       	brcs	.+2      	; 0x2a92 <xTaskCreate+0xa6>
    2a90:	03 e0       	ldi	r16, 0x03	; 3
    2a92:	0a 8f       	std	Y+26, r16	; 0x1a
    2a94:	0c a7       	std	Y+44, r16	; 0x2c
    2a96:	1d a6       	std	Y+45, r1	; 0x2d
    2a98:	6e 01       	movw	r12, r28
    2a9a:	b2 e0       	ldi	r27, 0x02	; 2
    2a9c:	cb 0e       	add	r12, r27
    2a9e:	d1 1c       	adc	r13, r1
    2aa0:	c6 01       	movw	r24, r12
    2aa2:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    2aa6:	ce 01       	movw	r24, r28
    2aa8:	0e 96       	adiw	r24, 0x0e	; 14
    2aaa:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    2aae:	db 87       	std	Y+11, r29	; 0x0b
    2ab0:	ca 87       	std	Y+10, r28	; 0x0a
    2ab2:	84 e0       	ldi	r24, 0x04	; 4
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	a0 e0       	ldi	r26, 0x00	; 0
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	80 1b       	sub	r24, r16
    2abc:	91 09       	sbc	r25, r1
    2abe:	a1 09       	sbc	r26, r1
    2ac0:	b1 09       	sbc	r27, r1
    2ac2:	8e 87       	std	Y+14, r24	; 0x0e
    2ac4:	9f 87       	std	Y+15, r25	; 0x0f
    2ac6:	a8 8b       	std	Y+16, r26	; 0x10
    2ac8:	b9 8b       	std	Y+17, r27	; 0x11
    2aca:	df 8b       	std	Y+23, r29	; 0x17
    2acc:	ce 8b       	std	Y+22, r28	; 0x16
    2ace:	1e a6       	std	Y+46, r1	; 0x2e
    2ad0:	1f a6       	std	Y+47, r1	; 0x2f
    2ad2:	18 aa       	std	Y+48, r1	; 0x30
    2ad4:	19 aa       	std	Y+49, r1	; 0x31
    2ad6:	1a aa       	std	Y+50, r1	; 0x32
    2ad8:	a2 01       	movw	r20, r4
    2ada:	b4 01       	movw	r22, r8
    2adc:	c5 01       	movw	r24, r10
    2ade:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pxPortInitialiseStack>
    2ae2:	99 83       	std	Y+1, r25	; 0x01
    2ae4:	88 83       	st	Y, r24
    2ae6:	e1 14       	cp	r14, r1
    2ae8:	f1 04       	cpc	r15, r1
    2aea:	19 f0       	breq	.+6      	; 0x2af2 <xTaskCreate+0x106>
    2aec:	f7 01       	movw	r30, r14
    2aee:	d1 83       	std	Z+1, r29	; 0x01
    2af0:	c0 83       	st	Z, r28
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	0f 92       	push	r0
    2af8:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <uxCurrentNumberOfTasks>
    2afc:	8f 5f       	subi	r24, 0xFF	; 255
    2afe:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <uxCurrentNumberOfTasks>
    2b02:	80 91 dc 06 	lds	r24, 0x06DC	; 0x8006dc <pxCurrentTCB>
    2b06:	90 91 dd 06 	lds	r25, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    2b0a:	89 2b       	or	r24, r25
    2b0c:	d1 f5       	brne	.+116    	; 0x2b82 <xTaskCreate+0x196>
    2b0e:	d0 93 dd 06 	sts	0x06DD, r29	; 0x8006dd <pxCurrentTCB+0x1>
    2b12:	c0 93 dc 06 	sts	0x06DC, r28	; 0x8006dc <pxCurrentTCB>
    2b16:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <uxCurrentNumberOfTasks>
    2b1a:	81 30       	cpi	r24, 0x01	; 1
    2b1c:	09 f0       	breq	.+2      	; 0x2b20 <xTaskCreate+0x134>
    2b1e:	41 c0       	rjmp	.+130    	; 0x2ba2 <xTaskCreate+0x1b6>
    2b20:	80 eb       	ldi	r24, 0xB0	; 176
    2b22:	96 e0       	ldi	r25, 0x06	; 6
    2b24:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b28:	8b eb       	ldi	r24, 0xBB	; 187
    2b2a:	96 e0       	ldi	r25, 0x06	; 6
    2b2c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b30:	86 ec       	ldi	r24, 0xC6	; 198
    2b32:	96 e0       	ldi	r25, 0x06	; 6
    2b34:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b38:	81 ed       	ldi	r24, 0xD1	; 209
    2b3a:	96 e0       	ldi	r25, 0x06	; 6
    2b3c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b40:	85 ea       	ldi	r24, 0xA5	; 165
    2b42:	96 e0       	ldi	r25, 0x06	; 6
    2b44:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b48:	8a e9       	ldi	r24, 0x9A	; 154
    2b4a:	96 e0       	ldi	r25, 0x06	; 6
    2b4c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b50:	8b e8       	ldi	r24, 0x8B	; 139
    2b52:	96 e0       	ldi	r25, 0x06	; 6
    2b54:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b58:	80 e8       	ldi	r24, 0x80	; 128
    2b5a:	96 e0       	ldi	r25, 0x06	; 6
    2b5c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b60:	84 e7       	ldi	r24, 0x74	; 116
    2b62:	96 e0       	ldi	r25, 0x06	; 6
    2b64:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b68:	85 ea       	ldi	r24, 0xA5	; 165
    2b6a:	96 e0       	ldi	r25, 0x06	; 6
    2b6c:	90 93 99 06 	sts	0x0699, r25	; 0x800699 <pxDelayedTaskList+0x1>
    2b70:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <pxDelayedTaskList>
    2b74:	8a e9       	ldi	r24, 0x9A	; 154
    2b76:	96 e0       	ldi	r25, 0x06	; 6
    2b78:	90 93 97 06 	sts	0x0697, r25	; 0x800697 <pxOverflowDelayedTaskList+0x1>
    2b7c:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <pxOverflowDelayedTaskList>
    2b80:	10 c0       	rjmp	.+32     	; 0x2ba2 <xTaskCreate+0x1b6>
    2b82:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <xSchedulerRunning>
    2b86:	81 11       	cpse	r24, r1
    2b88:	0c c0       	rjmp	.+24     	; 0x2ba2 <xTaskCreate+0x1b6>
    2b8a:	e0 91 dc 06 	lds	r30, 0x06DC	; 0x8006dc <pxCurrentTCB>
    2b8e:	f0 91 dd 06 	lds	r31, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    2b92:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b94:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b96:	89 17       	cp	r24, r25
    2b98:	20 f0       	brcs	.+8      	; 0x2ba2 <xTaskCreate+0x1b6>
    2b9a:	d0 93 dd 06 	sts	0x06DD, r29	; 0x8006dd <pxCurrentTCB+0x1>
    2b9e:	c0 93 dc 06 	sts	0x06DC, r28	; 0x8006dc <pxCurrentTCB>
    2ba2:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <uxTaskNumber>
    2ba6:	8f 5f       	subi	r24, 0xFF	; 255
    2ba8:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <uxTaskNumber>
    2bac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bae:	90 91 6e 06 	lds	r25, 0x066E	; 0x80066e <uxTopReadyPriority>
    2bb2:	98 17       	cp	r25, r24
    2bb4:	10 f4       	brcc	.+4      	; 0x2bba <xTaskCreate+0x1ce>
    2bb6:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <uxTopReadyPriority>
    2bba:	fb e0       	ldi	r31, 0x0B	; 11
    2bbc:	8f 9f       	mul	r24, r31
    2bbe:	c0 01       	movw	r24, r0
    2bc0:	11 24       	eor	r1, r1
    2bc2:	b6 01       	movw	r22, r12
    2bc4:	80 55       	subi	r24, 0x50	; 80
    2bc6:	99 4f       	sbci	r25, 0xF9	; 249
    2bc8:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2bcc:	0f 90       	pop	r0
    2bce:	0f be       	out	0x3f, r0	; 63
    2bd0:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <xSchedulerRunning>
    2bd4:	88 23       	and	r24, r24
    2bd6:	61 f0       	breq	.+24     	; 0x2bf0 <xTaskCreate+0x204>
    2bd8:	e0 91 dc 06 	lds	r30, 0x06DC	; 0x8006dc <pxCurrentTCB>
    2bdc:	f0 91 dd 06 	lds	r31, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    2be0:	92 8d       	ldd	r25, Z+26	; 0x1a
    2be2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2be4:	98 17       	cp	r25, r24
    2be6:	30 f4       	brcc	.+12     	; 0x2bf4 <xTaskCreate+0x208>
    2be8:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	05 c0       	rjmp	.+10     	; 0x2bfa <xTaskCreate+0x20e>
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	03 c0       	rjmp	.+6      	; 0x2bfa <xTaskCreate+0x20e>
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	01 c0       	rjmp	.+2      	; 0x2bfa <xTaskCreate+0x20e>
    2bf8:	8f ef       	ldi	r24, 0xFF	; 255
    2bfa:	df 91       	pop	r29
    2bfc:	cf 91       	pop	r28
    2bfe:	0f 91       	pop	r16
    2c00:	ff 90       	pop	r15
    2c02:	ef 90       	pop	r14
    2c04:	df 90       	pop	r13
    2c06:	cf 90       	pop	r12
    2c08:	bf 90       	pop	r11
    2c0a:	af 90       	pop	r10
    2c0c:	9f 90       	pop	r9
    2c0e:	8f 90       	pop	r8
    2c10:	7f 90       	pop	r7
    2c12:	6f 90       	pop	r6
    2c14:	5f 90       	pop	r5
    2c16:	4f 90       	pop	r4
    2c18:	08 95       	ret

00002c1a <vTaskResume>:
    2c1a:	0f 93       	push	r16
    2c1c:	1f 93       	push	r17
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
    2c22:	00 97       	sbiw	r24, 0x00	; 0
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <vTaskResume+0xe>
    2c26:	3d c0       	rjmp	.+122    	; 0x2ca2 <vTaskResume+0x88>
    2c28:	20 91 dc 06 	lds	r18, 0x06DC	; 0x8006dc <pxCurrentTCB>
    2c2c:	30 91 dd 06 	lds	r19, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    2c30:	82 17       	cp	r24, r18
    2c32:	93 07       	cpc	r25, r19
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <vTaskResume+0x1e>
    2c36:	35 c0       	rjmp	.+106    	; 0x2ca2 <vTaskResume+0x88>
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	0f 92       	push	r0
    2c3e:	fc 01       	movw	r30, r24
    2c40:	24 85       	ldd	r18, Z+12	; 0x0c
    2c42:	35 85       	ldd	r19, Z+13	; 0x0d
    2c44:	24 57       	subi	r18, 0x74	; 116
    2c46:	36 40       	sbci	r19, 0x06	; 6
    2c48:	51 f5       	brne	.+84     	; 0x2c9e <vTaskResume+0x84>
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	20 8d       	ldd	r18, Z+24	; 0x18
    2c4e:	31 8d       	ldd	r19, Z+25	; 0x19
    2c50:	f6 e0       	ldi	r31, 0x06	; 6
    2c52:	2b 38       	cpi	r18, 0x8B	; 139
    2c54:	3f 07       	cpc	r19, r31
    2c56:	19 f1       	breq	.+70     	; 0x2c9e <vTaskResume+0x84>
    2c58:	23 2b       	or	r18, r19
    2c5a:	09 f5       	brne	.+66     	; 0x2c9e <vTaskResume+0x84>
    2c5c:	ec 01       	movw	r28, r24
    2c5e:	8c 01       	movw	r16, r24
    2c60:	0e 5f       	subi	r16, 0xFE	; 254
    2c62:	1f 4f       	sbci	r17, 0xFF	; 255
    2c64:	c8 01       	movw	r24, r16
    2c66:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2c6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c6c:	90 91 6e 06 	lds	r25, 0x066E	; 0x80066e <uxTopReadyPriority>
    2c70:	98 17       	cp	r25, r24
    2c72:	10 f4       	brcc	.+4      	; 0x2c78 <vTaskResume+0x5e>
    2c74:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <uxTopReadyPriority>
    2c78:	2b e0       	ldi	r18, 0x0B	; 11
    2c7a:	82 9f       	mul	r24, r18
    2c7c:	c0 01       	movw	r24, r0
    2c7e:	11 24       	eor	r1, r1
    2c80:	b8 01       	movw	r22, r16
    2c82:	80 55       	subi	r24, 0x50	; 80
    2c84:	99 4f       	sbci	r25, 0xF9	; 249
    2c86:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2c8a:	e0 91 dc 06 	lds	r30, 0x06DC	; 0x8006dc <pxCurrentTCB>
    2c8e:	f0 91 dd 06 	lds	r31, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    2c92:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c94:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c96:	98 17       	cp	r25, r24
    2c98:	10 f0       	brcs	.+4      	; 0x2c9e <vTaskResume+0x84>
    2c9a:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2c9e:	0f 90       	pop	r0
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	df 91       	pop	r29
    2ca4:	cf 91       	pop	r28
    2ca6:	1f 91       	pop	r17
    2ca8:	0f 91       	pop	r16
    2caa:	08 95       	ret

00002cac <vTaskStartScheduler>:
    2cac:	ef 92       	push	r14
    2cae:	ff 92       	push	r15
    2cb0:	0f 93       	push	r16
    2cb2:	0f 2e       	mov	r0, r31
    2cb4:	f3 e6       	ldi	r31, 0x63	; 99
    2cb6:	ef 2e       	mov	r14, r31
    2cb8:	f6 e0       	ldi	r31, 0x06	; 6
    2cba:	ff 2e       	mov	r15, r31
    2cbc:	f0 2d       	mov	r31, r0
    2cbe:	00 e0       	ldi	r16, 0x00	; 0
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	40 e8       	ldi	r20, 0x80	; 128
    2cc6:	50 e0       	ldi	r21, 0x00	; 0
    2cc8:	66 e1       	ldi	r22, 0x16	; 22
    2cca:	72 e0       	ldi	r23, 0x02	; 2
    2ccc:	88 e3       	ldi	r24, 0x38	; 56
    2cce:	95 e0       	ldi	r25, 0x05	; 5
    2cd0:	8d de       	rcall	.-742    	; 0x29ec <xTaskCreate>
    2cd2:	81 30       	cpi	r24, 0x01	; 1
    2cd4:	e1 f4       	brne	.+56     	; 0x2d0e <vTaskStartScheduler+0x62>
    2cd6:	ce d4       	rcall	.+2460   	; 0x3674 <xTimerCreateTimerTask>
    2cd8:	81 30       	cpi	r24, 0x01	; 1
    2cda:	c9 f4       	brne	.+50     	; 0x2d0e <vTaskStartScheduler+0x62>
    2cdc:	f8 94       	cli
    2cde:	8f ef       	ldi	r24, 0xFF	; 255
    2ce0:	9f ef       	ldi	r25, 0xFF	; 255
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <xNextTaskUnblockTime>
    2ce8:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <xNextTaskUnblockTime+0x1>
    2cec:	a0 93 67 06 	sts	0x0667, r26	; 0x800667 <xNextTaskUnblockTime+0x2>
    2cf0:	b0 93 68 06 	sts	0x0668, r27	; 0x800668 <xNextTaskUnblockTime+0x3>
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <xSchedulerRunning>
    2cfa:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <xTickCount>
    2cfe:	10 92 70 06 	sts	0x0670, r1	; 0x800670 <xTickCount+0x1>
    2d02:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <xTickCount+0x2>
    2d06:	10 92 72 06 	sts	0x0672, r1	; 0x800672 <xTickCount+0x3>
    2d0a:	0e 94 56 06 	call	0xcac	; 0xcac <xPortStartScheduler>
    2d0e:	0f 91       	pop	r16
    2d10:	ff 90       	pop	r15
    2d12:	ef 90       	pop	r14
    2d14:	08 95       	ret

00002d16 <vTaskSuspendAll>:
    2d16:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <uxSchedulerSuspended>
    2d1a:	8f 5f       	subi	r24, 0xFF	; 255
    2d1c:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <uxSchedulerSuspended>
    2d20:	08 95       	ret

00002d22 <xTaskGetTickCount>:
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	0f 92       	push	r0
    2d28:	60 91 6f 06 	lds	r22, 0x066F	; 0x80066f <xTickCount>
    2d2c:	70 91 70 06 	lds	r23, 0x0670	; 0x800670 <xTickCount+0x1>
    2d30:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <xTickCount+0x2>
    2d34:	90 91 72 06 	lds	r25, 0x0672	; 0x800672 <xTickCount+0x3>
    2d38:	0f 90       	pop	r0
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	08 95       	ret

00002d3e <xTaskIncrementTick>:
    2d3e:	9f 92       	push	r9
    2d40:	af 92       	push	r10
    2d42:	bf 92       	push	r11
    2d44:	cf 92       	push	r12
    2d46:	df 92       	push	r13
    2d48:	ef 92       	push	r14
    2d4a:	ff 92       	push	r15
    2d4c:	0f 93       	push	r16
    2d4e:	1f 93       	push	r17
    2d50:	cf 93       	push	r28
    2d52:	df 93       	push	r29
    2d54:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <uxSchedulerSuspended>
    2d58:	81 11       	cpse	r24, r1
    2d5a:	ad c0       	rjmp	.+346    	; 0x2eb6 <xTaskIncrementTick+0x178>
    2d5c:	c0 90 6f 06 	lds	r12, 0x066F	; 0x80066f <xTickCount>
    2d60:	d0 90 70 06 	lds	r13, 0x0670	; 0x800670 <xTickCount+0x1>
    2d64:	e0 90 71 06 	lds	r14, 0x0671	; 0x800671 <xTickCount+0x2>
    2d68:	f0 90 72 06 	lds	r15, 0x0672	; 0x800672 <xTickCount+0x3>
    2d6c:	8f ef       	ldi	r24, 0xFF	; 255
    2d6e:	c8 1a       	sub	r12, r24
    2d70:	d8 0a       	sbc	r13, r24
    2d72:	e8 0a       	sbc	r14, r24
    2d74:	f8 0a       	sbc	r15, r24
    2d76:	c0 92 6f 06 	sts	0x066F, r12	; 0x80066f <xTickCount>
    2d7a:	d0 92 70 06 	sts	0x0670, r13	; 0x800670 <xTickCount+0x1>
    2d7e:	e0 92 71 06 	sts	0x0671, r14	; 0x800671 <xTickCount+0x2>
    2d82:	f0 92 72 06 	sts	0x0672, r15	; 0x800672 <xTickCount+0x3>
    2d86:	c1 14       	cp	r12, r1
    2d88:	d1 04       	cpc	r13, r1
    2d8a:	e1 04       	cpc	r14, r1
    2d8c:	f1 04       	cpc	r15, r1
    2d8e:	b1 f4       	brne	.+44     	; 0x2dbc <xTaskIncrementTick+0x7e>
    2d90:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <pxDelayedTaskList>
    2d94:	90 91 99 06 	lds	r25, 0x0699	; 0x800699 <pxDelayedTaskList+0x1>
    2d98:	20 91 96 06 	lds	r18, 0x0696	; 0x800696 <pxOverflowDelayedTaskList>
    2d9c:	30 91 97 06 	lds	r19, 0x0697	; 0x800697 <pxOverflowDelayedTaskList+0x1>
    2da0:	30 93 99 06 	sts	0x0699, r19	; 0x800699 <pxDelayedTaskList+0x1>
    2da4:	20 93 98 06 	sts	0x0698, r18	; 0x800698 <pxDelayedTaskList>
    2da8:	90 93 97 06 	sts	0x0697, r25	; 0x800697 <pxOverflowDelayedTaskList+0x1>
    2dac:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <pxOverflowDelayedTaskList>
    2db0:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <xNumOfOverflows>
    2db4:	8f 5f       	subi	r24, 0xFF	; 255
    2db6:	80 93 6a 06 	sts	0x066A, r24	; 0x80066a <xNumOfOverflows>
    2dba:	77 dd       	rcall	.-1298   	; 0x28aa <prvResetNextTaskUnblockTime>
    2dbc:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <xNextTaskUnblockTime>
    2dc0:	90 91 66 06 	lds	r25, 0x0666	; 0x800666 <xNextTaskUnblockTime+0x1>
    2dc4:	a0 91 67 06 	lds	r26, 0x0667	; 0x800667 <xNextTaskUnblockTime+0x2>
    2dc8:	b0 91 68 06 	lds	r27, 0x0668	; 0x800668 <xNextTaskUnblockTime+0x3>
    2dcc:	c8 16       	cp	r12, r24
    2dce:	d9 06       	cpc	r13, r25
    2dd0:	ea 06       	cpc	r14, r26
    2dd2:	fb 06       	cpc	r15, r27
    2dd4:	10 f4       	brcc	.+4      	; 0x2dda <xTaskIncrementTick+0x9c>
    2dd6:	b1 2c       	mov	r11, r1
    2dd8:	5d c0       	rjmp	.+186    	; 0x2e94 <xTaskIncrementTick+0x156>
    2dda:	b1 2c       	mov	r11, r1
    2ddc:	0f 2e       	mov	r0, r31
    2dde:	fb e0       	ldi	r31, 0x0B	; 11
    2de0:	af 2e       	mov	r10, r31
    2de2:	f0 2d       	mov	r31, r0
    2de4:	99 24       	eor	r9, r9
    2de6:	93 94       	inc	r9
    2de8:	e0 91 98 06 	lds	r30, 0x0698	; 0x800698 <pxDelayedTaskList>
    2dec:	f0 91 99 06 	lds	r31, 0x0699	; 0x800699 <pxDelayedTaskList+0x1>
    2df0:	80 81       	ld	r24, Z
    2df2:	81 11       	cpse	r24, r1
    2df4:	0c c0       	rjmp	.+24     	; 0x2e0e <xTaskIncrementTick+0xd0>
    2df6:	8f ef       	ldi	r24, 0xFF	; 255
    2df8:	9f ef       	ldi	r25, 0xFF	; 255
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <xNextTaskUnblockTime>
    2e00:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <xNextTaskUnblockTime+0x1>
    2e04:	a0 93 67 06 	sts	0x0667, r26	; 0x800667 <xNextTaskUnblockTime+0x2>
    2e08:	b0 93 68 06 	sts	0x0668, r27	; 0x800668 <xNextTaskUnblockTime+0x3>
    2e0c:	43 c0       	rjmp	.+134    	; 0x2e94 <xTaskIncrementTick+0x156>
    2e0e:	e0 91 98 06 	lds	r30, 0x0698	; 0x800698 <pxDelayedTaskList>
    2e12:	f0 91 99 06 	lds	r31, 0x0699	; 0x800699 <pxDelayedTaskList+0x1>
    2e16:	07 80       	ldd	r0, Z+7	; 0x07
    2e18:	f0 85       	ldd	r31, Z+8	; 0x08
    2e1a:	e0 2d       	mov	r30, r0
    2e1c:	c0 85       	ldd	r28, Z+8	; 0x08
    2e1e:	d1 85       	ldd	r29, Z+9	; 0x09
    2e20:	8a 81       	ldd	r24, Y+2	; 0x02
    2e22:	9b 81       	ldd	r25, Y+3	; 0x03
    2e24:	ac 81       	ldd	r26, Y+4	; 0x04
    2e26:	bd 81       	ldd	r27, Y+5	; 0x05
    2e28:	c8 16       	cp	r12, r24
    2e2a:	d9 06       	cpc	r13, r25
    2e2c:	ea 06       	cpc	r14, r26
    2e2e:	fb 06       	cpc	r15, r27
    2e30:	48 f4       	brcc	.+18     	; 0x2e44 <xTaskIncrementTick+0x106>
    2e32:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <xNextTaskUnblockTime>
    2e36:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <xNextTaskUnblockTime+0x1>
    2e3a:	a0 93 67 06 	sts	0x0667, r26	; 0x800667 <xNextTaskUnblockTime+0x2>
    2e3e:	b0 93 68 06 	sts	0x0668, r27	; 0x800668 <xNextTaskUnblockTime+0x3>
    2e42:	28 c0       	rjmp	.+80     	; 0x2e94 <xTaskIncrementTick+0x156>
    2e44:	8e 01       	movw	r16, r28
    2e46:	0e 5f       	subi	r16, 0xFE	; 254
    2e48:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4a:	c8 01       	movw	r24, r16
    2e4c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2e50:	88 8d       	ldd	r24, Y+24	; 0x18
    2e52:	99 8d       	ldd	r25, Y+25	; 0x19
    2e54:	89 2b       	or	r24, r25
    2e56:	21 f0       	breq	.+8      	; 0x2e60 <xTaskIncrementTick+0x122>
    2e58:	ce 01       	movw	r24, r28
    2e5a:	0e 96       	adiw	r24, 0x0e	; 14
    2e5c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2e60:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e62:	90 91 6e 06 	lds	r25, 0x066E	; 0x80066e <uxTopReadyPriority>
    2e66:	98 17       	cp	r25, r24
    2e68:	10 f4       	brcc	.+4      	; 0x2e6e <xTaskIncrementTick+0x130>
    2e6a:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <uxTopReadyPriority>
    2e6e:	a8 9e       	mul	r10, r24
    2e70:	c0 01       	movw	r24, r0
    2e72:	11 24       	eor	r1, r1
    2e74:	b8 01       	movw	r22, r16
    2e76:	80 55       	subi	r24, 0x50	; 80
    2e78:	99 4f       	sbci	r25, 0xF9	; 249
    2e7a:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2e7e:	e0 91 dc 06 	lds	r30, 0x06DC	; 0x8006dc <pxCurrentTCB>
    2e82:	f0 91 dd 06 	lds	r31, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    2e86:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e88:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e8a:	98 17       	cp	r25, r24
    2e8c:	08 f4       	brcc	.+2      	; 0x2e90 <xTaskIncrementTick+0x152>
    2e8e:	ac cf       	rjmp	.-168    	; 0x2de8 <xTaskIncrementTick+0xaa>
    2e90:	b9 2c       	mov	r11, r9
    2e92:	aa cf       	rjmp	.-172    	; 0x2de8 <xTaskIncrementTick+0xaa>
    2e94:	e0 91 dc 06 	lds	r30, 0x06DC	; 0x8006dc <pxCurrentTCB>
    2e98:	f0 91 dd 06 	lds	r31, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    2e9c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2e9e:	8b e0       	ldi	r24, 0x0B	; 11
    2ea0:	e8 9f       	mul	r30, r24
    2ea2:	f0 01       	movw	r30, r0
    2ea4:	11 24       	eor	r1, r1
    2ea6:	e0 55       	subi	r30, 0x50	; 80
    2ea8:	f9 4f       	sbci	r31, 0xF9	; 249
    2eaa:	80 81       	ld	r24, Z
    2eac:	82 30       	cpi	r24, 0x02	; 2
    2eae:	48 f0       	brcs	.+18     	; 0x2ec2 <xTaskIncrementTick+0x184>
    2eb0:	bb 24       	eor	r11, r11
    2eb2:	b3 94       	inc	r11
    2eb4:	06 c0       	rjmp	.+12     	; 0x2ec2 <xTaskIncrementTick+0x184>
    2eb6:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <uxPendedTicks>
    2eba:	8f 5f       	subi	r24, 0xFF	; 255
    2ebc:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <uxPendedTicks>
    2ec0:	b1 2c       	mov	r11, r1
    2ec2:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <xYieldPending>
    2ec6:	88 23       	and	r24, r24
    2ec8:	11 f0       	breq	.+4      	; 0x2ece <xTaskIncrementTick+0x190>
    2eca:	bb 24       	eor	r11, r11
    2ecc:	b3 94       	inc	r11
    2ece:	8b 2d       	mov	r24, r11
    2ed0:	df 91       	pop	r29
    2ed2:	cf 91       	pop	r28
    2ed4:	1f 91       	pop	r17
    2ed6:	0f 91       	pop	r16
    2ed8:	ff 90       	pop	r15
    2eda:	ef 90       	pop	r14
    2edc:	df 90       	pop	r13
    2ede:	cf 90       	pop	r12
    2ee0:	bf 90       	pop	r11
    2ee2:	af 90       	pop	r10
    2ee4:	9f 90       	pop	r9
    2ee6:	08 95       	ret

00002ee8 <xTaskResumeAll>:
    2ee8:	cf 92       	push	r12
    2eea:	df 92       	push	r13
    2eec:	ef 92       	push	r14
    2eee:	ff 92       	push	r15
    2ef0:	0f 93       	push	r16
    2ef2:	1f 93       	push	r17
    2ef4:	cf 93       	push	r28
    2ef6:	df 93       	push	r29
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	f8 94       	cli
    2efc:	0f 92       	push	r0
    2efe:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <uxSchedulerSuspended>
    2f02:	81 50       	subi	r24, 0x01	; 1
    2f04:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <uxSchedulerSuspended>
    2f08:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <uxSchedulerSuspended>
    2f0c:	81 11       	cpse	r24, r1
    2f0e:	5a c0       	rjmp	.+180    	; 0x2fc4 <xTaskResumeAll+0xdc>
    2f10:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <uxCurrentNumberOfTasks>
    2f14:	81 11       	cpse	r24, r1
    2f16:	2c c0       	rjmp	.+88     	; 0x2f70 <xTaskResumeAll+0x88>
    2f18:	58 c0       	rjmp	.+176    	; 0x2fca <xTaskResumeAll+0xe2>
    2f1a:	d7 01       	movw	r26, r14
    2f1c:	17 96       	adiw	r26, 0x07	; 7
    2f1e:	ed 91       	ld	r30, X+
    2f20:	fc 91       	ld	r31, X
    2f22:	18 97       	sbiw	r26, 0x08	; 8
    2f24:	c0 85       	ldd	r28, Z+8	; 0x08
    2f26:	d1 85       	ldd	r29, Z+9	; 0x09
    2f28:	ce 01       	movw	r24, r28
    2f2a:	0e 96       	adiw	r24, 0x0e	; 14
    2f2c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2f30:	8e 01       	movw	r16, r28
    2f32:	0e 5f       	subi	r16, 0xFE	; 254
    2f34:	1f 4f       	sbci	r17, 0xFF	; 255
    2f36:	c8 01       	movw	r24, r16
    2f38:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2f3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f3e:	90 91 6e 06 	lds	r25, 0x066E	; 0x80066e <uxTopReadyPriority>
    2f42:	98 17       	cp	r25, r24
    2f44:	10 f4       	brcc	.+4      	; 0x2f4a <xTaskResumeAll+0x62>
    2f46:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <uxTopReadyPriority>
    2f4a:	d8 9e       	mul	r13, r24
    2f4c:	c0 01       	movw	r24, r0
    2f4e:	11 24       	eor	r1, r1
    2f50:	b8 01       	movw	r22, r16
    2f52:	80 55       	subi	r24, 0x50	; 80
    2f54:	99 4f       	sbci	r25, 0xF9	; 249
    2f56:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2f5a:	e0 91 dc 06 	lds	r30, 0x06DC	; 0x8006dc <pxCurrentTCB>
    2f5e:	f0 91 dd 06 	lds	r31, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    2f62:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f64:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f66:	98 17       	cp	r25, r24
    2f68:	88 f0       	brcs	.+34     	; 0x2f8c <xTaskResumeAll+0xa4>
    2f6a:	c0 92 6b 06 	sts	0x066B, r12	; 0x80066b <xYieldPending>
    2f6e:	0e c0       	rjmp	.+28     	; 0x2f8c <xTaskResumeAll+0xa4>
    2f70:	c0 e0       	ldi	r28, 0x00	; 0
    2f72:	d0 e0       	ldi	r29, 0x00	; 0
    2f74:	0f 2e       	mov	r0, r31
    2f76:	fb e8       	ldi	r31, 0x8B	; 139
    2f78:	ef 2e       	mov	r14, r31
    2f7a:	f6 e0       	ldi	r31, 0x06	; 6
    2f7c:	ff 2e       	mov	r15, r31
    2f7e:	f0 2d       	mov	r31, r0
    2f80:	0f 2e       	mov	r0, r31
    2f82:	fb e0       	ldi	r31, 0x0B	; 11
    2f84:	df 2e       	mov	r13, r31
    2f86:	f0 2d       	mov	r31, r0
    2f88:	cc 24       	eor	r12, r12
    2f8a:	c3 94       	inc	r12
    2f8c:	f7 01       	movw	r30, r14
    2f8e:	80 81       	ld	r24, Z
    2f90:	81 11       	cpse	r24, r1
    2f92:	c3 cf       	rjmp	.-122    	; 0x2f1a <xTaskResumeAll+0x32>
    2f94:	cd 2b       	or	r28, r29
    2f96:	09 f0       	breq	.+2      	; 0x2f9a <xTaskResumeAll+0xb2>
    2f98:	88 dc       	rcall	.-1776   	; 0x28aa <prvResetNextTaskUnblockTime>
    2f9a:	c0 91 6c 06 	lds	r28, 0x066C	; 0x80066c <uxPendedTicks>
    2f9e:	cc 23       	and	r28, r28
    2fa0:	49 f0       	breq	.+18     	; 0x2fb4 <xTaskResumeAll+0xcc>
    2fa2:	d1 e0       	ldi	r29, 0x01	; 1
    2fa4:	cc de       	rcall	.-616    	; 0x2d3e <xTaskIncrementTick>
    2fa6:	81 11       	cpse	r24, r1
    2fa8:	d0 93 6b 06 	sts	0x066B, r29	; 0x80066b <xYieldPending>
    2fac:	c1 50       	subi	r28, 0x01	; 1
    2fae:	d1 f7       	brne	.-12     	; 0x2fa4 <xTaskResumeAll+0xbc>
    2fb0:	10 92 6c 06 	sts	0x066C, r1	; 0x80066c <uxPendedTicks>
    2fb4:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <xYieldPending>
    2fb8:	88 23       	and	r24, r24
    2fba:	31 f0       	breq	.+12     	; 0x2fc8 <xTaskResumeAll+0xe0>
    2fbc:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	03 c0       	rjmp	.+6      	; 0x2fca <xTaskResumeAll+0xe2>
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	01 c0       	rjmp	.+2      	; 0x2fca <xTaskResumeAll+0xe2>
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	0f 90       	pop	r0
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	ff 90       	pop	r15
    2fd8:	ef 90       	pop	r14
    2fda:	df 90       	pop	r13
    2fdc:	cf 90       	pop	r12
    2fde:	08 95       	ret

00002fe0 <vTaskDelay>:
    2fe0:	cf 92       	push	r12
    2fe2:	df 92       	push	r13
    2fe4:	ef 92       	push	r14
    2fe6:	ff 92       	push	r15
    2fe8:	6b 01       	movw	r12, r22
    2fea:	7c 01       	movw	r14, r24
    2fec:	67 2b       	or	r22, r23
    2fee:	68 2b       	or	r22, r24
    2ff0:	69 2b       	or	r22, r25
    2ff2:	41 f0       	breq	.+16     	; 0x3004 <vTaskDelay+0x24>
    2ff4:	90 de       	rcall	.-736    	; 0x2d16 <vTaskSuspendAll>
    2ff6:	40 e0       	ldi	r20, 0x00	; 0
    2ff8:	c7 01       	movw	r24, r14
    2ffa:	b6 01       	movw	r22, r12
    2ffc:	80 dc       	rcall	.-1792   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    2ffe:	74 df       	rcall	.-280    	; 0x2ee8 <xTaskResumeAll>
    3000:	81 11       	cpse	r24, r1
    3002:	02 c0       	rjmp	.+4      	; 0x3008 <vTaskDelay+0x28>
    3004:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3008:	ff 90       	pop	r15
    300a:	ef 90       	pop	r14
    300c:	df 90       	pop	r13
    300e:	cf 90       	pop	r12
    3010:	08 95       	ret

00003012 <vTaskSwitchContext>:
    3012:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <uxSchedulerSuspended>
    3016:	88 23       	and	r24, r24
    3018:	21 f0       	breq	.+8      	; 0x3022 <vTaskSwitchContext+0x10>
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <xYieldPending>
    3020:	08 95       	ret
    3022:	10 92 6b 06 	sts	0x066B, r1	; 0x80066b <xYieldPending>
    3026:	a0 91 dc 06 	lds	r26, 0x06DC	; 0x8006dc <pxCurrentTCB>
    302a:	b0 91 dd 06 	lds	r27, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    302e:	e0 91 dc 06 	lds	r30, 0x06DC	; 0x8006dc <pxCurrentTCB>
    3032:	f0 91 dd 06 	lds	r31, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    3036:	2d 91       	ld	r18, X+
    3038:	3c 91       	ld	r19, X
    303a:	83 8d       	ldd	r24, Z+27	; 0x1b
    303c:	94 8d       	ldd	r25, Z+28	; 0x1c
    303e:	82 17       	cp	r24, r18
    3040:	93 07       	cpc	r25, r19
    3042:	60 f0       	brcs	.+24     	; 0x305c <vTaskSwitchContext+0x4a>
    3044:	60 91 dc 06 	lds	r22, 0x06DC	; 0x8006dc <pxCurrentTCB>
    3048:	70 91 dd 06 	lds	r23, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    304c:	80 91 dc 06 	lds	r24, 0x06DC	; 0x8006dc <pxCurrentTCB>
    3050:	90 91 dd 06 	lds	r25, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    3054:	63 5e       	subi	r22, 0xE3	; 227
    3056:	7f 4f       	sbci	r23, 0xFF	; 255
    3058:	0e 94 fd 07 	call	0xffa	; 0xffa <vApplicationStackOverflowHook>
    305c:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <uxTopReadyPriority>
    3060:	28 2f       	mov	r18, r24
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	9b e0       	ldi	r25, 0x0B	; 11
    3066:	89 9f       	mul	r24, r25
    3068:	f0 01       	movw	r30, r0
    306a:	11 24       	eor	r1, r1
    306c:	e0 55       	subi	r30, 0x50	; 80
    306e:	f9 4f       	sbci	r31, 0xF9	; 249
    3070:	90 81       	ld	r25, Z
    3072:	91 11       	cpse	r25, r1
    3074:	0e c0       	rjmp	.+28     	; 0x3092 <vTaskSwitchContext+0x80>
    3076:	4b e0       	ldi	r20, 0x0B	; 11
    3078:	81 50       	subi	r24, 0x01	; 1
    307a:	28 2f       	mov	r18, r24
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	42 9f       	mul	r20, r18
    3080:	f0 01       	movw	r30, r0
    3082:	43 9f       	mul	r20, r19
    3084:	f0 0d       	add	r31, r0
    3086:	11 24       	eor	r1, r1
    3088:	e0 55       	subi	r30, 0x50	; 80
    308a:	f9 4f       	sbci	r31, 0xF9	; 249
    308c:	90 81       	ld	r25, Z
    308e:	99 23       	and	r25, r25
    3090:	99 f3       	breq	.-26     	; 0x3078 <vTaskSwitchContext+0x66>
    3092:	9b e0       	ldi	r25, 0x0B	; 11
    3094:	92 9f       	mul	r25, r18
    3096:	a0 01       	movw	r20, r0
    3098:	93 9f       	mul	r25, r19
    309a:	50 0d       	add	r21, r0
    309c:	11 24       	eor	r1, r1
    309e:	da 01       	movw	r26, r20
    30a0:	a0 55       	subi	r26, 0x50	; 80
    30a2:	b9 4f       	sbci	r27, 0xF9	; 249
    30a4:	11 96       	adiw	r26, 0x01	; 1
    30a6:	ed 91       	ld	r30, X+
    30a8:	fc 91       	ld	r31, X
    30aa:	12 97       	sbiw	r26, 0x02	; 2
    30ac:	04 80       	ldd	r0, Z+4	; 0x04
    30ae:	f5 81       	ldd	r31, Z+5	; 0x05
    30b0:	e0 2d       	mov	r30, r0
    30b2:	12 96       	adiw	r26, 0x02	; 2
    30b4:	fc 93       	st	X, r31
    30b6:	ee 93       	st	-X, r30
    30b8:	11 97       	sbiw	r26, 0x01	; 1
    30ba:	4d 54       	subi	r20, 0x4D	; 77
    30bc:	59 4f       	sbci	r21, 0xF9	; 249
    30be:	e4 17       	cp	r30, r20
    30c0:	f5 07       	cpc	r31, r21
    30c2:	29 f4       	brne	.+10     	; 0x30ce <vTaskSwitchContext+0xbc>
    30c4:	44 81       	ldd	r20, Z+4	; 0x04
    30c6:	55 81       	ldd	r21, Z+5	; 0x05
    30c8:	fd 01       	movw	r30, r26
    30ca:	52 83       	std	Z+2, r21	; 0x02
    30cc:	41 83       	std	Z+1, r20	; 0x01
    30ce:	9b e0       	ldi	r25, 0x0B	; 11
    30d0:	92 9f       	mul	r25, r18
    30d2:	f0 01       	movw	r30, r0
    30d4:	93 9f       	mul	r25, r19
    30d6:	f0 0d       	add	r31, r0
    30d8:	11 24       	eor	r1, r1
    30da:	e0 55       	subi	r30, 0x50	; 80
    30dc:	f9 4f       	sbci	r31, 0xF9	; 249
    30de:	01 80       	ldd	r0, Z+1	; 0x01
    30e0:	f2 81       	ldd	r31, Z+2	; 0x02
    30e2:	e0 2d       	mov	r30, r0
    30e4:	20 85       	ldd	r18, Z+8	; 0x08
    30e6:	31 85       	ldd	r19, Z+9	; 0x09
    30e8:	30 93 dd 06 	sts	0x06DD, r19	; 0x8006dd <pxCurrentTCB+0x1>
    30ec:	20 93 dc 06 	sts	0x06DC, r18	; 0x8006dc <pxCurrentTCB>
    30f0:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <uxTopReadyPriority>
    30f4:	08 95       	ret

000030f6 <vTaskSuspend>:
    30f6:	0f 93       	push	r16
    30f8:	1f 93       	push	r17
    30fa:	cf 93       	push	r28
    30fc:	df 93       	push	r29
    30fe:	ec 01       	movw	r28, r24
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	0f 92       	push	r0
    3106:	89 2b       	or	r24, r25
    3108:	21 f4       	brne	.+8      	; 0x3112 <vTaskSuspend+0x1c>
    310a:	c0 91 dc 06 	lds	r28, 0x06DC	; 0x8006dc <pxCurrentTCB>
    310e:	d0 91 dd 06 	lds	r29, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    3112:	8e 01       	movw	r16, r28
    3114:	0e 5f       	subi	r16, 0xFE	; 254
    3116:	1f 4f       	sbci	r17, 0xFF	; 255
    3118:	c8 01       	movw	r24, r16
    311a:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    311e:	88 8d       	ldd	r24, Y+24	; 0x18
    3120:	99 8d       	ldd	r25, Y+25	; 0x19
    3122:	89 2b       	or	r24, r25
    3124:	21 f0       	breq	.+8      	; 0x312e <vTaskSuspend+0x38>
    3126:	ce 01       	movw	r24, r28
    3128:	0e 96       	adiw	r24, 0x0e	; 14
    312a:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    312e:	b8 01       	movw	r22, r16
    3130:	84 e7       	ldi	r24, 0x74	; 116
    3132:	96 e0       	ldi	r25, 0x06	; 6
    3134:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3138:	8a a9       	ldd	r24, Y+50	; 0x32
    313a:	81 30       	cpi	r24, 0x01	; 1
    313c:	09 f4       	brne	.+2      	; 0x3140 <vTaskSuspend+0x4a>
    313e:	1a aa       	std	Y+50, r1	; 0x32
    3140:	0f 90       	pop	r0
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <xSchedulerRunning>
    3148:	88 23       	and	r24, r24
    314a:	31 f0       	breq	.+12     	; 0x3158 <vTaskSuspend+0x62>
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	0f 92       	push	r0
    3152:	ab db       	rcall	.-2218   	; 0x28aa <prvResetNextTaskUnblockTime>
    3154:	0f 90       	pop	r0
    3156:	0f be       	out	0x3f, r0	; 63
    3158:	80 91 dc 06 	lds	r24, 0x06DC	; 0x8006dc <pxCurrentTCB>
    315c:	90 91 dd 06 	lds	r25, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    3160:	c8 17       	cp	r28, r24
    3162:	d9 07       	cpc	r29, r25
    3164:	99 f4       	brne	.+38     	; 0x318c <vTaskSuspend+0x96>
    3166:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <xSchedulerRunning>
    316a:	88 23       	and	r24, r24
    316c:	19 f0       	breq	.+6      	; 0x3174 <vTaskSuspend+0x7e>
    316e:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3172:	0c c0       	rjmp	.+24     	; 0x318c <vTaskSuspend+0x96>
    3174:	90 91 74 06 	lds	r25, 0x0674	; 0x800674 <xSuspendedTaskList>
    3178:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <uxCurrentNumberOfTasks>
    317c:	98 13       	cpse	r25, r24
    317e:	05 c0       	rjmp	.+10     	; 0x318a <vTaskSuspend+0x94>
    3180:	10 92 dd 06 	sts	0x06DD, r1	; 0x8006dd <pxCurrentTCB+0x1>
    3184:	10 92 dc 06 	sts	0x06DC, r1	; 0x8006dc <pxCurrentTCB>
    3188:	01 c0       	rjmp	.+2      	; 0x318c <vTaskSuspend+0x96>
    318a:	43 df       	rcall	.-378    	; 0x3012 <vTaskSwitchContext>
    318c:	df 91       	pop	r29
    318e:	cf 91       	pop	r28
    3190:	1f 91       	pop	r17
    3192:	0f 91       	pop	r16
    3194:	08 95       	ret

00003196 <vTaskPlaceOnEventList>:
    3196:	cf 92       	push	r12
    3198:	df 92       	push	r13
    319a:	ef 92       	push	r14
    319c:	ff 92       	push	r15
    319e:	6a 01       	movw	r12, r20
    31a0:	7b 01       	movw	r14, r22
    31a2:	60 91 dc 06 	lds	r22, 0x06DC	; 0x8006dc <pxCurrentTCB>
    31a6:	70 91 dd 06 	lds	r23, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    31aa:	62 5f       	subi	r22, 0xF2	; 242
    31ac:	7f 4f       	sbci	r23, 0xFF	; 255
    31ae:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    31b2:	41 e0       	ldi	r20, 0x01	; 1
    31b4:	c7 01       	movw	r24, r14
    31b6:	b6 01       	movw	r22, r12
    31b8:	a2 db       	rcall	.-2236   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    31ba:	ff 90       	pop	r15
    31bc:	ef 90       	pop	r14
    31be:	df 90       	pop	r13
    31c0:	cf 90       	pop	r12
    31c2:	08 95       	ret

000031c4 <vTaskPlaceOnEventListRestricted>:
    31c4:	cf 92       	push	r12
    31c6:	df 92       	push	r13
    31c8:	ef 92       	push	r14
    31ca:	ff 92       	push	r15
    31cc:	cf 93       	push	r28
    31ce:	6a 01       	movw	r12, r20
    31d0:	7b 01       	movw	r14, r22
    31d2:	c2 2f       	mov	r28, r18
    31d4:	60 91 dc 06 	lds	r22, 0x06DC	; 0x8006dc <pxCurrentTCB>
    31d8:	70 91 dd 06 	lds	r23, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    31dc:	62 5f       	subi	r22, 0xF2	; 242
    31de:	7f 4f       	sbci	r23, 0xFF	; 255
    31e0:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    31e4:	cc 23       	and	r28, r28
    31e6:	21 f0       	breq	.+8      	; 0x31f0 <vTaskPlaceOnEventListRestricted+0x2c>
    31e8:	cc 24       	eor	r12, r12
    31ea:	ca 94       	dec	r12
    31ec:	dc 2c       	mov	r13, r12
    31ee:	76 01       	movw	r14, r12
    31f0:	4c 2f       	mov	r20, r28
    31f2:	c7 01       	movw	r24, r14
    31f4:	b6 01       	movw	r22, r12
    31f6:	83 db       	rcall	.-2298   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    31f8:	cf 91       	pop	r28
    31fa:	ff 90       	pop	r15
    31fc:	ef 90       	pop	r14
    31fe:	df 90       	pop	r13
    3200:	cf 90       	pop	r12
    3202:	08 95       	ret

00003204 <xTaskRemoveFromEventList>:
    3204:	0f 93       	push	r16
    3206:	1f 93       	push	r17
    3208:	cf 93       	push	r28
    320a:	df 93       	push	r29
    320c:	dc 01       	movw	r26, r24
    320e:	17 96       	adiw	r26, 0x07	; 7
    3210:	ed 91       	ld	r30, X+
    3212:	fc 91       	ld	r31, X
    3214:	18 97       	sbiw	r26, 0x08	; 8
    3216:	c0 85       	ldd	r28, Z+8	; 0x08
    3218:	d1 85       	ldd	r29, Z+9	; 0x09
    321a:	8e 01       	movw	r16, r28
    321c:	02 5f       	subi	r16, 0xF2	; 242
    321e:	1f 4f       	sbci	r17, 0xFF	; 255
    3220:	c8 01       	movw	r24, r16
    3222:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3226:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <uxSchedulerSuspended>
    322a:	81 11       	cpse	r24, r1
    322c:	16 c0       	rjmp	.+44     	; 0x325a <xTaskRemoveFromEventList+0x56>
    322e:	0c 50       	subi	r16, 0x0C	; 12
    3230:	11 09       	sbc	r17, r1
    3232:	c8 01       	movw	r24, r16
    3234:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3238:	8a 8d       	ldd	r24, Y+26	; 0x1a
    323a:	90 91 6e 06 	lds	r25, 0x066E	; 0x80066e <uxTopReadyPriority>
    323e:	98 17       	cp	r25, r24
    3240:	10 f4       	brcc	.+4      	; 0x3246 <xTaskRemoveFromEventList+0x42>
    3242:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <uxTopReadyPriority>
    3246:	bb e0       	ldi	r27, 0x0B	; 11
    3248:	8b 9f       	mul	r24, r27
    324a:	c0 01       	movw	r24, r0
    324c:	11 24       	eor	r1, r1
    324e:	b8 01       	movw	r22, r16
    3250:	80 55       	subi	r24, 0x50	; 80
    3252:	99 4f       	sbci	r25, 0xF9	; 249
    3254:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3258:	05 c0       	rjmp	.+10     	; 0x3264 <xTaskRemoveFromEventList+0x60>
    325a:	b8 01       	movw	r22, r16
    325c:	8b e8       	ldi	r24, 0x8B	; 139
    325e:	96 e0       	ldi	r25, 0x06	; 6
    3260:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3264:	e0 91 dc 06 	lds	r30, 0x06DC	; 0x8006dc <pxCurrentTCB>
    3268:	f0 91 dd 06 	lds	r31, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    326c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    326e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3270:	89 17       	cp	r24, r25
    3272:	20 f4       	brcc	.+8      	; 0x327c <xTaskRemoveFromEventList+0x78>
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <xYieldPending>
    327a:	01 c0       	rjmp	.+2      	; 0x327e <xTaskRemoveFromEventList+0x7a>
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	df 91       	pop	r29
    3280:	cf 91       	pop	r28
    3282:	1f 91       	pop	r17
    3284:	0f 91       	pop	r16
    3286:	08 95       	ret

00003288 <vTaskInternalSetTimeOutState>:
    3288:	20 91 6a 06 	lds	r18, 0x066A	; 0x80066a <xNumOfOverflows>
    328c:	fc 01       	movw	r30, r24
    328e:	20 83       	st	Z, r18
    3290:	40 91 6f 06 	lds	r20, 0x066F	; 0x80066f <xTickCount>
    3294:	50 91 70 06 	lds	r21, 0x0670	; 0x800670 <xTickCount+0x1>
    3298:	60 91 71 06 	lds	r22, 0x0671	; 0x800671 <xTickCount+0x2>
    329c:	70 91 72 06 	lds	r23, 0x0672	; 0x800672 <xTickCount+0x3>
    32a0:	41 83       	std	Z+1, r20	; 0x01
    32a2:	52 83       	std	Z+2, r21	; 0x02
    32a4:	63 83       	std	Z+3, r22	; 0x03
    32a6:	74 83       	std	Z+4, r23	; 0x04
    32a8:	08 95       	ret

000032aa <xTaskCheckForTimeOut>:
    32aa:	cf 92       	push	r12
    32ac:	df 92       	push	r13
    32ae:	ef 92       	push	r14
    32b0:	ff 92       	push	r15
    32b2:	0f 93       	push	r16
    32b4:	1f 93       	push	r17
    32b6:	cf 93       	push	r28
    32b8:	df 93       	push	r29
    32ba:	fb 01       	movw	r30, r22
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	f8 94       	cli
    32c0:	0f 92       	push	r0
    32c2:	40 91 6f 06 	lds	r20, 0x066F	; 0x80066f <xTickCount>
    32c6:	50 91 70 06 	lds	r21, 0x0670	; 0x800670 <xTickCount+0x1>
    32ca:	60 91 71 06 	lds	r22, 0x0671	; 0x800671 <xTickCount+0x2>
    32ce:	70 91 72 06 	lds	r23, 0x0672	; 0x800672 <xTickCount+0x3>
    32d2:	00 81       	ld	r16, Z
    32d4:	11 81       	ldd	r17, Z+1	; 0x01
    32d6:	22 81       	ldd	r18, Z+2	; 0x02
    32d8:	33 81       	ldd	r19, Z+3	; 0x03
    32da:	0f 3f       	cpi	r16, 0xFF	; 255
    32dc:	af ef       	ldi	r26, 0xFF	; 255
    32de:	1a 07       	cpc	r17, r26
    32e0:	2a 07       	cpc	r18, r26
    32e2:	3a 07       	cpc	r19, r26
    32e4:	49 f1       	breq	.+82     	; 0x3338 <xTaskCheckForTimeOut+0x8e>
    32e6:	ec 01       	movw	r28, r24
    32e8:	c9 80       	ldd	r12, Y+1	; 0x01
    32ea:	da 80       	ldd	r13, Y+2	; 0x02
    32ec:	eb 80       	ldd	r14, Y+3	; 0x03
    32ee:	fc 80       	ldd	r15, Y+4	; 0x04
    32f0:	a0 91 6a 06 	lds	r26, 0x066A	; 0x80066a <xNumOfOverflows>
    32f4:	b8 81       	ld	r27, Y
    32f6:	ba 17       	cp	r27, r26
    32f8:	29 f0       	breq	.+10     	; 0x3304 <xTaskCheckForTimeOut+0x5a>
    32fa:	4c 15       	cp	r20, r12
    32fc:	5d 05       	cpc	r21, r13
    32fe:	6e 05       	cpc	r22, r14
    3300:	7f 05       	cpc	r23, r15
    3302:	e0 f4       	brcc	.+56     	; 0x333c <xTaskCheckForTimeOut+0x92>
    3304:	4c 19       	sub	r20, r12
    3306:	5d 09       	sbc	r21, r13
    3308:	6e 09       	sbc	r22, r14
    330a:	7f 09       	sbc	r23, r15
    330c:	40 17       	cp	r20, r16
    330e:	51 07       	cpc	r21, r17
    3310:	62 07       	cpc	r22, r18
    3312:	73 07       	cpc	r23, r19
    3314:	58 f4       	brcc	.+22     	; 0x332c <xTaskCheckForTimeOut+0x82>
    3316:	04 1b       	sub	r16, r20
    3318:	15 0b       	sbc	r17, r21
    331a:	26 0b       	sbc	r18, r22
    331c:	37 0b       	sbc	r19, r23
    331e:	00 83       	st	Z, r16
    3320:	11 83       	std	Z+1, r17	; 0x01
    3322:	22 83       	std	Z+2, r18	; 0x02
    3324:	33 83       	std	Z+3, r19	; 0x03
    3326:	b0 df       	rcall	.-160    	; 0x3288 <vTaskInternalSetTimeOutState>
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	09 c0       	rjmp	.+18     	; 0x333e <xTaskCheckForTimeOut+0x94>
    332c:	10 82       	st	Z, r1
    332e:	11 82       	std	Z+1, r1	; 0x01
    3330:	12 82       	std	Z+2, r1	; 0x02
    3332:	13 82       	std	Z+3, r1	; 0x03
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	03 c0       	rjmp	.+6      	; 0x333e <xTaskCheckForTimeOut+0x94>
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	01 c0       	rjmp	.+2      	; 0x333e <xTaskCheckForTimeOut+0x94>
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	0f 90       	pop	r0
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	1f 91       	pop	r17
    3348:	0f 91       	pop	r16
    334a:	ff 90       	pop	r15
    334c:	ef 90       	pop	r14
    334e:	df 90       	pop	r13
    3350:	cf 90       	pop	r12
    3352:	08 95       	ret

00003354 <vTaskMissedYield>:
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <xYieldPending>
    335a:	08 95       	ret

0000335c <xTaskGetSchedulerState>:
    335c:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <xSchedulerRunning>
    3360:	88 23       	and	r24, r24
    3362:	31 f0       	breq	.+12     	; 0x3370 <xTaskGetSchedulerState+0x14>
    3364:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <uxSchedulerSuspended>
    3368:	88 23       	and	r24, r24
    336a:	21 f0       	breq	.+8      	; 0x3374 <xTaskGetSchedulerState+0x18>
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	08 95       	ret
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	08 95       	ret
    3374:	82 e0       	ldi	r24, 0x02	; 2
    3376:	08 95       	ret

00003378 <xTaskPriorityInherit>:
    3378:	0f 93       	push	r16
    337a:	1f 93       	push	r17
    337c:	cf 93       	push	r28
    337e:	df 93       	push	r29
    3380:	fc 01       	movw	r30, r24
    3382:	89 2b       	or	r24, r25
    3384:	09 f4       	brne	.+2      	; 0x3388 <xTaskPriorityInherit+0x10>
    3386:	60 c0       	rjmp	.+192    	; 0x3448 <xTaskPriorityInherit+0xd0>
    3388:	82 8d       	ldd	r24, Z+26	; 0x1a
    338a:	a0 91 dc 06 	lds	r26, 0x06DC	; 0x8006dc <pxCurrentTCB>
    338e:	b0 91 dd 06 	lds	r27, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    3392:	5a 96       	adiw	r26, 0x1a	; 26
    3394:	9c 91       	ld	r25, X
    3396:	89 17       	cp	r24, r25
    3398:	08 f0       	brcs	.+2      	; 0x339c <xTaskPriorityInherit+0x24>
    339a:	4a c0       	rjmp	.+148    	; 0x3430 <xTaskPriorityInherit+0xb8>
    339c:	46 85       	ldd	r20, Z+14	; 0x0e
    339e:	57 85       	ldd	r21, Z+15	; 0x0f
    33a0:	60 89       	ldd	r22, Z+16	; 0x10
    33a2:	71 89       	ldd	r23, Z+17	; 0x11
    33a4:	77 23       	and	r23, r23
    33a6:	94 f0       	brlt	.+36     	; 0x33cc <xTaskPriorityInherit+0x54>
    33a8:	a0 91 dc 06 	lds	r26, 0x06DC	; 0x8006dc <pxCurrentTCB>
    33ac:	b0 91 dd 06 	lds	r27, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    33b0:	5a 96       	adiw	r26, 0x1a	; 26
    33b2:	9c 91       	ld	r25, X
    33b4:	44 e0       	ldi	r20, 0x04	; 4
    33b6:	50 e0       	ldi	r21, 0x00	; 0
    33b8:	60 e0       	ldi	r22, 0x00	; 0
    33ba:	70 e0       	ldi	r23, 0x00	; 0
    33bc:	49 1b       	sub	r20, r25
    33be:	51 09       	sbc	r21, r1
    33c0:	61 09       	sbc	r22, r1
    33c2:	71 09       	sbc	r23, r1
    33c4:	46 87       	std	Z+14, r20	; 0x0e
    33c6:	57 87       	std	Z+15, r21	; 0x0f
    33c8:	60 8b       	std	Z+16, r22	; 0x10
    33ca:	71 8b       	std	Z+17, r23	; 0x11
    33cc:	2b e0       	ldi	r18, 0x0B	; 11
    33ce:	82 9f       	mul	r24, r18
    33d0:	c0 01       	movw	r24, r0
    33d2:	11 24       	eor	r1, r1
    33d4:	80 55       	subi	r24, 0x50	; 80
    33d6:	99 4f       	sbci	r25, 0xF9	; 249
    33d8:	24 85       	ldd	r18, Z+12	; 0x0c
    33da:	35 85       	ldd	r19, Z+13	; 0x0d
    33dc:	28 17       	cp	r18, r24
    33de:	39 07       	cpc	r19, r25
    33e0:	f1 f4       	brne	.+60     	; 0x341e <xTaskPriorityInherit+0xa6>
    33e2:	8f 01       	movw	r16, r30
    33e4:	ef 01       	movw	r28, r30
    33e6:	22 96       	adiw	r28, 0x02	; 2
    33e8:	ce 01       	movw	r24, r28
    33ea:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    33ee:	e0 91 dc 06 	lds	r30, 0x06DC	; 0x8006dc <pxCurrentTCB>
    33f2:	f0 91 dd 06 	lds	r31, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    33f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    33f8:	f8 01       	movw	r30, r16
    33fa:	82 8f       	std	Z+26, r24	; 0x1a
    33fc:	90 91 6e 06 	lds	r25, 0x066E	; 0x80066e <uxTopReadyPriority>
    3400:	98 17       	cp	r25, r24
    3402:	10 f4       	brcc	.+4      	; 0x3408 <xTaskPriorityInherit+0x90>
    3404:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <uxTopReadyPriority>
    3408:	fb e0       	ldi	r31, 0x0B	; 11
    340a:	8f 9f       	mul	r24, r31
    340c:	c0 01       	movw	r24, r0
    340e:	11 24       	eor	r1, r1
    3410:	be 01       	movw	r22, r28
    3412:	80 55       	subi	r24, 0x50	; 80
    3414:	99 4f       	sbci	r25, 0xF9	; 249
    3416:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	16 c0       	rjmp	.+44     	; 0x344a <xTaskPriorityInherit+0xd2>
    341e:	a0 91 dc 06 	lds	r26, 0x06DC	; 0x8006dc <pxCurrentTCB>
    3422:	b0 91 dd 06 	lds	r27, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    3426:	5a 96       	adiw	r26, 0x1a	; 26
    3428:	8c 91       	ld	r24, X
    342a:	82 8f       	std	Z+26, r24	; 0x1a
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	0d c0       	rjmp	.+26     	; 0x344a <xTaskPriorityInherit+0xd2>
    3430:	a0 91 dc 06 	lds	r26, 0x06DC	; 0x8006dc <pxCurrentTCB>
    3434:	b0 91 dd 06 	lds	r27, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	24 a5       	ldd	r18, Z+44	; 0x2c
    343c:	5a 96       	adiw	r26, 0x1a	; 26
    343e:	9c 91       	ld	r25, X
    3440:	29 17       	cp	r18, r25
    3442:	18 f0       	brcs	.+6      	; 0x344a <xTaskPriorityInherit+0xd2>
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	01 c0       	rjmp	.+2      	; 0x344a <xTaskPriorityInherit+0xd2>
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	df 91       	pop	r29
    344c:	cf 91       	pop	r28
    344e:	1f 91       	pop	r17
    3450:	0f 91       	pop	r16
    3452:	08 95       	ret

00003454 <xTaskPriorityDisinherit>:
    3454:	0f 93       	push	r16
    3456:	1f 93       	push	r17
    3458:	cf 93       	push	r28
    345a:	df 93       	push	r29
    345c:	fc 01       	movw	r30, r24
    345e:	89 2b       	or	r24, r25
    3460:	79 f1       	breq	.+94     	; 0x34c0 <xTaskPriorityDisinherit+0x6c>
    3462:	85 a5       	ldd	r24, Z+45	; 0x2d
    3464:	81 50       	subi	r24, 0x01	; 1
    3466:	85 a7       	std	Z+45, r24	; 0x2d
    3468:	22 8d       	ldd	r18, Z+26	; 0x1a
    346a:	94 a5       	ldd	r25, Z+44	; 0x2c
    346c:	29 17       	cp	r18, r25
    346e:	51 f1       	breq	.+84     	; 0x34c4 <xTaskPriorityDisinherit+0x70>
    3470:	81 11       	cpse	r24, r1
    3472:	2a c0       	rjmp	.+84     	; 0x34c8 <xTaskPriorityDisinherit+0x74>
    3474:	ef 01       	movw	r28, r30
    3476:	8f 01       	movw	r16, r30
    3478:	0e 5f       	subi	r16, 0xFE	; 254
    347a:	1f 4f       	sbci	r17, 0xFF	; 255
    347c:	c8 01       	movw	r24, r16
    347e:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3482:	8c a5       	ldd	r24, Y+44	; 0x2c
    3484:	8a 8f       	std	Y+26, r24	; 0x1a
    3486:	44 e0       	ldi	r20, 0x04	; 4
    3488:	50 e0       	ldi	r21, 0x00	; 0
    348a:	60 e0       	ldi	r22, 0x00	; 0
    348c:	70 e0       	ldi	r23, 0x00	; 0
    348e:	48 1b       	sub	r20, r24
    3490:	51 09       	sbc	r21, r1
    3492:	61 09       	sbc	r22, r1
    3494:	71 09       	sbc	r23, r1
    3496:	4e 87       	std	Y+14, r20	; 0x0e
    3498:	5f 87       	std	Y+15, r21	; 0x0f
    349a:	68 8b       	std	Y+16, r22	; 0x10
    349c:	79 8b       	std	Y+17, r23	; 0x11
    349e:	90 91 6e 06 	lds	r25, 0x066E	; 0x80066e <uxTopReadyPriority>
    34a2:	98 17       	cp	r25, r24
    34a4:	10 f4       	brcc	.+4      	; 0x34aa <xTaskPriorityDisinherit+0x56>
    34a6:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <uxTopReadyPriority>
    34aa:	2b e0       	ldi	r18, 0x0B	; 11
    34ac:	82 9f       	mul	r24, r18
    34ae:	c0 01       	movw	r24, r0
    34b0:	11 24       	eor	r1, r1
    34b2:	b8 01       	movw	r22, r16
    34b4:	80 55       	subi	r24, 0x50	; 80
    34b6:	99 4f       	sbci	r25, 0xF9	; 249
    34b8:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	05 c0       	rjmp	.+10     	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	03 c0       	rjmp	.+6      	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	01 c0       	rjmp	.+2      	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	df 91       	pop	r29
    34cc:	cf 91       	pop	r28
    34ce:	1f 91       	pop	r17
    34d0:	0f 91       	pop	r16
    34d2:	08 95       	ret

000034d4 <vTaskPriorityDisinheritAfterTimeout>:
    34d4:	0f 93       	push	r16
    34d6:	1f 93       	push	r17
    34d8:	cf 93       	push	r28
    34da:	df 93       	push	r29
    34dc:	fc 01       	movw	r30, r24
    34de:	89 2b       	or	r24, r25
    34e0:	09 f4       	brne	.+2      	; 0x34e4 <vTaskPriorityDisinheritAfterTimeout+0x10>
    34e2:	3f c0       	rjmp	.+126    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34e4:	84 a5       	ldd	r24, Z+44	; 0x2c
    34e6:	86 17       	cp	r24, r22
    34e8:	08 f4       	brcc	.+2      	; 0x34ec <vTaskPriorityDisinheritAfterTimeout+0x18>
    34ea:	86 2f       	mov	r24, r22
    34ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    34ee:	98 17       	cp	r25, r24
    34f0:	c1 f1       	breq	.+112    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34f2:	25 a5       	ldd	r18, Z+45	; 0x2d
    34f4:	21 30       	cpi	r18, 0x01	; 1
    34f6:	a9 f5       	brne	.+106    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34f8:	82 8f       	std	Z+26, r24	; 0x1a
    34fa:	46 85       	ldd	r20, Z+14	; 0x0e
    34fc:	57 85       	ldd	r21, Z+15	; 0x0f
    34fe:	60 89       	ldd	r22, Z+16	; 0x10
    3500:	71 89       	ldd	r23, Z+17	; 0x11
    3502:	77 23       	and	r23, r23
    3504:	64 f0       	brlt	.+24     	; 0x351e <vTaskPriorityDisinheritAfterTimeout+0x4a>
    3506:	44 e0       	ldi	r20, 0x04	; 4
    3508:	50 e0       	ldi	r21, 0x00	; 0
    350a:	60 e0       	ldi	r22, 0x00	; 0
    350c:	70 e0       	ldi	r23, 0x00	; 0
    350e:	48 1b       	sub	r20, r24
    3510:	51 09       	sbc	r21, r1
    3512:	61 09       	sbc	r22, r1
    3514:	71 09       	sbc	r23, r1
    3516:	46 87       	std	Z+14, r20	; 0x0e
    3518:	57 87       	std	Z+15, r21	; 0x0f
    351a:	60 8b       	std	Z+16, r22	; 0x10
    351c:	71 8b       	std	Z+17, r23	; 0x11
    351e:	2b e0       	ldi	r18, 0x0B	; 11
    3520:	92 9f       	mul	r25, r18
    3522:	c0 01       	movw	r24, r0
    3524:	11 24       	eor	r1, r1
    3526:	80 55       	subi	r24, 0x50	; 80
    3528:	99 4f       	sbci	r25, 0xF9	; 249
    352a:	24 85       	ldd	r18, Z+12	; 0x0c
    352c:	35 85       	ldd	r19, Z+13	; 0x0d
    352e:	28 17       	cp	r18, r24
    3530:	39 07       	cpc	r19, r25
    3532:	b9 f4       	brne	.+46     	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3534:	ef 01       	movw	r28, r30
    3536:	8f 01       	movw	r16, r30
    3538:	0e 5f       	subi	r16, 0xFE	; 254
    353a:	1f 4f       	sbci	r17, 0xFF	; 255
    353c:	c8 01       	movw	r24, r16
    353e:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3542:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3544:	90 91 6e 06 	lds	r25, 0x066E	; 0x80066e <uxTopReadyPriority>
    3548:	98 17       	cp	r25, r24
    354a:	10 f4       	brcc	.+4      	; 0x3550 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    354c:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <uxTopReadyPriority>
    3550:	2b e0       	ldi	r18, 0x0B	; 11
    3552:	82 9f       	mul	r24, r18
    3554:	c0 01       	movw	r24, r0
    3556:	11 24       	eor	r1, r1
    3558:	b8 01       	movw	r22, r16
    355a:	80 55       	subi	r24, 0x50	; 80
    355c:	99 4f       	sbci	r25, 0xF9	; 249
    355e:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3562:	df 91       	pop	r29
    3564:	cf 91       	pop	r28
    3566:	1f 91       	pop	r17
    3568:	0f 91       	pop	r16
    356a:	08 95       	ret

0000356c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    356c:	80 91 dc 06 	lds	r24, 0x06DC	; 0x8006dc <pxCurrentTCB>
    3570:	90 91 dd 06 	lds	r25, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    3574:	89 2b       	or	r24, r25
    3576:	39 f0       	breq	.+14     	; 0x3586 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    3578:	e0 91 dc 06 	lds	r30, 0x06DC	; 0x8006dc <pxCurrentTCB>
    357c:	f0 91 dd 06 	lds	r31, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
    3580:	85 a5       	ldd	r24, Z+45	; 0x2d
    3582:	8f 5f       	subi	r24, 0xFF	; 255
    3584:	85 a7       	std	Z+45, r24	; 0x2d
		}

		return pxCurrentTCB;
    3586:	80 91 dc 06 	lds	r24, 0x06DC	; 0x8006dc <pxCurrentTCB>
    358a:	90 91 dd 06 	lds	r25, 0x06DD	; 0x8006dd <pxCurrentTCB+0x1>
	}
    358e:	08 95       	ret

00003590 <prvInsertTimerInActiveList>:
{
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );
	return pxTimer->pcTimerName;
}
    3590:	cf 92       	push	r12
    3592:	df 92       	push	r13
    3594:	ef 92       	push	r14
    3596:	ff 92       	push	r15
    3598:	0f 93       	push	r16
    359a:	1f 93       	push	r17
    359c:	fc 01       	movw	r30, r24
    359e:	42 83       	std	Z+2, r20	; 0x02
    35a0:	53 83       	std	Z+3, r21	; 0x03
    35a2:	64 83       	std	Z+4, r22	; 0x04
    35a4:	75 83       	std	Z+5, r23	; 0x05
    35a6:	93 87       	std	Z+11, r25	; 0x0b
    35a8:	82 87       	std	Z+10, r24	; 0x0a
    35aa:	04 17       	cp	r16, r20
    35ac:	15 07       	cpc	r17, r21
    35ae:	26 07       	cpc	r18, r22
    35b0:	37 07       	cpc	r19, r23
    35b2:	c0 f0       	brcs	.+48     	; 0x35e4 <prvInsertTimerInActiveList+0x54>
    35b4:	0c 19       	sub	r16, r12
    35b6:	1d 09       	sbc	r17, r13
    35b8:	2e 09       	sbc	r18, r14
    35ba:	3f 09       	sbc	r19, r15
    35bc:	86 85       	ldd	r24, Z+14	; 0x0e
    35be:	97 85       	ldd	r25, Z+15	; 0x0f
    35c0:	a0 89       	ldd	r26, Z+16	; 0x10
    35c2:	b1 89       	ldd	r27, Z+17	; 0x11
    35c4:	08 17       	cp	r16, r24
    35c6:	19 07       	cpc	r17, r25
    35c8:	2a 07       	cpc	r18, r26
    35ca:	3b 07       	cpc	r19, r27
    35cc:	00 f5       	brcc	.+64     	; 0x360e <prvInsertTimerInActiveList+0x7e>
    35ce:	bf 01       	movw	r22, r30
    35d0:	6e 5f       	subi	r22, 0xFE	; 254
    35d2:	7f 4f       	sbci	r23, 0xFF	; 255
    35d4:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <pxOverflowTimerList>
    35d8:	90 91 e7 06 	lds	r25, 0x06E7	; 0x8006e7 <pxOverflowTimerList+0x1>
    35dc:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	18 c0       	rjmp	.+48     	; 0x3614 <prvInsertTimerInActiveList+0x84>
    35e4:	0c 15       	cp	r16, r12
    35e6:	1d 05       	cpc	r17, r13
    35e8:	2e 05       	cpc	r18, r14
    35ea:	3f 05       	cpc	r19, r15
    35ec:	28 f4       	brcc	.+10     	; 0x35f8 <prvInsertTimerInActiveList+0x68>
    35ee:	4c 15       	cp	r20, r12
    35f0:	5d 05       	cpc	r21, r13
    35f2:	6e 05       	cpc	r22, r14
    35f4:	7f 05       	cpc	r23, r15
    35f6:	68 f4       	brcc	.+26     	; 0x3612 <prvInsertTimerInActiveList+0x82>
    35f8:	bf 01       	movw	r22, r30
    35fa:	6e 5f       	subi	r22, 0xFE	; 254
    35fc:	7f 4f       	sbci	r23, 0xFF	; 255
    35fe:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <pxCurrentTimerList>
    3602:	90 91 e9 06 	lds	r25, 0x06E9	; 0x8006e9 <pxCurrentTimerList+0x1>
    3606:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	03 c0       	rjmp	.+6      	; 0x3614 <prvInsertTimerInActiveList+0x84>
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	01 c0       	rjmp	.+2      	; 0x3614 <prvInsertTimerInActiveList+0x84>
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	1f 91       	pop	r17
    3616:	0f 91       	pop	r16
    3618:	ff 90       	pop	r15
    361a:	ef 90       	pop	r14
    361c:	df 90       	pop	r13
    361e:	cf 90       	pop	r12
    3620:	08 95       	ret

00003622 <prvCheckForValidListAndQueue>:
    3622:	0f b6       	in	r0, 0x3f	; 63
    3624:	f8 94       	cli
    3626:	0f 92       	push	r0
    3628:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <xTimerQueue>
    362c:	90 91 e5 06 	lds	r25, 0x06E5	; 0x8006e5 <xTimerQueue+0x1>
    3630:	89 2b       	or	r24, r25
    3632:	e9 f4       	brne	.+58     	; 0x366e <prvCheckForValidListAndQueue+0x4c>
    3634:	85 ef       	ldi	r24, 0xF5	; 245
    3636:	96 e0       	ldi	r25, 0x06	; 6
    3638:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    363c:	8a ee       	ldi	r24, 0xEA	; 234
    363e:	96 e0       	ldi	r25, 0x06	; 6
    3640:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    3644:	85 ef       	ldi	r24, 0xF5	; 245
    3646:	96 e0       	ldi	r25, 0x06	; 6
    3648:	90 93 e9 06 	sts	0x06E9, r25	; 0x8006e9 <pxCurrentTimerList+0x1>
    364c:	80 93 e8 06 	sts	0x06E8, r24	; 0x8006e8 <pxCurrentTimerList>
    3650:	8a ee       	ldi	r24, 0xEA	; 234
    3652:	96 e0       	ldi	r25, 0x06	; 6
    3654:	90 93 e7 06 	sts	0x06E7, r25	; 0x8006e7 <pxOverflowTimerList+0x1>
    3658:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <pxOverflowTimerList>
    365c:	40 e0       	ldi	r20, 0x00	; 0
    365e:	67 e0       	ldi	r22, 0x07	; 7
    3660:	8a e0       	ldi	r24, 0x0A	; 10
    3662:	0e 94 a7 09 	call	0x134e	; 0x134e <xQueueGenericCreate>
    3666:	90 93 e5 06 	sts	0x06E5, r25	; 0x8006e5 <xTimerQueue+0x1>
    366a:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <xTimerQueue>
    366e:	0f 90       	pop	r0
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	08 95       	ret

00003674 <xTimerCreateTimerTask>:
    3674:	ef 92       	push	r14
    3676:	ff 92       	push	r15
    3678:	0f 93       	push	r16
    367a:	d3 df       	rcall	.-90     	; 0x3622 <prvCheckForValidListAndQueue>
    367c:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <xTimerQueue>
    3680:	90 91 e5 06 	lds	r25, 0x06E5	; 0x8006e5 <xTimerQueue+0x1>
    3684:	89 2b       	or	r24, r25
    3686:	89 f0       	breq	.+34     	; 0x36aa <xTimerCreateTimerTask+0x36>
    3688:	0f 2e       	mov	r0, r31
    368a:	f2 ee       	ldi	r31, 0xE2	; 226
    368c:	ef 2e       	mov	r14, r31
    368e:	f6 e0       	ldi	r31, 0x06	; 6
    3690:	ff 2e       	mov	r15, r31
    3692:	f0 2d       	mov	r31, r0
    3694:	03 e0       	ldi	r16, 0x03	; 3
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	40 e8       	ldi	r20, 0x80	; 128
    369c:	50 e0       	ldi	r21, 0x00	; 0
    369e:	6b e1       	ldi	r22, 0x1B	; 27
    36a0:	72 e0       	ldi	r23, 0x02	; 2
    36a2:	85 e8       	ldi	r24, 0x85	; 133
    36a4:	9c e1       	ldi	r25, 0x1C	; 28
    36a6:	a2 d9       	rcall	.-3260   	; 0x29ec <xTaskCreate>
    36a8:	01 c0       	rjmp	.+2      	; 0x36ac <xTimerCreateTimerTask+0x38>
    36aa:	80 e0       	ldi	r24, 0x00	; 0
    36ac:	0f 91       	pop	r16
    36ae:	ff 90       	pop	r15
    36b0:	ef 90       	pop	r14
    36b2:	08 95       	ret

000036b4 <xTimerCreate>:
    36b4:	7f 92       	push	r7
    36b6:	8f 92       	push	r8
    36b8:	9f 92       	push	r9
    36ba:	af 92       	push	r10
    36bc:	bf 92       	push	r11
    36be:	cf 92       	push	r12
    36c0:	df 92       	push	r13
    36c2:	ef 92       	push	r14
    36c4:	ff 92       	push	r15
    36c6:	0f 93       	push	r16
    36c8:	1f 93       	push	r17
    36ca:	cf 93       	push	r28
    36cc:	df 93       	push	r29
    36ce:	6c 01       	movw	r12, r24
    36d0:	4a 01       	movw	r8, r20
    36d2:	5b 01       	movw	r10, r22
    36d4:	72 2e       	mov	r7, r18
    36d6:	87 e1       	ldi	r24, 0x17	; 23
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    36de:	ec 01       	movw	r28, r24
    36e0:	89 2b       	or	r24, r25
    36e2:	81 f0       	breq	.+32     	; 0x3704 <xTimerCreate+0x50>
    36e4:	9e df       	rcall	.-196    	; 0x3622 <prvCheckForValidListAndQueue>
    36e6:	d9 82       	std	Y+1, r13	; 0x01
    36e8:	c8 82       	st	Y, r12
    36ea:	8e 86       	std	Y+14, r8	; 0x0e
    36ec:	9f 86       	std	Y+15, r9	; 0x0f
    36ee:	a8 8a       	std	Y+16, r10	; 0x10
    36f0:	b9 8a       	std	Y+17, r11	; 0x11
    36f2:	7a 8a       	std	Y+18, r7	; 0x12
    36f4:	1c 8b       	std	Y+20, r17	; 0x14
    36f6:	0b 8b       	std	Y+19, r16	; 0x13
    36f8:	fe 8a       	std	Y+22, r15	; 0x16
    36fa:	ed 8a       	std	Y+21, r14	; 0x15
    36fc:	ce 01       	movw	r24, r28
    36fe:	02 96       	adiw	r24, 0x02	; 2
    3700:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    3704:	ce 01       	movw	r24, r28
    3706:	df 91       	pop	r29
    3708:	cf 91       	pop	r28
    370a:	1f 91       	pop	r17
    370c:	0f 91       	pop	r16
    370e:	ff 90       	pop	r15
    3710:	ef 90       	pop	r14
    3712:	df 90       	pop	r13
    3714:	cf 90       	pop	r12
    3716:	bf 90       	pop	r11
    3718:	af 90       	pop	r10
    371a:	9f 90       	pop	r9
    371c:	8f 90       	pop	r8
    371e:	7f 90       	pop	r7
    3720:	08 95       	ret

00003722 <xTimerGenericCommand>:
    3722:	8f 92       	push	r8
    3724:	9f 92       	push	r9
    3726:	af 92       	push	r10
    3728:	bf 92       	push	r11
    372a:	cf 92       	push	r12
    372c:	df 92       	push	r13
    372e:	ef 92       	push	r14
    3730:	ff 92       	push	r15
    3732:	0f 93       	push	r16
    3734:	1f 93       	push	r17
    3736:	cf 93       	push	r28
    3738:	df 93       	push	r29
    373a:	cd b7       	in	r28, 0x3d	; 61
    373c:	de b7       	in	r29, 0x3e	; 62
    373e:	27 97       	sbiw	r28, 0x07	; 7
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	f8 94       	cli
    3744:	de bf       	out	0x3e, r29	; 62
    3746:	0f be       	out	0x3f, r0	; 63
    3748:	cd bf       	out	0x3d, r28	; 61
    374a:	e0 91 e4 06 	lds	r30, 0x06E4	; 0x8006e4 <xTimerQueue>
    374e:	f0 91 e5 06 	lds	r31, 0x06E5	; 0x8006e5 <xTimerQueue+0x1>
    3752:	30 97       	sbiw	r30, 0x00	; 0
    3754:	81 f1       	breq	.+96     	; 0x37b6 <xTimerGenericCommand+0x94>
    3756:	69 83       	std	Y+1, r22	; 0x01
    3758:	2a 83       	std	Y+2, r18	; 0x02
    375a:	3b 83       	std	Y+3, r19	; 0x03
    375c:	4c 83       	std	Y+4, r20	; 0x04
    375e:	5d 83       	std	Y+5, r21	; 0x05
    3760:	9f 83       	std	Y+7, r25	; 0x07
    3762:	8e 83       	std	Y+6, r24	; 0x06
    3764:	66 30       	cpi	r22, 0x06	; 6
    3766:	f4 f4       	brge	.+60     	; 0x37a4 <xTimerGenericCommand+0x82>
    3768:	f9 dd       	rcall	.-1038   	; 0x335c <xTaskGetSchedulerState>
    376a:	82 30       	cpi	r24, 0x02	; 2
    376c:	69 f4       	brne	.+26     	; 0x3788 <xTimerGenericCommand+0x66>
    376e:	00 e0       	ldi	r16, 0x00	; 0
    3770:	a7 01       	movw	r20, r14
    3772:	96 01       	movw	r18, r12
    3774:	be 01       	movw	r22, r28
    3776:	6f 5f       	subi	r22, 0xFF	; 255
    3778:	7f 4f       	sbci	r23, 0xFF	; 255
    377a:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <xTimerQueue>
    377e:	90 91 e5 06 	lds	r25, 0x06E5	; 0x8006e5 <xTimerQueue+0x1>
    3782:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    3786:	18 c0       	rjmp	.+48     	; 0x37b8 <xTimerGenericCommand+0x96>
    3788:	00 e0       	ldi	r16, 0x00	; 0
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	a9 01       	movw	r20, r18
    3790:	be 01       	movw	r22, r28
    3792:	6f 5f       	subi	r22, 0xFF	; 255
    3794:	7f 4f       	sbci	r23, 0xFF	; 255
    3796:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <xTimerQueue>
    379a:	90 91 e5 06 	lds	r25, 0x06E5	; 0x8006e5 <xTimerQueue+0x1>
    379e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    37a2:	0a c0       	rjmp	.+20     	; 0x37b8 <xTimerGenericCommand+0x96>
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	a8 01       	movw	r20, r16
    37a8:	be 01       	movw	r22, r28
    37aa:	6f 5f       	subi	r22, 0xFF	; 255
    37ac:	7f 4f       	sbci	r23, 0xFF	; 255
    37ae:	cf 01       	movw	r24, r30
    37b0:	0e 94 90 0a 	call	0x1520	; 0x1520 <xQueueGenericSendFromISR>
    37b4:	01 c0       	rjmp	.+2      	; 0x37b8 <xTimerGenericCommand+0x96>
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	27 96       	adiw	r28, 0x07	; 7
    37ba:	0f b6       	in	r0, 0x3f	; 63
    37bc:	f8 94       	cli
    37be:	de bf       	out	0x3e, r29	; 62
    37c0:	0f be       	out	0x3f, r0	; 63
    37c2:	cd bf       	out	0x3d, r28	; 61
    37c4:	df 91       	pop	r29
    37c6:	cf 91       	pop	r28
    37c8:	1f 91       	pop	r17
    37ca:	0f 91       	pop	r16
    37cc:	ff 90       	pop	r15
    37ce:	ef 90       	pop	r14
    37d0:	df 90       	pop	r13
    37d2:	cf 90       	pop	r12
    37d4:	bf 90       	pop	r11
    37d6:	af 90       	pop	r10
    37d8:	9f 90       	pop	r9
    37da:	8f 90       	pop	r8
    37dc:	08 95       	ret

000037de <prvSampleTimeNow>:
    37de:	2f 92       	push	r2
    37e0:	3f 92       	push	r3
    37e2:	4f 92       	push	r4
    37e4:	5f 92       	push	r5
    37e6:	6f 92       	push	r6
    37e8:	7f 92       	push	r7
    37ea:	8f 92       	push	r8
    37ec:	9f 92       	push	r9
    37ee:	af 92       	push	r10
    37f0:	bf 92       	push	r11
    37f2:	cf 92       	push	r12
    37f4:	df 92       	push	r13
    37f6:	ef 92       	push	r14
    37f8:	ff 92       	push	r15
    37fa:	0f 93       	push	r16
    37fc:	1f 93       	push	r17
    37fe:	cf 93       	push	r28
    3800:	df 93       	push	r29
    3802:	1c 01       	movw	r2, r24
    3804:	8e da       	rcall	.-2788   	; 0x2d22 <xTaskGetTickCount>
    3806:	2b 01       	movw	r4, r22
    3808:	3c 01       	movw	r6, r24
    380a:	80 91 de 06 	lds	r24, 0x06DE	; 0x8006de <xLastTime.2378>
    380e:	90 91 df 06 	lds	r25, 0x06DF	; 0x8006df <xLastTime.2378+0x1>
    3812:	a0 91 e0 06 	lds	r26, 0x06E0	; 0x8006e0 <xLastTime.2378+0x2>
    3816:	b0 91 e1 06 	lds	r27, 0x06E1	; 0x8006e1 <xLastTime.2378+0x3>
    381a:	48 16       	cp	r4, r24
    381c:	59 06       	cpc	r5, r25
    381e:	6a 06       	cpc	r6, r26
    3820:	7b 06       	cpc	r7, r27
    3822:	08 f0       	brcs	.+2      	; 0x3826 <prvSampleTimeNow+0x48>
    3824:	53 c0       	rjmp	.+166    	; 0x38cc <prvSampleTimeNow+0xee>
    3826:	3b c0       	rjmp	.+118    	; 0x389e <prvSampleTimeNow+0xc0>
    3828:	07 80       	ldd	r0, Z+7	; 0x07
    382a:	f0 85       	ldd	r31, Z+8	; 0x08
    382c:	e0 2d       	mov	r30, r0
    382e:	80 80       	ld	r8, Z
    3830:	91 80       	ldd	r9, Z+1	; 0x01
    3832:	a2 80       	ldd	r10, Z+2	; 0x02
    3834:	b3 80       	ldd	r11, Z+3	; 0x03
    3836:	c0 85       	ldd	r28, Z+8	; 0x08
    3838:	d1 85       	ldd	r29, Z+9	; 0x09
    383a:	8e 01       	movw	r16, r28
    383c:	0e 5f       	subi	r16, 0xFE	; 254
    383e:	1f 4f       	sbci	r17, 0xFF	; 255
    3840:	c8 01       	movw	r24, r16
    3842:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3846:	ed 89       	ldd	r30, Y+21	; 0x15
    3848:	fe 89       	ldd	r31, Y+22	; 0x16
    384a:	ce 01       	movw	r24, r28
    384c:	19 95       	eicall
    384e:	8a 89       	ldd	r24, Y+18	; 0x12
    3850:	81 30       	cpi	r24, 0x01	; 1
    3852:	29 f5       	brne	.+74     	; 0x389e <prvSampleTimeNow+0xc0>
    3854:	8e 85       	ldd	r24, Y+14	; 0x0e
    3856:	9f 85       	ldd	r25, Y+15	; 0x0f
    3858:	a8 89       	ldd	r26, Y+16	; 0x10
    385a:	b9 89       	ldd	r27, Y+17	; 0x11
    385c:	88 0d       	add	r24, r8
    385e:	99 1d       	adc	r25, r9
    3860:	aa 1d       	adc	r26, r10
    3862:	bb 1d       	adc	r27, r11
    3864:	88 16       	cp	r8, r24
    3866:	99 06       	cpc	r9, r25
    3868:	aa 06       	cpc	r10, r26
    386a:	bb 06       	cpc	r11, r27
    386c:	70 f4       	brcc	.+28     	; 0x388a <prvSampleTimeNow+0xac>
    386e:	8a 83       	std	Y+2, r24	; 0x02
    3870:	9b 83       	std	Y+3, r25	; 0x03
    3872:	ac 83       	std	Y+4, r26	; 0x04
    3874:	bd 83       	std	Y+5, r27	; 0x05
    3876:	db 87       	std	Y+11, r29	; 0x0b
    3878:	ca 87       	std	Y+10, r28	; 0x0a
    387a:	b8 01       	movw	r22, r16
    387c:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <pxCurrentTimerList>
    3880:	90 91 e9 06 	lds	r25, 0x06E9	; 0x8006e9 <pxCurrentTimerList+0x1>
    3884:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    3888:	0a c0       	rjmp	.+20     	; 0x389e <prvSampleTimeNow+0xc0>
    388a:	c1 2c       	mov	r12, r1
    388c:	d1 2c       	mov	r13, r1
    388e:	76 01       	movw	r14, r12
    3890:	00 e0       	ldi	r16, 0x00	; 0
    3892:	10 e0       	ldi	r17, 0x00	; 0
    3894:	a5 01       	movw	r20, r10
    3896:	94 01       	movw	r18, r8
    3898:	60 e0       	ldi	r22, 0x00	; 0
    389a:	ce 01       	movw	r24, r28
    389c:	42 df       	rcall	.-380    	; 0x3722 <xTimerGenericCommand>
    389e:	e0 91 e8 06 	lds	r30, 0x06E8	; 0x8006e8 <pxCurrentTimerList>
    38a2:	f0 91 e9 06 	lds	r31, 0x06E9	; 0x8006e9 <pxCurrentTimerList+0x1>
    38a6:	80 81       	ld	r24, Z
    38a8:	81 11       	cpse	r24, r1
    38aa:	be cf       	rjmp	.-132    	; 0x3828 <prvSampleTimeNow+0x4a>
    38ac:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <pxOverflowTimerList>
    38b0:	90 91 e7 06 	lds	r25, 0x06E7	; 0x8006e7 <pxOverflowTimerList+0x1>
    38b4:	90 93 e9 06 	sts	0x06E9, r25	; 0x8006e9 <pxCurrentTimerList+0x1>
    38b8:	80 93 e8 06 	sts	0x06E8, r24	; 0x8006e8 <pxCurrentTimerList>
    38bc:	f0 93 e7 06 	sts	0x06E7, r31	; 0x8006e7 <pxOverflowTimerList+0x1>
    38c0:	e0 93 e6 06 	sts	0x06E6, r30	; 0x8006e6 <pxOverflowTimerList>
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	f1 01       	movw	r30, r2
    38c8:	80 83       	st	Z, r24
    38ca:	02 c0       	rjmp	.+4      	; 0x38d0 <prvSampleTimeNow+0xf2>
    38cc:	f1 01       	movw	r30, r2
    38ce:	10 82       	st	Z, r1
    38d0:	40 92 de 06 	sts	0x06DE, r4	; 0x8006de <xLastTime.2378>
    38d4:	50 92 df 06 	sts	0x06DF, r5	; 0x8006df <xLastTime.2378+0x1>
    38d8:	60 92 e0 06 	sts	0x06E0, r6	; 0x8006e0 <xLastTime.2378+0x2>
    38dc:	70 92 e1 06 	sts	0x06E1, r7	; 0x8006e1 <xLastTime.2378+0x3>
    38e0:	c3 01       	movw	r24, r6
    38e2:	b2 01       	movw	r22, r4
    38e4:	df 91       	pop	r29
    38e6:	cf 91       	pop	r28
    38e8:	1f 91       	pop	r17
    38ea:	0f 91       	pop	r16
    38ec:	ff 90       	pop	r15
    38ee:	ef 90       	pop	r14
    38f0:	df 90       	pop	r13
    38f2:	cf 90       	pop	r12
    38f4:	bf 90       	pop	r11
    38f6:	af 90       	pop	r10
    38f8:	9f 90       	pop	r9
    38fa:	8f 90       	pop	r8
    38fc:	7f 90       	pop	r7
    38fe:	6f 90       	pop	r6
    3900:	5f 90       	pop	r5
    3902:	4f 90       	pop	r4
    3904:	3f 90       	pop	r3
    3906:	2f 90       	pop	r2
    3908:	08 95       	ret

0000390a <prvTimerTask>:
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
    3912:	60 97       	sbiw	r28, 0x10	; 16
    3914:	0f b6       	in	r0, 0x3f	; 63
    3916:	f8 94       	cli
    3918:	de bf       	out	0x3e, r29	; 62
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	cd bf       	out	0x3d, r28	; 61
    391e:	ce 01       	movw	r24, r28
    3920:	01 96       	adiw	r24, 0x01	; 1
    3922:	9a 87       	std	Y+10, r25	; 0x0a
    3924:	89 87       	std	Y+9, r24	; 0x09
    3926:	81 2c       	mov	r8, r1
    3928:	91 2c       	mov	r9, r1
    392a:	a1 2c       	mov	r10, r1
    392c:	b1 2c       	mov	r11, r1
    392e:	69 84       	ldd	r6, Y+9	; 0x09
    3930:	7a 84       	ldd	r7, Y+10	; 0x0a
    3932:	e0 91 e8 06 	lds	r30, 0x06E8	; 0x8006e8 <pxCurrentTimerList>
    3936:	f0 91 e9 06 	lds	r31, 0x06E9	; 0x8006e9 <pxCurrentTimerList+0x1>
    393a:	80 81       	ld	r24, Z
    393c:	88 23       	and	r24, r24
    393e:	09 f4       	brne	.+2      	; 0x3942 <prvTimerTask+0x38>
    3940:	f2 c0       	rjmp	.+484    	; 0x3b26 <prvTimerTask+0x21c>
    3942:	07 80       	ldd	r0, Z+7	; 0x07
    3944:	f0 85       	ldd	r31, Z+8	; 0x08
    3946:	e0 2d       	mov	r30, r0
    3948:	20 80       	ld	r2, Z
    394a:	31 80       	ldd	r3, Z+1	; 0x01
    394c:	42 80       	ldd	r4, Z+2	; 0x02
    394e:	53 80       	ldd	r5, Z+3	; 0x03
    3950:	e2 d9       	rcall	.-3132   	; 0x2d16 <vTaskSuspendAll>
    3952:	ce 01       	movw	r24, r28
    3954:	01 96       	adiw	r24, 0x01	; 1
    3956:	43 df       	rcall	.-378    	; 0x37de <prvSampleTimeNow>
    3958:	6b 87       	std	Y+11, r22	; 0x0b
    395a:	7c 87       	std	Y+12, r23	; 0x0c
    395c:	8d 87       	std	Y+13, r24	; 0x0d
    395e:	9e 87       	std	Y+14, r25	; 0x0e
    3960:	89 81       	ldd	r24, Y+1	; 0x01
    3962:	81 11       	cpse	r24, r1
    3964:	5d c0       	rjmp	.+186    	; 0x3a20 <prvTimerTask+0x116>
    3966:	8b 85       	ldd	r24, Y+11	; 0x0b
    3968:	9c 85       	ldd	r25, Y+12	; 0x0c
    396a:	ad 85       	ldd	r26, Y+13	; 0x0d
    396c:	be 85       	ldd	r27, Y+14	; 0x0e
    396e:	82 15       	cp	r24, r2
    3970:	93 05       	cpc	r25, r3
    3972:	a4 05       	cpc	r26, r4
    3974:	b5 05       	cpc	r27, r5
    3976:	08 f4       	brcc	.+2      	; 0x397a <prvTimerTask+0x70>
    3978:	3c c0       	rjmp	.+120    	; 0x39f2 <prvTimerTask+0xe8>
    397a:	b6 da       	rcall	.-2708   	; 0x2ee8 <xTaskResumeAll>
    397c:	e0 91 e8 06 	lds	r30, 0x06E8	; 0x8006e8 <pxCurrentTimerList>
    3980:	f0 91 e9 06 	lds	r31, 0x06E9	; 0x8006e9 <pxCurrentTimerList+0x1>
    3984:	07 80       	ldd	r0, Z+7	; 0x07
    3986:	f0 85       	ldd	r31, Z+8	; 0x08
    3988:	e0 2d       	mov	r30, r0
    398a:	a0 85       	ldd	r26, Z+8	; 0x08
    398c:	b1 85       	ldd	r27, Z+9	; 0x09
    398e:	b8 8b       	std	Y+16, r27	; 0x10
    3990:	af 87       	std	Y+15, r26	; 0x0f
    3992:	cd 01       	movw	r24, r26
    3994:	02 96       	adiw	r24, 0x02	; 2
    3996:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    399a:	ef 85       	ldd	r30, Y+15	; 0x0f
    399c:	f8 89       	ldd	r31, Y+16	; 0x10
    399e:	82 89       	ldd	r24, Z+18	; 0x12
    39a0:	81 30       	cpi	r24, 0x01	; 1
    39a2:	f1 f4       	brne	.+60     	; 0x39e0 <prvTimerTask+0xd6>
    39a4:	46 85       	ldd	r20, Z+14	; 0x0e
    39a6:	57 85       	ldd	r21, Z+15	; 0x0f
    39a8:	60 89       	ldd	r22, Z+16	; 0x10
    39aa:	71 89       	ldd	r23, Z+17	; 0x11
    39ac:	42 0d       	add	r20, r2
    39ae:	53 1d       	adc	r21, r3
    39b0:	64 1d       	adc	r22, r4
    39b2:	75 1d       	adc	r23, r5
    39b4:	72 01       	movw	r14, r4
    39b6:	61 01       	movw	r12, r2
    39b8:	0b 85       	ldd	r16, Y+11	; 0x0b
    39ba:	1c 85       	ldd	r17, Y+12	; 0x0c
    39bc:	2d 85       	ldd	r18, Y+13	; 0x0d
    39be:	3e 85       	ldd	r19, Y+14	; 0x0e
    39c0:	cf 01       	movw	r24, r30
    39c2:	e6 dd       	rcall	.-1076   	; 0x3590 <prvInsertTimerInActiveList>
    39c4:	88 23       	and	r24, r24
    39c6:	61 f0       	breq	.+24     	; 0x39e0 <prvTimerTask+0xd6>
    39c8:	c8 2c       	mov	r12, r8
    39ca:	d9 2c       	mov	r13, r9
    39cc:	ea 2c       	mov	r14, r10
    39ce:	fb 2c       	mov	r15, r11
    39d0:	00 e0       	ldi	r16, 0x00	; 0
    39d2:	10 e0       	ldi	r17, 0x00	; 0
    39d4:	a2 01       	movw	r20, r4
    39d6:	91 01       	movw	r18, r2
    39d8:	60 e0       	ldi	r22, 0x00	; 0
    39da:	8f 85       	ldd	r24, Y+15	; 0x0f
    39dc:	98 89       	ldd	r25, Y+16	; 0x10
    39de:	a1 de       	rcall	.-702    	; 0x3722 <xTimerGenericCommand>
    39e0:	af 85       	ldd	r26, Y+15	; 0x0f
    39e2:	b8 89       	ldd	r27, Y+16	; 0x10
    39e4:	55 96       	adiw	r26, 0x15	; 21
    39e6:	ed 91       	ld	r30, X+
    39e8:	fc 91       	ld	r31, X
    39ea:	56 97       	sbiw	r26, 0x16	; 22
    39ec:	cd 01       	movw	r24, r26
    39ee:	19 95       	eicall
    39f0:	8b c0       	rjmp	.+278    	; 0x3b08 <prvTimerTask+0x1fe>
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	b2 01       	movw	r22, r4
    39f6:	a1 01       	movw	r20, r2
    39f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    39fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    39fc:	ad 85       	ldd	r26, Y+13	; 0x0d
    39fe:	be 85       	ldd	r27, Y+14	; 0x0e
    3a00:	48 1b       	sub	r20, r24
    3a02:	59 0b       	sbc	r21, r25
    3a04:	6a 0b       	sbc	r22, r26
    3a06:	7b 0b       	sbc	r23, r27
    3a08:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <xTimerQueue>
    3a0c:	90 91 e5 06 	lds	r25, 0x06E5	; 0x8006e5 <xTimerQueue+0x1>
    3a10:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <vQueueWaitForMessageRestricted>
    3a14:	69 da       	rcall	.-2862   	; 0x2ee8 <xTaskResumeAll>
    3a16:	81 11       	cpse	r24, r1
    3a18:	77 c0       	rjmp	.+238    	; 0x3b08 <prvTimerTask+0x1fe>
    3a1a:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3a1e:	74 c0       	rjmp	.+232    	; 0x3b08 <prvTimerTask+0x1fe>
    3a20:	63 da       	rcall	.-2874   	; 0x2ee8 <xTaskResumeAll>
    3a22:	72 c0       	rjmp	.+228    	; 0x3b08 <prvTimerTask+0x1fe>
    3a24:	89 81       	ldd	r24, Y+1	; 0x01
    3a26:	88 23       	and	r24, r24
    3a28:	0c f4       	brge	.+2      	; 0x3a2c <prvTimerTask+0x122>
    3a2a:	6e c0       	rjmp	.+220    	; 0x3b08 <prvTimerTask+0x1fe>
    3a2c:	4e 80       	ldd	r4, Y+6	; 0x06
    3a2e:	5f 80       	ldd	r5, Y+7	; 0x07
    3a30:	d2 01       	movw	r26, r4
    3a32:	1c 96       	adiw	r26, 0x0c	; 12
    3a34:	8d 91       	ld	r24, X+
    3a36:	9c 91       	ld	r25, X
    3a38:	1d 97       	sbiw	r26, 0x0d	; 13
    3a3a:	89 2b       	or	r24, r25
    3a3c:	21 f0       	breq	.+8      	; 0x3a46 <prvTimerTask+0x13c>
    3a3e:	c2 01       	movw	r24, r4
    3a40:	02 96       	adiw	r24, 0x02	; 2
    3a42:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3a46:	ce 01       	movw	r24, r28
    3a48:	08 96       	adiw	r24, 0x08	; 8
    3a4a:	c9 de       	rcall	.-622    	; 0x37de <prvSampleTimeNow>
    3a4c:	8b 01       	movw	r16, r22
    3a4e:	9c 01       	movw	r18, r24
    3a50:	89 81       	ldd	r24, Y+1	; 0x01
    3a52:	08 2e       	mov	r0, r24
    3a54:	00 0c       	add	r0, r0
    3a56:	99 0b       	sbc	r25, r25
    3a58:	aa 0b       	sbc	r26, r26
    3a5a:	bb 0b       	sbc	r27, r27
    3a5c:	8a 30       	cpi	r24, 0x0A	; 10
    3a5e:	91 05       	cpc	r25, r1
    3a60:	08 f0       	brcs	.+2      	; 0x3a64 <prvTimerTask+0x15a>
    3a62:	52 c0       	rjmp	.+164    	; 0x3b08 <prvTimerTask+0x1fe>
    3a64:	fc 01       	movw	r30, r24
    3a66:	88 27       	eor	r24, r24
    3a68:	ee 56       	subi	r30, 0x6E	; 110
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a6e:	0c 94 b6 59 	jmp	0xb36c	; 0xb36c <__tablejump2__>
    3a72:	ca 80       	ldd	r12, Y+2	; 0x02
    3a74:	db 80       	ldd	r13, Y+3	; 0x03
    3a76:	ec 80       	ldd	r14, Y+4	; 0x04
    3a78:	fd 80       	ldd	r15, Y+5	; 0x05
    3a7a:	f2 01       	movw	r30, r4
    3a7c:	46 85       	ldd	r20, Z+14	; 0x0e
    3a7e:	57 85       	ldd	r21, Z+15	; 0x0f
    3a80:	60 89       	ldd	r22, Z+16	; 0x10
    3a82:	71 89       	ldd	r23, Z+17	; 0x11
    3a84:	4c 0d       	add	r20, r12
    3a86:	5d 1d       	adc	r21, r13
    3a88:	6e 1d       	adc	r22, r14
    3a8a:	7f 1d       	adc	r23, r15
    3a8c:	c2 01       	movw	r24, r4
    3a8e:	80 dd       	rcall	.-1280   	; 0x3590 <prvInsertTimerInActiveList>
    3a90:	88 23       	and	r24, r24
    3a92:	d1 f1       	breq	.+116    	; 0x3b08 <prvTimerTask+0x1fe>
    3a94:	d2 01       	movw	r26, r4
    3a96:	55 96       	adiw	r26, 0x15	; 21
    3a98:	ed 91       	ld	r30, X+
    3a9a:	fc 91       	ld	r31, X
    3a9c:	56 97       	sbiw	r26, 0x16	; 22
    3a9e:	c2 01       	movw	r24, r4
    3aa0:	19 95       	eicall
    3aa2:	f2 01       	movw	r30, r4
    3aa4:	82 89       	ldd	r24, Z+18	; 0x12
    3aa6:	81 30       	cpi	r24, 0x01	; 1
    3aa8:	79 f5       	brne	.+94     	; 0x3b08 <prvTimerTask+0x1fe>
    3aaa:	4a 81       	ldd	r20, Y+2	; 0x02
    3aac:	5b 81       	ldd	r21, Y+3	; 0x03
    3aae:	6c 81       	ldd	r22, Y+4	; 0x04
    3ab0:	7d 81       	ldd	r23, Y+5	; 0x05
    3ab2:	86 85       	ldd	r24, Z+14	; 0x0e
    3ab4:	97 85       	ldd	r25, Z+15	; 0x0f
    3ab6:	a0 89       	ldd	r26, Z+16	; 0x10
    3ab8:	b1 89       	ldd	r27, Z+17	; 0x11
    3aba:	9a 01       	movw	r18, r20
    3abc:	ab 01       	movw	r20, r22
    3abe:	28 0f       	add	r18, r24
    3ac0:	39 1f       	adc	r19, r25
    3ac2:	4a 1f       	adc	r20, r26
    3ac4:	5b 1f       	adc	r21, r27
    3ac6:	c8 2c       	mov	r12, r8
    3ac8:	d9 2c       	mov	r13, r9
    3aca:	ea 2c       	mov	r14, r10
    3acc:	fb 2c       	mov	r15, r11
    3ace:	00 e0       	ldi	r16, 0x00	; 0
    3ad0:	10 e0       	ldi	r17, 0x00	; 0
    3ad2:	60 e0       	ldi	r22, 0x00	; 0
    3ad4:	c2 01       	movw	r24, r4
    3ad6:	25 de       	rcall	.-950    	; 0x3722 <xTimerGenericCommand>
    3ad8:	17 c0       	rjmp	.+46     	; 0x3b08 <prvTimerTask+0x1fe>
    3ada:	4a 81       	ldd	r20, Y+2	; 0x02
    3adc:	5b 81       	ldd	r21, Y+3	; 0x03
    3ade:	6c 81       	ldd	r22, Y+4	; 0x04
    3ae0:	7d 81       	ldd	r23, Y+5	; 0x05
    3ae2:	d2 01       	movw	r26, r4
    3ae4:	1e 96       	adiw	r26, 0x0e	; 14
    3ae6:	4d 93       	st	X+, r20
    3ae8:	5d 93       	st	X+, r21
    3aea:	6d 93       	st	X+, r22
    3aec:	7c 93       	st	X, r23
    3aee:	51 97       	sbiw	r26, 0x11	; 17
    3af0:	40 0f       	add	r20, r16
    3af2:	51 1f       	adc	r21, r17
    3af4:	62 1f       	adc	r22, r18
    3af6:	73 1f       	adc	r23, r19
    3af8:	68 01       	movw	r12, r16
    3afa:	79 01       	movw	r14, r18
    3afc:	c2 01       	movw	r24, r4
    3afe:	48 dd       	rcall	.-1392   	; 0x3590 <prvInsertTimerInActiveList>
    3b00:	03 c0       	rjmp	.+6      	; 0x3b08 <prvTimerTask+0x1fe>
    3b02:	c2 01       	movw	r24, r4
    3b04:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vPortFree>
    3b08:	28 2d       	mov	r18, r8
    3b0a:	39 2d       	mov	r19, r9
    3b0c:	4a 2d       	mov	r20, r10
    3b0e:	5b 2d       	mov	r21, r11
    3b10:	66 2d       	mov	r22, r6
    3b12:	77 2d       	mov	r23, r7
    3b14:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <xTimerQueue>
    3b18:	90 91 e5 06 	lds	r25, 0x06E5	; 0x8006e5 <xTimerQueue+0x1>
    3b1c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <xQueueReceive>
    3b20:	81 11       	cpse	r24, r1
    3b22:	80 cf       	rjmp	.-256    	; 0x3a24 <prvTimerTask+0x11a>
    3b24:	06 cf       	rjmp	.-500    	; 0x3932 <prvTimerTask+0x28>
    3b26:	f7 d8       	rcall	.-3602   	; 0x2d16 <vTaskSuspendAll>
    3b28:	ce 01       	movw	r24, r28
    3b2a:	01 96       	adiw	r24, 0x01	; 1
    3b2c:	58 de       	rcall	.-848    	; 0x37de <prvSampleTimeNow>
    3b2e:	6b 87       	std	Y+11, r22	; 0x0b
    3b30:	7c 87       	std	Y+12, r23	; 0x0c
    3b32:	8d 87       	std	Y+13, r24	; 0x0d
    3b34:	9e 87       	std	Y+14, r25	; 0x0e
    3b36:	89 81       	ldd	r24, Y+1	; 0x01
    3b38:	81 11       	cpse	r24, r1
    3b3a:	72 cf       	rjmp	.-284    	; 0x3a20 <prvTimerTask+0x116>
    3b3c:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <pxOverflowTimerList>
    3b40:	f0 91 e7 06 	lds	r31, 0x06E7	; 0x8006e7 <pxOverflowTimerList+0x1>
    3b44:	80 81       	ld	r24, Z
    3b46:	21 e0       	ldi	r18, 0x01	; 1
    3b48:	81 11       	cpse	r24, r1
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	28 2c       	mov	r2, r8
    3b4e:	39 2c       	mov	r3, r9
    3b50:	4a 2c       	mov	r4, r10
    3b52:	5b 2c       	mov	r5, r11
    3b54:	4f cf       	rjmp	.-354    	; 0x39f4 <prvTimerTask+0xea>

00003b56 <xTimerIsTimerActive>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
    3b56:	fc 01       	movw	r30, r24
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
    3b58:	0f b6       	in	r0, 0x3f	; 63
    3b5a:	f8 94       	cli
    3b5c:	0f 92       	push	r0
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	24 85       	ldd	r18, Z+12	; 0x0c
    3b62:	35 85       	ldd	r19, Z+13	; 0x0d
    3b64:	23 2b       	or	r18, r19
    3b66:	09 f4       	brne	.+2      	; 0x3b6a <xTimerIsTimerActive+0x14>
    3b68:	80 e0       	ldi	r24, 0x00	; 0
	}
	taskEXIT_CRITICAL();
    3b6a:	0f 90       	pop	r0
    3b6c:	0f be       	out	0x3f, r0	; 63

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
    3b6e:	08 95       	ret

00003b70 <pvTimerGetTimerID>:
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
    3b70:	0f b6       	in	r0, 0x3f	; 63
    3b72:	f8 94       	cli
    3b74:	0f 92       	push	r0
	{
		pvReturn = pxTimer->pvTimerID;
    3b76:	fc 01       	movw	r30, r24
    3b78:	83 89       	ldd	r24, Z+19	; 0x13
    3b7a:	94 89       	ldd	r25, Z+20	; 0x14
	}
	taskEXIT_CRITICAL();
    3b7c:	0f 90       	pop	r0
    3b7e:	0f be       	out	0x3f, r0	; 63

	return pvReturn;
}
    3b80:	08 95       	ret

00003b82 <Defrost>:
{
	
while(1){
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
    3b82:	c8 ef       	ldi	r28, 0xF8	; 248
    3b84:	d8 e0       	ldi	r29, 0x08	; 8
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Src_In<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3b86:	08 e5       	ldi	r16, 0x58	; 88
    3b88:	19 e0       	ldi	r17, 0x09	; 9
				if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
				else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3b8a:	0f 2e       	mov	r0, r31
    3b8c:	fe e3       	ldi	r31, 0x3E	; 62
    3b8e:	cf 2e       	mov	r12, r31
    3b90:	f2 e0       	ldi	r31, 0x02	; 2
    3b92:	df 2e       	mov	r13, r31
    3b94:	f0 2d       	mov	r31, r0
    3b96:	0f 2e       	mov	r0, r31
    3b98:	f6 e9       	ldi	r31, 0x96	; 150
    3b9a:	ef 2e       	mov	r14, r31
    3b9c:	f7 e0       	ldi	r31, 0x07	; 7
    3b9e:	ff 2e       	mov	r15, r31
    3ba0:	f0 2d       	mov	r31, r0
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Src_In<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3ba2:	33 24       	eor	r3, r3
    3ba4:	33 94       	inc	r3
    3ba6:	0f 2e       	mov	r0, r31
    3ba8:	f3 e3       	ldi	r31, 0x33	; 51
    3baa:	8f 2e       	mov	r8, r31
    3bac:	f2 e0       	ldi	r31, 0x02	; 2
    3bae:	9f 2e       	mov	r9, r31
    3bb0:	f0 2d       	mov	r31, r0
while(1){
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
    3bb2:	0f 2e       	mov	r0, r31
    3bb4:	f3 e2       	ldi	r31, 0x23	; 35
    3bb6:	af 2e       	mov	r10, r31
    3bb8:	f2 e0       	ldi	r31, 0x02	; 2
    3bba:	bf 2e       	mov	r11, r31
    3bbc:	f0 2d       	mov	r31, r0
//////////////////////////////////////////////////
static void Defrost(void *pvParameters)
{
	
while(1){
			wdt_reset();
    3bbe:	a8 95       	wdr
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
    3bc0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bc2:	81 30       	cpi	r24, 0x01	; 1
    3bc4:	09 f0       	breq	.+2      	; 0x3bc8 <Defrost+0x46>
    3bc6:	cf c0       	rjmp	.+414    	; 0x3d66 <Defrost+0x1e4>
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
    3bc8:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <forsDefrost>
    3bcc:	81 30       	cpi	r24, 0x01	; 1
    3bce:	91 f4       	brne	.+36     	; 0x3bf4 <Defrost+0x72>
    3bd0:	be 01       	movw	r22, r28
    3bd2:	c8 01       	movw	r24, r16
    3bd4:	0e 94 56 35 	call	0x6aac	; 0x6aac <startDefrost>
    3bd8:	f8 01       	movw	r30, r16
    3bda:	31 86       	std	Z+9, r3	; 0x09
    3bdc:	10 92 01 07 	sts	0x0701, r1	; 0x800701 <forsDefrost>
    3be0:	bf 92       	push	r11
    3be2:	af 92       	push	r10
    3be4:	ff 92       	push	r15
    3be6:	ef 92       	push	r14
    3be8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3bec:	0f 90       	pop	r0
    3bee:	0f 90       	pop	r0
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Src_In<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3bf4:	f8 01       	movw	r30, r16
    3bf6:	81 85       	ldd	r24, Z+9	; 0x09
    3bf8:	81 11       	cpse	r24, r1
    3bfa:	48 c0       	rjmp	.+144    	; 0x3c8c <Defrost+0x10a>
    3bfc:	92 d8       	rcall	.-3804   	; 0x2d22 <xTaskGetTickCount>
    3bfe:	40 90 d9 08 	lds	r4, 0x08D9	; 0x8008d9 <timeTillDef>
    3c02:	50 90 da 08 	lds	r5, 0x08DA	; 0x8008da <timeTillDef+0x1>
    3c06:	60 90 db 08 	lds	r6, 0x08DB	; 0x8008db <timeTillDef+0x2>
    3c0a:	70 90 dc 08 	lds	r7, 0x08DC	; 0x8008dc <timeTillDef+0x3>
    3c0e:	9b 01       	movw	r18, r22
    3c10:	ac 01       	movw	r20, r24
    3c12:	24 19       	sub	r18, r4
    3c14:	35 09       	sbc	r19, r5
    3c16:	46 09       	sbc	r20, r6
    3c18:	57 09       	sbc	r21, r7
    3c1a:	29 01       	movw	r4, r18
    3c1c:	3a 01       	movw	r6, r20
    3c1e:	2a a1       	ldd	r18, Y+34	; 0x22
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	a0 e6       	ldi	r26, 0x60	; 96
    3c24:	ba ee       	ldi	r27, 0xEA	; 234
    3c26:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    3c2a:	64 15       	cp	r22, r4
    3c2c:	75 05       	cpc	r23, r5
    3c2e:	86 05       	cpc	r24, r6
    3c30:	97 05       	cpc	r25, r7
    3c32:	38 f5       	brcc	.+78     	; 0x3c82 <Defrost+0x100>
    3c34:	6a a5       	ldd	r22, Y+42	; 0x2a
    3c36:	7b a5       	ldd	r23, Y+43	; 0x2b
    3c38:	07 2e       	mov	r0, r23
    3c3a:	00 0c       	add	r0, r0
    3c3c:	88 0b       	sbc	r24, r24
    3c3e:	99 0b       	sbc	r25, r25
    3c40:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    3c44:	9b 01       	movw	r18, r22
    3c46:	ac 01       	movw	r20, r24
    3c48:	f8 01       	movw	r30, r16
    3c4a:	62 a9       	ldd	r22, Z+50	; 0x32
    3c4c:	73 a9       	ldd	r23, Z+51	; 0x33
    3c4e:	84 a9       	ldd	r24, Z+52	; 0x34
    3c50:	95 a9       	ldd	r25, Z+53	; 0x35
    3c52:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    3c56:	88 23       	and	r24, r24
    3c58:	a4 f4       	brge	.+40     	; 0x3c82 <Defrost+0x100>
    3c5a:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <forsDefrost>
    3c5e:	81 11       	cpse	r24, r1
    3c60:	10 c0       	rjmp	.+32     	; 0x3c82 <Defrost+0x100>
    3c62:	be 01       	movw	r22, r28
    3c64:	c8 01       	movw	r24, r16
    3c66:	0e 94 56 35 	call	0x6aac	; 0x6aac <startDefrost>
    3c6a:	f8 01       	movw	r30, r16
    3c6c:	31 86       	std	Z+9, r3	; 0x09
    3c6e:	9f 92       	push	r9
    3c70:	8f 92       	push	r8
    3c72:	ff 92       	push	r15
    3c74:	ef 92       	push	r14
    3c76:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3c7a:	0f 90       	pop	r0
    3c7c:	0f 90       	pop	r0
    3c7e:	0f 90       	pop	r0
    3c80:	0f 90       	pop	r0
				if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3c82:	f8 01       	movw	r30, r16
    3c84:	81 85       	ldd	r24, Z+9	; 0x09
    3c86:	88 23       	and	r24, r24
    3c88:	09 f4       	brne	.+2      	; 0x3c8c <Defrost+0x10a>
    3c8a:	6d c0       	rjmp	.+218    	; 0x3d66 <Defrost+0x1e4>
    3c8c:	4a d8       	rcall	.-3948   	; 0x2d22 <xTaskGetTickCount>
    3c8e:	40 90 d9 08 	lds	r4, 0x08D9	; 0x8008d9 <timeTillDef>
    3c92:	50 90 da 08 	lds	r5, 0x08DA	; 0x8008da <timeTillDef+0x1>
    3c96:	60 90 db 08 	lds	r6, 0x08DB	; 0x8008db <timeTillDef+0x2>
    3c9a:	70 90 dc 08 	lds	r7, 0x08DC	; 0x8008dc <timeTillDef+0x3>
    3c9e:	9b 01       	movw	r18, r22
    3ca0:	ac 01       	movw	r20, r24
    3ca2:	24 19       	sub	r18, r4
    3ca4:	35 09       	sbc	r19, r5
    3ca6:	46 09       	sbc	r20, r6
    3ca8:	57 09       	sbc	r21, r7
    3caa:	29 01       	movw	r4, r18
    3cac:	3a 01       	movw	r6, r20
    3cae:	29 a1       	ldd	r18, Y+33	; 0x21
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	a0 e6       	ldi	r26, 0x60	; 96
    3cb4:	ba ee       	ldi	r27, 0xEA	; 234
    3cb6:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    3cba:	64 15       	cp	r22, r4
    3cbc:	75 05       	cpc	r23, r5
    3cbe:	86 05       	cpc	r24, r6
    3cc0:	97 05       	cpc	r25, r7
    3cc2:	f8 f4       	brcc	.+62     	; 0x3d02 <Defrost+0x180>
    3cc4:	f8 01       	movw	r30, r16
    3cc6:	82 85       	ldd	r24, Z+10	; 0x0a
    3cc8:	88 23       	and	r24, r24
    3cca:	d9 f0       	breq	.+54     	; 0x3d02 <Defrost+0x180>
    3ccc:	be 01       	movw	r22, r28
    3cce:	c8 01       	movw	r24, r16
    3cd0:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <stopDefrost>
    3cd4:	f8 01       	movw	r30, r16
    3cd6:	11 86       	std	Z+9, r1	; 0x09
    3cd8:	12 86       	std	Z+10, r1	; 0x0a
    3cda:	23 d8       	rcall	.-4026   	; 0x2d22 <xTaskGetTickCount>
    3cdc:	60 93 d9 08 	sts	0x08D9, r22	; 0x8008d9 <timeTillDef>
    3ce0:	70 93 da 08 	sts	0x08DA, r23	; 0x8008da <timeTillDef+0x1>
    3ce4:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <timeTillDef+0x2>
    3ce8:	90 93 dc 08 	sts	0x08DC, r25	; 0x8008dc <timeTillDef+0x3>
    3cec:	df 92       	push	r13
    3cee:	cf 92       	push	r12
    3cf0:	ff 92       	push	r15
    3cf2:	ef 92       	push	r14
    3cf4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3cf8:	0f 90       	pop	r0
    3cfa:	0f 90       	pop	r0
    3cfc:	0f 90       	pop	r0
    3cfe:	0f 90       	pop	r0
    3d00:	32 c0       	rjmp	.+100    	; 0x3d66 <Defrost+0x1e4>
				else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3d02:	f8 01       	movw	r30, r16
    3d04:	81 85       	ldd	r24, Z+9	; 0x09
    3d06:	88 23       	and	r24, r24
    3d08:	71 f1       	breq	.+92     	; 0x3d66 <Defrost+0x1e4>
    3d0a:	6c a5       	ldd	r22, Y+44	; 0x2c
    3d0c:	7d a5       	ldd	r23, Y+45	; 0x2d
    3d0e:	07 2e       	mov	r0, r23
    3d10:	00 0c       	add	r0, r0
    3d12:	88 0b       	sbc	r24, r24
    3d14:	99 0b       	sbc	r25, r25
    3d16:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    3d1a:	9b 01       	movw	r18, r22
    3d1c:	ac 01       	movw	r20, r24
    3d1e:	f8 01       	movw	r30, r16
    3d20:	62 a9       	ldd	r22, Z+50	; 0x32
    3d22:	73 a9       	ldd	r23, Z+51	; 0x33
    3d24:	84 a9       	ldd	r24, Z+52	; 0x34
    3d26:	95 a9       	ldd	r25, Z+53	; 0x35
    3d28:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    3d2c:	18 16       	cp	r1, r24
    3d2e:	dc f4       	brge	.+54     	; 0x3d66 <Defrost+0x1e4>
    3d30:	be 01       	movw	r22, r28
    3d32:	c8 01       	movw	r24, r16
    3d34:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <stopDefrost>
    3d38:	f8 01       	movw	r30, r16
    3d3a:	11 86       	std	Z+9, r1	; 0x09
    3d3c:	12 86       	std	Z+10, r1	; 0x0a
    3d3e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3d42:	60 93 d9 08 	sts	0x08D9, r22	; 0x8008d9 <timeTillDef>
    3d46:	70 93 da 08 	sts	0x08DA, r23	; 0x8008da <timeTillDef+0x1>
    3d4a:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <timeTillDef+0x2>
    3d4e:	90 93 dc 08 	sts	0x08DC, r25	; 0x8008dc <timeTillDef+0x3>
    3d52:	df 92       	push	r13
    3d54:	cf 92       	push	r12
    3d56:	ff 92       	push	r15
    3d58:	ef 92       	push	r14
    3d5a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3d5e:	0f 90       	pop	r0
    3d60:	0f 90       	pop	r0
    3d62:	0f 90       	pop	r0
    3d64:	0f 90       	pop	r0
	
			}
			//xSerialxPrintf(&xSerial3Port,"defrost\r\n");
vTaskDelay(2000);
    3d66:	60 ed       	ldi	r22, 0xD0	; 208
    3d68:	77 e0       	ldi	r23, 0x07	; 7
    3d6a:	80 e0       	ldi	r24, 0x00	; 0
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	38 d9       	rcall	.-3472   	; 0x2fe0 <vTaskDelay>
//xSerialxPrintf(&xSerial3Port,"Stack_0 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
//portYIELD();			
}
    3d70:	26 cf       	rjmp	.-436    	; 0x3bbe <Defrost+0x3c>

00003d72 <System_2>:
		//xSerialxPrintf(&xSerial3Port,"System_2_task\r\n");
vTaskSuspend( xHandleFirst );				
portENTER_CRITICAL();
ReadSensors(&Comp_2);
portEXIT_CRITICAL();
xSerialxPrintf(&xSerial3Port,"task_2\r\n");
    3d72:	08 e4       	ldi	r16, 0x48	; 72
    3d74:	12 e0       	ldi	r17, 0x02	; 2
    3d76:	c6 e9       	ldi	r28, 0x96	; 150
    3d78:	d7 e0       	ldi	r29, 0x07	; 7
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3d7a:	0f 2e       	mov	r0, r31
    3d7c:	f8 ef       	ldi	r31, 0xF8	; 248
    3d7e:	ef 2e       	mov	r14, r31
    3d80:	f8 e0       	ldi	r31, 0x08	; 8
    3d82:	ff 2e       	mov	r15, r31
    3d84:	f0 2d       	mov	r31, r0
		else if(EEpromData.power==0 && Comp_2.suply){Comp_2.suply=false;Comp_2.error=0;_err2=0;Comp_2.countError=0; xSerialxPrintf(&xSerial3Port,"OFF_System_2\r\n");stopTrvTimer(&Comp_2);Comp_Stop(&Comp_2);}
    3d86:	0f 2e       	mov	r0, r31
    3d88:	fa e4       	ldi	r31, 0x4A	; 74
    3d8a:	af 2e       	mov	r10, r31
    3d8c:	fa e0       	ldi	r31, 0x0A	; 10
    3d8e:	bf 2e       	mov	r11, r31
    3d90:	f0 2d       	mov	r31, r0
    3d92:	0f 2e       	mov	r0, r31
    3d94:	ff e5       	ldi	r31, 0x5F	; 95
    3d96:	cf 2e       	mov	r12, r31
    3d98:	f2 e0       	ldi	r31, 0x02	; 2
    3d9a:	df 2e       	mov	r13, r31
    3d9c:	f0 2d       	mov	r31, r0
ReadSensors(&Comp_2);
portEXIT_CRITICAL();
xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3d9e:	33 24       	eor	r3, r3
    3da0:	33 94       	inc	r3
    3da2:	0f 2e       	mov	r0, r31
    3da4:	f1 e5       	ldi	r31, 0x51	; 81
    3da6:	8f 2e       	mov	r8, r31
    3da8:	f2 e0       	ldi	r31, 0x02	; 2
    3daa:	9f 2e       	mov	r9, r31
    3dac:	f0 2d       	mov	r31, r0
	(void) pvParameters;

	while (1)
	{
		
    	wdt_reset();
    3dae:	a8 95       	wdr
		//xSerialxPrintf(&xSerial3Port,"System_2_task\r\n");
vTaskSuspend( xHandleFirst );				
    3db0:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <xHandleFirst>
    3db4:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <xHandleFirst+0x1>
    3db8:	9e d9       	rcall	.-3268   	; 0x30f6 <vTaskSuspend>
portENTER_CRITICAL();
    3dba:	0f b6       	in	r0, 0x3f	; 63
    3dbc:	f8 94       	cli
    3dbe:	0f 92       	push	r0
ReadSensors(&Comp_2);
    3dc0:	8e ed       	ldi	r24, 0xDE	; 222
    3dc2:	99 e0       	ldi	r25, 0x09	; 9
    3dc4:	0e 94 7c 4d 	call	0x9af8	; 0x9af8 <ReadSensors>
portEXIT_CRITICAL();
    3dc8:	0f 90       	pop	r0
    3dca:	0f be       	out	0x3f, r0	; 63
xSerialxPrintf(&xSerial3Port,"task_2\r\n");
    3dcc:	1f 93       	push	r17
    3dce:	0f 93       	push	r16
    3dd0:	df 93       	push	r29
    3dd2:	cf 93       	push	r28
    3dd4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
    3dd8:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <xHandleFirst>
    3ddc:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <xHandleFirst+0x1>
    3de0:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <vTaskResume>
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3de4:	d7 01       	movw	r26, r14
    3de6:	94 96       	adiw	r26, 0x24	; 36
    3de8:	8c 91       	ld	r24, X
    3dea:	0f 90       	pop	r0
    3dec:	0f 90       	pop	r0
    3dee:	0f 90       	pop	r0
    3df0:	0f 90       	pop	r0
    3df2:	81 30       	cpi	r24, 0x01	; 1
    3df4:	a9 f4       	brne	.+42     	; 0x3e20 <System_2+0xae>
    3df6:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <Comp_2+0x6>
    3dfa:	81 11       	cpse	r24, r1
    3dfc:	3a c0       	rjmp	.+116    	; 0x3e72 <System_2+0x100>
    3dfe:	80 91 de 09 	lds	r24, 0x09DE	; 0x8009de <Comp_2>
    3e02:	81 11       	cpse	r24, r1
    3e04:	76 c0       	rjmp	.+236    	; 0x3ef2 <System_2+0x180>
    3e06:	30 92 e4 09 	sts	0x09E4, r3	; 0x8009e4 <Comp_2+0x6>
    3e0a:	9f 92       	push	r9
    3e0c:	8f 92       	push	r8
    3e0e:	df 93       	push	r29
    3e10:	cf 93       	push	r28
    3e12:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3e16:	0f 90       	pop	r0
    3e18:	0f 90       	pop	r0
    3e1a:	0f 90       	pop	r0
    3e1c:	0f 90       	pop	r0
    3e1e:	24 c0       	rjmp	.+72     	; 0x3e68 <System_2+0xf6>
		else if(EEpromData.power==0 && Comp_2.suply){Comp_2.suply=false;Comp_2.error=0;_err2=0;Comp_2.countError=0; xSerialxPrintf(&xSerial3Port,"OFF_System_2\r\n");stopTrvTimer(&Comp_2);Comp_Stop(&Comp_2);}
    3e20:	81 11       	cpse	r24, r1
    3e22:	22 c0       	rjmp	.+68     	; 0x3e68 <System_2+0xf6>
    3e24:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <Comp_2+0x6>
    3e28:	88 23       	and	r24, r24
    3e2a:	09 f4       	brne	.+2      	; 0x3e2e <System_2+0xbc>
    3e2c:	62 c0       	rjmp	.+196    	; 0x3ef2 <System_2+0x180>
    3e2e:	ee ed       	ldi	r30, 0xDE	; 222
    3e30:	f9 e0       	ldi	r31, 0x09	; 9
    3e32:	16 82       	std	Z+6, r1	; 0x06
    3e34:	d5 01       	movw	r26, r10
    3e36:	1d 92       	st	X+, r1
    3e38:	1c 92       	st	X, r1
    3e3a:	10 92 96 0a 	sts	0x0A96, r1	; 0x800a96 <_err2+0x1>
    3e3e:	10 92 95 0a 	sts	0x0A95, r1	; 0x800a95 <_err2>
    3e42:	11 8a       	std	Z+17, r1	; 0x11
    3e44:	df 92       	push	r13
    3e46:	cf 92       	push	r12
    3e48:	df 93       	push	r29
    3e4a:	cf 93       	push	r28
    3e4c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3e50:	8e ed       	ldi	r24, 0xDE	; 222
    3e52:	99 e0       	ldi	r25, 0x09	; 9
    3e54:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
    3e58:	8e ed       	ldi	r24, 0xDE	; 222
    3e5a:	99 e0       	ldi	r25, 0x09	; 9
    3e5c:	0e 94 dc 38 	call	0x71b8	; 0x71b8 <Comp_Stop>
    3e60:	0f 90       	pop	r0
    3e62:	0f 90       	pop	r0
    3e64:	0f 90       	pop	r0
    3e66:	0f 90       	pop	r0
	
		if(Comp_2.suply && Comp_2.countError<3)
    3e68:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <Comp_2+0x6>
    3e6c:	88 23       	and	r24, r24
    3e6e:	09 f4       	brne	.+2      	; 0x3e72 <System_2+0x100>
    3e70:	40 c0       	rjmp	.+128    	; 0x3ef2 <System_2+0x180>
    3e72:	80 91 ef 09 	lds	r24, 0x09EF	; 0x8009ef <Comp_2+0x11>
    3e76:	83 30       	cpi	r24, 0x03	; 3
    3e78:	e0 f5       	brcc	.+120    	; 0x3ef2 <System_2+0x180>
		{
			_err2=Check_Erors(&Comp_2,&EEpromData);
    3e7a:	b7 01       	movw	r22, r14
    3e7c:	8e ed       	ldi	r24, 0xDE	; 222
    3e7e:	99 e0       	ldi	r25, 0x09	; 9
    3e80:	f6 d3       	rcall	.+2028   	; 0x466e <Check_Erors>
    3e82:	90 93 96 0a 	sts	0x0A96, r25	; 0x800a96 <_err2+0x1>
    3e86:	80 93 95 0a 	sts	0x0A95, r24	; 0x800a95 <_err2>
		
			//if(_err2>0 && Comp_1.error==0){Comp_2.error=_err2;Comp_2.countError++;Comp_2.Steps=0;Comp_Stop(&Comp_2);}//if(Comp_2.countError==3)EEpromData.power=0;
			mod_pump(&Comp_2,&EEpromData);
    3e8a:	b7 01       	movw	r22, r14
    3e8c:	8e ed       	ldi	r24, 0xDE	; 222
    3e8e:	99 e0       	ldi	r25, 0x09	; 9
    3e90:	0e 94 e6 39 	call	0x73cc	; 0x73cc <mod_pump>
	       if(Comp_2.checkTrv && xTaskGetTickCount()-countTrvTime_2>10000 ){Comp_2.Steps = Fuzzy(&Comp_2,EEpromData.trv_corection_2);countTrvTime_2=xTaskGetTickCount();}
    3e94:	80 91 df 09 	lds	r24, 0x09DF	; 0x8009df <Comp_2+0x1>
    3e98:	88 23       	and	r24, r24
    3e9a:	59 f1       	breq	.+86     	; 0x3ef2 <System_2+0x180>
    3e9c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3ea0:	40 90 05 07 	lds	r4, 0x0705	; 0x800705 <countTrvTime_2>
    3ea4:	50 90 06 07 	lds	r5, 0x0706	; 0x800706 <countTrvTime_2+0x1>
    3ea8:	60 90 07 07 	lds	r6, 0x0707	; 0x800707 <countTrvTime_2+0x2>
    3eac:	70 90 08 07 	lds	r7, 0x0708	; 0x800708 <countTrvTime_2+0x3>
    3eb0:	dc 01       	movw	r26, r24
    3eb2:	cb 01       	movw	r24, r22
    3eb4:	84 19       	sub	r24, r4
    3eb6:	95 09       	sbc	r25, r5
    3eb8:	a6 09       	sbc	r26, r6
    3eba:	b7 09       	sbc	r27, r7
    3ebc:	81 31       	cpi	r24, 0x11	; 17
    3ebe:	97 42       	sbci	r25, 0x27	; 39
    3ec0:	a1 05       	cpc	r26, r1
    3ec2:	b1 05       	cpc	r27, r1
    3ec4:	b0 f0       	brcs	.+44     	; 0x3ef2 <System_2+0x180>
    3ec6:	a0 e4       	ldi	r26, 0x40	; 64
    3ec8:	b9 e0       	ldi	r27, 0x09	; 9
    3eca:	6d 91       	ld	r22, X+
    3ecc:	7c 91       	ld	r23, X
    3ece:	8e ed       	ldi	r24, 0xDE	; 222
    3ed0:	99 e0       	ldi	r25, 0x09	; 9
    3ed2:	0e 94 4a 52 	call	0xa494	; 0xa494 <Fuzzy>
    3ed6:	e6 e4       	ldi	r30, 0x46	; 70
    3ed8:	fa e0       	ldi	r31, 0x0A	; 10
    3eda:	91 83       	std	Z+1, r25	; 0x01
    3edc:	80 83       	st	Z, r24
    3ede:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3ee2:	60 93 05 07 	sts	0x0705, r22	; 0x800705 <countTrvTime_2>
    3ee6:	70 93 06 07 	sts	0x0706, r23	; 0x800706 <countTrvTime_2+0x1>
    3eea:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <countTrvTime_2+0x2>
    3eee:	90 93 08 07 	sts	0x0708, r25	; 0x800708 <countTrvTime_2+0x3>
		}

		vTaskDelay(1000);
    3ef2:	68 ee       	ldi	r22, 0xE8	; 232
    3ef4:	73 e0       	ldi	r23, 0x03	; 3
    3ef6:	80 e0       	ldi	r24, 0x00	; 0
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	72 d8       	rcall	.-3868   	; 0x2fe0 <vTaskDelay>
		//xSerialxPrintf(&xSerial3Port,"Stack_2 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
		//portYIELD();
		//xSerialxPrintf(&xSerial3Port,"Stack2 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
	}
    3efc:	58 cf       	rjmp	.-336    	; 0x3dae <System_2+0x3c>

00003efe <System_1>:
portENTER_CRITICAL();
ReadSensors(&Comp_1);
portEXIT_CRITICAL();
//EEpromData.AireToWater==1 &&

		if(EEpromData.NombComp==2 )
    3efe:	c8 ef       	ldi	r28, 0xF8	; 248
    3f00:	d8 e0       	ldi	r29, 0x08	; 8
			vTaskResume( xHandleSecond );
			stop_second=false;
			
		}
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
    3f02:	77 24       	eor	r7, r7
    3f04:	73 94       	inc	r7
		if(Comp_1.suply &&  Comp_1.countError<3)
		{
			//>EEpromData.TimeBetweenDef EEpromData.TimeDef
			
			if(EEpromData.AireToWater==1){
			xSerialxPrintf(&xSerial3Port,"forsDefrost =%d\r\n",forsDefrost);	
    3f06:	0f 2e       	mov	r0, r31
    3f08:	fb e8       	ldi	r31, 0x8B	; 139
    3f0a:	8f 2e       	mov	r8, r31
    3f0c:	f2 e0       	ldi	r31, 0x02	; 2
    3f0e:	9f 2e       	mov	r9, r31
    3f10:	f0 2d       	mov	r31, r0
    3f12:	06 e9       	ldi	r16, 0x96	; 150
    3f14:	17 e0       	ldi	r17, 0x07	; 7
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",xTaskGetSchedulerState());
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
		else if(EEpromData.power==0 && Comp_1.suply){Comp_1.suply=false;PORTA &= 0x0;Comp_1.error=0;_err1=0;Comp_1.countError=0;xSerialxPrintf(&xSerial3Port,"OFF_System_1\r\n"); stopTrvTimer(&Comp_1);Comp_Stop(&Comp_1);}
    3f16:	0f 2e       	mov	r0, r31
    3f18:	f4 ec       	ldi	r31, 0xC4	; 196
    3f1a:	cf 2e       	mov	r12, r31
    3f1c:	f9 e0       	ldi	r31, 0x09	; 9
    3f1e:	df 2e       	mov	r13, r31
    3f20:	f0 2d       	mov	r31, r0
    3f22:	0f 2e       	mov	r0, r31
    3f24:	fc e7       	ldi	r31, 0x7C	; 124
    3f26:	ef 2e       	mov	r14, r31
    3f28:	f2 e0       	ldi	r31, 0x02	; 2
    3f2a:	ff 2e       	mov	r15, r31
    3f2c:	f0 2d       	mov	r31, r0
		}
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",xTaskGetSchedulerState());
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
    3f2e:	0f 2e       	mov	r0, r31
    3f30:	fe e6       	ldi	r31, 0x6E	; 110
    3f32:	af 2e       	mov	r10, r31
    3f34:	f2 e0       	ldi	r31, 0x02	; 2
    3f36:	bf 2e       	mov	r11, r31
    3f38:	f0 2d       	mov	r31, r0
	
	
	while (1)
	{

		wdt_reset();
    3f3a:	a8 95       	wdr
		//xSerialxPrintf(&xSerial3Port,"System_1_task\r\n");
vTaskSuspend( xHandleSecond );		
    3f3c:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <xHandleSecond>
    3f40:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <xHandleSecond+0x1>
    3f44:	d8 d8       	rcall	.-3664   	; 0x30f6 <vTaskSuspend>
portENTER_CRITICAL();
    3f46:	0f b6       	in	r0, 0x3f	; 63
    3f48:	f8 94       	cli
    3f4a:	0f 92       	push	r0
ReadSensors(&Comp_1);
    3f4c:	88 e5       	ldi	r24, 0x58	; 88
    3f4e:	99 e0       	ldi	r25, 0x09	; 9
    3f50:	0e 94 7c 4d 	call	0x9af8	; 0x9af8 <ReadSensors>
portEXIT_CRITICAL();
    3f54:	0f 90       	pop	r0
    3f56:	0f be       	out	0x3f, r0	; 63
//EEpromData.AireToWater==1 &&

		if(EEpromData.NombComp==2 )
    3f58:	88 a1       	ldd	r24, Y+32	; 0x20
    3f5a:	82 30       	cpi	r24, 0x02	; 2
    3f5c:	61 f4       	brne	.+24     	; 0x3f76 <System_1+0x78>
		{
			vTaskResume( xHandleSecond );
    3f5e:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <xHandleSecond>
    3f62:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <xHandleSecond+0x1>
    3f66:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <vTaskResume>
			stop_second=false;
    3f6a:	10 92 a6 0a 	sts	0x0AA6, r1	; 0x800aa6 <stop_second>
			
		}
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
    3f6e:	88 a1       	ldd	r24, Y+32	; 0x20
    3f70:	81 30       	cpi	r24, 0x01	; 1
    3f72:	69 f4       	brne	.+26     	; 0x3f8e <System_1+0x90>
    3f74:	06 c0       	rjmp	.+12     	; 0x3f82 <System_1+0x84>
    3f76:	81 30       	cpi	r24, 0x01	; 1
    3f78:	51 f4       	brne	.+20     	; 0x3f8e <System_1+0x90>
    3f7a:	80 91 a6 0a 	lds	r24, 0x0AA6	; 0x800aa6 <stop_second>
    3f7e:	81 11       	cpse	r24, r1
    3f80:	06 c0       	rjmp	.+12     	; 0x3f8e <System_1+0x90>
    3f82:	70 92 a6 0a 	sts	0x0AA6, r7	; 0x800aa6 <stop_second>
    3f86:	8e ed       	ldi	r24, 0xDE	; 222
    3f88:	99 e0       	ldi	r25, 0x09	; 9
    3f8a:	0e 94 dc 38 	call	0x71b8	; 0x71b8 <Comp_Stop>
//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",xTaskGetSchedulerState());
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
    3f8e:	8c a1       	ldd	r24, Y+36	; 0x24
    3f90:	81 30       	cpi	r24, 0x01	; 1
    3f92:	f9 f4       	brne	.+62     	; 0x3fd2 <System_1+0xd4>
    3f94:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <Comp_1+0x6>
    3f98:	81 11       	cpse	r24, r1
    3f9a:	46 c0       	rjmp	.+140    	; 0x4028 <System_1+0x12a>
    3f9c:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <Comp_1>
    3fa0:	81 11       	cpse	r24, r1
    3fa2:	7f c1       	rjmp	.+766    	; 0x42a2 <System_1+0x3a4>
    3fa4:	70 92 5e 09 	sts	0x095E, r7	; 0x80095e <Comp_1+0x6>
    3fa8:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3fac:	60 93 d9 08 	sts	0x08D9, r22	; 0x8008d9 <timeTillDef>
    3fb0:	70 93 da 08 	sts	0x08DA, r23	; 0x8008da <timeTillDef+0x1>
    3fb4:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <timeTillDef+0x2>
    3fb8:	90 93 dc 08 	sts	0x08DC, r25	; 0x8008dc <timeTillDef+0x3>
    3fbc:	bf 92       	push	r11
    3fbe:	af 92       	push	r10
    3fc0:	1f 93       	push	r17
    3fc2:	0f 93       	push	r16
    3fc4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3fc8:	0f 90       	pop	r0
    3fca:	0f 90       	pop	r0
    3fcc:	0f 90       	pop	r0
    3fce:	0f 90       	pop	r0
    3fd0:	26 c0       	rjmp	.+76     	; 0x401e <System_1+0x120>
		else if(EEpromData.power==0 && Comp_1.suply){Comp_1.suply=false;PORTA &= 0x0;Comp_1.error=0;_err1=0;Comp_1.countError=0;xSerialxPrintf(&xSerial3Port,"OFF_System_1\r\n"); stopTrvTimer(&Comp_1);Comp_Stop(&Comp_1);}
    3fd2:	81 11       	cpse	r24, r1
    3fd4:	24 c0       	rjmp	.+72     	; 0x401e <System_1+0x120>
    3fd6:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <Comp_1+0x6>
    3fda:	88 23       	and	r24, r24
    3fdc:	09 f4       	brne	.+2      	; 0x3fe0 <System_1+0xe2>
    3fde:	61 c1       	rjmp	.+706    	; 0x42a2 <System_1+0x3a4>
    3fe0:	e8 e5       	ldi	r30, 0x58	; 88
    3fe2:	f9 e0       	ldi	r31, 0x09	; 9
    3fe4:	16 82       	std	Z+6, r1	; 0x06
    3fe6:	82 b1       	in	r24, 0x02	; 2
    3fe8:	12 b8       	out	0x02, r1	; 2
    3fea:	d6 01       	movw	r26, r12
    3fec:	1d 92       	st	X+, r1
    3fee:	1c 92       	st	X, r1
    3ff0:	10 92 63 0a 	sts	0x0A63, r1	; 0x800a63 <_err1+0x1>
    3ff4:	10 92 62 0a 	sts	0x0A62, r1	; 0x800a62 <_err1>
    3ff8:	11 8a       	std	Z+17, r1	; 0x11
    3ffa:	ff 92       	push	r15
    3ffc:	ef 92       	push	r14
    3ffe:	1f 93       	push	r17
    4000:	0f 93       	push	r16
    4002:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    4006:	88 e5       	ldi	r24, 0x58	; 88
    4008:	99 e0       	ldi	r25, 0x09	; 9
    400a:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
    400e:	88 e5       	ldi	r24, 0x58	; 88
    4010:	99 e0       	ldi	r25, 0x09	; 9
    4012:	0e 94 dc 38 	call	0x71b8	; 0x71b8 <Comp_Stop>
    4016:	0f 90       	pop	r0
    4018:	0f 90       	pop	r0
    401a:	0f 90       	pop	r0
    401c:	0f 90       	pop	r0
		//xSerialxPrintf(&xSerial3Port,"mod =%d\r\n",EEpromData.AireToWater);
		//xSerialxPrintf(&xSerial3Port,"TimeBetweenDef =%d\r\n",EEpromData.TimeBetweenDef);
		
	
		
		if(Comp_1.suply &&  Comp_1.countError<3)
    401e:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <Comp_1+0x6>
    4022:	88 23       	and	r24, r24
    4024:	09 f4       	brne	.+2      	; 0x4028 <System_1+0x12a>
    4026:	3d c1       	rjmp	.+634    	; 0x42a2 <System_1+0x3a4>
    4028:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <Comp_1+0x11>
    402c:	83 30       	cpi	r24, 0x03	; 3
    402e:	08 f0       	brcs	.+2      	; 0x4032 <System_1+0x134>
    4030:	38 c1       	rjmp	.+624    	; 0x42a2 <System_1+0x3a4>
		{
			//>EEpromData.TimeBetweenDef EEpromData.TimeDef
			
			if(EEpromData.AireToWater==1){
    4032:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4034:	81 30       	cpi	r24, 0x01	; 1
    4036:	09 f0       	breq	.+2      	; 0x403a <System_1+0x13c>
    4038:	f2 c0       	rjmp	.+484    	; 0x421e <System_1+0x320>
			xSerialxPrintf(&xSerial3Port,"forsDefrost =%d\r\n",forsDefrost);	
    403a:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <forsDefrost>
    403e:	1f 92       	push	r1
    4040:	8f 93       	push	r24
    4042:	9f 92       	push	r9
    4044:	8f 92       	push	r8
    4046:	1f 93       	push	r17
    4048:	0f 93       	push	r16
    404a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}	
    404e:	0f 90       	pop	r0
    4050:	0f 90       	pop	r0
    4052:	0f 90       	pop	r0
    4054:	0f 90       	pop	r0
    4056:	0f 90       	pop	r0
    4058:	0f 90       	pop	r0
    405a:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <forsDefrost>
    405e:	81 30       	cpi	r24, 0x01	; 1
    4060:	a9 f4       	brne	.+42     	; 0x408c <System_1+0x18e>
    4062:	be 01       	movw	r22, r28
    4064:	88 e5       	ldi	r24, 0x58	; 88
    4066:	99 e0       	ldi	r25, 0x09	; 9
    4068:	0e 94 56 35 	call	0x6aac	; 0x6aac <startDefrost>
    406c:	70 92 61 09 	sts	0x0961, r7	; 0x800961 <Comp_1+0x9>
    4070:	10 92 01 07 	sts	0x0701, r1	; 0x800701 <forsDefrost>
    4074:	e3 e2       	ldi	r30, 0x23	; 35
    4076:	f2 e0       	ldi	r31, 0x02	; 2
    4078:	ff 93       	push	r31
    407a:	ef 93       	push	r30
    407c:	1f 93       	push	r17
    407e:	0f 93       	push	r16
    4080:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    4084:	0f 90       	pop	r0
    4086:	0f 90       	pop	r0
    4088:	0f 90       	pop	r0
    408a:	0f 90       	pop	r0
			if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Src_In<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    408c:	80 91 61 09 	lds	r24, 0x0961	; 0x800961 <Comp_1+0x9>
    4090:	81 11       	cpse	r24, r1
    4092:	4d c0       	rjmp	.+154    	; 0x412e <System_1+0x230>
    4094:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    4098:	20 91 d9 08 	lds	r18, 0x08D9	; 0x8008d9 <timeTillDef>
    409c:	30 91 da 08 	lds	r19, 0x08DA	; 0x8008da <timeTillDef+0x1>
    40a0:	40 91 db 08 	lds	r20, 0x08DB	; 0x8008db <timeTillDef+0x2>
    40a4:	50 91 dc 08 	lds	r21, 0x08DC	; 0x8008dc <timeTillDef+0x3>
    40a8:	1b 01       	movw	r2, r22
    40aa:	2c 01       	movw	r4, r24
    40ac:	22 1a       	sub	r2, r18
    40ae:	33 0a       	sbc	r3, r19
    40b0:	44 0a       	sbc	r4, r20
    40b2:	55 0a       	sbc	r5, r21
    40b4:	2a a1       	ldd	r18, Y+34	; 0x22
    40b6:	30 e0       	ldi	r19, 0x00	; 0
    40b8:	a0 e6       	ldi	r26, 0x60	; 96
    40ba:	ba ee       	ldi	r27, 0xEA	; 234
    40bc:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    40c0:	62 15       	cp	r22, r2
    40c2:	73 05       	cpc	r23, r3
    40c4:	84 05       	cpc	r24, r4
    40c6:	95 05       	cpc	r25, r5
    40c8:	68 f5       	brcc	.+90     	; 0x4124 <System_1+0x226>
    40ca:	6a a5       	ldd	r22, Y+42	; 0x2a
    40cc:	7b a5       	ldd	r23, Y+43	; 0x2b
    40ce:	07 2e       	mov	r0, r23
    40d0:	00 0c       	add	r0, r0
    40d2:	88 0b       	sbc	r24, r24
    40d4:	99 0b       	sbc	r25, r25
    40d6:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    40da:	9b 01       	movw	r18, r22
    40dc:	ac 01       	movw	r20, r24
    40de:	60 91 8a 09 	lds	r22, 0x098A	; 0x80098a <Comp_1+0x32>
    40e2:	70 91 8b 09 	lds	r23, 0x098B	; 0x80098b <Comp_1+0x33>
    40e6:	80 91 8c 09 	lds	r24, 0x098C	; 0x80098c <Comp_1+0x34>
    40ea:	90 91 8d 09 	lds	r25, 0x098D	; 0x80098d <Comp_1+0x35>
    40ee:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    40f2:	88 23       	and	r24, r24
    40f4:	bc f4       	brge	.+46     	; 0x4124 <System_1+0x226>
    40f6:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <forsDefrost>
    40fa:	81 11       	cpse	r24, r1
    40fc:	13 c0       	rjmp	.+38     	; 0x4124 <System_1+0x226>
    40fe:	be 01       	movw	r22, r28
    4100:	88 e5       	ldi	r24, 0x58	; 88
    4102:	99 e0       	ldi	r25, 0x09	; 9
    4104:	0e 94 56 35 	call	0x6aac	; 0x6aac <startDefrost>
    4108:	70 92 61 09 	sts	0x0961, r7	; 0x800961 <Comp_1+0x9>
    410c:	83 e3       	ldi	r24, 0x33	; 51
    410e:	92 e0       	ldi	r25, 0x02	; 2
    4110:	9f 93       	push	r25
    4112:	8f 93       	push	r24
    4114:	1f 93       	push	r17
    4116:	0f 93       	push	r16
    4118:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    411c:	0f 90       	pop	r0
    411e:	0f 90       	pop	r0
    4120:	0f 90       	pop	r0
    4122:	0f 90       	pop	r0
			if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    4124:	80 91 61 09 	lds	r24, 0x0961	; 0x800961 <Comp_1+0x9>
    4128:	88 23       	and	r24, r24
    412a:	09 f4       	brne	.+2      	; 0x412e <System_1+0x230>
    412c:	78 c0       	rjmp	.+240    	; 0x421e <System_1+0x320>
    412e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    4132:	20 91 d9 08 	lds	r18, 0x08D9	; 0x8008d9 <timeTillDef>
    4136:	30 91 da 08 	lds	r19, 0x08DA	; 0x8008da <timeTillDef+0x1>
    413a:	40 91 db 08 	lds	r20, 0x08DB	; 0x8008db <timeTillDef+0x2>
    413e:	50 91 dc 08 	lds	r21, 0x08DC	; 0x8008dc <timeTillDef+0x3>
    4142:	1b 01       	movw	r2, r22
    4144:	2c 01       	movw	r4, r24
    4146:	22 1a       	sub	r2, r18
    4148:	33 0a       	sbc	r3, r19
    414a:	44 0a       	sbc	r4, r20
    414c:	55 0a       	sbc	r5, r21
    414e:	29 a1       	ldd	r18, Y+33	; 0x21
    4150:	30 e0       	ldi	r19, 0x00	; 0
    4152:	a0 e6       	ldi	r26, 0x60	; 96
    4154:	ba ee       	ldi	r27, 0xEA	; 234
    4156:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    415a:	62 15       	cp	r22, r2
    415c:	73 05       	cpc	r23, r3
    415e:	84 05       	cpc	r24, r4
    4160:	95 05       	cpc	r25, r5
    4162:	20 f5       	brcc	.+72     	; 0x41ac <System_1+0x2ae>
    4164:	80 91 62 09 	lds	r24, 0x0962	; 0x800962 <Comp_1+0xa>
    4168:	88 23       	and	r24, r24
    416a:	01 f1       	breq	.+64     	; 0x41ac <System_1+0x2ae>
    416c:	be 01       	movw	r22, r28
    416e:	88 e5       	ldi	r24, 0x58	; 88
    4170:	99 e0       	ldi	r25, 0x09	; 9
    4172:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <stopDefrost>
    4176:	e8 e5       	ldi	r30, 0x58	; 88
    4178:	f9 e0       	ldi	r31, 0x09	; 9
    417a:	11 86       	std	Z+9, r1	; 0x09
    417c:	12 86       	std	Z+10, r1	; 0x0a
    417e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    4182:	60 93 d9 08 	sts	0x08D9, r22	; 0x8008d9 <timeTillDef>
    4186:	70 93 da 08 	sts	0x08DA, r23	; 0x8008da <timeTillDef+0x1>
    418a:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <timeTillDef+0x2>
    418e:	90 93 dc 08 	sts	0x08DC, r25	; 0x8008dc <timeTillDef+0x3>
    4192:	ee e3       	ldi	r30, 0x3E	; 62
    4194:	f2 e0       	ldi	r31, 0x02	; 2
    4196:	ff 93       	push	r31
    4198:	ef 93       	push	r30
    419a:	1f 93       	push	r17
    419c:	0f 93       	push	r16
    419e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    41a2:	0f 90       	pop	r0
    41a4:	0f 90       	pop	r0
    41a6:	0f 90       	pop	r0
    41a8:	0f 90       	pop	r0
    41aa:	39 c0       	rjmp	.+114    	; 0x421e <System_1+0x320>
			else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    41ac:	80 91 61 09 	lds	r24, 0x0961	; 0x800961 <Comp_1+0x9>
    41b0:	88 23       	and	r24, r24
    41b2:	a9 f1       	breq	.+106    	; 0x421e <System_1+0x320>
    41b4:	6c a5       	ldd	r22, Y+44	; 0x2c
    41b6:	7d a5       	ldd	r23, Y+45	; 0x2d
    41b8:	07 2e       	mov	r0, r23
    41ba:	00 0c       	add	r0, r0
    41bc:	88 0b       	sbc	r24, r24
    41be:	99 0b       	sbc	r25, r25
    41c0:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    41c4:	9b 01       	movw	r18, r22
    41c6:	ac 01       	movw	r20, r24
    41c8:	60 91 8a 09 	lds	r22, 0x098A	; 0x80098a <Comp_1+0x32>
    41cc:	70 91 8b 09 	lds	r23, 0x098B	; 0x80098b <Comp_1+0x33>
    41d0:	80 91 8c 09 	lds	r24, 0x098C	; 0x80098c <Comp_1+0x34>
    41d4:	90 91 8d 09 	lds	r25, 0x098D	; 0x80098d <Comp_1+0x35>
    41d8:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    41dc:	18 16       	cp	r1, r24
    41de:	fc f4       	brge	.+62     	; 0x421e <System_1+0x320>
    41e0:	be 01       	movw	r22, r28
    41e2:	88 e5       	ldi	r24, 0x58	; 88
    41e4:	99 e0       	ldi	r25, 0x09	; 9
    41e6:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <stopDefrost>
    41ea:	e8 e5       	ldi	r30, 0x58	; 88
    41ec:	f9 e0       	ldi	r31, 0x09	; 9
    41ee:	11 86       	std	Z+9, r1	; 0x09
    41f0:	12 86       	std	Z+10, r1	; 0x0a
    41f2:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    41f6:	60 93 d9 08 	sts	0x08D9, r22	; 0x8008d9 <timeTillDef>
    41fa:	70 93 da 08 	sts	0x08DA, r23	; 0x8008da <timeTillDef+0x1>
    41fe:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <timeTillDef+0x2>
    4202:	90 93 dc 08 	sts	0x08DC, r25	; 0x8008dc <timeTillDef+0x3>
    4206:	8e e3       	ldi	r24, 0x3E	; 62
    4208:	92 e0       	ldi	r25, 0x02	; 2
    420a:	9f 93       	push	r25
    420c:	8f 93       	push	r24
    420e:	1f 93       	push	r17
    4210:	0f 93       	push	r16
    4212:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    4216:	0f 90       	pop	r0
    4218:	0f 90       	pop	r0
    421a:	0f 90       	pop	r0
    421c:	0f 90       	pop	r0
			
			}
			
			if(!init_system){_err1=Check_Erors(&Comp_1,&EEpromData);ADE7758_resetStatus();} else init_system=false;
    421e:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <init_system>
    4222:	81 11       	cpse	r24, r1
    4224:	0a c0       	rjmp	.+20     	; 0x423a <System_1+0x33c>
    4226:	be 01       	movw	r22, r28
    4228:	88 e5       	ldi	r24, 0x58	; 88
    422a:	99 e0       	ldi	r25, 0x09	; 9
    422c:	20 d2       	rcall	.+1088   	; 0x466e <Check_Erors>
    422e:	90 93 63 0a 	sts	0x0A63, r25	; 0x800a63 <_err1+0x1>
    4232:	80 93 62 0a 	sts	0x0A62, r24	; 0x800a62 <_err1>
    4236:	18 d2       	rcall	.+1072   	; 0x4668 <ADE7758_resetStatus>
    4238:	02 c0       	rjmp	.+4      	; 0x423e <System_1+0x340>
    423a:	10 92 82 0a 	sts	0x0A82, r1	; 0x800a82 <init_system>
				
			//if(_err1>0 && Comp_1.error==0){Comp_1.error=_err1;Comp_1.countError++;Comp_1.Steps=0;Comp_Stop(&Comp_1);xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);}//
				
			 mod_pump(&Comp_1,&EEpromData);
    423e:	be 01       	movw	r22, r28
    4240:	88 e5       	ldi	r24, 0x58	; 88
    4242:	99 e0       	ldi	r25, 0x09	; 9
    4244:	0e 94 e6 39 	call	0x73cc	; 0x73cc <mod_pump>
			//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);
			if(Comp_1.checkTrv && xTaskGetTickCount()-countTrvTime_1>10000 ){Comp_1.Steps = Fuzzy(&Comp_1,EEpromData.trv_corection_1);countTrvTime_1=xTaskGetTickCount();}
    4248:	80 91 59 09 	lds	r24, 0x0959	; 0x800959 <Comp_1+0x1>
    424c:	88 23       	and	r24, r24
    424e:	49 f1       	breq	.+82     	; 0x42a2 <System_1+0x3a4>
    4250:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    4254:	20 91 09 07 	lds	r18, 0x0709	; 0x800709 <countTrvTime_1>
    4258:	30 91 0a 07 	lds	r19, 0x070A	; 0x80070a <countTrvTime_1+0x1>
    425c:	40 91 0b 07 	lds	r20, 0x070B	; 0x80070b <countTrvTime_1+0x2>
    4260:	50 91 0c 07 	lds	r21, 0x070C	; 0x80070c <countTrvTime_1+0x3>
    4264:	dc 01       	movw	r26, r24
    4266:	cb 01       	movw	r24, r22
    4268:	82 1b       	sub	r24, r18
    426a:	93 0b       	sbc	r25, r19
    426c:	a4 0b       	sbc	r26, r20
    426e:	b5 0b       	sbc	r27, r21
    4270:	81 31       	cpi	r24, 0x11	; 17
    4272:	97 42       	sbci	r25, 0x27	; 39
    4274:	a1 05       	cpc	r26, r1
    4276:	b1 05       	cpc	r27, r1
    4278:	a0 f0       	brcs	.+40     	; 0x42a2 <System_1+0x3a4>
    427a:	6a a9       	ldd	r22, Y+50	; 0x32
    427c:	7b a9       	ldd	r23, Y+51	; 0x33
    427e:	88 e5       	ldi	r24, 0x58	; 88
    4280:	99 e0       	ldi	r25, 0x09	; 9
    4282:	0e 94 4a 52 	call	0xa494	; 0xa494 <Fuzzy>
    4286:	a0 ec       	ldi	r26, 0xC0	; 192
    4288:	b9 e0       	ldi	r27, 0x09	; 9
    428a:	8d 93       	st	X+, r24
    428c:	9c 93       	st	X, r25
    428e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    4292:	60 93 09 07 	sts	0x0709, r22	; 0x800709 <countTrvTime_1>
    4296:	70 93 0a 07 	sts	0x070A, r23	; 0x80070a <countTrvTime_1+0x1>
    429a:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <countTrvTime_1+0x2>
    429e:	90 93 0c 07 	sts	0x070C, r25	; 0x80070c <countTrvTime_1+0x3>
			
			
		}
		
		vTaskDelay(1000);
    42a2:	68 ee       	ldi	r22, 0xE8	; 232
    42a4:	73 e0       	ldi	r23, 0x03	; 3
    42a6:	80 e0       	ldi	r24, 0x00	; 0
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <vTaskDelay>
		//xSerialxPrintf(&xSerial3Port,"Stack1 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
	}
    42ae:	45 ce       	rjmp	.-886    	; 0x3f3a <System_1+0x3c>

000042b0 <ModBus>:

	while (1)
	{   
		//wdt_reset();
		//xSerialxPrintf(&xSerial3Port,"ModBus_task\r\n");
		if (xSemaphoreTake(xMbBinarySemaphore, portMAX_DELAY) == pdTRUE )
    42b0:	4f ef       	ldi	r20, 0xFF	; 255
    42b2:	5f ef       	ldi	r21, 0xFF	; 255
    42b4:	ba 01       	movw	r22, r20
    42b6:	80 91 83 0a 	lds	r24, 0x0A83	; 0x800a83 <xMbBinarySemaphore>
    42ba:	90 91 84 0a 	lds	r25, 0x0A84	; 0x800a84 <xMbBinarySemaphore+0x1>
    42be:	0e 94 8f 0b 	call	0x171e	; 0x171e <xQueueSemaphoreTake>
    42c2:	81 30       	cpi	r24, 0x01	; 1
    42c4:	a9 f7       	brne	.-22     	; 0x42b0 <ModBus>
		{
			modbus_update();
    42c6:	b1 d7       	rcall	.+3938   	; 0x522a <modbus_update>
			//xSerialxPrintf(&xSerial3Port,"Interrupt\r\n");
			if(port_0){xSerialRxFlush( &xSerialPort );port_0=false;indexBuf=0;}
    42c8:	80 91 9d 0a 	lds	r24, 0x0A9D	; 0x800a9d <port_0>
    42cc:	88 23       	and	r24, r24
    42ce:	49 f0       	breq	.+18     	; 0x42e2 <ModBus+0x32>
    42d0:	8f e4       	ldi	r24, 0x4F	; 79
    42d2:	97 e0       	ldi	r25, 0x07	; 7
    42d4:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xSerialRxFlush>
    42d8:	10 92 9d 0a 	sts	0x0A9D, r1	; 0x800a9d <port_0>
    42dc:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <indexBuf>
    42e0:	e7 cf       	rjmp	.-50     	; 0x42b0 <ModBus>
			else if(port_3){xSerialRxFlush( &xSerial3Port );port_3=false;indexBuf=0;}
    42e2:	80 91 f7 08 	lds	r24, 0x08F7	; 0x8008f7 <port_3>
    42e6:	88 23       	and	r24, r24
    42e8:	19 f3       	breq	.-58     	; 0x42b0 <ModBus>
    42ea:	86 e9       	ldi	r24, 0x96	; 150
    42ec:	97 e0       	ldi	r25, 0x07	; 7
    42ee:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xSerialRxFlush>
    42f2:	10 92 f7 08 	sts	0x08F7, r1	; 0x8008f7 <port_3>
    42f6:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <indexBuf>
    42fa:	da cf       	rjmp	.-76     	; 0x42b0 <ModBus>

000042fc <main>:
//--------------------------------------------------------
volatile long  countTimer;
int main(void) __attribute__ ((OS_main));

int main(void)
{
    42fc:	cd b7       	in	r28, 0x3d	; 61
    42fe:	de b7       	in	r29, 0x3e	; 62
    4300:	a2 97       	sbiw	r28, 0x22	; 34
    4302:	de bf       	out	0x3e, r29	; 62
    4304:	cd bf       	out	0x3d, r28	; 61

	initPins();
    4306:	0e 94 33 3f 	call	0x7e66	; 0x7e66 <initPins>
	ADE7758_Init();
    430a:	91 d1       	rcall	.+802    	; 0x462e <ADE7758_Init>
	//timer_1_Init();
	Comp_1.Index=1;
    430c:	81 e0       	ldi	r24, 0x01	; 1
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	90 93 c7 09 	sts	0x09C7, r25	; 0x8009c7 <Comp_1+0x6f>
    4314:	80 93 c6 09 	sts	0x09C6, r24	; 0x8009c6 <Comp_1+0x6e>
	Comp_2.Index=2;
    4318:	82 e0       	ldi	r24, 0x02	; 2
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <Comp_2+0x6f>
    4320:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <Comp_2+0x6e>
	//eeprom_write_block((void*)&EEpromData, ( void*)0, sizeof (xEEdata));
	current_time = time(NULL);
    4324:	80 e0       	ldi	r24, 0x00	; 0
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    432c:	60 93 f3 08 	sts	0x08F3, r22	; 0x8008f3 <current_time>
    4330:	70 93 f4 08 	sts	0x08F4, r23	; 0x8008f4 <current_time+0x1>
    4334:	80 93 f5 08 	sts	0x08F5, r24	; 0x8008f5 <current_time+0x2>
    4338:	90 93 f6 08 	sts	0x08F6, r25	; 0x8008f6 <current_time+0x3>
	xSerialPort = xSerialPortInitMinimal( USART0, 9600, portSERIAL_BUFFER_TX, portSERIAL_BUFFER_RX);
    433c:	ee 24       	eor	r14, r14
    433e:	ea 94       	dec	r14
    4340:	f1 2c       	mov	r15, r1
    4342:	0f ef       	ldi	r16, 0xFF	; 255
    4344:	10 e0       	ldi	r17, 0x00	; 0
    4346:	20 e8       	ldi	r18, 0x80	; 128
    4348:	35 e2       	ldi	r19, 0x25	; 37
    434a:	40 e0       	ldi	r20, 0x00	; 0
    434c:	50 e0       	ldi	r21, 0x00	; 0
    434e:	60 e0       	ldi	r22, 0x00	; 0
    4350:	ce 01       	movw	r24, r28
    4352:	01 96       	adiw	r24, 0x01	; 1
    4354:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <xSerialPortInitMinimal>
    4358:	82 e2       	ldi	r24, 0x22	; 34
    435a:	fe 01       	movw	r30, r28
    435c:	31 96       	adiw	r30, 0x01	; 1
    435e:	af e4       	ldi	r26, 0x4F	; 79
    4360:	b7 e0       	ldi	r27, 0x07	; 7
    4362:	01 90       	ld	r0, Z+
    4364:	0d 92       	st	X+, r0
    4366:	8a 95       	dec	r24
    4368:	e1 f7       	brne	.-8      	; 0x4362 <main+0x66>
	xSerial3Port = xSerialPortInitMinimal( USART3, 9600, portSERIAL_BUFFER_TX, portSERIAL_BUFFER_RX);
    436a:	20 e8       	ldi	r18, 0x80	; 128
    436c:	35 e2       	ldi	r19, 0x25	; 37
    436e:	40 e0       	ldi	r20, 0x00	; 0
    4370:	50 e0       	ldi	r21, 0x00	; 0
    4372:	66 e0       	ldi	r22, 0x06	; 6
    4374:	ce 01       	movw	r24, r28
    4376:	01 96       	adiw	r24, 0x01	; 1
    4378:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <xSerialPortInitMinimal>
    437c:	82 e2       	ldi	r24, 0x22	; 34
    437e:	fe 01       	movw	r30, r28
    4380:	31 96       	adiw	r30, 0x01	; 1
    4382:	a6 e9       	ldi	r26, 0x96	; 150
    4384:	b7 e0       	ldi	r27, 0x07	; 7
    4386:	01 90       	ld	r0, Z+
    4388:	0d 92       	st	X+, r0
    438a:	8a 95       	dec	r24
    438c:	e1 f7       	brne	.-8      	; 0x4386 <main+0x8a>
	vSemaphoreCreateBinary(xMbBinarySemaphore);
    438e:	43 e0       	ldi	r20, 0x03	; 3
    4390:	60 e0       	ldi	r22, 0x00	; 0
    4392:	81 e0       	ldi	r24, 0x01	; 1
    4394:	0e 94 a7 09 	call	0x134e	; 0x134e <xQueueGenericCreate>
    4398:	90 93 84 0a 	sts	0x0A84, r25	; 0x800a84 <xMbBinarySemaphore+0x1>
    439c:	80 93 83 0a 	sts	0x0A83, r24	; 0x800a83 <xMbBinarySemaphore>
    43a0:	00 97       	sbiw	r24, 0x00	; 0
    43a2:	41 f0       	breq	.+16     	; 0x43b4 <main+0xb8>
    43a4:	00 e0       	ldi	r16, 0x00	; 0
    43a6:	20 e0       	ldi	r18, 0x00	; 0
    43a8:	30 e0       	ldi	r19, 0x00	; 0
    43aa:	a9 01       	movw	r20, r18
    43ac:	60 e0       	ldi	r22, 0x00	; 0
    43ae:	70 e0       	ldi	r23, 0x00	; 0
    43b0:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>

    
	eeprom_read_block((void*)&EEpromData, (const void*)0, sizeof (xEEdata));
    43b4:	40 e6       	ldi	r20, 0x60	; 96
    43b6:	50 e0       	ldi	r21, 0x00	; 0
    43b8:	60 e0       	ldi	r22, 0x00	; 0
    43ba:	70 e0       	ldi	r23, 0x00	; 0
    43bc:	88 ef       	ldi	r24, 0xF8	; 248
    43be:	98 e0       	ldi	r25, 0x08	; 8
    43c0:	0e 94 be 5c 	call	0xb97c	; 0xb97c <eeprom_read_block>
	activateTimers(&Comp_1);
    43c4:	88 e5       	ldi	r24, 0x58	; 88
    43c6:	99 e0       	ldi	r25, 0x09	; 9
    43c8:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <activateTimers>
	activateTimers(&Comp_2);
    43cc:	8e ed       	ldi	r24, 0xDE	; 222
    43ce:	99 e0       	ldi	r25, 0x09	; 9
    43d0:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <activateTimers>
	activateTrvTimer(&Comp_1);
    43d4:	88 e5       	ldi	r24, 0x58	; 88
    43d6:	99 e0       	ldi	r25, 0x09	; 9
    43d8:	0e 94 85 51 	call	0xa30a	; 0xa30a <activateTrvTimer>
	activateTrvTimer(&Comp_2);
    43dc:	8e ed       	ldi	r24, 0xDE	; 222
    43de:	99 e0       	ldi	r25, 0x09	; 9
    43e0:	0e 94 85 51 	call	0xa30a	; 0xa30a <activateTrvTimer>
	init_system=true;
    43e4:	81 e0       	ldi	r24, 0x01	; 1
    43e6:	80 93 82 0a 	sts	0x0A82, r24	; 0x800a82 <init_system>
	old_corection_1=EEpromData.trv_corection_1;
    43ea:	80 91 2a 09 	lds	r24, 0x092A	; 0x80092a <EEpromData+0x32>
    43ee:	90 91 2b 09 	lds	r25, 0x092B	; 0x80092b <EEpromData+0x33>
    43f2:	90 93 69 0a 	sts	0x0A69, r25	; 0x800a69 <old_corection_1+0x1>
    43f6:	80 93 68 0a 	sts	0x0A68, r24	; 0x800a68 <old_corection_1>
	old_corection_2=EEpromData.trv_corection_2;
    43fa:	80 91 40 09 	lds	r24, 0x0940	; 0x800940 <EEpromData+0x48>
    43fe:	90 91 41 09 	lds	r25, 0x0941	; 0x800941 <EEpromData+0x49>
    4402:	90 93 dd 09 	sts	0x09DD, r25	; 0x8009dd <old_corection_2+0x1>
    4406:	80 93 dc 09 	sts	0x09DC, r24	; 0x8009dc <old_corection_2>
	Comp_1.modeOfPump=Comp_2.modeOfPump=selmode(&EEpromData);
    440a:	88 ef       	ldi	r24, 0xF8	; 248
    440c:	98 e0       	ldi	r25, 0x08	; 8
    440e:	0e 94 58 36 	call	0x6cb0	; 0x6cb0 <selmode>
    4412:	80 93 ee 09 	sts	0x09EE, r24	; 0x8009ee <Comp_2+0x10>
    4416:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <Comp_1+0x10>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    441a:	99 e2       	ldi	r25, 0x29	; 41
    441c:	88 e1       	ldi	r24, 0x18	; 24
    441e:	0f b6       	in	r0, 0x3f	; 63
    4420:	f8 94       	cli
    4422:	a8 95       	wdr
    4424:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    4428:	0f be       	out	0x3f, r0	; 63
    442a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	wdt_enable(WDTO_8S);
	//-------------------------------------
	xTaskCreate(ModBus,(const portCHAR *)"ModBus",256,NULL,2, NULL );
    442e:	e1 2c       	mov	r14, r1
    4430:	f1 2c       	mov	r15, r1
    4432:	02 e0       	ldi	r16, 0x02	; 2
    4434:	20 e0       	ldi	r18, 0x00	; 0
    4436:	30 e0       	ldi	r19, 0x00	; 0
    4438:	40 e0       	ldi	r20, 0x00	; 0
    443a:	51 e0       	ldi	r21, 0x01	; 1
    443c:	6d e9       	ldi	r22, 0x9D	; 157
    443e:	72 e0       	ldi	r23, 0x02	; 2
    4440:	88 e5       	ldi	r24, 0x58	; 88
    4442:	91 e2       	ldi	r25, 0x21	; 33
    4444:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
	xTaskCreate(System_1,(const portCHAR *)"System_1",512,NULL,0, &xHandleFirst );
    4448:	0f 2e       	mov	r0, r31
    444a:	ff e0       	ldi	r31, 0x0F	; 15
    444c:	ef 2e       	mov	r14, r31
    444e:	f7 e0       	ldi	r31, 0x07	; 7
    4450:	ff 2e       	mov	r15, r31
    4452:	f0 2d       	mov	r31, r0
    4454:	00 e0       	ldi	r16, 0x00	; 0
    4456:	20 e0       	ldi	r18, 0x00	; 0
    4458:	30 e0       	ldi	r19, 0x00	; 0
    445a:	40 e0       	ldi	r20, 0x00	; 0
    445c:	52 e0       	ldi	r21, 0x02	; 2
    445e:	64 ea       	ldi	r22, 0xA4	; 164
    4460:	72 e0       	ldi	r23, 0x02	; 2
    4462:	8f e7       	ldi	r24, 0x7F	; 127
    4464:	9f e1       	ldi	r25, 0x1F	; 31
    4466:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
	xTaskCreate(System_2,(const portCHAR *)"System_2",512,NULL,0, &xHandleSecond );
    446a:	0f 2e       	mov	r0, r31
    446c:	fd e0       	ldi	r31, 0x0D	; 13
    446e:	ef 2e       	mov	r14, r31
    4470:	f7 e0       	ldi	r31, 0x07	; 7
    4472:	ff 2e       	mov	r15, r31
    4474:	f0 2d       	mov	r31, r0
    4476:	20 e0       	ldi	r18, 0x00	; 0
    4478:	30 e0       	ldi	r19, 0x00	; 0
    447a:	40 e0       	ldi	r20, 0x00	; 0
    447c:	52 e0       	ldi	r21, 0x02	; 2
    447e:	6d ea       	ldi	r22, 0xAD	; 173
    4480:	72 e0       	ldi	r23, 0x02	; 2
    4482:	89 eb       	ldi	r24, 0xB9	; 185
    4484:	9e e1       	ldi	r25, 0x1E	; 30
    4486:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
	xTaskCreate(Defrost,(const portCHAR *)"Defrost",256,NULL,0, NULL );
    448a:	e1 2c       	mov	r14, r1
    448c:	f1 2c       	mov	r15, r1
    448e:	20 e0       	ldi	r18, 0x00	; 0
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	40 e0       	ldi	r20, 0x00	; 0
    4494:	51 e0       	ldi	r21, 0x01	; 1
    4496:	66 eb       	ldi	r22, 0xB6	; 182
    4498:	72 e0       	ldi	r23, 0x02	; 2
    449a:	81 ec       	ldi	r24, 0xC1	; 193
    449c:	9d e1       	ldi	r25, 0x1D	; 29
    449e:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
	//--------------------------------------
	vTaskStartScheduler();
    44a2:	0e 94 56 16 	call	0x2cac	; 0x2cac <vTaskStartScheduler>
}
    44a6:	80 e0       	ldi	r24, 0x00	; 0
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	a2 96       	adiw	r28, 0x22	; 34
    44ac:	0f b6       	in	r0, 0x3f	; 63
    44ae:	f8 94       	cli
    44b0:	de bf       	out	0x3e, r29	; 62
    44b2:	0f be       	out	0x3f, r0	; 63
    44b4:	cd bf       	out	0x3d, r28	; 61
    44b6:	08 95       	ret

000044b8 <__vector_17>:

ISR(TIMER1_COMPA_vect) // timer_compare_a
{
    44b8:	1f 92       	push	r1
    44ba:	0f 92       	push	r0
    44bc:	0f b6       	in	r0, 0x3f	; 63
    44be:	0f 92       	push	r0
    44c0:	11 24       	eor	r1, r1
    44c2:	0b b6       	in	r0, 0x3b	; 59
    44c4:	0f 92       	push	r0
    44c6:	2f 93       	push	r18
    44c8:	3f 93       	push	r19
    44ca:	4f 93       	push	r20
    44cc:	5f 93       	push	r21
    44ce:	6f 93       	push	r22
    44d0:	7f 93       	push	r23
    44d2:	8f 93       	push	r24
    44d4:	9f 93       	push	r25
    44d6:	af 93       	push	r26
    44d8:	bf 93       	push	r27
    44da:	ef 93       	push	r30
    44dc:	ff 93       	push	r31
	
	static BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
    44de:	10 92 00 07 	sts	0x0700, r1	; 0x800700 <xHigherPriorityTaskWoken.3696>
	countTimer++;
    44e2:	80 91 99 0a 	lds	r24, 0x0A99	; 0x800a99 <countTimer>
    44e6:	90 91 9a 0a 	lds	r25, 0x0A9A	; 0x800a9a <countTimer+0x1>
    44ea:	a0 91 9b 0a 	lds	r26, 0x0A9B	; 0x800a9b <countTimer+0x2>
    44ee:	b0 91 9c 0a 	lds	r27, 0x0A9C	; 0x800a9c <countTimer+0x3>
    44f2:	01 96       	adiw	r24, 0x01	; 1
    44f4:	a1 1d       	adc	r26, r1
    44f6:	b1 1d       	adc	r27, r1
    44f8:	80 93 99 0a 	sts	0x0A99, r24	; 0x800a99 <countTimer>
    44fc:	90 93 9a 0a 	sts	0x0A9A, r25	; 0x800a9a <countTimer+0x1>
    4500:	a0 93 9b 0a 	sts	0x0A9B, r26	; 0x800a9b <countTimer+0x2>
    4504:	b0 93 9c 0a 	sts	0x0A9C, r27	; 0x800a9c <countTimer+0x3>
	if(countTimer==7){stop_1_Timer();countTimer=0;xSemaphoreGiveFromISR(xMbBinarySemaphore,&xHigherPriorityTaskWoken);}
    4508:	80 91 99 0a 	lds	r24, 0x0A99	; 0x800a99 <countTimer>
    450c:	90 91 9a 0a 	lds	r25, 0x0A9A	; 0x800a9a <countTimer+0x1>
    4510:	a0 91 9b 0a 	lds	r26, 0x0A9B	; 0x800a9b <countTimer+0x2>
    4514:	b0 91 9c 0a 	lds	r27, 0x0A9C	; 0x800a9c <countTimer+0x3>
    4518:	07 97       	sbiw	r24, 0x07	; 7
    451a:	a1 05       	cpc	r26, r1
    451c:	b1 05       	cpc	r27, r1
    451e:	89 f4       	brne	.+34     	; 0x4542 <__vector_17+0x8a>
    4520:	17 d3       	rcall	.+1582   	; 0x4b50 <stop_1_Timer>
    4522:	10 92 99 0a 	sts	0x0A99, r1	; 0x800a99 <countTimer>
    4526:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <countTimer+0x1>
    452a:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <countTimer+0x2>
    452e:	10 92 9c 0a 	sts	0x0A9C, r1	; 0x800a9c <countTimer+0x3>
    4532:	60 e0       	ldi	r22, 0x00	; 0
    4534:	77 e0       	ldi	r23, 0x07	; 7
    4536:	80 91 83 0a 	lds	r24, 0x0A83	; 0x800a83 <xMbBinarySemaphore>
    453a:	90 91 84 0a 	lds	r25, 0x0A84	; 0x800a84 <xMbBinarySemaphore+0x1>
    453e:	0e 94 c9 0a 	call	0x1592	; 0x1592 <xQueueGiveFromISR>
	//if( xHigherPriorityTaskWoken == pdTRUE )portYIELD();

}
    4542:	ff 91       	pop	r31
    4544:	ef 91       	pop	r30
    4546:	bf 91       	pop	r27
    4548:	af 91       	pop	r26
    454a:	9f 91       	pop	r25
    454c:	8f 91       	pop	r24
    454e:	7f 91       	pop	r23
    4550:	6f 91       	pop	r22
    4552:	5f 91       	pop	r21
    4554:	4f 91       	pop	r20
    4556:	3f 91       	pop	r19
    4558:	2f 91       	pop	r18
    455a:	0f 90       	pop	r0
    455c:	0b be       	out	0x3b, r0	; 59
    455e:	0f 90       	pop	r0
    4560:	0f be       	out	0x3f, r0	; 63
    4562:	0f 90       	pop	r0
    4564:	1f 90       	pop	r1
    4566:	18 95       	reti

00004568 <ADE7758_read24>:
}
long ADE7758_getMaskInterrupts(void){
	return ADE7758_read24(MASK);
}
void ADE7758_setMaskInterrupts(unsigned long data){
	return ADE7758_write24(MASK, data);
    4568:	1f 93       	push	r17
    456a:	cf 93       	push	r28
    456c:	df 93       	push	r29
    456e:	c8 2f       	mov	r28, r24
    4570:	0f b6       	in	r0, 0x3f	; 63
    4572:	f8 94       	cli
    4574:	0f 92       	push	r0
    4576:	84 e0       	ldi	r24, 0x04	; 4
    4578:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <spiSelect>
    457c:	8c 2f       	mov	r24, r28
    457e:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    4582:	80 e0       	ldi	r24, 0x00	; 0
    4584:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    4588:	18 2f       	mov	r17, r24
    458a:	80 e0       	ldi	r24, 0x00	; 0
    458c:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    4590:	c8 2f       	mov	r28, r24
    4592:	80 e0       	ldi	r24, 0x00	; 0
    4594:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    4598:	d8 2f       	mov	r29, r24
    459a:	84 e0       	ldi	r24, 0x04	; 4
    459c:	0e 94 17 14 	call	0x282e	; 0x282e <spiDeselect>
    45a0:	0f 90       	pop	r0
    45a2:	0f be       	out	0x3f, r0	; 63
    45a4:	8c 2f       	mov	r24, r28
    45a6:	90 e0       	ldi	r25, 0x00	; 0
    45a8:	a0 e0       	ldi	r26, 0x00	; 0
    45aa:	b0 e0       	ldi	r27, 0x00	; 0
    45ac:	ba 2f       	mov	r27, r26
    45ae:	a9 2f       	mov	r26, r25
    45b0:	98 2f       	mov	r25, r24
    45b2:	88 27       	eor	r24, r24
    45b4:	a1 2b       	or	r26, r17
    45b6:	bc 01       	movw	r22, r24
    45b8:	cd 01       	movw	r24, r26
    45ba:	6d 2b       	or	r22, r29
    45bc:	df 91       	pop	r29
    45be:	cf 91       	pop	r28
    45c0:	1f 91       	pop	r17
    45c2:	08 95       	ret

000045c4 <ADE7758_write8>:
    45c4:	cf 93       	push	r28
    45c6:	df 93       	push	r29
    45c8:	d8 2f       	mov	r29, r24
    45ca:	c6 2f       	mov	r28, r22
    45cc:	0f b6       	in	r0, 0x3f	; 63
    45ce:	f8 94       	cli
    45d0:	0f 92       	push	r0
    45d2:	84 e0       	ldi	r24, 0x04	; 4
    45d4:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <spiSelect>
    45d8:	8d 2f       	mov	r24, r29
    45da:	80 68       	ori	r24, 0x80	; 128
    45dc:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    45e0:	8c 2f       	mov	r24, r28
    45e2:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    45e6:	84 e0       	ldi	r24, 0x04	; 4
    45e8:	0e 94 17 14 	call	0x282e	; 0x282e <spiDeselect>
    45ec:	0f 90       	pop	r0
    45ee:	0f be       	out	0x3f, r0	; 63
    45f0:	df 91       	pop	r29
    45f2:	cf 91       	pop	r28
    45f4:	08 95       	ret

000045f6 <ADE7758_setOpMode>:
    45f6:	68 2f       	mov	r22, r24
    45f8:	83 e1       	ldi	r24, 0x13	; 19
    45fa:	e4 cf       	rjmp	.-56     	; 0x45c4 <ADE7758_write8>
    45fc:	08 95       	ret

000045fe <ADE7758_setWavMode>:
    45fe:	68 2f       	mov	r22, r24
    4600:	85 e1       	ldi	r24, 0x15	; 21
    4602:	e0 cf       	rjmp	.-64     	; 0x45c4 <ADE7758_write8>
    4604:	08 95       	ret

00004606 <ADE7758_setLcycMode>:
    4606:	68 2f       	mov	r22, r24
    4608:	87 e1       	ldi	r24, 0x17	; 23
    460a:	dc cf       	rjmp	.-72     	; 0x45c4 <ADE7758_write8>
    460c:	08 95       	ret

0000460e <ADE7758_setupDivs>:
    460e:	cf 93       	push	r28
    4610:	df 93       	push	r29
    4612:	d6 2f       	mov	r29, r22
    4614:	c4 2f       	mov	r28, r20
    4616:	68 2f       	mov	r22, r24
    4618:	82 e4       	ldi	r24, 0x42	; 66
    461a:	d4 df       	rcall	.-88     	; 0x45c4 <ADE7758_write8>
    461c:	6d 2f       	mov	r22, r29
    461e:	83 e4       	ldi	r24, 0x43	; 67
    4620:	d1 df       	rcall	.-94     	; 0x45c4 <ADE7758_write8>
    4622:	6c 2f       	mov	r22, r28
    4624:	84 e4       	ldi	r24, 0x44	; 68
    4626:	ce df       	rcall	.-100    	; 0x45c4 <ADE7758_write8>
    4628:	df 91       	pop	r29
    462a:	cf 91       	pop	r28
    462c:	08 95       	ret

0000462e <ADE7758_Init>:
    462e:	88 e0       	ldi	r24, 0x08	; 8
    4630:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <spiSetDataMode>
    4634:	86 e0       	ldi	r24, 0x06	; 6
    4636:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <spiSetClockDivider>
    463a:	81 e0       	ldi	r24, 0x01	; 1
    463c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <spiSetBitOrder>
    4640:	84 e0       	ldi	r24, 0x04	; 4
    4642:	0e 94 81 13 	call	0x2702	; 0x2702 <spiBegin>
    4646:	80 e0       	ldi	r24, 0x00	; 0
    4648:	de df       	rcall	.-68     	; 0x4606 <ADE7758_setLcycMode>
    464a:	60 e0       	ldi	r22, 0x00	; 0
    464c:	83 e2       	ldi	r24, 0x23	; 35
    464e:	ba df       	rcall	.-140    	; 0x45c4 <ADE7758_write8>
    4650:	42 e0       	ldi	r20, 0x02	; 2
    4652:	62 e0       	ldi	r22, 0x02	; 2
    4654:	82 e0       	ldi	r24, 0x02	; 2
    4656:	db df       	rcall	.-74     	; 0x460e <ADE7758_setupDivs>
    4658:	84 e0       	ldi	r24, 0x04	; 4
    465a:	cd df       	rcall	.-102    	; 0x45f6 <ADE7758_setOpMode>
    465c:	80 e1       	ldi	r24, 0x10	; 16
    465e:	cf cf       	rjmp	.-98     	; 0x45fe <ADE7758_setWavMode>
    4660:	08 95       	ret

00004662 <ADE7758_getStatus>:
}
unsigned long ADE7758_getStatus(){
	return ADE7758_read24(STATUS);
    4662:	89 e1       	ldi	r24, 0x19	; 25
    4664:	81 cf       	rjmp	.-254    	; 0x4568 <ADE7758_read24>
}
    4666:	08 95       	ret

00004668 <ADE7758_resetStatus>:
unsigned long ADE7758_resetStatus(){
	return ADE7758_read24(RSTATUS);
    4668:	8a e1       	ldi	r24, 0x1A	; 26
    466a:	7e cf       	rjmp	.-260    	; 0x4568 <ADE7758_read24>
}
    466c:	08 95       	ret

0000466e <Check_Erors>:
#include "Errors.h"

extern  bool def;
int Check_Erors(xCompressor *comp,xEEdata *EElimit)
{
    466e:	4f 92       	push	r4
    4670:	5f 92       	push	r5
    4672:	6f 92       	push	r6
    4674:	7f 92       	push	r7
    4676:	8f 92       	push	r8
    4678:	9f 92       	push	r9
    467a:	af 92       	push	r10
    467c:	bf 92       	push	r11
    467e:	cf 92       	push	r12
    4680:	df 92       	push	r13
    4682:	ef 92       	push	r14
    4684:	ff 92       	push	r15
    4686:	0f 93       	push	r16
    4688:	1f 93       	push	r17
    468a:	cf 93       	push	r28
    468c:	df 93       	push	r29
    468e:	00 d0       	rcall	.+0      	; 0x4690 <Check_Erors+0x22>
    4690:	00 d0       	rcall	.+0      	; 0x4692 <Check_Erors+0x24>
    4692:	cd b7       	in	r28, 0x3d	; 61
    4694:	de b7       	in	r29, 0x3e	; 62
    4696:	9e 83       	std	Y+6, r25	; 0x06
    4698:	8d 83       	std	Y+5, r24	; 0x05
    469a:	8b 01       	movw	r16, r22
		if( comp->Dhw_Temp<-100){return (10+comp->Index);}
    469c:	20 e0       	ldi	r18, 0x00	; 0
    469e:	30 e0       	ldi	r19, 0x00	; 0
    46a0:	48 ec       	ldi	r20, 0xC8	; 200
    46a2:	52 ec       	ldi	r21, 0xC2	; 194
    46a4:	dc 01       	movw	r26, r24
    46a6:	52 96       	adiw	r26, 0x12	; 18
    46a8:	6d 91       	ld	r22, X+
    46aa:	7d 91       	ld	r23, X+
    46ac:	8d 91       	ld	r24, X+
    46ae:	9c 91       	ld	r25, X
    46b0:	55 97       	sbiw	r26, 0x15	; 21
    46b2:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    46b6:	88 23       	and	r24, r24
    46b8:	44 f4       	brge	.+16     	; 0x46ca <Check_Erors+0x5c>
    46ba:	ed 81       	ldd	r30, Y+5	; 0x05
    46bc:	fe 81       	ldd	r31, Y+6	; 0x06
    46be:	e2 59       	subi	r30, 0x92	; 146
    46c0:	ff 4f       	sbci	r31, 0xFF	; 255
    46c2:	80 81       	ld	r24, Z
    46c4:	91 81       	ldd	r25, Z+1	; 0x01
    46c6:	0a 96       	adiw	r24, 0x0a	; 10
    46c8:	21 c2       	rjmp	.+1090   	; 0x4b0c <Check_Erors+0x49e>
		else if(comp->Bac_Temp<-100) {return (20+comp->Index);}
    46ca:	ad 81       	ldd	r26, Y+5	; 0x05
    46cc:	be 81       	ldd	r27, Y+6	; 0x06
    46ce:	56 96       	adiw	r26, 0x16	; 22
    46d0:	cd 90       	ld	r12, X+
    46d2:	dd 90       	ld	r13, X+
    46d4:	ed 90       	ld	r14, X+
    46d6:	fc 90       	ld	r15, X
    46d8:	59 97       	sbiw	r26, 0x19	; 25
    46da:	20 e0       	ldi	r18, 0x00	; 0
    46dc:	30 e0       	ldi	r19, 0x00	; 0
    46de:	48 ec       	ldi	r20, 0xC8	; 200
    46e0:	52 ec       	ldi	r21, 0xC2	; 194
    46e2:	c7 01       	movw	r24, r14
    46e4:	b6 01       	movw	r22, r12
    46e6:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    46ea:	88 23       	and	r24, r24
    46ec:	44 f4       	brge	.+16     	; 0x46fe <Check_Erors+0x90>
    46ee:	ed 81       	ldd	r30, Y+5	; 0x05
    46f0:	fe 81       	ldd	r31, Y+6	; 0x06
    46f2:	e2 59       	subi	r30, 0x92	; 146
    46f4:	ff 4f       	sbci	r31, 0xFF	; 255
    46f6:	80 81       	ld	r24, Z
    46f8:	91 81       	ldd	r25, Z+1	; 0x01
    46fa:	44 96       	adiw	r24, 0x14	; 20
    46fc:	07 c2       	rjmp	.+1038   	; 0x4b0c <Check_Erors+0x49e>
		else if (comp->Heat_Out<-100) {return (30+comp->Index);}
    46fe:	ad 81       	ldd	r26, Y+5	; 0x05
    4700:	be 81       	ldd	r27, Y+6	; 0x06
    4702:	9a 96       	adiw	r26, 0x2a	; 42
    4704:	4d 90       	ld	r4, X+
    4706:	5d 90       	ld	r5, X+
    4708:	6d 90       	ld	r6, X+
    470a:	7c 90       	ld	r7, X
    470c:	9d 97       	sbiw	r26, 0x2d	; 45
    470e:	20 e0       	ldi	r18, 0x00	; 0
    4710:	30 e0       	ldi	r19, 0x00	; 0
    4712:	48 ec       	ldi	r20, 0xC8	; 200
    4714:	52 ec       	ldi	r21, 0xC2	; 194
    4716:	c3 01       	movw	r24, r6
    4718:	b2 01       	movw	r22, r4
    471a:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    471e:	88 23       	and	r24, r24
    4720:	44 f4       	brge	.+16     	; 0x4732 <Check_Erors+0xc4>
    4722:	ed 81       	ldd	r30, Y+5	; 0x05
    4724:	fe 81       	ldd	r31, Y+6	; 0x06
    4726:	e2 59       	subi	r30, 0x92	; 146
    4728:	ff 4f       	sbci	r31, 0xFF	; 255
    472a:	80 81       	ld	r24, Z
    472c:	91 81       	ldd	r25, Z+1	; 0x01
    472e:	4e 96       	adiw	r24, 0x1e	; 30
    4730:	ed c1       	rjmp	.+986    	; 0x4b0c <Check_Erors+0x49e>
		else if (comp->Heat_In<-100){return (40+comp->Index);}
    4732:	ad 81       	ldd	r26, Y+5	; 0x05
    4734:	be 81       	ldd	r27, Y+6	; 0x06
    4736:	9e 96       	adiw	r26, 0x2e	; 46
    4738:	8d 90       	ld	r8, X+
    473a:	9d 90       	ld	r9, X+
    473c:	ad 90       	ld	r10, X+
    473e:	bc 90       	ld	r11, X
    4740:	d1 97       	sbiw	r26, 0x31	; 49
    4742:	20 e0       	ldi	r18, 0x00	; 0
    4744:	30 e0       	ldi	r19, 0x00	; 0
    4746:	48 ec       	ldi	r20, 0xC8	; 200
    4748:	52 ec       	ldi	r21, 0xC2	; 194
    474a:	c5 01       	movw	r24, r10
    474c:	b4 01       	movw	r22, r8
    474e:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    4752:	88 23       	and	r24, r24
    4754:	44 f4       	brge	.+16     	; 0x4766 <Check_Erors+0xf8>
    4756:	ed 81       	ldd	r30, Y+5	; 0x05
    4758:	fe 81       	ldd	r31, Y+6	; 0x06
    475a:	e2 59       	subi	r30, 0x92	; 146
    475c:	ff 4f       	sbci	r31, 0xFF	; 255
    475e:	80 81       	ld	r24, Z
    4760:	91 81       	ldd	r25, Z+1	; 0x01
    4762:	88 96       	adiw	r24, 0x28	; 40
    4764:	d3 c1       	rjmp	.+934    	; 0x4b0c <Check_Erors+0x49e>
		else if(comp->Src_In<-100) {return (50+comp->Index);}
    4766:	20 e0       	ldi	r18, 0x00	; 0
    4768:	30 e0       	ldi	r19, 0x00	; 0
    476a:	48 ec       	ldi	r20, 0xC8	; 200
    476c:	52 ec       	ldi	r21, 0xC2	; 194
    476e:	ad 81       	ldd	r26, Y+5	; 0x05
    4770:	be 81       	ldd	r27, Y+6	; 0x06
    4772:	d2 96       	adiw	r26, 0x32	; 50
    4774:	6d 91       	ld	r22, X+
    4776:	7d 91       	ld	r23, X+
    4778:	8d 91       	ld	r24, X+
    477a:	9c 91       	ld	r25, X
    477c:	d5 97       	sbiw	r26, 0x35	; 53
    477e:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    4782:	88 23       	and	r24, r24
    4784:	44 f4       	brge	.+16     	; 0x4796 <Check_Erors+0x128>
    4786:	ed 81       	ldd	r30, Y+5	; 0x05
    4788:	fe 81       	ldd	r31, Y+6	; 0x06
    478a:	e2 59       	subi	r30, 0x92	; 146
    478c:	ff 4f       	sbci	r31, 0xFF	; 255
    478e:	80 81       	ld	r24, Z
    4790:	91 81       	ldd	r25, Z+1	; 0x01
    4792:	c2 96       	adiw	r24, 0x32	; 50
    4794:	bb c1       	rjmp	.+886    	; 0x4b0c <Check_Erors+0x49e>
		else if (comp->Src_Out<-100) {return (60+comp->Index);}
    4796:	20 e0       	ldi	r18, 0x00	; 0
    4798:	30 e0       	ldi	r19, 0x00	; 0
    479a:	48 ec       	ldi	r20, 0xC8	; 200
    479c:	52 ec       	ldi	r21, 0xC2	; 194
    479e:	ad 81       	ldd	r26, Y+5	; 0x05
    47a0:	be 81       	ldd	r27, Y+6	; 0x06
    47a2:	d6 96       	adiw	r26, 0x36	; 54
    47a4:	6d 91       	ld	r22, X+
    47a6:	7d 91       	ld	r23, X+
    47a8:	8d 91       	ld	r24, X+
    47aa:	9c 91       	ld	r25, X
    47ac:	d9 97       	sbiw	r26, 0x39	; 57
    47ae:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    47b2:	88 23       	and	r24, r24
    47b4:	44 f4       	brge	.+16     	; 0x47c6 <Check_Erors+0x158>
    47b6:	ed 81       	ldd	r30, Y+5	; 0x05
    47b8:	fe 81       	ldd	r31, Y+6	; 0x06
    47ba:	e2 59       	subi	r30, 0x92	; 146
    47bc:	ff 4f       	sbci	r31, 0xFF	; 255
    47be:	80 81       	ld	r24, Z
    47c0:	91 81       	ldd	r25, Z+1	; 0x01
    47c2:	cc 96       	adiw	r24, 0x3c	; 60
    47c4:	a3 c1       	rjmp	.+838    	; 0x4b0c <Check_Erors+0x49e>
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
    47c6:	ad 81       	ldd	r26, Y+5	; 0x05
    47c8:	be 81       	ldd	r27, Y+6	; 0x06
    47ca:	da 96       	adiw	r26, 0x3a	; 58
    47cc:	8d 91       	ld	r24, X+
    47ce:	9d 91       	ld	r25, X+
    47d0:	0d 90       	ld	r0, X+
    47d2:	bc 91       	ld	r27, X
    47d4:	a0 2d       	mov	r26, r0
    47d6:	89 83       	std	Y+1, r24	; 0x01
    47d8:	9a 83       	std	Y+2, r25	; 0x02
    47da:	ab 83       	std	Y+3, r26	; 0x03
    47dc:	bc 83       	std	Y+4, r27	; 0x04
    47de:	20 e0       	ldi	r18, 0x00	; 0
    47e0:	30 e0       	ldi	r19, 0x00	; 0
    47e2:	48 ec       	ldi	r20, 0xC8	; 200
    47e4:	52 ec       	ldi	r21, 0xC2	; 194
    47e6:	bc 01       	movw	r22, r24
    47e8:	cd 01       	movw	r24, r26
    47ea:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    47ee:	88 23       	and	r24, r24
    47f0:	4c f4       	brge	.+18     	; 0x4804 <Check_Erors+0x196>
    47f2:	ed 81       	ldd	r30, Y+5	; 0x05
    47f4:	fe 81       	ldd	r31, Y+6	; 0x06
    47f6:	e2 59       	subi	r30, 0x92	; 146
    47f8:	ff 4f       	sbci	r31, 0xFF	; 255
    47fa:	80 81       	ld	r24, Z
    47fc:	91 81       	ldd	r25, Z+1	; 0x01
    47fe:	8a 5b       	subi	r24, 0xBA	; 186
    4800:	9f 4f       	sbci	r25, 0xFF	; 255
    4802:	84 c1       	rjmp	.+776    	; 0x4b0c <Check_Erors+0x49e>
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
    4804:	20 e0       	ldi	r18, 0x00	; 0
    4806:	30 e0       	ldi	r19, 0x00	; 0
    4808:	48 ec       	ldi	r20, 0xC8	; 200
    480a:	52 ec       	ldi	r21, 0xC2	; 194
    480c:	ed 81       	ldd	r30, Y+5	; 0x05
    480e:	fe 81       	ldd	r31, Y+6	; 0x06
    4810:	fe 96       	adiw	r30, 0x3e	; 62
    4812:	60 81       	ld	r22, Z
    4814:	71 81       	ldd	r23, Z+1	; 0x01
    4816:	82 81       	ldd	r24, Z+2	; 0x02
    4818:	93 81       	ldd	r25, Z+3	; 0x03
    481a:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    481e:	88 23       	and	r24, r24
    4820:	54 f4       	brge	.+20     	; 0x4836 <Check_Erors+0x1c8>
    4822:	8d 81       	ldd	r24, Y+5	; 0x05
    4824:	9e 81       	ldd	r25, Y+6	; 0x06
    4826:	82 59       	subi	r24, 0x92	; 146
    4828:	9f 4f       	sbci	r25, 0xFF	; 255
    482a:	dc 01       	movw	r26, r24
    482c:	8d 91       	ld	r24, X+
    482e:	9c 91       	ld	r25, X
    4830:	80 5b       	subi	r24, 0xB0	; 176
    4832:	9f 4f       	sbci	r25, 0xFF	; 255
    4834:	6b c1       	rjmp	.+726    	; 0x4b0c <Check_Erors+0x49e>
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
    4836:	20 e0       	ldi	r18, 0x00	; 0
    4838:	30 e0       	ldi	r19, 0x00	; 0
    483a:	48 ec       	ldi	r20, 0xC8	; 200
    483c:	52 ec       	ldi	r21, 0xC2	; 194
    483e:	ed 81       	ldd	r30, Y+5	; 0x05
    4840:	fe 81       	ldd	r31, Y+6	; 0x06
    4842:	ee 5b       	subi	r30, 0xBE	; 190
    4844:	ff 4f       	sbci	r31, 0xFF	; 255
    4846:	60 81       	ld	r22, Z
    4848:	71 81       	ldd	r23, Z+1	; 0x01
    484a:	82 81       	ldd	r24, Z+2	; 0x02
    484c:	93 81       	ldd	r25, Z+3	; 0x03
    484e:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    4852:	88 23       	and	r24, r24
    4854:	4c f4       	brge	.+18     	; 0x4868 <Check_Erors+0x1fa>
    4856:	ed 81       	ldd	r30, Y+5	; 0x05
    4858:	fe 81       	ldd	r31, Y+6	; 0x06
    485a:	e2 59       	subi	r30, 0x92	; 146
    485c:	ff 4f       	sbci	r31, 0xFF	; 255
    485e:	80 81       	ld	r24, Z
    4860:	91 81       	ldd	r25, Z+1	; 0x01
    4862:	86 5a       	subi	r24, 0xA6	; 166
    4864:	9f 4f       	sbci	r25, 0xFF	; 255
    4866:	52 c1       	rjmp	.+676    	; 0x4b0c <Check_Erors+0x49e>
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
    4868:	4a 9b       	sbis	0x09, 2	; 9
    486a:	10 c0       	rjmp	.+32     	; 0x488c <Check_Erors+0x21e>
    486c:	ad 81       	ldd	r26, Y+5	; 0x05
    486e:	be 81       	ldd	r27, Y+6	; 0x06
    4870:	1f 96       	adiw	r26, 0x0f	; 15
    4872:	8c 91       	ld	r24, X
    4874:	1f 97       	sbiw	r26, 0x0f	; 15
    4876:	81 30       	cpi	r24, 0x01	; 1
    4878:	49 f4       	brne	.+18     	; 0x488c <Check_Erors+0x21e>
    487a:	fd 01       	movw	r30, r26
    487c:	e2 59       	subi	r30, 0x92	; 146
    487e:	ff 4f       	sbci	r31, 0xFF	; 255
    4880:	80 81       	ld	r24, Z
    4882:	91 81       	ldd	r25, Z+1	; 0x01
    4884:	01 97       	sbiw	r24, 0x01	; 1
    4886:	09 f0       	breq	.+2      	; 0x488a <Check_Erors+0x21c>
    4888:	30 c1       	rjmp	.+608    	; 0x4aea <Check_Erors+0x47c>
    488a:	0e c1       	rjmp	.+540    	; 0x4aa8 <Check_Erors+0x43a>
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    488c:	4b 9b       	sbis	0x09, 3	; 9
    488e:	10 c0       	rjmp	.+32     	; 0x48b0 <Check_Erors+0x242>
    4890:	ed 81       	ldd	r30, Y+5	; 0x05
    4892:	fe 81       	ldd	r31, Y+6	; 0x06
    4894:	87 85       	ldd	r24, Z+15	; 0x0f
    4896:	81 30       	cpi	r24, 0x01	; 1
    4898:	09 f0       	breq	.+2      	; 0x489c <Check_Erors+0x22e>
    489a:	35 c1       	rjmp	.+618    	; 0x4b06 <Check_Erors+0x498>
    489c:	ed 81       	ldd	r30, Y+5	; 0x05
    489e:	fe 81       	ldd	r31, Y+6	; 0x06
    48a0:	e2 59       	subi	r30, 0x92	; 146
    48a2:	ff 4f       	sbci	r31, 0xFF	; 255
    48a4:	80 81       	ld	r24, Z
    48a6:	91 81       	ldd	r25, Z+1	; 0x01
    48a8:	02 97       	sbiw	r24, 0x02	; 2
    48aa:	09 f0       	breq	.+2      	; 0x48ae <Check_Erors+0x240>
    48ac:	21 c1       	rjmp	.+578    	; 0x4af0 <Check_Erors+0x482>
    48ae:	ff c0       	rjmp	.+510    	; 0x4aae <Check_Erors+0x440>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    48b0:	65 9b       	sbis	0x0c, 5	; 12
    48b2:	11 c0       	rjmp	.+34     	; 0x48d6 <Check_Erors+0x268>
    48b4:	ad 81       	ldd	r26, Y+5	; 0x05
    48b6:	be 81       	ldd	r27, Y+6	; 0x06
    48b8:	1f 96       	adiw	r26, 0x0f	; 15
    48ba:	8c 91       	ld	r24, X
    48bc:	81 30       	cpi	r24, 0x01	; 1
    48be:	09 f0       	breq	.+2      	; 0x48c2 <Check_Erors+0x254>
    48c0:	1a c1       	rjmp	.+564    	; 0x4af6 <Check_Erors+0x488>
    48c2:	ed 81       	ldd	r30, Y+5	; 0x05
    48c4:	fe 81       	ldd	r31, Y+6	; 0x06
    48c6:	e2 59       	subi	r30, 0x92	; 146
    48c8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ca:	80 81       	ld	r24, Z
    48cc:	91 81       	ldd	r25, Z+1	; 0x01
    48ce:	01 97       	sbiw	r24, 0x01	; 1
    48d0:	09 f0       	breq	.+2      	; 0x48d4 <Check_Erors+0x266>
    48d2:	13 c1       	rjmp	.+550    	; 0x4afa <Check_Erors+0x48c>
    48d4:	ef c0       	rjmp	.+478    	; 0x4ab4 <Check_Erors+0x446>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    48d6:	65 9b       	sbis	0x0c, 5	; 12
    48d8:	0e c0       	rjmp	.+28     	; 0x48f6 <Check_Erors+0x288>
    48da:	ed 81       	ldd	r30, Y+5	; 0x05
    48dc:	fe 81       	ldd	r31, Y+6	; 0x06
    48de:	87 85       	ldd	r24, Z+15	; 0x0f
    48e0:	81 30       	cpi	r24, 0x01	; 1
    48e2:	49 f4       	brne	.+18     	; 0x48f6 <Check_Erors+0x288>
    48e4:	ed 81       	ldd	r30, Y+5	; 0x05
    48e6:	fe 81       	ldd	r31, Y+6	; 0x06
    48e8:	e2 59       	subi	r30, 0x92	; 146
    48ea:	ff 4f       	sbci	r31, 0xFF	; 255
    48ec:	80 81       	ld	r24, Z
    48ee:	91 81       	ldd	r25, Z+1	; 0x01
    48f0:	02 97       	sbiw	r24, 0x02	; 2
    48f2:	09 f4       	brne	.+2      	; 0x48f6 <Check_Erors+0x288>
    48f4:	e2 c0       	rjmp	.+452    	; 0x4aba <Check_Erors+0x44c>
		else if ( comp->High_Press > 0){return (140+comp->Index);}
    48f6:	20 e0       	ldi	r18, 0x00	; 0
    48f8:	30 e0       	ldi	r19, 0x00	; 0
    48fa:	a9 01       	movw	r20, r18
    48fc:	ad 81       	ldd	r26, Y+5	; 0x05
    48fe:	be 81       	ldd	r27, Y+6	; 0x06
    4900:	5a 96       	adiw	r26, 0x1a	; 26
    4902:	6d 91       	ld	r22, X+
    4904:	7d 91       	ld	r23, X+
    4906:	8d 91       	ld	r24, X+
    4908:	9c 91       	ld	r25, X
    490a:	5d 97       	sbiw	r26, 0x1d	; 29
    490c:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    4910:	18 16       	cp	r1, r24
    4912:	4c f4       	brge	.+18     	; 0x4926 <Check_Erors+0x2b8>
    4914:	ed 81       	ldd	r30, Y+5	; 0x05
    4916:	fe 81       	ldd	r31, Y+6	; 0x06
    4918:	e2 59       	subi	r30, 0x92	; 146
    491a:	ff 4f       	sbci	r31, 0xFF	; 255
    491c:	80 81       	ld	r24, Z
    491e:	91 81       	ldd	r25, Z+1	; 0x01
    4920:	84 57       	subi	r24, 0x74	; 116
    4922:	9f 4f       	sbci	r25, 0xFF	; 255
    4924:	f3 c0       	rjmp	.+486    	; 0x4b0c <Check_Erors+0x49e>
		else if ( comp->Low_Press>0 ) {return (120+comp->Index);}
    4926:	20 e0       	ldi	r18, 0x00	; 0
    4928:	30 e0       	ldi	r19, 0x00	; 0
    492a:	a9 01       	movw	r20, r18
    492c:	ad 81       	ldd	r26, Y+5	; 0x05
    492e:	be 81       	ldd	r27, Y+6	; 0x06
    4930:	5e 96       	adiw	r26, 0x1e	; 30
    4932:	6d 91       	ld	r22, X+
    4934:	7d 91       	ld	r23, X+
    4936:	8d 91       	ld	r24, X+
    4938:	9c 91       	ld	r25, X
    493a:	91 97       	sbiw	r26, 0x21	; 33
    493c:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    4940:	18 16       	cp	r1, r24
    4942:	4c f4       	brge	.+18     	; 0x4956 <Check_Erors+0x2e8>
    4944:	ed 81       	ldd	r30, Y+5	; 0x05
    4946:	fe 81       	ldd	r31, Y+6	; 0x06
    4948:	e2 59       	subi	r30, 0x92	; 146
    494a:	ff 4f       	sbci	r31, 0xFF	; 255
    494c:	80 81       	ld	r24, Z
    494e:	91 81       	ldd	r25, Z+1	; 0x01
    4950:	88 58       	subi	r24, 0x88	; 136
    4952:	9f 4f       	sbci	r25, 0xFF	; 255
    4954:	db c0       	rjmp	.+438    	; 0x4b0c <Check_Erors+0x49e>
		else if ( comp->Bac_Temp > EElimit->HEAT_Max && comp->Heating==1){return (160+comp->Index);}
    4956:	d8 01       	movw	r26, r16
    4958:	19 96       	adiw	r26, 0x09	; 9
    495a:	6c 91       	ld	r22, X
    495c:	70 e0       	ldi	r23, 0x00	; 0
    495e:	80 e0       	ldi	r24, 0x00	; 0
    4960:	90 e0       	ldi	r25, 0x00	; 0
    4962:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    4966:	9b 01       	movw	r18, r22
    4968:	ac 01       	movw	r20, r24
    496a:	c7 01       	movw	r24, r14
    496c:	b6 01       	movw	r22, r12
    496e:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    4972:	18 16       	cp	r1, r24
    4974:	64 f4       	brge	.+24     	; 0x498e <Check_Erors+0x320>
    4976:	ed 81       	ldd	r30, Y+5	; 0x05
    4978:	fe 81       	ldd	r31, Y+6	; 0x06
    497a:	82 81       	ldd	r24, Z+2	; 0x02
    497c:	88 23       	and	r24, r24
    497e:	39 f0       	breq	.+14     	; 0x498e <Check_Erors+0x320>
    4980:	e2 59       	subi	r30, 0x92	; 146
    4982:	ff 4f       	sbci	r31, 0xFF	; 255
    4984:	80 81       	ld	r24, Z
    4986:	91 81       	ldd	r25, Z+1	; 0x01
    4988:	80 56       	subi	r24, 0x60	; 96
    498a:	9f 4f       	sbci	r25, 0xFF	; 255
    498c:	bf c0       	rjmp	.+382    	; 0x4b0c <Check_Erors+0x49e>
		//else if ( comp->Bac_Temp < EElimit->Cool_Min && comp->Cooling==1){return (170+comp->Index);}
		//else if ( comp->SuperHeat < EElimit->MinSuperheat && comp->checkTrv) {return (180+comp->Index);}
		//else if ( comp->SuperHeat > EElimit->MaxSuperheat && comp->checkTrv && !comp->def) {return (190+comp->Index);}
		//else if ( comp->SuperCool < EElimit->MinSupercool && comp->checkTrv){return (200+comp->Index);}
		//else if ( comp->SuperCool > EElimit->MaxSupercool && comp->checkTrv && !comp->def){return (210+comp->Index);}
		else if ( comp->Ex_Comp > EElimit->ExhaustMax){return 220;}	
    498e:	d8 01       	movw	r26, r16
    4990:	1e 96       	adiw	r26, 0x0e	; 14
    4992:	6c 91       	ld	r22, X
    4994:	70 e0       	ldi	r23, 0x00	; 0
    4996:	80 e0       	ldi	r24, 0x00	; 0
    4998:	90 e0       	ldi	r25, 0x00	; 0
    499a:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    499e:	9b 01       	movw	r18, r22
    49a0:	ac 01       	movw	r20, r24
    49a2:	69 81       	ldd	r22, Y+1	; 0x01
    49a4:	7a 81       	ldd	r23, Y+2	; 0x02
    49a6:	8b 81       	ldd	r24, Y+3	; 0x03
    49a8:	9c 81       	ldd	r25, Y+4	; 0x04
    49aa:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    49ae:	18 16       	cp	r1, r24
    49b0:	0c f4       	brge	.+2      	; 0x49b4 <Check_Erors+0x346>
    49b2:	86 c0       	rjmp	.+268    	; 0x4ac0 <Check_Erors+0x452>
		//else if (abs(comp->Src_In - comp->Src_Out) > EElimit->Delta_source_max && comp->checkErrors && EEpromData.AireToWater==0) {return (230+comp->Index);}
		//else if (abs(comp->Src_In - comp->Src_Out) <  EElimit->Delta_source_min && comp->checkErrors && EEpromData.AireToWater==0) {return (240+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out)  > EElimit->Delta_heating_max && comp->checkErrors) {return (250+comp->Index);}
    49b4:	a3 01       	movw	r20, r6
    49b6:	92 01       	movw	r18, r4
    49b8:	c5 01       	movw	r24, r10
    49ba:	b4 01       	movw	r22, r8
    49bc:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    49c0:	0e 94 49 54 	call	0xa892	; 0xa892 <__fixsfsi>
    49c4:	9b 01       	movw	r18, r22
    49c6:	77 23       	and	r23, r23
    49c8:	24 f4       	brge	.+8      	; 0x49d2 <Check_Erors+0x364>
    49ca:	22 27       	eor	r18, r18
    49cc:	33 27       	eor	r19, r19
    49ce:	26 1b       	sub	r18, r22
    49d0:	37 0b       	sbc	r19, r23
    49d2:	c9 01       	movw	r24, r18
    49d4:	f8 01       	movw	r30, r16
    49d6:	24 89       	ldd	r18, Z+20	; 0x14
    49d8:	30 e0       	ldi	r19, 0x00	; 0
    49da:	28 17       	cp	r18, r24
    49dc:	39 07       	cpc	r19, r25
    49de:	74 f4       	brge	.+28     	; 0x49fc <Check_Erors+0x38e>
    49e0:	ad 81       	ldd	r26, Y+5	; 0x05
    49e2:	be 81       	ldd	r27, Y+6	; 0x06
    49e4:	15 96       	adiw	r26, 0x05	; 5
    49e6:	8c 91       	ld	r24, X
    49e8:	15 97       	sbiw	r26, 0x05	; 5
    49ea:	88 23       	and	r24, r24
    49ec:	d9 f0       	breq	.+54     	; 0x4a24 <Check_Erors+0x3b6>
    49ee:	a2 59       	subi	r26, 0x92	; 146
    49f0:	bf 4f       	sbci	r27, 0xFF	; 255
    49f2:	8d 91       	ld	r24, X+
    49f4:	9c 91       	ld	r25, X
    49f6:	86 50       	subi	r24, 0x06	; 6
    49f8:	9f 4f       	sbci	r25, 0xFF	; 255
    49fa:	88 c0       	rjmp	.+272    	; 0x4b0c <Check_Erors+0x49e>
		else if (abs(comp->Heat_In - comp->Heat_Out) < EElimit->Delta_heating_min &&  comp->checkErrors) {return (260+comp->Index);} 
    49fc:	f8 01       	movw	r30, r16
    49fe:	23 89       	ldd	r18, Z+19	; 0x13
    4a00:	30 e0       	ldi	r19, 0x00	; 0
    4a02:	82 17       	cp	r24, r18
    4a04:	93 07       	cpc	r25, r19
    4a06:	74 f4       	brge	.+28     	; 0x4a24 <Check_Erors+0x3b6>
    4a08:	ad 81       	ldd	r26, Y+5	; 0x05
    4a0a:	be 81       	ldd	r27, Y+6	; 0x06
    4a0c:	15 96       	adiw	r26, 0x05	; 5
    4a0e:	8c 91       	ld	r24, X
    4a10:	15 97       	sbiw	r26, 0x05	; 5
    4a12:	88 23       	and	r24, r24
    4a14:	39 f0       	breq	.+14     	; 0x4a24 <Check_Erors+0x3b6>
    4a16:	a2 59       	subi	r26, 0x92	; 146
    4a18:	bf 4f       	sbci	r27, 0xFF	; 255
    4a1a:	8d 91       	ld	r24, X+
    4a1c:	9c 91       	ld	r25, X
    4a1e:	8c 5f       	subi	r24, 0xFC	; 252
    4a20:	9e 4f       	sbci	r25, 0xFE	; 254
    4a22:	74 c0       	rjmp	.+232    	; 0x4b0c <Check_Erors+0x49e>
		else if (!(ADE7758_getStatus() & ZXA) && EElimit->Power_380==1 && comp->Index==1){return 271;} // ADE7758_resetStatus();
    4a24:	1e de       	rcall	.-964    	; 0x4662 <ADE7758_getStatus>
    4a26:	71 fd       	sbrc	r23, 1
    4a28:	0d c0       	rjmp	.+26     	; 0x4a44 <Check_Erors+0x3d6>
    4a2a:	f8 01       	movw	r30, r16
    4a2c:	81 a5       	ldd	r24, Z+41	; 0x29
    4a2e:	81 30       	cpi	r24, 0x01	; 1
    4a30:	49 f4       	brne	.+18     	; 0x4a44 <Check_Erors+0x3d6>
    4a32:	ed 81       	ldd	r30, Y+5	; 0x05
    4a34:	fe 81       	ldd	r31, Y+6	; 0x06
    4a36:	e2 59       	subi	r30, 0x92	; 146
    4a38:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3a:	80 81       	ld	r24, Z
    4a3c:	91 81       	ldd	r25, Z+1	; 0x01
    4a3e:	01 97       	sbiw	r24, 0x01	; 1
    4a40:	09 f4       	brne	.+2      	; 0x4a44 <Check_Erors+0x3d6>
		else if (!(ADE7758_getStatus() & ZXB) && EElimit->Power_380==1 && comp->Index==1){return 281;}//ADE7758_resetStatus();
    4a42:	41 c0       	rjmp	.+130    	; 0x4ac6 <Check_Erors+0x458>
    4a44:	0e de       	rcall	.-996    	; 0x4662 <ADE7758_getStatus>
    4a46:	72 fd       	sbrc	r23, 2
    4a48:	0d c0       	rjmp	.+26     	; 0x4a64 <Check_Erors+0x3f6>
    4a4a:	d8 01       	movw	r26, r16
    4a4c:	99 96       	adiw	r26, 0x29	; 41
    4a4e:	8c 91       	ld	r24, X
    4a50:	81 30       	cpi	r24, 0x01	; 1
    4a52:	41 f4       	brne	.+16     	; 0x4a64 <Check_Erors+0x3f6>
    4a54:	ed 81       	ldd	r30, Y+5	; 0x05
    4a56:	fe 81       	ldd	r31, Y+6	; 0x06
    4a58:	e2 59       	subi	r30, 0x92	; 146
    4a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5c:	80 81       	ld	r24, Z
    4a5e:	91 81       	ldd	r25, Z+1	; 0x01
    4a60:	01 97       	sbiw	r24, 0x01	; 1
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 && comp->Index==1){return 291;}//ADE7758_resetStatus();
    4a62:	a1 f1       	breq	.+104    	; 0x4acc <Check_Erors+0x45e>
    4a64:	fe dd       	rcall	.-1028   	; 0x4662 <ADE7758_getStatus>
    4a66:	73 fd       	sbrc	r23, 3
    4a68:	0c c0       	rjmp	.+24     	; 0x4a82 <Check_Erors+0x414>
    4a6a:	f8 01       	movw	r30, r16
    4a6c:	81 a5       	ldd	r24, Z+41	; 0x29
    4a6e:	81 30       	cpi	r24, 0x01	; 1
    4a70:	41 f4       	brne	.+16     	; 0x4a82 <Check_Erors+0x414>
    4a72:	ed 81       	ldd	r30, Y+5	; 0x05
    4a74:	fe 81       	ldd	r31, Y+6	; 0x06
    4a76:	e2 59       	subi	r30, 0x92	; 146
    4a78:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7a:	80 81       	ld	r24, Z
    4a7c:	91 81       	ldd	r25, Z+1	; 0x01
    4a7e:	01 97       	sbiw	r24, 0x01	; 1
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1 && comp->Index==1){return 301;}//ADE7758_resetStatus();
    4a80:	41 f1       	breq	.+80     	; 0x4ad2 <Check_Erors+0x464>
    4a82:	ef dd       	rcall	.-1058   	; 0x4662 <ADE7758_getStatus>
    4a84:	83 fd       	sbrc	r24, 3
    4a86:	28 c0       	rjmp	.+80     	; 0x4ad8 <Check_Erors+0x46a>
    4a88:	d8 01       	movw	r26, r16
    4a8a:	99 96       	adiw	r26, 0x29	; 41
    4a8c:	8c 91       	ld	r24, X
    4a8e:	81 30       	cpi	r24, 0x01	; 1
    4a90:	31 f5       	brne	.+76     	; 0x4ade <Check_Erors+0x470>
    4a92:	ed 81       	ldd	r30, Y+5	; 0x05
    4a94:	fe 81       	ldd	r31, Y+6	; 0x06
    4a96:	e2 59       	subi	r30, 0x92	; 146
    4a98:	ff 4f       	sbci	r31, 0xFF	; 255
    4a9a:	80 81       	ld	r24, Z
    4a9c:	91 81       	ldd	r25, Z+1	; 0x01
    4a9e:	01 97       	sbiw	r24, 0x01	; 1
    4aa0:	09 f5       	brne	.+66     	; 0x4ae4 <Check_Erors+0x476>
    4aa2:	8d e2       	ldi	r24, 0x2D	; 45
    4aa4:	91 e0       	ldi	r25, 0x01	; 1
    4aa6:	32 c0       	rjmp	.+100    	; 0x4b0c <Check_Erors+0x49e>
		else if (comp->Src_Out<-100) {return (60+comp->Index);}
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
    4aa8:	85 e6       	ldi	r24, 0x65	; 101
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	2f c0       	rjmp	.+94     	; 0x4b0c <Check_Erors+0x49e>
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    4aae:	86 e6       	ldi	r24, 0x66	; 102
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	2c c0       	rjmp	.+88     	; 0x4b0c <Check_Erors+0x49e>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    4ab4:	8f e6       	ldi	r24, 0x6F	; 111
    4ab6:	90 e0       	ldi	r25, 0x00	; 0
    4ab8:	29 c0       	rjmp	.+82     	; 0x4b0c <Check_Erors+0x49e>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    4aba:	80 e7       	ldi	r24, 0x70	; 112
    4abc:	90 e0       	ldi	r25, 0x00	; 0
    4abe:	26 c0       	rjmp	.+76     	; 0x4b0c <Check_Erors+0x49e>
		//else if ( comp->Bac_Temp < EElimit->Cool_Min && comp->Cooling==1){return (170+comp->Index);}
		//else if ( comp->SuperHeat < EElimit->MinSuperheat && comp->checkTrv) {return (180+comp->Index);}
		//else if ( comp->SuperHeat > EElimit->MaxSuperheat && comp->checkTrv && !comp->def) {return (190+comp->Index);}
		//else if ( comp->SuperCool < EElimit->MinSupercool && comp->checkTrv){return (200+comp->Index);}
		//else if ( comp->SuperCool > EElimit->MaxSupercool && comp->checkTrv && !comp->def){return (210+comp->Index);}
		else if ( comp->Ex_Comp > EElimit->ExhaustMax){return 220;}	
    4ac0:	8c ed       	ldi	r24, 0xDC	; 220
    4ac2:	90 e0       	ldi	r25, 0x00	; 0
    4ac4:	23 c0       	rjmp	.+70     	; 0x4b0c <Check_Erors+0x49e>
		//else if (abs(comp->Src_In - comp->Src_Out) > EElimit->Delta_source_max && comp->checkErrors && EEpromData.AireToWater==0) {return (230+comp->Index);}
		//else if (abs(comp->Src_In - comp->Src_Out) <  EElimit->Delta_source_min && comp->checkErrors && EEpromData.AireToWater==0) {return (240+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out)  > EElimit->Delta_heating_max && comp->checkErrors) {return (250+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out) < EElimit->Delta_heating_min &&  comp->checkErrors) {return (260+comp->Index);} 
		else if (!(ADE7758_getStatus() & ZXA) && EElimit->Power_380==1 && comp->Index==1){return 271;} // ADE7758_resetStatus();
    4ac6:	8f e0       	ldi	r24, 0x0F	; 15
    4ac8:	91 e0       	ldi	r25, 0x01	; 1
    4aca:	20 c0       	rjmp	.+64     	; 0x4b0c <Check_Erors+0x49e>
		else if (!(ADE7758_getStatus() & ZXB) && EElimit->Power_380==1 && comp->Index==1){return 281;}//ADE7758_resetStatus();
    4acc:	89 e1       	ldi	r24, 0x19	; 25
    4ace:	91 e0       	ldi	r25, 0x01	; 1
    4ad0:	1d c0       	rjmp	.+58     	; 0x4b0c <Check_Erors+0x49e>
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 && comp->Index==1){return 291;}//ADE7758_resetStatus();
    4ad2:	83 e2       	ldi	r24, 0x23	; 35
    4ad4:	91 e0       	ldi	r25, 0x01	; 1
    4ad6:	1a c0       	rjmp	.+52     	; 0x4b0c <Check_Erors+0x49e>
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1 && comp->Index==1){return 301;}//ADE7758_resetStatus();
		//else if (comp->Src_In > EElimit->Source_Max){return (400+comp->Index);}
		//else if (comp->Src_In < EElimit->Source_Min){return (410+comp->Index);}			
		else {return 0;}
    4ad8:	80 e0       	ldi	r24, 0x00	; 0
    4ada:	90 e0       	ldi	r25, 0x00	; 0
    4adc:	17 c0       	rjmp	.+46     	; 0x4b0c <Check_Erors+0x49e>
    4ade:	80 e0       	ldi	r24, 0x00	; 0
    4ae0:	90 e0       	ldi	r25, 0x00	; 0
    4ae2:	14 c0       	rjmp	.+40     	; 0x4b0c <Check_Erors+0x49e>
    4ae4:	80 e0       	ldi	r24, 0x00	; 0
    4ae6:	90 e0       	ldi	r25, 0x00	; 0
    4ae8:	11 c0       	rjmp	.+34     	; 0x4b0c <Check_Erors+0x49e>
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    4aea:	4b 99       	sbic	0x09, 3	; 9
    4aec:	d7 ce       	rjmp	.-594    	; 0x489c <Check_Erors+0x22e>
    4aee:	08 c0       	rjmp	.+16     	; 0x4b00 <Check_Erors+0x492>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    4af0:	65 99       	sbic	0x0c, 5	; 12
    4af2:	e7 ce       	rjmp	.-562    	; 0x48c2 <Check_Erors+0x254>
    4af4:	f0 ce       	rjmp	.-544    	; 0x48d6 <Check_Erors+0x268>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    4af6:	8c b1       	in	r24, 0x0c	; 12
    4af8:	fe ce       	rjmp	.-516    	; 0x48f6 <Check_Erors+0x288>
    4afa:	65 99       	sbic	0x0c, 5	; 12
    4afc:	f3 ce       	rjmp	.-538    	; 0x48e4 <Check_Erors+0x276>
    4afe:	fb ce       	rjmp	.-522    	; 0x48f6 <Check_Erors+0x288>
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    4b00:	65 99       	sbic	0x0c, 5	; 12
    4b02:	df ce       	rjmp	.-578    	; 0x48c2 <Check_Erors+0x254>
    4b04:	e8 ce       	rjmp	.-560    	; 0x48d6 <Check_Erors+0x268>
    4b06:	65 99       	sbic	0x0c, 5	; 12
    4b08:	f6 cf       	rjmp	.-20     	; 0x4af6 <Check_Erors+0x488>
    4b0a:	e5 ce       	rjmp	.-566    	; 0x48d6 <Check_Erors+0x268>
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 && comp->Index==1){return 291;}//ADE7758_resetStatus();
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1 && comp->Index==1){return 301;}//ADE7758_resetStatus();
		//else if (comp->Src_In > EElimit->Source_Max){return (400+comp->Index);}
		//else if (comp->Src_In < EElimit->Source_Min){return (410+comp->Index);}			
		else {return 0;}
    4b0c:	26 96       	adiw	r28, 0x06	; 6
    4b0e:	0f b6       	in	r0, 0x3f	; 63
    4b10:	f8 94       	cli
    4b12:	de bf       	out	0x3e, r29	; 62
    4b14:	0f be       	out	0x3f, r0	; 63
    4b16:	cd bf       	out	0x3d, r28	; 61
    4b18:	df 91       	pop	r29
    4b1a:	cf 91       	pop	r28
    4b1c:	1f 91       	pop	r17
    4b1e:	0f 91       	pop	r16
    4b20:	ff 90       	pop	r15
    4b22:	ef 90       	pop	r14
    4b24:	df 90       	pop	r13
    4b26:	cf 90       	pop	r12
    4b28:	bf 90       	pop	r11
    4b2a:	af 90       	pop	r10
    4b2c:	9f 90       	pop	r9
    4b2e:	8f 90       	pop	r8
    4b30:	7f 90       	pop	r7
    4b32:	6f 90       	pop	r6
    4b34:	5f 90       	pop	r5
    4b36:	4f 90       	pop	r4
    4b38:	08 95       	ret

00004b3a <start_1_Timer>:
	stop_1_Timer();
	
}
void start_1_Timer()
{
	TIMSK1 |= (1<<OCIE1A);
    4b3a:	ef e6       	ldi	r30, 0x6F	; 111
    4b3c:	f0 e0       	ldi	r31, 0x00	; 0
    4b3e:	80 81       	ld	r24, Z
    4b40:	82 60       	ori	r24, 0x02	; 2
    4b42:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS10);
    4b44:	e1 e8       	ldi	r30, 0x81	; 129
    4b46:	f0 e0       	ldi	r31, 0x00	; 0
    4b48:	80 81       	ld	r24, Z
    4b4a:	81 60       	ori	r24, 0x01	; 1
    4b4c:	80 83       	st	Z, r24
    4b4e:	08 95       	ret

00004b50 <stop_1_Timer>:
	
}
void stop_1_Timer()
{
	TCCR1B &= ~ (1<<CS10);
    4b50:	e1 e8       	ldi	r30, 0x81	; 129
    4b52:	f0 e0       	ldi	r31, 0x00	; 0
    4b54:	80 81       	ld	r24, Z
    4b56:	8e 7f       	andi	r24, 0xFE	; 254
    4b58:	80 83       	st	Z, r24
	TCNT1=0;
    4b5a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    4b5e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TIMSK1 &= ~( _BV( OCIE1A ) );
    4b62:	ef e6       	ldi	r30, 0x6F	; 111
    4b64:	f0 e0       	ldi	r31, 0x00	; 0
    4b66:	80 81       	ld	r24, Z
    4b68:	8d 7f       	andi	r24, 0xFD	; 253
    4b6a:	80 83       	st	Z, r24
	TIFR1 |= _BV( OCF1A ) ;
    4b6c:	b1 9a       	sbi	0x16, 1	; 22
    4b6e:	08 95       	ret

00004b70 <timer_1_Init>:
void timer_1_Init()
{
	// --- TIMER1_COMPA irq ---
	// selected time = 1562 us (24992 ticks)
	// prescaler = 1 (1 ticks ... 4.096 ms)
	TCCR1B = (1<<WGM12);//|(1<<CS10)
    4b70:	88 e0       	ldi	r24, 0x08	; 8
    4b72:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	OCR1AH = 158;
    4b76:	8e e9       	ldi	r24, 0x9E	; 158
    4b78:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL = 96;
    4b7c:	80 e6       	ldi	r24, 0x60	; 96
    4b7e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	stop_1_Timer();
    4b82:	e6 cf       	rjmp	.-52     	; 0x4b50 <stop_1_Timer>
    4b84:	08 95       	ret

00004b86 <readSysReg>:
	TIMSK1 &= ~( _BV( OCIE1A ) );
	TIFR1 |= _BV( OCF1A ) ;
}

int readSysReg(xCompressor*compPtr,xEEdata *eeprom,uint16_t adress)
{
    4b86:	cf 93       	push	r28
    4b88:	df 93       	push	r29
	int temp;
	switch(adress)
    4b8a:	fa 01       	movw	r30, r20
    4b8c:	3a 97       	sbiw	r30, 0x0a	; 10
    4b8e:	e7 3d       	cpi	r30, 0xD7	; 215
    4b90:	41 e0       	ldi	r20, 0x01	; 1
    4b92:	f4 07       	cpc	r31, r20
    4b94:	08 f0       	brcs	.+2      	; 0x4b98 <readSysReg+0x12>
    4b96:	11 c2       	rjmp	.+1058   	; 0x4fba <readSysReg+0x434>
    4b98:	eb 01       	movw	r28, r22
    4b9a:	dc 01       	movw	r26, r24
    4b9c:	88 27       	eor	r24, r24
    4b9e:	e4 56       	subi	r30, 0x64	; 100
    4ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba2:	8f 4f       	sbci	r24, 0xFF	; 255
    4ba4:	0c 94 b6 59 	jmp	0xb36c	; 0xb36c <__tablejump2__>
	{
		case 11: case 12: temp =  (int)   compPtr->compOn;break;
    4ba8:	1b 96       	adiw	r26, 0x0b	; 11
    4baa:	6c 91       	ld	r22, X
    4bac:	26 2f       	mov	r18, r22
    4bae:	30 e0       	ldi	r19, 0x00	; 0
    4bb0:	04 c2       	rjmp	.+1032   	; 0x4fba <readSysReg+0x434>
		case 21: case 22: temp =   (int)  compPtr->srcPOn;break;
    4bb2:	1f 96       	adiw	r26, 0x0f	; 15
    4bb4:	6c 91       	ld	r22, X
    4bb6:	26 2f       	mov	r18, r22
    4bb8:	30 e0       	ldi	r19, 0x00	; 0
    4bba:	ff c1       	rjmp	.+1022   	; 0x4fba <readSysReg+0x434>
		case 31: case 32: temp =   (int)  compPtr->heatPOn;break;
    4bbc:	1c 96       	adiw	r26, 0x0c	; 12
    4bbe:	6c 91       	ld	r22, X
    4bc0:	26 2f       	mov	r18, r22
    4bc2:	30 e0       	ldi	r19, 0x00	; 0
    4bc4:	fa c1       	rjmp	.+1012   	; 0x4fba <readSysReg+0x434>
		case 41: case 42: temp =   (int)  compPtr->revVOn;break;
    4bc6:	1e 96       	adiw	r26, 0x0e	; 14
    4bc8:	6c 91       	ld	r22, X
    4bca:	26 2f       	mov	r18, r22
    4bcc:	30 e0       	ldi	r19, 0x00	; 0
    4bce:	f5 c1       	rjmp	.+1002   	; 0x4fba <readSysReg+0x434>
		case 51: case 52: temp =   (int)  compPtr->threeWOn;break;
    4bd0:	1d 96       	adiw	r26, 0x0d	; 13
    4bd2:	6c 91       	ld	r22, X
    4bd4:	26 2f       	mov	r18, r22
    4bd6:	30 e0       	ldi	r19, 0x00	; 0
    4bd8:	f0 c1       	rjmp	.+992    	; 0x4fba <readSysReg+0x434>
		case 61: case 62: temp =   (int)  compPtr->Trv_position;break;
    4bda:	a6 59       	subi	r26, 0x96	; 150
    4bdc:	bf 4f       	sbci	r27, 0xFF	; 255
    4bde:	2d 91       	ld	r18, X+
    4be0:	3c 91       	ld	r19, X
    4be2:	eb c1       	rjmp	.+982    	; 0x4fba <readSysReg+0x434>
		
		case 71: case 72: temp =   (int)   (compPtr->Bac_Temp*10);break;
    4be4:	20 e0       	ldi	r18, 0x00	; 0
    4be6:	30 e0       	ldi	r19, 0x00	; 0
    4be8:	40 e2       	ldi	r20, 0x20	; 32
    4bea:	51 e4       	ldi	r21, 0x41	; 65
    4bec:	56 96       	adiw	r26, 0x16	; 22
    4bee:	6d 91       	ld	r22, X+
    4bf0:	7d 91       	ld	r23, X+
    4bf2:	8d 91       	ld	r24, X+
    4bf4:	9c 91       	ld	r25, X
    4bf6:	59 97       	sbiw	r26, 0x19	; 25
    4bf8:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    4bfc:	0e 94 49 54 	call	0xa892	; 0xa892 <__fixsfsi>
    4c00:	9b 01       	movw	r18, r22
    4c02:	db c1       	rjmp	.+950    	; 0x4fba <readSysReg+0x434>
		case 81: case 82:  temp =   (int)  (compPtr->Dhw_Temp*10);break;
    4c04:	20 e0       	ldi	r18, 0x00	; 0
    4c06:	30 e0       	ldi	r19, 0x00	; 0
    4c08:	40 e2       	ldi	r20, 0x20	; 32
    4c0a:	51 e4       	ldi	r21, 0x41	; 65
    4c0c:	52 96       	adiw	r26, 0x12	; 18
    4c0e:	6d 91       	ld	r22, X+
    4c10:	7d 91       	ld	r23, X+
    4c12:	8d 91       	ld	r24, X+
    4c14:	9c 91       	ld	r25, X
    4c16:	55 97       	sbiw	r26, 0x15	; 21
    4c18:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    4c1c:	0e 94 49 54 	call	0xa892	; 0xa892 <__fixsfsi>
    4c20:	9b 01       	movw	r18, r22
    4c22:	cb c1       	rjmp	.+918    	; 0x4fba <readSysReg+0x434>
		case 91:case 92:  temp =  (int)  (compPtr->Src_In*10);break;
    4c24:	20 e0       	ldi	r18, 0x00	; 0
    4c26:	30 e0       	ldi	r19, 0x00	; 0
    4c28:	40 e2       	ldi	r20, 0x20	; 32
    4c2a:	51 e4       	ldi	r21, 0x41	; 65
    4c2c:	d2 96       	adiw	r26, 0x32	; 50
    4c2e:	6d 91       	ld	r22, X+
    4c30:	7d 91       	ld	r23, X+
    4c32:	8d 91       	ld	r24, X+
    4c34:	9c 91       	ld	r25, X
    4c36:	d5 97       	sbiw	r26, 0x35	; 53
    4c38:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    4c3c:	0e 94 49 54 	call	0xa892	; 0xa892 <__fixsfsi>
    4c40:	9b 01       	movw	r18, r22
    4c42:	bb c1       	rjmp	.+886    	; 0x4fba <readSysReg+0x434>
		case 101:case 102:  temp =  (int)  (compPtr->Src_Out*10);break;
    4c44:	20 e0       	ldi	r18, 0x00	; 0
    4c46:	30 e0       	ldi	r19, 0x00	; 0
    4c48:	40 e2       	ldi	r20, 0x20	; 32
    4c4a:	51 e4       	ldi	r21, 0x41	; 65
    4c4c:	d6 96       	adiw	r26, 0x36	; 54
    4c4e:	6d 91       	ld	r22, X+
    4c50:	7d 91       	ld	r23, X+
    4c52:	8d 91       	ld	r24, X+
    4c54:	9c 91       	ld	r25, X
    4c56:	d9 97       	sbiw	r26, 0x39	; 57
    4c58:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    4c5c:	0e 94 49 54 	call	0xa892	; 0xa892 <__fixsfsi>
    4c60:	9b 01       	movw	r18, r22
    4c62:	ab c1       	rjmp	.+854    	; 0x4fba <readSysReg+0x434>
		case 111:case 112: temp =   (int)  (compPtr->error);break;
    4c64:	a4 59       	subi	r26, 0x94	; 148
    4c66:	bf 4f       	sbci	r27, 0xFF	; 255
    4c68:	2d 91       	ld	r18, X+
    4c6a:	3c 91       	ld	r19, X
    4c6c:	a6 c1       	rjmp	.+844    	; 0x4fba <readSysReg+0x434>
		case 121: case 122: temp =   (int)   (compPtr->Cond_Temp*10);break;
    4c6e:	ae 5b       	subi	r26, 0xBE	; 190
    4c70:	bf 4f       	sbci	r27, 0xFF	; 255
    4c72:	20 e0       	ldi	r18, 0x00	; 0
    4c74:	30 e0       	ldi	r19, 0x00	; 0
    4c76:	40 e2       	ldi	r20, 0x20	; 32
    4c78:	51 e4       	ldi	r21, 0x41	; 65
    4c7a:	6d 91       	ld	r22, X+
    4c7c:	7d 91       	ld	r23, X+
    4c7e:	8d 91       	ld	r24, X+
    4c80:	9c 91       	ld	r25, X
    4c82:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    4c86:	0e 94 49 54 	call	0xa892	; 0xa892 <__fixsfsi>
    4c8a:	9b 01       	movw	r18, r22
    4c8c:	96 c1       	rjmp	.+812    	; 0x4fba <readSysReg+0x434>
		case 131:case 132: temp =   (int)  (compPtr->Suc_Comp*10);break;
    4c8e:	de 96       	adiw	r26, 0x3e	; 62
    4c90:	20 e0       	ldi	r18, 0x00	; 0
    4c92:	30 e0       	ldi	r19, 0x00	; 0
    4c94:	40 e2       	ldi	r20, 0x20	; 32
    4c96:	51 e4       	ldi	r21, 0x41	; 65
    4c98:	6d 91       	ld	r22, X+
    4c9a:	7d 91       	ld	r23, X+
    4c9c:	8d 91       	ld	r24, X+
    4c9e:	9c 91       	ld	r25, X
    4ca0:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    4ca4:	0e 94 49 54 	call	0xa892	; 0xa892 <__fixsfsi>
    4ca8:	9b 01       	movw	r18, r22
    4caa:	87 c1       	rjmp	.+782    	; 0x4fba <readSysReg+0x434>
		case 141:case 142: temp =   (int)  (compPtr->SuperCool*10);break;
    4cac:	a6 5b       	subi	r26, 0xB6	; 182
    4cae:	bf 4f       	sbci	r27, 0xFF	; 255
    4cb0:	20 e0       	ldi	r18, 0x00	; 0
    4cb2:	30 e0       	ldi	r19, 0x00	; 0
    4cb4:	40 e2       	ldi	r20, 0x20	; 32
    4cb6:	51 e4       	ldi	r21, 0x41	; 65
    4cb8:	6d 91       	ld	r22, X+
    4cba:	7d 91       	ld	r23, X+
    4cbc:	8d 91       	ld	r24, X+
    4cbe:	9c 91       	ld	r25, X
    4cc0:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    4cc4:	0e 94 49 54 	call	0xa892	; 0xa892 <__fixsfsi>
    4cc8:	9b 01       	movw	r18, r22
    4cca:	77 c1       	rjmp	.+750    	; 0x4fba <readSysReg+0x434>
		case 151:case 152: temp =   (int)  (compPtr->SuperHeat*10);break;
    4ccc:	aa 5b       	subi	r26, 0xBA	; 186
    4cce:	bf 4f       	sbci	r27, 0xFF	; 255
    4cd0:	20 e0       	ldi	r18, 0x00	; 0
    4cd2:	30 e0       	ldi	r19, 0x00	; 0
    4cd4:	40 e2       	ldi	r20, 0x20	; 32
    4cd6:	51 e4       	ldi	r21, 0x41	; 65
    4cd8:	6d 91       	ld	r22, X+
    4cda:	7d 91       	ld	r23, X+
    4cdc:	8d 91       	ld	r24, X+
    4cde:	9c 91       	ld	r25, X
    4ce0:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    4ce4:	0e 94 49 54 	call	0xa892	; 0xa892 <__fixsfsi>
    4ce8:	9b 01       	movw	r18, r22
    4cea:	67 c1       	rjmp	.+718    	; 0x4fba <readSysReg+0x434>
		case 161:case 162:  temp =  (int)  (compPtr->Heat_In*10);break;
    4cec:	20 e0       	ldi	r18, 0x00	; 0
    4cee:	30 e0       	ldi	r19, 0x00	; 0
    4cf0:	40 e2       	ldi	r20, 0x20	; 32
    4cf2:	51 e4       	ldi	r21, 0x41	; 65
    4cf4:	9e 96       	adiw	r26, 0x2e	; 46
    4cf6:	6d 91       	ld	r22, X+
    4cf8:	7d 91       	ld	r23, X+
    4cfa:	8d 91       	ld	r24, X+
    4cfc:	9c 91       	ld	r25, X
    4cfe:	d1 97       	sbiw	r26, 0x31	; 49
    4d00:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    4d04:	0e 94 49 54 	call	0xa892	; 0xa892 <__fixsfsi>
    4d08:	9b 01       	movw	r18, r22
    4d0a:	57 c1       	rjmp	.+686    	; 0x4fba <readSysReg+0x434>
		case 171:case 172:  temp =  (int)  (compPtr->Heat_Out*10);break;		
    4d0c:	20 e0       	ldi	r18, 0x00	; 0
    4d0e:	30 e0       	ldi	r19, 0x00	; 0
    4d10:	40 e2       	ldi	r20, 0x20	; 32
    4d12:	51 e4       	ldi	r21, 0x41	; 65
    4d14:	9a 96       	adiw	r26, 0x2a	; 42
    4d16:	6d 91       	ld	r22, X+
    4d18:	7d 91       	ld	r23, X+
    4d1a:	8d 91       	ld	r24, X+
    4d1c:	9c 91       	ld	r25, X
    4d1e:	9d 97       	sbiw	r26, 0x2d	; 45
    4d20:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    4d24:	0e 94 49 54 	call	0xa892	; 0xa892 <__fixsfsi>
    4d28:	9b 01       	movw	r18, r22
    4d2a:	47 c1       	rjmp	.+654    	; 0x4fba <readSysReg+0x434>
		case 181:case 182: temp =   (int)  (compPtr->High_Press*10);break;
    4d2c:	20 e0       	ldi	r18, 0x00	; 0
    4d2e:	30 e0       	ldi	r19, 0x00	; 0
    4d30:	40 e2       	ldi	r20, 0x20	; 32
    4d32:	51 e4       	ldi	r21, 0x41	; 65
    4d34:	5a 96       	adiw	r26, 0x1a	; 26
    4d36:	6d 91       	ld	r22, X+
    4d38:	7d 91       	ld	r23, X+
    4d3a:	8d 91       	ld	r24, X+
    4d3c:	9c 91       	ld	r25, X
    4d3e:	5d 97       	sbiw	r26, 0x1d	; 29
    4d40:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    4d44:	0e 94 49 54 	call	0xa892	; 0xa892 <__fixsfsi>
    4d48:	9b 01       	movw	r18, r22
    4d4a:	37 c1       	rjmp	.+622    	; 0x4fba <readSysReg+0x434>
		case 191:case 192: temp =   (int)  (compPtr->Low_Press*10);break;
    4d4c:	20 e0       	ldi	r18, 0x00	; 0
    4d4e:	30 e0       	ldi	r19, 0x00	; 0
    4d50:	40 e2       	ldi	r20, 0x20	; 32
    4d52:	51 e4       	ldi	r21, 0x41	; 65
    4d54:	5e 96       	adiw	r26, 0x1e	; 30
    4d56:	6d 91       	ld	r22, X+
    4d58:	7d 91       	ld	r23, X+
    4d5a:	8d 91       	ld	r24, X+
    4d5c:	9c 91       	ld	r25, X
    4d5e:	91 97       	sbiw	r26, 0x21	; 33
    4d60:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    4d64:	0e 94 49 54 	call	0xa892	; 0xa892 <__fixsfsi>
    4d68:	9b 01       	movw	r18, r22
    4d6a:	27 c1       	rjmp	.+590    	; 0x4fba <readSysReg+0x434>
		case 201:case 202: temp =   (int)  (compPtr->Ex_Comp);break;
    4d6c:	da 96       	adiw	r26, 0x3a	; 58
    4d6e:	6d 91       	ld	r22, X+
    4d70:	7d 91       	ld	r23, X+
    4d72:	8d 91       	ld	r24, X+
    4d74:	9c 91       	ld	r25, X
    4d76:	dd 97       	sbiw	r26, 0x3d	; 61
    4d78:	0e 94 49 54 	call	0xa892	; 0xa892 <__fixsfsi>
    4d7c:	9b 01       	movw	r18, r22
    4d7e:	1d c1       	rjmp	.+570    	; 0x4fba <readSysReg+0x434>
		
	
		
		//-----------------------------------eeprom--------
		case 10:  temp =    eeprom->Compressor_delay;break;
    4d80:	68 81       	ld	r22, Y
    4d82:	26 2f       	mov	r18, r22
    4d84:	30 e0       	ldi	r19, 0x00	; 0
    4d86:	19 c1       	rjmp	.+562    	; 0x4fba <readSysReg+0x434>
		case 20:  temp =    eeprom->HeatingPump_delay;break;
    4d88:	6b 81       	ldd	r22, Y+3	; 0x03
    4d8a:	26 2f       	mov	r18, r22
    4d8c:	30 e0       	ldi	r19, 0x00	; 0
    4d8e:	15 c1       	rjmp	.+554    	; 0x4fba <readSysReg+0x434>
		case 30:  temp =    eeprom->Source_Pump_delay;break;
    4d90:	69 81       	ldd	r22, Y+1	; 0x01
    4d92:	26 2f       	mov	r18, r22
    4d94:	30 e0       	ldi	r19, 0x00	; 0
    4d96:	11 c1       	rjmp	.+546    	; 0x4fba <readSysReg+0x434>
		case 40:  temp =    eeprom->Revers_Valve_delay;break;
    4d98:	6a 81       	ldd	r22, Y+2	; 0x02
    4d9a:	26 2f       	mov	r18, r22
    4d9c:	30 e0       	ldi	r19, 0x00	; 0
    4d9e:	0d c1       	rjmp	.+538    	; 0x4fba <readSysReg+0x434>
		case 50:  temp =    eeprom->Three_Way_delay;break;
    4da0:	6c 81       	ldd	r22, Y+4	; 0x04
    4da2:	26 2f       	mov	r18, r22
    4da4:	30 e0       	ldi	r19, 0x00	; 0
    4da6:	09 c1       	rjmp	.+530    	; 0x4fba <readSysReg+0x434>
		case 60:  temp =    (int)  eeprom->Cool_Max;break;
    4da8:	6c 85       	ldd	r22, Y+12	; 0x0c
    4daa:	26 2f       	mov	r18, r22
    4dac:	30 e0       	ldi	r19, 0x00	; 0
    4dae:	05 c1       	rjmp	.+522    	; 0x4fba <readSysReg+0x434>
		case 70:  temp =    (int)  eeprom->Cool_Min;break;
    4db0:	6d 85       	ldd	r22, Y+13	; 0x0d
    4db2:	26 2f       	mov	r18, r22
    4db4:	30 e0       	ldi	r19, 0x00	; 0
    4db6:	01 c1       	rjmp	.+514    	; 0x4fba <readSysReg+0x434>
		case 80:  temp =    (int)  eeprom->HEAT_Max;break;
    4db8:	69 85       	ldd	r22, Y+9	; 0x09
    4dba:	26 2f       	mov	r18, r22
    4dbc:	30 e0       	ldi	r19, 0x00	; 0
    4dbe:	fd c0       	rjmp	.+506    	; 0x4fba <readSysReg+0x434>
		case 90:  temp =    (int)  eeprom->HEAT_Min;break;
    4dc0:	6a 85       	ldd	r22, Y+10	; 0x0a
    4dc2:	26 2f       	mov	r18, r22
    4dc4:	30 e0       	ldi	r19, 0x00	; 0
    4dc6:	f9 c0       	rjmp	.+498    	; 0x4fba <readSysReg+0x434>
		case 100: temp =    (int)  eeprom->Delta_heating_max;break;
    4dc8:	6c 89       	ldd	r22, Y+20	; 0x14
    4dca:	26 2f       	mov	r18, r22
    4dcc:	30 e0       	ldi	r19, 0x00	; 0
    4dce:	f5 c0       	rjmp	.+490    	; 0x4fba <readSysReg+0x434>
		case 110: temp =    (int)  eeprom->Delta_heating_min;break;
    4dd0:	6b 89       	ldd	r22, Y+19	; 0x13
    4dd2:	26 2f       	mov	r18, r22
    4dd4:	30 e0       	ldi	r19, 0x00	; 0
    4dd6:	f1 c0       	rjmp	.+482    	; 0x4fba <readSysReg+0x434>
		case 120: temp =    (int)  eeprom->Delta_source_max;break;
    4dd8:	6e 89       	ldd	r22, Y+22	; 0x16
    4dda:	26 2f       	mov	r18, r22
    4ddc:	30 e0       	ldi	r19, 0x00	; 0
    4dde:	ed c0       	rjmp	.+474    	; 0x4fba <readSysReg+0x434>
		case 130: temp =    (int)  eeprom->Delta_source_min;break;
    4de0:	6d 89       	ldd	r22, Y+21	; 0x15
    4de2:	26 2f       	mov	r18, r22
    4de4:	30 e0       	ldi	r19, 0x00	; 0
    4de6:	e9 c0       	rjmp	.+466    	; 0x4fba <readSysReg+0x434>
		case 140: temp =    (int)  eeprom->diffCOOL;break;
    4de8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4dea:	26 2f       	mov	r18, r22
    4dec:	30 e0       	ldi	r19, 0x00	; 0
    4dee:	e5 c0       	rjmp	.+458    	; 0x4fba <readSysReg+0x434>
		case 150: temp =    (int)  eeprom->diffDHW ;break;
    4df0:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4df2:	26 2f       	mov	r18, r22
    4df4:	30 e0       	ldi	r19, 0x00	; 0
    4df6:	e1 c0       	rjmp	.+450    	; 0x4fba <readSysReg+0x434>
		case 160: temp =    (int)  eeprom->diffHEAT;break;
    4df8:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4dfa:	26 2f       	mov	r18, r22
    4dfc:	30 e0       	ldi	r19, 0x00	; 0
    4dfe:	dd c0       	rjmp	.+442    	; 0x4fba <readSysReg+0x434>
		case 170: temp =    (int)  eeprom->AireToWater;break;
    4e00:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4e02:	26 2f       	mov	r18, r22
    4e04:	30 e0       	ldi	r19, 0x00	; 0
    4e06:	d9 c0       	rjmp	.+434    	; 0x4fba <readSysReg+0x434>
		case 180: temp =    (int)  eeprom->ExhaustMax;break;
    4e08:	6e 85       	ldd	r22, Y+14	; 0x0e
    4e0a:	26 2f       	mov	r18, r22
    4e0c:	30 e0       	ldi	r19, 0x00	; 0
    4e0e:	d5 c0       	rjmp	.+426    	; 0x4fba <readSysReg+0x434>
		case 190: temp =    (int)  eeprom->cool;break;
    4e10:	6f a1       	ldd	r22, Y+39	; 0x27
    4e12:	26 2f       	mov	r18, r22
    4e14:	30 e0       	ldi	r19, 0x00	; 0
    4e16:	d1 c0       	rjmp	.+418    	; 0x4fba <readSysReg+0x434>
		case 200: temp =    (int)  eeprom->heat;break;
    4e18:	6e a1       	ldd	r22, Y+38	; 0x26
    4e1a:	26 2f       	mov	r18, r22
    4e1c:	30 e0       	ldi	r19, 0x00	; 0
    4e1e:	cd c0       	rjmp	.+410    	; 0x4fba <readSysReg+0x434>
		case 210: temp =    (int)  eeprom->heatWater;break;
    4e20:	6d a1       	ldd	r22, Y+37	; 0x25
    4e22:	26 2f       	mov	r18, r22
    4e24:	30 e0       	ldi	r19, 0x00	; 0
    4e26:	c9 c0       	rjmp	.+402    	; 0x4fba <readSysReg+0x434>
		case 220: temp =    (int)  eeprom->HP_Max;break;
    4e28:	6e 81       	ldd	r22, Y+6	; 0x06
    4e2a:	26 2f       	mov	r18, r22
    4e2c:	30 e0       	ldi	r19, 0x00	; 0
    4e2e:	c5 c0       	rjmp	.+394    	; 0x4fba <readSysReg+0x434>
		case 230: temp =    (int)  eeprom->LP_Max;break;
    4e30:	68 85       	ldd	r22, Y+8	; 0x08
    4e32:	26 2f       	mov	r18, r22
    4e34:	30 e0       	ldi	r19, 0x00	; 0
    4e36:	c1 c0       	rjmp	.+386    	; 0x4fba <readSysReg+0x434>
		case 240: temp =    (int)  eeprom->HP_Min;break;
    4e38:	6f 81       	ldd	r22, Y+7	; 0x07
    4e3a:	26 2f       	mov	r18, r22
    4e3c:	30 e0       	ldi	r19, 0x00	; 0
    4e3e:	bd c0       	rjmp	.+378    	; 0x4fba <readSysReg+0x434>
		case 250: temp =    (int)  eeprom->LP_Min;break;
    4e40:	fb 01       	movw	r30, r22
    4e42:	e4 5a       	subi	r30, 0xA4	; 164
    4e44:	ff 4f       	sbci	r31, 0xFF	; 255
    4e46:	60 81       	ld	r22, Z
    4e48:	71 81       	ldd	r23, Z+1	; 0x01
    4e4a:	82 81       	ldd	r24, Z+2	; 0x02
    4e4c:	93 81       	ldd	r25, Z+3	; 0x03
    4e4e:	0e 94 49 54 	call	0xa892	; 0xa892 <__fixsfsi>
    4e52:	9b 01       	movw	r18, r22
    4e54:	b2 c0       	rjmp	.+356    	; 0x4fba <readSysReg+0x434>
		case 260: temp =    (int)  eeprom->MaxSupercool;break;
    4e56:	6a 89       	ldd	r22, Y+18	; 0x12
    4e58:	26 2f       	mov	r18, r22
    4e5a:	30 e0       	ldi	r19, 0x00	; 0
    4e5c:	ae c0       	rjmp	.+348    	; 0x4fba <readSysReg+0x434>
		case 270: temp =    (int)  eeprom->MinSupercool;break;
    4e5e:	69 89       	ldd	r22, Y+17	; 0x11
    4e60:	26 2f       	mov	r18, r22
    4e62:	30 e0       	ldi	r19, 0x00	; 0
    4e64:	aa c0       	rjmp	.+340    	; 0x4fba <readSysReg+0x434>
		case 280: temp =    (int)  eeprom->MaxSuperheat;break;
    4e66:	68 89       	ldd	r22, Y+16	; 0x10
    4e68:	26 2f       	mov	r18, r22
    4e6a:	30 e0       	ldi	r19, 0x00	; 0
    4e6c:	a6 c0       	rjmp	.+332    	; 0x4fba <readSysReg+0x434>
		case 290: temp =    (int)  eeprom->MinSuperheat;break;
    4e6e:	6f 85       	ldd	r22, Y+15	; 0x0f
    4e70:	26 2f       	mov	r18, r22
    4e72:	30 e0       	ldi	r19, 0x00	; 0
    4e74:	a2 c0       	rjmp	.+324    	; 0x4fba <readSysReg+0x434>
		case 300: temp =    (int)  eeprom->number_turnon_threeway;break;
    4e76:	fb 01       	movw	r30, r22
    4e78:	ea 5b       	subi	r30, 0xBA	; 186
    4e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e7c:	20 81       	ld	r18, Z
    4e7e:	31 81       	ldd	r19, Z+1	; 0x01
    4e80:	9c c0       	rjmp	.+312    	; 0x4fba <readSysReg+0x434>
		case 310: temp =    (int)  eeprom->power;break;
    4e82:	6c a1       	ldd	r22, Y+36	; 0x24
    4e84:	26 2f       	mov	r18, r22
    4e86:	30 e0       	ldi	r19, 0x00	; 0
    4e88:	98 c0       	rjmp	.+304    	; 0x4fba <readSysReg+0x434>
		case 320: temp =    (int)  eeprom->Set_Cooling;break;
    4e8a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4e8c:	26 2f       	mov	r18, r22
    4e8e:	30 e0       	ldi	r19, 0x00	; 0
    4e90:	94 c0       	rjmp	.+296    	; 0x4fba <readSysReg+0x434>
		case 330: temp =    (int)  eeprom->Set_DHW;break;
    4e92:	6b 8d       	ldd	r22, Y+27	; 0x1b
    4e94:	26 2f       	mov	r18, r22
    4e96:	30 e0       	ldi	r19, 0x00	; 0
    4e98:	90 c0       	rjmp	.+288    	; 0x4fba <readSysReg+0x434>
		case 340: temp =    (int)  eeprom->Set_Heating;break;
    4e9a:	69 8d       	ldd	r22, Y+25	; 0x19
    4e9c:	26 2f       	mov	r18, r22
    4e9e:	30 e0       	ldi	r19, 0x00	; 0
    4ea0:	8c c0       	rjmp	.+280    	; 0x4fba <readSysReg+0x434>
		case 350: temp =    (int)  eeprom->TempDef;break;
    4ea2:	2a a5       	ldd	r18, Y+42	; 0x2a
    4ea4:	3b a5       	ldd	r19, Y+43	; 0x2b
    4ea6:	89 c0       	rjmp	.+274    	; 0x4fba <readSysReg+0x434>
		case 360: temp =    (int)  eeprom->TimeDef;break;
    4ea8:	69 a1       	ldd	r22, Y+33	; 0x21
    4eaa:	26 2f       	mov	r18, r22
    4eac:	30 e0       	ldi	r19, 0x00	; 0
    4eae:	85 c0       	rjmp	.+266    	; 0x4fba <readSysReg+0x434>
		
		
		case 370: temp =    (int)  eeprom->TempOut;break;
    4eb0:	2e a5       	ldd	r18, Y+46	; 0x2e
    4eb2:	3f a5       	ldd	r19, Y+47	; 0x2f
    4eb4:	82 c0       	rjmp	.+260    	; 0x4fba <readSysReg+0x434>
		case 380: temp =    (int)  eeprom->TempStopDef;break;
    4eb6:	2c a5       	ldd	r18, Y+44	; 0x2c
    4eb8:	3d a5       	ldd	r19, Y+45	; 0x2d
    4eba:	7f c0       	rjmp	.+254    	; 0x4fba <readSysReg+0x434>
		case 390: temp =    (int)  eeprom->time_threeway;break;
    4ebc:	2c ad       	ldd	r18, Y+60	; 0x3c
    4ebe:	3d ad       	ldd	r19, Y+61	; 0x3d
    4ec0:	7c c0       	rjmp	.+248    	; 0x4fba <readSysReg+0x434>
		case 400: temp =    (int)  eeprom->NombComp;break;
    4ec2:	68 a1       	ldd	r22, Y+32	; 0x20
    4ec4:	26 2f       	mov	r18, r22
    4ec6:	30 e0       	ldi	r19, 0x00	; 0
    4ec8:	78 c0       	rjmp	.+240    	; 0x4fba <readSysReg+0x434>
		case 410: temp =    (int)  eeprom->reversMod;break;
    4eca:	68 a5       	ldd	r22, Y+40	; 0x28
    4ecc:	26 2f       	mov	r18, r22
    4ece:	30 e0       	ldi	r19, 0x00	; 0
    4ed0:	74 c0       	rjmp	.+232    	; 0x4fba <readSysReg+0x434>
		case 420: temp =    (int)  eeprom->TRV_Delay;break;
    4ed2:	6d 81       	ldd	r22, Y+5	; 0x05
    4ed4:	26 2f       	mov	r18, r22
    4ed6:	30 e0       	ldi	r19, 0x00	; 0
    4ed8:	70 c0       	rjmp	.+224    	; 0x4fba <readSysReg+0x434>
		case 430: temp =    (int)  eeprom->Source_Max;break;
    4eda:	6b 85       	ldd	r22, Y+11	; 0x0b
    4edc:	26 2f       	mov	r18, r22
    4ede:	30 e0       	ldi	r19, 0x00	; 0
    4ee0:	6c c0       	rjmp	.+216    	; 0x4fba <readSysReg+0x434>
		case 440: temp =    (int)  eeprom->Source_Min;break;
    4ee2:	28 a9       	ldd	r18, Y+48	; 0x30
    4ee4:	39 a9       	ldd	r19, Y+49	; 0x31
    4ee6:	69 c0       	rjmp	.+210    	; 0x4fba <readSysReg+0x434>
		case 450: temp =    (int)  eeprom->Delta_dhw_max;break;
    4ee8:	68 8d       	ldd	r22, Y+24	; 0x18
    4eea:	26 2f       	mov	r18, r22
    4eec:	30 e0       	ldi	r19, 0x00	; 0
    4eee:	65 c0       	rjmp	.+202    	; 0x4fba <readSysReg+0x434>
		case 460: temp =    (int)  eeprom->Delta_dhw_min;break;
    4ef0:	6f 89       	ldd	r22, Y+23	; 0x17
    4ef2:	26 2f       	mov	r18, r22
    4ef4:	30 e0       	ldi	r19, 0x00	; 0
    4ef6:	61 c0       	rjmp	.+194    	; 0x4fba <readSysReg+0x434>
		case 470: temp =    (int)  eeprom->Power_380;break;
    4ef8:	69 a5       	ldd	r22, Y+41	; 0x29
    4efa:	26 2f       	mov	r18, r22
    4efc:	30 e0       	ldi	r19, 0x00	; 0
    4efe:	5d c0       	rjmp	.+186    	; 0x4fba <readSysReg+0x434>
		case 480: temp =    (int)  eeprom->TimeBetweenDef;break;
    4f00:	6a a1       	ldd	r22, Y+34	; 0x22
    4f02:	26 2f       	mov	r18, r22
    4f04:	30 e0       	ldi	r19, 0x00	; 0
    4f06:	59 c0       	rjmp	.+178    	; 0x4fba <readSysReg+0x434>
		//case 500: temp =    (int)  compPtr-> Curr_A;break;
		//case 510: temp =    (int)  compPtr-> Curr_B;break;
		//case 520: temp =    (int)  compPtr-> Curr_C;break;
		
		//--------------------------------------
		case 301: temp =    (int)  eeprom->number_turnon_compressor_1;break;
    4f08:	2e ad       	ldd	r18, Y+62	; 0x3e
    4f0a:	3f ad       	ldd	r19, Y+63	; 0x3f
    4f0c:	56 c0       	rjmp	.+172    	; 0x4fba <readSysReg+0x434>
		case 311: temp =    (int)  eeprom->number_turnon_hiter_1;break;
    4f0e:	fb 01       	movw	r30, r22
    4f10:	ee 5b       	subi	r30, 0xBE	; 190
    4f12:	ff 4f       	sbci	r31, 0xFF	; 255
    4f14:	20 81       	ld	r18, Z
    4f16:	31 81       	ldd	r19, Z+1	; 0x01
    4f18:	50 c0       	rjmp	.+160    	; 0x4fba <readSysReg+0x434>
		case 321: temp =    (int)  eeprom->number_turnon_revers_1;break;
    4f1a:	fb 01       	movw	r30, r22
    4f1c:	ec 5b       	subi	r30, 0xBC	; 188
    4f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f20:	20 81       	ld	r18, Z
    4f22:	31 81       	ldd	r19, Z+1	; 0x01
    4f24:	4a c0       	rjmp	.+148    	; 0x4fba <readSysReg+0x434>
		case 331: temp =    (int)  eeprom->number_turnon_source_1;break;
    4f26:	fb 01       	movw	r30, r22
    4f28:	e0 5c       	subi	r30, 0xC0	; 192
    4f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2c:	20 81       	ld	r18, Z
    4f2e:	31 81       	ldd	r19, Z+1	; 0x01
    4f30:	44 c0       	rjmp	.+136    	; 0x4fba <readSysReg+0x434>
		case 341: temp =    (int)  eeprom->time_compressor_1;break;
    4f32:	2a ad       	ldd	r18, Y+58	; 0x3a
    4f34:	3b ad       	ldd	r19, Y+59	; 0x3b
    4f36:	41 c0       	rjmp	.+130    	; 0x4fba <readSysReg+0x434>
		case 351: temp =    (int)  eeprom->time_pump_hiter_1;break;
    4f38:	2c a9       	ldd	r18, Y+52	; 0x34
    4f3a:	3d a9       	ldd	r19, Y+53	; 0x35
    4f3c:	3e c0       	rjmp	.+124    	; 0x4fba <readSysReg+0x434>
		case 371: temp =    (int)  eeprom->time_pump_source_1;break;
    4f3e:	2e a9       	ldd	r18, Y+54	; 0x36
    4f40:	3f a9       	ldd	r19, Y+55	; 0x37
    4f42:	3b c0       	rjmp	.+118    	; 0x4fba <readSysReg+0x434>
		case 381: temp =    (int)  eeprom->time_revers_1;break;
    4f44:	28 ad       	ldd	r18, Y+56	; 0x38
    4f46:	39 ad       	ldd	r19, Y+57	; 0x39
    4f48:	38 c0       	rjmp	.+112    	; 0x4fba <readSysReg+0x434>
		case 391: temp =    (int)  eeprom->trv_corection_1;break;
    4f4a:	2a a9       	ldd	r18, Y+50	; 0x32
    4f4c:	3b a9       	ldd	r19, Y+51	; 0x33
    4f4e:	35 c0       	rjmp	.+106    	; 0x4fba <readSysReg+0x434>
		//------------------------------------
		case 302: temp =    (int)  eeprom->number_turnon_compressor_2;break;
    4f50:	fb 01       	movw	r30, r22
    4f52:	ee 5a       	subi	r30, 0xAE	; 174
    4f54:	ff 4f       	sbci	r31, 0xFF	; 255
    4f56:	20 81       	ld	r18, Z
    4f58:	31 81       	ldd	r19, Z+1	; 0x01
    4f5a:	2f c0       	rjmp	.+94     	; 0x4fba <readSysReg+0x434>
		case 312: temp =    (int)  eeprom->number_turnon_hiter_2;break;
    4f5c:	fb 01       	movw	r30, r22
    4f5e:	ea 5a       	subi	r30, 0xAA	; 170
    4f60:	ff 4f       	sbci	r31, 0xFF	; 255
    4f62:	20 81       	ld	r18, Z
    4f64:	31 81       	ldd	r19, Z+1	; 0x01
    4f66:	29 c0       	rjmp	.+82     	; 0x4fba <readSysReg+0x434>
		case 322: temp =    (int)  eeprom->number_turnon_revers_2;break;
    4f68:	fb 01       	movw	r30, r22
    4f6a:	e8 5a       	subi	r30, 0xA8	; 168
    4f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f6e:	20 81       	ld	r18, Z
    4f70:	31 81       	ldd	r19, Z+1	; 0x01
    4f72:	23 c0       	rjmp	.+70     	; 0x4fba <readSysReg+0x434>
		case 332: temp =    (int)  eeprom->number_turnon_source_2;break;
    4f74:	fb 01       	movw	r30, r22
    4f76:	ec 5a       	subi	r30, 0xAC	; 172
    4f78:	ff 4f       	sbci	r31, 0xFF	; 255
    4f7a:	20 81       	ld	r18, Z
    4f7c:	31 81       	ldd	r19, Z+1	; 0x01
    4f7e:	1d c0       	rjmp	.+58     	; 0x4fba <readSysReg+0x434>
		case 342: temp =    (int)  eeprom->time_compressor_2;break;
    4f80:	fb 01       	movw	r30, r22
    4f82:	e0 5b       	subi	r30, 0xB0	; 176
    4f84:	ff 4f       	sbci	r31, 0xFF	; 255
    4f86:	20 81       	ld	r18, Z
    4f88:	31 81       	ldd	r19, Z+1	; 0x01
    4f8a:	17 c0       	rjmp	.+46     	; 0x4fba <readSysReg+0x434>
		case 352: temp =    (int)  eeprom->time_pump_hiter_2;break;
    4f8c:	fb 01       	movw	r30, r22
    4f8e:	e6 5b       	subi	r30, 0xB6	; 182
    4f90:	ff 4f       	sbci	r31, 0xFF	; 255
    4f92:	20 81       	ld	r18, Z
    4f94:	31 81       	ldd	r19, Z+1	; 0x01
    4f96:	11 c0       	rjmp	.+34     	; 0x4fba <readSysReg+0x434>
		case 372: temp =    (int)  eeprom->time_pump_source_2;break;
    4f98:	fb 01       	movw	r30, r22
    4f9a:	e4 5b       	subi	r30, 0xB4	; 180
    4f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9e:	20 81       	ld	r18, Z
    4fa0:	31 81       	ldd	r19, Z+1	; 0x01
    4fa2:	0b c0       	rjmp	.+22     	; 0x4fba <readSysReg+0x434>
		case 382: temp =    (int)  eeprom->time_revers_2;break;
    4fa4:	fb 01       	movw	r30, r22
    4fa6:	e2 5b       	subi	r30, 0xB2	; 178
    4fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    4faa:	20 81       	ld	r18, Z
    4fac:	31 81       	ldd	r19, Z+1	; 0x01
    4fae:	05 c0       	rjmp	.+10     	; 0x4fba <readSysReg+0x434>
		case 392: temp =    (int)  eeprom->trv_corection_2;break;
    4fb0:	fb 01       	movw	r30, r22
    4fb2:	e8 5b       	subi	r30, 0xB8	; 184
    4fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb6:	20 81       	ld	r18, Z
    4fb8:	31 81       	ldd	r19, Z+1	; 0x01
		
	}
	return temp;
}
    4fba:	c9 01       	movw	r24, r18
    4fbc:	df 91       	pop	r29
    4fbe:	cf 91       	pop	r28
    4fc0:	08 95       	ret

00004fc2 <writeSysReg>:
void writeSysReg(xEEdata*comp,uint16_t adress,uint16_t value)
{
    4fc2:	cf 93       	push	r28
    4fc4:	df 93       	push	r29
    4fc6:	dc 01       	movw	r26, r24
	
	switch(adress)
    4fc8:	fb 01       	movw	r30, r22
    4fca:	3a 97       	sbiw	r30, 0x0a	; 10
    4fcc:	e7 3d       	cpi	r30, 0xD7	; 215
    4fce:	81 e0       	ldi	r24, 0x01	; 1
    4fd0:	f8 07       	cpc	r31, r24
    4fd2:	08 f0       	brcs	.+2      	; 0x4fd6 <writeSysReg+0x14>
    4fd4:	bb c0       	rjmp	.+374    	; 0x514c <writeSysReg+0x18a>
    4fd6:	88 27       	eor	r24, r24
    4fd8:	ed 58       	subi	r30, 0x8D	; 141
    4fda:	fd 4f       	sbci	r31, 0xFD	; 253
    4fdc:	8f 4f       	sbci	r24, 0xFF	; 255
    4fde:	0c 94 b6 59 	jmp	0xb36c	; 0xb36c <__tablejump2__>
	{
		case 10:  comp->Compressor_delay  = value;break;
    4fe2:	4c 93       	st	X, r20
    4fe4:	b3 c0       	rjmp	.+358    	; 0x514c <writeSysReg+0x18a>
		case 20:  comp->HeatingPump_delay = value;break;
    4fe6:	13 96       	adiw	r26, 0x03	; 3
    4fe8:	4c 93       	st	X, r20
    4fea:	b0 c0       	rjmp	.+352    	; 0x514c <writeSysReg+0x18a>
		case 30:  comp->Source_Pump_delay = value;break;
    4fec:	11 96       	adiw	r26, 0x01	; 1
    4fee:	4c 93       	st	X, r20
    4ff0:	ad c0       	rjmp	.+346    	; 0x514c <writeSysReg+0x18a>
		case 40:  comp->Revers_Valve_delay = value;break;
    4ff2:	12 96       	adiw	r26, 0x02	; 2
    4ff4:	4c 93       	st	X, r20
    4ff6:	aa c0       	rjmp	.+340    	; 0x514c <writeSysReg+0x18a>
		case 50:  comp->Three_Way_delay  = value;break;
    4ff8:	14 96       	adiw	r26, 0x04	; 4
    4ffa:	4c 93       	st	X, r20
    4ffc:	a7 c0       	rjmp	.+334    	; 0x514c <writeSysReg+0x18a>
		case 60:  comp->Cool_Max = value;break;
    4ffe:	1c 96       	adiw	r26, 0x0c	; 12
    5000:	4c 93       	st	X, r20
    5002:	a4 c0       	rjmp	.+328    	; 0x514c <writeSysReg+0x18a>
		case 70:  comp->Cool_Min = value;break;
    5004:	1d 96       	adiw	r26, 0x0d	; 13
    5006:	4c 93       	st	X, r20
    5008:	a1 c0       	rjmp	.+322    	; 0x514c <writeSysReg+0x18a>
		case 80:  comp->HEAT_Max  = value;break;
    500a:	19 96       	adiw	r26, 0x09	; 9
    500c:	4c 93       	st	X, r20
    500e:	9e c0       	rjmp	.+316    	; 0x514c <writeSysReg+0x18a>
		case 90:  comp->HEAT_Min = value;break;
    5010:	1a 96       	adiw	r26, 0x0a	; 10
    5012:	4c 93       	st	X, r20
    5014:	9b c0       	rjmp	.+310    	; 0x514c <writeSysReg+0x18a>
		case 100: comp->Delta_heating_max  = value;break;
    5016:	54 96       	adiw	r26, 0x14	; 20
    5018:	4c 93       	st	X, r20
    501a:	98 c0       	rjmp	.+304    	; 0x514c <writeSysReg+0x18a>
		case 110: comp->Delta_heating_min  = value;break;
    501c:	53 96       	adiw	r26, 0x13	; 19
    501e:	4c 93       	st	X, r20
    5020:	95 c0       	rjmp	.+298    	; 0x514c <writeSysReg+0x18a>
		case 120: comp->Delta_source_max  = value;break;
    5022:	56 96       	adiw	r26, 0x16	; 22
    5024:	4c 93       	st	X, r20
    5026:	92 c0       	rjmp	.+292    	; 0x514c <writeSysReg+0x18a>
		case 130: comp->Delta_source_min  = value;break;
    5028:	55 96       	adiw	r26, 0x15	; 21
    502a:	4c 93       	st	X, r20
    502c:	8f c0       	rjmp	.+286    	; 0x514c <writeSysReg+0x18a>
		case 140: comp->diffCOOL  = value;break;
    502e:	5d 96       	adiw	r26, 0x1d	; 29
    5030:	4c 93       	st	X, r20
    5032:	8c c0       	rjmp	.+280    	; 0x514c <writeSysReg+0x18a>
		case 150: comp->diffDHW  = value;break;
    5034:	5e 96       	adiw	r26, 0x1e	; 30
    5036:	4c 93       	st	X, r20
    5038:	89 c0       	rjmp	.+274    	; 0x514c <writeSysReg+0x18a>
		case 160: comp->diffHEAT  = value;break;
    503a:	5c 96       	adiw	r26, 0x1c	; 28
    503c:	4c 93       	st	X, r20
    503e:	86 c0       	rjmp	.+268    	; 0x514c <writeSysReg+0x18a>
		case 170: comp->AireToWater  = value;break;
    5040:	5f 96       	adiw	r26, 0x1f	; 31
    5042:	4c 93       	st	X, r20
    5044:	83 c0       	rjmp	.+262    	; 0x514c <writeSysReg+0x18a>
		case 180: comp->ExhaustMax  = value;break;
    5046:	1e 96       	adiw	r26, 0x0e	; 14
    5048:	4c 93       	st	X, r20
    504a:	80 c0       	rjmp	.+256    	; 0x514c <writeSysReg+0x18a>
		case 190: comp->cool  = value;break;
    504c:	97 96       	adiw	r26, 0x27	; 39
    504e:	4c 93       	st	X, r20
    5050:	7d c0       	rjmp	.+250    	; 0x514c <writeSysReg+0x18a>
		case 200: comp->heat  = value;break;
    5052:	96 96       	adiw	r26, 0x26	; 38
    5054:	4c 93       	st	X, r20
    5056:	7a c0       	rjmp	.+244    	; 0x514c <writeSysReg+0x18a>
		case 210: comp->heatWater  = value;break;
    5058:	95 96       	adiw	r26, 0x25	; 37
    505a:	4c 93       	st	X, r20
    505c:	77 c0       	rjmp	.+238    	; 0x514c <writeSysReg+0x18a>
		case 220: comp->HP_Max  = value;break;
    505e:	16 96       	adiw	r26, 0x06	; 6
    5060:	4c 93       	st	X, r20
    5062:	74 c0       	rjmp	.+232    	; 0x514c <writeSysReg+0x18a>
		case 230: comp->LP_Max  = value;break;
    5064:	18 96       	adiw	r26, 0x08	; 8
    5066:	4c 93       	st	X, r20
    5068:	71 c0       	rjmp	.+226    	; 0x514c <writeSysReg+0x18a>
		case 240: comp->HP_Min  = value;break;
    506a:	17 96       	adiw	r26, 0x07	; 7
    506c:	4c 93       	st	X, r20
    506e:	6e c0       	rjmp	.+220    	; 0x514c <writeSysReg+0x18a>
		case 250: comp->LP_Min  = value;break;
    5070:	ed 01       	movw	r28, r26
    5072:	c4 5a       	subi	r28, 0xA4	; 164
    5074:	df 4f       	sbci	r29, 0xFF	; 255
    5076:	ba 01       	movw	r22, r20
    5078:	80 e0       	ldi	r24, 0x00	; 0
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	0e 94 7a 54 	call	0xa8f4	; 0xa8f4 <__floatunsisf>
    5080:	68 83       	st	Y, r22
    5082:	79 83       	std	Y+1, r23	; 0x01
    5084:	8a 83       	std	Y+2, r24	; 0x02
    5086:	9b 83       	std	Y+3, r25	; 0x03
    5088:	61 c0       	rjmp	.+194    	; 0x514c <writeSysReg+0x18a>
		case 260: comp->MaxSupercool  = value;break;
    508a:	52 96       	adiw	r26, 0x12	; 18
    508c:	4c 93       	st	X, r20
    508e:	5e c0       	rjmp	.+188    	; 0x514c <writeSysReg+0x18a>
		case 270: comp->MinSupercool  = value;break;
    5090:	51 96       	adiw	r26, 0x11	; 17
    5092:	4c 93       	st	X, r20
    5094:	5b c0       	rjmp	.+182    	; 0x514c <writeSysReg+0x18a>
		case 280: comp->MaxSuperheat  = value;break;
    5096:	50 96       	adiw	r26, 0x10	; 16
    5098:	4c 93       	st	X, r20
    509a:	58 c0       	rjmp	.+176    	; 0x514c <writeSysReg+0x18a>
		case 290: comp->MinSuperheat  = value;break;
    509c:	1f 96       	adiw	r26, 0x0f	; 15
    509e:	4c 93       	st	X, r20
    50a0:	55 c0       	rjmp	.+170    	; 0x514c <writeSysReg+0x18a>
		case 300: comp->number_turnon_threeway  = value;break;
    50a2:	aa 5b       	subi	r26, 0xBA	; 186
    50a4:	bf 4f       	sbci	r27, 0xFF	; 255
    50a6:	4d 93       	st	X+, r20
    50a8:	5c 93       	st	X, r21
    50aa:	50 c0       	rjmp	.+160    	; 0x514c <writeSysReg+0x18a>
		case 310: comp->power  = value;break;
    50ac:	94 96       	adiw	r26, 0x24	; 36
    50ae:	4c 93       	st	X, r20
    50b0:	4d c0       	rjmp	.+154    	; 0x514c <writeSysReg+0x18a>
		case 320: comp->Set_Cooling  = value;break;
    50b2:	5a 96       	adiw	r26, 0x1a	; 26
    50b4:	4c 93       	st	X, r20
    50b6:	4a c0       	rjmp	.+148    	; 0x514c <writeSysReg+0x18a>
		case 330: comp->Set_DHW  = value;break;
    50b8:	5b 96       	adiw	r26, 0x1b	; 27
    50ba:	4c 93       	st	X, r20
    50bc:	47 c0       	rjmp	.+142    	; 0x514c <writeSysReg+0x18a>
		case 340: comp->Set_Heating  = value;break;
    50be:	59 96       	adiw	r26, 0x19	; 25
    50c0:	4c 93       	st	X, r20
    50c2:	44 c0       	rjmp	.+136    	; 0x514c <writeSysReg+0x18a>
		case 350: comp->TempDef  = value;break;//
    50c4:	9b 96       	adiw	r26, 0x2b	; 43
    50c6:	5c 93       	st	X, r21
    50c8:	4e 93       	st	-X, r20
    50ca:	9a 97       	sbiw	r26, 0x2a	; 42
    50cc:	3f c0       	rjmp	.+126    	; 0x514c <writeSysReg+0x18a>
		case 360: comp->TimeDef  = value;break;//
    50ce:	91 96       	adiw	r26, 0x21	; 33
    50d0:	4c 93       	st	X, r20
    50d2:	3c c0       	rjmp	.+120    	; 0x514c <writeSysReg+0x18a>
		case 370: comp->TempOut  = value;break;
    50d4:	9f 96       	adiw	r26, 0x2f	; 47
    50d6:	5c 93       	st	X, r21
    50d8:	4e 93       	st	-X, r20
    50da:	9e 97       	sbiw	r26, 0x2e	; 46
    50dc:	37 c0       	rjmp	.+110    	; 0x514c <writeSysReg+0x18a>
		case 380: comp->TempStopDef  = value;break;//
    50de:	9d 96       	adiw	r26, 0x2d	; 45
    50e0:	5c 93       	st	X, r21
    50e2:	4e 93       	st	-X, r20
    50e4:	9c 97       	sbiw	r26, 0x2c	; 44
    50e6:	32 c0       	rjmp	.+100    	; 0x514c <writeSysReg+0x18a>
		case 390: comp->time_threeway  = value;break;
    50e8:	dd 96       	adiw	r26, 0x3d	; 61
    50ea:	5c 93       	st	X, r21
    50ec:	4e 93       	st	-X, r20
    50ee:	dc 97       	sbiw	r26, 0x3c	; 60
    50f0:	2d c0       	rjmp	.+90     	; 0x514c <writeSysReg+0x18a>
		case 400: comp->NombComp  = value;break;
    50f2:	90 96       	adiw	r26, 0x20	; 32
    50f4:	4c 93       	st	X, r20
    50f6:	2a c0       	rjmp	.+84     	; 0x514c <writeSysReg+0x18a>
		case 410: comp->reversMod =value;break;
    50f8:	98 96       	adiw	r26, 0x28	; 40
    50fa:	4c 93       	st	X, r20
    50fc:	27 c0       	rjmp	.+78     	; 0x514c <writeSysReg+0x18a>
		case 420: comp->TRV_Delay=value;break;
    50fe:	15 96       	adiw	r26, 0x05	; 5
    5100:	4c 93       	st	X, r20
    5102:	24 c0       	rjmp	.+72     	; 0x514c <writeSysReg+0x18a>
		case 430: comp->Source_Max=value;break;
    5104:	1b 96       	adiw	r26, 0x0b	; 11
    5106:	4c 93       	st	X, r20
    5108:	21 c0       	rjmp	.+66     	; 0x514c <writeSysReg+0x18a>
		case 440: comp->Source_Min=value;break;
    510a:	d1 96       	adiw	r26, 0x31	; 49
    510c:	5c 93       	st	X, r21
    510e:	4e 93       	st	-X, r20
    5110:	d0 97       	sbiw	r26, 0x30	; 48
    5112:	1c c0       	rjmp	.+56     	; 0x514c <writeSysReg+0x18a>
		case 450: comp->Delta_dhw_max  = value;break;
    5114:	58 96       	adiw	r26, 0x18	; 24
    5116:	4c 93       	st	X, r20
    5118:	19 c0       	rjmp	.+50     	; 0x514c <writeSysReg+0x18a>
		case 460: comp->Delta_dhw_min  = value;break;
    511a:	57 96       	adiw	r26, 0x17	; 23
    511c:	4c 93       	st	X, r20
    511e:	16 c0       	rjmp	.+44     	; 0x514c <writeSysReg+0x18a>
		case 470: comp->Power_380 = value;break;
    5120:	99 96       	adiw	r26, 0x29	; 41
    5122:	4c 93       	st	X, r20
    5124:	13 c0       	rjmp	.+38     	; 0x514c <writeSysReg+0x18a>
		case 480: comp->TimeBetweenDef = value;break;//
    5126:	92 96       	adiw	r26, 0x22	; 34
    5128:	4c 93       	st	X, r20
    512a:	10 c0       	rjmp	.+32     	; 0x514c <writeSysReg+0x18a>
		case 391: comp->trv_corection_1 = value;break;
    512c:	d3 96       	adiw	r26, 0x33	; 51
    512e:	5c 93       	st	X, r21
    5130:	4e 93       	st	-X, r20
    5132:	d2 97       	sbiw	r26, 0x32	; 50
    5134:	0b c0       	rjmp	.+22     	; 0x514c <writeSysReg+0x18a>
		case 392: comp->trv_corection_2 = value;break;
    5136:	a8 5b       	subi	r26, 0xB8	; 184
    5138:	bf 4f       	sbci	r27, 0xFF	; 255
    513a:	4d 93       	st	X+, r20
    513c:	5c 93       	st	X, r21
    513e:	06 c0       	rjmp	.+12     	; 0x514c <writeSysReg+0x18a>
		case 393:if(comp->AireToWater==1) forsDefrost = value;break;
    5140:	5f 96       	adiw	r26, 0x1f	; 31
    5142:	8c 91       	ld	r24, X
    5144:	81 30       	cpi	r24, 0x01	; 1
    5146:	11 f4       	brne	.+4      	; 0x514c <writeSysReg+0x18a>
    5148:	40 93 01 07 	sts	0x0701, r20	; 0x800701 <forsDefrost>
	}
}
    514c:	df 91       	pop	r29
    514e:	cf 91       	pop	r28
    5150:	08 95       	ret

00005152 <calculateCRC>:
}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
    5152:	88 23       	and	r24, r24
    5154:	09 f1       	breq	.+66     	; 0x5198 <calculateCRC+0x46>
    5156:	af ef       	ldi	r26, 0xFF	; 255
    5158:	a8 0f       	add	r26, r24
    515a:	b0 e0       	ldi	r27, 0x00	; 0
    515c:	11 96       	adiw	r26, 0x01	; 1
    515e:	60 e0       	ldi	r22, 0x00	; 0
    5160:	70 e0       	ldi	r23, 0x00	; 0
    5162:	8f ef       	ldi	r24, 0xFF	; 255
    5164:	9f ef       	ldi	r25, 0xFF	; 255
	{
		temp = temp ^ frame[i];
    5166:	fb 01       	movw	r30, r22
    5168:	e8 54       	subi	r30, 0x48	; 72
    516a:	f8 4f       	sbci	r31, 0xF8	; 248
    516c:	20 81       	ld	r18, Z
    516e:	82 27       	eor	r24, r18
    5170:	28 e0       	ldi	r18, 0x08	; 8
		for (unsigned char j = 1; j <= 8; j++)
		{
			flag = temp & 0x0001;
    5172:	ac 01       	movw	r20, r24
    5174:	41 70       	andi	r20, 0x01	; 1
    5176:	55 27       	eor	r21, r21
			temp >>= 1;
    5178:	96 95       	lsr	r25
    517a:	87 95       	ror	r24
			if (flag)
    517c:	45 2b       	or	r20, r21
    517e:	21 f0       	breq	.+8      	; 0x5188 <calculateCRC+0x36>
			temp ^= 0xA001;
    5180:	31 e0       	ldi	r19, 0x01	; 1
    5182:	83 27       	eor	r24, r19
    5184:	30 ea       	ldi	r19, 0xA0	; 160
    5186:	93 27       	eor	r25, r19
    5188:	21 50       	subi	r18, 0x01	; 1
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
	{
		temp = temp ^ frame[i];
		for (unsigned char j = 1; j <= 8; j++)
    518a:	99 f7       	brne	.-26     	; 0x5172 <calculateCRC+0x20>
    518c:	6f 5f       	subi	r22, 0xFF	; 255
    518e:	7f 4f       	sbci	r23, 0xFF	; 255
}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
    5190:	6a 17       	cp	r22, r26
    5192:	7b 07       	cpc	r23, r27
    5194:	41 f7       	brne	.-48     	; 0x5166 <calculateCRC+0x14>
    5196:	02 c0       	rjmp	.+4      	; 0x519c <calculateCRC+0x4a>

}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
    5198:	8f ef       	ldi	r24, 0xFF	; 255
    519a:	9f ef       	ldi	r25, 0xFF	; 255
	// Reverse byte order.
	temp2 = temp >> 8;
	temp = (temp << 8) | temp2;
	temp &= 0xFFFF;
	return temp; // the returned value is already swopped - crcLo byte is first & crcHi byte is last
}
    519c:	98 27       	eor	r25, r24
    519e:	89 27       	eor	r24, r25
    51a0:	98 27       	eor	r25, r24
    51a2:	08 95       	ret

000051a4 <sendPacket>:

void sendPacket(unsigned char bufferSize)
{
    51a4:	ef 92       	push	r14
    51a6:	ff 92       	push	r15
    51a8:	0f 93       	push	r16
    51aa:	1f 93       	push	r17
    51ac:	cf 93       	push	r28
    51ae:	df 93       	push	r29
	
	for (unsigned char i = 0; i < bufferSize; i++) if(port_0)xSerialPutChar(&xSerialPort,frame[i]); else if(port_3){PORTJ|= (_BV(PIN_rs485));xSerialPutChar(&xSerial3Port,frame[i]);}
    51b0:	88 23       	and	r24, r24
    51b2:	71 f1       	breq	.+92     	; 0x5210 <sendPacket+0x6c>
    51b4:	81 50       	subi	r24, 0x01	; 1
    51b6:	08 2f       	mov	r16, r24
    51b8:	10 e0       	ldi	r17, 0x00	; 0
    51ba:	0f 5f       	subi	r16, 0xFF	; 255
    51bc:	1f 4f       	sbci	r17, 0xFF	; 255
    51be:	c0 e0       	ldi	r28, 0x00	; 0
    51c0:	d0 e0       	ldi	r29, 0x00	; 0
    51c2:	0f 2e       	mov	r0, r31
    51c4:	f5 e0       	ldi	r31, 0x05	; 5
    51c6:	ef 2e       	mov	r14, r31
    51c8:	ff 24       	eor	r15, r15
    51ca:	f3 94       	inc	r15
    51cc:	f0 2d       	mov	r31, r0
    51ce:	80 91 9d 0a 	lds	r24, 0x0A9D	; 0x800a9d <port_0>
    51d2:	88 23       	and	r24, r24
    51d4:	49 f0       	breq	.+18     	; 0x51e8 <sendPacket+0x44>
    51d6:	fe 01       	movw	r30, r28
    51d8:	e8 54       	subi	r30, 0x48	; 72
    51da:	f8 4f       	sbci	r31, 0xF8	; 248
    51dc:	60 81       	ld	r22, Z
    51de:	8f e4       	ldi	r24, 0x4F	; 79
    51e0:	97 e0       	ldi	r25, 0x07	; 7
    51e2:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <xSerialPutChar>
    51e6:	10 c0       	rjmp	.+32     	; 0x5208 <sendPacket+0x64>
    51e8:	80 91 f7 08 	lds	r24, 0x08F7	; 0x8008f7 <port_3>
    51ec:	88 23       	and	r24, r24
    51ee:	61 f0       	breq	.+24     	; 0x5208 <sendPacket+0x64>
    51f0:	f7 01       	movw	r30, r14
    51f2:	80 81       	ld	r24, Z
    51f4:	84 60       	ori	r24, 0x04	; 4
    51f6:	80 83       	st	Z, r24
    51f8:	fe 01       	movw	r30, r28
    51fa:	e8 54       	subi	r30, 0x48	; 72
    51fc:	f8 4f       	sbci	r31, 0xF8	; 248
    51fe:	60 81       	ld	r22, Z
    5200:	86 e9       	ldi	r24, 0x96	; 150
    5202:	97 e0       	ldi	r25, 0x07	; 7
    5204:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <xSerialPutChar>
    5208:	21 96       	adiw	r28, 0x01	; 1
    520a:	c0 17       	cp	r28, r16
    520c:	d1 07       	cpc	r29, r17
    520e:	f9 f6       	brne	.-66     	; 0x51ce <sendPacket+0x2a>
	//xSerialRxFlush(&xSerialPort);
	PORTJ &= (_BV(PIN_rs485));
    5210:	e5 e0       	ldi	r30, 0x05	; 5
    5212:	f1 e0       	ldi	r31, 0x01	; 1
    5214:	80 81       	ld	r24, Z
    5216:	84 70       	andi	r24, 0x04	; 4
    5218:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    521a:	00 00       	nop

	_delay_us(3645);
	
	
    521c:	df 91       	pop	r29
    521e:	cf 91       	pop	r28
    5220:	1f 91       	pop	r17
    5222:	0f 91       	pop	r16
    5224:	ff 90       	pop	r15
    5226:	ef 90       	pop	r14
    5228:	08 95       	ret

0000522a <modbus_update>:
		case 393:if(comp->AireToWater==1) forsDefrost = value;break;
	}
}

void modbus_update()
{
    522a:	af 92       	push	r10
    522c:	bf 92       	push	r11
    522e:	cf 92       	push	r12
    5230:	df 92       	push	r13
    5232:	ef 92       	push	r14
    5234:	ff 92       	push	r15
    5236:	0f 93       	push	r16
    5238:	1f 93       	push	r17
    523a:	cf 93       	push	r28
    523c:	df 93       	push	r29
	unsigned char noOfBytes;
	unsigned char responseFrameSize;
	unsigned int temp;
	void* ptr=NULL;
	
	if(port_0)buffer=xSerialAvailableChar( &xSerialPort );
    523e:	80 91 9d 0a 	lds	r24, 0x0A9D	; 0x800a9d <port_0>
    5242:	88 23       	and	r24, r24
    5244:	29 f0       	breq	.+10     	; 0x5250 <modbus_update+0x26>
    5246:	8f e4       	ldi	r24, 0x4F	; 79
    5248:	97 e0       	ldi	r25, 0x07	; 7
    524a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <xSerialAvailableChar>
    524e:	09 c0       	rjmp	.+18     	; 0x5262 <modbus_update+0x38>
	else if (port_3)buffer=xSerialAvailableChar( &xSerial3Port );
    5250:	80 91 f7 08 	lds	r24, 0x08F7	; 0x8008f7 <port_3>
    5254:	88 23       	and	r24, r24
    5256:	09 f4       	brne	.+2      	; 0x525a <modbus_update+0x30>
    5258:	da c0       	rjmp	.+436    	; 0x540e <modbus_update+0x1e4>
    525a:	86 e9       	ldi	r24, 0x96	; 150
    525c:	97 e0       	ldi	r25, 0x07	; 7
    525e:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <xSerialAvailableChar>
	
	//avrSerialPrintf("buffer = %d \r\n",buffer );
	//avrSerialPrintf("overflow= %d \r\n",overflow);
	if (overflow){ return;}//exceptionResponse(OVERFLOW_BUFF);
    5262:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <overflow>
    5266:	91 11       	cpse	r25, r1
    5268:	d7 c0       	rjmp	.+430    	; 0x5418 <modbus_update+0x1ee>
	if (buffer > 0 && buffer < 8) {  return;}// exceptionResponse(CORRUPT_PACKET);
    526a:	9f ef       	ldi	r25, 0xFF	; 255
    526c:	98 0f       	add	r25, r24
    526e:	97 30       	cpi	r25, 0x07	; 7
    5270:	08 f4       	brcc	.+2      	; 0x5274 <modbus_update+0x4a>
    5272:	d2 c0       	rjmp	.+420    	; 0x5418 <modbus_update+0x1ee>
	
	// The minimum request packet is 8 bytes for function 3 & 16
	
	id = frame[0];
    5274:	90 91 b8 07 	lds	r25, 0x07B8	; 0x8007b8 <frame>
	//avrSerialPrintf("buffer= %d \r\n",buffer);
	
	if (id == slaveID ) // if the recieved ID matches the slaveID or broadcasting id (0), continue
    5278:	91 30       	cpi	r25, 0x01	; 1
    527a:	09 f0       	breq	.+2      	; 0x527e <modbus_update+0x54>
    527c:	cd c0       	rjmp	.+410    	; 0x5418 <modbus_update+0x1ee>
	{
		crc = ((frame[buffer - 2] << 8) | frame[buffer - 1]); // combine the crc Low & High bytes
    527e:	28 2f       	mov	r18, r24
    5280:	30 e0       	ldi	r19, 0x00	; 0
    5282:	f9 01       	movw	r30, r18
    5284:	ea 54       	subi	r30, 0x4A	; 74
    5286:	f8 4f       	sbci	r31, 0xF8	; 248
    5288:	d0 81       	ld	r29, Z
    528a:	f9 01       	movw	r30, r18
    528c:	e9 54       	subi	r30, 0x49	; 73
    528e:	f8 4f       	sbci	r31, 0xF8	; 248
    5290:	c0 81       	ld	r28, Z
		//avrSerialPrintf("crc= %d \r\n",crc);
		if (calculateCRC(buffer - 2) == crc) // if the calculated crc matches the recieved crc continue
    5292:	82 50       	subi	r24, 0x02	; 2
    5294:	5e df       	rcall	.-324    	; 0x5152 <calculateCRC>
    5296:	2c 2f       	mov	r18, r28
    5298:	30 e0       	ldi	r19, 0x00	; 0
    529a:	3d 2b       	or	r19, r29
    529c:	28 17       	cp	r18, r24
    529e:	39 07       	cpc	r19, r25
    52a0:	09 f0       	breq	.+2      	; 0x52a4 <modbus_update+0x7a>
    52a2:	ba c0       	rjmp	.+372    	; 0x5418 <modbus_update+0x1ee>
		{
			function = frame[1];
    52a4:	e8 eb       	ldi	r30, 0xB8	; 184
    52a6:	f7 e0       	ldi	r31, 0x07	; 7
    52a8:	21 81       	ldd	r18, Z+1	; 0x01
    52aa:	20 93 72 07 	sts	0x0772, r18	; 0x800772 <function>
			startingAddress = ((frame[2] << 8) | frame[3]); // combine the starting address bytes
    52ae:	82 81       	ldd	r24, Z+2	; 0x02
    52b0:	c3 81       	ldd	r28, Z+3	; 0x03
    52b2:	d0 e0       	ldi	r29, 0x00	; 0
    52b4:	d8 2b       	or	r29, r24
			no_of_registers = ((frame[4] << 8) | frame[5]);
    52b6:	84 81       	ldd	r24, Z+4	; 0x04
    52b8:	45 81       	ldd	r20, Z+5	; 0x05
    52ba:	50 e0       	ldi	r21, 0x00	; 0
    52bc:	58 2b       	or	r21, r24
			maxData = startingAddress + no_of_registers *10;
    52be:	7a 01       	movw	r14, r20
    52c0:	ee 0c       	add	r14, r14
    52c2:	ff 1c       	adc	r15, r15
    52c4:	ca 01       	movw	r24, r20
    52c6:	88 0f       	add	r24, r24
    52c8:	99 1f       	adc	r25, r25
    52ca:	88 0f       	add	r24, r24
    52cc:	99 1f       	adc	r25, r25
    52ce:	88 0f       	add	r24, r24
    52d0:	99 1f       	adc	r25, r25
    52d2:	e8 0e       	add	r14, r24
    52d4:	f9 1e       	adc	r15, r25
    52d6:	ec 0e       	add	r14, r28
    52d8:	fd 1e       	adc	r15, r29
			//avrSerialPrintf("function= %d \r\n",function);
			//avrSerialPrintf("startingAddress= %d \r\n",startingAddress);
			//avrSerialPrintf("no_of_registers= %d \r\n",no_of_registers);
			//avrSerialPrintf("maxData= %d \r\n",maxData);
			if (function == 3)
    52da:	23 30       	cpi	r18, 0x03	; 3
    52dc:	09 f0       	breq	.+2      	; 0x52e0 <modbus_update+0xb6>
    52de:	65 c0       	rjmp	.+202    	; 0x53aa <modbus_update+0x180>
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
    52e0:	9e 01       	movw	r18, r28
    52e2:	ad ec       	ldi	r26, 0xCD	; 205
    52e4:	bc ec       	ldi	r27, 0xCC	; 204
    52e6:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    52ea:	96 95       	lsr	r25
    52ec:	87 95       	ror	r24
    52ee:	96 95       	lsr	r25
    52f0:	87 95       	ror	r24
    52f2:	96 95       	lsr	r25
    52f4:	87 95       	ror	r24
    52f6:	9c 01       	movw	r18, r24
    52f8:	22 0f       	add	r18, r18
    52fa:	33 1f       	adc	r19, r19
    52fc:	88 0f       	add	r24, r24
    52fe:	99 1f       	adc	r25, r25
    5300:	88 0f       	add	r24, r24
    5302:	99 1f       	adc	r25, r25
    5304:	88 0f       	add	r24, r24
    5306:	99 1f       	adc	r25, r25
    5308:	82 0f       	add	r24, r18
    530a:	93 1f       	adc	r25, r19
    530c:	9e 01       	movw	r18, r28
    530e:	28 1b       	sub	r18, r24
    5310:	39 0b       	sbc	r19, r25
    5312:	21 30       	cpi	r18, 0x01	; 1
    5314:	31 05       	cpc	r19, r1
    5316:	51 f0       	breq	.+20     	; 0x532c <modbus_update+0x102>
				else if(startingAddress%10==2){ptr=&Comp_2;}
    5318:	22 30       	cpi	r18, 0x02	; 2
    531a:	31 05       	cpc	r19, r1
    531c:	71 f4       	brne	.+28     	; 0x533a <modbus_update+0x110>
    531e:	0f 2e       	mov	r0, r31
    5320:	fe ed       	ldi	r31, 0xDE	; 222
    5322:	cf 2e       	mov	r12, r31
    5324:	f9 e0       	ldi	r31, 0x09	; 9
    5326:	df 2e       	mov	r13, r31
    5328:	f0 2d       	mov	r31, r0
    532a:	09 c0       	rjmp	.+18     	; 0x533e <modbus_update+0x114>
			//avrSerialPrintf("startingAddress= %d \r\n",startingAddress);
			//avrSerialPrintf("no_of_registers= %d \r\n",no_of_registers);
			//avrSerialPrintf("maxData= %d \r\n",maxData);
			if (function == 3)
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
    532c:	0f 2e       	mov	r0, r31
    532e:	f8 e5       	ldi	r31, 0x58	; 88
    5330:	cf 2e       	mov	r12, r31
    5332:	f9 e0       	ldi	r31, 0x09	; 9
    5334:	df 2e       	mov	r13, r31
    5336:	f0 2d       	mov	r31, r0
    5338:	02 c0       	rjmp	.+4      	; 0x533e <modbus_update+0x114>
	unsigned int crc16;
	unsigned int crc;
	unsigned char noOfBytes;
	unsigned char responseFrameSize;
	unsigned int temp;
	void* ptr=NULL;
    533a:	c1 2c       	mov	r12, r1
    533c:	d1 2c       	mov	r13, r1
			if (function == 3)
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
				else if(startingAddress%10==2){ptr=&Comp_2;}
				
				noOfBytes = no_of_registers * 2;
    533e:	a4 2e       	mov	r10, r20
    5340:	aa 0c       	add	r10, r10
				responseFrameSize = 5 + noOfBytes; // ID, function, noOfBytes, (dataLo + dataHi) * number of registers, crcLo, crcHi
    5342:	0f 2e       	mov	r0, r31
    5344:	f5 e0       	ldi	r31, 0x05	; 5
    5346:	bf 2e       	mov	r11, r31
    5348:	f0 2d       	mov	r31, r0
    534a:	ba 0c       	add	r11, r10
				frame[0] = slaveID;
    534c:	e8 eb       	ldi	r30, 0xB8	; 184
    534e:	f7 e0       	ldi	r31, 0x07	; 7
    5350:	81 e0       	ldi	r24, 0x01	; 1
    5352:	80 83       	st	Z, r24
				frame[1] = function;
    5354:	83 e0       	ldi	r24, 0x03	; 3
    5356:	81 83       	std	Z+1, r24	; 0x01
				frame[2] = noOfBytes;
    5358:	a2 82       	std	Z+2, r10	; 0x02
				//avrSerialPrintf("FrameSize= %d \r\n",responseFrameSize);
				//avrSerialPrintf("frame[1]= %d \r\n",frame[1]);
				//avrSerialPrintf("frame[2]= %d \r\n",frame[2]);
				address = 3; // PDU starts at the 4th byte
				for (index = startingAddress; index < maxData; )
    535a:	ce 15       	cp	r28, r14
    535c:	df 05       	cpc	r29, r15
    535e:	a8 f4       	brcc	.+42     	; 0x538a <modbus_update+0x160>
    5360:	03 e0       	ldi	r16, 0x03	; 3
    5362:	10 e0       	ldi	r17, 0x00	; 0
				{
					temp = readSysReg(ptr,&EEpromData,index);//holdingRegs[index]
    5364:	ae 01       	movw	r20, r28
    5366:	68 ef       	ldi	r22, 0xF8	; 248
    5368:	78 e0       	ldi	r23, 0x08	; 8
    536a:	c6 01       	movw	r24, r12
    536c:	0c dc       	rcall	.-2024   	; 0x4b86 <readSysReg>
					frame[address] = temp >> 8; // split the register into 2 bytes
    536e:	f8 01       	movw	r30, r16
    5370:	e8 54       	subi	r30, 0x48	; 72
    5372:	f8 4f       	sbci	r31, 0xF8	; 248
    5374:	90 83       	st	Z, r25
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
					frame[address] = temp & 0xFF;
    5376:	f8 01       	movw	r30, r16
    5378:	e7 54       	subi	r30, 0x47	; 71
    537a:	f8 4f       	sbci	r31, 0xF8	; 248
    537c:	80 83       	st	Z, r24
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
    537e:	0e 5f       	subi	r16, 0xFE	; 254
    5380:	1f 4f       	sbci	r17, 0xFF	; 255
					index +=10;
    5382:	2a 96       	adiw	r28, 0x0a	; 10
				frame[2] = noOfBytes;
				//avrSerialPrintf("FrameSize= %d \r\n",responseFrameSize);
				//avrSerialPrintf("frame[1]= %d \r\n",frame[1]);
				//avrSerialPrintf("frame[2]= %d \r\n",frame[2]);
				address = 3; // PDU starts at the 4th byte
				for (index = startingAddress; index < maxData; )
    5384:	ce 15       	cp	r28, r14
    5386:	df 05       	cpc	r29, r15
    5388:	68 f3       	brcs	.-38     	; 0x5364 <modbus_update+0x13a>
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
					index +=10;
				}
				
				crc16 = calculateCRC(responseFrameSize - 2);
    538a:	83 e0       	ldi	r24, 0x03	; 3
    538c:	8a 0d       	add	r24, r10
    538e:	e1 de       	rcall	.-574    	; 0x5152 <calculateCRC>
				frame[responseFrameSize - 2] = crc16 >> 8; // split crc into 2 bytes
    5390:	2b 2d       	mov	r18, r11
    5392:	30 e0       	ldi	r19, 0x00	; 0
    5394:	f9 01       	movw	r30, r18
    5396:	ea 54       	subi	r30, 0x4A	; 74
    5398:	f8 4f       	sbci	r31, 0xF8	; 248
    539a:	90 83       	st	Z, r25
				frame[responseFrameSize - 1] = crc16 & 0xFF;
    539c:	f9 01       	movw	r30, r18
    539e:	e9 54       	subi	r30, 0x49	; 73
    53a0:	f8 4f       	sbci	r31, 0xF8	; 248
				//return;
				sendPacket(responseFrameSize);
    53a2:	80 83       	st	Z, r24
    53a4:	8b 2d       	mov	r24, r11
    53a6:	fe de       	rcall	.-516    	; 0x51a4 <sendPacket>
    53a8:	37 c0       	rjmp	.+110    	; 0x5418 <modbus_update+0x1ee>
				
			}
			
			else if (function == 16)
    53aa:	20 31       	cpi	r18, 0x10	; 16
    53ac:	09 f0       	breq	.+2      	; 0x53b0 <modbus_update+0x186>
    53ae:	34 c0       	rjmp	.+104    	; 0x5418 <modbus_update+0x1ee>
			{
				address = 7; // start at the 8th byte in the frame
				
				for (index = startingAddress; index < maxData; )
    53b0:	ce 15       	cp	r28, r14
    53b2:	df 05       	cpc	r29, r15
    53b4:	b0 f4       	brcc	.+44     	; 0x53e2 <modbus_update+0x1b8>
    53b6:	07 e0       	ldi	r16, 0x07	; 7
    53b8:	10 e0       	ldi	r17, 0x00	; 0
				{
					temp = ((frame[address] << 8) | frame[address + 1]);
    53ba:	f8 01       	movw	r30, r16
    53bc:	e8 54       	subi	r30, 0x48	; 72
    53be:	f8 4f       	sbci	r31, 0xF8	; 248
    53c0:	80 81       	ld	r24, Z
    53c2:	f8 01       	movw	r30, r16
    53c4:	e7 54       	subi	r30, 0x47	; 71
    53c6:	f8 4f       	sbci	r31, 0xF8	; 248
    53c8:	40 81       	ld	r20, Z
					writeSysReg(&EEpromData,index,temp);
    53ca:	50 e0       	ldi	r21, 0x00	; 0
    53cc:	58 2b       	or	r21, r24
    53ce:	be 01       	movw	r22, r28
    53d0:	88 ef       	ldi	r24, 0xF8	; 248
    53d2:	98 e0       	ldi	r25, 0x08	; 8
    53d4:	f6 dd       	rcall	.-1044   	; 0x4fc2 <writeSysReg>
					address += 2;
    53d6:	0e 5f       	subi	r16, 0xFE	; 254
    53d8:	1f 4f       	sbci	r17, 0xFF	; 255
					index+=10;
    53da:	2a 96       	adiw	r28, 0x0a	; 10
			
			else if (function == 16)
			{
				address = 7; // start at the 8th byte in the frame
				
				for (index = startingAddress; index < maxData; )
    53dc:	ce 15       	cp	r28, r14
    53de:	df 05       	cpc	r29, r15
    53e0:	60 f3       	brcs	.-40     	; 0x53ba <modbus_update+0x190>
					temp = ((frame[address] << 8) | frame[address + 1]);
					writeSysReg(&EEpromData,index,temp);
					address += 2;
					index+=10;
				}
				portENTER_CRITICAL();
    53e2:	0f b6       	in	r0, 0x3f	; 63
    53e4:	f8 94       	cli
    53e6:	0f 92       	push	r0
				eeprom_write_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));
    53e8:	40 e6       	ldi	r20, 0x60	; 96
    53ea:	50 e0       	ldi	r21, 0x00	; 0
    53ec:	60 e0       	ldi	r22, 0x00	; 0
    53ee:	70 e0       	ldi	r23, 0x00	; 0
    53f0:	88 ef       	ldi	r24, 0xF8	; 248
    53f2:	98 e0       	ldi	r25, 0x08	; 8
    53f4:	0e 94 ef 5c 	call	0xb9de	; 0xb9de <eeprom_write_block>
				portEXIT_CRITICAL();
    53f8:	0f 90       	pop	r0
				// only the first 6 bytes are used for CRC calculation
				crc16 = calculateCRC(6);
    53fa:	0f be       	out	0x3f, r0	; 63
    53fc:	86 e0       	ldi	r24, 0x06	; 6
				frame[6] = crc16 >> 8; // split crc into 2 bytes
    53fe:	a9 de       	rcall	.-686    	; 0x5152 <calculateCRC>
    5400:	e8 eb       	ldi	r30, 0xB8	; 184
    5402:	f7 e0       	ldi	r31, 0x07	; 7
				frame[7] = crc16 & 0xFF;
    5404:	96 83       	std	Z+6, r25	; 0x06
				
				// a function 16 response is an echo of the first 6 bytes from the request + 2 crc bytes
				
				sendPacket(8);
    5406:	87 83       	std	Z+7, r24	; 0x07
    5408:	88 e0       	ldi	r24, 0x08	; 8
    540a:	cc de       	rcall	.-616    	; 0x51a4 <sendPacket>
    540c:	05 c0       	rjmp	.+10     	; 0x5418 <modbus_update+0x1ee>
	if(port_0)buffer=xSerialAvailableChar( &xSerialPort );
	else if (port_3)buffer=xSerialAvailableChar( &xSerial3Port );
	
	//avrSerialPrintf("buffer = %d \r\n",buffer );
	//avrSerialPrintf("overflow= %d \r\n",overflow);
	if (overflow){ return;}//exceptionResponse(OVERFLOW_BUFF);
    540e:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <overflow>
    5412:	88 23       	and	r24, r24
    5414:	09 f4       	brne	.+2      	; 0x5418 <modbus_update+0x1ee>
    5416:	2e cf       	rjmp	.-420    	; 0x5274 <modbus_update+0x4a>
			
		}
		else {return;}// exceptionResponse(CHECKSUM_FAIL);
	}
	else {return;}//exceptionResponse(ERROR_FUNC);
}
    5418:	df 91       	pop	r29
    541a:	cf 91       	pop	r28
    541c:	1f 91       	pop	r17
    541e:	0f 91       	pop	r16
    5420:	ff 90       	pop	r15
    5422:	ef 90       	pop	r14
    5424:	df 90       	pop	r13
    5426:	cf 90       	pop	r12
    5428:	bf 90       	pop	r11
    542a:	af 90       	pop	r10
    542c:	08 95       	ret

0000542e <StartHeatPump>:
}

//------------------------------------------------

void StartHeatPump(TimerHandle_t xTimer)
{
    542e:	8f 92       	push	r8
    5430:	9f 92       	push	r9
    5432:	af 92       	push	r10
    5434:	bf 92       	push	r11
    5436:	cf 92       	push	r12
    5438:	df 92       	push	r13
    543a:	ef 92       	push	r14
    543c:	ff 92       	push	r15
    543e:	0f 93       	push	r16
    5440:	1f 93       	push	r17
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5442:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    5446:	fc 01       	movw	r30, r24
	TickType_t period;
	period=(TickType_t)EEpromData.Compressor_delay;
    5448:	20 91 f8 08 	lds	r18, 0x08F8	; 0x8008f8 <EEpromData>
	period*=1000;
    544c:	30 e0       	ldi	r19, 0x00	; 0
    544e:	a8 ee       	ldi	r26, 0xE8	; 232
    5450:	b3 e0       	ldi	r27, 0x03	; 3
    5452:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    5456:	4b 01       	movw	r8, r22
    5458:	5c 01       	movw	r10, r24
	//xSerialxPrintf(&xSerial3Port,"StartHeatPump\r\n");
	if((*pxTimerID) == uxStartDelayHeatPTimer_1_ID) {
    545a:	80 81       	ld	r24, Z
    545c:	82 30       	cpi	r24, 0x02	; 2
    545e:	09 f0       	breq	.+2      	; 0x5462 <StartHeatPump+0x34>
    5460:	40 c0       	rjmp	.+128    	; 0x54e2 <StartHeatPump+0xb4>
		xSerialxPrintf(&xSerial3Port,"StartHeatPump_1\r\n");
    5462:	8e eb       	ldi	r24, 0xBE	; 190
    5464:	92 e0       	ldi	r25, 0x02	; 2
    5466:	9f 93       	push	r25
    5468:	8f 93       	push	r24
    546a:	86 e9       	ldi	r24, 0x96	; 150
    546c:	97 e0       	ldi	r25, 0x07	; 7
    546e:	9f 93       	push	r25
    5470:	8f 93       	push	r24
    5472:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_1 ==0)
    5476:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    547a:	0f 90       	pop	r0
    547c:	0f 90       	pop	r0
    547e:	0f 90       	pop	r0
    5480:	0f 90       	pop	r0
    5482:	83 fd       	sbrc	r24, 3
    5484:	70 c0       	rjmp	.+224    	; 0x5566 <StartHeatPump+0x138>
		{
			
			//xSerialxPrintf(&xSerial3Port,"StartHeatPump_1\r\n");
			Comp_1.heatPOn=1;
    5486:	81 e0       	ldi	r24, 0x01	; 1
    5488:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <Comp_1+0xc>
			START_HEAT_PUMP_1;
    548c:	e2 e0       	ldi	r30, 0x02	; 2
    548e:	f1 e0       	ldi	r31, 0x01	; 1
    5490:	80 81       	ld	r24, Z
    5492:	88 60       	ori	r24, 0x08	; 8
    5494:	80 83       	st	Z, r24
			timeStartHeatP_1=time(&current_time);
    5496:	83 ef       	ldi	r24, 0xF3	; 243
    5498:	98 e0       	ldi	r25, 0x08	; 8
    549a:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    549e:	60 93 64 0a 	sts	0x0A64, r22	; 0x800a64 <timeStartHeatP_1>
    54a2:	70 93 65 0a 	sts	0x0A65, r23	; 0x800a65 <timeStartHeatP_1+0x1>
    54a6:	80 93 66 0a 	sts	0x0A66, r24	; 0x800a66 <timeStartHeatP_1+0x2>
    54aa:	90 93 67 0a 	sts	0x0A67, r25	; 0x800a67 <timeStartHeatP_1+0x3>
			EEpromData.number_turnon_hiter_1+=1;			
    54ae:	ea e3       	ldi	r30, 0x3A	; 58
    54b0:	f9 e0       	ldi	r31, 0x09	; 9
    54b2:	80 81       	ld	r24, Z
    54b4:	91 81       	ldd	r25, Z+1	; 0x01
    54b6:	01 96       	adiw	r24, 0x01	; 1
    54b8:	91 83       	std	Z+1, r25	; 0x01
    54ba:	80 83       	st	Z, r24
			xTimerChangePeriod( xStartCompressor_1,period, 100 );
    54bc:	0f 2e       	mov	r0, r31
    54be:	f4 e6       	ldi	r31, 0x64	; 100
    54c0:	cf 2e       	mov	r12, r31
    54c2:	d1 2c       	mov	r13, r1
    54c4:	e1 2c       	mov	r14, r1
    54c6:	f1 2c       	mov	r15, r1
    54c8:	f0 2d       	mov	r31, r0
    54ca:	00 e0       	ldi	r16, 0x00	; 0
    54cc:	10 e0       	ldi	r17, 0x00	; 0
    54ce:	a5 01       	movw	r20, r10
    54d0:	94 01       	movw	r18, r8
    54d2:	64 e0       	ldi	r22, 0x04	; 4
    54d4:	80 91 6e 0a 	lds	r24, 0x0A6E	; 0x800a6e <xStartCompressor_1>
    54d8:	90 91 6f 0a 	lds	r25, 0x0A6F	; 0x800a6f <xStartCompressor_1+0x1>
    54dc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    54e0:	42 c0       	rjmp	.+132    	; 0x5566 <StartHeatPump+0x138>
			
		}
	}

	else if((*pxTimerID) == uxStartDelayHeatPTimer_2_ID) {
    54e2:	8f 30       	cpi	r24, 0x0F	; 15
    54e4:	09 f0       	breq	.+2      	; 0x54e8 <StartHeatPump+0xba>
    54e6:	3f c0       	rjmp	.+126    	; 0x5566 <StartHeatPump+0x138>
		xSerialxPrintf(&xSerial3Port,"StartHeatPump_2\r\n");
    54e8:	80 ed       	ldi	r24, 0xD0	; 208
    54ea:	92 e0       	ldi	r25, 0x02	; 2
    54ec:	9f 93       	push	r25
    54ee:	8f 93       	push	r24
    54f0:	86 e9       	ldi	r24, 0x96	; 150
    54f2:	97 e0       	ldi	r25, 0x07	; 7
    54f4:	9f 93       	push	r25
    54f6:	8f 93       	push	r24
    54f8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_2 == 0)
    54fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5500:	0f 90       	pop	r0
    5502:	0f 90       	pop	r0
    5504:	0f 90       	pop	r0
    5506:	0f 90       	pop	r0
    5508:	84 fd       	sbrc	r24, 4
    550a:	2d c0       	rjmp	.+90     	; 0x5566 <StartHeatPump+0x138>
		{
			Comp_2.heatPOn=2;
    550c:	82 e0       	ldi	r24, 0x02	; 2
    550e:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <Comp_2+0xc>
			START_HEAT_PUMP_2;
    5512:	e2 e0       	ldi	r30, 0x02	; 2
    5514:	f1 e0       	ldi	r31, 0x01	; 1
    5516:	80 81       	ld	r24, Z
    5518:	80 61       	ori	r24, 0x10	; 16
    551a:	80 83       	st	Z, r24
			timeStartHeatP_2=time(&current_time);
    551c:	83 ef       	ldi	r24, 0xF3	; 243
    551e:	98 e0       	ldi	r25, 0x08	; 8
    5520:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5524:	60 93 78 0a 	sts	0x0A78, r22	; 0x800a78 <timeStartHeatP_2>
    5528:	70 93 79 0a 	sts	0x0A79, r23	; 0x800a79 <timeStartHeatP_2+0x1>
    552c:	80 93 7a 0a 	sts	0x0A7A, r24	; 0x800a7a <timeStartHeatP_2+0x2>
    5530:	90 93 7b 0a 	sts	0x0A7B, r25	; 0x800a7b <timeStartHeatP_2+0x3>
			EEpromData.number_turnon_hiter_2+=1;
    5534:	ee e4       	ldi	r30, 0x4E	; 78
    5536:	f9 e0       	ldi	r31, 0x09	; 9
    5538:	80 81       	ld	r24, Z
    553a:	91 81       	ldd	r25, Z+1	; 0x01
    553c:	01 96       	adiw	r24, 0x01	; 1
    553e:	91 83       	std	Z+1, r25	; 0x01
    5540:	80 83       	st	Z, r24
			xTimerChangePeriod( xStartCompressor_2,period, 100 );
    5542:	0f 2e       	mov	r0, r31
    5544:	f4 e6       	ldi	r31, 0x64	; 100
    5546:	cf 2e       	mov	r12, r31
    5548:	d1 2c       	mov	r13, r1
    554a:	e1 2c       	mov	r14, r1
    554c:	f1 2c       	mov	r15, r1
    554e:	f0 2d       	mov	r31, r0
    5550:	00 e0       	ldi	r16, 0x00	; 0
    5552:	10 e0       	ldi	r17, 0x00	; 0
    5554:	a5 01       	movw	r20, r10
    5556:	94 01       	movw	r18, r8
    5558:	64 e0       	ldi	r22, 0x04	; 4
    555a:	80 91 80 0a 	lds	r24, 0x0A80	; 0x800a80 <xStartCompressor_2>
    555e:	90 91 81 0a 	lds	r25, 0x0A81	; 0x800a81 <xStartCompressor_2+0x1>
    5562:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		}
		
	}
}
    5566:	1f 91       	pop	r17
    5568:	0f 91       	pop	r16
    556a:	ff 90       	pop	r15
    556c:	ef 90       	pop	r14
    556e:	df 90       	pop	r13
    5570:	cf 90       	pop	r12
    5572:	bf 90       	pop	r11
    5574:	af 90       	pop	r10
    5576:	9f 90       	pop	r9
    5578:	8f 90       	pop	r8
    557a:	08 95       	ret

0000557c <SwitchRev_2_Time>:
		xTimerStart(xSwitchRevTwo_2_time, 0);
	}
}
//-------------------------------------------------------------------------
void SwitchRev_2_Time(TimerHandle_t xTimer)
{
    557c:	8f 92       	push	r8
    557e:	9f 92       	push	r9
    5580:	af 92       	push	r10
    5582:	bf 92       	push	r11
    5584:	cf 92       	push	r12
    5586:	df 92       	push	r13
    5588:	ef 92       	push	r14
    558a:	ff 92       	push	r15
    558c:	0f 93       	push	r16
    558e:	1f 93       	push	r17
    5590:	cf 93       	push	r28
    5592:	df 93       	push	r29
    5594:	ac 01       	movw	r20, r24
	portBASE_TYPE *pxTimerID;
	
	TickType_t period;
	period=(TickType_t)EEpromData.HeatingPump_delay;
    5596:	20 91 fb 08 	lds	r18, 0x08FB	; 0x8008fb <EEpromData+0x3>
	period*=1000;
    559a:	30 e0       	ldi	r19, 0x00	; 0
    559c:	a8 ee       	ldi	r26, 0xE8	; 232
    559e:	b3 e0       	ldi	r27, 0x03	; 3
    55a0:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    55a4:	4b 01       	movw	r8, r22
    55a6:	5c 01       	movw	r10, r24
	pxTimerID = pvTimerGetTimerID(xTimer);
    55a8:	ca 01       	movw	r24, r20
    55aa:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    55ae:	ec 01       	movw	r28, r24
	
	//xSerialxPrintf(&xSerial3Port,"SwitchRev_2\r\n");
	
	if((*pxTimerID) == uxSwitchRevTwo_1_ID)
    55b0:	88 81       	ld	r24, Y
    55b2:	8d 30       	cpi	r24, 0x0D	; 13
    55b4:	29 f5       	brne	.+74     	; 0x5600 <SwitchRev_2_Time+0x84>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_ON_1_2\r\n");
    55b6:	82 ee       	ldi	r24, 0xE2	; 226
    55b8:	92 e0       	ldi	r25, 0x02	; 2
    55ba:	9f 93       	push	r25
    55bc:	8f 93       	push	r24
    55be:	86 e9       	ldi	r24, 0x96	; 150
    55c0:	97 e0       	ldi	r25, 0x07	; 7
    55c2:	9f 93       	push	r25
    55c4:	8f 93       	push	r24
    55c6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_REV_VALVE_1 == 0){START_REV_VALVE_1;}//
    55ca:	0f 90       	pop	r0
    55cc:	0f 90       	pop	r0
    55ce:	0f 90       	pop	r0
    55d0:	0f 90       	pop	r0
    55d2:	94 99       	sbic	0x12, 4	; 18
    55d4:	02 c0       	rjmp	.+4      	; 0x55da <SwitchRev_2_Time+0x5e>
    55d6:	a4 9a       	sbi	0x14, 4	; 20
    55d8:	01 c0       	rjmp	.+2      	; 0x55dc <SwitchRev_2_Time+0x60>
		else {STOP_REV_VALVE_1;}//xSerialxPrintf(&xSerial3Port,"SwitchRev_OFF_2\r\n");
    55da:	a4 98       	cbi	0x14, 4	; 20
		xTimerChangePeriod( xStopHeatPump_1,period, 100 );
    55dc:	0f 2e       	mov	r0, r31
    55de:	f4 e6       	ldi	r31, 0x64	; 100
    55e0:	cf 2e       	mov	r12, r31
    55e2:	d1 2c       	mov	r13, r1
    55e4:	e1 2c       	mov	r14, r1
    55e6:	f1 2c       	mov	r15, r1
    55e8:	f0 2d       	mov	r31, r0
    55ea:	00 e0       	ldi	r16, 0x00	; 0
    55ec:	10 e0       	ldi	r17, 0x00	; 0
    55ee:	a5 01       	movw	r20, r10
    55f0:	94 01       	movw	r18, r8
    55f2:	64 e0       	ldi	r22, 0x04	; 4
    55f4:	80 91 e5 08 	lds	r24, 0x08E5	; 0x8008e5 <xStopHeatPump_1>
    55f8:	90 91 e6 08 	lds	r25, 0x08E6	; 0x8008e6 <xStopHeatPump_1+0x1>
    55fc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
	if((*pxTimerID) == uxSwitchRevTwo_2_ID)
    5600:	88 81       	ld	r24, Y
    5602:	89 31       	cpi	r24, 0x19	; 25
    5604:	b9 f4       	brne	.+46     	; 0x5634 <SwitchRev_2_Time+0xb8>
	{
		//xSerialxPrintf(&xSerial3Port,"SwitchRev_2_2\r\n");
		if(PIN_REV_VALVE_2 == 0) START_REV_VALVE_2;
    5606:	93 99       	sbic	0x12, 3	; 18
    5608:	02 c0       	rjmp	.+4      	; 0x560e <SwitchRev_2_Time+0x92>
    560a:	a3 9a       	sbi	0x14, 3	; 20
    560c:	01 c0       	rjmp	.+2      	; 0x5610 <SwitchRev_2_Time+0x94>
		else STOP_REV_VALVE_2;
    560e:	a3 98       	cbi	0x14, 3	; 20
		xTimerChangePeriod( xStopHeatPump_2,period, 100 );
    5610:	0f 2e       	mov	r0, r31
    5612:	f4 e6       	ldi	r31, 0x64	; 100
    5614:	cf 2e       	mov	r12, r31
    5616:	d1 2c       	mov	r13, r1
    5618:	e1 2c       	mov	r14, r1
    561a:	f1 2c       	mov	r15, r1
    561c:	f0 2d       	mov	r31, r0
    561e:	00 e0       	ldi	r16, 0x00	; 0
    5620:	10 e0       	ldi	r17, 0x00	; 0
    5622:	a5 01       	movw	r20, r10
    5624:	94 01       	movw	r18, r8
    5626:	64 e0       	ldi	r22, 0x04	; 4
    5628:	80 91 5e 0a 	lds	r24, 0x0A5E	; 0x800a5e <xStopHeatPump_2>
    562c:	90 91 5f 0a 	lds	r25, 0x0A5F	; 0x800a5f <xStopHeatPump_2+0x1>
    5630:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
}
    5634:	df 91       	pop	r29
    5636:	cf 91       	pop	r28
    5638:	1f 91       	pop	r17
    563a:	0f 91       	pop	r16
    563c:	ff 90       	pop	r15
    563e:	ef 90       	pop	r14
    5640:	df 90       	pop	r13
    5642:	cf 90       	pop	r12
    5644:	bf 90       	pop	r11
    5646:	af 90       	pop	r10
    5648:	9f 90       	pop	r9
    564a:	8f 90       	pop	r8
    564c:	08 95       	ret

0000564e <StartCheckErrors>:
}
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------
void StartCheckErrors(TimerHandle_t xTimer)
{
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    564e:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
	
	
	if((*pxTimerID) == uxStartDelayChekErrTimer_1_ID){Comp_1.countError=0; Comp_1.checkErrors=true;xSerialxPrintf(&xSerial3Port,"StartCheckErrors_1\r\n");}
    5652:	fc 01       	movw	r30, r24
    5654:	80 81       	ld	r24, Z
    5656:	87 30       	cpi	r24, 0x07	; 7
    5658:	a1 f4       	brne	.+40     	; 0x5682 <StartCheckErrors+0x34>
    565a:	e8 e5       	ldi	r30, 0x58	; 88
    565c:	f9 e0       	ldi	r31, 0x09	; 9
    565e:	11 8a       	std	Z+17, r1	; 0x11
    5660:	81 e0       	ldi	r24, 0x01	; 1
    5662:	85 83       	std	Z+5, r24	; 0x05
    5664:	85 ef       	ldi	r24, 0xF5	; 245
    5666:	92 e0       	ldi	r25, 0x02	; 2
    5668:	9f 93       	push	r25
    566a:	8f 93       	push	r24
    566c:	86 e9       	ldi	r24, 0x96	; 150
    566e:	97 e0       	ldi	r25, 0x07	; 7
    5670:	9f 93       	push	r25
    5672:	8f 93       	push	r24
    5674:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    5678:	0f 90       	pop	r0
    567a:	0f 90       	pop	r0
    567c:	0f 90       	pop	r0
    567e:	0f 90       	pop	r0
    5680:	08 95       	ret
	else if((*pxTimerID) == uxStartDelayChekErrTimer_2_ID){Comp_2.countError=0;Comp_2.checkErrors=true;xSerialxPrintf(&xSerial3Port,"StartCheckErrors_2\r\n");}
    5682:	84 31       	cpi	r24, 0x14	; 20
    5684:	99 f4       	brne	.+38     	; 0x56ac <StartCheckErrors+0x5e>
    5686:	ee ed       	ldi	r30, 0xDE	; 222
    5688:	f9 e0       	ldi	r31, 0x09	; 9
    568a:	11 8a       	std	Z+17, r1	; 0x11
    568c:	81 e0       	ldi	r24, 0x01	; 1
    568e:	85 83       	std	Z+5, r24	; 0x05
    5690:	8a e0       	ldi	r24, 0x0A	; 10
    5692:	93 e0       	ldi	r25, 0x03	; 3
    5694:	9f 93       	push	r25
    5696:	8f 93       	push	r24
    5698:	86 e9       	ldi	r24, 0x96	; 150
    569a:	97 e0       	ldi	r25, 0x07	; 7
    569c:	9f 93       	push	r25
    569e:	8f 93       	push	r24
    56a0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    56a4:	0f 90       	pop	r0
    56a6:	0f 90       	pop	r0
    56a8:	0f 90       	pop	r0
    56aa:	0f 90       	pop	r0
    56ac:	08 95       	ret

000056ae <StartCheckTrv>:
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------
void StartCheckTrv(TimerHandle_t xTimer)
{
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    56ae:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	if((*pxTimerID) == uxStartDelayChekTrvTimer_1_ID)       {Comp_1.checkTrv=true;xSerialxPrintf(&xSerial3Port,"StartCheckTrv_1\r\n");}
    56b2:	fc 01       	movw	r30, r24
    56b4:	80 81       	ld	r24, Z
    56b6:	86 30       	cpi	r24, 0x06	; 6
    56b8:	91 f4       	brne	.+36     	; 0x56de <StartCheckTrv+0x30>
    56ba:	81 e0       	ldi	r24, 0x01	; 1
    56bc:	80 93 59 09 	sts	0x0959, r24	; 0x800959 <Comp_1+0x1>
    56c0:	8f e1       	ldi	r24, 0x1F	; 31
    56c2:	93 e0       	ldi	r25, 0x03	; 3
    56c4:	9f 93       	push	r25
    56c6:	8f 93       	push	r24
    56c8:	86 e9       	ldi	r24, 0x96	; 150
    56ca:	97 e0       	ldi	r25, 0x07	; 7
    56cc:	9f 93       	push	r25
    56ce:	8f 93       	push	r24
    56d0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    56d4:	0f 90       	pop	r0
    56d6:	0f 90       	pop	r0
    56d8:	0f 90       	pop	r0
    56da:	0f 90       	pop	r0
    56dc:	08 95       	ret
	else if((*pxTimerID) == uxStartDelayChekTrvTimer_2_ID) {Comp_2.checkTrv=true;xSerialxPrintf(&xSerial3Port,"StartCheckTrv_2\r\n");}
    56de:	83 31       	cpi	r24, 0x13	; 19
    56e0:	89 f4       	brne	.+34     	; 0x5704 <StartCheckTrv+0x56>
    56e2:	81 e0       	ldi	r24, 0x01	; 1
    56e4:	80 93 df 09 	sts	0x09DF, r24	; 0x8009df <Comp_2+0x1>
    56e8:	81 e3       	ldi	r24, 0x31	; 49
    56ea:	93 e0       	ldi	r25, 0x03	; 3
    56ec:	9f 93       	push	r25
    56ee:	8f 93       	push	r24
    56f0:	86 e9       	ldi	r24, 0x96	; 150
    56f2:	97 e0       	ldi	r25, 0x07	; 7
    56f4:	9f 93       	push	r25
    56f6:	8f 93       	push	r24
    56f8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    56fc:	0f 90       	pop	r0
    56fe:	0f 90       	pop	r0
    5700:	0f 90       	pop	r0
    5702:	0f 90       	pop	r0
    5704:	08 95       	ret

00005706 <StartReversingValve>:
		xTimerChangePeriod( xStartRevValve_2,period, 100 );
	}
	
}
//------------------------------------------------
void StartReversingValve(TimerHandle_t xTimer){
    5706:	8f 92       	push	r8
    5708:	9f 92       	push	r9
    570a:	af 92       	push	r10
    570c:	bf 92       	push	r11
    570e:	cf 92       	push	r12
    5710:	df 92       	push	r13
    5712:	ef 92       	push	r14
    5714:	ff 92       	push	r15
    5716:	0f 93       	push	r16
    5718:	1f 93       	push	r17
	TickType_t period;
	static time_t time_count_1;
	static time_t time_count_2;
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    571a:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
	if((*pxTimerID) == uxStartDelayRevVTimer_1_ID)
    571e:	fc 01       	movw	r30, r24
    5720:	80 81       	ld	r24, Z
    5722:	84 30       	cpi	r24, 0x04	; 4
    5724:	09 f0       	breq	.+2      	; 0x5728 <StartReversingValve+0x22>
    5726:	3a c1       	rjmp	.+628    	; 0x599c <StartReversingValve+0x296>
	{	period=(TickType_t)EEpromData.Three_Way_delay;
    5728:	20 91 fc 08 	lds	r18, 0x08FC	; 0x8008fc <EEpromData+0x4>
		period*=1000;
    572c:	30 e0       	ldi	r19, 0x00	; 0
    572e:	a8 ee       	ldi	r26, 0xE8	; 232
    5730:	b3 e0       	ldi	r27, 0x03	; 3
    5732:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
		period+=10000;
    5736:	4b 01       	movw	r8, r22
    5738:	5c 01       	movw	r10, r24
    573a:	f0 e1       	ldi	r31, 0x10	; 16
    573c:	8f 0e       	add	r8, r31
    573e:	f7 e2       	ldi	r31, 0x27	; 39
    5740:	9f 1e       	adc	r9, r31
    5742:	a1 1c       	adc	r10, r1
    5744:	b1 1c       	adc	r11, r1
		//////////////////////////////////////////

     //xSerialxPrintf(&xSerial3Port,"StartReversingValve\r\n");

		if(Comp_1.Cooling  )
    5746:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <Comp_1+0x3>
    574a:	88 23       	and	r24, r24
    574c:	09 f4       	brne	.+2      	; 0x5750 <StartReversingValve+0x4a>
    574e:	86 c0       	rjmp	.+268    	; 0x585c <StartReversingValve+0x156>
		{
			
			if(PIN_REV_VALVE_1 >0 && EEpromData.reversMod==1){
    5750:	94 9b       	sbis	0x12, 4	; 18
    5752:	59 c0       	rjmp	.+178    	; 0x5806 <StartReversingValve+0x100>
    5754:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <EEpromData+0x28>
    5758:	81 30       	cpi	r24, 0x01	; 1
    575a:	09 f0       	breq	.+2      	; 0x575e <StartReversingValve+0x58>
    575c:	54 c0       	rjmp	.+168    	; 0x5806 <StartReversingValve+0x100>
				
				STOP_REV_VALVE_1;//
    575e:	a4 98       	cbi	0x14, 4	; 20
				xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    5760:	83 e4       	ldi	r24, 0x43	; 67
    5762:	93 e0       	ldi	r25, 0x03	; 3
    5764:	9f 93       	push	r25
    5766:	8f 93       	push	r24
    5768:	86 e9       	ldi	r24, 0x96	; 150
    576a:	97 e0       	ldi	r25, 0x07	; 7
    576c:	9f 93       	push	r25
    576e:	8f 93       	push	r24
    5770:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_1.revVOn=0;
    5774:	10 92 66 09 	sts	0x0966, r1	; 0x800966 <Comp_1+0xe>
				time_count_1+= difftime(time(&current_time), timeStartRevV_1);
    5778:	c0 90 87 0a 	lds	r12, 0x0A87	; 0x800a87 <timeStartRevV_1>
    577c:	d0 90 88 0a 	lds	r13, 0x0A88	; 0x800a88 <timeStartRevV_1+0x1>
    5780:	e0 90 89 0a 	lds	r14, 0x0A89	; 0x800a89 <timeStartRevV_1+0x2>
    5784:	f0 90 8a 0a 	lds	r15, 0x0A8A	; 0x800a8a <timeStartRevV_1+0x3>
    5788:	83 ef       	ldi	r24, 0xF3	; 243
    578a:	98 e0       	ldi	r25, 0x08	; 8
    578c:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5790:	a7 01       	movw	r20, r14
    5792:	96 01       	movw	r18, r12
    5794:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5798:	c0 90 3d 07 	lds	r12, 0x073D	; 0x80073d <time_count_1.3175>
    579c:	d0 90 3e 07 	lds	r13, 0x073E	; 0x80073e <time_count_1.3175+0x1>
    57a0:	e0 90 3f 07 	lds	r14, 0x073F	; 0x80073f <time_count_1.3175+0x2>
    57a4:	f0 90 40 07 	lds	r15, 0x0740	; 0x800740 <time_count_1.3175+0x3>
    57a8:	dc 01       	movw	r26, r24
    57aa:	cb 01       	movw	r24, r22
    57ac:	8c 0d       	add	r24, r12
    57ae:	9d 1d       	adc	r25, r13
    57b0:	ae 1d       	adc	r26, r14
    57b2:	bf 1d       	adc	r27, r15
    57b4:	80 93 3d 07 	sts	0x073D, r24	; 0x80073d <time_count_1.3175>
    57b8:	90 93 3e 07 	sts	0x073E, r25	; 0x80073e <time_count_1.3175+0x1>
    57bc:	a0 93 3f 07 	sts	0x073F, r26	; 0x80073f <time_count_1.3175+0x2>
    57c0:	b0 93 40 07 	sts	0x0740, r27	; 0x800740 <time_count_1.3175+0x3>
				if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    57c4:	0f 90       	pop	r0
    57c6:	0f 90       	pop	r0
    57c8:	0f 90       	pop	r0
    57ca:	0f 90       	pop	r0
    57cc:	81 31       	cpi	r24, 0x11	; 17
    57ce:	9e 40       	sbci	r25, 0x0E	; 14
    57d0:	a1 05       	cpc	r26, r1
    57d2:	b1 05       	cpc	r27, r1
    57d4:	08 f4       	brcc	.+2      	; 0x57d8 <StartReversingValve+0xd2>
    57d6:	42 c0       	rjmp	.+132    	; 0x585c <StartReversingValve+0x156>
    57d8:	e8 ef       	ldi	r30, 0xF8	; 248
    57da:	f8 e0       	ldi	r31, 0x08	; 8
    57dc:	80 ad       	ldd	r24, Z+56	; 0x38
    57de:	91 ad       	ldd	r25, Z+57	; 0x39
    57e0:	01 96       	adiw	r24, 0x01	; 1
    57e2:	91 af       	std	Z+57, r25	; 0x39
    57e4:	80 af       	std	Z+56, r24	; 0x38
    57e6:	40 e6       	ldi	r20, 0x60	; 96
    57e8:	50 e0       	ldi	r21, 0x00	; 0
    57ea:	60 e0       	ldi	r22, 0x00	; 0
    57ec:	70 e0       	ldi	r23, 0x00	; 0
    57ee:	cf 01       	movw	r24, r30
    57f0:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <eeprom_update_block>
    57f4:	10 92 3d 07 	sts	0x073D, r1	; 0x80073d <time_count_1.3175>
    57f8:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <time_count_1.3175+0x1>
    57fc:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <time_count_1.3175+0x2>
    5800:	10 92 40 07 	sts	0x0740, r1	; 0x800740 <time_count_1.3175+0x3>
    5804:	2b c0       	rjmp	.+86     	; 0x585c <StartReversingValve+0x156>
				
				
			}
			else if(PIN_REV_VALVE_1 == 0 && EEpromData.reversMod==0){
    5806:	94 99       	sbic	0x12, 4	; 18
    5808:	29 c0       	rjmp	.+82     	; 0x585c <StartReversingValve+0x156>
    580a:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <EEpromData+0x28>
    580e:	81 11       	cpse	r24, r1
    5810:	25 c0       	rjmp	.+74     	; 0x585c <StartReversingValve+0x156>
				START_REV_VALVE_1;
    5812:	a4 9a       	sbi	0x14, 4	; 20
				Comp_1.revVOn=1;
    5814:	81 e0       	ldi	r24, 0x01	; 1
    5816:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <Comp_1+0xe>
				xSerialxPrintf(&xSerial3Port,"StarRevValve_1\r\n");
    581a:	84 e5       	ldi	r24, 0x54	; 84
    581c:	93 e0       	ldi	r25, 0x03	; 3
    581e:	9f 93       	push	r25
    5820:	8f 93       	push	r24
    5822:	86 e9       	ldi	r24, 0x96	; 150
    5824:	97 e0       	ldi	r25, 0x07	; 7
    5826:	9f 93       	push	r25
    5828:	8f 93       	push	r24
    582a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_1=time(&current_time);
    582e:	83 ef       	ldi	r24, 0xF3	; 243
    5830:	98 e0       	ldi	r25, 0x08	; 8
    5832:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5836:	60 93 87 0a 	sts	0x0A87, r22	; 0x800a87 <timeStartRevV_1>
    583a:	70 93 88 0a 	sts	0x0A88, r23	; 0x800a88 <timeStartRevV_1+0x1>
    583e:	80 93 89 0a 	sts	0x0A89, r24	; 0x800a89 <timeStartRevV_1+0x2>
    5842:	90 93 8a 0a 	sts	0x0A8A, r25	; 0x800a8a <timeStartRevV_1+0x3>
				EEpromData.number_turnon_revers_1+=1;
    5846:	ec e3       	ldi	r30, 0x3C	; 60
    5848:	f9 e0       	ldi	r31, 0x09	; 9
    584a:	80 81       	ld	r24, Z
    584c:	91 81       	ldd	r25, Z+1	; 0x01
    584e:	01 96       	adiw	r24, 0x01	; 1
    5850:	91 83       	std	Z+1, r25	; 0x01
    5852:	80 83       	st	Z, r24
    5854:	0f 90       	pop	r0
    5856:	0f 90       	pop	r0
    5858:	0f 90       	pop	r0
    585a:	0f 90       	pop	r0
			}
		}
		if(Comp_1.heatingWater || Comp_1.Heating)
    585c:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <Comp_1+0x4>
    5860:	81 11       	cpse	r24, r1
    5862:	05 c0       	rjmp	.+10     	; 0x586e <StartReversingValve+0x168>
    5864:	80 91 5a 09 	lds	r24, 0x095A	; 0x80095a <Comp_1+0x2>
    5868:	88 23       	and	r24, r24
    586a:	09 f4       	brne	.+2      	; 0x586e <StartReversingValve+0x168>
    586c:	84 c0       	rjmp	.+264    	; 0x5976 <StartReversingValve+0x270>
		{
			
			if(PIN_REV_VALVE_1 > 0 && EEpromData.reversMod==0){//
    586e:	94 9b       	sbis	0x12, 4	; 18
    5870:	58 c0       	rjmp	.+176    	; 0x5922 <StartReversingValve+0x21c>
    5872:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <EEpromData+0x28>
    5876:	81 11       	cpse	r24, r1
    5878:	54 c0       	rjmp	.+168    	; 0x5922 <StartReversingValve+0x21c>
				
				STOP_REV_VALVE_1;
    587a:	a4 98       	cbi	0x14, 4	; 20
				
				xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    587c:	83 e4       	ldi	r24, 0x43	; 67
    587e:	93 e0       	ldi	r25, 0x03	; 3
    5880:	9f 93       	push	r25
    5882:	8f 93       	push	r24
    5884:	86 e9       	ldi	r24, 0x96	; 150
    5886:	97 e0       	ldi	r25, 0x07	; 7
    5888:	9f 93       	push	r25
    588a:	8f 93       	push	r24
    588c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_1.revVOn=0;
    5890:	10 92 66 09 	sts	0x0966, r1	; 0x800966 <Comp_1+0xe>
				time_count_1+= difftime(time(&current_time), timeStartRevV_1);
    5894:	c0 90 87 0a 	lds	r12, 0x0A87	; 0x800a87 <timeStartRevV_1>
    5898:	d0 90 88 0a 	lds	r13, 0x0A88	; 0x800a88 <timeStartRevV_1+0x1>
    589c:	e0 90 89 0a 	lds	r14, 0x0A89	; 0x800a89 <timeStartRevV_1+0x2>
    58a0:	f0 90 8a 0a 	lds	r15, 0x0A8A	; 0x800a8a <timeStartRevV_1+0x3>
    58a4:	83 ef       	ldi	r24, 0xF3	; 243
    58a6:	98 e0       	ldi	r25, 0x08	; 8
    58a8:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    58ac:	a7 01       	movw	r20, r14
    58ae:	96 01       	movw	r18, r12
    58b0:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    58b4:	c0 90 3d 07 	lds	r12, 0x073D	; 0x80073d <time_count_1.3175>
    58b8:	d0 90 3e 07 	lds	r13, 0x073E	; 0x80073e <time_count_1.3175+0x1>
    58bc:	e0 90 3f 07 	lds	r14, 0x073F	; 0x80073f <time_count_1.3175+0x2>
    58c0:	f0 90 40 07 	lds	r15, 0x0740	; 0x800740 <time_count_1.3175+0x3>
    58c4:	dc 01       	movw	r26, r24
    58c6:	cb 01       	movw	r24, r22
    58c8:	8c 0d       	add	r24, r12
    58ca:	9d 1d       	adc	r25, r13
    58cc:	ae 1d       	adc	r26, r14
    58ce:	bf 1d       	adc	r27, r15
    58d0:	80 93 3d 07 	sts	0x073D, r24	; 0x80073d <time_count_1.3175>
    58d4:	90 93 3e 07 	sts	0x073E, r25	; 0x80073e <time_count_1.3175+0x1>
    58d8:	a0 93 3f 07 	sts	0x073F, r26	; 0x80073f <time_count_1.3175+0x2>
    58dc:	b0 93 40 07 	sts	0x0740, r27	; 0x800740 <time_count_1.3175+0x3>
				if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    58e0:	0f 90       	pop	r0
    58e2:	0f 90       	pop	r0
    58e4:	0f 90       	pop	r0
    58e6:	0f 90       	pop	r0
    58e8:	81 31       	cpi	r24, 0x11	; 17
    58ea:	9e 40       	sbci	r25, 0x0E	; 14
    58ec:	a1 05       	cpc	r26, r1
    58ee:	b1 05       	cpc	r27, r1
    58f0:	08 f4       	brcc	.+2      	; 0x58f4 <StartReversingValve+0x1ee>
    58f2:	41 c0       	rjmp	.+130    	; 0x5976 <StartReversingValve+0x270>
    58f4:	e8 ef       	ldi	r30, 0xF8	; 248
    58f6:	f8 e0       	ldi	r31, 0x08	; 8
    58f8:	80 ad       	ldd	r24, Z+56	; 0x38
    58fa:	91 ad       	ldd	r25, Z+57	; 0x39
    58fc:	01 96       	adiw	r24, 0x01	; 1
    58fe:	91 af       	std	Z+57, r25	; 0x39
    5900:	80 af       	std	Z+56, r24	; 0x38
    5902:	40 e6       	ldi	r20, 0x60	; 96
    5904:	50 e0       	ldi	r21, 0x00	; 0
    5906:	60 e0       	ldi	r22, 0x00	; 0
    5908:	70 e0       	ldi	r23, 0x00	; 0
    590a:	cf 01       	movw	r24, r30
    590c:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <eeprom_update_block>
    5910:	10 92 3d 07 	sts	0x073D, r1	; 0x80073d <time_count_1.3175>
    5914:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <time_count_1.3175+0x1>
    5918:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <time_count_1.3175+0x2>
    591c:	10 92 40 07 	sts	0x0740, r1	; 0x800740 <time_count_1.3175+0x3>
    5920:	2a c0       	rjmp	.+84     	; 0x5976 <StartReversingValve+0x270>
				
			}
			else if(PIN_REV_VALVE_1 == 0 && EEpromData.reversMod==1){
    5922:	94 99       	sbic	0x12, 4	; 18
    5924:	28 c0       	rjmp	.+80     	; 0x5976 <StartReversingValve+0x270>
    5926:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <EEpromData+0x28>
    592a:	81 30       	cpi	r24, 0x01	; 1
    592c:	21 f5       	brne	.+72     	; 0x5976 <StartReversingValve+0x270>
				START_REV_VALVE_1;
    592e:	a4 9a       	sbi	0x14, 4	; 20
				Comp_1.revVOn=1;
    5930:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <Comp_1+0xe>
				xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    5934:	83 e4       	ldi	r24, 0x43	; 67
    5936:	93 e0       	ldi	r25, 0x03	; 3
    5938:	9f 93       	push	r25
    593a:	8f 93       	push	r24
    593c:	86 e9       	ldi	r24, 0x96	; 150
    593e:	97 e0       	ldi	r25, 0x07	; 7
    5940:	9f 93       	push	r25
    5942:	8f 93       	push	r24
    5944:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_1=time(&current_time);
    5948:	83 ef       	ldi	r24, 0xF3	; 243
    594a:	98 e0       	ldi	r25, 0x08	; 8
    594c:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5950:	60 93 87 0a 	sts	0x0A87, r22	; 0x800a87 <timeStartRevV_1>
    5954:	70 93 88 0a 	sts	0x0A88, r23	; 0x800a88 <timeStartRevV_1+0x1>
    5958:	80 93 89 0a 	sts	0x0A89, r24	; 0x800a89 <timeStartRevV_1+0x2>
    595c:	90 93 8a 0a 	sts	0x0A8A, r25	; 0x800a8a <timeStartRevV_1+0x3>
				EEpromData.number_turnon_revers_1+=1;
    5960:	ec e3       	ldi	r30, 0x3C	; 60
    5962:	f9 e0       	ldi	r31, 0x09	; 9
    5964:	80 81       	ld	r24, Z
    5966:	91 81       	ldd	r25, Z+1	; 0x01
    5968:	01 96       	adiw	r24, 0x01	; 1
    596a:	91 83       	std	Z+1, r25	; 0x01
    596c:	80 83       	st	Z, r24
    596e:	0f 90       	pop	r0
    5970:	0f 90       	pop	r0
    5972:	0f 90       	pop	r0
    5974:	0f 90       	pop	r0
			}
		}
		
		xTimerChangePeriod( xStartThreeWay,period, 100 );
    5976:	0f 2e       	mov	r0, r31
    5978:	f4 e6       	ldi	r31, 0x64	; 100
    597a:	cf 2e       	mov	r12, r31
    597c:	d1 2c       	mov	r13, r1
    597e:	e1 2c       	mov	r14, r1
    5980:	f1 2c       	mov	r15, r1
    5982:	f0 2d       	mov	r31, r0
    5984:	00 e0       	ldi	r16, 0x00	; 0
    5986:	10 e0       	ldi	r17, 0x00	; 0
    5988:	a5 01       	movw	r20, r10
    598a:	94 01       	movw	r18, r8
    598c:	64 e0       	ldi	r22, 0x04	; 4
    598e:	80 91 cc 09 	lds	r24, 0x09CC	; 0x8009cc <xStartThreeWay>
    5992:	90 91 cd 09 	lds	r25, 0x09CD	; 0x8009cd <xStartThreeWay+0x1>
    5996:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    599a:	34 c1       	rjmp	.+616    	; 0x5c04 <StartReversingValve+0x4fe>
		
	}
	else if((*pxTimerID) == uxStartDelayRevVTimer_2_ID)
    599c:	81 31       	cpi	r24, 0x11	; 17
    599e:	09 f0       	breq	.+2      	; 0x59a2 <StartReversingValve+0x29c>
    59a0:	31 c1       	rjmp	.+610    	; 0x5c04 <StartReversingValve+0x4fe>
	{
		period=(TickType_t)EEpromData.HeatingPump_delay;
    59a2:	20 91 fb 08 	lds	r18, 0x08FB	; 0x8008fb <EEpromData+0x3>
		period*=1000;
    59a6:	30 e0       	ldi	r19, 0x00	; 0
    59a8:	a8 ee       	ldi	r26, 0xE8	; 232
    59aa:	b3 e0       	ldi	r27, 0x03	; 3
    59ac:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    59b0:	4b 01       	movw	r8, r22
    59b2:	5c 01       	movw	r10, r24
		
		if(Comp_2.Cooling)
    59b4:	80 91 e1 09 	lds	r24, 0x09E1	; 0x8009e1 <Comp_2+0x3>
    59b8:	88 23       	and	r24, r24
    59ba:	09 f4       	brne	.+2      	; 0x59be <StartReversingValve+0x2b8>
    59bc:	87 c0       	rjmp	.+270    	; 0x5acc <StartReversingValve+0x3c6>
		{
			if(PIN_REV_VALVE_2 >0 && EEpromData.reversMod==1){
    59be:	93 9b       	sbis	0x12, 3	; 18
    59c0:	5a c0       	rjmp	.+180    	; 0x5a76 <StartReversingValve+0x370>
    59c2:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <EEpromData+0x28>
    59c6:	81 30       	cpi	r24, 0x01	; 1
    59c8:	09 f0       	breq	.+2      	; 0x59cc <StartReversingValve+0x2c6>
    59ca:	55 c0       	rjmp	.+170    	; 0x5a76 <StartReversingValve+0x370>
				
				STOP_REV_VALVE_2;//
    59cc:	a3 98       	cbi	0x14, 3	; 20
				
				xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    59ce:	85 e6       	ldi	r24, 0x65	; 101
    59d0:	93 e0       	ldi	r25, 0x03	; 3
    59d2:	9f 93       	push	r25
    59d4:	8f 93       	push	r24
    59d6:	86 e9       	ldi	r24, 0x96	; 150
    59d8:	97 e0       	ldi	r25, 0x07	; 7
    59da:	9f 93       	push	r25
    59dc:	8f 93       	push	r24
    59de:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_2.revVOn=0;
    59e2:	10 92 ec 09 	sts	0x09EC, r1	; 0x8009ec <Comp_2+0xe>
				time_count_2+= difftime(time(&current_time), timeStartRevV_2);
    59e6:	c0 90 a2 0a 	lds	r12, 0x0AA2	; 0x800aa2 <timeStartRevV_2>
    59ea:	d0 90 a3 0a 	lds	r13, 0x0AA3	; 0x800aa3 <timeStartRevV_2+0x1>
    59ee:	e0 90 a4 0a 	lds	r14, 0x0AA4	; 0x800aa4 <timeStartRevV_2+0x2>
    59f2:	f0 90 a5 0a 	lds	r15, 0x0AA5	; 0x800aa5 <timeStartRevV_2+0x3>
    59f6:	83 ef       	ldi	r24, 0xF3	; 243
    59f8:	98 e0       	ldi	r25, 0x08	; 8
    59fa:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    59fe:	a7 01       	movw	r20, r14
    5a00:	96 01       	movw	r18, r12
    5a02:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5a06:	c0 90 39 07 	lds	r12, 0x0739	; 0x800739 <time_count_2.3176>
    5a0a:	d0 90 3a 07 	lds	r13, 0x073A	; 0x80073a <time_count_2.3176+0x1>
    5a0e:	e0 90 3b 07 	lds	r14, 0x073B	; 0x80073b <time_count_2.3176+0x2>
    5a12:	f0 90 3c 07 	lds	r15, 0x073C	; 0x80073c <time_count_2.3176+0x3>
    5a16:	dc 01       	movw	r26, r24
    5a18:	cb 01       	movw	r24, r22
    5a1a:	8c 0d       	add	r24, r12
    5a1c:	9d 1d       	adc	r25, r13
    5a1e:	ae 1d       	adc	r26, r14
    5a20:	bf 1d       	adc	r27, r15
    5a22:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <time_count_2.3176>
    5a26:	90 93 3a 07 	sts	0x073A, r25	; 0x80073a <time_count_2.3176+0x1>
    5a2a:	a0 93 3b 07 	sts	0x073B, r26	; 0x80073b <time_count_2.3176+0x2>
    5a2e:	b0 93 3c 07 	sts	0x073C, r27	; 0x80073c <time_count_2.3176+0x3>
				if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    5a32:	0f 90       	pop	r0
    5a34:	0f 90       	pop	r0
    5a36:	0f 90       	pop	r0
    5a38:	0f 90       	pop	r0
    5a3a:	81 31       	cpi	r24, 0x11	; 17
    5a3c:	9e 40       	sbci	r25, 0x0E	; 14
    5a3e:	a1 05       	cpc	r26, r1
    5a40:	b1 05       	cpc	r27, r1
    5a42:	08 f4       	brcc	.+2      	; 0x5a46 <StartReversingValve+0x340>
    5a44:	43 c0       	rjmp	.+134    	; 0x5acc <StartReversingValve+0x3c6>
    5a46:	e6 e4       	ldi	r30, 0x46	; 70
    5a48:	f9 e0       	ldi	r31, 0x09	; 9
    5a4a:	80 81       	ld	r24, Z
    5a4c:	91 81       	ldd	r25, Z+1	; 0x01
    5a4e:	01 96       	adiw	r24, 0x01	; 1
    5a50:	91 83       	std	Z+1, r25	; 0x01
    5a52:	80 83       	st	Z, r24
    5a54:	40 e6       	ldi	r20, 0x60	; 96
    5a56:	50 e0       	ldi	r21, 0x00	; 0
    5a58:	60 e0       	ldi	r22, 0x00	; 0
    5a5a:	70 e0       	ldi	r23, 0x00	; 0
    5a5c:	88 ef       	ldi	r24, 0xF8	; 248
    5a5e:	98 e0       	ldi	r25, 0x08	; 8
    5a60:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <eeprom_update_block>
    5a64:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <time_count_2.3176>
    5a68:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <time_count_2.3176+0x1>
    5a6c:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <time_count_2.3176+0x2>
    5a70:	10 92 3c 07 	sts	0x073C, r1	; 0x80073c <time_count_2.3176+0x3>
    5a74:	2b c0       	rjmp	.+86     	; 0x5acc <StartReversingValve+0x3c6>
				
				
			}
			else if(PIN_REV_VALVE_2 == 0 && EEpromData.reversMod==0){
    5a76:	93 99       	sbic	0x12, 3	; 18
    5a78:	29 c0       	rjmp	.+82     	; 0x5acc <StartReversingValve+0x3c6>
    5a7a:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <EEpromData+0x28>
    5a7e:	81 11       	cpse	r24, r1
    5a80:	25 c0       	rjmp	.+74     	; 0x5acc <StartReversingValve+0x3c6>
				START_REV_VALVE_2;
    5a82:	a3 9a       	sbi	0x14, 3	; 20
				Comp_1.revVOn=1;
    5a84:	81 e0       	ldi	r24, 0x01	; 1
    5a86:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <Comp_1+0xe>
				xSerialxPrintf(&xSerial3Port,"StarRevValve_2\r\n");
    5a8a:	86 e7       	ldi	r24, 0x76	; 118
    5a8c:	93 e0       	ldi	r25, 0x03	; 3
    5a8e:	9f 93       	push	r25
    5a90:	8f 93       	push	r24
    5a92:	86 e9       	ldi	r24, 0x96	; 150
    5a94:	97 e0       	ldi	r25, 0x07	; 7
    5a96:	9f 93       	push	r25
    5a98:	8f 93       	push	r24
    5a9a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_2=time(&current_time);
    5a9e:	83 ef       	ldi	r24, 0xF3	; 243
    5aa0:	98 e0       	ldi	r25, 0x08	; 8
    5aa2:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5aa6:	60 93 a2 0a 	sts	0x0AA2, r22	; 0x800aa2 <timeStartRevV_2>
    5aaa:	70 93 a3 0a 	sts	0x0AA3, r23	; 0x800aa3 <timeStartRevV_2+0x1>
    5aae:	80 93 a4 0a 	sts	0x0AA4, r24	; 0x800aa4 <timeStartRevV_2+0x2>
    5ab2:	90 93 a5 0a 	sts	0x0AA5, r25	; 0x800aa5 <timeStartRevV_2+0x3>
				EEpromData.number_turnon_revers_2+=1;
    5ab6:	e0 e5       	ldi	r30, 0x50	; 80
    5ab8:	f9 e0       	ldi	r31, 0x09	; 9
    5aba:	80 81       	ld	r24, Z
    5abc:	91 81       	ldd	r25, Z+1	; 0x01
    5abe:	01 96       	adiw	r24, 0x01	; 1
    5ac0:	91 83       	std	Z+1, r25	; 0x01
    5ac2:	80 83       	st	Z, r24
    5ac4:	0f 90       	pop	r0
    5ac6:	0f 90       	pop	r0
    5ac8:	0f 90       	pop	r0
    5aca:	0f 90       	pop	r0
			}
		}
		if(Comp_2.Heating)
    5acc:	80 91 e0 09 	lds	r24, 0x09E0	; 0x8009e0 <Comp_2+0x2>
    5ad0:	88 23       	and	r24, r24
    5ad2:	09 f4       	brne	.+2      	; 0x5ad6 <StartReversingValve+0x3d0>
    5ad4:	85 c0       	rjmp	.+266    	; 0x5be0 <StartReversingValve+0x4da>
		{
			if(PIN_REV_VALVE_2 > 0 && EEpromData.reversMod==0){//
    5ad6:	93 9b       	sbis	0x12, 3	; 18
    5ad8:	59 c0       	rjmp	.+178    	; 0x5b8c <StartReversingValve+0x486>
    5ada:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <EEpromData+0x28>
    5ade:	81 11       	cpse	r24, r1
    5ae0:	55 c0       	rjmp	.+170    	; 0x5b8c <StartReversingValve+0x486>
				
				STOP_REV_VALVE_2;
    5ae2:	a3 98       	cbi	0x14, 3	; 20
				
				xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    5ae4:	85 e6       	ldi	r24, 0x65	; 101
    5ae6:	93 e0       	ldi	r25, 0x03	; 3
    5ae8:	9f 93       	push	r25
    5aea:	8f 93       	push	r24
    5aec:	86 e9       	ldi	r24, 0x96	; 150
    5aee:	97 e0       	ldi	r25, 0x07	; 7
    5af0:	9f 93       	push	r25
    5af2:	8f 93       	push	r24
    5af4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_2.revVOn=0;
    5af8:	10 92 ec 09 	sts	0x09EC, r1	; 0x8009ec <Comp_2+0xe>
				time_count_2+= difftime(time(&current_time), timeStartRevV_2);
    5afc:	c0 90 a2 0a 	lds	r12, 0x0AA2	; 0x800aa2 <timeStartRevV_2>
    5b00:	d0 90 a3 0a 	lds	r13, 0x0AA3	; 0x800aa3 <timeStartRevV_2+0x1>
    5b04:	e0 90 a4 0a 	lds	r14, 0x0AA4	; 0x800aa4 <timeStartRevV_2+0x2>
    5b08:	f0 90 a5 0a 	lds	r15, 0x0AA5	; 0x800aa5 <timeStartRevV_2+0x3>
    5b0c:	83 ef       	ldi	r24, 0xF3	; 243
    5b0e:	98 e0       	ldi	r25, 0x08	; 8
    5b10:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5b14:	a7 01       	movw	r20, r14
    5b16:	96 01       	movw	r18, r12
    5b18:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5b1c:	c0 90 39 07 	lds	r12, 0x0739	; 0x800739 <time_count_2.3176>
    5b20:	d0 90 3a 07 	lds	r13, 0x073A	; 0x80073a <time_count_2.3176+0x1>
    5b24:	e0 90 3b 07 	lds	r14, 0x073B	; 0x80073b <time_count_2.3176+0x2>
    5b28:	f0 90 3c 07 	lds	r15, 0x073C	; 0x80073c <time_count_2.3176+0x3>
    5b2c:	dc 01       	movw	r26, r24
    5b2e:	cb 01       	movw	r24, r22
    5b30:	8c 0d       	add	r24, r12
    5b32:	9d 1d       	adc	r25, r13
    5b34:	ae 1d       	adc	r26, r14
    5b36:	bf 1d       	adc	r27, r15
    5b38:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <time_count_2.3176>
    5b3c:	90 93 3a 07 	sts	0x073A, r25	; 0x80073a <time_count_2.3176+0x1>
    5b40:	a0 93 3b 07 	sts	0x073B, r26	; 0x80073b <time_count_2.3176+0x2>
    5b44:	b0 93 3c 07 	sts	0x073C, r27	; 0x80073c <time_count_2.3176+0x3>
				if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    5b48:	0f 90       	pop	r0
    5b4a:	0f 90       	pop	r0
    5b4c:	0f 90       	pop	r0
    5b4e:	0f 90       	pop	r0
    5b50:	81 31       	cpi	r24, 0x11	; 17
    5b52:	9e 40       	sbci	r25, 0x0E	; 14
    5b54:	a1 05       	cpc	r26, r1
    5b56:	b1 05       	cpc	r27, r1
    5b58:	08 f4       	brcc	.+2      	; 0x5b5c <StartReversingValve+0x456>
    5b5a:	42 c0       	rjmp	.+132    	; 0x5be0 <StartReversingValve+0x4da>
    5b5c:	e6 e4       	ldi	r30, 0x46	; 70
    5b5e:	f9 e0       	ldi	r31, 0x09	; 9
    5b60:	80 81       	ld	r24, Z
    5b62:	91 81       	ldd	r25, Z+1	; 0x01
    5b64:	01 96       	adiw	r24, 0x01	; 1
    5b66:	91 83       	std	Z+1, r25	; 0x01
    5b68:	80 83       	st	Z, r24
    5b6a:	40 e6       	ldi	r20, 0x60	; 96
    5b6c:	50 e0       	ldi	r21, 0x00	; 0
    5b6e:	60 e0       	ldi	r22, 0x00	; 0
    5b70:	70 e0       	ldi	r23, 0x00	; 0
    5b72:	88 ef       	ldi	r24, 0xF8	; 248
    5b74:	98 e0       	ldi	r25, 0x08	; 8
    5b76:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <eeprom_update_block>
    5b7a:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <time_count_2.3176>
    5b7e:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <time_count_2.3176+0x1>
    5b82:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <time_count_2.3176+0x2>
    5b86:	10 92 3c 07 	sts	0x073C, r1	; 0x80073c <time_count_2.3176+0x3>
    5b8a:	2a c0       	rjmp	.+84     	; 0x5be0 <StartReversingValve+0x4da>
				
			}
			else if(PIN_REV_VALVE_2 == 0 && EEpromData.reversMod==1){
    5b8c:	93 99       	sbic	0x12, 3	; 18
    5b8e:	28 c0       	rjmp	.+80     	; 0x5be0 <StartReversingValve+0x4da>
    5b90:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <EEpromData+0x28>
    5b94:	81 30       	cpi	r24, 0x01	; 1
    5b96:	21 f5       	brne	.+72     	; 0x5be0 <StartReversingValve+0x4da>
				START_REV_VALVE_2;
    5b98:	a3 9a       	sbi	0x14, 3	; 20
				Comp_2.revVOn=1;
    5b9a:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <Comp_2+0xe>
				xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    5b9e:	85 e6       	ldi	r24, 0x65	; 101
    5ba0:	93 e0       	ldi	r25, 0x03	; 3
    5ba2:	9f 93       	push	r25
    5ba4:	8f 93       	push	r24
    5ba6:	86 e9       	ldi	r24, 0x96	; 150
    5ba8:	97 e0       	ldi	r25, 0x07	; 7
    5baa:	9f 93       	push	r25
    5bac:	8f 93       	push	r24
    5bae:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_2=time(&current_time);
    5bb2:	83 ef       	ldi	r24, 0xF3	; 243
    5bb4:	98 e0       	ldi	r25, 0x08	; 8
    5bb6:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5bba:	60 93 a2 0a 	sts	0x0AA2, r22	; 0x800aa2 <timeStartRevV_2>
    5bbe:	70 93 a3 0a 	sts	0x0AA3, r23	; 0x800aa3 <timeStartRevV_2+0x1>
    5bc2:	80 93 a4 0a 	sts	0x0AA4, r24	; 0x800aa4 <timeStartRevV_2+0x2>
    5bc6:	90 93 a5 0a 	sts	0x0AA5, r25	; 0x800aa5 <timeStartRevV_2+0x3>
				EEpromData.number_turnon_revers_2+=1;
    5bca:	e0 e5       	ldi	r30, 0x50	; 80
    5bcc:	f9 e0       	ldi	r31, 0x09	; 9
    5bce:	80 81       	ld	r24, Z
    5bd0:	91 81       	ldd	r25, Z+1	; 0x01
    5bd2:	01 96       	adiw	r24, 0x01	; 1
    5bd4:	91 83       	std	Z+1, r25	; 0x01
    5bd6:	80 83       	st	Z, r24
    5bd8:	0f 90       	pop	r0
    5bda:	0f 90       	pop	r0
    5bdc:	0f 90       	pop	r0
    5bde:	0f 90       	pop	r0
			}
		}

		xTimerChangePeriod( xStartHeatPump_2,period, 100 );
    5be0:	0f 2e       	mov	r0, r31
    5be2:	f4 e6       	ldi	r31, 0x64	; 100
    5be4:	cf 2e       	mov	r12, r31
    5be6:	d1 2c       	mov	r13, r1
    5be8:	e1 2c       	mov	r14, r1
    5bea:	f1 2c       	mov	r15, r1
    5bec:	f0 2d       	mov	r31, r0
    5bee:	00 e0       	ldi	r16, 0x00	; 0
    5bf0:	10 e0       	ldi	r17, 0x00	; 0
    5bf2:	a5 01       	movw	r20, r10
    5bf4:	94 01       	movw	r18, r8
    5bf6:	64 e0       	ldi	r22, 0x04	; 4
    5bf8:	80 91 ce 09 	lds	r24, 0x09CE	; 0x8009ce <xStartHeatPump_2>
    5bfc:	90 91 cf 09 	lds	r25, 0x09CF	; 0x8009cf <xStartHeatPump_2+0x1>
    5c00:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}


}
    5c04:	1f 91       	pop	r17
    5c06:	0f 91       	pop	r16
    5c08:	ff 90       	pop	r15
    5c0a:	ef 90       	pop	r14
    5c0c:	df 90       	pop	r13
    5c0e:	cf 90       	pop	r12
    5c10:	bf 90       	pop	r11
    5c12:	af 90       	pop	r10
    5c14:	9f 90       	pop	r9
    5c16:	8f 90       	pop	r8
    5c18:	08 95       	ret

00005c1a <StartThreeWay>:
//------------------------------------------------
void StartThreeWay()
{
    5c1a:	8f 92       	push	r8
    5c1c:	9f 92       	push	r9
    5c1e:	af 92       	push	r10
    5c20:	bf 92       	push	r11
    5c22:	cf 92       	push	r12
    5c24:	df 92       	push	r13
    5c26:	ef 92       	push	r14
    5c28:	ff 92       	push	r15
    5c2a:	0f 93       	push	r16
    5c2c:	1f 93       	push	r17
	static time_t time_count;
    TickType_t period;
	
	
	period=(TickType_t)EEpromData.HeatingPump_delay;
    5c2e:	20 91 fb 08 	lds	r18, 0x08FB	; 0x8008fb <EEpromData+0x3>
	period*=1000;
    5c32:	30 e0       	ldi	r19, 0x00	; 0
    5c34:	a8 ee       	ldi	r26, 0xE8	; 232
    5c36:	b3 e0       	ldi	r27, 0x03	; 3
    5c38:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    5c3c:	4b 01       	movw	r8, r22
    5c3e:	5c 01       	movw	r10, r24
	xSerialxPrintf(&xSerial3Port,"StartThreeWay\r\n");
    5c40:	87 e8       	ldi	r24, 0x87	; 135
    5c42:	93 e0       	ldi	r25, 0x03	; 3
    5c44:	9f 93       	push	r25
    5c46:	8f 93       	push	r24
    5c48:	86 e9       	ldi	r24, 0x96	; 150
    5c4a:	97 e0       	ldi	r25, 0x07	; 7
    5c4c:	9f 93       	push	r25
    5c4e:	8f 93       	push	r24
    5c50:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(Comp_1.heatingWater)
    5c54:	0f 90       	pop	r0
    5c56:	0f 90       	pop	r0
    5c58:	0f 90       	pop	r0
    5c5a:	0f 90       	pop	r0
    5c5c:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <Comp_1+0x4>
    5c60:	88 23       	and	r24, r24
    5c62:	71 f1       	breq	.+92     	; 0x5cc0 <StartThreeWay+0xa6>
	{
		
		if(PIN_THWAY_VALVE == 0)//
    5c64:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5c68:	88 23       	and	r24, r24
    5c6a:	e4 f0       	brlt	.+56     	; 0x5ca4 <StartThreeWay+0x8a>
		{
			START_THWAY_VALVE;
    5c6c:	e2 e0       	ldi	r30, 0x02	; 2
    5c6e:	f1 e0       	ldi	r31, 0x01	; 1
    5c70:	80 81       	ld	r24, Z
    5c72:	80 68       	ori	r24, 0x80	; 128
    5c74:	80 83       	st	Z, r24
			
			//xSerialxPrintf(&xSerial3Port,"StartThreeWay\r\n");
			Comp_1.threeWOn=1;
    5c76:	81 e0       	ldi	r24, 0x01	; 1
    5c78:	80 93 65 09 	sts	0x0965, r24	; 0x800965 <Comp_1+0xd>
			timeStartThreeW=time(&current_time);
    5c7c:	83 ef       	ldi	r24, 0xF3	; 243
    5c7e:	98 e0       	ldi	r25, 0x08	; 8
    5c80:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5c84:	60 93 7c 0a 	sts	0x0A7C, r22	; 0x800a7c <timeStartThreeW>
    5c88:	70 93 7d 0a 	sts	0x0A7D, r23	; 0x800a7d <timeStartThreeW+0x1>
    5c8c:	80 93 7e 0a 	sts	0x0A7E, r24	; 0x800a7e <timeStartThreeW+0x2>
    5c90:	90 93 7f 0a 	sts	0x0A7F, r25	; 0x800a7f <timeStartThreeW+0x3>
			EEpromData.number_turnon_threeway+=1;
    5c94:	ee e3       	ldi	r30, 0x3E	; 62
    5c96:	f9 e0       	ldi	r31, 0x09	; 9
    5c98:	80 81       	ld	r24, Z
    5c9a:	91 81       	ldd	r25, Z+1	; 0x01
    5c9c:	01 96       	adiw	r24, 0x01	; 1
    5c9e:	91 83       	std	Z+1, r25	; 0x01
    5ca0:	80 83       	st	Z, r24
    5ca2:	0e c0       	rjmp	.+28     	; 0x5cc0 <StartThreeWay+0xa6>
			
		} else xSerialxPrintf(&xSerial3Port,"StopThreeWay\r\n");
    5ca4:	87 e9       	ldi	r24, 0x97	; 151
    5ca6:	93 e0       	ldi	r25, 0x03	; 3
    5ca8:	9f 93       	push	r25
    5caa:	8f 93       	push	r24
    5cac:	86 e9       	ldi	r24, 0x96	; 150
    5cae:	97 e0       	ldi	r25, 0x07	; 7
    5cb0:	9f 93       	push	r25
    5cb2:	8f 93       	push	r24
    5cb4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    5cb8:	0f 90       	pop	r0
    5cba:	0f 90       	pop	r0
    5cbc:	0f 90       	pop	r0
    5cbe:	0f 90       	pop	r0
	}
	if(Comp_1.Heating || Comp_1.Cooling)
    5cc0:	80 91 5a 09 	lds	r24, 0x095A	; 0x80095a <Comp_1+0x2>
    5cc4:	81 11       	cpse	r24, r1
    5cc6:	05 c0       	rjmp	.+10     	; 0x5cd2 <StartThreeWay+0xb8>
    5cc8:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <Comp_1+0x3>
    5ccc:	88 23       	and	r24, r24
    5cce:	09 f4       	brne	.+2      	; 0x5cd2 <StartThreeWay+0xb8>
    5cd0:	4d c0       	rjmp	.+154    	; 0x5d6c <StartThreeWay+0x152>
	{
		if(PIN_THWAY_VALVE > 0)//
    5cd2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5cd6:	88 23       	and	r24, r24
    5cd8:	0c f0       	brlt	.+2      	; 0x5cdc <StartThreeWay+0xc2>
    5cda:	48 c0       	rjmp	.+144    	; 0x5d6c <StartThreeWay+0x152>
		{
			STOP_THWAY_VALVE;
    5cdc:	e2 e0       	ldi	r30, 0x02	; 2
    5cde:	f1 e0       	ldi	r31, 0x01	; 1
    5ce0:	80 81       	ld	r24, Z
    5ce2:	8f 77       	andi	r24, 0x7F	; 127
    5ce4:	80 83       	st	Z, r24
			
			//xSerialxPrintf(&xSerial3Port,"StopThreeWay\r\n");
			Comp_1.threeWOn=0;
    5ce6:	10 92 65 09 	sts	0x0965, r1	; 0x800965 <Comp_1+0xd>
			time_count+= difftime(time(&current_time), timeStartThreeW);
    5cea:	c0 90 7c 0a 	lds	r12, 0x0A7C	; 0x800a7c <timeStartThreeW>
    5cee:	d0 90 7d 0a 	lds	r13, 0x0A7D	; 0x800a7d <timeStartThreeW+0x1>
    5cf2:	e0 90 7e 0a 	lds	r14, 0x0A7E	; 0x800a7e <timeStartThreeW+0x2>
    5cf6:	f0 90 7f 0a 	lds	r15, 0x0A7F	; 0x800a7f <timeStartThreeW+0x3>
    5cfa:	83 ef       	ldi	r24, 0xF3	; 243
    5cfc:	98 e0       	ldi	r25, 0x08	; 8
    5cfe:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5d02:	a7 01       	movw	r20, r14
    5d04:	96 01       	movw	r18, r12
    5d06:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5d0a:	c0 90 35 07 	lds	r12, 0x0735	; 0x800735 <time_count.3180>
    5d0e:	d0 90 36 07 	lds	r13, 0x0736	; 0x800736 <time_count.3180+0x1>
    5d12:	e0 90 37 07 	lds	r14, 0x0737	; 0x800737 <time_count.3180+0x2>
    5d16:	f0 90 38 07 	lds	r15, 0x0738	; 0x800738 <time_count.3180+0x3>
    5d1a:	dc 01       	movw	r26, r24
    5d1c:	cb 01       	movw	r24, r22
    5d1e:	8c 0d       	add	r24, r12
    5d20:	9d 1d       	adc	r25, r13
    5d22:	ae 1d       	adc	r26, r14
    5d24:	bf 1d       	adc	r27, r15
    5d26:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <time_count.3180>
    5d2a:	90 93 36 07 	sts	0x0736, r25	; 0x800736 <time_count.3180+0x1>
    5d2e:	a0 93 37 07 	sts	0x0737, r26	; 0x800737 <time_count.3180+0x2>
    5d32:	b0 93 38 07 	sts	0x0738, r27	; 0x800738 <time_count.3180+0x3>
			if(time_count>ONE_HOUR){EEpromData.time_threeway++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count=0;}
    5d36:	81 31       	cpi	r24, 0x11	; 17
    5d38:	9e 40       	sbci	r25, 0x0E	; 14
    5d3a:	a1 05       	cpc	r26, r1
    5d3c:	b1 05       	cpc	r27, r1
    5d3e:	b0 f0       	brcs	.+44     	; 0x5d6c <StartThreeWay+0x152>
    5d40:	e8 ef       	ldi	r30, 0xF8	; 248
    5d42:	f8 e0       	ldi	r31, 0x08	; 8
    5d44:	84 ad       	ldd	r24, Z+60	; 0x3c
    5d46:	95 ad       	ldd	r25, Z+61	; 0x3d
    5d48:	01 96       	adiw	r24, 0x01	; 1
    5d4a:	95 af       	std	Z+61, r25	; 0x3d
    5d4c:	84 af       	std	Z+60, r24	; 0x3c
    5d4e:	40 e6       	ldi	r20, 0x60	; 96
    5d50:	50 e0       	ldi	r21, 0x00	; 0
    5d52:	60 e0       	ldi	r22, 0x00	; 0
    5d54:	70 e0       	ldi	r23, 0x00	; 0
    5d56:	cf 01       	movw	r24, r30
    5d58:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <eeprom_update_block>
    5d5c:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <time_count.3180>
    5d60:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <time_count.3180+0x1>
    5d64:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <time_count.3180+0x2>
    5d68:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <time_count.3180+0x3>
		}
	}
	
	xTimerChangePeriod( xStartHeatPump_1,period, 100 );
    5d6c:	0f 2e       	mov	r0, r31
    5d6e:	f4 e6       	ldi	r31, 0x64	; 100
    5d70:	cf 2e       	mov	r12, r31
    5d72:	d1 2c       	mov	r13, r1
    5d74:	e1 2c       	mov	r14, r1
    5d76:	f1 2c       	mov	r15, r1
    5d78:	f0 2d       	mov	r31, r0
    5d7a:	00 e0       	ldi	r16, 0x00	; 0
    5d7c:	10 e0       	ldi	r17, 0x00	; 0
    5d7e:	a5 01       	movw	r20, r10
    5d80:	94 01       	movw	r18, r8
    5d82:	64 e0       	ldi	r22, 0x04	; 4
    5d84:	80 91 6c 0a 	lds	r24, 0x0A6C	; 0x800a6c <xStartHeatPump_1>
    5d88:	90 91 6d 0a 	lds	r25, 0x0A6D	; 0x800a6d <xStartHeatPump_1+0x1>
    5d8c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	
}
    5d90:	1f 91       	pop	r17
    5d92:	0f 91       	pop	r16
    5d94:	ff 90       	pop	r15
    5d96:	ef 90       	pop	r14
    5d98:	df 90       	pop	r13
    5d9a:	cf 90       	pop	r12
    5d9c:	bf 90       	pop	r11
    5d9e:	af 90       	pop	r10
    5da0:	9f 90       	pop	r9
    5da2:	8f 90       	pop	r8
    5da4:	08 95       	ret

00005da6 <HeatPump_Stop>:
		
	}
}
//-------------------------------------------------------------------------
void HeatPump_Stop(TimerHandle_t xTimer)
{
    5da6:	8f 92       	push	r8
    5da8:	9f 92       	push	r9
    5daa:	af 92       	push	r10
    5dac:	bf 92       	push	r11
    5dae:	cf 92       	push	r12
    5db0:	df 92       	push	r13
    5db2:	ef 92       	push	r14
    5db4:	ff 92       	push	r15
    5db6:	0f 93       	push	r16
    5db8:	1f 93       	push	r17
	
	TickType_t period;
	
	//xSerialxPrintf(&xSerial3Port,"StopHeatPump\r\n");
	
	pxTimerID = pvTimerGetTimerID(xTimer);
    5dba:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>

	if((*pxTimerID) == uxStopDelayHeatPTimer_1_ID)
    5dbe:	fc 01       	movw	r30, r24
    5dc0:	80 81       	ld	r24, Z
    5dc2:	88 30       	cpi	r24, 0x08	; 8
    5dc4:	09 f0       	breq	.+2      	; 0x5dc8 <HeatPump_Stop+0x22>
    5dc6:	76 c0       	rjmp	.+236    	; 0x5eb4 <HeatPump_Stop+0x10e>
	{
		period=(TickType_t)EEpromData.Three_Way_delay;
    5dc8:	20 91 fc 08 	lds	r18, 0x08FC	; 0x8008fc <EEpromData+0x4>
		period*=1000;
    5dcc:	30 e0       	ldi	r19, 0x00	; 0
    5dce:	a8 ee       	ldi	r26, 0xE8	; 232
    5dd0:	b3 e0       	ldi	r27, 0x03	; 3
    5dd2:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    5dd6:	4b 01       	movw	r8, r22
    5dd8:	5c 01       	movw	r10, r24
		
		if(PIN_HEAT_PUMP_1 > 0)//
    5dda:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5dde:	83 ff       	sbrs	r24, 3
    5de0:	56 c0       	rjmp	.+172    	; 0x5e8e <HeatPump_Stop+0xe8>
		{
			STOP_HEAT_PUMP_1;
    5de2:	e2 e0       	ldi	r30, 0x02	; 2
    5de4:	f1 e0       	ldi	r31, 0x01	; 1
    5de6:	80 81       	ld	r24, Z
    5de8:	87 7f       	andi	r24, 0xF7	; 247
    5dea:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopHeatPump_1\r\n");
    5dec:	86 ea       	ldi	r24, 0xA6	; 166
    5dee:	93 e0       	ldi	r25, 0x03	; 3
    5df0:	9f 93       	push	r25
    5df2:	8f 93       	push	r24
    5df4:	86 e9       	ldi	r24, 0x96	; 150
    5df6:	97 e0       	ldi	r25, 0x07	; 7
    5df8:	9f 93       	push	r25
    5dfa:	8f 93       	push	r24
    5dfc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.heatPOn=0;
    5e00:	10 92 64 09 	sts	0x0964, r1	; 0x800964 <Comp_1+0xc>
			time_count_1+= difftime(time(&current_time), timeStartHeatP_1);
    5e04:	c0 90 64 0a 	lds	r12, 0x0A64	; 0x800a64 <timeStartHeatP_1>
    5e08:	d0 90 65 0a 	lds	r13, 0x0A65	; 0x800a65 <timeStartHeatP_1+0x1>
    5e0c:	e0 90 66 0a 	lds	r14, 0x0A66	; 0x800a66 <timeStartHeatP_1+0x2>
    5e10:	f0 90 67 0a 	lds	r15, 0x0A67	; 0x800a67 <timeStartHeatP_1+0x3>
    5e14:	83 ef       	ldi	r24, 0xF3	; 243
    5e16:	98 e0       	ldi	r25, 0x08	; 8
    5e18:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5e1c:	a7 01       	movw	r20, r14
    5e1e:	96 01       	movw	r18, r12
    5e20:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5e24:	c0 90 29 07 	lds	r12, 0x0729	; 0x800729 <time_count_1.3209>
    5e28:	d0 90 2a 07 	lds	r13, 0x072A	; 0x80072a <time_count_1.3209+0x1>
    5e2c:	e0 90 2b 07 	lds	r14, 0x072B	; 0x80072b <time_count_1.3209+0x2>
    5e30:	f0 90 2c 07 	lds	r15, 0x072C	; 0x80072c <time_count_1.3209+0x3>
    5e34:	dc 01       	movw	r26, r24
    5e36:	cb 01       	movw	r24, r22
    5e38:	8c 0d       	add	r24, r12
    5e3a:	9d 1d       	adc	r25, r13
    5e3c:	ae 1d       	adc	r26, r14
    5e3e:	bf 1d       	adc	r27, r15
    5e40:	80 93 29 07 	sts	0x0729, r24	; 0x800729 <time_count_1.3209>
    5e44:	90 93 2a 07 	sts	0x072A, r25	; 0x80072a <time_count_1.3209+0x1>
    5e48:	a0 93 2b 07 	sts	0x072B, r26	; 0x80072b <time_count_1.3209+0x2>
    5e4c:	b0 93 2c 07 	sts	0x072C, r27	; 0x80072c <time_count_1.3209+0x3>
			if(time_count_1>ONE_HOUR){EEpromData.time_pump_hiter_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    5e50:	0f 90       	pop	r0
    5e52:	0f 90       	pop	r0
    5e54:	0f 90       	pop	r0
    5e56:	0f 90       	pop	r0
    5e58:	81 31       	cpi	r24, 0x11	; 17
    5e5a:	9e 40       	sbci	r25, 0x0E	; 14
    5e5c:	a1 05       	cpc	r26, r1
    5e5e:	b1 05       	cpc	r27, r1
    5e60:	b0 f0       	brcs	.+44     	; 0x5e8e <HeatPump_Stop+0xe8>
    5e62:	e8 ef       	ldi	r30, 0xF8	; 248
    5e64:	f8 e0       	ldi	r31, 0x08	; 8
    5e66:	84 a9       	ldd	r24, Z+52	; 0x34
    5e68:	95 a9       	ldd	r25, Z+53	; 0x35
    5e6a:	01 96       	adiw	r24, 0x01	; 1
    5e6c:	95 ab       	std	Z+53, r25	; 0x35
    5e6e:	84 ab       	std	Z+52, r24	; 0x34
    5e70:	40 e6       	ldi	r20, 0x60	; 96
    5e72:	50 e0       	ldi	r21, 0x00	; 0
    5e74:	60 e0       	ldi	r22, 0x00	; 0
    5e76:	70 e0       	ldi	r23, 0x00	; 0
    5e78:	cf 01       	movw	r24, r30
    5e7a:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <eeprom_update_block>
    5e7e:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <time_count_1.3209>
    5e82:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <time_count_1.3209+0x1>
    5e86:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <time_count_1.3209+0x2>
    5e8a:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <time_count_1.3209+0x3>
			
		}
		xTimerChangePeriod( xStopThreeWay,period, 100 );
    5e8e:	0f 2e       	mov	r0, r31
    5e90:	f4 e6       	ldi	r31, 0x64	; 100
    5e92:	cf 2e       	mov	r12, r31
    5e94:	d1 2c       	mov	r13, r1
    5e96:	e1 2c       	mov	r14, r1
    5e98:	f1 2c       	mov	r15, r1
    5e9a:	f0 2d       	mov	r31, r0
    5e9c:	00 e0       	ldi	r16, 0x00	; 0
    5e9e:	10 e0       	ldi	r17, 0x00	; 0
    5ea0:	a5 01       	movw	r20, r10
    5ea2:	94 01       	movw	r18, r8
    5ea4:	64 e0       	ldi	r22, 0x04	; 4
    5ea6:	80 91 ca 09 	lds	r24, 0x09CA	; 0x8009ca <xStopThreeWay>
    5eaa:	90 91 cb 09 	lds	r25, 0x09CB	; 0x8009cb <xStopThreeWay+0x1>
    5eae:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    5eb2:	7b c0       	rjmp	.+246    	; 0x5faa <HeatPump_Stop+0x204>
		//xTimerStart(xStopThreeWay, 0);
	}

	else if((*pxTimerID) == uxStopDelayHeatPTimer_2_ID)
    5eb4:	85 31       	cpi	r24, 0x15	; 21
    5eb6:	09 f0       	breq	.+2      	; 0x5eba <HeatPump_Stop+0x114>
    5eb8:	78 c0       	rjmp	.+240    	; 0x5faa <HeatPump_Stop+0x204>
	{
		period=(TickType_t)EEpromData.Revers_Valve_delay;
		period*=1000;
		xSerialxPrintf(&xSerial3Port,"StopHeatPump_2\r\n");
    5eba:	87 eb       	ldi	r24, 0xB7	; 183
    5ebc:	93 e0       	ldi	r25, 0x03	; 3
    5ebe:	9f 93       	push	r25
    5ec0:	8f 93       	push	r24
    5ec2:	86 e9       	ldi	r24, 0x96	; 150
    5ec4:	97 e0       	ldi	r25, 0x07	; 7
    5ec6:	9f 93       	push	r25
    5ec8:	8f 93       	push	r24
    5eca:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_2 > 0)//
    5ece:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5ed2:	0f 90       	pop	r0
    5ed4:	0f 90       	pop	r0
    5ed6:	0f 90       	pop	r0
    5ed8:	0f 90       	pop	r0
    5eda:	84 ff       	sbrs	r24, 4
    5edc:	49 c0       	rjmp	.+146    	; 0x5f70 <HeatPump_Stop+0x1ca>
		{
			STOP_HEAT_PUMP_2;
    5ede:	e2 e0       	ldi	r30, 0x02	; 2
    5ee0:	f1 e0       	ldi	r31, 0x01	; 1
    5ee2:	80 81       	ld	r24, Z
    5ee4:	8f 7e       	andi	r24, 0xEF	; 239
    5ee6:	80 83       	st	Z, r24
			
			
			Comp_2.heatPOn=0;
    5ee8:	10 92 ea 09 	sts	0x09EA, r1	; 0x8009ea <Comp_2+0xc>
			time_count_2+= difftime(time(&current_time), timeStartHeatP_2);
    5eec:	c0 90 78 0a 	lds	r12, 0x0A78	; 0x800a78 <timeStartHeatP_2>
    5ef0:	d0 90 79 0a 	lds	r13, 0x0A79	; 0x800a79 <timeStartHeatP_2+0x1>
    5ef4:	e0 90 7a 0a 	lds	r14, 0x0A7A	; 0x800a7a <timeStartHeatP_2+0x2>
    5ef8:	f0 90 7b 0a 	lds	r15, 0x0A7B	; 0x800a7b <timeStartHeatP_2+0x3>
    5efc:	83 ef       	ldi	r24, 0xF3	; 243
    5efe:	98 e0       	ldi	r25, 0x08	; 8
    5f00:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5f04:	a7 01       	movw	r20, r14
    5f06:	96 01       	movw	r18, r12
    5f08:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5f0c:	c0 90 25 07 	lds	r12, 0x0725	; 0x800725 <time_count_2.3210>
    5f10:	d0 90 26 07 	lds	r13, 0x0726	; 0x800726 <time_count_2.3210+0x1>
    5f14:	e0 90 27 07 	lds	r14, 0x0727	; 0x800727 <time_count_2.3210+0x2>
    5f18:	f0 90 28 07 	lds	r15, 0x0728	; 0x800728 <time_count_2.3210+0x3>
    5f1c:	dc 01       	movw	r26, r24
    5f1e:	cb 01       	movw	r24, r22
    5f20:	8c 0d       	add	r24, r12
    5f22:	9d 1d       	adc	r25, r13
    5f24:	ae 1d       	adc	r26, r14
    5f26:	bf 1d       	adc	r27, r15
    5f28:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <time_count_2.3210>
    5f2c:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <time_count_2.3210+0x1>
    5f30:	a0 93 27 07 	sts	0x0727, r26	; 0x800727 <time_count_2.3210+0x2>
    5f34:	b0 93 28 07 	sts	0x0728, r27	; 0x800728 <time_count_2.3210+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_pump_hiter_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    5f38:	81 31       	cpi	r24, 0x11	; 17
    5f3a:	9e 40       	sbci	r25, 0x0E	; 14
    5f3c:	a1 05       	cpc	r26, r1
    5f3e:	b1 05       	cpc	r27, r1
    5f40:	b8 f0       	brcs	.+46     	; 0x5f70 <HeatPump_Stop+0x1ca>
    5f42:	e2 e4       	ldi	r30, 0x42	; 66
    5f44:	f9 e0       	ldi	r31, 0x09	; 9
    5f46:	80 81       	ld	r24, Z
    5f48:	91 81       	ldd	r25, Z+1	; 0x01
    5f4a:	01 96       	adiw	r24, 0x01	; 1
    5f4c:	91 83       	std	Z+1, r25	; 0x01
    5f4e:	80 83       	st	Z, r24
    5f50:	40 e6       	ldi	r20, 0x60	; 96
    5f52:	50 e0       	ldi	r21, 0x00	; 0
    5f54:	60 e0       	ldi	r22, 0x00	; 0
    5f56:	70 e0       	ldi	r23, 0x00	; 0
    5f58:	88 ef       	ldi	r24, 0xF8	; 248
    5f5a:	98 e0       	ldi	r25, 0x08	; 8
    5f5c:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <eeprom_update_block>
    5f60:	10 92 25 07 	sts	0x0725, r1	; 0x800725 <time_count_2.3210>
    5f64:	10 92 26 07 	sts	0x0726, r1	; 0x800726 <time_count_2.3210+0x1>
    5f68:	10 92 27 07 	sts	0x0727, r1	; 0x800727 <time_count_2.3210+0x2>
    5f6c:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <time_count_2.3210+0x3>
			
		}
		xTimerChangePeriod( xStopRevValve_2,(EEpromData.Revers_Valve_delay*1000) / portTICK_PERIOD_MS, 100 );
    5f70:	40 91 fa 08 	lds	r20, 0x08FA	; 0x8008fa <EEpromData+0x2>
    5f74:	88 ee       	ldi	r24, 0xE8	; 232
    5f76:	93 e0       	ldi	r25, 0x03	; 3
    5f78:	48 9f       	mul	r20, r24
    5f7a:	90 01       	movw	r18, r0
    5f7c:	49 9f       	mul	r20, r25
    5f7e:	30 0d       	add	r19, r0
    5f80:	11 24       	eor	r1, r1
    5f82:	03 2e       	mov	r0, r19
    5f84:	00 0c       	add	r0, r0
    5f86:	44 0b       	sbc	r20, r20
    5f88:	55 0b       	sbc	r21, r21
    5f8a:	0f 2e       	mov	r0, r31
    5f8c:	f4 e6       	ldi	r31, 0x64	; 100
    5f8e:	cf 2e       	mov	r12, r31
    5f90:	d1 2c       	mov	r13, r1
    5f92:	e1 2c       	mov	r14, r1
    5f94:	f1 2c       	mov	r15, r1
    5f96:	f0 2d       	mov	r31, r0
    5f98:	00 e0       	ldi	r16, 0x00	; 0
    5f9a:	10 e0       	ldi	r17, 0x00	; 0
    5f9c:	64 e0       	ldi	r22, 0x04	; 4
    5f9e:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <xStopRevValve_2>
    5fa2:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <xStopRevValve_2+0x1>
    5fa6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
}
    5faa:	1f 91       	pop	r17
    5fac:	0f 91       	pop	r16
    5fae:	ff 90       	pop	r15
    5fb0:	ef 90       	pop	r14
    5fb2:	df 90       	pop	r13
    5fb4:	cf 90       	pop	r12
    5fb6:	bf 90       	pop	r11
    5fb8:	af 90       	pop	r10
    5fba:	9f 90       	pop	r9
    5fbc:	8f 90       	pop	r8
    5fbe:	08 95       	ret

00005fc0 <ThreeWay_Stop>:
//-------------------------------------------------------------------------
void ThreeWay_Stop()
{
    5fc0:	8f 92       	push	r8
    5fc2:	9f 92       	push	r9
    5fc4:	af 92       	push	r10
    5fc6:	bf 92       	push	r11
    5fc8:	cf 92       	push	r12
    5fca:	df 92       	push	r13
    5fcc:	ef 92       	push	r14
    5fce:	ff 92       	push	r15
    5fd0:	0f 93       	push	r16
    5fd2:	1f 93       	push	r17
	static time_t time_count;
	TickType_t period;
	period=(TickType_t)EEpromData.Revers_Valve_delay;
    5fd4:	20 91 fa 08 	lds	r18, 0x08FA	; 0x8008fa <EEpromData+0x2>
	period*=1000;
    5fd8:	30 e0       	ldi	r19, 0x00	; 0
    5fda:	a8 ee       	ldi	r26, 0xE8	; 232
    5fdc:	b3 e0       	ldi	r27, 0x03	; 3
    5fde:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    5fe2:	4b 01       	movw	r8, r22
    5fe4:	5c 01       	movw	r10, r24
	
	xSerialxPrintf(&xSerial3Port,"ThreeWay_Stop\r\n");
    5fe6:	88 ec       	ldi	r24, 0xC8	; 200
    5fe8:	93 e0       	ldi	r25, 0x03	; 3
    5fea:	9f 93       	push	r25
    5fec:	8f 93       	push	r24
    5fee:	86 e9       	ldi	r24, 0x96	; 150
    5ff0:	97 e0       	ldi	r25, 0x07	; 7
    5ff2:	9f 93       	push	r25
    5ff4:	8f 93       	push	r24
    5ff6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(PIN_THWAY_VALVE > 0)
    5ffa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5ffe:	0f 90       	pop	r0
    6000:	0f 90       	pop	r0
    6002:	0f 90       	pop	r0
    6004:	0f 90       	pop	r0
    6006:	88 23       	and	r24, r24
    6008:	0c f0       	brlt	.+2      	; 0x600c <ThreeWay_Stop+0x4c>
    600a:	48 c0       	rjmp	.+144    	; 0x609c <ThreeWay_Stop+0xdc>
	{
		STOP_THWAY_VALVE;
    600c:	e2 e0       	ldi	r30, 0x02	; 2
    600e:	f1 e0       	ldi	r31, 0x01	; 1
    6010:	80 81       	ld	r24, Z
    6012:	8f 77       	andi	r24, 0x7F	; 127
    6014:	80 83       	st	Z, r24
		//xSerialxPrintf(&xSerial3Port,"ThreeWay_Stop\r\n");
		Comp_1.threeWOn=0;
    6016:	10 92 65 09 	sts	0x0965, r1	; 0x800965 <Comp_1+0xd>
		time_count+= difftime(time(&current_time), timeStartThreeW);
    601a:	c0 90 7c 0a 	lds	r12, 0x0A7C	; 0x800a7c <timeStartThreeW>
    601e:	d0 90 7d 0a 	lds	r13, 0x0A7D	; 0x800a7d <timeStartThreeW+0x1>
    6022:	e0 90 7e 0a 	lds	r14, 0x0A7E	; 0x800a7e <timeStartThreeW+0x2>
    6026:	f0 90 7f 0a 	lds	r15, 0x0A7F	; 0x800a7f <timeStartThreeW+0x3>
    602a:	83 ef       	ldi	r24, 0xF3	; 243
    602c:	98 e0       	ldi	r25, 0x08	; 8
    602e:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6032:	a7 01       	movw	r20, r14
    6034:	96 01       	movw	r18, r12
    6036:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    603a:	c0 90 21 07 	lds	r12, 0x0721	; 0x800721 <time_count.3215>
    603e:	d0 90 22 07 	lds	r13, 0x0722	; 0x800722 <time_count.3215+0x1>
    6042:	e0 90 23 07 	lds	r14, 0x0723	; 0x800723 <time_count.3215+0x2>
    6046:	f0 90 24 07 	lds	r15, 0x0724	; 0x800724 <time_count.3215+0x3>
    604a:	dc 01       	movw	r26, r24
    604c:	cb 01       	movw	r24, r22
    604e:	8c 0d       	add	r24, r12
    6050:	9d 1d       	adc	r25, r13
    6052:	ae 1d       	adc	r26, r14
    6054:	bf 1d       	adc	r27, r15
    6056:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <time_count.3215>
    605a:	90 93 22 07 	sts	0x0722, r25	; 0x800722 <time_count.3215+0x1>
    605e:	a0 93 23 07 	sts	0x0723, r26	; 0x800723 <time_count.3215+0x2>
    6062:	b0 93 24 07 	sts	0x0724, r27	; 0x800724 <time_count.3215+0x3>
		if(time_count>ONE_HOUR){EEpromData.time_threeway++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count=0;}
    6066:	81 31       	cpi	r24, 0x11	; 17
    6068:	9e 40       	sbci	r25, 0x0E	; 14
    606a:	a1 05       	cpc	r26, r1
    606c:	b1 05       	cpc	r27, r1
    606e:	b0 f0       	brcs	.+44     	; 0x609c <ThreeWay_Stop+0xdc>
    6070:	e8 ef       	ldi	r30, 0xF8	; 248
    6072:	f8 e0       	ldi	r31, 0x08	; 8
    6074:	84 ad       	ldd	r24, Z+60	; 0x3c
    6076:	95 ad       	ldd	r25, Z+61	; 0x3d
    6078:	01 96       	adiw	r24, 0x01	; 1
    607a:	95 af       	std	Z+61, r25	; 0x3d
    607c:	84 af       	std	Z+60, r24	; 0x3c
    607e:	40 e6       	ldi	r20, 0x60	; 96
    6080:	50 e0       	ldi	r21, 0x00	; 0
    6082:	60 e0       	ldi	r22, 0x00	; 0
    6084:	70 e0       	ldi	r23, 0x00	; 0
    6086:	cf 01       	movw	r24, r30
    6088:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <eeprom_update_block>
    608c:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <time_count.3215>
    6090:	10 92 22 07 	sts	0x0722, r1	; 0x800722 <time_count.3215+0x1>
    6094:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <time_count.3215+0x2>
    6098:	10 92 24 07 	sts	0x0724, r1	; 0x800724 <time_count.3215+0x3>
		
	} else{ }//xSerialxPrintf(&xSerial3Port,"ThreeWay_isRun\r\n");
	xTimerChangePeriod( xStopRevValve_1,period, 100 );
    609c:	0f 2e       	mov	r0, r31
    609e:	f4 e6       	ldi	r31, 0x64	; 100
    60a0:	cf 2e       	mov	r12, r31
    60a2:	d1 2c       	mov	r13, r1
    60a4:	e1 2c       	mov	r14, r1
    60a6:	f1 2c       	mov	r15, r1
    60a8:	f0 2d       	mov	r31, r0
    60aa:	00 e0       	ldi	r16, 0x00	; 0
    60ac:	10 e0       	ldi	r17, 0x00	; 0
    60ae:	a5 01       	movw	r20, r10
    60b0:	94 01       	movw	r18, r8
    60b2:	64 e0       	ldi	r22, 0x04	; 4
    60b4:	80 91 60 0a 	lds	r24, 0x0A60	; 0x800a60 <xStopRevValve_1>
    60b8:	90 91 61 0a 	lds	r25, 0x0A61	; 0x800a61 <xStopRevValve_1+0x1>
    60bc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	
}
    60c0:	1f 91       	pop	r17
    60c2:	0f 91       	pop	r16
    60c4:	ff 90       	pop	r15
    60c6:	ef 90       	pop	r14
    60c8:	df 90       	pop	r13
    60ca:	cf 90       	pop	r12
    60cc:	bf 90       	pop	r11
    60ce:	af 90       	pop	r10
    60d0:	9f 90       	pop	r9
    60d2:	8f 90       	pop	r8
    60d4:	08 95       	ret

000060d6 <Revers_Stop>:

//-------------------------------------------------------------------------
void Revers_Stop(TimerHandle_t xTimer)
{
    60d6:	8f 92       	push	r8
    60d8:	9f 92       	push	r9
    60da:	af 92       	push	r10
    60dc:	bf 92       	push	r11
    60de:	cf 92       	push	r12
    60e0:	df 92       	push	r13
    60e2:	ef 92       	push	r14
    60e4:	ff 92       	push	r15
    60e6:	0f 93       	push	r16
    60e8:	1f 93       	push	r17
    60ea:	ac 01       	movw	r20, r24
	static time_t time_count_1;
	static time_t time_count_2;
	TickType_t period;
	period=(TickType_t)EEpromData.Source_Pump_delay;
    60ec:	20 91 f9 08 	lds	r18, 0x08F9	; 0x8008f9 <EEpromData+0x1>
	period*=1000;
    60f0:	30 e0       	ldi	r19, 0x00	; 0
    60f2:	a8 ee       	ldi	r26, 0xE8	; 232
    60f4:	b3 e0       	ldi	r27, 0x03	; 3
    60f6:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    60fa:	4b 01       	movw	r8, r22
    60fc:	5c 01       	movw	r10, r24

	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    60fe:	ca 01       	movw	r24, r20
    6100:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
   // xSerialxPrintf(&xSerial3Port,"StopRevValve\r\n");

	if((*pxTimerID) == uxStopDelayRevVTimer_1_ID)
    6104:	fc 01       	movw	r30, r24
    6106:	80 81       	ld	r24, Z
    6108:	8a 30       	cpi	r24, 0x0A	; 10
    610a:	09 f0       	breq	.+2      	; 0x610e <Revers_Stop+0x38>
    610c:	67 c0       	rjmp	.+206    	; 0x61dc <Revers_Stop+0x106>
	{
		
		
		if(PIN_REV_VALVE_1 > 0)//
    610e:	94 9b       	sbis	0x12, 4	; 18
    6110:	52 c0       	rjmp	.+164    	; 0x61b6 <Revers_Stop+0xe0>
		{
			STOP_REV_VALVE_1;
    6112:	a4 98       	cbi	0x14, 4	; 20
			xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    6114:	83 e4       	ldi	r24, 0x43	; 67
    6116:	93 e0       	ldi	r25, 0x03	; 3
    6118:	9f 93       	push	r25
    611a:	8f 93       	push	r24
    611c:	86 e9       	ldi	r24, 0x96	; 150
    611e:	97 e0       	ldi	r25, 0x07	; 7
    6120:	9f 93       	push	r25
    6122:	8f 93       	push	r24
    6124:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.revVOn=0;
    6128:	10 92 66 09 	sts	0x0966, r1	; 0x800966 <Comp_1+0xe>
			time_count_1+= difftime(time(&current_time), timeStartRevV_1);
    612c:	c0 90 87 0a 	lds	r12, 0x0A87	; 0x800a87 <timeStartRevV_1>
    6130:	d0 90 88 0a 	lds	r13, 0x0A88	; 0x800a88 <timeStartRevV_1+0x1>
    6134:	e0 90 89 0a 	lds	r14, 0x0A89	; 0x800a89 <timeStartRevV_1+0x2>
    6138:	f0 90 8a 0a 	lds	r15, 0x0A8A	; 0x800a8a <timeStartRevV_1+0x3>
    613c:	83 ef       	ldi	r24, 0xF3	; 243
    613e:	98 e0       	ldi	r25, 0x08	; 8
    6140:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6144:	a7 01       	movw	r20, r14
    6146:	96 01       	movw	r18, r12
    6148:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    614c:	c0 90 1d 07 	lds	r12, 0x071D	; 0x80071d <time_count_1.3220>
    6150:	d0 90 1e 07 	lds	r13, 0x071E	; 0x80071e <time_count_1.3220+0x1>
    6154:	e0 90 1f 07 	lds	r14, 0x071F	; 0x80071f <time_count_1.3220+0x2>
    6158:	f0 90 20 07 	lds	r15, 0x0720	; 0x800720 <time_count_1.3220+0x3>
    615c:	dc 01       	movw	r26, r24
    615e:	cb 01       	movw	r24, r22
    6160:	8c 0d       	add	r24, r12
    6162:	9d 1d       	adc	r25, r13
    6164:	ae 1d       	adc	r26, r14
    6166:	bf 1d       	adc	r27, r15
    6168:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <time_count_1.3220>
    616c:	90 93 1e 07 	sts	0x071E, r25	; 0x80071e <time_count_1.3220+0x1>
    6170:	a0 93 1f 07 	sts	0x071F, r26	; 0x80071f <time_count_1.3220+0x2>
    6174:	b0 93 20 07 	sts	0x0720, r27	; 0x800720 <time_count_1.3220+0x3>
			if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    6178:	0f 90       	pop	r0
    617a:	0f 90       	pop	r0
    617c:	0f 90       	pop	r0
    617e:	0f 90       	pop	r0
    6180:	81 31       	cpi	r24, 0x11	; 17
    6182:	9e 40       	sbci	r25, 0x0E	; 14
    6184:	a1 05       	cpc	r26, r1
    6186:	b1 05       	cpc	r27, r1
    6188:	b0 f0       	brcs	.+44     	; 0x61b6 <Revers_Stop+0xe0>
    618a:	e8 ef       	ldi	r30, 0xF8	; 248
    618c:	f8 e0       	ldi	r31, 0x08	; 8
    618e:	80 ad       	ldd	r24, Z+56	; 0x38
    6190:	91 ad       	ldd	r25, Z+57	; 0x39
    6192:	01 96       	adiw	r24, 0x01	; 1
    6194:	91 af       	std	Z+57, r25	; 0x39
    6196:	80 af       	std	Z+56, r24	; 0x38
    6198:	40 e6       	ldi	r20, 0x60	; 96
    619a:	50 e0       	ldi	r21, 0x00	; 0
    619c:	60 e0       	ldi	r22, 0x00	; 0
    619e:	70 e0       	ldi	r23, 0x00	; 0
    61a0:	cf 01       	movw	r24, r30
    61a2:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <eeprom_update_block>
    61a6:	10 92 1d 07 	sts	0x071D, r1	; 0x80071d <time_count_1.3220>
    61aa:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <time_count_1.3220+0x1>
    61ae:	10 92 1f 07 	sts	0x071F, r1	; 0x80071f <time_count_1.3220+0x2>
    61b2:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <time_count_1.3220+0x3>

		}
		xTimerChangePeriod( xStopSource_1,period, 100 );
    61b6:	0f 2e       	mov	r0, r31
    61b8:	f4 e6       	ldi	r31, 0x64	; 100
    61ba:	cf 2e       	mov	r12, r31
    61bc:	d1 2c       	mov	r13, r1
    61be:	e1 2c       	mov	r14, r1
    61c0:	f1 2c       	mov	r15, r1
    61c2:	f0 2d       	mov	r31, r0
    61c4:	00 e0       	ldi	r16, 0x00	; 0
    61c6:	10 e0       	ldi	r17, 0x00	; 0
    61c8:	a5 01       	movw	r20, r10
    61ca:	94 01       	movw	r18, r8
    61cc:	64 e0       	ldi	r22, 0x04	; 4
    61ce:	80 91 ef 08 	lds	r24, 0x08EF	; 0x8008ef <xStopSource_1>
    61d2:	90 91 f0 08 	lds	r25, 0x08F0	; 0x8008f0 <xStopSource_1+0x1>
    61d6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    61da:	6a c0       	rjmp	.+212    	; 0x62b0 <Revers_Stop+0x1da>
		//xTimerStart(xStopSource_1, 0);
	}
	
	else if((*pxTimerID) == uxStopDelayRevVTimer_2_ID)
    61dc:	87 31       	cpi	r24, 0x17	; 23
    61de:	09 f0       	breq	.+2      	; 0x61e2 <Revers_Stop+0x10c>
    61e0:	67 c0       	rjmp	.+206    	; 0x62b0 <Revers_Stop+0x1da>
	{
		
		if(PIN_REV_VALVE_2 > 0)//
    61e2:	93 9b       	sbis	0x12, 3	; 18
    61e4:	53 c0       	rjmp	.+166    	; 0x628c <Revers_Stop+0x1b6>
		{   
			xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    61e6:	85 e6       	ldi	r24, 0x65	; 101
    61e8:	93 e0       	ldi	r25, 0x03	; 3
    61ea:	9f 93       	push	r25
    61ec:	8f 93       	push	r24
    61ee:	86 e9       	ldi	r24, 0x96	; 150
    61f0:	97 e0       	ldi	r25, 0x07	; 7
    61f2:	9f 93       	push	r25
    61f4:	8f 93       	push	r24
    61f6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			STOP_REV_VALVE_2;
    61fa:	a3 98       	cbi	0x14, 3	; 20
			
			
			Comp_2.revVOn=0;
    61fc:	10 92 ec 09 	sts	0x09EC, r1	; 0x8009ec <Comp_2+0xe>
			time_count_2+= difftime(time(&current_time), timeStartRevV_2);
    6200:	c0 90 a2 0a 	lds	r12, 0x0AA2	; 0x800aa2 <timeStartRevV_2>
    6204:	d0 90 a3 0a 	lds	r13, 0x0AA3	; 0x800aa3 <timeStartRevV_2+0x1>
    6208:	e0 90 a4 0a 	lds	r14, 0x0AA4	; 0x800aa4 <timeStartRevV_2+0x2>
    620c:	f0 90 a5 0a 	lds	r15, 0x0AA5	; 0x800aa5 <timeStartRevV_2+0x3>
    6210:	83 ef       	ldi	r24, 0xF3	; 243
    6212:	98 e0       	ldi	r25, 0x08	; 8
    6214:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6218:	a7 01       	movw	r20, r14
    621a:	96 01       	movw	r18, r12
    621c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    6220:	c0 90 19 07 	lds	r12, 0x0719	; 0x800719 <time_count_2.3221>
    6224:	d0 90 1a 07 	lds	r13, 0x071A	; 0x80071a <time_count_2.3221+0x1>
    6228:	e0 90 1b 07 	lds	r14, 0x071B	; 0x80071b <time_count_2.3221+0x2>
    622c:	f0 90 1c 07 	lds	r15, 0x071C	; 0x80071c <time_count_2.3221+0x3>
    6230:	dc 01       	movw	r26, r24
    6232:	cb 01       	movw	r24, r22
    6234:	8c 0d       	add	r24, r12
    6236:	9d 1d       	adc	r25, r13
    6238:	ae 1d       	adc	r26, r14
    623a:	bf 1d       	adc	r27, r15
    623c:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <time_count_2.3221>
    6240:	90 93 1a 07 	sts	0x071A, r25	; 0x80071a <time_count_2.3221+0x1>
    6244:	a0 93 1b 07 	sts	0x071B, r26	; 0x80071b <time_count_2.3221+0x2>
    6248:	b0 93 1c 07 	sts	0x071C, r27	; 0x80071c <time_count_2.3221+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    624c:	0f 90       	pop	r0
    624e:	0f 90       	pop	r0
    6250:	0f 90       	pop	r0
    6252:	0f 90       	pop	r0
    6254:	81 31       	cpi	r24, 0x11	; 17
    6256:	9e 40       	sbci	r25, 0x0E	; 14
    6258:	a1 05       	cpc	r26, r1
    625a:	b1 05       	cpc	r27, r1
    625c:	b8 f0       	brcs	.+46     	; 0x628c <Revers_Stop+0x1b6>
    625e:	e6 e4       	ldi	r30, 0x46	; 70
    6260:	f9 e0       	ldi	r31, 0x09	; 9
    6262:	80 81       	ld	r24, Z
    6264:	91 81       	ldd	r25, Z+1	; 0x01
    6266:	01 96       	adiw	r24, 0x01	; 1
    6268:	91 83       	std	Z+1, r25	; 0x01
    626a:	80 83       	st	Z, r24
    626c:	40 e6       	ldi	r20, 0x60	; 96
    626e:	50 e0       	ldi	r21, 0x00	; 0
    6270:	60 e0       	ldi	r22, 0x00	; 0
    6272:	70 e0       	ldi	r23, 0x00	; 0
    6274:	88 ef       	ldi	r24, 0xF8	; 248
    6276:	98 e0       	ldi	r25, 0x08	; 8
    6278:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <eeprom_update_block>
    627c:	10 92 19 07 	sts	0x0719, r1	; 0x800719 <time_count_2.3221>
    6280:	10 92 1a 07 	sts	0x071A, r1	; 0x80071a <time_count_2.3221+0x1>
    6284:	10 92 1b 07 	sts	0x071B, r1	; 0x80071b <time_count_2.3221+0x2>
    6288:	10 92 1c 07 	sts	0x071C, r1	; 0x80071c <time_count_2.3221+0x3>

		}
		xTimerChangePeriod( xStopSource_2,period, 100 );
    628c:	0f 2e       	mov	r0, r31
    628e:	f4 e6       	ldi	r31, 0x64	; 100
    6290:	cf 2e       	mov	r12, r31
    6292:	d1 2c       	mov	r13, r1
    6294:	e1 2c       	mov	r14, r1
    6296:	f1 2c       	mov	r15, r1
    6298:	f0 2d       	mov	r31, r0
    629a:	00 e0       	ldi	r16, 0x00	; 0
    629c:	10 e0       	ldi	r17, 0x00	; 0
    629e:	a5 01       	movw	r20, r10
    62a0:	94 01       	movw	r18, r8
    62a2:	64 e0       	ldi	r22, 0x04	; 4
    62a4:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <xStopSource_2>
    62a8:	90 91 4f 0a 	lds	r25, 0x0A4F	; 0x800a4f <xStopSource_2+0x1>
    62ac:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		//xTimerStart(xStopSource_2, 0);
	}
	
	
}
    62b0:	1f 91       	pop	r17
    62b2:	0f 91       	pop	r16
    62b4:	ff 90       	pop	r15
    62b6:	ef 90       	pop	r14
    62b8:	df 90       	pop	r13
    62ba:	cf 90       	pop	r12
    62bc:	bf 90       	pop	r11
    62be:	af 90       	pop	r10
    62c0:	9f 90       	pop	r9
    62c2:	8f 90       	pop	r8
    62c4:	08 95       	ret

000062c6 <SorcePump_Stop>:
//---------------------------------------------------------------------------
void SorcePump_Stop(TimerHandle_t xTimer)
{
    62c6:	cf 92       	push	r12
    62c8:	df 92       	push	r13
    62ca:	ef 92       	push	r14
    62cc:	ff 92       	push	r15
	static time_t time_count_1;
	static time_t time_count_2;
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    62ce:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
     // xSerialxPrintf(&xSerial3Port,"StopSource\r\n");
    
	 	
	 
	if((*pxTimerID) == uxStopDelaySourcePTimer_1_ID)
    62d2:	fc 01       	movw	r30, r24
    62d4:	80 81       	ld	r24, Z
    62d6:	89 30       	cpi	r24, 0x09	; 9
    62d8:	09 f0       	breq	.+2      	; 0x62dc <SorcePump_Stop+0x16>
    62da:	5e c0       	rjmp	.+188    	; 0x6398 <SorcePump_Stop+0xd2>
	{
		Comp_1.switchToMode=false ;
    62dc:	10 92 58 09 	sts	0x0958, r1	; 0x800958 <Comp_1>
		
		
		if(PIN_SOURCE_PUMP_1 > 0)//
    62e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    62e4:	81 ff       	sbrs	r24, 1
    62e6:	b8 c0       	rjmp	.+368    	; 0x6458 <SorcePump_Stop+0x192>
		{
			STOP_SOURCE_PUMP_1;
    62e8:	e2 e0       	ldi	r30, 0x02	; 2
    62ea:	f1 e0       	ldi	r31, 0x01	; 1
    62ec:	80 81       	ld	r24, Z
    62ee:	8d 7f       	andi	r24, 0xFD	; 253
    62f0:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopSource_1\r\n");
    62f2:	88 ed       	ldi	r24, 0xD8	; 216
    62f4:	93 e0       	ldi	r25, 0x03	; 3
    62f6:	9f 93       	push	r25
    62f8:	8f 93       	push	r24
    62fa:	86 e9       	ldi	r24, 0x96	; 150
    62fc:	97 e0       	ldi	r25, 0x07	; 7
    62fe:	9f 93       	push	r25
    6300:	8f 93       	push	r24
    6302:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.srcPOn=0;
    6306:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <Comp_1+0xf>
			
			
			time_count_1+= difftime(time(&current_time), timeStartSrcP_1);
    630a:	c0 90 d0 09 	lds	r12, 0x09D0	; 0x8009d0 <timeStartSrcP_1>
    630e:	d0 90 d1 09 	lds	r13, 0x09D1	; 0x8009d1 <timeStartSrcP_1+0x1>
    6312:	e0 90 d2 09 	lds	r14, 0x09D2	; 0x8009d2 <timeStartSrcP_1+0x2>
    6316:	f0 90 d3 09 	lds	r15, 0x09D3	; 0x8009d3 <timeStartSrcP_1+0x3>
    631a:	83 ef       	ldi	r24, 0xF3	; 243
    631c:	98 e0       	ldi	r25, 0x08	; 8
    631e:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6322:	a7 01       	movw	r20, r14
    6324:	96 01       	movw	r18, r12
    6326:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    632a:	c0 90 15 07 	lds	r12, 0x0715	; 0x800715 <time_count_1.3227>
    632e:	d0 90 16 07 	lds	r13, 0x0716	; 0x800716 <time_count_1.3227+0x1>
    6332:	e0 90 17 07 	lds	r14, 0x0717	; 0x800717 <time_count_1.3227+0x2>
    6336:	f0 90 18 07 	lds	r15, 0x0718	; 0x800718 <time_count_1.3227+0x3>
    633a:	dc 01       	movw	r26, r24
    633c:	cb 01       	movw	r24, r22
    633e:	8c 0d       	add	r24, r12
    6340:	9d 1d       	adc	r25, r13
    6342:	ae 1d       	adc	r26, r14
    6344:	bf 1d       	adc	r27, r15
    6346:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <time_count_1.3227>
    634a:	90 93 16 07 	sts	0x0716, r25	; 0x800716 <time_count_1.3227+0x1>
    634e:	a0 93 17 07 	sts	0x0717, r26	; 0x800717 <time_count_1.3227+0x2>
    6352:	b0 93 18 07 	sts	0x0718, r27	; 0x800718 <time_count_1.3227+0x3>
			//xSerialxPrintf(&xSerial3Port,"time_count_1=%d\r\n",time_count_1);
			if(time_count_1>ONE_HOUR){EEpromData.time_pump_source_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    6356:	0f 90       	pop	r0
    6358:	0f 90       	pop	r0
    635a:	0f 90       	pop	r0
    635c:	0f 90       	pop	r0
    635e:	81 31       	cpi	r24, 0x11	; 17
    6360:	9e 40       	sbci	r25, 0x0E	; 14
    6362:	a1 05       	cpc	r26, r1
    6364:	b1 05       	cpc	r27, r1
    6366:	08 f4       	brcc	.+2      	; 0x636a <SorcePump_Stop+0xa4>
    6368:	77 c0       	rjmp	.+238    	; 0x6458 <SorcePump_Stop+0x192>
    636a:	e8 ef       	ldi	r30, 0xF8	; 248
    636c:	f8 e0       	ldi	r31, 0x08	; 8
    636e:	86 a9       	ldd	r24, Z+54	; 0x36
    6370:	97 a9       	ldd	r25, Z+55	; 0x37
    6372:	01 96       	adiw	r24, 0x01	; 1
    6374:	97 ab       	std	Z+55, r25	; 0x37
    6376:	86 ab       	std	Z+54, r24	; 0x36
    6378:	40 e6       	ldi	r20, 0x60	; 96
    637a:	50 e0       	ldi	r21, 0x00	; 0
    637c:	60 e0       	ldi	r22, 0x00	; 0
    637e:	70 e0       	ldi	r23, 0x00	; 0
    6380:	cf 01       	movw	r24, r30
    6382:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <eeprom_update_block>
    6386:	10 92 15 07 	sts	0x0715, r1	; 0x800715 <time_count_1.3227>
    638a:	10 92 16 07 	sts	0x0716, r1	; 0x800716 <time_count_1.3227+0x1>
    638e:	10 92 17 07 	sts	0x0717, r1	; 0x800717 <time_count_1.3227+0x2>
    6392:	10 92 18 07 	sts	0x0718, r1	; 0x800718 <time_count_1.3227+0x3>
    6396:	60 c0       	rjmp	.+192    	; 0x6458 <SorcePump_Stop+0x192>

		}
		
	}
	
	else if((*pxTimerID) == uxStopDelaySourcePTimer_2_ID)
    6398:	86 31       	cpi	r24, 0x16	; 22
    639a:	09 f0       	breq	.+2      	; 0x639e <SorcePump_Stop+0xd8>
    639c:	5d c0       	rjmp	.+186    	; 0x6458 <SorcePump_Stop+0x192>
	{
		//xSerialxPrintf(&xSerial3Port,"StopSource_2\r\n");
		if(PIN_SOURCE_PUMP_2 > 0)//
    639e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    63a2:	82 ff       	sbrs	r24, 2
    63a4:	59 c0       	rjmp	.+178    	; 0x6458 <SorcePump_Stop+0x192>
		{
			STOP_SOURCE_PUMP_2;
    63a6:	e2 e0       	ldi	r30, 0x02	; 2
    63a8:	f1 e0       	ldi	r31, 0x01	; 1
    63aa:	80 81       	ld	r24, Z
    63ac:	8b 7f       	andi	r24, 0xFB	; 251
    63ae:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopSource_2\r\n");
    63b0:	87 ee       	ldi	r24, 0xE7	; 231
    63b2:	93 e0       	ldi	r25, 0x03	; 3
    63b4:	9f 93       	push	r25
    63b6:	8f 93       	push	r24
    63b8:	86 e9       	ldi	r24, 0x96	; 150
    63ba:	97 e0       	ldi	r25, 0x07	; 7
    63bc:	9f 93       	push	r25
    63be:	8f 93       	push	r24
    63c0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			Comp_2.srcPOn=0;
    63c4:	ee ed       	ldi	r30, 0xDE	; 222
    63c6:	f9 e0       	ldi	r31, 0x09	; 9
    63c8:	17 86       	std	Z+15, r1	; 0x0f
			Comp_2.switchToMode=false;
    63ca:	10 82       	st	Z, r1
			time_count_2+= difftime(time(&current_time), timeStartSrcP_2);
    63cc:	c0 90 8b 0a 	lds	r12, 0x0A8B	; 0x800a8b <timeStartSrcP_2>
    63d0:	d0 90 8c 0a 	lds	r13, 0x0A8C	; 0x800a8c <timeStartSrcP_2+0x1>
    63d4:	e0 90 8d 0a 	lds	r14, 0x0A8D	; 0x800a8d <timeStartSrcP_2+0x2>
    63d8:	f0 90 8e 0a 	lds	r15, 0x0A8E	; 0x800a8e <timeStartSrcP_2+0x3>
    63dc:	83 ef       	ldi	r24, 0xF3	; 243
    63de:	98 e0       	ldi	r25, 0x08	; 8
    63e0:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    63e4:	a7 01       	movw	r20, r14
    63e6:	96 01       	movw	r18, r12
    63e8:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    63ec:	c0 90 11 07 	lds	r12, 0x0711	; 0x800711 <time_count_2.3228>
    63f0:	d0 90 12 07 	lds	r13, 0x0712	; 0x800712 <time_count_2.3228+0x1>
    63f4:	e0 90 13 07 	lds	r14, 0x0713	; 0x800713 <time_count_2.3228+0x2>
    63f8:	f0 90 14 07 	lds	r15, 0x0714	; 0x800714 <time_count_2.3228+0x3>
    63fc:	dc 01       	movw	r26, r24
    63fe:	cb 01       	movw	r24, r22
    6400:	8c 0d       	add	r24, r12
    6402:	9d 1d       	adc	r25, r13
    6404:	ae 1d       	adc	r26, r14
    6406:	bf 1d       	adc	r27, r15
    6408:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <time_count_2.3228>
    640c:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <time_count_2.3228+0x1>
    6410:	a0 93 13 07 	sts	0x0713, r26	; 0x800713 <time_count_2.3228+0x2>
    6414:	b0 93 14 07 	sts	0x0714, r27	; 0x800714 <time_count_2.3228+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_pump_source_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    6418:	0f 90       	pop	r0
    641a:	0f 90       	pop	r0
    641c:	0f 90       	pop	r0
    641e:	0f 90       	pop	r0
    6420:	81 31       	cpi	r24, 0x11	; 17
    6422:	9e 40       	sbci	r25, 0x0E	; 14
    6424:	a1 05       	cpc	r26, r1
    6426:	b1 05       	cpc	r27, r1
    6428:	b8 f0       	brcs	.+46     	; 0x6458 <SorcePump_Stop+0x192>
    642a:	e4 e4       	ldi	r30, 0x44	; 68
    642c:	f9 e0       	ldi	r31, 0x09	; 9
    642e:	80 81       	ld	r24, Z
    6430:	91 81       	ldd	r25, Z+1	; 0x01
    6432:	01 96       	adiw	r24, 0x01	; 1
    6434:	91 83       	std	Z+1, r25	; 0x01
    6436:	80 83       	st	Z, r24
    6438:	40 e6       	ldi	r20, 0x60	; 96
    643a:	50 e0       	ldi	r21, 0x00	; 0
    643c:	60 e0       	ldi	r22, 0x00	; 0
    643e:	70 e0       	ldi	r23, 0x00	; 0
    6440:	88 ef       	ldi	r24, 0xF8	; 248
    6442:	98 e0       	ldi	r25, 0x08	; 8
    6444:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <eeprom_update_block>
    6448:	10 92 11 07 	sts	0x0711, r1	; 0x800711 <time_count_2.3228>
    644c:	10 92 12 07 	sts	0x0712, r1	; 0x800712 <time_count_2.3228+0x1>
    6450:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <time_count_2.3228+0x2>
    6454:	10 92 14 07 	sts	0x0714, r1	; 0x800714 <time_count_2.3228+0x3>

		}
	}
}
    6458:	ff 90       	pop	r15
    645a:	ef 90       	pop	r14
    645c:	df 90       	pop	r13
    645e:	cf 90       	pop	r12
    6460:	08 95       	ret

00006462 <StartComp>:
		
	}
}


void StartComp(TimerHandle_t xTimer){
    6462:	8f 92       	push	r8
    6464:	9f 92       	push	r9
    6466:	af 92       	push	r10
    6468:	bf 92       	push	r11
    646a:	cf 92       	push	r12
    646c:	df 92       	push	r13
    646e:	ef 92       	push	r14
    6470:	ff 92       	push	r15
    6472:	0f 93       	push	r16
    6474:	1f 93       	push	r17
    6476:	ac 01       	movw	r20, r24
	
	portBASE_TYPE *pxTimerID;
	
	TickType_t period;	
	period=(TickType_t)EEpromData.TRV_Delay;
    6478:	20 91 fd 08 	lds	r18, 0x08FD	; 0x8008fd <EEpromData+0x5>
    period*=1000;
    647c:	30 e0       	ldi	r19, 0x00	; 0
    647e:	a8 ee       	ldi	r26, 0xE8	; 232
    6480:	b3 e0       	ldi	r27, 0x03	; 3
    6482:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    6486:	4b 01       	movw	r8, r22
    6488:	5c 01       	movw	r10, r24
	
	pxTimerID = pvTimerGetTimerID(xTimer);
    648a:	ca 01       	movw	r24, r20
    648c:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
//xSerialxPrintf(&xSerial3Port,"StartCompressor\r\n");
	if((*pxTimerID) == uxStartDelayCompTimer_1_ID) {
    6490:	fc 01       	movw	r30, r24
    6492:	80 81       	ld	r24, Z
    6494:	81 30       	cpi	r24, 0x01	; 1
    6496:	09 f0       	breq	.+2      	; 0x649a <StartComp+0x38>
    6498:	61 c0       	rjmp	.+194    	; 0x655c <StartComp+0xfa>
		Comp_1.switchToMode=false;
    649a:	e8 e5       	ldi	r30, 0x58	; 88
    649c:	f9 e0       	ldi	r31, 0x09	; 9
    649e:	10 82       	st	Z, r1
		 if(Comp_1.def) {timeTillDef=xTaskGetTickCount();Comp_1.stopdef=true;}
    64a0:	81 85       	ldd	r24, Z+9	; 0x09
    64a2:	88 23       	and	r24, r24
    64a4:	69 f0       	breq	.+26     	; 0x64c0 <StartComp+0x5e>
    64a6:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    64aa:	60 93 d9 08 	sts	0x08D9, r22	; 0x8008d9 <timeTillDef>
    64ae:	70 93 da 08 	sts	0x08DA, r23	; 0x8008da <timeTillDef+0x1>
    64b2:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <timeTillDef+0x2>
    64b6:	90 93 dc 08 	sts	0x08DC, r25	; 0x8008dc <timeTillDef+0x3>
    64ba:	81 e0       	ldi	r24, 0x01	; 1
    64bc:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <Comp_1+0xa>
		if(PIN_COMPRESSOR_1 == 0)
    64c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    64c4:	85 fd       	sbrc	r24, 5
    64c6:	9c c0       	rjmp	.+312    	; 0x6600 <StartComp+0x19e>
		{   
			
			Comp_1.compOn=1;
    64c8:	81 e0       	ldi	r24, 0x01	; 1
    64ca:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <Comp_1+0xb>
			//if(Comp_2.compOn)vTaskDelay(5000);
			START_COMPRESSOR_1;
    64ce:	e2 e0       	ldi	r30, 0x02	; 2
    64d0:	f1 e0       	ldi	r31, 0x01	; 1
    64d2:	80 81       	ld	r24, Z
    64d4:	80 62       	ori	r24, 0x20	; 32
    64d6:	80 83       	st	Z, r24
			
			xSerialxPrintf(&xSerial3Port,"StartCompressor_1\r\n");
    64d8:	86 ef       	ldi	r24, 0xF6	; 246
    64da:	93 e0       	ldi	r25, 0x03	; 3
    64dc:	9f 93       	push	r25
    64de:	8f 93       	push	r24
    64e0:	86 e9       	ldi	r24, 0x96	; 150
    64e2:	97 e0       	ldi	r25, 0x07	; 7
    64e4:	9f 93       	push	r25
    64e6:	8f 93       	push	r24
    64e8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			
			timeStartComp_1=time(&current_time);
    64ec:	83 ef       	ldi	r24, 0xF3	; 243
    64ee:	98 e0       	ldi	r25, 0x08	; 8
    64f0:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    64f4:	60 93 e7 08 	sts	0x08E7, r22	; 0x8008e7 <timeStartComp_1>
    64f8:	70 93 e8 08 	sts	0x08E8, r23	; 0x8008e8 <timeStartComp_1+0x1>
    64fc:	80 93 e9 08 	sts	0x08E9, r24	; 0x8008e9 <timeStartComp_1+0x2>
    6500:	90 93 ea 08 	sts	0x08EA, r25	; 0x8008ea <timeStartComp_1+0x3>
			EEpromData.number_turnon_compressor_1+=1;
    6504:	e8 ef       	ldi	r30, 0xF8	; 248
    6506:	f8 e0       	ldi	r31, 0x08	; 8
    6508:	86 ad       	ldd	r24, Z+62	; 0x3e
    650a:	97 ad       	ldd	r25, Z+63	; 0x3f
    650c:	01 96       	adiw	r24, 0x01	; 1
    650e:	97 af       	std	Z+63, r25	; 0x3f
    6510:	86 af       	std	Z+62, r24	; 0x3e
			//xSerialxPrintf(&xSerial3Port,"Number_turnon_Compressor_=%d\r\n",EEpromData.number_turnon_compressor_1);
			xTimerChangePeriod( xTStartCheckTrv_1,period, 100 );
    6512:	0f 2e       	mov	r0, r31
    6514:	f4 e6       	ldi	r31, 0x64	; 100
    6516:	cf 2e       	mov	r12, r31
    6518:	d1 2c       	mov	r13, r1
    651a:	e1 2c       	mov	r14, r1
    651c:	f1 2c       	mov	r15, r1
    651e:	f0 2d       	mov	r31, r0
    6520:	00 e0       	ldi	r16, 0x00	; 0
    6522:	10 e0       	ldi	r17, 0x00	; 0
    6524:	a5 01       	movw	r20, r10
    6526:	94 01       	movw	r18, r8
    6528:	64 e0       	ldi	r22, 0x04	; 4
    652a:	80 91 f1 08 	lds	r24, 0x08F1	; 0x8008f1 <xTStartCheckTrv_1>
    652e:	90 91 f2 08 	lds	r25, 0x08F2	; 0x8008f2 <xTStartCheckTrv_1+0x1>
    6532:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
			xTimerStart(xTStartCheckErrors_1, 0);
    6536:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    653a:	9b 01       	movw	r18, r22
    653c:	ac 01       	movw	r20, r24
    653e:	c1 2c       	mov	r12, r1
    6540:	d1 2c       	mov	r13, r1
    6542:	76 01       	movw	r14, r12
    6544:	61 e0       	ldi	r22, 0x01	; 1
    6546:	80 91 8f 0a 	lds	r24, 0x0A8F	; 0x800a8f <xTStartCheckErrors_1>
    654a:	90 91 90 0a 	lds	r25, 0x0A90	; 0x800a90 <xTStartCheckErrors_1+0x1>
    654e:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    6552:	0f 90       	pop	r0
    6554:	0f 90       	pop	r0
    6556:	0f 90       	pop	r0
    6558:	0f 90       	pop	r0
    655a:	52 c0       	rjmp	.+164    	; 0x6600 <StartComp+0x19e>
	
		}
	}
	else if((*pxTimerID) == uxStartDelayCompTimer_2_ID) {
    655c:	8e 30       	cpi	r24, 0x0E	; 14
    655e:	09 f0       	breq	.+2      	; 0x6562 <StartComp+0x100>
    6560:	4f c0       	rjmp	.+158    	; 0x6600 <StartComp+0x19e>
		xSerialxPrintf(&xSerial3Port,"StartCompressor_2\r\n");
    6562:	8a e0       	ldi	r24, 0x0A	; 10
    6564:	94 e0       	ldi	r25, 0x04	; 4
    6566:	9f 93       	push	r25
    6568:	8f 93       	push	r24
    656a:	86 e9       	ldi	r24, 0x96	; 150
    656c:	97 e0       	ldi	r25, 0x07	; 7
    656e:	9f 93       	push	r25
    6570:	8f 93       	push	r24
    6572:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_COMPRESSOR_2 == 0)
    6576:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    657a:	0f 90       	pop	r0
    657c:	0f 90       	pop	r0
    657e:	0f 90       	pop	r0
    6580:	0f 90       	pop	r0
    6582:	86 fd       	sbrc	r24, 6
    6584:	3d c0       	rjmp	.+122    	; 0x6600 <StartComp+0x19e>
		{
			//if(Comp_1.compOn)vTaskDelay(5000);
			Comp_2.compOn=1;
    6586:	ee ed       	ldi	r30, 0xDE	; 222
    6588:	f9 e0       	ldi	r31, 0x09	; 9
    658a:	81 e0       	ldi	r24, 0x01	; 1
    658c:	83 87       	std	Z+11, r24	; 0x0b
			START_COMPRESSOR_2;
    658e:	a2 e0       	ldi	r26, 0x02	; 2
    6590:	b1 e0       	ldi	r27, 0x01	; 1
    6592:	8c 91       	ld	r24, X
    6594:	80 64       	ori	r24, 0x40	; 64
    6596:	8c 93       	st	X, r24
			
			
			Comp_2.switchToMode=false;
    6598:	10 82       	st	Z, r1
			
			timeStartComp_2=time(&current_time);
    659a:	83 ef       	ldi	r24, 0xF3	; 243
    659c:	98 e0       	ldi	r25, 0x08	; 8
    659e:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    65a2:	60 93 91 0a 	sts	0x0A91, r22	; 0x800a91 <timeStartComp_2>
    65a6:	70 93 92 0a 	sts	0x0A92, r23	; 0x800a92 <timeStartComp_2+0x1>
    65aa:	80 93 93 0a 	sts	0x0A93, r24	; 0x800a93 <timeStartComp_2+0x2>
    65ae:	90 93 94 0a 	sts	0x0A94, r25	; 0x800a94 <timeStartComp_2+0x3>
			EEpromData.number_turnon_compressor_2+=1;
    65b2:	ea e4       	ldi	r30, 0x4A	; 74
    65b4:	f9 e0       	ldi	r31, 0x09	; 9
    65b6:	80 81       	ld	r24, Z
    65b8:	91 81       	ldd	r25, Z+1	; 0x01
    65ba:	01 96       	adiw	r24, 0x01	; 1
    65bc:	91 83       	std	Z+1, r25	; 0x01
    65be:	80 83       	st	Z, r24
			xTimerChangePeriod( xTStartCheckTrv_2,period, 100 );
    65c0:	0f 2e       	mov	r0, r31
    65c2:	f4 e6       	ldi	r31, 0x64	; 100
    65c4:	cf 2e       	mov	r12, r31
    65c6:	d1 2c       	mov	r13, r1
    65c8:	e1 2c       	mov	r14, r1
    65ca:	f1 2c       	mov	r15, r1
    65cc:	f0 2d       	mov	r31, r0
    65ce:	00 e0       	ldi	r16, 0x00	; 0
    65d0:	10 e0       	ldi	r17, 0x00	; 0
    65d2:	a5 01       	movw	r20, r10
    65d4:	94 01       	movw	r18, r8
    65d6:	64 e0       	ldi	r22, 0x04	; 4
    65d8:	80 91 c8 09 	lds	r24, 0x09C8	; 0x8009c8 <xTStartCheckTrv_2>
    65dc:	90 91 c9 09 	lds	r25, 0x09C9	; 0x8009c9 <xTStartCheckTrv_2+0x1>
    65e0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
			xTimerStart(xTStartCheckErrors_2, 0);
    65e4:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    65e8:	9b 01       	movw	r18, r22
    65ea:	ac 01       	movw	r20, r24
    65ec:	c1 2c       	mov	r12, r1
    65ee:	d1 2c       	mov	r13, r1
    65f0:	76 01       	movw	r14, r12
    65f2:	61 e0       	ldi	r22, 0x01	; 1
    65f4:	80 91 df 08 	lds	r24, 0x08DF	; 0x8008df <xTStartCheckErrors_2>
    65f8:	90 91 e0 08 	lds	r25, 0x08E0	; 0x8008e0 <xTStartCheckErrors_2+0x1>
    65fc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		}
	}
	
	
}
    6600:	1f 91       	pop	r17
    6602:	0f 91       	pop	r16
    6604:	ff 90       	pop	r15
    6606:	ef 90       	pop	r14
    6608:	df 90       	pop	r13
    660a:	cf 90       	pop	r12
    660c:	bf 90       	pop	r11
    660e:	af 90       	pop	r10
    6610:	9f 90       	pop	r9
    6612:	8f 90       	pop	r8
    6614:	08 95       	ret

00006616 <SwitchRev_1_Time>:
	
	
}
//-------------------------------------------------------------------------
void SwitchRev_1_Time(TimerHandle_t xTimer)
{
    6616:	cf 92       	push	r12
    6618:	df 92       	push	r13
    661a:	ef 92       	push	r14
    661c:	ff 92       	push	r15
    661e:	0f 93       	push	r16
    6620:	1f 93       	push	r17
    6622:	cf 93       	push	r28
    6624:	df 93       	push	r29
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    6626:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    662a:	ec 01       	movw	r28, r24
	
	//xSerialxPrintf(&xSerial3Port,"SwitchRev_1\r\n");
	
	if((*pxTimerID) == uxSwitchRevOne_1_ID)
    662c:	88 81       	ld	r24, Y
    662e:	8c 30       	cpi	r24, 0x0C	; 12
    6630:	19 f5       	brne	.+70     	; 0x6678 <SwitchRev_1_Time+0x62>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_ON_1_1\r\n");
    6632:	8e e1       	ldi	r24, 0x1E	; 30
    6634:	94 e0       	ldi	r25, 0x04	; 4
    6636:	9f 93       	push	r25
    6638:	8f 93       	push	r24
    663a:	86 e9       	ldi	r24, 0x96	; 150
    663c:	97 e0       	ldi	r25, 0x07	; 7
    663e:	9f 93       	push	r25
    6640:	8f 93       	push	r24
    6642:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_REV_VALVE_1 == 0){START_REV_VALVE_1;}//
    6646:	0f 90       	pop	r0
    6648:	0f 90       	pop	r0
    664a:	0f 90       	pop	r0
    664c:	0f 90       	pop	r0
    664e:	94 99       	sbic	0x12, 4	; 18
    6650:	02 c0       	rjmp	.+4      	; 0x6656 <SwitchRev_1_Time+0x40>
    6652:	a4 9a       	sbi	0x14, 4	; 20
    6654:	01 c0       	rjmp	.+2      	; 0x6658 <SwitchRev_1_Time+0x42>
		else {STOP_REV_VALVE_1;}//xSerialxPrintf(&xSerial3Port,"SwitchRev_OFF_1\r\n");
    6656:	a4 98       	cbi	0x14, 4	; 20
		xTimerStart(xSwitchRevTwo_1_time, 0);
    6658:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    665c:	9b 01       	movw	r18, r22
    665e:	ac 01       	movw	r20, r24
    6660:	c1 2c       	mov	r12, r1
    6662:	d1 2c       	mov	r13, r1
    6664:	76 01       	movw	r14, r12
    6666:	00 e0       	ldi	r16, 0x00	; 0
    6668:	10 e0       	ldi	r17, 0x00	; 0
    666a:	61 e0       	ldi	r22, 0x01	; 1
    666c:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <xSwitchRevTwo_1_time>
    6670:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <xSwitchRevTwo_1_time+0x1>
    6674:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if((*pxTimerID) == uxSwitchRevOne_2_ID)
    6678:	88 81       	ld	r24, Y
    667a:	88 31       	cpi	r24, 0x18	; 24
    667c:	19 f5       	brne	.+70     	; 0x66c4 <SwitchRev_1_Time+0xae>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_2_1\r\n");
    667e:	81 e3       	ldi	r24, 0x31	; 49
    6680:	94 e0       	ldi	r25, 0x04	; 4
    6682:	9f 93       	push	r25
    6684:	8f 93       	push	r24
    6686:	86 e9       	ldi	r24, 0x96	; 150
    6688:	97 e0       	ldi	r25, 0x07	; 7
    668a:	9f 93       	push	r25
    668c:	8f 93       	push	r24
    668e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		
		if(PIN_REV_VALVE_2 == 0)START_REV_VALVE_2;
    6692:	0f 90       	pop	r0
    6694:	0f 90       	pop	r0
    6696:	0f 90       	pop	r0
    6698:	0f 90       	pop	r0
    669a:	93 99       	sbic	0x12, 3	; 18
    669c:	02 c0       	rjmp	.+4      	; 0x66a2 <SwitchRev_1_Time+0x8c>
    669e:	a3 9a       	sbi	0x14, 3	; 20
    66a0:	01 c0       	rjmp	.+2      	; 0x66a4 <SwitchRev_1_Time+0x8e>
		else STOP_REV_VALVE_2;
    66a2:	a3 98       	cbi	0x14, 3	; 20
		xTimerStart(xSwitchRevTwo_2_time, 0);
    66a4:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    66a8:	9b 01       	movw	r18, r22
    66aa:	ac 01       	movw	r20, r24
    66ac:	c1 2c       	mov	r12, r1
    66ae:	d1 2c       	mov	r13, r1
    66b0:	76 01       	movw	r14, r12
    66b2:	00 e0       	ldi	r16, 0x00	; 0
    66b4:	10 e0       	ldi	r17, 0x00	; 0
    66b6:	61 e0       	ldi	r22, 0x01	; 1
    66b8:	80 91 85 0a 	lds	r24, 0x0A85	; 0x800a85 <xSwitchRevTwo_2_time>
    66bc:	90 91 86 0a 	lds	r25, 0x0A86	; 0x800a86 <xSwitchRevTwo_2_time+0x1>
    66c0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
}
    66c4:	df 91       	pop	r29
    66c6:	cf 91       	pop	r28
    66c8:	1f 91       	pop	r17
    66ca:	0f 91       	pop	r16
    66cc:	ff 90       	pop	r15
    66ce:	ef 90       	pop	r14
    66d0:	df 90       	pop	r13
    66d2:	cf 90       	pop	r12
    66d4:	08 95       	ret

000066d6 <activateTimers>:
const portBASE_TYPE uxStopDelayRevVTimer_2_ID		= 23;
const portBASE_TYPE uxSwitchRevOne_2_ID				= 24;
const portBASE_TYPE uxSwitchRevTwo_2_ID				= 25;

void activateTimers(xCompressor *comp)
{
    66d6:	ef 92       	push	r14
    66d8:	ff 92       	push	r15
    66da:	0f 93       	push	r16
    66dc:	1f 93       	push	r17
    66de:	cf 93       	push	r28
    66e0:	df 93       	push	r29
    66e2:	ec 01       	movw	r28, r24
	
	
	if(comp->Index==1)
    66e4:	fc 01       	movw	r30, r24
    66e6:	e2 59       	subi	r30, 0x92	; 146
    66e8:	ff 4f       	sbci	r31, 0xFF	; 255
    66ea:	80 81       	ld	r24, Z
    66ec:	91 81       	ldd	r25, Z+1	; 0x01
    66ee:	01 97       	sbiw	r24, 0x01	; 1
    66f0:	09 f0       	breq	.+2      	; 0x66f4 <activateTimers+0x1e>
    66f2:	fc c0       	rjmp	.+504    	; 0x68ec <activateTimers+0x216>
	{
		
		xStartRevValve_1   =	xTimerCreate("StRevV_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayRevVTimer_1_ID, StartReversingValve);//(EEpromData.Revers_Valve_delay*1000) 
    66f4:	0f 2e       	mov	r0, r31
    66f6:	f3 e8       	ldi	r31, 0x83	; 131
    66f8:	ef 2e       	mov	r14, r31
    66fa:	fb e2       	ldi	r31, 0x2B	; 43
    66fc:	ff 2e       	mov	r15, r31
    66fe:	f0 2d       	mov	r31, r0
    6700:	0b e1       	ldi	r16, 0x1B	; 27
    6702:	16 e0       	ldi	r17, 0x06	; 6
    6704:	20 e0       	ldi	r18, 0x00	; 0
    6706:	48 e5       	ldi	r20, 0x58	; 88
    6708:	5b e1       	ldi	r21, 0x1B	; 27
    670a:	60 e0       	ldi	r22, 0x00	; 0
    670c:	70 e0       	ldi	r23, 0x00	; 0
    670e:	81 e4       	ldi	r24, 0x41	; 65
    6710:	94 e0       	ldi	r25, 0x04	; 4
    6712:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6716:	90 93 98 0a 	sts	0x0A98, r25	; 0x800a98 <xStartRevValve_1+0x1>
    671a:	80 93 97 0a 	sts	0x0A97, r24	; 0x800a97 <xStartRevValve_1>
		xStartThreeWay     =	xTimerCreate("StThreeW",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayThreeVTimer_1_ID, StartThreeWay);//(EEpromData.Three_Way_delay*1000)
    671e:	0f 2e       	mov	r0, r31
    6720:	fd e0       	ldi	r31, 0x0D	; 13
    6722:	ef 2e       	mov	r14, r31
    6724:	fe e2       	ldi	r31, 0x2E	; 46
    6726:	ff 2e       	mov	r15, r31
    6728:	f0 2d       	mov	r31, r0
    672a:	0a e1       	ldi	r16, 0x1A	; 26
    672c:	16 e0       	ldi	r17, 0x06	; 6
    672e:	20 e0       	ldi	r18, 0x00	; 0
    6730:	48 e5       	ldi	r20, 0x58	; 88
    6732:	5b e1       	ldi	r21, 0x1B	; 27
    6734:	60 e0       	ldi	r22, 0x00	; 0
    6736:	70 e0       	ldi	r23, 0x00	; 0
    6738:	8a e4       	ldi	r24, 0x4A	; 74
    673a:	94 e0       	ldi	r25, 0x04	; 4
    673c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6740:	90 93 cd 09 	sts	0x09CD, r25	; 0x8009cd <xStartThreeWay+0x1>
    6744:	80 93 cc 09 	sts	0x09CC, r24	; 0x8009cc <xStartThreeWay>
		xStartHeatPump_1   =	xTimerCreate("StHeatP_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayHeatPTimer_1_ID, StartHeatPump);//(EEpromData.HeatingPump_delay*1000) 
    6748:	0f 2e       	mov	r0, r31
    674a:	f7 e1       	ldi	r31, 0x17	; 23
    674c:	ef 2e       	mov	r14, r31
    674e:	fa e2       	ldi	r31, 0x2A	; 42
    6750:	ff 2e       	mov	r15, r31
    6752:	f0 2d       	mov	r31, r0
    6754:	0c e1       	ldi	r16, 0x1C	; 28
    6756:	16 e0       	ldi	r17, 0x06	; 6
    6758:	20 e0       	ldi	r18, 0x00	; 0
    675a:	48 e5       	ldi	r20, 0x58	; 88
    675c:	5b e1       	ldi	r21, 0x1B	; 27
    675e:	60 e0       	ldi	r22, 0x00	; 0
    6760:	70 e0       	ldi	r23, 0x00	; 0
    6762:	83 e5       	ldi	r24, 0x53	; 83
    6764:	94 e0       	ldi	r25, 0x04	; 4
    6766:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    676a:	90 93 6d 0a 	sts	0x0A6D, r25	; 0x800a6d <xStartHeatPump_1+0x1>
    676e:	80 93 6c 0a 	sts	0x0A6C, r24	; 0x800a6c <xStartHeatPump_1>
		xStartCompressor_1 =	xTimerCreate("StComp_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayCompTimer_1_ID, StartComp);//(EEpromData.Compressor_delay*1000)
    6772:	0f 2e       	mov	r0, r31
    6774:	f1 e3       	ldi	r31, 0x31	; 49
    6776:	ef 2e       	mov	r14, r31
    6778:	f2 e3       	ldi	r31, 0x32	; 50
    677a:	ff 2e       	mov	r15, r31
    677c:	f0 2d       	mov	r31, r0
    677e:	0d e1       	ldi	r16, 0x1D	; 29
    6780:	16 e0       	ldi	r17, 0x06	; 6
    6782:	20 e0       	ldi	r18, 0x00	; 0
    6784:	48 e5       	ldi	r20, 0x58	; 88
    6786:	5b e1       	ldi	r21, 0x1B	; 27
    6788:	60 e0       	ldi	r22, 0x00	; 0
    678a:	70 e0       	ldi	r23, 0x00	; 0
    678c:	8d e5       	ldi	r24, 0x5D	; 93
    678e:	94 e0       	ldi	r25, 0x04	; 4
    6790:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6794:	90 93 6f 0a 	sts	0x0A6F, r25	; 0x800a6f <xStartCompressor_1+0x1>
    6798:	80 93 6e 0a 	sts	0x0A6E, r24	; 0x800a6e <xStartCompressor_1>
		xTStartCheckErrors_1 =	xTimerCreate("ChErr_1",			300000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayChekErrTimer_1_ID, StartCheckErrors);
    679c:	0f 2e       	mov	r0, r31
    679e:	f7 e2       	ldi	r31, 0x27	; 39
    67a0:	ef 2e       	mov	r14, r31
    67a2:	fb e2       	ldi	r31, 0x2B	; 43
    67a4:	ff 2e       	mov	r15, r31
    67a6:	f0 2d       	mov	r31, r0
    67a8:	08 e1       	ldi	r16, 0x18	; 24
    67aa:	16 e0       	ldi	r17, 0x06	; 6
    67ac:	20 e0       	ldi	r18, 0x00	; 0
    67ae:	40 ee       	ldi	r20, 0xE0	; 224
    67b0:	53 e9       	ldi	r21, 0x93	; 147
    67b2:	64 e0       	ldi	r22, 0x04	; 4
    67b4:	70 e0       	ldi	r23, 0x00	; 0
    67b6:	86 e6       	ldi	r24, 0x66	; 102
    67b8:	94 e0       	ldi	r25, 0x04	; 4
    67ba:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    67be:	90 93 90 0a 	sts	0x0A90, r25	; 0x800a90 <xTStartCheckErrors_1+0x1>
    67c2:	80 93 8f 0a 	sts	0x0A8F, r24	; 0x800a8f <xTStartCheckErrors_1>
		xTStartCheckTrv_1 =		xTimerCreate("ChTrv_1",			7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayChekTrvTimer_1_ID, StartCheckTrv);//(EEpromData.TRV_Delay*1000)
    67c6:	0f 2e       	mov	r0, r31
    67c8:	f7 e5       	ldi	r31, 0x57	; 87
    67ca:	ef 2e       	mov	r14, r31
    67cc:	fb e2       	ldi	r31, 0x2B	; 43
    67ce:	ff 2e       	mov	r15, r31
    67d0:	f0 2d       	mov	r31, r0
    67d2:	09 e1       	ldi	r16, 0x19	; 25
    67d4:	16 e0       	ldi	r17, 0x06	; 6
    67d6:	20 e0       	ldi	r18, 0x00	; 0
    67d8:	48 e5       	ldi	r20, 0x58	; 88
    67da:	5b e1       	ldi	r21, 0x1B	; 27
    67dc:	60 e0       	ldi	r22, 0x00	; 0
    67de:	70 e0       	ldi	r23, 0x00	; 0
    67e0:	8e e6       	ldi	r24, 0x6E	; 110
    67e2:	94 e0       	ldi	r25, 0x04	; 4
    67e4:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    67e8:	90 93 f2 08 	sts	0x08F2, r25	; 0x8008f2 <xTStartCheckTrv_1+0x1>
    67ec:	80 93 f1 08 	sts	0x08F1, r24	; 0x8008f1 <xTStartCheckTrv_1>
		//----------stop

		xSwitchRevOne_1_time =	xTimerCreate("swRevOne_1",		5000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxSwitchRevOne_1_ID, SwitchRev_1_Time);
    67f0:	0f 2e       	mov	r0, r31
    67f2:	fb e0       	ldi	r31, 0x0B	; 11
    67f4:	ef 2e       	mov	r14, r31
    67f6:	f3 e3       	ldi	r31, 0x33	; 51
    67f8:	ff 2e       	mov	r15, r31
    67fa:	f0 2d       	mov	r31, r0
    67fc:	03 e1       	ldi	r16, 0x13	; 19
    67fe:	16 e0       	ldi	r17, 0x06	; 6
    6800:	20 e0       	ldi	r18, 0x00	; 0
    6802:	48 e8       	ldi	r20, 0x88	; 136
    6804:	53 e1       	ldi	r21, 0x13	; 19
    6806:	60 e0       	ldi	r22, 0x00	; 0
    6808:	70 e0       	ldi	r23, 0x00	; 0
    680a:	86 e7       	ldi	r24, 0x76	; 118
    680c:	94 e0       	ldi	r25, 0x04	; 4
    680e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6812:	90 93 ec 08 	sts	0x08EC, r25	; 0x8008ec <xSwitchRevOne_1_time+0x1>
    6816:	80 93 eb 08 	sts	0x08EB, r24	; 0x8008eb <xSwitchRevOne_1_time>
		xSwitchRevTwo_1_time =	xTimerCreate("swRevTwo_1",		5000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxSwitchRevTwo_1_ID, SwitchRev_2_Time);
    681a:	0f 2e       	mov	r0, r31
    681c:	fe eb       	ldi	r31, 0xBE	; 190
    681e:	ef 2e       	mov	r14, r31
    6820:	fa e2       	ldi	r31, 0x2A	; 42
    6822:	ff 2e       	mov	r15, r31
    6824:	f0 2d       	mov	r31, r0
    6826:	02 e1       	ldi	r16, 0x12	; 18
    6828:	16 e0       	ldi	r17, 0x06	; 6
    682a:	20 e0       	ldi	r18, 0x00	; 0
    682c:	48 e8       	ldi	r20, 0x88	; 136
    682e:	53 e1       	ldi	r21, 0x13	; 19
    6830:	60 e0       	ldi	r22, 0x00	; 0
    6832:	70 e0       	ldi	r23, 0x00	; 0
    6834:	81 e8       	ldi	r24, 0x81	; 129
    6836:	94 e0       	ldi	r25, 0x04	; 4
    6838:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    683c:	90 93 6b 0a 	sts	0x0A6B, r25	; 0x800a6b <xSwitchRevTwo_1_time+0x1>
    6840:	80 93 6a 0a 	sts	0x0A6A, r24	; 0x800a6a <xSwitchRevTwo_1_time>
		xStopHeatPump_1   =		xTimerCreate("offHeatP_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayHeatPTimer_1_ID, HeatPump_Stop);//(EEpromData.HeatingPump_delay*1000)
    6844:	0f 2e       	mov	r0, r31
    6846:	f3 ed       	ldi	r31, 0xD3	; 211
    6848:	ef 2e       	mov	r14, r31
    684a:	fe e2       	ldi	r31, 0x2E	; 46
    684c:	ff 2e       	mov	r15, r31
    684e:	f0 2d       	mov	r31, r0
    6850:	07 e1       	ldi	r16, 0x17	; 23
    6852:	16 e0       	ldi	r17, 0x06	; 6
    6854:	20 e0       	ldi	r18, 0x00	; 0
    6856:	48 e5       	ldi	r20, 0x58	; 88
    6858:	5b e1       	ldi	r21, 0x1B	; 27
    685a:	60 e0       	ldi	r22, 0x00	; 0
    685c:	70 e0       	ldi	r23, 0x00	; 0
    685e:	8c e8       	ldi	r24, 0x8C	; 140
    6860:	94 e0       	ldi	r25, 0x04	; 4
    6862:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6866:	90 93 e6 08 	sts	0x08E6, r25	; 0x8008e6 <xStopHeatPump_1+0x1>
    686a:	80 93 e5 08 	sts	0x08E5, r24	; 0x8008e5 <xStopHeatPump_1>
		xStopThreeWay     =		xTimerCreate("offThreeW",		7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayThreeVTimer_1_ID, ThreeWay_Stop);//(EEpromData.Three_Way_delay*1000)
    686e:	0f 2e       	mov	r0, r31
    6870:	f0 ee       	ldi	r31, 0xE0	; 224
    6872:	ef 2e       	mov	r14, r31
    6874:	ff e2       	ldi	r31, 0x2F	; 47
    6876:	ff 2e       	mov	r15, r31
    6878:	f0 2d       	mov	r31, r0
    687a:	04 e1       	ldi	r16, 0x14	; 20
    687c:	16 e0       	ldi	r17, 0x06	; 6
    687e:	20 e0       	ldi	r18, 0x00	; 0
    6880:	48 e5       	ldi	r20, 0x58	; 88
    6882:	5b e1       	ldi	r21, 0x1B	; 27
    6884:	60 e0       	ldi	r22, 0x00	; 0
    6886:	70 e0       	ldi	r23, 0x00	; 0
    6888:	87 e9       	ldi	r24, 0x97	; 151
    688a:	94 e0       	ldi	r25, 0x04	; 4
    688c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6890:	90 93 cb 09 	sts	0x09CB, r25	; 0x8009cb <xStopThreeWay+0x1>
    6894:	80 93 ca 09 	sts	0x09CA, r24	; 0x8009ca <xStopThreeWay>
		xStopRevValve_1   =		xTimerCreate("offRevV_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayRevVTimer_1_ID, Revers_Stop);//(EEpromData.Revers_Valve_delay*1000)
    6898:	0f 2e       	mov	r0, r31
    689a:	fb e6       	ldi	r31, 0x6B	; 107
    689c:	ef 2e       	mov	r14, r31
    689e:	f0 e3       	ldi	r31, 0x30	; 48
    68a0:	ff 2e       	mov	r15, r31
    68a2:	f0 2d       	mov	r31, r0
    68a4:	05 e1       	ldi	r16, 0x15	; 21
    68a6:	16 e0       	ldi	r17, 0x06	; 6
    68a8:	20 e0       	ldi	r18, 0x00	; 0
    68aa:	48 e5       	ldi	r20, 0x58	; 88
    68ac:	5b e1       	ldi	r21, 0x1B	; 27
    68ae:	60 e0       	ldi	r22, 0x00	; 0
    68b0:	70 e0       	ldi	r23, 0x00	; 0
    68b2:	81 ea       	ldi	r24, 0xA1	; 161
    68b4:	94 e0       	ldi	r25, 0x04	; 4
    68b6:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    68ba:	90 93 61 0a 	sts	0x0A61, r25	; 0x800a61 <xStopRevValve_1+0x1>
    68be:	80 93 60 0a 	sts	0x0A60, r24	; 0x800a60 <xStopRevValve_1>
		xStopSource_1   =		xTimerCreate("offSourceP_1",	7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelaySourcePTimer_1_ID, SorcePump_Stop);//(EEpromData.Source_Pump_delay*1000)
    68c2:	0f 2e       	mov	r0, r31
    68c4:	f3 e6       	ldi	r31, 0x63	; 99
    68c6:	ef 2e       	mov	r14, r31
    68c8:	f1 e3       	ldi	r31, 0x31	; 49
    68ca:	ff 2e       	mov	r15, r31
    68cc:	f0 2d       	mov	r31, r0
    68ce:	06 e1       	ldi	r16, 0x16	; 22
    68d0:	16 e0       	ldi	r17, 0x06	; 6
    68d2:	20 e0       	ldi	r18, 0x00	; 0
    68d4:	48 e5       	ldi	r20, 0x58	; 88
    68d6:	5b e1       	ldi	r21, 0x1B	; 27
    68d8:	60 e0       	ldi	r22, 0x00	; 0
    68da:	70 e0       	ldi	r23, 0x00	; 0
    68dc:	8b ea       	ldi	r24, 0xAB	; 171
    68de:	94 e0       	ldi	r25, 0x04	; 4
    68e0:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    68e4:	90 93 f0 08 	sts	0x08F0, r25	; 0x8008f0 <xStopSource_1+0x1>
    68e8:	80 93 ef 08 	sts	0x08EF, r24	; 0x8008ef <xStopSource_1>
	}
	if (comp->Index==2)
    68ec:	c2 59       	subi	r28, 0x92	; 146
    68ee:	df 4f       	sbci	r29, 0xFF	; 255
    68f0:	88 81       	ld	r24, Y
    68f2:	99 81       	ldd	r25, Y+1	; 0x01
    68f4:	02 97       	sbiw	r24, 0x02	; 2
    68f6:	09 f0       	breq	.+2      	; 0x68fa <activateTimers+0x224>
    68f8:	d2 c0       	rjmp	.+420    	; 0x6a9e <activateTimers+0x3c8>
	{
		
		xStartRevValve_2   =	xTimerCreate("StRevV_2",		7000, pdFALSE, (void*) &uxStartDelayRevVTimer_2_ID, StartReversingValve);
    68fa:	0f 2e       	mov	r0, r31
    68fc:	f3 e8       	ldi	r31, 0x83	; 131
    68fe:	ef 2e       	mov	r14, r31
    6900:	fb e2       	ldi	r31, 0x2B	; 43
    6902:	ff 2e       	mov	r15, r31
    6904:	f0 2d       	mov	r31, r0
    6906:	0f e0       	ldi	r16, 0x0F	; 15
    6908:	16 e0       	ldi	r17, 0x06	; 6
    690a:	20 e0       	ldi	r18, 0x00	; 0
    690c:	48 e5       	ldi	r20, 0x58	; 88
    690e:	5b e1       	ldi	r21, 0x1B	; 27
    6910:	60 e0       	ldi	r22, 0x00	; 0
    6912:	70 e0       	ldi	r23, 0x00	; 0
    6914:	88 eb       	ldi	r24, 0xB8	; 184
    6916:	94 e0       	ldi	r25, 0x04	; 4
    6918:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    691c:	90 93 59 0a 	sts	0x0A59, r25	; 0x800a59 <xStartRevValve_2+0x1>
    6920:	80 93 58 0a 	sts	0x0A58, r24	; 0x800a58 <xStartRevValve_2>
		xStartHeatPump_2   =	xTimerCreate("StHeatP_2",		7000, pdFALSE, (void*) &uxStartDelayHeatPTimer_2_ID, StartHeatPump);
    6924:	0f 2e       	mov	r0, r31
    6926:	f7 e1       	ldi	r31, 0x17	; 23
    6928:	ef 2e       	mov	r14, r31
    692a:	fa e2       	ldi	r31, 0x2A	; 42
    692c:	ff 2e       	mov	r15, r31
    692e:	f0 2d       	mov	r31, r0
    6930:	00 e1       	ldi	r16, 0x10	; 16
    6932:	16 e0       	ldi	r17, 0x06	; 6
    6934:	20 e0       	ldi	r18, 0x00	; 0
    6936:	48 e5       	ldi	r20, 0x58	; 88
    6938:	5b e1       	ldi	r21, 0x1B	; 27
    693a:	60 e0       	ldi	r22, 0x00	; 0
    693c:	70 e0       	ldi	r23, 0x00	; 0
    693e:	81 ec       	ldi	r24, 0xC1	; 193
    6940:	94 e0       	ldi	r25, 0x04	; 4
    6942:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6946:	90 93 cf 09 	sts	0x09CF, r25	; 0x8009cf <xStartHeatPump_2+0x1>
    694a:	80 93 ce 09 	sts	0x09CE, r24	; 0x8009ce <xStartHeatPump_2>
		xStartCompressor_2 =	xTimerCreate("StComp_2",		7000, pdFALSE, (void*) &uxStartDelayCompTimer_2_ID, StartComp);
    694e:	0f 2e       	mov	r0, r31
    6950:	f1 e3       	ldi	r31, 0x31	; 49
    6952:	ef 2e       	mov	r14, r31
    6954:	f2 e3       	ldi	r31, 0x32	; 50
    6956:	ff 2e       	mov	r15, r31
    6958:	f0 2d       	mov	r31, r0
    695a:	01 e1       	ldi	r16, 0x11	; 17
    695c:	16 e0       	ldi	r17, 0x06	; 6
    695e:	20 e0       	ldi	r18, 0x00	; 0
    6960:	48 e5       	ldi	r20, 0x58	; 88
    6962:	5b e1       	ldi	r21, 0x1B	; 27
    6964:	60 e0       	ldi	r22, 0x00	; 0
    6966:	70 e0       	ldi	r23, 0x00	; 0
    6968:	8b ec       	ldi	r24, 0xCB	; 203
    696a:	94 e0       	ldi	r25, 0x04	; 4
    696c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6970:	90 93 81 0a 	sts	0x0A81, r25	; 0x800a81 <xStartCompressor_2+0x1>
    6974:	80 93 80 0a 	sts	0x0A80, r24	; 0x800a80 <xStartCompressor_2>
		xTStartCheckErrors_2 =	xTimerCreate("ChErr_2",			300000, pdFALSE, (void*) &uxStartDelayChekErrTimer_2_ID, StartCheckErrors);
    6978:	0f 2e       	mov	r0, r31
    697a:	f7 e2       	ldi	r31, 0x27	; 39
    697c:	ef 2e       	mov	r14, r31
    697e:	fb e2       	ldi	r31, 0x2B	; 43
    6980:	ff 2e       	mov	r15, r31
    6982:	f0 2d       	mov	r31, r0
    6984:	0d e0       	ldi	r16, 0x0D	; 13
    6986:	16 e0       	ldi	r17, 0x06	; 6
    6988:	20 e0       	ldi	r18, 0x00	; 0
    698a:	40 ee       	ldi	r20, 0xE0	; 224
    698c:	53 e9       	ldi	r21, 0x93	; 147
    698e:	64 e0       	ldi	r22, 0x04	; 4
    6990:	70 e0       	ldi	r23, 0x00	; 0
    6992:	84 ed       	ldi	r24, 0xD4	; 212
    6994:	94 e0       	ldi	r25, 0x04	; 4
    6996:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    699a:	90 93 e0 08 	sts	0x08E0, r25	; 0x8008e0 <xTStartCheckErrors_2+0x1>
    699e:	80 93 df 08 	sts	0x08DF, r24	; 0x8008df <xTStartCheckErrors_2>
		xTStartCheckTrv_2 =		xTimerCreate("ChTrv_2",			7000, pdFALSE, (void*) &uxStartDelayChekTrvTimer_2_ID, StartCheckTrv);
    69a2:	0f 2e       	mov	r0, r31
    69a4:	f7 e5       	ldi	r31, 0x57	; 87
    69a6:	ef 2e       	mov	r14, r31
    69a8:	fb e2       	ldi	r31, 0x2B	; 43
    69aa:	ff 2e       	mov	r15, r31
    69ac:	f0 2d       	mov	r31, r0
    69ae:	0e e0       	ldi	r16, 0x0E	; 14
    69b0:	16 e0       	ldi	r17, 0x06	; 6
    69b2:	20 e0       	ldi	r18, 0x00	; 0
    69b4:	48 e5       	ldi	r20, 0x58	; 88
    69b6:	5b e1       	ldi	r21, 0x1B	; 27
    69b8:	60 e0       	ldi	r22, 0x00	; 0
    69ba:	70 e0       	ldi	r23, 0x00	; 0
    69bc:	8c ed       	ldi	r24, 0xDC	; 220
    69be:	94 e0       	ldi	r25, 0x04	; 4
    69c0:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    69c4:	90 93 c9 09 	sts	0x09C9, r25	; 0x8009c9 <xTStartCheckTrv_2+0x1>
    69c8:	80 93 c8 09 	sts	0x09C8, r24	; 0x8009c8 <xTStartCheckTrv_2>
		//---------stop
		xSwitchRevOne_2_time =	xTimerCreate("swRevOne_2",		5000, pdFALSE, (void*) &uxSwitchRevOne_2_ID, SwitchRev_1_Time);
    69cc:	0f 2e       	mov	r0, r31
    69ce:	fb e0       	ldi	r31, 0x0B	; 11
    69d0:	ef 2e       	mov	r14, r31
    69d2:	f3 e3       	ldi	r31, 0x33	; 51
    69d4:	ff 2e       	mov	r15, r31
    69d6:	f0 2d       	mov	r31, r0
    69d8:	09 e0       	ldi	r16, 0x09	; 9
    69da:	16 e0       	ldi	r17, 0x06	; 6
    69dc:	20 e0       	ldi	r18, 0x00	; 0
    69de:	48 e8       	ldi	r20, 0x88	; 136
    69e0:	53 e1       	ldi	r21, 0x13	; 19
    69e2:	60 e0       	ldi	r22, 0x00	; 0
    69e4:	70 e0       	ldi	r23, 0x00	; 0
    69e6:	84 ee       	ldi	r24, 0xE4	; 228
    69e8:	94 e0       	ldi	r25, 0x04	; 4
    69ea:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    69ee:	90 93 a1 0a 	sts	0x0AA1, r25	; 0x800aa1 <xSwitchRevOne_2_time+0x1>
    69f2:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <xSwitchRevOne_2_time>
		xSwitchRevTwo_2_time =	xTimerCreate("swRevTwo_2",		5000, pdFALSE, (void*) &uxSwitchRevTwo_2_ID, SwitchRev_2_Time);
    69f6:	0f 2e       	mov	r0, r31
    69f8:	fe eb       	ldi	r31, 0xBE	; 190
    69fa:	ef 2e       	mov	r14, r31
    69fc:	fa e2       	ldi	r31, 0x2A	; 42
    69fe:	ff 2e       	mov	r15, r31
    6a00:	f0 2d       	mov	r31, r0
    6a02:	08 e0       	ldi	r16, 0x08	; 8
    6a04:	16 e0       	ldi	r17, 0x06	; 6
    6a06:	20 e0       	ldi	r18, 0x00	; 0
    6a08:	48 e8       	ldi	r20, 0x88	; 136
    6a0a:	53 e1       	ldi	r21, 0x13	; 19
    6a0c:	60 e0       	ldi	r22, 0x00	; 0
    6a0e:	70 e0       	ldi	r23, 0x00	; 0
    6a10:	8f ee       	ldi	r24, 0xEF	; 239
    6a12:	94 e0       	ldi	r25, 0x04	; 4
    6a14:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6a18:	90 93 86 0a 	sts	0x0A86, r25	; 0x800a86 <xSwitchRevTwo_2_time+0x1>
    6a1c:	80 93 85 0a 	sts	0x0A85, r24	; 0x800a85 <xSwitchRevTwo_2_time>
		xStopHeatPump_2   =		xTimerCreate("offHeatP_2",		7000, pdFALSE, (void*) &uxStopDelayHeatPTimer_2_ID, HeatPump_Stop);
    6a20:	0f 2e       	mov	r0, r31
    6a22:	f3 ed       	ldi	r31, 0xD3	; 211
    6a24:	ef 2e       	mov	r14, r31
    6a26:	fe e2       	ldi	r31, 0x2E	; 46
    6a28:	ff 2e       	mov	r15, r31
    6a2a:	f0 2d       	mov	r31, r0
    6a2c:	0c e0       	ldi	r16, 0x0C	; 12
    6a2e:	16 e0       	ldi	r17, 0x06	; 6
    6a30:	20 e0       	ldi	r18, 0x00	; 0
    6a32:	48 e5       	ldi	r20, 0x58	; 88
    6a34:	5b e1       	ldi	r21, 0x1B	; 27
    6a36:	60 e0       	ldi	r22, 0x00	; 0
    6a38:	70 e0       	ldi	r23, 0x00	; 0
    6a3a:	8a ef       	ldi	r24, 0xFA	; 250
    6a3c:	94 e0       	ldi	r25, 0x04	; 4
    6a3e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6a42:	90 93 5f 0a 	sts	0x0A5F, r25	; 0x800a5f <xStopHeatPump_2+0x1>
    6a46:	80 93 5e 0a 	sts	0x0A5E, r24	; 0x800a5e <xStopHeatPump_2>
		xStopRevValve_2    =	xTimerCreate("offRevV_2",		7000, pdFALSE, (void*) &uxStopDelayRevVTimer_2_ID, Revers_Stop);
    6a4a:	0f 2e       	mov	r0, r31
    6a4c:	fb e6       	ldi	r31, 0x6B	; 107
    6a4e:	ef 2e       	mov	r14, r31
    6a50:	f0 e3       	ldi	r31, 0x30	; 48
    6a52:	ff 2e       	mov	r15, r31
    6a54:	f0 2d       	mov	r31, r0
    6a56:	0a e0       	ldi	r16, 0x0A	; 10
    6a58:	16 e0       	ldi	r17, 0x06	; 6
    6a5a:	20 e0       	ldi	r18, 0x00	; 0
    6a5c:	48 e5       	ldi	r20, 0x58	; 88
    6a5e:	5b e1       	ldi	r21, 0x1B	; 27
    6a60:	60 e0       	ldi	r22, 0x00	; 0
    6a62:	70 e0       	ldi	r23, 0x00	; 0
    6a64:	85 e0       	ldi	r24, 0x05	; 5
    6a66:	95 e0       	ldi	r25, 0x05	; 5
    6a68:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6a6c:	90 93 ee 08 	sts	0x08EE, r25	; 0x8008ee <xStopRevValve_2+0x1>
    6a70:	80 93 ed 08 	sts	0x08ED, r24	; 0x8008ed <xStopRevValve_2>
		xStopSource_2   =		xTimerCreate("offSourceP_2",	7000, pdFALSE, (void*) &uxStopDelaySourcePTimer_2_ID, SorcePump_Stop);
    6a74:	0f 2e       	mov	r0, r31
    6a76:	f3 e6       	ldi	r31, 0x63	; 99
    6a78:	ef 2e       	mov	r14, r31
    6a7a:	f1 e3       	ldi	r31, 0x31	; 49
    6a7c:	ff 2e       	mov	r15, r31
    6a7e:	f0 2d       	mov	r31, r0
    6a80:	0b e0       	ldi	r16, 0x0B	; 11
    6a82:	16 e0       	ldi	r17, 0x06	; 6
    6a84:	20 e0       	ldi	r18, 0x00	; 0
    6a86:	48 e5       	ldi	r20, 0x58	; 88
    6a88:	5b e1       	ldi	r21, 0x1B	; 27
    6a8a:	60 e0       	ldi	r22, 0x00	; 0
    6a8c:	70 e0       	ldi	r23, 0x00	; 0
    6a8e:	8f e0       	ldi	r24, 0x0F	; 15
    6a90:	95 e0       	ldi	r25, 0x05	; 5
    6a92:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6a96:	90 93 4f 0a 	sts	0x0A4F, r25	; 0x800a4f <xStopSource_2+0x1>
    6a9a:	80 93 4e 0a 	sts	0x0A4E, r24	; 0x800a4e <xStopSource_2>
	}
	
	
}
    6a9e:	df 91       	pop	r29
    6aa0:	cf 91       	pop	r28
    6aa2:	1f 91       	pop	r17
    6aa4:	0f 91       	pop	r16
    6aa6:	ff 90       	pop	r15
    6aa8:	ef 90       	pop	r14
    6aaa:	08 95       	ret

00006aac <startDefrost>:
//------------------------------------------------
void startDefrost(xCompressor *comp,xEEdata* eeData){
    6aac:	fb 01       	movw	r30, r22
	_heatWater=eeData->heatWater;
    6aae:	81 e0       	ldi	r24, 0x01	; 1
    6ab0:	95 a1       	ldd	r25, Z+37	; 0x25
    6ab2:	91 11       	cpse	r25, r1
    6ab4:	01 c0       	rjmp	.+2      	; 0x6ab8 <startDefrost+0xc>
    6ab6:	80 e0       	ldi	r24, 0x00	; 0
    6ab8:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <_heatWater>
	_heat =eeData->heat;
    6abc:	81 e0       	ldi	r24, 0x01	; 1
    6abe:	96 a1       	ldd	r25, Z+38	; 0x26
    6ac0:	91 11       	cpse	r25, r1
    6ac2:	01 c0       	rjmp	.+2      	; 0x6ac6 <startDefrost+0x1a>
    6ac4:	80 e0       	ldi	r24, 0x00	; 0
    6ac6:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <_heat>
	_cool =eeData->cool;
    6aca:	81 e0       	ldi	r24, 0x01	; 1
    6acc:	97 a1       	ldd	r25, Z+39	; 0x27
    6ace:	91 11       	cpse	r25, r1
    6ad0:	01 c0       	rjmp	.+2      	; 0x6ad4 <startDefrost+0x28>
    6ad2:	80 e0       	ldi	r24, 0x00	; 0
    6ad4:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <_cool>
	eeData->heatWater=false;
    6ad8:	15 a2       	std	Z+37, r1	; 0x25
	eeData->heat =false;
    6ada:	16 a2       	std	Z+38, r1	; 0x26
	eeData->cool =true;
    6adc:	81 e0       	ldi	r24, 0x01	; 1
    6ade:	87 a3       	std	Z+39, r24	; 0x27
    6ae0:	08 95       	ret

00006ae2 <stopDefrost>:
	//Comp_Stop(comp);
		
}
void stopDefrost(xCompressor *comp,xEEdata* eeData){
    6ae2:	fb 01       	movw	r30, r22
	
	//Comp_Stop(comp);
	//eeData->heatWater=false;
	//eeData->heat =true;
	//eeData->cool =false;
	eeData->heatWater=_heatWater;
    6ae4:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <_heatWater>
    6ae8:	85 a3       	std	Z+37, r24	; 0x25
	eeData->heat =_heat;
    6aea:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <_heat>
    6aee:	86 a3       	std	Z+38, r24	; 0x26
	eeData->cool =_cool;
    6af0:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <_cool>
    6af4:	87 a3       	std	Z+39, r24	; 0x27
    6af6:	08 95       	ret

00006af8 <StarSoursePump>:




//------------------------------------------------
void StarSoursePump(xCompressor *comp){
    6af8:	4f 92       	push	r4
    6afa:	5f 92       	push	r5
    6afc:	6f 92       	push	r6
    6afe:	7f 92       	push	r7
    6b00:	af 92       	push	r10
    6b02:	bf 92       	push	r11
    6b04:	cf 92       	push	r12
    6b06:	df 92       	push	r13
    6b08:	ef 92       	push	r14
    6b0a:	ff 92       	push	r15
    6b0c:	0f 93       	push	r16
    6b0e:	1f 93       	push	r17
    6b10:	cf 93       	push	r28
    6b12:	df 93       	push	r29
    6b14:	5c 01       	movw	r10, r24
TickType_t period;

	period=(TickType_t)EEpromData.Revers_Valve_delay;
    6b16:	20 91 fa 08 	lds	r18, 0x08FA	; 0x8008fa <EEpromData+0x2>
	period*=1000;
    6b1a:	30 e0       	ldi	r19, 0x00	; 0
    6b1c:	a8 ee       	ldi	r26, 0xE8	; 232
    6b1e:	b3 e0       	ldi	r27, 0x03	; 3
    6b20:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    6b24:	2b 01       	movw	r4, r22
    6b26:	3c 01       	movw	r6, r24
	xSerialxPrintf(&xSerial3Port,"R_%d\r\n",comp->Index);
    6b28:	e5 01       	movw	r28, r10
    6b2a:	c2 59       	subi	r28, 0x92	; 146
    6b2c:	df 4f       	sbci	r29, 0xFF	; 255
    6b2e:	89 81       	ldd	r24, Y+1	; 0x01
    6b30:	8f 93       	push	r24
    6b32:	88 81       	ld	r24, Y
    6b34:	8f 93       	push	r24
    6b36:	8c e1       	ldi	r24, 0x1C	; 28
    6b38:	95 e0       	ldi	r25, 0x05	; 5
    6b3a:	9f 93       	push	r25
    6b3c:	8f 93       	push	r24
    6b3e:	86 e9       	ldi	r24, 0x96	; 150
    6b40:	97 e0       	ldi	r25, 0x07	; 7
    6b42:	9f 93       	push	r25
    6b44:	8f 93       	push	r24
    6b46:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(comp->Index == 1)
    6b4a:	0f 90       	pop	r0
    6b4c:	0f 90       	pop	r0
    6b4e:	0f 90       	pop	r0
    6b50:	0f 90       	pop	r0
    6b52:	0f 90       	pop	r0
    6b54:	0f 90       	pop	r0
    6b56:	88 81       	ld	r24, Y
    6b58:	99 81       	ldd	r25, Y+1	; 0x01
    6b5a:	01 97       	sbiw	r24, 0x01	; 1
    6b5c:	09 f0       	breq	.+2      	; 0x6b60 <StarSoursePump+0x68>
    6b5e:	4a c0       	rjmp	.+148    	; 0x6bf4 <StarSoursePump+0xfc>
	{
		
		Comp_1.error=0;
    6b60:	10 92 c5 09 	sts	0x09C5, r1	; 0x8009c5 <Comp_1+0x6d>
    6b64:	10 92 c4 09 	sts	0x09C4, r1	; 0x8009c4 <Comp_1+0x6c>
		Comp_1.switchToMode=true;
    6b68:	81 e0       	ldi	r24, 0x01	; 1
    6b6a:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <Comp_1>
		if(PIN_SOURCE_PUMP_1 == 0 && !comp->def )
    6b6e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6b72:	81 fd       	sbrc	r24, 1
    6b74:	2d c0       	rjmp	.+90     	; 0x6bd0 <StarSoursePump+0xd8>
    6b76:	f5 01       	movw	r30, r10
    6b78:	81 85       	ldd	r24, Z+9	; 0x09
    6b7a:	81 11       	cpse	r24, r1
    6b7c:	29 c0       	rjmp	.+82     	; 0x6bd0 <StarSoursePump+0xd8>
		{
			START_SOURCE_PUMP_1;
    6b7e:	e2 e0       	ldi	r30, 0x02	; 2
    6b80:	f1 e0       	ldi	r31, 0x01	; 1
    6b82:	80 81       	ld	r24, Z
    6b84:	82 60       	ori	r24, 0x02	; 2
    6b86:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StartSourcePump_1\r\n");
    6b88:	83 e2       	ldi	r24, 0x23	; 35
    6b8a:	95 e0       	ldi	r25, 0x05	; 5
    6b8c:	9f 93       	push	r25
    6b8e:	8f 93       	push	r24
    6b90:	86 e9       	ldi	r24, 0x96	; 150
    6b92:	97 e0       	ldi	r25, 0x07	; 7
    6b94:	9f 93       	push	r25
    6b96:	8f 93       	push	r24
    6b98:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->srcPOn=1;
    6b9c:	81 e0       	ldi	r24, 0x01	; 1
    6b9e:	f5 01       	movw	r30, r10
    6ba0:	87 87       	std	Z+15, r24	; 0x0f
			timeStartSrcP_1=time(&current_time);
    6ba2:	83 ef       	ldi	r24, 0xF3	; 243
    6ba4:	98 e0       	ldi	r25, 0x08	; 8
    6ba6:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6baa:	60 93 d0 09 	sts	0x09D0, r22	; 0x8009d0 <timeStartSrcP_1>
    6bae:	70 93 d1 09 	sts	0x09D1, r23	; 0x8009d1 <timeStartSrcP_1+0x1>
    6bb2:	80 93 d2 09 	sts	0x09D2, r24	; 0x8009d2 <timeStartSrcP_1+0x2>
    6bb6:	90 93 d3 09 	sts	0x09D3, r25	; 0x8009d3 <timeStartSrcP_1+0x3>
			EEpromData.number_turnon_source_1+=1;
    6bba:	e8 e3       	ldi	r30, 0x38	; 56
    6bbc:	f9 e0       	ldi	r31, 0x09	; 9
    6bbe:	80 81       	ld	r24, Z
    6bc0:	91 81       	ldd	r25, Z+1	; 0x01
    6bc2:	01 96       	adiw	r24, 0x01	; 1
    6bc4:	91 83       	std	Z+1, r25	; 0x01
    6bc6:	80 83       	st	Z, r24
    6bc8:	0f 90       	pop	r0
    6bca:	0f 90       	pop	r0
    6bcc:	0f 90       	pop	r0
    6bce:	0f 90       	pop	r0
			//xSerialxPrintf(&xSerial3Port,"Number_turnon_source_=%d\r\n",EEpromData.number_turnon_source_1);
			
						
		}
		xTimerChangePeriod( xStartRevValve_1,period, 100 );
    6bd0:	0f 2e       	mov	r0, r31
    6bd2:	f4 e6       	ldi	r31, 0x64	; 100
    6bd4:	cf 2e       	mov	r12, r31
    6bd6:	d1 2c       	mov	r13, r1
    6bd8:	e1 2c       	mov	r14, r1
    6bda:	f1 2c       	mov	r15, r1
    6bdc:	f0 2d       	mov	r31, r0
    6bde:	00 e0       	ldi	r16, 0x00	; 0
    6be0:	10 e0       	ldi	r17, 0x00	; 0
    6be2:	a3 01       	movw	r20, r6
    6be4:	92 01       	movw	r18, r4
    6be6:	64 e0       	ldi	r22, 0x04	; 4
    6be8:	80 91 97 0a 	lds	r24, 0x0A97	; 0x800a97 <xStartRevValve_1>
    6bec:	90 91 98 0a 	lds	r25, 0x0A98	; 0x800a98 <xStartRevValve_1+0x1>
    6bf0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if(comp->Index == 2)
    6bf4:	f5 01       	movw	r30, r10
    6bf6:	e2 59       	subi	r30, 0x92	; 146
    6bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    6bfa:	80 81       	ld	r24, Z
    6bfc:	91 81       	ldd	r25, Z+1	; 0x01
    6bfe:	02 97       	sbiw	r24, 0x02	; 2
    6c00:	09 f0       	breq	.+2      	; 0x6c04 <StarSoursePump+0x10c>
    6c02:	47 c0       	rjmp	.+142    	; 0x6c92 <StarSoursePump+0x19a>
	{
		Comp_2.error=0;
    6c04:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <Comp_2+0x6d>
    6c08:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <Comp_2+0x6c>
		xSerialxPrintf(&xSerial3Port,"StartSourcePump_2\r\n");
    6c0c:	87 e3       	ldi	r24, 0x37	; 55
    6c0e:	95 e0       	ldi	r25, 0x05	; 5
    6c10:	9f 93       	push	r25
    6c12:	8f 93       	push	r24
    6c14:	86 e9       	ldi	r24, 0x96	; 150
    6c16:	97 e0       	ldi	r25, 0x07	; 7
    6c18:	9f 93       	push	r25
    6c1a:	8f 93       	push	r24
    6c1c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		
		if(PIN_SOURCE_PUMP_2 == 0 && !comp->def)
    6c20:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6c24:	0f 90       	pop	r0
    6c26:	0f 90       	pop	r0
    6c28:	0f 90       	pop	r0
    6c2a:	0f 90       	pop	r0
    6c2c:	82 fd       	sbrc	r24, 2
    6c2e:	1f c0       	rjmp	.+62     	; 0x6c6e <StarSoursePump+0x176>
    6c30:	f5 01       	movw	r30, r10
    6c32:	81 85       	ldd	r24, Z+9	; 0x09
    6c34:	81 11       	cpse	r24, r1
    6c36:	1b c0       	rjmp	.+54     	; 0x6c6e <StarSoursePump+0x176>
		{
			START_SOURCE_PUMP_2;						
    6c38:	e2 e0       	ldi	r30, 0x02	; 2
    6c3a:	f1 e0       	ldi	r31, 0x01	; 1
    6c3c:	80 81       	ld	r24, Z
    6c3e:	84 60       	ori	r24, 0x04	; 4
    6c40:	80 83       	st	Z, r24
			comp->srcPOn=1;
    6c42:	81 e0       	ldi	r24, 0x01	; 1
    6c44:	f5 01       	movw	r30, r10
    6c46:	87 87       	std	Z+15, r24	; 0x0f
			timeStartSrcP_2=time(&current_time);
    6c48:	83 ef       	ldi	r24, 0xF3	; 243
    6c4a:	98 e0       	ldi	r25, 0x08	; 8
    6c4c:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6c50:	60 93 8b 0a 	sts	0x0A8B, r22	; 0x800a8b <timeStartSrcP_2>
    6c54:	70 93 8c 0a 	sts	0x0A8C, r23	; 0x800a8c <timeStartSrcP_2+0x1>
    6c58:	80 93 8d 0a 	sts	0x0A8D, r24	; 0x800a8d <timeStartSrcP_2+0x2>
    6c5c:	90 93 8e 0a 	sts	0x0A8E, r25	; 0x800a8e <timeStartSrcP_2+0x3>
			EEpromData.number_turnon_source_2+=1;
    6c60:	ec e4       	ldi	r30, 0x4C	; 76
    6c62:	f9 e0       	ldi	r31, 0x09	; 9
    6c64:	80 81       	ld	r24, Z
    6c66:	91 81       	ldd	r25, Z+1	; 0x01
    6c68:	01 96       	adiw	r24, 0x01	; 1
    6c6a:	91 83       	std	Z+1, r25	; 0x01
    6c6c:	80 83       	st	Z, r24
						
		}
		xTimerChangePeriod( xStartRevValve_2,period, 100 );
    6c6e:	0f 2e       	mov	r0, r31
    6c70:	f4 e6       	ldi	r31, 0x64	; 100
    6c72:	cf 2e       	mov	r12, r31
    6c74:	d1 2c       	mov	r13, r1
    6c76:	e1 2c       	mov	r14, r1
    6c78:	f1 2c       	mov	r15, r1
    6c7a:	f0 2d       	mov	r31, r0
    6c7c:	00 e0       	ldi	r16, 0x00	; 0
    6c7e:	10 e0       	ldi	r17, 0x00	; 0
    6c80:	a3 01       	movw	r20, r6
    6c82:	92 01       	movw	r18, r4
    6c84:	64 e0       	ldi	r22, 0x04	; 4
    6c86:	80 91 58 0a 	lds	r24, 0x0A58	; 0x800a58 <xStartRevValve_2>
    6c8a:	90 91 59 0a 	lds	r25, 0x0A59	; 0x800a59 <xStartRevValve_2+0x1>
    6c8e:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
}
    6c92:	df 91       	pop	r29
    6c94:	cf 91       	pop	r28
    6c96:	1f 91       	pop	r17
    6c98:	0f 91       	pop	r16
    6c9a:	ff 90       	pop	r15
    6c9c:	ef 90       	pop	r14
    6c9e:	df 90       	pop	r13
    6ca0:	cf 90       	pop	r12
    6ca2:	bf 90       	pop	r11
    6ca4:	af 90       	pop	r10
    6ca6:	7f 90       	pop	r7
    6ca8:	6f 90       	pop	r6
    6caa:	5f 90       	pop	r5
    6cac:	4f 90       	pop	r4
    6cae:	08 95       	ret

00006cb0 <selmode>:
   
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t selmode(xEEdata* eeData)
{
    6cb0:	fc 01       	movw	r30, r24

	if(eeData->heatWater && !eeData->heat && !eeData->cool)
    6cb2:	85 a1       	ldd	r24, Z+37	; 0x25
    6cb4:	88 23       	and	r24, r24
    6cb6:	39 f0       	breq	.+14     	; 0x6cc6 <selmode+0x16>
    6cb8:	86 a1       	ldd	r24, Z+38	; 0x26
    6cba:	81 11       	cpse	r24, r1
    6cbc:	1a c0       	rjmp	.+52     	; 0x6cf2 <selmode+0x42>
    6cbe:	97 a1       	ldd	r25, Z+39	; 0x27
    6cc0:	91 11       	cpse	r25, r1
    6cc2:	1c c0       	rjmp	.+56     	; 0x6cfc <selmode+0x4c>
    6cc4:	0d c0       	rjmp	.+26     	; 0x6ce0 <selmode+0x30>
	{
		return DHW;
		
	}
	if(!eeData->heatWater && eeData->heat && !eeData->cool)
    6cc6:	96 a1       	ldd	r25, Z+38	; 0x26
    6cc8:	99 23       	and	r25, r25
    6cca:	71 f0       	breq	.+28     	; 0x6ce8 <selmode+0x38>
    6ccc:	97 a1       	ldd	r25, Z+39	; 0x27
    6cce:	91 11       	cpse	r25, r1
    6cd0:	17 c0       	rjmp	.+46     	; 0x6d00 <selmode+0x50>
	{
		return HEAT;
    6cd2:	82 e0       	ldi	r24, 0x02	; 2
    6cd4:	08 95       	ret
	}
	if(eeData->heatWater && eeData->heat && !eeData->cool)
	{
		return HEAT_DHW;
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
    6cd6:	87 a1       	ldd	r24, Z+39	; 0x27
    6cd8:	88 23       	and	r24, r24
    6cda:	91 f0       	breq	.+36     	; 0x6d00 <selmode+0x50>
	{
		return COOL_DHW;
    6cdc:	85 e0       	ldi	r24, 0x05	; 5
    6cde:	08 95       	ret
uint8_t selmode(xEEdata* eeData)
{

	if(eeData->heatWater && !eeData->heat && !eeData->cool)
	{
		return DHW;
    6ce0:	81 e0       	ldi	r24, 0x01	; 1
    6ce2:	08 95       	ret
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
	{
		return COOL_DHW;
	}
	else return OFF;
    6ce4:	80 e0       	ldi	r24, 0x00	; 0
    6ce6:	08 95       	ret
	}
	if(!eeData->heatWater && eeData->heat && !eeData->cool)
	{
		return HEAT;
	}
	if(!eeData->heatWater && !eeData->heat && eeData->cool)
    6ce8:	87 a1       	ldd	r24, Z+39	; 0x27
    6cea:	88 23       	and	r24, r24
    6cec:	49 f0       	breq	.+18     	; 0x6d00 <selmode+0x50>
	{
		return COOL;
    6cee:	83 e0       	ldi	r24, 0x03	; 3
    6cf0:	08 95       	ret
	}
	if(eeData->heatWater && eeData->heat && !eeData->cool)
    6cf2:	87 a1       	ldd	r24, Z+39	; 0x27
    6cf4:	81 11       	cpse	r24, r1
    6cf6:	f6 cf       	rjmp	.-20     	; 0x6ce4 <selmode+0x34>
	{
		return HEAT_DHW;
    6cf8:	84 e0       	ldi	r24, 0x04	; 4
    6cfa:	08 95       	ret
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
    6cfc:	88 23       	and	r24, r24
    6cfe:	59 f3       	breq	.-42     	; 0x6cd6 <selmode+0x26>
	{
		return COOL_DHW;
	}
	else return OFF;

}
    6d00:	08 95       	ret

00006d02 <stop_timers>:
			}
		}break;
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void stop_timers( xCompressor *comp){
    6d02:	cf 92       	push	r12
    6d04:	df 92       	push	r13
    6d06:	ef 92       	push	r14
    6d08:	ff 92       	push	r15
    6d0a:	0f 93       	push	r16
    6d0c:	1f 93       	push	r17
	if(comp->Index==1)
    6d0e:	82 59       	subi	r24, 0x92	; 146
    6d10:	9f 4f       	sbci	r25, 0xFF	; 255
    6d12:	fc 01       	movw	r30, r24
    6d14:	80 81       	ld	r24, Z
    6d16:	91 81       	ldd	r25, Z+1	; 0x01
    6d18:	81 30       	cpi	r24, 0x01	; 1
    6d1a:	91 05       	cpc	r25, r1
    6d1c:	09 f0       	breq	.+2      	; 0x6d20 <stop_timers+0x1e>
    6d1e:	3a c1       	rjmp	.+628    	; 0x6f94 <stop_timers+0x292>
	{
		if( xTimerIsTimerActive( xStartCompressor_1 ) != pdFALSE )      xTimerStop(xStartCompressor_1,1);
    6d20:	80 91 6e 0a 	lds	r24, 0x0A6E	; 0x800a6e <xStartCompressor_1>
    6d24:	90 91 6f 0a 	lds	r25, 0x0A6F	; 0x800a6f <xStartCompressor_1+0x1>
    6d28:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6d2c:	88 23       	and	r24, r24
    6d2e:	81 f0       	breq	.+32     	; 0x6d50 <stop_timers+0x4e>
    6d30:	c1 2c       	mov	r12, r1
    6d32:	d1 2c       	mov	r13, r1
    6d34:	76 01       	movw	r14, r12
    6d36:	c3 94       	inc	r12
    6d38:	00 e0       	ldi	r16, 0x00	; 0
    6d3a:	10 e0       	ldi	r17, 0x00	; 0
    6d3c:	20 e0       	ldi	r18, 0x00	; 0
    6d3e:	30 e0       	ldi	r19, 0x00	; 0
    6d40:	a9 01       	movw	r20, r18
    6d42:	63 e0       	ldi	r22, 0x03	; 3
    6d44:	80 91 6e 0a 	lds	r24, 0x0A6E	; 0x800a6e <xStartCompressor_1>
    6d48:	90 91 6f 0a 	lds	r25, 0x0A6F	; 0x800a6f <xStartCompressor_1+0x1>
    6d4c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartHeatPump_1 ) != pdFALSE )        xTimerStop(xStartHeatPump_1,1);
    6d50:	80 91 6c 0a 	lds	r24, 0x0A6C	; 0x800a6c <xStartHeatPump_1>
    6d54:	90 91 6d 0a 	lds	r25, 0x0A6D	; 0x800a6d <xStartHeatPump_1+0x1>
    6d58:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6d5c:	88 23       	and	r24, r24
    6d5e:	81 f0       	breq	.+32     	; 0x6d80 <stop_timers+0x7e>
    6d60:	c1 2c       	mov	r12, r1
    6d62:	d1 2c       	mov	r13, r1
    6d64:	76 01       	movw	r14, r12
    6d66:	c3 94       	inc	r12
    6d68:	00 e0       	ldi	r16, 0x00	; 0
    6d6a:	10 e0       	ldi	r17, 0x00	; 0
    6d6c:	20 e0       	ldi	r18, 0x00	; 0
    6d6e:	30 e0       	ldi	r19, 0x00	; 0
    6d70:	a9 01       	movw	r20, r18
    6d72:	63 e0       	ldi	r22, 0x03	; 3
    6d74:	80 91 6c 0a 	lds	r24, 0x0A6C	; 0x800a6c <xStartHeatPump_1>
    6d78:	90 91 6d 0a 	lds	r25, 0x0A6D	; 0x800a6d <xStartHeatPump_1+0x1>
    6d7c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartThreeWay ) != pdFALSE )			xTimerStop(xStartThreeWay,1);
    6d80:	80 91 cc 09 	lds	r24, 0x09CC	; 0x8009cc <xStartThreeWay>
    6d84:	90 91 cd 09 	lds	r25, 0x09CD	; 0x8009cd <xStartThreeWay+0x1>
    6d88:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6d8c:	88 23       	and	r24, r24
    6d8e:	81 f0       	breq	.+32     	; 0x6db0 <stop_timers+0xae>
    6d90:	c1 2c       	mov	r12, r1
    6d92:	d1 2c       	mov	r13, r1
    6d94:	76 01       	movw	r14, r12
    6d96:	c3 94       	inc	r12
    6d98:	00 e0       	ldi	r16, 0x00	; 0
    6d9a:	10 e0       	ldi	r17, 0x00	; 0
    6d9c:	20 e0       	ldi	r18, 0x00	; 0
    6d9e:	30 e0       	ldi	r19, 0x00	; 0
    6da0:	a9 01       	movw	r20, r18
    6da2:	63 e0       	ldi	r22, 0x03	; 3
    6da4:	80 91 cc 09 	lds	r24, 0x09CC	; 0x8009cc <xStartThreeWay>
    6da8:	90 91 cd 09 	lds	r25, 0x09CD	; 0x8009cd <xStartThreeWay+0x1>
    6dac:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartRevValve_1 ) != pdFALSE )		xTimerStop(xStartRevValve_1,1);
    6db0:	80 91 97 0a 	lds	r24, 0x0A97	; 0x800a97 <xStartRevValve_1>
    6db4:	90 91 98 0a 	lds	r25, 0x0A98	; 0x800a98 <xStartRevValve_1+0x1>
    6db8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6dbc:	88 23       	and	r24, r24
    6dbe:	81 f0       	breq	.+32     	; 0x6de0 <stop_timers+0xde>
    6dc0:	c1 2c       	mov	r12, r1
    6dc2:	d1 2c       	mov	r13, r1
    6dc4:	76 01       	movw	r14, r12
    6dc6:	c3 94       	inc	r12
    6dc8:	00 e0       	ldi	r16, 0x00	; 0
    6dca:	10 e0       	ldi	r17, 0x00	; 0
    6dcc:	20 e0       	ldi	r18, 0x00	; 0
    6dce:	30 e0       	ldi	r19, 0x00	; 0
    6dd0:	a9 01       	movw	r20, r18
    6dd2:	63 e0       	ldi	r22, 0x03	; 3
    6dd4:	80 91 97 0a 	lds	r24, 0x0A97	; 0x800a97 <xStartRevValve_1>
    6dd8:	90 91 98 0a 	lds	r25, 0x0A98	; 0x800a98 <xStartRevValve_1+0x1>
    6ddc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevOne_1_time ) != pdFALSE )    xTimerStop(xSwitchRevOne_1_time,1);
    6de0:	80 91 eb 08 	lds	r24, 0x08EB	; 0x8008eb <xSwitchRevOne_1_time>
    6de4:	90 91 ec 08 	lds	r25, 0x08EC	; 0x8008ec <xSwitchRevOne_1_time+0x1>
    6de8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6dec:	88 23       	and	r24, r24
    6dee:	81 f0       	breq	.+32     	; 0x6e10 <stop_timers+0x10e>
    6df0:	c1 2c       	mov	r12, r1
    6df2:	d1 2c       	mov	r13, r1
    6df4:	76 01       	movw	r14, r12
    6df6:	c3 94       	inc	r12
    6df8:	00 e0       	ldi	r16, 0x00	; 0
    6dfa:	10 e0       	ldi	r17, 0x00	; 0
    6dfc:	20 e0       	ldi	r18, 0x00	; 0
    6dfe:	30 e0       	ldi	r19, 0x00	; 0
    6e00:	a9 01       	movw	r20, r18
    6e02:	63 e0       	ldi	r22, 0x03	; 3
    6e04:	80 91 eb 08 	lds	r24, 0x08EB	; 0x8008eb <xSwitchRevOne_1_time>
    6e08:	90 91 ec 08 	lds	r25, 0x08EC	; 0x8008ec <xSwitchRevOne_1_time+0x1>
    6e0c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevTwo_1_time ) != pdFALSE )	xTimerStop(xSwitchRevTwo_1_time,1);
    6e10:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <xSwitchRevTwo_1_time>
    6e14:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <xSwitchRevTwo_1_time+0x1>
    6e18:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6e1c:	88 23       	and	r24, r24
    6e1e:	81 f0       	breq	.+32     	; 0x6e40 <stop_timers+0x13e>
    6e20:	c1 2c       	mov	r12, r1
    6e22:	d1 2c       	mov	r13, r1
    6e24:	76 01       	movw	r14, r12
    6e26:	c3 94       	inc	r12
    6e28:	00 e0       	ldi	r16, 0x00	; 0
    6e2a:	10 e0       	ldi	r17, 0x00	; 0
    6e2c:	20 e0       	ldi	r18, 0x00	; 0
    6e2e:	30 e0       	ldi	r19, 0x00	; 0
    6e30:	a9 01       	movw	r20, r18
    6e32:	63 e0       	ldi	r22, 0x03	; 3
    6e34:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <xSwitchRevTwo_1_time>
    6e38:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <xSwitchRevTwo_1_time+0x1>
    6e3c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopHeatPump_1 ) != pdFALSE )			xTimerStop(xStopHeatPump_1,1);
    6e40:	80 91 e5 08 	lds	r24, 0x08E5	; 0x8008e5 <xStopHeatPump_1>
    6e44:	90 91 e6 08 	lds	r25, 0x08E6	; 0x8008e6 <xStopHeatPump_1+0x1>
    6e48:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6e4c:	88 23       	and	r24, r24
    6e4e:	81 f0       	breq	.+32     	; 0x6e70 <stop_timers+0x16e>
    6e50:	c1 2c       	mov	r12, r1
    6e52:	d1 2c       	mov	r13, r1
    6e54:	76 01       	movw	r14, r12
    6e56:	c3 94       	inc	r12
    6e58:	00 e0       	ldi	r16, 0x00	; 0
    6e5a:	10 e0       	ldi	r17, 0x00	; 0
    6e5c:	20 e0       	ldi	r18, 0x00	; 0
    6e5e:	30 e0       	ldi	r19, 0x00	; 0
    6e60:	a9 01       	movw	r20, r18
    6e62:	63 e0       	ldi	r22, 0x03	; 3
    6e64:	80 91 e5 08 	lds	r24, 0x08E5	; 0x8008e5 <xStopHeatPump_1>
    6e68:	90 91 e6 08 	lds	r25, 0x08E6	; 0x8008e6 <xStopHeatPump_1+0x1>
    6e6c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopThreeWay ) != pdFALSE )			xTimerStop(xStopThreeWay,1);
    6e70:	80 91 ca 09 	lds	r24, 0x09CA	; 0x8009ca <xStopThreeWay>
    6e74:	90 91 cb 09 	lds	r25, 0x09CB	; 0x8009cb <xStopThreeWay+0x1>
    6e78:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6e7c:	88 23       	and	r24, r24
    6e7e:	81 f0       	breq	.+32     	; 0x6ea0 <stop_timers+0x19e>
    6e80:	c1 2c       	mov	r12, r1
    6e82:	d1 2c       	mov	r13, r1
    6e84:	76 01       	movw	r14, r12
    6e86:	c3 94       	inc	r12
    6e88:	00 e0       	ldi	r16, 0x00	; 0
    6e8a:	10 e0       	ldi	r17, 0x00	; 0
    6e8c:	20 e0       	ldi	r18, 0x00	; 0
    6e8e:	30 e0       	ldi	r19, 0x00	; 0
    6e90:	a9 01       	movw	r20, r18
    6e92:	63 e0       	ldi	r22, 0x03	; 3
    6e94:	80 91 ca 09 	lds	r24, 0x09CA	; 0x8009ca <xStopThreeWay>
    6e98:	90 91 cb 09 	lds	r25, 0x09CB	; 0x8009cb <xStopThreeWay+0x1>
    6e9c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopRevValve_1 ) != pdFALSE )			xTimerStop(xStopRevValve_1,1);
    6ea0:	80 91 60 0a 	lds	r24, 0x0A60	; 0x800a60 <xStopRevValve_1>
    6ea4:	90 91 61 0a 	lds	r25, 0x0A61	; 0x800a61 <xStopRevValve_1+0x1>
    6ea8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6eac:	88 23       	and	r24, r24
    6eae:	81 f0       	breq	.+32     	; 0x6ed0 <stop_timers+0x1ce>
    6eb0:	c1 2c       	mov	r12, r1
    6eb2:	d1 2c       	mov	r13, r1
    6eb4:	76 01       	movw	r14, r12
    6eb6:	c3 94       	inc	r12
    6eb8:	00 e0       	ldi	r16, 0x00	; 0
    6eba:	10 e0       	ldi	r17, 0x00	; 0
    6ebc:	20 e0       	ldi	r18, 0x00	; 0
    6ebe:	30 e0       	ldi	r19, 0x00	; 0
    6ec0:	a9 01       	movw	r20, r18
    6ec2:	63 e0       	ldi	r22, 0x03	; 3
    6ec4:	80 91 60 0a 	lds	r24, 0x0A60	; 0x800a60 <xStopRevValve_1>
    6ec8:	90 91 61 0a 	lds	r25, 0x0A61	; 0x800a61 <xStopRevValve_1+0x1>
    6ecc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopSource_1 ) != pdFALSE )			xTimerStop(xStopSource_1,1);
    6ed0:	80 91 ef 08 	lds	r24, 0x08EF	; 0x8008ef <xStopSource_1>
    6ed4:	90 91 f0 08 	lds	r25, 0x08F0	; 0x8008f0 <xStopSource_1+0x1>
    6ed8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6edc:	88 23       	and	r24, r24
    6ede:	81 f0       	breq	.+32     	; 0x6f00 <stop_timers+0x1fe>
    6ee0:	c1 2c       	mov	r12, r1
    6ee2:	d1 2c       	mov	r13, r1
    6ee4:	76 01       	movw	r14, r12
    6ee6:	c3 94       	inc	r12
    6ee8:	00 e0       	ldi	r16, 0x00	; 0
    6eea:	10 e0       	ldi	r17, 0x00	; 0
    6eec:	20 e0       	ldi	r18, 0x00	; 0
    6eee:	30 e0       	ldi	r19, 0x00	; 0
    6ef0:	a9 01       	movw	r20, r18
    6ef2:	63 e0       	ldi	r22, 0x03	; 3
    6ef4:	80 91 ef 08 	lds	r24, 0x08EF	; 0x8008ef <xStopSource_1>
    6ef8:	90 91 f0 08 	lds	r25, 0x08F0	; 0x8008f0 <xStopSource_1+0x1>
    6efc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckErrors_1 ) != pdFALSE )    xTimerStop(xTStartCheckErrors_1,1);
    6f00:	80 91 8f 0a 	lds	r24, 0x0A8F	; 0x800a8f <xTStartCheckErrors_1>
    6f04:	90 91 90 0a 	lds	r25, 0x0A90	; 0x800a90 <xTStartCheckErrors_1+0x1>
    6f08:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6f0c:	88 23       	and	r24, r24
    6f0e:	81 f0       	breq	.+32     	; 0x6f30 <stop_timers+0x22e>
    6f10:	c1 2c       	mov	r12, r1
    6f12:	d1 2c       	mov	r13, r1
    6f14:	76 01       	movw	r14, r12
    6f16:	c3 94       	inc	r12
    6f18:	00 e0       	ldi	r16, 0x00	; 0
    6f1a:	10 e0       	ldi	r17, 0x00	; 0
    6f1c:	20 e0       	ldi	r18, 0x00	; 0
    6f1e:	30 e0       	ldi	r19, 0x00	; 0
    6f20:	a9 01       	movw	r20, r18
    6f22:	63 e0       	ldi	r22, 0x03	; 3
    6f24:	80 91 8f 0a 	lds	r24, 0x0A8F	; 0x800a8f <xTStartCheckErrors_1>
    6f28:	90 91 90 0a 	lds	r25, 0x0A90	; 0x800a90 <xTStartCheckErrors_1+0x1>
    6f2c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckTrv_1 ) != pdFALSE )       xTimerStop(xTStartCheckTrv_1,1);
    6f30:	80 91 f1 08 	lds	r24, 0x08F1	; 0x8008f1 <xTStartCheckTrv_1>
    6f34:	90 91 f2 08 	lds	r25, 0x08F2	; 0x8008f2 <xTStartCheckTrv_1+0x1>
    6f38:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6f3c:	88 23       	and	r24, r24
    6f3e:	81 f0       	breq	.+32     	; 0x6f60 <stop_timers+0x25e>
    6f40:	c1 2c       	mov	r12, r1
    6f42:	d1 2c       	mov	r13, r1
    6f44:	76 01       	movw	r14, r12
    6f46:	c3 94       	inc	r12
    6f48:	00 e0       	ldi	r16, 0x00	; 0
    6f4a:	10 e0       	ldi	r17, 0x00	; 0
    6f4c:	20 e0       	ldi	r18, 0x00	; 0
    6f4e:	30 e0       	ldi	r19, 0x00	; 0
    6f50:	a9 01       	movw	r20, r18
    6f52:	63 e0       	ldi	r22, 0x03	; 3
    6f54:	80 91 f1 08 	lds	r24, 0x08F1	; 0x8008f1 <xTStartCheckTrv_1>
    6f58:	90 91 f2 08 	lds	r25, 0x08F2	; 0x8008f2 <xTStartCheckTrv_1+0x1>
    6f5c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xComutateTrv_1 ) != pdFALSE )          xTimerStop(xComutateTrv_1,1);
    6f60:	80 91 dd 08 	lds	r24, 0x08DD	; 0x8008dd <xComutateTrv_1>
    6f64:	90 91 de 08 	lds	r25, 0x08DE	; 0x8008de <xComutateTrv_1+0x1>
    6f68:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6f6c:	88 23       	and	r24, r24
    6f6e:	09 f4       	brne	.+2      	; 0x6f72 <stop_timers+0x270>
    6f70:	1c c1       	rjmp	.+568    	; 0x71aa <stop_timers+0x4a8>
    6f72:	c1 2c       	mov	r12, r1
    6f74:	d1 2c       	mov	r13, r1
    6f76:	76 01       	movw	r14, r12
    6f78:	c3 94       	inc	r12
    6f7a:	00 e0       	ldi	r16, 0x00	; 0
    6f7c:	10 e0       	ldi	r17, 0x00	; 0
    6f7e:	20 e0       	ldi	r18, 0x00	; 0
    6f80:	30 e0       	ldi	r19, 0x00	; 0
    6f82:	a9 01       	movw	r20, r18
    6f84:	63 e0       	ldi	r22, 0x03	; 3
    6f86:	80 91 dd 08 	lds	r24, 0x08DD	; 0x8008dd <xComutateTrv_1>
    6f8a:	90 91 de 08 	lds	r25, 0x08DE	; 0x8008de <xComutateTrv_1+0x1>
    6f8e:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    6f92:	0b c1       	rjmp	.+534    	; 0x71aa <stop_timers+0x4a8>
	}
	else if (comp->Index==2)
    6f94:	02 97       	sbiw	r24, 0x02	; 2
    6f96:	09 f0       	breq	.+2      	; 0x6f9a <stop_timers+0x298>
    6f98:	08 c1       	rjmp	.+528    	; 0x71aa <stop_timers+0x4a8>
	{
		if( xTimerIsTimerActive( xStartCompressor_2 ) != pdFALSE )      xTimerStop(xStartCompressor_2,1);
    6f9a:	80 91 80 0a 	lds	r24, 0x0A80	; 0x800a80 <xStartCompressor_2>
    6f9e:	90 91 81 0a 	lds	r25, 0x0A81	; 0x800a81 <xStartCompressor_2+0x1>
    6fa2:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6fa6:	88 23       	and	r24, r24
    6fa8:	81 f0       	breq	.+32     	; 0x6fca <stop_timers+0x2c8>
    6faa:	c1 2c       	mov	r12, r1
    6fac:	d1 2c       	mov	r13, r1
    6fae:	76 01       	movw	r14, r12
    6fb0:	c3 94       	inc	r12
    6fb2:	00 e0       	ldi	r16, 0x00	; 0
    6fb4:	10 e0       	ldi	r17, 0x00	; 0
    6fb6:	20 e0       	ldi	r18, 0x00	; 0
    6fb8:	30 e0       	ldi	r19, 0x00	; 0
    6fba:	a9 01       	movw	r20, r18
    6fbc:	63 e0       	ldi	r22, 0x03	; 3
    6fbe:	80 91 80 0a 	lds	r24, 0x0A80	; 0x800a80 <xStartCompressor_2>
    6fc2:	90 91 81 0a 	lds	r25, 0x0A81	; 0x800a81 <xStartCompressor_2+0x1>
    6fc6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartHeatPump_2 ) != pdFALSE )        xTimerStop(xStartHeatPump_2,1);
    6fca:	80 91 ce 09 	lds	r24, 0x09CE	; 0x8009ce <xStartHeatPump_2>
    6fce:	90 91 cf 09 	lds	r25, 0x09CF	; 0x8009cf <xStartHeatPump_2+0x1>
    6fd2:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6fd6:	88 23       	and	r24, r24
    6fd8:	81 f0       	breq	.+32     	; 0x6ffa <stop_timers+0x2f8>
    6fda:	c1 2c       	mov	r12, r1
    6fdc:	d1 2c       	mov	r13, r1
    6fde:	76 01       	movw	r14, r12
    6fe0:	c3 94       	inc	r12
    6fe2:	00 e0       	ldi	r16, 0x00	; 0
    6fe4:	10 e0       	ldi	r17, 0x00	; 0
    6fe6:	20 e0       	ldi	r18, 0x00	; 0
    6fe8:	30 e0       	ldi	r19, 0x00	; 0
    6fea:	a9 01       	movw	r20, r18
    6fec:	63 e0       	ldi	r22, 0x03	; 3
    6fee:	80 91 ce 09 	lds	r24, 0x09CE	; 0x8009ce <xStartHeatPump_2>
    6ff2:	90 91 cf 09 	lds	r25, 0x09CF	; 0x8009cf <xStartHeatPump_2+0x1>
    6ff6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartRevValve_2 ) != pdFALSE )		xTimerStop(xStartRevValve_2,1);
    6ffa:	80 91 58 0a 	lds	r24, 0x0A58	; 0x800a58 <xStartRevValve_2>
    6ffe:	90 91 59 0a 	lds	r25, 0x0A59	; 0x800a59 <xStartRevValve_2+0x1>
    7002:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7006:	88 23       	and	r24, r24
    7008:	81 f0       	breq	.+32     	; 0x702a <stop_timers+0x328>
    700a:	c1 2c       	mov	r12, r1
    700c:	d1 2c       	mov	r13, r1
    700e:	76 01       	movw	r14, r12
    7010:	c3 94       	inc	r12
    7012:	00 e0       	ldi	r16, 0x00	; 0
    7014:	10 e0       	ldi	r17, 0x00	; 0
    7016:	20 e0       	ldi	r18, 0x00	; 0
    7018:	30 e0       	ldi	r19, 0x00	; 0
    701a:	a9 01       	movw	r20, r18
    701c:	63 e0       	ldi	r22, 0x03	; 3
    701e:	80 91 58 0a 	lds	r24, 0x0A58	; 0x800a58 <xStartRevValve_2>
    7022:	90 91 59 0a 	lds	r25, 0x0A59	; 0x800a59 <xStartRevValve_2+0x1>
    7026:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevOne_2_time ) != pdFALSE )    xTimerStop(xSwitchRevOne_2_time,1);
    702a:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <xSwitchRevOne_2_time>
    702e:	90 91 a1 0a 	lds	r25, 0x0AA1	; 0x800aa1 <xSwitchRevOne_2_time+0x1>
    7032:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7036:	88 23       	and	r24, r24
    7038:	81 f0       	breq	.+32     	; 0x705a <stop_timers+0x358>
    703a:	c1 2c       	mov	r12, r1
    703c:	d1 2c       	mov	r13, r1
    703e:	76 01       	movw	r14, r12
    7040:	c3 94       	inc	r12
    7042:	00 e0       	ldi	r16, 0x00	; 0
    7044:	10 e0       	ldi	r17, 0x00	; 0
    7046:	20 e0       	ldi	r18, 0x00	; 0
    7048:	30 e0       	ldi	r19, 0x00	; 0
    704a:	a9 01       	movw	r20, r18
    704c:	63 e0       	ldi	r22, 0x03	; 3
    704e:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <xSwitchRevOne_2_time>
    7052:	90 91 a1 0a 	lds	r25, 0x0AA1	; 0x800aa1 <xSwitchRevOne_2_time+0x1>
    7056:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevTwo_2_time ) != pdFALSE )	xTimerStop(xSwitchRevTwo_1_time,1);
    705a:	80 91 85 0a 	lds	r24, 0x0A85	; 0x800a85 <xSwitchRevTwo_2_time>
    705e:	90 91 86 0a 	lds	r25, 0x0A86	; 0x800a86 <xSwitchRevTwo_2_time+0x1>
    7062:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7066:	88 23       	and	r24, r24
    7068:	81 f0       	breq	.+32     	; 0x708a <stop_timers+0x388>
    706a:	c1 2c       	mov	r12, r1
    706c:	d1 2c       	mov	r13, r1
    706e:	76 01       	movw	r14, r12
    7070:	c3 94       	inc	r12
    7072:	00 e0       	ldi	r16, 0x00	; 0
    7074:	10 e0       	ldi	r17, 0x00	; 0
    7076:	20 e0       	ldi	r18, 0x00	; 0
    7078:	30 e0       	ldi	r19, 0x00	; 0
    707a:	a9 01       	movw	r20, r18
    707c:	63 e0       	ldi	r22, 0x03	; 3
    707e:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <xSwitchRevTwo_1_time>
    7082:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <xSwitchRevTwo_1_time+0x1>
    7086:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopHeatPump_2 ) != pdFALSE )			xTimerStop(xStopHeatPump_2,1);
    708a:	80 91 5e 0a 	lds	r24, 0x0A5E	; 0x800a5e <xStopHeatPump_2>
    708e:	90 91 5f 0a 	lds	r25, 0x0A5F	; 0x800a5f <xStopHeatPump_2+0x1>
    7092:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7096:	88 23       	and	r24, r24
    7098:	81 f0       	breq	.+32     	; 0x70ba <stop_timers+0x3b8>
    709a:	c1 2c       	mov	r12, r1
    709c:	d1 2c       	mov	r13, r1
    709e:	76 01       	movw	r14, r12
    70a0:	c3 94       	inc	r12
    70a2:	00 e0       	ldi	r16, 0x00	; 0
    70a4:	10 e0       	ldi	r17, 0x00	; 0
    70a6:	20 e0       	ldi	r18, 0x00	; 0
    70a8:	30 e0       	ldi	r19, 0x00	; 0
    70aa:	a9 01       	movw	r20, r18
    70ac:	63 e0       	ldi	r22, 0x03	; 3
    70ae:	80 91 5e 0a 	lds	r24, 0x0A5E	; 0x800a5e <xStopHeatPump_2>
    70b2:	90 91 5f 0a 	lds	r25, 0x0A5F	; 0x800a5f <xStopHeatPump_2+0x1>
    70b6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopRevValve_2 ) != pdFALSE )			xTimerStop(xStopRevValve_2,1);
    70ba:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <xStopRevValve_2>
    70be:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <xStopRevValve_2+0x1>
    70c2:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    70c6:	88 23       	and	r24, r24
    70c8:	81 f0       	breq	.+32     	; 0x70ea <stop_timers+0x3e8>
    70ca:	c1 2c       	mov	r12, r1
    70cc:	d1 2c       	mov	r13, r1
    70ce:	76 01       	movw	r14, r12
    70d0:	c3 94       	inc	r12
    70d2:	00 e0       	ldi	r16, 0x00	; 0
    70d4:	10 e0       	ldi	r17, 0x00	; 0
    70d6:	20 e0       	ldi	r18, 0x00	; 0
    70d8:	30 e0       	ldi	r19, 0x00	; 0
    70da:	a9 01       	movw	r20, r18
    70dc:	63 e0       	ldi	r22, 0x03	; 3
    70de:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <xStopRevValve_2>
    70e2:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <xStopRevValve_2+0x1>
    70e6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopSource_2 ) != pdFALSE )			xTimerStop(xStopSource_2,1);
    70ea:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <xStopSource_2>
    70ee:	90 91 4f 0a 	lds	r25, 0x0A4F	; 0x800a4f <xStopSource_2+0x1>
    70f2:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    70f6:	88 23       	and	r24, r24
    70f8:	81 f0       	breq	.+32     	; 0x711a <stop_timers+0x418>
    70fa:	c1 2c       	mov	r12, r1
    70fc:	d1 2c       	mov	r13, r1
    70fe:	76 01       	movw	r14, r12
    7100:	c3 94       	inc	r12
    7102:	00 e0       	ldi	r16, 0x00	; 0
    7104:	10 e0       	ldi	r17, 0x00	; 0
    7106:	20 e0       	ldi	r18, 0x00	; 0
    7108:	30 e0       	ldi	r19, 0x00	; 0
    710a:	a9 01       	movw	r20, r18
    710c:	63 e0       	ldi	r22, 0x03	; 3
    710e:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <xStopSource_2>
    7112:	90 91 4f 0a 	lds	r25, 0x0A4F	; 0x800a4f <xStopSource_2+0x1>
    7116:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckErrors_2 ) != pdFALSE )    xTimerStop(xTStartCheckErrors_2,1);
    711a:	80 91 df 08 	lds	r24, 0x08DF	; 0x8008df <xTStartCheckErrors_2>
    711e:	90 91 e0 08 	lds	r25, 0x08E0	; 0x8008e0 <xTStartCheckErrors_2+0x1>
    7122:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7126:	88 23       	and	r24, r24
    7128:	81 f0       	breq	.+32     	; 0x714a <stop_timers+0x448>
    712a:	c1 2c       	mov	r12, r1
    712c:	d1 2c       	mov	r13, r1
    712e:	76 01       	movw	r14, r12
    7130:	c3 94       	inc	r12
    7132:	00 e0       	ldi	r16, 0x00	; 0
    7134:	10 e0       	ldi	r17, 0x00	; 0
    7136:	20 e0       	ldi	r18, 0x00	; 0
    7138:	30 e0       	ldi	r19, 0x00	; 0
    713a:	a9 01       	movw	r20, r18
    713c:	63 e0       	ldi	r22, 0x03	; 3
    713e:	80 91 df 08 	lds	r24, 0x08DF	; 0x8008df <xTStartCheckErrors_2>
    7142:	90 91 e0 08 	lds	r25, 0x08E0	; 0x8008e0 <xTStartCheckErrors_2+0x1>
    7146:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckTrv_2 ) != pdFALSE )       xTimerStop(xTStartCheckTrv_2,1);
    714a:	80 91 c8 09 	lds	r24, 0x09C8	; 0x8009c8 <xTStartCheckTrv_2>
    714e:	90 91 c9 09 	lds	r25, 0x09C9	; 0x8009c9 <xTStartCheckTrv_2+0x1>
    7152:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7156:	88 23       	and	r24, r24
    7158:	81 f0       	breq	.+32     	; 0x717a <stop_timers+0x478>
    715a:	c1 2c       	mov	r12, r1
    715c:	d1 2c       	mov	r13, r1
    715e:	76 01       	movw	r14, r12
    7160:	c3 94       	inc	r12
    7162:	00 e0       	ldi	r16, 0x00	; 0
    7164:	10 e0       	ldi	r17, 0x00	; 0
    7166:	20 e0       	ldi	r18, 0x00	; 0
    7168:	30 e0       	ldi	r19, 0x00	; 0
    716a:	a9 01       	movw	r20, r18
    716c:	63 e0       	ldi	r22, 0x03	; 3
    716e:	80 91 c8 09 	lds	r24, 0x09C8	; 0x8009c8 <xTStartCheckTrv_2>
    7172:	90 91 c9 09 	lds	r25, 0x09C9	; 0x8009c9 <xTStartCheckTrv_2+0x1>
    7176:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xComutateTrv_2 ) != pdFALSE )          xTimerStop(xComutateTrv_2,1);
    717a:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <xComutateTrv_2>
    717e:	90 91 d5 09 	lds	r25, 0x09D5	; 0x8009d5 <xComutateTrv_2+0x1>
    7182:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7186:	88 23       	and	r24, r24
    7188:	81 f0       	breq	.+32     	; 0x71aa <stop_timers+0x4a8>
    718a:	c1 2c       	mov	r12, r1
    718c:	d1 2c       	mov	r13, r1
    718e:	76 01       	movw	r14, r12
    7190:	c3 94       	inc	r12
    7192:	00 e0       	ldi	r16, 0x00	; 0
    7194:	10 e0       	ldi	r17, 0x00	; 0
    7196:	20 e0       	ldi	r18, 0x00	; 0
    7198:	30 e0       	ldi	r19, 0x00	; 0
    719a:	a9 01       	movw	r20, r18
    719c:	63 e0       	ldi	r22, 0x03	; 3
    719e:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <xComutateTrv_2>
    71a2:	90 91 d5 09 	lds	r25, 0x09D5	; 0x8009d5 <xComutateTrv_2+0x1>
    71a6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
}
    71aa:	1f 91       	pop	r17
    71ac:	0f 91       	pop	r16
    71ae:	ff 90       	pop	r15
    71b0:	ef 90       	pop	r14
    71b2:	df 90       	pop	r13
    71b4:	cf 90       	pop	r12
    71b6:	08 95       	ret

000071b8 <Comp_Stop>:
	}
	
	
}
//-------------------------------------------------------------------------Stop mod
void Comp_Stop(xCompressor *comp){
    71b8:	cf 92       	push	r12
    71ba:	df 92       	push	r13
    71bc:	ef 92       	push	r14
    71be:	ff 92       	push	r15
    71c0:	0f 93       	push	r16
    71c2:	1f 93       	push	r17
    71c4:	cf 93       	push	r28
    71c6:	df 93       	push	r29
    71c8:	ec 01       	movw	r28, r24
	static time_t time_count_1;
	static time_t time_count_2;
	
	//xSerialxPrintf(&xSerial3Port,"StopCompressor\r\n");
	stop_timers(comp);
    71ca:	9b dd       	rcall	.-1226   	; 0x6d02 <stop_timers>
	comp->Cooling=comp->heatingWater=comp->Heating=false;
    71cc:	1a 82       	std	Y+2, r1	; 0x02
    71ce:	1c 82       	std	Y+4, r1	; 0x04
    71d0:	1b 82       	std	Y+3, r1	; 0x03
    comp->switchToMode=true;
    71d2:	81 e0       	ldi	r24, 0x01	; 1
    71d4:	88 83       	st	Y, r24
	if(comp->Index == 1)
    71d6:	fe 01       	movw	r30, r28
    71d8:	e2 59       	subi	r30, 0x92	; 146
    71da:	ff 4f       	sbci	r31, 0xFF	; 255
    71dc:	80 81       	ld	r24, Z
    71de:	91 81       	ldd	r25, Z+1	; 0x01
    71e0:	81 30       	cpi	r24, 0x01	; 1
    71e2:	91 05       	cpc	r25, r1
    71e4:	09 f0       	breq	.+2      	; 0x71e8 <Comp_Stop+0x30>
    71e6:	6c c0       	rjmp	.+216    	; 0x72c0 <Comp_Stop+0x108>
	{
		if(PIN_COMPRESSOR_1 > 0)
    71e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    71ec:	85 ff       	sbrs	r24, 5
    71ee:	57 c0       	rjmp	.+174    	; 0x729e <Comp_Stop+0xe6>
		{
			STOP_COMPRESSOR_1;
    71f0:	e2 e0       	ldi	r30, 0x02	; 2
    71f2:	f1 e0       	ldi	r31, 0x01	; 1
    71f4:	80 81       	ld	r24, Z
    71f6:	8f 7d       	andi	r24, 0xDF	; 223
    71f8:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopCompressor_1\r\n");
    71fa:	8b e4       	ldi	r24, 0x4B	; 75
    71fc:	95 e0       	ldi	r25, 0x05	; 5
    71fe:	9f 93       	push	r25
    7200:	8f 93       	push	r24
    7202:	86 e9       	ldi	r24, 0x96	; 150
    7204:	97 e0       	ldi	r25, 0x07	; 7
    7206:	9f 93       	push	r25
    7208:	8f 93       	push	r24
    720a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->checkErrors =false;
    720e:	1d 82       	std	Y+5, r1	; 0x05
			
			comp->checkTrv =false;
    7210:	19 82       	std	Y+1, r1	; 0x01
			comp->compOn=0;
    7212:	1b 86       	std	Y+11, r1	; 0x0b
			time_count_1+= difftime(time(&current_time), timeStartComp_1);
    7214:	c0 90 e7 08 	lds	r12, 0x08E7	; 0x8008e7 <timeStartComp_1>
    7218:	d0 90 e8 08 	lds	r13, 0x08E8	; 0x8008e8 <timeStartComp_1+0x1>
    721c:	e0 90 e9 08 	lds	r14, 0x08E9	; 0x8008e9 <timeStartComp_1+0x2>
    7220:	f0 90 ea 08 	lds	r15, 0x08EA	; 0x8008ea <timeStartComp_1+0x3>
    7224:	83 ef       	ldi	r24, 0xF3	; 243
    7226:	98 e0       	ldi	r25, 0x08	; 8
    7228:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    722c:	a7 01       	movw	r20, r14
    722e:	96 01       	movw	r18, r12
    7230:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    7234:	c0 90 31 07 	lds	r12, 0x0731	; 0x800731 <time_count_1.3195>
    7238:	d0 90 32 07 	lds	r13, 0x0732	; 0x800732 <time_count_1.3195+0x1>
    723c:	e0 90 33 07 	lds	r14, 0x0733	; 0x800733 <time_count_1.3195+0x2>
    7240:	f0 90 34 07 	lds	r15, 0x0734	; 0x800734 <time_count_1.3195+0x3>
    7244:	dc 01       	movw	r26, r24
    7246:	cb 01       	movw	r24, r22
    7248:	8c 0d       	add	r24, r12
    724a:	9d 1d       	adc	r25, r13
    724c:	ae 1d       	adc	r26, r14
    724e:	bf 1d       	adc	r27, r15
    7250:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <time_count_1.3195>
    7254:	90 93 32 07 	sts	0x0732, r25	; 0x800732 <time_count_1.3195+0x1>
    7258:	a0 93 33 07 	sts	0x0733, r26	; 0x800733 <time_count_1.3195+0x2>
    725c:	b0 93 34 07 	sts	0x0734, r27	; 0x800734 <time_count_1.3195+0x3>
			
			//xSerialxPrintf(&xSerial3Port,"time_Compressor_=%d\r\n",time_count_1);
			if(time_count_1>ONE_HOUR){EEpromData.time_compressor_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    7260:	0f 90       	pop	r0
    7262:	0f 90       	pop	r0
    7264:	0f 90       	pop	r0
    7266:	0f 90       	pop	r0
    7268:	81 31       	cpi	r24, 0x11	; 17
    726a:	9e 40       	sbci	r25, 0x0E	; 14
    726c:	a1 05       	cpc	r26, r1
    726e:	b1 05       	cpc	r27, r1
    7270:	b0 f0       	brcs	.+44     	; 0x729e <Comp_Stop+0xe6>
    7272:	e8 ef       	ldi	r30, 0xF8	; 248
    7274:	f8 e0       	ldi	r31, 0x08	; 8
    7276:	82 ad       	ldd	r24, Z+58	; 0x3a
    7278:	93 ad       	ldd	r25, Z+59	; 0x3b
    727a:	01 96       	adiw	r24, 0x01	; 1
    727c:	93 af       	std	Z+59, r25	; 0x3b
    727e:	82 af       	std	Z+58, r24	; 0x3a
    7280:	40 e6       	ldi	r20, 0x60	; 96
    7282:	50 e0       	ldi	r21, 0x00	; 0
    7284:	60 e0       	ldi	r22, 0x00	; 0
    7286:	70 e0       	ldi	r23, 0x00	; 0
    7288:	cf 01       	movw	r24, r30
    728a:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <eeprom_update_block>
    728e:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <time_count_1.3195>
    7292:	10 92 32 07 	sts	0x0732, r1	; 0x800732 <time_count_1.3195+0x1>
    7296:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <time_count_1.3195+0x2>
    729a:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <time_count_1.3195+0x3>
			
		}
		xTimerStart(xSwitchRevOne_1_time, 0);
    729e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    72a2:	9b 01       	movw	r18, r22
    72a4:	ac 01       	movw	r20, r24
    72a6:	c1 2c       	mov	r12, r1
    72a8:	d1 2c       	mov	r13, r1
    72aa:	76 01       	movw	r14, r12
    72ac:	00 e0       	ldi	r16, 0x00	; 0
    72ae:	10 e0       	ldi	r17, 0x00	; 0
    72b0:	61 e0       	ldi	r22, 0x01	; 1
    72b2:	80 91 eb 08 	lds	r24, 0x08EB	; 0x8008eb <xSwitchRevOne_1_time>
    72b6:	90 91 ec 08 	lds	r25, 0x08EC	; 0x8008ec <xSwitchRevOne_1_time+0x1>
    72ba:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    72be:	71 c0       	rjmp	.+226    	; 0x73a2 <Comp_Stop+0x1ea>
		
	}
	else if(comp->Index == 2)
    72c0:	02 97       	sbiw	r24, 0x02	; 2
    72c2:	09 f0       	breq	.+2      	; 0x72c6 <Comp_Stop+0x10e>
    72c4:	6e c0       	rjmp	.+220    	; 0x73a2 <Comp_Stop+0x1ea>
	{
		if(PIN_COMPRESSOR_2 > 0)
    72c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    72ca:	86 ff       	sbrs	r24, 6
    72cc:	5a c0       	rjmp	.+180    	; 0x7382 <Comp_Stop+0x1ca>
		{
			
			STOP_COMPRESSOR_2;
    72ce:	e2 e0       	ldi	r30, 0x02	; 2
    72d0:	f1 e0       	ldi	r31, 0x01	; 1
    72d2:	80 81       	ld	r24, Z
    72d4:	8f 7b       	andi	r24, 0xBF	; 191
    72d6:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopCompressor_2\r\n");
    72d8:	8e e5       	ldi	r24, 0x5E	; 94
    72da:	95 e0       	ldi	r25, 0x05	; 5
    72dc:	9f 93       	push	r25
    72de:	8f 93       	push	r24
    72e0:	86 e9       	ldi	r24, 0x96	; 150
    72e2:	97 e0       	ldi	r25, 0x07	; 7
    72e4:	9f 93       	push	r25
    72e6:	8f 93       	push	r24
    72e8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->checkErrors =false;
    72ec:	1d 82       	std	Y+5, r1	; 0x05
			comp->switchToMode=true;
    72ee:	81 e0       	ldi	r24, 0x01	; 1
    72f0:	88 83       	st	Y, r24
			comp->checkTrv =false;
    72f2:	19 82       	std	Y+1, r1	; 0x01
			comp->compOn=0;
    72f4:	1b 86       	std	Y+11, r1	; 0x0b
			time_count_2+= difftime(time(&current_time), timeStartComp_2);
    72f6:	c0 90 91 0a 	lds	r12, 0x0A91	; 0x800a91 <timeStartComp_2>
    72fa:	d0 90 92 0a 	lds	r13, 0x0A92	; 0x800a92 <timeStartComp_2+0x1>
    72fe:	e0 90 93 0a 	lds	r14, 0x0A93	; 0x800a93 <timeStartComp_2+0x2>
    7302:	f0 90 94 0a 	lds	r15, 0x0A94	; 0x800a94 <timeStartComp_2+0x3>
    7306:	83 ef       	ldi	r24, 0xF3	; 243
    7308:	98 e0       	ldi	r25, 0x08	; 8
    730a:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    730e:	a7 01       	movw	r20, r14
    7310:	96 01       	movw	r18, r12
    7312:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    7316:	c0 90 2d 07 	lds	r12, 0x072D	; 0x80072d <time_count_2.3196>
    731a:	d0 90 2e 07 	lds	r13, 0x072E	; 0x80072e <time_count_2.3196+0x1>
    731e:	e0 90 2f 07 	lds	r14, 0x072F	; 0x80072f <time_count_2.3196+0x2>
    7322:	f0 90 30 07 	lds	r15, 0x0730	; 0x800730 <time_count_2.3196+0x3>
    7326:	dc 01       	movw	r26, r24
    7328:	cb 01       	movw	r24, r22
    732a:	8c 0d       	add	r24, r12
    732c:	9d 1d       	adc	r25, r13
    732e:	ae 1d       	adc	r26, r14
    7330:	bf 1d       	adc	r27, r15
    7332:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <time_count_2.3196>
    7336:	90 93 2e 07 	sts	0x072E, r25	; 0x80072e <time_count_2.3196+0x1>
    733a:	a0 93 2f 07 	sts	0x072F, r26	; 0x80072f <time_count_2.3196+0x2>
    733e:	b0 93 30 07 	sts	0x0730, r27	; 0x800730 <time_count_2.3196+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_compressor_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    7342:	0f 90       	pop	r0
    7344:	0f 90       	pop	r0
    7346:	0f 90       	pop	r0
    7348:	0f 90       	pop	r0
    734a:	81 31       	cpi	r24, 0x11	; 17
    734c:	9e 40       	sbci	r25, 0x0E	; 14
    734e:	a1 05       	cpc	r26, r1
    7350:	b1 05       	cpc	r27, r1
    7352:	b8 f0       	brcs	.+46     	; 0x7382 <Comp_Stop+0x1ca>
    7354:	e8 e4       	ldi	r30, 0x48	; 72
    7356:	f9 e0       	ldi	r31, 0x09	; 9
    7358:	80 81       	ld	r24, Z
    735a:	91 81       	ldd	r25, Z+1	; 0x01
    735c:	01 96       	adiw	r24, 0x01	; 1
    735e:	91 83       	std	Z+1, r25	; 0x01
    7360:	80 83       	st	Z, r24
    7362:	40 e6       	ldi	r20, 0x60	; 96
    7364:	50 e0       	ldi	r21, 0x00	; 0
    7366:	60 e0       	ldi	r22, 0x00	; 0
    7368:	70 e0       	ldi	r23, 0x00	; 0
    736a:	88 ef       	ldi	r24, 0xF8	; 248
    736c:	98 e0       	ldi	r25, 0x08	; 8
    736e:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <eeprom_update_block>
    7372:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <time_count_2.3196>
    7376:	10 92 2e 07 	sts	0x072E, r1	; 0x80072e <time_count_2.3196+0x1>
    737a:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <time_count_2.3196+0x2>
    737e:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <time_count_2.3196+0x3>
			
		}
		xTimerStart(xSwitchRevOne_2_time, 0);
    7382:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    7386:	9b 01       	movw	r18, r22
    7388:	ac 01       	movw	r20, r24
    738a:	c1 2c       	mov	r12, r1
    738c:	d1 2c       	mov	r13, r1
    738e:	76 01       	movw	r14, r12
    7390:	00 e0       	ldi	r16, 0x00	; 0
    7392:	10 e0       	ldi	r17, 0x00	; 0
    7394:	61 e0       	ldi	r22, 0x01	; 1
    7396:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <xSwitchRevOne_2_time>
    739a:	90 91 a1 0a 	lds	r25, 0x0AA1	; 0x800aa1 <xSwitchRevOne_2_time+0x1>
    739e:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
	
	
}
    73a2:	df 91       	pop	r29
    73a4:	cf 91       	pop	r28
    73a6:	1f 91       	pop	r17
    73a8:	0f 91       	pop	r16
    73aa:	ff 90       	pop	r15
    73ac:	ef 90       	pop	r14
    73ae:	df 90       	pop	r13
    73b0:	cf 90       	pop	r12
    73b2:	08 95       	ret

000073b4 <goToMode>:
	else return OFF;

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void goToMode(xCompressor *comp)
{   //calibration(comp);
    73b4:	cf 93       	push	r28
    73b6:	df 93       	push	r29
    73b8:	ec 01       	movw	r28, r24
	stop_timers(comp);
    73ba:	a3 dc       	rcall	.-1722   	; 0x6d02 <stop_timers>
	startTrvTimer(comp);
    73bc:	ce 01       	movw	r24, r28
    73be:	0e 94 c3 51 	call	0xa386	; 0xa386 <startTrvTimer>
	//comp->switchToMode=true;
	
	StarSoursePump(comp);
    73c2:	ce 01       	movw	r24, r28
    73c4:	99 db       	rcall	.-2254   	; 0x6af8 <StarSoursePump>
	//Comp_1.Steps = Fuzzy(&Comp_1,EEpromData.trv_corection_1);
	
}
    73c6:	df 91       	pop	r29
    73c8:	cf 91       	pop	r28
    73ca:	08 95       	ret

000073cc <mod_pump>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void mod_pump( xCompressor *comp,xEEdata* eeData){
    73cc:	2f 92       	push	r2
    73ce:	3f 92       	push	r3
    73d0:	4f 92       	push	r4
    73d2:	5f 92       	push	r5
    73d4:	6f 92       	push	r6
    73d6:	7f 92       	push	r7
    73d8:	8f 92       	push	r8
    73da:	9f 92       	push	r9
    73dc:	af 92       	push	r10
    73de:	bf 92       	push	r11
    73e0:	cf 92       	push	r12
    73e2:	df 92       	push	r13
    73e4:	ef 92       	push	r14
    73e6:	ff 92       	push	r15
    73e8:	1f 93       	push	r17
    73ea:	cf 93       	push	r28
    73ec:	df 93       	push	r29
    73ee:	ec 01       	movw	r28, r24
    73f0:	1b 01       	movw	r2, r22

	uint8_t temp;
	temp = selmode(&EEpromData);
    73f2:	88 ef       	ldi	r24, 0xF8	; 248
    73f4:	98 e0       	ldi	r25, 0x08	; 8
    73f6:	5c dc       	rcall	.-1864   	; 0x6cb0 <selmode>
    73f8:	18 2f       	mov	r17, r24
	if(temp!=comp->modeOfPump ){comp->modeOfPump=temp; Comp_Stop(comp);}
    73fa:	88 89       	ldd	r24, Y+16	; 0x10
    73fc:	18 17       	cp	r17, r24
    73fe:	19 f0       	breq	.+6      	; 0x7406 <mod_pump+0x3a>
    7400:	18 8b       	std	Y+16, r17	; 0x10
    7402:	ce 01       	movw	r24, r28
    7404:	d9 de       	rcall	.-590    	; 0x71b8 <Comp_Stop>

	switch(temp){
    7406:	13 30       	cpi	r17, 0x03	; 3
    7408:	09 f4       	brne	.+2      	; 0x740c <mod_pump+0x40>
    740a:	c8 c0       	rjmp	.+400    	; 0x759c <mod_pump+0x1d0>
    740c:	30 f4       	brcc	.+12     	; 0x741a <mod_pump+0x4e>
    740e:	11 30       	cpi	r17, 0x01	; 1
    7410:	59 f0       	breq	.+22     	; 0x7428 <mod_pump+0x5c>
    7412:	12 30       	cpi	r17, 0x02	; 2
    7414:	09 f4       	brne	.+2      	; 0x7418 <mod_pump+0x4c>
    7416:	6a c0       	rjmp	.+212    	; 0x74ec <mod_pump+0x120>
    7418:	14 c5       	rjmp	.+2600   	; 0x7e42 <mod_pump+0xa76>
    741a:	14 30       	cpi	r17, 0x04	; 4
    741c:	09 f4       	brne	.+2      	; 0x7420 <mod_pump+0x54>
    741e:	18 c1       	rjmp	.+560    	; 0x7650 <mod_pump+0x284>
    7420:	15 30       	cpi	r17, 0x05	; 5
    7422:	09 f4       	brne	.+2      	; 0x7426 <mod_pump+0x5a>
    7424:	62 c2       	rjmp	.+1220   	; 0x78ea <mod_pump+0x51e>
    7426:	0d c5       	rjmp	.+2586   	; 0x7e42 <mod_pump+0xa76>
		case DHW: {
		if(comp->Index==1){
    7428:	fe 01       	movw	r30, r28
    742a:	e2 59       	subi	r30, 0x92	; 146
    742c:	ff 4f       	sbci	r31, 0xFF	; 255
    742e:	80 81       	ld	r24, Z
    7430:	91 81       	ldd	r25, Z+1	; 0x01
    7432:	01 97       	sbiw	r24, 0x01	; 1
    7434:	09 f0       	breq	.+2      	; 0x7438 <mod_pump+0x6c>
    7436:	05 c5       	rjmp	.+2570   	; 0x7e42 <mod_pump+0xa76>
			if ( comp->Dhw_Temp > eeData->Set_DHW && comp->heatingWater && !comp->switchToMode) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp);}
    7438:	8a 88       	ldd	r8, Y+18	; 0x12
    743a:	9b 88       	ldd	r9, Y+19	; 0x13
    743c:	ac 88       	ldd	r10, Y+20	; 0x14
    743e:	bd 88       	ldd	r11, Y+21	; 0x15
    7440:	f1 01       	movw	r30, r2
    7442:	e3 8c       	ldd	r14, Z+27	; 0x1b
    7444:	f1 2c       	mov	r15, r1
    7446:	b7 01       	movw	r22, r14
    7448:	0f 2c       	mov	r0, r15
    744a:	00 0c       	add	r0, r0
    744c:	88 0b       	sbc	r24, r24
    744e:	99 0b       	sbc	r25, r25
    7450:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7454:	9b 01       	movw	r18, r22
    7456:	ac 01       	movw	r20, r24
    7458:	c5 01       	movw	r24, r10
    745a:	b4 01       	movw	r22, r8
    745c:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    7460:	18 16       	cp	r1, r24
    7462:	6c f4       	brge	.+26     	; 0x747e <mod_pump+0xb2>
    7464:	8c 81       	ldd	r24, Y+4	; 0x04
    7466:	88 23       	and	r24, r24
    7468:	09 f4       	brne	.+2      	; 0x746c <mod_pump+0xa0>
    746a:	82 c3       	rjmp	.+1796   	; 0x7b70 <mod_pump+0x7a4>
    746c:	88 81       	ld	r24, Y
    746e:	81 11       	cpse	r24, r1
    7470:	e8 c4       	rjmp	.+2512   	; 0x7e42 <mod_pump+0xa76>
    7472:	1c 82       	std	Y+4, r1	; 0x04
    7474:	ce 01       	movw	r24, r28
    7476:	a0 de       	rcall	.-704    	; 0x71b8 <Comp_Stop>
    7478:	ce 01       	movw	r24, r28
    747a:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
			if ( comp->Dhw_Temp < (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->switchToMode){calibration(comp);Comp_1.error=0; comp->heatingWater=true; goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_Dhw\r\n");}//Start_Dhw();
    747e:	f1 01       	movw	r30, r2
    7480:	63 8d       	ldd	r22, Z+27	; 0x1b
    7482:	70 e0       	ldi	r23, 0x00	; 0
    7484:	86 8d       	ldd	r24, Z+30	; 0x1e
    7486:	68 1b       	sub	r22, r24
    7488:	71 09       	sbc	r23, r1
    748a:	07 2e       	mov	r0, r23
    748c:	00 0c       	add	r0, r0
    748e:	88 0b       	sbc	r24, r24
    7490:	99 0b       	sbc	r25, r25
    7492:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7496:	9b 01       	movw	r18, r22
    7498:	ac 01       	movw	r20, r24
    749a:	6a 89       	ldd	r22, Y+18	; 0x12
    749c:	7b 89       	ldd	r23, Y+19	; 0x13
    749e:	8c 89       	ldd	r24, Y+20	; 0x14
    74a0:	9d 89       	ldd	r25, Y+21	; 0x15
    74a2:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    74a6:	88 23       	and	r24, r24
    74a8:	0c f0       	brlt	.+2      	; 0x74ac <mod_pump+0xe0>
    74aa:	cb c4       	rjmp	.+2454   	; 0x7e42 <mod_pump+0xa76>
    74ac:	8c 81       	ldd	r24, Y+4	; 0x04
    74ae:	81 11       	cpse	r24, r1
    74b0:	c8 c4       	rjmp	.+2448   	; 0x7e42 <mod_pump+0xa76>
    74b2:	88 81       	ld	r24, Y
    74b4:	81 11       	cpse	r24, r1
    74b6:	c5 c4       	rjmp	.+2442   	; 0x7e42 <mod_pump+0xa76>
    74b8:	ce 01       	movw	r24, r28
    74ba:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <calibration>
    74be:	10 92 c5 09 	sts	0x09C5, r1	; 0x8009c5 <Comp_1+0x6d>
    74c2:	10 92 c4 09 	sts	0x09C4, r1	; 0x8009c4 <Comp_1+0x6c>
    74c6:	81 e0       	ldi	r24, 0x01	; 1
    74c8:	8c 83       	std	Y+4, r24	; 0x04
    74ca:	ce 01       	movw	r24, r28
    74cc:	73 df       	rcall	.-282    	; 0x73b4 <goToMode>
    74ce:	81 e7       	ldi	r24, 0x71	; 113
    74d0:	95 e0       	ldi	r25, 0x05	; 5
    74d2:	9f 93       	push	r25
    74d4:	8f 93       	push	r24
    74d6:	86 e9       	ldi	r24, 0x96	; 150
    74d8:	97 e0       	ldi	r25, 0x07	; 7
    74da:	9f 93       	push	r25
    74dc:	8f 93       	push	r24
    74de:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    74e2:	0f 90       	pop	r0
    74e4:	0f 90       	pop	r0
    74e6:	0f 90       	pop	r0
    74e8:	0f 90       	pop	r0
    74ea:	ab c4       	rjmp	.+2390   	; 0x7e42 <mod_pump+0xa76>
		
		case HEAT:{
			//xSerialxPrintf(&xSerial3Port,"Set_Heating =%d\r\n,diffHEAT =%d\r\n,Bac_Temp =%f\r\n",eeData->Set_Heating,eeData->diffHEAT,data->Bac_Temp);
			//xSerialxPrintf(&xSerial3Port,"diffHEAT =%d\r\n",eeData->diffHEAT);
			//xSerialxPrintf(&xSerial3Port,"heat mode\r\n");
			if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {comp->Heating=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat\r\n");}
    74ec:	8e 88       	ldd	r8, Y+22	; 0x16
    74ee:	9f 88       	ldd	r9, Y+23	; 0x17
    74f0:	a8 8c       	ldd	r10, Y+24	; 0x18
    74f2:	b9 8c       	ldd	r11, Y+25	; 0x19
    74f4:	f1 01       	movw	r30, r2
    74f6:	e1 8c       	ldd	r14, Z+25	; 0x19
    74f8:	f1 2c       	mov	r15, r1
    74fa:	84 8d       	ldd	r24, Z+28	; 0x1c
    74fc:	b7 01       	movw	r22, r14
    74fe:	68 1b       	sub	r22, r24
    7500:	71 09       	sbc	r23, r1
    7502:	07 2e       	mov	r0, r23
    7504:	00 0c       	add	r0, r0
    7506:	88 0b       	sbc	r24, r24
    7508:	99 0b       	sbc	r25, r25
    750a:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    750e:	9b 01       	movw	r18, r22
    7510:	ac 01       	movw	r20, r24
    7512:	c5 01       	movw	r24, r10
    7514:	b4 01       	movw	r22, r8
    7516:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    751a:	88 23       	and	r24, r24
    751c:	fc f4       	brge	.+62     	; 0x755c <mod_pump+0x190>
    751e:	8a 81       	ldd	r24, Y+2	; 0x02
    7520:	81 11       	cpse	r24, r1
    7522:	3b c3       	rjmp	.+1654   	; 0x7b9a <mod_pump+0x7ce>
    7524:	88 81       	ld	r24, Y
    7526:	81 11       	cpse	r24, r1
    7528:	8c c4       	rjmp	.+2328   	; 0x7e42 <mod_pump+0xa76>
    752a:	81 e0       	ldi	r24, 0x01	; 1
    752c:	8a 83       	std	Y+2, r24	; 0x02
    752e:	ce 01       	movw	r24, r28
    7530:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <calibration>
    7534:	10 92 c5 09 	sts	0x09C5, r1	; 0x8009c5 <Comp_1+0x6d>
    7538:	10 92 c4 09 	sts	0x09C4, r1	; 0x8009c4 <Comp_1+0x6c>
    753c:	ce 01       	movw	r24, r28
    753e:	3a df       	rcall	.-396    	; 0x73b4 <goToMode>
    7540:	8d e7       	ldi	r24, 0x7D	; 125
    7542:	95 e0       	ldi	r25, 0x05	; 5
    7544:	9f 93       	push	r25
    7546:	8f 93       	push	r24
    7548:	86 e9       	ldi	r24, 0x96	; 150
    754a:	97 e0       	ldi	r25, 0x07	; 7
    754c:	9f 93       	push	r25
    754e:	8f 93       	push	r24
    7550:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7554:	0f 90       	pop	r0
    7556:	0f 90       	pop	r0
    7558:	0f 90       	pop	r0
    755a:	0f 90       	pop	r0
			if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    755c:	f1 01       	movw	r30, r2
    755e:	61 8d       	ldd	r22, Z+25	; 0x19
    7560:	70 e0       	ldi	r23, 0x00	; 0
    7562:	80 e0       	ldi	r24, 0x00	; 0
    7564:	90 e0       	ldi	r25, 0x00	; 0
    7566:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    756a:	9b 01       	movw	r18, r22
    756c:	ac 01       	movw	r20, r24
    756e:	6e 89       	ldd	r22, Y+22	; 0x16
    7570:	7f 89       	ldd	r23, Y+23	; 0x17
    7572:	88 8d       	ldd	r24, Y+24	; 0x18
    7574:	99 8d       	ldd	r25, Y+25	; 0x19
    7576:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    757a:	18 16       	cp	r1, r24
    757c:	0c f0       	brlt	.+2      	; 0x7580 <mod_pump+0x1b4>
    757e:	61 c4       	rjmp	.+2242   	; 0x7e42 <mod_pump+0xa76>
    7580:	8a 81       	ldd	r24, Y+2	; 0x02
    7582:	88 23       	and	r24, r24
    7584:	09 f4       	brne	.+2      	; 0x7588 <mod_pump+0x1bc>
    7586:	5d c4       	rjmp	.+2234   	; 0x7e42 <mod_pump+0xa76>
    7588:	88 81       	ld	r24, Y
    758a:	81 11       	cpse	r24, r1
    758c:	5a c4       	rjmp	.+2228   	; 0x7e42 <mod_pump+0xa76>
    758e:	1a 82       	std	Y+2, r1	; 0x02
    7590:	ce 01       	movw	r24, r28
    7592:	12 de       	rcall	.-988    	; 0x71b8 <Comp_Stop>
    7594:	ce 01       	movw	r24, r28
    7596:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
    759a:	53 c4       	rjmp	.+2214   	; 0x7e42 <mod_pump+0xa76>
		} break;
		
		case COOL:{
			//xSerialxPrintf(&xSerial3Port,"COOL mode\r\n");
			if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
    759c:	8e 88       	ldd	r8, Y+22	; 0x16
    759e:	9f 88       	ldd	r9, Y+23	; 0x17
    75a0:	a8 8c       	ldd	r10, Y+24	; 0x18
    75a2:	b9 8c       	ldd	r11, Y+25	; 0x19
    75a4:	f1 01       	movw	r30, r2
    75a6:	e2 8c       	ldd	r14, Z+26	; 0x1a
    75a8:	f1 2c       	mov	r15, r1
    75aa:	b7 01       	movw	r22, r14
    75ac:	0f 2c       	mov	r0, r15
    75ae:	00 0c       	add	r0, r0
    75b0:	88 0b       	sbc	r24, r24
    75b2:	99 0b       	sbc	r25, r25
    75b4:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    75b8:	9b 01       	movw	r18, r22
    75ba:	ac 01       	movw	r20, r24
    75bc:	c5 01       	movw	r24, r10
    75be:	b4 01       	movw	r22, r8
    75c0:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    75c4:	88 23       	and	r24, r24
    75c6:	6c f4       	brge	.+26     	; 0x75e2 <mod_pump+0x216>
    75c8:	8b 81       	ldd	r24, Y+3	; 0x03
    75ca:	88 23       	and	r24, r24
    75cc:	09 f4       	brne	.+2      	; 0x75d0 <mod_pump+0x204>
    75ce:	f5 c2       	rjmp	.+1514   	; 0x7bba <mod_pump+0x7ee>
    75d0:	88 81       	ld	r24, Y
    75d2:	81 11       	cpse	r24, r1
    75d4:	36 c4       	rjmp	.+2156   	; 0x7e42 <mod_pump+0xa76>
    75d6:	1b 82       	std	Y+3, r1	; 0x03
    75d8:	ce 01       	movw	r24, r28
    75da:	ee dd       	rcall	.-1060   	; 0x71b8 <Comp_Stop>
    75dc:	ce 01       	movw	r24, r28
    75de:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
			if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {comp->Cooling=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool\r\n");}//
    75e2:	f1 01       	movw	r30, r2
    75e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    75e6:	65 8d       	ldd	r22, Z+29	; 0x1d
    75e8:	70 e0       	ldi	r23, 0x00	; 0
    75ea:	68 0f       	add	r22, r24
    75ec:	71 1d       	adc	r23, r1
    75ee:	07 2e       	mov	r0, r23
    75f0:	00 0c       	add	r0, r0
    75f2:	88 0b       	sbc	r24, r24
    75f4:	99 0b       	sbc	r25, r25
    75f6:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    75fa:	9b 01       	movw	r18, r22
    75fc:	ac 01       	movw	r20, r24
    75fe:	6e 89       	ldd	r22, Y+22	; 0x16
    7600:	7f 89       	ldd	r23, Y+23	; 0x17
    7602:	88 8d       	ldd	r24, Y+24	; 0x18
    7604:	99 8d       	ldd	r25, Y+25	; 0x19
    7606:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    760a:	18 16       	cp	r1, r24
    760c:	0c f0       	brlt	.+2      	; 0x7610 <mod_pump+0x244>
    760e:	19 c4       	rjmp	.+2098   	; 0x7e42 <mod_pump+0xa76>
    7610:	8b 81       	ldd	r24, Y+3	; 0x03
    7612:	81 11       	cpse	r24, r1
    7614:	16 c4       	rjmp	.+2092   	; 0x7e42 <mod_pump+0xa76>
    7616:	88 81       	ld	r24, Y
    7618:	81 11       	cpse	r24, r1
    761a:	13 c4       	rjmp	.+2086   	; 0x7e42 <mod_pump+0xa76>
    761c:	81 e0       	ldi	r24, 0x01	; 1
    761e:	8b 83       	std	Y+3, r24	; 0x03
    7620:	ce 01       	movw	r24, r28
    7622:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <calibration>
    7626:	10 92 c5 09 	sts	0x09C5, r1	; 0x8009c5 <Comp_1+0x6d>
    762a:	10 92 c4 09 	sts	0x09C4, r1	; 0x8009c4 <Comp_1+0x6c>
    762e:	ce 01       	movw	r24, r28
    7630:	c1 de       	rcall	.-638    	; 0x73b4 <goToMode>
    7632:	8a e8       	ldi	r24, 0x8A	; 138
    7634:	95 e0       	ldi	r25, 0x05	; 5
    7636:	9f 93       	push	r25
    7638:	8f 93       	push	r24
    763a:	86 e9       	ldi	r24, 0x96	; 150
    763c:	97 e0       	ldi	r25, 0x07	; 7
    763e:	9f 93       	push	r25
    7640:	8f 93       	push	r24
    7642:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7646:	0f 90       	pop	r0
    7648:	0f 90       	pop	r0
    764a:	0f 90       	pop	r0
    764c:	0f 90       	pop	r0
    764e:	f9 c3       	rjmp	.+2034   	; 0x7e42 <mod_pump+0xa76>
		}break;
		
		case HEAT_DHW:
		
		{
			if(comp->Index==1)
    7650:	fe 01       	movw	r30, r28
    7652:	e2 59       	subi	r30, 0x92	; 146
    7654:	ff 4f       	sbci	r31, 0xFF	; 255
    7656:	80 81       	ld	r24, Z
    7658:	91 81       	ldd	r25, Z+1	; 0x01
    765a:	81 30       	cpi	r24, 0x01	; 1
    765c:	91 05       	cpc	r25, r1
    765e:	09 f0       	breq	.+2      	; 0x7662 <mod_pump+0x296>
    7660:	ed c0       	rjmp	.+474    	; 0x783c <mod_pump+0x470>
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
    7662:	8a 88       	ldd	r8, Y+18	; 0x12
    7664:	9b 88       	ldd	r9, Y+19	; 0x13
    7666:	ac 88       	ldd	r10, Y+20	; 0x14
    7668:	bd 88       	ldd	r11, Y+21	; 0x15
    766a:	f1 01       	movw	r30, r2
    766c:	e3 8c       	ldd	r14, Z+27	; 0x1b
    766e:	f1 2c       	mov	r15, r1
    7670:	86 8d       	ldd	r24, Z+30	; 0x1e
    7672:	b7 01       	movw	r22, r14
    7674:	68 1b       	sub	r22, r24
    7676:	71 09       	sbc	r23, r1
    7678:	07 2e       	mov	r0, r23
    767a:	00 0c       	add	r0, r0
    767c:	88 0b       	sbc	r24, r24
    767e:	99 0b       	sbc	r25, r25
    7680:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7684:	9b 01       	movw	r18, r22
    7686:	ac 01       	movw	r20, r24
    7688:	c5 01       	movw	r24, r10
    768a:	b4 01       	movw	r22, r8
    768c:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    7690:	88 23       	and	r24, r24
    7692:	1c f5       	brge	.+70     	; 0x76da <mod_pump+0x30e>
    7694:	8c 81       	ldd	r24, Y+4	; 0x04
    7696:	81 11       	cpse	r24, r1
    7698:	3c c3       	rjmp	.+1656   	; 0x7d12 <mod_pump+0x946>
    769a:	8a 81       	ldd	r24, Y+2	; 0x02
    769c:	81 11       	cpse	r24, r1
    769e:	a2 c2       	rjmp	.+1348   	; 0x7be4 <mod_pump+0x818>
    76a0:	88 81       	ld	r24, Y
    76a2:	81 11       	cpse	r24, r1
    76a4:	98 c3       	rjmp	.+1840   	; 0x7dd6 <mod_pump+0xa0a>
    76a6:	81 e0       	ldi	r24, 0x01	; 1
    76a8:	8c 83       	std	Y+4, r24	; 0x04
    76aa:	ce 01       	movw	r24, r28
    76ac:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <calibration>
    76b0:	10 92 c5 09 	sts	0x09C5, r1	; 0x8009c5 <Comp_1+0x6d>
    76b4:	10 92 c4 09 	sts	0x09C4, r1	; 0x8009c4 <Comp_1+0x6c>
    76b8:	ce 01       	movw	r24, r28
    76ba:	7c de       	rcall	.-776    	; 0x73b4 <goToMode>
    76bc:	87 e9       	ldi	r24, 0x97	; 151
    76be:	95 e0       	ldi	r25, 0x05	; 5
    76c0:	9f 93       	push	r25
    76c2:	8f 93       	push	r24
    76c4:	86 e9       	ldi	r24, 0x96	; 150
    76c6:	97 e0       	ldi	r25, 0x07	; 7
    76c8:	9f 93       	push	r25
    76ca:	8f 93       	push	r24
    76cc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    76d0:	0f 90       	pop	r0
    76d2:	0f 90       	pop	r0
    76d4:	0f 90       	pop	r0
    76d6:	0f 90       	pop	r0
    76d8:	76 c0       	rjmp	.+236    	; 0x77c6 <mod_pump+0x3fa>
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    76da:	4e 88       	ldd	r4, Y+22	; 0x16
    76dc:	5f 88       	ldd	r5, Y+23	; 0x17
    76de:	68 8c       	ldd	r6, Y+24	; 0x18
    76e0:	79 8c       	ldd	r7, Y+25	; 0x19
    76e2:	f1 01       	movw	r30, r2
    76e4:	c1 8c       	ldd	r12, Z+25	; 0x19
    76e6:	d1 2c       	mov	r13, r1
    76e8:	84 8d       	ldd	r24, Z+28	; 0x1c
    76ea:	b6 01       	movw	r22, r12
    76ec:	68 1b       	sub	r22, r24
    76ee:	71 09       	sbc	r23, r1
    76f0:	07 2e       	mov	r0, r23
    76f2:	00 0c       	add	r0, r0
    76f4:	88 0b       	sbc	r24, r24
    76f6:	99 0b       	sbc	r25, r25
    76f8:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    76fc:	9b 01       	movw	r18, r22
    76fe:	ac 01       	movw	r20, r24
    7700:	c3 01       	movw	r24, r6
    7702:	b2 01       	movw	r22, r4
    7704:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    7708:	88 23       	and	r24, r24
    770a:	1c f5       	brge	.+70     	; 0x7752 <mod_pump+0x386>
    770c:	8c 81       	ldd	r24, Y+4	; 0x04
    770e:	81 11       	cpse	r24, r1
    7710:	84 c2       	rjmp	.+1288   	; 0x7c1a <mod_pump+0x84e>
    7712:	8a 81       	ldd	r24, Y+2	; 0x02
    7714:	81 11       	cpse	r24, r1
    7716:	1d c0       	rjmp	.+58     	; 0x7752 <mod_pump+0x386>
    7718:	88 81       	ld	r24, Y
    771a:	81 11       	cpse	r24, r1
    771c:	1a c0       	rjmp	.+52     	; 0x7752 <mod_pump+0x386>
    771e:	ce 01       	movw	r24, r28
    7720:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <calibration>
    7724:	10 92 c5 09 	sts	0x09C5, r1	; 0x8009c5 <Comp_1+0x6d>
    7728:	10 92 c4 09 	sts	0x09C4, r1	; 0x8009c4 <Comp_1+0x6c>
    772c:	81 e0       	ldi	r24, 0x01	; 1
    772e:	8a 83       	std	Y+2, r24	; 0x02
    7730:	ce 01       	movw	r24, r28
    7732:	40 de       	rcall	.-896    	; 0x73b4 <goToMode>
    7734:	85 ea       	ldi	r24, 0xA5	; 165
    7736:	95 e0       	ldi	r25, 0x05	; 5
    7738:	9f 93       	push	r25
    773a:	8f 93       	push	r24
    773c:	86 e9       	ldi	r24, 0x96	; 150
    773e:	97 e0       	ldi	r25, 0x07	; 7
    7740:	9f 93       	push	r25
    7742:	8f 93       	push	r24
    7744:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7748:	0f 90       	pop	r0
    774a:	0f 90       	pop	r0
    774c:	0f 90       	pop	r0
    774e:	0f 90       	pop	r0
    7750:	3a c0       	rjmp	.+116    	; 0x77c6 <mod_pump+0x3fa>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7752:	b7 01       	movw	r22, r14
    7754:	ff 0c       	add	r15, r15
    7756:	88 0b       	sbc	r24, r24
    7758:	99 0b       	sbc	r25, r25
    775a:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    775e:	9b 01       	movw	r18, r22
    7760:	ac 01       	movw	r20, r24
    7762:	c5 01       	movw	r24, r10
    7764:	b4 01       	movw	r22, r8
    7766:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    776a:	18 16       	cp	r1, r24
    776c:	8c f4       	brge	.+34     	; 0x7790 <mod_pump+0x3c4>
    776e:	8c 81       	ldd	r24, Y+4	; 0x04
    7770:	88 23       	and	r24, r24
    7772:	09 f4       	brne	.+2      	; 0x7776 <mod_pump+0x3aa>
    7774:	62 c2       	rjmp	.+1220   	; 0x7c3a <mod_pump+0x86e>
    7776:	8a 81       	ldd	r24, Y+2	; 0x02
    7778:	81 11       	cpse	r24, r1
    777a:	25 c0       	rjmp	.+74     	; 0x77c6 <mod_pump+0x3fa>
    777c:	88 81       	ld	r24, Y
    777e:	81 11       	cpse	r24, r1
    7780:	22 c0       	rjmp	.+68     	; 0x77c6 <mod_pump+0x3fa>
    7782:	1c 82       	std	Y+4, r1	; 0x04
    7784:	ce 01       	movw	r24, r28
    7786:	18 dd       	rcall	.-1488   	; 0x71b8 <Comp_Stop>
    7788:	ce 01       	movw	r24, r28
    778a:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
    778e:	1b c0       	rjmp	.+54     	; 0x77c6 <mod_pump+0x3fa>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7790:	b6 01       	movw	r22, r12
    7792:	dd 0c       	add	r13, r13
    7794:	88 0b       	sbc	r24, r24
    7796:	99 0b       	sbc	r25, r25
    7798:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    779c:	a3 01       	movw	r20, r6
    779e:	92 01       	movw	r18, r4
    77a0:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    77a4:	88 23       	and	r24, r24
    77a6:	7c f4       	brge	.+30     	; 0x77c6 <mod_pump+0x3fa>
    77a8:	8c 81       	ldd	r24, Y+4	; 0x04
    77aa:	81 11       	cpse	r24, r1
    77ac:	0c c0       	rjmp	.+24     	; 0x77c6 <mod_pump+0x3fa>
    77ae:	8a 81       	ldd	r24, Y+2	; 0x02
    77b0:	88 23       	and	r24, r24
    77b2:	49 f0       	breq	.+18     	; 0x77c6 <mod_pump+0x3fa>
    77b4:	88 81       	ld	r24, Y
    77b6:	81 11       	cpse	r24, r1
    77b8:	06 c0       	rjmp	.+12     	; 0x77c6 <mod_pump+0x3fa>
    77ba:	1a 82       	std	Y+2, r1	; 0x02
    77bc:	ce 01       	movw	r24, r28
    77be:	fc dc       	rcall	.-1544   	; 0x71b8 <Comp_Stop>
    77c0:	ce 01       	movw	r24, r28
    77c2:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
				if(EEpromData.NombComp==2) if(comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW)&& !comp->heatingWater && comp->Heating && !comp->switchToMode){comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_again\r\n");}	
    77c6:	80 91 18 09 	lds	r24, 0x0918	; 0x800918 <EEpromData+0x20>
    77ca:	82 30       	cpi	r24, 0x02	; 2
    77cc:	09 f0       	breq	.+2      	; 0x77d0 <mod_pump+0x404>
    77ce:	39 c3       	rjmp	.+1650   	; 0x7e42 <mod_pump+0xa76>
    77d0:	f1 01       	movw	r30, r2
    77d2:	63 8d       	ldd	r22, Z+27	; 0x1b
    77d4:	70 e0       	ldi	r23, 0x00	; 0
    77d6:	86 8d       	ldd	r24, Z+30	; 0x1e
    77d8:	68 1b       	sub	r22, r24
    77da:	71 09       	sbc	r23, r1
    77dc:	07 2e       	mov	r0, r23
    77de:	00 0c       	add	r0, r0
    77e0:	88 0b       	sbc	r24, r24
    77e2:	99 0b       	sbc	r25, r25
    77e4:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    77e8:	9b 01       	movw	r18, r22
    77ea:	ac 01       	movw	r20, r24
    77ec:	6a 89       	ldd	r22, Y+18	; 0x12
    77ee:	7b 89       	ldd	r23, Y+19	; 0x13
    77f0:	8c 89       	ldd	r24, Y+20	; 0x14
    77f2:	9d 89       	ldd	r25, Y+21	; 0x15
    77f4:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    77f8:	88 23       	and	r24, r24
    77fa:	0c f0       	brlt	.+2      	; 0x77fe <mod_pump+0x432>
    77fc:	22 c3       	rjmp	.+1604   	; 0x7e42 <mod_pump+0xa76>
    77fe:	8c 81       	ldd	r24, Y+4	; 0x04
    7800:	81 11       	cpse	r24, r1
    7802:	1f c3       	rjmp	.+1598   	; 0x7e42 <mod_pump+0xa76>
    7804:	8a 81       	ldd	r24, Y+2	; 0x02
    7806:	88 23       	and	r24, r24
    7808:	09 f4       	brne	.+2      	; 0x780c <mod_pump+0x440>
    780a:	1b c3       	rjmp	.+1590   	; 0x7e42 <mod_pump+0xa76>
    780c:	88 81       	ld	r24, Y
    780e:	81 11       	cpse	r24, r1
    7810:	18 c3       	rjmp	.+1584   	; 0x7e42 <mod_pump+0xa76>
    7812:	1a 82       	std	Y+2, r1	; 0x02
    7814:	ce 01       	movw	r24, r28
    7816:	d0 dc       	rcall	.-1632   	; 0x71b8 <Comp_Stop>
    7818:	ce 01       	movw	r24, r28
    781a:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
    781e:	84 eb       	ldi	r24, 0xB4	; 180
    7820:	95 e0       	ldi	r25, 0x05	; 5
    7822:	9f 93       	push	r25
    7824:	8f 93       	push	r24
    7826:	86 e9       	ldi	r24, 0x96	; 150
    7828:	97 e0       	ldi	r25, 0x07	; 7
    782a:	9f 93       	push	r25
    782c:	8f 93       	push	r24
    782e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7832:	0f 90       	pop	r0
    7834:	0f 90       	pop	r0
    7836:	0f 90       	pop	r0
    7838:	0f 90       	pop	r0
    783a:	03 c3       	rjmp	.+1542   	; 0x7e42 <mod_pump+0xa76>
			}
			else if(comp->Index==2)
    783c:	02 97       	sbiw	r24, 0x02	; 2
    783e:	09 f0       	breq	.+2      	; 0x7842 <mod_pump+0x476>
    7840:	00 c3       	rjmp	.+1536   	; 0x7e42 <mod_pump+0xa76>
			{
				if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {calibration(comp);comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_2\r\n");}
    7842:	8e 88       	ldd	r8, Y+22	; 0x16
    7844:	9f 88       	ldd	r9, Y+23	; 0x17
    7846:	a8 8c       	ldd	r10, Y+24	; 0x18
    7848:	b9 8c       	ldd	r11, Y+25	; 0x19
    784a:	f1 01       	movw	r30, r2
    784c:	e1 8c       	ldd	r14, Z+25	; 0x19
    784e:	f1 2c       	mov	r15, r1
    7850:	84 8d       	ldd	r24, Z+28	; 0x1c
    7852:	b7 01       	movw	r22, r14
    7854:	68 1b       	sub	r22, r24
    7856:	71 09       	sbc	r23, r1
    7858:	07 2e       	mov	r0, r23
    785a:	00 0c       	add	r0, r0
    785c:	88 0b       	sbc	r24, r24
    785e:	99 0b       	sbc	r25, r25
    7860:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7864:	9b 01       	movw	r18, r22
    7866:	ac 01       	movw	r20, r24
    7868:	c5 01       	movw	r24, r10
    786a:	b4 01       	movw	r22, r8
    786c:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    7870:	88 23       	and	r24, r24
    7872:	dc f4       	brge	.+54     	; 0x78aa <mod_pump+0x4de>
    7874:	8a 81       	ldd	r24, Y+2	; 0x02
    7876:	81 11       	cpse	r24, r1
    7878:	ee c1       	rjmp	.+988    	; 0x7c56 <mod_pump+0x88a>
    787a:	88 81       	ld	r24, Y
    787c:	81 11       	cpse	r24, r1
    787e:	e1 c2       	rjmp	.+1474   	; 0x7e42 <mod_pump+0xa76>
    7880:	ce 01       	movw	r24, r28
    7882:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <calibration>
    7886:	81 e0       	ldi	r24, 0x01	; 1
    7888:	8a 83       	std	Y+2, r24	; 0x02
    788a:	ce 01       	movw	r24, r28
    788c:	93 dd       	rcall	.-1242   	; 0x73b4 <goToMode>
    788e:	86 ec       	ldi	r24, 0xC6	; 198
    7890:	95 e0       	ldi	r25, 0x05	; 5
    7892:	9f 93       	push	r25
    7894:	8f 93       	push	r24
    7896:	86 e9       	ldi	r24, 0x96	; 150
    7898:	97 e0       	ldi	r25, 0x07	; 7
    789a:	9f 93       	push	r25
    789c:	8f 93       	push	r24
    789e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    78a2:	0f 90       	pop	r0
    78a4:	0f 90       	pop	r0
    78a6:	0f 90       	pop	r0
    78a8:	0f 90       	pop	r0
				if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    78aa:	f1 01       	movw	r30, r2
    78ac:	61 8d       	ldd	r22, Z+25	; 0x19
    78ae:	70 e0       	ldi	r23, 0x00	; 0
    78b0:	80 e0       	ldi	r24, 0x00	; 0
    78b2:	90 e0       	ldi	r25, 0x00	; 0
    78b4:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    78b8:	9b 01       	movw	r18, r22
    78ba:	ac 01       	movw	r20, r24
    78bc:	6e 89       	ldd	r22, Y+22	; 0x16
    78be:	7f 89       	ldd	r23, Y+23	; 0x17
    78c0:	88 8d       	ldd	r24, Y+24	; 0x18
    78c2:	99 8d       	ldd	r25, Y+25	; 0x19
    78c4:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    78c8:	18 16       	cp	r1, r24
    78ca:	0c f0       	brlt	.+2      	; 0x78ce <mod_pump+0x502>
    78cc:	ba c2       	rjmp	.+1396   	; 0x7e42 <mod_pump+0xa76>
    78ce:	8a 81       	ldd	r24, Y+2	; 0x02
    78d0:	88 23       	and	r24, r24
    78d2:	09 f4       	brne	.+2      	; 0x78d6 <mod_pump+0x50a>
    78d4:	b6 c2       	rjmp	.+1388   	; 0x7e42 <mod_pump+0xa76>
    78d6:	88 81       	ld	r24, Y
    78d8:	81 11       	cpse	r24, r1
    78da:	b3 c2       	rjmp	.+1382   	; 0x7e42 <mod_pump+0xa76>
    78dc:	1a 82       	std	Y+2, r1	; 0x02
    78de:	ce 01       	movw	r24, r28
    78e0:	6b dc       	rcall	.-1834   	; 0x71b8 <Comp_Stop>
    78e2:	ce 01       	movw	r24, r28
    78e4:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
    78e8:	ac c2       	rjmp	.+1368   	; 0x7e42 <mod_pump+0xa76>
			
		}break;
		
		case COOL_DHW:
		{
			if(comp->Index==1)
    78ea:	fe 01       	movw	r30, r28
    78ec:	e2 59       	subi	r30, 0x92	; 146
    78ee:	ff 4f       	sbci	r31, 0xFF	; 255
    78f0:	80 81       	ld	r24, Z
    78f2:	91 81       	ldd	r25, Z+1	; 0x01
    78f4:	81 30       	cpi	r24, 0x01	; 1
    78f6:	91 05       	cpc	r25, r1
    78f8:	09 f0       	breq	.+2      	; 0x78fc <mod_pump+0x530>
    78fa:	e1 c0       	rjmp	.+450    	; 0x7abe <mod_pump+0x6f2>
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
    78fc:	8a 88       	ldd	r8, Y+18	; 0x12
    78fe:	9b 88       	ldd	r9, Y+19	; 0x13
    7900:	ac 88       	ldd	r10, Y+20	; 0x14
    7902:	bd 88       	ldd	r11, Y+21	; 0x15
    7904:	f1 01       	movw	r30, r2
    7906:	e3 8c       	ldd	r14, Z+27	; 0x1b
    7908:	f1 2c       	mov	r15, r1
    790a:	86 8d       	ldd	r24, Z+30	; 0x1e
    790c:	b7 01       	movw	r22, r14
    790e:	68 1b       	sub	r22, r24
    7910:	71 09       	sbc	r23, r1
    7912:	07 2e       	mov	r0, r23
    7914:	00 0c       	add	r0, r0
    7916:	88 0b       	sbc	r24, r24
    7918:	99 0b       	sbc	r25, r25
    791a:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    791e:	9b 01       	movw	r18, r22
    7920:	ac 01       	movw	r20, r24
    7922:	c5 01       	movw	r24, r10
    7924:	b4 01       	movw	r22, r8
    7926:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    792a:	88 23       	and	r24, r24
    792c:	2c f5       	brge	.+74     	; 0x7978 <mod_pump+0x5ac>
    792e:	8c 81       	ldd	r24, Y+4	; 0x04
    7930:	81 11       	cpse	r24, r1
    7932:	21 c2       	rjmp	.+1090   	; 0x7d76 <mod_pump+0x9aa>
    7934:	8b 81       	ldd	r24, Y+3	; 0x03
    7936:	81 11       	cpse	r24, r1
    7938:	9e c1       	rjmp	.+828    	; 0x7c76 <mod_pump+0x8aa>
    793a:	88 81       	ld	r24, Y
    793c:	81 11       	cpse	r24, r1
    793e:	66 c2       	rjmp	.+1228   	; 0x7e0c <mod_pump+0xa40>
    7940:	ff 24       	eor	r15, r15
    7942:	f3 94       	inc	r15
    7944:	fc 82       	std	Y+4, r15	; 0x04
    7946:	ce 01       	movw	r24, r28
    7948:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <calibration>
    794c:	10 92 c5 09 	sts	0x09C5, r1	; 0x8009c5 <Comp_1+0x6d>
    7950:	10 92 c4 09 	sts	0x09C4, r1	; 0x8009c4 <Comp_1+0x6c>
    7954:	fc 82       	std	Y+4, r15	; 0x04
    7956:	ce 01       	movw	r24, r28
    7958:	2d dd       	rcall	.-1446   	; 0x73b4 <goToMode>
    795a:	85 ed       	ldi	r24, 0xD5	; 213
    795c:	95 e0       	ldi	r25, 0x05	; 5
    795e:	9f 93       	push	r25
    7960:	8f 93       	push	r24
    7962:	86 e9       	ldi	r24, 0x96	; 150
    7964:	97 e0       	ldi	r25, 0x07	; 7
    7966:	9f 93       	push	r25
    7968:	8f 93       	push	r24
    796a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    796e:	0f 90       	pop	r0
    7970:	0f 90       	pop	r0
    7972:	0f 90       	pop	r0
    7974:	0f 90       	pop	r0
    7976:	76 c0       	rjmp	.+236    	; 0x7a64 <mod_pump+0x698>
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7978:	4e 88       	ldd	r4, Y+22	; 0x16
    797a:	5f 88       	ldd	r5, Y+23	; 0x17
    797c:	68 8c       	ldd	r6, Y+24	; 0x18
    797e:	79 8c       	ldd	r7, Y+25	; 0x19
    7980:	f1 01       	movw	r30, r2
    7982:	c1 8c       	ldd	r12, Z+25	; 0x19
    7984:	d1 2c       	mov	r13, r1
    7986:	84 8d       	ldd	r24, Z+28	; 0x1c
    7988:	b6 01       	movw	r22, r12
    798a:	68 1b       	sub	r22, r24
    798c:	71 09       	sbc	r23, r1
    798e:	07 2e       	mov	r0, r23
    7990:	00 0c       	add	r0, r0
    7992:	88 0b       	sbc	r24, r24
    7994:	99 0b       	sbc	r25, r25
    7996:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    799a:	9b 01       	movw	r18, r22
    799c:	ac 01       	movw	r20, r24
    799e:	c3 01       	movw	r24, r6
    79a0:	b2 01       	movw	r22, r4
    79a2:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    79a6:	88 23       	and	r24, r24
    79a8:	1c f5       	brge	.+70     	; 0x79f0 <mod_pump+0x624>
    79aa:	8c 81       	ldd	r24, Y+4	; 0x04
    79ac:	81 11       	cpse	r24, r1
    79ae:	7e c1       	rjmp	.+764    	; 0x7cac <mod_pump+0x8e0>
    79b0:	8b 81       	ldd	r24, Y+3	; 0x03
    79b2:	81 11       	cpse	r24, r1
    79b4:	1d c0       	rjmp	.+58     	; 0x79f0 <mod_pump+0x624>
    79b6:	88 81       	ld	r24, Y
    79b8:	81 11       	cpse	r24, r1
    79ba:	1a c0       	rjmp	.+52     	; 0x79f0 <mod_pump+0x624>
    79bc:	ce 01       	movw	r24, r28
    79be:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <calibration>
    79c2:	10 92 c5 09 	sts	0x09C5, r1	; 0x8009c5 <Comp_1+0x6d>
    79c6:	10 92 c4 09 	sts	0x09C4, r1	; 0x8009c4 <Comp_1+0x6c>
    79ca:	81 e0       	ldi	r24, 0x01	; 1
    79cc:	8b 83       	std	Y+3, r24	; 0x03
    79ce:	ce 01       	movw	r24, r28
    79d0:	f1 dc       	rcall	.-1566   	; 0x73b4 <goToMode>
    79d2:	87 ee       	ldi	r24, 0xE7	; 231
    79d4:	95 e0       	ldi	r25, 0x05	; 5
    79d6:	9f 93       	push	r25
    79d8:	8f 93       	push	r24
    79da:	86 e9       	ldi	r24, 0x96	; 150
    79dc:	97 e0       	ldi	r25, 0x07	; 7
    79de:	9f 93       	push	r25
    79e0:	8f 93       	push	r24
    79e2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    79e6:	0f 90       	pop	r0
    79e8:	0f 90       	pop	r0
    79ea:	0f 90       	pop	r0
    79ec:	0f 90       	pop	r0
    79ee:	3a c0       	rjmp	.+116    	; 0x7a64 <mod_pump+0x698>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    79f0:	b7 01       	movw	r22, r14
    79f2:	ff 0c       	add	r15, r15
    79f4:	88 0b       	sbc	r24, r24
    79f6:	99 0b       	sbc	r25, r25
    79f8:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    79fc:	9b 01       	movw	r18, r22
    79fe:	ac 01       	movw	r20, r24
    7a00:	c5 01       	movw	r24, r10
    7a02:	b4 01       	movw	r22, r8
    7a04:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    7a08:	18 16       	cp	r1, r24
    7a0a:	8c f4       	brge	.+34     	; 0x7a2e <mod_pump+0x662>
    7a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    7a0e:	88 23       	and	r24, r24
    7a10:	09 f4       	brne	.+2      	; 0x7a14 <mod_pump+0x648>
    7a12:	5c c1       	rjmp	.+696    	; 0x7ccc <mod_pump+0x900>
    7a14:	8b 81       	ldd	r24, Y+3	; 0x03
    7a16:	81 11       	cpse	r24, r1
    7a18:	25 c0       	rjmp	.+74     	; 0x7a64 <mod_pump+0x698>
    7a1a:	88 81       	ld	r24, Y
    7a1c:	81 11       	cpse	r24, r1
    7a1e:	22 c0       	rjmp	.+68     	; 0x7a64 <mod_pump+0x698>
    7a20:	1c 82       	std	Y+4, r1	; 0x04
    7a22:	ce 01       	movw	r24, r28
    7a24:	c9 db       	rcall	.-2158   	; 0x71b8 <Comp_Stop>
    7a26:	ce 01       	movw	r24, r28
    7a28:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
    7a2c:	1b c0       	rjmp	.+54     	; 0x7a64 <mod_pump+0x698>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7a2e:	b6 01       	movw	r22, r12
    7a30:	dd 0c       	add	r13, r13
    7a32:	88 0b       	sbc	r24, r24
    7a34:	99 0b       	sbc	r25, r25
    7a36:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7a3a:	a3 01       	movw	r20, r6
    7a3c:	92 01       	movw	r18, r4
    7a3e:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    7a42:	88 23       	and	r24, r24
    7a44:	7c f4       	brge	.+30     	; 0x7a64 <mod_pump+0x698>
    7a46:	8c 81       	ldd	r24, Y+4	; 0x04
    7a48:	81 11       	cpse	r24, r1
    7a4a:	0c c0       	rjmp	.+24     	; 0x7a64 <mod_pump+0x698>
    7a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    7a4e:	88 23       	and	r24, r24
    7a50:	49 f0       	breq	.+18     	; 0x7a64 <mod_pump+0x698>
    7a52:	88 81       	ld	r24, Y
    7a54:	81 11       	cpse	r24, r1
    7a56:	06 c0       	rjmp	.+12     	; 0x7a64 <mod_pump+0x698>
    7a58:	1b 82       	std	Y+3, r1	; 0x03
    7a5a:	ce 01       	movw	r24, r28
    7a5c:	ad db       	rcall	.-2214   	; 0x71b8 <Comp_Stop>
    7a5e:	ce 01       	movw	r24, r28
    7a60:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
				if(EEpromData.NombComp==2) if (comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && comp->Cooling && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}	
    7a64:	80 91 18 09 	lds	r24, 0x0918	; 0x800918 <EEpromData+0x20>
    7a68:	82 30       	cpi	r24, 0x02	; 2
    7a6a:	09 f0       	breq	.+2      	; 0x7a6e <mod_pump+0x6a2>
    7a6c:	ea c1       	rjmp	.+980    	; 0x7e42 <mod_pump+0xa76>
    7a6e:	f1 01       	movw	r30, r2
    7a70:	63 8d       	ldd	r22, Z+27	; 0x1b
    7a72:	70 e0       	ldi	r23, 0x00	; 0
    7a74:	86 8d       	ldd	r24, Z+30	; 0x1e
    7a76:	68 1b       	sub	r22, r24
    7a78:	71 09       	sbc	r23, r1
    7a7a:	07 2e       	mov	r0, r23
    7a7c:	00 0c       	add	r0, r0
    7a7e:	88 0b       	sbc	r24, r24
    7a80:	99 0b       	sbc	r25, r25
    7a82:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7a86:	9b 01       	movw	r18, r22
    7a88:	ac 01       	movw	r20, r24
    7a8a:	6a 89       	ldd	r22, Y+18	; 0x12
    7a8c:	7b 89       	ldd	r23, Y+19	; 0x13
    7a8e:	8c 89       	ldd	r24, Y+20	; 0x14
    7a90:	9d 89       	ldd	r25, Y+21	; 0x15
    7a92:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    7a96:	88 23       	and	r24, r24
    7a98:	0c f0       	brlt	.+2      	; 0x7a9c <mod_pump+0x6d0>
    7a9a:	d3 c1       	rjmp	.+934    	; 0x7e42 <mod_pump+0xa76>
    7a9c:	8c 81       	ldd	r24, Y+4	; 0x04
    7a9e:	81 11       	cpse	r24, r1
    7aa0:	d0 c1       	rjmp	.+928    	; 0x7e42 <mod_pump+0xa76>
    7aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    7aa4:	88 23       	and	r24, r24
    7aa6:	09 f4       	brne	.+2      	; 0x7aaa <mod_pump+0x6de>
    7aa8:	cc c1       	rjmp	.+920    	; 0x7e42 <mod_pump+0xa76>
    7aaa:	88 81       	ld	r24, Y
    7aac:	81 11       	cpse	r24, r1
    7aae:	c9 c1       	rjmp	.+914    	; 0x7e42 <mod_pump+0xa76>
    7ab0:	1b 82       	std	Y+3, r1	; 0x03
    7ab2:	ce 01       	movw	r24, r28
    7ab4:	81 db       	rcall	.-2302   	; 0x71b8 <Comp_Stop>
    7ab6:	ce 01       	movw	r24, r28
    7ab8:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
    7abc:	c2 c1       	rjmp	.+900    	; 0x7e42 <mod_pump+0xa76>
			}
			else if(comp->Index==2)
    7abe:	02 97       	sbiw	r24, 0x02	; 2
    7ac0:	09 f0       	breq	.+2      	; 0x7ac4 <mod_pump+0x6f8>
    7ac2:	bf c1       	rjmp	.+894    	; 0x7e42 <mod_pump+0xa76>
			{
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
    7ac4:	8e 88       	ldd	r8, Y+22	; 0x16
    7ac6:	9f 88       	ldd	r9, Y+23	; 0x17
    7ac8:	a8 8c       	ldd	r10, Y+24	; 0x18
    7aca:	b9 8c       	ldd	r11, Y+25	; 0x19
    7acc:	f1 01       	movw	r30, r2
    7ace:	e2 8c       	ldd	r14, Z+26	; 0x1a
    7ad0:	f1 2c       	mov	r15, r1
    7ad2:	b7 01       	movw	r22, r14
    7ad4:	0f 2c       	mov	r0, r15
    7ad6:	00 0c       	add	r0, r0
    7ad8:	88 0b       	sbc	r24, r24
    7ada:	99 0b       	sbc	r25, r25
    7adc:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7ae0:	9b 01       	movw	r18, r22
    7ae2:	ac 01       	movw	r20, r24
    7ae4:	c5 01       	movw	r24, r10
    7ae6:	b4 01       	movw	r22, r8
    7ae8:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    7aec:	88 23       	and	r24, r24
    7aee:	6c f4       	brge	.+26     	; 0x7b0a <mod_pump+0x73e>
    7af0:	8b 81       	ldd	r24, Y+3	; 0x03
    7af2:	88 23       	and	r24, r24
    7af4:	09 f4       	brne	.+2      	; 0x7af8 <mod_pump+0x72c>
    7af6:	f8 c0       	rjmp	.+496    	; 0x7ce8 <mod_pump+0x91c>
    7af8:	88 81       	ld	r24, Y
    7afa:	81 11       	cpse	r24, r1
    7afc:	a2 c1       	rjmp	.+836    	; 0x7e42 <mod_pump+0xa76>
    7afe:	1b 82       	std	Y+3, r1	; 0x03
    7b00:	ce 01       	movw	r24, r28
    7b02:	5a db       	rcall	.-2380   	; 0x71b8 <Comp_Stop>
    7b04:	ce 01       	movw	r24, r28
    7b06:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
    7b0a:	f1 01       	movw	r30, r2
    7b0c:	82 8d       	ldd	r24, Z+26	; 0x1a
    7b0e:	65 8d       	ldd	r22, Z+29	; 0x1d
    7b10:	70 e0       	ldi	r23, 0x00	; 0
    7b12:	68 0f       	add	r22, r24
    7b14:	71 1d       	adc	r23, r1
    7b16:	07 2e       	mov	r0, r23
    7b18:	00 0c       	add	r0, r0
    7b1a:	88 0b       	sbc	r24, r24
    7b1c:	99 0b       	sbc	r25, r25
    7b1e:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7b22:	9b 01       	movw	r18, r22
    7b24:	ac 01       	movw	r20, r24
    7b26:	6e 89       	ldd	r22, Y+22	; 0x16
    7b28:	7f 89       	ldd	r23, Y+23	; 0x17
    7b2a:	88 8d       	ldd	r24, Y+24	; 0x18
    7b2c:	99 8d       	ldd	r25, Y+25	; 0x19
    7b2e:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    7b32:	18 16       	cp	r1, r24
    7b34:	0c f0       	brlt	.+2      	; 0x7b38 <mod_pump+0x76c>
    7b36:	85 c1       	rjmp	.+778    	; 0x7e42 <mod_pump+0xa76>
    7b38:	8b 81       	ldd	r24, Y+3	; 0x03
    7b3a:	81 11       	cpse	r24, r1
    7b3c:	82 c1       	rjmp	.+772    	; 0x7e42 <mod_pump+0xa76>
    7b3e:	88 81       	ld	r24, Y
    7b40:	81 11       	cpse	r24, r1
    7b42:	7f c1       	rjmp	.+766    	; 0x7e42 <mod_pump+0xa76>
    7b44:	ce 01       	movw	r24, r28
    7b46:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <calibration>
    7b4a:	81 e0       	ldi	r24, 0x01	; 1
    7b4c:	8b 83       	std	Y+3, r24	; 0x03
    7b4e:	ce 01       	movw	r24, r28
    7b50:	31 dc       	rcall	.-1950   	; 0x73b4 <goToMode>
    7b52:	89 ef       	ldi	r24, 0xF9	; 249
    7b54:	95 e0       	ldi	r25, 0x05	; 5
    7b56:	9f 93       	push	r25
    7b58:	8f 93       	push	r24
    7b5a:	86 e9       	ldi	r24, 0x96	; 150
    7b5c:	97 e0       	ldi	r25, 0x07	; 7
    7b5e:	9f 93       	push	r25
    7b60:	8f 93       	push	r24
    7b62:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7b66:	0f 90       	pop	r0
    7b68:	0f 90       	pop	r0
    7b6a:	0f 90       	pop	r0
    7b6c:	0f 90       	pop	r0
			}
		}break;
	}
}
    7b6e:	69 c1       	rjmp	.+722    	; 0x7e42 <mod_pump+0xa76>

	switch(temp){
		case DHW: {
		if(comp->Index==1){
			if ( comp->Dhw_Temp > eeData->Set_DHW && comp->heatingWater && !comp->switchToMode) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp);}
			if ( comp->Dhw_Temp < (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->switchToMode){calibration(comp);Comp_1.error=0; comp->heatingWater=true; goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_Dhw\r\n");}//Start_Dhw();
    7b70:	f1 01       	movw	r30, r2
    7b72:	86 8d       	ldd	r24, Z+30	; 0x1e
    7b74:	b7 01       	movw	r22, r14
    7b76:	68 1b       	sub	r22, r24
    7b78:	71 09       	sbc	r23, r1
    7b7a:	07 2e       	mov	r0, r23
    7b7c:	00 0c       	add	r0, r0
    7b7e:	88 0b       	sbc	r24, r24
    7b80:	99 0b       	sbc	r25, r25
    7b82:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7b86:	9b 01       	movw	r18, r22
    7b88:	ac 01       	movw	r20, r24
    7b8a:	c5 01       	movw	r24, r10
    7b8c:	b4 01       	movw	r22, r8
    7b8e:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    7b92:	88 23       	and	r24, r24
    7b94:	0c f4       	brge	.+2      	; 0x7b98 <mod_pump+0x7cc>
    7b96:	8d cc       	rjmp	.-1766   	; 0x74b2 <mod_pump+0xe6>
    7b98:	54 c1       	rjmp	.+680    	; 0x7e42 <mod_pump+0xa76>
		case HEAT:{
			//xSerialxPrintf(&xSerial3Port,"Set_Heating =%d\r\n,diffHEAT =%d\r\n,Bac_Temp =%f\r\n",eeData->Set_Heating,eeData->diffHEAT,data->Bac_Temp);
			//xSerialxPrintf(&xSerial3Port,"diffHEAT =%d\r\n",eeData->diffHEAT);
			//xSerialxPrintf(&xSerial3Port,"heat mode\r\n");
			if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {comp->Heating=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat\r\n");}
			if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    7b9a:	b7 01       	movw	r22, r14
    7b9c:	ff 0c       	add	r15, r15
    7b9e:	88 0b       	sbc	r24, r24
    7ba0:	99 0b       	sbc	r25, r25
    7ba2:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7ba6:	9b 01       	movw	r18, r22
    7ba8:	ac 01       	movw	r20, r24
    7baa:	c5 01       	movw	r24, r10
    7bac:	b4 01       	movw	r22, r8
    7bae:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    7bb2:	18 16       	cp	r1, r24
    7bb4:	0c f4       	brge	.+2      	; 0x7bb8 <mod_pump+0x7ec>
    7bb6:	e8 cc       	rjmp	.-1584   	; 0x7588 <mod_pump+0x1bc>
    7bb8:	44 c1       	rjmp	.+648    	; 0x7e42 <mod_pump+0xa76>
		} break;
		
		case COOL:{
			//xSerialxPrintf(&xSerial3Port,"COOL mode\r\n");
			if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
			if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {comp->Cooling=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool\r\n");}//
    7bba:	f1 01       	movw	r30, r2
    7bbc:	85 8d       	ldd	r24, Z+29	; 0x1d
    7bbe:	b7 01       	movw	r22, r14
    7bc0:	68 0f       	add	r22, r24
    7bc2:	71 1d       	adc	r23, r1
    7bc4:	07 2e       	mov	r0, r23
    7bc6:	00 0c       	add	r0, r0
    7bc8:	88 0b       	sbc	r24, r24
    7bca:	99 0b       	sbc	r25, r25
    7bcc:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7bd0:	9b 01       	movw	r18, r22
    7bd2:	ac 01       	movw	r20, r24
    7bd4:	c5 01       	movw	r24, r10
    7bd6:	b4 01       	movw	r22, r8
    7bd8:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    7bdc:	18 16       	cp	r1, r24
    7bde:	0c f4       	brge	.+2      	; 0x7be2 <mod_pump+0x816>
    7be0:	1a cd       	rjmp	.-1484   	; 0x7616 <mod_pump+0x24a>
    7be2:	2f c1       	rjmp	.+606    	; 0x7e42 <mod_pump+0xa76>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    7be4:	4e 88       	ldd	r4, Y+22	; 0x16
    7be6:	5f 88       	ldd	r5, Y+23	; 0x17
    7be8:	68 8c       	ldd	r6, Y+24	; 0x18
    7bea:	79 8c       	ldd	r7, Y+25	; 0x19
    7bec:	f1 01       	movw	r30, r2
    7bee:	c1 8c       	ldd	r12, Z+25	; 0x19
    7bf0:	d1 2c       	mov	r13, r1
    7bf2:	84 8d       	ldd	r24, Z+28	; 0x1c
    7bf4:	b6 01       	movw	r22, r12
    7bf6:	68 1b       	sub	r22, r24
    7bf8:	71 09       	sbc	r23, r1
    7bfa:	07 2e       	mov	r0, r23
    7bfc:	00 0c       	add	r0, r0
    7bfe:	88 0b       	sbc	r24, r24
    7c00:	99 0b       	sbc	r25, r25
    7c02:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7c06:	9b 01       	movw	r18, r22
    7c08:	ac 01       	movw	r20, r24
    7c0a:	c3 01       	movw	r24, r6
    7c0c:	b2 01       	movw	r22, r4
    7c0e:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    7c12:	88 23       	and	r24, r24
    7c14:	0c f4       	brge	.+2      	; 0x7c18 <mod_pump+0x84c>
    7c16:	7d cd       	rjmp	.-1286   	; 0x7712 <mod_pump+0x346>
    7c18:	97 c0       	rjmp	.+302    	; 0x7d48 <mod_pump+0x97c>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7c1a:	b7 01       	movw	r22, r14
    7c1c:	ff 0c       	add	r15, r15
    7c1e:	88 0b       	sbc	r24, r24
    7c20:	99 0b       	sbc	r25, r25
    7c22:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7c26:	9b 01       	movw	r18, r22
    7c28:	ac 01       	movw	r20, r24
    7c2a:	c5 01       	movw	r24, r10
    7c2c:	b4 01       	movw	r22, r8
    7c2e:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    7c32:	18 16       	cp	r1, r24
    7c34:	0c f4       	brge	.+2      	; 0x7c38 <mod_pump+0x86c>
    7c36:	9f cd       	rjmp	.-1218   	; 0x7776 <mod_pump+0x3aa>
    7c38:	97 c0       	rjmp	.+302    	; 0x7d68 <mod_pump+0x99c>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7c3a:	b6 01       	movw	r22, r12
    7c3c:	dd 0c       	add	r13, r13
    7c3e:	88 0b       	sbc	r24, r24
    7c40:	99 0b       	sbc	r25, r25
    7c42:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7c46:	a3 01       	movw	r20, r6
    7c48:	92 01       	movw	r18, r4
    7c4a:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    7c4e:	88 23       	and	r24, r24
    7c50:	0c f4       	brge	.+2      	; 0x7c54 <mod_pump+0x888>
    7c52:	ad cd       	rjmp	.-1190   	; 0x77ae <mod_pump+0x3e2>
    7c54:	b8 cd       	rjmp	.-1168   	; 0x77c6 <mod_pump+0x3fa>
				if(EEpromData.NombComp==2) if(comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW)&& !comp->heatingWater && comp->Heating && !comp->switchToMode){comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_again\r\n");}	
			}
			else if(comp->Index==2)
			{
				if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {calibration(comp);comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_2\r\n");}
				if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    7c56:	b7 01       	movw	r22, r14
    7c58:	ff 0c       	add	r15, r15
    7c5a:	88 0b       	sbc	r24, r24
    7c5c:	99 0b       	sbc	r25, r25
    7c5e:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7c62:	9b 01       	movw	r18, r22
    7c64:	ac 01       	movw	r20, r24
    7c66:	c5 01       	movw	r24, r10
    7c68:	b4 01       	movw	r22, r8
    7c6a:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    7c6e:	18 16       	cp	r1, r24
    7c70:	0c f4       	brge	.+2      	; 0x7c74 <mod_pump+0x8a8>
    7c72:	31 ce       	rjmp	.-926    	; 0x78d6 <mod_pump+0x50a>
    7c74:	e6 c0       	rjmp	.+460    	; 0x7e42 <mod_pump+0xa76>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7c76:	4e 88       	ldd	r4, Y+22	; 0x16
    7c78:	5f 88       	ldd	r5, Y+23	; 0x17
    7c7a:	68 8c       	ldd	r6, Y+24	; 0x18
    7c7c:	79 8c       	ldd	r7, Y+25	; 0x19
    7c7e:	f1 01       	movw	r30, r2
    7c80:	c1 8c       	ldd	r12, Z+25	; 0x19
    7c82:	d1 2c       	mov	r13, r1
    7c84:	84 8d       	ldd	r24, Z+28	; 0x1c
    7c86:	b6 01       	movw	r22, r12
    7c88:	68 1b       	sub	r22, r24
    7c8a:	71 09       	sbc	r23, r1
    7c8c:	07 2e       	mov	r0, r23
    7c8e:	00 0c       	add	r0, r0
    7c90:	88 0b       	sbc	r24, r24
    7c92:	99 0b       	sbc	r25, r25
    7c94:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7c98:	9b 01       	movw	r18, r22
    7c9a:	ac 01       	movw	r20, r24
    7c9c:	c3 01       	movw	r24, r6
    7c9e:	b2 01       	movw	r22, r4
    7ca0:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    7ca4:	88 23       	and	r24, r24
    7ca6:	0c f4       	brge	.+2      	; 0x7caa <mod_pump+0x8de>
    7ca8:	83 ce       	rjmp	.-762    	; 0x79b0 <mod_pump+0x5e4>
    7caa:	7e c0       	rjmp	.+252    	; 0x7da8 <mod_pump+0x9dc>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7cac:	b7 01       	movw	r22, r14
    7cae:	ff 0c       	add	r15, r15
    7cb0:	88 0b       	sbc	r24, r24
    7cb2:	99 0b       	sbc	r25, r25
    7cb4:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7cb8:	9b 01       	movw	r18, r22
    7cba:	ac 01       	movw	r20, r24
    7cbc:	c5 01       	movw	r24, r10
    7cbe:	b4 01       	movw	r22, r8
    7cc0:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    7cc4:	18 16       	cp	r1, r24
    7cc6:	0c f4       	brge	.+2      	; 0x7cca <mod_pump+0x8fe>
    7cc8:	a5 ce       	rjmp	.-694    	; 0x7a14 <mod_pump+0x648>
    7cca:	7e c0       	rjmp	.+252    	; 0x7dc8 <mod_pump+0x9fc>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7ccc:	b6 01       	movw	r22, r12
    7cce:	dd 0c       	add	r13, r13
    7cd0:	88 0b       	sbc	r24, r24
    7cd2:	99 0b       	sbc	r25, r25
    7cd4:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7cd8:	a3 01       	movw	r20, r6
    7cda:	92 01       	movw	r18, r4
    7cdc:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    7ce0:	88 23       	and	r24, r24
    7ce2:	0c f4       	brge	.+2      	; 0x7ce6 <mod_pump+0x91a>
    7ce4:	b3 ce       	rjmp	.-666    	; 0x7a4c <mod_pump+0x680>
    7ce6:	be ce       	rjmp	.-644    	; 0x7a64 <mod_pump+0x698>
				if(EEpromData.NombComp==2) if (comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && comp->Cooling && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}	
			}
			else if(comp->Index==2)
			{
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
    7ce8:	f1 01       	movw	r30, r2
    7cea:	85 8d       	ldd	r24, Z+29	; 0x1d
    7cec:	b7 01       	movw	r22, r14
    7cee:	68 0f       	add	r22, r24
    7cf0:	71 1d       	adc	r23, r1
    7cf2:	07 2e       	mov	r0, r23
    7cf4:	00 0c       	add	r0, r0
    7cf6:	88 0b       	sbc	r24, r24
    7cf8:	99 0b       	sbc	r25, r25
    7cfa:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7cfe:	9b 01       	movw	r18, r22
    7d00:	ac 01       	movw	r20, r24
    7d02:	c5 01       	movw	r24, r10
    7d04:	b4 01       	movw	r22, r8
    7d06:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    7d0a:	18 16       	cp	r1, r24
    7d0c:	0c f4       	brge	.+2      	; 0x7d10 <mod_pump+0x944>
    7d0e:	17 cf       	rjmp	.-466    	; 0x7b3e <mod_pump+0x772>
    7d10:	98 c0       	rjmp	.+304    	; 0x7e42 <mod_pump+0xa76>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    7d12:	4e 88       	ldd	r4, Y+22	; 0x16
    7d14:	5f 88       	ldd	r5, Y+23	; 0x17
    7d16:	68 8c       	ldd	r6, Y+24	; 0x18
    7d18:	79 8c       	ldd	r7, Y+25	; 0x19
    7d1a:	f1 01       	movw	r30, r2
    7d1c:	c1 8c       	ldd	r12, Z+25	; 0x19
    7d1e:	d1 2c       	mov	r13, r1
    7d20:	84 8d       	ldd	r24, Z+28	; 0x1c
    7d22:	b6 01       	movw	r22, r12
    7d24:	68 1b       	sub	r22, r24
    7d26:	71 09       	sbc	r23, r1
    7d28:	07 2e       	mov	r0, r23
    7d2a:	00 0c       	add	r0, r0
    7d2c:	88 0b       	sbc	r24, r24
    7d2e:	99 0b       	sbc	r25, r25
    7d30:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7d34:	9b 01       	movw	r18, r22
    7d36:	ac 01       	movw	r20, r24
    7d38:	c3 01       	movw	r24, r6
    7d3a:	b2 01       	movw	r22, r4
    7d3c:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    7d40:	88 23       	and	r24, r24
    7d42:	0c f4       	brge	.+2      	; 0x7d46 <mod_pump+0x97a>
    7d44:	6a cf       	rjmp	.-300    	; 0x7c1a <mod_pump+0x84e>
    7d46:	05 cd       	rjmp	.-1526   	; 0x7752 <mod_pump+0x386>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7d48:	b7 01       	movw	r22, r14
    7d4a:	ff 0c       	add	r15, r15
    7d4c:	88 0b       	sbc	r24, r24
    7d4e:	99 0b       	sbc	r25, r25
    7d50:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7d54:	9b 01       	movw	r18, r22
    7d56:	ac 01       	movw	r20, r24
    7d58:	c5 01       	movw	r24, r10
    7d5a:	b4 01       	movw	r22, r8
    7d5c:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    7d60:	18 16       	cp	r1, r24
    7d62:	0c f4       	brge	.+2      	; 0x7d66 <mod_pump+0x99a>
    7d64:	6a cf       	rjmp	.-300    	; 0x7c3a <mod_pump+0x86e>
    7d66:	14 cd       	rjmp	.-1496   	; 0x7790 <mod_pump+0x3c4>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7d68:	b6 01       	movw	r22, r12
    7d6a:	dd 0c       	add	r13, r13
    7d6c:	88 0b       	sbc	r24, r24
    7d6e:	99 0b       	sbc	r25, r25
    7d70:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7d74:	28 cd       	rjmp	.-1456   	; 0x77c6 <mod_pump+0x3fa>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7d76:	4e 88       	ldd	r4, Y+22	; 0x16
    7d78:	5f 88       	ldd	r5, Y+23	; 0x17
    7d7a:	68 8c       	ldd	r6, Y+24	; 0x18
    7d7c:	79 8c       	ldd	r7, Y+25	; 0x19
    7d7e:	f1 01       	movw	r30, r2
    7d80:	c1 8c       	ldd	r12, Z+25	; 0x19
    7d82:	d1 2c       	mov	r13, r1
    7d84:	84 8d       	ldd	r24, Z+28	; 0x1c
    7d86:	b6 01       	movw	r22, r12
    7d88:	68 1b       	sub	r22, r24
    7d8a:	71 09       	sbc	r23, r1
    7d8c:	07 2e       	mov	r0, r23
    7d8e:	00 0c       	add	r0, r0
    7d90:	88 0b       	sbc	r24, r24
    7d92:	99 0b       	sbc	r25, r25
    7d94:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7d98:	a3 01       	movw	r20, r6
    7d9a:	92 01       	movw	r18, r4
    7d9c:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    7da0:	18 16       	cp	r1, r24
    7da2:	0c f4       	brge	.+2      	; 0x7da6 <mod_pump+0x9da>
    7da4:	83 cf       	rjmp	.-250    	; 0x7cac <mod_pump+0x8e0>
    7da6:	24 ce       	rjmp	.-952    	; 0x79f0 <mod_pump+0x624>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7da8:	b7 01       	movw	r22, r14
    7daa:	ff 0c       	add	r15, r15
    7dac:	88 0b       	sbc	r24, r24
    7dae:	99 0b       	sbc	r25, r25
    7db0:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7db4:	9b 01       	movw	r18, r22
    7db6:	ac 01       	movw	r20, r24
    7db8:	c5 01       	movw	r24, r10
    7dba:	b4 01       	movw	r22, r8
    7dbc:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    7dc0:	18 16       	cp	r1, r24
    7dc2:	0c f4       	brge	.+2      	; 0x7dc6 <mod_pump+0x9fa>
    7dc4:	83 cf       	rjmp	.-250    	; 0x7ccc <mod_pump+0x900>
    7dc6:	33 ce       	rjmp	.-922    	; 0x7a2e <mod_pump+0x662>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7dc8:	b6 01       	movw	r22, r12
    7dca:	dd 0c       	add	r13, r13
    7dcc:	88 0b       	sbc	r24, r24
    7dce:	99 0b       	sbc	r25, r25
    7dd0:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7dd4:	47 ce       	rjmp	.-882    	; 0x7a64 <mod_pump+0x698>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    7dd6:	4e 88       	ldd	r4, Y+22	; 0x16
    7dd8:	5f 88       	ldd	r5, Y+23	; 0x17
    7dda:	68 8c       	ldd	r6, Y+24	; 0x18
    7ddc:	79 8c       	ldd	r7, Y+25	; 0x19
    7dde:	f1 01       	movw	r30, r2
    7de0:	c1 8c       	ldd	r12, Z+25	; 0x19
    7de2:	d1 2c       	mov	r13, r1
    7de4:	84 8d       	ldd	r24, Z+28	; 0x1c
    7de6:	b6 01       	movw	r22, r12
    7de8:	68 1b       	sub	r22, r24
    7dea:	71 09       	sbc	r23, r1
    7dec:	07 2e       	mov	r0, r23
    7dee:	00 0c       	add	r0, r0
    7df0:	88 0b       	sbc	r24, r24
    7df2:	99 0b       	sbc	r25, r25
    7df4:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7df8:	9b 01       	movw	r18, r22
    7dfa:	ac 01       	movw	r20, r24
    7dfc:	c3 01       	movw	r24, r6
    7dfe:	b2 01       	movw	r22, r4
    7e00:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    7e04:	88 23       	and	r24, r24
    7e06:	0c f4       	brge	.+2      	; 0x7e0a <mod_pump+0xa3e>
    7e08:	87 cc       	rjmp	.-1778   	; 0x7718 <mod_pump+0x34c>
    7e0a:	9e cf       	rjmp	.-196    	; 0x7d48 <mod_pump+0x97c>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7e0c:	4e 88       	ldd	r4, Y+22	; 0x16
    7e0e:	5f 88       	ldd	r5, Y+23	; 0x17
    7e10:	68 8c       	ldd	r6, Y+24	; 0x18
    7e12:	79 8c       	ldd	r7, Y+25	; 0x19
    7e14:	f1 01       	movw	r30, r2
    7e16:	c1 8c       	ldd	r12, Z+25	; 0x19
    7e18:	d1 2c       	mov	r13, r1
    7e1a:	84 8d       	ldd	r24, Z+28	; 0x1c
    7e1c:	b6 01       	movw	r22, r12
    7e1e:	68 1b       	sub	r22, r24
    7e20:	71 09       	sbc	r23, r1
    7e22:	07 2e       	mov	r0, r23
    7e24:	00 0c       	add	r0, r0
    7e26:	88 0b       	sbc	r24, r24
    7e28:	99 0b       	sbc	r25, r25
    7e2a:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7e2e:	9b 01       	movw	r18, r22
    7e30:	ac 01       	movw	r20, r24
    7e32:	c3 01       	movw	r24, r6
    7e34:	b2 01       	movw	r22, r4
    7e36:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    7e3a:	88 23       	and	r24, r24
    7e3c:	0c f4       	brge	.+2      	; 0x7e40 <mod_pump+0xa74>
    7e3e:	bb cd       	rjmp	.-1162   	; 0x79b6 <mod_pump+0x5ea>
    7e40:	b3 cf       	rjmp	.-154    	; 0x7da8 <mod_pump+0x9dc>
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
			}
		}break;
	}
}
    7e42:	df 91       	pop	r29
    7e44:	cf 91       	pop	r28
    7e46:	1f 91       	pop	r17
    7e48:	ff 90       	pop	r15
    7e4a:	ef 90       	pop	r14
    7e4c:	df 90       	pop	r13
    7e4e:	cf 90       	pop	r12
    7e50:	bf 90       	pop	r11
    7e52:	af 90       	pop	r10
    7e54:	9f 90       	pop	r9
    7e56:	8f 90       	pop	r8
    7e58:	7f 90       	pop	r7
    7e5a:	6f 90       	pop	r6
    7e5c:	5f 90       	pop	r5
    7e5e:	4f 90       	pop	r4
    7e60:	3f 90       	pop	r3
    7e62:	2f 90       	pop	r2
    7e64:	08 95       	ret

00007e66 <initPins>:
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void initPins()
{

	DDRG |= (_BV(PG4) | _BV(PG3));
    7e66:	83 b3       	in	r24, 0x13	; 19
    7e68:	88 61       	ori	r24, 0x18	; 24
    7e6a:	83 bb       	out	0x13, r24	; 19
	DDRH |= (_BV(PH7) | _BV(PH6) | _BV(PH5) | _BV(PH4) | _BV(PH3) | _BV(PH1) | _BV(PH2));
    7e6c:	e1 e0       	ldi	r30, 0x01	; 1
    7e6e:	f1 e0       	ldi	r31, 0x01	; 1
    7e70:	80 81       	ld	r24, Z
    7e72:	8e 6f       	ori	r24, 0xFE	; 254
    7e74:	80 83       	st	Z, r24
	DDRL |= (_BV(PL2) | _BV(PL1) | _BV(PL0));
    7e76:	ea e0       	ldi	r30, 0x0A	; 10
    7e78:	f1 e0       	ldi	r31, 0x01	; 1
    7e7a:	80 81       	ld	r24, Z
    7e7c:	87 60       	ori	r24, 0x07	; 7
    7e7e:	80 83       	st	Z, r24
	DDRD &= (_BV(PD2) | _BV(PD3));
    7e80:	8a b1       	in	r24, 0x0a	; 10
    7e82:	8c 70       	andi	r24, 0x0C	; 12
    7e84:	8a b9       	out	0x0a, r24	; 10
	DDRE &= (_BV(PE5));
    7e86:	8d b1       	in	r24, 0x0d	; 13
    7e88:	80 72       	andi	r24, 0x20	; 32
    7e8a:	8d b9       	out	0x0d, r24	; 13
	DDRA = 0xFF;
    7e8c:	8f ef       	ldi	r24, 0xFF	; 255
    7e8e:	81 b9       	out	0x01, r24	; 1
	PORTD|= (_BV(PD2) | _BV(PD3));
    7e90:	8b b1       	in	r24, 0x0b	; 11
    7e92:	8c 60       	ori	r24, 0x0C	; 12
    7e94:	8b b9       	out	0x0b, r24	; 11
	PORTE|= (_BV(PE5));
    7e96:	75 9a       	sbi	0x0e, 5	; 14
	
    DDRJ|= (_BV(PIN_rs485));
    7e98:	e4 e0       	ldi	r30, 0x04	; 4
    7e9a:	f1 e0       	ldi	r31, 0x01	; 1
    7e9c:	80 81       	ld	r24, Z
    7e9e:	84 60       	ori	r24, 0x04	; 4
    7ea0:	80 83       	st	Z, r24
    7ea2:	08 95       	ret

00007ea4 <ConvertToTemp>:
	return (ADC_value - Low_Limit_HP) * HP_max/ (Hi_Limit_HP - Low_Limit_HP);
}

float ConvertToLowPress(uint16_t ADC_value){
	return (ADC_value - Low_Limit_LP) * LP_max/ (Hi_Limit_LP - Low_Limit_LP) ;
}
    7ea4:	8f 92       	push	r8
    7ea6:	9f 92       	push	r9
    7ea8:	af 92       	push	r10
    7eaa:	bf 92       	push	r11
    7eac:	cf 92       	push	r12
    7eae:	df 92       	push	r13
    7eb0:	ef 92       	push	r14
    7eb2:	ff 92       	push	r15
    7eb4:	bc 01       	movw	r22, r24
    7eb6:	80 e0       	ldi	r24, 0x00	; 0
    7eb8:	90 e0       	ldi	r25, 0x00	; 0
    7eba:	0e 94 7a 54 	call	0xa8f4	; 0xa8f4 <__floatunsisf>
    7ebe:	9b 01       	movw	r18, r22
    7ec0:	ac 01       	movw	r20, r24
    7ec2:	60 e0       	ldi	r22, 0x00	; 0
    7ec4:	70 ec       	ldi	r23, 0xC0	; 192
    7ec6:	8f e7       	ldi	r24, 0x7F	; 127
    7ec8:	94 e4       	ldi	r25, 0x44	; 68
    7eca:	0e 94 e1 53 	call	0xa7c2	; 0xa7c2 <__divsf3>
    7ece:	20 e0       	ldi	r18, 0x00	; 0
    7ed0:	30 e0       	ldi	r19, 0x00	; 0
    7ed2:	40 e8       	ldi	r20, 0x80	; 128
    7ed4:	5f e3       	ldi	r21, 0x3F	; 63
    7ed6:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    7eda:	20 e0       	ldi	r18, 0x00	; 0
    7edc:	30 e4       	ldi	r19, 0x40	; 64
    7ede:	4c e1       	ldi	r20, 0x1C	; 28
    7ee0:	56 e4       	ldi	r21, 0x46	; 70
    7ee2:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    7ee6:	0e 94 35 55 	call	0xaa6a	; 0xaa6a <log>
    7eea:	6b 01       	movw	r12, r22
    7eec:	7c 01       	movw	r14, r24
    7eee:	29 e5       	ldi	r18, 0x59	; 89
    7ef0:	37 e4       	ldi	r19, 0x47	; 71
    7ef2:	4c eb       	ldi	r20, 0xBC	; 188
    7ef4:	53 e3       	ldi	r21, 0x33	; 51
    7ef6:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    7efa:	a7 01       	movw	r20, r14
    7efc:	96 01       	movw	r18, r12
    7efe:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    7f02:	a7 01       	movw	r20, r14
    7f04:	96 01       	movw	r18, r12
    7f06:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    7f0a:	4b 01       	movw	r8, r22
    7f0c:	5c 01       	movw	r10, r24
    7f0e:	2b e0       	ldi	r18, 0x0B	; 11
    7f10:	31 ee       	ldi	r19, 0xE1	; 225
    7f12:	45 e7       	ldi	r20, 0x75	; 117
    7f14:	59 e3       	ldi	r21, 0x39	; 57
    7f16:	c7 01       	movw	r24, r14
    7f18:	b6 01       	movw	r22, r12
    7f1a:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    7f1e:	29 ed       	ldi	r18, 0xD9	; 217
    7f20:	3d ea       	ldi	r19, 0xAD	; 173
    7f22:	49 ea       	ldi	r20, 0xA9	; 169
    7f24:	5a e3       	ldi	r21, 0x3A	; 58
    7f26:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    7f2a:	9b 01       	movw	r18, r22
    7f2c:	ac 01       	movw	r20, r24
    7f2e:	c5 01       	movw	r24, r10
    7f30:	b4 01       	movw	r22, r8
    7f32:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    7f36:	9b 01       	movw	r18, r22
    7f38:	ac 01       	movw	r20, r24
    7f3a:	60 e0       	ldi	r22, 0x00	; 0
    7f3c:	70 e0       	ldi	r23, 0x00	; 0
    7f3e:	80 e8       	ldi	r24, 0x80	; 128
    7f40:	9f e3       	ldi	r25, 0x3F	; 63
    7f42:	0e 94 e1 53 	call	0xa7c2	; 0xa7c2 <__divsf3>
    7f46:	23 e3       	ldi	r18, 0x33	; 51
    7f48:	33 e9       	ldi	r19, 0x93	; 147
    7f4a:	48 e8       	ldi	r20, 0x88	; 136
    7f4c:	53 e4       	ldi	r21, 0x43	; 67
    7f4e:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    7f52:	ff 90       	pop	r15
    7f54:	ef 90       	pop	r14
    7f56:	df 90       	pop	r13
    7f58:	cf 90       	pop	r12
    7f5a:	bf 90       	pop	r11
    7f5c:	af 90       	pop	r10
    7f5e:	9f 90       	pop	r9
    7f60:	8f 90       	pop	r8
    7f62:	08 95       	ret

00007f64 <ReadSuperHeat>:
					}

return;	
}

float  ReadSuperHeat (xCompressor *comp){
    7f64:	4f 92       	push	r4
    7f66:	5f 92       	push	r5
    7f68:	6f 92       	push	r6
    7f6a:	7f 92       	push	r7
    7f6c:	8f 92       	push	r8
    7f6e:	9f 92       	push	r9
    7f70:	af 92       	push	r10
    7f72:	bf 92       	push	r11
    7f74:	cf 92       	push	r12
    7f76:	df 92       	push	r13
    7f78:	ef 92       	push	r14
    7f7a:	ff 92       	push	r15
    7f7c:	cf 93       	push	r28
    7f7e:	df 93       	push	r29
    7f80:	ec 01       	movw	r28, r24
	float Val, Next_val, Span, Saturation_Temp, decimals, work;
	int I;
	work = ((comp->Low_Press - 1.0) / 1.0);
    7f82:	20 e0       	ldi	r18, 0x00	; 0
    7f84:	30 e0       	ldi	r19, 0x00	; 0
    7f86:	40 e8       	ldi	r20, 0x80	; 128
    7f88:	5f e3       	ldi	r21, 0x3F	; 63
    7f8a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    7f8c:	7f 8d       	ldd	r23, Y+31	; 0x1f
    7f8e:	88 a1       	ldd	r24, Y+32	; 0x20
    7f90:	99 a1       	ldd	r25, Y+33	; 0x21
    7f92:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    7f96:	4b 01       	movw	r8, r22
    7f98:	5c 01       	movw	r10, r24
	I = work;                                //drop decimals to get array index
    7f9a:	0e 94 49 54 	call	0xa892	; 0xa892 <__fixsfsi>
	decimals = work - I; //restore decimals for interpolation between array points
	Val = pgm_read_float(&R22_Saturation_Temp[I]);           //get array value
    7f9e:	fb 01       	movw	r30, r22
    7fa0:	ee 0f       	add	r30, r30
    7fa2:	ff 1f       	adc	r31, r31
    7fa4:	ee 0f       	add	r30, r30
    7fa6:	ff 1f       	adc	r31, r31
    7fa8:	e0 51       	subi	r30, 0x10	; 16
    7faa:	f6 4f       	sbci	r31, 0xF6	; 246
    7fac:	c5 90       	lpm	r12, Z+
    7fae:	d5 90       	lpm	r13, Z+
    7fb0:	e5 90       	lpm	r14, Z+
    7fb2:	f4 90       	lpm	r15, Z
	Next_val = pgm_read_float(&R22_Saturation_Temp[I + 1]);  //get Next array value
    7fb4:	fb 01       	movw	r30, r22
    7fb6:	31 96       	adiw	r30, 0x01	; 1
    7fb8:	ee 0f       	add	r30, r30
    7fba:	ff 1f       	adc	r31, r31
    7fbc:	ee 0f       	add	r30, r30
    7fbe:	ff 1f       	adc	r31, r31
    7fc0:	e0 51       	subi	r30, 0x10	; 16
    7fc2:	f6 4f       	sbci	r31, 0xF6	; 246
    7fc4:	45 90       	lpm	r4, Z+
    7fc6:	55 90       	lpm	r5, Z+
    7fc8:	65 90       	lpm	r6, Z+
    7fca:	74 90       	lpm	r7, Z
	Span = Next_val - Val;                  //Calc Span
	Saturation_Temp = Val + (Span * decimals);//interpolate between array points
		
	return(comp->Suc_Comp - Saturation_Temp);// Suct_T - Saturation_Temp;
    7fcc:	ee 96       	adiw	r28, 0x3e	; 62
    7fce:	07 2e       	mov	r0, r23
    7fd0:	00 0c       	add	r0, r0
    7fd2:	88 0b       	sbc	r24, r24
    7fd4:	99 0b       	sbc	r25, r25
    7fd6:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    7fda:	9b 01       	movw	r18, r22
    7fdc:	ac 01       	movw	r20, r24
    7fde:	c5 01       	movw	r24, r10
    7fe0:	b4 01       	movw	r22, r8
    7fe2:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    7fe6:	4b 01       	movw	r8, r22
    7fe8:	5c 01       	movw	r10, r24
    7fea:	a7 01       	movw	r20, r14
    7fec:	96 01       	movw	r18, r12
    7fee:	c3 01       	movw	r24, r6
    7ff0:	b2 01       	movw	r22, r4
    7ff2:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    7ff6:	9b 01       	movw	r18, r22
    7ff8:	ac 01       	movw	r20, r24
    7ffa:	c5 01       	movw	r24, r10
    7ffc:	b4 01       	movw	r22, r8
    7ffe:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8002:	a7 01       	movw	r20, r14
    8004:	96 01       	movw	r18, r12
    8006:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    800a:	9b 01       	movw	r18, r22
    800c:	ac 01       	movw	r20, r24
    800e:	68 81       	ld	r22, Y
    8010:	79 81       	ldd	r23, Y+1	; 0x01
    8012:	8a 81       	ldd	r24, Y+2	; 0x02
    8014:	9b 81       	ldd	r25, Y+3	; 0x03
    8016:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>

}
    801a:	df 91       	pop	r29
    801c:	cf 91       	pop	r28
    801e:	ff 90       	pop	r15
    8020:	ef 90       	pop	r14
    8022:	df 90       	pop	r13
    8024:	cf 90       	pop	r12
    8026:	bf 90       	pop	r11
    8028:	af 90       	pop	r10
    802a:	9f 90       	pop	r9
    802c:	8f 90       	pop	r8
    802e:	7f 90       	pop	r7
    8030:	6f 90       	pop	r6
    8032:	5f 90       	pop	r5
    8034:	4f 90       	pop	r4
    8036:	08 95       	ret

00008038 <ReadSuperCool>:
float ReadSuperCool (xCompressor *comp){
    8038:	4f 92       	push	r4
    803a:	5f 92       	push	r5
    803c:	6f 92       	push	r6
    803e:	7f 92       	push	r7
    8040:	8f 92       	push	r8
    8042:	9f 92       	push	r9
    8044:	af 92       	push	r10
    8046:	bf 92       	push	r11
    8048:	cf 92       	push	r12
    804a:	df 92       	push	r13
    804c:	ef 92       	push	r14
    804e:	ff 92       	push	r15
    8050:	cf 93       	push	r28
    8052:	df 93       	push	r29
    8054:	ec 01       	movw	r28, r24
	float Val, Next_val, Span, Saturation_Temp, decimals, work;
	int I;
	work = ((comp->High_Press - 1.0) / 1.0);
    8056:	20 e0       	ldi	r18, 0x00	; 0
    8058:	30 e0       	ldi	r19, 0x00	; 0
    805a:	40 e8       	ldi	r20, 0x80	; 128
    805c:	5f e3       	ldi	r21, 0x3F	; 63
    805e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    8060:	7b 8d       	ldd	r23, Y+27	; 0x1b
    8062:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8064:	9d 8d       	ldd	r25, Y+29	; 0x1d
    8066:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    806a:	4b 01       	movw	r8, r22
    806c:	5c 01       	movw	r10, r24

	I = work;                                //drop decimals to get array index
    806e:	0e 94 49 54 	call	0xa892	; 0xa892 <__fixsfsi>

	decimals = work - I; //restore decimals for interpolation between array points
	Val = pgm_read_float(&R22_Saturation_Temp[I]);           //get array value
    8072:	fb 01       	movw	r30, r22
    8074:	ee 0f       	add	r30, r30
    8076:	ff 1f       	adc	r31, r31
    8078:	ee 0f       	add	r30, r30
    807a:	ff 1f       	adc	r31, r31
    807c:	e0 51       	subi	r30, 0x10	; 16
    807e:	f6 4f       	sbci	r31, 0xF6	; 246
    8080:	c5 90       	lpm	r12, Z+
    8082:	d5 90       	lpm	r13, Z+
    8084:	e5 90       	lpm	r14, Z+
    8086:	f4 90       	lpm	r15, Z
	Next_val = pgm_read_float(&R22_Saturation_Temp[I + 1]);  //get Next array value
    8088:	fb 01       	movw	r30, r22
    808a:	31 96       	adiw	r30, 0x01	; 1
    808c:	ee 0f       	add	r30, r30
    808e:	ff 1f       	adc	r31, r31
    8090:	ee 0f       	add	r30, r30
    8092:	ff 1f       	adc	r31, r31
    8094:	e0 51       	subi	r30, 0x10	; 16
    8096:	f6 4f       	sbci	r31, 0xF6	; 246
    8098:	45 90       	lpm	r4, Z+
    809a:	55 90       	lpm	r5, Z+
    809c:	65 90       	lpm	r6, Z+
    809e:	74 90       	lpm	r7, Z
	Span = Next_val - Val;                   //Calc Span
	Saturation_Temp = Val + (Span * decimals);//interpolate between array points
	
    return(Saturation_Temp - comp->Cond_Temp);// Suct_T - Saturation_Temp;	
    80a0:	07 2e       	mov	r0, r23
    80a2:	00 0c       	add	r0, r0
    80a4:	88 0b       	sbc	r24, r24
    80a6:	99 0b       	sbc	r25, r25
    80a8:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    80ac:	9b 01       	movw	r18, r22
    80ae:	ac 01       	movw	r20, r24
    80b0:	c5 01       	movw	r24, r10
    80b2:	b4 01       	movw	r22, r8
    80b4:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    80b8:	4b 01       	movw	r8, r22
    80ba:	5c 01       	movw	r10, r24
    80bc:	a7 01       	movw	r20, r14
    80be:	96 01       	movw	r18, r12
    80c0:	c3 01       	movw	r24, r6
    80c2:	b2 01       	movw	r22, r4
    80c4:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    80c8:	9b 01       	movw	r18, r22
    80ca:	ac 01       	movw	r20, r24
    80cc:	c5 01       	movw	r24, r10
    80ce:	b4 01       	movw	r22, r8
    80d0:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    80d4:	a7 01       	movw	r20, r14
    80d6:	96 01       	movw	r18, r12
    80d8:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    80dc:	ce 5b       	subi	r28, 0xBE	; 190
    80de:	df 4f       	sbci	r29, 0xFF	; 255
    80e0:	28 81       	ld	r18, Y
    80e2:	39 81       	ldd	r19, Y+1	; 0x01
    80e4:	4a 81       	ldd	r20, Y+2	; 0x02
    80e6:	5b 81       	ldd	r21, Y+3	; 0x03
    80e8:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
}
    80ec:	df 91       	pop	r29
    80ee:	cf 91       	pop	r28
    80f0:	ff 90       	pop	r15
    80f2:	ef 90       	pop	r14
    80f4:	df 90       	pop	r13
    80f6:	cf 90       	pop	r12
    80f8:	bf 90       	pop	r11
    80fa:	af 90       	pop	r10
    80fc:	9f 90       	pop	r9
    80fe:	8f 90       	pop	r8
    8100:	7f 90       	pop	r7
    8102:	6f 90       	pop	r6
    8104:	5f 90       	pop	r5
    8106:	4f 90       	pop	r4
    8108:	08 95       	ret

0000810a <corectTrv>:
//-------------------------------------------------------------
float  corectTrv(xCompressor *comp){
    810a:	4f 92       	push	r4
    810c:	5f 92       	push	r5
    810e:	6f 92       	push	r6
    8110:	7f 92       	push	r7
    8112:	8f 92       	push	r8
    8114:	9f 92       	push	r9
    8116:	af 92       	push	r10
    8118:	bf 92       	push	r11
    811a:	cf 92       	push	r12
    811c:	df 92       	push	r13
    811e:	ef 92       	push	r14
    8120:	ff 92       	push	r15
    8122:	cf 93       	push	r28
    8124:	df 93       	push	r29
	static float Superheat_old=0;
	int SSet;
	float ds;
	float Superheat;
	Superheat=comp->SuperHeat;
    8126:	8a 5b       	subi	r24, 0xBA	; 186
    8128:	9f 4f       	sbci	r25, 0xFF	; 255
    812a:	fc 01       	movw	r30, r24
    812c:	c0 80       	ld	r12, Z
    812e:	d1 80       	ldd	r13, Z+1	; 0x01
    8130:	e2 80       	ldd	r14, Z+2	; 0x02
    8132:	f3 80       	ldd	r15, Z+3	; 0x03
	ds = Superheat - Superheat_old; // calculate the change in Superheat
    8134:	20 91 41 07 	lds	r18, 0x0741	; 0x800741 <Superheat_old.3257>
    8138:	30 91 42 07 	lds	r19, 0x0742	; 0x800742 <Superheat_old.3257+0x1>
    813c:	40 91 43 07 	lds	r20, 0x0743	; 0x800743 <Superheat_old.3257+0x2>
    8140:	50 91 44 07 	lds	r21, 0x0744	; 0x800744 <Superheat_old.3257+0x3>
    8144:	c7 01       	movw	r24, r14
    8146:	b6 01       	movw	r22, r12
    8148:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
	ds = ds * 2; // scaling factor for DS
    814c:	9b 01       	movw	r18, r22
    814e:	ac 01       	movw	r20, r24
    8150:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8154:	4b 01       	movw	r8, r22
    8156:	5c 01       	movw	r10, r24
	SSet=7;

	// Variable sampling rate --------------------------------------------
	int  k = 1; // Gain for the steps

	if ( Superheat - SSet > 3)
    8158:	20 e0       	ldi	r18, 0x00	; 0
    815a:	30 e0       	ldi	r19, 0x00	; 0
    815c:	40 ee       	ldi	r20, 0xE0	; 224
    815e:	50 e4       	ldi	r21, 0x40	; 64
    8160:	c7 01       	movw	r24, r14
    8162:	b6 01       	movw	r22, r12
    8164:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    8168:	2b 01       	movw	r4, r22
    816a:	3c 01       	movw	r6, r24
    816c:	20 e0       	ldi	r18, 0x00	; 0
    816e:	30 e0       	ldi	r19, 0x00	; 0
    8170:	40 e4       	ldi	r20, 0x40	; 64
    8172:	50 e4       	ldi	r21, 0x40	; 64
    8174:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    8178:	18 16       	cp	r1, r24
    817a:	e4 f4       	brge	.+56     	; 0x81b4 <corectTrv+0xaa>
	{
		if (ds > 2 || ds < -2)
    817c:	20 e0       	ldi	r18, 0x00	; 0
    817e:	30 e0       	ldi	r19, 0x00	; 0
    8180:	40 e0       	ldi	r20, 0x00	; 0
    8182:	50 e4       	ldi	r21, 0x40	; 64
    8184:	c5 01       	movw	r24, r10
    8186:	b4 01       	movw	r22, r8
    8188:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    818c:	18 16       	cp	r1, r24
    818e:	ac f0       	brlt	.+42     	; 0x81ba <corectTrv+0xb0>
    8190:	20 e0       	ldi	r18, 0x00	; 0
    8192:	30 e0       	ldi	r19, 0x00	; 0
    8194:	40 e0       	ldi	r20, 0x00	; 0
    8196:	50 ec       	ldi	r21, 0xC0	; 192
    8198:	c5 01       	movw	r24, r10
    819a:	b4 01       	movw	r22, r8
    819c:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
	ds = Superheat - Superheat_old; // calculate the change in Superheat
	ds = ds * 2; // scaling factor for DS
	SSet=7;

	// Variable sampling rate --------------------------------------------
	int  k = 1; // Gain for the steps
    81a0:	68 2f       	mov	r22, r24
    81a2:	88 0f       	add	r24, r24
    81a4:	77 0b       	sbc	r23, r23
    81a6:	eb 01       	movw	r28, r22
    81a8:	cc 27       	eor	r28, r28
    81aa:	dd 0f       	add	r29, r29
    81ac:	cc 1f       	adc	r28, r28
    81ae:	dd 27       	eor	r29, r29
    81b0:	21 96       	adiw	r28, 0x01	; 1
    81b2:	05 c0       	rjmp	.+10     	; 0x81be <corectTrv+0xb4>
    81b4:	c1 e0       	ldi	r28, 0x01	; 1
    81b6:	d0 e0       	ldi	r29, 0x00	; 0
    81b8:	02 c0       	rjmp	.+4      	; 0x81be <corectTrv+0xb4>
	if ( Superheat - SSet > 3)
	{
		if (ds > 2 || ds < -2)

		{
			k = 2; // Gain for the steps
    81ba:	c2 e0       	ldi	r28, 0x02	; 2
    81bc:	d0 e0       	ldi	r29, 0x00	; 0
			
		}
	}

	if ( Superheat - SSet >= 5)
    81be:	20 e0       	ldi	r18, 0x00	; 0
    81c0:	30 e0       	ldi	r19, 0x00	; 0
    81c2:	40 ea       	ldi	r20, 0xA0	; 160
    81c4:	50 e4       	ldi	r21, 0x40	; 64
    81c6:	c3 01       	movw	r24, r6
    81c8:	b2 01       	movw	r22, r4
    81ca:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    81ce:	88 23       	and	r24, r24
    81d0:	cc f0       	brlt	.+50     	; 0x8204 <corectTrv+0xfa>
	{
		if (ds > 2 || ds < -2)
    81d2:	20 e0       	ldi	r18, 0x00	; 0
    81d4:	30 e0       	ldi	r19, 0x00	; 0
    81d6:	40 e0       	ldi	r20, 0x00	; 0
    81d8:	50 e4       	ldi	r21, 0x40	; 64
    81da:	c5 01       	movw	r24, r10
    81dc:	b4 01       	movw	r22, r8
    81de:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    81e2:	18 16       	cp	r1, r24
    81e4:	6c f0       	brlt	.+26     	; 0x8200 <corectTrv+0xf6>
    81e6:	20 e0       	ldi	r18, 0x00	; 0
    81e8:	30 e0       	ldi	r19, 0x00	; 0
    81ea:	40 e0       	ldi	r20, 0x00	; 0
    81ec:	50 ec       	ldi	r21, 0xC0	; 192
    81ee:	c5 01       	movw	r24, r10
    81f0:	b4 01       	movw	r22, r8
    81f2:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    81f6:	88 23       	and	r24, r24
    81f8:	2c f4       	brge	.+10     	; 0x8204 <corectTrv+0xfa>
		{
			k = 3; // Gain for the steps
    81fa:	c3 e0       	ldi	r28, 0x03	; 3
    81fc:	d0 e0       	ldi	r29, 0x00	; 0
    81fe:	02 c0       	rjmp	.+4      	; 0x8204 <corectTrv+0xfa>
    8200:	c3 e0       	ldi	r28, 0x03	; 3
    8202:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}

	//------------------------

	if (Superheat < SSet)
    8204:	20 e0       	ldi	r18, 0x00	; 0
    8206:	30 e0       	ldi	r19, 0x00	; 0
    8208:	40 ee       	ldi	r20, 0xE0	; 224
    820a:	50 e4       	ldi	r21, 0x40	; 64
    820c:	c7 01       	movw	r24, r14
    820e:	b6 01       	movw	r22, r12
    8210:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    8214:	88 23       	and	r24, r24
    8216:	84 f4       	brge	.+32     	; 0x8238 <corectTrv+0x12e>
	{
		k = -1; // if the Superheat is too low, this gain changes the step direction
		Superheat = SSet + 10 - Superheat;
    8218:	a7 01       	movw	r20, r14
    821a:	96 01       	movw	r18, r12
    821c:	60 e0       	ldi	r22, 0x00	; 0
    821e:	70 e0       	ldi	r23, 0x00	; 0
    8220:	88 e8       	ldi	r24, 0x88	; 136
    8222:	91 e4       	ldi	r25, 0x41	; 65
    8224:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    8228:	6b 01       	movw	r12, r22
    822a:	7c 01       	movw	r14, r24
		ds = -ds;
    822c:	b7 fa       	bst	r11, 7
    822e:	b0 94       	com	r11
    8230:	b7 f8       	bld	r11, 7
    8232:	b0 94       	com	r11

	//------------------------

	if (Superheat < SSet)
	{
		k = -1; // if the Superheat is too low, this gain changes the step direction
    8234:	cf ef       	ldi	r28, 0xFF	; 255
    8236:	df ef       	ldi	r29, 0xFF	; 255
		Superheat = SSet + 10 - Superheat;
		ds = -ds;
	}
	
	Superheat_old = Superheat;
    8238:	c0 92 41 07 	sts	0x0741, r12	; 0x800741 <Superheat_old.3257>
    823c:	d0 92 42 07 	sts	0x0742, r13	; 0x800742 <Superheat_old.3257+0x1>
    8240:	e0 92 43 07 	sts	0x0743, r14	; 0x800743 <Superheat_old.3257+0x2>
    8244:	f0 92 44 07 	sts	0x0744, r15	; 0x800744 <Superheat_old.3257+0x3>
	
	if (ds > 20)
    8248:	20 e0       	ldi	r18, 0x00	; 0
    824a:	30 e0       	ldi	r19, 0x00	; 0
    824c:	40 ea       	ldi	r20, 0xA0	; 160
    824e:	51 e4       	ldi	r21, 0x41	; 65
    8250:	c5 01       	movw	r24, r10
    8252:	b4 01       	movw	r22, r8
    8254:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    8258:	18 16       	cp	r1, r24
    825a:	14 f4       	brge	.+4      	; 0x8260 <corectTrv+0x156>
    825c:	0c 94 cd 4b 	jmp	0x979a	; 0x979a <corectTrv+0x1690>
	{
		ds = 20;
	}

	 else if (ds < -20)
    8260:	20 e0       	ldi	r18, 0x00	; 0
    8262:	30 e0       	ldi	r19, 0x00	; 0
    8264:	40 ea       	ldi	r20, 0xA0	; 160
    8266:	51 ec       	ldi	r21, 0xC1	; 193
    8268:	c5 01       	movw	r24, r10
    826a:	b4 01       	movw	r22, r8
    826c:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    8270:	88 23       	and	r24, r24
    8272:	64 f0       	brlt	.+24     	; 0x828c <corectTrv+0x182>
	{
		ds = -20;
	}
//--------------------------------------
	if (ds < -10)
    8274:	20 e0       	ldi	r18, 0x00	; 0
    8276:	30 e0       	ldi	r19, 0x00	; 0
    8278:	40 e2       	ldi	r20, 0x20	; 32
    827a:	51 ec       	ldi	r21, 0xC1	; 193
    827c:	c5 01       	movw	r24, r10
    827e:	b4 01       	movw	r22, r8
    8280:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    8284:	88 23       	and	r24, r24
    8286:	0c f0       	brlt	.+2      	; 0x828a <corectTrv+0x180>
    8288:	ab c3       	rjmp	.+1878   	; 0x89e0 <corectTrv+0x8d6>
    828a:	08 c0       	rjmp	.+16     	; 0x829c <corectTrv+0x192>
		ds = 20;
	}

	 else if (ds < -20)
	{
		ds = -20;
    828c:	0f 2e       	mov	r0, r31
    828e:	81 2c       	mov	r8, r1
    8290:	91 2c       	mov	r9, r1
    8292:	f0 ea       	ldi	r31, 0xA0	; 160
    8294:	af 2e       	mov	r10, r31
    8296:	f1 ec       	ldi	r31, 0xC1	; 193
    8298:	bf 2e       	mov	r11, r31
    829a:	f0 2d       	mov	r31, r0
	}
//--------------------------------------
	if (ds < -10)
	{
		if (Superheat == SSet)
    829c:	20 e0       	ldi	r18, 0x00	; 0
    829e:	30 e0       	ldi	r19, 0x00	; 0
    82a0:	40 ee       	ldi	r20, 0xE0	; 224
    82a2:	50 e4       	ldi	r21, 0x40	; 64
    82a4:	c7 01       	movw	r24, r14
    82a6:	b6 01       	movw	r22, r12
    82a8:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    82ac:	81 11       	cpse	r24, r1
    82ae:	32 c0       	rjmp	.+100    	; 0x8314 <corectTrv+0x20a>
		{
			return(-0.123 * ds * ds - 2.768 * ds - 30.62)* k ;
    82b0:	2d e6       	ldi	r18, 0x6D	; 109
    82b2:	37 ee       	ldi	r19, 0xE7	; 231
    82b4:	4b ef       	ldi	r20, 0xFB	; 251
    82b6:	5d eb       	ldi	r21, 0xBD	; 189
    82b8:	c5 01       	movw	r24, r10
    82ba:	b4 01       	movw	r22, r8
    82bc:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    82c0:	a5 01       	movw	r20, r10
    82c2:	94 01       	movw	r18, r8
    82c4:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    82c8:	6b 01       	movw	r12, r22
    82ca:	7c 01       	movw	r14, r24
    82cc:	29 ee       	ldi	r18, 0xE9	; 233
    82ce:	36 e2       	ldi	r19, 0x26	; 38
    82d0:	41 e3       	ldi	r20, 0x31	; 49
    82d2:	50 e4       	ldi	r21, 0x40	; 64
    82d4:	c5 01       	movw	r24, r10
    82d6:	b4 01       	movw	r22, r8
    82d8:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    82dc:	9b 01       	movw	r18, r22
    82de:	ac 01       	movw	r20, r24
    82e0:	c7 01       	movw	r24, r14
    82e2:	b6 01       	movw	r22, r12
    82e4:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    82e8:	23 ec       	ldi	r18, 0xC3	; 195
    82ea:	35 ef       	ldi	r19, 0xF5	; 245
    82ec:	44 ef       	ldi	r20, 0xF4	; 244
    82ee:	51 e4       	ldi	r21, 0x41	; 65
    82f0:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    82f4:	6b 01       	movw	r12, r22
    82f6:	7c 01       	movw	r14, r24
    82f8:	be 01       	movw	r22, r28
    82fa:	dd 0f       	add	r29, r29
    82fc:	88 0b       	sbc	r24, r24
    82fe:	99 0b       	sbc	r25, r25
    8300:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    8304:	9b 01       	movw	r18, r22
    8306:	ac 01       	movw	r20, r24
    8308:	c7 01       	movw	r24, r14
    830a:	b6 01       	movw	r22, r12
    830c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8310:	0c 94 6d 4d 	jmp	0x9ada	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    8314:	20 e0       	ldi	r18, 0x00	; 0
    8316:	30 e0       	ldi	r19, 0x00	; 0
    8318:	40 ee       	ldi	r20, 0xE0	; 224
    831a:	50 e4       	ldi	r21, 0x40	; 64
    831c:	c7 01       	movw	r24, r14
    831e:	b6 01       	movw	r22, r12
    8320:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    8324:	18 16       	cp	r1, r24
    8326:	0c f0       	brlt	.+2      	; 0x832a <corectTrv+0x220>
    8328:	55 c0       	rjmp	.+170    	; 0x83d4 <corectTrv+0x2ca>
    832a:	20 e0       	ldi	r18, 0x00	; 0
    832c:	30 e0       	ldi	r19, 0x00	; 0
    832e:	40 e0       	ldi	r20, 0x00	; 0
    8330:	51 e4       	ldi	r21, 0x41	; 65
    8332:	c7 01       	movw	r24, r14
    8334:	b6 01       	movw	r22, r12
    8336:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    833a:	18 16       	cp	r1, r24
    833c:	0c f4       	brge	.+2      	; 0x8340 <corectTrv+0x236>
    833e:	4a c0       	rjmp	.+148    	; 0x83d4 <corectTrv+0x2ca>
		{
			return( 0.02416 * ds * ds * ds + 0.95688 * ds * ds + 12.69588 * ds + 44.31142)* k;
    8340:	21 e3       	ldi	r18, 0x31	; 49
    8342:	3b ee       	ldi	r19, 0xEB	; 235
    8344:	45 ec       	ldi	r20, 0xC5	; 197
    8346:	5c e3       	ldi	r21, 0x3C	; 60
    8348:	c5 01       	movw	r24, r10
    834a:	b4 01       	movw	r22, r8
    834c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8350:	a5 01       	movw	r20, r10
    8352:	94 01       	movw	r18, r8
    8354:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8358:	a5 01       	movw	r20, r10
    835a:	94 01       	movw	r18, r8
    835c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8360:	6b 01       	movw	r12, r22
    8362:	7c 01       	movw	r14, r24
    8364:	26 e1       	ldi	r18, 0x16	; 22
    8366:	36 ef       	ldi	r19, 0xF6	; 246
    8368:	44 e7       	ldi	r20, 0x74	; 116
    836a:	5f e3       	ldi	r21, 0x3F	; 63
    836c:	c5 01       	movw	r24, r10
    836e:	b4 01       	movw	r22, r8
    8370:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8374:	a5 01       	movw	r20, r10
    8376:	94 01       	movw	r18, r8
    8378:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    837c:	9b 01       	movw	r18, r22
    837e:	ac 01       	movw	r20, r24
    8380:	c7 01       	movw	r24, r14
    8382:	b6 01       	movw	r22, r12
    8384:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8388:	6b 01       	movw	r12, r22
    838a:	7c 01       	movw	r14, r24
    838c:	23 e5       	ldi	r18, 0x53	; 83
    838e:	32 e2       	ldi	r19, 0x22	; 34
    8390:	4b e4       	ldi	r20, 0x4B	; 75
    8392:	51 e4       	ldi	r21, 0x41	; 65
    8394:	c5 01       	movw	r24, r10
    8396:	b4 01       	movw	r22, r8
    8398:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    839c:	9b 01       	movw	r18, r22
    839e:	ac 01       	movw	r20, r24
    83a0:	c7 01       	movw	r24, r14
    83a2:	b6 01       	movw	r22, r12
    83a4:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    83a8:	25 ee       	ldi	r18, 0xE5	; 229
    83aa:	3e e3       	ldi	r19, 0x3E	; 62
    83ac:	41 e3       	ldi	r20, 0x31	; 49
    83ae:	52 e4       	ldi	r21, 0x42	; 66
    83b0:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    83b4:	6b 01       	movw	r12, r22
    83b6:	7c 01       	movw	r14, r24
    83b8:	be 01       	movw	r22, r28
    83ba:	dd 0f       	add	r29, r29
    83bc:	88 0b       	sbc	r24, r24
    83be:	99 0b       	sbc	r25, r25
    83c0:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    83c4:	9b 01       	movw	r18, r22
    83c6:	ac 01       	movw	r20, r24
    83c8:	c7 01       	movw	r24, r14
    83ca:	b6 01       	movw	r22, r12
    83cc:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    83d0:	0c 94 6d 4d 	jmp	0x9ada	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    83d4:	20 e0       	ldi	r18, 0x00	; 0
    83d6:	30 e0       	ldi	r19, 0x00	; 0
    83d8:	40 e0       	ldi	r20, 0x00	; 0
    83da:	51 e4       	ldi	r21, 0x41	; 65
    83dc:	c7 01       	movw	r24, r14
    83de:	b6 01       	movw	r22, r12
    83e0:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    83e4:	18 16       	cp	r1, r24
    83e6:	0c f0       	brlt	.+2      	; 0x83ea <corectTrv+0x2e0>
    83e8:	55 c0       	rjmp	.+170    	; 0x8494 <corectTrv+0x38a>
    83ea:	20 e0       	ldi	r18, 0x00	; 0
    83ec:	30 e0       	ldi	r19, 0x00	; 0
    83ee:	40 e1       	ldi	r20, 0x10	; 16
    83f0:	51 e4       	ldi	r21, 0x41	; 65
    83f2:	c7 01       	movw	r24, r14
    83f4:	b6 01       	movw	r22, r12
    83f6:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    83fa:	18 16       	cp	r1, r24
    83fc:	0c f4       	brge	.+2      	; 0x8400 <corectTrv+0x2f6>
    83fe:	4a c0       	rjmp	.+148    	; 0x8494 <corectTrv+0x38a>
		{
			return( 0.01715 * ds * ds * ds + 0.64880 * ds * ds + 8.39021 * ds + 27.61058)* k;
    8400:	28 e2       	ldi	r18, 0x28	; 40
    8402:	3e e7       	ldi	r19, 0x7E	; 126
    8404:	4c e8       	ldi	r20, 0x8C	; 140
    8406:	5c e3       	ldi	r21, 0x3C	; 60
    8408:	c5 01       	movw	r24, r10
    840a:	b4 01       	movw	r22, r8
    840c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8410:	a5 01       	movw	r20, r10
    8412:	94 01       	movw	r18, r8
    8414:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8418:	a5 01       	movw	r20, r10
    841a:	94 01       	movw	r18, r8
    841c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8420:	6b 01       	movw	r12, r22
    8422:	7c 01       	movw	r14, r24
    8424:	22 ec       	ldi	r18, 0xC2	; 194
    8426:	37 e1       	ldi	r19, 0x17	; 23
    8428:	46 e2       	ldi	r20, 0x26	; 38
    842a:	5f e3       	ldi	r21, 0x3F	; 63
    842c:	c5 01       	movw	r24, r10
    842e:	b4 01       	movw	r22, r8
    8430:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8434:	a5 01       	movw	r20, r10
    8436:	94 01       	movw	r18, r8
    8438:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    843c:	9b 01       	movw	r18, r22
    843e:	ac 01       	movw	r20, r24
    8440:	c7 01       	movw	r24, r14
    8442:	b6 01       	movw	r22, r12
    8444:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8448:	6b 01       	movw	r12, r22
    844a:	7c 01       	movw	r14, r24
    844c:	2d e4       	ldi	r18, 0x4D	; 77
    844e:	3e e3       	ldi	r19, 0x3E	; 62
    8450:	46 e0       	ldi	r20, 0x06	; 6
    8452:	51 e4       	ldi	r21, 0x41	; 65
    8454:	c5 01       	movw	r24, r10
    8456:	b4 01       	movw	r22, r8
    8458:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    845c:	9b 01       	movw	r18, r22
    845e:	ac 01       	movw	r20, r24
    8460:	c7 01       	movw	r24, r14
    8462:	b6 01       	movw	r22, r12
    8464:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8468:	28 e7       	ldi	r18, 0x78	; 120
    846a:	32 ee       	ldi	r19, 0xE2	; 226
    846c:	4c ed       	ldi	r20, 0xDC	; 220
    846e:	51 e4       	ldi	r21, 0x41	; 65
    8470:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8474:	6b 01       	movw	r12, r22
    8476:	7c 01       	movw	r14, r24
    8478:	be 01       	movw	r22, r28
    847a:	dd 0f       	add	r29, r29
    847c:	88 0b       	sbc	r24, r24
    847e:	99 0b       	sbc	r25, r25
    8480:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    8484:	9b 01       	movw	r18, r22
    8486:	ac 01       	movw	r20, r24
    8488:	c7 01       	movw	r24, r14
    848a:	b6 01       	movw	r22, r12
    848c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8490:	0c 94 6d 4d 	jmp	0x9ada	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    8494:	20 e0       	ldi	r18, 0x00	; 0
    8496:	30 e0       	ldi	r19, 0x00	; 0
    8498:	40 e1       	ldi	r20, 0x10	; 16
    849a:	51 e4       	ldi	r21, 0x41	; 65
    849c:	c7 01       	movw	r24, r14
    849e:	b6 01       	movw	r22, r12
    84a0:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    84a4:	18 16       	cp	r1, r24
    84a6:	74 f5       	brge	.+92     	; 0x8504 <corectTrv+0x3fa>
    84a8:	20 e0       	ldi	r18, 0x00	; 0
    84aa:	30 e0       	ldi	r19, 0x00	; 0
    84ac:	40 e2       	ldi	r20, 0x20	; 32
    84ae:	51 e4       	ldi	r21, 0x41	; 65
    84b0:	c7 01       	movw	r24, r14
    84b2:	b6 01       	movw	r22, r12
    84b4:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    84b8:	18 16       	cp	r1, r24
    84ba:	24 f1       	brlt	.+72     	; 0x8504 <corectTrv+0x3fa>
		{
			return( -0.099 * ds * ds - 2.002 * ds - 16.444);
    84bc:	23 e8       	ldi	r18, 0x83	; 131
    84be:	30 ec       	ldi	r19, 0xC0	; 192
    84c0:	4a ec       	ldi	r20, 0xCA	; 202
    84c2:	5d eb       	ldi	r21, 0xBD	; 189
    84c4:	c5 01       	movw	r24, r10
    84c6:	b4 01       	movw	r22, r8
    84c8:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    84cc:	a5 01       	movw	r20, r10
    84ce:	94 01       	movw	r18, r8
    84d0:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    84d4:	6b 01       	movw	r12, r22
    84d6:	7c 01       	movw	r14, r24
    84d8:	25 ec       	ldi	r18, 0xC5	; 197
    84da:	30 e2       	ldi	r19, 0x20	; 32
    84dc:	40 e0       	ldi	r20, 0x00	; 0
    84de:	50 e4       	ldi	r21, 0x40	; 64
    84e0:	c5 01       	movw	r24, r10
    84e2:	b4 01       	movw	r22, r8
    84e4:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    84e8:	9b 01       	movw	r18, r22
    84ea:	ac 01       	movw	r20, r24
    84ec:	c7 01       	movw	r24, r14
    84ee:	b6 01       	movw	r22, r12
    84f0:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    84f4:	20 e5       	ldi	r18, 0x50	; 80
    84f6:	3d e8       	ldi	r19, 0x8D	; 141
    84f8:	43 e8       	ldi	r20, 0x83	; 131
    84fa:	51 e4       	ldi	r21, 0x41	; 65
    84fc:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    8500:	0c 94 6d 4d 	jmp	0x9ada	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    8504:	20 e0       	ldi	r18, 0x00	; 0
    8506:	30 e0       	ldi	r19, 0x00	; 0
    8508:	40 e2       	ldi	r20, 0x20	; 32
    850a:	51 e4       	ldi	r21, 0x41	; 65
    850c:	c7 01       	movw	r24, r14
    850e:	b6 01       	movw	r22, r12
    8510:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    8514:	18 16       	cp	r1, r24
    8516:	74 f5       	brge	.+92     	; 0x8574 <corectTrv+0x46a>
    8518:	20 e0       	ldi	r18, 0x00	; 0
    851a:	30 e0       	ldi	r19, 0x00	; 0
    851c:	40 e3       	ldi	r20, 0x30	; 48
    851e:	51 e4       	ldi	r21, 0x41	; 65
    8520:	c7 01       	movw	r24, r14
    8522:	b6 01       	movw	r22, r12
    8524:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    8528:	18 16       	cp	r1, r24
    852a:	24 f1       	brlt	.+72     	; 0x8574 <corectTrv+0x46a>
		{
			return( -0.065 * ds * ds - 0.773 * ds - 4.451);
    852c:	28 eb       	ldi	r18, 0xB8	; 184
    852e:	3e e1       	ldi	r19, 0x1E	; 30
    8530:	45 e8       	ldi	r20, 0x85	; 133
    8532:	5d eb       	ldi	r21, 0xBD	; 189
    8534:	c5 01       	movw	r24, r10
    8536:	b4 01       	movw	r22, r8
    8538:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    853c:	a5 01       	movw	r20, r10
    853e:	94 01       	movw	r18, r8
    8540:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8544:	6b 01       	movw	r12, r22
    8546:	7c 01       	movw	r14, r24
    8548:	24 e5       	ldi	r18, 0x54	; 84
    854a:	33 ee       	ldi	r19, 0xE3	; 227
    854c:	45 e4       	ldi	r20, 0x45	; 69
    854e:	5f e3       	ldi	r21, 0x3F	; 63
    8550:	c5 01       	movw	r24, r10
    8552:	b4 01       	movw	r22, r8
    8554:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8558:	9b 01       	movw	r18, r22
    855a:	ac 01       	movw	r20, r24
    855c:	c7 01       	movw	r24, r14
    855e:	b6 01       	movw	r22, r12
    8560:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    8564:	28 e9       	ldi	r18, 0x98	; 152
    8566:	3e e6       	ldi	r19, 0x6E	; 110
    8568:	4e e8       	ldi	r20, 0x8E	; 142
    856a:	50 e4       	ldi	r21, 0x40	; 64
    856c:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    8570:	0c 94 6d 4d 	jmp	0x9ada	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    8574:	20 e0       	ldi	r18, 0x00	; 0
    8576:	30 e0       	ldi	r19, 0x00	; 0
    8578:	40 e3       	ldi	r20, 0x30	; 48
    857a:	51 e4       	ldi	r21, 0x41	; 65
    857c:	c7 01       	movw	r24, r14
    857e:	b6 01       	movw	r22, r12
    8580:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    8584:	18 16       	cp	r1, r24
    8586:	0c f0       	brlt	.+2      	; 0x858a <corectTrv+0x480>
    8588:	55 c0       	rjmp	.+170    	; 0x8634 <corectTrv+0x52a>
    858a:	20 e0       	ldi	r18, 0x00	; 0
    858c:	30 e0       	ldi	r19, 0x00	; 0
    858e:	40 e4       	ldi	r20, 0x40	; 64
    8590:	51 e4       	ldi	r21, 0x41	; 65
    8592:	c7 01       	movw	r24, r14
    8594:	b6 01       	movw	r22, r12
    8596:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    859a:	18 16       	cp	r1, r24
    859c:	0c f4       	brge	.+2      	; 0x85a0 <corectTrv+0x496>
    859e:	4a c0       	rjmp	.+148    	; 0x8634 <corectTrv+0x52a>
		{
			return( 0.01315 * ds * ds * ds + 0.59145 * ds * ds + 10.05298 * ds + 54.52301)* k;
    85a0:	29 e1       	ldi	r18, 0x19	; 25
    85a2:	33 e7       	ldi	r19, 0x73	; 115
    85a4:	47 e5       	ldi	r20, 0x57	; 87
    85a6:	5c e3       	ldi	r21, 0x3C	; 60
    85a8:	c5 01       	movw	r24, r10
    85aa:	b4 01       	movw	r22, r8
    85ac:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    85b0:	a5 01       	movw	r20, r10
    85b2:	94 01       	movw	r18, r8
    85b4:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    85b8:	a5 01       	movw	r20, r10
    85ba:	94 01       	movw	r18, r8
    85bc:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    85c0:	6b 01       	movw	r12, r22
    85c2:	7c 01       	movw	r14, r24
    85c4:	24 e4       	ldi	r18, 0x44	; 68
    85c6:	39 e6       	ldi	r19, 0x69	; 105
    85c8:	47 e1       	ldi	r20, 0x17	; 23
    85ca:	5f e3       	ldi	r21, 0x3F	; 63
    85cc:	c5 01       	movw	r24, r10
    85ce:	b4 01       	movw	r22, r8
    85d0:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    85d4:	a5 01       	movw	r20, r10
    85d6:	94 01       	movw	r18, r8
    85d8:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    85dc:	9b 01       	movw	r18, r22
    85de:	ac 01       	movw	r20, r24
    85e0:	c7 01       	movw	r24, r14
    85e2:	b6 01       	movw	r22, r12
    85e4:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    85e8:	6b 01       	movw	r12, r22
    85ea:	7c 01       	movw	r14, r24
    85ec:	22 e0       	ldi	r18, 0x02	; 2
    85ee:	39 ed       	ldi	r19, 0xD9	; 217
    85f0:	40 e2       	ldi	r20, 0x20	; 32
    85f2:	51 e4       	ldi	r21, 0x41	; 65
    85f4:	c5 01       	movw	r24, r10
    85f6:	b4 01       	movw	r22, r8
    85f8:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    85fc:	9b 01       	movw	r18, r22
    85fe:	ac 01       	movw	r20, r24
    8600:	c7 01       	movw	r24, r14
    8602:	b6 01       	movw	r22, r12
    8604:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8608:	20 e9       	ldi	r18, 0x90	; 144
    860a:	37 e1       	ldi	r19, 0x17	; 23
    860c:	4a e5       	ldi	r20, 0x5A	; 90
    860e:	52 e4       	ldi	r21, 0x42	; 66
    8610:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8614:	6b 01       	movw	r12, r22
    8616:	7c 01       	movw	r14, r24
    8618:	be 01       	movw	r22, r28
    861a:	dd 0f       	add	r29, r29
    861c:	88 0b       	sbc	r24, r24
    861e:	99 0b       	sbc	r25, r25
    8620:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    8624:	9b 01       	movw	r18, r22
    8626:	ac 01       	movw	r20, r24
    8628:	c7 01       	movw	r24, r14
    862a:	b6 01       	movw	r22, r12
    862c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8630:	0c 94 6d 4d 	jmp	0x9ada	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    8634:	20 e0       	ldi	r18, 0x00	; 0
    8636:	30 e0       	ldi	r19, 0x00	; 0
    8638:	40 e4       	ldi	r20, 0x40	; 64
    863a:	51 e4       	ldi	r21, 0x41	; 65
    863c:	c7 01       	movw	r24, r14
    863e:	b6 01       	movw	r22, r12
    8640:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    8644:	18 16       	cp	r1, r24
    8646:	0c f0       	brlt	.+2      	; 0x864a <corectTrv+0x540>
    8648:	55 c0       	rjmp	.+170    	; 0x86f4 <corectTrv+0x5ea>
    864a:	20 e0       	ldi	r18, 0x00	; 0
    864c:	30 e0       	ldi	r19, 0x00	; 0
    864e:	40 e5       	ldi	r20, 0x50	; 80
    8650:	51 e4       	ldi	r21, 0x41	; 65
    8652:	c7 01       	movw	r24, r14
    8654:	b6 01       	movw	r22, r12
    8656:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    865a:	18 16       	cp	r1, r24
    865c:	0c f4       	brge	.+2      	; 0x8660 <corectTrv+0x556>
    865e:	4a c0       	rjmp	.+148    	; 0x86f4 <corectTrv+0x5ea>
		{
			return( 0.02485 * ds * ds * ds + 1.09724 * ds * ds + 17.05530 * ds + 89.43916)* k;
    8660:	2a e3       	ldi	r18, 0x3A	; 58
    8662:	32 e9       	ldi	r19, 0x92	; 146
    8664:	4b ec       	ldi	r20, 0xCB	; 203
    8666:	5c e3       	ldi	r21, 0x3C	; 60
    8668:	c5 01       	movw	r24, r10
    866a:	b4 01       	movw	r22, r8
    866c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8670:	a5 01       	movw	r20, r10
    8672:	94 01       	movw	r18, r8
    8674:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8678:	a5 01       	movw	r20, r10
    867a:	94 01       	movw	r18, r8
    867c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8680:	6b 01       	movw	r12, r22
    8682:	7c 01       	movw	r14, r24
    8684:	2c e5       	ldi	r18, 0x5C	; 92
    8686:	32 e7       	ldi	r19, 0x72	; 114
    8688:	4c e8       	ldi	r20, 0x8C	; 140
    868a:	5f e3       	ldi	r21, 0x3F	; 63
    868c:	c5 01       	movw	r24, r10
    868e:	b4 01       	movw	r22, r8
    8690:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8694:	a5 01       	movw	r20, r10
    8696:	94 01       	movw	r18, r8
    8698:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    869c:	9b 01       	movw	r18, r22
    869e:	ac 01       	movw	r20, r24
    86a0:	c7 01       	movw	r24, r14
    86a2:	b6 01       	movw	r22, r12
    86a4:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    86a8:	6b 01       	movw	r12, r22
    86aa:	7c 01       	movw	r14, r24
    86ac:	21 e4       	ldi	r18, 0x41	; 65
    86ae:	31 e7       	ldi	r19, 0x71	; 113
    86b0:	48 e8       	ldi	r20, 0x88	; 136
    86b2:	51 e4       	ldi	r21, 0x41	; 65
    86b4:	c5 01       	movw	r24, r10
    86b6:	b4 01       	movw	r22, r8
    86b8:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    86bc:	9b 01       	movw	r18, r22
    86be:	ac 01       	movw	r20, r24
    86c0:	c7 01       	movw	r24, r14
    86c2:	b6 01       	movw	r22, r12
    86c4:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    86c8:	2a ed       	ldi	r18, 0xDA	; 218
    86ca:	30 ee       	ldi	r19, 0xE0	; 224
    86cc:	42 eb       	ldi	r20, 0xB2	; 178
    86ce:	52 e4       	ldi	r21, 0x42	; 66
    86d0:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    86d4:	6b 01       	movw	r12, r22
    86d6:	7c 01       	movw	r14, r24
    86d8:	be 01       	movw	r22, r28
    86da:	dd 0f       	add	r29, r29
    86dc:	88 0b       	sbc	r24, r24
    86de:	99 0b       	sbc	r25, r25
    86e0:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    86e4:	9b 01       	movw	r18, r22
    86e6:	ac 01       	movw	r20, r24
    86e8:	c7 01       	movw	r24, r14
    86ea:	b6 01       	movw	r22, r12
    86ec:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    86f0:	0c 94 6d 4d 	jmp	0x9ada	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    86f4:	20 e0       	ldi	r18, 0x00	; 0
    86f6:	30 e0       	ldi	r19, 0x00	; 0
    86f8:	40 e5       	ldi	r20, 0x50	; 80
    86fa:	51 e4       	ldi	r21, 0x41	; 65
    86fc:	c7 01       	movw	r24, r14
    86fe:	b6 01       	movw	r22, r12
    8700:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    8704:	18 16       	cp	r1, r24
    8706:	0c f0       	brlt	.+2      	; 0x870a <corectTrv+0x600>
    8708:	55 c0       	rjmp	.+170    	; 0x87b4 <corectTrv+0x6aa>
    870a:	20 e0       	ldi	r18, 0x00	; 0
    870c:	30 e0       	ldi	r19, 0x00	; 0
    870e:	40 e6       	ldi	r20, 0x60	; 96
    8710:	51 e4       	ldi	r21, 0x41	; 65
    8712:	c7 01       	movw	r24, r14
    8714:	b6 01       	movw	r22, r12
    8716:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    871a:	18 16       	cp	r1, r24
    871c:	0c f4       	brge	.+2      	; 0x8720 <corectTrv+0x616>
    871e:	4a c0       	rjmp	.+148    	; 0x87b4 <corectTrv+0x6aa>
		{
			return( 0.02257 * ds * ds * ds + 0.99967 * ds * ds + 15.71735 * ds + 86.11652)* k;
    8720:	28 eb       	ldi	r18, 0xB8	; 184
    8722:	34 ee       	ldi	r19, 0xE4	; 228
    8724:	48 eb       	ldi	r20, 0xB8	; 184
    8726:	5c e3       	ldi	r21, 0x3C	; 60
    8728:	c5 01       	movw	r24, r10
    872a:	b4 01       	movw	r22, r8
    872c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8730:	a5 01       	movw	r20, r10
    8732:	94 01       	movw	r18, r8
    8734:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8738:	a5 01       	movw	r20, r10
    873a:	94 01       	movw	r18, r8
    873c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8740:	6b 01       	movw	r12, r22
    8742:	7c 01       	movw	r14, r24
    8744:	20 e6       	ldi	r18, 0x60	; 96
    8746:	3a ee       	ldi	r19, 0xEA	; 234
    8748:	4f e7       	ldi	r20, 0x7F	; 127
    874a:	5f e3       	ldi	r21, 0x3F	; 63
    874c:	c5 01       	movw	r24, r10
    874e:	b4 01       	movw	r22, r8
    8750:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8754:	a5 01       	movw	r20, r10
    8756:	94 01       	movw	r18, r8
    8758:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    875c:	9b 01       	movw	r18, r22
    875e:	ac 01       	movw	r20, r24
    8760:	c7 01       	movw	r24, r14
    8762:	b6 01       	movw	r22, r12
    8764:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8768:	6b 01       	movw	r12, r22
    876a:	7c 01       	movw	r14, r24
    876c:	24 e4       	ldi	r18, 0x44	; 68
    876e:	3a e7       	ldi	r19, 0x7A	; 122
    8770:	4b e7       	ldi	r20, 0x7B	; 123
    8772:	51 e4       	ldi	r21, 0x41	; 65
    8774:	c5 01       	movw	r24, r10
    8776:	b4 01       	movw	r22, r8
    8778:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    877c:	9b 01       	movw	r18, r22
    877e:	ac 01       	movw	r20, r24
    8780:	c7 01       	movw	r24, r14
    8782:	b6 01       	movw	r22, r12
    8784:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8788:	29 ea       	ldi	r18, 0xA9	; 169
    878a:	3b e3       	ldi	r19, 0x3B	; 59
    878c:	4c ea       	ldi	r20, 0xAC	; 172
    878e:	52 e4       	ldi	r21, 0x42	; 66
    8790:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8794:	6b 01       	movw	r12, r22
    8796:	7c 01       	movw	r14, r24
    8798:	be 01       	movw	r22, r28
    879a:	dd 0f       	add	r29, r29
    879c:	88 0b       	sbc	r24, r24
    879e:	99 0b       	sbc	r25, r25
    87a0:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    87a4:	9b 01       	movw	r18, r22
    87a6:	ac 01       	movw	r20, r24
    87a8:	c7 01       	movw	r24, r14
    87aa:	b6 01       	movw	r22, r12
    87ac:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    87b0:	0c 94 6d 4d 	jmp	0x9ada	; 0x9ada <corectTrv+0x19d0>
		}
		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    87b4:	20 e0       	ldi	r18, 0x00	; 0
    87b6:	30 e0       	ldi	r19, 0x00	; 0
    87b8:	40 e6       	ldi	r20, 0x60	; 96
    87ba:	51 e4       	ldi	r21, 0x41	; 65
    87bc:	c7 01       	movw	r24, r14
    87be:	b6 01       	movw	r22, r12
    87c0:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    87c4:	18 16       	cp	r1, r24
    87c6:	0c f0       	brlt	.+2      	; 0x87ca <corectTrv+0x6c0>
    87c8:	55 c0       	rjmp	.+170    	; 0x8874 <corectTrv+0x76a>
    87ca:	20 e0       	ldi	r18, 0x00	; 0
    87cc:	30 e0       	ldi	r19, 0x00	; 0
    87ce:	40 e7       	ldi	r20, 0x70	; 112
    87d0:	51 e4       	ldi	r21, 0x41	; 65
    87d2:	c7 01       	movw	r24, r14
    87d4:	b6 01       	movw	r22, r12
    87d6:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    87da:	18 16       	cp	r1, r24
    87dc:	0c f4       	brge	.+2      	; 0x87e0 <corectTrv+0x6d6>
    87de:	4a c0       	rjmp	.+148    	; 0x8874 <corectTrv+0x76a>
		{
			return( 0.02199 * ds * ds * ds + 0.99841 * ds * ds + 16.07877 * ds + 91.69972)* k;
    87e0:	2f e5       	ldi	r18, 0x5F	; 95
    87e2:	34 e2       	ldi	r19, 0x24	; 36
    87e4:	44 eb       	ldi	r20, 0xB4	; 180
    87e6:	5c e3       	ldi	r21, 0x3C	; 60
    87e8:	c5 01       	movw	r24, r10
    87ea:	b4 01       	movw	r22, r8
    87ec:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    87f0:	a5 01       	movw	r20, r10
    87f2:	94 01       	movw	r18, r8
    87f4:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    87f8:	a5 01       	movw	r20, r10
    87fa:	94 01       	movw	r18, r8
    87fc:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8800:	6b 01       	movw	r12, r22
    8802:	7c 01       	movw	r14, r24
    8804:	2c ec       	ldi	r18, 0xCC	; 204
    8806:	37 e9       	ldi	r19, 0x97	; 151
    8808:	4f e7       	ldi	r20, 0x7F	; 127
    880a:	5f e3       	ldi	r21, 0x3F	; 63
    880c:	c5 01       	movw	r24, r10
    880e:	b4 01       	movw	r22, r8
    8810:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8814:	a5 01       	movw	r20, r10
    8816:	94 01       	movw	r18, r8
    8818:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    881c:	9b 01       	movw	r18, r22
    881e:	ac 01       	movw	r20, r24
    8820:	c7 01       	movw	r24, r14
    8822:	b6 01       	movw	r22, r12
    8824:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8828:	6b 01       	movw	r12, r22
    882a:	7c 01       	movw	r14, r24
    882c:	22 e5       	ldi	r18, 0x52	; 82
    882e:	31 ea       	ldi	r19, 0xA1	; 161
    8830:	40 e8       	ldi	r20, 0x80	; 128
    8832:	51 e4       	ldi	r21, 0x41	; 65
    8834:	c5 01       	movw	r24, r10
    8836:	b4 01       	movw	r22, r8
    8838:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    883c:	9b 01       	movw	r18, r22
    883e:	ac 01       	movw	r20, r24
    8840:	c7 01       	movw	r24, r14
    8842:	b6 01       	movw	r22, r12
    8844:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8848:	22 e4       	ldi	r18, 0x42	; 66
    884a:	36 e6       	ldi	r19, 0x66	; 102
    884c:	47 eb       	ldi	r20, 0xB7	; 183
    884e:	52 e4       	ldi	r21, 0x42	; 66
    8850:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8854:	6b 01       	movw	r12, r22
    8856:	7c 01       	movw	r14, r24
    8858:	be 01       	movw	r22, r28
    885a:	dd 0f       	add	r29, r29
    885c:	88 0b       	sbc	r24, r24
    885e:	99 0b       	sbc	r25, r25
    8860:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    8864:	9b 01       	movw	r18, r22
    8866:	ac 01       	movw	r20, r24
    8868:	c7 01       	movw	r24, r14
    886a:	b6 01       	movw	r22, r12
    886c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8870:	0c 94 6d 4d 	jmp	0x9ada	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    8874:	20 e0       	ldi	r18, 0x00	; 0
    8876:	30 e0       	ldi	r19, 0x00	; 0
    8878:	40 e7       	ldi	r20, 0x70	; 112
    887a:	51 e4       	ldi	r21, 0x41	; 65
    887c:	c7 01       	movw	r24, r14
    887e:	b6 01       	movw	r22, r12
    8880:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    8884:	18 16       	cp	r1, r24
    8886:	0c f0       	brlt	.+2      	; 0x888a <corectTrv+0x780>
    8888:	55 c0       	rjmp	.+170    	; 0x8934 <corectTrv+0x82a>
    888a:	20 e0       	ldi	r18, 0x00	; 0
    888c:	30 e0       	ldi	r19, 0x00	; 0
    888e:	40 e8       	ldi	r20, 0x80	; 128
    8890:	51 e4       	ldi	r21, 0x41	; 65
    8892:	c7 01       	movw	r24, r14
    8894:	b6 01       	movw	r22, r12
    8896:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    889a:	18 16       	cp	r1, r24
    889c:	0c f4       	brge	.+2      	; 0x88a0 <corectTrv+0x796>
    889e:	4a c0       	rjmp	.+148    	; 0x8934 <corectTrv+0x82a>
		{
			return( 0.02293 * ds * ds * ds + 1.04454 * ds * ds + 16.79148 * ds + 97.65075)* k;
    88a0:	22 eb       	ldi	r18, 0xB2	; 178
    88a2:	37 ed       	ldi	r19, 0xD7	; 215
    88a4:	4b eb       	ldi	r20, 0xBB	; 187
    88a6:	5c e3       	ldi	r21, 0x3C	; 60
    88a8:	c5 01       	movw	r24, r10
    88aa:	b4 01       	movw	r22, r8
    88ac:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    88b0:	a5 01       	movw	r20, r10
    88b2:	94 01       	movw	r18, r8
    88b4:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    88b8:	a5 01       	movw	r20, r10
    88ba:	94 01       	movw	r18, r8
    88bc:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    88c0:	6b 01       	movw	r12, r22
    88c2:	7c 01       	movw	r14, r24
    88c4:	2d e7       	ldi	r18, 0x7D	; 125
    88c6:	33 eb       	ldi	r19, 0xB3	; 179
    88c8:	45 e8       	ldi	r20, 0x85	; 133
    88ca:	5f e3       	ldi	r21, 0x3F	; 63
    88cc:	c5 01       	movw	r24, r10
    88ce:	b4 01       	movw	r22, r8
    88d0:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    88d4:	a5 01       	movw	r20, r10
    88d6:	94 01       	movw	r18, r8
    88d8:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    88dc:	9b 01       	movw	r18, r22
    88de:	ac 01       	movw	r20, r24
    88e0:	c7 01       	movw	r24, r14
    88e2:	b6 01       	movw	r22, r12
    88e4:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    88e8:	6b 01       	movw	r12, r22
    88ea:	7c 01       	movw	r14, r24
    88ec:	23 ef       	ldi	r18, 0xF3	; 243
    88ee:	34 e5       	ldi	r19, 0x54	; 84
    88f0:	46 e8       	ldi	r20, 0x86	; 134
    88f2:	51 e4       	ldi	r21, 0x41	; 65
    88f4:	c5 01       	movw	r24, r10
    88f6:	b4 01       	movw	r22, r8
    88f8:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    88fc:	9b 01       	movw	r18, r22
    88fe:	ac 01       	movw	r20, r24
    8900:	c7 01       	movw	r24, r14
    8902:	b6 01       	movw	r22, r12
    8904:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8908:	2f e2       	ldi	r18, 0x2F	; 47
    890a:	3d e4       	ldi	r19, 0x4D	; 77
    890c:	43 ec       	ldi	r20, 0xC3	; 195
    890e:	52 e4       	ldi	r21, 0x42	; 66
    8910:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8914:	6b 01       	movw	r12, r22
    8916:	7c 01       	movw	r14, r24
    8918:	be 01       	movw	r22, r28
    891a:	dd 0f       	add	r29, r29
    891c:	88 0b       	sbc	r24, r24
    891e:	99 0b       	sbc	r25, r25
    8920:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    8924:	9b 01       	movw	r18, r22
    8926:	ac 01       	movw	r20, r24
    8928:	c7 01       	movw	r24, r14
    892a:	b6 01       	movw	r22, r12
    892c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8930:	0c 94 6d 4d 	jmp	0x9ada	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 9)
    8934:	20 e0       	ldi	r18, 0x00	; 0
    8936:	30 e0       	ldi	r19, 0x00	; 0
    8938:	40 e8       	ldi	r20, 0x80	; 128
    893a:	51 e4       	ldi	r21, 0x41	; 65
    893c:	c7 01       	movw	r24, r14
    893e:	b6 01       	movw	r22, r12
    8940:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    8944:	18 16       	cp	r1, r24
    8946:	14 f0       	brlt	.+4      	; 0x894c <corectTrv+0x842>
    8948:	0c 94 5a 4d 	jmp	0x9ab4	; 0x9ab4 <corectTrv+0x19aa>
		{
			return( 0.01242 * ds * ds * ds + 0.55907 * ds * ds + 9.57142 * ds + 67.21499)* k;
    894c:	21 e4       	ldi	r18, 0x41	; 65
    894e:	3d e7       	ldi	r19, 0x7D	; 125
    8950:	4b e4       	ldi	r20, 0x4B	; 75
    8952:	5c e3       	ldi	r21, 0x3C	; 60
    8954:	c5 01       	movw	r24, r10
    8956:	b4 01       	movw	r22, r8
    8958:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    895c:	a5 01       	movw	r20, r10
    895e:	94 01       	movw	r18, r8
    8960:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8964:	a5 01       	movw	r20, r10
    8966:	94 01       	movw	r18, r8
    8968:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    896c:	6b 01       	movw	r12, r22
    896e:	7c 01       	movw	r14, r24
    8970:	26 e3       	ldi	r18, 0x36	; 54
    8972:	3f e1       	ldi	r19, 0x1F	; 31
    8974:	4f e0       	ldi	r20, 0x0F	; 15
    8976:	5f e3       	ldi	r21, 0x3F	; 63
    8978:	c5 01       	movw	r24, r10
    897a:	b4 01       	movw	r22, r8
    897c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8980:	a5 01       	movw	r20, r10
    8982:	94 01       	movw	r18, r8
    8984:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8988:	9b 01       	movw	r18, r22
    898a:	ac 01       	movw	r20, r24
    898c:	c7 01       	movw	r24, r14
    898e:	b6 01       	movw	r22, r12
    8990:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8994:	6b 01       	movw	r12, r22
    8996:	7c 01       	movw	r14, r24
    8998:	29 e8       	ldi	r18, 0x89	; 137
    899a:	34 e2       	ldi	r19, 0x24	; 36
    899c:	49 e1       	ldi	r20, 0x19	; 25
    899e:	51 e4       	ldi	r21, 0x41	; 65
    89a0:	c5 01       	movw	r24, r10
    89a2:	b4 01       	movw	r22, r8
    89a4:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    89a8:	9b 01       	movw	r18, r22
    89aa:	ac 01       	movw	r20, r24
    89ac:	c7 01       	movw	r24, r14
    89ae:	b6 01       	movw	r22, r12
    89b0:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    89b4:	23 e1       	ldi	r18, 0x13	; 19
    89b6:	3e e6       	ldi	r19, 0x6E	; 110
    89b8:	46 e8       	ldi	r20, 0x86	; 134
    89ba:	52 e4       	ldi	r21, 0x42	; 66
    89bc:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    89c0:	6b 01       	movw	r12, r22
    89c2:	7c 01       	movw	r14, r24
    89c4:	be 01       	movw	r22, r28
    89c6:	dd 0f       	add	r29, r29
    89c8:	88 0b       	sbc	r24, r24
    89ca:	99 0b       	sbc	r25, r25
    89cc:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    89d0:	9b 01       	movw	r18, r22
    89d2:	ac 01       	movw	r20, r24
    89d4:	c7 01       	movw	r24, r14
    89d6:	b6 01       	movw	r22, r12
    89d8:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    89dc:	0c 94 6d 4d 	jmp	0x9ada	; 0x9ada <corectTrv+0x19d0>
		}
	}

	else if (ds < 0 && ds >= -10)
    89e0:	20 e0       	ldi	r18, 0x00	; 0
    89e2:	30 e0       	ldi	r19, 0x00	; 0
    89e4:	a9 01       	movw	r20, r18
    89e6:	c5 01       	movw	r24, r10
    89e8:	b4 01       	movw	r22, r8
    89ea:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    89ee:	88 23       	and	r24, r24
    89f0:	0c f0       	brlt	.+2      	; 0x89f4 <corectTrv+0x8ea>
    89f2:	d6 c3       	rjmp	.+1964   	; 0x91a0 <corectTrv+0x1096>
    89f4:	20 e0       	ldi	r18, 0x00	; 0
    89f6:	30 e0       	ldi	r19, 0x00	; 0
    89f8:	40 e2       	ldi	r20, 0x20	; 32
    89fa:	51 ec       	ldi	r21, 0xC1	; 193
    89fc:	c5 01       	movw	r24, r10
    89fe:	b4 01       	movw	r22, r8
    8a00:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    8a04:	88 23       	and	r24, r24
    8a06:	0c f4       	brge	.+2      	; 0x8a0a <corectTrv+0x900>
    8a08:	cb c3       	rjmp	.+1942   	; 0x91a0 <corectTrv+0x1096>
	{
		if (Superheat == SSet)
    8a0a:	20 e0       	ldi	r18, 0x00	; 0
    8a0c:	30 e0       	ldi	r19, 0x00	; 0
    8a0e:	40 ee       	ldi	r20, 0xE0	; 224
    8a10:	50 e4       	ldi	r21, 0x40	; 64
    8a12:	c7 01       	movw	r24, r14
    8a14:	b6 01       	movw	r22, r12
    8a16:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    8a1a:	81 11       	cpse	r24, r1
    8a1c:	4a c0       	rjmp	.+148    	; 0x8ab2 <corectTrv+0x9a8>
		{
			return( 0.01259 * ds * ds * ds + 0.18896 * ds * ds + 2.12770 * ds - 0.01350)* k;
    8a1e:	2a e4       	ldi	r18, 0x4A	; 74
    8a20:	36 e4       	ldi	r19, 0x46	; 70
    8a22:	4e e4       	ldi	r20, 0x4E	; 78
    8a24:	5c e3       	ldi	r21, 0x3C	; 60
    8a26:	c5 01       	movw	r24, r10
    8a28:	b4 01       	movw	r22, r8
    8a2a:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8a2e:	a5 01       	movw	r20, r10
    8a30:	94 01       	movw	r18, r8
    8a32:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8a36:	a5 01       	movw	r20, r10
    8a38:	94 01       	movw	r18, r8
    8a3a:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8a3e:	6b 01       	movw	r12, r22
    8a40:	7c 01       	movw	r14, r24
    8a42:	2b eb       	ldi	r18, 0xBB	; 187
    8a44:	3e e7       	ldi	r19, 0x7E	; 126
    8a46:	41 e4       	ldi	r20, 0x41	; 65
    8a48:	5e e3       	ldi	r21, 0x3E	; 62
    8a4a:	c5 01       	movw	r24, r10
    8a4c:	b4 01       	movw	r22, r8
    8a4e:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8a52:	a5 01       	movw	r20, r10
    8a54:	94 01       	movw	r18, r8
    8a56:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8a5a:	9b 01       	movw	r18, r22
    8a5c:	ac 01       	movw	r20, r24
    8a5e:	c7 01       	movw	r24, r14
    8a60:	b6 01       	movw	r22, r12
    8a62:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8a66:	6b 01       	movw	r12, r22
    8a68:	7c 01       	movw	r14, r24
    8a6a:	2d e3       	ldi	r18, 0x3D	; 61
    8a6c:	3c e2       	ldi	r19, 0x2C	; 44
    8a6e:	48 e0       	ldi	r20, 0x08	; 8
    8a70:	50 e4       	ldi	r21, 0x40	; 64
    8a72:	c5 01       	movw	r24, r10
    8a74:	b4 01       	movw	r22, r8
    8a76:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8a7a:	9b 01       	movw	r18, r22
    8a7c:	ac 01       	movw	r20, r24
    8a7e:	c7 01       	movw	r24, r14
    8a80:	b6 01       	movw	r22, r12
    8a82:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8a86:	2b e1       	ldi	r18, 0x1B	; 27
    8a88:	3f e2       	ldi	r19, 0x2F	; 47
    8a8a:	4d e5       	ldi	r20, 0x5D	; 93
    8a8c:	5c e3       	ldi	r21, 0x3C	; 60
    8a8e:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    8a92:	6b 01       	movw	r12, r22
    8a94:	7c 01       	movw	r14, r24
    8a96:	be 01       	movw	r22, r28
    8a98:	dd 0f       	add	r29, r29
    8a9a:	88 0b       	sbc	r24, r24
    8a9c:	99 0b       	sbc	r25, r25
    8a9e:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    8aa2:	9b 01       	movw	r18, r22
    8aa4:	ac 01       	movw	r20, r24
    8aa6:	c7 01       	movw	r24, r14
    8aa8:	b6 01       	movw	r22, r12
    8aaa:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8aae:	0c 94 6d 4d 	jmp	0x9ada	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    8ab2:	20 e0       	ldi	r18, 0x00	; 0
    8ab4:	30 e0       	ldi	r19, 0x00	; 0
    8ab6:	40 ee       	ldi	r20, 0xE0	; 224
    8ab8:	50 e4       	ldi	r21, 0x40	; 64
    8aba:	c7 01       	movw	r24, r14
    8abc:	b6 01       	movw	r22, r12
    8abe:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    8ac2:	18 16       	cp	r1, r24
    8ac4:	0c f0       	brlt	.+2      	; 0x8ac8 <corectTrv+0x9be>
    8ac6:	54 c0       	rjmp	.+168    	; 0x8b70 <corectTrv+0xa66>
    8ac8:	20 e0       	ldi	r18, 0x00	; 0
    8aca:	30 e0       	ldi	r19, 0x00	; 0
    8acc:	40 e0       	ldi	r20, 0x00	; 0
    8ace:	51 e4       	ldi	r21, 0x41	; 65
    8ad0:	c7 01       	movw	r24, r14
    8ad2:	b6 01       	movw	r22, r12
    8ad4:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    8ad8:	18 16       	cp	r1, r24
    8ada:	0c f4       	brge	.+2      	; 0x8ade <corectTrv+0x9d4>
    8adc:	49 c0       	rjmp	.+146    	; 0x8b70 <corectTrv+0xa66>
		{
			return( 0.02252 * ds * ds * ds + 0.32376 * ds * ds + 2.48397 * ds + 3.72657)* k;
    8ade:	2d ed       	ldi	r18, 0xDD	; 221
    8ae0:	3b e7       	ldi	r19, 0x7B	; 123
    8ae2:	48 eb       	ldi	r20, 0xB8	; 184
    8ae4:	5c e3       	ldi	r21, 0x3C	; 60
    8ae6:	c5 01       	movw	r24, r10
    8ae8:	b4 01       	movw	r22, r8
    8aea:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8aee:	a5 01       	movw	r20, r10
    8af0:	94 01       	movw	r18, r8
    8af2:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8af6:	a5 01       	movw	r20, r10
    8af8:	94 01       	movw	r18, r8
    8afa:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8afe:	6b 01       	movw	r12, r22
    8b00:	7c 01       	movw	r14, r24
    8b02:	2f ed       	ldi	r18, 0xDF	; 223
    8b04:	33 ec       	ldi	r19, 0xC3	; 195
    8b06:	45 ea       	ldi	r20, 0xA5	; 165
    8b08:	5e e3       	ldi	r21, 0x3E	; 62
    8b0a:	c5 01       	movw	r24, r10
    8b0c:	b4 01       	movw	r22, r8
    8b0e:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8b12:	a5 01       	movw	r20, r10
    8b14:	94 01       	movw	r18, r8
    8b16:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8b1a:	9b 01       	movw	r18, r22
    8b1c:	ac 01       	movw	r20, r24
    8b1e:	c7 01       	movw	r24, r14
    8b20:	b6 01       	movw	r22, r12
    8b22:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8b26:	6b 01       	movw	r12, r22
    8b28:	7c 01       	movw	r14, r24
    8b2a:	2d e5       	ldi	r18, 0x5D	; 93
    8b2c:	39 ef       	ldi	r19, 0xF9	; 249
    8b2e:	4e e1       	ldi	r20, 0x1E	; 30
    8b30:	50 e4       	ldi	r21, 0x40	; 64
    8b32:	c5 01       	movw	r24, r10
    8b34:	b4 01       	movw	r22, r8
    8b36:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8b3a:	9b 01       	movw	r18, r22
    8b3c:	ac 01       	movw	r20, r24
    8b3e:	c7 01       	movw	r24, r14
    8b40:	b6 01       	movw	r22, r12
    8b42:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8b46:	2f e1       	ldi	r18, 0x1F	; 31
    8b48:	30 e8       	ldi	r19, 0x80	; 128
    8b4a:	4e e6       	ldi	r20, 0x6E	; 110
    8b4c:	50 e4       	ldi	r21, 0x40	; 64
    8b4e:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8b52:	6b 01       	movw	r12, r22
    8b54:	7c 01       	movw	r14, r24
    8b56:	be 01       	movw	r22, r28
    8b58:	dd 0f       	add	r29, r29
    8b5a:	88 0b       	sbc	r24, r24
    8b5c:	99 0b       	sbc	r25, r25
    8b5e:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    8b62:	9b 01       	movw	r18, r22
    8b64:	ac 01       	movw	r20, r24
    8b66:	c7 01       	movw	r24, r14
    8b68:	b6 01       	movw	r22, r12
    8b6a:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8b6e:	b5 c7       	rjmp	.+3946   	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    8b70:	20 e0       	ldi	r18, 0x00	; 0
    8b72:	30 e0       	ldi	r19, 0x00	; 0
    8b74:	40 e0       	ldi	r20, 0x00	; 0
    8b76:	51 e4       	ldi	r21, 0x41	; 65
    8b78:	c7 01       	movw	r24, r14
    8b7a:	b6 01       	movw	r22, r12
    8b7c:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    8b80:	18 16       	cp	r1, r24
    8b82:	0c f0       	brlt	.+2      	; 0x8b86 <corectTrv+0xa7c>
    8b84:	54 c0       	rjmp	.+168    	; 0x8c2e <corectTrv+0xb24>
    8b86:	20 e0       	ldi	r18, 0x00	; 0
    8b88:	30 e0       	ldi	r19, 0x00	; 0
    8b8a:	40 e1       	ldi	r20, 0x10	; 16
    8b8c:	51 e4       	ldi	r21, 0x41	; 65
    8b8e:	c7 01       	movw	r24, r14
    8b90:	b6 01       	movw	r22, r12
    8b92:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    8b96:	18 16       	cp	r1, r24
    8b98:	0c f4       	brge	.+2      	; 0x8b9c <corectTrv+0xa92>
    8b9a:	49 c0       	rjmp	.+146    	; 0x8c2e <corectTrv+0xb24>
		{
			return( 0.02106 * ds * ds * ds + 0.30427 * ds * ds + 2.44311 * ds + 6.31417)* k;
    8b9c:	25 e0       	ldi	r18, 0x05	; 5
    8b9e:	36 e8       	ldi	r19, 0x86	; 134
    8ba0:	4c ea       	ldi	r20, 0xAC	; 172
    8ba2:	5c e3       	ldi	r21, 0x3C	; 60
    8ba4:	c5 01       	movw	r24, r10
    8ba6:	b4 01       	movw	r22, r8
    8ba8:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8bac:	a5 01       	movw	r20, r10
    8bae:	94 01       	movw	r18, r8
    8bb0:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8bb4:	a5 01       	movw	r20, r10
    8bb6:	94 01       	movw	r18, r8
    8bb8:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8bbc:	6b 01       	movw	r12, r22
    8bbe:	7c 01       	movw	r14, r24
    8bc0:	27 e4       	ldi	r18, 0x47	; 71
    8bc2:	39 ec       	ldi	r19, 0xC9	; 201
    8bc4:	4b e9       	ldi	r20, 0x9B	; 155
    8bc6:	5e e3       	ldi	r21, 0x3E	; 62
    8bc8:	c5 01       	movw	r24, r10
    8bca:	b4 01       	movw	r22, r8
    8bcc:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8bd0:	a5 01       	movw	r20, r10
    8bd2:	94 01       	movw	r18, r8
    8bd4:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8bd8:	9b 01       	movw	r18, r22
    8bda:	ac 01       	movw	r20, r24
    8bdc:	c7 01       	movw	r24, r14
    8bde:	b6 01       	movw	r22, r12
    8be0:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8be4:	6b 01       	movw	r12, r22
    8be6:	7c 01       	movw	r14, r24
    8be8:	2a ee       	ldi	r18, 0xEA	; 234
    8bea:	3b e5       	ldi	r19, 0x5B	; 91
    8bec:	4c e1       	ldi	r20, 0x1C	; 28
    8bee:	50 e4       	ldi	r21, 0x40	; 64
    8bf0:	c5 01       	movw	r24, r10
    8bf2:	b4 01       	movw	r22, r8
    8bf4:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8bf8:	9b 01       	movw	r18, r22
    8bfa:	ac 01       	movw	r20, r24
    8bfc:	c7 01       	movw	r24, r14
    8bfe:	b6 01       	movw	r22, r12
    8c00:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8c04:	2e ea       	ldi	r18, 0xAE	; 174
    8c06:	3d e0       	ldi	r19, 0x0D	; 13
    8c08:	4a ec       	ldi	r20, 0xCA	; 202
    8c0a:	50 e4       	ldi	r21, 0x40	; 64
    8c0c:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8c10:	6b 01       	movw	r12, r22
    8c12:	7c 01       	movw	r14, r24
    8c14:	be 01       	movw	r22, r28
    8c16:	dd 0f       	add	r29, r29
    8c18:	88 0b       	sbc	r24, r24
    8c1a:	99 0b       	sbc	r25, r25
    8c1c:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    8c20:	9b 01       	movw	r18, r22
    8c22:	ac 01       	movw	r20, r24
    8c24:	c7 01       	movw	r24, r14
    8c26:	b6 01       	movw	r22, r12
    8c28:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8c2c:	56 c7       	rjmp	.+3756   	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    8c2e:	20 e0       	ldi	r18, 0x00	; 0
    8c30:	30 e0       	ldi	r19, 0x00	; 0
    8c32:	40 e1       	ldi	r20, 0x10	; 16
    8c34:	51 e4       	ldi	r21, 0x41	; 65
    8c36:	c7 01       	movw	r24, r14
    8c38:	b6 01       	movw	r22, r12
    8c3a:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    8c3e:	18 16       	cp	r1, r24
    8c40:	0c f0       	brlt	.+2      	; 0x8c44 <corectTrv+0xb3a>
    8c42:	54 c0       	rjmp	.+168    	; 0x8cec <corectTrv+0xbe2>
    8c44:	20 e0       	ldi	r18, 0x00	; 0
    8c46:	30 e0       	ldi	r19, 0x00	; 0
    8c48:	40 e2       	ldi	r20, 0x20	; 32
    8c4a:	51 e4       	ldi	r21, 0x41	; 65
    8c4c:	c7 01       	movw	r24, r14
    8c4e:	b6 01       	movw	r22, r12
    8c50:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    8c54:	18 16       	cp	r1, r24
    8c56:	0c f4       	brge	.+2      	; 0x8c5a <corectTrv+0xb50>
    8c58:	49 c0       	rjmp	.+146    	; 0x8cec <corectTrv+0xbe2>
		{
			return( 0.02106 * ds * ds * ds + 0.32749 * ds * ds + 2.67528 * ds + 8.74842)* k;
    8c5a:	25 e0       	ldi	r18, 0x05	; 5
    8c5c:	36 e8       	ldi	r19, 0x86	; 134
    8c5e:	4c ea       	ldi	r20, 0xAC	; 172
    8c60:	5c e3       	ldi	r21, 0x3C	; 60
    8c62:	c5 01       	movw	r24, r10
    8c64:	b4 01       	movw	r22, r8
    8c66:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8c6a:	a5 01       	movw	r20, r10
    8c6c:	94 01       	movw	r18, r8
    8c6e:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8c72:	a5 01       	movw	r20, r10
    8c74:	94 01       	movw	r18, r8
    8c76:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8c7a:	6b 01       	movw	r12, r22
    8c7c:	7c 01       	movw	r14, r24
    8c7e:	25 ec       	ldi	r18, 0xC5	; 197
    8c80:	3c ea       	ldi	r19, 0xAC	; 172
    8c82:	47 ea       	ldi	r20, 0xA7	; 167
    8c84:	5e e3       	ldi	r21, 0x3E	; 62
    8c86:	c5 01       	movw	r24, r10
    8c88:	b4 01       	movw	r22, r8
    8c8a:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8c8e:	a5 01       	movw	r20, r10
    8c90:	94 01       	movw	r18, r8
    8c92:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8c96:	9b 01       	movw	r18, r22
    8c98:	ac 01       	movw	r20, r24
    8c9a:	c7 01       	movw	r24, r14
    8c9c:	b6 01       	movw	r22, r12
    8c9e:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8ca2:	6b 01       	movw	r12, r22
    8ca4:	7c 01       	movw	r14, r24
    8ca6:	2a ec       	ldi	r18, 0xCA	; 202
    8ca8:	37 e3       	ldi	r19, 0x37	; 55
    8caa:	4b e2       	ldi	r20, 0x2B	; 43
    8cac:	50 e4       	ldi	r21, 0x40	; 64
    8cae:	c5 01       	movw	r24, r10
    8cb0:	b4 01       	movw	r22, r8
    8cb2:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8cb6:	9b 01       	movw	r18, r22
    8cb8:	ac 01       	movw	r20, r24
    8cba:	c7 01       	movw	r24, r14
    8cbc:	b6 01       	movw	r22, r12
    8cbe:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8cc2:	27 e8       	ldi	r18, 0x87	; 135
    8cc4:	39 ef       	ldi	r19, 0xF9	; 249
    8cc6:	4b e0       	ldi	r20, 0x0B	; 11
    8cc8:	51 e4       	ldi	r21, 0x41	; 65
    8cca:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8cce:	6b 01       	movw	r12, r22
    8cd0:	7c 01       	movw	r14, r24
    8cd2:	be 01       	movw	r22, r28
    8cd4:	dd 0f       	add	r29, r29
    8cd6:	88 0b       	sbc	r24, r24
    8cd8:	99 0b       	sbc	r25, r25
    8cda:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    8cde:	9b 01       	movw	r18, r22
    8ce0:	ac 01       	movw	r20, r24
    8ce2:	c7 01       	movw	r24, r14
    8ce4:	b6 01       	movw	r22, r12
    8ce6:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8cea:	f7 c6       	rjmp	.+3566   	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    8cec:	20 e0       	ldi	r18, 0x00	; 0
    8cee:	30 e0       	ldi	r19, 0x00	; 0
    8cf0:	40 e2       	ldi	r20, 0x20	; 32
    8cf2:	51 e4       	ldi	r21, 0x41	; 65
    8cf4:	c7 01       	movw	r24, r14
    8cf6:	b6 01       	movw	r22, r12
    8cf8:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    8cfc:	18 16       	cp	r1, r24
    8cfe:	0c f0       	brlt	.+2      	; 0x8d02 <corectTrv+0xbf8>
    8d00:	54 c0       	rjmp	.+168    	; 0x8daa <corectTrv+0xca0>
    8d02:	20 e0       	ldi	r18, 0x00	; 0
    8d04:	30 e0       	ldi	r19, 0x00	; 0
    8d06:	40 e3       	ldi	r20, 0x30	; 48
    8d08:	51 e4       	ldi	r21, 0x41	; 65
    8d0a:	c7 01       	movw	r24, r14
    8d0c:	b6 01       	movw	r22, r12
    8d0e:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    8d12:	18 16       	cp	r1, r24
    8d14:	0c f4       	brge	.+2      	; 0x8d18 <corectTrv+0xc0e>
    8d16:	49 c0       	rjmp	.+146    	; 0x8daa <corectTrv+0xca0>
		{
			return( 0.02252 * ds * ds * ds + 0.35182 * ds * ds + 2.76462 * ds + 11.25664)* k;
    8d18:	2d ed       	ldi	r18, 0xDD	; 221
    8d1a:	3b e7       	ldi	r19, 0x7B	; 123
    8d1c:	48 eb       	ldi	r20, 0xB8	; 184
    8d1e:	5c e3       	ldi	r21, 0x3C	; 60
    8d20:	c5 01       	movw	r24, r10
    8d22:	b4 01       	movw	r22, r8
    8d24:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8d28:	a5 01       	movw	r20, r10
    8d2a:	94 01       	movw	r18, r8
    8d2c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8d30:	a5 01       	movw	r20, r10
    8d32:	94 01       	movw	r18, r8
    8d34:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8d38:	6b 01       	movw	r12, r22
    8d3a:	7c 01       	movw	r14, r24
    8d3c:	20 ec       	ldi	r18, 0xC0	; 192
    8d3e:	31 e2       	ldi	r19, 0x21	; 33
    8d40:	44 eb       	ldi	r20, 0xB4	; 180
    8d42:	5e e3       	ldi	r21, 0x3E	; 62
    8d44:	c5 01       	movw	r24, r10
    8d46:	b4 01       	movw	r22, r8
    8d48:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8d4c:	a5 01       	movw	r20, r10
    8d4e:	94 01       	movw	r18, r8
    8d50:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8d54:	9b 01       	movw	r18, r22
    8d56:	ac 01       	movw	r20, r24
    8d58:	c7 01       	movw	r24, r14
    8d5a:	b6 01       	movw	r22, r12
    8d5c:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8d60:	6b 01       	movw	r12, r22
    8d62:	7c 01       	movw	r14, r24
    8d64:	29 e8       	ldi	r18, 0x89	; 137
    8d66:	3f ee       	ldi	r19, 0xEF	; 239
    8d68:	40 e3       	ldi	r20, 0x30	; 48
    8d6a:	50 e4       	ldi	r21, 0x40	; 64
    8d6c:	c5 01       	movw	r24, r10
    8d6e:	b4 01       	movw	r22, r8
    8d70:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8d74:	9b 01       	movw	r18, r22
    8d76:	ac 01       	movw	r20, r24
    8d78:	c7 01       	movw	r24, r14
    8d7a:	b6 01       	movw	r22, r12
    8d7c:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8d80:	23 e3       	ldi	r18, 0x33	; 51
    8d82:	3b e1       	ldi	r19, 0x1B	; 27
    8d84:	44 e3       	ldi	r20, 0x34	; 52
    8d86:	51 e4       	ldi	r21, 0x41	; 65
    8d88:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8d8c:	6b 01       	movw	r12, r22
    8d8e:	7c 01       	movw	r14, r24
    8d90:	be 01       	movw	r22, r28
    8d92:	dd 0f       	add	r29, r29
    8d94:	88 0b       	sbc	r24, r24
    8d96:	99 0b       	sbc	r25, r25
    8d98:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    8d9c:	9b 01       	movw	r18, r22
    8d9e:	ac 01       	movw	r20, r24
    8da0:	c7 01       	movw	r24, r14
    8da2:	b6 01       	movw	r22, r12
    8da4:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8da8:	98 c6       	rjmp	.+3376   	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    8daa:	20 e0       	ldi	r18, 0x00	; 0
    8dac:	30 e0       	ldi	r19, 0x00	; 0
    8dae:	40 e3       	ldi	r20, 0x30	; 48
    8db0:	51 e4       	ldi	r21, 0x41	; 65
    8db2:	c7 01       	movw	r24, r14
    8db4:	b6 01       	movw	r22, r12
    8db6:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    8dba:	18 16       	cp	r1, r24
    8dbc:	0c f0       	brlt	.+2      	; 0x8dc0 <corectTrv+0xcb6>
    8dbe:	54 c0       	rjmp	.+168    	; 0x8e68 <corectTrv+0xd5e>
    8dc0:	20 e0       	ldi	r18, 0x00	; 0
    8dc2:	30 e0       	ldi	r19, 0x00	; 0
    8dc4:	40 e4       	ldi	r20, 0x40	; 64
    8dc6:	51 e4       	ldi	r21, 0x41	; 65
    8dc8:	c7 01       	movw	r24, r14
    8dca:	b6 01       	movw	r22, r12
    8dcc:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    8dd0:	18 16       	cp	r1, r24
    8dd2:	0c f4       	brge	.+2      	; 0x8dd6 <corectTrv+0xccc>
    8dd4:	49 c0       	rjmp	.+146    	; 0x8e68 <corectTrv+0xd5e>
		{
			return( 0.01251 * ds * ds * ds + 0.18754 * ds * ds + 2.12069 * ds + 14.98441)* k;
    8dd6:	2e eb       	ldi	r18, 0xBE	; 190
    8dd8:	36 ef       	ldi	r19, 0xF6	; 246
    8dda:	4c e4       	ldi	r20, 0x4C	; 76
    8ddc:	5c e3       	ldi	r21, 0x3C	; 60
    8dde:	c5 01       	movw	r24, r10
    8de0:	b4 01       	movw	r22, r8
    8de2:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8de6:	a5 01       	movw	r20, r10
    8de8:	94 01       	movw	r18, r8
    8dea:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8dee:	a5 01       	movw	r20, r10
    8df0:	94 01       	movw	r18, r8
    8df2:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8df6:	6b 01       	movw	r12, r22
    8df8:	7c 01       	movw	r14, r24
    8dfa:	2c e7       	ldi	r18, 0x7C	; 124
    8dfc:	3a e0       	ldi	r19, 0x0A	; 10
    8dfe:	40 e4       	ldi	r20, 0x40	; 64
    8e00:	5e e3       	ldi	r21, 0x3E	; 62
    8e02:	c5 01       	movw	r24, r10
    8e04:	b4 01       	movw	r22, r8
    8e06:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8e0a:	a5 01       	movw	r20, r10
    8e0c:	94 01       	movw	r18, r8
    8e0e:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8e12:	9b 01       	movw	r18, r22
    8e14:	ac 01       	movw	r20, r24
    8e16:	c7 01       	movw	r24, r14
    8e18:	b6 01       	movw	r22, r12
    8e1a:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8e1e:	6b 01       	movw	r12, r22
    8e20:	7c 01       	movw	r14, r24
    8e22:	23 e6       	ldi	r18, 0x63	; 99
    8e24:	39 eb       	ldi	r19, 0xB9	; 185
    8e26:	47 e0       	ldi	r20, 0x07	; 7
    8e28:	50 e4       	ldi	r21, 0x40	; 64
    8e2a:	c5 01       	movw	r24, r10
    8e2c:	b4 01       	movw	r22, r8
    8e2e:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8e32:	9b 01       	movw	r18, r22
    8e34:	ac 01       	movw	r20, r24
    8e36:	c7 01       	movw	r24, r14
    8e38:	b6 01       	movw	r22, r12
    8e3a:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8e3e:	25 e2       	ldi	r18, 0x25	; 37
    8e40:	30 ec       	ldi	r19, 0xC0	; 192
    8e42:	4f e6       	ldi	r20, 0x6F	; 111
    8e44:	51 e4       	ldi	r21, 0x41	; 65
    8e46:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8e4a:	6b 01       	movw	r12, r22
    8e4c:	7c 01       	movw	r14, r24
    8e4e:	be 01       	movw	r22, r28
    8e50:	dd 0f       	add	r29, r29
    8e52:	88 0b       	sbc	r24, r24
    8e54:	99 0b       	sbc	r25, r25
    8e56:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    8e5a:	9b 01       	movw	r18, r22
    8e5c:	ac 01       	movw	r20, r24
    8e5e:	c7 01       	movw	r24, r14
    8e60:	b6 01       	movw	r22, r12
    8e62:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8e66:	39 c6       	rjmp	.+3186   	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    8e68:	20 e0       	ldi	r18, 0x00	; 0
    8e6a:	30 e0       	ldi	r19, 0x00	; 0
    8e6c:	40 e4       	ldi	r20, 0x40	; 64
    8e6e:	51 e4       	ldi	r21, 0x41	; 65
    8e70:	c7 01       	movw	r24, r14
    8e72:	b6 01       	movw	r22, r12
    8e74:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    8e78:	18 16       	cp	r1, r24
    8e7a:	dc f5       	brge	.+118    	; 0x8ef2 <corectTrv+0xde8>
    8e7c:	20 e0       	ldi	r18, 0x00	; 0
    8e7e:	30 e0       	ldi	r19, 0x00	; 0
    8e80:	40 e5       	ldi	r20, 0x50	; 80
    8e82:	51 e4       	ldi	r21, 0x41	; 65
    8e84:	c7 01       	movw	r24, r14
    8e86:	b6 01       	movw	r22, r12
    8e88:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    8e8c:	18 16       	cp	r1, r24
    8e8e:	8c f1       	brlt	.+98     	; 0x8ef2 <corectTrv+0xde8>
		{
			return(0.062 * ds * ds + 1.818 * ds + 15.22)* k;
    8e90:	26 eb       	ldi	r18, 0xB6	; 182
    8e92:	33 ef       	ldi	r19, 0xF3	; 243
    8e94:	4d e7       	ldi	r20, 0x7D	; 125
    8e96:	5d e3       	ldi	r21, 0x3D	; 61
    8e98:	c5 01       	movw	r24, r10
    8e9a:	b4 01       	movw	r22, r8
    8e9c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8ea0:	a5 01       	movw	r20, r10
    8ea2:	94 01       	movw	r18, r8
    8ea4:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8ea8:	6b 01       	movw	r12, r22
    8eaa:	7c 01       	movw	r14, r24
    8eac:	29 e3       	ldi	r18, 0x39	; 57
    8eae:	34 eb       	ldi	r19, 0xB4	; 180
    8eb0:	48 ee       	ldi	r20, 0xE8	; 232
    8eb2:	5f e3       	ldi	r21, 0x3F	; 63
    8eb4:	c5 01       	movw	r24, r10
    8eb6:	b4 01       	movw	r22, r8
    8eb8:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8ebc:	9b 01       	movw	r18, r22
    8ebe:	ac 01       	movw	r20, r24
    8ec0:	c7 01       	movw	r24, r14
    8ec2:	b6 01       	movw	r22, r12
    8ec4:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8ec8:	2f e1       	ldi	r18, 0x1F	; 31
    8eca:	35 e8       	ldi	r19, 0x85	; 133
    8ecc:	43 e7       	ldi	r20, 0x73	; 115
    8ece:	51 e4       	ldi	r21, 0x41	; 65
    8ed0:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8ed4:	6b 01       	movw	r12, r22
    8ed6:	7c 01       	movw	r14, r24
    8ed8:	be 01       	movw	r22, r28
    8eda:	dd 0f       	add	r29, r29
    8edc:	88 0b       	sbc	r24, r24
    8ede:	99 0b       	sbc	r25, r25
    8ee0:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    8ee4:	9b 01       	movw	r18, r22
    8ee6:	ac 01       	movw	r20, r24
    8ee8:	c7 01       	movw	r24, r14
    8eea:	b6 01       	movw	r22, r12
    8eec:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8ef0:	f4 c5       	rjmp	.+3048   	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    8ef2:	20 e0       	ldi	r18, 0x00	; 0
    8ef4:	30 e0       	ldi	r19, 0x00	; 0
    8ef6:	40 e5       	ldi	r20, 0x50	; 80
    8ef8:	51 e4       	ldi	r21, 0x41	; 65
    8efa:	c7 01       	movw	r24, r14
    8efc:	b6 01       	movw	r22, r12
    8efe:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    8f02:	18 16       	cp	r1, r24
    8f04:	dc f5       	brge	.+118    	; 0x8f7c <corectTrv+0xe72>
    8f06:	20 e0       	ldi	r18, 0x00	; 0
    8f08:	30 e0       	ldi	r19, 0x00	; 0
    8f0a:	40 e6       	ldi	r20, 0x60	; 96
    8f0c:	51 e4       	ldi	r21, 0x41	; 65
    8f0e:	c7 01       	movw	r24, r14
    8f10:	b6 01       	movw	r22, r12
    8f12:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    8f16:	18 16       	cp	r1, r24
    8f18:	8c f1       	brlt	.+98     	; 0x8f7c <corectTrv+0xe72>
		{
			return( 0.097 * ds * ds + 1.941 * ds + 16.00)* k;
    8f1a:	20 ef       	ldi	r18, 0xF0	; 240
    8f1c:	37 ea       	ldi	r19, 0xA7	; 167
    8f1e:	46 ec       	ldi	r20, 0xC6	; 198
    8f20:	5d e3       	ldi	r21, 0x3D	; 61
    8f22:	c5 01       	movw	r24, r10
    8f24:	b4 01       	movw	r22, r8
    8f26:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8f2a:	a5 01       	movw	r20, r10
    8f2c:	94 01       	movw	r18, r8
    8f2e:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8f32:	6b 01       	movw	r12, r22
    8f34:	7c 01       	movw	r14, r24
    8f36:	20 eb       	ldi	r18, 0xB0	; 176
    8f38:	32 e7       	ldi	r19, 0x72	; 114
    8f3a:	48 ef       	ldi	r20, 0xF8	; 248
    8f3c:	5f e3       	ldi	r21, 0x3F	; 63
    8f3e:	c5 01       	movw	r24, r10
    8f40:	b4 01       	movw	r22, r8
    8f42:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8f46:	9b 01       	movw	r18, r22
    8f48:	ac 01       	movw	r20, r24
    8f4a:	c7 01       	movw	r24, r14
    8f4c:	b6 01       	movw	r22, r12
    8f4e:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8f52:	20 e0       	ldi	r18, 0x00	; 0
    8f54:	30 e0       	ldi	r19, 0x00	; 0
    8f56:	40 e8       	ldi	r20, 0x80	; 128
    8f58:	51 e4       	ldi	r21, 0x41	; 65
    8f5a:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8f5e:	6b 01       	movw	r12, r22
    8f60:	7c 01       	movw	r14, r24
    8f62:	be 01       	movw	r22, r28
    8f64:	dd 0f       	add	r29, r29
    8f66:	88 0b       	sbc	r24, r24
    8f68:	99 0b       	sbc	r25, r25
    8f6a:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    8f6e:	9b 01       	movw	r18, r22
    8f70:	ac 01       	movw	r20, r24
    8f72:	c7 01       	movw	r24, r14
    8f74:	b6 01       	movw	r22, r12
    8f76:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8f7a:	af c5       	rjmp	.+2910   	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    8f7c:	20 e0       	ldi	r18, 0x00	; 0
    8f7e:	30 e0       	ldi	r19, 0x00	; 0
    8f80:	40 e6       	ldi	r20, 0x60	; 96
    8f82:	51 e4       	ldi	r21, 0x41	; 65
    8f84:	c7 01       	movw	r24, r14
    8f86:	b6 01       	movw	r22, r12
    8f88:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    8f8c:	18 16       	cp	r1, r24
    8f8e:	0c f0       	brlt	.+2      	; 0x8f92 <corectTrv+0xe88>
    8f90:	54 c0       	rjmp	.+168    	; 0x903a <corectTrv+0xf30>
    8f92:	20 e0       	ldi	r18, 0x00	; 0
    8f94:	30 e0       	ldi	r19, 0x00	; 0
    8f96:	40 e7       	ldi	r20, 0x70	; 112
    8f98:	51 e4       	ldi	r21, 0x41	; 65
    8f9a:	c7 01       	movw	r24, r14
    8f9c:	b6 01       	movw	r22, r12
    8f9e:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    8fa2:	18 16       	cp	r1, r24
    8fa4:	0c f4       	brge	.+2      	; 0x8fa8 <corectTrv+0xe9e>
    8fa6:	49 c0       	rjmp	.+146    	; 0x903a <corectTrv+0xf30>
		{
			return( 0.01598 * ds * ds * ds + 0.35913 * ds * ds + 2.90559 * ds + 17.70294)* k;
    8fa8:	2d e7       	ldi	r18, 0x7D	; 125
    8faa:	38 ee       	ldi	r19, 0xE8	; 232
    8fac:	42 e8       	ldi	r20, 0x82	; 130
    8fae:	5c e3       	ldi	r21, 0x3C	; 60
    8fb0:	c5 01       	movw	r24, r10
    8fb2:	b4 01       	movw	r22, r8
    8fb4:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8fb8:	a5 01       	movw	r20, r10
    8fba:	94 01       	movw	r18, r8
    8fbc:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8fc0:	a5 01       	movw	r20, r10
    8fc2:	94 01       	movw	r18, r8
    8fc4:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8fc8:	6b 01       	movw	r12, r22
    8fca:	7c 01       	movw	r14, r24
    8fcc:	23 ee       	ldi	r18, 0xE3	; 227
    8fce:	3f ed       	ldi	r19, 0xDF	; 223
    8fd0:	47 eb       	ldi	r20, 0xB7	; 183
    8fd2:	5e e3       	ldi	r21, 0x3E	; 62
    8fd4:	c5 01       	movw	r24, r10
    8fd6:	b4 01       	movw	r22, r8
    8fd8:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8fdc:	a5 01       	movw	r20, r10
    8fde:	94 01       	movw	r18, r8
    8fe0:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    8fe4:	9b 01       	movw	r18, r22
    8fe6:	ac 01       	movw	r20, r24
    8fe8:	c7 01       	movw	r24, r14
    8fea:	b6 01       	movw	r22, r12
    8fec:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    8ff0:	6b 01       	movw	r12, r22
    8ff2:	7c 01       	movw	r14, r24
    8ff4:	20 e3       	ldi	r18, 0x30	; 48
    8ff6:	35 ef       	ldi	r19, 0xF5	; 245
    8ff8:	49 e3       	ldi	r20, 0x39	; 57
    8ffa:	50 e4       	ldi	r21, 0x40	; 64
    8ffc:	c5 01       	movw	r24, r10
    8ffe:	b4 01       	movw	r22, r8
    9000:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9004:	9b 01       	movw	r18, r22
    9006:	ac 01       	movw	r20, r24
    9008:	c7 01       	movw	r24, r14
    900a:	b6 01       	movw	r22, r12
    900c:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    9010:	2f e9       	ldi	r18, 0x9F	; 159
    9012:	3f e9       	ldi	r19, 0x9F	; 159
    9014:	4d e8       	ldi	r20, 0x8D	; 141
    9016:	51 e4       	ldi	r21, 0x41	; 65
    9018:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    901c:	6b 01       	movw	r12, r22
    901e:	7c 01       	movw	r14, r24
    9020:	be 01       	movw	r22, r28
    9022:	dd 0f       	add	r29, r29
    9024:	88 0b       	sbc	r24, r24
    9026:	99 0b       	sbc	r25, r25
    9028:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    902c:	9b 01       	movw	r18, r22
    902e:	ac 01       	movw	r20, r24
    9030:	c7 01       	movw	r24, r14
    9032:	b6 01       	movw	r22, r12
    9034:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9038:	50 c5       	rjmp	.+2720   	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    903a:	20 e0       	ldi	r18, 0x00	; 0
    903c:	30 e0       	ldi	r19, 0x00	; 0
    903e:	40 e7       	ldi	r20, 0x70	; 112
    9040:	51 e4       	ldi	r21, 0x41	; 65
    9042:	c7 01       	movw	r24, r14
    9044:	b6 01       	movw	r22, r12
    9046:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    904a:	18 16       	cp	r1, r24
    904c:	0c f0       	brlt	.+2      	; 0x9050 <corectTrv+0xf46>
    904e:	54 c0       	rjmp	.+168    	; 0x90f8 <corectTrv+0xfee>
    9050:	20 e0       	ldi	r18, 0x00	; 0
    9052:	30 e0       	ldi	r19, 0x00	; 0
    9054:	40 e8       	ldi	r20, 0x80	; 128
    9056:	51 e4       	ldi	r21, 0x41	; 65
    9058:	c7 01       	movw	r24, r14
    905a:	b6 01       	movw	r22, r12
    905c:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    9060:	18 16       	cp	r1, r24
    9062:	0c f4       	brge	.+2      	; 0x9066 <corectTrv+0xf5c>
    9064:	49 c0       	rjmp	.+146    	; 0x90f8 <corectTrv+0xfee>
		{
			return( 0.02358 * ds * ds * ds + 0.48252 * ds * ds + 3.36313 * ds + 20.09441)* k;
    9066:	28 ed       	ldi	r18, 0xD8	; 216
    9068:	3a e2       	ldi	r19, 0x2A	; 42
    906a:	41 ec       	ldi	r20, 0xC1	; 193
    906c:	5c e3       	ldi	r21, 0x3C	; 60
    906e:	c5 01       	movw	r24, r10
    9070:	b4 01       	movw	r22, r8
    9072:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9076:	a5 01       	movw	r20, r10
    9078:	94 01       	movw	r18, r8
    907a:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    907e:	a5 01       	movw	r20, r10
    9080:	94 01       	movw	r18, r8
    9082:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9086:	6b 01       	movw	r12, r22
    9088:	7c 01       	movw	r14, r24
    908a:	2d ed       	ldi	r18, 0xDD	; 221
    908c:	3c e0       	ldi	r19, 0x0C	; 12
    908e:	47 ef       	ldi	r20, 0xF7	; 247
    9090:	5e e3       	ldi	r21, 0x3E	; 62
    9092:	c5 01       	movw	r24, r10
    9094:	b4 01       	movw	r22, r8
    9096:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    909a:	a5 01       	movw	r20, r10
    909c:	94 01       	movw	r18, r8
    909e:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    90a2:	9b 01       	movw	r18, r22
    90a4:	ac 01       	movw	r20, r24
    90a6:	c7 01       	movw	r24, r14
    90a8:	b6 01       	movw	r22, r12
    90aa:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    90ae:	6b 01       	movw	r12, r22
    90b0:	7c 01       	movw	r14, r24
    90b2:	26 e8       	ldi	r18, 0x86	; 134
    90b4:	3d e3       	ldi	r19, 0x3D	; 61
    90b6:	47 e5       	ldi	r20, 0x57	; 87
    90b8:	50 e4       	ldi	r21, 0x40	; 64
    90ba:	c5 01       	movw	r24, r10
    90bc:	b4 01       	movw	r22, r8
    90be:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    90c2:	9b 01       	movw	r18, r22
    90c4:	ac 01       	movw	r20, r24
    90c6:	c7 01       	movw	r24, r14
    90c8:	b6 01       	movw	r22, r12
    90ca:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    90ce:	2a e5       	ldi	r18, 0x5A	; 90
    90d0:	31 ec       	ldi	r19, 0xC1	; 193
    90d2:	40 ea       	ldi	r20, 0xA0	; 160
    90d4:	51 e4       	ldi	r21, 0x41	; 65
    90d6:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    90da:	6b 01       	movw	r12, r22
    90dc:	7c 01       	movw	r14, r24
    90de:	be 01       	movw	r22, r28
    90e0:	dd 0f       	add	r29, r29
    90e2:	88 0b       	sbc	r24, r24
    90e4:	99 0b       	sbc	r25, r25
    90e6:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    90ea:	9b 01       	movw	r18, r22
    90ec:	ac 01       	movw	r20, r24
    90ee:	c7 01       	movw	r24, r14
    90f0:	b6 01       	movw	r22, r12
    90f2:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    90f6:	f1 c4       	rjmp	.+2530   	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 9)
    90f8:	20 e0       	ldi	r18, 0x00	; 0
    90fa:	30 e0       	ldi	r19, 0x00	; 0
    90fc:	40 e8       	ldi	r20, 0x80	; 128
    90fe:	51 e4       	ldi	r21, 0x41	; 65
    9100:	c7 01       	movw	r24, r14
    9102:	b6 01       	movw	r22, r12
    9104:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    9108:	18 16       	cp	r1, r24
    910a:	0c f0       	brlt	.+2      	; 0x910e <corectTrv+0x1004>
    910c:	d7 c4       	rjmp	.+2478   	; 0x9abc <corectTrv+0x19b2>
		{
			return( 0.01076 * ds * ds * ds + 0.28823 * ds * ds + 2.82362 * ds + 25.08042)* k;
    910e:	26 eb       	ldi	r18, 0xB6	; 182
    9110:	3a e4       	ldi	r19, 0x4A	; 74
    9112:	40 e3       	ldi	r20, 0x30	; 48
    9114:	5c e3       	ldi	r21, 0x3C	; 60
    9116:	c5 01       	movw	r24, r10
    9118:	b4 01       	movw	r22, r8
    911a:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    911e:	a5 01       	movw	r20, r10
    9120:	94 01       	movw	r18, r8
    9122:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9126:	a5 01       	movw	r20, r10
    9128:	94 01       	movw	r18, r8
    912a:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    912e:	6b 01       	movw	r12, r22
    9130:	7c 01       	movw	r14, r24
    9132:	22 ee       	ldi	r18, 0xE2	; 226
    9134:	32 e9       	ldi	r19, 0x92	; 146
    9136:	43 e9       	ldi	r20, 0x93	; 147
    9138:	5e e3       	ldi	r21, 0x3E	; 62
    913a:	c5 01       	movw	r24, r10
    913c:	b4 01       	movw	r22, r8
    913e:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9142:	a5 01       	movw	r20, r10
    9144:	94 01       	movw	r18, r8
    9146:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    914a:	9b 01       	movw	r18, r22
    914c:	ac 01       	movw	r20, r24
    914e:	c7 01       	movw	r24, r14
    9150:	b6 01       	movw	r22, r12
    9152:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    9156:	6b 01       	movw	r12, r22
    9158:	7c 01       	movw	r14, r24
    915a:	21 e3       	ldi	r18, 0x31	; 49
    915c:	36 eb       	ldi	r19, 0xB6	; 182
    915e:	44 e3       	ldi	r20, 0x34	; 52
    9160:	50 e4       	ldi	r21, 0x40	; 64
    9162:	c5 01       	movw	r24, r10
    9164:	b4 01       	movw	r22, r8
    9166:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    916a:	9b 01       	movw	r18, r22
    916c:	ac 01       	movw	r20, r24
    916e:	c7 01       	movw	r24, r14
    9170:	b6 01       	movw	r22, r12
    9172:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    9176:	23 eb       	ldi	r18, 0xB3	; 179
    9178:	34 ea       	ldi	r19, 0xA4	; 164
    917a:	48 ec       	ldi	r20, 0xC8	; 200
    917c:	51 e4       	ldi	r21, 0x41	; 65
    917e:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    9182:	6b 01       	movw	r12, r22
    9184:	7c 01       	movw	r14, r24
    9186:	be 01       	movw	r22, r28
    9188:	dd 0f       	add	r29, r29
    918a:	88 0b       	sbc	r24, r24
    918c:	99 0b       	sbc	r25, r25
    918e:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    9192:	9b 01       	movw	r18, r22
    9194:	ac 01       	movw	r20, r24
    9196:	c7 01       	movw	r24, r14
    9198:	b6 01       	movw	r22, r12
    919a:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    919e:	9d c4       	rjmp	.+2362   	; 0x9ada <corectTrv+0x19d0>
		}
	}

	else if (ds >= 0 && ds <= 10)
    91a0:	20 e0       	ldi	r18, 0x00	; 0
    91a2:	30 e0       	ldi	r19, 0x00	; 0
    91a4:	a9 01       	movw	r20, r18
    91a6:	c5 01       	movw	r24, r10
    91a8:	b4 01       	movw	r22, r8
    91aa:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    91ae:	88 23       	and	r24, r24
    91b0:	0c f4       	brge	.+2      	; 0x91b4 <corectTrv+0x10aa>
    91b2:	e7 c2       	rjmp	.+1486   	; 0x9782 <corectTrv+0x1678>
    91b4:	20 e0       	ldi	r18, 0x00	; 0
    91b6:	30 e0       	ldi	r19, 0x00	; 0
    91b8:	40 e2       	ldi	r20, 0x20	; 32
    91ba:	51 e4       	ldi	r21, 0x41	; 65
    91bc:	c5 01       	movw	r24, r10
    91be:	b4 01       	movw	r22, r8
    91c0:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    91c4:	18 16       	cp	r1, r24
    91c6:	0c f4       	brge	.+2      	; 0x91ca <corectTrv+0x10c0>
    91c8:	dc c2       	rjmp	.+1464   	; 0x9782 <corectTrv+0x1678>
	{
		if (Superheat == SSet)
    91ca:	20 e0       	ldi	r18, 0x00	; 0
    91cc:	30 e0       	ldi	r19, 0x00	; 0
    91ce:	40 ee       	ldi	r20, 0xE0	; 224
    91d0:	50 e4       	ldi	r21, 0x40	; 64
    91d2:	c7 01       	movw	r24, r14
    91d4:	b6 01       	movw	r22, r12
    91d6:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    91da:	81 11       	cpse	r24, r1
    91dc:	2b c0       	rjmp	.+86     	; 0x9234 <corectTrv+0x112a>
		{
			return( -2 * .00001 * ds * ds + 1.406 * ds)* k;
    91de:	2c ea       	ldi	r18, 0xAC	; 172
    91e0:	35 ec       	ldi	r19, 0xC5	; 197
    91e2:	47 ea       	ldi	r20, 0xA7	; 167
    91e4:	57 eb       	ldi	r21, 0xB7	; 183
    91e6:	c5 01       	movw	r24, r10
    91e8:	b4 01       	movw	r22, r8
    91ea:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    91ee:	a5 01       	movw	r20, r10
    91f0:	94 01       	movw	r18, r8
    91f2:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    91f6:	6b 01       	movw	r12, r22
    91f8:	7c 01       	movw	r14, r24
    91fa:	2f ec       	ldi	r18, 0xCF	; 207
    91fc:	37 ef       	ldi	r19, 0xF7	; 247
    91fe:	43 eb       	ldi	r20, 0xB3	; 179
    9200:	5f e3       	ldi	r21, 0x3F	; 63
    9202:	c5 01       	movw	r24, r10
    9204:	b4 01       	movw	r22, r8
    9206:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    920a:	9b 01       	movw	r18, r22
    920c:	ac 01       	movw	r20, r24
    920e:	c7 01       	movw	r24, r14
    9210:	b6 01       	movw	r22, r12
    9212:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    9216:	6b 01       	movw	r12, r22
    9218:	7c 01       	movw	r14, r24
    921a:	be 01       	movw	r22, r28
    921c:	dd 0f       	add	r29, r29
    921e:	88 0b       	sbc	r24, r24
    9220:	99 0b       	sbc	r25, r25
    9222:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    9226:	9b 01       	movw	r18, r22
    9228:	ac 01       	movw	r20, r24
    922a:	c7 01       	movw	r24, r14
    922c:	b6 01       	movw	r22, r12
    922e:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9232:	53 c4       	rjmp	.+2214   	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    9234:	20 e0       	ldi	r18, 0x00	; 0
    9236:	30 e0       	ldi	r19, 0x00	; 0
    9238:	40 ee       	ldi	r20, 0xE0	; 224
    923a:	50 e4       	ldi	r21, 0x40	; 64
    923c:	c7 01       	movw	r24, r14
    923e:	b6 01       	movw	r22, r12
    9240:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    9244:	18 16       	cp	r1, r24
    9246:	dc f5       	brge	.+118    	; 0x92be <corectTrv+0x11b4>
    9248:	20 e0       	ldi	r18, 0x00	; 0
    924a:	30 e0       	ldi	r19, 0x00	; 0
    924c:	40 e0       	ldi	r20, 0x00	; 0
    924e:	51 e4       	ldi	r21, 0x41	; 65
    9250:	c7 01       	movw	r24, r14
    9252:	b6 01       	movw	r22, r12
    9254:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    9258:	18 16       	cp	r1, r24
    925a:	8c f1       	brlt	.+98     	; 0x92be <corectTrv+0x11b4>
		{
			return( 0.062 * ds * ds + 0.570 * ds + 3.280)* k;
    925c:	26 eb       	ldi	r18, 0xB6	; 182
    925e:	33 ef       	ldi	r19, 0xF3	; 243
    9260:	4d e7       	ldi	r20, 0x7D	; 125
    9262:	5d e3       	ldi	r21, 0x3D	; 61
    9264:	c5 01       	movw	r24, r10
    9266:	b4 01       	movw	r22, r8
    9268:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    926c:	a5 01       	movw	r20, r10
    926e:	94 01       	movw	r18, r8
    9270:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9274:	6b 01       	movw	r12, r22
    9276:	7c 01       	movw	r14, r24
    9278:	25 e8       	ldi	r18, 0x85	; 133
    927a:	3b ee       	ldi	r19, 0xEB	; 235
    927c:	41 e1       	ldi	r20, 0x11	; 17
    927e:	5f e3       	ldi	r21, 0x3F	; 63
    9280:	c5 01       	movw	r24, r10
    9282:	b4 01       	movw	r22, r8
    9284:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9288:	9b 01       	movw	r18, r22
    928a:	ac 01       	movw	r20, r24
    928c:	c7 01       	movw	r24, r14
    928e:	b6 01       	movw	r22, r12
    9290:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    9294:	25 e8       	ldi	r18, 0x85	; 133
    9296:	3b ee       	ldi	r19, 0xEB	; 235
    9298:	41 e5       	ldi	r20, 0x51	; 81
    929a:	50 e4       	ldi	r21, 0x40	; 64
    929c:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    92a0:	6b 01       	movw	r12, r22
    92a2:	7c 01       	movw	r14, r24
    92a4:	be 01       	movw	r22, r28
    92a6:	dd 0f       	add	r29, r29
    92a8:	88 0b       	sbc	r24, r24
    92aa:	99 0b       	sbc	r25, r25
    92ac:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    92b0:	9b 01       	movw	r18, r22
    92b2:	ac 01       	movw	r20, r24
    92b4:	c7 01       	movw	r24, r14
    92b6:	b6 01       	movw	r22, r12
    92b8:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    92bc:	0e c4       	rjmp	.+2076   	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    92be:	20 e0       	ldi	r18, 0x00	; 0
    92c0:	30 e0       	ldi	r19, 0x00	; 0
    92c2:	40 e0       	ldi	r20, 0x00	; 0
    92c4:	51 e4       	ldi	r21, 0x41	; 65
    92c6:	c7 01       	movw	r24, r14
    92c8:	b6 01       	movw	r22, r12
    92ca:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    92ce:	18 16       	cp	r1, r24
    92d0:	dc f5       	brge	.+118    	; 0x9348 <corectTrv+0x123e>
    92d2:	20 e0       	ldi	r18, 0x00	; 0
    92d4:	30 e0       	ldi	r19, 0x00	; 0
    92d6:	40 e1       	ldi	r20, 0x10	; 16
    92d8:	51 e4       	ldi	r21, 0x41	; 65
    92da:	c7 01       	movw	r24, r14
    92dc:	b6 01       	movw	r22, r12
    92de:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    92e2:	18 16       	cp	r1, r24
    92e4:	8c f1       	brlt	.+98     	; 0x9348 <corectTrv+0x123e>
		{
			return( 0.099 * ds * ds - 0.019 * ds + 6.338)* k;
    92e6:	23 e8       	ldi	r18, 0x83	; 131
    92e8:	30 ec       	ldi	r19, 0xC0	; 192
    92ea:	4a ec       	ldi	r20, 0xCA	; 202
    92ec:	5d e3       	ldi	r21, 0x3D	; 61
    92ee:	c5 01       	movw	r24, r10
    92f0:	b4 01       	movw	r22, r8
    92f2:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    92f6:	a5 01       	movw	r20, r10
    92f8:	94 01       	movw	r18, r8
    92fa:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    92fe:	6b 01       	movw	r12, r22
    9300:	7c 01       	movw	r14, r24
    9302:	23 ee       	ldi	r18, 0xE3	; 227
    9304:	35 ea       	ldi	r19, 0xA5	; 165
    9306:	4b e9       	ldi	r20, 0x9B	; 155
    9308:	5c e3       	ldi	r21, 0x3C	; 60
    930a:	c5 01       	movw	r24, r10
    930c:	b4 01       	movw	r22, r8
    930e:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9312:	9b 01       	movw	r18, r22
    9314:	ac 01       	movw	r20, r24
    9316:	c7 01       	movw	r24, r14
    9318:	b6 01       	movw	r22, r12
    931a:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    931e:	25 ee       	ldi	r18, 0xE5	; 229
    9320:	30 ed       	ldi	r19, 0xD0	; 208
    9322:	4a ec       	ldi	r20, 0xCA	; 202
    9324:	50 e4       	ldi	r21, 0x40	; 64
    9326:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    932a:	6b 01       	movw	r12, r22
    932c:	7c 01       	movw	r14, r24
    932e:	be 01       	movw	r22, r28
    9330:	dd 0f       	add	r29, r29
    9332:	88 0b       	sbc	r24, r24
    9334:	99 0b       	sbc	r25, r25
    9336:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    933a:	9b 01       	movw	r18, r22
    933c:	ac 01       	movw	r20, r24
    933e:	c7 01       	movw	r24, r14
    9340:	b6 01       	movw	r22, r12
    9342:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9346:	c9 c3       	rjmp	.+1938   	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    9348:	20 e0       	ldi	r18, 0x00	; 0
    934a:	30 e0       	ldi	r19, 0x00	; 0
    934c:	40 e1       	ldi	r20, 0x10	; 16
    934e:	51 e4       	ldi	r21, 0x41	; 65
    9350:	c7 01       	movw	r24, r14
    9352:	b6 01       	movw	r22, r12
    9354:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    9358:	18 16       	cp	r1, r24
    935a:	dc f5       	brge	.+118    	; 0x93d2 <corectTrv+0x12c8>
    935c:	20 e0       	ldi	r18, 0x00	; 0
    935e:	30 e0       	ldi	r19, 0x00	; 0
    9360:	40 e2       	ldi	r20, 0x20	; 32
    9362:	51 e4       	ldi	r21, 0x41	; 65
    9364:	c7 01       	movw	r24, r14
    9366:	b6 01       	movw	r22, r12
    9368:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    936c:	18 16       	cp	r1, r24
    936e:	8c f1       	brlt	.+98     	; 0x93d2 <corectTrv+0x12c8>
		{
			return( 0.121 * ds * ds - 0.409 * ds + 9.164)* k;
    9370:	29 ed       	ldi	r18, 0xD9	; 217
    9372:	3e ec       	ldi	r19, 0xCE	; 206
    9374:	47 ef       	ldi	r20, 0xF7	; 247
    9376:	5d e3       	ldi	r21, 0x3D	; 61
    9378:	c5 01       	movw	r24, r10
    937a:	b4 01       	movw	r22, r8
    937c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9380:	a5 01       	movw	r20, r10
    9382:	94 01       	movw	r18, r8
    9384:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9388:	6b 01       	movw	r12, r22
    938a:	7c 01       	movw	r14, r24
    938c:	23 e7       	ldi	r18, 0x73	; 115
    938e:	38 e6       	ldi	r19, 0x68	; 104
    9390:	41 ed       	ldi	r20, 0xD1	; 209
    9392:	5e e3       	ldi	r21, 0x3E	; 62
    9394:	c5 01       	movw	r24, r10
    9396:	b4 01       	movw	r22, r8
    9398:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    939c:	9b 01       	movw	r18, r22
    939e:	ac 01       	movw	r20, r24
    93a0:	c7 01       	movw	r24, r14
    93a2:	b6 01       	movw	r22, r12
    93a4:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    93a8:	2e eb       	ldi	r18, 0xBE	; 190
    93aa:	3f e9       	ldi	r19, 0x9F	; 159
    93ac:	42 e1       	ldi	r20, 0x12	; 18
    93ae:	51 e4       	ldi	r21, 0x41	; 65
    93b0:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    93b4:	6b 01       	movw	r12, r22
    93b6:	7c 01       	movw	r14, r24
    93b8:	be 01       	movw	r22, r28
    93ba:	dd 0f       	add	r29, r29
    93bc:	88 0b       	sbc	r24, r24
    93be:	99 0b       	sbc	r25, r25
    93c0:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    93c4:	9b 01       	movw	r18, r22
    93c6:	ac 01       	movw	r20, r24
    93c8:	c7 01       	movw	r24, r14
    93ca:	b6 01       	movw	r22, r12
    93cc:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    93d0:	84 c3       	rjmp	.+1800   	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    93d2:	20 e0       	ldi	r18, 0x00	; 0
    93d4:	30 e0       	ldi	r19, 0x00	; 0
    93d6:	40 e2       	ldi	r20, 0x20	; 32
    93d8:	51 e4       	ldi	r21, 0x41	; 65
    93da:	c7 01       	movw	r24, r14
    93dc:	b6 01       	movw	r22, r12
    93de:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    93e2:	18 16       	cp	r1, r24
    93e4:	dc f5       	brge	.+118    	; 0x945c <corectTrv+0x1352>
    93e6:	20 e0       	ldi	r18, 0x00	; 0
    93e8:	30 e0       	ldi	r19, 0x00	; 0
    93ea:	40 e3       	ldi	r20, 0x30	; 48
    93ec:	51 e4       	ldi	r21, 0x41	; 65
    93ee:	c7 01       	movw	r24, r14
    93f0:	b6 01       	movw	r22, r12
    93f2:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    93f6:	18 16       	cp	r1, r24
    93f8:	8c f1       	brlt	.+98     	; 0x945c <corectTrv+0x1352>
		{
			return( 0.128 * ds * ds - 0.340 * ds + 11.4)* k;
    93fa:	2f e6       	ldi	r18, 0x6F	; 111
    93fc:	32 e1       	ldi	r19, 0x12	; 18
    93fe:	43 e0       	ldi	r20, 0x03	; 3
    9400:	5e e3       	ldi	r21, 0x3E	; 62
    9402:	c5 01       	movw	r24, r10
    9404:	b4 01       	movw	r22, r8
    9406:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    940a:	a5 01       	movw	r20, r10
    940c:	94 01       	movw	r18, r8
    940e:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9412:	6b 01       	movw	r12, r22
    9414:	7c 01       	movw	r14, r24
    9416:	2b e7       	ldi	r18, 0x7B	; 123
    9418:	34 e1       	ldi	r19, 0x14	; 20
    941a:	4e ea       	ldi	r20, 0xAE	; 174
    941c:	5e e3       	ldi	r21, 0x3E	; 62
    941e:	c5 01       	movw	r24, r10
    9420:	b4 01       	movw	r22, r8
    9422:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9426:	9b 01       	movw	r18, r22
    9428:	ac 01       	movw	r20, r24
    942a:	c7 01       	movw	r24, r14
    942c:	b6 01       	movw	r22, r12
    942e:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    9432:	26 e6       	ldi	r18, 0x66	; 102
    9434:	36 e6       	ldi	r19, 0x66	; 102
    9436:	46 e3       	ldi	r20, 0x36	; 54
    9438:	51 e4       	ldi	r21, 0x41	; 65
    943a:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    943e:	6b 01       	movw	r12, r22
    9440:	7c 01       	movw	r14, r24
    9442:	be 01       	movw	r22, r28
    9444:	dd 0f       	add	r29, r29
    9446:	88 0b       	sbc	r24, r24
    9448:	99 0b       	sbc	r25, r25
    944a:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    944e:	9b 01       	movw	r18, r22
    9450:	ac 01       	movw	r20, r24
    9452:	c7 01       	movw	r24, r14
    9454:	b6 01       	movw	r22, r12
    9456:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    945a:	3f c3       	rjmp	.+1662   	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    945c:	20 e0       	ldi	r18, 0x00	; 0
    945e:	30 e0       	ldi	r19, 0x00	; 0
    9460:	40 e3       	ldi	r20, 0x30	; 48
    9462:	51 e4       	ldi	r21, 0x41	; 65
    9464:	c7 01       	movw	r24, r14
    9466:	b6 01       	movw	r22, r12
    9468:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    946c:	18 16       	cp	r1, r24
    946e:	dc f5       	brge	.+118    	; 0x94e6 <corectTrv+0x13dc>
    9470:	20 e0       	ldi	r18, 0x00	; 0
    9472:	30 e0       	ldi	r19, 0x00	; 0
    9474:	40 e4       	ldi	r20, 0x40	; 64
    9476:	51 e4       	ldi	r21, 0x41	; 65
    9478:	c7 01       	movw	r24, r14
    947a:	b6 01       	movw	r22, r12
    947c:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    9480:	18 16       	cp	r1, r24
    9482:	8c f1       	brlt	.+98     	; 0x94e6 <corectTrv+0x13dc>
		{
			return( 0.128 * ds * ds - 0.382 * ds + 15.51)* k;
    9484:	2f e6       	ldi	r18, 0x6F	; 111
    9486:	32 e1       	ldi	r19, 0x12	; 18
    9488:	43 e0       	ldi	r20, 0x03	; 3
    948a:	5e e3       	ldi	r21, 0x3E	; 62
    948c:	c5 01       	movw	r24, r10
    948e:	b4 01       	movw	r22, r8
    9490:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9494:	a5 01       	movw	r20, r10
    9496:	94 01       	movw	r18, r8
    9498:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    949c:	6b 01       	movw	r12, r22
    949e:	7c 01       	movw	r14, r24
    94a0:	21 e8       	ldi	r18, 0x81	; 129
    94a2:	35 e9       	ldi	r19, 0x95	; 149
    94a4:	43 ec       	ldi	r20, 0xC3	; 195
    94a6:	5e e3       	ldi	r21, 0x3E	; 62
    94a8:	c5 01       	movw	r24, r10
    94aa:	b4 01       	movw	r22, r8
    94ac:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    94b0:	9b 01       	movw	r18, r22
    94b2:	ac 01       	movw	r20, r24
    94b4:	c7 01       	movw	r24, r14
    94b6:	b6 01       	movw	r22, r12
    94b8:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    94bc:	26 ef       	ldi	r18, 0xF6	; 246
    94be:	38 e2       	ldi	r19, 0x28	; 40
    94c0:	48 e7       	ldi	r20, 0x78	; 120
    94c2:	51 e4       	ldi	r21, 0x41	; 65
    94c4:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    94c8:	6b 01       	movw	r12, r22
    94ca:	7c 01       	movw	r14, r24
    94cc:	be 01       	movw	r22, r28
    94ce:	dd 0f       	add	r29, r29
    94d0:	88 0b       	sbc	r24, r24
    94d2:	99 0b       	sbc	r25, r25
    94d4:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    94d8:	9b 01       	movw	r18, r22
    94da:	ac 01       	movw	r20, r24
    94dc:	c7 01       	movw	r24, r14
    94de:	b6 01       	movw	r22, r12
    94e0:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    94e4:	fa c2       	rjmp	.+1524   	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    94e6:	20 e0       	ldi	r18, 0x00	; 0
    94e8:	30 e0       	ldi	r19, 0x00	; 0
    94ea:	40 e4       	ldi	r20, 0x40	; 64
    94ec:	51 e4       	ldi	r21, 0x41	; 65
    94ee:	c7 01       	movw	r24, r14
    94f0:	b6 01       	movw	r22, r12
    94f2:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    94f6:	18 16       	cp	r1, r24
    94f8:	dc f5       	brge	.+118    	; 0x9570 <corectTrv+0x1466>
    94fa:	20 e0       	ldi	r18, 0x00	; 0
    94fc:	30 e0       	ldi	r19, 0x00	; 0
    94fe:	40 e5       	ldi	r20, 0x50	; 80
    9500:	51 e4       	ldi	r21, 0x41	; 65
    9502:	c7 01       	movw	r24, r14
    9504:	b6 01       	movw	r22, r12
    9506:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    950a:	18 16       	cp	r1, r24
    950c:	8c f1       	brlt	.+98     	; 0x9570 <corectTrv+0x1466>
		{
			return( 0.128 * ds * ds - 0.382 * ds + 15.51)* k;
    950e:	2f e6       	ldi	r18, 0x6F	; 111
    9510:	32 e1       	ldi	r19, 0x12	; 18
    9512:	43 e0       	ldi	r20, 0x03	; 3
    9514:	5e e3       	ldi	r21, 0x3E	; 62
    9516:	c5 01       	movw	r24, r10
    9518:	b4 01       	movw	r22, r8
    951a:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    951e:	a5 01       	movw	r20, r10
    9520:	94 01       	movw	r18, r8
    9522:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9526:	6b 01       	movw	r12, r22
    9528:	7c 01       	movw	r14, r24
    952a:	21 e8       	ldi	r18, 0x81	; 129
    952c:	35 e9       	ldi	r19, 0x95	; 149
    952e:	43 ec       	ldi	r20, 0xC3	; 195
    9530:	5e e3       	ldi	r21, 0x3E	; 62
    9532:	c5 01       	movw	r24, r10
    9534:	b4 01       	movw	r22, r8
    9536:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    953a:	9b 01       	movw	r18, r22
    953c:	ac 01       	movw	r20, r24
    953e:	c7 01       	movw	r24, r14
    9540:	b6 01       	movw	r22, r12
    9542:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    9546:	26 ef       	ldi	r18, 0xF6	; 246
    9548:	38 e2       	ldi	r19, 0x28	; 40
    954a:	48 e7       	ldi	r20, 0x78	; 120
    954c:	51 e4       	ldi	r21, 0x41	; 65
    954e:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    9552:	6b 01       	movw	r12, r22
    9554:	7c 01       	movw	r14, r24
    9556:	be 01       	movw	r22, r28
    9558:	dd 0f       	add	r29, r29
    955a:	88 0b       	sbc	r24, r24
    955c:	99 0b       	sbc	r25, r25
    955e:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    9562:	9b 01       	movw	r18, r22
    9564:	ac 01       	movw	r20, r24
    9566:	c7 01       	movw	r24, r14
    9568:	b6 01       	movw	r22, r12
    956a:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    956e:	b5 c2       	rjmp	.+1386   	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    9570:	20 e0       	ldi	r18, 0x00	; 0
    9572:	30 e0       	ldi	r19, 0x00	; 0
    9574:	40 e5       	ldi	r20, 0x50	; 80
    9576:	51 e4       	ldi	r21, 0x41	; 65
    9578:	c7 01       	movw	r24, r14
    957a:	b6 01       	movw	r22, r12
    957c:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    9580:	18 16       	cp	r1, r24
    9582:	dc f5       	brge	.+118    	; 0x95fa <corectTrv+0x14f0>
    9584:	20 e0       	ldi	r18, 0x00	; 0
    9586:	30 e0       	ldi	r19, 0x00	; 0
    9588:	40 e6       	ldi	r20, 0x60	; 96
    958a:	51 e4       	ldi	r21, 0x41	; 65
    958c:	c7 01       	movw	r24, r14
    958e:	b6 01       	movw	r22, r12
    9590:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    9594:	18 16       	cp	r1, r24
    9596:	8c f1       	brlt	.+98     	; 0x95fa <corectTrv+0x14f0>
		{
			return( 0.137 * ds * ds - 0.652 * ds + 16.63)* k;
    9598:	2a eb       	ldi	r18, 0xBA	; 186
    959a:	39 e4       	ldi	r19, 0x49	; 73
    959c:	4c e0       	ldi	r20, 0x0C	; 12
    959e:	5e e3       	ldi	r21, 0x3E	; 62
    95a0:	c5 01       	movw	r24, r10
    95a2:	b4 01       	movw	r22, r8
    95a4:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    95a8:	a5 01       	movw	r20, r10
    95aa:	94 01       	movw	r18, r8
    95ac:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    95b0:	6b 01       	movw	r12, r22
    95b2:	7c 01       	movw	r14, r24
    95b4:	29 e7       	ldi	r18, 0x79	; 121
    95b6:	39 ee       	ldi	r19, 0xE9	; 233
    95b8:	46 e2       	ldi	r20, 0x26	; 38
    95ba:	5f e3       	ldi	r21, 0x3F	; 63
    95bc:	c5 01       	movw	r24, r10
    95be:	b4 01       	movw	r22, r8
    95c0:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    95c4:	9b 01       	movw	r18, r22
    95c6:	ac 01       	movw	r20, r24
    95c8:	c7 01       	movw	r24, r14
    95ca:	b6 01       	movw	r22, r12
    95cc:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    95d0:	2d e3       	ldi	r18, 0x3D	; 61
    95d2:	3a e0       	ldi	r19, 0x0A	; 10
    95d4:	45 e8       	ldi	r20, 0x85	; 133
    95d6:	51 e4       	ldi	r21, 0x41	; 65
    95d8:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    95dc:	6b 01       	movw	r12, r22
    95de:	7c 01       	movw	r14, r24
    95e0:	be 01       	movw	r22, r28
    95e2:	dd 0f       	add	r29, r29
    95e4:	88 0b       	sbc	r24, r24
    95e6:	99 0b       	sbc	r25, r25
    95e8:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    95ec:	9b 01       	movw	r18, r22
    95ee:	ac 01       	movw	r20, r24
    95f0:	c7 01       	movw	r24, r14
    95f2:	b6 01       	movw	r22, r12
    95f4:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    95f8:	70 c2       	rjmp	.+1248   	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    95fa:	20 e0       	ldi	r18, 0x00	; 0
    95fc:	30 e0       	ldi	r19, 0x00	; 0
    95fe:	40 e6       	ldi	r20, 0x60	; 96
    9600:	51 e4       	ldi	r21, 0x41	; 65
    9602:	c7 01       	movw	r24, r14
    9604:	b6 01       	movw	r22, r12
    9606:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    960a:	18 16       	cp	r1, r24
    960c:	dc f5       	brge	.+118    	; 0x9684 <corectTrv+0x157a>
    960e:	20 e0       	ldi	r18, 0x00	; 0
    9610:	30 e0       	ldi	r19, 0x00	; 0
    9612:	40 e7       	ldi	r20, 0x70	; 112
    9614:	51 e4       	ldi	r21, 0x41	; 65
    9616:	c7 01       	movw	r24, r14
    9618:	b6 01       	movw	r22, r12
    961a:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    961e:	18 16       	cp	r1, r24
    9620:	8c f1       	brlt	.+98     	; 0x9684 <corectTrv+0x157a>
		{
			return( 0.142 * ds * ds - 0.630 * ds + 17.7)* k;
    9622:	23 e7       	ldi	r18, 0x73	; 115
    9624:	38 e6       	ldi	r19, 0x68	; 104
    9626:	41 e1       	ldi	r20, 0x11	; 17
    9628:	5e e3       	ldi	r21, 0x3E	; 62
    962a:	c5 01       	movw	r24, r10
    962c:	b4 01       	movw	r22, r8
    962e:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9632:	a5 01       	movw	r20, r10
    9634:	94 01       	movw	r18, r8
    9636:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    963a:	6b 01       	movw	r12, r22
    963c:	7c 01       	movw	r14, r24
    963e:	2e ea       	ldi	r18, 0xAE	; 174
    9640:	37 e4       	ldi	r19, 0x47	; 71
    9642:	41 e2       	ldi	r20, 0x21	; 33
    9644:	5f e3       	ldi	r21, 0x3F	; 63
    9646:	c5 01       	movw	r24, r10
    9648:	b4 01       	movw	r22, r8
    964a:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    964e:	9b 01       	movw	r18, r22
    9650:	ac 01       	movw	r20, r24
    9652:	c7 01       	movw	r24, r14
    9654:	b6 01       	movw	r22, r12
    9656:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    965a:	2a e9       	ldi	r18, 0x9A	; 154
    965c:	39 e9       	ldi	r19, 0x99	; 153
    965e:	4d e8       	ldi	r20, 0x8D	; 141
    9660:	51 e4       	ldi	r21, 0x41	; 65
    9662:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    9666:	6b 01       	movw	r12, r22
    9668:	7c 01       	movw	r14, r24
    966a:	be 01       	movw	r22, r28
    966c:	dd 0f       	add	r29, r29
    966e:	88 0b       	sbc	r24, r24
    9670:	99 0b       	sbc	r25, r25
    9672:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    9676:	9b 01       	movw	r18, r22
    9678:	ac 01       	movw	r20, r24
    967a:	c7 01       	movw	r24, r14
    967c:	b6 01       	movw	r22, r12
    967e:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9682:	2b c2       	rjmp	.+1110   	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    9684:	20 e0       	ldi	r18, 0x00	; 0
    9686:	30 e0       	ldi	r19, 0x00	; 0
    9688:	40 e7       	ldi	r20, 0x70	; 112
    968a:	51 e4       	ldi	r21, 0x41	; 65
    968c:	c7 01       	movw	r24, r14
    968e:	b6 01       	movw	r22, r12
    9690:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    9694:	18 16       	cp	r1, r24
    9696:	dc f5       	brge	.+118    	; 0x970e <corectTrv+0x1604>
    9698:	20 e0       	ldi	r18, 0x00	; 0
    969a:	30 e0       	ldi	r19, 0x00	; 0
    969c:	40 e8       	ldi	r20, 0x80	; 128
    969e:	51 e4       	ldi	r21, 0x41	; 65
    96a0:	c7 01       	movw	r24, r14
    96a2:	b6 01       	movw	r22, r12
    96a4:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    96a8:	18 16       	cp	r1, r24
    96aa:	8c f1       	brlt	.+98     	; 0x970e <corectTrv+0x1604>
		{
			return( 0.126 * ds * ds - 0.683 * ds + 20.4)* k;
    96ac:	25 e2       	ldi	r18, 0x25	; 37
    96ae:	36 e0       	ldi	r19, 0x06	; 6
    96b0:	41 e0       	ldi	r20, 0x01	; 1
    96b2:	5e e3       	ldi	r21, 0x3E	; 62
    96b4:	c5 01       	movw	r24, r10
    96b6:	b4 01       	movw	r22, r8
    96b8:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    96bc:	a5 01       	movw	r20, r10
    96be:	94 01       	movw	r18, r8
    96c0:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    96c4:	6b 01       	movw	r12, r22
    96c6:	7c 01       	movw	r14, r24
    96c8:	27 e1       	ldi	r18, 0x17	; 23
    96ca:	39 ed       	ldi	r19, 0xD9	; 217
    96cc:	4e e2       	ldi	r20, 0x2E	; 46
    96ce:	5f e3       	ldi	r21, 0x3F	; 63
    96d0:	c5 01       	movw	r24, r10
    96d2:	b4 01       	movw	r22, r8
    96d4:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    96d8:	9b 01       	movw	r18, r22
    96da:	ac 01       	movw	r20, r24
    96dc:	c7 01       	movw	r24, r14
    96de:	b6 01       	movw	r22, r12
    96e0:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__subsf3>
    96e4:	23 e3       	ldi	r18, 0x33	; 51
    96e6:	33 e3       	ldi	r19, 0x33	; 51
    96e8:	43 ea       	ldi	r20, 0xA3	; 163
    96ea:	51 e4       	ldi	r21, 0x41	; 65
    96ec:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <__addsf3>
    96f0:	6b 01       	movw	r12, r22
    96f2:	7c 01       	movw	r14, r24
    96f4:	be 01       	movw	r22, r28
    96f6:	dd 0f       	add	r29, r29
    96f8:	88 0b       	sbc	r24, r24
    96fa:	99 0b       	sbc	r25, r25
    96fc:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    9700:	9b 01       	movw	r18, r22
    9702:	ac 01       	movw	r20, r24
    9704:	c7 01       	movw	r24, r14
    9706:	b6 01       	movw	r22, r12
    9708:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    970c:	e6 c1       	rjmp	.+972    	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 9)
    970e:	20 e0       	ldi	r18, 0x00	; 0
    9710:	30 e0       	ldi	r19, 0x00	; 0
    9712:	40 e8       	ldi	r20, 0x80	; 128
    9714:	51 e4       	ldi	r21, 0x41	; 65
    9716:	c7 01       	movw	r24, r14
    9718:	b6 01       	movw	r22, r12
    971a:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    971e:	18 16       	cp	r1, r24
    9720:	0c f0       	brlt	.+2      	; 0x9724 <corectTrv+0x161a>
    9722:	d0 c1       	rjmp	.+928    	; 0x9ac4 <corectTrv+0x19ba>
		{
			return( 0.027 * ds * ds - 0.277 * ds + 25.29)* k;
    9724:	2b e1       	ldi	r18, 0x1B	; 27
    9726:	3f e2       	ldi	r19, 0x2F	; 47
    9728:	4d ed       	ldi	r20, 0xDD	; 221
    972a:	5c e3       	ldi	r21, 0x3C	; 60
    972c:	c5 01       	movw	r24, r10
    972e:	b4 01       	movw	r22, r8
    9730:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9734:	a5 01       	movw	r20, r10
    9736:	94 01       	movw	r18, r8
    9738:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    973c:	6b 01       	movw	r12, r22
    973e:	7c 01       	movw	r14, r24
    9740:	22 ef       	ldi	r18, 0xF2	; 242
    9742:	32 ed       	ldi	r19, 0xD2	; 210
    9744:	4d e8       	ldi	r20, 0x8D	; 141
    9746:	5e e3       	ldi	r21, 0x3E	; 62
    9748:	c5 01       	movw	r24, r10
    974a:	b4 01       	movw	r22, r8
    974c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9750:	9b 01       	movw	r18, r22
    9752:	ac 01       	movw	r20, r24
    9754:	c7 01       	movw	r24, r14
    9756:	b6 01       	movw	r22, r12
    9758:	cb d7       	rcall	.+3990   	; 0xa6f0 <__subsf3>
    975a:	2c ee       	ldi	r18, 0xEC	; 236
    975c:	31 e5       	ldi	r19, 0x51	; 81
    975e:	4a ec       	ldi	r20, 0xCA	; 202
    9760:	51 e4       	ldi	r21, 0x41	; 65
    9762:	c7 d7       	rcall	.+3982   	; 0xa6f2 <__addsf3>
    9764:	6b 01       	movw	r12, r22
    9766:	7c 01       	movw	r14, r24
    9768:	be 01       	movw	r22, r28
    976a:	dd 0f       	add	r29, r29
    976c:	88 0b       	sbc	r24, r24
    976e:	99 0b       	sbc	r25, r25
    9770:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    9774:	9b 01       	movw	r18, r22
    9776:	ac 01       	movw	r20, r24
    9778:	c7 01       	movw	r24, r14
    977a:	b6 01       	movw	r22, r12
    977c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9780:	ac c1       	rjmp	.+856    	; 0x9ada <corectTrv+0x19d0>
		}
	}

	else if (ds > 10)
    9782:	20 e0       	ldi	r18, 0x00	; 0
    9784:	30 e0       	ldi	r19, 0x00	; 0
    9786:	40 e2       	ldi	r20, 0x20	; 32
    9788:	51 e4       	ldi	r21, 0x41	; 65
    978a:	c5 01       	movw	r24, r10
    978c:	b4 01       	movw	r22, r8
    978e:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    9792:	18 16       	cp	r1, r24
    9794:	0c f0       	brlt	.+2      	; 0x9798 <corectTrv+0x168e>
    9796:	9a c1       	rjmp	.+820    	; 0x9acc <corectTrv+0x19c2>
    9798:	08 c0       	rjmp	.+16     	; 0x97aa <corectTrv+0x16a0>
	
	Superheat_old = Superheat;
	
	if (ds > 20)
	{
		ds = 20;
    979a:	0f 2e       	mov	r0, r31
    979c:	81 2c       	mov	r8, r1
    979e:	91 2c       	mov	r9, r1
    97a0:	f0 ea       	ldi	r31, 0xA0	; 160
    97a2:	af 2e       	mov	r10, r31
    97a4:	f1 e4       	ldi	r31, 0x41	; 65
    97a6:	bf 2e       	mov	r11, r31
    97a8:	f0 2d       	mov	r31, r0
		}
	}

	else if (ds > 10)
	{
		if (Superheat == SSet)
    97aa:	20 e0       	ldi	r18, 0x00	; 0
    97ac:	30 e0       	ldi	r19, 0x00	; 0
    97ae:	40 ee       	ldi	r20, 0xE0	; 224
    97b0:	50 e4       	ldi	r21, 0x40	; 64
    97b2:	c7 01       	movw	r24, r14
    97b4:	b6 01       	movw	r22, r12
    97b6:	0e 94 dd 53 	call	0xa7ba	; 0xa7ba <__cmpsf2>
    97ba:	81 11       	cpse	r24, r1
    97bc:	2f c0       	rjmp	.+94     	; 0x981c <corectTrv+0x1712>
		{
			return( 0.137 * ds * ds - 3.245 * ds + 34.51)* k;
    97be:	2a eb       	ldi	r18, 0xBA	; 186
    97c0:	39 e4       	ldi	r19, 0x49	; 73
    97c2:	4c e0       	ldi	r20, 0x0C	; 12
    97c4:	5e e3       	ldi	r21, 0x3E	; 62
    97c6:	c5 01       	movw	r24, r10
    97c8:	b4 01       	movw	r22, r8
    97ca:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    97ce:	a5 01       	movw	r20, r10
    97d0:	94 01       	movw	r18, r8
    97d2:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    97d6:	6b 01       	movw	r12, r22
    97d8:	7c 01       	movw	r14, r24
    97da:	24 e1       	ldi	r18, 0x14	; 20
    97dc:	3e ea       	ldi	r19, 0xAE	; 174
    97de:	4f e4       	ldi	r20, 0x4F	; 79
    97e0:	50 e4       	ldi	r21, 0x40	; 64
    97e2:	c5 01       	movw	r24, r10
    97e4:	b4 01       	movw	r22, r8
    97e6:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    97ea:	9b 01       	movw	r18, r22
    97ec:	ac 01       	movw	r20, r24
    97ee:	c7 01       	movw	r24, r14
    97f0:	b6 01       	movw	r22, r12
    97f2:	7e d7       	rcall	.+3836   	; 0xa6f0 <__subsf3>
    97f4:	2d e3       	ldi	r18, 0x3D	; 61
    97f6:	3a e0       	ldi	r19, 0x0A	; 10
    97f8:	4a e0       	ldi	r20, 0x0A	; 10
    97fa:	52 e4       	ldi	r21, 0x42	; 66
    97fc:	7a d7       	rcall	.+3828   	; 0xa6f2 <__addsf3>
    97fe:	6b 01       	movw	r12, r22
    9800:	7c 01       	movw	r14, r24
    9802:	be 01       	movw	r22, r28
    9804:	dd 0f       	add	r29, r29
    9806:	88 0b       	sbc	r24, r24
    9808:	99 0b       	sbc	r25, r25
    980a:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    980e:	9b 01       	movw	r18, r22
    9810:	ac 01       	movw	r20, r24
    9812:	c7 01       	movw	r24, r14
    9814:	b6 01       	movw	r22, r12
    9816:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    981a:	5f c1       	rjmp	.+702    	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    981c:	20 e0       	ldi	r18, 0x00	; 0
    981e:	30 e0       	ldi	r19, 0x00	; 0
    9820:	40 ee       	ldi	r20, 0xE0	; 224
    9822:	50 e4       	ldi	r21, 0x40	; 64
    9824:	c7 01       	movw	r24, r14
    9826:	b6 01       	movw	r22, r12
    9828:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    982c:	18 16       	cp	r1, r24
    982e:	c4 f5       	brge	.+112    	; 0x98a0 <corectTrv+0x1796>
    9830:	20 e0       	ldi	r18, 0x00	; 0
    9832:	30 e0       	ldi	r19, 0x00	; 0
    9834:	40 e0       	ldi	r20, 0x00	; 0
    9836:	51 e4       	ldi	r21, 0x41	; 65
    9838:	c7 01       	movw	r24, r14
    983a:	b6 01       	movw	r22, r12
    983c:	be d7       	rcall	.+3964   	; 0xa7ba <__cmpsf2>
    983e:	18 16       	cp	r1, r24
    9840:	7c f1       	brlt	.+94     	; 0x98a0 <corectTrv+0x1796>
		{
			return( 0.137 * ds * ds - 3.245 * ds + 34.51)* k;
    9842:	2a eb       	ldi	r18, 0xBA	; 186
    9844:	39 e4       	ldi	r19, 0x49	; 73
    9846:	4c e0       	ldi	r20, 0x0C	; 12
    9848:	5e e3       	ldi	r21, 0x3E	; 62
    984a:	c5 01       	movw	r24, r10
    984c:	b4 01       	movw	r22, r8
    984e:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9852:	a5 01       	movw	r20, r10
    9854:	94 01       	movw	r18, r8
    9856:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    985a:	6b 01       	movw	r12, r22
    985c:	7c 01       	movw	r14, r24
    985e:	24 e1       	ldi	r18, 0x14	; 20
    9860:	3e ea       	ldi	r19, 0xAE	; 174
    9862:	4f e4       	ldi	r20, 0x4F	; 79
    9864:	50 e4       	ldi	r21, 0x40	; 64
    9866:	c5 01       	movw	r24, r10
    9868:	b4 01       	movw	r22, r8
    986a:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    986e:	9b 01       	movw	r18, r22
    9870:	ac 01       	movw	r20, r24
    9872:	c7 01       	movw	r24, r14
    9874:	b6 01       	movw	r22, r12
    9876:	3c d7       	rcall	.+3704   	; 0xa6f0 <__subsf3>
    9878:	2d e3       	ldi	r18, 0x3D	; 61
    987a:	3a e0       	ldi	r19, 0x0A	; 10
    987c:	4a e0       	ldi	r20, 0x0A	; 10
    987e:	52 e4       	ldi	r21, 0x42	; 66
    9880:	38 d7       	rcall	.+3696   	; 0xa6f2 <__addsf3>
    9882:	6b 01       	movw	r12, r22
    9884:	7c 01       	movw	r14, r24
    9886:	be 01       	movw	r22, r28
    9888:	dd 0f       	add	r29, r29
    988a:	88 0b       	sbc	r24, r24
    988c:	99 0b       	sbc	r25, r25
    988e:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__floatsisf>
    9892:	9b 01       	movw	r18, r22
    9894:	ac 01       	movw	r20, r24
    9896:	c7 01       	movw	r24, r14
    9898:	b6 01       	movw	r22, r12
    989a:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    989e:	1d c1       	rjmp	.+570    	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    98a0:	20 e0       	ldi	r18, 0x00	; 0
    98a2:	30 e0       	ldi	r19, 0x00	; 0
    98a4:	40 e0       	ldi	r20, 0x00	; 0
    98a6:	51 e4       	ldi	r21, 0x41	; 65
    98a8:	c7 01       	movw	r24, r14
    98aa:	b6 01       	movw	r22, r12
    98ac:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    98b0:	18 16       	cp	r1, r24
    98b2:	bc f5       	brge	.+110    	; 0x9922 <corectTrv+0x1818>
    98b4:	20 e0       	ldi	r18, 0x00	; 0
    98b6:	30 e0       	ldi	r19, 0x00	; 0
    98b8:	40 e1       	ldi	r20, 0x10	; 16
    98ba:	51 e4       	ldi	r21, 0x41	; 65
    98bc:	c7 01       	movw	r24, r14
    98be:	b6 01       	movw	r22, r12
    98c0:	7c d7       	rcall	.+3832   	; 0xa7ba <__cmpsf2>
    98c2:	18 16       	cp	r1, r24
    98c4:	74 f1       	brlt	.+92     	; 0x9922 <corectTrv+0x1818>
		{
			return( 0.158 * ds * ds - 4.086 * ds + 42.41)* k;
    98c6:	21 ec       	ldi	r18, 0xC1	; 193
    98c8:	3a ec       	ldi	r19, 0xCA	; 202
    98ca:	41 e2       	ldi	r20, 0x21	; 33
    98cc:	5e e3       	ldi	r21, 0x3E	; 62
    98ce:	c5 01       	movw	r24, r10
    98d0:	b4 01       	movw	r22, r8
    98d2:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    98d6:	a5 01       	movw	r20, r10
    98d8:	94 01       	movw	r18, r8
    98da:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    98de:	6b 01       	movw	r12, r22
    98e0:	7c 01       	movw	r14, r24
    98e2:	23 e8       	ldi	r18, 0x83	; 131
    98e4:	30 ec       	ldi	r19, 0xC0	; 192
    98e6:	42 e8       	ldi	r20, 0x82	; 130
    98e8:	50 e4       	ldi	r21, 0x40	; 64
    98ea:	c5 01       	movw	r24, r10
    98ec:	b4 01       	movw	r22, r8
    98ee:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    98f2:	9b 01       	movw	r18, r22
    98f4:	ac 01       	movw	r20, r24
    98f6:	c7 01       	movw	r24, r14
    98f8:	b6 01       	movw	r22, r12
    98fa:	fa d6       	rcall	.+3572   	; 0xa6f0 <__subsf3>
    98fc:	27 ed       	ldi	r18, 0xD7	; 215
    98fe:	33 ea       	ldi	r19, 0xA3	; 163
    9900:	49 e2       	ldi	r20, 0x29	; 41
    9902:	52 e4       	ldi	r21, 0x42	; 66
    9904:	f6 d6       	rcall	.+3564   	; 0xa6f2 <__addsf3>
    9906:	6b 01       	movw	r12, r22
    9908:	7c 01       	movw	r14, r24
    990a:	be 01       	movw	r22, r28
    990c:	dd 0f       	add	r29, r29
    990e:	88 0b       	sbc	r24, r24
    9910:	99 0b       	sbc	r25, r25
    9912:	f2 d7       	rcall	.+4068   	; 0xa8f8 <__floatsisf>
    9914:	9b 01       	movw	r18, r22
    9916:	ac 01       	movw	r20, r24
    9918:	c7 01       	movw	r24, r14
    991a:	b6 01       	movw	r22, r12
    991c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9920:	dc c0       	rjmp	.+440    	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    9922:	20 e0       	ldi	r18, 0x00	; 0
    9924:	30 e0       	ldi	r19, 0x00	; 0
    9926:	40 e1       	ldi	r20, 0x10	; 16
    9928:	51 e4       	ldi	r21, 0x41	; 65
    992a:	c7 01       	movw	r24, r14
    992c:	b6 01       	movw	r22, r12
    992e:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    9932:	18 16       	cp	r1, r24
    9934:	0c f0       	brlt	.+2      	; 0x9938 <corectTrv+0x182e>
    9936:	4f c0       	rjmp	.+158    	; 0x99d6 <corectTrv+0x18cc>
    9938:	20 e0       	ldi	r18, 0x00	; 0
    993a:	30 e0       	ldi	r19, 0x00	; 0
    993c:	40 e2       	ldi	r20, 0x20	; 32
    993e:	51 e4       	ldi	r21, 0x41	; 65
    9940:	c7 01       	movw	r24, r14
    9942:	b6 01       	movw	r22, r12
    9944:	3a d7       	rcall	.+3700   	; 0xa7ba <__cmpsf2>
    9946:	18 16       	cp	r1, r24
    9948:	0c f4       	brge	.+2      	; 0x994c <corectTrv+0x1842>
    994a:	45 c0       	rjmp	.+138    	; 0x99d6 <corectTrv+0x18cc>
		{
			return( 0.027 * ds * ds * ds - 1.086 * ds * ds + 14.32 * ds - 44.48)* k;
    994c:	2b e1       	ldi	r18, 0x1B	; 27
    994e:	3f e2       	ldi	r19, 0x2F	; 47
    9950:	4d ed       	ldi	r20, 0xDD	; 221
    9952:	5c e3       	ldi	r21, 0x3C	; 60
    9954:	c5 01       	movw	r24, r10
    9956:	b4 01       	movw	r22, r8
    9958:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    995c:	a5 01       	movw	r20, r10
    995e:	94 01       	movw	r18, r8
    9960:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9964:	a5 01       	movw	r20, r10
    9966:	94 01       	movw	r18, r8
    9968:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    996c:	6b 01       	movw	r12, r22
    996e:	7c 01       	movw	r14, r24
    9970:	2c e0       	ldi	r18, 0x0C	; 12
    9972:	32 e0       	ldi	r19, 0x02	; 2
    9974:	4b e8       	ldi	r20, 0x8B	; 139
    9976:	5f e3       	ldi	r21, 0x3F	; 63
    9978:	c5 01       	movw	r24, r10
    997a:	b4 01       	movw	r22, r8
    997c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9980:	a5 01       	movw	r20, r10
    9982:	94 01       	movw	r18, r8
    9984:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9988:	9b 01       	movw	r18, r22
    998a:	ac 01       	movw	r20, r24
    998c:	c7 01       	movw	r24, r14
    998e:	b6 01       	movw	r22, r12
    9990:	af d6       	rcall	.+3422   	; 0xa6f0 <__subsf3>
    9992:	6b 01       	movw	r12, r22
    9994:	7c 01       	movw	r14, r24
    9996:	28 eb       	ldi	r18, 0xB8	; 184
    9998:	3e e1       	ldi	r19, 0x1E	; 30
    999a:	45 e6       	ldi	r20, 0x65	; 101
    999c:	51 e4       	ldi	r21, 0x41	; 65
    999e:	c5 01       	movw	r24, r10
    99a0:	b4 01       	movw	r22, r8
    99a2:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    99a6:	9b 01       	movw	r18, r22
    99a8:	ac 01       	movw	r20, r24
    99aa:	c7 01       	movw	r24, r14
    99ac:	b6 01       	movw	r22, r12
    99ae:	a1 d6       	rcall	.+3394   	; 0xa6f2 <__addsf3>
    99b0:	25 e8       	ldi	r18, 0x85	; 133
    99b2:	3b ee       	ldi	r19, 0xEB	; 235
    99b4:	41 e3       	ldi	r20, 0x31	; 49
    99b6:	52 e4       	ldi	r21, 0x42	; 66
    99b8:	9b d6       	rcall	.+3382   	; 0xa6f0 <__subsf3>
    99ba:	6b 01       	movw	r12, r22
    99bc:	7c 01       	movw	r14, r24
    99be:	be 01       	movw	r22, r28
    99c0:	dd 0f       	add	r29, r29
    99c2:	88 0b       	sbc	r24, r24
    99c4:	99 0b       	sbc	r25, r25
    99c6:	98 d7       	rcall	.+3888   	; 0xa8f8 <__floatsisf>
    99c8:	9b 01       	movw	r18, r22
    99ca:	ac 01       	movw	r20, r24
    99cc:	c7 01       	movw	r24, r14
    99ce:	b6 01       	movw	r22, r12
    99d0:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    99d4:	82 c0       	rjmp	.+260    	; 0x9ada <corectTrv+0x19d0>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    99d6:	20 e0       	ldi	r18, 0x00	; 0
    99d8:	30 e0       	ldi	r19, 0x00	; 0
    99da:	40 e2       	ldi	r20, 0x20	; 32
    99dc:	51 e4       	ldi	r21, 0x41	; 65
    99de:	c7 01       	movw	r24, r14
    99e0:	b6 01       	movw	r22, r12
    99e2:	0e 94 2c 55 	call	0xaa58	; 0xaa58 <__gesf2>
    99e6:	18 16       	cp	r1, r24
    99e8:	0c f0       	brlt	.+2      	; 0x99ec <corectTrv+0x18e2>
    99ea:	4f c0       	rjmp	.+158    	; 0x9a8a <corectTrv+0x1980>
    99ec:	20 e0       	ldi	r18, 0x00	; 0
    99ee:	30 e0       	ldi	r19, 0x00	; 0
    99f0:	40 e3       	ldi	r20, 0x30	; 48
    99f2:	51 e4       	ldi	r21, 0x41	; 65
    99f4:	c7 01       	movw	r24, r14
    99f6:	b6 01       	movw	r22, r12
    99f8:	e0 d6       	rcall	.+3520   	; 0xa7ba <__cmpsf2>
    99fa:	18 16       	cp	r1, r24
    99fc:	0c f4       	brge	.+2      	; 0x9a00 <corectTrv+0x18f6>
    99fe:	45 c0       	rjmp	.+138    	; 0x9a8a <corectTrv+0x1980>
		{
			return( 0.026 * ds * ds * ds - 1.084 * ds * ds + 14.27 * ds - 40.99)* k;
    9a00:	24 ef       	ldi	r18, 0xF4	; 244
    9a02:	3d ef       	ldi	r19, 0xFD	; 253
    9a04:	44 ed       	ldi	r20, 0xD4	; 212
    9a06:	5c e3       	ldi	r21, 0x3C	; 60
    9a08:	c5 01       	movw	r24, r10
    9a0a:	b4 01       	movw	r22, r8
    9a0c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9a10:	a5 01       	movw	r20, r10
    9a12:	94 01       	movw	r18, r8
    9a14:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9a18:	a5 01       	movw	r20, r10
    9a1a:	94 01       	movw	r18, r8
    9a1c:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9a20:	6b 01       	movw	r12, r22
    9a22:	7c 01       	movw	r14, r24
    9a24:	23 e8       	ldi	r18, 0x83	; 131
    9a26:	30 ec       	ldi	r19, 0xC0	; 192
    9a28:	4a e8       	ldi	r20, 0x8A	; 138
    9a2a:	5f e3       	ldi	r21, 0x3F	; 63
    9a2c:	c5 01       	movw	r24, r10
    9a2e:	b4 01       	movw	r22, r8
    9a30:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9a34:	a5 01       	movw	r20, r10
    9a36:	94 01       	movw	r18, r8
    9a38:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9a3c:	9b 01       	movw	r18, r22
    9a3e:	ac 01       	movw	r20, r24
    9a40:	c7 01       	movw	r24, r14
    9a42:	b6 01       	movw	r22, r12
    9a44:	55 d6       	rcall	.+3242   	; 0xa6f0 <__subsf3>
    9a46:	6b 01       	movw	r12, r22
    9a48:	7c 01       	movw	r14, r24
    9a4a:	2c ee       	ldi	r18, 0xEC	; 236
    9a4c:	31 e5       	ldi	r19, 0x51	; 81
    9a4e:	44 e6       	ldi	r20, 0x64	; 100
    9a50:	51 e4       	ldi	r21, 0x41	; 65
    9a52:	c5 01       	movw	r24, r10
    9a54:	b4 01       	movw	r22, r8
    9a56:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
    9a5a:	9b 01       	movw	r18, r22
    9a5c:	ac 01       	movw	r20, r24
    9a5e:	c7 01       	movw	r24, r14
    9a60:	b6 01       	movw	r22, r12
    9a62:	47 d6       	rcall	.+3214   	; 0xa6f2 <__addsf3>
    9a64:	23 ec       	ldi	r18, 0xC3	; 195
    9a66:	35 ef       	ldi	r19, 0xF5	; 245
    9a68:	43 e2       	ldi	r20, 0x23	; 35
    9a6a:	52 e4       	ldi	r21, 0x42	; 66
    9a6c:	41 d6       	rcall	.+3202   	; 0xa6f0 <__subsf3>
    9a6e:	6b 01       	movw	r12, r22
    9a70:	7c 01       	movw	r14, r24
    9a72:	be 01       	movw	r22, r28
    9a74:	dd 0f       	add	r29, r29
    9a76:	88 0b       	sbc	r24, r24
    9a78:	99 0b       	sbc	r25, r25
    9a7a:	3e d7       	rcall	.+3708   	; 0xa8f8 <__floatsisf>
    9a7c:	9b 01       	movw	r18, r22
    9a7e:	ac 01       	movw	r20, r24
    9a80:	c7 01       	movw	r24, r14
    9a82:	b6 01       	movw	r22, r12
    9a84:	0e 94 75 55 	call	0xaaea	; 0xaaea <__mulsf3>
		}

		if (Superheat > SSet + 4)
    9a88:	28 c0       	rjmp	.+80     	; 0x9ada <corectTrv+0x19d0>
    9a8a:	20 e0       	ldi	r18, 0x00	; 0
    9a8c:	30 e0       	ldi	r19, 0x00	; 0
    9a8e:	40 e3       	ldi	r20, 0x30	; 48
    9a90:	51 e4       	ldi	r21, 0x41	; 65
    9a92:	c7 01       	movw	r24, r14
    9a94:	b6 01       	movw	r22, r12
    9a96:	e0 d7       	rcall	.+4032   	; 0xaa58 <__gesf2>
    9a98:	18 16       	cp	r1, r24
		{
			return 25* k;
    9a9a:	e4 f4       	brge	.+56     	; 0x9ad4 <corectTrv+0x19ca>
    9a9c:	89 e1       	ldi	r24, 0x19	; 25
    9a9e:	8c 9f       	mul	r24, r28
    9aa0:	b0 01       	movw	r22, r0
    9aa2:	8d 9f       	mul	r24, r29
    9aa4:	70 0d       	add	r23, r0
    9aa6:	11 24       	eor	r1, r1
    9aa8:	07 2e       	mov	r0, r23
    9aaa:	00 0c       	add	r0, r0
    9aac:	88 0b       	sbc	r24, r24
    9aae:	99 0b       	sbc	r25, r25
    9ab0:	23 d7       	rcall	.+3654   	; 0xa8f8 <__floatsisf>
    9ab2:	13 c0       	rjmp	.+38     	; 0x9ada <corectTrv+0x19d0>
		}
	}

	
	return 0;
    9ab4:	60 e0       	ldi	r22, 0x00	; 0
    9ab6:	70 e0       	ldi	r23, 0x00	; 0
    9ab8:	cb 01       	movw	r24, r22
    9aba:	0f c0       	rjmp	.+30     	; 0x9ada <corectTrv+0x19d0>
    9abc:	60 e0       	ldi	r22, 0x00	; 0
    9abe:	70 e0       	ldi	r23, 0x00	; 0
    9ac0:	cb 01       	movw	r24, r22
    9ac2:	0b c0       	rjmp	.+22     	; 0x9ada <corectTrv+0x19d0>
    9ac4:	60 e0       	ldi	r22, 0x00	; 0
    9ac6:	70 e0       	ldi	r23, 0x00	; 0
    9ac8:	cb 01       	movw	r24, r22
    9aca:	07 c0       	rjmp	.+14     	; 0x9ada <corectTrv+0x19d0>
    9acc:	60 e0       	ldi	r22, 0x00	; 0
    9ace:	70 e0       	ldi	r23, 0x00	; 0
    9ad0:	cb 01       	movw	r24, r22
    9ad2:	03 c0       	rjmp	.+6      	; 0x9ada <corectTrv+0x19d0>
    9ad4:	60 e0       	ldi	r22, 0x00	; 0
    9ad6:	70 e0       	ldi	r23, 0x00	; 0
    9ad8:	cb 01       	movw	r24, r22

}
    9ada:	df 91       	pop	r29
    9adc:	cf 91       	pop	r28
    9ade:	ff 90       	pop	r15
    9ae0:	ef 90       	pop	r14
    9ae2:	df 90       	pop	r13
    9ae4:	cf 90       	pop	r12
    9ae6:	bf 90       	pop	r11
    9ae8:	af 90       	pop	r10
    9aea:	9f 90       	pop	r9
    9aec:	8f 90       	pop	r8
    9aee:	7f 90       	pop	r7
    9af0:	6f 90       	pop	r6
    9af2:	5f 90       	pop	r5
    9af4:	4f 90       	pop	r4
    9af6:	08 95       	ret

00009af8 <ReadSensors>:
float ConvertToLowPress(uint16_t ADC_value){
	return (ADC_value - Low_Limit_LP) * LP_max/ (Hi_Limit_LP - Low_Limit_LP) ;
}

void ReadSensors(xCompressor *comp)  
{ 
    9af8:	ef 92       	push	r14
    9afa:	ff 92       	push	r15
    9afc:	0f 93       	push	r16
    9afe:	1f 93       	push	r17
    9b00:	cf 93       	push	r28
    9b02:	df 93       	push	r29
    9b04:	7c 01       	movw	r14, r24
 uint16_t temp = 0;
 const uint8_t samples = 10;        // determines the number of samples taken
 unsigned int sum;               // holds the summated samples
 uint8_t i;
 //static TickType_t countTrvTime=0;
 setAnalogMode(MODE_10_BIT);
    9b06:	80 e0       	ldi	r24, 0x00	; 0
    9b08:	0e 94 98 07 	call	0xf30	; 0xf30 <setAnalogMode>
    9b0c:	ca e0       	ldi	r28, 0x0A	; 10
 i = samples;                     // clean up for next channel
 sum = 0;
    9b0e:	00 e0       	ldi	r16, 0x00	; 0
    9b10:	10 e0       	ldi	r17, 0x00	; 0
 
 do
 {
	 startAnalogConversion(1, 0);
    9b12:	60 e0       	ldi	r22, 0x00	; 0
    9b14:	81 e0       	ldi	r24, 0x01	; 1
    9b16:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
	 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9b1a:	01 c0       	rjmp	.+2      	; 0x9b1e <ReadSensors+0x26>
    9b1c:	00 00       	nop
    9b1e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9b22:	81 11       	cpse	r24, r1
    9b24:	fb cf       	rjmp	.-10     	; 0x9b1c <ReadSensors+0x24>
	 sum += 	analogConversionResult();
    9b26:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9b2a:	08 0f       	add	r16, r24
    9b2c:	19 1f       	adc	r17, r25
    9b2e:	c1 50       	subi	r28, 0x01	; 1
	 //temp =analogConversionResult();
 } while (--i);
    9b30:	81 f7       	brne	.-32     	; 0x9b12 <ReadSensors+0x1a>
 temp = (unsigned int) (sum / samples);
 comp->Bac_Temp = ConvertToTemp(temp);
    9b32:	98 01       	movw	r18, r16
    9b34:	ad ec       	ldi	r26, 0xCD	; 205
    9b36:	bc ec       	ldi	r27, 0xCC	; 204
    9b38:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    9b3c:	96 95       	lsr	r25
    9b3e:	87 95       	ror	r24
    9b40:	96 95       	lsr	r25
    9b42:	87 95       	ror	r24
    9b44:	96 95       	lsr	r25
    9b46:	87 95       	ror	r24
    9b48:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <ConvertToTemp>
    9b4c:	f7 01       	movw	r30, r14
    9b4e:	66 8b       	std	Z+22, r22	; 0x16
    9b50:	77 8b       	std	Z+23, r23	; 0x17
    9b52:	80 8f       	std	Z+24, r24	; 0x18
    9b54:	91 8f       	std	Z+25, r25	; 0x19
 //read DHW
 PORTL &= ~ (1 << PL2);//A0
    9b56:	eb e0       	ldi	r30, 0x0B	; 11
    9b58:	f1 e0       	ldi	r31, 0x01	; 1
    9b5a:	80 81       	ld	r24, Z
    9b5c:	8b 7f       	andi	r24, 0xFB	; 251
    9b5e:	80 83       	st	Z, r24
 PORTL &= ~ (1 << PL1);//A1
    9b60:	80 81       	ld	r24, Z
    9b62:	8d 7f       	andi	r24, 0xFD	; 253
    9b64:	80 83       	st	Z, r24
 PORTL |=   (1 << PL0);//A2
    9b66:	80 81       	ld	r24, Z
    9b68:	81 60       	ori	r24, 0x01	; 1
    9b6a:	80 83       	st	Z, r24
    9b6c:	ca e0       	ldi	r28, 0x0A	; 10
 i = samples;
 sum = 0;
    9b6e:	00 e0       	ldi	r16, 0x00	; 0
    9b70:	10 e0       	ldi	r17, 0x00	; 0
 do
 {
	 startAnalogConversion(0, 0);
    9b72:	60 e0       	ldi	r22, 0x00	; 0
    9b74:	80 e0       	ldi	r24, 0x00	; 0
    9b76:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
	 while( analogIsConverting())_delay_us(25);// portYIELD();
    9b7a:	01 c0       	rjmp	.+2      	; 0x9b7e <ReadSensors+0x86>
    9b7c:	00 00       	nop
    9b7e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9b82:	81 11       	cpse	r24, r1
    9b84:	fb cf       	rjmp	.-10     	; 0x9b7c <ReadSensors+0x84>
	 sum += 	analogConversionResult();
    9b86:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9b8a:	08 0f       	add	r16, r24
    9b8c:	19 1f       	adc	r17, r25
    9b8e:	c1 50       	subi	r28, 0x01	; 1
 } while (--i);
    9b90:	81 f7       	brne	.-32     	; 0x9b72 <ReadSensors+0x7a>
 //temp = analogConversionResult();
 temp = (unsigned int) (sum / samples);
 comp->Dhw_Temp = ConvertToTemp(temp);
    9b92:	98 01       	movw	r18, r16
    9b94:	ad ec       	ldi	r26, 0xCD	; 205
    9b96:	bc ec       	ldi	r27, 0xCC	; 204
    9b98:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    9b9c:	96 95       	lsr	r25
    9b9e:	87 95       	ror	r24
    9ba0:	96 95       	lsr	r25
    9ba2:	87 95       	ror	r24
    9ba4:	96 95       	lsr	r25
    9ba6:	87 95       	ror	r24
    9ba8:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <ConvertToTemp>
    9bac:	f7 01       	movw	r30, r14
    9bae:	62 8b       	std	Z+18, r22	; 0x12
    9bb0:	73 8b       	std	Z+19, r23	; 0x13
    9bb2:	84 8b       	std	Z+20, r24	; 0x14
    9bb4:	95 8b       	std	Z+21, r25	; 0x15
 
 if(comp->Index==1){
    9bb6:	e2 59       	subi	r30, 0x92	; 146
    9bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    9bba:	80 81       	ld	r24, Z
    9bbc:	91 81       	ldd	r25, Z+1	; 0x01
    9bbe:	01 97       	sbiw	r24, 0x01	; 1
    9bc0:	09 f0       	breq	.+2      	; 0x9bc4 <ReadSensors+0xcc>
    9bc2:	9c c1       	rjmp	.+824    	; 0x9efc <ReadSensors+0x404>
	 
	 //read High_Pressure_1
	 PORTL |=    (1 << PL2);//a0
    9bc4:	eb e0       	ldi	r30, 0x0B	; 11
    9bc6:	f1 e0       	ldi	r31, 0x01	; 1
    9bc8:	80 81       	ld	r24, Z
    9bca:	84 60       	ori	r24, 0x04	; 4
    9bcc:	80 83       	st	Z, r24
	 PORTL |=    (1 << PL1);//a1
    9bce:	80 81       	ld	r24, Z
    9bd0:	82 60       	ori	r24, 0x02	; 2
    9bd2:	80 83       	st	Z, r24
	 PORTL &= ~  (1 << PL0);//a2
    9bd4:	80 81       	ld	r24, Z
    9bd6:	8e 7f       	andi	r24, 0xFE	; 254
    9bd8:	80 83       	st	Z, r24
    9bda:	ca e0       	ldi	r28, 0x0A	; 10
	 i = samples;
	 sum = 0;
    9bdc:	00 e0       	ldi	r16, 0x00	; 0
    9bde:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {		     startAnalogConversion(0, 0);
    9be0:	60 e0       	ldi	r22, 0x00	; 0
    9be2:	80 e0       	ldi	r24, 0x00	; 0
    9be4:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() ) _delay_us(25);//portYIELD();
    9be8:	01 c0       	rjmp	.+2      	; 0x9bec <ReadSensors+0xf4>
    9bea:	00 00       	nop
    9bec:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9bf0:	81 11       	cpse	r24, r1
    9bf2:	fb cf       	rjmp	.-10     	; 0x9bea <ReadSensors+0xf2>
		 sum += analogConversionResult();
    9bf4:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9bf8:	08 0f       	add	r16, r24
    9bfa:	19 1f       	adc	r17, r25
    9bfc:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9bfe:	81 f7       	brne	.-32     	; 0x9be0 <ReadSensors+0xe8>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->High_Press = ConvertToHighPress(temp);
    9c00:	98 01       	movw	r18, r16
    9c02:	ad ec       	ldi	r26, 0xCD	; 205
    9c04:	bc ec       	ldi	r27, 0xCC	; 204
    9c06:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    9c0a:	96 95       	lsr	r25
    9c0c:	87 95       	ror	r24
    9c0e:	96 95       	lsr	r25
    9c10:	87 95       	ror	r24
    9c12:	96 95       	lsr	r25
    9c14:	87 95       	ror	r24
    9c16:	bc 01       	movw	r22, r24
    9c18:	80 e0       	ldi	r24, 0x00	; 0
    9c1a:	90 e0       	ldi	r25, 0x00	; 0
    9c1c:	6b d6       	rcall	.+3286   	; 0xa8f4 <__floatunsisf>
    9c1e:	20 e0       	ldi	r18, 0x00	; 0
    9c20:	30 e0       	ldi	r19, 0x00	; 0
    9c22:	4c ec       	ldi	r20, 0xCC	; 204
    9c24:	52 e4       	ldi	r21, 0x42	; 66
    9c26:	64 d5       	rcall	.+2760   	; 0xa6f0 <__subsf3>
    9c28:	20 e0       	ldi	r18, 0x00	; 0
    9c2a:	30 e0       	ldi	r19, 0x00	; 0
    9c2c:	48 e0       	ldi	r20, 0x08	; 8
    9c2e:	52 e4       	ldi	r21, 0x42	; 66
    9c30:	5c d7       	rcall	.+3768   	; 0xaaea <__mulsf3>
    9c32:	20 e0       	ldi	r18, 0x00	; 0
    9c34:	30 e0       	ldi	r19, 0x00	; 0
    9c36:	4d e4       	ldi	r20, 0x4D	; 77
    9c38:	54 e4       	ldi	r21, 0x44	; 68
    9c3a:	c3 d5       	rcall	.+2950   	; 0xa7c2 <__divsf3>
    9c3c:	f7 01       	movw	r30, r14
    9c3e:	62 8f       	std	Z+26, r22	; 0x1a
    9c40:	73 8f       	std	Z+27, r23	; 0x1b
    9c42:	84 8f       	std	Z+28, r24	; 0x1c
    9c44:	95 8f       	std	Z+29, r25	; 0x1d
	 //read Low_Pressure_1
	 PORTL &= ~   (1 << PL2);
    9c46:	eb e0       	ldi	r30, 0x0B	; 11
    9c48:	f1 e0       	ldi	r31, 0x01	; 1
    9c4a:	80 81       	ld	r24, Z
    9c4c:	8b 7f       	andi	r24, 0xFB	; 251
    9c4e:	80 83       	st	Z, r24
	 PORTL &= ~   (1 << PL1);
    9c50:	80 81       	ld	r24, Z
    9c52:	8d 7f       	andi	r24, 0xFD	; 253
    9c54:	80 83       	st	Z, r24
	 PORTL &= ~   (1 << PL0);
    9c56:	80 81       	ld	r24, Z
    9c58:	8e 7f       	andi	r24, 0xFE	; 254
    9c5a:	80 83       	st	Z, r24
    9c5c:	ca e0       	ldi	r28, 0x0A	; 10
	 i = samples;
	 sum = 0;
    9c5e:	00 e0       	ldi	r16, 0x00	; 0
    9c60:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(0, 0);
    9c62:	60 e0       	ldi	r22, 0x00	; 0
    9c64:	80 e0       	ldi	r24, 0x00	; 0
    9c66:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9c6a:	01 c0       	rjmp	.+2      	; 0x9c6e <ReadSensors+0x176>
    9c6c:	00 00       	nop
    9c6e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9c72:	81 11       	cpse	r24, r1
    9c74:	fb cf       	rjmp	.-10     	; 0x9c6c <ReadSensors+0x174>
		 sum += analogConversionResult();
    9c76:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9c7a:	08 0f       	add	r16, r24
    9c7c:	19 1f       	adc	r17, r25
    9c7e:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9c80:	81 f7       	brne	.-32     	; 0x9c62 <ReadSensors+0x16a>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Low_Press = ConvertToLowPress( temp );
    9c82:	98 01       	movw	r18, r16
    9c84:	ad ec       	ldi	r26, 0xCD	; 205
    9c86:	bc ec       	ldi	r27, 0xCC	; 204
    9c88:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    9c8c:	96 95       	lsr	r25
    9c8e:	87 95       	ror	r24
    9c90:	96 95       	lsr	r25
    9c92:	87 95       	ror	r24
    9c94:	96 95       	lsr	r25
    9c96:	87 95       	ror	r24
    9c98:	bc 01       	movw	r22, r24
    9c9a:	80 e0       	ldi	r24, 0x00	; 0
    9c9c:	90 e0       	ldi	r25, 0x00	; 0
    9c9e:	2a d6       	rcall	.+3156   	; 0xa8f4 <__floatunsisf>
    9ca0:	20 e0       	ldi	r18, 0x00	; 0
    9ca2:	30 e0       	ldi	r19, 0x00	; 0
    9ca4:	4c e5       	ldi	r20, 0x5C	; 92
    9ca6:	52 e4       	ldi	r21, 0x42	; 66
    9ca8:	23 d5       	rcall	.+2630   	; 0xa6f0 <__subsf3>
    9caa:	20 e0       	ldi	r18, 0x00	; 0
    9cac:	30 e0       	ldi	r19, 0x00	; 0
    9cae:	40 e9       	ldi	r20, 0x90	; 144
    9cb0:	51 e4       	ldi	r21, 0x41	; 65
    9cb2:	1b d7       	rcall	.+3638   	; 0xaaea <__mulsf3>
    9cb4:	20 e0       	ldi	r18, 0x00	; 0
    9cb6:	30 ec       	ldi	r19, 0xC0	; 192
    9cb8:	48 e5       	ldi	r20, 0x58	; 88
    9cba:	54 e4       	ldi	r21, 0x44	; 68
    9cbc:	82 d5       	rcall	.+2820   	; 0xa7c2 <__divsf3>
    9cbe:	f7 01       	movw	r30, r14
    9cc0:	66 8f       	std	Z+30, r22	; 0x1e
    9cc2:	77 8f       	std	Z+31, r23	; 0x1f
    9cc4:	80 a3       	std	Z+32, r24	; 0x20
    9cc6:	91 a3       	std	Z+33, r25	; 0x21
    9cc8:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9cca:	00 e0       	ldi	r16, 0x00	; 0
    9ccc:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(9, 0);
    9cce:	60 e0       	ldi	r22, 0x00	; 0
    9cd0:	89 e0       	ldi	r24, 0x09	; 9
    9cd2:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9cd6:	01 c0       	rjmp	.+2      	; 0x9cda <ReadSensors+0x1e2>
    9cd8:	00 00       	nop
    9cda:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9cde:	81 11       	cpse	r24, r1
    9ce0:	fb cf       	rjmp	.-10     	; 0x9cd8 <ReadSensors+0x1e0>
		 sum += analogConversionResult();
    9ce2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9ce6:	08 0f       	add	r16, r24
    9ce8:	19 1f       	adc	r17, r25
    9cea:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9cec:	81 f7       	brne	.-32     	; 0x9cce <ReadSensors+0x1d6>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Heat_Out = ConvertToTemp( temp );
    9cee:	98 01       	movw	r18, r16
    9cf0:	ad ec       	ldi	r26, 0xCD	; 205
    9cf2:	bc ec       	ldi	r27, 0xCC	; 204
    9cf4:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    9cf8:	96 95       	lsr	r25
    9cfa:	87 95       	ror	r24
    9cfc:	96 95       	lsr	r25
    9cfe:	87 95       	ror	r24
    9d00:	96 95       	lsr	r25
    9d02:	87 95       	ror	r24
    9d04:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <ConvertToTemp>
    9d08:	f7 01       	movw	r30, r14
    9d0a:	62 a7       	std	Z+42, r22	; 0x2a
    9d0c:	73 a7       	std	Z+43, r23	; 0x2b
    9d0e:	84 a7       	std	Z+44, r24	; 0x2c
    9d10:	95 a7       	std	Z+45, r25	; 0x2d
    9d12:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9d14:	00 e0       	ldi	r16, 0x00	; 0
    9d16:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(10, 0);
    9d18:	60 e0       	ldi	r22, 0x00	; 0
    9d1a:	8a e0       	ldi	r24, 0x0A	; 10
    9d1c:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9d20:	01 c0       	rjmp	.+2      	; 0x9d24 <ReadSensors+0x22c>
    9d22:	00 00       	nop
    9d24:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9d28:	81 11       	cpse	r24, r1
    9d2a:	fb cf       	rjmp	.-10     	; 0x9d22 <ReadSensors+0x22a>
		 sum += analogConversionResult();
    9d2c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9d30:	08 0f       	add	r16, r24
    9d32:	19 1f       	adc	r17, r25
    9d34:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9d36:	81 f7       	brne	.-32     	; 0x9d18 <ReadSensors+0x220>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Heat_In = ConvertToTemp( temp );
    9d38:	98 01       	movw	r18, r16
    9d3a:	ad ec       	ldi	r26, 0xCD	; 205
    9d3c:	bc ec       	ldi	r27, 0xCC	; 204
    9d3e:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    9d42:	96 95       	lsr	r25
    9d44:	87 95       	ror	r24
    9d46:	96 95       	lsr	r25
    9d48:	87 95       	ror	r24
    9d4a:	96 95       	lsr	r25
    9d4c:	87 95       	ror	r24
    9d4e:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <ConvertToTemp>
    9d52:	f7 01       	movw	r30, r14
    9d54:	66 a7       	std	Z+46, r22	; 0x2e
    9d56:	77 a7       	std	Z+47, r23	; 0x2f
    9d58:	80 ab       	std	Z+48, r24	; 0x30
    9d5a:	91 ab       	std	Z+49, r25	; 0x31
    9d5c:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9d5e:	00 e0       	ldi	r16, 0x00	; 0
    9d60:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(11, 0);
    9d62:	60 e0       	ldi	r22, 0x00	; 0
    9d64:	8b e0       	ldi	r24, 0x0B	; 11
    9d66:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9d6a:	01 c0       	rjmp	.+2      	; 0x9d6e <ReadSensors+0x276>
    9d6c:	00 00       	nop
    9d6e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9d72:	81 11       	cpse	r24, r1
    9d74:	fb cf       	rjmp	.-10     	; 0x9d6c <ReadSensors+0x274>
		 sum += analogConversionResult();
    9d76:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9d7a:	08 0f       	add	r16, r24
    9d7c:	19 1f       	adc	r17, r25
    9d7e:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9d80:	81 f7       	brne	.-32     	; 0x9d62 <ReadSensors+0x26a>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Src_In = ConvertToTemp( temp );
    9d82:	98 01       	movw	r18, r16
    9d84:	ad ec       	ldi	r26, 0xCD	; 205
    9d86:	bc ec       	ldi	r27, 0xCC	; 204
    9d88:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    9d8c:	96 95       	lsr	r25
    9d8e:	87 95       	ror	r24
    9d90:	96 95       	lsr	r25
    9d92:	87 95       	ror	r24
    9d94:	96 95       	lsr	r25
    9d96:	87 95       	ror	r24
    9d98:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <ConvertToTemp>
    9d9c:	f7 01       	movw	r30, r14
    9d9e:	62 ab       	std	Z+50, r22	; 0x32
    9da0:	73 ab       	std	Z+51, r23	; 0x33
    9da2:	84 ab       	std	Z+52, r24	; 0x34
    9da4:	95 ab       	std	Z+53, r25	; 0x35
    9da6:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9da8:	00 e0       	ldi	r16, 0x00	; 0
    9daa:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(12, 0);
    9dac:	60 e0       	ldi	r22, 0x00	; 0
    9dae:	8c e0       	ldi	r24, 0x0C	; 12
    9db0:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);
    9db4:	01 c0       	rjmp	.+2      	; 0x9db8 <ReadSensors+0x2c0>
    9db6:	00 00       	nop
    9db8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9dbc:	81 11       	cpse	r24, r1
    9dbe:	fb cf       	rjmp	.-10     	; 0x9db6 <ReadSensors+0x2be>
		 sum += analogConversionResult();
    9dc0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9dc4:	08 0f       	add	r16, r24
    9dc6:	19 1f       	adc	r17, r25
    9dc8:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9dca:	81 f7       	brne	.-32     	; 0x9dac <ReadSensors+0x2b4>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Src_Out = ConvertToTemp( temp );
    9dcc:	98 01       	movw	r18, r16
    9dce:	ad ec       	ldi	r26, 0xCD	; 205
    9dd0:	bc ec       	ldi	r27, 0xCC	; 204
    9dd2:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    9dd6:	96 95       	lsr	r25
    9dd8:	87 95       	ror	r24
    9dda:	96 95       	lsr	r25
    9ddc:	87 95       	ror	r24
    9dde:	96 95       	lsr	r25
    9de0:	87 95       	ror	r24
    9de2:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <ConvertToTemp>
    9de6:	f7 01       	movw	r30, r14
    9de8:	66 ab       	std	Z+54, r22	; 0x36
    9dea:	77 ab       	std	Z+55, r23	; 0x37
    9dec:	80 af       	std	Z+56, r24	; 0x38
    9dee:	91 af       	std	Z+57, r25	; 0x39
    9df0:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9df2:	00 e0       	ldi	r16, 0x00	; 0
    9df4:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(13, 0);
    9df6:	60 e0       	ldi	r22, 0x00	; 0
    9df8:	8d e0       	ldi	r24, 0x0D	; 13
    9dfa:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9dfe:	01 c0       	rjmp	.+2      	; 0x9e02 <ReadSensors+0x30a>
    9e00:	00 00       	nop
    9e02:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9e06:	81 11       	cpse	r24, r1
    9e08:	fb cf       	rjmp	.-10     	; 0x9e00 <ReadSensors+0x308>
		 sum += analogConversionResult();
    9e0a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9e0e:	08 0f       	add	r16, r24
    9e10:	19 1f       	adc	r17, r25
    9e12:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9e14:	81 f7       	brne	.-32     	; 0x9df6 <ReadSensors+0x2fe>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Ex_Comp = ConvertToTemp( temp );
    9e16:	98 01       	movw	r18, r16
    9e18:	ad ec       	ldi	r26, 0xCD	; 205
    9e1a:	bc ec       	ldi	r27, 0xCC	; 204
    9e1c:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    9e20:	96 95       	lsr	r25
    9e22:	87 95       	ror	r24
    9e24:	96 95       	lsr	r25
    9e26:	87 95       	ror	r24
    9e28:	96 95       	lsr	r25
    9e2a:	87 95       	ror	r24
    9e2c:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <ConvertToTemp>
    9e30:	f7 01       	movw	r30, r14
    9e32:	62 af       	std	Z+58, r22	; 0x3a
    9e34:	73 af       	std	Z+59, r23	; 0x3b
    9e36:	84 af       	std	Z+60, r24	; 0x3c
    9e38:	95 af       	std	Z+61, r25	; 0x3d
    9e3a:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9e3c:	00 e0       	ldi	r16, 0x00	; 0
    9e3e:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(14, 0);
    9e40:	60 e0       	ldi	r22, 0x00	; 0
    9e42:	8e e0       	ldi	r24, 0x0E	; 14
    9e44:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9e48:	01 c0       	rjmp	.+2      	; 0x9e4c <ReadSensors+0x354>
    9e4a:	00 00       	nop
    9e4c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9e50:	81 11       	cpse	r24, r1
    9e52:	fb cf       	rjmp	.-10     	; 0x9e4a <ReadSensors+0x352>
		 sum += analogConversionResult();
    9e54:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9e58:	08 0f       	add	r16, r24
    9e5a:	19 1f       	adc	r17, r25
    9e5c:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9e5e:	81 f7       	brne	.-32     	; 0x9e40 <ReadSensors+0x348>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Suc_Comp = ConvertToTemp( temp );
    9e60:	98 01       	movw	r18, r16
    9e62:	ad ec       	ldi	r26, 0xCD	; 205
    9e64:	bc ec       	ldi	r27, 0xCC	; 204
    9e66:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    9e6a:	96 95       	lsr	r25
    9e6c:	87 95       	ror	r24
    9e6e:	96 95       	lsr	r25
    9e70:	87 95       	ror	r24
    9e72:	96 95       	lsr	r25
    9e74:	87 95       	ror	r24
    9e76:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <ConvertToTemp>
    9e7a:	f7 01       	movw	r30, r14
    9e7c:	fe 96       	adiw	r30, 0x3e	; 62
    9e7e:	60 83       	st	Z, r22
    9e80:	71 83       	std	Z+1, r23	; 0x01
    9e82:	82 83       	std	Z+2, r24	; 0x02
    9e84:	93 83       	std	Z+3, r25	; 0x03
    9e86:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9e88:	00 e0       	ldi	r16, 0x00	; 0
    9e8a:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(15, 0);
    9e8c:	60 e0       	ldi	r22, 0x00	; 0
    9e8e:	8f e0       	ldi	r24, 0x0F	; 15
    9e90:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9e94:	01 c0       	rjmp	.+2      	; 0x9e98 <ReadSensors+0x3a0>
    9e96:	00 00       	nop
    9e98:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9e9c:	81 11       	cpse	r24, r1
    9e9e:	fb cf       	rjmp	.-10     	; 0x9e96 <ReadSensors+0x39e>
		 sum += analogConversionResult();
    9ea0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9ea4:	08 0f       	add	r16, r24
    9ea6:	19 1f       	adc	r17, r25
    9ea8:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9eaa:	81 f7       	brne	.-32     	; 0x9e8c <ReadSensors+0x394>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Cond_Temp = ConvertToTemp( temp )	;
    9eac:	98 01       	movw	r18, r16
    9eae:	ad ec       	ldi	r26, 0xCD	; 205
    9eb0:	bc ec       	ldi	r27, 0xCC	; 204
    9eb2:	0e 94 be 59 	call	0xb37c	; 0xb37c <__umulhisi3>
    9eb6:	96 95       	lsr	r25
    9eb8:	87 95       	ror	r24
    9eba:	96 95       	lsr	r25
    9ebc:	87 95       	ror	r24
    9ebe:	96 95       	lsr	r25
    9ec0:	87 95       	ror	r24
    9ec2:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <ConvertToTemp>
    9ec6:	f7 01       	movw	r30, r14
    9ec8:	ee 5b       	subi	r30, 0xBE	; 190
    9eca:	ff 4f       	sbci	r31, 0xFF	; 255
    9ecc:	60 83       	st	Z, r22
    9ece:	71 83       	std	Z+1, r23	; 0x01
    9ed0:	82 83       	std	Z+2, r24	; 0x02
    9ed2:	93 83       	std	Z+3, r25	; 0x03
	 //--------------------------------------------------------------
	 comp->SuperHeat=ReadSuperHeat (comp);
    9ed4:	c7 01       	movw	r24, r14
    9ed6:	0e 94 b2 3f 	call	0x7f64	; 0x7f64 <ReadSuperHeat>
    9eda:	f7 01       	movw	r30, r14
    9edc:	ea 5b       	subi	r30, 0xBA	; 186
    9ede:	ff 4f       	sbci	r31, 0xFF	; 255
    9ee0:	60 83       	st	Z, r22
    9ee2:	71 83       	std	Z+1, r23	; 0x01
    9ee4:	82 83       	std	Z+2, r24	; 0x02
    9ee6:	93 83       	std	Z+3, r25	; 0x03
	 comp->SuperCool=ReadSuperCool (comp);				
    9ee8:	c7 01       	movw	r24, r14
    9eea:	0e 94 1c 40 	call	0x8038	; 0x8038 <ReadSuperCool>
    9eee:	f7 01       	movw	r30, r14
    9ef0:	e6 5b       	subi	r30, 0xB6	; 182
    9ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    9ef4:	60 83       	st	Z, r22
    9ef6:	71 83       	std	Z+1, r23	; 0x01
    9ef8:	82 83       	std	Z+2, r24	; 0x02
    9efa:	93 83       	std	Z+3, r25	; 0x03
						}
						
    if(comp->Index==2) 
    9efc:	f7 01       	movw	r30, r14
    9efe:	e2 59       	subi	r30, 0x92	; 146
    9f00:	ff 4f       	sbci	r31, 0xFF	; 255
    9f02:	80 81       	ld	r24, Z
    9f04:	91 81       	ldd	r25, Z+1	; 0x01
    9f06:	02 97       	sbiw	r24, 0x02	; 2
    9f08:	09 f0       	breq	.+2      	; 0x9f0c <ReadSensors+0x414>
    9f0a:	07 c1       	rjmp	.+526    	; 0xa11a <ReadSensors+0x622>
	{
					 //read High_Pressure_1
					 PORTL |=    (1 << PL2);//a0
    9f0c:	eb e0       	ldi	r30, 0x0B	; 11
    9f0e:	f1 e0       	ldi	r31, 0x01	; 1
    9f10:	80 81       	ld	r24, Z
    9f12:	84 60       	ori	r24, 0x04	; 4
    9f14:	80 83       	st	Z, r24
					 PORTL &= ~  (1 << PL1);//a1
    9f16:	80 81       	ld	r24, Z
    9f18:	8d 7f       	andi	r24, 0xFD	; 253
    9f1a:	80 83       	st	Z, r24
					 PORTL &= ~  (1 << PL0);//a2
    9f1c:	80 81       	ld	r24, Z
    9f1e:	8e 7f       	andi	r24, 0xFE	; 254
    9f20:	80 83       	st	Z, r24
					 startAnalogConversion(0, 0);
    9f22:	60 e0       	ldi	r22, 0x00	; 0
    9f24:	80 e0       	ldi	r24, 0x00	; 0
    9f26:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					 while( analogIsConverting() )
    9f2a:	01 c0       	rjmp	.+2      	; 0x9f2e <ReadSensors+0x436>
    9f2c:	00 00       	nop
    9f2e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9f32:	81 11       	cpse	r24, r1
					 _delay_us(25);//portYIELD();
					 temp = analogConversionResult();
    9f34:	fb cf       	rjmp	.-10     	; 0x9f2c <ReadSensors+0x434>
    9f36:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					 comp->High_Press = ConvertToHighPress(temp);
    9f3a:	bc 01       	movw	r22, r24
    9f3c:	80 e0       	ldi	r24, 0x00	; 0
    9f3e:	90 e0       	ldi	r25, 0x00	; 0
    9f40:	d9 d4       	rcall	.+2482   	; 0xa8f4 <__floatunsisf>
    9f42:	20 e0       	ldi	r18, 0x00	; 0
    9f44:	30 e0       	ldi	r19, 0x00	; 0
    9f46:	4c ec       	ldi	r20, 0xCC	; 204
    9f48:	52 e4       	ldi	r21, 0x42	; 66
    9f4a:	d2 d3       	rcall	.+1956   	; 0xa6f0 <__subsf3>
    9f4c:	20 e0       	ldi	r18, 0x00	; 0
    9f4e:	30 e0       	ldi	r19, 0x00	; 0
    9f50:	48 e0       	ldi	r20, 0x08	; 8
    9f52:	52 e4       	ldi	r21, 0x42	; 66
    9f54:	ca d5       	rcall	.+2964   	; 0xaaea <__mulsf3>
    9f56:	20 e0       	ldi	r18, 0x00	; 0
    9f58:	30 e0       	ldi	r19, 0x00	; 0
    9f5a:	4d e4       	ldi	r20, 0x4D	; 77
    9f5c:	54 e4       	ldi	r21, 0x44	; 68
    9f5e:	31 d4       	rcall	.+2146   	; 0xa7c2 <__divsf3>
    9f60:	f7 01       	movw	r30, r14
    9f62:	62 8f       	std	Z+26, r22	; 0x1a
    9f64:	73 8f       	std	Z+27, r23	; 0x1b
    9f66:	84 8f       	std	Z+28, r24	; 0x1c
    9f68:	95 8f       	std	Z+29, r25	; 0x1d
					 //read Low_Pressure_1
					 PORTL &= ~   (1 << PL2);
    9f6a:	eb e0       	ldi	r30, 0x0B	; 11
    9f6c:	f1 e0       	ldi	r31, 0x01	; 1
    9f6e:	80 81       	ld	r24, Z
    9f70:	8b 7f       	andi	r24, 0xFB	; 251
    9f72:	80 83       	st	Z, r24
					 PORTL |=     (1 << PL1);
    9f74:	80 81       	ld	r24, Z
    9f76:	82 60       	ori	r24, 0x02	; 2
    9f78:	80 83       	st	Z, r24
					 PORTL &= ~   (1 << PL0);
    9f7a:	80 81       	ld	r24, Z
    9f7c:	8e 7f       	andi	r24, 0xFE	; 254
    9f7e:	80 83       	st	Z, r24
					 startAnalogConversion(0, 0);
    9f80:	60 e0       	ldi	r22, 0x00	; 0
    9f82:	80 e0       	ldi	r24, 0x00	; 0
    9f84:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
    9f88:	01 c0       	rjmp	.+2      	; 0x9f8c <ReadSensors+0x494>
					 while( analogIsConverting() )
    9f8a:	00 00       	nop
    9f8c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
					_delay_us(25);// portYIELD();
					 temp = analogConversionResult();
    9f90:	81 11       	cpse	r24, r1
    9f92:	fb cf       	rjmp	.-10     	; 0x9f8a <ReadSensors+0x492>
					 comp->Low_Press = ConvertToLowPress( temp );
    9f94:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9f98:	bc 01       	movw	r22, r24
    9f9a:	80 e0       	ldi	r24, 0x00	; 0
    9f9c:	90 e0       	ldi	r25, 0x00	; 0
    9f9e:	aa d4       	rcall	.+2388   	; 0xa8f4 <__floatunsisf>
    9fa0:	20 e0       	ldi	r18, 0x00	; 0
    9fa2:	30 e0       	ldi	r19, 0x00	; 0
    9fa4:	4c e5       	ldi	r20, 0x5C	; 92
    9fa6:	52 e4       	ldi	r21, 0x42	; 66
    9fa8:	a3 d3       	rcall	.+1862   	; 0xa6f0 <__subsf3>
    9faa:	20 e0       	ldi	r18, 0x00	; 0
    9fac:	30 e0       	ldi	r19, 0x00	; 0
    9fae:	40 e9       	ldi	r20, 0x90	; 144
    9fb0:	51 e4       	ldi	r21, 0x41	; 65
    9fb2:	9b d5       	rcall	.+2870   	; 0xaaea <__mulsf3>
    9fb4:	20 e0       	ldi	r18, 0x00	; 0
    9fb6:	30 ec       	ldi	r19, 0xC0	; 192
    9fb8:	48 e5       	ldi	r20, 0x58	; 88
    9fba:	54 e4       	ldi	r21, 0x44	; 68
    9fbc:	02 d4       	rcall	.+2052   	; 0xa7c2 <__divsf3>
    9fbe:	f7 01       	movw	r30, r14
    9fc0:	66 8f       	std	Z+30, r22	; 0x1e
    9fc2:	77 8f       	std	Z+31, r23	; 0x1f
    9fc4:	80 a3       	std	Z+32, r24	; 0x20
    9fc6:	91 a3       	std	Z+33, r25	; 0x21
					startAnalogConversion(2, 0);
    9fc8:	60 e0       	ldi	r22, 0x00	; 0
    9fca:	82 e0       	ldi	r24, 0x02	; 2
    9fcc:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9fd0:	01 c0       	rjmp	.+2      	; 0x9fd4 <ReadSensors+0x4dc>
    9fd2:	00 00       	nop
    9fd4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9fd8:	81 11       	cpse	r24, r1
    9fda:	fb cf       	rjmp	.-10     	; 0x9fd2 <ReadSensors+0x4da>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9fdc:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Heat_Out = ConvertToTemp( temp );
    9fe0:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <ConvertToTemp>
    9fe4:	f7 01       	movw	r30, r14
    9fe6:	62 a7       	std	Z+42, r22	; 0x2a
    9fe8:	73 a7       	std	Z+43, r23	; 0x2b
    9fea:	84 a7       	std	Z+44, r24	; 0x2c
    9fec:	95 a7       	std	Z+45, r25	; 0x2d
					//---------------------------------------------------------------
					startAnalogConversion(3, 0);
    9fee:	60 e0       	ldi	r22, 0x00	; 0
    9ff0:	83 e0       	ldi	r24, 0x03	; 3
    9ff2:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9ff6:	01 c0       	rjmp	.+2      	; 0x9ffa <ReadSensors+0x502>
    9ff8:	00 00       	nop
    9ffa:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9ffe:	81 11       	cpse	r24, r1
    a000:	fb cf       	rjmp	.-10     	; 0x9ff8 <ReadSensors+0x500>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    a002:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Heat_In = ConvertToTemp( temp );
    a006:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <ConvertToTemp>
    a00a:	f7 01       	movw	r30, r14
    a00c:	66 a7       	std	Z+46, r22	; 0x2e
    a00e:	77 a7       	std	Z+47, r23	; 0x2f
    a010:	80 ab       	std	Z+48, r24	; 0x30
    a012:	91 ab       	std	Z+49, r25	; 0x31
					//---------------------------------------------------------------
					startAnalogConversion(4, 0);
    a014:	60 e0       	ldi	r22, 0x00	; 0
    a016:	84 e0       	ldi	r24, 0x04	; 4
    a018:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    a01c:	01 c0       	rjmp	.+2      	; 0xa020 <ReadSensors+0x528>
    a01e:	00 00       	nop
    a020:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    a024:	81 11       	cpse	r24, r1
    a026:	fb cf       	rjmp	.-10     	; 0xa01e <ReadSensors+0x526>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    a028:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Src_In = ConvertToTemp( temp );
    a02c:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <ConvertToTemp>
    a030:	f7 01       	movw	r30, r14
    a032:	62 ab       	std	Z+50, r22	; 0x32
    a034:	73 ab       	std	Z+51, r23	; 0x33
    a036:	84 ab       	std	Z+52, r24	; 0x34
    a038:	95 ab       	std	Z+53, r25	; 0x35
					//---------------------------------------------------------------
					startAnalogConversion(5, 0);
    a03a:	60 e0       	ldi	r22, 0x00	; 0
    a03c:	85 e0       	ldi	r24, 0x05	; 5
    a03e:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    a042:	01 c0       	rjmp	.+2      	; 0xa046 <ReadSensors+0x54e>
    a044:	00 00       	nop
    a046:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    a04a:	81 11       	cpse	r24, r1
    a04c:	fb cf       	rjmp	.-10     	; 0xa044 <ReadSensors+0x54c>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    a04e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Src_Out = ConvertToTemp( temp );
    a052:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <ConvertToTemp>
    a056:	f7 01       	movw	r30, r14
    a058:	66 ab       	std	Z+54, r22	; 0x36
    a05a:	77 ab       	std	Z+55, r23	; 0x37
    a05c:	80 af       	std	Z+56, r24	; 0x38
    a05e:	91 af       	std	Z+57, r25	; 0x39
					//---------------------------------------------------------------
					startAnalogConversion(6, 0);
    a060:	60 e0       	ldi	r22, 0x00	; 0
    a062:	86 e0       	ldi	r24, 0x06	; 6
    a064:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    a068:	01 c0       	rjmp	.+2      	; 0xa06c <ReadSensors+0x574>
    a06a:	00 00       	nop
    a06c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    a070:	81 11       	cpse	r24, r1
    a072:	fb cf       	rjmp	.-10     	; 0xa06a <ReadSensors+0x572>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    a074:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Ex_Comp = ConvertToTemp( temp );
    a078:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <ConvertToTemp>
    a07c:	f7 01       	movw	r30, r14
    a07e:	62 af       	std	Z+58, r22	; 0x3a
    a080:	73 af       	std	Z+59, r23	; 0x3b
    a082:	84 af       	std	Z+60, r24	; 0x3c
    a084:	95 af       	std	Z+61, r25	; 0x3d
					//---------------------------------------------------------------
					startAnalogConversion(7, 0);
    a086:	60 e0       	ldi	r22, 0x00	; 0
    a088:	87 e0       	ldi	r24, 0x07	; 7
    a08a:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    a08e:	01 c0       	rjmp	.+2      	; 0xa092 <ReadSensors+0x59a>
    a090:	00 00       	nop
    a092:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    a096:	81 11       	cpse	r24, r1
    a098:	fb cf       	rjmp	.-10     	; 0xa090 <ReadSensors+0x598>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    a09a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Suc_Comp = ConvertToTemp( temp );
    a09e:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <ConvertToTemp>
    a0a2:	f7 01       	movw	r30, r14
    a0a4:	fe 96       	adiw	r30, 0x3e	; 62
    a0a6:	60 83       	st	Z, r22
    a0a8:	71 83       	std	Z+1, r23	; 0x01
    a0aa:	82 83       	std	Z+2, r24	; 0x02
    a0ac:	93 83       	std	Z+3, r25	; 0x03
					//---------------------------------------------------------------
					startAnalogConversion(8, 0);
    a0ae:	60 e0       	ldi	r22, 0x00	; 0
    a0b0:	88 e0       	ldi	r24, 0x08	; 8
    a0b2:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    a0b6:	01 c0       	rjmp	.+2      	; 0xa0ba <ReadSensors+0x5c2>
    a0b8:	00 00       	nop
    a0ba:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    a0be:	81 11       	cpse	r24, r1
    a0c0:	fb cf       	rjmp	.-10     	; 0xa0b8 <ReadSensors+0x5c0>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    a0c2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Cond_Temp = ConvertToTemp( temp )	;
    a0c6:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <ConvertToTemp>
    a0ca:	f7 01       	movw	r30, r14
    a0cc:	ee 5b       	subi	r30, 0xBE	; 190
    a0ce:	ff 4f       	sbci	r31, 0xFF	; 255
    a0d0:	60 83       	st	Z, r22
    a0d2:	71 83       	std	Z+1, r23	; 0x01
    a0d4:	82 83       	std	Z+2, r24	; 0x02
    a0d6:	93 83       	std	Z+3, r25	; 0x03
					//--------------------------------------------------------------
					comp->SuperHeat=ReadSuperHeat (comp);
    a0d8:	c7 01       	movw	r24, r14
    a0da:	0e 94 b2 3f 	call	0x7f64	; 0x7f64 <ReadSuperHeat>
    a0de:	f7 01       	movw	r30, r14
    a0e0:	ea 5b       	subi	r30, 0xBA	; 186
    a0e2:	ff 4f       	sbci	r31, 0xFF	; 255
    a0e4:	60 83       	st	Z, r22
    a0e6:	71 83       	std	Z+1, r23	; 0x01
    a0e8:	82 83       	std	Z+2, r24	; 0x02
    a0ea:	93 83       	std	Z+3, r25	; 0x03
					comp->SuperCool=ReadSuperCool (comp);
    a0ec:	c7 01       	movw	r24, r14
    a0ee:	0e 94 1c 40 	call	0x8038	; 0x8038 <ReadSuperCool>
    a0f2:	f7 01       	movw	r30, r14
    a0f4:	e6 5b       	subi	r30, 0xB6	; 182
    a0f6:	ff 4f       	sbci	r31, 0xFF	; 255
    a0f8:	60 83       	st	Z, r22
    a0fa:	71 83       	std	Z+1, r23	; 0x01
    a0fc:	82 83       	std	Z+2, r24	; 0x02
					if(comp->checkTrv)comp->trvCorection=corectTrv(comp);
    a0fe:	93 83       	std	Z+3, r25	; 0x03
    a100:	f7 01       	movw	r30, r14
    a102:	81 81       	ldd	r24, Z+1	; 0x01
    a104:	88 23       	and	r24, r24
    a106:	49 f0       	breq	.+18     	; 0xa11a <ReadSensors+0x622>
    a108:	c7 01       	movw	r24, r14
    a10a:	0e 94 85 40 	call	0x810a	; 0x810a <corectTrv>
    a10e:	e7 01       	movw	r28, r14
    a110:	ca 59       	subi	r28, 0x9A	; 154
    a112:	df 4f       	sbci	r29, 0xFF	; 255
    a114:	be d3       	rcall	.+1916   	; 0xa892 <__fixsfsi>
    a116:	79 83       	std	Y+1, r23	; 0x01
    a118:	68 83       	st	Y, r22
					//EEpromData.Volt_B= ADE7758_bvrms();
					//EEpromData.Volt_C= ADE7758_cvrms();
					}

return;	
}
    a11a:	df 91       	pop	r29
    a11c:	cf 91       	pop	r28
    a11e:	1f 91       	pop	r17
    a120:	0f 91       	pop	r16
    a122:	ff 90       	pop	r15
    a124:	ef 90       	pop	r14
    a126:	08 95       	ret

0000a128 <ComutateTrv>:
	}
	if(comp->Index==2)
	{
		xTimerDelete(xComutateTrv_2,0);
	}
}
    a128:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    a12c:	fc 01       	movw	r30, r24
    a12e:	20 81       	ld	r18, Z
    a130:	2a 31       	cpi	r18, 0x1A	; 26
    a132:	09 f0       	breq	.+2      	; 0xa136 <ComutateTrv+0xe>
    a134:	74 c0       	rjmp	.+232    	; 0xa21e <ComutateTrv+0xf6>
    a136:	22 b1       	in	r18, 0x02	; 2
    a138:	20 7f       	andi	r18, 0xF0	; 240
    a13a:	22 b9       	out	0x02, r18	; 2
    a13c:	20 91 c0 09 	lds	r18, 0x09C0	; 0x8009c0 <Comp_1+0x68>
    a140:	30 91 c1 09 	lds	r19, 0x09C1	; 0x8009c1 <Comp_1+0x69>
    a144:	12 16       	cp	r1, r18
    a146:	13 06       	cpc	r1, r19
    a148:	54 f5       	brge	.+84     	; 0xa19e <ComutateTrv+0x76>
    a14a:	e0 91 46 07 	lds	r30, 0x0746	; 0x800746 <step_index.2937>
    a14e:	21 e0       	ldi	r18, 0x01	; 1
    a150:	2e 0f       	add	r18, r30
    a152:	20 93 46 07 	sts	0x0746, r18	; 0x800746 <step_index.2937>
    a156:	32 b1       	in	r19, 0x02	; 2
    a158:	f0 e0       	ldi	r31, 0x00	; 0
    a15a:	ee 5e       	subi	r30, 0xEE	; 238
    a15c:	fd 4f       	sbci	r31, 0xFD	; 253
    a15e:	20 81       	ld	r18, Z
    a160:	23 2b       	or	r18, r19
    a162:	22 b9       	out	0x02, r18	; 2
    a164:	e0 ec       	ldi	r30, 0xC0	; 192
    a166:	f9 e0       	ldi	r31, 0x09	; 9
    a168:	20 81       	ld	r18, Z
    a16a:	31 81       	ldd	r19, Z+1	; 0x01
    a16c:	21 50       	subi	r18, 0x01	; 1
    a16e:	31 09       	sbc	r19, r1
    a170:	31 83       	std	Z+1, r19	; 0x01
    a172:	20 83       	st	Z, r18
    a174:	20 91 c2 09 	lds	r18, 0x09C2	; 0x8009c2 <Comp_1+0x6a>
    a178:	30 91 c3 09 	lds	r19, 0x09C3	; 0x8009c3 <Comp_1+0x6b>
    a17c:	2f 5f       	subi	r18, 0xFF	; 255
    a17e:	3f 4f       	sbci	r19, 0xFF	; 255
    a180:	21 3f       	cpi	r18, 0xF1	; 241
    a182:	31 05       	cpc	r19, r1
    a184:	2c f4       	brge	.+10     	; 0xa190 <ComutateTrv+0x68>
    a186:	30 93 c3 09 	sts	0x09C3, r19	; 0x8009c3 <Comp_1+0x6b>
    a18a:	20 93 c2 09 	sts	0x09C2, r18	; 0x8009c2 <Comp_1+0x6a>
    a18e:	41 c0       	rjmp	.+130    	; 0xa212 <ComutateTrv+0xea>
    a190:	20 ef       	ldi	r18, 0xF0	; 240
    a192:	30 e0       	ldi	r19, 0x00	; 0
    a194:	30 93 c3 09 	sts	0x09C3, r19	; 0x8009c3 <Comp_1+0x6b>
    a198:	20 93 c2 09 	sts	0x09C2, r18	; 0x8009c2 <Comp_1+0x6a>
    a19c:	3a c0       	rjmp	.+116    	; 0xa212 <ComutateTrv+0xea>
    a19e:	33 23       	and	r19, r19
    a1a0:	24 f5       	brge	.+72     	; 0xa1ea <ComutateTrv+0xc2>
    a1a2:	e0 91 46 07 	lds	r30, 0x0746	; 0x800746 <step_index.2937>
    a1a6:	21 e0       	ldi	r18, 0x01	; 1
    a1a8:	2e 0f       	add	r18, r30
    a1aa:	20 93 46 07 	sts	0x0746, r18	; 0x800746 <step_index.2937>
    a1ae:	f0 e0       	ldi	r31, 0x00	; 0
    a1b0:	e2 5f       	subi	r30, 0xF2	; 242
    a1b2:	fd 4f       	sbci	r31, 0xFD	; 253
    a1b4:	20 81       	ld	r18, Z
    a1b6:	22 b9       	out	0x02, r18	; 2
    a1b8:	e0 ec       	ldi	r30, 0xC0	; 192
    a1ba:	f9 e0       	ldi	r31, 0x09	; 9
    a1bc:	20 81       	ld	r18, Z
    a1be:	31 81       	ldd	r19, Z+1	; 0x01
    a1c0:	2f 5f       	subi	r18, 0xFF	; 255
    a1c2:	3f 4f       	sbci	r19, 0xFF	; 255
    a1c4:	31 83       	std	Z+1, r19	; 0x01
    a1c6:	20 83       	st	Z, r18
    a1c8:	20 91 c2 09 	lds	r18, 0x09C2	; 0x8009c2 <Comp_1+0x6a>
    a1cc:	30 91 c3 09 	lds	r19, 0x09C3	; 0x8009c3 <Comp_1+0x6b>
    a1d0:	21 50       	subi	r18, 0x01	; 1
    a1d2:	31 09       	sbc	r19, r1
    a1d4:	2a f0       	brmi	.+10     	; 0xa1e0 <ComutateTrv+0xb8>
    a1d6:	30 93 c3 09 	sts	0x09C3, r19	; 0x8009c3 <Comp_1+0x6b>
    a1da:	20 93 c2 09 	sts	0x09C2, r18	; 0x8009c2 <Comp_1+0x6a>
    a1de:	19 c0       	rjmp	.+50     	; 0xa212 <ComutateTrv+0xea>
    a1e0:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <Comp_1+0x6b>
    a1e4:	10 92 c2 09 	sts	0x09C2, r1	; 0x8009c2 <Comp_1+0x6a>
    a1e8:	14 c0       	rjmp	.+40     	; 0xa212 <ComutateTrv+0xea>
    a1ea:	23 2b       	or	r18, r19
    a1ec:	69 f4       	brne	.+26     	; 0xa208 <ComutateTrv+0xe0>
    a1ee:	20 91 5f 09 	lds	r18, 0x095F	; 0x80095f <Comp_1+0x7>
    a1f2:	22 23       	and	r18, r18
    a1f4:	49 f0       	breq	.+18     	; 0xa208 <ComutateTrv+0xe0>
    a1f6:	20 ef       	ldi	r18, 0xF0	; 240
    a1f8:	30 e0       	ldi	r19, 0x00	; 0
    a1fa:	30 93 c1 09 	sts	0x09C1, r19	; 0x8009c1 <Comp_1+0x69>
    a1fe:	20 93 c0 09 	sts	0x09C0, r18	; 0x8009c0 <Comp_1+0x68>
    a202:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <Comp_1+0x7>
    a206:	05 c0       	rjmp	.+10     	; 0xa212 <ComutateTrv+0xea>
    a208:	22 b1       	in	r18, 0x02	; 2
    a20a:	20 7f       	andi	r18, 0xF0	; 240
    a20c:	22 b9       	out	0x02, r18	; 2
    a20e:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <Comp_1+0x7>
    a212:	20 91 46 07 	lds	r18, 0x0746	; 0x800746 <step_index.2937>
    a216:	24 30       	cpi	r18, 0x04	; 4
    a218:	10 f0       	brcs	.+4      	; 0xa21e <ComutateTrv+0xf6>
    a21a:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <step_index.2937>
    a21e:	fc 01       	movw	r30, r24
    a220:	80 81       	ld	r24, Z
    a222:	8b 31       	cpi	r24, 0x1B	; 27
    a224:	09 f0       	breq	.+2      	; 0xa228 <ComutateTrv+0x100>
    a226:	70 c0       	rjmp	.+224    	; 0xa308 <ComutateTrv+0x1e0>
    a228:	82 b1       	in	r24, 0x02	; 2
    a22a:	8f 70       	andi	r24, 0x0F	; 15
    a22c:	82 b9       	out	0x02, r24	; 2
    a22e:	80 91 46 0a 	lds	r24, 0x0A46	; 0x800a46 <Comp_2+0x68>
    a232:	90 91 47 0a 	lds	r25, 0x0A47	; 0x800a47 <Comp_2+0x69>
    a236:	18 16       	cp	r1, r24
    a238:	19 06       	cpc	r1, r25
    a23a:	44 f5       	brge	.+80     	; 0xa28c <ComutateTrv+0x164>
    a23c:	e0 91 45 07 	lds	r30, 0x0745	; 0x800745 <step_index.2938>
    a240:	81 e0       	ldi	r24, 0x01	; 1
    a242:	8e 0f       	add	r24, r30
    a244:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <step_index.2938>
    a248:	92 b1       	in	r25, 0x02	; 2
    a24a:	f0 e0       	ldi	r31, 0x00	; 0
    a24c:	e6 5f       	subi	r30, 0xF6	; 246
    a24e:	fd 4f       	sbci	r31, 0xFD	; 253
    a250:	80 81       	ld	r24, Z
    a252:	89 2b       	or	r24, r25
    a254:	82 b9       	out	0x02, r24	; 2
    a256:	e6 e4       	ldi	r30, 0x46	; 70
    a258:	fa e0       	ldi	r31, 0x0A	; 10
    a25a:	80 81       	ld	r24, Z
    a25c:	91 81       	ldd	r25, Z+1	; 0x01
    a25e:	01 97       	sbiw	r24, 0x01	; 1
    a260:	91 83       	std	Z+1, r25	; 0x01
    a262:	80 83       	st	Z, r24
    a264:	80 91 48 0a 	lds	r24, 0x0A48	; 0x800a48 <Comp_2+0x6a>
    a268:	90 91 49 0a 	lds	r25, 0x0A49	; 0x800a49 <Comp_2+0x6b>
    a26c:	01 96       	adiw	r24, 0x01	; 1
    a26e:	81 3f       	cpi	r24, 0xF1	; 241
    a270:	91 05       	cpc	r25, r1
    a272:	2c f4       	brge	.+10     	; 0xa27e <ComutateTrv+0x156>
    a274:	90 93 49 0a 	sts	0x0A49, r25	; 0x800a49 <Comp_2+0x6b>
    a278:	80 93 48 0a 	sts	0x0A48, r24	; 0x800a48 <Comp_2+0x6a>
    a27c:	3f c0       	rjmp	.+126    	; 0xa2fc <ComutateTrv+0x1d4>
    a27e:	80 ef       	ldi	r24, 0xF0	; 240
    a280:	90 e0       	ldi	r25, 0x00	; 0
    a282:	90 93 49 0a 	sts	0x0A49, r25	; 0x800a49 <Comp_2+0x6b>
    a286:	80 93 48 0a 	sts	0x0A48, r24	; 0x800a48 <Comp_2+0x6a>
    a28a:	38 c0       	rjmp	.+112    	; 0xa2fc <ComutateTrv+0x1d4>
    a28c:	99 23       	and	r25, r25
    a28e:	14 f5       	brge	.+68     	; 0xa2d4 <ComutateTrv+0x1ac>
    a290:	e0 91 45 07 	lds	r30, 0x0745	; 0x800745 <step_index.2938>
    a294:	81 e0       	ldi	r24, 0x01	; 1
    a296:	8e 0f       	add	r24, r30
    a298:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <step_index.2938>
    a29c:	f0 e0       	ldi	r31, 0x00	; 0
    a29e:	ea 5f       	subi	r30, 0xFA	; 250
    a2a0:	fd 4f       	sbci	r31, 0xFD	; 253
    a2a2:	80 81       	ld	r24, Z
    a2a4:	82 b9       	out	0x02, r24	; 2
    a2a6:	e6 e4       	ldi	r30, 0x46	; 70
    a2a8:	fa e0       	ldi	r31, 0x0A	; 10
    a2aa:	80 81       	ld	r24, Z
    a2ac:	91 81       	ldd	r25, Z+1	; 0x01
    a2ae:	01 96       	adiw	r24, 0x01	; 1
    a2b0:	91 83       	std	Z+1, r25	; 0x01
    a2b2:	80 83       	st	Z, r24
    a2b4:	80 91 48 0a 	lds	r24, 0x0A48	; 0x800a48 <Comp_2+0x6a>
    a2b8:	90 91 49 0a 	lds	r25, 0x0A49	; 0x800a49 <Comp_2+0x6b>
    a2bc:	01 97       	sbiw	r24, 0x01	; 1
    a2be:	2a f0       	brmi	.+10     	; 0xa2ca <ComutateTrv+0x1a2>
    a2c0:	90 93 49 0a 	sts	0x0A49, r25	; 0x800a49 <Comp_2+0x6b>
    a2c4:	80 93 48 0a 	sts	0x0A48, r24	; 0x800a48 <Comp_2+0x6a>
    a2c8:	19 c0       	rjmp	.+50     	; 0xa2fc <ComutateTrv+0x1d4>
    a2ca:	10 92 49 0a 	sts	0x0A49, r1	; 0x800a49 <Comp_2+0x6b>
    a2ce:	10 92 48 0a 	sts	0x0A48, r1	; 0x800a48 <Comp_2+0x6a>
    a2d2:	14 c0       	rjmp	.+40     	; 0xa2fc <ComutateTrv+0x1d4>
    a2d4:	89 2b       	or	r24, r25
    a2d6:	69 f4       	brne	.+26     	; 0xa2f2 <ComutateTrv+0x1ca>
    a2d8:	80 91 e5 09 	lds	r24, 0x09E5	; 0x8009e5 <Comp_2+0x7>
    a2dc:	88 23       	and	r24, r24
    a2de:	49 f0       	breq	.+18     	; 0xa2f2 <ComutateTrv+0x1ca>
    a2e0:	80 ef       	ldi	r24, 0xF0	; 240
    a2e2:	90 e0       	ldi	r25, 0x00	; 0
    a2e4:	90 93 47 0a 	sts	0x0A47, r25	; 0x800a47 <Comp_2+0x69>
    a2e8:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <Comp_2+0x68>
    a2ec:	10 92 e5 09 	sts	0x09E5, r1	; 0x8009e5 <Comp_2+0x7>
    a2f0:	05 c0       	rjmp	.+10     	; 0xa2fc <ComutateTrv+0x1d4>
    a2f2:	82 b1       	in	r24, 0x02	; 2
    a2f4:	8f 70       	andi	r24, 0x0F	; 15
    a2f6:	82 b9       	out	0x02, r24	; 2
    a2f8:	10 92 e5 09 	sts	0x09E5, r1	; 0x8009e5 <Comp_2+0x7>
    a2fc:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <step_index.2938>
    a300:	84 30       	cpi	r24, 0x04	; 4
    a302:	10 f0       	brcs	.+4      	; 0xa308 <ComutateTrv+0x1e0>
    a304:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <step_index.2938>
    a308:	08 95       	ret

0000a30a <activateTrvTimer>:
    a30a:	ef 92       	push	r14
    a30c:	ff 92       	push	r15
    a30e:	0f 93       	push	r16
    a310:	1f 93       	push	r17
    a312:	82 59       	subi	r24, 0x92	; 146
    a314:	9f 4f       	sbci	r25, 0xFF	; 255
    a316:	fc 01       	movw	r30, r24
    a318:	80 81       	ld	r24, Z
    a31a:	91 81       	ldd	r25, Z+1	; 0x01
    a31c:	81 30       	cpi	r24, 0x01	; 1
    a31e:	91 05       	cpc	r25, r1
    a320:	b1 f4       	brne	.+44     	; 0xa34e <activateTrvTimer+0x44>
    a322:	0f 2e       	mov	r0, r31
    a324:	f4 e9       	ldi	r31, 0x94	; 148
    a326:	ef 2e       	mov	r14, r31
    a328:	f0 e5       	ldi	r31, 0x50	; 80
    a32a:	ff 2e       	mov	r15, r31
    a32c:	f0 2d       	mov	r31, r0
    a32e:	0f e5       	ldi	r16, 0x5F	; 95
    a330:	16 e0       	ldi	r17, 0x06	; 6
    a332:	21 e0       	ldi	r18, 0x01	; 1
    a334:	42 e3       	ldi	r20, 0x32	; 50
    a336:	50 e0       	ldi	r21, 0x00	; 0
    a338:	60 e0       	ldi	r22, 0x00	; 0
    a33a:	70 e0       	ldi	r23, 0x00	; 0
    a33c:	8e e1       	ldi	r24, 0x1E	; 30
    a33e:	96 e0       	ldi	r25, 0x06	; 6
    a340:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    a344:	90 93 de 08 	sts	0x08DE, r25	; 0x8008de <xComutateTrv_1+0x1>
    a348:	80 93 dd 08 	sts	0x08DD, r24	; 0x8008dd <xComutateTrv_1>
    a34c:	17 c0       	rjmp	.+46     	; 0xa37c <activateTrvTimer+0x72>
    a34e:	02 97       	sbiw	r24, 0x02	; 2
    a350:	a9 f4       	brne	.+42     	; 0xa37c <activateTrvTimer+0x72>
    a352:	0f 2e       	mov	r0, r31
    a354:	f4 e9       	ldi	r31, 0x94	; 148
    a356:	ef 2e       	mov	r14, r31
    a358:	f0 e5       	ldi	r31, 0x50	; 80
    a35a:	ff 2e       	mov	r15, r31
    a35c:	f0 2d       	mov	r31, r0
    a35e:	0e e5       	ldi	r16, 0x5E	; 94
    a360:	16 e0       	ldi	r17, 0x06	; 6
    a362:	21 e0       	ldi	r18, 0x01	; 1
    a364:	42 e3       	ldi	r20, 0x32	; 50
    a366:	50 e0       	ldi	r21, 0x00	; 0
    a368:	60 e0       	ldi	r22, 0x00	; 0
    a36a:	70 e0       	ldi	r23, 0x00	; 0
    a36c:	87 e2       	ldi	r24, 0x27	; 39
    a36e:	96 e0       	ldi	r25, 0x06	; 6
    a370:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    a374:	90 93 d5 09 	sts	0x09D5, r25	; 0x8009d5 <xComutateTrv_2+0x1>
    a378:	80 93 d4 09 	sts	0x09D4, r24	; 0x8009d4 <xComutateTrv_2>
    a37c:	1f 91       	pop	r17
    a37e:	0f 91       	pop	r16
    a380:	ff 90       	pop	r15
    a382:	ef 90       	pop	r14
    a384:	08 95       	ret

0000a386 <startTrvTimer>:
    a386:	cf 92       	push	r12
    a388:	df 92       	push	r13
    a38a:	ef 92       	push	r14
    a38c:	ff 92       	push	r15
    a38e:	0f 93       	push	r16
    a390:	1f 93       	push	r17
    a392:	82 59       	subi	r24, 0x92	; 146
    a394:	9f 4f       	sbci	r25, 0xFF	; 255
    a396:	fc 01       	movw	r30, r24
    a398:	80 81       	ld	r24, Z
    a39a:	91 81       	ldd	r25, Z+1	; 0x01
    a39c:	81 30       	cpi	r24, 0x01	; 1
    a39e:	91 05       	cpc	r25, r1
    a3a0:	89 f4       	brne	.+34     	; 0xa3c4 <startTrvTimer+0x3e>
    a3a2:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    a3a6:	9b 01       	movw	r18, r22
    a3a8:	ac 01       	movw	r20, r24
    a3aa:	c1 2c       	mov	r12, r1
    a3ac:	d1 2c       	mov	r13, r1
    a3ae:	76 01       	movw	r14, r12
    a3b0:	00 e0       	ldi	r16, 0x00	; 0
    a3b2:	10 e0       	ldi	r17, 0x00	; 0
    a3b4:	61 e0       	ldi	r22, 0x01	; 1
    a3b6:	80 91 dd 08 	lds	r24, 0x08DD	; 0x8008dd <xComutateTrv_1>
    a3ba:	90 91 de 08 	lds	r25, 0x08DE	; 0x8008de <xComutateTrv_1+0x1>
    a3be:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    a3c2:	12 c0       	rjmp	.+36     	; 0xa3e8 <startTrvTimer+0x62>
    a3c4:	02 97       	sbiw	r24, 0x02	; 2
    a3c6:	81 f4       	brne	.+32     	; 0xa3e8 <startTrvTimer+0x62>
    a3c8:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    a3cc:	9b 01       	movw	r18, r22
    a3ce:	ac 01       	movw	r20, r24
    a3d0:	c1 2c       	mov	r12, r1
    a3d2:	d1 2c       	mov	r13, r1
    a3d4:	76 01       	movw	r14, r12
    a3d6:	00 e0       	ldi	r16, 0x00	; 0
    a3d8:	10 e0       	ldi	r17, 0x00	; 0
    a3da:	61 e0       	ldi	r22, 0x01	; 1
    a3dc:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <xComutateTrv_2>
    a3e0:	90 91 d5 09 	lds	r25, 0x09D5	; 0x8009d5 <xComutateTrv_2+0x1>
    a3e4:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    a3e8:	1f 91       	pop	r17
    a3ea:	0f 91       	pop	r16
    a3ec:	ff 90       	pop	r15
    a3ee:	ef 90       	pop	r14
    a3f0:	df 90       	pop	r13
    a3f2:	cf 90       	pop	r12
    a3f4:	08 95       	ret

0000a3f6 <stopTrvTimer>:
void stopTrvTimer(xCompressor *comp)
{
    a3f6:	cf 92       	push	r12
    a3f8:	df 92       	push	r13
    a3fa:	ef 92       	push	r14
    a3fc:	ff 92       	push	r15
    a3fe:	0f 93       	push	r16
    a400:	1f 93       	push	r17
    a402:	cf 93       	push	r28
    a404:	df 93       	push	r29
    a406:	ec 01       	movw	r28, r24
	if(comp->Index==1)
    a408:	fc 01       	movw	r30, r24
    a40a:	e2 59       	subi	r30, 0x92	; 146
    a40c:	ff 4f       	sbci	r31, 0xFF	; 255
    a40e:	80 81       	ld	r24, Z
    a410:	91 81       	ldd	r25, Z+1	; 0x01
    a412:	01 97       	sbiw	r24, 0x01	; 1
    a414:	c1 f4       	brne	.+48     	; 0xa446 <stopTrvTimer+0x50>
	{
		if( xTimerIsTimerActive( xComutateTrv_1 ) != pdFALSE )	xTimerStop(xComutateTrv_1, 1);
    a416:	80 91 dd 08 	lds	r24, 0x08DD	; 0x8008dd <xComutateTrv_1>
    a41a:	90 91 de 08 	lds	r25, 0x08DE	; 0x8008de <xComutateTrv_1+0x1>
    a41e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    a422:	88 23       	and	r24, r24
    a424:	81 f0       	breq	.+32     	; 0xa446 <stopTrvTimer+0x50>
    a426:	c1 2c       	mov	r12, r1
    a428:	d1 2c       	mov	r13, r1
    a42a:	76 01       	movw	r14, r12
    a42c:	c3 94       	inc	r12
    a42e:	00 e0       	ldi	r16, 0x00	; 0
    a430:	10 e0       	ldi	r17, 0x00	; 0
    a432:	20 e0       	ldi	r18, 0x00	; 0
    a434:	30 e0       	ldi	r19, 0x00	; 0
    a436:	a9 01       	movw	r20, r18
    a438:	63 e0       	ldi	r22, 0x03	; 3
    a43a:	80 91 dd 08 	lds	r24, 0x08DD	; 0x8008dd <xComutateTrv_1>
    a43e:	90 91 de 08 	lds	r25, 0x08DE	; 0x8008de <xComutateTrv_1+0x1>
    a442:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if(comp->Index==2)
    a446:	c2 59       	subi	r28, 0x92	; 146
    a448:	df 4f       	sbci	r29, 0xFF	; 255
    a44a:	88 81       	ld	r24, Y
    a44c:	99 81       	ldd	r25, Y+1	; 0x01
    a44e:	02 97       	sbiw	r24, 0x02	; 2
    a450:	c1 f4       	brne	.+48     	; 0xa482 <stopTrvTimer+0x8c>
	{
		if( xTimerIsTimerActive( xComutateTrv_2 ) != pdFALSE )	xTimerStop(xComutateTrv_2, 1);
    a452:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <xComutateTrv_2>
    a456:	90 91 d5 09 	lds	r25, 0x09D5	; 0x8009d5 <xComutateTrv_2+0x1>
    a45a:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    a45e:	88 23       	and	r24, r24
    a460:	81 f0       	breq	.+32     	; 0xa482 <stopTrvTimer+0x8c>
    a462:	c1 2c       	mov	r12, r1
    a464:	d1 2c       	mov	r13, r1
    a466:	76 01       	movw	r14, r12
    a468:	c3 94       	inc	r12
    a46a:	00 e0       	ldi	r16, 0x00	; 0
    a46c:	10 e0       	ldi	r17, 0x00	; 0
    a46e:	20 e0       	ldi	r18, 0x00	; 0
    a470:	30 e0       	ldi	r19, 0x00	; 0
    a472:	a9 01       	movw	r20, r18
    a474:	63 e0       	ldi	r22, 0x03	; 3
    a476:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <xComutateTrv_2>
    a47a:	90 91 d5 09 	lds	r25, 0x09D5	; 0x8009d5 <xComutateTrv_2+0x1>
    a47e:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
}
    a482:	df 91       	pop	r29
    a484:	cf 91       	pop	r28
    a486:	1f 91       	pop	r17
    a488:	0f 91       	pop	r16
    a48a:	ff 90       	pop	r15
    a48c:	ef 90       	pop	r14
    a48e:	df 90       	pop	r13
    a490:	cf 90       	pop	r12
    a492:	08 95       	ret

0000a494 <Fuzzy>:
		
	}
}
//----------------------------------------------------------------------------------------------------------
int Fuzzy(xCompressor *comp,int corection)
{
    a494:	8f 92       	push	r8
    a496:	9f 92       	push	r9
    a498:	af 92       	push	r10
    a49a:	bf 92       	push	r11
    a49c:	ef 92       	push	r14
    a49e:	ff 92       	push	r15
    a4a0:	0f 93       	push	r16
    a4a2:	1f 93       	push	r17
    a4a4:	cf 93       	push	r28
    a4a6:	df 93       	push	r29
    a4a8:	ec 01       	movw	r28, r24
    a4aa:	7b 01       	movw	r14, r22
	int steps=0;
	//static int old_corection=0;
	//static int old_corection_1=0;
	if(comp->Index==2)xSerialxPrintf(&xSerial3Port,"corection_2 = %d \r\n", corection);
    a4ac:	fc 01       	movw	r30, r24
    a4ae:	e2 59       	subi	r30, 0x92	; 146
    a4b0:	ff 4f       	sbci	r31, 0xFF	; 255
    a4b2:	80 81       	ld	r24, Z
    a4b4:	91 81       	ldd	r25, Z+1	; 0x01
    a4b6:	02 97       	sbiw	r24, 0x02	; 2
    a4b8:	91 f4       	brne	.+36     	; 0xa4de <Fuzzy+0x4a>
    a4ba:	ff 92       	push	r15
    a4bc:	6f 93       	push	r22
    a4be:	83 e3       	ldi	r24, 0x33	; 51
    a4c0:	96 e0       	ldi	r25, 0x06	; 6
    a4c2:	9f 93       	push	r25
    a4c4:	8f 93       	push	r24
    a4c6:	86 e9       	ldi	r24, 0x96	; 150
    a4c8:	97 e0       	ldi	r25, 0x07	; 7
    a4ca:	9f 93       	push	r25
    a4cc:	8f 93       	push	r24
    a4ce:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a4d2:	0f 90       	pop	r0
    a4d4:	0f 90       	pop	r0
    a4d6:	0f 90       	pop	r0
    a4d8:	0f 90       	pop	r0
    a4da:	0f 90       	pop	r0
    a4dc:	0f 90       	pop	r0
	if(comp->Src_In<=10 ){steps=(comp->Src_In)/10 * 100 ;}
    a4de:	8a a8       	ldd	r8, Y+50	; 0x32
    a4e0:	9b a8       	ldd	r9, Y+51	; 0x33
    a4e2:	ac a8       	ldd	r10, Y+52	; 0x34
    a4e4:	bd a8       	ldd	r11, Y+53	; 0x35
    a4e6:	20 e0       	ldi	r18, 0x00	; 0
    a4e8:	30 e0       	ldi	r19, 0x00	; 0
    a4ea:	40 e2       	ldi	r20, 0x20	; 32
    a4ec:	51 e4       	ldi	r21, 0x41	; 65
    a4ee:	c5 01       	movw	r24, r10
    a4f0:	b4 01       	movw	r22, r8
    a4f2:	63 d1       	rcall	.+710    	; 0xa7ba <__cmpsf2>
    a4f4:	18 16       	cp	r1, r24
    a4f6:	7c f0       	brlt	.+30     	; 0xa516 <Fuzzy+0x82>
    a4f8:	20 e0       	ldi	r18, 0x00	; 0
    a4fa:	30 e0       	ldi	r19, 0x00	; 0
    a4fc:	40 e2       	ldi	r20, 0x20	; 32
    a4fe:	51 e4       	ldi	r21, 0x41	; 65
    a500:	c5 01       	movw	r24, r10
    a502:	b4 01       	movw	r22, r8
    a504:	5e d1       	rcall	.+700    	; 0xa7c2 <__divsf3>
    a506:	20 e0       	ldi	r18, 0x00	; 0
    a508:	30 e0       	ldi	r19, 0x00	; 0
    a50a:	48 ec       	ldi	r20, 0xC8	; 200
    a50c:	52 e4       	ldi	r21, 0x42	; 66
    a50e:	ed d2       	rcall	.+1498   	; 0xaaea <__mulsf3>
    a510:	c0 d1       	rcall	.+896    	; 0xa892 <__fixsfsi>
    a512:	8b 01       	movw	r16, r22
    a514:	86 c0       	rjmp	.+268    	; 0xa622 <Fuzzy+0x18e>
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps); }//comp->trvCorection;
	else if(comp->Src_In>10 && comp->Src_In<=20)  {steps = (comp->Src_In-10)/10 * 100 + 100;}
    a516:	20 e0       	ldi	r18, 0x00	; 0
    a518:	30 e0       	ldi	r19, 0x00	; 0
    a51a:	40 e2       	ldi	r20, 0x20	; 32
    a51c:	51 e4       	ldi	r21, 0x41	; 65
    a51e:	c5 01       	movw	r24, r10
    a520:	b4 01       	movw	r22, r8
    a522:	9a d2       	rcall	.+1332   	; 0xaa58 <__gesf2>
    a524:	18 16       	cp	r1, r24
    a526:	14 f5       	brge	.+68     	; 0xa56c <Fuzzy+0xd8>
    a528:	20 e0       	ldi	r18, 0x00	; 0
    a52a:	30 e0       	ldi	r19, 0x00	; 0
    a52c:	40 ea       	ldi	r20, 0xA0	; 160
    a52e:	51 e4       	ldi	r21, 0x41	; 65
    a530:	c5 01       	movw	r24, r10
    a532:	b4 01       	movw	r22, r8
    a534:	42 d1       	rcall	.+644    	; 0xa7ba <__cmpsf2>
    a536:	18 16       	cp	r1, r24
    a538:	cc f0       	brlt	.+50     	; 0xa56c <Fuzzy+0xd8>
    a53a:	20 e0       	ldi	r18, 0x00	; 0
    a53c:	30 e0       	ldi	r19, 0x00	; 0
    a53e:	40 e2       	ldi	r20, 0x20	; 32
    a540:	51 e4       	ldi	r21, 0x41	; 65
    a542:	c5 01       	movw	r24, r10
    a544:	b4 01       	movw	r22, r8
    a546:	d4 d0       	rcall	.+424    	; 0xa6f0 <__subsf3>
    a548:	20 e0       	ldi	r18, 0x00	; 0
    a54a:	30 e0       	ldi	r19, 0x00	; 0
    a54c:	40 e2       	ldi	r20, 0x20	; 32
    a54e:	51 e4       	ldi	r21, 0x41	; 65
    a550:	38 d1       	rcall	.+624    	; 0xa7c2 <__divsf3>
    a552:	20 e0       	ldi	r18, 0x00	; 0
    a554:	30 e0       	ldi	r19, 0x00	; 0
    a556:	48 ec       	ldi	r20, 0xC8	; 200
    a558:	52 e4       	ldi	r21, 0x42	; 66
    a55a:	c7 d2       	rcall	.+1422   	; 0xaaea <__mulsf3>
    a55c:	20 e0       	ldi	r18, 0x00	; 0
    a55e:	30 e0       	ldi	r19, 0x00	; 0
    a560:	48 ec       	ldi	r20, 0xC8	; 200
    a562:	52 e4       	ldi	r21, 0x42	; 66
    a564:	c6 d0       	rcall	.+396    	; 0xa6f2 <__addsf3>
    a566:	95 d1       	rcall	.+810    	; 0xa892 <__fixsfsi>
    a568:	8b 01       	movw	r16, r22
    a56a:	5b c0       	rjmp	.+182    	; 0xa622 <Fuzzy+0x18e>
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps); }//;
	else if(comp->Src_In >20 && comp->Src_In<=30) {steps = (comp->Src_In-20)/10 * 100 + 150;}
    a56c:	20 e0       	ldi	r18, 0x00	; 0
    a56e:	30 e0       	ldi	r19, 0x00	; 0
    a570:	40 ea       	ldi	r20, 0xA0	; 160
    a572:	51 e4       	ldi	r21, 0x41	; 65
    a574:	c5 01       	movw	r24, r10
    a576:	b4 01       	movw	r22, r8
    a578:	6f d2       	rcall	.+1246   	; 0xaa58 <__gesf2>
    a57a:	18 16       	cp	r1, r24
    a57c:	14 f5       	brge	.+68     	; 0xa5c2 <Fuzzy+0x12e>
    a57e:	20 e0       	ldi	r18, 0x00	; 0
    a580:	30 e0       	ldi	r19, 0x00	; 0
    a582:	40 ef       	ldi	r20, 0xF0	; 240
    a584:	51 e4       	ldi	r21, 0x41	; 65
    a586:	c5 01       	movw	r24, r10
    a588:	b4 01       	movw	r22, r8
    a58a:	17 d1       	rcall	.+558    	; 0xa7ba <__cmpsf2>
    a58c:	18 16       	cp	r1, r24
    a58e:	cc f0       	brlt	.+50     	; 0xa5c2 <Fuzzy+0x12e>
    a590:	20 e0       	ldi	r18, 0x00	; 0
    a592:	30 e0       	ldi	r19, 0x00	; 0
    a594:	40 ea       	ldi	r20, 0xA0	; 160
    a596:	51 e4       	ldi	r21, 0x41	; 65
    a598:	c5 01       	movw	r24, r10
    a59a:	b4 01       	movw	r22, r8
    a59c:	a9 d0       	rcall	.+338    	; 0xa6f0 <__subsf3>
    a59e:	20 e0       	ldi	r18, 0x00	; 0
    a5a0:	30 e0       	ldi	r19, 0x00	; 0
    a5a2:	40 e2       	ldi	r20, 0x20	; 32
    a5a4:	51 e4       	ldi	r21, 0x41	; 65
    a5a6:	0d d1       	rcall	.+538    	; 0xa7c2 <__divsf3>
    a5a8:	20 e0       	ldi	r18, 0x00	; 0
    a5aa:	30 e0       	ldi	r19, 0x00	; 0
    a5ac:	48 ec       	ldi	r20, 0xC8	; 200
    a5ae:	52 e4       	ldi	r21, 0x42	; 66
    a5b0:	9c d2       	rcall	.+1336   	; 0xaaea <__mulsf3>
    a5b2:	20 e0       	ldi	r18, 0x00	; 0
    a5b4:	30 e0       	ldi	r19, 0x00	; 0
    a5b6:	46 e1       	ldi	r20, 0x16	; 22
    a5b8:	53 e4       	ldi	r21, 0x43	; 67
    a5ba:	9b d0       	rcall	.+310    	; 0xa6f2 <__addsf3>
    a5bc:	6a d1       	rcall	.+724    	; 0xa892 <__fixsfsi>
    a5be:	8b 01       	movw	r16, r22
    a5c0:	30 c0       	rjmp	.+96     	; 0xa622 <Fuzzy+0x18e>
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps);}// comp->trvCorection;
	else if(comp->Src_In>30 && comp->Src_In<=40)  {steps = (comp->Src_In-30)/10 * 100 + 200;}
    a5c2:	20 e0       	ldi	r18, 0x00	; 0
    a5c4:	30 e0       	ldi	r19, 0x00	; 0
    a5c6:	40 ef       	ldi	r20, 0xF0	; 240
    a5c8:	51 e4       	ldi	r21, 0x41	; 65
    a5ca:	c5 01       	movw	r24, r10
    a5cc:	b4 01       	movw	r22, r8
    a5ce:	44 d2       	rcall	.+1160   	; 0xaa58 <__gesf2>
    a5d0:	18 16       	cp	r1, r24
    a5d2:	14 f5       	brge	.+68     	; 0xa618 <Fuzzy+0x184>
    a5d4:	20 e0       	ldi	r18, 0x00	; 0
    a5d6:	30 e0       	ldi	r19, 0x00	; 0
    a5d8:	40 e2       	ldi	r20, 0x20	; 32
    a5da:	52 e4       	ldi	r21, 0x42	; 66
    a5dc:	c5 01       	movw	r24, r10
    a5de:	b4 01       	movw	r22, r8
    a5e0:	ec d0       	rcall	.+472    	; 0xa7ba <__cmpsf2>
    a5e2:	18 16       	cp	r1, r24
    a5e4:	e4 f0       	brlt	.+56     	; 0xa61e <Fuzzy+0x18a>
    a5e6:	20 e0       	ldi	r18, 0x00	; 0
    a5e8:	30 e0       	ldi	r19, 0x00	; 0
    a5ea:	40 ef       	ldi	r20, 0xF0	; 240
    a5ec:	51 e4       	ldi	r21, 0x41	; 65
    a5ee:	c5 01       	movw	r24, r10
    a5f0:	b4 01       	movw	r22, r8
    a5f2:	7e d0       	rcall	.+252    	; 0xa6f0 <__subsf3>
    a5f4:	20 e0       	ldi	r18, 0x00	; 0
    a5f6:	30 e0       	ldi	r19, 0x00	; 0
    a5f8:	40 e2       	ldi	r20, 0x20	; 32
    a5fa:	51 e4       	ldi	r21, 0x41	; 65
    a5fc:	e2 d0       	rcall	.+452    	; 0xa7c2 <__divsf3>
    a5fe:	20 e0       	ldi	r18, 0x00	; 0
    a600:	30 e0       	ldi	r19, 0x00	; 0
    a602:	48 ec       	ldi	r20, 0xC8	; 200
    a604:	52 e4       	ldi	r21, 0x42	; 66
    a606:	71 d2       	rcall	.+1250   	; 0xaaea <__mulsf3>
    a608:	20 e0       	ldi	r18, 0x00	; 0
    a60a:	30 e0       	ldi	r19, 0x00	; 0
    a60c:	48 e4       	ldi	r20, 0x48	; 72
    a60e:	53 e4       	ldi	r21, 0x43	; 67
    a610:	70 d0       	rcall	.+224    	; 0xa6f2 <__addsf3>
    a612:	3f d1       	rcall	.+638    	; 0xa892 <__fixsfsi>
    a614:	8b 01       	movw	r16, r22
    a616:	05 c0       	rjmp	.+10     	; 0xa622 <Fuzzy+0x18e>
    a618:	00 e0       	ldi	r16, 0x00	; 0
    a61a:	10 e0       	ldi	r17, 0x00	; 0
	}
}
//----------------------------------------------------------------------------------------------------------
int Fuzzy(xCompressor *comp,int corection)
{
	int steps=0;
    a61c:	02 c0       	rjmp	.+4      	; 0xa622 <Fuzzy+0x18e>
    a61e:	00 e0       	ldi	r16, 0x00	; 0
    a620:	10 e0       	ldi	r17, 0x00	; 0
    a622:	e0 1a       	sub	r14, r16
    a624:	f1 0a       	sbc	r15, r17
		 //if(old_corection_2!=corection && comp->Index==2){comp->trvCorection=corection-steps;old_corection_2=corection;}
	//xSerialxPrintf(&xSerial3Port,"TRVcorection_%d = %d \r\n",comp->Index, corection);
			
	
	
	comp->trvCorection=corection-steps;
    a626:	fe 01       	movw	r30, r28
    a628:	ea 59       	subi	r30, 0x9A	; 154
    a62a:	ff 4f       	sbci	r31, 0xFF	; 255
    a62c:	f1 82       	std	Z+1, r15	; 0x01
    a62e:	e0 82       	st	Z, r14
    a630:	38 96       	adiw	r30, 0x08	; 8
    a632:	80 81       	ld	r24, Z
	if(comp->Index==2)xSerialxPrintf(&xSerial3Port,"TRVcorection_2 = %d \r\n", comp->trvCorection);
    a634:	91 81       	ldd	r25, Z+1	; 0x01
    a636:	02 97       	sbiw	r24, 0x02	; 2
    a638:	91 f4       	brne	.+36     	; 0xa65e <Fuzzy+0x1ca>
    a63a:	ff 92       	push	r15
    a63c:	ef 92       	push	r14
    a63e:	80 e3       	ldi	r24, 0x30	; 48
    a640:	96 e0       	ldi	r25, 0x06	; 6
    a642:	9f 93       	push	r25
    a644:	8f 93       	push	r24
    a646:	86 e9       	ldi	r24, 0x96	; 150
    a648:	97 e0       	ldi	r25, 0x07	; 7
    a64a:	9f 93       	push	r25
    a64c:	8f 93       	push	r24
    a64e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a652:	0f 90       	pop	r0
    a654:	0f 90       	pop	r0
    a656:	0f 90       	pop	r0
    a658:	0f 90       	pop	r0
    a65a:	0f 90       	pop	r0
    a65c:	0f 90       	pop	r0
    a65e:	fe 01       	movw	r30, r28
    a660:	e2 59       	subi	r30, 0x92	; 146
	if(comp->Index==1)xSerialxPrintf(&xSerial3Port,"TRVcorection_1 = %d \r\n", comp->trvCorection);
    a662:	ff 4f       	sbci	r31, 0xFF	; 255
    a664:	80 81       	ld	r24, Z
    a666:	91 81       	ldd	r25, Z+1	; 0x01
    a668:	01 97       	sbiw	r24, 0x01	; 1
    a66a:	a9 f4       	brne	.+42     	; 0xa696 <Fuzzy+0x202>
    a66c:	38 97       	sbiw	r30, 0x08	; 8
    a66e:	81 81       	ldd	r24, Z+1	; 0x01
    a670:	8f 93       	push	r24
    a672:	80 81       	ld	r24, Z
    a674:	8f 93       	push	r24
    a676:	87 e4       	ldi	r24, 0x47	; 71
    a678:	96 e0       	ldi	r25, 0x06	; 6
    a67a:	9f 93       	push	r25
    a67c:	8f 93       	push	r24
    a67e:	86 e9       	ldi	r24, 0x96	; 150
    a680:	97 e0       	ldi	r25, 0x07	; 7
    a682:	9f 93       	push	r25
    a684:	8f 93       	push	r24
    a686:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a68a:	0f 90       	pop	r0
    a68c:	0f 90       	pop	r0
    a68e:	0f 90       	pop	r0
    a690:	0f 90       	pop	r0
    a692:	0f 90       	pop	r0
    a694:	0f 90       	pop	r0
    a696:	fe 01       	movw	r30, r28
    a698:	ea 59       	subi	r30, 0x9A	; 154
	steps=steps+comp->trvCorection;		
    a69a:	ff 4f       	sbci	r31, 0xFF	; 255
    a69c:	80 81       	ld	r24, Z
    a69e:	91 81       	ldd	r25, Z+1	; 0x01
	comp->Steps=steps - comp->Trv_position;
    a6a0:	b8 01       	movw	r22, r16
    a6a2:	68 0f       	add	r22, r24
    a6a4:	79 1f       	adc	r23, r25
    a6a6:	34 96       	adiw	r30, 0x04	; 4
    a6a8:	80 81       	ld	r24, Z
    a6aa:	91 81       	ldd	r25, Z+1	; 0x01
    a6ac:	9b 01       	movw	r18, r22
    a6ae:	28 1b       	sub	r18, r24
    a6b0:	39 0b       	sbc	r19, r25
    a6b2:	c9 01       	movw	r24, r18
    a6b4:	c8 59       	subi	r28, 0x98	; 152
    a6b6:	df 4f       	sbci	r29, 0xFF	; 255
    a6b8:	39 83       	std	Y+1, r19	; 0x01
    a6ba:	28 83       	st	Y, r18
    a6bc:	df 91       	pop	r29
    a6be:	cf 91       	pop	r28

	return comp->Steps;
}
    a6c0:	1f 91       	pop	r17
    a6c2:	0f 91       	pop	r16
    a6c4:	ff 90       	pop	r15
    a6c6:	ef 90       	pop	r14
    a6c8:	bf 90       	pop	r11
    a6ca:	af 90       	pop	r10
    a6cc:	9f 90       	pop	r9
    a6ce:	8f 90       	pop	r8
    a6d0:	08 95       	ret

0000a6d2 <calibration>:
    a6d2:	21 e0       	ldi	r18, 0x01	; 1
    a6d4:	fc 01       	movw	r30, r24
////////////////////////////////////////////////////////////////////////////////////////////////////////
void calibration(xCompressor *comp)
{
	comp->calibrate=true;
    a6d6:	27 83       	std	Z+7, r18	; 0x07
	comp->Steps=-240;
    a6d8:	e8 59       	subi	r30, 0x98	; 152
    a6da:	ff 4f       	sbci	r31, 0xFF	; 255
    a6dc:	20 e1       	ldi	r18, 0x10	; 16
    a6de:	3f ef       	ldi	r19, 0xFF	; 255
    a6e0:	31 83       	std	Z+1, r19	; 0x01
    a6e2:	20 83       	st	Z, r18
	comp->Trv_position=240;
    a6e4:	32 96       	adiw	r30, 0x02	; 2
    a6e6:	20 ef       	ldi	r18, 0xF0	; 240
    a6e8:	30 e0       	ldi	r19, 0x00	; 0
    a6ea:	31 83       	std	Z+1, r19	; 0x01
    a6ec:	20 83       	st	Z, r18
    a6ee:	08 95       	ret

0000a6f0 <__subsf3>:
    a6f0:	50 58       	subi	r21, 0x80	; 128

0000a6f2 <__addsf3>:
    a6f2:	bb 27       	eor	r27, r27
    a6f4:	aa 27       	eor	r26, r26
    a6f6:	0e d0       	rcall	.+28     	; 0xa714 <__addsf3x>
    a6f8:	75 c1       	rjmp	.+746    	; 0xa9e4 <__fp_round>
    a6fa:	66 d1       	rcall	.+716    	; 0xa9c8 <__fp_pscA>
    a6fc:	30 f0       	brcs	.+12     	; 0xa70a <__addsf3+0x18>
    a6fe:	6b d1       	rcall	.+726    	; 0xa9d6 <__fp_pscB>
    a700:	20 f0       	brcs	.+8      	; 0xa70a <__addsf3+0x18>
    a702:	31 f4       	brne	.+12     	; 0xa710 <__addsf3+0x1e>
    a704:	9f 3f       	cpi	r25, 0xFF	; 255
    a706:	11 f4       	brne	.+4      	; 0xa70c <__addsf3+0x1a>
    a708:	1e f4       	brtc	.+6      	; 0xa710 <__addsf3+0x1e>
    a70a:	5b c1       	rjmp	.+694    	; 0xa9c2 <__fp_nan>
    a70c:	0e f4       	brtc	.+2      	; 0xa710 <__addsf3+0x1e>
    a70e:	e0 95       	com	r30
    a710:	e7 fb       	bst	r30, 7
    a712:	51 c1       	rjmp	.+674    	; 0xa9b6 <__fp_inf>

0000a714 <__addsf3x>:
    a714:	e9 2f       	mov	r30, r25
    a716:	77 d1       	rcall	.+750    	; 0xaa06 <__fp_split3>
    a718:	80 f3       	brcs	.-32     	; 0xa6fa <__addsf3+0x8>
    a71a:	ba 17       	cp	r27, r26
    a71c:	62 07       	cpc	r22, r18
    a71e:	73 07       	cpc	r23, r19
    a720:	84 07       	cpc	r24, r20
    a722:	95 07       	cpc	r25, r21
    a724:	18 f0       	brcs	.+6      	; 0xa72c <__addsf3x+0x18>
    a726:	71 f4       	brne	.+28     	; 0xa744 <__addsf3x+0x30>
    a728:	9e f5       	brtc	.+102    	; 0xa790 <__addsf3x+0x7c>
    a72a:	8f c1       	rjmp	.+798    	; 0xaa4a <__fp_zero>
    a72c:	0e f4       	brtc	.+2      	; 0xa730 <__addsf3x+0x1c>
    a72e:	e0 95       	com	r30
    a730:	0b 2e       	mov	r0, r27
    a732:	ba 2f       	mov	r27, r26
    a734:	a0 2d       	mov	r26, r0
    a736:	0b 01       	movw	r0, r22
    a738:	b9 01       	movw	r22, r18
    a73a:	90 01       	movw	r18, r0
    a73c:	0c 01       	movw	r0, r24
    a73e:	ca 01       	movw	r24, r20
    a740:	a0 01       	movw	r20, r0
    a742:	11 24       	eor	r1, r1
    a744:	ff 27       	eor	r31, r31
    a746:	59 1b       	sub	r21, r25
    a748:	99 f0       	breq	.+38     	; 0xa770 <__addsf3x+0x5c>
    a74a:	59 3f       	cpi	r21, 0xF9	; 249
    a74c:	50 f4       	brcc	.+20     	; 0xa762 <__addsf3x+0x4e>
    a74e:	50 3e       	cpi	r21, 0xE0	; 224
    a750:	68 f1       	brcs	.+90     	; 0xa7ac <__addsf3x+0x98>
    a752:	1a 16       	cp	r1, r26
    a754:	f0 40       	sbci	r31, 0x00	; 0
    a756:	a2 2f       	mov	r26, r18
    a758:	23 2f       	mov	r18, r19
    a75a:	34 2f       	mov	r19, r20
    a75c:	44 27       	eor	r20, r20
    a75e:	58 5f       	subi	r21, 0xF8	; 248
    a760:	f3 cf       	rjmp	.-26     	; 0xa748 <__addsf3x+0x34>
    a762:	46 95       	lsr	r20
    a764:	37 95       	ror	r19
    a766:	27 95       	ror	r18
    a768:	a7 95       	ror	r26
    a76a:	f0 40       	sbci	r31, 0x00	; 0
    a76c:	53 95       	inc	r21
    a76e:	c9 f7       	brne	.-14     	; 0xa762 <__addsf3x+0x4e>
    a770:	7e f4       	brtc	.+30     	; 0xa790 <__addsf3x+0x7c>
    a772:	1f 16       	cp	r1, r31
    a774:	ba 0b       	sbc	r27, r26
    a776:	62 0b       	sbc	r22, r18
    a778:	73 0b       	sbc	r23, r19
    a77a:	84 0b       	sbc	r24, r20
    a77c:	ba f0       	brmi	.+46     	; 0xa7ac <__addsf3x+0x98>
    a77e:	91 50       	subi	r25, 0x01	; 1
    a780:	a1 f0       	breq	.+40     	; 0xa7aa <__addsf3x+0x96>
    a782:	ff 0f       	add	r31, r31
    a784:	bb 1f       	adc	r27, r27
    a786:	66 1f       	adc	r22, r22
    a788:	77 1f       	adc	r23, r23
    a78a:	88 1f       	adc	r24, r24
    a78c:	c2 f7       	brpl	.-16     	; 0xa77e <__addsf3x+0x6a>
    a78e:	0e c0       	rjmp	.+28     	; 0xa7ac <__addsf3x+0x98>
    a790:	ba 0f       	add	r27, r26
    a792:	62 1f       	adc	r22, r18
    a794:	73 1f       	adc	r23, r19
    a796:	84 1f       	adc	r24, r20
    a798:	48 f4       	brcc	.+18     	; 0xa7ac <__addsf3x+0x98>
    a79a:	87 95       	ror	r24
    a79c:	77 95       	ror	r23
    a79e:	67 95       	ror	r22
    a7a0:	b7 95       	ror	r27
    a7a2:	f7 95       	ror	r31
    a7a4:	9e 3f       	cpi	r25, 0xFE	; 254
    a7a6:	08 f0       	brcs	.+2      	; 0xa7aa <__addsf3x+0x96>
    a7a8:	b3 cf       	rjmp	.-154    	; 0xa710 <__addsf3+0x1e>
    a7aa:	93 95       	inc	r25
    a7ac:	88 0f       	add	r24, r24
    a7ae:	08 f0       	brcs	.+2      	; 0xa7b2 <__addsf3x+0x9e>
    a7b0:	99 27       	eor	r25, r25
    a7b2:	ee 0f       	add	r30, r30
    a7b4:	97 95       	ror	r25
    a7b6:	87 95       	ror	r24
    a7b8:	08 95       	ret

0000a7ba <__cmpsf2>:
    a7ba:	d9 d0       	rcall	.+434    	; 0xa96e <__fp_cmp>
    a7bc:	08 f4       	brcc	.+2      	; 0xa7c0 <__cmpsf2+0x6>
    a7be:	81 e0       	ldi	r24, 0x01	; 1
    a7c0:	08 95       	ret

0000a7c2 <__divsf3>:
    a7c2:	0c d0       	rcall	.+24     	; 0xa7dc <__divsf3x>
    a7c4:	0f c1       	rjmp	.+542    	; 0xa9e4 <__fp_round>
    a7c6:	07 d1       	rcall	.+526    	; 0xa9d6 <__fp_pscB>
    a7c8:	40 f0       	brcs	.+16     	; 0xa7da <__divsf3+0x18>
    a7ca:	fe d0       	rcall	.+508    	; 0xa9c8 <__fp_pscA>
    a7cc:	30 f0       	brcs	.+12     	; 0xa7da <__divsf3+0x18>
    a7ce:	21 f4       	brne	.+8      	; 0xa7d8 <__divsf3+0x16>
    a7d0:	5f 3f       	cpi	r21, 0xFF	; 255
    a7d2:	19 f0       	breq	.+6      	; 0xa7da <__divsf3+0x18>
    a7d4:	f0 c0       	rjmp	.+480    	; 0xa9b6 <__fp_inf>
    a7d6:	51 11       	cpse	r21, r1
    a7d8:	39 c1       	rjmp	.+626    	; 0xaa4c <__fp_szero>
    a7da:	f3 c0       	rjmp	.+486    	; 0xa9c2 <__fp_nan>

0000a7dc <__divsf3x>:
    a7dc:	14 d1       	rcall	.+552    	; 0xaa06 <__fp_split3>
    a7de:	98 f3       	brcs	.-26     	; 0xa7c6 <__divsf3+0x4>

0000a7e0 <__divsf3_pse>:
    a7e0:	99 23       	and	r25, r25
    a7e2:	c9 f3       	breq	.-14     	; 0xa7d6 <__divsf3+0x14>
    a7e4:	55 23       	and	r21, r21
    a7e6:	b1 f3       	breq	.-20     	; 0xa7d4 <__divsf3+0x12>
    a7e8:	95 1b       	sub	r25, r21
    a7ea:	55 0b       	sbc	r21, r21
    a7ec:	bb 27       	eor	r27, r27
    a7ee:	aa 27       	eor	r26, r26
    a7f0:	62 17       	cp	r22, r18
    a7f2:	73 07       	cpc	r23, r19
    a7f4:	84 07       	cpc	r24, r20
    a7f6:	38 f0       	brcs	.+14     	; 0xa806 <__divsf3_pse+0x26>
    a7f8:	9f 5f       	subi	r25, 0xFF	; 255
    a7fa:	5f 4f       	sbci	r21, 0xFF	; 255
    a7fc:	22 0f       	add	r18, r18
    a7fe:	33 1f       	adc	r19, r19
    a800:	44 1f       	adc	r20, r20
    a802:	aa 1f       	adc	r26, r26
    a804:	a9 f3       	breq	.-22     	; 0xa7f0 <__divsf3_pse+0x10>
    a806:	33 d0       	rcall	.+102    	; 0xa86e <__divsf3_pse+0x8e>
    a808:	0e 2e       	mov	r0, r30
    a80a:	3a f0       	brmi	.+14     	; 0xa81a <__divsf3_pse+0x3a>
    a80c:	e0 e8       	ldi	r30, 0x80	; 128
    a80e:	30 d0       	rcall	.+96     	; 0xa870 <__divsf3_pse+0x90>
    a810:	91 50       	subi	r25, 0x01	; 1
    a812:	50 40       	sbci	r21, 0x00	; 0
    a814:	e6 95       	lsr	r30
    a816:	00 1c       	adc	r0, r0
    a818:	ca f7       	brpl	.-14     	; 0xa80c <__divsf3_pse+0x2c>
    a81a:	29 d0       	rcall	.+82     	; 0xa86e <__divsf3_pse+0x8e>
    a81c:	fe 2f       	mov	r31, r30
    a81e:	27 d0       	rcall	.+78     	; 0xa86e <__divsf3_pse+0x8e>
    a820:	66 0f       	add	r22, r22
    a822:	77 1f       	adc	r23, r23
    a824:	88 1f       	adc	r24, r24
    a826:	bb 1f       	adc	r27, r27
    a828:	26 17       	cp	r18, r22
    a82a:	37 07       	cpc	r19, r23
    a82c:	48 07       	cpc	r20, r24
    a82e:	ab 07       	cpc	r26, r27
    a830:	b0 e8       	ldi	r27, 0x80	; 128
    a832:	09 f0       	breq	.+2      	; 0xa836 <__divsf3_pse+0x56>
    a834:	bb 0b       	sbc	r27, r27
    a836:	80 2d       	mov	r24, r0
    a838:	bf 01       	movw	r22, r30
    a83a:	ff 27       	eor	r31, r31
    a83c:	93 58       	subi	r25, 0x83	; 131
    a83e:	5f 4f       	sbci	r21, 0xFF	; 255
    a840:	2a f0       	brmi	.+10     	; 0xa84c <__divsf3_pse+0x6c>
    a842:	9e 3f       	cpi	r25, 0xFE	; 254
    a844:	51 05       	cpc	r21, r1
    a846:	68 f0       	brcs	.+26     	; 0xa862 <__divsf3_pse+0x82>
    a848:	b6 c0       	rjmp	.+364    	; 0xa9b6 <__fp_inf>
    a84a:	00 c1       	rjmp	.+512    	; 0xaa4c <__fp_szero>
    a84c:	5f 3f       	cpi	r21, 0xFF	; 255
    a84e:	ec f3       	brlt	.-6      	; 0xa84a <__divsf3_pse+0x6a>
    a850:	98 3e       	cpi	r25, 0xE8	; 232
    a852:	dc f3       	brlt	.-10     	; 0xa84a <__divsf3_pse+0x6a>
    a854:	86 95       	lsr	r24
    a856:	77 95       	ror	r23
    a858:	67 95       	ror	r22
    a85a:	b7 95       	ror	r27
    a85c:	f7 95       	ror	r31
    a85e:	9f 5f       	subi	r25, 0xFF	; 255
    a860:	c9 f7       	brne	.-14     	; 0xa854 <__divsf3_pse+0x74>
    a862:	88 0f       	add	r24, r24
    a864:	91 1d       	adc	r25, r1
    a866:	96 95       	lsr	r25
    a868:	87 95       	ror	r24
    a86a:	97 f9       	bld	r25, 7
    a86c:	08 95       	ret
    a86e:	e1 e0       	ldi	r30, 0x01	; 1
    a870:	66 0f       	add	r22, r22
    a872:	77 1f       	adc	r23, r23
    a874:	88 1f       	adc	r24, r24
    a876:	bb 1f       	adc	r27, r27
    a878:	62 17       	cp	r22, r18
    a87a:	73 07       	cpc	r23, r19
    a87c:	84 07       	cpc	r24, r20
    a87e:	ba 07       	cpc	r27, r26
    a880:	20 f0       	brcs	.+8      	; 0xa88a <__divsf3_pse+0xaa>
    a882:	62 1b       	sub	r22, r18
    a884:	73 0b       	sbc	r23, r19
    a886:	84 0b       	sbc	r24, r20
    a888:	ba 0b       	sbc	r27, r26
    a88a:	ee 1f       	adc	r30, r30
    a88c:	88 f7       	brcc	.-30     	; 0xa870 <__divsf3_pse+0x90>
    a88e:	e0 95       	com	r30
    a890:	08 95       	ret

0000a892 <__fixsfsi>:
    a892:	04 d0       	rcall	.+8      	; 0xa89c <__fixunssfsi>
    a894:	68 94       	set
    a896:	b1 11       	cpse	r27, r1
    a898:	d9 c0       	rjmp	.+434    	; 0xaa4c <__fp_szero>
    a89a:	08 95       	ret

0000a89c <__fixunssfsi>:
    a89c:	bc d0       	rcall	.+376    	; 0xaa16 <__fp_splitA>
    a89e:	88 f0       	brcs	.+34     	; 0xa8c2 <__fixunssfsi+0x26>
    a8a0:	9f 57       	subi	r25, 0x7F	; 127
    a8a2:	90 f0       	brcs	.+36     	; 0xa8c8 <__fixunssfsi+0x2c>
    a8a4:	b9 2f       	mov	r27, r25
    a8a6:	99 27       	eor	r25, r25
    a8a8:	b7 51       	subi	r27, 0x17	; 23
    a8aa:	a0 f0       	brcs	.+40     	; 0xa8d4 <__fixunssfsi+0x38>
    a8ac:	d1 f0       	breq	.+52     	; 0xa8e2 <__fixunssfsi+0x46>
    a8ae:	66 0f       	add	r22, r22
    a8b0:	77 1f       	adc	r23, r23
    a8b2:	88 1f       	adc	r24, r24
    a8b4:	99 1f       	adc	r25, r25
    a8b6:	1a f0       	brmi	.+6      	; 0xa8be <__fixunssfsi+0x22>
    a8b8:	ba 95       	dec	r27
    a8ba:	c9 f7       	brne	.-14     	; 0xa8ae <__fixunssfsi+0x12>
    a8bc:	12 c0       	rjmp	.+36     	; 0xa8e2 <__fixunssfsi+0x46>
    a8be:	b1 30       	cpi	r27, 0x01	; 1
    a8c0:	81 f0       	breq	.+32     	; 0xa8e2 <__fixunssfsi+0x46>
    a8c2:	c3 d0       	rcall	.+390    	; 0xaa4a <__fp_zero>
    a8c4:	b1 e0       	ldi	r27, 0x01	; 1
    a8c6:	08 95       	ret
    a8c8:	c0 c0       	rjmp	.+384    	; 0xaa4a <__fp_zero>
    a8ca:	67 2f       	mov	r22, r23
    a8cc:	78 2f       	mov	r23, r24
    a8ce:	88 27       	eor	r24, r24
    a8d0:	b8 5f       	subi	r27, 0xF8	; 248
    a8d2:	39 f0       	breq	.+14     	; 0xa8e2 <__fixunssfsi+0x46>
    a8d4:	b9 3f       	cpi	r27, 0xF9	; 249
    a8d6:	cc f3       	brlt	.-14     	; 0xa8ca <__fixunssfsi+0x2e>
    a8d8:	86 95       	lsr	r24
    a8da:	77 95       	ror	r23
    a8dc:	67 95       	ror	r22
    a8de:	b3 95       	inc	r27
    a8e0:	d9 f7       	brne	.-10     	; 0xa8d8 <__fixunssfsi+0x3c>
    a8e2:	3e f4       	brtc	.+14     	; 0xa8f2 <__fixunssfsi+0x56>
    a8e4:	90 95       	com	r25
    a8e6:	80 95       	com	r24
    a8e8:	70 95       	com	r23
    a8ea:	61 95       	neg	r22
    a8ec:	7f 4f       	sbci	r23, 0xFF	; 255
    a8ee:	8f 4f       	sbci	r24, 0xFF	; 255
    a8f0:	9f 4f       	sbci	r25, 0xFF	; 255
    a8f2:	08 95       	ret

0000a8f4 <__floatunsisf>:
    a8f4:	e8 94       	clt
    a8f6:	09 c0       	rjmp	.+18     	; 0xa90a <__floatsisf+0x12>

0000a8f8 <__floatsisf>:
    a8f8:	97 fb       	bst	r25, 7
    a8fa:	3e f4       	brtc	.+14     	; 0xa90a <__floatsisf+0x12>
    a8fc:	90 95       	com	r25
    a8fe:	80 95       	com	r24
    a900:	70 95       	com	r23
    a902:	61 95       	neg	r22
    a904:	7f 4f       	sbci	r23, 0xFF	; 255
    a906:	8f 4f       	sbci	r24, 0xFF	; 255
    a908:	9f 4f       	sbci	r25, 0xFF	; 255
    a90a:	99 23       	and	r25, r25
    a90c:	a9 f0       	breq	.+42     	; 0xa938 <__floatsisf+0x40>
    a90e:	f9 2f       	mov	r31, r25
    a910:	96 e9       	ldi	r25, 0x96	; 150
    a912:	bb 27       	eor	r27, r27
    a914:	93 95       	inc	r25
    a916:	f6 95       	lsr	r31
    a918:	87 95       	ror	r24
    a91a:	77 95       	ror	r23
    a91c:	67 95       	ror	r22
    a91e:	b7 95       	ror	r27
    a920:	f1 11       	cpse	r31, r1
    a922:	f8 cf       	rjmp	.-16     	; 0xa914 <__floatsisf+0x1c>
    a924:	fa f4       	brpl	.+62     	; 0xa964 <__floatsisf+0x6c>
    a926:	bb 0f       	add	r27, r27
    a928:	11 f4       	brne	.+4      	; 0xa92e <__floatsisf+0x36>
    a92a:	60 ff       	sbrs	r22, 0
    a92c:	1b c0       	rjmp	.+54     	; 0xa964 <__floatsisf+0x6c>
    a92e:	6f 5f       	subi	r22, 0xFF	; 255
    a930:	7f 4f       	sbci	r23, 0xFF	; 255
    a932:	8f 4f       	sbci	r24, 0xFF	; 255
    a934:	9f 4f       	sbci	r25, 0xFF	; 255
    a936:	16 c0       	rjmp	.+44     	; 0xa964 <__floatsisf+0x6c>
    a938:	88 23       	and	r24, r24
    a93a:	11 f0       	breq	.+4      	; 0xa940 <__floatsisf+0x48>
    a93c:	96 e9       	ldi	r25, 0x96	; 150
    a93e:	11 c0       	rjmp	.+34     	; 0xa962 <__floatsisf+0x6a>
    a940:	77 23       	and	r23, r23
    a942:	21 f0       	breq	.+8      	; 0xa94c <__floatsisf+0x54>
    a944:	9e e8       	ldi	r25, 0x8E	; 142
    a946:	87 2f       	mov	r24, r23
    a948:	76 2f       	mov	r23, r22
    a94a:	05 c0       	rjmp	.+10     	; 0xa956 <__floatsisf+0x5e>
    a94c:	66 23       	and	r22, r22
    a94e:	71 f0       	breq	.+28     	; 0xa96c <__floatsisf+0x74>
    a950:	96 e8       	ldi	r25, 0x86	; 134
    a952:	86 2f       	mov	r24, r22
    a954:	70 e0       	ldi	r23, 0x00	; 0
    a956:	60 e0       	ldi	r22, 0x00	; 0
    a958:	2a f0       	brmi	.+10     	; 0xa964 <__floatsisf+0x6c>
    a95a:	9a 95       	dec	r25
    a95c:	66 0f       	add	r22, r22
    a95e:	77 1f       	adc	r23, r23
    a960:	88 1f       	adc	r24, r24
    a962:	da f7       	brpl	.-10     	; 0xa95a <__floatsisf+0x62>
    a964:	88 0f       	add	r24, r24
    a966:	96 95       	lsr	r25
    a968:	87 95       	ror	r24
    a96a:	97 f9       	bld	r25, 7
    a96c:	08 95       	ret

0000a96e <__fp_cmp>:
    a96e:	99 0f       	add	r25, r25
    a970:	00 08       	sbc	r0, r0
    a972:	55 0f       	add	r21, r21
    a974:	aa 0b       	sbc	r26, r26
    a976:	e0 e8       	ldi	r30, 0x80	; 128
    a978:	fe ef       	ldi	r31, 0xFE	; 254
    a97a:	16 16       	cp	r1, r22
    a97c:	17 06       	cpc	r1, r23
    a97e:	e8 07       	cpc	r30, r24
    a980:	f9 07       	cpc	r31, r25
    a982:	c0 f0       	brcs	.+48     	; 0xa9b4 <__fp_cmp+0x46>
    a984:	12 16       	cp	r1, r18
    a986:	13 06       	cpc	r1, r19
    a988:	e4 07       	cpc	r30, r20
    a98a:	f5 07       	cpc	r31, r21
    a98c:	98 f0       	brcs	.+38     	; 0xa9b4 <__fp_cmp+0x46>
    a98e:	62 1b       	sub	r22, r18
    a990:	73 0b       	sbc	r23, r19
    a992:	84 0b       	sbc	r24, r20
    a994:	95 0b       	sbc	r25, r21
    a996:	39 f4       	brne	.+14     	; 0xa9a6 <__fp_cmp+0x38>
    a998:	0a 26       	eor	r0, r26
    a99a:	61 f0       	breq	.+24     	; 0xa9b4 <__fp_cmp+0x46>
    a99c:	23 2b       	or	r18, r19
    a99e:	24 2b       	or	r18, r20
    a9a0:	25 2b       	or	r18, r21
    a9a2:	21 f4       	brne	.+8      	; 0xa9ac <__fp_cmp+0x3e>
    a9a4:	08 95       	ret
    a9a6:	0a 26       	eor	r0, r26
    a9a8:	09 f4       	brne	.+2      	; 0xa9ac <__fp_cmp+0x3e>
    a9aa:	a1 40       	sbci	r26, 0x01	; 1
    a9ac:	a6 95       	lsr	r26
    a9ae:	8f ef       	ldi	r24, 0xFF	; 255
    a9b0:	81 1d       	adc	r24, r1
    a9b2:	81 1d       	adc	r24, r1
    a9b4:	08 95       	ret

0000a9b6 <__fp_inf>:
    a9b6:	97 f9       	bld	r25, 7
    a9b8:	9f 67       	ori	r25, 0x7F	; 127
    a9ba:	80 e8       	ldi	r24, 0x80	; 128
    a9bc:	70 e0       	ldi	r23, 0x00	; 0
    a9be:	60 e0       	ldi	r22, 0x00	; 0
    a9c0:	08 95       	ret

0000a9c2 <__fp_nan>:
    a9c2:	9f ef       	ldi	r25, 0xFF	; 255
    a9c4:	80 ec       	ldi	r24, 0xC0	; 192
    a9c6:	08 95       	ret

0000a9c8 <__fp_pscA>:
    a9c8:	00 24       	eor	r0, r0
    a9ca:	0a 94       	dec	r0
    a9cc:	16 16       	cp	r1, r22
    a9ce:	17 06       	cpc	r1, r23
    a9d0:	18 06       	cpc	r1, r24
    a9d2:	09 06       	cpc	r0, r25
    a9d4:	08 95       	ret

0000a9d6 <__fp_pscB>:
    a9d6:	00 24       	eor	r0, r0
    a9d8:	0a 94       	dec	r0
    a9da:	12 16       	cp	r1, r18
    a9dc:	13 06       	cpc	r1, r19
    a9de:	14 06       	cpc	r1, r20
    a9e0:	05 06       	cpc	r0, r21
    a9e2:	08 95       	ret

0000a9e4 <__fp_round>:
    a9e4:	09 2e       	mov	r0, r25
    a9e6:	03 94       	inc	r0
    a9e8:	00 0c       	add	r0, r0
    a9ea:	11 f4       	brne	.+4      	; 0xa9f0 <__fp_round+0xc>
    a9ec:	88 23       	and	r24, r24
    a9ee:	52 f0       	brmi	.+20     	; 0xaa04 <__fp_round+0x20>
    a9f0:	bb 0f       	add	r27, r27
    a9f2:	40 f4       	brcc	.+16     	; 0xaa04 <__fp_round+0x20>
    a9f4:	bf 2b       	or	r27, r31
    a9f6:	11 f4       	brne	.+4      	; 0xa9fc <__fp_round+0x18>
    a9f8:	60 ff       	sbrs	r22, 0
    a9fa:	04 c0       	rjmp	.+8      	; 0xaa04 <__fp_round+0x20>
    a9fc:	6f 5f       	subi	r22, 0xFF	; 255
    a9fe:	7f 4f       	sbci	r23, 0xFF	; 255
    aa00:	8f 4f       	sbci	r24, 0xFF	; 255
    aa02:	9f 4f       	sbci	r25, 0xFF	; 255
    aa04:	08 95       	ret

0000aa06 <__fp_split3>:
    aa06:	57 fd       	sbrc	r21, 7
    aa08:	90 58       	subi	r25, 0x80	; 128
    aa0a:	44 0f       	add	r20, r20
    aa0c:	55 1f       	adc	r21, r21
    aa0e:	59 f0       	breq	.+22     	; 0xaa26 <__fp_splitA+0x10>
    aa10:	5f 3f       	cpi	r21, 0xFF	; 255
    aa12:	71 f0       	breq	.+28     	; 0xaa30 <__fp_splitA+0x1a>
    aa14:	47 95       	ror	r20

0000aa16 <__fp_splitA>:
    aa16:	88 0f       	add	r24, r24
    aa18:	97 fb       	bst	r25, 7
    aa1a:	99 1f       	adc	r25, r25
    aa1c:	61 f0       	breq	.+24     	; 0xaa36 <__fp_splitA+0x20>
    aa1e:	9f 3f       	cpi	r25, 0xFF	; 255
    aa20:	79 f0       	breq	.+30     	; 0xaa40 <__fp_splitA+0x2a>
    aa22:	87 95       	ror	r24
    aa24:	08 95       	ret
    aa26:	12 16       	cp	r1, r18
    aa28:	13 06       	cpc	r1, r19
    aa2a:	14 06       	cpc	r1, r20
    aa2c:	55 1f       	adc	r21, r21
    aa2e:	f2 cf       	rjmp	.-28     	; 0xaa14 <__fp_split3+0xe>
    aa30:	46 95       	lsr	r20
    aa32:	f1 df       	rcall	.-30     	; 0xaa16 <__fp_splitA>
    aa34:	08 c0       	rjmp	.+16     	; 0xaa46 <__fp_splitA+0x30>
    aa36:	16 16       	cp	r1, r22
    aa38:	17 06       	cpc	r1, r23
    aa3a:	18 06       	cpc	r1, r24
    aa3c:	99 1f       	adc	r25, r25
    aa3e:	f1 cf       	rjmp	.-30     	; 0xaa22 <__fp_splitA+0xc>
    aa40:	86 95       	lsr	r24
    aa42:	71 05       	cpc	r23, r1
    aa44:	61 05       	cpc	r22, r1
    aa46:	08 94       	sec
    aa48:	08 95       	ret

0000aa4a <__fp_zero>:
    aa4a:	e8 94       	clt

0000aa4c <__fp_szero>:
    aa4c:	bb 27       	eor	r27, r27
    aa4e:	66 27       	eor	r22, r22
    aa50:	77 27       	eor	r23, r23
    aa52:	cb 01       	movw	r24, r22
    aa54:	97 f9       	bld	r25, 7
    aa56:	08 95       	ret

0000aa58 <__gesf2>:
    aa58:	8a df       	rcall	.-236    	; 0xa96e <__fp_cmp>
    aa5a:	08 f4       	brcc	.+2      	; 0xaa5e <__gesf2+0x6>
    aa5c:	8f ef       	ldi	r24, 0xFF	; 255
    aa5e:	08 95       	ret
    aa60:	0e f0       	brts	.+2      	; 0xaa64 <__gesf2+0xc>
    aa62:	a6 c0       	rjmp	.+332    	; 0xabb0 <__fp_mpack>
    aa64:	ae cf       	rjmp	.-164    	; 0xa9c2 <__fp_nan>
    aa66:	68 94       	set
    aa68:	a6 cf       	rjmp	.-180    	; 0xa9b6 <__fp_inf>

0000aa6a <log>:
    aa6a:	d5 df       	rcall	.-86     	; 0xaa16 <__fp_splitA>
    aa6c:	c8 f3       	brcs	.-14     	; 0xaa60 <__gesf2+0x8>
    aa6e:	99 23       	and	r25, r25
    aa70:	d1 f3       	breq	.-12     	; 0xaa66 <__gesf2+0xe>
    aa72:	c6 f3       	brts	.-16     	; 0xaa64 <__gesf2+0xc>
    aa74:	df 93       	push	r29
    aa76:	cf 93       	push	r28
    aa78:	1f 93       	push	r17
    aa7a:	0f 93       	push	r16
    aa7c:	ff 92       	push	r15
    aa7e:	c9 2f       	mov	r28, r25
    aa80:	dd 27       	eor	r29, r29
    aa82:	88 23       	and	r24, r24
    aa84:	2a f0       	brmi	.+10     	; 0xaa90 <log+0x26>
    aa86:	21 97       	sbiw	r28, 0x01	; 1
    aa88:	66 0f       	add	r22, r22
    aa8a:	77 1f       	adc	r23, r23
    aa8c:	88 1f       	adc	r24, r24
    aa8e:	da f7       	brpl	.-10     	; 0xaa86 <log+0x1c>
    aa90:	20 e0       	ldi	r18, 0x00	; 0
    aa92:	30 e0       	ldi	r19, 0x00	; 0
    aa94:	40 e8       	ldi	r20, 0x80	; 128
    aa96:	5f eb       	ldi	r21, 0xBF	; 191
    aa98:	9f e3       	ldi	r25, 0x3F	; 63
    aa9a:	88 39       	cpi	r24, 0x98	; 152
    aa9c:	20 f0       	brcs	.+8      	; 0xaaa6 <log+0x3c>
    aa9e:	80 3e       	cpi	r24, 0xE0	; 224
    aaa0:	30 f0       	brcs	.+12     	; 0xaaae <log+0x44>
    aaa2:	21 96       	adiw	r28, 0x01	; 1
    aaa4:	8f 77       	andi	r24, 0x7F	; 127
    aaa6:	25 de       	rcall	.-950    	; 0xa6f2 <__addsf3>
    aaa8:	e4 e9       	ldi	r30, 0x94	; 148
    aaaa:	f8 e0       	ldi	r31, 0x08	; 8
    aaac:	03 c0       	rjmp	.+6      	; 0xaab4 <log+0x4a>
    aaae:	21 de       	rcall	.-958    	; 0xa6f2 <__addsf3>
    aab0:	e1 ec       	ldi	r30, 0xC1	; 193
    aab2:	f8 e0       	ldi	r31, 0x08	; 8
    aab4:	8b d0       	rcall	.+278    	; 0xabcc <__fp_powser>
    aab6:	8b 01       	movw	r16, r22
    aab8:	be 01       	movw	r22, r28
    aaba:	ec 01       	movw	r28, r24
    aabc:	fb 2e       	mov	r15, r27
    aabe:	6f 57       	subi	r22, 0x7F	; 127
    aac0:	71 09       	sbc	r23, r1
    aac2:	75 95       	asr	r23
    aac4:	77 1f       	adc	r23, r23
    aac6:	88 0b       	sbc	r24, r24
    aac8:	99 0b       	sbc	r25, r25
    aaca:	16 df       	rcall	.-468    	; 0xa8f8 <__floatsisf>
    aacc:	28 e1       	ldi	r18, 0x18	; 24
    aace:	32 e7       	ldi	r19, 0x72	; 114
    aad0:	41 e3       	ldi	r20, 0x31	; 49
    aad2:	5f e3       	ldi	r21, 0x3F	; 63
    aad4:	16 d0       	rcall	.+44     	; 0xab02 <__mulsf3x>
    aad6:	af 2d       	mov	r26, r15
    aad8:	98 01       	movw	r18, r16
    aada:	ae 01       	movw	r20, r28
    aadc:	ff 90       	pop	r15
    aade:	0f 91       	pop	r16
    aae0:	1f 91       	pop	r17
    aae2:	cf 91       	pop	r28
    aae4:	df 91       	pop	r29
    aae6:	16 de       	rcall	.-980    	; 0xa714 <__addsf3x>
    aae8:	7d cf       	rjmp	.-262    	; 0xa9e4 <__fp_round>

0000aaea <__mulsf3>:
    aaea:	0b d0       	rcall	.+22     	; 0xab02 <__mulsf3x>
    aaec:	7b cf       	rjmp	.-266    	; 0xa9e4 <__fp_round>
    aaee:	6c df       	rcall	.-296    	; 0xa9c8 <__fp_pscA>
    aaf0:	28 f0       	brcs	.+10     	; 0xaafc <__mulsf3+0x12>
    aaf2:	71 df       	rcall	.-286    	; 0xa9d6 <__fp_pscB>
    aaf4:	18 f0       	brcs	.+6      	; 0xaafc <__mulsf3+0x12>
    aaf6:	95 23       	and	r25, r21
    aaf8:	09 f0       	breq	.+2      	; 0xaafc <__mulsf3+0x12>
    aafa:	5d cf       	rjmp	.-326    	; 0xa9b6 <__fp_inf>
    aafc:	62 cf       	rjmp	.-316    	; 0xa9c2 <__fp_nan>
    aafe:	11 24       	eor	r1, r1
    ab00:	a5 cf       	rjmp	.-182    	; 0xaa4c <__fp_szero>

0000ab02 <__mulsf3x>:
    ab02:	81 df       	rcall	.-254    	; 0xaa06 <__fp_split3>
    ab04:	a0 f3       	brcs	.-24     	; 0xaaee <__mulsf3+0x4>

0000ab06 <__mulsf3_pse>:
    ab06:	95 9f       	mul	r25, r21
    ab08:	d1 f3       	breq	.-12     	; 0xaafe <__mulsf3+0x14>
    ab0a:	95 0f       	add	r25, r21
    ab0c:	50 e0       	ldi	r21, 0x00	; 0
    ab0e:	55 1f       	adc	r21, r21
    ab10:	62 9f       	mul	r22, r18
    ab12:	f0 01       	movw	r30, r0
    ab14:	72 9f       	mul	r23, r18
    ab16:	bb 27       	eor	r27, r27
    ab18:	f0 0d       	add	r31, r0
    ab1a:	b1 1d       	adc	r27, r1
    ab1c:	63 9f       	mul	r22, r19
    ab1e:	aa 27       	eor	r26, r26
    ab20:	f0 0d       	add	r31, r0
    ab22:	b1 1d       	adc	r27, r1
    ab24:	aa 1f       	adc	r26, r26
    ab26:	64 9f       	mul	r22, r20
    ab28:	66 27       	eor	r22, r22
    ab2a:	b0 0d       	add	r27, r0
    ab2c:	a1 1d       	adc	r26, r1
    ab2e:	66 1f       	adc	r22, r22
    ab30:	82 9f       	mul	r24, r18
    ab32:	22 27       	eor	r18, r18
    ab34:	b0 0d       	add	r27, r0
    ab36:	a1 1d       	adc	r26, r1
    ab38:	62 1f       	adc	r22, r18
    ab3a:	73 9f       	mul	r23, r19
    ab3c:	b0 0d       	add	r27, r0
    ab3e:	a1 1d       	adc	r26, r1
    ab40:	62 1f       	adc	r22, r18
    ab42:	83 9f       	mul	r24, r19
    ab44:	a0 0d       	add	r26, r0
    ab46:	61 1d       	adc	r22, r1
    ab48:	22 1f       	adc	r18, r18
    ab4a:	74 9f       	mul	r23, r20
    ab4c:	33 27       	eor	r19, r19
    ab4e:	a0 0d       	add	r26, r0
    ab50:	61 1d       	adc	r22, r1
    ab52:	23 1f       	adc	r18, r19
    ab54:	84 9f       	mul	r24, r20
    ab56:	60 0d       	add	r22, r0
    ab58:	21 1d       	adc	r18, r1
    ab5a:	82 2f       	mov	r24, r18
    ab5c:	76 2f       	mov	r23, r22
    ab5e:	6a 2f       	mov	r22, r26
    ab60:	11 24       	eor	r1, r1
    ab62:	9f 57       	subi	r25, 0x7F	; 127
    ab64:	50 40       	sbci	r21, 0x00	; 0
    ab66:	8a f0       	brmi	.+34     	; 0xab8a <__mulsf3_pse+0x84>
    ab68:	e1 f0       	breq	.+56     	; 0xaba2 <__mulsf3_pse+0x9c>
    ab6a:	88 23       	and	r24, r24
    ab6c:	4a f0       	brmi	.+18     	; 0xab80 <__mulsf3_pse+0x7a>
    ab6e:	ee 0f       	add	r30, r30
    ab70:	ff 1f       	adc	r31, r31
    ab72:	bb 1f       	adc	r27, r27
    ab74:	66 1f       	adc	r22, r22
    ab76:	77 1f       	adc	r23, r23
    ab78:	88 1f       	adc	r24, r24
    ab7a:	91 50       	subi	r25, 0x01	; 1
    ab7c:	50 40       	sbci	r21, 0x00	; 0
    ab7e:	a9 f7       	brne	.-22     	; 0xab6a <__mulsf3_pse+0x64>
    ab80:	9e 3f       	cpi	r25, 0xFE	; 254
    ab82:	51 05       	cpc	r21, r1
    ab84:	70 f0       	brcs	.+28     	; 0xaba2 <__mulsf3_pse+0x9c>
    ab86:	17 cf       	rjmp	.-466    	; 0xa9b6 <__fp_inf>
    ab88:	61 cf       	rjmp	.-318    	; 0xaa4c <__fp_szero>
    ab8a:	5f 3f       	cpi	r21, 0xFF	; 255
    ab8c:	ec f3       	brlt	.-6      	; 0xab88 <__mulsf3_pse+0x82>
    ab8e:	98 3e       	cpi	r25, 0xE8	; 232
    ab90:	dc f3       	brlt	.-10     	; 0xab88 <__mulsf3_pse+0x82>
    ab92:	86 95       	lsr	r24
    ab94:	77 95       	ror	r23
    ab96:	67 95       	ror	r22
    ab98:	b7 95       	ror	r27
    ab9a:	f7 95       	ror	r31
    ab9c:	e7 95       	ror	r30
    ab9e:	9f 5f       	subi	r25, 0xFF	; 255
    aba0:	c1 f7       	brne	.-16     	; 0xab92 <__mulsf3_pse+0x8c>
    aba2:	fe 2b       	or	r31, r30
    aba4:	88 0f       	add	r24, r24
    aba6:	91 1d       	adc	r25, r1
    aba8:	96 95       	lsr	r25
    abaa:	87 95       	ror	r24
    abac:	97 f9       	bld	r25, 7
    abae:	08 95       	ret

0000abb0 <__fp_mpack>:
    abb0:	9f 3f       	cpi	r25, 0xFF	; 255
    abb2:	31 f0       	breq	.+12     	; 0xabc0 <__fp_mpack_finite+0xc>

0000abb4 <__fp_mpack_finite>:
    abb4:	91 50       	subi	r25, 0x01	; 1
    abb6:	20 f4       	brcc	.+8      	; 0xabc0 <__fp_mpack_finite+0xc>
    abb8:	87 95       	ror	r24
    abba:	77 95       	ror	r23
    abbc:	67 95       	ror	r22
    abbe:	b7 95       	ror	r27
    abc0:	88 0f       	add	r24, r24
    abc2:	91 1d       	adc	r25, r1
    abc4:	96 95       	lsr	r25
    abc6:	87 95       	ror	r24
    abc8:	97 f9       	bld	r25, 7
    abca:	08 95       	ret

0000abcc <__fp_powser>:
    abcc:	df 93       	push	r29
    abce:	cf 93       	push	r28
    abd0:	1f 93       	push	r17
    abd2:	0f 93       	push	r16
    abd4:	ff 92       	push	r15
    abd6:	ef 92       	push	r14
    abd8:	df 92       	push	r13
    abda:	7b 01       	movw	r14, r22
    abdc:	8c 01       	movw	r16, r24
    abde:	68 94       	set
    abe0:	05 c0       	rjmp	.+10     	; 0xabec <__fp_powser+0x20>
    abe2:	da 2e       	mov	r13, r26
    abe4:	ef 01       	movw	r28, r30
    abe6:	8d df       	rcall	.-230    	; 0xab02 <__mulsf3x>
    abe8:	fe 01       	movw	r30, r28
    abea:	e8 94       	clt
    abec:	a5 91       	lpm	r26, Z+
    abee:	25 91       	lpm	r18, Z+
    abf0:	35 91       	lpm	r19, Z+
    abf2:	45 91       	lpm	r20, Z+
    abf4:	55 91       	lpm	r21, Z+
    abf6:	ae f3       	brts	.-22     	; 0xabe2 <__fp_powser+0x16>
    abf8:	ef 01       	movw	r28, r30
    abfa:	8c dd       	rcall	.-1256   	; 0xa714 <__addsf3x>
    abfc:	fe 01       	movw	r30, r28
    abfe:	97 01       	movw	r18, r14
    ac00:	a8 01       	movw	r20, r16
    ac02:	da 94       	dec	r13
    ac04:	79 f7       	brne	.-34     	; 0xabe4 <__fp_powser+0x18>
    ac06:	df 90       	pop	r13
    ac08:	ef 90       	pop	r14
    ac0a:	ff 90       	pop	r15
    ac0c:	0f 91       	pop	r16
    ac0e:	1f 91       	pop	r17
    ac10:	cf 91       	pop	r28
    ac12:	df 91       	pop	r29
    ac14:	08 95       	ret

0000ac16 <vfprintf>:
    ac16:	2f 92       	push	r2
    ac18:	3f 92       	push	r3
    ac1a:	4f 92       	push	r4
    ac1c:	5f 92       	push	r5
    ac1e:	6f 92       	push	r6
    ac20:	7f 92       	push	r7
    ac22:	8f 92       	push	r8
    ac24:	9f 92       	push	r9
    ac26:	af 92       	push	r10
    ac28:	bf 92       	push	r11
    ac2a:	cf 92       	push	r12
    ac2c:	df 92       	push	r13
    ac2e:	ef 92       	push	r14
    ac30:	ff 92       	push	r15
    ac32:	0f 93       	push	r16
    ac34:	1f 93       	push	r17
    ac36:	cf 93       	push	r28
    ac38:	df 93       	push	r29
    ac3a:	cd b7       	in	r28, 0x3d	; 61
    ac3c:	de b7       	in	r29, 0x3e	; 62
    ac3e:	60 97       	sbiw	r28, 0x10	; 16
    ac40:	0f b6       	in	r0, 0x3f	; 63
    ac42:	f8 94       	cli
    ac44:	de bf       	out	0x3e, r29	; 62
    ac46:	0f be       	out	0x3f, r0	; 63
    ac48:	cd bf       	out	0x3d, r28	; 61
    ac4a:	7c 01       	movw	r14, r24
    ac4c:	1b 01       	movw	r2, r22
    ac4e:	6a 01       	movw	r12, r20
    ac50:	fc 01       	movw	r30, r24
    ac52:	17 82       	std	Z+7, r1	; 0x07
    ac54:	16 82       	std	Z+6, r1	; 0x06
    ac56:	83 81       	ldd	r24, Z+3	; 0x03
    ac58:	81 ff       	sbrs	r24, 1
    ac5a:	2a c3       	rjmp	.+1620   	; 0xb2b0 <vfprintf+0x69a>
    ac5c:	9e 01       	movw	r18, r28
    ac5e:	2f 5f       	subi	r18, 0xFF	; 255
    ac60:	3f 4f       	sbci	r19, 0xFF	; 255
    ac62:	39 01       	movw	r6, r18
    ac64:	f7 01       	movw	r30, r14
    ac66:	93 81       	ldd	r25, Z+3	; 0x03
    ac68:	f1 01       	movw	r30, r2
    ac6a:	93 fd       	sbrc	r25, 3
    ac6c:	85 91       	lpm	r24, Z+
    ac6e:	93 ff       	sbrs	r25, 3
    ac70:	81 91       	ld	r24, Z+
    ac72:	1f 01       	movw	r2, r30
    ac74:	88 23       	and	r24, r24
    ac76:	09 f4       	brne	.+2      	; 0xac7a <vfprintf+0x64>
    ac78:	17 c3       	rjmp	.+1582   	; 0xb2a8 <vfprintf+0x692>
    ac7a:	85 32       	cpi	r24, 0x25	; 37
    ac7c:	39 f4       	brne	.+14     	; 0xac8c <vfprintf+0x76>
    ac7e:	93 fd       	sbrc	r25, 3
    ac80:	85 91       	lpm	r24, Z+
    ac82:	93 ff       	sbrs	r25, 3
    ac84:	81 91       	ld	r24, Z+
    ac86:	1f 01       	movw	r2, r30
    ac88:	85 32       	cpi	r24, 0x25	; 37
    ac8a:	31 f4       	brne	.+12     	; 0xac98 <vfprintf+0x82>
    ac8c:	b7 01       	movw	r22, r14
    ac8e:	90 e0       	ldi	r25, 0x00	; 0
    ac90:	a3 d5       	rcall	.+2886   	; 0xb7d8 <fputc>
    ac92:	56 01       	movw	r10, r12
    ac94:	65 01       	movw	r12, r10
    ac96:	e6 cf       	rjmp	.-52     	; 0xac64 <vfprintf+0x4e>
    ac98:	10 e0       	ldi	r17, 0x00	; 0
    ac9a:	51 2c       	mov	r5, r1
    ac9c:	91 2c       	mov	r9, r1
    ac9e:	ff e1       	ldi	r31, 0x1F	; 31
    aca0:	f9 15       	cp	r31, r9
    aca2:	d8 f0       	brcs	.+54     	; 0xacda <vfprintf+0xc4>
    aca4:	8b 32       	cpi	r24, 0x2B	; 43
    aca6:	79 f0       	breq	.+30     	; 0xacc6 <vfprintf+0xb0>
    aca8:	38 f4       	brcc	.+14     	; 0xacb8 <vfprintf+0xa2>
    acaa:	80 32       	cpi	r24, 0x20	; 32
    acac:	79 f0       	breq	.+30     	; 0xaccc <vfprintf+0xb6>
    acae:	83 32       	cpi	r24, 0x23	; 35
    acb0:	a1 f4       	brne	.+40     	; 0xacda <vfprintf+0xc4>
    acb2:	f9 2d       	mov	r31, r9
    acb4:	f0 61       	ori	r31, 0x10	; 16
    acb6:	2e c0       	rjmp	.+92     	; 0xad14 <vfprintf+0xfe>
    acb8:	8d 32       	cpi	r24, 0x2D	; 45
    acba:	61 f0       	breq	.+24     	; 0xacd4 <vfprintf+0xbe>
    acbc:	80 33       	cpi	r24, 0x30	; 48
    acbe:	69 f4       	brne	.+26     	; 0xacda <vfprintf+0xc4>
    acc0:	29 2d       	mov	r18, r9
    acc2:	21 60       	ori	r18, 0x01	; 1
    acc4:	2d c0       	rjmp	.+90     	; 0xad20 <vfprintf+0x10a>
    acc6:	39 2d       	mov	r19, r9
    acc8:	32 60       	ori	r19, 0x02	; 2
    acca:	93 2e       	mov	r9, r19
    accc:	89 2d       	mov	r24, r9
    acce:	84 60       	ori	r24, 0x04	; 4
    acd0:	98 2e       	mov	r9, r24
    acd2:	2a c0       	rjmp	.+84     	; 0xad28 <vfprintf+0x112>
    acd4:	e9 2d       	mov	r30, r9
    acd6:	e8 60       	ori	r30, 0x08	; 8
    acd8:	15 c0       	rjmp	.+42     	; 0xad04 <vfprintf+0xee>
    acda:	97 fc       	sbrc	r9, 7
    acdc:	2d c0       	rjmp	.+90     	; 0xad38 <vfprintf+0x122>
    acde:	20 ed       	ldi	r18, 0xD0	; 208
    ace0:	28 0f       	add	r18, r24
    ace2:	2a 30       	cpi	r18, 0x0A	; 10
    ace4:	88 f4       	brcc	.+34     	; 0xad08 <vfprintf+0xf2>
    ace6:	96 fe       	sbrs	r9, 6
    ace8:	06 c0       	rjmp	.+12     	; 0xacf6 <vfprintf+0xe0>
    acea:	3a e0       	ldi	r19, 0x0A	; 10
    acec:	13 9f       	mul	r17, r19
    acee:	20 0d       	add	r18, r0
    acf0:	11 24       	eor	r1, r1
    acf2:	12 2f       	mov	r17, r18
    acf4:	19 c0       	rjmp	.+50     	; 0xad28 <vfprintf+0x112>
    acf6:	8a e0       	ldi	r24, 0x0A	; 10
    acf8:	58 9e       	mul	r5, r24
    acfa:	20 0d       	add	r18, r0
    acfc:	11 24       	eor	r1, r1
    acfe:	52 2e       	mov	r5, r18
    ad00:	e9 2d       	mov	r30, r9
    ad02:	e0 62       	ori	r30, 0x20	; 32
    ad04:	9e 2e       	mov	r9, r30
    ad06:	10 c0       	rjmp	.+32     	; 0xad28 <vfprintf+0x112>
    ad08:	8e 32       	cpi	r24, 0x2E	; 46
    ad0a:	31 f4       	brne	.+12     	; 0xad18 <vfprintf+0x102>
    ad0c:	96 fc       	sbrc	r9, 6
    ad0e:	cc c2       	rjmp	.+1432   	; 0xb2a8 <vfprintf+0x692>
    ad10:	f9 2d       	mov	r31, r9
    ad12:	f0 64       	ori	r31, 0x40	; 64
    ad14:	9f 2e       	mov	r9, r31
    ad16:	08 c0       	rjmp	.+16     	; 0xad28 <vfprintf+0x112>
    ad18:	8c 36       	cpi	r24, 0x6C	; 108
    ad1a:	21 f4       	brne	.+8      	; 0xad24 <vfprintf+0x10e>
    ad1c:	29 2d       	mov	r18, r9
    ad1e:	20 68       	ori	r18, 0x80	; 128
    ad20:	92 2e       	mov	r9, r18
    ad22:	02 c0       	rjmp	.+4      	; 0xad28 <vfprintf+0x112>
    ad24:	88 36       	cpi	r24, 0x68	; 104
    ad26:	41 f4       	brne	.+16     	; 0xad38 <vfprintf+0x122>
    ad28:	f1 01       	movw	r30, r2
    ad2a:	93 fd       	sbrc	r25, 3
    ad2c:	85 91       	lpm	r24, Z+
    ad2e:	93 ff       	sbrs	r25, 3
    ad30:	81 91       	ld	r24, Z+
    ad32:	1f 01       	movw	r2, r30
    ad34:	81 11       	cpse	r24, r1
    ad36:	b3 cf       	rjmp	.-154    	; 0xac9e <vfprintf+0x88>
    ad38:	9b eb       	ldi	r25, 0xBB	; 187
    ad3a:	98 0f       	add	r25, r24
    ad3c:	93 30       	cpi	r25, 0x03	; 3
    ad3e:	20 f4       	brcc	.+8      	; 0xad48 <vfprintf+0x132>
    ad40:	99 2d       	mov	r25, r9
    ad42:	90 61       	ori	r25, 0x10	; 16
    ad44:	80 5e       	subi	r24, 0xE0	; 224
    ad46:	07 c0       	rjmp	.+14     	; 0xad56 <vfprintf+0x140>
    ad48:	9b e9       	ldi	r25, 0x9B	; 155
    ad4a:	98 0f       	add	r25, r24
    ad4c:	93 30       	cpi	r25, 0x03	; 3
    ad4e:	08 f0       	brcs	.+2      	; 0xad52 <vfprintf+0x13c>
    ad50:	59 c1       	rjmp	.+690    	; 0xb004 <vfprintf+0x3ee>
    ad52:	99 2d       	mov	r25, r9
    ad54:	9f 7e       	andi	r25, 0xEF	; 239
    ad56:	96 ff       	sbrs	r25, 6
    ad58:	16 e0       	ldi	r17, 0x06	; 6
    ad5a:	9f 73       	andi	r25, 0x3F	; 63
    ad5c:	99 2e       	mov	r9, r25
    ad5e:	85 36       	cpi	r24, 0x65	; 101
    ad60:	19 f4       	brne	.+6      	; 0xad68 <vfprintf+0x152>
    ad62:	90 64       	ori	r25, 0x40	; 64
    ad64:	99 2e       	mov	r9, r25
    ad66:	08 c0       	rjmp	.+16     	; 0xad78 <vfprintf+0x162>
    ad68:	86 36       	cpi	r24, 0x66	; 102
    ad6a:	21 f4       	brne	.+8      	; 0xad74 <vfprintf+0x15e>
    ad6c:	39 2f       	mov	r19, r25
    ad6e:	30 68       	ori	r19, 0x80	; 128
    ad70:	93 2e       	mov	r9, r19
    ad72:	02 c0       	rjmp	.+4      	; 0xad78 <vfprintf+0x162>
    ad74:	11 11       	cpse	r17, r1
    ad76:	11 50       	subi	r17, 0x01	; 1
    ad78:	97 fe       	sbrs	r9, 7
    ad7a:	07 c0       	rjmp	.+14     	; 0xad8a <vfprintf+0x174>
    ad7c:	1c 33       	cpi	r17, 0x3C	; 60
    ad7e:	50 f4       	brcc	.+20     	; 0xad94 <vfprintf+0x17e>
    ad80:	44 24       	eor	r4, r4
    ad82:	43 94       	inc	r4
    ad84:	41 0e       	add	r4, r17
    ad86:	27 e0       	ldi	r18, 0x07	; 7
    ad88:	0b c0       	rjmp	.+22     	; 0xada0 <vfprintf+0x18a>
    ad8a:	18 30       	cpi	r17, 0x08	; 8
    ad8c:	38 f0       	brcs	.+14     	; 0xad9c <vfprintf+0x186>
    ad8e:	27 e0       	ldi	r18, 0x07	; 7
    ad90:	17 e0       	ldi	r17, 0x07	; 7
    ad92:	05 c0       	rjmp	.+10     	; 0xad9e <vfprintf+0x188>
    ad94:	27 e0       	ldi	r18, 0x07	; 7
    ad96:	9c e3       	ldi	r25, 0x3C	; 60
    ad98:	49 2e       	mov	r4, r25
    ad9a:	02 c0       	rjmp	.+4      	; 0xada0 <vfprintf+0x18a>
    ad9c:	21 2f       	mov	r18, r17
    ad9e:	41 2c       	mov	r4, r1
    ada0:	56 01       	movw	r10, r12
    ada2:	84 e0       	ldi	r24, 0x04	; 4
    ada4:	a8 0e       	add	r10, r24
    ada6:	b1 1c       	adc	r11, r1
    ada8:	f6 01       	movw	r30, r12
    adaa:	60 81       	ld	r22, Z
    adac:	71 81       	ldd	r23, Z+1	; 0x01
    adae:	82 81       	ldd	r24, Z+2	; 0x02
    adb0:	93 81       	ldd	r25, Z+3	; 0x03
    adb2:	04 2d       	mov	r16, r4
    adb4:	a3 01       	movw	r20, r6
    adb6:	12 d4       	rcall	.+2084   	; 0xb5dc <__ftoa_engine>
    adb8:	6c 01       	movw	r12, r24
    adba:	f9 81       	ldd	r31, Y+1	; 0x01
    adbc:	fc 87       	std	Y+12, r31	; 0x0c
    adbe:	f0 ff       	sbrs	r31, 0
    adc0:	02 c0       	rjmp	.+4      	; 0xadc6 <vfprintf+0x1b0>
    adc2:	f3 ff       	sbrs	r31, 3
    adc4:	06 c0       	rjmp	.+12     	; 0xadd2 <vfprintf+0x1bc>
    adc6:	91 fc       	sbrc	r9, 1
    adc8:	06 c0       	rjmp	.+12     	; 0xadd6 <vfprintf+0x1c0>
    adca:	92 fe       	sbrs	r9, 2
    adcc:	06 c0       	rjmp	.+12     	; 0xadda <vfprintf+0x1c4>
    adce:	00 e2       	ldi	r16, 0x20	; 32
    add0:	05 c0       	rjmp	.+10     	; 0xaddc <vfprintf+0x1c6>
    add2:	0d e2       	ldi	r16, 0x2D	; 45
    add4:	03 c0       	rjmp	.+6      	; 0xaddc <vfprintf+0x1c6>
    add6:	0b e2       	ldi	r16, 0x2B	; 43
    add8:	01 c0       	rjmp	.+2      	; 0xaddc <vfprintf+0x1c6>
    adda:	00 e0       	ldi	r16, 0x00	; 0
    addc:	8c 85       	ldd	r24, Y+12	; 0x0c
    adde:	8c 70       	andi	r24, 0x0C	; 12
    ade0:	19 f0       	breq	.+6      	; 0xade8 <vfprintf+0x1d2>
    ade2:	01 11       	cpse	r16, r1
    ade4:	43 c2       	rjmp	.+1158   	; 0xb26c <vfprintf+0x656>
    ade6:	80 c2       	rjmp	.+1280   	; 0xb2e8 <vfprintf+0x6d2>
    ade8:	97 fe       	sbrs	r9, 7
    adea:	10 c0       	rjmp	.+32     	; 0xae0c <vfprintf+0x1f6>
    adec:	4c 0c       	add	r4, r12
    adee:	fc 85       	ldd	r31, Y+12	; 0x0c
    adf0:	f4 ff       	sbrs	r31, 4
    adf2:	04 c0       	rjmp	.+8      	; 0xadfc <vfprintf+0x1e6>
    adf4:	8a 81       	ldd	r24, Y+2	; 0x02
    adf6:	81 33       	cpi	r24, 0x31	; 49
    adf8:	09 f4       	brne	.+2      	; 0xadfc <vfprintf+0x1e6>
    adfa:	4a 94       	dec	r4
    adfc:	14 14       	cp	r1, r4
    adfe:	74 f5       	brge	.+92     	; 0xae5c <vfprintf+0x246>
    ae00:	28 e0       	ldi	r18, 0x08	; 8
    ae02:	24 15       	cp	r18, r4
    ae04:	78 f5       	brcc	.+94     	; 0xae64 <vfprintf+0x24e>
    ae06:	88 e0       	ldi	r24, 0x08	; 8
    ae08:	48 2e       	mov	r4, r24
    ae0a:	2c c0       	rjmp	.+88     	; 0xae64 <vfprintf+0x24e>
    ae0c:	96 fc       	sbrc	r9, 6
    ae0e:	2a c0       	rjmp	.+84     	; 0xae64 <vfprintf+0x24e>
    ae10:	81 2f       	mov	r24, r17
    ae12:	90 e0       	ldi	r25, 0x00	; 0
    ae14:	8c 15       	cp	r24, r12
    ae16:	9d 05       	cpc	r25, r13
    ae18:	9c f0       	brlt	.+38     	; 0xae40 <vfprintf+0x22a>
    ae1a:	3c ef       	ldi	r19, 0xFC	; 252
    ae1c:	c3 16       	cp	r12, r19
    ae1e:	3f ef       	ldi	r19, 0xFF	; 255
    ae20:	d3 06       	cpc	r13, r19
    ae22:	74 f0       	brlt	.+28     	; 0xae40 <vfprintf+0x22a>
    ae24:	89 2d       	mov	r24, r9
    ae26:	80 68       	ori	r24, 0x80	; 128
    ae28:	98 2e       	mov	r9, r24
    ae2a:	0a c0       	rjmp	.+20     	; 0xae40 <vfprintf+0x22a>
    ae2c:	e2 e0       	ldi	r30, 0x02	; 2
    ae2e:	f0 e0       	ldi	r31, 0x00	; 0
    ae30:	ec 0f       	add	r30, r28
    ae32:	fd 1f       	adc	r31, r29
    ae34:	e1 0f       	add	r30, r17
    ae36:	f1 1d       	adc	r31, r1
    ae38:	80 81       	ld	r24, Z
    ae3a:	80 33       	cpi	r24, 0x30	; 48
    ae3c:	19 f4       	brne	.+6      	; 0xae44 <vfprintf+0x22e>
    ae3e:	11 50       	subi	r17, 0x01	; 1
    ae40:	11 11       	cpse	r17, r1
    ae42:	f4 cf       	rjmp	.-24     	; 0xae2c <vfprintf+0x216>
    ae44:	97 fe       	sbrs	r9, 7
    ae46:	0e c0       	rjmp	.+28     	; 0xae64 <vfprintf+0x24e>
    ae48:	44 24       	eor	r4, r4
    ae4a:	43 94       	inc	r4
    ae4c:	41 0e       	add	r4, r17
    ae4e:	81 2f       	mov	r24, r17
    ae50:	90 e0       	ldi	r25, 0x00	; 0
    ae52:	c8 16       	cp	r12, r24
    ae54:	d9 06       	cpc	r13, r25
    ae56:	2c f4       	brge	.+10     	; 0xae62 <vfprintf+0x24c>
    ae58:	1c 19       	sub	r17, r12
    ae5a:	04 c0       	rjmp	.+8      	; 0xae64 <vfprintf+0x24e>
    ae5c:	44 24       	eor	r4, r4
    ae5e:	43 94       	inc	r4
    ae60:	01 c0       	rjmp	.+2      	; 0xae64 <vfprintf+0x24e>
    ae62:	10 e0       	ldi	r17, 0x00	; 0
    ae64:	97 fe       	sbrs	r9, 7
    ae66:	06 c0       	rjmp	.+12     	; 0xae74 <vfprintf+0x25e>
    ae68:	1c 14       	cp	r1, r12
    ae6a:	1d 04       	cpc	r1, r13
    ae6c:	34 f4       	brge	.+12     	; 0xae7a <vfprintf+0x264>
    ae6e:	c6 01       	movw	r24, r12
    ae70:	01 96       	adiw	r24, 0x01	; 1
    ae72:	05 c0       	rjmp	.+10     	; 0xae7e <vfprintf+0x268>
    ae74:	85 e0       	ldi	r24, 0x05	; 5
    ae76:	90 e0       	ldi	r25, 0x00	; 0
    ae78:	02 c0       	rjmp	.+4      	; 0xae7e <vfprintf+0x268>
    ae7a:	81 e0       	ldi	r24, 0x01	; 1
    ae7c:	90 e0       	ldi	r25, 0x00	; 0
    ae7e:	01 11       	cpse	r16, r1
    ae80:	01 96       	adiw	r24, 0x01	; 1
    ae82:	11 23       	and	r17, r17
    ae84:	31 f0       	breq	.+12     	; 0xae92 <vfprintf+0x27c>
    ae86:	21 2f       	mov	r18, r17
    ae88:	30 e0       	ldi	r19, 0x00	; 0
    ae8a:	2f 5f       	subi	r18, 0xFF	; 255
    ae8c:	3f 4f       	sbci	r19, 0xFF	; 255
    ae8e:	82 0f       	add	r24, r18
    ae90:	93 1f       	adc	r25, r19
    ae92:	25 2d       	mov	r18, r5
    ae94:	30 e0       	ldi	r19, 0x00	; 0
    ae96:	82 17       	cp	r24, r18
    ae98:	93 07       	cpc	r25, r19
    ae9a:	14 f4       	brge	.+4      	; 0xaea0 <vfprintf+0x28a>
    ae9c:	58 1a       	sub	r5, r24
    ae9e:	01 c0       	rjmp	.+2      	; 0xaea2 <vfprintf+0x28c>
    aea0:	51 2c       	mov	r5, r1
    aea2:	89 2d       	mov	r24, r9
    aea4:	89 70       	andi	r24, 0x09	; 9
    aea6:	41 f4       	brne	.+16     	; 0xaeb8 <vfprintf+0x2a2>
    aea8:	55 20       	and	r5, r5
    aeaa:	31 f0       	breq	.+12     	; 0xaeb8 <vfprintf+0x2a2>
    aeac:	b7 01       	movw	r22, r14
    aeae:	80 e2       	ldi	r24, 0x20	; 32
    aeb0:	90 e0       	ldi	r25, 0x00	; 0
    aeb2:	92 d4       	rcall	.+2340   	; 0xb7d8 <fputc>
    aeb4:	5a 94       	dec	r5
    aeb6:	f8 cf       	rjmp	.-16     	; 0xaea8 <vfprintf+0x292>
    aeb8:	00 23       	and	r16, r16
    aeba:	21 f0       	breq	.+8      	; 0xaec4 <vfprintf+0x2ae>
    aebc:	b7 01       	movw	r22, r14
    aebe:	80 2f       	mov	r24, r16
    aec0:	90 e0       	ldi	r25, 0x00	; 0
    aec2:	8a d4       	rcall	.+2324   	; 0xb7d8 <fputc>
    aec4:	93 fc       	sbrc	r9, 3
    aec6:	08 c0       	rjmp	.+16     	; 0xaed8 <vfprintf+0x2c2>
    aec8:	55 20       	and	r5, r5
    aeca:	31 f0       	breq	.+12     	; 0xaed8 <vfprintf+0x2c2>
    aecc:	b7 01       	movw	r22, r14
    aece:	80 e3       	ldi	r24, 0x30	; 48
    aed0:	90 e0       	ldi	r25, 0x00	; 0
    aed2:	82 d4       	rcall	.+2308   	; 0xb7d8 <fputc>
    aed4:	5a 94       	dec	r5
    aed6:	f8 cf       	rjmp	.-16     	; 0xaec8 <vfprintf+0x2b2>
    aed8:	97 fe       	sbrs	r9, 7
    aeda:	4a c0       	rjmp	.+148    	; 0xaf70 <vfprintf+0x35a>
    aedc:	46 01       	movw	r8, r12
    aede:	d7 fe       	sbrs	r13, 7
    aee0:	02 c0       	rjmp	.+4      	; 0xaee6 <vfprintf+0x2d0>
    aee2:	81 2c       	mov	r8, r1
    aee4:	91 2c       	mov	r9, r1
    aee6:	c6 01       	movw	r24, r12
    aee8:	88 19       	sub	r24, r8
    aeea:	99 09       	sbc	r25, r9
    aeec:	f3 01       	movw	r30, r6
    aeee:	e8 0f       	add	r30, r24
    aef0:	f9 1f       	adc	r31, r25
    aef2:	fe 87       	std	Y+14, r31	; 0x0e
    aef4:	ed 87       	std	Y+13, r30	; 0x0d
    aef6:	96 01       	movw	r18, r12
    aef8:	24 19       	sub	r18, r4
    aefa:	31 09       	sbc	r19, r1
    aefc:	38 8b       	std	Y+16, r19	; 0x10
    aefe:	2f 87       	std	Y+15, r18	; 0x0f
    af00:	01 2f       	mov	r16, r17
    af02:	10 e0       	ldi	r17, 0x00	; 0
    af04:	11 95       	neg	r17
    af06:	01 95       	neg	r16
    af08:	11 09       	sbc	r17, r1
    af0a:	3f ef       	ldi	r19, 0xFF	; 255
    af0c:	83 16       	cp	r8, r19
    af0e:	93 06       	cpc	r9, r19
    af10:	21 f4       	brne	.+8      	; 0xaf1a <vfprintf+0x304>
    af12:	b7 01       	movw	r22, r14
    af14:	8e e2       	ldi	r24, 0x2E	; 46
    af16:	90 e0       	ldi	r25, 0x00	; 0
    af18:	5f d4       	rcall	.+2238   	; 0xb7d8 <fputc>
    af1a:	c8 14       	cp	r12, r8
    af1c:	d9 04       	cpc	r13, r9
    af1e:	4c f0       	brlt	.+18     	; 0xaf32 <vfprintf+0x31c>
    af20:	8f 85       	ldd	r24, Y+15	; 0x0f
    af22:	98 89       	ldd	r25, Y+16	; 0x10
    af24:	88 15       	cp	r24, r8
    af26:	99 05       	cpc	r25, r9
    af28:	24 f4       	brge	.+8      	; 0xaf32 <vfprintf+0x31c>
    af2a:	ed 85       	ldd	r30, Y+13	; 0x0d
    af2c:	fe 85       	ldd	r31, Y+14	; 0x0e
    af2e:	81 81       	ldd	r24, Z+1	; 0x01
    af30:	01 c0       	rjmp	.+2      	; 0xaf34 <vfprintf+0x31e>
    af32:	80 e3       	ldi	r24, 0x30	; 48
    af34:	f1 e0       	ldi	r31, 0x01	; 1
    af36:	8f 1a       	sub	r8, r31
    af38:	91 08       	sbc	r9, r1
    af3a:	2d 85       	ldd	r18, Y+13	; 0x0d
    af3c:	3e 85       	ldd	r19, Y+14	; 0x0e
    af3e:	2f 5f       	subi	r18, 0xFF	; 255
    af40:	3f 4f       	sbci	r19, 0xFF	; 255
    af42:	3e 87       	std	Y+14, r19	; 0x0e
    af44:	2d 87       	std	Y+13, r18	; 0x0d
    af46:	80 16       	cp	r8, r16
    af48:	91 06       	cpc	r9, r17
    af4a:	24 f0       	brlt	.+8      	; 0xaf54 <vfprintf+0x33e>
    af4c:	b7 01       	movw	r22, r14
    af4e:	90 e0       	ldi	r25, 0x00	; 0
    af50:	43 d4       	rcall	.+2182   	; 0xb7d8 <fputc>
    af52:	db cf       	rjmp	.-74     	; 0xaf0a <vfprintf+0x2f4>
    af54:	c8 14       	cp	r12, r8
    af56:	d9 04       	cpc	r13, r9
    af58:	41 f4       	brne	.+16     	; 0xaf6a <vfprintf+0x354>
    af5a:	9a 81       	ldd	r25, Y+2	; 0x02
    af5c:	96 33       	cpi	r25, 0x36	; 54
    af5e:	20 f4       	brcc	.+8      	; 0xaf68 <vfprintf+0x352>
    af60:	95 33       	cpi	r25, 0x35	; 53
    af62:	19 f4       	brne	.+6      	; 0xaf6a <vfprintf+0x354>
    af64:	3c 85       	ldd	r19, Y+12	; 0x0c
    af66:	34 ff       	sbrs	r19, 4
    af68:	81 e3       	ldi	r24, 0x31	; 49
    af6a:	b7 01       	movw	r22, r14
    af6c:	90 e0       	ldi	r25, 0x00	; 0
    af6e:	48 c0       	rjmp	.+144    	; 0xb000 <vfprintf+0x3ea>
    af70:	8a 81       	ldd	r24, Y+2	; 0x02
    af72:	81 33       	cpi	r24, 0x31	; 49
    af74:	19 f0       	breq	.+6      	; 0xaf7c <vfprintf+0x366>
    af76:	9c 85       	ldd	r25, Y+12	; 0x0c
    af78:	9f 7e       	andi	r25, 0xEF	; 239
    af7a:	9c 87       	std	Y+12, r25	; 0x0c
    af7c:	b7 01       	movw	r22, r14
    af7e:	90 e0       	ldi	r25, 0x00	; 0
    af80:	2b d4       	rcall	.+2134   	; 0xb7d8 <fputc>
    af82:	11 11       	cpse	r17, r1
    af84:	05 c0       	rjmp	.+10     	; 0xaf90 <vfprintf+0x37a>
    af86:	94 fc       	sbrc	r9, 4
    af88:	16 c0       	rjmp	.+44     	; 0xafb6 <vfprintf+0x3a0>
    af8a:	85 e6       	ldi	r24, 0x65	; 101
    af8c:	90 e0       	ldi	r25, 0x00	; 0
    af8e:	15 c0       	rjmp	.+42     	; 0xafba <vfprintf+0x3a4>
    af90:	b7 01       	movw	r22, r14
    af92:	8e e2       	ldi	r24, 0x2E	; 46
    af94:	90 e0       	ldi	r25, 0x00	; 0
    af96:	20 d4       	rcall	.+2112   	; 0xb7d8 <fputc>
    af98:	1e 5f       	subi	r17, 0xFE	; 254
    af9a:	82 e0       	ldi	r24, 0x02	; 2
    af9c:	01 e0       	ldi	r16, 0x01	; 1
    af9e:	08 0f       	add	r16, r24
    afa0:	f3 01       	movw	r30, r6
    afa2:	e8 0f       	add	r30, r24
    afa4:	f1 1d       	adc	r31, r1
    afa6:	80 81       	ld	r24, Z
    afa8:	b7 01       	movw	r22, r14
    afaa:	90 e0       	ldi	r25, 0x00	; 0
    afac:	15 d4       	rcall	.+2090   	; 0xb7d8 <fputc>
    afae:	80 2f       	mov	r24, r16
    afb0:	01 13       	cpse	r16, r17
    afb2:	f4 cf       	rjmp	.-24     	; 0xaf9c <vfprintf+0x386>
    afb4:	e8 cf       	rjmp	.-48     	; 0xaf86 <vfprintf+0x370>
    afb6:	85 e4       	ldi	r24, 0x45	; 69
    afb8:	90 e0       	ldi	r25, 0x00	; 0
    afba:	b7 01       	movw	r22, r14
    afbc:	0d d4       	rcall	.+2074   	; 0xb7d8 <fputc>
    afbe:	d7 fc       	sbrc	r13, 7
    afc0:	06 c0       	rjmp	.+12     	; 0xafce <vfprintf+0x3b8>
    afc2:	c1 14       	cp	r12, r1
    afc4:	d1 04       	cpc	r13, r1
    afc6:	41 f4       	brne	.+16     	; 0xafd8 <vfprintf+0x3c2>
    afc8:	ec 85       	ldd	r30, Y+12	; 0x0c
    afca:	e4 ff       	sbrs	r30, 4
    afcc:	05 c0       	rjmp	.+10     	; 0xafd8 <vfprintf+0x3c2>
    afce:	d1 94       	neg	r13
    afd0:	c1 94       	neg	r12
    afd2:	d1 08       	sbc	r13, r1
    afd4:	8d e2       	ldi	r24, 0x2D	; 45
    afd6:	01 c0       	rjmp	.+2      	; 0xafda <vfprintf+0x3c4>
    afd8:	8b e2       	ldi	r24, 0x2B	; 43
    afda:	b7 01       	movw	r22, r14
    afdc:	90 e0       	ldi	r25, 0x00	; 0
    afde:	fc d3       	rcall	.+2040   	; 0xb7d8 <fputc>
    afe0:	80 e3       	ldi	r24, 0x30	; 48
    afe2:	2a e0       	ldi	r18, 0x0A	; 10
    afe4:	c2 16       	cp	r12, r18
    afe6:	d1 04       	cpc	r13, r1
    afe8:	2c f0       	brlt	.+10     	; 0xaff4 <vfprintf+0x3de>
    afea:	8f 5f       	subi	r24, 0xFF	; 255
    afec:	fa e0       	ldi	r31, 0x0A	; 10
    afee:	cf 1a       	sub	r12, r31
    aff0:	d1 08       	sbc	r13, r1
    aff2:	f7 cf       	rjmp	.-18     	; 0xafe2 <vfprintf+0x3cc>
    aff4:	b7 01       	movw	r22, r14
    aff6:	90 e0       	ldi	r25, 0x00	; 0
    aff8:	ef d3       	rcall	.+2014   	; 0xb7d8 <fputc>
    affa:	b7 01       	movw	r22, r14
    affc:	c6 01       	movw	r24, r12
    affe:	c0 96       	adiw	r24, 0x30	; 48
    b000:	eb d3       	rcall	.+2006   	; 0xb7d8 <fputc>
    b002:	49 c1       	rjmp	.+658    	; 0xb296 <vfprintf+0x680>
    b004:	83 36       	cpi	r24, 0x63	; 99
    b006:	31 f0       	breq	.+12     	; 0xb014 <vfprintf+0x3fe>
    b008:	83 37       	cpi	r24, 0x73	; 115
    b00a:	79 f0       	breq	.+30     	; 0xb02a <vfprintf+0x414>
    b00c:	83 35       	cpi	r24, 0x53	; 83
    b00e:	09 f0       	breq	.+2      	; 0xb012 <vfprintf+0x3fc>
    b010:	52 c0       	rjmp	.+164    	; 0xb0b6 <vfprintf+0x4a0>
    b012:	1f c0       	rjmp	.+62     	; 0xb052 <vfprintf+0x43c>
    b014:	56 01       	movw	r10, r12
    b016:	32 e0       	ldi	r19, 0x02	; 2
    b018:	a3 0e       	add	r10, r19
    b01a:	b1 1c       	adc	r11, r1
    b01c:	f6 01       	movw	r30, r12
    b01e:	80 81       	ld	r24, Z
    b020:	89 83       	std	Y+1, r24	; 0x01
    b022:	01 e0       	ldi	r16, 0x01	; 1
    b024:	10 e0       	ldi	r17, 0x00	; 0
    b026:	63 01       	movw	r12, r6
    b028:	11 c0       	rjmp	.+34     	; 0xb04c <vfprintf+0x436>
    b02a:	56 01       	movw	r10, r12
    b02c:	f2 e0       	ldi	r31, 0x02	; 2
    b02e:	af 0e       	add	r10, r31
    b030:	b1 1c       	adc	r11, r1
    b032:	f6 01       	movw	r30, r12
    b034:	c0 80       	ld	r12, Z
    b036:	d1 80       	ldd	r13, Z+1	; 0x01
    b038:	96 fe       	sbrs	r9, 6
    b03a:	03 c0       	rjmp	.+6      	; 0xb042 <vfprintf+0x42c>
    b03c:	61 2f       	mov	r22, r17
    b03e:	70 e0       	ldi	r23, 0x00	; 0
    b040:	02 c0       	rjmp	.+4      	; 0xb046 <vfprintf+0x430>
    b042:	6f ef       	ldi	r22, 0xFF	; 255
    b044:	7f ef       	ldi	r23, 0xFF	; 255
    b046:	c6 01       	movw	r24, r12
    b048:	bc d3       	rcall	.+1912   	; 0xb7c2 <strnlen>
    b04a:	8c 01       	movw	r16, r24
    b04c:	f9 2d       	mov	r31, r9
    b04e:	ff 77       	andi	r31, 0x7F	; 127
    b050:	13 c0       	rjmp	.+38     	; 0xb078 <vfprintf+0x462>
    b052:	56 01       	movw	r10, r12
    b054:	22 e0       	ldi	r18, 0x02	; 2
    b056:	a2 0e       	add	r10, r18
    b058:	b1 1c       	adc	r11, r1
    b05a:	f6 01       	movw	r30, r12
    b05c:	c0 80       	ld	r12, Z
    b05e:	d1 80       	ldd	r13, Z+1	; 0x01
    b060:	96 fe       	sbrs	r9, 6
    b062:	03 c0       	rjmp	.+6      	; 0xb06a <vfprintf+0x454>
    b064:	61 2f       	mov	r22, r17
    b066:	70 e0       	ldi	r23, 0x00	; 0
    b068:	02 c0       	rjmp	.+4      	; 0xb06e <vfprintf+0x458>
    b06a:	6f ef       	ldi	r22, 0xFF	; 255
    b06c:	7f ef       	ldi	r23, 0xFF	; 255
    b06e:	c6 01       	movw	r24, r12
    b070:	8d d3       	rcall	.+1818   	; 0xb78c <strnlen_P>
    b072:	8c 01       	movw	r16, r24
    b074:	f9 2d       	mov	r31, r9
    b076:	f0 68       	ori	r31, 0x80	; 128
    b078:	9f 2e       	mov	r9, r31
    b07a:	f3 fd       	sbrc	r31, 3
    b07c:	18 c0       	rjmp	.+48     	; 0xb0ae <vfprintf+0x498>
    b07e:	85 2d       	mov	r24, r5
    b080:	90 e0       	ldi	r25, 0x00	; 0
    b082:	08 17       	cp	r16, r24
    b084:	19 07       	cpc	r17, r25
    b086:	98 f4       	brcc	.+38     	; 0xb0ae <vfprintf+0x498>
    b088:	b7 01       	movw	r22, r14
    b08a:	80 e2       	ldi	r24, 0x20	; 32
    b08c:	90 e0       	ldi	r25, 0x00	; 0
    b08e:	a4 d3       	rcall	.+1864   	; 0xb7d8 <fputc>
    b090:	5a 94       	dec	r5
    b092:	f5 cf       	rjmp	.-22     	; 0xb07e <vfprintf+0x468>
    b094:	f6 01       	movw	r30, r12
    b096:	97 fc       	sbrc	r9, 7
    b098:	85 91       	lpm	r24, Z+
    b09a:	97 fe       	sbrs	r9, 7
    b09c:	81 91       	ld	r24, Z+
    b09e:	6f 01       	movw	r12, r30
    b0a0:	b7 01       	movw	r22, r14
    b0a2:	90 e0       	ldi	r25, 0x00	; 0
    b0a4:	99 d3       	rcall	.+1842   	; 0xb7d8 <fputc>
    b0a6:	51 10       	cpse	r5, r1
    b0a8:	5a 94       	dec	r5
    b0aa:	01 50       	subi	r16, 0x01	; 1
    b0ac:	11 09       	sbc	r17, r1
    b0ae:	01 15       	cp	r16, r1
    b0b0:	11 05       	cpc	r17, r1
    b0b2:	81 f7       	brne	.-32     	; 0xb094 <vfprintf+0x47e>
    b0b4:	f0 c0       	rjmp	.+480    	; 0xb296 <vfprintf+0x680>
    b0b6:	84 36       	cpi	r24, 0x64	; 100
    b0b8:	11 f0       	breq	.+4      	; 0xb0be <vfprintf+0x4a8>
    b0ba:	89 36       	cpi	r24, 0x69	; 105
    b0bc:	59 f5       	brne	.+86     	; 0xb114 <vfprintf+0x4fe>
    b0be:	56 01       	movw	r10, r12
    b0c0:	97 fe       	sbrs	r9, 7
    b0c2:	09 c0       	rjmp	.+18     	; 0xb0d6 <vfprintf+0x4c0>
    b0c4:	24 e0       	ldi	r18, 0x04	; 4
    b0c6:	a2 0e       	add	r10, r18
    b0c8:	b1 1c       	adc	r11, r1
    b0ca:	f6 01       	movw	r30, r12
    b0cc:	60 81       	ld	r22, Z
    b0ce:	71 81       	ldd	r23, Z+1	; 0x01
    b0d0:	82 81       	ldd	r24, Z+2	; 0x02
    b0d2:	93 81       	ldd	r25, Z+3	; 0x03
    b0d4:	0a c0       	rjmp	.+20     	; 0xb0ea <vfprintf+0x4d4>
    b0d6:	f2 e0       	ldi	r31, 0x02	; 2
    b0d8:	af 0e       	add	r10, r31
    b0da:	b1 1c       	adc	r11, r1
    b0dc:	f6 01       	movw	r30, r12
    b0de:	60 81       	ld	r22, Z
    b0e0:	71 81       	ldd	r23, Z+1	; 0x01
    b0e2:	07 2e       	mov	r0, r23
    b0e4:	00 0c       	add	r0, r0
    b0e6:	88 0b       	sbc	r24, r24
    b0e8:	99 0b       	sbc	r25, r25
    b0ea:	f9 2d       	mov	r31, r9
    b0ec:	ff 76       	andi	r31, 0x6F	; 111
    b0ee:	9f 2e       	mov	r9, r31
    b0f0:	97 ff       	sbrs	r25, 7
    b0f2:	09 c0       	rjmp	.+18     	; 0xb106 <vfprintf+0x4f0>
    b0f4:	90 95       	com	r25
    b0f6:	80 95       	com	r24
    b0f8:	70 95       	com	r23
    b0fa:	61 95       	neg	r22
    b0fc:	7f 4f       	sbci	r23, 0xFF	; 255
    b0fe:	8f 4f       	sbci	r24, 0xFF	; 255
    b100:	9f 4f       	sbci	r25, 0xFF	; 255
    b102:	f0 68       	ori	r31, 0x80	; 128
    b104:	9f 2e       	mov	r9, r31
    b106:	2a e0       	ldi	r18, 0x0A	; 10
    b108:	30 e0       	ldi	r19, 0x00	; 0
    b10a:	a3 01       	movw	r20, r6
    b10c:	d9 d3       	rcall	.+1970   	; 0xb8c0 <__ultoa_invert>
    b10e:	c8 2e       	mov	r12, r24
    b110:	c6 18       	sub	r12, r6
    b112:	3e c0       	rjmp	.+124    	; 0xb190 <vfprintf+0x57a>
    b114:	09 2d       	mov	r16, r9
    b116:	85 37       	cpi	r24, 0x75	; 117
    b118:	21 f4       	brne	.+8      	; 0xb122 <vfprintf+0x50c>
    b11a:	0f 7e       	andi	r16, 0xEF	; 239
    b11c:	2a e0       	ldi	r18, 0x0A	; 10
    b11e:	30 e0       	ldi	r19, 0x00	; 0
    b120:	1d c0       	rjmp	.+58     	; 0xb15c <vfprintf+0x546>
    b122:	09 7f       	andi	r16, 0xF9	; 249
    b124:	8f 36       	cpi	r24, 0x6F	; 111
    b126:	91 f0       	breq	.+36     	; 0xb14c <vfprintf+0x536>
    b128:	18 f4       	brcc	.+6      	; 0xb130 <vfprintf+0x51a>
    b12a:	88 35       	cpi	r24, 0x58	; 88
    b12c:	59 f0       	breq	.+22     	; 0xb144 <vfprintf+0x52e>
    b12e:	bc c0       	rjmp	.+376    	; 0xb2a8 <vfprintf+0x692>
    b130:	80 37       	cpi	r24, 0x70	; 112
    b132:	19 f0       	breq	.+6      	; 0xb13a <vfprintf+0x524>
    b134:	88 37       	cpi	r24, 0x78	; 120
    b136:	11 f0       	breq	.+4      	; 0xb13c <vfprintf+0x526>
    b138:	b7 c0       	rjmp	.+366    	; 0xb2a8 <vfprintf+0x692>
    b13a:	00 61       	ori	r16, 0x10	; 16
    b13c:	04 ff       	sbrs	r16, 4
    b13e:	09 c0       	rjmp	.+18     	; 0xb152 <vfprintf+0x53c>
    b140:	04 60       	ori	r16, 0x04	; 4
    b142:	07 c0       	rjmp	.+14     	; 0xb152 <vfprintf+0x53c>
    b144:	94 fe       	sbrs	r9, 4
    b146:	08 c0       	rjmp	.+16     	; 0xb158 <vfprintf+0x542>
    b148:	06 60       	ori	r16, 0x06	; 6
    b14a:	06 c0       	rjmp	.+12     	; 0xb158 <vfprintf+0x542>
    b14c:	28 e0       	ldi	r18, 0x08	; 8
    b14e:	30 e0       	ldi	r19, 0x00	; 0
    b150:	05 c0       	rjmp	.+10     	; 0xb15c <vfprintf+0x546>
    b152:	20 e1       	ldi	r18, 0x10	; 16
    b154:	30 e0       	ldi	r19, 0x00	; 0
    b156:	02 c0       	rjmp	.+4      	; 0xb15c <vfprintf+0x546>
    b158:	20 e1       	ldi	r18, 0x10	; 16
    b15a:	32 e0       	ldi	r19, 0x02	; 2
    b15c:	56 01       	movw	r10, r12
    b15e:	07 ff       	sbrs	r16, 7
    b160:	09 c0       	rjmp	.+18     	; 0xb174 <vfprintf+0x55e>
    b162:	84 e0       	ldi	r24, 0x04	; 4
    b164:	a8 0e       	add	r10, r24
    b166:	b1 1c       	adc	r11, r1
    b168:	f6 01       	movw	r30, r12
    b16a:	60 81       	ld	r22, Z
    b16c:	71 81       	ldd	r23, Z+1	; 0x01
    b16e:	82 81       	ldd	r24, Z+2	; 0x02
    b170:	93 81       	ldd	r25, Z+3	; 0x03
    b172:	08 c0       	rjmp	.+16     	; 0xb184 <vfprintf+0x56e>
    b174:	f2 e0       	ldi	r31, 0x02	; 2
    b176:	af 0e       	add	r10, r31
    b178:	b1 1c       	adc	r11, r1
    b17a:	f6 01       	movw	r30, r12
    b17c:	60 81       	ld	r22, Z
    b17e:	71 81       	ldd	r23, Z+1	; 0x01
    b180:	80 e0       	ldi	r24, 0x00	; 0
    b182:	90 e0       	ldi	r25, 0x00	; 0
    b184:	a3 01       	movw	r20, r6
    b186:	9c d3       	rcall	.+1848   	; 0xb8c0 <__ultoa_invert>
    b188:	c8 2e       	mov	r12, r24
    b18a:	c6 18       	sub	r12, r6
    b18c:	0f 77       	andi	r16, 0x7F	; 127
    b18e:	90 2e       	mov	r9, r16
    b190:	96 fe       	sbrs	r9, 6
    b192:	0b c0       	rjmp	.+22     	; 0xb1aa <vfprintf+0x594>
    b194:	09 2d       	mov	r16, r9
    b196:	0e 7f       	andi	r16, 0xFE	; 254
    b198:	c1 16       	cp	r12, r17
    b19a:	50 f4       	brcc	.+20     	; 0xb1b0 <vfprintf+0x59a>
    b19c:	94 fe       	sbrs	r9, 4
    b19e:	0a c0       	rjmp	.+20     	; 0xb1b4 <vfprintf+0x59e>
    b1a0:	92 fc       	sbrc	r9, 2
    b1a2:	08 c0       	rjmp	.+16     	; 0xb1b4 <vfprintf+0x59e>
    b1a4:	09 2d       	mov	r16, r9
    b1a6:	0e 7e       	andi	r16, 0xEE	; 238
    b1a8:	05 c0       	rjmp	.+10     	; 0xb1b4 <vfprintf+0x59e>
    b1aa:	dc 2c       	mov	r13, r12
    b1ac:	09 2d       	mov	r16, r9
    b1ae:	03 c0       	rjmp	.+6      	; 0xb1b6 <vfprintf+0x5a0>
    b1b0:	dc 2c       	mov	r13, r12
    b1b2:	01 c0       	rjmp	.+2      	; 0xb1b6 <vfprintf+0x5a0>
    b1b4:	d1 2e       	mov	r13, r17
    b1b6:	04 ff       	sbrs	r16, 4
    b1b8:	0d c0       	rjmp	.+26     	; 0xb1d4 <vfprintf+0x5be>
    b1ba:	fe 01       	movw	r30, r28
    b1bc:	ec 0d       	add	r30, r12
    b1be:	f1 1d       	adc	r31, r1
    b1c0:	80 81       	ld	r24, Z
    b1c2:	80 33       	cpi	r24, 0x30	; 48
    b1c4:	11 f4       	brne	.+4      	; 0xb1ca <vfprintf+0x5b4>
    b1c6:	09 7e       	andi	r16, 0xE9	; 233
    b1c8:	09 c0       	rjmp	.+18     	; 0xb1dc <vfprintf+0x5c6>
    b1ca:	02 ff       	sbrs	r16, 2
    b1cc:	06 c0       	rjmp	.+12     	; 0xb1da <vfprintf+0x5c4>
    b1ce:	d3 94       	inc	r13
    b1d0:	d3 94       	inc	r13
    b1d2:	04 c0       	rjmp	.+8      	; 0xb1dc <vfprintf+0x5c6>
    b1d4:	80 2f       	mov	r24, r16
    b1d6:	86 78       	andi	r24, 0x86	; 134
    b1d8:	09 f0       	breq	.+2      	; 0xb1dc <vfprintf+0x5c6>
    b1da:	d3 94       	inc	r13
    b1dc:	03 fd       	sbrc	r16, 3
    b1de:	10 c0       	rjmp	.+32     	; 0xb200 <vfprintf+0x5ea>
    b1e0:	00 ff       	sbrs	r16, 0
    b1e2:	06 c0       	rjmp	.+12     	; 0xb1f0 <vfprintf+0x5da>
    b1e4:	1c 2d       	mov	r17, r12
    b1e6:	d5 14       	cp	r13, r5
    b1e8:	78 f4       	brcc	.+30     	; 0xb208 <vfprintf+0x5f2>
    b1ea:	15 0d       	add	r17, r5
    b1ec:	1d 19       	sub	r17, r13
    b1ee:	0c c0       	rjmp	.+24     	; 0xb208 <vfprintf+0x5f2>
    b1f0:	d5 14       	cp	r13, r5
    b1f2:	50 f4       	brcc	.+20     	; 0xb208 <vfprintf+0x5f2>
    b1f4:	b7 01       	movw	r22, r14
    b1f6:	80 e2       	ldi	r24, 0x20	; 32
    b1f8:	90 e0       	ldi	r25, 0x00	; 0
    b1fa:	ee d2       	rcall	.+1500   	; 0xb7d8 <fputc>
    b1fc:	d3 94       	inc	r13
    b1fe:	f8 cf       	rjmp	.-16     	; 0xb1f0 <vfprintf+0x5da>
    b200:	d5 14       	cp	r13, r5
    b202:	10 f4       	brcc	.+4      	; 0xb208 <vfprintf+0x5f2>
    b204:	5d 18       	sub	r5, r13
    b206:	01 c0       	rjmp	.+2      	; 0xb20a <vfprintf+0x5f4>
    b208:	51 2c       	mov	r5, r1
    b20a:	04 ff       	sbrs	r16, 4
    b20c:	0f c0       	rjmp	.+30     	; 0xb22c <vfprintf+0x616>
    b20e:	b7 01       	movw	r22, r14
    b210:	80 e3       	ldi	r24, 0x30	; 48
    b212:	90 e0       	ldi	r25, 0x00	; 0
    b214:	e1 d2       	rcall	.+1474   	; 0xb7d8 <fputc>
    b216:	02 ff       	sbrs	r16, 2
    b218:	16 c0       	rjmp	.+44     	; 0xb246 <vfprintf+0x630>
    b21a:	01 fd       	sbrc	r16, 1
    b21c:	03 c0       	rjmp	.+6      	; 0xb224 <vfprintf+0x60e>
    b21e:	88 e7       	ldi	r24, 0x78	; 120
    b220:	90 e0       	ldi	r25, 0x00	; 0
    b222:	02 c0       	rjmp	.+4      	; 0xb228 <vfprintf+0x612>
    b224:	88 e5       	ldi	r24, 0x58	; 88
    b226:	90 e0       	ldi	r25, 0x00	; 0
    b228:	b7 01       	movw	r22, r14
    b22a:	0c c0       	rjmp	.+24     	; 0xb244 <vfprintf+0x62e>
    b22c:	80 2f       	mov	r24, r16
    b22e:	86 78       	andi	r24, 0x86	; 134
    b230:	51 f0       	breq	.+20     	; 0xb246 <vfprintf+0x630>
    b232:	01 ff       	sbrs	r16, 1
    b234:	02 c0       	rjmp	.+4      	; 0xb23a <vfprintf+0x624>
    b236:	8b e2       	ldi	r24, 0x2B	; 43
    b238:	01 c0       	rjmp	.+2      	; 0xb23c <vfprintf+0x626>
    b23a:	80 e2       	ldi	r24, 0x20	; 32
    b23c:	07 fd       	sbrc	r16, 7
    b23e:	8d e2       	ldi	r24, 0x2D	; 45
    b240:	b7 01       	movw	r22, r14
    b242:	90 e0       	ldi	r25, 0x00	; 0
    b244:	c9 d2       	rcall	.+1426   	; 0xb7d8 <fputc>
    b246:	c1 16       	cp	r12, r17
    b248:	30 f4       	brcc	.+12     	; 0xb256 <vfprintf+0x640>
    b24a:	b7 01       	movw	r22, r14
    b24c:	80 e3       	ldi	r24, 0x30	; 48
    b24e:	90 e0       	ldi	r25, 0x00	; 0
    b250:	c3 d2       	rcall	.+1414   	; 0xb7d8 <fputc>
    b252:	11 50       	subi	r17, 0x01	; 1
    b254:	f8 cf       	rjmp	.-16     	; 0xb246 <vfprintf+0x630>
    b256:	ca 94       	dec	r12
    b258:	f3 01       	movw	r30, r6
    b25a:	ec 0d       	add	r30, r12
    b25c:	f1 1d       	adc	r31, r1
    b25e:	80 81       	ld	r24, Z
    b260:	b7 01       	movw	r22, r14
    b262:	90 e0       	ldi	r25, 0x00	; 0
    b264:	b9 d2       	rcall	.+1394   	; 0xb7d8 <fputc>
    b266:	c1 10       	cpse	r12, r1
    b268:	f6 cf       	rjmp	.-20     	; 0xb256 <vfprintf+0x640>
    b26a:	15 c0       	rjmp	.+42     	; 0xb296 <vfprintf+0x680>
    b26c:	f4 e0       	ldi	r31, 0x04	; 4
    b26e:	f5 15       	cp	r31, r5
    b270:	50 f5       	brcc	.+84     	; 0xb2c6 <vfprintf+0x6b0>
    b272:	84 e0       	ldi	r24, 0x04	; 4
    b274:	58 1a       	sub	r5, r24
    b276:	93 fe       	sbrs	r9, 3
    b278:	1e c0       	rjmp	.+60     	; 0xb2b6 <vfprintf+0x6a0>
    b27a:	01 11       	cpse	r16, r1
    b27c:	25 c0       	rjmp	.+74     	; 0xb2c8 <vfprintf+0x6b2>
    b27e:	2c 85       	ldd	r18, Y+12	; 0x0c
    b280:	23 ff       	sbrs	r18, 3
    b282:	27 c0       	rjmp	.+78     	; 0xb2d2 <vfprintf+0x6bc>
    b284:	0e ee       	ldi	r16, 0xEE	; 238
    b286:	18 e0       	ldi	r17, 0x08	; 8
    b288:	39 2d       	mov	r19, r9
    b28a:	30 71       	andi	r19, 0x10	; 16
    b28c:	93 2e       	mov	r9, r19
    b28e:	f8 01       	movw	r30, r16
    b290:	84 91       	lpm	r24, Z
    b292:	81 11       	cpse	r24, r1
    b294:	21 c0       	rjmp	.+66     	; 0xb2d8 <vfprintf+0x6c2>
    b296:	55 20       	and	r5, r5
    b298:	09 f4       	brne	.+2      	; 0xb29c <vfprintf+0x686>
    b29a:	fc cc       	rjmp	.-1544   	; 0xac94 <vfprintf+0x7e>
    b29c:	b7 01       	movw	r22, r14
    b29e:	80 e2       	ldi	r24, 0x20	; 32
    b2a0:	90 e0       	ldi	r25, 0x00	; 0
    b2a2:	9a d2       	rcall	.+1332   	; 0xb7d8 <fputc>
    b2a4:	5a 94       	dec	r5
    b2a6:	f7 cf       	rjmp	.-18     	; 0xb296 <vfprintf+0x680>
    b2a8:	f7 01       	movw	r30, r14
    b2aa:	86 81       	ldd	r24, Z+6	; 0x06
    b2ac:	97 81       	ldd	r25, Z+7	; 0x07
    b2ae:	23 c0       	rjmp	.+70     	; 0xb2f6 <vfprintf+0x6e0>
    b2b0:	8f ef       	ldi	r24, 0xFF	; 255
    b2b2:	9f ef       	ldi	r25, 0xFF	; 255
    b2b4:	20 c0       	rjmp	.+64     	; 0xb2f6 <vfprintf+0x6e0>
    b2b6:	b7 01       	movw	r22, r14
    b2b8:	80 e2       	ldi	r24, 0x20	; 32
    b2ba:	90 e0       	ldi	r25, 0x00	; 0
    b2bc:	8d d2       	rcall	.+1306   	; 0xb7d8 <fputc>
    b2be:	5a 94       	dec	r5
    b2c0:	51 10       	cpse	r5, r1
    b2c2:	f9 cf       	rjmp	.-14     	; 0xb2b6 <vfprintf+0x6a0>
    b2c4:	da cf       	rjmp	.-76     	; 0xb27a <vfprintf+0x664>
    b2c6:	51 2c       	mov	r5, r1
    b2c8:	b7 01       	movw	r22, r14
    b2ca:	80 2f       	mov	r24, r16
    b2cc:	90 e0       	ldi	r25, 0x00	; 0
    b2ce:	84 d2       	rcall	.+1288   	; 0xb7d8 <fputc>
    b2d0:	d6 cf       	rjmp	.-84     	; 0xb27e <vfprintf+0x668>
    b2d2:	02 ef       	ldi	r16, 0xF2	; 242
    b2d4:	18 e0       	ldi	r17, 0x08	; 8
    b2d6:	d8 cf       	rjmp	.-80     	; 0xb288 <vfprintf+0x672>
    b2d8:	91 10       	cpse	r9, r1
    b2da:	80 52       	subi	r24, 0x20	; 32
    b2dc:	b7 01       	movw	r22, r14
    b2de:	90 e0       	ldi	r25, 0x00	; 0
    b2e0:	7b d2       	rcall	.+1270   	; 0xb7d8 <fputc>
    b2e2:	0f 5f       	subi	r16, 0xFF	; 255
    b2e4:	1f 4f       	sbci	r17, 0xFF	; 255
    b2e6:	d3 cf       	rjmp	.-90     	; 0xb28e <vfprintf+0x678>
    b2e8:	23 e0       	ldi	r18, 0x03	; 3
    b2ea:	25 15       	cp	r18, r5
    b2ec:	10 f4       	brcc	.+4      	; 0xb2f2 <vfprintf+0x6dc>
    b2ee:	83 e0       	ldi	r24, 0x03	; 3
    b2f0:	c1 cf       	rjmp	.-126    	; 0xb274 <vfprintf+0x65e>
    b2f2:	51 2c       	mov	r5, r1
    b2f4:	c4 cf       	rjmp	.-120    	; 0xb27e <vfprintf+0x668>
    b2f6:	60 96       	adiw	r28, 0x10	; 16
    b2f8:	0f b6       	in	r0, 0x3f	; 63
    b2fa:	f8 94       	cli
    b2fc:	de bf       	out	0x3e, r29	; 62
    b2fe:	0f be       	out	0x3f, r0	; 63
    b300:	cd bf       	out	0x3d, r28	; 61
    b302:	df 91       	pop	r29
    b304:	cf 91       	pop	r28
    b306:	1f 91       	pop	r17
    b308:	0f 91       	pop	r16
    b30a:	ff 90       	pop	r15
    b30c:	ef 90       	pop	r14
    b30e:	df 90       	pop	r13
    b310:	cf 90       	pop	r12
    b312:	bf 90       	pop	r11
    b314:	af 90       	pop	r10
    b316:	9f 90       	pop	r9
    b318:	8f 90       	pop	r8
    b31a:	7f 90       	pop	r7
    b31c:	6f 90       	pop	r6
    b31e:	5f 90       	pop	r5
    b320:	4f 90       	pop	r4
    b322:	3f 90       	pop	r3
    b324:	2f 90       	pop	r2
    b326:	08 95       	ret

0000b328 <__udivmodsi4>:
    b328:	a1 e2       	ldi	r26, 0x21	; 33
    b32a:	1a 2e       	mov	r1, r26
    b32c:	aa 1b       	sub	r26, r26
    b32e:	bb 1b       	sub	r27, r27
    b330:	fd 01       	movw	r30, r26
    b332:	0d c0       	rjmp	.+26     	; 0xb34e <__udivmodsi4_ep>

0000b334 <__udivmodsi4_loop>:
    b334:	aa 1f       	adc	r26, r26
    b336:	bb 1f       	adc	r27, r27
    b338:	ee 1f       	adc	r30, r30
    b33a:	ff 1f       	adc	r31, r31
    b33c:	a2 17       	cp	r26, r18
    b33e:	b3 07       	cpc	r27, r19
    b340:	e4 07       	cpc	r30, r20
    b342:	f5 07       	cpc	r31, r21
    b344:	20 f0       	brcs	.+8      	; 0xb34e <__udivmodsi4_ep>
    b346:	a2 1b       	sub	r26, r18
    b348:	b3 0b       	sbc	r27, r19
    b34a:	e4 0b       	sbc	r30, r20
    b34c:	f5 0b       	sbc	r31, r21

0000b34e <__udivmodsi4_ep>:
    b34e:	66 1f       	adc	r22, r22
    b350:	77 1f       	adc	r23, r23
    b352:	88 1f       	adc	r24, r24
    b354:	99 1f       	adc	r25, r25
    b356:	1a 94       	dec	r1
    b358:	69 f7       	brne	.-38     	; 0xb334 <__udivmodsi4_loop>
    b35a:	60 95       	com	r22
    b35c:	70 95       	com	r23
    b35e:	80 95       	com	r24
    b360:	90 95       	com	r25
    b362:	9b 01       	movw	r18, r22
    b364:	ac 01       	movw	r20, r24
    b366:	bd 01       	movw	r22, r26
    b368:	cf 01       	movw	r24, r30
    b36a:	08 95       	ret

0000b36c <__tablejump2__>:
    b36c:	ee 0f       	add	r30, r30
    b36e:	ff 1f       	adc	r31, r31
    b370:	88 1f       	adc	r24, r24
    b372:	8b bf       	out	0x3b, r24	; 59
    b374:	07 90       	elpm	r0, Z+
    b376:	f6 91       	elpm	r31, Z
    b378:	e0 2d       	mov	r30, r0
    b37a:	19 94       	eijmp

0000b37c <__umulhisi3>:
    b37c:	a2 9f       	mul	r26, r18
    b37e:	b0 01       	movw	r22, r0
    b380:	b3 9f       	mul	r27, r19
    b382:	c0 01       	movw	r24, r0
    b384:	a3 9f       	mul	r26, r19
    b386:	70 0d       	add	r23, r0
    b388:	81 1d       	adc	r24, r1
    b38a:	11 24       	eor	r1, r1
    b38c:	91 1d       	adc	r25, r1
    b38e:	b2 9f       	mul	r27, r18
    b390:	70 0d       	add	r23, r0
    b392:	81 1d       	adc	r24, r1
    b394:	11 24       	eor	r1, r1
    b396:	91 1d       	adc	r25, r1
    b398:	08 95       	ret

0000b39a <malloc>:
    b39a:	0f 93       	push	r16
    b39c:	1f 93       	push	r17
    b39e:	cf 93       	push	r28
    b3a0:	df 93       	push	r29
    b3a2:	82 30       	cpi	r24, 0x02	; 2
    b3a4:	91 05       	cpc	r25, r1
    b3a6:	10 f4       	brcc	.+4      	; 0xb3ac <malloc+0x12>
    b3a8:	82 e0       	ldi	r24, 0x02	; 2
    b3aa:	90 e0       	ldi	r25, 0x00	; 0
    b3ac:	e0 91 a9 0a 	lds	r30, 0x0AA9	; 0x800aa9 <__flp>
    b3b0:	f0 91 aa 0a 	lds	r31, 0x0AAA	; 0x800aaa <__flp+0x1>
    b3b4:	20 e0       	ldi	r18, 0x00	; 0
    b3b6:	30 e0       	ldi	r19, 0x00	; 0
    b3b8:	a0 e0       	ldi	r26, 0x00	; 0
    b3ba:	b0 e0       	ldi	r27, 0x00	; 0
    b3bc:	30 97       	sbiw	r30, 0x00	; 0
    b3be:	19 f1       	breq	.+70     	; 0xb406 <malloc+0x6c>
    b3c0:	40 81       	ld	r20, Z
    b3c2:	51 81       	ldd	r21, Z+1	; 0x01
    b3c4:	02 81       	ldd	r16, Z+2	; 0x02
    b3c6:	13 81       	ldd	r17, Z+3	; 0x03
    b3c8:	48 17       	cp	r20, r24
    b3ca:	59 07       	cpc	r21, r25
    b3cc:	c8 f0       	brcs	.+50     	; 0xb400 <malloc+0x66>
    b3ce:	84 17       	cp	r24, r20
    b3d0:	95 07       	cpc	r25, r21
    b3d2:	69 f4       	brne	.+26     	; 0xb3ee <malloc+0x54>
    b3d4:	10 97       	sbiw	r26, 0x00	; 0
    b3d6:	31 f0       	breq	.+12     	; 0xb3e4 <malloc+0x4a>
    b3d8:	12 96       	adiw	r26, 0x02	; 2
    b3da:	0c 93       	st	X, r16
    b3dc:	12 97       	sbiw	r26, 0x02	; 2
    b3de:	13 96       	adiw	r26, 0x03	; 3
    b3e0:	1c 93       	st	X, r17
    b3e2:	27 c0       	rjmp	.+78     	; 0xb432 <malloc+0x98>
    b3e4:	00 93 a9 0a 	sts	0x0AA9, r16	; 0x800aa9 <__flp>
    b3e8:	10 93 aa 0a 	sts	0x0AAA, r17	; 0x800aaa <__flp+0x1>
    b3ec:	22 c0       	rjmp	.+68     	; 0xb432 <malloc+0x98>
    b3ee:	21 15       	cp	r18, r1
    b3f0:	31 05       	cpc	r19, r1
    b3f2:	19 f0       	breq	.+6      	; 0xb3fa <malloc+0x60>
    b3f4:	42 17       	cp	r20, r18
    b3f6:	53 07       	cpc	r21, r19
    b3f8:	18 f4       	brcc	.+6      	; 0xb400 <malloc+0x66>
    b3fa:	9a 01       	movw	r18, r20
    b3fc:	bd 01       	movw	r22, r26
    b3fe:	ef 01       	movw	r28, r30
    b400:	df 01       	movw	r26, r30
    b402:	f8 01       	movw	r30, r16
    b404:	db cf       	rjmp	.-74     	; 0xb3bc <malloc+0x22>
    b406:	21 15       	cp	r18, r1
    b408:	31 05       	cpc	r19, r1
    b40a:	f9 f0       	breq	.+62     	; 0xb44a <malloc+0xb0>
    b40c:	28 1b       	sub	r18, r24
    b40e:	39 0b       	sbc	r19, r25
    b410:	24 30       	cpi	r18, 0x04	; 4
    b412:	31 05       	cpc	r19, r1
    b414:	80 f4       	brcc	.+32     	; 0xb436 <malloc+0x9c>
    b416:	8a 81       	ldd	r24, Y+2	; 0x02
    b418:	9b 81       	ldd	r25, Y+3	; 0x03
    b41a:	61 15       	cp	r22, r1
    b41c:	71 05       	cpc	r23, r1
    b41e:	21 f0       	breq	.+8      	; 0xb428 <malloc+0x8e>
    b420:	fb 01       	movw	r30, r22
    b422:	93 83       	std	Z+3, r25	; 0x03
    b424:	82 83       	std	Z+2, r24	; 0x02
    b426:	04 c0       	rjmp	.+8      	; 0xb430 <malloc+0x96>
    b428:	90 93 aa 0a 	sts	0x0AAA, r25	; 0x800aaa <__flp+0x1>
    b42c:	80 93 a9 0a 	sts	0x0AA9, r24	; 0x800aa9 <__flp>
    b430:	fe 01       	movw	r30, r28
    b432:	32 96       	adiw	r30, 0x02	; 2
    b434:	44 c0       	rjmp	.+136    	; 0xb4be <malloc+0x124>
    b436:	fe 01       	movw	r30, r28
    b438:	e2 0f       	add	r30, r18
    b43a:	f3 1f       	adc	r31, r19
    b43c:	81 93       	st	Z+, r24
    b43e:	91 93       	st	Z+, r25
    b440:	22 50       	subi	r18, 0x02	; 2
    b442:	31 09       	sbc	r19, r1
    b444:	39 83       	std	Y+1, r19	; 0x01
    b446:	28 83       	st	Y, r18
    b448:	3a c0       	rjmp	.+116    	; 0xb4be <malloc+0x124>
    b44a:	20 91 a7 0a 	lds	r18, 0x0AA7	; 0x800aa7 <__brkval>
    b44e:	30 91 a8 0a 	lds	r19, 0x0AA8	; 0x800aa8 <__brkval+0x1>
    b452:	23 2b       	or	r18, r19
    b454:	41 f4       	brne	.+16     	; 0xb466 <malloc+0xcc>
    b456:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    b45a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    b45e:	30 93 a8 0a 	sts	0x0AA8, r19	; 0x800aa8 <__brkval+0x1>
    b462:	20 93 a7 0a 	sts	0x0AA7, r18	; 0x800aa7 <__brkval>
    b466:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    b46a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    b46e:	21 15       	cp	r18, r1
    b470:	31 05       	cpc	r19, r1
    b472:	41 f4       	brne	.+16     	; 0xb484 <malloc+0xea>
    b474:	2d b7       	in	r18, 0x3d	; 61
    b476:	3e b7       	in	r19, 0x3e	; 62
    b478:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    b47c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    b480:	24 1b       	sub	r18, r20
    b482:	35 0b       	sbc	r19, r21
    b484:	e0 91 a7 0a 	lds	r30, 0x0AA7	; 0x800aa7 <__brkval>
    b488:	f0 91 a8 0a 	lds	r31, 0x0AA8	; 0x800aa8 <__brkval+0x1>
    b48c:	e2 17       	cp	r30, r18
    b48e:	f3 07       	cpc	r31, r19
    b490:	a0 f4       	brcc	.+40     	; 0xb4ba <malloc+0x120>
    b492:	2e 1b       	sub	r18, r30
    b494:	3f 0b       	sbc	r19, r31
    b496:	28 17       	cp	r18, r24
    b498:	39 07       	cpc	r19, r25
    b49a:	78 f0       	brcs	.+30     	; 0xb4ba <malloc+0x120>
    b49c:	ac 01       	movw	r20, r24
    b49e:	4e 5f       	subi	r20, 0xFE	; 254
    b4a0:	5f 4f       	sbci	r21, 0xFF	; 255
    b4a2:	24 17       	cp	r18, r20
    b4a4:	35 07       	cpc	r19, r21
    b4a6:	48 f0       	brcs	.+18     	; 0xb4ba <malloc+0x120>
    b4a8:	4e 0f       	add	r20, r30
    b4aa:	5f 1f       	adc	r21, r31
    b4ac:	50 93 a8 0a 	sts	0x0AA8, r21	; 0x800aa8 <__brkval+0x1>
    b4b0:	40 93 a7 0a 	sts	0x0AA7, r20	; 0x800aa7 <__brkval>
    b4b4:	81 93       	st	Z+, r24
    b4b6:	91 93       	st	Z+, r25
    b4b8:	02 c0       	rjmp	.+4      	; 0xb4be <malloc+0x124>
    b4ba:	e0 e0       	ldi	r30, 0x00	; 0
    b4bc:	f0 e0       	ldi	r31, 0x00	; 0
    b4be:	cf 01       	movw	r24, r30
    b4c0:	df 91       	pop	r29
    b4c2:	cf 91       	pop	r28
    b4c4:	1f 91       	pop	r17
    b4c6:	0f 91       	pop	r16
    b4c8:	08 95       	ret

0000b4ca <free>:
    b4ca:	cf 93       	push	r28
    b4cc:	df 93       	push	r29
    b4ce:	00 97       	sbiw	r24, 0x00	; 0
    b4d0:	09 f4       	brne	.+2      	; 0xb4d4 <free+0xa>
    b4d2:	81 c0       	rjmp	.+258    	; 0xb5d6 <free+0x10c>
    b4d4:	fc 01       	movw	r30, r24
    b4d6:	32 97       	sbiw	r30, 0x02	; 2
    b4d8:	13 82       	std	Z+3, r1	; 0x03
    b4da:	12 82       	std	Z+2, r1	; 0x02
    b4dc:	a0 91 a9 0a 	lds	r26, 0x0AA9	; 0x800aa9 <__flp>
    b4e0:	b0 91 aa 0a 	lds	r27, 0x0AAA	; 0x800aaa <__flp+0x1>
    b4e4:	10 97       	sbiw	r26, 0x00	; 0
    b4e6:	81 f4       	brne	.+32     	; 0xb508 <free+0x3e>
    b4e8:	20 81       	ld	r18, Z
    b4ea:	31 81       	ldd	r19, Z+1	; 0x01
    b4ec:	82 0f       	add	r24, r18
    b4ee:	93 1f       	adc	r25, r19
    b4f0:	20 91 a7 0a 	lds	r18, 0x0AA7	; 0x800aa7 <__brkval>
    b4f4:	30 91 a8 0a 	lds	r19, 0x0AA8	; 0x800aa8 <__brkval+0x1>
    b4f8:	28 17       	cp	r18, r24
    b4fa:	39 07       	cpc	r19, r25
    b4fc:	51 f5       	brne	.+84     	; 0xb552 <free+0x88>
    b4fe:	f0 93 a8 0a 	sts	0x0AA8, r31	; 0x800aa8 <__brkval+0x1>
    b502:	e0 93 a7 0a 	sts	0x0AA7, r30	; 0x800aa7 <__brkval>
    b506:	67 c0       	rjmp	.+206    	; 0xb5d6 <free+0x10c>
    b508:	ed 01       	movw	r28, r26
    b50a:	20 e0       	ldi	r18, 0x00	; 0
    b50c:	30 e0       	ldi	r19, 0x00	; 0
    b50e:	ce 17       	cp	r28, r30
    b510:	df 07       	cpc	r29, r31
    b512:	40 f4       	brcc	.+16     	; 0xb524 <free+0x5a>
    b514:	4a 81       	ldd	r20, Y+2	; 0x02
    b516:	5b 81       	ldd	r21, Y+3	; 0x03
    b518:	9e 01       	movw	r18, r28
    b51a:	41 15       	cp	r20, r1
    b51c:	51 05       	cpc	r21, r1
    b51e:	f1 f0       	breq	.+60     	; 0xb55c <free+0x92>
    b520:	ea 01       	movw	r28, r20
    b522:	f5 cf       	rjmp	.-22     	; 0xb50e <free+0x44>
    b524:	d3 83       	std	Z+3, r29	; 0x03
    b526:	c2 83       	std	Z+2, r28	; 0x02
    b528:	40 81       	ld	r20, Z
    b52a:	51 81       	ldd	r21, Z+1	; 0x01
    b52c:	84 0f       	add	r24, r20
    b52e:	95 1f       	adc	r25, r21
    b530:	c8 17       	cp	r28, r24
    b532:	d9 07       	cpc	r29, r25
    b534:	59 f4       	brne	.+22     	; 0xb54c <free+0x82>
    b536:	88 81       	ld	r24, Y
    b538:	99 81       	ldd	r25, Y+1	; 0x01
    b53a:	84 0f       	add	r24, r20
    b53c:	95 1f       	adc	r25, r21
    b53e:	02 96       	adiw	r24, 0x02	; 2
    b540:	91 83       	std	Z+1, r25	; 0x01
    b542:	80 83       	st	Z, r24
    b544:	8a 81       	ldd	r24, Y+2	; 0x02
    b546:	9b 81       	ldd	r25, Y+3	; 0x03
    b548:	93 83       	std	Z+3, r25	; 0x03
    b54a:	82 83       	std	Z+2, r24	; 0x02
    b54c:	21 15       	cp	r18, r1
    b54e:	31 05       	cpc	r19, r1
    b550:	29 f4       	brne	.+10     	; 0xb55c <free+0x92>
    b552:	f0 93 aa 0a 	sts	0x0AAA, r31	; 0x800aaa <__flp+0x1>
    b556:	e0 93 a9 0a 	sts	0x0AA9, r30	; 0x800aa9 <__flp>
    b55a:	3d c0       	rjmp	.+122    	; 0xb5d6 <free+0x10c>
    b55c:	e9 01       	movw	r28, r18
    b55e:	fb 83       	std	Y+3, r31	; 0x03
    b560:	ea 83       	std	Y+2, r30	; 0x02
    b562:	49 91       	ld	r20, Y+
    b564:	59 91       	ld	r21, Y+
    b566:	c4 0f       	add	r28, r20
    b568:	d5 1f       	adc	r29, r21
    b56a:	ec 17       	cp	r30, r28
    b56c:	fd 07       	cpc	r31, r29
    b56e:	61 f4       	brne	.+24     	; 0xb588 <free+0xbe>
    b570:	80 81       	ld	r24, Z
    b572:	91 81       	ldd	r25, Z+1	; 0x01
    b574:	84 0f       	add	r24, r20
    b576:	95 1f       	adc	r25, r21
    b578:	02 96       	adiw	r24, 0x02	; 2
    b57a:	e9 01       	movw	r28, r18
    b57c:	99 83       	std	Y+1, r25	; 0x01
    b57e:	88 83       	st	Y, r24
    b580:	82 81       	ldd	r24, Z+2	; 0x02
    b582:	93 81       	ldd	r25, Z+3	; 0x03
    b584:	9b 83       	std	Y+3, r25	; 0x03
    b586:	8a 83       	std	Y+2, r24	; 0x02
    b588:	e0 e0       	ldi	r30, 0x00	; 0
    b58a:	f0 e0       	ldi	r31, 0x00	; 0
    b58c:	12 96       	adiw	r26, 0x02	; 2
    b58e:	8d 91       	ld	r24, X+
    b590:	9c 91       	ld	r25, X
    b592:	13 97       	sbiw	r26, 0x03	; 3
    b594:	00 97       	sbiw	r24, 0x00	; 0
    b596:	19 f0       	breq	.+6      	; 0xb59e <free+0xd4>
    b598:	fd 01       	movw	r30, r26
    b59a:	dc 01       	movw	r26, r24
    b59c:	f7 cf       	rjmp	.-18     	; 0xb58c <free+0xc2>
    b59e:	8d 91       	ld	r24, X+
    b5a0:	9c 91       	ld	r25, X
    b5a2:	11 97       	sbiw	r26, 0x01	; 1
    b5a4:	9d 01       	movw	r18, r26
    b5a6:	2e 5f       	subi	r18, 0xFE	; 254
    b5a8:	3f 4f       	sbci	r19, 0xFF	; 255
    b5aa:	82 0f       	add	r24, r18
    b5ac:	93 1f       	adc	r25, r19
    b5ae:	20 91 a7 0a 	lds	r18, 0x0AA7	; 0x800aa7 <__brkval>
    b5b2:	30 91 a8 0a 	lds	r19, 0x0AA8	; 0x800aa8 <__brkval+0x1>
    b5b6:	28 17       	cp	r18, r24
    b5b8:	39 07       	cpc	r19, r25
    b5ba:	69 f4       	brne	.+26     	; 0xb5d6 <free+0x10c>
    b5bc:	30 97       	sbiw	r30, 0x00	; 0
    b5be:	29 f4       	brne	.+10     	; 0xb5ca <free+0x100>
    b5c0:	10 92 aa 0a 	sts	0x0AAA, r1	; 0x800aaa <__flp+0x1>
    b5c4:	10 92 a9 0a 	sts	0x0AA9, r1	; 0x800aa9 <__flp>
    b5c8:	02 c0       	rjmp	.+4      	; 0xb5ce <free+0x104>
    b5ca:	13 82       	std	Z+3, r1	; 0x03
    b5cc:	12 82       	std	Z+2, r1	; 0x02
    b5ce:	b0 93 a8 0a 	sts	0x0AA8, r27	; 0x800aa8 <__brkval+0x1>
    b5d2:	a0 93 a7 0a 	sts	0x0AA7, r26	; 0x800aa7 <__brkval>
    b5d6:	df 91       	pop	r29
    b5d8:	cf 91       	pop	r28
    b5da:	08 95       	ret

0000b5dc <__ftoa_engine>:
    b5dc:	28 30       	cpi	r18, 0x08	; 8
    b5de:	08 f0       	brcs	.+2      	; 0xb5e2 <__ftoa_engine+0x6>
    b5e0:	27 e0       	ldi	r18, 0x07	; 7
    b5e2:	33 27       	eor	r19, r19
    b5e4:	da 01       	movw	r26, r20
    b5e6:	99 0f       	add	r25, r25
    b5e8:	31 1d       	adc	r19, r1
    b5ea:	87 fd       	sbrc	r24, 7
    b5ec:	91 60       	ori	r25, 0x01	; 1
    b5ee:	00 96       	adiw	r24, 0x00	; 0
    b5f0:	61 05       	cpc	r22, r1
    b5f2:	71 05       	cpc	r23, r1
    b5f4:	39 f4       	brne	.+14     	; 0xb604 <__ftoa_engine+0x28>
    b5f6:	32 60       	ori	r19, 0x02	; 2
    b5f8:	2e 5f       	subi	r18, 0xFE	; 254
    b5fa:	3d 93       	st	X+, r19
    b5fc:	30 e3       	ldi	r19, 0x30	; 48
    b5fe:	2a 95       	dec	r18
    b600:	e1 f7       	brne	.-8      	; 0xb5fa <__ftoa_engine+0x1e>
    b602:	08 95       	ret
    b604:	9f 3f       	cpi	r25, 0xFF	; 255
    b606:	30 f0       	brcs	.+12     	; 0xb614 <__ftoa_engine+0x38>
    b608:	80 38       	cpi	r24, 0x80	; 128
    b60a:	71 05       	cpc	r23, r1
    b60c:	61 05       	cpc	r22, r1
    b60e:	09 f0       	breq	.+2      	; 0xb612 <__ftoa_engine+0x36>
    b610:	3c 5f       	subi	r19, 0xFC	; 252
    b612:	3c 5f       	subi	r19, 0xFC	; 252
    b614:	3d 93       	st	X+, r19
    b616:	91 30       	cpi	r25, 0x01	; 1
    b618:	08 f0       	brcs	.+2      	; 0xb61c <__ftoa_engine+0x40>
    b61a:	80 68       	ori	r24, 0x80	; 128
    b61c:	91 1d       	adc	r25, r1
    b61e:	df 93       	push	r29
    b620:	cf 93       	push	r28
    b622:	1f 93       	push	r17
    b624:	0f 93       	push	r16
    b626:	ff 92       	push	r15
    b628:	ef 92       	push	r14
    b62a:	19 2f       	mov	r17, r25
    b62c:	98 7f       	andi	r25, 0xF8	; 248
    b62e:	96 95       	lsr	r25
    b630:	e9 2f       	mov	r30, r25
    b632:	96 95       	lsr	r25
    b634:	96 95       	lsr	r25
    b636:	e9 0f       	add	r30, r25
    b638:	ff 27       	eor	r31, r31
    b63a:	e0 5b       	subi	r30, 0xB0	; 176
    b63c:	f6 4f       	sbci	r31, 0xF6	; 246
    b63e:	99 27       	eor	r25, r25
    b640:	33 27       	eor	r19, r19
    b642:	ee 24       	eor	r14, r14
    b644:	ff 24       	eor	r15, r15
    b646:	a7 01       	movw	r20, r14
    b648:	e7 01       	movw	r28, r14
    b64a:	05 90       	lpm	r0, Z+
    b64c:	08 94       	sec
    b64e:	07 94       	ror	r0
    b650:	28 f4       	brcc	.+10     	; 0xb65c <__ftoa_engine+0x80>
    b652:	36 0f       	add	r19, r22
    b654:	e7 1e       	adc	r14, r23
    b656:	f8 1e       	adc	r15, r24
    b658:	49 1f       	adc	r20, r25
    b65a:	51 1d       	adc	r21, r1
    b65c:	66 0f       	add	r22, r22
    b65e:	77 1f       	adc	r23, r23
    b660:	88 1f       	adc	r24, r24
    b662:	99 1f       	adc	r25, r25
    b664:	06 94       	lsr	r0
    b666:	a1 f7       	brne	.-24     	; 0xb650 <__ftoa_engine+0x74>
    b668:	05 90       	lpm	r0, Z+
    b66a:	07 94       	ror	r0
    b66c:	28 f4       	brcc	.+10     	; 0xb678 <__ftoa_engine+0x9c>
    b66e:	e7 0e       	add	r14, r23
    b670:	f8 1e       	adc	r15, r24
    b672:	49 1f       	adc	r20, r25
    b674:	56 1f       	adc	r21, r22
    b676:	c1 1d       	adc	r28, r1
    b678:	77 0f       	add	r23, r23
    b67a:	88 1f       	adc	r24, r24
    b67c:	99 1f       	adc	r25, r25
    b67e:	66 1f       	adc	r22, r22
    b680:	06 94       	lsr	r0
    b682:	a1 f7       	brne	.-24     	; 0xb66c <__ftoa_engine+0x90>
    b684:	05 90       	lpm	r0, Z+
    b686:	07 94       	ror	r0
    b688:	28 f4       	brcc	.+10     	; 0xb694 <__ftoa_engine+0xb8>
    b68a:	f8 0e       	add	r15, r24
    b68c:	49 1f       	adc	r20, r25
    b68e:	56 1f       	adc	r21, r22
    b690:	c7 1f       	adc	r28, r23
    b692:	d1 1d       	adc	r29, r1
    b694:	88 0f       	add	r24, r24
    b696:	99 1f       	adc	r25, r25
    b698:	66 1f       	adc	r22, r22
    b69a:	77 1f       	adc	r23, r23
    b69c:	06 94       	lsr	r0
    b69e:	a1 f7       	brne	.-24     	; 0xb688 <__ftoa_engine+0xac>
    b6a0:	05 90       	lpm	r0, Z+
    b6a2:	07 94       	ror	r0
    b6a4:	20 f4       	brcc	.+8      	; 0xb6ae <__ftoa_engine+0xd2>
    b6a6:	49 0f       	add	r20, r25
    b6a8:	56 1f       	adc	r21, r22
    b6aa:	c7 1f       	adc	r28, r23
    b6ac:	d8 1f       	adc	r29, r24
    b6ae:	99 0f       	add	r25, r25
    b6b0:	66 1f       	adc	r22, r22
    b6b2:	77 1f       	adc	r23, r23
    b6b4:	88 1f       	adc	r24, r24
    b6b6:	06 94       	lsr	r0
    b6b8:	a9 f7       	brne	.-22     	; 0xb6a4 <__ftoa_engine+0xc8>
    b6ba:	84 91       	lpm	r24, Z
    b6bc:	10 95       	com	r17
    b6be:	17 70       	andi	r17, 0x07	; 7
    b6c0:	41 f0       	breq	.+16     	; 0xb6d2 <__ftoa_engine+0xf6>
    b6c2:	d6 95       	lsr	r29
    b6c4:	c7 95       	ror	r28
    b6c6:	57 95       	ror	r21
    b6c8:	47 95       	ror	r20
    b6ca:	f7 94       	ror	r15
    b6cc:	e7 94       	ror	r14
    b6ce:	1a 95       	dec	r17
    b6d0:	c1 f7       	brne	.-16     	; 0xb6c2 <__ftoa_engine+0xe6>
    b6d2:	e6 ef       	ldi	r30, 0xF6	; 246
    b6d4:	f8 e0       	ldi	r31, 0x08	; 8
    b6d6:	68 94       	set
    b6d8:	15 90       	lpm	r1, Z+
    b6da:	15 91       	lpm	r17, Z+
    b6dc:	35 91       	lpm	r19, Z+
    b6de:	65 91       	lpm	r22, Z+
    b6e0:	95 91       	lpm	r25, Z+
    b6e2:	05 90       	lpm	r0, Z+
    b6e4:	7f e2       	ldi	r23, 0x2F	; 47
    b6e6:	73 95       	inc	r23
    b6e8:	e1 18       	sub	r14, r1
    b6ea:	f1 0a       	sbc	r15, r17
    b6ec:	43 0b       	sbc	r20, r19
    b6ee:	56 0b       	sbc	r21, r22
    b6f0:	c9 0b       	sbc	r28, r25
    b6f2:	d0 09       	sbc	r29, r0
    b6f4:	c0 f7       	brcc	.-16     	; 0xb6e6 <__ftoa_engine+0x10a>
    b6f6:	e1 0c       	add	r14, r1
    b6f8:	f1 1e       	adc	r15, r17
    b6fa:	43 1f       	adc	r20, r19
    b6fc:	56 1f       	adc	r21, r22
    b6fe:	c9 1f       	adc	r28, r25
    b700:	d0 1d       	adc	r29, r0
    b702:	7e f4       	brtc	.+30     	; 0xb722 <__ftoa_engine+0x146>
    b704:	70 33       	cpi	r23, 0x30	; 48
    b706:	11 f4       	brne	.+4      	; 0xb70c <__ftoa_engine+0x130>
    b708:	8a 95       	dec	r24
    b70a:	e6 cf       	rjmp	.-52     	; 0xb6d8 <__ftoa_engine+0xfc>
    b70c:	e8 94       	clt
    b70e:	01 50       	subi	r16, 0x01	; 1
    b710:	30 f0       	brcs	.+12     	; 0xb71e <__ftoa_engine+0x142>
    b712:	08 0f       	add	r16, r24
    b714:	0a f4       	brpl	.+2      	; 0xb718 <__ftoa_engine+0x13c>
    b716:	00 27       	eor	r16, r16
    b718:	02 17       	cp	r16, r18
    b71a:	08 f4       	brcc	.+2      	; 0xb71e <__ftoa_engine+0x142>
    b71c:	20 2f       	mov	r18, r16
    b71e:	23 95       	inc	r18
    b720:	02 2f       	mov	r16, r18
    b722:	7a 33       	cpi	r23, 0x3A	; 58
    b724:	28 f0       	brcs	.+10     	; 0xb730 <__ftoa_engine+0x154>
    b726:	79 e3       	ldi	r23, 0x39	; 57
    b728:	7d 93       	st	X+, r23
    b72a:	2a 95       	dec	r18
    b72c:	e9 f7       	brne	.-6      	; 0xb728 <__ftoa_engine+0x14c>
    b72e:	10 c0       	rjmp	.+32     	; 0xb750 <__ftoa_engine+0x174>
    b730:	7d 93       	st	X+, r23
    b732:	2a 95       	dec	r18
    b734:	89 f6       	brne	.-94     	; 0xb6d8 <__ftoa_engine+0xfc>
    b736:	06 94       	lsr	r0
    b738:	97 95       	ror	r25
    b73a:	67 95       	ror	r22
    b73c:	37 95       	ror	r19
    b73e:	17 95       	ror	r17
    b740:	17 94       	ror	r1
    b742:	e1 18       	sub	r14, r1
    b744:	f1 0a       	sbc	r15, r17
    b746:	43 0b       	sbc	r20, r19
    b748:	56 0b       	sbc	r21, r22
    b74a:	c9 0b       	sbc	r28, r25
    b74c:	d0 09       	sbc	r29, r0
    b74e:	98 f0       	brcs	.+38     	; 0xb776 <__ftoa_engine+0x19a>
    b750:	23 95       	inc	r18
    b752:	7e 91       	ld	r23, -X
    b754:	73 95       	inc	r23
    b756:	7a 33       	cpi	r23, 0x3A	; 58
    b758:	08 f0       	brcs	.+2      	; 0xb75c <__ftoa_engine+0x180>
    b75a:	70 e3       	ldi	r23, 0x30	; 48
    b75c:	7c 93       	st	X, r23
    b75e:	20 13       	cpse	r18, r16
    b760:	b8 f7       	brcc	.-18     	; 0xb750 <__ftoa_engine+0x174>
    b762:	7e 91       	ld	r23, -X
    b764:	70 61       	ori	r23, 0x10	; 16
    b766:	7d 93       	st	X+, r23
    b768:	30 f0       	brcs	.+12     	; 0xb776 <__ftoa_engine+0x19a>
    b76a:	83 95       	inc	r24
    b76c:	71 e3       	ldi	r23, 0x31	; 49
    b76e:	7d 93       	st	X+, r23
    b770:	70 e3       	ldi	r23, 0x30	; 48
    b772:	2a 95       	dec	r18
    b774:	e1 f7       	brne	.-8      	; 0xb76e <__ftoa_engine+0x192>
    b776:	11 24       	eor	r1, r1
    b778:	ef 90       	pop	r14
    b77a:	ff 90       	pop	r15
    b77c:	0f 91       	pop	r16
    b77e:	1f 91       	pop	r17
    b780:	cf 91       	pop	r28
    b782:	df 91       	pop	r29
    b784:	99 27       	eor	r25, r25
    b786:	87 fd       	sbrc	r24, 7
    b788:	90 95       	com	r25
    b78a:	08 95       	ret

0000b78c <strnlen_P>:
    b78c:	fc 01       	movw	r30, r24
    b78e:	05 90       	lpm	r0, Z+
    b790:	61 50       	subi	r22, 0x01	; 1
    b792:	70 40       	sbci	r23, 0x00	; 0
    b794:	01 10       	cpse	r0, r1
    b796:	d8 f7       	brcc	.-10     	; 0xb78e <strnlen_P+0x2>
    b798:	80 95       	com	r24
    b79a:	90 95       	com	r25
    b79c:	8e 0f       	add	r24, r30
    b79e:	9f 1f       	adc	r25, r31
    b7a0:	08 95       	ret

0000b7a2 <memcpy>:
    b7a2:	fb 01       	movw	r30, r22
    b7a4:	dc 01       	movw	r26, r24
    b7a6:	02 c0       	rjmp	.+4      	; 0xb7ac <memcpy+0xa>
    b7a8:	01 90       	ld	r0, Z+
    b7aa:	0d 92       	st	X+, r0
    b7ac:	41 50       	subi	r20, 0x01	; 1
    b7ae:	50 40       	sbci	r21, 0x00	; 0
    b7b0:	d8 f7       	brcc	.-10     	; 0xb7a8 <memcpy+0x6>
    b7b2:	08 95       	ret

0000b7b4 <memset>:
    b7b4:	dc 01       	movw	r26, r24
    b7b6:	01 c0       	rjmp	.+2      	; 0xb7ba <memset+0x6>
    b7b8:	6d 93       	st	X+, r22
    b7ba:	41 50       	subi	r20, 0x01	; 1
    b7bc:	50 40       	sbci	r21, 0x00	; 0
    b7be:	e0 f7       	brcc	.-8      	; 0xb7b8 <memset+0x4>
    b7c0:	08 95       	ret

0000b7c2 <strnlen>:
    b7c2:	fc 01       	movw	r30, r24
    b7c4:	61 50       	subi	r22, 0x01	; 1
    b7c6:	70 40       	sbci	r23, 0x00	; 0
    b7c8:	01 90       	ld	r0, Z+
    b7ca:	01 10       	cpse	r0, r1
    b7cc:	d8 f7       	brcc	.-10     	; 0xb7c4 <strnlen+0x2>
    b7ce:	80 95       	com	r24
    b7d0:	90 95       	com	r25
    b7d2:	8e 0f       	add	r24, r30
    b7d4:	9f 1f       	adc	r25, r31
    b7d6:	08 95       	ret

0000b7d8 <fputc>:
    b7d8:	0f 93       	push	r16
    b7da:	1f 93       	push	r17
    b7dc:	cf 93       	push	r28
    b7de:	df 93       	push	r29
    b7e0:	fb 01       	movw	r30, r22
    b7e2:	23 81       	ldd	r18, Z+3	; 0x03
    b7e4:	21 fd       	sbrc	r18, 1
    b7e6:	03 c0       	rjmp	.+6      	; 0xb7ee <fputc+0x16>
    b7e8:	8f ef       	ldi	r24, 0xFF	; 255
    b7ea:	9f ef       	ldi	r25, 0xFF	; 255
    b7ec:	2c c0       	rjmp	.+88     	; 0xb846 <fputc+0x6e>
    b7ee:	22 ff       	sbrs	r18, 2
    b7f0:	16 c0       	rjmp	.+44     	; 0xb81e <fputc+0x46>
    b7f2:	46 81       	ldd	r20, Z+6	; 0x06
    b7f4:	57 81       	ldd	r21, Z+7	; 0x07
    b7f6:	24 81       	ldd	r18, Z+4	; 0x04
    b7f8:	35 81       	ldd	r19, Z+5	; 0x05
    b7fa:	42 17       	cp	r20, r18
    b7fc:	53 07       	cpc	r21, r19
    b7fe:	44 f4       	brge	.+16     	; 0xb810 <fputc+0x38>
    b800:	a0 81       	ld	r26, Z
    b802:	b1 81       	ldd	r27, Z+1	; 0x01
    b804:	9d 01       	movw	r18, r26
    b806:	2f 5f       	subi	r18, 0xFF	; 255
    b808:	3f 4f       	sbci	r19, 0xFF	; 255
    b80a:	31 83       	std	Z+1, r19	; 0x01
    b80c:	20 83       	st	Z, r18
    b80e:	8c 93       	st	X, r24
    b810:	26 81       	ldd	r18, Z+6	; 0x06
    b812:	37 81       	ldd	r19, Z+7	; 0x07
    b814:	2f 5f       	subi	r18, 0xFF	; 255
    b816:	3f 4f       	sbci	r19, 0xFF	; 255
    b818:	37 83       	std	Z+7, r19	; 0x07
    b81a:	26 83       	std	Z+6, r18	; 0x06
    b81c:	14 c0       	rjmp	.+40     	; 0xb846 <fputc+0x6e>
    b81e:	8b 01       	movw	r16, r22
    b820:	ec 01       	movw	r28, r24
    b822:	fb 01       	movw	r30, r22
    b824:	00 84       	ldd	r0, Z+8	; 0x08
    b826:	f1 85       	ldd	r31, Z+9	; 0x09
    b828:	e0 2d       	mov	r30, r0
    b82a:	19 95       	eicall
    b82c:	89 2b       	or	r24, r25
    b82e:	e1 f6       	brne	.-72     	; 0xb7e8 <fputc+0x10>
    b830:	d8 01       	movw	r26, r16
    b832:	16 96       	adiw	r26, 0x06	; 6
    b834:	8d 91       	ld	r24, X+
    b836:	9c 91       	ld	r25, X
    b838:	17 97       	sbiw	r26, 0x07	; 7
    b83a:	01 96       	adiw	r24, 0x01	; 1
    b83c:	17 96       	adiw	r26, 0x07	; 7
    b83e:	9c 93       	st	X, r25
    b840:	8e 93       	st	-X, r24
    b842:	16 97       	sbiw	r26, 0x06	; 6
    b844:	ce 01       	movw	r24, r28
    b846:	df 91       	pop	r29
    b848:	cf 91       	pop	r28
    b84a:	1f 91       	pop	r17
    b84c:	0f 91       	pop	r16
    b84e:	08 95       	ret

0000b850 <vsnprintf>:
    b850:	0f 93       	push	r16
    b852:	1f 93       	push	r17
    b854:	cf 93       	push	r28
    b856:	df 93       	push	r29
    b858:	cd b7       	in	r28, 0x3d	; 61
    b85a:	de b7       	in	r29, 0x3e	; 62
    b85c:	2e 97       	sbiw	r28, 0x0e	; 14
    b85e:	0f b6       	in	r0, 0x3f	; 63
    b860:	f8 94       	cli
    b862:	de bf       	out	0x3e, r29	; 62
    b864:	0f be       	out	0x3f, r0	; 63
    b866:	cd bf       	out	0x3d, r28	; 61
    b868:	8c 01       	movw	r16, r24
    b86a:	fa 01       	movw	r30, r20
    b86c:	86 e0       	ldi	r24, 0x06	; 6
    b86e:	8c 83       	std	Y+4, r24	; 0x04
    b870:	1a 83       	std	Y+2, r17	; 0x02
    b872:	09 83       	std	Y+1, r16	; 0x01
    b874:	77 ff       	sbrs	r23, 7
    b876:	02 c0       	rjmp	.+4      	; 0xb87c <vsnprintf+0x2c>
    b878:	60 e0       	ldi	r22, 0x00	; 0
    b87a:	70 e8       	ldi	r23, 0x80	; 128
    b87c:	cb 01       	movw	r24, r22
    b87e:	01 97       	sbiw	r24, 0x01	; 1
    b880:	9e 83       	std	Y+6, r25	; 0x06
    b882:	8d 83       	std	Y+5, r24	; 0x05
    b884:	a9 01       	movw	r20, r18
    b886:	bf 01       	movw	r22, r30
    b888:	ce 01       	movw	r24, r28
    b88a:	01 96       	adiw	r24, 0x01	; 1
    b88c:	c4 d9       	rcall	.-3192   	; 0xac16 <vfprintf>
    b88e:	4d 81       	ldd	r20, Y+5	; 0x05
    b890:	5e 81       	ldd	r21, Y+6	; 0x06
    b892:	57 fd       	sbrc	r21, 7
    b894:	0a c0       	rjmp	.+20     	; 0xb8aa <vsnprintf+0x5a>
    b896:	2f 81       	ldd	r18, Y+7	; 0x07
    b898:	38 85       	ldd	r19, Y+8	; 0x08
    b89a:	42 17       	cp	r20, r18
    b89c:	53 07       	cpc	r21, r19
    b89e:	0c f4       	brge	.+2      	; 0xb8a2 <vsnprintf+0x52>
    b8a0:	9a 01       	movw	r18, r20
    b8a2:	f8 01       	movw	r30, r16
    b8a4:	e2 0f       	add	r30, r18
    b8a6:	f3 1f       	adc	r31, r19
    b8a8:	10 82       	st	Z, r1
    b8aa:	2e 96       	adiw	r28, 0x0e	; 14
    b8ac:	0f b6       	in	r0, 0x3f	; 63
    b8ae:	f8 94       	cli
    b8b0:	de bf       	out	0x3e, r29	; 62
    b8b2:	0f be       	out	0x3f, r0	; 63
    b8b4:	cd bf       	out	0x3d, r28	; 61
    b8b6:	df 91       	pop	r29
    b8b8:	cf 91       	pop	r28
    b8ba:	1f 91       	pop	r17
    b8bc:	0f 91       	pop	r16
    b8be:	08 95       	ret

0000b8c0 <__ultoa_invert>:
    b8c0:	fa 01       	movw	r30, r20
    b8c2:	aa 27       	eor	r26, r26
    b8c4:	28 30       	cpi	r18, 0x08	; 8
    b8c6:	51 f1       	breq	.+84     	; 0xb91c <__ultoa_invert+0x5c>
    b8c8:	20 31       	cpi	r18, 0x10	; 16
    b8ca:	81 f1       	breq	.+96     	; 0xb92c <__ultoa_invert+0x6c>
    b8cc:	e8 94       	clt
    b8ce:	6f 93       	push	r22
    b8d0:	6e 7f       	andi	r22, 0xFE	; 254
    b8d2:	6e 5f       	subi	r22, 0xFE	; 254
    b8d4:	7f 4f       	sbci	r23, 0xFF	; 255
    b8d6:	8f 4f       	sbci	r24, 0xFF	; 255
    b8d8:	9f 4f       	sbci	r25, 0xFF	; 255
    b8da:	af 4f       	sbci	r26, 0xFF	; 255
    b8dc:	b1 e0       	ldi	r27, 0x01	; 1
    b8de:	3e d0       	rcall	.+124    	; 0xb95c <__ultoa_invert+0x9c>
    b8e0:	b4 e0       	ldi	r27, 0x04	; 4
    b8e2:	3c d0       	rcall	.+120    	; 0xb95c <__ultoa_invert+0x9c>
    b8e4:	67 0f       	add	r22, r23
    b8e6:	78 1f       	adc	r23, r24
    b8e8:	89 1f       	adc	r24, r25
    b8ea:	9a 1f       	adc	r25, r26
    b8ec:	a1 1d       	adc	r26, r1
    b8ee:	68 0f       	add	r22, r24
    b8f0:	79 1f       	adc	r23, r25
    b8f2:	8a 1f       	adc	r24, r26
    b8f4:	91 1d       	adc	r25, r1
    b8f6:	a1 1d       	adc	r26, r1
    b8f8:	6a 0f       	add	r22, r26
    b8fa:	71 1d       	adc	r23, r1
    b8fc:	81 1d       	adc	r24, r1
    b8fe:	91 1d       	adc	r25, r1
    b900:	a1 1d       	adc	r26, r1
    b902:	20 d0       	rcall	.+64     	; 0xb944 <__ultoa_invert+0x84>
    b904:	09 f4       	brne	.+2      	; 0xb908 <__ultoa_invert+0x48>
    b906:	68 94       	set
    b908:	3f 91       	pop	r19
    b90a:	2a e0       	ldi	r18, 0x0A	; 10
    b90c:	26 9f       	mul	r18, r22
    b90e:	11 24       	eor	r1, r1
    b910:	30 19       	sub	r19, r0
    b912:	30 5d       	subi	r19, 0xD0	; 208
    b914:	31 93       	st	Z+, r19
    b916:	de f6       	brtc	.-74     	; 0xb8ce <__ultoa_invert+0xe>
    b918:	cf 01       	movw	r24, r30
    b91a:	08 95       	ret
    b91c:	46 2f       	mov	r20, r22
    b91e:	47 70       	andi	r20, 0x07	; 7
    b920:	40 5d       	subi	r20, 0xD0	; 208
    b922:	41 93       	st	Z+, r20
    b924:	b3 e0       	ldi	r27, 0x03	; 3
    b926:	0f d0       	rcall	.+30     	; 0xb946 <__ultoa_invert+0x86>
    b928:	c9 f7       	brne	.-14     	; 0xb91c <__ultoa_invert+0x5c>
    b92a:	f6 cf       	rjmp	.-20     	; 0xb918 <__ultoa_invert+0x58>
    b92c:	46 2f       	mov	r20, r22
    b92e:	4f 70       	andi	r20, 0x0F	; 15
    b930:	40 5d       	subi	r20, 0xD0	; 208
    b932:	4a 33       	cpi	r20, 0x3A	; 58
    b934:	18 f0       	brcs	.+6      	; 0xb93c <__ultoa_invert+0x7c>
    b936:	49 5d       	subi	r20, 0xD9	; 217
    b938:	31 fd       	sbrc	r19, 1
    b93a:	40 52       	subi	r20, 0x20	; 32
    b93c:	41 93       	st	Z+, r20
    b93e:	02 d0       	rcall	.+4      	; 0xb944 <__ultoa_invert+0x84>
    b940:	a9 f7       	brne	.-22     	; 0xb92c <__ultoa_invert+0x6c>
    b942:	ea cf       	rjmp	.-44     	; 0xb918 <__ultoa_invert+0x58>
    b944:	b4 e0       	ldi	r27, 0x04	; 4
    b946:	a6 95       	lsr	r26
    b948:	97 95       	ror	r25
    b94a:	87 95       	ror	r24
    b94c:	77 95       	ror	r23
    b94e:	67 95       	ror	r22
    b950:	ba 95       	dec	r27
    b952:	c9 f7       	brne	.-14     	; 0xb946 <__ultoa_invert+0x86>
    b954:	00 97       	sbiw	r24, 0x00	; 0
    b956:	61 05       	cpc	r22, r1
    b958:	71 05       	cpc	r23, r1
    b95a:	08 95       	ret
    b95c:	9b 01       	movw	r18, r22
    b95e:	ac 01       	movw	r20, r24
    b960:	0a 2e       	mov	r0, r26
    b962:	06 94       	lsr	r0
    b964:	57 95       	ror	r21
    b966:	47 95       	ror	r20
    b968:	37 95       	ror	r19
    b96a:	27 95       	ror	r18
    b96c:	ba 95       	dec	r27
    b96e:	c9 f7       	brne	.-14     	; 0xb962 <__ultoa_invert+0xa2>
    b970:	62 0f       	add	r22, r18
    b972:	73 1f       	adc	r23, r19
    b974:	84 1f       	adc	r24, r20
    b976:	95 1f       	adc	r25, r21
    b978:	a0 1d       	adc	r26, r0
    b97a:	08 95       	ret

0000b97c <eeprom_read_block>:
    b97c:	dc 01       	movw	r26, r24
    b97e:	cb 01       	movw	r24, r22

0000b980 <eeprom_read_blraw>:
    b980:	fc 01       	movw	r30, r24
    b982:	f9 99       	sbic	0x1f, 1	; 31
    b984:	fe cf       	rjmp	.-4      	; 0xb982 <eeprom_read_blraw+0x2>
    b986:	06 c0       	rjmp	.+12     	; 0xb994 <eeprom_read_blraw+0x14>
    b988:	f2 bd       	out	0x22, r31	; 34
    b98a:	e1 bd       	out	0x21, r30	; 33
    b98c:	f8 9a       	sbi	0x1f, 0	; 31
    b98e:	31 96       	adiw	r30, 0x01	; 1
    b990:	00 b4       	in	r0, 0x20	; 32
    b992:	0d 92       	st	X+, r0
    b994:	41 50       	subi	r20, 0x01	; 1
    b996:	50 40       	sbci	r21, 0x00	; 0
    b998:	b8 f7       	brcc	.-18     	; 0xb988 <eeprom_read_blraw+0x8>
    b99a:	08 95       	ret

0000b99c <eeprom_update_block>:
    b99c:	dc 01       	movw	r26, r24
    b99e:	a4 0f       	add	r26, r20
    b9a0:	b5 1f       	adc	r27, r21
    b9a2:	41 50       	subi	r20, 0x01	; 1
    b9a4:	50 40       	sbci	r21, 0x00	; 0
    b9a6:	40 f0       	brcs	.+16     	; 0xb9b8 <eeprom_update_block+0x1c>
    b9a8:	cb 01       	movw	r24, r22
    b9aa:	84 0f       	add	r24, r20
    b9ac:	95 1f       	adc	r25, r21
    b9ae:	2e 91       	ld	r18, -X
    b9b0:	05 d0       	rcall	.+10     	; 0xb9bc <eeprom_update_r18>
    b9b2:	41 50       	subi	r20, 0x01	; 1
    b9b4:	50 40       	sbci	r21, 0x00	; 0
    b9b6:	d8 f7       	brcc	.-10     	; 0xb9ae <eeprom_update_block+0x12>
    b9b8:	08 95       	ret

0000b9ba <eeprom_update_byte>:
    b9ba:	26 2f       	mov	r18, r22

0000b9bc <eeprom_update_r18>:
    b9bc:	f9 99       	sbic	0x1f, 1	; 31
    b9be:	fe cf       	rjmp	.-4      	; 0xb9bc <eeprom_update_r18>
    b9c0:	92 bd       	out	0x22, r25	; 34
    b9c2:	81 bd       	out	0x21, r24	; 33
    b9c4:	f8 9a       	sbi	0x1f, 0	; 31
    b9c6:	01 97       	sbiw	r24, 0x01	; 1
    b9c8:	00 b4       	in	r0, 0x20	; 32
    b9ca:	02 16       	cp	r0, r18
    b9cc:	39 f0       	breq	.+14     	; 0xb9dc <eeprom_update_r18+0x20>
    b9ce:	1f ba       	out	0x1f, r1	; 31
    b9d0:	20 bd       	out	0x20, r18	; 32
    b9d2:	0f b6       	in	r0, 0x3f	; 63
    b9d4:	f8 94       	cli
    b9d6:	fa 9a       	sbi	0x1f, 2	; 31
    b9d8:	f9 9a       	sbi	0x1f, 1	; 31
    b9da:	0f be       	out	0x3f, r0	; 63
    b9dc:	08 95       	ret

0000b9de <eeprom_write_block>:
    b9de:	dc 01       	movw	r26, r24
    b9e0:	cb 01       	movw	r24, r22
    b9e2:	02 c0       	rjmp	.+4      	; 0xb9e8 <eeprom_write_block+0xa>
    b9e4:	2d 91       	ld	r18, X+
    b9e6:	05 d0       	rcall	.+10     	; 0xb9f2 <eeprom_write_r18>
    b9e8:	41 50       	subi	r20, 0x01	; 1
    b9ea:	50 40       	sbci	r21, 0x00	; 0
    b9ec:	d8 f7       	brcc	.-10     	; 0xb9e4 <eeprom_write_block+0x6>
    b9ee:	08 95       	ret

0000b9f0 <eeprom_write_byte>:
    b9f0:	26 2f       	mov	r18, r22

0000b9f2 <eeprom_write_r18>:
    b9f2:	f9 99       	sbic	0x1f, 1	; 31
    b9f4:	fe cf       	rjmp	.-4      	; 0xb9f2 <eeprom_write_r18>
    b9f6:	1f ba       	out	0x1f, r1	; 31
    b9f8:	92 bd       	out	0x22, r25	; 34
    b9fa:	81 bd       	out	0x21, r24	; 33
    b9fc:	20 bd       	out	0x20, r18	; 32
    b9fe:	0f b6       	in	r0, 0x3f	; 63
    ba00:	f8 94       	cli
    ba02:	fa 9a       	sbi	0x1f, 2	; 31
    ba04:	f9 9a       	sbi	0x1f, 1	; 31
    ba06:	0f be       	out	0x3f, r0	; 63
    ba08:	01 96       	adiw	r24, 0x01	; 1
    ba0a:	08 95       	ret

0000ba0c <_exit>:
    ba0c:	f8 94       	cli

0000ba0e <__stop_program>:
    ba0e:	ff cf       	rjmp	.-2      	; 0xba0e <__stop_program>
