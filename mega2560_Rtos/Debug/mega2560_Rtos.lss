
mega2560_Rtos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004f0  00800200  0000b6ac  0000b740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000b6ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000447  008006f0  008006f0  0000bc30  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000bc30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000bc8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000aa8  00000000  00000000  0000bcd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011968  00000000  00000000  0000c778  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e95  00000000  00000000  0001e0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008d2d  00000000  00000000  00020f75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002944  00000000  00000000  00029ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003a53  00000000  00000000  0002c5e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f405  00000000  00000000  0003003b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ca0  00000000  00000000  0003f440  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6c c5       	rjmp	.+2776   	; 0xada <__ctors_end>
       2:	00 00       	nop
       4:	8b c5       	rjmp	.+2838   	; 0xb1c <__bad_interrupt>
       6:	00 00       	nop
       8:	89 c5       	rjmp	.+2834   	; 0xb1c <__bad_interrupt>
       a:	00 00       	nop
       c:	87 c5       	rjmp	.+2830   	; 0xb1c <__bad_interrupt>
       e:	00 00       	nop
      10:	85 c5       	rjmp	.+2826   	; 0xb1c <__bad_interrupt>
      12:	00 00       	nop
      14:	83 c5       	rjmp	.+2822   	; 0xb1c <__bad_interrupt>
      16:	00 00       	nop
      18:	81 c5       	rjmp	.+2818   	; 0xb1c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7f c5       	rjmp	.+2814   	; 0xb1c <__bad_interrupt>
      1e:	00 00       	nop
      20:	7d c5       	rjmp	.+2810   	; 0xb1c <__bad_interrupt>
      22:	00 00       	nop
      24:	7b c5       	rjmp	.+2806   	; 0xb1c <__bad_interrupt>
      26:	00 00       	nop
      28:	79 c5       	rjmp	.+2802   	; 0xb1c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	77 c5       	rjmp	.+2798   	; 0xb1c <__bad_interrupt>
      2e:	00 00       	nop
      30:	75 c5       	rjmp	.+2794   	; 0xb1c <__bad_interrupt>
      32:	00 00       	nop
      34:	73 c5       	rjmp	.+2790   	; 0xb1c <__bad_interrupt>
      36:	00 00       	nop
      38:	71 c5       	rjmp	.+2786   	; 0xb1c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6f c5       	rjmp	.+2782   	; 0xb1c <__bad_interrupt>
      3e:	00 00       	nop
      40:	6d c5       	rjmp	.+2778   	; 0xb1c <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 61 21 	jmp	0x42c2	; 0x42c2 <__vector_17>
      48:	69 c5       	rjmp	.+2770   	; 0xb1c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	67 c5       	rjmp	.+2766   	; 0xb1c <__bad_interrupt>
      4e:	00 00       	nop
      50:	65 c5       	rjmp	.+2762   	; 0xb1c <__bad_interrupt>
      52:	00 00       	nop
      54:	63 c5       	rjmp	.+2758   	; 0xb1c <__bad_interrupt>
      56:	00 00       	nop
      58:	61 c5       	rjmp	.+2754   	; 0xb1c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5f c5       	rjmp	.+2750   	; 0xb1c <__bad_interrupt>
      5e:	00 00       	nop
      60:	5d c5       	rjmp	.+2746   	; 0xb1c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 8f 10 	jmp	0x211e	; 0x211e <__vector_25>
      68:	0c 94 17 11 	jmp	0x222e	; 0x222e <__vector_26>
      6c:	57 c5       	rjmp	.+2734   	; 0xb1c <__bad_interrupt>
      6e:	00 00       	nop
      70:	55 c5       	rjmp	.+2730   	; 0xb1c <__bad_interrupt>
      72:	00 00       	nop
      74:	53 c5       	rjmp	.+2726   	; 0xb1c <__bad_interrupt>
      76:	00 00       	nop
      78:	51 c5       	rjmp	.+2722   	; 0xb1c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4f c5       	rjmp	.+2718   	; 0xb1c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c7       	rjmp	.+3754   	; 0xf2c <__vector_32>
      82:	00 00       	nop
      84:	4b c5       	rjmp	.+2710   	; 0xb1c <__bad_interrupt>
      86:	00 00       	nop
      88:	49 c5       	rjmp	.+2706   	; 0xb1c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	47 c5       	rjmp	.+2702   	; 0xb1c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__vector_36>
      94:	0c 94 bf 11 	jmp	0x237e	; 0x237e <__vector_37>
      98:	41 c5       	rjmp	.+2690   	; 0xb1c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	3f c5       	rjmp	.+2686   	; 0xb1c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3d c5       	rjmp	.+2682   	; 0xb1c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3b c5       	rjmp	.+2678   	; 0xb1c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	39 c5       	rjmp	.+2674   	; 0xb1c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	37 c5       	rjmp	.+2670   	; 0xb1c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	35 c5       	rjmp	.+2666   	; 0xb1c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	33 c5       	rjmp	.+2662   	; 0xb1c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	31 c5       	rjmp	.+2658   	; 0xb1c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2f c5       	rjmp	.+2654   	; 0xb1c <__bad_interrupt>
      be:	00 00       	nop
      c0:	2d c5       	rjmp	.+2650   	; 0xb1c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2b c5       	rjmp	.+2646   	; 0xb1c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	29 c5       	rjmp	.+2642   	; 0xb1c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__vector_51>
      d0:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__vector_52>
      d4:	23 c5       	rjmp	.+2630   	; 0xb1c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <__vector_54>
      dc:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__vector_55>
      e0:	1d c5       	rjmp	.+2618   	; 0xb1c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0c 0d       	add	r16, r12
      e6:	0c 0d       	add	r16, r12
      e8:	11 0d       	add	r17, r1
      ea:	11 0d       	add	r17, r1
      ec:	16 0d       	add	r17, r6
      ee:	16 0d       	add	r17, r6
      f0:	1b 0d       	add	r17, r11
      f2:	1b 0d       	add	r17, r11
      f4:	7d 0d       	add	r23, r13
      f6:	7d 0d       	add	r23, r13
      f8:	78 0d       	add	r23, r8
      fa:	78 0d       	add	r23, r8
      fc:	73 0d       	add	r23, r3
      fe:	73 0d       	add	r23, r3
     100:	6e 0d       	add	r22, r14
     102:	6e 0d       	add	r22, r14
     104:	31 0e       	add	r3, r17
     106:	31 0e       	add	r3, r17
     108:	38 0e       	add	r3, r24
     10a:	38 0e       	add	r3, r24
     10c:	3f 0e       	add	r3, r31
     10e:	3f 0e       	add	r3, r31
     110:	46 0e       	add	r4, r22
     112:	46 0e       	add	r4, r22
     114:	bd 0e       	add	r11, r29
     116:	ee 0e       	add	r14, r30
     118:	28 0f       	add	r18, r24
     11a:	59 0f       	add	r21, r25
     11c:	93 0f       	add	r25, r19
     11e:	c4 0f       	add	r28, r20
     120:	02 10       	cpse	r0, r2
     122:	33 10       	cpse	r3, r3
     124:	39 1d       	adc	r19, r9
     126:	39 1d       	adc	r19, r9
     128:	39 1d       	adc	r19, r9
     12a:	84 1d       	adc	r24, r4
     12c:	6d 1d       	adc	r22, r13
     12e:	81 1d       	adc	r24, r1
     130:	39 1d       	adc	r19, r9
     132:	39 1d       	adc	r19, r9
     134:	84 1d       	adc	r24, r4
     136:	6d 1d       	adc	r22, r13
     138:	eb 25       	eor	r30, r11
     13a:	ff 24       	eor	r15, r15
     13c:	ff 24       	eor	r15, r15
     13e:	08 27       	eor	r16, r24
     140:	08 27       	eor	r16, r24
     142:	08 27       	eor	r16, r24
     144:	08 27       	eor	r16, r24
     146:	08 27       	eor	r16, r24
     148:	08 27       	eor	r16, r24
     14a:	08 27       	eor	r16, r24
     14c:	ef 25       	eor	r30, r15
     14e:	04 25       	eor	r16, r4
     150:	04 25       	eor	r16, r4
     152:	08 27       	eor	r16, r24
     154:	08 27       	eor	r16, r24
     156:	08 27       	eor	r16, r24
     158:	08 27       	eor	r16, r24
     15a:	08 27       	eor	r16, r24
     15c:	08 27       	eor	r16, r24
     15e:	08 27       	eor	r16, r24
     160:	f3 25       	eor	r31, r3
     162:	09 25       	eor	r16, r9
     164:	09 25       	eor	r16, r9
     166:	08 27       	eor	r16, r24
     168:	08 27       	eor	r16, r24
     16a:	08 27       	eor	r16, r24
     16c:	08 27       	eor	r16, r24
     16e:	08 27       	eor	r16, r24
     170:	08 27       	eor	r16, r24
     172:	08 27       	eor	r16, r24
     174:	f7 25       	eor	r31, r7
     176:	0e 25       	eor	r16, r14
     178:	0e 25       	eor	r16, r14
     17a:	08 27       	eor	r16, r24
     17c:	08 27       	eor	r16, r24
     17e:	08 27       	eor	r16, r24
     180:	08 27       	eor	r16, r24
     182:	08 27       	eor	r16, r24
     184:	08 27       	eor	r16, r24
     186:	08 27       	eor	r16, r24
     188:	fb 25       	eor	r31, r11
     18a:	13 25       	eor	r17, r3
     18c:	13 25       	eor	r17, r3
     18e:	08 27       	eor	r16, r24
     190:	08 27       	eor	r16, r24
     192:	08 27       	eor	r16, r24
     194:	08 27       	eor	r16, r24
     196:	08 27       	eor	r16, r24
     198:	08 27       	eor	r16, r24
     19a:	08 27       	eor	r16, r24
     19c:	ff 25       	eor	r31, r15
     19e:	18 25       	eor	r17, r8
     1a0:	18 25       	eor	r17, r8
     1a2:	08 27       	eor	r16, r24
     1a4:	08 27       	eor	r16, r24
     1a6:	08 27       	eor	r16, r24
     1a8:	08 27       	eor	r16, r24
     1aa:	08 27       	eor	r16, r24
     1ac:	08 27       	eor	r16, r24
     1ae:	08 27       	eor	r16, r24
     1b0:	03 26       	eor	r0, r19
     1b2:	1d 25       	eor	r17, r13
     1b4:	1d 25       	eor	r17, r13
     1b6:	08 27       	eor	r16, r24
     1b8:	08 27       	eor	r16, r24
     1ba:	08 27       	eor	r16, r24
     1bc:	08 27       	eor	r16, r24
     1be:	08 27       	eor	r16, r24
     1c0:	08 27       	eor	r16, r24
     1c2:	08 27       	eor	r16, r24
     1c4:	07 26       	eor	r0, r23
     1c6:	2d 25       	eor	r18, r13
     1c8:	2d 25       	eor	r18, r13
     1ca:	08 27       	eor	r16, r24
     1cc:	08 27       	eor	r16, r24
     1ce:	08 27       	eor	r16, r24
     1d0:	08 27       	eor	r16, r24
     1d2:	08 27       	eor	r16, r24
     1d4:	08 27       	eor	r16, r24
     1d6:	08 27       	eor	r16, r24
     1d8:	0b 26       	eor	r0, r27
     1da:	3d 25       	eor	r19, r13
     1dc:	3d 25       	eor	r19, r13
     1de:	08 27       	eor	r16, r24
     1e0:	08 27       	eor	r16, r24
     1e2:	08 27       	eor	r16, r24
     1e4:	08 27       	eor	r16, r24
     1e6:	08 27       	eor	r16, r24
     1e8:	08 27       	eor	r16, r24
     1ea:	08 27       	eor	r16, r24
     1ec:	0f 26       	eor	r0, r31
     1ee:	4d 25       	eor	r20, r13
     1f0:	4d 25       	eor	r20, r13
     1f2:	08 27       	eor	r16, r24
     1f4:	08 27       	eor	r16, r24
     1f6:	08 27       	eor	r16, r24
     1f8:	08 27       	eor	r16, r24
     1fa:	08 27       	eor	r16, r24
     1fc:	08 27       	eor	r16, r24
     1fe:	08 27       	eor	r16, r24
     200:	13 26       	eor	r1, r19
     202:	5d 25       	eor	r21, r13
     204:	5d 25       	eor	r21, r13
     206:	08 27       	eor	r16, r24
     208:	08 27       	eor	r16, r24
     20a:	08 27       	eor	r16, r24
     20c:	08 27       	eor	r16, r24
     20e:	08 27       	eor	r16, r24
     210:	08 27       	eor	r16, r24
     212:	08 27       	eor	r16, r24
     214:	17 26       	eor	r1, r23
     216:	62 25       	eor	r22, r2
     218:	62 25       	eor	r22, r2
     21a:	08 27       	eor	r16, r24
     21c:	08 27       	eor	r16, r24
     21e:	08 27       	eor	r16, r24
     220:	08 27       	eor	r16, r24
     222:	08 27       	eor	r16, r24
     224:	08 27       	eor	r16, r24
     226:	08 27       	eor	r16, r24
     228:	1b 26       	eor	r1, r27
     22a:	72 25       	eor	r23, r2
     22c:	72 25       	eor	r23, r2
     22e:	08 27       	eor	r16, r24
     230:	08 27       	eor	r16, r24
     232:	08 27       	eor	r16, r24
     234:	08 27       	eor	r16, r24
     236:	08 27       	eor	r16, r24
     238:	08 27       	eor	r16, r24
     23a:	08 27       	eor	r16, r24
     23c:	1f 26       	eor	r1, r31
     23e:	81 25       	eor	r24, r1
     240:	81 25       	eor	r24, r1
     242:	08 27       	eor	r16, r24
     244:	08 27       	eor	r16, r24
     246:	08 27       	eor	r16, r24
     248:	08 27       	eor	r16, r24
     24a:	08 27       	eor	r16, r24
     24c:	08 27       	eor	r16, r24
     24e:	08 27       	eor	r16, r24
     250:	23 26       	eor	r2, r19
     252:	91 25       	eor	r25, r1
     254:	91 25       	eor	r25, r1
     256:	08 27       	eor	r16, r24
     258:	08 27       	eor	r16, r24
     25a:	08 27       	eor	r16, r24
     25c:	08 27       	eor	r16, r24
     25e:	08 27       	eor	r16, r24
     260:	08 27       	eor	r16, r24
     262:	08 27       	eor	r16, r24
     264:	27 26       	eor	r2, r23
     266:	a1 25       	eor	r26, r1
     268:	a1 25       	eor	r26, r1
     26a:	08 27       	eor	r16, r24
     26c:	08 27       	eor	r16, r24
     26e:	08 27       	eor	r16, r24
     270:	08 27       	eor	r16, r24
     272:	08 27       	eor	r16, r24
     274:	08 27       	eor	r16, r24
     276:	08 27       	eor	r16, r24
     278:	2b 26       	eor	r2, r27
     27a:	b1 25       	eor	r27, r1
     27c:	b1 25       	eor	r27, r1
     27e:	08 27       	eor	r16, r24
     280:	08 27       	eor	r16, r24
     282:	08 27       	eor	r16, r24
     284:	08 27       	eor	r16, r24
     286:	08 27       	eor	r16, r24
     288:	08 27       	eor	r16, r24
     28a:	08 27       	eor	r16, r24
     28c:	2f 26       	eor	r2, r31
     28e:	c1 25       	eor	r28, r1
     290:	c1 25       	eor	r28, r1
     292:	08 27       	eor	r16, r24
     294:	08 27       	eor	r16, r24
     296:	08 27       	eor	r16, r24
     298:	08 27       	eor	r16, r24
     29a:	08 27       	eor	r16, r24
     29c:	08 27       	eor	r16, r24
     29e:	08 27       	eor	r16, r24
     2a0:	33 26       	eor	r3, r19
     2a2:	d1 25       	eor	r29, r1
     2a4:	d1 25       	eor	r29, r1
     2a6:	08 27       	eor	r16, r24
     2a8:	08 27       	eor	r16, r24
     2aa:	08 27       	eor	r16, r24
     2ac:	08 27       	eor	r16, r24
     2ae:	08 27       	eor	r16, r24
     2b0:	08 27       	eor	r16, r24
     2b2:	08 27       	eor	r16, r24
     2b4:	37 26       	eor	r3, r23
     2b6:	e1 25       	eor	r30, r1
     2b8:	e1 25       	eor	r30, r1
     2ba:	08 27       	eor	r16, r24
     2bc:	08 27       	eor	r16, r24
     2be:	08 27       	eor	r16, r24
     2c0:	08 27       	eor	r16, r24
     2c2:	08 27       	eor	r16, r24
     2c4:	08 27       	eor	r16, r24
     2c6:	08 27       	eor	r16, r24
     2c8:	3b 26       	eor	r3, r27
     2ca:	08 27       	eor	r16, r24
     2cc:	08 27       	eor	r16, r24
     2ce:	08 27       	eor	r16, r24
     2d0:	08 27       	eor	r16, r24
     2d2:	08 27       	eor	r16, r24
     2d4:	08 27       	eor	r16, r24
     2d6:	08 27       	eor	r16, r24
     2d8:	08 27       	eor	r16, r24
     2da:	08 27       	eor	r16, r24
     2dc:	3f 26       	eor	r3, r31
     2de:	08 27       	eor	r16, r24
     2e0:	08 27       	eor	r16, r24
     2e2:	08 27       	eor	r16, r24
     2e4:	08 27       	eor	r16, r24
     2e6:	08 27       	eor	r16, r24
     2e8:	08 27       	eor	r16, r24
     2ea:	08 27       	eor	r16, r24
     2ec:	08 27       	eor	r16, r24
     2ee:	08 27       	eor	r16, r24
     2f0:	43 26       	eor	r4, r19
     2f2:	08 27       	eor	r16, r24
     2f4:	08 27       	eor	r16, r24
     2f6:	08 27       	eor	r16, r24
     2f8:	08 27       	eor	r16, r24
     2fa:	08 27       	eor	r16, r24
     2fc:	08 27       	eor	r16, r24
     2fe:	08 27       	eor	r16, r24
     300:	08 27       	eor	r16, r24
     302:	08 27       	eor	r16, r24
     304:	47 26       	eor	r4, r23
     306:	08 27       	eor	r16, r24
     308:	08 27       	eor	r16, r24
     30a:	08 27       	eor	r16, r24
     30c:	08 27       	eor	r16, r24
     30e:	08 27       	eor	r16, r24
     310:	08 27       	eor	r16, r24
     312:	08 27       	eor	r16, r24
     314:	08 27       	eor	r16, r24
     316:	08 27       	eor	r16, r24
     318:	4b 26       	eor	r4, r27
     31a:	08 27       	eor	r16, r24
     31c:	08 27       	eor	r16, r24
     31e:	08 27       	eor	r16, r24
     320:	08 27       	eor	r16, r24
     322:	08 27       	eor	r16, r24
     324:	08 27       	eor	r16, r24
     326:	08 27       	eor	r16, r24
     328:	08 27       	eor	r16, r24
     32a:	08 27       	eor	r16, r24
     32c:	56 26       	eor	r5, r22
     32e:	08 27       	eor	r16, r24
     330:	08 27       	eor	r16, r24
     332:	08 27       	eor	r16, r24
     334:	08 27       	eor	r16, r24
     336:	08 27       	eor	r16, r24
     338:	08 27       	eor	r16, r24
     33a:	08 27       	eor	r16, r24
     33c:	08 27       	eor	r16, r24
     33e:	08 27       	eor	r16, r24
     340:	5a 26       	eor	r5, r26
     342:	08 27       	eor	r16, r24
     344:	08 27       	eor	r16, r24
     346:	08 27       	eor	r16, r24
     348:	08 27       	eor	r16, r24
     34a:	08 27       	eor	r16, r24
     34c:	08 27       	eor	r16, r24
     34e:	08 27       	eor	r16, r24
     350:	08 27       	eor	r16, r24
     352:	08 27       	eor	r16, r24
     354:	5e 26       	eor	r5, r30
     356:	08 27       	eor	r16, r24
     358:	08 27       	eor	r16, r24
     35a:	08 27       	eor	r16, r24
     35c:	08 27       	eor	r16, r24
     35e:	08 27       	eor	r16, r24
     360:	08 27       	eor	r16, r24
     362:	08 27       	eor	r16, r24
     364:	08 27       	eor	r16, r24
     366:	08 27       	eor	r16, r24
     368:	62 26       	eor	r6, r18
     36a:	08 27       	eor	r16, r24
     36c:	08 27       	eor	r16, r24
     36e:	08 27       	eor	r16, r24
     370:	08 27       	eor	r16, r24
     372:	08 27       	eor	r16, r24
     374:	08 27       	eor	r16, r24
     376:	08 27       	eor	r16, r24
     378:	08 27       	eor	r16, r24
     37a:	08 27       	eor	r16, r24
     37c:	66 26       	eor	r6, r22
     37e:	af 26       	eor	r10, r31
     380:	d3 26       	eor	r13, r19
     382:	08 27       	eor	r16, r24
     384:	08 27       	eor	r16, r24
     386:	08 27       	eor	r16, r24
     388:	08 27       	eor	r16, r24
     38a:	08 27       	eor	r16, r24
     38c:	08 27       	eor	r16, r24
     38e:	08 27       	eor	r16, r24
     390:	6c 26       	eor	r6, r28
     392:	b2 26       	eor	r11, r18
     394:	d9 26       	eor	r13, r25
     396:	08 27       	eor	r16, r24
     398:	08 27       	eor	r16, r24
     39a:	08 27       	eor	r16, r24
     39c:	08 27       	eor	r16, r24
     39e:	08 27       	eor	r16, r24
     3a0:	08 27       	eor	r16, r24
     3a2:	08 27       	eor	r16, r24
     3a4:	70 26       	eor	r7, r16
     3a6:	b8 26       	eor	r11, r24
     3a8:	df 26       	eor	r13, r31
     3aa:	08 27       	eor	r16, r24
     3ac:	08 27       	eor	r16, r24
     3ae:	08 27       	eor	r16, r24
     3b0:	08 27       	eor	r16, r24
     3b2:	08 27       	eor	r16, r24
     3b4:	08 27       	eor	r16, r24
     3b6:	08 27       	eor	r16, r24
     3b8:	74 26       	eor	r7, r20
     3ba:	be 26       	eor	r11, r30
     3bc:	e5 26       	eor	r14, r21
     3be:	08 27       	eor	r16, r24
     3c0:	08 27       	eor	r16, r24
     3c2:	08 27       	eor	r16, r24
     3c4:	08 27       	eor	r16, r24
     3c6:	08 27       	eor	r16, r24
     3c8:	08 27       	eor	r16, r24
     3ca:	08 27       	eor	r16, r24
     3cc:	78 26       	eor	r7, r24
     3ce:	c4 26       	eor	r12, r20
     3d0:	eb 26       	eor	r14, r27
     3d2:	08 27       	eor	r16, r24
     3d4:	08 27       	eor	r16, r24
     3d6:	08 27       	eor	r16, r24
     3d8:	08 27       	eor	r16, r24
     3da:	08 27       	eor	r16, r24
     3dc:	08 27       	eor	r16, r24
     3de:	08 27       	eor	r16, r24
     3e0:	7c 26       	eor	r7, r28
     3e2:	c7 26       	eor	r12, r23
     3e4:	f1 26       	eor	r15, r17
     3e6:	08 27       	eor	r16, r24
     3e8:	08 27       	eor	r16, r24
     3ea:	08 27       	eor	r16, r24
     3ec:	08 27       	eor	r16, r24
     3ee:	08 27       	eor	r16, r24
     3f0:	08 27       	eor	r16, r24
     3f2:	08 27       	eor	r16, r24
     3f4:	7f 26       	eor	r7, r31
     3f6:	08 27       	eor	r16, r24
     3f8:	08 27       	eor	r16, r24
     3fa:	08 27       	eor	r16, r24
     3fc:	08 27       	eor	r16, r24
     3fe:	08 27       	eor	r16, r24
     400:	08 27       	eor	r16, r24
     402:	08 27       	eor	r16, r24
     404:	08 27       	eor	r16, r24
     406:	08 27       	eor	r16, r24
     408:	83 26       	eor	r8, r19
     40a:	ca 26       	eor	r12, r26
     40c:	f7 26       	eor	r15, r23
     40e:	08 27       	eor	r16, r24
     410:	08 27       	eor	r16, r24
     412:	08 27       	eor	r16, r24
     414:	08 27       	eor	r16, r24
     416:	08 27       	eor	r16, r24
     418:	08 27       	eor	r16, r24
     41a:	08 27       	eor	r16, r24
     41c:	86 26       	eor	r8, r22
     41e:	cd 26       	eor	r12, r29
     420:	fd 26       	eor	r15, r29
     422:	08 27       	eor	r16, r24
     424:	08 27       	eor	r16, r24
     426:	08 27       	eor	r16, r24
     428:	08 27       	eor	r16, r24
     42a:	08 27       	eor	r16, r24
     42c:	08 27       	eor	r16, r24
     42e:	08 27       	eor	r16, r24
     430:	89 26       	eor	r8, r25
     432:	d0 26       	eor	r13, r16
     434:	03 27       	eor	r16, r19
     436:	08 27       	eor	r16, r24
     438:	08 27       	eor	r16, r24
     43a:	08 27       	eor	r16, r24
     43c:	08 27       	eor	r16, r24
     43e:	08 27       	eor	r16, r24
     440:	08 27       	eor	r16, r24
     442:	08 27       	eor	r16, r24
     444:	8c 26       	eor	r8, r28
     446:	08 27       	eor	r16, r24
     448:	08 27       	eor	r16, r24
     44a:	08 27       	eor	r16, r24
     44c:	08 27       	eor	r16, r24
     44e:	08 27       	eor	r16, r24
     450:	08 27       	eor	r16, r24
     452:	08 27       	eor	r16, r24
     454:	08 27       	eor	r16, r24
     456:	08 27       	eor	r16, r24
     458:	90 26       	eor	r9, r16
     45a:	08 27       	eor	r16, r24
     45c:	08 27       	eor	r16, r24
     45e:	08 27       	eor	r16, r24
     460:	08 27       	eor	r16, r24
     462:	08 27       	eor	r16, r24
     464:	08 27       	eor	r16, r24
     466:	08 27       	eor	r16, r24
     468:	08 27       	eor	r16, r24
     46a:	08 27       	eor	r16, r24
     46c:	94 26       	eor	r9, r20
     46e:	08 27       	eor	r16, r24
     470:	08 27       	eor	r16, r24
     472:	08 27       	eor	r16, r24
     474:	08 27       	eor	r16, r24
     476:	08 27       	eor	r16, r24
     478:	08 27       	eor	r16, r24
     47a:	08 27       	eor	r16, r24
     47c:	08 27       	eor	r16, r24
     47e:	08 27       	eor	r16, r24
     480:	98 26       	eor	r9, r24
     482:	08 27       	eor	r16, r24
     484:	08 27       	eor	r16, r24
     486:	08 27       	eor	r16, r24
     488:	08 27       	eor	r16, r24
     48a:	08 27       	eor	r16, r24
     48c:	08 27       	eor	r16, r24
     48e:	08 27       	eor	r16, r24
     490:	08 27       	eor	r16, r24
     492:	08 27       	eor	r16, r24
     494:	9c 26       	eor	r9, r28
     496:	08 27       	eor	r16, r24
     498:	08 27       	eor	r16, r24
     49a:	08 27       	eor	r16, r24
     49c:	08 27       	eor	r16, r24
     49e:	08 27       	eor	r16, r24
     4a0:	08 27       	eor	r16, r24
     4a2:	08 27       	eor	r16, r24
     4a4:	08 27       	eor	r16, r24
     4a6:	08 27       	eor	r16, r24
     4a8:	9f 26       	eor	r9, r31
     4aa:	08 27       	eor	r16, r24
     4ac:	08 27       	eor	r16, r24
     4ae:	08 27       	eor	r16, r24
     4b0:	08 27       	eor	r16, r24
     4b2:	08 27       	eor	r16, r24
     4b4:	08 27       	eor	r16, r24
     4b6:	08 27       	eor	r16, r24
     4b8:	08 27       	eor	r16, r24
     4ba:	08 27       	eor	r16, r24
     4bc:	a3 26       	eor	r10, r19
     4be:	08 27       	eor	r16, r24
     4c0:	08 27       	eor	r16, r24
     4c2:	08 27       	eor	r16, r24
     4c4:	08 27       	eor	r16, r24
     4c6:	08 27       	eor	r16, r24
     4c8:	08 27       	eor	r16, r24
     4ca:	08 27       	eor	r16, r24
     4cc:	08 27       	eor	r16, r24
     4ce:	08 27       	eor	r16, r24
     4d0:	a7 26       	eor	r10, r23
     4d2:	08 27       	eor	r16, r24
     4d4:	08 27       	eor	r16, r24
     4d6:	08 27       	eor	r16, r24
     4d8:	08 27       	eor	r16, r24
     4da:	08 27       	eor	r16, r24
     4dc:	08 27       	eor	r16, r24
     4de:	08 27       	eor	r16, r24
     4e0:	08 27       	eor	r16, r24
     4e2:	08 27       	eor	r16, r24
     4e4:	ab 26       	eor	r10, r27
     4e6:	1c 27       	eor	r17, r28
     4e8:	d1 27       	eor	r29, r17
     4ea:	d1 27       	eor	r29, r17
     4ec:	d1 27       	eor	r29, r17
     4ee:	d1 27       	eor	r29, r17
     4f0:	d1 27       	eor	r29, r17
     4f2:	d1 27       	eor	r29, r17
     4f4:	d1 27       	eor	r29, r17
     4f6:	d1 27       	eor	r29, r17
     4f8:	d1 27       	eor	r29, r17
     4fa:	1e 27       	eor	r17, r30
     4fc:	d1 27       	eor	r29, r17
     4fe:	d1 27       	eor	r29, r17
     500:	d1 27       	eor	r29, r17
     502:	d1 27       	eor	r29, r17
     504:	d1 27       	eor	r29, r17
     506:	d1 27       	eor	r29, r17
     508:	d1 27       	eor	r29, r17
     50a:	d1 27       	eor	r29, r17
     50c:	d1 27       	eor	r29, r17
     50e:	21 27       	eor	r18, r17
     510:	d1 27       	eor	r29, r17
     512:	d1 27       	eor	r29, r17
     514:	d1 27       	eor	r29, r17
     516:	d1 27       	eor	r29, r17
     518:	d1 27       	eor	r29, r17
     51a:	d1 27       	eor	r29, r17
     51c:	d1 27       	eor	r29, r17
     51e:	d1 27       	eor	r29, r17
     520:	d1 27       	eor	r29, r17
     522:	24 27       	eor	r18, r20
     524:	d1 27       	eor	r29, r17
     526:	d1 27       	eor	r29, r17
     528:	d1 27       	eor	r29, r17
     52a:	d1 27       	eor	r29, r17
     52c:	d1 27       	eor	r29, r17
     52e:	d1 27       	eor	r29, r17
     530:	d1 27       	eor	r29, r17
     532:	d1 27       	eor	r29, r17
     534:	d1 27       	eor	r29, r17
     536:	27 27       	eor	r18, r23
     538:	d1 27       	eor	r29, r17
     53a:	d1 27       	eor	r29, r17
     53c:	d1 27       	eor	r29, r17
     53e:	d1 27       	eor	r29, r17
     540:	d1 27       	eor	r29, r17
     542:	d1 27       	eor	r29, r17
     544:	d1 27       	eor	r29, r17
     546:	d1 27       	eor	r29, r17
     548:	d1 27       	eor	r29, r17
     54a:	2a 27       	eor	r18, r26
     54c:	d1 27       	eor	r29, r17
     54e:	d1 27       	eor	r29, r17
     550:	d1 27       	eor	r29, r17
     552:	d1 27       	eor	r29, r17
     554:	d1 27       	eor	r29, r17
     556:	d1 27       	eor	r29, r17
     558:	d1 27       	eor	r29, r17
     55a:	d1 27       	eor	r29, r17
     55c:	d1 27       	eor	r29, r17
     55e:	2d 27       	eor	r18, r29
     560:	d1 27       	eor	r29, r17
     562:	d1 27       	eor	r29, r17
     564:	d1 27       	eor	r29, r17
     566:	d1 27       	eor	r29, r17
     568:	d1 27       	eor	r29, r17
     56a:	d1 27       	eor	r29, r17
     56c:	d1 27       	eor	r29, r17
     56e:	d1 27       	eor	r29, r17
     570:	d1 27       	eor	r29, r17
     572:	30 27       	eor	r19, r16
     574:	d1 27       	eor	r29, r17
     576:	d1 27       	eor	r29, r17
     578:	d1 27       	eor	r29, r17
     57a:	d1 27       	eor	r29, r17
     57c:	d1 27       	eor	r29, r17
     57e:	d1 27       	eor	r29, r17
     580:	d1 27       	eor	r29, r17
     582:	d1 27       	eor	r29, r17
     584:	d1 27       	eor	r29, r17
     586:	33 27       	eor	r19, r19
     588:	d1 27       	eor	r29, r17
     58a:	d1 27       	eor	r29, r17
     58c:	d1 27       	eor	r29, r17
     58e:	d1 27       	eor	r29, r17
     590:	d1 27       	eor	r29, r17
     592:	d1 27       	eor	r29, r17
     594:	d1 27       	eor	r29, r17
     596:	d1 27       	eor	r29, r17
     598:	d1 27       	eor	r29, r17
     59a:	36 27       	eor	r19, r22
     59c:	d1 27       	eor	r29, r17
     59e:	d1 27       	eor	r29, r17
     5a0:	d1 27       	eor	r29, r17
     5a2:	d1 27       	eor	r29, r17
     5a4:	d1 27       	eor	r29, r17
     5a6:	d1 27       	eor	r29, r17
     5a8:	d1 27       	eor	r29, r17
     5aa:	d1 27       	eor	r29, r17
     5ac:	d1 27       	eor	r29, r17
     5ae:	39 27       	eor	r19, r25
     5b0:	d1 27       	eor	r29, r17
     5b2:	d1 27       	eor	r29, r17
     5b4:	d1 27       	eor	r29, r17
     5b6:	d1 27       	eor	r29, r17
     5b8:	d1 27       	eor	r29, r17
     5ba:	d1 27       	eor	r29, r17
     5bc:	d1 27       	eor	r29, r17
     5be:	d1 27       	eor	r29, r17
     5c0:	d1 27       	eor	r29, r17
     5c2:	3c 27       	eor	r19, r28
     5c4:	d1 27       	eor	r29, r17
     5c6:	d1 27       	eor	r29, r17
     5c8:	d1 27       	eor	r29, r17
     5ca:	d1 27       	eor	r29, r17
     5cc:	d1 27       	eor	r29, r17
     5ce:	d1 27       	eor	r29, r17
     5d0:	d1 27       	eor	r29, r17
     5d2:	d1 27       	eor	r29, r17
     5d4:	d1 27       	eor	r29, r17
     5d6:	3f 27       	eor	r19, r31
     5d8:	d1 27       	eor	r29, r17
     5da:	d1 27       	eor	r29, r17
     5dc:	d1 27       	eor	r29, r17
     5de:	d1 27       	eor	r29, r17
     5e0:	d1 27       	eor	r29, r17
     5e2:	d1 27       	eor	r29, r17
     5e4:	d1 27       	eor	r29, r17
     5e6:	d1 27       	eor	r29, r17
     5e8:	d1 27       	eor	r29, r17
     5ea:	42 27       	eor	r20, r18
     5ec:	d1 27       	eor	r29, r17
     5ee:	d1 27       	eor	r29, r17
     5f0:	d1 27       	eor	r29, r17
     5f2:	d1 27       	eor	r29, r17
     5f4:	d1 27       	eor	r29, r17
     5f6:	d1 27       	eor	r29, r17
     5f8:	d1 27       	eor	r29, r17
     5fa:	d1 27       	eor	r29, r17
     5fc:	d1 27       	eor	r29, r17
     5fe:	45 27       	eor	r20, r21
     600:	d1 27       	eor	r29, r17
     602:	d1 27       	eor	r29, r17
     604:	d1 27       	eor	r29, r17
     606:	d1 27       	eor	r29, r17
     608:	d1 27       	eor	r29, r17
     60a:	d1 27       	eor	r29, r17
     60c:	d1 27       	eor	r29, r17
     60e:	d1 27       	eor	r29, r17
     610:	d1 27       	eor	r29, r17
     612:	48 27       	eor	r20, r24
     614:	d1 27       	eor	r29, r17
     616:	d1 27       	eor	r29, r17
     618:	d1 27       	eor	r29, r17
     61a:	d1 27       	eor	r29, r17
     61c:	d1 27       	eor	r29, r17
     61e:	d1 27       	eor	r29, r17
     620:	d1 27       	eor	r29, r17
     622:	d1 27       	eor	r29, r17
     624:	d1 27       	eor	r29, r17
     626:	4b 27       	eor	r20, r27
     628:	d1 27       	eor	r29, r17
     62a:	d1 27       	eor	r29, r17
     62c:	d1 27       	eor	r29, r17
     62e:	d1 27       	eor	r29, r17
     630:	d1 27       	eor	r29, r17
     632:	d1 27       	eor	r29, r17
     634:	d1 27       	eor	r29, r17
     636:	d1 27       	eor	r29, r17
     638:	d1 27       	eor	r29, r17
     63a:	4e 27       	eor	r20, r30
     63c:	d1 27       	eor	r29, r17
     63e:	d1 27       	eor	r29, r17
     640:	d1 27       	eor	r29, r17
     642:	d1 27       	eor	r29, r17
     644:	d1 27       	eor	r29, r17
     646:	d1 27       	eor	r29, r17
     648:	d1 27       	eor	r29, r17
     64a:	d1 27       	eor	r29, r17
     64c:	d1 27       	eor	r29, r17
     64e:	51 27       	eor	r21, r17
     650:	d1 27       	eor	r29, r17
     652:	d1 27       	eor	r29, r17
     654:	d1 27       	eor	r29, r17
     656:	d1 27       	eor	r29, r17
     658:	d1 27       	eor	r29, r17
     65a:	d1 27       	eor	r29, r17
     65c:	d1 27       	eor	r29, r17
     65e:	d1 27       	eor	r29, r17
     660:	d1 27       	eor	r29, r17
     662:	54 27       	eor	r21, r20
     664:	d1 27       	eor	r29, r17
     666:	d1 27       	eor	r29, r17
     668:	d1 27       	eor	r29, r17
     66a:	d1 27       	eor	r29, r17
     66c:	d1 27       	eor	r29, r17
     66e:	d1 27       	eor	r29, r17
     670:	d1 27       	eor	r29, r17
     672:	d1 27       	eor	r29, r17
     674:	d1 27       	eor	r29, r17
     676:	57 27       	eor	r21, r23
     678:	d1 27       	eor	r29, r17
     67a:	d1 27       	eor	r29, r17
     67c:	d1 27       	eor	r29, r17
     67e:	d1 27       	eor	r29, r17
     680:	d1 27       	eor	r29, r17
     682:	d1 27       	eor	r29, r17
     684:	d1 27       	eor	r29, r17
     686:	d1 27       	eor	r29, r17
     688:	d1 27       	eor	r29, r17
     68a:	5a 27       	eor	r21, r26
     68c:	d1 27       	eor	r29, r17
     68e:	d1 27       	eor	r29, r17
     690:	d1 27       	eor	r29, r17
     692:	d1 27       	eor	r29, r17
     694:	d1 27       	eor	r29, r17
     696:	d1 27       	eor	r29, r17
     698:	d1 27       	eor	r29, r17
     69a:	d1 27       	eor	r29, r17
     69c:	d1 27       	eor	r29, r17
     69e:	5d 27       	eor	r21, r29
     6a0:	d1 27       	eor	r29, r17
     6a2:	d1 27       	eor	r29, r17
     6a4:	d1 27       	eor	r29, r17
     6a6:	d1 27       	eor	r29, r17
     6a8:	d1 27       	eor	r29, r17
     6aa:	d1 27       	eor	r29, r17
     6ac:	d1 27       	eor	r29, r17
     6ae:	d1 27       	eor	r29, r17
     6b0:	d1 27       	eor	r29, r17
     6b2:	60 27       	eor	r22, r16
     6b4:	d1 27       	eor	r29, r17
     6b6:	d1 27       	eor	r29, r17
     6b8:	d1 27       	eor	r29, r17
     6ba:	d1 27       	eor	r29, r17
     6bc:	d1 27       	eor	r29, r17
     6be:	d1 27       	eor	r29, r17
     6c0:	d1 27       	eor	r29, r17
     6c2:	d1 27       	eor	r29, r17
     6c4:	d1 27       	eor	r29, r17
     6c6:	63 27       	eor	r22, r19
     6c8:	d1 27       	eor	r29, r17
     6ca:	d1 27       	eor	r29, r17
     6cc:	d1 27       	eor	r29, r17
     6ce:	d1 27       	eor	r29, r17
     6d0:	d1 27       	eor	r29, r17
     6d2:	d1 27       	eor	r29, r17
     6d4:	d1 27       	eor	r29, r17
     6d6:	d1 27       	eor	r29, r17
     6d8:	d1 27       	eor	r29, r17
     6da:	70 27       	eor	r23, r16
     6dc:	d1 27       	eor	r29, r17
     6de:	d1 27       	eor	r29, r17
     6e0:	d1 27       	eor	r29, r17
     6e2:	d1 27       	eor	r29, r17
     6e4:	d1 27       	eor	r29, r17
     6e6:	d1 27       	eor	r29, r17
     6e8:	d1 27       	eor	r29, r17
     6ea:	d1 27       	eor	r29, r17
     6ec:	d1 27       	eor	r29, r17
     6ee:	73 27       	eor	r23, r19
     6f0:	d1 27       	eor	r29, r17
     6f2:	d1 27       	eor	r29, r17
     6f4:	d1 27       	eor	r29, r17
     6f6:	d1 27       	eor	r29, r17
     6f8:	d1 27       	eor	r29, r17
     6fa:	d1 27       	eor	r29, r17
     6fc:	d1 27       	eor	r29, r17
     6fe:	d1 27       	eor	r29, r17
     700:	d1 27       	eor	r29, r17
     702:	76 27       	eor	r23, r22
     704:	d1 27       	eor	r29, r17
     706:	d1 27       	eor	r29, r17
     708:	d1 27       	eor	r29, r17
     70a:	d1 27       	eor	r29, r17
     70c:	d1 27       	eor	r29, r17
     70e:	d1 27       	eor	r29, r17
     710:	d1 27       	eor	r29, r17
     712:	d1 27       	eor	r29, r17
     714:	d1 27       	eor	r29, r17
     716:	79 27       	eor	r23, r25
     718:	d1 27       	eor	r29, r17
     71a:	d1 27       	eor	r29, r17
     71c:	d1 27       	eor	r29, r17
     71e:	d1 27       	eor	r29, r17
     720:	d1 27       	eor	r29, r17
     722:	d1 27       	eor	r29, r17
     724:	d1 27       	eor	r29, r17
     726:	d1 27       	eor	r29, r17
     728:	d1 27       	eor	r29, r17
     72a:	7c 27       	eor	r23, r28
     72c:	d1 27       	eor	r29, r17
     72e:	d1 27       	eor	r29, r17
     730:	d1 27       	eor	r29, r17
     732:	d1 27       	eor	r29, r17
     734:	d1 27       	eor	r29, r17
     736:	d1 27       	eor	r29, r17
     738:	d1 27       	eor	r29, r17
     73a:	d1 27       	eor	r29, r17
     73c:	d1 27       	eor	r29, r17
     73e:	81 27       	eor	r24, r17
     740:	d1 27       	eor	r29, r17
     742:	d1 27       	eor	r29, r17
     744:	d1 27       	eor	r29, r17
     746:	d1 27       	eor	r29, r17
     748:	d1 27       	eor	r29, r17
     74a:	d1 27       	eor	r29, r17
     74c:	d1 27       	eor	r29, r17
     74e:	d1 27       	eor	r29, r17
     750:	d1 27       	eor	r29, r17
     752:	84 27       	eor	r24, r20
     754:	d1 27       	eor	r29, r17
     756:	d1 27       	eor	r29, r17
     758:	d1 27       	eor	r29, r17
     75a:	d1 27       	eor	r29, r17
     75c:	d1 27       	eor	r29, r17
     75e:	d1 27       	eor	r29, r17
     760:	d1 27       	eor	r29, r17
     762:	d1 27       	eor	r29, r17
     764:	d1 27       	eor	r29, r17
     766:	87 27       	eor	r24, r23
     768:	d1 27       	eor	r29, r17
     76a:	d1 27       	eor	r29, r17
     76c:	d1 27       	eor	r29, r17
     76e:	d1 27       	eor	r29, r17
     770:	d1 27       	eor	r29, r17
     772:	d1 27       	eor	r29, r17
     774:	d1 27       	eor	r29, r17
     776:	d1 27       	eor	r29, r17
     778:	d1 27       	eor	r29, r17
     77a:	8a 27       	eor	r24, r26
     77c:	d1 27       	eor	r29, r17
     77e:	d1 27       	eor	r29, r17
     780:	d1 27       	eor	r29, r17
     782:	d1 27       	eor	r29, r17
     784:	d1 27       	eor	r29, r17
     786:	d1 27       	eor	r29, r17
     788:	d1 27       	eor	r29, r17
     78a:	d1 27       	eor	r29, r17
     78c:	d1 27       	eor	r29, r17
     78e:	8d 27       	eor	r24, r29
     790:	d1 27       	eor	r29, r17
     792:	d1 27       	eor	r29, r17
     794:	d1 27       	eor	r29, r17
     796:	d1 27       	eor	r29, r17
     798:	d1 27       	eor	r29, r17
     79a:	d1 27       	eor	r29, r17
     79c:	d1 27       	eor	r29, r17
     79e:	d1 27       	eor	r29, r17
     7a0:	d1 27       	eor	r29, r17
     7a2:	92 27       	eor	r25, r18
     7a4:	d1 27       	eor	r29, r17
     7a6:	d1 27       	eor	r29, r17
     7a8:	d1 27       	eor	r29, r17
     7aa:	d1 27       	eor	r29, r17
     7ac:	d1 27       	eor	r29, r17
     7ae:	d1 27       	eor	r29, r17
     7b0:	d1 27       	eor	r29, r17
     7b2:	d1 27       	eor	r29, r17
     7b4:	d1 27       	eor	r29, r17
     7b6:	95 27       	eor	r25, r21
     7b8:	d1 27       	eor	r29, r17
     7ba:	d1 27       	eor	r29, r17
     7bc:	d1 27       	eor	r29, r17
     7be:	d1 27       	eor	r29, r17
     7c0:	d1 27       	eor	r29, r17
     7c2:	d1 27       	eor	r29, r17
     7c4:	d1 27       	eor	r29, r17
     7c6:	d1 27       	eor	r29, r17
     7c8:	d1 27       	eor	r29, r17
     7ca:	9a 27       	eor	r25, r26
     7cc:	d1 27       	eor	r29, r17
     7ce:	d1 27       	eor	r29, r17
     7d0:	d1 27       	eor	r29, r17
     7d2:	d1 27       	eor	r29, r17
     7d4:	d1 27       	eor	r29, r17
     7d6:	d1 27       	eor	r29, r17
     7d8:	d1 27       	eor	r29, r17
     7da:	d1 27       	eor	r29, r17
     7dc:	d1 27       	eor	r29, r17
     7de:	9f 27       	eor	r25, r31
     7e0:	c1 27       	eor	r28, r17
     7e2:	c6 27       	eor	r28, r22
     7e4:	cb 27       	eor	r28, r27
     7e6:	d1 27       	eor	r29, r17
     7e8:	d1 27       	eor	r29, r17
     7ea:	d1 27       	eor	r29, r17
     7ec:	d1 27       	eor	r29, r17
     7ee:	d1 27       	eor	r29, r17
     7f0:	d1 27       	eor	r29, r17
     7f2:	a4 27       	eor	r26, r20
     7f4:	d1 27       	eor	r29, r17
     7f6:	d1 27       	eor	r29, r17
     7f8:	d1 27       	eor	r29, r17
     7fa:	d1 27       	eor	r29, r17
     7fc:	d1 27       	eor	r29, r17
     7fe:	d1 27       	eor	r29, r17
     800:	d1 27       	eor	r29, r17
     802:	d1 27       	eor	r29, r17
     804:	d1 27       	eor	r29, r17
     806:	a7 27       	eor	r26, r23
     808:	d1 27       	eor	r29, r17
     80a:	d1 27       	eor	r29, r17
     80c:	d1 27       	eor	r29, r17
     80e:	d1 27       	eor	r29, r17
     810:	d1 27       	eor	r29, r17
     812:	d1 27       	eor	r29, r17
     814:	d1 27       	eor	r29, r17
     816:	d1 27       	eor	r29, r17
     818:	d1 27       	eor	r29, r17
     81a:	aa 27       	eor	r26, r26
     81c:	d1 27       	eor	r29, r17
     81e:	d1 27       	eor	r29, r17
     820:	d1 27       	eor	r29, r17
     822:	d1 27       	eor	r29, r17
     824:	d1 27       	eor	r29, r17
     826:	d1 27       	eor	r29, r17
     828:	d1 27       	eor	r29, r17
     82a:	d1 27       	eor	r29, r17
     82c:	d1 27       	eor	r29, r17
     82e:	ad 27       	eor	r26, r29
     830:	d1 27       	eor	r29, r17
     832:	d1 27       	eor	r29, r17
     834:	d1 27       	eor	r29, r17
     836:	d1 27       	eor	r29, r17
     838:	d1 27       	eor	r29, r17
     83a:	d1 27       	eor	r29, r17
     83c:	d1 27       	eor	r29, r17
     83e:	d1 27       	eor	r29, r17
     840:	d1 27       	eor	r29, r17
     842:	b0 27       	eor	r27, r16
     844:	d1 27       	eor	r29, r17
     846:	d1 27       	eor	r29, r17
     848:	d1 27       	eor	r29, r17
     84a:	d1 27       	eor	r29, r17
     84c:	d1 27       	eor	r29, r17
     84e:	d1 27       	eor	r29, r17
     850:	d1 27       	eor	r29, r17
     852:	d1 27       	eor	r29, r17
     854:	d1 27       	eor	r29, r17
     856:	b5 27       	eor	r27, r21
     858:	d1 27       	eor	r29, r17
     85a:	d1 27       	eor	r29, r17
     85c:	d1 27       	eor	r29, r17
     85e:	d1 27       	eor	r29, r17
     860:	d1 27       	eor	r29, r17
     862:	d1 27       	eor	r29, r17
     864:	d1 27       	eor	r29, r17
     866:	d1 27       	eor	r29, r17
     868:	d1 27       	eor	r29, r17
     86a:	b8 27       	eor	r27, r24
     86c:	d1 27       	eor	r29, r17
     86e:	d1 27       	eor	r29, r17
     870:	d1 27       	eor	r29, r17
     872:	d1 27       	eor	r29, r17
     874:	d1 27       	eor	r29, r17
     876:	d1 27       	eor	r29, r17
     878:	d1 27       	eor	r29, r17
     87a:	d1 27       	eor	r29, r17
     87c:	d1 27       	eor	r29, r17
     87e:	bb 27       	eor	r27, r27
     880:	d1 27       	eor	r29, r17
     882:	d1 27       	eor	r29, r17
     884:	d1 27       	eor	r29, r17
     886:	d1 27       	eor	r29, r17
     888:	d1 27       	eor	r29, r17
     88a:	d1 27       	eor	r29, r17
     88c:	d1 27       	eor	r29, r17
     88e:	d1 27       	eor	r29, r17
     890:	d1 27       	eor	r29, r17
     892:	be 27       	eor	r27, r30
     894:	08 00       	.word	0x0008	; ????
     896:	00 00       	nop
     898:	be 92       	st	-X, r11
     89a:	24 49       	sbci	r18, 0x94	; 148
     89c:	12 3e       	cpi	r17, 0xE2	; 226
     89e:	ab aa       	std	Y+51, r10	; 0x33
     8a0:	aa 2a       	or	r10, r26
     8a2:	be cd       	rjmp	.-1156   	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     8a4:	cc cc       	rjmp	.-1640   	; 0x23e <__SREG__+0x1ff>
     8a6:	4c 3e       	cpi	r20, 0xEC	; 236
     8a8:	00 00       	nop
     8aa:	00 80       	ld	r0, Z
     8ac:	be ab       	std	Y+54, r27	; 0x36
     8ae:	aa aa       	std	Y+50, r10	; 0x32
     8b0:	aa 3e       	cpi	r26, 0xEA	; 234
     8b2:	00 00       	nop
     8b4:	00 00       	nop
     8b6:	bf 00       	.word	0x00bf	; ????
     8b8:	00 00       	nop
     8ba:	80 3f       	cpi	r24, 0xF0	; 240
     8bc:	00 00       	nop
     8be:	00 00       	nop
     8c0:	00 08       	sbc	r0, r0
     8c2:	41 78       	andi	r20, 0x81	; 129
     8c4:	d3 bb       	out	0x13, r29	; 19
     8c6:	43 87       	std	Z+11, r20	; 0x0b
     8c8:	d1 13       	cpse	r29, r17
     8ca:	3d 19       	sub	r19, r13
     8cc:	0e 3c       	cpi	r16, 0xCE	; 206
     8ce:	c3 bd       	out	0x23, r28	; 35
     8d0:	42 82       	std	Z+2, r4	; 0x02
     8d2:	ad 2b       	or	r26, r29
     8d4:	3e 68       	ori	r19, 0x8E	; 142
     8d6:	ec 82       	std	Y+4, r14	; 0x04
     8d8:	76 be       	out	0x36, r7	; 54
     8da:	d9 8f       	std	Y+25, r29	; 0x19
     8dc:	e1 a9       	ldd	r30, Z+49	; 0x31
     8de:	3e 4c       	sbci	r19, 0xCE	; 206
     8e0:	80 ef       	ldi	r24, 0xF0	; 240
     8e2:	ff be       	out	0x3f, r15	; 63
     8e4:	01 c4       	rjmp	.+2050   	; 0x10e8 <vListInsert+0x78>
     8e6:	ff 7f       	andi	r31, 0xFF	; 255
     8e8:	3f 00       	.word	0x003f	; ????
     8ea:	00 00       	nop
	...

000008ee <__trampolines_end>:
     8ee:	6e 61       	ori	r22, 0x1E	; 30
     8f0:	6e 00       	.word	0x006e	; ????

000008f2 <__c.2332>:
     8f2:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     902:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     912:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     922:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     932:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     942:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     952:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     962:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     972:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     982:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     992:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     9a2:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     9b2:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     9c2:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     9d2:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     9e2:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000009f0 <R22_Saturation_Temp>:
     9f0:	9a 99 c9 c1 33 33 6b c1 33 33 d3 c0 cd cc cc 3d     ....33k.33.....=
     a00:	48 e1 a2 40 66 66 2e 41 00 00 78 41 9a 99 9d 41     H..@ff.A..xA...A
     a10:	00 00 bc 41 cd cc d8 41 33 33 f3 41 66 66 06 42     ...A...A33.Aff.B
     a20:	66 66 12 42 9a 99 1d 42 66 66 28 42 cd cc 32 42     ff.B...Bff(B..2B
     a30:	cd cc 28 42 66 66 46 42 9a 99 4f 42 66 66 58 42     ..(BffFB..OBffXB
     a40:	33 33 61 42 9a 99 69 42 9a 99 71 42 33 33 79 42     33aB..iB..qB33yB
     a50:	9a 99 80 42 33 33 84 42 cd cc 87 42 66 66 8b 42     ...B33.B...Bff.B
     a60:	00 00 8f 42 66 66 92 42 9a 99 95 42 cd cc 98 42     ...Bff.B...B...B

00000a70 <prvIdleTask>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
     a70:	00 e1       	ldi	r16, 0x10	; 16
     a72:	17 e0       	ldi	r17, 0x07	; 7
     a74:	0f 2e       	mov	r0, r31
     a76:	f0 e4       	ldi	r31, 0x40	; 64
     a78:	ef 2e       	mov	r14, r31
     a7a:	f7 e0       	ldi	r31, 0x07	; 7
     a7c:	ff 2e       	mov	r15, r31
     a7e:	f0 2d       	mov	r31, r0
     a80:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <uxDeletedTasksWaitingCleanUp>
     a84:	88 23       	and	r24, r24
     a86:	11 f1       	breq	.+68     	; 0xacc <prvIdleTask+0x5c>
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	0f 92       	push	r0
     a8e:	d8 01       	movw	r26, r16
     a90:	17 96       	adiw	r26, 0x07	; 7
     a92:	ed 91       	ld	r30, X+
     a94:	fc 91       	ld	r31, X
     a96:	18 97       	sbiw	r26, 0x08	; 8
     a98:	c0 85       	ldd	r28, Z+8	; 0x08
     a9a:	d1 85       	ldd	r29, Z+9	; 0x09
     a9c:	ce 01       	movw	r24, r28
     a9e:	02 96       	adiw	r24, 0x02	; 2
     aa0:	24 d3       	rcall	.+1608   	; 0x10ea <uxListRemove>
     aa2:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxCurrentNumberOfTasks>
     aa6:	81 50       	subi	r24, 0x01	; 1
     aa8:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <uxCurrentNumberOfTasks>
     aac:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <uxDeletedTasksWaitingCleanUp>
     ab0:	81 50       	subi	r24, 0x01	; 1
     ab2:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <uxDeletedTasksWaitingCleanUp>
     ab6:	0f 90       	pop	r0
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     abc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     abe:	75 d0       	rcall	.+234    	; 0xbaa <vPortFree>
     ac0:	ce 01       	movw	r24, r28
     ac2:	73 d0       	rcall	.+230    	; 0xbaa <vPortFree>
     ac4:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <uxDeletedTasksWaitingCleanUp>
     ac8:	81 11       	cpse	r24, r1
     aca:	de cf       	rjmp	.-68     	; 0xa88 <prvIdleTask+0x18>
     acc:	f7 01       	movw	r30, r14
     ace:	80 81       	ld	r24, Z
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	08 f0       	brcs	.+2      	; 0xad6 <prvIdleTask+0x66>
     ad4:	3d d1       	rcall	.+634    	; 0xd50 <vPortYield>
     ad6:	73 d2       	rcall	.+1254   	; 0xfbe <vApplicationIdleHook>
     ad8:	d3 cf       	rjmp	.-90     	; 0xa80 <prvIdleTask+0x10>

00000ada <__ctors_end>:
     ada:	11 24       	eor	r1, r1
     adc:	1f be       	out	0x3f, r1	; 63
     ade:	cf ef       	ldi	r28, 0xFF	; 255
     ae0:	d1 e2       	ldi	r29, 0x21	; 33
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	cd bf       	out	0x3d, r28	; 61
     ae6:	00 e0       	ldi	r16, 0x00	; 0
     ae8:	0c bf       	out	0x3c, r16	; 60

00000aea <__do_copy_data>:
     aea:	16 e0       	ldi	r17, 0x06	; 6
     aec:	a0 e0       	ldi	r26, 0x00	; 0
     aee:	b2 e0       	ldi	r27, 0x02	; 2
     af0:	ec ea       	ldi	r30, 0xAC	; 172
     af2:	f6 eb       	ldi	r31, 0xB6	; 182
     af4:	00 e0       	ldi	r16, 0x00	; 0
     af6:	0b bf       	out	0x3b, r16	; 59
     af8:	02 c0       	rjmp	.+4      	; 0xafe <__do_copy_data+0x14>
     afa:	07 90       	elpm	r0, Z+
     afc:	0d 92       	st	X+, r0
     afe:	a0 3f       	cpi	r26, 0xF0	; 240
     b00:	b1 07       	cpc	r27, r17
     b02:	d9 f7       	brne	.-10     	; 0xafa <__do_copy_data+0x10>

00000b04 <__do_clear_bss>:
     b04:	2b e0       	ldi	r18, 0x0B	; 11
     b06:	a0 ef       	ldi	r26, 0xF0	; 240
     b08:	b6 e0       	ldi	r27, 0x06	; 6
     b0a:	01 c0       	rjmp	.+2      	; 0xb0e <.do_clear_bss_start>

00000b0c <.do_clear_bss_loop>:
     b0c:	1d 92       	st	X+, r1

00000b0e <.do_clear_bss_start>:
     b0e:	a7 33       	cpi	r26, 0x37	; 55
     b10:	b2 07       	cpc	r27, r18
     b12:	e1 f7       	brne	.-8      	; 0xb0c <.do_clear_bss_loop>
     b14:	0e 94 81 20 	call	0x4102	; 0x4102 <main>
     b18:	0c 94 54 5b 	jmp	0xb6a8	; 0xb6a8 <_exit>

00000b1c <__bad_interrupt>:
     b1c:	71 ca       	rjmp	.-2846   	; 0x0 <__vectors>

00000b1e <difftime>:
     b1e:	62 1b       	sub	r22, r18
     b20:	73 0b       	sbc	r23, r19
     b22:	84 0b       	sbc	r24, r20
     b24:	95 0b       	sbc	r25, r21
     b26:	08 95       	ret

00000b28 <time>:
     b28:	fc 01       	movw	r30, r24
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	60 91 33 0b 	lds	r22, 0x0B33	; 0x800b33 <__system_time>
     b32:	70 91 34 0b 	lds	r23, 0x0B34	; 0x800b34 <__system_time+0x1>
     b36:	80 91 35 0b 	lds	r24, 0x0B35	; 0x800b35 <__system_time+0x2>
     b3a:	90 91 36 0b 	lds	r25, 0x0B36	; 0x800b36 <__system_time+0x3>
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	30 97       	sbiw	r30, 0x00	; 0
     b42:	21 f0       	breq	.+8      	; 0xb4c <time+0x24>
     b44:	60 83       	st	Z, r22
     b46:	71 83       	std	Z+1, r23	; 0x01
     b48:	82 83       	std	Z+2, r24	; 0x02
     b4a:	93 83       	std	Z+3, r25	; 0x03
     b4c:	08 95       	ret

00000b4e <system_tick>:
     b4e:	8f 93       	push	r24
     b50:	8f b7       	in	r24, 0x3f	; 63
     b52:	8f 93       	push	r24
     b54:	f8 94       	cli
     b56:	80 91 33 0b 	lds	r24, 0x0B33	; 0x800b33 <__system_time>
     b5a:	8f 5f       	subi	r24, 0xFF	; 255
     b5c:	80 93 33 0b 	sts	0x0B33, r24	; 0x800b33 <__system_time>
     b60:	80 91 34 0b 	lds	r24, 0x0B34	; 0x800b34 <__system_time+0x1>
     b64:	8f 4f       	sbci	r24, 0xFF	; 255
     b66:	80 93 34 0b 	sts	0x0B34, r24	; 0x800b34 <__system_time+0x1>
     b6a:	80 91 35 0b 	lds	r24, 0x0B35	; 0x800b35 <__system_time+0x2>
     b6e:	8f 4f       	sbci	r24, 0xFF	; 255
     b70:	80 93 35 0b 	sts	0x0B35, r24	; 0x800b35 <__system_time+0x2>
     b74:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <__system_time+0x3>
     b78:	8f 4f       	sbci	r24, 0xFF	; 255
     b7a:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <__system_time+0x3>
     b7e:	8f 91       	pop	r24
     b80:	8f bf       	out	0x3f, r24	; 63
     b82:	8f 91       	pop	r24
     b84:	08 95       	ret

00000b86 <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
     b8c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
     b90:	ce 01       	movw	r24, r28
     b92:	0e 94 1b 58 	call	0xb036	; 0xb036 <malloc>
     b96:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     b98:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     b9c:	20 97       	sbiw	r28, 0x00	; 0
     b9e:	09 f4       	brne	.+2      	; 0xba2 <pvPortMalloc+0x1c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     ba0:	27 d2       	rcall	.+1102   	; 0xff0 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
     ba2:	ce 01       	movw	r24, r28
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
	if( pv )
     bae:	00 97       	sbiw	r24, 0x00	; 0
     bb0:	41 f0       	breq	.+16     	; 0xbc2 <vPortFree+0x18>
     bb2:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
     bb4:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
		{
			free( pv );
     bb8:	ce 01       	movw	r24, r28
     bba:	0e 94 b3 58 	call	0xb166	; 0xb166 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
     bbe:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
	}
}
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <pxPortInitialiseStack>:
#elif defined( portUSE_TIMER2 )
        portTIMSK &= ~( _BV(OCIE2B)|_BV(OCIE2A)|_BV(TOIE2) );	// disable all Timer2 interrupts
        ASSR = 0x00;              								// set Timer/Counter2 to be off

#elif defined( portUSE_TIMER3 )
        portTIMSK &= ~( _BV(OCIE3B)|_BV(OCIE3A)|_BV(TOIE3) );	// disable all Timer3 interrupts
     bc8:	31 e1       	ldi	r19, 0x11	; 17
     bca:	fc 01       	movw	r30, r24
     bcc:	30 83       	st	Z, r19
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	22 e2       	ldi	r18, 0x22	; 34
     bd2:	20 83       	st	Z, r18
     bd4:	31 97       	sbiw	r30, 0x01	; 1
     bd6:	a3 e3       	ldi	r26, 0x33	; 51
     bd8:	a0 83       	st	Z, r26
     bda:	31 97       	sbiw	r30, 0x01	; 1
     bdc:	60 83       	st	Z, r22
     bde:	31 97       	sbiw	r30, 0x01	; 1
     be0:	70 83       	st	Z, r23
     be2:	31 97       	sbiw	r30, 0x01	; 1
     be4:	10 82       	st	Z, r1
     be6:	31 97       	sbiw	r30, 0x01	; 1
     be8:	10 82       	st	Z, r1
     bea:	31 97       	sbiw	r30, 0x01	; 1
     bec:	60 e8       	ldi	r22, 0x80	; 128
     bee:	60 83       	st	Z, r22
     bf0:	31 97       	sbiw	r30, 0x01	; 1
     bf2:	10 82       	st	Z, r1
     bf4:	31 97       	sbiw	r30, 0x01	; 1
     bf6:	10 82       	st	Z, r1
     bf8:	31 97       	sbiw	r30, 0x01	; 1
     bfa:	10 82       	st	Z, r1
     bfc:	31 97       	sbiw	r30, 0x01	; 1
     bfe:	62 e0       	ldi	r22, 0x02	; 2
     c00:	60 83       	st	Z, r22
     c02:	31 97       	sbiw	r30, 0x01	; 1
     c04:	63 e0       	ldi	r22, 0x03	; 3
     c06:	60 83       	st	Z, r22
     c08:	31 97       	sbiw	r30, 0x01	; 1
     c0a:	64 e0       	ldi	r22, 0x04	; 4
     c0c:	60 83       	st	Z, r22
     c0e:	31 97       	sbiw	r30, 0x01	; 1
     c10:	65 e0       	ldi	r22, 0x05	; 5
     c12:	60 83       	st	Z, r22
     c14:	31 97       	sbiw	r30, 0x01	; 1
     c16:	66 e0       	ldi	r22, 0x06	; 6
     c18:	60 83       	st	Z, r22
     c1a:	31 97       	sbiw	r30, 0x01	; 1
     c1c:	67 e0       	ldi	r22, 0x07	; 7
     c1e:	60 83       	st	Z, r22
     c20:	31 97       	sbiw	r30, 0x01	; 1
     c22:	68 e0       	ldi	r22, 0x08	; 8
     c24:	60 83       	st	Z, r22
     c26:	31 97       	sbiw	r30, 0x01	; 1
     c28:	69 e0       	ldi	r22, 0x09	; 9
     c2a:	60 83       	st	Z, r22
     c2c:	31 97       	sbiw	r30, 0x01	; 1
     c2e:	60 e1       	ldi	r22, 0x10	; 16
     c30:	60 83       	st	Z, r22
     c32:	31 97       	sbiw	r30, 0x01	; 1
     c34:	30 83       	st	Z, r19
     c36:	31 97       	sbiw	r30, 0x01	; 1
     c38:	32 e1       	ldi	r19, 0x12	; 18
     c3a:	30 83       	st	Z, r19
     c3c:	31 97       	sbiw	r30, 0x01	; 1
     c3e:	33 e1       	ldi	r19, 0x13	; 19
     c40:	30 83       	st	Z, r19
     c42:	31 97       	sbiw	r30, 0x01	; 1
     c44:	34 e1       	ldi	r19, 0x14	; 20
     c46:	30 83       	st	Z, r19
     c48:	31 97       	sbiw	r30, 0x01	; 1
     c4a:	35 e1       	ldi	r19, 0x15	; 21
     c4c:	30 83       	st	Z, r19
     c4e:	31 97       	sbiw	r30, 0x01	; 1
     c50:	36 e1       	ldi	r19, 0x16	; 22
     c52:	30 83       	st	Z, r19
     c54:	31 97       	sbiw	r30, 0x01	; 1
     c56:	37 e1       	ldi	r19, 0x17	; 23
     c58:	30 83       	st	Z, r19
     c5a:	31 97       	sbiw	r30, 0x01	; 1
     c5c:	38 e1       	ldi	r19, 0x18	; 24
     c5e:	30 83       	st	Z, r19
     c60:	31 97       	sbiw	r30, 0x01	; 1
     c62:	39 e1       	ldi	r19, 0x19	; 25
     c64:	30 83       	st	Z, r19
     c66:	31 97       	sbiw	r30, 0x01	; 1
     c68:	30 e2       	ldi	r19, 0x20	; 32
     c6a:	30 83       	st	Z, r19
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	31 e2       	ldi	r19, 0x21	; 33
     c70:	30 83       	st	Z, r19
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	20 83       	st	Z, r18
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	23 e2       	ldi	r18, 0x23	; 35
     c7a:	20 83       	st	Z, r18
     c7c:	31 97       	sbiw	r30, 0x01	; 1
     c7e:	40 83       	st	Z, r20
     c80:	31 97       	sbiw	r30, 0x01	; 1
     c82:	50 83       	st	Z, r21
     c84:	31 97       	sbiw	r30, 0x01	; 1
     c86:	26 e2       	ldi	r18, 0x26	; 38
     c88:	20 83       	st	Z, r18
     c8a:	31 97       	sbiw	r30, 0x01	; 1
     c8c:	27 e2       	ldi	r18, 0x27	; 39
     c8e:	20 83       	st	Z, r18
     c90:	31 97       	sbiw	r30, 0x01	; 1
     c92:	28 e2       	ldi	r18, 0x28	; 40
     c94:	20 83       	st	Z, r18
     c96:	31 97       	sbiw	r30, 0x01	; 1
     c98:	29 e2       	ldi	r18, 0x29	; 41
     c9a:	20 83       	st	Z, r18
     c9c:	31 97       	sbiw	r30, 0x01	; 1
     c9e:	20 e3       	ldi	r18, 0x30	; 48
     ca0:	20 83       	st	Z, r18
     ca2:	31 97       	sbiw	r30, 0x01	; 1
     ca4:	21 e3       	ldi	r18, 0x31	; 49
     ca6:	20 83       	st	Z, r18
     ca8:	89 97       	sbiw	r24, 0x29	; 41
     caa:	08 95       	ret

00000cac <xPortStartScheduler>:
     cac:	88 ee       	ldi	r24, 0xE8	; 232
     cae:	93 e0       	ldi	r25, 0x03	; 3
     cb0:	a0 e0       	ldi	r26, 0x00	; 0
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	80 93 c7 07 	sts	0x07C7, r24	; 0x8007c7 <portTickRateHz>
     cb8:	90 93 c8 07 	sts	0x07C8, r25	; 0x8007c8 <portTickRateHz+0x1>
     cbc:	a0 93 c9 07 	sts	0x07C9, r26	; 0x8007c9 <portTickRateHz+0x2>
     cc0:	b0 93 ca 07 	sts	0x07CA, r27	; 0x8007ca <portTickRateHz+0x3>
     cc4:	80 93 cb 07 	sts	0x07CB, r24	; 0x8007cb <ticksRemainingInSec>
     cc8:	90 93 cc 07 	sts	0x07CC, r25	; 0x8007cc <ticksRemainingInSec+0x1>
     ccc:	a0 93 cd 07 	sts	0x07CD, r26	; 0x8007cd <ticksRemainingInSec+0x2>
     cd0:	b0 93 ce 07 	sts	0x07CE, r27	; 0x8007ce <ticksRemainingInSec+0x3>
     cd4:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     cd8:	89 ef       	ldi	r24, 0xF9	; 249
     cda:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     cde:	8b e0       	ldi	r24, 0x0B	; 11
     ce0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
     ce4:	e1 e7       	ldi	r30, 0x71	; 113
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	82 60       	ori	r24, 0x02	; 2
     cec:	80 83       	st	Z, r24
     cee:	a0 91 6c 07 	lds	r26, 0x076C	; 0x80076c <pxCurrentTCB>
     cf2:	b0 91 6d 07 	lds	r27, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
     cf6:	cd 91       	ld	r28, X+
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	dd 91       	ld	r29, X+
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	ff 91       	pop	r31
     d00:	ef 91       	pop	r30
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	bf 91       	pop	r27
     d08:	af 91       	pop	r26
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	7f 91       	pop	r23
     d10:	6f 91       	pop	r22
     d12:	5f 91       	pop	r21
     d14:	4f 91       	pop	r20
     d16:	3f 91       	pop	r19
     d18:	2f 91       	pop	r18
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	ff 90       	pop	r15
     d20:	ef 90       	pop	r14
     d22:	df 90       	pop	r13
     d24:	cf 90       	pop	r12
     d26:	bf 90       	pop	r11
     d28:	af 90       	pop	r10
     d2a:	9f 90       	pop	r9
     d2c:	8f 90       	pop	r8
     d2e:	7f 90       	pop	r7
     d30:	6f 90       	pop	r6
     d32:	5f 90       	pop	r5
     d34:	4f 90       	pop	r4
     d36:	3f 90       	pop	r3
     d38:	2f 90       	pop	r2
     d3a:	1f 90       	pop	r1
     d3c:	0f 90       	pop	r0
     d3e:	0c be       	out	0x3c, r0	; 60
     d40:	0f 90       	pop	r0
     d42:	0b be       	out	0x3b, r0	; 59
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	0f 90       	pop	r0
     d4a:	08 95       	ret
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	08 95       	ret

00000d50 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	0f 92       	push	r0
     d58:	0b b6       	in	r0, 0x3b	; 59
     d5a:	0f 92       	push	r0
     d5c:	0c b6       	in	r0, 0x3c	; 60
     d5e:	0f 92       	push	r0
     d60:	1f 92       	push	r1
     d62:	11 24       	eor	r1, r1
     d64:	2f 92       	push	r2
     d66:	3f 92       	push	r3
     d68:	4f 92       	push	r4
     d6a:	5f 92       	push	r5
     d6c:	6f 92       	push	r6
     d6e:	7f 92       	push	r7
     d70:	8f 92       	push	r8
     d72:	9f 92       	push	r9
     d74:	af 92       	push	r10
     d76:	bf 92       	push	r11
     d78:	cf 92       	push	r12
     d7a:	df 92       	push	r13
     d7c:	ef 92       	push	r14
     d7e:	ff 92       	push	r15
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	2f 93       	push	r18
     d86:	3f 93       	push	r19
     d88:	4f 93       	push	r20
     d8a:	5f 93       	push	r21
     d8c:	6f 93       	push	r22
     d8e:	7f 93       	push	r23
     d90:	8f 93       	push	r24
     d92:	9f 93       	push	r25
     d94:	af 93       	push	r26
     d96:	bf 93       	push	r27
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31
     da0:	a0 91 6c 07 	lds	r26, 0x076C	; 0x80076c <pxCurrentTCB>
     da4:	b0 91 6d 07 	lds	r27, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
     da8:	0d b6       	in	r0, 0x3d	; 61
     daa:	0d 92       	st	X+, r0
     dac:	0e b6       	in	r0, 0x3e	; 62
     dae:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     db0:	0e 94 09 18 	call	0x3012	; 0x3012 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     db4:	a0 91 6c 07 	lds	r26, 0x076C	; 0x80076c <pxCurrentTCB>
     db8:	b0 91 6d 07 	lds	r27, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
     dbc:	cd 91       	ld	r28, X+
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	dd 91       	ld	r29, X+
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	bf 91       	pop	r27
     dce:	af 91       	pop	r26
     dd0:	9f 91       	pop	r25
     dd2:	8f 91       	pop	r24
     dd4:	7f 91       	pop	r23
     dd6:	6f 91       	pop	r22
     dd8:	5f 91       	pop	r21
     dda:	4f 91       	pop	r20
     ddc:	3f 91       	pop	r19
     dde:	2f 91       	pop	r18
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	ff 90       	pop	r15
     de6:	ef 90       	pop	r14
     de8:	df 90       	pop	r13
     dea:	cf 90       	pop	r12
     dec:	bf 90       	pop	r11
     dee:	af 90       	pop	r10
     df0:	9f 90       	pop	r9
     df2:	8f 90       	pop	r8
     df4:	7f 90       	pop	r7
     df6:	6f 90       	pop	r6
     df8:	5f 90       	pop	r5
     dfa:	4f 90       	pop	r4
     dfc:	3f 90       	pop	r3
     dfe:	2f 90       	pop	r2
     e00:	1f 90       	pop	r1
     e02:	0f 90       	pop	r0
     e04:	0c be       	out	0x3c, r0	; 60
     e06:	0f 90       	pop	r0
     e08:	0b be       	out	0x3b, r0	; 59
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
     e10:	08 95       	ret

00000e12 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     e12:	0f 92       	push	r0
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	0f 92       	push	r0
     e1a:	0b b6       	in	r0, 0x3b	; 59
     e1c:	0f 92       	push	r0
     e1e:	0c b6       	in	r0, 0x3c	; 60
     e20:	0f 92       	push	r0
     e22:	1f 92       	push	r1
     e24:	11 24       	eor	r1, r1
     e26:	2f 92       	push	r2
     e28:	3f 92       	push	r3
     e2a:	4f 92       	push	r4
     e2c:	5f 92       	push	r5
     e2e:	6f 92       	push	r6
     e30:	7f 92       	push	r7
     e32:	8f 92       	push	r8
     e34:	9f 92       	push	r9
     e36:	af 92       	push	r10
     e38:	bf 92       	push	r11
     e3a:	cf 92       	push	r12
     e3c:	df 92       	push	r13
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	2f 93       	push	r18
     e48:	3f 93       	push	r19
     e4a:	4f 93       	push	r20
     e4c:	5f 93       	push	r21
     e4e:	6f 93       	push	r22
     e50:	7f 93       	push	r23
     e52:	8f 93       	push	r24
     e54:	9f 93       	push	r25
     e56:	af 93       	push	r26
     e58:	bf 93       	push	r27
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
     e62:	a0 91 6c 07 	lds	r26, 0x076C	; 0x80076c <pxCurrentTCB>
     e66:	b0 91 6d 07 	lds	r27, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
     e6a:	0d b6       	in	r0, 0x3d	; 61
     e6c:	0d 92       	st	X+, r0
     e6e:	0e b6       	in	r0, 0x3e	; 62
     e70:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
     e72:	13 be       	out	0x33, r1	; 51
	// start mark - check for start of interrupt - for debugging only
	PORTD |=  _BV(PORTD7);				// Ping IO line.
#endif

#if !defined(portUSE_TIMER2_RTC)
	if (--ticksRemainingInSec == 0)
     e74:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <ticksRemainingInSec>
     e78:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <ticksRemainingInSec+0x1>
     e7c:	a0 91 cd 07 	lds	r26, 0x07CD	; 0x8007cd <ticksRemainingInSec+0x2>
     e80:	b0 91 ce 07 	lds	r27, 0x07CE	; 0x8007ce <ticksRemainingInSec+0x3>
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	a1 09       	sbc	r26, r1
     e88:	b1 09       	sbc	r27, r1
     e8a:	80 93 cb 07 	sts	0x07CB, r24	; 0x8007cb <ticksRemainingInSec>
     e8e:	90 93 cc 07 	sts	0x07CC, r25	; 0x8007cc <ticksRemainingInSec+0x1>
     e92:	a0 93 cd 07 	sts	0x07CD, r26	; 0x8007cd <ticksRemainingInSec+0x2>
     e96:	b0 93 ce 07 	sts	0x07CE, r27	; 0x8007ce <ticksRemainingInSec+0x3>
     e9a:	89 2b       	or	r24, r25
     e9c:	8a 2b       	or	r24, r26
     e9e:	8b 2b       	or	r24, r27
     ea0:	89 f4       	brne	.+34     	; 0xec4 <vPortYieldFromTick+0xb2>
	{
		system_tick();
     ea2:	55 de       	rcall	.-854    	; 0xb4e <system_tick>
		ticksRemainingInSec = portTickRateHz;
     ea4:	80 91 c7 07 	lds	r24, 0x07C7	; 0x8007c7 <portTickRateHz>
     ea8:	90 91 c8 07 	lds	r25, 0x07C8	; 0x8007c8 <portTickRateHz+0x1>
     eac:	a0 91 c9 07 	lds	r26, 0x07C9	; 0x8007c9 <portTickRateHz+0x2>
     eb0:	b0 91 ca 07 	lds	r27, 0x07CA	; 0x8007ca <portTickRateHz+0x3>
     eb4:	80 93 cb 07 	sts	0x07CB, r24	; 0x8007cb <ticksRemainingInSec>
     eb8:	90 93 cc 07 	sts	0x07CC, r25	; 0x8007cc <ticksRemainingInSec+0x1>
     ebc:	a0 93 cd 07 	sts	0x07CD, r26	; 0x8007cd <ticksRemainingInSec+0x2>
     ec0:	b0 93 ce 07 	sts	0x07CE, r27	; 0x8007ce <ticksRemainingInSec+0x3>
	}
#endif

	if( xTaskIncrementTick() != pdFALSE )
     ec4:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <xTaskIncrementTick>
     ec8:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     eca:	0e 94 09 18 	call	0x3012	; 0x3012 <vTaskSwitchContext>
#if defined(DEBUG_PING)
	// end mark - check for end of interrupt - for debugging only
	PORTD &= ~_BV(PORTD7);
#endif

	portRESTORE_CONTEXT();
     ece:	a0 91 6c 07 	lds	r26, 0x076C	; 0x80076c <pxCurrentTCB>
     ed2:	b0 91 6d 07 	lds	r27, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
     ed6:	cd 91       	ld	r28, X+
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	dd 91       	ld	r29, X+
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	ff 91       	pop	r31
     ee0:	ef 91       	pop	r30
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	bf 91       	pop	r27
     ee8:	af 91       	pop	r26
     eea:	9f 91       	pop	r25
     eec:	8f 91       	pop	r24
     eee:	7f 91       	pop	r23
     ef0:	6f 91       	pop	r22
     ef2:	5f 91       	pop	r21
     ef4:	4f 91       	pop	r20
     ef6:	3f 91       	pop	r19
     ef8:	2f 91       	pop	r18
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
     f02:	df 90       	pop	r13
     f04:	cf 90       	pop	r12
     f06:	bf 90       	pop	r11
     f08:	af 90       	pop	r10
     f0a:	9f 90       	pop	r9
     f0c:	8f 90       	pop	r8
     f0e:	7f 90       	pop	r7
     f10:	6f 90       	pop	r6
     f12:	5f 90       	pop	r5
     f14:	4f 90       	pop	r4
     f16:	3f 90       	pop	r3
     f18:	2f 90       	pop	r2
     f1a:	1f 90       	pop	r1
     f1c:	0f 90       	pop	r0
     f1e:	0c be       	out	0x3c, r0	; 60
     f20:	0f 90       	pop	r0
     f22:	0b be       	out	0x3b, r0	; 59
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
     f2a:	08 95       	ret

00000f2c <__vector_32>:
	 * count is incremented after the context is saved.
	 */
	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
     f2c:	72 df       	rcall	.-284    	; 0xe12 <vPortYieldFromTick>
		__asm__ __volatile__ ( "reti" );
     f2e:	18 95       	reti

00000f30 <setAnalogMode>:
// For example: if (getMode() == MODE_8_BIT) ...

inline uint8_t getAnalogMode(void)
{
	return (ADMUX >> ADLAR) & 1;
}
     f30:	81 11       	cpse	r24, r1
     f32:	06 c0       	rjmp	.+12     	; 0xf40 <setAnalogMode+0x10>
     f34:	ec e7       	ldi	r30, 0x7C	; 124
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	8f 7d       	andi	r24, 0xDF	; 223
     f3c:	80 83       	st	Z, r24
     f3e:	08 95       	ret
     f40:	ec e7       	ldi	r30, 0x7C	; 124
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	80 62       	ori	r24, 0x20	; 32
     f48:	80 83       	st	Z, r24
     f4a:	08 95       	ret

00000f4c <analogIsConverting>:

// returns 1 if the ADC is in the middle of an conversion, otherwise
// returns 0
inline uint8_t analogIsConverting(void)
{
	return (ADCSRA >> ADSC) & 1;
     f4c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
}
     f50:	86 fb       	bst	r24, 6
     f52:	88 27       	eor	r24, r24
     f54:	80 f9       	bld	r24, 0
     f56:	08 95       	ret

00000f58 <startAnalogConversion>:
//  Orangutan SVP.

inline void startAnalogConversion(uint8_t channel, uint8_t use_internal_reference)
{
	// Channel numbers greater than 15 on 328p or 1284p or 31 on 2560 are invalid.
	if (channel > 0x1F)
     f58:	80 32       	cpi	r24, 0x20	; 32
     f5a:	18 f5       	brcc	.+70     	; 0xfa2 <startAnalogConversion+0x4a>
	{
		return;
	}

	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
     f5c:	97 e8       	ldi	r25, 0x87	; 135
     f5e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	// to channel 0, which can affect the ADC charge capacitor.  For example, if you have a
	// high output impedance voltage on channel 1 and a low output impedance voltage on channel
	// 0, the voltage on channel 0 be briefly applied to the ADC capacitor before every conversion,
	// which could prevent the capacitor from settling to the voltage on channel 1, even over
	// many reads.
	uint8_t tempADMUX = ADMUX;
     f62:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	tempADMUX |= _BV(REFS0);		// Use external capacitor on ARef
	if(use_internal_reference)		// Note: internal reference should NOT be used on devices
     f66:	66 23       	and	r22, r22
     f68:	11 f0       	breq	.+4      	; 0xf6e <startAnalogConversion+0x16>
	{								//  where AREF is connected to an external voltage!
		// use the internal voltage reference
		tempADMUX |= _BV(REFS1);	// Internal reference: 1.1 V on ATmega48/168/328; 2.56 V on ATmega324/644/1284
     f6a:	90 6c       	ori	r25, 0xC0	; 192
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <startAnalogConversion+0x1a>
     f6e:	9f 77       	andi	r25, 0x7F	; 127
	}
	else
	{
		// use AVcc as a reference
		tempADMUX &= ~_BV(REFS1);	// External reference: on AVcc
     f70:	90 64       	ori	r25, 0x40	; 64
	}

	tempADMUX &= ~0x1F;		 // clear channel selection bits of ADMUX
     f72:	90 7e       	andi	r25, 0xE0	; 224
	#ifdef MUX5
	if (channel > 7) {
     f74:	88 30       	cpi	r24, 0x08	; 8
     f76:	40 f0       	brcs	.+16     	; 0xf88 <startAnalogConversion+0x30>
		ADCSRB |= _BV(MUX5);
     f78:	eb e7       	ldi	r30, 0x7B	; 123
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	20 81       	ld	r18, Z
     f7e:	28 60       	ori	r18, 0x08	; 8
     f80:	20 83       	st	Z, r18
		tempADMUX |= channel - 8; 
     f82:	88 50       	subi	r24, 0x08	; 8
     f84:	89 2b       	or	r24, r25
     f86:	06 c0       	rjmp	.+12     	; 0xf94 <startAnalogConversion+0x3c>
		} else {
		ADCSRB &= ~(_BV(MUX5));
     f88:	eb e7       	ldi	r30, 0x7B	; 123
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	20 81       	ld	r18, Z
     f8e:	27 7f       	andi	r18, 0xF7	; 247
     f90:	20 83       	st	Z, r18
		tempADMUX |= channel;
     f92:	89 2b       	or	r24, r25
	}
	#endif
	
	   // we only get this far if channel is less than 32
	ADMUX = tempADMUX;
     f94:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA |= _BV(ADSC); // start the conversion
     f98:	ea e7       	ldi	r30, 0x7A	; 122
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	80 64       	ori	r24, 0x40	; 64
     fa0:	80 83       	st	Z, r24
     fa2:	08 95       	ret

00000fa4 <analogConversionResult>:
// MODE_8_BIT and MODE_10_BIT:
// For example: if (getMode() == MODE_8_BIT) ...

inline uint8_t getAnalogMode(void)
{
	return (ADMUX >> ADLAR) & 1;
     fa4:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
}

// returns the result of the previous ADC conversion.
inline uint16_t analogConversionResult(void)
{
	if (getAnalogMode())				// if left-adjusted (i.e. 8-bit mode)
     fa8:	85 ff       	sbrs	r24, 5
     faa:	04 c0       	rjmp	.+8      	; 0xfb4 <analogConversionResult+0x10>
	{
		return (uint16_t) ADCH;			// 8-bit result
     fac:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	08 95       	ret
	}
	else
	{
		return ADC;				// 10-bit result
     fb4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     fb8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	}
}
     fbc:	08 95       	ret

00000fbe <vApplicationIdleHook>:
	// The corresponding PIN Register bit will always read as zero when this bit is set. When an
	// analogue signal is applied to the ADC7..0 pin and the digital input from this pin is not needed, this
	// bit should be written logic one to reduce power consumption in the digital input buffer.

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
	DIDR0 = 0xFF;
     fbe:	8f ef       	ldi	r24, 0xFF	; 255
     fc0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xFF;
     fc4:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	// When the ACD bit is written logic one, the power to the Analogue Comparator is switched off.
	// This bit can be set at any time to turn off the Analogue Comparator.
	// This will reduce power consumption in Active and Idle mode.
	// When changing the ACD bit, the Analogue Comparator Interrupt must be disabled by clearing the ACIE bit in ACSR.
	// Otherwise an interrupt can occur when the ACD bit is changed.
	ACSR &= ~_BV(ACIE);
     fc8:	80 b7       	in	r24, 0x30	; 48
     fca:	87 7f       	andi	r24, 0xF7	; 247
     fcc:	80 bf       	out	0x30, r24	; 48
	ACSR |=  _BV(ACD);
     fce:	80 b7       	in	r24, 0x30	; 48
     fd0:	80 68       	ori	r24, 0x80	; 128
     fd2:	80 bf       	out	0x30, r24	; 48
	// SLEEP_MODE_PWR_DOWN     _BV(SM1)
	// SLEEP_MODE_PWR_SAVE     (_BV(SM0) | _BV(SM1))
	// SLEEP_MODE_STANDBY      (_BV(SM1) | _BV(SM2))
	// SLEEP_MODE_EXT_STANDBY  (_BV(SM0) | _BV(SM1) | _BV(SM2))

	set_sleep_mode( SLEEP_MODE_IDLE );
     fd4:	83 b7       	in	r24, 0x33	; 51
     fd6:	81 7f       	andi	r24, 0xF1	; 241
     fd8:	83 bf       	out	0x33, r24	; 51

	portENTER_CRITICAL();
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	0f 92       	push	r0
	sleep_enable();
     fe0:	83 b7       	in	r24, 0x33	; 51
     fe2:	81 60       	ori	r24, 0x01	; 1
     fe4:	83 bf       	out	0x33, r24	; 51

#if defined(BODS) && defined(BODSE) // only if there is support to disable the BOD.
	sleep_bod_disable();
#endif

	portEXIT_CRITICAL();
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
	sleep_cpu();		// good night.
     fea:	88 95       	sleep

	sleep_reset();		// reset the sleep_mode() faster than sleep_disable();
     fec:	13 be       	out	0x33, r1	; 51
     fee:	08 95       	ret

00000ff0 <vApplicationMallocFailedHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
     ff0:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     ff2:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ff4:	00 00       	nop
	for(;;)
	{
		_delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
     ff6:	1f 9a       	sbi	0x03, 7	; 3
     ff8:	fd cf       	rjmp	.-6      	; 0xff4 <vApplicationMallocFailedHook+0x4>

00000ffa <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
     ffa:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     ffc:	2f 9a       	sbi	0x05, 7	; 5
     ffe:	00 c0       	rjmp	.+0      	; 0x1000 <vApplicationStackOverflowHook+0x6>
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    1000:	1f 9a       	sbi	0x03, 7	; 3
    1002:	fd cf       	rjmp	.-6      	; 0xffe <vApplicationStackOverflowHook+0x4>

00001004 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1004:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1006:	03 96       	adiw	r24, 0x03	; 3
    1008:	92 83       	std	Z+2, r25	; 0x02
    100a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    100c:	4f ef       	ldi	r20, 0xFF	; 255
    100e:	5f ef       	ldi	r21, 0xFF	; 255
    1010:	ba 01       	movw	r22, r20
    1012:	43 83       	std	Z+3, r20	; 0x03
    1014:	54 83       	std	Z+4, r21	; 0x04
    1016:	65 83       	std	Z+5, r22	; 0x05
    1018:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    101a:	90 87       	std	Z+8, r25	; 0x08
    101c:	87 83       	std	Z+7, r24	; 0x07
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    101e:	92 87       	std	Z+10, r25	; 0x0a
    1020:	81 87       	std	Z+9, r24	; 0x09

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1022:	10 82       	st	Z, r1
    1024:	08 95       	ret

00001026 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1026:	fc 01       	movw	r30, r24
    1028:	13 86       	std	Z+11, r1	; 0x0b
    102a:	12 86       	std	Z+10, r1	; 0x0a
    102c:	08 95       	ret

0000102e <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	9c 01       	movw	r18, r24
    1034:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1036:	dc 01       	movw	r26, r24
    1038:	11 96       	adiw	r26, 0x01	; 1
    103a:	cd 91       	ld	r28, X+
    103c:	dc 91       	ld	r29, X
    103e:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1040:	d5 83       	std	Z+5, r29	; 0x05
    1042:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1044:	8e 81       	ldd	r24, Y+6	; 0x06
    1046:	9f 81       	ldd	r25, Y+7	; 0x07
    1048:	97 83       	std	Z+7, r25	; 0x07
    104a:	86 83       	std	Z+6, r24	; 0x06

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    104c:	8e 81       	ldd	r24, Y+6	; 0x06
    104e:	9f 81       	ldd	r25, Y+7	; 0x07
    1050:	dc 01       	movw	r26, r24
    1052:	15 96       	adiw	r26, 0x05	; 5
    1054:	7c 93       	st	X, r23
    1056:	6e 93       	st	-X, r22
    1058:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxPrevious = pxNewListItem;
    105a:	7f 83       	std	Y+7, r23	; 0x07
    105c:	6e 83       	std	Y+6, r22	; 0x06

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    105e:	33 87       	std	Z+11, r19	; 0x0b
    1060:	22 87       	std	Z+10, r18	; 0x0a

	( pxList->uxNumberOfItems )++;
    1062:	f9 01       	movw	r30, r18
    1064:	80 81       	ld	r24, Z
    1066:	8f 5f       	subi	r24, 0xFF	; 255
    1068:	80 83       	st	Z, r24
}
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	08 95       	ret

00001070 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    107a:	08 81       	ld	r16, Y
    107c:	19 81       	ldd	r17, Y+1	; 0x01
    107e:	2a 81       	ldd	r18, Y+2	; 0x02
    1080:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1082:	0f 3f       	cpi	r16, 0xFF	; 255
    1084:	4f ef       	ldi	r20, 0xFF	; 255
    1086:	14 07       	cpc	r17, r20
    1088:	24 07       	cpc	r18, r20
    108a:	34 07       	cpc	r19, r20
    108c:	21 f4       	brne	.+8      	; 0x1096 <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    108e:	fc 01       	movw	r30, r24
    1090:	a1 85       	ldd	r26, Z+9	; 0x09
    1092:	b2 85       	ldd	r27, Z+10	; 0x0a
    1094:	11 c0       	rjmp	.+34     	; 0x10b8 <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1096:	dc 01       	movw	r26, r24
    1098:	13 96       	adiw	r26, 0x03	; 3
    109a:	01 c0       	rjmp	.+2      	; 0x109e <vListInsert+0x2e>
    109c:	df 01       	movw	r26, r30
    109e:	14 96       	adiw	r26, 0x04	; 4
    10a0:	ed 91       	ld	r30, X+
    10a2:	fc 91       	ld	r31, X
    10a4:	15 97       	sbiw	r26, 0x05	; 5
    10a6:	40 81       	ld	r20, Z
    10a8:	51 81       	ldd	r21, Z+1	; 0x01
    10aa:	62 81       	ldd	r22, Z+2	; 0x02
    10ac:	73 81       	ldd	r23, Z+3	; 0x03
    10ae:	04 17       	cp	r16, r20
    10b0:	15 07       	cpc	r17, r21
    10b2:	26 07       	cpc	r18, r22
    10b4:	37 07       	cpc	r19, r23
    10b6:	90 f7       	brcc	.-28     	; 0x109c <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    10b8:	14 96       	adiw	r26, 0x04	; 4
    10ba:	ed 91       	ld	r30, X+
    10bc:	fc 91       	ld	r31, X
    10be:	15 97       	sbiw	r26, 0x05	; 5
    10c0:	fd 83       	std	Y+5, r31	; 0x05
    10c2:	ec 83       	std	Y+4, r30	; 0x04
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    10c4:	d7 83       	std	Z+7, r29	; 0x07
    10c6:	c6 83       	std	Z+6, r28	; 0x06
	pxNewListItem->pxPrevious = pxIterator;
    10c8:	bf 83       	std	Y+7, r27	; 0x07
    10ca:	ae 83       	std	Y+6, r26	; 0x06
	pxIterator->pxNext = pxNewListItem;
    10cc:	15 96       	adiw	r26, 0x05	; 5
    10ce:	dc 93       	st	X, r29
    10d0:	ce 93       	st	-X, r28
    10d2:	14 97       	sbiw	r26, 0x04	; 4

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    10d4:	9b 87       	std	Y+11, r25	; 0x0b
    10d6:	8a 87       	std	Y+10, r24	; 0x0a

	( pxList->uxNumberOfItems )++;
    10d8:	fc 01       	movw	r30, r24
    10da:	20 81       	ld	r18, Z
    10dc:	2f 5f       	subi	r18, 0xFF	; 255
    10de:	20 83       	st	Z, r18
}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	08 95       	ret

000010ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    10f0:	a2 85       	ldd	r26, Z+10	; 0x0a
    10f2:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    10f4:	c4 81       	ldd	r28, Z+4	; 0x04
    10f6:	d5 81       	ldd	r29, Z+5	; 0x05
    10f8:	86 81       	ldd	r24, Z+6	; 0x06
    10fa:	97 81       	ldd	r25, Z+7	; 0x07
    10fc:	9f 83       	std	Y+7, r25	; 0x07
    10fe:	8e 83       	std	Y+6, r24	; 0x06
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1100:	c6 81       	ldd	r28, Z+6	; 0x06
    1102:	d7 81       	ldd	r29, Z+7	; 0x07
    1104:	84 81       	ldd	r24, Z+4	; 0x04
    1106:	95 81       	ldd	r25, Z+5	; 0x05
    1108:	9d 83       	std	Y+5, r25	; 0x05
    110a:	8c 83       	std	Y+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    110c:	11 96       	adiw	r26, 0x01	; 1
    110e:	8d 91       	ld	r24, X+
    1110:	9c 91       	ld	r25, X
    1112:	12 97       	sbiw	r26, 0x02	; 2
    1114:	e8 17       	cp	r30, r24
    1116:	f9 07       	cpc	r31, r25
    1118:	31 f4       	brne	.+12     	; 0x1126 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    111a:	86 81       	ldd	r24, Z+6	; 0x06
    111c:	97 81       	ldd	r25, Z+7	; 0x07
    111e:	12 96       	adiw	r26, 0x02	; 2
    1120:	9c 93       	st	X, r25
    1122:	8e 93       	st	-X, r24
    1124:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1126:	13 86       	std	Z+11, r1	; 0x0b
    1128:	12 86       	std	Z+10, r1	; 0x0a
	( pxList->uxNumberOfItems )--;
    112a:	8c 91       	ld	r24, X
    112c:	81 50       	subi	r24, 0x01	; 1
    112e:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
    1130:	8c 91       	ld	r24, X
}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	0f 92       	push	r0
    113e:	fc 01       	movw	r30, r24
    1140:	96 8d       	ldd	r25, Z+30	; 0x1e
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	91 11       	cpse	r25, r1
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	08 95       	ret

0000114e <prvCopyDataToQueue>:
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	ec 01       	movw	r28, r24
    1158:	04 2f       	mov	r16, r20
    115a:	1e 8d       	ldd	r17, Y+30	; 0x1e
    115c:	48 a1       	ldd	r20, Y+32	; 0x20
    115e:	41 11       	cpse	r20, r1
    1160:	0c c0       	rjmp	.+24     	; 0x117a <prvCopyDataToQueue+0x2c>
    1162:	88 81       	ld	r24, Y
    1164:	99 81       	ldd	r25, Y+1	; 0x01
    1166:	89 2b       	or	r24, r25
    1168:	09 f0       	breq	.+2      	; 0x116c <prvCopyDataToQueue+0x1e>
    116a:	42 c0       	rjmp	.+132    	; 0x11f0 <prvCopyDataToQueue+0xa2>
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	9b 81       	ldd	r25, Y+3	; 0x03
    1170:	0e 94 2a 1a 	call	0x3454	; 0x3454 <xTaskPriorityDisinherit>
    1174:	1b 82       	std	Y+3, r1	; 0x03
    1176:	1a 82       	std	Y+2, r1	; 0x02
    1178:	42 c0       	rjmp	.+132    	; 0x11fe <prvCopyDataToQueue+0xb0>
    117a:	01 11       	cpse	r16, r1
    117c:	17 c0       	rjmp	.+46     	; 0x11ac <prvCopyDataToQueue+0x5e>
    117e:	50 e0       	ldi	r21, 0x00	; 0
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	9d 81       	ldd	r25, Y+5	; 0x05
    1184:	0e 94 1f 5a 	call	0xb43e	; 0xb43e <memcpy>
    1188:	28 a1       	ldd	r18, Y+32	; 0x20
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	9d 81       	ldd	r25, Y+5	; 0x05
    118e:	82 0f       	add	r24, r18
    1190:	91 1d       	adc	r25, r1
    1192:	9d 83       	std	Y+5, r25	; 0x05
    1194:	8c 83       	std	Y+4, r24	; 0x04
    1196:	2a 81       	ldd	r18, Y+2	; 0x02
    1198:	3b 81       	ldd	r19, Y+3	; 0x03
    119a:	82 17       	cp	r24, r18
    119c:	93 07       	cpc	r25, r19
    119e:	50 f1       	brcs	.+84     	; 0x11f4 <prvCopyDataToQueue+0xa6>
    11a0:	88 81       	ld	r24, Y
    11a2:	99 81       	ldd	r25, Y+1	; 0x01
    11a4:	9d 83       	std	Y+5, r25	; 0x05
    11a6:	8c 83       	std	Y+4, r24	; 0x04
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	29 c0       	rjmp	.+82     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11ac:	50 e0       	ldi	r21, 0x00	; 0
    11ae:	8e 81       	ldd	r24, Y+6	; 0x06
    11b0:	9f 81       	ldd	r25, Y+7	; 0x07
    11b2:	0e 94 1f 5a 	call	0xb43e	; 0xb43e <memcpy>
    11b6:	88 a1       	ldd	r24, Y+32	; 0x20
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	91 95       	neg	r25
    11bc:	81 95       	neg	r24
    11be:	91 09       	sbc	r25, r1
    11c0:	2e 81       	ldd	r18, Y+6	; 0x06
    11c2:	3f 81       	ldd	r19, Y+7	; 0x07
    11c4:	28 0f       	add	r18, r24
    11c6:	39 1f       	adc	r19, r25
    11c8:	3f 83       	std	Y+7, r19	; 0x07
    11ca:	2e 83       	std	Y+6, r18	; 0x06
    11cc:	48 81       	ld	r20, Y
    11ce:	59 81       	ldd	r21, Y+1	; 0x01
    11d0:	24 17       	cp	r18, r20
    11d2:	35 07       	cpc	r19, r21
    11d4:	30 f4       	brcc	.+12     	; 0x11e2 <prvCopyDataToQueue+0x94>
    11d6:	2a 81       	ldd	r18, Y+2	; 0x02
    11d8:	3b 81       	ldd	r19, Y+3	; 0x03
    11da:	82 0f       	add	r24, r18
    11dc:	93 1f       	adc	r25, r19
    11de:	9f 83       	std	Y+7, r25	; 0x07
    11e0:	8e 83       	std	Y+6, r24	; 0x06
    11e2:	02 30       	cpi	r16, 0x02	; 2
    11e4:	49 f4       	brne	.+18     	; 0x11f8 <prvCopyDataToQueue+0xaa>
    11e6:	11 23       	and	r17, r17
    11e8:	49 f0       	breq	.+18     	; 0x11fc <prvCopyDataToQueue+0xae>
    11ea:	11 50       	subi	r17, 0x01	; 1
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	07 c0       	rjmp	.+14     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	05 c0       	rjmp	.+10     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <prvCopyDataToQueue+0xb0>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	1f 5f       	subi	r17, 0xFF	; 255
    1200:	1e 8f       	std	Y+30, r17	; 0x1e
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	08 95       	ret

0000120c <prvCopyDataFromQueue>:
    120c:	fc 01       	movw	r30, r24
    120e:	40 a1       	ldd	r20, Z+32	; 0x20
    1210:	44 23       	and	r20, r20
    1212:	a9 f0       	breq	.+42     	; 0x123e <prvCopyDataFromQueue+0x32>
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	26 81       	ldd	r18, Z+6	; 0x06
    1218:	37 81       	ldd	r19, Z+7	; 0x07
    121a:	24 0f       	add	r18, r20
    121c:	35 1f       	adc	r19, r21
    121e:	37 83       	std	Z+7, r19	; 0x07
    1220:	26 83       	std	Z+6, r18	; 0x06
    1222:	82 81       	ldd	r24, Z+2	; 0x02
    1224:	93 81       	ldd	r25, Z+3	; 0x03
    1226:	28 17       	cp	r18, r24
    1228:	39 07       	cpc	r19, r25
    122a:	20 f0       	brcs	.+8      	; 0x1234 <prvCopyDataFromQueue+0x28>
    122c:	80 81       	ld	r24, Z
    122e:	91 81       	ldd	r25, Z+1	; 0x01
    1230:	97 83       	std	Z+7, r25	; 0x07
    1232:	86 83       	std	Z+6, r24	; 0x06
    1234:	cb 01       	movw	r24, r22
    1236:	66 81       	ldd	r22, Z+6	; 0x06
    1238:	77 81       	ldd	r23, Z+7	; 0x07
    123a:	0c 94 1f 5a 	jmp	0xb43e	; 0xb43e <memcpy>
    123e:	08 95       	ret

00001240 <prvUnlockQueue>:
    1240:	ef 92       	push	r14
    1242:	ff 92       	push	r15
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	8c 01       	movw	r16, r24
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	0f 92       	push	r0
    1252:	fc 01       	movw	r30, r24
    1254:	c2 a1       	ldd	r28, Z+34	; 0x22
    1256:	1c 16       	cp	r1, r28
    1258:	ac f4       	brge	.+42     	; 0x1284 <prvUnlockQueue+0x44>
    125a:	83 89       	ldd	r24, Z+19	; 0x13
    125c:	81 11       	cpse	r24, r1
    125e:	06 c0       	rjmp	.+12     	; 0x126c <prvUnlockQueue+0x2c>
    1260:	11 c0       	rjmp	.+34     	; 0x1284 <prvUnlockQueue+0x44>
    1262:	f8 01       	movw	r30, r16
    1264:	83 89       	ldd	r24, Z+19	; 0x13
    1266:	81 11       	cpse	r24, r1
    1268:	05 c0       	rjmp	.+10     	; 0x1274 <prvUnlockQueue+0x34>
    126a:	0c c0       	rjmp	.+24     	; 0x1284 <prvUnlockQueue+0x44>
    126c:	78 01       	movw	r14, r16
    126e:	f3 e1       	ldi	r31, 0x13	; 19
    1270:	ef 0e       	add	r14, r31
    1272:	f1 1c       	adc	r15, r1
    1274:	c7 01       	movw	r24, r14
    1276:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    127a:	81 11       	cpse	r24, r1
    127c:	0e 94 aa 19 	call	0x3354	; 0x3354 <vTaskMissedYield>
    1280:	c1 50       	subi	r28, 0x01	; 1
    1282:	79 f7       	brne	.-34     	; 0x1262 <prvUnlockQueue+0x22>
    1284:	8f ef       	ldi	r24, 0xFF	; 255
    1286:	f8 01       	movw	r30, r16
    1288:	82 a3       	std	Z+34, r24	; 0x22
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	0f 92       	push	r0
    1294:	c1 a1       	ldd	r28, Z+33	; 0x21
    1296:	1c 16       	cp	r1, r28
    1298:	ac f4       	brge	.+42     	; 0x12c4 <prvUnlockQueue+0x84>
    129a:	80 85       	ldd	r24, Z+8	; 0x08
    129c:	81 11       	cpse	r24, r1
    129e:	06 c0       	rjmp	.+12     	; 0x12ac <prvUnlockQueue+0x6c>
    12a0:	11 c0       	rjmp	.+34     	; 0x12c4 <prvUnlockQueue+0x84>
    12a2:	f8 01       	movw	r30, r16
    12a4:	80 85       	ldd	r24, Z+8	; 0x08
    12a6:	81 11       	cpse	r24, r1
    12a8:	05 c0       	rjmp	.+10     	; 0x12b4 <prvUnlockQueue+0x74>
    12aa:	0c c0       	rjmp	.+24     	; 0x12c4 <prvUnlockQueue+0x84>
    12ac:	78 01       	movw	r14, r16
    12ae:	f8 e0       	ldi	r31, 0x08	; 8
    12b0:	ef 0e       	add	r14, r31
    12b2:	f1 1c       	adc	r15, r1
    12b4:	c7 01       	movw	r24, r14
    12b6:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    12ba:	81 11       	cpse	r24, r1
    12bc:	0e 94 aa 19 	call	0x3354	; 0x3354 <vTaskMissedYield>
    12c0:	c1 50       	subi	r28, 0x01	; 1
    12c2:	79 f7       	brne	.-34     	; 0x12a2 <prvUnlockQueue+0x62>
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	f8 01       	movw	r30, r16
    12c8:	81 a3       	std	Z+33, r24	; 0x21
    12ca:	0f 90       	pop	r0
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	ff 90       	pop	r15
    12d6:	ef 90       	pop	r14
    12d8:	08 95       	ret

000012da <xQueueGenericReset>:
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	ec 01       	movw	r28, r24
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	0f 92       	push	r0
    12e6:	48 81       	ld	r20, Y
    12e8:	59 81       	ldd	r21, Y+1	; 0x01
    12ea:	28 a1       	ldd	r18, Y+32	; 0x20
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	7f 8d       	ldd	r23, Y+31	; 0x1f
    12f0:	72 9f       	mul	r23, r18
    12f2:	c0 01       	movw	r24, r0
    12f4:	73 9f       	mul	r23, r19
    12f6:	90 0d       	add	r25, r0
    12f8:	11 24       	eor	r1, r1
    12fa:	fa 01       	movw	r30, r20
    12fc:	e8 0f       	add	r30, r24
    12fe:	f9 1f       	adc	r31, r25
    1300:	fb 83       	std	Y+3, r31	; 0x03
    1302:	ea 83       	std	Y+2, r30	; 0x02
    1304:	1e 8e       	std	Y+30, r1	; 0x1e
    1306:	5d 83       	std	Y+5, r21	; 0x05
    1308:	4c 83       	std	Y+4, r20	; 0x04
    130a:	82 1b       	sub	r24, r18
    130c:	93 0b       	sbc	r25, r19
    130e:	84 0f       	add	r24, r20
    1310:	95 1f       	adc	r25, r21
    1312:	9f 83       	std	Y+7, r25	; 0x07
    1314:	8e 83       	std	Y+6, r24	; 0x06
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	89 a3       	std	Y+33, r24	; 0x21
    131a:	8a a3       	std	Y+34, r24	; 0x22
    131c:	61 11       	cpse	r22, r1
    131e:	0b c0       	rjmp	.+22     	; 0x1336 <xQueueGenericReset+0x5c>
    1320:	88 85       	ldd	r24, Y+8	; 0x08
    1322:	88 23       	and	r24, r24
    1324:	71 f0       	breq	.+28     	; 0x1342 <xQueueGenericReset+0x68>
    1326:	ce 01       	movw	r24, r28
    1328:	08 96       	adiw	r24, 0x08	; 8
    132a:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    132e:	88 23       	and	r24, r24
    1330:	41 f0       	breq	.+16     	; 0x1342 <xQueueGenericReset+0x68>
    1332:	0e dd       	rcall	.-1508   	; 0xd50 <vPortYield>
    1334:	06 c0       	rjmp	.+12     	; 0x1342 <xQueueGenericReset+0x68>
    1336:	ce 01       	movw	r24, r28
    1338:	08 96       	adiw	r24, 0x08	; 8
    133a:	64 de       	rcall	.-824    	; 0x1004 <vListInitialise>
    133c:	ce 01       	movw	r24, r28
    133e:	43 96       	adiw	r24, 0x13	; 19
    1340:	61 de       	rcall	.-830    	; 0x1004 <vListInitialise>
    1342:	0f 90       	pop	r0
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	08 95       	ret

0000134e <xQueueGenericCreate>:
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	08 2f       	mov	r16, r24
    1358:	16 2f       	mov	r17, r22
    135a:	66 23       	and	r22, r22
    135c:	b1 f0       	breq	.+44     	; 0x138a <xQueueGenericCreate+0x3c>
    135e:	86 9f       	mul	r24, r22
    1360:	c0 01       	movw	r24, r0
    1362:	11 24       	eor	r1, r1
    1364:	83 96       	adiw	r24, 0x23	; 35
    1366:	0f dc       	rcall	.-2018   	; 0xb86 <pvPortMalloc>
    1368:	ec 01       	movw	r28, r24
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	39 f4       	brne	.+14     	; 0x137c <xQueueGenericCreate+0x2e>
    136e:	13 c0       	rjmp	.+38     	; 0x1396 <xQueueGenericCreate+0x48>
    1370:	0f 8f       	std	Y+31, r16	; 0x1f
    1372:	18 a3       	std	Y+32, r17	; 0x20
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	ce 01       	movw	r24, r28
    1378:	b0 df       	rcall	.-160    	; 0x12da <xQueueGenericReset>
    137a:	0d c0       	rjmp	.+26     	; 0x1396 <xQueueGenericCreate+0x48>
    137c:	83 96       	adiw	r24, 0x23	; 35
    137e:	99 83       	std	Y+1, r25	; 0x01
    1380:	88 83       	st	Y, r24
    1382:	f6 cf       	rjmp	.-20     	; 0x1370 <xQueueGenericCreate+0x22>
    1384:	d9 83       	std	Y+1, r29	; 0x01
    1386:	c8 83       	st	Y, r28
    1388:	f3 cf       	rjmp	.-26     	; 0x1370 <xQueueGenericCreate+0x22>
    138a:	83 e2       	ldi	r24, 0x23	; 35
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	fb db       	rcall	.-2058   	; 0xb86 <pvPortMalloc>
    1390:	ec 01       	movw	r28, r24
    1392:	89 2b       	or	r24, r25
    1394:	b9 f7       	brne	.-18     	; 0x1384 <xQueueGenericCreate+0x36>
    1396:	ce 01       	movw	r24, r28
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	08 95       	ret

000013a2 <xQueueGenericSend>:
    13a2:	9f 92       	push	r9
    13a4:	af 92       	push	r10
    13a6:	bf 92       	push	r11
    13a8:	cf 92       	push	r12
    13aa:	df 92       	push	r13
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	29 97       	sbiw	r28, 0x09	; 9
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	7c 01       	movw	r14, r24
    13ca:	5b 01       	movw	r10, r22
    13cc:	2e 83       	std	Y+6, r18	; 0x06
    13ce:	3f 83       	std	Y+7, r19	; 0x07
    13d0:	48 87       	std	Y+8, r20	; 0x08
    13d2:	59 87       	std	Y+9, r21	; 0x09
    13d4:	10 e0       	ldi	r17, 0x00	; 0
    13d6:	99 24       	eor	r9, r9
    13d8:	93 94       	inc	r9
    13da:	6c 01       	movw	r12, r24
    13dc:	88 e0       	ldi	r24, 0x08	; 8
    13de:	c8 0e       	add	r12, r24
    13e0:	d1 1c       	adc	r13, r1
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	0f 92       	push	r0
    13e8:	f7 01       	movw	r30, r14
    13ea:	96 8d       	ldd	r25, Z+30	; 0x1e
    13ec:	87 8d       	ldd	r24, Z+31	; 0x1f
    13ee:	98 17       	cp	r25, r24
    13f0:	10 f0       	brcs	.+4      	; 0x13f6 <xQueueGenericSend+0x54>
    13f2:	02 30       	cpi	r16, 0x02	; 2
    13f4:	b1 f4       	brne	.+44     	; 0x1422 <xQueueGenericSend+0x80>
    13f6:	40 2f       	mov	r20, r16
    13f8:	b5 01       	movw	r22, r10
    13fa:	c7 01       	movw	r24, r14
    13fc:	a8 de       	rcall	.-688    	; 0x114e <prvCopyDataToQueue>
    13fe:	f7 01       	movw	r30, r14
    1400:	93 89       	ldd	r25, Z+19	; 0x13
    1402:	99 23       	and	r25, r25
    1404:	41 f0       	breq	.+16     	; 0x1416 <xQueueGenericSend+0x74>
    1406:	c7 01       	movw	r24, r14
    1408:	43 96       	adiw	r24, 0x13	; 19
    140a:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    140e:	88 23       	and	r24, r24
    1410:	21 f0       	breq	.+8      	; 0x141a <xQueueGenericSend+0x78>
    1412:	9e dc       	rcall	.-1732   	; 0xd50 <vPortYield>
    1414:	02 c0       	rjmp	.+4      	; 0x141a <xQueueGenericSend+0x78>
    1416:	81 11       	cpse	r24, r1
    1418:	9b dc       	rcall	.-1738   	; 0xd50 <vPortYield>
    141a:	0f 90       	pop	r0
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	52 c0       	rjmp	.+164    	; 0x14c6 <xQueueGenericSend+0x124>
    1422:	8e 81       	ldd	r24, Y+6	; 0x06
    1424:	9f 81       	ldd	r25, Y+7	; 0x07
    1426:	a8 85       	ldd	r26, Y+8	; 0x08
    1428:	b9 85       	ldd	r27, Y+9	; 0x09
    142a:	89 2b       	or	r24, r25
    142c:	8a 2b       	or	r24, r26
    142e:	8b 2b       	or	r24, r27
    1430:	21 f4       	brne	.+8      	; 0x143a <xQueueGenericSend+0x98>
    1432:	0f 90       	pop	r0
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	46 c0       	rjmp	.+140    	; 0x14c6 <xQueueGenericSend+0x124>
    143a:	11 11       	cpse	r17, r1
    143c:	05 c0       	rjmp	.+10     	; 0x1448 <xQueueGenericSend+0xa6>
    143e:	ce 01       	movw	r24, r28
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    1446:	19 2d       	mov	r17, r9
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	0f 92       	push	r0
    1456:	f7 01       	movw	r30, r14
    1458:	81 a1       	ldd	r24, Z+33	; 0x21
    145a:	8f 3f       	cpi	r24, 0xFF	; 255
    145c:	09 f4       	brne	.+2      	; 0x1460 <xQueueGenericSend+0xbe>
    145e:	11 a2       	std	Z+33, r1	; 0x21
    1460:	f7 01       	movw	r30, r14
    1462:	82 a1       	ldd	r24, Z+34	; 0x22
    1464:	8f 3f       	cpi	r24, 0xFF	; 255
    1466:	09 f4       	brne	.+2      	; 0x146a <xQueueGenericSend+0xc8>
    1468:	12 a2       	std	Z+34, r1	; 0x22
    146a:	0f 90       	pop	r0
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	be 01       	movw	r22, r28
    1470:	6a 5f       	subi	r22, 0xFA	; 250
    1472:	7f 4f       	sbci	r23, 0xFF	; 255
    1474:	ce 01       	movw	r24, r28
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    147c:	81 11       	cpse	r24, r1
    147e:	1e c0       	rjmp	.+60     	; 0x14bc <xQueueGenericSend+0x11a>
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	0f 92       	push	r0
    1486:	f7 01       	movw	r30, r14
    1488:	96 8d       	ldd	r25, Z+30	; 0x1e
    148a:	87 8d       	ldd	r24, Z+31	; 0x1f
    148c:	0f 90       	pop	r0
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	98 13       	cpse	r25, r24
    1492:	0f c0       	rjmp	.+30     	; 0x14b2 <xQueueGenericSend+0x110>
    1494:	4e 81       	ldd	r20, Y+6	; 0x06
    1496:	5f 81       	ldd	r21, Y+7	; 0x07
    1498:	68 85       	ldd	r22, Y+8	; 0x08
    149a:	79 85       	ldd	r23, Y+9	; 0x09
    149c:	c6 01       	movw	r24, r12
    149e:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    14a2:	c7 01       	movw	r24, r14
    14a4:	cd de       	rcall	.-614    	; 0x1240 <prvUnlockQueue>
    14a6:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14aa:	81 11       	cpse	r24, r1
    14ac:	9a cf       	rjmp	.-204    	; 0x13e2 <xQueueGenericSend+0x40>
    14ae:	50 dc       	rcall	.-1888   	; 0xd50 <vPortYield>
    14b0:	98 cf       	rjmp	.-208    	; 0x13e2 <xQueueGenericSend+0x40>
    14b2:	c7 01       	movw	r24, r14
    14b4:	c5 de       	rcall	.-630    	; 0x1240 <prvUnlockQueue>
    14b6:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14ba:	93 cf       	rjmp	.-218    	; 0x13e2 <xQueueGenericSend+0x40>
    14bc:	c7 01       	movw	r24, r14
    14be:	c0 de       	rcall	.-640    	; 0x1240 <prvUnlockQueue>
    14c0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	29 96       	adiw	r28, 0x09	; 9
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	ff 90       	pop	r15
    14dc:	ef 90       	pop	r14
    14de:	df 90       	pop	r13
    14e0:	cf 90       	pop	r12
    14e2:	bf 90       	pop	r11
    14e4:	af 90       	pop	r10
    14e6:	9f 90       	pop	r9
    14e8:	08 95       	ret

000014ea <xQueueCreateMutex>:
    14ea:	0f 93       	push	r16
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	48 2f       	mov	r20, r24
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	2b df       	rcall	.-426    	; 0x134e <xQueueGenericCreate>
    14f8:	ec 01       	movw	r28, r24
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	61 f0       	breq	.+24     	; 0x1516 <xQueueCreateMutex+0x2c>
    14fe:	1b 82       	std	Y+3, r1	; 0x03
    1500:	1a 82       	std	Y+2, r1	; 0x02
    1502:	19 82       	std	Y+1, r1	; 0x01
    1504:	18 82       	st	Y, r1
    1506:	1e 82       	std	Y+6, r1	; 0x06
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	a9 01       	movw	r20, r18
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	46 df       	rcall	.-372    	; 0x13a2 <xQueueGenericSend>
    1516:	ce 01       	movw	r24, r28
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	0f 91       	pop	r16
    151e:	08 95       	ret

00001520 <xQueueGenericSendFromISR>:
    1520:	ef 92       	push	r14
    1522:	ff 92       	push	r15
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	8a 01       	movw	r16, r20
    152e:	fc 01       	movw	r30, r24
    1530:	56 8d       	ldd	r21, Z+30	; 0x1e
    1532:	37 8d       	ldd	r19, Z+31	; 0x1f
    1534:	53 17       	cp	r21, r19
    1536:	10 f0       	brcs	.+4      	; 0x153c <xQueueGenericSendFromISR+0x1c>
    1538:	22 30       	cpi	r18, 0x02	; 2
    153a:	e9 f4       	brne	.+58     	; 0x1576 <xQueueGenericSendFromISR+0x56>
    153c:	42 2f       	mov	r20, r18
    153e:	78 01       	movw	r14, r16
    1540:	ec 01       	movw	r28, r24
    1542:	1a a1       	ldd	r17, Y+34	; 0x22
    1544:	04 de       	rcall	.-1016   	; 0x114e <prvCopyDataToQueue>
    1546:	1f 3f       	cpi	r17, 0xFF	; 255
    1548:	81 f4       	brne	.+32     	; 0x156a <xQueueGenericSendFromISR+0x4a>
    154a:	8b 89       	ldd	r24, Y+19	; 0x13
    154c:	88 23       	and	r24, r24
    154e:	a9 f0       	breq	.+42     	; 0x157a <xQueueGenericSendFromISR+0x5a>
    1550:	ce 01       	movw	r24, r28
    1552:	43 96       	adiw	r24, 0x13	; 19
    1554:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    1558:	88 23       	and	r24, r24
    155a:	89 f0       	breq	.+34     	; 0x157e <xQueueGenericSendFromISR+0x5e>
    155c:	e1 14       	cp	r14, r1
    155e:	f1 04       	cpc	r15, r1
    1560:	81 f0       	breq	.+32     	; 0x1582 <xQueueGenericSendFromISR+0x62>
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	f7 01       	movw	r30, r14
    1566:	80 83       	st	Z, r24
    1568:	0d c0       	rjmp	.+26     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    156a:	ff 24       	eor	r15, r15
    156c:	f3 94       	inc	r15
    156e:	f1 0e       	add	r15, r17
    1570:	fa a2       	std	Y+34, r15	; 0x22
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	07 c0       	rjmp	.+14     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	05 c0       	rjmp	.+10     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <xQueueGenericSendFromISR+0x64>
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	01 c0       	rjmp	.+2      	; 0x1584 <xQueueGenericSendFromISR+0x64>
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	ff 90       	pop	r15
    158e:	ef 90       	pop	r14
    1590:	08 95       	ret

00001592 <xQueueGiveFromISR>:
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	fc 01       	movw	r30, r24
    1598:	86 8d       	ldd	r24, Z+30	; 0x1e
    159a:	97 8d       	ldd	r25, Z+31	; 0x1f
    159c:	89 17       	cp	r24, r25
    159e:	c0 f4       	brcc	.+48     	; 0x15d0 <xQueueGiveFromISR+0x3e>
    15a0:	92 a1       	ldd	r25, Z+34	; 0x22
    15a2:	8f 5f       	subi	r24, 0xFF	; 255
    15a4:	86 8f       	std	Z+30, r24	; 0x1e
    15a6:	9f 3f       	cpi	r25, 0xFF	; 255
    15a8:	79 f4       	brne	.+30     	; 0x15c8 <xQueueGiveFromISR+0x36>
    15aa:	83 89       	ldd	r24, Z+19	; 0x13
    15ac:	88 23       	and	r24, r24
    15ae:	91 f0       	breq	.+36     	; 0x15d4 <xQueueGiveFromISR+0x42>
    15b0:	eb 01       	movw	r28, r22
    15b2:	cf 01       	movw	r24, r30
    15b4:	43 96       	adiw	r24, 0x13	; 19
    15b6:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    15ba:	88 23       	and	r24, r24
    15bc:	69 f0       	breq	.+26     	; 0x15d8 <xQueueGiveFromISR+0x46>
    15be:	20 97       	sbiw	r28, 0x00	; 0
    15c0:	69 f0       	breq	.+26     	; 0x15dc <xQueueGiveFromISR+0x4a>
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	88 83       	st	Y, r24
    15c6:	0b c0       	rjmp	.+22     	; 0x15de <xQueueGiveFromISR+0x4c>
    15c8:	9f 5f       	subi	r25, 0xFF	; 255
    15ca:	92 a3       	std	Z+34, r25	; 0x22
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	07 c0       	rjmp	.+14     	; 0x15de <xQueueGiveFromISR+0x4c>
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	05 c0       	rjmp	.+10     	; 0x15de <xQueueGiveFromISR+0x4c>
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	03 c0       	rjmp	.+6      	; 0x15de <xQueueGiveFromISR+0x4c>
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	01 c0       	rjmp	.+2      	; 0x15de <xQueueGiveFromISR+0x4c>
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	08 95       	ret

000015e4 <xQueueReceive>:
    15e4:	9f 92       	push	r9
    15e6:	af 92       	push	r10
    15e8:	bf 92       	push	r11
    15ea:	cf 92       	push	r12
    15ec:	df 92       	push	r13
    15ee:	ef 92       	push	r14
    15f0:	ff 92       	push	r15
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	29 97       	sbiw	r28, 0x09	; 9
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	8c 01       	movw	r16, r24
    160c:	5b 01       	movw	r10, r22
    160e:	2e 83       	std	Y+6, r18	; 0x06
    1610:	3f 83       	std	Y+7, r19	; 0x07
    1612:	48 87       	std	Y+8, r20	; 0x08
    1614:	59 87       	std	Y+9, r21	; 0x09
    1616:	e1 2c       	mov	r14, r1
    1618:	99 24       	eor	r9, r9
    161a:	93 94       	inc	r9
    161c:	6c 01       	movw	r12, r24
    161e:	83 e1       	ldi	r24, 0x13	; 19
    1620:	c8 0e       	add	r12, r24
    1622:	d1 1c       	adc	r13, r1
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	0f 92       	push	r0
    162a:	f8 01       	movw	r30, r16
    162c:	f6 8c       	ldd	r15, Z+30	; 0x1e
    162e:	ff 20       	and	r15, r15
    1630:	99 f0       	breq	.+38     	; 0x1658 <xQueueReceive+0x74>
    1632:	b5 01       	movw	r22, r10
    1634:	c8 01       	movw	r24, r16
    1636:	ea dd       	rcall	.-1068   	; 0x120c <prvCopyDataFromQueue>
    1638:	fa 94       	dec	r15
    163a:	f8 01       	movw	r30, r16
    163c:	f6 8e       	std	Z+30, r15	; 0x1e
    163e:	80 85       	ldd	r24, Z+8	; 0x08
    1640:	88 23       	and	r24, r24
    1642:	31 f0       	breq	.+12     	; 0x1650 <xQueueReceive+0x6c>
    1644:	c8 01       	movw	r24, r16
    1646:	08 96       	adiw	r24, 0x08	; 8
    1648:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    164c:	81 11       	cpse	r24, r1
    164e:	80 db       	rcall	.-2304   	; 0xd50 <vPortYield>
    1650:	0f 90       	pop	r0
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	51 c0       	rjmp	.+162    	; 0x16fa <xQueueReceive+0x116>
    1658:	8e 81       	ldd	r24, Y+6	; 0x06
    165a:	9f 81       	ldd	r25, Y+7	; 0x07
    165c:	a8 85       	ldd	r26, Y+8	; 0x08
    165e:	b9 85       	ldd	r27, Y+9	; 0x09
    1660:	89 2b       	or	r24, r25
    1662:	8a 2b       	or	r24, r26
    1664:	8b 2b       	or	r24, r27
    1666:	21 f4       	brne	.+8      	; 0x1670 <xQueueReceive+0x8c>
    1668:	0f 90       	pop	r0
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	45 c0       	rjmp	.+138    	; 0x16fa <xQueueReceive+0x116>
    1670:	e1 10       	cpse	r14, r1
    1672:	05 c0       	rjmp	.+10     	; 0x167e <xQueueReceive+0x9a>
    1674:	ce 01       	movw	r24, r28
    1676:	01 96       	adiw	r24, 0x01	; 1
    1678:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    167c:	e9 2c       	mov	r14, r9
    167e:	0f 90       	pop	r0
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	0f 92       	push	r0
    168c:	f8 01       	movw	r30, r16
    168e:	81 a1       	ldd	r24, Z+33	; 0x21
    1690:	8f 3f       	cpi	r24, 0xFF	; 255
    1692:	09 f4       	brne	.+2      	; 0x1696 <xQueueReceive+0xb2>
    1694:	11 a2       	std	Z+33, r1	; 0x21
    1696:	f8 01       	movw	r30, r16
    1698:	82 a1       	ldd	r24, Z+34	; 0x22
    169a:	8f 3f       	cpi	r24, 0xFF	; 255
    169c:	09 f4       	brne	.+2      	; 0x16a0 <xQueueReceive+0xbc>
    169e:	12 a2       	std	Z+34, r1	; 0x22
    16a0:	0f 90       	pop	r0
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	be 01       	movw	r22, r28
    16a6:	6a 5f       	subi	r22, 0xFA	; 250
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	ce 01       	movw	r24, r28
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    16b2:	81 11       	cpse	r24, r1
    16b4:	18 c0       	rjmp	.+48     	; 0x16e6 <xQueueReceive+0x102>
    16b6:	c8 01       	movw	r24, r16
    16b8:	3f dd       	rcall	.-1410   	; 0x1138 <prvIsQueueEmpty>
    16ba:	88 23       	and	r24, r24
    16bc:	79 f0       	breq	.+30     	; 0x16dc <xQueueReceive+0xf8>
    16be:	4e 81       	ldd	r20, Y+6	; 0x06
    16c0:	5f 81       	ldd	r21, Y+7	; 0x07
    16c2:	68 85       	ldd	r22, Y+8	; 0x08
    16c4:	79 85       	ldd	r23, Y+9	; 0x09
    16c6:	c6 01       	movw	r24, r12
    16c8:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    16cc:	c8 01       	movw	r24, r16
    16ce:	b8 dd       	rcall	.-1168   	; 0x1240 <prvUnlockQueue>
    16d0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16d4:	81 11       	cpse	r24, r1
    16d6:	a6 cf       	rjmp	.-180    	; 0x1624 <xQueueReceive+0x40>
    16d8:	3b db       	rcall	.-2442   	; 0xd50 <vPortYield>
    16da:	a4 cf       	rjmp	.-184    	; 0x1624 <xQueueReceive+0x40>
    16dc:	c8 01       	movw	r24, r16
    16de:	b0 dd       	rcall	.-1184   	; 0x1240 <prvUnlockQueue>
    16e0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16e4:	9f cf       	rjmp	.-194    	; 0x1624 <xQueueReceive+0x40>
    16e6:	c8 01       	movw	r24, r16
    16e8:	ab dd       	rcall	.-1194   	; 0x1240 <prvUnlockQueue>
    16ea:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16ee:	c8 01       	movw	r24, r16
    16f0:	23 dd       	rcall	.-1466   	; 0x1138 <prvIsQueueEmpty>
    16f2:	88 23       	and	r24, r24
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <xQueueReceive+0x114>
    16f6:	96 cf       	rjmp	.-212    	; 0x1624 <xQueueReceive+0x40>
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	29 96       	adiw	r28, 0x09	; 9
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	bf 90       	pop	r11
    1718:	af 90       	pop	r10
    171a:	9f 90       	pop	r9
    171c:	08 95       	ret

0000171e <xQueueSemaphoreTake>:
    171e:	bf 92       	push	r11
    1720:	cf 92       	push	r12
    1722:	df 92       	push	r13
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	29 97       	sbiw	r28, 0x09	; 9
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	8c 01       	movw	r16, r24
    1742:	4e 83       	std	Y+6, r20	; 0x06
    1744:	5f 83       	std	Y+7, r21	; 0x07
    1746:	68 87       	std	Y+8, r22	; 0x08
    1748:	79 87       	std	Y+9, r23	; 0x09
    174a:	b1 2c       	mov	r11, r1
    174c:	d1 2c       	mov	r13, r1
    174e:	cc 24       	eor	r12, r12
    1750:	c3 94       	inc	r12
    1752:	7c 01       	movw	r14, r24
    1754:	83 e1       	ldi	r24, 0x13	; 19
    1756:	e8 0e       	add	r14, r24
    1758:	f1 1c       	adc	r15, r1
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	0f 92       	push	r0
    1760:	d8 01       	movw	r26, r16
    1762:	5e 96       	adiw	r26, 0x1e	; 30
    1764:	8c 91       	ld	r24, X
    1766:	5e 97       	sbiw	r26, 0x1e	; 30
    1768:	88 23       	and	r24, r24
    176a:	e1 f0       	breq	.+56     	; 0x17a4 <xQueueSemaphoreTake+0x86>
    176c:	81 50       	subi	r24, 0x01	; 1
    176e:	5e 96       	adiw	r26, 0x1e	; 30
    1770:	8c 93       	st	X, r24
    1772:	5e 97       	sbiw	r26, 0x1e	; 30
    1774:	8d 91       	ld	r24, X+
    1776:	9c 91       	ld	r25, X
    1778:	89 2b       	or	r24, r25
    177a:	29 f4       	brne	.+10     	; 0x1786 <xQueueSemaphoreTake+0x68>
    177c:	0e 94 b6 1a 	call	0x356c	; 0x356c <pvTaskIncrementMutexHeldCount>
    1780:	f8 01       	movw	r30, r16
    1782:	93 83       	std	Z+3, r25	; 0x03
    1784:	82 83       	std	Z+2, r24	; 0x02
    1786:	d8 01       	movw	r26, r16
    1788:	18 96       	adiw	r26, 0x08	; 8
    178a:	8c 91       	ld	r24, X
    178c:	88 23       	and	r24, r24
    178e:	31 f0       	breq	.+12     	; 0x179c <xQueueSemaphoreTake+0x7e>
    1790:	c8 01       	movw	r24, r16
    1792:	08 96       	adiw	r24, 0x08	; 8
    1794:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    1798:	81 11       	cpse	r24, r1
    179a:	da da       	rcall	.-2636   	; 0xd50 <vPortYield>
    179c:	0f 90       	pop	r0
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	7f c0       	rjmp	.+254    	; 0x18a2 <xQueueSemaphoreTake+0x184>
    17a4:	8e 81       	ldd	r24, Y+6	; 0x06
    17a6:	9f 81       	ldd	r25, Y+7	; 0x07
    17a8:	a8 85       	ldd	r26, Y+8	; 0x08
    17aa:	b9 85       	ldd	r27, Y+9	; 0x09
    17ac:	89 2b       	or	r24, r25
    17ae:	8a 2b       	or	r24, r26
    17b0:	8b 2b       	or	r24, r27
    17b2:	21 f4       	brne	.+8      	; 0x17bc <xQueueSemaphoreTake+0x9e>
    17b4:	0f 90       	pop	r0
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	73 c0       	rjmp	.+230    	; 0x18a2 <xQueueSemaphoreTake+0x184>
    17bc:	d1 10       	cpse	r13, r1
    17be:	05 c0       	rjmp	.+10     	; 0x17ca <xQueueSemaphoreTake+0xac>
    17c0:	ce 01       	movw	r24, r28
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    17c8:	dc 2c       	mov	r13, r12
    17ca:	0f 90       	pop	r0
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	0f 92       	push	r0
    17d8:	f8 01       	movw	r30, r16
    17da:	81 a1       	ldd	r24, Z+33	; 0x21
    17dc:	8f 3f       	cpi	r24, 0xFF	; 255
    17de:	09 f4       	brne	.+2      	; 0x17e2 <xQueueSemaphoreTake+0xc4>
    17e0:	11 a2       	std	Z+33, r1	; 0x21
    17e2:	d8 01       	movw	r26, r16
    17e4:	92 96       	adiw	r26, 0x22	; 34
    17e6:	8c 91       	ld	r24, X
    17e8:	92 97       	sbiw	r26, 0x22	; 34
    17ea:	8f 3f       	cpi	r24, 0xFF	; 255
    17ec:	11 f4       	brne	.+4      	; 0x17f2 <xQueueSemaphoreTake+0xd4>
    17ee:	92 96       	adiw	r26, 0x22	; 34
    17f0:	1c 92       	st	X, r1
    17f2:	0f 90       	pop	r0
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	be 01       	movw	r22, r28
    17f8:	6a 5f       	subi	r22, 0xFA	; 250
    17fa:	7f 4f       	sbci	r23, 0xFF	; 255
    17fc:	ce 01       	movw	r24, r28
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    1804:	81 11       	cpse	r24, r1
    1806:	27 c0       	rjmp	.+78     	; 0x1856 <xQueueSemaphoreTake+0x138>
    1808:	c8 01       	movw	r24, r16
    180a:	96 dc       	rcall	.-1748   	; 0x1138 <prvIsQueueEmpty>
    180c:	88 23       	and	r24, r24
    180e:	f1 f0       	breq	.+60     	; 0x184c <xQueueSemaphoreTake+0x12e>
    1810:	f8 01       	movw	r30, r16
    1812:	80 81       	ld	r24, Z
    1814:	91 81       	ldd	r25, Z+1	; 0x01
    1816:	89 2b       	or	r24, r25
    1818:	51 f4       	brne	.+20     	; 0x182e <xQueueSemaphoreTake+0x110>
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	0f 92       	push	r0
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	93 81       	ldd	r25, Z+3	; 0x03
    1824:	0e 94 bc 19 	call	0x3378	; 0x3378 <xTaskPriorityInherit>
    1828:	b8 2e       	mov	r11, r24
    182a:	0f 90       	pop	r0
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	4e 81       	ldd	r20, Y+6	; 0x06
    1830:	5f 81       	ldd	r21, Y+7	; 0x07
    1832:	68 85       	ldd	r22, Y+8	; 0x08
    1834:	79 85       	ldd	r23, Y+9	; 0x09
    1836:	c7 01       	movw	r24, r14
    1838:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    183c:	c8 01       	movw	r24, r16
    183e:	00 dd       	rcall	.-1536   	; 0x1240 <prvUnlockQueue>
    1840:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    1844:	81 11       	cpse	r24, r1
    1846:	89 cf       	rjmp	.-238    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1848:	83 da       	rcall	.-2810   	; 0xd50 <vPortYield>
    184a:	87 cf       	rjmp	.-242    	; 0x175a <xQueueSemaphoreTake+0x3c>
    184c:	c8 01       	movw	r24, r16
    184e:	f8 dc       	rcall	.-1552   	; 0x1240 <prvUnlockQueue>
    1850:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    1854:	82 cf       	rjmp	.-252    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1856:	c8 01       	movw	r24, r16
    1858:	f3 dc       	rcall	.-1562   	; 0x1240 <prvUnlockQueue>
    185a:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    185e:	c8 01       	movw	r24, r16
    1860:	6b dc       	rcall	.-1834   	; 0x1138 <prvIsQueueEmpty>
    1862:	88 23       	and	r24, r24
    1864:	09 f4       	brne	.+2      	; 0x1868 <xQueueSemaphoreTake+0x14a>
    1866:	79 cf       	rjmp	.-270    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1868:	bb 20       	and	r11, r11
    186a:	d1 f0       	breq	.+52     	; 0x18a0 <xQueueSemaphoreTake+0x182>
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	0f 92       	push	r0
    1872:	f8 01       	movw	r30, r16
    1874:	83 89       	ldd	r24, Z+19	; 0x13
    1876:	88 23       	and	r24, r24
    1878:	39 f0       	breq	.+14     	; 0x1888 <xQueueSemaphoreTake+0x16a>
    187a:	02 8c       	ldd	r0, Z+26	; 0x1a
    187c:	f3 8d       	ldd	r31, Z+27	; 0x1b
    187e:	e0 2d       	mov	r30, r0
    1880:	80 81       	ld	r24, Z
    1882:	64 e0       	ldi	r22, 0x04	; 4
    1884:	68 1b       	sub	r22, r24
    1886:	01 c0       	rjmp	.+2      	; 0x188a <xQueueSemaphoreTake+0x16c>
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	d8 01       	movw	r26, r16
    188c:	12 96       	adiw	r26, 0x02	; 2
    188e:	8d 91       	ld	r24, X+
    1890:	9c 91       	ld	r25, X
    1892:	13 97       	sbiw	r26, 0x03	; 3
    1894:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <vTaskPriorityDisinheritAfterTimeout>
    1898:	0f 90       	pop	r0
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <xQueueSemaphoreTake+0x184>
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	29 96       	adiw	r28, 0x09	; 9
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	ff 90       	pop	r15
    18b8:	ef 90       	pop	r14
    18ba:	df 90       	pop	r13
    18bc:	cf 90       	pop	r12
    18be:	bf 90       	pop	r11
    18c0:	08 95       	ret

000018c2 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	0f 92       	push	r0
    18ce:	89 a1       	ldd	r24, Y+33	; 0x21
    18d0:	8f 3f       	cpi	r24, 0xFF	; 255
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <vQueueWaitForMessageRestricted+0x14>
    18d4:	19 a2       	std	Y+33, r1	; 0x21
    18d6:	8a a1       	ldd	r24, Y+34	; 0x22
    18d8:	8f 3f       	cpi	r24, 0xFF	; 255
    18da:	09 f4       	brne	.+2      	; 0x18de <vQueueWaitForMessageRestricted+0x1c>
    18dc:	1a a2       	std	Y+34, r1	; 0x22
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    18e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18e4:	81 11       	cpse	r24, r1
    18e6:	04 c0       	rjmp	.+8      	; 0x18f0 <vQueueWaitForMessageRestricted+0x2e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    18e8:	ce 01       	movw	r24, r28
    18ea:	43 96       	adiw	r24, 0x13	; 19
    18ec:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    18f0:	ce 01       	movw	r24, r28
    18f2:	a6 dc       	rcall	.-1716   	; 0x1240 <prvUnlockQueue>
	}
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	08 95       	ret

000018fa <xSerialxPrint>:

		default:
			break;
	}
	return 0;
}
    18fa:	4f 92       	push	r4
    18fc:	5f 92       	push	r5
    18fe:	6f 92       	push	r6
    1900:	7f 92       	push	r7
    1902:	8f 92       	push	r8
    1904:	9f 92       	push	r9
    1906:	af 92       	push	r10
    1908:	bf 92       	push	r11
    190a:	cf 92       	push	r12
    190c:	df 92       	push	r13
    190e:	ef 92       	push	r14
    1910:	ff 92       	push	r15
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	ec 01       	movw	r28, r24
    191c:	fb 01       	movw	r30, r22
    191e:	01 90       	ld	r0, Z+
    1920:	00 20       	and	r0, r0
    1922:	e9 f7       	brne	.-6      	; 0x191e <xSerialxPrint+0x24>
    1924:	4b 01       	movw	r8, r22
    1926:	9f 01       	movw	r18, r30
    1928:	21 50       	subi	r18, 0x01	; 1
    192a:	31 09       	sbc	r19, r1
    192c:	0f 2e       	mov	r0, r31
    192e:	f1 e3       	ldi	r31, 0x31	; 49
    1930:	ef 2e       	mov	r14, r31
    1932:	ff 24       	eor	r15, r15
    1934:	f3 94       	inc	r15
    1936:	f0 2d       	mov	r31, r0
    1938:	01 ed       	ldi	r16, 0xD1	; 209
    193a:	10 e0       	ldi	r17, 0x00	; 0
    193c:	69 ec       	ldi	r22, 0xC9	; 201
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	41 ec       	ldi	r20, 0xC1	; 193
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	5c 01       	movw	r10, r24
    1946:	8d e0       	ldi	r24, 0x0D	; 13
    1948:	a8 0e       	add	r10, r24
    194a:	b1 1c       	adc	r11, r1
    194c:	78 c0       	rjmp	.+240    	; 0x1a3e <xSerialxPrint+0x144>
    194e:	d4 01       	movw	r26, r8
    1950:	dd 90       	ld	r13, X+
    1952:	4d 01       	movw	r8, r26
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	0f 92       	push	r0
    195a:	ed 85       	ldd	r30, Y+13	; 0x0d
    195c:	fe 85       	ldd	r31, Y+14	; 0x0e
    195e:	0f 90       	pop	r0
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	8f 89       	ldd	r24, Y+23	; 0x17
    1964:	98 8d       	ldd	r25, Y+24	; 0x18
    1966:	e8 17       	cp	r30, r24
    1968:	f9 07       	cpc	r31, r25
    196a:	f1 f0       	breq	.+60     	; 0x19a8 <xSerialxPrint+0xae>
    196c:	f5 01       	movw	r30, r10
    196e:	82 81       	ldd	r24, Z+2	; 0x02
    1970:	93 81       	ldd	r25, Z+3	; 0x03
    1972:	dc 01       	movw	r26, r24
    1974:	dc 92       	st	X, r13
    1976:	82 81       	ldd	r24, Z+2	; 0x02
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	93 83       	std	Z+3, r25	; 0x03
    197e:	82 83       	std	Z+2, r24	; 0x02
    1980:	c0 84       	ldd	r12, Z+8	; 0x08
    1982:	d1 84       	ldd	r13, Z+9	; 0x09
    1984:	8c 15       	cp	r24, r12
    1986:	9d 05       	cpc	r25, r13
    1988:	21 f4       	brne	.+8      	; 0x1992 <xSerialxPrint+0x98>
    198a:	86 81       	ldd	r24, Z+6	; 0x06
    198c:	97 81       	ldd	r25, Z+7	; 0x07
    198e:	93 83       	std	Z+3, r25	; 0x03
    1990:	82 83       	std	Z+2, r24	; 0x02
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	0f 92       	push	r0
    1998:	80 81       	ld	r24, Z
    199a:	91 81       	ldd	r25, Z+1	; 0x01
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	80 83       	st	Z, r24
    19a2:	0f 90       	pop	r0
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	2b c0       	rjmp	.+86     	; 0x19fe <xSerialxPrint+0x104>
    19a8:	00 00       	nop
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	0f 92       	push	r0
    19b0:	ed 85       	ldd	r30, Y+13	; 0x0d
    19b2:	fe 85       	ldd	r31, Y+14	; 0x0e
    19b4:	0f 90       	pop	r0
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ba:	98 8d       	ldd	r25, Y+24	; 0x18
    19bc:	e8 17       	cp	r30, r24
    19be:	f9 07       	cpc	r31, r25
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <xSerialxPrint+0xca>
    19c2:	3d c0       	rjmp	.+122    	; 0x1a3e <xSerialxPrint+0x144>
    19c4:	f5 01       	movw	r30, r10
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	dc 01       	movw	r26, r24
    19cc:	dc 92       	st	X, r13
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	93 83       	std	Z+3, r25	; 0x03
    19d6:	82 83       	std	Z+2, r24	; 0x02
    19d8:	c0 84       	ldd	r12, Z+8	; 0x08
    19da:	d1 84       	ldd	r13, Z+9	; 0x09
    19dc:	8c 15       	cp	r24, r12
    19de:	9d 05       	cpc	r25, r13
    19e0:	21 f4       	brne	.+8      	; 0x19ea <xSerialxPrint+0xf0>
    19e2:	86 81       	ldd	r24, Z+6	; 0x06
    19e4:	97 81       	ldd	r25, Z+7	; 0x07
    19e6:	93 83       	std	Z+3, r25	; 0x03
    19e8:	82 83       	std	Z+2, r24	; 0x02
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	0f 92       	push	r0
    19f0:	80 81       	ld	r24, Z
    19f2:	91 81       	ldd	r25, Z+1	; 0x01
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	80 83       	st	Z, r24
    19fa:	0f 90       	pop	r0
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	48 80       	ld	r4, Y
    1a00:	51 2c       	mov	r5, r1
    1a02:	b8 e0       	ldi	r27, 0x08	; 8
    1a04:	4b 16       	cp	r4, r27
    1a06:	51 04       	cpc	r5, r1
    1a08:	d0 f4       	brcc	.+52     	; 0x1a3e <xSerialxPrint+0x144>
    1a0a:	f2 01       	movw	r30, r4
    1a0c:	88 27       	eor	r24, r24
    1a0e:	ee 58       	subi	r30, 0x8E	; 142
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	8f 4f       	sbci	r24, 0xFF	; 255
    1a14:	0c 94 04 58 	jmp	0xb008	; 0xb008 <__tablejump2__>
    1a18:	fa 01       	movw	r30, r20
    1a1a:	80 81       	ld	r24, Z
    1a1c:	80 62       	ori	r24, 0x20	; 32
    1a1e:	80 83       	st	Z, r24
    1a20:	0e c0       	rjmp	.+28     	; 0x1a3e <xSerialxPrint+0x144>
    1a22:	db 01       	movw	r26, r22
    1a24:	8c 91       	ld	r24, X
    1a26:	80 62       	ori	r24, 0x20	; 32
    1a28:	8c 93       	st	X, r24
    1a2a:	09 c0       	rjmp	.+18     	; 0x1a3e <xSerialxPrint+0x144>
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	80 81       	ld	r24, Z
    1a30:	80 62       	ori	r24, 0x20	; 32
    1a32:	80 83       	st	Z, r24
    1a34:	04 c0       	rjmp	.+8      	; 0x1a3e <xSerialxPrint+0x144>
    1a36:	d7 01       	movw	r26, r14
    1a38:	8c 91       	ld	r24, X
    1a3a:	80 62       	ori	r24, 0x20	; 32
    1a3c:	8c 93       	st	X, r24
    1a3e:	82 16       	cp	r8, r18
    1a40:	93 06       	cpc	r9, r19
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <xSerialxPrint+0x14c>
    1a44:	84 cf       	rjmp	.-248    	; 0x194e <xSerialxPrint+0x54>
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	ff 90       	pop	r15
    1a50:	ef 90       	pop	r14
    1a52:	df 90       	pop	r13
    1a54:	cf 90       	pop	r12
    1a56:	bf 90       	pop	r11
    1a58:	af 90       	pop	r10
    1a5a:	9f 90       	pop	r9
    1a5c:	8f 90       	pop	r8
    1a5e:	7f 90       	pop	r7
    1a60:	6f 90       	pop	r6
    1a62:	5f 90       	pop	r5
    1a64:	4f 90       	pop	r4
    1a66:	08 95       	ret

00001a68 <xSerialxPrintf>:
    1a68:	0f 93       	push	r16
    1a6a:	1f 93       	push	r17
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	08 85       	ldd	r16, Y+8	; 0x08
    1a76:	19 85       	ldd	r17, Y+9	; 0x09
    1a78:	f8 01       	movw	r30, r16
    1a7a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	29 f4       	brne	.+10     	; 0x1a8a <xSerialxPrintf+0x22>
    1a80:	67 d9       	rcall	.-3378   	; 0xd50 <vPortYield>
    1a82:	f8 01       	movw	r30, r16
    1a84:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a86:	81 30       	cpi	r24, 0x01	; 1
    1a88:	d9 f3       	breq	.-10     	; 0x1a80 <xSerialxPrintf+0x18>
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	85 8f       	std	Z+29, r24	; 0x1d
    1a90:	63 8d       	ldd	r22, Z+27	; 0x1b
    1a92:	74 8d       	ldd	r23, Z+28	; 0x1c
    1a94:	9e 01       	movw	r18, r28
    1a96:	24 5f       	subi	r18, 0xF4	; 244
    1a98:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9a:	4a 85       	ldd	r20, Y+10	; 0x0a
    1a9c:	5b 85       	ldd	r21, Y+11	; 0x0b
    1a9e:	81 8d       	ldd	r24, Z+25	; 0x19
    1aa0:	92 8d       	ldd	r25, Z+26	; 0x1a
    1aa2:	0e 94 76 5a 	call	0xb4ec	; 0xb4ec <vsnprintf>
    1aa6:	f8 01       	movw	r30, r16
    1aa8:	61 8d       	ldd	r22, Z+25	; 0x19
    1aaa:	72 8d       	ldd	r23, Z+26	; 0x1a
    1aac:	c8 01       	movw	r24, r16
    1aae:	25 df       	rcall	.-438    	; 0x18fa <xSerialxPrint>
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	15 8e       	std	Z+29, r1	; 0x1d
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	08 95       	ret

00001abe <xSerialRxFlush>:
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	4c 91       	ld	r20, X
    1ac6:	50 e0       	ldi	r21, 0x00	; 0
    1ac8:	48 30       	cpi	r20, 0x08	; 8
    1aca:	51 05       	cpc	r21, r1
    1acc:	e8 f5       	brcc	.+122    	; 0x1b48 <xSerialRxFlush+0x8a>
    1ace:	fa 01       	movw	r30, r20
    1ad0:	88 27       	eor	r24, r24
    1ad2:	e6 58       	subi	r30, 0x86	; 134
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad8:	0c 94 04 58 	jmp	0xb008	; 0xb008 <__tablejump2__>
    1adc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1ae0:	88 23       	and	r24, r24
    1ae2:	54 f1       	brlt	.+84     	; 0x1b38 <xSerialRxFlush+0x7a>
    1ae4:	31 c0       	rjmp	.+98     	; 0x1b48 <xSerialRxFlush+0x8a>
    1ae6:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1aea:	88 23       	and	r24, r24
    1aec:	e4 f0       	brlt	.+56     	; 0x1b26 <xSerialRxFlush+0x68>
    1aee:	2c c0       	rjmp	.+88     	; 0x1b48 <xSerialRxFlush+0x8a>
    1af0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1af4:	88 23       	and	r24, r24
    1af6:	74 f0       	brlt	.+28     	; 0x1b14 <xSerialRxFlush+0x56>
    1af8:	27 c0       	rjmp	.+78     	; 0x1b48 <xSerialRxFlush+0x8a>
    1afa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1afe:	88 23       	and	r24, r24
    1b00:	1c f5       	brge	.+70     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b02:	c6 ec       	ldi	r28, 0xC6	; 198
    1b04:	d0 e0       	ldi	r29, 0x00	; 0
    1b06:	e0 ec       	ldi	r30, 0xC0	; 192
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	88 81       	ld	r24, Y
    1b0c:	80 81       	ld	r24, Z
    1b0e:	88 23       	and	r24, r24
    1b10:	e4 f3       	brlt	.-8      	; 0x1b0a <xSerialRxFlush+0x4c>
    1b12:	1a c0       	rjmp	.+52     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b14:	ce ec       	ldi	r28, 0xCE	; 206
    1b16:	d0 e0       	ldi	r29, 0x00	; 0
    1b18:	e8 ec       	ldi	r30, 0xC8	; 200
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	88 81       	ld	r24, Y
    1b1e:	80 81       	ld	r24, Z
    1b20:	88 23       	and	r24, r24
    1b22:	e4 f3       	brlt	.-8      	; 0x1b1c <xSerialRxFlush+0x5e>
    1b24:	11 c0       	rjmp	.+34     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b26:	c6 ed       	ldi	r28, 0xD6	; 214
    1b28:	d0 e0       	ldi	r29, 0x00	; 0
    1b2a:	e0 ed       	ldi	r30, 0xD0	; 208
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	88 81       	ld	r24, Y
    1b30:	80 81       	ld	r24, Z
    1b32:	88 23       	and	r24, r24
    1b34:	e4 f3       	brlt	.-8      	; 0x1b2e <xSerialRxFlush+0x70>
    1b36:	08 c0       	rjmp	.+16     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b38:	c6 e3       	ldi	r28, 0x36	; 54
    1b3a:	d1 e0       	ldi	r29, 0x01	; 1
    1b3c:	e0 e3       	ldi	r30, 0x30	; 48
    1b3e:	f1 e0       	ldi	r31, 0x01	; 1
    1b40:	88 81       	ld	r24, Y
    1b42:	80 81       	ld	r24, Z
    1b44:	88 23       	and	r24, r24
    1b46:	e4 f3       	brlt	.-8      	; 0x1b40 <xSerialRxFlush+0x82>
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	0f 92       	push	r0
    1b4e:	12 96       	adiw	r26, 0x02	; 2
    1b50:	1c 92       	st	X, r1
    1b52:	1e 92       	st	-X, r1
    1b54:	11 97       	sbiw	r26, 0x01	; 1
    1b56:	17 96       	adiw	r26, 0x07	; 7
    1b58:	8d 91       	ld	r24, X+
    1b5a:	9c 91       	ld	r25, X
    1b5c:	18 97       	sbiw	r26, 0x08	; 8
    1b5e:	14 96       	adiw	r26, 0x04	; 4
    1b60:	9c 93       	st	X, r25
    1b62:	8e 93       	st	-X, r24
    1b64:	13 97       	sbiw	r26, 0x03	; 3
    1b66:	16 96       	adiw	r26, 0x06	; 6
    1b68:	9c 93       	st	X, r25
    1b6a:	8e 93       	st	-X, r24
    1b6c:	15 97       	sbiw	r26, 0x05	; 5
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	08 95       	ret

00001b78 <xSerialAvailableChar>:
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	0f 92       	push	r0
    1b7e:	fc 01       	movw	r30, r24
    1b80:	81 81       	ldd	r24, Z+1	; 0x01
    1b82:	92 81       	ldd	r25, Z+2	; 0x02
    1b84:	0f 90       	pop	r0
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	08 95       	ret

00001b8a <xSerialPutChar>:
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	dc 01       	movw	r26, r24
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	0f 92       	push	r0
    1b96:	1d 96       	adiw	r26, 0x0d	; 13
    1b98:	2d 91       	ld	r18, X+
    1b9a:	3c 91       	ld	r19, X
    1b9c:	1e 97       	sbiw	r26, 0x0e	; 14
    1b9e:	0f 90       	pop	r0
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	57 96       	adiw	r26, 0x17	; 23
    1ba4:	8d 91       	ld	r24, X+
    1ba6:	9c 91       	ld	r25, X
    1ba8:	58 97       	sbiw	r26, 0x18	; 24
    1baa:	28 17       	cp	r18, r24
    1bac:	39 07       	cpc	r19, r25
    1bae:	f1 f0       	breq	.+60     	; 0x1bec <xSerialPutChar+0x62>
    1bb0:	fd 01       	movw	r30, r26
    1bb2:	3d 96       	adiw	r30, 0x0d	; 13
    1bb4:	c2 81       	ldd	r28, Z+2	; 0x02
    1bb6:	d3 81       	ldd	r29, Z+3	; 0x03
    1bb8:	68 83       	st	Y, r22
    1bba:	82 81       	ldd	r24, Z+2	; 0x02
    1bbc:	93 81       	ldd	r25, Z+3	; 0x03
    1bbe:	01 96       	adiw	r24, 0x01	; 1
    1bc0:	93 83       	std	Z+3, r25	; 0x03
    1bc2:	82 83       	std	Z+2, r24	; 0x02
    1bc4:	20 85       	ldd	r18, Z+8	; 0x08
    1bc6:	31 85       	ldd	r19, Z+9	; 0x09
    1bc8:	82 17       	cp	r24, r18
    1bca:	93 07       	cpc	r25, r19
    1bcc:	21 f4       	brne	.+8      	; 0x1bd6 <xSerialPutChar+0x4c>
    1bce:	86 81       	ldd	r24, Z+6	; 0x06
    1bd0:	97 81       	ldd	r25, Z+7	; 0x07
    1bd2:	93 83       	std	Z+3, r25	; 0x03
    1bd4:	82 83       	std	Z+2, r24	; 0x02
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	0f 92       	push	r0
    1bdc:	80 81       	ld	r24, Z
    1bde:	91 81       	ldd	r25, Z+1	; 0x01
    1be0:	01 96       	adiw	r24, 0x01	; 1
    1be2:	91 83       	std	Z+1, r25	; 0x01
    1be4:	80 83       	st	Z, r24
    1be6:	0f 90       	pop	r0
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	2f c0       	rjmp	.+94     	; 0x1c4a <xSerialPutChar+0xc0>
    1bec:	00 00       	nop
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	0f 92       	push	r0
    1bf4:	1d 96       	adiw	r26, 0x0d	; 13
    1bf6:	2d 91       	ld	r18, X+
    1bf8:	3c 91       	ld	r19, X
    1bfa:	1e 97       	sbiw	r26, 0x0e	; 14
    1bfc:	0f 90       	pop	r0
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	57 96       	adiw	r26, 0x17	; 23
    1c02:	8d 91       	ld	r24, X+
    1c04:	9c 91       	ld	r25, X
    1c06:	58 97       	sbiw	r26, 0x18	; 24
    1c08:	28 17       	cp	r18, r24
    1c0a:	39 07       	cpc	r19, r25
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <xSerialPutChar+0x86>
    1c0e:	45 c0       	rjmp	.+138    	; 0x1c9a <xSerialPutChar+0x110>
    1c10:	fd 01       	movw	r30, r26
    1c12:	3d 96       	adiw	r30, 0x0d	; 13
    1c14:	c2 81       	ldd	r28, Z+2	; 0x02
    1c16:	d3 81       	ldd	r29, Z+3	; 0x03
    1c18:	68 83       	st	Y, r22
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	01 96       	adiw	r24, 0x01	; 1
    1c20:	93 83       	std	Z+3, r25	; 0x03
    1c22:	82 83       	std	Z+2, r24	; 0x02
    1c24:	20 85       	ldd	r18, Z+8	; 0x08
    1c26:	31 85       	ldd	r19, Z+9	; 0x09
    1c28:	82 17       	cp	r24, r18
    1c2a:	93 07       	cpc	r25, r19
    1c2c:	21 f4       	brne	.+8      	; 0x1c36 <xSerialPutChar+0xac>
    1c2e:	86 81       	ldd	r24, Z+6	; 0x06
    1c30:	97 81       	ldd	r25, Z+7	; 0x07
    1c32:	93 83       	std	Z+3, r25	; 0x03
    1c34:	82 83       	std	Z+2, r24	; 0x02
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	0f 92       	push	r0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	91 81       	ldd	r25, Z+1	; 0x01
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	80 83       	st	Z, r24
    1c46:	0f 90       	pop	r0
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	8c 91       	ld	r24, X
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	88 30       	cpi	r24, 0x08	; 8
    1c50:	91 05       	cpc	r25, r1
    1c52:	28 f5       	brcc	.+74     	; 0x1c9e <xSerialPutChar+0x114>
    1c54:	fc 01       	movw	r30, r24
    1c56:	88 27       	eor	r24, r24
    1c58:	ee 57       	subi	r30, 0x7E	; 126
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5e:	0c 94 04 58 	jmp	0xb008	; 0xb008 <__tablejump2__>
    1c62:	e1 ec       	ldi	r30, 0xC1	; 193
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	80 62       	ori	r24, 0x20	; 32
    1c6a:	80 83       	st	Z, r24
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	18 c0       	rjmp	.+48     	; 0x1ca0 <xSerialPutChar+0x116>
    1c70:	e9 ec       	ldi	r30, 0xC9	; 201
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	80 62       	ori	r24, 0x20	; 32
    1c78:	80 83       	st	Z, r24
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	11 c0       	rjmp	.+34     	; 0x1ca0 <xSerialPutChar+0x116>
    1c7e:	e1 ed       	ldi	r30, 0xD1	; 209
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	80 62       	ori	r24, 0x20	; 32
    1c86:	80 83       	st	Z, r24
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	0a c0       	rjmp	.+20     	; 0x1ca0 <xSerialPutChar+0x116>
    1c8c:	e1 e3       	ldi	r30, 0x31	; 49
    1c8e:	f1 e0       	ldi	r31, 0x01	; 1
    1c90:	80 81       	ld	r24, Z
    1c92:	80 62       	ori	r24, 0x20	; 32
    1c94:	80 83       	st	Z, r24
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	03 c0       	rjmp	.+6      	; 0x1ca0 <xSerialPutChar+0x116>
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	01 c0       	rjmp	.+2      	; 0x1ca0 <xSerialPutChar+0x116>
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	08 95       	ret

00001ca6 <xSerialPortInitMinimal>:
    1ca6:	7f 92       	push	r7
    1ca8:	8f 92       	push	r8
    1caa:	9f 92       	push	r9
    1cac:	af 92       	push	r10
    1cae:	bf 92       	push	r11
    1cb0:	cf 92       	push	r12
    1cb2:	df 92       	push	r13
    1cb4:	ef 92       	push	r14
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	a2 97       	sbiw	r28, 0x22	; 34
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	6c 01       	movw	r12, r24
    1cd2:	76 2e       	mov	r7, r22
    1cd4:	49 01       	movw	r8, r18
    1cd6:	5a 01       	movw	r10, r20
    1cd8:	c7 01       	movw	r24, r14
    1cda:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	a9 f0       	breq	.+42     	; 0x1d0c <xSerialPortInitMinimal+0x66>
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	32 96       	adiw	r30, 0x02	; 2
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	0f 92       	push	r0
    1cec:	11 82       	std	Z+1, r1	; 0x01
    1cee:	10 82       	st	Z, r1
    1cf0:	93 83       	std	Z+3, r25	; 0x03
    1cf2:	82 83       	std	Z+2, r24	; 0x02
    1cf4:	95 83       	std	Z+5, r25	; 0x05
    1cf6:	84 83       	std	Z+4, r24	; 0x04
    1cf8:	97 83       	std	Z+7, r25	; 0x07
    1cfa:	86 83       	std	Z+6, r24	; 0x06
    1cfc:	8e 0d       	add	r24, r14
    1cfe:	9f 1d       	adc	r25, r15
    1d00:	91 87       	std	Z+9, r25	; 0x09
    1d02:	80 87       	std	Z+8, r24	; 0x08
    1d04:	f3 86       	std	Z+11, r15	; 0x0b
    1d06:	e2 86       	std	Z+10, r14	; 0x0a
    1d08:	0f 90       	pop	r0
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	c8 01       	movw	r24, r16
    1d0e:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	a9 f0       	breq	.+42     	; 0x1d40 <xSerialPortInitMinimal+0x9a>
    1d16:	fe 01       	movw	r30, r28
    1d18:	3e 96       	adiw	r30, 0x0e	; 14
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	0f 92       	push	r0
    1d20:	11 82       	std	Z+1, r1	; 0x01
    1d22:	10 82       	st	Z, r1
    1d24:	93 83       	std	Z+3, r25	; 0x03
    1d26:	82 83       	std	Z+2, r24	; 0x02
    1d28:	95 83       	std	Z+5, r25	; 0x05
    1d2a:	84 83       	std	Z+4, r24	; 0x04
    1d2c:	97 83       	std	Z+7, r25	; 0x07
    1d2e:	86 83       	std	Z+6, r24	; 0x06
    1d30:	80 0f       	add	r24, r16
    1d32:	91 1f       	adc	r25, r17
    1d34:	91 87       	std	Z+9, r25	; 0x09
    1d36:	80 87       	std	Z+8, r24	; 0x08
    1d38:	13 87       	std	Z+11, r17	; 0x0b
    1d3a:	02 87       	std	Z+10, r16	; 0x0a
    1d3c:	0f 90       	pop	r0
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	c8 01       	movw	r24, r16
    1d42:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1d46:	9b 8f       	std	Y+27, r25	; 0x1b
    1d48:	8a 8f       	std	Y+26, r24	; 0x1a
    1d4a:	79 82       	std	Y+1, r7	; 0x01
    1d4c:	1d 8f       	std	Y+29, r17	; 0x1d
    1d4e:	0c 8f       	std	Y+28, r16	; 0x1c
    1d50:	1e 8e       	std	Y+30, r1	; 0x1e
    1d52:	8f 8e       	std	Y+31, r8	; 0x1f
    1d54:	98 a2       	std	Y+32, r9	; 0x20
    1d56:	a9 a2       	std	Y+33, r10	; 0x21
    1d58:	ba a2       	std	Y+34, r11	; 0x22
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	f8 94       	cli
    1d5e:	0f 92       	push	r0
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	88 30       	cpi	r24, 0x08	; 8
    1d66:	91 05       	cpc	r25, r1
    1d68:	08 f0       	brcs	.+2      	; 0x1d6c <xSerialPortInitMinimal+0xc6>
    1d6a:	ba c1       	rjmp	.+884    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	88 27       	eor	r24, r24
    1d70:	e6 57       	subi	r30, 0x76	; 118
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	8f 4f       	sbci	r24, 0xFF	; 255
    1d76:	0c 94 04 58 	jmp	0xb008	; 0xb008 <__tablejump2__>
    1d7a:	d5 01       	movw	r26, r10
    1d7c:	c4 01       	movw	r24, r8
    1d7e:	97 5f       	subi	r25, 0xF7	; 247
    1d80:	a2 4c       	sbci	r26, 0xC2	; 194
    1d82:	bf 4f       	sbci	r27, 0xFF	; 255
    1d84:	bc 01       	movw	r22, r24
    1d86:	cd 01       	movw	r24, r26
    1d88:	66 0f       	add	r22, r22
    1d8a:	77 1f       	adc	r23, r23
    1d8c:	88 1f       	adc	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	66 0f       	add	r22, r22
    1d92:	77 1f       	adc	r23, r23
    1d94:	88 1f       	adc	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	95 01       	movw	r18, r10
    1d9a:	84 01       	movw	r16, r8
    1d9c:	00 0f       	add	r16, r16
    1d9e:	11 1f       	adc	r17, r17
    1da0:	22 1f       	adc	r18, r18
    1da2:	33 1f       	adc	r19, r19
    1da4:	00 0f       	add	r16, r16
    1da6:	11 1f       	adc	r17, r17
    1da8:	22 1f       	adc	r18, r18
    1daa:	33 1f       	adc	r19, r19
    1dac:	a9 01       	movw	r20, r18
    1dae:	98 01       	movw	r18, r16
    1db0:	22 0f       	add	r18, r18
    1db2:	33 1f       	adc	r19, r19
    1db4:	44 1f       	adc	r20, r20
    1db6:	55 1f       	adc	r21, r21
    1db8:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <__udivmodsi4>
    1dbc:	21 50       	subi	r18, 0x01	; 1
    1dbe:	31 09       	sbc	r19, r1
    1dc0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1dc4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1dce:	88 e9       	ldi	r24, 0x98	; 152
    1dd0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1dd4:	8e e0       	ldi	r24, 0x0E	; 14
    1dd6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1dda:	82 c1       	rjmp	.+772    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1ddc:	04 ec       	ldi	r16, 0xC4	; 196
    1dde:	10 e0       	ldi	r17, 0x00	; 0
    1de0:	f8 01       	movw	r30, r16
    1de2:	11 82       	std	Z+1, r1	; 0x01
    1de4:	10 82       	st	Z, r1
    1de6:	6a 9a       	sbi	0x0d, 2	; 13
    1de8:	80 ec       	ldi	r24, 0xC0	; 192
    1dea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1dee:	88 e9       	ldi	r24, 0x98	; 152
    1df0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1df4:	d5 01       	movw	r26, r10
    1df6:	c4 01       	movw	r24, r8
    1df8:	80 58       	subi	r24, 0x80	; 128
    1dfa:	9b 47       	sbci	r25, 0x7B	; 123
    1dfc:	a1 4e       	sbci	r26, 0xE1	; 225
    1dfe:	bf 4f       	sbci	r27, 0xFF	; 255
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	aa 1f       	adc	r26, r26
    1e06:	bb 1f       	adc	r27, r27
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	aa 1f       	adc	r26, r26
    1e0e:	bb 1f       	adc	r27, r27
    1e10:	bc 01       	movw	r22, r24
    1e12:	cd 01       	movw	r24, r26
    1e14:	66 0f       	add	r22, r22
    1e16:	77 1f       	adc	r23, r23
    1e18:	88 1f       	adc	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	88 0c       	add	r8, r8
    1e1e:	99 1c       	adc	r9, r9
    1e20:	aa 1c       	adc	r10, r10
    1e22:	bb 1c       	adc	r11, r11
    1e24:	88 0c       	add	r8, r8
    1e26:	99 1c       	adc	r9, r9
    1e28:	aa 1c       	adc	r10, r10
    1e2a:	bb 1c       	adc	r11, r11
    1e2c:	a5 01       	movw	r20, r10
    1e2e:	94 01       	movw	r18, r8
    1e30:	22 0f       	add	r18, r18
    1e32:	33 1f       	adc	r19, r19
    1e34:	44 1f       	adc	r20, r20
    1e36:	55 1f       	adc	r21, r21
    1e38:	22 0f       	add	r18, r18
    1e3a:	33 1f       	adc	r19, r19
    1e3c:	44 1f       	adc	r20, r20
    1e3e:	55 1f       	adc	r21, r21
    1e40:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <__udivmodsi4>
    1e44:	21 50       	subi	r18, 0x01	; 1
    1e46:	31 09       	sbc	r19, r1
    1e48:	f8 01       	movw	r30, r16
    1e4a:	31 83       	std	Z+1, r19	; 0x01
    1e4c:	20 83       	st	Z, r18
    1e4e:	48 c1       	rjmp	.+656    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1e50:	d5 01       	movw	r26, r10
    1e52:	c4 01       	movw	r24, r8
    1e54:	97 5f       	subi	r25, 0xF7	; 247
    1e56:	a2 4c       	sbci	r26, 0xC2	; 194
    1e58:	bf 4f       	sbci	r27, 0xFF	; 255
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	66 0f       	add	r22, r22
    1e60:	77 1f       	adc	r23, r23
    1e62:	88 1f       	adc	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	66 0f       	add	r22, r22
    1e68:	77 1f       	adc	r23, r23
    1e6a:	88 1f       	adc	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	95 01       	movw	r18, r10
    1e70:	84 01       	movw	r16, r8
    1e72:	00 0f       	add	r16, r16
    1e74:	11 1f       	adc	r17, r17
    1e76:	22 1f       	adc	r18, r18
    1e78:	33 1f       	adc	r19, r19
    1e7a:	00 0f       	add	r16, r16
    1e7c:	11 1f       	adc	r17, r17
    1e7e:	22 1f       	adc	r18, r18
    1e80:	33 1f       	adc	r19, r19
    1e82:	a9 01       	movw	r20, r18
    1e84:	98 01       	movw	r18, r16
    1e86:	22 0f       	add	r18, r18
    1e88:	33 1f       	adc	r19, r19
    1e8a:	44 1f       	adc	r20, r20
    1e8c:	55 1f       	adc	r21, r21
    1e8e:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <__udivmodsi4>
    1e92:	21 50       	subi	r18, 0x01	; 1
    1e94:	31 09       	sbc	r19, r1
    1e96:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    1e9a:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    1e9e:	82 e0       	ldi	r24, 0x02	; 2
    1ea0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1ea4:	88 e9       	ldi	r24, 0x98	; 152
    1ea6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1eaa:	8e e0       	ldi	r24, 0x0E	; 14
    1eac:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1eb0:	17 c1       	rjmp	.+558    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1eb2:	0c ec       	ldi	r16, 0xCC	; 204
    1eb4:	10 e0       	ldi	r17, 0x00	; 0
    1eb6:	f8 01       	movw	r30, r16
    1eb8:	11 82       	std	Z+1, r1	; 0x01
    1eba:	10 82       	st	Z, r1
    1ebc:	55 9a       	sbi	0x0a, 5	; 10
    1ebe:	80 ec       	ldi	r24, 0xC0	; 192
    1ec0:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1ec4:	88 e9       	ldi	r24, 0x98	; 152
    1ec6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1eca:	d5 01       	movw	r26, r10
    1ecc:	c4 01       	movw	r24, r8
    1ece:	80 58       	subi	r24, 0x80	; 128
    1ed0:	9b 47       	sbci	r25, 0x7B	; 123
    1ed2:	a1 4e       	sbci	r26, 0xE1	; 225
    1ed4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	aa 1f       	adc	r26, r26
    1edc:	bb 1f       	adc	r27, r27
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	aa 1f       	adc	r26, r26
    1ee4:	bb 1f       	adc	r27, r27
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	66 0f       	add	r22, r22
    1eec:	77 1f       	adc	r23, r23
    1eee:	88 1f       	adc	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	88 0c       	add	r8, r8
    1ef4:	99 1c       	adc	r9, r9
    1ef6:	aa 1c       	adc	r10, r10
    1ef8:	bb 1c       	adc	r11, r11
    1efa:	88 0c       	add	r8, r8
    1efc:	99 1c       	adc	r9, r9
    1efe:	aa 1c       	adc	r10, r10
    1f00:	bb 1c       	adc	r11, r11
    1f02:	a5 01       	movw	r20, r10
    1f04:	94 01       	movw	r18, r8
    1f06:	22 0f       	add	r18, r18
    1f08:	33 1f       	adc	r19, r19
    1f0a:	44 1f       	adc	r20, r20
    1f0c:	55 1f       	adc	r21, r21
    1f0e:	22 0f       	add	r18, r18
    1f10:	33 1f       	adc	r19, r19
    1f12:	44 1f       	adc	r20, r20
    1f14:	55 1f       	adc	r21, r21
    1f16:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <__udivmodsi4>
    1f1a:	21 50       	subi	r18, 0x01	; 1
    1f1c:	31 09       	sbc	r19, r1
    1f1e:	f8 01       	movw	r30, r16
    1f20:	31 83       	std	Z+1, r19	; 0x01
    1f22:	20 83       	st	Z, r18
    1f24:	dd c0       	rjmp	.+442    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1f26:	d5 01       	movw	r26, r10
    1f28:	c4 01       	movw	r24, r8
    1f2a:	97 5f       	subi	r25, 0xF7	; 247
    1f2c:	a2 4c       	sbci	r26, 0xC2	; 194
    1f2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	66 0f       	add	r22, r22
    1f36:	77 1f       	adc	r23, r23
    1f38:	88 1f       	adc	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	66 0f       	add	r22, r22
    1f3e:	77 1f       	adc	r23, r23
    1f40:	88 1f       	adc	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	95 01       	movw	r18, r10
    1f46:	84 01       	movw	r16, r8
    1f48:	00 0f       	add	r16, r16
    1f4a:	11 1f       	adc	r17, r17
    1f4c:	22 1f       	adc	r18, r18
    1f4e:	33 1f       	adc	r19, r19
    1f50:	00 0f       	add	r16, r16
    1f52:	11 1f       	adc	r17, r17
    1f54:	22 1f       	adc	r18, r18
    1f56:	33 1f       	adc	r19, r19
    1f58:	a9 01       	movw	r20, r18
    1f5a:	98 01       	movw	r18, r16
    1f5c:	22 0f       	add	r18, r18
    1f5e:	33 1f       	adc	r19, r19
    1f60:	44 1f       	adc	r20, r20
    1f62:	55 1f       	adc	r21, r21
    1f64:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <__udivmodsi4>
    1f68:	21 50       	subi	r18, 0x01	; 1
    1f6a:	31 09       	sbc	r19, r1
    1f6c:	30 93 d5 00 	sts	0x00D5, r19	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    1f70:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    1f74:	82 e0       	ldi	r24, 0x02	; 2
    1f76:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1f7a:	88 e9       	ldi	r24, 0x98	; 152
    1f7c:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1f80:	8e e0       	ldi	r24, 0x0E	; 14
    1f82:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1f86:	ac c0       	rjmp	.+344    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1f88:	04 ed       	ldi	r16, 0xD4	; 212
    1f8a:	10 e0       	ldi	r17, 0x00	; 0
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	11 82       	std	Z+1, r1	; 0x01
    1f90:	10 82       	st	Z, r1
    1f92:	e1 e0       	ldi	r30, 0x01	; 1
    1f94:	f1 e0       	ldi	r31, 0x01	; 1
    1f96:	80 81       	ld	r24, Z
    1f98:	84 60       	ori	r24, 0x04	; 4
    1f9a:	80 83       	st	Z, r24
    1f9c:	80 ec       	ldi	r24, 0xC0	; 192
    1f9e:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1fa2:	88 e9       	ldi	r24, 0x98	; 152
    1fa4:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1fa8:	d5 01       	movw	r26, r10
    1faa:	c4 01       	movw	r24, r8
    1fac:	80 58       	subi	r24, 0x80	; 128
    1fae:	9b 47       	sbci	r25, 0x7B	; 123
    1fb0:	a1 4e       	sbci	r26, 0xE1	; 225
    1fb2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	aa 1f       	adc	r26, r26
    1fba:	bb 1f       	adc	r27, r27
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	aa 1f       	adc	r26, r26
    1fc2:	bb 1f       	adc	r27, r27
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	66 0f       	add	r22, r22
    1fca:	77 1f       	adc	r23, r23
    1fcc:	88 1f       	adc	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	88 0c       	add	r8, r8
    1fd2:	99 1c       	adc	r9, r9
    1fd4:	aa 1c       	adc	r10, r10
    1fd6:	bb 1c       	adc	r11, r11
    1fd8:	88 0c       	add	r8, r8
    1fda:	99 1c       	adc	r9, r9
    1fdc:	aa 1c       	adc	r10, r10
    1fde:	bb 1c       	adc	r11, r11
    1fe0:	a5 01       	movw	r20, r10
    1fe2:	94 01       	movw	r18, r8
    1fe4:	22 0f       	add	r18, r18
    1fe6:	33 1f       	adc	r19, r19
    1fe8:	44 1f       	adc	r20, r20
    1fea:	55 1f       	adc	r21, r21
    1fec:	22 0f       	add	r18, r18
    1fee:	33 1f       	adc	r19, r19
    1ff0:	44 1f       	adc	r20, r20
    1ff2:	55 1f       	adc	r21, r21
    1ff4:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <__udivmodsi4>
    1ff8:	21 50       	subi	r18, 0x01	; 1
    1ffa:	31 09       	sbc	r19, r1
    1ffc:	f8 01       	movw	r30, r16
    1ffe:	31 83       	std	Z+1, r19	; 0x01
    2000:	20 83       	st	Z, r18
    2002:	6e c0       	rjmp	.+220    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    2004:	d5 01       	movw	r26, r10
    2006:	c4 01       	movw	r24, r8
    2008:	97 5f       	subi	r25, 0xF7	; 247
    200a:	a2 4c       	sbci	r26, 0xC2	; 194
    200c:	bf 4f       	sbci	r27, 0xFF	; 255
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	66 0f       	add	r22, r22
    2014:	77 1f       	adc	r23, r23
    2016:	88 1f       	adc	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	66 0f       	add	r22, r22
    201c:	77 1f       	adc	r23, r23
    201e:	88 1f       	adc	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	95 01       	movw	r18, r10
    2024:	84 01       	movw	r16, r8
    2026:	00 0f       	add	r16, r16
    2028:	11 1f       	adc	r17, r17
    202a:	22 1f       	adc	r18, r18
    202c:	33 1f       	adc	r19, r19
    202e:	00 0f       	add	r16, r16
    2030:	11 1f       	adc	r17, r17
    2032:	22 1f       	adc	r18, r18
    2034:	33 1f       	adc	r19, r19
    2036:	a9 01       	movw	r20, r18
    2038:	98 01       	movw	r18, r16
    203a:	22 0f       	add	r18, r18
    203c:	33 1f       	adc	r19, r19
    203e:	44 1f       	adc	r20, r20
    2040:	55 1f       	adc	r21, r21
    2042:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <__udivmodsi4>
    2046:	21 50       	subi	r18, 0x01	; 1
    2048:	31 09       	sbc	r19, r1
    204a:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    204e:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2058:	88 e9       	ldi	r24, 0x98	; 152
    205a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    205e:	8e e0       	ldi	r24, 0x0E	; 14
    2060:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    2064:	3d c0       	rjmp	.+122    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    2066:	04 e3       	ldi	r16, 0x34	; 52
    2068:	11 e0       	ldi	r17, 0x01	; 1
    206a:	f8 01       	movw	r30, r16
    206c:	11 82       	std	Z+1, r1	; 0x01
    206e:	10 82       	st	Z, r1
    2070:	e4 e0       	ldi	r30, 0x04	; 4
    2072:	f1 e0       	ldi	r31, 0x01	; 1
    2074:	80 81       	ld	r24, Z
    2076:	84 60       	ori	r24, 0x04	; 4
    2078:	80 83       	st	Z, r24
    207a:	80 ec       	ldi	r24, 0xC0	; 192
    207c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    2080:	88 e9       	ldi	r24, 0x98	; 152
    2082:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    2086:	d5 01       	movw	r26, r10
    2088:	c4 01       	movw	r24, r8
    208a:	80 58       	subi	r24, 0x80	; 128
    208c:	9b 47       	sbci	r25, 0x7B	; 123
    208e:	a1 4e       	sbci	r26, 0xE1	; 225
    2090:	bf 4f       	sbci	r27, 0xFF	; 255
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	aa 1f       	adc	r26, r26
    2098:	bb 1f       	adc	r27, r27
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	aa 1f       	adc	r26, r26
    20a0:	bb 1f       	adc	r27, r27
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	66 0f       	add	r22, r22
    20a8:	77 1f       	adc	r23, r23
    20aa:	88 1f       	adc	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	88 0c       	add	r8, r8
    20b0:	99 1c       	adc	r9, r9
    20b2:	aa 1c       	adc	r10, r10
    20b4:	bb 1c       	adc	r11, r11
    20b6:	88 0c       	add	r8, r8
    20b8:	99 1c       	adc	r9, r9
    20ba:	aa 1c       	adc	r10, r10
    20bc:	bb 1c       	adc	r11, r11
    20be:	a5 01       	movw	r20, r10
    20c0:	94 01       	movw	r18, r8
    20c2:	22 0f       	add	r18, r18
    20c4:	33 1f       	adc	r19, r19
    20c6:	44 1f       	adc	r20, r20
    20c8:	55 1f       	adc	r21, r21
    20ca:	22 0f       	add	r18, r18
    20cc:	33 1f       	adc	r19, r19
    20ce:	44 1f       	adc	r20, r20
    20d0:	55 1f       	adc	r21, r21
    20d2:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <__udivmodsi4>
    20d6:	21 50       	subi	r18, 0x01	; 1
    20d8:	31 09       	sbc	r19, r1
    20da:	f8 01       	movw	r30, r16
    20dc:	31 83       	std	Z+1, r19	; 0x01
    20de:	20 83       	st	Z, r18
    20e0:	0f 90       	pop	r0
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	82 e2       	ldi	r24, 0x22	; 34
    20e6:	fe 01       	movw	r30, r28
    20e8:	31 96       	adiw	r30, 0x01	; 1
    20ea:	d6 01       	movw	r26, r12
    20ec:	01 90       	ld	r0, Z+
    20ee:	0d 92       	st	X+, r0
    20f0:	8a 95       	dec	r24
    20f2:	e1 f7       	brne	.-8      	; 0x20ec <xSerialPortInitMinimal+0x446>
    20f4:	c6 01       	movw	r24, r12
    20f6:	a2 96       	adiw	r28, 0x22	; 34
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	ff 90       	pop	r15
    210c:	ef 90       	pop	r14
    210e:	df 90       	pop	r13
    2110:	cf 90       	pop	r12
    2112:	bf 90       	pop	r11
    2114:	af 90       	pop	r10
    2116:	9f 90       	pop	r9
    2118:	8f 90       	pop	r8
    211a:	7f 90       	pop	r7
    211c:	08 95       	ret

0000211e <__vector_25>:
#elif defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
ISR( USART0_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART0_RX_vect )

#endif
{
    211e:	1f 92       	push	r1
    2120:	0f 92       	push	r0
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	0f 92       	push	r0
    2126:	11 24       	eor	r1, r1
    2128:	0b b6       	in	r0, 0x3b	; 59
    212a:	0f 92       	push	r0
    212c:	2f 93       	push	r18
    212e:	3f 93       	push	r19
    2130:	4f 93       	push	r20
    2132:	5f 93       	push	r21
    2134:	6f 93       	push	r22
    2136:	7f 93       	push	r23
    2138:	8f 93       	push	r24
    213a:	9f 93       	push	r25
    213c:	af 93       	push	r26
    213e:	bf 93       	push	r27
    2140:	cf 93       	push	r28
    2142:	ef 93       	push	r30
    2144:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR0A & (_BV(FE0)|_BV(DOR0)|_BV(UPE0)) ) )
    2146:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    214a:	8c 71       	andi	r24, 0x1C	; 28
    214c:	71 f0       	breq	.+28     	; 0x216a <__vector_25+0x4c>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR0A & (1<<RXC0) ) erroredByte = UDR0;
    214e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    2152:	88 23       	and	r24, r24
    2154:	0c f0       	brlt	.+2      	; 0x2158 <__vector_25+0x3a>
    2156:	57 c0       	rjmp	.+174    	; 0x2206 <__stack+0x7>
    2158:	a6 ec       	ldi	r26, 0xC6	; 198
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e0 ec       	ldi	r30, 0xC0	; 192
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	8c 91       	ld	r24, X
    2162:	80 81       	ld	r24, Z
    2164:	88 23       	and	r24, r24
    2166:	e4 f3       	brlt	.-8      	; 0x2160 <__vector_25+0x42>
    2168:	4e c0       	rjmp	.+156    	; 0x2206 <__stack+0x7>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR0;
    216a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
//UCSR3B &= ~ ( _BV(RXCIE3) | _BV(RXEN3) | _BV(TXEN3));
if(!port_3)
    216e:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <port_3>
    2172:	81 11       	cpse	r24, r1
    2174:	1d c0       	rjmp	.+58     	; 0x21b0 <__vector_25+0x92>
{
port_0=true;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	80 93 25 0b 	sts	0x0B25, r24	; 0x800b25 <port_0>
//timer_1_Init();
stop_1_Timer();
    217c:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <stop_1_Timer>
TCNT1=0;//my cod		
    2180:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    2184:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
frame[indexBuf] = cChar;//my cod
    2188:	e0 91 15 08 	lds	r30, 0x0815	; 0x800815 <indexBuf>
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	e8 5c       	subi	r30, 0xC8	; 200
    2190:	f7 4f       	sbci	r31, 0xF7	; 247
    2192:	c0 83       	st	Z, r28
indexBuf++;//my cod
    2194:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <indexBuf>
    2198:	8f 5f       	subi	r24, 0xFF	; 255
    219a:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <indexBuf>
if(indexBuf == portSERIAL_BUFFER_RX ) overflow=1;//my cod
    219e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <indexBuf>
    21a2:	8f 3f       	cpi	r24, 0xFF	; 255
    21a4:	19 f4       	brne	.+6      	; 0x21ac <__vector_25+0x8e>
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	80 93 f1 07 	sts	0x07F1, r24	; 0x8007f1 <overflow>
start_1_Timer();//my cod
    21ac:	0e 94 c8 24 	call	0x4990	; 0x4990 <start_1_Timer>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	0f 92       	push	r0
	{
	    count = buffer->count;
    21b6:	ef ec       	ldi	r30, 0xCF	; 207
    21b8:	f7 e0       	ldi	r31, 0x07	; 7
    21ba:	21 81       	ldd	r18, Z+1	; 0x01
    21bc:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    21be:	0f 90       	pop	r0
    21c0:	0f be       	out	0x3f, r0	; 63
}
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerialPort.xRxedChars) ) )
    21c2:	83 85       	ldd	r24, Z+11	; 0x0b
    21c4:	94 85       	ldd	r25, Z+12	; 0x0c
    21c6:	28 17       	cp	r18, r24
    21c8:	39 07       	cpc	r19, r25
    21ca:	e9 f0       	breq	.+58     	; 0x2206 <__stack+0x7>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    21cc:	e0 ed       	ldi	r30, 0xD0	; 208
    21ce:	f7 e0       	ldi	r31, 0x07	; 7

	*buffer->in = data;
    21d0:	a2 81       	ldd	r26, Z+2	; 0x02
    21d2:	b3 81       	ldd	r27, Z+3	; 0x03
    21d4:	cc 93       	st	X, r28

	if (++buffer->in == buffer->end)
    21d6:	82 81       	ldd	r24, Z+2	; 0x02
    21d8:	93 81       	ldd	r25, Z+3	; 0x03
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	93 83       	std	Z+3, r25	; 0x03
    21de:	82 83       	std	Z+2, r24	; 0x02
    21e0:	20 85       	ldd	r18, Z+8	; 0x08
    21e2:	31 85       	ldd	r19, Z+9	; 0x09
    21e4:	82 17       	cp	r24, r18
    21e6:	93 07       	cpc	r25, r19
    21e8:	21 f4       	brne	.+8      	; 0x21f2 <__vector_25+0xd4>
	  buffer->in = buffer->start;
    21ea:	86 81       	ldd	r24, Z+6	; 0x06
    21ec:	97 81       	ldd	r25, Z+7	; 0x07
    21ee:	93 83       	std	Z+3, r25	; 0x03
    21f0:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	0f 92       	push	r0
	{
	    buffer->count++;
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	01 96       	adiw	r24, 0x01	; 1
    21fe:	91 83       	std	Z+1, r25	; 0x01
    2200:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    2202:	0f 90       	pop	r0
    2204:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerialPort.xRxedChars), cChar);
	}
}
    2206:	ff 91       	pop	r31
    2208:	ef 91       	pop	r30
    220a:	cf 91       	pop	r28
    220c:	bf 91       	pop	r27
    220e:	af 91       	pop	r26
    2210:	9f 91       	pop	r25
    2212:	8f 91       	pop	r24
    2214:	7f 91       	pop	r23
    2216:	6f 91       	pop	r22
    2218:	5f 91       	pop	r21
    221a:	4f 91       	pop	r20
    221c:	3f 91       	pop	r19
    221e:	2f 91       	pop	r18
    2220:	0f 90       	pop	r0
    2222:	0b be       	out	0x3b, r0	; 59
    2224:	0f 90       	pop	r0
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	0f 90       	pop	r0
    222a:	1f 90       	pop	r1
    222c:	18 95       	reti

0000222e <__vector_26>:
#elif defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
ISR( USART0_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART0_UDRE_vect )

#endif
{
    222e:	1f 92       	push	r1
    2230:	0f 92       	push	r0
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	0f 92       	push	r0
    2236:	11 24       	eor	r1, r1
    2238:	0b b6       	in	r0, 0x3b	; 59
    223a:	0f 92       	push	r0
    223c:	2f 93       	push	r18
    223e:	8f 93       	push	r24
    2240:	9f 93       	push	r25
    2242:	af 93       	push	r26
    2244:	bf 93       	push	r27
    2246:	ef 93       	push	r30
    2248:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	0f 92       	push	r0
	{
	    count = buffer->count;
    2250:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <xSerialPort+0xd>
    2254:	90 91 dd 07 	lds	r25, 0x07DD	; 0x8007dd <xSerialPort+0xe>
	}
	portEXIT_CRITICAL();
    2258:	0f 90       	pop	r0
    225a:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerialPort.xCharsForTx) ) )
    225c:	89 2b       	or	r24, r25
    225e:	31 f4       	brne	.+12     	; 0x226c <__vector_26+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt0_Off();
    2260:	e1 ec       	ldi	r30, 0xC1	; 193
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	8f 7d       	andi	r24, 0xDF	; 223
    2268:	80 83       	st	Z, r24
    226a:	1c c0       	rjmp	.+56     	; 0x22a4 <__vector_26+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    226c:	ec ed       	ldi	r30, 0xDC	; 220
    226e:	f7 e0       	ldi	r31, 0x07	; 7

	uint8_t data = *buffer->out;
    2270:	a4 81       	ldd	r26, Z+4	; 0x04
    2272:	b5 81       	ldd	r27, Z+5	; 0x05
    2274:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    2276:	b5 83       	std	Z+5, r27	; 0x05
    2278:	a4 83       	std	Z+4, r26	; 0x04
    227a:	80 85       	ldd	r24, Z+8	; 0x08
    227c:	91 85       	ldd	r25, Z+9	; 0x09
    227e:	a8 17       	cp	r26, r24
    2280:	b9 07       	cpc	r27, r25
    2282:	21 f4       	brne	.+8      	; 0x228c <__vector_26+0x5e>
	  buffer->out = buffer->start;
    2284:	86 81       	ldd	r24, Z+6	; 0x06
    2286:	97 81       	ldd	r25, Z+7	; 0x07
    2288:	95 83       	std	Z+5, r25	; 0x05
    228a:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	0f 92       	push	r0
	{
	    buffer->count--;
    2292:	80 81       	ld	r24, Z
    2294:	91 81       	ldd	r25, Z+1	; 0x01
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    229c:	0f 90       	pop	r0
    229e:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR0 = ringBuffer_Pop( (ringBuffer_t*) &(xSerialPort.xCharsForTx) );
    22a0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    22a4:	ff 91       	pop	r31
    22a6:	ef 91       	pop	r30
    22a8:	bf 91       	pop	r27
    22aa:	af 91       	pop	r26
    22ac:	9f 91       	pop	r25
    22ae:	8f 91       	pop	r24
    22b0:	2f 91       	pop	r18
    22b2:	0f 90       	pop	r0
    22b4:	0b be       	out	0x3b, r0	; 59
    22b6:	0f 90       	pop	r0
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	0f 90       	pop	r0
    22bc:	1f 90       	pop	r1
    22be:	18 95       	reti

000022c0 <__vector_36>:

#if defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

ISR( USART1_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART1_RX_vect )
{
    22c0:	1f 92       	push	r1
    22c2:	0f 92       	push	r0
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	0f 92       	push	r0
    22c8:	11 24       	eor	r1, r1
    22ca:	0b b6       	in	r0, 0x3b	; 59
    22cc:	0f 92       	push	r0
    22ce:	2f 93       	push	r18
    22d0:	3f 93       	push	r19
    22d2:	4f 93       	push	r20
    22d4:	8f 93       	push	r24
    22d6:	9f 93       	push	r25
    22d8:	af 93       	push	r26
    22da:	bf 93       	push	r27
    22dc:	ef 93       	push	r30
    22de:	ff 93       	push	r31
	/* Get status and data from buffer */
     
	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR1A &  (_BV(FE1)|_BV(DOR1)|_BV(UPE1)) ) )
    22e0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    22e4:	8c 71       	andi	r24, 0x1C	; 28
    22e6:	71 f0       	breq	.+28     	; 0x2304 <__vector_36+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR1A & (1<<RXC1) ) erroredByte = UDR1;
    22e8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    22ec:	88 23       	and	r24, r24
    22ee:	0c f0       	brlt	.+2      	; 0x22f2 <__vector_36+0x32>
    22f0:	36 c0       	rjmp	.+108    	; 0x235e <__vector_36+0x9e>
    22f2:	ae ec       	ldi	r26, 0xCE	; 206
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e8 ec       	ldi	r30, 0xC8	; 200
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	8c 91       	ld	r24, X
    22fc:	80 81       	ld	r24, Z
    22fe:	88 23       	and	r24, r24
    2300:	e4 f3       	brlt	.-8      	; 0x22fa <__vector_36+0x3a>
    2302:	2d c0       	rjmp	.+90     	; 0x235e <__vector_36+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR1;
    2304:	40 91 ce 00 	lds	r20, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	0f 92       	push	r0
	{
	    count = buffer->count;
    230e:	e7 e3       	ldi	r30, 0x37	; 55
    2310:	f9 e0       	ldi	r31, 0x09	; 9
    2312:	21 81       	ldd	r18, Z+1	; 0x01
    2314:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2316:	0f 90       	pop	r0
    2318:	0f be       	out	0x3f, r0	; 63
				
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial1Port.xRxedChars) ) )
    231a:	83 85       	ldd	r24, Z+11	; 0x0b
    231c:	94 85       	ldd	r25, Z+12	; 0x0c
    231e:	28 17       	cp	r18, r24
    2320:	39 07       	cpc	r19, r25
    2322:	e9 f0       	breq	.+58     	; 0x235e <__vector_36+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    2324:	e8 e3       	ldi	r30, 0x38	; 56
    2326:	f9 e0       	ldi	r31, 0x09	; 9

	*buffer->in = data;
    2328:	a2 81       	ldd	r26, Z+2	; 0x02
    232a:	b3 81       	ldd	r27, Z+3	; 0x03
    232c:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	01 96       	adiw	r24, 0x01	; 1
    2334:	93 83       	std	Z+3, r25	; 0x03
    2336:	82 83       	std	Z+2, r24	; 0x02
    2338:	20 85       	ldd	r18, Z+8	; 0x08
    233a:	31 85       	ldd	r19, Z+9	; 0x09
    233c:	82 17       	cp	r24, r18
    233e:	93 07       	cpc	r25, r19
    2340:	21 f4       	brne	.+8      	; 0x234a <__vector_36+0x8a>
	  buffer->in = buffer->start;
    2342:	86 81       	ldd	r24, Z+6	; 0x06
    2344:	97 81       	ldd	r25, Z+7	; 0x07
    2346:	93 83       	std	Z+3, r25	; 0x03
    2348:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	0f 92       	push	r0
	{
	    buffer->count++;
    2350:	80 81       	ld	r24, Z
    2352:	91 81       	ldd	r25, Z+1	; 0x01
    2354:	01 96       	adiw	r24, 0x01	; 1
    2356:	91 83       	std	Z+1, r25	; 0x01
    2358:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    235a:	0f 90       	pop	r0
    235c:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial1Port.xRxedChars), cChar);
			
	}
}
    235e:	ff 91       	pop	r31
    2360:	ef 91       	pop	r30
    2362:	bf 91       	pop	r27
    2364:	af 91       	pop	r26
    2366:	9f 91       	pop	r25
    2368:	8f 91       	pop	r24
    236a:	4f 91       	pop	r20
    236c:	3f 91       	pop	r19
    236e:	2f 91       	pop	r18
    2370:	0f 90       	pop	r0
    2372:	0b be       	out	0x3b, r0	; 59
    2374:	0f 90       	pop	r0
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	0f 90       	pop	r0
    237a:	1f 90       	pop	r1
    237c:	18 95       	reti

0000237e <__vector_37>:
/*-----------------------------------------------------------*/

ISR( USART1_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART1_UDRE_vect )
{
    237e:	1f 92       	push	r1
    2380:	0f 92       	push	r0
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	0f 92       	push	r0
    2386:	11 24       	eor	r1, r1
    2388:	0b b6       	in	r0, 0x3b	; 59
    238a:	0f 92       	push	r0
    238c:	2f 93       	push	r18
    238e:	8f 93       	push	r24
    2390:	9f 93       	push	r25
    2392:	af 93       	push	r26
    2394:	bf 93       	push	r27
    2396:	ef 93       	push	r30
    2398:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	0f 92       	push	r0
	{
	    count = buffer->count;
    23a0:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <xSerial1Port+0xd>
    23a4:	90 91 45 09 	lds	r25, 0x0945	; 0x800945 <xSerial1Port+0xe>
	}
	portEXIT_CRITICAL();
    23a8:	0f 90       	pop	r0
    23aa:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) ) )
    23ac:	89 2b       	or	r24, r25
    23ae:	31 f4       	brne	.+12     	; 0x23bc <__vector_37+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt1_Off();
    23b0:	e9 ec       	ldi	r30, 0xC9	; 201
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	8f 7d       	andi	r24, 0xDF	; 223
    23b8:	80 83       	st	Z, r24
    23ba:	1c c0       	rjmp	.+56     	; 0x23f4 <__vector_37+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    23bc:	e4 e4       	ldi	r30, 0x44	; 68
    23be:	f9 e0       	ldi	r31, 0x09	; 9

	uint8_t data = *buffer->out;
    23c0:	a4 81       	ldd	r26, Z+4	; 0x04
    23c2:	b5 81       	ldd	r27, Z+5	; 0x05
    23c4:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    23c6:	b5 83       	std	Z+5, r27	; 0x05
    23c8:	a4 83       	std	Z+4, r26	; 0x04
    23ca:	80 85       	ldd	r24, Z+8	; 0x08
    23cc:	91 85       	ldd	r25, Z+9	; 0x09
    23ce:	a8 17       	cp	r26, r24
    23d0:	b9 07       	cpc	r27, r25
    23d2:	21 f4       	brne	.+8      	; 0x23dc <__vector_37+0x5e>
	  buffer->out = buffer->start;
    23d4:	86 81       	ldd	r24, Z+6	; 0x06
    23d6:	97 81       	ldd	r25, Z+7	; 0x07
    23d8:	95 83       	std	Z+5, r25	; 0x05
    23da:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	0f 92       	push	r0
	{
	    buffer->count--;
    23e2:	80 81       	ld	r24, Z
    23e4:	91 81       	ldd	r25, Z+1	; 0x01
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	91 83       	std	Z+1, r25	; 0x01
    23ea:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    23ec:	0f 90       	pop	r0
    23ee:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR1 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) );
    23f0:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
	}
}
    23f4:	ff 91       	pop	r31
    23f6:	ef 91       	pop	r30
    23f8:	bf 91       	pop	r27
    23fa:	af 91       	pop	r26
    23fc:	9f 91       	pop	r25
    23fe:	8f 91       	pop	r24
    2400:	2f 91       	pop	r18
    2402:	0f 90       	pop	r0
    2404:	0b be       	out	0x3b, r0	; 59
    2406:	0f 90       	pop	r0
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	0f 90       	pop	r0
    240c:	1f 90       	pop	r1
    240e:	18 95       	reti

00002410 <__vector_51>:

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

ISR( USART2_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART2_RX_vect )
{
    2410:	1f 92       	push	r1
    2412:	0f 92       	push	r0
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	0f 92       	push	r0
    2418:	11 24       	eor	r1, r1
    241a:	0b b6       	in	r0, 0x3b	; 59
    241c:	0f 92       	push	r0
    241e:	2f 93       	push	r18
    2420:	3f 93       	push	r19
    2422:	4f 93       	push	r20
    2424:	8f 93       	push	r24
    2426:	9f 93       	push	r25
    2428:	af 93       	push	r26
    242a:	bf 93       	push	r27
    242c:	ef 93       	push	r30
    242e:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR2A & (_BV(FE2)|_BV(DOR2)|_BV(UPE2)) ) )
    2430:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    2434:	8c 71       	andi	r24, 0x1C	; 28
    2436:	71 f0       	breq	.+28     	; 0x2454 <__vector_51+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR2A & (1<<RXC2) ) erroredByte = UDR2;
    2438:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    243c:	88 23       	and	r24, r24
    243e:	0c f0       	brlt	.+2      	; 0x2442 <__vector_51+0x32>
    2440:	36 c0       	rjmp	.+108    	; 0x24ae <__vector_51+0x9e>
    2442:	a6 ed       	ldi	r26, 0xD6	; 214
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e0 ed       	ldi	r30, 0xD0	; 208
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	8c 91       	ld	r24, X
    244c:	80 81       	ld	r24, Z
    244e:	88 23       	and	r24, r24
    2450:	e4 f3       	brlt	.-8      	; 0x244a <__vector_51+0x3a>
    2452:	2d c0       	rjmp	.+90     	; 0x24ae <__vector_51+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR2;
    2454:	40 91 d6 00 	lds	r20, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	0f 92       	push	r0
	{
	    count = buffer->count;
    245e:	e3 ef       	ldi	r30, 0xF3	; 243
    2460:	f7 e0       	ldi	r31, 0x07	; 7
    2462:	21 81       	ldd	r18, Z+1	; 0x01
    2464:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2466:	0f 90       	pop	r0
    2468:	0f be       	out	0x3f, r0	; 63

		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial2Port.xRxedChars) ) )
    246a:	83 85       	ldd	r24, Z+11	; 0x0b
    246c:	94 85       	ldd	r25, Z+12	; 0x0c
    246e:	28 17       	cp	r18, r24
    2470:	39 07       	cpc	r19, r25
    2472:	e9 f0       	breq	.+58     	; 0x24ae <__vector_51+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    2474:	e4 ef       	ldi	r30, 0xF4	; 244
    2476:	f7 e0       	ldi	r31, 0x07	; 7

	*buffer->in = data;
    2478:	a2 81       	ldd	r26, Z+2	; 0x02
    247a:	b3 81       	ldd	r27, Z+3	; 0x03
    247c:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	93 81       	ldd	r25, Z+3	; 0x03
    2482:	01 96       	adiw	r24, 0x01	; 1
    2484:	93 83       	std	Z+3, r25	; 0x03
    2486:	82 83       	std	Z+2, r24	; 0x02
    2488:	20 85       	ldd	r18, Z+8	; 0x08
    248a:	31 85       	ldd	r19, Z+9	; 0x09
    248c:	82 17       	cp	r24, r18
    248e:	93 07       	cpc	r25, r19
    2490:	21 f4       	brne	.+8      	; 0x249a <__vector_51+0x8a>
	  buffer->in = buffer->start;
    2492:	86 81       	ldd	r24, Z+6	; 0x06
    2494:	97 81       	ldd	r25, Z+7	; 0x07
    2496:	93 83       	std	Z+3, r25	; 0x03
    2498:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	0f 92       	push	r0
	{
	    buffer->count++;
    24a0:	80 81       	ld	r24, Z
    24a2:	91 81       	ldd	r25, Z+1	; 0x01
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    24aa:	0f 90       	pop	r0
    24ac:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial2Port.xRxedChars), cChar);
	}
}
    24ae:	ff 91       	pop	r31
    24b0:	ef 91       	pop	r30
    24b2:	bf 91       	pop	r27
    24b4:	af 91       	pop	r26
    24b6:	9f 91       	pop	r25
    24b8:	8f 91       	pop	r24
    24ba:	4f 91       	pop	r20
    24bc:	3f 91       	pop	r19
    24be:	2f 91       	pop	r18
    24c0:	0f 90       	pop	r0
    24c2:	0b be       	out	0x3b, r0	; 59
    24c4:	0f 90       	pop	r0
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	0f 90       	pop	r0
    24ca:	1f 90       	pop	r1
    24cc:	18 95       	reti

000024ce <__vector_52>:
/*-----------------------------------------------------------*/

ISR( USART2_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART2_UDRE_vect )
{
    24ce:	1f 92       	push	r1
    24d0:	0f 92       	push	r0
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	0f 92       	push	r0
    24d6:	11 24       	eor	r1, r1
    24d8:	0b b6       	in	r0, 0x3b	; 59
    24da:	0f 92       	push	r0
    24dc:	2f 93       	push	r18
    24de:	8f 93       	push	r24
    24e0:	9f 93       	push	r25
    24e2:	af 93       	push	r26
    24e4:	bf 93       	push	r27
    24e6:	ef 93       	push	r30
    24e8:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	0f 92       	push	r0
	{
	    count = buffer->count;
    24f0:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <xSerial2Port+0xd>
    24f4:	90 91 01 08 	lds	r25, 0x0801	; 0x800801 <xSerial2Port+0xe>
	}
	portEXIT_CRITICAL();
    24f8:	0f 90       	pop	r0
    24fa:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) ) )
    24fc:	89 2b       	or	r24, r25
    24fe:	31 f4       	brne	.+12     	; 0x250c <__vector_52+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt2_Off();
    2500:	e1 ed       	ldi	r30, 0xD1	; 209
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	8f 7d       	andi	r24, 0xDF	; 223
    2508:	80 83       	st	Z, r24
    250a:	1c c0       	rjmp	.+56     	; 0x2544 <__vector_52+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    250c:	e0 e0       	ldi	r30, 0x00	; 0
    250e:	f8 e0       	ldi	r31, 0x08	; 8

	uint8_t data = *buffer->out;
    2510:	a4 81       	ldd	r26, Z+4	; 0x04
    2512:	b5 81       	ldd	r27, Z+5	; 0x05
    2514:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    2516:	b5 83       	std	Z+5, r27	; 0x05
    2518:	a4 83       	std	Z+4, r26	; 0x04
    251a:	80 85       	ldd	r24, Z+8	; 0x08
    251c:	91 85       	ldd	r25, Z+9	; 0x09
    251e:	a8 17       	cp	r26, r24
    2520:	b9 07       	cpc	r27, r25
    2522:	21 f4       	brne	.+8      	; 0x252c <__vector_52+0x5e>
	  buffer->out = buffer->start;
    2524:	86 81       	ldd	r24, Z+6	; 0x06
    2526:	97 81       	ldd	r25, Z+7	; 0x07
    2528:	95 83       	std	Z+5, r25	; 0x05
    252a:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	0f 92       	push	r0
	{
	    buffer->count--;
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	91 83       	std	Z+1, r25	; 0x01
    253a:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    253c:	0f 90       	pop	r0
    253e:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR2 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) );
    2540:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	}
}
    2544:	ff 91       	pop	r31
    2546:	ef 91       	pop	r30
    2548:	bf 91       	pop	r27
    254a:	af 91       	pop	r26
    254c:	9f 91       	pop	r25
    254e:	8f 91       	pop	r24
    2550:	2f 91       	pop	r18
    2552:	0f 90       	pop	r0
    2554:	0b be       	out	0x3b, r0	; 59
    2556:	0f 90       	pop	r0
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	0f 90       	pop	r0
    255c:	1f 90       	pop	r1
    255e:	18 95       	reti

00002560 <__vector_54>:
/*-----------------------------------------------------------*/

ISR( USART3_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART3_RX_vect )
{
    2560:	1f 92       	push	r1
    2562:	0f 92       	push	r0
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	0f 92       	push	r0
    2568:	11 24       	eor	r1, r1
    256a:	0b b6       	in	r0, 0x3b	; 59
    256c:	0f 92       	push	r0
    256e:	2f 93       	push	r18
    2570:	3f 93       	push	r19
    2572:	4f 93       	push	r20
    2574:	5f 93       	push	r21
    2576:	6f 93       	push	r22
    2578:	7f 93       	push	r23
    257a:	8f 93       	push	r24
    257c:	9f 93       	push	r25
    257e:	af 93       	push	r26
    2580:	bf 93       	push	r27
    2582:	cf 93       	push	r28
    2584:	ef 93       	push	r30
    2586:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR3A & (_BV(FE3)|_BV(DOR3)|_BV(UPE3)) ) )
    2588:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    258c:	8c 71       	andi	r24, 0x1C	; 28
    258e:	71 f0       	breq	.+28     	; 0x25ac <__vector_54+0x4c>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR3A & (1<<RXC3) ) erroredByte = UDR3;
    2590:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2594:	88 23       	and	r24, r24
    2596:	0c f0       	brlt	.+2      	; 0x259a <__vector_54+0x3a>
    2598:	57 c0       	rjmp	.+174    	; 0x2648 <__vector_54+0xe8>
    259a:	a6 e3       	ldi	r26, 0x36	; 54
    259c:	b1 e0       	ldi	r27, 0x01	; 1
    259e:	e0 e3       	ldi	r30, 0x30	; 48
    25a0:	f1 e0       	ldi	r31, 0x01	; 1
    25a2:	8c 91       	ld	r24, X
    25a4:	80 81       	ld	r24, Z
    25a6:	88 23       	and	r24, r24
    25a8:	e4 f3       	brlt	.-8      	; 0x25a2 <__vector_54+0x42>
    25aa:	4e c0       	rjmp	.+156    	; 0x2648 <__vector_54+0xe8>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR3;
    25ac:	c0 91 36 01 	lds	r28, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		
	//xSerialxPrintf(&xSerial3Port,"interrupt\r\n");	
if(!port_0)
    25b0:	80 91 25 0b 	lds	r24, 0x0B25	; 0x800b25 <port_0>
    25b4:	81 11       	cpse	r24, r1
    25b6:	1d c0       	rjmp	.+58     	; 0x25f2 <__vector_54+0x92>
{			//xSerialxPrintf(&xSerial3Port,"port_3\r\n");
			port_3=true;
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <port_3>
			//timer_1_Init();
			stop_1_Timer();
    25be:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <stop_1_Timer>
			TCNT1=0;//my cod
    25c2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    25c6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
			frame[indexBuf] = cChar;//my cod
    25ca:	e0 91 15 08 	lds	r30, 0x0815	; 0x800815 <indexBuf>
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	e8 5c       	subi	r30, 0xC8	; 200
    25d2:	f7 4f       	sbci	r31, 0xF7	; 247
    25d4:	c0 83       	st	Z, r28
			indexBuf++;//my cod
    25d6:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <indexBuf>
    25da:	8f 5f       	subi	r24, 0xFF	; 255
    25dc:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <indexBuf>
			if(indexBuf == portSERIAL_BUFFER_RX ) overflow=1;//my cod
    25e0:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <indexBuf>
    25e4:	8f 3f       	cpi	r24, 0xFF	; 255
    25e6:	19 f4       	brne	.+6      	; 0x25ee <__vector_54+0x8e>
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	80 93 f1 07 	sts	0x07F1, r24	; 0x8007f1 <overflow>
			start_1_Timer();//my cod
    25ee:	0e 94 c8 24 	call	0x4990	; 0x4990 <start_1_Timer>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	0f 92       	push	r0
	{
	    count = buffer->count;
    25f8:	e6 e1       	ldi	r30, 0x16	; 22
    25fa:	f8 e0       	ldi	r31, 0x08	; 8
    25fc:	21 81       	ldd	r18, Z+1	; 0x01
    25fe:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2600:	0f 90       	pop	r0
    2602:	0f be       	out	0x3f, r0	; 63
}
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial3Port.xRxedChars) ) )
    2604:	83 85       	ldd	r24, Z+11	; 0x0b
    2606:	94 85       	ldd	r25, Z+12	; 0x0c
    2608:	28 17       	cp	r18, r24
    260a:	39 07       	cpc	r19, r25
    260c:	e9 f0       	breq	.+58     	; 0x2648 <__vector_54+0xe8>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    260e:	e7 e1       	ldi	r30, 0x17	; 23
    2610:	f8 e0       	ldi	r31, 0x08	; 8

	*buffer->in = data;
    2612:	a2 81       	ldd	r26, Z+2	; 0x02
    2614:	b3 81       	ldd	r27, Z+3	; 0x03
    2616:	cc 93       	st	X, r28

	if (++buffer->in == buffer->end)
    2618:	82 81       	ldd	r24, Z+2	; 0x02
    261a:	93 81       	ldd	r25, Z+3	; 0x03
    261c:	01 96       	adiw	r24, 0x01	; 1
    261e:	93 83       	std	Z+3, r25	; 0x03
    2620:	82 83       	std	Z+2, r24	; 0x02
    2622:	20 85       	ldd	r18, Z+8	; 0x08
    2624:	31 85       	ldd	r19, Z+9	; 0x09
    2626:	82 17       	cp	r24, r18
    2628:	93 07       	cpc	r25, r19
    262a:	21 f4       	brne	.+8      	; 0x2634 <__vector_54+0xd4>
	  buffer->in = buffer->start;
    262c:	86 81       	ldd	r24, Z+6	; 0x06
    262e:	97 81       	ldd	r25, Z+7	; 0x07
    2630:	93 83       	std	Z+3, r25	; 0x03
    2632:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	0f 92       	push	r0
	{
	    buffer->count++;
    263a:	80 81       	ld	r24, Z
    263c:	91 81       	ldd	r25, Z+1	; 0x01
    263e:	01 96       	adiw	r24, 0x01	; 1
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    2644:	0f 90       	pop	r0
    2646:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial3Port.xRxedChars), cChar);
	}
}
    2648:	ff 91       	pop	r31
    264a:	ef 91       	pop	r30
    264c:	cf 91       	pop	r28
    264e:	bf 91       	pop	r27
    2650:	af 91       	pop	r26
    2652:	9f 91       	pop	r25
    2654:	8f 91       	pop	r24
    2656:	7f 91       	pop	r23
    2658:	6f 91       	pop	r22
    265a:	5f 91       	pop	r21
    265c:	4f 91       	pop	r20
    265e:	3f 91       	pop	r19
    2660:	2f 91       	pop	r18
    2662:	0f 90       	pop	r0
    2664:	0b be       	out	0x3b, r0	; 59
    2666:	0f 90       	pop	r0
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	0f 90       	pop	r0
    266c:	1f 90       	pop	r1
    266e:	18 95       	reti

00002670 <__vector_55>:
/*-----------------------------------------------------------*/

ISR( USART3_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART3_UDRE_vect )
{
    2670:	1f 92       	push	r1
    2672:	0f 92       	push	r0
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	0f 92       	push	r0
    2678:	11 24       	eor	r1, r1
    267a:	0b b6       	in	r0, 0x3b	; 59
    267c:	0f 92       	push	r0
    267e:	2f 93       	push	r18
    2680:	8f 93       	push	r24
    2682:	9f 93       	push	r25
    2684:	af 93       	push	r26
    2686:	bf 93       	push	r27
    2688:	ef 93       	push	r30
    268a:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	0f 92       	push	r0
	{
	    count = buffer->count;
    2692:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <xSerial3Port+0xd>
    2696:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <xSerial3Port+0xe>
	}
	portEXIT_CRITICAL();
    269a:	0f 90       	pop	r0
    269c:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) ) )
    269e:	89 2b       	or	r24, r25
    26a0:	31 f4       	brne	.+12     	; 0x26ae <__vector_55+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt3_Off();
    26a2:	e1 e3       	ldi	r30, 0x31	; 49
    26a4:	f1 e0       	ldi	r31, 0x01	; 1
    26a6:	80 81       	ld	r24, Z
    26a8:	8f 7d       	andi	r24, 0xDF	; 223
    26aa:	80 83       	st	Z, r24
    26ac:	1c c0       	rjmp	.+56     	; 0x26e6 <__vector_55+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    26ae:	e3 e2       	ldi	r30, 0x23	; 35
    26b0:	f8 e0       	ldi	r31, 0x08	; 8

	uint8_t data = *buffer->out;
    26b2:	a4 81       	ldd	r26, Z+4	; 0x04
    26b4:	b5 81       	ldd	r27, Z+5	; 0x05
    26b6:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    26b8:	b5 83       	std	Z+5, r27	; 0x05
    26ba:	a4 83       	std	Z+4, r26	; 0x04
    26bc:	80 85       	ldd	r24, Z+8	; 0x08
    26be:	91 85       	ldd	r25, Z+9	; 0x09
    26c0:	a8 17       	cp	r26, r24
    26c2:	b9 07       	cpc	r27, r25
    26c4:	21 f4       	brne	.+8      	; 0x26ce <__vector_55+0x5e>
	  buffer->out = buffer->start;
    26c6:	86 81       	ldd	r24, Z+6	; 0x06
    26c8:	97 81       	ldd	r25, Z+7	; 0x07
    26ca:	95 83       	std	Z+5, r25	; 0x05
    26cc:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	0f 92       	push	r0
	{
	    buffer->count--;
    26d4:	80 81       	ld	r24, Z
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    26de:	0f 90       	pop	r0
    26e0:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR3 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) );
    26e2:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	}
}
    26e6:	ff 91       	pop	r31
    26e8:	ef 91       	pop	r30
    26ea:	bf 91       	pop	r27
    26ec:	af 91       	pop	r26
    26ee:	9f 91       	pop	r25
    26f0:	8f 91       	pop	r24
    26f2:	2f 91       	pop	r18
    26f4:	0f 90       	pop	r0
    26f6:	0b be       	out	0x3b, r0	; 59
    26f8:	0f 90       	pop	r0
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	0f 90       	pop	r0
    26fe:	1f 90       	pop	r1
    2700:	18 95       	reti

00002702 <spiBegin>:
	SPCR |= _BV(SPIE);
}

void spiDetachInterrupt(void)
{
	SPCR &= ~_BV(SPIE);
    2702:	0f 93       	push	r16
    2704:	81 30       	cpi	r24, 0x01	; 1
    2706:	71 f0       	breq	.+28     	; 0x2724 <spiBegin+0x22>
    2708:	18 f0       	brcs	.+6      	; 0x2710 <spiBegin+0xe>
    270a:	82 30       	cpi	r24, 0x02	; 2
    270c:	a9 f0       	breq	.+42     	; 0x2738 <spiBegin+0x36>
    270e:	26 c0       	rjmp	.+76     	; 0x275c <spiBegin+0x5a>
    2710:	84 b1       	in	r24, 0x04	; 4
    2712:	87 60       	ori	r24, 0x07	; 7
    2714:	84 b9       	out	0x04, r24	; 4
    2716:	23 98       	cbi	0x04, 3	; 4
    2718:	85 b1       	in	r24, 0x05	; 5
    271a:	89 60       	ori	r24, 0x09	; 9
    271c:	85 b9       	out	0x05, r24	; 5
    271e:	24 9a       	sbi	0x04, 4	; 4
    2720:	2c 9a       	sbi	0x05, 4	; 5
    2722:	23 c0       	rjmp	.+70     	; 0x276a <spiBegin+0x68>
    2724:	84 b1       	in	r24, 0x04	; 4
    2726:	87 60       	ori	r24, 0x07	; 7
    2728:	84 b9       	out	0x04, r24	; 4
    272a:	23 98       	cbi	0x04, 3	; 4
    272c:	85 b1       	in	r24, 0x05	; 5
    272e:	89 60       	ori	r24, 0x09	; 9
    2730:	85 b9       	out	0x05, r24	; 5
    2732:	9d 9a       	sbi	0x13, 5	; 19
    2734:	a5 9a       	sbi	0x14, 5	; 20
    2736:	19 c0       	rjmp	.+50     	; 0x276a <spiBegin+0x68>
    2738:	84 b1       	in	r24, 0x04	; 4
    273a:	87 60       	ori	r24, 0x07	; 7
    273c:	84 b9       	out	0x04, r24	; 4
    273e:	23 98       	cbi	0x04, 3	; 4
    2740:	85 b1       	in	r24, 0x05	; 5
    2742:	89 60       	ori	r24, 0x09	; 9
    2744:	85 b9       	out	0x05, r24	; 5
    2746:	e1 e0       	ldi	r30, 0x01	; 1
    2748:	f1 e0       	ldi	r31, 0x01	; 1
    274a:	80 81       	ld	r24, Z
    274c:	80 62       	ori	r24, 0x20	; 32
    274e:	80 83       	st	Z, r24
    2750:	e2 e0       	ldi	r30, 0x02	; 2
    2752:	f1 e0       	ldi	r31, 0x01	; 1
    2754:	80 81       	ld	r24, Z
    2756:	80 62       	ori	r24, 0x20	; 32
    2758:	80 83       	st	Z, r24
    275a:	07 c0       	rjmp	.+14     	; 0x276a <spiBegin+0x68>
    275c:	84 b1       	in	r24, 0x04	; 4
    275e:	87 60       	ori	r24, 0x07	; 7
    2760:	84 b9       	out	0x04, r24	; 4
    2762:	23 98       	cbi	0x04, 3	; 4
    2764:	85 b1       	in	r24, 0x05	; 5
    2766:	89 60       	ori	r24, 0x09	; 9
    2768:	85 b9       	out	0x05, r24	; 5
    276a:	8c b5       	in	r24, 0x2c	; 44
    276c:	80 65       	ori	r24, 0x50	; 80
    276e:	8c bd       	out	0x2c, r24	; 44
    2770:	8d b5       	in	r24, 0x2d	; 45
    2772:	8e b5       	in	r24, 0x2e	; 46
    2774:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <__data_end>
    2778:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <__data_end+0x1>
    277c:	89 2b       	or	r24, r25
    277e:	89 f4       	brne	.+34     	; 0x27a2 <spiBegin+0xa0>
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	0e 94 75 0a 	call	0x14ea	; 0x14ea <xQueueCreateMutex>
    2786:	90 93 f1 06 	sts	0x06F1, r25	; 0x8006f1 <__data_end+0x1>
    278a:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <__data_end>
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	41 f0       	breq	.+16     	; 0x27a2 <spiBegin+0xa0>
    2792:	00 e0       	ldi	r16, 0x00	; 0
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	a9 01       	movw	r20, r18
    279a:	60 e0       	ldi	r22, 0x00	; 0
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    27a2:	0f 91       	pop	r16
    27a4:	08 95       	ret

000027a6 <spiSetClockDivider>:
    27a6:	9c b5       	in	r25, 0x2c	; 44
    27a8:	9c 7f       	andi	r25, 0xFC	; 252
    27aa:	28 2f       	mov	r18, r24
    27ac:	23 70       	andi	r18, 0x03	; 3
    27ae:	92 2b       	or	r25, r18
    27b0:	9c bd       	out	0x2c, r25	; 44
    27b2:	9d b5       	in	r25, 0x2d	; 45
    27b4:	82 fb       	bst	r24, 2
    27b6:	88 27       	eor	r24, r24
    27b8:	80 f9       	bld	r24, 0
    27ba:	9e 7f       	andi	r25, 0xFE	; 254
    27bc:	89 2b       	or	r24, r25
    27be:	8d bd       	out	0x2d, r24	; 45
    27c0:	08 95       	ret

000027c2 <spiSetBitOrder>:
    27c2:	81 11       	cpse	r24, r1
    27c4:	04 c0       	rjmp	.+8      	; 0x27ce <spiSetBitOrder+0xc>
    27c6:	8c b5       	in	r24, 0x2c	; 44
    27c8:	80 62       	ori	r24, 0x20	; 32
    27ca:	8c bd       	out	0x2c, r24	; 44
    27cc:	08 95       	ret
    27ce:	8c b5       	in	r24, 0x2c	; 44
    27d0:	8f 7d       	andi	r24, 0xDF	; 223
    27d2:	8c bd       	out	0x2c, r24	; 44
    27d4:	08 95       	ret

000027d6 <spiSetDataMode>:
    27d6:	9c b5       	in	r25, 0x2c	; 44
    27d8:	93 7f       	andi	r25, 0xF3	; 243
    27da:	89 2b       	or	r24, r25
    27dc:	8c bd       	out	0x2c, r24	; 44
    27de:	08 95       	ret

000027e0 <spiSelect>:
/*-----------------------------------------------------------------------*/
/* Select the SPI device                                    */
/*-----------------------------------------------------------------------*/

uint8_t spiSelect(SPI_SLAVE_SELECT SS_pin)	/* 1:Successful, 0:Timeout */
{
    27e0:	cf 93       	push	r28
    27e2:	c8 2f       	mov	r28, r24

	if( (xSemaphoreTake( xSPISemaphore, (SPI_TIMEOUT / portTICK_PERIOD_MS )) == pdTRUE ) )
    27e4:	48 ee       	ldi	r20, 0xE8	; 232
    27e6:	53 e0       	ldi	r21, 0x03	; 3
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	70 e0       	ldi	r23, 0x00	; 0
    27ec:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <__data_end>
    27f0:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <__data_end+0x1>
    27f4:	0e 94 8f 0b 	call	0x171e	; 0x171e <xQueueSemaphoreTake>
    27f8:	81 30       	cpi	r24, 0x01	; 1
    27fa:	b1 f4       	brne	.+44     	; 0x2828 <spiSelect+0x48>
	{

		switch( SS_pin )
    27fc:	c1 30       	cpi	r28, 0x01	; 1
    27fe:	39 f0       	breq	.+14     	; 0x280e <spiSelect+0x2e>
    2800:	18 f0       	brcs	.+6      	; 0x2808 <spiSelect+0x28>
    2802:	c2 30       	cpi	r28, 0x02	; 2
    2804:	39 f0       	breq	.+14     	; 0x2814 <spiSelect+0x34>
    2806:	0d c0       	rjmp	.+26     	; 0x2822 <spiSelect+0x42>
		{
		case Wiznet:	// added for EtherMega Wiznet 5100/5200 support
#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
			W5100_SEN_ENABLE(1); // Enable SEN, to get on the SPI bus. PORT D7
#endif
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
    2808:	2c 98       	cbi	0x05, 4	; 5
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    280a:	81 e0       	ldi	r24, 0x01	; 1
		case Wiznet:	// added for EtherMega Wiznet 5100/5200 support
#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
			W5100_SEN_ENABLE(1); // Enable SEN, to get on the SPI bus. PORT D7
#endif
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
			break;
    280c:	0e c0       	rjmp	.+28     	; 0x282a <spiSelect+0x4a>

		case SDCard:	// added for  SD Card support
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
    280e:	a5 98       	cbi	0x14, 5	; 20
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    2810:	81 e0       	ldi	r24, 0x01	; 1
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
			break;

		case SDCard:	// added for  SD Card support
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
			break;
    2812:	0b c0       	rjmp	.+22     	; 0x282a <spiSelect+0x4a>

		case Gameduino2:// added for Gameduino2 using FTDI FT800
			SPI_PORT_SS_G2 &= ~SPI_BIT_SS_G2; // Pull SS low to select the Gameduino 2.
    2814:	e2 e0       	ldi	r30, 0x02	; 2
    2816:	f1 e0       	ldi	r31, 0x01	; 1
    2818:	80 81       	ld	r24, Z
    281a:	8f 7d       	andi	r24, 0xDF	; 223
    281c:	80 83       	st	Z, r24
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    281e:	81 e0       	ldi	r24, 0x01	; 1
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
			break;

		case Gameduino2:// added for Gameduino2 using FTDI FT800
			SPI_PORT_SS_G2 &= ~SPI_BIT_SS_G2; // Pull SS low to select the Gameduino 2.
			break;
    2820:	04 c0       	rjmp	.+8      	; 0x282a <spiSelect+0x4a>
			break;
#endif

		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
    2822:	28 98       	cbi	0x05, 0	; 5
			break;
		}
		return 1;		// OK /
    2824:	81 e0       	ldi	r24, 0x01	; 1
#endif

		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
    2826:	01 c0       	rjmp	.+2      	; 0x282a <spiSelect+0x4a>
		}
		return 1;		// OK /
	}
	else
		return 0;		// Timeout
    2828:	80 e0       	ldi	r24, 0x00	; 0
}
    282a:	cf 91       	pop	r28
    282c:	08 95       	ret

0000282e <spiDeselect>:
/*-----------------------------------------------------------------------*/
/* Deselect the SPI device                                 */
/*-----------------------------------------------------------------------*/

void spiDeselect(SPI_SLAVE_SELECT SS_pin)
{
    282e:	0f 93       	push	r16
	// Pull SS high to Deselect the card.
	switch( SS_pin )
    2830:	81 30       	cpi	r24, 0x01	; 1
    2832:	31 f0       	breq	.+12     	; 0x2840 <spiDeselect+0x12>
    2834:	18 f0       	brcs	.+6      	; 0x283c <spiDeselect+0xe>
    2836:	82 30       	cpi	r24, 0x02	; 2
    2838:	29 f0       	breq	.+10     	; 0x2844 <spiDeselect+0x16>
    283a:	0a c0       	rjmp	.+20     	; 0x2850 <spiDeselect+0x22>
	{
	case Wiznet:		// added for EtherMega Wiznet 5100/5200 support
		SPI_PORT |= SPI_BIT_SS_WIZNET;
    283c:	2c 9a       	sbi	0x05, 4	; 5

#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
		W5100_SEN_ENABLE(0); // Disable SEN, to get off the SPI bus. PORT D7
#endif
		break;
    283e:	09 c0       	rjmp	.+18     	; 0x2852 <spiDeselect+0x24>

	case SDCard:		// added for  SD Card support
		SPI_PORT_SS_SD |= SPI_BIT_SS_SD;	// Pull SS high to deselect the uSD card.
    2840:	a5 9a       	sbi	0x14, 5	; 20
		break;
    2842:	07 c0       	rjmp	.+14     	; 0x2852 <spiDeselect+0x24>

	case Gameduino2:	// added for Gameduino 2 using FTDI FT800
		SPI_PORT_SS_G2 |= SPI_BIT_SS_G2;	// Pull SS high to deselect the Gameduino 2.
    2844:	e2 e0       	ldi	r30, 0x02	; 2
    2846:	f1 e0       	ldi	r31, 0x01	; 1
    2848:	80 81       	ld	r24, Z
    284a:	80 62       	ori	r24, 0x20	; 32
    284c:	80 83       	st	Z, r24
		break;
    284e:	01 c0       	rjmp	.+2      	; 0x2852 <spiDeselect+0x24>
		break;
#endif

	case Default:		// default SS line for Arduino Uno
	default:
		SPI_PORT |= SPI_BIT_SS;
    2850:	28 9a       	sbi	0x05, 0	; 5
		break;
	}

	xSemaphoreGive( xSPISemaphore );	/* Free FreeRTOS semaphore to allow other SPI access */
    2852:	00 e0       	ldi	r16, 0x00	; 0
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	a9 01       	movw	r20, r18
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <__data_end>
    2862:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <__data_end+0x1>
    2866:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
}
    286a:	0f 91       	pop	r16
    286c:	08 95       	ret

0000286e <spiTransfer>:



uint8_t spiTransfer(uint8_t data)
{
    286e:	28 2f       	mov	r18, r24
	// That is NOT done by this function..., because...
	// Some devices need to have their SS held low across multiple transfer calls.
	// Using spiSelect (SS_pin);

	// If the SPI module has not been enabled yet, then return with nothing.
	if( !(SPCR & _BV(SPE)) ) return 0;
    2870:	9c b5       	in	r25, 0x2c	; 44
    2872:	89 2f       	mov	r24, r25
    2874:	80 74       	andi	r24, 0x40	; 64
    2876:	96 ff       	sbrs	r25, 6
    2878:	17 c0       	rjmp	.+46     	; 0x28a8 <spiTransfer+0x3a>

	// The SPI module is enabled, but it is in slave mode, so we can not
	// transmit the byte. This can happen if SSbar is an input and it went low.
	// We will try to recover by setting the MSTR bit.
	if( !(SPCR & _BV(MSTR)) )
    287a:	0c b4       	in	r0, 0x2c	; 44
    287c:	04 fc       	sbrc	r0, 4
    287e:	08 c0       	rjmp	.+16     	; 0x2890 <spiTransfer+0x22>
		{
			SPCR |= _BV(MSTR);
    2880:	8c b5       	in	r24, 0x2c	; 44
    2882:	80 61       	ori	r24, 0x10	; 16
    2884:	8c bd       	out	0x2c, r24	; 44
			if( !(SPCR & _BV(MSTR)) ) return 0;
    2886:	9c b5       	in	r25, 0x2c	; 44
    2888:	89 2f       	mov	r24, r25
    288a:	80 71       	andi	r24, 0x10	; 16
    288c:	94 ff       	sbrs	r25, 4
    288e:	0c c0       	rjmp	.+24     	; 0x28a8 <spiTransfer+0x3a>
		}

	SPDR = data; 	// Begin transmission
    2890:	2e bd       	out	0x2e, r18	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop from iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
	__asm__ __volatile__("nop");
    2892:	00 00       	nop

	while( !(SPSR & _BV(SPIF)) )
    2894:	05 c0       	rjmp	.+10     	; 0x28a0 <spiTransfer+0x32>
	{
		if( !(SPCR & _BV(MSTR)) ) return 0;
    2896:	9c b5       	in	r25, 0x2c	; 44
    2898:	89 2f       	mov	r24, r25
    289a:	80 71       	andi	r24, 0x10	; 16
    289c:	94 ff       	sbrs	r25, 4
    289e:	04 c0       	rjmp	.+8      	; 0x28a8 <spiTransfer+0x3a>
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
	__asm__ __volatile__("nop");

	while( !(SPSR & _BV(SPIF)) )
    28a0:	0d b4       	in	r0, 0x2d	; 45
    28a2:	07 fe       	sbrs	r0, 7
    28a4:	f8 cf       	rjmp	.-16     	; 0x2896 <spiTransfer+0x28>
		if( !(SPCR & _BV(MSTR)) ) return 0;
			// The SPI module has left master mode, so return.
			// Otherwise, this will be an infinite loop.
	}

	return SPDR;
    28a6:	8e b5       	in	r24, 0x2e	; 46

	// Make sure you pull slave select high to indicate end of transfer.
	// That is NOT done by this function.
	// Using spiDeselect (SS_pin);
}
    28a8:	08 95       	ret

000028aa <prvResetNextTaskUnblockTime>:
    28aa:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <pxDelayedTaskList>
    28ae:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <pxDelayedTaskList+0x1>
    28b2:	80 81       	ld	r24, Z
    28b4:	81 11       	cpse	r24, r1
    28b6:	0c c0       	rjmp	.+24     	; 0x28d0 <prvResetNextTaskUnblockTime+0x26>
    28b8:	8f ef       	ldi	r24, 0xFF	; 255
    28ba:	9f ef       	ldi	r25, 0xFF	; 255
    28bc:	dc 01       	movw	r26, r24
    28be:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <xNextTaskUnblockTime>
    28c2:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <xNextTaskUnblockTime+0x1>
    28c6:	a0 93 f7 06 	sts	0x06F7, r26	; 0x8006f7 <xNextTaskUnblockTime+0x2>
    28ca:	b0 93 f8 06 	sts	0x06F8, r27	; 0x8006f8 <xNextTaskUnblockTime+0x3>
    28ce:	08 95       	ret
    28d0:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <pxDelayedTaskList>
    28d4:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <pxDelayedTaskList+0x1>
    28d8:	07 80       	ldd	r0, Z+7	; 0x07
    28da:	f0 85       	ldd	r31, Z+8	; 0x08
    28dc:	e0 2d       	mov	r30, r0
    28de:	00 84       	ldd	r0, Z+8	; 0x08
    28e0:	f1 85       	ldd	r31, Z+9	; 0x09
    28e2:	e0 2d       	mov	r30, r0
    28e4:	82 81       	ldd	r24, Z+2	; 0x02
    28e6:	93 81       	ldd	r25, Z+3	; 0x03
    28e8:	a4 81       	ldd	r26, Z+4	; 0x04
    28ea:	b5 81       	ldd	r27, Z+5	; 0x05
    28ec:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <xNextTaskUnblockTime>
    28f0:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <xNextTaskUnblockTime+0x1>
    28f4:	a0 93 f7 06 	sts	0x06F7, r26	; 0x8006f7 <xNextTaskUnblockTime+0x2>
    28f8:	b0 93 f8 06 	sts	0x06F8, r27	; 0x8006f8 <xNextTaskUnblockTime+0x3>
    28fc:	08 95       	ret

000028fe <prvAddCurrentTaskToDelayedList>:
    28fe:	8f 92       	push	r8
    2900:	9f 92       	push	r9
    2902:	af 92       	push	r10
    2904:	bf 92       	push	r11
    2906:	cf 92       	push	r12
    2908:	df 92       	push	r13
    290a:	ef 92       	push	r14
    290c:	ff 92       	push	r15
    290e:	cf 93       	push	r28
    2910:	6b 01       	movw	r12, r22
    2912:	7c 01       	movw	r14, r24
    2914:	c4 2f       	mov	r28, r20
    2916:	80 90 ff 06 	lds	r8, 0x06FF	; 0x8006ff <xTickCount>
    291a:	90 90 00 07 	lds	r9, 0x0700	; 0x800700 <xTickCount+0x1>
    291e:	a0 90 01 07 	lds	r10, 0x0701	; 0x800701 <xTickCount+0x2>
    2922:	b0 90 02 07 	lds	r11, 0x0702	; 0x800702 <xTickCount+0x3>
    2926:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <pxCurrentTCB>
    292a:	90 91 6d 07 	lds	r25, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    292e:	02 96       	adiw	r24, 0x02	; 2
    2930:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2934:	8f ef       	ldi	r24, 0xFF	; 255
    2936:	c8 16       	cp	r12, r24
    2938:	d8 06       	cpc	r13, r24
    293a:	e8 06       	cpc	r14, r24
    293c:	f8 06       	cpc	r15, r24
    293e:	69 f4       	brne	.+26     	; 0x295a <prvAddCurrentTaskToDelayedList+0x5c>
    2940:	cc 23       	and	r28, r28
    2942:	59 f0       	breq	.+22     	; 0x295a <prvAddCurrentTaskToDelayedList+0x5c>
    2944:	60 91 6c 07 	lds	r22, 0x076C	; 0x80076c <pxCurrentTCB>
    2948:	70 91 6d 07 	lds	r23, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    294c:	6e 5f       	subi	r22, 0xFE	; 254
    294e:	7f 4f       	sbci	r23, 0xFF	; 255
    2950:	84 e0       	ldi	r24, 0x04	; 4
    2952:	97 e0       	ldi	r25, 0x07	; 7
    2954:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2958:	3f c0       	rjmp	.+126    	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    295a:	c8 0c       	add	r12, r8
    295c:	d9 1c       	adc	r13, r9
    295e:	ea 1c       	adc	r14, r10
    2960:	fb 1c       	adc	r15, r11
    2962:	e0 91 6c 07 	lds	r30, 0x076C	; 0x80076c <pxCurrentTCB>
    2966:	f0 91 6d 07 	lds	r31, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    296a:	c2 82       	std	Z+2, r12	; 0x02
    296c:	d3 82       	std	Z+3, r13	; 0x03
    296e:	e4 82       	std	Z+4, r14	; 0x04
    2970:	f5 82       	std	Z+5, r15	; 0x05
    2972:	c8 14       	cp	r12, r8
    2974:	d9 04       	cpc	r13, r9
    2976:	ea 04       	cpc	r14, r10
    2978:	fb 04       	cpc	r15, r11
    297a:	68 f4       	brcc	.+26     	; 0x2996 <prvAddCurrentTaskToDelayedList+0x98>
    297c:	60 91 6c 07 	lds	r22, 0x076C	; 0x80076c <pxCurrentTCB>
    2980:	70 91 6d 07 	lds	r23, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    2984:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <pxOverflowDelayedTaskList>
    2988:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <pxOverflowDelayedTaskList+0x1>
    298c:	6e 5f       	subi	r22, 0xFE	; 254
    298e:	7f 4f       	sbci	r23, 0xFF	; 255
    2990:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    2994:	21 c0       	rjmp	.+66     	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    2996:	60 91 6c 07 	lds	r22, 0x076C	; 0x80076c <pxCurrentTCB>
    299a:	70 91 6d 07 	lds	r23, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    299e:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <pxDelayedTaskList>
    29a2:	90 91 29 07 	lds	r25, 0x0729	; 0x800729 <pxDelayedTaskList+0x1>
    29a6:	6e 5f       	subi	r22, 0xFE	; 254
    29a8:	7f 4f       	sbci	r23, 0xFF	; 255
    29aa:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    29ae:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <xNextTaskUnblockTime>
    29b2:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <xNextTaskUnblockTime+0x1>
    29b6:	a0 91 f7 06 	lds	r26, 0x06F7	; 0x8006f7 <xNextTaskUnblockTime+0x2>
    29ba:	b0 91 f8 06 	lds	r27, 0x06F8	; 0x8006f8 <xNextTaskUnblockTime+0x3>
    29be:	c8 16       	cp	r12, r24
    29c0:	d9 06       	cpc	r13, r25
    29c2:	ea 06       	cpc	r14, r26
    29c4:	fb 06       	cpc	r15, r27
    29c6:	40 f4       	brcc	.+16     	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    29c8:	c0 92 f5 06 	sts	0x06F5, r12	; 0x8006f5 <xNextTaskUnblockTime>
    29cc:	d0 92 f6 06 	sts	0x06F6, r13	; 0x8006f6 <xNextTaskUnblockTime+0x1>
    29d0:	e0 92 f7 06 	sts	0x06F7, r14	; 0x8006f7 <xNextTaskUnblockTime+0x2>
    29d4:	f0 92 f8 06 	sts	0x06F8, r15	; 0x8006f8 <xNextTaskUnblockTime+0x3>
    29d8:	cf 91       	pop	r28
    29da:	ff 90       	pop	r15
    29dc:	ef 90       	pop	r14
    29de:	df 90       	pop	r13
    29e0:	cf 90       	pop	r12
    29e2:	bf 90       	pop	r11
    29e4:	af 90       	pop	r10
    29e6:	9f 90       	pop	r9
    29e8:	8f 90       	pop	r8
    29ea:	08 95       	ret

000029ec <xTaskCreate>:
    29ec:	4f 92       	push	r4
    29ee:	5f 92       	push	r5
    29f0:	6f 92       	push	r6
    29f2:	7f 92       	push	r7
    29f4:	8f 92       	push	r8
    29f6:	9f 92       	push	r9
    29f8:	af 92       	push	r10
    29fa:	bf 92       	push	r11
    29fc:	cf 92       	push	r12
    29fe:	df 92       	push	r13
    2a00:	ef 92       	push	r14
    2a02:	ff 92       	push	r15
    2a04:	0f 93       	push	r16
    2a06:	cf 93       	push	r28
    2a08:	df 93       	push	r29
    2a0a:	4c 01       	movw	r8, r24
    2a0c:	6b 01       	movw	r12, r22
    2a0e:	5a 01       	movw	r10, r20
    2a10:	29 01       	movw	r4, r18
    2a12:	ca 01       	movw	r24, r20
    2a14:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    2a18:	3c 01       	movw	r6, r24
    2a1a:	89 2b       	or	r24, r25
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <xTaskCreate+0x34>
    2a1e:	ec c0       	rjmp	.+472    	; 0x2bf8 <xTaskCreate+0x20c>
    2a20:	83 e3       	ldi	r24, 0x33	; 51
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    2a28:	ec 01       	movw	r28, r24
    2a2a:	89 2b       	or	r24, r25
    2a2c:	b1 f0       	breq	.+44     	; 0x2a5a <xTaskCreate+0x6e>
    2a2e:	7c 8e       	std	Y+28, r7	; 0x1c
    2a30:	6b 8e       	std	Y+27, r6	; 0x1b
    2a32:	a5 01       	movw	r20, r10
    2a34:	65 ea       	ldi	r22, 0xA5	; 165
    2a36:	70 e0       	ldi	r23, 0x00	; 0
    2a38:	c3 01       	movw	r24, r6
    2a3a:	0e 94 28 5a 	call	0xb450	; 0xb450 <memset>
    2a3e:	21 e0       	ldi	r18, 0x01	; 1
    2a40:	a2 1a       	sub	r10, r18
    2a42:	b1 08       	sbc	r11, r1
    2a44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a48:	a8 0e       	add	r10, r24
    2a4a:	b9 1e       	adc	r11, r25
    2a4c:	d6 01       	movw	r26, r12
    2a4e:	8c 91       	ld	r24, X
    2a50:	8d 8f       	std	Y+29, r24	; 0x1d
    2a52:	8c 91       	ld	r24, X
    2a54:	81 11       	cpse	r24, r1
    2a56:	05 c0       	rjmp	.+10     	; 0x2a62 <xTaskCreate+0x76>
    2a58:	18 c0       	rjmp	.+48     	; 0x2a8a <xTaskCreate+0x9e>
    2a5a:	c3 01       	movw	r24, r6
    2a5c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vPortFree>
    2a60:	cb c0       	rjmp	.+406    	; 0x2bf8 <xTaskCreate+0x20c>
    2a62:	ae 01       	movw	r20, r28
    2a64:	42 5e       	subi	r20, 0xE2	; 226
    2a66:	5f 4f       	sbci	r21, 0xFF	; 255
    2a68:	f6 01       	movw	r30, r12
    2a6a:	31 96       	adiw	r30, 0x01	; 1
    2a6c:	bf e0       	ldi	r27, 0x0F	; 15
    2a6e:	cb 0e       	add	r12, r27
    2a70:	d1 1c       	adc	r13, r1
    2a72:	cf 01       	movw	r24, r30
    2a74:	21 91       	ld	r18, Z+
    2a76:	da 01       	movw	r26, r20
    2a78:	2d 93       	st	X+, r18
    2a7a:	ad 01       	movw	r20, r26
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	8c 91       	ld	r24, X
    2a80:	88 23       	and	r24, r24
    2a82:	19 f0       	breq	.+6      	; 0x2a8a <xTaskCreate+0x9e>
    2a84:	ec 15       	cp	r30, r12
    2a86:	fd 05       	cpc	r31, r13
    2a88:	a1 f7       	brne	.-24     	; 0x2a72 <xTaskCreate+0x86>
    2a8a:	1b a6       	std	Y+43, r1	; 0x2b
    2a8c:	04 30       	cpi	r16, 0x04	; 4
    2a8e:	08 f0       	brcs	.+2      	; 0x2a92 <xTaskCreate+0xa6>
    2a90:	03 e0       	ldi	r16, 0x03	; 3
    2a92:	0a 8f       	std	Y+26, r16	; 0x1a
    2a94:	0c a7       	std	Y+44, r16	; 0x2c
    2a96:	1d a6       	std	Y+45, r1	; 0x2d
    2a98:	6e 01       	movw	r12, r28
    2a9a:	b2 e0       	ldi	r27, 0x02	; 2
    2a9c:	cb 0e       	add	r12, r27
    2a9e:	d1 1c       	adc	r13, r1
    2aa0:	c6 01       	movw	r24, r12
    2aa2:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    2aa6:	ce 01       	movw	r24, r28
    2aa8:	0e 96       	adiw	r24, 0x0e	; 14
    2aaa:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    2aae:	db 87       	std	Y+11, r29	; 0x0b
    2ab0:	ca 87       	std	Y+10, r28	; 0x0a
    2ab2:	84 e0       	ldi	r24, 0x04	; 4
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	a0 e0       	ldi	r26, 0x00	; 0
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	80 1b       	sub	r24, r16
    2abc:	91 09       	sbc	r25, r1
    2abe:	a1 09       	sbc	r26, r1
    2ac0:	b1 09       	sbc	r27, r1
    2ac2:	8e 87       	std	Y+14, r24	; 0x0e
    2ac4:	9f 87       	std	Y+15, r25	; 0x0f
    2ac6:	a8 8b       	std	Y+16, r26	; 0x10
    2ac8:	b9 8b       	std	Y+17, r27	; 0x11
    2aca:	df 8b       	std	Y+23, r29	; 0x17
    2acc:	ce 8b       	std	Y+22, r28	; 0x16
    2ace:	1e a6       	std	Y+46, r1	; 0x2e
    2ad0:	1f a6       	std	Y+47, r1	; 0x2f
    2ad2:	18 aa       	std	Y+48, r1	; 0x30
    2ad4:	19 aa       	std	Y+49, r1	; 0x31
    2ad6:	1a aa       	std	Y+50, r1	; 0x32
    2ad8:	a2 01       	movw	r20, r4
    2ada:	b4 01       	movw	r22, r8
    2adc:	c5 01       	movw	r24, r10
    2ade:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pxPortInitialiseStack>
    2ae2:	99 83       	std	Y+1, r25	; 0x01
    2ae4:	88 83       	st	Y, r24
    2ae6:	e1 14       	cp	r14, r1
    2ae8:	f1 04       	cpc	r15, r1
    2aea:	19 f0       	breq	.+6      	; 0x2af2 <xTaskCreate+0x106>
    2aec:	f7 01       	movw	r30, r14
    2aee:	d1 83       	std	Z+1, r29	; 0x01
    2af0:	c0 83       	st	Z, r28
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	0f 92       	push	r0
    2af8:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxCurrentNumberOfTasks>
    2afc:	8f 5f       	subi	r24, 0xFF	; 255
    2afe:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <uxCurrentNumberOfTasks>
    2b02:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <pxCurrentTCB>
    2b06:	90 91 6d 07 	lds	r25, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    2b0a:	89 2b       	or	r24, r25
    2b0c:	d1 f5       	brne	.+116    	; 0x2b82 <xTaskCreate+0x196>
    2b0e:	d0 93 6d 07 	sts	0x076D, r29	; 0x80076d <pxCurrentTCB+0x1>
    2b12:	c0 93 6c 07 	sts	0x076C, r28	; 0x80076c <pxCurrentTCB>
    2b16:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxCurrentNumberOfTasks>
    2b1a:	81 30       	cpi	r24, 0x01	; 1
    2b1c:	09 f0       	breq	.+2      	; 0x2b20 <xTaskCreate+0x134>
    2b1e:	41 c0       	rjmp	.+130    	; 0x2ba2 <xTaskCreate+0x1b6>
    2b20:	80 e4       	ldi	r24, 0x40	; 64
    2b22:	97 e0       	ldi	r25, 0x07	; 7
    2b24:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b28:	8b e4       	ldi	r24, 0x4B	; 75
    2b2a:	97 e0       	ldi	r25, 0x07	; 7
    2b2c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b30:	86 e5       	ldi	r24, 0x56	; 86
    2b32:	97 e0       	ldi	r25, 0x07	; 7
    2b34:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b38:	81 e6       	ldi	r24, 0x61	; 97
    2b3a:	97 e0       	ldi	r25, 0x07	; 7
    2b3c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b40:	85 e3       	ldi	r24, 0x35	; 53
    2b42:	97 e0       	ldi	r25, 0x07	; 7
    2b44:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b48:	8a e2       	ldi	r24, 0x2A	; 42
    2b4a:	97 e0       	ldi	r25, 0x07	; 7
    2b4c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b50:	8b e1       	ldi	r24, 0x1B	; 27
    2b52:	97 e0       	ldi	r25, 0x07	; 7
    2b54:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b58:	80 e1       	ldi	r24, 0x10	; 16
    2b5a:	97 e0       	ldi	r25, 0x07	; 7
    2b5c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b60:	84 e0       	ldi	r24, 0x04	; 4
    2b62:	97 e0       	ldi	r25, 0x07	; 7
    2b64:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b68:	85 e3       	ldi	r24, 0x35	; 53
    2b6a:	97 e0       	ldi	r25, 0x07	; 7
    2b6c:	90 93 29 07 	sts	0x0729, r25	; 0x800729 <pxDelayedTaskList+0x1>
    2b70:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <pxDelayedTaskList>
    2b74:	8a e2       	ldi	r24, 0x2A	; 42
    2b76:	97 e0       	ldi	r25, 0x07	; 7
    2b78:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <pxOverflowDelayedTaskList+0x1>
    2b7c:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <pxOverflowDelayedTaskList>
    2b80:	10 c0       	rjmp	.+32     	; 0x2ba2 <xTaskCreate+0x1b6>
    2b82:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <xSchedulerRunning>
    2b86:	81 11       	cpse	r24, r1
    2b88:	0c c0       	rjmp	.+24     	; 0x2ba2 <xTaskCreate+0x1b6>
    2b8a:	e0 91 6c 07 	lds	r30, 0x076C	; 0x80076c <pxCurrentTCB>
    2b8e:	f0 91 6d 07 	lds	r31, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    2b92:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b94:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b96:	89 17       	cp	r24, r25
    2b98:	20 f0       	brcs	.+8      	; 0x2ba2 <xTaskCreate+0x1b6>
    2b9a:	d0 93 6d 07 	sts	0x076D, r29	; 0x80076d <pxCurrentTCB+0x1>
    2b9e:	c0 93 6c 07 	sts	0x076C, r28	; 0x80076c <pxCurrentTCB>
    2ba2:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxTaskNumber>
    2ba6:	8f 5f       	subi	r24, 0xFF	; 255
    2ba8:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <uxTaskNumber>
    2bac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bae:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <uxTopReadyPriority>
    2bb2:	98 17       	cp	r25, r24
    2bb4:	10 f4       	brcc	.+4      	; 0x2bba <xTaskCreate+0x1ce>
    2bb6:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxTopReadyPriority>
    2bba:	fb e0       	ldi	r31, 0x0B	; 11
    2bbc:	8f 9f       	mul	r24, r31
    2bbe:	c0 01       	movw	r24, r0
    2bc0:	11 24       	eor	r1, r1
    2bc2:	b6 01       	movw	r22, r12
    2bc4:	80 5c       	subi	r24, 0xC0	; 192
    2bc6:	98 4f       	sbci	r25, 0xF8	; 248
    2bc8:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2bcc:	0f 90       	pop	r0
    2bce:	0f be       	out	0x3f, r0	; 63
    2bd0:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <xSchedulerRunning>
    2bd4:	88 23       	and	r24, r24
    2bd6:	61 f0       	breq	.+24     	; 0x2bf0 <xTaskCreate+0x204>
    2bd8:	e0 91 6c 07 	lds	r30, 0x076C	; 0x80076c <pxCurrentTCB>
    2bdc:	f0 91 6d 07 	lds	r31, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    2be0:	92 8d       	ldd	r25, Z+26	; 0x1a
    2be2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2be4:	98 17       	cp	r25, r24
    2be6:	30 f4       	brcc	.+12     	; 0x2bf4 <xTaskCreate+0x208>
    2be8:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	05 c0       	rjmp	.+10     	; 0x2bfa <xTaskCreate+0x20e>
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	03 c0       	rjmp	.+6      	; 0x2bfa <xTaskCreate+0x20e>
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	01 c0       	rjmp	.+2      	; 0x2bfa <xTaskCreate+0x20e>
    2bf8:	8f ef       	ldi	r24, 0xFF	; 255
    2bfa:	df 91       	pop	r29
    2bfc:	cf 91       	pop	r28
    2bfe:	0f 91       	pop	r16
    2c00:	ff 90       	pop	r15
    2c02:	ef 90       	pop	r14
    2c04:	df 90       	pop	r13
    2c06:	cf 90       	pop	r12
    2c08:	bf 90       	pop	r11
    2c0a:	af 90       	pop	r10
    2c0c:	9f 90       	pop	r9
    2c0e:	8f 90       	pop	r8
    2c10:	7f 90       	pop	r7
    2c12:	6f 90       	pop	r6
    2c14:	5f 90       	pop	r5
    2c16:	4f 90       	pop	r4
    2c18:	08 95       	ret

00002c1a <vTaskResume>:
    2c1a:	0f 93       	push	r16
    2c1c:	1f 93       	push	r17
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
    2c22:	00 97       	sbiw	r24, 0x00	; 0
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <vTaskResume+0xe>
    2c26:	3d c0       	rjmp	.+122    	; 0x2ca2 <vTaskResume+0x88>
    2c28:	20 91 6c 07 	lds	r18, 0x076C	; 0x80076c <pxCurrentTCB>
    2c2c:	30 91 6d 07 	lds	r19, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    2c30:	82 17       	cp	r24, r18
    2c32:	93 07       	cpc	r25, r19
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <vTaskResume+0x1e>
    2c36:	35 c0       	rjmp	.+106    	; 0x2ca2 <vTaskResume+0x88>
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	0f 92       	push	r0
    2c3e:	fc 01       	movw	r30, r24
    2c40:	24 85       	ldd	r18, Z+12	; 0x0c
    2c42:	35 85       	ldd	r19, Z+13	; 0x0d
    2c44:	24 50       	subi	r18, 0x04	; 4
    2c46:	37 40       	sbci	r19, 0x07	; 7
    2c48:	51 f5       	brne	.+84     	; 0x2c9e <vTaskResume+0x84>
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	20 8d       	ldd	r18, Z+24	; 0x18
    2c4e:	31 8d       	ldd	r19, Z+25	; 0x19
    2c50:	f7 e0       	ldi	r31, 0x07	; 7
    2c52:	2b 31       	cpi	r18, 0x1B	; 27
    2c54:	3f 07       	cpc	r19, r31
    2c56:	19 f1       	breq	.+70     	; 0x2c9e <vTaskResume+0x84>
    2c58:	23 2b       	or	r18, r19
    2c5a:	09 f5       	brne	.+66     	; 0x2c9e <vTaskResume+0x84>
    2c5c:	ec 01       	movw	r28, r24
    2c5e:	8c 01       	movw	r16, r24
    2c60:	0e 5f       	subi	r16, 0xFE	; 254
    2c62:	1f 4f       	sbci	r17, 0xFF	; 255
    2c64:	c8 01       	movw	r24, r16
    2c66:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2c6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c6c:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <uxTopReadyPriority>
    2c70:	98 17       	cp	r25, r24
    2c72:	10 f4       	brcc	.+4      	; 0x2c78 <vTaskResume+0x5e>
    2c74:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxTopReadyPriority>
    2c78:	2b e0       	ldi	r18, 0x0B	; 11
    2c7a:	82 9f       	mul	r24, r18
    2c7c:	c0 01       	movw	r24, r0
    2c7e:	11 24       	eor	r1, r1
    2c80:	b8 01       	movw	r22, r16
    2c82:	80 5c       	subi	r24, 0xC0	; 192
    2c84:	98 4f       	sbci	r25, 0xF8	; 248
    2c86:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2c8a:	e0 91 6c 07 	lds	r30, 0x076C	; 0x80076c <pxCurrentTCB>
    2c8e:	f0 91 6d 07 	lds	r31, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    2c92:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c94:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c96:	98 17       	cp	r25, r24
    2c98:	10 f0       	brcs	.+4      	; 0x2c9e <vTaskResume+0x84>
    2c9a:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2c9e:	0f 90       	pop	r0
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	df 91       	pop	r29
    2ca4:	cf 91       	pop	r28
    2ca6:	1f 91       	pop	r17
    2ca8:	0f 91       	pop	r16
    2caa:	08 95       	ret

00002cac <vTaskStartScheduler>:
    2cac:	ef 92       	push	r14
    2cae:	ff 92       	push	r15
    2cb0:	0f 93       	push	r16
    2cb2:	0f 2e       	mov	r0, r31
    2cb4:	f3 ef       	ldi	r31, 0xF3	; 243
    2cb6:	ef 2e       	mov	r14, r31
    2cb8:	f6 e0       	ldi	r31, 0x06	; 6
    2cba:	ff 2e       	mov	r15, r31
    2cbc:	f0 2d       	mov	r31, r0
    2cbe:	00 e0       	ldi	r16, 0x00	; 0
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	40 e8       	ldi	r20, 0x80	; 128
    2cc6:	50 e0       	ldi	r21, 0x00	; 0
    2cc8:	66 e1       	ldi	r22, 0x16	; 22
    2cca:	72 e0       	ldi	r23, 0x02	; 2
    2ccc:	88 e3       	ldi	r24, 0x38	; 56
    2cce:	95 e0       	ldi	r25, 0x05	; 5
    2cd0:	8d de       	rcall	.-742    	; 0x29ec <xTaskCreate>
    2cd2:	81 30       	cpi	r24, 0x01	; 1
    2cd4:	e1 f4       	brne	.+56     	; 0x2d0e <vTaskStartScheduler+0x62>
    2cd6:	ce d4       	rcall	.+2460   	; 0x3674 <xTimerCreateTimerTask>
    2cd8:	81 30       	cpi	r24, 0x01	; 1
    2cda:	c9 f4       	brne	.+50     	; 0x2d0e <vTaskStartScheduler+0x62>
    2cdc:	f8 94       	cli
    2cde:	8f ef       	ldi	r24, 0xFF	; 255
    2ce0:	9f ef       	ldi	r25, 0xFF	; 255
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <xNextTaskUnblockTime>
    2ce8:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <xNextTaskUnblockTime+0x1>
    2cec:	a0 93 f7 06 	sts	0x06F7, r26	; 0x8006f7 <xNextTaskUnblockTime+0x2>
    2cf0:	b0 93 f8 06 	sts	0x06F8, r27	; 0x8006f8 <xNextTaskUnblockTime+0x3>
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <xSchedulerRunning>
    2cfa:	10 92 ff 06 	sts	0x06FF, r1	; 0x8006ff <xTickCount>
    2cfe:	10 92 00 07 	sts	0x0700, r1	; 0x800700 <xTickCount+0x1>
    2d02:	10 92 01 07 	sts	0x0701, r1	; 0x800701 <xTickCount+0x2>
    2d06:	10 92 02 07 	sts	0x0702, r1	; 0x800702 <xTickCount+0x3>
    2d0a:	0e 94 56 06 	call	0xcac	; 0xcac <xPortStartScheduler>
    2d0e:	0f 91       	pop	r16
    2d10:	ff 90       	pop	r15
    2d12:	ef 90       	pop	r14
    2d14:	08 95       	ret

00002d16 <vTaskSuspendAll>:
    2d16:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <uxSchedulerSuspended>
    2d1a:	8f 5f       	subi	r24, 0xFF	; 255
    2d1c:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <uxSchedulerSuspended>
    2d20:	08 95       	ret

00002d22 <xTaskGetTickCount>:
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	0f 92       	push	r0
    2d28:	60 91 ff 06 	lds	r22, 0x06FF	; 0x8006ff <xTickCount>
    2d2c:	70 91 00 07 	lds	r23, 0x0700	; 0x800700 <xTickCount+0x1>
    2d30:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <xTickCount+0x2>
    2d34:	90 91 02 07 	lds	r25, 0x0702	; 0x800702 <xTickCount+0x3>
    2d38:	0f 90       	pop	r0
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	08 95       	ret

00002d3e <xTaskIncrementTick>:
    2d3e:	9f 92       	push	r9
    2d40:	af 92       	push	r10
    2d42:	bf 92       	push	r11
    2d44:	cf 92       	push	r12
    2d46:	df 92       	push	r13
    2d48:	ef 92       	push	r14
    2d4a:	ff 92       	push	r15
    2d4c:	0f 93       	push	r16
    2d4e:	1f 93       	push	r17
    2d50:	cf 93       	push	r28
    2d52:	df 93       	push	r29
    2d54:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <uxSchedulerSuspended>
    2d58:	81 11       	cpse	r24, r1
    2d5a:	ad c0       	rjmp	.+346    	; 0x2eb6 <xTaskIncrementTick+0x178>
    2d5c:	c0 90 ff 06 	lds	r12, 0x06FF	; 0x8006ff <xTickCount>
    2d60:	d0 90 00 07 	lds	r13, 0x0700	; 0x800700 <xTickCount+0x1>
    2d64:	e0 90 01 07 	lds	r14, 0x0701	; 0x800701 <xTickCount+0x2>
    2d68:	f0 90 02 07 	lds	r15, 0x0702	; 0x800702 <xTickCount+0x3>
    2d6c:	8f ef       	ldi	r24, 0xFF	; 255
    2d6e:	c8 1a       	sub	r12, r24
    2d70:	d8 0a       	sbc	r13, r24
    2d72:	e8 0a       	sbc	r14, r24
    2d74:	f8 0a       	sbc	r15, r24
    2d76:	c0 92 ff 06 	sts	0x06FF, r12	; 0x8006ff <xTickCount>
    2d7a:	d0 92 00 07 	sts	0x0700, r13	; 0x800700 <xTickCount+0x1>
    2d7e:	e0 92 01 07 	sts	0x0701, r14	; 0x800701 <xTickCount+0x2>
    2d82:	f0 92 02 07 	sts	0x0702, r15	; 0x800702 <xTickCount+0x3>
    2d86:	c1 14       	cp	r12, r1
    2d88:	d1 04       	cpc	r13, r1
    2d8a:	e1 04       	cpc	r14, r1
    2d8c:	f1 04       	cpc	r15, r1
    2d8e:	b1 f4       	brne	.+44     	; 0x2dbc <xTaskIncrementTick+0x7e>
    2d90:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <pxDelayedTaskList>
    2d94:	90 91 29 07 	lds	r25, 0x0729	; 0x800729 <pxDelayedTaskList+0x1>
    2d98:	20 91 26 07 	lds	r18, 0x0726	; 0x800726 <pxOverflowDelayedTaskList>
    2d9c:	30 91 27 07 	lds	r19, 0x0727	; 0x800727 <pxOverflowDelayedTaskList+0x1>
    2da0:	30 93 29 07 	sts	0x0729, r19	; 0x800729 <pxDelayedTaskList+0x1>
    2da4:	20 93 28 07 	sts	0x0728, r18	; 0x800728 <pxDelayedTaskList>
    2da8:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <pxOverflowDelayedTaskList+0x1>
    2dac:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <pxOverflowDelayedTaskList>
    2db0:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <xNumOfOverflows>
    2db4:	8f 5f       	subi	r24, 0xFF	; 255
    2db6:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <xNumOfOverflows>
    2dba:	77 dd       	rcall	.-1298   	; 0x28aa <prvResetNextTaskUnblockTime>
    2dbc:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <xNextTaskUnblockTime>
    2dc0:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <xNextTaskUnblockTime+0x1>
    2dc4:	a0 91 f7 06 	lds	r26, 0x06F7	; 0x8006f7 <xNextTaskUnblockTime+0x2>
    2dc8:	b0 91 f8 06 	lds	r27, 0x06F8	; 0x8006f8 <xNextTaskUnblockTime+0x3>
    2dcc:	c8 16       	cp	r12, r24
    2dce:	d9 06       	cpc	r13, r25
    2dd0:	ea 06       	cpc	r14, r26
    2dd2:	fb 06       	cpc	r15, r27
    2dd4:	10 f4       	brcc	.+4      	; 0x2dda <xTaskIncrementTick+0x9c>
    2dd6:	b1 2c       	mov	r11, r1
    2dd8:	5d c0       	rjmp	.+186    	; 0x2e94 <xTaskIncrementTick+0x156>
    2dda:	b1 2c       	mov	r11, r1
    2ddc:	0f 2e       	mov	r0, r31
    2dde:	fb e0       	ldi	r31, 0x0B	; 11
    2de0:	af 2e       	mov	r10, r31
    2de2:	f0 2d       	mov	r31, r0
    2de4:	99 24       	eor	r9, r9
    2de6:	93 94       	inc	r9
    2de8:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <pxDelayedTaskList>
    2dec:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <pxDelayedTaskList+0x1>
    2df0:	80 81       	ld	r24, Z
    2df2:	81 11       	cpse	r24, r1
    2df4:	0c c0       	rjmp	.+24     	; 0x2e0e <xTaskIncrementTick+0xd0>
    2df6:	8f ef       	ldi	r24, 0xFF	; 255
    2df8:	9f ef       	ldi	r25, 0xFF	; 255
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <xNextTaskUnblockTime>
    2e00:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <xNextTaskUnblockTime+0x1>
    2e04:	a0 93 f7 06 	sts	0x06F7, r26	; 0x8006f7 <xNextTaskUnblockTime+0x2>
    2e08:	b0 93 f8 06 	sts	0x06F8, r27	; 0x8006f8 <xNextTaskUnblockTime+0x3>
    2e0c:	43 c0       	rjmp	.+134    	; 0x2e94 <xTaskIncrementTick+0x156>
    2e0e:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <pxDelayedTaskList>
    2e12:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <pxDelayedTaskList+0x1>
    2e16:	07 80       	ldd	r0, Z+7	; 0x07
    2e18:	f0 85       	ldd	r31, Z+8	; 0x08
    2e1a:	e0 2d       	mov	r30, r0
    2e1c:	c0 85       	ldd	r28, Z+8	; 0x08
    2e1e:	d1 85       	ldd	r29, Z+9	; 0x09
    2e20:	8a 81       	ldd	r24, Y+2	; 0x02
    2e22:	9b 81       	ldd	r25, Y+3	; 0x03
    2e24:	ac 81       	ldd	r26, Y+4	; 0x04
    2e26:	bd 81       	ldd	r27, Y+5	; 0x05
    2e28:	c8 16       	cp	r12, r24
    2e2a:	d9 06       	cpc	r13, r25
    2e2c:	ea 06       	cpc	r14, r26
    2e2e:	fb 06       	cpc	r15, r27
    2e30:	48 f4       	brcc	.+18     	; 0x2e44 <xTaskIncrementTick+0x106>
    2e32:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <xNextTaskUnblockTime>
    2e36:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <xNextTaskUnblockTime+0x1>
    2e3a:	a0 93 f7 06 	sts	0x06F7, r26	; 0x8006f7 <xNextTaskUnblockTime+0x2>
    2e3e:	b0 93 f8 06 	sts	0x06F8, r27	; 0x8006f8 <xNextTaskUnblockTime+0x3>
    2e42:	28 c0       	rjmp	.+80     	; 0x2e94 <xTaskIncrementTick+0x156>
    2e44:	8e 01       	movw	r16, r28
    2e46:	0e 5f       	subi	r16, 0xFE	; 254
    2e48:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4a:	c8 01       	movw	r24, r16
    2e4c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2e50:	88 8d       	ldd	r24, Y+24	; 0x18
    2e52:	99 8d       	ldd	r25, Y+25	; 0x19
    2e54:	89 2b       	or	r24, r25
    2e56:	21 f0       	breq	.+8      	; 0x2e60 <xTaskIncrementTick+0x122>
    2e58:	ce 01       	movw	r24, r28
    2e5a:	0e 96       	adiw	r24, 0x0e	; 14
    2e5c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2e60:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e62:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <uxTopReadyPriority>
    2e66:	98 17       	cp	r25, r24
    2e68:	10 f4       	brcc	.+4      	; 0x2e6e <xTaskIncrementTick+0x130>
    2e6a:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxTopReadyPriority>
    2e6e:	a8 9e       	mul	r10, r24
    2e70:	c0 01       	movw	r24, r0
    2e72:	11 24       	eor	r1, r1
    2e74:	b8 01       	movw	r22, r16
    2e76:	80 5c       	subi	r24, 0xC0	; 192
    2e78:	98 4f       	sbci	r25, 0xF8	; 248
    2e7a:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2e7e:	e0 91 6c 07 	lds	r30, 0x076C	; 0x80076c <pxCurrentTCB>
    2e82:	f0 91 6d 07 	lds	r31, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    2e86:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e88:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e8a:	98 17       	cp	r25, r24
    2e8c:	08 f4       	brcc	.+2      	; 0x2e90 <xTaskIncrementTick+0x152>
    2e8e:	ac cf       	rjmp	.-168    	; 0x2de8 <xTaskIncrementTick+0xaa>
    2e90:	b9 2c       	mov	r11, r9
    2e92:	aa cf       	rjmp	.-172    	; 0x2de8 <xTaskIncrementTick+0xaa>
    2e94:	e0 91 6c 07 	lds	r30, 0x076C	; 0x80076c <pxCurrentTCB>
    2e98:	f0 91 6d 07 	lds	r31, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    2e9c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2e9e:	8b e0       	ldi	r24, 0x0B	; 11
    2ea0:	e8 9f       	mul	r30, r24
    2ea2:	f0 01       	movw	r30, r0
    2ea4:	11 24       	eor	r1, r1
    2ea6:	e0 5c       	subi	r30, 0xC0	; 192
    2ea8:	f8 4f       	sbci	r31, 0xF8	; 248
    2eaa:	80 81       	ld	r24, Z
    2eac:	82 30       	cpi	r24, 0x02	; 2
    2eae:	48 f0       	brcs	.+18     	; 0x2ec2 <xTaskIncrementTick+0x184>
    2eb0:	bb 24       	eor	r11, r11
    2eb2:	b3 94       	inc	r11
    2eb4:	06 c0       	rjmp	.+12     	; 0x2ec2 <xTaskIncrementTick+0x184>
    2eb6:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <uxPendedTicks>
    2eba:	8f 5f       	subi	r24, 0xFF	; 255
    2ebc:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <uxPendedTicks>
    2ec0:	b1 2c       	mov	r11, r1
    2ec2:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <xYieldPending>
    2ec6:	88 23       	and	r24, r24
    2ec8:	11 f0       	breq	.+4      	; 0x2ece <xTaskIncrementTick+0x190>
    2eca:	bb 24       	eor	r11, r11
    2ecc:	b3 94       	inc	r11
    2ece:	8b 2d       	mov	r24, r11
    2ed0:	df 91       	pop	r29
    2ed2:	cf 91       	pop	r28
    2ed4:	1f 91       	pop	r17
    2ed6:	0f 91       	pop	r16
    2ed8:	ff 90       	pop	r15
    2eda:	ef 90       	pop	r14
    2edc:	df 90       	pop	r13
    2ede:	cf 90       	pop	r12
    2ee0:	bf 90       	pop	r11
    2ee2:	af 90       	pop	r10
    2ee4:	9f 90       	pop	r9
    2ee6:	08 95       	ret

00002ee8 <xTaskResumeAll>:
    2ee8:	cf 92       	push	r12
    2eea:	df 92       	push	r13
    2eec:	ef 92       	push	r14
    2eee:	ff 92       	push	r15
    2ef0:	0f 93       	push	r16
    2ef2:	1f 93       	push	r17
    2ef4:	cf 93       	push	r28
    2ef6:	df 93       	push	r29
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	f8 94       	cli
    2efc:	0f 92       	push	r0
    2efe:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <uxSchedulerSuspended>
    2f02:	81 50       	subi	r24, 0x01	; 1
    2f04:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <uxSchedulerSuspended>
    2f08:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <uxSchedulerSuspended>
    2f0c:	81 11       	cpse	r24, r1
    2f0e:	5a c0       	rjmp	.+180    	; 0x2fc4 <xTaskResumeAll+0xdc>
    2f10:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxCurrentNumberOfTasks>
    2f14:	81 11       	cpse	r24, r1
    2f16:	2c c0       	rjmp	.+88     	; 0x2f70 <xTaskResumeAll+0x88>
    2f18:	58 c0       	rjmp	.+176    	; 0x2fca <xTaskResumeAll+0xe2>
    2f1a:	d7 01       	movw	r26, r14
    2f1c:	17 96       	adiw	r26, 0x07	; 7
    2f1e:	ed 91       	ld	r30, X+
    2f20:	fc 91       	ld	r31, X
    2f22:	18 97       	sbiw	r26, 0x08	; 8
    2f24:	c0 85       	ldd	r28, Z+8	; 0x08
    2f26:	d1 85       	ldd	r29, Z+9	; 0x09
    2f28:	ce 01       	movw	r24, r28
    2f2a:	0e 96       	adiw	r24, 0x0e	; 14
    2f2c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2f30:	8e 01       	movw	r16, r28
    2f32:	0e 5f       	subi	r16, 0xFE	; 254
    2f34:	1f 4f       	sbci	r17, 0xFF	; 255
    2f36:	c8 01       	movw	r24, r16
    2f38:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2f3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f3e:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <uxTopReadyPriority>
    2f42:	98 17       	cp	r25, r24
    2f44:	10 f4       	brcc	.+4      	; 0x2f4a <xTaskResumeAll+0x62>
    2f46:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxTopReadyPriority>
    2f4a:	d8 9e       	mul	r13, r24
    2f4c:	c0 01       	movw	r24, r0
    2f4e:	11 24       	eor	r1, r1
    2f50:	b8 01       	movw	r22, r16
    2f52:	80 5c       	subi	r24, 0xC0	; 192
    2f54:	98 4f       	sbci	r25, 0xF8	; 248
    2f56:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2f5a:	e0 91 6c 07 	lds	r30, 0x076C	; 0x80076c <pxCurrentTCB>
    2f5e:	f0 91 6d 07 	lds	r31, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    2f62:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f64:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f66:	98 17       	cp	r25, r24
    2f68:	88 f0       	brcs	.+34     	; 0x2f8c <xTaskResumeAll+0xa4>
    2f6a:	c0 92 fb 06 	sts	0x06FB, r12	; 0x8006fb <xYieldPending>
    2f6e:	0e c0       	rjmp	.+28     	; 0x2f8c <xTaskResumeAll+0xa4>
    2f70:	c0 e0       	ldi	r28, 0x00	; 0
    2f72:	d0 e0       	ldi	r29, 0x00	; 0
    2f74:	0f 2e       	mov	r0, r31
    2f76:	fb e1       	ldi	r31, 0x1B	; 27
    2f78:	ef 2e       	mov	r14, r31
    2f7a:	f7 e0       	ldi	r31, 0x07	; 7
    2f7c:	ff 2e       	mov	r15, r31
    2f7e:	f0 2d       	mov	r31, r0
    2f80:	0f 2e       	mov	r0, r31
    2f82:	fb e0       	ldi	r31, 0x0B	; 11
    2f84:	df 2e       	mov	r13, r31
    2f86:	f0 2d       	mov	r31, r0
    2f88:	cc 24       	eor	r12, r12
    2f8a:	c3 94       	inc	r12
    2f8c:	f7 01       	movw	r30, r14
    2f8e:	80 81       	ld	r24, Z
    2f90:	81 11       	cpse	r24, r1
    2f92:	c3 cf       	rjmp	.-122    	; 0x2f1a <xTaskResumeAll+0x32>
    2f94:	cd 2b       	or	r28, r29
    2f96:	09 f0       	breq	.+2      	; 0x2f9a <xTaskResumeAll+0xb2>
    2f98:	88 dc       	rcall	.-1776   	; 0x28aa <prvResetNextTaskUnblockTime>
    2f9a:	c0 91 fc 06 	lds	r28, 0x06FC	; 0x8006fc <uxPendedTicks>
    2f9e:	cc 23       	and	r28, r28
    2fa0:	49 f0       	breq	.+18     	; 0x2fb4 <xTaskResumeAll+0xcc>
    2fa2:	d1 e0       	ldi	r29, 0x01	; 1
    2fa4:	cc de       	rcall	.-616    	; 0x2d3e <xTaskIncrementTick>
    2fa6:	81 11       	cpse	r24, r1
    2fa8:	d0 93 fb 06 	sts	0x06FB, r29	; 0x8006fb <xYieldPending>
    2fac:	c1 50       	subi	r28, 0x01	; 1
    2fae:	d1 f7       	brne	.-12     	; 0x2fa4 <xTaskResumeAll+0xbc>
    2fb0:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <uxPendedTicks>
    2fb4:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <xYieldPending>
    2fb8:	88 23       	and	r24, r24
    2fba:	31 f0       	breq	.+12     	; 0x2fc8 <xTaskResumeAll+0xe0>
    2fbc:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	03 c0       	rjmp	.+6      	; 0x2fca <xTaskResumeAll+0xe2>
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	01 c0       	rjmp	.+2      	; 0x2fca <xTaskResumeAll+0xe2>
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	0f 90       	pop	r0
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	ff 90       	pop	r15
    2fd8:	ef 90       	pop	r14
    2fda:	df 90       	pop	r13
    2fdc:	cf 90       	pop	r12
    2fde:	08 95       	ret

00002fe0 <vTaskDelay>:
    2fe0:	cf 92       	push	r12
    2fe2:	df 92       	push	r13
    2fe4:	ef 92       	push	r14
    2fe6:	ff 92       	push	r15
    2fe8:	6b 01       	movw	r12, r22
    2fea:	7c 01       	movw	r14, r24
    2fec:	67 2b       	or	r22, r23
    2fee:	68 2b       	or	r22, r24
    2ff0:	69 2b       	or	r22, r25
    2ff2:	41 f0       	breq	.+16     	; 0x3004 <vTaskDelay+0x24>
    2ff4:	90 de       	rcall	.-736    	; 0x2d16 <vTaskSuspendAll>
    2ff6:	40 e0       	ldi	r20, 0x00	; 0
    2ff8:	c7 01       	movw	r24, r14
    2ffa:	b6 01       	movw	r22, r12
    2ffc:	80 dc       	rcall	.-1792   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    2ffe:	74 df       	rcall	.-280    	; 0x2ee8 <xTaskResumeAll>
    3000:	81 11       	cpse	r24, r1
    3002:	02 c0       	rjmp	.+4      	; 0x3008 <vTaskDelay+0x28>
    3004:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3008:	ff 90       	pop	r15
    300a:	ef 90       	pop	r14
    300c:	df 90       	pop	r13
    300e:	cf 90       	pop	r12
    3010:	08 95       	ret

00003012 <vTaskSwitchContext>:
    3012:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <uxSchedulerSuspended>
    3016:	88 23       	and	r24, r24
    3018:	21 f0       	breq	.+8      	; 0x3022 <vTaskSwitchContext+0x10>
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <xYieldPending>
    3020:	08 95       	ret
    3022:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <xYieldPending>
    3026:	a0 91 6c 07 	lds	r26, 0x076C	; 0x80076c <pxCurrentTCB>
    302a:	b0 91 6d 07 	lds	r27, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    302e:	e0 91 6c 07 	lds	r30, 0x076C	; 0x80076c <pxCurrentTCB>
    3032:	f0 91 6d 07 	lds	r31, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    3036:	2d 91       	ld	r18, X+
    3038:	3c 91       	ld	r19, X
    303a:	83 8d       	ldd	r24, Z+27	; 0x1b
    303c:	94 8d       	ldd	r25, Z+28	; 0x1c
    303e:	82 17       	cp	r24, r18
    3040:	93 07       	cpc	r25, r19
    3042:	60 f0       	brcs	.+24     	; 0x305c <vTaskSwitchContext+0x4a>
    3044:	60 91 6c 07 	lds	r22, 0x076C	; 0x80076c <pxCurrentTCB>
    3048:	70 91 6d 07 	lds	r23, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    304c:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <pxCurrentTCB>
    3050:	90 91 6d 07 	lds	r25, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    3054:	63 5e       	subi	r22, 0xE3	; 227
    3056:	7f 4f       	sbci	r23, 0xFF	; 255
    3058:	0e 94 fd 07 	call	0xffa	; 0xffa <vApplicationStackOverflowHook>
    305c:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxTopReadyPriority>
    3060:	28 2f       	mov	r18, r24
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	9b e0       	ldi	r25, 0x0B	; 11
    3066:	89 9f       	mul	r24, r25
    3068:	f0 01       	movw	r30, r0
    306a:	11 24       	eor	r1, r1
    306c:	e0 5c       	subi	r30, 0xC0	; 192
    306e:	f8 4f       	sbci	r31, 0xF8	; 248
    3070:	90 81       	ld	r25, Z
    3072:	91 11       	cpse	r25, r1
    3074:	0e c0       	rjmp	.+28     	; 0x3092 <vTaskSwitchContext+0x80>
    3076:	4b e0       	ldi	r20, 0x0B	; 11
    3078:	81 50       	subi	r24, 0x01	; 1
    307a:	28 2f       	mov	r18, r24
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	42 9f       	mul	r20, r18
    3080:	f0 01       	movw	r30, r0
    3082:	43 9f       	mul	r20, r19
    3084:	f0 0d       	add	r31, r0
    3086:	11 24       	eor	r1, r1
    3088:	e0 5c       	subi	r30, 0xC0	; 192
    308a:	f8 4f       	sbci	r31, 0xF8	; 248
    308c:	90 81       	ld	r25, Z
    308e:	99 23       	and	r25, r25
    3090:	99 f3       	breq	.-26     	; 0x3078 <vTaskSwitchContext+0x66>
    3092:	9b e0       	ldi	r25, 0x0B	; 11
    3094:	92 9f       	mul	r25, r18
    3096:	a0 01       	movw	r20, r0
    3098:	93 9f       	mul	r25, r19
    309a:	50 0d       	add	r21, r0
    309c:	11 24       	eor	r1, r1
    309e:	da 01       	movw	r26, r20
    30a0:	a0 5c       	subi	r26, 0xC0	; 192
    30a2:	b8 4f       	sbci	r27, 0xF8	; 248
    30a4:	11 96       	adiw	r26, 0x01	; 1
    30a6:	ed 91       	ld	r30, X+
    30a8:	fc 91       	ld	r31, X
    30aa:	12 97       	sbiw	r26, 0x02	; 2
    30ac:	04 80       	ldd	r0, Z+4	; 0x04
    30ae:	f5 81       	ldd	r31, Z+5	; 0x05
    30b0:	e0 2d       	mov	r30, r0
    30b2:	12 96       	adiw	r26, 0x02	; 2
    30b4:	fc 93       	st	X, r31
    30b6:	ee 93       	st	-X, r30
    30b8:	11 97       	sbiw	r26, 0x01	; 1
    30ba:	4d 5b       	subi	r20, 0xBD	; 189
    30bc:	58 4f       	sbci	r21, 0xF8	; 248
    30be:	e4 17       	cp	r30, r20
    30c0:	f5 07       	cpc	r31, r21
    30c2:	29 f4       	brne	.+10     	; 0x30ce <vTaskSwitchContext+0xbc>
    30c4:	44 81       	ldd	r20, Z+4	; 0x04
    30c6:	55 81       	ldd	r21, Z+5	; 0x05
    30c8:	fd 01       	movw	r30, r26
    30ca:	52 83       	std	Z+2, r21	; 0x02
    30cc:	41 83       	std	Z+1, r20	; 0x01
    30ce:	9b e0       	ldi	r25, 0x0B	; 11
    30d0:	92 9f       	mul	r25, r18
    30d2:	f0 01       	movw	r30, r0
    30d4:	93 9f       	mul	r25, r19
    30d6:	f0 0d       	add	r31, r0
    30d8:	11 24       	eor	r1, r1
    30da:	e0 5c       	subi	r30, 0xC0	; 192
    30dc:	f8 4f       	sbci	r31, 0xF8	; 248
    30de:	01 80       	ldd	r0, Z+1	; 0x01
    30e0:	f2 81       	ldd	r31, Z+2	; 0x02
    30e2:	e0 2d       	mov	r30, r0
    30e4:	20 85       	ldd	r18, Z+8	; 0x08
    30e6:	31 85       	ldd	r19, Z+9	; 0x09
    30e8:	30 93 6d 07 	sts	0x076D, r19	; 0x80076d <pxCurrentTCB+0x1>
    30ec:	20 93 6c 07 	sts	0x076C, r18	; 0x80076c <pxCurrentTCB>
    30f0:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxTopReadyPriority>
    30f4:	08 95       	ret

000030f6 <vTaskSuspend>:
    30f6:	0f 93       	push	r16
    30f8:	1f 93       	push	r17
    30fa:	cf 93       	push	r28
    30fc:	df 93       	push	r29
    30fe:	ec 01       	movw	r28, r24
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	0f 92       	push	r0
    3106:	89 2b       	or	r24, r25
    3108:	21 f4       	brne	.+8      	; 0x3112 <vTaskSuspend+0x1c>
    310a:	c0 91 6c 07 	lds	r28, 0x076C	; 0x80076c <pxCurrentTCB>
    310e:	d0 91 6d 07 	lds	r29, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    3112:	8e 01       	movw	r16, r28
    3114:	0e 5f       	subi	r16, 0xFE	; 254
    3116:	1f 4f       	sbci	r17, 0xFF	; 255
    3118:	c8 01       	movw	r24, r16
    311a:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    311e:	88 8d       	ldd	r24, Y+24	; 0x18
    3120:	99 8d       	ldd	r25, Y+25	; 0x19
    3122:	89 2b       	or	r24, r25
    3124:	21 f0       	breq	.+8      	; 0x312e <vTaskSuspend+0x38>
    3126:	ce 01       	movw	r24, r28
    3128:	0e 96       	adiw	r24, 0x0e	; 14
    312a:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    312e:	b8 01       	movw	r22, r16
    3130:	84 e0       	ldi	r24, 0x04	; 4
    3132:	97 e0       	ldi	r25, 0x07	; 7
    3134:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3138:	8a a9       	ldd	r24, Y+50	; 0x32
    313a:	81 30       	cpi	r24, 0x01	; 1
    313c:	09 f4       	brne	.+2      	; 0x3140 <vTaskSuspend+0x4a>
    313e:	1a aa       	std	Y+50, r1	; 0x32
    3140:	0f 90       	pop	r0
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <xSchedulerRunning>
    3148:	88 23       	and	r24, r24
    314a:	31 f0       	breq	.+12     	; 0x3158 <vTaskSuspend+0x62>
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	0f 92       	push	r0
    3152:	ab db       	rcall	.-2218   	; 0x28aa <prvResetNextTaskUnblockTime>
    3154:	0f 90       	pop	r0
    3156:	0f be       	out	0x3f, r0	; 63
    3158:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <pxCurrentTCB>
    315c:	90 91 6d 07 	lds	r25, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    3160:	c8 17       	cp	r28, r24
    3162:	d9 07       	cpc	r29, r25
    3164:	99 f4       	brne	.+38     	; 0x318c <vTaskSuspend+0x96>
    3166:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <xSchedulerRunning>
    316a:	88 23       	and	r24, r24
    316c:	19 f0       	breq	.+6      	; 0x3174 <vTaskSuspend+0x7e>
    316e:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3172:	0c c0       	rjmp	.+24     	; 0x318c <vTaskSuspend+0x96>
    3174:	90 91 04 07 	lds	r25, 0x0704	; 0x800704 <xSuspendedTaskList>
    3178:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxCurrentNumberOfTasks>
    317c:	98 13       	cpse	r25, r24
    317e:	05 c0       	rjmp	.+10     	; 0x318a <vTaskSuspend+0x94>
    3180:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <pxCurrentTCB+0x1>
    3184:	10 92 6c 07 	sts	0x076C, r1	; 0x80076c <pxCurrentTCB>
    3188:	01 c0       	rjmp	.+2      	; 0x318c <vTaskSuspend+0x96>
    318a:	43 df       	rcall	.-378    	; 0x3012 <vTaskSwitchContext>
    318c:	df 91       	pop	r29
    318e:	cf 91       	pop	r28
    3190:	1f 91       	pop	r17
    3192:	0f 91       	pop	r16
    3194:	08 95       	ret

00003196 <vTaskPlaceOnEventList>:
    3196:	cf 92       	push	r12
    3198:	df 92       	push	r13
    319a:	ef 92       	push	r14
    319c:	ff 92       	push	r15
    319e:	6a 01       	movw	r12, r20
    31a0:	7b 01       	movw	r14, r22
    31a2:	60 91 6c 07 	lds	r22, 0x076C	; 0x80076c <pxCurrentTCB>
    31a6:	70 91 6d 07 	lds	r23, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    31aa:	62 5f       	subi	r22, 0xF2	; 242
    31ac:	7f 4f       	sbci	r23, 0xFF	; 255
    31ae:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    31b2:	41 e0       	ldi	r20, 0x01	; 1
    31b4:	c7 01       	movw	r24, r14
    31b6:	b6 01       	movw	r22, r12
    31b8:	a2 db       	rcall	.-2236   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    31ba:	ff 90       	pop	r15
    31bc:	ef 90       	pop	r14
    31be:	df 90       	pop	r13
    31c0:	cf 90       	pop	r12
    31c2:	08 95       	ret

000031c4 <vTaskPlaceOnEventListRestricted>:
    31c4:	cf 92       	push	r12
    31c6:	df 92       	push	r13
    31c8:	ef 92       	push	r14
    31ca:	ff 92       	push	r15
    31cc:	cf 93       	push	r28
    31ce:	6a 01       	movw	r12, r20
    31d0:	7b 01       	movw	r14, r22
    31d2:	c2 2f       	mov	r28, r18
    31d4:	60 91 6c 07 	lds	r22, 0x076C	; 0x80076c <pxCurrentTCB>
    31d8:	70 91 6d 07 	lds	r23, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    31dc:	62 5f       	subi	r22, 0xF2	; 242
    31de:	7f 4f       	sbci	r23, 0xFF	; 255
    31e0:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    31e4:	cc 23       	and	r28, r28
    31e6:	21 f0       	breq	.+8      	; 0x31f0 <vTaskPlaceOnEventListRestricted+0x2c>
    31e8:	cc 24       	eor	r12, r12
    31ea:	ca 94       	dec	r12
    31ec:	dc 2c       	mov	r13, r12
    31ee:	76 01       	movw	r14, r12
    31f0:	4c 2f       	mov	r20, r28
    31f2:	c7 01       	movw	r24, r14
    31f4:	b6 01       	movw	r22, r12
    31f6:	83 db       	rcall	.-2298   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    31f8:	cf 91       	pop	r28
    31fa:	ff 90       	pop	r15
    31fc:	ef 90       	pop	r14
    31fe:	df 90       	pop	r13
    3200:	cf 90       	pop	r12
    3202:	08 95       	ret

00003204 <xTaskRemoveFromEventList>:
    3204:	0f 93       	push	r16
    3206:	1f 93       	push	r17
    3208:	cf 93       	push	r28
    320a:	df 93       	push	r29
    320c:	dc 01       	movw	r26, r24
    320e:	17 96       	adiw	r26, 0x07	; 7
    3210:	ed 91       	ld	r30, X+
    3212:	fc 91       	ld	r31, X
    3214:	18 97       	sbiw	r26, 0x08	; 8
    3216:	c0 85       	ldd	r28, Z+8	; 0x08
    3218:	d1 85       	ldd	r29, Z+9	; 0x09
    321a:	8e 01       	movw	r16, r28
    321c:	02 5f       	subi	r16, 0xF2	; 242
    321e:	1f 4f       	sbci	r17, 0xFF	; 255
    3220:	c8 01       	movw	r24, r16
    3222:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3226:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <uxSchedulerSuspended>
    322a:	81 11       	cpse	r24, r1
    322c:	16 c0       	rjmp	.+44     	; 0x325a <xTaskRemoveFromEventList+0x56>
    322e:	0c 50       	subi	r16, 0x0C	; 12
    3230:	11 09       	sbc	r17, r1
    3232:	c8 01       	movw	r24, r16
    3234:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3238:	8a 8d       	ldd	r24, Y+26	; 0x1a
    323a:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <uxTopReadyPriority>
    323e:	98 17       	cp	r25, r24
    3240:	10 f4       	brcc	.+4      	; 0x3246 <xTaskRemoveFromEventList+0x42>
    3242:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxTopReadyPriority>
    3246:	bb e0       	ldi	r27, 0x0B	; 11
    3248:	8b 9f       	mul	r24, r27
    324a:	c0 01       	movw	r24, r0
    324c:	11 24       	eor	r1, r1
    324e:	b8 01       	movw	r22, r16
    3250:	80 5c       	subi	r24, 0xC0	; 192
    3252:	98 4f       	sbci	r25, 0xF8	; 248
    3254:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3258:	05 c0       	rjmp	.+10     	; 0x3264 <xTaskRemoveFromEventList+0x60>
    325a:	b8 01       	movw	r22, r16
    325c:	8b e1       	ldi	r24, 0x1B	; 27
    325e:	97 e0       	ldi	r25, 0x07	; 7
    3260:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3264:	e0 91 6c 07 	lds	r30, 0x076C	; 0x80076c <pxCurrentTCB>
    3268:	f0 91 6d 07 	lds	r31, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    326c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    326e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3270:	89 17       	cp	r24, r25
    3272:	20 f4       	brcc	.+8      	; 0x327c <xTaskRemoveFromEventList+0x78>
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <xYieldPending>
    327a:	01 c0       	rjmp	.+2      	; 0x327e <xTaskRemoveFromEventList+0x7a>
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	df 91       	pop	r29
    3280:	cf 91       	pop	r28
    3282:	1f 91       	pop	r17
    3284:	0f 91       	pop	r16
    3286:	08 95       	ret

00003288 <vTaskInternalSetTimeOutState>:
    3288:	20 91 fa 06 	lds	r18, 0x06FA	; 0x8006fa <xNumOfOverflows>
    328c:	fc 01       	movw	r30, r24
    328e:	20 83       	st	Z, r18
    3290:	40 91 ff 06 	lds	r20, 0x06FF	; 0x8006ff <xTickCount>
    3294:	50 91 00 07 	lds	r21, 0x0700	; 0x800700 <xTickCount+0x1>
    3298:	60 91 01 07 	lds	r22, 0x0701	; 0x800701 <xTickCount+0x2>
    329c:	70 91 02 07 	lds	r23, 0x0702	; 0x800702 <xTickCount+0x3>
    32a0:	41 83       	std	Z+1, r20	; 0x01
    32a2:	52 83       	std	Z+2, r21	; 0x02
    32a4:	63 83       	std	Z+3, r22	; 0x03
    32a6:	74 83       	std	Z+4, r23	; 0x04
    32a8:	08 95       	ret

000032aa <xTaskCheckForTimeOut>:
    32aa:	cf 92       	push	r12
    32ac:	df 92       	push	r13
    32ae:	ef 92       	push	r14
    32b0:	ff 92       	push	r15
    32b2:	0f 93       	push	r16
    32b4:	1f 93       	push	r17
    32b6:	cf 93       	push	r28
    32b8:	df 93       	push	r29
    32ba:	fb 01       	movw	r30, r22
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	f8 94       	cli
    32c0:	0f 92       	push	r0
    32c2:	40 91 ff 06 	lds	r20, 0x06FF	; 0x8006ff <xTickCount>
    32c6:	50 91 00 07 	lds	r21, 0x0700	; 0x800700 <xTickCount+0x1>
    32ca:	60 91 01 07 	lds	r22, 0x0701	; 0x800701 <xTickCount+0x2>
    32ce:	70 91 02 07 	lds	r23, 0x0702	; 0x800702 <xTickCount+0x3>
    32d2:	00 81       	ld	r16, Z
    32d4:	11 81       	ldd	r17, Z+1	; 0x01
    32d6:	22 81       	ldd	r18, Z+2	; 0x02
    32d8:	33 81       	ldd	r19, Z+3	; 0x03
    32da:	0f 3f       	cpi	r16, 0xFF	; 255
    32dc:	af ef       	ldi	r26, 0xFF	; 255
    32de:	1a 07       	cpc	r17, r26
    32e0:	2a 07       	cpc	r18, r26
    32e2:	3a 07       	cpc	r19, r26
    32e4:	49 f1       	breq	.+82     	; 0x3338 <xTaskCheckForTimeOut+0x8e>
    32e6:	ec 01       	movw	r28, r24
    32e8:	c9 80       	ldd	r12, Y+1	; 0x01
    32ea:	da 80       	ldd	r13, Y+2	; 0x02
    32ec:	eb 80       	ldd	r14, Y+3	; 0x03
    32ee:	fc 80       	ldd	r15, Y+4	; 0x04
    32f0:	a0 91 fa 06 	lds	r26, 0x06FA	; 0x8006fa <xNumOfOverflows>
    32f4:	b8 81       	ld	r27, Y
    32f6:	ba 17       	cp	r27, r26
    32f8:	29 f0       	breq	.+10     	; 0x3304 <xTaskCheckForTimeOut+0x5a>
    32fa:	4c 15       	cp	r20, r12
    32fc:	5d 05       	cpc	r21, r13
    32fe:	6e 05       	cpc	r22, r14
    3300:	7f 05       	cpc	r23, r15
    3302:	e0 f4       	brcc	.+56     	; 0x333c <xTaskCheckForTimeOut+0x92>
    3304:	4c 19       	sub	r20, r12
    3306:	5d 09       	sbc	r21, r13
    3308:	6e 09       	sbc	r22, r14
    330a:	7f 09       	sbc	r23, r15
    330c:	40 17       	cp	r20, r16
    330e:	51 07       	cpc	r21, r17
    3310:	62 07       	cpc	r22, r18
    3312:	73 07       	cpc	r23, r19
    3314:	58 f4       	brcc	.+22     	; 0x332c <xTaskCheckForTimeOut+0x82>
    3316:	04 1b       	sub	r16, r20
    3318:	15 0b       	sbc	r17, r21
    331a:	26 0b       	sbc	r18, r22
    331c:	37 0b       	sbc	r19, r23
    331e:	00 83       	st	Z, r16
    3320:	11 83       	std	Z+1, r17	; 0x01
    3322:	22 83       	std	Z+2, r18	; 0x02
    3324:	33 83       	std	Z+3, r19	; 0x03
    3326:	b0 df       	rcall	.-160    	; 0x3288 <vTaskInternalSetTimeOutState>
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	09 c0       	rjmp	.+18     	; 0x333e <xTaskCheckForTimeOut+0x94>
    332c:	10 82       	st	Z, r1
    332e:	11 82       	std	Z+1, r1	; 0x01
    3330:	12 82       	std	Z+2, r1	; 0x02
    3332:	13 82       	std	Z+3, r1	; 0x03
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	03 c0       	rjmp	.+6      	; 0x333e <xTaskCheckForTimeOut+0x94>
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	01 c0       	rjmp	.+2      	; 0x333e <xTaskCheckForTimeOut+0x94>
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	0f 90       	pop	r0
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	1f 91       	pop	r17
    3348:	0f 91       	pop	r16
    334a:	ff 90       	pop	r15
    334c:	ef 90       	pop	r14
    334e:	df 90       	pop	r13
    3350:	cf 90       	pop	r12
    3352:	08 95       	ret

00003354 <vTaskMissedYield>:
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <xYieldPending>
    335a:	08 95       	ret

0000335c <xTaskGetSchedulerState>:
    335c:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <xSchedulerRunning>
    3360:	88 23       	and	r24, r24
    3362:	31 f0       	breq	.+12     	; 0x3370 <xTaskGetSchedulerState+0x14>
    3364:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <uxSchedulerSuspended>
    3368:	88 23       	and	r24, r24
    336a:	21 f0       	breq	.+8      	; 0x3374 <xTaskGetSchedulerState+0x18>
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	08 95       	ret
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	08 95       	ret
    3374:	82 e0       	ldi	r24, 0x02	; 2
    3376:	08 95       	ret

00003378 <xTaskPriorityInherit>:
    3378:	0f 93       	push	r16
    337a:	1f 93       	push	r17
    337c:	cf 93       	push	r28
    337e:	df 93       	push	r29
    3380:	fc 01       	movw	r30, r24
    3382:	89 2b       	or	r24, r25
    3384:	09 f4       	brne	.+2      	; 0x3388 <xTaskPriorityInherit+0x10>
    3386:	60 c0       	rjmp	.+192    	; 0x3448 <xTaskPriorityInherit+0xd0>
    3388:	82 8d       	ldd	r24, Z+26	; 0x1a
    338a:	a0 91 6c 07 	lds	r26, 0x076C	; 0x80076c <pxCurrentTCB>
    338e:	b0 91 6d 07 	lds	r27, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    3392:	5a 96       	adiw	r26, 0x1a	; 26
    3394:	9c 91       	ld	r25, X
    3396:	89 17       	cp	r24, r25
    3398:	08 f0       	brcs	.+2      	; 0x339c <xTaskPriorityInherit+0x24>
    339a:	4a c0       	rjmp	.+148    	; 0x3430 <xTaskPriorityInherit+0xb8>
    339c:	46 85       	ldd	r20, Z+14	; 0x0e
    339e:	57 85       	ldd	r21, Z+15	; 0x0f
    33a0:	60 89       	ldd	r22, Z+16	; 0x10
    33a2:	71 89       	ldd	r23, Z+17	; 0x11
    33a4:	77 23       	and	r23, r23
    33a6:	94 f0       	brlt	.+36     	; 0x33cc <xTaskPriorityInherit+0x54>
    33a8:	a0 91 6c 07 	lds	r26, 0x076C	; 0x80076c <pxCurrentTCB>
    33ac:	b0 91 6d 07 	lds	r27, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    33b0:	5a 96       	adiw	r26, 0x1a	; 26
    33b2:	9c 91       	ld	r25, X
    33b4:	44 e0       	ldi	r20, 0x04	; 4
    33b6:	50 e0       	ldi	r21, 0x00	; 0
    33b8:	60 e0       	ldi	r22, 0x00	; 0
    33ba:	70 e0       	ldi	r23, 0x00	; 0
    33bc:	49 1b       	sub	r20, r25
    33be:	51 09       	sbc	r21, r1
    33c0:	61 09       	sbc	r22, r1
    33c2:	71 09       	sbc	r23, r1
    33c4:	46 87       	std	Z+14, r20	; 0x0e
    33c6:	57 87       	std	Z+15, r21	; 0x0f
    33c8:	60 8b       	std	Z+16, r22	; 0x10
    33ca:	71 8b       	std	Z+17, r23	; 0x11
    33cc:	2b e0       	ldi	r18, 0x0B	; 11
    33ce:	82 9f       	mul	r24, r18
    33d0:	c0 01       	movw	r24, r0
    33d2:	11 24       	eor	r1, r1
    33d4:	80 5c       	subi	r24, 0xC0	; 192
    33d6:	98 4f       	sbci	r25, 0xF8	; 248
    33d8:	24 85       	ldd	r18, Z+12	; 0x0c
    33da:	35 85       	ldd	r19, Z+13	; 0x0d
    33dc:	28 17       	cp	r18, r24
    33de:	39 07       	cpc	r19, r25
    33e0:	f1 f4       	brne	.+60     	; 0x341e <xTaskPriorityInherit+0xa6>
    33e2:	8f 01       	movw	r16, r30
    33e4:	ef 01       	movw	r28, r30
    33e6:	22 96       	adiw	r28, 0x02	; 2
    33e8:	ce 01       	movw	r24, r28
    33ea:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    33ee:	e0 91 6c 07 	lds	r30, 0x076C	; 0x80076c <pxCurrentTCB>
    33f2:	f0 91 6d 07 	lds	r31, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    33f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    33f8:	f8 01       	movw	r30, r16
    33fa:	82 8f       	std	Z+26, r24	; 0x1a
    33fc:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <uxTopReadyPriority>
    3400:	98 17       	cp	r25, r24
    3402:	10 f4       	brcc	.+4      	; 0x3408 <xTaskPriorityInherit+0x90>
    3404:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxTopReadyPriority>
    3408:	fb e0       	ldi	r31, 0x0B	; 11
    340a:	8f 9f       	mul	r24, r31
    340c:	c0 01       	movw	r24, r0
    340e:	11 24       	eor	r1, r1
    3410:	be 01       	movw	r22, r28
    3412:	80 5c       	subi	r24, 0xC0	; 192
    3414:	98 4f       	sbci	r25, 0xF8	; 248
    3416:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	16 c0       	rjmp	.+44     	; 0x344a <xTaskPriorityInherit+0xd2>
    341e:	a0 91 6c 07 	lds	r26, 0x076C	; 0x80076c <pxCurrentTCB>
    3422:	b0 91 6d 07 	lds	r27, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    3426:	5a 96       	adiw	r26, 0x1a	; 26
    3428:	8c 91       	ld	r24, X
    342a:	82 8f       	std	Z+26, r24	; 0x1a
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	0d c0       	rjmp	.+26     	; 0x344a <xTaskPriorityInherit+0xd2>
    3430:	a0 91 6c 07 	lds	r26, 0x076C	; 0x80076c <pxCurrentTCB>
    3434:	b0 91 6d 07 	lds	r27, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	24 a5       	ldd	r18, Z+44	; 0x2c
    343c:	5a 96       	adiw	r26, 0x1a	; 26
    343e:	9c 91       	ld	r25, X
    3440:	29 17       	cp	r18, r25
    3442:	18 f0       	brcs	.+6      	; 0x344a <xTaskPriorityInherit+0xd2>
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	01 c0       	rjmp	.+2      	; 0x344a <xTaskPriorityInherit+0xd2>
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	df 91       	pop	r29
    344c:	cf 91       	pop	r28
    344e:	1f 91       	pop	r17
    3450:	0f 91       	pop	r16
    3452:	08 95       	ret

00003454 <xTaskPriorityDisinherit>:
    3454:	0f 93       	push	r16
    3456:	1f 93       	push	r17
    3458:	cf 93       	push	r28
    345a:	df 93       	push	r29
    345c:	fc 01       	movw	r30, r24
    345e:	89 2b       	or	r24, r25
    3460:	79 f1       	breq	.+94     	; 0x34c0 <xTaskPriorityDisinherit+0x6c>
    3462:	85 a5       	ldd	r24, Z+45	; 0x2d
    3464:	81 50       	subi	r24, 0x01	; 1
    3466:	85 a7       	std	Z+45, r24	; 0x2d
    3468:	22 8d       	ldd	r18, Z+26	; 0x1a
    346a:	94 a5       	ldd	r25, Z+44	; 0x2c
    346c:	29 17       	cp	r18, r25
    346e:	51 f1       	breq	.+84     	; 0x34c4 <xTaskPriorityDisinherit+0x70>
    3470:	81 11       	cpse	r24, r1
    3472:	2a c0       	rjmp	.+84     	; 0x34c8 <xTaskPriorityDisinherit+0x74>
    3474:	ef 01       	movw	r28, r30
    3476:	8f 01       	movw	r16, r30
    3478:	0e 5f       	subi	r16, 0xFE	; 254
    347a:	1f 4f       	sbci	r17, 0xFF	; 255
    347c:	c8 01       	movw	r24, r16
    347e:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3482:	8c a5       	ldd	r24, Y+44	; 0x2c
    3484:	8a 8f       	std	Y+26, r24	; 0x1a
    3486:	44 e0       	ldi	r20, 0x04	; 4
    3488:	50 e0       	ldi	r21, 0x00	; 0
    348a:	60 e0       	ldi	r22, 0x00	; 0
    348c:	70 e0       	ldi	r23, 0x00	; 0
    348e:	48 1b       	sub	r20, r24
    3490:	51 09       	sbc	r21, r1
    3492:	61 09       	sbc	r22, r1
    3494:	71 09       	sbc	r23, r1
    3496:	4e 87       	std	Y+14, r20	; 0x0e
    3498:	5f 87       	std	Y+15, r21	; 0x0f
    349a:	68 8b       	std	Y+16, r22	; 0x10
    349c:	79 8b       	std	Y+17, r23	; 0x11
    349e:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <uxTopReadyPriority>
    34a2:	98 17       	cp	r25, r24
    34a4:	10 f4       	brcc	.+4      	; 0x34aa <xTaskPriorityDisinherit+0x56>
    34a6:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxTopReadyPriority>
    34aa:	2b e0       	ldi	r18, 0x0B	; 11
    34ac:	82 9f       	mul	r24, r18
    34ae:	c0 01       	movw	r24, r0
    34b0:	11 24       	eor	r1, r1
    34b2:	b8 01       	movw	r22, r16
    34b4:	80 5c       	subi	r24, 0xC0	; 192
    34b6:	98 4f       	sbci	r25, 0xF8	; 248
    34b8:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	05 c0       	rjmp	.+10     	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	03 c0       	rjmp	.+6      	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	01 c0       	rjmp	.+2      	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	df 91       	pop	r29
    34cc:	cf 91       	pop	r28
    34ce:	1f 91       	pop	r17
    34d0:	0f 91       	pop	r16
    34d2:	08 95       	ret

000034d4 <vTaskPriorityDisinheritAfterTimeout>:
    34d4:	0f 93       	push	r16
    34d6:	1f 93       	push	r17
    34d8:	cf 93       	push	r28
    34da:	df 93       	push	r29
    34dc:	fc 01       	movw	r30, r24
    34de:	89 2b       	or	r24, r25
    34e0:	09 f4       	brne	.+2      	; 0x34e4 <vTaskPriorityDisinheritAfterTimeout+0x10>
    34e2:	3f c0       	rjmp	.+126    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34e4:	84 a5       	ldd	r24, Z+44	; 0x2c
    34e6:	86 17       	cp	r24, r22
    34e8:	08 f4       	brcc	.+2      	; 0x34ec <vTaskPriorityDisinheritAfterTimeout+0x18>
    34ea:	86 2f       	mov	r24, r22
    34ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    34ee:	98 17       	cp	r25, r24
    34f0:	c1 f1       	breq	.+112    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34f2:	25 a5       	ldd	r18, Z+45	; 0x2d
    34f4:	21 30       	cpi	r18, 0x01	; 1
    34f6:	a9 f5       	brne	.+106    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34f8:	82 8f       	std	Z+26, r24	; 0x1a
    34fa:	46 85       	ldd	r20, Z+14	; 0x0e
    34fc:	57 85       	ldd	r21, Z+15	; 0x0f
    34fe:	60 89       	ldd	r22, Z+16	; 0x10
    3500:	71 89       	ldd	r23, Z+17	; 0x11
    3502:	77 23       	and	r23, r23
    3504:	64 f0       	brlt	.+24     	; 0x351e <vTaskPriorityDisinheritAfterTimeout+0x4a>
    3506:	44 e0       	ldi	r20, 0x04	; 4
    3508:	50 e0       	ldi	r21, 0x00	; 0
    350a:	60 e0       	ldi	r22, 0x00	; 0
    350c:	70 e0       	ldi	r23, 0x00	; 0
    350e:	48 1b       	sub	r20, r24
    3510:	51 09       	sbc	r21, r1
    3512:	61 09       	sbc	r22, r1
    3514:	71 09       	sbc	r23, r1
    3516:	46 87       	std	Z+14, r20	; 0x0e
    3518:	57 87       	std	Z+15, r21	; 0x0f
    351a:	60 8b       	std	Z+16, r22	; 0x10
    351c:	71 8b       	std	Z+17, r23	; 0x11
    351e:	2b e0       	ldi	r18, 0x0B	; 11
    3520:	92 9f       	mul	r25, r18
    3522:	c0 01       	movw	r24, r0
    3524:	11 24       	eor	r1, r1
    3526:	80 5c       	subi	r24, 0xC0	; 192
    3528:	98 4f       	sbci	r25, 0xF8	; 248
    352a:	24 85       	ldd	r18, Z+12	; 0x0c
    352c:	35 85       	ldd	r19, Z+13	; 0x0d
    352e:	28 17       	cp	r18, r24
    3530:	39 07       	cpc	r19, r25
    3532:	b9 f4       	brne	.+46     	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3534:	ef 01       	movw	r28, r30
    3536:	8f 01       	movw	r16, r30
    3538:	0e 5f       	subi	r16, 0xFE	; 254
    353a:	1f 4f       	sbci	r17, 0xFF	; 255
    353c:	c8 01       	movw	r24, r16
    353e:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3542:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3544:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <uxTopReadyPriority>
    3548:	98 17       	cp	r25, r24
    354a:	10 f4       	brcc	.+4      	; 0x3550 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    354c:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxTopReadyPriority>
    3550:	2b e0       	ldi	r18, 0x0B	; 11
    3552:	82 9f       	mul	r24, r18
    3554:	c0 01       	movw	r24, r0
    3556:	11 24       	eor	r1, r1
    3558:	b8 01       	movw	r22, r16
    355a:	80 5c       	subi	r24, 0xC0	; 192
    355c:	98 4f       	sbci	r25, 0xF8	; 248
    355e:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3562:	df 91       	pop	r29
    3564:	cf 91       	pop	r28
    3566:	1f 91       	pop	r17
    3568:	0f 91       	pop	r16
    356a:	08 95       	ret

0000356c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    356c:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <pxCurrentTCB>
    3570:	90 91 6d 07 	lds	r25, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    3574:	89 2b       	or	r24, r25
    3576:	39 f0       	breq	.+14     	; 0x3586 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    3578:	e0 91 6c 07 	lds	r30, 0x076C	; 0x80076c <pxCurrentTCB>
    357c:	f0 91 6d 07 	lds	r31, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
    3580:	85 a5       	ldd	r24, Z+45	; 0x2d
    3582:	8f 5f       	subi	r24, 0xFF	; 255
    3584:	85 a7       	std	Z+45, r24	; 0x2d
		}

		return pxCurrentTCB;
    3586:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <pxCurrentTCB>
    358a:	90 91 6d 07 	lds	r25, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
	}
    358e:	08 95       	ret

00003590 <prvInsertTimerInActiveList>:
{
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );
	return pxTimer->pcTimerName;
}
    3590:	cf 92       	push	r12
    3592:	df 92       	push	r13
    3594:	ef 92       	push	r14
    3596:	ff 92       	push	r15
    3598:	0f 93       	push	r16
    359a:	1f 93       	push	r17
    359c:	fc 01       	movw	r30, r24
    359e:	42 83       	std	Z+2, r20	; 0x02
    35a0:	53 83       	std	Z+3, r21	; 0x03
    35a2:	64 83       	std	Z+4, r22	; 0x04
    35a4:	75 83       	std	Z+5, r23	; 0x05
    35a6:	93 87       	std	Z+11, r25	; 0x0b
    35a8:	82 87       	std	Z+10, r24	; 0x0a
    35aa:	04 17       	cp	r16, r20
    35ac:	15 07       	cpc	r17, r21
    35ae:	26 07       	cpc	r18, r22
    35b0:	37 07       	cpc	r19, r23
    35b2:	c0 f0       	brcs	.+48     	; 0x35e4 <prvInsertTimerInActiveList+0x54>
    35b4:	0c 19       	sub	r16, r12
    35b6:	1d 09       	sbc	r17, r13
    35b8:	2e 09       	sbc	r18, r14
    35ba:	3f 09       	sbc	r19, r15
    35bc:	86 85       	ldd	r24, Z+14	; 0x0e
    35be:	97 85       	ldd	r25, Z+15	; 0x0f
    35c0:	a0 89       	ldd	r26, Z+16	; 0x10
    35c2:	b1 89       	ldd	r27, Z+17	; 0x11
    35c4:	08 17       	cp	r16, r24
    35c6:	19 07       	cpc	r17, r25
    35c8:	2a 07       	cpc	r18, r26
    35ca:	3b 07       	cpc	r19, r27
    35cc:	00 f5       	brcc	.+64     	; 0x360e <prvInsertTimerInActiveList+0x7e>
    35ce:	bf 01       	movw	r22, r30
    35d0:	6e 5f       	subi	r22, 0xFE	; 254
    35d2:	7f 4f       	sbci	r23, 0xFF	; 255
    35d4:	80 91 76 07 	lds	r24, 0x0776	; 0x800776 <pxOverflowTimerList>
    35d8:	90 91 77 07 	lds	r25, 0x0777	; 0x800777 <pxOverflowTimerList+0x1>
    35dc:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	18 c0       	rjmp	.+48     	; 0x3614 <prvInsertTimerInActiveList+0x84>
    35e4:	0c 15       	cp	r16, r12
    35e6:	1d 05       	cpc	r17, r13
    35e8:	2e 05       	cpc	r18, r14
    35ea:	3f 05       	cpc	r19, r15
    35ec:	28 f4       	brcc	.+10     	; 0x35f8 <prvInsertTimerInActiveList+0x68>
    35ee:	4c 15       	cp	r20, r12
    35f0:	5d 05       	cpc	r21, r13
    35f2:	6e 05       	cpc	r22, r14
    35f4:	7f 05       	cpc	r23, r15
    35f6:	68 f4       	brcc	.+26     	; 0x3612 <prvInsertTimerInActiveList+0x82>
    35f8:	bf 01       	movw	r22, r30
    35fa:	6e 5f       	subi	r22, 0xFE	; 254
    35fc:	7f 4f       	sbci	r23, 0xFF	; 255
    35fe:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <pxCurrentTimerList>
    3602:	90 91 79 07 	lds	r25, 0x0779	; 0x800779 <pxCurrentTimerList+0x1>
    3606:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	03 c0       	rjmp	.+6      	; 0x3614 <prvInsertTimerInActiveList+0x84>
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	01 c0       	rjmp	.+2      	; 0x3614 <prvInsertTimerInActiveList+0x84>
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	1f 91       	pop	r17
    3616:	0f 91       	pop	r16
    3618:	ff 90       	pop	r15
    361a:	ef 90       	pop	r14
    361c:	df 90       	pop	r13
    361e:	cf 90       	pop	r12
    3620:	08 95       	ret

00003622 <prvCheckForValidListAndQueue>:
    3622:	0f b6       	in	r0, 0x3f	; 63
    3624:	f8 94       	cli
    3626:	0f 92       	push	r0
    3628:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <xTimerQueue>
    362c:	90 91 75 07 	lds	r25, 0x0775	; 0x800775 <xTimerQueue+0x1>
    3630:	89 2b       	or	r24, r25
    3632:	e9 f4       	brne	.+58     	; 0x366e <prvCheckForValidListAndQueue+0x4c>
    3634:	85 e8       	ldi	r24, 0x85	; 133
    3636:	97 e0       	ldi	r25, 0x07	; 7
    3638:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    363c:	8a e7       	ldi	r24, 0x7A	; 122
    363e:	97 e0       	ldi	r25, 0x07	; 7
    3640:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    3644:	85 e8       	ldi	r24, 0x85	; 133
    3646:	97 e0       	ldi	r25, 0x07	; 7
    3648:	90 93 79 07 	sts	0x0779, r25	; 0x800779 <pxCurrentTimerList+0x1>
    364c:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <pxCurrentTimerList>
    3650:	8a e7       	ldi	r24, 0x7A	; 122
    3652:	97 e0       	ldi	r25, 0x07	; 7
    3654:	90 93 77 07 	sts	0x0777, r25	; 0x800777 <pxOverflowTimerList+0x1>
    3658:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <pxOverflowTimerList>
    365c:	40 e0       	ldi	r20, 0x00	; 0
    365e:	67 e0       	ldi	r22, 0x07	; 7
    3660:	8a e0       	ldi	r24, 0x0A	; 10
    3662:	0e 94 a7 09 	call	0x134e	; 0x134e <xQueueGenericCreate>
    3666:	90 93 75 07 	sts	0x0775, r25	; 0x800775 <xTimerQueue+0x1>
    366a:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <xTimerQueue>
    366e:	0f 90       	pop	r0
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	08 95       	ret

00003674 <xTimerCreateTimerTask>:
    3674:	ef 92       	push	r14
    3676:	ff 92       	push	r15
    3678:	0f 93       	push	r16
    367a:	d3 df       	rcall	.-90     	; 0x3622 <prvCheckForValidListAndQueue>
    367c:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <xTimerQueue>
    3680:	90 91 75 07 	lds	r25, 0x0775	; 0x800775 <xTimerQueue+0x1>
    3684:	89 2b       	or	r24, r25
    3686:	89 f0       	breq	.+34     	; 0x36aa <xTimerCreateTimerTask+0x36>
    3688:	0f 2e       	mov	r0, r31
    368a:	f2 e7       	ldi	r31, 0x72	; 114
    368c:	ef 2e       	mov	r14, r31
    368e:	f7 e0       	ldi	r31, 0x07	; 7
    3690:	ff 2e       	mov	r15, r31
    3692:	f0 2d       	mov	r31, r0
    3694:	03 e0       	ldi	r16, 0x03	; 3
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	40 e8       	ldi	r20, 0x80	; 128
    369c:	50 e0       	ldi	r21, 0x00	; 0
    369e:	6b e1       	ldi	r22, 0x1B	; 27
    36a0:	72 e0       	ldi	r23, 0x02	; 2
    36a2:	85 e8       	ldi	r24, 0x85	; 133
    36a4:	9c e1       	ldi	r25, 0x1C	; 28
    36a6:	a2 d9       	rcall	.-3260   	; 0x29ec <xTaskCreate>
    36a8:	01 c0       	rjmp	.+2      	; 0x36ac <xTimerCreateTimerTask+0x38>
    36aa:	80 e0       	ldi	r24, 0x00	; 0
    36ac:	0f 91       	pop	r16
    36ae:	ff 90       	pop	r15
    36b0:	ef 90       	pop	r14
    36b2:	08 95       	ret

000036b4 <xTimerCreate>:
    36b4:	7f 92       	push	r7
    36b6:	8f 92       	push	r8
    36b8:	9f 92       	push	r9
    36ba:	af 92       	push	r10
    36bc:	bf 92       	push	r11
    36be:	cf 92       	push	r12
    36c0:	df 92       	push	r13
    36c2:	ef 92       	push	r14
    36c4:	ff 92       	push	r15
    36c6:	0f 93       	push	r16
    36c8:	1f 93       	push	r17
    36ca:	cf 93       	push	r28
    36cc:	df 93       	push	r29
    36ce:	6c 01       	movw	r12, r24
    36d0:	4a 01       	movw	r8, r20
    36d2:	5b 01       	movw	r10, r22
    36d4:	72 2e       	mov	r7, r18
    36d6:	87 e1       	ldi	r24, 0x17	; 23
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    36de:	ec 01       	movw	r28, r24
    36e0:	89 2b       	or	r24, r25
    36e2:	81 f0       	breq	.+32     	; 0x3704 <xTimerCreate+0x50>
    36e4:	9e df       	rcall	.-196    	; 0x3622 <prvCheckForValidListAndQueue>
    36e6:	d9 82       	std	Y+1, r13	; 0x01
    36e8:	c8 82       	st	Y, r12
    36ea:	8e 86       	std	Y+14, r8	; 0x0e
    36ec:	9f 86       	std	Y+15, r9	; 0x0f
    36ee:	a8 8a       	std	Y+16, r10	; 0x10
    36f0:	b9 8a       	std	Y+17, r11	; 0x11
    36f2:	7a 8a       	std	Y+18, r7	; 0x12
    36f4:	1c 8b       	std	Y+20, r17	; 0x14
    36f6:	0b 8b       	std	Y+19, r16	; 0x13
    36f8:	fe 8a       	std	Y+22, r15	; 0x16
    36fa:	ed 8a       	std	Y+21, r14	; 0x15
    36fc:	ce 01       	movw	r24, r28
    36fe:	02 96       	adiw	r24, 0x02	; 2
    3700:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    3704:	ce 01       	movw	r24, r28
    3706:	df 91       	pop	r29
    3708:	cf 91       	pop	r28
    370a:	1f 91       	pop	r17
    370c:	0f 91       	pop	r16
    370e:	ff 90       	pop	r15
    3710:	ef 90       	pop	r14
    3712:	df 90       	pop	r13
    3714:	cf 90       	pop	r12
    3716:	bf 90       	pop	r11
    3718:	af 90       	pop	r10
    371a:	9f 90       	pop	r9
    371c:	8f 90       	pop	r8
    371e:	7f 90       	pop	r7
    3720:	08 95       	ret

00003722 <xTimerGenericCommand>:
    3722:	8f 92       	push	r8
    3724:	9f 92       	push	r9
    3726:	af 92       	push	r10
    3728:	bf 92       	push	r11
    372a:	cf 92       	push	r12
    372c:	df 92       	push	r13
    372e:	ef 92       	push	r14
    3730:	ff 92       	push	r15
    3732:	0f 93       	push	r16
    3734:	1f 93       	push	r17
    3736:	cf 93       	push	r28
    3738:	df 93       	push	r29
    373a:	cd b7       	in	r28, 0x3d	; 61
    373c:	de b7       	in	r29, 0x3e	; 62
    373e:	27 97       	sbiw	r28, 0x07	; 7
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	f8 94       	cli
    3744:	de bf       	out	0x3e, r29	; 62
    3746:	0f be       	out	0x3f, r0	; 63
    3748:	cd bf       	out	0x3d, r28	; 61
    374a:	e0 91 74 07 	lds	r30, 0x0774	; 0x800774 <xTimerQueue>
    374e:	f0 91 75 07 	lds	r31, 0x0775	; 0x800775 <xTimerQueue+0x1>
    3752:	30 97       	sbiw	r30, 0x00	; 0
    3754:	81 f1       	breq	.+96     	; 0x37b6 <xTimerGenericCommand+0x94>
    3756:	69 83       	std	Y+1, r22	; 0x01
    3758:	2a 83       	std	Y+2, r18	; 0x02
    375a:	3b 83       	std	Y+3, r19	; 0x03
    375c:	4c 83       	std	Y+4, r20	; 0x04
    375e:	5d 83       	std	Y+5, r21	; 0x05
    3760:	9f 83       	std	Y+7, r25	; 0x07
    3762:	8e 83       	std	Y+6, r24	; 0x06
    3764:	66 30       	cpi	r22, 0x06	; 6
    3766:	f4 f4       	brge	.+60     	; 0x37a4 <xTimerGenericCommand+0x82>
    3768:	f9 dd       	rcall	.-1038   	; 0x335c <xTaskGetSchedulerState>
    376a:	82 30       	cpi	r24, 0x02	; 2
    376c:	69 f4       	brne	.+26     	; 0x3788 <xTimerGenericCommand+0x66>
    376e:	00 e0       	ldi	r16, 0x00	; 0
    3770:	a7 01       	movw	r20, r14
    3772:	96 01       	movw	r18, r12
    3774:	be 01       	movw	r22, r28
    3776:	6f 5f       	subi	r22, 0xFF	; 255
    3778:	7f 4f       	sbci	r23, 0xFF	; 255
    377a:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <xTimerQueue>
    377e:	90 91 75 07 	lds	r25, 0x0775	; 0x800775 <xTimerQueue+0x1>
    3782:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    3786:	18 c0       	rjmp	.+48     	; 0x37b8 <xTimerGenericCommand+0x96>
    3788:	00 e0       	ldi	r16, 0x00	; 0
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	a9 01       	movw	r20, r18
    3790:	be 01       	movw	r22, r28
    3792:	6f 5f       	subi	r22, 0xFF	; 255
    3794:	7f 4f       	sbci	r23, 0xFF	; 255
    3796:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <xTimerQueue>
    379a:	90 91 75 07 	lds	r25, 0x0775	; 0x800775 <xTimerQueue+0x1>
    379e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    37a2:	0a c0       	rjmp	.+20     	; 0x37b8 <xTimerGenericCommand+0x96>
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	a8 01       	movw	r20, r16
    37a8:	be 01       	movw	r22, r28
    37aa:	6f 5f       	subi	r22, 0xFF	; 255
    37ac:	7f 4f       	sbci	r23, 0xFF	; 255
    37ae:	cf 01       	movw	r24, r30
    37b0:	0e 94 90 0a 	call	0x1520	; 0x1520 <xQueueGenericSendFromISR>
    37b4:	01 c0       	rjmp	.+2      	; 0x37b8 <xTimerGenericCommand+0x96>
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	27 96       	adiw	r28, 0x07	; 7
    37ba:	0f b6       	in	r0, 0x3f	; 63
    37bc:	f8 94       	cli
    37be:	de bf       	out	0x3e, r29	; 62
    37c0:	0f be       	out	0x3f, r0	; 63
    37c2:	cd bf       	out	0x3d, r28	; 61
    37c4:	df 91       	pop	r29
    37c6:	cf 91       	pop	r28
    37c8:	1f 91       	pop	r17
    37ca:	0f 91       	pop	r16
    37cc:	ff 90       	pop	r15
    37ce:	ef 90       	pop	r14
    37d0:	df 90       	pop	r13
    37d2:	cf 90       	pop	r12
    37d4:	bf 90       	pop	r11
    37d6:	af 90       	pop	r10
    37d8:	9f 90       	pop	r9
    37da:	8f 90       	pop	r8
    37dc:	08 95       	ret

000037de <prvSampleTimeNow>:
    37de:	2f 92       	push	r2
    37e0:	3f 92       	push	r3
    37e2:	4f 92       	push	r4
    37e4:	5f 92       	push	r5
    37e6:	6f 92       	push	r6
    37e8:	7f 92       	push	r7
    37ea:	8f 92       	push	r8
    37ec:	9f 92       	push	r9
    37ee:	af 92       	push	r10
    37f0:	bf 92       	push	r11
    37f2:	cf 92       	push	r12
    37f4:	df 92       	push	r13
    37f6:	ef 92       	push	r14
    37f8:	ff 92       	push	r15
    37fa:	0f 93       	push	r16
    37fc:	1f 93       	push	r17
    37fe:	cf 93       	push	r28
    3800:	df 93       	push	r29
    3802:	1c 01       	movw	r2, r24
    3804:	8e da       	rcall	.-2788   	; 0x2d22 <xTaskGetTickCount>
    3806:	2b 01       	movw	r4, r22
    3808:	3c 01       	movw	r6, r24
    380a:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <xLastTime.2378>
    380e:	90 91 6f 07 	lds	r25, 0x076F	; 0x80076f <xLastTime.2378+0x1>
    3812:	a0 91 70 07 	lds	r26, 0x0770	; 0x800770 <xLastTime.2378+0x2>
    3816:	b0 91 71 07 	lds	r27, 0x0771	; 0x800771 <xLastTime.2378+0x3>
    381a:	48 16       	cp	r4, r24
    381c:	59 06       	cpc	r5, r25
    381e:	6a 06       	cpc	r6, r26
    3820:	7b 06       	cpc	r7, r27
    3822:	08 f0       	brcs	.+2      	; 0x3826 <prvSampleTimeNow+0x48>
    3824:	53 c0       	rjmp	.+166    	; 0x38cc <prvSampleTimeNow+0xee>
    3826:	3b c0       	rjmp	.+118    	; 0x389e <prvSampleTimeNow+0xc0>
    3828:	07 80       	ldd	r0, Z+7	; 0x07
    382a:	f0 85       	ldd	r31, Z+8	; 0x08
    382c:	e0 2d       	mov	r30, r0
    382e:	80 80       	ld	r8, Z
    3830:	91 80       	ldd	r9, Z+1	; 0x01
    3832:	a2 80       	ldd	r10, Z+2	; 0x02
    3834:	b3 80       	ldd	r11, Z+3	; 0x03
    3836:	c0 85       	ldd	r28, Z+8	; 0x08
    3838:	d1 85       	ldd	r29, Z+9	; 0x09
    383a:	8e 01       	movw	r16, r28
    383c:	0e 5f       	subi	r16, 0xFE	; 254
    383e:	1f 4f       	sbci	r17, 0xFF	; 255
    3840:	c8 01       	movw	r24, r16
    3842:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3846:	ed 89       	ldd	r30, Y+21	; 0x15
    3848:	fe 89       	ldd	r31, Y+22	; 0x16
    384a:	ce 01       	movw	r24, r28
    384c:	19 95       	eicall
    384e:	8a 89       	ldd	r24, Y+18	; 0x12
    3850:	81 30       	cpi	r24, 0x01	; 1
    3852:	29 f5       	brne	.+74     	; 0x389e <prvSampleTimeNow+0xc0>
    3854:	8e 85       	ldd	r24, Y+14	; 0x0e
    3856:	9f 85       	ldd	r25, Y+15	; 0x0f
    3858:	a8 89       	ldd	r26, Y+16	; 0x10
    385a:	b9 89       	ldd	r27, Y+17	; 0x11
    385c:	88 0d       	add	r24, r8
    385e:	99 1d       	adc	r25, r9
    3860:	aa 1d       	adc	r26, r10
    3862:	bb 1d       	adc	r27, r11
    3864:	88 16       	cp	r8, r24
    3866:	99 06       	cpc	r9, r25
    3868:	aa 06       	cpc	r10, r26
    386a:	bb 06       	cpc	r11, r27
    386c:	70 f4       	brcc	.+28     	; 0x388a <prvSampleTimeNow+0xac>
    386e:	8a 83       	std	Y+2, r24	; 0x02
    3870:	9b 83       	std	Y+3, r25	; 0x03
    3872:	ac 83       	std	Y+4, r26	; 0x04
    3874:	bd 83       	std	Y+5, r27	; 0x05
    3876:	db 87       	std	Y+11, r29	; 0x0b
    3878:	ca 87       	std	Y+10, r28	; 0x0a
    387a:	b8 01       	movw	r22, r16
    387c:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <pxCurrentTimerList>
    3880:	90 91 79 07 	lds	r25, 0x0779	; 0x800779 <pxCurrentTimerList+0x1>
    3884:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    3888:	0a c0       	rjmp	.+20     	; 0x389e <prvSampleTimeNow+0xc0>
    388a:	c1 2c       	mov	r12, r1
    388c:	d1 2c       	mov	r13, r1
    388e:	76 01       	movw	r14, r12
    3890:	00 e0       	ldi	r16, 0x00	; 0
    3892:	10 e0       	ldi	r17, 0x00	; 0
    3894:	a5 01       	movw	r20, r10
    3896:	94 01       	movw	r18, r8
    3898:	60 e0       	ldi	r22, 0x00	; 0
    389a:	ce 01       	movw	r24, r28
    389c:	42 df       	rcall	.-380    	; 0x3722 <xTimerGenericCommand>
    389e:	e0 91 78 07 	lds	r30, 0x0778	; 0x800778 <pxCurrentTimerList>
    38a2:	f0 91 79 07 	lds	r31, 0x0779	; 0x800779 <pxCurrentTimerList+0x1>
    38a6:	80 81       	ld	r24, Z
    38a8:	81 11       	cpse	r24, r1
    38aa:	be cf       	rjmp	.-132    	; 0x3828 <prvSampleTimeNow+0x4a>
    38ac:	80 91 76 07 	lds	r24, 0x0776	; 0x800776 <pxOverflowTimerList>
    38b0:	90 91 77 07 	lds	r25, 0x0777	; 0x800777 <pxOverflowTimerList+0x1>
    38b4:	90 93 79 07 	sts	0x0779, r25	; 0x800779 <pxCurrentTimerList+0x1>
    38b8:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <pxCurrentTimerList>
    38bc:	f0 93 77 07 	sts	0x0777, r31	; 0x800777 <pxOverflowTimerList+0x1>
    38c0:	e0 93 76 07 	sts	0x0776, r30	; 0x800776 <pxOverflowTimerList>
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	f1 01       	movw	r30, r2
    38c8:	80 83       	st	Z, r24
    38ca:	02 c0       	rjmp	.+4      	; 0x38d0 <prvSampleTimeNow+0xf2>
    38cc:	f1 01       	movw	r30, r2
    38ce:	10 82       	st	Z, r1
    38d0:	40 92 6e 07 	sts	0x076E, r4	; 0x80076e <xLastTime.2378>
    38d4:	50 92 6f 07 	sts	0x076F, r5	; 0x80076f <xLastTime.2378+0x1>
    38d8:	60 92 70 07 	sts	0x0770, r6	; 0x800770 <xLastTime.2378+0x2>
    38dc:	70 92 71 07 	sts	0x0771, r7	; 0x800771 <xLastTime.2378+0x3>
    38e0:	c3 01       	movw	r24, r6
    38e2:	b2 01       	movw	r22, r4
    38e4:	df 91       	pop	r29
    38e6:	cf 91       	pop	r28
    38e8:	1f 91       	pop	r17
    38ea:	0f 91       	pop	r16
    38ec:	ff 90       	pop	r15
    38ee:	ef 90       	pop	r14
    38f0:	df 90       	pop	r13
    38f2:	cf 90       	pop	r12
    38f4:	bf 90       	pop	r11
    38f6:	af 90       	pop	r10
    38f8:	9f 90       	pop	r9
    38fa:	8f 90       	pop	r8
    38fc:	7f 90       	pop	r7
    38fe:	6f 90       	pop	r6
    3900:	5f 90       	pop	r5
    3902:	4f 90       	pop	r4
    3904:	3f 90       	pop	r3
    3906:	2f 90       	pop	r2
    3908:	08 95       	ret

0000390a <prvTimerTask>:
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
    3912:	60 97       	sbiw	r28, 0x10	; 16
    3914:	0f b6       	in	r0, 0x3f	; 63
    3916:	f8 94       	cli
    3918:	de bf       	out	0x3e, r29	; 62
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	cd bf       	out	0x3d, r28	; 61
    391e:	ce 01       	movw	r24, r28
    3920:	01 96       	adiw	r24, 0x01	; 1
    3922:	9a 87       	std	Y+10, r25	; 0x0a
    3924:	89 87       	std	Y+9, r24	; 0x09
    3926:	81 2c       	mov	r8, r1
    3928:	91 2c       	mov	r9, r1
    392a:	a1 2c       	mov	r10, r1
    392c:	b1 2c       	mov	r11, r1
    392e:	69 84       	ldd	r6, Y+9	; 0x09
    3930:	7a 84       	ldd	r7, Y+10	; 0x0a
    3932:	e0 91 78 07 	lds	r30, 0x0778	; 0x800778 <pxCurrentTimerList>
    3936:	f0 91 79 07 	lds	r31, 0x0779	; 0x800779 <pxCurrentTimerList+0x1>
    393a:	80 81       	ld	r24, Z
    393c:	88 23       	and	r24, r24
    393e:	09 f4       	brne	.+2      	; 0x3942 <prvTimerTask+0x38>
    3940:	f2 c0       	rjmp	.+484    	; 0x3b26 <prvTimerTask+0x21c>
    3942:	07 80       	ldd	r0, Z+7	; 0x07
    3944:	f0 85       	ldd	r31, Z+8	; 0x08
    3946:	e0 2d       	mov	r30, r0
    3948:	20 80       	ld	r2, Z
    394a:	31 80       	ldd	r3, Z+1	; 0x01
    394c:	42 80       	ldd	r4, Z+2	; 0x02
    394e:	53 80       	ldd	r5, Z+3	; 0x03
    3950:	e2 d9       	rcall	.-3132   	; 0x2d16 <vTaskSuspendAll>
    3952:	ce 01       	movw	r24, r28
    3954:	01 96       	adiw	r24, 0x01	; 1
    3956:	43 df       	rcall	.-378    	; 0x37de <prvSampleTimeNow>
    3958:	6b 87       	std	Y+11, r22	; 0x0b
    395a:	7c 87       	std	Y+12, r23	; 0x0c
    395c:	8d 87       	std	Y+13, r24	; 0x0d
    395e:	9e 87       	std	Y+14, r25	; 0x0e
    3960:	89 81       	ldd	r24, Y+1	; 0x01
    3962:	81 11       	cpse	r24, r1
    3964:	5d c0       	rjmp	.+186    	; 0x3a20 <prvTimerTask+0x116>
    3966:	8b 85       	ldd	r24, Y+11	; 0x0b
    3968:	9c 85       	ldd	r25, Y+12	; 0x0c
    396a:	ad 85       	ldd	r26, Y+13	; 0x0d
    396c:	be 85       	ldd	r27, Y+14	; 0x0e
    396e:	82 15       	cp	r24, r2
    3970:	93 05       	cpc	r25, r3
    3972:	a4 05       	cpc	r26, r4
    3974:	b5 05       	cpc	r27, r5
    3976:	08 f4       	brcc	.+2      	; 0x397a <prvTimerTask+0x70>
    3978:	3c c0       	rjmp	.+120    	; 0x39f2 <prvTimerTask+0xe8>
    397a:	b6 da       	rcall	.-2708   	; 0x2ee8 <xTaskResumeAll>
    397c:	e0 91 78 07 	lds	r30, 0x0778	; 0x800778 <pxCurrentTimerList>
    3980:	f0 91 79 07 	lds	r31, 0x0779	; 0x800779 <pxCurrentTimerList+0x1>
    3984:	07 80       	ldd	r0, Z+7	; 0x07
    3986:	f0 85       	ldd	r31, Z+8	; 0x08
    3988:	e0 2d       	mov	r30, r0
    398a:	a0 85       	ldd	r26, Z+8	; 0x08
    398c:	b1 85       	ldd	r27, Z+9	; 0x09
    398e:	b8 8b       	std	Y+16, r27	; 0x10
    3990:	af 87       	std	Y+15, r26	; 0x0f
    3992:	cd 01       	movw	r24, r26
    3994:	02 96       	adiw	r24, 0x02	; 2
    3996:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    399a:	ef 85       	ldd	r30, Y+15	; 0x0f
    399c:	f8 89       	ldd	r31, Y+16	; 0x10
    399e:	82 89       	ldd	r24, Z+18	; 0x12
    39a0:	81 30       	cpi	r24, 0x01	; 1
    39a2:	f1 f4       	brne	.+60     	; 0x39e0 <prvTimerTask+0xd6>
    39a4:	46 85       	ldd	r20, Z+14	; 0x0e
    39a6:	57 85       	ldd	r21, Z+15	; 0x0f
    39a8:	60 89       	ldd	r22, Z+16	; 0x10
    39aa:	71 89       	ldd	r23, Z+17	; 0x11
    39ac:	42 0d       	add	r20, r2
    39ae:	53 1d       	adc	r21, r3
    39b0:	64 1d       	adc	r22, r4
    39b2:	75 1d       	adc	r23, r5
    39b4:	72 01       	movw	r14, r4
    39b6:	61 01       	movw	r12, r2
    39b8:	0b 85       	ldd	r16, Y+11	; 0x0b
    39ba:	1c 85       	ldd	r17, Y+12	; 0x0c
    39bc:	2d 85       	ldd	r18, Y+13	; 0x0d
    39be:	3e 85       	ldd	r19, Y+14	; 0x0e
    39c0:	cf 01       	movw	r24, r30
    39c2:	e6 dd       	rcall	.-1076   	; 0x3590 <prvInsertTimerInActiveList>
    39c4:	88 23       	and	r24, r24
    39c6:	61 f0       	breq	.+24     	; 0x39e0 <prvTimerTask+0xd6>
    39c8:	c8 2c       	mov	r12, r8
    39ca:	d9 2c       	mov	r13, r9
    39cc:	ea 2c       	mov	r14, r10
    39ce:	fb 2c       	mov	r15, r11
    39d0:	00 e0       	ldi	r16, 0x00	; 0
    39d2:	10 e0       	ldi	r17, 0x00	; 0
    39d4:	a2 01       	movw	r20, r4
    39d6:	91 01       	movw	r18, r2
    39d8:	60 e0       	ldi	r22, 0x00	; 0
    39da:	8f 85       	ldd	r24, Y+15	; 0x0f
    39dc:	98 89       	ldd	r25, Y+16	; 0x10
    39de:	a1 de       	rcall	.-702    	; 0x3722 <xTimerGenericCommand>
    39e0:	af 85       	ldd	r26, Y+15	; 0x0f
    39e2:	b8 89       	ldd	r27, Y+16	; 0x10
    39e4:	55 96       	adiw	r26, 0x15	; 21
    39e6:	ed 91       	ld	r30, X+
    39e8:	fc 91       	ld	r31, X
    39ea:	56 97       	sbiw	r26, 0x16	; 22
    39ec:	cd 01       	movw	r24, r26
    39ee:	19 95       	eicall
    39f0:	8b c0       	rjmp	.+278    	; 0x3b08 <prvTimerTask+0x1fe>
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	b2 01       	movw	r22, r4
    39f6:	a1 01       	movw	r20, r2
    39f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    39fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    39fc:	ad 85       	ldd	r26, Y+13	; 0x0d
    39fe:	be 85       	ldd	r27, Y+14	; 0x0e
    3a00:	48 1b       	sub	r20, r24
    3a02:	59 0b       	sbc	r21, r25
    3a04:	6a 0b       	sbc	r22, r26
    3a06:	7b 0b       	sbc	r23, r27
    3a08:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <xTimerQueue>
    3a0c:	90 91 75 07 	lds	r25, 0x0775	; 0x800775 <xTimerQueue+0x1>
    3a10:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <vQueueWaitForMessageRestricted>
    3a14:	69 da       	rcall	.-2862   	; 0x2ee8 <xTaskResumeAll>
    3a16:	81 11       	cpse	r24, r1
    3a18:	77 c0       	rjmp	.+238    	; 0x3b08 <prvTimerTask+0x1fe>
    3a1a:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3a1e:	74 c0       	rjmp	.+232    	; 0x3b08 <prvTimerTask+0x1fe>
    3a20:	63 da       	rcall	.-2874   	; 0x2ee8 <xTaskResumeAll>
    3a22:	72 c0       	rjmp	.+228    	; 0x3b08 <prvTimerTask+0x1fe>
    3a24:	89 81       	ldd	r24, Y+1	; 0x01
    3a26:	88 23       	and	r24, r24
    3a28:	0c f4       	brge	.+2      	; 0x3a2c <prvTimerTask+0x122>
    3a2a:	6e c0       	rjmp	.+220    	; 0x3b08 <prvTimerTask+0x1fe>
    3a2c:	4e 80       	ldd	r4, Y+6	; 0x06
    3a2e:	5f 80       	ldd	r5, Y+7	; 0x07
    3a30:	d2 01       	movw	r26, r4
    3a32:	1c 96       	adiw	r26, 0x0c	; 12
    3a34:	8d 91       	ld	r24, X+
    3a36:	9c 91       	ld	r25, X
    3a38:	1d 97       	sbiw	r26, 0x0d	; 13
    3a3a:	89 2b       	or	r24, r25
    3a3c:	21 f0       	breq	.+8      	; 0x3a46 <prvTimerTask+0x13c>
    3a3e:	c2 01       	movw	r24, r4
    3a40:	02 96       	adiw	r24, 0x02	; 2
    3a42:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3a46:	ce 01       	movw	r24, r28
    3a48:	08 96       	adiw	r24, 0x08	; 8
    3a4a:	c9 de       	rcall	.-622    	; 0x37de <prvSampleTimeNow>
    3a4c:	8b 01       	movw	r16, r22
    3a4e:	9c 01       	movw	r18, r24
    3a50:	89 81       	ldd	r24, Y+1	; 0x01
    3a52:	08 2e       	mov	r0, r24
    3a54:	00 0c       	add	r0, r0
    3a56:	99 0b       	sbc	r25, r25
    3a58:	aa 0b       	sbc	r26, r26
    3a5a:	bb 0b       	sbc	r27, r27
    3a5c:	8a 30       	cpi	r24, 0x0A	; 10
    3a5e:	91 05       	cpc	r25, r1
    3a60:	08 f0       	brcs	.+2      	; 0x3a64 <prvTimerTask+0x15a>
    3a62:	52 c0       	rjmp	.+164    	; 0x3b08 <prvTimerTask+0x1fe>
    3a64:	fc 01       	movw	r30, r24
    3a66:	88 27       	eor	r24, r24
    3a68:	ee 56       	subi	r30, 0x6E	; 110
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a6e:	0c 94 04 58 	jmp	0xb008	; 0xb008 <__tablejump2__>
    3a72:	ca 80       	ldd	r12, Y+2	; 0x02
    3a74:	db 80       	ldd	r13, Y+3	; 0x03
    3a76:	ec 80       	ldd	r14, Y+4	; 0x04
    3a78:	fd 80       	ldd	r15, Y+5	; 0x05
    3a7a:	f2 01       	movw	r30, r4
    3a7c:	46 85       	ldd	r20, Z+14	; 0x0e
    3a7e:	57 85       	ldd	r21, Z+15	; 0x0f
    3a80:	60 89       	ldd	r22, Z+16	; 0x10
    3a82:	71 89       	ldd	r23, Z+17	; 0x11
    3a84:	4c 0d       	add	r20, r12
    3a86:	5d 1d       	adc	r21, r13
    3a88:	6e 1d       	adc	r22, r14
    3a8a:	7f 1d       	adc	r23, r15
    3a8c:	c2 01       	movw	r24, r4
    3a8e:	80 dd       	rcall	.-1280   	; 0x3590 <prvInsertTimerInActiveList>
    3a90:	88 23       	and	r24, r24
    3a92:	d1 f1       	breq	.+116    	; 0x3b08 <prvTimerTask+0x1fe>
    3a94:	d2 01       	movw	r26, r4
    3a96:	55 96       	adiw	r26, 0x15	; 21
    3a98:	ed 91       	ld	r30, X+
    3a9a:	fc 91       	ld	r31, X
    3a9c:	56 97       	sbiw	r26, 0x16	; 22
    3a9e:	c2 01       	movw	r24, r4
    3aa0:	19 95       	eicall
    3aa2:	f2 01       	movw	r30, r4
    3aa4:	82 89       	ldd	r24, Z+18	; 0x12
    3aa6:	81 30       	cpi	r24, 0x01	; 1
    3aa8:	79 f5       	brne	.+94     	; 0x3b08 <prvTimerTask+0x1fe>
    3aaa:	4a 81       	ldd	r20, Y+2	; 0x02
    3aac:	5b 81       	ldd	r21, Y+3	; 0x03
    3aae:	6c 81       	ldd	r22, Y+4	; 0x04
    3ab0:	7d 81       	ldd	r23, Y+5	; 0x05
    3ab2:	86 85       	ldd	r24, Z+14	; 0x0e
    3ab4:	97 85       	ldd	r25, Z+15	; 0x0f
    3ab6:	a0 89       	ldd	r26, Z+16	; 0x10
    3ab8:	b1 89       	ldd	r27, Z+17	; 0x11
    3aba:	9a 01       	movw	r18, r20
    3abc:	ab 01       	movw	r20, r22
    3abe:	28 0f       	add	r18, r24
    3ac0:	39 1f       	adc	r19, r25
    3ac2:	4a 1f       	adc	r20, r26
    3ac4:	5b 1f       	adc	r21, r27
    3ac6:	c8 2c       	mov	r12, r8
    3ac8:	d9 2c       	mov	r13, r9
    3aca:	ea 2c       	mov	r14, r10
    3acc:	fb 2c       	mov	r15, r11
    3ace:	00 e0       	ldi	r16, 0x00	; 0
    3ad0:	10 e0       	ldi	r17, 0x00	; 0
    3ad2:	60 e0       	ldi	r22, 0x00	; 0
    3ad4:	c2 01       	movw	r24, r4
    3ad6:	25 de       	rcall	.-950    	; 0x3722 <xTimerGenericCommand>
    3ad8:	17 c0       	rjmp	.+46     	; 0x3b08 <prvTimerTask+0x1fe>
    3ada:	4a 81       	ldd	r20, Y+2	; 0x02
    3adc:	5b 81       	ldd	r21, Y+3	; 0x03
    3ade:	6c 81       	ldd	r22, Y+4	; 0x04
    3ae0:	7d 81       	ldd	r23, Y+5	; 0x05
    3ae2:	d2 01       	movw	r26, r4
    3ae4:	1e 96       	adiw	r26, 0x0e	; 14
    3ae6:	4d 93       	st	X+, r20
    3ae8:	5d 93       	st	X+, r21
    3aea:	6d 93       	st	X+, r22
    3aec:	7c 93       	st	X, r23
    3aee:	51 97       	sbiw	r26, 0x11	; 17
    3af0:	40 0f       	add	r20, r16
    3af2:	51 1f       	adc	r21, r17
    3af4:	62 1f       	adc	r22, r18
    3af6:	73 1f       	adc	r23, r19
    3af8:	68 01       	movw	r12, r16
    3afa:	79 01       	movw	r14, r18
    3afc:	c2 01       	movw	r24, r4
    3afe:	48 dd       	rcall	.-1392   	; 0x3590 <prvInsertTimerInActiveList>
    3b00:	03 c0       	rjmp	.+6      	; 0x3b08 <prvTimerTask+0x1fe>
    3b02:	c2 01       	movw	r24, r4
    3b04:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vPortFree>
    3b08:	28 2d       	mov	r18, r8
    3b0a:	39 2d       	mov	r19, r9
    3b0c:	4a 2d       	mov	r20, r10
    3b0e:	5b 2d       	mov	r21, r11
    3b10:	66 2d       	mov	r22, r6
    3b12:	77 2d       	mov	r23, r7
    3b14:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <xTimerQueue>
    3b18:	90 91 75 07 	lds	r25, 0x0775	; 0x800775 <xTimerQueue+0x1>
    3b1c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <xQueueReceive>
    3b20:	81 11       	cpse	r24, r1
    3b22:	80 cf       	rjmp	.-256    	; 0x3a24 <prvTimerTask+0x11a>
    3b24:	06 cf       	rjmp	.-500    	; 0x3932 <prvTimerTask+0x28>
    3b26:	f7 d8       	rcall	.-3602   	; 0x2d16 <vTaskSuspendAll>
    3b28:	ce 01       	movw	r24, r28
    3b2a:	01 96       	adiw	r24, 0x01	; 1
    3b2c:	58 de       	rcall	.-848    	; 0x37de <prvSampleTimeNow>
    3b2e:	6b 87       	std	Y+11, r22	; 0x0b
    3b30:	7c 87       	std	Y+12, r23	; 0x0c
    3b32:	8d 87       	std	Y+13, r24	; 0x0d
    3b34:	9e 87       	std	Y+14, r25	; 0x0e
    3b36:	89 81       	ldd	r24, Y+1	; 0x01
    3b38:	81 11       	cpse	r24, r1
    3b3a:	72 cf       	rjmp	.-284    	; 0x3a20 <prvTimerTask+0x116>
    3b3c:	e0 91 76 07 	lds	r30, 0x0776	; 0x800776 <pxOverflowTimerList>
    3b40:	f0 91 77 07 	lds	r31, 0x0777	; 0x800777 <pxOverflowTimerList+0x1>
    3b44:	80 81       	ld	r24, Z
    3b46:	21 e0       	ldi	r18, 0x01	; 1
    3b48:	81 11       	cpse	r24, r1
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	28 2c       	mov	r2, r8
    3b4e:	39 2c       	mov	r3, r9
    3b50:	4a 2c       	mov	r4, r10
    3b52:	5b 2c       	mov	r5, r11
    3b54:	4f cf       	rjmp	.-354    	; 0x39f4 <prvTimerTask+0xea>

00003b56 <xTimerIsTimerActive>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
    3b56:	fc 01       	movw	r30, r24
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
    3b58:	0f b6       	in	r0, 0x3f	; 63
    3b5a:	f8 94       	cli
    3b5c:	0f 92       	push	r0
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	24 85       	ldd	r18, Z+12	; 0x0c
    3b62:	35 85       	ldd	r19, Z+13	; 0x0d
    3b64:	23 2b       	or	r18, r19
    3b66:	09 f4       	brne	.+2      	; 0x3b6a <xTimerIsTimerActive+0x14>
    3b68:	80 e0       	ldi	r24, 0x00	; 0
	}
	taskEXIT_CRITICAL();
    3b6a:	0f 90       	pop	r0
    3b6c:	0f be       	out	0x3f, r0	; 63

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
    3b6e:	08 95       	ret

00003b70 <pvTimerGetTimerID>:
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
    3b70:	0f b6       	in	r0, 0x3f	; 63
    3b72:	f8 94       	cli
    3b74:	0f 92       	push	r0
	{
		pvReturn = pxTimer->pvTimerID;
    3b76:	fc 01       	movw	r30, r24
    3b78:	83 89       	ldd	r24, Z+19	; 0x13
    3b7a:	94 89       	ldd	r25, Z+20	; 0x14
	}
	taskEXIT_CRITICAL();
    3b7c:	0f 90       	pop	r0
    3b7e:	0f be       	out	0x3f, r0	; 63

	return pvReturn;
}
    3b80:	08 95       	ret

00003b82 <Defrost>:
{
	
while(1){
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
    3b82:	c8 e7       	ldi	r28, 0x78	; 120
    3b84:	d9 e0       	ldi	r29, 0x09	; 9
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Temp_Out<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3b86:	08 ed       	ldi	r16, 0xD8	; 216
    3b88:	19 e0       	ldi	r17, 0x09	; 9
				if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
				else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3b8a:	0f 2e       	mov	r0, r31
    3b8c:	fe e3       	ldi	r31, 0x3E	; 62
    3b8e:	cf 2e       	mov	r12, r31
    3b90:	f2 e0       	ldi	r31, 0x02	; 2
    3b92:	df 2e       	mov	r13, r31
    3b94:	f0 2d       	mov	r31, r0
    3b96:	0f 2e       	mov	r0, r31
    3b98:	f6 e1       	ldi	r31, 0x16	; 22
    3b9a:	ef 2e       	mov	r14, r31
    3b9c:	f8 e0       	ldi	r31, 0x08	; 8
    3b9e:	ff 2e       	mov	r15, r31
    3ba0:	f0 2d       	mov	r31, r0
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Temp_Out<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3ba2:	0f 2e       	mov	r0, r31
    3ba4:	f6 e2       	ldi	r31, 0x26	; 38
    3ba6:	8f 2e       	mov	r8, r31
    3ba8:	fa e0       	ldi	r31, 0x0A	; 10
    3baa:	9f 2e       	mov	r9, r31
    3bac:	f0 2d       	mov	r31, r0
    3bae:	33 24       	eor	r3, r3
    3bb0:	33 94       	inc	r3
while(1){
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
    3bb2:	0f 2e       	mov	r0, r31
    3bb4:	f3 e2       	ldi	r31, 0x23	; 35
    3bb6:	af 2e       	mov	r10, r31
    3bb8:	f2 e0       	ldi	r31, 0x02	; 2
    3bba:	bf 2e       	mov	r11, r31
    3bbc:	f0 2d       	mov	r31, r0
//////////////////////////////////////////////////
static void Defrost(void *pvParameters)
{
	
while(1){
			wdt_reset();
    3bbe:	a8 95       	wdr
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
    3bc0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bc2:	81 30       	cpi	r24, 0x01	; 1
    3bc4:	09 f0       	breq	.+2      	; 0x3bc8 <Defrost+0x46>
    3bc6:	d1 c0       	rjmp	.+418    	; 0x3d6a <Defrost+0x1e8>
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
    3bc8:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <forsDefrost>
    3bcc:	81 30       	cpi	r24, 0x01	; 1
    3bce:	91 f4       	brne	.+36     	; 0x3bf4 <Defrost+0x72>
    3bd0:	be 01       	movw	r22, r28
    3bd2:	c8 01       	movw	r24, r16
    3bd4:	0e 94 7e 32 	call	0x64fc	; 0x64fc <startDefrost>
    3bd8:	f8 01       	movw	r30, r16
    3bda:	31 86       	std	Z+9, r3	; 0x09
    3bdc:	10 92 91 07 	sts	0x0791, r1	; 0x800791 <forsDefrost>
    3be0:	bf 92       	push	r11
    3be2:	af 92       	push	r10
    3be4:	ff 92       	push	r15
    3be6:	ef 92       	push	r14
    3be8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3bec:	0f 90       	pop	r0
    3bee:	0f 90       	pop	r0
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Temp_Out<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3bf4:	f8 01       	movw	r30, r16
    3bf6:	81 85       	ldd	r24, Z+9	; 0x09
    3bf8:	81 11       	cpse	r24, r1
    3bfa:	4a c0       	rjmp	.+148    	; 0x3c90 <Defrost+0x10e>
    3bfc:	92 d8       	rcall	.-3804   	; 0x2d22 <xTaskGetTickCount>
    3bfe:	40 90 59 09 	lds	r4, 0x0959	; 0x800959 <timeTillDef>
    3c02:	50 90 5a 09 	lds	r5, 0x095A	; 0x80095a <timeTillDef+0x1>
    3c06:	60 90 5b 09 	lds	r6, 0x095B	; 0x80095b <timeTillDef+0x2>
    3c0a:	70 90 5c 09 	lds	r7, 0x095C	; 0x80095c <timeTillDef+0x3>
    3c0e:	9b 01       	movw	r18, r22
    3c10:	ac 01       	movw	r20, r24
    3c12:	24 19       	sub	r18, r4
    3c14:	35 09       	sbc	r19, r5
    3c16:	46 09       	sbc	r20, r6
    3c18:	57 09       	sbc	r21, r7
    3c1a:	29 01       	movw	r4, r18
    3c1c:	3a 01       	movw	r6, r20
    3c1e:	2a a1       	ldd	r18, Y+34	; 0x22
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	a0 e6       	ldi	r26, 0x60	; 96
    3c24:	ba ee       	ldi	r27, 0xEA	; 234
    3c26:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    3c2a:	64 15       	cp	r22, r4
    3c2c:	75 05       	cpc	r23, r5
    3c2e:	86 05       	cpc	r24, r6
    3c30:	97 05       	cpc	r25, r7
    3c32:	48 f5       	brcc	.+82     	; 0x3c86 <Defrost+0x104>
    3c34:	6a a5       	ldd	r22, Y+42	; 0x2a
    3c36:	7b a5       	ldd	r23, Y+43	; 0x2b
    3c38:	07 2e       	mov	r0, r23
    3c3a:	00 0c       	add	r0, r0
    3c3c:	88 0b       	sbc	r24, r24
    3c3e:	99 0b       	sbc	r25, r25
    3c40:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    3c44:	9b 01       	movw	r18, r22
    3c46:	ac 01       	movw	r20, r24
    3c48:	f4 01       	movw	r30, r8
    3c4a:	60 81       	ld	r22, Z
    3c4c:	71 81       	ldd	r23, Z+1	; 0x01
    3c4e:	82 81       	ldd	r24, Z+2	; 0x02
    3c50:	93 81       	ldd	r25, Z+3	; 0x03
    3c52:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    3c56:	88 23       	and	r24, r24
    3c58:	b4 f4       	brge	.+44     	; 0x3c86 <Defrost+0x104>
    3c5a:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <forsDefrost>
    3c5e:	81 11       	cpse	r24, r1
    3c60:	12 c0       	rjmp	.+36     	; 0x3c86 <Defrost+0x104>
    3c62:	be 01       	movw	r22, r28
    3c64:	c8 01       	movw	r24, r16
    3c66:	0e 94 7e 32 	call	0x64fc	; 0x64fc <startDefrost>
    3c6a:	f8 01       	movw	r30, r16
    3c6c:	31 86       	std	Z+9, r3	; 0x09
    3c6e:	23 e3       	ldi	r18, 0x33	; 51
    3c70:	32 e0       	ldi	r19, 0x02	; 2
    3c72:	3f 93       	push	r19
    3c74:	2f 93       	push	r18
    3c76:	ff 92       	push	r15
    3c78:	ef 92       	push	r14
    3c7a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3c7e:	0f 90       	pop	r0
    3c80:	0f 90       	pop	r0
    3c82:	0f 90       	pop	r0
    3c84:	0f 90       	pop	r0
				if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3c86:	f8 01       	movw	r30, r16
    3c88:	81 85       	ldd	r24, Z+9	; 0x09
    3c8a:	88 23       	and	r24, r24
    3c8c:	09 f4       	brne	.+2      	; 0x3c90 <Defrost+0x10e>
    3c8e:	6d c0       	rjmp	.+218    	; 0x3d6a <Defrost+0x1e8>
    3c90:	48 d8       	rcall	.-3952   	; 0x2d22 <xTaskGetTickCount>
    3c92:	40 90 59 09 	lds	r4, 0x0959	; 0x800959 <timeTillDef>
    3c96:	50 90 5a 09 	lds	r5, 0x095A	; 0x80095a <timeTillDef+0x1>
    3c9a:	60 90 5b 09 	lds	r6, 0x095B	; 0x80095b <timeTillDef+0x2>
    3c9e:	70 90 5c 09 	lds	r7, 0x095C	; 0x80095c <timeTillDef+0x3>
    3ca2:	9b 01       	movw	r18, r22
    3ca4:	ac 01       	movw	r20, r24
    3ca6:	24 19       	sub	r18, r4
    3ca8:	35 09       	sbc	r19, r5
    3caa:	46 09       	sbc	r20, r6
    3cac:	57 09       	sbc	r21, r7
    3cae:	29 01       	movw	r4, r18
    3cb0:	3a 01       	movw	r6, r20
    3cb2:	29 a1       	ldd	r18, Y+33	; 0x21
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	a0 e6       	ldi	r26, 0x60	; 96
    3cb8:	ba ee       	ldi	r27, 0xEA	; 234
    3cba:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    3cbe:	64 15       	cp	r22, r4
    3cc0:	75 05       	cpc	r23, r5
    3cc2:	86 05       	cpc	r24, r6
    3cc4:	97 05       	cpc	r25, r7
    3cc6:	f8 f4       	brcc	.+62     	; 0x3d06 <Defrost+0x184>
    3cc8:	f8 01       	movw	r30, r16
    3cca:	82 85       	ldd	r24, Z+10	; 0x0a
    3ccc:	88 23       	and	r24, r24
    3cce:	d9 f0       	breq	.+54     	; 0x3d06 <Defrost+0x184>
    3cd0:	be 01       	movw	r22, r28
    3cd2:	c8 01       	movw	r24, r16
    3cd4:	0e 94 99 32 	call	0x6532	; 0x6532 <stopDefrost>
    3cd8:	f8 01       	movw	r30, r16
    3cda:	11 86       	std	Z+9, r1	; 0x09
    3cdc:	12 86       	std	Z+10, r1	; 0x0a
    3cde:	21 d8       	rcall	.-4030   	; 0x2d22 <xTaskGetTickCount>
    3ce0:	60 93 59 09 	sts	0x0959, r22	; 0x800959 <timeTillDef>
    3ce4:	70 93 5a 09 	sts	0x095A, r23	; 0x80095a <timeTillDef+0x1>
    3ce8:	80 93 5b 09 	sts	0x095B, r24	; 0x80095b <timeTillDef+0x2>
    3cec:	90 93 5c 09 	sts	0x095C, r25	; 0x80095c <timeTillDef+0x3>
    3cf0:	df 92       	push	r13
    3cf2:	cf 92       	push	r12
    3cf4:	ff 92       	push	r15
    3cf6:	ef 92       	push	r14
    3cf8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3cfc:	0f 90       	pop	r0
    3cfe:	0f 90       	pop	r0
    3d00:	0f 90       	pop	r0
    3d02:	0f 90       	pop	r0
    3d04:	32 c0       	rjmp	.+100    	; 0x3d6a <Defrost+0x1e8>
				else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3d06:	f8 01       	movw	r30, r16
    3d08:	81 85       	ldd	r24, Z+9	; 0x09
    3d0a:	88 23       	and	r24, r24
    3d0c:	71 f1       	breq	.+92     	; 0x3d6a <Defrost+0x1e8>
    3d0e:	6c a5       	ldd	r22, Y+44	; 0x2c
    3d10:	7d a5       	ldd	r23, Y+45	; 0x2d
    3d12:	07 2e       	mov	r0, r23
    3d14:	00 0c       	add	r0, r0
    3d16:	88 0b       	sbc	r24, r24
    3d18:	99 0b       	sbc	r25, r25
    3d1a:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    3d1e:	9b 01       	movw	r18, r22
    3d20:	ac 01       	movw	r20, r24
    3d22:	f8 01       	movw	r30, r16
    3d24:	62 a9       	ldd	r22, Z+50	; 0x32
    3d26:	73 a9       	ldd	r23, Z+51	; 0x33
    3d28:	84 a9       	ldd	r24, Z+52	; 0x34
    3d2a:	95 a9       	ldd	r25, Z+53	; 0x35
    3d2c:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    3d30:	18 16       	cp	r1, r24
    3d32:	dc f4       	brge	.+54     	; 0x3d6a <Defrost+0x1e8>
    3d34:	be 01       	movw	r22, r28
    3d36:	c8 01       	movw	r24, r16
    3d38:	0e 94 99 32 	call	0x6532	; 0x6532 <stopDefrost>
    3d3c:	f8 01       	movw	r30, r16
    3d3e:	11 86       	std	Z+9, r1	; 0x09
    3d40:	12 86       	std	Z+10, r1	; 0x0a
    3d42:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3d46:	60 93 59 09 	sts	0x0959, r22	; 0x800959 <timeTillDef>
    3d4a:	70 93 5a 09 	sts	0x095A, r23	; 0x80095a <timeTillDef+0x1>
    3d4e:	80 93 5b 09 	sts	0x095B, r24	; 0x80095b <timeTillDef+0x2>
    3d52:	90 93 5c 09 	sts	0x095C, r25	; 0x80095c <timeTillDef+0x3>
    3d56:	df 92       	push	r13
    3d58:	cf 92       	push	r12
    3d5a:	ff 92       	push	r15
    3d5c:	ef 92       	push	r14
    3d5e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3d62:	0f 90       	pop	r0
    3d64:	0f 90       	pop	r0
    3d66:	0f 90       	pop	r0
    3d68:	0f 90       	pop	r0
	
			}
			//xSerialxPrintf(&xSerial3Port,"defrost\r\n");
vTaskDelay(2000);
    3d6a:	60 ed       	ldi	r22, 0xD0	; 208
    3d6c:	77 e0       	ldi	r23, 0x07	; 7
    3d6e:	80 e0       	ldi	r24, 0x00	; 0
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	36 d9       	rcall	.-3476   	; 0x2fe0 <vTaskDelay>
//xSerialxPrintf(&xSerial3Port,"Stack_0 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
//portYIELD();			
}
    3d74:	24 cf       	rjmp	.-440    	; 0x3bbe <Defrost+0x3c>

00003d76 <System_2>:
ReadSensors(&Comp_2);
portEXIT_CRITICAL();
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3d76:	c8 e7       	ldi	r28, 0x78	; 120
    3d78:	d9 e0       	ldi	r29, 0x09	; 9
		{
			_err2=Check_Erors(&Comp_2,&EEpromData);
		
			//if(_err2>0 && Comp_1.error==0){Comp_2.error=_err2;Comp_2.countError++;Comp_2.Steps=0;Comp_Stop(&Comp_2);}//if(Comp_2.countError==3)EEpromData.power=0;
			mod_pump(&Comp_2,&EEpromData);
	       if(Comp_2.checkTrv && xTaskGetTickCount()-countTrvTime_2>10000 ){Comp_2.Steps = Fuzzy(&Comp_2,EEpromData.trv_corection_2);countTrvTime_2=xTaskGetTickCount();}
    3d7a:	0f 2e       	mov	r0, r31
    3d7c:	f0 ec       	ldi	r31, 0xC0	; 192
    3d7e:	8f 2e       	mov	r8, r31
    3d80:	f9 e0       	ldi	r31, 0x09	; 9
    3d82:	9f 2e       	mov	r9, r31
    3d84:	f0 2d       	mov	r31, r0
    3d86:	0f 2e       	mov	r0, r31
    3d88:	fe ec       	ldi	r31, 0xCE	; 206
    3d8a:	6f 2e       	mov	r6, r31
    3d8c:	fa e0       	ldi	r31, 0x0A	; 10
    3d8e:	7f 2e       	mov	r7, r31
    3d90:	f0 2d       	mov	r31, r0
portEXIT_CRITICAL();
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
		else if(EEpromData.power==0 && Comp_2.suply){Comp_2.suply=false;Comp_2.error=0;_err2=0;Comp_2.countError=0; xSerialxPrintf(&xSerial3Port,"OFF_System_2\r\n");stopTrvTimer(&Comp_2);Comp_Stop(&Comp_2);}
    3d92:	0f 2e       	mov	r0, r31
    3d94:	f2 ed       	ldi	r31, 0xD2	; 210
    3d96:	cf 2e       	mov	r12, r31
    3d98:	fa e0       	ldi	r31, 0x0A	; 10
    3d9a:	df 2e       	mov	r13, r31
    3d9c:	f0 2d       	mov	r31, r0
    3d9e:	0f 2e       	mov	r0, r31
    3da0:	f6 e5       	ldi	r31, 0x56	; 86
    3da2:	ef 2e       	mov	r14, r31
    3da4:	f2 e0       	ldi	r31, 0x02	; 2
    3da6:	ff 2e       	mov	r15, r31
    3da8:	f0 2d       	mov	r31, r0
    3daa:	06 e1       	ldi	r16, 0x16	; 22
    3dac:	18 e0       	ldi	r17, 0x08	; 8
ReadSensors(&Comp_2);
portEXIT_CRITICAL();
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3dae:	55 24       	eor	r5, r5
    3db0:	53 94       	inc	r5
    3db2:	0f 2e       	mov	r0, r31
    3db4:	f8 e4       	ldi	r31, 0x48	; 72
    3db6:	af 2e       	mov	r10, r31
    3db8:	f2 e0       	ldi	r31, 0x02	; 2
    3dba:	bf 2e       	mov	r11, r31
    3dbc:	f0 2d       	mov	r31, r0
	(void) pvParameters;

	while (1)
	{
		
    	wdt_reset();
    3dbe:	a8 95       	wdr
		//xSerialxPrintf(&xSerial3Port,"System_2_task\r\n");
vTaskSuspend( xHandleFirst );				
    3dc0:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <xHandleFirst>
    3dc4:	90 91 a0 07 	lds	r25, 0x07A0	; 0x8007a0 <xHandleFirst+0x1>
    3dc8:	96 d9       	rcall	.-3284   	; 0x30f6 <vTaskSuspend>
portENTER_CRITICAL();
    3dca:	0f b6       	in	r0, 0x3f	; 63
    3dcc:	f8 94       	cli
    3dce:	0f 92       	push	r0
ReadSensors(&Comp_2);
    3dd0:	82 e6       	ldi	r24, 0x62	; 98
    3dd2:	9a e0       	ldi	r25, 0x0A	; 10
    3dd4:	0e 94 b5 4a 	call	0x956a	; 0x956a <ReadSensors>
portEXIT_CRITICAL();
    3dd8:	0f 90       	pop	r0
    3dda:	0f be       	out	0x3f, r0	; 63
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
    3ddc:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <xHandleFirst>
    3de0:	90 91 a0 07 	lds	r25, 0x07A0	; 0x8007a0 <xHandleFirst+0x1>
    3de4:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <vTaskResume>
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3de8:	8c a1       	ldd	r24, Y+36	; 0x24
    3dea:	81 30       	cpi	r24, 0x01	; 1
    3dec:	a9 f4       	brne	.+42     	; 0x3e18 <System_2+0xa2>
    3dee:	80 91 68 0a 	lds	r24, 0x0A68	; 0x800a68 <Comp_2+0x6>
    3df2:	81 11       	cpse	r24, r1
    3df4:	3a c0       	rjmp	.+116    	; 0x3e6a <System_2+0xf4>
    3df6:	80 91 62 0a 	lds	r24, 0x0A62	; 0x800a62 <Comp_2>
    3dfa:	81 11       	cpse	r24, r1
    3dfc:	74 c0       	rjmp	.+232    	; 0x3ee6 <System_2+0x170>
    3dfe:	50 92 68 0a 	sts	0x0A68, r5	; 0x800a68 <Comp_2+0x6>
    3e02:	bf 92       	push	r11
    3e04:	af 92       	push	r10
    3e06:	1f 93       	push	r17
    3e08:	0f 93       	push	r16
    3e0a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3e0e:	0f 90       	pop	r0
    3e10:	0f 90       	pop	r0
    3e12:	0f 90       	pop	r0
    3e14:	0f 90       	pop	r0
    3e16:	24 c0       	rjmp	.+72     	; 0x3e60 <System_2+0xea>
		else if(EEpromData.power==0 && Comp_2.suply){Comp_2.suply=false;Comp_2.error=0;_err2=0;Comp_2.countError=0; xSerialxPrintf(&xSerial3Port,"OFF_System_2\r\n");stopTrvTimer(&Comp_2);Comp_Stop(&Comp_2);}
    3e18:	81 11       	cpse	r24, r1
    3e1a:	22 c0       	rjmp	.+68     	; 0x3e60 <System_2+0xea>
    3e1c:	80 91 68 0a 	lds	r24, 0x0A68	; 0x800a68 <Comp_2+0x6>
    3e20:	88 23       	and	r24, r24
    3e22:	09 f4       	brne	.+2      	; 0x3e26 <System_2+0xb0>
    3e24:	60 c0       	rjmp	.+192    	; 0x3ee6 <System_2+0x170>
    3e26:	e2 e6       	ldi	r30, 0x62	; 98
    3e28:	fa e0       	ldi	r31, 0x0A	; 10
    3e2a:	16 82       	std	Z+6, r1	; 0x06
    3e2c:	d6 01       	movw	r26, r12
    3e2e:	1d 92       	st	X+, r1
    3e30:	1c 92       	st	X, r1
    3e32:	10 92 1e 0b 	sts	0x0B1E, r1	; 0x800b1e <_err2+0x1>
    3e36:	10 92 1d 0b 	sts	0x0B1D, r1	; 0x800b1d <_err2>
    3e3a:	11 8a       	std	Z+17, r1	; 0x11
    3e3c:	ff 92       	push	r15
    3e3e:	ef 92       	push	r14
    3e40:	1f 93       	push	r17
    3e42:	0f 93       	push	r16
    3e44:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3e48:	82 e6       	ldi	r24, 0x62	; 98
    3e4a:	9a e0       	ldi	r25, 0x0A	; 10
    3e4c:	0e 94 66 4f 	call	0x9ecc	; 0x9ecc <stopTrvTimer>
    3e50:	82 e6       	ldi	r24, 0x62	; 98
    3e52:	9a e0       	ldi	r25, 0x0A	; 10
    3e54:	0e 94 07 36 	call	0x6c0e	; 0x6c0e <Comp_Stop>
    3e58:	0f 90       	pop	r0
    3e5a:	0f 90       	pop	r0
    3e5c:	0f 90       	pop	r0
    3e5e:	0f 90       	pop	r0
	
		if(Comp_2.suply && Comp_2.countError<3)
    3e60:	80 91 68 0a 	lds	r24, 0x0A68	; 0x800a68 <Comp_2+0x6>
    3e64:	88 23       	and	r24, r24
    3e66:	09 f4       	brne	.+2      	; 0x3e6a <System_2+0xf4>
    3e68:	3e c0       	rjmp	.+124    	; 0x3ee6 <System_2+0x170>
    3e6a:	80 91 73 0a 	lds	r24, 0x0A73	; 0x800a73 <Comp_2+0x11>
    3e6e:	83 30       	cpi	r24, 0x03	; 3
    3e70:	d0 f5       	brcc	.+116    	; 0x3ee6 <System_2+0x170>
		{
			_err2=Check_Erors(&Comp_2,&EEpromData);
    3e72:	be 01       	movw	r22, r28
    3e74:	82 e6       	ldi	r24, 0x62	; 98
    3e76:	9a e0       	ldi	r25, 0x0A	; 10
    3e78:	ff d2       	rcall	.+1534   	; 0x4478 <Check_Erors>
    3e7a:	90 93 1e 0b 	sts	0x0B1E, r25	; 0x800b1e <_err2+0x1>
    3e7e:	80 93 1d 0b 	sts	0x0B1D, r24	; 0x800b1d <_err2>
		
			//if(_err2>0 && Comp_1.error==0){Comp_2.error=_err2;Comp_2.countError++;Comp_2.Steps=0;Comp_Stop(&Comp_2);}//if(Comp_2.countError==3)EEpromData.power=0;
			mod_pump(&Comp_2,&EEpromData);
    3e82:	be 01       	movw	r22, r28
    3e84:	82 e6       	ldi	r24, 0x62	; 98
    3e86:	9a e0       	ldi	r25, 0x0A	; 10
    3e88:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <mod_pump>
	       if(Comp_2.checkTrv && xTaskGetTickCount()-countTrvTime_2>10000 ){Comp_2.Steps = Fuzzy(&Comp_2,EEpromData.trv_corection_2);countTrvTime_2=xTaskGetTickCount();}
    3e8c:	80 91 63 0a 	lds	r24, 0x0A63	; 0x800a63 <Comp_2+0x1>
    3e90:	88 23       	and	r24, r24
    3e92:	49 f1       	breq	.+82     	; 0x3ee6 <System_2+0x170>
    3e94:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3e98:	20 91 95 07 	lds	r18, 0x0795	; 0x800795 <countTrvTime_2>
    3e9c:	30 91 96 07 	lds	r19, 0x0796	; 0x800796 <countTrvTime_2+0x1>
    3ea0:	40 91 97 07 	lds	r20, 0x0797	; 0x800797 <countTrvTime_2+0x2>
    3ea4:	50 91 98 07 	lds	r21, 0x0798	; 0x800798 <countTrvTime_2+0x3>
    3ea8:	dc 01       	movw	r26, r24
    3eaa:	cb 01       	movw	r24, r22
    3eac:	82 1b       	sub	r24, r18
    3eae:	93 0b       	sbc	r25, r19
    3eb0:	a4 0b       	sbc	r26, r20
    3eb2:	b5 0b       	sbc	r27, r21
    3eb4:	81 31       	cpi	r24, 0x11	; 17
    3eb6:	97 42       	sbci	r25, 0x27	; 39
    3eb8:	a1 05       	cpc	r26, r1
    3eba:	b1 05       	cpc	r27, r1
    3ebc:	a0 f0       	brcs	.+40     	; 0x3ee6 <System_2+0x170>
    3ebe:	d4 01       	movw	r26, r8
    3ec0:	6d 91       	ld	r22, X+
    3ec2:	7c 91       	ld	r23, X
    3ec4:	82 e6       	ldi	r24, 0x62	; 98
    3ec6:	9a e0       	ldi	r25, 0x0A	; 10
    3ec8:	0e 94 b5 4f 	call	0x9f6a	; 0x9f6a <Fuzzy>
    3ecc:	f3 01       	movw	r30, r6
    3ece:	91 83       	std	Z+1, r25	; 0x01
    3ed0:	80 83       	st	Z, r24
    3ed2:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3ed6:	60 93 95 07 	sts	0x0795, r22	; 0x800795 <countTrvTime_2>
    3eda:	70 93 96 07 	sts	0x0796, r23	; 0x800796 <countTrvTime_2+0x1>
    3ede:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <countTrvTime_2+0x2>
    3ee2:	90 93 98 07 	sts	0x0798, r25	; 0x800798 <countTrvTime_2+0x3>
		}

		vTaskDelay(1000);
    3ee6:	68 ee       	ldi	r22, 0xE8	; 232
    3ee8:	73 e0       	ldi	r23, 0x03	; 3
    3eea:	80 e0       	ldi	r24, 0x00	; 0
    3eec:	90 e0       	ldi	r25, 0x00	; 0
    3eee:	78 d8       	rcall	.-3856   	; 0x2fe0 <vTaskDelay>
		//xSerialxPrintf(&xSerial3Port,"Stack_2 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
		//portYIELD();
		//xSerialxPrintf(&xSerial3Port,"Stack2 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
	}
    3ef0:	66 cf       	rjmp	.-308    	; 0x3dbe <System_2+0x48>

00003ef2 <System_1>:
portENTER_CRITICAL();
ReadSensors(&Comp_1);
portEXIT_CRITICAL();
//EEpromData.AireToWater==1 &&

		if(EEpromData.NombComp==2 )
    3ef2:	c8 e7       	ldi	r28, 0x78	; 120
    3ef4:	d9 e0       	ldi	r29, 0x09	; 9
			vTaskResume( xHandleSecond );
			stop_second=false;
			
		}
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
    3ef6:	77 24       	eor	r7, r7
    3ef8:	73 94       	inc	r7
				
			//  if(_err1>0 && Comp_1.error==0){Comp_1.error=_err1;Comp_1.countError++;Comp_1.Steps=0;Comp_Stop(&Comp_1);xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);}//
				
			 mod_pump(&Comp_1,&EEpromData);
			//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);
			if(Comp_1.checkTrv && xTaskGetTickCount()-countTrvTime_1>10000 ){Comp_1.Steps = Fuzzy(&Comp_1,EEpromData.trv_corection_1);countTrvTime_1=xTaskGetTickCount();}
    3efa:	0f 2e       	mov	r0, r31
    3efc:	f4 e4       	ldi	r31, 0x44	; 68
    3efe:	8f 2e       	mov	r8, r31
    3f00:	fa e0       	ldi	r31, 0x0A	; 10
    3f02:	9f 2e       	mov	r9, r31
    3f04:	f0 2d       	mov	r31, r0
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
//xSerialxPrintf(&xSerial3Port,"temp_out =%f\r\n",Comp_1.Temp_Out);
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
		else if(EEpromData.power==0 && Comp_1.suply){Comp_1.suply=false;PORTA &= 0x0;Comp_1.error=0;_err1=0;Comp_1.countError=0;xSerialxPrintf(&xSerial3Port,"OFF_System_1\r\n"); stopTrvTimer(&Comp_1);Comp_Stop(&Comp_1);}
    3f06:	0f 2e       	mov	r0, r31
    3f08:	f8 e4       	ldi	r31, 0x48	; 72
    3f0a:	cf 2e       	mov	r12, r31
    3f0c:	fa e0       	ldi	r31, 0x0A	; 10
    3f0e:	df 2e       	mov	r13, r31
    3f10:	f0 2d       	mov	r31, r0
    3f12:	0f 2e       	mov	r0, r31
    3f14:	f3 e7       	ldi	r31, 0x73	; 115
    3f16:	ef 2e       	mov	r14, r31
    3f18:	f2 e0       	ldi	r31, 0x02	; 2
    3f1a:	ff 2e       	mov	r15, r31
    3f1c:	f0 2d       	mov	r31, r0
    3f1e:	06 e1       	ldi	r16, 0x16	; 22
    3f20:	18 e0       	ldi	r17, 0x08	; 8
		}
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
//xSerialxPrintf(&xSerial3Port,"temp_out =%f\r\n",Comp_1.Temp_Out);
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
    3f22:	0f 2e       	mov	r0, r31
    3f24:	f5 e6       	ldi	r31, 0x65	; 101
    3f26:	af 2e       	mov	r10, r31
    3f28:	f2 e0       	ldi	r31, 0x02	; 2
    3f2a:	bf 2e       	mov	r11, r31
    3f2c:	f0 2d       	mov	r31, r0
	
	
	while (1)
	{

		wdt_reset();
    3f2e:	a8 95       	wdr
	//xSerialxPrintf(&xSerial3Port,"System_1_task\r\n");
vTaskSuspend( xHandleSecond );		
    3f30:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <xHandleSecond>
    3f34:	90 91 9e 07 	lds	r25, 0x079E	; 0x80079e <xHandleSecond+0x1>
    3f38:	de d8       	rcall	.-3652   	; 0x30f6 <vTaskSuspend>
portENTER_CRITICAL();
    3f3a:	0f b6       	in	r0, 0x3f	; 63
    3f3c:	f8 94       	cli
    3f3e:	0f 92       	push	r0
ReadSensors(&Comp_1);
    3f40:	88 ed       	ldi	r24, 0xD8	; 216
    3f42:	99 e0       	ldi	r25, 0x09	; 9
    3f44:	0e 94 b5 4a 	call	0x956a	; 0x956a <ReadSensors>
portEXIT_CRITICAL();
    3f48:	0f 90       	pop	r0
    3f4a:	0f be       	out	0x3f, r0	; 63
//EEpromData.AireToWater==1 &&

		if(EEpromData.NombComp==2 )
    3f4c:	88 a1       	ldd	r24, Y+32	; 0x20
    3f4e:	82 30       	cpi	r24, 0x02	; 2
    3f50:	61 f4       	brne	.+24     	; 0x3f6a <System_1+0x78>
		{
			vTaskResume( xHandleSecond );
    3f52:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <xHandleSecond>
    3f56:	90 91 9e 07 	lds	r25, 0x079E	; 0x80079e <xHandleSecond+0x1>
    3f5a:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <vTaskResume>
			stop_second=false;
    3f5e:	10 92 2e 0b 	sts	0x0B2E, r1	; 0x800b2e <stop_second>
			
		}
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
    3f62:	88 a1       	ldd	r24, Y+32	; 0x20
    3f64:	81 30       	cpi	r24, 0x01	; 1
    3f66:	69 f4       	brne	.+26     	; 0x3f82 <System_1+0x90>
    3f68:	06 c0       	rjmp	.+12     	; 0x3f76 <System_1+0x84>
    3f6a:	81 30       	cpi	r24, 0x01	; 1
    3f6c:	51 f4       	brne	.+20     	; 0x3f82 <System_1+0x90>
    3f6e:	80 91 2e 0b 	lds	r24, 0x0B2E	; 0x800b2e <stop_second>
    3f72:	81 11       	cpse	r24, r1
    3f74:	06 c0       	rjmp	.+12     	; 0x3f82 <System_1+0x90>
    3f76:	70 92 2e 0b 	sts	0x0B2E, r7	; 0x800b2e <stop_second>
    3f7a:	82 e6       	ldi	r24, 0x62	; 98
    3f7c:	9a e0       	ldi	r25, 0x0A	; 10
    3f7e:	0e 94 07 36 	call	0x6c0e	; 0x6c0e <Comp_Stop>
//xSerialxPrintf(&xSerial3Port,"temp_out =%f\r\n",Comp_1.Temp_Out);
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
    3f82:	8c a1       	ldd	r24, Y+36	; 0x24
    3f84:	81 30       	cpi	r24, 0x01	; 1
    3f86:	f9 f4       	brne	.+62     	; 0x3fc6 <System_1+0xd4>
    3f88:	80 91 de 09 	lds	r24, 0x09DE	; 0x8009de <Comp_1+0x6>
    3f8c:	81 11       	cpse	r24, r1
    3f8e:	46 c0       	rjmp	.+140    	; 0x401c <System_1+0x12a>
    3f90:	80 91 d8 09 	lds	r24, 0x09D8	; 0x8009d8 <Comp_1>
    3f94:	81 11       	cpse	r24, r1
    3f96:	88 c0       	rjmp	.+272    	; 0x40a8 <System_1+0x1b6>
    3f98:	70 92 de 09 	sts	0x09DE, r7	; 0x8009de <Comp_1+0x6>
    3f9c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3fa0:	60 93 59 09 	sts	0x0959, r22	; 0x800959 <timeTillDef>
    3fa4:	70 93 5a 09 	sts	0x095A, r23	; 0x80095a <timeTillDef+0x1>
    3fa8:	80 93 5b 09 	sts	0x095B, r24	; 0x80095b <timeTillDef+0x2>
    3fac:	90 93 5c 09 	sts	0x095C, r25	; 0x80095c <timeTillDef+0x3>
    3fb0:	bf 92       	push	r11
    3fb2:	af 92       	push	r10
    3fb4:	1f 93       	push	r17
    3fb6:	0f 93       	push	r16
    3fb8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3fbc:	0f 90       	pop	r0
    3fbe:	0f 90       	pop	r0
    3fc0:	0f 90       	pop	r0
    3fc2:	0f 90       	pop	r0
    3fc4:	26 c0       	rjmp	.+76     	; 0x4012 <System_1+0x120>
		else if(EEpromData.power==0 && Comp_1.suply){Comp_1.suply=false;PORTA &= 0x0;Comp_1.error=0;_err1=0;Comp_1.countError=0;xSerialxPrintf(&xSerial3Port,"OFF_System_1\r\n"); stopTrvTimer(&Comp_1);Comp_Stop(&Comp_1);}
    3fc6:	81 11       	cpse	r24, r1
    3fc8:	24 c0       	rjmp	.+72     	; 0x4012 <System_1+0x120>
    3fca:	80 91 de 09 	lds	r24, 0x09DE	; 0x8009de <Comp_1+0x6>
    3fce:	88 23       	and	r24, r24
    3fd0:	09 f4       	brne	.+2      	; 0x3fd4 <System_1+0xe2>
    3fd2:	6a c0       	rjmp	.+212    	; 0x40a8 <System_1+0x1b6>
    3fd4:	e8 ed       	ldi	r30, 0xD8	; 216
    3fd6:	f9 e0       	ldi	r31, 0x09	; 9
    3fd8:	16 82       	std	Z+6, r1	; 0x06
    3fda:	82 b1       	in	r24, 0x02	; 2
    3fdc:	12 b8       	out	0x02, r1	; 2
    3fde:	d6 01       	movw	r26, r12
    3fe0:	1d 92       	st	X+, r1
    3fe2:	1c 92       	st	X, r1
    3fe4:	10 92 eb 0a 	sts	0x0AEB, r1	; 0x800aeb <_err1+0x1>
    3fe8:	10 92 ea 0a 	sts	0x0AEA, r1	; 0x800aea <_err1>
    3fec:	11 8a       	std	Z+17, r1	; 0x11
    3fee:	ff 92       	push	r15
    3ff0:	ef 92       	push	r14
    3ff2:	1f 93       	push	r17
    3ff4:	0f 93       	push	r16
    3ff6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3ffa:	88 ed       	ldi	r24, 0xD8	; 216
    3ffc:	99 e0       	ldi	r25, 0x09	; 9
    3ffe:	0e 94 66 4f 	call	0x9ecc	; 0x9ecc <stopTrvTimer>
    4002:	88 ed       	ldi	r24, 0xD8	; 216
    4004:	99 e0       	ldi	r25, 0x09	; 9
    4006:	0e 94 07 36 	call	0x6c0e	; 0x6c0e <Comp_Stop>
    400a:	0f 90       	pop	r0
    400c:	0f 90       	pop	r0
    400e:	0f 90       	pop	r0
    4010:	0f 90       	pop	r0
		//xSerialxPrintf(&xSerial3Port,"mod =%d\r\n",EEpromData.AireToWater);
		//xSerialxPrintf(&xSerial3Port,"TimeBetweenDef =%d\r\n",EEpromData.TimeBetweenDef);
		
	
		
		if(Comp_1.suply &&  Comp_1.countError<3)
    4012:	80 91 de 09 	lds	r24, 0x09DE	; 0x8009de <Comp_1+0x6>
    4016:	88 23       	and	r24, r24
    4018:	09 f4       	brne	.+2      	; 0x401c <System_1+0x12a>
    401a:	46 c0       	rjmp	.+140    	; 0x40a8 <System_1+0x1b6>
    401c:	80 91 e9 09 	lds	r24, 0x09E9	; 0x8009e9 <Comp_1+0x11>
    4020:	83 30       	cpi	r24, 0x03	; 3
    4022:	08 f0       	brcs	.+2      	; 0x4026 <System_1+0x134>
    4024:	41 c0       	rjmp	.+130    	; 0x40a8 <System_1+0x1b6>
			if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
			else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
			
			}
			*/
			if(!init_system){_err1=Check_Erors(&Comp_1,&EEpromData);ADE7758_resetStatus();} else init_system=false;
    4026:	80 91 0a 0b 	lds	r24, 0x0B0A	; 0x800b0a <init_system>
    402a:	81 11       	cpse	r24, r1
    402c:	0a c0       	rjmp	.+20     	; 0x4042 <System_1+0x150>
    402e:	be 01       	movw	r22, r28
    4030:	88 ed       	ldi	r24, 0xD8	; 216
    4032:	99 e0       	ldi	r25, 0x09	; 9
    4034:	21 d2       	rcall	.+1090   	; 0x4478 <Check_Erors>
    4036:	90 93 eb 0a 	sts	0x0AEB, r25	; 0x800aeb <_err1+0x1>
    403a:	80 93 ea 0a 	sts	0x0AEA, r24	; 0x800aea <_err1>
    403e:	19 d2       	rcall	.+1074   	; 0x4472 <ADE7758_resetStatus>
    4040:	02 c0       	rjmp	.+4      	; 0x4046 <System_1+0x154>
    4042:	10 92 0a 0b 	sts	0x0B0A, r1	; 0x800b0a <init_system>
				
			//  if(_err1>0 && Comp_1.error==0){Comp_1.error=_err1;Comp_1.countError++;Comp_1.Steps=0;Comp_Stop(&Comp_1);xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);}//
				
			 mod_pump(&Comp_1,&EEpromData);
    4046:	be 01       	movw	r22, r28
    4048:	88 ed       	ldi	r24, 0xD8	; 216
    404a:	99 e0       	ldi	r25, 0x09	; 9
    404c:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <mod_pump>
			//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);
			if(Comp_1.checkTrv && xTaskGetTickCount()-countTrvTime_1>10000 ){Comp_1.Steps = Fuzzy(&Comp_1,EEpromData.trv_corection_1);countTrvTime_1=xTaskGetTickCount();}
    4050:	80 91 d9 09 	lds	r24, 0x09D9	; 0x8009d9 <Comp_1+0x1>
    4054:	88 23       	and	r24, r24
    4056:	41 f1       	breq	.+80     	; 0x40a8 <System_1+0x1b6>
    4058:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    405c:	20 91 99 07 	lds	r18, 0x0799	; 0x800799 <countTrvTime_1>
    4060:	30 91 9a 07 	lds	r19, 0x079A	; 0x80079a <countTrvTime_1+0x1>
    4064:	40 91 9b 07 	lds	r20, 0x079B	; 0x80079b <countTrvTime_1+0x2>
    4068:	50 91 9c 07 	lds	r21, 0x079C	; 0x80079c <countTrvTime_1+0x3>
    406c:	dc 01       	movw	r26, r24
    406e:	cb 01       	movw	r24, r22
    4070:	82 1b       	sub	r24, r18
    4072:	93 0b       	sbc	r25, r19
    4074:	a4 0b       	sbc	r26, r20
    4076:	b5 0b       	sbc	r27, r21
    4078:	81 31       	cpi	r24, 0x11	; 17
    407a:	97 42       	sbci	r25, 0x27	; 39
    407c:	a1 05       	cpc	r26, r1
    407e:	b1 05       	cpc	r27, r1
    4080:	98 f0       	brcs	.+38     	; 0x40a8 <System_1+0x1b6>
    4082:	6a a9       	ldd	r22, Y+50	; 0x32
    4084:	7b a9       	ldd	r23, Y+51	; 0x33
    4086:	88 ed       	ldi	r24, 0xD8	; 216
    4088:	99 e0       	ldi	r25, 0x09	; 9
    408a:	0e 94 b5 4f 	call	0x9f6a	; 0x9f6a <Fuzzy>
    408e:	d4 01       	movw	r26, r8
    4090:	8d 93       	st	X+, r24
    4092:	9c 93       	st	X, r25
    4094:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    4098:	60 93 99 07 	sts	0x0799, r22	; 0x800799 <countTrvTime_1>
    409c:	70 93 9a 07 	sts	0x079A, r23	; 0x80079a <countTrvTime_1+0x1>
    40a0:	80 93 9b 07 	sts	0x079B, r24	; 0x80079b <countTrvTime_1+0x2>
    40a4:	90 93 9c 07 	sts	0x079C, r25	; 0x80079c <countTrvTime_1+0x3>
			
			
		}
		
		vTaskDelay(1000);
    40a8:	68 ee       	ldi	r22, 0xE8	; 232
    40aa:	73 e0       	ldi	r23, 0x03	; 3
    40ac:	80 e0       	ldi	r24, 0x00	; 0
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <vTaskDelay>
		//xSerialxPrintf(&xSerial3Port,"Stack1 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
	}
    40b4:	3c cf       	rjmp	.-392    	; 0x3f2e <System_1+0x3c>

000040b6 <ModBus>:

	while (1)
	{   
		//wdt_reset();
		//xSerialxPrintf(&xSerial3Port,"ModBus_task\r\n");
		if (xSemaphoreTake(xMbBinarySemaphore, portMAX_DELAY) == pdTRUE )
    40b6:	4f ef       	ldi	r20, 0xFF	; 255
    40b8:	5f ef       	ldi	r21, 0xFF	; 255
    40ba:	ba 01       	movw	r22, r20
    40bc:	80 91 0b 0b 	lds	r24, 0x0B0B	; 0x800b0b <xMbBinarySemaphore>
    40c0:	90 91 0c 0b 	lds	r25, 0x0B0C	; 0x800b0c <xMbBinarySemaphore+0x1>
    40c4:	0e 94 8f 0b 	call	0x171e	; 0x171e <xQueueSemaphoreTake>
    40c8:	81 30       	cpi	r24, 0x01	; 1
    40ca:	a9 f7       	brne	.-22     	; 0x40b6 <ModBus>
		{
			modbus_update();
    40cc:	d9 d7       	rcall	.+4018   	; 0x5080 <modbus_update>
			//xSerialxPrintf(&xSerial3Port,"Interrupt\r\n");
			if(port_0){xSerialRxFlush( &xSerialPort );port_0=false;indexBuf=0;}
    40ce:	80 91 25 0b 	lds	r24, 0x0B25	; 0x800b25 <port_0>
    40d2:	88 23       	and	r24, r24
    40d4:	49 f0       	breq	.+18     	; 0x40e8 <ModBus+0x32>
    40d6:	8f ec       	ldi	r24, 0xCF	; 207
    40d8:	97 e0       	ldi	r25, 0x07	; 7
    40da:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xSerialRxFlush>
    40de:	10 92 25 0b 	sts	0x0B25, r1	; 0x800b25 <port_0>
    40e2:	10 92 15 08 	sts	0x0815, r1	; 0x800815 <indexBuf>
    40e6:	e7 cf       	rjmp	.-50     	; 0x40b6 <ModBus>
			else if(port_3){xSerialRxFlush( &xSerial3Port );port_3=false;indexBuf=0;}
    40e8:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <port_3>
    40ec:	88 23       	and	r24, r24
    40ee:	19 f3       	breq	.-58     	; 0x40b6 <ModBus>
    40f0:	86 e1       	ldi	r24, 0x16	; 22
    40f2:	98 e0       	ldi	r25, 0x08	; 8
    40f4:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xSerialRxFlush>
    40f8:	10 92 77 09 	sts	0x0977, r1	; 0x800977 <port_3>
    40fc:	10 92 15 08 	sts	0x0815, r1	; 0x800815 <indexBuf>
    4100:	da cf       	rjmp	.-76     	; 0x40b6 <ModBus>

00004102 <main>:
//--------------------------------------------------------
volatile long  countTimer;
int main(void) __attribute__ ((OS_main));

int main(void)
{
    4102:	cd b7       	in	r28, 0x3d	; 61
    4104:	de b7       	in	r29, 0x3e	; 62
    4106:	a2 97       	sbiw	r28, 0x22	; 34
    4108:	de bf       	out	0x3e, r29	; 62
    410a:	cd bf       	out	0x3d, r28	; 61

	initPins();
    410c:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <initPins>
	ADE7758_Init();
    4110:	93 d1       	rcall	.+806    	; 0x4438 <ADE7758_Init>
	timer_1_Init();
    4112:	59 d4       	rcall	.+2226   	; 0x49c6 <timer_1_Init>
    4114:	81 e0       	ldi	r24, 0x01	; 1
	Comp_1.Index=1;
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	90 93 4b 0a 	sts	0x0A4B, r25	; 0x800a4b <Comp_1+0x73>
    411c:	80 93 4a 0a 	sts	0x0A4A, r24	; 0x800a4a <Comp_1+0x72>
    4120:	82 e0       	ldi	r24, 0x02	; 2
	Comp_2.Index=2;
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	90 93 d5 0a 	sts	0x0AD5, r25	; 0x800ad5 <Comp_2+0x73>
    4128:	80 93 d4 0a 	sts	0x0AD4, r24	; 0x800ad4 <Comp_2+0x72>
    412c:	80 e0       	ldi	r24, 0x00	; 0
	//eeprom_write_block((void*)&EEpromData, ( void*)0, sizeof (xEEdata));
	current_time = time(NULL);
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    4134:	60 93 73 09 	sts	0x0973, r22	; 0x800973 <current_time>
    4138:	70 93 74 09 	sts	0x0974, r23	; 0x800974 <current_time+0x1>
    413c:	80 93 75 09 	sts	0x0975, r24	; 0x800975 <current_time+0x2>
    4140:	90 93 76 09 	sts	0x0976, r25	; 0x800976 <current_time+0x3>
    4144:	ee 24       	eor	r14, r14
	xSerialPort = xSerialPortInitMinimal( USART0, 9600, portSERIAL_BUFFER_TX, portSERIAL_BUFFER_RX);
    4146:	ea 94       	dec	r14
    4148:	f1 2c       	mov	r15, r1
    414a:	0f ef       	ldi	r16, 0xFF	; 255
    414c:	10 e0       	ldi	r17, 0x00	; 0
    414e:	20 e8       	ldi	r18, 0x80	; 128
    4150:	35 e2       	ldi	r19, 0x25	; 37
    4152:	40 e0       	ldi	r20, 0x00	; 0
    4154:	50 e0       	ldi	r21, 0x00	; 0
    4156:	60 e0       	ldi	r22, 0x00	; 0
    4158:	ce 01       	movw	r24, r28
    415a:	01 96       	adiw	r24, 0x01	; 1
    415c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <xSerialPortInitMinimal>
    4160:	82 e2       	ldi	r24, 0x22	; 34
    4162:	fe 01       	movw	r30, r28
    4164:	31 96       	adiw	r30, 0x01	; 1
    4166:	af ec       	ldi	r26, 0xCF	; 207
    4168:	b7 e0       	ldi	r27, 0x07	; 7
    416a:	01 90       	ld	r0, Z+
    416c:	0d 92       	st	X+, r0
    416e:	8a 95       	dec	r24
    4170:	e1 f7       	brne	.-8      	; 0x416a <main+0x68>
    4172:	20 e8       	ldi	r18, 0x80	; 128
	xSerial3Port = xSerialPortInitMinimal( USART3, 9600, portSERIAL_BUFFER_TX, portSERIAL_BUFFER_RX);
    4174:	35 e2       	ldi	r19, 0x25	; 37
    4176:	40 e0       	ldi	r20, 0x00	; 0
    4178:	50 e0       	ldi	r21, 0x00	; 0
    417a:	66 e0       	ldi	r22, 0x06	; 6
    417c:	ce 01       	movw	r24, r28
    417e:	01 96       	adiw	r24, 0x01	; 1
    4180:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <xSerialPortInitMinimal>
    4184:	82 e2       	ldi	r24, 0x22	; 34
    4186:	fe 01       	movw	r30, r28
    4188:	31 96       	adiw	r30, 0x01	; 1
    418a:	a6 e1       	ldi	r26, 0x16	; 22
    418c:	b8 e0       	ldi	r27, 0x08	; 8
    418e:	01 90       	ld	r0, Z+
    4190:	0d 92       	st	X+, r0
    4192:	8a 95       	dec	r24
    4194:	e1 f7       	brne	.-8      	; 0x418e <main+0x8c>
    4196:	43 e0       	ldi	r20, 0x03	; 3
	vSemaphoreCreateBinary(xMbBinarySemaphore);
    4198:	60 e0       	ldi	r22, 0x00	; 0
    419a:	81 e0       	ldi	r24, 0x01	; 1
    419c:	0e 94 a7 09 	call	0x134e	; 0x134e <xQueueGenericCreate>
    41a0:	90 93 0c 0b 	sts	0x0B0C, r25	; 0x800b0c <xMbBinarySemaphore+0x1>
    41a4:	80 93 0b 0b 	sts	0x0B0B, r24	; 0x800b0b <xMbBinarySemaphore>
    41a8:	00 97       	sbiw	r24, 0x00	; 0
    41aa:	41 f0       	breq	.+16     	; 0x41bc <main+0xba>
    41ac:	00 e0       	ldi	r16, 0x00	; 0
    41ae:	20 e0       	ldi	r18, 0x00	; 0
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	a9 01       	movw	r20, r18
    41b4:	60 e0       	ldi	r22, 0x00	; 0
    41b6:	70 e0       	ldi	r23, 0x00	; 0
    41b8:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    41bc:	40 e6       	ldi	r20, 0x60	; 96

    
	eeprom_read_block((void*)&EEpromData, (const void*)0, sizeof (xEEdata));
    41be:	50 e0       	ldi	r21, 0x00	; 0
    41c0:	60 e0       	ldi	r22, 0x00	; 0
    41c2:	70 e0       	ldi	r23, 0x00	; 0
    41c4:	88 e7       	ldi	r24, 0x78	; 120
    41c6:	99 e0       	ldi	r25, 0x09	; 9
    41c8:	0e 94 0c 5b 	call	0xb618	; 0xb618 <eeprom_read_block>
    41cc:	88 ed       	ldi	r24, 0xD8	; 216
	activateTimers(&Comp_1);
    41ce:	99 e0       	ldi	r25, 0x09	; 9
    41d0:	0e 94 93 30 	call	0x6126	; 0x6126 <activateTimers>
    41d4:	82 e6       	ldi	r24, 0x62	; 98
	activateTimers(&Comp_2);
    41d6:	9a e0       	ldi	r25, 0x0A	; 10
    41d8:	0e 94 93 30 	call	0x6126	; 0x6126 <activateTimers>
    41dc:	88 ed       	ldi	r24, 0xD8	; 216
	activateTrvTimer(&Comp_1);
    41de:	99 e0       	ldi	r25, 0x09	; 9
    41e0:	0e 94 f0 4e 	call	0x9de0	; 0x9de0 <activateTrvTimer>
    41e4:	82 e6       	ldi	r24, 0x62	; 98
	activateTrvTimer(&Comp_2);
    41e6:	9a e0       	ldi	r25, 0x0A	; 10
    41e8:	0e 94 f0 4e 	call	0x9de0	; 0x9de0 <activateTrvTimer>
    41ec:	81 e0       	ldi	r24, 0x01	; 1
	init_system=true;
    41ee:	80 93 0a 0b 	sts	0x0B0A, r24	; 0x800b0a <init_system>
    41f2:	80 91 aa 09 	lds	r24, 0x09AA	; 0x8009aa <EEpromData+0x32>
	old_corection_1=EEpromData.trv_corection_1;
    41f6:	90 91 ab 09 	lds	r25, 0x09AB	; 0x8009ab <EEpromData+0x33>
    41fa:	90 93 f1 0a 	sts	0x0AF1, r25	; 0x800af1 <old_corection_1+0x1>
    41fe:	80 93 f0 0a 	sts	0x0AF0, r24	; 0x800af0 <old_corection_1>
    4202:	80 91 c0 09 	lds	r24, 0x09C0	; 0x8009c0 <EEpromData+0x48>
	old_corection_2=EEpromData.trv_corection_2;
    4206:	90 91 c1 09 	lds	r25, 0x09C1	; 0x8009c1 <EEpromData+0x49>
    420a:	90 93 61 0a 	sts	0x0A61, r25	; 0x800a61 <old_corection_2+0x1>
    420e:	80 93 60 0a 	sts	0x0A60, r24	; 0x800a60 <old_corection_2>
    4212:	88 e7       	ldi	r24, 0x78	; 120
	Comp_1.modeOfPump=Comp_2.modeOfPump=selmode(&EEpromData);
    4214:	99 e0       	ldi	r25, 0x09	; 9
    4216:	0e 94 83 33 	call	0x6706	; 0x6706 <selmode>
    421a:	80 93 72 0a 	sts	0x0A72, r24	; 0x800a72 <Comp_2+0x10>
    421e:	80 93 e8 09 	sts	0x09E8, r24	; 0x8009e8 <Comp_1+0x10>
    4222:	99 e2       	ldi	r25, 0x29	; 41
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    4224:	88 e1       	ldi	r24, 0x18	; 24
    4226:	0f b6       	in	r0, 0x3f	; 63
    4228:	f8 94       	cli
    422a:	a8 95       	wdr
    422c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    4230:	0f be       	out	0x3f, r0	; 63
    4232:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    4236:	78 94       	sei
	wdt_enable(WDTO_8S);
	//-------------------------------------
	sei(); 
    4238:	e1 2c       	mov	r14, r1
	//-------------------------------------
	xTaskCreate(ModBus,(const portCHAR *)"ModBus",256,NULL,2, NULL );
    423a:	f1 2c       	mov	r15, r1
    423c:	02 e0       	ldi	r16, 0x02	; 2
    423e:	20 e0       	ldi	r18, 0x00	; 0
    4240:	30 e0       	ldi	r19, 0x00	; 0
    4242:	40 e0       	ldi	r20, 0x00	; 0
    4244:	51 e0       	ldi	r21, 0x01	; 1
    4246:	62 e8       	ldi	r22, 0x82	; 130
    4248:	72 e0       	ldi	r23, 0x02	; 2
    424a:	8b e5       	ldi	r24, 0x5B	; 91
    424c:	90 e2       	ldi	r25, 0x20	; 32
    424e:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    4252:	0f 2e       	mov	r0, r31
	xTaskCreate(System_1,(const portCHAR *)"System_1",512,NULL,0, &xHandleFirst );
    4254:	ff e9       	ldi	r31, 0x9F	; 159
    4256:	ef 2e       	mov	r14, r31
    4258:	f7 e0       	ldi	r31, 0x07	; 7
    425a:	ff 2e       	mov	r15, r31
    425c:	f0 2d       	mov	r31, r0
    425e:	00 e0       	ldi	r16, 0x00	; 0
    4260:	20 e0       	ldi	r18, 0x00	; 0
    4262:	30 e0       	ldi	r19, 0x00	; 0
    4264:	40 e0       	ldi	r20, 0x00	; 0
    4266:	52 e0       	ldi	r21, 0x02	; 2
    4268:	69 e8       	ldi	r22, 0x89	; 137
    426a:	72 e0       	ldi	r23, 0x02	; 2
    426c:	89 e7       	ldi	r24, 0x79	; 121
    426e:	9f e1       	ldi	r25, 0x1F	; 31
    4270:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    4274:	0f 2e       	mov	r0, r31
	xTaskCreate(System_2,(const portCHAR *)"System_2",512,NULL,0, &xHandleSecond );
    4276:	fd e9       	ldi	r31, 0x9D	; 157
    4278:	ef 2e       	mov	r14, r31
    427a:	f7 e0       	ldi	r31, 0x07	; 7
    427c:	ff 2e       	mov	r15, r31
    427e:	f0 2d       	mov	r31, r0
    4280:	20 e0       	ldi	r18, 0x00	; 0
    4282:	30 e0       	ldi	r19, 0x00	; 0
    4284:	40 e0       	ldi	r20, 0x00	; 0
    4286:	52 e0       	ldi	r21, 0x02	; 2
    4288:	62 e9       	ldi	r22, 0x92	; 146
    428a:	72 e0       	ldi	r23, 0x02	; 2
    428c:	8b eb       	ldi	r24, 0xBB	; 187
    428e:	9e e1       	ldi	r25, 0x1E	; 30
    4290:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    4294:	e1 2c       	mov	r14, r1
	xTaskCreate(Defrost,(const portCHAR *)"Defrost",256,NULL,0, NULL );
    4296:	f1 2c       	mov	r15, r1
    4298:	20 e0       	ldi	r18, 0x00	; 0
    429a:	30 e0       	ldi	r19, 0x00	; 0
    429c:	40 e0       	ldi	r20, 0x00	; 0
    429e:	51 e0       	ldi	r21, 0x01	; 1
    42a0:	6b e9       	ldi	r22, 0x9B	; 155
    42a2:	72 e0       	ldi	r23, 0x02	; 2
    42a4:	81 ec       	ldi	r24, 0xC1	; 193
    42a6:	9d e1       	ldi	r25, 0x1D	; 29
    42a8:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    42ac:	0e 94 56 16 	call	0x2cac	; 0x2cac <vTaskStartScheduler>
	//--------------------------------------
	vTaskStartScheduler();
    42b0:	80 e0       	ldi	r24, 0x00	; 0
}
    42b2:	90 e0       	ldi	r25, 0x00	; 0
    42b4:	a2 96       	adiw	r28, 0x22	; 34
    42b6:	0f b6       	in	r0, 0x3f	; 63
    42b8:	f8 94       	cli
    42ba:	de bf       	out	0x3e, r29	; 62
    42bc:	0f be       	out	0x3f, r0	; 63
    42be:	cd bf       	out	0x3d, r28	; 61
    42c0:	08 95       	ret

000042c2 <__vector_17>:
    42c2:	1f 92       	push	r1

ISR(TIMER1_COMPA_vect) // timer_compare_a
{
    42c4:	0f 92       	push	r0
    42c6:	0f b6       	in	r0, 0x3f	; 63
    42c8:	0f 92       	push	r0
    42ca:	11 24       	eor	r1, r1
    42cc:	0b b6       	in	r0, 0x3b	; 59
    42ce:	0f 92       	push	r0
    42d0:	2f 93       	push	r18
    42d2:	3f 93       	push	r19
    42d4:	4f 93       	push	r20
    42d6:	5f 93       	push	r21
    42d8:	6f 93       	push	r22
    42da:	7f 93       	push	r23
    42dc:	8f 93       	push	r24
    42de:	9f 93       	push	r25
    42e0:	af 93       	push	r26
    42e2:	bf 93       	push	r27
    42e4:	ef 93       	push	r30
    42e6:	ff 93       	push	r31
	
	static BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
    42e8:	10 92 90 07 	sts	0x0790, r1	; 0x800790 <xHigherPriorityTaskWoken.3697>
	countTimer++;
    42ec:	80 91 21 0b 	lds	r24, 0x0B21	; 0x800b21 <countTimer>
    42f0:	90 91 22 0b 	lds	r25, 0x0B22	; 0x800b22 <countTimer+0x1>
    42f4:	a0 91 23 0b 	lds	r26, 0x0B23	; 0x800b23 <countTimer+0x2>
    42f8:	b0 91 24 0b 	lds	r27, 0x0B24	; 0x800b24 <countTimer+0x3>
    42fc:	01 96       	adiw	r24, 0x01	; 1
    42fe:	a1 1d       	adc	r26, r1
    4300:	b1 1d       	adc	r27, r1
    4302:	80 93 21 0b 	sts	0x0B21, r24	; 0x800b21 <countTimer>
    4306:	90 93 22 0b 	sts	0x0B22, r25	; 0x800b22 <countTimer+0x1>
    430a:	a0 93 23 0b 	sts	0x0B23, r26	; 0x800b23 <countTimer+0x2>
    430e:	b0 93 24 0b 	sts	0x0B24, r27	; 0x800b24 <countTimer+0x3>
	if(countTimer==7){stop_1_Timer();countTimer=0;xSemaphoreGiveFromISR(xMbBinarySemaphore,&xHigherPriorityTaskWoken);}
    4312:	80 91 21 0b 	lds	r24, 0x0B21	; 0x800b21 <countTimer>
    4316:	90 91 22 0b 	lds	r25, 0x0B22	; 0x800b22 <countTimer+0x1>
    431a:	a0 91 23 0b 	lds	r26, 0x0B23	; 0x800b23 <countTimer+0x2>
    431e:	b0 91 24 0b 	lds	r27, 0x0B24	; 0x800b24 <countTimer+0x3>
    4322:	07 97       	sbiw	r24, 0x07	; 7
    4324:	a1 05       	cpc	r26, r1
    4326:	b1 05       	cpc	r27, r1
    4328:	89 f4       	brne	.+34     	; 0x434c <__vector_17+0x8a>
    432a:	3d d3       	rcall	.+1658   	; 0x49a6 <stop_1_Timer>
    432c:	10 92 21 0b 	sts	0x0B21, r1	; 0x800b21 <countTimer>
    4330:	10 92 22 0b 	sts	0x0B22, r1	; 0x800b22 <countTimer+0x1>
    4334:	10 92 23 0b 	sts	0x0B23, r1	; 0x800b23 <countTimer+0x2>
    4338:	10 92 24 0b 	sts	0x0B24, r1	; 0x800b24 <countTimer+0x3>
    433c:	60 e9       	ldi	r22, 0x90	; 144
    433e:	77 e0       	ldi	r23, 0x07	; 7
    4340:	80 91 0b 0b 	lds	r24, 0x0B0B	; 0x800b0b <xMbBinarySemaphore>
    4344:	90 91 0c 0b 	lds	r25, 0x0B0C	; 0x800b0c <xMbBinarySemaphore+0x1>
    4348:	0e 94 c9 0a 	call	0x1592	; 0x1592 <xQueueGiveFromISR>
	//if( xHigherPriorityTaskWoken == pdTRUE )portYIELD();

}
    434c:	ff 91       	pop	r31
    434e:	ef 91       	pop	r30
    4350:	bf 91       	pop	r27
    4352:	af 91       	pop	r26
    4354:	9f 91       	pop	r25
    4356:	8f 91       	pop	r24
    4358:	7f 91       	pop	r23
    435a:	6f 91       	pop	r22
    435c:	5f 91       	pop	r21
    435e:	4f 91       	pop	r20
    4360:	3f 91       	pop	r19
    4362:	2f 91       	pop	r18
    4364:	0f 90       	pop	r0
    4366:	0b be       	out	0x3b, r0	; 59
    4368:	0f 90       	pop	r0
    436a:	0f be       	out	0x3f, r0	; 63
    436c:	0f 90       	pop	r0
    436e:	1f 90       	pop	r1
    4370:	18 95       	reti

00004372 <ADE7758_read24>:
}
long ADE7758_getMaskInterrupts(void){
	return ADE7758_read24(MASK);
}
void ADE7758_setMaskInterrupts(unsigned long data){
	return ADE7758_write24(MASK, data);
    4372:	1f 93       	push	r17
    4374:	cf 93       	push	r28
    4376:	df 93       	push	r29
    4378:	c8 2f       	mov	r28, r24
    437a:	0f b6       	in	r0, 0x3f	; 63
    437c:	f8 94       	cli
    437e:	0f 92       	push	r0
    4380:	84 e0       	ldi	r24, 0x04	; 4
    4382:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <spiSelect>
    4386:	8c 2f       	mov	r24, r28
    4388:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    438c:	80 e0       	ldi	r24, 0x00	; 0
    438e:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    4392:	18 2f       	mov	r17, r24
    4394:	80 e0       	ldi	r24, 0x00	; 0
    4396:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    439a:	c8 2f       	mov	r28, r24
    439c:	80 e0       	ldi	r24, 0x00	; 0
    439e:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    43a2:	d8 2f       	mov	r29, r24
    43a4:	84 e0       	ldi	r24, 0x04	; 4
    43a6:	0e 94 17 14 	call	0x282e	; 0x282e <spiDeselect>
    43aa:	0f 90       	pop	r0
    43ac:	0f be       	out	0x3f, r0	; 63
    43ae:	8c 2f       	mov	r24, r28
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    43b2:	a0 e0       	ldi	r26, 0x00	; 0
    43b4:	b0 e0       	ldi	r27, 0x00	; 0
    43b6:	ba 2f       	mov	r27, r26
    43b8:	a9 2f       	mov	r26, r25
    43ba:	98 2f       	mov	r25, r24
    43bc:	88 27       	eor	r24, r24
    43be:	a1 2b       	or	r26, r17
    43c0:	bc 01       	movw	r22, r24
    43c2:	cd 01       	movw	r24, r26
    43c4:	6d 2b       	or	r22, r29
    43c6:	df 91       	pop	r29
    43c8:	cf 91       	pop	r28
    43ca:	1f 91       	pop	r17
    43cc:	08 95       	ret

000043ce <ADE7758_write8>:
    43ce:	cf 93       	push	r28
    43d0:	df 93       	push	r29
    43d2:	d8 2f       	mov	r29, r24
    43d4:	c6 2f       	mov	r28, r22
    43d6:	0f b6       	in	r0, 0x3f	; 63
    43d8:	f8 94       	cli
    43da:	0f 92       	push	r0
    43dc:	84 e0       	ldi	r24, 0x04	; 4
    43de:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <spiSelect>
    43e2:	8d 2f       	mov	r24, r29
    43e4:	80 68       	ori	r24, 0x80	; 128
    43e6:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    43ea:	8c 2f       	mov	r24, r28
    43ec:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    43f0:	84 e0       	ldi	r24, 0x04	; 4
    43f2:	0e 94 17 14 	call	0x282e	; 0x282e <spiDeselect>
    43f6:	0f 90       	pop	r0
    43f8:	0f be       	out	0x3f, r0	; 63
    43fa:	df 91       	pop	r29
    43fc:	cf 91       	pop	r28
    43fe:	08 95       	ret

00004400 <ADE7758_setOpMode>:
    4400:	68 2f       	mov	r22, r24
    4402:	83 e1       	ldi	r24, 0x13	; 19
    4404:	e4 cf       	rjmp	.-56     	; 0x43ce <ADE7758_write8>
    4406:	08 95       	ret

00004408 <ADE7758_setWavMode>:
    4408:	68 2f       	mov	r22, r24
    440a:	85 e1       	ldi	r24, 0x15	; 21
    440c:	e0 cf       	rjmp	.-64     	; 0x43ce <ADE7758_write8>
    440e:	08 95       	ret

00004410 <ADE7758_setLcycMode>:
    4410:	68 2f       	mov	r22, r24
    4412:	87 e1       	ldi	r24, 0x17	; 23
    4414:	dc cf       	rjmp	.-72     	; 0x43ce <ADE7758_write8>
    4416:	08 95       	ret

00004418 <ADE7758_setupDivs>:
    4418:	cf 93       	push	r28
    441a:	df 93       	push	r29
    441c:	d6 2f       	mov	r29, r22
    441e:	c4 2f       	mov	r28, r20
    4420:	68 2f       	mov	r22, r24
    4422:	82 e4       	ldi	r24, 0x42	; 66
    4424:	d4 df       	rcall	.-88     	; 0x43ce <ADE7758_write8>
    4426:	6d 2f       	mov	r22, r29
    4428:	83 e4       	ldi	r24, 0x43	; 67
    442a:	d1 df       	rcall	.-94     	; 0x43ce <ADE7758_write8>
    442c:	6c 2f       	mov	r22, r28
    442e:	84 e4       	ldi	r24, 0x44	; 68
    4430:	ce df       	rcall	.-100    	; 0x43ce <ADE7758_write8>
    4432:	df 91       	pop	r29
    4434:	cf 91       	pop	r28
    4436:	08 95       	ret

00004438 <ADE7758_Init>:
    4438:	88 e0       	ldi	r24, 0x08	; 8
    443a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <spiSetDataMode>
    443e:	86 e0       	ldi	r24, 0x06	; 6
    4440:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <spiSetClockDivider>
    4444:	81 e0       	ldi	r24, 0x01	; 1
    4446:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <spiSetBitOrder>
    444a:	84 e0       	ldi	r24, 0x04	; 4
    444c:	0e 94 81 13 	call	0x2702	; 0x2702 <spiBegin>
    4450:	80 e0       	ldi	r24, 0x00	; 0
    4452:	de df       	rcall	.-68     	; 0x4410 <ADE7758_setLcycMode>
    4454:	60 e0       	ldi	r22, 0x00	; 0
    4456:	83 e2       	ldi	r24, 0x23	; 35
    4458:	ba df       	rcall	.-140    	; 0x43ce <ADE7758_write8>
    445a:	42 e0       	ldi	r20, 0x02	; 2
    445c:	62 e0       	ldi	r22, 0x02	; 2
    445e:	82 e0       	ldi	r24, 0x02	; 2
    4460:	db df       	rcall	.-74     	; 0x4418 <ADE7758_setupDivs>
    4462:	84 e0       	ldi	r24, 0x04	; 4
    4464:	cd df       	rcall	.-102    	; 0x4400 <ADE7758_setOpMode>
    4466:	80 e1       	ldi	r24, 0x10	; 16
    4468:	cf cf       	rjmp	.-98     	; 0x4408 <ADE7758_setWavMode>
    446a:	08 95       	ret

0000446c <ADE7758_getStatus>:
}
unsigned long ADE7758_getStatus(){
	return ADE7758_read24(STATUS);
    446c:	89 e1       	ldi	r24, 0x19	; 25
    446e:	81 cf       	rjmp	.-254    	; 0x4372 <ADE7758_read24>
}
    4470:	08 95       	ret

00004472 <ADE7758_resetStatus>:
unsigned long ADE7758_resetStatus(){
	return ADE7758_read24(RSTATUS);
    4472:	8a e1       	ldi	r24, 0x1A	; 26
    4474:	7e cf       	rjmp	.-260    	; 0x4372 <ADE7758_read24>
}
    4476:	08 95       	ret

00004478 <Check_Erors>:
#include "Errors.h"

extern  bool def;
int Check_Erors(xCompressor *comp,xEEdata *EElimit)
{
    4478:	4f 92       	push	r4
    447a:	5f 92       	push	r5
    447c:	6f 92       	push	r6
    447e:	7f 92       	push	r7
    4480:	8f 92       	push	r8
    4482:	9f 92       	push	r9
    4484:	af 92       	push	r10
    4486:	bf 92       	push	r11
    4488:	cf 92       	push	r12
    448a:	df 92       	push	r13
    448c:	ef 92       	push	r14
    448e:	ff 92       	push	r15
    4490:	0f 93       	push	r16
    4492:	1f 93       	push	r17
    4494:	cf 93       	push	r28
    4496:	df 93       	push	r29
    4498:	00 d0       	rcall	.+0      	; 0x449a <Check_Erors+0x22>
    449a:	00 d0       	rcall	.+0      	; 0x449c <Check_Erors+0x24>
    449c:	cd b7       	in	r28, 0x3d	; 61
    449e:	de b7       	in	r29, 0x3e	; 62
    44a0:	9e 83       	std	Y+6, r25	; 0x06
    44a2:	8d 83       	std	Y+5, r24	; 0x05
    44a4:	8b 01       	movw	r16, r22
		if( comp->Dhw_Temp<-100){return (10+comp->Index);}
    44a6:	20 e0       	ldi	r18, 0x00	; 0
    44a8:	30 e0       	ldi	r19, 0x00	; 0
    44aa:	48 ec       	ldi	r20, 0xC8	; 200
    44ac:	52 ec       	ldi	r21, 0xC2	; 194
    44ae:	dc 01       	movw	r26, r24
    44b0:	52 96       	adiw	r26, 0x12	; 18
    44b2:	6d 91       	ld	r22, X+
    44b4:	7d 91       	ld	r23, X+
    44b6:	8d 91       	ld	r24, X+
    44b8:	9c 91       	ld	r25, X
    44ba:	55 97       	sbiw	r26, 0x15	; 21
    44bc:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    44c0:	88 23       	and	r24, r24
    44c2:	44 f4       	brge	.+16     	; 0x44d4 <Check_Erors+0x5c>
    44c4:	ed 81       	ldd	r30, Y+5	; 0x05
    44c6:	fe 81       	ldd	r31, Y+6	; 0x06
    44c8:	ee 58       	subi	r30, 0x8E	; 142
    44ca:	ff 4f       	sbci	r31, 0xFF	; 255
    44cc:	80 81       	ld	r24, Z
    44ce:	91 81       	ldd	r25, Z+1	; 0x01
    44d0:	0a 96       	adiw	r24, 0x0a	; 10
    44d2:	47 c2       	rjmp	.+1166   	; 0x4962 <Check_Erors+0x4ea>
		else if(comp->Bac_Temp<-100) {return (20+comp->Index);}
    44d4:	ad 81       	ldd	r26, Y+5	; 0x05
    44d6:	be 81       	ldd	r27, Y+6	; 0x06
    44d8:	56 96       	adiw	r26, 0x16	; 22
    44da:	cd 90       	ld	r12, X+
    44dc:	dd 90       	ld	r13, X+
    44de:	ed 90       	ld	r14, X+
    44e0:	fc 90       	ld	r15, X
    44e2:	59 97       	sbiw	r26, 0x19	; 25
    44e4:	20 e0       	ldi	r18, 0x00	; 0
    44e6:	30 e0       	ldi	r19, 0x00	; 0
    44e8:	48 ec       	ldi	r20, 0xC8	; 200
    44ea:	52 ec       	ldi	r21, 0xC2	; 194
    44ec:	c7 01       	movw	r24, r14
    44ee:	b6 01       	movw	r22, r12
    44f0:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    44f4:	88 23       	and	r24, r24
    44f6:	44 f4       	brge	.+16     	; 0x4508 <Check_Erors+0x90>
    44f8:	ed 81       	ldd	r30, Y+5	; 0x05
    44fa:	fe 81       	ldd	r31, Y+6	; 0x06
    44fc:	ee 58       	subi	r30, 0x8E	; 142
    44fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4500:	80 81       	ld	r24, Z
    4502:	91 81       	ldd	r25, Z+1	; 0x01
    4504:	44 96       	adiw	r24, 0x14	; 20
    4506:	2d c2       	rjmp	.+1114   	; 0x4962 <Check_Erors+0x4ea>
		else if (comp->Heat_Out<-100) {return (30+comp->Index);}
    4508:	ad 81       	ldd	r26, Y+5	; 0x05
    450a:	be 81       	ldd	r27, Y+6	; 0x06
    450c:	9a 96       	adiw	r26, 0x2a	; 42
    450e:	4d 90       	ld	r4, X+
    4510:	5d 90       	ld	r5, X+
    4512:	6d 90       	ld	r6, X+
    4514:	7c 90       	ld	r7, X
    4516:	9d 97       	sbiw	r26, 0x2d	; 45
    4518:	20 e0       	ldi	r18, 0x00	; 0
    451a:	30 e0       	ldi	r19, 0x00	; 0
    451c:	48 ec       	ldi	r20, 0xC8	; 200
    451e:	52 ec       	ldi	r21, 0xC2	; 194
    4520:	c3 01       	movw	r24, r6
    4522:	b2 01       	movw	r22, r4
    4524:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    4528:	88 23       	and	r24, r24
    452a:	44 f4       	brge	.+16     	; 0x453c <Check_Erors+0xc4>
    452c:	ed 81       	ldd	r30, Y+5	; 0x05
    452e:	fe 81       	ldd	r31, Y+6	; 0x06
    4530:	ee 58       	subi	r30, 0x8E	; 142
    4532:	ff 4f       	sbci	r31, 0xFF	; 255
    4534:	80 81       	ld	r24, Z
    4536:	91 81       	ldd	r25, Z+1	; 0x01
    4538:	4e 96       	adiw	r24, 0x1e	; 30
    453a:	13 c2       	rjmp	.+1062   	; 0x4962 <Check_Erors+0x4ea>
		else if (comp->Heat_In<-100){return (40+comp->Index);}
    453c:	ad 81       	ldd	r26, Y+5	; 0x05
    453e:	be 81       	ldd	r27, Y+6	; 0x06
    4540:	9e 96       	adiw	r26, 0x2e	; 46
    4542:	8d 90       	ld	r8, X+
    4544:	9d 90       	ld	r9, X+
    4546:	ad 90       	ld	r10, X+
    4548:	bc 90       	ld	r11, X
    454a:	d1 97       	sbiw	r26, 0x31	; 49
    454c:	20 e0       	ldi	r18, 0x00	; 0
    454e:	30 e0       	ldi	r19, 0x00	; 0
    4550:	48 ec       	ldi	r20, 0xC8	; 200
    4552:	52 ec       	ldi	r21, 0xC2	; 194
    4554:	c5 01       	movw	r24, r10
    4556:	b4 01       	movw	r22, r8
    4558:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    455c:	88 23       	and	r24, r24
    455e:	44 f4       	brge	.+16     	; 0x4570 <Check_Erors+0xf8>
    4560:	ed 81       	ldd	r30, Y+5	; 0x05
    4562:	fe 81       	ldd	r31, Y+6	; 0x06
    4564:	ee 58       	subi	r30, 0x8E	; 142
    4566:	ff 4f       	sbci	r31, 0xFF	; 255
    4568:	80 81       	ld	r24, Z
    456a:	91 81       	ldd	r25, Z+1	; 0x01
    456c:	88 96       	adiw	r24, 0x28	; 40
    456e:	f9 c1       	rjmp	.+1010   	; 0x4962 <Check_Erors+0x4ea>
		else if(comp->Src_In<-100) {return (50+comp->Index);}
    4570:	20 e0       	ldi	r18, 0x00	; 0
    4572:	30 e0       	ldi	r19, 0x00	; 0
    4574:	48 ec       	ldi	r20, 0xC8	; 200
    4576:	52 ec       	ldi	r21, 0xC2	; 194
    4578:	ad 81       	ldd	r26, Y+5	; 0x05
    457a:	be 81       	ldd	r27, Y+6	; 0x06
    457c:	d2 96       	adiw	r26, 0x32	; 50
    457e:	6d 91       	ld	r22, X+
    4580:	7d 91       	ld	r23, X+
    4582:	8d 91       	ld	r24, X+
    4584:	9c 91       	ld	r25, X
    4586:	d5 97       	sbiw	r26, 0x35	; 53
    4588:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    458c:	88 23       	and	r24, r24
    458e:	44 f4       	brge	.+16     	; 0x45a0 <Check_Erors+0x128>
    4590:	ed 81       	ldd	r30, Y+5	; 0x05
    4592:	fe 81       	ldd	r31, Y+6	; 0x06
    4594:	ee 58       	subi	r30, 0x8E	; 142
    4596:	ff 4f       	sbci	r31, 0xFF	; 255
    4598:	80 81       	ld	r24, Z
    459a:	91 81       	ldd	r25, Z+1	; 0x01
    459c:	c2 96       	adiw	r24, 0x32	; 50
    459e:	e1 c1       	rjmp	.+962    	; 0x4962 <Check_Erors+0x4ea>
		else if (comp->Src_Out<-100) {return (60+comp->Index);}
    45a0:	20 e0       	ldi	r18, 0x00	; 0
    45a2:	30 e0       	ldi	r19, 0x00	; 0
    45a4:	48 ec       	ldi	r20, 0xC8	; 200
    45a6:	52 ec       	ldi	r21, 0xC2	; 194
    45a8:	ad 81       	ldd	r26, Y+5	; 0x05
    45aa:	be 81       	ldd	r27, Y+6	; 0x06
    45ac:	d6 96       	adiw	r26, 0x36	; 54
    45ae:	6d 91       	ld	r22, X+
    45b0:	7d 91       	ld	r23, X+
    45b2:	8d 91       	ld	r24, X+
    45b4:	9c 91       	ld	r25, X
    45b6:	d9 97       	sbiw	r26, 0x39	; 57
    45b8:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    45bc:	88 23       	and	r24, r24
    45be:	44 f4       	brge	.+16     	; 0x45d0 <Check_Erors+0x158>
    45c0:	ed 81       	ldd	r30, Y+5	; 0x05
    45c2:	fe 81       	ldd	r31, Y+6	; 0x06
    45c4:	ee 58       	subi	r30, 0x8E	; 142
    45c6:	ff 4f       	sbci	r31, 0xFF	; 255
    45c8:	80 81       	ld	r24, Z
    45ca:	91 81       	ldd	r25, Z+1	; 0x01
    45cc:	cc 96       	adiw	r24, 0x3c	; 60
    45ce:	c9 c1       	rjmp	.+914    	; 0x4962 <Check_Erors+0x4ea>
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
    45d0:	ad 81       	ldd	r26, Y+5	; 0x05
    45d2:	be 81       	ldd	r27, Y+6	; 0x06
    45d4:	da 96       	adiw	r26, 0x3a	; 58
    45d6:	8d 91       	ld	r24, X+
    45d8:	9d 91       	ld	r25, X+
    45da:	0d 90       	ld	r0, X+
    45dc:	bc 91       	ld	r27, X
    45de:	a0 2d       	mov	r26, r0
    45e0:	89 83       	std	Y+1, r24	; 0x01
    45e2:	9a 83       	std	Y+2, r25	; 0x02
    45e4:	ab 83       	std	Y+3, r26	; 0x03
    45e6:	bc 83       	std	Y+4, r27	; 0x04
    45e8:	20 e0       	ldi	r18, 0x00	; 0
    45ea:	30 e0       	ldi	r19, 0x00	; 0
    45ec:	48 ec       	ldi	r20, 0xC8	; 200
    45ee:	52 ec       	ldi	r21, 0xC2	; 194
    45f0:	bc 01       	movw	r22, r24
    45f2:	cd 01       	movw	r24, r26
    45f4:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    45f8:	88 23       	and	r24, r24
    45fa:	4c f4       	brge	.+18     	; 0x460e <Check_Erors+0x196>
    45fc:	ed 81       	ldd	r30, Y+5	; 0x05
    45fe:	fe 81       	ldd	r31, Y+6	; 0x06
    4600:	ee 58       	subi	r30, 0x8E	; 142
    4602:	ff 4f       	sbci	r31, 0xFF	; 255
    4604:	80 81       	ld	r24, Z
    4606:	91 81       	ldd	r25, Z+1	; 0x01
    4608:	8a 5b       	subi	r24, 0xBA	; 186
    460a:	9f 4f       	sbci	r25, 0xFF	; 255
    460c:	aa c1       	rjmp	.+852    	; 0x4962 <Check_Erors+0x4ea>
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
    460e:	20 e0       	ldi	r18, 0x00	; 0
    4610:	30 e0       	ldi	r19, 0x00	; 0
    4612:	48 ec       	ldi	r20, 0xC8	; 200
    4614:	52 ec       	ldi	r21, 0xC2	; 194
    4616:	ed 81       	ldd	r30, Y+5	; 0x05
    4618:	fe 81       	ldd	r31, Y+6	; 0x06
    461a:	fe 96       	adiw	r30, 0x3e	; 62
    461c:	60 81       	ld	r22, Z
    461e:	71 81       	ldd	r23, Z+1	; 0x01
    4620:	82 81       	ldd	r24, Z+2	; 0x02
    4622:	93 81       	ldd	r25, Z+3	; 0x03
    4624:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    4628:	88 23       	and	r24, r24
    462a:	54 f4       	brge	.+20     	; 0x4640 <Check_Erors+0x1c8>
    462c:	8d 81       	ldd	r24, Y+5	; 0x05
    462e:	9e 81       	ldd	r25, Y+6	; 0x06
    4630:	8e 58       	subi	r24, 0x8E	; 142
    4632:	9f 4f       	sbci	r25, 0xFF	; 255
    4634:	dc 01       	movw	r26, r24
    4636:	8d 91       	ld	r24, X+
    4638:	9c 91       	ld	r25, X
    463a:	80 5b       	subi	r24, 0xB0	; 176
    463c:	9f 4f       	sbci	r25, 0xFF	; 255
    463e:	91 c1       	rjmp	.+802    	; 0x4962 <Check_Erors+0x4ea>
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
    4640:	20 e0       	ldi	r18, 0x00	; 0
    4642:	30 e0       	ldi	r19, 0x00	; 0
    4644:	48 ec       	ldi	r20, 0xC8	; 200
    4646:	52 ec       	ldi	r21, 0xC2	; 194
    4648:	ed 81       	ldd	r30, Y+5	; 0x05
    464a:	fe 81       	ldd	r31, Y+6	; 0x06
    464c:	ee 5b       	subi	r30, 0xBE	; 190
    464e:	ff 4f       	sbci	r31, 0xFF	; 255
    4650:	60 81       	ld	r22, Z
    4652:	71 81       	ldd	r23, Z+1	; 0x01
    4654:	82 81       	ldd	r24, Z+2	; 0x02
    4656:	93 81       	ldd	r25, Z+3	; 0x03
    4658:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    465c:	88 23       	and	r24, r24
    465e:	4c f4       	brge	.+18     	; 0x4672 <Check_Erors+0x1fa>
    4660:	ed 81       	ldd	r30, Y+5	; 0x05
    4662:	fe 81       	ldd	r31, Y+6	; 0x06
    4664:	ee 58       	subi	r30, 0x8E	; 142
    4666:	ff 4f       	sbci	r31, 0xFF	; 255
    4668:	80 81       	ld	r24, Z
    466a:	91 81       	ldd	r25, Z+1	; 0x01
    466c:	86 5a       	subi	r24, 0xA6	; 166
    466e:	9f 4f       	sbci	r25, 0xFF	; 255
    4670:	78 c1       	rjmp	.+752    	; 0x4962 <Check_Erors+0x4ea>
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
    4672:	4a 9b       	sbis	0x09, 2	; 9
    4674:	10 c0       	rjmp	.+32     	; 0x4696 <Check_Erors+0x21e>
    4676:	ad 81       	ldd	r26, Y+5	; 0x05
    4678:	be 81       	ldd	r27, Y+6	; 0x06
    467a:	1f 96       	adiw	r26, 0x0f	; 15
    467c:	8c 91       	ld	r24, X
    467e:	1f 97       	sbiw	r26, 0x0f	; 15
    4680:	81 30       	cpi	r24, 0x01	; 1
    4682:	49 f4       	brne	.+18     	; 0x4696 <Check_Erors+0x21e>
    4684:	fd 01       	movw	r30, r26
    4686:	ee 58       	subi	r30, 0x8E	; 142
    4688:	ff 4f       	sbci	r31, 0xFF	; 255
    468a:	80 81       	ld	r24, Z
    468c:	91 81       	ldd	r25, Z+1	; 0x01
    468e:	01 97       	sbiw	r24, 0x01	; 1
    4690:	09 f0       	breq	.+2      	; 0x4694 <Check_Erors+0x21c>
    4692:	56 c1       	rjmp	.+684    	; 0x4940 <Check_Erors+0x4c8>
    4694:	34 c1       	rjmp	.+616    	; 0x48fe <Check_Erors+0x486>
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    4696:	4b 9b       	sbis	0x09, 3	; 9
    4698:	10 c0       	rjmp	.+32     	; 0x46ba <Check_Erors+0x242>
    469a:	ed 81       	ldd	r30, Y+5	; 0x05
    469c:	fe 81       	ldd	r31, Y+6	; 0x06
    469e:	87 85       	ldd	r24, Z+15	; 0x0f
    46a0:	81 30       	cpi	r24, 0x01	; 1
    46a2:	09 f0       	breq	.+2      	; 0x46a6 <Check_Erors+0x22e>
    46a4:	5b c1       	rjmp	.+694    	; 0x495c <Check_Erors+0x4e4>
    46a6:	ed 81       	ldd	r30, Y+5	; 0x05
    46a8:	fe 81       	ldd	r31, Y+6	; 0x06
    46aa:	ee 58       	subi	r30, 0x8E	; 142
    46ac:	ff 4f       	sbci	r31, 0xFF	; 255
    46ae:	80 81       	ld	r24, Z
    46b0:	91 81       	ldd	r25, Z+1	; 0x01
    46b2:	02 97       	sbiw	r24, 0x02	; 2
    46b4:	09 f0       	breq	.+2      	; 0x46b8 <Check_Erors+0x240>
    46b6:	47 c1       	rjmp	.+654    	; 0x4946 <Check_Erors+0x4ce>
    46b8:	25 c1       	rjmp	.+586    	; 0x4904 <Check_Erors+0x48c>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    46ba:	65 9b       	sbis	0x0c, 5	; 12
    46bc:	11 c0       	rjmp	.+34     	; 0x46e0 <Check_Erors+0x268>
    46be:	ad 81       	ldd	r26, Y+5	; 0x05
    46c0:	be 81       	ldd	r27, Y+6	; 0x06
    46c2:	1f 96       	adiw	r26, 0x0f	; 15
    46c4:	8c 91       	ld	r24, X
    46c6:	81 30       	cpi	r24, 0x01	; 1
    46c8:	09 f0       	breq	.+2      	; 0x46cc <Check_Erors+0x254>
    46ca:	40 c1       	rjmp	.+640    	; 0x494c <Check_Erors+0x4d4>
    46cc:	ed 81       	ldd	r30, Y+5	; 0x05
    46ce:	fe 81       	ldd	r31, Y+6	; 0x06
    46d0:	ee 58       	subi	r30, 0x8E	; 142
    46d2:	ff 4f       	sbci	r31, 0xFF	; 255
    46d4:	80 81       	ld	r24, Z
    46d6:	91 81       	ldd	r25, Z+1	; 0x01
    46d8:	01 97       	sbiw	r24, 0x01	; 1
    46da:	09 f0       	breq	.+2      	; 0x46de <Check_Erors+0x266>
    46dc:	39 c1       	rjmp	.+626    	; 0x4950 <Check_Erors+0x4d8>
    46de:	15 c1       	rjmp	.+554    	; 0x490a <Check_Erors+0x492>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    46e0:	65 9b       	sbis	0x0c, 5	; 12
    46e2:	0e c0       	rjmp	.+28     	; 0x4700 <Check_Erors+0x288>
    46e4:	ed 81       	ldd	r30, Y+5	; 0x05
    46e6:	fe 81       	ldd	r31, Y+6	; 0x06
    46e8:	87 85       	ldd	r24, Z+15	; 0x0f
    46ea:	81 30       	cpi	r24, 0x01	; 1
    46ec:	49 f4       	brne	.+18     	; 0x4700 <Check_Erors+0x288>
    46ee:	ed 81       	ldd	r30, Y+5	; 0x05
    46f0:	fe 81       	ldd	r31, Y+6	; 0x06
    46f2:	ee 58       	subi	r30, 0x8E	; 142
    46f4:	ff 4f       	sbci	r31, 0xFF	; 255
    46f6:	80 81       	ld	r24, Z
    46f8:	91 81       	ldd	r25, Z+1	; 0x01
    46fa:	02 97       	sbiw	r24, 0x02	; 2
    46fc:	09 f4       	brne	.+2      	; 0x4700 <Check_Erors+0x288>
    46fe:	08 c1       	rjmp	.+528    	; 0x4910 <Check_Erors+0x498>
		 //else if ( comp->High_Press > 0){return (140+comp->Index);}
		 //else if ( comp->Low_Press>0 ) {return (120+comp->Index);}
		 else if ( comp->Low_Press< EElimit->LP_Min ) {return (120+comp->Index);}
    4700:	f8 01       	movw	r30, r16
    4702:	e4 5a       	subi	r30, 0xA4	; 164
    4704:	ff 4f       	sbci	r31, 0xFF	; 255
    4706:	20 81       	ld	r18, Z
    4708:	31 81       	ldd	r19, Z+1	; 0x01
    470a:	42 81       	ldd	r20, Z+2	; 0x02
    470c:	53 81       	ldd	r21, Z+3	; 0x03
    470e:	ad 81       	ldd	r26, Y+5	; 0x05
    4710:	be 81       	ldd	r27, Y+6	; 0x06
    4712:	5e 96       	adiw	r26, 0x1e	; 30
    4714:	6d 91       	ld	r22, X+
    4716:	7d 91       	ld	r23, X+
    4718:	8d 91       	ld	r24, X+
    471a:	9c 91       	ld	r25, X
    471c:	91 97       	sbiw	r26, 0x21	; 33
    471e:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    4722:	88 23       	and	r24, r24
    4724:	4c f4       	brge	.+18     	; 0x4738 <Check_Erors+0x2c0>
    4726:	ed 81       	ldd	r30, Y+5	; 0x05
    4728:	fe 81       	ldd	r31, Y+6	; 0x06
    472a:	ee 58       	subi	r30, 0x8E	; 142
    472c:	ff 4f       	sbci	r31, 0xFF	; 255
    472e:	80 81       	ld	r24, Z
    4730:	91 81       	ldd	r25, Z+1	; 0x01
    4732:	88 58       	subi	r24, 0x88	; 136
    4734:	9f 4f       	sbci	r25, 0xFF	; 255
    4736:	15 c1       	rjmp	.+554    	; 0x4962 <Check_Erors+0x4ea>
		 else if ( comp->High_Press > EElimit->HP_Max){return (140+comp->Index);}	
    4738:	d8 01       	movw	r26, r16
    473a:	16 96       	adiw	r26, 0x06	; 6
    473c:	6c 91       	ld	r22, X
    473e:	70 e0       	ldi	r23, 0x00	; 0
    4740:	80 e0       	ldi	r24, 0x00	; 0
    4742:	90 e0       	ldi	r25, 0x00	; 0
    4744:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    4748:	9b 01       	movw	r18, r22
    474a:	ac 01       	movw	r20, r24
    474c:	ed 81       	ldd	r30, Y+5	; 0x05
    474e:	fe 81       	ldd	r31, Y+6	; 0x06
    4750:	62 8d       	ldd	r22, Z+26	; 0x1a
    4752:	73 8d       	ldd	r23, Z+27	; 0x1b
    4754:	84 8d       	ldd	r24, Z+28	; 0x1c
    4756:	95 8d       	ldd	r25, Z+29	; 0x1d
    4758:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    475c:	18 16       	cp	r1, r24
    475e:	54 f4       	brge	.+20     	; 0x4774 <Check_Erors+0x2fc>
    4760:	8d 81       	ldd	r24, Y+5	; 0x05
    4762:	9e 81       	ldd	r25, Y+6	; 0x06
    4764:	8e 58       	subi	r24, 0x8E	; 142
    4766:	9f 4f       	sbci	r25, 0xFF	; 255
    4768:	dc 01       	movw	r26, r24
    476a:	8d 91       	ld	r24, X+
    476c:	9c 91       	ld	r25, X
    476e:	84 57       	subi	r24, 0x74	; 116
    4770:	9f 4f       	sbci	r25, 0xFF	; 255
    4772:	f7 c0       	rjmp	.+494    	; 0x4962 <Check_Erors+0x4ea>
		 else if ( comp->Bac_Temp > EElimit->HEAT_Max && comp->Heating==1){return (160+comp->Index);}
    4774:	f8 01       	movw	r30, r16
    4776:	61 85       	ldd	r22, Z+9	; 0x09
    4778:	70 e0       	ldi	r23, 0x00	; 0
    477a:	80 e0       	ldi	r24, 0x00	; 0
    477c:	90 e0       	ldi	r25, 0x00	; 0
    477e:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    4782:	9b 01       	movw	r18, r22
    4784:	ac 01       	movw	r20, r24
    4786:	c7 01       	movw	r24, r14
    4788:	b6 01       	movw	r22, r12
    478a:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    478e:	18 16       	cp	r1, r24
    4790:	74 f4       	brge	.+28     	; 0x47ae <Check_Erors+0x336>
    4792:	ad 81       	ldd	r26, Y+5	; 0x05
    4794:	be 81       	ldd	r27, Y+6	; 0x06
    4796:	12 96       	adiw	r26, 0x02	; 2
    4798:	8c 91       	ld	r24, X
    479a:	12 97       	sbiw	r26, 0x02	; 2
    479c:	88 23       	and	r24, r24
    479e:	39 f0       	breq	.+14     	; 0x47ae <Check_Erors+0x336>
    47a0:	ae 58       	subi	r26, 0x8E	; 142
    47a2:	bf 4f       	sbci	r27, 0xFF	; 255
    47a4:	8d 91       	ld	r24, X+
    47a6:	9c 91       	ld	r25, X
    47a8:	80 56       	subi	r24, 0x60	; 96
    47aa:	9f 4f       	sbci	r25, 0xFF	; 255
    47ac:	da c0       	rjmp	.+436    	; 0x4962 <Check_Erors+0x4ea>
		//else if ( comp->Bac_Temp < EElimit->HEAT_Min && comp->Cooling==1) {return (170+comp->Index);}	
		//else if ( comp->Bac_Temp < EElimit->HEAT_Min && comp->Heating==1) {return (170+comp->Index);}
		//else if ( comp->Bac_Temp > EElimit->Cool_Max && comp->Cooling==1){return (180+comp->Index);}
		else if ( comp->Bac_Temp < EElimit->Cool_Min && comp->Cooling==1){return (170+comp->Index);}
    47ae:	f8 01       	movw	r30, r16
    47b0:	65 85       	ldd	r22, Z+13	; 0x0d
    47b2:	70 e0       	ldi	r23, 0x00	; 0
    47b4:	80 e0       	ldi	r24, 0x00	; 0
    47b6:	90 e0       	ldi	r25, 0x00	; 0
    47b8:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    47bc:	9b 01       	movw	r18, r22
    47be:	ac 01       	movw	r20, r24
    47c0:	c7 01       	movw	r24, r14
    47c2:	b6 01       	movw	r22, r12
    47c4:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    47c8:	88 23       	and	r24, r24
    47ca:	74 f4       	brge	.+28     	; 0x47e8 <Check_Erors+0x370>
    47cc:	ad 81       	ldd	r26, Y+5	; 0x05
    47ce:	be 81       	ldd	r27, Y+6	; 0x06
    47d0:	13 96       	adiw	r26, 0x03	; 3
    47d2:	8c 91       	ld	r24, X
    47d4:	13 97       	sbiw	r26, 0x03	; 3
    47d6:	88 23       	and	r24, r24
    47d8:	39 f0       	breq	.+14     	; 0x47e8 <Check_Erors+0x370>
    47da:	ae 58       	subi	r26, 0x8E	; 142
    47dc:	bf 4f       	sbci	r27, 0xFF	; 255
    47de:	8d 91       	ld	r24, X+
    47e0:	9c 91       	ld	r25, X
    47e2:	86 55       	subi	r24, 0x56	; 86
    47e4:	9f 4f       	sbci	r25, 0xFF	; 255
    47e6:	bd c0       	rjmp	.+378    	; 0x4962 <Check_Erors+0x4ea>
		//else if ( comp->SuperHeat < EElimit->MinSuperheat && comp->checkTrv) {return (180+comp->Index);}
		//else if ( comp->SuperHeat > EElimit->MaxSuperheat && comp->checkTrv && !comp->def) {return (190+comp->Index);}
		//else if ( comp->SuperCool < EElimit->MinSupercool && comp->checkTrv){return (200+comp->Index);}
		//else if ( comp->SuperCool > EElimit->MaxSupercool && comp->checkTrv && !comp->def){return (210+comp->Index);}
		else if ( comp->Ex_Comp > EElimit->ExhaustMax){return 220;}	
    47e8:	f8 01       	movw	r30, r16
    47ea:	66 85       	ldd	r22, Z+14	; 0x0e
    47ec:	70 e0       	ldi	r23, 0x00	; 0
    47ee:	80 e0       	ldi	r24, 0x00	; 0
    47f0:	90 e0       	ldi	r25, 0x00	; 0
    47f2:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    47f6:	9b 01       	movw	r18, r22
    47f8:	ac 01       	movw	r20, r24
    47fa:	69 81       	ldd	r22, Y+1	; 0x01
    47fc:	7a 81       	ldd	r23, Y+2	; 0x02
    47fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4800:	9c 81       	ldd	r25, Y+4	; 0x04
    4802:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    4806:	18 16       	cp	r1, r24
    4808:	0c f4       	brge	.+2      	; 0x480c <Check_Erors+0x394>
    480a:	85 c0       	rjmp	.+266    	; 0x4916 <Check_Erors+0x49e>
		//else if (abs(comp->Src_In - comp->Src_Out) > EElimit->Delta_source_max && comp->checkErrors && EEpromData.AireToWater==0) {return (230+comp->Index);}
		//else if (abs(comp->Src_In - comp->Src_Out) <  EElimit->Delta_source_min && comp->checkErrors && EEpromData.AireToWater==0) {return (240+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out)  > EElimit->Delta_heating_max && comp->checkErrors) {return (250+comp->Index);}
    480c:	a3 01       	movw	r20, r6
    480e:	92 01       	movw	r18, r4
    4810:	c5 01       	movw	r24, r10
    4812:	b4 01       	movw	r22, r8
    4814:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    4818:	0e 94 97 52 	call	0xa52e	; 0xa52e <__fixsfsi>
    481c:	9b 01       	movw	r18, r22
    481e:	77 23       	and	r23, r23
    4820:	24 f4       	brge	.+8      	; 0x482a <Check_Erors+0x3b2>
    4822:	22 27       	eor	r18, r18
    4824:	33 27       	eor	r19, r19
    4826:	26 1b       	sub	r18, r22
    4828:	37 0b       	sbc	r19, r23
    482a:	c9 01       	movw	r24, r18
    482c:	d8 01       	movw	r26, r16
    482e:	54 96       	adiw	r26, 0x14	; 20
    4830:	2c 91       	ld	r18, X
    4832:	30 e0       	ldi	r19, 0x00	; 0
    4834:	28 17       	cp	r18, r24
    4836:	39 07       	cpc	r19, r25
    4838:	64 f4       	brge	.+24     	; 0x4852 <Check_Erors+0x3da>
    483a:	ed 81       	ldd	r30, Y+5	; 0x05
    483c:	fe 81       	ldd	r31, Y+6	; 0x06
    483e:	85 81       	ldd	r24, Z+5	; 0x05
    4840:	88 23       	and	r24, r24
    4842:	d1 f0       	breq	.+52     	; 0x4878 <Check_Erors+0x400>
    4844:	ee 58       	subi	r30, 0x8E	; 142
    4846:	ff 4f       	sbci	r31, 0xFF	; 255
    4848:	80 81       	ld	r24, Z
    484a:	91 81       	ldd	r25, Z+1	; 0x01
    484c:	86 50       	subi	r24, 0x06	; 6
    484e:	9f 4f       	sbci	r25, 0xFF	; 255
    4850:	88 c0       	rjmp	.+272    	; 0x4962 <Check_Erors+0x4ea>
		else if (abs(comp->Heat_In - comp->Heat_Out) < EElimit->Delta_heating_min &&  comp->checkErrors) {return (260+comp->Index);} 
    4852:	d8 01       	movw	r26, r16
    4854:	53 96       	adiw	r26, 0x13	; 19
    4856:	2c 91       	ld	r18, X
    4858:	30 e0       	ldi	r19, 0x00	; 0
    485a:	82 17       	cp	r24, r18
    485c:	93 07       	cpc	r25, r19
    485e:	64 f4       	brge	.+24     	; 0x4878 <Check_Erors+0x400>
    4860:	ed 81       	ldd	r30, Y+5	; 0x05
    4862:	fe 81       	ldd	r31, Y+6	; 0x06
    4864:	85 81       	ldd	r24, Z+5	; 0x05
    4866:	88 23       	and	r24, r24
    4868:	39 f0       	breq	.+14     	; 0x4878 <Check_Erors+0x400>
    486a:	ee 58       	subi	r30, 0x8E	; 142
    486c:	ff 4f       	sbci	r31, 0xFF	; 255
    486e:	80 81       	ld	r24, Z
    4870:	91 81       	ldd	r25, Z+1	; 0x01
    4872:	8c 5f       	subi	r24, 0xFC	; 252
    4874:	9e 4f       	sbci	r25, 0xFE	; 254
    4876:	75 c0       	rjmp	.+234    	; 0x4962 <Check_Erors+0x4ea>
		else if (!(ADE7758_getStatus() & ZXA) && EElimit->Power_380==1 && comp->Index==1){return 271;} // ADE7758_resetStatus();
    4878:	f9 dd       	rcall	.-1038   	; 0x446c <ADE7758_getStatus>
    487a:	71 fd       	sbrc	r23, 1
    487c:	0e c0       	rjmp	.+28     	; 0x489a <Check_Erors+0x422>
    487e:	d8 01       	movw	r26, r16
    4880:	99 96       	adiw	r26, 0x29	; 41
    4882:	8c 91       	ld	r24, X
    4884:	81 30       	cpi	r24, 0x01	; 1
    4886:	49 f4       	brne	.+18     	; 0x489a <Check_Erors+0x422>
    4888:	ed 81       	ldd	r30, Y+5	; 0x05
    488a:	fe 81       	ldd	r31, Y+6	; 0x06
    488c:	ee 58       	subi	r30, 0x8E	; 142
    488e:	ff 4f       	sbci	r31, 0xFF	; 255
    4890:	80 81       	ld	r24, Z
    4892:	91 81       	ldd	r25, Z+1	; 0x01
    4894:	01 97       	sbiw	r24, 0x01	; 1
    4896:	09 f4       	brne	.+2      	; 0x489a <Check_Erors+0x422>
		else if (!(ADE7758_getStatus() & ZXB) && EElimit->Power_380==1 && comp->Index==1){return 281;}//ADE7758_resetStatus();
    4898:	41 c0       	rjmp	.+130    	; 0x491c <Check_Erors+0x4a4>
    489a:	e8 dd       	rcall	.-1072   	; 0x446c <ADE7758_getStatus>
    489c:	72 fd       	sbrc	r23, 2
    489e:	0c c0       	rjmp	.+24     	; 0x48b8 <Check_Erors+0x440>
    48a0:	f8 01       	movw	r30, r16
    48a2:	81 a5       	ldd	r24, Z+41	; 0x29
    48a4:	81 30       	cpi	r24, 0x01	; 1
    48a6:	41 f4       	brne	.+16     	; 0x48b8 <Check_Erors+0x440>
    48a8:	ed 81       	ldd	r30, Y+5	; 0x05
    48aa:	fe 81       	ldd	r31, Y+6	; 0x06
    48ac:	ee 58       	subi	r30, 0x8E	; 142
    48ae:	ff 4f       	sbci	r31, 0xFF	; 255
    48b0:	80 81       	ld	r24, Z
    48b2:	91 81       	ldd	r25, Z+1	; 0x01
    48b4:	01 97       	sbiw	r24, 0x01	; 1
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 && comp->Index==1){return 291;}//ADE7758_resetStatus();
    48b6:	a9 f1       	breq	.+106    	; 0x4922 <Check_Erors+0x4aa>
    48b8:	d9 dd       	rcall	.-1102   	; 0x446c <ADE7758_getStatus>
    48ba:	73 fd       	sbrc	r23, 3
    48bc:	0d c0       	rjmp	.+26     	; 0x48d8 <Check_Erors+0x460>
    48be:	d8 01       	movw	r26, r16
    48c0:	99 96       	adiw	r26, 0x29	; 41
    48c2:	8c 91       	ld	r24, X
    48c4:	81 30       	cpi	r24, 0x01	; 1
    48c6:	41 f4       	brne	.+16     	; 0x48d8 <Check_Erors+0x460>
    48c8:	ed 81       	ldd	r30, Y+5	; 0x05
    48ca:	fe 81       	ldd	r31, Y+6	; 0x06
    48cc:	ee 58       	subi	r30, 0x8E	; 142
    48ce:	ff 4f       	sbci	r31, 0xFF	; 255
    48d0:	80 81       	ld	r24, Z
    48d2:	91 81       	ldd	r25, Z+1	; 0x01
    48d4:	01 97       	sbiw	r24, 0x01	; 1
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1 && comp->Index==1){return 301;}//ADE7758_resetStatus();
    48d6:	41 f1       	breq	.+80     	; 0x4928 <Check_Erors+0x4b0>
    48d8:	c9 dd       	rcall	.-1134   	; 0x446c <ADE7758_getStatus>
    48da:	83 fd       	sbrc	r24, 3
    48dc:	28 c0       	rjmp	.+80     	; 0x492e <Check_Erors+0x4b6>
    48de:	f8 01       	movw	r30, r16
    48e0:	81 a5       	ldd	r24, Z+41	; 0x29
    48e2:	81 30       	cpi	r24, 0x01	; 1
    48e4:	39 f5       	brne	.+78     	; 0x4934 <Check_Erors+0x4bc>
    48e6:	8d 81       	ldd	r24, Y+5	; 0x05
    48e8:	9e 81       	ldd	r25, Y+6	; 0x06
    48ea:	8e 58       	subi	r24, 0x8E	; 142
    48ec:	9f 4f       	sbci	r25, 0xFF	; 255
    48ee:	dc 01       	movw	r26, r24
    48f0:	8d 91       	ld	r24, X+
    48f2:	9c 91       	ld	r25, X
    48f4:	01 97       	sbiw	r24, 0x01	; 1
    48f6:	09 f5       	brne	.+66     	; 0x493a <Check_Erors+0x4c2>
    48f8:	8d e2       	ldi	r24, 0x2D	; 45
    48fa:	91 e0       	ldi	r25, 0x01	; 1
    48fc:	32 c0       	rjmp	.+100    	; 0x4962 <Check_Erors+0x4ea>
		else if (comp->Src_Out<-100) {return (60+comp->Index);}
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
    48fe:	85 e6       	ldi	r24, 0x65	; 101
    4900:	90 e0       	ldi	r25, 0x00	; 0
    4902:	2f c0       	rjmp	.+94     	; 0x4962 <Check_Erors+0x4ea>
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    4904:	86 e6       	ldi	r24, 0x66	; 102
    4906:	90 e0       	ldi	r25, 0x00	; 0
    4908:	2c c0       	rjmp	.+88     	; 0x4962 <Check_Erors+0x4ea>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    490a:	8f e6       	ldi	r24, 0x6F	; 111
    490c:	90 e0       	ldi	r25, 0x00	; 0
    490e:	29 c0       	rjmp	.+82     	; 0x4962 <Check_Erors+0x4ea>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    4910:	80 e7       	ldi	r24, 0x70	; 112
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	26 c0       	rjmp	.+76     	; 0x4962 <Check_Erors+0x4ea>
		else if ( comp->Bac_Temp < EElimit->Cool_Min && comp->Cooling==1){return (170+comp->Index);}
		//else if ( comp->SuperHeat < EElimit->MinSuperheat && comp->checkTrv) {return (180+comp->Index);}
		//else if ( comp->SuperHeat > EElimit->MaxSuperheat && comp->checkTrv && !comp->def) {return (190+comp->Index);}
		//else if ( comp->SuperCool < EElimit->MinSupercool && comp->checkTrv){return (200+comp->Index);}
		//else if ( comp->SuperCool > EElimit->MaxSupercool && comp->checkTrv && !comp->def){return (210+comp->Index);}
		else if ( comp->Ex_Comp > EElimit->ExhaustMax){return 220;}	
    4916:	8c ed       	ldi	r24, 0xDC	; 220
    4918:	90 e0       	ldi	r25, 0x00	; 0
    491a:	23 c0       	rjmp	.+70     	; 0x4962 <Check_Erors+0x4ea>
		//else if (abs(comp->Src_In - comp->Src_Out) > EElimit->Delta_source_max && comp->checkErrors && EEpromData.AireToWater==0) {return (230+comp->Index);}
		//else if (abs(comp->Src_In - comp->Src_Out) <  EElimit->Delta_source_min && comp->checkErrors && EEpromData.AireToWater==0) {return (240+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out)  > EElimit->Delta_heating_max && comp->checkErrors) {return (250+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out) < EElimit->Delta_heating_min &&  comp->checkErrors) {return (260+comp->Index);} 
		else if (!(ADE7758_getStatus() & ZXA) && EElimit->Power_380==1 && comp->Index==1){return 271;} // ADE7758_resetStatus();
    491c:	8f e0       	ldi	r24, 0x0F	; 15
    491e:	91 e0       	ldi	r25, 0x01	; 1
    4920:	20 c0       	rjmp	.+64     	; 0x4962 <Check_Erors+0x4ea>
		else if (!(ADE7758_getStatus() & ZXB) && EElimit->Power_380==1 && comp->Index==1){return 281;}//ADE7758_resetStatus();
    4922:	89 e1       	ldi	r24, 0x19	; 25
    4924:	91 e0       	ldi	r25, 0x01	; 1
    4926:	1d c0       	rjmp	.+58     	; 0x4962 <Check_Erors+0x4ea>
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 && comp->Index==1){return 291;}//ADE7758_resetStatus();
    4928:	83 e2       	ldi	r24, 0x23	; 35
    492a:	91 e0       	ldi	r25, 0x01	; 1
    492c:	1a c0       	rjmp	.+52     	; 0x4962 <Check_Erors+0x4ea>
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1 && comp->Index==1){return 301;}//ADE7758_resetStatus();
		//else if (comp->Src_In > EElimit->Source_Max){return (400+comp->Index);}
		//else if (comp->Src_In < EElimit->Source_Min){return (410+comp->Index);}			
		else {return 0;}
    492e:	80 e0       	ldi	r24, 0x00	; 0
    4930:	90 e0       	ldi	r25, 0x00	; 0
    4932:	17 c0       	rjmp	.+46     	; 0x4962 <Check_Erors+0x4ea>
    4934:	80 e0       	ldi	r24, 0x00	; 0
    4936:	90 e0       	ldi	r25, 0x00	; 0
    4938:	14 c0       	rjmp	.+40     	; 0x4962 <Check_Erors+0x4ea>
    493a:	80 e0       	ldi	r24, 0x00	; 0
    493c:	90 e0       	ldi	r25, 0x00	; 0
    493e:	11 c0       	rjmp	.+34     	; 0x4962 <Check_Erors+0x4ea>
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    4940:	4b 99       	sbic	0x09, 3	; 9
    4942:	b1 ce       	rjmp	.-670    	; 0x46a6 <Check_Erors+0x22e>
    4944:	08 c0       	rjmp	.+16     	; 0x4956 <Check_Erors+0x4de>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    4946:	65 99       	sbic	0x0c, 5	; 12
    4948:	c1 ce       	rjmp	.-638    	; 0x46cc <Check_Erors+0x254>
    494a:	ca ce       	rjmp	.-620    	; 0x46e0 <Check_Erors+0x268>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    494c:	8c b1       	in	r24, 0x0c	; 12
    494e:	d8 ce       	rjmp	.-592    	; 0x4700 <Check_Erors+0x288>
    4950:	65 99       	sbic	0x0c, 5	; 12
    4952:	cd ce       	rjmp	.-614    	; 0x46ee <Check_Erors+0x276>
    4954:	d5 ce       	rjmp	.-598    	; 0x4700 <Check_Erors+0x288>
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    4956:	65 99       	sbic	0x0c, 5	; 12
    4958:	b9 ce       	rjmp	.-654    	; 0x46cc <Check_Erors+0x254>
    495a:	c2 ce       	rjmp	.-636    	; 0x46e0 <Check_Erors+0x268>
    495c:	65 99       	sbic	0x0c, 5	; 12
    495e:	f6 cf       	rjmp	.-20     	; 0x494c <Check_Erors+0x4d4>
    4960:	bf ce       	rjmp	.-642    	; 0x46e0 <Check_Erors+0x268>
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 && comp->Index==1){return 291;}//ADE7758_resetStatus();
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1 && comp->Index==1){return 301;}//ADE7758_resetStatus();
		//else if (comp->Src_In > EElimit->Source_Max){return (400+comp->Index);}
		//else if (comp->Src_In < EElimit->Source_Min){return (410+comp->Index);}			
		else {return 0;}
    4962:	26 96       	adiw	r28, 0x06	; 6
    4964:	0f b6       	in	r0, 0x3f	; 63
    4966:	f8 94       	cli
    4968:	de bf       	out	0x3e, r29	; 62
    496a:	0f be       	out	0x3f, r0	; 63
    496c:	cd bf       	out	0x3d, r28	; 61
    496e:	df 91       	pop	r29
    4970:	cf 91       	pop	r28
    4972:	1f 91       	pop	r17
    4974:	0f 91       	pop	r16
    4976:	ff 90       	pop	r15
    4978:	ef 90       	pop	r14
    497a:	df 90       	pop	r13
    497c:	cf 90       	pop	r12
    497e:	bf 90       	pop	r11
    4980:	af 90       	pop	r10
    4982:	9f 90       	pop	r9
    4984:	8f 90       	pop	r8
    4986:	7f 90       	pop	r7
    4988:	6f 90       	pop	r6
    498a:	5f 90       	pop	r5
    498c:	4f 90       	pop	r4
    498e:	08 95       	ret

00004990 <start_1_Timer>:
	
	
}
void start_1_Timer()
{
	TIMSK1 |= (1<<OCIE1A);
    4990:	ef e6       	ldi	r30, 0x6F	; 111
    4992:	f0 e0       	ldi	r31, 0x00	; 0
    4994:	80 81       	ld	r24, Z
    4996:	82 60       	ori	r24, 0x02	; 2
    4998:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11);//1<<CS10 |
    499a:	e1 e8       	ldi	r30, 0x81	; 129
    499c:	f0 e0       	ldi	r31, 0x00	; 0
    499e:	80 81       	ld	r24, Z
    49a0:	82 60       	ori	r24, 0x02	; 2
    49a2:	80 83       	st	Z, r24
    49a4:	08 95       	ret

000049a6 <stop_1_Timer>:
	
}
void stop_1_Timer()
{
	TCCR1B &= ~ (1<<CS10);
    49a6:	e1 e8       	ldi	r30, 0x81	; 129
    49a8:	f0 e0       	ldi	r31, 0x00	; 0
    49aa:	80 81       	ld	r24, Z
    49ac:	8e 7f       	andi	r24, 0xFE	; 254
    49ae:	80 83       	st	Z, r24
	TCNT1=0;
    49b0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    49b4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TIMSK1 &= ~( _BV( OCIE1A ) );
    49b8:	ef e6       	ldi	r30, 0x6F	; 111
    49ba:	f0 e0       	ldi	r31, 0x00	; 0
    49bc:	80 81       	ld	r24, Z
    49be:	8d 7f       	andi	r24, 0xFD	; 253
    49c0:	80 83       	st	Z, r24
	TIFR1 |= _BV( OCF1A );
    49c2:	b1 9a       	sbi	0x16, 1	; 22
    49c4:	08 95       	ret

000049c6 <timer_1_Init>:
void timer_1_Init()
{
	// --- TIMER1_COMPA irq ---
	// selected time = 1562 us (24992 ticks)
	// prescaler = 1 (1 ticks ... 4.096 ms)
	TCCR1B = (1<<WGM12);//|(1<<CS10)
    49c6:	88 e0       	ldi	r24, 0x08	; 8
    49c8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	OCR1AH = 158 ;//158
    49cc:	8e e9       	ldi	r24, 0x9E	; 158
    49ce:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL =96;//96
    49d2:	80 e6       	ldi	r24, 0x60	; 96
    49d4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	stop_1_Timer();
    49d8:	e6 cf       	rjmp	.-52     	; 0x49a6 <stop_1_Timer>
    49da:	08 95       	ret

000049dc <readSysReg>:
	TIMSK1 &= ~( _BV( OCIE1A ) );
	TIFR1 |= _BV( OCF1A );
}

int readSysReg(xCompressor*compPtr,xEEdata *eeprom,uint16_t adress)
{
    49dc:	cf 93       	push	r28
    49de:	df 93       	push	r29
	int temp;
	switch(adress)
    49e0:	fa 01       	movw	r30, r20
    49e2:	3a 97       	sbiw	r30, 0x0a	; 10
    49e4:	e7 3d       	cpi	r30, 0xD7	; 215
    49e6:	41 e0       	ldi	r20, 0x01	; 1
    49e8:	f4 07       	cpc	r31, r20
    49ea:	08 f0       	brcs	.+2      	; 0x49ee <readSysReg+0x12>
    49ec:	11 c2       	rjmp	.+1058   	; 0x4e10 <readSysReg+0x434>
    49ee:	eb 01       	movw	r28, r22
    49f0:	dc 01       	movw	r26, r24
    49f2:	88 27       	eor	r24, r24
    49f4:	e4 56       	subi	r30, 0x64	; 100
    49f6:	ff 4f       	sbci	r31, 0xFF	; 255
    49f8:	8f 4f       	sbci	r24, 0xFF	; 255
    49fa:	0c 94 04 58 	jmp	0xb008	; 0xb008 <__tablejump2__>
	{
		case 11: case 12: temp =  (int)   compPtr->compOn;break;
    49fe:	1b 96       	adiw	r26, 0x0b	; 11
    4a00:	6c 91       	ld	r22, X
    4a02:	26 2f       	mov	r18, r22
    4a04:	30 e0       	ldi	r19, 0x00	; 0
    4a06:	04 c2       	rjmp	.+1032   	; 0x4e10 <readSysReg+0x434>
		case 21: case 22: temp =   (int)  compPtr->srcPOn;break;
    4a08:	1f 96       	adiw	r26, 0x0f	; 15
    4a0a:	6c 91       	ld	r22, X
    4a0c:	26 2f       	mov	r18, r22
    4a0e:	30 e0       	ldi	r19, 0x00	; 0
    4a10:	ff c1       	rjmp	.+1022   	; 0x4e10 <readSysReg+0x434>
		case 31: case 32: temp =   (int)  compPtr->heatPOn;break;
    4a12:	1c 96       	adiw	r26, 0x0c	; 12
    4a14:	6c 91       	ld	r22, X
    4a16:	26 2f       	mov	r18, r22
    4a18:	30 e0       	ldi	r19, 0x00	; 0
    4a1a:	fa c1       	rjmp	.+1012   	; 0x4e10 <readSysReg+0x434>
		case 41: case 42: temp =   (int)  compPtr->revVOn;break;
    4a1c:	1e 96       	adiw	r26, 0x0e	; 14
    4a1e:	6c 91       	ld	r22, X
    4a20:	26 2f       	mov	r18, r22
    4a22:	30 e0       	ldi	r19, 0x00	; 0
    4a24:	f5 c1       	rjmp	.+1002   	; 0x4e10 <readSysReg+0x434>
		case 51: case 52: temp =   (int)  compPtr->threeWOn;break;
    4a26:	1d 96       	adiw	r26, 0x0d	; 13
    4a28:	6c 91       	ld	r22, X
    4a2a:	26 2f       	mov	r18, r22
    4a2c:	30 e0       	ldi	r19, 0x00	; 0
    4a2e:	f0 c1       	rjmp	.+992    	; 0x4e10 <readSysReg+0x434>
		case 61: case 62: temp =   (int)  compPtr->Trv_position;break;
    4a30:	a2 59       	subi	r26, 0x92	; 146
    4a32:	bf 4f       	sbci	r27, 0xFF	; 255
    4a34:	2d 91       	ld	r18, X+
    4a36:	3c 91       	ld	r19, X
    4a38:	eb c1       	rjmp	.+982    	; 0x4e10 <readSysReg+0x434>
		
		case 71: case 72: temp =   (int)   (compPtr->Bac_Temp*10);break;
    4a3a:	20 e0       	ldi	r18, 0x00	; 0
    4a3c:	30 e0       	ldi	r19, 0x00	; 0
    4a3e:	40 e2       	ldi	r20, 0x20	; 32
    4a40:	51 e4       	ldi	r21, 0x41	; 65
    4a42:	56 96       	adiw	r26, 0x16	; 22
    4a44:	6d 91       	ld	r22, X+
    4a46:	7d 91       	ld	r23, X+
    4a48:	8d 91       	ld	r24, X+
    4a4a:	9c 91       	ld	r25, X
    4a4c:	59 97       	sbiw	r26, 0x19	; 25
    4a4e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    4a52:	0e 94 97 52 	call	0xa52e	; 0xa52e <__fixsfsi>
    4a56:	9b 01       	movw	r18, r22
    4a58:	db c1       	rjmp	.+950    	; 0x4e10 <readSysReg+0x434>
		case 81: case 82:  temp =   (int)  (compPtr->Dhw_Temp*10);break;
    4a5a:	20 e0       	ldi	r18, 0x00	; 0
    4a5c:	30 e0       	ldi	r19, 0x00	; 0
    4a5e:	40 e2       	ldi	r20, 0x20	; 32
    4a60:	51 e4       	ldi	r21, 0x41	; 65
    4a62:	52 96       	adiw	r26, 0x12	; 18
    4a64:	6d 91       	ld	r22, X+
    4a66:	7d 91       	ld	r23, X+
    4a68:	8d 91       	ld	r24, X+
    4a6a:	9c 91       	ld	r25, X
    4a6c:	55 97       	sbiw	r26, 0x15	; 21
    4a6e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    4a72:	0e 94 97 52 	call	0xa52e	; 0xa52e <__fixsfsi>
    4a76:	9b 01       	movw	r18, r22
    4a78:	cb c1       	rjmp	.+918    	; 0x4e10 <readSysReg+0x434>
		case 91:case 92:  temp =  (int)  (compPtr->Src_In*10);break;
    4a7a:	20 e0       	ldi	r18, 0x00	; 0
    4a7c:	30 e0       	ldi	r19, 0x00	; 0
    4a7e:	40 e2       	ldi	r20, 0x20	; 32
    4a80:	51 e4       	ldi	r21, 0x41	; 65
    4a82:	d2 96       	adiw	r26, 0x32	; 50
    4a84:	6d 91       	ld	r22, X+
    4a86:	7d 91       	ld	r23, X+
    4a88:	8d 91       	ld	r24, X+
    4a8a:	9c 91       	ld	r25, X
    4a8c:	d5 97       	sbiw	r26, 0x35	; 53
    4a8e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    4a92:	0e 94 97 52 	call	0xa52e	; 0xa52e <__fixsfsi>
    4a96:	9b 01       	movw	r18, r22
    4a98:	bb c1       	rjmp	.+886    	; 0x4e10 <readSysReg+0x434>
		case 101:case 102:  temp =  (int)  (compPtr->Src_Out*10);break;
    4a9a:	20 e0       	ldi	r18, 0x00	; 0
    4a9c:	30 e0       	ldi	r19, 0x00	; 0
    4a9e:	40 e2       	ldi	r20, 0x20	; 32
    4aa0:	51 e4       	ldi	r21, 0x41	; 65
    4aa2:	d6 96       	adiw	r26, 0x36	; 54
    4aa4:	6d 91       	ld	r22, X+
    4aa6:	7d 91       	ld	r23, X+
    4aa8:	8d 91       	ld	r24, X+
    4aaa:	9c 91       	ld	r25, X
    4aac:	d9 97       	sbiw	r26, 0x39	; 57
    4aae:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    4ab2:	0e 94 97 52 	call	0xa52e	; 0xa52e <__fixsfsi>
    4ab6:	9b 01       	movw	r18, r22
    4ab8:	ab c1       	rjmp	.+854    	; 0x4e10 <readSysReg+0x434>
		case 111:case 112: temp =   (int)  (compPtr->error);break;
    4aba:	a0 59       	subi	r26, 0x90	; 144
    4abc:	bf 4f       	sbci	r27, 0xFF	; 255
    4abe:	2d 91       	ld	r18, X+
    4ac0:	3c 91       	ld	r19, X
    4ac2:	a6 c1       	rjmp	.+844    	; 0x4e10 <readSysReg+0x434>
		case 121: case 122: temp =   (int)   (compPtr->Cond_Temp*10);break;
    4ac4:	ae 5b       	subi	r26, 0xBE	; 190
    4ac6:	bf 4f       	sbci	r27, 0xFF	; 255
    4ac8:	20 e0       	ldi	r18, 0x00	; 0
    4aca:	30 e0       	ldi	r19, 0x00	; 0
    4acc:	40 e2       	ldi	r20, 0x20	; 32
    4ace:	51 e4       	ldi	r21, 0x41	; 65
    4ad0:	6d 91       	ld	r22, X+
    4ad2:	7d 91       	ld	r23, X+
    4ad4:	8d 91       	ld	r24, X+
    4ad6:	9c 91       	ld	r25, X
    4ad8:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    4adc:	0e 94 97 52 	call	0xa52e	; 0xa52e <__fixsfsi>
    4ae0:	9b 01       	movw	r18, r22
    4ae2:	96 c1       	rjmp	.+812    	; 0x4e10 <readSysReg+0x434>
		case 131:case 132: temp =   (int)  (compPtr->Suc_Comp*10);break;
    4ae4:	de 96       	adiw	r26, 0x3e	; 62
    4ae6:	20 e0       	ldi	r18, 0x00	; 0
    4ae8:	30 e0       	ldi	r19, 0x00	; 0
    4aea:	40 e2       	ldi	r20, 0x20	; 32
    4aec:	51 e4       	ldi	r21, 0x41	; 65
    4aee:	6d 91       	ld	r22, X+
    4af0:	7d 91       	ld	r23, X+
    4af2:	8d 91       	ld	r24, X+
    4af4:	9c 91       	ld	r25, X
    4af6:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    4afa:	0e 94 97 52 	call	0xa52e	; 0xa52e <__fixsfsi>
    4afe:	9b 01       	movw	r18, r22
    4b00:	87 c1       	rjmp	.+782    	; 0x4e10 <readSysReg+0x434>
		case 141:case 142: temp =   (int)  (compPtr->SuperCool*10);break;
    4b02:	a6 5b       	subi	r26, 0xB6	; 182
    4b04:	bf 4f       	sbci	r27, 0xFF	; 255
    4b06:	20 e0       	ldi	r18, 0x00	; 0
    4b08:	30 e0       	ldi	r19, 0x00	; 0
    4b0a:	40 e2       	ldi	r20, 0x20	; 32
    4b0c:	51 e4       	ldi	r21, 0x41	; 65
    4b0e:	6d 91       	ld	r22, X+
    4b10:	7d 91       	ld	r23, X+
    4b12:	8d 91       	ld	r24, X+
    4b14:	9c 91       	ld	r25, X
    4b16:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    4b1a:	0e 94 97 52 	call	0xa52e	; 0xa52e <__fixsfsi>
    4b1e:	9b 01       	movw	r18, r22
    4b20:	77 c1       	rjmp	.+750    	; 0x4e10 <readSysReg+0x434>
		case 151:case 152: temp =   (int)  (compPtr->SuperHeat*10);break;
    4b22:	aa 5b       	subi	r26, 0xBA	; 186
    4b24:	bf 4f       	sbci	r27, 0xFF	; 255
    4b26:	20 e0       	ldi	r18, 0x00	; 0
    4b28:	30 e0       	ldi	r19, 0x00	; 0
    4b2a:	40 e2       	ldi	r20, 0x20	; 32
    4b2c:	51 e4       	ldi	r21, 0x41	; 65
    4b2e:	6d 91       	ld	r22, X+
    4b30:	7d 91       	ld	r23, X+
    4b32:	8d 91       	ld	r24, X+
    4b34:	9c 91       	ld	r25, X
    4b36:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    4b3a:	0e 94 97 52 	call	0xa52e	; 0xa52e <__fixsfsi>
    4b3e:	9b 01       	movw	r18, r22
    4b40:	67 c1       	rjmp	.+718    	; 0x4e10 <readSysReg+0x434>
		case 161:case 162:  temp =  (int)  (compPtr->Heat_In*10);break;
    4b42:	20 e0       	ldi	r18, 0x00	; 0
    4b44:	30 e0       	ldi	r19, 0x00	; 0
    4b46:	40 e2       	ldi	r20, 0x20	; 32
    4b48:	51 e4       	ldi	r21, 0x41	; 65
    4b4a:	9e 96       	adiw	r26, 0x2e	; 46
    4b4c:	6d 91       	ld	r22, X+
    4b4e:	7d 91       	ld	r23, X+
    4b50:	8d 91       	ld	r24, X+
    4b52:	9c 91       	ld	r25, X
    4b54:	d1 97       	sbiw	r26, 0x31	; 49
    4b56:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    4b5a:	0e 94 97 52 	call	0xa52e	; 0xa52e <__fixsfsi>
    4b5e:	9b 01       	movw	r18, r22
    4b60:	57 c1       	rjmp	.+686    	; 0x4e10 <readSysReg+0x434>
		case 171:case 172:  temp =  (int)  (compPtr->Heat_Out*10);break;		
    4b62:	20 e0       	ldi	r18, 0x00	; 0
    4b64:	30 e0       	ldi	r19, 0x00	; 0
    4b66:	40 e2       	ldi	r20, 0x20	; 32
    4b68:	51 e4       	ldi	r21, 0x41	; 65
    4b6a:	9a 96       	adiw	r26, 0x2a	; 42
    4b6c:	6d 91       	ld	r22, X+
    4b6e:	7d 91       	ld	r23, X+
    4b70:	8d 91       	ld	r24, X+
    4b72:	9c 91       	ld	r25, X
    4b74:	9d 97       	sbiw	r26, 0x2d	; 45
    4b76:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    4b7a:	0e 94 97 52 	call	0xa52e	; 0xa52e <__fixsfsi>
    4b7e:	9b 01       	movw	r18, r22
    4b80:	47 c1       	rjmp	.+654    	; 0x4e10 <readSysReg+0x434>
		case 181:case 182: temp =   (int)  (compPtr->High_Press*10);break;
    4b82:	20 e0       	ldi	r18, 0x00	; 0
    4b84:	30 e0       	ldi	r19, 0x00	; 0
    4b86:	40 e2       	ldi	r20, 0x20	; 32
    4b88:	51 e4       	ldi	r21, 0x41	; 65
    4b8a:	5a 96       	adiw	r26, 0x1a	; 26
    4b8c:	6d 91       	ld	r22, X+
    4b8e:	7d 91       	ld	r23, X+
    4b90:	8d 91       	ld	r24, X+
    4b92:	9c 91       	ld	r25, X
    4b94:	5d 97       	sbiw	r26, 0x1d	; 29
    4b96:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    4b9a:	0e 94 97 52 	call	0xa52e	; 0xa52e <__fixsfsi>
    4b9e:	9b 01       	movw	r18, r22
    4ba0:	37 c1       	rjmp	.+622    	; 0x4e10 <readSysReg+0x434>
		case 191:case 192: temp =   (int)  (compPtr->Low_Press*10);break;
    4ba2:	20 e0       	ldi	r18, 0x00	; 0
    4ba4:	30 e0       	ldi	r19, 0x00	; 0
    4ba6:	40 e2       	ldi	r20, 0x20	; 32
    4ba8:	51 e4       	ldi	r21, 0x41	; 65
    4baa:	5e 96       	adiw	r26, 0x1e	; 30
    4bac:	6d 91       	ld	r22, X+
    4bae:	7d 91       	ld	r23, X+
    4bb0:	8d 91       	ld	r24, X+
    4bb2:	9c 91       	ld	r25, X
    4bb4:	91 97       	sbiw	r26, 0x21	; 33
    4bb6:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    4bba:	0e 94 97 52 	call	0xa52e	; 0xa52e <__fixsfsi>
    4bbe:	9b 01       	movw	r18, r22
    4bc0:	27 c1       	rjmp	.+590    	; 0x4e10 <readSysReg+0x434>
		case 201:case 202: temp =   (int)  (compPtr->Ex_Comp);break;
    4bc2:	da 96       	adiw	r26, 0x3a	; 58
    4bc4:	6d 91       	ld	r22, X+
    4bc6:	7d 91       	ld	r23, X+
    4bc8:	8d 91       	ld	r24, X+
    4bca:	9c 91       	ld	r25, X
    4bcc:	dd 97       	sbiw	r26, 0x3d	; 61
    4bce:	0e 94 97 52 	call	0xa52e	; 0xa52e <__fixsfsi>
    4bd2:	9b 01       	movw	r18, r22
    4bd4:	1d c1       	rjmp	.+570    	; 0x4e10 <readSysReg+0x434>
		
	
		
		//-----------------------------------eeprom--------
		case 10:  temp =    eeprom->Compressor_delay;break;
    4bd6:	68 81       	ld	r22, Y
    4bd8:	26 2f       	mov	r18, r22
    4bda:	30 e0       	ldi	r19, 0x00	; 0
    4bdc:	19 c1       	rjmp	.+562    	; 0x4e10 <readSysReg+0x434>
		case 20:  temp =    eeprom->HeatingPump_delay;break;
    4bde:	6b 81       	ldd	r22, Y+3	; 0x03
    4be0:	26 2f       	mov	r18, r22
    4be2:	30 e0       	ldi	r19, 0x00	; 0
    4be4:	15 c1       	rjmp	.+554    	; 0x4e10 <readSysReg+0x434>
		case 30:  temp =    eeprom->Source_Pump_delay;break;
    4be6:	69 81       	ldd	r22, Y+1	; 0x01
    4be8:	26 2f       	mov	r18, r22
    4bea:	30 e0       	ldi	r19, 0x00	; 0
    4bec:	11 c1       	rjmp	.+546    	; 0x4e10 <readSysReg+0x434>
		case 40:  temp =    eeprom->Revers_Valve_delay;break;
    4bee:	6a 81       	ldd	r22, Y+2	; 0x02
    4bf0:	26 2f       	mov	r18, r22
    4bf2:	30 e0       	ldi	r19, 0x00	; 0
    4bf4:	0d c1       	rjmp	.+538    	; 0x4e10 <readSysReg+0x434>
		case 50:  temp =    eeprom->Three_Way_delay;break;
    4bf6:	6c 81       	ldd	r22, Y+4	; 0x04
    4bf8:	26 2f       	mov	r18, r22
    4bfa:	30 e0       	ldi	r19, 0x00	; 0
    4bfc:	09 c1       	rjmp	.+530    	; 0x4e10 <readSysReg+0x434>
		case 60:  temp =    (int)  eeprom->Cool_Max;break;
    4bfe:	6c 85       	ldd	r22, Y+12	; 0x0c
    4c00:	26 2f       	mov	r18, r22
    4c02:	30 e0       	ldi	r19, 0x00	; 0
    4c04:	05 c1       	rjmp	.+522    	; 0x4e10 <readSysReg+0x434>
		case 70:  temp =    (int)  eeprom->Cool_Min;break;
    4c06:	6d 85       	ldd	r22, Y+13	; 0x0d
    4c08:	26 2f       	mov	r18, r22
    4c0a:	30 e0       	ldi	r19, 0x00	; 0
    4c0c:	01 c1       	rjmp	.+514    	; 0x4e10 <readSysReg+0x434>
		case 80:  temp =    (int)  eeprom->HEAT_Max;break;
    4c0e:	69 85       	ldd	r22, Y+9	; 0x09
    4c10:	26 2f       	mov	r18, r22
    4c12:	30 e0       	ldi	r19, 0x00	; 0
    4c14:	fd c0       	rjmp	.+506    	; 0x4e10 <readSysReg+0x434>
		case 90:  temp =    (int)  eeprom->HEAT_Min;break;
    4c16:	6a 85       	ldd	r22, Y+10	; 0x0a
    4c18:	26 2f       	mov	r18, r22
    4c1a:	30 e0       	ldi	r19, 0x00	; 0
    4c1c:	f9 c0       	rjmp	.+498    	; 0x4e10 <readSysReg+0x434>
		case 100: temp =    (int)  eeprom->Delta_heating_max;break;
    4c1e:	6c 89       	ldd	r22, Y+20	; 0x14
    4c20:	26 2f       	mov	r18, r22
    4c22:	30 e0       	ldi	r19, 0x00	; 0
    4c24:	f5 c0       	rjmp	.+490    	; 0x4e10 <readSysReg+0x434>
		case 110: temp =    (int)  eeprom->Delta_heating_min;break;
    4c26:	6b 89       	ldd	r22, Y+19	; 0x13
    4c28:	26 2f       	mov	r18, r22
    4c2a:	30 e0       	ldi	r19, 0x00	; 0
    4c2c:	f1 c0       	rjmp	.+482    	; 0x4e10 <readSysReg+0x434>
		case 120: temp =    (int)  eeprom->Delta_source_max;break;
    4c2e:	6e 89       	ldd	r22, Y+22	; 0x16
    4c30:	26 2f       	mov	r18, r22
    4c32:	30 e0       	ldi	r19, 0x00	; 0
    4c34:	ed c0       	rjmp	.+474    	; 0x4e10 <readSysReg+0x434>
		case 130: temp =    (int)  eeprom->Delta_source_min;break;
    4c36:	6d 89       	ldd	r22, Y+21	; 0x15
    4c38:	26 2f       	mov	r18, r22
    4c3a:	30 e0       	ldi	r19, 0x00	; 0
    4c3c:	e9 c0       	rjmp	.+466    	; 0x4e10 <readSysReg+0x434>
		case 140: temp =    (int)  eeprom->diffCOOL;break;
    4c3e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4c40:	26 2f       	mov	r18, r22
    4c42:	30 e0       	ldi	r19, 0x00	; 0
    4c44:	e5 c0       	rjmp	.+458    	; 0x4e10 <readSysReg+0x434>
		case 150: temp =    (int)  eeprom->diffDHW ;break;
    4c46:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4c48:	26 2f       	mov	r18, r22
    4c4a:	30 e0       	ldi	r19, 0x00	; 0
    4c4c:	e1 c0       	rjmp	.+450    	; 0x4e10 <readSysReg+0x434>
		case 160: temp =    (int)  eeprom->diffHEAT;break;
    4c4e:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4c50:	26 2f       	mov	r18, r22
    4c52:	30 e0       	ldi	r19, 0x00	; 0
    4c54:	dd c0       	rjmp	.+442    	; 0x4e10 <readSysReg+0x434>
		case 170: temp =    (int)  eeprom->AireToWater;break;
    4c56:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4c58:	26 2f       	mov	r18, r22
    4c5a:	30 e0       	ldi	r19, 0x00	; 0
    4c5c:	d9 c0       	rjmp	.+434    	; 0x4e10 <readSysReg+0x434>
		case 180: temp =    (int)  eeprom->ExhaustMax;break;
    4c5e:	6e 85       	ldd	r22, Y+14	; 0x0e
    4c60:	26 2f       	mov	r18, r22
    4c62:	30 e0       	ldi	r19, 0x00	; 0
    4c64:	d5 c0       	rjmp	.+426    	; 0x4e10 <readSysReg+0x434>
		case 190: temp =    (int)  eeprom->cool;break;
    4c66:	6f a1       	ldd	r22, Y+39	; 0x27
    4c68:	26 2f       	mov	r18, r22
    4c6a:	30 e0       	ldi	r19, 0x00	; 0
    4c6c:	d1 c0       	rjmp	.+418    	; 0x4e10 <readSysReg+0x434>
		case 200: temp =    (int)  eeprom->heat;break;
    4c6e:	6e a1       	ldd	r22, Y+38	; 0x26
    4c70:	26 2f       	mov	r18, r22
    4c72:	30 e0       	ldi	r19, 0x00	; 0
    4c74:	cd c0       	rjmp	.+410    	; 0x4e10 <readSysReg+0x434>
		case 210: temp =    (int)  eeprom->heatWater;break;
    4c76:	6d a1       	ldd	r22, Y+37	; 0x25
    4c78:	26 2f       	mov	r18, r22
    4c7a:	30 e0       	ldi	r19, 0x00	; 0
    4c7c:	c9 c0       	rjmp	.+402    	; 0x4e10 <readSysReg+0x434>
		case 220: temp =    (int)  eeprom->HP_Max;break;
    4c7e:	6e 81       	ldd	r22, Y+6	; 0x06
    4c80:	26 2f       	mov	r18, r22
    4c82:	30 e0       	ldi	r19, 0x00	; 0
    4c84:	c5 c0       	rjmp	.+394    	; 0x4e10 <readSysReg+0x434>
		case 230: temp =    (int)  eeprom->LP_Max;break;
    4c86:	68 85       	ldd	r22, Y+8	; 0x08
    4c88:	26 2f       	mov	r18, r22
    4c8a:	30 e0       	ldi	r19, 0x00	; 0
    4c8c:	c1 c0       	rjmp	.+386    	; 0x4e10 <readSysReg+0x434>
		case 240: temp =    (int)  eeprom->HP_Min;break;
    4c8e:	6f 81       	ldd	r22, Y+7	; 0x07
    4c90:	26 2f       	mov	r18, r22
    4c92:	30 e0       	ldi	r19, 0x00	; 0
    4c94:	bd c0       	rjmp	.+378    	; 0x4e10 <readSysReg+0x434>
		case 250: temp =    (int)  eeprom->LP_Min;break;
    4c96:	fb 01       	movw	r30, r22
    4c98:	e4 5a       	subi	r30, 0xA4	; 164
    4c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9c:	60 81       	ld	r22, Z
    4c9e:	71 81       	ldd	r23, Z+1	; 0x01
    4ca0:	82 81       	ldd	r24, Z+2	; 0x02
    4ca2:	93 81       	ldd	r25, Z+3	; 0x03
    4ca4:	0e 94 97 52 	call	0xa52e	; 0xa52e <__fixsfsi>
    4ca8:	9b 01       	movw	r18, r22
    4caa:	b2 c0       	rjmp	.+356    	; 0x4e10 <readSysReg+0x434>
		case 260: temp =    (int)  eeprom->MaxSupercool;break;
    4cac:	6a 89       	ldd	r22, Y+18	; 0x12
    4cae:	26 2f       	mov	r18, r22
    4cb0:	30 e0       	ldi	r19, 0x00	; 0
    4cb2:	ae c0       	rjmp	.+348    	; 0x4e10 <readSysReg+0x434>
		case 270: temp =    (int)  eeprom->MinSupercool;break;
    4cb4:	69 89       	ldd	r22, Y+17	; 0x11
    4cb6:	26 2f       	mov	r18, r22
    4cb8:	30 e0       	ldi	r19, 0x00	; 0
    4cba:	aa c0       	rjmp	.+340    	; 0x4e10 <readSysReg+0x434>
		case 280: temp =    (int)  eeprom->MaxSuperheat;break;
    4cbc:	68 89       	ldd	r22, Y+16	; 0x10
    4cbe:	26 2f       	mov	r18, r22
    4cc0:	30 e0       	ldi	r19, 0x00	; 0
    4cc2:	a6 c0       	rjmp	.+332    	; 0x4e10 <readSysReg+0x434>
		case 290: temp =    (int)  eeprom->MinSuperheat;break;
    4cc4:	6f 85       	ldd	r22, Y+15	; 0x0f
    4cc6:	26 2f       	mov	r18, r22
    4cc8:	30 e0       	ldi	r19, 0x00	; 0
    4cca:	a2 c0       	rjmp	.+324    	; 0x4e10 <readSysReg+0x434>
		case 300: temp =    (int)  eeprom->number_turnon_threeway;break;
    4ccc:	fb 01       	movw	r30, r22
    4cce:	ea 5b       	subi	r30, 0xBA	; 186
    4cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd2:	20 81       	ld	r18, Z
    4cd4:	31 81       	ldd	r19, Z+1	; 0x01
    4cd6:	9c c0       	rjmp	.+312    	; 0x4e10 <readSysReg+0x434>
		case 310: temp =    (int)  eeprom->power;break;
    4cd8:	6c a1       	ldd	r22, Y+36	; 0x24
    4cda:	26 2f       	mov	r18, r22
    4cdc:	30 e0       	ldi	r19, 0x00	; 0
    4cde:	98 c0       	rjmp	.+304    	; 0x4e10 <readSysReg+0x434>
		case 320: temp =    (int)  eeprom->Set_Cooling;break;
    4ce0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4ce2:	26 2f       	mov	r18, r22
    4ce4:	30 e0       	ldi	r19, 0x00	; 0
    4ce6:	94 c0       	rjmp	.+296    	; 0x4e10 <readSysReg+0x434>
		case 330: temp =    (int)  eeprom->Set_DHW;break;
    4ce8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    4cea:	26 2f       	mov	r18, r22
    4cec:	30 e0       	ldi	r19, 0x00	; 0
    4cee:	90 c0       	rjmp	.+288    	; 0x4e10 <readSysReg+0x434>
		case 340: temp =    (int)  eeprom->Set_Heating;break;
    4cf0:	69 8d       	ldd	r22, Y+25	; 0x19
    4cf2:	26 2f       	mov	r18, r22
    4cf4:	30 e0       	ldi	r19, 0x00	; 0
    4cf6:	8c c0       	rjmp	.+280    	; 0x4e10 <readSysReg+0x434>
		case 350: temp =    (int)  eeprom->TempDef;break;
    4cf8:	2a a5       	ldd	r18, Y+42	; 0x2a
    4cfa:	3b a5       	ldd	r19, Y+43	; 0x2b
    4cfc:	89 c0       	rjmp	.+274    	; 0x4e10 <readSysReg+0x434>
		case 360: temp =    (int)  eeprom->TimeDef;break;
    4cfe:	69 a1       	ldd	r22, Y+33	; 0x21
    4d00:	26 2f       	mov	r18, r22
    4d02:	30 e0       	ldi	r19, 0x00	; 0
    4d04:	85 c0       	rjmp	.+266    	; 0x4e10 <readSysReg+0x434>
		
		
		case 370: temp =    (int)  eeprom->TempOut;break;
    4d06:	2e a5       	ldd	r18, Y+46	; 0x2e
    4d08:	3f a5       	ldd	r19, Y+47	; 0x2f
    4d0a:	82 c0       	rjmp	.+260    	; 0x4e10 <readSysReg+0x434>
		case 380: temp =    (int)  eeprom->TempStopDef;break;
    4d0c:	2c a5       	ldd	r18, Y+44	; 0x2c
    4d0e:	3d a5       	ldd	r19, Y+45	; 0x2d
    4d10:	7f c0       	rjmp	.+254    	; 0x4e10 <readSysReg+0x434>
		case 390: temp =    (int)  eeprom->time_threeway;break;
    4d12:	2c ad       	ldd	r18, Y+60	; 0x3c
    4d14:	3d ad       	ldd	r19, Y+61	; 0x3d
    4d16:	7c c0       	rjmp	.+248    	; 0x4e10 <readSysReg+0x434>
		case 400: temp =    (int)  eeprom->NombComp;break;
    4d18:	68 a1       	ldd	r22, Y+32	; 0x20
    4d1a:	26 2f       	mov	r18, r22
    4d1c:	30 e0       	ldi	r19, 0x00	; 0
    4d1e:	78 c0       	rjmp	.+240    	; 0x4e10 <readSysReg+0x434>
		case 410: temp =    (int)  eeprom->reversMod;break;
    4d20:	68 a5       	ldd	r22, Y+40	; 0x28
    4d22:	26 2f       	mov	r18, r22
    4d24:	30 e0       	ldi	r19, 0x00	; 0
    4d26:	74 c0       	rjmp	.+232    	; 0x4e10 <readSysReg+0x434>
		case 420: temp =    (int)  eeprom->TRV_Delay;break;
    4d28:	6d 81       	ldd	r22, Y+5	; 0x05
    4d2a:	26 2f       	mov	r18, r22
    4d2c:	30 e0       	ldi	r19, 0x00	; 0
    4d2e:	70 c0       	rjmp	.+224    	; 0x4e10 <readSysReg+0x434>
		case 430: temp =    (int)  eeprom->Source_Max;break;
    4d30:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d32:	26 2f       	mov	r18, r22
    4d34:	30 e0       	ldi	r19, 0x00	; 0
    4d36:	6c c0       	rjmp	.+216    	; 0x4e10 <readSysReg+0x434>
		case 440: temp =    (int)  eeprom->Source_Min;break;
    4d38:	28 a9       	ldd	r18, Y+48	; 0x30
    4d3a:	39 a9       	ldd	r19, Y+49	; 0x31
    4d3c:	69 c0       	rjmp	.+210    	; 0x4e10 <readSysReg+0x434>
		case 450: temp =    (int)  eeprom->Delta_dhw_max;break;
    4d3e:	68 8d       	ldd	r22, Y+24	; 0x18
    4d40:	26 2f       	mov	r18, r22
    4d42:	30 e0       	ldi	r19, 0x00	; 0
    4d44:	65 c0       	rjmp	.+202    	; 0x4e10 <readSysReg+0x434>
		case 460: temp =    (int)  eeprom->Delta_dhw_min;break;
    4d46:	6f 89       	ldd	r22, Y+23	; 0x17
    4d48:	26 2f       	mov	r18, r22
    4d4a:	30 e0       	ldi	r19, 0x00	; 0
    4d4c:	61 c0       	rjmp	.+194    	; 0x4e10 <readSysReg+0x434>
		case 470: temp =    (int)  eeprom->Power_380;break;
    4d4e:	69 a5       	ldd	r22, Y+41	; 0x29
    4d50:	26 2f       	mov	r18, r22
    4d52:	30 e0       	ldi	r19, 0x00	; 0
    4d54:	5d c0       	rjmp	.+186    	; 0x4e10 <readSysReg+0x434>
		case 480: temp =    (int)  eeprom->TimeBetweenDef;break;
    4d56:	6a a1       	ldd	r22, Y+34	; 0x22
    4d58:	26 2f       	mov	r18, r22
    4d5a:	30 e0       	ldi	r19, 0x00	; 0
    4d5c:	59 c0       	rjmp	.+178    	; 0x4e10 <readSysReg+0x434>
		//case 500: temp =    (int)  compPtr-> Curr_A;break;
		//case 510: temp =    (int)  compPtr-> Curr_B;break;
		//case 520: temp =    (int)  compPtr-> Curr_C;break;
		
		//--------------------------------------
		case 301: temp =    (int)  eeprom->number_turnon_compressor_1;break;
    4d5e:	2e ad       	ldd	r18, Y+62	; 0x3e
    4d60:	3f ad       	ldd	r19, Y+63	; 0x3f
    4d62:	56 c0       	rjmp	.+172    	; 0x4e10 <readSysReg+0x434>
		case 311: temp =    (int)  eeprom->number_turnon_hiter_1;break;
    4d64:	fb 01       	movw	r30, r22
    4d66:	ee 5b       	subi	r30, 0xBE	; 190
    4d68:	ff 4f       	sbci	r31, 0xFF	; 255
    4d6a:	20 81       	ld	r18, Z
    4d6c:	31 81       	ldd	r19, Z+1	; 0x01
    4d6e:	50 c0       	rjmp	.+160    	; 0x4e10 <readSysReg+0x434>
		case 321: temp =    (int)  eeprom->number_turnon_revers_1;break;
    4d70:	fb 01       	movw	r30, r22
    4d72:	ec 5b       	subi	r30, 0xBC	; 188
    4d74:	ff 4f       	sbci	r31, 0xFF	; 255
    4d76:	20 81       	ld	r18, Z
    4d78:	31 81       	ldd	r19, Z+1	; 0x01
    4d7a:	4a c0       	rjmp	.+148    	; 0x4e10 <readSysReg+0x434>
		case 331: temp =    (int)  eeprom->number_turnon_source_1;break;
    4d7c:	fb 01       	movw	r30, r22
    4d7e:	e0 5c       	subi	r30, 0xC0	; 192
    4d80:	ff 4f       	sbci	r31, 0xFF	; 255
    4d82:	20 81       	ld	r18, Z
    4d84:	31 81       	ldd	r19, Z+1	; 0x01
    4d86:	44 c0       	rjmp	.+136    	; 0x4e10 <readSysReg+0x434>
		case 341: temp =    (int)  eeprom->time_compressor_1;break;
    4d88:	2a ad       	ldd	r18, Y+58	; 0x3a
    4d8a:	3b ad       	ldd	r19, Y+59	; 0x3b
    4d8c:	41 c0       	rjmp	.+130    	; 0x4e10 <readSysReg+0x434>
		case 351: temp =    (int)  eeprom->time_pump_hiter_1;break;
    4d8e:	2c a9       	ldd	r18, Y+52	; 0x34
    4d90:	3d a9       	ldd	r19, Y+53	; 0x35
    4d92:	3e c0       	rjmp	.+124    	; 0x4e10 <readSysReg+0x434>
		case 371: temp =    (int)  eeprom->time_pump_source_1;break;
    4d94:	2e a9       	ldd	r18, Y+54	; 0x36
    4d96:	3f a9       	ldd	r19, Y+55	; 0x37
    4d98:	3b c0       	rjmp	.+118    	; 0x4e10 <readSysReg+0x434>
		case 381: temp =    (int)  eeprom->time_revers_1;break;
    4d9a:	28 ad       	ldd	r18, Y+56	; 0x38
    4d9c:	39 ad       	ldd	r19, Y+57	; 0x39
    4d9e:	38 c0       	rjmp	.+112    	; 0x4e10 <readSysReg+0x434>
		case 391: temp =    (int)  eeprom->trv_corection_1;break;
    4da0:	2a a9       	ldd	r18, Y+50	; 0x32
    4da2:	3b a9       	ldd	r19, Y+51	; 0x33
    4da4:	35 c0       	rjmp	.+106    	; 0x4e10 <readSysReg+0x434>
		//------------------------------------
		case 302: temp =    (int)  eeprom->number_turnon_compressor_2;break;
    4da6:	fb 01       	movw	r30, r22
    4da8:	ee 5a       	subi	r30, 0xAE	; 174
    4daa:	ff 4f       	sbci	r31, 0xFF	; 255
    4dac:	20 81       	ld	r18, Z
    4dae:	31 81       	ldd	r19, Z+1	; 0x01
    4db0:	2f c0       	rjmp	.+94     	; 0x4e10 <readSysReg+0x434>
		case 312: temp =    (int)  eeprom->number_turnon_hiter_2;break;
    4db2:	fb 01       	movw	r30, r22
    4db4:	ea 5a       	subi	r30, 0xAA	; 170
    4db6:	ff 4f       	sbci	r31, 0xFF	; 255
    4db8:	20 81       	ld	r18, Z
    4dba:	31 81       	ldd	r19, Z+1	; 0x01
    4dbc:	29 c0       	rjmp	.+82     	; 0x4e10 <readSysReg+0x434>
		case 322: temp =    (int)  eeprom->number_turnon_revers_2;break;
    4dbe:	fb 01       	movw	r30, r22
    4dc0:	e8 5a       	subi	r30, 0xA8	; 168
    4dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc4:	20 81       	ld	r18, Z
    4dc6:	31 81       	ldd	r19, Z+1	; 0x01
    4dc8:	23 c0       	rjmp	.+70     	; 0x4e10 <readSysReg+0x434>
		case 332: temp =    (int)  eeprom->number_turnon_source_2;break;
    4dca:	fb 01       	movw	r30, r22
    4dcc:	ec 5a       	subi	r30, 0xAC	; 172
    4dce:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd0:	20 81       	ld	r18, Z
    4dd2:	31 81       	ldd	r19, Z+1	; 0x01
    4dd4:	1d c0       	rjmp	.+58     	; 0x4e10 <readSysReg+0x434>
		case 342: temp =    (int)  eeprom->time_compressor_2;break;
    4dd6:	fb 01       	movw	r30, r22
    4dd8:	e0 5b       	subi	r30, 0xB0	; 176
    4dda:	ff 4f       	sbci	r31, 0xFF	; 255
    4ddc:	20 81       	ld	r18, Z
    4dde:	31 81       	ldd	r19, Z+1	; 0x01
    4de0:	17 c0       	rjmp	.+46     	; 0x4e10 <readSysReg+0x434>
		case 352: temp =    (int)  eeprom->time_pump_hiter_2;break;
    4de2:	fb 01       	movw	r30, r22
    4de4:	e6 5b       	subi	r30, 0xB6	; 182
    4de6:	ff 4f       	sbci	r31, 0xFF	; 255
    4de8:	20 81       	ld	r18, Z
    4dea:	31 81       	ldd	r19, Z+1	; 0x01
    4dec:	11 c0       	rjmp	.+34     	; 0x4e10 <readSysReg+0x434>
		case 372: temp =    (int)  eeprom->time_pump_source_2;break;
    4dee:	fb 01       	movw	r30, r22
    4df0:	e4 5b       	subi	r30, 0xB4	; 180
    4df2:	ff 4f       	sbci	r31, 0xFF	; 255
    4df4:	20 81       	ld	r18, Z
    4df6:	31 81       	ldd	r19, Z+1	; 0x01
    4df8:	0b c0       	rjmp	.+22     	; 0x4e10 <readSysReg+0x434>
		case 382: temp =    (int)  eeprom->time_revers_2;break;
    4dfa:	fb 01       	movw	r30, r22
    4dfc:	e2 5b       	subi	r30, 0xB2	; 178
    4dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4e00:	20 81       	ld	r18, Z
    4e02:	31 81       	ldd	r19, Z+1	; 0x01
    4e04:	05 c0       	rjmp	.+10     	; 0x4e10 <readSysReg+0x434>
		case 392: temp =    (int)  eeprom->trv_corection_2;break;
    4e06:	fb 01       	movw	r30, r22
    4e08:	e8 5b       	subi	r30, 0xB8	; 184
    4e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e0c:	20 81       	ld	r18, Z
    4e0e:	31 81       	ldd	r19, Z+1	; 0x01
		
	}
	return temp;
}
    4e10:	c9 01       	movw	r24, r18
    4e12:	df 91       	pop	r29
    4e14:	cf 91       	pop	r28
    4e16:	08 95       	ret

00004e18 <writeSysReg>:
void writeSysReg(xEEdata*comp,uint16_t adress,uint16_t value)
{
    4e18:	cf 93       	push	r28
    4e1a:	df 93       	push	r29
    4e1c:	dc 01       	movw	r26, r24
	
	switch(adress)
    4e1e:	fb 01       	movw	r30, r22
    4e20:	3a 97       	sbiw	r30, 0x0a	; 10
    4e22:	e7 3d       	cpi	r30, 0xD7	; 215
    4e24:	81 e0       	ldi	r24, 0x01	; 1
    4e26:	f8 07       	cpc	r31, r24
    4e28:	08 f0       	brcs	.+2      	; 0x4e2c <writeSysReg+0x14>
    4e2a:	bb c0       	rjmp	.+374    	; 0x4fa2 <writeSysReg+0x18a>
    4e2c:	88 27       	eor	r24, r24
    4e2e:	ed 58       	subi	r30, 0x8D	; 141
    4e30:	fd 4f       	sbci	r31, 0xFD	; 253
    4e32:	8f 4f       	sbci	r24, 0xFF	; 255
    4e34:	0c 94 04 58 	jmp	0xb008	; 0xb008 <__tablejump2__>
	{
		case 10:  comp->Compressor_delay  = value;break;
    4e38:	4c 93       	st	X, r20
    4e3a:	b3 c0       	rjmp	.+358    	; 0x4fa2 <writeSysReg+0x18a>
		case 20:  comp->HeatingPump_delay = value;break;
    4e3c:	13 96       	adiw	r26, 0x03	; 3
    4e3e:	4c 93       	st	X, r20
    4e40:	b0 c0       	rjmp	.+352    	; 0x4fa2 <writeSysReg+0x18a>
		case 30:  comp->Source_Pump_delay = value;break;
    4e42:	11 96       	adiw	r26, 0x01	; 1
    4e44:	4c 93       	st	X, r20
    4e46:	ad c0       	rjmp	.+346    	; 0x4fa2 <writeSysReg+0x18a>
		case 40:  comp->Revers_Valve_delay = value;break;
    4e48:	12 96       	adiw	r26, 0x02	; 2
    4e4a:	4c 93       	st	X, r20
    4e4c:	aa c0       	rjmp	.+340    	; 0x4fa2 <writeSysReg+0x18a>
		case 50:  comp->Three_Way_delay  = value;break;
    4e4e:	14 96       	adiw	r26, 0x04	; 4
    4e50:	4c 93       	st	X, r20
    4e52:	a7 c0       	rjmp	.+334    	; 0x4fa2 <writeSysReg+0x18a>
		case 60:  comp->Cool_Max = value;break;
    4e54:	1c 96       	adiw	r26, 0x0c	; 12
    4e56:	4c 93       	st	X, r20
    4e58:	a4 c0       	rjmp	.+328    	; 0x4fa2 <writeSysReg+0x18a>
		case 70:  comp->Cool_Min = value;break;
    4e5a:	1d 96       	adiw	r26, 0x0d	; 13
    4e5c:	4c 93       	st	X, r20
    4e5e:	a1 c0       	rjmp	.+322    	; 0x4fa2 <writeSysReg+0x18a>
		case 80:  comp->HEAT_Max  = value;break;
    4e60:	19 96       	adiw	r26, 0x09	; 9
    4e62:	4c 93       	st	X, r20
    4e64:	9e c0       	rjmp	.+316    	; 0x4fa2 <writeSysReg+0x18a>
		case 90:  comp->HEAT_Min = value;break;
    4e66:	1a 96       	adiw	r26, 0x0a	; 10
    4e68:	4c 93       	st	X, r20
    4e6a:	9b c0       	rjmp	.+310    	; 0x4fa2 <writeSysReg+0x18a>
		case 100: comp->Delta_heating_max  = value;break;
    4e6c:	54 96       	adiw	r26, 0x14	; 20
    4e6e:	4c 93       	st	X, r20
    4e70:	98 c0       	rjmp	.+304    	; 0x4fa2 <writeSysReg+0x18a>
		case 110: comp->Delta_heating_min  = value;break;
    4e72:	53 96       	adiw	r26, 0x13	; 19
    4e74:	4c 93       	st	X, r20
    4e76:	95 c0       	rjmp	.+298    	; 0x4fa2 <writeSysReg+0x18a>
		case 120: comp->Delta_source_max  = value;break;
    4e78:	56 96       	adiw	r26, 0x16	; 22
    4e7a:	4c 93       	st	X, r20
    4e7c:	92 c0       	rjmp	.+292    	; 0x4fa2 <writeSysReg+0x18a>
		case 130: comp->Delta_source_min  = value;break;
    4e7e:	55 96       	adiw	r26, 0x15	; 21
    4e80:	4c 93       	st	X, r20
    4e82:	8f c0       	rjmp	.+286    	; 0x4fa2 <writeSysReg+0x18a>
		case 140: comp->diffCOOL  = value;break;
    4e84:	5d 96       	adiw	r26, 0x1d	; 29
    4e86:	4c 93       	st	X, r20
    4e88:	8c c0       	rjmp	.+280    	; 0x4fa2 <writeSysReg+0x18a>
		case 150: comp->diffDHW  = value;break;
    4e8a:	5e 96       	adiw	r26, 0x1e	; 30
    4e8c:	4c 93       	st	X, r20
    4e8e:	89 c0       	rjmp	.+274    	; 0x4fa2 <writeSysReg+0x18a>
		case 160: comp->diffHEAT  = value;break;
    4e90:	5c 96       	adiw	r26, 0x1c	; 28
    4e92:	4c 93       	st	X, r20
    4e94:	86 c0       	rjmp	.+268    	; 0x4fa2 <writeSysReg+0x18a>
		case 170: comp->AireToWater  = value;break;
    4e96:	5f 96       	adiw	r26, 0x1f	; 31
    4e98:	4c 93       	st	X, r20
    4e9a:	83 c0       	rjmp	.+262    	; 0x4fa2 <writeSysReg+0x18a>
		case 180: comp->ExhaustMax  = value;break;
    4e9c:	1e 96       	adiw	r26, 0x0e	; 14
    4e9e:	4c 93       	st	X, r20
    4ea0:	80 c0       	rjmp	.+256    	; 0x4fa2 <writeSysReg+0x18a>
		case 190: comp->cool  = value;break;
    4ea2:	97 96       	adiw	r26, 0x27	; 39
    4ea4:	4c 93       	st	X, r20
    4ea6:	7d c0       	rjmp	.+250    	; 0x4fa2 <writeSysReg+0x18a>
		case 200: comp->heat  = value;break;
    4ea8:	96 96       	adiw	r26, 0x26	; 38
    4eaa:	4c 93       	st	X, r20
    4eac:	7a c0       	rjmp	.+244    	; 0x4fa2 <writeSysReg+0x18a>
		case 210: comp->heatWater  = value;break;
    4eae:	95 96       	adiw	r26, 0x25	; 37
    4eb0:	4c 93       	st	X, r20
    4eb2:	77 c0       	rjmp	.+238    	; 0x4fa2 <writeSysReg+0x18a>
		case 220: comp->HP_Max  = value;break;
    4eb4:	16 96       	adiw	r26, 0x06	; 6
    4eb6:	4c 93       	st	X, r20
    4eb8:	74 c0       	rjmp	.+232    	; 0x4fa2 <writeSysReg+0x18a>
		case 230: comp->LP_Max  = value;break;
    4eba:	18 96       	adiw	r26, 0x08	; 8
    4ebc:	4c 93       	st	X, r20
    4ebe:	71 c0       	rjmp	.+226    	; 0x4fa2 <writeSysReg+0x18a>
		case 240: comp->HP_Min  = value;break;
    4ec0:	17 96       	adiw	r26, 0x07	; 7
    4ec2:	4c 93       	st	X, r20
    4ec4:	6e c0       	rjmp	.+220    	; 0x4fa2 <writeSysReg+0x18a>
		case 250: comp->LP_Min  = value;break;
    4ec6:	ed 01       	movw	r28, r26
    4ec8:	c4 5a       	subi	r28, 0xA4	; 164
    4eca:	df 4f       	sbci	r29, 0xFF	; 255
    4ecc:	ba 01       	movw	r22, r20
    4ece:	80 e0       	ldi	r24, 0x00	; 0
    4ed0:	90 e0       	ldi	r25, 0x00	; 0
    4ed2:	0e 94 c8 52 	call	0xa590	; 0xa590 <__floatunsisf>
    4ed6:	68 83       	st	Y, r22
    4ed8:	79 83       	std	Y+1, r23	; 0x01
    4eda:	8a 83       	std	Y+2, r24	; 0x02
    4edc:	9b 83       	std	Y+3, r25	; 0x03
    4ede:	61 c0       	rjmp	.+194    	; 0x4fa2 <writeSysReg+0x18a>
		case 260: comp->MaxSupercool  = value;break;
    4ee0:	52 96       	adiw	r26, 0x12	; 18
    4ee2:	4c 93       	st	X, r20
    4ee4:	5e c0       	rjmp	.+188    	; 0x4fa2 <writeSysReg+0x18a>
		case 270: comp->MinSupercool  = value;break;
    4ee6:	51 96       	adiw	r26, 0x11	; 17
    4ee8:	4c 93       	st	X, r20
    4eea:	5b c0       	rjmp	.+182    	; 0x4fa2 <writeSysReg+0x18a>
		case 280: comp->MaxSuperheat  = value;break;
    4eec:	50 96       	adiw	r26, 0x10	; 16
    4eee:	4c 93       	st	X, r20
    4ef0:	58 c0       	rjmp	.+176    	; 0x4fa2 <writeSysReg+0x18a>
		case 290: comp->MinSuperheat  = value;break;
    4ef2:	1f 96       	adiw	r26, 0x0f	; 15
    4ef4:	4c 93       	st	X, r20
    4ef6:	55 c0       	rjmp	.+170    	; 0x4fa2 <writeSysReg+0x18a>
		case 300: comp->number_turnon_threeway  = value;break;
    4ef8:	aa 5b       	subi	r26, 0xBA	; 186
    4efa:	bf 4f       	sbci	r27, 0xFF	; 255
    4efc:	4d 93       	st	X+, r20
    4efe:	5c 93       	st	X, r21
    4f00:	50 c0       	rjmp	.+160    	; 0x4fa2 <writeSysReg+0x18a>
		case 310: comp->power  = value;break;
    4f02:	94 96       	adiw	r26, 0x24	; 36
    4f04:	4c 93       	st	X, r20
    4f06:	4d c0       	rjmp	.+154    	; 0x4fa2 <writeSysReg+0x18a>
		case 320: comp->Set_Cooling  = value;break;
    4f08:	5a 96       	adiw	r26, 0x1a	; 26
    4f0a:	4c 93       	st	X, r20
    4f0c:	4a c0       	rjmp	.+148    	; 0x4fa2 <writeSysReg+0x18a>
		case 330: comp->Set_DHW  = value;break;
    4f0e:	5b 96       	adiw	r26, 0x1b	; 27
    4f10:	4c 93       	st	X, r20
    4f12:	47 c0       	rjmp	.+142    	; 0x4fa2 <writeSysReg+0x18a>
		case 340: comp->Set_Heating  = value;break;
    4f14:	59 96       	adiw	r26, 0x19	; 25
    4f16:	4c 93       	st	X, r20
    4f18:	44 c0       	rjmp	.+136    	; 0x4fa2 <writeSysReg+0x18a>
		case 350: comp->TempDef  = value;break;//
    4f1a:	9b 96       	adiw	r26, 0x2b	; 43
    4f1c:	5c 93       	st	X, r21
    4f1e:	4e 93       	st	-X, r20
    4f20:	9a 97       	sbiw	r26, 0x2a	; 42
    4f22:	3f c0       	rjmp	.+126    	; 0x4fa2 <writeSysReg+0x18a>
		case 360: comp->TimeDef  = value;break;//
    4f24:	91 96       	adiw	r26, 0x21	; 33
    4f26:	4c 93       	st	X, r20
    4f28:	3c c0       	rjmp	.+120    	; 0x4fa2 <writeSysReg+0x18a>
		case 370: comp->TempOut  = value;break;
    4f2a:	9f 96       	adiw	r26, 0x2f	; 47
    4f2c:	5c 93       	st	X, r21
    4f2e:	4e 93       	st	-X, r20
    4f30:	9e 97       	sbiw	r26, 0x2e	; 46
    4f32:	37 c0       	rjmp	.+110    	; 0x4fa2 <writeSysReg+0x18a>
		case 380: comp->TempStopDef  = value;break;//
    4f34:	9d 96       	adiw	r26, 0x2d	; 45
    4f36:	5c 93       	st	X, r21
    4f38:	4e 93       	st	-X, r20
    4f3a:	9c 97       	sbiw	r26, 0x2c	; 44
    4f3c:	32 c0       	rjmp	.+100    	; 0x4fa2 <writeSysReg+0x18a>
		case 390: comp->time_threeway  = value;break;
    4f3e:	dd 96       	adiw	r26, 0x3d	; 61
    4f40:	5c 93       	st	X, r21
    4f42:	4e 93       	st	-X, r20
    4f44:	dc 97       	sbiw	r26, 0x3c	; 60
    4f46:	2d c0       	rjmp	.+90     	; 0x4fa2 <writeSysReg+0x18a>
		case 400: comp->NombComp  = value;break;
    4f48:	90 96       	adiw	r26, 0x20	; 32
    4f4a:	4c 93       	st	X, r20
    4f4c:	2a c0       	rjmp	.+84     	; 0x4fa2 <writeSysReg+0x18a>
		case 410: comp->reversMod =value;break;
    4f4e:	98 96       	adiw	r26, 0x28	; 40
    4f50:	4c 93       	st	X, r20
    4f52:	27 c0       	rjmp	.+78     	; 0x4fa2 <writeSysReg+0x18a>
		case 420: comp->TRV_Delay=value;break;
    4f54:	15 96       	adiw	r26, 0x05	; 5
    4f56:	4c 93       	st	X, r20
    4f58:	24 c0       	rjmp	.+72     	; 0x4fa2 <writeSysReg+0x18a>
		case 430: comp->Source_Max=value;break;
    4f5a:	1b 96       	adiw	r26, 0x0b	; 11
    4f5c:	4c 93       	st	X, r20
    4f5e:	21 c0       	rjmp	.+66     	; 0x4fa2 <writeSysReg+0x18a>
		case 440: comp->Source_Min=value;break;
    4f60:	d1 96       	adiw	r26, 0x31	; 49
    4f62:	5c 93       	st	X, r21
    4f64:	4e 93       	st	-X, r20
    4f66:	d0 97       	sbiw	r26, 0x30	; 48
    4f68:	1c c0       	rjmp	.+56     	; 0x4fa2 <writeSysReg+0x18a>
		case 450: comp->Delta_dhw_max  = value;break;
    4f6a:	58 96       	adiw	r26, 0x18	; 24
    4f6c:	4c 93       	st	X, r20
    4f6e:	19 c0       	rjmp	.+50     	; 0x4fa2 <writeSysReg+0x18a>
		case 460: comp->Delta_dhw_min  = value;break;
    4f70:	57 96       	adiw	r26, 0x17	; 23
    4f72:	4c 93       	st	X, r20
    4f74:	16 c0       	rjmp	.+44     	; 0x4fa2 <writeSysReg+0x18a>
		case 470: comp->Power_380 = value;break;
    4f76:	99 96       	adiw	r26, 0x29	; 41
    4f78:	4c 93       	st	X, r20
    4f7a:	13 c0       	rjmp	.+38     	; 0x4fa2 <writeSysReg+0x18a>
		case 480: comp->TimeBetweenDef = value;break;//
    4f7c:	92 96       	adiw	r26, 0x22	; 34
    4f7e:	4c 93       	st	X, r20
    4f80:	10 c0       	rjmp	.+32     	; 0x4fa2 <writeSysReg+0x18a>
		case 391: comp->trv_corection_1 = value;break;
    4f82:	d3 96       	adiw	r26, 0x33	; 51
    4f84:	5c 93       	st	X, r21
    4f86:	4e 93       	st	-X, r20
    4f88:	d2 97       	sbiw	r26, 0x32	; 50
    4f8a:	0b c0       	rjmp	.+22     	; 0x4fa2 <writeSysReg+0x18a>
		case 392: comp->trv_corection_2 = value;break;
    4f8c:	a8 5b       	subi	r26, 0xB8	; 184
    4f8e:	bf 4f       	sbci	r27, 0xFF	; 255
    4f90:	4d 93       	st	X+, r20
    4f92:	5c 93       	st	X, r21
    4f94:	06 c0       	rjmp	.+12     	; 0x4fa2 <writeSysReg+0x18a>
		case 393:if(comp->AireToWater==1) forsDefrost = value;break;
    4f96:	5f 96       	adiw	r26, 0x1f	; 31
    4f98:	8c 91       	ld	r24, X
    4f9a:	81 30       	cpi	r24, 0x01	; 1
    4f9c:	11 f4       	brne	.+4      	; 0x4fa2 <writeSysReg+0x18a>
    4f9e:	40 93 91 07 	sts	0x0791, r20	; 0x800791 <forsDefrost>
	}
}
    4fa2:	df 91       	pop	r29
    4fa4:	cf 91       	pop	r28
    4fa6:	08 95       	ret

00004fa8 <calculateCRC>:
}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
    4fa8:	88 23       	and	r24, r24
    4faa:	09 f1       	breq	.+66     	; 0x4fee <calculateCRC+0x46>
    4fac:	af ef       	ldi	r26, 0xFF	; 255
    4fae:	a8 0f       	add	r26, r24
    4fb0:	b0 e0       	ldi	r27, 0x00	; 0
    4fb2:	11 96       	adiw	r26, 0x01	; 1
    4fb4:	60 e0       	ldi	r22, 0x00	; 0
    4fb6:	70 e0       	ldi	r23, 0x00	; 0
    4fb8:	8f ef       	ldi	r24, 0xFF	; 255
    4fba:	9f ef       	ldi	r25, 0xFF	; 255
	{
		temp = temp ^ frame[i];
    4fbc:	fb 01       	movw	r30, r22
    4fbe:	e8 5c       	subi	r30, 0xC8	; 200
    4fc0:	f7 4f       	sbci	r31, 0xF7	; 247
    4fc2:	20 81       	ld	r18, Z
    4fc4:	82 27       	eor	r24, r18
    4fc6:	28 e0       	ldi	r18, 0x08	; 8
		for (unsigned char j = 1; j <= 8; j++)
		{
			flag = temp & 0x0001;
    4fc8:	ac 01       	movw	r20, r24
    4fca:	41 70       	andi	r20, 0x01	; 1
    4fcc:	55 27       	eor	r21, r21
			temp >>= 1;
    4fce:	96 95       	lsr	r25
    4fd0:	87 95       	ror	r24
			if (flag)
    4fd2:	45 2b       	or	r20, r21
    4fd4:	21 f0       	breq	.+8      	; 0x4fde <calculateCRC+0x36>
			temp ^= 0xA001;
    4fd6:	31 e0       	ldi	r19, 0x01	; 1
    4fd8:	83 27       	eor	r24, r19
    4fda:	30 ea       	ldi	r19, 0xA0	; 160
    4fdc:	93 27       	eor	r25, r19
    4fde:	21 50       	subi	r18, 0x01	; 1
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
	{
		temp = temp ^ frame[i];
		for (unsigned char j = 1; j <= 8; j++)
    4fe0:	99 f7       	brne	.-26     	; 0x4fc8 <calculateCRC+0x20>
    4fe2:	6f 5f       	subi	r22, 0xFF	; 255
    4fe4:	7f 4f       	sbci	r23, 0xFF	; 255
}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
    4fe6:	6a 17       	cp	r22, r26
    4fe8:	7b 07       	cpc	r23, r27
    4fea:	41 f7       	brne	.-48     	; 0x4fbc <calculateCRC+0x14>
    4fec:	02 c0       	rjmp	.+4      	; 0x4ff2 <calculateCRC+0x4a>

}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
    4fee:	8f ef       	ldi	r24, 0xFF	; 255
    4ff0:	9f ef       	ldi	r25, 0xFF	; 255
	// Reverse byte order.
	temp2 = temp >> 8;
	temp = (temp << 8) | temp2;
	temp &= 0xFFFF;
	return temp; // the returned value is already swopped - crcLo byte is first & crcHi byte is last
}
    4ff2:	98 27       	eor	r25, r24
    4ff4:	89 27       	eor	r24, r25
    4ff6:	98 27       	eor	r25, r24
    4ff8:	08 95       	ret

00004ffa <sendPacket>:

void sendPacket(unsigned char bufferSize)
{
    4ffa:	ef 92       	push	r14
    4ffc:	ff 92       	push	r15
    4ffe:	0f 93       	push	r16
    5000:	1f 93       	push	r17
    5002:	cf 93       	push	r28
    5004:	df 93       	push	r29
	
	for (unsigned char i = 0; i < bufferSize; i++) if(port_0)xSerialPutChar(&xSerialPort,frame[i]); else if(port_3){PORTJ|= (_BV(PIN_rs485));xSerialPutChar(&xSerial3Port,frame[i]);}
    5006:	88 23       	and	r24, r24
    5008:	71 f1       	breq	.+92     	; 0x5066 <sendPacket+0x6c>
    500a:	81 50       	subi	r24, 0x01	; 1
    500c:	08 2f       	mov	r16, r24
    500e:	10 e0       	ldi	r17, 0x00	; 0
    5010:	0f 5f       	subi	r16, 0xFF	; 255
    5012:	1f 4f       	sbci	r17, 0xFF	; 255
    5014:	c0 e0       	ldi	r28, 0x00	; 0
    5016:	d0 e0       	ldi	r29, 0x00	; 0
    5018:	0f 2e       	mov	r0, r31
    501a:	f5 e0       	ldi	r31, 0x05	; 5
    501c:	ef 2e       	mov	r14, r31
    501e:	ff 24       	eor	r15, r15
    5020:	f3 94       	inc	r15
    5022:	f0 2d       	mov	r31, r0
    5024:	80 91 25 0b 	lds	r24, 0x0B25	; 0x800b25 <port_0>
    5028:	88 23       	and	r24, r24
    502a:	49 f0       	breq	.+18     	; 0x503e <sendPacket+0x44>
    502c:	fe 01       	movw	r30, r28
    502e:	e8 5c       	subi	r30, 0xC8	; 200
    5030:	f7 4f       	sbci	r31, 0xF7	; 247
    5032:	60 81       	ld	r22, Z
    5034:	8f ec       	ldi	r24, 0xCF	; 207
    5036:	97 e0       	ldi	r25, 0x07	; 7
    5038:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <xSerialPutChar>
    503c:	10 c0       	rjmp	.+32     	; 0x505e <sendPacket+0x64>
    503e:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <port_3>
    5042:	88 23       	and	r24, r24
    5044:	61 f0       	breq	.+24     	; 0x505e <sendPacket+0x64>
    5046:	f7 01       	movw	r30, r14
    5048:	80 81       	ld	r24, Z
    504a:	84 60       	ori	r24, 0x04	; 4
    504c:	80 83       	st	Z, r24
    504e:	fe 01       	movw	r30, r28
    5050:	e8 5c       	subi	r30, 0xC8	; 200
    5052:	f7 4f       	sbci	r31, 0xF7	; 247
    5054:	60 81       	ld	r22, Z
    5056:	86 e1       	ldi	r24, 0x16	; 22
    5058:	98 e0       	ldi	r25, 0x08	; 8
    505a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <xSerialPutChar>
    505e:	21 96       	adiw	r28, 0x01	; 1
    5060:	c0 17       	cp	r28, r16
    5062:	d1 07       	cpc	r29, r17
    5064:	f9 f6       	brne	.-66     	; 0x5024 <sendPacket+0x2a>
	//xSerialRxFlush(&xSerialPort);
	PORTJ &= (_BV(PIN_rs485));
    5066:	e5 e0       	ldi	r30, 0x05	; 5
    5068:	f1 e0       	ldi	r31, 0x01	; 1
    506a:	80 81       	ld	r24, Z
    506c:	84 70       	andi	r24, 0x04	; 4
    506e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5070:	00 00       	nop

	_delay_us(3645);
	
	
    5072:	df 91       	pop	r29
    5074:	cf 91       	pop	r28
    5076:	1f 91       	pop	r17
    5078:	0f 91       	pop	r16
    507a:	ff 90       	pop	r15
    507c:	ef 90       	pop	r14
    507e:	08 95       	ret

00005080 <modbus_update>:
		case 393:if(comp->AireToWater==1) forsDefrost = value;break;
	}
}

void modbus_update()
{
    5080:	af 92       	push	r10
    5082:	bf 92       	push	r11
    5084:	cf 92       	push	r12
    5086:	df 92       	push	r13
    5088:	ef 92       	push	r14
    508a:	ff 92       	push	r15
    508c:	0f 93       	push	r16
    508e:	1f 93       	push	r17
    5090:	cf 93       	push	r28
    5092:	df 93       	push	r29
	unsigned char noOfBytes;
	unsigned char responseFrameSize;
	unsigned int temp;
	void* ptr=NULL;
	
	if(port_0)buffer=xSerialAvailableChar( &xSerialPort );
    5094:	80 91 25 0b 	lds	r24, 0x0B25	; 0x800b25 <port_0>
    5098:	88 23       	and	r24, r24
    509a:	29 f0       	breq	.+10     	; 0x50a6 <modbus_update+0x26>
    509c:	8f ec       	ldi	r24, 0xCF	; 207
    509e:	97 e0       	ldi	r25, 0x07	; 7
    50a0:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <xSerialAvailableChar>
    50a4:	09 c0       	rjmp	.+18     	; 0x50b8 <modbus_update+0x38>
	else if (port_3)buffer=xSerialAvailableChar( &xSerial3Port );
    50a6:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <port_3>
    50aa:	88 23       	and	r24, r24
    50ac:	09 f4       	brne	.+2      	; 0x50b0 <modbus_update+0x30>
    50ae:	da c0       	rjmp	.+436    	; 0x5264 <modbus_update+0x1e4>
    50b0:	86 e1       	ldi	r24, 0x16	; 22
    50b2:	98 e0       	ldi	r25, 0x08	; 8
    50b4:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <xSerialAvailableChar>
	
	//avrSerialPrintf("buffer = %d \r\n",buffer );
	//avrSerialPrintf("overflow= %d \r\n",overflow);
	if (overflow){ return;}//exceptionResponse(OVERFLOW_BUFF);
    50b8:	90 91 f1 07 	lds	r25, 0x07F1	; 0x8007f1 <overflow>
    50bc:	91 11       	cpse	r25, r1
    50be:	d7 c0       	rjmp	.+430    	; 0x526e <modbus_update+0x1ee>
	if (buffer > 0 && buffer < 8) {  return;}// exceptionResponse(CORRUPT_PACKET);
    50c0:	9f ef       	ldi	r25, 0xFF	; 255
    50c2:	98 0f       	add	r25, r24
    50c4:	97 30       	cpi	r25, 0x07	; 7
    50c6:	08 f4       	brcc	.+2      	; 0x50ca <modbus_update+0x4a>
    50c8:	d2 c0       	rjmp	.+420    	; 0x526e <modbus_update+0x1ee>
	
	// The minimum request packet is 8 bytes for function 3 & 16
	
	id = frame[0];
    50ca:	90 91 38 08 	lds	r25, 0x0838	; 0x800838 <frame>
	//avrSerialPrintf("buffer= %d \r\n",buffer);
	
	if (id == slaveID ) // if the recieved ID matches the slaveID or broadcasting id (0), continue
    50ce:	91 30       	cpi	r25, 0x01	; 1
    50d0:	09 f0       	breq	.+2      	; 0x50d4 <modbus_update+0x54>
    50d2:	cd c0       	rjmp	.+410    	; 0x526e <modbus_update+0x1ee>
	{
		crc = ((frame[buffer - 2] << 8) | frame[buffer - 1]); // combine the crc Low & High bytes
    50d4:	28 2f       	mov	r18, r24
    50d6:	30 e0       	ldi	r19, 0x00	; 0
    50d8:	f9 01       	movw	r30, r18
    50da:	ea 5c       	subi	r30, 0xCA	; 202
    50dc:	f7 4f       	sbci	r31, 0xF7	; 247
    50de:	d0 81       	ld	r29, Z
    50e0:	f9 01       	movw	r30, r18
    50e2:	e9 5c       	subi	r30, 0xC9	; 201
    50e4:	f7 4f       	sbci	r31, 0xF7	; 247
    50e6:	c0 81       	ld	r28, Z
		//avrSerialPrintf("crc= %d \r\n",crc);
		if (calculateCRC(buffer - 2) == crc) // if the calculated crc matches the recieved crc continue
    50e8:	82 50       	subi	r24, 0x02	; 2
    50ea:	5e df       	rcall	.-324    	; 0x4fa8 <calculateCRC>
    50ec:	2c 2f       	mov	r18, r28
    50ee:	30 e0       	ldi	r19, 0x00	; 0
    50f0:	3d 2b       	or	r19, r29
    50f2:	28 17       	cp	r18, r24
    50f4:	39 07       	cpc	r19, r25
    50f6:	09 f0       	breq	.+2      	; 0x50fa <modbus_update+0x7a>
    50f8:	ba c0       	rjmp	.+372    	; 0x526e <modbus_update+0x1ee>
		{
			function = frame[1];
    50fa:	e8 e3       	ldi	r30, 0x38	; 56
    50fc:	f8 e0       	ldi	r31, 0x08	; 8
    50fe:	21 81       	ldd	r18, Z+1	; 0x01
    5100:	20 93 f2 07 	sts	0x07F2, r18	; 0x8007f2 <function>
			startingAddress = ((frame[2] << 8) | frame[3]); // combine the starting address bytes
    5104:	82 81       	ldd	r24, Z+2	; 0x02
    5106:	c3 81       	ldd	r28, Z+3	; 0x03
    5108:	d0 e0       	ldi	r29, 0x00	; 0
    510a:	d8 2b       	or	r29, r24
			no_of_registers = ((frame[4] << 8) | frame[5]);
    510c:	84 81       	ldd	r24, Z+4	; 0x04
    510e:	45 81       	ldd	r20, Z+5	; 0x05
    5110:	50 e0       	ldi	r21, 0x00	; 0
    5112:	58 2b       	or	r21, r24
			maxData = startingAddress + no_of_registers *10;
    5114:	7a 01       	movw	r14, r20
    5116:	ee 0c       	add	r14, r14
    5118:	ff 1c       	adc	r15, r15
    511a:	ca 01       	movw	r24, r20
    511c:	88 0f       	add	r24, r24
    511e:	99 1f       	adc	r25, r25
    5120:	88 0f       	add	r24, r24
    5122:	99 1f       	adc	r25, r25
    5124:	88 0f       	add	r24, r24
    5126:	99 1f       	adc	r25, r25
    5128:	e8 0e       	add	r14, r24
    512a:	f9 1e       	adc	r15, r25
    512c:	ec 0e       	add	r14, r28
    512e:	fd 1e       	adc	r15, r29
			//avrSerialPrintf("function= %d \r\n",function);
			//avrSerialPrintf("startingAddress= %d \r\n",startingAddress);
			//avrSerialPrintf("no_of_registers= %d \r\n",no_of_registers);
			//avrSerialPrintf("maxData= %d \r\n",maxData);
			if (function == 3)
    5130:	23 30       	cpi	r18, 0x03	; 3
    5132:	09 f0       	breq	.+2      	; 0x5136 <modbus_update+0xb6>
    5134:	65 c0       	rjmp	.+202    	; 0x5200 <modbus_update+0x180>
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
    5136:	9e 01       	movw	r18, r28
    5138:	ad ec       	ldi	r26, 0xCD	; 205
    513a:	bc ec       	ldi	r27, 0xCC	; 204
    513c:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    5140:	96 95       	lsr	r25
    5142:	87 95       	ror	r24
    5144:	96 95       	lsr	r25
    5146:	87 95       	ror	r24
    5148:	96 95       	lsr	r25
    514a:	87 95       	ror	r24
    514c:	9c 01       	movw	r18, r24
    514e:	22 0f       	add	r18, r18
    5150:	33 1f       	adc	r19, r19
    5152:	88 0f       	add	r24, r24
    5154:	99 1f       	adc	r25, r25
    5156:	88 0f       	add	r24, r24
    5158:	99 1f       	adc	r25, r25
    515a:	88 0f       	add	r24, r24
    515c:	99 1f       	adc	r25, r25
    515e:	82 0f       	add	r24, r18
    5160:	93 1f       	adc	r25, r19
    5162:	9e 01       	movw	r18, r28
    5164:	28 1b       	sub	r18, r24
    5166:	39 0b       	sbc	r19, r25
    5168:	21 30       	cpi	r18, 0x01	; 1
    516a:	31 05       	cpc	r19, r1
    516c:	51 f0       	breq	.+20     	; 0x5182 <modbus_update+0x102>
				else if(startingAddress%10==2){ptr=&Comp_2;}
    516e:	22 30       	cpi	r18, 0x02	; 2
    5170:	31 05       	cpc	r19, r1
    5172:	71 f4       	brne	.+28     	; 0x5190 <modbus_update+0x110>
    5174:	0f 2e       	mov	r0, r31
    5176:	f2 e6       	ldi	r31, 0x62	; 98
    5178:	cf 2e       	mov	r12, r31
    517a:	fa e0       	ldi	r31, 0x0A	; 10
    517c:	df 2e       	mov	r13, r31
    517e:	f0 2d       	mov	r31, r0
    5180:	09 c0       	rjmp	.+18     	; 0x5194 <modbus_update+0x114>
			//avrSerialPrintf("startingAddress= %d \r\n",startingAddress);
			//avrSerialPrintf("no_of_registers= %d \r\n",no_of_registers);
			//avrSerialPrintf("maxData= %d \r\n",maxData);
			if (function == 3)
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
    5182:	0f 2e       	mov	r0, r31
    5184:	f8 ed       	ldi	r31, 0xD8	; 216
    5186:	cf 2e       	mov	r12, r31
    5188:	f9 e0       	ldi	r31, 0x09	; 9
    518a:	df 2e       	mov	r13, r31
    518c:	f0 2d       	mov	r31, r0
    518e:	02 c0       	rjmp	.+4      	; 0x5194 <modbus_update+0x114>
	unsigned int crc16;
	unsigned int crc;
	unsigned char noOfBytes;
	unsigned char responseFrameSize;
	unsigned int temp;
	void* ptr=NULL;
    5190:	c1 2c       	mov	r12, r1
    5192:	d1 2c       	mov	r13, r1
			if (function == 3)
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
				else if(startingAddress%10==2){ptr=&Comp_2;}
				
				noOfBytes = no_of_registers * 2;
    5194:	a4 2e       	mov	r10, r20
    5196:	aa 0c       	add	r10, r10
				responseFrameSize = 5 + noOfBytes; // ID, function, noOfBytes, (dataLo + dataHi) * number of registers, crcLo, crcHi
    5198:	0f 2e       	mov	r0, r31
    519a:	f5 e0       	ldi	r31, 0x05	; 5
    519c:	bf 2e       	mov	r11, r31
    519e:	f0 2d       	mov	r31, r0
    51a0:	ba 0c       	add	r11, r10
				frame[0] = slaveID;
    51a2:	e8 e3       	ldi	r30, 0x38	; 56
    51a4:	f8 e0       	ldi	r31, 0x08	; 8
    51a6:	81 e0       	ldi	r24, 0x01	; 1
    51a8:	80 83       	st	Z, r24
				frame[1] = function;
    51aa:	83 e0       	ldi	r24, 0x03	; 3
    51ac:	81 83       	std	Z+1, r24	; 0x01
				frame[2] = noOfBytes;
    51ae:	a2 82       	std	Z+2, r10	; 0x02
				//avrSerialPrintf("FrameSize= %d \r\n",responseFrameSize);
				//avrSerialPrintf("frame[1]= %d \r\n",frame[1]);
				//avrSerialPrintf("frame[2]= %d \r\n",frame[2]);
				address = 3; // PDU starts at the 4th byte
				for (index = startingAddress; index < maxData; )
    51b0:	ce 15       	cp	r28, r14
    51b2:	df 05       	cpc	r29, r15
    51b4:	a8 f4       	brcc	.+42     	; 0x51e0 <modbus_update+0x160>
    51b6:	03 e0       	ldi	r16, 0x03	; 3
    51b8:	10 e0       	ldi	r17, 0x00	; 0
				{
					temp = readSysReg(ptr,&EEpromData,index);//holdingRegs[index]
    51ba:	ae 01       	movw	r20, r28
    51bc:	68 e7       	ldi	r22, 0x78	; 120
    51be:	79 e0       	ldi	r23, 0x09	; 9
    51c0:	c6 01       	movw	r24, r12
    51c2:	0c dc       	rcall	.-2024   	; 0x49dc <readSysReg>
					frame[address] = temp >> 8; // split the register into 2 bytes
    51c4:	f8 01       	movw	r30, r16
    51c6:	e8 5c       	subi	r30, 0xC8	; 200
    51c8:	f7 4f       	sbci	r31, 0xF7	; 247
    51ca:	90 83       	st	Z, r25
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
					frame[address] = temp & 0xFF;
    51cc:	f8 01       	movw	r30, r16
    51ce:	e7 5c       	subi	r30, 0xC7	; 199
    51d0:	f7 4f       	sbci	r31, 0xF7	; 247
    51d2:	80 83       	st	Z, r24
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
    51d4:	0e 5f       	subi	r16, 0xFE	; 254
    51d6:	1f 4f       	sbci	r17, 0xFF	; 255
					index +=10;
    51d8:	2a 96       	adiw	r28, 0x0a	; 10
				frame[2] = noOfBytes;
				//avrSerialPrintf("FrameSize= %d \r\n",responseFrameSize);
				//avrSerialPrintf("frame[1]= %d \r\n",frame[1]);
				//avrSerialPrintf("frame[2]= %d \r\n",frame[2]);
				address = 3; // PDU starts at the 4th byte
				for (index = startingAddress; index < maxData; )
    51da:	ce 15       	cp	r28, r14
    51dc:	df 05       	cpc	r29, r15
    51de:	68 f3       	brcs	.-38     	; 0x51ba <modbus_update+0x13a>
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
					index +=10;
				}
				
				crc16 = calculateCRC(responseFrameSize - 2);
    51e0:	83 e0       	ldi	r24, 0x03	; 3
    51e2:	8a 0d       	add	r24, r10
    51e4:	e1 de       	rcall	.-574    	; 0x4fa8 <calculateCRC>
				frame[responseFrameSize - 2] = crc16 >> 8; // split crc into 2 bytes
    51e6:	2b 2d       	mov	r18, r11
    51e8:	30 e0       	ldi	r19, 0x00	; 0
    51ea:	f9 01       	movw	r30, r18
    51ec:	ea 5c       	subi	r30, 0xCA	; 202
    51ee:	f7 4f       	sbci	r31, 0xF7	; 247
    51f0:	90 83       	st	Z, r25
				frame[responseFrameSize - 1] = crc16 & 0xFF;
    51f2:	f9 01       	movw	r30, r18
    51f4:	e9 5c       	subi	r30, 0xC9	; 201
    51f6:	f7 4f       	sbci	r31, 0xF7	; 247
				//return;
				sendPacket(responseFrameSize);
    51f8:	80 83       	st	Z, r24
    51fa:	8b 2d       	mov	r24, r11
    51fc:	fe de       	rcall	.-516    	; 0x4ffa <sendPacket>
    51fe:	37 c0       	rjmp	.+110    	; 0x526e <modbus_update+0x1ee>
				
			}
			
			else if (function == 16)
    5200:	20 31       	cpi	r18, 0x10	; 16
    5202:	09 f0       	breq	.+2      	; 0x5206 <modbus_update+0x186>
    5204:	34 c0       	rjmp	.+104    	; 0x526e <modbus_update+0x1ee>
			{
				address = 7; // start at the 8th byte in the frame
				
				for (index = startingAddress; index < maxData; )
    5206:	ce 15       	cp	r28, r14
    5208:	df 05       	cpc	r29, r15
    520a:	b0 f4       	brcc	.+44     	; 0x5238 <modbus_update+0x1b8>
    520c:	07 e0       	ldi	r16, 0x07	; 7
    520e:	10 e0       	ldi	r17, 0x00	; 0
				{
					temp = ((frame[address] << 8) | frame[address + 1]);
    5210:	f8 01       	movw	r30, r16
    5212:	e8 5c       	subi	r30, 0xC8	; 200
    5214:	f7 4f       	sbci	r31, 0xF7	; 247
    5216:	80 81       	ld	r24, Z
    5218:	f8 01       	movw	r30, r16
    521a:	e7 5c       	subi	r30, 0xC7	; 199
    521c:	f7 4f       	sbci	r31, 0xF7	; 247
    521e:	40 81       	ld	r20, Z
					writeSysReg(&EEpromData,index,temp);
    5220:	50 e0       	ldi	r21, 0x00	; 0
    5222:	58 2b       	or	r21, r24
    5224:	be 01       	movw	r22, r28
    5226:	88 e7       	ldi	r24, 0x78	; 120
    5228:	99 e0       	ldi	r25, 0x09	; 9
    522a:	f6 dd       	rcall	.-1044   	; 0x4e18 <writeSysReg>
					address += 2;
    522c:	0e 5f       	subi	r16, 0xFE	; 254
    522e:	1f 4f       	sbci	r17, 0xFF	; 255
					index+=10;
    5230:	2a 96       	adiw	r28, 0x0a	; 10
			
			else if (function == 16)
			{
				address = 7; // start at the 8th byte in the frame
				
				for (index = startingAddress; index < maxData; )
    5232:	ce 15       	cp	r28, r14
    5234:	df 05       	cpc	r29, r15
    5236:	60 f3       	brcs	.-40     	; 0x5210 <modbus_update+0x190>
					temp = ((frame[address] << 8) | frame[address + 1]);
					writeSysReg(&EEpromData,index,temp);
					address += 2;
					index+=10;
				}
				portENTER_CRITICAL();
    5238:	0f b6       	in	r0, 0x3f	; 63
    523a:	f8 94       	cli
    523c:	0f 92       	push	r0
				eeprom_write_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));
    523e:	40 e6       	ldi	r20, 0x60	; 96
    5240:	50 e0       	ldi	r21, 0x00	; 0
    5242:	60 e0       	ldi	r22, 0x00	; 0
    5244:	70 e0       	ldi	r23, 0x00	; 0
    5246:	88 e7       	ldi	r24, 0x78	; 120
    5248:	99 e0       	ldi	r25, 0x09	; 9
    524a:	0e 94 3d 5b 	call	0xb67a	; 0xb67a <eeprom_write_block>
				portEXIT_CRITICAL();
    524e:	0f 90       	pop	r0
				// only the first 6 bytes are used for CRC calculation
				crc16 = calculateCRC(6);
    5250:	0f be       	out	0x3f, r0	; 63
    5252:	86 e0       	ldi	r24, 0x06	; 6
				frame[6] = crc16 >> 8; // split crc into 2 bytes
    5254:	a9 de       	rcall	.-686    	; 0x4fa8 <calculateCRC>
    5256:	e8 e3       	ldi	r30, 0x38	; 56
    5258:	f8 e0       	ldi	r31, 0x08	; 8
				frame[7] = crc16 & 0xFF;
    525a:	96 83       	std	Z+6, r25	; 0x06
				
				// a function 16 response is an echo of the first 6 bytes from the request + 2 crc bytes
				
				sendPacket(8);
    525c:	87 83       	std	Z+7, r24	; 0x07
    525e:	88 e0       	ldi	r24, 0x08	; 8
    5260:	cc de       	rcall	.-616    	; 0x4ffa <sendPacket>
    5262:	05 c0       	rjmp	.+10     	; 0x526e <modbus_update+0x1ee>
	if(port_0)buffer=xSerialAvailableChar( &xSerialPort );
	else if (port_3)buffer=xSerialAvailableChar( &xSerial3Port );
	
	//avrSerialPrintf("buffer = %d \r\n",buffer );
	//avrSerialPrintf("overflow= %d \r\n",overflow);
	if (overflow){ return;}//exceptionResponse(OVERFLOW_BUFF);
    5264:	80 91 f1 07 	lds	r24, 0x07F1	; 0x8007f1 <overflow>
    5268:	88 23       	and	r24, r24
    526a:	09 f4       	brne	.+2      	; 0x526e <modbus_update+0x1ee>
    526c:	2e cf       	rjmp	.-420    	; 0x50ca <modbus_update+0x4a>
			
		}
		else {return;}// exceptionResponse(CHECKSUM_FAIL);
	}
	else {return;}//exceptionResponse(ERROR_FUNC);
}
    526e:	df 91       	pop	r29
    5270:	cf 91       	pop	r28
    5272:	1f 91       	pop	r17
    5274:	0f 91       	pop	r16
    5276:	ff 90       	pop	r15
    5278:	ef 90       	pop	r14
    527a:	df 90       	pop	r13
    527c:	cf 90       	pop	r12
    527e:	bf 90       	pop	r11
    5280:	af 90       	pop	r10
    5282:	08 95       	ret

00005284 <StartReversingValve>:
		xTimerChangePeriod( xStartRevValve_2,period, 100 );
	}
	
}
//------------------------------------------------
void StartReversingValve(TimerHandle_t xTimer){
    5284:	8f 92       	push	r8
    5286:	9f 92       	push	r9
    5288:	af 92       	push	r10
    528a:	bf 92       	push	r11
    528c:	cf 92       	push	r12
    528e:	df 92       	push	r13
    5290:	ef 92       	push	r14
    5292:	ff 92       	push	r15
    5294:	0f 93       	push	r16
    5296:	1f 93       	push	r17
    5298:	cf 93       	push	r28
    529a:	df 93       	push	r29
	TickType_t period;
	static time_t time_count_1;
	static time_t time_count_2;
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    529c:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    52a0:	ec 01       	movw	r28, r24
	
	xSerialxPrintf(&xSerial3Port,"ReversingValve\r\n");
    52a2:	83 ea       	ldi	r24, 0xA3	; 163
    52a4:	92 e0       	ldi	r25, 0x02	; 2
    52a6:	9f 93       	push	r25
    52a8:	8f 93       	push	r24
    52aa:	86 e1       	ldi	r24, 0x16	; 22
    52ac:	98 e0       	ldi	r25, 0x08	; 8
    52ae:	9f 93       	push	r25
    52b0:	8f 93       	push	r24
    52b2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	
if((*pxTimerID) == uxStartDelayRevVTimer_1_ID)
    52b6:	88 81       	ld	r24, Y
    52b8:	0f 90       	pop	r0
    52ba:	0f 90       	pop	r0
    52bc:	0f 90       	pop	r0
    52be:	0f 90       	pop	r0
    52c0:	84 30       	cpi	r24, 0x04	; 4
    52c2:	09 f0       	breq	.+2      	; 0x52c6 <StartReversingValve+0x42>
    52c4:	73 c0       	rjmp	.+230    	; 0x53ac <StartReversingValve+0x128>
	{	period=(TickType_t)EEpromData.Three_Way_delay;
    52c6:	20 91 7c 09 	lds	r18, 0x097C	; 0x80097c <EEpromData+0x4>
		period*=1000;
    52ca:	30 e0       	ldi	r19, 0x00	; 0
    52cc:	a8 ee       	ldi	r26, 0xE8	; 232
    52ce:	b3 e0       	ldi	r27, 0x03	; 3
    52d0:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
		period+=10000;
    52d4:	4b 01       	movw	r8, r22
    52d6:	5c 01       	movw	r10, r24
    52d8:	20 e1       	ldi	r18, 0x10	; 16
    52da:	82 0e       	add	r8, r18
    52dc:	27 e2       	ldi	r18, 0x27	; 39
    52de:	92 1e       	adc	r9, r18
    52e0:	a1 1c       	adc	r10, r1
    52e2:	b1 1c       	adc	r11, r1
		//////////////////////////////////////////

     xSerialxPrintf(&xSerial3Port,"StartReversingValve_1\r\n");
    52e4:	84 eb       	ldi	r24, 0xB4	; 180
    52e6:	92 e0       	ldi	r25, 0x02	; 2
    52e8:	9f 93       	push	r25
    52ea:	8f 93       	push	r24
    52ec:	86 e1       	ldi	r24, 0x16	; 22
    52ee:	98 e0       	ldi	r25, 0x08	; 8
    52f0:	9f 93       	push	r25
    52f2:	8f 93       	push	r24
    52f4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>

		if(Comp_1.Cooling  )
    52f8:	0f 90       	pop	r0
    52fa:	0f 90       	pop	r0
    52fc:	0f 90       	pop	r0
    52fe:	0f 90       	pop	r0
    5300:	80 91 db 09 	lds	r24, 0x09DB	; 0x8009db <Comp_1+0x3>
    5304:	88 23       	and	r24, r24
    5306:	e1 f0       	breq	.+56     	; 0x5340 <StartReversingValve+0xbc>
		{
			 xSerialxPrintf(&xSerial3Port,"StartReversingcool_1\r\n");
    5308:	8c ec       	ldi	r24, 0xCC	; 204
    530a:	92 e0       	ldi	r25, 0x02	; 2
    530c:	9f 93       	push	r25
    530e:	8f 93       	push	r24
    5310:	86 e1       	ldi	r24, 0x16	; 22
    5312:	98 e0       	ldi	r25, 0x08	; 8
    5314:	9f 93       	push	r25
    5316:	8f 93       	push	r24
    5318:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			 
			if( EEpromData.reversMod==1){//PIN_REV_VALVE_1 >0 &&
    531c:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <EEpromData+0x28>
    5320:	0f 90       	pop	r0
    5322:	0f 90       	pop	r0
    5324:	0f 90       	pop	r0
    5326:	0f 90       	pop	r0
    5328:	81 30       	cpi	r24, 0x01	; 1
    532a:	21 f4       	brne	.+8      	; 0x5334 <StartReversingValve+0xb0>
				
				STOP_REV_VALVE_1;//
    532c:	a4 98       	cbi	0x14, 4	; 20
				
				Comp_1.revVOn=0;
    532e:	10 92 e6 09 	sts	0x09E6, r1	; 0x8009e6 <Comp_1+0xe>
    5332:	06 c0       	rjmp	.+12     	; 0x5340 <StartReversingValve+0xbc>
				time_count_1+= difftime(time(&current_time), timeStartRevV_1);
				if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
				*/
				
			}
			else if(EEpromData.reversMod==0){//PIN_REV_VALVE_1 == 0 && 
    5334:	81 11       	cpse	r24, r1
    5336:	04 c0       	rjmp	.+8      	; 0x5340 <StartReversingValve+0xbc>
				START_REV_VALVE_1;
    5338:	a4 9a       	sbi	0x14, 4	; 20
				Comp_1.revVOn=1;
    533a:	81 e0       	ldi	r24, 0x01	; 1
    533c:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <Comp_1+0xe>
				EEpromData.number_turnon_revers_1+=1;
				*/
			}
			
		}
		if(Comp_1.heatingWater || Comp_1.Heating)
    5340:	80 91 dc 09 	lds	r24, 0x09DC	; 0x8009dc <Comp_1+0x4>
    5344:	81 11       	cpse	r24, r1
    5346:	04 c0       	rjmp	.+8      	; 0x5350 <StartReversingValve+0xcc>
    5348:	80 91 da 09 	lds	r24, 0x09DA	; 0x8009da <Comp_1+0x2>
    534c:	88 23       	and	r24, r24
    534e:	d9 f0       	breq	.+54     	; 0x5386 <StartReversingValve+0x102>
		{
			xSerialxPrintf(&xSerial3Port,"StartReversingheast_1\r\n");
    5350:	83 ee       	ldi	r24, 0xE3	; 227
    5352:	92 e0       	ldi	r25, 0x02	; 2
    5354:	9f 93       	push	r25
    5356:	8f 93       	push	r24
    5358:	86 e1       	ldi	r24, 0x16	; 22
    535a:	98 e0       	ldi	r25, 0x08	; 8
    535c:	9f 93       	push	r25
    535e:	8f 93       	push	r24
    5360:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			if(EEpromData.reversMod==0){//PIN_REV_VALVE_1 > 0 && 
    5364:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <EEpromData+0x28>
    5368:	0f 90       	pop	r0
    536a:	0f 90       	pop	r0
    536c:	0f 90       	pop	r0
    536e:	0f 90       	pop	r0
    5370:	81 11       	cpse	r24, r1
    5372:	04 c0       	rjmp	.+8      	; 0x537c <StartReversingValve+0xf8>
				
				STOP_REV_VALVE_1;
    5374:	a4 98       	cbi	0x14, 4	; 20
				Comp_1.revVOn=0;
    5376:	10 92 e6 09 	sts	0x09E6, r1	; 0x8009e6 <Comp_1+0xe>
    537a:	05 c0       	rjmp	.+10     	; 0x5386 <StartReversingValve+0x102>
				
				time_count_1+= difftime(time(&current_time), timeStartRevV_1);
				if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
				*/
			}
			else if(EEpromData.reversMod==1){//PIN_REV_VALVE_1 == 0 && 
    537c:	81 30       	cpi	r24, 0x01	; 1
    537e:	19 f4       	brne	.+6      	; 0x5386 <StartReversingValve+0x102>
				START_REV_VALVE_1;
    5380:	a4 9a       	sbi	0x14, 4	; 20
				Comp_1.revVOn=1;
    5382:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <Comp_1+0xe>
				*/
			}
			
		}
		
		xTimerChangePeriod( xStartThreeWay,period, 100 );
    5386:	0f 2e       	mov	r0, r31
    5388:	f4 e6       	ldi	r31, 0x64	; 100
    538a:	cf 2e       	mov	r12, r31
    538c:	d1 2c       	mov	r13, r1
    538e:	e1 2c       	mov	r14, r1
    5390:	f1 2c       	mov	r15, r1
    5392:	f0 2d       	mov	r31, r0
    5394:	00 e0       	ldi	r16, 0x00	; 0
    5396:	10 e0       	ldi	r17, 0x00	; 0
    5398:	a5 01       	movw	r20, r10
    539a:	94 01       	movw	r18, r8
    539c:	64 e0       	ldi	r22, 0x04	; 4
    539e:	80 91 50 0a 	lds	r24, 0x0A50	; 0x800a50 <xStartThreeWay>
    53a2:	90 91 51 0a 	lds	r25, 0x0A51	; 0x800a51 <xStartThreeWay+0x1>
    53a6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    53aa:	6b c0       	rjmp	.+214    	; 0x5482 <StartReversingValve+0x1fe>
		
	}
else if((*pxTimerID) == uxStartDelayRevVTimer_2_ID)
    53ac:	81 31       	cpi	r24, 0x11	; 17
    53ae:	09 f0       	breq	.+2      	; 0x53b2 <StartReversingValve+0x12e>
    53b0:	68 c0       	rjmp	.+208    	; 0x5482 <StartReversingValve+0x1fe>
	{
		period=(TickType_t)EEpromData.HeatingPump_delay;
    53b2:	20 91 7b 09 	lds	r18, 0x097B	; 0x80097b <EEpromData+0x3>
		period*=1000;
    53b6:	30 e0       	ldi	r19, 0x00	; 0
    53b8:	a8 ee       	ldi	r26, 0xE8	; 232
    53ba:	b3 e0       	ldi	r27, 0x03	; 3
    53bc:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    53c0:	4b 01       	movw	r8, r22
    53c2:	5c 01       	movw	r10, r24
		 xSerialxPrintf(&xSerial3Port,"StartReversingValve_2\r\n");
    53c4:	8b ef       	ldi	r24, 0xFB	; 251
    53c6:	92 e0       	ldi	r25, 0x02	; 2
    53c8:	9f 93       	push	r25
    53ca:	8f 93       	push	r24
    53cc:	86 e1       	ldi	r24, 0x16	; 22
    53ce:	98 e0       	ldi	r25, 0x08	; 8
    53d0:	9f 93       	push	r25
    53d2:	8f 93       	push	r24
    53d4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(Comp_2.Cooling)
    53d8:	0f 90       	pop	r0
    53da:	0f 90       	pop	r0
    53dc:	0f 90       	pop	r0
    53de:	0f 90       	pop	r0
    53e0:	80 91 65 0a 	lds	r24, 0x0A65	; 0x800a65 <Comp_2+0x3>
    53e4:	88 23       	and	r24, r24
    53e6:	e1 f0       	breq	.+56     	; 0x5420 <StartReversingValve+0x19c>
		{xSerialxPrintf(&xSerial3Port,"StartReversingcool_2\r\n");
    53e8:	83 e1       	ldi	r24, 0x13	; 19
    53ea:	93 e0       	ldi	r25, 0x03	; 3
    53ec:	9f 93       	push	r25
    53ee:	8f 93       	push	r24
    53f0:	86 e1       	ldi	r24, 0x16	; 22
    53f2:	98 e0       	ldi	r25, 0x08	; 8
    53f4:	9f 93       	push	r25
    53f6:	8f 93       	push	r24
    53f8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			if(EEpromData.reversMod==1){//PIN_REV_VALVE_2 >0 && 
    53fc:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <EEpromData+0x28>
    5400:	0f 90       	pop	r0
    5402:	0f 90       	pop	r0
    5404:	0f 90       	pop	r0
    5406:	0f 90       	pop	r0
    5408:	81 30       	cpi	r24, 0x01	; 1
    540a:	21 f4       	brne	.+8      	; 0x5414 <StartReversingValve+0x190>
				
				STOP_REV_VALVE_2;//
    540c:	a3 98       	cbi	0x14, 3	; 20
				Comp_2.revVOn=0;
    540e:	10 92 70 0a 	sts	0x0A70, r1	; 0x800a70 <Comp_2+0xe>
    5412:	06 c0       	rjmp	.+12     	; 0x5420 <StartReversingValve+0x19c>
				time_count_2+= difftime(time(&current_time), timeStartRevV_2);
				if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
				*/
				
			}
			else if(EEpromData.reversMod==0){//PIN_REV_VALVE_2 == 0 && 
    5414:	81 11       	cpse	r24, r1
    5416:	04 c0       	rjmp	.+8      	; 0x5420 <StartReversingValve+0x19c>
				START_REV_VALVE_2;
    5418:	a3 9a       	sbi	0x14, 3	; 20
				Comp_1.revVOn=1;
    541a:	81 e0       	ldi	r24, 0x01	; 1
    541c:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <Comp_1+0xe>
				EEpromData.number_turnon_revers_2+=1;
				*/
			}
			
		}
		if(Comp_2.Heating)
    5420:	80 91 64 0a 	lds	r24, 0x0A64	; 0x800a64 <Comp_2+0x2>
    5424:	88 23       	and	r24, r24
    5426:	d9 f0       	breq	.+54     	; 0x545e <StartReversingValve+0x1da>
		{xSerialxPrintf(&xSerial3Port,"StartReversingheat_2\r\n");
    5428:	8a e2       	ldi	r24, 0x2A	; 42
    542a:	93 e0       	ldi	r25, 0x03	; 3
    542c:	9f 93       	push	r25
    542e:	8f 93       	push	r24
    5430:	86 e1       	ldi	r24, 0x16	; 22
    5432:	98 e0       	ldi	r25, 0x08	; 8
    5434:	9f 93       	push	r25
    5436:	8f 93       	push	r24
    5438:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			if(EEpromData.reversMod==0){//PIN_REV_VALVE_2 > 0 && 
    543c:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <EEpromData+0x28>
    5440:	0f 90       	pop	r0
    5442:	0f 90       	pop	r0
    5444:	0f 90       	pop	r0
    5446:	0f 90       	pop	r0
    5448:	81 11       	cpse	r24, r1
    544a:	04 c0       	rjmp	.+8      	; 0x5454 <StartReversingValve+0x1d0>
				
				STOP_REV_VALVE_2;
    544c:	a3 98       	cbi	0x14, 3	; 20
				Comp_2.revVOn=0;
    544e:	10 92 70 0a 	sts	0x0A70, r1	; 0x800a70 <Comp_2+0xe>
    5452:	05 c0       	rjmp	.+10     	; 0x545e <StartReversingValve+0x1da>
				
				time_count_2+= difftime(time(&current_time), timeStartRevV_2);
				if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
				*/
			}
			else if(EEpromData.reversMod==1){//PIN_REV_VALVE_2 == 0 && 
    5454:	81 30       	cpi	r24, 0x01	; 1
    5456:	19 f4       	brne	.+6      	; 0x545e <StartReversingValve+0x1da>
				START_REV_VALVE_2;
    5458:	a3 9a       	sbi	0x14, 3	; 20
				Comp_2.revVOn=1;
    545a:	80 93 70 0a 	sts	0x0A70, r24	; 0x800a70 <Comp_2+0xe>
				*/
			}
			
		}

		xTimerChangePeriod( xStartHeatPump_2,period, 100 );
    545e:	0f 2e       	mov	r0, r31
    5460:	f4 e6       	ldi	r31, 0x64	; 100
    5462:	cf 2e       	mov	r12, r31
    5464:	d1 2c       	mov	r13, r1
    5466:	e1 2c       	mov	r14, r1
    5468:	f1 2c       	mov	r15, r1
    546a:	f0 2d       	mov	r31, r0
    546c:	00 e0       	ldi	r16, 0x00	; 0
    546e:	10 e0       	ldi	r17, 0x00	; 0
    5470:	a5 01       	movw	r20, r10
    5472:	94 01       	movw	r18, r8
    5474:	64 e0       	ldi	r22, 0x04	; 4
    5476:	80 91 52 0a 	lds	r24, 0x0A52	; 0x800a52 <xStartHeatPump_2>
    547a:	90 91 53 0a 	lds	r25, 0x0A53	; 0x800a53 <xStartHeatPump_2+0x1>
    547e:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}


}
    5482:	df 91       	pop	r29
    5484:	cf 91       	pop	r28
    5486:	1f 91       	pop	r17
    5488:	0f 91       	pop	r16
    548a:	ff 90       	pop	r15
    548c:	ef 90       	pop	r14
    548e:	df 90       	pop	r13
    5490:	cf 90       	pop	r12
    5492:	bf 90       	pop	r11
    5494:	af 90       	pop	r10
    5496:	9f 90       	pop	r9
    5498:	8f 90       	pop	r8
    549a:	08 95       	ret

0000549c <StartHeatPump>:
}

//------------------------------------------------

void StartHeatPump(TimerHandle_t xTimer)
{
    549c:	8f 92       	push	r8
    549e:	9f 92       	push	r9
    54a0:	af 92       	push	r10
    54a2:	bf 92       	push	r11
    54a4:	cf 92       	push	r12
    54a6:	df 92       	push	r13
    54a8:	ef 92       	push	r14
    54aa:	ff 92       	push	r15
    54ac:	0f 93       	push	r16
    54ae:	1f 93       	push	r17
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    54b0:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    54b4:	fc 01       	movw	r30, r24
	TickType_t period;
	period=(TickType_t)EEpromData.Compressor_delay;
    54b6:	20 91 78 09 	lds	r18, 0x0978	; 0x800978 <EEpromData>
	period*=1000;
    54ba:	30 e0       	ldi	r19, 0x00	; 0
    54bc:	a8 ee       	ldi	r26, 0xE8	; 232
    54be:	b3 e0       	ldi	r27, 0x03	; 3
    54c0:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    54c4:	4b 01       	movw	r8, r22
    54c6:	5c 01       	movw	r10, r24
	//xSerialxPrintf(&xSerial3Port,"StartHeatPump\r\n");
	if((*pxTimerID) == uxStartDelayHeatPTimer_1_ID) {
    54c8:	80 81       	ld	r24, Z
    54ca:	82 30       	cpi	r24, 0x02	; 2
    54cc:	09 f0       	breq	.+2      	; 0x54d0 <StartHeatPump+0x34>
    54ce:	40 c0       	rjmp	.+128    	; 0x5550 <StartHeatPump+0xb4>
		xSerialxPrintf(&xSerial3Port,"StartHeatPump_1\r\n");
    54d0:	81 e4       	ldi	r24, 0x41	; 65
    54d2:	93 e0       	ldi	r25, 0x03	; 3
    54d4:	9f 93       	push	r25
    54d6:	8f 93       	push	r24
    54d8:	86 e1       	ldi	r24, 0x16	; 22
    54da:	98 e0       	ldi	r25, 0x08	; 8
    54dc:	9f 93       	push	r25
    54de:	8f 93       	push	r24
    54e0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_1 ==0)
    54e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    54e8:	0f 90       	pop	r0
    54ea:	0f 90       	pop	r0
    54ec:	0f 90       	pop	r0
    54ee:	0f 90       	pop	r0
    54f0:	83 fd       	sbrc	r24, 3
    54f2:	70 c0       	rjmp	.+224    	; 0x55d4 <StartHeatPump+0x138>
		{
			
			//xSerialxPrintf(&xSerial3Port,"StartHeatPump_1\r\n");
			Comp_1.heatPOn=1;
    54f4:	81 e0       	ldi	r24, 0x01	; 1
    54f6:	80 93 e4 09 	sts	0x09E4, r24	; 0x8009e4 <Comp_1+0xc>
			START_HEAT_PUMP_1;
    54fa:	e2 e0       	ldi	r30, 0x02	; 2
    54fc:	f1 e0       	ldi	r31, 0x01	; 1
    54fe:	80 81       	ld	r24, Z
    5500:	88 60       	ori	r24, 0x08	; 8
    5502:	80 83       	st	Z, r24
			timeStartHeatP_1=time(&current_time);
    5504:	83 e7       	ldi	r24, 0x73	; 115
    5506:	99 e0       	ldi	r25, 0x09	; 9
    5508:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    550c:	60 93 ec 0a 	sts	0x0AEC, r22	; 0x800aec <timeStartHeatP_1>
    5510:	70 93 ed 0a 	sts	0x0AED, r23	; 0x800aed <timeStartHeatP_1+0x1>
    5514:	80 93 ee 0a 	sts	0x0AEE, r24	; 0x800aee <timeStartHeatP_1+0x2>
    5518:	90 93 ef 0a 	sts	0x0AEF, r25	; 0x800aef <timeStartHeatP_1+0x3>
			EEpromData.number_turnon_hiter_1+=1;			
    551c:	ea eb       	ldi	r30, 0xBA	; 186
    551e:	f9 e0       	ldi	r31, 0x09	; 9
    5520:	80 81       	ld	r24, Z
    5522:	91 81       	ldd	r25, Z+1	; 0x01
    5524:	01 96       	adiw	r24, 0x01	; 1
    5526:	91 83       	std	Z+1, r25	; 0x01
    5528:	80 83       	st	Z, r24
			xTimerChangePeriod( xStartCompressor_1,period, 100 );
    552a:	0f 2e       	mov	r0, r31
    552c:	f4 e6       	ldi	r31, 0x64	; 100
    552e:	cf 2e       	mov	r12, r31
    5530:	d1 2c       	mov	r13, r1
    5532:	e1 2c       	mov	r14, r1
    5534:	f1 2c       	mov	r15, r1
    5536:	f0 2d       	mov	r31, r0
    5538:	00 e0       	ldi	r16, 0x00	; 0
    553a:	10 e0       	ldi	r17, 0x00	; 0
    553c:	a5 01       	movw	r20, r10
    553e:	94 01       	movw	r18, r8
    5540:	64 e0       	ldi	r22, 0x04	; 4
    5542:	80 91 f6 0a 	lds	r24, 0x0AF6	; 0x800af6 <xStartCompressor_1>
    5546:	90 91 f7 0a 	lds	r25, 0x0AF7	; 0x800af7 <xStartCompressor_1+0x1>
    554a:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    554e:	42 c0       	rjmp	.+132    	; 0x55d4 <StartHeatPump+0x138>
			
		}
	}

	else if((*pxTimerID) == uxStartDelayHeatPTimer_2_ID) {
    5550:	8f 30       	cpi	r24, 0x0F	; 15
    5552:	09 f0       	breq	.+2      	; 0x5556 <StartHeatPump+0xba>
    5554:	3f c0       	rjmp	.+126    	; 0x55d4 <StartHeatPump+0x138>
		xSerialxPrintf(&xSerial3Port,"StartHeatPump_2\r\n");
    5556:	83 e5       	ldi	r24, 0x53	; 83
    5558:	93 e0       	ldi	r25, 0x03	; 3
    555a:	9f 93       	push	r25
    555c:	8f 93       	push	r24
    555e:	86 e1       	ldi	r24, 0x16	; 22
    5560:	98 e0       	ldi	r25, 0x08	; 8
    5562:	9f 93       	push	r25
    5564:	8f 93       	push	r24
    5566:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_2 == 0)
    556a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    556e:	0f 90       	pop	r0
    5570:	0f 90       	pop	r0
    5572:	0f 90       	pop	r0
    5574:	0f 90       	pop	r0
    5576:	84 fd       	sbrc	r24, 4
    5578:	2d c0       	rjmp	.+90     	; 0x55d4 <StartHeatPump+0x138>
		{
			Comp_2.heatPOn=2;
    557a:	82 e0       	ldi	r24, 0x02	; 2
    557c:	80 93 6e 0a 	sts	0x0A6E, r24	; 0x800a6e <Comp_2+0xc>
			START_HEAT_PUMP_2;
    5580:	e2 e0       	ldi	r30, 0x02	; 2
    5582:	f1 e0       	ldi	r31, 0x01	; 1
    5584:	80 81       	ld	r24, Z
    5586:	80 61       	ori	r24, 0x10	; 16
    5588:	80 83       	st	Z, r24
			timeStartHeatP_2=time(&current_time);
    558a:	83 e7       	ldi	r24, 0x73	; 115
    558c:	99 e0       	ldi	r25, 0x09	; 9
    558e:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5592:	60 93 00 0b 	sts	0x0B00, r22	; 0x800b00 <timeStartHeatP_2>
    5596:	70 93 01 0b 	sts	0x0B01, r23	; 0x800b01 <timeStartHeatP_2+0x1>
    559a:	80 93 02 0b 	sts	0x0B02, r24	; 0x800b02 <timeStartHeatP_2+0x2>
    559e:	90 93 03 0b 	sts	0x0B03, r25	; 0x800b03 <timeStartHeatP_2+0x3>
			EEpromData.number_turnon_hiter_2+=1;
    55a2:	ee ec       	ldi	r30, 0xCE	; 206
    55a4:	f9 e0       	ldi	r31, 0x09	; 9
    55a6:	80 81       	ld	r24, Z
    55a8:	91 81       	ldd	r25, Z+1	; 0x01
    55aa:	01 96       	adiw	r24, 0x01	; 1
    55ac:	91 83       	std	Z+1, r25	; 0x01
    55ae:	80 83       	st	Z, r24
			xTimerChangePeriod( xStartCompressor_2,period, 100 );
    55b0:	0f 2e       	mov	r0, r31
    55b2:	f4 e6       	ldi	r31, 0x64	; 100
    55b4:	cf 2e       	mov	r12, r31
    55b6:	d1 2c       	mov	r13, r1
    55b8:	e1 2c       	mov	r14, r1
    55ba:	f1 2c       	mov	r15, r1
    55bc:	f0 2d       	mov	r31, r0
    55be:	00 e0       	ldi	r16, 0x00	; 0
    55c0:	10 e0       	ldi	r17, 0x00	; 0
    55c2:	a5 01       	movw	r20, r10
    55c4:	94 01       	movw	r18, r8
    55c6:	64 e0       	ldi	r22, 0x04	; 4
    55c8:	80 91 08 0b 	lds	r24, 0x0B08	; 0x800b08 <xStartCompressor_2>
    55cc:	90 91 09 0b 	lds	r25, 0x0B09	; 0x800b09 <xStartCompressor_2+0x1>
    55d0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		}
		
	}
}
    55d4:	1f 91       	pop	r17
    55d6:	0f 91       	pop	r16
    55d8:	ff 90       	pop	r15
    55da:	ef 90       	pop	r14
    55dc:	df 90       	pop	r13
    55de:	cf 90       	pop	r12
    55e0:	bf 90       	pop	r11
    55e2:	af 90       	pop	r10
    55e4:	9f 90       	pop	r9
    55e6:	8f 90       	pop	r8
    55e8:	08 95       	ret

000055ea <SwitchRev_2_Time>:
		xTimerStart(xSwitchRevTwo_2_time, 0);
	}
}
//-------------------------------------------------------------------------
void SwitchRev_2_Time(TimerHandle_t xTimer)
{
    55ea:	8f 92       	push	r8
    55ec:	9f 92       	push	r9
    55ee:	af 92       	push	r10
    55f0:	bf 92       	push	r11
    55f2:	cf 92       	push	r12
    55f4:	df 92       	push	r13
    55f6:	ef 92       	push	r14
    55f8:	ff 92       	push	r15
    55fa:	0f 93       	push	r16
    55fc:	1f 93       	push	r17
    55fe:	cf 93       	push	r28
    5600:	df 93       	push	r29
    5602:	ac 01       	movw	r20, r24
	portBASE_TYPE *pxTimerID;
	
	TickType_t period;
	period=(TickType_t)EEpromData.HeatingPump_delay;
    5604:	20 91 7b 09 	lds	r18, 0x097B	; 0x80097b <EEpromData+0x3>
	period*=1000;
    5608:	30 e0       	ldi	r19, 0x00	; 0
    560a:	a8 ee       	ldi	r26, 0xE8	; 232
    560c:	b3 e0       	ldi	r27, 0x03	; 3
    560e:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    5612:	4b 01       	movw	r8, r22
    5614:	5c 01       	movw	r10, r24
	pxTimerID = pvTimerGetTimerID(xTimer);
    5616:	ca 01       	movw	r24, r20
    5618:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    561c:	ec 01       	movw	r28, r24
	
	//xSerialxPrintf(&xSerial3Port,"SwitchRev_2\r\n");
	
	if((*pxTimerID) == uxSwitchRevTwo_1_ID)
    561e:	88 81       	ld	r24, Y
    5620:	8d 30       	cpi	r24, 0x0D	; 13
    5622:	29 f5       	brne	.+74     	; 0x566e <SwitchRev_2_Time+0x84>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_ON_1_2\r\n");
    5624:	85 e6       	ldi	r24, 0x65	; 101
    5626:	93 e0       	ldi	r25, 0x03	; 3
    5628:	9f 93       	push	r25
    562a:	8f 93       	push	r24
    562c:	86 e1       	ldi	r24, 0x16	; 22
    562e:	98 e0       	ldi	r25, 0x08	; 8
    5630:	9f 93       	push	r25
    5632:	8f 93       	push	r24
    5634:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_REV_VALVE_1 == 0){START_REV_VALVE_1;}//
    5638:	0f 90       	pop	r0
    563a:	0f 90       	pop	r0
    563c:	0f 90       	pop	r0
    563e:	0f 90       	pop	r0
    5640:	94 99       	sbic	0x12, 4	; 18
    5642:	02 c0       	rjmp	.+4      	; 0x5648 <SwitchRev_2_Time+0x5e>
    5644:	a4 9a       	sbi	0x14, 4	; 20
    5646:	01 c0       	rjmp	.+2      	; 0x564a <SwitchRev_2_Time+0x60>
		else {STOP_REV_VALVE_1;}//xSerialxPrintf(&xSerial3Port,"SwitchRev_OFF_2\r\n");
    5648:	a4 98       	cbi	0x14, 4	; 20
		xTimerChangePeriod( xStopHeatPump_1,period, 100 );
    564a:	0f 2e       	mov	r0, r31
    564c:	f4 e6       	ldi	r31, 0x64	; 100
    564e:	cf 2e       	mov	r12, r31
    5650:	d1 2c       	mov	r13, r1
    5652:	e1 2c       	mov	r14, r1
    5654:	f1 2c       	mov	r15, r1
    5656:	f0 2d       	mov	r31, r0
    5658:	00 e0       	ldi	r16, 0x00	; 0
    565a:	10 e0       	ldi	r17, 0x00	; 0
    565c:	a5 01       	movw	r20, r10
    565e:	94 01       	movw	r18, r8
    5660:	64 e0       	ldi	r22, 0x04	; 4
    5662:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <xStopHeatPump_1>
    5666:	90 91 66 09 	lds	r25, 0x0966	; 0x800966 <xStopHeatPump_1+0x1>
    566a:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
	if((*pxTimerID) == uxSwitchRevTwo_2_ID)
    566e:	88 81       	ld	r24, Y
    5670:	89 31       	cpi	r24, 0x19	; 25
    5672:	b9 f4       	brne	.+46     	; 0x56a2 <SwitchRev_2_Time+0xb8>
	{
		//xSerialxPrintf(&xSerial3Port,"SwitchRev_2_2\r\n");
		if(PIN_REV_VALVE_2 == 0) START_REV_VALVE_2;
    5674:	93 99       	sbic	0x12, 3	; 18
    5676:	02 c0       	rjmp	.+4      	; 0x567c <SwitchRev_2_Time+0x92>
    5678:	a3 9a       	sbi	0x14, 3	; 20
    567a:	01 c0       	rjmp	.+2      	; 0x567e <SwitchRev_2_Time+0x94>
		else STOP_REV_VALVE_2;
    567c:	a3 98       	cbi	0x14, 3	; 20
		xTimerChangePeriod( xStopHeatPump_2,period, 100 );
    567e:	0f 2e       	mov	r0, r31
    5680:	f4 e6       	ldi	r31, 0x64	; 100
    5682:	cf 2e       	mov	r12, r31
    5684:	d1 2c       	mov	r13, r1
    5686:	e1 2c       	mov	r14, r1
    5688:	f1 2c       	mov	r15, r1
    568a:	f0 2d       	mov	r31, r0
    568c:	00 e0       	ldi	r16, 0x00	; 0
    568e:	10 e0       	ldi	r17, 0x00	; 0
    5690:	a5 01       	movw	r20, r10
    5692:	94 01       	movw	r18, r8
    5694:	64 e0       	ldi	r22, 0x04	; 4
    5696:	80 91 e6 0a 	lds	r24, 0x0AE6	; 0x800ae6 <xStopHeatPump_2>
    569a:	90 91 e7 0a 	lds	r25, 0x0AE7	; 0x800ae7 <xStopHeatPump_2+0x1>
    569e:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
}
    56a2:	df 91       	pop	r29
    56a4:	cf 91       	pop	r28
    56a6:	1f 91       	pop	r17
    56a8:	0f 91       	pop	r16
    56aa:	ff 90       	pop	r15
    56ac:	ef 90       	pop	r14
    56ae:	df 90       	pop	r13
    56b0:	cf 90       	pop	r12
    56b2:	bf 90       	pop	r11
    56b4:	af 90       	pop	r10
    56b6:	9f 90       	pop	r9
    56b8:	8f 90       	pop	r8
    56ba:	08 95       	ret

000056bc <Revers_Stop>:
	
}

//-------------------------------------------------------------------------
void Revers_Stop(TimerHandle_t xTimer)
{
    56bc:	8f 92       	push	r8
    56be:	9f 92       	push	r9
    56c0:	af 92       	push	r10
    56c2:	bf 92       	push	r11
    56c4:	cf 92       	push	r12
    56c6:	df 92       	push	r13
    56c8:	ef 92       	push	r14
    56ca:	ff 92       	push	r15
    56cc:	0f 93       	push	r16
    56ce:	1f 93       	push	r17
    56d0:	ac 01       	movw	r20, r24
	static time_t time_count_1;
	static time_t time_count_2;
	TickType_t period;
	period=(TickType_t)EEpromData.Source_Pump_delay;
    56d2:	20 91 79 09 	lds	r18, 0x0979	; 0x800979 <EEpromData+0x1>
	period*=1000;
    56d6:	30 e0       	ldi	r19, 0x00	; 0
    56d8:	a8 ee       	ldi	r26, 0xE8	; 232
    56da:	b3 e0       	ldi	r27, 0x03	; 3
    56dc:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    56e0:	4b 01       	movw	r8, r22
    56e2:	5c 01       	movw	r10, r24

	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    56e4:	ca 01       	movw	r24, r20
    56e6:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
   // xSerialxPrintf(&xSerial3Port,"StopRevValve\r\n");

	if((*pxTimerID) == uxStopDelayRevVTimer_1_ID)
    56ea:	fc 01       	movw	r30, r24
    56ec:	80 81       	ld	r24, Z
    56ee:	8a 30       	cpi	r24, 0x0A	; 10
    56f0:	31 f5       	brne	.+76     	; 0x573e <Revers_Stop+0x82>
	{
		
		
		if(PIN_REV_VALVE_1 > 0)//
    56f2:	94 9b       	sbis	0x12, 4	; 18
    56f4:	11 c0       	rjmp	.+34     	; 0x5718 <Revers_Stop+0x5c>
		{
			STOP_REV_VALVE_1;
    56f6:	a4 98       	cbi	0x14, 4	; 20
			xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    56f8:	88 e7       	ldi	r24, 0x78	; 120
    56fa:	93 e0       	ldi	r25, 0x03	; 3
    56fc:	9f 93       	push	r25
    56fe:	8f 93       	push	r24
    5700:	86 e1       	ldi	r24, 0x16	; 22
    5702:	98 e0       	ldi	r25, 0x08	; 8
    5704:	9f 93       	push	r25
    5706:	8f 93       	push	r24
    5708:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.revVOn=0;
    570c:	10 92 e6 09 	sts	0x09E6, r1	; 0x8009e6 <Comp_1+0xe>
    5710:	0f 90       	pop	r0
    5712:	0f 90       	pop	r0
    5714:	0f 90       	pop	r0
    5716:	0f 90       	pop	r0
			//time_count_1+= difftime(time(&current_time), timeStartRevV_1);
			//if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}

		}
		xTimerChangePeriod( xStopSource_1,period, 100 );
    5718:	0f 2e       	mov	r0, r31
    571a:	f4 e6       	ldi	r31, 0x64	; 100
    571c:	cf 2e       	mov	r12, r31
    571e:	d1 2c       	mov	r13, r1
    5720:	e1 2c       	mov	r14, r1
    5722:	f1 2c       	mov	r15, r1
    5724:	f0 2d       	mov	r31, r0
    5726:	00 e0       	ldi	r16, 0x00	; 0
    5728:	10 e0       	ldi	r17, 0x00	; 0
    572a:	a5 01       	movw	r20, r10
    572c:	94 01       	movw	r18, r8
    572e:	64 e0       	ldi	r22, 0x04	; 4
    5730:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <xStopSource_1>
    5734:	90 91 70 09 	lds	r25, 0x0970	; 0x800970 <xStopSource_1+0x1>
    5738:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    573c:	27 c0       	rjmp	.+78     	; 0x578c <Revers_Stop+0xd0>
		//xTimerStart(xStopSource_1, 0);
	}
	
	else if((*pxTimerID) == uxStopDelayRevVTimer_2_ID)
    573e:	87 31       	cpi	r24, 0x17	; 23
    5740:	29 f5       	brne	.+74     	; 0x578c <Revers_Stop+0xd0>
	{
		
		if(PIN_REV_VALVE_2 > 0)//
    5742:	93 9b       	sbis	0x12, 3	; 18
    5744:	11 c0       	rjmp	.+34     	; 0x5768 <Revers_Stop+0xac>
		{   
			xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    5746:	89 e8       	ldi	r24, 0x89	; 137
    5748:	93 e0       	ldi	r25, 0x03	; 3
    574a:	9f 93       	push	r25
    574c:	8f 93       	push	r24
    574e:	86 e1       	ldi	r24, 0x16	; 22
    5750:	98 e0       	ldi	r25, 0x08	; 8
    5752:	9f 93       	push	r25
    5754:	8f 93       	push	r24
    5756:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			STOP_REV_VALVE_2;
    575a:	a3 98       	cbi	0x14, 3	; 20
			
			
			Comp_2.revVOn=0;
    575c:	10 92 70 0a 	sts	0x0A70, r1	; 0x800a70 <Comp_2+0xe>
    5760:	0f 90       	pop	r0
    5762:	0f 90       	pop	r0
    5764:	0f 90       	pop	r0
    5766:	0f 90       	pop	r0
			//time_count_2+= difftime(time(&current_time), timeStartRevV_2);
			//if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}

		}
		xTimerChangePeriod( xStopSource_2,period, 100 );
    5768:	0f 2e       	mov	r0, r31
    576a:	f4 e6       	ldi	r31, 0x64	; 100
    576c:	cf 2e       	mov	r12, r31
    576e:	d1 2c       	mov	r13, r1
    5770:	e1 2c       	mov	r14, r1
    5772:	f1 2c       	mov	r15, r1
    5774:	f0 2d       	mov	r31, r0
    5776:	00 e0       	ldi	r16, 0x00	; 0
    5778:	10 e0       	ldi	r17, 0x00	; 0
    577a:	a5 01       	movw	r20, r10
    577c:	94 01       	movw	r18, r8
    577e:	64 e0       	ldi	r22, 0x04	; 4
    5780:	80 91 d6 0a 	lds	r24, 0x0AD6	; 0x800ad6 <xStopSource_2>
    5784:	90 91 d7 0a 	lds	r25, 0x0AD7	; 0x800ad7 <xStopSource_2+0x1>
    5788:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		//xTimerStart(xStopSource_2, 0);
	}
	
	
}
    578c:	1f 91       	pop	r17
    578e:	0f 91       	pop	r16
    5790:	ff 90       	pop	r15
    5792:	ef 90       	pop	r14
    5794:	df 90       	pop	r13
    5796:	cf 90       	pop	r12
    5798:	bf 90       	pop	r11
    579a:	af 90       	pop	r10
    579c:	9f 90       	pop	r9
    579e:	8f 90       	pop	r8
    57a0:	08 95       	ret

000057a2 <StartCheckErrors>:
}
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------
void StartCheckErrors(TimerHandle_t xTimer)
{
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    57a2:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
	
	
	if((*pxTimerID) == uxStartDelayChekErrTimer_1_ID){Comp_1.countError=0; Comp_1.checkErrors=true;xSerialxPrintf(&xSerial3Port,"StartCheckErrors_1\r\n");}
    57a6:	fc 01       	movw	r30, r24
    57a8:	80 81       	ld	r24, Z
    57aa:	87 30       	cpi	r24, 0x07	; 7
    57ac:	a1 f4       	brne	.+40     	; 0x57d6 <StartCheckErrors+0x34>
    57ae:	e8 ed       	ldi	r30, 0xD8	; 216
    57b0:	f9 e0       	ldi	r31, 0x09	; 9
    57b2:	11 8a       	std	Z+17, r1	; 0x11
    57b4:	81 e0       	ldi	r24, 0x01	; 1
    57b6:	85 83       	std	Z+5, r24	; 0x05
    57b8:	8a e9       	ldi	r24, 0x9A	; 154
    57ba:	93 e0       	ldi	r25, 0x03	; 3
    57bc:	9f 93       	push	r25
    57be:	8f 93       	push	r24
    57c0:	86 e1       	ldi	r24, 0x16	; 22
    57c2:	98 e0       	ldi	r25, 0x08	; 8
    57c4:	9f 93       	push	r25
    57c6:	8f 93       	push	r24
    57c8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    57cc:	0f 90       	pop	r0
    57ce:	0f 90       	pop	r0
    57d0:	0f 90       	pop	r0
    57d2:	0f 90       	pop	r0
    57d4:	08 95       	ret
	else if((*pxTimerID) == uxStartDelayChekErrTimer_2_ID){Comp_2.countError=0;Comp_2.checkErrors=true;xSerialxPrintf(&xSerial3Port,"StartCheckErrors_2\r\n");}
    57d6:	84 31       	cpi	r24, 0x14	; 20
    57d8:	99 f4       	brne	.+38     	; 0x5800 <StartCheckErrors+0x5e>
    57da:	e2 e6       	ldi	r30, 0x62	; 98
    57dc:	fa e0       	ldi	r31, 0x0A	; 10
    57de:	11 8a       	std	Z+17, r1	; 0x11
    57e0:	81 e0       	ldi	r24, 0x01	; 1
    57e2:	85 83       	std	Z+5, r24	; 0x05
    57e4:	8f ea       	ldi	r24, 0xAF	; 175
    57e6:	93 e0       	ldi	r25, 0x03	; 3
    57e8:	9f 93       	push	r25
    57ea:	8f 93       	push	r24
    57ec:	86 e1       	ldi	r24, 0x16	; 22
    57ee:	98 e0       	ldi	r25, 0x08	; 8
    57f0:	9f 93       	push	r25
    57f2:	8f 93       	push	r24
    57f4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    57f8:	0f 90       	pop	r0
    57fa:	0f 90       	pop	r0
    57fc:	0f 90       	pop	r0
    57fe:	0f 90       	pop	r0
    5800:	08 95       	ret

00005802 <StartCheckTrv>:
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------
void StartCheckTrv(TimerHandle_t xTimer)
{
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5802:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	if((*pxTimerID) == uxStartDelayChekTrvTimer_1_ID)       {Comp_1.checkTrv=true;xSerialxPrintf(&xSerial3Port,"StartCheckTrv_1\r\n");}
    5806:	fc 01       	movw	r30, r24
    5808:	80 81       	ld	r24, Z
    580a:	86 30       	cpi	r24, 0x06	; 6
    580c:	91 f4       	brne	.+36     	; 0x5832 <StartCheckTrv+0x30>
    580e:	81 e0       	ldi	r24, 0x01	; 1
    5810:	80 93 d9 09 	sts	0x09D9, r24	; 0x8009d9 <Comp_1+0x1>
    5814:	84 ec       	ldi	r24, 0xC4	; 196
    5816:	93 e0       	ldi	r25, 0x03	; 3
    5818:	9f 93       	push	r25
    581a:	8f 93       	push	r24
    581c:	86 e1       	ldi	r24, 0x16	; 22
    581e:	98 e0       	ldi	r25, 0x08	; 8
    5820:	9f 93       	push	r25
    5822:	8f 93       	push	r24
    5824:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    5828:	0f 90       	pop	r0
    582a:	0f 90       	pop	r0
    582c:	0f 90       	pop	r0
    582e:	0f 90       	pop	r0
    5830:	08 95       	ret
	else if((*pxTimerID) == uxStartDelayChekTrvTimer_2_ID) {Comp_2.checkTrv=true;xSerialxPrintf(&xSerial3Port,"StartCheckTrv_2\r\n");}
    5832:	83 31       	cpi	r24, 0x13	; 19
    5834:	89 f4       	brne	.+34     	; 0x5858 <StartCheckTrv+0x56>
    5836:	81 e0       	ldi	r24, 0x01	; 1
    5838:	80 93 63 0a 	sts	0x0A63, r24	; 0x800a63 <Comp_2+0x1>
    583c:	86 ed       	ldi	r24, 0xD6	; 214
    583e:	93 e0       	ldi	r25, 0x03	; 3
    5840:	9f 93       	push	r25
    5842:	8f 93       	push	r24
    5844:	86 e1       	ldi	r24, 0x16	; 22
    5846:	98 e0       	ldi	r25, 0x08	; 8
    5848:	9f 93       	push	r25
    584a:	8f 93       	push	r24
    584c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    5850:	0f 90       	pop	r0
    5852:	0f 90       	pop	r0
    5854:	0f 90       	pop	r0
    5856:	0f 90       	pop	r0
    5858:	08 95       	ret

0000585a <StartThreeWay>:


}
//------------------------------------------------
void StartThreeWay()
{
    585a:	8f 92       	push	r8
    585c:	9f 92       	push	r9
    585e:	af 92       	push	r10
    5860:	bf 92       	push	r11
    5862:	cf 92       	push	r12
    5864:	df 92       	push	r13
    5866:	ef 92       	push	r14
    5868:	ff 92       	push	r15
    586a:	0f 93       	push	r16
    586c:	1f 93       	push	r17
	static time_t time_count;
    TickType_t period;
	
	
	period=(TickType_t)EEpromData.HeatingPump_delay;
    586e:	20 91 7b 09 	lds	r18, 0x097B	; 0x80097b <EEpromData+0x3>
	period*=1000;
    5872:	30 e0       	ldi	r19, 0x00	; 0
    5874:	a8 ee       	ldi	r26, 0xE8	; 232
    5876:	b3 e0       	ldi	r27, 0x03	; 3
    5878:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    587c:	4b 01       	movw	r8, r22
    587e:	5c 01       	movw	r10, r24
	xSerialxPrintf(&xSerial3Port,"StartThreeWay\r\n");
    5880:	88 ee       	ldi	r24, 0xE8	; 232
    5882:	93 e0       	ldi	r25, 0x03	; 3
    5884:	9f 93       	push	r25
    5886:	8f 93       	push	r24
    5888:	86 e1       	ldi	r24, 0x16	; 22
    588a:	98 e0       	ldi	r25, 0x08	; 8
    588c:	9f 93       	push	r25
    588e:	8f 93       	push	r24
    5890:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(Comp_1.heatingWater)
    5894:	0f 90       	pop	r0
    5896:	0f 90       	pop	r0
    5898:	0f 90       	pop	r0
    589a:	0f 90       	pop	r0
    589c:	80 91 dc 09 	lds	r24, 0x09DC	; 0x8009dc <Comp_1+0x4>
    58a0:	88 23       	and	r24, r24
    58a2:	71 f1       	breq	.+92     	; 0x5900 <StartThreeWay+0xa6>
	{
		
		if(PIN_THWAY_VALVE == 0)//
    58a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    58a8:	88 23       	and	r24, r24
    58aa:	e4 f0       	brlt	.+56     	; 0x58e4 <StartThreeWay+0x8a>
		{
			START_THWAY_VALVE;
    58ac:	e2 e0       	ldi	r30, 0x02	; 2
    58ae:	f1 e0       	ldi	r31, 0x01	; 1
    58b0:	80 81       	ld	r24, Z
    58b2:	80 68       	ori	r24, 0x80	; 128
    58b4:	80 83       	st	Z, r24
			
			//xSerialxPrintf(&xSerial3Port,"StartThreeWay\r\n");
			Comp_1.threeWOn=1;
    58b6:	81 e0       	ldi	r24, 0x01	; 1
    58b8:	80 93 e5 09 	sts	0x09E5, r24	; 0x8009e5 <Comp_1+0xd>
			timeStartThreeW=time(&current_time);
    58bc:	83 e7       	ldi	r24, 0x73	; 115
    58be:	99 e0       	ldi	r25, 0x09	; 9
    58c0:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    58c4:	60 93 04 0b 	sts	0x0B04, r22	; 0x800b04 <timeStartThreeW>
    58c8:	70 93 05 0b 	sts	0x0B05, r23	; 0x800b05 <timeStartThreeW+0x1>
    58cc:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <timeStartThreeW+0x2>
    58d0:	90 93 07 0b 	sts	0x0B07, r25	; 0x800b07 <timeStartThreeW+0x3>
			EEpromData.number_turnon_threeway+=1;
    58d4:	ee eb       	ldi	r30, 0xBE	; 190
    58d6:	f9 e0       	ldi	r31, 0x09	; 9
    58d8:	80 81       	ld	r24, Z
    58da:	91 81       	ldd	r25, Z+1	; 0x01
    58dc:	01 96       	adiw	r24, 0x01	; 1
    58de:	91 83       	std	Z+1, r25	; 0x01
    58e0:	80 83       	st	Z, r24
    58e2:	0e c0       	rjmp	.+28     	; 0x5900 <StartThreeWay+0xa6>
			
		} else xSerialxPrintf(&xSerial3Port,"StopThreeWay\r\n");
    58e4:	88 ef       	ldi	r24, 0xF8	; 248
    58e6:	93 e0       	ldi	r25, 0x03	; 3
    58e8:	9f 93       	push	r25
    58ea:	8f 93       	push	r24
    58ec:	86 e1       	ldi	r24, 0x16	; 22
    58ee:	98 e0       	ldi	r25, 0x08	; 8
    58f0:	9f 93       	push	r25
    58f2:	8f 93       	push	r24
    58f4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    58f8:	0f 90       	pop	r0
    58fa:	0f 90       	pop	r0
    58fc:	0f 90       	pop	r0
    58fe:	0f 90       	pop	r0
	}
	if(Comp_1.Heating || Comp_1.Cooling)
    5900:	80 91 da 09 	lds	r24, 0x09DA	; 0x8009da <Comp_1+0x2>
    5904:	81 11       	cpse	r24, r1
    5906:	05 c0       	rjmp	.+10     	; 0x5912 <StartThreeWay+0xb8>
    5908:	80 91 db 09 	lds	r24, 0x09DB	; 0x8009db <Comp_1+0x3>
    590c:	88 23       	and	r24, r24
    590e:	09 f4       	brne	.+2      	; 0x5912 <StartThreeWay+0xb8>
    5910:	4d c0       	rjmp	.+154    	; 0x59ac <StartThreeWay+0x152>
	{
		if(PIN_THWAY_VALVE > 0)//
    5912:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5916:	88 23       	and	r24, r24
    5918:	0c f0       	brlt	.+2      	; 0x591c <StartThreeWay+0xc2>
    591a:	48 c0       	rjmp	.+144    	; 0x59ac <StartThreeWay+0x152>
		{
			STOP_THWAY_VALVE;
    591c:	e2 e0       	ldi	r30, 0x02	; 2
    591e:	f1 e0       	ldi	r31, 0x01	; 1
    5920:	80 81       	ld	r24, Z
    5922:	8f 77       	andi	r24, 0x7F	; 127
    5924:	80 83       	st	Z, r24
			
			//xSerialxPrintf(&xSerial3Port,"StopThreeWay\r\n");
			Comp_1.threeWOn=0;
    5926:	10 92 e5 09 	sts	0x09E5, r1	; 0x8009e5 <Comp_1+0xd>
			time_count+= difftime(time(&current_time), timeStartThreeW);
    592a:	c0 90 04 0b 	lds	r12, 0x0B04	; 0x800b04 <timeStartThreeW>
    592e:	d0 90 05 0b 	lds	r13, 0x0B05	; 0x800b05 <timeStartThreeW+0x1>
    5932:	e0 90 06 0b 	lds	r14, 0x0B06	; 0x800b06 <timeStartThreeW+0x2>
    5936:	f0 90 07 0b 	lds	r15, 0x0B07	; 0x800b07 <timeStartThreeW+0x3>
    593a:	83 e7       	ldi	r24, 0x73	; 115
    593c:	99 e0       	ldi	r25, 0x09	; 9
    593e:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5942:	a7 01       	movw	r20, r14
    5944:	96 01       	movw	r18, r12
    5946:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    594a:	c0 90 bd 07 	lds	r12, 0x07BD	; 0x8007bd <time_count.3181>
    594e:	d0 90 be 07 	lds	r13, 0x07BE	; 0x8007be <time_count.3181+0x1>
    5952:	e0 90 bf 07 	lds	r14, 0x07BF	; 0x8007bf <time_count.3181+0x2>
    5956:	f0 90 c0 07 	lds	r15, 0x07C0	; 0x8007c0 <time_count.3181+0x3>
    595a:	dc 01       	movw	r26, r24
    595c:	cb 01       	movw	r24, r22
    595e:	8c 0d       	add	r24, r12
    5960:	9d 1d       	adc	r25, r13
    5962:	ae 1d       	adc	r26, r14
    5964:	bf 1d       	adc	r27, r15
    5966:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <time_count.3181>
    596a:	90 93 be 07 	sts	0x07BE, r25	; 0x8007be <time_count.3181+0x1>
    596e:	a0 93 bf 07 	sts	0x07BF, r26	; 0x8007bf <time_count.3181+0x2>
    5972:	b0 93 c0 07 	sts	0x07C0, r27	; 0x8007c0 <time_count.3181+0x3>
			if(time_count>ONE_HOUR){EEpromData.time_threeway++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count=0;}
    5976:	81 31       	cpi	r24, 0x11	; 17
    5978:	9e 40       	sbci	r25, 0x0E	; 14
    597a:	a1 05       	cpc	r26, r1
    597c:	b1 05       	cpc	r27, r1
    597e:	b0 f0       	brcs	.+44     	; 0x59ac <StartThreeWay+0x152>
    5980:	e8 e7       	ldi	r30, 0x78	; 120
    5982:	f9 e0       	ldi	r31, 0x09	; 9
    5984:	84 ad       	ldd	r24, Z+60	; 0x3c
    5986:	95 ad       	ldd	r25, Z+61	; 0x3d
    5988:	01 96       	adiw	r24, 0x01	; 1
    598a:	95 af       	std	Z+61, r25	; 0x3d
    598c:	84 af       	std	Z+60, r24	; 0x3c
    598e:	40 e6       	ldi	r20, 0x60	; 96
    5990:	50 e0       	ldi	r21, 0x00	; 0
    5992:	60 e0       	ldi	r22, 0x00	; 0
    5994:	70 e0       	ldi	r23, 0x00	; 0
    5996:	cf 01       	movw	r24, r30
    5998:	0e 94 1c 5b 	call	0xb638	; 0xb638 <eeprom_update_block>
    599c:	10 92 bd 07 	sts	0x07BD, r1	; 0x8007bd <time_count.3181>
    59a0:	10 92 be 07 	sts	0x07BE, r1	; 0x8007be <time_count.3181+0x1>
    59a4:	10 92 bf 07 	sts	0x07BF, r1	; 0x8007bf <time_count.3181+0x2>
    59a8:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <time_count.3181+0x3>
		}
	}
	
	xTimerChangePeriod( xStartHeatPump_1,period, 100 );
    59ac:	0f 2e       	mov	r0, r31
    59ae:	f4 e6       	ldi	r31, 0x64	; 100
    59b0:	cf 2e       	mov	r12, r31
    59b2:	d1 2c       	mov	r13, r1
    59b4:	e1 2c       	mov	r14, r1
    59b6:	f1 2c       	mov	r15, r1
    59b8:	f0 2d       	mov	r31, r0
    59ba:	00 e0       	ldi	r16, 0x00	; 0
    59bc:	10 e0       	ldi	r17, 0x00	; 0
    59be:	a5 01       	movw	r20, r10
    59c0:	94 01       	movw	r18, r8
    59c2:	64 e0       	ldi	r22, 0x04	; 4
    59c4:	80 91 f4 0a 	lds	r24, 0x0AF4	; 0x800af4 <xStartHeatPump_1>
    59c8:	90 91 f5 0a 	lds	r25, 0x0AF5	; 0x800af5 <xStartHeatPump_1+0x1>
    59cc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	
}
    59d0:	1f 91       	pop	r17
    59d2:	0f 91       	pop	r16
    59d4:	ff 90       	pop	r15
    59d6:	ef 90       	pop	r14
    59d8:	df 90       	pop	r13
    59da:	cf 90       	pop	r12
    59dc:	bf 90       	pop	r11
    59de:	af 90       	pop	r10
    59e0:	9f 90       	pop	r9
    59e2:	8f 90       	pop	r8
    59e4:	08 95       	ret

000059e6 <HeatPump_Stop>:
		
	}
}
//-------------------------------------------------------------------------
void HeatPump_Stop(TimerHandle_t xTimer)
{
    59e6:	8f 92       	push	r8
    59e8:	9f 92       	push	r9
    59ea:	af 92       	push	r10
    59ec:	bf 92       	push	r11
    59ee:	cf 92       	push	r12
    59f0:	df 92       	push	r13
    59f2:	ef 92       	push	r14
    59f4:	ff 92       	push	r15
    59f6:	0f 93       	push	r16
    59f8:	1f 93       	push	r17
	
	TickType_t period;
	
	//xSerialxPrintf(&xSerial3Port,"StopHeatPump\r\n");
	
	pxTimerID = pvTimerGetTimerID(xTimer);
    59fa:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>

	if((*pxTimerID) == uxStopDelayHeatPTimer_1_ID)
    59fe:	fc 01       	movw	r30, r24
    5a00:	80 81       	ld	r24, Z
    5a02:	88 30       	cpi	r24, 0x08	; 8
    5a04:	09 f0       	breq	.+2      	; 0x5a08 <HeatPump_Stop+0x22>
    5a06:	76 c0       	rjmp	.+236    	; 0x5af4 <HeatPump_Stop+0x10e>
	{
		period=(TickType_t)EEpromData.Three_Way_delay;
    5a08:	20 91 7c 09 	lds	r18, 0x097C	; 0x80097c <EEpromData+0x4>
		period*=1000;
    5a0c:	30 e0       	ldi	r19, 0x00	; 0
    5a0e:	a8 ee       	ldi	r26, 0xE8	; 232
    5a10:	b3 e0       	ldi	r27, 0x03	; 3
    5a12:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    5a16:	4b 01       	movw	r8, r22
    5a18:	5c 01       	movw	r10, r24
		
		if(PIN_HEAT_PUMP_1 > 0)//
    5a1a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5a1e:	83 ff       	sbrs	r24, 3
    5a20:	56 c0       	rjmp	.+172    	; 0x5ace <HeatPump_Stop+0xe8>
		{
			STOP_HEAT_PUMP_1;
    5a22:	e2 e0       	ldi	r30, 0x02	; 2
    5a24:	f1 e0       	ldi	r31, 0x01	; 1
    5a26:	80 81       	ld	r24, Z
    5a28:	87 7f       	andi	r24, 0xF7	; 247
    5a2a:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopHeatPump_1\r\n");
    5a2c:	87 e0       	ldi	r24, 0x07	; 7
    5a2e:	94 e0       	ldi	r25, 0x04	; 4
    5a30:	9f 93       	push	r25
    5a32:	8f 93       	push	r24
    5a34:	86 e1       	ldi	r24, 0x16	; 22
    5a36:	98 e0       	ldi	r25, 0x08	; 8
    5a38:	9f 93       	push	r25
    5a3a:	8f 93       	push	r24
    5a3c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.heatPOn=0;
    5a40:	10 92 e4 09 	sts	0x09E4, r1	; 0x8009e4 <Comp_1+0xc>
			time_count_1+= difftime(time(&current_time), timeStartHeatP_1);
    5a44:	c0 90 ec 0a 	lds	r12, 0x0AEC	; 0x800aec <timeStartHeatP_1>
    5a48:	d0 90 ed 0a 	lds	r13, 0x0AED	; 0x800aed <timeStartHeatP_1+0x1>
    5a4c:	e0 90 ee 0a 	lds	r14, 0x0AEE	; 0x800aee <timeStartHeatP_1+0x2>
    5a50:	f0 90 ef 0a 	lds	r15, 0x0AEF	; 0x800aef <timeStartHeatP_1+0x3>
    5a54:	83 e7       	ldi	r24, 0x73	; 115
    5a56:	99 e0       	ldi	r25, 0x09	; 9
    5a58:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5a5c:	a7 01       	movw	r20, r14
    5a5e:	96 01       	movw	r18, r12
    5a60:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5a64:	c0 90 b1 07 	lds	r12, 0x07B1	; 0x8007b1 <time_count_1.3210>
    5a68:	d0 90 b2 07 	lds	r13, 0x07B2	; 0x8007b2 <time_count_1.3210+0x1>
    5a6c:	e0 90 b3 07 	lds	r14, 0x07B3	; 0x8007b3 <time_count_1.3210+0x2>
    5a70:	f0 90 b4 07 	lds	r15, 0x07B4	; 0x8007b4 <time_count_1.3210+0x3>
    5a74:	dc 01       	movw	r26, r24
    5a76:	cb 01       	movw	r24, r22
    5a78:	8c 0d       	add	r24, r12
    5a7a:	9d 1d       	adc	r25, r13
    5a7c:	ae 1d       	adc	r26, r14
    5a7e:	bf 1d       	adc	r27, r15
    5a80:	80 93 b1 07 	sts	0x07B1, r24	; 0x8007b1 <time_count_1.3210>
    5a84:	90 93 b2 07 	sts	0x07B2, r25	; 0x8007b2 <time_count_1.3210+0x1>
    5a88:	a0 93 b3 07 	sts	0x07B3, r26	; 0x8007b3 <time_count_1.3210+0x2>
    5a8c:	b0 93 b4 07 	sts	0x07B4, r27	; 0x8007b4 <time_count_1.3210+0x3>
			if(time_count_1>ONE_HOUR){EEpromData.time_pump_hiter_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    5a90:	0f 90       	pop	r0
    5a92:	0f 90       	pop	r0
    5a94:	0f 90       	pop	r0
    5a96:	0f 90       	pop	r0
    5a98:	81 31       	cpi	r24, 0x11	; 17
    5a9a:	9e 40       	sbci	r25, 0x0E	; 14
    5a9c:	a1 05       	cpc	r26, r1
    5a9e:	b1 05       	cpc	r27, r1
    5aa0:	b0 f0       	brcs	.+44     	; 0x5ace <HeatPump_Stop+0xe8>
    5aa2:	e8 e7       	ldi	r30, 0x78	; 120
    5aa4:	f9 e0       	ldi	r31, 0x09	; 9
    5aa6:	84 a9       	ldd	r24, Z+52	; 0x34
    5aa8:	95 a9       	ldd	r25, Z+53	; 0x35
    5aaa:	01 96       	adiw	r24, 0x01	; 1
    5aac:	95 ab       	std	Z+53, r25	; 0x35
    5aae:	84 ab       	std	Z+52, r24	; 0x34
    5ab0:	40 e6       	ldi	r20, 0x60	; 96
    5ab2:	50 e0       	ldi	r21, 0x00	; 0
    5ab4:	60 e0       	ldi	r22, 0x00	; 0
    5ab6:	70 e0       	ldi	r23, 0x00	; 0
    5ab8:	cf 01       	movw	r24, r30
    5aba:	0e 94 1c 5b 	call	0xb638	; 0xb638 <eeprom_update_block>
    5abe:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <time_count_1.3210>
    5ac2:	10 92 b2 07 	sts	0x07B2, r1	; 0x8007b2 <time_count_1.3210+0x1>
    5ac6:	10 92 b3 07 	sts	0x07B3, r1	; 0x8007b3 <time_count_1.3210+0x2>
    5aca:	10 92 b4 07 	sts	0x07B4, r1	; 0x8007b4 <time_count_1.3210+0x3>
			
		}
		xTimerChangePeriod( xStopThreeWay,period, 100 );
    5ace:	0f 2e       	mov	r0, r31
    5ad0:	f4 e6       	ldi	r31, 0x64	; 100
    5ad2:	cf 2e       	mov	r12, r31
    5ad4:	d1 2c       	mov	r13, r1
    5ad6:	e1 2c       	mov	r14, r1
    5ad8:	f1 2c       	mov	r15, r1
    5ada:	f0 2d       	mov	r31, r0
    5adc:	00 e0       	ldi	r16, 0x00	; 0
    5ade:	10 e0       	ldi	r17, 0x00	; 0
    5ae0:	a5 01       	movw	r20, r10
    5ae2:	94 01       	movw	r18, r8
    5ae4:	64 e0       	ldi	r22, 0x04	; 4
    5ae6:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <xStopThreeWay>
    5aea:	90 91 4f 0a 	lds	r25, 0x0A4F	; 0x800a4f <xStopThreeWay+0x1>
    5aee:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    5af2:	7b c0       	rjmp	.+246    	; 0x5bea <HeatPump_Stop+0x204>
		//xTimerStart(xStopThreeWay, 0);
	}

	else if((*pxTimerID) == uxStopDelayHeatPTimer_2_ID)
    5af4:	85 31       	cpi	r24, 0x15	; 21
    5af6:	09 f0       	breq	.+2      	; 0x5afa <HeatPump_Stop+0x114>
    5af8:	78 c0       	rjmp	.+240    	; 0x5bea <HeatPump_Stop+0x204>
	{
		period=(TickType_t)EEpromData.Revers_Valve_delay;
		period*=1000;
		xSerialxPrintf(&xSerial3Port,"StopHeatPump_2\r\n");
    5afa:	88 e1       	ldi	r24, 0x18	; 24
    5afc:	94 e0       	ldi	r25, 0x04	; 4
    5afe:	9f 93       	push	r25
    5b00:	8f 93       	push	r24
    5b02:	86 e1       	ldi	r24, 0x16	; 22
    5b04:	98 e0       	ldi	r25, 0x08	; 8
    5b06:	9f 93       	push	r25
    5b08:	8f 93       	push	r24
    5b0a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_2 > 0)//
    5b0e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5b12:	0f 90       	pop	r0
    5b14:	0f 90       	pop	r0
    5b16:	0f 90       	pop	r0
    5b18:	0f 90       	pop	r0
    5b1a:	84 ff       	sbrs	r24, 4
    5b1c:	49 c0       	rjmp	.+146    	; 0x5bb0 <HeatPump_Stop+0x1ca>
		{
			STOP_HEAT_PUMP_2;
    5b1e:	e2 e0       	ldi	r30, 0x02	; 2
    5b20:	f1 e0       	ldi	r31, 0x01	; 1
    5b22:	80 81       	ld	r24, Z
    5b24:	8f 7e       	andi	r24, 0xEF	; 239
    5b26:	80 83       	st	Z, r24
			
			
			Comp_2.heatPOn=0;
    5b28:	10 92 6e 0a 	sts	0x0A6E, r1	; 0x800a6e <Comp_2+0xc>
			time_count_2+= difftime(time(&current_time), timeStartHeatP_2);
    5b2c:	c0 90 00 0b 	lds	r12, 0x0B00	; 0x800b00 <timeStartHeatP_2>
    5b30:	d0 90 01 0b 	lds	r13, 0x0B01	; 0x800b01 <timeStartHeatP_2+0x1>
    5b34:	e0 90 02 0b 	lds	r14, 0x0B02	; 0x800b02 <timeStartHeatP_2+0x2>
    5b38:	f0 90 03 0b 	lds	r15, 0x0B03	; 0x800b03 <timeStartHeatP_2+0x3>
    5b3c:	83 e7       	ldi	r24, 0x73	; 115
    5b3e:	99 e0       	ldi	r25, 0x09	; 9
    5b40:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5b44:	a7 01       	movw	r20, r14
    5b46:	96 01       	movw	r18, r12
    5b48:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5b4c:	c0 90 ad 07 	lds	r12, 0x07AD	; 0x8007ad <time_count_2.3211>
    5b50:	d0 90 ae 07 	lds	r13, 0x07AE	; 0x8007ae <time_count_2.3211+0x1>
    5b54:	e0 90 af 07 	lds	r14, 0x07AF	; 0x8007af <time_count_2.3211+0x2>
    5b58:	f0 90 b0 07 	lds	r15, 0x07B0	; 0x8007b0 <time_count_2.3211+0x3>
    5b5c:	dc 01       	movw	r26, r24
    5b5e:	cb 01       	movw	r24, r22
    5b60:	8c 0d       	add	r24, r12
    5b62:	9d 1d       	adc	r25, r13
    5b64:	ae 1d       	adc	r26, r14
    5b66:	bf 1d       	adc	r27, r15
    5b68:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <time_count_2.3211>
    5b6c:	90 93 ae 07 	sts	0x07AE, r25	; 0x8007ae <time_count_2.3211+0x1>
    5b70:	a0 93 af 07 	sts	0x07AF, r26	; 0x8007af <time_count_2.3211+0x2>
    5b74:	b0 93 b0 07 	sts	0x07B0, r27	; 0x8007b0 <time_count_2.3211+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_pump_hiter_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    5b78:	81 31       	cpi	r24, 0x11	; 17
    5b7a:	9e 40       	sbci	r25, 0x0E	; 14
    5b7c:	a1 05       	cpc	r26, r1
    5b7e:	b1 05       	cpc	r27, r1
    5b80:	b8 f0       	brcs	.+46     	; 0x5bb0 <HeatPump_Stop+0x1ca>
    5b82:	e2 ec       	ldi	r30, 0xC2	; 194
    5b84:	f9 e0       	ldi	r31, 0x09	; 9
    5b86:	80 81       	ld	r24, Z
    5b88:	91 81       	ldd	r25, Z+1	; 0x01
    5b8a:	01 96       	adiw	r24, 0x01	; 1
    5b8c:	91 83       	std	Z+1, r25	; 0x01
    5b8e:	80 83       	st	Z, r24
    5b90:	40 e6       	ldi	r20, 0x60	; 96
    5b92:	50 e0       	ldi	r21, 0x00	; 0
    5b94:	60 e0       	ldi	r22, 0x00	; 0
    5b96:	70 e0       	ldi	r23, 0x00	; 0
    5b98:	88 e7       	ldi	r24, 0x78	; 120
    5b9a:	99 e0       	ldi	r25, 0x09	; 9
    5b9c:	0e 94 1c 5b 	call	0xb638	; 0xb638 <eeprom_update_block>
    5ba0:	10 92 ad 07 	sts	0x07AD, r1	; 0x8007ad <time_count_2.3211>
    5ba4:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <time_count_2.3211+0x1>
    5ba8:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <time_count_2.3211+0x2>
    5bac:	10 92 b0 07 	sts	0x07B0, r1	; 0x8007b0 <time_count_2.3211+0x3>
			
		}
		xTimerChangePeriod( xStopRevValve_2,(EEpromData.Revers_Valve_delay*1000) / portTICK_PERIOD_MS, 100 );
    5bb0:	40 91 7a 09 	lds	r20, 0x097A	; 0x80097a <EEpromData+0x2>
    5bb4:	88 ee       	ldi	r24, 0xE8	; 232
    5bb6:	93 e0       	ldi	r25, 0x03	; 3
    5bb8:	48 9f       	mul	r20, r24
    5bba:	90 01       	movw	r18, r0
    5bbc:	49 9f       	mul	r20, r25
    5bbe:	30 0d       	add	r19, r0
    5bc0:	11 24       	eor	r1, r1
    5bc2:	03 2e       	mov	r0, r19
    5bc4:	00 0c       	add	r0, r0
    5bc6:	44 0b       	sbc	r20, r20
    5bc8:	55 0b       	sbc	r21, r21
    5bca:	0f 2e       	mov	r0, r31
    5bcc:	f4 e6       	ldi	r31, 0x64	; 100
    5bce:	cf 2e       	mov	r12, r31
    5bd0:	d1 2c       	mov	r13, r1
    5bd2:	e1 2c       	mov	r14, r1
    5bd4:	f1 2c       	mov	r15, r1
    5bd6:	f0 2d       	mov	r31, r0
    5bd8:	00 e0       	ldi	r16, 0x00	; 0
    5bda:	10 e0       	ldi	r17, 0x00	; 0
    5bdc:	64 e0       	ldi	r22, 0x04	; 4
    5bde:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <xStopRevValve_2>
    5be2:	90 91 6e 09 	lds	r25, 0x096E	; 0x80096e <xStopRevValve_2+0x1>
    5be6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
}
    5bea:	1f 91       	pop	r17
    5bec:	0f 91       	pop	r16
    5bee:	ff 90       	pop	r15
    5bf0:	ef 90       	pop	r14
    5bf2:	df 90       	pop	r13
    5bf4:	cf 90       	pop	r12
    5bf6:	bf 90       	pop	r11
    5bf8:	af 90       	pop	r10
    5bfa:	9f 90       	pop	r9
    5bfc:	8f 90       	pop	r8
    5bfe:	08 95       	ret

00005c00 <ThreeWay_Stop>:
//-------------------------------------------------------------------------
void ThreeWay_Stop()
{
    5c00:	8f 92       	push	r8
    5c02:	9f 92       	push	r9
    5c04:	af 92       	push	r10
    5c06:	bf 92       	push	r11
    5c08:	cf 92       	push	r12
    5c0a:	df 92       	push	r13
    5c0c:	ef 92       	push	r14
    5c0e:	ff 92       	push	r15
    5c10:	0f 93       	push	r16
    5c12:	1f 93       	push	r17
	static time_t time_count;
	TickType_t period;
	period=(TickType_t)EEpromData.Revers_Valve_delay;
    5c14:	20 91 7a 09 	lds	r18, 0x097A	; 0x80097a <EEpromData+0x2>
	period*=1000;
    5c18:	30 e0       	ldi	r19, 0x00	; 0
    5c1a:	a8 ee       	ldi	r26, 0xE8	; 232
    5c1c:	b3 e0       	ldi	r27, 0x03	; 3
    5c1e:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    5c22:	4b 01       	movw	r8, r22
    5c24:	5c 01       	movw	r10, r24
	
	xSerialxPrintf(&xSerial3Port,"ThreeWay_Stop\r\n");
    5c26:	89 e2       	ldi	r24, 0x29	; 41
    5c28:	94 e0       	ldi	r25, 0x04	; 4
    5c2a:	9f 93       	push	r25
    5c2c:	8f 93       	push	r24
    5c2e:	86 e1       	ldi	r24, 0x16	; 22
    5c30:	98 e0       	ldi	r25, 0x08	; 8
    5c32:	9f 93       	push	r25
    5c34:	8f 93       	push	r24
    5c36:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(PIN_THWAY_VALVE > 0)
    5c3a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5c3e:	0f 90       	pop	r0
    5c40:	0f 90       	pop	r0
    5c42:	0f 90       	pop	r0
    5c44:	0f 90       	pop	r0
    5c46:	88 23       	and	r24, r24
    5c48:	0c f0       	brlt	.+2      	; 0x5c4c <ThreeWay_Stop+0x4c>
    5c4a:	48 c0       	rjmp	.+144    	; 0x5cdc <ThreeWay_Stop+0xdc>
	{
		STOP_THWAY_VALVE;
    5c4c:	e2 e0       	ldi	r30, 0x02	; 2
    5c4e:	f1 e0       	ldi	r31, 0x01	; 1
    5c50:	80 81       	ld	r24, Z
    5c52:	8f 77       	andi	r24, 0x7F	; 127
    5c54:	80 83       	st	Z, r24
		//xSerialxPrintf(&xSerial3Port,"ThreeWay_Stop\r\n");
		Comp_1.threeWOn=0;
    5c56:	10 92 e5 09 	sts	0x09E5, r1	; 0x8009e5 <Comp_1+0xd>
		time_count+= difftime(time(&current_time), timeStartThreeW);
    5c5a:	c0 90 04 0b 	lds	r12, 0x0B04	; 0x800b04 <timeStartThreeW>
    5c5e:	d0 90 05 0b 	lds	r13, 0x0B05	; 0x800b05 <timeStartThreeW+0x1>
    5c62:	e0 90 06 0b 	lds	r14, 0x0B06	; 0x800b06 <timeStartThreeW+0x2>
    5c66:	f0 90 07 0b 	lds	r15, 0x0B07	; 0x800b07 <timeStartThreeW+0x3>
    5c6a:	83 e7       	ldi	r24, 0x73	; 115
    5c6c:	99 e0       	ldi	r25, 0x09	; 9
    5c6e:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5c72:	a7 01       	movw	r20, r14
    5c74:	96 01       	movw	r18, r12
    5c76:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5c7a:	c0 90 a9 07 	lds	r12, 0x07A9	; 0x8007a9 <time_count.3216>
    5c7e:	d0 90 aa 07 	lds	r13, 0x07AA	; 0x8007aa <time_count.3216+0x1>
    5c82:	e0 90 ab 07 	lds	r14, 0x07AB	; 0x8007ab <time_count.3216+0x2>
    5c86:	f0 90 ac 07 	lds	r15, 0x07AC	; 0x8007ac <time_count.3216+0x3>
    5c8a:	dc 01       	movw	r26, r24
    5c8c:	cb 01       	movw	r24, r22
    5c8e:	8c 0d       	add	r24, r12
    5c90:	9d 1d       	adc	r25, r13
    5c92:	ae 1d       	adc	r26, r14
    5c94:	bf 1d       	adc	r27, r15
    5c96:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <time_count.3216>
    5c9a:	90 93 aa 07 	sts	0x07AA, r25	; 0x8007aa <time_count.3216+0x1>
    5c9e:	a0 93 ab 07 	sts	0x07AB, r26	; 0x8007ab <time_count.3216+0x2>
    5ca2:	b0 93 ac 07 	sts	0x07AC, r27	; 0x8007ac <time_count.3216+0x3>
		if(time_count>ONE_HOUR){EEpromData.time_threeway++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count=0;}
    5ca6:	81 31       	cpi	r24, 0x11	; 17
    5ca8:	9e 40       	sbci	r25, 0x0E	; 14
    5caa:	a1 05       	cpc	r26, r1
    5cac:	b1 05       	cpc	r27, r1
    5cae:	b0 f0       	brcs	.+44     	; 0x5cdc <ThreeWay_Stop+0xdc>
    5cb0:	e8 e7       	ldi	r30, 0x78	; 120
    5cb2:	f9 e0       	ldi	r31, 0x09	; 9
    5cb4:	84 ad       	ldd	r24, Z+60	; 0x3c
    5cb6:	95 ad       	ldd	r25, Z+61	; 0x3d
    5cb8:	01 96       	adiw	r24, 0x01	; 1
    5cba:	95 af       	std	Z+61, r25	; 0x3d
    5cbc:	84 af       	std	Z+60, r24	; 0x3c
    5cbe:	40 e6       	ldi	r20, 0x60	; 96
    5cc0:	50 e0       	ldi	r21, 0x00	; 0
    5cc2:	60 e0       	ldi	r22, 0x00	; 0
    5cc4:	70 e0       	ldi	r23, 0x00	; 0
    5cc6:	cf 01       	movw	r24, r30
    5cc8:	0e 94 1c 5b 	call	0xb638	; 0xb638 <eeprom_update_block>
    5ccc:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <time_count.3216>
    5cd0:	10 92 aa 07 	sts	0x07AA, r1	; 0x8007aa <time_count.3216+0x1>
    5cd4:	10 92 ab 07 	sts	0x07AB, r1	; 0x8007ab <time_count.3216+0x2>
    5cd8:	10 92 ac 07 	sts	0x07AC, r1	; 0x8007ac <time_count.3216+0x3>
		
	} else{ }//xSerialxPrintf(&xSerial3Port,"ThreeWay_isRun\r\n");
	xTimerChangePeriod( xStopRevValve_1,period, 100 );
    5cdc:	0f 2e       	mov	r0, r31
    5cde:	f4 e6       	ldi	r31, 0x64	; 100
    5ce0:	cf 2e       	mov	r12, r31
    5ce2:	d1 2c       	mov	r13, r1
    5ce4:	e1 2c       	mov	r14, r1
    5ce6:	f1 2c       	mov	r15, r1
    5ce8:	f0 2d       	mov	r31, r0
    5cea:	00 e0       	ldi	r16, 0x00	; 0
    5cec:	10 e0       	ldi	r17, 0x00	; 0
    5cee:	a5 01       	movw	r20, r10
    5cf0:	94 01       	movw	r18, r8
    5cf2:	64 e0       	ldi	r22, 0x04	; 4
    5cf4:	80 91 e8 0a 	lds	r24, 0x0AE8	; 0x800ae8 <xStopRevValve_1>
    5cf8:	90 91 e9 0a 	lds	r25, 0x0AE9	; 0x800ae9 <xStopRevValve_1+0x1>
    5cfc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	
}
    5d00:	1f 91       	pop	r17
    5d02:	0f 91       	pop	r16
    5d04:	ff 90       	pop	r15
    5d06:	ef 90       	pop	r14
    5d08:	df 90       	pop	r13
    5d0a:	cf 90       	pop	r12
    5d0c:	bf 90       	pop	r11
    5d0e:	af 90       	pop	r10
    5d10:	9f 90       	pop	r9
    5d12:	8f 90       	pop	r8
    5d14:	08 95       	ret

00005d16 <SorcePump_Stop>:
	
	
}
//---------------------------------------------------------------------------
void SorcePump_Stop(TimerHandle_t xTimer)
{
    5d16:	cf 92       	push	r12
    5d18:	df 92       	push	r13
    5d1a:	ef 92       	push	r14
    5d1c:	ff 92       	push	r15
	static time_t time_count_1;
	static time_t time_count_2;
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5d1e:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
     // xSerialxPrintf(&xSerial3Port,"StopSource\r\n");
    
	 	
	 
	if((*pxTimerID) == uxStopDelaySourcePTimer_1_ID)
    5d22:	fc 01       	movw	r30, r24
    5d24:	80 81       	ld	r24, Z
    5d26:	89 30       	cpi	r24, 0x09	; 9
    5d28:	09 f0       	breq	.+2      	; 0x5d2c <SorcePump_Stop+0x16>
    5d2a:	5e c0       	rjmp	.+188    	; 0x5de8 <SorcePump_Stop+0xd2>
	{
		Comp_1.switchToMode=false ;
    5d2c:	10 92 d8 09 	sts	0x09D8, r1	; 0x8009d8 <Comp_1>
		
		
		if(PIN_SOURCE_PUMP_1 > 0)//
    5d30:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5d34:	81 ff       	sbrs	r24, 1
    5d36:	b8 c0       	rjmp	.+368    	; 0x5ea8 <SorcePump_Stop+0x192>
		{
			STOP_SOURCE_PUMP_1;
    5d38:	e2 e0       	ldi	r30, 0x02	; 2
    5d3a:	f1 e0       	ldi	r31, 0x01	; 1
    5d3c:	80 81       	ld	r24, Z
    5d3e:	8d 7f       	andi	r24, 0xFD	; 253
    5d40:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopSource_1\r\n");
    5d42:	89 e3       	ldi	r24, 0x39	; 57
    5d44:	94 e0       	ldi	r25, 0x04	; 4
    5d46:	9f 93       	push	r25
    5d48:	8f 93       	push	r24
    5d4a:	86 e1       	ldi	r24, 0x16	; 22
    5d4c:	98 e0       	ldi	r25, 0x08	; 8
    5d4e:	9f 93       	push	r25
    5d50:	8f 93       	push	r24
    5d52:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.srcPOn=0;
    5d56:	10 92 e7 09 	sts	0x09E7, r1	; 0x8009e7 <Comp_1+0xf>
			
			
			time_count_1+= difftime(time(&current_time), timeStartSrcP_1);
    5d5a:	c0 90 54 0a 	lds	r12, 0x0A54	; 0x800a54 <timeStartSrcP_1>
    5d5e:	d0 90 55 0a 	lds	r13, 0x0A55	; 0x800a55 <timeStartSrcP_1+0x1>
    5d62:	e0 90 56 0a 	lds	r14, 0x0A56	; 0x800a56 <timeStartSrcP_1+0x2>
    5d66:	f0 90 57 0a 	lds	r15, 0x0A57	; 0x800a57 <timeStartSrcP_1+0x3>
    5d6a:	83 e7       	ldi	r24, 0x73	; 115
    5d6c:	99 e0       	ldi	r25, 0x09	; 9
    5d6e:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5d72:	a7 01       	movw	r20, r14
    5d74:	96 01       	movw	r18, r12
    5d76:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5d7a:	c0 90 a5 07 	lds	r12, 0x07A5	; 0x8007a5 <time_count_1.3228>
    5d7e:	d0 90 a6 07 	lds	r13, 0x07A6	; 0x8007a6 <time_count_1.3228+0x1>
    5d82:	e0 90 a7 07 	lds	r14, 0x07A7	; 0x8007a7 <time_count_1.3228+0x2>
    5d86:	f0 90 a8 07 	lds	r15, 0x07A8	; 0x8007a8 <time_count_1.3228+0x3>
    5d8a:	dc 01       	movw	r26, r24
    5d8c:	cb 01       	movw	r24, r22
    5d8e:	8c 0d       	add	r24, r12
    5d90:	9d 1d       	adc	r25, r13
    5d92:	ae 1d       	adc	r26, r14
    5d94:	bf 1d       	adc	r27, r15
    5d96:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <time_count_1.3228>
    5d9a:	90 93 a6 07 	sts	0x07A6, r25	; 0x8007a6 <time_count_1.3228+0x1>
    5d9e:	a0 93 a7 07 	sts	0x07A7, r26	; 0x8007a7 <time_count_1.3228+0x2>
    5da2:	b0 93 a8 07 	sts	0x07A8, r27	; 0x8007a8 <time_count_1.3228+0x3>
			//xSerialxPrintf(&xSerial3Port,"time_count_1=%d\r\n",time_count_1);
			if(time_count_1>ONE_HOUR){EEpromData.time_pump_source_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    5da6:	0f 90       	pop	r0
    5da8:	0f 90       	pop	r0
    5daa:	0f 90       	pop	r0
    5dac:	0f 90       	pop	r0
    5dae:	81 31       	cpi	r24, 0x11	; 17
    5db0:	9e 40       	sbci	r25, 0x0E	; 14
    5db2:	a1 05       	cpc	r26, r1
    5db4:	b1 05       	cpc	r27, r1
    5db6:	08 f4       	brcc	.+2      	; 0x5dba <SorcePump_Stop+0xa4>
    5db8:	77 c0       	rjmp	.+238    	; 0x5ea8 <SorcePump_Stop+0x192>
    5dba:	e8 e7       	ldi	r30, 0x78	; 120
    5dbc:	f9 e0       	ldi	r31, 0x09	; 9
    5dbe:	86 a9       	ldd	r24, Z+54	; 0x36
    5dc0:	97 a9       	ldd	r25, Z+55	; 0x37
    5dc2:	01 96       	adiw	r24, 0x01	; 1
    5dc4:	97 ab       	std	Z+55, r25	; 0x37
    5dc6:	86 ab       	std	Z+54, r24	; 0x36
    5dc8:	40 e6       	ldi	r20, 0x60	; 96
    5dca:	50 e0       	ldi	r21, 0x00	; 0
    5dcc:	60 e0       	ldi	r22, 0x00	; 0
    5dce:	70 e0       	ldi	r23, 0x00	; 0
    5dd0:	cf 01       	movw	r24, r30
    5dd2:	0e 94 1c 5b 	call	0xb638	; 0xb638 <eeprom_update_block>
    5dd6:	10 92 a5 07 	sts	0x07A5, r1	; 0x8007a5 <time_count_1.3228>
    5dda:	10 92 a6 07 	sts	0x07A6, r1	; 0x8007a6 <time_count_1.3228+0x1>
    5dde:	10 92 a7 07 	sts	0x07A7, r1	; 0x8007a7 <time_count_1.3228+0x2>
    5de2:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <time_count_1.3228+0x3>
    5de6:	60 c0       	rjmp	.+192    	; 0x5ea8 <SorcePump_Stop+0x192>

		}
		
	}
	
	else if((*pxTimerID) == uxStopDelaySourcePTimer_2_ID)
    5de8:	86 31       	cpi	r24, 0x16	; 22
    5dea:	09 f0       	breq	.+2      	; 0x5dee <SorcePump_Stop+0xd8>
    5dec:	5d c0       	rjmp	.+186    	; 0x5ea8 <SorcePump_Stop+0x192>
	{
		//xSerialxPrintf(&xSerial3Port,"StopSource_2\r\n");
		Comp_2.switchToMode=false ;
    5dee:	10 92 62 0a 	sts	0x0A62, r1	; 0x800a62 <Comp_2>
		if(PIN_SOURCE_PUMP_2 > 0)//
    5df2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5df6:	82 ff       	sbrs	r24, 2
    5df8:	57 c0       	rjmp	.+174    	; 0x5ea8 <SorcePump_Stop+0x192>
		{
			STOP_SOURCE_PUMP_2;
    5dfa:	e2 e0       	ldi	r30, 0x02	; 2
    5dfc:	f1 e0       	ldi	r31, 0x01	; 1
    5dfe:	80 81       	ld	r24, Z
    5e00:	8b 7f       	andi	r24, 0xFB	; 251
    5e02:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopSource_2\r\n");
    5e04:	88 e4       	ldi	r24, 0x48	; 72
    5e06:	94 e0       	ldi	r25, 0x04	; 4
    5e08:	9f 93       	push	r25
    5e0a:	8f 93       	push	r24
    5e0c:	86 e1       	ldi	r24, 0x16	; 22
    5e0e:	98 e0       	ldi	r25, 0x08	; 8
    5e10:	9f 93       	push	r25
    5e12:	8f 93       	push	r24
    5e14:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			Comp_2.srcPOn=0;
    5e18:	10 92 71 0a 	sts	0x0A71, r1	; 0x800a71 <Comp_2+0xf>
			//Comp_2.switchToMode=false;
			time_count_2+= difftime(time(&current_time), timeStartSrcP_2);
    5e1c:	c0 90 13 0b 	lds	r12, 0x0B13	; 0x800b13 <timeStartSrcP_2>
    5e20:	d0 90 14 0b 	lds	r13, 0x0B14	; 0x800b14 <timeStartSrcP_2+0x1>
    5e24:	e0 90 15 0b 	lds	r14, 0x0B15	; 0x800b15 <timeStartSrcP_2+0x2>
    5e28:	f0 90 16 0b 	lds	r15, 0x0B16	; 0x800b16 <timeStartSrcP_2+0x3>
    5e2c:	83 e7       	ldi	r24, 0x73	; 115
    5e2e:	99 e0       	ldi	r25, 0x09	; 9
    5e30:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5e34:	a7 01       	movw	r20, r14
    5e36:	96 01       	movw	r18, r12
    5e38:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5e3c:	c0 90 a1 07 	lds	r12, 0x07A1	; 0x8007a1 <time_count_2.3229>
    5e40:	d0 90 a2 07 	lds	r13, 0x07A2	; 0x8007a2 <time_count_2.3229+0x1>
    5e44:	e0 90 a3 07 	lds	r14, 0x07A3	; 0x8007a3 <time_count_2.3229+0x2>
    5e48:	f0 90 a4 07 	lds	r15, 0x07A4	; 0x8007a4 <time_count_2.3229+0x3>
    5e4c:	dc 01       	movw	r26, r24
    5e4e:	cb 01       	movw	r24, r22
    5e50:	8c 0d       	add	r24, r12
    5e52:	9d 1d       	adc	r25, r13
    5e54:	ae 1d       	adc	r26, r14
    5e56:	bf 1d       	adc	r27, r15
    5e58:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <time_count_2.3229>
    5e5c:	90 93 a2 07 	sts	0x07A2, r25	; 0x8007a2 <time_count_2.3229+0x1>
    5e60:	a0 93 a3 07 	sts	0x07A3, r26	; 0x8007a3 <time_count_2.3229+0x2>
    5e64:	b0 93 a4 07 	sts	0x07A4, r27	; 0x8007a4 <time_count_2.3229+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_pump_source_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    5e68:	0f 90       	pop	r0
    5e6a:	0f 90       	pop	r0
    5e6c:	0f 90       	pop	r0
    5e6e:	0f 90       	pop	r0
    5e70:	81 31       	cpi	r24, 0x11	; 17
    5e72:	9e 40       	sbci	r25, 0x0E	; 14
    5e74:	a1 05       	cpc	r26, r1
    5e76:	b1 05       	cpc	r27, r1
    5e78:	b8 f0       	brcs	.+46     	; 0x5ea8 <SorcePump_Stop+0x192>
    5e7a:	e4 ec       	ldi	r30, 0xC4	; 196
    5e7c:	f9 e0       	ldi	r31, 0x09	; 9
    5e7e:	80 81       	ld	r24, Z
    5e80:	91 81       	ldd	r25, Z+1	; 0x01
    5e82:	01 96       	adiw	r24, 0x01	; 1
    5e84:	91 83       	std	Z+1, r25	; 0x01
    5e86:	80 83       	st	Z, r24
    5e88:	40 e6       	ldi	r20, 0x60	; 96
    5e8a:	50 e0       	ldi	r21, 0x00	; 0
    5e8c:	60 e0       	ldi	r22, 0x00	; 0
    5e8e:	70 e0       	ldi	r23, 0x00	; 0
    5e90:	88 e7       	ldi	r24, 0x78	; 120
    5e92:	99 e0       	ldi	r25, 0x09	; 9
    5e94:	0e 94 1c 5b 	call	0xb638	; 0xb638 <eeprom_update_block>
    5e98:	10 92 a1 07 	sts	0x07A1, r1	; 0x8007a1 <time_count_2.3229>
    5e9c:	10 92 a2 07 	sts	0x07A2, r1	; 0x8007a2 <time_count_2.3229+0x1>
    5ea0:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <time_count_2.3229+0x2>
    5ea4:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <time_count_2.3229+0x3>

		}
	}
}
    5ea8:	ff 90       	pop	r15
    5eaa:	ef 90       	pop	r14
    5eac:	df 90       	pop	r13
    5eae:	cf 90       	pop	r12
    5eb0:	08 95       	ret

00005eb2 <StartComp>:
		
	}
}


void StartComp(TimerHandle_t xTimer){
    5eb2:	8f 92       	push	r8
    5eb4:	9f 92       	push	r9
    5eb6:	af 92       	push	r10
    5eb8:	bf 92       	push	r11
    5eba:	cf 92       	push	r12
    5ebc:	df 92       	push	r13
    5ebe:	ef 92       	push	r14
    5ec0:	ff 92       	push	r15
    5ec2:	0f 93       	push	r16
    5ec4:	1f 93       	push	r17
    5ec6:	ac 01       	movw	r20, r24
	
	portBASE_TYPE *pxTimerID;
	
	TickType_t period;	
	period=(TickType_t)EEpromData.TRV_Delay;
    5ec8:	20 91 7d 09 	lds	r18, 0x097D	; 0x80097d <EEpromData+0x5>
    period*=1000;
    5ecc:	30 e0       	ldi	r19, 0x00	; 0
    5ece:	a8 ee       	ldi	r26, 0xE8	; 232
    5ed0:	b3 e0       	ldi	r27, 0x03	; 3
    5ed2:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    5ed6:	4b 01       	movw	r8, r22
    5ed8:	5c 01       	movw	r10, r24
	
	pxTimerID = pvTimerGetTimerID(xTimer);
    5eda:	ca 01       	movw	r24, r20
    5edc:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
//xSerialxPrintf(&xSerial3Port,"StartCompressor\r\n");
	if((*pxTimerID) == uxStartDelayCompTimer_1_ID) {
    5ee0:	fc 01       	movw	r30, r24
    5ee2:	80 81       	ld	r24, Z
    5ee4:	81 30       	cpi	r24, 0x01	; 1
    5ee6:	09 f0       	breq	.+2      	; 0x5eea <StartComp+0x38>
    5ee8:	61 c0       	rjmp	.+194    	; 0x5fac <StartComp+0xfa>
		Comp_1.switchToMode=false;
    5eea:	e8 ed       	ldi	r30, 0xD8	; 216
    5eec:	f9 e0       	ldi	r31, 0x09	; 9
    5eee:	10 82       	st	Z, r1
		 if(Comp_1.def) {timeTillDef=xTaskGetTickCount();Comp_1.stopdef=true;}
    5ef0:	81 85       	ldd	r24, Z+9	; 0x09
    5ef2:	88 23       	and	r24, r24
    5ef4:	69 f0       	breq	.+26     	; 0x5f10 <StartComp+0x5e>
    5ef6:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    5efa:	60 93 59 09 	sts	0x0959, r22	; 0x800959 <timeTillDef>
    5efe:	70 93 5a 09 	sts	0x095A, r23	; 0x80095a <timeTillDef+0x1>
    5f02:	80 93 5b 09 	sts	0x095B, r24	; 0x80095b <timeTillDef+0x2>
    5f06:	90 93 5c 09 	sts	0x095C, r25	; 0x80095c <timeTillDef+0x3>
    5f0a:	81 e0       	ldi	r24, 0x01	; 1
    5f0c:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <Comp_1+0xa>
		if(PIN_COMPRESSOR_1 == 0)
    5f10:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5f14:	85 fd       	sbrc	r24, 5
    5f16:	9c c0       	rjmp	.+312    	; 0x6050 <StartComp+0x19e>
		{   
			
			Comp_1.compOn=1;
    5f18:	81 e0       	ldi	r24, 0x01	; 1
    5f1a:	80 93 e3 09 	sts	0x09E3, r24	; 0x8009e3 <Comp_1+0xb>
			//if(Comp_2.compOn)vTaskDelay(5000);
			START_COMPRESSOR_1;
    5f1e:	e2 e0       	ldi	r30, 0x02	; 2
    5f20:	f1 e0       	ldi	r31, 0x01	; 1
    5f22:	80 81       	ld	r24, Z
    5f24:	80 62       	ori	r24, 0x20	; 32
    5f26:	80 83       	st	Z, r24
			
			xSerialxPrintf(&xSerial3Port,"StartCompressor_1\r\n");
    5f28:	87 e5       	ldi	r24, 0x57	; 87
    5f2a:	94 e0       	ldi	r25, 0x04	; 4
    5f2c:	9f 93       	push	r25
    5f2e:	8f 93       	push	r24
    5f30:	86 e1       	ldi	r24, 0x16	; 22
    5f32:	98 e0       	ldi	r25, 0x08	; 8
    5f34:	9f 93       	push	r25
    5f36:	8f 93       	push	r24
    5f38:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			
			timeStartComp_1=time(&current_time);
    5f3c:	83 e7       	ldi	r24, 0x73	; 115
    5f3e:	99 e0       	ldi	r25, 0x09	; 9
    5f40:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5f44:	60 93 67 09 	sts	0x0967, r22	; 0x800967 <timeStartComp_1>
    5f48:	70 93 68 09 	sts	0x0968, r23	; 0x800968 <timeStartComp_1+0x1>
    5f4c:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <timeStartComp_1+0x2>
    5f50:	90 93 6a 09 	sts	0x096A, r25	; 0x80096a <timeStartComp_1+0x3>
			EEpromData.number_turnon_compressor_1+=1;
    5f54:	e8 e7       	ldi	r30, 0x78	; 120
    5f56:	f9 e0       	ldi	r31, 0x09	; 9
    5f58:	86 ad       	ldd	r24, Z+62	; 0x3e
    5f5a:	97 ad       	ldd	r25, Z+63	; 0x3f
    5f5c:	01 96       	adiw	r24, 0x01	; 1
    5f5e:	97 af       	std	Z+63, r25	; 0x3f
    5f60:	86 af       	std	Z+62, r24	; 0x3e
			//xSerialxPrintf(&xSerial3Port,"Number_turnon_Compressor_=%d\r\n",EEpromData.number_turnon_compressor_1);
			xTimerChangePeriod( xTStartCheckTrv_1,period, 100 );
    5f62:	0f 2e       	mov	r0, r31
    5f64:	f4 e6       	ldi	r31, 0x64	; 100
    5f66:	cf 2e       	mov	r12, r31
    5f68:	d1 2c       	mov	r13, r1
    5f6a:	e1 2c       	mov	r14, r1
    5f6c:	f1 2c       	mov	r15, r1
    5f6e:	f0 2d       	mov	r31, r0
    5f70:	00 e0       	ldi	r16, 0x00	; 0
    5f72:	10 e0       	ldi	r17, 0x00	; 0
    5f74:	a5 01       	movw	r20, r10
    5f76:	94 01       	movw	r18, r8
    5f78:	64 e0       	ldi	r22, 0x04	; 4
    5f7a:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <xTStartCheckTrv_1>
    5f7e:	90 91 72 09 	lds	r25, 0x0972	; 0x800972 <xTStartCheckTrv_1+0x1>
    5f82:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
			xTimerStart(xTStartCheckErrors_1, 0);
    5f86:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    5f8a:	9b 01       	movw	r18, r22
    5f8c:	ac 01       	movw	r20, r24
    5f8e:	c1 2c       	mov	r12, r1
    5f90:	d1 2c       	mov	r13, r1
    5f92:	76 01       	movw	r14, r12
    5f94:	61 e0       	ldi	r22, 0x01	; 1
    5f96:	80 91 17 0b 	lds	r24, 0x0B17	; 0x800b17 <xTStartCheckErrors_1>
    5f9a:	90 91 18 0b 	lds	r25, 0x0B18	; 0x800b18 <xTStartCheckErrors_1+0x1>
    5f9e:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    5fa2:	0f 90       	pop	r0
    5fa4:	0f 90       	pop	r0
    5fa6:	0f 90       	pop	r0
    5fa8:	0f 90       	pop	r0
    5faa:	52 c0       	rjmp	.+164    	; 0x6050 <StartComp+0x19e>
	
		}
	}
	else if((*pxTimerID) == uxStartDelayCompTimer_2_ID) {
    5fac:	8e 30       	cpi	r24, 0x0E	; 14
    5fae:	09 f0       	breq	.+2      	; 0x5fb2 <StartComp+0x100>
    5fb0:	4f c0       	rjmp	.+158    	; 0x6050 <StartComp+0x19e>
		xSerialxPrintf(&xSerial3Port,"StartCompressor_2\r\n");
    5fb2:	8b e6       	ldi	r24, 0x6B	; 107
    5fb4:	94 e0       	ldi	r25, 0x04	; 4
    5fb6:	9f 93       	push	r25
    5fb8:	8f 93       	push	r24
    5fba:	86 e1       	ldi	r24, 0x16	; 22
    5fbc:	98 e0       	ldi	r25, 0x08	; 8
    5fbe:	9f 93       	push	r25
    5fc0:	8f 93       	push	r24
    5fc2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_COMPRESSOR_2 == 0)
    5fc6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5fca:	0f 90       	pop	r0
    5fcc:	0f 90       	pop	r0
    5fce:	0f 90       	pop	r0
    5fd0:	0f 90       	pop	r0
    5fd2:	86 fd       	sbrc	r24, 6
    5fd4:	3d c0       	rjmp	.+122    	; 0x6050 <StartComp+0x19e>
		{
			//if(Comp_1.compOn)vTaskDelay(5000);
			Comp_2.compOn=1;
    5fd6:	e2 e6       	ldi	r30, 0x62	; 98
    5fd8:	fa e0       	ldi	r31, 0x0A	; 10
    5fda:	81 e0       	ldi	r24, 0x01	; 1
    5fdc:	83 87       	std	Z+11, r24	; 0x0b
			START_COMPRESSOR_2;
    5fde:	a2 e0       	ldi	r26, 0x02	; 2
    5fe0:	b1 e0       	ldi	r27, 0x01	; 1
    5fe2:	8c 91       	ld	r24, X
    5fe4:	80 64       	ori	r24, 0x40	; 64
    5fe6:	8c 93       	st	X, r24
			
			
			Comp_2.switchToMode=false;
    5fe8:	10 82       	st	Z, r1
			
			timeStartComp_2=time(&current_time);
    5fea:	83 e7       	ldi	r24, 0x73	; 115
    5fec:	99 e0       	ldi	r25, 0x09	; 9
    5fee:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5ff2:	60 93 19 0b 	sts	0x0B19, r22	; 0x800b19 <timeStartComp_2>
    5ff6:	70 93 1a 0b 	sts	0x0B1A, r23	; 0x800b1a <timeStartComp_2+0x1>
    5ffa:	80 93 1b 0b 	sts	0x0B1B, r24	; 0x800b1b <timeStartComp_2+0x2>
    5ffe:	90 93 1c 0b 	sts	0x0B1C, r25	; 0x800b1c <timeStartComp_2+0x3>
			EEpromData.number_turnon_compressor_2+=1;
    6002:	ea ec       	ldi	r30, 0xCA	; 202
    6004:	f9 e0       	ldi	r31, 0x09	; 9
    6006:	80 81       	ld	r24, Z
    6008:	91 81       	ldd	r25, Z+1	; 0x01
    600a:	01 96       	adiw	r24, 0x01	; 1
    600c:	91 83       	std	Z+1, r25	; 0x01
    600e:	80 83       	st	Z, r24
			xTimerChangePeriod( xTStartCheckTrv_2,period, 100 );
    6010:	0f 2e       	mov	r0, r31
    6012:	f4 e6       	ldi	r31, 0x64	; 100
    6014:	cf 2e       	mov	r12, r31
    6016:	d1 2c       	mov	r13, r1
    6018:	e1 2c       	mov	r14, r1
    601a:	f1 2c       	mov	r15, r1
    601c:	f0 2d       	mov	r31, r0
    601e:	00 e0       	ldi	r16, 0x00	; 0
    6020:	10 e0       	ldi	r17, 0x00	; 0
    6022:	a5 01       	movw	r20, r10
    6024:	94 01       	movw	r18, r8
    6026:	64 e0       	ldi	r22, 0x04	; 4
    6028:	80 91 4c 0a 	lds	r24, 0x0A4C	; 0x800a4c <xTStartCheckTrv_2>
    602c:	90 91 4d 0a 	lds	r25, 0x0A4D	; 0x800a4d <xTStartCheckTrv_2+0x1>
    6030:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
			xTimerStart(xTStartCheckErrors_2, 0);
    6034:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    6038:	9b 01       	movw	r18, r22
    603a:	ac 01       	movw	r20, r24
    603c:	c1 2c       	mov	r12, r1
    603e:	d1 2c       	mov	r13, r1
    6040:	76 01       	movw	r14, r12
    6042:	61 e0       	ldi	r22, 0x01	; 1
    6044:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <xTStartCheckErrors_2>
    6048:	90 91 60 09 	lds	r25, 0x0960	; 0x800960 <xTStartCheckErrors_2+0x1>
    604c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		}
	}
	
	
}
    6050:	1f 91       	pop	r17
    6052:	0f 91       	pop	r16
    6054:	ff 90       	pop	r15
    6056:	ef 90       	pop	r14
    6058:	df 90       	pop	r13
    605a:	cf 90       	pop	r12
    605c:	bf 90       	pop	r11
    605e:	af 90       	pop	r10
    6060:	9f 90       	pop	r9
    6062:	8f 90       	pop	r8
    6064:	08 95       	ret

00006066 <SwitchRev_1_Time>:
	
	
}
//-------------------------------------------------------------------------
void SwitchRev_1_Time(TimerHandle_t xTimer)
{
    6066:	cf 92       	push	r12
    6068:	df 92       	push	r13
    606a:	ef 92       	push	r14
    606c:	ff 92       	push	r15
    606e:	0f 93       	push	r16
    6070:	1f 93       	push	r17
    6072:	cf 93       	push	r28
    6074:	df 93       	push	r29
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    6076:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    607a:	ec 01       	movw	r28, r24
	
	//xSerialxPrintf(&xSerial3Port,"SwitchRev_1\r\n");
	
	if((*pxTimerID) == uxSwitchRevOne_1_ID)
    607c:	88 81       	ld	r24, Y
    607e:	8c 30       	cpi	r24, 0x0C	; 12
    6080:	19 f5       	brne	.+70     	; 0x60c8 <SwitchRev_1_Time+0x62>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_ON_1_1\r\n");
    6082:	8f e7       	ldi	r24, 0x7F	; 127
    6084:	94 e0       	ldi	r25, 0x04	; 4
    6086:	9f 93       	push	r25
    6088:	8f 93       	push	r24
    608a:	86 e1       	ldi	r24, 0x16	; 22
    608c:	98 e0       	ldi	r25, 0x08	; 8
    608e:	9f 93       	push	r25
    6090:	8f 93       	push	r24
    6092:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_REV_VALVE_1 == 0){START_REV_VALVE_1;}//
    6096:	0f 90       	pop	r0
    6098:	0f 90       	pop	r0
    609a:	0f 90       	pop	r0
    609c:	0f 90       	pop	r0
    609e:	94 99       	sbic	0x12, 4	; 18
    60a0:	02 c0       	rjmp	.+4      	; 0x60a6 <SwitchRev_1_Time+0x40>
    60a2:	a4 9a       	sbi	0x14, 4	; 20
    60a4:	01 c0       	rjmp	.+2      	; 0x60a8 <SwitchRev_1_Time+0x42>
		else {STOP_REV_VALVE_1;}//xSerialxPrintf(&xSerial3Port,"SwitchRev_OFF_1\r\n");
    60a6:	a4 98       	cbi	0x14, 4	; 20
		xTimerStart(xSwitchRevTwo_1_time, 0);
    60a8:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    60ac:	9b 01       	movw	r18, r22
    60ae:	ac 01       	movw	r20, r24
    60b0:	c1 2c       	mov	r12, r1
    60b2:	d1 2c       	mov	r13, r1
    60b4:	76 01       	movw	r14, r12
    60b6:	00 e0       	ldi	r16, 0x00	; 0
    60b8:	10 e0       	ldi	r17, 0x00	; 0
    60ba:	61 e0       	ldi	r22, 0x01	; 1
    60bc:	80 91 f2 0a 	lds	r24, 0x0AF2	; 0x800af2 <xSwitchRevTwo_1_time>
    60c0:	90 91 f3 0a 	lds	r25, 0x0AF3	; 0x800af3 <xSwitchRevTwo_1_time+0x1>
    60c4:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if((*pxTimerID) == uxSwitchRevOne_2_ID)
    60c8:	88 81       	ld	r24, Y
    60ca:	88 31       	cpi	r24, 0x18	; 24
    60cc:	19 f5       	brne	.+70     	; 0x6114 <SwitchRev_1_Time+0xae>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_2_1\r\n");
    60ce:	82 e9       	ldi	r24, 0x92	; 146
    60d0:	94 e0       	ldi	r25, 0x04	; 4
    60d2:	9f 93       	push	r25
    60d4:	8f 93       	push	r24
    60d6:	86 e1       	ldi	r24, 0x16	; 22
    60d8:	98 e0       	ldi	r25, 0x08	; 8
    60da:	9f 93       	push	r25
    60dc:	8f 93       	push	r24
    60de:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		
		if(PIN_REV_VALVE_2 == 0)START_REV_VALVE_2;
    60e2:	0f 90       	pop	r0
    60e4:	0f 90       	pop	r0
    60e6:	0f 90       	pop	r0
    60e8:	0f 90       	pop	r0
    60ea:	93 99       	sbic	0x12, 3	; 18
    60ec:	02 c0       	rjmp	.+4      	; 0x60f2 <SwitchRev_1_Time+0x8c>
    60ee:	a3 9a       	sbi	0x14, 3	; 20
    60f0:	01 c0       	rjmp	.+2      	; 0x60f4 <SwitchRev_1_Time+0x8e>
		else STOP_REV_VALVE_2;
    60f2:	a3 98       	cbi	0x14, 3	; 20
		xTimerStart(xSwitchRevTwo_2_time, 0);
    60f4:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    60f8:	9b 01       	movw	r18, r22
    60fa:	ac 01       	movw	r20, r24
    60fc:	c1 2c       	mov	r12, r1
    60fe:	d1 2c       	mov	r13, r1
    6100:	76 01       	movw	r14, r12
    6102:	00 e0       	ldi	r16, 0x00	; 0
    6104:	10 e0       	ldi	r17, 0x00	; 0
    6106:	61 e0       	ldi	r22, 0x01	; 1
    6108:	80 91 0d 0b 	lds	r24, 0x0B0D	; 0x800b0d <xSwitchRevTwo_2_time>
    610c:	90 91 0e 0b 	lds	r25, 0x0B0E	; 0x800b0e <xSwitchRevTwo_2_time+0x1>
    6110:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
}
    6114:	df 91       	pop	r29
    6116:	cf 91       	pop	r28
    6118:	1f 91       	pop	r17
    611a:	0f 91       	pop	r16
    611c:	ff 90       	pop	r15
    611e:	ef 90       	pop	r14
    6120:	df 90       	pop	r13
    6122:	cf 90       	pop	r12
    6124:	08 95       	ret

00006126 <activateTimers>:
const portBASE_TYPE uxStopDelayRevVTimer_2_ID		= 23;
const portBASE_TYPE uxSwitchRevOne_2_ID				= 24;
const portBASE_TYPE uxSwitchRevTwo_2_ID				= 25;

void activateTimers(xCompressor *comp)
{
    6126:	ef 92       	push	r14
    6128:	ff 92       	push	r15
    612a:	0f 93       	push	r16
    612c:	1f 93       	push	r17
    612e:	cf 93       	push	r28
    6130:	df 93       	push	r29
    6132:	ec 01       	movw	r28, r24
	
	
	if(comp->Index==1)
    6134:	fc 01       	movw	r30, r24
    6136:	ee 58       	subi	r30, 0x8E	; 142
    6138:	ff 4f       	sbci	r31, 0xFF	; 255
    613a:	80 81       	ld	r24, Z
    613c:	91 81       	ldd	r25, Z+1	; 0x01
    613e:	01 97       	sbiw	r24, 0x01	; 1
    6140:	09 f0       	breq	.+2      	; 0x6144 <activateTimers+0x1e>
    6142:	fc c0       	rjmp	.+504    	; 0x633c <activateTimers+0x216>
	{
		
		xStartRevValve_1   =	xTimerCreate("StRevV_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayRevVTimer_1_ID, StartReversingValve);//(EEpromData.Revers_Valve_delay*1000) 
    6144:	0f 2e       	mov	r0, r31
    6146:	f2 e4       	ldi	r31, 0x42	; 66
    6148:	ef 2e       	mov	r14, r31
    614a:	f9 e2       	ldi	r31, 0x29	; 41
    614c:	ff 2e       	mov	r15, r31
    614e:	f0 2d       	mov	r31, r0
    6150:	07 e8       	ldi	r16, 0x87	; 135
    6152:	16 e0       	ldi	r17, 0x06	; 6
    6154:	20 e0       	ldi	r18, 0x00	; 0
    6156:	48 e5       	ldi	r20, 0x58	; 88
    6158:	5b e1       	ldi	r21, 0x1B	; 27
    615a:	60 e0       	ldi	r22, 0x00	; 0
    615c:	70 e0       	ldi	r23, 0x00	; 0
    615e:	82 ea       	ldi	r24, 0xA2	; 162
    6160:	94 e0       	ldi	r25, 0x04	; 4
    6162:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6166:	90 93 20 0b 	sts	0x0B20, r25	; 0x800b20 <xStartRevValve_1+0x1>
    616a:	80 93 1f 0b 	sts	0x0B1F, r24	; 0x800b1f <xStartRevValve_1>
		xStartThreeWay     =	xTimerCreate("StThreeW",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayThreeVTimer_1_ID, StartThreeWay);//(EEpromData.Three_Way_delay*1000)
    616e:	0f 2e       	mov	r0, r31
    6170:	fd e2       	ldi	r31, 0x2D	; 45
    6172:	ef 2e       	mov	r14, r31
    6174:	fc e2       	ldi	r31, 0x2C	; 44
    6176:	ff 2e       	mov	r15, r31
    6178:	f0 2d       	mov	r31, r0
    617a:	06 e8       	ldi	r16, 0x86	; 134
    617c:	16 e0       	ldi	r17, 0x06	; 6
    617e:	20 e0       	ldi	r18, 0x00	; 0
    6180:	48 e5       	ldi	r20, 0x58	; 88
    6182:	5b e1       	ldi	r21, 0x1B	; 27
    6184:	60 e0       	ldi	r22, 0x00	; 0
    6186:	70 e0       	ldi	r23, 0x00	; 0
    6188:	8b ea       	ldi	r24, 0xAB	; 171
    618a:	94 e0       	ldi	r25, 0x04	; 4
    618c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6190:	90 93 51 0a 	sts	0x0A51, r25	; 0x800a51 <xStartThreeWay+0x1>
    6194:	80 93 50 0a 	sts	0x0A50, r24	; 0x800a50 <xStartThreeWay>
		xStartHeatPump_1   =	xTimerCreate("StHeatP_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayHeatPTimer_1_ID, StartHeatPump);//(EEpromData.HeatingPump_delay*1000) 
    6198:	0f 2e       	mov	r0, r31
    619a:	fe e4       	ldi	r31, 0x4E	; 78
    619c:	ef 2e       	mov	r14, r31
    619e:	fa e2       	ldi	r31, 0x2A	; 42
    61a0:	ff 2e       	mov	r15, r31
    61a2:	f0 2d       	mov	r31, r0
    61a4:	08 e8       	ldi	r16, 0x88	; 136
    61a6:	16 e0       	ldi	r17, 0x06	; 6
    61a8:	20 e0       	ldi	r18, 0x00	; 0
    61aa:	48 e5       	ldi	r20, 0x58	; 88
    61ac:	5b e1       	ldi	r21, 0x1B	; 27
    61ae:	60 e0       	ldi	r22, 0x00	; 0
    61b0:	70 e0       	ldi	r23, 0x00	; 0
    61b2:	84 eb       	ldi	r24, 0xB4	; 180
    61b4:	94 e0       	ldi	r25, 0x04	; 4
    61b6:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    61ba:	90 93 f5 0a 	sts	0x0AF5, r25	; 0x800af5 <xStartHeatPump_1+0x1>
    61be:	80 93 f4 0a 	sts	0x0AF4, r24	; 0x800af4 <xStartHeatPump_1>
		xStartCompressor_1 =	xTimerCreate("StComp_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayCompTimer_1_ID, StartComp);//(EEpromData.Compressor_delay*1000)
    61c2:	0f 2e       	mov	r0, r31
    61c4:	f9 e5       	ldi	r31, 0x59	; 89
    61c6:	ef 2e       	mov	r14, r31
    61c8:	ff e2       	ldi	r31, 0x2F	; 47
    61ca:	ff 2e       	mov	r15, r31
    61cc:	f0 2d       	mov	r31, r0
    61ce:	09 e8       	ldi	r16, 0x89	; 137
    61d0:	16 e0       	ldi	r17, 0x06	; 6
    61d2:	20 e0       	ldi	r18, 0x00	; 0
    61d4:	48 e5       	ldi	r20, 0x58	; 88
    61d6:	5b e1       	ldi	r21, 0x1B	; 27
    61d8:	60 e0       	ldi	r22, 0x00	; 0
    61da:	70 e0       	ldi	r23, 0x00	; 0
    61dc:	8e eb       	ldi	r24, 0xBE	; 190
    61de:	94 e0       	ldi	r25, 0x04	; 4
    61e0:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    61e4:	90 93 f7 0a 	sts	0x0AF7, r25	; 0x800af7 <xStartCompressor_1+0x1>
    61e8:	80 93 f6 0a 	sts	0x0AF6, r24	; 0x800af6 <xStartCompressor_1>
		xTStartCheckErrors_1 =	xTimerCreate("ChErr_1",			300000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayChekErrTimer_1_ID, StartCheckErrors);
    61ec:	0f 2e       	mov	r0, r31
    61ee:	f1 ed       	ldi	r31, 0xD1	; 209
    61f0:	ef 2e       	mov	r14, r31
    61f2:	fb e2       	ldi	r31, 0x2B	; 43
    61f4:	ff 2e       	mov	r15, r31
    61f6:	f0 2d       	mov	r31, r0
    61f8:	04 e8       	ldi	r16, 0x84	; 132
    61fa:	16 e0       	ldi	r17, 0x06	; 6
    61fc:	20 e0       	ldi	r18, 0x00	; 0
    61fe:	40 ee       	ldi	r20, 0xE0	; 224
    6200:	53 e9       	ldi	r21, 0x93	; 147
    6202:	64 e0       	ldi	r22, 0x04	; 4
    6204:	70 e0       	ldi	r23, 0x00	; 0
    6206:	87 ec       	ldi	r24, 0xC7	; 199
    6208:	94 e0       	ldi	r25, 0x04	; 4
    620a:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    620e:	90 93 18 0b 	sts	0x0B18, r25	; 0x800b18 <xTStartCheckErrors_1+0x1>
    6212:	80 93 17 0b 	sts	0x0B17, r24	; 0x800b17 <xTStartCheckErrors_1>
		xTStartCheckTrv_1 =		xTimerCreate("ChTrv_1",			7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayChekTrvTimer_1_ID, StartCheckTrv);//(EEpromData.TRV_Delay*1000)
    6216:	0f 2e       	mov	r0, r31
    6218:	f1 e0       	ldi	r31, 0x01	; 1
    621a:	ef 2e       	mov	r14, r31
    621c:	fc e2       	ldi	r31, 0x2C	; 44
    621e:	ff 2e       	mov	r15, r31
    6220:	f0 2d       	mov	r31, r0
    6222:	05 e8       	ldi	r16, 0x85	; 133
    6224:	16 e0       	ldi	r17, 0x06	; 6
    6226:	20 e0       	ldi	r18, 0x00	; 0
    6228:	48 e5       	ldi	r20, 0x58	; 88
    622a:	5b e1       	ldi	r21, 0x1B	; 27
    622c:	60 e0       	ldi	r22, 0x00	; 0
    622e:	70 e0       	ldi	r23, 0x00	; 0
    6230:	8f ec       	ldi	r24, 0xCF	; 207
    6232:	94 e0       	ldi	r25, 0x04	; 4
    6234:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6238:	90 93 72 09 	sts	0x0972, r25	; 0x800972 <xTStartCheckTrv_1+0x1>
    623c:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <xTStartCheckTrv_1>
		//----------stop

		xSwitchRevOne_1_time =	xTimerCreate("swRevOne_1",		5000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxSwitchRevOne_1_ID, SwitchRev_1_Time);
    6240:	0f 2e       	mov	r0, r31
    6242:	f3 e3       	ldi	r31, 0x33	; 51
    6244:	ef 2e       	mov	r14, r31
    6246:	f0 e3       	ldi	r31, 0x30	; 48
    6248:	ff 2e       	mov	r15, r31
    624a:	f0 2d       	mov	r31, r0
    624c:	0f e7       	ldi	r16, 0x7F	; 127
    624e:	16 e0       	ldi	r17, 0x06	; 6
    6250:	20 e0       	ldi	r18, 0x00	; 0
    6252:	48 e8       	ldi	r20, 0x88	; 136
    6254:	53 e1       	ldi	r21, 0x13	; 19
    6256:	60 e0       	ldi	r22, 0x00	; 0
    6258:	70 e0       	ldi	r23, 0x00	; 0
    625a:	87 ed       	ldi	r24, 0xD7	; 215
    625c:	94 e0       	ldi	r25, 0x04	; 4
    625e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6262:	90 93 6c 09 	sts	0x096C, r25	; 0x80096c <xSwitchRevOne_1_time+0x1>
    6266:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <xSwitchRevOne_1_time>
		xSwitchRevTwo_1_time =	xTimerCreate("swRevTwo_1",		5000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxSwitchRevTwo_1_ID, SwitchRev_2_Time);
    626a:	0f 2e       	mov	r0, r31
    626c:	f5 ef       	ldi	r31, 0xF5	; 245
    626e:	ef 2e       	mov	r14, r31
    6270:	fa e2       	ldi	r31, 0x2A	; 42
    6272:	ff 2e       	mov	r15, r31
    6274:	f0 2d       	mov	r31, r0
    6276:	0e e7       	ldi	r16, 0x7E	; 126
    6278:	16 e0       	ldi	r17, 0x06	; 6
    627a:	20 e0       	ldi	r18, 0x00	; 0
    627c:	48 e8       	ldi	r20, 0x88	; 136
    627e:	53 e1       	ldi	r21, 0x13	; 19
    6280:	60 e0       	ldi	r22, 0x00	; 0
    6282:	70 e0       	ldi	r23, 0x00	; 0
    6284:	82 ee       	ldi	r24, 0xE2	; 226
    6286:	94 e0       	ldi	r25, 0x04	; 4
    6288:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    628c:	90 93 f3 0a 	sts	0x0AF3, r25	; 0x800af3 <xSwitchRevTwo_1_time+0x1>
    6290:	80 93 f2 0a 	sts	0x0AF2, r24	; 0x800af2 <xSwitchRevTwo_1_time>
		xStopHeatPump_1   =		xTimerCreate("offHeatP_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayHeatPTimer_1_ID, HeatPump_Stop);//(EEpromData.HeatingPump_delay*1000)
    6294:	0f 2e       	mov	r0, r31
    6296:	f3 ef       	ldi	r31, 0xF3	; 243
    6298:	ef 2e       	mov	r14, r31
    629a:	fc e2       	ldi	r31, 0x2C	; 44
    629c:	ff 2e       	mov	r15, r31
    629e:	f0 2d       	mov	r31, r0
    62a0:	03 e8       	ldi	r16, 0x83	; 131
    62a2:	16 e0       	ldi	r17, 0x06	; 6
    62a4:	20 e0       	ldi	r18, 0x00	; 0
    62a6:	48 e5       	ldi	r20, 0x58	; 88
    62a8:	5b e1       	ldi	r21, 0x1B	; 27
    62aa:	60 e0       	ldi	r22, 0x00	; 0
    62ac:	70 e0       	ldi	r23, 0x00	; 0
    62ae:	8d ee       	ldi	r24, 0xED	; 237
    62b0:	94 e0       	ldi	r25, 0x04	; 4
    62b2:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    62b6:	90 93 66 09 	sts	0x0966, r25	; 0x800966 <xStopHeatPump_1+0x1>
    62ba:	80 93 65 09 	sts	0x0965, r24	; 0x800965 <xStopHeatPump_1>
		xStopThreeWay     =		xTimerCreate("offThreeW",		7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayThreeVTimer_1_ID, ThreeWay_Stop);//(EEpromData.Three_Way_delay*1000)
    62be:	0f 2e       	mov	r0, r31
    62c0:	f0 e0       	ldi	r31, 0x00	; 0
    62c2:	ef 2e       	mov	r14, r31
    62c4:	fe e2       	ldi	r31, 0x2E	; 46
    62c6:	ff 2e       	mov	r15, r31
    62c8:	f0 2d       	mov	r31, r0
    62ca:	00 e8       	ldi	r16, 0x80	; 128
    62cc:	16 e0       	ldi	r17, 0x06	; 6
    62ce:	20 e0       	ldi	r18, 0x00	; 0
    62d0:	48 e5       	ldi	r20, 0x58	; 88
    62d2:	5b e1       	ldi	r21, 0x1B	; 27
    62d4:	60 e0       	ldi	r22, 0x00	; 0
    62d6:	70 e0       	ldi	r23, 0x00	; 0
    62d8:	88 ef       	ldi	r24, 0xF8	; 248
    62da:	94 e0       	ldi	r25, 0x04	; 4
    62dc:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    62e0:	90 93 4f 0a 	sts	0x0A4F, r25	; 0x800a4f <xStopThreeWay+0x1>
    62e4:	80 93 4e 0a 	sts	0x0A4E, r24	; 0x800a4e <xStopThreeWay>
		xStopRevValve_1   =		xTimerCreate("offRevV_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayRevVTimer_1_ID, Revers_Stop);//(EEpromData.Revers_Valve_delay*1000)
    62e8:	0f 2e       	mov	r0, r31
    62ea:	fe e5       	ldi	r31, 0x5E	; 94
    62ec:	ef 2e       	mov	r14, r31
    62ee:	fb e2       	ldi	r31, 0x2B	; 43
    62f0:	ff 2e       	mov	r15, r31
    62f2:	f0 2d       	mov	r31, r0
    62f4:	01 e8       	ldi	r16, 0x81	; 129
    62f6:	16 e0       	ldi	r17, 0x06	; 6
    62f8:	20 e0       	ldi	r18, 0x00	; 0
    62fa:	48 e5       	ldi	r20, 0x58	; 88
    62fc:	5b e1       	ldi	r21, 0x1B	; 27
    62fe:	60 e0       	ldi	r22, 0x00	; 0
    6300:	70 e0       	ldi	r23, 0x00	; 0
    6302:	82 e0       	ldi	r24, 0x02	; 2
    6304:	95 e0       	ldi	r25, 0x05	; 5
    6306:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    630a:	90 93 e9 0a 	sts	0x0AE9, r25	; 0x800ae9 <xStopRevValve_1+0x1>
    630e:	80 93 e8 0a 	sts	0x0AE8, r24	; 0x800ae8 <xStopRevValve_1>
		xStopSource_1   =		xTimerCreate("offSourceP_1",	7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelaySourcePTimer_1_ID, SorcePump_Stop);//(EEpromData.Source_Pump_delay*1000)
    6312:	0f 2e       	mov	r0, r31
    6314:	fb e8       	ldi	r31, 0x8B	; 139
    6316:	ef 2e       	mov	r14, r31
    6318:	fe e2       	ldi	r31, 0x2E	; 46
    631a:	ff 2e       	mov	r15, r31
    631c:	f0 2d       	mov	r31, r0
    631e:	02 e8       	ldi	r16, 0x82	; 130
    6320:	16 e0       	ldi	r17, 0x06	; 6
    6322:	20 e0       	ldi	r18, 0x00	; 0
    6324:	48 e5       	ldi	r20, 0x58	; 88
    6326:	5b e1       	ldi	r21, 0x1B	; 27
    6328:	60 e0       	ldi	r22, 0x00	; 0
    632a:	70 e0       	ldi	r23, 0x00	; 0
    632c:	8c e0       	ldi	r24, 0x0C	; 12
    632e:	95 e0       	ldi	r25, 0x05	; 5
    6330:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6334:	90 93 70 09 	sts	0x0970, r25	; 0x800970 <xStopSource_1+0x1>
    6338:	80 93 6f 09 	sts	0x096F, r24	; 0x80096f <xStopSource_1>
	}
	if (comp->Index==2)
    633c:	ce 58       	subi	r28, 0x8E	; 142
    633e:	df 4f       	sbci	r29, 0xFF	; 255
    6340:	88 81       	ld	r24, Y
    6342:	99 81       	ldd	r25, Y+1	; 0x01
    6344:	02 97       	sbiw	r24, 0x02	; 2
    6346:	09 f0       	breq	.+2      	; 0x634a <activateTimers+0x224>
    6348:	d2 c0       	rjmp	.+420    	; 0x64ee <activateTimers+0x3c8>
	{
		
		xStartRevValve_2   =	xTimerCreate("StRevV_2",		7000, pdFALSE, (void*) &uxStartDelayRevVTimer_2_ID, StartReversingValve);
    634a:	0f 2e       	mov	r0, r31
    634c:	f2 e4       	ldi	r31, 0x42	; 66
    634e:	ef 2e       	mov	r14, r31
    6350:	f9 e2       	ldi	r31, 0x29	; 41
    6352:	ff 2e       	mov	r15, r31
    6354:	f0 2d       	mov	r31, r0
    6356:	0b e7       	ldi	r16, 0x7B	; 123
    6358:	16 e0       	ldi	r17, 0x06	; 6
    635a:	20 e0       	ldi	r18, 0x00	; 0
    635c:	48 e5       	ldi	r20, 0x58	; 88
    635e:	5b e1       	ldi	r21, 0x1B	; 27
    6360:	60 e0       	ldi	r22, 0x00	; 0
    6362:	70 e0       	ldi	r23, 0x00	; 0
    6364:	89 e1       	ldi	r24, 0x19	; 25
    6366:	95 e0       	ldi	r25, 0x05	; 5
    6368:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    636c:	90 93 e1 0a 	sts	0x0AE1, r25	; 0x800ae1 <xStartRevValve_2+0x1>
    6370:	80 93 e0 0a 	sts	0x0AE0, r24	; 0x800ae0 <xStartRevValve_2>
		xStartHeatPump_2   =	xTimerCreate("StHeatP_2",		7000, pdFALSE, (void*) &uxStartDelayHeatPTimer_2_ID, StartHeatPump);
    6374:	0f 2e       	mov	r0, r31
    6376:	fe e4       	ldi	r31, 0x4E	; 78
    6378:	ef 2e       	mov	r14, r31
    637a:	fa e2       	ldi	r31, 0x2A	; 42
    637c:	ff 2e       	mov	r15, r31
    637e:	f0 2d       	mov	r31, r0
    6380:	0c e7       	ldi	r16, 0x7C	; 124
    6382:	16 e0       	ldi	r17, 0x06	; 6
    6384:	20 e0       	ldi	r18, 0x00	; 0
    6386:	48 e5       	ldi	r20, 0x58	; 88
    6388:	5b e1       	ldi	r21, 0x1B	; 27
    638a:	60 e0       	ldi	r22, 0x00	; 0
    638c:	70 e0       	ldi	r23, 0x00	; 0
    638e:	82 e2       	ldi	r24, 0x22	; 34
    6390:	95 e0       	ldi	r25, 0x05	; 5
    6392:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6396:	90 93 53 0a 	sts	0x0A53, r25	; 0x800a53 <xStartHeatPump_2+0x1>
    639a:	80 93 52 0a 	sts	0x0A52, r24	; 0x800a52 <xStartHeatPump_2>
		xStartCompressor_2 =	xTimerCreate("StComp_2",		7000, pdFALSE, (void*) &uxStartDelayCompTimer_2_ID, StartComp);
    639e:	0f 2e       	mov	r0, r31
    63a0:	f9 e5       	ldi	r31, 0x59	; 89
    63a2:	ef 2e       	mov	r14, r31
    63a4:	ff e2       	ldi	r31, 0x2F	; 47
    63a6:	ff 2e       	mov	r15, r31
    63a8:	f0 2d       	mov	r31, r0
    63aa:	0d e7       	ldi	r16, 0x7D	; 125
    63ac:	16 e0       	ldi	r17, 0x06	; 6
    63ae:	20 e0       	ldi	r18, 0x00	; 0
    63b0:	48 e5       	ldi	r20, 0x58	; 88
    63b2:	5b e1       	ldi	r21, 0x1B	; 27
    63b4:	60 e0       	ldi	r22, 0x00	; 0
    63b6:	70 e0       	ldi	r23, 0x00	; 0
    63b8:	8c e2       	ldi	r24, 0x2C	; 44
    63ba:	95 e0       	ldi	r25, 0x05	; 5
    63bc:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    63c0:	90 93 09 0b 	sts	0x0B09, r25	; 0x800b09 <xStartCompressor_2+0x1>
    63c4:	80 93 08 0b 	sts	0x0B08, r24	; 0x800b08 <xStartCompressor_2>
		xTStartCheckErrors_2 =	xTimerCreate("ChErr_2",			300000, pdFALSE, (void*) &uxStartDelayChekErrTimer_2_ID, StartCheckErrors);
    63c8:	0f 2e       	mov	r0, r31
    63ca:	f1 ed       	ldi	r31, 0xD1	; 209
    63cc:	ef 2e       	mov	r14, r31
    63ce:	fb e2       	ldi	r31, 0x2B	; 43
    63d0:	ff 2e       	mov	r15, r31
    63d2:	f0 2d       	mov	r31, r0
    63d4:	09 e7       	ldi	r16, 0x79	; 121
    63d6:	16 e0       	ldi	r17, 0x06	; 6
    63d8:	20 e0       	ldi	r18, 0x00	; 0
    63da:	40 ee       	ldi	r20, 0xE0	; 224
    63dc:	53 e9       	ldi	r21, 0x93	; 147
    63de:	64 e0       	ldi	r22, 0x04	; 4
    63e0:	70 e0       	ldi	r23, 0x00	; 0
    63e2:	85 e3       	ldi	r24, 0x35	; 53
    63e4:	95 e0       	ldi	r25, 0x05	; 5
    63e6:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    63ea:	90 93 60 09 	sts	0x0960, r25	; 0x800960 <xTStartCheckErrors_2+0x1>
    63ee:	80 93 5f 09 	sts	0x095F, r24	; 0x80095f <xTStartCheckErrors_2>
		xTStartCheckTrv_2 =		xTimerCreate("ChTrv_2",			7000, pdFALSE, (void*) &uxStartDelayChekTrvTimer_2_ID, StartCheckTrv);
    63f2:	0f 2e       	mov	r0, r31
    63f4:	f1 e0       	ldi	r31, 0x01	; 1
    63f6:	ef 2e       	mov	r14, r31
    63f8:	fc e2       	ldi	r31, 0x2C	; 44
    63fa:	ff 2e       	mov	r15, r31
    63fc:	f0 2d       	mov	r31, r0
    63fe:	0a e7       	ldi	r16, 0x7A	; 122
    6400:	16 e0       	ldi	r17, 0x06	; 6
    6402:	20 e0       	ldi	r18, 0x00	; 0
    6404:	48 e5       	ldi	r20, 0x58	; 88
    6406:	5b e1       	ldi	r21, 0x1B	; 27
    6408:	60 e0       	ldi	r22, 0x00	; 0
    640a:	70 e0       	ldi	r23, 0x00	; 0
    640c:	8d e3       	ldi	r24, 0x3D	; 61
    640e:	95 e0       	ldi	r25, 0x05	; 5
    6410:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6414:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <xTStartCheckTrv_2+0x1>
    6418:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <xTStartCheckTrv_2>
		//---------stop
		xSwitchRevOne_2_time =	xTimerCreate("swRevOne_2",		5000, pdFALSE, (void*) &uxSwitchRevOne_2_ID, SwitchRev_1_Time);
    641c:	0f 2e       	mov	r0, r31
    641e:	f3 e3       	ldi	r31, 0x33	; 51
    6420:	ef 2e       	mov	r14, r31
    6422:	f0 e3       	ldi	r31, 0x30	; 48
    6424:	ff 2e       	mov	r15, r31
    6426:	f0 2d       	mov	r31, r0
    6428:	05 e7       	ldi	r16, 0x75	; 117
    642a:	16 e0       	ldi	r17, 0x06	; 6
    642c:	20 e0       	ldi	r18, 0x00	; 0
    642e:	48 e8       	ldi	r20, 0x88	; 136
    6430:	53 e1       	ldi	r21, 0x13	; 19
    6432:	60 e0       	ldi	r22, 0x00	; 0
    6434:	70 e0       	ldi	r23, 0x00	; 0
    6436:	85 e4       	ldi	r24, 0x45	; 69
    6438:	95 e0       	ldi	r25, 0x05	; 5
    643a:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    643e:	90 93 29 0b 	sts	0x0B29, r25	; 0x800b29 <xSwitchRevOne_2_time+0x1>
    6442:	80 93 28 0b 	sts	0x0B28, r24	; 0x800b28 <xSwitchRevOne_2_time>
		xSwitchRevTwo_2_time =	xTimerCreate("swRevTwo_2",		5000, pdFALSE, (void*) &uxSwitchRevTwo_2_ID, SwitchRev_2_Time);
    6446:	0f 2e       	mov	r0, r31
    6448:	f5 ef       	ldi	r31, 0xF5	; 245
    644a:	ef 2e       	mov	r14, r31
    644c:	fa e2       	ldi	r31, 0x2A	; 42
    644e:	ff 2e       	mov	r15, r31
    6450:	f0 2d       	mov	r31, r0
    6452:	04 e7       	ldi	r16, 0x74	; 116
    6454:	16 e0       	ldi	r17, 0x06	; 6
    6456:	20 e0       	ldi	r18, 0x00	; 0
    6458:	48 e8       	ldi	r20, 0x88	; 136
    645a:	53 e1       	ldi	r21, 0x13	; 19
    645c:	60 e0       	ldi	r22, 0x00	; 0
    645e:	70 e0       	ldi	r23, 0x00	; 0
    6460:	80 e5       	ldi	r24, 0x50	; 80
    6462:	95 e0       	ldi	r25, 0x05	; 5
    6464:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6468:	90 93 0e 0b 	sts	0x0B0E, r25	; 0x800b0e <xSwitchRevTwo_2_time+0x1>
    646c:	80 93 0d 0b 	sts	0x0B0D, r24	; 0x800b0d <xSwitchRevTwo_2_time>
		xStopHeatPump_2   =		xTimerCreate("offHeatP_2",		7000, pdFALSE, (void*) &uxStopDelayHeatPTimer_2_ID, HeatPump_Stop);
    6470:	0f 2e       	mov	r0, r31
    6472:	f3 ef       	ldi	r31, 0xF3	; 243
    6474:	ef 2e       	mov	r14, r31
    6476:	fc e2       	ldi	r31, 0x2C	; 44
    6478:	ff 2e       	mov	r15, r31
    647a:	f0 2d       	mov	r31, r0
    647c:	08 e7       	ldi	r16, 0x78	; 120
    647e:	16 e0       	ldi	r17, 0x06	; 6
    6480:	20 e0       	ldi	r18, 0x00	; 0
    6482:	48 e5       	ldi	r20, 0x58	; 88
    6484:	5b e1       	ldi	r21, 0x1B	; 27
    6486:	60 e0       	ldi	r22, 0x00	; 0
    6488:	70 e0       	ldi	r23, 0x00	; 0
    648a:	8b e5       	ldi	r24, 0x5B	; 91
    648c:	95 e0       	ldi	r25, 0x05	; 5
    648e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6492:	90 93 e7 0a 	sts	0x0AE7, r25	; 0x800ae7 <xStopHeatPump_2+0x1>
    6496:	80 93 e6 0a 	sts	0x0AE6, r24	; 0x800ae6 <xStopHeatPump_2>
		xStopRevValve_2    =	xTimerCreate("offRevV_2",		7000, pdFALSE, (void*) &uxStopDelayRevVTimer_2_ID, Revers_Stop);
    649a:	0f 2e       	mov	r0, r31
    649c:	fe e5       	ldi	r31, 0x5E	; 94
    649e:	ef 2e       	mov	r14, r31
    64a0:	fb e2       	ldi	r31, 0x2B	; 43
    64a2:	ff 2e       	mov	r15, r31
    64a4:	f0 2d       	mov	r31, r0
    64a6:	06 e7       	ldi	r16, 0x76	; 118
    64a8:	16 e0       	ldi	r17, 0x06	; 6
    64aa:	20 e0       	ldi	r18, 0x00	; 0
    64ac:	48 e5       	ldi	r20, 0x58	; 88
    64ae:	5b e1       	ldi	r21, 0x1B	; 27
    64b0:	60 e0       	ldi	r22, 0x00	; 0
    64b2:	70 e0       	ldi	r23, 0x00	; 0
    64b4:	86 e6       	ldi	r24, 0x66	; 102
    64b6:	95 e0       	ldi	r25, 0x05	; 5
    64b8:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    64bc:	90 93 6e 09 	sts	0x096E, r25	; 0x80096e <xStopRevValve_2+0x1>
    64c0:	80 93 6d 09 	sts	0x096D, r24	; 0x80096d <xStopRevValve_2>
		xStopSource_2   =		xTimerCreate("offSourceP_2",	7000, pdFALSE, (void*) &uxStopDelaySourcePTimer_2_ID, SorcePump_Stop);
    64c4:	0f 2e       	mov	r0, r31
    64c6:	fb e8       	ldi	r31, 0x8B	; 139
    64c8:	ef 2e       	mov	r14, r31
    64ca:	fe e2       	ldi	r31, 0x2E	; 46
    64cc:	ff 2e       	mov	r15, r31
    64ce:	f0 2d       	mov	r31, r0
    64d0:	07 e7       	ldi	r16, 0x77	; 119
    64d2:	16 e0       	ldi	r17, 0x06	; 6
    64d4:	20 e0       	ldi	r18, 0x00	; 0
    64d6:	48 e5       	ldi	r20, 0x58	; 88
    64d8:	5b e1       	ldi	r21, 0x1B	; 27
    64da:	60 e0       	ldi	r22, 0x00	; 0
    64dc:	70 e0       	ldi	r23, 0x00	; 0
    64de:	80 e7       	ldi	r24, 0x70	; 112
    64e0:	95 e0       	ldi	r25, 0x05	; 5
    64e2:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    64e6:	90 93 d7 0a 	sts	0x0AD7, r25	; 0x800ad7 <xStopSource_2+0x1>
    64ea:	80 93 d6 0a 	sts	0x0AD6, r24	; 0x800ad6 <xStopSource_2>
	}
	
	
}
    64ee:	df 91       	pop	r29
    64f0:	cf 91       	pop	r28
    64f2:	1f 91       	pop	r17
    64f4:	0f 91       	pop	r16
    64f6:	ff 90       	pop	r15
    64f8:	ef 90       	pop	r14
    64fa:	08 95       	ret

000064fc <startDefrost>:
//------------------------------------------------
void startDefrost(xCompressor *comp,xEEdata* eeData){
    64fc:	fb 01       	movw	r30, r22
	_heatWater=eeData->heatWater;
    64fe:	81 e0       	ldi	r24, 0x01	; 1
    6500:	95 a1       	ldd	r25, Z+37	; 0x25
    6502:	91 11       	cpse	r25, r1
    6504:	01 c0       	rjmp	.+2      	; 0x6508 <startDefrost+0xc>
    6506:	80 e0       	ldi	r24, 0x00	; 0
    6508:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <_heatWater>
	_heat =eeData->heat;
    650c:	81 e0       	ldi	r24, 0x01	; 1
    650e:	96 a1       	ldd	r25, Z+38	; 0x26
    6510:	91 11       	cpse	r25, r1
    6512:	01 c0       	rjmp	.+2      	; 0x6516 <startDefrost+0x1a>
    6514:	80 e0       	ldi	r24, 0x00	; 0
    6516:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <_heat>
	_cool =eeData->cool;
    651a:	81 e0       	ldi	r24, 0x01	; 1
    651c:	97 a1       	ldd	r25, Z+39	; 0x27
    651e:	91 11       	cpse	r25, r1
    6520:	01 c0       	rjmp	.+2      	; 0x6524 <startDefrost+0x28>
    6522:	80 e0       	ldi	r24, 0x00	; 0
    6524:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <_cool>
	eeData->heatWater=false;
    6528:	15 a2       	std	Z+37, r1	; 0x25
	eeData->heat =false;
    652a:	16 a2       	std	Z+38, r1	; 0x26
	eeData->cool =true;
    652c:	81 e0       	ldi	r24, 0x01	; 1
    652e:	87 a3       	std	Z+39, r24	; 0x27
    6530:	08 95       	ret

00006532 <stopDefrost>:
	//Comp_Stop(comp);
		
}
void stopDefrost(xCompressor *comp,xEEdata* eeData){
    6532:	fb 01       	movw	r30, r22
	
	//Comp_Stop(comp);
	//eeData->heatWater=false;
	//eeData->heat =true;
	//eeData->cool =false;
	eeData->heatWater=_heatWater;
    6534:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <_heatWater>
    6538:	85 a3       	std	Z+37, r24	; 0x25
	eeData->heat =_heat;
    653a:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <_heat>
    653e:	86 a3       	std	Z+38, r24	; 0x26
	eeData->cool =_cool;
    6540:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <_cool>
    6544:	87 a3       	std	Z+39, r24	; 0x27
    6546:	08 95       	ret

00006548 <StarSoursePump>:




//------------------------------------------------
void StarSoursePump(xCompressor *comp){
    6548:	4f 92       	push	r4
    654a:	5f 92       	push	r5
    654c:	6f 92       	push	r6
    654e:	7f 92       	push	r7
    6550:	af 92       	push	r10
    6552:	bf 92       	push	r11
    6554:	cf 92       	push	r12
    6556:	df 92       	push	r13
    6558:	ef 92       	push	r14
    655a:	ff 92       	push	r15
    655c:	0f 93       	push	r16
    655e:	1f 93       	push	r17
    6560:	cf 93       	push	r28
    6562:	df 93       	push	r29
    6564:	5c 01       	movw	r10, r24
TickType_t period;

	period=(TickType_t)EEpromData.Revers_Valve_delay;
    6566:	20 91 7a 09 	lds	r18, 0x097A	; 0x80097a <EEpromData+0x2>
	period*=1000;
    656a:	30 e0       	ldi	r19, 0x00	; 0
    656c:	a8 ee       	ldi	r26, 0xE8	; 232
    656e:	b3 e0       	ldi	r27, 0x03	; 3
    6570:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    6574:	2b 01       	movw	r4, r22
    6576:	3c 01       	movw	r6, r24
	xSerialxPrintf(&xSerial3Port,"SoursePump_f_%d\r\n",comp->Index);
    6578:	e5 01       	movw	r28, r10
    657a:	ce 58       	subi	r28, 0x8E	; 142
    657c:	df 4f       	sbci	r29, 0xFF	; 255
    657e:	89 81       	ldd	r24, Y+1	; 0x01
    6580:	8f 93       	push	r24
    6582:	88 81       	ld	r24, Y
    6584:	8f 93       	push	r24
    6586:	8d e7       	ldi	r24, 0x7D	; 125
    6588:	95 e0       	ldi	r25, 0x05	; 5
    658a:	9f 93       	push	r25
    658c:	8f 93       	push	r24
    658e:	86 e1       	ldi	r24, 0x16	; 22
    6590:	98 e0       	ldi	r25, 0x08	; 8
    6592:	9f 93       	push	r25
    6594:	8f 93       	push	r24
    6596:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(comp->Index == 1)
    659a:	0f 90       	pop	r0
    659c:	0f 90       	pop	r0
    659e:	0f 90       	pop	r0
    65a0:	0f 90       	pop	r0
    65a2:	0f 90       	pop	r0
    65a4:	0f 90       	pop	r0
    65a6:	88 81       	ld	r24, Y
    65a8:	99 81       	ldd	r25, Y+1	; 0x01
    65aa:	01 97       	sbiw	r24, 0x01	; 1
    65ac:	09 f0       	breq	.+2      	; 0x65b0 <StarSoursePump+0x68>
    65ae:	4a c0       	rjmp	.+148    	; 0x6644 <StarSoursePump+0xfc>
	{
		
		Comp_1.error=0;
    65b0:	10 92 49 0a 	sts	0x0A49, r1	; 0x800a49 <Comp_1+0x71>
    65b4:	10 92 48 0a 	sts	0x0A48, r1	; 0x800a48 <Comp_1+0x70>
		Comp_1.switchToMode=true;
    65b8:	81 e0       	ldi	r24, 0x01	; 1
    65ba:	80 93 d8 09 	sts	0x09D8, r24	; 0x8009d8 <Comp_1>
		if(PIN_SOURCE_PUMP_1 == 0 && !comp->def )
    65be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    65c2:	81 fd       	sbrc	r24, 1
    65c4:	2d c0       	rjmp	.+90     	; 0x6620 <StarSoursePump+0xd8>
    65c6:	f5 01       	movw	r30, r10
    65c8:	81 85       	ldd	r24, Z+9	; 0x09
    65ca:	81 11       	cpse	r24, r1
    65cc:	29 c0       	rjmp	.+82     	; 0x6620 <StarSoursePump+0xd8>
		{
			START_SOURCE_PUMP_1;
    65ce:	e2 e0       	ldi	r30, 0x02	; 2
    65d0:	f1 e0       	ldi	r31, 0x01	; 1
    65d2:	80 81       	ld	r24, Z
    65d4:	82 60       	ori	r24, 0x02	; 2
    65d6:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StartSourcePump_1\r\n");
    65d8:	8f e8       	ldi	r24, 0x8F	; 143
    65da:	95 e0       	ldi	r25, 0x05	; 5
    65dc:	9f 93       	push	r25
    65de:	8f 93       	push	r24
    65e0:	86 e1       	ldi	r24, 0x16	; 22
    65e2:	98 e0       	ldi	r25, 0x08	; 8
    65e4:	9f 93       	push	r25
    65e6:	8f 93       	push	r24
    65e8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->srcPOn=1;
    65ec:	81 e0       	ldi	r24, 0x01	; 1
    65ee:	f5 01       	movw	r30, r10
    65f0:	87 87       	std	Z+15, r24	; 0x0f
			timeStartSrcP_1=time(&current_time);
    65f2:	83 e7       	ldi	r24, 0x73	; 115
    65f4:	99 e0       	ldi	r25, 0x09	; 9
    65f6:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    65fa:	60 93 54 0a 	sts	0x0A54, r22	; 0x800a54 <timeStartSrcP_1>
    65fe:	70 93 55 0a 	sts	0x0A55, r23	; 0x800a55 <timeStartSrcP_1+0x1>
    6602:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <timeStartSrcP_1+0x2>
    6606:	90 93 57 0a 	sts	0x0A57, r25	; 0x800a57 <timeStartSrcP_1+0x3>
			EEpromData.number_turnon_source_1+=1;
    660a:	e8 eb       	ldi	r30, 0xB8	; 184
    660c:	f9 e0       	ldi	r31, 0x09	; 9
    660e:	80 81       	ld	r24, Z
    6610:	91 81       	ldd	r25, Z+1	; 0x01
    6612:	01 96       	adiw	r24, 0x01	; 1
    6614:	91 83       	std	Z+1, r25	; 0x01
    6616:	80 83       	st	Z, r24
    6618:	0f 90       	pop	r0
    661a:	0f 90       	pop	r0
    661c:	0f 90       	pop	r0
    661e:	0f 90       	pop	r0
			//xSerialxPrintf(&xSerial3Port,"Number_turnon_source_=%d\r\n",EEpromData.number_turnon_source_1);
			
						
		}
		xTimerChangePeriod( xStartRevValve_1,period, 100 );
    6620:	0f 2e       	mov	r0, r31
    6622:	f4 e6       	ldi	r31, 0x64	; 100
    6624:	cf 2e       	mov	r12, r31
    6626:	d1 2c       	mov	r13, r1
    6628:	e1 2c       	mov	r14, r1
    662a:	f1 2c       	mov	r15, r1
    662c:	f0 2d       	mov	r31, r0
    662e:	00 e0       	ldi	r16, 0x00	; 0
    6630:	10 e0       	ldi	r17, 0x00	; 0
    6632:	a3 01       	movw	r20, r6
    6634:	92 01       	movw	r18, r4
    6636:	64 e0       	ldi	r22, 0x04	; 4
    6638:	80 91 1f 0b 	lds	r24, 0x0B1F	; 0x800b1f <xStartRevValve_1>
    663c:	90 91 20 0b 	lds	r25, 0x0B20	; 0x800b20 <xStartRevValve_1+0x1>
    6640:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if(comp->Index == 2)
    6644:	f5 01       	movw	r30, r10
    6646:	ee 58       	subi	r30, 0x8E	; 142
    6648:	ff 4f       	sbci	r31, 0xFF	; 255
    664a:	80 81       	ld	r24, Z
    664c:	91 81       	ldd	r25, Z+1	; 0x01
    664e:	02 97       	sbiw	r24, 0x02	; 2
    6650:	09 f0       	breq	.+2      	; 0x6654 <StarSoursePump+0x10c>
    6652:	4a c0       	rjmp	.+148    	; 0x66e8 <StarSoursePump+0x1a0>
	{
		Comp_2.error=0;
    6654:	10 92 d3 0a 	sts	0x0AD3, r1	; 0x800ad3 <Comp_2+0x71>
    6658:	10 92 d2 0a 	sts	0x0AD2, r1	; 0x800ad2 <Comp_2+0x70>
		Comp_2.switchToMode=true;
    665c:	81 e0       	ldi	r24, 0x01	; 1
    665e:	80 93 62 0a 	sts	0x0A62, r24	; 0x800a62 <Comp_2>
		
		xSerialxPrintf(&xSerial3Port,"StartSourcePump_2\r\n");
    6662:	83 ea       	ldi	r24, 0xA3	; 163
    6664:	95 e0       	ldi	r25, 0x05	; 5
    6666:	9f 93       	push	r25
    6668:	8f 93       	push	r24
    666a:	86 e1       	ldi	r24, 0x16	; 22
    666c:	98 e0       	ldi	r25, 0x08	; 8
    666e:	9f 93       	push	r25
    6670:	8f 93       	push	r24
    6672:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		
		if(PIN_SOURCE_PUMP_2 == 0 && !comp->def)
    6676:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    667a:	0f 90       	pop	r0
    667c:	0f 90       	pop	r0
    667e:	0f 90       	pop	r0
    6680:	0f 90       	pop	r0
    6682:	82 fd       	sbrc	r24, 2
    6684:	1f c0       	rjmp	.+62     	; 0x66c4 <StarSoursePump+0x17c>
    6686:	f5 01       	movw	r30, r10
    6688:	81 85       	ldd	r24, Z+9	; 0x09
    668a:	81 11       	cpse	r24, r1
    668c:	1b c0       	rjmp	.+54     	; 0x66c4 <StarSoursePump+0x17c>
		{
			START_SOURCE_PUMP_2;						
    668e:	e2 e0       	ldi	r30, 0x02	; 2
    6690:	f1 e0       	ldi	r31, 0x01	; 1
    6692:	80 81       	ld	r24, Z
    6694:	84 60       	ori	r24, 0x04	; 4
    6696:	80 83       	st	Z, r24
			comp->srcPOn=1;
    6698:	81 e0       	ldi	r24, 0x01	; 1
    669a:	f5 01       	movw	r30, r10
    669c:	87 87       	std	Z+15, r24	; 0x0f
			timeStartSrcP_2=time(&current_time);
    669e:	83 e7       	ldi	r24, 0x73	; 115
    66a0:	99 e0       	ldi	r25, 0x09	; 9
    66a2:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    66a6:	60 93 13 0b 	sts	0x0B13, r22	; 0x800b13 <timeStartSrcP_2>
    66aa:	70 93 14 0b 	sts	0x0B14, r23	; 0x800b14 <timeStartSrcP_2+0x1>
    66ae:	80 93 15 0b 	sts	0x0B15, r24	; 0x800b15 <timeStartSrcP_2+0x2>
    66b2:	90 93 16 0b 	sts	0x0B16, r25	; 0x800b16 <timeStartSrcP_2+0x3>
			EEpromData.number_turnon_source_2+=1;
    66b6:	ec ec       	ldi	r30, 0xCC	; 204
    66b8:	f9 e0       	ldi	r31, 0x09	; 9
    66ba:	80 81       	ld	r24, Z
    66bc:	91 81       	ldd	r25, Z+1	; 0x01
    66be:	01 96       	adiw	r24, 0x01	; 1
    66c0:	91 83       	std	Z+1, r25	; 0x01
    66c2:	80 83       	st	Z, r24
						
		}
		xTimerChangePeriod( xStartRevValve_2,period, 100 );
    66c4:	0f 2e       	mov	r0, r31
    66c6:	f4 e6       	ldi	r31, 0x64	; 100
    66c8:	cf 2e       	mov	r12, r31
    66ca:	d1 2c       	mov	r13, r1
    66cc:	e1 2c       	mov	r14, r1
    66ce:	f1 2c       	mov	r15, r1
    66d0:	f0 2d       	mov	r31, r0
    66d2:	00 e0       	ldi	r16, 0x00	; 0
    66d4:	10 e0       	ldi	r17, 0x00	; 0
    66d6:	a3 01       	movw	r20, r6
    66d8:	92 01       	movw	r18, r4
    66da:	64 e0       	ldi	r22, 0x04	; 4
    66dc:	80 91 e0 0a 	lds	r24, 0x0AE0	; 0x800ae0 <xStartRevValve_2>
    66e0:	90 91 e1 0a 	lds	r25, 0x0AE1	; 0x800ae1 <xStartRevValve_2+0x1>
    66e4:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
}
    66e8:	df 91       	pop	r29
    66ea:	cf 91       	pop	r28
    66ec:	1f 91       	pop	r17
    66ee:	0f 91       	pop	r16
    66f0:	ff 90       	pop	r15
    66f2:	ef 90       	pop	r14
    66f4:	df 90       	pop	r13
    66f6:	cf 90       	pop	r12
    66f8:	bf 90       	pop	r11
    66fa:	af 90       	pop	r10
    66fc:	7f 90       	pop	r7
    66fe:	6f 90       	pop	r6
    6700:	5f 90       	pop	r5
    6702:	4f 90       	pop	r4
    6704:	08 95       	ret

00006706 <selmode>:
   
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t selmode(xEEdata* eeData)
{
    6706:	fc 01       	movw	r30, r24

	if(eeData->heatWater && !eeData->heat && !eeData->cool)
    6708:	85 a1       	ldd	r24, Z+37	; 0x25
    670a:	88 23       	and	r24, r24
    670c:	39 f0       	breq	.+14     	; 0x671c <selmode+0x16>
    670e:	86 a1       	ldd	r24, Z+38	; 0x26
    6710:	81 11       	cpse	r24, r1
    6712:	1a c0       	rjmp	.+52     	; 0x6748 <selmode+0x42>
    6714:	97 a1       	ldd	r25, Z+39	; 0x27
    6716:	91 11       	cpse	r25, r1
    6718:	1c c0       	rjmp	.+56     	; 0x6752 <selmode+0x4c>
    671a:	0d c0       	rjmp	.+26     	; 0x6736 <selmode+0x30>
	{
		return DHW;
		
	}
	if(!eeData->heatWater && eeData->heat && !eeData->cool)
    671c:	96 a1       	ldd	r25, Z+38	; 0x26
    671e:	99 23       	and	r25, r25
    6720:	71 f0       	breq	.+28     	; 0x673e <selmode+0x38>
    6722:	97 a1       	ldd	r25, Z+39	; 0x27
    6724:	91 11       	cpse	r25, r1
    6726:	17 c0       	rjmp	.+46     	; 0x6756 <selmode+0x50>
	{
		return HEAT;
    6728:	82 e0       	ldi	r24, 0x02	; 2
    672a:	08 95       	ret
	}
	if(eeData->heatWater && eeData->heat && !eeData->cool)
	{
		return HEAT_DHW;
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
    672c:	87 a1       	ldd	r24, Z+39	; 0x27
    672e:	88 23       	and	r24, r24
    6730:	91 f0       	breq	.+36     	; 0x6756 <selmode+0x50>
	{
		return COOL_DHW;
    6732:	85 e0       	ldi	r24, 0x05	; 5
    6734:	08 95       	ret
uint8_t selmode(xEEdata* eeData)
{

	if(eeData->heatWater && !eeData->heat && !eeData->cool)
	{
		return DHW;
    6736:	81 e0       	ldi	r24, 0x01	; 1
    6738:	08 95       	ret
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
	{
		return COOL_DHW;
	}
	else return OFF;
    673a:	80 e0       	ldi	r24, 0x00	; 0
    673c:	08 95       	ret
	}
	if(!eeData->heatWater && eeData->heat && !eeData->cool)
	{
		return HEAT;
	}
	if(!eeData->heatWater && !eeData->heat && eeData->cool)
    673e:	87 a1       	ldd	r24, Z+39	; 0x27
    6740:	88 23       	and	r24, r24
    6742:	49 f0       	breq	.+18     	; 0x6756 <selmode+0x50>
	{
		return COOL;
    6744:	83 e0       	ldi	r24, 0x03	; 3
    6746:	08 95       	ret
	}
	if(eeData->heatWater && eeData->heat && !eeData->cool)
    6748:	87 a1       	ldd	r24, Z+39	; 0x27
    674a:	81 11       	cpse	r24, r1
    674c:	f6 cf       	rjmp	.-20     	; 0x673a <selmode+0x34>
	{
		return HEAT_DHW;
    674e:	84 e0       	ldi	r24, 0x04	; 4
    6750:	08 95       	ret
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
    6752:	88 23       	and	r24, r24
    6754:	59 f3       	breq	.-42     	; 0x672c <selmode+0x26>
	{
		return COOL_DHW;
	}
	else return OFF;

}
    6756:	08 95       	ret

00006758 <stop_timers>:
			}
		}break;
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void stop_timers( xCompressor *comp){
    6758:	cf 92       	push	r12
    675a:	df 92       	push	r13
    675c:	ef 92       	push	r14
    675e:	ff 92       	push	r15
    6760:	0f 93       	push	r16
    6762:	1f 93       	push	r17
	if(comp->Index==1)
    6764:	8e 58       	subi	r24, 0x8E	; 142
    6766:	9f 4f       	sbci	r25, 0xFF	; 255
    6768:	fc 01       	movw	r30, r24
    676a:	80 81       	ld	r24, Z
    676c:	91 81       	ldd	r25, Z+1	; 0x01
    676e:	81 30       	cpi	r24, 0x01	; 1
    6770:	91 05       	cpc	r25, r1
    6772:	09 f0       	breq	.+2      	; 0x6776 <stop_timers+0x1e>
    6774:	3a c1       	rjmp	.+628    	; 0x69ea <stop_timers+0x292>
	{
		if( xTimerIsTimerActive( xStartCompressor_1 ) != pdFALSE )      xTimerStop(xStartCompressor_1,1);
    6776:	80 91 f6 0a 	lds	r24, 0x0AF6	; 0x800af6 <xStartCompressor_1>
    677a:	90 91 f7 0a 	lds	r25, 0x0AF7	; 0x800af7 <xStartCompressor_1+0x1>
    677e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6782:	88 23       	and	r24, r24
    6784:	81 f0       	breq	.+32     	; 0x67a6 <stop_timers+0x4e>
    6786:	c1 2c       	mov	r12, r1
    6788:	d1 2c       	mov	r13, r1
    678a:	76 01       	movw	r14, r12
    678c:	c3 94       	inc	r12
    678e:	00 e0       	ldi	r16, 0x00	; 0
    6790:	10 e0       	ldi	r17, 0x00	; 0
    6792:	20 e0       	ldi	r18, 0x00	; 0
    6794:	30 e0       	ldi	r19, 0x00	; 0
    6796:	a9 01       	movw	r20, r18
    6798:	63 e0       	ldi	r22, 0x03	; 3
    679a:	80 91 f6 0a 	lds	r24, 0x0AF6	; 0x800af6 <xStartCompressor_1>
    679e:	90 91 f7 0a 	lds	r25, 0x0AF7	; 0x800af7 <xStartCompressor_1+0x1>
    67a2:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartHeatPump_1 ) != pdFALSE )        xTimerStop(xStartHeatPump_1,1);
    67a6:	80 91 f4 0a 	lds	r24, 0x0AF4	; 0x800af4 <xStartHeatPump_1>
    67aa:	90 91 f5 0a 	lds	r25, 0x0AF5	; 0x800af5 <xStartHeatPump_1+0x1>
    67ae:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    67b2:	88 23       	and	r24, r24
    67b4:	81 f0       	breq	.+32     	; 0x67d6 <stop_timers+0x7e>
    67b6:	c1 2c       	mov	r12, r1
    67b8:	d1 2c       	mov	r13, r1
    67ba:	76 01       	movw	r14, r12
    67bc:	c3 94       	inc	r12
    67be:	00 e0       	ldi	r16, 0x00	; 0
    67c0:	10 e0       	ldi	r17, 0x00	; 0
    67c2:	20 e0       	ldi	r18, 0x00	; 0
    67c4:	30 e0       	ldi	r19, 0x00	; 0
    67c6:	a9 01       	movw	r20, r18
    67c8:	63 e0       	ldi	r22, 0x03	; 3
    67ca:	80 91 f4 0a 	lds	r24, 0x0AF4	; 0x800af4 <xStartHeatPump_1>
    67ce:	90 91 f5 0a 	lds	r25, 0x0AF5	; 0x800af5 <xStartHeatPump_1+0x1>
    67d2:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartThreeWay ) != pdFALSE )			xTimerStop(xStartThreeWay,1);
    67d6:	80 91 50 0a 	lds	r24, 0x0A50	; 0x800a50 <xStartThreeWay>
    67da:	90 91 51 0a 	lds	r25, 0x0A51	; 0x800a51 <xStartThreeWay+0x1>
    67de:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    67e2:	88 23       	and	r24, r24
    67e4:	81 f0       	breq	.+32     	; 0x6806 <stop_timers+0xae>
    67e6:	c1 2c       	mov	r12, r1
    67e8:	d1 2c       	mov	r13, r1
    67ea:	76 01       	movw	r14, r12
    67ec:	c3 94       	inc	r12
    67ee:	00 e0       	ldi	r16, 0x00	; 0
    67f0:	10 e0       	ldi	r17, 0x00	; 0
    67f2:	20 e0       	ldi	r18, 0x00	; 0
    67f4:	30 e0       	ldi	r19, 0x00	; 0
    67f6:	a9 01       	movw	r20, r18
    67f8:	63 e0       	ldi	r22, 0x03	; 3
    67fa:	80 91 50 0a 	lds	r24, 0x0A50	; 0x800a50 <xStartThreeWay>
    67fe:	90 91 51 0a 	lds	r25, 0x0A51	; 0x800a51 <xStartThreeWay+0x1>
    6802:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartRevValve_1 ) != pdFALSE )		xTimerStop(xStartRevValve_1,1);
    6806:	80 91 1f 0b 	lds	r24, 0x0B1F	; 0x800b1f <xStartRevValve_1>
    680a:	90 91 20 0b 	lds	r25, 0x0B20	; 0x800b20 <xStartRevValve_1+0x1>
    680e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6812:	88 23       	and	r24, r24
    6814:	81 f0       	breq	.+32     	; 0x6836 <stop_timers+0xde>
    6816:	c1 2c       	mov	r12, r1
    6818:	d1 2c       	mov	r13, r1
    681a:	76 01       	movw	r14, r12
    681c:	c3 94       	inc	r12
    681e:	00 e0       	ldi	r16, 0x00	; 0
    6820:	10 e0       	ldi	r17, 0x00	; 0
    6822:	20 e0       	ldi	r18, 0x00	; 0
    6824:	30 e0       	ldi	r19, 0x00	; 0
    6826:	a9 01       	movw	r20, r18
    6828:	63 e0       	ldi	r22, 0x03	; 3
    682a:	80 91 1f 0b 	lds	r24, 0x0B1F	; 0x800b1f <xStartRevValve_1>
    682e:	90 91 20 0b 	lds	r25, 0x0B20	; 0x800b20 <xStartRevValve_1+0x1>
    6832:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevOne_1_time ) != pdFALSE )    xTimerStop(xSwitchRevOne_1_time,1);
    6836:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <xSwitchRevOne_1_time>
    683a:	90 91 6c 09 	lds	r25, 0x096C	; 0x80096c <xSwitchRevOne_1_time+0x1>
    683e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6842:	88 23       	and	r24, r24
    6844:	81 f0       	breq	.+32     	; 0x6866 <stop_timers+0x10e>
    6846:	c1 2c       	mov	r12, r1
    6848:	d1 2c       	mov	r13, r1
    684a:	76 01       	movw	r14, r12
    684c:	c3 94       	inc	r12
    684e:	00 e0       	ldi	r16, 0x00	; 0
    6850:	10 e0       	ldi	r17, 0x00	; 0
    6852:	20 e0       	ldi	r18, 0x00	; 0
    6854:	30 e0       	ldi	r19, 0x00	; 0
    6856:	a9 01       	movw	r20, r18
    6858:	63 e0       	ldi	r22, 0x03	; 3
    685a:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <xSwitchRevOne_1_time>
    685e:	90 91 6c 09 	lds	r25, 0x096C	; 0x80096c <xSwitchRevOne_1_time+0x1>
    6862:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevTwo_1_time ) != pdFALSE )	xTimerStop(xSwitchRevTwo_1_time,1);
    6866:	80 91 f2 0a 	lds	r24, 0x0AF2	; 0x800af2 <xSwitchRevTwo_1_time>
    686a:	90 91 f3 0a 	lds	r25, 0x0AF3	; 0x800af3 <xSwitchRevTwo_1_time+0x1>
    686e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6872:	88 23       	and	r24, r24
    6874:	81 f0       	breq	.+32     	; 0x6896 <stop_timers+0x13e>
    6876:	c1 2c       	mov	r12, r1
    6878:	d1 2c       	mov	r13, r1
    687a:	76 01       	movw	r14, r12
    687c:	c3 94       	inc	r12
    687e:	00 e0       	ldi	r16, 0x00	; 0
    6880:	10 e0       	ldi	r17, 0x00	; 0
    6882:	20 e0       	ldi	r18, 0x00	; 0
    6884:	30 e0       	ldi	r19, 0x00	; 0
    6886:	a9 01       	movw	r20, r18
    6888:	63 e0       	ldi	r22, 0x03	; 3
    688a:	80 91 f2 0a 	lds	r24, 0x0AF2	; 0x800af2 <xSwitchRevTwo_1_time>
    688e:	90 91 f3 0a 	lds	r25, 0x0AF3	; 0x800af3 <xSwitchRevTwo_1_time+0x1>
    6892:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopHeatPump_1 ) != pdFALSE )			xTimerStop(xStopHeatPump_1,1);
    6896:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <xStopHeatPump_1>
    689a:	90 91 66 09 	lds	r25, 0x0966	; 0x800966 <xStopHeatPump_1+0x1>
    689e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    68a2:	88 23       	and	r24, r24
    68a4:	81 f0       	breq	.+32     	; 0x68c6 <stop_timers+0x16e>
    68a6:	c1 2c       	mov	r12, r1
    68a8:	d1 2c       	mov	r13, r1
    68aa:	76 01       	movw	r14, r12
    68ac:	c3 94       	inc	r12
    68ae:	00 e0       	ldi	r16, 0x00	; 0
    68b0:	10 e0       	ldi	r17, 0x00	; 0
    68b2:	20 e0       	ldi	r18, 0x00	; 0
    68b4:	30 e0       	ldi	r19, 0x00	; 0
    68b6:	a9 01       	movw	r20, r18
    68b8:	63 e0       	ldi	r22, 0x03	; 3
    68ba:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <xStopHeatPump_1>
    68be:	90 91 66 09 	lds	r25, 0x0966	; 0x800966 <xStopHeatPump_1+0x1>
    68c2:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopThreeWay ) != pdFALSE )			xTimerStop(xStopThreeWay,1);
    68c6:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <xStopThreeWay>
    68ca:	90 91 4f 0a 	lds	r25, 0x0A4F	; 0x800a4f <xStopThreeWay+0x1>
    68ce:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    68d2:	88 23       	and	r24, r24
    68d4:	81 f0       	breq	.+32     	; 0x68f6 <stop_timers+0x19e>
    68d6:	c1 2c       	mov	r12, r1
    68d8:	d1 2c       	mov	r13, r1
    68da:	76 01       	movw	r14, r12
    68dc:	c3 94       	inc	r12
    68de:	00 e0       	ldi	r16, 0x00	; 0
    68e0:	10 e0       	ldi	r17, 0x00	; 0
    68e2:	20 e0       	ldi	r18, 0x00	; 0
    68e4:	30 e0       	ldi	r19, 0x00	; 0
    68e6:	a9 01       	movw	r20, r18
    68e8:	63 e0       	ldi	r22, 0x03	; 3
    68ea:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <xStopThreeWay>
    68ee:	90 91 4f 0a 	lds	r25, 0x0A4F	; 0x800a4f <xStopThreeWay+0x1>
    68f2:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopRevValve_1 ) != pdFALSE )			xTimerStop(xStopRevValve_1,1);
    68f6:	80 91 e8 0a 	lds	r24, 0x0AE8	; 0x800ae8 <xStopRevValve_1>
    68fa:	90 91 e9 0a 	lds	r25, 0x0AE9	; 0x800ae9 <xStopRevValve_1+0x1>
    68fe:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6902:	88 23       	and	r24, r24
    6904:	81 f0       	breq	.+32     	; 0x6926 <stop_timers+0x1ce>
    6906:	c1 2c       	mov	r12, r1
    6908:	d1 2c       	mov	r13, r1
    690a:	76 01       	movw	r14, r12
    690c:	c3 94       	inc	r12
    690e:	00 e0       	ldi	r16, 0x00	; 0
    6910:	10 e0       	ldi	r17, 0x00	; 0
    6912:	20 e0       	ldi	r18, 0x00	; 0
    6914:	30 e0       	ldi	r19, 0x00	; 0
    6916:	a9 01       	movw	r20, r18
    6918:	63 e0       	ldi	r22, 0x03	; 3
    691a:	80 91 e8 0a 	lds	r24, 0x0AE8	; 0x800ae8 <xStopRevValve_1>
    691e:	90 91 e9 0a 	lds	r25, 0x0AE9	; 0x800ae9 <xStopRevValve_1+0x1>
    6922:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopSource_1 ) != pdFALSE )			xTimerStop(xStopSource_1,1);
    6926:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <xStopSource_1>
    692a:	90 91 70 09 	lds	r25, 0x0970	; 0x800970 <xStopSource_1+0x1>
    692e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6932:	88 23       	and	r24, r24
    6934:	81 f0       	breq	.+32     	; 0x6956 <stop_timers+0x1fe>
    6936:	c1 2c       	mov	r12, r1
    6938:	d1 2c       	mov	r13, r1
    693a:	76 01       	movw	r14, r12
    693c:	c3 94       	inc	r12
    693e:	00 e0       	ldi	r16, 0x00	; 0
    6940:	10 e0       	ldi	r17, 0x00	; 0
    6942:	20 e0       	ldi	r18, 0x00	; 0
    6944:	30 e0       	ldi	r19, 0x00	; 0
    6946:	a9 01       	movw	r20, r18
    6948:	63 e0       	ldi	r22, 0x03	; 3
    694a:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <xStopSource_1>
    694e:	90 91 70 09 	lds	r25, 0x0970	; 0x800970 <xStopSource_1+0x1>
    6952:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckErrors_1 ) != pdFALSE )    xTimerStop(xTStartCheckErrors_1,1);
    6956:	80 91 17 0b 	lds	r24, 0x0B17	; 0x800b17 <xTStartCheckErrors_1>
    695a:	90 91 18 0b 	lds	r25, 0x0B18	; 0x800b18 <xTStartCheckErrors_1+0x1>
    695e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6962:	88 23       	and	r24, r24
    6964:	81 f0       	breq	.+32     	; 0x6986 <stop_timers+0x22e>
    6966:	c1 2c       	mov	r12, r1
    6968:	d1 2c       	mov	r13, r1
    696a:	76 01       	movw	r14, r12
    696c:	c3 94       	inc	r12
    696e:	00 e0       	ldi	r16, 0x00	; 0
    6970:	10 e0       	ldi	r17, 0x00	; 0
    6972:	20 e0       	ldi	r18, 0x00	; 0
    6974:	30 e0       	ldi	r19, 0x00	; 0
    6976:	a9 01       	movw	r20, r18
    6978:	63 e0       	ldi	r22, 0x03	; 3
    697a:	80 91 17 0b 	lds	r24, 0x0B17	; 0x800b17 <xTStartCheckErrors_1>
    697e:	90 91 18 0b 	lds	r25, 0x0B18	; 0x800b18 <xTStartCheckErrors_1+0x1>
    6982:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckTrv_1 ) != pdFALSE )       xTimerStop(xTStartCheckTrv_1,1);
    6986:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <xTStartCheckTrv_1>
    698a:	90 91 72 09 	lds	r25, 0x0972	; 0x800972 <xTStartCheckTrv_1+0x1>
    698e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6992:	88 23       	and	r24, r24
    6994:	81 f0       	breq	.+32     	; 0x69b6 <stop_timers+0x25e>
    6996:	c1 2c       	mov	r12, r1
    6998:	d1 2c       	mov	r13, r1
    699a:	76 01       	movw	r14, r12
    699c:	c3 94       	inc	r12
    699e:	00 e0       	ldi	r16, 0x00	; 0
    69a0:	10 e0       	ldi	r17, 0x00	; 0
    69a2:	20 e0       	ldi	r18, 0x00	; 0
    69a4:	30 e0       	ldi	r19, 0x00	; 0
    69a6:	a9 01       	movw	r20, r18
    69a8:	63 e0       	ldi	r22, 0x03	; 3
    69aa:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <xTStartCheckTrv_1>
    69ae:	90 91 72 09 	lds	r25, 0x0972	; 0x800972 <xTStartCheckTrv_1+0x1>
    69b2:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xComutateTrv_1 ) != pdFALSE )          xTimerStop(xComutateTrv_1,1);
    69b6:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <xComutateTrv_1>
    69ba:	90 91 5e 09 	lds	r25, 0x095E	; 0x80095e <xComutateTrv_1+0x1>
    69be:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    69c2:	88 23       	and	r24, r24
    69c4:	09 f4       	brne	.+2      	; 0x69c8 <stop_timers+0x270>
    69c6:	1c c1       	rjmp	.+568    	; 0x6c00 <stop_timers+0x4a8>
    69c8:	c1 2c       	mov	r12, r1
    69ca:	d1 2c       	mov	r13, r1
    69cc:	76 01       	movw	r14, r12
    69ce:	c3 94       	inc	r12
    69d0:	00 e0       	ldi	r16, 0x00	; 0
    69d2:	10 e0       	ldi	r17, 0x00	; 0
    69d4:	20 e0       	ldi	r18, 0x00	; 0
    69d6:	30 e0       	ldi	r19, 0x00	; 0
    69d8:	a9 01       	movw	r20, r18
    69da:	63 e0       	ldi	r22, 0x03	; 3
    69dc:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <xComutateTrv_1>
    69e0:	90 91 5e 09 	lds	r25, 0x095E	; 0x80095e <xComutateTrv_1+0x1>
    69e4:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    69e8:	0b c1       	rjmp	.+534    	; 0x6c00 <stop_timers+0x4a8>
	}
	else if (comp->Index==2)
    69ea:	02 97       	sbiw	r24, 0x02	; 2
    69ec:	09 f0       	breq	.+2      	; 0x69f0 <stop_timers+0x298>
    69ee:	08 c1       	rjmp	.+528    	; 0x6c00 <stop_timers+0x4a8>
	{
		if( xTimerIsTimerActive( xStartCompressor_2 ) != pdFALSE )      xTimerStop(xStartCompressor_2,1);
    69f0:	80 91 08 0b 	lds	r24, 0x0B08	; 0x800b08 <xStartCompressor_2>
    69f4:	90 91 09 0b 	lds	r25, 0x0B09	; 0x800b09 <xStartCompressor_2+0x1>
    69f8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    69fc:	88 23       	and	r24, r24
    69fe:	81 f0       	breq	.+32     	; 0x6a20 <stop_timers+0x2c8>
    6a00:	c1 2c       	mov	r12, r1
    6a02:	d1 2c       	mov	r13, r1
    6a04:	76 01       	movw	r14, r12
    6a06:	c3 94       	inc	r12
    6a08:	00 e0       	ldi	r16, 0x00	; 0
    6a0a:	10 e0       	ldi	r17, 0x00	; 0
    6a0c:	20 e0       	ldi	r18, 0x00	; 0
    6a0e:	30 e0       	ldi	r19, 0x00	; 0
    6a10:	a9 01       	movw	r20, r18
    6a12:	63 e0       	ldi	r22, 0x03	; 3
    6a14:	80 91 08 0b 	lds	r24, 0x0B08	; 0x800b08 <xStartCompressor_2>
    6a18:	90 91 09 0b 	lds	r25, 0x0B09	; 0x800b09 <xStartCompressor_2+0x1>
    6a1c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartHeatPump_2 ) != pdFALSE )        xTimerStop(xStartHeatPump_2,1);
    6a20:	80 91 52 0a 	lds	r24, 0x0A52	; 0x800a52 <xStartHeatPump_2>
    6a24:	90 91 53 0a 	lds	r25, 0x0A53	; 0x800a53 <xStartHeatPump_2+0x1>
    6a28:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6a2c:	88 23       	and	r24, r24
    6a2e:	81 f0       	breq	.+32     	; 0x6a50 <stop_timers+0x2f8>
    6a30:	c1 2c       	mov	r12, r1
    6a32:	d1 2c       	mov	r13, r1
    6a34:	76 01       	movw	r14, r12
    6a36:	c3 94       	inc	r12
    6a38:	00 e0       	ldi	r16, 0x00	; 0
    6a3a:	10 e0       	ldi	r17, 0x00	; 0
    6a3c:	20 e0       	ldi	r18, 0x00	; 0
    6a3e:	30 e0       	ldi	r19, 0x00	; 0
    6a40:	a9 01       	movw	r20, r18
    6a42:	63 e0       	ldi	r22, 0x03	; 3
    6a44:	80 91 52 0a 	lds	r24, 0x0A52	; 0x800a52 <xStartHeatPump_2>
    6a48:	90 91 53 0a 	lds	r25, 0x0A53	; 0x800a53 <xStartHeatPump_2+0x1>
    6a4c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartRevValve_2 ) != pdFALSE )		xTimerStop(xStartRevValve_2,1);
    6a50:	80 91 e0 0a 	lds	r24, 0x0AE0	; 0x800ae0 <xStartRevValve_2>
    6a54:	90 91 e1 0a 	lds	r25, 0x0AE1	; 0x800ae1 <xStartRevValve_2+0x1>
    6a58:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6a5c:	88 23       	and	r24, r24
    6a5e:	81 f0       	breq	.+32     	; 0x6a80 <stop_timers+0x328>
    6a60:	c1 2c       	mov	r12, r1
    6a62:	d1 2c       	mov	r13, r1
    6a64:	76 01       	movw	r14, r12
    6a66:	c3 94       	inc	r12
    6a68:	00 e0       	ldi	r16, 0x00	; 0
    6a6a:	10 e0       	ldi	r17, 0x00	; 0
    6a6c:	20 e0       	ldi	r18, 0x00	; 0
    6a6e:	30 e0       	ldi	r19, 0x00	; 0
    6a70:	a9 01       	movw	r20, r18
    6a72:	63 e0       	ldi	r22, 0x03	; 3
    6a74:	80 91 e0 0a 	lds	r24, 0x0AE0	; 0x800ae0 <xStartRevValve_2>
    6a78:	90 91 e1 0a 	lds	r25, 0x0AE1	; 0x800ae1 <xStartRevValve_2+0x1>
    6a7c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevOne_2_time ) != pdFALSE )    xTimerStop(xSwitchRevOne_2_time,1);
    6a80:	80 91 28 0b 	lds	r24, 0x0B28	; 0x800b28 <xSwitchRevOne_2_time>
    6a84:	90 91 29 0b 	lds	r25, 0x0B29	; 0x800b29 <xSwitchRevOne_2_time+0x1>
    6a88:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6a8c:	88 23       	and	r24, r24
    6a8e:	81 f0       	breq	.+32     	; 0x6ab0 <stop_timers+0x358>
    6a90:	c1 2c       	mov	r12, r1
    6a92:	d1 2c       	mov	r13, r1
    6a94:	76 01       	movw	r14, r12
    6a96:	c3 94       	inc	r12
    6a98:	00 e0       	ldi	r16, 0x00	; 0
    6a9a:	10 e0       	ldi	r17, 0x00	; 0
    6a9c:	20 e0       	ldi	r18, 0x00	; 0
    6a9e:	30 e0       	ldi	r19, 0x00	; 0
    6aa0:	a9 01       	movw	r20, r18
    6aa2:	63 e0       	ldi	r22, 0x03	; 3
    6aa4:	80 91 28 0b 	lds	r24, 0x0B28	; 0x800b28 <xSwitchRevOne_2_time>
    6aa8:	90 91 29 0b 	lds	r25, 0x0B29	; 0x800b29 <xSwitchRevOne_2_time+0x1>
    6aac:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevTwo_2_time ) != pdFALSE )	xTimerStop(xSwitchRevTwo_1_time,1);
    6ab0:	80 91 0d 0b 	lds	r24, 0x0B0D	; 0x800b0d <xSwitchRevTwo_2_time>
    6ab4:	90 91 0e 0b 	lds	r25, 0x0B0E	; 0x800b0e <xSwitchRevTwo_2_time+0x1>
    6ab8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6abc:	88 23       	and	r24, r24
    6abe:	81 f0       	breq	.+32     	; 0x6ae0 <stop_timers+0x388>
    6ac0:	c1 2c       	mov	r12, r1
    6ac2:	d1 2c       	mov	r13, r1
    6ac4:	76 01       	movw	r14, r12
    6ac6:	c3 94       	inc	r12
    6ac8:	00 e0       	ldi	r16, 0x00	; 0
    6aca:	10 e0       	ldi	r17, 0x00	; 0
    6acc:	20 e0       	ldi	r18, 0x00	; 0
    6ace:	30 e0       	ldi	r19, 0x00	; 0
    6ad0:	a9 01       	movw	r20, r18
    6ad2:	63 e0       	ldi	r22, 0x03	; 3
    6ad4:	80 91 f2 0a 	lds	r24, 0x0AF2	; 0x800af2 <xSwitchRevTwo_1_time>
    6ad8:	90 91 f3 0a 	lds	r25, 0x0AF3	; 0x800af3 <xSwitchRevTwo_1_time+0x1>
    6adc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopHeatPump_2 ) != pdFALSE )			xTimerStop(xStopHeatPump_2,1);
    6ae0:	80 91 e6 0a 	lds	r24, 0x0AE6	; 0x800ae6 <xStopHeatPump_2>
    6ae4:	90 91 e7 0a 	lds	r25, 0x0AE7	; 0x800ae7 <xStopHeatPump_2+0x1>
    6ae8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6aec:	88 23       	and	r24, r24
    6aee:	81 f0       	breq	.+32     	; 0x6b10 <stop_timers+0x3b8>
    6af0:	c1 2c       	mov	r12, r1
    6af2:	d1 2c       	mov	r13, r1
    6af4:	76 01       	movw	r14, r12
    6af6:	c3 94       	inc	r12
    6af8:	00 e0       	ldi	r16, 0x00	; 0
    6afa:	10 e0       	ldi	r17, 0x00	; 0
    6afc:	20 e0       	ldi	r18, 0x00	; 0
    6afe:	30 e0       	ldi	r19, 0x00	; 0
    6b00:	a9 01       	movw	r20, r18
    6b02:	63 e0       	ldi	r22, 0x03	; 3
    6b04:	80 91 e6 0a 	lds	r24, 0x0AE6	; 0x800ae6 <xStopHeatPump_2>
    6b08:	90 91 e7 0a 	lds	r25, 0x0AE7	; 0x800ae7 <xStopHeatPump_2+0x1>
    6b0c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopRevValve_2 ) != pdFALSE )			xTimerStop(xStopRevValve_2,1);
    6b10:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <xStopRevValve_2>
    6b14:	90 91 6e 09 	lds	r25, 0x096E	; 0x80096e <xStopRevValve_2+0x1>
    6b18:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6b1c:	88 23       	and	r24, r24
    6b1e:	81 f0       	breq	.+32     	; 0x6b40 <stop_timers+0x3e8>
    6b20:	c1 2c       	mov	r12, r1
    6b22:	d1 2c       	mov	r13, r1
    6b24:	76 01       	movw	r14, r12
    6b26:	c3 94       	inc	r12
    6b28:	00 e0       	ldi	r16, 0x00	; 0
    6b2a:	10 e0       	ldi	r17, 0x00	; 0
    6b2c:	20 e0       	ldi	r18, 0x00	; 0
    6b2e:	30 e0       	ldi	r19, 0x00	; 0
    6b30:	a9 01       	movw	r20, r18
    6b32:	63 e0       	ldi	r22, 0x03	; 3
    6b34:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <xStopRevValve_2>
    6b38:	90 91 6e 09 	lds	r25, 0x096E	; 0x80096e <xStopRevValve_2+0x1>
    6b3c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopSource_2 ) != pdFALSE )			xTimerStop(xStopSource_2,1);
    6b40:	80 91 d6 0a 	lds	r24, 0x0AD6	; 0x800ad6 <xStopSource_2>
    6b44:	90 91 d7 0a 	lds	r25, 0x0AD7	; 0x800ad7 <xStopSource_2+0x1>
    6b48:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6b4c:	88 23       	and	r24, r24
    6b4e:	81 f0       	breq	.+32     	; 0x6b70 <stop_timers+0x418>
    6b50:	c1 2c       	mov	r12, r1
    6b52:	d1 2c       	mov	r13, r1
    6b54:	76 01       	movw	r14, r12
    6b56:	c3 94       	inc	r12
    6b58:	00 e0       	ldi	r16, 0x00	; 0
    6b5a:	10 e0       	ldi	r17, 0x00	; 0
    6b5c:	20 e0       	ldi	r18, 0x00	; 0
    6b5e:	30 e0       	ldi	r19, 0x00	; 0
    6b60:	a9 01       	movw	r20, r18
    6b62:	63 e0       	ldi	r22, 0x03	; 3
    6b64:	80 91 d6 0a 	lds	r24, 0x0AD6	; 0x800ad6 <xStopSource_2>
    6b68:	90 91 d7 0a 	lds	r25, 0x0AD7	; 0x800ad7 <xStopSource_2+0x1>
    6b6c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckErrors_2 ) != pdFALSE )    xTimerStop(xTStartCheckErrors_2,1);
    6b70:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <xTStartCheckErrors_2>
    6b74:	90 91 60 09 	lds	r25, 0x0960	; 0x800960 <xTStartCheckErrors_2+0x1>
    6b78:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6b7c:	88 23       	and	r24, r24
    6b7e:	81 f0       	breq	.+32     	; 0x6ba0 <stop_timers+0x448>
    6b80:	c1 2c       	mov	r12, r1
    6b82:	d1 2c       	mov	r13, r1
    6b84:	76 01       	movw	r14, r12
    6b86:	c3 94       	inc	r12
    6b88:	00 e0       	ldi	r16, 0x00	; 0
    6b8a:	10 e0       	ldi	r17, 0x00	; 0
    6b8c:	20 e0       	ldi	r18, 0x00	; 0
    6b8e:	30 e0       	ldi	r19, 0x00	; 0
    6b90:	a9 01       	movw	r20, r18
    6b92:	63 e0       	ldi	r22, 0x03	; 3
    6b94:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <xTStartCheckErrors_2>
    6b98:	90 91 60 09 	lds	r25, 0x0960	; 0x800960 <xTStartCheckErrors_2+0x1>
    6b9c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckTrv_2 ) != pdFALSE )       xTimerStop(xTStartCheckTrv_2,1);
    6ba0:	80 91 4c 0a 	lds	r24, 0x0A4C	; 0x800a4c <xTStartCheckTrv_2>
    6ba4:	90 91 4d 0a 	lds	r25, 0x0A4D	; 0x800a4d <xTStartCheckTrv_2+0x1>
    6ba8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6bac:	88 23       	and	r24, r24
    6bae:	81 f0       	breq	.+32     	; 0x6bd0 <stop_timers+0x478>
    6bb0:	c1 2c       	mov	r12, r1
    6bb2:	d1 2c       	mov	r13, r1
    6bb4:	76 01       	movw	r14, r12
    6bb6:	c3 94       	inc	r12
    6bb8:	00 e0       	ldi	r16, 0x00	; 0
    6bba:	10 e0       	ldi	r17, 0x00	; 0
    6bbc:	20 e0       	ldi	r18, 0x00	; 0
    6bbe:	30 e0       	ldi	r19, 0x00	; 0
    6bc0:	a9 01       	movw	r20, r18
    6bc2:	63 e0       	ldi	r22, 0x03	; 3
    6bc4:	80 91 4c 0a 	lds	r24, 0x0A4C	; 0x800a4c <xTStartCheckTrv_2>
    6bc8:	90 91 4d 0a 	lds	r25, 0x0A4D	; 0x800a4d <xTStartCheckTrv_2+0x1>
    6bcc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xComutateTrv_2 ) != pdFALSE )          xTimerStop(xComutateTrv_2,1);
    6bd0:	80 91 58 0a 	lds	r24, 0x0A58	; 0x800a58 <xComutateTrv_2>
    6bd4:	90 91 59 0a 	lds	r25, 0x0A59	; 0x800a59 <xComutateTrv_2+0x1>
    6bd8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6bdc:	88 23       	and	r24, r24
    6bde:	81 f0       	breq	.+32     	; 0x6c00 <stop_timers+0x4a8>
    6be0:	c1 2c       	mov	r12, r1
    6be2:	d1 2c       	mov	r13, r1
    6be4:	76 01       	movw	r14, r12
    6be6:	c3 94       	inc	r12
    6be8:	00 e0       	ldi	r16, 0x00	; 0
    6bea:	10 e0       	ldi	r17, 0x00	; 0
    6bec:	20 e0       	ldi	r18, 0x00	; 0
    6bee:	30 e0       	ldi	r19, 0x00	; 0
    6bf0:	a9 01       	movw	r20, r18
    6bf2:	63 e0       	ldi	r22, 0x03	; 3
    6bf4:	80 91 58 0a 	lds	r24, 0x0A58	; 0x800a58 <xComutateTrv_2>
    6bf8:	90 91 59 0a 	lds	r25, 0x0A59	; 0x800a59 <xComutateTrv_2+0x1>
    6bfc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
}
    6c00:	1f 91       	pop	r17
    6c02:	0f 91       	pop	r16
    6c04:	ff 90       	pop	r15
    6c06:	ef 90       	pop	r14
    6c08:	df 90       	pop	r13
    6c0a:	cf 90       	pop	r12
    6c0c:	08 95       	ret

00006c0e <Comp_Stop>:
	}
	
	
}
//-------------------------------------------------------------------------Stop mod
void Comp_Stop(xCompressor *comp){
    6c0e:	cf 92       	push	r12
    6c10:	df 92       	push	r13
    6c12:	ef 92       	push	r14
    6c14:	ff 92       	push	r15
    6c16:	0f 93       	push	r16
    6c18:	1f 93       	push	r17
    6c1a:	cf 93       	push	r28
    6c1c:	df 93       	push	r29
    6c1e:	ec 01       	movw	r28, r24
	static time_t time_count_1;
	static time_t time_count_2;
	
	//xSerialxPrintf(&xSerial3Port,"StopCompressor\r\n");
	stop_timers(comp);
    6c20:	9b dd       	rcall	.-1226   	; 0x6758 <stop_timers>
	comp->Cooling=comp->heatingWater=comp->Heating=false;
    6c22:	1a 82       	std	Y+2, r1	; 0x02
    6c24:	1c 82       	std	Y+4, r1	; 0x04
    6c26:	1b 82       	std	Y+3, r1	; 0x03
    comp->switchToMode=true;
    6c28:	81 e0       	ldi	r24, 0x01	; 1
    6c2a:	88 83       	st	Y, r24
	if(comp->Index == 1)
    6c2c:	fe 01       	movw	r30, r28
    6c2e:	ee 58       	subi	r30, 0x8E	; 142
    6c30:	ff 4f       	sbci	r31, 0xFF	; 255
    6c32:	80 81       	ld	r24, Z
    6c34:	91 81       	ldd	r25, Z+1	; 0x01
    6c36:	81 30       	cpi	r24, 0x01	; 1
    6c38:	91 05       	cpc	r25, r1
    6c3a:	09 f0       	breq	.+2      	; 0x6c3e <Comp_Stop+0x30>
    6c3c:	6c c0       	rjmp	.+216    	; 0x6d16 <Comp_Stop+0x108>
	{
		if(PIN_COMPRESSOR_1 > 0)
    6c3e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6c42:	85 ff       	sbrs	r24, 5
    6c44:	57 c0       	rjmp	.+174    	; 0x6cf4 <Comp_Stop+0xe6>
		{
			STOP_COMPRESSOR_1;
    6c46:	e2 e0       	ldi	r30, 0x02	; 2
    6c48:	f1 e0       	ldi	r31, 0x01	; 1
    6c4a:	80 81       	ld	r24, Z
    6c4c:	8f 7d       	andi	r24, 0xDF	; 223
    6c4e:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopCompressor_1\r\n");
    6c50:	87 eb       	ldi	r24, 0xB7	; 183
    6c52:	95 e0       	ldi	r25, 0x05	; 5
    6c54:	9f 93       	push	r25
    6c56:	8f 93       	push	r24
    6c58:	86 e1       	ldi	r24, 0x16	; 22
    6c5a:	98 e0       	ldi	r25, 0x08	; 8
    6c5c:	9f 93       	push	r25
    6c5e:	8f 93       	push	r24
    6c60:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->checkErrors =false;
    6c64:	1d 82       	std	Y+5, r1	; 0x05
			
			comp->checkTrv =false;
    6c66:	19 82       	std	Y+1, r1	; 0x01
			comp->compOn=0;
    6c68:	1b 86       	std	Y+11, r1	; 0x0b
			time_count_1+= difftime(time(&current_time), timeStartComp_1);
    6c6a:	c0 90 67 09 	lds	r12, 0x0967	; 0x800967 <timeStartComp_1>
    6c6e:	d0 90 68 09 	lds	r13, 0x0968	; 0x800968 <timeStartComp_1+0x1>
    6c72:	e0 90 69 09 	lds	r14, 0x0969	; 0x800969 <timeStartComp_1+0x2>
    6c76:	f0 90 6a 09 	lds	r15, 0x096A	; 0x80096a <timeStartComp_1+0x3>
    6c7a:	83 e7       	ldi	r24, 0x73	; 115
    6c7c:	99 e0       	ldi	r25, 0x09	; 9
    6c7e:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6c82:	a7 01       	movw	r20, r14
    6c84:	96 01       	movw	r18, r12
    6c86:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    6c8a:	c0 90 b9 07 	lds	r12, 0x07B9	; 0x8007b9 <time_count_1.3196>
    6c8e:	d0 90 ba 07 	lds	r13, 0x07BA	; 0x8007ba <time_count_1.3196+0x1>
    6c92:	e0 90 bb 07 	lds	r14, 0x07BB	; 0x8007bb <time_count_1.3196+0x2>
    6c96:	f0 90 bc 07 	lds	r15, 0x07BC	; 0x8007bc <time_count_1.3196+0x3>
    6c9a:	dc 01       	movw	r26, r24
    6c9c:	cb 01       	movw	r24, r22
    6c9e:	8c 0d       	add	r24, r12
    6ca0:	9d 1d       	adc	r25, r13
    6ca2:	ae 1d       	adc	r26, r14
    6ca4:	bf 1d       	adc	r27, r15
    6ca6:	80 93 b9 07 	sts	0x07B9, r24	; 0x8007b9 <time_count_1.3196>
    6caa:	90 93 ba 07 	sts	0x07BA, r25	; 0x8007ba <time_count_1.3196+0x1>
    6cae:	a0 93 bb 07 	sts	0x07BB, r26	; 0x8007bb <time_count_1.3196+0x2>
    6cb2:	b0 93 bc 07 	sts	0x07BC, r27	; 0x8007bc <time_count_1.3196+0x3>
			
			//xSerialxPrintf(&xSerial3Port,"time_Compressor_=%d\r\n",time_count_1);
			if(time_count_1>ONE_HOUR){EEpromData.time_compressor_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    6cb6:	0f 90       	pop	r0
    6cb8:	0f 90       	pop	r0
    6cba:	0f 90       	pop	r0
    6cbc:	0f 90       	pop	r0
    6cbe:	81 31       	cpi	r24, 0x11	; 17
    6cc0:	9e 40       	sbci	r25, 0x0E	; 14
    6cc2:	a1 05       	cpc	r26, r1
    6cc4:	b1 05       	cpc	r27, r1
    6cc6:	b0 f0       	brcs	.+44     	; 0x6cf4 <Comp_Stop+0xe6>
    6cc8:	e8 e7       	ldi	r30, 0x78	; 120
    6cca:	f9 e0       	ldi	r31, 0x09	; 9
    6ccc:	82 ad       	ldd	r24, Z+58	; 0x3a
    6cce:	93 ad       	ldd	r25, Z+59	; 0x3b
    6cd0:	01 96       	adiw	r24, 0x01	; 1
    6cd2:	93 af       	std	Z+59, r25	; 0x3b
    6cd4:	82 af       	std	Z+58, r24	; 0x3a
    6cd6:	40 e6       	ldi	r20, 0x60	; 96
    6cd8:	50 e0       	ldi	r21, 0x00	; 0
    6cda:	60 e0       	ldi	r22, 0x00	; 0
    6cdc:	70 e0       	ldi	r23, 0x00	; 0
    6cde:	cf 01       	movw	r24, r30
    6ce0:	0e 94 1c 5b 	call	0xb638	; 0xb638 <eeprom_update_block>
    6ce4:	10 92 b9 07 	sts	0x07B9, r1	; 0x8007b9 <time_count_1.3196>
    6ce8:	10 92 ba 07 	sts	0x07BA, r1	; 0x8007ba <time_count_1.3196+0x1>
    6cec:	10 92 bb 07 	sts	0x07BB, r1	; 0x8007bb <time_count_1.3196+0x2>
    6cf0:	10 92 bc 07 	sts	0x07BC, r1	; 0x8007bc <time_count_1.3196+0x3>
			
		}
		xTimerStart(xSwitchRevOne_1_time, 0);
    6cf4:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    6cf8:	9b 01       	movw	r18, r22
    6cfa:	ac 01       	movw	r20, r24
    6cfc:	c1 2c       	mov	r12, r1
    6cfe:	d1 2c       	mov	r13, r1
    6d00:	76 01       	movw	r14, r12
    6d02:	00 e0       	ldi	r16, 0x00	; 0
    6d04:	10 e0       	ldi	r17, 0x00	; 0
    6d06:	61 e0       	ldi	r22, 0x01	; 1
    6d08:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <xSwitchRevOne_1_time>
    6d0c:	90 91 6c 09 	lds	r25, 0x096C	; 0x80096c <xSwitchRevOne_1_time+0x1>
    6d10:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    6d14:	6f c0       	rjmp	.+222    	; 0x6df4 <Comp_Stop+0x1e6>
		
	}
	else if(comp->Index == 2)
    6d16:	02 97       	sbiw	r24, 0x02	; 2
    6d18:	09 f0       	breq	.+2      	; 0x6d1c <Comp_Stop+0x10e>
    6d1a:	6c c0       	rjmp	.+216    	; 0x6df4 <Comp_Stop+0x1e6>
	{
		if(PIN_COMPRESSOR_2 > 0)
    6d1c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6d20:	86 ff       	sbrs	r24, 6
    6d22:	58 c0       	rjmp	.+176    	; 0x6dd4 <Comp_Stop+0x1c6>
		{
			
			STOP_COMPRESSOR_2;
    6d24:	e2 e0       	ldi	r30, 0x02	; 2
    6d26:	f1 e0       	ldi	r31, 0x01	; 1
    6d28:	80 81       	ld	r24, Z
    6d2a:	8f 7b       	andi	r24, 0xBF	; 191
    6d2c:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopCompressor_2\r\n");
    6d2e:	8a ec       	ldi	r24, 0xCA	; 202
    6d30:	95 e0       	ldi	r25, 0x05	; 5
    6d32:	9f 93       	push	r25
    6d34:	8f 93       	push	r24
    6d36:	86 e1       	ldi	r24, 0x16	; 22
    6d38:	98 e0       	ldi	r25, 0x08	; 8
    6d3a:	9f 93       	push	r25
    6d3c:	8f 93       	push	r24
    6d3e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->checkErrors =false;
    6d42:	1d 82       	std	Y+5, r1	; 0x05
			//comp->switchToMode=true;
			comp->checkTrv =false;
    6d44:	19 82       	std	Y+1, r1	; 0x01
			comp->compOn=0;
    6d46:	1b 86       	std	Y+11, r1	; 0x0b
			time_count_2+= difftime(time(&current_time), timeStartComp_2);
    6d48:	c0 90 19 0b 	lds	r12, 0x0B19	; 0x800b19 <timeStartComp_2>
    6d4c:	d0 90 1a 0b 	lds	r13, 0x0B1A	; 0x800b1a <timeStartComp_2+0x1>
    6d50:	e0 90 1b 0b 	lds	r14, 0x0B1B	; 0x800b1b <timeStartComp_2+0x2>
    6d54:	f0 90 1c 0b 	lds	r15, 0x0B1C	; 0x800b1c <timeStartComp_2+0x3>
    6d58:	83 e7       	ldi	r24, 0x73	; 115
    6d5a:	99 e0       	ldi	r25, 0x09	; 9
    6d5c:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6d60:	a7 01       	movw	r20, r14
    6d62:	96 01       	movw	r18, r12
    6d64:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    6d68:	c0 90 b5 07 	lds	r12, 0x07B5	; 0x8007b5 <time_count_2.3197>
    6d6c:	d0 90 b6 07 	lds	r13, 0x07B6	; 0x8007b6 <time_count_2.3197+0x1>
    6d70:	e0 90 b7 07 	lds	r14, 0x07B7	; 0x8007b7 <time_count_2.3197+0x2>
    6d74:	f0 90 b8 07 	lds	r15, 0x07B8	; 0x8007b8 <time_count_2.3197+0x3>
    6d78:	dc 01       	movw	r26, r24
    6d7a:	cb 01       	movw	r24, r22
    6d7c:	8c 0d       	add	r24, r12
    6d7e:	9d 1d       	adc	r25, r13
    6d80:	ae 1d       	adc	r26, r14
    6d82:	bf 1d       	adc	r27, r15
    6d84:	80 93 b5 07 	sts	0x07B5, r24	; 0x8007b5 <time_count_2.3197>
    6d88:	90 93 b6 07 	sts	0x07B6, r25	; 0x8007b6 <time_count_2.3197+0x1>
    6d8c:	a0 93 b7 07 	sts	0x07B7, r26	; 0x8007b7 <time_count_2.3197+0x2>
    6d90:	b0 93 b8 07 	sts	0x07B8, r27	; 0x8007b8 <time_count_2.3197+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_compressor_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    6d94:	0f 90       	pop	r0
    6d96:	0f 90       	pop	r0
    6d98:	0f 90       	pop	r0
    6d9a:	0f 90       	pop	r0
    6d9c:	81 31       	cpi	r24, 0x11	; 17
    6d9e:	9e 40       	sbci	r25, 0x0E	; 14
    6da0:	a1 05       	cpc	r26, r1
    6da2:	b1 05       	cpc	r27, r1
    6da4:	b8 f0       	brcs	.+46     	; 0x6dd4 <Comp_Stop+0x1c6>
    6da6:	e8 ec       	ldi	r30, 0xC8	; 200
    6da8:	f9 e0       	ldi	r31, 0x09	; 9
    6daa:	80 81       	ld	r24, Z
    6dac:	91 81       	ldd	r25, Z+1	; 0x01
    6dae:	01 96       	adiw	r24, 0x01	; 1
    6db0:	91 83       	std	Z+1, r25	; 0x01
    6db2:	80 83       	st	Z, r24
    6db4:	40 e6       	ldi	r20, 0x60	; 96
    6db6:	50 e0       	ldi	r21, 0x00	; 0
    6db8:	60 e0       	ldi	r22, 0x00	; 0
    6dba:	70 e0       	ldi	r23, 0x00	; 0
    6dbc:	88 e7       	ldi	r24, 0x78	; 120
    6dbe:	99 e0       	ldi	r25, 0x09	; 9
    6dc0:	0e 94 1c 5b 	call	0xb638	; 0xb638 <eeprom_update_block>
    6dc4:	10 92 b5 07 	sts	0x07B5, r1	; 0x8007b5 <time_count_2.3197>
    6dc8:	10 92 b6 07 	sts	0x07B6, r1	; 0x8007b6 <time_count_2.3197+0x1>
    6dcc:	10 92 b7 07 	sts	0x07B7, r1	; 0x8007b7 <time_count_2.3197+0x2>
    6dd0:	10 92 b8 07 	sts	0x07B8, r1	; 0x8007b8 <time_count_2.3197+0x3>
			
		}
		xTimerStart(xSwitchRevOne_2_time, 0);
    6dd4:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    6dd8:	9b 01       	movw	r18, r22
    6dda:	ac 01       	movw	r20, r24
    6ddc:	c1 2c       	mov	r12, r1
    6dde:	d1 2c       	mov	r13, r1
    6de0:	76 01       	movw	r14, r12
    6de2:	00 e0       	ldi	r16, 0x00	; 0
    6de4:	10 e0       	ldi	r17, 0x00	; 0
    6de6:	61 e0       	ldi	r22, 0x01	; 1
    6de8:	80 91 28 0b 	lds	r24, 0x0B28	; 0x800b28 <xSwitchRevOne_2_time>
    6dec:	90 91 29 0b 	lds	r25, 0x0B29	; 0x800b29 <xSwitchRevOne_2_time+0x1>
    6df0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
	
	
}
    6df4:	df 91       	pop	r29
    6df6:	cf 91       	pop	r28
    6df8:	1f 91       	pop	r17
    6dfa:	0f 91       	pop	r16
    6dfc:	ff 90       	pop	r15
    6dfe:	ef 90       	pop	r14
    6e00:	df 90       	pop	r13
    6e02:	cf 90       	pop	r12
    6e04:	08 95       	ret

00006e06 <goToMode>:
	else return OFF;

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void goToMode(xCompressor *comp)
{   //calibration(comp);
    6e06:	cf 93       	push	r28
    6e08:	df 93       	push	r29
    6e0a:	ec 01       	movw	r28, r24
	stop_timers(comp);
    6e0c:	a5 dc       	rcall	.-1718   	; 0x6758 <stop_timers>
	startTrvTimer(comp);
    6e0e:	ce 01       	movw	r24, r28
    6e10:	0e 94 2e 4f 	call	0x9e5c	; 0x9e5c <startTrvTimer>
	//comp->switchToMode=true;
	
	StarSoursePump(comp);
    6e14:	ce 01       	movw	r24, r28
    6e16:	98 db       	rcall	.-2256   	; 0x6548 <StarSoursePump>
	//Comp_1.Steps = Fuzzy(&Comp_1,EEpromData.trv_corection_1);
	
}
    6e18:	df 91       	pop	r29
    6e1a:	cf 91       	pop	r28
    6e1c:	08 95       	ret

00006e1e <mod_pump>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void mod_pump( xCompressor *comp,xEEdata* eeData){
    6e1e:	2f 92       	push	r2
    6e20:	3f 92       	push	r3
    6e22:	4f 92       	push	r4
    6e24:	5f 92       	push	r5
    6e26:	6f 92       	push	r6
    6e28:	7f 92       	push	r7
    6e2a:	8f 92       	push	r8
    6e2c:	9f 92       	push	r9
    6e2e:	af 92       	push	r10
    6e30:	bf 92       	push	r11
    6e32:	cf 92       	push	r12
    6e34:	df 92       	push	r13
    6e36:	ef 92       	push	r14
    6e38:	ff 92       	push	r15
    6e3a:	1f 93       	push	r17
    6e3c:	cf 93       	push	r28
    6e3e:	df 93       	push	r29
    6e40:	ec 01       	movw	r28, r24
    6e42:	1b 01       	movw	r2, r22

	uint8_t temp;
	temp = selmode(&EEpromData);
    6e44:	88 e7       	ldi	r24, 0x78	; 120
    6e46:	99 e0       	ldi	r25, 0x09	; 9
    6e48:	5e dc       	rcall	.-1860   	; 0x6706 <selmode>
    6e4a:	18 2f       	mov	r17, r24
	if(temp!=comp->modeOfPump ){comp->modeOfPump=temp; Comp_Stop(comp);}
    6e4c:	88 89       	ldd	r24, Y+16	; 0x10
    6e4e:	18 17       	cp	r17, r24
    6e50:	19 f0       	breq	.+6      	; 0x6e58 <mod_pump+0x3a>
    6e52:	18 8b       	std	Y+16, r17	; 0x10
    6e54:	ce 01       	movw	r24, r28
    6e56:	db de       	rcall	.-586    	; 0x6c0e <Comp_Stop>

	switch(temp){
    6e58:	13 30       	cpi	r17, 0x03	; 3
    6e5a:	09 f4       	brne	.+2      	; 0x6e5e <mod_pump+0x40>
    6e5c:	c8 c0       	rjmp	.+400    	; 0x6fee <mod_pump+0x1d0>
    6e5e:	30 f4       	brcc	.+12     	; 0x6e6c <mod_pump+0x4e>
    6e60:	11 30       	cpi	r17, 0x01	; 1
    6e62:	59 f0       	breq	.+22     	; 0x6e7a <mod_pump+0x5c>
    6e64:	12 30       	cpi	r17, 0x02	; 2
    6e66:	09 f4       	brne	.+2      	; 0x6e6a <mod_pump+0x4c>
    6e68:	6a c0       	rjmp	.+212    	; 0x6f3e <mod_pump+0x120>
    6e6a:	14 c5       	rjmp	.+2600   	; 0x7894 <mod_pump+0xa76>
    6e6c:	14 30       	cpi	r17, 0x04	; 4
    6e6e:	09 f4       	brne	.+2      	; 0x6e72 <mod_pump+0x54>
    6e70:	18 c1       	rjmp	.+560    	; 0x70a2 <mod_pump+0x284>
    6e72:	15 30       	cpi	r17, 0x05	; 5
    6e74:	09 f4       	brne	.+2      	; 0x6e78 <mod_pump+0x5a>
    6e76:	62 c2       	rjmp	.+1220   	; 0x733c <mod_pump+0x51e>
    6e78:	0d c5       	rjmp	.+2586   	; 0x7894 <mod_pump+0xa76>
		case DHW: {
		if(comp->Index==1){
    6e7a:	fe 01       	movw	r30, r28
    6e7c:	ee 58       	subi	r30, 0x8E	; 142
    6e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    6e80:	80 81       	ld	r24, Z
    6e82:	91 81       	ldd	r25, Z+1	; 0x01
    6e84:	01 97       	sbiw	r24, 0x01	; 1
    6e86:	09 f0       	breq	.+2      	; 0x6e8a <mod_pump+0x6c>
    6e88:	05 c5       	rjmp	.+2570   	; 0x7894 <mod_pump+0xa76>
			if ( comp->Dhw_Temp > eeData->Set_DHW && comp->heatingWater && !comp->switchToMode) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp);}
    6e8a:	8a 88       	ldd	r8, Y+18	; 0x12
    6e8c:	9b 88       	ldd	r9, Y+19	; 0x13
    6e8e:	ac 88       	ldd	r10, Y+20	; 0x14
    6e90:	bd 88       	ldd	r11, Y+21	; 0x15
    6e92:	f1 01       	movw	r30, r2
    6e94:	e3 8c       	ldd	r14, Z+27	; 0x1b
    6e96:	f1 2c       	mov	r15, r1
    6e98:	b7 01       	movw	r22, r14
    6e9a:	0f 2c       	mov	r0, r15
    6e9c:	00 0c       	add	r0, r0
    6e9e:	88 0b       	sbc	r24, r24
    6ea0:	99 0b       	sbc	r25, r25
    6ea2:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    6ea6:	9b 01       	movw	r18, r22
    6ea8:	ac 01       	movw	r20, r24
    6eaa:	c5 01       	movw	r24, r10
    6eac:	b4 01       	movw	r22, r8
    6eae:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    6eb2:	18 16       	cp	r1, r24
    6eb4:	6c f4       	brge	.+26     	; 0x6ed0 <mod_pump+0xb2>
    6eb6:	8c 81       	ldd	r24, Y+4	; 0x04
    6eb8:	88 23       	and	r24, r24
    6eba:	09 f4       	brne	.+2      	; 0x6ebe <mod_pump+0xa0>
    6ebc:	82 c3       	rjmp	.+1796   	; 0x75c2 <mod_pump+0x7a4>
    6ebe:	88 81       	ld	r24, Y
    6ec0:	81 11       	cpse	r24, r1
    6ec2:	e8 c4       	rjmp	.+2512   	; 0x7894 <mod_pump+0xa76>
    6ec4:	1c 82       	std	Y+4, r1	; 0x04
    6ec6:	ce 01       	movw	r24, r28
    6ec8:	a2 de       	rcall	.-700    	; 0x6c0e <Comp_Stop>
    6eca:	ce 01       	movw	r24, r28
    6ecc:	0e 94 66 4f 	call	0x9ecc	; 0x9ecc <stopTrvTimer>
			if ( comp->Dhw_Temp < (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->switchToMode){calibration(comp);Comp_1.error=0; comp->heatingWater=true; goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_Dhw\r\n");}//Start_Dhw();
    6ed0:	f1 01       	movw	r30, r2
    6ed2:	63 8d       	ldd	r22, Z+27	; 0x1b
    6ed4:	70 e0       	ldi	r23, 0x00	; 0
    6ed6:	86 8d       	ldd	r24, Z+30	; 0x1e
    6ed8:	68 1b       	sub	r22, r24
    6eda:	71 09       	sbc	r23, r1
    6edc:	07 2e       	mov	r0, r23
    6ede:	00 0c       	add	r0, r0
    6ee0:	88 0b       	sbc	r24, r24
    6ee2:	99 0b       	sbc	r25, r25
    6ee4:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    6ee8:	9b 01       	movw	r18, r22
    6eea:	ac 01       	movw	r20, r24
    6eec:	6a 89       	ldd	r22, Y+18	; 0x12
    6eee:	7b 89       	ldd	r23, Y+19	; 0x13
    6ef0:	8c 89       	ldd	r24, Y+20	; 0x14
    6ef2:	9d 89       	ldd	r25, Y+21	; 0x15
    6ef4:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    6ef8:	88 23       	and	r24, r24
    6efa:	0c f0       	brlt	.+2      	; 0x6efe <mod_pump+0xe0>
    6efc:	cb c4       	rjmp	.+2454   	; 0x7894 <mod_pump+0xa76>
    6efe:	8c 81       	ldd	r24, Y+4	; 0x04
    6f00:	81 11       	cpse	r24, r1
    6f02:	c8 c4       	rjmp	.+2448   	; 0x7894 <mod_pump+0xa76>
    6f04:	88 81       	ld	r24, Y
    6f06:	81 11       	cpse	r24, r1
    6f08:	c5 c4       	rjmp	.+2442   	; 0x7894 <mod_pump+0xa76>
    6f0a:	ce 01       	movw	r24, r28
    6f0c:	0e 94 b7 51 	call	0xa36e	; 0xa36e <calibration>
    6f10:	10 92 49 0a 	sts	0x0A49, r1	; 0x800a49 <Comp_1+0x71>
    6f14:	10 92 48 0a 	sts	0x0A48, r1	; 0x800a48 <Comp_1+0x70>
    6f18:	81 e0       	ldi	r24, 0x01	; 1
    6f1a:	8c 83       	std	Y+4, r24	; 0x04
    6f1c:	ce 01       	movw	r24, r28
    6f1e:	73 df       	rcall	.-282    	; 0x6e06 <goToMode>
    6f20:	8d ed       	ldi	r24, 0xDD	; 221
    6f22:	95 e0       	ldi	r25, 0x05	; 5
    6f24:	9f 93       	push	r25
    6f26:	8f 93       	push	r24
    6f28:	86 e1       	ldi	r24, 0x16	; 22
    6f2a:	98 e0       	ldi	r25, 0x08	; 8
    6f2c:	9f 93       	push	r25
    6f2e:	8f 93       	push	r24
    6f30:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    6f34:	0f 90       	pop	r0
    6f36:	0f 90       	pop	r0
    6f38:	0f 90       	pop	r0
    6f3a:	0f 90       	pop	r0
    6f3c:	ab c4       	rjmp	.+2390   	; 0x7894 <mod_pump+0xa76>
		
		case HEAT:{
			//xSerialxPrintf(&xSerial3Port,"Set_Heating =%d\r\n,diffHEAT =%d\r\n,Bac_Temp =%f\r\n",eeData->Set_Heating,eeData->diffHEAT,data->Bac_Temp);
			//xSerialxPrintf(&xSerial3Port,"diffHEAT =%d\r\n",eeData->diffHEAT);
			//xSerialxPrintf(&xSerial3Port,"heat mode\r\n");
			if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {comp->Heating=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat\r\n");}
    6f3e:	8e 88       	ldd	r8, Y+22	; 0x16
    6f40:	9f 88       	ldd	r9, Y+23	; 0x17
    6f42:	a8 8c       	ldd	r10, Y+24	; 0x18
    6f44:	b9 8c       	ldd	r11, Y+25	; 0x19
    6f46:	f1 01       	movw	r30, r2
    6f48:	e1 8c       	ldd	r14, Z+25	; 0x19
    6f4a:	f1 2c       	mov	r15, r1
    6f4c:	84 8d       	ldd	r24, Z+28	; 0x1c
    6f4e:	b7 01       	movw	r22, r14
    6f50:	68 1b       	sub	r22, r24
    6f52:	71 09       	sbc	r23, r1
    6f54:	07 2e       	mov	r0, r23
    6f56:	00 0c       	add	r0, r0
    6f58:	88 0b       	sbc	r24, r24
    6f5a:	99 0b       	sbc	r25, r25
    6f5c:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    6f60:	9b 01       	movw	r18, r22
    6f62:	ac 01       	movw	r20, r24
    6f64:	c5 01       	movw	r24, r10
    6f66:	b4 01       	movw	r22, r8
    6f68:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    6f6c:	88 23       	and	r24, r24
    6f6e:	fc f4       	brge	.+62     	; 0x6fae <mod_pump+0x190>
    6f70:	8a 81       	ldd	r24, Y+2	; 0x02
    6f72:	81 11       	cpse	r24, r1
    6f74:	3b c3       	rjmp	.+1654   	; 0x75ec <mod_pump+0x7ce>
    6f76:	88 81       	ld	r24, Y
    6f78:	81 11       	cpse	r24, r1
    6f7a:	8c c4       	rjmp	.+2328   	; 0x7894 <mod_pump+0xa76>
    6f7c:	81 e0       	ldi	r24, 0x01	; 1
    6f7e:	8a 83       	std	Y+2, r24	; 0x02
    6f80:	ce 01       	movw	r24, r28
    6f82:	0e 94 b7 51 	call	0xa36e	; 0xa36e <calibration>
    6f86:	10 92 49 0a 	sts	0x0A49, r1	; 0x800a49 <Comp_1+0x71>
    6f8a:	10 92 48 0a 	sts	0x0A48, r1	; 0x800a48 <Comp_1+0x70>
    6f8e:	ce 01       	movw	r24, r28
    6f90:	3a df       	rcall	.-396    	; 0x6e06 <goToMode>
    6f92:	89 ee       	ldi	r24, 0xE9	; 233
    6f94:	95 e0       	ldi	r25, 0x05	; 5
    6f96:	9f 93       	push	r25
    6f98:	8f 93       	push	r24
    6f9a:	86 e1       	ldi	r24, 0x16	; 22
    6f9c:	98 e0       	ldi	r25, 0x08	; 8
    6f9e:	9f 93       	push	r25
    6fa0:	8f 93       	push	r24
    6fa2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    6fa6:	0f 90       	pop	r0
    6fa8:	0f 90       	pop	r0
    6faa:	0f 90       	pop	r0
    6fac:	0f 90       	pop	r0
			if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    6fae:	f1 01       	movw	r30, r2
    6fb0:	61 8d       	ldd	r22, Z+25	; 0x19
    6fb2:	70 e0       	ldi	r23, 0x00	; 0
    6fb4:	80 e0       	ldi	r24, 0x00	; 0
    6fb6:	90 e0       	ldi	r25, 0x00	; 0
    6fb8:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    6fbc:	9b 01       	movw	r18, r22
    6fbe:	ac 01       	movw	r20, r24
    6fc0:	6e 89       	ldd	r22, Y+22	; 0x16
    6fc2:	7f 89       	ldd	r23, Y+23	; 0x17
    6fc4:	88 8d       	ldd	r24, Y+24	; 0x18
    6fc6:	99 8d       	ldd	r25, Y+25	; 0x19
    6fc8:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    6fcc:	18 16       	cp	r1, r24
    6fce:	0c f0       	brlt	.+2      	; 0x6fd2 <mod_pump+0x1b4>
    6fd0:	61 c4       	rjmp	.+2242   	; 0x7894 <mod_pump+0xa76>
    6fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    6fd4:	88 23       	and	r24, r24
    6fd6:	09 f4       	brne	.+2      	; 0x6fda <mod_pump+0x1bc>
    6fd8:	5d c4       	rjmp	.+2234   	; 0x7894 <mod_pump+0xa76>
    6fda:	88 81       	ld	r24, Y
    6fdc:	81 11       	cpse	r24, r1
    6fde:	5a c4       	rjmp	.+2228   	; 0x7894 <mod_pump+0xa76>
    6fe0:	1a 82       	std	Y+2, r1	; 0x02
    6fe2:	ce 01       	movw	r24, r28
    6fe4:	14 de       	rcall	.-984    	; 0x6c0e <Comp_Stop>
    6fe6:	ce 01       	movw	r24, r28
    6fe8:	0e 94 66 4f 	call	0x9ecc	; 0x9ecc <stopTrvTimer>
    6fec:	53 c4       	rjmp	.+2214   	; 0x7894 <mod_pump+0xa76>
		} break;
		
		case COOL:{
			//xSerialxPrintf(&xSerial3Port,"COOL mode\r\n");
			if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
    6fee:	8e 88       	ldd	r8, Y+22	; 0x16
    6ff0:	9f 88       	ldd	r9, Y+23	; 0x17
    6ff2:	a8 8c       	ldd	r10, Y+24	; 0x18
    6ff4:	b9 8c       	ldd	r11, Y+25	; 0x19
    6ff6:	f1 01       	movw	r30, r2
    6ff8:	e2 8c       	ldd	r14, Z+26	; 0x1a
    6ffa:	f1 2c       	mov	r15, r1
    6ffc:	b7 01       	movw	r22, r14
    6ffe:	0f 2c       	mov	r0, r15
    7000:	00 0c       	add	r0, r0
    7002:	88 0b       	sbc	r24, r24
    7004:	99 0b       	sbc	r25, r25
    7006:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    700a:	9b 01       	movw	r18, r22
    700c:	ac 01       	movw	r20, r24
    700e:	c5 01       	movw	r24, r10
    7010:	b4 01       	movw	r22, r8
    7012:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    7016:	88 23       	and	r24, r24
    7018:	6c f4       	brge	.+26     	; 0x7034 <mod_pump+0x216>
    701a:	8b 81       	ldd	r24, Y+3	; 0x03
    701c:	88 23       	and	r24, r24
    701e:	09 f4       	brne	.+2      	; 0x7022 <mod_pump+0x204>
    7020:	f5 c2       	rjmp	.+1514   	; 0x760c <mod_pump+0x7ee>
    7022:	88 81       	ld	r24, Y
    7024:	81 11       	cpse	r24, r1
    7026:	36 c4       	rjmp	.+2156   	; 0x7894 <mod_pump+0xa76>
    7028:	1b 82       	std	Y+3, r1	; 0x03
    702a:	ce 01       	movw	r24, r28
    702c:	f0 dd       	rcall	.-1056   	; 0x6c0e <Comp_Stop>
    702e:	ce 01       	movw	r24, r28
    7030:	0e 94 66 4f 	call	0x9ecc	; 0x9ecc <stopTrvTimer>
			if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {comp->Cooling=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool\r\n");}//
    7034:	f1 01       	movw	r30, r2
    7036:	82 8d       	ldd	r24, Z+26	; 0x1a
    7038:	65 8d       	ldd	r22, Z+29	; 0x1d
    703a:	70 e0       	ldi	r23, 0x00	; 0
    703c:	68 0f       	add	r22, r24
    703e:	71 1d       	adc	r23, r1
    7040:	07 2e       	mov	r0, r23
    7042:	00 0c       	add	r0, r0
    7044:	88 0b       	sbc	r24, r24
    7046:	99 0b       	sbc	r25, r25
    7048:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    704c:	9b 01       	movw	r18, r22
    704e:	ac 01       	movw	r20, r24
    7050:	6e 89       	ldd	r22, Y+22	; 0x16
    7052:	7f 89       	ldd	r23, Y+23	; 0x17
    7054:	88 8d       	ldd	r24, Y+24	; 0x18
    7056:	99 8d       	ldd	r25, Y+25	; 0x19
    7058:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    705c:	18 16       	cp	r1, r24
    705e:	0c f0       	brlt	.+2      	; 0x7062 <mod_pump+0x244>
    7060:	19 c4       	rjmp	.+2098   	; 0x7894 <mod_pump+0xa76>
    7062:	8b 81       	ldd	r24, Y+3	; 0x03
    7064:	81 11       	cpse	r24, r1
    7066:	16 c4       	rjmp	.+2092   	; 0x7894 <mod_pump+0xa76>
    7068:	88 81       	ld	r24, Y
    706a:	81 11       	cpse	r24, r1
    706c:	13 c4       	rjmp	.+2086   	; 0x7894 <mod_pump+0xa76>
    706e:	81 e0       	ldi	r24, 0x01	; 1
    7070:	8b 83       	std	Y+3, r24	; 0x03
    7072:	ce 01       	movw	r24, r28
    7074:	0e 94 b7 51 	call	0xa36e	; 0xa36e <calibration>
    7078:	10 92 49 0a 	sts	0x0A49, r1	; 0x800a49 <Comp_1+0x71>
    707c:	10 92 48 0a 	sts	0x0A48, r1	; 0x800a48 <Comp_1+0x70>
    7080:	ce 01       	movw	r24, r28
    7082:	c1 de       	rcall	.-638    	; 0x6e06 <goToMode>
    7084:	86 ef       	ldi	r24, 0xF6	; 246
    7086:	95 e0       	ldi	r25, 0x05	; 5
    7088:	9f 93       	push	r25
    708a:	8f 93       	push	r24
    708c:	86 e1       	ldi	r24, 0x16	; 22
    708e:	98 e0       	ldi	r25, 0x08	; 8
    7090:	9f 93       	push	r25
    7092:	8f 93       	push	r24
    7094:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7098:	0f 90       	pop	r0
    709a:	0f 90       	pop	r0
    709c:	0f 90       	pop	r0
    709e:	0f 90       	pop	r0
    70a0:	f9 c3       	rjmp	.+2034   	; 0x7894 <mod_pump+0xa76>
		}break;
		
		case HEAT_DHW:
		
		{
			if(comp->Index==1)
    70a2:	fe 01       	movw	r30, r28
    70a4:	ee 58       	subi	r30, 0x8E	; 142
    70a6:	ff 4f       	sbci	r31, 0xFF	; 255
    70a8:	80 81       	ld	r24, Z
    70aa:	91 81       	ldd	r25, Z+1	; 0x01
    70ac:	81 30       	cpi	r24, 0x01	; 1
    70ae:	91 05       	cpc	r25, r1
    70b0:	09 f0       	breq	.+2      	; 0x70b4 <mod_pump+0x296>
    70b2:	ed c0       	rjmp	.+474    	; 0x728e <mod_pump+0x470>
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
    70b4:	8a 88       	ldd	r8, Y+18	; 0x12
    70b6:	9b 88       	ldd	r9, Y+19	; 0x13
    70b8:	ac 88       	ldd	r10, Y+20	; 0x14
    70ba:	bd 88       	ldd	r11, Y+21	; 0x15
    70bc:	f1 01       	movw	r30, r2
    70be:	e3 8c       	ldd	r14, Z+27	; 0x1b
    70c0:	f1 2c       	mov	r15, r1
    70c2:	86 8d       	ldd	r24, Z+30	; 0x1e
    70c4:	b7 01       	movw	r22, r14
    70c6:	68 1b       	sub	r22, r24
    70c8:	71 09       	sbc	r23, r1
    70ca:	07 2e       	mov	r0, r23
    70cc:	00 0c       	add	r0, r0
    70ce:	88 0b       	sbc	r24, r24
    70d0:	99 0b       	sbc	r25, r25
    70d2:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    70d6:	9b 01       	movw	r18, r22
    70d8:	ac 01       	movw	r20, r24
    70da:	c5 01       	movw	r24, r10
    70dc:	b4 01       	movw	r22, r8
    70de:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    70e2:	88 23       	and	r24, r24
    70e4:	1c f5       	brge	.+70     	; 0x712c <mod_pump+0x30e>
    70e6:	8c 81       	ldd	r24, Y+4	; 0x04
    70e8:	81 11       	cpse	r24, r1
    70ea:	3c c3       	rjmp	.+1656   	; 0x7764 <mod_pump+0x946>
    70ec:	8a 81       	ldd	r24, Y+2	; 0x02
    70ee:	81 11       	cpse	r24, r1
    70f0:	a2 c2       	rjmp	.+1348   	; 0x7636 <mod_pump+0x818>
    70f2:	88 81       	ld	r24, Y
    70f4:	81 11       	cpse	r24, r1
    70f6:	98 c3       	rjmp	.+1840   	; 0x7828 <mod_pump+0xa0a>
    70f8:	81 e0       	ldi	r24, 0x01	; 1
    70fa:	8c 83       	std	Y+4, r24	; 0x04
    70fc:	ce 01       	movw	r24, r28
    70fe:	0e 94 b7 51 	call	0xa36e	; 0xa36e <calibration>
    7102:	10 92 49 0a 	sts	0x0A49, r1	; 0x800a49 <Comp_1+0x71>
    7106:	10 92 48 0a 	sts	0x0A48, r1	; 0x800a48 <Comp_1+0x70>
    710a:	ce 01       	movw	r24, r28
    710c:	7c de       	rcall	.-776    	; 0x6e06 <goToMode>
    710e:	83 e0       	ldi	r24, 0x03	; 3
    7110:	96 e0       	ldi	r25, 0x06	; 6
    7112:	9f 93       	push	r25
    7114:	8f 93       	push	r24
    7116:	86 e1       	ldi	r24, 0x16	; 22
    7118:	98 e0       	ldi	r25, 0x08	; 8
    711a:	9f 93       	push	r25
    711c:	8f 93       	push	r24
    711e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7122:	0f 90       	pop	r0
    7124:	0f 90       	pop	r0
    7126:	0f 90       	pop	r0
    7128:	0f 90       	pop	r0
    712a:	76 c0       	rjmp	.+236    	; 0x7218 <mod_pump+0x3fa>
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    712c:	4e 88       	ldd	r4, Y+22	; 0x16
    712e:	5f 88       	ldd	r5, Y+23	; 0x17
    7130:	68 8c       	ldd	r6, Y+24	; 0x18
    7132:	79 8c       	ldd	r7, Y+25	; 0x19
    7134:	f1 01       	movw	r30, r2
    7136:	c1 8c       	ldd	r12, Z+25	; 0x19
    7138:	d1 2c       	mov	r13, r1
    713a:	84 8d       	ldd	r24, Z+28	; 0x1c
    713c:	b6 01       	movw	r22, r12
    713e:	68 1b       	sub	r22, r24
    7140:	71 09       	sbc	r23, r1
    7142:	07 2e       	mov	r0, r23
    7144:	00 0c       	add	r0, r0
    7146:	88 0b       	sbc	r24, r24
    7148:	99 0b       	sbc	r25, r25
    714a:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    714e:	9b 01       	movw	r18, r22
    7150:	ac 01       	movw	r20, r24
    7152:	c3 01       	movw	r24, r6
    7154:	b2 01       	movw	r22, r4
    7156:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    715a:	88 23       	and	r24, r24
    715c:	1c f5       	brge	.+70     	; 0x71a4 <mod_pump+0x386>
    715e:	8c 81       	ldd	r24, Y+4	; 0x04
    7160:	81 11       	cpse	r24, r1
    7162:	84 c2       	rjmp	.+1288   	; 0x766c <mod_pump+0x84e>
    7164:	8a 81       	ldd	r24, Y+2	; 0x02
    7166:	81 11       	cpse	r24, r1
    7168:	1d c0       	rjmp	.+58     	; 0x71a4 <mod_pump+0x386>
    716a:	88 81       	ld	r24, Y
    716c:	81 11       	cpse	r24, r1
    716e:	1a c0       	rjmp	.+52     	; 0x71a4 <mod_pump+0x386>
    7170:	ce 01       	movw	r24, r28
    7172:	0e 94 b7 51 	call	0xa36e	; 0xa36e <calibration>
    7176:	10 92 49 0a 	sts	0x0A49, r1	; 0x800a49 <Comp_1+0x71>
    717a:	10 92 48 0a 	sts	0x0A48, r1	; 0x800a48 <Comp_1+0x70>
    717e:	81 e0       	ldi	r24, 0x01	; 1
    7180:	8a 83       	std	Y+2, r24	; 0x02
    7182:	ce 01       	movw	r24, r28
    7184:	40 de       	rcall	.-896    	; 0x6e06 <goToMode>
    7186:	81 e1       	ldi	r24, 0x11	; 17
    7188:	96 e0       	ldi	r25, 0x06	; 6
    718a:	9f 93       	push	r25
    718c:	8f 93       	push	r24
    718e:	86 e1       	ldi	r24, 0x16	; 22
    7190:	98 e0       	ldi	r25, 0x08	; 8
    7192:	9f 93       	push	r25
    7194:	8f 93       	push	r24
    7196:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    719a:	0f 90       	pop	r0
    719c:	0f 90       	pop	r0
    719e:	0f 90       	pop	r0
    71a0:	0f 90       	pop	r0
    71a2:	3a c0       	rjmp	.+116    	; 0x7218 <mod_pump+0x3fa>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    71a4:	b7 01       	movw	r22, r14
    71a6:	ff 0c       	add	r15, r15
    71a8:	88 0b       	sbc	r24, r24
    71aa:	99 0b       	sbc	r25, r25
    71ac:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    71b0:	9b 01       	movw	r18, r22
    71b2:	ac 01       	movw	r20, r24
    71b4:	c5 01       	movw	r24, r10
    71b6:	b4 01       	movw	r22, r8
    71b8:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    71bc:	18 16       	cp	r1, r24
    71be:	8c f4       	brge	.+34     	; 0x71e2 <mod_pump+0x3c4>
    71c0:	8c 81       	ldd	r24, Y+4	; 0x04
    71c2:	88 23       	and	r24, r24
    71c4:	09 f4       	brne	.+2      	; 0x71c8 <mod_pump+0x3aa>
    71c6:	62 c2       	rjmp	.+1220   	; 0x768c <mod_pump+0x86e>
    71c8:	8a 81       	ldd	r24, Y+2	; 0x02
    71ca:	81 11       	cpse	r24, r1
    71cc:	25 c0       	rjmp	.+74     	; 0x7218 <mod_pump+0x3fa>
    71ce:	88 81       	ld	r24, Y
    71d0:	81 11       	cpse	r24, r1
    71d2:	22 c0       	rjmp	.+68     	; 0x7218 <mod_pump+0x3fa>
    71d4:	1c 82       	std	Y+4, r1	; 0x04
    71d6:	ce 01       	movw	r24, r28
    71d8:	1a dd       	rcall	.-1484   	; 0x6c0e <Comp_Stop>
    71da:	ce 01       	movw	r24, r28
    71dc:	0e 94 66 4f 	call	0x9ecc	; 0x9ecc <stopTrvTimer>
    71e0:	1b c0       	rjmp	.+54     	; 0x7218 <mod_pump+0x3fa>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    71e2:	b6 01       	movw	r22, r12
    71e4:	dd 0c       	add	r13, r13
    71e6:	88 0b       	sbc	r24, r24
    71e8:	99 0b       	sbc	r25, r25
    71ea:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    71ee:	a3 01       	movw	r20, r6
    71f0:	92 01       	movw	r18, r4
    71f2:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    71f6:	88 23       	and	r24, r24
    71f8:	7c f4       	brge	.+30     	; 0x7218 <mod_pump+0x3fa>
    71fa:	8c 81       	ldd	r24, Y+4	; 0x04
    71fc:	81 11       	cpse	r24, r1
    71fe:	0c c0       	rjmp	.+24     	; 0x7218 <mod_pump+0x3fa>
    7200:	8a 81       	ldd	r24, Y+2	; 0x02
    7202:	88 23       	and	r24, r24
    7204:	49 f0       	breq	.+18     	; 0x7218 <mod_pump+0x3fa>
    7206:	88 81       	ld	r24, Y
    7208:	81 11       	cpse	r24, r1
    720a:	06 c0       	rjmp	.+12     	; 0x7218 <mod_pump+0x3fa>
    720c:	1a 82       	std	Y+2, r1	; 0x02
    720e:	ce 01       	movw	r24, r28
    7210:	fe dc       	rcall	.-1540   	; 0x6c0e <Comp_Stop>
    7212:	ce 01       	movw	r24, r28
    7214:	0e 94 66 4f 	call	0x9ecc	; 0x9ecc <stopTrvTimer>
				if(EEpromData.NombComp==2) if(comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW)&& !comp->heatingWater && comp->Heating && !comp->switchToMode){comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_again\r\n");}	
    7218:	80 91 98 09 	lds	r24, 0x0998	; 0x800998 <EEpromData+0x20>
    721c:	82 30       	cpi	r24, 0x02	; 2
    721e:	09 f0       	breq	.+2      	; 0x7222 <mod_pump+0x404>
    7220:	39 c3       	rjmp	.+1650   	; 0x7894 <mod_pump+0xa76>
    7222:	f1 01       	movw	r30, r2
    7224:	63 8d       	ldd	r22, Z+27	; 0x1b
    7226:	70 e0       	ldi	r23, 0x00	; 0
    7228:	86 8d       	ldd	r24, Z+30	; 0x1e
    722a:	68 1b       	sub	r22, r24
    722c:	71 09       	sbc	r23, r1
    722e:	07 2e       	mov	r0, r23
    7230:	00 0c       	add	r0, r0
    7232:	88 0b       	sbc	r24, r24
    7234:	99 0b       	sbc	r25, r25
    7236:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    723a:	9b 01       	movw	r18, r22
    723c:	ac 01       	movw	r20, r24
    723e:	6a 89       	ldd	r22, Y+18	; 0x12
    7240:	7b 89       	ldd	r23, Y+19	; 0x13
    7242:	8c 89       	ldd	r24, Y+20	; 0x14
    7244:	9d 89       	ldd	r25, Y+21	; 0x15
    7246:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    724a:	88 23       	and	r24, r24
    724c:	0c f0       	brlt	.+2      	; 0x7250 <mod_pump+0x432>
    724e:	22 c3       	rjmp	.+1604   	; 0x7894 <mod_pump+0xa76>
    7250:	8c 81       	ldd	r24, Y+4	; 0x04
    7252:	81 11       	cpse	r24, r1
    7254:	1f c3       	rjmp	.+1598   	; 0x7894 <mod_pump+0xa76>
    7256:	8a 81       	ldd	r24, Y+2	; 0x02
    7258:	88 23       	and	r24, r24
    725a:	09 f4       	brne	.+2      	; 0x725e <mod_pump+0x440>
    725c:	1b c3       	rjmp	.+1590   	; 0x7894 <mod_pump+0xa76>
    725e:	88 81       	ld	r24, Y
    7260:	81 11       	cpse	r24, r1
    7262:	18 c3       	rjmp	.+1584   	; 0x7894 <mod_pump+0xa76>
    7264:	1a 82       	std	Y+2, r1	; 0x02
    7266:	ce 01       	movw	r24, r28
    7268:	d2 dc       	rcall	.-1628   	; 0x6c0e <Comp_Stop>
    726a:	ce 01       	movw	r24, r28
    726c:	0e 94 66 4f 	call	0x9ecc	; 0x9ecc <stopTrvTimer>
    7270:	80 e2       	ldi	r24, 0x20	; 32
    7272:	96 e0       	ldi	r25, 0x06	; 6
    7274:	9f 93       	push	r25
    7276:	8f 93       	push	r24
    7278:	86 e1       	ldi	r24, 0x16	; 22
    727a:	98 e0       	ldi	r25, 0x08	; 8
    727c:	9f 93       	push	r25
    727e:	8f 93       	push	r24
    7280:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7284:	0f 90       	pop	r0
    7286:	0f 90       	pop	r0
    7288:	0f 90       	pop	r0
    728a:	0f 90       	pop	r0
    728c:	03 c3       	rjmp	.+1542   	; 0x7894 <mod_pump+0xa76>
			}
			else if(comp->Index==2)
    728e:	02 97       	sbiw	r24, 0x02	; 2
    7290:	09 f0       	breq	.+2      	; 0x7294 <mod_pump+0x476>
    7292:	00 c3       	rjmp	.+1536   	; 0x7894 <mod_pump+0xa76>
			{
				if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {calibration(comp);comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_2\r\n");}
    7294:	8e 88       	ldd	r8, Y+22	; 0x16
    7296:	9f 88       	ldd	r9, Y+23	; 0x17
    7298:	a8 8c       	ldd	r10, Y+24	; 0x18
    729a:	b9 8c       	ldd	r11, Y+25	; 0x19
    729c:	f1 01       	movw	r30, r2
    729e:	e1 8c       	ldd	r14, Z+25	; 0x19
    72a0:	f1 2c       	mov	r15, r1
    72a2:	84 8d       	ldd	r24, Z+28	; 0x1c
    72a4:	b7 01       	movw	r22, r14
    72a6:	68 1b       	sub	r22, r24
    72a8:	71 09       	sbc	r23, r1
    72aa:	07 2e       	mov	r0, r23
    72ac:	00 0c       	add	r0, r0
    72ae:	88 0b       	sbc	r24, r24
    72b0:	99 0b       	sbc	r25, r25
    72b2:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    72b6:	9b 01       	movw	r18, r22
    72b8:	ac 01       	movw	r20, r24
    72ba:	c5 01       	movw	r24, r10
    72bc:	b4 01       	movw	r22, r8
    72be:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    72c2:	88 23       	and	r24, r24
    72c4:	dc f4       	brge	.+54     	; 0x72fc <mod_pump+0x4de>
    72c6:	8a 81       	ldd	r24, Y+2	; 0x02
    72c8:	81 11       	cpse	r24, r1
    72ca:	ee c1       	rjmp	.+988    	; 0x76a8 <mod_pump+0x88a>
    72cc:	88 81       	ld	r24, Y
    72ce:	81 11       	cpse	r24, r1
    72d0:	e1 c2       	rjmp	.+1474   	; 0x7894 <mod_pump+0xa76>
    72d2:	ce 01       	movw	r24, r28
    72d4:	0e 94 b7 51 	call	0xa36e	; 0xa36e <calibration>
    72d8:	81 e0       	ldi	r24, 0x01	; 1
    72da:	8a 83       	std	Y+2, r24	; 0x02
    72dc:	ce 01       	movw	r24, r28
    72de:	93 dd       	rcall	.-1242   	; 0x6e06 <goToMode>
    72e0:	82 e3       	ldi	r24, 0x32	; 50
    72e2:	96 e0       	ldi	r25, 0x06	; 6
    72e4:	9f 93       	push	r25
    72e6:	8f 93       	push	r24
    72e8:	86 e1       	ldi	r24, 0x16	; 22
    72ea:	98 e0       	ldi	r25, 0x08	; 8
    72ec:	9f 93       	push	r25
    72ee:	8f 93       	push	r24
    72f0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    72f4:	0f 90       	pop	r0
    72f6:	0f 90       	pop	r0
    72f8:	0f 90       	pop	r0
    72fa:	0f 90       	pop	r0
				if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    72fc:	f1 01       	movw	r30, r2
    72fe:	61 8d       	ldd	r22, Z+25	; 0x19
    7300:	70 e0       	ldi	r23, 0x00	; 0
    7302:	80 e0       	ldi	r24, 0x00	; 0
    7304:	90 e0       	ldi	r25, 0x00	; 0
    7306:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    730a:	9b 01       	movw	r18, r22
    730c:	ac 01       	movw	r20, r24
    730e:	6e 89       	ldd	r22, Y+22	; 0x16
    7310:	7f 89       	ldd	r23, Y+23	; 0x17
    7312:	88 8d       	ldd	r24, Y+24	; 0x18
    7314:	99 8d       	ldd	r25, Y+25	; 0x19
    7316:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    731a:	18 16       	cp	r1, r24
    731c:	0c f0       	brlt	.+2      	; 0x7320 <mod_pump+0x502>
    731e:	ba c2       	rjmp	.+1396   	; 0x7894 <mod_pump+0xa76>
    7320:	8a 81       	ldd	r24, Y+2	; 0x02
    7322:	88 23       	and	r24, r24
    7324:	09 f4       	brne	.+2      	; 0x7328 <mod_pump+0x50a>
    7326:	b6 c2       	rjmp	.+1388   	; 0x7894 <mod_pump+0xa76>
    7328:	88 81       	ld	r24, Y
    732a:	81 11       	cpse	r24, r1
    732c:	b3 c2       	rjmp	.+1382   	; 0x7894 <mod_pump+0xa76>
    732e:	1a 82       	std	Y+2, r1	; 0x02
    7330:	ce 01       	movw	r24, r28
    7332:	6d dc       	rcall	.-1830   	; 0x6c0e <Comp_Stop>
    7334:	ce 01       	movw	r24, r28
    7336:	0e 94 66 4f 	call	0x9ecc	; 0x9ecc <stopTrvTimer>
    733a:	ac c2       	rjmp	.+1368   	; 0x7894 <mod_pump+0xa76>
			
		}break;
		
		case COOL_DHW:
		{
			if(comp->Index==1)
    733c:	fe 01       	movw	r30, r28
    733e:	ee 58       	subi	r30, 0x8E	; 142
    7340:	ff 4f       	sbci	r31, 0xFF	; 255
    7342:	80 81       	ld	r24, Z
    7344:	91 81       	ldd	r25, Z+1	; 0x01
    7346:	81 30       	cpi	r24, 0x01	; 1
    7348:	91 05       	cpc	r25, r1
    734a:	09 f0       	breq	.+2      	; 0x734e <mod_pump+0x530>
    734c:	e1 c0       	rjmp	.+450    	; 0x7510 <mod_pump+0x6f2>
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
    734e:	8a 88       	ldd	r8, Y+18	; 0x12
    7350:	9b 88       	ldd	r9, Y+19	; 0x13
    7352:	ac 88       	ldd	r10, Y+20	; 0x14
    7354:	bd 88       	ldd	r11, Y+21	; 0x15
    7356:	f1 01       	movw	r30, r2
    7358:	e3 8c       	ldd	r14, Z+27	; 0x1b
    735a:	f1 2c       	mov	r15, r1
    735c:	86 8d       	ldd	r24, Z+30	; 0x1e
    735e:	b7 01       	movw	r22, r14
    7360:	68 1b       	sub	r22, r24
    7362:	71 09       	sbc	r23, r1
    7364:	07 2e       	mov	r0, r23
    7366:	00 0c       	add	r0, r0
    7368:	88 0b       	sbc	r24, r24
    736a:	99 0b       	sbc	r25, r25
    736c:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    7370:	9b 01       	movw	r18, r22
    7372:	ac 01       	movw	r20, r24
    7374:	c5 01       	movw	r24, r10
    7376:	b4 01       	movw	r22, r8
    7378:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    737c:	88 23       	and	r24, r24
    737e:	2c f5       	brge	.+74     	; 0x73ca <mod_pump+0x5ac>
    7380:	8c 81       	ldd	r24, Y+4	; 0x04
    7382:	81 11       	cpse	r24, r1
    7384:	21 c2       	rjmp	.+1090   	; 0x77c8 <mod_pump+0x9aa>
    7386:	8b 81       	ldd	r24, Y+3	; 0x03
    7388:	81 11       	cpse	r24, r1
    738a:	9e c1       	rjmp	.+828    	; 0x76c8 <mod_pump+0x8aa>
    738c:	88 81       	ld	r24, Y
    738e:	81 11       	cpse	r24, r1
    7390:	66 c2       	rjmp	.+1228   	; 0x785e <mod_pump+0xa40>
    7392:	ff 24       	eor	r15, r15
    7394:	f3 94       	inc	r15
    7396:	fc 82       	std	Y+4, r15	; 0x04
    7398:	ce 01       	movw	r24, r28
    739a:	0e 94 b7 51 	call	0xa36e	; 0xa36e <calibration>
    739e:	10 92 49 0a 	sts	0x0A49, r1	; 0x800a49 <Comp_1+0x71>
    73a2:	10 92 48 0a 	sts	0x0A48, r1	; 0x800a48 <Comp_1+0x70>
    73a6:	fc 82       	std	Y+4, r15	; 0x04
    73a8:	ce 01       	movw	r24, r28
    73aa:	2d dd       	rcall	.-1446   	; 0x6e06 <goToMode>
    73ac:	81 e4       	ldi	r24, 0x41	; 65
    73ae:	96 e0       	ldi	r25, 0x06	; 6
    73b0:	9f 93       	push	r25
    73b2:	8f 93       	push	r24
    73b4:	86 e1       	ldi	r24, 0x16	; 22
    73b6:	98 e0       	ldi	r25, 0x08	; 8
    73b8:	9f 93       	push	r25
    73ba:	8f 93       	push	r24
    73bc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    73c0:	0f 90       	pop	r0
    73c2:	0f 90       	pop	r0
    73c4:	0f 90       	pop	r0
    73c6:	0f 90       	pop	r0
    73c8:	76 c0       	rjmp	.+236    	; 0x74b6 <mod_pump+0x698>
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    73ca:	4e 88       	ldd	r4, Y+22	; 0x16
    73cc:	5f 88       	ldd	r5, Y+23	; 0x17
    73ce:	68 8c       	ldd	r6, Y+24	; 0x18
    73d0:	79 8c       	ldd	r7, Y+25	; 0x19
    73d2:	f1 01       	movw	r30, r2
    73d4:	c1 8c       	ldd	r12, Z+25	; 0x19
    73d6:	d1 2c       	mov	r13, r1
    73d8:	84 8d       	ldd	r24, Z+28	; 0x1c
    73da:	b6 01       	movw	r22, r12
    73dc:	68 1b       	sub	r22, r24
    73de:	71 09       	sbc	r23, r1
    73e0:	07 2e       	mov	r0, r23
    73e2:	00 0c       	add	r0, r0
    73e4:	88 0b       	sbc	r24, r24
    73e6:	99 0b       	sbc	r25, r25
    73e8:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    73ec:	9b 01       	movw	r18, r22
    73ee:	ac 01       	movw	r20, r24
    73f0:	c3 01       	movw	r24, r6
    73f2:	b2 01       	movw	r22, r4
    73f4:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    73f8:	88 23       	and	r24, r24
    73fa:	1c f5       	brge	.+70     	; 0x7442 <mod_pump+0x624>
    73fc:	8c 81       	ldd	r24, Y+4	; 0x04
    73fe:	81 11       	cpse	r24, r1
    7400:	7e c1       	rjmp	.+764    	; 0x76fe <mod_pump+0x8e0>
    7402:	8b 81       	ldd	r24, Y+3	; 0x03
    7404:	81 11       	cpse	r24, r1
    7406:	1d c0       	rjmp	.+58     	; 0x7442 <mod_pump+0x624>
    7408:	88 81       	ld	r24, Y
    740a:	81 11       	cpse	r24, r1
    740c:	1a c0       	rjmp	.+52     	; 0x7442 <mod_pump+0x624>
    740e:	ce 01       	movw	r24, r28
    7410:	0e 94 b7 51 	call	0xa36e	; 0xa36e <calibration>
    7414:	10 92 49 0a 	sts	0x0A49, r1	; 0x800a49 <Comp_1+0x71>
    7418:	10 92 48 0a 	sts	0x0A48, r1	; 0x800a48 <Comp_1+0x70>
    741c:	81 e0       	ldi	r24, 0x01	; 1
    741e:	8b 83       	std	Y+3, r24	; 0x03
    7420:	ce 01       	movw	r24, r28
    7422:	f1 dc       	rcall	.-1566   	; 0x6e06 <goToMode>
    7424:	83 e5       	ldi	r24, 0x53	; 83
    7426:	96 e0       	ldi	r25, 0x06	; 6
    7428:	9f 93       	push	r25
    742a:	8f 93       	push	r24
    742c:	86 e1       	ldi	r24, 0x16	; 22
    742e:	98 e0       	ldi	r25, 0x08	; 8
    7430:	9f 93       	push	r25
    7432:	8f 93       	push	r24
    7434:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7438:	0f 90       	pop	r0
    743a:	0f 90       	pop	r0
    743c:	0f 90       	pop	r0
    743e:	0f 90       	pop	r0
    7440:	3a c0       	rjmp	.+116    	; 0x74b6 <mod_pump+0x698>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7442:	b7 01       	movw	r22, r14
    7444:	ff 0c       	add	r15, r15
    7446:	88 0b       	sbc	r24, r24
    7448:	99 0b       	sbc	r25, r25
    744a:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    744e:	9b 01       	movw	r18, r22
    7450:	ac 01       	movw	r20, r24
    7452:	c5 01       	movw	r24, r10
    7454:	b4 01       	movw	r22, r8
    7456:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    745a:	18 16       	cp	r1, r24
    745c:	8c f4       	brge	.+34     	; 0x7480 <mod_pump+0x662>
    745e:	8c 81       	ldd	r24, Y+4	; 0x04
    7460:	88 23       	and	r24, r24
    7462:	09 f4       	brne	.+2      	; 0x7466 <mod_pump+0x648>
    7464:	5c c1       	rjmp	.+696    	; 0x771e <mod_pump+0x900>
    7466:	8b 81       	ldd	r24, Y+3	; 0x03
    7468:	81 11       	cpse	r24, r1
    746a:	25 c0       	rjmp	.+74     	; 0x74b6 <mod_pump+0x698>
    746c:	88 81       	ld	r24, Y
    746e:	81 11       	cpse	r24, r1
    7470:	22 c0       	rjmp	.+68     	; 0x74b6 <mod_pump+0x698>
    7472:	1c 82       	std	Y+4, r1	; 0x04
    7474:	ce 01       	movw	r24, r28
    7476:	cb db       	rcall	.-2154   	; 0x6c0e <Comp_Stop>
    7478:	ce 01       	movw	r24, r28
    747a:	0e 94 66 4f 	call	0x9ecc	; 0x9ecc <stopTrvTimer>
    747e:	1b c0       	rjmp	.+54     	; 0x74b6 <mod_pump+0x698>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7480:	b6 01       	movw	r22, r12
    7482:	dd 0c       	add	r13, r13
    7484:	88 0b       	sbc	r24, r24
    7486:	99 0b       	sbc	r25, r25
    7488:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    748c:	a3 01       	movw	r20, r6
    748e:	92 01       	movw	r18, r4
    7490:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    7494:	88 23       	and	r24, r24
    7496:	7c f4       	brge	.+30     	; 0x74b6 <mod_pump+0x698>
    7498:	8c 81       	ldd	r24, Y+4	; 0x04
    749a:	81 11       	cpse	r24, r1
    749c:	0c c0       	rjmp	.+24     	; 0x74b6 <mod_pump+0x698>
    749e:	8b 81       	ldd	r24, Y+3	; 0x03
    74a0:	88 23       	and	r24, r24
    74a2:	49 f0       	breq	.+18     	; 0x74b6 <mod_pump+0x698>
    74a4:	88 81       	ld	r24, Y
    74a6:	81 11       	cpse	r24, r1
    74a8:	06 c0       	rjmp	.+12     	; 0x74b6 <mod_pump+0x698>
    74aa:	1b 82       	std	Y+3, r1	; 0x03
    74ac:	ce 01       	movw	r24, r28
    74ae:	af db       	rcall	.-2210   	; 0x6c0e <Comp_Stop>
    74b0:	ce 01       	movw	r24, r28
    74b2:	0e 94 66 4f 	call	0x9ecc	; 0x9ecc <stopTrvTimer>
				if(EEpromData.NombComp==2) if (comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && comp->Cooling && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}	
    74b6:	80 91 98 09 	lds	r24, 0x0998	; 0x800998 <EEpromData+0x20>
    74ba:	82 30       	cpi	r24, 0x02	; 2
    74bc:	09 f0       	breq	.+2      	; 0x74c0 <mod_pump+0x6a2>
    74be:	ea c1       	rjmp	.+980    	; 0x7894 <mod_pump+0xa76>
    74c0:	f1 01       	movw	r30, r2
    74c2:	63 8d       	ldd	r22, Z+27	; 0x1b
    74c4:	70 e0       	ldi	r23, 0x00	; 0
    74c6:	86 8d       	ldd	r24, Z+30	; 0x1e
    74c8:	68 1b       	sub	r22, r24
    74ca:	71 09       	sbc	r23, r1
    74cc:	07 2e       	mov	r0, r23
    74ce:	00 0c       	add	r0, r0
    74d0:	88 0b       	sbc	r24, r24
    74d2:	99 0b       	sbc	r25, r25
    74d4:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    74d8:	9b 01       	movw	r18, r22
    74da:	ac 01       	movw	r20, r24
    74dc:	6a 89       	ldd	r22, Y+18	; 0x12
    74de:	7b 89       	ldd	r23, Y+19	; 0x13
    74e0:	8c 89       	ldd	r24, Y+20	; 0x14
    74e2:	9d 89       	ldd	r25, Y+21	; 0x15
    74e4:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    74e8:	88 23       	and	r24, r24
    74ea:	0c f0       	brlt	.+2      	; 0x74ee <mod_pump+0x6d0>
    74ec:	d3 c1       	rjmp	.+934    	; 0x7894 <mod_pump+0xa76>
    74ee:	8c 81       	ldd	r24, Y+4	; 0x04
    74f0:	81 11       	cpse	r24, r1
    74f2:	d0 c1       	rjmp	.+928    	; 0x7894 <mod_pump+0xa76>
    74f4:	8b 81       	ldd	r24, Y+3	; 0x03
    74f6:	88 23       	and	r24, r24
    74f8:	09 f4       	brne	.+2      	; 0x74fc <mod_pump+0x6de>
    74fa:	cc c1       	rjmp	.+920    	; 0x7894 <mod_pump+0xa76>
    74fc:	88 81       	ld	r24, Y
    74fe:	81 11       	cpse	r24, r1
    7500:	c9 c1       	rjmp	.+914    	; 0x7894 <mod_pump+0xa76>
    7502:	1b 82       	std	Y+3, r1	; 0x03
    7504:	ce 01       	movw	r24, r28
    7506:	83 db       	rcall	.-2298   	; 0x6c0e <Comp_Stop>
    7508:	ce 01       	movw	r24, r28
    750a:	0e 94 66 4f 	call	0x9ecc	; 0x9ecc <stopTrvTimer>
    750e:	c2 c1       	rjmp	.+900    	; 0x7894 <mod_pump+0xa76>
			}
			else if(comp->Index==2)
    7510:	02 97       	sbiw	r24, 0x02	; 2
    7512:	09 f0       	breq	.+2      	; 0x7516 <mod_pump+0x6f8>
    7514:	bf c1       	rjmp	.+894    	; 0x7894 <mod_pump+0xa76>
			{
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
    7516:	8e 88       	ldd	r8, Y+22	; 0x16
    7518:	9f 88       	ldd	r9, Y+23	; 0x17
    751a:	a8 8c       	ldd	r10, Y+24	; 0x18
    751c:	b9 8c       	ldd	r11, Y+25	; 0x19
    751e:	f1 01       	movw	r30, r2
    7520:	e2 8c       	ldd	r14, Z+26	; 0x1a
    7522:	f1 2c       	mov	r15, r1
    7524:	b7 01       	movw	r22, r14
    7526:	0f 2c       	mov	r0, r15
    7528:	00 0c       	add	r0, r0
    752a:	88 0b       	sbc	r24, r24
    752c:	99 0b       	sbc	r25, r25
    752e:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    7532:	9b 01       	movw	r18, r22
    7534:	ac 01       	movw	r20, r24
    7536:	c5 01       	movw	r24, r10
    7538:	b4 01       	movw	r22, r8
    753a:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    753e:	88 23       	and	r24, r24
    7540:	6c f4       	brge	.+26     	; 0x755c <mod_pump+0x73e>
    7542:	8b 81       	ldd	r24, Y+3	; 0x03
    7544:	88 23       	and	r24, r24
    7546:	09 f4       	brne	.+2      	; 0x754a <mod_pump+0x72c>
    7548:	f8 c0       	rjmp	.+496    	; 0x773a <mod_pump+0x91c>
    754a:	88 81       	ld	r24, Y
    754c:	81 11       	cpse	r24, r1
    754e:	a2 c1       	rjmp	.+836    	; 0x7894 <mod_pump+0xa76>
    7550:	1b 82       	std	Y+3, r1	; 0x03
    7552:	ce 01       	movw	r24, r28
    7554:	5c db       	rcall	.-2376   	; 0x6c0e <Comp_Stop>
    7556:	ce 01       	movw	r24, r28
    7558:	0e 94 66 4f 	call	0x9ecc	; 0x9ecc <stopTrvTimer>
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
    755c:	f1 01       	movw	r30, r2
    755e:	82 8d       	ldd	r24, Z+26	; 0x1a
    7560:	65 8d       	ldd	r22, Z+29	; 0x1d
    7562:	70 e0       	ldi	r23, 0x00	; 0
    7564:	68 0f       	add	r22, r24
    7566:	71 1d       	adc	r23, r1
    7568:	07 2e       	mov	r0, r23
    756a:	00 0c       	add	r0, r0
    756c:	88 0b       	sbc	r24, r24
    756e:	99 0b       	sbc	r25, r25
    7570:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    7574:	9b 01       	movw	r18, r22
    7576:	ac 01       	movw	r20, r24
    7578:	6e 89       	ldd	r22, Y+22	; 0x16
    757a:	7f 89       	ldd	r23, Y+23	; 0x17
    757c:	88 8d       	ldd	r24, Y+24	; 0x18
    757e:	99 8d       	ldd	r25, Y+25	; 0x19
    7580:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    7584:	18 16       	cp	r1, r24
    7586:	0c f0       	brlt	.+2      	; 0x758a <mod_pump+0x76c>
    7588:	85 c1       	rjmp	.+778    	; 0x7894 <mod_pump+0xa76>
    758a:	8b 81       	ldd	r24, Y+3	; 0x03
    758c:	81 11       	cpse	r24, r1
    758e:	82 c1       	rjmp	.+772    	; 0x7894 <mod_pump+0xa76>
    7590:	88 81       	ld	r24, Y
    7592:	81 11       	cpse	r24, r1
    7594:	7f c1       	rjmp	.+766    	; 0x7894 <mod_pump+0xa76>
    7596:	ce 01       	movw	r24, r28
    7598:	0e 94 b7 51 	call	0xa36e	; 0xa36e <calibration>
    759c:	81 e0       	ldi	r24, 0x01	; 1
    759e:	8b 83       	std	Y+3, r24	; 0x03
    75a0:	ce 01       	movw	r24, r28
    75a2:	31 dc       	rcall	.-1950   	; 0x6e06 <goToMode>
    75a4:	85 e6       	ldi	r24, 0x65	; 101
    75a6:	96 e0       	ldi	r25, 0x06	; 6
    75a8:	9f 93       	push	r25
    75aa:	8f 93       	push	r24
    75ac:	86 e1       	ldi	r24, 0x16	; 22
    75ae:	98 e0       	ldi	r25, 0x08	; 8
    75b0:	9f 93       	push	r25
    75b2:	8f 93       	push	r24
    75b4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    75b8:	0f 90       	pop	r0
    75ba:	0f 90       	pop	r0
    75bc:	0f 90       	pop	r0
    75be:	0f 90       	pop	r0
			}
		}break;
	}
}
    75c0:	69 c1       	rjmp	.+722    	; 0x7894 <mod_pump+0xa76>

	switch(temp){
		case DHW: {
		if(comp->Index==1){
			if ( comp->Dhw_Temp > eeData->Set_DHW && comp->heatingWater && !comp->switchToMode) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp);}
			if ( comp->Dhw_Temp < (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->switchToMode){calibration(comp);Comp_1.error=0; comp->heatingWater=true; goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_Dhw\r\n");}//Start_Dhw();
    75c2:	f1 01       	movw	r30, r2
    75c4:	86 8d       	ldd	r24, Z+30	; 0x1e
    75c6:	b7 01       	movw	r22, r14
    75c8:	68 1b       	sub	r22, r24
    75ca:	71 09       	sbc	r23, r1
    75cc:	07 2e       	mov	r0, r23
    75ce:	00 0c       	add	r0, r0
    75d0:	88 0b       	sbc	r24, r24
    75d2:	99 0b       	sbc	r25, r25
    75d4:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    75d8:	9b 01       	movw	r18, r22
    75da:	ac 01       	movw	r20, r24
    75dc:	c5 01       	movw	r24, r10
    75de:	b4 01       	movw	r22, r8
    75e0:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    75e4:	88 23       	and	r24, r24
    75e6:	0c f4       	brge	.+2      	; 0x75ea <mod_pump+0x7cc>
    75e8:	8d cc       	rjmp	.-1766   	; 0x6f04 <mod_pump+0xe6>
    75ea:	54 c1       	rjmp	.+680    	; 0x7894 <mod_pump+0xa76>
		case HEAT:{
			//xSerialxPrintf(&xSerial3Port,"Set_Heating =%d\r\n,diffHEAT =%d\r\n,Bac_Temp =%f\r\n",eeData->Set_Heating,eeData->diffHEAT,data->Bac_Temp);
			//xSerialxPrintf(&xSerial3Port,"diffHEAT =%d\r\n",eeData->diffHEAT);
			//xSerialxPrintf(&xSerial3Port,"heat mode\r\n");
			if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {comp->Heating=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat\r\n");}
			if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    75ec:	b7 01       	movw	r22, r14
    75ee:	ff 0c       	add	r15, r15
    75f0:	88 0b       	sbc	r24, r24
    75f2:	99 0b       	sbc	r25, r25
    75f4:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    75f8:	9b 01       	movw	r18, r22
    75fa:	ac 01       	movw	r20, r24
    75fc:	c5 01       	movw	r24, r10
    75fe:	b4 01       	movw	r22, r8
    7600:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    7604:	18 16       	cp	r1, r24
    7606:	0c f4       	brge	.+2      	; 0x760a <mod_pump+0x7ec>
    7608:	e8 cc       	rjmp	.-1584   	; 0x6fda <mod_pump+0x1bc>
    760a:	44 c1       	rjmp	.+648    	; 0x7894 <mod_pump+0xa76>
		} break;
		
		case COOL:{
			//xSerialxPrintf(&xSerial3Port,"COOL mode\r\n");
			if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
			if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {comp->Cooling=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool\r\n");}//
    760c:	f1 01       	movw	r30, r2
    760e:	85 8d       	ldd	r24, Z+29	; 0x1d
    7610:	b7 01       	movw	r22, r14
    7612:	68 0f       	add	r22, r24
    7614:	71 1d       	adc	r23, r1
    7616:	07 2e       	mov	r0, r23
    7618:	00 0c       	add	r0, r0
    761a:	88 0b       	sbc	r24, r24
    761c:	99 0b       	sbc	r25, r25
    761e:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    7622:	9b 01       	movw	r18, r22
    7624:	ac 01       	movw	r20, r24
    7626:	c5 01       	movw	r24, r10
    7628:	b4 01       	movw	r22, r8
    762a:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    762e:	18 16       	cp	r1, r24
    7630:	0c f4       	brge	.+2      	; 0x7634 <mod_pump+0x816>
    7632:	1a cd       	rjmp	.-1484   	; 0x7068 <mod_pump+0x24a>
    7634:	2f c1       	rjmp	.+606    	; 0x7894 <mod_pump+0xa76>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    7636:	4e 88       	ldd	r4, Y+22	; 0x16
    7638:	5f 88       	ldd	r5, Y+23	; 0x17
    763a:	68 8c       	ldd	r6, Y+24	; 0x18
    763c:	79 8c       	ldd	r7, Y+25	; 0x19
    763e:	f1 01       	movw	r30, r2
    7640:	c1 8c       	ldd	r12, Z+25	; 0x19
    7642:	d1 2c       	mov	r13, r1
    7644:	84 8d       	ldd	r24, Z+28	; 0x1c
    7646:	b6 01       	movw	r22, r12
    7648:	68 1b       	sub	r22, r24
    764a:	71 09       	sbc	r23, r1
    764c:	07 2e       	mov	r0, r23
    764e:	00 0c       	add	r0, r0
    7650:	88 0b       	sbc	r24, r24
    7652:	99 0b       	sbc	r25, r25
    7654:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    7658:	9b 01       	movw	r18, r22
    765a:	ac 01       	movw	r20, r24
    765c:	c3 01       	movw	r24, r6
    765e:	b2 01       	movw	r22, r4
    7660:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    7664:	88 23       	and	r24, r24
    7666:	0c f4       	brge	.+2      	; 0x766a <mod_pump+0x84c>
    7668:	7d cd       	rjmp	.-1286   	; 0x7164 <mod_pump+0x346>
    766a:	97 c0       	rjmp	.+302    	; 0x779a <mod_pump+0x97c>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    766c:	b7 01       	movw	r22, r14
    766e:	ff 0c       	add	r15, r15
    7670:	88 0b       	sbc	r24, r24
    7672:	99 0b       	sbc	r25, r25
    7674:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    7678:	9b 01       	movw	r18, r22
    767a:	ac 01       	movw	r20, r24
    767c:	c5 01       	movw	r24, r10
    767e:	b4 01       	movw	r22, r8
    7680:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    7684:	18 16       	cp	r1, r24
    7686:	0c f4       	brge	.+2      	; 0x768a <mod_pump+0x86c>
    7688:	9f cd       	rjmp	.-1218   	; 0x71c8 <mod_pump+0x3aa>
    768a:	97 c0       	rjmp	.+302    	; 0x77ba <mod_pump+0x99c>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    768c:	b6 01       	movw	r22, r12
    768e:	dd 0c       	add	r13, r13
    7690:	88 0b       	sbc	r24, r24
    7692:	99 0b       	sbc	r25, r25
    7694:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    7698:	a3 01       	movw	r20, r6
    769a:	92 01       	movw	r18, r4
    769c:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    76a0:	88 23       	and	r24, r24
    76a2:	0c f4       	brge	.+2      	; 0x76a6 <mod_pump+0x888>
    76a4:	ad cd       	rjmp	.-1190   	; 0x7200 <mod_pump+0x3e2>
    76a6:	b8 cd       	rjmp	.-1168   	; 0x7218 <mod_pump+0x3fa>
				if(EEpromData.NombComp==2) if(comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW)&& !comp->heatingWater && comp->Heating && !comp->switchToMode){comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_again\r\n");}	
			}
			else if(comp->Index==2)
			{
				if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {calibration(comp);comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_2\r\n");}
				if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    76a8:	b7 01       	movw	r22, r14
    76aa:	ff 0c       	add	r15, r15
    76ac:	88 0b       	sbc	r24, r24
    76ae:	99 0b       	sbc	r25, r25
    76b0:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    76b4:	9b 01       	movw	r18, r22
    76b6:	ac 01       	movw	r20, r24
    76b8:	c5 01       	movw	r24, r10
    76ba:	b4 01       	movw	r22, r8
    76bc:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    76c0:	18 16       	cp	r1, r24
    76c2:	0c f4       	brge	.+2      	; 0x76c6 <mod_pump+0x8a8>
    76c4:	31 ce       	rjmp	.-926    	; 0x7328 <mod_pump+0x50a>
    76c6:	e6 c0       	rjmp	.+460    	; 0x7894 <mod_pump+0xa76>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    76c8:	4e 88       	ldd	r4, Y+22	; 0x16
    76ca:	5f 88       	ldd	r5, Y+23	; 0x17
    76cc:	68 8c       	ldd	r6, Y+24	; 0x18
    76ce:	79 8c       	ldd	r7, Y+25	; 0x19
    76d0:	f1 01       	movw	r30, r2
    76d2:	c1 8c       	ldd	r12, Z+25	; 0x19
    76d4:	d1 2c       	mov	r13, r1
    76d6:	84 8d       	ldd	r24, Z+28	; 0x1c
    76d8:	b6 01       	movw	r22, r12
    76da:	68 1b       	sub	r22, r24
    76dc:	71 09       	sbc	r23, r1
    76de:	07 2e       	mov	r0, r23
    76e0:	00 0c       	add	r0, r0
    76e2:	88 0b       	sbc	r24, r24
    76e4:	99 0b       	sbc	r25, r25
    76e6:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    76ea:	9b 01       	movw	r18, r22
    76ec:	ac 01       	movw	r20, r24
    76ee:	c3 01       	movw	r24, r6
    76f0:	b2 01       	movw	r22, r4
    76f2:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    76f6:	88 23       	and	r24, r24
    76f8:	0c f4       	brge	.+2      	; 0x76fc <mod_pump+0x8de>
    76fa:	83 ce       	rjmp	.-762    	; 0x7402 <mod_pump+0x5e4>
    76fc:	7e c0       	rjmp	.+252    	; 0x77fa <mod_pump+0x9dc>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    76fe:	b7 01       	movw	r22, r14
    7700:	ff 0c       	add	r15, r15
    7702:	88 0b       	sbc	r24, r24
    7704:	99 0b       	sbc	r25, r25
    7706:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    770a:	9b 01       	movw	r18, r22
    770c:	ac 01       	movw	r20, r24
    770e:	c5 01       	movw	r24, r10
    7710:	b4 01       	movw	r22, r8
    7712:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    7716:	18 16       	cp	r1, r24
    7718:	0c f4       	brge	.+2      	; 0x771c <mod_pump+0x8fe>
    771a:	a5 ce       	rjmp	.-694    	; 0x7466 <mod_pump+0x648>
    771c:	7e c0       	rjmp	.+252    	; 0x781a <mod_pump+0x9fc>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    771e:	b6 01       	movw	r22, r12
    7720:	dd 0c       	add	r13, r13
    7722:	88 0b       	sbc	r24, r24
    7724:	99 0b       	sbc	r25, r25
    7726:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    772a:	a3 01       	movw	r20, r6
    772c:	92 01       	movw	r18, r4
    772e:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    7732:	88 23       	and	r24, r24
    7734:	0c f4       	brge	.+2      	; 0x7738 <mod_pump+0x91a>
    7736:	b3 ce       	rjmp	.-666    	; 0x749e <mod_pump+0x680>
    7738:	be ce       	rjmp	.-644    	; 0x74b6 <mod_pump+0x698>
				if(EEpromData.NombComp==2) if (comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && comp->Cooling && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}	
			}
			else if(comp->Index==2)
			{
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
    773a:	f1 01       	movw	r30, r2
    773c:	85 8d       	ldd	r24, Z+29	; 0x1d
    773e:	b7 01       	movw	r22, r14
    7740:	68 0f       	add	r22, r24
    7742:	71 1d       	adc	r23, r1
    7744:	07 2e       	mov	r0, r23
    7746:	00 0c       	add	r0, r0
    7748:	88 0b       	sbc	r24, r24
    774a:	99 0b       	sbc	r25, r25
    774c:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    7750:	9b 01       	movw	r18, r22
    7752:	ac 01       	movw	r20, r24
    7754:	c5 01       	movw	r24, r10
    7756:	b4 01       	movw	r22, r8
    7758:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    775c:	18 16       	cp	r1, r24
    775e:	0c f4       	brge	.+2      	; 0x7762 <mod_pump+0x944>
    7760:	17 cf       	rjmp	.-466    	; 0x7590 <mod_pump+0x772>
    7762:	98 c0       	rjmp	.+304    	; 0x7894 <mod_pump+0xa76>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    7764:	4e 88       	ldd	r4, Y+22	; 0x16
    7766:	5f 88       	ldd	r5, Y+23	; 0x17
    7768:	68 8c       	ldd	r6, Y+24	; 0x18
    776a:	79 8c       	ldd	r7, Y+25	; 0x19
    776c:	f1 01       	movw	r30, r2
    776e:	c1 8c       	ldd	r12, Z+25	; 0x19
    7770:	d1 2c       	mov	r13, r1
    7772:	84 8d       	ldd	r24, Z+28	; 0x1c
    7774:	b6 01       	movw	r22, r12
    7776:	68 1b       	sub	r22, r24
    7778:	71 09       	sbc	r23, r1
    777a:	07 2e       	mov	r0, r23
    777c:	00 0c       	add	r0, r0
    777e:	88 0b       	sbc	r24, r24
    7780:	99 0b       	sbc	r25, r25
    7782:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    7786:	9b 01       	movw	r18, r22
    7788:	ac 01       	movw	r20, r24
    778a:	c3 01       	movw	r24, r6
    778c:	b2 01       	movw	r22, r4
    778e:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    7792:	88 23       	and	r24, r24
    7794:	0c f4       	brge	.+2      	; 0x7798 <mod_pump+0x97a>
    7796:	6a cf       	rjmp	.-300    	; 0x766c <mod_pump+0x84e>
    7798:	05 cd       	rjmp	.-1526   	; 0x71a4 <mod_pump+0x386>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    779a:	b7 01       	movw	r22, r14
    779c:	ff 0c       	add	r15, r15
    779e:	88 0b       	sbc	r24, r24
    77a0:	99 0b       	sbc	r25, r25
    77a2:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    77a6:	9b 01       	movw	r18, r22
    77a8:	ac 01       	movw	r20, r24
    77aa:	c5 01       	movw	r24, r10
    77ac:	b4 01       	movw	r22, r8
    77ae:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    77b2:	18 16       	cp	r1, r24
    77b4:	0c f4       	brge	.+2      	; 0x77b8 <mod_pump+0x99a>
    77b6:	6a cf       	rjmp	.-300    	; 0x768c <mod_pump+0x86e>
    77b8:	14 cd       	rjmp	.-1496   	; 0x71e2 <mod_pump+0x3c4>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    77ba:	b6 01       	movw	r22, r12
    77bc:	dd 0c       	add	r13, r13
    77be:	88 0b       	sbc	r24, r24
    77c0:	99 0b       	sbc	r25, r25
    77c2:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    77c6:	28 cd       	rjmp	.-1456   	; 0x7218 <mod_pump+0x3fa>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    77c8:	4e 88       	ldd	r4, Y+22	; 0x16
    77ca:	5f 88       	ldd	r5, Y+23	; 0x17
    77cc:	68 8c       	ldd	r6, Y+24	; 0x18
    77ce:	79 8c       	ldd	r7, Y+25	; 0x19
    77d0:	f1 01       	movw	r30, r2
    77d2:	c1 8c       	ldd	r12, Z+25	; 0x19
    77d4:	d1 2c       	mov	r13, r1
    77d6:	84 8d       	ldd	r24, Z+28	; 0x1c
    77d8:	b6 01       	movw	r22, r12
    77da:	68 1b       	sub	r22, r24
    77dc:	71 09       	sbc	r23, r1
    77de:	07 2e       	mov	r0, r23
    77e0:	00 0c       	add	r0, r0
    77e2:	88 0b       	sbc	r24, r24
    77e4:	99 0b       	sbc	r25, r25
    77e6:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    77ea:	a3 01       	movw	r20, r6
    77ec:	92 01       	movw	r18, r4
    77ee:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    77f2:	18 16       	cp	r1, r24
    77f4:	0c f4       	brge	.+2      	; 0x77f8 <mod_pump+0x9da>
    77f6:	83 cf       	rjmp	.-250    	; 0x76fe <mod_pump+0x8e0>
    77f8:	24 ce       	rjmp	.-952    	; 0x7442 <mod_pump+0x624>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    77fa:	b7 01       	movw	r22, r14
    77fc:	ff 0c       	add	r15, r15
    77fe:	88 0b       	sbc	r24, r24
    7800:	99 0b       	sbc	r25, r25
    7802:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    7806:	9b 01       	movw	r18, r22
    7808:	ac 01       	movw	r20, r24
    780a:	c5 01       	movw	r24, r10
    780c:	b4 01       	movw	r22, r8
    780e:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    7812:	18 16       	cp	r1, r24
    7814:	0c f4       	brge	.+2      	; 0x7818 <mod_pump+0x9fa>
    7816:	83 cf       	rjmp	.-250    	; 0x771e <mod_pump+0x900>
    7818:	33 ce       	rjmp	.-922    	; 0x7480 <mod_pump+0x662>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    781a:	b6 01       	movw	r22, r12
    781c:	dd 0c       	add	r13, r13
    781e:	88 0b       	sbc	r24, r24
    7820:	99 0b       	sbc	r25, r25
    7822:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    7826:	47 ce       	rjmp	.-882    	; 0x74b6 <mod_pump+0x698>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    7828:	4e 88       	ldd	r4, Y+22	; 0x16
    782a:	5f 88       	ldd	r5, Y+23	; 0x17
    782c:	68 8c       	ldd	r6, Y+24	; 0x18
    782e:	79 8c       	ldd	r7, Y+25	; 0x19
    7830:	f1 01       	movw	r30, r2
    7832:	c1 8c       	ldd	r12, Z+25	; 0x19
    7834:	d1 2c       	mov	r13, r1
    7836:	84 8d       	ldd	r24, Z+28	; 0x1c
    7838:	b6 01       	movw	r22, r12
    783a:	68 1b       	sub	r22, r24
    783c:	71 09       	sbc	r23, r1
    783e:	07 2e       	mov	r0, r23
    7840:	00 0c       	add	r0, r0
    7842:	88 0b       	sbc	r24, r24
    7844:	99 0b       	sbc	r25, r25
    7846:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    784a:	9b 01       	movw	r18, r22
    784c:	ac 01       	movw	r20, r24
    784e:	c3 01       	movw	r24, r6
    7850:	b2 01       	movw	r22, r4
    7852:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    7856:	88 23       	and	r24, r24
    7858:	0c f4       	brge	.+2      	; 0x785c <mod_pump+0xa3e>
    785a:	87 cc       	rjmp	.-1778   	; 0x716a <mod_pump+0x34c>
    785c:	9e cf       	rjmp	.-196    	; 0x779a <mod_pump+0x97c>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    785e:	4e 88       	ldd	r4, Y+22	; 0x16
    7860:	5f 88       	ldd	r5, Y+23	; 0x17
    7862:	68 8c       	ldd	r6, Y+24	; 0x18
    7864:	79 8c       	ldd	r7, Y+25	; 0x19
    7866:	f1 01       	movw	r30, r2
    7868:	c1 8c       	ldd	r12, Z+25	; 0x19
    786a:	d1 2c       	mov	r13, r1
    786c:	84 8d       	ldd	r24, Z+28	; 0x1c
    786e:	b6 01       	movw	r22, r12
    7870:	68 1b       	sub	r22, r24
    7872:	71 09       	sbc	r23, r1
    7874:	07 2e       	mov	r0, r23
    7876:	00 0c       	add	r0, r0
    7878:	88 0b       	sbc	r24, r24
    787a:	99 0b       	sbc	r25, r25
    787c:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    7880:	9b 01       	movw	r18, r22
    7882:	ac 01       	movw	r20, r24
    7884:	c3 01       	movw	r24, r6
    7886:	b2 01       	movw	r22, r4
    7888:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    788c:	88 23       	and	r24, r24
    788e:	0c f4       	brge	.+2      	; 0x7892 <mod_pump+0xa74>
    7890:	bb cd       	rjmp	.-1162   	; 0x7408 <mod_pump+0x5ea>
    7892:	b3 cf       	rjmp	.-154    	; 0x77fa <mod_pump+0x9dc>
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
			}
		}break;
	}
}
    7894:	df 91       	pop	r29
    7896:	cf 91       	pop	r28
    7898:	1f 91       	pop	r17
    789a:	ff 90       	pop	r15
    789c:	ef 90       	pop	r14
    789e:	df 90       	pop	r13
    78a0:	cf 90       	pop	r12
    78a2:	bf 90       	pop	r11
    78a4:	af 90       	pop	r10
    78a6:	9f 90       	pop	r9
    78a8:	8f 90       	pop	r8
    78aa:	7f 90       	pop	r7
    78ac:	6f 90       	pop	r6
    78ae:	5f 90       	pop	r5
    78b0:	4f 90       	pop	r4
    78b2:	3f 90       	pop	r3
    78b4:	2f 90       	pop	r2
    78b6:	08 95       	ret

000078b8 <initPins>:
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void initPins()
{

	DDRG |= (_BV(PG4) | _BV(PG3));
    78b8:	83 b3       	in	r24, 0x13	; 19
    78ba:	88 61       	ori	r24, 0x18	; 24
    78bc:	83 bb       	out	0x13, r24	; 19
	DDRH |= (_BV(PH7) | _BV(PH6) | _BV(PH5) | _BV(PH4) | _BV(PH3) | _BV(PH1) | _BV(PH2));
    78be:	e1 e0       	ldi	r30, 0x01	; 1
    78c0:	f1 e0       	ldi	r31, 0x01	; 1
    78c2:	80 81       	ld	r24, Z
    78c4:	8e 6f       	ori	r24, 0xFE	; 254
    78c6:	80 83       	st	Z, r24
	DDRL |= (_BV(PL2) | _BV(PL1) | _BV(PL0));
    78c8:	ea e0       	ldi	r30, 0x0A	; 10
    78ca:	f1 e0       	ldi	r31, 0x01	; 1
    78cc:	80 81       	ld	r24, Z
    78ce:	87 60       	ori	r24, 0x07	; 7
    78d0:	80 83       	st	Z, r24
	DDRD &= (_BV(PD2) | _BV(PD3));
    78d2:	8a b1       	in	r24, 0x0a	; 10
    78d4:	8c 70       	andi	r24, 0x0C	; 12
    78d6:	8a b9       	out	0x0a, r24	; 10
	DDRE &= (_BV(PE5));
    78d8:	8d b1       	in	r24, 0x0d	; 13
    78da:	80 72       	andi	r24, 0x20	; 32
    78dc:	8d b9       	out	0x0d, r24	; 13
	DDRA = 0xFF;
    78de:	8f ef       	ldi	r24, 0xFF	; 255
    78e0:	81 b9       	out	0x01, r24	; 1
	PORTD|= (_BV(PD2) | _BV(PD3));
    78e2:	8b b1       	in	r24, 0x0b	; 11
    78e4:	8c 60       	ori	r24, 0x0C	; 12
    78e6:	8b b9       	out	0x0b, r24	; 11
	PORTE|= (_BV(PE5));
    78e8:	75 9a       	sbi	0x0e, 5	; 14
	
    DDRJ|= (_BV(PIN_rs485));
    78ea:	e4 e0       	ldi	r30, 0x04	; 4
    78ec:	f1 e0       	ldi	r31, 0x01	; 1
    78ee:	80 81       	ld	r24, Z
    78f0:	84 60       	ori	r24, 0x04	; 4
    78f2:	80 83       	st	Z, r24
    78f4:	08 95       	ret

000078f6 <ConvertToTemp>:
	return (ADC_value - Low_Limit_HP) * HP_max/ (Hi_Limit_HP - Low_Limit_HP);
}

float ConvertToLowPress(uint16_t ADC_value){
	return (ADC_value - Low_Limit_LP) * LP_max/ (Hi_Limit_LP - Low_Limit_LP) ;
}
    78f6:	8f 92       	push	r8
    78f8:	9f 92       	push	r9
    78fa:	af 92       	push	r10
    78fc:	bf 92       	push	r11
    78fe:	cf 92       	push	r12
    7900:	df 92       	push	r13
    7902:	ef 92       	push	r14
    7904:	ff 92       	push	r15
    7906:	bc 01       	movw	r22, r24
    7908:	80 e0       	ldi	r24, 0x00	; 0
    790a:	90 e0       	ldi	r25, 0x00	; 0
    790c:	0e 94 c8 52 	call	0xa590	; 0xa590 <__floatunsisf>
    7910:	9b 01       	movw	r18, r22
    7912:	ac 01       	movw	r20, r24
    7914:	60 e0       	ldi	r22, 0x00	; 0
    7916:	70 ec       	ldi	r23, 0xC0	; 192
    7918:	8f e7       	ldi	r24, 0x7F	; 127
    791a:	94 e4       	ldi	r25, 0x44	; 68
    791c:	0e 94 2f 52 	call	0xa45e	; 0xa45e <__divsf3>
    7920:	20 e0       	ldi	r18, 0x00	; 0
    7922:	30 e0       	ldi	r19, 0x00	; 0
    7924:	40 e8       	ldi	r20, 0x80	; 128
    7926:	5f e3       	ldi	r21, 0x3F	; 63
    7928:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    792c:	20 e0       	ldi	r18, 0x00	; 0
    792e:	30 e4       	ldi	r19, 0x40	; 64
    7930:	4c e1       	ldi	r20, 0x1C	; 28
    7932:	56 e4       	ldi	r21, 0x46	; 70
    7934:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7938:	0e 94 83 53 	call	0xa706	; 0xa706 <log>
    793c:	6b 01       	movw	r12, r22
    793e:	7c 01       	movw	r14, r24
    7940:	29 e5       	ldi	r18, 0x59	; 89
    7942:	37 e4       	ldi	r19, 0x47	; 71
    7944:	4c eb       	ldi	r20, 0xBC	; 188
    7946:	53 e3       	ldi	r21, 0x33	; 51
    7948:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    794c:	a7 01       	movw	r20, r14
    794e:	96 01       	movw	r18, r12
    7950:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7954:	a7 01       	movw	r20, r14
    7956:	96 01       	movw	r18, r12
    7958:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    795c:	4b 01       	movw	r8, r22
    795e:	5c 01       	movw	r10, r24
    7960:	2b e0       	ldi	r18, 0x0B	; 11
    7962:	31 ee       	ldi	r19, 0xE1	; 225
    7964:	45 e7       	ldi	r20, 0x75	; 117
    7966:	59 e3       	ldi	r21, 0x39	; 57
    7968:	c7 01       	movw	r24, r14
    796a:	b6 01       	movw	r22, r12
    796c:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7970:	29 ed       	ldi	r18, 0xD9	; 217
    7972:	3d ea       	ldi	r19, 0xAD	; 173
    7974:	49 ea       	ldi	r20, 0xA9	; 169
    7976:	5a e3       	ldi	r21, 0x3A	; 58
    7978:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    797c:	9b 01       	movw	r18, r22
    797e:	ac 01       	movw	r20, r24
    7980:	c5 01       	movw	r24, r10
    7982:	b4 01       	movw	r22, r8
    7984:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    7988:	9b 01       	movw	r18, r22
    798a:	ac 01       	movw	r20, r24
    798c:	60 e0       	ldi	r22, 0x00	; 0
    798e:	70 e0       	ldi	r23, 0x00	; 0
    7990:	80 e8       	ldi	r24, 0x80	; 128
    7992:	9f e3       	ldi	r25, 0x3F	; 63
    7994:	0e 94 2f 52 	call	0xa45e	; 0xa45e <__divsf3>
    7998:	23 e3       	ldi	r18, 0x33	; 51
    799a:	33 e9       	ldi	r19, 0x93	; 147
    799c:	48 e8       	ldi	r20, 0x88	; 136
    799e:	53 e4       	ldi	r21, 0x43	; 67
    79a0:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    79a4:	ff 90       	pop	r15
    79a6:	ef 90       	pop	r14
    79a8:	df 90       	pop	r13
    79aa:	cf 90       	pop	r12
    79ac:	bf 90       	pop	r11
    79ae:	af 90       	pop	r10
    79b0:	9f 90       	pop	r9
    79b2:	8f 90       	pop	r8
    79b4:	08 95       	ret

000079b6 <ReadSuperHeat>:
					}

return;	
}

float  ReadSuperHeat (xCompressor *comp){
    79b6:	4f 92       	push	r4
    79b8:	5f 92       	push	r5
    79ba:	6f 92       	push	r6
    79bc:	7f 92       	push	r7
    79be:	8f 92       	push	r8
    79c0:	9f 92       	push	r9
    79c2:	af 92       	push	r10
    79c4:	bf 92       	push	r11
    79c6:	cf 92       	push	r12
    79c8:	df 92       	push	r13
    79ca:	ef 92       	push	r14
    79cc:	ff 92       	push	r15
    79ce:	cf 93       	push	r28
    79d0:	df 93       	push	r29
    79d2:	ec 01       	movw	r28, r24
	float Val, Next_val, Span, Saturation_Temp, decimals, work;
	int I;
	work = ((comp->Low_Press - 1.0) / 1.0);
    79d4:	20 e0       	ldi	r18, 0x00	; 0
    79d6:	30 e0       	ldi	r19, 0x00	; 0
    79d8:	40 e8       	ldi	r20, 0x80	; 128
    79da:	5f e3       	ldi	r21, 0x3F	; 63
    79dc:	6e 8d       	ldd	r22, Y+30	; 0x1e
    79de:	7f 8d       	ldd	r23, Y+31	; 0x1f
    79e0:	88 a1       	ldd	r24, Y+32	; 0x20
    79e2:	99 a1       	ldd	r25, Y+33	; 0x21
    79e4:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    79e8:	4b 01       	movw	r8, r22
    79ea:	5c 01       	movw	r10, r24
	I = work;                                //drop decimals to get array index
    79ec:	0e 94 97 52 	call	0xa52e	; 0xa52e <__fixsfsi>
	decimals = work - I; //restore decimals for interpolation between array points
	Val = pgm_read_float(&R22_Saturation_Temp[I]);           //get array value
    79f0:	fb 01       	movw	r30, r22
    79f2:	ee 0f       	add	r30, r30
    79f4:	ff 1f       	adc	r31, r31
    79f6:	ee 0f       	add	r30, r30
    79f8:	ff 1f       	adc	r31, r31
    79fa:	e0 51       	subi	r30, 0x10	; 16
    79fc:	f6 4f       	sbci	r31, 0xF6	; 246
    79fe:	c5 90       	lpm	r12, Z+
    7a00:	d5 90       	lpm	r13, Z+
    7a02:	e5 90       	lpm	r14, Z+
    7a04:	f4 90       	lpm	r15, Z
	Next_val = pgm_read_float(&R22_Saturation_Temp[I + 1]);  //get Next array value
    7a06:	fb 01       	movw	r30, r22
    7a08:	31 96       	adiw	r30, 0x01	; 1
    7a0a:	ee 0f       	add	r30, r30
    7a0c:	ff 1f       	adc	r31, r31
    7a0e:	ee 0f       	add	r30, r30
    7a10:	ff 1f       	adc	r31, r31
    7a12:	e0 51       	subi	r30, 0x10	; 16
    7a14:	f6 4f       	sbci	r31, 0xF6	; 246
    7a16:	45 90       	lpm	r4, Z+
    7a18:	55 90       	lpm	r5, Z+
    7a1a:	65 90       	lpm	r6, Z+
    7a1c:	74 90       	lpm	r7, Z
	Span = Next_val - Val;                  //Calc Span
	Saturation_Temp = Val + (Span * decimals);//interpolate between array points
		
	return(comp->Suc_Comp - Saturation_Temp);// Suct_T - Saturation_Temp;
    7a1e:	ee 96       	adiw	r28, 0x3e	; 62
    7a20:	07 2e       	mov	r0, r23
    7a22:	00 0c       	add	r0, r0
    7a24:	88 0b       	sbc	r24, r24
    7a26:	99 0b       	sbc	r25, r25
    7a28:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    7a2c:	9b 01       	movw	r18, r22
    7a2e:	ac 01       	movw	r20, r24
    7a30:	c5 01       	movw	r24, r10
    7a32:	b4 01       	movw	r22, r8
    7a34:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    7a38:	4b 01       	movw	r8, r22
    7a3a:	5c 01       	movw	r10, r24
    7a3c:	a7 01       	movw	r20, r14
    7a3e:	96 01       	movw	r18, r12
    7a40:	c3 01       	movw	r24, r6
    7a42:	b2 01       	movw	r22, r4
    7a44:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    7a48:	9b 01       	movw	r18, r22
    7a4a:	ac 01       	movw	r20, r24
    7a4c:	c5 01       	movw	r24, r10
    7a4e:	b4 01       	movw	r22, r8
    7a50:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7a54:	a7 01       	movw	r20, r14
    7a56:	96 01       	movw	r18, r12
    7a58:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    7a5c:	9b 01       	movw	r18, r22
    7a5e:	ac 01       	movw	r20, r24
    7a60:	68 81       	ld	r22, Y
    7a62:	79 81       	ldd	r23, Y+1	; 0x01
    7a64:	8a 81       	ldd	r24, Y+2	; 0x02
    7a66:	9b 81       	ldd	r25, Y+3	; 0x03
    7a68:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>

}
    7a6c:	df 91       	pop	r29
    7a6e:	cf 91       	pop	r28
    7a70:	ff 90       	pop	r15
    7a72:	ef 90       	pop	r14
    7a74:	df 90       	pop	r13
    7a76:	cf 90       	pop	r12
    7a78:	bf 90       	pop	r11
    7a7a:	af 90       	pop	r10
    7a7c:	9f 90       	pop	r9
    7a7e:	8f 90       	pop	r8
    7a80:	7f 90       	pop	r7
    7a82:	6f 90       	pop	r6
    7a84:	5f 90       	pop	r5
    7a86:	4f 90       	pop	r4
    7a88:	08 95       	ret

00007a8a <ReadSuperCool>:
float ReadSuperCool (xCompressor *comp){
    7a8a:	4f 92       	push	r4
    7a8c:	5f 92       	push	r5
    7a8e:	6f 92       	push	r6
    7a90:	7f 92       	push	r7
    7a92:	8f 92       	push	r8
    7a94:	9f 92       	push	r9
    7a96:	af 92       	push	r10
    7a98:	bf 92       	push	r11
    7a9a:	cf 92       	push	r12
    7a9c:	df 92       	push	r13
    7a9e:	ef 92       	push	r14
    7aa0:	ff 92       	push	r15
    7aa2:	cf 93       	push	r28
    7aa4:	df 93       	push	r29
    7aa6:	ec 01       	movw	r28, r24
	float Val, Next_val, Span, Saturation_Temp, decimals, work;
	int I;
	work = ((comp->High_Press - 1.0) / 1.0);
    7aa8:	20 e0       	ldi	r18, 0x00	; 0
    7aaa:	30 e0       	ldi	r19, 0x00	; 0
    7aac:	40 e8       	ldi	r20, 0x80	; 128
    7aae:	5f e3       	ldi	r21, 0x3F	; 63
    7ab0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    7ab2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    7ab4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7ab6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    7ab8:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    7abc:	4b 01       	movw	r8, r22
    7abe:	5c 01       	movw	r10, r24

	I = work;                                //drop decimals to get array index
    7ac0:	0e 94 97 52 	call	0xa52e	; 0xa52e <__fixsfsi>

	decimals = work - I; //restore decimals for interpolation between array points
	Val = pgm_read_float(&R22_Saturation_Temp[I]);           //get array value
    7ac4:	fb 01       	movw	r30, r22
    7ac6:	ee 0f       	add	r30, r30
    7ac8:	ff 1f       	adc	r31, r31
    7aca:	ee 0f       	add	r30, r30
    7acc:	ff 1f       	adc	r31, r31
    7ace:	e0 51       	subi	r30, 0x10	; 16
    7ad0:	f6 4f       	sbci	r31, 0xF6	; 246
    7ad2:	c5 90       	lpm	r12, Z+
    7ad4:	d5 90       	lpm	r13, Z+
    7ad6:	e5 90       	lpm	r14, Z+
    7ad8:	f4 90       	lpm	r15, Z
	Next_val = pgm_read_float(&R22_Saturation_Temp[I + 1]);  //get Next array value
    7ada:	fb 01       	movw	r30, r22
    7adc:	31 96       	adiw	r30, 0x01	; 1
    7ade:	ee 0f       	add	r30, r30
    7ae0:	ff 1f       	adc	r31, r31
    7ae2:	ee 0f       	add	r30, r30
    7ae4:	ff 1f       	adc	r31, r31
    7ae6:	e0 51       	subi	r30, 0x10	; 16
    7ae8:	f6 4f       	sbci	r31, 0xF6	; 246
    7aea:	45 90       	lpm	r4, Z+
    7aec:	55 90       	lpm	r5, Z+
    7aee:	65 90       	lpm	r6, Z+
    7af0:	74 90       	lpm	r7, Z
	Span = Next_val - Val;                   //Calc Span
	Saturation_Temp = Val + (Span * decimals);//interpolate between array points
	
    return(Saturation_Temp - comp->Cond_Temp);// Suct_T - Saturation_Temp;	
    7af2:	07 2e       	mov	r0, r23
    7af4:	00 0c       	add	r0, r0
    7af6:	88 0b       	sbc	r24, r24
    7af8:	99 0b       	sbc	r25, r25
    7afa:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    7afe:	9b 01       	movw	r18, r22
    7b00:	ac 01       	movw	r20, r24
    7b02:	c5 01       	movw	r24, r10
    7b04:	b4 01       	movw	r22, r8
    7b06:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    7b0a:	4b 01       	movw	r8, r22
    7b0c:	5c 01       	movw	r10, r24
    7b0e:	a7 01       	movw	r20, r14
    7b10:	96 01       	movw	r18, r12
    7b12:	c3 01       	movw	r24, r6
    7b14:	b2 01       	movw	r22, r4
    7b16:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    7b1a:	9b 01       	movw	r18, r22
    7b1c:	ac 01       	movw	r20, r24
    7b1e:	c5 01       	movw	r24, r10
    7b20:	b4 01       	movw	r22, r8
    7b22:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7b26:	a7 01       	movw	r20, r14
    7b28:	96 01       	movw	r18, r12
    7b2a:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    7b2e:	ce 5b       	subi	r28, 0xBE	; 190
    7b30:	df 4f       	sbci	r29, 0xFF	; 255
    7b32:	28 81       	ld	r18, Y
    7b34:	39 81       	ldd	r19, Y+1	; 0x01
    7b36:	4a 81       	ldd	r20, Y+2	; 0x02
    7b38:	5b 81       	ldd	r21, Y+3	; 0x03
    7b3a:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
}
    7b3e:	df 91       	pop	r29
    7b40:	cf 91       	pop	r28
    7b42:	ff 90       	pop	r15
    7b44:	ef 90       	pop	r14
    7b46:	df 90       	pop	r13
    7b48:	cf 90       	pop	r12
    7b4a:	bf 90       	pop	r11
    7b4c:	af 90       	pop	r10
    7b4e:	9f 90       	pop	r9
    7b50:	8f 90       	pop	r8
    7b52:	7f 90       	pop	r7
    7b54:	6f 90       	pop	r6
    7b56:	5f 90       	pop	r5
    7b58:	4f 90       	pop	r4
    7b5a:	08 95       	ret

00007b5c <corectTrv>:
//-------------------------------------------------------------
float  corectTrv(xCompressor *comp){
    7b5c:	4f 92       	push	r4
    7b5e:	5f 92       	push	r5
    7b60:	6f 92       	push	r6
    7b62:	7f 92       	push	r7
    7b64:	8f 92       	push	r8
    7b66:	9f 92       	push	r9
    7b68:	af 92       	push	r10
    7b6a:	bf 92       	push	r11
    7b6c:	cf 92       	push	r12
    7b6e:	df 92       	push	r13
    7b70:	ef 92       	push	r14
    7b72:	ff 92       	push	r15
    7b74:	cf 93       	push	r28
    7b76:	df 93       	push	r29
	static float Superheat_old=0;
	int SSet;
	float ds;
	float Superheat;
	Superheat=comp->SuperHeat;
    7b78:	8a 5b       	subi	r24, 0xBA	; 186
    7b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    7b7c:	fc 01       	movw	r30, r24
    7b7e:	c0 80       	ld	r12, Z
    7b80:	d1 80       	ldd	r13, Z+1	; 0x01
    7b82:	e2 80       	ldd	r14, Z+2	; 0x02
    7b84:	f3 80       	ldd	r15, Z+3	; 0x03
	ds = Superheat - Superheat_old; // calculate the change in Superheat
    7b86:	20 91 c1 07 	lds	r18, 0x07C1	; 0x8007c1 <Superheat_old.3263>
    7b8a:	30 91 c2 07 	lds	r19, 0x07C2	; 0x8007c2 <Superheat_old.3263+0x1>
    7b8e:	40 91 c3 07 	lds	r20, 0x07C3	; 0x8007c3 <Superheat_old.3263+0x2>
    7b92:	50 91 c4 07 	lds	r21, 0x07C4	; 0x8007c4 <Superheat_old.3263+0x3>
    7b96:	c7 01       	movw	r24, r14
    7b98:	b6 01       	movw	r22, r12
    7b9a:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
	ds = ds * 2; // scaling factor for DS
    7b9e:	9b 01       	movw	r18, r22
    7ba0:	ac 01       	movw	r20, r24
    7ba2:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    7ba6:	4b 01       	movw	r8, r22
    7ba8:	5c 01       	movw	r10, r24
	SSet=7;

	// Variable sampling rate --------------------------------------------
	int  k = 1; // Gain for the steps

	if ( Superheat - SSet > 3)
    7baa:	20 e0       	ldi	r18, 0x00	; 0
    7bac:	30 e0       	ldi	r19, 0x00	; 0
    7bae:	40 ee       	ldi	r20, 0xE0	; 224
    7bb0:	50 e4       	ldi	r21, 0x40	; 64
    7bb2:	c7 01       	movw	r24, r14
    7bb4:	b6 01       	movw	r22, r12
    7bb6:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    7bba:	2b 01       	movw	r4, r22
    7bbc:	3c 01       	movw	r6, r24
    7bbe:	20 e0       	ldi	r18, 0x00	; 0
    7bc0:	30 e0       	ldi	r19, 0x00	; 0
    7bc2:	40 e4       	ldi	r20, 0x40	; 64
    7bc4:	50 e4       	ldi	r21, 0x40	; 64
    7bc6:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    7bca:	18 16       	cp	r1, r24
    7bcc:	e4 f4       	brge	.+56     	; 0x7c06 <corectTrv+0xaa>
	{
		if (ds > 2 || ds < -2)
    7bce:	20 e0       	ldi	r18, 0x00	; 0
    7bd0:	30 e0       	ldi	r19, 0x00	; 0
    7bd2:	40 e0       	ldi	r20, 0x00	; 0
    7bd4:	50 e4       	ldi	r21, 0x40	; 64
    7bd6:	c5 01       	movw	r24, r10
    7bd8:	b4 01       	movw	r22, r8
    7bda:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    7bde:	18 16       	cp	r1, r24
    7be0:	ac f0       	brlt	.+42     	; 0x7c0c <corectTrv+0xb0>
    7be2:	20 e0       	ldi	r18, 0x00	; 0
    7be4:	30 e0       	ldi	r19, 0x00	; 0
    7be6:	40 e0       	ldi	r20, 0x00	; 0
    7be8:	50 ec       	ldi	r21, 0xC0	; 192
    7bea:	c5 01       	movw	r24, r10
    7bec:	b4 01       	movw	r22, r8
    7bee:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
	ds = Superheat - Superheat_old; // calculate the change in Superheat
	ds = ds * 2; // scaling factor for DS
	SSet=7;

	// Variable sampling rate --------------------------------------------
	int  k = 1; // Gain for the steps
    7bf2:	68 2f       	mov	r22, r24
    7bf4:	88 0f       	add	r24, r24
    7bf6:	77 0b       	sbc	r23, r23
    7bf8:	eb 01       	movw	r28, r22
    7bfa:	cc 27       	eor	r28, r28
    7bfc:	dd 0f       	add	r29, r29
    7bfe:	cc 1f       	adc	r28, r28
    7c00:	dd 27       	eor	r29, r29
    7c02:	21 96       	adiw	r28, 0x01	; 1
    7c04:	05 c0       	rjmp	.+10     	; 0x7c10 <corectTrv+0xb4>
    7c06:	c1 e0       	ldi	r28, 0x01	; 1
    7c08:	d0 e0       	ldi	r29, 0x00	; 0
    7c0a:	02 c0       	rjmp	.+4      	; 0x7c10 <corectTrv+0xb4>
	if ( Superheat - SSet > 3)
	{
		if (ds > 2 || ds < -2)

		{
			k = 2; // Gain for the steps
    7c0c:	c2 e0       	ldi	r28, 0x02	; 2
    7c0e:	d0 e0       	ldi	r29, 0x00	; 0
			
		}
	}

	if ( Superheat - SSet >= 5)
    7c10:	20 e0       	ldi	r18, 0x00	; 0
    7c12:	30 e0       	ldi	r19, 0x00	; 0
    7c14:	40 ea       	ldi	r20, 0xA0	; 160
    7c16:	50 e4       	ldi	r21, 0x40	; 64
    7c18:	c3 01       	movw	r24, r6
    7c1a:	b2 01       	movw	r22, r4
    7c1c:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    7c20:	88 23       	and	r24, r24
    7c22:	cc f0       	brlt	.+50     	; 0x7c56 <corectTrv+0xfa>
	{
		if (ds > 2 || ds < -2)
    7c24:	20 e0       	ldi	r18, 0x00	; 0
    7c26:	30 e0       	ldi	r19, 0x00	; 0
    7c28:	40 e0       	ldi	r20, 0x00	; 0
    7c2a:	50 e4       	ldi	r21, 0x40	; 64
    7c2c:	c5 01       	movw	r24, r10
    7c2e:	b4 01       	movw	r22, r8
    7c30:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    7c34:	18 16       	cp	r1, r24
    7c36:	6c f0       	brlt	.+26     	; 0x7c52 <corectTrv+0xf6>
    7c38:	20 e0       	ldi	r18, 0x00	; 0
    7c3a:	30 e0       	ldi	r19, 0x00	; 0
    7c3c:	40 e0       	ldi	r20, 0x00	; 0
    7c3e:	50 ec       	ldi	r21, 0xC0	; 192
    7c40:	c5 01       	movw	r24, r10
    7c42:	b4 01       	movw	r22, r8
    7c44:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    7c48:	88 23       	and	r24, r24
    7c4a:	2c f4       	brge	.+10     	; 0x7c56 <corectTrv+0xfa>
		{
			k = 3; // Gain for the steps
    7c4c:	c3 e0       	ldi	r28, 0x03	; 3
    7c4e:	d0 e0       	ldi	r29, 0x00	; 0
    7c50:	02 c0       	rjmp	.+4      	; 0x7c56 <corectTrv+0xfa>
    7c52:	c3 e0       	ldi	r28, 0x03	; 3
    7c54:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}

	//------------------------

	if (Superheat < SSet)
    7c56:	20 e0       	ldi	r18, 0x00	; 0
    7c58:	30 e0       	ldi	r19, 0x00	; 0
    7c5a:	40 ee       	ldi	r20, 0xE0	; 224
    7c5c:	50 e4       	ldi	r21, 0x40	; 64
    7c5e:	c7 01       	movw	r24, r14
    7c60:	b6 01       	movw	r22, r12
    7c62:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    7c66:	88 23       	and	r24, r24
    7c68:	84 f4       	brge	.+32     	; 0x7c8a <corectTrv+0x12e>
	{
		k = -1; // if the Superheat is too low, this gain changes the step direction
		Superheat = SSet + 10 - Superheat;
    7c6a:	a7 01       	movw	r20, r14
    7c6c:	96 01       	movw	r18, r12
    7c6e:	60 e0       	ldi	r22, 0x00	; 0
    7c70:	70 e0       	ldi	r23, 0x00	; 0
    7c72:	88 e8       	ldi	r24, 0x88	; 136
    7c74:	91 e4       	ldi	r25, 0x41	; 65
    7c76:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    7c7a:	6b 01       	movw	r12, r22
    7c7c:	7c 01       	movw	r14, r24
		ds = -ds;
    7c7e:	b7 fa       	bst	r11, 7
    7c80:	b0 94       	com	r11
    7c82:	b7 f8       	bld	r11, 7
    7c84:	b0 94       	com	r11

	//------------------------

	if (Superheat < SSet)
	{
		k = -1; // if the Superheat is too low, this gain changes the step direction
    7c86:	cf ef       	ldi	r28, 0xFF	; 255
    7c88:	df ef       	ldi	r29, 0xFF	; 255
		Superheat = SSet + 10 - Superheat;
		ds = -ds;
	}
	
	Superheat_old = Superheat;
    7c8a:	c0 92 c1 07 	sts	0x07C1, r12	; 0x8007c1 <Superheat_old.3263>
    7c8e:	d0 92 c2 07 	sts	0x07C2, r13	; 0x8007c2 <Superheat_old.3263+0x1>
    7c92:	e0 92 c3 07 	sts	0x07C3, r14	; 0x8007c3 <Superheat_old.3263+0x2>
    7c96:	f0 92 c4 07 	sts	0x07C4, r15	; 0x8007c4 <Superheat_old.3263+0x3>
	
	if (ds > 20)
    7c9a:	20 e0       	ldi	r18, 0x00	; 0
    7c9c:	30 e0       	ldi	r19, 0x00	; 0
    7c9e:	40 ea       	ldi	r20, 0xA0	; 160
    7ca0:	51 e4       	ldi	r21, 0x41	; 65
    7ca2:	c5 01       	movw	r24, r10
    7ca4:	b4 01       	movw	r22, r8
    7ca6:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    7caa:	18 16       	cp	r1, r24
    7cac:	14 f4       	brge	.+4      	; 0x7cb2 <corectTrv+0x156>
    7cae:	0c 94 f8 48 	jmp	0x91f0	; 0x91f0 <corectTrv+0x1694>
	{
		ds = 20;
	}

	 else if (ds < -20)
    7cb2:	20 e0       	ldi	r18, 0x00	; 0
    7cb4:	30 e0       	ldi	r19, 0x00	; 0
    7cb6:	40 ea       	ldi	r20, 0xA0	; 160
    7cb8:	51 ec       	ldi	r21, 0xC1	; 193
    7cba:	c5 01       	movw	r24, r10
    7cbc:	b4 01       	movw	r22, r8
    7cbe:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    7cc2:	88 23       	and	r24, r24
    7cc4:	64 f0       	brlt	.+24     	; 0x7cde <corectTrv+0x182>
	{
		ds = -20;
	}
//--------------------------------------
	if (ds < -10)
    7cc6:	20 e0       	ldi	r18, 0x00	; 0
    7cc8:	30 e0       	ldi	r19, 0x00	; 0
    7cca:	40 e2       	ldi	r20, 0x20	; 32
    7ccc:	51 ec       	ldi	r21, 0xC1	; 193
    7cce:	c5 01       	movw	r24, r10
    7cd0:	b4 01       	movw	r22, r8
    7cd2:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    7cd6:	88 23       	and	r24, r24
    7cd8:	0c f0       	brlt	.+2      	; 0x7cdc <corectTrv+0x180>
    7cda:	ab c3       	rjmp	.+1878   	; 0x8432 <corectTrv+0x8d6>
    7cdc:	08 c0       	rjmp	.+16     	; 0x7cee <corectTrv+0x192>
		ds = 20;
	}

	 else if (ds < -20)
	{
		ds = -20;
    7cde:	0f 2e       	mov	r0, r31
    7ce0:	81 2c       	mov	r8, r1
    7ce2:	91 2c       	mov	r9, r1
    7ce4:	f0 ea       	ldi	r31, 0xA0	; 160
    7ce6:	af 2e       	mov	r10, r31
    7ce8:	f1 ec       	ldi	r31, 0xC1	; 193
    7cea:	bf 2e       	mov	r11, r31
    7cec:	f0 2d       	mov	r31, r0
	}
//--------------------------------------
	if (ds < -10)
	{
		if (Superheat == SSet)
    7cee:	20 e0       	ldi	r18, 0x00	; 0
    7cf0:	30 e0       	ldi	r19, 0x00	; 0
    7cf2:	40 ee       	ldi	r20, 0xE0	; 224
    7cf4:	50 e4       	ldi	r21, 0x40	; 64
    7cf6:	c7 01       	movw	r24, r14
    7cf8:	b6 01       	movw	r22, r12
    7cfa:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    7cfe:	81 11       	cpse	r24, r1
    7d00:	32 c0       	rjmp	.+100    	; 0x7d66 <corectTrv+0x20a>
		{
			return(-0.123 * ds * ds - 2.768 * ds - 30.62)* k ;
    7d02:	2d e6       	ldi	r18, 0x6D	; 109
    7d04:	37 ee       	ldi	r19, 0xE7	; 231
    7d06:	4b ef       	ldi	r20, 0xFB	; 251
    7d08:	5d eb       	ldi	r21, 0xBD	; 189
    7d0a:	c5 01       	movw	r24, r10
    7d0c:	b4 01       	movw	r22, r8
    7d0e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7d12:	a5 01       	movw	r20, r10
    7d14:	94 01       	movw	r18, r8
    7d16:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7d1a:	6b 01       	movw	r12, r22
    7d1c:	7c 01       	movw	r14, r24
    7d1e:	29 ee       	ldi	r18, 0xE9	; 233
    7d20:	36 e2       	ldi	r19, 0x26	; 38
    7d22:	41 e3       	ldi	r20, 0x31	; 49
    7d24:	50 e4       	ldi	r21, 0x40	; 64
    7d26:	c5 01       	movw	r24, r10
    7d28:	b4 01       	movw	r22, r8
    7d2a:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7d2e:	9b 01       	movw	r18, r22
    7d30:	ac 01       	movw	r20, r24
    7d32:	c7 01       	movw	r24, r14
    7d34:	b6 01       	movw	r22, r12
    7d36:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    7d3a:	23 ec       	ldi	r18, 0xC3	; 195
    7d3c:	35 ef       	ldi	r19, 0xF5	; 245
    7d3e:	44 ef       	ldi	r20, 0xF4	; 244
    7d40:	51 e4       	ldi	r21, 0x41	; 65
    7d42:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    7d46:	6b 01       	movw	r12, r22
    7d48:	7c 01       	movw	r14, r24
    7d4a:	be 01       	movw	r22, r28
    7d4c:	dd 0f       	add	r29, r29
    7d4e:	88 0b       	sbc	r24, r24
    7d50:	99 0b       	sbc	r25, r25
    7d52:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    7d56:	9b 01       	movw	r18, r22
    7d58:	ac 01       	movw	r20, r24
    7d5a:	c7 01       	movw	r24, r14
    7d5c:	b6 01       	movw	r22, r12
    7d5e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7d62:	0c 94 a6 4a 	jmp	0x954c	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    7d66:	20 e0       	ldi	r18, 0x00	; 0
    7d68:	30 e0       	ldi	r19, 0x00	; 0
    7d6a:	40 ee       	ldi	r20, 0xE0	; 224
    7d6c:	50 e4       	ldi	r21, 0x40	; 64
    7d6e:	c7 01       	movw	r24, r14
    7d70:	b6 01       	movw	r22, r12
    7d72:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    7d76:	18 16       	cp	r1, r24
    7d78:	0c f0       	brlt	.+2      	; 0x7d7c <corectTrv+0x220>
    7d7a:	55 c0       	rjmp	.+170    	; 0x7e26 <corectTrv+0x2ca>
    7d7c:	20 e0       	ldi	r18, 0x00	; 0
    7d7e:	30 e0       	ldi	r19, 0x00	; 0
    7d80:	40 e0       	ldi	r20, 0x00	; 0
    7d82:	51 e4       	ldi	r21, 0x41	; 65
    7d84:	c7 01       	movw	r24, r14
    7d86:	b6 01       	movw	r22, r12
    7d88:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    7d8c:	18 16       	cp	r1, r24
    7d8e:	0c f4       	brge	.+2      	; 0x7d92 <corectTrv+0x236>
    7d90:	4a c0       	rjmp	.+148    	; 0x7e26 <corectTrv+0x2ca>
		{
			return( 0.02416 * ds * ds * ds + 0.95688 * ds * ds + 12.69588 * ds + 44.31142)* k;
    7d92:	21 e3       	ldi	r18, 0x31	; 49
    7d94:	3b ee       	ldi	r19, 0xEB	; 235
    7d96:	45 ec       	ldi	r20, 0xC5	; 197
    7d98:	5c e3       	ldi	r21, 0x3C	; 60
    7d9a:	c5 01       	movw	r24, r10
    7d9c:	b4 01       	movw	r22, r8
    7d9e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7da2:	a5 01       	movw	r20, r10
    7da4:	94 01       	movw	r18, r8
    7da6:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7daa:	a5 01       	movw	r20, r10
    7dac:	94 01       	movw	r18, r8
    7dae:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7db2:	6b 01       	movw	r12, r22
    7db4:	7c 01       	movw	r14, r24
    7db6:	26 e1       	ldi	r18, 0x16	; 22
    7db8:	36 ef       	ldi	r19, 0xF6	; 246
    7dba:	44 e7       	ldi	r20, 0x74	; 116
    7dbc:	5f e3       	ldi	r21, 0x3F	; 63
    7dbe:	c5 01       	movw	r24, r10
    7dc0:	b4 01       	movw	r22, r8
    7dc2:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7dc6:	a5 01       	movw	r20, r10
    7dc8:	94 01       	movw	r18, r8
    7dca:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7dce:	9b 01       	movw	r18, r22
    7dd0:	ac 01       	movw	r20, r24
    7dd2:	c7 01       	movw	r24, r14
    7dd4:	b6 01       	movw	r22, r12
    7dd6:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    7dda:	6b 01       	movw	r12, r22
    7ddc:	7c 01       	movw	r14, r24
    7dde:	23 e5       	ldi	r18, 0x53	; 83
    7de0:	32 e2       	ldi	r19, 0x22	; 34
    7de2:	4b e4       	ldi	r20, 0x4B	; 75
    7de4:	51 e4       	ldi	r21, 0x41	; 65
    7de6:	c5 01       	movw	r24, r10
    7de8:	b4 01       	movw	r22, r8
    7dea:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7dee:	9b 01       	movw	r18, r22
    7df0:	ac 01       	movw	r20, r24
    7df2:	c7 01       	movw	r24, r14
    7df4:	b6 01       	movw	r22, r12
    7df6:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    7dfa:	25 ee       	ldi	r18, 0xE5	; 229
    7dfc:	3e e3       	ldi	r19, 0x3E	; 62
    7dfe:	41 e3       	ldi	r20, 0x31	; 49
    7e00:	52 e4       	ldi	r21, 0x42	; 66
    7e02:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    7e06:	6b 01       	movw	r12, r22
    7e08:	7c 01       	movw	r14, r24
    7e0a:	be 01       	movw	r22, r28
    7e0c:	dd 0f       	add	r29, r29
    7e0e:	88 0b       	sbc	r24, r24
    7e10:	99 0b       	sbc	r25, r25
    7e12:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    7e16:	9b 01       	movw	r18, r22
    7e18:	ac 01       	movw	r20, r24
    7e1a:	c7 01       	movw	r24, r14
    7e1c:	b6 01       	movw	r22, r12
    7e1e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7e22:	0c 94 a6 4a 	jmp	0x954c	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    7e26:	20 e0       	ldi	r18, 0x00	; 0
    7e28:	30 e0       	ldi	r19, 0x00	; 0
    7e2a:	40 e0       	ldi	r20, 0x00	; 0
    7e2c:	51 e4       	ldi	r21, 0x41	; 65
    7e2e:	c7 01       	movw	r24, r14
    7e30:	b6 01       	movw	r22, r12
    7e32:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    7e36:	18 16       	cp	r1, r24
    7e38:	0c f0       	brlt	.+2      	; 0x7e3c <corectTrv+0x2e0>
    7e3a:	55 c0       	rjmp	.+170    	; 0x7ee6 <corectTrv+0x38a>
    7e3c:	20 e0       	ldi	r18, 0x00	; 0
    7e3e:	30 e0       	ldi	r19, 0x00	; 0
    7e40:	40 e1       	ldi	r20, 0x10	; 16
    7e42:	51 e4       	ldi	r21, 0x41	; 65
    7e44:	c7 01       	movw	r24, r14
    7e46:	b6 01       	movw	r22, r12
    7e48:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    7e4c:	18 16       	cp	r1, r24
    7e4e:	0c f4       	brge	.+2      	; 0x7e52 <corectTrv+0x2f6>
    7e50:	4a c0       	rjmp	.+148    	; 0x7ee6 <corectTrv+0x38a>
		{
			return( 0.01715 * ds * ds * ds + 0.64880 * ds * ds + 8.39021 * ds + 27.61058)* k;
    7e52:	28 e2       	ldi	r18, 0x28	; 40
    7e54:	3e e7       	ldi	r19, 0x7E	; 126
    7e56:	4c e8       	ldi	r20, 0x8C	; 140
    7e58:	5c e3       	ldi	r21, 0x3C	; 60
    7e5a:	c5 01       	movw	r24, r10
    7e5c:	b4 01       	movw	r22, r8
    7e5e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7e62:	a5 01       	movw	r20, r10
    7e64:	94 01       	movw	r18, r8
    7e66:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7e6a:	a5 01       	movw	r20, r10
    7e6c:	94 01       	movw	r18, r8
    7e6e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7e72:	6b 01       	movw	r12, r22
    7e74:	7c 01       	movw	r14, r24
    7e76:	22 ec       	ldi	r18, 0xC2	; 194
    7e78:	37 e1       	ldi	r19, 0x17	; 23
    7e7a:	46 e2       	ldi	r20, 0x26	; 38
    7e7c:	5f e3       	ldi	r21, 0x3F	; 63
    7e7e:	c5 01       	movw	r24, r10
    7e80:	b4 01       	movw	r22, r8
    7e82:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7e86:	a5 01       	movw	r20, r10
    7e88:	94 01       	movw	r18, r8
    7e8a:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7e8e:	9b 01       	movw	r18, r22
    7e90:	ac 01       	movw	r20, r24
    7e92:	c7 01       	movw	r24, r14
    7e94:	b6 01       	movw	r22, r12
    7e96:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    7e9a:	6b 01       	movw	r12, r22
    7e9c:	7c 01       	movw	r14, r24
    7e9e:	2d e4       	ldi	r18, 0x4D	; 77
    7ea0:	3e e3       	ldi	r19, 0x3E	; 62
    7ea2:	46 e0       	ldi	r20, 0x06	; 6
    7ea4:	51 e4       	ldi	r21, 0x41	; 65
    7ea6:	c5 01       	movw	r24, r10
    7ea8:	b4 01       	movw	r22, r8
    7eaa:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7eae:	9b 01       	movw	r18, r22
    7eb0:	ac 01       	movw	r20, r24
    7eb2:	c7 01       	movw	r24, r14
    7eb4:	b6 01       	movw	r22, r12
    7eb6:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    7eba:	28 e7       	ldi	r18, 0x78	; 120
    7ebc:	32 ee       	ldi	r19, 0xE2	; 226
    7ebe:	4c ed       	ldi	r20, 0xDC	; 220
    7ec0:	51 e4       	ldi	r21, 0x41	; 65
    7ec2:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    7ec6:	6b 01       	movw	r12, r22
    7ec8:	7c 01       	movw	r14, r24
    7eca:	be 01       	movw	r22, r28
    7ecc:	dd 0f       	add	r29, r29
    7ece:	88 0b       	sbc	r24, r24
    7ed0:	99 0b       	sbc	r25, r25
    7ed2:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    7ed6:	9b 01       	movw	r18, r22
    7ed8:	ac 01       	movw	r20, r24
    7eda:	c7 01       	movw	r24, r14
    7edc:	b6 01       	movw	r22, r12
    7ede:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7ee2:	0c 94 a6 4a 	jmp	0x954c	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    7ee6:	20 e0       	ldi	r18, 0x00	; 0
    7ee8:	30 e0       	ldi	r19, 0x00	; 0
    7eea:	40 e1       	ldi	r20, 0x10	; 16
    7eec:	51 e4       	ldi	r21, 0x41	; 65
    7eee:	c7 01       	movw	r24, r14
    7ef0:	b6 01       	movw	r22, r12
    7ef2:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    7ef6:	18 16       	cp	r1, r24
    7ef8:	74 f5       	brge	.+92     	; 0x7f56 <corectTrv+0x3fa>
    7efa:	20 e0       	ldi	r18, 0x00	; 0
    7efc:	30 e0       	ldi	r19, 0x00	; 0
    7efe:	40 e2       	ldi	r20, 0x20	; 32
    7f00:	51 e4       	ldi	r21, 0x41	; 65
    7f02:	c7 01       	movw	r24, r14
    7f04:	b6 01       	movw	r22, r12
    7f06:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    7f0a:	18 16       	cp	r1, r24
    7f0c:	24 f1       	brlt	.+72     	; 0x7f56 <corectTrv+0x3fa>
		{
			return( -0.099 * ds * ds - 2.002 * ds - 16.444);
    7f0e:	23 e8       	ldi	r18, 0x83	; 131
    7f10:	30 ec       	ldi	r19, 0xC0	; 192
    7f12:	4a ec       	ldi	r20, 0xCA	; 202
    7f14:	5d eb       	ldi	r21, 0xBD	; 189
    7f16:	c5 01       	movw	r24, r10
    7f18:	b4 01       	movw	r22, r8
    7f1a:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7f1e:	a5 01       	movw	r20, r10
    7f20:	94 01       	movw	r18, r8
    7f22:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7f26:	6b 01       	movw	r12, r22
    7f28:	7c 01       	movw	r14, r24
    7f2a:	25 ec       	ldi	r18, 0xC5	; 197
    7f2c:	30 e2       	ldi	r19, 0x20	; 32
    7f2e:	40 e0       	ldi	r20, 0x00	; 0
    7f30:	50 e4       	ldi	r21, 0x40	; 64
    7f32:	c5 01       	movw	r24, r10
    7f34:	b4 01       	movw	r22, r8
    7f36:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7f3a:	9b 01       	movw	r18, r22
    7f3c:	ac 01       	movw	r20, r24
    7f3e:	c7 01       	movw	r24, r14
    7f40:	b6 01       	movw	r22, r12
    7f42:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    7f46:	20 e5       	ldi	r18, 0x50	; 80
    7f48:	3d e8       	ldi	r19, 0x8D	; 141
    7f4a:	43 e8       	ldi	r20, 0x83	; 131
    7f4c:	51 e4       	ldi	r21, 0x41	; 65
    7f4e:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    7f52:	0c 94 a6 4a 	jmp	0x954c	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    7f56:	20 e0       	ldi	r18, 0x00	; 0
    7f58:	30 e0       	ldi	r19, 0x00	; 0
    7f5a:	40 e2       	ldi	r20, 0x20	; 32
    7f5c:	51 e4       	ldi	r21, 0x41	; 65
    7f5e:	c7 01       	movw	r24, r14
    7f60:	b6 01       	movw	r22, r12
    7f62:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    7f66:	18 16       	cp	r1, r24
    7f68:	74 f5       	brge	.+92     	; 0x7fc6 <corectTrv+0x46a>
    7f6a:	20 e0       	ldi	r18, 0x00	; 0
    7f6c:	30 e0       	ldi	r19, 0x00	; 0
    7f6e:	40 e3       	ldi	r20, 0x30	; 48
    7f70:	51 e4       	ldi	r21, 0x41	; 65
    7f72:	c7 01       	movw	r24, r14
    7f74:	b6 01       	movw	r22, r12
    7f76:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    7f7a:	18 16       	cp	r1, r24
    7f7c:	24 f1       	brlt	.+72     	; 0x7fc6 <corectTrv+0x46a>
		{
			return( -0.065 * ds * ds - 0.773 * ds - 4.451);
    7f7e:	28 eb       	ldi	r18, 0xB8	; 184
    7f80:	3e e1       	ldi	r19, 0x1E	; 30
    7f82:	45 e8       	ldi	r20, 0x85	; 133
    7f84:	5d eb       	ldi	r21, 0xBD	; 189
    7f86:	c5 01       	movw	r24, r10
    7f88:	b4 01       	movw	r22, r8
    7f8a:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7f8e:	a5 01       	movw	r20, r10
    7f90:	94 01       	movw	r18, r8
    7f92:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7f96:	6b 01       	movw	r12, r22
    7f98:	7c 01       	movw	r14, r24
    7f9a:	24 e5       	ldi	r18, 0x54	; 84
    7f9c:	33 ee       	ldi	r19, 0xE3	; 227
    7f9e:	45 e4       	ldi	r20, 0x45	; 69
    7fa0:	5f e3       	ldi	r21, 0x3F	; 63
    7fa2:	c5 01       	movw	r24, r10
    7fa4:	b4 01       	movw	r22, r8
    7fa6:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    7faa:	9b 01       	movw	r18, r22
    7fac:	ac 01       	movw	r20, r24
    7fae:	c7 01       	movw	r24, r14
    7fb0:	b6 01       	movw	r22, r12
    7fb2:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    7fb6:	28 e9       	ldi	r18, 0x98	; 152
    7fb8:	3e e6       	ldi	r19, 0x6E	; 110
    7fba:	4e e8       	ldi	r20, 0x8E	; 142
    7fbc:	50 e4       	ldi	r21, 0x40	; 64
    7fbe:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    7fc2:	0c 94 a6 4a 	jmp	0x954c	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    7fc6:	20 e0       	ldi	r18, 0x00	; 0
    7fc8:	30 e0       	ldi	r19, 0x00	; 0
    7fca:	40 e3       	ldi	r20, 0x30	; 48
    7fcc:	51 e4       	ldi	r21, 0x41	; 65
    7fce:	c7 01       	movw	r24, r14
    7fd0:	b6 01       	movw	r22, r12
    7fd2:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    7fd6:	18 16       	cp	r1, r24
    7fd8:	0c f0       	brlt	.+2      	; 0x7fdc <corectTrv+0x480>
    7fda:	55 c0       	rjmp	.+170    	; 0x8086 <corectTrv+0x52a>
    7fdc:	20 e0       	ldi	r18, 0x00	; 0
    7fde:	30 e0       	ldi	r19, 0x00	; 0
    7fe0:	40 e4       	ldi	r20, 0x40	; 64
    7fe2:	51 e4       	ldi	r21, 0x41	; 65
    7fe4:	c7 01       	movw	r24, r14
    7fe6:	b6 01       	movw	r22, r12
    7fe8:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    7fec:	18 16       	cp	r1, r24
    7fee:	0c f4       	brge	.+2      	; 0x7ff2 <corectTrv+0x496>
    7ff0:	4a c0       	rjmp	.+148    	; 0x8086 <corectTrv+0x52a>
		{
			return( 0.01315 * ds * ds * ds + 0.59145 * ds * ds + 10.05298 * ds + 54.52301)* k;
    7ff2:	29 e1       	ldi	r18, 0x19	; 25
    7ff4:	33 e7       	ldi	r19, 0x73	; 115
    7ff6:	47 e5       	ldi	r20, 0x57	; 87
    7ff8:	5c e3       	ldi	r21, 0x3C	; 60
    7ffa:	c5 01       	movw	r24, r10
    7ffc:	b4 01       	movw	r22, r8
    7ffe:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8002:	a5 01       	movw	r20, r10
    8004:	94 01       	movw	r18, r8
    8006:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    800a:	a5 01       	movw	r20, r10
    800c:	94 01       	movw	r18, r8
    800e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8012:	6b 01       	movw	r12, r22
    8014:	7c 01       	movw	r14, r24
    8016:	24 e4       	ldi	r18, 0x44	; 68
    8018:	39 e6       	ldi	r19, 0x69	; 105
    801a:	47 e1       	ldi	r20, 0x17	; 23
    801c:	5f e3       	ldi	r21, 0x3F	; 63
    801e:	c5 01       	movw	r24, r10
    8020:	b4 01       	movw	r22, r8
    8022:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8026:	a5 01       	movw	r20, r10
    8028:	94 01       	movw	r18, r8
    802a:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    802e:	9b 01       	movw	r18, r22
    8030:	ac 01       	movw	r20, r24
    8032:	c7 01       	movw	r24, r14
    8034:	b6 01       	movw	r22, r12
    8036:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    803a:	6b 01       	movw	r12, r22
    803c:	7c 01       	movw	r14, r24
    803e:	22 e0       	ldi	r18, 0x02	; 2
    8040:	39 ed       	ldi	r19, 0xD9	; 217
    8042:	40 e2       	ldi	r20, 0x20	; 32
    8044:	51 e4       	ldi	r21, 0x41	; 65
    8046:	c5 01       	movw	r24, r10
    8048:	b4 01       	movw	r22, r8
    804a:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    804e:	9b 01       	movw	r18, r22
    8050:	ac 01       	movw	r20, r24
    8052:	c7 01       	movw	r24, r14
    8054:	b6 01       	movw	r22, r12
    8056:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    805a:	20 e9       	ldi	r18, 0x90	; 144
    805c:	37 e1       	ldi	r19, 0x17	; 23
    805e:	4a e5       	ldi	r20, 0x5A	; 90
    8060:	52 e4       	ldi	r21, 0x42	; 66
    8062:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8066:	6b 01       	movw	r12, r22
    8068:	7c 01       	movw	r14, r24
    806a:	be 01       	movw	r22, r28
    806c:	dd 0f       	add	r29, r29
    806e:	88 0b       	sbc	r24, r24
    8070:	99 0b       	sbc	r25, r25
    8072:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    8076:	9b 01       	movw	r18, r22
    8078:	ac 01       	movw	r20, r24
    807a:	c7 01       	movw	r24, r14
    807c:	b6 01       	movw	r22, r12
    807e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8082:	0c 94 a6 4a 	jmp	0x954c	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    8086:	20 e0       	ldi	r18, 0x00	; 0
    8088:	30 e0       	ldi	r19, 0x00	; 0
    808a:	40 e4       	ldi	r20, 0x40	; 64
    808c:	51 e4       	ldi	r21, 0x41	; 65
    808e:	c7 01       	movw	r24, r14
    8090:	b6 01       	movw	r22, r12
    8092:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    8096:	18 16       	cp	r1, r24
    8098:	0c f0       	brlt	.+2      	; 0x809c <corectTrv+0x540>
    809a:	55 c0       	rjmp	.+170    	; 0x8146 <corectTrv+0x5ea>
    809c:	20 e0       	ldi	r18, 0x00	; 0
    809e:	30 e0       	ldi	r19, 0x00	; 0
    80a0:	40 e5       	ldi	r20, 0x50	; 80
    80a2:	51 e4       	ldi	r21, 0x41	; 65
    80a4:	c7 01       	movw	r24, r14
    80a6:	b6 01       	movw	r22, r12
    80a8:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    80ac:	18 16       	cp	r1, r24
    80ae:	0c f4       	brge	.+2      	; 0x80b2 <corectTrv+0x556>
    80b0:	4a c0       	rjmp	.+148    	; 0x8146 <corectTrv+0x5ea>
		{
			return( 0.02485 * ds * ds * ds + 1.09724 * ds * ds + 17.05530 * ds + 89.43916)* k;
    80b2:	2a e3       	ldi	r18, 0x3A	; 58
    80b4:	32 e9       	ldi	r19, 0x92	; 146
    80b6:	4b ec       	ldi	r20, 0xCB	; 203
    80b8:	5c e3       	ldi	r21, 0x3C	; 60
    80ba:	c5 01       	movw	r24, r10
    80bc:	b4 01       	movw	r22, r8
    80be:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    80c2:	a5 01       	movw	r20, r10
    80c4:	94 01       	movw	r18, r8
    80c6:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    80ca:	a5 01       	movw	r20, r10
    80cc:	94 01       	movw	r18, r8
    80ce:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    80d2:	6b 01       	movw	r12, r22
    80d4:	7c 01       	movw	r14, r24
    80d6:	2c e5       	ldi	r18, 0x5C	; 92
    80d8:	32 e7       	ldi	r19, 0x72	; 114
    80da:	4c e8       	ldi	r20, 0x8C	; 140
    80dc:	5f e3       	ldi	r21, 0x3F	; 63
    80de:	c5 01       	movw	r24, r10
    80e0:	b4 01       	movw	r22, r8
    80e2:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    80e6:	a5 01       	movw	r20, r10
    80e8:	94 01       	movw	r18, r8
    80ea:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    80ee:	9b 01       	movw	r18, r22
    80f0:	ac 01       	movw	r20, r24
    80f2:	c7 01       	movw	r24, r14
    80f4:	b6 01       	movw	r22, r12
    80f6:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    80fa:	6b 01       	movw	r12, r22
    80fc:	7c 01       	movw	r14, r24
    80fe:	21 e4       	ldi	r18, 0x41	; 65
    8100:	31 e7       	ldi	r19, 0x71	; 113
    8102:	48 e8       	ldi	r20, 0x88	; 136
    8104:	51 e4       	ldi	r21, 0x41	; 65
    8106:	c5 01       	movw	r24, r10
    8108:	b4 01       	movw	r22, r8
    810a:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    810e:	9b 01       	movw	r18, r22
    8110:	ac 01       	movw	r20, r24
    8112:	c7 01       	movw	r24, r14
    8114:	b6 01       	movw	r22, r12
    8116:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    811a:	2a ed       	ldi	r18, 0xDA	; 218
    811c:	30 ee       	ldi	r19, 0xE0	; 224
    811e:	42 eb       	ldi	r20, 0xB2	; 178
    8120:	52 e4       	ldi	r21, 0x42	; 66
    8122:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8126:	6b 01       	movw	r12, r22
    8128:	7c 01       	movw	r14, r24
    812a:	be 01       	movw	r22, r28
    812c:	dd 0f       	add	r29, r29
    812e:	88 0b       	sbc	r24, r24
    8130:	99 0b       	sbc	r25, r25
    8132:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    8136:	9b 01       	movw	r18, r22
    8138:	ac 01       	movw	r20, r24
    813a:	c7 01       	movw	r24, r14
    813c:	b6 01       	movw	r22, r12
    813e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8142:	0c 94 a6 4a 	jmp	0x954c	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    8146:	20 e0       	ldi	r18, 0x00	; 0
    8148:	30 e0       	ldi	r19, 0x00	; 0
    814a:	40 e5       	ldi	r20, 0x50	; 80
    814c:	51 e4       	ldi	r21, 0x41	; 65
    814e:	c7 01       	movw	r24, r14
    8150:	b6 01       	movw	r22, r12
    8152:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    8156:	18 16       	cp	r1, r24
    8158:	0c f0       	brlt	.+2      	; 0x815c <corectTrv+0x600>
    815a:	55 c0       	rjmp	.+170    	; 0x8206 <corectTrv+0x6aa>
    815c:	20 e0       	ldi	r18, 0x00	; 0
    815e:	30 e0       	ldi	r19, 0x00	; 0
    8160:	40 e6       	ldi	r20, 0x60	; 96
    8162:	51 e4       	ldi	r21, 0x41	; 65
    8164:	c7 01       	movw	r24, r14
    8166:	b6 01       	movw	r22, r12
    8168:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    816c:	18 16       	cp	r1, r24
    816e:	0c f4       	brge	.+2      	; 0x8172 <corectTrv+0x616>
    8170:	4a c0       	rjmp	.+148    	; 0x8206 <corectTrv+0x6aa>
		{
			return( 0.02257 * ds * ds * ds + 0.99967 * ds * ds + 15.71735 * ds + 86.11652)* k;
    8172:	28 eb       	ldi	r18, 0xB8	; 184
    8174:	34 ee       	ldi	r19, 0xE4	; 228
    8176:	48 eb       	ldi	r20, 0xB8	; 184
    8178:	5c e3       	ldi	r21, 0x3C	; 60
    817a:	c5 01       	movw	r24, r10
    817c:	b4 01       	movw	r22, r8
    817e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8182:	a5 01       	movw	r20, r10
    8184:	94 01       	movw	r18, r8
    8186:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    818a:	a5 01       	movw	r20, r10
    818c:	94 01       	movw	r18, r8
    818e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8192:	6b 01       	movw	r12, r22
    8194:	7c 01       	movw	r14, r24
    8196:	20 e6       	ldi	r18, 0x60	; 96
    8198:	3a ee       	ldi	r19, 0xEA	; 234
    819a:	4f e7       	ldi	r20, 0x7F	; 127
    819c:	5f e3       	ldi	r21, 0x3F	; 63
    819e:	c5 01       	movw	r24, r10
    81a0:	b4 01       	movw	r22, r8
    81a2:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    81a6:	a5 01       	movw	r20, r10
    81a8:	94 01       	movw	r18, r8
    81aa:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    81ae:	9b 01       	movw	r18, r22
    81b0:	ac 01       	movw	r20, r24
    81b2:	c7 01       	movw	r24, r14
    81b4:	b6 01       	movw	r22, r12
    81b6:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    81ba:	6b 01       	movw	r12, r22
    81bc:	7c 01       	movw	r14, r24
    81be:	24 e4       	ldi	r18, 0x44	; 68
    81c0:	3a e7       	ldi	r19, 0x7A	; 122
    81c2:	4b e7       	ldi	r20, 0x7B	; 123
    81c4:	51 e4       	ldi	r21, 0x41	; 65
    81c6:	c5 01       	movw	r24, r10
    81c8:	b4 01       	movw	r22, r8
    81ca:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    81ce:	9b 01       	movw	r18, r22
    81d0:	ac 01       	movw	r20, r24
    81d2:	c7 01       	movw	r24, r14
    81d4:	b6 01       	movw	r22, r12
    81d6:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    81da:	29 ea       	ldi	r18, 0xA9	; 169
    81dc:	3b e3       	ldi	r19, 0x3B	; 59
    81de:	4c ea       	ldi	r20, 0xAC	; 172
    81e0:	52 e4       	ldi	r21, 0x42	; 66
    81e2:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    81e6:	6b 01       	movw	r12, r22
    81e8:	7c 01       	movw	r14, r24
    81ea:	be 01       	movw	r22, r28
    81ec:	dd 0f       	add	r29, r29
    81ee:	88 0b       	sbc	r24, r24
    81f0:	99 0b       	sbc	r25, r25
    81f2:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    81f6:	9b 01       	movw	r18, r22
    81f8:	ac 01       	movw	r20, r24
    81fa:	c7 01       	movw	r24, r14
    81fc:	b6 01       	movw	r22, r12
    81fe:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8202:	0c 94 a6 4a 	jmp	0x954c	; 0x954c <corectTrv+0x19f0>
		}
		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    8206:	20 e0       	ldi	r18, 0x00	; 0
    8208:	30 e0       	ldi	r19, 0x00	; 0
    820a:	40 e6       	ldi	r20, 0x60	; 96
    820c:	51 e4       	ldi	r21, 0x41	; 65
    820e:	c7 01       	movw	r24, r14
    8210:	b6 01       	movw	r22, r12
    8212:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    8216:	18 16       	cp	r1, r24
    8218:	0c f0       	brlt	.+2      	; 0x821c <corectTrv+0x6c0>
    821a:	55 c0       	rjmp	.+170    	; 0x82c6 <corectTrv+0x76a>
    821c:	20 e0       	ldi	r18, 0x00	; 0
    821e:	30 e0       	ldi	r19, 0x00	; 0
    8220:	40 e7       	ldi	r20, 0x70	; 112
    8222:	51 e4       	ldi	r21, 0x41	; 65
    8224:	c7 01       	movw	r24, r14
    8226:	b6 01       	movw	r22, r12
    8228:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    822c:	18 16       	cp	r1, r24
    822e:	0c f4       	brge	.+2      	; 0x8232 <corectTrv+0x6d6>
    8230:	4a c0       	rjmp	.+148    	; 0x82c6 <corectTrv+0x76a>
		{
			return( 0.02199 * ds * ds * ds + 0.99841 * ds * ds + 16.07877 * ds + 91.69972)* k;
    8232:	2f e5       	ldi	r18, 0x5F	; 95
    8234:	34 e2       	ldi	r19, 0x24	; 36
    8236:	44 eb       	ldi	r20, 0xB4	; 180
    8238:	5c e3       	ldi	r21, 0x3C	; 60
    823a:	c5 01       	movw	r24, r10
    823c:	b4 01       	movw	r22, r8
    823e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8242:	a5 01       	movw	r20, r10
    8244:	94 01       	movw	r18, r8
    8246:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    824a:	a5 01       	movw	r20, r10
    824c:	94 01       	movw	r18, r8
    824e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8252:	6b 01       	movw	r12, r22
    8254:	7c 01       	movw	r14, r24
    8256:	2c ec       	ldi	r18, 0xCC	; 204
    8258:	37 e9       	ldi	r19, 0x97	; 151
    825a:	4f e7       	ldi	r20, 0x7F	; 127
    825c:	5f e3       	ldi	r21, 0x3F	; 63
    825e:	c5 01       	movw	r24, r10
    8260:	b4 01       	movw	r22, r8
    8262:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8266:	a5 01       	movw	r20, r10
    8268:	94 01       	movw	r18, r8
    826a:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    826e:	9b 01       	movw	r18, r22
    8270:	ac 01       	movw	r20, r24
    8272:	c7 01       	movw	r24, r14
    8274:	b6 01       	movw	r22, r12
    8276:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    827a:	6b 01       	movw	r12, r22
    827c:	7c 01       	movw	r14, r24
    827e:	22 e5       	ldi	r18, 0x52	; 82
    8280:	31 ea       	ldi	r19, 0xA1	; 161
    8282:	40 e8       	ldi	r20, 0x80	; 128
    8284:	51 e4       	ldi	r21, 0x41	; 65
    8286:	c5 01       	movw	r24, r10
    8288:	b4 01       	movw	r22, r8
    828a:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    828e:	9b 01       	movw	r18, r22
    8290:	ac 01       	movw	r20, r24
    8292:	c7 01       	movw	r24, r14
    8294:	b6 01       	movw	r22, r12
    8296:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    829a:	22 e4       	ldi	r18, 0x42	; 66
    829c:	36 e6       	ldi	r19, 0x66	; 102
    829e:	47 eb       	ldi	r20, 0xB7	; 183
    82a0:	52 e4       	ldi	r21, 0x42	; 66
    82a2:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    82a6:	6b 01       	movw	r12, r22
    82a8:	7c 01       	movw	r14, r24
    82aa:	be 01       	movw	r22, r28
    82ac:	dd 0f       	add	r29, r29
    82ae:	88 0b       	sbc	r24, r24
    82b0:	99 0b       	sbc	r25, r25
    82b2:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    82b6:	9b 01       	movw	r18, r22
    82b8:	ac 01       	movw	r20, r24
    82ba:	c7 01       	movw	r24, r14
    82bc:	b6 01       	movw	r22, r12
    82be:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    82c2:	0c 94 a6 4a 	jmp	0x954c	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    82c6:	20 e0       	ldi	r18, 0x00	; 0
    82c8:	30 e0       	ldi	r19, 0x00	; 0
    82ca:	40 e7       	ldi	r20, 0x70	; 112
    82cc:	51 e4       	ldi	r21, 0x41	; 65
    82ce:	c7 01       	movw	r24, r14
    82d0:	b6 01       	movw	r22, r12
    82d2:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    82d6:	18 16       	cp	r1, r24
    82d8:	0c f0       	brlt	.+2      	; 0x82dc <corectTrv+0x780>
    82da:	55 c0       	rjmp	.+170    	; 0x8386 <corectTrv+0x82a>
    82dc:	20 e0       	ldi	r18, 0x00	; 0
    82de:	30 e0       	ldi	r19, 0x00	; 0
    82e0:	40 e8       	ldi	r20, 0x80	; 128
    82e2:	51 e4       	ldi	r21, 0x41	; 65
    82e4:	c7 01       	movw	r24, r14
    82e6:	b6 01       	movw	r22, r12
    82e8:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    82ec:	18 16       	cp	r1, r24
    82ee:	0c f4       	brge	.+2      	; 0x82f2 <corectTrv+0x796>
    82f0:	4a c0       	rjmp	.+148    	; 0x8386 <corectTrv+0x82a>
		{
			return( 0.02293 * ds * ds * ds + 1.04454 * ds * ds + 16.79148 * ds + 97.65075)* k;
    82f2:	22 eb       	ldi	r18, 0xB2	; 178
    82f4:	37 ed       	ldi	r19, 0xD7	; 215
    82f6:	4b eb       	ldi	r20, 0xBB	; 187
    82f8:	5c e3       	ldi	r21, 0x3C	; 60
    82fa:	c5 01       	movw	r24, r10
    82fc:	b4 01       	movw	r22, r8
    82fe:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8302:	a5 01       	movw	r20, r10
    8304:	94 01       	movw	r18, r8
    8306:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    830a:	a5 01       	movw	r20, r10
    830c:	94 01       	movw	r18, r8
    830e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8312:	6b 01       	movw	r12, r22
    8314:	7c 01       	movw	r14, r24
    8316:	2d e7       	ldi	r18, 0x7D	; 125
    8318:	33 eb       	ldi	r19, 0xB3	; 179
    831a:	45 e8       	ldi	r20, 0x85	; 133
    831c:	5f e3       	ldi	r21, 0x3F	; 63
    831e:	c5 01       	movw	r24, r10
    8320:	b4 01       	movw	r22, r8
    8322:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8326:	a5 01       	movw	r20, r10
    8328:	94 01       	movw	r18, r8
    832a:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    832e:	9b 01       	movw	r18, r22
    8330:	ac 01       	movw	r20, r24
    8332:	c7 01       	movw	r24, r14
    8334:	b6 01       	movw	r22, r12
    8336:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    833a:	6b 01       	movw	r12, r22
    833c:	7c 01       	movw	r14, r24
    833e:	23 ef       	ldi	r18, 0xF3	; 243
    8340:	34 e5       	ldi	r19, 0x54	; 84
    8342:	46 e8       	ldi	r20, 0x86	; 134
    8344:	51 e4       	ldi	r21, 0x41	; 65
    8346:	c5 01       	movw	r24, r10
    8348:	b4 01       	movw	r22, r8
    834a:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    834e:	9b 01       	movw	r18, r22
    8350:	ac 01       	movw	r20, r24
    8352:	c7 01       	movw	r24, r14
    8354:	b6 01       	movw	r22, r12
    8356:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    835a:	2f e2       	ldi	r18, 0x2F	; 47
    835c:	3d e4       	ldi	r19, 0x4D	; 77
    835e:	43 ec       	ldi	r20, 0xC3	; 195
    8360:	52 e4       	ldi	r21, 0x42	; 66
    8362:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8366:	6b 01       	movw	r12, r22
    8368:	7c 01       	movw	r14, r24
    836a:	be 01       	movw	r22, r28
    836c:	dd 0f       	add	r29, r29
    836e:	88 0b       	sbc	r24, r24
    8370:	99 0b       	sbc	r25, r25
    8372:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    8376:	9b 01       	movw	r18, r22
    8378:	ac 01       	movw	r20, r24
    837a:	c7 01       	movw	r24, r14
    837c:	b6 01       	movw	r22, r12
    837e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8382:	0c 94 a6 4a 	jmp	0x954c	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 9)
    8386:	20 e0       	ldi	r18, 0x00	; 0
    8388:	30 e0       	ldi	r19, 0x00	; 0
    838a:	40 e8       	ldi	r20, 0x80	; 128
    838c:	51 e4       	ldi	r21, 0x41	; 65
    838e:	c7 01       	movw	r24, r14
    8390:	b6 01       	movw	r22, r12
    8392:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    8396:	18 16       	cp	r1, r24
    8398:	14 f0       	brlt	.+4      	; 0x839e <corectTrv+0x842>
    839a:	0c 94 93 4a 	jmp	0x9526	; 0x9526 <corectTrv+0x19ca>
		{
			return( 0.01242 * ds * ds * ds + 0.55907 * ds * ds + 9.57142 * ds + 67.21499)* k;
    839e:	21 e4       	ldi	r18, 0x41	; 65
    83a0:	3d e7       	ldi	r19, 0x7D	; 125
    83a2:	4b e4       	ldi	r20, 0x4B	; 75
    83a4:	5c e3       	ldi	r21, 0x3C	; 60
    83a6:	c5 01       	movw	r24, r10
    83a8:	b4 01       	movw	r22, r8
    83aa:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    83ae:	a5 01       	movw	r20, r10
    83b0:	94 01       	movw	r18, r8
    83b2:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    83b6:	a5 01       	movw	r20, r10
    83b8:	94 01       	movw	r18, r8
    83ba:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    83be:	6b 01       	movw	r12, r22
    83c0:	7c 01       	movw	r14, r24
    83c2:	26 e3       	ldi	r18, 0x36	; 54
    83c4:	3f e1       	ldi	r19, 0x1F	; 31
    83c6:	4f e0       	ldi	r20, 0x0F	; 15
    83c8:	5f e3       	ldi	r21, 0x3F	; 63
    83ca:	c5 01       	movw	r24, r10
    83cc:	b4 01       	movw	r22, r8
    83ce:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    83d2:	a5 01       	movw	r20, r10
    83d4:	94 01       	movw	r18, r8
    83d6:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    83da:	9b 01       	movw	r18, r22
    83dc:	ac 01       	movw	r20, r24
    83de:	c7 01       	movw	r24, r14
    83e0:	b6 01       	movw	r22, r12
    83e2:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    83e6:	6b 01       	movw	r12, r22
    83e8:	7c 01       	movw	r14, r24
    83ea:	29 e8       	ldi	r18, 0x89	; 137
    83ec:	34 e2       	ldi	r19, 0x24	; 36
    83ee:	49 e1       	ldi	r20, 0x19	; 25
    83f0:	51 e4       	ldi	r21, 0x41	; 65
    83f2:	c5 01       	movw	r24, r10
    83f4:	b4 01       	movw	r22, r8
    83f6:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    83fa:	9b 01       	movw	r18, r22
    83fc:	ac 01       	movw	r20, r24
    83fe:	c7 01       	movw	r24, r14
    8400:	b6 01       	movw	r22, r12
    8402:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8406:	23 e1       	ldi	r18, 0x13	; 19
    8408:	3e e6       	ldi	r19, 0x6E	; 110
    840a:	46 e8       	ldi	r20, 0x86	; 134
    840c:	52 e4       	ldi	r21, 0x42	; 66
    840e:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8412:	6b 01       	movw	r12, r22
    8414:	7c 01       	movw	r14, r24
    8416:	be 01       	movw	r22, r28
    8418:	dd 0f       	add	r29, r29
    841a:	88 0b       	sbc	r24, r24
    841c:	99 0b       	sbc	r25, r25
    841e:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    8422:	9b 01       	movw	r18, r22
    8424:	ac 01       	movw	r20, r24
    8426:	c7 01       	movw	r24, r14
    8428:	b6 01       	movw	r22, r12
    842a:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    842e:	0c 94 a6 4a 	jmp	0x954c	; 0x954c <corectTrv+0x19f0>
		}
	}

	else if (ds < 0 && ds >= -10)
    8432:	20 e0       	ldi	r18, 0x00	; 0
    8434:	30 e0       	ldi	r19, 0x00	; 0
    8436:	a9 01       	movw	r20, r18
    8438:	c5 01       	movw	r24, r10
    843a:	b4 01       	movw	r22, r8
    843c:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    8440:	88 23       	and	r24, r24
    8442:	0c f0       	brlt	.+2      	; 0x8446 <corectTrv+0x8ea>
    8444:	d6 c3       	rjmp	.+1964   	; 0x8bf2 <corectTrv+0x1096>
    8446:	20 e0       	ldi	r18, 0x00	; 0
    8448:	30 e0       	ldi	r19, 0x00	; 0
    844a:	40 e2       	ldi	r20, 0x20	; 32
    844c:	51 ec       	ldi	r21, 0xC1	; 193
    844e:	c5 01       	movw	r24, r10
    8450:	b4 01       	movw	r22, r8
    8452:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    8456:	88 23       	and	r24, r24
    8458:	0c f4       	brge	.+2      	; 0x845c <corectTrv+0x900>
    845a:	cb c3       	rjmp	.+1942   	; 0x8bf2 <corectTrv+0x1096>
	{
		if (Superheat == SSet)
    845c:	20 e0       	ldi	r18, 0x00	; 0
    845e:	30 e0       	ldi	r19, 0x00	; 0
    8460:	40 ee       	ldi	r20, 0xE0	; 224
    8462:	50 e4       	ldi	r21, 0x40	; 64
    8464:	c7 01       	movw	r24, r14
    8466:	b6 01       	movw	r22, r12
    8468:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    846c:	81 11       	cpse	r24, r1
    846e:	4a c0       	rjmp	.+148    	; 0x8504 <corectTrv+0x9a8>
		{
			return( 0.01259 * ds * ds * ds + 0.18896 * ds * ds + 2.12770 * ds - 0.01350)* k;
    8470:	2a e4       	ldi	r18, 0x4A	; 74
    8472:	36 e4       	ldi	r19, 0x46	; 70
    8474:	4e e4       	ldi	r20, 0x4E	; 78
    8476:	5c e3       	ldi	r21, 0x3C	; 60
    8478:	c5 01       	movw	r24, r10
    847a:	b4 01       	movw	r22, r8
    847c:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8480:	a5 01       	movw	r20, r10
    8482:	94 01       	movw	r18, r8
    8484:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8488:	a5 01       	movw	r20, r10
    848a:	94 01       	movw	r18, r8
    848c:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8490:	6b 01       	movw	r12, r22
    8492:	7c 01       	movw	r14, r24
    8494:	2b eb       	ldi	r18, 0xBB	; 187
    8496:	3e e7       	ldi	r19, 0x7E	; 126
    8498:	41 e4       	ldi	r20, 0x41	; 65
    849a:	5e e3       	ldi	r21, 0x3E	; 62
    849c:	c5 01       	movw	r24, r10
    849e:	b4 01       	movw	r22, r8
    84a0:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    84a4:	a5 01       	movw	r20, r10
    84a6:	94 01       	movw	r18, r8
    84a8:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    84ac:	9b 01       	movw	r18, r22
    84ae:	ac 01       	movw	r20, r24
    84b0:	c7 01       	movw	r24, r14
    84b2:	b6 01       	movw	r22, r12
    84b4:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    84b8:	6b 01       	movw	r12, r22
    84ba:	7c 01       	movw	r14, r24
    84bc:	2d e3       	ldi	r18, 0x3D	; 61
    84be:	3c e2       	ldi	r19, 0x2C	; 44
    84c0:	48 e0       	ldi	r20, 0x08	; 8
    84c2:	50 e4       	ldi	r21, 0x40	; 64
    84c4:	c5 01       	movw	r24, r10
    84c6:	b4 01       	movw	r22, r8
    84c8:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    84cc:	9b 01       	movw	r18, r22
    84ce:	ac 01       	movw	r20, r24
    84d0:	c7 01       	movw	r24, r14
    84d2:	b6 01       	movw	r22, r12
    84d4:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    84d8:	2b e1       	ldi	r18, 0x1B	; 27
    84da:	3f e2       	ldi	r19, 0x2F	; 47
    84dc:	4d e5       	ldi	r20, 0x5D	; 93
    84de:	5c e3       	ldi	r21, 0x3C	; 60
    84e0:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    84e4:	6b 01       	movw	r12, r22
    84e6:	7c 01       	movw	r14, r24
    84e8:	be 01       	movw	r22, r28
    84ea:	dd 0f       	add	r29, r29
    84ec:	88 0b       	sbc	r24, r24
    84ee:	99 0b       	sbc	r25, r25
    84f0:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    84f4:	9b 01       	movw	r18, r22
    84f6:	ac 01       	movw	r20, r24
    84f8:	c7 01       	movw	r24, r14
    84fa:	b6 01       	movw	r22, r12
    84fc:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8500:	0c 94 a6 4a 	jmp	0x954c	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    8504:	20 e0       	ldi	r18, 0x00	; 0
    8506:	30 e0       	ldi	r19, 0x00	; 0
    8508:	40 ee       	ldi	r20, 0xE0	; 224
    850a:	50 e4       	ldi	r21, 0x40	; 64
    850c:	c7 01       	movw	r24, r14
    850e:	b6 01       	movw	r22, r12
    8510:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    8514:	18 16       	cp	r1, r24
    8516:	0c f0       	brlt	.+2      	; 0x851a <corectTrv+0x9be>
    8518:	54 c0       	rjmp	.+168    	; 0x85c2 <corectTrv+0xa66>
    851a:	20 e0       	ldi	r18, 0x00	; 0
    851c:	30 e0       	ldi	r19, 0x00	; 0
    851e:	40 e0       	ldi	r20, 0x00	; 0
    8520:	51 e4       	ldi	r21, 0x41	; 65
    8522:	c7 01       	movw	r24, r14
    8524:	b6 01       	movw	r22, r12
    8526:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    852a:	18 16       	cp	r1, r24
    852c:	0c f4       	brge	.+2      	; 0x8530 <corectTrv+0x9d4>
    852e:	49 c0       	rjmp	.+146    	; 0x85c2 <corectTrv+0xa66>
		{
			return( 0.02252 * ds * ds * ds + 0.32376 * ds * ds + 2.48397 * ds + 3.72657)* k;
    8530:	2d ed       	ldi	r18, 0xDD	; 221
    8532:	3b e7       	ldi	r19, 0x7B	; 123
    8534:	48 eb       	ldi	r20, 0xB8	; 184
    8536:	5c e3       	ldi	r21, 0x3C	; 60
    8538:	c5 01       	movw	r24, r10
    853a:	b4 01       	movw	r22, r8
    853c:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8540:	a5 01       	movw	r20, r10
    8542:	94 01       	movw	r18, r8
    8544:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8548:	a5 01       	movw	r20, r10
    854a:	94 01       	movw	r18, r8
    854c:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8550:	6b 01       	movw	r12, r22
    8552:	7c 01       	movw	r14, r24
    8554:	2f ed       	ldi	r18, 0xDF	; 223
    8556:	33 ec       	ldi	r19, 0xC3	; 195
    8558:	45 ea       	ldi	r20, 0xA5	; 165
    855a:	5e e3       	ldi	r21, 0x3E	; 62
    855c:	c5 01       	movw	r24, r10
    855e:	b4 01       	movw	r22, r8
    8560:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8564:	a5 01       	movw	r20, r10
    8566:	94 01       	movw	r18, r8
    8568:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    856c:	9b 01       	movw	r18, r22
    856e:	ac 01       	movw	r20, r24
    8570:	c7 01       	movw	r24, r14
    8572:	b6 01       	movw	r22, r12
    8574:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8578:	6b 01       	movw	r12, r22
    857a:	7c 01       	movw	r14, r24
    857c:	2d e5       	ldi	r18, 0x5D	; 93
    857e:	39 ef       	ldi	r19, 0xF9	; 249
    8580:	4e e1       	ldi	r20, 0x1E	; 30
    8582:	50 e4       	ldi	r21, 0x40	; 64
    8584:	c5 01       	movw	r24, r10
    8586:	b4 01       	movw	r22, r8
    8588:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    858c:	9b 01       	movw	r18, r22
    858e:	ac 01       	movw	r20, r24
    8590:	c7 01       	movw	r24, r14
    8592:	b6 01       	movw	r22, r12
    8594:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8598:	2f e1       	ldi	r18, 0x1F	; 31
    859a:	30 e8       	ldi	r19, 0x80	; 128
    859c:	4e e6       	ldi	r20, 0x6E	; 110
    859e:	50 e4       	ldi	r21, 0x40	; 64
    85a0:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    85a4:	6b 01       	movw	r12, r22
    85a6:	7c 01       	movw	r14, r24
    85a8:	be 01       	movw	r22, r28
    85aa:	dd 0f       	add	r29, r29
    85ac:	88 0b       	sbc	r24, r24
    85ae:	99 0b       	sbc	r25, r25
    85b0:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    85b4:	9b 01       	movw	r18, r22
    85b6:	ac 01       	movw	r20, r24
    85b8:	c7 01       	movw	r24, r14
    85ba:	b6 01       	movw	r22, r12
    85bc:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    85c0:	c5 c7       	rjmp	.+3978   	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    85c2:	20 e0       	ldi	r18, 0x00	; 0
    85c4:	30 e0       	ldi	r19, 0x00	; 0
    85c6:	40 e0       	ldi	r20, 0x00	; 0
    85c8:	51 e4       	ldi	r21, 0x41	; 65
    85ca:	c7 01       	movw	r24, r14
    85cc:	b6 01       	movw	r22, r12
    85ce:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    85d2:	18 16       	cp	r1, r24
    85d4:	0c f0       	brlt	.+2      	; 0x85d8 <corectTrv+0xa7c>
    85d6:	54 c0       	rjmp	.+168    	; 0x8680 <corectTrv+0xb24>
    85d8:	20 e0       	ldi	r18, 0x00	; 0
    85da:	30 e0       	ldi	r19, 0x00	; 0
    85dc:	40 e1       	ldi	r20, 0x10	; 16
    85de:	51 e4       	ldi	r21, 0x41	; 65
    85e0:	c7 01       	movw	r24, r14
    85e2:	b6 01       	movw	r22, r12
    85e4:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    85e8:	18 16       	cp	r1, r24
    85ea:	0c f4       	brge	.+2      	; 0x85ee <corectTrv+0xa92>
    85ec:	49 c0       	rjmp	.+146    	; 0x8680 <corectTrv+0xb24>
		{
			return( 0.02106 * ds * ds * ds + 0.30427 * ds * ds + 2.44311 * ds + 6.31417)* k;
    85ee:	25 e0       	ldi	r18, 0x05	; 5
    85f0:	36 e8       	ldi	r19, 0x86	; 134
    85f2:	4c ea       	ldi	r20, 0xAC	; 172
    85f4:	5c e3       	ldi	r21, 0x3C	; 60
    85f6:	c5 01       	movw	r24, r10
    85f8:	b4 01       	movw	r22, r8
    85fa:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    85fe:	a5 01       	movw	r20, r10
    8600:	94 01       	movw	r18, r8
    8602:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8606:	a5 01       	movw	r20, r10
    8608:	94 01       	movw	r18, r8
    860a:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    860e:	6b 01       	movw	r12, r22
    8610:	7c 01       	movw	r14, r24
    8612:	27 e4       	ldi	r18, 0x47	; 71
    8614:	39 ec       	ldi	r19, 0xC9	; 201
    8616:	4b e9       	ldi	r20, 0x9B	; 155
    8618:	5e e3       	ldi	r21, 0x3E	; 62
    861a:	c5 01       	movw	r24, r10
    861c:	b4 01       	movw	r22, r8
    861e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8622:	a5 01       	movw	r20, r10
    8624:	94 01       	movw	r18, r8
    8626:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    862a:	9b 01       	movw	r18, r22
    862c:	ac 01       	movw	r20, r24
    862e:	c7 01       	movw	r24, r14
    8630:	b6 01       	movw	r22, r12
    8632:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8636:	6b 01       	movw	r12, r22
    8638:	7c 01       	movw	r14, r24
    863a:	2a ee       	ldi	r18, 0xEA	; 234
    863c:	3b e5       	ldi	r19, 0x5B	; 91
    863e:	4c e1       	ldi	r20, 0x1C	; 28
    8640:	50 e4       	ldi	r21, 0x40	; 64
    8642:	c5 01       	movw	r24, r10
    8644:	b4 01       	movw	r22, r8
    8646:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    864a:	9b 01       	movw	r18, r22
    864c:	ac 01       	movw	r20, r24
    864e:	c7 01       	movw	r24, r14
    8650:	b6 01       	movw	r22, r12
    8652:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8656:	2e ea       	ldi	r18, 0xAE	; 174
    8658:	3d e0       	ldi	r19, 0x0D	; 13
    865a:	4a ec       	ldi	r20, 0xCA	; 202
    865c:	50 e4       	ldi	r21, 0x40	; 64
    865e:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8662:	6b 01       	movw	r12, r22
    8664:	7c 01       	movw	r14, r24
    8666:	be 01       	movw	r22, r28
    8668:	dd 0f       	add	r29, r29
    866a:	88 0b       	sbc	r24, r24
    866c:	99 0b       	sbc	r25, r25
    866e:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    8672:	9b 01       	movw	r18, r22
    8674:	ac 01       	movw	r20, r24
    8676:	c7 01       	movw	r24, r14
    8678:	b6 01       	movw	r22, r12
    867a:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    867e:	66 c7       	rjmp	.+3788   	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    8680:	20 e0       	ldi	r18, 0x00	; 0
    8682:	30 e0       	ldi	r19, 0x00	; 0
    8684:	40 e1       	ldi	r20, 0x10	; 16
    8686:	51 e4       	ldi	r21, 0x41	; 65
    8688:	c7 01       	movw	r24, r14
    868a:	b6 01       	movw	r22, r12
    868c:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    8690:	18 16       	cp	r1, r24
    8692:	0c f0       	brlt	.+2      	; 0x8696 <corectTrv+0xb3a>
    8694:	54 c0       	rjmp	.+168    	; 0x873e <corectTrv+0xbe2>
    8696:	20 e0       	ldi	r18, 0x00	; 0
    8698:	30 e0       	ldi	r19, 0x00	; 0
    869a:	40 e2       	ldi	r20, 0x20	; 32
    869c:	51 e4       	ldi	r21, 0x41	; 65
    869e:	c7 01       	movw	r24, r14
    86a0:	b6 01       	movw	r22, r12
    86a2:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    86a6:	18 16       	cp	r1, r24
    86a8:	0c f4       	brge	.+2      	; 0x86ac <corectTrv+0xb50>
    86aa:	49 c0       	rjmp	.+146    	; 0x873e <corectTrv+0xbe2>
		{
			return( 0.02106 * ds * ds * ds + 0.32749 * ds * ds + 2.67528 * ds + 8.74842)* k;
    86ac:	25 e0       	ldi	r18, 0x05	; 5
    86ae:	36 e8       	ldi	r19, 0x86	; 134
    86b0:	4c ea       	ldi	r20, 0xAC	; 172
    86b2:	5c e3       	ldi	r21, 0x3C	; 60
    86b4:	c5 01       	movw	r24, r10
    86b6:	b4 01       	movw	r22, r8
    86b8:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    86bc:	a5 01       	movw	r20, r10
    86be:	94 01       	movw	r18, r8
    86c0:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    86c4:	a5 01       	movw	r20, r10
    86c6:	94 01       	movw	r18, r8
    86c8:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    86cc:	6b 01       	movw	r12, r22
    86ce:	7c 01       	movw	r14, r24
    86d0:	25 ec       	ldi	r18, 0xC5	; 197
    86d2:	3c ea       	ldi	r19, 0xAC	; 172
    86d4:	47 ea       	ldi	r20, 0xA7	; 167
    86d6:	5e e3       	ldi	r21, 0x3E	; 62
    86d8:	c5 01       	movw	r24, r10
    86da:	b4 01       	movw	r22, r8
    86dc:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    86e0:	a5 01       	movw	r20, r10
    86e2:	94 01       	movw	r18, r8
    86e4:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    86e8:	9b 01       	movw	r18, r22
    86ea:	ac 01       	movw	r20, r24
    86ec:	c7 01       	movw	r24, r14
    86ee:	b6 01       	movw	r22, r12
    86f0:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    86f4:	6b 01       	movw	r12, r22
    86f6:	7c 01       	movw	r14, r24
    86f8:	2a ec       	ldi	r18, 0xCA	; 202
    86fa:	37 e3       	ldi	r19, 0x37	; 55
    86fc:	4b e2       	ldi	r20, 0x2B	; 43
    86fe:	50 e4       	ldi	r21, 0x40	; 64
    8700:	c5 01       	movw	r24, r10
    8702:	b4 01       	movw	r22, r8
    8704:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8708:	9b 01       	movw	r18, r22
    870a:	ac 01       	movw	r20, r24
    870c:	c7 01       	movw	r24, r14
    870e:	b6 01       	movw	r22, r12
    8710:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8714:	27 e8       	ldi	r18, 0x87	; 135
    8716:	39 ef       	ldi	r19, 0xF9	; 249
    8718:	4b e0       	ldi	r20, 0x0B	; 11
    871a:	51 e4       	ldi	r21, 0x41	; 65
    871c:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8720:	6b 01       	movw	r12, r22
    8722:	7c 01       	movw	r14, r24
    8724:	be 01       	movw	r22, r28
    8726:	dd 0f       	add	r29, r29
    8728:	88 0b       	sbc	r24, r24
    872a:	99 0b       	sbc	r25, r25
    872c:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    8730:	9b 01       	movw	r18, r22
    8732:	ac 01       	movw	r20, r24
    8734:	c7 01       	movw	r24, r14
    8736:	b6 01       	movw	r22, r12
    8738:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    873c:	07 c7       	rjmp	.+3598   	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    873e:	20 e0       	ldi	r18, 0x00	; 0
    8740:	30 e0       	ldi	r19, 0x00	; 0
    8742:	40 e2       	ldi	r20, 0x20	; 32
    8744:	51 e4       	ldi	r21, 0x41	; 65
    8746:	c7 01       	movw	r24, r14
    8748:	b6 01       	movw	r22, r12
    874a:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    874e:	18 16       	cp	r1, r24
    8750:	0c f0       	brlt	.+2      	; 0x8754 <corectTrv+0xbf8>
    8752:	54 c0       	rjmp	.+168    	; 0x87fc <corectTrv+0xca0>
    8754:	20 e0       	ldi	r18, 0x00	; 0
    8756:	30 e0       	ldi	r19, 0x00	; 0
    8758:	40 e3       	ldi	r20, 0x30	; 48
    875a:	51 e4       	ldi	r21, 0x41	; 65
    875c:	c7 01       	movw	r24, r14
    875e:	b6 01       	movw	r22, r12
    8760:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    8764:	18 16       	cp	r1, r24
    8766:	0c f4       	brge	.+2      	; 0x876a <corectTrv+0xc0e>
    8768:	49 c0       	rjmp	.+146    	; 0x87fc <corectTrv+0xca0>
		{
			return( 0.02252 * ds * ds * ds + 0.35182 * ds * ds + 2.76462 * ds + 11.25664)* k;
    876a:	2d ed       	ldi	r18, 0xDD	; 221
    876c:	3b e7       	ldi	r19, 0x7B	; 123
    876e:	48 eb       	ldi	r20, 0xB8	; 184
    8770:	5c e3       	ldi	r21, 0x3C	; 60
    8772:	c5 01       	movw	r24, r10
    8774:	b4 01       	movw	r22, r8
    8776:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    877a:	a5 01       	movw	r20, r10
    877c:	94 01       	movw	r18, r8
    877e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8782:	a5 01       	movw	r20, r10
    8784:	94 01       	movw	r18, r8
    8786:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    878a:	6b 01       	movw	r12, r22
    878c:	7c 01       	movw	r14, r24
    878e:	20 ec       	ldi	r18, 0xC0	; 192
    8790:	31 e2       	ldi	r19, 0x21	; 33
    8792:	44 eb       	ldi	r20, 0xB4	; 180
    8794:	5e e3       	ldi	r21, 0x3E	; 62
    8796:	c5 01       	movw	r24, r10
    8798:	b4 01       	movw	r22, r8
    879a:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    879e:	a5 01       	movw	r20, r10
    87a0:	94 01       	movw	r18, r8
    87a2:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    87a6:	9b 01       	movw	r18, r22
    87a8:	ac 01       	movw	r20, r24
    87aa:	c7 01       	movw	r24, r14
    87ac:	b6 01       	movw	r22, r12
    87ae:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    87b2:	6b 01       	movw	r12, r22
    87b4:	7c 01       	movw	r14, r24
    87b6:	29 e8       	ldi	r18, 0x89	; 137
    87b8:	3f ee       	ldi	r19, 0xEF	; 239
    87ba:	40 e3       	ldi	r20, 0x30	; 48
    87bc:	50 e4       	ldi	r21, 0x40	; 64
    87be:	c5 01       	movw	r24, r10
    87c0:	b4 01       	movw	r22, r8
    87c2:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    87c6:	9b 01       	movw	r18, r22
    87c8:	ac 01       	movw	r20, r24
    87ca:	c7 01       	movw	r24, r14
    87cc:	b6 01       	movw	r22, r12
    87ce:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    87d2:	23 e3       	ldi	r18, 0x33	; 51
    87d4:	3b e1       	ldi	r19, 0x1B	; 27
    87d6:	44 e3       	ldi	r20, 0x34	; 52
    87d8:	51 e4       	ldi	r21, 0x41	; 65
    87da:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    87de:	6b 01       	movw	r12, r22
    87e0:	7c 01       	movw	r14, r24
    87e2:	be 01       	movw	r22, r28
    87e4:	dd 0f       	add	r29, r29
    87e6:	88 0b       	sbc	r24, r24
    87e8:	99 0b       	sbc	r25, r25
    87ea:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    87ee:	9b 01       	movw	r18, r22
    87f0:	ac 01       	movw	r20, r24
    87f2:	c7 01       	movw	r24, r14
    87f4:	b6 01       	movw	r22, r12
    87f6:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    87fa:	a8 c6       	rjmp	.+3408   	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    87fc:	20 e0       	ldi	r18, 0x00	; 0
    87fe:	30 e0       	ldi	r19, 0x00	; 0
    8800:	40 e3       	ldi	r20, 0x30	; 48
    8802:	51 e4       	ldi	r21, 0x41	; 65
    8804:	c7 01       	movw	r24, r14
    8806:	b6 01       	movw	r22, r12
    8808:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    880c:	18 16       	cp	r1, r24
    880e:	0c f0       	brlt	.+2      	; 0x8812 <corectTrv+0xcb6>
    8810:	54 c0       	rjmp	.+168    	; 0x88ba <corectTrv+0xd5e>
    8812:	20 e0       	ldi	r18, 0x00	; 0
    8814:	30 e0       	ldi	r19, 0x00	; 0
    8816:	40 e4       	ldi	r20, 0x40	; 64
    8818:	51 e4       	ldi	r21, 0x41	; 65
    881a:	c7 01       	movw	r24, r14
    881c:	b6 01       	movw	r22, r12
    881e:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    8822:	18 16       	cp	r1, r24
    8824:	0c f4       	brge	.+2      	; 0x8828 <corectTrv+0xccc>
    8826:	49 c0       	rjmp	.+146    	; 0x88ba <corectTrv+0xd5e>
		{
			return( 0.01251 * ds * ds * ds + 0.18754 * ds * ds + 2.12069 * ds + 14.98441)* k;
    8828:	2e eb       	ldi	r18, 0xBE	; 190
    882a:	36 ef       	ldi	r19, 0xF6	; 246
    882c:	4c e4       	ldi	r20, 0x4C	; 76
    882e:	5c e3       	ldi	r21, 0x3C	; 60
    8830:	c5 01       	movw	r24, r10
    8832:	b4 01       	movw	r22, r8
    8834:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8838:	a5 01       	movw	r20, r10
    883a:	94 01       	movw	r18, r8
    883c:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8840:	a5 01       	movw	r20, r10
    8842:	94 01       	movw	r18, r8
    8844:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8848:	6b 01       	movw	r12, r22
    884a:	7c 01       	movw	r14, r24
    884c:	2c e7       	ldi	r18, 0x7C	; 124
    884e:	3a e0       	ldi	r19, 0x0A	; 10
    8850:	40 e4       	ldi	r20, 0x40	; 64
    8852:	5e e3       	ldi	r21, 0x3E	; 62
    8854:	c5 01       	movw	r24, r10
    8856:	b4 01       	movw	r22, r8
    8858:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    885c:	a5 01       	movw	r20, r10
    885e:	94 01       	movw	r18, r8
    8860:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8864:	9b 01       	movw	r18, r22
    8866:	ac 01       	movw	r20, r24
    8868:	c7 01       	movw	r24, r14
    886a:	b6 01       	movw	r22, r12
    886c:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8870:	6b 01       	movw	r12, r22
    8872:	7c 01       	movw	r14, r24
    8874:	23 e6       	ldi	r18, 0x63	; 99
    8876:	39 eb       	ldi	r19, 0xB9	; 185
    8878:	47 e0       	ldi	r20, 0x07	; 7
    887a:	50 e4       	ldi	r21, 0x40	; 64
    887c:	c5 01       	movw	r24, r10
    887e:	b4 01       	movw	r22, r8
    8880:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8884:	9b 01       	movw	r18, r22
    8886:	ac 01       	movw	r20, r24
    8888:	c7 01       	movw	r24, r14
    888a:	b6 01       	movw	r22, r12
    888c:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8890:	25 e2       	ldi	r18, 0x25	; 37
    8892:	30 ec       	ldi	r19, 0xC0	; 192
    8894:	4f e6       	ldi	r20, 0x6F	; 111
    8896:	51 e4       	ldi	r21, 0x41	; 65
    8898:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    889c:	6b 01       	movw	r12, r22
    889e:	7c 01       	movw	r14, r24
    88a0:	be 01       	movw	r22, r28
    88a2:	dd 0f       	add	r29, r29
    88a4:	88 0b       	sbc	r24, r24
    88a6:	99 0b       	sbc	r25, r25
    88a8:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    88ac:	9b 01       	movw	r18, r22
    88ae:	ac 01       	movw	r20, r24
    88b0:	c7 01       	movw	r24, r14
    88b2:	b6 01       	movw	r22, r12
    88b4:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    88b8:	49 c6       	rjmp	.+3218   	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    88ba:	20 e0       	ldi	r18, 0x00	; 0
    88bc:	30 e0       	ldi	r19, 0x00	; 0
    88be:	40 e4       	ldi	r20, 0x40	; 64
    88c0:	51 e4       	ldi	r21, 0x41	; 65
    88c2:	c7 01       	movw	r24, r14
    88c4:	b6 01       	movw	r22, r12
    88c6:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    88ca:	18 16       	cp	r1, r24
    88cc:	dc f5       	brge	.+118    	; 0x8944 <corectTrv+0xde8>
    88ce:	20 e0       	ldi	r18, 0x00	; 0
    88d0:	30 e0       	ldi	r19, 0x00	; 0
    88d2:	40 e5       	ldi	r20, 0x50	; 80
    88d4:	51 e4       	ldi	r21, 0x41	; 65
    88d6:	c7 01       	movw	r24, r14
    88d8:	b6 01       	movw	r22, r12
    88da:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    88de:	18 16       	cp	r1, r24
    88e0:	8c f1       	brlt	.+98     	; 0x8944 <corectTrv+0xde8>
		{
			return(0.062 * ds * ds + 1.818 * ds + 15.22)* k;
    88e2:	26 eb       	ldi	r18, 0xB6	; 182
    88e4:	33 ef       	ldi	r19, 0xF3	; 243
    88e6:	4d e7       	ldi	r20, 0x7D	; 125
    88e8:	5d e3       	ldi	r21, 0x3D	; 61
    88ea:	c5 01       	movw	r24, r10
    88ec:	b4 01       	movw	r22, r8
    88ee:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    88f2:	a5 01       	movw	r20, r10
    88f4:	94 01       	movw	r18, r8
    88f6:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    88fa:	6b 01       	movw	r12, r22
    88fc:	7c 01       	movw	r14, r24
    88fe:	29 e3       	ldi	r18, 0x39	; 57
    8900:	34 eb       	ldi	r19, 0xB4	; 180
    8902:	48 ee       	ldi	r20, 0xE8	; 232
    8904:	5f e3       	ldi	r21, 0x3F	; 63
    8906:	c5 01       	movw	r24, r10
    8908:	b4 01       	movw	r22, r8
    890a:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    890e:	9b 01       	movw	r18, r22
    8910:	ac 01       	movw	r20, r24
    8912:	c7 01       	movw	r24, r14
    8914:	b6 01       	movw	r22, r12
    8916:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    891a:	2f e1       	ldi	r18, 0x1F	; 31
    891c:	35 e8       	ldi	r19, 0x85	; 133
    891e:	43 e7       	ldi	r20, 0x73	; 115
    8920:	51 e4       	ldi	r21, 0x41	; 65
    8922:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8926:	6b 01       	movw	r12, r22
    8928:	7c 01       	movw	r14, r24
    892a:	be 01       	movw	r22, r28
    892c:	dd 0f       	add	r29, r29
    892e:	88 0b       	sbc	r24, r24
    8930:	99 0b       	sbc	r25, r25
    8932:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    8936:	9b 01       	movw	r18, r22
    8938:	ac 01       	movw	r20, r24
    893a:	c7 01       	movw	r24, r14
    893c:	b6 01       	movw	r22, r12
    893e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8942:	04 c6       	rjmp	.+3080   	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    8944:	20 e0       	ldi	r18, 0x00	; 0
    8946:	30 e0       	ldi	r19, 0x00	; 0
    8948:	40 e5       	ldi	r20, 0x50	; 80
    894a:	51 e4       	ldi	r21, 0x41	; 65
    894c:	c7 01       	movw	r24, r14
    894e:	b6 01       	movw	r22, r12
    8950:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    8954:	18 16       	cp	r1, r24
    8956:	dc f5       	brge	.+118    	; 0x89ce <corectTrv+0xe72>
    8958:	20 e0       	ldi	r18, 0x00	; 0
    895a:	30 e0       	ldi	r19, 0x00	; 0
    895c:	40 e6       	ldi	r20, 0x60	; 96
    895e:	51 e4       	ldi	r21, 0x41	; 65
    8960:	c7 01       	movw	r24, r14
    8962:	b6 01       	movw	r22, r12
    8964:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    8968:	18 16       	cp	r1, r24
    896a:	8c f1       	brlt	.+98     	; 0x89ce <corectTrv+0xe72>
		{
			return( 0.097 * ds * ds + 1.941 * ds + 16.00)* k;
    896c:	20 ef       	ldi	r18, 0xF0	; 240
    896e:	37 ea       	ldi	r19, 0xA7	; 167
    8970:	46 ec       	ldi	r20, 0xC6	; 198
    8972:	5d e3       	ldi	r21, 0x3D	; 61
    8974:	c5 01       	movw	r24, r10
    8976:	b4 01       	movw	r22, r8
    8978:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    897c:	a5 01       	movw	r20, r10
    897e:	94 01       	movw	r18, r8
    8980:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8984:	6b 01       	movw	r12, r22
    8986:	7c 01       	movw	r14, r24
    8988:	20 eb       	ldi	r18, 0xB0	; 176
    898a:	32 e7       	ldi	r19, 0x72	; 114
    898c:	48 ef       	ldi	r20, 0xF8	; 248
    898e:	5f e3       	ldi	r21, 0x3F	; 63
    8990:	c5 01       	movw	r24, r10
    8992:	b4 01       	movw	r22, r8
    8994:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8998:	9b 01       	movw	r18, r22
    899a:	ac 01       	movw	r20, r24
    899c:	c7 01       	movw	r24, r14
    899e:	b6 01       	movw	r22, r12
    89a0:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    89a4:	20 e0       	ldi	r18, 0x00	; 0
    89a6:	30 e0       	ldi	r19, 0x00	; 0
    89a8:	40 e8       	ldi	r20, 0x80	; 128
    89aa:	51 e4       	ldi	r21, 0x41	; 65
    89ac:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    89b0:	6b 01       	movw	r12, r22
    89b2:	7c 01       	movw	r14, r24
    89b4:	be 01       	movw	r22, r28
    89b6:	dd 0f       	add	r29, r29
    89b8:	88 0b       	sbc	r24, r24
    89ba:	99 0b       	sbc	r25, r25
    89bc:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    89c0:	9b 01       	movw	r18, r22
    89c2:	ac 01       	movw	r20, r24
    89c4:	c7 01       	movw	r24, r14
    89c6:	b6 01       	movw	r22, r12
    89c8:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    89cc:	bf c5       	rjmp	.+2942   	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    89ce:	20 e0       	ldi	r18, 0x00	; 0
    89d0:	30 e0       	ldi	r19, 0x00	; 0
    89d2:	40 e6       	ldi	r20, 0x60	; 96
    89d4:	51 e4       	ldi	r21, 0x41	; 65
    89d6:	c7 01       	movw	r24, r14
    89d8:	b6 01       	movw	r22, r12
    89da:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    89de:	18 16       	cp	r1, r24
    89e0:	0c f0       	brlt	.+2      	; 0x89e4 <corectTrv+0xe88>
    89e2:	54 c0       	rjmp	.+168    	; 0x8a8c <corectTrv+0xf30>
    89e4:	20 e0       	ldi	r18, 0x00	; 0
    89e6:	30 e0       	ldi	r19, 0x00	; 0
    89e8:	40 e7       	ldi	r20, 0x70	; 112
    89ea:	51 e4       	ldi	r21, 0x41	; 65
    89ec:	c7 01       	movw	r24, r14
    89ee:	b6 01       	movw	r22, r12
    89f0:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    89f4:	18 16       	cp	r1, r24
    89f6:	0c f4       	brge	.+2      	; 0x89fa <corectTrv+0xe9e>
    89f8:	49 c0       	rjmp	.+146    	; 0x8a8c <corectTrv+0xf30>
		{
			return( 0.01598 * ds * ds * ds + 0.35913 * ds * ds + 2.90559 * ds + 17.70294)* k;
    89fa:	2d e7       	ldi	r18, 0x7D	; 125
    89fc:	38 ee       	ldi	r19, 0xE8	; 232
    89fe:	42 e8       	ldi	r20, 0x82	; 130
    8a00:	5c e3       	ldi	r21, 0x3C	; 60
    8a02:	c5 01       	movw	r24, r10
    8a04:	b4 01       	movw	r22, r8
    8a06:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8a0a:	a5 01       	movw	r20, r10
    8a0c:	94 01       	movw	r18, r8
    8a0e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8a12:	a5 01       	movw	r20, r10
    8a14:	94 01       	movw	r18, r8
    8a16:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8a1a:	6b 01       	movw	r12, r22
    8a1c:	7c 01       	movw	r14, r24
    8a1e:	23 ee       	ldi	r18, 0xE3	; 227
    8a20:	3f ed       	ldi	r19, 0xDF	; 223
    8a22:	47 eb       	ldi	r20, 0xB7	; 183
    8a24:	5e e3       	ldi	r21, 0x3E	; 62
    8a26:	c5 01       	movw	r24, r10
    8a28:	b4 01       	movw	r22, r8
    8a2a:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8a2e:	a5 01       	movw	r20, r10
    8a30:	94 01       	movw	r18, r8
    8a32:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8a36:	9b 01       	movw	r18, r22
    8a38:	ac 01       	movw	r20, r24
    8a3a:	c7 01       	movw	r24, r14
    8a3c:	b6 01       	movw	r22, r12
    8a3e:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8a42:	6b 01       	movw	r12, r22
    8a44:	7c 01       	movw	r14, r24
    8a46:	20 e3       	ldi	r18, 0x30	; 48
    8a48:	35 ef       	ldi	r19, 0xF5	; 245
    8a4a:	49 e3       	ldi	r20, 0x39	; 57
    8a4c:	50 e4       	ldi	r21, 0x40	; 64
    8a4e:	c5 01       	movw	r24, r10
    8a50:	b4 01       	movw	r22, r8
    8a52:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8a56:	9b 01       	movw	r18, r22
    8a58:	ac 01       	movw	r20, r24
    8a5a:	c7 01       	movw	r24, r14
    8a5c:	b6 01       	movw	r22, r12
    8a5e:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8a62:	2f e9       	ldi	r18, 0x9F	; 159
    8a64:	3f e9       	ldi	r19, 0x9F	; 159
    8a66:	4d e8       	ldi	r20, 0x8D	; 141
    8a68:	51 e4       	ldi	r21, 0x41	; 65
    8a6a:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8a6e:	6b 01       	movw	r12, r22
    8a70:	7c 01       	movw	r14, r24
    8a72:	be 01       	movw	r22, r28
    8a74:	dd 0f       	add	r29, r29
    8a76:	88 0b       	sbc	r24, r24
    8a78:	99 0b       	sbc	r25, r25
    8a7a:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    8a7e:	9b 01       	movw	r18, r22
    8a80:	ac 01       	movw	r20, r24
    8a82:	c7 01       	movw	r24, r14
    8a84:	b6 01       	movw	r22, r12
    8a86:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8a8a:	60 c5       	rjmp	.+2752   	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    8a8c:	20 e0       	ldi	r18, 0x00	; 0
    8a8e:	30 e0       	ldi	r19, 0x00	; 0
    8a90:	40 e7       	ldi	r20, 0x70	; 112
    8a92:	51 e4       	ldi	r21, 0x41	; 65
    8a94:	c7 01       	movw	r24, r14
    8a96:	b6 01       	movw	r22, r12
    8a98:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    8a9c:	18 16       	cp	r1, r24
    8a9e:	0c f0       	brlt	.+2      	; 0x8aa2 <corectTrv+0xf46>
    8aa0:	54 c0       	rjmp	.+168    	; 0x8b4a <corectTrv+0xfee>
    8aa2:	20 e0       	ldi	r18, 0x00	; 0
    8aa4:	30 e0       	ldi	r19, 0x00	; 0
    8aa6:	40 e8       	ldi	r20, 0x80	; 128
    8aa8:	51 e4       	ldi	r21, 0x41	; 65
    8aaa:	c7 01       	movw	r24, r14
    8aac:	b6 01       	movw	r22, r12
    8aae:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    8ab2:	18 16       	cp	r1, r24
    8ab4:	0c f4       	brge	.+2      	; 0x8ab8 <corectTrv+0xf5c>
    8ab6:	49 c0       	rjmp	.+146    	; 0x8b4a <corectTrv+0xfee>
		{
			return( 0.02358 * ds * ds * ds + 0.48252 * ds * ds + 3.36313 * ds + 20.09441)* k;
    8ab8:	28 ed       	ldi	r18, 0xD8	; 216
    8aba:	3a e2       	ldi	r19, 0x2A	; 42
    8abc:	41 ec       	ldi	r20, 0xC1	; 193
    8abe:	5c e3       	ldi	r21, 0x3C	; 60
    8ac0:	c5 01       	movw	r24, r10
    8ac2:	b4 01       	movw	r22, r8
    8ac4:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8ac8:	a5 01       	movw	r20, r10
    8aca:	94 01       	movw	r18, r8
    8acc:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8ad0:	a5 01       	movw	r20, r10
    8ad2:	94 01       	movw	r18, r8
    8ad4:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8ad8:	6b 01       	movw	r12, r22
    8ada:	7c 01       	movw	r14, r24
    8adc:	2d ed       	ldi	r18, 0xDD	; 221
    8ade:	3c e0       	ldi	r19, 0x0C	; 12
    8ae0:	47 ef       	ldi	r20, 0xF7	; 247
    8ae2:	5e e3       	ldi	r21, 0x3E	; 62
    8ae4:	c5 01       	movw	r24, r10
    8ae6:	b4 01       	movw	r22, r8
    8ae8:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8aec:	a5 01       	movw	r20, r10
    8aee:	94 01       	movw	r18, r8
    8af0:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8af4:	9b 01       	movw	r18, r22
    8af6:	ac 01       	movw	r20, r24
    8af8:	c7 01       	movw	r24, r14
    8afa:	b6 01       	movw	r22, r12
    8afc:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8b00:	6b 01       	movw	r12, r22
    8b02:	7c 01       	movw	r14, r24
    8b04:	26 e8       	ldi	r18, 0x86	; 134
    8b06:	3d e3       	ldi	r19, 0x3D	; 61
    8b08:	47 e5       	ldi	r20, 0x57	; 87
    8b0a:	50 e4       	ldi	r21, 0x40	; 64
    8b0c:	c5 01       	movw	r24, r10
    8b0e:	b4 01       	movw	r22, r8
    8b10:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8b14:	9b 01       	movw	r18, r22
    8b16:	ac 01       	movw	r20, r24
    8b18:	c7 01       	movw	r24, r14
    8b1a:	b6 01       	movw	r22, r12
    8b1c:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8b20:	2a e5       	ldi	r18, 0x5A	; 90
    8b22:	31 ec       	ldi	r19, 0xC1	; 193
    8b24:	40 ea       	ldi	r20, 0xA0	; 160
    8b26:	51 e4       	ldi	r21, 0x41	; 65
    8b28:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8b2c:	6b 01       	movw	r12, r22
    8b2e:	7c 01       	movw	r14, r24
    8b30:	be 01       	movw	r22, r28
    8b32:	dd 0f       	add	r29, r29
    8b34:	88 0b       	sbc	r24, r24
    8b36:	99 0b       	sbc	r25, r25
    8b38:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    8b3c:	9b 01       	movw	r18, r22
    8b3e:	ac 01       	movw	r20, r24
    8b40:	c7 01       	movw	r24, r14
    8b42:	b6 01       	movw	r22, r12
    8b44:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8b48:	01 c5       	rjmp	.+2562   	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 9)
    8b4a:	20 e0       	ldi	r18, 0x00	; 0
    8b4c:	30 e0       	ldi	r19, 0x00	; 0
    8b4e:	40 e8       	ldi	r20, 0x80	; 128
    8b50:	51 e4       	ldi	r21, 0x41	; 65
    8b52:	c7 01       	movw	r24, r14
    8b54:	b6 01       	movw	r22, r12
    8b56:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    8b5a:	18 16       	cp	r1, r24
    8b5c:	0c f0       	brlt	.+2      	; 0x8b60 <corectTrv+0x1004>
    8b5e:	e7 c4       	rjmp	.+2510   	; 0x952e <corectTrv+0x19d2>
		{
			return( 0.01076 * ds * ds * ds + 0.28823 * ds * ds + 2.82362 * ds + 25.08042)* k;
    8b60:	26 eb       	ldi	r18, 0xB6	; 182
    8b62:	3a e4       	ldi	r19, 0x4A	; 74
    8b64:	40 e3       	ldi	r20, 0x30	; 48
    8b66:	5c e3       	ldi	r21, 0x3C	; 60
    8b68:	c5 01       	movw	r24, r10
    8b6a:	b4 01       	movw	r22, r8
    8b6c:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8b70:	a5 01       	movw	r20, r10
    8b72:	94 01       	movw	r18, r8
    8b74:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8b78:	a5 01       	movw	r20, r10
    8b7a:	94 01       	movw	r18, r8
    8b7c:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8b80:	6b 01       	movw	r12, r22
    8b82:	7c 01       	movw	r14, r24
    8b84:	22 ee       	ldi	r18, 0xE2	; 226
    8b86:	32 e9       	ldi	r19, 0x92	; 146
    8b88:	43 e9       	ldi	r20, 0x93	; 147
    8b8a:	5e e3       	ldi	r21, 0x3E	; 62
    8b8c:	c5 01       	movw	r24, r10
    8b8e:	b4 01       	movw	r22, r8
    8b90:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8b94:	a5 01       	movw	r20, r10
    8b96:	94 01       	movw	r18, r8
    8b98:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8b9c:	9b 01       	movw	r18, r22
    8b9e:	ac 01       	movw	r20, r24
    8ba0:	c7 01       	movw	r24, r14
    8ba2:	b6 01       	movw	r22, r12
    8ba4:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8ba8:	6b 01       	movw	r12, r22
    8baa:	7c 01       	movw	r14, r24
    8bac:	21 e3       	ldi	r18, 0x31	; 49
    8bae:	36 eb       	ldi	r19, 0xB6	; 182
    8bb0:	44 e3       	ldi	r20, 0x34	; 52
    8bb2:	50 e4       	ldi	r21, 0x40	; 64
    8bb4:	c5 01       	movw	r24, r10
    8bb6:	b4 01       	movw	r22, r8
    8bb8:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8bbc:	9b 01       	movw	r18, r22
    8bbe:	ac 01       	movw	r20, r24
    8bc0:	c7 01       	movw	r24, r14
    8bc2:	b6 01       	movw	r22, r12
    8bc4:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8bc8:	23 eb       	ldi	r18, 0xB3	; 179
    8bca:	34 ea       	ldi	r19, 0xA4	; 164
    8bcc:	48 ec       	ldi	r20, 0xC8	; 200
    8bce:	51 e4       	ldi	r21, 0x41	; 65
    8bd0:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8bd4:	6b 01       	movw	r12, r22
    8bd6:	7c 01       	movw	r14, r24
    8bd8:	be 01       	movw	r22, r28
    8bda:	dd 0f       	add	r29, r29
    8bdc:	88 0b       	sbc	r24, r24
    8bde:	99 0b       	sbc	r25, r25
    8be0:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    8be4:	9b 01       	movw	r18, r22
    8be6:	ac 01       	movw	r20, r24
    8be8:	c7 01       	movw	r24, r14
    8bea:	b6 01       	movw	r22, r12
    8bec:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8bf0:	ad c4       	rjmp	.+2394   	; 0x954c <corectTrv+0x19f0>
		}
	}

	else if (ds >= 0 && ds <= 10)
    8bf2:	20 e0       	ldi	r18, 0x00	; 0
    8bf4:	30 e0       	ldi	r19, 0x00	; 0
    8bf6:	a9 01       	movw	r20, r18
    8bf8:	c5 01       	movw	r24, r10
    8bfa:	b4 01       	movw	r22, r8
    8bfc:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    8c00:	88 23       	and	r24, r24
    8c02:	0c f4       	brge	.+2      	; 0x8c06 <corectTrv+0x10aa>
    8c04:	e9 c2       	rjmp	.+1490   	; 0x91d8 <corectTrv+0x167c>
    8c06:	20 e0       	ldi	r18, 0x00	; 0
    8c08:	30 e0       	ldi	r19, 0x00	; 0
    8c0a:	40 e2       	ldi	r20, 0x20	; 32
    8c0c:	51 e4       	ldi	r21, 0x41	; 65
    8c0e:	c5 01       	movw	r24, r10
    8c10:	b4 01       	movw	r22, r8
    8c12:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    8c16:	18 16       	cp	r1, r24
    8c18:	0c f4       	brge	.+2      	; 0x8c1c <corectTrv+0x10c0>
    8c1a:	de c2       	rjmp	.+1468   	; 0x91d8 <corectTrv+0x167c>
	{
		if (Superheat == SSet)
    8c1c:	20 e0       	ldi	r18, 0x00	; 0
    8c1e:	30 e0       	ldi	r19, 0x00	; 0
    8c20:	40 ee       	ldi	r20, 0xE0	; 224
    8c22:	50 e4       	ldi	r21, 0x40	; 64
    8c24:	c7 01       	movw	r24, r14
    8c26:	b6 01       	movw	r22, r12
    8c28:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    8c2c:	81 11       	cpse	r24, r1
    8c2e:	2b c0       	rjmp	.+86     	; 0x8c86 <corectTrv+0x112a>
		{
			return( -2 * .00001 * ds * ds + 1.406 * ds)* k;
    8c30:	2c ea       	ldi	r18, 0xAC	; 172
    8c32:	35 ec       	ldi	r19, 0xC5	; 197
    8c34:	47 ea       	ldi	r20, 0xA7	; 167
    8c36:	57 eb       	ldi	r21, 0xB7	; 183
    8c38:	c5 01       	movw	r24, r10
    8c3a:	b4 01       	movw	r22, r8
    8c3c:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8c40:	a5 01       	movw	r20, r10
    8c42:	94 01       	movw	r18, r8
    8c44:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8c48:	6b 01       	movw	r12, r22
    8c4a:	7c 01       	movw	r14, r24
    8c4c:	2f ec       	ldi	r18, 0xCF	; 207
    8c4e:	37 ef       	ldi	r19, 0xF7	; 247
    8c50:	43 eb       	ldi	r20, 0xB3	; 179
    8c52:	5f e3       	ldi	r21, 0x3F	; 63
    8c54:	c5 01       	movw	r24, r10
    8c56:	b4 01       	movw	r22, r8
    8c58:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8c5c:	9b 01       	movw	r18, r22
    8c5e:	ac 01       	movw	r20, r24
    8c60:	c7 01       	movw	r24, r14
    8c62:	b6 01       	movw	r22, r12
    8c64:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8c68:	6b 01       	movw	r12, r22
    8c6a:	7c 01       	movw	r14, r24
    8c6c:	be 01       	movw	r22, r28
    8c6e:	dd 0f       	add	r29, r29
    8c70:	88 0b       	sbc	r24, r24
    8c72:	99 0b       	sbc	r25, r25
    8c74:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    8c78:	9b 01       	movw	r18, r22
    8c7a:	ac 01       	movw	r20, r24
    8c7c:	c7 01       	movw	r24, r14
    8c7e:	b6 01       	movw	r22, r12
    8c80:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8c84:	63 c4       	rjmp	.+2246   	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    8c86:	20 e0       	ldi	r18, 0x00	; 0
    8c88:	30 e0       	ldi	r19, 0x00	; 0
    8c8a:	40 ee       	ldi	r20, 0xE0	; 224
    8c8c:	50 e4       	ldi	r21, 0x40	; 64
    8c8e:	c7 01       	movw	r24, r14
    8c90:	b6 01       	movw	r22, r12
    8c92:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    8c96:	18 16       	cp	r1, r24
    8c98:	dc f5       	brge	.+118    	; 0x8d10 <corectTrv+0x11b4>
    8c9a:	20 e0       	ldi	r18, 0x00	; 0
    8c9c:	30 e0       	ldi	r19, 0x00	; 0
    8c9e:	40 e0       	ldi	r20, 0x00	; 0
    8ca0:	51 e4       	ldi	r21, 0x41	; 65
    8ca2:	c7 01       	movw	r24, r14
    8ca4:	b6 01       	movw	r22, r12
    8ca6:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    8caa:	18 16       	cp	r1, r24
    8cac:	8c f1       	brlt	.+98     	; 0x8d10 <corectTrv+0x11b4>
		{
			return( 0.062 * ds * ds + 0.570 * ds + 3.280)* k;
    8cae:	26 eb       	ldi	r18, 0xB6	; 182
    8cb0:	33 ef       	ldi	r19, 0xF3	; 243
    8cb2:	4d e7       	ldi	r20, 0x7D	; 125
    8cb4:	5d e3       	ldi	r21, 0x3D	; 61
    8cb6:	c5 01       	movw	r24, r10
    8cb8:	b4 01       	movw	r22, r8
    8cba:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8cbe:	a5 01       	movw	r20, r10
    8cc0:	94 01       	movw	r18, r8
    8cc2:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8cc6:	6b 01       	movw	r12, r22
    8cc8:	7c 01       	movw	r14, r24
    8cca:	25 e8       	ldi	r18, 0x85	; 133
    8ccc:	3b ee       	ldi	r19, 0xEB	; 235
    8cce:	41 e1       	ldi	r20, 0x11	; 17
    8cd0:	5f e3       	ldi	r21, 0x3F	; 63
    8cd2:	c5 01       	movw	r24, r10
    8cd4:	b4 01       	movw	r22, r8
    8cd6:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8cda:	9b 01       	movw	r18, r22
    8cdc:	ac 01       	movw	r20, r24
    8cde:	c7 01       	movw	r24, r14
    8ce0:	b6 01       	movw	r22, r12
    8ce2:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8ce6:	25 e8       	ldi	r18, 0x85	; 133
    8ce8:	3b ee       	ldi	r19, 0xEB	; 235
    8cea:	41 e5       	ldi	r20, 0x51	; 81
    8cec:	50 e4       	ldi	r21, 0x40	; 64
    8cee:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8cf2:	6b 01       	movw	r12, r22
    8cf4:	7c 01       	movw	r14, r24
    8cf6:	be 01       	movw	r22, r28
    8cf8:	dd 0f       	add	r29, r29
    8cfa:	88 0b       	sbc	r24, r24
    8cfc:	99 0b       	sbc	r25, r25
    8cfe:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    8d02:	9b 01       	movw	r18, r22
    8d04:	ac 01       	movw	r20, r24
    8d06:	c7 01       	movw	r24, r14
    8d08:	b6 01       	movw	r22, r12
    8d0a:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8d0e:	1e c4       	rjmp	.+2108   	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    8d10:	20 e0       	ldi	r18, 0x00	; 0
    8d12:	30 e0       	ldi	r19, 0x00	; 0
    8d14:	40 e0       	ldi	r20, 0x00	; 0
    8d16:	51 e4       	ldi	r21, 0x41	; 65
    8d18:	c7 01       	movw	r24, r14
    8d1a:	b6 01       	movw	r22, r12
    8d1c:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    8d20:	18 16       	cp	r1, r24
    8d22:	dc f5       	brge	.+118    	; 0x8d9a <corectTrv+0x123e>
    8d24:	20 e0       	ldi	r18, 0x00	; 0
    8d26:	30 e0       	ldi	r19, 0x00	; 0
    8d28:	40 e1       	ldi	r20, 0x10	; 16
    8d2a:	51 e4       	ldi	r21, 0x41	; 65
    8d2c:	c7 01       	movw	r24, r14
    8d2e:	b6 01       	movw	r22, r12
    8d30:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    8d34:	18 16       	cp	r1, r24
    8d36:	8c f1       	brlt	.+98     	; 0x8d9a <corectTrv+0x123e>
		{
			return( 0.099 * ds * ds - 0.019 * ds + 6.338)* k;
    8d38:	23 e8       	ldi	r18, 0x83	; 131
    8d3a:	30 ec       	ldi	r19, 0xC0	; 192
    8d3c:	4a ec       	ldi	r20, 0xCA	; 202
    8d3e:	5d e3       	ldi	r21, 0x3D	; 61
    8d40:	c5 01       	movw	r24, r10
    8d42:	b4 01       	movw	r22, r8
    8d44:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8d48:	a5 01       	movw	r20, r10
    8d4a:	94 01       	movw	r18, r8
    8d4c:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8d50:	6b 01       	movw	r12, r22
    8d52:	7c 01       	movw	r14, r24
    8d54:	23 ee       	ldi	r18, 0xE3	; 227
    8d56:	35 ea       	ldi	r19, 0xA5	; 165
    8d58:	4b e9       	ldi	r20, 0x9B	; 155
    8d5a:	5c e3       	ldi	r21, 0x3C	; 60
    8d5c:	c5 01       	movw	r24, r10
    8d5e:	b4 01       	movw	r22, r8
    8d60:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8d64:	9b 01       	movw	r18, r22
    8d66:	ac 01       	movw	r20, r24
    8d68:	c7 01       	movw	r24, r14
    8d6a:	b6 01       	movw	r22, r12
    8d6c:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    8d70:	25 ee       	ldi	r18, 0xE5	; 229
    8d72:	30 ed       	ldi	r19, 0xD0	; 208
    8d74:	4a ec       	ldi	r20, 0xCA	; 202
    8d76:	50 e4       	ldi	r21, 0x40	; 64
    8d78:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8d7c:	6b 01       	movw	r12, r22
    8d7e:	7c 01       	movw	r14, r24
    8d80:	be 01       	movw	r22, r28
    8d82:	dd 0f       	add	r29, r29
    8d84:	88 0b       	sbc	r24, r24
    8d86:	99 0b       	sbc	r25, r25
    8d88:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    8d8c:	9b 01       	movw	r18, r22
    8d8e:	ac 01       	movw	r20, r24
    8d90:	c7 01       	movw	r24, r14
    8d92:	b6 01       	movw	r22, r12
    8d94:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8d98:	d9 c3       	rjmp	.+1970   	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    8d9a:	20 e0       	ldi	r18, 0x00	; 0
    8d9c:	30 e0       	ldi	r19, 0x00	; 0
    8d9e:	40 e1       	ldi	r20, 0x10	; 16
    8da0:	51 e4       	ldi	r21, 0x41	; 65
    8da2:	c7 01       	movw	r24, r14
    8da4:	b6 01       	movw	r22, r12
    8da6:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    8daa:	18 16       	cp	r1, r24
    8dac:	dc f5       	brge	.+118    	; 0x8e24 <corectTrv+0x12c8>
    8dae:	20 e0       	ldi	r18, 0x00	; 0
    8db0:	30 e0       	ldi	r19, 0x00	; 0
    8db2:	40 e2       	ldi	r20, 0x20	; 32
    8db4:	51 e4       	ldi	r21, 0x41	; 65
    8db6:	c7 01       	movw	r24, r14
    8db8:	b6 01       	movw	r22, r12
    8dba:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    8dbe:	18 16       	cp	r1, r24
    8dc0:	8c f1       	brlt	.+98     	; 0x8e24 <corectTrv+0x12c8>
		{
			return( 0.121 * ds * ds - 0.409 * ds + 9.164)* k;
    8dc2:	29 ed       	ldi	r18, 0xD9	; 217
    8dc4:	3e ec       	ldi	r19, 0xCE	; 206
    8dc6:	47 ef       	ldi	r20, 0xF7	; 247
    8dc8:	5d e3       	ldi	r21, 0x3D	; 61
    8dca:	c5 01       	movw	r24, r10
    8dcc:	b4 01       	movw	r22, r8
    8dce:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8dd2:	a5 01       	movw	r20, r10
    8dd4:	94 01       	movw	r18, r8
    8dd6:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8dda:	6b 01       	movw	r12, r22
    8ddc:	7c 01       	movw	r14, r24
    8dde:	23 e7       	ldi	r18, 0x73	; 115
    8de0:	38 e6       	ldi	r19, 0x68	; 104
    8de2:	41 ed       	ldi	r20, 0xD1	; 209
    8de4:	5e e3       	ldi	r21, 0x3E	; 62
    8de6:	c5 01       	movw	r24, r10
    8de8:	b4 01       	movw	r22, r8
    8dea:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8dee:	9b 01       	movw	r18, r22
    8df0:	ac 01       	movw	r20, r24
    8df2:	c7 01       	movw	r24, r14
    8df4:	b6 01       	movw	r22, r12
    8df6:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    8dfa:	2e eb       	ldi	r18, 0xBE	; 190
    8dfc:	3f e9       	ldi	r19, 0x9F	; 159
    8dfe:	42 e1       	ldi	r20, 0x12	; 18
    8e00:	51 e4       	ldi	r21, 0x41	; 65
    8e02:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8e06:	6b 01       	movw	r12, r22
    8e08:	7c 01       	movw	r14, r24
    8e0a:	be 01       	movw	r22, r28
    8e0c:	dd 0f       	add	r29, r29
    8e0e:	88 0b       	sbc	r24, r24
    8e10:	99 0b       	sbc	r25, r25
    8e12:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    8e16:	9b 01       	movw	r18, r22
    8e18:	ac 01       	movw	r20, r24
    8e1a:	c7 01       	movw	r24, r14
    8e1c:	b6 01       	movw	r22, r12
    8e1e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8e22:	94 c3       	rjmp	.+1832   	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    8e24:	20 e0       	ldi	r18, 0x00	; 0
    8e26:	30 e0       	ldi	r19, 0x00	; 0
    8e28:	40 e2       	ldi	r20, 0x20	; 32
    8e2a:	51 e4       	ldi	r21, 0x41	; 65
    8e2c:	c7 01       	movw	r24, r14
    8e2e:	b6 01       	movw	r22, r12
    8e30:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    8e34:	18 16       	cp	r1, r24
    8e36:	dc f5       	brge	.+118    	; 0x8eae <corectTrv+0x1352>
    8e38:	20 e0       	ldi	r18, 0x00	; 0
    8e3a:	30 e0       	ldi	r19, 0x00	; 0
    8e3c:	40 e3       	ldi	r20, 0x30	; 48
    8e3e:	51 e4       	ldi	r21, 0x41	; 65
    8e40:	c7 01       	movw	r24, r14
    8e42:	b6 01       	movw	r22, r12
    8e44:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    8e48:	18 16       	cp	r1, r24
    8e4a:	8c f1       	brlt	.+98     	; 0x8eae <corectTrv+0x1352>
		{
			return( 0.128 * ds * ds - 0.340 * ds + 11.4)* k;
    8e4c:	2f e6       	ldi	r18, 0x6F	; 111
    8e4e:	32 e1       	ldi	r19, 0x12	; 18
    8e50:	43 e0       	ldi	r20, 0x03	; 3
    8e52:	5e e3       	ldi	r21, 0x3E	; 62
    8e54:	c5 01       	movw	r24, r10
    8e56:	b4 01       	movw	r22, r8
    8e58:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8e5c:	a5 01       	movw	r20, r10
    8e5e:	94 01       	movw	r18, r8
    8e60:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8e64:	6b 01       	movw	r12, r22
    8e66:	7c 01       	movw	r14, r24
    8e68:	2b e7       	ldi	r18, 0x7B	; 123
    8e6a:	34 e1       	ldi	r19, 0x14	; 20
    8e6c:	4e ea       	ldi	r20, 0xAE	; 174
    8e6e:	5e e3       	ldi	r21, 0x3E	; 62
    8e70:	c5 01       	movw	r24, r10
    8e72:	b4 01       	movw	r22, r8
    8e74:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8e78:	9b 01       	movw	r18, r22
    8e7a:	ac 01       	movw	r20, r24
    8e7c:	c7 01       	movw	r24, r14
    8e7e:	b6 01       	movw	r22, r12
    8e80:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    8e84:	26 e6       	ldi	r18, 0x66	; 102
    8e86:	36 e6       	ldi	r19, 0x66	; 102
    8e88:	46 e3       	ldi	r20, 0x36	; 54
    8e8a:	51 e4       	ldi	r21, 0x41	; 65
    8e8c:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8e90:	6b 01       	movw	r12, r22
    8e92:	7c 01       	movw	r14, r24
    8e94:	be 01       	movw	r22, r28
    8e96:	dd 0f       	add	r29, r29
    8e98:	88 0b       	sbc	r24, r24
    8e9a:	99 0b       	sbc	r25, r25
    8e9c:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    8ea0:	9b 01       	movw	r18, r22
    8ea2:	ac 01       	movw	r20, r24
    8ea4:	c7 01       	movw	r24, r14
    8ea6:	b6 01       	movw	r22, r12
    8ea8:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8eac:	4f c3       	rjmp	.+1694   	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    8eae:	20 e0       	ldi	r18, 0x00	; 0
    8eb0:	30 e0       	ldi	r19, 0x00	; 0
    8eb2:	40 e3       	ldi	r20, 0x30	; 48
    8eb4:	51 e4       	ldi	r21, 0x41	; 65
    8eb6:	c7 01       	movw	r24, r14
    8eb8:	b6 01       	movw	r22, r12
    8eba:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    8ebe:	18 16       	cp	r1, r24
    8ec0:	dc f5       	brge	.+118    	; 0x8f38 <corectTrv+0x13dc>
    8ec2:	20 e0       	ldi	r18, 0x00	; 0
    8ec4:	30 e0       	ldi	r19, 0x00	; 0
    8ec6:	40 e4       	ldi	r20, 0x40	; 64
    8ec8:	51 e4       	ldi	r21, 0x41	; 65
    8eca:	c7 01       	movw	r24, r14
    8ecc:	b6 01       	movw	r22, r12
    8ece:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    8ed2:	18 16       	cp	r1, r24
    8ed4:	8c f1       	brlt	.+98     	; 0x8f38 <corectTrv+0x13dc>
		{
			return( 0.128 * ds * ds - 0.382 * ds + 15.51)* k;
    8ed6:	2f e6       	ldi	r18, 0x6F	; 111
    8ed8:	32 e1       	ldi	r19, 0x12	; 18
    8eda:	43 e0       	ldi	r20, 0x03	; 3
    8edc:	5e e3       	ldi	r21, 0x3E	; 62
    8ede:	c5 01       	movw	r24, r10
    8ee0:	b4 01       	movw	r22, r8
    8ee2:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8ee6:	a5 01       	movw	r20, r10
    8ee8:	94 01       	movw	r18, r8
    8eea:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8eee:	6b 01       	movw	r12, r22
    8ef0:	7c 01       	movw	r14, r24
    8ef2:	21 e8       	ldi	r18, 0x81	; 129
    8ef4:	35 e9       	ldi	r19, 0x95	; 149
    8ef6:	43 ec       	ldi	r20, 0xC3	; 195
    8ef8:	5e e3       	ldi	r21, 0x3E	; 62
    8efa:	c5 01       	movw	r24, r10
    8efc:	b4 01       	movw	r22, r8
    8efe:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8f02:	9b 01       	movw	r18, r22
    8f04:	ac 01       	movw	r20, r24
    8f06:	c7 01       	movw	r24, r14
    8f08:	b6 01       	movw	r22, r12
    8f0a:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    8f0e:	26 ef       	ldi	r18, 0xF6	; 246
    8f10:	38 e2       	ldi	r19, 0x28	; 40
    8f12:	48 e7       	ldi	r20, 0x78	; 120
    8f14:	51 e4       	ldi	r21, 0x41	; 65
    8f16:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8f1a:	6b 01       	movw	r12, r22
    8f1c:	7c 01       	movw	r14, r24
    8f1e:	be 01       	movw	r22, r28
    8f20:	dd 0f       	add	r29, r29
    8f22:	88 0b       	sbc	r24, r24
    8f24:	99 0b       	sbc	r25, r25
    8f26:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    8f2a:	9b 01       	movw	r18, r22
    8f2c:	ac 01       	movw	r20, r24
    8f2e:	c7 01       	movw	r24, r14
    8f30:	b6 01       	movw	r22, r12
    8f32:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8f36:	0a c3       	rjmp	.+1556   	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    8f38:	20 e0       	ldi	r18, 0x00	; 0
    8f3a:	30 e0       	ldi	r19, 0x00	; 0
    8f3c:	40 e4       	ldi	r20, 0x40	; 64
    8f3e:	51 e4       	ldi	r21, 0x41	; 65
    8f40:	c7 01       	movw	r24, r14
    8f42:	b6 01       	movw	r22, r12
    8f44:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    8f48:	18 16       	cp	r1, r24
    8f4a:	dc f5       	brge	.+118    	; 0x8fc2 <corectTrv+0x1466>
    8f4c:	20 e0       	ldi	r18, 0x00	; 0
    8f4e:	30 e0       	ldi	r19, 0x00	; 0
    8f50:	40 e5       	ldi	r20, 0x50	; 80
    8f52:	51 e4       	ldi	r21, 0x41	; 65
    8f54:	c7 01       	movw	r24, r14
    8f56:	b6 01       	movw	r22, r12
    8f58:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    8f5c:	18 16       	cp	r1, r24
    8f5e:	8c f1       	brlt	.+98     	; 0x8fc2 <corectTrv+0x1466>
		{
			return( 0.128 * ds * ds - 0.382 * ds + 15.51)* k;
    8f60:	2f e6       	ldi	r18, 0x6F	; 111
    8f62:	32 e1       	ldi	r19, 0x12	; 18
    8f64:	43 e0       	ldi	r20, 0x03	; 3
    8f66:	5e e3       	ldi	r21, 0x3E	; 62
    8f68:	c5 01       	movw	r24, r10
    8f6a:	b4 01       	movw	r22, r8
    8f6c:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8f70:	a5 01       	movw	r20, r10
    8f72:	94 01       	movw	r18, r8
    8f74:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8f78:	6b 01       	movw	r12, r22
    8f7a:	7c 01       	movw	r14, r24
    8f7c:	21 e8       	ldi	r18, 0x81	; 129
    8f7e:	35 e9       	ldi	r19, 0x95	; 149
    8f80:	43 ec       	ldi	r20, 0xC3	; 195
    8f82:	5e e3       	ldi	r21, 0x3E	; 62
    8f84:	c5 01       	movw	r24, r10
    8f86:	b4 01       	movw	r22, r8
    8f88:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8f8c:	9b 01       	movw	r18, r22
    8f8e:	ac 01       	movw	r20, r24
    8f90:	c7 01       	movw	r24, r14
    8f92:	b6 01       	movw	r22, r12
    8f94:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    8f98:	26 ef       	ldi	r18, 0xF6	; 246
    8f9a:	38 e2       	ldi	r19, 0x28	; 40
    8f9c:	48 e7       	ldi	r20, 0x78	; 120
    8f9e:	51 e4       	ldi	r21, 0x41	; 65
    8fa0:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    8fa4:	6b 01       	movw	r12, r22
    8fa6:	7c 01       	movw	r14, r24
    8fa8:	be 01       	movw	r22, r28
    8faa:	dd 0f       	add	r29, r29
    8fac:	88 0b       	sbc	r24, r24
    8fae:	99 0b       	sbc	r25, r25
    8fb0:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    8fb4:	9b 01       	movw	r18, r22
    8fb6:	ac 01       	movw	r20, r24
    8fb8:	c7 01       	movw	r24, r14
    8fba:	b6 01       	movw	r22, r12
    8fbc:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8fc0:	c5 c2       	rjmp	.+1418   	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    8fc2:	20 e0       	ldi	r18, 0x00	; 0
    8fc4:	30 e0       	ldi	r19, 0x00	; 0
    8fc6:	40 e5       	ldi	r20, 0x50	; 80
    8fc8:	51 e4       	ldi	r21, 0x41	; 65
    8fca:	c7 01       	movw	r24, r14
    8fcc:	b6 01       	movw	r22, r12
    8fce:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    8fd2:	18 16       	cp	r1, r24
    8fd4:	dc f5       	brge	.+118    	; 0x904c <corectTrv+0x14f0>
    8fd6:	20 e0       	ldi	r18, 0x00	; 0
    8fd8:	30 e0       	ldi	r19, 0x00	; 0
    8fda:	40 e6       	ldi	r20, 0x60	; 96
    8fdc:	51 e4       	ldi	r21, 0x41	; 65
    8fde:	c7 01       	movw	r24, r14
    8fe0:	b6 01       	movw	r22, r12
    8fe2:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    8fe6:	18 16       	cp	r1, r24
    8fe8:	8c f1       	brlt	.+98     	; 0x904c <corectTrv+0x14f0>
		{
			return( 0.137 * ds * ds - 0.652 * ds + 16.63)* k;
    8fea:	2a eb       	ldi	r18, 0xBA	; 186
    8fec:	39 e4       	ldi	r19, 0x49	; 73
    8fee:	4c e0       	ldi	r20, 0x0C	; 12
    8ff0:	5e e3       	ldi	r21, 0x3E	; 62
    8ff2:	c5 01       	movw	r24, r10
    8ff4:	b4 01       	movw	r22, r8
    8ff6:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    8ffa:	a5 01       	movw	r20, r10
    8ffc:	94 01       	movw	r18, r8
    8ffe:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    9002:	6b 01       	movw	r12, r22
    9004:	7c 01       	movw	r14, r24
    9006:	29 e7       	ldi	r18, 0x79	; 121
    9008:	39 ee       	ldi	r19, 0xE9	; 233
    900a:	46 e2       	ldi	r20, 0x26	; 38
    900c:	5f e3       	ldi	r21, 0x3F	; 63
    900e:	c5 01       	movw	r24, r10
    9010:	b4 01       	movw	r22, r8
    9012:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    9016:	9b 01       	movw	r18, r22
    9018:	ac 01       	movw	r20, r24
    901a:	c7 01       	movw	r24, r14
    901c:	b6 01       	movw	r22, r12
    901e:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    9022:	2d e3       	ldi	r18, 0x3D	; 61
    9024:	3a e0       	ldi	r19, 0x0A	; 10
    9026:	45 e8       	ldi	r20, 0x85	; 133
    9028:	51 e4       	ldi	r21, 0x41	; 65
    902a:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    902e:	6b 01       	movw	r12, r22
    9030:	7c 01       	movw	r14, r24
    9032:	be 01       	movw	r22, r28
    9034:	dd 0f       	add	r29, r29
    9036:	88 0b       	sbc	r24, r24
    9038:	99 0b       	sbc	r25, r25
    903a:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    903e:	9b 01       	movw	r18, r22
    9040:	ac 01       	movw	r20, r24
    9042:	c7 01       	movw	r24, r14
    9044:	b6 01       	movw	r22, r12
    9046:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    904a:	80 c2       	rjmp	.+1280   	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    904c:	20 e0       	ldi	r18, 0x00	; 0
    904e:	30 e0       	ldi	r19, 0x00	; 0
    9050:	40 e6       	ldi	r20, 0x60	; 96
    9052:	51 e4       	ldi	r21, 0x41	; 65
    9054:	c7 01       	movw	r24, r14
    9056:	b6 01       	movw	r22, r12
    9058:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    905c:	18 16       	cp	r1, r24
    905e:	dc f5       	brge	.+118    	; 0x90d6 <corectTrv+0x157a>
    9060:	20 e0       	ldi	r18, 0x00	; 0
    9062:	30 e0       	ldi	r19, 0x00	; 0
    9064:	40 e7       	ldi	r20, 0x70	; 112
    9066:	51 e4       	ldi	r21, 0x41	; 65
    9068:	c7 01       	movw	r24, r14
    906a:	b6 01       	movw	r22, r12
    906c:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    9070:	18 16       	cp	r1, r24
    9072:	8c f1       	brlt	.+98     	; 0x90d6 <corectTrv+0x157a>
		{
			return( 0.142 * ds * ds - 0.630 * ds + 17.7)* k;
    9074:	23 e7       	ldi	r18, 0x73	; 115
    9076:	38 e6       	ldi	r19, 0x68	; 104
    9078:	41 e1       	ldi	r20, 0x11	; 17
    907a:	5e e3       	ldi	r21, 0x3E	; 62
    907c:	c5 01       	movw	r24, r10
    907e:	b4 01       	movw	r22, r8
    9080:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    9084:	a5 01       	movw	r20, r10
    9086:	94 01       	movw	r18, r8
    9088:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    908c:	6b 01       	movw	r12, r22
    908e:	7c 01       	movw	r14, r24
    9090:	2e ea       	ldi	r18, 0xAE	; 174
    9092:	37 e4       	ldi	r19, 0x47	; 71
    9094:	41 e2       	ldi	r20, 0x21	; 33
    9096:	5f e3       	ldi	r21, 0x3F	; 63
    9098:	c5 01       	movw	r24, r10
    909a:	b4 01       	movw	r22, r8
    909c:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    90a0:	9b 01       	movw	r18, r22
    90a2:	ac 01       	movw	r20, r24
    90a4:	c7 01       	movw	r24, r14
    90a6:	b6 01       	movw	r22, r12
    90a8:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    90ac:	2a e9       	ldi	r18, 0x9A	; 154
    90ae:	39 e9       	ldi	r19, 0x99	; 153
    90b0:	4d e8       	ldi	r20, 0x8D	; 141
    90b2:	51 e4       	ldi	r21, 0x41	; 65
    90b4:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    90b8:	6b 01       	movw	r12, r22
    90ba:	7c 01       	movw	r14, r24
    90bc:	be 01       	movw	r22, r28
    90be:	dd 0f       	add	r29, r29
    90c0:	88 0b       	sbc	r24, r24
    90c2:	99 0b       	sbc	r25, r25
    90c4:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    90c8:	9b 01       	movw	r18, r22
    90ca:	ac 01       	movw	r20, r24
    90cc:	c7 01       	movw	r24, r14
    90ce:	b6 01       	movw	r22, r12
    90d0:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    90d4:	3b c2       	rjmp	.+1142   	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    90d6:	20 e0       	ldi	r18, 0x00	; 0
    90d8:	30 e0       	ldi	r19, 0x00	; 0
    90da:	40 e7       	ldi	r20, 0x70	; 112
    90dc:	51 e4       	ldi	r21, 0x41	; 65
    90de:	c7 01       	movw	r24, r14
    90e0:	b6 01       	movw	r22, r12
    90e2:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    90e6:	18 16       	cp	r1, r24
    90e8:	dc f5       	brge	.+118    	; 0x9160 <corectTrv+0x1604>
    90ea:	20 e0       	ldi	r18, 0x00	; 0
    90ec:	30 e0       	ldi	r19, 0x00	; 0
    90ee:	40 e8       	ldi	r20, 0x80	; 128
    90f0:	51 e4       	ldi	r21, 0x41	; 65
    90f2:	c7 01       	movw	r24, r14
    90f4:	b6 01       	movw	r22, r12
    90f6:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    90fa:	18 16       	cp	r1, r24
    90fc:	8c f1       	brlt	.+98     	; 0x9160 <corectTrv+0x1604>
		{
			return( 0.126 * ds * ds - 0.683 * ds + 20.4)* k;
    90fe:	25 e2       	ldi	r18, 0x25	; 37
    9100:	36 e0       	ldi	r19, 0x06	; 6
    9102:	41 e0       	ldi	r20, 0x01	; 1
    9104:	5e e3       	ldi	r21, 0x3E	; 62
    9106:	c5 01       	movw	r24, r10
    9108:	b4 01       	movw	r22, r8
    910a:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    910e:	a5 01       	movw	r20, r10
    9110:	94 01       	movw	r18, r8
    9112:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    9116:	6b 01       	movw	r12, r22
    9118:	7c 01       	movw	r14, r24
    911a:	27 e1       	ldi	r18, 0x17	; 23
    911c:	39 ed       	ldi	r19, 0xD9	; 217
    911e:	4e e2       	ldi	r20, 0x2E	; 46
    9120:	5f e3       	ldi	r21, 0x3F	; 63
    9122:	c5 01       	movw	r24, r10
    9124:	b4 01       	movw	r22, r8
    9126:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    912a:	9b 01       	movw	r18, r22
    912c:	ac 01       	movw	r20, r24
    912e:	c7 01       	movw	r24, r14
    9130:	b6 01       	movw	r22, r12
    9132:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    9136:	23 e3       	ldi	r18, 0x33	; 51
    9138:	33 e3       	ldi	r19, 0x33	; 51
    913a:	43 ea       	ldi	r20, 0xA3	; 163
    913c:	51 e4       	ldi	r21, 0x41	; 65
    913e:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    9142:	6b 01       	movw	r12, r22
    9144:	7c 01       	movw	r14, r24
    9146:	be 01       	movw	r22, r28
    9148:	dd 0f       	add	r29, r29
    914a:	88 0b       	sbc	r24, r24
    914c:	99 0b       	sbc	r25, r25
    914e:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    9152:	9b 01       	movw	r18, r22
    9154:	ac 01       	movw	r20, r24
    9156:	c7 01       	movw	r24, r14
    9158:	b6 01       	movw	r22, r12
    915a:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    915e:	f6 c1       	rjmp	.+1004   	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 9)
    9160:	20 e0       	ldi	r18, 0x00	; 0
    9162:	30 e0       	ldi	r19, 0x00	; 0
    9164:	40 e8       	ldi	r20, 0x80	; 128
    9166:	51 e4       	ldi	r21, 0x41	; 65
    9168:	c7 01       	movw	r24, r14
    916a:	b6 01       	movw	r22, r12
    916c:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    9170:	18 16       	cp	r1, r24
    9172:	0c f0       	brlt	.+2      	; 0x9176 <corectTrv+0x161a>
    9174:	e0 c1       	rjmp	.+960    	; 0x9536 <corectTrv+0x19da>
		{
			return( 0.027 * ds * ds - 0.277 * ds + 25.29)* k;
    9176:	2b e1       	ldi	r18, 0x1B	; 27
    9178:	3f e2       	ldi	r19, 0x2F	; 47
    917a:	4d ed       	ldi	r20, 0xDD	; 221
    917c:	5c e3       	ldi	r21, 0x3C	; 60
    917e:	c5 01       	movw	r24, r10
    9180:	b4 01       	movw	r22, r8
    9182:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    9186:	a5 01       	movw	r20, r10
    9188:	94 01       	movw	r18, r8
    918a:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    918e:	6b 01       	movw	r12, r22
    9190:	7c 01       	movw	r14, r24
    9192:	22 ef       	ldi	r18, 0xF2	; 242
    9194:	32 ed       	ldi	r19, 0xD2	; 210
    9196:	4d e8       	ldi	r20, 0x8D	; 141
    9198:	5e e3       	ldi	r21, 0x3E	; 62
    919a:	c5 01       	movw	r24, r10
    919c:	b4 01       	movw	r22, r8
    919e:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    91a2:	9b 01       	movw	r18, r22
    91a4:	ac 01       	movw	r20, r24
    91a6:	c7 01       	movw	r24, r14
    91a8:	b6 01       	movw	r22, r12
    91aa:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    91ae:	2c ee       	ldi	r18, 0xEC	; 236
    91b0:	31 e5       	ldi	r19, 0x51	; 81
    91b2:	4a ec       	ldi	r20, 0xCA	; 202
    91b4:	51 e4       	ldi	r21, 0x41	; 65
    91b6:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    91ba:	6b 01       	movw	r12, r22
    91bc:	7c 01       	movw	r14, r24
    91be:	be 01       	movw	r22, r28
    91c0:	dd 0f       	add	r29, r29
    91c2:	88 0b       	sbc	r24, r24
    91c4:	99 0b       	sbc	r25, r25
    91c6:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    91ca:	9b 01       	movw	r18, r22
    91cc:	ac 01       	movw	r20, r24
    91ce:	c7 01       	movw	r24, r14
    91d0:	b6 01       	movw	r22, r12
    91d2:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    91d6:	ba c1       	rjmp	.+884    	; 0x954c <corectTrv+0x19f0>
		}
	}

	else if (ds > 10)
    91d8:	20 e0       	ldi	r18, 0x00	; 0
    91da:	30 e0       	ldi	r19, 0x00	; 0
    91dc:	40 e2       	ldi	r20, 0x20	; 32
    91de:	51 e4       	ldi	r21, 0x41	; 65
    91e0:	c5 01       	movw	r24, r10
    91e2:	b4 01       	movw	r22, r8
    91e4:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    91e8:	18 16       	cp	r1, r24
    91ea:	0c f0       	brlt	.+2      	; 0x91ee <corectTrv+0x1692>
    91ec:	a8 c1       	rjmp	.+848    	; 0x953e <corectTrv+0x19e2>
    91ee:	08 c0       	rjmp	.+16     	; 0x9200 <corectTrv+0x16a4>
	
	Superheat_old = Superheat;
	
	if (ds > 20)
	{
		ds = 20;
    91f0:	0f 2e       	mov	r0, r31
    91f2:	81 2c       	mov	r8, r1
    91f4:	91 2c       	mov	r9, r1
    91f6:	f0 ea       	ldi	r31, 0xA0	; 160
    91f8:	af 2e       	mov	r10, r31
    91fa:	f1 e4       	ldi	r31, 0x41	; 65
    91fc:	bf 2e       	mov	r11, r31
    91fe:	f0 2d       	mov	r31, r0
		}
	}

	else if (ds > 10)
	{
		if (Superheat == SSet)
    9200:	20 e0       	ldi	r18, 0x00	; 0
    9202:	30 e0       	ldi	r19, 0x00	; 0
    9204:	40 ee       	ldi	r20, 0xE0	; 224
    9206:	50 e4       	ldi	r21, 0x40	; 64
    9208:	c7 01       	movw	r24, r14
    920a:	b6 01       	movw	r22, r12
    920c:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    9210:	81 11       	cpse	r24, r1
    9212:	31 c0       	rjmp	.+98     	; 0x9276 <corectTrv+0x171a>
		{
			return( 0.137 * ds * ds - 3.245 * ds + 34.51)* k;
    9214:	2a eb       	ldi	r18, 0xBA	; 186
    9216:	39 e4       	ldi	r19, 0x49	; 73
    9218:	4c e0       	ldi	r20, 0x0C	; 12
    921a:	5e e3       	ldi	r21, 0x3E	; 62
    921c:	c5 01       	movw	r24, r10
    921e:	b4 01       	movw	r22, r8
    9220:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    9224:	a5 01       	movw	r20, r10
    9226:	94 01       	movw	r18, r8
    9228:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    922c:	6b 01       	movw	r12, r22
    922e:	7c 01       	movw	r14, r24
    9230:	24 e1       	ldi	r18, 0x14	; 20
    9232:	3e ea       	ldi	r19, 0xAE	; 174
    9234:	4f e4       	ldi	r20, 0x4F	; 79
    9236:	50 e4       	ldi	r21, 0x40	; 64
    9238:	c5 01       	movw	r24, r10
    923a:	b4 01       	movw	r22, r8
    923c:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    9240:	9b 01       	movw	r18, r22
    9242:	ac 01       	movw	r20, r24
    9244:	c7 01       	movw	r24, r14
    9246:	b6 01       	movw	r22, r12
    9248:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    924c:	2d e3       	ldi	r18, 0x3D	; 61
    924e:	3a e0       	ldi	r19, 0x0A	; 10
    9250:	4a e0       	ldi	r20, 0x0A	; 10
    9252:	52 e4       	ldi	r21, 0x42	; 66
    9254:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    9258:	6b 01       	movw	r12, r22
    925a:	7c 01       	movw	r14, r24
    925c:	be 01       	movw	r22, r28
    925e:	dd 0f       	add	r29, r29
    9260:	88 0b       	sbc	r24, r24
    9262:	99 0b       	sbc	r25, r25
    9264:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    9268:	9b 01       	movw	r18, r22
    926a:	ac 01       	movw	r20, r24
    926c:	c7 01       	movw	r24, r14
    926e:	b6 01       	movw	r22, r12
    9270:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    9274:	6b c1       	rjmp	.+726    	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    9276:	20 e0       	ldi	r18, 0x00	; 0
    9278:	30 e0       	ldi	r19, 0x00	; 0
    927a:	40 ee       	ldi	r20, 0xE0	; 224
    927c:	50 e4       	ldi	r21, 0x40	; 64
    927e:	c7 01       	movw	r24, r14
    9280:	b6 01       	movw	r22, r12
    9282:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    9286:	18 16       	cp	r1, r24
    9288:	dc f5       	brge	.+118    	; 0x9300 <corectTrv+0x17a4>
    928a:	20 e0       	ldi	r18, 0x00	; 0
    928c:	30 e0       	ldi	r19, 0x00	; 0
    928e:	40 e0       	ldi	r20, 0x00	; 0
    9290:	51 e4       	ldi	r21, 0x41	; 65
    9292:	c7 01       	movw	r24, r14
    9294:	b6 01       	movw	r22, r12
    9296:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    929a:	18 16       	cp	r1, r24
    929c:	8c f1       	brlt	.+98     	; 0x9300 <corectTrv+0x17a4>
		{
			return( 0.137 * ds * ds - 3.245 * ds + 34.51)* k;
    929e:	2a eb       	ldi	r18, 0xBA	; 186
    92a0:	39 e4       	ldi	r19, 0x49	; 73
    92a2:	4c e0       	ldi	r20, 0x0C	; 12
    92a4:	5e e3       	ldi	r21, 0x3E	; 62
    92a6:	c5 01       	movw	r24, r10
    92a8:	b4 01       	movw	r22, r8
    92aa:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    92ae:	a5 01       	movw	r20, r10
    92b0:	94 01       	movw	r18, r8
    92b2:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    92b6:	6b 01       	movw	r12, r22
    92b8:	7c 01       	movw	r14, r24
    92ba:	24 e1       	ldi	r18, 0x14	; 20
    92bc:	3e ea       	ldi	r19, 0xAE	; 174
    92be:	4f e4       	ldi	r20, 0x4F	; 79
    92c0:	50 e4       	ldi	r21, 0x40	; 64
    92c2:	c5 01       	movw	r24, r10
    92c4:	b4 01       	movw	r22, r8
    92c6:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    92ca:	9b 01       	movw	r18, r22
    92cc:	ac 01       	movw	r20, r24
    92ce:	c7 01       	movw	r24, r14
    92d0:	b6 01       	movw	r22, r12
    92d2:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    92d6:	2d e3       	ldi	r18, 0x3D	; 61
    92d8:	3a e0       	ldi	r19, 0x0A	; 10
    92da:	4a e0       	ldi	r20, 0x0A	; 10
    92dc:	52 e4       	ldi	r21, 0x42	; 66
    92de:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    92e2:	6b 01       	movw	r12, r22
    92e4:	7c 01       	movw	r14, r24
    92e6:	be 01       	movw	r22, r28
    92e8:	dd 0f       	add	r29, r29
    92ea:	88 0b       	sbc	r24, r24
    92ec:	99 0b       	sbc	r25, r25
    92ee:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    92f2:	9b 01       	movw	r18, r22
    92f4:	ac 01       	movw	r20, r24
    92f6:	c7 01       	movw	r24, r14
    92f8:	b6 01       	movw	r22, r12
    92fa:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    92fe:	26 c1       	rjmp	.+588    	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    9300:	20 e0       	ldi	r18, 0x00	; 0
    9302:	30 e0       	ldi	r19, 0x00	; 0
    9304:	40 e0       	ldi	r20, 0x00	; 0
    9306:	51 e4       	ldi	r21, 0x41	; 65
    9308:	c7 01       	movw	r24, r14
    930a:	b6 01       	movw	r22, r12
    930c:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    9310:	18 16       	cp	r1, r24
    9312:	dc f5       	brge	.+118    	; 0x938a <corectTrv+0x182e>
    9314:	20 e0       	ldi	r18, 0x00	; 0
    9316:	30 e0       	ldi	r19, 0x00	; 0
    9318:	40 e1       	ldi	r20, 0x10	; 16
    931a:	51 e4       	ldi	r21, 0x41	; 65
    931c:	c7 01       	movw	r24, r14
    931e:	b6 01       	movw	r22, r12
    9320:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    9324:	18 16       	cp	r1, r24
    9326:	8c f1       	brlt	.+98     	; 0x938a <corectTrv+0x182e>
		{
			return( 0.158 * ds * ds - 4.086 * ds + 42.41)* k;
    9328:	21 ec       	ldi	r18, 0xC1	; 193
    932a:	3a ec       	ldi	r19, 0xCA	; 202
    932c:	41 e2       	ldi	r20, 0x21	; 33
    932e:	5e e3       	ldi	r21, 0x3E	; 62
    9330:	c5 01       	movw	r24, r10
    9332:	b4 01       	movw	r22, r8
    9334:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    9338:	a5 01       	movw	r20, r10
    933a:	94 01       	movw	r18, r8
    933c:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    9340:	6b 01       	movw	r12, r22
    9342:	7c 01       	movw	r14, r24
    9344:	23 e8       	ldi	r18, 0x83	; 131
    9346:	30 ec       	ldi	r19, 0xC0	; 192
    9348:	42 e8       	ldi	r20, 0x82	; 130
    934a:	50 e4       	ldi	r21, 0x40	; 64
    934c:	c5 01       	movw	r24, r10
    934e:	b4 01       	movw	r22, r8
    9350:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    9354:	9b 01       	movw	r18, r22
    9356:	ac 01       	movw	r20, r24
    9358:	c7 01       	movw	r24, r14
    935a:	b6 01       	movw	r22, r12
    935c:	0e 94 c6 51 	call	0xa38c	; 0xa38c <__subsf3>
    9360:	27 ed       	ldi	r18, 0xD7	; 215
    9362:	33 ea       	ldi	r19, 0xA3	; 163
    9364:	49 e2       	ldi	r20, 0x29	; 41
    9366:	52 e4       	ldi	r21, 0x42	; 66
    9368:	0e 94 c7 51 	call	0xa38e	; 0xa38e <__addsf3>
    936c:	6b 01       	movw	r12, r22
    936e:	7c 01       	movw	r14, r24
    9370:	be 01       	movw	r22, r28
    9372:	dd 0f       	add	r29, r29
    9374:	88 0b       	sbc	r24, r24
    9376:	99 0b       	sbc	r25, r25
    9378:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    937c:	9b 01       	movw	r18, r22
    937e:	ac 01       	movw	r20, r24
    9380:	c7 01       	movw	r24, r14
    9382:	b6 01       	movw	r22, r12
    9384:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    9388:	e1 c0       	rjmp	.+450    	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    938a:	20 e0       	ldi	r18, 0x00	; 0
    938c:	30 e0       	ldi	r19, 0x00	; 0
    938e:	40 e1       	ldi	r20, 0x10	; 16
    9390:	51 e4       	ldi	r21, 0x41	; 65
    9392:	c7 01       	movw	r24, r14
    9394:	b6 01       	movw	r22, r12
    9396:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    939a:	18 16       	cp	r1, r24
    939c:	0c f0       	brlt	.+2      	; 0x93a0 <corectTrv+0x1844>
    939e:	51 c0       	rjmp	.+162    	; 0x9442 <corectTrv+0x18e6>
    93a0:	20 e0       	ldi	r18, 0x00	; 0
    93a2:	30 e0       	ldi	r19, 0x00	; 0
    93a4:	40 e2       	ldi	r20, 0x20	; 32
    93a6:	51 e4       	ldi	r21, 0x41	; 65
    93a8:	c7 01       	movw	r24, r14
    93aa:	b6 01       	movw	r22, r12
    93ac:	0e 94 2b 52 	call	0xa456	; 0xa456 <__cmpsf2>
    93b0:	18 16       	cp	r1, r24
    93b2:	0c f4       	brge	.+2      	; 0x93b6 <corectTrv+0x185a>
    93b4:	46 c0       	rjmp	.+140    	; 0x9442 <corectTrv+0x18e6>
		{
			return( 0.027 * ds * ds * ds - 1.086 * ds * ds + 14.32 * ds - 44.48)* k;
    93b6:	2b e1       	ldi	r18, 0x1B	; 27
    93b8:	3f e2       	ldi	r19, 0x2F	; 47
    93ba:	4d ed       	ldi	r20, 0xDD	; 221
    93bc:	5c e3       	ldi	r21, 0x3C	; 60
    93be:	c5 01       	movw	r24, r10
    93c0:	b4 01       	movw	r22, r8
    93c2:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    93c6:	a5 01       	movw	r20, r10
    93c8:	94 01       	movw	r18, r8
    93ca:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    93ce:	a5 01       	movw	r20, r10
    93d0:	94 01       	movw	r18, r8
    93d2:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    93d6:	6b 01       	movw	r12, r22
    93d8:	7c 01       	movw	r14, r24
    93da:	2c e0       	ldi	r18, 0x0C	; 12
    93dc:	32 e0       	ldi	r19, 0x02	; 2
    93de:	4b e8       	ldi	r20, 0x8B	; 139
    93e0:	5f e3       	ldi	r21, 0x3F	; 63
    93e2:	c5 01       	movw	r24, r10
    93e4:	b4 01       	movw	r22, r8
    93e6:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    93ea:	a5 01       	movw	r20, r10
    93ec:	94 01       	movw	r18, r8
    93ee:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    93f2:	9b 01       	movw	r18, r22
    93f4:	ac 01       	movw	r20, r24
    93f6:	c7 01       	movw	r24, r14
    93f8:	b6 01       	movw	r22, r12
    93fa:	c8 d7       	rcall	.+3984   	; 0xa38c <__subsf3>
    93fc:	6b 01       	movw	r12, r22
    93fe:	7c 01       	movw	r14, r24
    9400:	28 eb       	ldi	r18, 0xB8	; 184
    9402:	3e e1       	ldi	r19, 0x1E	; 30
    9404:	45 e6       	ldi	r20, 0x65	; 101
    9406:	51 e4       	ldi	r21, 0x41	; 65
    9408:	c5 01       	movw	r24, r10
    940a:	b4 01       	movw	r22, r8
    940c:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    9410:	9b 01       	movw	r18, r22
    9412:	ac 01       	movw	r20, r24
    9414:	c7 01       	movw	r24, r14
    9416:	b6 01       	movw	r22, r12
    9418:	ba d7       	rcall	.+3956   	; 0xa38e <__addsf3>
    941a:	25 e8       	ldi	r18, 0x85	; 133
    941c:	3b ee       	ldi	r19, 0xEB	; 235
    941e:	41 e3       	ldi	r20, 0x31	; 49
    9420:	52 e4       	ldi	r21, 0x42	; 66
    9422:	b4 d7       	rcall	.+3944   	; 0xa38c <__subsf3>
    9424:	6b 01       	movw	r12, r22
    9426:	7c 01       	movw	r14, r24
    9428:	be 01       	movw	r22, r28
    942a:	dd 0f       	add	r29, r29
    942c:	88 0b       	sbc	r24, r24
    942e:	99 0b       	sbc	r25, r25
    9430:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    9434:	9b 01       	movw	r18, r22
    9436:	ac 01       	movw	r20, r24
    9438:	c7 01       	movw	r24, r14
    943a:	b6 01       	movw	r22, r12
    943c:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    9440:	85 c0       	rjmp	.+266    	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    9442:	20 e0       	ldi	r18, 0x00	; 0
    9444:	30 e0       	ldi	r19, 0x00	; 0
    9446:	40 e2       	ldi	r20, 0x20	; 32
    9448:	51 e4       	ldi	r21, 0x41	; 65
    944a:	c7 01       	movw	r24, r14
    944c:	b6 01       	movw	r22, r12
    944e:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    9452:	18 16       	cp	r1, r24
    9454:	0c f0       	brlt	.+2      	; 0x9458 <corectTrv+0x18fc>
    9456:	50 c0       	rjmp	.+160    	; 0x94f8 <corectTrv+0x199c>
    9458:	20 e0       	ldi	r18, 0x00	; 0
    945a:	30 e0       	ldi	r19, 0x00	; 0
    945c:	40 e3       	ldi	r20, 0x30	; 48
    945e:	51 e4       	ldi	r21, 0x41	; 65
    9460:	c7 01       	movw	r24, r14
    9462:	b6 01       	movw	r22, r12
    9464:	f8 d7       	rcall	.+4080   	; 0xa456 <__cmpsf2>
    9466:	18 16       	cp	r1, r24
    9468:	0c f4       	brge	.+2      	; 0x946c <corectTrv+0x1910>
    946a:	46 c0       	rjmp	.+140    	; 0x94f8 <corectTrv+0x199c>
		{
			return( 0.026 * ds * ds * ds - 1.084 * ds * ds + 14.27 * ds - 40.99)* k;
    946c:	24 ef       	ldi	r18, 0xF4	; 244
    946e:	3d ef       	ldi	r19, 0xFD	; 253
    9470:	44 ed       	ldi	r20, 0xD4	; 212
    9472:	5c e3       	ldi	r21, 0x3C	; 60
    9474:	c5 01       	movw	r24, r10
    9476:	b4 01       	movw	r22, r8
    9478:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    947c:	a5 01       	movw	r20, r10
    947e:	94 01       	movw	r18, r8
    9480:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    9484:	a5 01       	movw	r20, r10
    9486:	94 01       	movw	r18, r8
    9488:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    948c:	6b 01       	movw	r12, r22
    948e:	7c 01       	movw	r14, r24
    9490:	23 e8       	ldi	r18, 0x83	; 131
    9492:	30 ec       	ldi	r19, 0xC0	; 192
    9494:	4a e8       	ldi	r20, 0x8A	; 138
    9496:	5f e3       	ldi	r21, 0x3F	; 63
    9498:	c5 01       	movw	r24, r10
    949a:	b4 01       	movw	r22, r8
    949c:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    94a0:	a5 01       	movw	r20, r10
    94a2:	94 01       	movw	r18, r8
    94a4:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    94a8:	9b 01       	movw	r18, r22
    94aa:	ac 01       	movw	r20, r24
    94ac:	c7 01       	movw	r24, r14
    94ae:	b6 01       	movw	r22, r12
    94b0:	6d d7       	rcall	.+3802   	; 0xa38c <__subsf3>
    94b2:	6b 01       	movw	r12, r22
    94b4:	7c 01       	movw	r14, r24
    94b6:	2c ee       	ldi	r18, 0xEC	; 236
    94b8:	31 e5       	ldi	r19, 0x51	; 81
    94ba:	44 e6       	ldi	r20, 0x64	; 100
    94bc:	51 e4       	ldi	r21, 0x41	; 65
    94be:	c5 01       	movw	r24, r10
    94c0:	b4 01       	movw	r22, r8
    94c2:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    94c6:	9b 01       	movw	r18, r22
    94c8:	ac 01       	movw	r20, r24
    94ca:	c7 01       	movw	r24, r14
    94cc:	b6 01       	movw	r22, r12
    94ce:	5f d7       	rcall	.+3774   	; 0xa38e <__addsf3>
    94d0:	23 ec       	ldi	r18, 0xC3	; 195
    94d2:	35 ef       	ldi	r19, 0xF5	; 245
    94d4:	43 e2       	ldi	r20, 0x23	; 35
    94d6:	52 e4       	ldi	r21, 0x42	; 66
    94d8:	59 d7       	rcall	.+3762   	; 0xa38c <__subsf3>
    94da:	6b 01       	movw	r12, r22
    94dc:	7c 01       	movw	r14, r24
    94de:	be 01       	movw	r22, r28
    94e0:	dd 0f       	add	r29, r29
    94e2:	88 0b       	sbc	r24, r24
    94e4:	99 0b       	sbc	r25, r25
    94e6:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    94ea:	9b 01       	movw	r18, r22
    94ec:	ac 01       	movw	r20, r24
    94ee:	c7 01       	movw	r24, r14
    94f0:	b6 01       	movw	r22, r12
    94f2:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    94f6:	2a c0       	rjmp	.+84     	; 0x954c <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 4)
    94f8:	20 e0       	ldi	r18, 0x00	; 0
    94fa:	30 e0       	ldi	r19, 0x00	; 0
    94fc:	40 e3       	ldi	r20, 0x30	; 48
    94fe:	51 e4       	ldi	r21, 0x41	; 65
    9500:	c7 01       	movw	r24, r14
    9502:	b6 01       	movw	r22, r12
    9504:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <__gesf2>
    9508:	18 16       	cp	r1, r24
    950a:	ec f4       	brge	.+58     	; 0x9546 <corectTrv+0x19ea>
		{
			return 25* k;
    950c:	89 e1       	ldi	r24, 0x19	; 25
    950e:	8c 9f       	mul	r24, r28
    9510:	b0 01       	movw	r22, r0
    9512:	8d 9f       	mul	r24, r29
    9514:	70 0d       	add	r23, r0
    9516:	11 24       	eor	r1, r1
    9518:	07 2e       	mov	r0, r23
    951a:	00 0c       	add	r0, r0
    951c:	88 0b       	sbc	r24, r24
    951e:	99 0b       	sbc	r25, r25
    9520:	0e 94 ca 52 	call	0xa594	; 0xa594 <__floatsisf>
    9524:	13 c0       	rjmp	.+38     	; 0x954c <corectTrv+0x19f0>
		}
	}

	
	return 0;
    9526:	60 e0       	ldi	r22, 0x00	; 0
    9528:	70 e0       	ldi	r23, 0x00	; 0
    952a:	cb 01       	movw	r24, r22
    952c:	0f c0       	rjmp	.+30     	; 0x954c <corectTrv+0x19f0>
    952e:	60 e0       	ldi	r22, 0x00	; 0
    9530:	70 e0       	ldi	r23, 0x00	; 0
    9532:	cb 01       	movw	r24, r22
    9534:	0b c0       	rjmp	.+22     	; 0x954c <corectTrv+0x19f0>
    9536:	60 e0       	ldi	r22, 0x00	; 0
    9538:	70 e0       	ldi	r23, 0x00	; 0
    953a:	cb 01       	movw	r24, r22
    953c:	07 c0       	rjmp	.+14     	; 0x954c <corectTrv+0x19f0>
    953e:	60 e0       	ldi	r22, 0x00	; 0
    9540:	70 e0       	ldi	r23, 0x00	; 0
    9542:	cb 01       	movw	r24, r22
    9544:	03 c0       	rjmp	.+6      	; 0x954c <corectTrv+0x19f0>
    9546:	60 e0       	ldi	r22, 0x00	; 0
    9548:	70 e0       	ldi	r23, 0x00	; 0
    954a:	cb 01       	movw	r24, r22

}
    954c:	df 91       	pop	r29
    954e:	cf 91       	pop	r28
    9550:	ff 90       	pop	r15
    9552:	ef 90       	pop	r14
    9554:	df 90       	pop	r13
    9556:	cf 90       	pop	r12
    9558:	bf 90       	pop	r11
    955a:	af 90       	pop	r10
    955c:	9f 90       	pop	r9
    955e:	8f 90       	pop	r8
    9560:	7f 90       	pop	r7
    9562:	6f 90       	pop	r6
    9564:	5f 90       	pop	r5
    9566:	4f 90       	pop	r4
    9568:	08 95       	ret

0000956a <ReadSensors>:
float ConvertToLowPress(uint16_t ADC_value){
	return (ADC_value - Low_Limit_LP) * LP_max/ (Hi_Limit_LP - Low_Limit_LP) ;
}

void ReadSensors(xCompressor *comp)  
{ 
    956a:	ef 92       	push	r14
    956c:	ff 92       	push	r15
    956e:	0f 93       	push	r16
    9570:	1f 93       	push	r17
    9572:	cf 93       	push	r28
    9574:	df 93       	push	r29
    9576:	7c 01       	movw	r14, r24
 uint16_t temp = 0;
 const uint8_t samples = 10;        // determines the number of samples taken
 unsigned int sum;               // holds the summated samples
 uint8_t i;
 //static TickType_t countTrvTime=0;
 setAnalogMode(MODE_10_BIT);
    9578:	80 e0       	ldi	r24, 0x00	; 0
    957a:	0e 94 98 07 	call	0xf30	; 0xf30 <setAnalogMode>
    957e:	ca e0       	ldi	r28, 0x0A	; 10
 i = samples;                     // clean up for next channel
 sum = 0;
    9580:	00 e0       	ldi	r16, 0x00	; 0
    9582:	10 e0       	ldi	r17, 0x00	; 0
 
 do
 {
	 startAnalogConversion(1, 0);
    9584:	60 e0       	ldi	r22, 0x00	; 0
    9586:	81 e0       	ldi	r24, 0x01	; 1
    9588:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
	 while( analogIsConverting() )_delay_us(25);//portYIELD();
    958c:	01 c0       	rjmp	.+2      	; 0x9590 <ReadSensors+0x26>
    958e:	00 00       	nop
    9590:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9594:	81 11       	cpse	r24, r1
    9596:	fb cf       	rjmp	.-10     	; 0x958e <ReadSensors+0x24>
	 sum += 	analogConversionResult();
    9598:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    959c:	08 0f       	add	r16, r24
    959e:	19 1f       	adc	r17, r25
    95a0:	c1 50       	subi	r28, 0x01	; 1
	 //temp =analogConversionResult();
 } while (--i);
    95a2:	81 f7       	brne	.-32     	; 0x9584 <ReadSensors+0x1a>
 temp = (unsigned int) (sum / samples);
 comp->Bac_Temp = ConvertToTemp(temp);
    95a4:	98 01       	movw	r18, r16
    95a6:	ad ec       	ldi	r26, 0xCD	; 205
    95a8:	bc ec       	ldi	r27, 0xCC	; 204
    95aa:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    95ae:	96 95       	lsr	r25
    95b0:	87 95       	ror	r24
    95b2:	96 95       	lsr	r25
    95b4:	87 95       	ror	r24
    95b6:	96 95       	lsr	r25
    95b8:	87 95       	ror	r24
    95ba:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <ConvertToTemp>
    95be:	f7 01       	movw	r30, r14
    95c0:	66 8b       	std	Z+22, r22	; 0x16
    95c2:	77 8b       	std	Z+23, r23	; 0x17
    95c4:	80 8f       	std	Z+24, r24	; 0x18
    95c6:	91 8f       	std	Z+25, r25	; 0x19
 //read DHW
 PORTL &= ~ (1 << PL2);//A0
    95c8:	eb e0       	ldi	r30, 0x0B	; 11
    95ca:	f1 e0       	ldi	r31, 0x01	; 1
    95cc:	80 81       	ld	r24, Z
    95ce:	8b 7f       	andi	r24, 0xFB	; 251
    95d0:	80 83       	st	Z, r24
 PORTL &= ~ (1 << PL1);//A1
    95d2:	80 81       	ld	r24, Z
    95d4:	8d 7f       	andi	r24, 0xFD	; 253
    95d6:	80 83       	st	Z, r24
 PORTL |=   (1 << PL0);//A2
    95d8:	80 81       	ld	r24, Z
    95da:	81 60       	ori	r24, 0x01	; 1
    95dc:	80 83       	st	Z, r24
    95de:	ca e0       	ldi	r28, 0x0A	; 10
 i = samples;
 sum = 0;
    95e0:	00 e0       	ldi	r16, 0x00	; 0
    95e2:	10 e0       	ldi	r17, 0x00	; 0

 do
 {
	 startAnalogConversion(0, 0);
    95e4:	60 e0       	ldi	r22, 0x00	; 0
    95e6:	80 e0       	ldi	r24, 0x00	; 0
    95e8:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
	 while( analogIsConverting())_delay_us(25);// portYIELD();
    95ec:	01 c0       	rjmp	.+2      	; 0x95f0 <ReadSensors+0x86>
    95ee:	00 00       	nop
    95f0:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    95f4:	81 11       	cpse	r24, r1
    95f6:	fb cf       	rjmp	.-10     	; 0x95ee <ReadSensors+0x84>
	 sum += 	analogConversionResult();
    95f8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    95fc:	08 0f       	add	r16, r24
    95fe:	19 1f       	adc	r17, r25
    9600:	c1 50       	subi	r28, 0x01	; 1
 } while (--i);
    9602:	81 f7       	brne	.-32     	; 0x95e4 <ReadSensors+0x7a>
 //temp = analogConversionResult();
 temp = (unsigned int) (sum / samples);
 comp->Dhw_Temp = ConvertToTemp(temp);
    9604:	98 01       	movw	r18, r16
    9606:	ad ec       	ldi	r26, 0xCD	; 205
    9608:	bc ec       	ldi	r27, 0xCC	; 204
    960a:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    960e:	96 95       	lsr	r25
    9610:	87 95       	ror	r24
    9612:	96 95       	lsr	r25
    9614:	87 95       	ror	r24
    9616:	96 95       	lsr	r25
    9618:	87 95       	ror	r24
    961a:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <ConvertToTemp>
    961e:	f7 01       	movw	r30, r14
    9620:	62 8b       	std	Z+18, r22	; 0x12
    9622:	73 8b       	std	Z+19, r23	; 0x13
    9624:	84 8b       	std	Z+20, r24	; 0x14
    9626:	95 8b       	std	Z+21, r25	; 0x15
  //------------------------------------------
  
  //read tempout
  PORTL |=   (1 << PL2);//A0
    9628:	eb e0       	ldi	r30, 0x0B	; 11
    962a:	f1 e0       	ldi	r31, 0x01	; 1
    962c:	80 81       	ld	r24, Z
    962e:	84 60       	ori	r24, 0x04	; 4
    9630:	80 83       	st	Z, r24
  PORTL &= ~ (1 << PL1);//A1
    9632:	80 81       	ld	r24, Z
    9634:	8d 7f       	andi	r24, 0xFD	; 253
    9636:	80 83       	st	Z, r24
  PORTL |=   (1 << PL0);//A2
    9638:	80 81       	ld	r24, Z
    963a:	81 60       	ori	r24, 0x01	; 1
    963c:	80 83       	st	Z, r24
    963e:	ca e0       	ldi	r28, 0x0A	; 10
  i = samples;
  sum = 0;
    9640:	00 e0       	ldi	r16, 0x00	; 0
    9642:	10 e0       	ldi	r17, 0x00	; 0

  do
  {
	  startAnalogConversion(0, 0);
    9644:	60 e0       	ldi	r22, 0x00	; 0
    9646:	80 e0       	ldi	r24, 0x00	; 0
    9648:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
	  while( analogIsConverting())_delay_us(25);// portYIELD();
    964c:	01 c0       	rjmp	.+2      	; 0x9650 <ReadSensors+0xe6>
    964e:	00 00       	nop
    9650:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9654:	81 11       	cpse	r24, r1
    9656:	fb cf       	rjmp	.-10     	; 0x964e <ReadSensors+0xe4>
	  sum += 	analogConversionResult();
    9658:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    965c:	08 0f       	add	r16, r24
    965e:	19 1f       	adc	r17, r25
    9660:	c1 50       	subi	r28, 0x01	; 1
  } while (--i);
    9662:	81 f7       	brne	.-32     	; 0x9644 <ReadSensors+0xda>
 //temp = analogConversionResult();
  temp = (unsigned int) (sum / samples);
  comp->Temp_Out = ConvertToTemp(temp);
    9664:	98 01       	movw	r18, r16
    9666:	ad ec       	ldi	r26, 0xCD	; 205
    9668:	bc ec       	ldi	r27, 0xCC	; 204
    966a:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    966e:	96 95       	lsr	r25
    9670:	87 95       	ror	r24
    9672:	96 95       	lsr	r25
    9674:	87 95       	ror	r24
    9676:	96 95       	lsr	r25
    9678:	87 95       	ror	r24
    967a:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <ConvertToTemp>
    967e:	f7 01       	movw	r30, r14
    9680:	e2 5b       	subi	r30, 0xB2	; 178
    9682:	ff 4f       	sbci	r31, 0xFF	; 255
    9684:	60 83       	st	Z, r22
    9686:	71 83       	std	Z+1, r23	; 0x01
    9688:	82 83       	std	Z+2, r24	; 0x02
    968a:	93 83       	std	Z+3, r25	; 0x03
   /*
  */
  //------------------------------------------
 if(comp->Index==1){
    968c:	b4 96       	adiw	r30, 0x24	; 36
    968e:	80 81       	ld	r24, Z
    9690:	91 81       	ldd	r25, Z+1	; 0x01
    9692:	01 97       	sbiw	r24, 0x01	; 1
    9694:	09 f0       	breq	.+2      	; 0x9698 <ReadSensors+0x12e>
    9696:	9d c1       	rjmp	.+826    	; 0x99d2 <ReadSensors+0x468>
	 
	 //read High_Pressure_1
	 PORTL |=    (1 << PL2);//a0
    9698:	eb e0       	ldi	r30, 0x0B	; 11
    969a:	f1 e0       	ldi	r31, 0x01	; 1
    969c:	80 81       	ld	r24, Z
    969e:	84 60       	ori	r24, 0x04	; 4
    96a0:	80 83       	st	Z, r24
	 PORTL |=    (1 << PL1);//a1
    96a2:	80 81       	ld	r24, Z
    96a4:	82 60       	ori	r24, 0x02	; 2
    96a6:	80 83       	st	Z, r24
	 PORTL &= ~  (1 << PL0);//a2
    96a8:	80 81       	ld	r24, Z
    96aa:	8e 7f       	andi	r24, 0xFE	; 254
    96ac:	80 83       	st	Z, r24
    96ae:	ca e0       	ldi	r28, 0x0A	; 10
	 i = samples;
	 sum = 0;
    96b0:	00 e0       	ldi	r16, 0x00	; 0
    96b2:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {		     startAnalogConversion(0, 0);
    96b4:	60 e0       	ldi	r22, 0x00	; 0
    96b6:	80 e0       	ldi	r24, 0x00	; 0
    96b8:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() ) _delay_us(25);//portYIELD();
    96bc:	01 c0       	rjmp	.+2      	; 0x96c0 <ReadSensors+0x156>
    96be:	00 00       	nop
    96c0:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    96c4:	81 11       	cpse	r24, r1
    96c6:	fb cf       	rjmp	.-10     	; 0x96be <ReadSensors+0x154>
		 sum += analogConversionResult();
    96c8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    96cc:	08 0f       	add	r16, r24
    96ce:	19 1f       	adc	r17, r25
    96d0:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    96d2:	81 f7       	brne	.-32     	; 0x96b4 <ReadSensors+0x14a>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->High_Press = ConvertToHighPress(temp);
    96d4:	98 01       	movw	r18, r16
    96d6:	ad ec       	ldi	r26, 0xCD	; 205
    96d8:	bc ec       	ldi	r27, 0xCC	; 204
    96da:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    96de:	96 95       	lsr	r25
    96e0:	87 95       	ror	r24
    96e2:	96 95       	lsr	r25
    96e4:	87 95       	ror	r24
    96e6:	96 95       	lsr	r25
    96e8:	87 95       	ror	r24
    96ea:	bc 01       	movw	r22, r24
    96ec:	80 e0       	ldi	r24, 0x00	; 0
    96ee:	90 e0       	ldi	r25, 0x00	; 0
    96f0:	4f d7       	rcall	.+3742   	; 0xa590 <__floatunsisf>
    96f2:	20 e0       	ldi	r18, 0x00	; 0
    96f4:	30 e0       	ldi	r19, 0x00	; 0
    96f6:	4c ec       	ldi	r20, 0xCC	; 204
    96f8:	52 e4       	ldi	r21, 0x42	; 66
    96fa:	48 d6       	rcall	.+3216   	; 0xa38c <__subsf3>
    96fc:	20 e0       	ldi	r18, 0x00	; 0
    96fe:	30 e0       	ldi	r19, 0x00	; 0
    9700:	48 e0       	ldi	r20, 0x08	; 8
    9702:	52 e4       	ldi	r21, 0x42	; 66
    9704:	0e 94 c3 53 	call	0xa786	; 0xa786 <__mulsf3>
    9708:	20 e0       	ldi	r18, 0x00	; 0
    970a:	30 e0       	ldi	r19, 0x00	; 0
    970c:	4d e4       	ldi	r20, 0x4D	; 77
    970e:	54 e4       	ldi	r21, 0x44	; 68
    9710:	a6 d6       	rcall	.+3404   	; 0xa45e <__divsf3>
    9712:	f7 01       	movw	r30, r14
    9714:	62 8f       	std	Z+26, r22	; 0x1a
    9716:	73 8f       	std	Z+27, r23	; 0x1b
    9718:	84 8f       	std	Z+28, r24	; 0x1c
    971a:	95 8f       	std	Z+29, r25	; 0x1d
	 //read Low_Pressure_1
	 PORTL &= ~   (1 << PL2);
    971c:	eb e0       	ldi	r30, 0x0B	; 11
    971e:	f1 e0       	ldi	r31, 0x01	; 1
    9720:	80 81       	ld	r24, Z
    9722:	8b 7f       	andi	r24, 0xFB	; 251
    9724:	80 83       	st	Z, r24
	 PORTL &= ~   (1 << PL1);
    9726:	80 81       	ld	r24, Z
    9728:	8d 7f       	andi	r24, 0xFD	; 253
    972a:	80 83       	st	Z, r24
	 PORTL &= ~   (1 << PL0);
    972c:	80 81       	ld	r24, Z
    972e:	8e 7f       	andi	r24, 0xFE	; 254
    9730:	80 83       	st	Z, r24
    9732:	ca e0       	ldi	r28, 0x0A	; 10
	 i = samples;
	 sum = 0;
    9734:	00 e0       	ldi	r16, 0x00	; 0
    9736:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(0, 0);
    9738:	60 e0       	ldi	r22, 0x00	; 0
    973a:	80 e0       	ldi	r24, 0x00	; 0
    973c:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9740:	01 c0       	rjmp	.+2      	; 0x9744 <ReadSensors+0x1da>
    9742:	00 00       	nop
    9744:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9748:	81 11       	cpse	r24, r1
    974a:	fb cf       	rjmp	.-10     	; 0x9742 <ReadSensors+0x1d8>
		 sum += analogConversionResult();
    974c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9750:	08 0f       	add	r16, r24
    9752:	19 1f       	adc	r17, r25
    9754:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9756:	81 f7       	brne	.-32     	; 0x9738 <ReadSensors+0x1ce>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Low_Press = ConvertToLowPress( temp );
    9758:	98 01       	movw	r18, r16
    975a:	ad ec       	ldi	r26, 0xCD	; 205
    975c:	bc ec       	ldi	r27, 0xCC	; 204
    975e:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    9762:	96 95       	lsr	r25
    9764:	87 95       	ror	r24
    9766:	96 95       	lsr	r25
    9768:	87 95       	ror	r24
    976a:	96 95       	lsr	r25
    976c:	87 95       	ror	r24
    976e:	bc 01       	movw	r22, r24
    9770:	80 e0       	ldi	r24, 0x00	; 0
    9772:	90 e0       	ldi	r25, 0x00	; 0
    9774:	0d d7       	rcall	.+3610   	; 0xa590 <__floatunsisf>
    9776:	20 e0       	ldi	r18, 0x00	; 0
    9778:	30 e0       	ldi	r19, 0x00	; 0
    977a:	4c e5       	ldi	r20, 0x5C	; 92
    977c:	52 e4       	ldi	r21, 0x42	; 66
    977e:	06 d6       	rcall	.+3084   	; 0xa38c <__subsf3>
    9780:	20 e0       	ldi	r18, 0x00	; 0
    9782:	30 e0       	ldi	r19, 0x00	; 0
    9784:	40 e9       	ldi	r20, 0x90	; 144
    9786:	51 e4       	ldi	r21, 0x41	; 65
    9788:	fe d7       	rcall	.+4092   	; 0xa786 <__mulsf3>
    978a:	20 e0       	ldi	r18, 0x00	; 0
    978c:	30 ec       	ldi	r19, 0xC0	; 192
    978e:	48 e5       	ldi	r20, 0x58	; 88
    9790:	54 e4       	ldi	r21, 0x44	; 68
    9792:	65 d6       	rcall	.+3274   	; 0xa45e <__divsf3>
    9794:	f7 01       	movw	r30, r14
    9796:	66 8f       	std	Z+30, r22	; 0x1e
    9798:	77 8f       	std	Z+31, r23	; 0x1f
    979a:	80 a3       	std	Z+32, r24	; 0x20
    979c:	91 a3       	std	Z+33, r25	; 0x21
    979e:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    97a0:	00 e0       	ldi	r16, 0x00	; 0
    97a2:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(9, 0);
    97a4:	60 e0       	ldi	r22, 0x00	; 0
    97a6:	89 e0       	ldi	r24, 0x09	; 9
    97a8:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    97ac:	01 c0       	rjmp	.+2      	; 0x97b0 <ReadSensors+0x246>
    97ae:	00 00       	nop
    97b0:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    97b4:	81 11       	cpse	r24, r1
    97b6:	fb cf       	rjmp	.-10     	; 0x97ae <ReadSensors+0x244>
		 sum += analogConversionResult();
    97b8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    97bc:	08 0f       	add	r16, r24
    97be:	19 1f       	adc	r17, r25
    97c0:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    97c2:	81 f7       	brne	.-32     	; 0x97a4 <ReadSensors+0x23a>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Heat_Out = ConvertToTemp( temp );
    97c4:	98 01       	movw	r18, r16
    97c6:	ad ec       	ldi	r26, 0xCD	; 205
    97c8:	bc ec       	ldi	r27, 0xCC	; 204
    97ca:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    97ce:	96 95       	lsr	r25
    97d0:	87 95       	ror	r24
    97d2:	96 95       	lsr	r25
    97d4:	87 95       	ror	r24
    97d6:	96 95       	lsr	r25
    97d8:	87 95       	ror	r24
    97da:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <ConvertToTemp>
    97de:	f7 01       	movw	r30, r14
    97e0:	62 a7       	std	Z+42, r22	; 0x2a
    97e2:	73 a7       	std	Z+43, r23	; 0x2b
    97e4:	84 a7       	std	Z+44, r24	; 0x2c
    97e6:	95 a7       	std	Z+45, r25	; 0x2d
    97e8:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    97ea:	00 e0       	ldi	r16, 0x00	; 0
    97ec:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(10, 0);
    97ee:	60 e0       	ldi	r22, 0x00	; 0
    97f0:	8a e0       	ldi	r24, 0x0A	; 10
    97f2:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    97f6:	01 c0       	rjmp	.+2      	; 0x97fa <ReadSensors+0x290>
    97f8:	00 00       	nop
    97fa:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    97fe:	81 11       	cpse	r24, r1
    9800:	fb cf       	rjmp	.-10     	; 0x97f8 <ReadSensors+0x28e>
		 sum += analogConversionResult();
    9802:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9806:	08 0f       	add	r16, r24
    9808:	19 1f       	adc	r17, r25
    980a:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    980c:	81 f7       	brne	.-32     	; 0x97ee <ReadSensors+0x284>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Heat_In = ConvertToTemp( temp );
    980e:	98 01       	movw	r18, r16
    9810:	ad ec       	ldi	r26, 0xCD	; 205
    9812:	bc ec       	ldi	r27, 0xCC	; 204
    9814:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    9818:	96 95       	lsr	r25
    981a:	87 95       	ror	r24
    981c:	96 95       	lsr	r25
    981e:	87 95       	ror	r24
    9820:	96 95       	lsr	r25
    9822:	87 95       	ror	r24
    9824:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <ConvertToTemp>
    9828:	f7 01       	movw	r30, r14
    982a:	66 a7       	std	Z+46, r22	; 0x2e
    982c:	77 a7       	std	Z+47, r23	; 0x2f
    982e:	80 ab       	std	Z+48, r24	; 0x30
    9830:	91 ab       	std	Z+49, r25	; 0x31
    9832:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9834:	00 e0       	ldi	r16, 0x00	; 0
    9836:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(11, 0);
    9838:	60 e0       	ldi	r22, 0x00	; 0
    983a:	8b e0       	ldi	r24, 0x0B	; 11
    983c:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9840:	01 c0       	rjmp	.+2      	; 0x9844 <ReadSensors+0x2da>
    9842:	00 00       	nop
    9844:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9848:	81 11       	cpse	r24, r1
    984a:	fb cf       	rjmp	.-10     	; 0x9842 <ReadSensors+0x2d8>
		 sum += analogConversionResult();
    984c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9850:	08 0f       	add	r16, r24
    9852:	19 1f       	adc	r17, r25
    9854:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9856:	81 f7       	brne	.-32     	; 0x9838 <ReadSensors+0x2ce>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Src_In = ConvertToTemp( temp );
    9858:	98 01       	movw	r18, r16
    985a:	ad ec       	ldi	r26, 0xCD	; 205
    985c:	bc ec       	ldi	r27, 0xCC	; 204
    985e:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    9862:	96 95       	lsr	r25
    9864:	87 95       	ror	r24
    9866:	96 95       	lsr	r25
    9868:	87 95       	ror	r24
    986a:	96 95       	lsr	r25
    986c:	87 95       	ror	r24
    986e:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <ConvertToTemp>
    9872:	f7 01       	movw	r30, r14
    9874:	62 ab       	std	Z+50, r22	; 0x32
    9876:	73 ab       	std	Z+51, r23	; 0x33
    9878:	84 ab       	std	Z+52, r24	; 0x34
    987a:	95 ab       	std	Z+53, r25	; 0x35
    987c:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    987e:	00 e0       	ldi	r16, 0x00	; 0
    9880:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(12, 0);
    9882:	60 e0       	ldi	r22, 0x00	; 0
    9884:	8c e0       	ldi	r24, 0x0C	; 12
    9886:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);
    988a:	01 c0       	rjmp	.+2      	; 0x988e <ReadSensors+0x324>
    988c:	00 00       	nop
    988e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9892:	81 11       	cpse	r24, r1
    9894:	fb cf       	rjmp	.-10     	; 0x988c <ReadSensors+0x322>
		 sum += analogConversionResult();
    9896:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    989a:	08 0f       	add	r16, r24
    989c:	19 1f       	adc	r17, r25
    989e:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    98a0:	81 f7       	brne	.-32     	; 0x9882 <ReadSensors+0x318>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Src_Out = ConvertToTemp( temp );
    98a2:	98 01       	movw	r18, r16
    98a4:	ad ec       	ldi	r26, 0xCD	; 205
    98a6:	bc ec       	ldi	r27, 0xCC	; 204
    98a8:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    98ac:	96 95       	lsr	r25
    98ae:	87 95       	ror	r24
    98b0:	96 95       	lsr	r25
    98b2:	87 95       	ror	r24
    98b4:	96 95       	lsr	r25
    98b6:	87 95       	ror	r24
    98b8:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <ConvertToTemp>
    98bc:	f7 01       	movw	r30, r14
    98be:	66 ab       	std	Z+54, r22	; 0x36
    98c0:	77 ab       	std	Z+55, r23	; 0x37
    98c2:	80 af       	std	Z+56, r24	; 0x38
    98c4:	91 af       	std	Z+57, r25	; 0x39
    98c6:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    98c8:	00 e0       	ldi	r16, 0x00	; 0
    98ca:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(13, 0);
    98cc:	60 e0       	ldi	r22, 0x00	; 0
    98ce:	8d e0       	ldi	r24, 0x0D	; 13
    98d0:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    98d4:	01 c0       	rjmp	.+2      	; 0x98d8 <ReadSensors+0x36e>
    98d6:	00 00       	nop
    98d8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    98dc:	81 11       	cpse	r24, r1
    98de:	fb cf       	rjmp	.-10     	; 0x98d6 <ReadSensors+0x36c>
		 sum += analogConversionResult();
    98e0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    98e4:	08 0f       	add	r16, r24
    98e6:	19 1f       	adc	r17, r25
    98e8:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    98ea:	81 f7       	brne	.-32     	; 0x98cc <ReadSensors+0x362>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Ex_Comp = ConvertToTemp( temp );
    98ec:	98 01       	movw	r18, r16
    98ee:	ad ec       	ldi	r26, 0xCD	; 205
    98f0:	bc ec       	ldi	r27, 0xCC	; 204
    98f2:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    98f6:	96 95       	lsr	r25
    98f8:	87 95       	ror	r24
    98fa:	96 95       	lsr	r25
    98fc:	87 95       	ror	r24
    98fe:	96 95       	lsr	r25
    9900:	87 95       	ror	r24
    9902:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <ConvertToTemp>
    9906:	f7 01       	movw	r30, r14
    9908:	62 af       	std	Z+58, r22	; 0x3a
    990a:	73 af       	std	Z+59, r23	; 0x3b
    990c:	84 af       	std	Z+60, r24	; 0x3c
    990e:	95 af       	std	Z+61, r25	; 0x3d
    9910:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9912:	00 e0       	ldi	r16, 0x00	; 0
    9914:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(14, 0);
    9916:	60 e0       	ldi	r22, 0x00	; 0
    9918:	8e e0       	ldi	r24, 0x0E	; 14
    991a:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    991e:	01 c0       	rjmp	.+2      	; 0x9922 <ReadSensors+0x3b8>
    9920:	00 00       	nop
    9922:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9926:	81 11       	cpse	r24, r1
    9928:	fb cf       	rjmp	.-10     	; 0x9920 <ReadSensors+0x3b6>
		 sum += analogConversionResult();
    992a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    992e:	08 0f       	add	r16, r24
    9930:	19 1f       	adc	r17, r25
    9932:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9934:	81 f7       	brne	.-32     	; 0x9916 <ReadSensors+0x3ac>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Suc_Comp = ConvertToTemp( temp );
    9936:	98 01       	movw	r18, r16
    9938:	ad ec       	ldi	r26, 0xCD	; 205
    993a:	bc ec       	ldi	r27, 0xCC	; 204
    993c:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    9940:	96 95       	lsr	r25
    9942:	87 95       	ror	r24
    9944:	96 95       	lsr	r25
    9946:	87 95       	ror	r24
    9948:	96 95       	lsr	r25
    994a:	87 95       	ror	r24
    994c:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <ConvertToTemp>
    9950:	f7 01       	movw	r30, r14
    9952:	fe 96       	adiw	r30, 0x3e	; 62
    9954:	60 83       	st	Z, r22
    9956:	71 83       	std	Z+1, r23	; 0x01
    9958:	82 83       	std	Z+2, r24	; 0x02
    995a:	93 83       	std	Z+3, r25	; 0x03
    995c:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    995e:	00 e0       	ldi	r16, 0x00	; 0
    9960:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(15, 0);
    9962:	60 e0       	ldi	r22, 0x00	; 0
    9964:	8f e0       	ldi	r24, 0x0F	; 15
    9966:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    996a:	01 c0       	rjmp	.+2      	; 0x996e <ReadSensors+0x404>
    996c:	00 00       	nop
    996e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9972:	81 11       	cpse	r24, r1
    9974:	fb cf       	rjmp	.-10     	; 0x996c <ReadSensors+0x402>
		 sum += analogConversionResult();
    9976:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    997a:	08 0f       	add	r16, r24
    997c:	19 1f       	adc	r17, r25
    997e:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9980:	81 f7       	brne	.-32     	; 0x9962 <ReadSensors+0x3f8>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Cond_Temp = ConvertToTemp( temp )	;
    9982:	98 01       	movw	r18, r16
    9984:	ad ec       	ldi	r26, 0xCD	; 205
    9986:	bc ec       	ldi	r27, 0xCC	; 204
    9988:	0e 94 0c 58 	call	0xb018	; 0xb018 <__umulhisi3>
    998c:	96 95       	lsr	r25
    998e:	87 95       	ror	r24
    9990:	96 95       	lsr	r25
    9992:	87 95       	ror	r24
    9994:	96 95       	lsr	r25
    9996:	87 95       	ror	r24
    9998:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <ConvertToTemp>
    999c:	f7 01       	movw	r30, r14
    999e:	ee 5b       	subi	r30, 0xBE	; 190
    99a0:	ff 4f       	sbci	r31, 0xFF	; 255
    99a2:	60 83       	st	Z, r22
    99a4:	71 83       	std	Z+1, r23	; 0x01
    99a6:	82 83       	std	Z+2, r24	; 0x02
    99a8:	93 83       	std	Z+3, r25	; 0x03
	 //--------------------------------------------------------------
	 comp->SuperHeat=ReadSuperHeat (comp);
    99aa:	c7 01       	movw	r24, r14
    99ac:	0e 94 db 3c 	call	0x79b6	; 0x79b6 <ReadSuperHeat>
    99b0:	f7 01       	movw	r30, r14
    99b2:	ea 5b       	subi	r30, 0xBA	; 186
    99b4:	ff 4f       	sbci	r31, 0xFF	; 255
    99b6:	60 83       	st	Z, r22
    99b8:	71 83       	std	Z+1, r23	; 0x01
    99ba:	82 83       	std	Z+2, r24	; 0x02
    99bc:	93 83       	std	Z+3, r25	; 0x03
	 comp->SuperCool=ReadSuperCool (comp);				
    99be:	c7 01       	movw	r24, r14
    99c0:	0e 94 45 3d 	call	0x7a8a	; 0x7a8a <ReadSuperCool>
    99c4:	f7 01       	movw	r30, r14
    99c6:	e6 5b       	subi	r30, 0xB6	; 182
    99c8:	ff 4f       	sbci	r31, 0xFF	; 255
    99ca:	60 83       	st	Z, r22
    99cc:	71 83       	std	Z+1, r23	; 0x01
    99ce:	82 83       	std	Z+2, r24	; 0x02
    99d0:	93 83       	std	Z+3, r25	; 0x03
						}
						
    if(comp->Index==2) 
    99d2:	f7 01       	movw	r30, r14
    99d4:	ee 58       	subi	r30, 0x8E	; 142
    99d6:	ff 4f       	sbci	r31, 0xFF	; 255
    99d8:	80 81       	ld	r24, Z
    99da:	91 81       	ldd	r25, Z+1	; 0x01
    99dc:	02 97       	sbiw	r24, 0x02	; 2
    99de:	09 f0       	breq	.+2      	; 0x99e2 <ReadSensors+0x478>
    99e0:	07 c1       	rjmp	.+526    	; 0x9bf0 <ReadSensors+0x686>
	{
					 //read High_Pressure_1
					 PORTL |=    (1 << PL2);//a0
    99e2:	eb e0       	ldi	r30, 0x0B	; 11
    99e4:	f1 e0       	ldi	r31, 0x01	; 1
    99e6:	80 81       	ld	r24, Z
    99e8:	84 60       	ori	r24, 0x04	; 4
    99ea:	80 83       	st	Z, r24
					 PORTL &= ~  (1 << PL1);//a1
    99ec:	80 81       	ld	r24, Z
    99ee:	8d 7f       	andi	r24, 0xFD	; 253
    99f0:	80 83       	st	Z, r24
					 PORTL &= ~  (1 << PL0);//a2
    99f2:	80 81       	ld	r24, Z
    99f4:	8e 7f       	andi	r24, 0xFE	; 254
    99f6:	80 83       	st	Z, r24
					 startAnalogConversion(0, 0);
    99f8:	60 e0       	ldi	r22, 0x00	; 0
    99fa:	80 e0       	ldi	r24, 0x00	; 0
    99fc:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					 while( analogIsConverting() )
    9a00:	01 c0       	rjmp	.+2      	; 0x9a04 <ReadSensors+0x49a>
    9a02:	00 00       	nop
    9a04:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9a08:	81 11       	cpse	r24, r1
					 _delay_us(25);//portYIELD();
					 temp = analogConversionResult();
    9a0a:	fb cf       	rjmp	.-10     	; 0x9a02 <ReadSensors+0x498>
    9a0c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					 comp->High_Press = ConvertToHighPress(temp);
    9a10:	bc 01       	movw	r22, r24
    9a12:	80 e0       	ldi	r24, 0x00	; 0
    9a14:	90 e0       	ldi	r25, 0x00	; 0
    9a16:	bc d5       	rcall	.+2936   	; 0xa590 <__floatunsisf>
    9a18:	20 e0       	ldi	r18, 0x00	; 0
    9a1a:	30 e0       	ldi	r19, 0x00	; 0
    9a1c:	4c ec       	ldi	r20, 0xCC	; 204
    9a1e:	52 e4       	ldi	r21, 0x42	; 66
    9a20:	b5 d4       	rcall	.+2410   	; 0xa38c <__subsf3>
    9a22:	20 e0       	ldi	r18, 0x00	; 0
    9a24:	30 e0       	ldi	r19, 0x00	; 0
    9a26:	48 e0       	ldi	r20, 0x08	; 8
    9a28:	52 e4       	ldi	r21, 0x42	; 66
    9a2a:	ad d6       	rcall	.+3418   	; 0xa786 <__mulsf3>
    9a2c:	20 e0       	ldi	r18, 0x00	; 0
    9a2e:	30 e0       	ldi	r19, 0x00	; 0
    9a30:	4d e4       	ldi	r20, 0x4D	; 77
    9a32:	54 e4       	ldi	r21, 0x44	; 68
    9a34:	14 d5       	rcall	.+2600   	; 0xa45e <__divsf3>
    9a36:	f7 01       	movw	r30, r14
    9a38:	62 8f       	std	Z+26, r22	; 0x1a
    9a3a:	73 8f       	std	Z+27, r23	; 0x1b
    9a3c:	84 8f       	std	Z+28, r24	; 0x1c
    9a3e:	95 8f       	std	Z+29, r25	; 0x1d
					 //read Low_Pressure_1
					 PORTL &= ~   (1 << PL2);
    9a40:	eb e0       	ldi	r30, 0x0B	; 11
    9a42:	f1 e0       	ldi	r31, 0x01	; 1
    9a44:	80 81       	ld	r24, Z
    9a46:	8b 7f       	andi	r24, 0xFB	; 251
    9a48:	80 83       	st	Z, r24
					 PORTL |=     (1 << PL1);
    9a4a:	80 81       	ld	r24, Z
    9a4c:	82 60       	ori	r24, 0x02	; 2
    9a4e:	80 83       	st	Z, r24
					 PORTL &= ~   (1 << PL0);
    9a50:	80 81       	ld	r24, Z
    9a52:	8e 7f       	andi	r24, 0xFE	; 254
    9a54:	80 83       	st	Z, r24
					 startAnalogConversion(0, 0);
    9a56:	60 e0       	ldi	r22, 0x00	; 0
    9a58:	80 e0       	ldi	r24, 0x00	; 0
    9a5a:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					 while( analogIsConverting() )
    9a5e:	01 c0       	rjmp	.+2      	; 0x9a62 <ReadSensors+0x4f8>
    9a60:	00 00       	nop
    9a62:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9a66:	81 11       	cpse	r24, r1
					_delay_us(25);// portYIELD();
					 temp = analogConversionResult();
    9a68:	fb cf       	rjmp	.-10     	; 0x9a60 <ReadSensors+0x4f6>
					 comp->Low_Press = ConvertToLowPress( temp );
    9a6a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9a6e:	bc 01       	movw	r22, r24
    9a70:	80 e0       	ldi	r24, 0x00	; 0
    9a72:	90 e0       	ldi	r25, 0x00	; 0
    9a74:	8d d5       	rcall	.+2842   	; 0xa590 <__floatunsisf>
    9a76:	20 e0       	ldi	r18, 0x00	; 0
    9a78:	30 e0       	ldi	r19, 0x00	; 0
    9a7a:	4c e5       	ldi	r20, 0x5C	; 92
    9a7c:	52 e4       	ldi	r21, 0x42	; 66
    9a7e:	86 d4       	rcall	.+2316   	; 0xa38c <__subsf3>
    9a80:	20 e0       	ldi	r18, 0x00	; 0
    9a82:	30 e0       	ldi	r19, 0x00	; 0
    9a84:	40 e9       	ldi	r20, 0x90	; 144
    9a86:	51 e4       	ldi	r21, 0x41	; 65
    9a88:	7e d6       	rcall	.+3324   	; 0xa786 <__mulsf3>
    9a8a:	20 e0       	ldi	r18, 0x00	; 0
    9a8c:	30 ec       	ldi	r19, 0xC0	; 192
    9a8e:	48 e5       	ldi	r20, 0x58	; 88
    9a90:	54 e4       	ldi	r21, 0x44	; 68
    9a92:	e5 d4       	rcall	.+2506   	; 0xa45e <__divsf3>
    9a94:	f7 01       	movw	r30, r14
    9a96:	66 8f       	std	Z+30, r22	; 0x1e
    9a98:	77 8f       	std	Z+31, r23	; 0x1f
    9a9a:	80 a3       	std	Z+32, r24	; 0x20
    9a9c:	91 a3       	std	Z+33, r25	; 0x21
					startAnalogConversion(2, 0);
    9a9e:	60 e0       	ldi	r22, 0x00	; 0
    9aa0:	82 e0       	ldi	r24, 0x02	; 2
    9aa2:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9aa6:	01 c0       	rjmp	.+2      	; 0x9aaa <ReadSensors+0x540>
    9aa8:	00 00       	nop
    9aaa:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9aae:	81 11       	cpse	r24, r1
    9ab0:	fb cf       	rjmp	.-10     	; 0x9aa8 <ReadSensors+0x53e>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9ab2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Heat_Out = ConvertToTemp( temp );
    9ab6:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <ConvertToTemp>
    9aba:	f7 01       	movw	r30, r14
    9abc:	62 a7       	std	Z+42, r22	; 0x2a
    9abe:	73 a7       	std	Z+43, r23	; 0x2b
    9ac0:	84 a7       	std	Z+44, r24	; 0x2c
    9ac2:	95 a7       	std	Z+45, r25	; 0x2d
					//---------------------------------------------------------------
					startAnalogConversion(3, 0);
    9ac4:	60 e0       	ldi	r22, 0x00	; 0
    9ac6:	83 e0       	ldi	r24, 0x03	; 3
    9ac8:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9acc:	01 c0       	rjmp	.+2      	; 0x9ad0 <ReadSensors+0x566>
    9ace:	00 00       	nop
    9ad0:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9ad4:	81 11       	cpse	r24, r1
    9ad6:	fb cf       	rjmp	.-10     	; 0x9ace <ReadSensors+0x564>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9ad8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Heat_In = ConvertToTemp( temp );
    9adc:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <ConvertToTemp>
    9ae0:	f7 01       	movw	r30, r14
    9ae2:	66 a7       	std	Z+46, r22	; 0x2e
    9ae4:	77 a7       	std	Z+47, r23	; 0x2f
    9ae6:	80 ab       	std	Z+48, r24	; 0x30
    9ae8:	91 ab       	std	Z+49, r25	; 0x31
					//---------------------------------------------------------------
					startAnalogConversion(4, 0);
    9aea:	60 e0       	ldi	r22, 0x00	; 0
    9aec:	84 e0       	ldi	r24, 0x04	; 4
    9aee:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9af2:	01 c0       	rjmp	.+2      	; 0x9af6 <ReadSensors+0x58c>
    9af4:	00 00       	nop
    9af6:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9afa:	81 11       	cpse	r24, r1
    9afc:	fb cf       	rjmp	.-10     	; 0x9af4 <ReadSensors+0x58a>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9afe:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Src_In = ConvertToTemp( temp );
    9b02:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <ConvertToTemp>
    9b06:	f7 01       	movw	r30, r14
    9b08:	62 ab       	std	Z+50, r22	; 0x32
    9b0a:	73 ab       	std	Z+51, r23	; 0x33
    9b0c:	84 ab       	std	Z+52, r24	; 0x34
    9b0e:	95 ab       	std	Z+53, r25	; 0x35
					//---------------------------------------------------------------
					startAnalogConversion(5, 0);
    9b10:	60 e0       	ldi	r22, 0x00	; 0
    9b12:	85 e0       	ldi	r24, 0x05	; 5
    9b14:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9b18:	01 c0       	rjmp	.+2      	; 0x9b1c <ReadSensors+0x5b2>
    9b1a:	00 00       	nop
    9b1c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9b20:	81 11       	cpse	r24, r1
    9b22:	fb cf       	rjmp	.-10     	; 0x9b1a <ReadSensors+0x5b0>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9b24:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Src_Out = ConvertToTemp( temp );
    9b28:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <ConvertToTemp>
    9b2c:	f7 01       	movw	r30, r14
    9b2e:	66 ab       	std	Z+54, r22	; 0x36
    9b30:	77 ab       	std	Z+55, r23	; 0x37
    9b32:	80 af       	std	Z+56, r24	; 0x38
    9b34:	91 af       	std	Z+57, r25	; 0x39
					//---------------------------------------------------------------
					startAnalogConversion(6, 0);
    9b36:	60 e0       	ldi	r22, 0x00	; 0
    9b38:	86 e0       	ldi	r24, 0x06	; 6
    9b3a:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9b3e:	01 c0       	rjmp	.+2      	; 0x9b42 <ReadSensors+0x5d8>
    9b40:	00 00       	nop
    9b42:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9b46:	81 11       	cpse	r24, r1
    9b48:	fb cf       	rjmp	.-10     	; 0x9b40 <ReadSensors+0x5d6>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9b4a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Ex_Comp = ConvertToTemp( temp );
    9b4e:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <ConvertToTemp>
    9b52:	f7 01       	movw	r30, r14
    9b54:	62 af       	std	Z+58, r22	; 0x3a
    9b56:	73 af       	std	Z+59, r23	; 0x3b
    9b58:	84 af       	std	Z+60, r24	; 0x3c
    9b5a:	95 af       	std	Z+61, r25	; 0x3d
					//---------------------------------------------------------------
					startAnalogConversion(7, 0);
    9b5c:	60 e0       	ldi	r22, 0x00	; 0
    9b5e:	87 e0       	ldi	r24, 0x07	; 7
    9b60:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9b64:	01 c0       	rjmp	.+2      	; 0x9b68 <ReadSensors+0x5fe>
    9b66:	00 00       	nop
    9b68:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9b6c:	81 11       	cpse	r24, r1
    9b6e:	fb cf       	rjmp	.-10     	; 0x9b66 <ReadSensors+0x5fc>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9b70:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Suc_Comp = ConvertToTemp( temp );
    9b74:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <ConvertToTemp>
    9b78:	f7 01       	movw	r30, r14
    9b7a:	fe 96       	adiw	r30, 0x3e	; 62
    9b7c:	60 83       	st	Z, r22
    9b7e:	71 83       	std	Z+1, r23	; 0x01
    9b80:	82 83       	std	Z+2, r24	; 0x02
    9b82:	93 83       	std	Z+3, r25	; 0x03
					//---------------------------------------------------------------
					startAnalogConversion(8, 0);
    9b84:	60 e0       	ldi	r22, 0x00	; 0
    9b86:	88 e0       	ldi	r24, 0x08	; 8
    9b88:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9b8c:	01 c0       	rjmp	.+2      	; 0x9b90 <ReadSensors+0x626>
    9b8e:	00 00       	nop
    9b90:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9b94:	81 11       	cpse	r24, r1
    9b96:	fb cf       	rjmp	.-10     	; 0x9b8e <ReadSensors+0x624>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9b98:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Cond_Temp = ConvertToTemp( temp )	;
    9b9c:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <ConvertToTemp>
    9ba0:	f7 01       	movw	r30, r14
    9ba2:	ee 5b       	subi	r30, 0xBE	; 190
    9ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    9ba6:	60 83       	st	Z, r22
    9ba8:	71 83       	std	Z+1, r23	; 0x01
    9baa:	82 83       	std	Z+2, r24	; 0x02
    9bac:	93 83       	std	Z+3, r25	; 0x03
					//--------------------------------------------------------------
					comp->SuperHeat=ReadSuperHeat (comp);
    9bae:	c7 01       	movw	r24, r14
    9bb0:	0e 94 db 3c 	call	0x79b6	; 0x79b6 <ReadSuperHeat>
    9bb4:	f7 01       	movw	r30, r14
    9bb6:	ea 5b       	subi	r30, 0xBA	; 186
    9bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    9bba:	60 83       	st	Z, r22
    9bbc:	71 83       	std	Z+1, r23	; 0x01
    9bbe:	82 83       	std	Z+2, r24	; 0x02
    9bc0:	93 83       	std	Z+3, r25	; 0x03
					comp->SuperCool=ReadSuperCool (comp);
    9bc2:	c7 01       	movw	r24, r14
    9bc4:	0e 94 45 3d 	call	0x7a8a	; 0x7a8a <ReadSuperCool>
    9bc8:	f7 01       	movw	r30, r14
    9bca:	e6 5b       	subi	r30, 0xB6	; 182
    9bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    9bce:	60 83       	st	Z, r22
    9bd0:	71 83       	std	Z+1, r23	; 0x01
    9bd2:	82 83       	std	Z+2, r24	; 0x02
					if(comp->checkTrv)comp->trvCorection=corectTrv(comp);
    9bd4:	93 83       	std	Z+3, r25	; 0x03
    9bd6:	f7 01       	movw	r30, r14
    9bd8:	81 81       	ldd	r24, Z+1	; 0x01
    9bda:	88 23       	and	r24, r24
    9bdc:	49 f0       	breq	.+18     	; 0x9bf0 <ReadSensors+0x686>
    9bde:	c7 01       	movw	r24, r14
    9be0:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <corectTrv>
    9be4:	e7 01       	movw	r28, r14
    9be6:	c6 59       	subi	r28, 0x96	; 150
    9be8:	df 4f       	sbci	r29, 0xFF	; 255
    9bea:	a1 d4       	rcall	.+2370   	; 0xa52e <__fixsfsi>
    9bec:	79 83       	std	Y+1, r23	; 0x01
    9bee:	68 83       	st	Y, r22
					//EEpromData.Volt_B= ADE7758_bvrms();
					//EEpromData.Volt_C= ADE7758_cvrms();
					}

return;	
}
    9bf0:	df 91       	pop	r29
    9bf2:	cf 91       	pop	r28
    9bf4:	1f 91       	pop	r17
    9bf6:	0f 91       	pop	r16
    9bf8:	ff 90       	pop	r15
    9bfa:	ef 90       	pop	r14
    9bfc:	08 95       	ret

00009bfe <ComutateTrv>:
	}
	if(comp->Index==2)
	{
		xTimerDelete(xComutateTrv_2,0);
	}
}
    9bfe:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    9c02:	fc 01       	movw	r30, r24
    9c04:	20 81       	ld	r18, Z
    9c06:	2a 31       	cpi	r18, 0x1A	; 26
    9c08:	09 f0       	breq	.+2      	; 0x9c0c <ComutateTrv+0xe>
    9c0a:	74 c0       	rjmp	.+232    	; 0x9cf4 <ComutateTrv+0xf6>
    9c0c:	22 b1       	in	r18, 0x02	; 2
    9c0e:	20 7f       	andi	r18, 0xF0	; 240
    9c10:	22 b9       	out	0x02, r18	; 2
    9c12:	20 91 44 0a 	lds	r18, 0x0A44	; 0x800a44 <Comp_1+0x6c>
    9c16:	30 91 45 0a 	lds	r19, 0x0A45	; 0x800a45 <Comp_1+0x6d>
    9c1a:	12 16       	cp	r1, r18
    9c1c:	13 06       	cpc	r1, r19
    9c1e:	54 f5       	brge	.+84     	; 0x9c74 <ComutateTrv+0x76>
    9c20:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <step_index.2938>
    9c24:	21 e0       	ldi	r18, 0x01	; 1
    9c26:	2e 0f       	add	r18, r30
    9c28:	20 93 c6 07 	sts	0x07C6, r18	; 0x8007c6 <step_index.2938>
    9c2c:	32 b1       	in	r19, 0x02	; 2
    9c2e:	f0 e0       	ldi	r31, 0x00	; 0
    9c30:	ee 5e       	subi	r30, 0xEE	; 238
    9c32:	fd 4f       	sbci	r31, 0xFD	; 253
    9c34:	20 81       	ld	r18, Z
    9c36:	23 2b       	or	r18, r19
    9c38:	22 b9       	out	0x02, r18	; 2
    9c3a:	e4 e4       	ldi	r30, 0x44	; 68
    9c3c:	fa e0       	ldi	r31, 0x0A	; 10
    9c3e:	20 81       	ld	r18, Z
    9c40:	31 81       	ldd	r19, Z+1	; 0x01
    9c42:	21 50       	subi	r18, 0x01	; 1
    9c44:	31 09       	sbc	r19, r1
    9c46:	31 83       	std	Z+1, r19	; 0x01
    9c48:	20 83       	st	Z, r18
    9c4a:	20 91 46 0a 	lds	r18, 0x0A46	; 0x800a46 <Comp_1+0x6e>
    9c4e:	30 91 47 0a 	lds	r19, 0x0A47	; 0x800a47 <Comp_1+0x6f>
    9c52:	2f 5f       	subi	r18, 0xFF	; 255
    9c54:	3f 4f       	sbci	r19, 0xFF	; 255
    9c56:	21 3f       	cpi	r18, 0xF1	; 241
    9c58:	31 05       	cpc	r19, r1
    9c5a:	2c f4       	brge	.+10     	; 0x9c66 <ComutateTrv+0x68>
    9c5c:	30 93 47 0a 	sts	0x0A47, r19	; 0x800a47 <Comp_1+0x6f>
    9c60:	20 93 46 0a 	sts	0x0A46, r18	; 0x800a46 <Comp_1+0x6e>
    9c64:	41 c0       	rjmp	.+130    	; 0x9ce8 <ComutateTrv+0xea>
    9c66:	20 ef       	ldi	r18, 0xF0	; 240
    9c68:	30 e0       	ldi	r19, 0x00	; 0
    9c6a:	30 93 47 0a 	sts	0x0A47, r19	; 0x800a47 <Comp_1+0x6f>
    9c6e:	20 93 46 0a 	sts	0x0A46, r18	; 0x800a46 <Comp_1+0x6e>
    9c72:	3a c0       	rjmp	.+116    	; 0x9ce8 <ComutateTrv+0xea>
    9c74:	33 23       	and	r19, r19
    9c76:	24 f5       	brge	.+72     	; 0x9cc0 <ComutateTrv+0xc2>
    9c78:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <step_index.2938>
    9c7c:	21 e0       	ldi	r18, 0x01	; 1
    9c7e:	2e 0f       	add	r18, r30
    9c80:	20 93 c6 07 	sts	0x07C6, r18	; 0x8007c6 <step_index.2938>
    9c84:	f0 e0       	ldi	r31, 0x00	; 0
    9c86:	e2 5f       	subi	r30, 0xF2	; 242
    9c88:	fd 4f       	sbci	r31, 0xFD	; 253
    9c8a:	20 81       	ld	r18, Z
    9c8c:	22 b9       	out	0x02, r18	; 2
    9c8e:	e4 e4       	ldi	r30, 0x44	; 68
    9c90:	fa e0       	ldi	r31, 0x0A	; 10
    9c92:	20 81       	ld	r18, Z
    9c94:	31 81       	ldd	r19, Z+1	; 0x01
    9c96:	2f 5f       	subi	r18, 0xFF	; 255
    9c98:	3f 4f       	sbci	r19, 0xFF	; 255
    9c9a:	31 83       	std	Z+1, r19	; 0x01
    9c9c:	20 83       	st	Z, r18
    9c9e:	20 91 46 0a 	lds	r18, 0x0A46	; 0x800a46 <Comp_1+0x6e>
    9ca2:	30 91 47 0a 	lds	r19, 0x0A47	; 0x800a47 <Comp_1+0x6f>
    9ca6:	21 50       	subi	r18, 0x01	; 1
    9ca8:	31 09       	sbc	r19, r1
    9caa:	2a f0       	brmi	.+10     	; 0x9cb6 <ComutateTrv+0xb8>
    9cac:	30 93 47 0a 	sts	0x0A47, r19	; 0x800a47 <Comp_1+0x6f>
    9cb0:	20 93 46 0a 	sts	0x0A46, r18	; 0x800a46 <Comp_1+0x6e>
    9cb4:	19 c0       	rjmp	.+50     	; 0x9ce8 <ComutateTrv+0xea>
    9cb6:	10 92 47 0a 	sts	0x0A47, r1	; 0x800a47 <Comp_1+0x6f>
    9cba:	10 92 46 0a 	sts	0x0A46, r1	; 0x800a46 <Comp_1+0x6e>
    9cbe:	14 c0       	rjmp	.+40     	; 0x9ce8 <ComutateTrv+0xea>
    9cc0:	23 2b       	or	r18, r19
    9cc2:	69 f4       	brne	.+26     	; 0x9cde <ComutateTrv+0xe0>
    9cc4:	20 91 df 09 	lds	r18, 0x09DF	; 0x8009df <Comp_1+0x7>
    9cc8:	22 23       	and	r18, r18
    9cca:	49 f0       	breq	.+18     	; 0x9cde <ComutateTrv+0xe0>
    9ccc:	20 ef       	ldi	r18, 0xF0	; 240
    9cce:	30 e0       	ldi	r19, 0x00	; 0
    9cd0:	30 93 45 0a 	sts	0x0A45, r19	; 0x800a45 <Comp_1+0x6d>
    9cd4:	20 93 44 0a 	sts	0x0A44, r18	; 0x800a44 <Comp_1+0x6c>
    9cd8:	10 92 df 09 	sts	0x09DF, r1	; 0x8009df <Comp_1+0x7>
    9cdc:	05 c0       	rjmp	.+10     	; 0x9ce8 <ComutateTrv+0xea>
    9cde:	22 b1       	in	r18, 0x02	; 2
    9ce0:	20 7f       	andi	r18, 0xF0	; 240
    9ce2:	22 b9       	out	0x02, r18	; 2
    9ce4:	10 92 df 09 	sts	0x09DF, r1	; 0x8009df <Comp_1+0x7>
    9ce8:	20 91 c6 07 	lds	r18, 0x07C6	; 0x8007c6 <step_index.2938>
    9cec:	24 30       	cpi	r18, 0x04	; 4
    9cee:	10 f0       	brcs	.+4      	; 0x9cf4 <ComutateTrv+0xf6>
    9cf0:	10 92 c6 07 	sts	0x07C6, r1	; 0x8007c6 <step_index.2938>
    9cf4:	fc 01       	movw	r30, r24
    9cf6:	80 81       	ld	r24, Z
    9cf8:	8b 31       	cpi	r24, 0x1B	; 27
    9cfa:	09 f0       	breq	.+2      	; 0x9cfe <ComutateTrv+0x100>
    9cfc:	70 c0       	rjmp	.+224    	; 0x9dde <ComutateTrv+0x1e0>
    9cfe:	82 b1       	in	r24, 0x02	; 2
    9d00:	8f 70       	andi	r24, 0x0F	; 15
    9d02:	82 b9       	out	0x02, r24	; 2
    9d04:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <Comp_2+0x6c>
    9d08:	90 91 cf 0a 	lds	r25, 0x0ACF	; 0x800acf <Comp_2+0x6d>
    9d0c:	18 16       	cp	r1, r24
    9d0e:	19 06       	cpc	r1, r25
    9d10:	44 f5       	brge	.+80     	; 0x9d62 <ComutateTrv+0x164>
    9d12:	e0 91 c5 07 	lds	r30, 0x07C5	; 0x8007c5 <step_index.2939>
    9d16:	81 e0       	ldi	r24, 0x01	; 1
    9d18:	8e 0f       	add	r24, r30
    9d1a:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <step_index.2939>
    9d1e:	92 b1       	in	r25, 0x02	; 2
    9d20:	f0 e0       	ldi	r31, 0x00	; 0
    9d22:	e6 5f       	subi	r30, 0xF6	; 246
    9d24:	fd 4f       	sbci	r31, 0xFD	; 253
    9d26:	80 81       	ld	r24, Z
    9d28:	89 2b       	or	r24, r25
    9d2a:	82 b9       	out	0x02, r24	; 2
    9d2c:	ee ec       	ldi	r30, 0xCE	; 206
    9d2e:	fa e0       	ldi	r31, 0x0A	; 10
    9d30:	80 81       	ld	r24, Z
    9d32:	91 81       	ldd	r25, Z+1	; 0x01
    9d34:	01 97       	sbiw	r24, 0x01	; 1
    9d36:	91 83       	std	Z+1, r25	; 0x01
    9d38:	80 83       	st	Z, r24
    9d3a:	80 91 d0 0a 	lds	r24, 0x0AD0	; 0x800ad0 <Comp_2+0x6e>
    9d3e:	90 91 d1 0a 	lds	r25, 0x0AD1	; 0x800ad1 <Comp_2+0x6f>
    9d42:	01 96       	adiw	r24, 0x01	; 1
    9d44:	81 3f       	cpi	r24, 0xF1	; 241
    9d46:	91 05       	cpc	r25, r1
    9d48:	2c f4       	brge	.+10     	; 0x9d54 <ComutateTrv+0x156>
    9d4a:	90 93 d1 0a 	sts	0x0AD1, r25	; 0x800ad1 <Comp_2+0x6f>
    9d4e:	80 93 d0 0a 	sts	0x0AD0, r24	; 0x800ad0 <Comp_2+0x6e>
    9d52:	3f c0       	rjmp	.+126    	; 0x9dd2 <ComutateTrv+0x1d4>
    9d54:	80 ef       	ldi	r24, 0xF0	; 240
    9d56:	90 e0       	ldi	r25, 0x00	; 0
    9d58:	90 93 d1 0a 	sts	0x0AD1, r25	; 0x800ad1 <Comp_2+0x6f>
    9d5c:	80 93 d0 0a 	sts	0x0AD0, r24	; 0x800ad0 <Comp_2+0x6e>
    9d60:	38 c0       	rjmp	.+112    	; 0x9dd2 <ComutateTrv+0x1d4>
    9d62:	99 23       	and	r25, r25
    9d64:	14 f5       	brge	.+68     	; 0x9daa <ComutateTrv+0x1ac>
    9d66:	e0 91 c5 07 	lds	r30, 0x07C5	; 0x8007c5 <step_index.2939>
    9d6a:	81 e0       	ldi	r24, 0x01	; 1
    9d6c:	8e 0f       	add	r24, r30
    9d6e:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <step_index.2939>
    9d72:	f0 e0       	ldi	r31, 0x00	; 0
    9d74:	ea 5f       	subi	r30, 0xFA	; 250
    9d76:	fd 4f       	sbci	r31, 0xFD	; 253
    9d78:	80 81       	ld	r24, Z
    9d7a:	82 b9       	out	0x02, r24	; 2
    9d7c:	ee ec       	ldi	r30, 0xCE	; 206
    9d7e:	fa e0       	ldi	r31, 0x0A	; 10
    9d80:	80 81       	ld	r24, Z
    9d82:	91 81       	ldd	r25, Z+1	; 0x01
    9d84:	01 96       	adiw	r24, 0x01	; 1
    9d86:	91 83       	std	Z+1, r25	; 0x01
    9d88:	80 83       	st	Z, r24
    9d8a:	80 91 d0 0a 	lds	r24, 0x0AD0	; 0x800ad0 <Comp_2+0x6e>
    9d8e:	90 91 d1 0a 	lds	r25, 0x0AD1	; 0x800ad1 <Comp_2+0x6f>
    9d92:	01 97       	sbiw	r24, 0x01	; 1
    9d94:	2a f0       	brmi	.+10     	; 0x9da0 <ComutateTrv+0x1a2>
    9d96:	90 93 d1 0a 	sts	0x0AD1, r25	; 0x800ad1 <Comp_2+0x6f>
    9d9a:	80 93 d0 0a 	sts	0x0AD0, r24	; 0x800ad0 <Comp_2+0x6e>
    9d9e:	19 c0       	rjmp	.+50     	; 0x9dd2 <ComutateTrv+0x1d4>
    9da0:	10 92 d1 0a 	sts	0x0AD1, r1	; 0x800ad1 <Comp_2+0x6f>
    9da4:	10 92 d0 0a 	sts	0x0AD0, r1	; 0x800ad0 <Comp_2+0x6e>
    9da8:	14 c0       	rjmp	.+40     	; 0x9dd2 <ComutateTrv+0x1d4>
    9daa:	89 2b       	or	r24, r25
    9dac:	69 f4       	brne	.+26     	; 0x9dc8 <ComutateTrv+0x1ca>
    9dae:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <Comp_2+0x7>
    9db2:	88 23       	and	r24, r24
    9db4:	49 f0       	breq	.+18     	; 0x9dc8 <ComutateTrv+0x1ca>
    9db6:	80 ef       	ldi	r24, 0xF0	; 240
    9db8:	90 e0       	ldi	r25, 0x00	; 0
    9dba:	90 93 cf 0a 	sts	0x0ACF, r25	; 0x800acf <Comp_2+0x6d>
    9dbe:	80 93 ce 0a 	sts	0x0ACE, r24	; 0x800ace <Comp_2+0x6c>
    9dc2:	10 92 69 0a 	sts	0x0A69, r1	; 0x800a69 <Comp_2+0x7>
    9dc6:	05 c0       	rjmp	.+10     	; 0x9dd2 <ComutateTrv+0x1d4>
    9dc8:	82 b1       	in	r24, 0x02	; 2
    9dca:	8f 70       	andi	r24, 0x0F	; 15
    9dcc:	82 b9       	out	0x02, r24	; 2
    9dce:	10 92 69 0a 	sts	0x0A69, r1	; 0x800a69 <Comp_2+0x7>
    9dd2:	80 91 c5 07 	lds	r24, 0x07C5	; 0x8007c5 <step_index.2939>
    9dd6:	84 30       	cpi	r24, 0x04	; 4
    9dd8:	10 f0       	brcs	.+4      	; 0x9dde <ComutateTrv+0x1e0>
    9dda:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <step_index.2939>
    9dde:	08 95       	ret

00009de0 <activateTrvTimer>:
    9de0:	ef 92       	push	r14
    9de2:	ff 92       	push	r15
    9de4:	0f 93       	push	r16
    9de6:	1f 93       	push	r17
    9de8:	8e 58       	subi	r24, 0x8E	; 142
    9dea:	9f 4f       	sbci	r25, 0xFF	; 255
    9dec:	fc 01       	movw	r30, r24
    9dee:	80 81       	ld	r24, Z
    9df0:	91 81       	ldd	r25, Z+1	; 0x01
    9df2:	81 30       	cpi	r24, 0x01	; 1
    9df4:	91 05       	cpc	r25, r1
    9df6:	b1 f4       	brne	.+44     	; 0x9e24 <activateTrvTimer+0x44>
    9df8:	0f 2e       	mov	r0, r31
    9dfa:	ff ef       	ldi	r31, 0xFF	; 255
    9dfc:	ef 2e       	mov	r14, r31
    9dfe:	fd e4       	ldi	r31, 0x4D	; 77
    9e00:	ff 2e       	mov	r15, r31
    9e02:	f0 2d       	mov	r31, r0
    9e04:	0e ee       	ldi	r16, 0xEE	; 238
    9e06:	16 e0       	ldi	r17, 0x06	; 6
    9e08:	21 e0       	ldi	r18, 0x01	; 1
    9e0a:	42 e3       	ldi	r20, 0x32	; 50
    9e0c:	50 e0       	ldi	r21, 0x00	; 0
    9e0e:	60 e0       	ldi	r22, 0x00	; 0
    9e10:	70 e0       	ldi	r23, 0x00	; 0
    9e12:	8a e8       	ldi	r24, 0x8A	; 138
    9e14:	96 e0       	ldi	r25, 0x06	; 6
    9e16:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    9e1a:	90 93 5e 09 	sts	0x095E, r25	; 0x80095e <xComutateTrv_1+0x1>
    9e1e:	80 93 5d 09 	sts	0x095D, r24	; 0x80095d <xComutateTrv_1>
    9e22:	17 c0       	rjmp	.+46     	; 0x9e52 <activateTrvTimer+0x72>
    9e24:	02 97       	sbiw	r24, 0x02	; 2
    9e26:	a9 f4       	brne	.+42     	; 0x9e52 <activateTrvTimer+0x72>
    9e28:	0f 2e       	mov	r0, r31
    9e2a:	ff ef       	ldi	r31, 0xFF	; 255
    9e2c:	ef 2e       	mov	r14, r31
    9e2e:	fd e4       	ldi	r31, 0x4D	; 77
    9e30:	ff 2e       	mov	r15, r31
    9e32:	f0 2d       	mov	r31, r0
    9e34:	0d ee       	ldi	r16, 0xED	; 237
    9e36:	16 e0       	ldi	r17, 0x06	; 6
    9e38:	21 e0       	ldi	r18, 0x01	; 1
    9e3a:	42 e3       	ldi	r20, 0x32	; 50
    9e3c:	50 e0       	ldi	r21, 0x00	; 0
    9e3e:	60 e0       	ldi	r22, 0x00	; 0
    9e40:	70 e0       	ldi	r23, 0x00	; 0
    9e42:	83 e9       	ldi	r24, 0x93	; 147
    9e44:	96 e0       	ldi	r25, 0x06	; 6
    9e46:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    9e4a:	90 93 59 0a 	sts	0x0A59, r25	; 0x800a59 <xComutateTrv_2+0x1>
    9e4e:	80 93 58 0a 	sts	0x0A58, r24	; 0x800a58 <xComutateTrv_2>
    9e52:	1f 91       	pop	r17
    9e54:	0f 91       	pop	r16
    9e56:	ff 90       	pop	r15
    9e58:	ef 90       	pop	r14
    9e5a:	08 95       	ret

00009e5c <startTrvTimer>:
    9e5c:	cf 92       	push	r12
    9e5e:	df 92       	push	r13
    9e60:	ef 92       	push	r14
    9e62:	ff 92       	push	r15
    9e64:	0f 93       	push	r16
    9e66:	1f 93       	push	r17
    9e68:	8e 58       	subi	r24, 0x8E	; 142
    9e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    9e6c:	fc 01       	movw	r30, r24
    9e6e:	80 81       	ld	r24, Z
    9e70:	91 81       	ldd	r25, Z+1	; 0x01
    9e72:	81 30       	cpi	r24, 0x01	; 1
    9e74:	91 05       	cpc	r25, r1
    9e76:	89 f4       	brne	.+34     	; 0x9e9a <startTrvTimer+0x3e>
    9e78:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    9e7c:	9b 01       	movw	r18, r22
    9e7e:	ac 01       	movw	r20, r24
    9e80:	c1 2c       	mov	r12, r1
    9e82:	d1 2c       	mov	r13, r1
    9e84:	76 01       	movw	r14, r12
    9e86:	00 e0       	ldi	r16, 0x00	; 0
    9e88:	10 e0       	ldi	r17, 0x00	; 0
    9e8a:	61 e0       	ldi	r22, 0x01	; 1
    9e8c:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <xComutateTrv_1>
    9e90:	90 91 5e 09 	lds	r25, 0x095E	; 0x80095e <xComutateTrv_1+0x1>
    9e94:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    9e98:	12 c0       	rjmp	.+36     	; 0x9ebe <startTrvTimer+0x62>
    9e9a:	02 97       	sbiw	r24, 0x02	; 2
    9e9c:	81 f4       	brne	.+32     	; 0x9ebe <startTrvTimer+0x62>
    9e9e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    9ea2:	9b 01       	movw	r18, r22
    9ea4:	ac 01       	movw	r20, r24
    9ea6:	c1 2c       	mov	r12, r1
    9ea8:	d1 2c       	mov	r13, r1
    9eaa:	76 01       	movw	r14, r12
    9eac:	00 e0       	ldi	r16, 0x00	; 0
    9eae:	10 e0       	ldi	r17, 0x00	; 0
    9eb0:	61 e0       	ldi	r22, 0x01	; 1
    9eb2:	80 91 58 0a 	lds	r24, 0x0A58	; 0x800a58 <xComutateTrv_2>
    9eb6:	90 91 59 0a 	lds	r25, 0x0A59	; 0x800a59 <xComutateTrv_2+0x1>
    9eba:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    9ebe:	1f 91       	pop	r17
    9ec0:	0f 91       	pop	r16
    9ec2:	ff 90       	pop	r15
    9ec4:	ef 90       	pop	r14
    9ec6:	df 90       	pop	r13
    9ec8:	cf 90       	pop	r12
    9eca:	08 95       	ret

00009ecc <stopTrvTimer>:
void stopTrvTimer(xCompressor *comp)
{
    9ecc:	cf 92       	push	r12
    9ece:	df 92       	push	r13
    9ed0:	ef 92       	push	r14
    9ed2:	ff 92       	push	r15
    9ed4:	0f 93       	push	r16
    9ed6:	1f 93       	push	r17
    9ed8:	cf 93       	push	r28
    9eda:	df 93       	push	r29
    9edc:	ec 01       	movw	r28, r24
	if(comp->Index==1)
    9ede:	fc 01       	movw	r30, r24
    9ee0:	ee 58       	subi	r30, 0x8E	; 142
    9ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    9ee4:	80 81       	ld	r24, Z
    9ee6:	91 81       	ldd	r25, Z+1	; 0x01
    9ee8:	01 97       	sbiw	r24, 0x01	; 1
    9eea:	c1 f4       	brne	.+48     	; 0x9f1c <stopTrvTimer+0x50>
	{
		if( xTimerIsTimerActive( xComutateTrv_1 ) != pdFALSE )	xTimerStop(xComutateTrv_1, 1);
    9eec:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <xComutateTrv_1>
    9ef0:	90 91 5e 09 	lds	r25, 0x095E	; 0x80095e <xComutateTrv_1+0x1>
    9ef4:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    9ef8:	88 23       	and	r24, r24
    9efa:	81 f0       	breq	.+32     	; 0x9f1c <stopTrvTimer+0x50>
    9efc:	c1 2c       	mov	r12, r1
    9efe:	d1 2c       	mov	r13, r1
    9f00:	76 01       	movw	r14, r12
    9f02:	c3 94       	inc	r12
    9f04:	00 e0       	ldi	r16, 0x00	; 0
    9f06:	10 e0       	ldi	r17, 0x00	; 0
    9f08:	20 e0       	ldi	r18, 0x00	; 0
    9f0a:	30 e0       	ldi	r19, 0x00	; 0
    9f0c:	a9 01       	movw	r20, r18
    9f0e:	63 e0       	ldi	r22, 0x03	; 3
    9f10:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <xComutateTrv_1>
    9f14:	90 91 5e 09 	lds	r25, 0x095E	; 0x80095e <xComutateTrv_1+0x1>
    9f18:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if(comp->Index==2)
    9f1c:	ce 58       	subi	r28, 0x8E	; 142
    9f1e:	df 4f       	sbci	r29, 0xFF	; 255
    9f20:	88 81       	ld	r24, Y
    9f22:	99 81       	ldd	r25, Y+1	; 0x01
    9f24:	02 97       	sbiw	r24, 0x02	; 2
    9f26:	c1 f4       	brne	.+48     	; 0x9f58 <stopTrvTimer+0x8c>
	{
		if( xTimerIsTimerActive( xComutateTrv_2 ) != pdFALSE )	xTimerStop(xComutateTrv_2, 1);
    9f28:	80 91 58 0a 	lds	r24, 0x0A58	; 0x800a58 <xComutateTrv_2>
    9f2c:	90 91 59 0a 	lds	r25, 0x0A59	; 0x800a59 <xComutateTrv_2+0x1>
    9f30:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    9f34:	88 23       	and	r24, r24
    9f36:	81 f0       	breq	.+32     	; 0x9f58 <stopTrvTimer+0x8c>
    9f38:	c1 2c       	mov	r12, r1
    9f3a:	d1 2c       	mov	r13, r1
    9f3c:	76 01       	movw	r14, r12
    9f3e:	c3 94       	inc	r12
    9f40:	00 e0       	ldi	r16, 0x00	; 0
    9f42:	10 e0       	ldi	r17, 0x00	; 0
    9f44:	20 e0       	ldi	r18, 0x00	; 0
    9f46:	30 e0       	ldi	r19, 0x00	; 0
    9f48:	a9 01       	movw	r20, r18
    9f4a:	63 e0       	ldi	r22, 0x03	; 3
    9f4c:	80 91 58 0a 	lds	r24, 0x0A58	; 0x800a58 <xComutateTrv_2>
    9f50:	90 91 59 0a 	lds	r25, 0x0A59	; 0x800a59 <xComutateTrv_2+0x1>
    9f54:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
}
    9f58:	df 91       	pop	r29
    9f5a:	cf 91       	pop	r28
    9f5c:	1f 91       	pop	r17
    9f5e:	0f 91       	pop	r16
    9f60:	ff 90       	pop	r15
    9f62:	ef 90       	pop	r14
    9f64:	df 90       	pop	r13
    9f66:	cf 90       	pop	r12
    9f68:	08 95       	ret

00009f6a <Fuzzy>:
		
	}
}
//----------------------------------------------------------------------------------------------------------
int Fuzzy(xCompressor *comp,int corection)
{
    9f6a:	8f 92       	push	r8
    9f6c:	9f 92       	push	r9
    9f6e:	af 92       	push	r10
    9f70:	bf 92       	push	r11
    9f72:	cf 92       	push	r12
    9f74:	df 92       	push	r13
    9f76:	ef 92       	push	r14
    9f78:	ff 92       	push	r15
    9f7a:	0f 93       	push	r16
    9f7c:	1f 93       	push	r17
    9f7e:	cf 93       	push	r28
    9f80:	df 93       	push	r29
    9f82:	ec 01       	movw	r28, r24
    9f84:	8b 01       	movw	r16, r22
	int steps=0;
	//static int old_corection=0;
	//static int old_corection_1=0;
	if(comp->Index==2)xSerialxPrintf(&xSerial3Port,"corection_2 = %d \r\n", corection);
    9f86:	fc 01       	movw	r30, r24
    9f88:	ee 58       	subi	r30, 0x8E	; 142
    9f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    9f8c:	80 81       	ld	r24, Z
    9f8e:	91 81       	ldd	r25, Z+1	; 0x01
    9f90:	02 97       	sbiw	r24, 0x02	; 2
    9f92:	91 f4       	brne	.+36     	; 0x9fb8 <Fuzzy+0x4e>
    9f94:	1f 93       	push	r17
    9f96:	6f 93       	push	r22
    9f98:	8f e9       	ldi	r24, 0x9F	; 159
    9f9a:	96 e0       	ldi	r25, 0x06	; 6
    9f9c:	9f 93       	push	r25
    9f9e:	8f 93       	push	r24
    9fa0:	86 e1       	ldi	r24, 0x16	; 22
    9fa2:	98 e0       	ldi	r25, 0x08	; 8
    9fa4:	9f 93       	push	r25
    9fa6:	8f 93       	push	r24
    9fa8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    9fac:	0f 90       	pop	r0
    9fae:	0f 90       	pop	r0
    9fb0:	0f 90       	pop	r0
    9fb2:	0f 90       	pop	r0
    9fb4:	0f 90       	pop	r0
    9fb6:	0f 90       	pop	r0
	if(comp->Src_In<=10 && comp->Heating==1 ){steps=(comp->Src_In)/10 * 100 ;}
    9fb8:	ca a8       	ldd	r12, Y+50	; 0x32
    9fba:	db a8       	ldd	r13, Y+51	; 0x33
    9fbc:	ec a8       	ldd	r14, Y+52	; 0x34
    9fbe:	fd a8       	ldd	r15, Y+53	; 0x35
    9fc0:	20 e0       	ldi	r18, 0x00	; 0
    9fc2:	30 e0       	ldi	r19, 0x00	; 0
    9fc4:	40 e2       	ldi	r20, 0x20	; 32
    9fc6:	51 e4       	ldi	r21, 0x41	; 65
    9fc8:	c7 01       	movw	r24, r14
    9fca:	b6 01       	movw	r22, r12
    9fcc:	44 d2       	rcall	.+1160   	; 0xa456 <__cmpsf2>
    9fce:	18 16       	cp	r1, r24
    9fd0:	94 f0       	brlt	.+36     	; 0x9ff6 <Fuzzy+0x8c>
    9fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    9fd4:	88 23       	and	r24, r24
    9fd6:	79 f0       	breq	.+30     	; 0x9ff6 <Fuzzy+0x8c>
    9fd8:	20 e0       	ldi	r18, 0x00	; 0
    9fda:	30 e0       	ldi	r19, 0x00	; 0
    9fdc:	40 e2       	ldi	r20, 0x20	; 32
    9fde:	51 e4       	ldi	r21, 0x41	; 65
    9fe0:	c7 01       	movw	r24, r14
    9fe2:	b6 01       	movw	r22, r12
    9fe4:	3c d2       	rcall	.+1144   	; 0xa45e <__divsf3>
    9fe6:	20 e0       	ldi	r18, 0x00	; 0
    9fe8:	30 e0       	ldi	r19, 0x00	; 0
    9fea:	48 ec       	ldi	r20, 0xC8	; 200
    9fec:	52 e4       	ldi	r21, 0x42	; 66
    9fee:	cb d3       	rcall	.+1942   	; 0xa786 <__mulsf3>
    9ff0:	9e d2       	rcall	.+1340   	; 0xa52e <__fixsfsi>
    9ff2:	7b 01       	movw	r14, r22
    9ff4:	3b c1       	rjmp	.+630    	; 0xa26c <Fuzzy+0x302>
	else if(comp->Src_Out<=10 && comp->Cooling==1){steps=(comp->Src_Out)/10 * 100 ;}
    9ff6:	8e a8       	ldd	r8, Y+54	; 0x36
    9ff8:	9f a8       	ldd	r9, Y+55	; 0x37
    9ffa:	a8 ac       	ldd	r10, Y+56	; 0x38
    9ffc:	b9 ac       	ldd	r11, Y+57	; 0x39
    9ffe:	20 e0       	ldi	r18, 0x00	; 0
    a000:	30 e0       	ldi	r19, 0x00	; 0
    a002:	40 e2       	ldi	r20, 0x20	; 32
    a004:	51 e4       	ldi	r21, 0x41	; 65
    a006:	c5 01       	movw	r24, r10
    a008:	b4 01       	movw	r22, r8
    a00a:	25 d2       	rcall	.+1098   	; 0xa456 <__cmpsf2>
    a00c:	18 16       	cp	r1, r24
    a00e:	94 f0       	brlt	.+36     	; 0xa034 <Fuzzy+0xca>
    a010:	8b 81       	ldd	r24, Y+3	; 0x03
    a012:	88 23       	and	r24, r24
    a014:	79 f0       	breq	.+30     	; 0xa034 <Fuzzy+0xca>
    a016:	20 e0       	ldi	r18, 0x00	; 0
    a018:	30 e0       	ldi	r19, 0x00	; 0
    a01a:	40 e2       	ldi	r20, 0x20	; 32
    a01c:	51 e4       	ldi	r21, 0x41	; 65
    a01e:	c5 01       	movw	r24, r10
    a020:	b4 01       	movw	r22, r8
    a022:	1d d2       	rcall	.+1082   	; 0xa45e <__divsf3>
    a024:	20 e0       	ldi	r18, 0x00	; 0
    a026:	30 e0       	ldi	r19, 0x00	; 0
    a028:	48 ec       	ldi	r20, 0xC8	; 200
    a02a:	52 e4       	ldi	r21, 0x42	; 66
    a02c:	ac d3       	rcall	.+1880   	; 0xa786 <__mulsf3>
    a02e:	7f d2       	rcall	.+1278   	; 0xa52e <__fixsfsi>
    a030:	7b 01       	movw	r14, r22
    a032:	1c c1       	rjmp	.+568    	; 0xa26c <Fuzzy+0x302>
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps); }//comp->trvCorection;
	else if(comp->Src_In>10 && comp->Src_In<=20 && comp->Heating==1)  {steps = (comp->Src_In-10)/10 * 100 + 100;}
    a034:	20 e0       	ldi	r18, 0x00	; 0
    a036:	30 e0       	ldi	r19, 0x00	; 0
    a038:	40 e2       	ldi	r20, 0x20	; 32
    a03a:	51 e4       	ldi	r21, 0x41	; 65
    a03c:	c7 01       	movw	r24, r14
    a03e:	b6 01       	movw	r22, r12
    a040:	59 d3       	rcall	.+1714   	; 0xa6f4 <__gesf2>
    a042:	18 16       	cp	r1, r24
    a044:	2c f5       	brge	.+74     	; 0xa090 <Fuzzy+0x126>
    a046:	20 e0       	ldi	r18, 0x00	; 0
    a048:	30 e0       	ldi	r19, 0x00	; 0
    a04a:	40 ea       	ldi	r20, 0xA0	; 160
    a04c:	51 e4       	ldi	r21, 0x41	; 65
    a04e:	c7 01       	movw	r24, r14
    a050:	b6 01       	movw	r22, r12
    a052:	01 d2       	rcall	.+1026   	; 0xa456 <__cmpsf2>
    a054:	18 16       	cp	r1, r24
    a056:	e4 f0       	brlt	.+56     	; 0xa090 <Fuzzy+0x126>
    a058:	8a 81       	ldd	r24, Y+2	; 0x02
    a05a:	88 23       	and	r24, r24
    a05c:	c9 f0       	breq	.+50     	; 0xa090 <Fuzzy+0x126>
    a05e:	20 e0       	ldi	r18, 0x00	; 0
    a060:	30 e0       	ldi	r19, 0x00	; 0
    a062:	40 e2       	ldi	r20, 0x20	; 32
    a064:	51 e4       	ldi	r21, 0x41	; 65
    a066:	c7 01       	movw	r24, r14
    a068:	b6 01       	movw	r22, r12
    a06a:	90 d1       	rcall	.+800    	; 0xa38c <__subsf3>
    a06c:	20 e0       	ldi	r18, 0x00	; 0
    a06e:	30 e0       	ldi	r19, 0x00	; 0
    a070:	40 e2       	ldi	r20, 0x20	; 32
    a072:	51 e4       	ldi	r21, 0x41	; 65
    a074:	f4 d1       	rcall	.+1000   	; 0xa45e <__divsf3>
    a076:	20 e0       	ldi	r18, 0x00	; 0
    a078:	30 e0       	ldi	r19, 0x00	; 0
    a07a:	48 ec       	ldi	r20, 0xC8	; 200
    a07c:	52 e4       	ldi	r21, 0x42	; 66
    a07e:	83 d3       	rcall	.+1798   	; 0xa786 <__mulsf3>
    a080:	20 e0       	ldi	r18, 0x00	; 0
    a082:	30 e0       	ldi	r19, 0x00	; 0
    a084:	48 ec       	ldi	r20, 0xC8	; 200
    a086:	52 e4       	ldi	r21, 0x42	; 66
    a088:	82 d1       	rcall	.+772    	; 0xa38e <__addsf3>
    a08a:	51 d2       	rcall	.+1186   	; 0xa52e <__fixsfsi>
    a08c:	7b 01       	movw	r14, r22
    a08e:	ee c0       	rjmp	.+476    	; 0xa26c <Fuzzy+0x302>
	else if(comp->Src_Out>10 && comp->Src_Out<=20 && comp->Cooling==1)  {steps = (comp->Src_Out-10)/10 * 100 + 100;}	
    a090:	20 e0       	ldi	r18, 0x00	; 0
    a092:	30 e0       	ldi	r19, 0x00	; 0
    a094:	40 e2       	ldi	r20, 0x20	; 32
    a096:	51 e4       	ldi	r21, 0x41	; 65
    a098:	c5 01       	movw	r24, r10
    a09a:	b4 01       	movw	r22, r8
    a09c:	2b d3       	rcall	.+1622   	; 0xa6f4 <__gesf2>
    a09e:	18 16       	cp	r1, r24
    a0a0:	2c f5       	brge	.+74     	; 0xa0ec <Fuzzy+0x182>
    a0a2:	20 e0       	ldi	r18, 0x00	; 0
    a0a4:	30 e0       	ldi	r19, 0x00	; 0
    a0a6:	40 ea       	ldi	r20, 0xA0	; 160
    a0a8:	51 e4       	ldi	r21, 0x41	; 65
    a0aa:	c5 01       	movw	r24, r10
    a0ac:	b4 01       	movw	r22, r8
    a0ae:	d3 d1       	rcall	.+934    	; 0xa456 <__cmpsf2>
    a0b0:	18 16       	cp	r1, r24
    a0b2:	e4 f0       	brlt	.+56     	; 0xa0ec <Fuzzy+0x182>
    a0b4:	8b 81       	ldd	r24, Y+3	; 0x03
    a0b6:	88 23       	and	r24, r24
    a0b8:	c9 f0       	breq	.+50     	; 0xa0ec <Fuzzy+0x182>
    a0ba:	20 e0       	ldi	r18, 0x00	; 0
    a0bc:	30 e0       	ldi	r19, 0x00	; 0
    a0be:	40 e2       	ldi	r20, 0x20	; 32
    a0c0:	51 e4       	ldi	r21, 0x41	; 65
    a0c2:	c5 01       	movw	r24, r10
    a0c4:	b4 01       	movw	r22, r8
    a0c6:	62 d1       	rcall	.+708    	; 0xa38c <__subsf3>
    a0c8:	20 e0       	ldi	r18, 0x00	; 0
    a0ca:	30 e0       	ldi	r19, 0x00	; 0
    a0cc:	40 e2       	ldi	r20, 0x20	; 32
    a0ce:	51 e4       	ldi	r21, 0x41	; 65
    a0d0:	c6 d1       	rcall	.+908    	; 0xa45e <__divsf3>
    a0d2:	20 e0       	ldi	r18, 0x00	; 0
    a0d4:	30 e0       	ldi	r19, 0x00	; 0
    a0d6:	48 ec       	ldi	r20, 0xC8	; 200
    a0d8:	52 e4       	ldi	r21, 0x42	; 66
    a0da:	55 d3       	rcall	.+1706   	; 0xa786 <__mulsf3>
    a0dc:	20 e0       	ldi	r18, 0x00	; 0
    a0de:	30 e0       	ldi	r19, 0x00	; 0
    a0e0:	48 ec       	ldi	r20, 0xC8	; 200
    a0e2:	52 e4       	ldi	r21, 0x42	; 66
    a0e4:	54 d1       	rcall	.+680    	; 0xa38e <__addsf3>
    a0e6:	23 d2       	rcall	.+1094   	; 0xa52e <__fixsfsi>
    a0e8:	7b 01       	movw	r14, r22
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps); }//;
	else if(comp->Src_In >20 && comp->Src_In<=30 && comp->Heating==1) {steps = (comp->Src_In-20)/10 * 100 + 150;}
    a0ea:	c0 c0       	rjmp	.+384    	; 0xa26c <Fuzzy+0x302>
    a0ec:	20 e0       	ldi	r18, 0x00	; 0
    a0ee:	30 e0       	ldi	r19, 0x00	; 0
    a0f0:	40 ea       	ldi	r20, 0xA0	; 160
    a0f2:	51 e4       	ldi	r21, 0x41	; 65
    a0f4:	c7 01       	movw	r24, r14
    a0f6:	b6 01       	movw	r22, r12
    a0f8:	fd d2       	rcall	.+1530   	; 0xa6f4 <__gesf2>
    a0fa:	18 16       	cp	r1, r24
    a0fc:	2c f5       	brge	.+74     	; 0xa148 <Fuzzy+0x1de>
    a0fe:	20 e0       	ldi	r18, 0x00	; 0
    a100:	30 e0       	ldi	r19, 0x00	; 0
    a102:	40 ef       	ldi	r20, 0xF0	; 240
    a104:	51 e4       	ldi	r21, 0x41	; 65
    a106:	c7 01       	movw	r24, r14
    a108:	b6 01       	movw	r22, r12
    a10a:	a5 d1       	rcall	.+842    	; 0xa456 <__cmpsf2>
    a10c:	18 16       	cp	r1, r24
    a10e:	e4 f0       	brlt	.+56     	; 0xa148 <Fuzzy+0x1de>
    a110:	8a 81       	ldd	r24, Y+2	; 0x02
    a112:	88 23       	and	r24, r24
    a114:	c9 f0       	breq	.+50     	; 0xa148 <Fuzzy+0x1de>
    a116:	20 e0       	ldi	r18, 0x00	; 0
    a118:	30 e0       	ldi	r19, 0x00	; 0
    a11a:	40 ea       	ldi	r20, 0xA0	; 160
    a11c:	51 e4       	ldi	r21, 0x41	; 65
    a11e:	c7 01       	movw	r24, r14
    a120:	b6 01       	movw	r22, r12
    a122:	34 d1       	rcall	.+616    	; 0xa38c <__subsf3>
    a124:	20 e0       	ldi	r18, 0x00	; 0
    a126:	30 e0       	ldi	r19, 0x00	; 0
    a128:	40 e2       	ldi	r20, 0x20	; 32
    a12a:	51 e4       	ldi	r21, 0x41	; 65
    a12c:	98 d1       	rcall	.+816    	; 0xa45e <__divsf3>
    a12e:	20 e0       	ldi	r18, 0x00	; 0
    a130:	30 e0       	ldi	r19, 0x00	; 0
    a132:	48 ec       	ldi	r20, 0xC8	; 200
    a134:	52 e4       	ldi	r21, 0x42	; 66
    a136:	27 d3       	rcall	.+1614   	; 0xa786 <__mulsf3>
    a138:	20 e0       	ldi	r18, 0x00	; 0
    a13a:	30 e0       	ldi	r19, 0x00	; 0
    a13c:	46 e1       	ldi	r20, 0x16	; 22
    a13e:	53 e4       	ldi	r21, 0x43	; 67
    a140:	26 d1       	rcall	.+588    	; 0xa38e <__addsf3>
    a142:	f5 d1       	rcall	.+1002   	; 0xa52e <__fixsfsi>
    a144:	7b 01       	movw	r14, r22
	else if(comp->Src_Out >20 && comp->Src_Out<=30 && comp->Cooling==1) {steps = (comp->Src_Out-20)/10 * 100 + 150;}	
    a146:	92 c0       	rjmp	.+292    	; 0xa26c <Fuzzy+0x302>
    a148:	20 e0       	ldi	r18, 0x00	; 0
    a14a:	30 e0       	ldi	r19, 0x00	; 0
    a14c:	40 ea       	ldi	r20, 0xA0	; 160
    a14e:	51 e4       	ldi	r21, 0x41	; 65
    a150:	c5 01       	movw	r24, r10
    a152:	b4 01       	movw	r22, r8
    a154:	cf d2       	rcall	.+1438   	; 0xa6f4 <__gesf2>
    a156:	18 16       	cp	r1, r24
    a158:	2c f5       	brge	.+74     	; 0xa1a4 <Fuzzy+0x23a>
    a15a:	20 e0       	ldi	r18, 0x00	; 0
    a15c:	30 e0       	ldi	r19, 0x00	; 0
    a15e:	40 ef       	ldi	r20, 0xF0	; 240
    a160:	51 e4       	ldi	r21, 0x41	; 65
    a162:	c5 01       	movw	r24, r10
    a164:	b4 01       	movw	r22, r8
    a166:	77 d1       	rcall	.+750    	; 0xa456 <__cmpsf2>
    a168:	18 16       	cp	r1, r24
    a16a:	e4 f0       	brlt	.+56     	; 0xa1a4 <Fuzzy+0x23a>
    a16c:	8b 81       	ldd	r24, Y+3	; 0x03
    a16e:	88 23       	and	r24, r24
    a170:	c9 f0       	breq	.+50     	; 0xa1a4 <Fuzzy+0x23a>
    a172:	20 e0       	ldi	r18, 0x00	; 0
    a174:	30 e0       	ldi	r19, 0x00	; 0
    a176:	40 ea       	ldi	r20, 0xA0	; 160
    a178:	51 e4       	ldi	r21, 0x41	; 65
    a17a:	c5 01       	movw	r24, r10
    a17c:	b4 01       	movw	r22, r8
    a17e:	06 d1       	rcall	.+524    	; 0xa38c <__subsf3>
    a180:	20 e0       	ldi	r18, 0x00	; 0
    a182:	30 e0       	ldi	r19, 0x00	; 0
    a184:	40 e2       	ldi	r20, 0x20	; 32
    a186:	51 e4       	ldi	r21, 0x41	; 65
    a188:	6a d1       	rcall	.+724    	; 0xa45e <__divsf3>
    a18a:	20 e0       	ldi	r18, 0x00	; 0
    a18c:	30 e0       	ldi	r19, 0x00	; 0
    a18e:	48 ec       	ldi	r20, 0xC8	; 200
    a190:	52 e4       	ldi	r21, 0x42	; 66
    a192:	f9 d2       	rcall	.+1522   	; 0xa786 <__mulsf3>
    a194:	20 e0       	ldi	r18, 0x00	; 0
    a196:	30 e0       	ldi	r19, 0x00	; 0
    a198:	46 e1       	ldi	r20, 0x16	; 22
    a19a:	53 e4       	ldi	r21, 0x43	; 67
    a19c:	f8 d0       	rcall	.+496    	; 0xa38e <__addsf3>
    a19e:	c7 d1       	rcall	.+910    	; 0xa52e <__fixsfsi>
		
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps);}// comp->trvCorection;
	else if(comp->Src_In>30 && comp->Src_In<=40 && comp->Heating==1)  {steps = (comp->Src_In-30)/10 * 100 + 200;}
    a1a0:	7b 01       	movw	r14, r22
    a1a2:	64 c0       	rjmp	.+200    	; 0xa26c <Fuzzy+0x302>
    a1a4:	20 e0       	ldi	r18, 0x00	; 0
    a1a6:	30 e0       	ldi	r19, 0x00	; 0
    a1a8:	40 ef       	ldi	r20, 0xF0	; 240
    a1aa:	51 e4       	ldi	r21, 0x41	; 65
    a1ac:	c7 01       	movw	r24, r14
    a1ae:	b6 01       	movw	r22, r12
    a1b0:	a1 d2       	rcall	.+1346   	; 0xa6f4 <__gesf2>
    a1b2:	18 16       	cp	r1, r24
    a1b4:	2c f5       	brge	.+74     	; 0xa200 <Fuzzy+0x296>
    a1b6:	20 e0       	ldi	r18, 0x00	; 0
    a1b8:	30 e0       	ldi	r19, 0x00	; 0
    a1ba:	40 e2       	ldi	r20, 0x20	; 32
    a1bc:	52 e4       	ldi	r21, 0x42	; 66
    a1be:	c7 01       	movw	r24, r14
    a1c0:	b6 01       	movw	r22, r12
    a1c2:	49 d1       	rcall	.+658    	; 0xa456 <__cmpsf2>
    a1c4:	18 16       	cp	r1, r24
    a1c6:	e4 f0       	brlt	.+56     	; 0xa200 <Fuzzy+0x296>
    a1c8:	8a 81       	ldd	r24, Y+2	; 0x02
    a1ca:	88 23       	and	r24, r24
    a1cc:	c9 f0       	breq	.+50     	; 0xa200 <Fuzzy+0x296>
    a1ce:	20 e0       	ldi	r18, 0x00	; 0
    a1d0:	30 e0       	ldi	r19, 0x00	; 0
    a1d2:	40 ef       	ldi	r20, 0xF0	; 240
    a1d4:	51 e4       	ldi	r21, 0x41	; 65
    a1d6:	c7 01       	movw	r24, r14
    a1d8:	b6 01       	movw	r22, r12
    a1da:	d8 d0       	rcall	.+432    	; 0xa38c <__subsf3>
    a1dc:	20 e0       	ldi	r18, 0x00	; 0
    a1de:	30 e0       	ldi	r19, 0x00	; 0
    a1e0:	40 e2       	ldi	r20, 0x20	; 32
    a1e2:	51 e4       	ldi	r21, 0x41	; 65
    a1e4:	3c d1       	rcall	.+632    	; 0xa45e <__divsf3>
    a1e6:	20 e0       	ldi	r18, 0x00	; 0
    a1e8:	30 e0       	ldi	r19, 0x00	; 0
    a1ea:	48 ec       	ldi	r20, 0xC8	; 200
    a1ec:	52 e4       	ldi	r21, 0x42	; 66
    a1ee:	cb d2       	rcall	.+1430   	; 0xa786 <__mulsf3>
    a1f0:	20 e0       	ldi	r18, 0x00	; 0
    a1f2:	30 e0       	ldi	r19, 0x00	; 0
    a1f4:	48 e4       	ldi	r20, 0x48	; 72
    a1f6:	53 e4       	ldi	r21, 0x43	; 67
    a1f8:	ca d0       	rcall	.+404    	; 0xa38e <__addsf3>
	else if(comp->Src_Out>30 && comp->Src_Out<=40 && comp->Cooling==1)  {steps = (comp->Src_Out-30)/10 * 100 + 200;}	
    a1fa:	99 d1       	rcall	.+818    	; 0xa52e <__fixsfsi>
    a1fc:	7b 01       	movw	r14, r22
    a1fe:	36 c0       	rjmp	.+108    	; 0xa26c <Fuzzy+0x302>
    a200:	20 e0       	ldi	r18, 0x00	; 0
    a202:	30 e0       	ldi	r19, 0x00	; 0
    a204:	40 ef       	ldi	r20, 0xF0	; 240
    a206:	51 e4       	ldi	r21, 0x41	; 65
    a208:	c5 01       	movw	r24, r10
    a20a:	b4 01       	movw	r22, r8
    a20c:	73 d2       	rcall	.+1254   	; 0xa6f4 <__gesf2>
    a20e:	18 16       	cp	r1, r24
    a210:	2c f5       	brge	.+74     	; 0xa25c <Fuzzy+0x2f2>
    a212:	20 e0       	ldi	r18, 0x00	; 0
    a214:	30 e0       	ldi	r19, 0x00	; 0
    a216:	40 e2       	ldi	r20, 0x20	; 32
    a218:	52 e4       	ldi	r21, 0x42	; 66
    a21a:	c5 01       	movw	r24, r10
    a21c:	b4 01       	movw	r22, r8
    a21e:	1b d1       	rcall	.+566    	; 0xa456 <__cmpsf2>
    a220:	18 16       	cp	r1, r24
    a222:	fc f0       	brlt	.+62     	; 0xa262 <Fuzzy+0x2f8>
    a224:	8b 81       	ldd	r24, Y+3	; 0x03
    a226:	88 23       	and	r24, r24
    a228:	f9 f0       	breq	.+62     	; 0xa268 <Fuzzy+0x2fe>
    a22a:	20 e0       	ldi	r18, 0x00	; 0
    a22c:	30 e0       	ldi	r19, 0x00	; 0
    a22e:	40 ef       	ldi	r20, 0xF0	; 240
    a230:	51 e4       	ldi	r21, 0x41	; 65
    a232:	c5 01       	movw	r24, r10
    a234:	b4 01       	movw	r22, r8
    a236:	aa d0       	rcall	.+340    	; 0xa38c <__subsf3>
    a238:	20 e0       	ldi	r18, 0x00	; 0
    a23a:	30 e0       	ldi	r19, 0x00	; 0
    a23c:	40 e2       	ldi	r20, 0x20	; 32
    a23e:	51 e4       	ldi	r21, 0x41	; 65
    a240:	0e d1       	rcall	.+540    	; 0xa45e <__divsf3>
    a242:	20 e0       	ldi	r18, 0x00	; 0
    a244:	30 e0       	ldi	r19, 0x00	; 0
    a246:	48 ec       	ldi	r20, 0xC8	; 200
    a248:	52 e4       	ldi	r21, 0x42	; 66
    a24a:	9d d2       	rcall	.+1338   	; 0xa786 <__mulsf3>
    a24c:	20 e0       	ldi	r18, 0x00	; 0
    a24e:	30 e0       	ldi	r19, 0x00	; 0
    a250:	48 e4       	ldi	r20, 0x48	; 72
    a252:	53 e4       	ldi	r21, 0x43	; 67
    a254:	9c d0       	rcall	.+312    	; 0xa38e <__addsf3>
    a256:	6b d1       	rcall	.+726    	; 0xa52e <__fixsfsi>
    a258:	7b 01       	movw	r14, r22
    a25a:	08 c0       	rjmp	.+16     	; 0xa26c <Fuzzy+0x302>
    a25c:	e1 2c       	mov	r14, r1
    a25e:	f1 2c       	mov	r15, r1
    a260:	05 c0       	rjmp	.+10     	; 0xa26c <Fuzzy+0x302>
	}
}
//----------------------------------------------------------------------------------------------------------
int Fuzzy(xCompressor *comp,int corection)
{
	int steps=0;
    a262:	e1 2c       	mov	r14, r1
    a264:	f1 2c       	mov	r15, r1
    a266:	02 c0       	rjmp	.+4      	; 0xa26c <Fuzzy+0x302>
    a268:	e1 2c       	mov	r14, r1
    a26a:	f1 2c       	mov	r15, r1
    a26c:	0e 19       	sub	r16, r14
    a26e:	1f 09       	sbc	r17, r15
    a270:	fe 01       	movw	r30, r28
		 //if(old_corection_2!=corection && comp->Index==2){comp->trvCorection=corection-steps;old_corection_2=corection;}
	//xSerialxPrintf(&xSerial3Port,"TRVcorection_%d = %d \r\n",comp->Index, corection);
			
	
	
	comp->trvCorection=corection-steps;
    a272:	e6 59       	subi	r30, 0x96	; 150
    a274:	ff 4f       	sbci	r31, 0xFF	; 255
    a276:	11 83       	std	Z+1, r17	; 0x01
    a278:	00 83       	st	Z, r16
    a27a:	38 96       	adiw	r30, 0x08	; 8
    a27c:	80 81       	ld	r24, Z
    a27e:	91 81       	ldd	r25, Z+1	; 0x01
	if(comp->Index==2)xSerialxPrintf(&xSerial3Port,"TRVcorection_2 = %d \r\n", comp->trvCorection);
    a280:	02 97       	sbiw	r24, 0x02	; 2
    a282:	91 f4       	brne	.+36     	; 0xa2a8 <Fuzzy+0x33e>
    a284:	1f 93       	push	r17
    a286:	0f 93       	push	r16
    a288:	8c e9       	ldi	r24, 0x9C	; 156
    a28a:	96 e0       	ldi	r25, 0x06	; 6
    a28c:	9f 93       	push	r25
    a28e:	8f 93       	push	r24
    a290:	86 e1       	ldi	r24, 0x16	; 22
    a292:	98 e0       	ldi	r25, 0x08	; 8
    a294:	9f 93       	push	r25
    a296:	8f 93       	push	r24
    a298:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a29c:	0f 90       	pop	r0
    a29e:	0f 90       	pop	r0
    a2a0:	0f 90       	pop	r0
    a2a2:	0f 90       	pop	r0
    a2a4:	0f 90       	pop	r0
    a2a6:	0f 90       	pop	r0
    a2a8:	fe 01       	movw	r30, r28
    a2aa:	ee 58       	subi	r30, 0x8E	; 142
    a2ac:	ff 4f       	sbci	r31, 0xFF	; 255
	if(comp->Index==1)xSerialxPrintf(&xSerial3Port,"TRVcorection_1 = %d \r\n", comp->trvCorection);
    a2ae:	80 81       	ld	r24, Z
    a2b0:	91 81       	ldd	r25, Z+1	; 0x01
    a2b2:	01 97       	sbiw	r24, 0x01	; 1
    a2b4:	a9 f4       	brne	.+42     	; 0xa2e0 <Fuzzy+0x376>
    a2b6:	38 97       	sbiw	r30, 0x08	; 8
    a2b8:	81 81       	ldd	r24, Z+1	; 0x01
    a2ba:	8f 93       	push	r24
    a2bc:	80 81       	ld	r24, Z
    a2be:	8f 93       	push	r24
    a2c0:	83 eb       	ldi	r24, 0xB3	; 179
    a2c2:	96 e0       	ldi	r25, 0x06	; 6
    a2c4:	9f 93       	push	r25
    a2c6:	8f 93       	push	r24
    a2c8:	86 e1       	ldi	r24, 0x16	; 22
    a2ca:	98 e0       	ldi	r25, 0x08	; 8
    a2cc:	9f 93       	push	r25
    a2ce:	8f 93       	push	r24
    a2d0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a2d4:	0f 90       	pop	r0
    a2d6:	0f 90       	pop	r0
    a2d8:	0f 90       	pop	r0
    a2da:	0f 90       	pop	r0
    a2dc:	0f 90       	pop	r0
    a2de:	0f 90       	pop	r0
    a2e0:	fe 01       	movw	r30, r28
    a2e2:	e6 59       	subi	r30, 0x96	; 150
    a2e4:	ff 4f       	sbci	r31, 0xFF	; 255
	steps=steps+comp->trvCorection;
    a2e6:	60 81       	ld	r22, Z
    a2e8:	71 81       	ldd	r23, Z+1	; 0x01
    a2ea:	e6 0e       	add	r14, r22
    a2ec:	f7 1e       	adc	r15, r23
    a2ee:	8e 01       	movw	r16, r28
    a2f0:	02 59       	subi	r16, 0x92	; 146
    a2f2:	1f 4f       	sbci	r17, 0xFF	; 255
	comp->Steps=comp->Trv_position;		
    a2f4:	f8 01       	movw	r30, r16
    a2f6:	80 81       	ld	r24, Z
    a2f8:	91 81       	ldd	r25, Z+1	; 0x01
    a2fa:	c4 59       	subi	r28, 0x94	; 148
    a2fc:	df 4f       	sbci	r29, 0xFF	; 255
    a2fe:	88 83       	st	Y, r24
    a300:	99 83       	std	Y+1, r25	; 0x01
    a302:	9f 93       	push	r25
    a304:	8f 93       	push	r24
    a306:	8a ec       	ldi	r24, 0xCA	; 202
	//comp->Steps=steps - comp->Trv_position;
xSerialxPrintf(&xSerial3Port,"Steps = %d \r\n", comp->Steps);
    a308:	96 e0       	ldi	r25, 0x06	; 6
    a30a:	9f 93       	push	r25
    a30c:	8f 93       	push	r24
    a30e:	c6 e1       	ldi	r28, 0x16	; 22
    a310:	d8 e0       	ldi	r29, 0x08	; 8
    a312:	df 93       	push	r29
    a314:	cf 93       	push	r28
    a316:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a31a:	f8 01       	movw	r30, r16
    a31c:	81 81       	ldd	r24, Z+1	; 0x01
    a31e:	8f 93       	push	r24
xSerialxPrintf(&xSerial3Port,"Trv_position = %d \r\n", comp->Trv_position);	
    a320:	80 81       	ld	r24, Z
    a322:	8f 93       	push	r24
    a324:	88 ed       	ldi	r24, 0xD8	; 216
    a326:	96 e0       	ldi	r25, 0x06	; 6
    a328:	9f 93       	push	r25
    a32a:	8f 93       	push	r24
    a32c:	df 93       	push	r29
    a32e:	cf 93       	push	r28
    a330:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a334:	f8 01       	movw	r30, r16
    a336:	80 81       	ld	r24, Z
    a338:	91 81       	ldd	r25, Z+1	; 0x01
return (steps - comp->Trv_position);//comp->Steps;
    a33a:	2d b7       	in	r18, 0x3d	; 61
    a33c:	3e b7       	in	r19, 0x3e	; 62
    a33e:	24 5f       	subi	r18, 0xF4	; 244
    a340:	3f 4f       	sbci	r19, 0xFF	; 255
    a342:	0f b6       	in	r0, 0x3f	; 63
    a344:	f8 94       	cli
    a346:	3e bf       	out	0x3e, r19	; 62
    a348:	0f be       	out	0x3f, r0	; 63
    a34a:	2d bf       	out	0x3d, r18	; 61
    a34c:	f7 01       	movw	r30, r14
    a34e:	e8 1b       	sub	r30, r24
    a350:	f9 0b       	sbc	r31, r25
}
    a352:	cf 01       	movw	r24, r30
    a354:	df 91       	pop	r29
    a356:	cf 91       	pop	r28
    a358:	1f 91       	pop	r17
    a35a:	0f 91       	pop	r16
    a35c:	ff 90       	pop	r15
    a35e:	ef 90       	pop	r14
    a360:	df 90       	pop	r13
    a362:	cf 90       	pop	r12
    a364:	bf 90       	pop	r11
    a366:	af 90       	pop	r10
    a368:	9f 90       	pop	r9
    a36a:	8f 90       	pop	r8
    a36c:	08 95       	ret

0000a36e <calibration>:
    a36e:	21 e0       	ldi	r18, 0x01	; 1
    a370:	fc 01       	movw	r30, r24
    a372:	27 83       	std	Z+7, r18	; 0x07
////////////////////////////////////////////////////////////////////////////////////////////////////////
void calibration(xCompressor *comp)
{
	comp->calibrate=true;
	comp->Steps=-240;
    a374:	e4 59       	subi	r30, 0x94	; 148
    a376:	ff 4f       	sbci	r31, 0xFF	; 255
    a378:	20 e1       	ldi	r18, 0x10	; 16
    a37a:	3f ef       	ldi	r19, 0xFF	; 255
    a37c:	31 83       	std	Z+1, r19	; 0x01
    a37e:	20 83       	st	Z, r18
	comp->Trv_position=240;
    a380:	32 96       	adiw	r30, 0x02	; 2
    a382:	20 ef       	ldi	r18, 0xF0	; 240
    a384:	30 e0       	ldi	r19, 0x00	; 0
    a386:	31 83       	std	Z+1, r19	; 0x01
    a388:	20 83       	st	Z, r18
    a38a:	08 95       	ret

0000a38c <__subsf3>:
    a38c:	50 58       	subi	r21, 0x80	; 128

0000a38e <__addsf3>:
    a38e:	bb 27       	eor	r27, r27
    a390:	aa 27       	eor	r26, r26
    a392:	0e d0       	rcall	.+28     	; 0xa3b0 <__addsf3x>
    a394:	75 c1       	rjmp	.+746    	; 0xa680 <__fp_round>
    a396:	66 d1       	rcall	.+716    	; 0xa664 <__fp_pscA>
    a398:	30 f0       	brcs	.+12     	; 0xa3a6 <__addsf3+0x18>
    a39a:	6b d1       	rcall	.+726    	; 0xa672 <__fp_pscB>
    a39c:	20 f0       	brcs	.+8      	; 0xa3a6 <__addsf3+0x18>
    a39e:	31 f4       	brne	.+12     	; 0xa3ac <__addsf3+0x1e>
    a3a0:	9f 3f       	cpi	r25, 0xFF	; 255
    a3a2:	11 f4       	brne	.+4      	; 0xa3a8 <__addsf3+0x1a>
    a3a4:	1e f4       	brtc	.+6      	; 0xa3ac <__addsf3+0x1e>
    a3a6:	5b c1       	rjmp	.+694    	; 0xa65e <__fp_nan>
    a3a8:	0e f4       	brtc	.+2      	; 0xa3ac <__addsf3+0x1e>
    a3aa:	e0 95       	com	r30
    a3ac:	e7 fb       	bst	r30, 7
    a3ae:	51 c1       	rjmp	.+674    	; 0xa652 <__fp_inf>

0000a3b0 <__addsf3x>:
    a3b0:	e9 2f       	mov	r30, r25
    a3b2:	77 d1       	rcall	.+750    	; 0xa6a2 <__fp_split3>
    a3b4:	80 f3       	brcs	.-32     	; 0xa396 <__addsf3+0x8>
    a3b6:	ba 17       	cp	r27, r26
    a3b8:	62 07       	cpc	r22, r18
    a3ba:	73 07       	cpc	r23, r19
    a3bc:	84 07       	cpc	r24, r20
    a3be:	95 07       	cpc	r25, r21
    a3c0:	18 f0       	brcs	.+6      	; 0xa3c8 <__addsf3x+0x18>
    a3c2:	71 f4       	brne	.+28     	; 0xa3e0 <__addsf3x+0x30>
    a3c4:	9e f5       	brtc	.+102    	; 0xa42c <__addsf3x+0x7c>
    a3c6:	8f c1       	rjmp	.+798    	; 0xa6e6 <__fp_zero>
    a3c8:	0e f4       	brtc	.+2      	; 0xa3cc <__addsf3x+0x1c>
    a3ca:	e0 95       	com	r30
    a3cc:	0b 2e       	mov	r0, r27
    a3ce:	ba 2f       	mov	r27, r26
    a3d0:	a0 2d       	mov	r26, r0
    a3d2:	0b 01       	movw	r0, r22
    a3d4:	b9 01       	movw	r22, r18
    a3d6:	90 01       	movw	r18, r0
    a3d8:	0c 01       	movw	r0, r24
    a3da:	ca 01       	movw	r24, r20
    a3dc:	a0 01       	movw	r20, r0
    a3de:	11 24       	eor	r1, r1
    a3e0:	ff 27       	eor	r31, r31
    a3e2:	59 1b       	sub	r21, r25
    a3e4:	99 f0       	breq	.+38     	; 0xa40c <__addsf3x+0x5c>
    a3e6:	59 3f       	cpi	r21, 0xF9	; 249
    a3e8:	50 f4       	brcc	.+20     	; 0xa3fe <__addsf3x+0x4e>
    a3ea:	50 3e       	cpi	r21, 0xE0	; 224
    a3ec:	68 f1       	brcs	.+90     	; 0xa448 <__addsf3x+0x98>
    a3ee:	1a 16       	cp	r1, r26
    a3f0:	f0 40       	sbci	r31, 0x00	; 0
    a3f2:	a2 2f       	mov	r26, r18
    a3f4:	23 2f       	mov	r18, r19
    a3f6:	34 2f       	mov	r19, r20
    a3f8:	44 27       	eor	r20, r20
    a3fa:	58 5f       	subi	r21, 0xF8	; 248
    a3fc:	f3 cf       	rjmp	.-26     	; 0xa3e4 <__addsf3x+0x34>
    a3fe:	46 95       	lsr	r20
    a400:	37 95       	ror	r19
    a402:	27 95       	ror	r18
    a404:	a7 95       	ror	r26
    a406:	f0 40       	sbci	r31, 0x00	; 0
    a408:	53 95       	inc	r21
    a40a:	c9 f7       	brne	.-14     	; 0xa3fe <__addsf3x+0x4e>
    a40c:	7e f4       	brtc	.+30     	; 0xa42c <__addsf3x+0x7c>
    a40e:	1f 16       	cp	r1, r31
    a410:	ba 0b       	sbc	r27, r26
    a412:	62 0b       	sbc	r22, r18
    a414:	73 0b       	sbc	r23, r19
    a416:	84 0b       	sbc	r24, r20
    a418:	ba f0       	brmi	.+46     	; 0xa448 <__addsf3x+0x98>
    a41a:	91 50       	subi	r25, 0x01	; 1
    a41c:	a1 f0       	breq	.+40     	; 0xa446 <__addsf3x+0x96>
    a41e:	ff 0f       	add	r31, r31
    a420:	bb 1f       	adc	r27, r27
    a422:	66 1f       	adc	r22, r22
    a424:	77 1f       	adc	r23, r23
    a426:	88 1f       	adc	r24, r24
    a428:	c2 f7       	brpl	.-16     	; 0xa41a <__addsf3x+0x6a>
    a42a:	0e c0       	rjmp	.+28     	; 0xa448 <__addsf3x+0x98>
    a42c:	ba 0f       	add	r27, r26
    a42e:	62 1f       	adc	r22, r18
    a430:	73 1f       	adc	r23, r19
    a432:	84 1f       	adc	r24, r20
    a434:	48 f4       	brcc	.+18     	; 0xa448 <__addsf3x+0x98>
    a436:	87 95       	ror	r24
    a438:	77 95       	ror	r23
    a43a:	67 95       	ror	r22
    a43c:	b7 95       	ror	r27
    a43e:	f7 95       	ror	r31
    a440:	9e 3f       	cpi	r25, 0xFE	; 254
    a442:	08 f0       	brcs	.+2      	; 0xa446 <__addsf3x+0x96>
    a444:	b3 cf       	rjmp	.-154    	; 0xa3ac <__addsf3+0x1e>
    a446:	93 95       	inc	r25
    a448:	88 0f       	add	r24, r24
    a44a:	08 f0       	brcs	.+2      	; 0xa44e <__addsf3x+0x9e>
    a44c:	99 27       	eor	r25, r25
    a44e:	ee 0f       	add	r30, r30
    a450:	97 95       	ror	r25
    a452:	87 95       	ror	r24
    a454:	08 95       	ret

0000a456 <__cmpsf2>:
    a456:	d9 d0       	rcall	.+434    	; 0xa60a <__fp_cmp>
    a458:	08 f4       	brcc	.+2      	; 0xa45c <__cmpsf2+0x6>
    a45a:	81 e0       	ldi	r24, 0x01	; 1
    a45c:	08 95       	ret

0000a45e <__divsf3>:
    a45e:	0c d0       	rcall	.+24     	; 0xa478 <__divsf3x>
    a460:	0f c1       	rjmp	.+542    	; 0xa680 <__fp_round>
    a462:	07 d1       	rcall	.+526    	; 0xa672 <__fp_pscB>
    a464:	40 f0       	brcs	.+16     	; 0xa476 <__divsf3+0x18>
    a466:	fe d0       	rcall	.+508    	; 0xa664 <__fp_pscA>
    a468:	30 f0       	brcs	.+12     	; 0xa476 <__divsf3+0x18>
    a46a:	21 f4       	brne	.+8      	; 0xa474 <__divsf3+0x16>
    a46c:	5f 3f       	cpi	r21, 0xFF	; 255
    a46e:	19 f0       	breq	.+6      	; 0xa476 <__divsf3+0x18>
    a470:	f0 c0       	rjmp	.+480    	; 0xa652 <__fp_inf>
    a472:	51 11       	cpse	r21, r1
    a474:	39 c1       	rjmp	.+626    	; 0xa6e8 <__fp_szero>
    a476:	f3 c0       	rjmp	.+486    	; 0xa65e <__fp_nan>

0000a478 <__divsf3x>:
    a478:	14 d1       	rcall	.+552    	; 0xa6a2 <__fp_split3>
    a47a:	98 f3       	brcs	.-26     	; 0xa462 <__divsf3+0x4>

0000a47c <__divsf3_pse>:
    a47c:	99 23       	and	r25, r25
    a47e:	c9 f3       	breq	.-14     	; 0xa472 <__divsf3+0x14>
    a480:	55 23       	and	r21, r21
    a482:	b1 f3       	breq	.-20     	; 0xa470 <__divsf3+0x12>
    a484:	95 1b       	sub	r25, r21
    a486:	55 0b       	sbc	r21, r21
    a488:	bb 27       	eor	r27, r27
    a48a:	aa 27       	eor	r26, r26
    a48c:	62 17       	cp	r22, r18
    a48e:	73 07       	cpc	r23, r19
    a490:	84 07       	cpc	r24, r20
    a492:	38 f0       	brcs	.+14     	; 0xa4a2 <__divsf3_pse+0x26>
    a494:	9f 5f       	subi	r25, 0xFF	; 255
    a496:	5f 4f       	sbci	r21, 0xFF	; 255
    a498:	22 0f       	add	r18, r18
    a49a:	33 1f       	adc	r19, r19
    a49c:	44 1f       	adc	r20, r20
    a49e:	aa 1f       	adc	r26, r26
    a4a0:	a9 f3       	breq	.-22     	; 0xa48c <__divsf3_pse+0x10>
    a4a2:	33 d0       	rcall	.+102    	; 0xa50a <__divsf3_pse+0x8e>
    a4a4:	0e 2e       	mov	r0, r30
    a4a6:	3a f0       	brmi	.+14     	; 0xa4b6 <__divsf3_pse+0x3a>
    a4a8:	e0 e8       	ldi	r30, 0x80	; 128
    a4aa:	30 d0       	rcall	.+96     	; 0xa50c <__divsf3_pse+0x90>
    a4ac:	91 50       	subi	r25, 0x01	; 1
    a4ae:	50 40       	sbci	r21, 0x00	; 0
    a4b0:	e6 95       	lsr	r30
    a4b2:	00 1c       	adc	r0, r0
    a4b4:	ca f7       	brpl	.-14     	; 0xa4a8 <__divsf3_pse+0x2c>
    a4b6:	29 d0       	rcall	.+82     	; 0xa50a <__divsf3_pse+0x8e>
    a4b8:	fe 2f       	mov	r31, r30
    a4ba:	27 d0       	rcall	.+78     	; 0xa50a <__divsf3_pse+0x8e>
    a4bc:	66 0f       	add	r22, r22
    a4be:	77 1f       	adc	r23, r23
    a4c0:	88 1f       	adc	r24, r24
    a4c2:	bb 1f       	adc	r27, r27
    a4c4:	26 17       	cp	r18, r22
    a4c6:	37 07       	cpc	r19, r23
    a4c8:	48 07       	cpc	r20, r24
    a4ca:	ab 07       	cpc	r26, r27
    a4cc:	b0 e8       	ldi	r27, 0x80	; 128
    a4ce:	09 f0       	breq	.+2      	; 0xa4d2 <__divsf3_pse+0x56>
    a4d0:	bb 0b       	sbc	r27, r27
    a4d2:	80 2d       	mov	r24, r0
    a4d4:	bf 01       	movw	r22, r30
    a4d6:	ff 27       	eor	r31, r31
    a4d8:	93 58       	subi	r25, 0x83	; 131
    a4da:	5f 4f       	sbci	r21, 0xFF	; 255
    a4dc:	2a f0       	brmi	.+10     	; 0xa4e8 <__divsf3_pse+0x6c>
    a4de:	9e 3f       	cpi	r25, 0xFE	; 254
    a4e0:	51 05       	cpc	r21, r1
    a4e2:	68 f0       	brcs	.+26     	; 0xa4fe <__divsf3_pse+0x82>
    a4e4:	b6 c0       	rjmp	.+364    	; 0xa652 <__fp_inf>
    a4e6:	00 c1       	rjmp	.+512    	; 0xa6e8 <__fp_szero>
    a4e8:	5f 3f       	cpi	r21, 0xFF	; 255
    a4ea:	ec f3       	brlt	.-6      	; 0xa4e6 <__divsf3_pse+0x6a>
    a4ec:	98 3e       	cpi	r25, 0xE8	; 232
    a4ee:	dc f3       	brlt	.-10     	; 0xa4e6 <__divsf3_pse+0x6a>
    a4f0:	86 95       	lsr	r24
    a4f2:	77 95       	ror	r23
    a4f4:	67 95       	ror	r22
    a4f6:	b7 95       	ror	r27
    a4f8:	f7 95       	ror	r31
    a4fa:	9f 5f       	subi	r25, 0xFF	; 255
    a4fc:	c9 f7       	brne	.-14     	; 0xa4f0 <__divsf3_pse+0x74>
    a4fe:	88 0f       	add	r24, r24
    a500:	91 1d       	adc	r25, r1
    a502:	96 95       	lsr	r25
    a504:	87 95       	ror	r24
    a506:	97 f9       	bld	r25, 7
    a508:	08 95       	ret
    a50a:	e1 e0       	ldi	r30, 0x01	; 1
    a50c:	66 0f       	add	r22, r22
    a50e:	77 1f       	adc	r23, r23
    a510:	88 1f       	adc	r24, r24
    a512:	bb 1f       	adc	r27, r27
    a514:	62 17       	cp	r22, r18
    a516:	73 07       	cpc	r23, r19
    a518:	84 07       	cpc	r24, r20
    a51a:	ba 07       	cpc	r27, r26
    a51c:	20 f0       	brcs	.+8      	; 0xa526 <__divsf3_pse+0xaa>
    a51e:	62 1b       	sub	r22, r18
    a520:	73 0b       	sbc	r23, r19
    a522:	84 0b       	sbc	r24, r20
    a524:	ba 0b       	sbc	r27, r26
    a526:	ee 1f       	adc	r30, r30
    a528:	88 f7       	brcc	.-30     	; 0xa50c <__divsf3_pse+0x90>
    a52a:	e0 95       	com	r30
    a52c:	08 95       	ret

0000a52e <__fixsfsi>:
    a52e:	04 d0       	rcall	.+8      	; 0xa538 <__fixunssfsi>
    a530:	68 94       	set
    a532:	b1 11       	cpse	r27, r1
    a534:	d9 c0       	rjmp	.+434    	; 0xa6e8 <__fp_szero>
    a536:	08 95       	ret

0000a538 <__fixunssfsi>:
    a538:	bc d0       	rcall	.+376    	; 0xa6b2 <__fp_splitA>
    a53a:	88 f0       	brcs	.+34     	; 0xa55e <__fixunssfsi+0x26>
    a53c:	9f 57       	subi	r25, 0x7F	; 127
    a53e:	90 f0       	brcs	.+36     	; 0xa564 <__fixunssfsi+0x2c>
    a540:	b9 2f       	mov	r27, r25
    a542:	99 27       	eor	r25, r25
    a544:	b7 51       	subi	r27, 0x17	; 23
    a546:	a0 f0       	brcs	.+40     	; 0xa570 <__fixunssfsi+0x38>
    a548:	d1 f0       	breq	.+52     	; 0xa57e <__fixunssfsi+0x46>
    a54a:	66 0f       	add	r22, r22
    a54c:	77 1f       	adc	r23, r23
    a54e:	88 1f       	adc	r24, r24
    a550:	99 1f       	adc	r25, r25
    a552:	1a f0       	brmi	.+6      	; 0xa55a <__fixunssfsi+0x22>
    a554:	ba 95       	dec	r27
    a556:	c9 f7       	brne	.-14     	; 0xa54a <__fixunssfsi+0x12>
    a558:	12 c0       	rjmp	.+36     	; 0xa57e <__fixunssfsi+0x46>
    a55a:	b1 30       	cpi	r27, 0x01	; 1
    a55c:	81 f0       	breq	.+32     	; 0xa57e <__fixunssfsi+0x46>
    a55e:	c3 d0       	rcall	.+390    	; 0xa6e6 <__fp_zero>
    a560:	b1 e0       	ldi	r27, 0x01	; 1
    a562:	08 95       	ret
    a564:	c0 c0       	rjmp	.+384    	; 0xa6e6 <__fp_zero>
    a566:	67 2f       	mov	r22, r23
    a568:	78 2f       	mov	r23, r24
    a56a:	88 27       	eor	r24, r24
    a56c:	b8 5f       	subi	r27, 0xF8	; 248
    a56e:	39 f0       	breq	.+14     	; 0xa57e <__fixunssfsi+0x46>
    a570:	b9 3f       	cpi	r27, 0xF9	; 249
    a572:	cc f3       	brlt	.-14     	; 0xa566 <__fixunssfsi+0x2e>
    a574:	86 95       	lsr	r24
    a576:	77 95       	ror	r23
    a578:	67 95       	ror	r22
    a57a:	b3 95       	inc	r27
    a57c:	d9 f7       	brne	.-10     	; 0xa574 <__fixunssfsi+0x3c>
    a57e:	3e f4       	brtc	.+14     	; 0xa58e <__fixunssfsi+0x56>
    a580:	90 95       	com	r25
    a582:	80 95       	com	r24
    a584:	70 95       	com	r23
    a586:	61 95       	neg	r22
    a588:	7f 4f       	sbci	r23, 0xFF	; 255
    a58a:	8f 4f       	sbci	r24, 0xFF	; 255
    a58c:	9f 4f       	sbci	r25, 0xFF	; 255
    a58e:	08 95       	ret

0000a590 <__floatunsisf>:
    a590:	e8 94       	clt
    a592:	09 c0       	rjmp	.+18     	; 0xa5a6 <__floatsisf+0x12>

0000a594 <__floatsisf>:
    a594:	97 fb       	bst	r25, 7
    a596:	3e f4       	brtc	.+14     	; 0xa5a6 <__floatsisf+0x12>
    a598:	90 95       	com	r25
    a59a:	80 95       	com	r24
    a59c:	70 95       	com	r23
    a59e:	61 95       	neg	r22
    a5a0:	7f 4f       	sbci	r23, 0xFF	; 255
    a5a2:	8f 4f       	sbci	r24, 0xFF	; 255
    a5a4:	9f 4f       	sbci	r25, 0xFF	; 255
    a5a6:	99 23       	and	r25, r25
    a5a8:	a9 f0       	breq	.+42     	; 0xa5d4 <__floatsisf+0x40>
    a5aa:	f9 2f       	mov	r31, r25
    a5ac:	96 e9       	ldi	r25, 0x96	; 150
    a5ae:	bb 27       	eor	r27, r27
    a5b0:	93 95       	inc	r25
    a5b2:	f6 95       	lsr	r31
    a5b4:	87 95       	ror	r24
    a5b6:	77 95       	ror	r23
    a5b8:	67 95       	ror	r22
    a5ba:	b7 95       	ror	r27
    a5bc:	f1 11       	cpse	r31, r1
    a5be:	f8 cf       	rjmp	.-16     	; 0xa5b0 <__floatsisf+0x1c>
    a5c0:	fa f4       	brpl	.+62     	; 0xa600 <__floatsisf+0x6c>
    a5c2:	bb 0f       	add	r27, r27
    a5c4:	11 f4       	brne	.+4      	; 0xa5ca <__floatsisf+0x36>
    a5c6:	60 ff       	sbrs	r22, 0
    a5c8:	1b c0       	rjmp	.+54     	; 0xa600 <__floatsisf+0x6c>
    a5ca:	6f 5f       	subi	r22, 0xFF	; 255
    a5cc:	7f 4f       	sbci	r23, 0xFF	; 255
    a5ce:	8f 4f       	sbci	r24, 0xFF	; 255
    a5d0:	9f 4f       	sbci	r25, 0xFF	; 255
    a5d2:	16 c0       	rjmp	.+44     	; 0xa600 <__floatsisf+0x6c>
    a5d4:	88 23       	and	r24, r24
    a5d6:	11 f0       	breq	.+4      	; 0xa5dc <__floatsisf+0x48>
    a5d8:	96 e9       	ldi	r25, 0x96	; 150
    a5da:	11 c0       	rjmp	.+34     	; 0xa5fe <__floatsisf+0x6a>
    a5dc:	77 23       	and	r23, r23
    a5de:	21 f0       	breq	.+8      	; 0xa5e8 <__floatsisf+0x54>
    a5e0:	9e e8       	ldi	r25, 0x8E	; 142
    a5e2:	87 2f       	mov	r24, r23
    a5e4:	76 2f       	mov	r23, r22
    a5e6:	05 c0       	rjmp	.+10     	; 0xa5f2 <__floatsisf+0x5e>
    a5e8:	66 23       	and	r22, r22
    a5ea:	71 f0       	breq	.+28     	; 0xa608 <__floatsisf+0x74>
    a5ec:	96 e8       	ldi	r25, 0x86	; 134
    a5ee:	86 2f       	mov	r24, r22
    a5f0:	70 e0       	ldi	r23, 0x00	; 0
    a5f2:	60 e0       	ldi	r22, 0x00	; 0
    a5f4:	2a f0       	brmi	.+10     	; 0xa600 <__floatsisf+0x6c>
    a5f6:	9a 95       	dec	r25
    a5f8:	66 0f       	add	r22, r22
    a5fa:	77 1f       	adc	r23, r23
    a5fc:	88 1f       	adc	r24, r24
    a5fe:	da f7       	brpl	.-10     	; 0xa5f6 <__floatsisf+0x62>
    a600:	88 0f       	add	r24, r24
    a602:	96 95       	lsr	r25
    a604:	87 95       	ror	r24
    a606:	97 f9       	bld	r25, 7
    a608:	08 95       	ret

0000a60a <__fp_cmp>:
    a60a:	99 0f       	add	r25, r25
    a60c:	00 08       	sbc	r0, r0
    a60e:	55 0f       	add	r21, r21
    a610:	aa 0b       	sbc	r26, r26
    a612:	e0 e8       	ldi	r30, 0x80	; 128
    a614:	fe ef       	ldi	r31, 0xFE	; 254
    a616:	16 16       	cp	r1, r22
    a618:	17 06       	cpc	r1, r23
    a61a:	e8 07       	cpc	r30, r24
    a61c:	f9 07       	cpc	r31, r25
    a61e:	c0 f0       	brcs	.+48     	; 0xa650 <__fp_cmp+0x46>
    a620:	12 16       	cp	r1, r18
    a622:	13 06       	cpc	r1, r19
    a624:	e4 07       	cpc	r30, r20
    a626:	f5 07       	cpc	r31, r21
    a628:	98 f0       	brcs	.+38     	; 0xa650 <__fp_cmp+0x46>
    a62a:	62 1b       	sub	r22, r18
    a62c:	73 0b       	sbc	r23, r19
    a62e:	84 0b       	sbc	r24, r20
    a630:	95 0b       	sbc	r25, r21
    a632:	39 f4       	brne	.+14     	; 0xa642 <__fp_cmp+0x38>
    a634:	0a 26       	eor	r0, r26
    a636:	61 f0       	breq	.+24     	; 0xa650 <__fp_cmp+0x46>
    a638:	23 2b       	or	r18, r19
    a63a:	24 2b       	or	r18, r20
    a63c:	25 2b       	or	r18, r21
    a63e:	21 f4       	brne	.+8      	; 0xa648 <__fp_cmp+0x3e>
    a640:	08 95       	ret
    a642:	0a 26       	eor	r0, r26
    a644:	09 f4       	brne	.+2      	; 0xa648 <__fp_cmp+0x3e>
    a646:	a1 40       	sbci	r26, 0x01	; 1
    a648:	a6 95       	lsr	r26
    a64a:	8f ef       	ldi	r24, 0xFF	; 255
    a64c:	81 1d       	adc	r24, r1
    a64e:	81 1d       	adc	r24, r1
    a650:	08 95       	ret

0000a652 <__fp_inf>:
    a652:	97 f9       	bld	r25, 7
    a654:	9f 67       	ori	r25, 0x7F	; 127
    a656:	80 e8       	ldi	r24, 0x80	; 128
    a658:	70 e0       	ldi	r23, 0x00	; 0
    a65a:	60 e0       	ldi	r22, 0x00	; 0
    a65c:	08 95       	ret

0000a65e <__fp_nan>:
    a65e:	9f ef       	ldi	r25, 0xFF	; 255
    a660:	80 ec       	ldi	r24, 0xC0	; 192
    a662:	08 95       	ret

0000a664 <__fp_pscA>:
    a664:	00 24       	eor	r0, r0
    a666:	0a 94       	dec	r0
    a668:	16 16       	cp	r1, r22
    a66a:	17 06       	cpc	r1, r23
    a66c:	18 06       	cpc	r1, r24
    a66e:	09 06       	cpc	r0, r25
    a670:	08 95       	ret

0000a672 <__fp_pscB>:
    a672:	00 24       	eor	r0, r0
    a674:	0a 94       	dec	r0
    a676:	12 16       	cp	r1, r18
    a678:	13 06       	cpc	r1, r19
    a67a:	14 06       	cpc	r1, r20
    a67c:	05 06       	cpc	r0, r21
    a67e:	08 95       	ret

0000a680 <__fp_round>:
    a680:	09 2e       	mov	r0, r25
    a682:	03 94       	inc	r0
    a684:	00 0c       	add	r0, r0
    a686:	11 f4       	brne	.+4      	; 0xa68c <__fp_round+0xc>
    a688:	88 23       	and	r24, r24
    a68a:	52 f0       	brmi	.+20     	; 0xa6a0 <__fp_round+0x20>
    a68c:	bb 0f       	add	r27, r27
    a68e:	40 f4       	brcc	.+16     	; 0xa6a0 <__fp_round+0x20>
    a690:	bf 2b       	or	r27, r31
    a692:	11 f4       	brne	.+4      	; 0xa698 <__fp_round+0x18>
    a694:	60 ff       	sbrs	r22, 0
    a696:	04 c0       	rjmp	.+8      	; 0xa6a0 <__fp_round+0x20>
    a698:	6f 5f       	subi	r22, 0xFF	; 255
    a69a:	7f 4f       	sbci	r23, 0xFF	; 255
    a69c:	8f 4f       	sbci	r24, 0xFF	; 255
    a69e:	9f 4f       	sbci	r25, 0xFF	; 255
    a6a0:	08 95       	ret

0000a6a2 <__fp_split3>:
    a6a2:	57 fd       	sbrc	r21, 7
    a6a4:	90 58       	subi	r25, 0x80	; 128
    a6a6:	44 0f       	add	r20, r20
    a6a8:	55 1f       	adc	r21, r21
    a6aa:	59 f0       	breq	.+22     	; 0xa6c2 <__fp_splitA+0x10>
    a6ac:	5f 3f       	cpi	r21, 0xFF	; 255
    a6ae:	71 f0       	breq	.+28     	; 0xa6cc <__fp_splitA+0x1a>
    a6b0:	47 95       	ror	r20

0000a6b2 <__fp_splitA>:
    a6b2:	88 0f       	add	r24, r24
    a6b4:	97 fb       	bst	r25, 7
    a6b6:	99 1f       	adc	r25, r25
    a6b8:	61 f0       	breq	.+24     	; 0xa6d2 <__fp_splitA+0x20>
    a6ba:	9f 3f       	cpi	r25, 0xFF	; 255
    a6bc:	79 f0       	breq	.+30     	; 0xa6dc <__fp_splitA+0x2a>
    a6be:	87 95       	ror	r24
    a6c0:	08 95       	ret
    a6c2:	12 16       	cp	r1, r18
    a6c4:	13 06       	cpc	r1, r19
    a6c6:	14 06       	cpc	r1, r20
    a6c8:	55 1f       	adc	r21, r21
    a6ca:	f2 cf       	rjmp	.-28     	; 0xa6b0 <__fp_split3+0xe>
    a6cc:	46 95       	lsr	r20
    a6ce:	f1 df       	rcall	.-30     	; 0xa6b2 <__fp_splitA>
    a6d0:	08 c0       	rjmp	.+16     	; 0xa6e2 <__fp_splitA+0x30>
    a6d2:	16 16       	cp	r1, r22
    a6d4:	17 06       	cpc	r1, r23
    a6d6:	18 06       	cpc	r1, r24
    a6d8:	99 1f       	adc	r25, r25
    a6da:	f1 cf       	rjmp	.-30     	; 0xa6be <__fp_splitA+0xc>
    a6dc:	86 95       	lsr	r24
    a6de:	71 05       	cpc	r23, r1
    a6e0:	61 05       	cpc	r22, r1
    a6e2:	08 94       	sec
    a6e4:	08 95       	ret

0000a6e6 <__fp_zero>:
    a6e6:	e8 94       	clt

0000a6e8 <__fp_szero>:
    a6e8:	bb 27       	eor	r27, r27
    a6ea:	66 27       	eor	r22, r22
    a6ec:	77 27       	eor	r23, r23
    a6ee:	cb 01       	movw	r24, r22
    a6f0:	97 f9       	bld	r25, 7
    a6f2:	08 95       	ret

0000a6f4 <__gesf2>:
    a6f4:	8a df       	rcall	.-236    	; 0xa60a <__fp_cmp>
    a6f6:	08 f4       	brcc	.+2      	; 0xa6fa <__gesf2+0x6>
    a6f8:	8f ef       	ldi	r24, 0xFF	; 255
    a6fa:	08 95       	ret
    a6fc:	0e f0       	brts	.+2      	; 0xa700 <__gesf2+0xc>
    a6fe:	a6 c0       	rjmp	.+332    	; 0xa84c <__fp_mpack>
    a700:	ae cf       	rjmp	.-164    	; 0xa65e <__fp_nan>
    a702:	68 94       	set
    a704:	a6 cf       	rjmp	.-180    	; 0xa652 <__fp_inf>

0000a706 <log>:
    a706:	d5 df       	rcall	.-86     	; 0xa6b2 <__fp_splitA>
    a708:	c8 f3       	brcs	.-14     	; 0xa6fc <__gesf2+0x8>
    a70a:	99 23       	and	r25, r25
    a70c:	d1 f3       	breq	.-12     	; 0xa702 <__gesf2+0xe>
    a70e:	c6 f3       	brts	.-16     	; 0xa700 <__gesf2+0xc>
    a710:	df 93       	push	r29
    a712:	cf 93       	push	r28
    a714:	1f 93       	push	r17
    a716:	0f 93       	push	r16
    a718:	ff 92       	push	r15
    a71a:	c9 2f       	mov	r28, r25
    a71c:	dd 27       	eor	r29, r29
    a71e:	88 23       	and	r24, r24
    a720:	2a f0       	brmi	.+10     	; 0xa72c <log+0x26>
    a722:	21 97       	sbiw	r28, 0x01	; 1
    a724:	66 0f       	add	r22, r22
    a726:	77 1f       	adc	r23, r23
    a728:	88 1f       	adc	r24, r24
    a72a:	da f7       	brpl	.-10     	; 0xa722 <log+0x1c>
    a72c:	20 e0       	ldi	r18, 0x00	; 0
    a72e:	30 e0       	ldi	r19, 0x00	; 0
    a730:	40 e8       	ldi	r20, 0x80	; 128
    a732:	5f eb       	ldi	r21, 0xBF	; 191
    a734:	9f e3       	ldi	r25, 0x3F	; 63
    a736:	88 39       	cpi	r24, 0x98	; 152
    a738:	20 f0       	brcs	.+8      	; 0xa742 <log+0x3c>
    a73a:	80 3e       	cpi	r24, 0xE0	; 224
    a73c:	30 f0       	brcs	.+12     	; 0xa74a <log+0x44>
    a73e:	21 96       	adiw	r28, 0x01	; 1
    a740:	8f 77       	andi	r24, 0x7F	; 127
    a742:	25 de       	rcall	.-950    	; 0xa38e <__addsf3>
    a744:	e4 e9       	ldi	r30, 0x94	; 148
    a746:	f8 e0       	ldi	r31, 0x08	; 8
    a748:	03 c0       	rjmp	.+6      	; 0xa750 <log+0x4a>
    a74a:	21 de       	rcall	.-958    	; 0xa38e <__addsf3>
    a74c:	e1 ec       	ldi	r30, 0xC1	; 193
    a74e:	f8 e0       	ldi	r31, 0x08	; 8
    a750:	8b d0       	rcall	.+278    	; 0xa868 <__fp_powser>
    a752:	8b 01       	movw	r16, r22
    a754:	be 01       	movw	r22, r28
    a756:	ec 01       	movw	r28, r24
    a758:	fb 2e       	mov	r15, r27
    a75a:	6f 57       	subi	r22, 0x7F	; 127
    a75c:	71 09       	sbc	r23, r1
    a75e:	75 95       	asr	r23
    a760:	77 1f       	adc	r23, r23
    a762:	88 0b       	sbc	r24, r24
    a764:	99 0b       	sbc	r25, r25
    a766:	16 df       	rcall	.-468    	; 0xa594 <__floatsisf>
    a768:	28 e1       	ldi	r18, 0x18	; 24
    a76a:	32 e7       	ldi	r19, 0x72	; 114
    a76c:	41 e3       	ldi	r20, 0x31	; 49
    a76e:	5f e3       	ldi	r21, 0x3F	; 63
    a770:	16 d0       	rcall	.+44     	; 0xa79e <__mulsf3x>
    a772:	af 2d       	mov	r26, r15
    a774:	98 01       	movw	r18, r16
    a776:	ae 01       	movw	r20, r28
    a778:	ff 90       	pop	r15
    a77a:	0f 91       	pop	r16
    a77c:	1f 91       	pop	r17
    a77e:	cf 91       	pop	r28
    a780:	df 91       	pop	r29
    a782:	16 de       	rcall	.-980    	; 0xa3b0 <__addsf3x>
    a784:	7d cf       	rjmp	.-262    	; 0xa680 <__fp_round>

0000a786 <__mulsf3>:
    a786:	0b d0       	rcall	.+22     	; 0xa79e <__mulsf3x>
    a788:	7b cf       	rjmp	.-266    	; 0xa680 <__fp_round>
    a78a:	6c df       	rcall	.-296    	; 0xa664 <__fp_pscA>
    a78c:	28 f0       	brcs	.+10     	; 0xa798 <__mulsf3+0x12>
    a78e:	71 df       	rcall	.-286    	; 0xa672 <__fp_pscB>
    a790:	18 f0       	brcs	.+6      	; 0xa798 <__mulsf3+0x12>
    a792:	95 23       	and	r25, r21
    a794:	09 f0       	breq	.+2      	; 0xa798 <__mulsf3+0x12>
    a796:	5d cf       	rjmp	.-326    	; 0xa652 <__fp_inf>
    a798:	62 cf       	rjmp	.-316    	; 0xa65e <__fp_nan>
    a79a:	11 24       	eor	r1, r1
    a79c:	a5 cf       	rjmp	.-182    	; 0xa6e8 <__fp_szero>

0000a79e <__mulsf3x>:
    a79e:	81 df       	rcall	.-254    	; 0xa6a2 <__fp_split3>
    a7a0:	a0 f3       	brcs	.-24     	; 0xa78a <__mulsf3+0x4>

0000a7a2 <__mulsf3_pse>:
    a7a2:	95 9f       	mul	r25, r21
    a7a4:	d1 f3       	breq	.-12     	; 0xa79a <__mulsf3+0x14>
    a7a6:	95 0f       	add	r25, r21
    a7a8:	50 e0       	ldi	r21, 0x00	; 0
    a7aa:	55 1f       	adc	r21, r21
    a7ac:	62 9f       	mul	r22, r18
    a7ae:	f0 01       	movw	r30, r0
    a7b0:	72 9f       	mul	r23, r18
    a7b2:	bb 27       	eor	r27, r27
    a7b4:	f0 0d       	add	r31, r0
    a7b6:	b1 1d       	adc	r27, r1
    a7b8:	63 9f       	mul	r22, r19
    a7ba:	aa 27       	eor	r26, r26
    a7bc:	f0 0d       	add	r31, r0
    a7be:	b1 1d       	adc	r27, r1
    a7c0:	aa 1f       	adc	r26, r26
    a7c2:	64 9f       	mul	r22, r20
    a7c4:	66 27       	eor	r22, r22
    a7c6:	b0 0d       	add	r27, r0
    a7c8:	a1 1d       	adc	r26, r1
    a7ca:	66 1f       	adc	r22, r22
    a7cc:	82 9f       	mul	r24, r18
    a7ce:	22 27       	eor	r18, r18
    a7d0:	b0 0d       	add	r27, r0
    a7d2:	a1 1d       	adc	r26, r1
    a7d4:	62 1f       	adc	r22, r18
    a7d6:	73 9f       	mul	r23, r19
    a7d8:	b0 0d       	add	r27, r0
    a7da:	a1 1d       	adc	r26, r1
    a7dc:	62 1f       	adc	r22, r18
    a7de:	83 9f       	mul	r24, r19
    a7e0:	a0 0d       	add	r26, r0
    a7e2:	61 1d       	adc	r22, r1
    a7e4:	22 1f       	adc	r18, r18
    a7e6:	74 9f       	mul	r23, r20
    a7e8:	33 27       	eor	r19, r19
    a7ea:	a0 0d       	add	r26, r0
    a7ec:	61 1d       	adc	r22, r1
    a7ee:	23 1f       	adc	r18, r19
    a7f0:	84 9f       	mul	r24, r20
    a7f2:	60 0d       	add	r22, r0
    a7f4:	21 1d       	adc	r18, r1
    a7f6:	82 2f       	mov	r24, r18
    a7f8:	76 2f       	mov	r23, r22
    a7fa:	6a 2f       	mov	r22, r26
    a7fc:	11 24       	eor	r1, r1
    a7fe:	9f 57       	subi	r25, 0x7F	; 127
    a800:	50 40       	sbci	r21, 0x00	; 0
    a802:	8a f0       	brmi	.+34     	; 0xa826 <__mulsf3_pse+0x84>
    a804:	e1 f0       	breq	.+56     	; 0xa83e <__mulsf3_pse+0x9c>
    a806:	88 23       	and	r24, r24
    a808:	4a f0       	brmi	.+18     	; 0xa81c <__mulsf3_pse+0x7a>
    a80a:	ee 0f       	add	r30, r30
    a80c:	ff 1f       	adc	r31, r31
    a80e:	bb 1f       	adc	r27, r27
    a810:	66 1f       	adc	r22, r22
    a812:	77 1f       	adc	r23, r23
    a814:	88 1f       	adc	r24, r24
    a816:	91 50       	subi	r25, 0x01	; 1
    a818:	50 40       	sbci	r21, 0x00	; 0
    a81a:	a9 f7       	brne	.-22     	; 0xa806 <__mulsf3_pse+0x64>
    a81c:	9e 3f       	cpi	r25, 0xFE	; 254
    a81e:	51 05       	cpc	r21, r1
    a820:	70 f0       	brcs	.+28     	; 0xa83e <__mulsf3_pse+0x9c>
    a822:	17 cf       	rjmp	.-466    	; 0xa652 <__fp_inf>
    a824:	61 cf       	rjmp	.-318    	; 0xa6e8 <__fp_szero>
    a826:	5f 3f       	cpi	r21, 0xFF	; 255
    a828:	ec f3       	brlt	.-6      	; 0xa824 <__mulsf3_pse+0x82>
    a82a:	98 3e       	cpi	r25, 0xE8	; 232
    a82c:	dc f3       	brlt	.-10     	; 0xa824 <__mulsf3_pse+0x82>
    a82e:	86 95       	lsr	r24
    a830:	77 95       	ror	r23
    a832:	67 95       	ror	r22
    a834:	b7 95       	ror	r27
    a836:	f7 95       	ror	r31
    a838:	e7 95       	ror	r30
    a83a:	9f 5f       	subi	r25, 0xFF	; 255
    a83c:	c1 f7       	brne	.-16     	; 0xa82e <__mulsf3_pse+0x8c>
    a83e:	fe 2b       	or	r31, r30
    a840:	88 0f       	add	r24, r24
    a842:	91 1d       	adc	r25, r1
    a844:	96 95       	lsr	r25
    a846:	87 95       	ror	r24
    a848:	97 f9       	bld	r25, 7
    a84a:	08 95       	ret

0000a84c <__fp_mpack>:
    a84c:	9f 3f       	cpi	r25, 0xFF	; 255
    a84e:	31 f0       	breq	.+12     	; 0xa85c <__fp_mpack_finite+0xc>

0000a850 <__fp_mpack_finite>:
    a850:	91 50       	subi	r25, 0x01	; 1
    a852:	20 f4       	brcc	.+8      	; 0xa85c <__fp_mpack_finite+0xc>
    a854:	87 95       	ror	r24
    a856:	77 95       	ror	r23
    a858:	67 95       	ror	r22
    a85a:	b7 95       	ror	r27
    a85c:	88 0f       	add	r24, r24
    a85e:	91 1d       	adc	r25, r1
    a860:	96 95       	lsr	r25
    a862:	87 95       	ror	r24
    a864:	97 f9       	bld	r25, 7
    a866:	08 95       	ret

0000a868 <__fp_powser>:
    a868:	df 93       	push	r29
    a86a:	cf 93       	push	r28
    a86c:	1f 93       	push	r17
    a86e:	0f 93       	push	r16
    a870:	ff 92       	push	r15
    a872:	ef 92       	push	r14
    a874:	df 92       	push	r13
    a876:	7b 01       	movw	r14, r22
    a878:	8c 01       	movw	r16, r24
    a87a:	68 94       	set
    a87c:	05 c0       	rjmp	.+10     	; 0xa888 <__fp_powser+0x20>
    a87e:	da 2e       	mov	r13, r26
    a880:	ef 01       	movw	r28, r30
    a882:	8d df       	rcall	.-230    	; 0xa79e <__mulsf3x>
    a884:	fe 01       	movw	r30, r28
    a886:	e8 94       	clt
    a888:	a5 91       	lpm	r26, Z+
    a88a:	25 91       	lpm	r18, Z+
    a88c:	35 91       	lpm	r19, Z+
    a88e:	45 91       	lpm	r20, Z+
    a890:	55 91       	lpm	r21, Z+
    a892:	ae f3       	brts	.-22     	; 0xa87e <__fp_powser+0x16>
    a894:	ef 01       	movw	r28, r30
    a896:	8c dd       	rcall	.-1256   	; 0xa3b0 <__addsf3x>
    a898:	fe 01       	movw	r30, r28
    a89a:	97 01       	movw	r18, r14
    a89c:	a8 01       	movw	r20, r16
    a89e:	da 94       	dec	r13
    a8a0:	79 f7       	brne	.-34     	; 0xa880 <__fp_powser+0x18>
    a8a2:	df 90       	pop	r13
    a8a4:	ef 90       	pop	r14
    a8a6:	ff 90       	pop	r15
    a8a8:	0f 91       	pop	r16
    a8aa:	1f 91       	pop	r17
    a8ac:	cf 91       	pop	r28
    a8ae:	df 91       	pop	r29
    a8b0:	08 95       	ret

0000a8b2 <vfprintf>:
    a8b2:	2f 92       	push	r2
    a8b4:	3f 92       	push	r3
    a8b6:	4f 92       	push	r4
    a8b8:	5f 92       	push	r5
    a8ba:	6f 92       	push	r6
    a8bc:	7f 92       	push	r7
    a8be:	8f 92       	push	r8
    a8c0:	9f 92       	push	r9
    a8c2:	af 92       	push	r10
    a8c4:	bf 92       	push	r11
    a8c6:	cf 92       	push	r12
    a8c8:	df 92       	push	r13
    a8ca:	ef 92       	push	r14
    a8cc:	ff 92       	push	r15
    a8ce:	0f 93       	push	r16
    a8d0:	1f 93       	push	r17
    a8d2:	cf 93       	push	r28
    a8d4:	df 93       	push	r29
    a8d6:	cd b7       	in	r28, 0x3d	; 61
    a8d8:	de b7       	in	r29, 0x3e	; 62
    a8da:	60 97       	sbiw	r28, 0x10	; 16
    a8dc:	0f b6       	in	r0, 0x3f	; 63
    a8de:	f8 94       	cli
    a8e0:	de bf       	out	0x3e, r29	; 62
    a8e2:	0f be       	out	0x3f, r0	; 63
    a8e4:	cd bf       	out	0x3d, r28	; 61
    a8e6:	7c 01       	movw	r14, r24
    a8e8:	1b 01       	movw	r2, r22
    a8ea:	6a 01       	movw	r12, r20
    a8ec:	fc 01       	movw	r30, r24
    a8ee:	17 82       	std	Z+7, r1	; 0x07
    a8f0:	16 82       	std	Z+6, r1	; 0x06
    a8f2:	83 81       	ldd	r24, Z+3	; 0x03
    a8f4:	81 ff       	sbrs	r24, 1
    a8f6:	2a c3       	rjmp	.+1620   	; 0xaf4c <vfprintf+0x69a>
    a8f8:	9e 01       	movw	r18, r28
    a8fa:	2f 5f       	subi	r18, 0xFF	; 255
    a8fc:	3f 4f       	sbci	r19, 0xFF	; 255
    a8fe:	39 01       	movw	r6, r18
    a900:	f7 01       	movw	r30, r14
    a902:	93 81       	ldd	r25, Z+3	; 0x03
    a904:	f1 01       	movw	r30, r2
    a906:	93 fd       	sbrc	r25, 3
    a908:	85 91       	lpm	r24, Z+
    a90a:	93 ff       	sbrs	r25, 3
    a90c:	81 91       	ld	r24, Z+
    a90e:	1f 01       	movw	r2, r30
    a910:	88 23       	and	r24, r24
    a912:	09 f4       	brne	.+2      	; 0xa916 <vfprintf+0x64>
    a914:	17 c3       	rjmp	.+1582   	; 0xaf44 <vfprintf+0x692>
    a916:	85 32       	cpi	r24, 0x25	; 37
    a918:	39 f4       	brne	.+14     	; 0xa928 <vfprintf+0x76>
    a91a:	93 fd       	sbrc	r25, 3
    a91c:	85 91       	lpm	r24, Z+
    a91e:	93 ff       	sbrs	r25, 3
    a920:	81 91       	ld	r24, Z+
    a922:	1f 01       	movw	r2, r30
    a924:	85 32       	cpi	r24, 0x25	; 37
    a926:	31 f4       	brne	.+12     	; 0xa934 <vfprintf+0x82>
    a928:	b7 01       	movw	r22, r14
    a92a:	90 e0       	ldi	r25, 0x00	; 0
    a92c:	a3 d5       	rcall	.+2886   	; 0xb474 <fputc>
    a92e:	56 01       	movw	r10, r12
    a930:	65 01       	movw	r12, r10
    a932:	e6 cf       	rjmp	.-52     	; 0xa900 <vfprintf+0x4e>
    a934:	10 e0       	ldi	r17, 0x00	; 0
    a936:	51 2c       	mov	r5, r1
    a938:	91 2c       	mov	r9, r1
    a93a:	ff e1       	ldi	r31, 0x1F	; 31
    a93c:	f9 15       	cp	r31, r9
    a93e:	d8 f0       	brcs	.+54     	; 0xa976 <vfprintf+0xc4>
    a940:	8b 32       	cpi	r24, 0x2B	; 43
    a942:	79 f0       	breq	.+30     	; 0xa962 <vfprintf+0xb0>
    a944:	38 f4       	brcc	.+14     	; 0xa954 <vfprintf+0xa2>
    a946:	80 32       	cpi	r24, 0x20	; 32
    a948:	79 f0       	breq	.+30     	; 0xa968 <vfprintf+0xb6>
    a94a:	83 32       	cpi	r24, 0x23	; 35
    a94c:	a1 f4       	brne	.+40     	; 0xa976 <vfprintf+0xc4>
    a94e:	f9 2d       	mov	r31, r9
    a950:	f0 61       	ori	r31, 0x10	; 16
    a952:	2e c0       	rjmp	.+92     	; 0xa9b0 <vfprintf+0xfe>
    a954:	8d 32       	cpi	r24, 0x2D	; 45
    a956:	61 f0       	breq	.+24     	; 0xa970 <vfprintf+0xbe>
    a958:	80 33       	cpi	r24, 0x30	; 48
    a95a:	69 f4       	brne	.+26     	; 0xa976 <vfprintf+0xc4>
    a95c:	29 2d       	mov	r18, r9
    a95e:	21 60       	ori	r18, 0x01	; 1
    a960:	2d c0       	rjmp	.+90     	; 0xa9bc <vfprintf+0x10a>
    a962:	39 2d       	mov	r19, r9
    a964:	32 60       	ori	r19, 0x02	; 2
    a966:	93 2e       	mov	r9, r19
    a968:	89 2d       	mov	r24, r9
    a96a:	84 60       	ori	r24, 0x04	; 4
    a96c:	98 2e       	mov	r9, r24
    a96e:	2a c0       	rjmp	.+84     	; 0xa9c4 <vfprintf+0x112>
    a970:	e9 2d       	mov	r30, r9
    a972:	e8 60       	ori	r30, 0x08	; 8
    a974:	15 c0       	rjmp	.+42     	; 0xa9a0 <vfprintf+0xee>
    a976:	97 fc       	sbrc	r9, 7
    a978:	2d c0       	rjmp	.+90     	; 0xa9d4 <vfprintf+0x122>
    a97a:	20 ed       	ldi	r18, 0xD0	; 208
    a97c:	28 0f       	add	r18, r24
    a97e:	2a 30       	cpi	r18, 0x0A	; 10
    a980:	88 f4       	brcc	.+34     	; 0xa9a4 <vfprintf+0xf2>
    a982:	96 fe       	sbrs	r9, 6
    a984:	06 c0       	rjmp	.+12     	; 0xa992 <vfprintf+0xe0>
    a986:	3a e0       	ldi	r19, 0x0A	; 10
    a988:	13 9f       	mul	r17, r19
    a98a:	20 0d       	add	r18, r0
    a98c:	11 24       	eor	r1, r1
    a98e:	12 2f       	mov	r17, r18
    a990:	19 c0       	rjmp	.+50     	; 0xa9c4 <vfprintf+0x112>
    a992:	8a e0       	ldi	r24, 0x0A	; 10
    a994:	58 9e       	mul	r5, r24
    a996:	20 0d       	add	r18, r0
    a998:	11 24       	eor	r1, r1
    a99a:	52 2e       	mov	r5, r18
    a99c:	e9 2d       	mov	r30, r9
    a99e:	e0 62       	ori	r30, 0x20	; 32
    a9a0:	9e 2e       	mov	r9, r30
    a9a2:	10 c0       	rjmp	.+32     	; 0xa9c4 <vfprintf+0x112>
    a9a4:	8e 32       	cpi	r24, 0x2E	; 46
    a9a6:	31 f4       	brne	.+12     	; 0xa9b4 <vfprintf+0x102>
    a9a8:	96 fc       	sbrc	r9, 6
    a9aa:	cc c2       	rjmp	.+1432   	; 0xaf44 <vfprintf+0x692>
    a9ac:	f9 2d       	mov	r31, r9
    a9ae:	f0 64       	ori	r31, 0x40	; 64
    a9b0:	9f 2e       	mov	r9, r31
    a9b2:	08 c0       	rjmp	.+16     	; 0xa9c4 <vfprintf+0x112>
    a9b4:	8c 36       	cpi	r24, 0x6C	; 108
    a9b6:	21 f4       	brne	.+8      	; 0xa9c0 <vfprintf+0x10e>
    a9b8:	29 2d       	mov	r18, r9
    a9ba:	20 68       	ori	r18, 0x80	; 128
    a9bc:	92 2e       	mov	r9, r18
    a9be:	02 c0       	rjmp	.+4      	; 0xa9c4 <vfprintf+0x112>
    a9c0:	88 36       	cpi	r24, 0x68	; 104
    a9c2:	41 f4       	brne	.+16     	; 0xa9d4 <vfprintf+0x122>
    a9c4:	f1 01       	movw	r30, r2
    a9c6:	93 fd       	sbrc	r25, 3
    a9c8:	85 91       	lpm	r24, Z+
    a9ca:	93 ff       	sbrs	r25, 3
    a9cc:	81 91       	ld	r24, Z+
    a9ce:	1f 01       	movw	r2, r30
    a9d0:	81 11       	cpse	r24, r1
    a9d2:	b3 cf       	rjmp	.-154    	; 0xa93a <vfprintf+0x88>
    a9d4:	9b eb       	ldi	r25, 0xBB	; 187
    a9d6:	98 0f       	add	r25, r24
    a9d8:	93 30       	cpi	r25, 0x03	; 3
    a9da:	20 f4       	brcc	.+8      	; 0xa9e4 <vfprintf+0x132>
    a9dc:	99 2d       	mov	r25, r9
    a9de:	90 61       	ori	r25, 0x10	; 16
    a9e0:	80 5e       	subi	r24, 0xE0	; 224
    a9e2:	07 c0       	rjmp	.+14     	; 0xa9f2 <vfprintf+0x140>
    a9e4:	9b e9       	ldi	r25, 0x9B	; 155
    a9e6:	98 0f       	add	r25, r24
    a9e8:	93 30       	cpi	r25, 0x03	; 3
    a9ea:	08 f0       	brcs	.+2      	; 0xa9ee <vfprintf+0x13c>
    a9ec:	59 c1       	rjmp	.+690    	; 0xaca0 <vfprintf+0x3ee>
    a9ee:	99 2d       	mov	r25, r9
    a9f0:	9f 7e       	andi	r25, 0xEF	; 239
    a9f2:	96 ff       	sbrs	r25, 6
    a9f4:	16 e0       	ldi	r17, 0x06	; 6
    a9f6:	9f 73       	andi	r25, 0x3F	; 63
    a9f8:	99 2e       	mov	r9, r25
    a9fa:	85 36       	cpi	r24, 0x65	; 101
    a9fc:	19 f4       	brne	.+6      	; 0xaa04 <vfprintf+0x152>
    a9fe:	90 64       	ori	r25, 0x40	; 64
    aa00:	99 2e       	mov	r9, r25
    aa02:	08 c0       	rjmp	.+16     	; 0xaa14 <vfprintf+0x162>
    aa04:	86 36       	cpi	r24, 0x66	; 102
    aa06:	21 f4       	brne	.+8      	; 0xaa10 <vfprintf+0x15e>
    aa08:	39 2f       	mov	r19, r25
    aa0a:	30 68       	ori	r19, 0x80	; 128
    aa0c:	93 2e       	mov	r9, r19
    aa0e:	02 c0       	rjmp	.+4      	; 0xaa14 <vfprintf+0x162>
    aa10:	11 11       	cpse	r17, r1
    aa12:	11 50       	subi	r17, 0x01	; 1
    aa14:	97 fe       	sbrs	r9, 7
    aa16:	07 c0       	rjmp	.+14     	; 0xaa26 <vfprintf+0x174>
    aa18:	1c 33       	cpi	r17, 0x3C	; 60
    aa1a:	50 f4       	brcc	.+20     	; 0xaa30 <vfprintf+0x17e>
    aa1c:	44 24       	eor	r4, r4
    aa1e:	43 94       	inc	r4
    aa20:	41 0e       	add	r4, r17
    aa22:	27 e0       	ldi	r18, 0x07	; 7
    aa24:	0b c0       	rjmp	.+22     	; 0xaa3c <vfprintf+0x18a>
    aa26:	18 30       	cpi	r17, 0x08	; 8
    aa28:	38 f0       	brcs	.+14     	; 0xaa38 <vfprintf+0x186>
    aa2a:	27 e0       	ldi	r18, 0x07	; 7
    aa2c:	17 e0       	ldi	r17, 0x07	; 7
    aa2e:	05 c0       	rjmp	.+10     	; 0xaa3a <vfprintf+0x188>
    aa30:	27 e0       	ldi	r18, 0x07	; 7
    aa32:	9c e3       	ldi	r25, 0x3C	; 60
    aa34:	49 2e       	mov	r4, r25
    aa36:	02 c0       	rjmp	.+4      	; 0xaa3c <vfprintf+0x18a>
    aa38:	21 2f       	mov	r18, r17
    aa3a:	41 2c       	mov	r4, r1
    aa3c:	56 01       	movw	r10, r12
    aa3e:	84 e0       	ldi	r24, 0x04	; 4
    aa40:	a8 0e       	add	r10, r24
    aa42:	b1 1c       	adc	r11, r1
    aa44:	f6 01       	movw	r30, r12
    aa46:	60 81       	ld	r22, Z
    aa48:	71 81       	ldd	r23, Z+1	; 0x01
    aa4a:	82 81       	ldd	r24, Z+2	; 0x02
    aa4c:	93 81       	ldd	r25, Z+3	; 0x03
    aa4e:	04 2d       	mov	r16, r4
    aa50:	a3 01       	movw	r20, r6
    aa52:	12 d4       	rcall	.+2084   	; 0xb278 <__ftoa_engine>
    aa54:	6c 01       	movw	r12, r24
    aa56:	f9 81       	ldd	r31, Y+1	; 0x01
    aa58:	fc 87       	std	Y+12, r31	; 0x0c
    aa5a:	f0 ff       	sbrs	r31, 0
    aa5c:	02 c0       	rjmp	.+4      	; 0xaa62 <vfprintf+0x1b0>
    aa5e:	f3 ff       	sbrs	r31, 3
    aa60:	06 c0       	rjmp	.+12     	; 0xaa6e <vfprintf+0x1bc>
    aa62:	91 fc       	sbrc	r9, 1
    aa64:	06 c0       	rjmp	.+12     	; 0xaa72 <vfprintf+0x1c0>
    aa66:	92 fe       	sbrs	r9, 2
    aa68:	06 c0       	rjmp	.+12     	; 0xaa76 <vfprintf+0x1c4>
    aa6a:	00 e2       	ldi	r16, 0x20	; 32
    aa6c:	05 c0       	rjmp	.+10     	; 0xaa78 <vfprintf+0x1c6>
    aa6e:	0d e2       	ldi	r16, 0x2D	; 45
    aa70:	03 c0       	rjmp	.+6      	; 0xaa78 <vfprintf+0x1c6>
    aa72:	0b e2       	ldi	r16, 0x2B	; 43
    aa74:	01 c0       	rjmp	.+2      	; 0xaa78 <vfprintf+0x1c6>
    aa76:	00 e0       	ldi	r16, 0x00	; 0
    aa78:	8c 85       	ldd	r24, Y+12	; 0x0c
    aa7a:	8c 70       	andi	r24, 0x0C	; 12
    aa7c:	19 f0       	breq	.+6      	; 0xaa84 <vfprintf+0x1d2>
    aa7e:	01 11       	cpse	r16, r1
    aa80:	43 c2       	rjmp	.+1158   	; 0xaf08 <vfprintf+0x656>
    aa82:	80 c2       	rjmp	.+1280   	; 0xaf84 <vfprintf+0x6d2>
    aa84:	97 fe       	sbrs	r9, 7
    aa86:	10 c0       	rjmp	.+32     	; 0xaaa8 <vfprintf+0x1f6>
    aa88:	4c 0c       	add	r4, r12
    aa8a:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa8c:	f4 ff       	sbrs	r31, 4
    aa8e:	04 c0       	rjmp	.+8      	; 0xaa98 <vfprintf+0x1e6>
    aa90:	8a 81       	ldd	r24, Y+2	; 0x02
    aa92:	81 33       	cpi	r24, 0x31	; 49
    aa94:	09 f4       	brne	.+2      	; 0xaa98 <vfprintf+0x1e6>
    aa96:	4a 94       	dec	r4
    aa98:	14 14       	cp	r1, r4
    aa9a:	74 f5       	brge	.+92     	; 0xaaf8 <vfprintf+0x246>
    aa9c:	28 e0       	ldi	r18, 0x08	; 8
    aa9e:	24 15       	cp	r18, r4
    aaa0:	78 f5       	brcc	.+94     	; 0xab00 <vfprintf+0x24e>
    aaa2:	88 e0       	ldi	r24, 0x08	; 8
    aaa4:	48 2e       	mov	r4, r24
    aaa6:	2c c0       	rjmp	.+88     	; 0xab00 <vfprintf+0x24e>
    aaa8:	96 fc       	sbrc	r9, 6
    aaaa:	2a c0       	rjmp	.+84     	; 0xab00 <vfprintf+0x24e>
    aaac:	81 2f       	mov	r24, r17
    aaae:	90 e0       	ldi	r25, 0x00	; 0
    aab0:	8c 15       	cp	r24, r12
    aab2:	9d 05       	cpc	r25, r13
    aab4:	9c f0       	brlt	.+38     	; 0xaadc <vfprintf+0x22a>
    aab6:	3c ef       	ldi	r19, 0xFC	; 252
    aab8:	c3 16       	cp	r12, r19
    aaba:	3f ef       	ldi	r19, 0xFF	; 255
    aabc:	d3 06       	cpc	r13, r19
    aabe:	74 f0       	brlt	.+28     	; 0xaadc <vfprintf+0x22a>
    aac0:	89 2d       	mov	r24, r9
    aac2:	80 68       	ori	r24, 0x80	; 128
    aac4:	98 2e       	mov	r9, r24
    aac6:	0a c0       	rjmp	.+20     	; 0xaadc <vfprintf+0x22a>
    aac8:	e2 e0       	ldi	r30, 0x02	; 2
    aaca:	f0 e0       	ldi	r31, 0x00	; 0
    aacc:	ec 0f       	add	r30, r28
    aace:	fd 1f       	adc	r31, r29
    aad0:	e1 0f       	add	r30, r17
    aad2:	f1 1d       	adc	r31, r1
    aad4:	80 81       	ld	r24, Z
    aad6:	80 33       	cpi	r24, 0x30	; 48
    aad8:	19 f4       	brne	.+6      	; 0xaae0 <vfprintf+0x22e>
    aada:	11 50       	subi	r17, 0x01	; 1
    aadc:	11 11       	cpse	r17, r1
    aade:	f4 cf       	rjmp	.-24     	; 0xaac8 <vfprintf+0x216>
    aae0:	97 fe       	sbrs	r9, 7
    aae2:	0e c0       	rjmp	.+28     	; 0xab00 <vfprintf+0x24e>
    aae4:	44 24       	eor	r4, r4
    aae6:	43 94       	inc	r4
    aae8:	41 0e       	add	r4, r17
    aaea:	81 2f       	mov	r24, r17
    aaec:	90 e0       	ldi	r25, 0x00	; 0
    aaee:	c8 16       	cp	r12, r24
    aaf0:	d9 06       	cpc	r13, r25
    aaf2:	2c f4       	brge	.+10     	; 0xaafe <vfprintf+0x24c>
    aaf4:	1c 19       	sub	r17, r12
    aaf6:	04 c0       	rjmp	.+8      	; 0xab00 <vfprintf+0x24e>
    aaf8:	44 24       	eor	r4, r4
    aafa:	43 94       	inc	r4
    aafc:	01 c0       	rjmp	.+2      	; 0xab00 <vfprintf+0x24e>
    aafe:	10 e0       	ldi	r17, 0x00	; 0
    ab00:	97 fe       	sbrs	r9, 7
    ab02:	06 c0       	rjmp	.+12     	; 0xab10 <vfprintf+0x25e>
    ab04:	1c 14       	cp	r1, r12
    ab06:	1d 04       	cpc	r1, r13
    ab08:	34 f4       	brge	.+12     	; 0xab16 <vfprintf+0x264>
    ab0a:	c6 01       	movw	r24, r12
    ab0c:	01 96       	adiw	r24, 0x01	; 1
    ab0e:	05 c0       	rjmp	.+10     	; 0xab1a <vfprintf+0x268>
    ab10:	85 e0       	ldi	r24, 0x05	; 5
    ab12:	90 e0       	ldi	r25, 0x00	; 0
    ab14:	02 c0       	rjmp	.+4      	; 0xab1a <vfprintf+0x268>
    ab16:	81 e0       	ldi	r24, 0x01	; 1
    ab18:	90 e0       	ldi	r25, 0x00	; 0
    ab1a:	01 11       	cpse	r16, r1
    ab1c:	01 96       	adiw	r24, 0x01	; 1
    ab1e:	11 23       	and	r17, r17
    ab20:	31 f0       	breq	.+12     	; 0xab2e <vfprintf+0x27c>
    ab22:	21 2f       	mov	r18, r17
    ab24:	30 e0       	ldi	r19, 0x00	; 0
    ab26:	2f 5f       	subi	r18, 0xFF	; 255
    ab28:	3f 4f       	sbci	r19, 0xFF	; 255
    ab2a:	82 0f       	add	r24, r18
    ab2c:	93 1f       	adc	r25, r19
    ab2e:	25 2d       	mov	r18, r5
    ab30:	30 e0       	ldi	r19, 0x00	; 0
    ab32:	82 17       	cp	r24, r18
    ab34:	93 07       	cpc	r25, r19
    ab36:	14 f4       	brge	.+4      	; 0xab3c <vfprintf+0x28a>
    ab38:	58 1a       	sub	r5, r24
    ab3a:	01 c0       	rjmp	.+2      	; 0xab3e <vfprintf+0x28c>
    ab3c:	51 2c       	mov	r5, r1
    ab3e:	89 2d       	mov	r24, r9
    ab40:	89 70       	andi	r24, 0x09	; 9
    ab42:	41 f4       	brne	.+16     	; 0xab54 <vfprintf+0x2a2>
    ab44:	55 20       	and	r5, r5
    ab46:	31 f0       	breq	.+12     	; 0xab54 <vfprintf+0x2a2>
    ab48:	b7 01       	movw	r22, r14
    ab4a:	80 e2       	ldi	r24, 0x20	; 32
    ab4c:	90 e0       	ldi	r25, 0x00	; 0
    ab4e:	92 d4       	rcall	.+2340   	; 0xb474 <fputc>
    ab50:	5a 94       	dec	r5
    ab52:	f8 cf       	rjmp	.-16     	; 0xab44 <vfprintf+0x292>
    ab54:	00 23       	and	r16, r16
    ab56:	21 f0       	breq	.+8      	; 0xab60 <vfprintf+0x2ae>
    ab58:	b7 01       	movw	r22, r14
    ab5a:	80 2f       	mov	r24, r16
    ab5c:	90 e0       	ldi	r25, 0x00	; 0
    ab5e:	8a d4       	rcall	.+2324   	; 0xb474 <fputc>
    ab60:	93 fc       	sbrc	r9, 3
    ab62:	08 c0       	rjmp	.+16     	; 0xab74 <vfprintf+0x2c2>
    ab64:	55 20       	and	r5, r5
    ab66:	31 f0       	breq	.+12     	; 0xab74 <vfprintf+0x2c2>
    ab68:	b7 01       	movw	r22, r14
    ab6a:	80 e3       	ldi	r24, 0x30	; 48
    ab6c:	90 e0       	ldi	r25, 0x00	; 0
    ab6e:	82 d4       	rcall	.+2308   	; 0xb474 <fputc>
    ab70:	5a 94       	dec	r5
    ab72:	f8 cf       	rjmp	.-16     	; 0xab64 <vfprintf+0x2b2>
    ab74:	97 fe       	sbrs	r9, 7
    ab76:	4a c0       	rjmp	.+148    	; 0xac0c <vfprintf+0x35a>
    ab78:	46 01       	movw	r8, r12
    ab7a:	d7 fe       	sbrs	r13, 7
    ab7c:	02 c0       	rjmp	.+4      	; 0xab82 <vfprintf+0x2d0>
    ab7e:	81 2c       	mov	r8, r1
    ab80:	91 2c       	mov	r9, r1
    ab82:	c6 01       	movw	r24, r12
    ab84:	88 19       	sub	r24, r8
    ab86:	99 09       	sbc	r25, r9
    ab88:	f3 01       	movw	r30, r6
    ab8a:	e8 0f       	add	r30, r24
    ab8c:	f9 1f       	adc	r31, r25
    ab8e:	fe 87       	std	Y+14, r31	; 0x0e
    ab90:	ed 87       	std	Y+13, r30	; 0x0d
    ab92:	96 01       	movw	r18, r12
    ab94:	24 19       	sub	r18, r4
    ab96:	31 09       	sbc	r19, r1
    ab98:	38 8b       	std	Y+16, r19	; 0x10
    ab9a:	2f 87       	std	Y+15, r18	; 0x0f
    ab9c:	01 2f       	mov	r16, r17
    ab9e:	10 e0       	ldi	r17, 0x00	; 0
    aba0:	11 95       	neg	r17
    aba2:	01 95       	neg	r16
    aba4:	11 09       	sbc	r17, r1
    aba6:	3f ef       	ldi	r19, 0xFF	; 255
    aba8:	83 16       	cp	r8, r19
    abaa:	93 06       	cpc	r9, r19
    abac:	21 f4       	brne	.+8      	; 0xabb6 <vfprintf+0x304>
    abae:	b7 01       	movw	r22, r14
    abb0:	8e e2       	ldi	r24, 0x2E	; 46
    abb2:	90 e0       	ldi	r25, 0x00	; 0
    abb4:	5f d4       	rcall	.+2238   	; 0xb474 <fputc>
    abb6:	c8 14       	cp	r12, r8
    abb8:	d9 04       	cpc	r13, r9
    abba:	4c f0       	brlt	.+18     	; 0xabce <vfprintf+0x31c>
    abbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    abbe:	98 89       	ldd	r25, Y+16	; 0x10
    abc0:	88 15       	cp	r24, r8
    abc2:	99 05       	cpc	r25, r9
    abc4:	24 f4       	brge	.+8      	; 0xabce <vfprintf+0x31c>
    abc6:	ed 85       	ldd	r30, Y+13	; 0x0d
    abc8:	fe 85       	ldd	r31, Y+14	; 0x0e
    abca:	81 81       	ldd	r24, Z+1	; 0x01
    abcc:	01 c0       	rjmp	.+2      	; 0xabd0 <vfprintf+0x31e>
    abce:	80 e3       	ldi	r24, 0x30	; 48
    abd0:	f1 e0       	ldi	r31, 0x01	; 1
    abd2:	8f 1a       	sub	r8, r31
    abd4:	91 08       	sbc	r9, r1
    abd6:	2d 85       	ldd	r18, Y+13	; 0x0d
    abd8:	3e 85       	ldd	r19, Y+14	; 0x0e
    abda:	2f 5f       	subi	r18, 0xFF	; 255
    abdc:	3f 4f       	sbci	r19, 0xFF	; 255
    abde:	3e 87       	std	Y+14, r19	; 0x0e
    abe0:	2d 87       	std	Y+13, r18	; 0x0d
    abe2:	80 16       	cp	r8, r16
    abe4:	91 06       	cpc	r9, r17
    abe6:	24 f0       	brlt	.+8      	; 0xabf0 <vfprintf+0x33e>
    abe8:	b7 01       	movw	r22, r14
    abea:	90 e0       	ldi	r25, 0x00	; 0
    abec:	43 d4       	rcall	.+2182   	; 0xb474 <fputc>
    abee:	db cf       	rjmp	.-74     	; 0xaba6 <vfprintf+0x2f4>
    abf0:	c8 14       	cp	r12, r8
    abf2:	d9 04       	cpc	r13, r9
    abf4:	41 f4       	brne	.+16     	; 0xac06 <vfprintf+0x354>
    abf6:	9a 81       	ldd	r25, Y+2	; 0x02
    abf8:	96 33       	cpi	r25, 0x36	; 54
    abfa:	20 f4       	brcc	.+8      	; 0xac04 <vfprintf+0x352>
    abfc:	95 33       	cpi	r25, 0x35	; 53
    abfe:	19 f4       	brne	.+6      	; 0xac06 <vfprintf+0x354>
    ac00:	3c 85       	ldd	r19, Y+12	; 0x0c
    ac02:	34 ff       	sbrs	r19, 4
    ac04:	81 e3       	ldi	r24, 0x31	; 49
    ac06:	b7 01       	movw	r22, r14
    ac08:	90 e0       	ldi	r25, 0x00	; 0
    ac0a:	48 c0       	rjmp	.+144    	; 0xac9c <vfprintf+0x3ea>
    ac0c:	8a 81       	ldd	r24, Y+2	; 0x02
    ac0e:	81 33       	cpi	r24, 0x31	; 49
    ac10:	19 f0       	breq	.+6      	; 0xac18 <vfprintf+0x366>
    ac12:	9c 85       	ldd	r25, Y+12	; 0x0c
    ac14:	9f 7e       	andi	r25, 0xEF	; 239
    ac16:	9c 87       	std	Y+12, r25	; 0x0c
    ac18:	b7 01       	movw	r22, r14
    ac1a:	90 e0       	ldi	r25, 0x00	; 0
    ac1c:	2b d4       	rcall	.+2134   	; 0xb474 <fputc>
    ac1e:	11 11       	cpse	r17, r1
    ac20:	05 c0       	rjmp	.+10     	; 0xac2c <vfprintf+0x37a>
    ac22:	94 fc       	sbrc	r9, 4
    ac24:	16 c0       	rjmp	.+44     	; 0xac52 <vfprintf+0x3a0>
    ac26:	85 e6       	ldi	r24, 0x65	; 101
    ac28:	90 e0       	ldi	r25, 0x00	; 0
    ac2a:	15 c0       	rjmp	.+42     	; 0xac56 <vfprintf+0x3a4>
    ac2c:	b7 01       	movw	r22, r14
    ac2e:	8e e2       	ldi	r24, 0x2E	; 46
    ac30:	90 e0       	ldi	r25, 0x00	; 0
    ac32:	20 d4       	rcall	.+2112   	; 0xb474 <fputc>
    ac34:	1e 5f       	subi	r17, 0xFE	; 254
    ac36:	82 e0       	ldi	r24, 0x02	; 2
    ac38:	01 e0       	ldi	r16, 0x01	; 1
    ac3a:	08 0f       	add	r16, r24
    ac3c:	f3 01       	movw	r30, r6
    ac3e:	e8 0f       	add	r30, r24
    ac40:	f1 1d       	adc	r31, r1
    ac42:	80 81       	ld	r24, Z
    ac44:	b7 01       	movw	r22, r14
    ac46:	90 e0       	ldi	r25, 0x00	; 0
    ac48:	15 d4       	rcall	.+2090   	; 0xb474 <fputc>
    ac4a:	80 2f       	mov	r24, r16
    ac4c:	01 13       	cpse	r16, r17
    ac4e:	f4 cf       	rjmp	.-24     	; 0xac38 <vfprintf+0x386>
    ac50:	e8 cf       	rjmp	.-48     	; 0xac22 <vfprintf+0x370>
    ac52:	85 e4       	ldi	r24, 0x45	; 69
    ac54:	90 e0       	ldi	r25, 0x00	; 0
    ac56:	b7 01       	movw	r22, r14
    ac58:	0d d4       	rcall	.+2074   	; 0xb474 <fputc>
    ac5a:	d7 fc       	sbrc	r13, 7
    ac5c:	06 c0       	rjmp	.+12     	; 0xac6a <vfprintf+0x3b8>
    ac5e:	c1 14       	cp	r12, r1
    ac60:	d1 04       	cpc	r13, r1
    ac62:	41 f4       	brne	.+16     	; 0xac74 <vfprintf+0x3c2>
    ac64:	ec 85       	ldd	r30, Y+12	; 0x0c
    ac66:	e4 ff       	sbrs	r30, 4
    ac68:	05 c0       	rjmp	.+10     	; 0xac74 <vfprintf+0x3c2>
    ac6a:	d1 94       	neg	r13
    ac6c:	c1 94       	neg	r12
    ac6e:	d1 08       	sbc	r13, r1
    ac70:	8d e2       	ldi	r24, 0x2D	; 45
    ac72:	01 c0       	rjmp	.+2      	; 0xac76 <vfprintf+0x3c4>
    ac74:	8b e2       	ldi	r24, 0x2B	; 43
    ac76:	b7 01       	movw	r22, r14
    ac78:	90 e0       	ldi	r25, 0x00	; 0
    ac7a:	fc d3       	rcall	.+2040   	; 0xb474 <fputc>
    ac7c:	80 e3       	ldi	r24, 0x30	; 48
    ac7e:	2a e0       	ldi	r18, 0x0A	; 10
    ac80:	c2 16       	cp	r12, r18
    ac82:	d1 04       	cpc	r13, r1
    ac84:	2c f0       	brlt	.+10     	; 0xac90 <vfprintf+0x3de>
    ac86:	8f 5f       	subi	r24, 0xFF	; 255
    ac88:	fa e0       	ldi	r31, 0x0A	; 10
    ac8a:	cf 1a       	sub	r12, r31
    ac8c:	d1 08       	sbc	r13, r1
    ac8e:	f7 cf       	rjmp	.-18     	; 0xac7e <vfprintf+0x3cc>
    ac90:	b7 01       	movw	r22, r14
    ac92:	90 e0       	ldi	r25, 0x00	; 0
    ac94:	ef d3       	rcall	.+2014   	; 0xb474 <fputc>
    ac96:	b7 01       	movw	r22, r14
    ac98:	c6 01       	movw	r24, r12
    ac9a:	c0 96       	adiw	r24, 0x30	; 48
    ac9c:	eb d3       	rcall	.+2006   	; 0xb474 <fputc>
    ac9e:	49 c1       	rjmp	.+658    	; 0xaf32 <vfprintf+0x680>
    aca0:	83 36       	cpi	r24, 0x63	; 99
    aca2:	31 f0       	breq	.+12     	; 0xacb0 <vfprintf+0x3fe>
    aca4:	83 37       	cpi	r24, 0x73	; 115
    aca6:	79 f0       	breq	.+30     	; 0xacc6 <vfprintf+0x414>
    aca8:	83 35       	cpi	r24, 0x53	; 83
    acaa:	09 f0       	breq	.+2      	; 0xacae <vfprintf+0x3fc>
    acac:	52 c0       	rjmp	.+164    	; 0xad52 <vfprintf+0x4a0>
    acae:	1f c0       	rjmp	.+62     	; 0xacee <vfprintf+0x43c>
    acb0:	56 01       	movw	r10, r12
    acb2:	32 e0       	ldi	r19, 0x02	; 2
    acb4:	a3 0e       	add	r10, r19
    acb6:	b1 1c       	adc	r11, r1
    acb8:	f6 01       	movw	r30, r12
    acba:	80 81       	ld	r24, Z
    acbc:	89 83       	std	Y+1, r24	; 0x01
    acbe:	01 e0       	ldi	r16, 0x01	; 1
    acc0:	10 e0       	ldi	r17, 0x00	; 0
    acc2:	63 01       	movw	r12, r6
    acc4:	11 c0       	rjmp	.+34     	; 0xace8 <vfprintf+0x436>
    acc6:	56 01       	movw	r10, r12
    acc8:	f2 e0       	ldi	r31, 0x02	; 2
    acca:	af 0e       	add	r10, r31
    accc:	b1 1c       	adc	r11, r1
    acce:	f6 01       	movw	r30, r12
    acd0:	c0 80       	ld	r12, Z
    acd2:	d1 80       	ldd	r13, Z+1	; 0x01
    acd4:	96 fe       	sbrs	r9, 6
    acd6:	03 c0       	rjmp	.+6      	; 0xacde <vfprintf+0x42c>
    acd8:	61 2f       	mov	r22, r17
    acda:	70 e0       	ldi	r23, 0x00	; 0
    acdc:	02 c0       	rjmp	.+4      	; 0xace2 <vfprintf+0x430>
    acde:	6f ef       	ldi	r22, 0xFF	; 255
    ace0:	7f ef       	ldi	r23, 0xFF	; 255
    ace2:	c6 01       	movw	r24, r12
    ace4:	bc d3       	rcall	.+1912   	; 0xb45e <strnlen>
    ace6:	8c 01       	movw	r16, r24
    ace8:	f9 2d       	mov	r31, r9
    acea:	ff 77       	andi	r31, 0x7F	; 127
    acec:	13 c0       	rjmp	.+38     	; 0xad14 <vfprintf+0x462>
    acee:	56 01       	movw	r10, r12
    acf0:	22 e0       	ldi	r18, 0x02	; 2
    acf2:	a2 0e       	add	r10, r18
    acf4:	b1 1c       	adc	r11, r1
    acf6:	f6 01       	movw	r30, r12
    acf8:	c0 80       	ld	r12, Z
    acfa:	d1 80       	ldd	r13, Z+1	; 0x01
    acfc:	96 fe       	sbrs	r9, 6
    acfe:	03 c0       	rjmp	.+6      	; 0xad06 <vfprintf+0x454>
    ad00:	61 2f       	mov	r22, r17
    ad02:	70 e0       	ldi	r23, 0x00	; 0
    ad04:	02 c0       	rjmp	.+4      	; 0xad0a <vfprintf+0x458>
    ad06:	6f ef       	ldi	r22, 0xFF	; 255
    ad08:	7f ef       	ldi	r23, 0xFF	; 255
    ad0a:	c6 01       	movw	r24, r12
    ad0c:	8d d3       	rcall	.+1818   	; 0xb428 <strnlen_P>
    ad0e:	8c 01       	movw	r16, r24
    ad10:	f9 2d       	mov	r31, r9
    ad12:	f0 68       	ori	r31, 0x80	; 128
    ad14:	9f 2e       	mov	r9, r31
    ad16:	f3 fd       	sbrc	r31, 3
    ad18:	18 c0       	rjmp	.+48     	; 0xad4a <vfprintf+0x498>
    ad1a:	85 2d       	mov	r24, r5
    ad1c:	90 e0       	ldi	r25, 0x00	; 0
    ad1e:	08 17       	cp	r16, r24
    ad20:	19 07       	cpc	r17, r25
    ad22:	98 f4       	brcc	.+38     	; 0xad4a <vfprintf+0x498>
    ad24:	b7 01       	movw	r22, r14
    ad26:	80 e2       	ldi	r24, 0x20	; 32
    ad28:	90 e0       	ldi	r25, 0x00	; 0
    ad2a:	a4 d3       	rcall	.+1864   	; 0xb474 <fputc>
    ad2c:	5a 94       	dec	r5
    ad2e:	f5 cf       	rjmp	.-22     	; 0xad1a <vfprintf+0x468>
    ad30:	f6 01       	movw	r30, r12
    ad32:	97 fc       	sbrc	r9, 7
    ad34:	85 91       	lpm	r24, Z+
    ad36:	97 fe       	sbrs	r9, 7
    ad38:	81 91       	ld	r24, Z+
    ad3a:	6f 01       	movw	r12, r30
    ad3c:	b7 01       	movw	r22, r14
    ad3e:	90 e0       	ldi	r25, 0x00	; 0
    ad40:	99 d3       	rcall	.+1842   	; 0xb474 <fputc>
    ad42:	51 10       	cpse	r5, r1
    ad44:	5a 94       	dec	r5
    ad46:	01 50       	subi	r16, 0x01	; 1
    ad48:	11 09       	sbc	r17, r1
    ad4a:	01 15       	cp	r16, r1
    ad4c:	11 05       	cpc	r17, r1
    ad4e:	81 f7       	brne	.-32     	; 0xad30 <vfprintf+0x47e>
    ad50:	f0 c0       	rjmp	.+480    	; 0xaf32 <vfprintf+0x680>
    ad52:	84 36       	cpi	r24, 0x64	; 100
    ad54:	11 f0       	breq	.+4      	; 0xad5a <vfprintf+0x4a8>
    ad56:	89 36       	cpi	r24, 0x69	; 105
    ad58:	59 f5       	brne	.+86     	; 0xadb0 <vfprintf+0x4fe>
    ad5a:	56 01       	movw	r10, r12
    ad5c:	97 fe       	sbrs	r9, 7
    ad5e:	09 c0       	rjmp	.+18     	; 0xad72 <vfprintf+0x4c0>
    ad60:	24 e0       	ldi	r18, 0x04	; 4
    ad62:	a2 0e       	add	r10, r18
    ad64:	b1 1c       	adc	r11, r1
    ad66:	f6 01       	movw	r30, r12
    ad68:	60 81       	ld	r22, Z
    ad6a:	71 81       	ldd	r23, Z+1	; 0x01
    ad6c:	82 81       	ldd	r24, Z+2	; 0x02
    ad6e:	93 81       	ldd	r25, Z+3	; 0x03
    ad70:	0a c0       	rjmp	.+20     	; 0xad86 <vfprintf+0x4d4>
    ad72:	f2 e0       	ldi	r31, 0x02	; 2
    ad74:	af 0e       	add	r10, r31
    ad76:	b1 1c       	adc	r11, r1
    ad78:	f6 01       	movw	r30, r12
    ad7a:	60 81       	ld	r22, Z
    ad7c:	71 81       	ldd	r23, Z+1	; 0x01
    ad7e:	07 2e       	mov	r0, r23
    ad80:	00 0c       	add	r0, r0
    ad82:	88 0b       	sbc	r24, r24
    ad84:	99 0b       	sbc	r25, r25
    ad86:	f9 2d       	mov	r31, r9
    ad88:	ff 76       	andi	r31, 0x6F	; 111
    ad8a:	9f 2e       	mov	r9, r31
    ad8c:	97 ff       	sbrs	r25, 7
    ad8e:	09 c0       	rjmp	.+18     	; 0xada2 <vfprintf+0x4f0>
    ad90:	90 95       	com	r25
    ad92:	80 95       	com	r24
    ad94:	70 95       	com	r23
    ad96:	61 95       	neg	r22
    ad98:	7f 4f       	sbci	r23, 0xFF	; 255
    ad9a:	8f 4f       	sbci	r24, 0xFF	; 255
    ad9c:	9f 4f       	sbci	r25, 0xFF	; 255
    ad9e:	f0 68       	ori	r31, 0x80	; 128
    ada0:	9f 2e       	mov	r9, r31
    ada2:	2a e0       	ldi	r18, 0x0A	; 10
    ada4:	30 e0       	ldi	r19, 0x00	; 0
    ada6:	a3 01       	movw	r20, r6
    ada8:	d9 d3       	rcall	.+1970   	; 0xb55c <__ultoa_invert>
    adaa:	c8 2e       	mov	r12, r24
    adac:	c6 18       	sub	r12, r6
    adae:	3e c0       	rjmp	.+124    	; 0xae2c <vfprintf+0x57a>
    adb0:	09 2d       	mov	r16, r9
    adb2:	85 37       	cpi	r24, 0x75	; 117
    adb4:	21 f4       	brne	.+8      	; 0xadbe <vfprintf+0x50c>
    adb6:	0f 7e       	andi	r16, 0xEF	; 239
    adb8:	2a e0       	ldi	r18, 0x0A	; 10
    adba:	30 e0       	ldi	r19, 0x00	; 0
    adbc:	1d c0       	rjmp	.+58     	; 0xadf8 <vfprintf+0x546>
    adbe:	09 7f       	andi	r16, 0xF9	; 249
    adc0:	8f 36       	cpi	r24, 0x6F	; 111
    adc2:	91 f0       	breq	.+36     	; 0xade8 <vfprintf+0x536>
    adc4:	18 f4       	brcc	.+6      	; 0xadcc <vfprintf+0x51a>
    adc6:	88 35       	cpi	r24, 0x58	; 88
    adc8:	59 f0       	breq	.+22     	; 0xade0 <vfprintf+0x52e>
    adca:	bc c0       	rjmp	.+376    	; 0xaf44 <vfprintf+0x692>
    adcc:	80 37       	cpi	r24, 0x70	; 112
    adce:	19 f0       	breq	.+6      	; 0xadd6 <vfprintf+0x524>
    add0:	88 37       	cpi	r24, 0x78	; 120
    add2:	11 f0       	breq	.+4      	; 0xadd8 <vfprintf+0x526>
    add4:	b7 c0       	rjmp	.+366    	; 0xaf44 <vfprintf+0x692>
    add6:	00 61       	ori	r16, 0x10	; 16
    add8:	04 ff       	sbrs	r16, 4
    adda:	09 c0       	rjmp	.+18     	; 0xadee <vfprintf+0x53c>
    addc:	04 60       	ori	r16, 0x04	; 4
    adde:	07 c0       	rjmp	.+14     	; 0xadee <vfprintf+0x53c>
    ade0:	94 fe       	sbrs	r9, 4
    ade2:	08 c0       	rjmp	.+16     	; 0xadf4 <vfprintf+0x542>
    ade4:	06 60       	ori	r16, 0x06	; 6
    ade6:	06 c0       	rjmp	.+12     	; 0xadf4 <vfprintf+0x542>
    ade8:	28 e0       	ldi	r18, 0x08	; 8
    adea:	30 e0       	ldi	r19, 0x00	; 0
    adec:	05 c0       	rjmp	.+10     	; 0xadf8 <vfprintf+0x546>
    adee:	20 e1       	ldi	r18, 0x10	; 16
    adf0:	30 e0       	ldi	r19, 0x00	; 0
    adf2:	02 c0       	rjmp	.+4      	; 0xadf8 <vfprintf+0x546>
    adf4:	20 e1       	ldi	r18, 0x10	; 16
    adf6:	32 e0       	ldi	r19, 0x02	; 2
    adf8:	56 01       	movw	r10, r12
    adfa:	07 ff       	sbrs	r16, 7
    adfc:	09 c0       	rjmp	.+18     	; 0xae10 <vfprintf+0x55e>
    adfe:	84 e0       	ldi	r24, 0x04	; 4
    ae00:	a8 0e       	add	r10, r24
    ae02:	b1 1c       	adc	r11, r1
    ae04:	f6 01       	movw	r30, r12
    ae06:	60 81       	ld	r22, Z
    ae08:	71 81       	ldd	r23, Z+1	; 0x01
    ae0a:	82 81       	ldd	r24, Z+2	; 0x02
    ae0c:	93 81       	ldd	r25, Z+3	; 0x03
    ae0e:	08 c0       	rjmp	.+16     	; 0xae20 <vfprintf+0x56e>
    ae10:	f2 e0       	ldi	r31, 0x02	; 2
    ae12:	af 0e       	add	r10, r31
    ae14:	b1 1c       	adc	r11, r1
    ae16:	f6 01       	movw	r30, r12
    ae18:	60 81       	ld	r22, Z
    ae1a:	71 81       	ldd	r23, Z+1	; 0x01
    ae1c:	80 e0       	ldi	r24, 0x00	; 0
    ae1e:	90 e0       	ldi	r25, 0x00	; 0
    ae20:	a3 01       	movw	r20, r6
    ae22:	9c d3       	rcall	.+1848   	; 0xb55c <__ultoa_invert>
    ae24:	c8 2e       	mov	r12, r24
    ae26:	c6 18       	sub	r12, r6
    ae28:	0f 77       	andi	r16, 0x7F	; 127
    ae2a:	90 2e       	mov	r9, r16
    ae2c:	96 fe       	sbrs	r9, 6
    ae2e:	0b c0       	rjmp	.+22     	; 0xae46 <vfprintf+0x594>
    ae30:	09 2d       	mov	r16, r9
    ae32:	0e 7f       	andi	r16, 0xFE	; 254
    ae34:	c1 16       	cp	r12, r17
    ae36:	50 f4       	brcc	.+20     	; 0xae4c <vfprintf+0x59a>
    ae38:	94 fe       	sbrs	r9, 4
    ae3a:	0a c0       	rjmp	.+20     	; 0xae50 <vfprintf+0x59e>
    ae3c:	92 fc       	sbrc	r9, 2
    ae3e:	08 c0       	rjmp	.+16     	; 0xae50 <vfprintf+0x59e>
    ae40:	09 2d       	mov	r16, r9
    ae42:	0e 7e       	andi	r16, 0xEE	; 238
    ae44:	05 c0       	rjmp	.+10     	; 0xae50 <vfprintf+0x59e>
    ae46:	dc 2c       	mov	r13, r12
    ae48:	09 2d       	mov	r16, r9
    ae4a:	03 c0       	rjmp	.+6      	; 0xae52 <vfprintf+0x5a0>
    ae4c:	dc 2c       	mov	r13, r12
    ae4e:	01 c0       	rjmp	.+2      	; 0xae52 <vfprintf+0x5a0>
    ae50:	d1 2e       	mov	r13, r17
    ae52:	04 ff       	sbrs	r16, 4
    ae54:	0d c0       	rjmp	.+26     	; 0xae70 <vfprintf+0x5be>
    ae56:	fe 01       	movw	r30, r28
    ae58:	ec 0d       	add	r30, r12
    ae5a:	f1 1d       	adc	r31, r1
    ae5c:	80 81       	ld	r24, Z
    ae5e:	80 33       	cpi	r24, 0x30	; 48
    ae60:	11 f4       	brne	.+4      	; 0xae66 <vfprintf+0x5b4>
    ae62:	09 7e       	andi	r16, 0xE9	; 233
    ae64:	09 c0       	rjmp	.+18     	; 0xae78 <vfprintf+0x5c6>
    ae66:	02 ff       	sbrs	r16, 2
    ae68:	06 c0       	rjmp	.+12     	; 0xae76 <vfprintf+0x5c4>
    ae6a:	d3 94       	inc	r13
    ae6c:	d3 94       	inc	r13
    ae6e:	04 c0       	rjmp	.+8      	; 0xae78 <vfprintf+0x5c6>
    ae70:	80 2f       	mov	r24, r16
    ae72:	86 78       	andi	r24, 0x86	; 134
    ae74:	09 f0       	breq	.+2      	; 0xae78 <vfprintf+0x5c6>
    ae76:	d3 94       	inc	r13
    ae78:	03 fd       	sbrc	r16, 3
    ae7a:	10 c0       	rjmp	.+32     	; 0xae9c <vfprintf+0x5ea>
    ae7c:	00 ff       	sbrs	r16, 0
    ae7e:	06 c0       	rjmp	.+12     	; 0xae8c <vfprintf+0x5da>
    ae80:	1c 2d       	mov	r17, r12
    ae82:	d5 14       	cp	r13, r5
    ae84:	78 f4       	brcc	.+30     	; 0xaea4 <vfprintf+0x5f2>
    ae86:	15 0d       	add	r17, r5
    ae88:	1d 19       	sub	r17, r13
    ae8a:	0c c0       	rjmp	.+24     	; 0xaea4 <vfprintf+0x5f2>
    ae8c:	d5 14       	cp	r13, r5
    ae8e:	50 f4       	brcc	.+20     	; 0xaea4 <vfprintf+0x5f2>
    ae90:	b7 01       	movw	r22, r14
    ae92:	80 e2       	ldi	r24, 0x20	; 32
    ae94:	90 e0       	ldi	r25, 0x00	; 0
    ae96:	ee d2       	rcall	.+1500   	; 0xb474 <fputc>
    ae98:	d3 94       	inc	r13
    ae9a:	f8 cf       	rjmp	.-16     	; 0xae8c <vfprintf+0x5da>
    ae9c:	d5 14       	cp	r13, r5
    ae9e:	10 f4       	brcc	.+4      	; 0xaea4 <vfprintf+0x5f2>
    aea0:	5d 18       	sub	r5, r13
    aea2:	01 c0       	rjmp	.+2      	; 0xaea6 <vfprintf+0x5f4>
    aea4:	51 2c       	mov	r5, r1
    aea6:	04 ff       	sbrs	r16, 4
    aea8:	0f c0       	rjmp	.+30     	; 0xaec8 <vfprintf+0x616>
    aeaa:	b7 01       	movw	r22, r14
    aeac:	80 e3       	ldi	r24, 0x30	; 48
    aeae:	90 e0       	ldi	r25, 0x00	; 0
    aeb0:	e1 d2       	rcall	.+1474   	; 0xb474 <fputc>
    aeb2:	02 ff       	sbrs	r16, 2
    aeb4:	16 c0       	rjmp	.+44     	; 0xaee2 <vfprintf+0x630>
    aeb6:	01 fd       	sbrc	r16, 1
    aeb8:	03 c0       	rjmp	.+6      	; 0xaec0 <vfprintf+0x60e>
    aeba:	88 e7       	ldi	r24, 0x78	; 120
    aebc:	90 e0       	ldi	r25, 0x00	; 0
    aebe:	02 c0       	rjmp	.+4      	; 0xaec4 <vfprintf+0x612>
    aec0:	88 e5       	ldi	r24, 0x58	; 88
    aec2:	90 e0       	ldi	r25, 0x00	; 0
    aec4:	b7 01       	movw	r22, r14
    aec6:	0c c0       	rjmp	.+24     	; 0xaee0 <vfprintf+0x62e>
    aec8:	80 2f       	mov	r24, r16
    aeca:	86 78       	andi	r24, 0x86	; 134
    aecc:	51 f0       	breq	.+20     	; 0xaee2 <vfprintf+0x630>
    aece:	01 ff       	sbrs	r16, 1
    aed0:	02 c0       	rjmp	.+4      	; 0xaed6 <vfprintf+0x624>
    aed2:	8b e2       	ldi	r24, 0x2B	; 43
    aed4:	01 c0       	rjmp	.+2      	; 0xaed8 <vfprintf+0x626>
    aed6:	80 e2       	ldi	r24, 0x20	; 32
    aed8:	07 fd       	sbrc	r16, 7
    aeda:	8d e2       	ldi	r24, 0x2D	; 45
    aedc:	b7 01       	movw	r22, r14
    aede:	90 e0       	ldi	r25, 0x00	; 0
    aee0:	c9 d2       	rcall	.+1426   	; 0xb474 <fputc>
    aee2:	c1 16       	cp	r12, r17
    aee4:	30 f4       	brcc	.+12     	; 0xaef2 <vfprintf+0x640>
    aee6:	b7 01       	movw	r22, r14
    aee8:	80 e3       	ldi	r24, 0x30	; 48
    aeea:	90 e0       	ldi	r25, 0x00	; 0
    aeec:	c3 d2       	rcall	.+1414   	; 0xb474 <fputc>
    aeee:	11 50       	subi	r17, 0x01	; 1
    aef0:	f8 cf       	rjmp	.-16     	; 0xaee2 <vfprintf+0x630>
    aef2:	ca 94       	dec	r12
    aef4:	f3 01       	movw	r30, r6
    aef6:	ec 0d       	add	r30, r12
    aef8:	f1 1d       	adc	r31, r1
    aefa:	80 81       	ld	r24, Z
    aefc:	b7 01       	movw	r22, r14
    aefe:	90 e0       	ldi	r25, 0x00	; 0
    af00:	b9 d2       	rcall	.+1394   	; 0xb474 <fputc>
    af02:	c1 10       	cpse	r12, r1
    af04:	f6 cf       	rjmp	.-20     	; 0xaef2 <vfprintf+0x640>
    af06:	15 c0       	rjmp	.+42     	; 0xaf32 <vfprintf+0x680>
    af08:	f4 e0       	ldi	r31, 0x04	; 4
    af0a:	f5 15       	cp	r31, r5
    af0c:	50 f5       	brcc	.+84     	; 0xaf62 <vfprintf+0x6b0>
    af0e:	84 e0       	ldi	r24, 0x04	; 4
    af10:	58 1a       	sub	r5, r24
    af12:	93 fe       	sbrs	r9, 3
    af14:	1e c0       	rjmp	.+60     	; 0xaf52 <vfprintf+0x6a0>
    af16:	01 11       	cpse	r16, r1
    af18:	25 c0       	rjmp	.+74     	; 0xaf64 <vfprintf+0x6b2>
    af1a:	2c 85       	ldd	r18, Y+12	; 0x0c
    af1c:	23 ff       	sbrs	r18, 3
    af1e:	27 c0       	rjmp	.+78     	; 0xaf6e <vfprintf+0x6bc>
    af20:	0e ee       	ldi	r16, 0xEE	; 238
    af22:	18 e0       	ldi	r17, 0x08	; 8
    af24:	39 2d       	mov	r19, r9
    af26:	30 71       	andi	r19, 0x10	; 16
    af28:	93 2e       	mov	r9, r19
    af2a:	f8 01       	movw	r30, r16
    af2c:	84 91       	lpm	r24, Z
    af2e:	81 11       	cpse	r24, r1
    af30:	21 c0       	rjmp	.+66     	; 0xaf74 <vfprintf+0x6c2>
    af32:	55 20       	and	r5, r5
    af34:	09 f4       	brne	.+2      	; 0xaf38 <vfprintf+0x686>
    af36:	fc cc       	rjmp	.-1544   	; 0xa930 <vfprintf+0x7e>
    af38:	b7 01       	movw	r22, r14
    af3a:	80 e2       	ldi	r24, 0x20	; 32
    af3c:	90 e0       	ldi	r25, 0x00	; 0
    af3e:	9a d2       	rcall	.+1332   	; 0xb474 <fputc>
    af40:	5a 94       	dec	r5
    af42:	f7 cf       	rjmp	.-18     	; 0xaf32 <vfprintf+0x680>
    af44:	f7 01       	movw	r30, r14
    af46:	86 81       	ldd	r24, Z+6	; 0x06
    af48:	97 81       	ldd	r25, Z+7	; 0x07
    af4a:	23 c0       	rjmp	.+70     	; 0xaf92 <vfprintf+0x6e0>
    af4c:	8f ef       	ldi	r24, 0xFF	; 255
    af4e:	9f ef       	ldi	r25, 0xFF	; 255
    af50:	20 c0       	rjmp	.+64     	; 0xaf92 <vfprintf+0x6e0>
    af52:	b7 01       	movw	r22, r14
    af54:	80 e2       	ldi	r24, 0x20	; 32
    af56:	90 e0       	ldi	r25, 0x00	; 0
    af58:	8d d2       	rcall	.+1306   	; 0xb474 <fputc>
    af5a:	5a 94       	dec	r5
    af5c:	51 10       	cpse	r5, r1
    af5e:	f9 cf       	rjmp	.-14     	; 0xaf52 <vfprintf+0x6a0>
    af60:	da cf       	rjmp	.-76     	; 0xaf16 <vfprintf+0x664>
    af62:	51 2c       	mov	r5, r1
    af64:	b7 01       	movw	r22, r14
    af66:	80 2f       	mov	r24, r16
    af68:	90 e0       	ldi	r25, 0x00	; 0
    af6a:	84 d2       	rcall	.+1288   	; 0xb474 <fputc>
    af6c:	d6 cf       	rjmp	.-84     	; 0xaf1a <vfprintf+0x668>
    af6e:	02 ef       	ldi	r16, 0xF2	; 242
    af70:	18 e0       	ldi	r17, 0x08	; 8
    af72:	d8 cf       	rjmp	.-80     	; 0xaf24 <vfprintf+0x672>
    af74:	91 10       	cpse	r9, r1
    af76:	80 52       	subi	r24, 0x20	; 32
    af78:	b7 01       	movw	r22, r14
    af7a:	90 e0       	ldi	r25, 0x00	; 0
    af7c:	7b d2       	rcall	.+1270   	; 0xb474 <fputc>
    af7e:	0f 5f       	subi	r16, 0xFF	; 255
    af80:	1f 4f       	sbci	r17, 0xFF	; 255
    af82:	d3 cf       	rjmp	.-90     	; 0xaf2a <vfprintf+0x678>
    af84:	23 e0       	ldi	r18, 0x03	; 3
    af86:	25 15       	cp	r18, r5
    af88:	10 f4       	brcc	.+4      	; 0xaf8e <vfprintf+0x6dc>
    af8a:	83 e0       	ldi	r24, 0x03	; 3
    af8c:	c1 cf       	rjmp	.-126    	; 0xaf10 <vfprintf+0x65e>
    af8e:	51 2c       	mov	r5, r1
    af90:	c4 cf       	rjmp	.-120    	; 0xaf1a <vfprintf+0x668>
    af92:	60 96       	adiw	r28, 0x10	; 16
    af94:	0f b6       	in	r0, 0x3f	; 63
    af96:	f8 94       	cli
    af98:	de bf       	out	0x3e, r29	; 62
    af9a:	0f be       	out	0x3f, r0	; 63
    af9c:	cd bf       	out	0x3d, r28	; 61
    af9e:	df 91       	pop	r29
    afa0:	cf 91       	pop	r28
    afa2:	1f 91       	pop	r17
    afa4:	0f 91       	pop	r16
    afa6:	ff 90       	pop	r15
    afa8:	ef 90       	pop	r14
    afaa:	df 90       	pop	r13
    afac:	cf 90       	pop	r12
    afae:	bf 90       	pop	r11
    afb0:	af 90       	pop	r10
    afb2:	9f 90       	pop	r9
    afb4:	8f 90       	pop	r8
    afb6:	7f 90       	pop	r7
    afb8:	6f 90       	pop	r6
    afba:	5f 90       	pop	r5
    afbc:	4f 90       	pop	r4
    afbe:	3f 90       	pop	r3
    afc0:	2f 90       	pop	r2
    afc2:	08 95       	ret

0000afc4 <__udivmodsi4>:
    afc4:	a1 e2       	ldi	r26, 0x21	; 33
    afc6:	1a 2e       	mov	r1, r26
    afc8:	aa 1b       	sub	r26, r26
    afca:	bb 1b       	sub	r27, r27
    afcc:	fd 01       	movw	r30, r26
    afce:	0d c0       	rjmp	.+26     	; 0xafea <__udivmodsi4_ep>

0000afd0 <__udivmodsi4_loop>:
    afd0:	aa 1f       	adc	r26, r26
    afd2:	bb 1f       	adc	r27, r27
    afd4:	ee 1f       	adc	r30, r30
    afd6:	ff 1f       	adc	r31, r31
    afd8:	a2 17       	cp	r26, r18
    afda:	b3 07       	cpc	r27, r19
    afdc:	e4 07       	cpc	r30, r20
    afde:	f5 07       	cpc	r31, r21
    afe0:	20 f0       	brcs	.+8      	; 0xafea <__udivmodsi4_ep>
    afe2:	a2 1b       	sub	r26, r18
    afe4:	b3 0b       	sbc	r27, r19
    afe6:	e4 0b       	sbc	r30, r20
    afe8:	f5 0b       	sbc	r31, r21

0000afea <__udivmodsi4_ep>:
    afea:	66 1f       	adc	r22, r22
    afec:	77 1f       	adc	r23, r23
    afee:	88 1f       	adc	r24, r24
    aff0:	99 1f       	adc	r25, r25
    aff2:	1a 94       	dec	r1
    aff4:	69 f7       	brne	.-38     	; 0xafd0 <__udivmodsi4_loop>
    aff6:	60 95       	com	r22
    aff8:	70 95       	com	r23
    affa:	80 95       	com	r24
    affc:	90 95       	com	r25
    affe:	9b 01       	movw	r18, r22
    b000:	ac 01       	movw	r20, r24
    b002:	bd 01       	movw	r22, r26
    b004:	cf 01       	movw	r24, r30
    b006:	08 95       	ret

0000b008 <__tablejump2__>:
    b008:	ee 0f       	add	r30, r30
    b00a:	ff 1f       	adc	r31, r31
    b00c:	88 1f       	adc	r24, r24
    b00e:	8b bf       	out	0x3b, r24	; 59
    b010:	07 90       	elpm	r0, Z+
    b012:	f6 91       	elpm	r31, Z
    b014:	e0 2d       	mov	r30, r0
    b016:	19 94       	eijmp

0000b018 <__umulhisi3>:
    b018:	a2 9f       	mul	r26, r18
    b01a:	b0 01       	movw	r22, r0
    b01c:	b3 9f       	mul	r27, r19
    b01e:	c0 01       	movw	r24, r0
    b020:	a3 9f       	mul	r26, r19
    b022:	70 0d       	add	r23, r0
    b024:	81 1d       	adc	r24, r1
    b026:	11 24       	eor	r1, r1
    b028:	91 1d       	adc	r25, r1
    b02a:	b2 9f       	mul	r27, r18
    b02c:	70 0d       	add	r23, r0
    b02e:	81 1d       	adc	r24, r1
    b030:	11 24       	eor	r1, r1
    b032:	91 1d       	adc	r25, r1
    b034:	08 95       	ret

0000b036 <malloc>:
    b036:	0f 93       	push	r16
    b038:	1f 93       	push	r17
    b03a:	cf 93       	push	r28
    b03c:	df 93       	push	r29
    b03e:	82 30       	cpi	r24, 0x02	; 2
    b040:	91 05       	cpc	r25, r1
    b042:	10 f4       	brcc	.+4      	; 0xb048 <malloc+0x12>
    b044:	82 e0       	ldi	r24, 0x02	; 2
    b046:	90 e0       	ldi	r25, 0x00	; 0
    b048:	e0 91 31 0b 	lds	r30, 0x0B31	; 0x800b31 <__flp>
    b04c:	f0 91 32 0b 	lds	r31, 0x0B32	; 0x800b32 <__flp+0x1>
    b050:	20 e0       	ldi	r18, 0x00	; 0
    b052:	30 e0       	ldi	r19, 0x00	; 0
    b054:	a0 e0       	ldi	r26, 0x00	; 0
    b056:	b0 e0       	ldi	r27, 0x00	; 0
    b058:	30 97       	sbiw	r30, 0x00	; 0
    b05a:	19 f1       	breq	.+70     	; 0xb0a2 <malloc+0x6c>
    b05c:	40 81       	ld	r20, Z
    b05e:	51 81       	ldd	r21, Z+1	; 0x01
    b060:	02 81       	ldd	r16, Z+2	; 0x02
    b062:	13 81       	ldd	r17, Z+3	; 0x03
    b064:	48 17       	cp	r20, r24
    b066:	59 07       	cpc	r21, r25
    b068:	c8 f0       	brcs	.+50     	; 0xb09c <malloc+0x66>
    b06a:	84 17       	cp	r24, r20
    b06c:	95 07       	cpc	r25, r21
    b06e:	69 f4       	brne	.+26     	; 0xb08a <malloc+0x54>
    b070:	10 97       	sbiw	r26, 0x00	; 0
    b072:	31 f0       	breq	.+12     	; 0xb080 <malloc+0x4a>
    b074:	12 96       	adiw	r26, 0x02	; 2
    b076:	0c 93       	st	X, r16
    b078:	12 97       	sbiw	r26, 0x02	; 2
    b07a:	13 96       	adiw	r26, 0x03	; 3
    b07c:	1c 93       	st	X, r17
    b07e:	27 c0       	rjmp	.+78     	; 0xb0ce <malloc+0x98>
    b080:	00 93 31 0b 	sts	0x0B31, r16	; 0x800b31 <__flp>
    b084:	10 93 32 0b 	sts	0x0B32, r17	; 0x800b32 <__flp+0x1>
    b088:	22 c0       	rjmp	.+68     	; 0xb0ce <malloc+0x98>
    b08a:	21 15       	cp	r18, r1
    b08c:	31 05       	cpc	r19, r1
    b08e:	19 f0       	breq	.+6      	; 0xb096 <malloc+0x60>
    b090:	42 17       	cp	r20, r18
    b092:	53 07       	cpc	r21, r19
    b094:	18 f4       	brcc	.+6      	; 0xb09c <malloc+0x66>
    b096:	9a 01       	movw	r18, r20
    b098:	bd 01       	movw	r22, r26
    b09a:	ef 01       	movw	r28, r30
    b09c:	df 01       	movw	r26, r30
    b09e:	f8 01       	movw	r30, r16
    b0a0:	db cf       	rjmp	.-74     	; 0xb058 <malloc+0x22>
    b0a2:	21 15       	cp	r18, r1
    b0a4:	31 05       	cpc	r19, r1
    b0a6:	f9 f0       	breq	.+62     	; 0xb0e6 <malloc+0xb0>
    b0a8:	28 1b       	sub	r18, r24
    b0aa:	39 0b       	sbc	r19, r25
    b0ac:	24 30       	cpi	r18, 0x04	; 4
    b0ae:	31 05       	cpc	r19, r1
    b0b0:	80 f4       	brcc	.+32     	; 0xb0d2 <malloc+0x9c>
    b0b2:	8a 81       	ldd	r24, Y+2	; 0x02
    b0b4:	9b 81       	ldd	r25, Y+3	; 0x03
    b0b6:	61 15       	cp	r22, r1
    b0b8:	71 05       	cpc	r23, r1
    b0ba:	21 f0       	breq	.+8      	; 0xb0c4 <malloc+0x8e>
    b0bc:	fb 01       	movw	r30, r22
    b0be:	93 83       	std	Z+3, r25	; 0x03
    b0c0:	82 83       	std	Z+2, r24	; 0x02
    b0c2:	04 c0       	rjmp	.+8      	; 0xb0cc <malloc+0x96>
    b0c4:	90 93 32 0b 	sts	0x0B32, r25	; 0x800b32 <__flp+0x1>
    b0c8:	80 93 31 0b 	sts	0x0B31, r24	; 0x800b31 <__flp>
    b0cc:	fe 01       	movw	r30, r28
    b0ce:	32 96       	adiw	r30, 0x02	; 2
    b0d0:	44 c0       	rjmp	.+136    	; 0xb15a <malloc+0x124>
    b0d2:	fe 01       	movw	r30, r28
    b0d4:	e2 0f       	add	r30, r18
    b0d6:	f3 1f       	adc	r31, r19
    b0d8:	81 93       	st	Z+, r24
    b0da:	91 93       	st	Z+, r25
    b0dc:	22 50       	subi	r18, 0x02	; 2
    b0de:	31 09       	sbc	r19, r1
    b0e0:	39 83       	std	Y+1, r19	; 0x01
    b0e2:	28 83       	st	Y, r18
    b0e4:	3a c0       	rjmp	.+116    	; 0xb15a <malloc+0x124>
    b0e6:	20 91 2f 0b 	lds	r18, 0x0B2F	; 0x800b2f <__brkval>
    b0ea:	30 91 30 0b 	lds	r19, 0x0B30	; 0x800b30 <__brkval+0x1>
    b0ee:	23 2b       	or	r18, r19
    b0f0:	41 f4       	brne	.+16     	; 0xb102 <malloc+0xcc>
    b0f2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    b0f6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    b0fa:	30 93 30 0b 	sts	0x0B30, r19	; 0x800b30 <__brkval+0x1>
    b0fe:	20 93 2f 0b 	sts	0x0B2F, r18	; 0x800b2f <__brkval>
    b102:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    b106:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    b10a:	21 15       	cp	r18, r1
    b10c:	31 05       	cpc	r19, r1
    b10e:	41 f4       	brne	.+16     	; 0xb120 <malloc+0xea>
    b110:	2d b7       	in	r18, 0x3d	; 61
    b112:	3e b7       	in	r19, 0x3e	; 62
    b114:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    b118:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    b11c:	24 1b       	sub	r18, r20
    b11e:	35 0b       	sbc	r19, r21
    b120:	e0 91 2f 0b 	lds	r30, 0x0B2F	; 0x800b2f <__brkval>
    b124:	f0 91 30 0b 	lds	r31, 0x0B30	; 0x800b30 <__brkval+0x1>
    b128:	e2 17       	cp	r30, r18
    b12a:	f3 07       	cpc	r31, r19
    b12c:	a0 f4       	brcc	.+40     	; 0xb156 <malloc+0x120>
    b12e:	2e 1b       	sub	r18, r30
    b130:	3f 0b       	sbc	r19, r31
    b132:	28 17       	cp	r18, r24
    b134:	39 07       	cpc	r19, r25
    b136:	78 f0       	brcs	.+30     	; 0xb156 <malloc+0x120>
    b138:	ac 01       	movw	r20, r24
    b13a:	4e 5f       	subi	r20, 0xFE	; 254
    b13c:	5f 4f       	sbci	r21, 0xFF	; 255
    b13e:	24 17       	cp	r18, r20
    b140:	35 07       	cpc	r19, r21
    b142:	48 f0       	brcs	.+18     	; 0xb156 <malloc+0x120>
    b144:	4e 0f       	add	r20, r30
    b146:	5f 1f       	adc	r21, r31
    b148:	50 93 30 0b 	sts	0x0B30, r21	; 0x800b30 <__brkval+0x1>
    b14c:	40 93 2f 0b 	sts	0x0B2F, r20	; 0x800b2f <__brkval>
    b150:	81 93       	st	Z+, r24
    b152:	91 93       	st	Z+, r25
    b154:	02 c0       	rjmp	.+4      	; 0xb15a <malloc+0x124>
    b156:	e0 e0       	ldi	r30, 0x00	; 0
    b158:	f0 e0       	ldi	r31, 0x00	; 0
    b15a:	cf 01       	movw	r24, r30
    b15c:	df 91       	pop	r29
    b15e:	cf 91       	pop	r28
    b160:	1f 91       	pop	r17
    b162:	0f 91       	pop	r16
    b164:	08 95       	ret

0000b166 <free>:
    b166:	cf 93       	push	r28
    b168:	df 93       	push	r29
    b16a:	00 97       	sbiw	r24, 0x00	; 0
    b16c:	09 f4       	brne	.+2      	; 0xb170 <free+0xa>
    b16e:	81 c0       	rjmp	.+258    	; 0xb272 <free+0x10c>
    b170:	fc 01       	movw	r30, r24
    b172:	32 97       	sbiw	r30, 0x02	; 2
    b174:	13 82       	std	Z+3, r1	; 0x03
    b176:	12 82       	std	Z+2, r1	; 0x02
    b178:	a0 91 31 0b 	lds	r26, 0x0B31	; 0x800b31 <__flp>
    b17c:	b0 91 32 0b 	lds	r27, 0x0B32	; 0x800b32 <__flp+0x1>
    b180:	10 97       	sbiw	r26, 0x00	; 0
    b182:	81 f4       	brne	.+32     	; 0xb1a4 <free+0x3e>
    b184:	20 81       	ld	r18, Z
    b186:	31 81       	ldd	r19, Z+1	; 0x01
    b188:	82 0f       	add	r24, r18
    b18a:	93 1f       	adc	r25, r19
    b18c:	20 91 2f 0b 	lds	r18, 0x0B2F	; 0x800b2f <__brkval>
    b190:	30 91 30 0b 	lds	r19, 0x0B30	; 0x800b30 <__brkval+0x1>
    b194:	28 17       	cp	r18, r24
    b196:	39 07       	cpc	r19, r25
    b198:	51 f5       	brne	.+84     	; 0xb1ee <free+0x88>
    b19a:	f0 93 30 0b 	sts	0x0B30, r31	; 0x800b30 <__brkval+0x1>
    b19e:	e0 93 2f 0b 	sts	0x0B2F, r30	; 0x800b2f <__brkval>
    b1a2:	67 c0       	rjmp	.+206    	; 0xb272 <free+0x10c>
    b1a4:	ed 01       	movw	r28, r26
    b1a6:	20 e0       	ldi	r18, 0x00	; 0
    b1a8:	30 e0       	ldi	r19, 0x00	; 0
    b1aa:	ce 17       	cp	r28, r30
    b1ac:	df 07       	cpc	r29, r31
    b1ae:	40 f4       	brcc	.+16     	; 0xb1c0 <free+0x5a>
    b1b0:	4a 81       	ldd	r20, Y+2	; 0x02
    b1b2:	5b 81       	ldd	r21, Y+3	; 0x03
    b1b4:	9e 01       	movw	r18, r28
    b1b6:	41 15       	cp	r20, r1
    b1b8:	51 05       	cpc	r21, r1
    b1ba:	f1 f0       	breq	.+60     	; 0xb1f8 <free+0x92>
    b1bc:	ea 01       	movw	r28, r20
    b1be:	f5 cf       	rjmp	.-22     	; 0xb1aa <free+0x44>
    b1c0:	d3 83       	std	Z+3, r29	; 0x03
    b1c2:	c2 83       	std	Z+2, r28	; 0x02
    b1c4:	40 81       	ld	r20, Z
    b1c6:	51 81       	ldd	r21, Z+1	; 0x01
    b1c8:	84 0f       	add	r24, r20
    b1ca:	95 1f       	adc	r25, r21
    b1cc:	c8 17       	cp	r28, r24
    b1ce:	d9 07       	cpc	r29, r25
    b1d0:	59 f4       	brne	.+22     	; 0xb1e8 <free+0x82>
    b1d2:	88 81       	ld	r24, Y
    b1d4:	99 81       	ldd	r25, Y+1	; 0x01
    b1d6:	84 0f       	add	r24, r20
    b1d8:	95 1f       	adc	r25, r21
    b1da:	02 96       	adiw	r24, 0x02	; 2
    b1dc:	91 83       	std	Z+1, r25	; 0x01
    b1de:	80 83       	st	Z, r24
    b1e0:	8a 81       	ldd	r24, Y+2	; 0x02
    b1e2:	9b 81       	ldd	r25, Y+3	; 0x03
    b1e4:	93 83       	std	Z+3, r25	; 0x03
    b1e6:	82 83       	std	Z+2, r24	; 0x02
    b1e8:	21 15       	cp	r18, r1
    b1ea:	31 05       	cpc	r19, r1
    b1ec:	29 f4       	brne	.+10     	; 0xb1f8 <free+0x92>
    b1ee:	f0 93 32 0b 	sts	0x0B32, r31	; 0x800b32 <__flp+0x1>
    b1f2:	e0 93 31 0b 	sts	0x0B31, r30	; 0x800b31 <__flp>
    b1f6:	3d c0       	rjmp	.+122    	; 0xb272 <free+0x10c>
    b1f8:	e9 01       	movw	r28, r18
    b1fa:	fb 83       	std	Y+3, r31	; 0x03
    b1fc:	ea 83       	std	Y+2, r30	; 0x02
    b1fe:	49 91       	ld	r20, Y+
    b200:	59 91       	ld	r21, Y+
    b202:	c4 0f       	add	r28, r20
    b204:	d5 1f       	adc	r29, r21
    b206:	ec 17       	cp	r30, r28
    b208:	fd 07       	cpc	r31, r29
    b20a:	61 f4       	brne	.+24     	; 0xb224 <free+0xbe>
    b20c:	80 81       	ld	r24, Z
    b20e:	91 81       	ldd	r25, Z+1	; 0x01
    b210:	84 0f       	add	r24, r20
    b212:	95 1f       	adc	r25, r21
    b214:	02 96       	adiw	r24, 0x02	; 2
    b216:	e9 01       	movw	r28, r18
    b218:	99 83       	std	Y+1, r25	; 0x01
    b21a:	88 83       	st	Y, r24
    b21c:	82 81       	ldd	r24, Z+2	; 0x02
    b21e:	93 81       	ldd	r25, Z+3	; 0x03
    b220:	9b 83       	std	Y+3, r25	; 0x03
    b222:	8a 83       	std	Y+2, r24	; 0x02
    b224:	e0 e0       	ldi	r30, 0x00	; 0
    b226:	f0 e0       	ldi	r31, 0x00	; 0
    b228:	12 96       	adiw	r26, 0x02	; 2
    b22a:	8d 91       	ld	r24, X+
    b22c:	9c 91       	ld	r25, X
    b22e:	13 97       	sbiw	r26, 0x03	; 3
    b230:	00 97       	sbiw	r24, 0x00	; 0
    b232:	19 f0       	breq	.+6      	; 0xb23a <free+0xd4>
    b234:	fd 01       	movw	r30, r26
    b236:	dc 01       	movw	r26, r24
    b238:	f7 cf       	rjmp	.-18     	; 0xb228 <free+0xc2>
    b23a:	8d 91       	ld	r24, X+
    b23c:	9c 91       	ld	r25, X
    b23e:	11 97       	sbiw	r26, 0x01	; 1
    b240:	9d 01       	movw	r18, r26
    b242:	2e 5f       	subi	r18, 0xFE	; 254
    b244:	3f 4f       	sbci	r19, 0xFF	; 255
    b246:	82 0f       	add	r24, r18
    b248:	93 1f       	adc	r25, r19
    b24a:	20 91 2f 0b 	lds	r18, 0x0B2F	; 0x800b2f <__brkval>
    b24e:	30 91 30 0b 	lds	r19, 0x0B30	; 0x800b30 <__brkval+0x1>
    b252:	28 17       	cp	r18, r24
    b254:	39 07       	cpc	r19, r25
    b256:	69 f4       	brne	.+26     	; 0xb272 <free+0x10c>
    b258:	30 97       	sbiw	r30, 0x00	; 0
    b25a:	29 f4       	brne	.+10     	; 0xb266 <free+0x100>
    b25c:	10 92 32 0b 	sts	0x0B32, r1	; 0x800b32 <__flp+0x1>
    b260:	10 92 31 0b 	sts	0x0B31, r1	; 0x800b31 <__flp>
    b264:	02 c0       	rjmp	.+4      	; 0xb26a <free+0x104>
    b266:	13 82       	std	Z+3, r1	; 0x03
    b268:	12 82       	std	Z+2, r1	; 0x02
    b26a:	b0 93 30 0b 	sts	0x0B30, r27	; 0x800b30 <__brkval+0x1>
    b26e:	a0 93 2f 0b 	sts	0x0B2F, r26	; 0x800b2f <__brkval>
    b272:	df 91       	pop	r29
    b274:	cf 91       	pop	r28
    b276:	08 95       	ret

0000b278 <__ftoa_engine>:
    b278:	28 30       	cpi	r18, 0x08	; 8
    b27a:	08 f0       	brcs	.+2      	; 0xb27e <__ftoa_engine+0x6>
    b27c:	27 e0       	ldi	r18, 0x07	; 7
    b27e:	33 27       	eor	r19, r19
    b280:	da 01       	movw	r26, r20
    b282:	99 0f       	add	r25, r25
    b284:	31 1d       	adc	r19, r1
    b286:	87 fd       	sbrc	r24, 7
    b288:	91 60       	ori	r25, 0x01	; 1
    b28a:	00 96       	adiw	r24, 0x00	; 0
    b28c:	61 05       	cpc	r22, r1
    b28e:	71 05       	cpc	r23, r1
    b290:	39 f4       	brne	.+14     	; 0xb2a0 <__ftoa_engine+0x28>
    b292:	32 60       	ori	r19, 0x02	; 2
    b294:	2e 5f       	subi	r18, 0xFE	; 254
    b296:	3d 93       	st	X+, r19
    b298:	30 e3       	ldi	r19, 0x30	; 48
    b29a:	2a 95       	dec	r18
    b29c:	e1 f7       	brne	.-8      	; 0xb296 <__ftoa_engine+0x1e>
    b29e:	08 95       	ret
    b2a0:	9f 3f       	cpi	r25, 0xFF	; 255
    b2a2:	30 f0       	brcs	.+12     	; 0xb2b0 <__ftoa_engine+0x38>
    b2a4:	80 38       	cpi	r24, 0x80	; 128
    b2a6:	71 05       	cpc	r23, r1
    b2a8:	61 05       	cpc	r22, r1
    b2aa:	09 f0       	breq	.+2      	; 0xb2ae <__ftoa_engine+0x36>
    b2ac:	3c 5f       	subi	r19, 0xFC	; 252
    b2ae:	3c 5f       	subi	r19, 0xFC	; 252
    b2b0:	3d 93       	st	X+, r19
    b2b2:	91 30       	cpi	r25, 0x01	; 1
    b2b4:	08 f0       	brcs	.+2      	; 0xb2b8 <__ftoa_engine+0x40>
    b2b6:	80 68       	ori	r24, 0x80	; 128
    b2b8:	91 1d       	adc	r25, r1
    b2ba:	df 93       	push	r29
    b2bc:	cf 93       	push	r28
    b2be:	1f 93       	push	r17
    b2c0:	0f 93       	push	r16
    b2c2:	ff 92       	push	r15
    b2c4:	ef 92       	push	r14
    b2c6:	19 2f       	mov	r17, r25
    b2c8:	98 7f       	andi	r25, 0xF8	; 248
    b2ca:	96 95       	lsr	r25
    b2cc:	e9 2f       	mov	r30, r25
    b2ce:	96 95       	lsr	r25
    b2d0:	96 95       	lsr	r25
    b2d2:	e9 0f       	add	r30, r25
    b2d4:	ff 27       	eor	r31, r31
    b2d6:	e0 5b       	subi	r30, 0xB0	; 176
    b2d8:	f6 4f       	sbci	r31, 0xF6	; 246
    b2da:	99 27       	eor	r25, r25
    b2dc:	33 27       	eor	r19, r19
    b2de:	ee 24       	eor	r14, r14
    b2e0:	ff 24       	eor	r15, r15
    b2e2:	a7 01       	movw	r20, r14
    b2e4:	e7 01       	movw	r28, r14
    b2e6:	05 90       	lpm	r0, Z+
    b2e8:	08 94       	sec
    b2ea:	07 94       	ror	r0
    b2ec:	28 f4       	brcc	.+10     	; 0xb2f8 <__ftoa_engine+0x80>
    b2ee:	36 0f       	add	r19, r22
    b2f0:	e7 1e       	adc	r14, r23
    b2f2:	f8 1e       	adc	r15, r24
    b2f4:	49 1f       	adc	r20, r25
    b2f6:	51 1d       	adc	r21, r1
    b2f8:	66 0f       	add	r22, r22
    b2fa:	77 1f       	adc	r23, r23
    b2fc:	88 1f       	adc	r24, r24
    b2fe:	99 1f       	adc	r25, r25
    b300:	06 94       	lsr	r0
    b302:	a1 f7       	brne	.-24     	; 0xb2ec <__ftoa_engine+0x74>
    b304:	05 90       	lpm	r0, Z+
    b306:	07 94       	ror	r0
    b308:	28 f4       	brcc	.+10     	; 0xb314 <__ftoa_engine+0x9c>
    b30a:	e7 0e       	add	r14, r23
    b30c:	f8 1e       	adc	r15, r24
    b30e:	49 1f       	adc	r20, r25
    b310:	56 1f       	adc	r21, r22
    b312:	c1 1d       	adc	r28, r1
    b314:	77 0f       	add	r23, r23
    b316:	88 1f       	adc	r24, r24
    b318:	99 1f       	adc	r25, r25
    b31a:	66 1f       	adc	r22, r22
    b31c:	06 94       	lsr	r0
    b31e:	a1 f7       	brne	.-24     	; 0xb308 <__ftoa_engine+0x90>
    b320:	05 90       	lpm	r0, Z+
    b322:	07 94       	ror	r0
    b324:	28 f4       	brcc	.+10     	; 0xb330 <__ftoa_engine+0xb8>
    b326:	f8 0e       	add	r15, r24
    b328:	49 1f       	adc	r20, r25
    b32a:	56 1f       	adc	r21, r22
    b32c:	c7 1f       	adc	r28, r23
    b32e:	d1 1d       	adc	r29, r1
    b330:	88 0f       	add	r24, r24
    b332:	99 1f       	adc	r25, r25
    b334:	66 1f       	adc	r22, r22
    b336:	77 1f       	adc	r23, r23
    b338:	06 94       	lsr	r0
    b33a:	a1 f7       	brne	.-24     	; 0xb324 <__ftoa_engine+0xac>
    b33c:	05 90       	lpm	r0, Z+
    b33e:	07 94       	ror	r0
    b340:	20 f4       	brcc	.+8      	; 0xb34a <__ftoa_engine+0xd2>
    b342:	49 0f       	add	r20, r25
    b344:	56 1f       	adc	r21, r22
    b346:	c7 1f       	adc	r28, r23
    b348:	d8 1f       	adc	r29, r24
    b34a:	99 0f       	add	r25, r25
    b34c:	66 1f       	adc	r22, r22
    b34e:	77 1f       	adc	r23, r23
    b350:	88 1f       	adc	r24, r24
    b352:	06 94       	lsr	r0
    b354:	a9 f7       	brne	.-22     	; 0xb340 <__ftoa_engine+0xc8>
    b356:	84 91       	lpm	r24, Z
    b358:	10 95       	com	r17
    b35a:	17 70       	andi	r17, 0x07	; 7
    b35c:	41 f0       	breq	.+16     	; 0xb36e <__ftoa_engine+0xf6>
    b35e:	d6 95       	lsr	r29
    b360:	c7 95       	ror	r28
    b362:	57 95       	ror	r21
    b364:	47 95       	ror	r20
    b366:	f7 94       	ror	r15
    b368:	e7 94       	ror	r14
    b36a:	1a 95       	dec	r17
    b36c:	c1 f7       	brne	.-16     	; 0xb35e <__ftoa_engine+0xe6>
    b36e:	e6 ef       	ldi	r30, 0xF6	; 246
    b370:	f8 e0       	ldi	r31, 0x08	; 8
    b372:	68 94       	set
    b374:	15 90       	lpm	r1, Z+
    b376:	15 91       	lpm	r17, Z+
    b378:	35 91       	lpm	r19, Z+
    b37a:	65 91       	lpm	r22, Z+
    b37c:	95 91       	lpm	r25, Z+
    b37e:	05 90       	lpm	r0, Z+
    b380:	7f e2       	ldi	r23, 0x2F	; 47
    b382:	73 95       	inc	r23
    b384:	e1 18       	sub	r14, r1
    b386:	f1 0a       	sbc	r15, r17
    b388:	43 0b       	sbc	r20, r19
    b38a:	56 0b       	sbc	r21, r22
    b38c:	c9 0b       	sbc	r28, r25
    b38e:	d0 09       	sbc	r29, r0
    b390:	c0 f7       	brcc	.-16     	; 0xb382 <__ftoa_engine+0x10a>
    b392:	e1 0c       	add	r14, r1
    b394:	f1 1e       	adc	r15, r17
    b396:	43 1f       	adc	r20, r19
    b398:	56 1f       	adc	r21, r22
    b39a:	c9 1f       	adc	r28, r25
    b39c:	d0 1d       	adc	r29, r0
    b39e:	7e f4       	brtc	.+30     	; 0xb3be <__ftoa_engine+0x146>
    b3a0:	70 33       	cpi	r23, 0x30	; 48
    b3a2:	11 f4       	brne	.+4      	; 0xb3a8 <__ftoa_engine+0x130>
    b3a4:	8a 95       	dec	r24
    b3a6:	e6 cf       	rjmp	.-52     	; 0xb374 <__ftoa_engine+0xfc>
    b3a8:	e8 94       	clt
    b3aa:	01 50       	subi	r16, 0x01	; 1
    b3ac:	30 f0       	brcs	.+12     	; 0xb3ba <__ftoa_engine+0x142>
    b3ae:	08 0f       	add	r16, r24
    b3b0:	0a f4       	brpl	.+2      	; 0xb3b4 <__ftoa_engine+0x13c>
    b3b2:	00 27       	eor	r16, r16
    b3b4:	02 17       	cp	r16, r18
    b3b6:	08 f4       	brcc	.+2      	; 0xb3ba <__ftoa_engine+0x142>
    b3b8:	20 2f       	mov	r18, r16
    b3ba:	23 95       	inc	r18
    b3bc:	02 2f       	mov	r16, r18
    b3be:	7a 33       	cpi	r23, 0x3A	; 58
    b3c0:	28 f0       	brcs	.+10     	; 0xb3cc <__ftoa_engine+0x154>
    b3c2:	79 e3       	ldi	r23, 0x39	; 57
    b3c4:	7d 93       	st	X+, r23
    b3c6:	2a 95       	dec	r18
    b3c8:	e9 f7       	brne	.-6      	; 0xb3c4 <__ftoa_engine+0x14c>
    b3ca:	10 c0       	rjmp	.+32     	; 0xb3ec <__ftoa_engine+0x174>
    b3cc:	7d 93       	st	X+, r23
    b3ce:	2a 95       	dec	r18
    b3d0:	89 f6       	brne	.-94     	; 0xb374 <__ftoa_engine+0xfc>
    b3d2:	06 94       	lsr	r0
    b3d4:	97 95       	ror	r25
    b3d6:	67 95       	ror	r22
    b3d8:	37 95       	ror	r19
    b3da:	17 95       	ror	r17
    b3dc:	17 94       	ror	r1
    b3de:	e1 18       	sub	r14, r1
    b3e0:	f1 0a       	sbc	r15, r17
    b3e2:	43 0b       	sbc	r20, r19
    b3e4:	56 0b       	sbc	r21, r22
    b3e6:	c9 0b       	sbc	r28, r25
    b3e8:	d0 09       	sbc	r29, r0
    b3ea:	98 f0       	brcs	.+38     	; 0xb412 <__ftoa_engine+0x19a>
    b3ec:	23 95       	inc	r18
    b3ee:	7e 91       	ld	r23, -X
    b3f0:	73 95       	inc	r23
    b3f2:	7a 33       	cpi	r23, 0x3A	; 58
    b3f4:	08 f0       	brcs	.+2      	; 0xb3f8 <__ftoa_engine+0x180>
    b3f6:	70 e3       	ldi	r23, 0x30	; 48
    b3f8:	7c 93       	st	X, r23
    b3fa:	20 13       	cpse	r18, r16
    b3fc:	b8 f7       	brcc	.-18     	; 0xb3ec <__ftoa_engine+0x174>
    b3fe:	7e 91       	ld	r23, -X
    b400:	70 61       	ori	r23, 0x10	; 16
    b402:	7d 93       	st	X+, r23
    b404:	30 f0       	brcs	.+12     	; 0xb412 <__ftoa_engine+0x19a>
    b406:	83 95       	inc	r24
    b408:	71 e3       	ldi	r23, 0x31	; 49
    b40a:	7d 93       	st	X+, r23
    b40c:	70 e3       	ldi	r23, 0x30	; 48
    b40e:	2a 95       	dec	r18
    b410:	e1 f7       	brne	.-8      	; 0xb40a <__ftoa_engine+0x192>
    b412:	11 24       	eor	r1, r1
    b414:	ef 90       	pop	r14
    b416:	ff 90       	pop	r15
    b418:	0f 91       	pop	r16
    b41a:	1f 91       	pop	r17
    b41c:	cf 91       	pop	r28
    b41e:	df 91       	pop	r29
    b420:	99 27       	eor	r25, r25
    b422:	87 fd       	sbrc	r24, 7
    b424:	90 95       	com	r25
    b426:	08 95       	ret

0000b428 <strnlen_P>:
    b428:	fc 01       	movw	r30, r24
    b42a:	05 90       	lpm	r0, Z+
    b42c:	61 50       	subi	r22, 0x01	; 1
    b42e:	70 40       	sbci	r23, 0x00	; 0
    b430:	01 10       	cpse	r0, r1
    b432:	d8 f7       	brcc	.-10     	; 0xb42a <strnlen_P+0x2>
    b434:	80 95       	com	r24
    b436:	90 95       	com	r25
    b438:	8e 0f       	add	r24, r30
    b43a:	9f 1f       	adc	r25, r31
    b43c:	08 95       	ret

0000b43e <memcpy>:
    b43e:	fb 01       	movw	r30, r22
    b440:	dc 01       	movw	r26, r24
    b442:	02 c0       	rjmp	.+4      	; 0xb448 <memcpy+0xa>
    b444:	01 90       	ld	r0, Z+
    b446:	0d 92       	st	X+, r0
    b448:	41 50       	subi	r20, 0x01	; 1
    b44a:	50 40       	sbci	r21, 0x00	; 0
    b44c:	d8 f7       	brcc	.-10     	; 0xb444 <memcpy+0x6>
    b44e:	08 95       	ret

0000b450 <memset>:
    b450:	dc 01       	movw	r26, r24
    b452:	01 c0       	rjmp	.+2      	; 0xb456 <memset+0x6>
    b454:	6d 93       	st	X+, r22
    b456:	41 50       	subi	r20, 0x01	; 1
    b458:	50 40       	sbci	r21, 0x00	; 0
    b45a:	e0 f7       	brcc	.-8      	; 0xb454 <memset+0x4>
    b45c:	08 95       	ret

0000b45e <strnlen>:
    b45e:	fc 01       	movw	r30, r24
    b460:	61 50       	subi	r22, 0x01	; 1
    b462:	70 40       	sbci	r23, 0x00	; 0
    b464:	01 90       	ld	r0, Z+
    b466:	01 10       	cpse	r0, r1
    b468:	d8 f7       	brcc	.-10     	; 0xb460 <strnlen+0x2>
    b46a:	80 95       	com	r24
    b46c:	90 95       	com	r25
    b46e:	8e 0f       	add	r24, r30
    b470:	9f 1f       	adc	r25, r31
    b472:	08 95       	ret

0000b474 <fputc>:
    b474:	0f 93       	push	r16
    b476:	1f 93       	push	r17
    b478:	cf 93       	push	r28
    b47a:	df 93       	push	r29
    b47c:	fb 01       	movw	r30, r22
    b47e:	23 81       	ldd	r18, Z+3	; 0x03
    b480:	21 fd       	sbrc	r18, 1
    b482:	03 c0       	rjmp	.+6      	; 0xb48a <fputc+0x16>
    b484:	8f ef       	ldi	r24, 0xFF	; 255
    b486:	9f ef       	ldi	r25, 0xFF	; 255
    b488:	2c c0       	rjmp	.+88     	; 0xb4e2 <fputc+0x6e>
    b48a:	22 ff       	sbrs	r18, 2
    b48c:	16 c0       	rjmp	.+44     	; 0xb4ba <fputc+0x46>
    b48e:	46 81       	ldd	r20, Z+6	; 0x06
    b490:	57 81       	ldd	r21, Z+7	; 0x07
    b492:	24 81       	ldd	r18, Z+4	; 0x04
    b494:	35 81       	ldd	r19, Z+5	; 0x05
    b496:	42 17       	cp	r20, r18
    b498:	53 07       	cpc	r21, r19
    b49a:	44 f4       	brge	.+16     	; 0xb4ac <fputc+0x38>
    b49c:	a0 81       	ld	r26, Z
    b49e:	b1 81       	ldd	r27, Z+1	; 0x01
    b4a0:	9d 01       	movw	r18, r26
    b4a2:	2f 5f       	subi	r18, 0xFF	; 255
    b4a4:	3f 4f       	sbci	r19, 0xFF	; 255
    b4a6:	31 83       	std	Z+1, r19	; 0x01
    b4a8:	20 83       	st	Z, r18
    b4aa:	8c 93       	st	X, r24
    b4ac:	26 81       	ldd	r18, Z+6	; 0x06
    b4ae:	37 81       	ldd	r19, Z+7	; 0x07
    b4b0:	2f 5f       	subi	r18, 0xFF	; 255
    b4b2:	3f 4f       	sbci	r19, 0xFF	; 255
    b4b4:	37 83       	std	Z+7, r19	; 0x07
    b4b6:	26 83       	std	Z+6, r18	; 0x06
    b4b8:	14 c0       	rjmp	.+40     	; 0xb4e2 <fputc+0x6e>
    b4ba:	8b 01       	movw	r16, r22
    b4bc:	ec 01       	movw	r28, r24
    b4be:	fb 01       	movw	r30, r22
    b4c0:	00 84       	ldd	r0, Z+8	; 0x08
    b4c2:	f1 85       	ldd	r31, Z+9	; 0x09
    b4c4:	e0 2d       	mov	r30, r0
    b4c6:	19 95       	eicall
    b4c8:	89 2b       	or	r24, r25
    b4ca:	e1 f6       	brne	.-72     	; 0xb484 <fputc+0x10>
    b4cc:	d8 01       	movw	r26, r16
    b4ce:	16 96       	adiw	r26, 0x06	; 6
    b4d0:	8d 91       	ld	r24, X+
    b4d2:	9c 91       	ld	r25, X
    b4d4:	17 97       	sbiw	r26, 0x07	; 7
    b4d6:	01 96       	adiw	r24, 0x01	; 1
    b4d8:	17 96       	adiw	r26, 0x07	; 7
    b4da:	9c 93       	st	X, r25
    b4dc:	8e 93       	st	-X, r24
    b4de:	16 97       	sbiw	r26, 0x06	; 6
    b4e0:	ce 01       	movw	r24, r28
    b4e2:	df 91       	pop	r29
    b4e4:	cf 91       	pop	r28
    b4e6:	1f 91       	pop	r17
    b4e8:	0f 91       	pop	r16
    b4ea:	08 95       	ret

0000b4ec <vsnprintf>:
    b4ec:	0f 93       	push	r16
    b4ee:	1f 93       	push	r17
    b4f0:	cf 93       	push	r28
    b4f2:	df 93       	push	r29
    b4f4:	cd b7       	in	r28, 0x3d	; 61
    b4f6:	de b7       	in	r29, 0x3e	; 62
    b4f8:	2e 97       	sbiw	r28, 0x0e	; 14
    b4fa:	0f b6       	in	r0, 0x3f	; 63
    b4fc:	f8 94       	cli
    b4fe:	de bf       	out	0x3e, r29	; 62
    b500:	0f be       	out	0x3f, r0	; 63
    b502:	cd bf       	out	0x3d, r28	; 61
    b504:	8c 01       	movw	r16, r24
    b506:	fa 01       	movw	r30, r20
    b508:	86 e0       	ldi	r24, 0x06	; 6
    b50a:	8c 83       	std	Y+4, r24	; 0x04
    b50c:	1a 83       	std	Y+2, r17	; 0x02
    b50e:	09 83       	std	Y+1, r16	; 0x01
    b510:	77 ff       	sbrs	r23, 7
    b512:	02 c0       	rjmp	.+4      	; 0xb518 <vsnprintf+0x2c>
    b514:	60 e0       	ldi	r22, 0x00	; 0
    b516:	70 e8       	ldi	r23, 0x80	; 128
    b518:	cb 01       	movw	r24, r22
    b51a:	01 97       	sbiw	r24, 0x01	; 1
    b51c:	9e 83       	std	Y+6, r25	; 0x06
    b51e:	8d 83       	std	Y+5, r24	; 0x05
    b520:	a9 01       	movw	r20, r18
    b522:	bf 01       	movw	r22, r30
    b524:	ce 01       	movw	r24, r28
    b526:	01 96       	adiw	r24, 0x01	; 1
    b528:	c4 d9       	rcall	.-3192   	; 0xa8b2 <vfprintf>
    b52a:	4d 81       	ldd	r20, Y+5	; 0x05
    b52c:	5e 81       	ldd	r21, Y+6	; 0x06
    b52e:	57 fd       	sbrc	r21, 7
    b530:	0a c0       	rjmp	.+20     	; 0xb546 <vsnprintf+0x5a>
    b532:	2f 81       	ldd	r18, Y+7	; 0x07
    b534:	38 85       	ldd	r19, Y+8	; 0x08
    b536:	42 17       	cp	r20, r18
    b538:	53 07       	cpc	r21, r19
    b53a:	0c f4       	brge	.+2      	; 0xb53e <vsnprintf+0x52>
    b53c:	9a 01       	movw	r18, r20
    b53e:	f8 01       	movw	r30, r16
    b540:	e2 0f       	add	r30, r18
    b542:	f3 1f       	adc	r31, r19
    b544:	10 82       	st	Z, r1
    b546:	2e 96       	adiw	r28, 0x0e	; 14
    b548:	0f b6       	in	r0, 0x3f	; 63
    b54a:	f8 94       	cli
    b54c:	de bf       	out	0x3e, r29	; 62
    b54e:	0f be       	out	0x3f, r0	; 63
    b550:	cd bf       	out	0x3d, r28	; 61
    b552:	df 91       	pop	r29
    b554:	cf 91       	pop	r28
    b556:	1f 91       	pop	r17
    b558:	0f 91       	pop	r16
    b55a:	08 95       	ret

0000b55c <__ultoa_invert>:
    b55c:	fa 01       	movw	r30, r20
    b55e:	aa 27       	eor	r26, r26
    b560:	28 30       	cpi	r18, 0x08	; 8
    b562:	51 f1       	breq	.+84     	; 0xb5b8 <__ultoa_invert+0x5c>
    b564:	20 31       	cpi	r18, 0x10	; 16
    b566:	81 f1       	breq	.+96     	; 0xb5c8 <__ultoa_invert+0x6c>
    b568:	e8 94       	clt
    b56a:	6f 93       	push	r22
    b56c:	6e 7f       	andi	r22, 0xFE	; 254
    b56e:	6e 5f       	subi	r22, 0xFE	; 254
    b570:	7f 4f       	sbci	r23, 0xFF	; 255
    b572:	8f 4f       	sbci	r24, 0xFF	; 255
    b574:	9f 4f       	sbci	r25, 0xFF	; 255
    b576:	af 4f       	sbci	r26, 0xFF	; 255
    b578:	b1 e0       	ldi	r27, 0x01	; 1
    b57a:	3e d0       	rcall	.+124    	; 0xb5f8 <__ultoa_invert+0x9c>
    b57c:	b4 e0       	ldi	r27, 0x04	; 4
    b57e:	3c d0       	rcall	.+120    	; 0xb5f8 <__ultoa_invert+0x9c>
    b580:	67 0f       	add	r22, r23
    b582:	78 1f       	adc	r23, r24
    b584:	89 1f       	adc	r24, r25
    b586:	9a 1f       	adc	r25, r26
    b588:	a1 1d       	adc	r26, r1
    b58a:	68 0f       	add	r22, r24
    b58c:	79 1f       	adc	r23, r25
    b58e:	8a 1f       	adc	r24, r26
    b590:	91 1d       	adc	r25, r1
    b592:	a1 1d       	adc	r26, r1
    b594:	6a 0f       	add	r22, r26
    b596:	71 1d       	adc	r23, r1
    b598:	81 1d       	adc	r24, r1
    b59a:	91 1d       	adc	r25, r1
    b59c:	a1 1d       	adc	r26, r1
    b59e:	20 d0       	rcall	.+64     	; 0xb5e0 <__ultoa_invert+0x84>
    b5a0:	09 f4       	brne	.+2      	; 0xb5a4 <__ultoa_invert+0x48>
    b5a2:	68 94       	set
    b5a4:	3f 91       	pop	r19
    b5a6:	2a e0       	ldi	r18, 0x0A	; 10
    b5a8:	26 9f       	mul	r18, r22
    b5aa:	11 24       	eor	r1, r1
    b5ac:	30 19       	sub	r19, r0
    b5ae:	30 5d       	subi	r19, 0xD0	; 208
    b5b0:	31 93       	st	Z+, r19
    b5b2:	de f6       	brtc	.-74     	; 0xb56a <__ultoa_invert+0xe>
    b5b4:	cf 01       	movw	r24, r30
    b5b6:	08 95       	ret
    b5b8:	46 2f       	mov	r20, r22
    b5ba:	47 70       	andi	r20, 0x07	; 7
    b5bc:	40 5d       	subi	r20, 0xD0	; 208
    b5be:	41 93       	st	Z+, r20
    b5c0:	b3 e0       	ldi	r27, 0x03	; 3
    b5c2:	0f d0       	rcall	.+30     	; 0xb5e2 <__ultoa_invert+0x86>
    b5c4:	c9 f7       	brne	.-14     	; 0xb5b8 <__ultoa_invert+0x5c>
    b5c6:	f6 cf       	rjmp	.-20     	; 0xb5b4 <__ultoa_invert+0x58>
    b5c8:	46 2f       	mov	r20, r22
    b5ca:	4f 70       	andi	r20, 0x0F	; 15
    b5cc:	40 5d       	subi	r20, 0xD0	; 208
    b5ce:	4a 33       	cpi	r20, 0x3A	; 58
    b5d0:	18 f0       	brcs	.+6      	; 0xb5d8 <__ultoa_invert+0x7c>
    b5d2:	49 5d       	subi	r20, 0xD9	; 217
    b5d4:	31 fd       	sbrc	r19, 1
    b5d6:	40 52       	subi	r20, 0x20	; 32
    b5d8:	41 93       	st	Z+, r20
    b5da:	02 d0       	rcall	.+4      	; 0xb5e0 <__ultoa_invert+0x84>
    b5dc:	a9 f7       	brne	.-22     	; 0xb5c8 <__ultoa_invert+0x6c>
    b5de:	ea cf       	rjmp	.-44     	; 0xb5b4 <__ultoa_invert+0x58>
    b5e0:	b4 e0       	ldi	r27, 0x04	; 4
    b5e2:	a6 95       	lsr	r26
    b5e4:	97 95       	ror	r25
    b5e6:	87 95       	ror	r24
    b5e8:	77 95       	ror	r23
    b5ea:	67 95       	ror	r22
    b5ec:	ba 95       	dec	r27
    b5ee:	c9 f7       	brne	.-14     	; 0xb5e2 <__ultoa_invert+0x86>
    b5f0:	00 97       	sbiw	r24, 0x00	; 0
    b5f2:	61 05       	cpc	r22, r1
    b5f4:	71 05       	cpc	r23, r1
    b5f6:	08 95       	ret
    b5f8:	9b 01       	movw	r18, r22
    b5fa:	ac 01       	movw	r20, r24
    b5fc:	0a 2e       	mov	r0, r26
    b5fe:	06 94       	lsr	r0
    b600:	57 95       	ror	r21
    b602:	47 95       	ror	r20
    b604:	37 95       	ror	r19
    b606:	27 95       	ror	r18
    b608:	ba 95       	dec	r27
    b60a:	c9 f7       	brne	.-14     	; 0xb5fe <__ultoa_invert+0xa2>
    b60c:	62 0f       	add	r22, r18
    b60e:	73 1f       	adc	r23, r19
    b610:	84 1f       	adc	r24, r20
    b612:	95 1f       	adc	r25, r21
    b614:	a0 1d       	adc	r26, r0
    b616:	08 95       	ret

0000b618 <eeprom_read_block>:
    b618:	dc 01       	movw	r26, r24
    b61a:	cb 01       	movw	r24, r22

0000b61c <eeprom_read_blraw>:
    b61c:	fc 01       	movw	r30, r24
    b61e:	f9 99       	sbic	0x1f, 1	; 31
    b620:	fe cf       	rjmp	.-4      	; 0xb61e <eeprom_read_blraw+0x2>
    b622:	06 c0       	rjmp	.+12     	; 0xb630 <eeprom_read_blraw+0x14>
    b624:	f2 bd       	out	0x22, r31	; 34
    b626:	e1 bd       	out	0x21, r30	; 33
    b628:	f8 9a       	sbi	0x1f, 0	; 31
    b62a:	31 96       	adiw	r30, 0x01	; 1
    b62c:	00 b4       	in	r0, 0x20	; 32
    b62e:	0d 92       	st	X+, r0
    b630:	41 50       	subi	r20, 0x01	; 1
    b632:	50 40       	sbci	r21, 0x00	; 0
    b634:	b8 f7       	brcc	.-18     	; 0xb624 <eeprom_read_blraw+0x8>
    b636:	08 95       	ret

0000b638 <eeprom_update_block>:
    b638:	dc 01       	movw	r26, r24
    b63a:	a4 0f       	add	r26, r20
    b63c:	b5 1f       	adc	r27, r21
    b63e:	41 50       	subi	r20, 0x01	; 1
    b640:	50 40       	sbci	r21, 0x00	; 0
    b642:	40 f0       	brcs	.+16     	; 0xb654 <eeprom_update_block+0x1c>
    b644:	cb 01       	movw	r24, r22
    b646:	84 0f       	add	r24, r20
    b648:	95 1f       	adc	r25, r21
    b64a:	2e 91       	ld	r18, -X
    b64c:	05 d0       	rcall	.+10     	; 0xb658 <eeprom_update_r18>
    b64e:	41 50       	subi	r20, 0x01	; 1
    b650:	50 40       	sbci	r21, 0x00	; 0
    b652:	d8 f7       	brcc	.-10     	; 0xb64a <eeprom_update_block+0x12>
    b654:	08 95       	ret

0000b656 <eeprom_update_byte>:
    b656:	26 2f       	mov	r18, r22

0000b658 <eeprom_update_r18>:
    b658:	f9 99       	sbic	0x1f, 1	; 31
    b65a:	fe cf       	rjmp	.-4      	; 0xb658 <eeprom_update_r18>
    b65c:	92 bd       	out	0x22, r25	; 34
    b65e:	81 bd       	out	0x21, r24	; 33
    b660:	f8 9a       	sbi	0x1f, 0	; 31
    b662:	01 97       	sbiw	r24, 0x01	; 1
    b664:	00 b4       	in	r0, 0x20	; 32
    b666:	02 16       	cp	r0, r18
    b668:	39 f0       	breq	.+14     	; 0xb678 <eeprom_update_r18+0x20>
    b66a:	1f ba       	out	0x1f, r1	; 31
    b66c:	20 bd       	out	0x20, r18	; 32
    b66e:	0f b6       	in	r0, 0x3f	; 63
    b670:	f8 94       	cli
    b672:	fa 9a       	sbi	0x1f, 2	; 31
    b674:	f9 9a       	sbi	0x1f, 1	; 31
    b676:	0f be       	out	0x3f, r0	; 63
    b678:	08 95       	ret

0000b67a <eeprom_write_block>:
    b67a:	dc 01       	movw	r26, r24
    b67c:	cb 01       	movw	r24, r22
    b67e:	02 c0       	rjmp	.+4      	; 0xb684 <eeprom_write_block+0xa>
    b680:	2d 91       	ld	r18, X+
    b682:	05 d0       	rcall	.+10     	; 0xb68e <eeprom_write_r18>
    b684:	41 50       	subi	r20, 0x01	; 1
    b686:	50 40       	sbci	r21, 0x00	; 0
    b688:	d8 f7       	brcc	.-10     	; 0xb680 <eeprom_write_block+0x6>
    b68a:	08 95       	ret

0000b68c <eeprom_write_byte>:
    b68c:	26 2f       	mov	r18, r22

0000b68e <eeprom_write_r18>:
    b68e:	f9 99       	sbic	0x1f, 1	; 31
    b690:	fe cf       	rjmp	.-4      	; 0xb68e <eeprom_write_r18>
    b692:	1f ba       	out	0x1f, r1	; 31
    b694:	92 bd       	out	0x22, r25	; 34
    b696:	81 bd       	out	0x21, r24	; 33
    b698:	20 bd       	out	0x20, r18	; 32
    b69a:	0f b6       	in	r0, 0x3f	; 63
    b69c:	f8 94       	cli
    b69e:	fa 9a       	sbi	0x1f, 2	; 31
    b6a0:	f9 9a       	sbi	0x1f, 1	; 31
    b6a2:	0f be       	out	0x3f, r0	; 63
    b6a4:	01 96       	adiw	r24, 0x01	; 1
    b6a6:	08 95       	ret

0000b6a8 <_exit>:
    b6a8:	f8 94       	cli

0000b6aa <__stop_program>:
    b6aa:	ff cf       	rjmp	.-2      	; 0xb6aa <__stop_program>
