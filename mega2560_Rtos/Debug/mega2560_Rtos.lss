
mega2560_Rtos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000045e  00800200  0000bb88  0000bc1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000bb88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000044f  0080065e  0080065e  0000c07a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000c07a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000c0d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000aa8  00000000  00000000  0000c118  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011b66  00000000  00000000  0000cbc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e45  00000000  00000000  0001e726  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008e72  00000000  00000000  0002156b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000296c  00000000  00000000  0002a3e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003a4a  00000000  00000000  0002cd4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f4b6  00000000  00000000  00030796  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ca0  00000000  00000000  0003fc4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6c c5       	rjmp	.+2776   	; 0xada <__ctors_end>
       2:	00 00       	nop
       4:	8b c5       	rjmp	.+2838   	; 0xb1c <__bad_interrupt>
       6:	00 00       	nop
       8:	89 c5       	rjmp	.+2834   	; 0xb1c <__bad_interrupt>
       a:	00 00       	nop
       c:	87 c5       	rjmp	.+2830   	; 0xb1c <__bad_interrupt>
       e:	00 00       	nop
      10:	85 c5       	rjmp	.+2826   	; 0xb1c <__bad_interrupt>
      12:	00 00       	nop
      14:	83 c5       	rjmp	.+2822   	; 0xb1c <__bad_interrupt>
      16:	00 00       	nop
      18:	81 c5       	rjmp	.+2818   	; 0xb1c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7f c5       	rjmp	.+2814   	; 0xb1c <__bad_interrupt>
      1e:	00 00       	nop
      20:	7d c5       	rjmp	.+2810   	; 0xb1c <__bad_interrupt>
      22:	00 00       	nop
      24:	7b c5       	rjmp	.+2806   	; 0xb1c <__bad_interrupt>
      26:	00 00       	nop
      28:	79 c5       	rjmp	.+2802   	; 0xb1c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	77 c5       	rjmp	.+2798   	; 0xb1c <__bad_interrupt>
      2e:	00 00       	nop
      30:	75 c5       	rjmp	.+2794   	; 0xb1c <__bad_interrupt>
      32:	00 00       	nop
      34:	73 c5       	rjmp	.+2790   	; 0xb1c <__bad_interrupt>
      36:	00 00       	nop
      38:	71 c5       	rjmp	.+2786   	; 0xb1c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6f c5       	rjmp	.+2782   	; 0xb1c <__bad_interrupt>
      3e:	00 00       	nop
      40:	6d c5       	rjmp	.+2778   	; 0xb1c <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 4f 22 	jmp	0x449e	; 0x449e <__vector_17>
      48:	69 c5       	rjmp	.+2770   	; 0xb1c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	67 c5       	rjmp	.+2766   	; 0xb1c <__bad_interrupt>
      4e:	00 00       	nop
      50:	65 c5       	rjmp	.+2762   	; 0xb1c <__bad_interrupt>
      52:	00 00       	nop
      54:	63 c5       	rjmp	.+2758   	; 0xb1c <__bad_interrupt>
      56:	00 00       	nop
      58:	61 c5       	rjmp	.+2754   	; 0xb1c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5f c5       	rjmp	.+2750   	; 0xb1c <__bad_interrupt>
      5e:	00 00       	nop
      60:	5d c5       	rjmp	.+2746   	; 0xb1c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 8f 10 	jmp	0x211e	; 0x211e <__vector_25>
      68:	0c 94 17 11 	jmp	0x222e	; 0x222e <__vector_26>
      6c:	57 c5       	rjmp	.+2734   	; 0xb1c <__bad_interrupt>
      6e:	00 00       	nop
      70:	55 c5       	rjmp	.+2730   	; 0xb1c <__bad_interrupt>
      72:	00 00       	nop
      74:	53 c5       	rjmp	.+2726   	; 0xb1c <__bad_interrupt>
      76:	00 00       	nop
      78:	51 c5       	rjmp	.+2722   	; 0xb1c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4f c5       	rjmp	.+2718   	; 0xb1c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c7       	rjmp	.+3754   	; 0xf2c <__vector_32>
      82:	00 00       	nop
      84:	4b c5       	rjmp	.+2710   	; 0xb1c <__bad_interrupt>
      86:	00 00       	nop
      88:	49 c5       	rjmp	.+2706   	; 0xb1c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	47 c5       	rjmp	.+2702   	; 0xb1c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__vector_36>
      94:	0c 94 bf 11 	jmp	0x237e	; 0x237e <__vector_37>
      98:	41 c5       	rjmp	.+2690   	; 0xb1c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	3f c5       	rjmp	.+2686   	; 0xb1c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3d c5       	rjmp	.+2682   	; 0xb1c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3b c5       	rjmp	.+2678   	; 0xb1c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	39 c5       	rjmp	.+2674   	; 0xb1c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	37 c5       	rjmp	.+2670   	; 0xb1c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	35 c5       	rjmp	.+2666   	; 0xb1c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	33 c5       	rjmp	.+2662   	; 0xb1c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	31 c5       	rjmp	.+2658   	; 0xb1c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2f c5       	rjmp	.+2654   	; 0xb1c <__bad_interrupt>
      be:	00 00       	nop
      c0:	2d c5       	rjmp	.+2650   	; 0xb1c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2b c5       	rjmp	.+2646   	; 0xb1c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	29 c5       	rjmp	.+2642   	; 0xb1c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__vector_51>
      d0:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__vector_52>
      d4:	23 c5       	rjmp	.+2630   	; 0xb1c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <__vector_54>
      dc:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__vector_55>
      e0:	1d c5       	rjmp	.+2618   	; 0xb1c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0c 0d       	add	r16, r12
      e6:	0c 0d       	add	r16, r12
      e8:	11 0d       	add	r17, r1
      ea:	11 0d       	add	r17, r1
      ec:	16 0d       	add	r17, r6
      ee:	16 0d       	add	r17, r6
      f0:	1b 0d       	add	r17, r11
      f2:	1b 0d       	add	r17, r11
      f4:	7d 0d       	add	r23, r13
      f6:	7d 0d       	add	r23, r13
      f8:	78 0d       	add	r23, r8
      fa:	78 0d       	add	r23, r8
      fc:	73 0d       	add	r23, r3
      fe:	73 0d       	add	r23, r3
     100:	6e 0d       	add	r22, r14
     102:	6e 0d       	add	r22, r14
     104:	31 0e       	add	r3, r17
     106:	31 0e       	add	r3, r17
     108:	38 0e       	add	r3, r24
     10a:	38 0e       	add	r3, r24
     10c:	3f 0e       	add	r3, r31
     10e:	3f 0e       	add	r3, r31
     110:	46 0e       	add	r4, r22
     112:	46 0e       	add	r4, r22
     114:	bd 0e       	add	r11, r29
     116:	ee 0e       	add	r14, r30
     118:	28 0f       	add	r18, r24
     11a:	59 0f       	add	r21, r25
     11c:	93 0f       	add	r25, r19
     11e:	c4 0f       	add	r28, r20
     120:	02 10       	cpse	r0, r2
     122:	33 10       	cpse	r3, r3
     124:	39 1d       	adc	r19, r9
     126:	39 1d       	adc	r19, r9
     128:	39 1d       	adc	r19, r9
     12a:	84 1d       	adc	r24, r4
     12c:	6d 1d       	adc	r22, r13
     12e:	81 1d       	adc	r24, r1
     130:	39 1d       	adc	r19, r9
     132:	39 1d       	adc	r19, r9
     134:	84 1d       	adc	r24, r4
     136:	6d 1d       	adc	r22, r13
     138:	b3 26       	eor	r11, r19
     13a:	c7 25       	eor	r28, r7
     13c:	c7 25       	eor	r28, r7
     13e:	d0 27       	eor	r29, r16
     140:	d0 27       	eor	r29, r16
     142:	d0 27       	eor	r29, r16
     144:	d0 27       	eor	r29, r16
     146:	d0 27       	eor	r29, r16
     148:	d0 27       	eor	r29, r16
     14a:	d0 27       	eor	r29, r16
     14c:	b7 26       	eor	r11, r23
     14e:	cc 25       	eor	r28, r12
     150:	cc 25       	eor	r28, r12
     152:	d0 27       	eor	r29, r16
     154:	d0 27       	eor	r29, r16
     156:	d0 27       	eor	r29, r16
     158:	d0 27       	eor	r29, r16
     15a:	d0 27       	eor	r29, r16
     15c:	d0 27       	eor	r29, r16
     15e:	d0 27       	eor	r29, r16
     160:	bb 26       	eor	r11, r27
     162:	d1 25       	eor	r29, r1
     164:	d1 25       	eor	r29, r1
     166:	d0 27       	eor	r29, r16
     168:	d0 27       	eor	r29, r16
     16a:	d0 27       	eor	r29, r16
     16c:	d0 27       	eor	r29, r16
     16e:	d0 27       	eor	r29, r16
     170:	d0 27       	eor	r29, r16
     172:	d0 27       	eor	r29, r16
     174:	bf 26       	eor	r11, r31
     176:	d6 25       	eor	r29, r6
     178:	d6 25       	eor	r29, r6
     17a:	d0 27       	eor	r29, r16
     17c:	d0 27       	eor	r29, r16
     17e:	d0 27       	eor	r29, r16
     180:	d0 27       	eor	r29, r16
     182:	d0 27       	eor	r29, r16
     184:	d0 27       	eor	r29, r16
     186:	d0 27       	eor	r29, r16
     188:	c3 26       	eor	r12, r19
     18a:	db 25       	eor	r29, r11
     18c:	db 25       	eor	r29, r11
     18e:	d0 27       	eor	r29, r16
     190:	d0 27       	eor	r29, r16
     192:	d0 27       	eor	r29, r16
     194:	d0 27       	eor	r29, r16
     196:	d0 27       	eor	r29, r16
     198:	d0 27       	eor	r29, r16
     19a:	d0 27       	eor	r29, r16
     19c:	c7 26       	eor	r12, r23
     19e:	e0 25       	eor	r30, r0
     1a0:	e0 25       	eor	r30, r0
     1a2:	d0 27       	eor	r29, r16
     1a4:	d0 27       	eor	r29, r16
     1a6:	d0 27       	eor	r29, r16
     1a8:	d0 27       	eor	r29, r16
     1aa:	d0 27       	eor	r29, r16
     1ac:	d0 27       	eor	r29, r16
     1ae:	d0 27       	eor	r29, r16
     1b0:	cb 26       	eor	r12, r27
     1b2:	e5 25       	eor	r30, r5
     1b4:	e5 25       	eor	r30, r5
     1b6:	d0 27       	eor	r29, r16
     1b8:	d0 27       	eor	r29, r16
     1ba:	d0 27       	eor	r29, r16
     1bc:	d0 27       	eor	r29, r16
     1be:	d0 27       	eor	r29, r16
     1c0:	d0 27       	eor	r29, r16
     1c2:	d0 27       	eor	r29, r16
     1c4:	cf 26       	eor	r12, r31
     1c6:	f5 25       	eor	r31, r5
     1c8:	f5 25       	eor	r31, r5
     1ca:	d0 27       	eor	r29, r16
     1cc:	d0 27       	eor	r29, r16
     1ce:	d0 27       	eor	r29, r16
     1d0:	d0 27       	eor	r29, r16
     1d2:	d0 27       	eor	r29, r16
     1d4:	d0 27       	eor	r29, r16
     1d6:	d0 27       	eor	r29, r16
     1d8:	d3 26       	eor	r13, r19
     1da:	05 26       	eor	r0, r21
     1dc:	05 26       	eor	r0, r21
     1de:	d0 27       	eor	r29, r16
     1e0:	d0 27       	eor	r29, r16
     1e2:	d0 27       	eor	r29, r16
     1e4:	d0 27       	eor	r29, r16
     1e6:	d0 27       	eor	r29, r16
     1e8:	d0 27       	eor	r29, r16
     1ea:	d0 27       	eor	r29, r16
     1ec:	d7 26       	eor	r13, r23
     1ee:	15 26       	eor	r1, r21
     1f0:	15 26       	eor	r1, r21
     1f2:	d0 27       	eor	r29, r16
     1f4:	d0 27       	eor	r29, r16
     1f6:	d0 27       	eor	r29, r16
     1f8:	d0 27       	eor	r29, r16
     1fa:	d0 27       	eor	r29, r16
     1fc:	d0 27       	eor	r29, r16
     1fe:	d0 27       	eor	r29, r16
     200:	db 26       	eor	r13, r27
     202:	25 26       	eor	r2, r21
     204:	25 26       	eor	r2, r21
     206:	d0 27       	eor	r29, r16
     208:	d0 27       	eor	r29, r16
     20a:	d0 27       	eor	r29, r16
     20c:	d0 27       	eor	r29, r16
     20e:	d0 27       	eor	r29, r16
     210:	d0 27       	eor	r29, r16
     212:	d0 27       	eor	r29, r16
     214:	df 26       	eor	r13, r31
     216:	2a 26       	eor	r2, r26
     218:	2a 26       	eor	r2, r26
     21a:	d0 27       	eor	r29, r16
     21c:	d0 27       	eor	r29, r16
     21e:	d0 27       	eor	r29, r16
     220:	d0 27       	eor	r29, r16
     222:	d0 27       	eor	r29, r16
     224:	d0 27       	eor	r29, r16
     226:	d0 27       	eor	r29, r16
     228:	e3 26       	eor	r14, r19
     22a:	3a 26       	eor	r3, r26
     22c:	3a 26       	eor	r3, r26
     22e:	d0 27       	eor	r29, r16
     230:	d0 27       	eor	r29, r16
     232:	d0 27       	eor	r29, r16
     234:	d0 27       	eor	r29, r16
     236:	d0 27       	eor	r29, r16
     238:	d0 27       	eor	r29, r16
     23a:	d0 27       	eor	r29, r16
     23c:	e7 26       	eor	r14, r23
     23e:	49 26       	eor	r4, r25
     240:	49 26       	eor	r4, r25
     242:	d0 27       	eor	r29, r16
     244:	d0 27       	eor	r29, r16
     246:	d0 27       	eor	r29, r16
     248:	d0 27       	eor	r29, r16
     24a:	d0 27       	eor	r29, r16
     24c:	d0 27       	eor	r29, r16
     24e:	d0 27       	eor	r29, r16
     250:	eb 26       	eor	r14, r27
     252:	59 26       	eor	r5, r25
     254:	59 26       	eor	r5, r25
     256:	d0 27       	eor	r29, r16
     258:	d0 27       	eor	r29, r16
     25a:	d0 27       	eor	r29, r16
     25c:	d0 27       	eor	r29, r16
     25e:	d0 27       	eor	r29, r16
     260:	d0 27       	eor	r29, r16
     262:	d0 27       	eor	r29, r16
     264:	ef 26       	eor	r14, r31
     266:	69 26       	eor	r6, r25
     268:	69 26       	eor	r6, r25
     26a:	d0 27       	eor	r29, r16
     26c:	d0 27       	eor	r29, r16
     26e:	d0 27       	eor	r29, r16
     270:	d0 27       	eor	r29, r16
     272:	d0 27       	eor	r29, r16
     274:	d0 27       	eor	r29, r16
     276:	d0 27       	eor	r29, r16
     278:	f3 26       	eor	r15, r19
     27a:	79 26       	eor	r7, r25
     27c:	79 26       	eor	r7, r25
     27e:	d0 27       	eor	r29, r16
     280:	d0 27       	eor	r29, r16
     282:	d0 27       	eor	r29, r16
     284:	d0 27       	eor	r29, r16
     286:	d0 27       	eor	r29, r16
     288:	d0 27       	eor	r29, r16
     28a:	d0 27       	eor	r29, r16
     28c:	f7 26       	eor	r15, r23
     28e:	89 26       	eor	r8, r25
     290:	89 26       	eor	r8, r25
     292:	d0 27       	eor	r29, r16
     294:	d0 27       	eor	r29, r16
     296:	d0 27       	eor	r29, r16
     298:	d0 27       	eor	r29, r16
     29a:	d0 27       	eor	r29, r16
     29c:	d0 27       	eor	r29, r16
     29e:	d0 27       	eor	r29, r16
     2a0:	fb 26       	eor	r15, r27
     2a2:	99 26       	eor	r9, r25
     2a4:	99 26       	eor	r9, r25
     2a6:	d0 27       	eor	r29, r16
     2a8:	d0 27       	eor	r29, r16
     2aa:	d0 27       	eor	r29, r16
     2ac:	d0 27       	eor	r29, r16
     2ae:	d0 27       	eor	r29, r16
     2b0:	d0 27       	eor	r29, r16
     2b2:	d0 27       	eor	r29, r16
     2b4:	ff 26       	eor	r15, r31
     2b6:	a9 26       	eor	r10, r25
     2b8:	a9 26       	eor	r10, r25
     2ba:	d0 27       	eor	r29, r16
     2bc:	d0 27       	eor	r29, r16
     2be:	d0 27       	eor	r29, r16
     2c0:	d0 27       	eor	r29, r16
     2c2:	d0 27       	eor	r29, r16
     2c4:	d0 27       	eor	r29, r16
     2c6:	d0 27       	eor	r29, r16
     2c8:	03 27       	eor	r16, r19
     2ca:	d0 27       	eor	r29, r16
     2cc:	d0 27       	eor	r29, r16
     2ce:	d0 27       	eor	r29, r16
     2d0:	d0 27       	eor	r29, r16
     2d2:	d0 27       	eor	r29, r16
     2d4:	d0 27       	eor	r29, r16
     2d6:	d0 27       	eor	r29, r16
     2d8:	d0 27       	eor	r29, r16
     2da:	d0 27       	eor	r29, r16
     2dc:	07 27       	eor	r16, r23
     2de:	d0 27       	eor	r29, r16
     2e0:	d0 27       	eor	r29, r16
     2e2:	d0 27       	eor	r29, r16
     2e4:	d0 27       	eor	r29, r16
     2e6:	d0 27       	eor	r29, r16
     2e8:	d0 27       	eor	r29, r16
     2ea:	d0 27       	eor	r29, r16
     2ec:	d0 27       	eor	r29, r16
     2ee:	d0 27       	eor	r29, r16
     2f0:	0b 27       	eor	r16, r27
     2f2:	d0 27       	eor	r29, r16
     2f4:	d0 27       	eor	r29, r16
     2f6:	d0 27       	eor	r29, r16
     2f8:	d0 27       	eor	r29, r16
     2fa:	d0 27       	eor	r29, r16
     2fc:	d0 27       	eor	r29, r16
     2fe:	d0 27       	eor	r29, r16
     300:	d0 27       	eor	r29, r16
     302:	d0 27       	eor	r29, r16
     304:	0f 27       	eor	r16, r31
     306:	d0 27       	eor	r29, r16
     308:	d0 27       	eor	r29, r16
     30a:	d0 27       	eor	r29, r16
     30c:	d0 27       	eor	r29, r16
     30e:	d0 27       	eor	r29, r16
     310:	d0 27       	eor	r29, r16
     312:	d0 27       	eor	r29, r16
     314:	d0 27       	eor	r29, r16
     316:	d0 27       	eor	r29, r16
     318:	13 27       	eor	r17, r19
     31a:	d0 27       	eor	r29, r16
     31c:	d0 27       	eor	r29, r16
     31e:	d0 27       	eor	r29, r16
     320:	d0 27       	eor	r29, r16
     322:	d0 27       	eor	r29, r16
     324:	d0 27       	eor	r29, r16
     326:	d0 27       	eor	r29, r16
     328:	d0 27       	eor	r29, r16
     32a:	d0 27       	eor	r29, r16
     32c:	1e 27       	eor	r17, r30
     32e:	d0 27       	eor	r29, r16
     330:	d0 27       	eor	r29, r16
     332:	d0 27       	eor	r29, r16
     334:	d0 27       	eor	r29, r16
     336:	d0 27       	eor	r29, r16
     338:	d0 27       	eor	r29, r16
     33a:	d0 27       	eor	r29, r16
     33c:	d0 27       	eor	r29, r16
     33e:	d0 27       	eor	r29, r16
     340:	22 27       	eor	r18, r18
     342:	d0 27       	eor	r29, r16
     344:	d0 27       	eor	r29, r16
     346:	d0 27       	eor	r29, r16
     348:	d0 27       	eor	r29, r16
     34a:	d0 27       	eor	r29, r16
     34c:	d0 27       	eor	r29, r16
     34e:	d0 27       	eor	r29, r16
     350:	d0 27       	eor	r29, r16
     352:	d0 27       	eor	r29, r16
     354:	26 27       	eor	r18, r22
     356:	d0 27       	eor	r29, r16
     358:	d0 27       	eor	r29, r16
     35a:	d0 27       	eor	r29, r16
     35c:	d0 27       	eor	r29, r16
     35e:	d0 27       	eor	r29, r16
     360:	d0 27       	eor	r29, r16
     362:	d0 27       	eor	r29, r16
     364:	d0 27       	eor	r29, r16
     366:	d0 27       	eor	r29, r16
     368:	2a 27       	eor	r18, r26
     36a:	d0 27       	eor	r29, r16
     36c:	d0 27       	eor	r29, r16
     36e:	d0 27       	eor	r29, r16
     370:	d0 27       	eor	r29, r16
     372:	d0 27       	eor	r29, r16
     374:	d0 27       	eor	r29, r16
     376:	d0 27       	eor	r29, r16
     378:	d0 27       	eor	r29, r16
     37a:	d0 27       	eor	r29, r16
     37c:	2e 27       	eor	r18, r30
     37e:	77 27       	eor	r23, r23
     380:	9b 27       	eor	r25, r27
     382:	d0 27       	eor	r29, r16
     384:	d0 27       	eor	r29, r16
     386:	d0 27       	eor	r29, r16
     388:	d0 27       	eor	r29, r16
     38a:	d0 27       	eor	r29, r16
     38c:	d0 27       	eor	r29, r16
     38e:	d0 27       	eor	r29, r16
     390:	34 27       	eor	r19, r20
     392:	7a 27       	eor	r23, r26
     394:	a1 27       	eor	r26, r17
     396:	d0 27       	eor	r29, r16
     398:	d0 27       	eor	r29, r16
     39a:	d0 27       	eor	r29, r16
     39c:	d0 27       	eor	r29, r16
     39e:	d0 27       	eor	r29, r16
     3a0:	d0 27       	eor	r29, r16
     3a2:	d0 27       	eor	r29, r16
     3a4:	38 27       	eor	r19, r24
     3a6:	80 27       	eor	r24, r16
     3a8:	a7 27       	eor	r26, r23
     3aa:	d0 27       	eor	r29, r16
     3ac:	d0 27       	eor	r29, r16
     3ae:	d0 27       	eor	r29, r16
     3b0:	d0 27       	eor	r29, r16
     3b2:	d0 27       	eor	r29, r16
     3b4:	d0 27       	eor	r29, r16
     3b6:	d0 27       	eor	r29, r16
     3b8:	3c 27       	eor	r19, r28
     3ba:	86 27       	eor	r24, r22
     3bc:	ad 27       	eor	r26, r29
     3be:	d0 27       	eor	r29, r16
     3c0:	d0 27       	eor	r29, r16
     3c2:	d0 27       	eor	r29, r16
     3c4:	d0 27       	eor	r29, r16
     3c6:	d0 27       	eor	r29, r16
     3c8:	d0 27       	eor	r29, r16
     3ca:	d0 27       	eor	r29, r16
     3cc:	40 27       	eor	r20, r16
     3ce:	8c 27       	eor	r24, r28
     3d0:	b3 27       	eor	r27, r19
     3d2:	d0 27       	eor	r29, r16
     3d4:	d0 27       	eor	r29, r16
     3d6:	d0 27       	eor	r29, r16
     3d8:	d0 27       	eor	r29, r16
     3da:	d0 27       	eor	r29, r16
     3dc:	d0 27       	eor	r29, r16
     3de:	d0 27       	eor	r29, r16
     3e0:	44 27       	eor	r20, r20
     3e2:	8f 27       	eor	r24, r31
     3e4:	b9 27       	eor	r27, r25
     3e6:	d0 27       	eor	r29, r16
     3e8:	d0 27       	eor	r29, r16
     3ea:	d0 27       	eor	r29, r16
     3ec:	d0 27       	eor	r29, r16
     3ee:	d0 27       	eor	r29, r16
     3f0:	d0 27       	eor	r29, r16
     3f2:	d0 27       	eor	r29, r16
     3f4:	47 27       	eor	r20, r23
     3f6:	d0 27       	eor	r29, r16
     3f8:	d0 27       	eor	r29, r16
     3fa:	d0 27       	eor	r29, r16
     3fc:	d0 27       	eor	r29, r16
     3fe:	d0 27       	eor	r29, r16
     400:	d0 27       	eor	r29, r16
     402:	d0 27       	eor	r29, r16
     404:	d0 27       	eor	r29, r16
     406:	d0 27       	eor	r29, r16
     408:	4b 27       	eor	r20, r27
     40a:	92 27       	eor	r25, r18
     40c:	bf 27       	eor	r27, r31
     40e:	d0 27       	eor	r29, r16
     410:	d0 27       	eor	r29, r16
     412:	d0 27       	eor	r29, r16
     414:	d0 27       	eor	r29, r16
     416:	d0 27       	eor	r29, r16
     418:	d0 27       	eor	r29, r16
     41a:	d0 27       	eor	r29, r16
     41c:	4e 27       	eor	r20, r30
     41e:	95 27       	eor	r25, r21
     420:	c5 27       	eor	r28, r21
     422:	d0 27       	eor	r29, r16
     424:	d0 27       	eor	r29, r16
     426:	d0 27       	eor	r29, r16
     428:	d0 27       	eor	r29, r16
     42a:	d0 27       	eor	r29, r16
     42c:	d0 27       	eor	r29, r16
     42e:	d0 27       	eor	r29, r16
     430:	51 27       	eor	r21, r17
     432:	98 27       	eor	r25, r24
     434:	cb 27       	eor	r28, r27
     436:	d0 27       	eor	r29, r16
     438:	d0 27       	eor	r29, r16
     43a:	d0 27       	eor	r29, r16
     43c:	d0 27       	eor	r29, r16
     43e:	d0 27       	eor	r29, r16
     440:	d0 27       	eor	r29, r16
     442:	d0 27       	eor	r29, r16
     444:	54 27       	eor	r21, r20
     446:	d0 27       	eor	r29, r16
     448:	d0 27       	eor	r29, r16
     44a:	d0 27       	eor	r29, r16
     44c:	d0 27       	eor	r29, r16
     44e:	d0 27       	eor	r29, r16
     450:	d0 27       	eor	r29, r16
     452:	d0 27       	eor	r29, r16
     454:	d0 27       	eor	r29, r16
     456:	d0 27       	eor	r29, r16
     458:	58 27       	eor	r21, r24
     45a:	d0 27       	eor	r29, r16
     45c:	d0 27       	eor	r29, r16
     45e:	d0 27       	eor	r29, r16
     460:	d0 27       	eor	r29, r16
     462:	d0 27       	eor	r29, r16
     464:	d0 27       	eor	r29, r16
     466:	d0 27       	eor	r29, r16
     468:	d0 27       	eor	r29, r16
     46a:	d0 27       	eor	r29, r16
     46c:	5c 27       	eor	r21, r28
     46e:	d0 27       	eor	r29, r16
     470:	d0 27       	eor	r29, r16
     472:	d0 27       	eor	r29, r16
     474:	d0 27       	eor	r29, r16
     476:	d0 27       	eor	r29, r16
     478:	d0 27       	eor	r29, r16
     47a:	d0 27       	eor	r29, r16
     47c:	d0 27       	eor	r29, r16
     47e:	d0 27       	eor	r29, r16
     480:	60 27       	eor	r22, r16
     482:	d0 27       	eor	r29, r16
     484:	d0 27       	eor	r29, r16
     486:	d0 27       	eor	r29, r16
     488:	d0 27       	eor	r29, r16
     48a:	d0 27       	eor	r29, r16
     48c:	d0 27       	eor	r29, r16
     48e:	d0 27       	eor	r29, r16
     490:	d0 27       	eor	r29, r16
     492:	d0 27       	eor	r29, r16
     494:	64 27       	eor	r22, r20
     496:	d0 27       	eor	r29, r16
     498:	d0 27       	eor	r29, r16
     49a:	d0 27       	eor	r29, r16
     49c:	d0 27       	eor	r29, r16
     49e:	d0 27       	eor	r29, r16
     4a0:	d0 27       	eor	r29, r16
     4a2:	d0 27       	eor	r29, r16
     4a4:	d0 27       	eor	r29, r16
     4a6:	d0 27       	eor	r29, r16
     4a8:	67 27       	eor	r22, r23
     4aa:	d0 27       	eor	r29, r16
     4ac:	d0 27       	eor	r29, r16
     4ae:	d0 27       	eor	r29, r16
     4b0:	d0 27       	eor	r29, r16
     4b2:	d0 27       	eor	r29, r16
     4b4:	d0 27       	eor	r29, r16
     4b6:	d0 27       	eor	r29, r16
     4b8:	d0 27       	eor	r29, r16
     4ba:	d0 27       	eor	r29, r16
     4bc:	6b 27       	eor	r22, r27
     4be:	d0 27       	eor	r29, r16
     4c0:	d0 27       	eor	r29, r16
     4c2:	d0 27       	eor	r29, r16
     4c4:	d0 27       	eor	r29, r16
     4c6:	d0 27       	eor	r29, r16
     4c8:	d0 27       	eor	r29, r16
     4ca:	d0 27       	eor	r29, r16
     4cc:	d0 27       	eor	r29, r16
     4ce:	d0 27       	eor	r29, r16
     4d0:	6f 27       	eor	r22, r31
     4d2:	d0 27       	eor	r29, r16
     4d4:	d0 27       	eor	r29, r16
     4d6:	d0 27       	eor	r29, r16
     4d8:	d0 27       	eor	r29, r16
     4da:	d0 27       	eor	r29, r16
     4dc:	d0 27       	eor	r29, r16
     4de:	d0 27       	eor	r29, r16
     4e0:	d0 27       	eor	r29, r16
     4e2:	d0 27       	eor	r29, r16
     4e4:	73 27       	eor	r23, r19
     4e6:	e4 27       	eor	r30, r20
     4e8:	99 28       	or	r9, r9
     4ea:	99 28       	or	r9, r9
     4ec:	99 28       	or	r9, r9
     4ee:	99 28       	or	r9, r9
     4f0:	99 28       	or	r9, r9
     4f2:	99 28       	or	r9, r9
     4f4:	99 28       	or	r9, r9
     4f6:	99 28       	or	r9, r9
     4f8:	99 28       	or	r9, r9
     4fa:	e6 27       	eor	r30, r22
     4fc:	99 28       	or	r9, r9
     4fe:	99 28       	or	r9, r9
     500:	99 28       	or	r9, r9
     502:	99 28       	or	r9, r9
     504:	99 28       	or	r9, r9
     506:	99 28       	or	r9, r9
     508:	99 28       	or	r9, r9
     50a:	99 28       	or	r9, r9
     50c:	99 28       	or	r9, r9
     50e:	e9 27       	eor	r30, r25
     510:	99 28       	or	r9, r9
     512:	99 28       	or	r9, r9
     514:	99 28       	or	r9, r9
     516:	99 28       	or	r9, r9
     518:	99 28       	or	r9, r9
     51a:	99 28       	or	r9, r9
     51c:	99 28       	or	r9, r9
     51e:	99 28       	or	r9, r9
     520:	99 28       	or	r9, r9
     522:	ec 27       	eor	r30, r28
     524:	99 28       	or	r9, r9
     526:	99 28       	or	r9, r9
     528:	99 28       	or	r9, r9
     52a:	99 28       	or	r9, r9
     52c:	99 28       	or	r9, r9
     52e:	99 28       	or	r9, r9
     530:	99 28       	or	r9, r9
     532:	99 28       	or	r9, r9
     534:	99 28       	or	r9, r9
     536:	ef 27       	eor	r30, r31
     538:	99 28       	or	r9, r9
     53a:	99 28       	or	r9, r9
     53c:	99 28       	or	r9, r9
     53e:	99 28       	or	r9, r9
     540:	99 28       	or	r9, r9
     542:	99 28       	or	r9, r9
     544:	99 28       	or	r9, r9
     546:	99 28       	or	r9, r9
     548:	99 28       	or	r9, r9
     54a:	f2 27       	eor	r31, r18
     54c:	99 28       	or	r9, r9
     54e:	99 28       	or	r9, r9
     550:	99 28       	or	r9, r9
     552:	99 28       	or	r9, r9
     554:	99 28       	or	r9, r9
     556:	99 28       	or	r9, r9
     558:	99 28       	or	r9, r9
     55a:	99 28       	or	r9, r9
     55c:	99 28       	or	r9, r9
     55e:	f5 27       	eor	r31, r21
     560:	99 28       	or	r9, r9
     562:	99 28       	or	r9, r9
     564:	99 28       	or	r9, r9
     566:	99 28       	or	r9, r9
     568:	99 28       	or	r9, r9
     56a:	99 28       	or	r9, r9
     56c:	99 28       	or	r9, r9
     56e:	99 28       	or	r9, r9
     570:	99 28       	or	r9, r9
     572:	f8 27       	eor	r31, r24
     574:	99 28       	or	r9, r9
     576:	99 28       	or	r9, r9
     578:	99 28       	or	r9, r9
     57a:	99 28       	or	r9, r9
     57c:	99 28       	or	r9, r9
     57e:	99 28       	or	r9, r9
     580:	99 28       	or	r9, r9
     582:	99 28       	or	r9, r9
     584:	99 28       	or	r9, r9
     586:	fb 27       	eor	r31, r27
     588:	99 28       	or	r9, r9
     58a:	99 28       	or	r9, r9
     58c:	99 28       	or	r9, r9
     58e:	99 28       	or	r9, r9
     590:	99 28       	or	r9, r9
     592:	99 28       	or	r9, r9
     594:	99 28       	or	r9, r9
     596:	99 28       	or	r9, r9
     598:	99 28       	or	r9, r9
     59a:	fe 27       	eor	r31, r30
     59c:	99 28       	or	r9, r9
     59e:	99 28       	or	r9, r9
     5a0:	99 28       	or	r9, r9
     5a2:	99 28       	or	r9, r9
     5a4:	99 28       	or	r9, r9
     5a6:	99 28       	or	r9, r9
     5a8:	99 28       	or	r9, r9
     5aa:	99 28       	or	r9, r9
     5ac:	99 28       	or	r9, r9
     5ae:	01 28       	or	r0, r1
     5b0:	99 28       	or	r9, r9
     5b2:	99 28       	or	r9, r9
     5b4:	99 28       	or	r9, r9
     5b6:	99 28       	or	r9, r9
     5b8:	99 28       	or	r9, r9
     5ba:	99 28       	or	r9, r9
     5bc:	99 28       	or	r9, r9
     5be:	99 28       	or	r9, r9
     5c0:	99 28       	or	r9, r9
     5c2:	04 28       	or	r0, r4
     5c4:	99 28       	or	r9, r9
     5c6:	99 28       	or	r9, r9
     5c8:	99 28       	or	r9, r9
     5ca:	99 28       	or	r9, r9
     5cc:	99 28       	or	r9, r9
     5ce:	99 28       	or	r9, r9
     5d0:	99 28       	or	r9, r9
     5d2:	99 28       	or	r9, r9
     5d4:	99 28       	or	r9, r9
     5d6:	07 28       	or	r0, r7
     5d8:	99 28       	or	r9, r9
     5da:	99 28       	or	r9, r9
     5dc:	99 28       	or	r9, r9
     5de:	99 28       	or	r9, r9
     5e0:	99 28       	or	r9, r9
     5e2:	99 28       	or	r9, r9
     5e4:	99 28       	or	r9, r9
     5e6:	99 28       	or	r9, r9
     5e8:	99 28       	or	r9, r9
     5ea:	0a 28       	or	r0, r10
     5ec:	99 28       	or	r9, r9
     5ee:	99 28       	or	r9, r9
     5f0:	99 28       	or	r9, r9
     5f2:	99 28       	or	r9, r9
     5f4:	99 28       	or	r9, r9
     5f6:	99 28       	or	r9, r9
     5f8:	99 28       	or	r9, r9
     5fa:	99 28       	or	r9, r9
     5fc:	99 28       	or	r9, r9
     5fe:	0d 28       	or	r0, r13
     600:	99 28       	or	r9, r9
     602:	99 28       	or	r9, r9
     604:	99 28       	or	r9, r9
     606:	99 28       	or	r9, r9
     608:	99 28       	or	r9, r9
     60a:	99 28       	or	r9, r9
     60c:	99 28       	or	r9, r9
     60e:	99 28       	or	r9, r9
     610:	99 28       	or	r9, r9
     612:	10 28       	or	r1, r0
     614:	99 28       	or	r9, r9
     616:	99 28       	or	r9, r9
     618:	99 28       	or	r9, r9
     61a:	99 28       	or	r9, r9
     61c:	99 28       	or	r9, r9
     61e:	99 28       	or	r9, r9
     620:	99 28       	or	r9, r9
     622:	99 28       	or	r9, r9
     624:	99 28       	or	r9, r9
     626:	13 28       	or	r1, r3
     628:	99 28       	or	r9, r9
     62a:	99 28       	or	r9, r9
     62c:	99 28       	or	r9, r9
     62e:	99 28       	or	r9, r9
     630:	99 28       	or	r9, r9
     632:	99 28       	or	r9, r9
     634:	99 28       	or	r9, r9
     636:	99 28       	or	r9, r9
     638:	99 28       	or	r9, r9
     63a:	16 28       	or	r1, r6
     63c:	99 28       	or	r9, r9
     63e:	99 28       	or	r9, r9
     640:	99 28       	or	r9, r9
     642:	99 28       	or	r9, r9
     644:	99 28       	or	r9, r9
     646:	99 28       	or	r9, r9
     648:	99 28       	or	r9, r9
     64a:	99 28       	or	r9, r9
     64c:	99 28       	or	r9, r9
     64e:	19 28       	or	r1, r9
     650:	99 28       	or	r9, r9
     652:	99 28       	or	r9, r9
     654:	99 28       	or	r9, r9
     656:	99 28       	or	r9, r9
     658:	99 28       	or	r9, r9
     65a:	99 28       	or	r9, r9
     65c:	99 28       	or	r9, r9
     65e:	99 28       	or	r9, r9
     660:	99 28       	or	r9, r9
     662:	1c 28       	or	r1, r12
     664:	99 28       	or	r9, r9
     666:	99 28       	or	r9, r9
     668:	99 28       	or	r9, r9
     66a:	99 28       	or	r9, r9
     66c:	99 28       	or	r9, r9
     66e:	99 28       	or	r9, r9
     670:	99 28       	or	r9, r9
     672:	99 28       	or	r9, r9
     674:	99 28       	or	r9, r9
     676:	1f 28       	or	r1, r15
     678:	99 28       	or	r9, r9
     67a:	99 28       	or	r9, r9
     67c:	99 28       	or	r9, r9
     67e:	99 28       	or	r9, r9
     680:	99 28       	or	r9, r9
     682:	99 28       	or	r9, r9
     684:	99 28       	or	r9, r9
     686:	99 28       	or	r9, r9
     688:	99 28       	or	r9, r9
     68a:	22 28       	or	r2, r2
     68c:	99 28       	or	r9, r9
     68e:	99 28       	or	r9, r9
     690:	99 28       	or	r9, r9
     692:	99 28       	or	r9, r9
     694:	99 28       	or	r9, r9
     696:	99 28       	or	r9, r9
     698:	99 28       	or	r9, r9
     69a:	99 28       	or	r9, r9
     69c:	99 28       	or	r9, r9
     69e:	25 28       	or	r2, r5
     6a0:	99 28       	or	r9, r9
     6a2:	99 28       	or	r9, r9
     6a4:	99 28       	or	r9, r9
     6a6:	99 28       	or	r9, r9
     6a8:	99 28       	or	r9, r9
     6aa:	99 28       	or	r9, r9
     6ac:	99 28       	or	r9, r9
     6ae:	99 28       	or	r9, r9
     6b0:	99 28       	or	r9, r9
     6b2:	28 28       	or	r2, r8
     6b4:	99 28       	or	r9, r9
     6b6:	99 28       	or	r9, r9
     6b8:	99 28       	or	r9, r9
     6ba:	99 28       	or	r9, r9
     6bc:	99 28       	or	r9, r9
     6be:	99 28       	or	r9, r9
     6c0:	99 28       	or	r9, r9
     6c2:	99 28       	or	r9, r9
     6c4:	99 28       	or	r9, r9
     6c6:	2b 28       	or	r2, r11
     6c8:	99 28       	or	r9, r9
     6ca:	99 28       	or	r9, r9
     6cc:	99 28       	or	r9, r9
     6ce:	99 28       	or	r9, r9
     6d0:	99 28       	or	r9, r9
     6d2:	99 28       	or	r9, r9
     6d4:	99 28       	or	r9, r9
     6d6:	99 28       	or	r9, r9
     6d8:	99 28       	or	r9, r9
     6da:	38 28       	or	r3, r8
     6dc:	99 28       	or	r9, r9
     6de:	99 28       	or	r9, r9
     6e0:	99 28       	or	r9, r9
     6e2:	99 28       	or	r9, r9
     6e4:	99 28       	or	r9, r9
     6e6:	99 28       	or	r9, r9
     6e8:	99 28       	or	r9, r9
     6ea:	99 28       	or	r9, r9
     6ec:	99 28       	or	r9, r9
     6ee:	3b 28       	or	r3, r11
     6f0:	99 28       	or	r9, r9
     6f2:	99 28       	or	r9, r9
     6f4:	99 28       	or	r9, r9
     6f6:	99 28       	or	r9, r9
     6f8:	99 28       	or	r9, r9
     6fa:	99 28       	or	r9, r9
     6fc:	99 28       	or	r9, r9
     6fe:	99 28       	or	r9, r9
     700:	99 28       	or	r9, r9
     702:	3e 28       	or	r3, r14
     704:	99 28       	or	r9, r9
     706:	99 28       	or	r9, r9
     708:	99 28       	or	r9, r9
     70a:	99 28       	or	r9, r9
     70c:	99 28       	or	r9, r9
     70e:	99 28       	or	r9, r9
     710:	99 28       	or	r9, r9
     712:	99 28       	or	r9, r9
     714:	99 28       	or	r9, r9
     716:	41 28       	or	r4, r1
     718:	99 28       	or	r9, r9
     71a:	99 28       	or	r9, r9
     71c:	99 28       	or	r9, r9
     71e:	99 28       	or	r9, r9
     720:	99 28       	or	r9, r9
     722:	99 28       	or	r9, r9
     724:	99 28       	or	r9, r9
     726:	99 28       	or	r9, r9
     728:	99 28       	or	r9, r9
     72a:	44 28       	or	r4, r4
     72c:	99 28       	or	r9, r9
     72e:	99 28       	or	r9, r9
     730:	99 28       	or	r9, r9
     732:	99 28       	or	r9, r9
     734:	99 28       	or	r9, r9
     736:	99 28       	or	r9, r9
     738:	99 28       	or	r9, r9
     73a:	99 28       	or	r9, r9
     73c:	99 28       	or	r9, r9
     73e:	49 28       	or	r4, r9
     740:	99 28       	or	r9, r9
     742:	99 28       	or	r9, r9
     744:	99 28       	or	r9, r9
     746:	99 28       	or	r9, r9
     748:	99 28       	or	r9, r9
     74a:	99 28       	or	r9, r9
     74c:	99 28       	or	r9, r9
     74e:	99 28       	or	r9, r9
     750:	99 28       	or	r9, r9
     752:	4c 28       	or	r4, r12
     754:	99 28       	or	r9, r9
     756:	99 28       	or	r9, r9
     758:	99 28       	or	r9, r9
     75a:	99 28       	or	r9, r9
     75c:	99 28       	or	r9, r9
     75e:	99 28       	or	r9, r9
     760:	99 28       	or	r9, r9
     762:	99 28       	or	r9, r9
     764:	99 28       	or	r9, r9
     766:	4f 28       	or	r4, r15
     768:	99 28       	or	r9, r9
     76a:	99 28       	or	r9, r9
     76c:	99 28       	or	r9, r9
     76e:	99 28       	or	r9, r9
     770:	99 28       	or	r9, r9
     772:	99 28       	or	r9, r9
     774:	99 28       	or	r9, r9
     776:	99 28       	or	r9, r9
     778:	99 28       	or	r9, r9
     77a:	52 28       	or	r5, r2
     77c:	99 28       	or	r9, r9
     77e:	99 28       	or	r9, r9
     780:	99 28       	or	r9, r9
     782:	99 28       	or	r9, r9
     784:	99 28       	or	r9, r9
     786:	99 28       	or	r9, r9
     788:	99 28       	or	r9, r9
     78a:	99 28       	or	r9, r9
     78c:	99 28       	or	r9, r9
     78e:	55 28       	or	r5, r5
     790:	99 28       	or	r9, r9
     792:	99 28       	or	r9, r9
     794:	99 28       	or	r9, r9
     796:	99 28       	or	r9, r9
     798:	99 28       	or	r9, r9
     79a:	99 28       	or	r9, r9
     79c:	99 28       	or	r9, r9
     79e:	99 28       	or	r9, r9
     7a0:	99 28       	or	r9, r9
     7a2:	5a 28       	or	r5, r10
     7a4:	99 28       	or	r9, r9
     7a6:	99 28       	or	r9, r9
     7a8:	99 28       	or	r9, r9
     7aa:	99 28       	or	r9, r9
     7ac:	99 28       	or	r9, r9
     7ae:	99 28       	or	r9, r9
     7b0:	99 28       	or	r9, r9
     7b2:	99 28       	or	r9, r9
     7b4:	99 28       	or	r9, r9
     7b6:	5d 28       	or	r5, r13
     7b8:	99 28       	or	r9, r9
     7ba:	99 28       	or	r9, r9
     7bc:	99 28       	or	r9, r9
     7be:	99 28       	or	r9, r9
     7c0:	99 28       	or	r9, r9
     7c2:	99 28       	or	r9, r9
     7c4:	99 28       	or	r9, r9
     7c6:	99 28       	or	r9, r9
     7c8:	99 28       	or	r9, r9
     7ca:	62 28       	or	r6, r2
     7cc:	99 28       	or	r9, r9
     7ce:	99 28       	or	r9, r9
     7d0:	99 28       	or	r9, r9
     7d2:	99 28       	or	r9, r9
     7d4:	99 28       	or	r9, r9
     7d6:	99 28       	or	r9, r9
     7d8:	99 28       	or	r9, r9
     7da:	99 28       	or	r9, r9
     7dc:	99 28       	or	r9, r9
     7de:	67 28       	or	r6, r7
     7e0:	89 28       	or	r8, r9
     7e2:	8e 28       	or	r8, r14
     7e4:	93 28       	or	r9, r3
     7e6:	99 28       	or	r9, r9
     7e8:	99 28       	or	r9, r9
     7ea:	99 28       	or	r9, r9
     7ec:	99 28       	or	r9, r9
     7ee:	99 28       	or	r9, r9
     7f0:	99 28       	or	r9, r9
     7f2:	6c 28       	or	r6, r12
     7f4:	99 28       	or	r9, r9
     7f6:	99 28       	or	r9, r9
     7f8:	99 28       	or	r9, r9
     7fa:	99 28       	or	r9, r9
     7fc:	99 28       	or	r9, r9
     7fe:	99 28       	or	r9, r9
     800:	99 28       	or	r9, r9
     802:	99 28       	or	r9, r9
     804:	99 28       	or	r9, r9
     806:	6f 28       	or	r6, r15
     808:	99 28       	or	r9, r9
     80a:	99 28       	or	r9, r9
     80c:	99 28       	or	r9, r9
     80e:	99 28       	or	r9, r9
     810:	99 28       	or	r9, r9
     812:	99 28       	or	r9, r9
     814:	99 28       	or	r9, r9
     816:	99 28       	or	r9, r9
     818:	99 28       	or	r9, r9
     81a:	72 28       	or	r7, r2
     81c:	99 28       	or	r9, r9
     81e:	99 28       	or	r9, r9
     820:	99 28       	or	r9, r9
     822:	99 28       	or	r9, r9
     824:	99 28       	or	r9, r9
     826:	99 28       	or	r9, r9
     828:	99 28       	or	r9, r9
     82a:	99 28       	or	r9, r9
     82c:	99 28       	or	r9, r9
     82e:	75 28       	or	r7, r5
     830:	99 28       	or	r9, r9
     832:	99 28       	or	r9, r9
     834:	99 28       	or	r9, r9
     836:	99 28       	or	r9, r9
     838:	99 28       	or	r9, r9
     83a:	99 28       	or	r9, r9
     83c:	99 28       	or	r9, r9
     83e:	99 28       	or	r9, r9
     840:	99 28       	or	r9, r9
     842:	78 28       	or	r7, r8
     844:	99 28       	or	r9, r9
     846:	99 28       	or	r9, r9
     848:	99 28       	or	r9, r9
     84a:	99 28       	or	r9, r9
     84c:	99 28       	or	r9, r9
     84e:	99 28       	or	r9, r9
     850:	99 28       	or	r9, r9
     852:	99 28       	or	r9, r9
     854:	99 28       	or	r9, r9
     856:	7d 28       	or	r7, r13
     858:	99 28       	or	r9, r9
     85a:	99 28       	or	r9, r9
     85c:	99 28       	or	r9, r9
     85e:	99 28       	or	r9, r9
     860:	99 28       	or	r9, r9
     862:	99 28       	or	r9, r9
     864:	99 28       	or	r9, r9
     866:	99 28       	or	r9, r9
     868:	99 28       	or	r9, r9
     86a:	80 28       	or	r8, r0
     86c:	99 28       	or	r9, r9
     86e:	99 28       	or	r9, r9
     870:	99 28       	or	r9, r9
     872:	99 28       	or	r9, r9
     874:	99 28       	or	r9, r9
     876:	99 28       	or	r9, r9
     878:	99 28       	or	r9, r9
     87a:	99 28       	or	r9, r9
     87c:	99 28       	or	r9, r9
     87e:	83 28       	or	r8, r3
     880:	99 28       	or	r9, r9
     882:	99 28       	or	r9, r9
     884:	99 28       	or	r9, r9
     886:	99 28       	or	r9, r9
     888:	99 28       	or	r9, r9
     88a:	99 28       	or	r9, r9
     88c:	99 28       	or	r9, r9
     88e:	99 28       	or	r9, r9
     890:	99 28       	or	r9, r9
     892:	86 28       	or	r8, r6
     894:	08 00       	.word	0x0008	; ????
     896:	00 00       	nop
     898:	be 92       	st	-X, r11
     89a:	24 49       	sbci	r18, 0x94	; 148
     89c:	12 3e       	cpi	r17, 0xE2	; 226
     89e:	ab aa       	std	Y+51, r10	; 0x33
     8a0:	aa 2a       	or	r10, r26
     8a2:	be cd       	rjmp	.-1156   	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     8a4:	cc cc       	rjmp	.-1640   	; 0x23e <__SREG__+0x1ff>
     8a6:	4c 3e       	cpi	r20, 0xEC	; 236
     8a8:	00 00       	nop
     8aa:	00 80       	ld	r0, Z
     8ac:	be ab       	std	Y+54, r27	; 0x36
     8ae:	aa aa       	std	Y+50, r10	; 0x32
     8b0:	aa 3e       	cpi	r26, 0xEA	; 234
     8b2:	00 00       	nop
     8b4:	00 00       	nop
     8b6:	bf 00       	.word	0x00bf	; ????
     8b8:	00 00       	nop
     8ba:	80 3f       	cpi	r24, 0xF0	; 240
     8bc:	00 00       	nop
     8be:	00 00       	nop
     8c0:	00 08       	sbc	r0, r0
     8c2:	41 78       	andi	r20, 0x81	; 129
     8c4:	d3 bb       	out	0x13, r29	; 19
     8c6:	43 87       	std	Z+11, r20	; 0x0b
     8c8:	d1 13       	cpse	r29, r17
     8ca:	3d 19       	sub	r19, r13
     8cc:	0e 3c       	cpi	r16, 0xCE	; 206
     8ce:	c3 bd       	out	0x23, r28	; 35
     8d0:	42 82       	std	Z+2, r4	; 0x02
     8d2:	ad 2b       	or	r26, r29
     8d4:	3e 68       	ori	r19, 0x8E	; 142
     8d6:	ec 82       	std	Y+4, r14	; 0x04
     8d8:	76 be       	out	0x36, r7	; 54
     8da:	d9 8f       	std	Y+25, r29	; 0x19
     8dc:	e1 a9       	ldd	r30, Z+49	; 0x31
     8de:	3e 4c       	sbci	r19, 0xCE	; 206
     8e0:	80 ef       	ldi	r24, 0xF0	; 240
     8e2:	ff be       	out	0x3f, r15	; 63
     8e4:	01 c4       	rjmp	.+2050   	; 0x10e8 <vListInsert+0x78>
     8e6:	ff 7f       	andi	r31, 0xFF	; 255
     8e8:	3f 00       	.word	0x003f	; ????
     8ea:	00 00       	nop
	...

000008ee <__trampolines_end>:
     8ee:	6e 61       	ori	r22, 0x1E	; 30
     8f0:	6e 00       	.word	0x006e	; ????

000008f2 <__c.2332>:
     8f2:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     902:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     912:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     922:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     932:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     942:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     952:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     962:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     972:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     982:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     992:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     9a2:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     9b2:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     9c2:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     9d2:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     9e2:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000009f0 <R22_Saturation_Temp>:
     9f0:	9a 99 c9 c1 33 33 6b c1 33 33 d3 c0 cd cc cc 3d     ....33k.33.....=
     a00:	48 e1 a2 40 66 66 2e 41 00 00 78 41 9a 99 9d 41     H..@ff.A..xA...A
     a10:	00 00 bc 41 cd cc d8 41 33 33 f3 41 66 66 06 42     ...A...A33.Aff.B
     a20:	66 66 12 42 9a 99 1d 42 66 66 28 42 cd cc 32 42     ff.B...Bff(B..2B
     a30:	cd cc 28 42 66 66 46 42 9a 99 4f 42 66 66 58 42     ..(BffFB..OBffXB
     a40:	33 33 61 42 9a 99 69 42 9a 99 71 42 33 33 79 42     33aB..iB..qB33yB
     a50:	9a 99 80 42 33 33 84 42 cd cc 87 42 66 66 8b 42     ...B33.B...Bff.B
     a60:	00 00 8f 42 66 66 92 42 9a 99 95 42 cd cc 98 42     ...Bff.B...B...B

00000a70 <prvIdleTask>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
     a70:	0e e7       	ldi	r16, 0x7E	; 126
     a72:	16 e0       	ldi	r17, 0x06	; 6
     a74:	0f 2e       	mov	r0, r31
     a76:	fe ea       	ldi	r31, 0xAE	; 174
     a78:	ef 2e       	mov	r14, r31
     a7a:	f6 e0       	ldi	r31, 0x06	; 6
     a7c:	ff 2e       	mov	r15, r31
     a7e:	f0 2d       	mov	r31, r0
     a80:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <uxDeletedTasksWaitingCleanUp>
     a84:	88 23       	and	r24, r24
     a86:	11 f1       	breq	.+68     	; 0xacc <prvIdleTask+0x5c>
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	0f 92       	push	r0
     a8e:	d8 01       	movw	r26, r16
     a90:	17 96       	adiw	r26, 0x07	; 7
     a92:	ed 91       	ld	r30, X+
     a94:	fc 91       	ld	r31, X
     a96:	18 97       	sbiw	r26, 0x08	; 8
     a98:	c0 85       	ldd	r28, Z+8	; 0x08
     a9a:	d1 85       	ldd	r29, Z+9	; 0x09
     a9c:	ce 01       	movw	r24, r28
     a9e:	02 96       	adiw	r24, 0x02	; 2
     aa0:	24 d3       	rcall	.+1608   	; 0x10ea <uxListRemove>
     aa2:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <uxCurrentNumberOfTasks>
     aa6:	81 50       	subi	r24, 0x01	; 1
     aa8:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <uxCurrentNumberOfTasks>
     aac:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <uxDeletedTasksWaitingCleanUp>
     ab0:	81 50       	subi	r24, 0x01	; 1
     ab2:	80 93 7d 06 	sts	0x067D, r24	; 0x80067d <uxDeletedTasksWaitingCleanUp>
     ab6:	0f 90       	pop	r0
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     abc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     abe:	75 d0       	rcall	.+234    	; 0xbaa <vPortFree>
     ac0:	ce 01       	movw	r24, r28
     ac2:	73 d0       	rcall	.+230    	; 0xbaa <vPortFree>
     ac4:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <uxDeletedTasksWaitingCleanUp>
     ac8:	81 11       	cpse	r24, r1
     aca:	de cf       	rjmp	.-68     	; 0xa88 <prvIdleTask+0x18>
     acc:	f7 01       	movw	r30, r14
     ace:	80 81       	ld	r24, Z
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	08 f0       	brcs	.+2      	; 0xad6 <prvIdleTask+0x66>
     ad4:	3d d1       	rcall	.+634    	; 0xd50 <vPortYield>
     ad6:	73 d2       	rcall	.+1254   	; 0xfbe <vApplicationIdleHook>
     ad8:	d3 cf       	rjmp	.-90     	; 0xa80 <prvIdleTask+0x10>

00000ada <__ctors_end>:
     ada:	11 24       	eor	r1, r1
     adc:	1f be       	out	0x3f, r1	; 63
     ade:	cf ef       	ldi	r28, 0xFF	; 255
     ae0:	d1 e2       	ldi	r29, 0x21	; 33
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	cd bf       	out	0x3d, r28	; 61
     ae6:	00 e0       	ldi	r16, 0x00	; 0
     ae8:	0c bf       	out	0x3c, r16	; 60

00000aea <__do_copy_data>:
     aea:	16 e0       	ldi	r17, 0x06	; 6
     aec:	a0 e0       	ldi	r26, 0x00	; 0
     aee:	b2 e0       	ldi	r27, 0x02	; 2
     af0:	e8 e8       	ldi	r30, 0x88	; 136
     af2:	fb eb       	ldi	r31, 0xBB	; 187
     af4:	00 e0       	ldi	r16, 0x00	; 0
     af6:	0b bf       	out	0x3b, r16	; 59
     af8:	02 c0       	rjmp	.+4      	; 0xafe <__do_copy_data+0x14>
     afa:	07 90       	elpm	r0, Z+
     afc:	0d 92       	st	X+, r0
     afe:	ae 35       	cpi	r26, 0x5E	; 94
     b00:	b1 07       	cpc	r27, r17
     b02:	d9 f7       	brne	.-10     	; 0xafa <__do_copy_data+0x10>

00000b04 <__do_clear_bss>:
     b04:	2a e0       	ldi	r18, 0x0A	; 10
     b06:	ae e5       	ldi	r26, 0x5E	; 94
     b08:	b6 e0       	ldi	r27, 0x06	; 6
     b0a:	01 c0       	rjmp	.+2      	; 0xb0e <.do_clear_bss_start>

00000b0c <.do_clear_bss_loop>:
     b0c:	1d 92       	st	X+, r1

00000b0e <.do_clear_bss_start>:
     b0e:	ad 3a       	cpi	r26, 0xAD	; 173
     b10:	b2 07       	cpc	r27, r18
     b12:	e1 f7       	brne	.-8      	; 0xb0c <.do_clear_bss_loop>
     b14:	0e 94 6f 21 	call	0x42de	; 0x42de <main>
     b18:	0c 94 c2 5d 	jmp	0xbb84	; 0xbb84 <_exit>

00000b1c <__bad_interrupt>:
     b1c:	71 ca       	rjmp	.-2846   	; 0x0 <__vectors>

00000b1e <difftime>:
     b1e:	62 1b       	sub	r22, r18
     b20:	73 0b       	sbc	r23, r19
     b22:	84 0b       	sbc	r24, r20
     b24:	95 0b       	sbc	r25, r21
     b26:	08 95       	ret

00000b28 <time>:
     b28:	fc 01       	movw	r30, r24
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	60 91 a9 0a 	lds	r22, 0x0AA9	; 0x800aa9 <__system_time>
     b32:	70 91 aa 0a 	lds	r23, 0x0AAA	; 0x800aaa <__system_time+0x1>
     b36:	80 91 ab 0a 	lds	r24, 0x0AAB	; 0x800aab <__system_time+0x2>
     b3a:	90 91 ac 0a 	lds	r25, 0x0AAC	; 0x800aac <__system_time+0x3>
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	30 97       	sbiw	r30, 0x00	; 0
     b42:	21 f0       	breq	.+8      	; 0xb4c <time+0x24>
     b44:	60 83       	st	Z, r22
     b46:	71 83       	std	Z+1, r23	; 0x01
     b48:	82 83       	std	Z+2, r24	; 0x02
     b4a:	93 83       	std	Z+3, r25	; 0x03
     b4c:	08 95       	ret

00000b4e <system_tick>:
     b4e:	8f 93       	push	r24
     b50:	8f b7       	in	r24, 0x3f	; 63
     b52:	8f 93       	push	r24
     b54:	f8 94       	cli
     b56:	80 91 a9 0a 	lds	r24, 0x0AA9	; 0x800aa9 <__system_time>
     b5a:	8f 5f       	subi	r24, 0xFF	; 255
     b5c:	80 93 a9 0a 	sts	0x0AA9, r24	; 0x800aa9 <__system_time>
     b60:	80 91 aa 0a 	lds	r24, 0x0AAA	; 0x800aaa <__system_time+0x1>
     b64:	8f 4f       	sbci	r24, 0xFF	; 255
     b66:	80 93 aa 0a 	sts	0x0AAA, r24	; 0x800aaa <__system_time+0x1>
     b6a:	80 91 ab 0a 	lds	r24, 0x0AAB	; 0x800aab <__system_time+0x2>
     b6e:	8f 4f       	sbci	r24, 0xFF	; 255
     b70:	80 93 ab 0a 	sts	0x0AAB, r24	; 0x800aab <__system_time+0x2>
     b74:	80 91 ac 0a 	lds	r24, 0x0AAC	; 0x800aac <__system_time+0x3>
     b78:	8f 4f       	sbci	r24, 0xFF	; 255
     b7a:	80 93 ac 0a 	sts	0x0AAC, r24	; 0x800aac <__system_time+0x3>
     b7e:	8f 91       	pop	r24
     b80:	8f bf       	out	0x3f, r24	; 63
     b82:	8f 91       	pop	r24
     b84:	08 95       	ret

00000b86 <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
     b8c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
     b90:	ce 01       	movw	r24, r28
     b92:	0e 94 89 5a 	call	0xb512	; 0xb512 <malloc>
     b96:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     b98:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     b9c:	20 97       	sbiw	r28, 0x00	; 0
     b9e:	09 f4       	brne	.+2      	; 0xba2 <pvPortMalloc+0x1c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     ba0:	27 d2       	rcall	.+1102   	; 0xff0 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
     ba2:	ce 01       	movw	r24, r28
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
	if( pv )
     bae:	00 97       	sbiw	r24, 0x00	; 0
     bb0:	41 f0       	breq	.+16     	; 0xbc2 <vPortFree+0x18>
     bb2:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
     bb4:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
		{
			free( pv );
     bb8:	ce 01       	movw	r24, r28
     bba:	0e 94 21 5b 	call	0xb642	; 0xb642 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
     bbe:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
	}
}
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <pxPortInitialiseStack>:
#elif defined( portUSE_TIMER2 )
        portTIMSK &= ~( _BV(OCIE2B)|_BV(OCIE2A)|_BV(TOIE2) );	// disable all Timer2 interrupts
        ASSR = 0x00;              								// set Timer/Counter2 to be off

#elif defined( portUSE_TIMER3 )
        portTIMSK &= ~( _BV(OCIE3B)|_BV(OCIE3A)|_BV(TOIE3) );	// disable all Timer3 interrupts
     bc8:	31 e1       	ldi	r19, 0x11	; 17
     bca:	fc 01       	movw	r30, r24
     bcc:	30 83       	st	Z, r19
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	22 e2       	ldi	r18, 0x22	; 34
     bd2:	20 83       	st	Z, r18
     bd4:	31 97       	sbiw	r30, 0x01	; 1
     bd6:	a3 e3       	ldi	r26, 0x33	; 51
     bd8:	a0 83       	st	Z, r26
     bda:	31 97       	sbiw	r30, 0x01	; 1
     bdc:	60 83       	st	Z, r22
     bde:	31 97       	sbiw	r30, 0x01	; 1
     be0:	70 83       	st	Z, r23
     be2:	31 97       	sbiw	r30, 0x01	; 1
     be4:	10 82       	st	Z, r1
     be6:	31 97       	sbiw	r30, 0x01	; 1
     be8:	10 82       	st	Z, r1
     bea:	31 97       	sbiw	r30, 0x01	; 1
     bec:	60 e8       	ldi	r22, 0x80	; 128
     bee:	60 83       	st	Z, r22
     bf0:	31 97       	sbiw	r30, 0x01	; 1
     bf2:	10 82       	st	Z, r1
     bf4:	31 97       	sbiw	r30, 0x01	; 1
     bf6:	10 82       	st	Z, r1
     bf8:	31 97       	sbiw	r30, 0x01	; 1
     bfa:	10 82       	st	Z, r1
     bfc:	31 97       	sbiw	r30, 0x01	; 1
     bfe:	62 e0       	ldi	r22, 0x02	; 2
     c00:	60 83       	st	Z, r22
     c02:	31 97       	sbiw	r30, 0x01	; 1
     c04:	63 e0       	ldi	r22, 0x03	; 3
     c06:	60 83       	st	Z, r22
     c08:	31 97       	sbiw	r30, 0x01	; 1
     c0a:	64 e0       	ldi	r22, 0x04	; 4
     c0c:	60 83       	st	Z, r22
     c0e:	31 97       	sbiw	r30, 0x01	; 1
     c10:	65 e0       	ldi	r22, 0x05	; 5
     c12:	60 83       	st	Z, r22
     c14:	31 97       	sbiw	r30, 0x01	; 1
     c16:	66 e0       	ldi	r22, 0x06	; 6
     c18:	60 83       	st	Z, r22
     c1a:	31 97       	sbiw	r30, 0x01	; 1
     c1c:	67 e0       	ldi	r22, 0x07	; 7
     c1e:	60 83       	st	Z, r22
     c20:	31 97       	sbiw	r30, 0x01	; 1
     c22:	68 e0       	ldi	r22, 0x08	; 8
     c24:	60 83       	st	Z, r22
     c26:	31 97       	sbiw	r30, 0x01	; 1
     c28:	69 e0       	ldi	r22, 0x09	; 9
     c2a:	60 83       	st	Z, r22
     c2c:	31 97       	sbiw	r30, 0x01	; 1
     c2e:	60 e1       	ldi	r22, 0x10	; 16
     c30:	60 83       	st	Z, r22
     c32:	31 97       	sbiw	r30, 0x01	; 1
     c34:	30 83       	st	Z, r19
     c36:	31 97       	sbiw	r30, 0x01	; 1
     c38:	32 e1       	ldi	r19, 0x12	; 18
     c3a:	30 83       	st	Z, r19
     c3c:	31 97       	sbiw	r30, 0x01	; 1
     c3e:	33 e1       	ldi	r19, 0x13	; 19
     c40:	30 83       	st	Z, r19
     c42:	31 97       	sbiw	r30, 0x01	; 1
     c44:	34 e1       	ldi	r19, 0x14	; 20
     c46:	30 83       	st	Z, r19
     c48:	31 97       	sbiw	r30, 0x01	; 1
     c4a:	35 e1       	ldi	r19, 0x15	; 21
     c4c:	30 83       	st	Z, r19
     c4e:	31 97       	sbiw	r30, 0x01	; 1
     c50:	36 e1       	ldi	r19, 0x16	; 22
     c52:	30 83       	st	Z, r19
     c54:	31 97       	sbiw	r30, 0x01	; 1
     c56:	37 e1       	ldi	r19, 0x17	; 23
     c58:	30 83       	st	Z, r19
     c5a:	31 97       	sbiw	r30, 0x01	; 1
     c5c:	38 e1       	ldi	r19, 0x18	; 24
     c5e:	30 83       	st	Z, r19
     c60:	31 97       	sbiw	r30, 0x01	; 1
     c62:	39 e1       	ldi	r19, 0x19	; 25
     c64:	30 83       	st	Z, r19
     c66:	31 97       	sbiw	r30, 0x01	; 1
     c68:	30 e2       	ldi	r19, 0x20	; 32
     c6a:	30 83       	st	Z, r19
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	31 e2       	ldi	r19, 0x21	; 33
     c70:	30 83       	st	Z, r19
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	20 83       	st	Z, r18
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	23 e2       	ldi	r18, 0x23	; 35
     c7a:	20 83       	st	Z, r18
     c7c:	31 97       	sbiw	r30, 0x01	; 1
     c7e:	40 83       	st	Z, r20
     c80:	31 97       	sbiw	r30, 0x01	; 1
     c82:	50 83       	st	Z, r21
     c84:	31 97       	sbiw	r30, 0x01	; 1
     c86:	26 e2       	ldi	r18, 0x26	; 38
     c88:	20 83       	st	Z, r18
     c8a:	31 97       	sbiw	r30, 0x01	; 1
     c8c:	27 e2       	ldi	r18, 0x27	; 39
     c8e:	20 83       	st	Z, r18
     c90:	31 97       	sbiw	r30, 0x01	; 1
     c92:	28 e2       	ldi	r18, 0x28	; 40
     c94:	20 83       	st	Z, r18
     c96:	31 97       	sbiw	r30, 0x01	; 1
     c98:	29 e2       	ldi	r18, 0x29	; 41
     c9a:	20 83       	st	Z, r18
     c9c:	31 97       	sbiw	r30, 0x01	; 1
     c9e:	20 e3       	ldi	r18, 0x30	; 48
     ca0:	20 83       	st	Z, r18
     ca2:	31 97       	sbiw	r30, 0x01	; 1
     ca4:	21 e3       	ldi	r18, 0x31	; 49
     ca6:	20 83       	st	Z, r18
     ca8:	89 97       	sbiw	r24, 0x29	; 41
     caa:	08 95       	ret

00000cac <xPortStartScheduler>:
     cac:	88 ee       	ldi	r24, 0xE8	; 232
     cae:	93 e0       	ldi	r25, 0x03	; 3
     cb0:	a0 e0       	ldi	r26, 0x00	; 0
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <portTickRateHz>
     cb8:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <portTickRateHz+0x1>
     cbc:	a0 93 47 07 	sts	0x0747, r26	; 0x800747 <portTickRateHz+0x2>
     cc0:	b0 93 48 07 	sts	0x0748, r27	; 0x800748 <portTickRateHz+0x3>
     cc4:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <ticksRemainingInSec>
     cc8:	90 93 4a 07 	sts	0x074A, r25	; 0x80074a <ticksRemainingInSec+0x1>
     ccc:	a0 93 4b 07 	sts	0x074B, r26	; 0x80074b <ticksRemainingInSec+0x2>
     cd0:	b0 93 4c 07 	sts	0x074C, r27	; 0x80074c <ticksRemainingInSec+0x3>
     cd4:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     cd8:	89 ef       	ldi	r24, 0xF9	; 249
     cda:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     cde:	8b e0       	ldi	r24, 0x0B	; 11
     ce0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
     ce4:	e1 e7       	ldi	r30, 0x71	; 113
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	82 60       	ori	r24, 0x02	; 2
     cec:	80 83       	st	Z, r24
     cee:	a0 91 da 06 	lds	r26, 0x06DA	; 0x8006da <pxCurrentTCB>
     cf2:	b0 91 db 06 	lds	r27, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
     cf6:	cd 91       	ld	r28, X+
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	dd 91       	ld	r29, X+
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	ff 91       	pop	r31
     d00:	ef 91       	pop	r30
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	bf 91       	pop	r27
     d08:	af 91       	pop	r26
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	7f 91       	pop	r23
     d10:	6f 91       	pop	r22
     d12:	5f 91       	pop	r21
     d14:	4f 91       	pop	r20
     d16:	3f 91       	pop	r19
     d18:	2f 91       	pop	r18
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	ff 90       	pop	r15
     d20:	ef 90       	pop	r14
     d22:	df 90       	pop	r13
     d24:	cf 90       	pop	r12
     d26:	bf 90       	pop	r11
     d28:	af 90       	pop	r10
     d2a:	9f 90       	pop	r9
     d2c:	8f 90       	pop	r8
     d2e:	7f 90       	pop	r7
     d30:	6f 90       	pop	r6
     d32:	5f 90       	pop	r5
     d34:	4f 90       	pop	r4
     d36:	3f 90       	pop	r3
     d38:	2f 90       	pop	r2
     d3a:	1f 90       	pop	r1
     d3c:	0f 90       	pop	r0
     d3e:	0c be       	out	0x3c, r0	; 60
     d40:	0f 90       	pop	r0
     d42:	0b be       	out	0x3b, r0	; 59
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	0f 90       	pop	r0
     d4a:	08 95       	ret
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	08 95       	ret

00000d50 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	0f 92       	push	r0
     d58:	0b b6       	in	r0, 0x3b	; 59
     d5a:	0f 92       	push	r0
     d5c:	0c b6       	in	r0, 0x3c	; 60
     d5e:	0f 92       	push	r0
     d60:	1f 92       	push	r1
     d62:	11 24       	eor	r1, r1
     d64:	2f 92       	push	r2
     d66:	3f 92       	push	r3
     d68:	4f 92       	push	r4
     d6a:	5f 92       	push	r5
     d6c:	6f 92       	push	r6
     d6e:	7f 92       	push	r7
     d70:	8f 92       	push	r8
     d72:	9f 92       	push	r9
     d74:	af 92       	push	r10
     d76:	bf 92       	push	r11
     d78:	cf 92       	push	r12
     d7a:	df 92       	push	r13
     d7c:	ef 92       	push	r14
     d7e:	ff 92       	push	r15
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	2f 93       	push	r18
     d86:	3f 93       	push	r19
     d88:	4f 93       	push	r20
     d8a:	5f 93       	push	r21
     d8c:	6f 93       	push	r22
     d8e:	7f 93       	push	r23
     d90:	8f 93       	push	r24
     d92:	9f 93       	push	r25
     d94:	af 93       	push	r26
     d96:	bf 93       	push	r27
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31
     da0:	a0 91 da 06 	lds	r26, 0x06DA	; 0x8006da <pxCurrentTCB>
     da4:	b0 91 db 06 	lds	r27, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
     da8:	0d b6       	in	r0, 0x3d	; 61
     daa:	0d 92       	st	X+, r0
     dac:	0e b6       	in	r0, 0x3e	; 62
     dae:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     db0:	0e 94 09 18 	call	0x3012	; 0x3012 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     db4:	a0 91 da 06 	lds	r26, 0x06DA	; 0x8006da <pxCurrentTCB>
     db8:	b0 91 db 06 	lds	r27, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
     dbc:	cd 91       	ld	r28, X+
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	dd 91       	ld	r29, X+
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	bf 91       	pop	r27
     dce:	af 91       	pop	r26
     dd0:	9f 91       	pop	r25
     dd2:	8f 91       	pop	r24
     dd4:	7f 91       	pop	r23
     dd6:	6f 91       	pop	r22
     dd8:	5f 91       	pop	r21
     dda:	4f 91       	pop	r20
     ddc:	3f 91       	pop	r19
     dde:	2f 91       	pop	r18
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	ff 90       	pop	r15
     de6:	ef 90       	pop	r14
     de8:	df 90       	pop	r13
     dea:	cf 90       	pop	r12
     dec:	bf 90       	pop	r11
     dee:	af 90       	pop	r10
     df0:	9f 90       	pop	r9
     df2:	8f 90       	pop	r8
     df4:	7f 90       	pop	r7
     df6:	6f 90       	pop	r6
     df8:	5f 90       	pop	r5
     dfa:	4f 90       	pop	r4
     dfc:	3f 90       	pop	r3
     dfe:	2f 90       	pop	r2
     e00:	1f 90       	pop	r1
     e02:	0f 90       	pop	r0
     e04:	0c be       	out	0x3c, r0	; 60
     e06:	0f 90       	pop	r0
     e08:	0b be       	out	0x3b, r0	; 59
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
     e10:	08 95       	ret

00000e12 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     e12:	0f 92       	push	r0
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	0f 92       	push	r0
     e1a:	0b b6       	in	r0, 0x3b	; 59
     e1c:	0f 92       	push	r0
     e1e:	0c b6       	in	r0, 0x3c	; 60
     e20:	0f 92       	push	r0
     e22:	1f 92       	push	r1
     e24:	11 24       	eor	r1, r1
     e26:	2f 92       	push	r2
     e28:	3f 92       	push	r3
     e2a:	4f 92       	push	r4
     e2c:	5f 92       	push	r5
     e2e:	6f 92       	push	r6
     e30:	7f 92       	push	r7
     e32:	8f 92       	push	r8
     e34:	9f 92       	push	r9
     e36:	af 92       	push	r10
     e38:	bf 92       	push	r11
     e3a:	cf 92       	push	r12
     e3c:	df 92       	push	r13
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	2f 93       	push	r18
     e48:	3f 93       	push	r19
     e4a:	4f 93       	push	r20
     e4c:	5f 93       	push	r21
     e4e:	6f 93       	push	r22
     e50:	7f 93       	push	r23
     e52:	8f 93       	push	r24
     e54:	9f 93       	push	r25
     e56:	af 93       	push	r26
     e58:	bf 93       	push	r27
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
     e62:	a0 91 da 06 	lds	r26, 0x06DA	; 0x8006da <pxCurrentTCB>
     e66:	b0 91 db 06 	lds	r27, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
     e6a:	0d b6       	in	r0, 0x3d	; 61
     e6c:	0d 92       	st	X+, r0
     e6e:	0e b6       	in	r0, 0x3e	; 62
     e70:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
     e72:	13 be       	out	0x33, r1	; 51
	// start mark - check for start of interrupt - for debugging only
	PORTD |=  _BV(PORTD7);				// Ping IO line.
#endif

#if !defined(portUSE_TIMER2_RTC)
	if (--ticksRemainingInSec == 0)
     e74:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <ticksRemainingInSec>
     e78:	90 91 4a 07 	lds	r25, 0x074A	; 0x80074a <ticksRemainingInSec+0x1>
     e7c:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <ticksRemainingInSec+0x2>
     e80:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <ticksRemainingInSec+0x3>
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	a1 09       	sbc	r26, r1
     e88:	b1 09       	sbc	r27, r1
     e8a:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <ticksRemainingInSec>
     e8e:	90 93 4a 07 	sts	0x074A, r25	; 0x80074a <ticksRemainingInSec+0x1>
     e92:	a0 93 4b 07 	sts	0x074B, r26	; 0x80074b <ticksRemainingInSec+0x2>
     e96:	b0 93 4c 07 	sts	0x074C, r27	; 0x80074c <ticksRemainingInSec+0x3>
     e9a:	89 2b       	or	r24, r25
     e9c:	8a 2b       	or	r24, r26
     e9e:	8b 2b       	or	r24, r27
     ea0:	89 f4       	brne	.+34     	; 0xec4 <vPortYieldFromTick+0xb2>
	{
		system_tick();
     ea2:	55 de       	rcall	.-854    	; 0xb4e <system_tick>
		ticksRemainingInSec = portTickRateHz;
     ea4:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <portTickRateHz>
     ea8:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <portTickRateHz+0x1>
     eac:	a0 91 47 07 	lds	r26, 0x0747	; 0x800747 <portTickRateHz+0x2>
     eb0:	b0 91 48 07 	lds	r27, 0x0748	; 0x800748 <portTickRateHz+0x3>
     eb4:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <ticksRemainingInSec>
     eb8:	90 93 4a 07 	sts	0x074A, r25	; 0x80074a <ticksRemainingInSec+0x1>
     ebc:	a0 93 4b 07 	sts	0x074B, r26	; 0x80074b <ticksRemainingInSec+0x2>
     ec0:	b0 93 4c 07 	sts	0x074C, r27	; 0x80074c <ticksRemainingInSec+0x3>
	}
#endif

	if( xTaskIncrementTick() != pdFALSE )
     ec4:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <xTaskIncrementTick>
     ec8:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     eca:	0e 94 09 18 	call	0x3012	; 0x3012 <vTaskSwitchContext>
#if defined(DEBUG_PING)
	// end mark - check for end of interrupt - for debugging only
	PORTD &= ~_BV(PORTD7);
#endif

	portRESTORE_CONTEXT();
     ece:	a0 91 da 06 	lds	r26, 0x06DA	; 0x8006da <pxCurrentTCB>
     ed2:	b0 91 db 06 	lds	r27, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
     ed6:	cd 91       	ld	r28, X+
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	dd 91       	ld	r29, X+
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	ff 91       	pop	r31
     ee0:	ef 91       	pop	r30
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	bf 91       	pop	r27
     ee8:	af 91       	pop	r26
     eea:	9f 91       	pop	r25
     eec:	8f 91       	pop	r24
     eee:	7f 91       	pop	r23
     ef0:	6f 91       	pop	r22
     ef2:	5f 91       	pop	r21
     ef4:	4f 91       	pop	r20
     ef6:	3f 91       	pop	r19
     ef8:	2f 91       	pop	r18
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
     f02:	df 90       	pop	r13
     f04:	cf 90       	pop	r12
     f06:	bf 90       	pop	r11
     f08:	af 90       	pop	r10
     f0a:	9f 90       	pop	r9
     f0c:	8f 90       	pop	r8
     f0e:	7f 90       	pop	r7
     f10:	6f 90       	pop	r6
     f12:	5f 90       	pop	r5
     f14:	4f 90       	pop	r4
     f16:	3f 90       	pop	r3
     f18:	2f 90       	pop	r2
     f1a:	1f 90       	pop	r1
     f1c:	0f 90       	pop	r0
     f1e:	0c be       	out	0x3c, r0	; 60
     f20:	0f 90       	pop	r0
     f22:	0b be       	out	0x3b, r0	; 59
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
     f2a:	08 95       	ret

00000f2c <__vector_32>:
	 * count is incremented after the context is saved.
	 */
	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
     f2c:	72 df       	rcall	.-284    	; 0xe12 <vPortYieldFromTick>
		__asm__ __volatile__ ( "reti" );
     f2e:	18 95       	reti

00000f30 <setAnalogMode>:
// For example: if (getMode() == MODE_8_BIT) ...

inline uint8_t getAnalogMode(void)
{
	return (ADMUX >> ADLAR) & 1;
}
     f30:	81 11       	cpse	r24, r1
     f32:	06 c0       	rjmp	.+12     	; 0xf40 <setAnalogMode+0x10>
     f34:	ec e7       	ldi	r30, 0x7C	; 124
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	8f 7d       	andi	r24, 0xDF	; 223
     f3c:	80 83       	st	Z, r24
     f3e:	08 95       	ret
     f40:	ec e7       	ldi	r30, 0x7C	; 124
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	80 62       	ori	r24, 0x20	; 32
     f48:	80 83       	st	Z, r24
     f4a:	08 95       	ret

00000f4c <analogIsConverting>:

// returns 1 if the ADC is in the middle of an conversion, otherwise
// returns 0
inline uint8_t analogIsConverting(void)
{
	return (ADCSRA >> ADSC) & 1;
     f4c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
}
     f50:	86 fb       	bst	r24, 6
     f52:	88 27       	eor	r24, r24
     f54:	80 f9       	bld	r24, 0
     f56:	08 95       	ret

00000f58 <startAnalogConversion>:
//  Orangutan SVP.

inline void startAnalogConversion(uint8_t channel, uint8_t use_internal_reference)
{
	// Channel numbers greater than 15 on 328p or 1284p or 31 on 2560 are invalid.
	if (channel > 0x1F)
     f58:	80 32       	cpi	r24, 0x20	; 32
     f5a:	18 f5       	brcc	.+70     	; 0xfa2 <startAnalogConversion+0x4a>
	{
		return;
	}

	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
     f5c:	97 e8       	ldi	r25, 0x87	; 135
     f5e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	// to channel 0, which can affect the ADC charge capacitor.  For example, if you have a
	// high output impedance voltage on channel 1 and a low output impedance voltage on channel
	// 0, the voltage on channel 0 be briefly applied to the ADC capacitor before every conversion,
	// which could prevent the capacitor from settling to the voltage on channel 1, even over
	// many reads.
	uint8_t tempADMUX = ADMUX;
     f62:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	tempADMUX |= _BV(REFS0);		// Use external capacitor on ARef
	if(use_internal_reference)		// Note: internal reference should NOT be used on devices
     f66:	66 23       	and	r22, r22
     f68:	11 f0       	breq	.+4      	; 0xf6e <startAnalogConversion+0x16>
	{								//  where AREF is connected to an external voltage!
		// use the internal voltage reference
		tempADMUX |= _BV(REFS1);	// Internal reference: 1.1 V on ATmega48/168/328; 2.56 V on ATmega324/644/1284
     f6a:	90 6c       	ori	r25, 0xC0	; 192
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <startAnalogConversion+0x1a>
     f6e:	9f 77       	andi	r25, 0x7F	; 127
	}
	else
	{
		// use AVcc as a reference
		tempADMUX &= ~_BV(REFS1);	// External reference: on AVcc
     f70:	90 64       	ori	r25, 0x40	; 64
	}

	tempADMUX &= ~0x1F;		 // clear channel selection bits of ADMUX
     f72:	90 7e       	andi	r25, 0xE0	; 224
	#ifdef MUX5
	if (channel > 7) {
     f74:	88 30       	cpi	r24, 0x08	; 8
     f76:	40 f0       	brcs	.+16     	; 0xf88 <startAnalogConversion+0x30>
		ADCSRB |= _BV(MUX5);
     f78:	eb e7       	ldi	r30, 0x7B	; 123
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	20 81       	ld	r18, Z
     f7e:	28 60       	ori	r18, 0x08	; 8
     f80:	20 83       	st	Z, r18
		tempADMUX |= channel - 8; 
     f82:	88 50       	subi	r24, 0x08	; 8
     f84:	89 2b       	or	r24, r25
     f86:	06 c0       	rjmp	.+12     	; 0xf94 <startAnalogConversion+0x3c>
		} else {
		ADCSRB &= ~(_BV(MUX5));
     f88:	eb e7       	ldi	r30, 0x7B	; 123
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	20 81       	ld	r18, Z
     f8e:	27 7f       	andi	r18, 0xF7	; 247
     f90:	20 83       	st	Z, r18
		tempADMUX |= channel;
     f92:	89 2b       	or	r24, r25
	}
	#endif
	
	   // we only get this far if channel is less than 32
	ADMUX = tempADMUX;
     f94:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA |= _BV(ADSC); // start the conversion
     f98:	ea e7       	ldi	r30, 0x7A	; 122
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	80 64       	ori	r24, 0x40	; 64
     fa0:	80 83       	st	Z, r24
     fa2:	08 95       	ret

00000fa4 <analogConversionResult>:
// MODE_8_BIT and MODE_10_BIT:
// For example: if (getMode() == MODE_8_BIT) ...

inline uint8_t getAnalogMode(void)
{
	return (ADMUX >> ADLAR) & 1;
     fa4:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
}

// returns the result of the previous ADC conversion.
inline uint16_t analogConversionResult(void)
{
	if (getAnalogMode())				// if left-adjusted (i.e. 8-bit mode)
     fa8:	85 ff       	sbrs	r24, 5
     faa:	04 c0       	rjmp	.+8      	; 0xfb4 <analogConversionResult+0x10>
	{
		return (uint16_t) ADCH;			// 8-bit result
     fac:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	08 95       	ret
	}
	else
	{
		return ADC;				// 10-bit result
     fb4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     fb8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	}
}
     fbc:	08 95       	ret

00000fbe <vApplicationIdleHook>:
	// The corresponding PIN Register bit will always read as zero when this bit is set. When an
	// analogue signal is applied to the ADC7..0 pin and the digital input from this pin is not needed, this
	// bit should be written logic one to reduce power consumption in the digital input buffer.

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
	DIDR0 = 0xFF;
     fbe:	8f ef       	ldi	r24, 0xFF	; 255
     fc0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xFF;
     fc4:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	// When the ACD bit is written logic one, the power to the Analogue Comparator is switched off.
	// This bit can be set at any time to turn off the Analogue Comparator.
	// This will reduce power consumption in Active and Idle mode.
	// When changing the ACD bit, the Analogue Comparator Interrupt must be disabled by clearing the ACIE bit in ACSR.
	// Otherwise an interrupt can occur when the ACD bit is changed.
	ACSR &= ~_BV(ACIE);
     fc8:	80 b7       	in	r24, 0x30	; 48
     fca:	87 7f       	andi	r24, 0xF7	; 247
     fcc:	80 bf       	out	0x30, r24	; 48
	ACSR |=  _BV(ACD);
     fce:	80 b7       	in	r24, 0x30	; 48
     fd0:	80 68       	ori	r24, 0x80	; 128
     fd2:	80 bf       	out	0x30, r24	; 48
	// SLEEP_MODE_PWR_DOWN     _BV(SM1)
	// SLEEP_MODE_PWR_SAVE     (_BV(SM0) | _BV(SM1))
	// SLEEP_MODE_STANDBY      (_BV(SM1) | _BV(SM2))
	// SLEEP_MODE_EXT_STANDBY  (_BV(SM0) | _BV(SM1) | _BV(SM2))

	set_sleep_mode( SLEEP_MODE_IDLE );
     fd4:	83 b7       	in	r24, 0x33	; 51
     fd6:	81 7f       	andi	r24, 0xF1	; 241
     fd8:	83 bf       	out	0x33, r24	; 51

	portENTER_CRITICAL();
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	0f 92       	push	r0
	sleep_enable();
     fe0:	83 b7       	in	r24, 0x33	; 51
     fe2:	81 60       	ori	r24, 0x01	; 1
     fe4:	83 bf       	out	0x33, r24	; 51

#if defined(BODS) && defined(BODSE) // only if there is support to disable the BOD.
	sleep_bod_disable();
#endif

	portEXIT_CRITICAL();
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
	sleep_cpu();		// good night.
     fea:	88 95       	sleep

	sleep_reset();		// reset the sleep_mode() faster than sleep_disable();
     fec:	13 be       	out	0x33, r1	; 51
     fee:	08 95       	ret

00000ff0 <vApplicationMallocFailedHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
     ff0:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     ff2:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ff4:	00 00       	nop
	for(;;)
	{
		_delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
     ff6:	1f 9a       	sbi	0x03, 7	; 3
     ff8:	fd cf       	rjmp	.-6      	; 0xff4 <vApplicationMallocFailedHook+0x4>

00000ffa <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
     ffa:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     ffc:	2f 9a       	sbi	0x05, 7	; 5
     ffe:	00 c0       	rjmp	.+0      	; 0x1000 <vApplicationStackOverflowHook+0x6>
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    1000:	1f 9a       	sbi	0x03, 7	; 3
    1002:	fd cf       	rjmp	.-6      	; 0xffe <vApplicationStackOverflowHook+0x4>

00001004 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1004:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1006:	03 96       	adiw	r24, 0x03	; 3
    1008:	92 83       	std	Z+2, r25	; 0x02
    100a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    100c:	4f ef       	ldi	r20, 0xFF	; 255
    100e:	5f ef       	ldi	r21, 0xFF	; 255
    1010:	ba 01       	movw	r22, r20
    1012:	43 83       	std	Z+3, r20	; 0x03
    1014:	54 83       	std	Z+4, r21	; 0x04
    1016:	65 83       	std	Z+5, r22	; 0x05
    1018:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    101a:	90 87       	std	Z+8, r25	; 0x08
    101c:	87 83       	std	Z+7, r24	; 0x07
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    101e:	92 87       	std	Z+10, r25	; 0x0a
    1020:	81 87       	std	Z+9, r24	; 0x09

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1022:	10 82       	st	Z, r1
    1024:	08 95       	ret

00001026 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1026:	fc 01       	movw	r30, r24
    1028:	13 86       	std	Z+11, r1	; 0x0b
    102a:	12 86       	std	Z+10, r1	; 0x0a
    102c:	08 95       	ret

0000102e <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	9c 01       	movw	r18, r24
    1034:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1036:	dc 01       	movw	r26, r24
    1038:	11 96       	adiw	r26, 0x01	; 1
    103a:	cd 91       	ld	r28, X+
    103c:	dc 91       	ld	r29, X
    103e:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1040:	d5 83       	std	Z+5, r29	; 0x05
    1042:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1044:	8e 81       	ldd	r24, Y+6	; 0x06
    1046:	9f 81       	ldd	r25, Y+7	; 0x07
    1048:	97 83       	std	Z+7, r25	; 0x07
    104a:	86 83       	std	Z+6, r24	; 0x06

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    104c:	8e 81       	ldd	r24, Y+6	; 0x06
    104e:	9f 81       	ldd	r25, Y+7	; 0x07
    1050:	dc 01       	movw	r26, r24
    1052:	15 96       	adiw	r26, 0x05	; 5
    1054:	7c 93       	st	X, r23
    1056:	6e 93       	st	-X, r22
    1058:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxPrevious = pxNewListItem;
    105a:	7f 83       	std	Y+7, r23	; 0x07
    105c:	6e 83       	std	Y+6, r22	; 0x06

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    105e:	33 87       	std	Z+11, r19	; 0x0b
    1060:	22 87       	std	Z+10, r18	; 0x0a

	( pxList->uxNumberOfItems )++;
    1062:	f9 01       	movw	r30, r18
    1064:	80 81       	ld	r24, Z
    1066:	8f 5f       	subi	r24, 0xFF	; 255
    1068:	80 83       	st	Z, r24
}
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	08 95       	ret

00001070 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    107a:	08 81       	ld	r16, Y
    107c:	19 81       	ldd	r17, Y+1	; 0x01
    107e:	2a 81       	ldd	r18, Y+2	; 0x02
    1080:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1082:	0f 3f       	cpi	r16, 0xFF	; 255
    1084:	4f ef       	ldi	r20, 0xFF	; 255
    1086:	14 07       	cpc	r17, r20
    1088:	24 07       	cpc	r18, r20
    108a:	34 07       	cpc	r19, r20
    108c:	21 f4       	brne	.+8      	; 0x1096 <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    108e:	fc 01       	movw	r30, r24
    1090:	a1 85       	ldd	r26, Z+9	; 0x09
    1092:	b2 85       	ldd	r27, Z+10	; 0x0a
    1094:	11 c0       	rjmp	.+34     	; 0x10b8 <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1096:	dc 01       	movw	r26, r24
    1098:	13 96       	adiw	r26, 0x03	; 3
    109a:	01 c0       	rjmp	.+2      	; 0x109e <vListInsert+0x2e>
    109c:	df 01       	movw	r26, r30
    109e:	14 96       	adiw	r26, 0x04	; 4
    10a0:	ed 91       	ld	r30, X+
    10a2:	fc 91       	ld	r31, X
    10a4:	15 97       	sbiw	r26, 0x05	; 5
    10a6:	40 81       	ld	r20, Z
    10a8:	51 81       	ldd	r21, Z+1	; 0x01
    10aa:	62 81       	ldd	r22, Z+2	; 0x02
    10ac:	73 81       	ldd	r23, Z+3	; 0x03
    10ae:	04 17       	cp	r16, r20
    10b0:	15 07       	cpc	r17, r21
    10b2:	26 07       	cpc	r18, r22
    10b4:	37 07       	cpc	r19, r23
    10b6:	90 f7       	brcc	.-28     	; 0x109c <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    10b8:	14 96       	adiw	r26, 0x04	; 4
    10ba:	ed 91       	ld	r30, X+
    10bc:	fc 91       	ld	r31, X
    10be:	15 97       	sbiw	r26, 0x05	; 5
    10c0:	fd 83       	std	Y+5, r31	; 0x05
    10c2:	ec 83       	std	Y+4, r30	; 0x04
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    10c4:	d7 83       	std	Z+7, r29	; 0x07
    10c6:	c6 83       	std	Z+6, r28	; 0x06
	pxNewListItem->pxPrevious = pxIterator;
    10c8:	bf 83       	std	Y+7, r27	; 0x07
    10ca:	ae 83       	std	Y+6, r26	; 0x06
	pxIterator->pxNext = pxNewListItem;
    10cc:	15 96       	adiw	r26, 0x05	; 5
    10ce:	dc 93       	st	X, r29
    10d0:	ce 93       	st	-X, r28
    10d2:	14 97       	sbiw	r26, 0x04	; 4

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    10d4:	9b 87       	std	Y+11, r25	; 0x0b
    10d6:	8a 87       	std	Y+10, r24	; 0x0a

	( pxList->uxNumberOfItems )++;
    10d8:	fc 01       	movw	r30, r24
    10da:	20 81       	ld	r18, Z
    10dc:	2f 5f       	subi	r18, 0xFF	; 255
    10de:	20 83       	st	Z, r18
}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	08 95       	ret

000010ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    10f0:	a2 85       	ldd	r26, Z+10	; 0x0a
    10f2:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    10f4:	c4 81       	ldd	r28, Z+4	; 0x04
    10f6:	d5 81       	ldd	r29, Z+5	; 0x05
    10f8:	86 81       	ldd	r24, Z+6	; 0x06
    10fa:	97 81       	ldd	r25, Z+7	; 0x07
    10fc:	9f 83       	std	Y+7, r25	; 0x07
    10fe:	8e 83       	std	Y+6, r24	; 0x06
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1100:	c6 81       	ldd	r28, Z+6	; 0x06
    1102:	d7 81       	ldd	r29, Z+7	; 0x07
    1104:	84 81       	ldd	r24, Z+4	; 0x04
    1106:	95 81       	ldd	r25, Z+5	; 0x05
    1108:	9d 83       	std	Y+5, r25	; 0x05
    110a:	8c 83       	std	Y+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    110c:	11 96       	adiw	r26, 0x01	; 1
    110e:	8d 91       	ld	r24, X+
    1110:	9c 91       	ld	r25, X
    1112:	12 97       	sbiw	r26, 0x02	; 2
    1114:	e8 17       	cp	r30, r24
    1116:	f9 07       	cpc	r31, r25
    1118:	31 f4       	brne	.+12     	; 0x1126 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    111a:	86 81       	ldd	r24, Z+6	; 0x06
    111c:	97 81       	ldd	r25, Z+7	; 0x07
    111e:	12 96       	adiw	r26, 0x02	; 2
    1120:	9c 93       	st	X, r25
    1122:	8e 93       	st	-X, r24
    1124:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1126:	13 86       	std	Z+11, r1	; 0x0b
    1128:	12 86       	std	Z+10, r1	; 0x0a
	( pxList->uxNumberOfItems )--;
    112a:	8c 91       	ld	r24, X
    112c:	81 50       	subi	r24, 0x01	; 1
    112e:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
    1130:	8c 91       	ld	r24, X
}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	0f 92       	push	r0
    113e:	fc 01       	movw	r30, r24
    1140:	96 8d       	ldd	r25, Z+30	; 0x1e
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	91 11       	cpse	r25, r1
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	08 95       	ret

0000114e <prvCopyDataToQueue>:
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	ec 01       	movw	r28, r24
    1158:	04 2f       	mov	r16, r20
    115a:	1e 8d       	ldd	r17, Y+30	; 0x1e
    115c:	48 a1       	ldd	r20, Y+32	; 0x20
    115e:	41 11       	cpse	r20, r1
    1160:	0c c0       	rjmp	.+24     	; 0x117a <prvCopyDataToQueue+0x2c>
    1162:	88 81       	ld	r24, Y
    1164:	99 81       	ldd	r25, Y+1	; 0x01
    1166:	89 2b       	or	r24, r25
    1168:	09 f0       	breq	.+2      	; 0x116c <prvCopyDataToQueue+0x1e>
    116a:	42 c0       	rjmp	.+132    	; 0x11f0 <prvCopyDataToQueue+0xa2>
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	9b 81       	ldd	r25, Y+3	; 0x03
    1170:	0e 94 2a 1a 	call	0x3454	; 0x3454 <xTaskPriorityDisinherit>
    1174:	1b 82       	std	Y+3, r1	; 0x03
    1176:	1a 82       	std	Y+2, r1	; 0x02
    1178:	42 c0       	rjmp	.+132    	; 0x11fe <prvCopyDataToQueue+0xb0>
    117a:	01 11       	cpse	r16, r1
    117c:	17 c0       	rjmp	.+46     	; 0x11ac <prvCopyDataToQueue+0x5e>
    117e:	50 e0       	ldi	r21, 0x00	; 0
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	9d 81       	ldd	r25, Y+5	; 0x05
    1184:	0e 94 8d 5c 	call	0xb91a	; 0xb91a <memcpy>
    1188:	28 a1       	ldd	r18, Y+32	; 0x20
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	9d 81       	ldd	r25, Y+5	; 0x05
    118e:	82 0f       	add	r24, r18
    1190:	91 1d       	adc	r25, r1
    1192:	9d 83       	std	Y+5, r25	; 0x05
    1194:	8c 83       	std	Y+4, r24	; 0x04
    1196:	2a 81       	ldd	r18, Y+2	; 0x02
    1198:	3b 81       	ldd	r19, Y+3	; 0x03
    119a:	82 17       	cp	r24, r18
    119c:	93 07       	cpc	r25, r19
    119e:	50 f1       	brcs	.+84     	; 0x11f4 <prvCopyDataToQueue+0xa6>
    11a0:	88 81       	ld	r24, Y
    11a2:	99 81       	ldd	r25, Y+1	; 0x01
    11a4:	9d 83       	std	Y+5, r25	; 0x05
    11a6:	8c 83       	std	Y+4, r24	; 0x04
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	29 c0       	rjmp	.+82     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11ac:	50 e0       	ldi	r21, 0x00	; 0
    11ae:	8e 81       	ldd	r24, Y+6	; 0x06
    11b0:	9f 81       	ldd	r25, Y+7	; 0x07
    11b2:	0e 94 8d 5c 	call	0xb91a	; 0xb91a <memcpy>
    11b6:	88 a1       	ldd	r24, Y+32	; 0x20
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	91 95       	neg	r25
    11bc:	81 95       	neg	r24
    11be:	91 09       	sbc	r25, r1
    11c0:	2e 81       	ldd	r18, Y+6	; 0x06
    11c2:	3f 81       	ldd	r19, Y+7	; 0x07
    11c4:	28 0f       	add	r18, r24
    11c6:	39 1f       	adc	r19, r25
    11c8:	3f 83       	std	Y+7, r19	; 0x07
    11ca:	2e 83       	std	Y+6, r18	; 0x06
    11cc:	48 81       	ld	r20, Y
    11ce:	59 81       	ldd	r21, Y+1	; 0x01
    11d0:	24 17       	cp	r18, r20
    11d2:	35 07       	cpc	r19, r21
    11d4:	30 f4       	brcc	.+12     	; 0x11e2 <prvCopyDataToQueue+0x94>
    11d6:	2a 81       	ldd	r18, Y+2	; 0x02
    11d8:	3b 81       	ldd	r19, Y+3	; 0x03
    11da:	82 0f       	add	r24, r18
    11dc:	93 1f       	adc	r25, r19
    11de:	9f 83       	std	Y+7, r25	; 0x07
    11e0:	8e 83       	std	Y+6, r24	; 0x06
    11e2:	02 30       	cpi	r16, 0x02	; 2
    11e4:	49 f4       	brne	.+18     	; 0x11f8 <prvCopyDataToQueue+0xaa>
    11e6:	11 23       	and	r17, r17
    11e8:	49 f0       	breq	.+18     	; 0x11fc <prvCopyDataToQueue+0xae>
    11ea:	11 50       	subi	r17, 0x01	; 1
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	07 c0       	rjmp	.+14     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	05 c0       	rjmp	.+10     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <prvCopyDataToQueue+0xb0>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	1f 5f       	subi	r17, 0xFF	; 255
    1200:	1e 8f       	std	Y+30, r17	; 0x1e
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	08 95       	ret

0000120c <prvCopyDataFromQueue>:
    120c:	fc 01       	movw	r30, r24
    120e:	40 a1       	ldd	r20, Z+32	; 0x20
    1210:	44 23       	and	r20, r20
    1212:	a9 f0       	breq	.+42     	; 0x123e <prvCopyDataFromQueue+0x32>
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	26 81       	ldd	r18, Z+6	; 0x06
    1218:	37 81       	ldd	r19, Z+7	; 0x07
    121a:	24 0f       	add	r18, r20
    121c:	35 1f       	adc	r19, r21
    121e:	37 83       	std	Z+7, r19	; 0x07
    1220:	26 83       	std	Z+6, r18	; 0x06
    1222:	82 81       	ldd	r24, Z+2	; 0x02
    1224:	93 81       	ldd	r25, Z+3	; 0x03
    1226:	28 17       	cp	r18, r24
    1228:	39 07       	cpc	r19, r25
    122a:	20 f0       	brcs	.+8      	; 0x1234 <prvCopyDataFromQueue+0x28>
    122c:	80 81       	ld	r24, Z
    122e:	91 81       	ldd	r25, Z+1	; 0x01
    1230:	97 83       	std	Z+7, r25	; 0x07
    1232:	86 83       	std	Z+6, r24	; 0x06
    1234:	cb 01       	movw	r24, r22
    1236:	66 81       	ldd	r22, Z+6	; 0x06
    1238:	77 81       	ldd	r23, Z+7	; 0x07
    123a:	0c 94 8d 5c 	jmp	0xb91a	; 0xb91a <memcpy>
    123e:	08 95       	ret

00001240 <prvUnlockQueue>:
    1240:	ef 92       	push	r14
    1242:	ff 92       	push	r15
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	8c 01       	movw	r16, r24
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	0f 92       	push	r0
    1252:	fc 01       	movw	r30, r24
    1254:	c2 a1       	ldd	r28, Z+34	; 0x22
    1256:	1c 16       	cp	r1, r28
    1258:	ac f4       	brge	.+42     	; 0x1284 <prvUnlockQueue+0x44>
    125a:	83 89       	ldd	r24, Z+19	; 0x13
    125c:	81 11       	cpse	r24, r1
    125e:	06 c0       	rjmp	.+12     	; 0x126c <prvUnlockQueue+0x2c>
    1260:	11 c0       	rjmp	.+34     	; 0x1284 <prvUnlockQueue+0x44>
    1262:	f8 01       	movw	r30, r16
    1264:	83 89       	ldd	r24, Z+19	; 0x13
    1266:	81 11       	cpse	r24, r1
    1268:	05 c0       	rjmp	.+10     	; 0x1274 <prvUnlockQueue+0x34>
    126a:	0c c0       	rjmp	.+24     	; 0x1284 <prvUnlockQueue+0x44>
    126c:	78 01       	movw	r14, r16
    126e:	f3 e1       	ldi	r31, 0x13	; 19
    1270:	ef 0e       	add	r14, r31
    1272:	f1 1c       	adc	r15, r1
    1274:	c7 01       	movw	r24, r14
    1276:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    127a:	81 11       	cpse	r24, r1
    127c:	0e 94 aa 19 	call	0x3354	; 0x3354 <vTaskMissedYield>
    1280:	c1 50       	subi	r28, 0x01	; 1
    1282:	79 f7       	brne	.-34     	; 0x1262 <prvUnlockQueue+0x22>
    1284:	8f ef       	ldi	r24, 0xFF	; 255
    1286:	f8 01       	movw	r30, r16
    1288:	82 a3       	std	Z+34, r24	; 0x22
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	0f 92       	push	r0
    1294:	c1 a1       	ldd	r28, Z+33	; 0x21
    1296:	1c 16       	cp	r1, r28
    1298:	ac f4       	brge	.+42     	; 0x12c4 <prvUnlockQueue+0x84>
    129a:	80 85       	ldd	r24, Z+8	; 0x08
    129c:	81 11       	cpse	r24, r1
    129e:	06 c0       	rjmp	.+12     	; 0x12ac <prvUnlockQueue+0x6c>
    12a0:	11 c0       	rjmp	.+34     	; 0x12c4 <prvUnlockQueue+0x84>
    12a2:	f8 01       	movw	r30, r16
    12a4:	80 85       	ldd	r24, Z+8	; 0x08
    12a6:	81 11       	cpse	r24, r1
    12a8:	05 c0       	rjmp	.+10     	; 0x12b4 <prvUnlockQueue+0x74>
    12aa:	0c c0       	rjmp	.+24     	; 0x12c4 <prvUnlockQueue+0x84>
    12ac:	78 01       	movw	r14, r16
    12ae:	f8 e0       	ldi	r31, 0x08	; 8
    12b0:	ef 0e       	add	r14, r31
    12b2:	f1 1c       	adc	r15, r1
    12b4:	c7 01       	movw	r24, r14
    12b6:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    12ba:	81 11       	cpse	r24, r1
    12bc:	0e 94 aa 19 	call	0x3354	; 0x3354 <vTaskMissedYield>
    12c0:	c1 50       	subi	r28, 0x01	; 1
    12c2:	79 f7       	brne	.-34     	; 0x12a2 <prvUnlockQueue+0x62>
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	f8 01       	movw	r30, r16
    12c8:	81 a3       	std	Z+33, r24	; 0x21
    12ca:	0f 90       	pop	r0
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	ff 90       	pop	r15
    12d6:	ef 90       	pop	r14
    12d8:	08 95       	ret

000012da <xQueueGenericReset>:
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	ec 01       	movw	r28, r24
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	0f 92       	push	r0
    12e6:	48 81       	ld	r20, Y
    12e8:	59 81       	ldd	r21, Y+1	; 0x01
    12ea:	28 a1       	ldd	r18, Y+32	; 0x20
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	7f 8d       	ldd	r23, Y+31	; 0x1f
    12f0:	72 9f       	mul	r23, r18
    12f2:	c0 01       	movw	r24, r0
    12f4:	73 9f       	mul	r23, r19
    12f6:	90 0d       	add	r25, r0
    12f8:	11 24       	eor	r1, r1
    12fa:	fa 01       	movw	r30, r20
    12fc:	e8 0f       	add	r30, r24
    12fe:	f9 1f       	adc	r31, r25
    1300:	fb 83       	std	Y+3, r31	; 0x03
    1302:	ea 83       	std	Y+2, r30	; 0x02
    1304:	1e 8e       	std	Y+30, r1	; 0x1e
    1306:	5d 83       	std	Y+5, r21	; 0x05
    1308:	4c 83       	std	Y+4, r20	; 0x04
    130a:	82 1b       	sub	r24, r18
    130c:	93 0b       	sbc	r25, r19
    130e:	84 0f       	add	r24, r20
    1310:	95 1f       	adc	r25, r21
    1312:	9f 83       	std	Y+7, r25	; 0x07
    1314:	8e 83       	std	Y+6, r24	; 0x06
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	89 a3       	std	Y+33, r24	; 0x21
    131a:	8a a3       	std	Y+34, r24	; 0x22
    131c:	61 11       	cpse	r22, r1
    131e:	0b c0       	rjmp	.+22     	; 0x1336 <xQueueGenericReset+0x5c>
    1320:	88 85       	ldd	r24, Y+8	; 0x08
    1322:	88 23       	and	r24, r24
    1324:	71 f0       	breq	.+28     	; 0x1342 <xQueueGenericReset+0x68>
    1326:	ce 01       	movw	r24, r28
    1328:	08 96       	adiw	r24, 0x08	; 8
    132a:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    132e:	88 23       	and	r24, r24
    1330:	41 f0       	breq	.+16     	; 0x1342 <xQueueGenericReset+0x68>
    1332:	0e dd       	rcall	.-1508   	; 0xd50 <vPortYield>
    1334:	06 c0       	rjmp	.+12     	; 0x1342 <xQueueGenericReset+0x68>
    1336:	ce 01       	movw	r24, r28
    1338:	08 96       	adiw	r24, 0x08	; 8
    133a:	64 de       	rcall	.-824    	; 0x1004 <vListInitialise>
    133c:	ce 01       	movw	r24, r28
    133e:	43 96       	adiw	r24, 0x13	; 19
    1340:	61 de       	rcall	.-830    	; 0x1004 <vListInitialise>
    1342:	0f 90       	pop	r0
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	08 95       	ret

0000134e <xQueueGenericCreate>:
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	08 2f       	mov	r16, r24
    1358:	16 2f       	mov	r17, r22
    135a:	66 23       	and	r22, r22
    135c:	b1 f0       	breq	.+44     	; 0x138a <xQueueGenericCreate+0x3c>
    135e:	86 9f       	mul	r24, r22
    1360:	c0 01       	movw	r24, r0
    1362:	11 24       	eor	r1, r1
    1364:	83 96       	adiw	r24, 0x23	; 35
    1366:	0f dc       	rcall	.-2018   	; 0xb86 <pvPortMalloc>
    1368:	ec 01       	movw	r28, r24
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	39 f4       	brne	.+14     	; 0x137c <xQueueGenericCreate+0x2e>
    136e:	13 c0       	rjmp	.+38     	; 0x1396 <xQueueGenericCreate+0x48>
    1370:	0f 8f       	std	Y+31, r16	; 0x1f
    1372:	18 a3       	std	Y+32, r17	; 0x20
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	ce 01       	movw	r24, r28
    1378:	b0 df       	rcall	.-160    	; 0x12da <xQueueGenericReset>
    137a:	0d c0       	rjmp	.+26     	; 0x1396 <xQueueGenericCreate+0x48>
    137c:	83 96       	adiw	r24, 0x23	; 35
    137e:	99 83       	std	Y+1, r25	; 0x01
    1380:	88 83       	st	Y, r24
    1382:	f6 cf       	rjmp	.-20     	; 0x1370 <xQueueGenericCreate+0x22>
    1384:	d9 83       	std	Y+1, r29	; 0x01
    1386:	c8 83       	st	Y, r28
    1388:	f3 cf       	rjmp	.-26     	; 0x1370 <xQueueGenericCreate+0x22>
    138a:	83 e2       	ldi	r24, 0x23	; 35
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	fb db       	rcall	.-2058   	; 0xb86 <pvPortMalloc>
    1390:	ec 01       	movw	r28, r24
    1392:	89 2b       	or	r24, r25
    1394:	b9 f7       	brne	.-18     	; 0x1384 <xQueueGenericCreate+0x36>
    1396:	ce 01       	movw	r24, r28
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	08 95       	ret

000013a2 <xQueueGenericSend>:
    13a2:	9f 92       	push	r9
    13a4:	af 92       	push	r10
    13a6:	bf 92       	push	r11
    13a8:	cf 92       	push	r12
    13aa:	df 92       	push	r13
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	29 97       	sbiw	r28, 0x09	; 9
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	7c 01       	movw	r14, r24
    13ca:	5b 01       	movw	r10, r22
    13cc:	2e 83       	std	Y+6, r18	; 0x06
    13ce:	3f 83       	std	Y+7, r19	; 0x07
    13d0:	48 87       	std	Y+8, r20	; 0x08
    13d2:	59 87       	std	Y+9, r21	; 0x09
    13d4:	10 e0       	ldi	r17, 0x00	; 0
    13d6:	99 24       	eor	r9, r9
    13d8:	93 94       	inc	r9
    13da:	6c 01       	movw	r12, r24
    13dc:	88 e0       	ldi	r24, 0x08	; 8
    13de:	c8 0e       	add	r12, r24
    13e0:	d1 1c       	adc	r13, r1
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	0f 92       	push	r0
    13e8:	f7 01       	movw	r30, r14
    13ea:	96 8d       	ldd	r25, Z+30	; 0x1e
    13ec:	87 8d       	ldd	r24, Z+31	; 0x1f
    13ee:	98 17       	cp	r25, r24
    13f0:	10 f0       	brcs	.+4      	; 0x13f6 <xQueueGenericSend+0x54>
    13f2:	02 30       	cpi	r16, 0x02	; 2
    13f4:	b1 f4       	brne	.+44     	; 0x1422 <xQueueGenericSend+0x80>
    13f6:	40 2f       	mov	r20, r16
    13f8:	b5 01       	movw	r22, r10
    13fa:	c7 01       	movw	r24, r14
    13fc:	a8 de       	rcall	.-688    	; 0x114e <prvCopyDataToQueue>
    13fe:	f7 01       	movw	r30, r14
    1400:	93 89       	ldd	r25, Z+19	; 0x13
    1402:	99 23       	and	r25, r25
    1404:	41 f0       	breq	.+16     	; 0x1416 <xQueueGenericSend+0x74>
    1406:	c7 01       	movw	r24, r14
    1408:	43 96       	adiw	r24, 0x13	; 19
    140a:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    140e:	88 23       	and	r24, r24
    1410:	21 f0       	breq	.+8      	; 0x141a <xQueueGenericSend+0x78>
    1412:	9e dc       	rcall	.-1732   	; 0xd50 <vPortYield>
    1414:	02 c0       	rjmp	.+4      	; 0x141a <xQueueGenericSend+0x78>
    1416:	81 11       	cpse	r24, r1
    1418:	9b dc       	rcall	.-1738   	; 0xd50 <vPortYield>
    141a:	0f 90       	pop	r0
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	52 c0       	rjmp	.+164    	; 0x14c6 <xQueueGenericSend+0x124>
    1422:	8e 81       	ldd	r24, Y+6	; 0x06
    1424:	9f 81       	ldd	r25, Y+7	; 0x07
    1426:	a8 85       	ldd	r26, Y+8	; 0x08
    1428:	b9 85       	ldd	r27, Y+9	; 0x09
    142a:	89 2b       	or	r24, r25
    142c:	8a 2b       	or	r24, r26
    142e:	8b 2b       	or	r24, r27
    1430:	21 f4       	brne	.+8      	; 0x143a <xQueueGenericSend+0x98>
    1432:	0f 90       	pop	r0
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	46 c0       	rjmp	.+140    	; 0x14c6 <xQueueGenericSend+0x124>
    143a:	11 11       	cpse	r17, r1
    143c:	05 c0       	rjmp	.+10     	; 0x1448 <xQueueGenericSend+0xa6>
    143e:	ce 01       	movw	r24, r28
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    1446:	19 2d       	mov	r17, r9
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	0f 92       	push	r0
    1456:	f7 01       	movw	r30, r14
    1458:	81 a1       	ldd	r24, Z+33	; 0x21
    145a:	8f 3f       	cpi	r24, 0xFF	; 255
    145c:	09 f4       	brne	.+2      	; 0x1460 <xQueueGenericSend+0xbe>
    145e:	11 a2       	std	Z+33, r1	; 0x21
    1460:	f7 01       	movw	r30, r14
    1462:	82 a1       	ldd	r24, Z+34	; 0x22
    1464:	8f 3f       	cpi	r24, 0xFF	; 255
    1466:	09 f4       	brne	.+2      	; 0x146a <xQueueGenericSend+0xc8>
    1468:	12 a2       	std	Z+34, r1	; 0x22
    146a:	0f 90       	pop	r0
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	be 01       	movw	r22, r28
    1470:	6a 5f       	subi	r22, 0xFA	; 250
    1472:	7f 4f       	sbci	r23, 0xFF	; 255
    1474:	ce 01       	movw	r24, r28
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    147c:	81 11       	cpse	r24, r1
    147e:	1e c0       	rjmp	.+60     	; 0x14bc <xQueueGenericSend+0x11a>
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	0f 92       	push	r0
    1486:	f7 01       	movw	r30, r14
    1488:	96 8d       	ldd	r25, Z+30	; 0x1e
    148a:	87 8d       	ldd	r24, Z+31	; 0x1f
    148c:	0f 90       	pop	r0
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	98 13       	cpse	r25, r24
    1492:	0f c0       	rjmp	.+30     	; 0x14b2 <xQueueGenericSend+0x110>
    1494:	4e 81       	ldd	r20, Y+6	; 0x06
    1496:	5f 81       	ldd	r21, Y+7	; 0x07
    1498:	68 85       	ldd	r22, Y+8	; 0x08
    149a:	79 85       	ldd	r23, Y+9	; 0x09
    149c:	c6 01       	movw	r24, r12
    149e:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    14a2:	c7 01       	movw	r24, r14
    14a4:	cd de       	rcall	.-614    	; 0x1240 <prvUnlockQueue>
    14a6:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14aa:	81 11       	cpse	r24, r1
    14ac:	9a cf       	rjmp	.-204    	; 0x13e2 <xQueueGenericSend+0x40>
    14ae:	50 dc       	rcall	.-1888   	; 0xd50 <vPortYield>
    14b0:	98 cf       	rjmp	.-208    	; 0x13e2 <xQueueGenericSend+0x40>
    14b2:	c7 01       	movw	r24, r14
    14b4:	c5 de       	rcall	.-630    	; 0x1240 <prvUnlockQueue>
    14b6:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14ba:	93 cf       	rjmp	.-218    	; 0x13e2 <xQueueGenericSend+0x40>
    14bc:	c7 01       	movw	r24, r14
    14be:	c0 de       	rcall	.-640    	; 0x1240 <prvUnlockQueue>
    14c0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	29 96       	adiw	r28, 0x09	; 9
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	ff 90       	pop	r15
    14dc:	ef 90       	pop	r14
    14de:	df 90       	pop	r13
    14e0:	cf 90       	pop	r12
    14e2:	bf 90       	pop	r11
    14e4:	af 90       	pop	r10
    14e6:	9f 90       	pop	r9
    14e8:	08 95       	ret

000014ea <xQueueCreateMutex>:
    14ea:	0f 93       	push	r16
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	48 2f       	mov	r20, r24
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	2b df       	rcall	.-426    	; 0x134e <xQueueGenericCreate>
    14f8:	ec 01       	movw	r28, r24
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	61 f0       	breq	.+24     	; 0x1516 <xQueueCreateMutex+0x2c>
    14fe:	1b 82       	std	Y+3, r1	; 0x03
    1500:	1a 82       	std	Y+2, r1	; 0x02
    1502:	19 82       	std	Y+1, r1	; 0x01
    1504:	18 82       	st	Y, r1
    1506:	1e 82       	std	Y+6, r1	; 0x06
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	a9 01       	movw	r20, r18
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	46 df       	rcall	.-372    	; 0x13a2 <xQueueGenericSend>
    1516:	ce 01       	movw	r24, r28
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	0f 91       	pop	r16
    151e:	08 95       	ret

00001520 <xQueueGenericSendFromISR>:
    1520:	ef 92       	push	r14
    1522:	ff 92       	push	r15
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	8a 01       	movw	r16, r20
    152e:	fc 01       	movw	r30, r24
    1530:	56 8d       	ldd	r21, Z+30	; 0x1e
    1532:	37 8d       	ldd	r19, Z+31	; 0x1f
    1534:	53 17       	cp	r21, r19
    1536:	10 f0       	brcs	.+4      	; 0x153c <xQueueGenericSendFromISR+0x1c>
    1538:	22 30       	cpi	r18, 0x02	; 2
    153a:	e9 f4       	brne	.+58     	; 0x1576 <xQueueGenericSendFromISR+0x56>
    153c:	42 2f       	mov	r20, r18
    153e:	78 01       	movw	r14, r16
    1540:	ec 01       	movw	r28, r24
    1542:	1a a1       	ldd	r17, Y+34	; 0x22
    1544:	04 de       	rcall	.-1016   	; 0x114e <prvCopyDataToQueue>
    1546:	1f 3f       	cpi	r17, 0xFF	; 255
    1548:	81 f4       	brne	.+32     	; 0x156a <xQueueGenericSendFromISR+0x4a>
    154a:	8b 89       	ldd	r24, Y+19	; 0x13
    154c:	88 23       	and	r24, r24
    154e:	a9 f0       	breq	.+42     	; 0x157a <xQueueGenericSendFromISR+0x5a>
    1550:	ce 01       	movw	r24, r28
    1552:	43 96       	adiw	r24, 0x13	; 19
    1554:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    1558:	88 23       	and	r24, r24
    155a:	89 f0       	breq	.+34     	; 0x157e <xQueueGenericSendFromISR+0x5e>
    155c:	e1 14       	cp	r14, r1
    155e:	f1 04       	cpc	r15, r1
    1560:	81 f0       	breq	.+32     	; 0x1582 <xQueueGenericSendFromISR+0x62>
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	f7 01       	movw	r30, r14
    1566:	80 83       	st	Z, r24
    1568:	0d c0       	rjmp	.+26     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    156a:	ff 24       	eor	r15, r15
    156c:	f3 94       	inc	r15
    156e:	f1 0e       	add	r15, r17
    1570:	fa a2       	std	Y+34, r15	; 0x22
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	07 c0       	rjmp	.+14     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	05 c0       	rjmp	.+10     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <xQueueGenericSendFromISR+0x64>
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	01 c0       	rjmp	.+2      	; 0x1584 <xQueueGenericSendFromISR+0x64>
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	ff 90       	pop	r15
    158e:	ef 90       	pop	r14
    1590:	08 95       	ret

00001592 <xQueueGiveFromISR>:
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	fc 01       	movw	r30, r24
    1598:	86 8d       	ldd	r24, Z+30	; 0x1e
    159a:	97 8d       	ldd	r25, Z+31	; 0x1f
    159c:	89 17       	cp	r24, r25
    159e:	c0 f4       	brcc	.+48     	; 0x15d0 <xQueueGiveFromISR+0x3e>
    15a0:	92 a1       	ldd	r25, Z+34	; 0x22
    15a2:	8f 5f       	subi	r24, 0xFF	; 255
    15a4:	86 8f       	std	Z+30, r24	; 0x1e
    15a6:	9f 3f       	cpi	r25, 0xFF	; 255
    15a8:	79 f4       	brne	.+30     	; 0x15c8 <xQueueGiveFromISR+0x36>
    15aa:	83 89       	ldd	r24, Z+19	; 0x13
    15ac:	88 23       	and	r24, r24
    15ae:	91 f0       	breq	.+36     	; 0x15d4 <xQueueGiveFromISR+0x42>
    15b0:	eb 01       	movw	r28, r22
    15b2:	cf 01       	movw	r24, r30
    15b4:	43 96       	adiw	r24, 0x13	; 19
    15b6:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    15ba:	88 23       	and	r24, r24
    15bc:	69 f0       	breq	.+26     	; 0x15d8 <xQueueGiveFromISR+0x46>
    15be:	20 97       	sbiw	r28, 0x00	; 0
    15c0:	69 f0       	breq	.+26     	; 0x15dc <xQueueGiveFromISR+0x4a>
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	88 83       	st	Y, r24
    15c6:	0b c0       	rjmp	.+22     	; 0x15de <xQueueGiveFromISR+0x4c>
    15c8:	9f 5f       	subi	r25, 0xFF	; 255
    15ca:	92 a3       	std	Z+34, r25	; 0x22
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	07 c0       	rjmp	.+14     	; 0x15de <xQueueGiveFromISR+0x4c>
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	05 c0       	rjmp	.+10     	; 0x15de <xQueueGiveFromISR+0x4c>
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	03 c0       	rjmp	.+6      	; 0x15de <xQueueGiveFromISR+0x4c>
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	01 c0       	rjmp	.+2      	; 0x15de <xQueueGiveFromISR+0x4c>
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	08 95       	ret

000015e4 <xQueueReceive>:
    15e4:	9f 92       	push	r9
    15e6:	af 92       	push	r10
    15e8:	bf 92       	push	r11
    15ea:	cf 92       	push	r12
    15ec:	df 92       	push	r13
    15ee:	ef 92       	push	r14
    15f0:	ff 92       	push	r15
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	29 97       	sbiw	r28, 0x09	; 9
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	8c 01       	movw	r16, r24
    160c:	5b 01       	movw	r10, r22
    160e:	2e 83       	std	Y+6, r18	; 0x06
    1610:	3f 83       	std	Y+7, r19	; 0x07
    1612:	48 87       	std	Y+8, r20	; 0x08
    1614:	59 87       	std	Y+9, r21	; 0x09
    1616:	e1 2c       	mov	r14, r1
    1618:	99 24       	eor	r9, r9
    161a:	93 94       	inc	r9
    161c:	6c 01       	movw	r12, r24
    161e:	83 e1       	ldi	r24, 0x13	; 19
    1620:	c8 0e       	add	r12, r24
    1622:	d1 1c       	adc	r13, r1
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	0f 92       	push	r0
    162a:	f8 01       	movw	r30, r16
    162c:	f6 8c       	ldd	r15, Z+30	; 0x1e
    162e:	ff 20       	and	r15, r15
    1630:	99 f0       	breq	.+38     	; 0x1658 <xQueueReceive+0x74>
    1632:	b5 01       	movw	r22, r10
    1634:	c8 01       	movw	r24, r16
    1636:	ea dd       	rcall	.-1068   	; 0x120c <prvCopyDataFromQueue>
    1638:	fa 94       	dec	r15
    163a:	f8 01       	movw	r30, r16
    163c:	f6 8e       	std	Z+30, r15	; 0x1e
    163e:	80 85       	ldd	r24, Z+8	; 0x08
    1640:	88 23       	and	r24, r24
    1642:	31 f0       	breq	.+12     	; 0x1650 <xQueueReceive+0x6c>
    1644:	c8 01       	movw	r24, r16
    1646:	08 96       	adiw	r24, 0x08	; 8
    1648:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    164c:	81 11       	cpse	r24, r1
    164e:	80 db       	rcall	.-2304   	; 0xd50 <vPortYield>
    1650:	0f 90       	pop	r0
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	51 c0       	rjmp	.+162    	; 0x16fa <xQueueReceive+0x116>
    1658:	8e 81       	ldd	r24, Y+6	; 0x06
    165a:	9f 81       	ldd	r25, Y+7	; 0x07
    165c:	a8 85       	ldd	r26, Y+8	; 0x08
    165e:	b9 85       	ldd	r27, Y+9	; 0x09
    1660:	89 2b       	or	r24, r25
    1662:	8a 2b       	or	r24, r26
    1664:	8b 2b       	or	r24, r27
    1666:	21 f4       	brne	.+8      	; 0x1670 <xQueueReceive+0x8c>
    1668:	0f 90       	pop	r0
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	45 c0       	rjmp	.+138    	; 0x16fa <xQueueReceive+0x116>
    1670:	e1 10       	cpse	r14, r1
    1672:	05 c0       	rjmp	.+10     	; 0x167e <xQueueReceive+0x9a>
    1674:	ce 01       	movw	r24, r28
    1676:	01 96       	adiw	r24, 0x01	; 1
    1678:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    167c:	e9 2c       	mov	r14, r9
    167e:	0f 90       	pop	r0
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	0f 92       	push	r0
    168c:	f8 01       	movw	r30, r16
    168e:	81 a1       	ldd	r24, Z+33	; 0x21
    1690:	8f 3f       	cpi	r24, 0xFF	; 255
    1692:	09 f4       	brne	.+2      	; 0x1696 <xQueueReceive+0xb2>
    1694:	11 a2       	std	Z+33, r1	; 0x21
    1696:	f8 01       	movw	r30, r16
    1698:	82 a1       	ldd	r24, Z+34	; 0x22
    169a:	8f 3f       	cpi	r24, 0xFF	; 255
    169c:	09 f4       	brne	.+2      	; 0x16a0 <xQueueReceive+0xbc>
    169e:	12 a2       	std	Z+34, r1	; 0x22
    16a0:	0f 90       	pop	r0
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	be 01       	movw	r22, r28
    16a6:	6a 5f       	subi	r22, 0xFA	; 250
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	ce 01       	movw	r24, r28
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    16b2:	81 11       	cpse	r24, r1
    16b4:	18 c0       	rjmp	.+48     	; 0x16e6 <xQueueReceive+0x102>
    16b6:	c8 01       	movw	r24, r16
    16b8:	3f dd       	rcall	.-1410   	; 0x1138 <prvIsQueueEmpty>
    16ba:	88 23       	and	r24, r24
    16bc:	79 f0       	breq	.+30     	; 0x16dc <xQueueReceive+0xf8>
    16be:	4e 81       	ldd	r20, Y+6	; 0x06
    16c0:	5f 81       	ldd	r21, Y+7	; 0x07
    16c2:	68 85       	ldd	r22, Y+8	; 0x08
    16c4:	79 85       	ldd	r23, Y+9	; 0x09
    16c6:	c6 01       	movw	r24, r12
    16c8:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    16cc:	c8 01       	movw	r24, r16
    16ce:	b8 dd       	rcall	.-1168   	; 0x1240 <prvUnlockQueue>
    16d0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16d4:	81 11       	cpse	r24, r1
    16d6:	a6 cf       	rjmp	.-180    	; 0x1624 <xQueueReceive+0x40>
    16d8:	3b db       	rcall	.-2442   	; 0xd50 <vPortYield>
    16da:	a4 cf       	rjmp	.-184    	; 0x1624 <xQueueReceive+0x40>
    16dc:	c8 01       	movw	r24, r16
    16de:	b0 dd       	rcall	.-1184   	; 0x1240 <prvUnlockQueue>
    16e0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16e4:	9f cf       	rjmp	.-194    	; 0x1624 <xQueueReceive+0x40>
    16e6:	c8 01       	movw	r24, r16
    16e8:	ab dd       	rcall	.-1194   	; 0x1240 <prvUnlockQueue>
    16ea:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16ee:	c8 01       	movw	r24, r16
    16f0:	23 dd       	rcall	.-1466   	; 0x1138 <prvIsQueueEmpty>
    16f2:	88 23       	and	r24, r24
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <xQueueReceive+0x114>
    16f6:	96 cf       	rjmp	.-212    	; 0x1624 <xQueueReceive+0x40>
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	29 96       	adiw	r28, 0x09	; 9
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	bf 90       	pop	r11
    1718:	af 90       	pop	r10
    171a:	9f 90       	pop	r9
    171c:	08 95       	ret

0000171e <xQueueSemaphoreTake>:
    171e:	bf 92       	push	r11
    1720:	cf 92       	push	r12
    1722:	df 92       	push	r13
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	29 97       	sbiw	r28, 0x09	; 9
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	8c 01       	movw	r16, r24
    1742:	4e 83       	std	Y+6, r20	; 0x06
    1744:	5f 83       	std	Y+7, r21	; 0x07
    1746:	68 87       	std	Y+8, r22	; 0x08
    1748:	79 87       	std	Y+9, r23	; 0x09
    174a:	b1 2c       	mov	r11, r1
    174c:	d1 2c       	mov	r13, r1
    174e:	cc 24       	eor	r12, r12
    1750:	c3 94       	inc	r12
    1752:	7c 01       	movw	r14, r24
    1754:	83 e1       	ldi	r24, 0x13	; 19
    1756:	e8 0e       	add	r14, r24
    1758:	f1 1c       	adc	r15, r1
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	0f 92       	push	r0
    1760:	d8 01       	movw	r26, r16
    1762:	5e 96       	adiw	r26, 0x1e	; 30
    1764:	8c 91       	ld	r24, X
    1766:	5e 97       	sbiw	r26, 0x1e	; 30
    1768:	88 23       	and	r24, r24
    176a:	e1 f0       	breq	.+56     	; 0x17a4 <xQueueSemaphoreTake+0x86>
    176c:	81 50       	subi	r24, 0x01	; 1
    176e:	5e 96       	adiw	r26, 0x1e	; 30
    1770:	8c 93       	st	X, r24
    1772:	5e 97       	sbiw	r26, 0x1e	; 30
    1774:	8d 91       	ld	r24, X+
    1776:	9c 91       	ld	r25, X
    1778:	89 2b       	or	r24, r25
    177a:	29 f4       	brne	.+10     	; 0x1786 <xQueueSemaphoreTake+0x68>
    177c:	0e 94 b6 1a 	call	0x356c	; 0x356c <pvTaskIncrementMutexHeldCount>
    1780:	f8 01       	movw	r30, r16
    1782:	93 83       	std	Z+3, r25	; 0x03
    1784:	82 83       	std	Z+2, r24	; 0x02
    1786:	d8 01       	movw	r26, r16
    1788:	18 96       	adiw	r26, 0x08	; 8
    178a:	8c 91       	ld	r24, X
    178c:	88 23       	and	r24, r24
    178e:	31 f0       	breq	.+12     	; 0x179c <xQueueSemaphoreTake+0x7e>
    1790:	c8 01       	movw	r24, r16
    1792:	08 96       	adiw	r24, 0x08	; 8
    1794:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    1798:	81 11       	cpse	r24, r1
    179a:	da da       	rcall	.-2636   	; 0xd50 <vPortYield>
    179c:	0f 90       	pop	r0
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	7f c0       	rjmp	.+254    	; 0x18a2 <xQueueSemaphoreTake+0x184>
    17a4:	8e 81       	ldd	r24, Y+6	; 0x06
    17a6:	9f 81       	ldd	r25, Y+7	; 0x07
    17a8:	a8 85       	ldd	r26, Y+8	; 0x08
    17aa:	b9 85       	ldd	r27, Y+9	; 0x09
    17ac:	89 2b       	or	r24, r25
    17ae:	8a 2b       	or	r24, r26
    17b0:	8b 2b       	or	r24, r27
    17b2:	21 f4       	brne	.+8      	; 0x17bc <xQueueSemaphoreTake+0x9e>
    17b4:	0f 90       	pop	r0
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	73 c0       	rjmp	.+230    	; 0x18a2 <xQueueSemaphoreTake+0x184>
    17bc:	d1 10       	cpse	r13, r1
    17be:	05 c0       	rjmp	.+10     	; 0x17ca <xQueueSemaphoreTake+0xac>
    17c0:	ce 01       	movw	r24, r28
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    17c8:	dc 2c       	mov	r13, r12
    17ca:	0f 90       	pop	r0
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	0f 92       	push	r0
    17d8:	f8 01       	movw	r30, r16
    17da:	81 a1       	ldd	r24, Z+33	; 0x21
    17dc:	8f 3f       	cpi	r24, 0xFF	; 255
    17de:	09 f4       	brne	.+2      	; 0x17e2 <xQueueSemaphoreTake+0xc4>
    17e0:	11 a2       	std	Z+33, r1	; 0x21
    17e2:	d8 01       	movw	r26, r16
    17e4:	92 96       	adiw	r26, 0x22	; 34
    17e6:	8c 91       	ld	r24, X
    17e8:	92 97       	sbiw	r26, 0x22	; 34
    17ea:	8f 3f       	cpi	r24, 0xFF	; 255
    17ec:	11 f4       	brne	.+4      	; 0x17f2 <xQueueSemaphoreTake+0xd4>
    17ee:	92 96       	adiw	r26, 0x22	; 34
    17f0:	1c 92       	st	X, r1
    17f2:	0f 90       	pop	r0
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	be 01       	movw	r22, r28
    17f8:	6a 5f       	subi	r22, 0xFA	; 250
    17fa:	7f 4f       	sbci	r23, 0xFF	; 255
    17fc:	ce 01       	movw	r24, r28
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    1804:	81 11       	cpse	r24, r1
    1806:	27 c0       	rjmp	.+78     	; 0x1856 <xQueueSemaphoreTake+0x138>
    1808:	c8 01       	movw	r24, r16
    180a:	96 dc       	rcall	.-1748   	; 0x1138 <prvIsQueueEmpty>
    180c:	88 23       	and	r24, r24
    180e:	f1 f0       	breq	.+60     	; 0x184c <xQueueSemaphoreTake+0x12e>
    1810:	f8 01       	movw	r30, r16
    1812:	80 81       	ld	r24, Z
    1814:	91 81       	ldd	r25, Z+1	; 0x01
    1816:	89 2b       	or	r24, r25
    1818:	51 f4       	brne	.+20     	; 0x182e <xQueueSemaphoreTake+0x110>
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	0f 92       	push	r0
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	93 81       	ldd	r25, Z+3	; 0x03
    1824:	0e 94 bc 19 	call	0x3378	; 0x3378 <xTaskPriorityInherit>
    1828:	b8 2e       	mov	r11, r24
    182a:	0f 90       	pop	r0
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	4e 81       	ldd	r20, Y+6	; 0x06
    1830:	5f 81       	ldd	r21, Y+7	; 0x07
    1832:	68 85       	ldd	r22, Y+8	; 0x08
    1834:	79 85       	ldd	r23, Y+9	; 0x09
    1836:	c7 01       	movw	r24, r14
    1838:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    183c:	c8 01       	movw	r24, r16
    183e:	00 dd       	rcall	.-1536   	; 0x1240 <prvUnlockQueue>
    1840:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    1844:	81 11       	cpse	r24, r1
    1846:	89 cf       	rjmp	.-238    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1848:	83 da       	rcall	.-2810   	; 0xd50 <vPortYield>
    184a:	87 cf       	rjmp	.-242    	; 0x175a <xQueueSemaphoreTake+0x3c>
    184c:	c8 01       	movw	r24, r16
    184e:	f8 dc       	rcall	.-1552   	; 0x1240 <prvUnlockQueue>
    1850:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    1854:	82 cf       	rjmp	.-252    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1856:	c8 01       	movw	r24, r16
    1858:	f3 dc       	rcall	.-1562   	; 0x1240 <prvUnlockQueue>
    185a:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    185e:	c8 01       	movw	r24, r16
    1860:	6b dc       	rcall	.-1834   	; 0x1138 <prvIsQueueEmpty>
    1862:	88 23       	and	r24, r24
    1864:	09 f4       	brne	.+2      	; 0x1868 <xQueueSemaphoreTake+0x14a>
    1866:	79 cf       	rjmp	.-270    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1868:	bb 20       	and	r11, r11
    186a:	d1 f0       	breq	.+52     	; 0x18a0 <xQueueSemaphoreTake+0x182>
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	0f 92       	push	r0
    1872:	f8 01       	movw	r30, r16
    1874:	83 89       	ldd	r24, Z+19	; 0x13
    1876:	88 23       	and	r24, r24
    1878:	39 f0       	breq	.+14     	; 0x1888 <xQueueSemaphoreTake+0x16a>
    187a:	02 8c       	ldd	r0, Z+26	; 0x1a
    187c:	f3 8d       	ldd	r31, Z+27	; 0x1b
    187e:	e0 2d       	mov	r30, r0
    1880:	80 81       	ld	r24, Z
    1882:	64 e0       	ldi	r22, 0x04	; 4
    1884:	68 1b       	sub	r22, r24
    1886:	01 c0       	rjmp	.+2      	; 0x188a <xQueueSemaphoreTake+0x16c>
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	d8 01       	movw	r26, r16
    188c:	12 96       	adiw	r26, 0x02	; 2
    188e:	8d 91       	ld	r24, X+
    1890:	9c 91       	ld	r25, X
    1892:	13 97       	sbiw	r26, 0x03	; 3
    1894:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <vTaskPriorityDisinheritAfterTimeout>
    1898:	0f 90       	pop	r0
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <xQueueSemaphoreTake+0x184>
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	29 96       	adiw	r28, 0x09	; 9
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	ff 90       	pop	r15
    18b8:	ef 90       	pop	r14
    18ba:	df 90       	pop	r13
    18bc:	cf 90       	pop	r12
    18be:	bf 90       	pop	r11
    18c0:	08 95       	ret

000018c2 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	0f 92       	push	r0
    18ce:	89 a1       	ldd	r24, Y+33	; 0x21
    18d0:	8f 3f       	cpi	r24, 0xFF	; 255
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <vQueueWaitForMessageRestricted+0x14>
    18d4:	19 a2       	std	Y+33, r1	; 0x21
    18d6:	8a a1       	ldd	r24, Y+34	; 0x22
    18d8:	8f 3f       	cpi	r24, 0xFF	; 255
    18da:	09 f4       	brne	.+2      	; 0x18de <vQueueWaitForMessageRestricted+0x1c>
    18dc:	1a a2       	std	Y+34, r1	; 0x22
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    18e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18e4:	81 11       	cpse	r24, r1
    18e6:	04 c0       	rjmp	.+8      	; 0x18f0 <vQueueWaitForMessageRestricted+0x2e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    18e8:	ce 01       	movw	r24, r28
    18ea:	43 96       	adiw	r24, 0x13	; 19
    18ec:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    18f0:	ce 01       	movw	r24, r28
    18f2:	a6 dc       	rcall	.-1716   	; 0x1240 <prvUnlockQueue>
	}
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	08 95       	ret

000018fa <xSerialxPrint>:

		default:
			break;
	}
	return 0;
}
    18fa:	4f 92       	push	r4
    18fc:	5f 92       	push	r5
    18fe:	6f 92       	push	r6
    1900:	7f 92       	push	r7
    1902:	8f 92       	push	r8
    1904:	9f 92       	push	r9
    1906:	af 92       	push	r10
    1908:	bf 92       	push	r11
    190a:	cf 92       	push	r12
    190c:	df 92       	push	r13
    190e:	ef 92       	push	r14
    1910:	ff 92       	push	r15
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	ec 01       	movw	r28, r24
    191c:	fb 01       	movw	r30, r22
    191e:	01 90       	ld	r0, Z+
    1920:	00 20       	and	r0, r0
    1922:	e9 f7       	brne	.-6      	; 0x191e <xSerialxPrint+0x24>
    1924:	4b 01       	movw	r8, r22
    1926:	9f 01       	movw	r18, r30
    1928:	21 50       	subi	r18, 0x01	; 1
    192a:	31 09       	sbc	r19, r1
    192c:	0f 2e       	mov	r0, r31
    192e:	f1 e3       	ldi	r31, 0x31	; 49
    1930:	ef 2e       	mov	r14, r31
    1932:	ff 24       	eor	r15, r15
    1934:	f3 94       	inc	r15
    1936:	f0 2d       	mov	r31, r0
    1938:	01 ed       	ldi	r16, 0xD1	; 209
    193a:	10 e0       	ldi	r17, 0x00	; 0
    193c:	69 ec       	ldi	r22, 0xC9	; 201
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	41 ec       	ldi	r20, 0xC1	; 193
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	5c 01       	movw	r10, r24
    1946:	8d e0       	ldi	r24, 0x0D	; 13
    1948:	a8 0e       	add	r10, r24
    194a:	b1 1c       	adc	r11, r1
    194c:	78 c0       	rjmp	.+240    	; 0x1a3e <xSerialxPrint+0x144>
    194e:	d4 01       	movw	r26, r8
    1950:	dd 90       	ld	r13, X+
    1952:	4d 01       	movw	r8, r26
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	0f 92       	push	r0
    195a:	ed 85       	ldd	r30, Y+13	; 0x0d
    195c:	fe 85       	ldd	r31, Y+14	; 0x0e
    195e:	0f 90       	pop	r0
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	8f 89       	ldd	r24, Y+23	; 0x17
    1964:	98 8d       	ldd	r25, Y+24	; 0x18
    1966:	e8 17       	cp	r30, r24
    1968:	f9 07       	cpc	r31, r25
    196a:	f1 f0       	breq	.+60     	; 0x19a8 <xSerialxPrint+0xae>
    196c:	f5 01       	movw	r30, r10
    196e:	82 81       	ldd	r24, Z+2	; 0x02
    1970:	93 81       	ldd	r25, Z+3	; 0x03
    1972:	dc 01       	movw	r26, r24
    1974:	dc 92       	st	X, r13
    1976:	82 81       	ldd	r24, Z+2	; 0x02
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	93 83       	std	Z+3, r25	; 0x03
    197e:	82 83       	std	Z+2, r24	; 0x02
    1980:	c0 84       	ldd	r12, Z+8	; 0x08
    1982:	d1 84       	ldd	r13, Z+9	; 0x09
    1984:	8c 15       	cp	r24, r12
    1986:	9d 05       	cpc	r25, r13
    1988:	21 f4       	brne	.+8      	; 0x1992 <xSerialxPrint+0x98>
    198a:	86 81       	ldd	r24, Z+6	; 0x06
    198c:	97 81       	ldd	r25, Z+7	; 0x07
    198e:	93 83       	std	Z+3, r25	; 0x03
    1990:	82 83       	std	Z+2, r24	; 0x02
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	0f 92       	push	r0
    1998:	80 81       	ld	r24, Z
    199a:	91 81       	ldd	r25, Z+1	; 0x01
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	80 83       	st	Z, r24
    19a2:	0f 90       	pop	r0
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	2b c0       	rjmp	.+86     	; 0x19fe <xSerialxPrint+0x104>
    19a8:	00 00       	nop
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	0f 92       	push	r0
    19b0:	ed 85       	ldd	r30, Y+13	; 0x0d
    19b2:	fe 85       	ldd	r31, Y+14	; 0x0e
    19b4:	0f 90       	pop	r0
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ba:	98 8d       	ldd	r25, Y+24	; 0x18
    19bc:	e8 17       	cp	r30, r24
    19be:	f9 07       	cpc	r31, r25
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <xSerialxPrint+0xca>
    19c2:	3d c0       	rjmp	.+122    	; 0x1a3e <xSerialxPrint+0x144>
    19c4:	f5 01       	movw	r30, r10
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	dc 01       	movw	r26, r24
    19cc:	dc 92       	st	X, r13
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	93 83       	std	Z+3, r25	; 0x03
    19d6:	82 83       	std	Z+2, r24	; 0x02
    19d8:	c0 84       	ldd	r12, Z+8	; 0x08
    19da:	d1 84       	ldd	r13, Z+9	; 0x09
    19dc:	8c 15       	cp	r24, r12
    19de:	9d 05       	cpc	r25, r13
    19e0:	21 f4       	brne	.+8      	; 0x19ea <xSerialxPrint+0xf0>
    19e2:	86 81       	ldd	r24, Z+6	; 0x06
    19e4:	97 81       	ldd	r25, Z+7	; 0x07
    19e6:	93 83       	std	Z+3, r25	; 0x03
    19e8:	82 83       	std	Z+2, r24	; 0x02
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	0f 92       	push	r0
    19f0:	80 81       	ld	r24, Z
    19f2:	91 81       	ldd	r25, Z+1	; 0x01
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	80 83       	st	Z, r24
    19fa:	0f 90       	pop	r0
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	48 80       	ld	r4, Y
    1a00:	51 2c       	mov	r5, r1
    1a02:	b8 e0       	ldi	r27, 0x08	; 8
    1a04:	4b 16       	cp	r4, r27
    1a06:	51 04       	cpc	r5, r1
    1a08:	d0 f4       	brcc	.+52     	; 0x1a3e <xSerialxPrint+0x144>
    1a0a:	f2 01       	movw	r30, r4
    1a0c:	88 27       	eor	r24, r24
    1a0e:	ee 58       	subi	r30, 0x8E	; 142
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	8f 4f       	sbci	r24, 0xFF	; 255
    1a14:	0c 94 72 5a 	jmp	0xb4e4	; 0xb4e4 <__tablejump2__>
    1a18:	fa 01       	movw	r30, r20
    1a1a:	80 81       	ld	r24, Z
    1a1c:	80 62       	ori	r24, 0x20	; 32
    1a1e:	80 83       	st	Z, r24
    1a20:	0e c0       	rjmp	.+28     	; 0x1a3e <xSerialxPrint+0x144>
    1a22:	db 01       	movw	r26, r22
    1a24:	8c 91       	ld	r24, X
    1a26:	80 62       	ori	r24, 0x20	; 32
    1a28:	8c 93       	st	X, r24
    1a2a:	09 c0       	rjmp	.+18     	; 0x1a3e <xSerialxPrint+0x144>
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	80 81       	ld	r24, Z
    1a30:	80 62       	ori	r24, 0x20	; 32
    1a32:	80 83       	st	Z, r24
    1a34:	04 c0       	rjmp	.+8      	; 0x1a3e <xSerialxPrint+0x144>
    1a36:	d7 01       	movw	r26, r14
    1a38:	8c 91       	ld	r24, X
    1a3a:	80 62       	ori	r24, 0x20	; 32
    1a3c:	8c 93       	st	X, r24
    1a3e:	82 16       	cp	r8, r18
    1a40:	93 06       	cpc	r9, r19
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <xSerialxPrint+0x14c>
    1a44:	84 cf       	rjmp	.-248    	; 0x194e <xSerialxPrint+0x54>
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	ff 90       	pop	r15
    1a50:	ef 90       	pop	r14
    1a52:	df 90       	pop	r13
    1a54:	cf 90       	pop	r12
    1a56:	bf 90       	pop	r11
    1a58:	af 90       	pop	r10
    1a5a:	9f 90       	pop	r9
    1a5c:	8f 90       	pop	r8
    1a5e:	7f 90       	pop	r7
    1a60:	6f 90       	pop	r6
    1a62:	5f 90       	pop	r5
    1a64:	4f 90       	pop	r4
    1a66:	08 95       	ret

00001a68 <xSerialxPrintf>:
    1a68:	0f 93       	push	r16
    1a6a:	1f 93       	push	r17
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	08 85       	ldd	r16, Y+8	; 0x08
    1a76:	19 85       	ldd	r17, Y+9	; 0x09
    1a78:	f8 01       	movw	r30, r16
    1a7a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	29 f4       	brne	.+10     	; 0x1a8a <xSerialxPrintf+0x22>
    1a80:	67 d9       	rcall	.-3378   	; 0xd50 <vPortYield>
    1a82:	f8 01       	movw	r30, r16
    1a84:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a86:	81 30       	cpi	r24, 0x01	; 1
    1a88:	d9 f3       	breq	.-10     	; 0x1a80 <xSerialxPrintf+0x18>
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	85 8f       	std	Z+29, r24	; 0x1d
    1a90:	63 8d       	ldd	r22, Z+27	; 0x1b
    1a92:	74 8d       	ldd	r23, Z+28	; 0x1c
    1a94:	9e 01       	movw	r18, r28
    1a96:	24 5f       	subi	r18, 0xF4	; 244
    1a98:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9a:	4a 85       	ldd	r20, Y+10	; 0x0a
    1a9c:	5b 85       	ldd	r21, Y+11	; 0x0b
    1a9e:	81 8d       	ldd	r24, Z+25	; 0x19
    1aa0:	92 8d       	ldd	r25, Z+26	; 0x1a
    1aa2:	0e 94 e4 5c 	call	0xb9c8	; 0xb9c8 <vsnprintf>
    1aa6:	f8 01       	movw	r30, r16
    1aa8:	61 8d       	ldd	r22, Z+25	; 0x19
    1aaa:	72 8d       	ldd	r23, Z+26	; 0x1a
    1aac:	c8 01       	movw	r24, r16
    1aae:	25 df       	rcall	.-438    	; 0x18fa <xSerialxPrint>
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	15 8e       	std	Z+29, r1	; 0x1d
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	08 95       	ret

00001abe <xSerialRxFlush>:
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	4c 91       	ld	r20, X
    1ac6:	50 e0       	ldi	r21, 0x00	; 0
    1ac8:	48 30       	cpi	r20, 0x08	; 8
    1aca:	51 05       	cpc	r21, r1
    1acc:	e8 f5       	brcc	.+122    	; 0x1b48 <xSerialRxFlush+0x8a>
    1ace:	fa 01       	movw	r30, r20
    1ad0:	88 27       	eor	r24, r24
    1ad2:	e6 58       	subi	r30, 0x86	; 134
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad8:	0c 94 72 5a 	jmp	0xb4e4	; 0xb4e4 <__tablejump2__>
    1adc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1ae0:	88 23       	and	r24, r24
    1ae2:	54 f1       	brlt	.+84     	; 0x1b38 <xSerialRxFlush+0x7a>
    1ae4:	31 c0       	rjmp	.+98     	; 0x1b48 <xSerialRxFlush+0x8a>
    1ae6:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1aea:	88 23       	and	r24, r24
    1aec:	e4 f0       	brlt	.+56     	; 0x1b26 <xSerialRxFlush+0x68>
    1aee:	2c c0       	rjmp	.+88     	; 0x1b48 <xSerialRxFlush+0x8a>
    1af0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1af4:	88 23       	and	r24, r24
    1af6:	74 f0       	brlt	.+28     	; 0x1b14 <xSerialRxFlush+0x56>
    1af8:	27 c0       	rjmp	.+78     	; 0x1b48 <xSerialRxFlush+0x8a>
    1afa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1afe:	88 23       	and	r24, r24
    1b00:	1c f5       	brge	.+70     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b02:	c6 ec       	ldi	r28, 0xC6	; 198
    1b04:	d0 e0       	ldi	r29, 0x00	; 0
    1b06:	e0 ec       	ldi	r30, 0xC0	; 192
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	88 81       	ld	r24, Y
    1b0c:	80 81       	ld	r24, Z
    1b0e:	88 23       	and	r24, r24
    1b10:	e4 f3       	brlt	.-8      	; 0x1b0a <xSerialRxFlush+0x4c>
    1b12:	1a c0       	rjmp	.+52     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b14:	ce ec       	ldi	r28, 0xCE	; 206
    1b16:	d0 e0       	ldi	r29, 0x00	; 0
    1b18:	e8 ec       	ldi	r30, 0xC8	; 200
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	88 81       	ld	r24, Y
    1b1e:	80 81       	ld	r24, Z
    1b20:	88 23       	and	r24, r24
    1b22:	e4 f3       	brlt	.-8      	; 0x1b1c <xSerialRxFlush+0x5e>
    1b24:	11 c0       	rjmp	.+34     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b26:	c6 ed       	ldi	r28, 0xD6	; 214
    1b28:	d0 e0       	ldi	r29, 0x00	; 0
    1b2a:	e0 ed       	ldi	r30, 0xD0	; 208
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	88 81       	ld	r24, Y
    1b30:	80 81       	ld	r24, Z
    1b32:	88 23       	and	r24, r24
    1b34:	e4 f3       	brlt	.-8      	; 0x1b2e <xSerialRxFlush+0x70>
    1b36:	08 c0       	rjmp	.+16     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b38:	c6 e3       	ldi	r28, 0x36	; 54
    1b3a:	d1 e0       	ldi	r29, 0x01	; 1
    1b3c:	e0 e3       	ldi	r30, 0x30	; 48
    1b3e:	f1 e0       	ldi	r31, 0x01	; 1
    1b40:	88 81       	ld	r24, Y
    1b42:	80 81       	ld	r24, Z
    1b44:	88 23       	and	r24, r24
    1b46:	e4 f3       	brlt	.-8      	; 0x1b40 <xSerialRxFlush+0x82>
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	0f 92       	push	r0
    1b4e:	12 96       	adiw	r26, 0x02	; 2
    1b50:	1c 92       	st	X, r1
    1b52:	1e 92       	st	-X, r1
    1b54:	11 97       	sbiw	r26, 0x01	; 1
    1b56:	17 96       	adiw	r26, 0x07	; 7
    1b58:	8d 91       	ld	r24, X+
    1b5a:	9c 91       	ld	r25, X
    1b5c:	18 97       	sbiw	r26, 0x08	; 8
    1b5e:	14 96       	adiw	r26, 0x04	; 4
    1b60:	9c 93       	st	X, r25
    1b62:	8e 93       	st	-X, r24
    1b64:	13 97       	sbiw	r26, 0x03	; 3
    1b66:	16 96       	adiw	r26, 0x06	; 6
    1b68:	9c 93       	st	X, r25
    1b6a:	8e 93       	st	-X, r24
    1b6c:	15 97       	sbiw	r26, 0x05	; 5
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	08 95       	ret

00001b78 <xSerialAvailableChar>:
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	0f 92       	push	r0
    1b7e:	fc 01       	movw	r30, r24
    1b80:	81 81       	ldd	r24, Z+1	; 0x01
    1b82:	92 81       	ldd	r25, Z+2	; 0x02
    1b84:	0f 90       	pop	r0
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	08 95       	ret

00001b8a <xSerialPutChar>:
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	dc 01       	movw	r26, r24
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	0f 92       	push	r0
    1b96:	1d 96       	adiw	r26, 0x0d	; 13
    1b98:	2d 91       	ld	r18, X+
    1b9a:	3c 91       	ld	r19, X
    1b9c:	1e 97       	sbiw	r26, 0x0e	; 14
    1b9e:	0f 90       	pop	r0
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	57 96       	adiw	r26, 0x17	; 23
    1ba4:	8d 91       	ld	r24, X+
    1ba6:	9c 91       	ld	r25, X
    1ba8:	58 97       	sbiw	r26, 0x18	; 24
    1baa:	28 17       	cp	r18, r24
    1bac:	39 07       	cpc	r19, r25
    1bae:	f1 f0       	breq	.+60     	; 0x1bec <xSerialPutChar+0x62>
    1bb0:	fd 01       	movw	r30, r26
    1bb2:	3d 96       	adiw	r30, 0x0d	; 13
    1bb4:	c2 81       	ldd	r28, Z+2	; 0x02
    1bb6:	d3 81       	ldd	r29, Z+3	; 0x03
    1bb8:	68 83       	st	Y, r22
    1bba:	82 81       	ldd	r24, Z+2	; 0x02
    1bbc:	93 81       	ldd	r25, Z+3	; 0x03
    1bbe:	01 96       	adiw	r24, 0x01	; 1
    1bc0:	93 83       	std	Z+3, r25	; 0x03
    1bc2:	82 83       	std	Z+2, r24	; 0x02
    1bc4:	20 85       	ldd	r18, Z+8	; 0x08
    1bc6:	31 85       	ldd	r19, Z+9	; 0x09
    1bc8:	82 17       	cp	r24, r18
    1bca:	93 07       	cpc	r25, r19
    1bcc:	21 f4       	brne	.+8      	; 0x1bd6 <xSerialPutChar+0x4c>
    1bce:	86 81       	ldd	r24, Z+6	; 0x06
    1bd0:	97 81       	ldd	r25, Z+7	; 0x07
    1bd2:	93 83       	std	Z+3, r25	; 0x03
    1bd4:	82 83       	std	Z+2, r24	; 0x02
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	0f 92       	push	r0
    1bdc:	80 81       	ld	r24, Z
    1bde:	91 81       	ldd	r25, Z+1	; 0x01
    1be0:	01 96       	adiw	r24, 0x01	; 1
    1be2:	91 83       	std	Z+1, r25	; 0x01
    1be4:	80 83       	st	Z, r24
    1be6:	0f 90       	pop	r0
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	2f c0       	rjmp	.+94     	; 0x1c4a <xSerialPutChar+0xc0>
    1bec:	00 00       	nop
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	0f 92       	push	r0
    1bf4:	1d 96       	adiw	r26, 0x0d	; 13
    1bf6:	2d 91       	ld	r18, X+
    1bf8:	3c 91       	ld	r19, X
    1bfa:	1e 97       	sbiw	r26, 0x0e	; 14
    1bfc:	0f 90       	pop	r0
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	57 96       	adiw	r26, 0x17	; 23
    1c02:	8d 91       	ld	r24, X+
    1c04:	9c 91       	ld	r25, X
    1c06:	58 97       	sbiw	r26, 0x18	; 24
    1c08:	28 17       	cp	r18, r24
    1c0a:	39 07       	cpc	r19, r25
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <xSerialPutChar+0x86>
    1c0e:	45 c0       	rjmp	.+138    	; 0x1c9a <xSerialPutChar+0x110>
    1c10:	fd 01       	movw	r30, r26
    1c12:	3d 96       	adiw	r30, 0x0d	; 13
    1c14:	c2 81       	ldd	r28, Z+2	; 0x02
    1c16:	d3 81       	ldd	r29, Z+3	; 0x03
    1c18:	68 83       	st	Y, r22
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	01 96       	adiw	r24, 0x01	; 1
    1c20:	93 83       	std	Z+3, r25	; 0x03
    1c22:	82 83       	std	Z+2, r24	; 0x02
    1c24:	20 85       	ldd	r18, Z+8	; 0x08
    1c26:	31 85       	ldd	r19, Z+9	; 0x09
    1c28:	82 17       	cp	r24, r18
    1c2a:	93 07       	cpc	r25, r19
    1c2c:	21 f4       	brne	.+8      	; 0x1c36 <xSerialPutChar+0xac>
    1c2e:	86 81       	ldd	r24, Z+6	; 0x06
    1c30:	97 81       	ldd	r25, Z+7	; 0x07
    1c32:	93 83       	std	Z+3, r25	; 0x03
    1c34:	82 83       	std	Z+2, r24	; 0x02
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	0f 92       	push	r0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	91 81       	ldd	r25, Z+1	; 0x01
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	80 83       	st	Z, r24
    1c46:	0f 90       	pop	r0
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	8c 91       	ld	r24, X
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	88 30       	cpi	r24, 0x08	; 8
    1c50:	91 05       	cpc	r25, r1
    1c52:	28 f5       	brcc	.+74     	; 0x1c9e <xSerialPutChar+0x114>
    1c54:	fc 01       	movw	r30, r24
    1c56:	88 27       	eor	r24, r24
    1c58:	ee 57       	subi	r30, 0x7E	; 126
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5e:	0c 94 72 5a 	jmp	0xb4e4	; 0xb4e4 <__tablejump2__>
    1c62:	e1 ec       	ldi	r30, 0xC1	; 193
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	80 62       	ori	r24, 0x20	; 32
    1c6a:	80 83       	st	Z, r24
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	18 c0       	rjmp	.+48     	; 0x1ca0 <xSerialPutChar+0x116>
    1c70:	e9 ec       	ldi	r30, 0xC9	; 201
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	80 62       	ori	r24, 0x20	; 32
    1c78:	80 83       	st	Z, r24
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	11 c0       	rjmp	.+34     	; 0x1ca0 <xSerialPutChar+0x116>
    1c7e:	e1 ed       	ldi	r30, 0xD1	; 209
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	80 62       	ori	r24, 0x20	; 32
    1c86:	80 83       	st	Z, r24
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	0a c0       	rjmp	.+20     	; 0x1ca0 <xSerialPutChar+0x116>
    1c8c:	e1 e3       	ldi	r30, 0x31	; 49
    1c8e:	f1 e0       	ldi	r31, 0x01	; 1
    1c90:	80 81       	ld	r24, Z
    1c92:	80 62       	ori	r24, 0x20	; 32
    1c94:	80 83       	st	Z, r24
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	03 c0       	rjmp	.+6      	; 0x1ca0 <xSerialPutChar+0x116>
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	01 c0       	rjmp	.+2      	; 0x1ca0 <xSerialPutChar+0x116>
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	08 95       	ret

00001ca6 <xSerialPortInitMinimal>:
    1ca6:	7f 92       	push	r7
    1ca8:	8f 92       	push	r8
    1caa:	9f 92       	push	r9
    1cac:	af 92       	push	r10
    1cae:	bf 92       	push	r11
    1cb0:	cf 92       	push	r12
    1cb2:	df 92       	push	r13
    1cb4:	ef 92       	push	r14
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	a2 97       	sbiw	r28, 0x22	; 34
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	6c 01       	movw	r12, r24
    1cd2:	76 2e       	mov	r7, r22
    1cd4:	49 01       	movw	r8, r18
    1cd6:	5a 01       	movw	r10, r20
    1cd8:	c7 01       	movw	r24, r14
    1cda:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	a9 f0       	breq	.+42     	; 0x1d0c <xSerialPortInitMinimal+0x66>
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	32 96       	adiw	r30, 0x02	; 2
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	0f 92       	push	r0
    1cec:	11 82       	std	Z+1, r1	; 0x01
    1cee:	10 82       	st	Z, r1
    1cf0:	93 83       	std	Z+3, r25	; 0x03
    1cf2:	82 83       	std	Z+2, r24	; 0x02
    1cf4:	95 83       	std	Z+5, r25	; 0x05
    1cf6:	84 83       	std	Z+4, r24	; 0x04
    1cf8:	97 83       	std	Z+7, r25	; 0x07
    1cfa:	86 83       	std	Z+6, r24	; 0x06
    1cfc:	8e 0d       	add	r24, r14
    1cfe:	9f 1d       	adc	r25, r15
    1d00:	91 87       	std	Z+9, r25	; 0x09
    1d02:	80 87       	std	Z+8, r24	; 0x08
    1d04:	f3 86       	std	Z+11, r15	; 0x0b
    1d06:	e2 86       	std	Z+10, r14	; 0x0a
    1d08:	0f 90       	pop	r0
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	c8 01       	movw	r24, r16
    1d0e:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	a9 f0       	breq	.+42     	; 0x1d40 <xSerialPortInitMinimal+0x9a>
    1d16:	fe 01       	movw	r30, r28
    1d18:	3e 96       	adiw	r30, 0x0e	; 14
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	0f 92       	push	r0
    1d20:	11 82       	std	Z+1, r1	; 0x01
    1d22:	10 82       	st	Z, r1
    1d24:	93 83       	std	Z+3, r25	; 0x03
    1d26:	82 83       	std	Z+2, r24	; 0x02
    1d28:	95 83       	std	Z+5, r25	; 0x05
    1d2a:	84 83       	std	Z+4, r24	; 0x04
    1d2c:	97 83       	std	Z+7, r25	; 0x07
    1d2e:	86 83       	std	Z+6, r24	; 0x06
    1d30:	80 0f       	add	r24, r16
    1d32:	91 1f       	adc	r25, r17
    1d34:	91 87       	std	Z+9, r25	; 0x09
    1d36:	80 87       	std	Z+8, r24	; 0x08
    1d38:	13 87       	std	Z+11, r17	; 0x0b
    1d3a:	02 87       	std	Z+10, r16	; 0x0a
    1d3c:	0f 90       	pop	r0
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	c8 01       	movw	r24, r16
    1d42:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1d46:	9b 8f       	std	Y+27, r25	; 0x1b
    1d48:	8a 8f       	std	Y+26, r24	; 0x1a
    1d4a:	79 82       	std	Y+1, r7	; 0x01
    1d4c:	1d 8f       	std	Y+29, r17	; 0x1d
    1d4e:	0c 8f       	std	Y+28, r16	; 0x1c
    1d50:	1e 8e       	std	Y+30, r1	; 0x1e
    1d52:	8f 8e       	std	Y+31, r8	; 0x1f
    1d54:	98 a2       	std	Y+32, r9	; 0x20
    1d56:	a9 a2       	std	Y+33, r10	; 0x21
    1d58:	ba a2       	std	Y+34, r11	; 0x22
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	f8 94       	cli
    1d5e:	0f 92       	push	r0
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	88 30       	cpi	r24, 0x08	; 8
    1d66:	91 05       	cpc	r25, r1
    1d68:	08 f0       	brcs	.+2      	; 0x1d6c <xSerialPortInitMinimal+0xc6>
    1d6a:	ba c1       	rjmp	.+884    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	88 27       	eor	r24, r24
    1d70:	e6 57       	subi	r30, 0x76	; 118
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	8f 4f       	sbci	r24, 0xFF	; 255
    1d76:	0c 94 72 5a 	jmp	0xb4e4	; 0xb4e4 <__tablejump2__>
    1d7a:	d5 01       	movw	r26, r10
    1d7c:	c4 01       	movw	r24, r8
    1d7e:	97 5f       	subi	r25, 0xF7	; 247
    1d80:	a2 4c       	sbci	r26, 0xC2	; 194
    1d82:	bf 4f       	sbci	r27, 0xFF	; 255
    1d84:	bc 01       	movw	r22, r24
    1d86:	cd 01       	movw	r24, r26
    1d88:	66 0f       	add	r22, r22
    1d8a:	77 1f       	adc	r23, r23
    1d8c:	88 1f       	adc	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	66 0f       	add	r22, r22
    1d92:	77 1f       	adc	r23, r23
    1d94:	88 1f       	adc	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	95 01       	movw	r18, r10
    1d9a:	84 01       	movw	r16, r8
    1d9c:	00 0f       	add	r16, r16
    1d9e:	11 1f       	adc	r17, r17
    1da0:	22 1f       	adc	r18, r18
    1da2:	33 1f       	adc	r19, r19
    1da4:	00 0f       	add	r16, r16
    1da6:	11 1f       	adc	r17, r17
    1da8:	22 1f       	adc	r18, r18
    1daa:	33 1f       	adc	r19, r19
    1dac:	a9 01       	movw	r20, r18
    1dae:	98 01       	movw	r18, r16
    1db0:	22 0f       	add	r18, r18
    1db2:	33 1f       	adc	r19, r19
    1db4:	44 1f       	adc	r20, r20
    1db6:	55 1f       	adc	r21, r21
    1db8:	0e 94 50 5a 	call	0xb4a0	; 0xb4a0 <__udivmodsi4>
    1dbc:	21 50       	subi	r18, 0x01	; 1
    1dbe:	31 09       	sbc	r19, r1
    1dc0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1dc4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1dce:	88 e9       	ldi	r24, 0x98	; 152
    1dd0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1dd4:	8e e0       	ldi	r24, 0x0E	; 14
    1dd6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1dda:	82 c1       	rjmp	.+772    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1ddc:	04 ec       	ldi	r16, 0xC4	; 196
    1dde:	10 e0       	ldi	r17, 0x00	; 0
    1de0:	f8 01       	movw	r30, r16
    1de2:	11 82       	std	Z+1, r1	; 0x01
    1de4:	10 82       	st	Z, r1
    1de6:	6a 9a       	sbi	0x0d, 2	; 13
    1de8:	80 ec       	ldi	r24, 0xC0	; 192
    1dea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1dee:	88 e9       	ldi	r24, 0x98	; 152
    1df0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1df4:	d5 01       	movw	r26, r10
    1df6:	c4 01       	movw	r24, r8
    1df8:	80 58       	subi	r24, 0x80	; 128
    1dfa:	9b 47       	sbci	r25, 0x7B	; 123
    1dfc:	a1 4e       	sbci	r26, 0xE1	; 225
    1dfe:	bf 4f       	sbci	r27, 0xFF	; 255
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	aa 1f       	adc	r26, r26
    1e06:	bb 1f       	adc	r27, r27
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	aa 1f       	adc	r26, r26
    1e0e:	bb 1f       	adc	r27, r27
    1e10:	bc 01       	movw	r22, r24
    1e12:	cd 01       	movw	r24, r26
    1e14:	66 0f       	add	r22, r22
    1e16:	77 1f       	adc	r23, r23
    1e18:	88 1f       	adc	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	88 0c       	add	r8, r8
    1e1e:	99 1c       	adc	r9, r9
    1e20:	aa 1c       	adc	r10, r10
    1e22:	bb 1c       	adc	r11, r11
    1e24:	88 0c       	add	r8, r8
    1e26:	99 1c       	adc	r9, r9
    1e28:	aa 1c       	adc	r10, r10
    1e2a:	bb 1c       	adc	r11, r11
    1e2c:	a5 01       	movw	r20, r10
    1e2e:	94 01       	movw	r18, r8
    1e30:	22 0f       	add	r18, r18
    1e32:	33 1f       	adc	r19, r19
    1e34:	44 1f       	adc	r20, r20
    1e36:	55 1f       	adc	r21, r21
    1e38:	22 0f       	add	r18, r18
    1e3a:	33 1f       	adc	r19, r19
    1e3c:	44 1f       	adc	r20, r20
    1e3e:	55 1f       	adc	r21, r21
    1e40:	0e 94 50 5a 	call	0xb4a0	; 0xb4a0 <__udivmodsi4>
    1e44:	21 50       	subi	r18, 0x01	; 1
    1e46:	31 09       	sbc	r19, r1
    1e48:	f8 01       	movw	r30, r16
    1e4a:	31 83       	std	Z+1, r19	; 0x01
    1e4c:	20 83       	st	Z, r18
    1e4e:	48 c1       	rjmp	.+656    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1e50:	d5 01       	movw	r26, r10
    1e52:	c4 01       	movw	r24, r8
    1e54:	97 5f       	subi	r25, 0xF7	; 247
    1e56:	a2 4c       	sbci	r26, 0xC2	; 194
    1e58:	bf 4f       	sbci	r27, 0xFF	; 255
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	66 0f       	add	r22, r22
    1e60:	77 1f       	adc	r23, r23
    1e62:	88 1f       	adc	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	66 0f       	add	r22, r22
    1e68:	77 1f       	adc	r23, r23
    1e6a:	88 1f       	adc	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	95 01       	movw	r18, r10
    1e70:	84 01       	movw	r16, r8
    1e72:	00 0f       	add	r16, r16
    1e74:	11 1f       	adc	r17, r17
    1e76:	22 1f       	adc	r18, r18
    1e78:	33 1f       	adc	r19, r19
    1e7a:	00 0f       	add	r16, r16
    1e7c:	11 1f       	adc	r17, r17
    1e7e:	22 1f       	adc	r18, r18
    1e80:	33 1f       	adc	r19, r19
    1e82:	a9 01       	movw	r20, r18
    1e84:	98 01       	movw	r18, r16
    1e86:	22 0f       	add	r18, r18
    1e88:	33 1f       	adc	r19, r19
    1e8a:	44 1f       	adc	r20, r20
    1e8c:	55 1f       	adc	r21, r21
    1e8e:	0e 94 50 5a 	call	0xb4a0	; 0xb4a0 <__udivmodsi4>
    1e92:	21 50       	subi	r18, 0x01	; 1
    1e94:	31 09       	sbc	r19, r1
    1e96:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    1e9a:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    1e9e:	82 e0       	ldi	r24, 0x02	; 2
    1ea0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1ea4:	88 e9       	ldi	r24, 0x98	; 152
    1ea6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1eaa:	8e e0       	ldi	r24, 0x0E	; 14
    1eac:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1eb0:	17 c1       	rjmp	.+558    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1eb2:	0c ec       	ldi	r16, 0xCC	; 204
    1eb4:	10 e0       	ldi	r17, 0x00	; 0
    1eb6:	f8 01       	movw	r30, r16
    1eb8:	11 82       	std	Z+1, r1	; 0x01
    1eba:	10 82       	st	Z, r1
    1ebc:	55 9a       	sbi	0x0a, 5	; 10
    1ebe:	80 ec       	ldi	r24, 0xC0	; 192
    1ec0:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1ec4:	88 e9       	ldi	r24, 0x98	; 152
    1ec6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1eca:	d5 01       	movw	r26, r10
    1ecc:	c4 01       	movw	r24, r8
    1ece:	80 58       	subi	r24, 0x80	; 128
    1ed0:	9b 47       	sbci	r25, 0x7B	; 123
    1ed2:	a1 4e       	sbci	r26, 0xE1	; 225
    1ed4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	aa 1f       	adc	r26, r26
    1edc:	bb 1f       	adc	r27, r27
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	aa 1f       	adc	r26, r26
    1ee4:	bb 1f       	adc	r27, r27
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	66 0f       	add	r22, r22
    1eec:	77 1f       	adc	r23, r23
    1eee:	88 1f       	adc	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	88 0c       	add	r8, r8
    1ef4:	99 1c       	adc	r9, r9
    1ef6:	aa 1c       	adc	r10, r10
    1ef8:	bb 1c       	adc	r11, r11
    1efa:	88 0c       	add	r8, r8
    1efc:	99 1c       	adc	r9, r9
    1efe:	aa 1c       	adc	r10, r10
    1f00:	bb 1c       	adc	r11, r11
    1f02:	a5 01       	movw	r20, r10
    1f04:	94 01       	movw	r18, r8
    1f06:	22 0f       	add	r18, r18
    1f08:	33 1f       	adc	r19, r19
    1f0a:	44 1f       	adc	r20, r20
    1f0c:	55 1f       	adc	r21, r21
    1f0e:	22 0f       	add	r18, r18
    1f10:	33 1f       	adc	r19, r19
    1f12:	44 1f       	adc	r20, r20
    1f14:	55 1f       	adc	r21, r21
    1f16:	0e 94 50 5a 	call	0xb4a0	; 0xb4a0 <__udivmodsi4>
    1f1a:	21 50       	subi	r18, 0x01	; 1
    1f1c:	31 09       	sbc	r19, r1
    1f1e:	f8 01       	movw	r30, r16
    1f20:	31 83       	std	Z+1, r19	; 0x01
    1f22:	20 83       	st	Z, r18
    1f24:	dd c0       	rjmp	.+442    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1f26:	d5 01       	movw	r26, r10
    1f28:	c4 01       	movw	r24, r8
    1f2a:	97 5f       	subi	r25, 0xF7	; 247
    1f2c:	a2 4c       	sbci	r26, 0xC2	; 194
    1f2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	66 0f       	add	r22, r22
    1f36:	77 1f       	adc	r23, r23
    1f38:	88 1f       	adc	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	66 0f       	add	r22, r22
    1f3e:	77 1f       	adc	r23, r23
    1f40:	88 1f       	adc	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	95 01       	movw	r18, r10
    1f46:	84 01       	movw	r16, r8
    1f48:	00 0f       	add	r16, r16
    1f4a:	11 1f       	adc	r17, r17
    1f4c:	22 1f       	adc	r18, r18
    1f4e:	33 1f       	adc	r19, r19
    1f50:	00 0f       	add	r16, r16
    1f52:	11 1f       	adc	r17, r17
    1f54:	22 1f       	adc	r18, r18
    1f56:	33 1f       	adc	r19, r19
    1f58:	a9 01       	movw	r20, r18
    1f5a:	98 01       	movw	r18, r16
    1f5c:	22 0f       	add	r18, r18
    1f5e:	33 1f       	adc	r19, r19
    1f60:	44 1f       	adc	r20, r20
    1f62:	55 1f       	adc	r21, r21
    1f64:	0e 94 50 5a 	call	0xb4a0	; 0xb4a0 <__udivmodsi4>
    1f68:	21 50       	subi	r18, 0x01	; 1
    1f6a:	31 09       	sbc	r19, r1
    1f6c:	30 93 d5 00 	sts	0x00D5, r19	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    1f70:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    1f74:	82 e0       	ldi	r24, 0x02	; 2
    1f76:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1f7a:	88 e9       	ldi	r24, 0x98	; 152
    1f7c:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1f80:	8e e0       	ldi	r24, 0x0E	; 14
    1f82:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1f86:	ac c0       	rjmp	.+344    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1f88:	04 ed       	ldi	r16, 0xD4	; 212
    1f8a:	10 e0       	ldi	r17, 0x00	; 0
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	11 82       	std	Z+1, r1	; 0x01
    1f90:	10 82       	st	Z, r1
    1f92:	e1 e0       	ldi	r30, 0x01	; 1
    1f94:	f1 e0       	ldi	r31, 0x01	; 1
    1f96:	80 81       	ld	r24, Z
    1f98:	84 60       	ori	r24, 0x04	; 4
    1f9a:	80 83       	st	Z, r24
    1f9c:	80 ec       	ldi	r24, 0xC0	; 192
    1f9e:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1fa2:	88 e9       	ldi	r24, 0x98	; 152
    1fa4:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1fa8:	d5 01       	movw	r26, r10
    1faa:	c4 01       	movw	r24, r8
    1fac:	80 58       	subi	r24, 0x80	; 128
    1fae:	9b 47       	sbci	r25, 0x7B	; 123
    1fb0:	a1 4e       	sbci	r26, 0xE1	; 225
    1fb2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	aa 1f       	adc	r26, r26
    1fba:	bb 1f       	adc	r27, r27
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	aa 1f       	adc	r26, r26
    1fc2:	bb 1f       	adc	r27, r27
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	66 0f       	add	r22, r22
    1fca:	77 1f       	adc	r23, r23
    1fcc:	88 1f       	adc	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	88 0c       	add	r8, r8
    1fd2:	99 1c       	adc	r9, r9
    1fd4:	aa 1c       	adc	r10, r10
    1fd6:	bb 1c       	adc	r11, r11
    1fd8:	88 0c       	add	r8, r8
    1fda:	99 1c       	adc	r9, r9
    1fdc:	aa 1c       	adc	r10, r10
    1fde:	bb 1c       	adc	r11, r11
    1fe0:	a5 01       	movw	r20, r10
    1fe2:	94 01       	movw	r18, r8
    1fe4:	22 0f       	add	r18, r18
    1fe6:	33 1f       	adc	r19, r19
    1fe8:	44 1f       	adc	r20, r20
    1fea:	55 1f       	adc	r21, r21
    1fec:	22 0f       	add	r18, r18
    1fee:	33 1f       	adc	r19, r19
    1ff0:	44 1f       	adc	r20, r20
    1ff2:	55 1f       	adc	r21, r21
    1ff4:	0e 94 50 5a 	call	0xb4a0	; 0xb4a0 <__udivmodsi4>
    1ff8:	21 50       	subi	r18, 0x01	; 1
    1ffa:	31 09       	sbc	r19, r1
    1ffc:	f8 01       	movw	r30, r16
    1ffe:	31 83       	std	Z+1, r19	; 0x01
    2000:	20 83       	st	Z, r18
    2002:	6e c0       	rjmp	.+220    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    2004:	d5 01       	movw	r26, r10
    2006:	c4 01       	movw	r24, r8
    2008:	97 5f       	subi	r25, 0xF7	; 247
    200a:	a2 4c       	sbci	r26, 0xC2	; 194
    200c:	bf 4f       	sbci	r27, 0xFF	; 255
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	66 0f       	add	r22, r22
    2014:	77 1f       	adc	r23, r23
    2016:	88 1f       	adc	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	66 0f       	add	r22, r22
    201c:	77 1f       	adc	r23, r23
    201e:	88 1f       	adc	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	95 01       	movw	r18, r10
    2024:	84 01       	movw	r16, r8
    2026:	00 0f       	add	r16, r16
    2028:	11 1f       	adc	r17, r17
    202a:	22 1f       	adc	r18, r18
    202c:	33 1f       	adc	r19, r19
    202e:	00 0f       	add	r16, r16
    2030:	11 1f       	adc	r17, r17
    2032:	22 1f       	adc	r18, r18
    2034:	33 1f       	adc	r19, r19
    2036:	a9 01       	movw	r20, r18
    2038:	98 01       	movw	r18, r16
    203a:	22 0f       	add	r18, r18
    203c:	33 1f       	adc	r19, r19
    203e:	44 1f       	adc	r20, r20
    2040:	55 1f       	adc	r21, r21
    2042:	0e 94 50 5a 	call	0xb4a0	; 0xb4a0 <__udivmodsi4>
    2046:	21 50       	subi	r18, 0x01	; 1
    2048:	31 09       	sbc	r19, r1
    204a:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    204e:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2058:	88 e9       	ldi	r24, 0x98	; 152
    205a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    205e:	8e e0       	ldi	r24, 0x0E	; 14
    2060:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    2064:	3d c0       	rjmp	.+122    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    2066:	04 e3       	ldi	r16, 0x34	; 52
    2068:	11 e0       	ldi	r17, 0x01	; 1
    206a:	f8 01       	movw	r30, r16
    206c:	11 82       	std	Z+1, r1	; 0x01
    206e:	10 82       	st	Z, r1
    2070:	e4 e0       	ldi	r30, 0x04	; 4
    2072:	f1 e0       	ldi	r31, 0x01	; 1
    2074:	80 81       	ld	r24, Z
    2076:	84 60       	ori	r24, 0x04	; 4
    2078:	80 83       	st	Z, r24
    207a:	80 ec       	ldi	r24, 0xC0	; 192
    207c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    2080:	88 e9       	ldi	r24, 0x98	; 152
    2082:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    2086:	d5 01       	movw	r26, r10
    2088:	c4 01       	movw	r24, r8
    208a:	80 58       	subi	r24, 0x80	; 128
    208c:	9b 47       	sbci	r25, 0x7B	; 123
    208e:	a1 4e       	sbci	r26, 0xE1	; 225
    2090:	bf 4f       	sbci	r27, 0xFF	; 255
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	aa 1f       	adc	r26, r26
    2098:	bb 1f       	adc	r27, r27
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	aa 1f       	adc	r26, r26
    20a0:	bb 1f       	adc	r27, r27
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	66 0f       	add	r22, r22
    20a8:	77 1f       	adc	r23, r23
    20aa:	88 1f       	adc	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	88 0c       	add	r8, r8
    20b0:	99 1c       	adc	r9, r9
    20b2:	aa 1c       	adc	r10, r10
    20b4:	bb 1c       	adc	r11, r11
    20b6:	88 0c       	add	r8, r8
    20b8:	99 1c       	adc	r9, r9
    20ba:	aa 1c       	adc	r10, r10
    20bc:	bb 1c       	adc	r11, r11
    20be:	a5 01       	movw	r20, r10
    20c0:	94 01       	movw	r18, r8
    20c2:	22 0f       	add	r18, r18
    20c4:	33 1f       	adc	r19, r19
    20c6:	44 1f       	adc	r20, r20
    20c8:	55 1f       	adc	r21, r21
    20ca:	22 0f       	add	r18, r18
    20cc:	33 1f       	adc	r19, r19
    20ce:	44 1f       	adc	r20, r20
    20d0:	55 1f       	adc	r21, r21
    20d2:	0e 94 50 5a 	call	0xb4a0	; 0xb4a0 <__udivmodsi4>
    20d6:	21 50       	subi	r18, 0x01	; 1
    20d8:	31 09       	sbc	r19, r1
    20da:	f8 01       	movw	r30, r16
    20dc:	31 83       	std	Z+1, r19	; 0x01
    20de:	20 83       	st	Z, r18
    20e0:	0f 90       	pop	r0
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	82 e2       	ldi	r24, 0x22	; 34
    20e6:	fe 01       	movw	r30, r28
    20e8:	31 96       	adiw	r30, 0x01	; 1
    20ea:	d6 01       	movw	r26, r12
    20ec:	01 90       	ld	r0, Z+
    20ee:	0d 92       	st	X+, r0
    20f0:	8a 95       	dec	r24
    20f2:	e1 f7       	brne	.-8      	; 0x20ec <xSerialPortInitMinimal+0x446>
    20f4:	c6 01       	movw	r24, r12
    20f6:	a2 96       	adiw	r28, 0x22	; 34
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	ff 90       	pop	r15
    210c:	ef 90       	pop	r14
    210e:	df 90       	pop	r13
    2110:	cf 90       	pop	r12
    2112:	bf 90       	pop	r11
    2114:	af 90       	pop	r10
    2116:	9f 90       	pop	r9
    2118:	8f 90       	pop	r8
    211a:	7f 90       	pop	r7
    211c:	08 95       	ret

0000211e <__vector_25>:
#elif defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
ISR( USART0_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART0_RX_vect )

#endif
{
    211e:	1f 92       	push	r1
    2120:	0f 92       	push	r0
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	0f 92       	push	r0
    2126:	11 24       	eor	r1, r1
    2128:	0b b6       	in	r0, 0x3b	; 59
    212a:	0f 92       	push	r0
    212c:	2f 93       	push	r18
    212e:	3f 93       	push	r19
    2130:	4f 93       	push	r20
    2132:	5f 93       	push	r21
    2134:	6f 93       	push	r22
    2136:	7f 93       	push	r23
    2138:	8f 93       	push	r24
    213a:	9f 93       	push	r25
    213c:	af 93       	push	r26
    213e:	bf 93       	push	r27
    2140:	cf 93       	push	r28
    2142:	ef 93       	push	r30
    2144:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR0A & (_BV(FE0)|_BV(DOR0)|_BV(UPE0)) ) )
    2146:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    214a:	8c 71       	andi	r24, 0x1C	; 28
    214c:	71 f0       	breq	.+28     	; 0x216a <__vector_25+0x4c>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR0A & (1<<RXC0) ) erroredByte = UDR0;
    214e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    2152:	88 23       	and	r24, r24
    2154:	0c f0       	brlt	.+2      	; 0x2158 <__vector_25+0x3a>
    2156:	57 c0       	rjmp	.+174    	; 0x2206 <__stack+0x7>
    2158:	a6 ec       	ldi	r26, 0xC6	; 198
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e0 ec       	ldi	r30, 0xC0	; 192
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	8c 91       	ld	r24, X
    2162:	80 81       	ld	r24, Z
    2164:	88 23       	and	r24, r24
    2166:	e4 f3       	brlt	.-8      	; 0x2160 <__vector_25+0x42>
    2168:	4e c0       	rjmp	.+156    	; 0x2206 <__stack+0x7>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR0;
    216a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
//UCSR3B &= ~ ( _BV(RXCIE3) | _BV(RXEN3) | _BV(TXEN3));
if(!port_3)
    216e:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <port_3>
    2172:	81 11       	cpse	r24, r1
    2174:	1d c0       	rjmp	.+58     	; 0x21b0 <__vector_25+0x92>
{
port_0=true;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	80 93 9b 0a 	sts	0x0A9B, r24	; 0x800a9b <port_0>
//timer_1_Init();
stop_1_Timer();
    217c:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <stop_1_Timer>
TCNT1=0;//my cod		
    2180:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    2184:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
frame[indexBuf] = cChar;//my cod
    2188:	e0 91 93 07 	lds	r30, 0x0793	; 0x800793 <indexBuf>
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	ea 54       	subi	r30, 0x4A	; 74
    2190:	f8 4f       	sbci	r31, 0xF8	; 248
    2192:	c0 83       	st	Z, r28
indexBuf++;//my cod
    2194:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <indexBuf>
    2198:	8f 5f       	subi	r24, 0xFF	; 255
    219a:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <indexBuf>
if(indexBuf == portSERIAL_BUFFER_RX ) overflow=1;//my cod
    219e:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <indexBuf>
    21a2:	8f 3f       	cpi	r24, 0xFF	; 255
    21a4:	19 f4       	brne	.+6      	; 0x21ac <__vector_25+0x8e>
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <overflow>
start_1_Timer();//my cod
    21ac:	0e 94 90 25 	call	0x4b20	; 0x4b20 <start_1_Timer>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	0f 92       	push	r0
	{
	    count = buffer->count;
    21b6:	ed e4       	ldi	r30, 0x4D	; 77
    21b8:	f7 e0       	ldi	r31, 0x07	; 7
    21ba:	21 81       	ldd	r18, Z+1	; 0x01
    21bc:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    21be:	0f 90       	pop	r0
    21c0:	0f be       	out	0x3f, r0	; 63
}
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerialPort.xRxedChars) ) )
    21c2:	83 85       	ldd	r24, Z+11	; 0x0b
    21c4:	94 85       	ldd	r25, Z+12	; 0x0c
    21c6:	28 17       	cp	r18, r24
    21c8:	39 07       	cpc	r19, r25
    21ca:	e9 f0       	breq	.+58     	; 0x2206 <__stack+0x7>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    21cc:	ee e4       	ldi	r30, 0x4E	; 78
    21ce:	f7 e0       	ldi	r31, 0x07	; 7

	*buffer->in = data;
    21d0:	a2 81       	ldd	r26, Z+2	; 0x02
    21d2:	b3 81       	ldd	r27, Z+3	; 0x03
    21d4:	cc 93       	st	X, r28

	if (++buffer->in == buffer->end)
    21d6:	82 81       	ldd	r24, Z+2	; 0x02
    21d8:	93 81       	ldd	r25, Z+3	; 0x03
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	93 83       	std	Z+3, r25	; 0x03
    21de:	82 83       	std	Z+2, r24	; 0x02
    21e0:	20 85       	ldd	r18, Z+8	; 0x08
    21e2:	31 85       	ldd	r19, Z+9	; 0x09
    21e4:	82 17       	cp	r24, r18
    21e6:	93 07       	cpc	r25, r19
    21e8:	21 f4       	brne	.+8      	; 0x21f2 <__vector_25+0xd4>
	  buffer->in = buffer->start;
    21ea:	86 81       	ldd	r24, Z+6	; 0x06
    21ec:	97 81       	ldd	r25, Z+7	; 0x07
    21ee:	93 83       	std	Z+3, r25	; 0x03
    21f0:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	0f 92       	push	r0
	{
	    buffer->count++;
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	01 96       	adiw	r24, 0x01	; 1
    21fe:	91 83       	std	Z+1, r25	; 0x01
    2200:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    2202:	0f 90       	pop	r0
    2204:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerialPort.xRxedChars), cChar);
	}
}
    2206:	ff 91       	pop	r31
    2208:	ef 91       	pop	r30
    220a:	cf 91       	pop	r28
    220c:	bf 91       	pop	r27
    220e:	af 91       	pop	r26
    2210:	9f 91       	pop	r25
    2212:	8f 91       	pop	r24
    2214:	7f 91       	pop	r23
    2216:	6f 91       	pop	r22
    2218:	5f 91       	pop	r21
    221a:	4f 91       	pop	r20
    221c:	3f 91       	pop	r19
    221e:	2f 91       	pop	r18
    2220:	0f 90       	pop	r0
    2222:	0b be       	out	0x3b, r0	; 59
    2224:	0f 90       	pop	r0
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	0f 90       	pop	r0
    222a:	1f 90       	pop	r1
    222c:	18 95       	reti

0000222e <__vector_26>:
#elif defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
ISR( USART0_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART0_UDRE_vect )

#endif
{
    222e:	1f 92       	push	r1
    2230:	0f 92       	push	r0
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	0f 92       	push	r0
    2236:	11 24       	eor	r1, r1
    2238:	0b b6       	in	r0, 0x3b	; 59
    223a:	0f 92       	push	r0
    223c:	2f 93       	push	r18
    223e:	8f 93       	push	r24
    2240:	9f 93       	push	r25
    2242:	af 93       	push	r26
    2244:	bf 93       	push	r27
    2246:	ef 93       	push	r30
    2248:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	0f 92       	push	r0
	{
	    count = buffer->count;
    2250:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <xSerialPort+0xd>
    2254:	90 91 5b 07 	lds	r25, 0x075B	; 0x80075b <xSerialPort+0xe>
	}
	portEXIT_CRITICAL();
    2258:	0f 90       	pop	r0
    225a:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerialPort.xCharsForTx) ) )
    225c:	89 2b       	or	r24, r25
    225e:	31 f4       	brne	.+12     	; 0x226c <__vector_26+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt0_Off();
    2260:	e1 ec       	ldi	r30, 0xC1	; 193
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	8f 7d       	andi	r24, 0xDF	; 223
    2268:	80 83       	st	Z, r24
    226a:	1c c0       	rjmp	.+56     	; 0x22a4 <__vector_26+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    226c:	ea e5       	ldi	r30, 0x5A	; 90
    226e:	f7 e0       	ldi	r31, 0x07	; 7

	uint8_t data = *buffer->out;
    2270:	a4 81       	ldd	r26, Z+4	; 0x04
    2272:	b5 81       	ldd	r27, Z+5	; 0x05
    2274:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    2276:	b5 83       	std	Z+5, r27	; 0x05
    2278:	a4 83       	std	Z+4, r26	; 0x04
    227a:	80 85       	ldd	r24, Z+8	; 0x08
    227c:	91 85       	ldd	r25, Z+9	; 0x09
    227e:	a8 17       	cp	r26, r24
    2280:	b9 07       	cpc	r27, r25
    2282:	21 f4       	brne	.+8      	; 0x228c <__vector_26+0x5e>
	  buffer->out = buffer->start;
    2284:	86 81       	ldd	r24, Z+6	; 0x06
    2286:	97 81       	ldd	r25, Z+7	; 0x07
    2288:	95 83       	std	Z+5, r25	; 0x05
    228a:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	0f 92       	push	r0
	{
	    buffer->count--;
    2292:	80 81       	ld	r24, Z
    2294:	91 81       	ldd	r25, Z+1	; 0x01
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    229c:	0f 90       	pop	r0
    229e:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR0 = ringBuffer_Pop( (ringBuffer_t*) &(xSerialPort.xCharsForTx) );
    22a0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    22a4:	ff 91       	pop	r31
    22a6:	ef 91       	pop	r30
    22a8:	bf 91       	pop	r27
    22aa:	af 91       	pop	r26
    22ac:	9f 91       	pop	r25
    22ae:	8f 91       	pop	r24
    22b0:	2f 91       	pop	r18
    22b2:	0f 90       	pop	r0
    22b4:	0b be       	out	0x3b, r0	; 59
    22b6:	0f 90       	pop	r0
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	0f 90       	pop	r0
    22bc:	1f 90       	pop	r1
    22be:	18 95       	reti

000022c0 <__vector_36>:

#if defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

ISR( USART1_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART1_RX_vect )
{
    22c0:	1f 92       	push	r1
    22c2:	0f 92       	push	r0
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	0f 92       	push	r0
    22c8:	11 24       	eor	r1, r1
    22ca:	0b b6       	in	r0, 0x3b	; 59
    22cc:	0f 92       	push	r0
    22ce:	2f 93       	push	r18
    22d0:	3f 93       	push	r19
    22d2:	4f 93       	push	r20
    22d4:	8f 93       	push	r24
    22d6:	9f 93       	push	r25
    22d8:	af 93       	push	r26
    22da:	bf 93       	push	r27
    22dc:	ef 93       	push	r30
    22de:	ff 93       	push	r31
	/* Get status and data from buffer */
     
	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR1A &  (_BV(FE1)|_BV(DOR1)|_BV(UPE1)) ) )
    22e0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    22e4:	8c 71       	andi	r24, 0x1C	; 28
    22e6:	71 f0       	breq	.+28     	; 0x2304 <__vector_36+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR1A & (1<<RXC1) ) erroredByte = UDR1;
    22e8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    22ec:	88 23       	and	r24, r24
    22ee:	0c f0       	brlt	.+2      	; 0x22f2 <__vector_36+0x32>
    22f0:	36 c0       	rjmp	.+108    	; 0x235e <__vector_36+0x9e>
    22f2:	ae ec       	ldi	r26, 0xCE	; 206
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e8 ec       	ldi	r30, 0xC8	; 200
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	8c 91       	ld	r24, X
    22fc:	80 81       	ld	r24, Z
    22fe:	88 23       	and	r24, r24
    2300:	e4 f3       	brlt	.-8      	; 0x22fa <__vector_36+0x3a>
    2302:	2d c0       	rjmp	.+90     	; 0x235e <__vector_36+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR1;
    2304:	40 91 ce 00 	lds	r20, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	0f 92       	push	r0
	{
	    count = buffer->count;
    230e:	e5 eb       	ldi	r30, 0xB5	; 181
    2310:	f8 e0       	ldi	r31, 0x08	; 8
    2312:	21 81       	ldd	r18, Z+1	; 0x01
    2314:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2316:	0f 90       	pop	r0
    2318:	0f be       	out	0x3f, r0	; 63
				
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial1Port.xRxedChars) ) )
    231a:	83 85       	ldd	r24, Z+11	; 0x0b
    231c:	94 85       	ldd	r25, Z+12	; 0x0c
    231e:	28 17       	cp	r18, r24
    2320:	39 07       	cpc	r19, r25
    2322:	e9 f0       	breq	.+58     	; 0x235e <__vector_36+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    2324:	e6 eb       	ldi	r30, 0xB6	; 182
    2326:	f8 e0       	ldi	r31, 0x08	; 8

	*buffer->in = data;
    2328:	a2 81       	ldd	r26, Z+2	; 0x02
    232a:	b3 81       	ldd	r27, Z+3	; 0x03
    232c:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	01 96       	adiw	r24, 0x01	; 1
    2334:	93 83       	std	Z+3, r25	; 0x03
    2336:	82 83       	std	Z+2, r24	; 0x02
    2338:	20 85       	ldd	r18, Z+8	; 0x08
    233a:	31 85       	ldd	r19, Z+9	; 0x09
    233c:	82 17       	cp	r24, r18
    233e:	93 07       	cpc	r25, r19
    2340:	21 f4       	brne	.+8      	; 0x234a <__vector_36+0x8a>
	  buffer->in = buffer->start;
    2342:	86 81       	ldd	r24, Z+6	; 0x06
    2344:	97 81       	ldd	r25, Z+7	; 0x07
    2346:	93 83       	std	Z+3, r25	; 0x03
    2348:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	0f 92       	push	r0
	{
	    buffer->count++;
    2350:	80 81       	ld	r24, Z
    2352:	91 81       	ldd	r25, Z+1	; 0x01
    2354:	01 96       	adiw	r24, 0x01	; 1
    2356:	91 83       	std	Z+1, r25	; 0x01
    2358:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    235a:	0f 90       	pop	r0
    235c:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial1Port.xRxedChars), cChar);
			
	}
}
    235e:	ff 91       	pop	r31
    2360:	ef 91       	pop	r30
    2362:	bf 91       	pop	r27
    2364:	af 91       	pop	r26
    2366:	9f 91       	pop	r25
    2368:	8f 91       	pop	r24
    236a:	4f 91       	pop	r20
    236c:	3f 91       	pop	r19
    236e:	2f 91       	pop	r18
    2370:	0f 90       	pop	r0
    2372:	0b be       	out	0x3b, r0	; 59
    2374:	0f 90       	pop	r0
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	0f 90       	pop	r0
    237a:	1f 90       	pop	r1
    237c:	18 95       	reti

0000237e <__vector_37>:
/*-----------------------------------------------------------*/

ISR( USART1_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART1_UDRE_vect )
{
    237e:	1f 92       	push	r1
    2380:	0f 92       	push	r0
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	0f 92       	push	r0
    2386:	11 24       	eor	r1, r1
    2388:	0b b6       	in	r0, 0x3b	; 59
    238a:	0f 92       	push	r0
    238c:	2f 93       	push	r18
    238e:	8f 93       	push	r24
    2390:	9f 93       	push	r25
    2392:	af 93       	push	r26
    2394:	bf 93       	push	r27
    2396:	ef 93       	push	r30
    2398:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	0f 92       	push	r0
	{
	    count = buffer->count;
    23a0:	80 91 c2 08 	lds	r24, 0x08C2	; 0x8008c2 <xSerial1Port+0xd>
    23a4:	90 91 c3 08 	lds	r25, 0x08C3	; 0x8008c3 <xSerial1Port+0xe>
	}
	portEXIT_CRITICAL();
    23a8:	0f 90       	pop	r0
    23aa:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) ) )
    23ac:	89 2b       	or	r24, r25
    23ae:	31 f4       	brne	.+12     	; 0x23bc <__vector_37+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt1_Off();
    23b0:	e9 ec       	ldi	r30, 0xC9	; 201
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	8f 7d       	andi	r24, 0xDF	; 223
    23b8:	80 83       	st	Z, r24
    23ba:	1c c0       	rjmp	.+56     	; 0x23f4 <__vector_37+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    23bc:	e2 ec       	ldi	r30, 0xC2	; 194
    23be:	f8 e0       	ldi	r31, 0x08	; 8

	uint8_t data = *buffer->out;
    23c0:	a4 81       	ldd	r26, Z+4	; 0x04
    23c2:	b5 81       	ldd	r27, Z+5	; 0x05
    23c4:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    23c6:	b5 83       	std	Z+5, r27	; 0x05
    23c8:	a4 83       	std	Z+4, r26	; 0x04
    23ca:	80 85       	ldd	r24, Z+8	; 0x08
    23cc:	91 85       	ldd	r25, Z+9	; 0x09
    23ce:	a8 17       	cp	r26, r24
    23d0:	b9 07       	cpc	r27, r25
    23d2:	21 f4       	brne	.+8      	; 0x23dc <__vector_37+0x5e>
	  buffer->out = buffer->start;
    23d4:	86 81       	ldd	r24, Z+6	; 0x06
    23d6:	97 81       	ldd	r25, Z+7	; 0x07
    23d8:	95 83       	std	Z+5, r25	; 0x05
    23da:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	0f 92       	push	r0
	{
	    buffer->count--;
    23e2:	80 81       	ld	r24, Z
    23e4:	91 81       	ldd	r25, Z+1	; 0x01
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	91 83       	std	Z+1, r25	; 0x01
    23ea:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    23ec:	0f 90       	pop	r0
    23ee:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR1 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) );
    23f0:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
	}
}
    23f4:	ff 91       	pop	r31
    23f6:	ef 91       	pop	r30
    23f8:	bf 91       	pop	r27
    23fa:	af 91       	pop	r26
    23fc:	9f 91       	pop	r25
    23fe:	8f 91       	pop	r24
    2400:	2f 91       	pop	r18
    2402:	0f 90       	pop	r0
    2404:	0b be       	out	0x3b, r0	; 59
    2406:	0f 90       	pop	r0
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	0f 90       	pop	r0
    240c:	1f 90       	pop	r1
    240e:	18 95       	reti

00002410 <__vector_51>:

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

ISR( USART2_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART2_RX_vect )
{
    2410:	1f 92       	push	r1
    2412:	0f 92       	push	r0
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	0f 92       	push	r0
    2418:	11 24       	eor	r1, r1
    241a:	0b b6       	in	r0, 0x3b	; 59
    241c:	0f 92       	push	r0
    241e:	2f 93       	push	r18
    2420:	3f 93       	push	r19
    2422:	4f 93       	push	r20
    2424:	8f 93       	push	r24
    2426:	9f 93       	push	r25
    2428:	af 93       	push	r26
    242a:	bf 93       	push	r27
    242c:	ef 93       	push	r30
    242e:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR2A & (_BV(FE2)|_BV(DOR2)|_BV(UPE2)) ) )
    2430:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    2434:	8c 71       	andi	r24, 0x1C	; 28
    2436:	71 f0       	breq	.+28     	; 0x2454 <__vector_51+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR2A & (1<<RXC2) ) erroredByte = UDR2;
    2438:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    243c:	88 23       	and	r24, r24
    243e:	0c f0       	brlt	.+2      	; 0x2442 <__vector_51+0x32>
    2440:	36 c0       	rjmp	.+108    	; 0x24ae <__vector_51+0x9e>
    2442:	a6 ed       	ldi	r26, 0xD6	; 214
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e0 ed       	ldi	r30, 0xD0	; 208
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	8c 91       	ld	r24, X
    244c:	80 81       	ld	r24, Z
    244e:	88 23       	and	r24, r24
    2450:	e4 f3       	brlt	.-8      	; 0x244a <__vector_51+0x3a>
    2452:	2d c0       	rjmp	.+90     	; 0x24ae <__vector_51+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR2;
    2454:	40 91 d6 00 	lds	r20, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	0f 92       	push	r0
	{
	    count = buffer->count;
    245e:	e1 e7       	ldi	r30, 0x71	; 113
    2460:	f7 e0       	ldi	r31, 0x07	; 7
    2462:	21 81       	ldd	r18, Z+1	; 0x01
    2464:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2466:	0f 90       	pop	r0
    2468:	0f be       	out	0x3f, r0	; 63

		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial2Port.xRxedChars) ) )
    246a:	83 85       	ldd	r24, Z+11	; 0x0b
    246c:	94 85       	ldd	r25, Z+12	; 0x0c
    246e:	28 17       	cp	r18, r24
    2470:	39 07       	cpc	r19, r25
    2472:	e9 f0       	breq	.+58     	; 0x24ae <__vector_51+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    2474:	e2 e7       	ldi	r30, 0x72	; 114
    2476:	f7 e0       	ldi	r31, 0x07	; 7

	*buffer->in = data;
    2478:	a2 81       	ldd	r26, Z+2	; 0x02
    247a:	b3 81       	ldd	r27, Z+3	; 0x03
    247c:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	93 81       	ldd	r25, Z+3	; 0x03
    2482:	01 96       	adiw	r24, 0x01	; 1
    2484:	93 83       	std	Z+3, r25	; 0x03
    2486:	82 83       	std	Z+2, r24	; 0x02
    2488:	20 85       	ldd	r18, Z+8	; 0x08
    248a:	31 85       	ldd	r19, Z+9	; 0x09
    248c:	82 17       	cp	r24, r18
    248e:	93 07       	cpc	r25, r19
    2490:	21 f4       	brne	.+8      	; 0x249a <__vector_51+0x8a>
	  buffer->in = buffer->start;
    2492:	86 81       	ldd	r24, Z+6	; 0x06
    2494:	97 81       	ldd	r25, Z+7	; 0x07
    2496:	93 83       	std	Z+3, r25	; 0x03
    2498:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	0f 92       	push	r0
	{
	    buffer->count++;
    24a0:	80 81       	ld	r24, Z
    24a2:	91 81       	ldd	r25, Z+1	; 0x01
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    24aa:	0f 90       	pop	r0
    24ac:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial2Port.xRxedChars), cChar);
	}
}
    24ae:	ff 91       	pop	r31
    24b0:	ef 91       	pop	r30
    24b2:	bf 91       	pop	r27
    24b4:	af 91       	pop	r26
    24b6:	9f 91       	pop	r25
    24b8:	8f 91       	pop	r24
    24ba:	4f 91       	pop	r20
    24bc:	3f 91       	pop	r19
    24be:	2f 91       	pop	r18
    24c0:	0f 90       	pop	r0
    24c2:	0b be       	out	0x3b, r0	; 59
    24c4:	0f 90       	pop	r0
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	0f 90       	pop	r0
    24ca:	1f 90       	pop	r1
    24cc:	18 95       	reti

000024ce <__vector_52>:
/*-----------------------------------------------------------*/

ISR( USART2_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART2_UDRE_vect )
{
    24ce:	1f 92       	push	r1
    24d0:	0f 92       	push	r0
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	0f 92       	push	r0
    24d6:	11 24       	eor	r1, r1
    24d8:	0b b6       	in	r0, 0x3b	; 59
    24da:	0f 92       	push	r0
    24dc:	2f 93       	push	r18
    24de:	8f 93       	push	r24
    24e0:	9f 93       	push	r25
    24e2:	af 93       	push	r26
    24e4:	bf 93       	push	r27
    24e6:	ef 93       	push	r30
    24e8:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	0f 92       	push	r0
	{
	    count = buffer->count;
    24f0:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <xSerial2Port+0xd>
    24f4:	90 91 7f 07 	lds	r25, 0x077F	; 0x80077f <xSerial2Port+0xe>
	}
	portEXIT_CRITICAL();
    24f8:	0f 90       	pop	r0
    24fa:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) ) )
    24fc:	89 2b       	or	r24, r25
    24fe:	31 f4       	brne	.+12     	; 0x250c <__vector_52+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt2_Off();
    2500:	e1 ed       	ldi	r30, 0xD1	; 209
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	8f 7d       	andi	r24, 0xDF	; 223
    2508:	80 83       	st	Z, r24
    250a:	1c c0       	rjmp	.+56     	; 0x2544 <__vector_52+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    250c:	ee e7       	ldi	r30, 0x7E	; 126
    250e:	f7 e0       	ldi	r31, 0x07	; 7

	uint8_t data = *buffer->out;
    2510:	a4 81       	ldd	r26, Z+4	; 0x04
    2512:	b5 81       	ldd	r27, Z+5	; 0x05
    2514:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    2516:	b5 83       	std	Z+5, r27	; 0x05
    2518:	a4 83       	std	Z+4, r26	; 0x04
    251a:	80 85       	ldd	r24, Z+8	; 0x08
    251c:	91 85       	ldd	r25, Z+9	; 0x09
    251e:	a8 17       	cp	r26, r24
    2520:	b9 07       	cpc	r27, r25
    2522:	21 f4       	brne	.+8      	; 0x252c <__vector_52+0x5e>
	  buffer->out = buffer->start;
    2524:	86 81       	ldd	r24, Z+6	; 0x06
    2526:	97 81       	ldd	r25, Z+7	; 0x07
    2528:	95 83       	std	Z+5, r25	; 0x05
    252a:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	0f 92       	push	r0
	{
	    buffer->count--;
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	91 83       	std	Z+1, r25	; 0x01
    253a:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    253c:	0f 90       	pop	r0
    253e:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR2 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) );
    2540:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	}
}
    2544:	ff 91       	pop	r31
    2546:	ef 91       	pop	r30
    2548:	bf 91       	pop	r27
    254a:	af 91       	pop	r26
    254c:	9f 91       	pop	r25
    254e:	8f 91       	pop	r24
    2550:	2f 91       	pop	r18
    2552:	0f 90       	pop	r0
    2554:	0b be       	out	0x3b, r0	; 59
    2556:	0f 90       	pop	r0
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	0f 90       	pop	r0
    255c:	1f 90       	pop	r1
    255e:	18 95       	reti

00002560 <__vector_54>:
/*-----------------------------------------------------------*/

ISR( USART3_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART3_RX_vect )
{
    2560:	1f 92       	push	r1
    2562:	0f 92       	push	r0
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	0f 92       	push	r0
    2568:	11 24       	eor	r1, r1
    256a:	0b b6       	in	r0, 0x3b	; 59
    256c:	0f 92       	push	r0
    256e:	2f 93       	push	r18
    2570:	3f 93       	push	r19
    2572:	4f 93       	push	r20
    2574:	5f 93       	push	r21
    2576:	6f 93       	push	r22
    2578:	7f 93       	push	r23
    257a:	8f 93       	push	r24
    257c:	9f 93       	push	r25
    257e:	af 93       	push	r26
    2580:	bf 93       	push	r27
    2582:	cf 93       	push	r28
    2584:	ef 93       	push	r30
    2586:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR3A & (_BV(FE3)|_BV(DOR3)|_BV(UPE3)) ) )
    2588:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    258c:	8c 71       	andi	r24, 0x1C	; 28
    258e:	71 f0       	breq	.+28     	; 0x25ac <__vector_54+0x4c>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR3A & (1<<RXC3) ) erroredByte = UDR3;
    2590:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2594:	88 23       	and	r24, r24
    2596:	0c f0       	brlt	.+2      	; 0x259a <__vector_54+0x3a>
    2598:	57 c0       	rjmp	.+174    	; 0x2648 <__vector_54+0xe8>
    259a:	a6 e3       	ldi	r26, 0x36	; 54
    259c:	b1 e0       	ldi	r27, 0x01	; 1
    259e:	e0 e3       	ldi	r30, 0x30	; 48
    25a0:	f1 e0       	ldi	r31, 0x01	; 1
    25a2:	8c 91       	ld	r24, X
    25a4:	80 81       	ld	r24, Z
    25a6:	88 23       	and	r24, r24
    25a8:	e4 f3       	brlt	.-8      	; 0x25a2 <__vector_54+0x42>
    25aa:	4e c0       	rjmp	.+156    	; 0x2648 <__vector_54+0xe8>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR3;
    25ac:	c0 91 36 01 	lds	r28, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		
	//xSerialxPrintf(&xSerial3Port,"interrupt\r\n");	
if(!port_0)
    25b0:	80 91 9b 0a 	lds	r24, 0x0A9B	; 0x800a9b <port_0>
    25b4:	81 11       	cpse	r24, r1
    25b6:	1d c0       	rjmp	.+58     	; 0x25f2 <__vector_54+0x92>
{			//xSerialxPrintf(&xSerial3Port,"port_3\r\n");
			port_3=true;
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	80 93 f5 08 	sts	0x08F5, r24	; 0x8008f5 <port_3>
			//timer_1_Init();
			stop_1_Timer();
    25be:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <stop_1_Timer>
			TCNT1=0;//my cod
    25c2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    25c6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
			frame[indexBuf] = cChar;//my cod
    25ca:	e0 91 93 07 	lds	r30, 0x0793	; 0x800793 <indexBuf>
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	ea 54       	subi	r30, 0x4A	; 74
    25d2:	f8 4f       	sbci	r31, 0xF8	; 248
    25d4:	c0 83       	st	Z, r28
			indexBuf++;//my cod
    25d6:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <indexBuf>
    25da:	8f 5f       	subi	r24, 0xFF	; 255
    25dc:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <indexBuf>
			if(indexBuf == portSERIAL_BUFFER_RX ) overflow=1;//my cod
    25e0:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <indexBuf>
    25e4:	8f 3f       	cpi	r24, 0xFF	; 255
    25e6:	19 f4       	brne	.+6      	; 0x25ee <__vector_54+0x8e>
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <overflow>
			start_1_Timer();//my cod
    25ee:	0e 94 90 25 	call	0x4b20	; 0x4b20 <start_1_Timer>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	0f 92       	push	r0
	{
	    count = buffer->count;
    25f8:	e4 e9       	ldi	r30, 0x94	; 148
    25fa:	f7 e0       	ldi	r31, 0x07	; 7
    25fc:	21 81       	ldd	r18, Z+1	; 0x01
    25fe:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2600:	0f 90       	pop	r0
    2602:	0f be       	out	0x3f, r0	; 63
}
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial3Port.xRxedChars) ) )
    2604:	83 85       	ldd	r24, Z+11	; 0x0b
    2606:	94 85       	ldd	r25, Z+12	; 0x0c
    2608:	28 17       	cp	r18, r24
    260a:	39 07       	cpc	r19, r25
    260c:	e9 f0       	breq	.+58     	; 0x2648 <__vector_54+0xe8>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    260e:	e5 e9       	ldi	r30, 0x95	; 149
    2610:	f7 e0       	ldi	r31, 0x07	; 7

	*buffer->in = data;
    2612:	a2 81       	ldd	r26, Z+2	; 0x02
    2614:	b3 81       	ldd	r27, Z+3	; 0x03
    2616:	cc 93       	st	X, r28

	if (++buffer->in == buffer->end)
    2618:	82 81       	ldd	r24, Z+2	; 0x02
    261a:	93 81       	ldd	r25, Z+3	; 0x03
    261c:	01 96       	adiw	r24, 0x01	; 1
    261e:	93 83       	std	Z+3, r25	; 0x03
    2620:	82 83       	std	Z+2, r24	; 0x02
    2622:	20 85       	ldd	r18, Z+8	; 0x08
    2624:	31 85       	ldd	r19, Z+9	; 0x09
    2626:	82 17       	cp	r24, r18
    2628:	93 07       	cpc	r25, r19
    262a:	21 f4       	brne	.+8      	; 0x2634 <__vector_54+0xd4>
	  buffer->in = buffer->start;
    262c:	86 81       	ldd	r24, Z+6	; 0x06
    262e:	97 81       	ldd	r25, Z+7	; 0x07
    2630:	93 83       	std	Z+3, r25	; 0x03
    2632:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	0f 92       	push	r0
	{
	    buffer->count++;
    263a:	80 81       	ld	r24, Z
    263c:	91 81       	ldd	r25, Z+1	; 0x01
    263e:	01 96       	adiw	r24, 0x01	; 1
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    2644:	0f 90       	pop	r0
    2646:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial3Port.xRxedChars), cChar);
	}
}
    2648:	ff 91       	pop	r31
    264a:	ef 91       	pop	r30
    264c:	cf 91       	pop	r28
    264e:	bf 91       	pop	r27
    2650:	af 91       	pop	r26
    2652:	9f 91       	pop	r25
    2654:	8f 91       	pop	r24
    2656:	7f 91       	pop	r23
    2658:	6f 91       	pop	r22
    265a:	5f 91       	pop	r21
    265c:	4f 91       	pop	r20
    265e:	3f 91       	pop	r19
    2660:	2f 91       	pop	r18
    2662:	0f 90       	pop	r0
    2664:	0b be       	out	0x3b, r0	; 59
    2666:	0f 90       	pop	r0
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	0f 90       	pop	r0
    266c:	1f 90       	pop	r1
    266e:	18 95       	reti

00002670 <__vector_55>:
/*-----------------------------------------------------------*/

ISR( USART3_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART3_UDRE_vect )
{
    2670:	1f 92       	push	r1
    2672:	0f 92       	push	r0
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	0f 92       	push	r0
    2678:	11 24       	eor	r1, r1
    267a:	0b b6       	in	r0, 0x3b	; 59
    267c:	0f 92       	push	r0
    267e:	2f 93       	push	r18
    2680:	8f 93       	push	r24
    2682:	9f 93       	push	r25
    2684:	af 93       	push	r26
    2686:	bf 93       	push	r27
    2688:	ef 93       	push	r30
    268a:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	0f 92       	push	r0
	{
	    count = buffer->count;
    2692:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <xSerial3Port+0xd>
    2696:	90 91 a2 07 	lds	r25, 0x07A2	; 0x8007a2 <xSerial3Port+0xe>
	}
	portEXIT_CRITICAL();
    269a:	0f 90       	pop	r0
    269c:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) ) )
    269e:	89 2b       	or	r24, r25
    26a0:	31 f4       	brne	.+12     	; 0x26ae <__vector_55+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt3_Off();
    26a2:	e1 e3       	ldi	r30, 0x31	; 49
    26a4:	f1 e0       	ldi	r31, 0x01	; 1
    26a6:	80 81       	ld	r24, Z
    26a8:	8f 7d       	andi	r24, 0xDF	; 223
    26aa:	80 83       	st	Z, r24
    26ac:	1c c0       	rjmp	.+56     	; 0x26e6 <__vector_55+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    26ae:	e1 ea       	ldi	r30, 0xA1	; 161
    26b0:	f7 e0       	ldi	r31, 0x07	; 7

	uint8_t data = *buffer->out;
    26b2:	a4 81       	ldd	r26, Z+4	; 0x04
    26b4:	b5 81       	ldd	r27, Z+5	; 0x05
    26b6:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    26b8:	b5 83       	std	Z+5, r27	; 0x05
    26ba:	a4 83       	std	Z+4, r26	; 0x04
    26bc:	80 85       	ldd	r24, Z+8	; 0x08
    26be:	91 85       	ldd	r25, Z+9	; 0x09
    26c0:	a8 17       	cp	r26, r24
    26c2:	b9 07       	cpc	r27, r25
    26c4:	21 f4       	brne	.+8      	; 0x26ce <__vector_55+0x5e>
	  buffer->out = buffer->start;
    26c6:	86 81       	ldd	r24, Z+6	; 0x06
    26c8:	97 81       	ldd	r25, Z+7	; 0x07
    26ca:	95 83       	std	Z+5, r25	; 0x05
    26cc:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	0f 92       	push	r0
	{
	    buffer->count--;
    26d4:	80 81       	ld	r24, Z
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    26de:	0f 90       	pop	r0
    26e0:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR3 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) );
    26e2:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	}
}
    26e6:	ff 91       	pop	r31
    26e8:	ef 91       	pop	r30
    26ea:	bf 91       	pop	r27
    26ec:	af 91       	pop	r26
    26ee:	9f 91       	pop	r25
    26f0:	8f 91       	pop	r24
    26f2:	2f 91       	pop	r18
    26f4:	0f 90       	pop	r0
    26f6:	0b be       	out	0x3b, r0	; 59
    26f8:	0f 90       	pop	r0
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	0f 90       	pop	r0
    26fe:	1f 90       	pop	r1
    2700:	18 95       	reti

00002702 <spiBegin>:
	SPCR |= _BV(SPIE);
}

void spiDetachInterrupt(void)
{
	SPCR &= ~_BV(SPIE);
    2702:	0f 93       	push	r16
    2704:	81 30       	cpi	r24, 0x01	; 1
    2706:	71 f0       	breq	.+28     	; 0x2724 <spiBegin+0x22>
    2708:	18 f0       	brcs	.+6      	; 0x2710 <spiBegin+0xe>
    270a:	82 30       	cpi	r24, 0x02	; 2
    270c:	a9 f0       	breq	.+42     	; 0x2738 <spiBegin+0x36>
    270e:	26 c0       	rjmp	.+76     	; 0x275c <spiBegin+0x5a>
    2710:	84 b1       	in	r24, 0x04	; 4
    2712:	87 60       	ori	r24, 0x07	; 7
    2714:	84 b9       	out	0x04, r24	; 4
    2716:	23 98       	cbi	0x04, 3	; 4
    2718:	85 b1       	in	r24, 0x05	; 5
    271a:	89 60       	ori	r24, 0x09	; 9
    271c:	85 b9       	out	0x05, r24	; 5
    271e:	24 9a       	sbi	0x04, 4	; 4
    2720:	2c 9a       	sbi	0x05, 4	; 5
    2722:	23 c0       	rjmp	.+70     	; 0x276a <spiBegin+0x68>
    2724:	84 b1       	in	r24, 0x04	; 4
    2726:	87 60       	ori	r24, 0x07	; 7
    2728:	84 b9       	out	0x04, r24	; 4
    272a:	23 98       	cbi	0x04, 3	; 4
    272c:	85 b1       	in	r24, 0x05	; 5
    272e:	89 60       	ori	r24, 0x09	; 9
    2730:	85 b9       	out	0x05, r24	; 5
    2732:	9d 9a       	sbi	0x13, 5	; 19
    2734:	a5 9a       	sbi	0x14, 5	; 20
    2736:	19 c0       	rjmp	.+50     	; 0x276a <spiBegin+0x68>
    2738:	84 b1       	in	r24, 0x04	; 4
    273a:	87 60       	ori	r24, 0x07	; 7
    273c:	84 b9       	out	0x04, r24	; 4
    273e:	23 98       	cbi	0x04, 3	; 4
    2740:	85 b1       	in	r24, 0x05	; 5
    2742:	89 60       	ori	r24, 0x09	; 9
    2744:	85 b9       	out	0x05, r24	; 5
    2746:	e1 e0       	ldi	r30, 0x01	; 1
    2748:	f1 e0       	ldi	r31, 0x01	; 1
    274a:	80 81       	ld	r24, Z
    274c:	80 62       	ori	r24, 0x20	; 32
    274e:	80 83       	st	Z, r24
    2750:	e2 e0       	ldi	r30, 0x02	; 2
    2752:	f1 e0       	ldi	r31, 0x01	; 1
    2754:	80 81       	ld	r24, Z
    2756:	80 62       	ori	r24, 0x20	; 32
    2758:	80 83       	st	Z, r24
    275a:	07 c0       	rjmp	.+14     	; 0x276a <spiBegin+0x68>
    275c:	84 b1       	in	r24, 0x04	; 4
    275e:	87 60       	ori	r24, 0x07	; 7
    2760:	84 b9       	out	0x04, r24	; 4
    2762:	23 98       	cbi	0x04, 3	; 4
    2764:	85 b1       	in	r24, 0x05	; 5
    2766:	89 60       	ori	r24, 0x09	; 9
    2768:	85 b9       	out	0x05, r24	; 5
    276a:	8c b5       	in	r24, 0x2c	; 44
    276c:	80 65       	ori	r24, 0x50	; 80
    276e:	8c bd       	out	0x2c, r24	; 44
    2770:	8d b5       	in	r24, 0x2d	; 45
    2772:	8e b5       	in	r24, 0x2e	; 46
    2774:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <__data_end>
    2778:	90 91 5f 06 	lds	r25, 0x065F	; 0x80065f <__data_end+0x1>
    277c:	89 2b       	or	r24, r25
    277e:	89 f4       	brne	.+34     	; 0x27a2 <spiBegin+0xa0>
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	0e 94 75 0a 	call	0x14ea	; 0x14ea <xQueueCreateMutex>
    2786:	90 93 5f 06 	sts	0x065F, r25	; 0x80065f <__data_end+0x1>
    278a:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <__data_end>
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	41 f0       	breq	.+16     	; 0x27a2 <spiBegin+0xa0>
    2792:	00 e0       	ldi	r16, 0x00	; 0
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	a9 01       	movw	r20, r18
    279a:	60 e0       	ldi	r22, 0x00	; 0
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    27a2:	0f 91       	pop	r16
    27a4:	08 95       	ret

000027a6 <spiSetClockDivider>:
    27a6:	9c b5       	in	r25, 0x2c	; 44
    27a8:	9c 7f       	andi	r25, 0xFC	; 252
    27aa:	28 2f       	mov	r18, r24
    27ac:	23 70       	andi	r18, 0x03	; 3
    27ae:	92 2b       	or	r25, r18
    27b0:	9c bd       	out	0x2c, r25	; 44
    27b2:	9d b5       	in	r25, 0x2d	; 45
    27b4:	82 fb       	bst	r24, 2
    27b6:	88 27       	eor	r24, r24
    27b8:	80 f9       	bld	r24, 0
    27ba:	9e 7f       	andi	r25, 0xFE	; 254
    27bc:	89 2b       	or	r24, r25
    27be:	8d bd       	out	0x2d, r24	; 45
    27c0:	08 95       	ret

000027c2 <spiSetBitOrder>:
    27c2:	81 11       	cpse	r24, r1
    27c4:	04 c0       	rjmp	.+8      	; 0x27ce <spiSetBitOrder+0xc>
    27c6:	8c b5       	in	r24, 0x2c	; 44
    27c8:	80 62       	ori	r24, 0x20	; 32
    27ca:	8c bd       	out	0x2c, r24	; 44
    27cc:	08 95       	ret
    27ce:	8c b5       	in	r24, 0x2c	; 44
    27d0:	8f 7d       	andi	r24, 0xDF	; 223
    27d2:	8c bd       	out	0x2c, r24	; 44
    27d4:	08 95       	ret

000027d6 <spiSetDataMode>:
    27d6:	9c b5       	in	r25, 0x2c	; 44
    27d8:	93 7f       	andi	r25, 0xF3	; 243
    27da:	89 2b       	or	r24, r25
    27dc:	8c bd       	out	0x2c, r24	; 44
    27de:	08 95       	ret

000027e0 <spiSelect>:
/*-----------------------------------------------------------------------*/
/* Select the SPI device                                    */
/*-----------------------------------------------------------------------*/

uint8_t spiSelect(SPI_SLAVE_SELECT SS_pin)	/* 1:Successful, 0:Timeout */
{
    27e0:	cf 93       	push	r28
    27e2:	c8 2f       	mov	r28, r24

	if( (xSemaphoreTake( xSPISemaphore, (SPI_TIMEOUT / portTICK_PERIOD_MS )) == pdTRUE ) )
    27e4:	48 ee       	ldi	r20, 0xE8	; 232
    27e6:	53 e0       	ldi	r21, 0x03	; 3
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	70 e0       	ldi	r23, 0x00	; 0
    27ec:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <__data_end>
    27f0:	90 91 5f 06 	lds	r25, 0x065F	; 0x80065f <__data_end+0x1>
    27f4:	0e 94 8f 0b 	call	0x171e	; 0x171e <xQueueSemaphoreTake>
    27f8:	81 30       	cpi	r24, 0x01	; 1
    27fa:	b1 f4       	brne	.+44     	; 0x2828 <spiSelect+0x48>
	{

		switch( SS_pin )
    27fc:	c1 30       	cpi	r28, 0x01	; 1
    27fe:	39 f0       	breq	.+14     	; 0x280e <spiSelect+0x2e>
    2800:	18 f0       	brcs	.+6      	; 0x2808 <spiSelect+0x28>
    2802:	c2 30       	cpi	r28, 0x02	; 2
    2804:	39 f0       	breq	.+14     	; 0x2814 <spiSelect+0x34>
    2806:	0d c0       	rjmp	.+26     	; 0x2822 <spiSelect+0x42>
		{
		case Wiznet:	// added for EtherMega Wiznet 5100/5200 support
#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
			W5100_SEN_ENABLE(1); // Enable SEN, to get on the SPI bus. PORT D7
#endif
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
    2808:	2c 98       	cbi	0x05, 4	; 5
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    280a:	81 e0       	ldi	r24, 0x01	; 1
		case Wiznet:	// added for EtherMega Wiznet 5100/5200 support
#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
			W5100_SEN_ENABLE(1); // Enable SEN, to get on the SPI bus. PORT D7
#endif
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
			break;
    280c:	0e c0       	rjmp	.+28     	; 0x282a <spiSelect+0x4a>

		case SDCard:	// added for  SD Card support
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
    280e:	a5 98       	cbi	0x14, 5	; 20
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    2810:	81 e0       	ldi	r24, 0x01	; 1
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
			break;

		case SDCard:	// added for  SD Card support
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
			break;
    2812:	0b c0       	rjmp	.+22     	; 0x282a <spiSelect+0x4a>

		case Gameduino2:// added for Gameduino2 using FTDI FT800
			SPI_PORT_SS_G2 &= ~SPI_BIT_SS_G2; // Pull SS low to select the Gameduino 2.
    2814:	e2 e0       	ldi	r30, 0x02	; 2
    2816:	f1 e0       	ldi	r31, 0x01	; 1
    2818:	80 81       	ld	r24, Z
    281a:	8f 7d       	andi	r24, 0xDF	; 223
    281c:	80 83       	st	Z, r24
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    281e:	81 e0       	ldi	r24, 0x01	; 1
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
			break;

		case Gameduino2:// added for Gameduino2 using FTDI FT800
			SPI_PORT_SS_G2 &= ~SPI_BIT_SS_G2; // Pull SS low to select the Gameduino 2.
			break;
    2820:	04 c0       	rjmp	.+8      	; 0x282a <spiSelect+0x4a>
			break;
#endif

		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
    2822:	28 98       	cbi	0x05, 0	; 5
			break;
		}
		return 1;		// OK /
    2824:	81 e0       	ldi	r24, 0x01	; 1
#endif

		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
    2826:	01 c0       	rjmp	.+2      	; 0x282a <spiSelect+0x4a>
		}
		return 1;		// OK /
	}
	else
		return 0;		// Timeout
    2828:	80 e0       	ldi	r24, 0x00	; 0
}
    282a:	cf 91       	pop	r28
    282c:	08 95       	ret

0000282e <spiDeselect>:
/*-----------------------------------------------------------------------*/
/* Deselect the SPI device                                 */
/*-----------------------------------------------------------------------*/

void spiDeselect(SPI_SLAVE_SELECT SS_pin)
{
    282e:	0f 93       	push	r16
	// Pull SS high to Deselect the card.
	switch( SS_pin )
    2830:	81 30       	cpi	r24, 0x01	; 1
    2832:	31 f0       	breq	.+12     	; 0x2840 <spiDeselect+0x12>
    2834:	18 f0       	brcs	.+6      	; 0x283c <spiDeselect+0xe>
    2836:	82 30       	cpi	r24, 0x02	; 2
    2838:	29 f0       	breq	.+10     	; 0x2844 <spiDeselect+0x16>
    283a:	0a c0       	rjmp	.+20     	; 0x2850 <spiDeselect+0x22>
	{
	case Wiznet:		// added for EtherMega Wiznet 5100/5200 support
		SPI_PORT |= SPI_BIT_SS_WIZNET;
    283c:	2c 9a       	sbi	0x05, 4	; 5

#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
		W5100_SEN_ENABLE(0); // Disable SEN, to get off the SPI bus. PORT D7
#endif
		break;
    283e:	09 c0       	rjmp	.+18     	; 0x2852 <spiDeselect+0x24>

	case SDCard:		// added for  SD Card support
		SPI_PORT_SS_SD |= SPI_BIT_SS_SD;	// Pull SS high to deselect the uSD card.
    2840:	a5 9a       	sbi	0x14, 5	; 20
		break;
    2842:	07 c0       	rjmp	.+14     	; 0x2852 <spiDeselect+0x24>

	case Gameduino2:	// added for Gameduino 2 using FTDI FT800
		SPI_PORT_SS_G2 |= SPI_BIT_SS_G2;	// Pull SS high to deselect the Gameduino 2.
    2844:	e2 e0       	ldi	r30, 0x02	; 2
    2846:	f1 e0       	ldi	r31, 0x01	; 1
    2848:	80 81       	ld	r24, Z
    284a:	80 62       	ori	r24, 0x20	; 32
    284c:	80 83       	st	Z, r24
		break;
    284e:	01 c0       	rjmp	.+2      	; 0x2852 <spiDeselect+0x24>
		break;
#endif

	case Default:		// default SS line for Arduino Uno
	default:
		SPI_PORT |= SPI_BIT_SS;
    2850:	28 9a       	sbi	0x05, 0	; 5
		break;
	}

	xSemaphoreGive( xSPISemaphore );	/* Free FreeRTOS semaphore to allow other SPI access */
    2852:	00 e0       	ldi	r16, 0x00	; 0
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	a9 01       	movw	r20, r18
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <__data_end>
    2862:	90 91 5f 06 	lds	r25, 0x065F	; 0x80065f <__data_end+0x1>
    2866:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
}
    286a:	0f 91       	pop	r16
    286c:	08 95       	ret

0000286e <spiTransfer>:



uint8_t spiTransfer(uint8_t data)
{
    286e:	28 2f       	mov	r18, r24
	// That is NOT done by this function..., because...
	// Some devices need to have their SS held low across multiple transfer calls.
	// Using spiSelect (SS_pin);

	// If the SPI module has not been enabled yet, then return with nothing.
	if( !(SPCR & _BV(SPE)) ) return 0;
    2870:	9c b5       	in	r25, 0x2c	; 44
    2872:	89 2f       	mov	r24, r25
    2874:	80 74       	andi	r24, 0x40	; 64
    2876:	96 ff       	sbrs	r25, 6
    2878:	17 c0       	rjmp	.+46     	; 0x28a8 <spiTransfer+0x3a>

	// The SPI module is enabled, but it is in slave mode, so we can not
	// transmit the byte. This can happen if SSbar is an input and it went low.
	// We will try to recover by setting the MSTR bit.
	if( !(SPCR & _BV(MSTR)) )
    287a:	0c b4       	in	r0, 0x2c	; 44
    287c:	04 fc       	sbrc	r0, 4
    287e:	08 c0       	rjmp	.+16     	; 0x2890 <spiTransfer+0x22>
		{
			SPCR |= _BV(MSTR);
    2880:	8c b5       	in	r24, 0x2c	; 44
    2882:	80 61       	ori	r24, 0x10	; 16
    2884:	8c bd       	out	0x2c, r24	; 44
			if( !(SPCR & _BV(MSTR)) ) return 0;
    2886:	9c b5       	in	r25, 0x2c	; 44
    2888:	89 2f       	mov	r24, r25
    288a:	80 71       	andi	r24, 0x10	; 16
    288c:	94 ff       	sbrs	r25, 4
    288e:	0c c0       	rjmp	.+24     	; 0x28a8 <spiTransfer+0x3a>
		}

	SPDR = data; 	// Begin transmission
    2890:	2e bd       	out	0x2e, r18	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop from iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
	__asm__ __volatile__("nop");
    2892:	00 00       	nop

	while( !(SPSR & _BV(SPIF)) )
    2894:	05 c0       	rjmp	.+10     	; 0x28a0 <spiTransfer+0x32>
	{
		if( !(SPCR & _BV(MSTR)) ) return 0;
    2896:	9c b5       	in	r25, 0x2c	; 44
    2898:	89 2f       	mov	r24, r25
    289a:	80 71       	andi	r24, 0x10	; 16
    289c:	94 ff       	sbrs	r25, 4
    289e:	04 c0       	rjmp	.+8      	; 0x28a8 <spiTransfer+0x3a>
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
	__asm__ __volatile__("nop");

	while( !(SPSR & _BV(SPIF)) )
    28a0:	0d b4       	in	r0, 0x2d	; 45
    28a2:	07 fe       	sbrs	r0, 7
    28a4:	f8 cf       	rjmp	.-16     	; 0x2896 <spiTransfer+0x28>
		if( !(SPCR & _BV(MSTR)) ) return 0;
			// The SPI module has left master mode, so return.
			// Otherwise, this will be an infinite loop.
	}

	return SPDR;
    28a6:	8e b5       	in	r24, 0x2e	; 46

	// Make sure you pull slave select high to indicate end of transfer.
	// That is NOT done by this function.
	// Using spiDeselect (SS_pin);
}
    28a8:	08 95       	ret

000028aa <prvResetNextTaskUnblockTime>:
    28aa:	e0 91 96 06 	lds	r30, 0x0696	; 0x800696 <pxDelayedTaskList>
    28ae:	f0 91 97 06 	lds	r31, 0x0697	; 0x800697 <pxDelayedTaskList+0x1>
    28b2:	80 81       	ld	r24, Z
    28b4:	81 11       	cpse	r24, r1
    28b6:	0c c0       	rjmp	.+24     	; 0x28d0 <prvResetNextTaskUnblockTime+0x26>
    28b8:	8f ef       	ldi	r24, 0xFF	; 255
    28ba:	9f ef       	ldi	r25, 0xFF	; 255
    28bc:	dc 01       	movw	r26, r24
    28be:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <xNextTaskUnblockTime>
    28c2:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <xNextTaskUnblockTime+0x1>
    28c6:	a0 93 65 06 	sts	0x0665, r26	; 0x800665 <xNextTaskUnblockTime+0x2>
    28ca:	b0 93 66 06 	sts	0x0666, r27	; 0x800666 <xNextTaskUnblockTime+0x3>
    28ce:	08 95       	ret
    28d0:	e0 91 96 06 	lds	r30, 0x0696	; 0x800696 <pxDelayedTaskList>
    28d4:	f0 91 97 06 	lds	r31, 0x0697	; 0x800697 <pxDelayedTaskList+0x1>
    28d8:	07 80       	ldd	r0, Z+7	; 0x07
    28da:	f0 85       	ldd	r31, Z+8	; 0x08
    28dc:	e0 2d       	mov	r30, r0
    28de:	00 84       	ldd	r0, Z+8	; 0x08
    28e0:	f1 85       	ldd	r31, Z+9	; 0x09
    28e2:	e0 2d       	mov	r30, r0
    28e4:	82 81       	ldd	r24, Z+2	; 0x02
    28e6:	93 81       	ldd	r25, Z+3	; 0x03
    28e8:	a4 81       	ldd	r26, Z+4	; 0x04
    28ea:	b5 81       	ldd	r27, Z+5	; 0x05
    28ec:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <xNextTaskUnblockTime>
    28f0:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <xNextTaskUnblockTime+0x1>
    28f4:	a0 93 65 06 	sts	0x0665, r26	; 0x800665 <xNextTaskUnblockTime+0x2>
    28f8:	b0 93 66 06 	sts	0x0666, r27	; 0x800666 <xNextTaskUnblockTime+0x3>
    28fc:	08 95       	ret

000028fe <prvAddCurrentTaskToDelayedList>:
    28fe:	8f 92       	push	r8
    2900:	9f 92       	push	r9
    2902:	af 92       	push	r10
    2904:	bf 92       	push	r11
    2906:	cf 92       	push	r12
    2908:	df 92       	push	r13
    290a:	ef 92       	push	r14
    290c:	ff 92       	push	r15
    290e:	cf 93       	push	r28
    2910:	6b 01       	movw	r12, r22
    2912:	7c 01       	movw	r14, r24
    2914:	c4 2f       	mov	r28, r20
    2916:	80 90 6d 06 	lds	r8, 0x066D	; 0x80066d <xTickCount>
    291a:	90 90 6e 06 	lds	r9, 0x066E	; 0x80066e <xTickCount+0x1>
    291e:	a0 90 6f 06 	lds	r10, 0x066F	; 0x80066f <xTickCount+0x2>
    2922:	b0 90 70 06 	lds	r11, 0x0670	; 0x800670 <xTickCount+0x3>
    2926:	80 91 da 06 	lds	r24, 0x06DA	; 0x8006da <pxCurrentTCB>
    292a:	90 91 db 06 	lds	r25, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    292e:	02 96       	adiw	r24, 0x02	; 2
    2930:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2934:	8f ef       	ldi	r24, 0xFF	; 255
    2936:	c8 16       	cp	r12, r24
    2938:	d8 06       	cpc	r13, r24
    293a:	e8 06       	cpc	r14, r24
    293c:	f8 06       	cpc	r15, r24
    293e:	69 f4       	brne	.+26     	; 0x295a <prvAddCurrentTaskToDelayedList+0x5c>
    2940:	cc 23       	and	r28, r28
    2942:	59 f0       	breq	.+22     	; 0x295a <prvAddCurrentTaskToDelayedList+0x5c>
    2944:	60 91 da 06 	lds	r22, 0x06DA	; 0x8006da <pxCurrentTCB>
    2948:	70 91 db 06 	lds	r23, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    294c:	6e 5f       	subi	r22, 0xFE	; 254
    294e:	7f 4f       	sbci	r23, 0xFF	; 255
    2950:	82 e7       	ldi	r24, 0x72	; 114
    2952:	96 e0       	ldi	r25, 0x06	; 6
    2954:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2958:	3f c0       	rjmp	.+126    	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    295a:	c8 0c       	add	r12, r8
    295c:	d9 1c       	adc	r13, r9
    295e:	ea 1c       	adc	r14, r10
    2960:	fb 1c       	adc	r15, r11
    2962:	e0 91 da 06 	lds	r30, 0x06DA	; 0x8006da <pxCurrentTCB>
    2966:	f0 91 db 06 	lds	r31, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    296a:	c2 82       	std	Z+2, r12	; 0x02
    296c:	d3 82       	std	Z+3, r13	; 0x03
    296e:	e4 82       	std	Z+4, r14	; 0x04
    2970:	f5 82       	std	Z+5, r15	; 0x05
    2972:	c8 14       	cp	r12, r8
    2974:	d9 04       	cpc	r13, r9
    2976:	ea 04       	cpc	r14, r10
    2978:	fb 04       	cpc	r15, r11
    297a:	68 f4       	brcc	.+26     	; 0x2996 <prvAddCurrentTaskToDelayedList+0x98>
    297c:	60 91 da 06 	lds	r22, 0x06DA	; 0x8006da <pxCurrentTCB>
    2980:	70 91 db 06 	lds	r23, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    2984:	80 91 94 06 	lds	r24, 0x0694	; 0x800694 <pxOverflowDelayedTaskList>
    2988:	90 91 95 06 	lds	r25, 0x0695	; 0x800695 <pxOverflowDelayedTaskList+0x1>
    298c:	6e 5f       	subi	r22, 0xFE	; 254
    298e:	7f 4f       	sbci	r23, 0xFF	; 255
    2990:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    2994:	21 c0       	rjmp	.+66     	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    2996:	60 91 da 06 	lds	r22, 0x06DA	; 0x8006da <pxCurrentTCB>
    299a:	70 91 db 06 	lds	r23, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    299e:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <pxDelayedTaskList>
    29a2:	90 91 97 06 	lds	r25, 0x0697	; 0x800697 <pxDelayedTaskList+0x1>
    29a6:	6e 5f       	subi	r22, 0xFE	; 254
    29a8:	7f 4f       	sbci	r23, 0xFF	; 255
    29aa:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    29ae:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <xNextTaskUnblockTime>
    29b2:	90 91 64 06 	lds	r25, 0x0664	; 0x800664 <xNextTaskUnblockTime+0x1>
    29b6:	a0 91 65 06 	lds	r26, 0x0665	; 0x800665 <xNextTaskUnblockTime+0x2>
    29ba:	b0 91 66 06 	lds	r27, 0x0666	; 0x800666 <xNextTaskUnblockTime+0x3>
    29be:	c8 16       	cp	r12, r24
    29c0:	d9 06       	cpc	r13, r25
    29c2:	ea 06       	cpc	r14, r26
    29c4:	fb 06       	cpc	r15, r27
    29c6:	40 f4       	brcc	.+16     	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    29c8:	c0 92 63 06 	sts	0x0663, r12	; 0x800663 <xNextTaskUnblockTime>
    29cc:	d0 92 64 06 	sts	0x0664, r13	; 0x800664 <xNextTaskUnblockTime+0x1>
    29d0:	e0 92 65 06 	sts	0x0665, r14	; 0x800665 <xNextTaskUnblockTime+0x2>
    29d4:	f0 92 66 06 	sts	0x0666, r15	; 0x800666 <xNextTaskUnblockTime+0x3>
    29d8:	cf 91       	pop	r28
    29da:	ff 90       	pop	r15
    29dc:	ef 90       	pop	r14
    29de:	df 90       	pop	r13
    29e0:	cf 90       	pop	r12
    29e2:	bf 90       	pop	r11
    29e4:	af 90       	pop	r10
    29e6:	9f 90       	pop	r9
    29e8:	8f 90       	pop	r8
    29ea:	08 95       	ret

000029ec <xTaskCreate>:
    29ec:	4f 92       	push	r4
    29ee:	5f 92       	push	r5
    29f0:	6f 92       	push	r6
    29f2:	7f 92       	push	r7
    29f4:	8f 92       	push	r8
    29f6:	9f 92       	push	r9
    29f8:	af 92       	push	r10
    29fa:	bf 92       	push	r11
    29fc:	cf 92       	push	r12
    29fe:	df 92       	push	r13
    2a00:	ef 92       	push	r14
    2a02:	ff 92       	push	r15
    2a04:	0f 93       	push	r16
    2a06:	cf 93       	push	r28
    2a08:	df 93       	push	r29
    2a0a:	4c 01       	movw	r8, r24
    2a0c:	6b 01       	movw	r12, r22
    2a0e:	5a 01       	movw	r10, r20
    2a10:	29 01       	movw	r4, r18
    2a12:	ca 01       	movw	r24, r20
    2a14:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    2a18:	3c 01       	movw	r6, r24
    2a1a:	89 2b       	or	r24, r25
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <xTaskCreate+0x34>
    2a1e:	ec c0       	rjmp	.+472    	; 0x2bf8 <xTaskCreate+0x20c>
    2a20:	83 e3       	ldi	r24, 0x33	; 51
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    2a28:	ec 01       	movw	r28, r24
    2a2a:	89 2b       	or	r24, r25
    2a2c:	b1 f0       	breq	.+44     	; 0x2a5a <xTaskCreate+0x6e>
    2a2e:	7c 8e       	std	Y+28, r7	; 0x1c
    2a30:	6b 8e       	std	Y+27, r6	; 0x1b
    2a32:	a5 01       	movw	r20, r10
    2a34:	65 ea       	ldi	r22, 0xA5	; 165
    2a36:	70 e0       	ldi	r23, 0x00	; 0
    2a38:	c3 01       	movw	r24, r6
    2a3a:	0e 94 96 5c 	call	0xb92c	; 0xb92c <memset>
    2a3e:	21 e0       	ldi	r18, 0x01	; 1
    2a40:	a2 1a       	sub	r10, r18
    2a42:	b1 08       	sbc	r11, r1
    2a44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a48:	a8 0e       	add	r10, r24
    2a4a:	b9 1e       	adc	r11, r25
    2a4c:	d6 01       	movw	r26, r12
    2a4e:	8c 91       	ld	r24, X
    2a50:	8d 8f       	std	Y+29, r24	; 0x1d
    2a52:	8c 91       	ld	r24, X
    2a54:	81 11       	cpse	r24, r1
    2a56:	05 c0       	rjmp	.+10     	; 0x2a62 <xTaskCreate+0x76>
    2a58:	18 c0       	rjmp	.+48     	; 0x2a8a <xTaskCreate+0x9e>
    2a5a:	c3 01       	movw	r24, r6
    2a5c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vPortFree>
    2a60:	cb c0       	rjmp	.+406    	; 0x2bf8 <xTaskCreate+0x20c>
    2a62:	ae 01       	movw	r20, r28
    2a64:	42 5e       	subi	r20, 0xE2	; 226
    2a66:	5f 4f       	sbci	r21, 0xFF	; 255
    2a68:	f6 01       	movw	r30, r12
    2a6a:	31 96       	adiw	r30, 0x01	; 1
    2a6c:	bf e0       	ldi	r27, 0x0F	; 15
    2a6e:	cb 0e       	add	r12, r27
    2a70:	d1 1c       	adc	r13, r1
    2a72:	cf 01       	movw	r24, r30
    2a74:	21 91       	ld	r18, Z+
    2a76:	da 01       	movw	r26, r20
    2a78:	2d 93       	st	X+, r18
    2a7a:	ad 01       	movw	r20, r26
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	8c 91       	ld	r24, X
    2a80:	88 23       	and	r24, r24
    2a82:	19 f0       	breq	.+6      	; 0x2a8a <xTaskCreate+0x9e>
    2a84:	ec 15       	cp	r30, r12
    2a86:	fd 05       	cpc	r31, r13
    2a88:	a1 f7       	brne	.-24     	; 0x2a72 <xTaskCreate+0x86>
    2a8a:	1b a6       	std	Y+43, r1	; 0x2b
    2a8c:	04 30       	cpi	r16, 0x04	; 4
    2a8e:	08 f0       	brcs	.+2      	; 0x2a92 <xTaskCreate+0xa6>
    2a90:	03 e0       	ldi	r16, 0x03	; 3
    2a92:	0a 8f       	std	Y+26, r16	; 0x1a
    2a94:	0c a7       	std	Y+44, r16	; 0x2c
    2a96:	1d a6       	std	Y+45, r1	; 0x2d
    2a98:	6e 01       	movw	r12, r28
    2a9a:	b2 e0       	ldi	r27, 0x02	; 2
    2a9c:	cb 0e       	add	r12, r27
    2a9e:	d1 1c       	adc	r13, r1
    2aa0:	c6 01       	movw	r24, r12
    2aa2:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    2aa6:	ce 01       	movw	r24, r28
    2aa8:	0e 96       	adiw	r24, 0x0e	; 14
    2aaa:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    2aae:	db 87       	std	Y+11, r29	; 0x0b
    2ab0:	ca 87       	std	Y+10, r28	; 0x0a
    2ab2:	84 e0       	ldi	r24, 0x04	; 4
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	a0 e0       	ldi	r26, 0x00	; 0
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	80 1b       	sub	r24, r16
    2abc:	91 09       	sbc	r25, r1
    2abe:	a1 09       	sbc	r26, r1
    2ac0:	b1 09       	sbc	r27, r1
    2ac2:	8e 87       	std	Y+14, r24	; 0x0e
    2ac4:	9f 87       	std	Y+15, r25	; 0x0f
    2ac6:	a8 8b       	std	Y+16, r26	; 0x10
    2ac8:	b9 8b       	std	Y+17, r27	; 0x11
    2aca:	df 8b       	std	Y+23, r29	; 0x17
    2acc:	ce 8b       	std	Y+22, r28	; 0x16
    2ace:	1e a6       	std	Y+46, r1	; 0x2e
    2ad0:	1f a6       	std	Y+47, r1	; 0x2f
    2ad2:	18 aa       	std	Y+48, r1	; 0x30
    2ad4:	19 aa       	std	Y+49, r1	; 0x31
    2ad6:	1a aa       	std	Y+50, r1	; 0x32
    2ad8:	a2 01       	movw	r20, r4
    2ada:	b4 01       	movw	r22, r8
    2adc:	c5 01       	movw	r24, r10
    2ade:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pxPortInitialiseStack>
    2ae2:	99 83       	std	Y+1, r25	; 0x01
    2ae4:	88 83       	st	Y, r24
    2ae6:	e1 14       	cp	r14, r1
    2ae8:	f1 04       	cpc	r15, r1
    2aea:	19 f0       	breq	.+6      	; 0x2af2 <xTaskCreate+0x106>
    2aec:	f7 01       	movw	r30, r14
    2aee:	d1 83       	std	Z+1, r29	; 0x01
    2af0:	c0 83       	st	Z, r28
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	0f 92       	push	r0
    2af8:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <uxCurrentNumberOfTasks>
    2afc:	8f 5f       	subi	r24, 0xFF	; 255
    2afe:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <uxCurrentNumberOfTasks>
    2b02:	80 91 da 06 	lds	r24, 0x06DA	; 0x8006da <pxCurrentTCB>
    2b06:	90 91 db 06 	lds	r25, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    2b0a:	89 2b       	or	r24, r25
    2b0c:	d1 f5       	brne	.+116    	; 0x2b82 <xTaskCreate+0x196>
    2b0e:	d0 93 db 06 	sts	0x06DB, r29	; 0x8006db <pxCurrentTCB+0x1>
    2b12:	c0 93 da 06 	sts	0x06DA, r28	; 0x8006da <pxCurrentTCB>
    2b16:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <uxCurrentNumberOfTasks>
    2b1a:	81 30       	cpi	r24, 0x01	; 1
    2b1c:	09 f0       	breq	.+2      	; 0x2b20 <xTaskCreate+0x134>
    2b1e:	41 c0       	rjmp	.+130    	; 0x2ba2 <xTaskCreate+0x1b6>
    2b20:	8e ea       	ldi	r24, 0xAE	; 174
    2b22:	96 e0       	ldi	r25, 0x06	; 6
    2b24:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b28:	89 eb       	ldi	r24, 0xB9	; 185
    2b2a:	96 e0       	ldi	r25, 0x06	; 6
    2b2c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b30:	84 ec       	ldi	r24, 0xC4	; 196
    2b32:	96 e0       	ldi	r25, 0x06	; 6
    2b34:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b38:	8f ec       	ldi	r24, 0xCF	; 207
    2b3a:	96 e0       	ldi	r25, 0x06	; 6
    2b3c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b40:	83 ea       	ldi	r24, 0xA3	; 163
    2b42:	96 e0       	ldi	r25, 0x06	; 6
    2b44:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b48:	88 e9       	ldi	r24, 0x98	; 152
    2b4a:	96 e0       	ldi	r25, 0x06	; 6
    2b4c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b50:	89 e8       	ldi	r24, 0x89	; 137
    2b52:	96 e0       	ldi	r25, 0x06	; 6
    2b54:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b58:	8e e7       	ldi	r24, 0x7E	; 126
    2b5a:	96 e0       	ldi	r25, 0x06	; 6
    2b5c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b60:	82 e7       	ldi	r24, 0x72	; 114
    2b62:	96 e0       	ldi	r25, 0x06	; 6
    2b64:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b68:	83 ea       	ldi	r24, 0xA3	; 163
    2b6a:	96 e0       	ldi	r25, 0x06	; 6
    2b6c:	90 93 97 06 	sts	0x0697, r25	; 0x800697 <pxDelayedTaskList+0x1>
    2b70:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <pxDelayedTaskList>
    2b74:	88 e9       	ldi	r24, 0x98	; 152
    2b76:	96 e0       	ldi	r25, 0x06	; 6
    2b78:	90 93 95 06 	sts	0x0695, r25	; 0x800695 <pxOverflowDelayedTaskList+0x1>
    2b7c:	80 93 94 06 	sts	0x0694, r24	; 0x800694 <pxOverflowDelayedTaskList>
    2b80:	10 c0       	rjmp	.+32     	; 0x2ba2 <xTaskCreate+0x1b6>
    2b82:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <xSchedulerRunning>
    2b86:	81 11       	cpse	r24, r1
    2b88:	0c c0       	rjmp	.+24     	; 0x2ba2 <xTaskCreate+0x1b6>
    2b8a:	e0 91 da 06 	lds	r30, 0x06DA	; 0x8006da <pxCurrentTCB>
    2b8e:	f0 91 db 06 	lds	r31, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    2b92:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b94:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b96:	89 17       	cp	r24, r25
    2b98:	20 f0       	brcs	.+8      	; 0x2ba2 <xTaskCreate+0x1b6>
    2b9a:	d0 93 db 06 	sts	0x06DB, r29	; 0x8006db <pxCurrentTCB+0x1>
    2b9e:	c0 93 da 06 	sts	0x06DA, r28	; 0x8006da <pxCurrentTCB>
    2ba2:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <uxTaskNumber>
    2ba6:	8f 5f       	subi	r24, 0xFF	; 255
    2ba8:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <uxTaskNumber>
    2bac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bae:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <uxTopReadyPriority>
    2bb2:	98 17       	cp	r25, r24
    2bb4:	10 f4       	brcc	.+4      	; 0x2bba <xTaskCreate+0x1ce>
    2bb6:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <uxTopReadyPriority>
    2bba:	fb e0       	ldi	r31, 0x0B	; 11
    2bbc:	8f 9f       	mul	r24, r31
    2bbe:	c0 01       	movw	r24, r0
    2bc0:	11 24       	eor	r1, r1
    2bc2:	b6 01       	movw	r22, r12
    2bc4:	82 55       	subi	r24, 0x52	; 82
    2bc6:	99 4f       	sbci	r25, 0xF9	; 249
    2bc8:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2bcc:	0f 90       	pop	r0
    2bce:	0f be       	out	0x3f, r0	; 63
    2bd0:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <xSchedulerRunning>
    2bd4:	88 23       	and	r24, r24
    2bd6:	61 f0       	breq	.+24     	; 0x2bf0 <xTaskCreate+0x204>
    2bd8:	e0 91 da 06 	lds	r30, 0x06DA	; 0x8006da <pxCurrentTCB>
    2bdc:	f0 91 db 06 	lds	r31, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    2be0:	92 8d       	ldd	r25, Z+26	; 0x1a
    2be2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2be4:	98 17       	cp	r25, r24
    2be6:	30 f4       	brcc	.+12     	; 0x2bf4 <xTaskCreate+0x208>
    2be8:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	05 c0       	rjmp	.+10     	; 0x2bfa <xTaskCreate+0x20e>
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	03 c0       	rjmp	.+6      	; 0x2bfa <xTaskCreate+0x20e>
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	01 c0       	rjmp	.+2      	; 0x2bfa <xTaskCreate+0x20e>
    2bf8:	8f ef       	ldi	r24, 0xFF	; 255
    2bfa:	df 91       	pop	r29
    2bfc:	cf 91       	pop	r28
    2bfe:	0f 91       	pop	r16
    2c00:	ff 90       	pop	r15
    2c02:	ef 90       	pop	r14
    2c04:	df 90       	pop	r13
    2c06:	cf 90       	pop	r12
    2c08:	bf 90       	pop	r11
    2c0a:	af 90       	pop	r10
    2c0c:	9f 90       	pop	r9
    2c0e:	8f 90       	pop	r8
    2c10:	7f 90       	pop	r7
    2c12:	6f 90       	pop	r6
    2c14:	5f 90       	pop	r5
    2c16:	4f 90       	pop	r4
    2c18:	08 95       	ret

00002c1a <vTaskResume>:
    2c1a:	0f 93       	push	r16
    2c1c:	1f 93       	push	r17
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
    2c22:	00 97       	sbiw	r24, 0x00	; 0
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <vTaskResume+0xe>
    2c26:	3d c0       	rjmp	.+122    	; 0x2ca2 <vTaskResume+0x88>
    2c28:	20 91 da 06 	lds	r18, 0x06DA	; 0x8006da <pxCurrentTCB>
    2c2c:	30 91 db 06 	lds	r19, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    2c30:	82 17       	cp	r24, r18
    2c32:	93 07       	cpc	r25, r19
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <vTaskResume+0x1e>
    2c36:	35 c0       	rjmp	.+106    	; 0x2ca2 <vTaskResume+0x88>
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	0f 92       	push	r0
    2c3e:	fc 01       	movw	r30, r24
    2c40:	24 85       	ldd	r18, Z+12	; 0x0c
    2c42:	35 85       	ldd	r19, Z+13	; 0x0d
    2c44:	22 57       	subi	r18, 0x72	; 114
    2c46:	36 40       	sbci	r19, 0x06	; 6
    2c48:	51 f5       	brne	.+84     	; 0x2c9e <vTaskResume+0x84>
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	20 8d       	ldd	r18, Z+24	; 0x18
    2c4e:	31 8d       	ldd	r19, Z+25	; 0x19
    2c50:	f6 e0       	ldi	r31, 0x06	; 6
    2c52:	29 38       	cpi	r18, 0x89	; 137
    2c54:	3f 07       	cpc	r19, r31
    2c56:	19 f1       	breq	.+70     	; 0x2c9e <vTaskResume+0x84>
    2c58:	23 2b       	or	r18, r19
    2c5a:	09 f5       	brne	.+66     	; 0x2c9e <vTaskResume+0x84>
    2c5c:	ec 01       	movw	r28, r24
    2c5e:	8c 01       	movw	r16, r24
    2c60:	0e 5f       	subi	r16, 0xFE	; 254
    2c62:	1f 4f       	sbci	r17, 0xFF	; 255
    2c64:	c8 01       	movw	r24, r16
    2c66:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2c6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c6c:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <uxTopReadyPriority>
    2c70:	98 17       	cp	r25, r24
    2c72:	10 f4       	brcc	.+4      	; 0x2c78 <vTaskResume+0x5e>
    2c74:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <uxTopReadyPriority>
    2c78:	2b e0       	ldi	r18, 0x0B	; 11
    2c7a:	82 9f       	mul	r24, r18
    2c7c:	c0 01       	movw	r24, r0
    2c7e:	11 24       	eor	r1, r1
    2c80:	b8 01       	movw	r22, r16
    2c82:	82 55       	subi	r24, 0x52	; 82
    2c84:	99 4f       	sbci	r25, 0xF9	; 249
    2c86:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2c8a:	e0 91 da 06 	lds	r30, 0x06DA	; 0x8006da <pxCurrentTCB>
    2c8e:	f0 91 db 06 	lds	r31, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    2c92:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c94:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c96:	98 17       	cp	r25, r24
    2c98:	10 f0       	brcs	.+4      	; 0x2c9e <vTaskResume+0x84>
    2c9a:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2c9e:	0f 90       	pop	r0
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	df 91       	pop	r29
    2ca4:	cf 91       	pop	r28
    2ca6:	1f 91       	pop	r17
    2ca8:	0f 91       	pop	r16
    2caa:	08 95       	ret

00002cac <vTaskStartScheduler>:
    2cac:	ef 92       	push	r14
    2cae:	ff 92       	push	r15
    2cb0:	0f 93       	push	r16
    2cb2:	0f 2e       	mov	r0, r31
    2cb4:	f1 e6       	ldi	r31, 0x61	; 97
    2cb6:	ef 2e       	mov	r14, r31
    2cb8:	f6 e0       	ldi	r31, 0x06	; 6
    2cba:	ff 2e       	mov	r15, r31
    2cbc:	f0 2d       	mov	r31, r0
    2cbe:	00 e0       	ldi	r16, 0x00	; 0
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	40 e8       	ldi	r20, 0x80	; 128
    2cc6:	50 e0       	ldi	r21, 0x00	; 0
    2cc8:	66 e1       	ldi	r22, 0x16	; 22
    2cca:	72 e0       	ldi	r23, 0x02	; 2
    2ccc:	88 e3       	ldi	r24, 0x38	; 56
    2cce:	95 e0       	ldi	r25, 0x05	; 5
    2cd0:	8d de       	rcall	.-742    	; 0x29ec <xTaskCreate>
    2cd2:	81 30       	cpi	r24, 0x01	; 1
    2cd4:	e1 f4       	brne	.+56     	; 0x2d0e <vTaskStartScheduler+0x62>
    2cd6:	ce d4       	rcall	.+2460   	; 0x3674 <xTimerCreateTimerTask>
    2cd8:	81 30       	cpi	r24, 0x01	; 1
    2cda:	c9 f4       	brne	.+50     	; 0x2d0e <vTaskStartScheduler+0x62>
    2cdc:	f8 94       	cli
    2cde:	8f ef       	ldi	r24, 0xFF	; 255
    2ce0:	9f ef       	ldi	r25, 0xFF	; 255
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <xNextTaskUnblockTime>
    2ce8:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <xNextTaskUnblockTime+0x1>
    2cec:	a0 93 65 06 	sts	0x0665, r26	; 0x800665 <xNextTaskUnblockTime+0x2>
    2cf0:	b0 93 66 06 	sts	0x0666, r27	; 0x800666 <xNextTaskUnblockTime+0x3>
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <xSchedulerRunning>
    2cfa:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <xTickCount>
    2cfe:	10 92 6e 06 	sts	0x066E, r1	; 0x80066e <xTickCount+0x1>
    2d02:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <xTickCount+0x2>
    2d06:	10 92 70 06 	sts	0x0670, r1	; 0x800670 <xTickCount+0x3>
    2d0a:	0e 94 56 06 	call	0xcac	; 0xcac <xPortStartScheduler>
    2d0e:	0f 91       	pop	r16
    2d10:	ff 90       	pop	r15
    2d12:	ef 90       	pop	r14
    2d14:	08 95       	ret

00002d16 <vTaskSuspendAll>:
    2d16:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <uxSchedulerSuspended>
    2d1a:	8f 5f       	subi	r24, 0xFF	; 255
    2d1c:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <uxSchedulerSuspended>
    2d20:	08 95       	ret

00002d22 <xTaskGetTickCount>:
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	0f 92       	push	r0
    2d28:	60 91 6d 06 	lds	r22, 0x066D	; 0x80066d <xTickCount>
    2d2c:	70 91 6e 06 	lds	r23, 0x066E	; 0x80066e <xTickCount+0x1>
    2d30:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <xTickCount+0x2>
    2d34:	90 91 70 06 	lds	r25, 0x0670	; 0x800670 <xTickCount+0x3>
    2d38:	0f 90       	pop	r0
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	08 95       	ret

00002d3e <xTaskIncrementTick>:
    2d3e:	9f 92       	push	r9
    2d40:	af 92       	push	r10
    2d42:	bf 92       	push	r11
    2d44:	cf 92       	push	r12
    2d46:	df 92       	push	r13
    2d48:	ef 92       	push	r14
    2d4a:	ff 92       	push	r15
    2d4c:	0f 93       	push	r16
    2d4e:	1f 93       	push	r17
    2d50:	cf 93       	push	r28
    2d52:	df 93       	push	r29
    2d54:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <uxSchedulerSuspended>
    2d58:	81 11       	cpse	r24, r1
    2d5a:	ad c0       	rjmp	.+346    	; 0x2eb6 <xTaskIncrementTick+0x178>
    2d5c:	c0 90 6d 06 	lds	r12, 0x066D	; 0x80066d <xTickCount>
    2d60:	d0 90 6e 06 	lds	r13, 0x066E	; 0x80066e <xTickCount+0x1>
    2d64:	e0 90 6f 06 	lds	r14, 0x066F	; 0x80066f <xTickCount+0x2>
    2d68:	f0 90 70 06 	lds	r15, 0x0670	; 0x800670 <xTickCount+0x3>
    2d6c:	8f ef       	ldi	r24, 0xFF	; 255
    2d6e:	c8 1a       	sub	r12, r24
    2d70:	d8 0a       	sbc	r13, r24
    2d72:	e8 0a       	sbc	r14, r24
    2d74:	f8 0a       	sbc	r15, r24
    2d76:	c0 92 6d 06 	sts	0x066D, r12	; 0x80066d <xTickCount>
    2d7a:	d0 92 6e 06 	sts	0x066E, r13	; 0x80066e <xTickCount+0x1>
    2d7e:	e0 92 6f 06 	sts	0x066F, r14	; 0x80066f <xTickCount+0x2>
    2d82:	f0 92 70 06 	sts	0x0670, r15	; 0x800670 <xTickCount+0x3>
    2d86:	c1 14       	cp	r12, r1
    2d88:	d1 04       	cpc	r13, r1
    2d8a:	e1 04       	cpc	r14, r1
    2d8c:	f1 04       	cpc	r15, r1
    2d8e:	b1 f4       	brne	.+44     	; 0x2dbc <xTaskIncrementTick+0x7e>
    2d90:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <pxDelayedTaskList>
    2d94:	90 91 97 06 	lds	r25, 0x0697	; 0x800697 <pxDelayedTaskList+0x1>
    2d98:	20 91 94 06 	lds	r18, 0x0694	; 0x800694 <pxOverflowDelayedTaskList>
    2d9c:	30 91 95 06 	lds	r19, 0x0695	; 0x800695 <pxOverflowDelayedTaskList+0x1>
    2da0:	30 93 97 06 	sts	0x0697, r19	; 0x800697 <pxDelayedTaskList+0x1>
    2da4:	20 93 96 06 	sts	0x0696, r18	; 0x800696 <pxDelayedTaskList>
    2da8:	90 93 95 06 	sts	0x0695, r25	; 0x800695 <pxOverflowDelayedTaskList+0x1>
    2dac:	80 93 94 06 	sts	0x0694, r24	; 0x800694 <pxOverflowDelayedTaskList>
    2db0:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <xNumOfOverflows>
    2db4:	8f 5f       	subi	r24, 0xFF	; 255
    2db6:	80 93 68 06 	sts	0x0668, r24	; 0x800668 <xNumOfOverflows>
    2dba:	77 dd       	rcall	.-1298   	; 0x28aa <prvResetNextTaskUnblockTime>
    2dbc:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <xNextTaskUnblockTime>
    2dc0:	90 91 64 06 	lds	r25, 0x0664	; 0x800664 <xNextTaskUnblockTime+0x1>
    2dc4:	a0 91 65 06 	lds	r26, 0x0665	; 0x800665 <xNextTaskUnblockTime+0x2>
    2dc8:	b0 91 66 06 	lds	r27, 0x0666	; 0x800666 <xNextTaskUnblockTime+0x3>
    2dcc:	c8 16       	cp	r12, r24
    2dce:	d9 06       	cpc	r13, r25
    2dd0:	ea 06       	cpc	r14, r26
    2dd2:	fb 06       	cpc	r15, r27
    2dd4:	10 f4       	brcc	.+4      	; 0x2dda <xTaskIncrementTick+0x9c>
    2dd6:	b1 2c       	mov	r11, r1
    2dd8:	5d c0       	rjmp	.+186    	; 0x2e94 <xTaskIncrementTick+0x156>
    2dda:	b1 2c       	mov	r11, r1
    2ddc:	0f 2e       	mov	r0, r31
    2dde:	fb e0       	ldi	r31, 0x0B	; 11
    2de0:	af 2e       	mov	r10, r31
    2de2:	f0 2d       	mov	r31, r0
    2de4:	99 24       	eor	r9, r9
    2de6:	93 94       	inc	r9
    2de8:	e0 91 96 06 	lds	r30, 0x0696	; 0x800696 <pxDelayedTaskList>
    2dec:	f0 91 97 06 	lds	r31, 0x0697	; 0x800697 <pxDelayedTaskList+0x1>
    2df0:	80 81       	ld	r24, Z
    2df2:	81 11       	cpse	r24, r1
    2df4:	0c c0       	rjmp	.+24     	; 0x2e0e <xTaskIncrementTick+0xd0>
    2df6:	8f ef       	ldi	r24, 0xFF	; 255
    2df8:	9f ef       	ldi	r25, 0xFF	; 255
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <xNextTaskUnblockTime>
    2e00:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <xNextTaskUnblockTime+0x1>
    2e04:	a0 93 65 06 	sts	0x0665, r26	; 0x800665 <xNextTaskUnblockTime+0x2>
    2e08:	b0 93 66 06 	sts	0x0666, r27	; 0x800666 <xNextTaskUnblockTime+0x3>
    2e0c:	43 c0       	rjmp	.+134    	; 0x2e94 <xTaskIncrementTick+0x156>
    2e0e:	e0 91 96 06 	lds	r30, 0x0696	; 0x800696 <pxDelayedTaskList>
    2e12:	f0 91 97 06 	lds	r31, 0x0697	; 0x800697 <pxDelayedTaskList+0x1>
    2e16:	07 80       	ldd	r0, Z+7	; 0x07
    2e18:	f0 85       	ldd	r31, Z+8	; 0x08
    2e1a:	e0 2d       	mov	r30, r0
    2e1c:	c0 85       	ldd	r28, Z+8	; 0x08
    2e1e:	d1 85       	ldd	r29, Z+9	; 0x09
    2e20:	8a 81       	ldd	r24, Y+2	; 0x02
    2e22:	9b 81       	ldd	r25, Y+3	; 0x03
    2e24:	ac 81       	ldd	r26, Y+4	; 0x04
    2e26:	bd 81       	ldd	r27, Y+5	; 0x05
    2e28:	c8 16       	cp	r12, r24
    2e2a:	d9 06       	cpc	r13, r25
    2e2c:	ea 06       	cpc	r14, r26
    2e2e:	fb 06       	cpc	r15, r27
    2e30:	48 f4       	brcc	.+18     	; 0x2e44 <xTaskIncrementTick+0x106>
    2e32:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <xNextTaskUnblockTime>
    2e36:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <xNextTaskUnblockTime+0x1>
    2e3a:	a0 93 65 06 	sts	0x0665, r26	; 0x800665 <xNextTaskUnblockTime+0x2>
    2e3e:	b0 93 66 06 	sts	0x0666, r27	; 0x800666 <xNextTaskUnblockTime+0x3>
    2e42:	28 c0       	rjmp	.+80     	; 0x2e94 <xTaskIncrementTick+0x156>
    2e44:	8e 01       	movw	r16, r28
    2e46:	0e 5f       	subi	r16, 0xFE	; 254
    2e48:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4a:	c8 01       	movw	r24, r16
    2e4c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2e50:	88 8d       	ldd	r24, Y+24	; 0x18
    2e52:	99 8d       	ldd	r25, Y+25	; 0x19
    2e54:	89 2b       	or	r24, r25
    2e56:	21 f0       	breq	.+8      	; 0x2e60 <xTaskIncrementTick+0x122>
    2e58:	ce 01       	movw	r24, r28
    2e5a:	0e 96       	adiw	r24, 0x0e	; 14
    2e5c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2e60:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e62:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <uxTopReadyPriority>
    2e66:	98 17       	cp	r25, r24
    2e68:	10 f4       	brcc	.+4      	; 0x2e6e <xTaskIncrementTick+0x130>
    2e6a:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <uxTopReadyPriority>
    2e6e:	a8 9e       	mul	r10, r24
    2e70:	c0 01       	movw	r24, r0
    2e72:	11 24       	eor	r1, r1
    2e74:	b8 01       	movw	r22, r16
    2e76:	82 55       	subi	r24, 0x52	; 82
    2e78:	99 4f       	sbci	r25, 0xF9	; 249
    2e7a:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2e7e:	e0 91 da 06 	lds	r30, 0x06DA	; 0x8006da <pxCurrentTCB>
    2e82:	f0 91 db 06 	lds	r31, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    2e86:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e88:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e8a:	98 17       	cp	r25, r24
    2e8c:	08 f4       	brcc	.+2      	; 0x2e90 <xTaskIncrementTick+0x152>
    2e8e:	ac cf       	rjmp	.-168    	; 0x2de8 <xTaskIncrementTick+0xaa>
    2e90:	b9 2c       	mov	r11, r9
    2e92:	aa cf       	rjmp	.-172    	; 0x2de8 <xTaskIncrementTick+0xaa>
    2e94:	e0 91 da 06 	lds	r30, 0x06DA	; 0x8006da <pxCurrentTCB>
    2e98:	f0 91 db 06 	lds	r31, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    2e9c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2e9e:	8b e0       	ldi	r24, 0x0B	; 11
    2ea0:	e8 9f       	mul	r30, r24
    2ea2:	f0 01       	movw	r30, r0
    2ea4:	11 24       	eor	r1, r1
    2ea6:	e2 55       	subi	r30, 0x52	; 82
    2ea8:	f9 4f       	sbci	r31, 0xF9	; 249
    2eaa:	80 81       	ld	r24, Z
    2eac:	82 30       	cpi	r24, 0x02	; 2
    2eae:	48 f0       	brcs	.+18     	; 0x2ec2 <xTaskIncrementTick+0x184>
    2eb0:	bb 24       	eor	r11, r11
    2eb2:	b3 94       	inc	r11
    2eb4:	06 c0       	rjmp	.+12     	; 0x2ec2 <xTaskIncrementTick+0x184>
    2eb6:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <uxPendedTicks>
    2eba:	8f 5f       	subi	r24, 0xFF	; 255
    2ebc:	80 93 6a 06 	sts	0x066A, r24	; 0x80066a <uxPendedTicks>
    2ec0:	b1 2c       	mov	r11, r1
    2ec2:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <xYieldPending>
    2ec6:	88 23       	and	r24, r24
    2ec8:	11 f0       	breq	.+4      	; 0x2ece <xTaskIncrementTick+0x190>
    2eca:	bb 24       	eor	r11, r11
    2ecc:	b3 94       	inc	r11
    2ece:	8b 2d       	mov	r24, r11
    2ed0:	df 91       	pop	r29
    2ed2:	cf 91       	pop	r28
    2ed4:	1f 91       	pop	r17
    2ed6:	0f 91       	pop	r16
    2ed8:	ff 90       	pop	r15
    2eda:	ef 90       	pop	r14
    2edc:	df 90       	pop	r13
    2ede:	cf 90       	pop	r12
    2ee0:	bf 90       	pop	r11
    2ee2:	af 90       	pop	r10
    2ee4:	9f 90       	pop	r9
    2ee6:	08 95       	ret

00002ee8 <xTaskResumeAll>:
    2ee8:	cf 92       	push	r12
    2eea:	df 92       	push	r13
    2eec:	ef 92       	push	r14
    2eee:	ff 92       	push	r15
    2ef0:	0f 93       	push	r16
    2ef2:	1f 93       	push	r17
    2ef4:	cf 93       	push	r28
    2ef6:	df 93       	push	r29
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	f8 94       	cli
    2efc:	0f 92       	push	r0
    2efe:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <uxSchedulerSuspended>
    2f02:	81 50       	subi	r24, 0x01	; 1
    2f04:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <uxSchedulerSuspended>
    2f08:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <uxSchedulerSuspended>
    2f0c:	81 11       	cpse	r24, r1
    2f0e:	5a c0       	rjmp	.+180    	; 0x2fc4 <xTaskResumeAll+0xdc>
    2f10:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <uxCurrentNumberOfTasks>
    2f14:	81 11       	cpse	r24, r1
    2f16:	2c c0       	rjmp	.+88     	; 0x2f70 <xTaskResumeAll+0x88>
    2f18:	58 c0       	rjmp	.+176    	; 0x2fca <xTaskResumeAll+0xe2>
    2f1a:	d7 01       	movw	r26, r14
    2f1c:	17 96       	adiw	r26, 0x07	; 7
    2f1e:	ed 91       	ld	r30, X+
    2f20:	fc 91       	ld	r31, X
    2f22:	18 97       	sbiw	r26, 0x08	; 8
    2f24:	c0 85       	ldd	r28, Z+8	; 0x08
    2f26:	d1 85       	ldd	r29, Z+9	; 0x09
    2f28:	ce 01       	movw	r24, r28
    2f2a:	0e 96       	adiw	r24, 0x0e	; 14
    2f2c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2f30:	8e 01       	movw	r16, r28
    2f32:	0e 5f       	subi	r16, 0xFE	; 254
    2f34:	1f 4f       	sbci	r17, 0xFF	; 255
    2f36:	c8 01       	movw	r24, r16
    2f38:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2f3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f3e:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <uxTopReadyPriority>
    2f42:	98 17       	cp	r25, r24
    2f44:	10 f4       	brcc	.+4      	; 0x2f4a <xTaskResumeAll+0x62>
    2f46:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <uxTopReadyPriority>
    2f4a:	d8 9e       	mul	r13, r24
    2f4c:	c0 01       	movw	r24, r0
    2f4e:	11 24       	eor	r1, r1
    2f50:	b8 01       	movw	r22, r16
    2f52:	82 55       	subi	r24, 0x52	; 82
    2f54:	99 4f       	sbci	r25, 0xF9	; 249
    2f56:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2f5a:	e0 91 da 06 	lds	r30, 0x06DA	; 0x8006da <pxCurrentTCB>
    2f5e:	f0 91 db 06 	lds	r31, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    2f62:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f64:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f66:	98 17       	cp	r25, r24
    2f68:	88 f0       	brcs	.+34     	; 0x2f8c <xTaskResumeAll+0xa4>
    2f6a:	c0 92 69 06 	sts	0x0669, r12	; 0x800669 <xYieldPending>
    2f6e:	0e c0       	rjmp	.+28     	; 0x2f8c <xTaskResumeAll+0xa4>
    2f70:	c0 e0       	ldi	r28, 0x00	; 0
    2f72:	d0 e0       	ldi	r29, 0x00	; 0
    2f74:	0f 2e       	mov	r0, r31
    2f76:	f9 e8       	ldi	r31, 0x89	; 137
    2f78:	ef 2e       	mov	r14, r31
    2f7a:	f6 e0       	ldi	r31, 0x06	; 6
    2f7c:	ff 2e       	mov	r15, r31
    2f7e:	f0 2d       	mov	r31, r0
    2f80:	0f 2e       	mov	r0, r31
    2f82:	fb e0       	ldi	r31, 0x0B	; 11
    2f84:	df 2e       	mov	r13, r31
    2f86:	f0 2d       	mov	r31, r0
    2f88:	cc 24       	eor	r12, r12
    2f8a:	c3 94       	inc	r12
    2f8c:	f7 01       	movw	r30, r14
    2f8e:	80 81       	ld	r24, Z
    2f90:	81 11       	cpse	r24, r1
    2f92:	c3 cf       	rjmp	.-122    	; 0x2f1a <xTaskResumeAll+0x32>
    2f94:	cd 2b       	or	r28, r29
    2f96:	09 f0       	breq	.+2      	; 0x2f9a <xTaskResumeAll+0xb2>
    2f98:	88 dc       	rcall	.-1776   	; 0x28aa <prvResetNextTaskUnblockTime>
    2f9a:	c0 91 6a 06 	lds	r28, 0x066A	; 0x80066a <uxPendedTicks>
    2f9e:	cc 23       	and	r28, r28
    2fa0:	49 f0       	breq	.+18     	; 0x2fb4 <xTaskResumeAll+0xcc>
    2fa2:	d1 e0       	ldi	r29, 0x01	; 1
    2fa4:	cc de       	rcall	.-616    	; 0x2d3e <xTaskIncrementTick>
    2fa6:	81 11       	cpse	r24, r1
    2fa8:	d0 93 69 06 	sts	0x0669, r29	; 0x800669 <xYieldPending>
    2fac:	c1 50       	subi	r28, 0x01	; 1
    2fae:	d1 f7       	brne	.-12     	; 0x2fa4 <xTaskResumeAll+0xbc>
    2fb0:	10 92 6a 06 	sts	0x066A, r1	; 0x80066a <uxPendedTicks>
    2fb4:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <xYieldPending>
    2fb8:	88 23       	and	r24, r24
    2fba:	31 f0       	breq	.+12     	; 0x2fc8 <xTaskResumeAll+0xe0>
    2fbc:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	03 c0       	rjmp	.+6      	; 0x2fca <xTaskResumeAll+0xe2>
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	01 c0       	rjmp	.+2      	; 0x2fca <xTaskResumeAll+0xe2>
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	0f 90       	pop	r0
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	ff 90       	pop	r15
    2fd8:	ef 90       	pop	r14
    2fda:	df 90       	pop	r13
    2fdc:	cf 90       	pop	r12
    2fde:	08 95       	ret

00002fe0 <vTaskDelay>:
    2fe0:	cf 92       	push	r12
    2fe2:	df 92       	push	r13
    2fe4:	ef 92       	push	r14
    2fe6:	ff 92       	push	r15
    2fe8:	6b 01       	movw	r12, r22
    2fea:	7c 01       	movw	r14, r24
    2fec:	67 2b       	or	r22, r23
    2fee:	68 2b       	or	r22, r24
    2ff0:	69 2b       	or	r22, r25
    2ff2:	41 f0       	breq	.+16     	; 0x3004 <vTaskDelay+0x24>
    2ff4:	90 de       	rcall	.-736    	; 0x2d16 <vTaskSuspendAll>
    2ff6:	40 e0       	ldi	r20, 0x00	; 0
    2ff8:	c7 01       	movw	r24, r14
    2ffa:	b6 01       	movw	r22, r12
    2ffc:	80 dc       	rcall	.-1792   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    2ffe:	74 df       	rcall	.-280    	; 0x2ee8 <xTaskResumeAll>
    3000:	81 11       	cpse	r24, r1
    3002:	02 c0       	rjmp	.+4      	; 0x3008 <vTaskDelay+0x28>
    3004:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3008:	ff 90       	pop	r15
    300a:	ef 90       	pop	r14
    300c:	df 90       	pop	r13
    300e:	cf 90       	pop	r12
    3010:	08 95       	ret

00003012 <vTaskSwitchContext>:
    3012:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <uxSchedulerSuspended>
    3016:	88 23       	and	r24, r24
    3018:	21 f0       	breq	.+8      	; 0x3022 <vTaskSwitchContext+0x10>
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <xYieldPending>
    3020:	08 95       	ret
    3022:	10 92 69 06 	sts	0x0669, r1	; 0x800669 <xYieldPending>
    3026:	a0 91 da 06 	lds	r26, 0x06DA	; 0x8006da <pxCurrentTCB>
    302a:	b0 91 db 06 	lds	r27, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    302e:	e0 91 da 06 	lds	r30, 0x06DA	; 0x8006da <pxCurrentTCB>
    3032:	f0 91 db 06 	lds	r31, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    3036:	2d 91       	ld	r18, X+
    3038:	3c 91       	ld	r19, X
    303a:	83 8d       	ldd	r24, Z+27	; 0x1b
    303c:	94 8d       	ldd	r25, Z+28	; 0x1c
    303e:	82 17       	cp	r24, r18
    3040:	93 07       	cpc	r25, r19
    3042:	60 f0       	brcs	.+24     	; 0x305c <vTaskSwitchContext+0x4a>
    3044:	60 91 da 06 	lds	r22, 0x06DA	; 0x8006da <pxCurrentTCB>
    3048:	70 91 db 06 	lds	r23, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    304c:	80 91 da 06 	lds	r24, 0x06DA	; 0x8006da <pxCurrentTCB>
    3050:	90 91 db 06 	lds	r25, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    3054:	63 5e       	subi	r22, 0xE3	; 227
    3056:	7f 4f       	sbci	r23, 0xFF	; 255
    3058:	0e 94 fd 07 	call	0xffa	; 0xffa <vApplicationStackOverflowHook>
    305c:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <uxTopReadyPriority>
    3060:	28 2f       	mov	r18, r24
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	9b e0       	ldi	r25, 0x0B	; 11
    3066:	89 9f       	mul	r24, r25
    3068:	f0 01       	movw	r30, r0
    306a:	11 24       	eor	r1, r1
    306c:	e2 55       	subi	r30, 0x52	; 82
    306e:	f9 4f       	sbci	r31, 0xF9	; 249
    3070:	90 81       	ld	r25, Z
    3072:	91 11       	cpse	r25, r1
    3074:	0e c0       	rjmp	.+28     	; 0x3092 <vTaskSwitchContext+0x80>
    3076:	4b e0       	ldi	r20, 0x0B	; 11
    3078:	81 50       	subi	r24, 0x01	; 1
    307a:	28 2f       	mov	r18, r24
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	42 9f       	mul	r20, r18
    3080:	f0 01       	movw	r30, r0
    3082:	43 9f       	mul	r20, r19
    3084:	f0 0d       	add	r31, r0
    3086:	11 24       	eor	r1, r1
    3088:	e2 55       	subi	r30, 0x52	; 82
    308a:	f9 4f       	sbci	r31, 0xF9	; 249
    308c:	90 81       	ld	r25, Z
    308e:	99 23       	and	r25, r25
    3090:	99 f3       	breq	.-26     	; 0x3078 <vTaskSwitchContext+0x66>
    3092:	9b e0       	ldi	r25, 0x0B	; 11
    3094:	92 9f       	mul	r25, r18
    3096:	a0 01       	movw	r20, r0
    3098:	93 9f       	mul	r25, r19
    309a:	50 0d       	add	r21, r0
    309c:	11 24       	eor	r1, r1
    309e:	da 01       	movw	r26, r20
    30a0:	a2 55       	subi	r26, 0x52	; 82
    30a2:	b9 4f       	sbci	r27, 0xF9	; 249
    30a4:	11 96       	adiw	r26, 0x01	; 1
    30a6:	ed 91       	ld	r30, X+
    30a8:	fc 91       	ld	r31, X
    30aa:	12 97       	sbiw	r26, 0x02	; 2
    30ac:	04 80       	ldd	r0, Z+4	; 0x04
    30ae:	f5 81       	ldd	r31, Z+5	; 0x05
    30b0:	e0 2d       	mov	r30, r0
    30b2:	12 96       	adiw	r26, 0x02	; 2
    30b4:	fc 93       	st	X, r31
    30b6:	ee 93       	st	-X, r30
    30b8:	11 97       	sbiw	r26, 0x01	; 1
    30ba:	4f 54       	subi	r20, 0x4F	; 79
    30bc:	59 4f       	sbci	r21, 0xF9	; 249
    30be:	e4 17       	cp	r30, r20
    30c0:	f5 07       	cpc	r31, r21
    30c2:	29 f4       	brne	.+10     	; 0x30ce <vTaskSwitchContext+0xbc>
    30c4:	44 81       	ldd	r20, Z+4	; 0x04
    30c6:	55 81       	ldd	r21, Z+5	; 0x05
    30c8:	fd 01       	movw	r30, r26
    30ca:	52 83       	std	Z+2, r21	; 0x02
    30cc:	41 83       	std	Z+1, r20	; 0x01
    30ce:	9b e0       	ldi	r25, 0x0B	; 11
    30d0:	92 9f       	mul	r25, r18
    30d2:	f0 01       	movw	r30, r0
    30d4:	93 9f       	mul	r25, r19
    30d6:	f0 0d       	add	r31, r0
    30d8:	11 24       	eor	r1, r1
    30da:	e2 55       	subi	r30, 0x52	; 82
    30dc:	f9 4f       	sbci	r31, 0xF9	; 249
    30de:	01 80       	ldd	r0, Z+1	; 0x01
    30e0:	f2 81       	ldd	r31, Z+2	; 0x02
    30e2:	e0 2d       	mov	r30, r0
    30e4:	20 85       	ldd	r18, Z+8	; 0x08
    30e6:	31 85       	ldd	r19, Z+9	; 0x09
    30e8:	30 93 db 06 	sts	0x06DB, r19	; 0x8006db <pxCurrentTCB+0x1>
    30ec:	20 93 da 06 	sts	0x06DA, r18	; 0x8006da <pxCurrentTCB>
    30f0:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <uxTopReadyPriority>
    30f4:	08 95       	ret

000030f6 <vTaskSuspend>:
    30f6:	0f 93       	push	r16
    30f8:	1f 93       	push	r17
    30fa:	cf 93       	push	r28
    30fc:	df 93       	push	r29
    30fe:	ec 01       	movw	r28, r24
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	0f 92       	push	r0
    3106:	89 2b       	or	r24, r25
    3108:	21 f4       	brne	.+8      	; 0x3112 <vTaskSuspend+0x1c>
    310a:	c0 91 da 06 	lds	r28, 0x06DA	; 0x8006da <pxCurrentTCB>
    310e:	d0 91 db 06 	lds	r29, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    3112:	8e 01       	movw	r16, r28
    3114:	0e 5f       	subi	r16, 0xFE	; 254
    3116:	1f 4f       	sbci	r17, 0xFF	; 255
    3118:	c8 01       	movw	r24, r16
    311a:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    311e:	88 8d       	ldd	r24, Y+24	; 0x18
    3120:	99 8d       	ldd	r25, Y+25	; 0x19
    3122:	89 2b       	or	r24, r25
    3124:	21 f0       	breq	.+8      	; 0x312e <vTaskSuspend+0x38>
    3126:	ce 01       	movw	r24, r28
    3128:	0e 96       	adiw	r24, 0x0e	; 14
    312a:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    312e:	b8 01       	movw	r22, r16
    3130:	82 e7       	ldi	r24, 0x72	; 114
    3132:	96 e0       	ldi	r25, 0x06	; 6
    3134:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3138:	8a a9       	ldd	r24, Y+50	; 0x32
    313a:	81 30       	cpi	r24, 0x01	; 1
    313c:	09 f4       	brne	.+2      	; 0x3140 <vTaskSuspend+0x4a>
    313e:	1a aa       	std	Y+50, r1	; 0x32
    3140:	0f 90       	pop	r0
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <xSchedulerRunning>
    3148:	88 23       	and	r24, r24
    314a:	31 f0       	breq	.+12     	; 0x3158 <vTaskSuspend+0x62>
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	0f 92       	push	r0
    3152:	ab db       	rcall	.-2218   	; 0x28aa <prvResetNextTaskUnblockTime>
    3154:	0f 90       	pop	r0
    3156:	0f be       	out	0x3f, r0	; 63
    3158:	80 91 da 06 	lds	r24, 0x06DA	; 0x8006da <pxCurrentTCB>
    315c:	90 91 db 06 	lds	r25, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    3160:	c8 17       	cp	r28, r24
    3162:	d9 07       	cpc	r29, r25
    3164:	99 f4       	brne	.+38     	; 0x318c <vTaskSuspend+0x96>
    3166:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <xSchedulerRunning>
    316a:	88 23       	and	r24, r24
    316c:	19 f0       	breq	.+6      	; 0x3174 <vTaskSuspend+0x7e>
    316e:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3172:	0c c0       	rjmp	.+24     	; 0x318c <vTaskSuspend+0x96>
    3174:	90 91 72 06 	lds	r25, 0x0672	; 0x800672 <xSuspendedTaskList>
    3178:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <uxCurrentNumberOfTasks>
    317c:	98 13       	cpse	r25, r24
    317e:	05 c0       	rjmp	.+10     	; 0x318a <vTaskSuspend+0x94>
    3180:	10 92 db 06 	sts	0x06DB, r1	; 0x8006db <pxCurrentTCB+0x1>
    3184:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <pxCurrentTCB>
    3188:	01 c0       	rjmp	.+2      	; 0x318c <vTaskSuspend+0x96>
    318a:	43 df       	rcall	.-378    	; 0x3012 <vTaskSwitchContext>
    318c:	df 91       	pop	r29
    318e:	cf 91       	pop	r28
    3190:	1f 91       	pop	r17
    3192:	0f 91       	pop	r16
    3194:	08 95       	ret

00003196 <vTaskPlaceOnEventList>:
    3196:	cf 92       	push	r12
    3198:	df 92       	push	r13
    319a:	ef 92       	push	r14
    319c:	ff 92       	push	r15
    319e:	6a 01       	movw	r12, r20
    31a0:	7b 01       	movw	r14, r22
    31a2:	60 91 da 06 	lds	r22, 0x06DA	; 0x8006da <pxCurrentTCB>
    31a6:	70 91 db 06 	lds	r23, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    31aa:	62 5f       	subi	r22, 0xF2	; 242
    31ac:	7f 4f       	sbci	r23, 0xFF	; 255
    31ae:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    31b2:	41 e0       	ldi	r20, 0x01	; 1
    31b4:	c7 01       	movw	r24, r14
    31b6:	b6 01       	movw	r22, r12
    31b8:	a2 db       	rcall	.-2236   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    31ba:	ff 90       	pop	r15
    31bc:	ef 90       	pop	r14
    31be:	df 90       	pop	r13
    31c0:	cf 90       	pop	r12
    31c2:	08 95       	ret

000031c4 <vTaskPlaceOnEventListRestricted>:
    31c4:	cf 92       	push	r12
    31c6:	df 92       	push	r13
    31c8:	ef 92       	push	r14
    31ca:	ff 92       	push	r15
    31cc:	cf 93       	push	r28
    31ce:	6a 01       	movw	r12, r20
    31d0:	7b 01       	movw	r14, r22
    31d2:	c2 2f       	mov	r28, r18
    31d4:	60 91 da 06 	lds	r22, 0x06DA	; 0x8006da <pxCurrentTCB>
    31d8:	70 91 db 06 	lds	r23, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    31dc:	62 5f       	subi	r22, 0xF2	; 242
    31de:	7f 4f       	sbci	r23, 0xFF	; 255
    31e0:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    31e4:	cc 23       	and	r28, r28
    31e6:	21 f0       	breq	.+8      	; 0x31f0 <vTaskPlaceOnEventListRestricted+0x2c>
    31e8:	cc 24       	eor	r12, r12
    31ea:	ca 94       	dec	r12
    31ec:	dc 2c       	mov	r13, r12
    31ee:	76 01       	movw	r14, r12
    31f0:	4c 2f       	mov	r20, r28
    31f2:	c7 01       	movw	r24, r14
    31f4:	b6 01       	movw	r22, r12
    31f6:	83 db       	rcall	.-2298   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    31f8:	cf 91       	pop	r28
    31fa:	ff 90       	pop	r15
    31fc:	ef 90       	pop	r14
    31fe:	df 90       	pop	r13
    3200:	cf 90       	pop	r12
    3202:	08 95       	ret

00003204 <xTaskRemoveFromEventList>:
    3204:	0f 93       	push	r16
    3206:	1f 93       	push	r17
    3208:	cf 93       	push	r28
    320a:	df 93       	push	r29
    320c:	dc 01       	movw	r26, r24
    320e:	17 96       	adiw	r26, 0x07	; 7
    3210:	ed 91       	ld	r30, X+
    3212:	fc 91       	ld	r31, X
    3214:	18 97       	sbiw	r26, 0x08	; 8
    3216:	c0 85       	ldd	r28, Z+8	; 0x08
    3218:	d1 85       	ldd	r29, Z+9	; 0x09
    321a:	8e 01       	movw	r16, r28
    321c:	02 5f       	subi	r16, 0xF2	; 242
    321e:	1f 4f       	sbci	r17, 0xFF	; 255
    3220:	c8 01       	movw	r24, r16
    3222:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3226:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <uxSchedulerSuspended>
    322a:	81 11       	cpse	r24, r1
    322c:	16 c0       	rjmp	.+44     	; 0x325a <xTaskRemoveFromEventList+0x56>
    322e:	0c 50       	subi	r16, 0x0C	; 12
    3230:	11 09       	sbc	r17, r1
    3232:	c8 01       	movw	r24, r16
    3234:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3238:	8a 8d       	ldd	r24, Y+26	; 0x1a
    323a:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <uxTopReadyPriority>
    323e:	98 17       	cp	r25, r24
    3240:	10 f4       	brcc	.+4      	; 0x3246 <xTaskRemoveFromEventList+0x42>
    3242:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <uxTopReadyPriority>
    3246:	bb e0       	ldi	r27, 0x0B	; 11
    3248:	8b 9f       	mul	r24, r27
    324a:	c0 01       	movw	r24, r0
    324c:	11 24       	eor	r1, r1
    324e:	b8 01       	movw	r22, r16
    3250:	82 55       	subi	r24, 0x52	; 82
    3252:	99 4f       	sbci	r25, 0xF9	; 249
    3254:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3258:	05 c0       	rjmp	.+10     	; 0x3264 <xTaskRemoveFromEventList+0x60>
    325a:	b8 01       	movw	r22, r16
    325c:	89 e8       	ldi	r24, 0x89	; 137
    325e:	96 e0       	ldi	r25, 0x06	; 6
    3260:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3264:	e0 91 da 06 	lds	r30, 0x06DA	; 0x8006da <pxCurrentTCB>
    3268:	f0 91 db 06 	lds	r31, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    326c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    326e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3270:	89 17       	cp	r24, r25
    3272:	20 f4       	brcc	.+8      	; 0x327c <xTaskRemoveFromEventList+0x78>
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <xYieldPending>
    327a:	01 c0       	rjmp	.+2      	; 0x327e <xTaskRemoveFromEventList+0x7a>
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	df 91       	pop	r29
    3280:	cf 91       	pop	r28
    3282:	1f 91       	pop	r17
    3284:	0f 91       	pop	r16
    3286:	08 95       	ret

00003288 <vTaskInternalSetTimeOutState>:
    3288:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <xNumOfOverflows>
    328c:	fc 01       	movw	r30, r24
    328e:	20 83       	st	Z, r18
    3290:	40 91 6d 06 	lds	r20, 0x066D	; 0x80066d <xTickCount>
    3294:	50 91 6e 06 	lds	r21, 0x066E	; 0x80066e <xTickCount+0x1>
    3298:	60 91 6f 06 	lds	r22, 0x066F	; 0x80066f <xTickCount+0x2>
    329c:	70 91 70 06 	lds	r23, 0x0670	; 0x800670 <xTickCount+0x3>
    32a0:	41 83       	std	Z+1, r20	; 0x01
    32a2:	52 83       	std	Z+2, r21	; 0x02
    32a4:	63 83       	std	Z+3, r22	; 0x03
    32a6:	74 83       	std	Z+4, r23	; 0x04
    32a8:	08 95       	ret

000032aa <xTaskCheckForTimeOut>:
    32aa:	cf 92       	push	r12
    32ac:	df 92       	push	r13
    32ae:	ef 92       	push	r14
    32b0:	ff 92       	push	r15
    32b2:	0f 93       	push	r16
    32b4:	1f 93       	push	r17
    32b6:	cf 93       	push	r28
    32b8:	df 93       	push	r29
    32ba:	fb 01       	movw	r30, r22
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	f8 94       	cli
    32c0:	0f 92       	push	r0
    32c2:	40 91 6d 06 	lds	r20, 0x066D	; 0x80066d <xTickCount>
    32c6:	50 91 6e 06 	lds	r21, 0x066E	; 0x80066e <xTickCount+0x1>
    32ca:	60 91 6f 06 	lds	r22, 0x066F	; 0x80066f <xTickCount+0x2>
    32ce:	70 91 70 06 	lds	r23, 0x0670	; 0x800670 <xTickCount+0x3>
    32d2:	00 81       	ld	r16, Z
    32d4:	11 81       	ldd	r17, Z+1	; 0x01
    32d6:	22 81       	ldd	r18, Z+2	; 0x02
    32d8:	33 81       	ldd	r19, Z+3	; 0x03
    32da:	0f 3f       	cpi	r16, 0xFF	; 255
    32dc:	af ef       	ldi	r26, 0xFF	; 255
    32de:	1a 07       	cpc	r17, r26
    32e0:	2a 07       	cpc	r18, r26
    32e2:	3a 07       	cpc	r19, r26
    32e4:	49 f1       	breq	.+82     	; 0x3338 <xTaskCheckForTimeOut+0x8e>
    32e6:	ec 01       	movw	r28, r24
    32e8:	c9 80       	ldd	r12, Y+1	; 0x01
    32ea:	da 80       	ldd	r13, Y+2	; 0x02
    32ec:	eb 80       	ldd	r14, Y+3	; 0x03
    32ee:	fc 80       	ldd	r15, Y+4	; 0x04
    32f0:	a0 91 68 06 	lds	r26, 0x0668	; 0x800668 <xNumOfOverflows>
    32f4:	b8 81       	ld	r27, Y
    32f6:	ba 17       	cp	r27, r26
    32f8:	29 f0       	breq	.+10     	; 0x3304 <xTaskCheckForTimeOut+0x5a>
    32fa:	4c 15       	cp	r20, r12
    32fc:	5d 05       	cpc	r21, r13
    32fe:	6e 05       	cpc	r22, r14
    3300:	7f 05       	cpc	r23, r15
    3302:	e0 f4       	brcc	.+56     	; 0x333c <xTaskCheckForTimeOut+0x92>
    3304:	4c 19       	sub	r20, r12
    3306:	5d 09       	sbc	r21, r13
    3308:	6e 09       	sbc	r22, r14
    330a:	7f 09       	sbc	r23, r15
    330c:	40 17       	cp	r20, r16
    330e:	51 07       	cpc	r21, r17
    3310:	62 07       	cpc	r22, r18
    3312:	73 07       	cpc	r23, r19
    3314:	58 f4       	brcc	.+22     	; 0x332c <xTaskCheckForTimeOut+0x82>
    3316:	04 1b       	sub	r16, r20
    3318:	15 0b       	sbc	r17, r21
    331a:	26 0b       	sbc	r18, r22
    331c:	37 0b       	sbc	r19, r23
    331e:	00 83       	st	Z, r16
    3320:	11 83       	std	Z+1, r17	; 0x01
    3322:	22 83       	std	Z+2, r18	; 0x02
    3324:	33 83       	std	Z+3, r19	; 0x03
    3326:	b0 df       	rcall	.-160    	; 0x3288 <vTaskInternalSetTimeOutState>
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	09 c0       	rjmp	.+18     	; 0x333e <xTaskCheckForTimeOut+0x94>
    332c:	10 82       	st	Z, r1
    332e:	11 82       	std	Z+1, r1	; 0x01
    3330:	12 82       	std	Z+2, r1	; 0x02
    3332:	13 82       	std	Z+3, r1	; 0x03
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	03 c0       	rjmp	.+6      	; 0x333e <xTaskCheckForTimeOut+0x94>
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	01 c0       	rjmp	.+2      	; 0x333e <xTaskCheckForTimeOut+0x94>
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	0f 90       	pop	r0
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	1f 91       	pop	r17
    3348:	0f 91       	pop	r16
    334a:	ff 90       	pop	r15
    334c:	ef 90       	pop	r14
    334e:	df 90       	pop	r13
    3350:	cf 90       	pop	r12
    3352:	08 95       	ret

00003354 <vTaskMissedYield>:
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <xYieldPending>
    335a:	08 95       	ret

0000335c <xTaskGetSchedulerState>:
    335c:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <xSchedulerRunning>
    3360:	88 23       	and	r24, r24
    3362:	31 f0       	breq	.+12     	; 0x3370 <xTaskGetSchedulerState+0x14>
    3364:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <uxSchedulerSuspended>
    3368:	88 23       	and	r24, r24
    336a:	21 f0       	breq	.+8      	; 0x3374 <xTaskGetSchedulerState+0x18>
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	08 95       	ret
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	08 95       	ret
    3374:	82 e0       	ldi	r24, 0x02	; 2
    3376:	08 95       	ret

00003378 <xTaskPriorityInherit>:
    3378:	0f 93       	push	r16
    337a:	1f 93       	push	r17
    337c:	cf 93       	push	r28
    337e:	df 93       	push	r29
    3380:	fc 01       	movw	r30, r24
    3382:	89 2b       	or	r24, r25
    3384:	09 f4       	brne	.+2      	; 0x3388 <xTaskPriorityInherit+0x10>
    3386:	60 c0       	rjmp	.+192    	; 0x3448 <xTaskPriorityInherit+0xd0>
    3388:	82 8d       	ldd	r24, Z+26	; 0x1a
    338a:	a0 91 da 06 	lds	r26, 0x06DA	; 0x8006da <pxCurrentTCB>
    338e:	b0 91 db 06 	lds	r27, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    3392:	5a 96       	adiw	r26, 0x1a	; 26
    3394:	9c 91       	ld	r25, X
    3396:	89 17       	cp	r24, r25
    3398:	08 f0       	brcs	.+2      	; 0x339c <xTaskPriorityInherit+0x24>
    339a:	4a c0       	rjmp	.+148    	; 0x3430 <xTaskPriorityInherit+0xb8>
    339c:	46 85       	ldd	r20, Z+14	; 0x0e
    339e:	57 85       	ldd	r21, Z+15	; 0x0f
    33a0:	60 89       	ldd	r22, Z+16	; 0x10
    33a2:	71 89       	ldd	r23, Z+17	; 0x11
    33a4:	77 23       	and	r23, r23
    33a6:	94 f0       	brlt	.+36     	; 0x33cc <xTaskPriorityInherit+0x54>
    33a8:	a0 91 da 06 	lds	r26, 0x06DA	; 0x8006da <pxCurrentTCB>
    33ac:	b0 91 db 06 	lds	r27, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    33b0:	5a 96       	adiw	r26, 0x1a	; 26
    33b2:	9c 91       	ld	r25, X
    33b4:	44 e0       	ldi	r20, 0x04	; 4
    33b6:	50 e0       	ldi	r21, 0x00	; 0
    33b8:	60 e0       	ldi	r22, 0x00	; 0
    33ba:	70 e0       	ldi	r23, 0x00	; 0
    33bc:	49 1b       	sub	r20, r25
    33be:	51 09       	sbc	r21, r1
    33c0:	61 09       	sbc	r22, r1
    33c2:	71 09       	sbc	r23, r1
    33c4:	46 87       	std	Z+14, r20	; 0x0e
    33c6:	57 87       	std	Z+15, r21	; 0x0f
    33c8:	60 8b       	std	Z+16, r22	; 0x10
    33ca:	71 8b       	std	Z+17, r23	; 0x11
    33cc:	2b e0       	ldi	r18, 0x0B	; 11
    33ce:	82 9f       	mul	r24, r18
    33d0:	c0 01       	movw	r24, r0
    33d2:	11 24       	eor	r1, r1
    33d4:	82 55       	subi	r24, 0x52	; 82
    33d6:	99 4f       	sbci	r25, 0xF9	; 249
    33d8:	24 85       	ldd	r18, Z+12	; 0x0c
    33da:	35 85       	ldd	r19, Z+13	; 0x0d
    33dc:	28 17       	cp	r18, r24
    33de:	39 07       	cpc	r19, r25
    33e0:	f1 f4       	brne	.+60     	; 0x341e <xTaskPriorityInherit+0xa6>
    33e2:	8f 01       	movw	r16, r30
    33e4:	ef 01       	movw	r28, r30
    33e6:	22 96       	adiw	r28, 0x02	; 2
    33e8:	ce 01       	movw	r24, r28
    33ea:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    33ee:	e0 91 da 06 	lds	r30, 0x06DA	; 0x8006da <pxCurrentTCB>
    33f2:	f0 91 db 06 	lds	r31, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    33f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    33f8:	f8 01       	movw	r30, r16
    33fa:	82 8f       	std	Z+26, r24	; 0x1a
    33fc:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <uxTopReadyPriority>
    3400:	98 17       	cp	r25, r24
    3402:	10 f4       	brcc	.+4      	; 0x3408 <xTaskPriorityInherit+0x90>
    3404:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <uxTopReadyPriority>
    3408:	fb e0       	ldi	r31, 0x0B	; 11
    340a:	8f 9f       	mul	r24, r31
    340c:	c0 01       	movw	r24, r0
    340e:	11 24       	eor	r1, r1
    3410:	be 01       	movw	r22, r28
    3412:	82 55       	subi	r24, 0x52	; 82
    3414:	99 4f       	sbci	r25, 0xF9	; 249
    3416:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	16 c0       	rjmp	.+44     	; 0x344a <xTaskPriorityInherit+0xd2>
    341e:	a0 91 da 06 	lds	r26, 0x06DA	; 0x8006da <pxCurrentTCB>
    3422:	b0 91 db 06 	lds	r27, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    3426:	5a 96       	adiw	r26, 0x1a	; 26
    3428:	8c 91       	ld	r24, X
    342a:	82 8f       	std	Z+26, r24	; 0x1a
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	0d c0       	rjmp	.+26     	; 0x344a <xTaskPriorityInherit+0xd2>
    3430:	a0 91 da 06 	lds	r26, 0x06DA	; 0x8006da <pxCurrentTCB>
    3434:	b0 91 db 06 	lds	r27, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	24 a5       	ldd	r18, Z+44	; 0x2c
    343c:	5a 96       	adiw	r26, 0x1a	; 26
    343e:	9c 91       	ld	r25, X
    3440:	29 17       	cp	r18, r25
    3442:	18 f0       	brcs	.+6      	; 0x344a <xTaskPriorityInherit+0xd2>
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	01 c0       	rjmp	.+2      	; 0x344a <xTaskPriorityInherit+0xd2>
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	df 91       	pop	r29
    344c:	cf 91       	pop	r28
    344e:	1f 91       	pop	r17
    3450:	0f 91       	pop	r16
    3452:	08 95       	ret

00003454 <xTaskPriorityDisinherit>:
    3454:	0f 93       	push	r16
    3456:	1f 93       	push	r17
    3458:	cf 93       	push	r28
    345a:	df 93       	push	r29
    345c:	fc 01       	movw	r30, r24
    345e:	89 2b       	or	r24, r25
    3460:	79 f1       	breq	.+94     	; 0x34c0 <xTaskPriorityDisinherit+0x6c>
    3462:	85 a5       	ldd	r24, Z+45	; 0x2d
    3464:	81 50       	subi	r24, 0x01	; 1
    3466:	85 a7       	std	Z+45, r24	; 0x2d
    3468:	22 8d       	ldd	r18, Z+26	; 0x1a
    346a:	94 a5       	ldd	r25, Z+44	; 0x2c
    346c:	29 17       	cp	r18, r25
    346e:	51 f1       	breq	.+84     	; 0x34c4 <xTaskPriorityDisinherit+0x70>
    3470:	81 11       	cpse	r24, r1
    3472:	2a c0       	rjmp	.+84     	; 0x34c8 <xTaskPriorityDisinherit+0x74>
    3474:	ef 01       	movw	r28, r30
    3476:	8f 01       	movw	r16, r30
    3478:	0e 5f       	subi	r16, 0xFE	; 254
    347a:	1f 4f       	sbci	r17, 0xFF	; 255
    347c:	c8 01       	movw	r24, r16
    347e:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3482:	8c a5       	ldd	r24, Y+44	; 0x2c
    3484:	8a 8f       	std	Y+26, r24	; 0x1a
    3486:	44 e0       	ldi	r20, 0x04	; 4
    3488:	50 e0       	ldi	r21, 0x00	; 0
    348a:	60 e0       	ldi	r22, 0x00	; 0
    348c:	70 e0       	ldi	r23, 0x00	; 0
    348e:	48 1b       	sub	r20, r24
    3490:	51 09       	sbc	r21, r1
    3492:	61 09       	sbc	r22, r1
    3494:	71 09       	sbc	r23, r1
    3496:	4e 87       	std	Y+14, r20	; 0x0e
    3498:	5f 87       	std	Y+15, r21	; 0x0f
    349a:	68 8b       	std	Y+16, r22	; 0x10
    349c:	79 8b       	std	Y+17, r23	; 0x11
    349e:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <uxTopReadyPriority>
    34a2:	98 17       	cp	r25, r24
    34a4:	10 f4       	brcc	.+4      	; 0x34aa <xTaskPriorityDisinherit+0x56>
    34a6:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <uxTopReadyPriority>
    34aa:	2b e0       	ldi	r18, 0x0B	; 11
    34ac:	82 9f       	mul	r24, r18
    34ae:	c0 01       	movw	r24, r0
    34b0:	11 24       	eor	r1, r1
    34b2:	b8 01       	movw	r22, r16
    34b4:	82 55       	subi	r24, 0x52	; 82
    34b6:	99 4f       	sbci	r25, 0xF9	; 249
    34b8:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	05 c0       	rjmp	.+10     	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	03 c0       	rjmp	.+6      	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	01 c0       	rjmp	.+2      	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	df 91       	pop	r29
    34cc:	cf 91       	pop	r28
    34ce:	1f 91       	pop	r17
    34d0:	0f 91       	pop	r16
    34d2:	08 95       	ret

000034d4 <vTaskPriorityDisinheritAfterTimeout>:
    34d4:	0f 93       	push	r16
    34d6:	1f 93       	push	r17
    34d8:	cf 93       	push	r28
    34da:	df 93       	push	r29
    34dc:	fc 01       	movw	r30, r24
    34de:	89 2b       	or	r24, r25
    34e0:	09 f4       	brne	.+2      	; 0x34e4 <vTaskPriorityDisinheritAfterTimeout+0x10>
    34e2:	3f c0       	rjmp	.+126    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34e4:	84 a5       	ldd	r24, Z+44	; 0x2c
    34e6:	86 17       	cp	r24, r22
    34e8:	08 f4       	brcc	.+2      	; 0x34ec <vTaskPriorityDisinheritAfterTimeout+0x18>
    34ea:	86 2f       	mov	r24, r22
    34ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    34ee:	98 17       	cp	r25, r24
    34f0:	c1 f1       	breq	.+112    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34f2:	25 a5       	ldd	r18, Z+45	; 0x2d
    34f4:	21 30       	cpi	r18, 0x01	; 1
    34f6:	a9 f5       	brne	.+106    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34f8:	82 8f       	std	Z+26, r24	; 0x1a
    34fa:	46 85       	ldd	r20, Z+14	; 0x0e
    34fc:	57 85       	ldd	r21, Z+15	; 0x0f
    34fe:	60 89       	ldd	r22, Z+16	; 0x10
    3500:	71 89       	ldd	r23, Z+17	; 0x11
    3502:	77 23       	and	r23, r23
    3504:	64 f0       	brlt	.+24     	; 0x351e <vTaskPriorityDisinheritAfterTimeout+0x4a>
    3506:	44 e0       	ldi	r20, 0x04	; 4
    3508:	50 e0       	ldi	r21, 0x00	; 0
    350a:	60 e0       	ldi	r22, 0x00	; 0
    350c:	70 e0       	ldi	r23, 0x00	; 0
    350e:	48 1b       	sub	r20, r24
    3510:	51 09       	sbc	r21, r1
    3512:	61 09       	sbc	r22, r1
    3514:	71 09       	sbc	r23, r1
    3516:	46 87       	std	Z+14, r20	; 0x0e
    3518:	57 87       	std	Z+15, r21	; 0x0f
    351a:	60 8b       	std	Z+16, r22	; 0x10
    351c:	71 8b       	std	Z+17, r23	; 0x11
    351e:	2b e0       	ldi	r18, 0x0B	; 11
    3520:	92 9f       	mul	r25, r18
    3522:	c0 01       	movw	r24, r0
    3524:	11 24       	eor	r1, r1
    3526:	82 55       	subi	r24, 0x52	; 82
    3528:	99 4f       	sbci	r25, 0xF9	; 249
    352a:	24 85       	ldd	r18, Z+12	; 0x0c
    352c:	35 85       	ldd	r19, Z+13	; 0x0d
    352e:	28 17       	cp	r18, r24
    3530:	39 07       	cpc	r19, r25
    3532:	b9 f4       	brne	.+46     	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3534:	ef 01       	movw	r28, r30
    3536:	8f 01       	movw	r16, r30
    3538:	0e 5f       	subi	r16, 0xFE	; 254
    353a:	1f 4f       	sbci	r17, 0xFF	; 255
    353c:	c8 01       	movw	r24, r16
    353e:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3542:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3544:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <uxTopReadyPriority>
    3548:	98 17       	cp	r25, r24
    354a:	10 f4       	brcc	.+4      	; 0x3550 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    354c:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <uxTopReadyPriority>
    3550:	2b e0       	ldi	r18, 0x0B	; 11
    3552:	82 9f       	mul	r24, r18
    3554:	c0 01       	movw	r24, r0
    3556:	11 24       	eor	r1, r1
    3558:	b8 01       	movw	r22, r16
    355a:	82 55       	subi	r24, 0x52	; 82
    355c:	99 4f       	sbci	r25, 0xF9	; 249
    355e:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3562:	df 91       	pop	r29
    3564:	cf 91       	pop	r28
    3566:	1f 91       	pop	r17
    3568:	0f 91       	pop	r16
    356a:	08 95       	ret

0000356c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    356c:	80 91 da 06 	lds	r24, 0x06DA	; 0x8006da <pxCurrentTCB>
    3570:	90 91 db 06 	lds	r25, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    3574:	89 2b       	or	r24, r25
    3576:	39 f0       	breq	.+14     	; 0x3586 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    3578:	e0 91 da 06 	lds	r30, 0x06DA	; 0x8006da <pxCurrentTCB>
    357c:	f0 91 db 06 	lds	r31, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
    3580:	85 a5       	ldd	r24, Z+45	; 0x2d
    3582:	8f 5f       	subi	r24, 0xFF	; 255
    3584:	85 a7       	std	Z+45, r24	; 0x2d
		}

		return pxCurrentTCB;
    3586:	80 91 da 06 	lds	r24, 0x06DA	; 0x8006da <pxCurrentTCB>
    358a:	90 91 db 06 	lds	r25, 0x06DB	; 0x8006db <pxCurrentTCB+0x1>
	}
    358e:	08 95       	ret

00003590 <prvInsertTimerInActiveList>:
{
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );
	return pxTimer->pcTimerName;
}
    3590:	cf 92       	push	r12
    3592:	df 92       	push	r13
    3594:	ef 92       	push	r14
    3596:	ff 92       	push	r15
    3598:	0f 93       	push	r16
    359a:	1f 93       	push	r17
    359c:	fc 01       	movw	r30, r24
    359e:	42 83       	std	Z+2, r20	; 0x02
    35a0:	53 83       	std	Z+3, r21	; 0x03
    35a2:	64 83       	std	Z+4, r22	; 0x04
    35a4:	75 83       	std	Z+5, r23	; 0x05
    35a6:	93 87       	std	Z+11, r25	; 0x0b
    35a8:	82 87       	std	Z+10, r24	; 0x0a
    35aa:	04 17       	cp	r16, r20
    35ac:	15 07       	cpc	r17, r21
    35ae:	26 07       	cpc	r18, r22
    35b0:	37 07       	cpc	r19, r23
    35b2:	c0 f0       	brcs	.+48     	; 0x35e4 <prvInsertTimerInActiveList+0x54>
    35b4:	0c 19       	sub	r16, r12
    35b6:	1d 09       	sbc	r17, r13
    35b8:	2e 09       	sbc	r18, r14
    35ba:	3f 09       	sbc	r19, r15
    35bc:	86 85       	ldd	r24, Z+14	; 0x0e
    35be:	97 85       	ldd	r25, Z+15	; 0x0f
    35c0:	a0 89       	ldd	r26, Z+16	; 0x10
    35c2:	b1 89       	ldd	r27, Z+17	; 0x11
    35c4:	08 17       	cp	r16, r24
    35c6:	19 07       	cpc	r17, r25
    35c8:	2a 07       	cpc	r18, r26
    35ca:	3b 07       	cpc	r19, r27
    35cc:	00 f5       	brcc	.+64     	; 0x360e <prvInsertTimerInActiveList+0x7e>
    35ce:	bf 01       	movw	r22, r30
    35d0:	6e 5f       	subi	r22, 0xFE	; 254
    35d2:	7f 4f       	sbci	r23, 0xFF	; 255
    35d4:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <pxOverflowTimerList>
    35d8:	90 91 e5 06 	lds	r25, 0x06E5	; 0x8006e5 <pxOverflowTimerList+0x1>
    35dc:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	18 c0       	rjmp	.+48     	; 0x3614 <prvInsertTimerInActiveList+0x84>
    35e4:	0c 15       	cp	r16, r12
    35e6:	1d 05       	cpc	r17, r13
    35e8:	2e 05       	cpc	r18, r14
    35ea:	3f 05       	cpc	r19, r15
    35ec:	28 f4       	brcc	.+10     	; 0x35f8 <prvInsertTimerInActiveList+0x68>
    35ee:	4c 15       	cp	r20, r12
    35f0:	5d 05       	cpc	r21, r13
    35f2:	6e 05       	cpc	r22, r14
    35f4:	7f 05       	cpc	r23, r15
    35f6:	68 f4       	brcc	.+26     	; 0x3612 <prvInsertTimerInActiveList+0x82>
    35f8:	bf 01       	movw	r22, r30
    35fa:	6e 5f       	subi	r22, 0xFE	; 254
    35fc:	7f 4f       	sbci	r23, 0xFF	; 255
    35fe:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <pxCurrentTimerList>
    3602:	90 91 e7 06 	lds	r25, 0x06E7	; 0x8006e7 <pxCurrentTimerList+0x1>
    3606:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	03 c0       	rjmp	.+6      	; 0x3614 <prvInsertTimerInActiveList+0x84>
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	01 c0       	rjmp	.+2      	; 0x3614 <prvInsertTimerInActiveList+0x84>
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	1f 91       	pop	r17
    3616:	0f 91       	pop	r16
    3618:	ff 90       	pop	r15
    361a:	ef 90       	pop	r14
    361c:	df 90       	pop	r13
    361e:	cf 90       	pop	r12
    3620:	08 95       	ret

00003622 <prvCheckForValidListAndQueue>:
    3622:	0f b6       	in	r0, 0x3f	; 63
    3624:	f8 94       	cli
    3626:	0f 92       	push	r0
    3628:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <xTimerQueue>
    362c:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <xTimerQueue+0x1>
    3630:	89 2b       	or	r24, r25
    3632:	e9 f4       	brne	.+58     	; 0x366e <prvCheckForValidListAndQueue+0x4c>
    3634:	83 ef       	ldi	r24, 0xF3	; 243
    3636:	96 e0       	ldi	r25, 0x06	; 6
    3638:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    363c:	88 ee       	ldi	r24, 0xE8	; 232
    363e:	96 e0       	ldi	r25, 0x06	; 6
    3640:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    3644:	83 ef       	ldi	r24, 0xF3	; 243
    3646:	96 e0       	ldi	r25, 0x06	; 6
    3648:	90 93 e7 06 	sts	0x06E7, r25	; 0x8006e7 <pxCurrentTimerList+0x1>
    364c:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <pxCurrentTimerList>
    3650:	88 ee       	ldi	r24, 0xE8	; 232
    3652:	96 e0       	ldi	r25, 0x06	; 6
    3654:	90 93 e5 06 	sts	0x06E5, r25	; 0x8006e5 <pxOverflowTimerList+0x1>
    3658:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <pxOverflowTimerList>
    365c:	40 e0       	ldi	r20, 0x00	; 0
    365e:	67 e0       	ldi	r22, 0x07	; 7
    3660:	8a e0       	ldi	r24, 0x0A	; 10
    3662:	0e 94 a7 09 	call	0x134e	; 0x134e <xQueueGenericCreate>
    3666:	90 93 e3 06 	sts	0x06E3, r25	; 0x8006e3 <xTimerQueue+0x1>
    366a:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <xTimerQueue>
    366e:	0f 90       	pop	r0
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	08 95       	ret

00003674 <xTimerCreateTimerTask>:
    3674:	ef 92       	push	r14
    3676:	ff 92       	push	r15
    3678:	0f 93       	push	r16
    367a:	d3 df       	rcall	.-90     	; 0x3622 <prvCheckForValidListAndQueue>
    367c:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <xTimerQueue>
    3680:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <xTimerQueue+0x1>
    3684:	89 2b       	or	r24, r25
    3686:	89 f0       	breq	.+34     	; 0x36aa <xTimerCreateTimerTask+0x36>
    3688:	0f 2e       	mov	r0, r31
    368a:	f0 ee       	ldi	r31, 0xE0	; 224
    368c:	ef 2e       	mov	r14, r31
    368e:	f6 e0       	ldi	r31, 0x06	; 6
    3690:	ff 2e       	mov	r15, r31
    3692:	f0 2d       	mov	r31, r0
    3694:	03 e0       	ldi	r16, 0x03	; 3
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	40 e8       	ldi	r20, 0x80	; 128
    369c:	50 e0       	ldi	r21, 0x00	; 0
    369e:	6b e1       	ldi	r22, 0x1B	; 27
    36a0:	72 e0       	ldi	r23, 0x02	; 2
    36a2:	85 e8       	ldi	r24, 0x85	; 133
    36a4:	9c e1       	ldi	r25, 0x1C	; 28
    36a6:	a2 d9       	rcall	.-3260   	; 0x29ec <xTaskCreate>
    36a8:	01 c0       	rjmp	.+2      	; 0x36ac <xTimerCreateTimerTask+0x38>
    36aa:	80 e0       	ldi	r24, 0x00	; 0
    36ac:	0f 91       	pop	r16
    36ae:	ff 90       	pop	r15
    36b0:	ef 90       	pop	r14
    36b2:	08 95       	ret

000036b4 <xTimerCreate>:
    36b4:	7f 92       	push	r7
    36b6:	8f 92       	push	r8
    36b8:	9f 92       	push	r9
    36ba:	af 92       	push	r10
    36bc:	bf 92       	push	r11
    36be:	cf 92       	push	r12
    36c0:	df 92       	push	r13
    36c2:	ef 92       	push	r14
    36c4:	ff 92       	push	r15
    36c6:	0f 93       	push	r16
    36c8:	1f 93       	push	r17
    36ca:	cf 93       	push	r28
    36cc:	df 93       	push	r29
    36ce:	6c 01       	movw	r12, r24
    36d0:	4a 01       	movw	r8, r20
    36d2:	5b 01       	movw	r10, r22
    36d4:	72 2e       	mov	r7, r18
    36d6:	87 e1       	ldi	r24, 0x17	; 23
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    36de:	ec 01       	movw	r28, r24
    36e0:	89 2b       	or	r24, r25
    36e2:	81 f0       	breq	.+32     	; 0x3704 <xTimerCreate+0x50>
    36e4:	9e df       	rcall	.-196    	; 0x3622 <prvCheckForValidListAndQueue>
    36e6:	d9 82       	std	Y+1, r13	; 0x01
    36e8:	c8 82       	st	Y, r12
    36ea:	8e 86       	std	Y+14, r8	; 0x0e
    36ec:	9f 86       	std	Y+15, r9	; 0x0f
    36ee:	a8 8a       	std	Y+16, r10	; 0x10
    36f0:	b9 8a       	std	Y+17, r11	; 0x11
    36f2:	7a 8a       	std	Y+18, r7	; 0x12
    36f4:	1c 8b       	std	Y+20, r17	; 0x14
    36f6:	0b 8b       	std	Y+19, r16	; 0x13
    36f8:	fe 8a       	std	Y+22, r15	; 0x16
    36fa:	ed 8a       	std	Y+21, r14	; 0x15
    36fc:	ce 01       	movw	r24, r28
    36fe:	02 96       	adiw	r24, 0x02	; 2
    3700:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    3704:	ce 01       	movw	r24, r28
    3706:	df 91       	pop	r29
    3708:	cf 91       	pop	r28
    370a:	1f 91       	pop	r17
    370c:	0f 91       	pop	r16
    370e:	ff 90       	pop	r15
    3710:	ef 90       	pop	r14
    3712:	df 90       	pop	r13
    3714:	cf 90       	pop	r12
    3716:	bf 90       	pop	r11
    3718:	af 90       	pop	r10
    371a:	9f 90       	pop	r9
    371c:	8f 90       	pop	r8
    371e:	7f 90       	pop	r7
    3720:	08 95       	ret

00003722 <xTimerGenericCommand>:
    3722:	8f 92       	push	r8
    3724:	9f 92       	push	r9
    3726:	af 92       	push	r10
    3728:	bf 92       	push	r11
    372a:	cf 92       	push	r12
    372c:	df 92       	push	r13
    372e:	ef 92       	push	r14
    3730:	ff 92       	push	r15
    3732:	0f 93       	push	r16
    3734:	1f 93       	push	r17
    3736:	cf 93       	push	r28
    3738:	df 93       	push	r29
    373a:	cd b7       	in	r28, 0x3d	; 61
    373c:	de b7       	in	r29, 0x3e	; 62
    373e:	27 97       	sbiw	r28, 0x07	; 7
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	f8 94       	cli
    3744:	de bf       	out	0x3e, r29	; 62
    3746:	0f be       	out	0x3f, r0	; 63
    3748:	cd bf       	out	0x3d, r28	; 61
    374a:	e0 91 e2 06 	lds	r30, 0x06E2	; 0x8006e2 <xTimerQueue>
    374e:	f0 91 e3 06 	lds	r31, 0x06E3	; 0x8006e3 <xTimerQueue+0x1>
    3752:	30 97       	sbiw	r30, 0x00	; 0
    3754:	81 f1       	breq	.+96     	; 0x37b6 <xTimerGenericCommand+0x94>
    3756:	69 83       	std	Y+1, r22	; 0x01
    3758:	2a 83       	std	Y+2, r18	; 0x02
    375a:	3b 83       	std	Y+3, r19	; 0x03
    375c:	4c 83       	std	Y+4, r20	; 0x04
    375e:	5d 83       	std	Y+5, r21	; 0x05
    3760:	9f 83       	std	Y+7, r25	; 0x07
    3762:	8e 83       	std	Y+6, r24	; 0x06
    3764:	66 30       	cpi	r22, 0x06	; 6
    3766:	f4 f4       	brge	.+60     	; 0x37a4 <xTimerGenericCommand+0x82>
    3768:	f9 dd       	rcall	.-1038   	; 0x335c <xTaskGetSchedulerState>
    376a:	82 30       	cpi	r24, 0x02	; 2
    376c:	69 f4       	brne	.+26     	; 0x3788 <xTimerGenericCommand+0x66>
    376e:	00 e0       	ldi	r16, 0x00	; 0
    3770:	a7 01       	movw	r20, r14
    3772:	96 01       	movw	r18, r12
    3774:	be 01       	movw	r22, r28
    3776:	6f 5f       	subi	r22, 0xFF	; 255
    3778:	7f 4f       	sbci	r23, 0xFF	; 255
    377a:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <xTimerQueue>
    377e:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <xTimerQueue+0x1>
    3782:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    3786:	18 c0       	rjmp	.+48     	; 0x37b8 <xTimerGenericCommand+0x96>
    3788:	00 e0       	ldi	r16, 0x00	; 0
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	a9 01       	movw	r20, r18
    3790:	be 01       	movw	r22, r28
    3792:	6f 5f       	subi	r22, 0xFF	; 255
    3794:	7f 4f       	sbci	r23, 0xFF	; 255
    3796:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <xTimerQueue>
    379a:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <xTimerQueue+0x1>
    379e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    37a2:	0a c0       	rjmp	.+20     	; 0x37b8 <xTimerGenericCommand+0x96>
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	a8 01       	movw	r20, r16
    37a8:	be 01       	movw	r22, r28
    37aa:	6f 5f       	subi	r22, 0xFF	; 255
    37ac:	7f 4f       	sbci	r23, 0xFF	; 255
    37ae:	cf 01       	movw	r24, r30
    37b0:	0e 94 90 0a 	call	0x1520	; 0x1520 <xQueueGenericSendFromISR>
    37b4:	01 c0       	rjmp	.+2      	; 0x37b8 <xTimerGenericCommand+0x96>
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	27 96       	adiw	r28, 0x07	; 7
    37ba:	0f b6       	in	r0, 0x3f	; 63
    37bc:	f8 94       	cli
    37be:	de bf       	out	0x3e, r29	; 62
    37c0:	0f be       	out	0x3f, r0	; 63
    37c2:	cd bf       	out	0x3d, r28	; 61
    37c4:	df 91       	pop	r29
    37c6:	cf 91       	pop	r28
    37c8:	1f 91       	pop	r17
    37ca:	0f 91       	pop	r16
    37cc:	ff 90       	pop	r15
    37ce:	ef 90       	pop	r14
    37d0:	df 90       	pop	r13
    37d2:	cf 90       	pop	r12
    37d4:	bf 90       	pop	r11
    37d6:	af 90       	pop	r10
    37d8:	9f 90       	pop	r9
    37da:	8f 90       	pop	r8
    37dc:	08 95       	ret

000037de <prvSampleTimeNow>:
    37de:	2f 92       	push	r2
    37e0:	3f 92       	push	r3
    37e2:	4f 92       	push	r4
    37e4:	5f 92       	push	r5
    37e6:	6f 92       	push	r6
    37e8:	7f 92       	push	r7
    37ea:	8f 92       	push	r8
    37ec:	9f 92       	push	r9
    37ee:	af 92       	push	r10
    37f0:	bf 92       	push	r11
    37f2:	cf 92       	push	r12
    37f4:	df 92       	push	r13
    37f6:	ef 92       	push	r14
    37f8:	ff 92       	push	r15
    37fa:	0f 93       	push	r16
    37fc:	1f 93       	push	r17
    37fe:	cf 93       	push	r28
    3800:	df 93       	push	r29
    3802:	1c 01       	movw	r2, r24
    3804:	8e da       	rcall	.-2788   	; 0x2d22 <xTaskGetTickCount>
    3806:	2b 01       	movw	r4, r22
    3808:	3c 01       	movw	r6, r24
    380a:	80 91 dc 06 	lds	r24, 0x06DC	; 0x8006dc <xLastTime.2378>
    380e:	90 91 dd 06 	lds	r25, 0x06DD	; 0x8006dd <xLastTime.2378+0x1>
    3812:	a0 91 de 06 	lds	r26, 0x06DE	; 0x8006de <xLastTime.2378+0x2>
    3816:	b0 91 df 06 	lds	r27, 0x06DF	; 0x8006df <xLastTime.2378+0x3>
    381a:	48 16       	cp	r4, r24
    381c:	59 06       	cpc	r5, r25
    381e:	6a 06       	cpc	r6, r26
    3820:	7b 06       	cpc	r7, r27
    3822:	08 f0       	brcs	.+2      	; 0x3826 <prvSampleTimeNow+0x48>
    3824:	53 c0       	rjmp	.+166    	; 0x38cc <prvSampleTimeNow+0xee>
    3826:	3b c0       	rjmp	.+118    	; 0x389e <prvSampleTimeNow+0xc0>
    3828:	07 80       	ldd	r0, Z+7	; 0x07
    382a:	f0 85       	ldd	r31, Z+8	; 0x08
    382c:	e0 2d       	mov	r30, r0
    382e:	80 80       	ld	r8, Z
    3830:	91 80       	ldd	r9, Z+1	; 0x01
    3832:	a2 80       	ldd	r10, Z+2	; 0x02
    3834:	b3 80       	ldd	r11, Z+3	; 0x03
    3836:	c0 85       	ldd	r28, Z+8	; 0x08
    3838:	d1 85       	ldd	r29, Z+9	; 0x09
    383a:	8e 01       	movw	r16, r28
    383c:	0e 5f       	subi	r16, 0xFE	; 254
    383e:	1f 4f       	sbci	r17, 0xFF	; 255
    3840:	c8 01       	movw	r24, r16
    3842:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3846:	ed 89       	ldd	r30, Y+21	; 0x15
    3848:	fe 89       	ldd	r31, Y+22	; 0x16
    384a:	ce 01       	movw	r24, r28
    384c:	19 95       	eicall
    384e:	8a 89       	ldd	r24, Y+18	; 0x12
    3850:	81 30       	cpi	r24, 0x01	; 1
    3852:	29 f5       	brne	.+74     	; 0x389e <prvSampleTimeNow+0xc0>
    3854:	8e 85       	ldd	r24, Y+14	; 0x0e
    3856:	9f 85       	ldd	r25, Y+15	; 0x0f
    3858:	a8 89       	ldd	r26, Y+16	; 0x10
    385a:	b9 89       	ldd	r27, Y+17	; 0x11
    385c:	88 0d       	add	r24, r8
    385e:	99 1d       	adc	r25, r9
    3860:	aa 1d       	adc	r26, r10
    3862:	bb 1d       	adc	r27, r11
    3864:	88 16       	cp	r8, r24
    3866:	99 06       	cpc	r9, r25
    3868:	aa 06       	cpc	r10, r26
    386a:	bb 06       	cpc	r11, r27
    386c:	70 f4       	brcc	.+28     	; 0x388a <prvSampleTimeNow+0xac>
    386e:	8a 83       	std	Y+2, r24	; 0x02
    3870:	9b 83       	std	Y+3, r25	; 0x03
    3872:	ac 83       	std	Y+4, r26	; 0x04
    3874:	bd 83       	std	Y+5, r27	; 0x05
    3876:	db 87       	std	Y+11, r29	; 0x0b
    3878:	ca 87       	std	Y+10, r28	; 0x0a
    387a:	b8 01       	movw	r22, r16
    387c:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <pxCurrentTimerList>
    3880:	90 91 e7 06 	lds	r25, 0x06E7	; 0x8006e7 <pxCurrentTimerList+0x1>
    3884:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    3888:	0a c0       	rjmp	.+20     	; 0x389e <prvSampleTimeNow+0xc0>
    388a:	c1 2c       	mov	r12, r1
    388c:	d1 2c       	mov	r13, r1
    388e:	76 01       	movw	r14, r12
    3890:	00 e0       	ldi	r16, 0x00	; 0
    3892:	10 e0       	ldi	r17, 0x00	; 0
    3894:	a5 01       	movw	r20, r10
    3896:	94 01       	movw	r18, r8
    3898:	60 e0       	ldi	r22, 0x00	; 0
    389a:	ce 01       	movw	r24, r28
    389c:	42 df       	rcall	.-380    	; 0x3722 <xTimerGenericCommand>
    389e:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <pxCurrentTimerList>
    38a2:	f0 91 e7 06 	lds	r31, 0x06E7	; 0x8006e7 <pxCurrentTimerList+0x1>
    38a6:	80 81       	ld	r24, Z
    38a8:	81 11       	cpse	r24, r1
    38aa:	be cf       	rjmp	.-132    	; 0x3828 <prvSampleTimeNow+0x4a>
    38ac:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <pxOverflowTimerList>
    38b0:	90 91 e5 06 	lds	r25, 0x06E5	; 0x8006e5 <pxOverflowTimerList+0x1>
    38b4:	90 93 e7 06 	sts	0x06E7, r25	; 0x8006e7 <pxCurrentTimerList+0x1>
    38b8:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <pxCurrentTimerList>
    38bc:	f0 93 e5 06 	sts	0x06E5, r31	; 0x8006e5 <pxOverflowTimerList+0x1>
    38c0:	e0 93 e4 06 	sts	0x06E4, r30	; 0x8006e4 <pxOverflowTimerList>
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	f1 01       	movw	r30, r2
    38c8:	80 83       	st	Z, r24
    38ca:	02 c0       	rjmp	.+4      	; 0x38d0 <prvSampleTimeNow+0xf2>
    38cc:	f1 01       	movw	r30, r2
    38ce:	10 82       	st	Z, r1
    38d0:	40 92 dc 06 	sts	0x06DC, r4	; 0x8006dc <xLastTime.2378>
    38d4:	50 92 dd 06 	sts	0x06DD, r5	; 0x8006dd <xLastTime.2378+0x1>
    38d8:	60 92 de 06 	sts	0x06DE, r6	; 0x8006de <xLastTime.2378+0x2>
    38dc:	70 92 df 06 	sts	0x06DF, r7	; 0x8006df <xLastTime.2378+0x3>
    38e0:	c3 01       	movw	r24, r6
    38e2:	b2 01       	movw	r22, r4
    38e4:	df 91       	pop	r29
    38e6:	cf 91       	pop	r28
    38e8:	1f 91       	pop	r17
    38ea:	0f 91       	pop	r16
    38ec:	ff 90       	pop	r15
    38ee:	ef 90       	pop	r14
    38f0:	df 90       	pop	r13
    38f2:	cf 90       	pop	r12
    38f4:	bf 90       	pop	r11
    38f6:	af 90       	pop	r10
    38f8:	9f 90       	pop	r9
    38fa:	8f 90       	pop	r8
    38fc:	7f 90       	pop	r7
    38fe:	6f 90       	pop	r6
    3900:	5f 90       	pop	r5
    3902:	4f 90       	pop	r4
    3904:	3f 90       	pop	r3
    3906:	2f 90       	pop	r2
    3908:	08 95       	ret

0000390a <prvTimerTask>:
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
    3912:	60 97       	sbiw	r28, 0x10	; 16
    3914:	0f b6       	in	r0, 0x3f	; 63
    3916:	f8 94       	cli
    3918:	de bf       	out	0x3e, r29	; 62
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	cd bf       	out	0x3d, r28	; 61
    391e:	ce 01       	movw	r24, r28
    3920:	01 96       	adiw	r24, 0x01	; 1
    3922:	9a 87       	std	Y+10, r25	; 0x0a
    3924:	89 87       	std	Y+9, r24	; 0x09
    3926:	81 2c       	mov	r8, r1
    3928:	91 2c       	mov	r9, r1
    392a:	a1 2c       	mov	r10, r1
    392c:	b1 2c       	mov	r11, r1
    392e:	69 84       	ldd	r6, Y+9	; 0x09
    3930:	7a 84       	ldd	r7, Y+10	; 0x0a
    3932:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <pxCurrentTimerList>
    3936:	f0 91 e7 06 	lds	r31, 0x06E7	; 0x8006e7 <pxCurrentTimerList+0x1>
    393a:	80 81       	ld	r24, Z
    393c:	88 23       	and	r24, r24
    393e:	09 f4       	brne	.+2      	; 0x3942 <prvTimerTask+0x38>
    3940:	f2 c0       	rjmp	.+484    	; 0x3b26 <prvTimerTask+0x21c>
    3942:	07 80       	ldd	r0, Z+7	; 0x07
    3944:	f0 85       	ldd	r31, Z+8	; 0x08
    3946:	e0 2d       	mov	r30, r0
    3948:	20 80       	ld	r2, Z
    394a:	31 80       	ldd	r3, Z+1	; 0x01
    394c:	42 80       	ldd	r4, Z+2	; 0x02
    394e:	53 80       	ldd	r5, Z+3	; 0x03
    3950:	e2 d9       	rcall	.-3132   	; 0x2d16 <vTaskSuspendAll>
    3952:	ce 01       	movw	r24, r28
    3954:	01 96       	adiw	r24, 0x01	; 1
    3956:	43 df       	rcall	.-378    	; 0x37de <prvSampleTimeNow>
    3958:	6b 87       	std	Y+11, r22	; 0x0b
    395a:	7c 87       	std	Y+12, r23	; 0x0c
    395c:	8d 87       	std	Y+13, r24	; 0x0d
    395e:	9e 87       	std	Y+14, r25	; 0x0e
    3960:	89 81       	ldd	r24, Y+1	; 0x01
    3962:	81 11       	cpse	r24, r1
    3964:	5d c0       	rjmp	.+186    	; 0x3a20 <prvTimerTask+0x116>
    3966:	8b 85       	ldd	r24, Y+11	; 0x0b
    3968:	9c 85       	ldd	r25, Y+12	; 0x0c
    396a:	ad 85       	ldd	r26, Y+13	; 0x0d
    396c:	be 85       	ldd	r27, Y+14	; 0x0e
    396e:	82 15       	cp	r24, r2
    3970:	93 05       	cpc	r25, r3
    3972:	a4 05       	cpc	r26, r4
    3974:	b5 05       	cpc	r27, r5
    3976:	08 f4       	brcc	.+2      	; 0x397a <prvTimerTask+0x70>
    3978:	3c c0       	rjmp	.+120    	; 0x39f2 <prvTimerTask+0xe8>
    397a:	b6 da       	rcall	.-2708   	; 0x2ee8 <xTaskResumeAll>
    397c:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <pxCurrentTimerList>
    3980:	f0 91 e7 06 	lds	r31, 0x06E7	; 0x8006e7 <pxCurrentTimerList+0x1>
    3984:	07 80       	ldd	r0, Z+7	; 0x07
    3986:	f0 85       	ldd	r31, Z+8	; 0x08
    3988:	e0 2d       	mov	r30, r0
    398a:	a0 85       	ldd	r26, Z+8	; 0x08
    398c:	b1 85       	ldd	r27, Z+9	; 0x09
    398e:	b8 8b       	std	Y+16, r27	; 0x10
    3990:	af 87       	std	Y+15, r26	; 0x0f
    3992:	cd 01       	movw	r24, r26
    3994:	02 96       	adiw	r24, 0x02	; 2
    3996:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    399a:	ef 85       	ldd	r30, Y+15	; 0x0f
    399c:	f8 89       	ldd	r31, Y+16	; 0x10
    399e:	82 89       	ldd	r24, Z+18	; 0x12
    39a0:	81 30       	cpi	r24, 0x01	; 1
    39a2:	f1 f4       	brne	.+60     	; 0x39e0 <prvTimerTask+0xd6>
    39a4:	46 85       	ldd	r20, Z+14	; 0x0e
    39a6:	57 85       	ldd	r21, Z+15	; 0x0f
    39a8:	60 89       	ldd	r22, Z+16	; 0x10
    39aa:	71 89       	ldd	r23, Z+17	; 0x11
    39ac:	42 0d       	add	r20, r2
    39ae:	53 1d       	adc	r21, r3
    39b0:	64 1d       	adc	r22, r4
    39b2:	75 1d       	adc	r23, r5
    39b4:	72 01       	movw	r14, r4
    39b6:	61 01       	movw	r12, r2
    39b8:	0b 85       	ldd	r16, Y+11	; 0x0b
    39ba:	1c 85       	ldd	r17, Y+12	; 0x0c
    39bc:	2d 85       	ldd	r18, Y+13	; 0x0d
    39be:	3e 85       	ldd	r19, Y+14	; 0x0e
    39c0:	cf 01       	movw	r24, r30
    39c2:	e6 dd       	rcall	.-1076   	; 0x3590 <prvInsertTimerInActiveList>
    39c4:	88 23       	and	r24, r24
    39c6:	61 f0       	breq	.+24     	; 0x39e0 <prvTimerTask+0xd6>
    39c8:	c8 2c       	mov	r12, r8
    39ca:	d9 2c       	mov	r13, r9
    39cc:	ea 2c       	mov	r14, r10
    39ce:	fb 2c       	mov	r15, r11
    39d0:	00 e0       	ldi	r16, 0x00	; 0
    39d2:	10 e0       	ldi	r17, 0x00	; 0
    39d4:	a2 01       	movw	r20, r4
    39d6:	91 01       	movw	r18, r2
    39d8:	60 e0       	ldi	r22, 0x00	; 0
    39da:	8f 85       	ldd	r24, Y+15	; 0x0f
    39dc:	98 89       	ldd	r25, Y+16	; 0x10
    39de:	a1 de       	rcall	.-702    	; 0x3722 <xTimerGenericCommand>
    39e0:	af 85       	ldd	r26, Y+15	; 0x0f
    39e2:	b8 89       	ldd	r27, Y+16	; 0x10
    39e4:	55 96       	adiw	r26, 0x15	; 21
    39e6:	ed 91       	ld	r30, X+
    39e8:	fc 91       	ld	r31, X
    39ea:	56 97       	sbiw	r26, 0x16	; 22
    39ec:	cd 01       	movw	r24, r26
    39ee:	19 95       	eicall
    39f0:	8b c0       	rjmp	.+278    	; 0x3b08 <prvTimerTask+0x1fe>
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	b2 01       	movw	r22, r4
    39f6:	a1 01       	movw	r20, r2
    39f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    39fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    39fc:	ad 85       	ldd	r26, Y+13	; 0x0d
    39fe:	be 85       	ldd	r27, Y+14	; 0x0e
    3a00:	48 1b       	sub	r20, r24
    3a02:	59 0b       	sbc	r21, r25
    3a04:	6a 0b       	sbc	r22, r26
    3a06:	7b 0b       	sbc	r23, r27
    3a08:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <xTimerQueue>
    3a0c:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <xTimerQueue+0x1>
    3a10:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <vQueueWaitForMessageRestricted>
    3a14:	69 da       	rcall	.-2862   	; 0x2ee8 <xTaskResumeAll>
    3a16:	81 11       	cpse	r24, r1
    3a18:	77 c0       	rjmp	.+238    	; 0x3b08 <prvTimerTask+0x1fe>
    3a1a:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3a1e:	74 c0       	rjmp	.+232    	; 0x3b08 <prvTimerTask+0x1fe>
    3a20:	63 da       	rcall	.-2874   	; 0x2ee8 <xTaskResumeAll>
    3a22:	72 c0       	rjmp	.+228    	; 0x3b08 <prvTimerTask+0x1fe>
    3a24:	89 81       	ldd	r24, Y+1	; 0x01
    3a26:	88 23       	and	r24, r24
    3a28:	0c f4       	brge	.+2      	; 0x3a2c <prvTimerTask+0x122>
    3a2a:	6e c0       	rjmp	.+220    	; 0x3b08 <prvTimerTask+0x1fe>
    3a2c:	4e 80       	ldd	r4, Y+6	; 0x06
    3a2e:	5f 80       	ldd	r5, Y+7	; 0x07
    3a30:	d2 01       	movw	r26, r4
    3a32:	1c 96       	adiw	r26, 0x0c	; 12
    3a34:	8d 91       	ld	r24, X+
    3a36:	9c 91       	ld	r25, X
    3a38:	1d 97       	sbiw	r26, 0x0d	; 13
    3a3a:	89 2b       	or	r24, r25
    3a3c:	21 f0       	breq	.+8      	; 0x3a46 <prvTimerTask+0x13c>
    3a3e:	c2 01       	movw	r24, r4
    3a40:	02 96       	adiw	r24, 0x02	; 2
    3a42:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3a46:	ce 01       	movw	r24, r28
    3a48:	08 96       	adiw	r24, 0x08	; 8
    3a4a:	c9 de       	rcall	.-622    	; 0x37de <prvSampleTimeNow>
    3a4c:	8b 01       	movw	r16, r22
    3a4e:	9c 01       	movw	r18, r24
    3a50:	89 81       	ldd	r24, Y+1	; 0x01
    3a52:	08 2e       	mov	r0, r24
    3a54:	00 0c       	add	r0, r0
    3a56:	99 0b       	sbc	r25, r25
    3a58:	aa 0b       	sbc	r26, r26
    3a5a:	bb 0b       	sbc	r27, r27
    3a5c:	8a 30       	cpi	r24, 0x0A	; 10
    3a5e:	91 05       	cpc	r25, r1
    3a60:	08 f0       	brcs	.+2      	; 0x3a64 <prvTimerTask+0x15a>
    3a62:	52 c0       	rjmp	.+164    	; 0x3b08 <prvTimerTask+0x1fe>
    3a64:	fc 01       	movw	r30, r24
    3a66:	88 27       	eor	r24, r24
    3a68:	ee 56       	subi	r30, 0x6E	; 110
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a6e:	0c 94 72 5a 	jmp	0xb4e4	; 0xb4e4 <__tablejump2__>
    3a72:	ca 80       	ldd	r12, Y+2	; 0x02
    3a74:	db 80       	ldd	r13, Y+3	; 0x03
    3a76:	ec 80       	ldd	r14, Y+4	; 0x04
    3a78:	fd 80       	ldd	r15, Y+5	; 0x05
    3a7a:	f2 01       	movw	r30, r4
    3a7c:	46 85       	ldd	r20, Z+14	; 0x0e
    3a7e:	57 85       	ldd	r21, Z+15	; 0x0f
    3a80:	60 89       	ldd	r22, Z+16	; 0x10
    3a82:	71 89       	ldd	r23, Z+17	; 0x11
    3a84:	4c 0d       	add	r20, r12
    3a86:	5d 1d       	adc	r21, r13
    3a88:	6e 1d       	adc	r22, r14
    3a8a:	7f 1d       	adc	r23, r15
    3a8c:	c2 01       	movw	r24, r4
    3a8e:	80 dd       	rcall	.-1280   	; 0x3590 <prvInsertTimerInActiveList>
    3a90:	88 23       	and	r24, r24
    3a92:	d1 f1       	breq	.+116    	; 0x3b08 <prvTimerTask+0x1fe>
    3a94:	d2 01       	movw	r26, r4
    3a96:	55 96       	adiw	r26, 0x15	; 21
    3a98:	ed 91       	ld	r30, X+
    3a9a:	fc 91       	ld	r31, X
    3a9c:	56 97       	sbiw	r26, 0x16	; 22
    3a9e:	c2 01       	movw	r24, r4
    3aa0:	19 95       	eicall
    3aa2:	f2 01       	movw	r30, r4
    3aa4:	82 89       	ldd	r24, Z+18	; 0x12
    3aa6:	81 30       	cpi	r24, 0x01	; 1
    3aa8:	79 f5       	brne	.+94     	; 0x3b08 <prvTimerTask+0x1fe>
    3aaa:	4a 81       	ldd	r20, Y+2	; 0x02
    3aac:	5b 81       	ldd	r21, Y+3	; 0x03
    3aae:	6c 81       	ldd	r22, Y+4	; 0x04
    3ab0:	7d 81       	ldd	r23, Y+5	; 0x05
    3ab2:	86 85       	ldd	r24, Z+14	; 0x0e
    3ab4:	97 85       	ldd	r25, Z+15	; 0x0f
    3ab6:	a0 89       	ldd	r26, Z+16	; 0x10
    3ab8:	b1 89       	ldd	r27, Z+17	; 0x11
    3aba:	9a 01       	movw	r18, r20
    3abc:	ab 01       	movw	r20, r22
    3abe:	28 0f       	add	r18, r24
    3ac0:	39 1f       	adc	r19, r25
    3ac2:	4a 1f       	adc	r20, r26
    3ac4:	5b 1f       	adc	r21, r27
    3ac6:	c8 2c       	mov	r12, r8
    3ac8:	d9 2c       	mov	r13, r9
    3aca:	ea 2c       	mov	r14, r10
    3acc:	fb 2c       	mov	r15, r11
    3ace:	00 e0       	ldi	r16, 0x00	; 0
    3ad0:	10 e0       	ldi	r17, 0x00	; 0
    3ad2:	60 e0       	ldi	r22, 0x00	; 0
    3ad4:	c2 01       	movw	r24, r4
    3ad6:	25 de       	rcall	.-950    	; 0x3722 <xTimerGenericCommand>
    3ad8:	17 c0       	rjmp	.+46     	; 0x3b08 <prvTimerTask+0x1fe>
    3ada:	4a 81       	ldd	r20, Y+2	; 0x02
    3adc:	5b 81       	ldd	r21, Y+3	; 0x03
    3ade:	6c 81       	ldd	r22, Y+4	; 0x04
    3ae0:	7d 81       	ldd	r23, Y+5	; 0x05
    3ae2:	d2 01       	movw	r26, r4
    3ae4:	1e 96       	adiw	r26, 0x0e	; 14
    3ae6:	4d 93       	st	X+, r20
    3ae8:	5d 93       	st	X+, r21
    3aea:	6d 93       	st	X+, r22
    3aec:	7c 93       	st	X, r23
    3aee:	51 97       	sbiw	r26, 0x11	; 17
    3af0:	40 0f       	add	r20, r16
    3af2:	51 1f       	adc	r21, r17
    3af4:	62 1f       	adc	r22, r18
    3af6:	73 1f       	adc	r23, r19
    3af8:	68 01       	movw	r12, r16
    3afa:	79 01       	movw	r14, r18
    3afc:	c2 01       	movw	r24, r4
    3afe:	48 dd       	rcall	.-1392   	; 0x3590 <prvInsertTimerInActiveList>
    3b00:	03 c0       	rjmp	.+6      	; 0x3b08 <prvTimerTask+0x1fe>
    3b02:	c2 01       	movw	r24, r4
    3b04:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vPortFree>
    3b08:	28 2d       	mov	r18, r8
    3b0a:	39 2d       	mov	r19, r9
    3b0c:	4a 2d       	mov	r20, r10
    3b0e:	5b 2d       	mov	r21, r11
    3b10:	66 2d       	mov	r22, r6
    3b12:	77 2d       	mov	r23, r7
    3b14:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <xTimerQueue>
    3b18:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <xTimerQueue+0x1>
    3b1c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <xQueueReceive>
    3b20:	81 11       	cpse	r24, r1
    3b22:	80 cf       	rjmp	.-256    	; 0x3a24 <prvTimerTask+0x11a>
    3b24:	06 cf       	rjmp	.-500    	; 0x3932 <prvTimerTask+0x28>
    3b26:	f7 d8       	rcall	.-3602   	; 0x2d16 <vTaskSuspendAll>
    3b28:	ce 01       	movw	r24, r28
    3b2a:	01 96       	adiw	r24, 0x01	; 1
    3b2c:	58 de       	rcall	.-848    	; 0x37de <prvSampleTimeNow>
    3b2e:	6b 87       	std	Y+11, r22	; 0x0b
    3b30:	7c 87       	std	Y+12, r23	; 0x0c
    3b32:	8d 87       	std	Y+13, r24	; 0x0d
    3b34:	9e 87       	std	Y+14, r25	; 0x0e
    3b36:	89 81       	ldd	r24, Y+1	; 0x01
    3b38:	81 11       	cpse	r24, r1
    3b3a:	72 cf       	rjmp	.-284    	; 0x3a20 <prvTimerTask+0x116>
    3b3c:	e0 91 e4 06 	lds	r30, 0x06E4	; 0x8006e4 <pxOverflowTimerList>
    3b40:	f0 91 e5 06 	lds	r31, 0x06E5	; 0x8006e5 <pxOverflowTimerList+0x1>
    3b44:	80 81       	ld	r24, Z
    3b46:	21 e0       	ldi	r18, 0x01	; 1
    3b48:	81 11       	cpse	r24, r1
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	28 2c       	mov	r2, r8
    3b4e:	39 2c       	mov	r3, r9
    3b50:	4a 2c       	mov	r4, r10
    3b52:	5b 2c       	mov	r5, r11
    3b54:	4f cf       	rjmp	.-354    	; 0x39f4 <prvTimerTask+0xea>

00003b56 <xTimerIsTimerActive>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
    3b56:	fc 01       	movw	r30, r24
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
    3b58:	0f b6       	in	r0, 0x3f	; 63
    3b5a:	f8 94       	cli
    3b5c:	0f 92       	push	r0
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	24 85       	ldd	r18, Z+12	; 0x0c
    3b62:	35 85       	ldd	r19, Z+13	; 0x0d
    3b64:	23 2b       	or	r18, r19
    3b66:	09 f4       	brne	.+2      	; 0x3b6a <xTimerIsTimerActive+0x14>
    3b68:	80 e0       	ldi	r24, 0x00	; 0
	}
	taskEXIT_CRITICAL();
    3b6a:	0f 90       	pop	r0
    3b6c:	0f be       	out	0x3f, r0	; 63

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
    3b6e:	08 95       	ret

00003b70 <pvTimerGetTimerID>:
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
    3b70:	0f b6       	in	r0, 0x3f	; 63
    3b72:	f8 94       	cli
    3b74:	0f 92       	push	r0
	{
		pvReturn = pxTimer->pvTimerID;
    3b76:	fc 01       	movw	r30, r24
    3b78:	83 89       	ldd	r24, Z+19	; 0x13
    3b7a:	94 89       	ldd	r25, Z+20	; 0x14
	}
	taskEXIT_CRITICAL();
    3b7c:	0f 90       	pop	r0
    3b7e:	0f be       	out	0x3f, r0	; 63

	return pvReturn;
}
    3b80:	08 95       	ret

00003b82 <Defrost>:
{
	
while(1){
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
    3b82:	c6 ef       	ldi	r28, 0xF6	; 246
    3b84:	d8 e0       	ldi	r29, 0x08	; 8
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Src_In<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3b86:	06 e5       	ldi	r16, 0x56	; 86
    3b88:	19 e0       	ldi	r17, 0x09	; 9
				if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
				else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3b8a:	0f 2e       	mov	r0, r31
    3b8c:	fe e3       	ldi	r31, 0x3E	; 62
    3b8e:	cf 2e       	mov	r12, r31
    3b90:	f2 e0       	ldi	r31, 0x02	; 2
    3b92:	df 2e       	mov	r13, r31
    3b94:	f0 2d       	mov	r31, r0
    3b96:	0f 2e       	mov	r0, r31
    3b98:	f4 e9       	ldi	r31, 0x94	; 148
    3b9a:	ef 2e       	mov	r14, r31
    3b9c:	f7 e0       	ldi	r31, 0x07	; 7
    3b9e:	ff 2e       	mov	r15, r31
    3ba0:	f0 2d       	mov	r31, r0
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Src_In<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3ba2:	33 24       	eor	r3, r3
    3ba4:	33 94       	inc	r3
    3ba6:	0f 2e       	mov	r0, r31
    3ba8:	f3 e3       	ldi	r31, 0x33	; 51
    3baa:	8f 2e       	mov	r8, r31
    3bac:	f2 e0       	ldi	r31, 0x02	; 2
    3bae:	9f 2e       	mov	r9, r31
    3bb0:	f0 2d       	mov	r31, r0
while(1){
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
    3bb2:	0f 2e       	mov	r0, r31
    3bb4:	f3 e2       	ldi	r31, 0x23	; 35
    3bb6:	af 2e       	mov	r10, r31
    3bb8:	f2 e0       	ldi	r31, 0x02	; 2
    3bba:	bf 2e       	mov	r11, r31
    3bbc:	f0 2d       	mov	r31, r0
//////////////////////////////////////////////////
static void Defrost(void *pvParameters)
{
	
while(1){
			wdt_reset();
    3bbe:	a8 95       	wdr
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
    3bc0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bc2:	81 30       	cpi	r24, 0x01	; 1
    3bc4:	09 f0       	breq	.+2      	; 0x3bc8 <Defrost+0x46>
    3bc6:	cf c0       	rjmp	.+414    	; 0x3d66 <Defrost+0x1e4>
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
    3bc8:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <forsDefrost>
    3bcc:	81 30       	cpi	r24, 0x01	; 1
    3bce:	91 f4       	brne	.+36     	; 0x3bf4 <Defrost+0x72>
    3bd0:	be 01       	movw	r22, r28
    3bd2:	c8 01       	movw	r24, r16
    3bd4:	0e 94 49 35 	call	0x6a92	; 0x6a92 <startDefrost>
    3bd8:	f8 01       	movw	r30, r16
    3bda:	31 86       	std	Z+9, r3	; 0x09
    3bdc:	10 92 ff 06 	sts	0x06FF, r1	; 0x8006ff <forsDefrost>
    3be0:	bf 92       	push	r11
    3be2:	af 92       	push	r10
    3be4:	ff 92       	push	r15
    3be6:	ef 92       	push	r14
    3be8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3bec:	0f 90       	pop	r0
    3bee:	0f 90       	pop	r0
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Src_In<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3bf4:	f8 01       	movw	r30, r16
    3bf6:	81 85       	ldd	r24, Z+9	; 0x09
    3bf8:	81 11       	cpse	r24, r1
    3bfa:	48 c0       	rjmp	.+144    	; 0x3c8c <Defrost+0x10a>
    3bfc:	92 d8       	rcall	.-3804   	; 0x2d22 <xTaskGetTickCount>
    3bfe:	40 90 d7 08 	lds	r4, 0x08D7	; 0x8008d7 <timeTillDef>
    3c02:	50 90 d8 08 	lds	r5, 0x08D8	; 0x8008d8 <timeTillDef+0x1>
    3c06:	60 90 d9 08 	lds	r6, 0x08D9	; 0x8008d9 <timeTillDef+0x2>
    3c0a:	70 90 da 08 	lds	r7, 0x08DA	; 0x8008da <timeTillDef+0x3>
    3c0e:	9b 01       	movw	r18, r22
    3c10:	ac 01       	movw	r20, r24
    3c12:	24 19       	sub	r18, r4
    3c14:	35 09       	sbc	r19, r5
    3c16:	46 09       	sbc	r20, r6
    3c18:	57 09       	sbc	r21, r7
    3c1a:	29 01       	movw	r4, r18
    3c1c:	3a 01       	movw	r6, r20
    3c1e:	2a a1       	ldd	r18, Y+34	; 0x22
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	a0 e6       	ldi	r26, 0x60	; 96
    3c24:	ba ee       	ldi	r27, 0xEA	; 234
    3c26:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    3c2a:	64 15       	cp	r22, r4
    3c2c:	75 05       	cpc	r23, r5
    3c2e:	86 05       	cpc	r24, r6
    3c30:	97 05       	cpc	r25, r7
    3c32:	38 f5       	brcc	.+78     	; 0x3c82 <Defrost+0x100>
    3c34:	6a a5       	ldd	r22, Y+42	; 0x2a
    3c36:	7b a5       	ldd	r23, Y+43	; 0x2b
    3c38:	07 2e       	mov	r0, r23
    3c3a:	00 0c       	add	r0, r0
    3c3c:	88 0b       	sbc	r24, r24
    3c3e:	99 0b       	sbc	r25, r25
    3c40:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    3c44:	9b 01       	movw	r18, r22
    3c46:	ac 01       	movw	r20, r24
    3c48:	f8 01       	movw	r30, r16
    3c4a:	62 a9       	ldd	r22, Z+50	; 0x32
    3c4c:	73 a9       	ldd	r23, Z+51	; 0x33
    3c4e:	84 a9       	ldd	r24, Z+52	; 0x34
    3c50:	95 a9       	ldd	r25, Z+53	; 0x35
    3c52:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    3c56:	88 23       	and	r24, r24
    3c58:	a4 f4       	brge	.+40     	; 0x3c82 <Defrost+0x100>
    3c5a:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <forsDefrost>
    3c5e:	81 11       	cpse	r24, r1
    3c60:	10 c0       	rjmp	.+32     	; 0x3c82 <Defrost+0x100>
    3c62:	be 01       	movw	r22, r28
    3c64:	c8 01       	movw	r24, r16
    3c66:	0e 94 49 35 	call	0x6a92	; 0x6a92 <startDefrost>
    3c6a:	f8 01       	movw	r30, r16
    3c6c:	31 86       	std	Z+9, r3	; 0x09
    3c6e:	9f 92       	push	r9
    3c70:	8f 92       	push	r8
    3c72:	ff 92       	push	r15
    3c74:	ef 92       	push	r14
    3c76:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3c7a:	0f 90       	pop	r0
    3c7c:	0f 90       	pop	r0
    3c7e:	0f 90       	pop	r0
    3c80:	0f 90       	pop	r0
				if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3c82:	f8 01       	movw	r30, r16
    3c84:	81 85       	ldd	r24, Z+9	; 0x09
    3c86:	88 23       	and	r24, r24
    3c88:	09 f4       	brne	.+2      	; 0x3c8c <Defrost+0x10a>
    3c8a:	6d c0       	rjmp	.+218    	; 0x3d66 <Defrost+0x1e4>
    3c8c:	4a d8       	rcall	.-3948   	; 0x2d22 <xTaskGetTickCount>
    3c8e:	40 90 d7 08 	lds	r4, 0x08D7	; 0x8008d7 <timeTillDef>
    3c92:	50 90 d8 08 	lds	r5, 0x08D8	; 0x8008d8 <timeTillDef+0x1>
    3c96:	60 90 d9 08 	lds	r6, 0x08D9	; 0x8008d9 <timeTillDef+0x2>
    3c9a:	70 90 da 08 	lds	r7, 0x08DA	; 0x8008da <timeTillDef+0x3>
    3c9e:	9b 01       	movw	r18, r22
    3ca0:	ac 01       	movw	r20, r24
    3ca2:	24 19       	sub	r18, r4
    3ca4:	35 09       	sbc	r19, r5
    3ca6:	46 09       	sbc	r20, r6
    3ca8:	57 09       	sbc	r21, r7
    3caa:	29 01       	movw	r4, r18
    3cac:	3a 01       	movw	r6, r20
    3cae:	29 a1       	ldd	r18, Y+33	; 0x21
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	a0 e6       	ldi	r26, 0x60	; 96
    3cb4:	ba ee       	ldi	r27, 0xEA	; 234
    3cb6:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    3cba:	64 15       	cp	r22, r4
    3cbc:	75 05       	cpc	r23, r5
    3cbe:	86 05       	cpc	r24, r6
    3cc0:	97 05       	cpc	r25, r7
    3cc2:	f8 f4       	brcc	.+62     	; 0x3d02 <Defrost+0x180>
    3cc4:	f8 01       	movw	r30, r16
    3cc6:	82 85       	ldd	r24, Z+10	; 0x0a
    3cc8:	88 23       	and	r24, r24
    3cca:	d9 f0       	breq	.+54     	; 0x3d02 <Defrost+0x180>
    3ccc:	be 01       	movw	r22, r28
    3cce:	c8 01       	movw	r24, r16
    3cd0:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <stopDefrost>
    3cd4:	f8 01       	movw	r30, r16
    3cd6:	11 86       	std	Z+9, r1	; 0x09
    3cd8:	12 86       	std	Z+10, r1	; 0x0a
    3cda:	23 d8       	rcall	.-4026   	; 0x2d22 <xTaskGetTickCount>
    3cdc:	60 93 d7 08 	sts	0x08D7, r22	; 0x8008d7 <timeTillDef>
    3ce0:	70 93 d8 08 	sts	0x08D8, r23	; 0x8008d8 <timeTillDef+0x1>
    3ce4:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <timeTillDef+0x2>
    3ce8:	90 93 da 08 	sts	0x08DA, r25	; 0x8008da <timeTillDef+0x3>
    3cec:	df 92       	push	r13
    3cee:	cf 92       	push	r12
    3cf0:	ff 92       	push	r15
    3cf2:	ef 92       	push	r14
    3cf4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3cf8:	0f 90       	pop	r0
    3cfa:	0f 90       	pop	r0
    3cfc:	0f 90       	pop	r0
    3cfe:	0f 90       	pop	r0
    3d00:	32 c0       	rjmp	.+100    	; 0x3d66 <Defrost+0x1e4>
				else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3d02:	f8 01       	movw	r30, r16
    3d04:	81 85       	ldd	r24, Z+9	; 0x09
    3d06:	88 23       	and	r24, r24
    3d08:	71 f1       	breq	.+92     	; 0x3d66 <Defrost+0x1e4>
    3d0a:	6c a5       	ldd	r22, Y+44	; 0x2c
    3d0c:	7d a5       	ldd	r23, Y+45	; 0x2d
    3d0e:	07 2e       	mov	r0, r23
    3d10:	00 0c       	add	r0, r0
    3d12:	88 0b       	sbc	r24, r24
    3d14:	99 0b       	sbc	r25, r25
    3d16:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    3d1a:	9b 01       	movw	r18, r22
    3d1c:	ac 01       	movw	r20, r24
    3d1e:	f8 01       	movw	r30, r16
    3d20:	62 a9       	ldd	r22, Z+50	; 0x32
    3d22:	73 a9       	ldd	r23, Z+51	; 0x33
    3d24:	84 a9       	ldd	r24, Z+52	; 0x34
    3d26:	95 a9       	ldd	r25, Z+53	; 0x35
    3d28:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    3d2c:	18 16       	cp	r1, r24
    3d2e:	dc f4       	brge	.+54     	; 0x3d66 <Defrost+0x1e4>
    3d30:	be 01       	movw	r22, r28
    3d32:	c8 01       	movw	r24, r16
    3d34:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <stopDefrost>
    3d38:	f8 01       	movw	r30, r16
    3d3a:	11 86       	std	Z+9, r1	; 0x09
    3d3c:	12 86       	std	Z+10, r1	; 0x0a
    3d3e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3d42:	60 93 d7 08 	sts	0x08D7, r22	; 0x8008d7 <timeTillDef>
    3d46:	70 93 d8 08 	sts	0x08D8, r23	; 0x8008d8 <timeTillDef+0x1>
    3d4a:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <timeTillDef+0x2>
    3d4e:	90 93 da 08 	sts	0x08DA, r25	; 0x8008da <timeTillDef+0x3>
    3d52:	df 92       	push	r13
    3d54:	cf 92       	push	r12
    3d56:	ff 92       	push	r15
    3d58:	ef 92       	push	r14
    3d5a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3d5e:	0f 90       	pop	r0
    3d60:	0f 90       	pop	r0
    3d62:	0f 90       	pop	r0
    3d64:	0f 90       	pop	r0
	
			}
			//xSerialxPrintf(&xSerial3Port,"defrost\r\n");
vTaskDelay(2000);
    3d66:	60 ed       	ldi	r22, 0xD0	; 208
    3d68:	77 e0       	ldi	r23, 0x07	; 7
    3d6a:	80 e0       	ldi	r24, 0x00	; 0
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	38 d9       	rcall	.-3472   	; 0x2fe0 <vTaskDelay>
//xSerialxPrintf(&xSerial3Port,"Stack_0 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
//portYIELD();			
}
    3d70:	26 cf       	rjmp	.-436    	; 0x3bbe <Defrost+0x3c>

00003d72 <System_2>:
ReadSensors(&Comp_2);
portEXIT_CRITICAL();
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3d72:	c6 ef       	ldi	r28, 0xF6	; 246
    3d74:	d8 e0       	ldi	r29, 0x08	; 8
		{
			_err2=Check_Erors(&Comp_2,&EEpromData);
		
			//if(_err2>0 && Comp_1.error==0){Comp_2.error=_err2;Comp_2.countError++;Comp_2.Steps=0;Comp_Stop(&Comp_2);}//if(Comp_2.countError==3)EEpromData.power=0;
			mod_pump(&Comp_2,&EEpromData);
	       if(Comp_2.checkTrv && xTaskGetTickCount()-countTrvTime_2>10000 ){Comp_2.Steps = Fuzzy(&Comp_2,EEpromData.trv_corection_2);countTrvTime_2=xTaskGetTickCount();}
    3d76:	0f 2e       	mov	r0, r31
    3d78:	fe e3       	ldi	r31, 0x3E	; 62
    3d7a:	8f 2e       	mov	r8, r31
    3d7c:	f9 e0       	ldi	r31, 0x09	; 9
    3d7e:	9f 2e       	mov	r9, r31
    3d80:	f0 2d       	mov	r31, r0
    3d82:	0f 2e       	mov	r0, r31
    3d84:	f4 e4       	ldi	r31, 0x44	; 68
    3d86:	6f 2e       	mov	r6, r31
    3d88:	fa e0       	ldi	r31, 0x0A	; 10
    3d8a:	7f 2e       	mov	r7, r31
    3d8c:	f0 2d       	mov	r31, r0
portEXIT_CRITICAL();
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
		else if(EEpromData.power==0 && Comp_2.suply){Comp_2.suply=false;Comp_2.error=0;_err2=0;Comp_2.countError=0; xSerialxPrintf(&xSerial3Port,"OFF_System_2\r\n");stopTrvTimer(&Comp_2);Comp_Stop(&Comp_2);}
    3d8e:	0f 2e       	mov	r0, r31
    3d90:	f8 e4       	ldi	r31, 0x48	; 72
    3d92:	cf 2e       	mov	r12, r31
    3d94:	fa e0       	ldi	r31, 0x0A	; 10
    3d96:	df 2e       	mov	r13, r31
    3d98:	f0 2d       	mov	r31, r0
    3d9a:	0f 2e       	mov	r0, r31
    3d9c:	f6 e5       	ldi	r31, 0x56	; 86
    3d9e:	ef 2e       	mov	r14, r31
    3da0:	f2 e0       	ldi	r31, 0x02	; 2
    3da2:	ff 2e       	mov	r15, r31
    3da4:	f0 2d       	mov	r31, r0
    3da6:	04 e9       	ldi	r16, 0x94	; 148
    3da8:	17 e0       	ldi	r17, 0x07	; 7
ReadSensors(&Comp_2);
portEXIT_CRITICAL();
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3daa:	55 24       	eor	r5, r5
    3dac:	53 94       	inc	r5
    3dae:	0f 2e       	mov	r0, r31
    3db0:	f8 e4       	ldi	r31, 0x48	; 72
    3db2:	af 2e       	mov	r10, r31
    3db4:	f2 e0       	ldi	r31, 0x02	; 2
    3db6:	bf 2e       	mov	r11, r31
    3db8:	f0 2d       	mov	r31, r0
	(void) pvParameters;

	while (1)
	{
		
    	wdt_reset();
    3dba:	a8 95       	wdr
		//xSerialxPrintf(&xSerial3Port,"System_2_task\r\n");
vTaskSuspend( xHandleFirst );				
    3dbc:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <xHandleFirst>
    3dc0:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <xHandleFirst+0x1>
    3dc4:	98 d9       	rcall	.-3280   	; 0x30f6 <vTaskSuspend>
portENTER_CRITICAL();
    3dc6:	0f b6       	in	r0, 0x3f	; 63
    3dc8:	f8 94       	cli
    3dca:	0f 92       	push	r0
ReadSensors(&Comp_2);
    3dcc:	8c ed       	ldi	r24, 0xDC	; 220
    3dce:	99 e0       	ldi	r25, 0x09	; 9
    3dd0:	0e 94 7b 4d 	call	0x9af6	; 0x9af6 <ReadSensors>
portEXIT_CRITICAL();
    3dd4:	0f 90       	pop	r0
    3dd6:	0f be       	out	0x3f, r0	; 63
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
    3dd8:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <xHandleFirst>
    3ddc:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <xHandleFirst+0x1>
    3de0:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <vTaskResume>
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3de4:	8c a1       	ldd	r24, Y+36	; 0x24
    3de6:	81 30       	cpi	r24, 0x01	; 1
    3de8:	a9 f4       	brne	.+42     	; 0x3e14 <System_2+0xa2>
    3dea:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <Comp_2+0x6>
    3dee:	81 11       	cpse	r24, r1
    3df0:	3a c0       	rjmp	.+116    	; 0x3e66 <System_2+0xf4>
    3df2:	80 91 dc 09 	lds	r24, 0x09DC	; 0x8009dc <Comp_2>
    3df6:	81 11       	cpse	r24, r1
    3df8:	74 c0       	rjmp	.+232    	; 0x3ee2 <System_2+0x170>
    3dfa:	50 92 e2 09 	sts	0x09E2, r5	; 0x8009e2 <Comp_2+0x6>
    3dfe:	bf 92       	push	r11
    3e00:	af 92       	push	r10
    3e02:	1f 93       	push	r17
    3e04:	0f 93       	push	r16
    3e06:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3e0a:	0f 90       	pop	r0
    3e0c:	0f 90       	pop	r0
    3e0e:	0f 90       	pop	r0
    3e10:	0f 90       	pop	r0
    3e12:	24 c0       	rjmp	.+72     	; 0x3e5c <System_2+0xea>
		else if(EEpromData.power==0 && Comp_2.suply){Comp_2.suply=false;Comp_2.error=0;_err2=0;Comp_2.countError=0; xSerialxPrintf(&xSerial3Port,"OFF_System_2\r\n");stopTrvTimer(&Comp_2);Comp_Stop(&Comp_2);}
    3e14:	81 11       	cpse	r24, r1
    3e16:	22 c0       	rjmp	.+68     	; 0x3e5c <System_2+0xea>
    3e18:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <Comp_2+0x6>
    3e1c:	88 23       	and	r24, r24
    3e1e:	09 f4       	brne	.+2      	; 0x3e22 <System_2+0xb0>
    3e20:	60 c0       	rjmp	.+192    	; 0x3ee2 <System_2+0x170>
    3e22:	ec ed       	ldi	r30, 0xDC	; 220
    3e24:	f9 e0       	ldi	r31, 0x09	; 9
    3e26:	16 82       	std	Z+6, r1	; 0x06
    3e28:	d6 01       	movw	r26, r12
    3e2a:	1d 92       	st	X+, r1
    3e2c:	1c 92       	st	X, r1
    3e2e:	10 92 94 0a 	sts	0x0A94, r1	; 0x800a94 <_err2+0x1>
    3e32:	10 92 93 0a 	sts	0x0A93, r1	; 0x800a93 <_err2>
    3e36:	11 8a       	std	Z+17, r1	; 0x11
    3e38:	ff 92       	push	r15
    3e3a:	ef 92       	push	r14
    3e3c:	1f 93       	push	r17
    3e3e:	0f 93       	push	r16
    3e40:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3e44:	8c ed       	ldi	r24, 0xDC	; 220
    3e46:	99 e0       	ldi	r25, 0x09	; 9
    3e48:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
    3e4c:	8c ed       	ldi	r24, 0xDC	; 220
    3e4e:	99 e0       	ldi	r25, 0x09	; 9
    3e50:	0e 94 d2 38 	call	0x71a4	; 0x71a4 <Comp_Stop>
    3e54:	0f 90       	pop	r0
    3e56:	0f 90       	pop	r0
    3e58:	0f 90       	pop	r0
    3e5a:	0f 90       	pop	r0
	
		if(Comp_2.suply && Comp_2.countError<3)
    3e5c:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <Comp_2+0x6>
    3e60:	88 23       	and	r24, r24
    3e62:	09 f4       	brne	.+2      	; 0x3e66 <System_2+0xf4>
    3e64:	3e c0       	rjmp	.+124    	; 0x3ee2 <System_2+0x170>
    3e66:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <Comp_2+0x11>
    3e6a:	83 30       	cpi	r24, 0x03	; 3
    3e6c:	d0 f5       	brcc	.+116    	; 0x3ee2 <System_2+0x170>
		{
			_err2=Check_Erors(&Comp_2,&EEpromData);
    3e6e:	be 01       	movw	r22, r28
    3e70:	8c ed       	ldi	r24, 0xDC	; 220
    3e72:	99 e0       	ldi	r25, 0x09	; 9
    3e74:	ef d3       	rcall	.+2014   	; 0x4654 <Check_Erors>
    3e76:	90 93 94 0a 	sts	0x0A94, r25	; 0x800a94 <_err2+0x1>
    3e7a:	80 93 93 0a 	sts	0x0A93, r24	; 0x800a93 <_err2>
		
			//if(_err2>0 && Comp_1.error==0){Comp_2.error=_err2;Comp_2.countError++;Comp_2.Steps=0;Comp_Stop(&Comp_2);}//if(Comp_2.countError==3)EEpromData.power=0;
			mod_pump(&Comp_2,&EEpromData);
    3e7e:	be 01       	movw	r22, r28
    3e80:	8c ed       	ldi	r24, 0xDC	; 220
    3e82:	99 e0       	ldi	r25, 0x09	; 9
    3e84:	0e 94 dc 39 	call	0x73b8	; 0x73b8 <mod_pump>
	       if(Comp_2.checkTrv && xTaskGetTickCount()-countTrvTime_2>10000 ){Comp_2.Steps = Fuzzy(&Comp_2,EEpromData.trv_corection_2);countTrvTime_2=xTaskGetTickCount();}
    3e88:	80 91 dd 09 	lds	r24, 0x09DD	; 0x8009dd <Comp_2+0x1>
    3e8c:	88 23       	and	r24, r24
    3e8e:	49 f1       	breq	.+82     	; 0x3ee2 <System_2+0x170>
    3e90:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3e94:	20 91 03 07 	lds	r18, 0x0703	; 0x800703 <countTrvTime_2>
    3e98:	30 91 04 07 	lds	r19, 0x0704	; 0x800704 <countTrvTime_2+0x1>
    3e9c:	40 91 05 07 	lds	r20, 0x0705	; 0x800705 <countTrvTime_2+0x2>
    3ea0:	50 91 06 07 	lds	r21, 0x0706	; 0x800706 <countTrvTime_2+0x3>
    3ea4:	dc 01       	movw	r26, r24
    3ea6:	cb 01       	movw	r24, r22
    3ea8:	82 1b       	sub	r24, r18
    3eaa:	93 0b       	sbc	r25, r19
    3eac:	a4 0b       	sbc	r26, r20
    3eae:	b5 0b       	sbc	r27, r21
    3eb0:	81 31       	cpi	r24, 0x11	; 17
    3eb2:	97 42       	sbci	r25, 0x27	; 39
    3eb4:	a1 05       	cpc	r26, r1
    3eb6:	b1 05       	cpc	r27, r1
    3eb8:	a0 f0       	brcs	.+40     	; 0x3ee2 <System_2+0x170>
    3eba:	d4 01       	movw	r26, r8
    3ebc:	6d 91       	ld	r22, X+
    3ebe:	7c 91       	ld	r23, X
    3ec0:	8c ed       	ldi	r24, 0xDC	; 220
    3ec2:	99 e0       	ldi	r25, 0x09	; 9
    3ec4:	0e 94 4a 52 	call	0xa494	; 0xa494 <Fuzzy>
    3ec8:	f3 01       	movw	r30, r6
    3eca:	91 83       	std	Z+1, r25	; 0x01
    3ecc:	80 83       	st	Z, r24
    3ece:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3ed2:	60 93 03 07 	sts	0x0703, r22	; 0x800703 <countTrvTime_2>
    3ed6:	70 93 04 07 	sts	0x0704, r23	; 0x800704 <countTrvTime_2+0x1>
    3eda:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <countTrvTime_2+0x2>
    3ede:	90 93 06 07 	sts	0x0706, r25	; 0x800706 <countTrvTime_2+0x3>
		}

		vTaskDelay(1000);
    3ee2:	68 ee       	ldi	r22, 0xE8	; 232
    3ee4:	73 e0       	ldi	r23, 0x03	; 3
    3ee6:	80 e0       	ldi	r24, 0x00	; 0
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	7a d8       	rcall	.-3852   	; 0x2fe0 <vTaskDelay>
		//xSerialxPrintf(&xSerial3Port,"Stack_2 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
		//portYIELD();
		//xSerialxPrintf(&xSerial3Port,"Stack2 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
	}
    3eec:	66 cf       	rjmp	.-308    	; 0x3dba <System_2+0x48>

00003eee <System_1>:
portENTER_CRITICAL();
ReadSensors(&Comp_1);
portEXIT_CRITICAL();
//EEpromData.AireToWater==1 &&

		if(EEpromData.NombComp==2 )
    3eee:	c6 ef       	ldi	r28, 0xF6	; 246
    3ef0:	d8 e0       	ldi	r29, 0x08	; 8
			vTaskResume( xHandleSecond );
			stop_second=false;
			
		}
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
    3ef2:	77 24       	eor	r7, r7
    3ef4:	73 94       	inc	r7
			if(EEpromData.AireToWater==1){
			//xSerialxPrintf(&xSerial3Port,"forsDefrost =%d\r\n",forsDefrost);	
			if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}	
			if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Src_In<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
			if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
			else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3ef6:	0f 2e       	mov	r0, r31
    3ef8:	fe e3       	ldi	r31, 0x3E	; 62
    3efa:	8f 2e       	mov	r8, r31
    3efc:	f2 e0       	ldi	r31, 0x02	; 2
    3efe:	9f 2e       	mov	r9, r31
    3f00:	f0 2d       	mov	r31, r0
    3f02:	04 e9       	ldi	r16, 0x94	; 148
    3f04:	17 e0       	ldi	r17, 0x07	; 7
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",xTaskGetSchedulerState());
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
		else if(EEpromData.power==0 && Comp_1.suply){Comp_1.suply=false;PORTA &= 0x0;Comp_1.error=0;_err1=0;Comp_1.countError=0;xSerialxPrintf(&xSerial3Port,"OFF_System_1\r\n"); stopTrvTimer(&Comp_1);Comp_Stop(&Comp_1);}
    3f06:	0f 2e       	mov	r0, r31
    3f08:	f2 ec       	ldi	r31, 0xC2	; 194
    3f0a:	cf 2e       	mov	r12, r31
    3f0c:	f9 e0       	ldi	r31, 0x09	; 9
    3f0e:	df 2e       	mov	r13, r31
    3f10:	f0 2d       	mov	r31, r0
    3f12:	0f 2e       	mov	r0, r31
    3f14:	f3 e7       	ldi	r31, 0x73	; 115
    3f16:	ef 2e       	mov	r14, r31
    3f18:	f2 e0       	ldi	r31, 0x02	; 2
    3f1a:	ff 2e       	mov	r15, r31
    3f1c:	f0 2d       	mov	r31, r0
		}
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",xTaskGetSchedulerState());
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
    3f1e:	0f 2e       	mov	r0, r31
    3f20:	f5 e6       	ldi	r31, 0x65	; 101
    3f22:	af 2e       	mov	r10, r31
    3f24:	f2 e0       	ldi	r31, 0x02	; 2
    3f26:	bf 2e       	mov	r11, r31
    3f28:	f0 2d       	mov	r31, r0
	
	
	while (1)
	{

		wdt_reset();
    3f2a:	a8 95       	wdr
		//xSerialxPrintf(&xSerial3Port,"System_1_task\r\n");
vTaskSuspend( xHandleSecond );		
    3f2c:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <xHandleSecond>
    3f30:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <xHandleSecond+0x1>
    3f34:	e0 d8       	rcall	.-3648   	; 0x30f6 <vTaskSuspend>
portENTER_CRITICAL();
    3f36:	0f b6       	in	r0, 0x3f	; 63
    3f38:	f8 94       	cli
    3f3a:	0f 92       	push	r0
ReadSensors(&Comp_1);
    3f3c:	86 e5       	ldi	r24, 0x56	; 86
    3f3e:	99 e0       	ldi	r25, 0x09	; 9
    3f40:	0e 94 7b 4d 	call	0x9af6	; 0x9af6 <ReadSensors>
portEXIT_CRITICAL();
    3f44:	0f 90       	pop	r0
    3f46:	0f be       	out	0x3f, r0	; 63
//EEpromData.AireToWater==1 &&

		if(EEpromData.NombComp==2 )
    3f48:	88 a1       	ldd	r24, Y+32	; 0x20
    3f4a:	82 30       	cpi	r24, 0x02	; 2
    3f4c:	61 f4       	brne	.+24     	; 0x3f66 <System_1+0x78>
		{
			vTaskResume( xHandleSecond );
    3f4e:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <xHandleSecond>
    3f52:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <xHandleSecond+0x1>
    3f56:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <vTaskResume>
			stop_second=false;
    3f5a:	10 92 a4 0a 	sts	0x0AA4, r1	; 0x800aa4 <stop_second>
			
		}
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
    3f5e:	88 a1       	ldd	r24, Y+32	; 0x20
    3f60:	81 30       	cpi	r24, 0x01	; 1
    3f62:	69 f4       	brne	.+26     	; 0x3f7e <System_1+0x90>
    3f64:	06 c0       	rjmp	.+12     	; 0x3f72 <System_1+0x84>
    3f66:	81 30       	cpi	r24, 0x01	; 1
    3f68:	51 f4       	brne	.+20     	; 0x3f7e <System_1+0x90>
    3f6a:	80 91 a4 0a 	lds	r24, 0x0AA4	; 0x800aa4 <stop_second>
    3f6e:	81 11       	cpse	r24, r1
    3f70:	06 c0       	rjmp	.+12     	; 0x3f7e <System_1+0x90>
    3f72:	70 92 a4 0a 	sts	0x0AA4, r7	; 0x800aa4 <stop_second>
    3f76:	8c ed       	ldi	r24, 0xDC	; 220
    3f78:	99 e0       	ldi	r25, 0x09	; 9
    3f7a:	0e 94 d2 38 	call	0x71a4	; 0x71a4 <Comp_Stop>
//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",xTaskGetSchedulerState());
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
    3f7e:	8c a1       	ldd	r24, Y+36	; 0x24
    3f80:	81 30       	cpi	r24, 0x01	; 1
    3f82:	f9 f4       	brne	.+62     	; 0x3fc2 <System_1+0xd4>
    3f84:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <Comp_1+0x6>
    3f88:	81 11       	cpse	r24, r1
    3f8a:	46 c0       	rjmp	.+140    	; 0x4018 <System_1+0x12a>
    3f8c:	80 91 56 09 	lds	r24, 0x0956	; 0x800956 <Comp_1>
    3f90:	81 11       	cpse	r24, r1
    3f92:	6b c1       	rjmp	.+726    	; 0x426a <System_1+0x37c>
    3f94:	70 92 5c 09 	sts	0x095C, r7	; 0x80095c <Comp_1+0x6>
    3f98:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3f9c:	60 93 d7 08 	sts	0x08D7, r22	; 0x8008d7 <timeTillDef>
    3fa0:	70 93 d8 08 	sts	0x08D8, r23	; 0x8008d8 <timeTillDef+0x1>
    3fa4:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <timeTillDef+0x2>
    3fa8:	90 93 da 08 	sts	0x08DA, r25	; 0x8008da <timeTillDef+0x3>
    3fac:	bf 92       	push	r11
    3fae:	af 92       	push	r10
    3fb0:	1f 93       	push	r17
    3fb2:	0f 93       	push	r16
    3fb4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3fb8:	0f 90       	pop	r0
    3fba:	0f 90       	pop	r0
    3fbc:	0f 90       	pop	r0
    3fbe:	0f 90       	pop	r0
    3fc0:	26 c0       	rjmp	.+76     	; 0x400e <System_1+0x120>
		else if(EEpromData.power==0 && Comp_1.suply){Comp_1.suply=false;PORTA &= 0x0;Comp_1.error=0;_err1=0;Comp_1.countError=0;xSerialxPrintf(&xSerial3Port,"OFF_System_1\r\n"); stopTrvTimer(&Comp_1);Comp_Stop(&Comp_1);}
    3fc2:	81 11       	cpse	r24, r1
    3fc4:	24 c0       	rjmp	.+72     	; 0x400e <System_1+0x120>
    3fc6:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <Comp_1+0x6>
    3fca:	88 23       	and	r24, r24
    3fcc:	09 f4       	brne	.+2      	; 0x3fd0 <System_1+0xe2>
    3fce:	4d c1       	rjmp	.+666    	; 0x426a <System_1+0x37c>
    3fd0:	e6 e5       	ldi	r30, 0x56	; 86
    3fd2:	f9 e0       	ldi	r31, 0x09	; 9
    3fd4:	16 82       	std	Z+6, r1	; 0x06
    3fd6:	82 b1       	in	r24, 0x02	; 2
    3fd8:	12 b8       	out	0x02, r1	; 2
    3fda:	d6 01       	movw	r26, r12
    3fdc:	1d 92       	st	X+, r1
    3fde:	1c 92       	st	X, r1
    3fe0:	10 92 61 0a 	sts	0x0A61, r1	; 0x800a61 <_err1+0x1>
    3fe4:	10 92 60 0a 	sts	0x0A60, r1	; 0x800a60 <_err1>
    3fe8:	11 8a       	std	Z+17, r1	; 0x11
    3fea:	ff 92       	push	r15
    3fec:	ef 92       	push	r14
    3fee:	1f 93       	push	r17
    3ff0:	0f 93       	push	r16
    3ff2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3ff6:	86 e5       	ldi	r24, 0x56	; 86
    3ff8:	99 e0       	ldi	r25, 0x09	; 9
    3ffa:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
    3ffe:	86 e5       	ldi	r24, 0x56	; 86
    4000:	99 e0       	ldi	r25, 0x09	; 9
    4002:	0e 94 d2 38 	call	0x71a4	; 0x71a4 <Comp_Stop>
    4006:	0f 90       	pop	r0
    4008:	0f 90       	pop	r0
    400a:	0f 90       	pop	r0
    400c:	0f 90       	pop	r0
		//xSerialxPrintf(&xSerial3Port,"mod =%d\r\n",EEpromData.AireToWater);
		//xSerialxPrintf(&xSerial3Port,"TimeBetweenDef =%d\r\n",EEpromData.TimeBetweenDef);
		
	
		
		if(Comp_1.suply &&  Comp_1.countError<3)
    400e:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <Comp_1+0x6>
    4012:	88 23       	and	r24, r24
    4014:	09 f4       	brne	.+2      	; 0x4018 <System_1+0x12a>
    4016:	29 c1       	rjmp	.+594    	; 0x426a <System_1+0x37c>
    4018:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <Comp_1+0x11>
    401c:	83 30       	cpi	r24, 0x03	; 3
    401e:	08 f0       	brcs	.+2      	; 0x4022 <System_1+0x134>
    4020:	24 c1       	rjmp	.+584    	; 0x426a <System_1+0x37c>
		{
			//>EEpromData.TimeBetweenDef EEpromData.TimeDef
			
			if(EEpromData.AireToWater==1){
    4022:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4024:	81 30       	cpi	r24, 0x01	; 1
    4026:	09 f0       	breq	.+2      	; 0x402a <System_1+0x13c>
    4028:	de c0       	rjmp	.+444    	; 0x41e6 <System_1+0x2f8>
			//xSerialxPrintf(&xSerial3Port,"forsDefrost =%d\r\n",forsDefrost);	
			if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}	
    402a:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <forsDefrost>
    402e:	81 30       	cpi	r24, 0x01	; 1
    4030:	a9 f4       	brne	.+42     	; 0x405c <System_1+0x16e>
    4032:	be 01       	movw	r22, r28
    4034:	86 e5       	ldi	r24, 0x56	; 86
    4036:	99 e0       	ldi	r25, 0x09	; 9
    4038:	0e 94 49 35 	call	0x6a92	; 0x6a92 <startDefrost>
    403c:	70 92 5f 09 	sts	0x095F, r7	; 0x80095f <Comp_1+0x9>
    4040:	10 92 ff 06 	sts	0x06FF, r1	; 0x8006ff <forsDefrost>
    4044:	e3 e2       	ldi	r30, 0x23	; 35
    4046:	f2 e0       	ldi	r31, 0x02	; 2
    4048:	ff 93       	push	r31
    404a:	ef 93       	push	r30
    404c:	1f 93       	push	r17
    404e:	0f 93       	push	r16
    4050:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    4054:	0f 90       	pop	r0
    4056:	0f 90       	pop	r0
    4058:	0f 90       	pop	r0
    405a:	0f 90       	pop	r0
			if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Src_In<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    405c:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <Comp_1+0x9>
    4060:	81 11       	cpse	r24, r1
    4062:	4d c0       	rjmp	.+154    	; 0x40fe <System_1+0x210>
    4064:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    4068:	20 91 d7 08 	lds	r18, 0x08D7	; 0x8008d7 <timeTillDef>
    406c:	30 91 d8 08 	lds	r19, 0x08D8	; 0x8008d8 <timeTillDef+0x1>
    4070:	40 91 d9 08 	lds	r20, 0x08D9	; 0x8008d9 <timeTillDef+0x2>
    4074:	50 91 da 08 	lds	r21, 0x08DA	; 0x8008da <timeTillDef+0x3>
    4078:	1b 01       	movw	r2, r22
    407a:	2c 01       	movw	r4, r24
    407c:	22 1a       	sub	r2, r18
    407e:	33 0a       	sbc	r3, r19
    4080:	44 0a       	sbc	r4, r20
    4082:	55 0a       	sbc	r5, r21
    4084:	2a a1       	ldd	r18, Y+34	; 0x22
    4086:	30 e0       	ldi	r19, 0x00	; 0
    4088:	a0 e6       	ldi	r26, 0x60	; 96
    408a:	ba ee       	ldi	r27, 0xEA	; 234
    408c:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    4090:	62 15       	cp	r22, r2
    4092:	73 05       	cpc	r23, r3
    4094:	84 05       	cpc	r24, r4
    4096:	95 05       	cpc	r25, r5
    4098:	68 f5       	brcc	.+90     	; 0x40f4 <System_1+0x206>
    409a:	6a a5       	ldd	r22, Y+42	; 0x2a
    409c:	7b a5       	ldd	r23, Y+43	; 0x2b
    409e:	07 2e       	mov	r0, r23
    40a0:	00 0c       	add	r0, r0
    40a2:	88 0b       	sbc	r24, r24
    40a4:	99 0b       	sbc	r25, r25
    40a6:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    40aa:	9b 01       	movw	r18, r22
    40ac:	ac 01       	movw	r20, r24
    40ae:	60 91 88 09 	lds	r22, 0x0988	; 0x800988 <Comp_1+0x32>
    40b2:	70 91 89 09 	lds	r23, 0x0989	; 0x800989 <Comp_1+0x33>
    40b6:	80 91 8a 09 	lds	r24, 0x098A	; 0x80098a <Comp_1+0x34>
    40ba:	90 91 8b 09 	lds	r25, 0x098B	; 0x80098b <Comp_1+0x35>
    40be:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    40c2:	88 23       	and	r24, r24
    40c4:	bc f4       	brge	.+46     	; 0x40f4 <System_1+0x206>
    40c6:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <forsDefrost>
    40ca:	81 11       	cpse	r24, r1
    40cc:	13 c0       	rjmp	.+38     	; 0x40f4 <System_1+0x206>
    40ce:	be 01       	movw	r22, r28
    40d0:	86 e5       	ldi	r24, 0x56	; 86
    40d2:	99 e0       	ldi	r25, 0x09	; 9
    40d4:	0e 94 49 35 	call	0x6a92	; 0x6a92 <startDefrost>
    40d8:	70 92 5f 09 	sts	0x095F, r7	; 0x80095f <Comp_1+0x9>
    40dc:	83 e3       	ldi	r24, 0x33	; 51
    40de:	92 e0       	ldi	r25, 0x02	; 2
    40e0:	9f 93       	push	r25
    40e2:	8f 93       	push	r24
    40e4:	1f 93       	push	r17
    40e6:	0f 93       	push	r16
    40e8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    40ec:	0f 90       	pop	r0
    40ee:	0f 90       	pop	r0
    40f0:	0f 90       	pop	r0
    40f2:	0f 90       	pop	r0
			if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    40f4:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <Comp_1+0x9>
    40f8:	88 23       	and	r24, r24
    40fa:	09 f4       	brne	.+2      	; 0x40fe <System_1+0x210>
    40fc:	74 c0       	rjmp	.+232    	; 0x41e6 <System_1+0x2f8>
    40fe:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    4102:	20 91 d7 08 	lds	r18, 0x08D7	; 0x8008d7 <timeTillDef>
    4106:	30 91 d8 08 	lds	r19, 0x08D8	; 0x8008d8 <timeTillDef+0x1>
    410a:	40 91 d9 08 	lds	r20, 0x08D9	; 0x8008d9 <timeTillDef+0x2>
    410e:	50 91 da 08 	lds	r21, 0x08DA	; 0x8008da <timeTillDef+0x3>
    4112:	1b 01       	movw	r2, r22
    4114:	2c 01       	movw	r4, r24
    4116:	22 1a       	sub	r2, r18
    4118:	33 0a       	sbc	r3, r19
    411a:	44 0a       	sbc	r4, r20
    411c:	55 0a       	sbc	r5, r21
    411e:	29 a1       	ldd	r18, Y+33	; 0x21
    4120:	30 e0       	ldi	r19, 0x00	; 0
    4122:	a0 e6       	ldi	r26, 0x60	; 96
    4124:	ba ee       	ldi	r27, 0xEA	; 234
    4126:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    412a:	62 15       	cp	r22, r2
    412c:	73 05       	cpc	r23, r3
    412e:	84 05       	cpc	r24, r4
    4130:	95 05       	cpc	r25, r5
    4132:	10 f5       	brcc	.+68     	; 0x4178 <System_1+0x28a>
    4134:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <Comp_1+0xa>
    4138:	88 23       	and	r24, r24
    413a:	f1 f0       	breq	.+60     	; 0x4178 <System_1+0x28a>
    413c:	be 01       	movw	r22, r28
    413e:	86 e5       	ldi	r24, 0x56	; 86
    4140:	99 e0       	ldi	r25, 0x09	; 9
    4142:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <stopDefrost>
    4146:	e6 e5       	ldi	r30, 0x56	; 86
    4148:	f9 e0       	ldi	r31, 0x09	; 9
    414a:	11 86       	std	Z+9, r1	; 0x09
    414c:	12 86       	std	Z+10, r1	; 0x0a
    414e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    4152:	60 93 d7 08 	sts	0x08D7, r22	; 0x8008d7 <timeTillDef>
    4156:	70 93 d8 08 	sts	0x08D8, r23	; 0x8008d8 <timeTillDef+0x1>
    415a:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <timeTillDef+0x2>
    415e:	90 93 da 08 	sts	0x08DA, r25	; 0x8008da <timeTillDef+0x3>
    4162:	9f 92       	push	r9
    4164:	8f 92       	push	r8
    4166:	1f 93       	push	r17
    4168:	0f 93       	push	r16
    416a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    416e:	0f 90       	pop	r0
    4170:	0f 90       	pop	r0
    4172:	0f 90       	pop	r0
    4174:	0f 90       	pop	r0
    4176:	37 c0       	rjmp	.+110    	; 0x41e6 <System_1+0x2f8>
			else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    4178:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <Comp_1+0x9>
    417c:	88 23       	and	r24, r24
    417e:	99 f1       	breq	.+102    	; 0x41e6 <System_1+0x2f8>
    4180:	6c a5       	ldd	r22, Y+44	; 0x2c
    4182:	7d a5       	ldd	r23, Y+45	; 0x2d
    4184:	07 2e       	mov	r0, r23
    4186:	00 0c       	add	r0, r0
    4188:	88 0b       	sbc	r24, r24
    418a:	99 0b       	sbc	r25, r25
    418c:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    4190:	9b 01       	movw	r18, r22
    4192:	ac 01       	movw	r20, r24
    4194:	60 91 88 09 	lds	r22, 0x0988	; 0x800988 <Comp_1+0x32>
    4198:	70 91 89 09 	lds	r23, 0x0989	; 0x800989 <Comp_1+0x33>
    419c:	80 91 8a 09 	lds	r24, 0x098A	; 0x80098a <Comp_1+0x34>
    41a0:	90 91 8b 09 	lds	r25, 0x098B	; 0x80098b <Comp_1+0x35>
    41a4:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    41a8:	18 16       	cp	r1, r24
    41aa:	ec f4       	brge	.+58     	; 0x41e6 <System_1+0x2f8>
    41ac:	be 01       	movw	r22, r28
    41ae:	86 e5       	ldi	r24, 0x56	; 86
    41b0:	99 e0       	ldi	r25, 0x09	; 9
    41b2:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <stopDefrost>
    41b6:	e6 e5       	ldi	r30, 0x56	; 86
    41b8:	f9 e0       	ldi	r31, 0x09	; 9
    41ba:	11 86       	std	Z+9, r1	; 0x09
    41bc:	12 86       	std	Z+10, r1	; 0x0a
    41be:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    41c2:	60 93 d7 08 	sts	0x08D7, r22	; 0x8008d7 <timeTillDef>
    41c6:	70 93 d8 08 	sts	0x08D8, r23	; 0x8008d8 <timeTillDef+0x1>
    41ca:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <timeTillDef+0x2>
    41ce:	90 93 da 08 	sts	0x08DA, r25	; 0x8008da <timeTillDef+0x3>
    41d2:	9f 92       	push	r9
    41d4:	8f 92       	push	r8
    41d6:	1f 93       	push	r17
    41d8:	0f 93       	push	r16
    41da:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    41de:	0f 90       	pop	r0
    41e0:	0f 90       	pop	r0
    41e2:	0f 90       	pop	r0
    41e4:	0f 90       	pop	r0
			
			}
			
			if(!init_system){_err1=Check_Erors(&Comp_1,&EEpromData);ADE7758_resetStatus();} else init_system=false;
    41e6:	80 91 80 0a 	lds	r24, 0x0A80	; 0x800a80 <init_system>
    41ea:	81 11       	cpse	r24, r1
    41ec:	0a c0       	rjmp	.+20     	; 0x4202 <System_1+0x314>
    41ee:	be 01       	movw	r22, r28
    41f0:	86 e5       	ldi	r24, 0x56	; 86
    41f2:	99 e0       	ldi	r25, 0x09	; 9
    41f4:	2f d2       	rcall	.+1118   	; 0x4654 <Check_Erors>
    41f6:	90 93 61 0a 	sts	0x0A61, r25	; 0x800a61 <_err1+0x1>
    41fa:	80 93 60 0a 	sts	0x0A60, r24	; 0x800a60 <_err1>
    41fe:	27 d2       	rcall	.+1102   	; 0x464e <ADE7758_resetStatus>
    4200:	02 c0       	rjmp	.+4      	; 0x4206 <System_1+0x318>
    4202:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <init_system>
				
			//if(_err1>0 && Comp_1.error==0){Comp_1.error=_err1;Comp_1.countError++;Comp_1.Steps=0;Comp_Stop(&Comp_1);xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);}//
				
			 mod_pump(&Comp_1,&EEpromData);
    4206:	be 01       	movw	r22, r28
    4208:	86 e5       	ldi	r24, 0x56	; 86
    420a:	99 e0       	ldi	r25, 0x09	; 9
    420c:	0e 94 dc 39 	call	0x73b8	; 0x73b8 <mod_pump>
			//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);
			if(Comp_1.checkTrv && xTaskGetTickCount()-countTrvTime_1>10000 ){Comp_1.Steps = Fuzzy(&Comp_1,EEpromData.trv_corection_1);countTrvTime_1=xTaskGetTickCount();}
    4210:	80 91 57 09 	lds	r24, 0x0957	; 0x800957 <Comp_1+0x1>
    4214:	88 23       	and	r24, r24
    4216:	49 f1       	breq	.+82     	; 0x426a <System_1+0x37c>
    4218:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    421c:	20 91 07 07 	lds	r18, 0x0707	; 0x800707 <countTrvTime_1>
    4220:	30 91 08 07 	lds	r19, 0x0708	; 0x800708 <countTrvTime_1+0x1>
    4224:	40 91 09 07 	lds	r20, 0x0709	; 0x800709 <countTrvTime_1+0x2>
    4228:	50 91 0a 07 	lds	r21, 0x070A	; 0x80070a <countTrvTime_1+0x3>
    422c:	dc 01       	movw	r26, r24
    422e:	cb 01       	movw	r24, r22
    4230:	82 1b       	sub	r24, r18
    4232:	93 0b       	sbc	r25, r19
    4234:	a4 0b       	sbc	r26, r20
    4236:	b5 0b       	sbc	r27, r21
    4238:	81 31       	cpi	r24, 0x11	; 17
    423a:	97 42       	sbci	r25, 0x27	; 39
    423c:	a1 05       	cpc	r26, r1
    423e:	b1 05       	cpc	r27, r1
    4240:	a0 f0       	brcs	.+40     	; 0x426a <System_1+0x37c>
    4242:	6a a9       	ldd	r22, Y+50	; 0x32
    4244:	7b a9       	ldd	r23, Y+51	; 0x33
    4246:	86 e5       	ldi	r24, 0x56	; 86
    4248:	99 e0       	ldi	r25, 0x09	; 9
    424a:	0e 94 4a 52 	call	0xa494	; 0xa494 <Fuzzy>
    424e:	ae eb       	ldi	r26, 0xBE	; 190
    4250:	b9 e0       	ldi	r27, 0x09	; 9
    4252:	8d 93       	st	X+, r24
    4254:	9c 93       	st	X, r25
    4256:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    425a:	60 93 07 07 	sts	0x0707, r22	; 0x800707 <countTrvTime_1>
    425e:	70 93 08 07 	sts	0x0708, r23	; 0x800708 <countTrvTime_1+0x1>
    4262:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <countTrvTime_1+0x2>
    4266:	90 93 0a 07 	sts	0x070A, r25	; 0x80070a <countTrvTime_1+0x3>
			
			
		}
		
		vTaskDelay(1000);
    426a:	68 ee       	ldi	r22, 0xE8	; 232
    426c:	73 e0       	ldi	r23, 0x03	; 3
    426e:	80 e0       	ldi	r24, 0x00	; 0
    4270:	90 e0       	ldi	r25, 0x00	; 0
    4272:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <vTaskDelay>
		//xSerialxPrintf(&xSerial3Port,"Stack1 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
	}
    4276:	59 ce       	rjmp	.-846    	; 0x3f2a <System_1+0x3c>

00004278 <ModBus>:
	(void) pvParameters;

	while (1)
	{   
		//wdt_reset();
		xSerialxPrintf(&xSerial3Port,"ModBus_task\r\n");
    4278:	02 e8       	ldi	r16, 0x82	; 130
    427a:	12 e0       	ldi	r17, 0x02	; 2
    427c:	c4 e9       	ldi	r28, 0x94	; 148
    427e:	d7 e0       	ldi	r29, 0x07	; 7
    4280:	1f 93       	push	r17
    4282:	0f 93       	push	r16
    4284:	df 93       	push	r29
    4286:	cf 93       	push	r28
    4288:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if (xSemaphoreTake(xMbBinarySemaphore, portMAX_DELAY) == pdTRUE )
    428c:	4f ef       	ldi	r20, 0xFF	; 255
    428e:	5f ef       	ldi	r21, 0xFF	; 255
    4290:	ba 01       	movw	r22, r20
    4292:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <xMbBinarySemaphore>
    4296:	90 91 82 0a 	lds	r25, 0x0A82	; 0x800a82 <xMbBinarySemaphore+0x1>
    429a:	0e 94 8f 0b 	call	0x171e	; 0x171e <xQueueSemaphoreTake>
    429e:	0f 90       	pop	r0
    42a0:	0f 90       	pop	r0
    42a2:	0f 90       	pop	r0
    42a4:	0f 90       	pop	r0
    42a6:	81 30       	cpi	r24, 0x01	; 1
    42a8:	59 f7       	brne	.-42     	; 0x4280 <ModBus+0x8>
		{
			modbus_update();
    42aa:	b2 d7       	rcall	.+3940   	; 0x5210 <modbus_update>
			//xSerialxPrintf(&xSerial3Port,"Interrupt\r\n");
			if(port_0){xSerialRxFlush( &xSerialPort );port_0=false;indexBuf=0;}
    42ac:	80 91 9b 0a 	lds	r24, 0x0A9B	; 0x800a9b <port_0>
    42b0:	88 23       	and	r24, r24
    42b2:	49 f0       	breq	.+18     	; 0x42c6 <ModBus+0x4e>
    42b4:	8d e4       	ldi	r24, 0x4D	; 77
    42b6:	97 e0       	ldi	r25, 0x07	; 7
    42b8:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xSerialRxFlush>
    42bc:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <port_0>
    42c0:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <indexBuf>
    42c4:	dd cf       	rjmp	.-70     	; 0x4280 <ModBus+0x8>
			else if(port_3){xSerialRxFlush( &xSerial3Port );port_3=false;indexBuf=0;}
    42c6:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <port_3>
    42ca:	88 23       	and	r24, r24
    42cc:	c9 f2       	breq	.-78     	; 0x4280 <ModBus+0x8>
    42ce:	ce 01       	movw	r24, r28
    42d0:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xSerialRxFlush>
    42d4:	10 92 f5 08 	sts	0x08F5, r1	; 0x8008f5 <port_3>
    42d8:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <indexBuf>
    42dc:	d1 cf       	rjmp	.-94     	; 0x4280 <ModBus+0x8>

000042de <main>:
//--------------------------------------------------------
volatile long  countTimer;
int main(void) __attribute__ ((OS_main));

int main(void)
{
    42de:	cd b7       	in	r28, 0x3d	; 61
    42e0:	de b7       	in	r29, 0x3e	; 62
    42e2:	a2 97       	sbiw	r28, 0x22	; 34
    42e4:	de bf       	out	0x3e, r29	; 62
    42e6:	cd bf       	out	0x3d, r28	; 61

	initPins();
    42e8:	0e 94 29 3f 	call	0x7e52	; 0x7e52 <initPins>
	ADE7758_Init();
    42ec:	93 d1       	rcall	.+806    	; 0x4614 <ADE7758_Init>
	timer_1_Init();
    42ee:	33 d4       	rcall	.+2150   	; 0x4b56 <timer_1_Init>
    42f0:	81 e0       	ldi	r24, 0x01	; 1
	Comp_1.Index=1;
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	90 93 c5 09 	sts	0x09C5, r25	; 0x8009c5 <Comp_1+0x6f>
    42f8:	80 93 c4 09 	sts	0x09C4, r24	; 0x8009c4 <Comp_1+0x6e>
    42fc:	82 e0       	ldi	r24, 0x02	; 2
	Comp_2.Index=2;
    42fe:	90 e0       	ldi	r25, 0x00	; 0
    4300:	90 93 4b 0a 	sts	0x0A4B, r25	; 0x800a4b <Comp_2+0x6f>
    4304:	80 93 4a 0a 	sts	0x0A4A, r24	; 0x800a4a <Comp_2+0x6e>
    4308:	80 e0       	ldi	r24, 0x00	; 0
	//eeprom_write_block((void*)&EEpromData, ( void*)0, sizeof (xEEdata));
	current_time = time(NULL);
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    4310:	60 93 f1 08 	sts	0x08F1, r22	; 0x8008f1 <current_time>
    4314:	70 93 f2 08 	sts	0x08F2, r23	; 0x8008f2 <current_time+0x1>
    4318:	80 93 f3 08 	sts	0x08F3, r24	; 0x8008f3 <current_time+0x2>
    431c:	90 93 f4 08 	sts	0x08F4, r25	; 0x8008f4 <current_time+0x3>
    4320:	ee 24       	eor	r14, r14
	xSerialPort = xSerialPortInitMinimal( USART0, 9600, portSERIAL_BUFFER_TX, portSERIAL_BUFFER_RX);
    4322:	ea 94       	dec	r14
    4324:	f1 2c       	mov	r15, r1
    4326:	0f ef       	ldi	r16, 0xFF	; 255
    4328:	10 e0       	ldi	r17, 0x00	; 0
    432a:	20 e8       	ldi	r18, 0x80	; 128
    432c:	35 e2       	ldi	r19, 0x25	; 37
    432e:	40 e0       	ldi	r20, 0x00	; 0
    4330:	50 e0       	ldi	r21, 0x00	; 0
    4332:	60 e0       	ldi	r22, 0x00	; 0
    4334:	ce 01       	movw	r24, r28
    4336:	01 96       	adiw	r24, 0x01	; 1
    4338:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <xSerialPortInitMinimal>
    433c:	82 e2       	ldi	r24, 0x22	; 34
    433e:	fe 01       	movw	r30, r28
    4340:	31 96       	adiw	r30, 0x01	; 1
    4342:	ad e4       	ldi	r26, 0x4D	; 77
    4344:	b7 e0       	ldi	r27, 0x07	; 7
    4346:	01 90       	ld	r0, Z+
    4348:	0d 92       	st	X+, r0
    434a:	8a 95       	dec	r24
    434c:	e1 f7       	brne	.-8      	; 0x4346 <main+0x68>
    434e:	20 e8       	ldi	r18, 0x80	; 128
	xSerial3Port = xSerialPortInitMinimal( USART3, 9600, portSERIAL_BUFFER_TX, portSERIAL_BUFFER_RX);
    4350:	35 e2       	ldi	r19, 0x25	; 37
    4352:	40 e0       	ldi	r20, 0x00	; 0
    4354:	50 e0       	ldi	r21, 0x00	; 0
    4356:	66 e0       	ldi	r22, 0x06	; 6
    4358:	ce 01       	movw	r24, r28
    435a:	01 96       	adiw	r24, 0x01	; 1
    435c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <xSerialPortInitMinimal>
    4360:	82 e2       	ldi	r24, 0x22	; 34
    4362:	fe 01       	movw	r30, r28
    4364:	31 96       	adiw	r30, 0x01	; 1
    4366:	a4 e9       	ldi	r26, 0x94	; 148
    4368:	b7 e0       	ldi	r27, 0x07	; 7
    436a:	01 90       	ld	r0, Z+
    436c:	0d 92       	st	X+, r0
    436e:	8a 95       	dec	r24
    4370:	e1 f7       	brne	.-8      	; 0x436a <main+0x8c>
    4372:	43 e0       	ldi	r20, 0x03	; 3
	vSemaphoreCreateBinary(xMbBinarySemaphore);
    4374:	60 e0       	ldi	r22, 0x00	; 0
    4376:	81 e0       	ldi	r24, 0x01	; 1
    4378:	0e 94 a7 09 	call	0x134e	; 0x134e <xQueueGenericCreate>
    437c:	90 93 82 0a 	sts	0x0A82, r25	; 0x800a82 <xMbBinarySemaphore+0x1>
    4380:	80 93 81 0a 	sts	0x0A81, r24	; 0x800a81 <xMbBinarySemaphore>
    4384:	00 97       	sbiw	r24, 0x00	; 0
    4386:	41 f0       	breq	.+16     	; 0x4398 <main+0xba>
    4388:	00 e0       	ldi	r16, 0x00	; 0
    438a:	20 e0       	ldi	r18, 0x00	; 0
    438c:	30 e0       	ldi	r19, 0x00	; 0
    438e:	a9 01       	movw	r20, r18
    4390:	60 e0       	ldi	r22, 0x00	; 0
    4392:	70 e0       	ldi	r23, 0x00	; 0
    4394:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    4398:	40 e6       	ldi	r20, 0x60	; 96

    
	eeprom_read_block((void*)&EEpromData, (const void*)0, sizeof (xEEdata));
    439a:	50 e0       	ldi	r21, 0x00	; 0
    439c:	60 e0       	ldi	r22, 0x00	; 0
    439e:	70 e0       	ldi	r23, 0x00	; 0
    43a0:	86 ef       	ldi	r24, 0xF6	; 246
    43a2:	98 e0       	ldi	r25, 0x08	; 8
    43a4:	0e 94 7a 5d 	call	0xbaf4	; 0xbaf4 <eeprom_read_block>
    43a8:	86 e5       	ldi	r24, 0x56	; 86
	activateTimers(&Comp_1);
    43aa:	99 e0       	ldi	r25, 0x09	; 9
    43ac:	0e 94 5e 33 	call	0x66bc	; 0x66bc <activateTimers>
    43b0:	8c ed       	ldi	r24, 0xDC	; 220
	activateTimers(&Comp_2);
    43b2:	99 e0       	ldi	r25, 0x09	; 9
    43b4:	0e 94 5e 33 	call	0x66bc	; 0x66bc <activateTimers>
    43b8:	86 e5       	ldi	r24, 0x56	; 86
	activateTrvTimer(&Comp_1);
    43ba:	99 e0       	ldi	r25, 0x09	; 9
    43bc:	0e 94 85 51 	call	0xa30a	; 0xa30a <activateTrvTimer>
    43c0:	8c ed       	ldi	r24, 0xDC	; 220
	activateTrvTimer(&Comp_2);
    43c2:	99 e0       	ldi	r25, 0x09	; 9
    43c4:	0e 94 85 51 	call	0xa30a	; 0xa30a <activateTrvTimer>
    43c8:	81 e0       	ldi	r24, 0x01	; 1
	init_system=true;
    43ca:	80 93 80 0a 	sts	0x0A80, r24	; 0x800a80 <init_system>
    43ce:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <EEpromData+0x32>
	old_corection_1=EEpromData.trv_corection_1;
    43d2:	90 91 29 09 	lds	r25, 0x0929	; 0x800929 <EEpromData+0x33>
    43d6:	90 93 67 0a 	sts	0x0A67, r25	; 0x800a67 <old_corection_1+0x1>
    43da:	80 93 66 0a 	sts	0x0A66, r24	; 0x800a66 <old_corection_1>
    43de:	80 91 3e 09 	lds	r24, 0x093E	; 0x80093e <EEpromData+0x48>
	old_corection_2=EEpromData.trv_corection_2;
    43e2:	90 91 3f 09 	lds	r25, 0x093F	; 0x80093f <EEpromData+0x49>
    43e6:	90 93 db 09 	sts	0x09DB, r25	; 0x8009db <old_corection_2+0x1>
    43ea:	80 93 da 09 	sts	0x09DA, r24	; 0x8009da <old_corection_2>
    43ee:	86 ef       	ldi	r24, 0xF6	; 246
	Comp_1.modeOfPump=Comp_2.modeOfPump=selmode(&EEpromData);
    43f0:	98 e0       	ldi	r25, 0x08	; 8
    43f2:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <selmode>
    43f6:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <Comp_2+0x10>
    43fa:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <Comp_1+0x10>
    43fe:	99 e2       	ldi	r25, 0x29	; 41
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    4400:	88 e1       	ldi	r24, 0x18	; 24
    4402:	0f b6       	in	r0, 0x3f	; 63
    4404:	f8 94       	cli
    4406:	a8 95       	wdr
    4408:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    440c:	0f be       	out	0x3f, r0	; 63
    440e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    4412:	78 94       	sei
	wdt_enable(WDTO_8S);
	//-------------------------------------
	sei(); 
    4414:	e1 2c       	mov	r14, r1
	//-------------------------------------
	xTaskCreate(ModBus,(const portCHAR *)"ModBus",256,NULL,2, NULL );
    4416:	f1 2c       	mov	r15, r1
    4418:	02 e0       	ldi	r16, 0x02	; 2
    441a:	20 e0       	ldi	r18, 0x00	; 0
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	40 e0       	ldi	r20, 0x00	; 0
    4420:	51 e0       	ldi	r21, 0x01	; 1
    4422:	60 e9       	ldi	r22, 0x90	; 144
    4424:	72 e0       	ldi	r23, 0x02	; 2
    4426:	8c e3       	ldi	r24, 0x3C	; 60
    4428:	91 e2       	ldi	r25, 0x21	; 33
    442a:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    442e:	0f 2e       	mov	r0, r31
	xTaskCreate(System_1,(const portCHAR *)"System_1",512,NULL,0, &xHandleFirst );
    4430:	fd e0       	ldi	r31, 0x0D	; 13
    4432:	ef 2e       	mov	r14, r31
    4434:	f7 e0       	ldi	r31, 0x07	; 7
    4436:	ff 2e       	mov	r15, r31
    4438:	f0 2d       	mov	r31, r0
    443a:	00 e0       	ldi	r16, 0x00	; 0
    443c:	20 e0       	ldi	r18, 0x00	; 0
    443e:	30 e0       	ldi	r19, 0x00	; 0
    4440:	40 e0       	ldi	r20, 0x00	; 0
    4442:	52 e0       	ldi	r21, 0x02	; 2
    4444:	67 e9       	ldi	r22, 0x97	; 151
    4446:	72 e0       	ldi	r23, 0x02	; 2
    4448:	87 e7       	ldi	r24, 0x77	; 119
    444a:	9f e1       	ldi	r25, 0x1F	; 31
    444c:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    4450:	0f 2e       	mov	r0, r31
	xTaskCreate(System_2,(const portCHAR *)"System_2",512,NULL,0, &xHandleSecond );
    4452:	fb e0       	ldi	r31, 0x0B	; 11
    4454:	ef 2e       	mov	r14, r31
    4456:	f7 e0       	ldi	r31, 0x07	; 7
    4458:	ff 2e       	mov	r15, r31
    445a:	f0 2d       	mov	r31, r0
    445c:	20 e0       	ldi	r18, 0x00	; 0
    445e:	30 e0       	ldi	r19, 0x00	; 0
    4460:	40 e0       	ldi	r20, 0x00	; 0
    4462:	52 e0       	ldi	r21, 0x02	; 2
    4464:	60 ea       	ldi	r22, 0xA0	; 160
    4466:	72 e0       	ldi	r23, 0x02	; 2
    4468:	89 eb       	ldi	r24, 0xB9	; 185
    446a:	9e e1       	ldi	r25, 0x1E	; 30
    446c:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    4470:	e1 2c       	mov	r14, r1
	xTaskCreate(Defrost,(const portCHAR *)"Defrost",256,NULL,0, NULL );
    4472:	f1 2c       	mov	r15, r1
    4474:	20 e0       	ldi	r18, 0x00	; 0
    4476:	30 e0       	ldi	r19, 0x00	; 0
    4478:	40 e0       	ldi	r20, 0x00	; 0
    447a:	51 e0       	ldi	r21, 0x01	; 1
    447c:	69 ea       	ldi	r22, 0xA9	; 169
    447e:	72 e0       	ldi	r23, 0x02	; 2
    4480:	81 ec       	ldi	r24, 0xC1	; 193
    4482:	9d e1       	ldi	r25, 0x1D	; 29
    4484:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    4488:	0e 94 56 16 	call	0x2cac	; 0x2cac <vTaskStartScheduler>
	//--------------------------------------
	vTaskStartScheduler();
    448c:	80 e0       	ldi	r24, 0x00	; 0
}
    448e:	90 e0       	ldi	r25, 0x00	; 0
    4490:	a2 96       	adiw	r28, 0x22	; 34
    4492:	0f b6       	in	r0, 0x3f	; 63
    4494:	f8 94       	cli
    4496:	de bf       	out	0x3e, r29	; 62
    4498:	0f be       	out	0x3f, r0	; 63
    449a:	cd bf       	out	0x3d, r28	; 61
    449c:	08 95       	ret

0000449e <__vector_17>:
    449e:	1f 92       	push	r1

ISR(TIMER1_COMPA_vect) // timer_compare_a
{
    44a0:	0f 92       	push	r0
    44a2:	0f b6       	in	r0, 0x3f	; 63
    44a4:	0f 92       	push	r0
    44a6:	11 24       	eor	r1, r1
    44a8:	0b b6       	in	r0, 0x3b	; 59
    44aa:	0f 92       	push	r0
    44ac:	2f 93       	push	r18
    44ae:	3f 93       	push	r19
    44b0:	4f 93       	push	r20
    44b2:	5f 93       	push	r21
    44b4:	6f 93       	push	r22
    44b6:	7f 93       	push	r23
    44b8:	8f 93       	push	r24
    44ba:	9f 93       	push	r25
    44bc:	af 93       	push	r26
    44be:	bf 93       	push	r27
    44c0:	ef 93       	push	r30
    44c2:	ff 93       	push	r31
	
	static BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
    44c4:	10 92 fe 06 	sts	0x06FE, r1	; 0x8006fe <xHigherPriorityTaskWoken.3696>
	countTimer++;
    44c8:	80 91 97 0a 	lds	r24, 0x0A97	; 0x800a97 <countTimer>
    44cc:	90 91 98 0a 	lds	r25, 0x0A98	; 0x800a98 <countTimer+0x1>
    44d0:	a0 91 99 0a 	lds	r26, 0x0A99	; 0x800a99 <countTimer+0x2>
    44d4:	b0 91 9a 0a 	lds	r27, 0x0A9A	; 0x800a9a <countTimer+0x3>
    44d8:	01 96       	adiw	r24, 0x01	; 1
    44da:	a1 1d       	adc	r26, r1
    44dc:	b1 1d       	adc	r27, r1
    44de:	80 93 97 0a 	sts	0x0A97, r24	; 0x800a97 <countTimer>
    44e2:	90 93 98 0a 	sts	0x0A98, r25	; 0x800a98 <countTimer+0x1>
    44e6:	a0 93 99 0a 	sts	0x0A99, r26	; 0x800a99 <countTimer+0x2>
    44ea:	b0 93 9a 0a 	sts	0x0A9A, r27	; 0x800a9a <countTimer+0x3>
	if(countTimer==7){stop_1_Timer();countTimer=0;xSemaphoreGiveFromISR(xMbBinarySemaphore,&xHigherPriorityTaskWoken);}
    44ee:	80 91 97 0a 	lds	r24, 0x0A97	; 0x800a97 <countTimer>
    44f2:	90 91 98 0a 	lds	r25, 0x0A98	; 0x800a98 <countTimer+0x1>
    44f6:	a0 91 99 0a 	lds	r26, 0x0A99	; 0x800a99 <countTimer+0x2>
    44fa:	b0 91 9a 0a 	lds	r27, 0x0A9A	; 0x800a9a <countTimer+0x3>
    44fe:	07 97       	sbiw	r24, 0x07	; 7
    4500:	a1 05       	cpc	r26, r1
    4502:	b1 05       	cpc	r27, r1
    4504:	89 f4       	brne	.+34     	; 0x4528 <__vector_17+0x8a>
    4506:	17 d3       	rcall	.+1582   	; 0x4b36 <stop_1_Timer>
    4508:	10 92 97 0a 	sts	0x0A97, r1	; 0x800a97 <countTimer>
    450c:	10 92 98 0a 	sts	0x0A98, r1	; 0x800a98 <countTimer+0x1>
    4510:	10 92 99 0a 	sts	0x0A99, r1	; 0x800a99 <countTimer+0x2>
    4514:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <countTimer+0x3>
    4518:	6e ef       	ldi	r22, 0xFE	; 254
    451a:	76 e0       	ldi	r23, 0x06	; 6
    451c:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <xMbBinarySemaphore>
    4520:	90 91 82 0a 	lds	r25, 0x0A82	; 0x800a82 <xMbBinarySemaphore+0x1>
    4524:	0e 94 c9 0a 	call	0x1592	; 0x1592 <xQueueGiveFromISR>
	//if( xHigherPriorityTaskWoken == pdTRUE )portYIELD();

}
    4528:	ff 91       	pop	r31
    452a:	ef 91       	pop	r30
    452c:	bf 91       	pop	r27
    452e:	af 91       	pop	r26
    4530:	9f 91       	pop	r25
    4532:	8f 91       	pop	r24
    4534:	7f 91       	pop	r23
    4536:	6f 91       	pop	r22
    4538:	5f 91       	pop	r21
    453a:	4f 91       	pop	r20
    453c:	3f 91       	pop	r19
    453e:	2f 91       	pop	r18
    4540:	0f 90       	pop	r0
    4542:	0b be       	out	0x3b, r0	; 59
    4544:	0f 90       	pop	r0
    4546:	0f be       	out	0x3f, r0	; 63
    4548:	0f 90       	pop	r0
    454a:	1f 90       	pop	r1
    454c:	18 95       	reti

0000454e <ADE7758_read24>:
}
long ADE7758_getMaskInterrupts(void){
	return ADE7758_read24(MASK);
}
void ADE7758_setMaskInterrupts(unsigned long data){
	return ADE7758_write24(MASK, data);
    454e:	1f 93       	push	r17
    4550:	cf 93       	push	r28
    4552:	df 93       	push	r29
    4554:	c8 2f       	mov	r28, r24
    4556:	0f b6       	in	r0, 0x3f	; 63
    4558:	f8 94       	cli
    455a:	0f 92       	push	r0
    455c:	84 e0       	ldi	r24, 0x04	; 4
    455e:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <spiSelect>
    4562:	8c 2f       	mov	r24, r28
    4564:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    4568:	80 e0       	ldi	r24, 0x00	; 0
    456a:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    456e:	18 2f       	mov	r17, r24
    4570:	80 e0       	ldi	r24, 0x00	; 0
    4572:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    4576:	c8 2f       	mov	r28, r24
    4578:	80 e0       	ldi	r24, 0x00	; 0
    457a:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    457e:	d8 2f       	mov	r29, r24
    4580:	84 e0       	ldi	r24, 0x04	; 4
    4582:	0e 94 17 14 	call	0x282e	; 0x282e <spiDeselect>
    4586:	0f 90       	pop	r0
    4588:	0f be       	out	0x3f, r0	; 63
    458a:	8c 2f       	mov	r24, r28
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	a0 e0       	ldi	r26, 0x00	; 0
    4590:	b0 e0       	ldi	r27, 0x00	; 0
    4592:	ba 2f       	mov	r27, r26
    4594:	a9 2f       	mov	r26, r25
    4596:	98 2f       	mov	r25, r24
    4598:	88 27       	eor	r24, r24
    459a:	a1 2b       	or	r26, r17
    459c:	bc 01       	movw	r22, r24
    459e:	cd 01       	movw	r24, r26
    45a0:	6d 2b       	or	r22, r29
    45a2:	df 91       	pop	r29
    45a4:	cf 91       	pop	r28
    45a6:	1f 91       	pop	r17
    45a8:	08 95       	ret

000045aa <ADE7758_write8>:
    45aa:	cf 93       	push	r28
    45ac:	df 93       	push	r29
    45ae:	d8 2f       	mov	r29, r24
    45b0:	c6 2f       	mov	r28, r22
    45b2:	0f b6       	in	r0, 0x3f	; 63
    45b4:	f8 94       	cli
    45b6:	0f 92       	push	r0
    45b8:	84 e0       	ldi	r24, 0x04	; 4
    45ba:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <spiSelect>
    45be:	8d 2f       	mov	r24, r29
    45c0:	80 68       	ori	r24, 0x80	; 128
    45c2:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    45c6:	8c 2f       	mov	r24, r28
    45c8:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    45cc:	84 e0       	ldi	r24, 0x04	; 4
    45ce:	0e 94 17 14 	call	0x282e	; 0x282e <spiDeselect>
    45d2:	0f 90       	pop	r0
    45d4:	0f be       	out	0x3f, r0	; 63
    45d6:	df 91       	pop	r29
    45d8:	cf 91       	pop	r28
    45da:	08 95       	ret

000045dc <ADE7758_setOpMode>:
    45dc:	68 2f       	mov	r22, r24
    45de:	83 e1       	ldi	r24, 0x13	; 19
    45e0:	e4 cf       	rjmp	.-56     	; 0x45aa <ADE7758_write8>
    45e2:	08 95       	ret

000045e4 <ADE7758_setWavMode>:
    45e4:	68 2f       	mov	r22, r24
    45e6:	85 e1       	ldi	r24, 0x15	; 21
    45e8:	e0 cf       	rjmp	.-64     	; 0x45aa <ADE7758_write8>
    45ea:	08 95       	ret

000045ec <ADE7758_setLcycMode>:
    45ec:	68 2f       	mov	r22, r24
    45ee:	87 e1       	ldi	r24, 0x17	; 23
    45f0:	dc cf       	rjmp	.-72     	; 0x45aa <ADE7758_write8>
    45f2:	08 95       	ret

000045f4 <ADE7758_setupDivs>:
    45f4:	cf 93       	push	r28
    45f6:	df 93       	push	r29
    45f8:	d6 2f       	mov	r29, r22
    45fa:	c4 2f       	mov	r28, r20
    45fc:	68 2f       	mov	r22, r24
    45fe:	82 e4       	ldi	r24, 0x42	; 66
    4600:	d4 df       	rcall	.-88     	; 0x45aa <ADE7758_write8>
    4602:	6d 2f       	mov	r22, r29
    4604:	83 e4       	ldi	r24, 0x43	; 67
    4606:	d1 df       	rcall	.-94     	; 0x45aa <ADE7758_write8>
    4608:	6c 2f       	mov	r22, r28
    460a:	84 e4       	ldi	r24, 0x44	; 68
    460c:	ce df       	rcall	.-100    	; 0x45aa <ADE7758_write8>
    460e:	df 91       	pop	r29
    4610:	cf 91       	pop	r28
    4612:	08 95       	ret

00004614 <ADE7758_Init>:
    4614:	88 e0       	ldi	r24, 0x08	; 8
    4616:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <spiSetDataMode>
    461a:	86 e0       	ldi	r24, 0x06	; 6
    461c:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <spiSetClockDivider>
    4620:	81 e0       	ldi	r24, 0x01	; 1
    4622:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <spiSetBitOrder>
    4626:	84 e0       	ldi	r24, 0x04	; 4
    4628:	0e 94 81 13 	call	0x2702	; 0x2702 <spiBegin>
    462c:	80 e0       	ldi	r24, 0x00	; 0
    462e:	de df       	rcall	.-68     	; 0x45ec <ADE7758_setLcycMode>
    4630:	60 e0       	ldi	r22, 0x00	; 0
    4632:	83 e2       	ldi	r24, 0x23	; 35
    4634:	ba df       	rcall	.-140    	; 0x45aa <ADE7758_write8>
    4636:	42 e0       	ldi	r20, 0x02	; 2
    4638:	62 e0       	ldi	r22, 0x02	; 2
    463a:	82 e0       	ldi	r24, 0x02	; 2
    463c:	db df       	rcall	.-74     	; 0x45f4 <ADE7758_setupDivs>
    463e:	84 e0       	ldi	r24, 0x04	; 4
    4640:	cd df       	rcall	.-102    	; 0x45dc <ADE7758_setOpMode>
    4642:	80 e1       	ldi	r24, 0x10	; 16
    4644:	cf cf       	rjmp	.-98     	; 0x45e4 <ADE7758_setWavMode>
    4646:	08 95       	ret

00004648 <ADE7758_getStatus>:
}
unsigned long ADE7758_getStatus(){
	return ADE7758_read24(STATUS);
    4648:	89 e1       	ldi	r24, 0x19	; 25
    464a:	81 cf       	rjmp	.-254    	; 0x454e <ADE7758_read24>
}
    464c:	08 95       	ret

0000464e <ADE7758_resetStatus>:
unsigned long ADE7758_resetStatus(){
	return ADE7758_read24(RSTATUS);
    464e:	8a e1       	ldi	r24, 0x1A	; 26
    4650:	7e cf       	rjmp	.-260    	; 0x454e <ADE7758_read24>
}
    4652:	08 95       	ret

00004654 <Check_Erors>:
#include "Errors.h"

extern  bool def;
int Check_Erors(xCompressor *comp,xEEdata *EElimit)
{
    4654:	4f 92       	push	r4
    4656:	5f 92       	push	r5
    4658:	6f 92       	push	r6
    465a:	7f 92       	push	r7
    465c:	8f 92       	push	r8
    465e:	9f 92       	push	r9
    4660:	af 92       	push	r10
    4662:	bf 92       	push	r11
    4664:	cf 92       	push	r12
    4666:	df 92       	push	r13
    4668:	ef 92       	push	r14
    466a:	ff 92       	push	r15
    466c:	0f 93       	push	r16
    466e:	1f 93       	push	r17
    4670:	cf 93       	push	r28
    4672:	df 93       	push	r29
    4674:	00 d0       	rcall	.+0      	; 0x4676 <Check_Erors+0x22>
    4676:	00 d0       	rcall	.+0      	; 0x4678 <Check_Erors+0x24>
    4678:	cd b7       	in	r28, 0x3d	; 61
    467a:	de b7       	in	r29, 0x3e	; 62
    467c:	9e 83       	std	Y+6, r25	; 0x06
    467e:	8d 83       	std	Y+5, r24	; 0x05
    4680:	8b 01       	movw	r16, r22
		if( comp->Dhw_Temp<-100){return (10+comp->Index);}
    4682:	20 e0       	ldi	r18, 0x00	; 0
    4684:	30 e0       	ldi	r19, 0x00	; 0
    4686:	48 ec       	ldi	r20, 0xC8	; 200
    4688:	52 ec       	ldi	r21, 0xC2	; 194
    468a:	dc 01       	movw	r26, r24
    468c:	52 96       	adiw	r26, 0x12	; 18
    468e:	6d 91       	ld	r22, X+
    4690:	7d 91       	ld	r23, X+
    4692:	8d 91       	ld	r24, X+
    4694:	9c 91       	ld	r25, X
    4696:	55 97       	sbiw	r26, 0x15	; 21
    4698:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    469c:	88 23       	and	r24, r24
    469e:	44 f4       	brge	.+16     	; 0x46b0 <Check_Erors+0x5c>
    46a0:	ed 81       	ldd	r30, Y+5	; 0x05
    46a2:	fe 81       	ldd	r31, Y+6	; 0x06
    46a4:	e2 59       	subi	r30, 0x92	; 146
    46a6:	ff 4f       	sbci	r31, 0xFF	; 255
    46a8:	80 81       	ld	r24, Z
    46aa:	91 81       	ldd	r25, Z+1	; 0x01
    46ac:	0a 96       	adiw	r24, 0x0a	; 10
    46ae:	21 c2       	rjmp	.+1090   	; 0x4af2 <Check_Erors+0x49e>
		else if(comp->Bac_Temp<-100) {return (20+comp->Index);}
    46b0:	ad 81       	ldd	r26, Y+5	; 0x05
    46b2:	be 81       	ldd	r27, Y+6	; 0x06
    46b4:	56 96       	adiw	r26, 0x16	; 22
    46b6:	cd 90       	ld	r12, X+
    46b8:	dd 90       	ld	r13, X+
    46ba:	ed 90       	ld	r14, X+
    46bc:	fc 90       	ld	r15, X
    46be:	59 97       	sbiw	r26, 0x19	; 25
    46c0:	20 e0       	ldi	r18, 0x00	; 0
    46c2:	30 e0       	ldi	r19, 0x00	; 0
    46c4:	48 ec       	ldi	r20, 0xC8	; 200
    46c6:	52 ec       	ldi	r21, 0xC2	; 194
    46c8:	c7 01       	movw	r24, r14
    46ca:	b6 01       	movw	r22, r12
    46cc:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    46d0:	88 23       	and	r24, r24
    46d2:	44 f4       	brge	.+16     	; 0x46e4 <Check_Erors+0x90>
    46d4:	ed 81       	ldd	r30, Y+5	; 0x05
    46d6:	fe 81       	ldd	r31, Y+6	; 0x06
    46d8:	e2 59       	subi	r30, 0x92	; 146
    46da:	ff 4f       	sbci	r31, 0xFF	; 255
    46dc:	80 81       	ld	r24, Z
    46de:	91 81       	ldd	r25, Z+1	; 0x01
    46e0:	44 96       	adiw	r24, 0x14	; 20
    46e2:	07 c2       	rjmp	.+1038   	; 0x4af2 <Check_Erors+0x49e>
		else if (comp->Heat_Out<-100) {return (30+comp->Index);}
    46e4:	ad 81       	ldd	r26, Y+5	; 0x05
    46e6:	be 81       	ldd	r27, Y+6	; 0x06
    46e8:	9a 96       	adiw	r26, 0x2a	; 42
    46ea:	4d 90       	ld	r4, X+
    46ec:	5d 90       	ld	r5, X+
    46ee:	6d 90       	ld	r6, X+
    46f0:	7c 90       	ld	r7, X
    46f2:	9d 97       	sbiw	r26, 0x2d	; 45
    46f4:	20 e0       	ldi	r18, 0x00	; 0
    46f6:	30 e0       	ldi	r19, 0x00	; 0
    46f8:	48 ec       	ldi	r20, 0xC8	; 200
    46fa:	52 ec       	ldi	r21, 0xC2	; 194
    46fc:	c3 01       	movw	r24, r6
    46fe:	b2 01       	movw	r22, r4
    4700:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    4704:	88 23       	and	r24, r24
    4706:	44 f4       	brge	.+16     	; 0x4718 <Check_Erors+0xc4>
    4708:	ed 81       	ldd	r30, Y+5	; 0x05
    470a:	fe 81       	ldd	r31, Y+6	; 0x06
    470c:	e2 59       	subi	r30, 0x92	; 146
    470e:	ff 4f       	sbci	r31, 0xFF	; 255
    4710:	80 81       	ld	r24, Z
    4712:	91 81       	ldd	r25, Z+1	; 0x01
    4714:	4e 96       	adiw	r24, 0x1e	; 30
    4716:	ed c1       	rjmp	.+986    	; 0x4af2 <Check_Erors+0x49e>
		else if (comp->Heat_In<-100){return (40+comp->Index);}
    4718:	ad 81       	ldd	r26, Y+5	; 0x05
    471a:	be 81       	ldd	r27, Y+6	; 0x06
    471c:	9e 96       	adiw	r26, 0x2e	; 46
    471e:	8d 90       	ld	r8, X+
    4720:	9d 90       	ld	r9, X+
    4722:	ad 90       	ld	r10, X+
    4724:	bc 90       	ld	r11, X
    4726:	d1 97       	sbiw	r26, 0x31	; 49
    4728:	20 e0       	ldi	r18, 0x00	; 0
    472a:	30 e0       	ldi	r19, 0x00	; 0
    472c:	48 ec       	ldi	r20, 0xC8	; 200
    472e:	52 ec       	ldi	r21, 0xC2	; 194
    4730:	c5 01       	movw	r24, r10
    4732:	b4 01       	movw	r22, r8
    4734:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    4738:	88 23       	and	r24, r24
    473a:	44 f4       	brge	.+16     	; 0x474c <Check_Erors+0xf8>
    473c:	ed 81       	ldd	r30, Y+5	; 0x05
    473e:	fe 81       	ldd	r31, Y+6	; 0x06
    4740:	e2 59       	subi	r30, 0x92	; 146
    4742:	ff 4f       	sbci	r31, 0xFF	; 255
    4744:	80 81       	ld	r24, Z
    4746:	91 81       	ldd	r25, Z+1	; 0x01
    4748:	88 96       	adiw	r24, 0x28	; 40
    474a:	d3 c1       	rjmp	.+934    	; 0x4af2 <Check_Erors+0x49e>
		else if(comp->Src_In<-100) {return (50+comp->Index);}
    474c:	20 e0       	ldi	r18, 0x00	; 0
    474e:	30 e0       	ldi	r19, 0x00	; 0
    4750:	48 ec       	ldi	r20, 0xC8	; 200
    4752:	52 ec       	ldi	r21, 0xC2	; 194
    4754:	ad 81       	ldd	r26, Y+5	; 0x05
    4756:	be 81       	ldd	r27, Y+6	; 0x06
    4758:	d2 96       	adiw	r26, 0x32	; 50
    475a:	6d 91       	ld	r22, X+
    475c:	7d 91       	ld	r23, X+
    475e:	8d 91       	ld	r24, X+
    4760:	9c 91       	ld	r25, X
    4762:	d5 97       	sbiw	r26, 0x35	; 53
    4764:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    4768:	88 23       	and	r24, r24
    476a:	44 f4       	brge	.+16     	; 0x477c <Check_Erors+0x128>
    476c:	ed 81       	ldd	r30, Y+5	; 0x05
    476e:	fe 81       	ldd	r31, Y+6	; 0x06
    4770:	e2 59       	subi	r30, 0x92	; 146
    4772:	ff 4f       	sbci	r31, 0xFF	; 255
    4774:	80 81       	ld	r24, Z
    4776:	91 81       	ldd	r25, Z+1	; 0x01
    4778:	c2 96       	adiw	r24, 0x32	; 50
    477a:	bb c1       	rjmp	.+886    	; 0x4af2 <Check_Erors+0x49e>
		else if (comp->Src_Out<-100) {return (60+comp->Index);}
    477c:	20 e0       	ldi	r18, 0x00	; 0
    477e:	30 e0       	ldi	r19, 0x00	; 0
    4780:	48 ec       	ldi	r20, 0xC8	; 200
    4782:	52 ec       	ldi	r21, 0xC2	; 194
    4784:	ad 81       	ldd	r26, Y+5	; 0x05
    4786:	be 81       	ldd	r27, Y+6	; 0x06
    4788:	d6 96       	adiw	r26, 0x36	; 54
    478a:	6d 91       	ld	r22, X+
    478c:	7d 91       	ld	r23, X+
    478e:	8d 91       	ld	r24, X+
    4790:	9c 91       	ld	r25, X
    4792:	d9 97       	sbiw	r26, 0x39	; 57
    4794:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    4798:	88 23       	and	r24, r24
    479a:	44 f4       	brge	.+16     	; 0x47ac <Check_Erors+0x158>
    479c:	ed 81       	ldd	r30, Y+5	; 0x05
    479e:	fe 81       	ldd	r31, Y+6	; 0x06
    47a0:	e2 59       	subi	r30, 0x92	; 146
    47a2:	ff 4f       	sbci	r31, 0xFF	; 255
    47a4:	80 81       	ld	r24, Z
    47a6:	91 81       	ldd	r25, Z+1	; 0x01
    47a8:	cc 96       	adiw	r24, 0x3c	; 60
    47aa:	a3 c1       	rjmp	.+838    	; 0x4af2 <Check_Erors+0x49e>
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
    47ac:	ad 81       	ldd	r26, Y+5	; 0x05
    47ae:	be 81       	ldd	r27, Y+6	; 0x06
    47b0:	da 96       	adiw	r26, 0x3a	; 58
    47b2:	8d 91       	ld	r24, X+
    47b4:	9d 91       	ld	r25, X+
    47b6:	0d 90       	ld	r0, X+
    47b8:	bc 91       	ld	r27, X
    47ba:	a0 2d       	mov	r26, r0
    47bc:	89 83       	std	Y+1, r24	; 0x01
    47be:	9a 83       	std	Y+2, r25	; 0x02
    47c0:	ab 83       	std	Y+3, r26	; 0x03
    47c2:	bc 83       	std	Y+4, r27	; 0x04
    47c4:	20 e0       	ldi	r18, 0x00	; 0
    47c6:	30 e0       	ldi	r19, 0x00	; 0
    47c8:	48 ec       	ldi	r20, 0xC8	; 200
    47ca:	52 ec       	ldi	r21, 0xC2	; 194
    47cc:	bc 01       	movw	r22, r24
    47ce:	cd 01       	movw	r24, r26
    47d0:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    47d4:	88 23       	and	r24, r24
    47d6:	4c f4       	brge	.+18     	; 0x47ea <Check_Erors+0x196>
    47d8:	ed 81       	ldd	r30, Y+5	; 0x05
    47da:	fe 81       	ldd	r31, Y+6	; 0x06
    47dc:	e2 59       	subi	r30, 0x92	; 146
    47de:	ff 4f       	sbci	r31, 0xFF	; 255
    47e0:	80 81       	ld	r24, Z
    47e2:	91 81       	ldd	r25, Z+1	; 0x01
    47e4:	8a 5b       	subi	r24, 0xBA	; 186
    47e6:	9f 4f       	sbci	r25, 0xFF	; 255
    47e8:	84 c1       	rjmp	.+776    	; 0x4af2 <Check_Erors+0x49e>
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
    47ea:	20 e0       	ldi	r18, 0x00	; 0
    47ec:	30 e0       	ldi	r19, 0x00	; 0
    47ee:	48 ec       	ldi	r20, 0xC8	; 200
    47f0:	52 ec       	ldi	r21, 0xC2	; 194
    47f2:	ed 81       	ldd	r30, Y+5	; 0x05
    47f4:	fe 81       	ldd	r31, Y+6	; 0x06
    47f6:	fe 96       	adiw	r30, 0x3e	; 62
    47f8:	60 81       	ld	r22, Z
    47fa:	71 81       	ldd	r23, Z+1	; 0x01
    47fc:	82 81       	ldd	r24, Z+2	; 0x02
    47fe:	93 81       	ldd	r25, Z+3	; 0x03
    4800:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    4804:	88 23       	and	r24, r24
    4806:	54 f4       	brge	.+20     	; 0x481c <Check_Erors+0x1c8>
    4808:	8d 81       	ldd	r24, Y+5	; 0x05
    480a:	9e 81       	ldd	r25, Y+6	; 0x06
    480c:	82 59       	subi	r24, 0x92	; 146
    480e:	9f 4f       	sbci	r25, 0xFF	; 255
    4810:	dc 01       	movw	r26, r24
    4812:	8d 91       	ld	r24, X+
    4814:	9c 91       	ld	r25, X
    4816:	80 5b       	subi	r24, 0xB0	; 176
    4818:	9f 4f       	sbci	r25, 0xFF	; 255
    481a:	6b c1       	rjmp	.+726    	; 0x4af2 <Check_Erors+0x49e>
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
    481c:	20 e0       	ldi	r18, 0x00	; 0
    481e:	30 e0       	ldi	r19, 0x00	; 0
    4820:	48 ec       	ldi	r20, 0xC8	; 200
    4822:	52 ec       	ldi	r21, 0xC2	; 194
    4824:	ed 81       	ldd	r30, Y+5	; 0x05
    4826:	fe 81       	ldd	r31, Y+6	; 0x06
    4828:	ee 5b       	subi	r30, 0xBE	; 190
    482a:	ff 4f       	sbci	r31, 0xFF	; 255
    482c:	60 81       	ld	r22, Z
    482e:	71 81       	ldd	r23, Z+1	; 0x01
    4830:	82 81       	ldd	r24, Z+2	; 0x02
    4832:	93 81       	ldd	r25, Z+3	; 0x03
    4834:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    4838:	88 23       	and	r24, r24
    483a:	4c f4       	brge	.+18     	; 0x484e <Check_Erors+0x1fa>
    483c:	ed 81       	ldd	r30, Y+5	; 0x05
    483e:	fe 81       	ldd	r31, Y+6	; 0x06
    4840:	e2 59       	subi	r30, 0x92	; 146
    4842:	ff 4f       	sbci	r31, 0xFF	; 255
    4844:	80 81       	ld	r24, Z
    4846:	91 81       	ldd	r25, Z+1	; 0x01
    4848:	86 5a       	subi	r24, 0xA6	; 166
    484a:	9f 4f       	sbci	r25, 0xFF	; 255
    484c:	52 c1       	rjmp	.+676    	; 0x4af2 <Check_Erors+0x49e>
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
    484e:	4a 9b       	sbis	0x09, 2	; 9
    4850:	10 c0       	rjmp	.+32     	; 0x4872 <Check_Erors+0x21e>
    4852:	ad 81       	ldd	r26, Y+5	; 0x05
    4854:	be 81       	ldd	r27, Y+6	; 0x06
    4856:	1f 96       	adiw	r26, 0x0f	; 15
    4858:	8c 91       	ld	r24, X
    485a:	1f 97       	sbiw	r26, 0x0f	; 15
    485c:	81 30       	cpi	r24, 0x01	; 1
    485e:	49 f4       	brne	.+18     	; 0x4872 <Check_Erors+0x21e>
    4860:	fd 01       	movw	r30, r26
    4862:	e2 59       	subi	r30, 0x92	; 146
    4864:	ff 4f       	sbci	r31, 0xFF	; 255
    4866:	80 81       	ld	r24, Z
    4868:	91 81       	ldd	r25, Z+1	; 0x01
    486a:	01 97       	sbiw	r24, 0x01	; 1
    486c:	09 f0       	breq	.+2      	; 0x4870 <Check_Erors+0x21c>
    486e:	30 c1       	rjmp	.+608    	; 0x4ad0 <Check_Erors+0x47c>
    4870:	0e c1       	rjmp	.+540    	; 0x4a8e <Check_Erors+0x43a>
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    4872:	4b 9b       	sbis	0x09, 3	; 9
    4874:	10 c0       	rjmp	.+32     	; 0x4896 <Check_Erors+0x242>
    4876:	ed 81       	ldd	r30, Y+5	; 0x05
    4878:	fe 81       	ldd	r31, Y+6	; 0x06
    487a:	87 85       	ldd	r24, Z+15	; 0x0f
    487c:	81 30       	cpi	r24, 0x01	; 1
    487e:	09 f0       	breq	.+2      	; 0x4882 <Check_Erors+0x22e>
    4880:	35 c1       	rjmp	.+618    	; 0x4aec <Check_Erors+0x498>
    4882:	ed 81       	ldd	r30, Y+5	; 0x05
    4884:	fe 81       	ldd	r31, Y+6	; 0x06
    4886:	e2 59       	subi	r30, 0x92	; 146
    4888:	ff 4f       	sbci	r31, 0xFF	; 255
    488a:	80 81       	ld	r24, Z
    488c:	91 81       	ldd	r25, Z+1	; 0x01
    488e:	02 97       	sbiw	r24, 0x02	; 2
    4890:	09 f0       	breq	.+2      	; 0x4894 <Check_Erors+0x240>
    4892:	21 c1       	rjmp	.+578    	; 0x4ad6 <Check_Erors+0x482>
    4894:	ff c0       	rjmp	.+510    	; 0x4a94 <Check_Erors+0x440>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    4896:	65 9b       	sbis	0x0c, 5	; 12
    4898:	11 c0       	rjmp	.+34     	; 0x48bc <Check_Erors+0x268>
    489a:	ad 81       	ldd	r26, Y+5	; 0x05
    489c:	be 81       	ldd	r27, Y+6	; 0x06
    489e:	1f 96       	adiw	r26, 0x0f	; 15
    48a0:	8c 91       	ld	r24, X
    48a2:	81 30       	cpi	r24, 0x01	; 1
    48a4:	09 f0       	breq	.+2      	; 0x48a8 <Check_Erors+0x254>
    48a6:	1a c1       	rjmp	.+564    	; 0x4adc <Check_Erors+0x488>
    48a8:	ed 81       	ldd	r30, Y+5	; 0x05
    48aa:	fe 81       	ldd	r31, Y+6	; 0x06
    48ac:	e2 59       	subi	r30, 0x92	; 146
    48ae:	ff 4f       	sbci	r31, 0xFF	; 255
    48b0:	80 81       	ld	r24, Z
    48b2:	91 81       	ldd	r25, Z+1	; 0x01
    48b4:	01 97       	sbiw	r24, 0x01	; 1
    48b6:	09 f0       	breq	.+2      	; 0x48ba <Check_Erors+0x266>
    48b8:	13 c1       	rjmp	.+550    	; 0x4ae0 <Check_Erors+0x48c>
    48ba:	ef c0       	rjmp	.+478    	; 0x4a9a <Check_Erors+0x446>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    48bc:	65 9b       	sbis	0x0c, 5	; 12
    48be:	0e c0       	rjmp	.+28     	; 0x48dc <Check_Erors+0x288>
    48c0:	ed 81       	ldd	r30, Y+5	; 0x05
    48c2:	fe 81       	ldd	r31, Y+6	; 0x06
    48c4:	87 85       	ldd	r24, Z+15	; 0x0f
    48c6:	81 30       	cpi	r24, 0x01	; 1
    48c8:	49 f4       	brne	.+18     	; 0x48dc <Check_Erors+0x288>
    48ca:	ed 81       	ldd	r30, Y+5	; 0x05
    48cc:	fe 81       	ldd	r31, Y+6	; 0x06
    48ce:	e2 59       	subi	r30, 0x92	; 146
    48d0:	ff 4f       	sbci	r31, 0xFF	; 255
    48d2:	80 81       	ld	r24, Z
    48d4:	91 81       	ldd	r25, Z+1	; 0x01
    48d6:	02 97       	sbiw	r24, 0x02	; 2
    48d8:	09 f4       	brne	.+2      	; 0x48dc <Check_Erors+0x288>
    48da:	e2 c0       	rjmp	.+452    	; 0x4aa0 <Check_Erors+0x44c>
		else if ( comp->High_Press > 0){return (140+comp->Index);}
    48dc:	20 e0       	ldi	r18, 0x00	; 0
    48de:	30 e0       	ldi	r19, 0x00	; 0
    48e0:	a9 01       	movw	r20, r18
    48e2:	ad 81       	ldd	r26, Y+5	; 0x05
    48e4:	be 81       	ldd	r27, Y+6	; 0x06
    48e6:	5a 96       	adiw	r26, 0x1a	; 26
    48e8:	6d 91       	ld	r22, X+
    48ea:	7d 91       	ld	r23, X+
    48ec:	8d 91       	ld	r24, X+
    48ee:	9c 91       	ld	r25, X
    48f0:	5d 97       	sbiw	r26, 0x1d	; 29
    48f2:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    48f6:	18 16       	cp	r1, r24
    48f8:	4c f4       	brge	.+18     	; 0x490c <Check_Erors+0x2b8>
    48fa:	ed 81       	ldd	r30, Y+5	; 0x05
    48fc:	fe 81       	ldd	r31, Y+6	; 0x06
    48fe:	e2 59       	subi	r30, 0x92	; 146
    4900:	ff 4f       	sbci	r31, 0xFF	; 255
    4902:	80 81       	ld	r24, Z
    4904:	91 81       	ldd	r25, Z+1	; 0x01
    4906:	84 57       	subi	r24, 0x74	; 116
    4908:	9f 4f       	sbci	r25, 0xFF	; 255
    490a:	f3 c0       	rjmp	.+486    	; 0x4af2 <Check_Erors+0x49e>
		else if ( comp->Low_Press>0 ) {return (120+comp->Index);}
    490c:	20 e0       	ldi	r18, 0x00	; 0
    490e:	30 e0       	ldi	r19, 0x00	; 0
    4910:	a9 01       	movw	r20, r18
    4912:	ad 81       	ldd	r26, Y+5	; 0x05
    4914:	be 81       	ldd	r27, Y+6	; 0x06
    4916:	5e 96       	adiw	r26, 0x1e	; 30
    4918:	6d 91       	ld	r22, X+
    491a:	7d 91       	ld	r23, X+
    491c:	8d 91       	ld	r24, X+
    491e:	9c 91       	ld	r25, X
    4920:	91 97       	sbiw	r26, 0x21	; 33
    4922:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    4926:	18 16       	cp	r1, r24
    4928:	4c f4       	brge	.+18     	; 0x493c <Check_Erors+0x2e8>
    492a:	ed 81       	ldd	r30, Y+5	; 0x05
    492c:	fe 81       	ldd	r31, Y+6	; 0x06
    492e:	e2 59       	subi	r30, 0x92	; 146
    4930:	ff 4f       	sbci	r31, 0xFF	; 255
    4932:	80 81       	ld	r24, Z
    4934:	91 81       	ldd	r25, Z+1	; 0x01
    4936:	88 58       	subi	r24, 0x88	; 136
    4938:	9f 4f       	sbci	r25, 0xFF	; 255
    493a:	db c0       	rjmp	.+438    	; 0x4af2 <Check_Erors+0x49e>
		else if ( comp->Bac_Temp > EElimit->HEAT_Max && comp->Heating==1){return (160+comp->Index);}
    493c:	d8 01       	movw	r26, r16
    493e:	19 96       	adiw	r26, 0x09	; 9
    4940:	6c 91       	ld	r22, X
    4942:	70 e0       	ldi	r23, 0x00	; 0
    4944:	80 e0       	ldi	r24, 0x00	; 0
    4946:	90 e0       	ldi	r25, 0x00	; 0
    4948:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    494c:	9b 01       	movw	r18, r22
    494e:	ac 01       	movw	r20, r24
    4950:	c7 01       	movw	r24, r14
    4952:	b6 01       	movw	r22, r12
    4954:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    4958:	18 16       	cp	r1, r24
    495a:	64 f4       	brge	.+24     	; 0x4974 <Check_Erors+0x320>
    495c:	ed 81       	ldd	r30, Y+5	; 0x05
    495e:	fe 81       	ldd	r31, Y+6	; 0x06
    4960:	82 81       	ldd	r24, Z+2	; 0x02
    4962:	88 23       	and	r24, r24
    4964:	39 f0       	breq	.+14     	; 0x4974 <Check_Erors+0x320>
    4966:	e2 59       	subi	r30, 0x92	; 146
    4968:	ff 4f       	sbci	r31, 0xFF	; 255
    496a:	80 81       	ld	r24, Z
    496c:	91 81       	ldd	r25, Z+1	; 0x01
    496e:	80 56       	subi	r24, 0x60	; 96
    4970:	9f 4f       	sbci	r25, 0xFF	; 255
    4972:	bf c0       	rjmp	.+382    	; 0x4af2 <Check_Erors+0x49e>
		//else if ( comp->Bac_Temp < EElimit->Cool_Min && comp->Cooling==1){return (170+comp->Index);}
		//else if ( comp->SuperHeat < EElimit->MinSuperheat && comp->checkTrv) {return (180+comp->Index);}
		//else if ( comp->SuperHeat > EElimit->MaxSuperheat && comp->checkTrv && !comp->def) {return (190+comp->Index);}
		//else if ( comp->SuperCool < EElimit->MinSupercool && comp->checkTrv){return (200+comp->Index);}
		//else if ( comp->SuperCool > EElimit->MaxSupercool && comp->checkTrv && !comp->def){return (210+comp->Index);}
		else if ( comp->Ex_Comp > EElimit->ExhaustMax){return 220;}	
    4974:	d8 01       	movw	r26, r16
    4976:	1e 96       	adiw	r26, 0x0e	; 14
    4978:	6c 91       	ld	r22, X
    497a:	70 e0       	ldi	r23, 0x00	; 0
    497c:	80 e0       	ldi	r24, 0x00	; 0
    497e:	90 e0       	ldi	r25, 0x00	; 0
    4980:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    4984:	9b 01       	movw	r18, r22
    4986:	ac 01       	movw	r20, r24
    4988:	69 81       	ldd	r22, Y+1	; 0x01
    498a:	7a 81       	ldd	r23, Y+2	; 0x02
    498c:	8b 81       	ldd	r24, Y+3	; 0x03
    498e:	9c 81       	ldd	r25, Y+4	; 0x04
    4990:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    4994:	18 16       	cp	r1, r24
    4996:	0c f4       	brge	.+2      	; 0x499a <Check_Erors+0x346>
    4998:	86 c0       	rjmp	.+268    	; 0x4aa6 <Check_Erors+0x452>
		//else if (abs(comp->Src_In - comp->Src_Out) > EElimit->Delta_source_max && comp->checkErrors && EEpromData.AireToWater==0) {return (230+comp->Index);}
		//else if (abs(comp->Src_In - comp->Src_Out) <  EElimit->Delta_source_min && comp->checkErrors && EEpromData.AireToWater==0) {return (240+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out)  > EElimit->Delta_heating_max && comp->checkErrors) {return (250+comp->Index);}
    499a:	a3 01       	movw	r20, r6
    499c:	92 01       	movw	r18, r4
    499e:	c5 01       	movw	r24, r10
    49a0:	b4 01       	movw	r22, r8
    49a2:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    49a6:	0e 94 05 55 	call	0xaa0a	; 0xaa0a <__fixsfsi>
    49aa:	9b 01       	movw	r18, r22
    49ac:	77 23       	and	r23, r23
    49ae:	24 f4       	brge	.+8      	; 0x49b8 <Check_Erors+0x364>
    49b0:	22 27       	eor	r18, r18
    49b2:	33 27       	eor	r19, r19
    49b4:	26 1b       	sub	r18, r22
    49b6:	37 0b       	sbc	r19, r23
    49b8:	c9 01       	movw	r24, r18
    49ba:	f8 01       	movw	r30, r16
    49bc:	24 89       	ldd	r18, Z+20	; 0x14
    49be:	30 e0       	ldi	r19, 0x00	; 0
    49c0:	28 17       	cp	r18, r24
    49c2:	39 07       	cpc	r19, r25
    49c4:	74 f4       	brge	.+28     	; 0x49e2 <Check_Erors+0x38e>
    49c6:	ad 81       	ldd	r26, Y+5	; 0x05
    49c8:	be 81       	ldd	r27, Y+6	; 0x06
    49ca:	15 96       	adiw	r26, 0x05	; 5
    49cc:	8c 91       	ld	r24, X
    49ce:	15 97       	sbiw	r26, 0x05	; 5
    49d0:	88 23       	and	r24, r24
    49d2:	d9 f0       	breq	.+54     	; 0x4a0a <Check_Erors+0x3b6>
    49d4:	a2 59       	subi	r26, 0x92	; 146
    49d6:	bf 4f       	sbci	r27, 0xFF	; 255
    49d8:	8d 91       	ld	r24, X+
    49da:	9c 91       	ld	r25, X
    49dc:	86 50       	subi	r24, 0x06	; 6
    49de:	9f 4f       	sbci	r25, 0xFF	; 255
    49e0:	88 c0       	rjmp	.+272    	; 0x4af2 <Check_Erors+0x49e>
		else if (abs(comp->Heat_In - comp->Heat_Out) < EElimit->Delta_heating_min &&  comp->checkErrors) {return (260+comp->Index);} 
    49e2:	f8 01       	movw	r30, r16
    49e4:	23 89       	ldd	r18, Z+19	; 0x13
    49e6:	30 e0       	ldi	r19, 0x00	; 0
    49e8:	82 17       	cp	r24, r18
    49ea:	93 07       	cpc	r25, r19
    49ec:	74 f4       	brge	.+28     	; 0x4a0a <Check_Erors+0x3b6>
    49ee:	ad 81       	ldd	r26, Y+5	; 0x05
    49f0:	be 81       	ldd	r27, Y+6	; 0x06
    49f2:	15 96       	adiw	r26, 0x05	; 5
    49f4:	8c 91       	ld	r24, X
    49f6:	15 97       	sbiw	r26, 0x05	; 5
    49f8:	88 23       	and	r24, r24
    49fa:	39 f0       	breq	.+14     	; 0x4a0a <Check_Erors+0x3b6>
    49fc:	a2 59       	subi	r26, 0x92	; 146
    49fe:	bf 4f       	sbci	r27, 0xFF	; 255
    4a00:	8d 91       	ld	r24, X+
    4a02:	9c 91       	ld	r25, X
    4a04:	8c 5f       	subi	r24, 0xFC	; 252
    4a06:	9e 4f       	sbci	r25, 0xFE	; 254
    4a08:	74 c0       	rjmp	.+232    	; 0x4af2 <Check_Erors+0x49e>
		else if (!(ADE7758_getStatus() & ZXA) && EElimit->Power_380==1 && comp->Index==1){return 271;} // ADE7758_resetStatus();
    4a0a:	1e de       	rcall	.-964    	; 0x4648 <ADE7758_getStatus>
    4a0c:	71 fd       	sbrc	r23, 1
    4a0e:	0d c0       	rjmp	.+26     	; 0x4a2a <Check_Erors+0x3d6>
    4a10:	f8 01       	movw	r30, r16
    4a12:	81 a5       	ldd	r24, Z+41	; 0x29
    4a14:	81 30       	cpi	r24, 0x01	; 1
    4a16:	49 f4       	brne	.+18     	; 0x4a2a <Check_Erors+0x3d6>
    4a18:	ed 81       	ldd	r30, Y+5	; 0x05
    4a1a:	fe 81       	ldd	r31, Y+6	; 0x06
    4a1c:	e2 59       	subi	r30, 0x92	; 146
    4a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a20:	80 81       	ld	r24, Z
    4a22:	91 81       	ldd	r25, Z+1	; 0x01
    4a24:	01 97       	sbiw	r24, 0x01	; 1
    4a26:	09 f4       	brne	.+2      	; 0x4a2a <Check_Erors+0x3d6>
		else if (!(ADE7758_getStatus() & ZXB) && EElimit->Power_380==1 && comp->Index==1){return 281;}//ADE7758_resetStatus();
    4a28:	41 c0       	rjmp	.+130    	; 0x4aac <Check_Erors+0x458>
    4a2a:	0e de       	rcall	.-996    	; 0x4648 <ADE7758_getStatus>
    4a2c:	72 fd       	sbrc	r23, 2
    4a2e:	0d c0       	rjmp	.+26     	; 0x4a4a <Check_Erors+0x3f6>
    4a30:	d8 01       	movw	r26, r16
    4a32:	99 96       	adiw	r26, 0x29	; 41
    4a34:	8c 91       	ld	r24, X
    4a36:	81 30       	cpi	r24, 0x01	; 1
    4a38:	41 f4       	brne	.+16     	; 0x4a4a <Check_Erors+0x3f6>
    4a3a:	ed 81       	ldd	r30, Y+5	; 0x05
    4a3c:	fe 81       	ldd	r31, Y+6	; 0x06
    4a3e:	e2 59       	subi	r30, 0x92	; 146
    4a40:	ff 4f       	sbci	r31, 0xFF	; 255
    4a42:	80 81       	ld	r24, Z
    4a44:	91 81       	ldd	r25, Z+1	; 0x01
    4a46:	01 97       	sbiw	r24, 0x01	; 1
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 && comp->Index==1){return 291;}//ADE7758_resetStatus();
    4a48:	a1 f1       	breq	.+104    	; 0x4ab2 <Check_Erors+0x45e>
    4a4a:	fe dd       	rcall	.-1028   	; 0x4648 <ADE7758_getStatus>
    4a4c:	73 fd       	sbrc	r23, 3
    4a4e:	0c c0       	rjmp	.+24     	; 0x4a68 <Check_Erors+0x414>
    4a50:	f8 01       	movw	r30, r16
    4a52:	81 a5       	ldd	r24, Z+41	; 0x29
    4a54:	81 30       	cpi	r24, 0x01	; 1
    4a56:	41 f4       	brne	.+16     	; 0x4a68 <Check_Erors+0x414>
    4a58:	ed 81       	ldd	r30, Y+5	; 0x05
    4a5a:	fe 81       	ldd	r31, Y+6	; 0x06
    4a5c:	e2 59       	subi	r30, 0x92	; 146
    4a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a60:	80 81       	ld	r24, Z
    4a62:	91 81       	ldd	r25, Z+1	; 0x01
    4a64:	01 97       	sbiw	r24, 0x01	; 1
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1 && comp->Index==1){return 301;}//ADE7758_resetStatus();
    4a66:	41 f1       	breq	.+80     	; 0x4ab8 <Check_Erors+0x464>
    4a68:	ef dd       	rcall	.-1058   	; 0x4648 <ADE7758_getStatus>
    4a6a:	83 fd       	sbrc	r24, 3
    4a6c:	28 c0       	rjmp	.+80     	; 0x4abe <Check_Erors+0x46a>
    4a6e:	d8 01       	movw	r26, r16
    4a70:	99 96       	adiw	r26, 0x29	; 41
    4a72:	8c 91       	ld	r24, X
    4a74:	81 30       	cpi	r24, 0x01	; 1
    4a76:	31 f5       	brne	.+76     	; 0x4ac4 <Check_Erors+0x470>
    4a78:	ed 81       	ldd	r30, Y+5	; 0x05
    4a7a:	fe 81       	ldd	r31, Y+6	; 0x06
    4a7c:	e2 59       	subi	r30, 0x92	; 146
    4a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a80:	80 81       	ld	r24, Z
    4a82:	91 81       	ldd	r25, Z+1	; 0x01
    4a84:	01 97       	sbiw	r24, 0x01	; 1
    4a86:	09 f5       	brne	.+66     	; 0x4aca <Check_Erors+0x476>
    4a88:	8d e2       	ldi	r24, 0x2D	; 45
    4a8a:	91 e0       	ldi	r25, 0x01	; 1
    4a8c:	32 c0       	rjmp	.+100    	; 0x4af2 <Check_Erors+0x49e>
		else if (comp->Src_Out<-100) {return (60+comp->Index);}
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
    4a8e:	85 e6       	ldi	r24, 0x65	; 101
    4a90:	90 e0       	ldi	r25, 0x00	; 0
    4a92:	2f c0       	rjmp	.+94     	; 0x4af2 <Check_Erors+0x49e>
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    4a94:	86 e6       	ldi	r24, 0x66	; 102
    4a96:	90 e0       	ldi	r25, 0x00	; 0
    4a98:	2c c0       	rjmp	.+88     	; 0x4af2 <Check_Erors+0x49e>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    4a9a:	8f e6       	ldi	r24, 0x6F	; 111
    4a9c:	90 e0       	ldi	r25, 0x00	; 0
    4a9e:	29 c0       	rjmp	.+82     	; 0x4af2 <Check_Erors+0x49e>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    4aa0:	80 e7       	ldi	r24, 0x70	; 112
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	26 c0       	rjmp	.+76     	; 0x4af2 <Check_Erors+0x49e>
		//else if ( comp->Bac_Temp < EElimit->Cool_Min && comp->Cooling==1){return (170+comp->Index);}
		//else if ( comp->SuperHeat < EElimit->MinSuperheat && comp->checkTrv) {return (180+comp->Index);}
		//else if ( comp->SuperHeat > EElimit->MaxSuperheat && comp->checkTrv && !comp->def) {return (190+comp->Index);}
		//else if ( comp->SuperCool < EElimit->MinSupercool && comp->checkTrv){return (200+comp->Index);}
		//else if ( comp->SuperCool > EElimit->MaxSupercool && comp->checkTrv && !comp->def){return (210+comp->Index);}
		else if ( comp->Ex_Comp > EElimit->ExhaustMax){return 220;}	
    4aa6:	8c ed       	ldi	r24, 0xDC	; 220
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	23 c0       	rjmp	.+70     	; 0x4af2 <Check_Erors+0x49e>
		//else if (abs(comp->Src_In - comp->Src_Out) > EElimit->Delta_source_max && comp->checkErrors && EEpromData.AireToWater==0) {return (230+comp->Index);}
		//else if (abs(comp->Src_In - comp->Src_Out) <  EElimit->Delta_source_min && comp->checkErrors && EEpromData.AireToWater==0) {return (240+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out)  > EElimit->Delta_heating_max && comp->checkErrors) {return (250+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out) < EElimit->Delta_heating_min &&  comp->checkErrors) {return (260+comp->Index);} 
		else if (!(ADE7758_getStatus() & ZXA) && EElimit->Power_380==1 && comp->Index==1){return 271;} // ADE7758_resetStatus();
    4aac:	8f e0       	ldi	r24, 0x0F	; 15
    4aae:	91 e0       	ldi	r25, 0x01	; 1
    4ab0:	20 c0       	rjmp	.+64     	; 0x4af2 <Check_Erors+0x49e>
		else if (!(ADE7758_getStatus() & ZXB) && EElimit->Power_380==1 && comp->Index==1){return 281;}//ADE7758_resetStatus();
    4ab2:	89 e1       	ldi	r24, 0x19	; 25
    4ab4:	91 e0       	ldi	r25, 0x01	; 1
    4ab6:	1d c0       	rjmp	.+58     	; 0x4af2 <Check_Erors+0x49e>
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 && comp->Index==1){return 291;}//ADE7758_resetStatus();
    4ab8:	83 e2       	ldi	r24, 0x23	; 35
    4aba:	91 e0       	ldi	r25, 0x01	; 1
    4abc:	1a c0       	rjmp	.+52     	; 0x4af2 <Check_Erors+0x49e>
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1 && comp->Index==1){return 301;}//ADE7758_resetStatus();
		//else if (comp->Src_In > EElimit->Source_Max){return (400+comp->Index);}
		//else if (comp->Src_In < EElimit->Source_Min){return (410+comp->Index);}			
		else {return 0;}
    4abe:	80 e0       	ldi	r24, 0x00	; 0
    4ac0:	90 e0       	ldi	r25, 0x00	; 0
    4ac2:	17 c0       	rjmp	.+46     	; 0x4af2 <Check_Erors+0x49e>
    4ac4:	80 e0       	ldi	r24, 0x00	; 0
    4ac6:	90 e0       	ldi	r25, 0x00	; 0
    4ac8:	14 c0       	rjmp	.+40     	; 0x4af2 <Check_Erors+0x49e>
    4aca:	80 e0       	ldi	r24, 0x00	; 0
    4acc:	90 e0       	ldi	r25, 0x00	; 0
    4ace:	11 c0       	rjmp	.+34     	; 0x4af2 <Check_Erors+0x49e>
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    4ad0:	4b 99       	sbic	0x09, 3	; 9
    4ad2:	d7 ce       	rjmp	.-594    	; 0x4882 <Check_Erors+0x22e>
    4ad4:	08 c0       	rjmp	.+16     	; 0x4ae6 <Check_Erors+0x492>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    4ad6:	65 99       	sbic	0x0c, 5	; 12
    4ad8:	e7 ce       	rjmp	.-562    	; 0x48a8 <Check_Erors+0x254>
    4ada:	f0 ce       	rjmp	.-544    	; 0x48bc <Check_Erors+0x268>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    4adc:	8c b1       	in	r24, 0x0c	; 12
    4ade:	fe ce       	rjmp	.-516    	; 0x48dc <Check_Erors+0x288>
    4ae0:	65 99       	sbic	0x0c, 5	; 12
    4ae2:	f3 ce       	rjmp	.-538    	; 0x48ca <Check_Erors+0x276>
    4ae4:	fb ce       	rjmp	.-522    	; 0x48dc <Check_Erors+0x288>
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    4ae6:	65 99       	sbic	0x0c, 5	; 12
    4ae8:	df ce       	rjmp	.-578    	; 0x48a8 <Check_Erors+0x254>
    4aea:	e8 ce       	rjmp	.-560    	; 0x48bc <Check_Erors+0x268>
    4aec:	65 99       	sbic	0x0c, 5	; 12
    4aee:	f6 cf       	rjmp	.-20     	; 0x4adc <Check_Erors+0x488>
    4af0:	e5 ce       	rjmp	.-566    	; 0x48bc <Check_Erors+0x268>
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 && comp->Index==1){return 291;}//ADE7758_resetStatus();
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1 && comp->Index==1){return 301;}//ADE7758_resetStatus();
		//else if (comp->Src_In > EElimit->Source_Max){return (400+comp->Index);}
		//else if (comp->Src_In < EElimit->Source_Min){return (410+comp->Index);}			
		else {return 0;}
    4af2:	26 96       	adiw	r28, 0x06	; 6
    4af4:	0f b6       	in	r0, 0x3f	; 63
    4af6:	f8 94       	cli
    4af8:	de bf       	out	0x3e, r29	; 62
    4afa:	0f be       	out	0x3f, r0	; 63
    4afc:	cd bf       	out	0x3d, r28	; 61
    4afe:	df 91       	pop	r29
    4b00:	cf 91       	pop	r28
    4b02:	1f 91       	pop	r17
    4b04:	0f 91       	pop	r16
    4b06:	ff 90       	pop	r15
    4b08:	ef 90       	pop	r14
    4b0a:	df 90       	pop	r13
    4b0c:	cf 90       	pop	r12
    4b0e:	bf 90       	pop	r11
    4b10:	af 90       	pop	r10
    4b12:	9f 90       	pop	r9
    4b14:	8f 90       	pop	r8
    4b16:	7f 90       	pop	r7
    4b18:	6f 90       	pop	r6
    4b1a:	5f 90       	pop	r5
    4b1c:	4f 90       	pop	r4
    4b1e:	08 95       	ret

00004b20 <start_1_Timer>:
	
	
}
void start_1_Timer()
{
	TIMSK1 |= (1<<OCIE1A);
    4b20:	ef e6       	ldi	r30, 0x6F	; 111
    4b22:	f0 e0       	ldi	r31, 0x00	; 0
    4b24:	80 81       	ld	r24, Z
    4b26:	82 60       	ori	r24, 0x02	; 2
    4b28:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11);//1<<CS10 |
    4b2a:	e1 e8       	ldi	r30, 0x81	; 129
    4b2c:	f0 e0       	ldi	r31, 0x00	; 0
    4b2e:	80 81       	ld	r24, Z
    4b30:	82 60       	ori	r24, 0x02	; 2
    4b32:	80 83       	st	Z, r24
    4b34:	08 95       	ret

00004b36 <stop_1_Timer>:
	
}
void stop_1_Timer()
{
	TCCR1B &= ~ (1<<CS10);
    4b36:	e1 e8       	ldi	r30, 0x81	; 129
    4b38:	f0 e0       	ldi	r31, 0x00	; 0
    4b3a:	80 81       	ld	r24, Z
    4b3c:	8e 7f       	andi	r24, 0xFE	; 254
    4b3e:	80 83       	st	Z, r24
	TCNT1=0;
    4b40:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    4b44:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TIMSK1 &= ~( _BV( OCIE1A ) );
    4b48:	ef e6       	ldi	r30, 0x6F	; 111
    4b4a:	f0 e0       	ldi	r31, 0x00	; 0
    4b4c:	80 81       	ld	r24, Z
    4b4e:	8d 7f       	andi	r24, 0xFD	; 253
    4b50:	80 83       	st	Z, r24
	TIFR1 |= _BV( OCF1A );
    4b52:	b1 9a       	sbi	0x16, 1	; 22
    4b54:	08 95       	ret

00004b56 <timer_1_Init>:
void timer_1_Init()
{
	// --- TIMER1_COMPA irq ---
	// selected time = 1562 us (24992 ticks)
	// prescaler = 1 (1 ticks ... 4.096 ms)
	TCCR1B = (1<<WGM12);//|(1<<CS10)
    4b56:	88 e0       	ldi	r24, 0x08	; 8
    4b58:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	OCR1AH = 158 ;//158
    4b5c:	8e e9       	ldi	r24, 0x9E	; 158
    4b5e:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL =96;//96
    4b62:	80 e6       	ldi	r24, 0x60	; 96
    4b64:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	stop_1_Timer();
    4b68:	e6 cf       	rjmp	.-52     	; 0x4b36 <stop_1_Timer>
    4b6a:	08 95       	ret

00004b6c <readSysReg>:
	TIMSK1 &= ~( _BV( OCIE1A ) );
	TIFR1 |= _BV( OCF1A );
}

int readSysReg(xCompressor*compPtr,xEEdata *eeprom,uint16_t adress)
{
    4b6c:	cf 93       	push	r28
    4b6e:	df 93       	push	r29
	int temp;
	switch(adress)
    4b70:	fa 01       	movw	r30, r20
    4b72:	3a 97       	sbiw	r30, 0x0a	; 10
    4b74:	e7 3d       	cpi	r30, 0xD7	; 215
    4b76:	41 e0       	ldi	r20, 0x01	; 1
    4b78:	f4 07       	cpc	r31, r20
    4b7a:	08 f0       	brcs	.+2      	; 0x4b7e <readSysReg+0x12>
    4b7c:	11 c2       	rjmp	.+1058   	; 0x4fa0 <readSysReg+0x434>
    4b7e:	eb 01       	movw	r28, r22
    4b80:	dc 01       	movw	r26, r24
    4b82:	88 27       	eor	r24, r24
    4b84:	e4 56       	subi	r30, 0x64	; 100
    4b86:	ff 4f       	sbci	r31, 0xFF	; 255
    4b88:	8f 4f       	sbci	r24, 0xFF	; 255
    4b8a:	0c 94 72 5a 	jmp	0xb4e4	; 0xb4e4 <__tablejump2__>
	{
		case 11: case 12: temp =  (int)   compPtr->compOn;break;
    4b8e:	1b 96       	adiw	r26, 0x0b	; 11
    4b90:	6c 91       	ld	r22, X
    4b92:	26 2f       	mov	r18, r22
    4b94:	30 e0       	ldi	r19, 0x00	; 0
    4b96:	04 c2       	rjmp	.+1032   	; 0x4fa0 <readSysReg+0x434>
		case 21: case 22: temp =   (int)  compPtr->srcPOn;break;
    4b98:	1f 96       	adiw	r26, 0x0f	; 15
    4b9a:	6c 91       	ld	r22, X
    4b9c:	26 2f       	mov	r18, r22
    4b9e:	30 e0       	ldi	r19, 0x00	; 0
    4ba0:	ff c1       	rjmp	.+1022   	; 0x4fa0 <readSysReg+0x434>
		case 31: case 32: temp =   (int)  compPtr->heatPOn;break;
    4ba2:	1c 96       	adiw	r26, 0x0c	; 12
    4ba4:	6c 91       	ld	r22, X
    4ba6:	26 2f       	mov	r18, r22
    4ba8:	30 e0       	ldi	r19, 0x00	; 0
    4baa:	fa c1       	rjmp	.+1012   	; 0x4fa0 <readSysReg+0x434>
		case 41: case 42: temp =   (int)  compPtr->revVOn;break;
    4bac:	1e 96       	adiw	r26, 0x0e	; 14
    4bae:	6c 91       	ld	r22, X
    4bb0:	26 2f       	mov	r18, r22
    4bb2:	30 e0       	ldi	r19, 0x00	; 0
    4bb4:	f5 c1       	rjmp	.+1002   	; 0x4fa0 <readSysReg+0x434>
		case 51: case 52: temp =   (int)  compPtr->threeWOn;break;
    4bb6:	1d 96       	adiw	r26, 0x0d	; 13
    4bb8:	6c 91       	ld	r22, X
    4bba:	26 2f       	mov	r18, r22
    4bbc:	30 e0       	ldi	r19, 0x00	; 0
    4bbe:	f0 c1       	rjmp	.+992    	; 0x4fa0 <readSysReg+0x434>
		case 61: case 62: temp =   (int)  compPtr->Trv_position;break;
    4bc0:	a6 59       	subi	r26, 0x96	; 150
    4bc2:	bf 4f       	sbci	r27, 0xFF	; 255
    4bc4:	2d 91       	ld	r18, X+
    4bc6:	3c 91       	ld	r19, X
    4bc8:	eb c1       	rjmp	.+982    	; 0x4fa0 <readSysReg+0x434>
		
		case 71: case 72: temp =   (int)   (compPtr->Bac_Temp*10);break;
    4bca:	20 e0       	ldi	r18, 0x00	; 0
    4bcc:	30 e0       	ldi	r19, 0x00	; 0
    4bce:	40 e2       	ldi	r20, 0x20	; 32
    4bd0:	51 e4       	ldi	r21, 0x41	; 65
    4bd2:	56 96       	adiw	r26, 0x16	; 22
    4bd4:	6d 91       	ld	r22, X+
    4bd6:	7d 91       	ld	r23, X+
    4bd8:	8d 91       	ld	r24, X+
    4bda:	9c 91       	ld	r25, X
    4bdc:	59 97       	sbiw	r26, 0x19	; 25
    4bde:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    4be2:	0e 94 05 55 	call	0xaa0a	; 0xaa0a <__fixsfsi>
    4be6:	9b 01       	movw	r18, r22
    4be8:	db c1       	rjmp	.+950    	; 0x4fa0 <readSysReg+0x434>
		case 81: case 82:  temp =   (int)  (compPtr->Dhw_Temp*10);break;
    4bea:	20 e0       	ldi	r18, 0x00	; 0
    4bec:	30 e0       	ldi	r19, 0x00	; 0
    4bee:	40 e2       	ldi	r20, 0x20	; 32
    4bf0:	51 e4       	ldi	r21, 0x41	; 65
    4bf2:	52 96       	adiw	r26, 0x12	; 18
    4bf4:	6d 91       	ld	r22, X+
    4bf6:	7d 91       	ld	r23, X+
    4bf8:	8d 91       	ld	r24, X+
    4bfa:	9c 91       	ld	r25, X
    4bfc:	55 97       	sbiw	r26, 0x15	; 21
    4bfe:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    4c02:	0e 94 05 55 	call	0xaa0a	; 0xaa0a <__fixsfsi>
    4c06:	9b 01       	movw	r18, r22
    4c08:	cb c1       	rjmp	.+918    	; 0x4fa0 <readSysReg+0x434>
		case 91:case 92:  temp =  (int)  (compPtr->Src_In*10);break;
    4c0a:	20 e0       	ldi	r18, 0x00	; 0
    4c0c:	30 e0       	ldi	r19, 0x00	; 0
    4c0e:	40 e2       	ldi	r20, 0x20	; 32
    4c10:	51 e4       	ldi	r21, 0x41	; 65
    4c12:	d2 96       	adiw	r26, 0x32	; 50
    4c14:	6d 91       	ld	r22, X+
    4c16:	7d 91       	ld	r23, X+
    4c18:	8d 91       	ld	r24, X+
    4c1a:	9c 91       	ld	r25, X
    4c1c:	d5 97       	sbiw	r26, 0x35	; 53
    4c1e:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    4c22:	0e 94 05 55 	call	0xaa0a	; 0xaa0a <__fixsfsi>
    4c26:	9b 01       	movw	r18, r22
    4c28:	bb c1       	rjmp	.+886    	; 0x4fa0 <readSysReg+0x434>
		case 101:case 102:  temp =  (int)  (compPtr->Src_Out*10);break;
    4c2a:	20 e0       	ldi	r18, 0x00	; 0
    4c2c:	30 e0       	ldi	r19, 0x00	; 0
    4c2e:	40 e2       	ldi	r20, 0x20	; 32
    4c30:	51 e4       	ldi	r21, 0x41	; 65
    4c32:	d6 96       	adiw	r26, 0x36	; 54
    4c34:	6d 91       	ld	r22, X+
    4c36:	7d 91       	ld	r23, X+
    4c38:	8d 91       	ld	r24, X+
    4c3a:	9c 91       	ld	r25, X
    4c3c:	d9 97       	sbiw	r26, 0x39	; 57
    4c3e:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    4c42:	0e 94 05 55 	call	0xaa0a	; 0xaa0a <__fixsfsi>
    4c46:	9b 01       	movw	r18, r22
    4c48:	ab c1       	rjmp	.+854    	; 0x4fa0 <readSysReg+0x434>
		case 111:case 112: temp =   (int)  (compPtr->error);break;
    4c4a:	a4 59       	subi	r26, 0x94	; 148
    4c4c:	bf 4f       	sbci	r27, 0xFF	; 255
    4c4e:	2d 91       	ld	r18, X+
    4c50:	3c 91       	ld	r19, X
    4c52:	a6 c1       	rjmp	.+844    	; 0x4fa0 <readSysReg+0x434>
		case 121: case 122: temp =   (int)   (compPtr->Cond_Temp*10);break;
    4c54:	ae 5b       	subi	r26, 0xBE	; 190
    4c56:	bf 4f       	sbci	r27, 0xFF	; 255
    4c58:	20 e0       	ldi	r18, 0x00	; 0
    4c5a:	30 e0       	ldi	r19, 0x00	; 0
    4c5c:	40 e2       	ldi	r20, 0x20	; 32
    4c5e:	51 e4       	ldi	r21, 0x41	; 65
    4c60:	6d 91       	ld	r22, X+
    4c62:	7d 91       	ld	r23, X+
    4c64:	8d 91       	ld	r24, X+
    4c66:	9c 91       	ld	r25, X
    4c68:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    4c6c:	0e 94 05 55 	call	0xaa0a	; 0xaa0a <__fixsfsi>
    4c70:	9b 01       	movw	r18, r22
    4c72:	96 c1       	rjmp	.+812    	; 0x4fa0 <readSysReg+0x434>
		case 131:case 132: temp =   (int)  (compPtr->Suc_Comp*10);break;
    4c74:	de 96       	adiw	r26, 0x3e	; 62
    4c76:	20 e0       	ldi	r18, 0x00	; 0
    4c78:	30 e0       	ldi	r19, 0x00	; 0
    4c7a:	40 e2       	ldi	r20, 0x20	; 32
    4c7c:	51 e4       	ldi	r21, 0x41	; 65
    4c7e:	6d 91       	ld	r22, X+
    4c80:	7d 91       	ld	r23, X+
    4c82:	8d 91       	ld	r24, X+
    4c84:	9c 91       	ld	r25, X
    4c86:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    4c8a:	0e 94 05 55 	call	0xaa0a	; 0xaa0a <__fixsfsi>
    4c8e:	9b 01       	movw	r18, r22
    4c90:	87 c1       	rjmp	.+782    	; 0x4fa0 <readSysReg+0x434>
		case 141:case 142: temp =   (int)  (compPtr->SuperCool*10);break;
    4c92:	a6 5b       	subi	r26, 0xB6	; 182
    4c94:	bf 4f       	sbci	r27, 0xFF	; 255
    4c96:	20 e0       	ldi	r18, 0x00	; 0
    4c98:	30 e0       	ldi	r19, 0x00	; 0
    4c9a:	40 e2       	ldi	r20, 0x20	; 32
    4c9c:	51 e4       	ldi	r21, 0x41	; 65
    4c9e:	6d 91       	ld	r22, X+
    4ca0:	7d 91       	ld	r23, X+
    4ca2:	8d 91       	ld	r24, X+
    4ca4:	9c 91       	ld	r25, X
    4ca6:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    4caa:	0e 94 05 55 	call	0xaa0a	; 0xaa0a <__fixsfsi>
    4cae:	9b 01       	movw	r18, r22
    4cb0:	77 c1       	rjmp	.+750    	; 0x4fa0 <readSysReg+0x434>
		case 151:case 152: temp =   (int)  (compPtr->SuperHeat*10);break;
    4cb2:	aa 5b       	subi	r26, 0xBA	; 186
    4cb4:	bf 4f       	sbci	r27, 0xFF	; 255
    4cb6:	20 e0       	ldi	r18, 0x00	; 0
    4cb8:	30 e0       	ldi	r19, 0x00	; 0
    4cba:	40 e2       	ldi	r20, 0x20	; 32
    4cbc:	51 e4       	ldi	r21, 0x41	; 65
    4cbe:	6d 91       	ld	r22, X+
    4cc0:	7d 91       	ld	r23, X+
    4cc2:	8d 91       	ld	r24, X+
    4cc4:	9c 91       	ld	r25, X
    4cc6:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    4cca:	0e 94 05 55 	call	0xaa0a	; 0xaa0a <__fixsfsi>
    4cce:	9b 01       	movw	r18, r22
    4cd0:	67 c1       	rjmp	.+718    	; 0x4fa0 <readSysReg+0x434>
		case 161:case 162:  temp =  (int)  (compPtr->Heat_In*10);break;
    4cd2:	20 e0       	ldi	r18, 0x00	; 0
    4cd4:	30 e0       	ldi	r19, 0x00	; 0
    4cd6:	40 e2       	ldi	r20, 0x20	; 32
    4cd8:	51 e4       	ldi	r21, 0x41	; 65
    4cda:	9e 96       	adiw	r26, 0x2e	; 46
    4cdc:	6d 91       	ld	r22, X+
    4cde:	7d 91       	ld	r23, X+
    4ce0:	8d 91       	ld	r24, X+
    4ce2:	9c 91       	ld	r25, X
    4ce4:	d1 97       	sbiw	r26, 0x31	; 49
    4ce6:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    4cea:	0e 94 05 55 	call	0xaa0a	; 0xaa0a <__fixsfsi>
    4cee:	9b 01       	movw	r18, r22
    4cf0:	57 c1       	rjmp	.+686    	; 0x4fa0 <readSysReg+0x434>
		case 171:case 172:  temp =  (int)  (compPtr->Heat_Out*10);break;		
    4cf2:	20 e0       	ldi	r18, 0x00	; 0
    4cf4:	30 e0       	ldi	r19, 0x00	; 0
    4cf6:	40 e2       	ldi	r20, 0x20	; 32
    4cf8:	51 e4       	ldi	r21, 0x41	; 65
    4cfa:	9a 96       	adiw	r26, 0x2a	; 42
    4cfc:	6d 91       	ld	r22, X+
    4cfe:	7d 91       	ld	r23, X+
    4d00:	8d 91       	ld	r24, X+
    4d02:	9c 91       	ld	r25, X
    4d04:	9d 97       	sbiw	r26, 0x2d	; 45
    4d06:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    4d0a:	0e 94 05 55 	call	0xaa0a	; 0xaa0a <__fixsfsi>
    4d0e:	9b 01       	movw	r18, r22
    4d10:	47 c1       	rjmp	.+654    	; 0x4fa0 <readSysReg+0x434>
		case 181:case 182: temp =   (int)  (compPtr->High_Press*10);break;
    4d12:	20 e0       	ldi	r18, 0x00	; 0
    4d14:	30 e0       	ldi	r19, 0x00	; 0
    4d16:	40 e2       	ldi	r20, 0x20	; 32
    4d18:	51 e4       	ldi	r21, 0x41	; 65
    4d1a:	5a 96       	adiw	r26, 0x1a	; 26
    4d1c:	6d 91       	ld	r22, X+
    4d1e:	7d 91       	ld	r23, X+
    4d20:	8d 91       	ld	r24, X+
    4d22:	9c 91       	ld	r25, X
    4d24:	5d 97       	sbiw	r26, 0x1d	; 29
    4d26:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    4d2a:	0e 94 05 55 	call	0xaa0a	; 0xaa0a <__fixsfsi>
    4d2e:	9b 01       	movw	r18, r22
    4d30:	37 c1       	rjmp	.+622    	; 0x4fa0 <readSysReg+0x434>
		case 191:case 192: temp =   (int)  (compPtr->Low_Press*10);break;
    4d32:	20 e0       	ldi	r18, 0x00	; 0
    4d34:	30 e0       	ldi	r19, 0x00	; 0
    4d36:	40 e2       	ldi	r20, 0x20	; 32
    4d38:	51 e4       	ldi	r21, 0x41	; 65
    4d3a:	5e 96       	adiw	r26, 0x1e	; 30
    4d3c:	6d 91       	ld	r22, X+
    4d3e:	7d 91       	ld	r23, X+
    4d40:	8d 91       	ld	r24, X+
    4d42:	9c 91       	ld	r25, X
    4d44:	91 97       	sbiw	r26, 0x21	; 33
    4d46:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    4d4a:	0e 94 05 55 	call	0xaa0a	; 0xaa0a <__fixsfsi>
    4d4e:	9b 01       	movw	r18, r22
    4d50:	27 c1       	rjmp	.+590    	; 0x4fa0 <readSysReg+0x434>
		case 201:case 202: temp =   (int)  (compPtr->Ex_Comp);break;
    4d52:	da 96       	adiw	r26, 0x3a	; 58
    4d54:	6d 91       	ld	r22, X+
    4d56:	7d 91       	ld	r23, X+
    4d58:	8d 91       	ld	r24, X+
    4d5a:	9c 91       	ld	r25, X
    4d5c:	dd 97       	sbiw	r26, 0x3d	; 61
    4d5e:	0e 94 05 55 	call	0xaa0a	; 0xaa0a <__fixsfsi>
    4d62:	9b 01       	movw	r18, r22
    4d64:	1d c1       	rjmp	.+570    	; 0x4fa0 <readSysReg+0x434>
		
	
		
		//-----------------------------------eeprom--------
		case 10:  temp =    eeprom->Compressor_delay;break;
    4d66:	68 81       	ld	r22, Y
    4d68:	26 2f       	mov	r18, r22
    4d6a:	30 e0       	ldi	r19, 0x00	; 0
    4d6c:	19 c1       	rjmp	.+562    	; 0x4fa0 <readSysReg+0x434>
		case 20:  temp =    eeprom->HeatingPump_delay;break;
    4d6e:	6b 81       	ldd	r22, Y+3	; 0x03
    4d70:	26 2f       	mov	r18, r22
    4d72:	30 e0       	ldi	r19, 0x00	; 0
    4d74:	15 c1       	rjmp	.+554    	; 0x4fa0 <readSysReg+0x434>
		case 30:  temp =    eeprom->Source_Pump_delay;break;
    4d76:	69 81       	ldd	r22, Y+1	; 0x01
    4d78:	26 2f       	mov	r18, r22
    4d7a:	30 e0       	ldi	r19, 0x00	; 0
    4d7c:	11 c1       	rjmp	.+546    	; 0x4fa0 <readSysReg+0x434>
		case 40:  temp =    eeprom->Revers_Valve_delay;break;
    4d7e:	6a 81       	ldd	r22, Y+2	; 0x02
    4d80:	26 2f       	mov	r18, r22
    4d82:	30 e0       	ldi	r19, 0x00	; 0
    4d84:	0d c1       	rjmp	.+538    	; 0x4fa0 <readSysReg+0x434>
		case 50:  temp =    eeprom->Three_Way_delay;break;
    4d86:	6c 81       	ldd	r22, Y+4	; 0x04
    4d88:	26 2f       	mov	r18, r22
    4d8a:	30 e0       	ldi	r19, 0x00	; 0
    4d8c:	09 c1       	rjmp	.+530    	; 0x4fa0 <readSysReg+0x434>
		case 60:  temp =    (int)  eeprom->Cool_Max;break;
    4d8e:	6c 85       	ldd	r22, Y+12	; 0x0c
    4d90:	26 2f       	mov	r18, r22
    4d92:	30 e0       	ldi	r19, 0x00	; 0
    4d94:	05 c1       	rjmp	.+522    	; 0x4fa0 <readSysReg+0x434>
		case 70:  temp =    (int)  eeprom->Cool_Min;break;
    4d96:	6d 85       	ldd	r22, Y+13	; 0x0d
    4d98:	26 2f       	mov	r18, r22
    4d9a:	30 e0       	ldi	r19, 0x00	; 0
    4d9c:	01 c1       	rjmp	.+514    	; 0x4fa0 <readSysReg+0x434>
		case 80:  temp =    (int)  eeprom->HEAT_Max;break;
    4d9e:	69 85       	ldd	r22, Y+9	; 0x09
    4da0:	26 2f       	mov	r18, r22
    4da2:	30 e0       	ldi	r19, 0x00	; 0
    4da4:	fd c0       	rjmp	.+506    	; 0x4fa0 <readSysReg+0x434>
		case 90:  temp =    (int)  eeprom->HEAT_Min;break;
    4da6:	6a 85       	ldd	r22, Y+10	; 0x0a
    4da8:	26 2f       	mov	r18, r22
    4daa:	30 e0       	ldi	r19, 0x00	; 0
    4dac:	f9 c0       	rjmp	.+498    	; 0x4fa0 <readSysReg+0x434>
		case 100: temp =    (int)  eeprom->Delta_heating_max;break;
    4dae:	6c 89       	ldd	r22, Y+20	; 0x14
    4db0:	26 2f       	mov	r18, r22
    4db2:	30 e0       	ldi	r19, 0x00	; 0
    4db4:	f5 c0       	rjmp	.+490    	; 0x4fa0 <readSysReg+0x434>
		case 110: temp =    (int)  eeprom->Delta_heating_min;break;
    4db6:	6b 89       	ldd	r22, Y+19	; 0x13
    4db8:	26 2f       	mov	r18, r22
    4dba:	30 e0       	ldi	r19, 0x00	; 0
    4dbc:	f1 c0       	rjmp	.+482    	; 0x4fa0 <readSysReg+0x434>
		case 120: temp =    (int)  eeprom->Delta_source_max;break;
    4dbe:	6e 89       	ldd	r22, Y+22	; 0x16
    4dc0:	26 2f       	mov	r18, r22
    4dc2:	30 e0       	ldi	r19, 0x00	; 0
    4dc4:	ed c0       	rjmp	.+474    	; 0x4fa0 <readSysReg+0x434>
		case 130: temp =    (int)  eeprom->Delta_source_min;break;
    4dc6:	6d 89       	ldd	r22, Y+21	; 0x15
    4dc8:	26 2f       	mov	r18, r22
    4dca:	30 e0       	ldi	r19, 0x00	; 0
    4dcc:	e9 c0       	rjmp	.+466    	; 0x4fa0 <readSysReg+0x434>
		case 140: temp =    (int)  eeprom->diffCOOL;break;
    4dce:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4dd0:	26 2f       	mov	r18, r22
    4dd2:	30 e0       	ldi	r19, 0x00	; 0
    4dd4:	e5 c0       	rjmp	.+458    	; 0x4fa0 <readSysReg+0x434>
		case 150: temp =    (int)  eeprom->diffDHW ;break;
    4dd6:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4dd8:	26 2f       	mov	r18, r22
    4dda:	30 e0       	ldi	r19, 0x00	; 0
    4ddc:	e1 c0       	rjmp	.+450    	; 0x4fa0 <readSysReg+0x434>
		case 160: temp =    (int)  eeprom->diffHEAT;break;
    4dde:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4de0:	26 2f       	mov	r18, r22
    4de2:	30 e0       	ldi	r19, 0x00	; 0
    4de4:	dd c0       	rjmp	.+442    	; 0x4fa0 <readSysReg+0x434>
		case 170: temp =    (int)  eeprom->AireToWater;break;
    4de6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4de8:	26 2f       	mov	r18, r22
    4dea:	30 e0       	ldi	r19, 0x00	; 0
    4dec:	d9 c0       	rjmp	.+434    	; 0x4fa0 <readSysReg+0x434>
		case 180: temp =    (int)  eeprom->ExhaustMax;break;
    4dee:	6e 85       	ldd	r22, Y+14	; 0x0e
    4df0:	26 2f       	mov	r18, r22
    4df2:	30 e0       	ldi	r19, 0x00	; 0
    4df4:	d5 c0       	rjmp	.+426    	; 0x4fa0 <readSysReg+0x434>
		case 190: temp =    (int)  eeprom->cool;break;
    4df6:	6f a1       	ldd	r22, Y+39	; 0x27
    4df8:	26 2f       	mov	r18, r22
    4dfa:	30 e0       	ldi	r19, 0x00	; 0
    4dfc:	d1 c0       	rjmp	.+418    	; 0x4fa0 <readSysReg+0x434>
		case 200: temp =    (int)  eeprom->heat;break;
    4dfe:	6e a1       	ldd	r22, Y+38	; 0x26
    4e00:	26 2f       	mov	r18, r22
    4e02:	30 e0       	ldi	r19, 0x00	; 0
    4e04:	cd c0       	rjmp	.+410    	; 0x4fa0 <readSysReg+0x434>
		case 210: temp =    (int)  eeprom->heatWater;break;
    4e06:	6d a1       	ldd	r22, Y+37	; 0x25
    4e08:	26 2f       	mov	r18, r22
    4e0a:	30 e0       	ldi	r19, 0x00	; 0
    4e0c:	c9 c0       	rjmp	.+402    	; 0x4fa0 <readSysReg+0x434>
		case 220: temp =    (int)  eeprom->HP_Max;break;
    4e0e:	6e 81       	ldd	r22, Y+6	; 0x06
    4e10:	26 2f       	mov	r18, r22
    4e12:	30 e0       	ldi	r19, 0x00	; 0
    4e14:	c5 c0       	rjmp	.+394    	; 0x4fa0 <readSysReg+0x434>
		case 230: temp =    (int)  eeprom->LP_Max;break;
    4e16:	68 85       	ldd	r22, Y+8	; 0x08
    4e18:	26 2f       	mov	r18, r22
    4e1a:	30 e0       	ldi	r19, 0x00	; 0
    4e1c:	c1 c0       	rjmp	.+386    	; 0x4fa0 <readSysReg+0x434>
		case 240: temp =    (int)  eeprom->HP_Min;break;
    4e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    4e20:	26 2f       	mov	r18, r22
    4e22:	30 e0       	ldi	r19, 0x00	; 0
    4e24:	bd c0       	rjmp	.+378    	; 0x4fa0 <readSysReg+0x434>
		case 250: temp =    (int)  eeprom->LP_Min;break;
    4e26:	fb 01       	movw	r30, r22
    4e28:	e4 5a       	subi	r30, 0xA4	; 164
    4e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e2c:	60 81       	ld	r22, Z
    4e2e:	71 81       	ldd	r23, Z+1	; 0x01
    4e30:	82 81       	ldd	r24, Z+2	; 0x02
    4e32:	93 81       	ldd	r25, Z+3	; 0x03
    4e34:	0e 94 05 55 	call	0xaa0a	; 0xaa0a <__fixsfsi>
    4e38:	9b 01       	movw	r18, r22
    4e3a:	b2 c0       	rjmp	.+356    	; 0x4fa0 <readSysReg+0x434>
		case 260: temp =    (int)  eeprom->MaxSupercool;break;
    4e3c:	6a 89       	ldd	r22, Y+18	; 0x12
    4e3e:	26 2f       	mov	r18, r22
    4e40:	30 e0       	ldi	r19, 0x00	; 0
    4e42:	ae c0       	rjmp	.+348    	; 0x4fa0 <readSysReg+0x434>
		case 270: temp =    (int)  eeprom->MinSupercool;break;
    4e44:	69 89       	ldd	r22, Y+17	; 0x11
    4e46:	26 2f       	mov	r18, r22
    4e48:	30 e0       	ldi	r19, 0x00	; 0
    4e4a:	aa c0       	rjmp	.+340    	; 0x4fa0 <readSysReg+0x434>
		case 280: temp =    (int)  eeprom->MaxSuperheat;break;
    4e4c:	68 89       	ldd	r22, Y+16	; 0x10
    4e4e:	26 2f       	mov	r18, r22
    4e50:	30 e0       	ldi	r19, 0x00	; 0
    4e52:	a6 c0       	rjmp	.+332    	; 0x4fa0 <readSysReg+0x434>
		case 290: temp =    (int)  eeprom->MinSuperheat;break;
    4e54:	6f 85       	ldd	r22, Y+15	; 0x0f
    4e56:	26 2f       	mov	r18, r22
    4e58:	30 e0       	ldi	r19, 0x00	; 0
    4e5a:	a2 c0       	rjmp	.+324    	; 0x4fa0 <readSysReg+0x434>
		case 300: temp =    (int)  eeprom->number_turnon_threeway;break;
    4e5c:	fb 01       	movw	r30, r22
    4e5e:	ea 5b       	subi	r30, 0xBA	; 186
    4e60:	ff 4f       	sbci	r31, 0xFF	; 255
    4e62:	20 81       	ld	r18, Z
    4e64:	31 81       	ldd	r19, Z+1	; 0x01
    4e66:	9c c0       	rjmp	.+312    	; 0x4fa0 <readSysReg+0x434>
		case 310: temp =    (int)  eeprom->power;break;
    4e68:	6c a1       	ldd	r22, Y+36	; 0x24
    4e6a:	26 2f       	mov	r18, r22
    4e6c:	30 e0       	ldi	r19, 0x00	; 0
    4e6e:	98 c0       	rjmp	.+304    	; 0x4fa0 <readSysReg+0x434>
		case 320: temp =    (int)  eeprom->Set_Cooling;break;
    4e70:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4e72:	26 2f       	mov	r18, r22
    4e74:	30 e0       	ldi	r19, 0x00	; 0
    4e76:	94 c0       	rjmp	.+296    	; 0x4fa0 <readSysReg+0x434>
		case 330: temp =    (int)  eeprom->Set_DHW;break;
    4e78:	6b 8d       	ldd	r22, Y+27	; 0x1b
    4e7a:	26 2f       	mov	r18, r22
    4e7c:	30 e0       	ldi	r19, 0x00	; 0
    4e7e:	90 c0       	rjmp	.+288    	; 0x4fa0 <readSysReg+0x434>
		case 340: temp =    (int)  eeprom->Set_Heating;break;
    4e80:	69 8d       	ldd	r22, Y+25	; 0x19
    4e82:	26 2f       	mov	r18, r22
    4e84:	30 e0       	ldi	r19, 0x00	; 0
    4e86:	8c c0       	rjmp	.+280    	; 0x4fa0 <readSysReg+0x434>
		case 350: temp =    (int)  eeprom->TempDef;break;
    4e88:	2a a5       	ldd	r18, Y+42	; 0x2a
    4e8a:	3b a5       	ldd	r19, Y+43	; 0x2b
    4e8c:	89 c0       	rjmp	.+274    	; 0x4fa0 <readSysReg+0x434>
		case 360: temp =    (int)  eeprom->TimeDef;break;
    4e8e:	69 a1       	ldd	r22, Y+33	; 0x21
    4e90:	26 2f       	mov	r18, r22
    4e92:	30 e0       	ldi	r19, 0x00	; 0
    4e94:	85 c0       	rjmp	.+266    	; 0x4fa0 <readSysReg+0x434>
		
		
		case 370: temp =    (int)  eeprom->TempOut;break;
    4e96:	2e a5       	ldd	r18, Y+46	; 0x2e
    4e98:	3f a5       	ldd	r19, Y+47	; 0x2f
    4e9a:	82 c0       	rjmp	.+260    	; 0x4fa0 <readSysReg+0x434>
		case 380: temp =    (int)  eeprom->TempStopDef;break;
    4e9c:	2c a5       	ldd	r18, Y+44	; 0x2c
    4e9e:	3d a5       	ldd	r19, Y+45	; 0x2d
    4ea0:	7f c0       	rjmp	.+254    	; 0x4fa0 <readSysReg+0x434>
		case 390: temp =    (int)  eeprom->time_threeway;break;
    4ea2:	2c ad       	ldd	r18, Y+60	; 0x3c
    4ea4:	3d ad       	ldd	r19, Y+61	; 0x3d
    4ea6:	7c c0       	rjmp	.+248    	; 0x4fa0 <readSysReg+0x434>
		case 400: temp =    (int)  eeprom->NombComp;break;
    4ea8:	68 a1       	ldd	r22, Y+32	; 0x20
    4eaa:	26 2f       	mov	r18, r22
    4eac:	30 e0       	ldi	r19, 0x00	; 0
    4eae:	78 c0       	rjmp	.+240    	; 0x4fa0 <readSysReg+0x434>
		case 410: temp =    (int)  eeprom->reversMod;break;
    4eb0:	68 a5       	ldd	r22, Y+40	; 0x28
    4eb2:	26 2f       	mov	r18, r22
    4eb4:	30 e0       	ldi	r19, 0x00	; 0
    4eb6:	74 c0       	rjmp	.+232    	; 0x4fa0 <readSysReg+0x434>
		case 420: temp =    (int)  eeprom->TRV_Delay;break;
    4eb8:	6d 81       	ldd	r22, Y+5	; 0x05
    4eba:	26 2f       	mov	r18, r22
    4ebc:	30 e0       	ldi	r19, 0x00	; 0
    4ebe:	70 c0       	rjmp	.+224    	; 0x4fa0 <readSysReg+0x434>
		case 430: temp =    (int)  eeprom->Source_Max;break;
    4ec0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ec2:	26 2f       	mov	r18, r22
    4ec4:	30 e0       	ldi	r19, 0x00	; 0
    4ec6:	6c c0       	rjmp	.+216    	; 0x4fa0 <readSysReg+0x434>
		case 440: temp =    (int)  eeprom->Source_Min;break;
    4ec8:	28 a9       	ldd	r18, Y+48	; 0x30
    4eca:	39 a9       	ldd	r19, Y+49	; 0x31
    4ecc:	69 c0       	rjmp	.+210    	; 0x4fa0 <readSysReg+0x434>
		case 450: temp =    (int)  eeprom->Delta_dhw_max;break;
    4ece:	68 8d       	ldd	r22, Y+24	; 0x18
    4ed0:	26 2f       	mov	r18, r22
    4ed2:	30 e0       	ldi	r19, 0x00	; 0
    4ed4:	65 c0       	rjmp	.+202    	; 0x4fa0 <readSysReg+0x434>
		case 460: temp =    (int)  eeprom->Delta_dhw_min;break;
    4ed6:	6f 89       	ldd	r22, Y+23	; 0x17
    4ed8:	26 2f       	mov	r18, r22
    4eda:	30 e0       	ldi	r19, 0x00	; 0
    4edc:	61 c0       	rjmp	.+194    	; 0x4fa0 <readSysReg+0x434>
		case 470: temp =    (int)  eeprom->Power_380;break;
    4ede:	69 a5       	ldd	r22, Y+41	; 0x29
    4ee0:	26 2f       	mov	r18, r22
    4ee2:	30 e0       	ldi	r19, 0x00	; 0
    4ee4:	5d c0       	rjmp	.+186    	; 0x4fa0 <readSysReg+0x434>
		case 480: temp =    (int)  eeprom->TimeBetweenDef;break;
    4ee6:	6a a1       	ldd	r22, Y+34	; 0x22
    4ee8:	26 2f       	mov	r18, r22
    4eea:	30 e0       	ldi	r19, 0x00	; 0
    4eec:	59 c0       	rjmp	.+178    	; 0x4fa0 <readSysReg+0x434>
		//case 500: temp =    (int)  compPtr-> Curr_A;break;
		//case 510: temp =    (int)  compPtr-> Curr_B;break;
		//case 520: temp =    (int)  compPtr-> Curr_C;break;
		
		//--------------------------------------
		case 301: temp =    (int)  eeprom->number_turnon_compressor_1;break;
    4eee:	2e ad       	ldd	r18, Y+62	; 0x3e
    4ef0:	3f ad       	ldd	r19, Y+63	; 0x3f
    4ef2:	56 c0       	rjmp	.+172    	; 0x4fa0 <readSysReg+0x434>
		case 311: temp =    (int)  eeprom->number_turnon_hiter_1;break;
    4ef4:	fb 01       	movw	r30, r22
    4ef6:	ee 5b       	subi	r30, 0xBE	; 190
    4ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    4efa:	20 81       	ld	r18, Z
    4efc:	31 81       	ldd	r19, Z+1	; 0x01
    4efe:	50 c0       	rjmp	.+160    	; 0x4fa0 <readSysReg+0x434>
		case 321: temp =    (int)  eeprom->number_turnon_revers_1;break;
    4f00:	fb 01       	movw	r30, r22
    4f02:	ec 5b       	subi	r30, 0xBC	; 188
    4f04:	ff 4f       	sbci	r31, 0xFF	; 255
    4f06:	20 81       	ld	r18, Z
    4f08:	31 81       	ldd	r19, Z+1	; 0x01
    4f0a:	4a c0       	rjmp	.+148    	; 0x4fa0 <readSysReg+0x434>
		case 331: temp =    (int)  eeprom->number_turnon_source_1;break;
    4f0c:	fb 01       	movw	r30, r22
    4f0e:	e0 5c       	subi	r30, 0xC0	; 192
    4f10:	ff 4f       	sbci	r31, 0xFF	; 255
    4f12:	20 81       	ld	r18, Z
    4f14:	31 81       	ldd	r19, Z+1	; 0x01
    4f16:	44 c0       	rjmp	.+136    	; 0x4fa0 <readSysReg+0x434>
		case 341: temp =    (int)  eeprom->time_compressor_1;break;
    4f18:	2a ad       	ldd	r18, Y+58	; 0x3a
    4f1a:	3b ad       	ldd	r19, Y+59	; 0x3b
    4f1c:	41 c0       	rjmp	.+130    	; 0x4fa0 <readSysReg+0x434>
		case 351: temp =    (int)  eeprom->time_pump_hiter_1;break;
    4f1e:	2c a9       	ldd	r18, Y+52	; 0x34
    4f20:	3d a9       	ldd	r19, Y+53	; 0x35
    4f22:	3e c0       	rjmp	.+124    	; 0x4fa0 <readSysReg+0x434>
		case 371: temp =    (int)  eeprom->time_pump_source_1;break;
    4f24:	2e a9       	ldd	r18, Y+54	; 0x36
    4f26:	3f a9       	ldd	r19, Y+55	; 0x37
    4f28:	3b c0       	rjmp	.+118    	; 0x4fa0 <readSysReg+0x434>
		case 381: temp =    (int)  eeprom->time_revers_1;break;
    4f2a:	28 ad       	ldd	r18, Y+56	; 0x38
    4f2c:	39 ad       	ldd	r19, Y+57	; 0x39
    4f2e:	38 c0       	rjmp	.+112    	; 0x4fa0 <readSysReg+0x434>
		case 391: temp =    (int)  eeprom->trv_corection_1;break;
    4f30:	2a a9       	ldd	r18, Y+50	; 0x32
    4f32:	3b a9       	ldd	r19, Y+51	; 0x33
    4f34:	35 c0       	rjmp	.+106    	; 0x4fa0 <readSysReg+0x434>
		//------------------------------------
		case 302: temp =    (int)  eeprom->number_turnon_compressor_2;break;
    4f36:	fb 01       	movw	r30, r22
    4f38:	ee 5a       	subi	r30, 0xAE	; 174
    4f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3c:	20 81       	ld	r18, Z
    4f3e:	31 81       	ldd	r19, Z+1	; 0x01
    4f40:	2f c0       	rjmp	.+94     	; 0x4fa0 <readSysReg+0x434>
		case 312: temp =    (int)  eeprom->number_turnon_hiter_2;break;
    4f42:	fb 01       	movw	r30, r22
    4f44:	ea 5a       	subi	r30, 0xAA	; 170
    4f46:	ff 4f       	sbci	r31, 0xFF	; 255
    4f48:	20 81       	ld	r18, Z
    4f4a:	31 81       	ldd	r19, Z+1	; 0x01
    4f4c:	29 c0       	rjmp	.+82     	; 0x4fa0 <readSysReg+0x434>
		case 322: temp =    (int)  eeprom->number_turnon_revers_2;break;
    4f4e:	fb 01       	movw	r30, r22
    4f50:	e8 5a       	subi	r30, 0xA8	; 168
    4f52:	ff 4f       	sbci	r31, 0xFF	; 255
    4f54:	20 81       	ld	r18, Z
    4f56:	31 81       	ldd	r19, Z+1	; 0x01
    4f58:	23 c0       	rjmp	.+70     	; 0x4fa0 <readSysReg+0x434>
		case 332: temp =    (int)  eeprom->number_turnon_source_2;break;
    4f5a:	fb 01       	movw	r30, r22
    4f5c:	ec 5a       	subi	r30, 0xAC	; 172
    4f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f60:	20 81       	ld	r18, Z
    4f62:	31 81       	ldd	r19, Z+1	; 0x01
    4f64:	1d c0       	rjmp	.+58     	; 0x4fa0 <readSysReg+0x434>
		case 342: temp =    (int)  eeprom->time_compressor_2;break;
    4f66:	fb 01       	movw	r30, r22
    4f68:	e0 5b       	subi	r30, 0xB0	; 176
    4f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f6c:	20 81       	ld	r18, Z
    4f6e:	31 81       	ldd	r19, Z+1	; 0x01
    4f70:	17 c0       	rjmp	.+46     	; 0x4fa0 <readSysReg+0x434>
		case 352: temp =    (int)  eeprom->time_pump_hiter_2;break;
    4f72:	fb 01       	movw	r30, r22
    4f74:	e6 5b       	subi	r30, 0xB6	; 182
    4f76:	ff 4f       	sbci	r31, 0xFF	; 255
    4f78:	20 81       	ld	r18, Z
    4f7a:	31 81       	ldd	r19, Z+1	; 0x01
    4f7c:	11 c0       	rjmp	.+34     	; 0x4fa0 <readSysReg+0x434>
		case 372: temp =    (int)  eeprom->time_pump_source_2;break;
    4f7e:	fb 01       	movw	r30, r22
    4f80:	e4 5b       	subi	r30, 0xB4	; 180
    4f82:	ff 4f       	sbci	r31, 0xFF	; 255
    4f84:	20 81       	ld	r18, Z
    4f86:	31 81       	ldd	r19, Z+1	; 0x01
    4f88:	0b c0       	rjmp	.+22     	; 0x4fa0 <readSysReg+0x434>
		case 382: temp =    (int)  eeprom->time_revers_2;break;
    4f8a:	fb 01       	movw	r30, r22
    4f8c:	e2 5b       	subi	r30, 0xB2	; 178
    4f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f90:	20 81       	ld	r18, Z
    4f92:	31 81       	ldd	r19, Z+1	; 0x01
    4f94:	05 c0       	rjmp	.+10     	; 0x4fa0 <readSysReg+0x434>
		case 392: temp =    (int)  eeprom->trv_corection_2;break;
    4f96:	fb 01       	movw	r30, r22
    4f98:	e8 5b       	subi	r30, 0xB8	; 184
    4f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9c:	20 81       	ld	r18, Z
    4f9e:	31 81       	ldd	r19, Z+1	; 0x01
		
	}
	return temp;
}
    4fa0:	c9 01       	movw	r24, r18
    4fa2:	df 91       	pop	r29
    4fa4:	cf 91       	pop	r28
    4fa6:	08 95       	ret

00004fa8 <writeSysReg>:
void writeSysReg(xEEdata*comp,uint16_t adress,uint16_t value)
{
    4fa8:	cf 93       	push	r28
    4faa:	df 93       	push	r29
    4fac:	dc 01       	movw	r26, r24
	
	switch(adress)
    4fae:	fb 01       	movw	r30, r22
    4fb0:	3a 97       	sbiw	r30, 0x0a	; 10
    4fb2:	e7 3d       	cpi	r30, 0xD7	; 215
    4fb4:	81 e0       	ldi	r24, 0x01	; 1
    4fb6:	f8 07       	cpc	r31, r24
    4fb8:	08 f0       	brcs	.+2      	; 0x4fbc <writeSysReg+0x14>
    4fba:	bb c0       	rjmp	.+374    	; 0x5132 <writeSysReg+0x18a>
    4fbc:	88 27       	eor	r24, r24
    4fbe:	ed 58       	subi	r30, 0x8D	; 141
    4fc0:	fd 4f       	sbci	r31, 0xFD	; 253
    4fc2:	8f 4f       	sbci	r24, 0xFF	; 255
    4fc4:	0c 94 72 5a 	jmp	0xb4e4	; 0xb4e4 <__tablejump2__>
	{
		case 10:  comp->Compressor_delay  = value;break;
    4fc8:	4c 93       	st	X, r20
    4fca:	b3 c0       	rjmp	.+358    	; 0x5132 <writeSysReg+0x18a>
		case 20:  comp->HeatingPump_delay = value;break;
    4fcc:	13 96       	adiw	r26, 0x03	; 3
    4fce:	4c 93       	st	X, r20
    4fd0:	b0 c0       	rjmp	.+352    	; 0x5132 <writeSysReg+0x18a>
		case 30:  comp->Source_Pump_delay = value;break;
    4fd2:	11 96       	adiw	r26, 0x01	; 1
    4fd4:	4c 93       	st	X, r20
    4fd6:	ad c0       	rjmp	.+346    	; 0x5132 <writeSysReg+0x18a>
		case 40:  comp->Revers_Valve_delay = value;break;
    4fd8:	12 96       	adiw	r26, 0x02	; 2
    4fda:	4c 93       	st	X, r20
    4fdc:	aa c0       	rjmp	.+340    	; 0x5132 <writeSysReg+0x18a>
		case 50:  comp->Three_Way_delay  = value;break;
    4fde:	14 96       	adiw	r26, 0x04	; 4
    4fe0:	4c 93       	st	X, r20
    4fe2:	a7 c0       	rjmp	.+334    	; 0x5132 <writeSysReg+0x18a>
		case 60:  comp->Cool_Max = value;break;
    4fe4:	1c 96       	adiw	r26, 0x0c	; 12
    4fe6:	4c 93       	st	X, r20
    4fe8:	a4 c0       	rjmp	.+328    	; 0x5132 <writeSysReg+0x18a>
		case 70:  comp->Cool_Min = value;break;
    4fea:	1d 96       	adiw	r26, 0x0d	; 13
    4fec:	4c 93       	st	X, r20
    4fee:	a1 c0       	rjmp	.+322    	; 0x5132 <writeSysReg+0x18a>
		case 80:  comp->HEAT_Max  = value;break;
    4ff0:	19 96       	adiw	r26, 0x09	; 9
    4ff2:	4c 93       	st	X, r20
    4ff4:	9e c0       	rjmp	.+316    	; 0x5132 <writeSysReg+0x18a>
		case 90:  comp->HEAT_Min = value;break;
    4ff6:	1a 96       	adiw	r26, 0x0a	; 10
    4ff8:	4c 93       	st	X, r20
    4ffa:	9b c0       	rjmp	.+310    	; 0x5132 <writeSysReg+0x18a>
		case 100: comp->Delta_heating_max  = value;break;
    4ffc:	54 96       	adiw	r26, 0x14	; 20
    4ffe:	4c 93       	st	X, r20
    5000:	98 c0       	rjmp	.+304    	; 0x5132 <writeSysReg+0x18a>
		case 110: comp->Delta_heating_min  = value;break;
    5002:	53 96       	adiw	r26, 0x13	; 19
    5004:	4c 93       	st	X, r20
    5006:	95 c0       	rjmp	.+298    	; 0x5132 <writeSysReg+0x18a>
		case 120: comp->Delta_source_max  = value;break;
    5008:	56 96       	adiw	r26, 0x16	; 22
    500a:	4c 93       	st	X, r20
    500c:	92 c0       	rjmp	.+292    	; 0x5132 <writeSysReg+0x18a>
		case 130: comp->Delta_source_min  = value;break;
    500e:	55 96       	adiw	r26, 0x15	; 21
    5010:	4c 93       	st	X, r20
    5012:	8f c0       	rjmp	.+286    	; 0x5132 <writeSysReg+0x18a>
		case 140: comp->diffCOOL  = value;break;
    5014:	5d 96       	adiw	r26, 0x1d	; 29
    5016:	4c 93       	st	X, r20
    5018:	8c c0       	rjmp	.+280    	; 0x5132 <writeSysReg+0x18a>
		case 150: comp->diffDHW  = value;break;
    501a:	5e 96       	adiw	r26, 0x1e	; 30
    501c:	4c 93       	st	X, r20
    501e:	89 c0       	rjmp	.+274    	; 0x5132 <writeSysReg+0x18a>
		case 160: comp->diffHEAT  = value;break;
    5020:	5c 96       	adiw	r26, 0x1c	; 28
    5022:	4c 93       	st	X, r20
    5024:	86 c0       	rjmp	.+268    	; 0x5132 <writeSysReg+0x18a>
		case 170: comp->AireToWater  = value;break;
    5026:	5f 96       	adiw	r26, 0x1f	; 31
    5028:	4c 93       	st	X, r20
    502a:	83 c0       	rjmp	.+262    	; 0x5132 <writeSysReg+0x18a>
		case 180: comp->ExhaustMax  = value;break;
    502c:	1e 96       	adiw	r26, 0x0e	; 14
    502e:	4c 93       	st	X, r20
    5030:	80 c0       	rjmp	.+256    	; 0x5132 <writeSysReg+0x18a>
		case 190: comp->cool  = value;break;
    5032:	97 96       	adiw	r26, 0x27	; 39
    5034:	4c 93       	st	X, r20
    5036:	7d c0       	rjmp	.+250    	; 0x5132 <writeSysReg+0x18a>
		case 200: comp->heat  = value;break;
    5038:	96 96       	adiw	r26, 0x26	; 38
    503a:	4c 93       	st	X, r20
    503c:	7a c0       	rjmp	.+244    	; 0x5132 <writeSysReg+0x18a>
		case 210: comp->heatWater  = value;break;
    503e:	95 96       	adiw	r26, 0x25	; 37
    5040:	4c 93       	st	X, r20
    5042:	77 c0       	rjmp	.+238    	; 0x5132 <writeSysReg+0x18a>
		case 220: comp->HP_Max  = value;break;
    5044:	16 96       	adiw	r26, 0x06	; 6
    5046:	4c 93       	st	X, r20
    5048:	74 c0       	rjmp	.+232    	; 0x5132 <writeSysReg+0x18a>
		case 230: comp->LP_Max  = value;break;
    504a:	18 96       	adiw	r26, 0x08	; 8
    504c:	4c 93       	st	X, r20
    504e:	71 c0       	rjmp	.+226    	; 0x5132 <writeSysReg+0x18a>
		case 240: comp->HP_Min  = value;break;
    5050:	17 96       	adiw	r26, 0x07	; 7
    5052:	4c 93       	st	X, r20
    5054:	6e c0       	rjmp	.+220    	; 0x5132 <writeSysReg+0x18a>
		case 250: comp->LP_Min  = value;break;
    5056:	ed 01       	movw	r28, r26
    5058:	c4 5a       	subi	r28, 0xA4	; 164
    505a:	df 4f       	sbci	r29, 0xFF	; 255
    505c:	ba 01       	movw	r22, r20
    505e:	80 e0       	ldi	r24, 0x00	; 0
    5060:	90 e0       	ldi	r25, 0x00	; 0
    5062:	0e 94 36 55 	call	0xaa6c	; 0xaa6c <__floatunsisf>
    5066:	68 83       	st	Y, r22
    5068:	79 83       	std	Y+1, r23	; 0x01
    506a:	8a 83       	std	Y+2, r24	; 0x02
    506c:	9b 83       	std	Y+3, r25	; 0x03
    506e:	61 c0       	rjmp	.+194    	; 0x5132 <writeSysReg+0x18a>
		case 260: comp->MaxSupercool  = value;break;
    5070:	52 96       	adiw	r26, 0x12	; 18
    5072:	4c 93       	st	X, r20
    5074:	5e c0       	rjmp	.+188    	; 0x5132 <writeSysReg+0x18a>
		case 270: comp->MinSupercool  = value;break;
    5076:	51 96       	adiw	r26, 0x11	; 17
    5078:	4c 93       	st	X, r20
    507a:	5b c0       	rjmp	.+182    	; 0x5132 <writeSysReg+0x18a>
		case 280: comp->MaxSuperheat  = value;break;
    507c:	50 96       	adiw	r26, 0x10	; 16
    507e:	4c 93       	st	X, r20
    5080:	58 c0       	rjmp	.+176    	; 0x5132 <writeSysReg+0x18a>
		case 290: comp->MinSuperheat  = value;break;
    5082:	1f 96       	adiw	r26, 0x0f	; 15
    5084:	4c 93       	st	X, r20
    5086:	55 c0       	rjmp	.+170    	; 0x5132 <writeSysReg+0x18a>
		case 300: comp->number_turnon_threeway  = value;break;
    5088:	aa 5b       	subi	r26, 0xBA	; 186
    508a:	bf 4f       	sbci	r27, 0xFF	; 255
    508c:	4d 93       	st	X+, r20
    508e:	5c 93       	st	X, r21
    5090:	50 c0       	rjmp	.+160    	; 0x5132 <writeSysReg+0x18a>
		case 310: comp->power  = value;break;
    5092:	94 96       	adiw	r26, 0x24	; 36
    5094:	4c 93       	st	X, r20
    5096:	4d c0       	rjmp	.+154    	; 0x5132 <writeSysReg+0x18a>
		case 320: comp->Set_Cooling  = value;break;
    5098:	5a 96       	adiw	r26, 0x1a	; 26
    509a:	4c 93       	st	X, r20
    509c:	4a c0       	rjmp	.+148    	; 0x5132 <writeSysReg+0x18a>
		case 330: comp->Set_DHW  = value;break;
    509e:	5b 96       	adiw	r26, 0x1b	; 27
    50a0:	4c 93       	st	X, r20
    50a2:	47 c0       	rjmp	.+142    	; 0x5132 <writeSysReg+0x18a>
		case 340: comp->Set_Heating  = value;break;
    50a4:	59 96       	adiw	r26, 0x19	; 25
    50a6:	4c 93       	st	X, r20
    50a8:	44 c0       	rjmp	.+136    	; 0x5132 <writeSysReg+0x18a>
		case 350: comp->TempDef  = value;break;//
    50aa:	9b 96       	adiw	r26, 0x2b	; 43
    50ac:	5c 93       	st	X, r21
    50ae:	4e 93       	st	-X, r20
    50b0:	9a 97       	sbiw	r26, 0x2a	; 42
    50b2:	3f c0       	rjmp	.+126    	; 0x5132 <writeSysReg+0x18a>
		case 360: comp->TimeDef  = value;break;//
    50b4:	91 96       	adiw	r26, 0x21	; 33
    50b6:	4c 93       	st	X, r20
    50b8:	3c c0       	rjmp	.+120    	; 0x5132 <writeSysReg+0x18a>
		case 370: comp->TempOut  = value;break;
    50ba:	9f 96       	adiw	r26, 0x2f	; 47
    50bc:	5c 93       	st	X, r21
    50be:	4e 93       	st	-X, r20
    50c0:	9e 97       	sbiw	r26, 0x2e	; 46
    50c2:	37 c0       	rjmp	.+110    	; 0x5132 <writeSysReg+0x18a>
		case 380: comp->TempStopDef  = value;break;//
    50c4:	9d 96       	adiw	r26, 0x2d	; 45
    50c6:	5c 93       	st	X, r21
    50c8:	4e 93       	st	-X, r20
    50ca:	9c 97       	sbiw	r26, 0x2c	; 44
    50cc:	32 c0       	rjmp	.+100    	; 0x5132 <writeSysReg+0x18a>
		case 390: comp->time_threeway  = value;break;
    50ce:	dd 96       	adiw	r26, 0x3d	; 61
    50d0:	5c 93       	st	X, r21
    50d2:	4e 93       	st	-X, r20
    50d4:	dc 97       	sbiw	r26, 0x3c	; 60
    50d6:	2d c0       	rjmp	.+90     	; 0x5132 <writeSysReg+0x18a>
		case 400: comp->NombComp  = value;break;
    50d8:	90 96       	adiw	r26, 0x20	; 32
    50da:	4c 93       	st	X, r20
    50dc:	2a c0       	rjmp	.+84     	; 0x5132 <writeSysReg+0x18a>
		case 410: comp->reversMod =value;break;
    50de:	98 96       	adiw	r26, 0x28	; 40
    50e0:	4c 93       	st	X, r20
    50e2:	27 c0       	rjmp	.+78     	; 0x5132 <writeSysReg+0x18a>
		case 420: comp->TRV_Delay=value;break;
    50e4:	15 96       	adiw	r26, 0x05	; 5
    50e6:	4c 93       	st	X, r20
    50e8:	24 c0       	rjmp	.+72     	; 0x5132 <writeSysReg+0x18a>
		case 430: comp->Source_Max=value;break;
    50ea:	1b 96       	adiw	r26, 0x0b	; 11
    50ec:	4c 93       	st	X, r20
    50ee:	21 c0       	rjmp	.+66     	; 0x5132 <writeSysReg+0x18a>
		case 440: comp->Source_Min=value;break;
    50f0:	d1 96       	adiw	r26, 0x31	; 49
    50f2:	5c 93       	st	X, r21
    50f4:	4e 93       	st	-X, r20
    50f6:	d0 97       	sbiw	r26, 0x30	; 48
    50f8:	1c c0       	rjmp	.+56     	; 0x5132 <writeSysReg+0x18a>
		case 450: comp->Delta_dhw_max  = value;break;
    50fa:	58 96       	adiw	r26, 0x18	; 24
    50fc:	4c 93       	st	X, r20
    50fe:	19 c0       	rjmp	.+50     	; 0x5132 <writeSysReg+0x18a>
		case 460: comp->Delta_dhw_min  = value;break;
    5100:	57 96       	adiw	r26, 0x17	; 23
    5102:	4c 93       	st	X, r20
    5104:	16 c0       	rjmp	.+44     	; 0x5132 <writeSysReg+0x18a>
		case 470: comp->Power_380 = value;break;
    5106:	99 96       	adiw	r26, 0x29	; 41
    5108:	4c 93       	st	X, r20
    510a:	13 c0       	rjmp	.+38     	; 0x5132 <writeSysReg+0x18a>
		case 480: comp->TimeBetweenDef = value;break;//
    510c:	92 96       	adiw	r26, 0x22	; 34
    510e:	4c 93       	st	X, r20
    5110:	10 c0       	rjmp	.+32     	; 0x5132 <writeSysReg+0x18a>
		case 391: comp->trv_corection_1 = value;break;
    5112:	d3 96       	adiw	r26, 0x33	; 51
    5114:	5c 93       	st	X, r21
    5116:	4e 93       	st	-X, r20
    5118:	d2 97       	sbiw	r26, 0x32	; 50
    511a:	0b c0       	rjmp	.+22     	; 0x5132 <writeSysReg+0x18a>
		case 392: comp->trv_corection_2 = value;break;
    511c:	a8 5b       	subi	r26, 0xB8	; 184
    511e:	bf 4f       	sbci	r27, 0xFF	; 255
    5120:	4d 93       	st	X+, r20
    5122:	5c 93       	st	X, r21
    5124:	06 c0       	rjmp	.+12     	; 0x5132 <writeSysReg+0x18a>
		case 393:if(comp->AireToWater==1) forsDefrost = value;break;
    5126:	5f 96       	adiw	r26, 0x1f	; 31
    5128:	8c 91       	ld	r24, X
    512a:	81 30       	cpi	r24, 0x01	; 1
    512c:	11 f4       	brne	.+4      	; 0x5132 <writeSysReg+0x18a>
    512e:	40 93 ff 06 	sts	0x06FF, r20	; 0x8006ff <forsDefrost>
	}
}
    5132:	df 91       	pop	r29
    5134:	cf 91       	pop	r28
    5136:	08 95       	ret

00005138 <calculateCRC>:
}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
    5138:	88 23       	and	r24, r24
    513a:	09 f1       	breq	.+66     	; 0x517e <calculateCRC+0x46>
    513c:	af ef       	ldi	r26, 0xFF	; 255
    513e:	a8 0f       	add	r26, r24
    5140:	b0 e0       	ldi	r27, 0x00	; 0
    5142:	11 96       	adiw	r26, 0x01	; 1
    5144:	60 e0       	ldi	r22, 0x00	; 0
    5146:	70 e0       	ldi	r23, 0x00	; 0
    5148:	8f ef       	ldi	r24, 0xFF	; 255
    514a:	9f ef       	ldi	r25, 0xFF	; 255
	{
		temp = temp ^ frame[i];
    514c:	fb 01       	movw	r30, r22
    514e:	ea 54       	subi	r30, 0x4A	; 74
    5150:	f8 4f       	sbci	r31, 0xF8	; 248
    5152:	20 81       	ld	r18, Z
    5154:	82 27       	eor	r24, r18
    5156:	28 e0       	ldi	r18, 0x08	; 8
		for (unsigned char j = 1; j <= 8; j++)
		{
			flag = temp & 0x0001;
    5158:	ac 01       	movw	r20, r24
    515a:	41 70       	andi	r20, 0x01	; 1
    515c:	55 27       	eor	r21, r21
			temp >>= 1;
    515e:	96 95       	lsr	r25
    5160:	87 95       	ror	r24
			if (flag)
    5162:	45 2b       	or	r20, r21
    5164:	21 f0       	breq	.+8      	; 0x516e <calculateCRC+0x36>
			temp ^= 0xA001;
    5166:	31 e0       	ldi	r19, 0x01	; 1
    5168:	83 27       	eor	r24, r19
    516a:	30 ea       	ldi	r19, 0xA0	; 160
    516c:	93 27       	eor	r25, r19
    516e:	21 50       	subi	r18, 0x01	; 1
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
	{
		temp = temp ^ frame[i];
		for (unsigned char j = 1; j <= 8; j++)
    5170:	99 f7       	brne	.-26     	; 0x5158 <calculateCRC+0x20>
    5172:	6f 5f       	subi	r22, 0xFF	; 255
    5174:	7f 4f       	sbci	r23, 0xFF	; 255
}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
    5176:	6a 17       	cp	r22, r26
    5178:	7b 07       	cpc	r23, r27
    517a:	41 f7       	brne	.-48     	; 0x514c <calculateCRC+0x14>
    517c:	02 c0       	rjmp	.+4      	; 0x5182 <calculateCRC+0x4a>

}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
    517e:	8f ef       	ldi	r24, 0xFF	; 255
    5180:	9f ef       	ldi	r25, 0xFF	; 255
	// Reverse byte order.
	temp2 = temp >> 8;
	temp = (temp << 8) | temp2;
	temp &= 0xFFFF;
	return temp; // the returned value is already swopped - crcLo byte is first & crcHi byte is last
}
    5182:	98 27       	eor	r25, r24
    5184:	89 27       	eor	r24, r25
    5186:	98 27       	eor	r25, r24
    5188:	08 95       	ret

0000518a <sendPacket>:

void sendPacket(unsigned char bufferSize)
{
    518a:	ef 92       	push	r14
    518c:	ff 92       	push	r15
    518e:	0f 93       	push	r16
    5190:	1f 93       	push	r17
    5192:	cf 93       	push	r28
    5194:	df 93       	push	r29
	
	for (unsigned char i = 0; i < bufferSize; i++) if(port_0)xSerialPutChar(&xSerialPort,frame[i]); else if(port_3){PORTJ|= (_BV(PIN_rs485));xSerialPutChar(&xSerial3Port,frame[i]);}
    5196:	88 23       	and	r24, r24
    5198:	71 f1       	breq	.+92     	; 0x51f6 <sendPacket+0x6c>
    519a:	81 50       	subi	r24, 0x01	; 1
    519c:	08 2f       	mov	r16, r24
    519e:	10 e0       	ldi	r17, 0x00	; 0
    51a0:	0f 5f       	subi	r16, 0xFF	; 255
    51a2:	1f 4f       	sbci	r17, 0xFF	; 255
    51a4:	c0 e0       	ldi	r28, 0x00	; 0
    51a6:	d0 e0       	ldi	r29, 0x00	; 0
    51a8:	0f 2e       	mov	r0, r31
    51aa:	f5 e0       	ldi	r31, 0x05	; 5
    51ac:	ef 2e       	mov	r14, r31
    51ae:	ff 24       	eor	r15, r15
    51b0:	f3 94       	inc	r15
    51b2:	f0 2d       	mov	r31, r0
    51b4:	80 91 9b 0a 	lds	r24, 0x0A9B	; 0x800a9b <port_0>
    51b8:	88 23       	and	r24, r24
    51ba:	49 f0       	breq	.+18     	; 0x51ce <sendPacket+0x44>
    51bc:	fe 01       	movw	r30, r28
    51be:	ea 54       	subi	r30, 0x4A	; 74
    51c0:	f8 4f       	sbci	r31, 0xF8	; 248
    51c2:	60 81       	ld	r22, Z
    51c4:	8d e4       	ldi	r24, 0x4D	; 77
    51c6:	97 e0       	ldi	r25, 0x07	; 7
    51c8:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <xSerialPutChar>
    51cc:	10 c0       	rjmp	.+32     	; 0x51ee <sendPacket+0x64>
    51ce:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <port_3>
    51d2:	88 23       	and	r24, r24
    51d4:	61 f0       	breq	.+24     	; 0x51ee <sendPacket+0x64>
    51d6:	f7 01       	movw	r30, r14
    51d8:	80 81       	ld	r24, Z
    51da:	84 60       	ori	r24, 0x04	; 4
    51dc:	80 83       	st	Z, r24
    51de:	fe 01       	movw	r30, r28
    51e0:	ea 54       	subi	r30, 0x4A	; 74
    51e2:	f8 4f       	sbci	r31, 0xF8	; 248
    51e4:	60 81       	ld	r22, Z
    51e6:	84 e9       	ldi	r24, 0x94	; 148
    51e8:	97 e0       	ldi	r25, 0x07	; 7
    51ea:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <xSerialPutChar>
    51ee:	21 96       	adiw	r28, 0x01	; 1
    51f0:	c0 17       	cp	r28, r16
    51f2:	d1 07       	cpc	r29, r17
    51f4:	f9 f6       	brne	.-66     	; 0x51b4 <sendPacket+0x2a>
	//xSerialRxFlush(&xSerialPort);
	PORTJ &= (_BV(PIN_rs485));
    51f6:	e5 e0       	ldi	r30, 0x05	; 5
    51f8:	f1 e0       	ldi	r31, 0x01	; 1
    51fa:	80 81       	ld	r24, Z
    51fc:	84 70       	andi	r24, 0x04	; 4
    51fe:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5200:	00 00       	nop

	_delay_us(3645);
	
	
    5202:	df 91       	pop	r29
    5204:	cf 91       	pop	r28
    5206:	1f 91       	pop	r17
    5208:	0f 91       	pop	r16
    520a:	ff 90       	pop	r15
    520c:	ef 90       	pop	r14
    520e:	08 95       	ret

00005210 <modbus_update>:
		case 393:if(comp->AireToWater==1) forsDefrost = value;break;
	}
}

void modbus_update()
{
    5210:	af 92       	push	r10
    5212:	bf 92       	push	r11
    5214:	cf 92       	push	r12
    5216:	df 92       	push	r13
    5218:	ef 92       	push	r14
    521a:	ff 92       	push	r15
    521c:	0f 93       	push	r16
    521e:	1f 93       	push	r17
    5220:	cf 93       	push	r28
    5222:	df 93       	push	r29
	unsigned char noOfBytes;
	unsigned char responseFrameSize;
	unsigned int temp;
	void* ptr=NULL;
	
	if(port_0)buffer=xSerialAvailableChar( &xSerialPort );
    5224:	80 91 9b 0a 	lds	r24, 0x0A9B	; 0x800a9b <port_0>
    5228:	88 23       	and	r24, r24
    522a:	29 f0       	breq	.+10     	; 0x5236 <modbus_update+0x26>
    522c:	8d e4       	ldi	r24, 0x4D	; 77
    522e:	97 e0       	ldi	r25, 0x07	; 7
    5230:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <xSerialAvailableChar>
    5234:	09 c0       	rjmp	.+18     	; 0x5248 <modbus_update+0x38>
	else if (port_3)buffer=xSerialAvailableChar( &xSerial3Port );
    5236:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <port_3>
    523a:	88 23       	and	r24, r24
    523c:	09 f4       	brne	.+2      	; 0x5240 <modbus_update+0x30>
    523e:	da c0       	rjmp	.+436    	; 0x53f4 <modbus_update+0x1e4>
    5240:	84 e9       	ldi	r24, 0x94	; 148
    5242:	97 e0       	ldi	r25, 0x07	; 7
    5244:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <xSerialAvailableChar>
	
	//avrSerialPrintf("buffer = %d \r\n",buffer );
	//avrSerialPrintf("overflow= %d \r\n",overflow);
	if (overflow){ return;}//exceptionResponse(OVERFLOW_BUFF);
    5248:	90 91 6f 07 	lds	r25, 0x076F	; 0x80076f <overflow>
    524c:	91 11       	cpse	r25, r1
    524e:	d7 c0       	rjmp	.+430    	; 0x53fe <modbus_update+0x1ee>
	if (buffer > 0 && buffer < 8) {  return;}// exceptionResponse(CORRUPT_PACKET);
    5250:	9f ef       	ldi	r25, 0xFF	; 255
    5252:	98 0f       	add	r25, r24
    5254:	97 30       	cpi	r25, 0x07	; 7
    5256:	08 f4       	brcc	.+2      	; 0x525a <modbus_update+0x4a>
    5258:	d2 c0       	rjmp	.+420    	; 0x53fe <modbus_update+0x1ee>
	
	// The minimum request packet is 8 bytes for function 3 & 16
	
	id = frame[0];
    525a:	90 91 b6 07 	lds	r25, 0x07B6	; 0x8007b6 <frame>
	//avrSerialPrintf("buffer= %d \r\n",buffer);
	
	if (id == slaveID ) // if the recieved ID matches the slaveID or broadcasting id (0), continue
    525e:	91 30       	cpi	r25, 0x01	; 1
    5260:	09 f0       	breq	.+2      	; 0x5264 <modbus_update+0x54>
    5262:	cd c0       	rjmp	.+410    	; 0x53fe <modbus_update+0x1ee>
	{
		crc = ((frame[buffer - 2] << 8) | frame[buffer - 1]); // combine the crc Low & High bytes
    5264:	28 2f       	mov	r18, r24
    5266:	30 e0       	ldi	r19, 0x00	; 0
    5268:	f9 01       	movw	r30, r18
    526a:	ec 54       	subi	r30, 0x4C	; 76
    526c:	f8 4f       	sbci	r31, 0xF8	; 248
    526e:	d0 81       	ld	r29, Z
    5270:	f9 01       	movw	r30, r18
    5272:	eb 54       	subi	r30, 0x4B	; 75
    5274:	f8 4f       	sbci	r31, 0xF8	; 248
    5276:	c0 81       	ld	r28, Z
		//avrSerialPrintf("crc= %d \r\n",crc);
		if (calculateCRC(buffer - 2) == crc) // if the calculated crc matches the recieved crc continue
    5278:	82 50       	subi	r24, 0x02	; 2
    527a:	5e df       	rcall	.-324    	; 0x5138 <calculateCRC>
    527c:	2c 2f       	mov	r18, r28
    527e:	30 e0       	ldi	r19, 0x00	; 0
    5280:	3d 2b       	or	r19, r29
    5282:	28 17       	cp	r18, r24
    5284:	39 07       	cpc	r19, r25
    5286:	09 f0       	breq	.+2      	; 0x528a <modbus_update+0x7a>
    5288:	ba c0       	rjmp	.+372    	; 0x53fe <modbus_update+0x1ee>
		{
			function = frame[1];
    528a:	e6 eb       	ldi	r30, 0xB6	; 182
    528c:	f7 e0       	ldi	r31, 0x07	; 7
    528e:	21 81       	ldd	r18, Z+1	; 0x01
    5290:	20 93 70 07 	sts	0x0770, r18	; 0x800770 <function>
			startingAddress = ((frame[2] << 8) | frame[3]); // combine the starting address bytes
    5294:	82 81       	ldd	r24, Z+2	; 0x02
    5296:	c3 81       	ldd	r28, Z+3	; 0x03
    5298:	d0 e0       	ldi	r29, 0x00	; 0
    529a:	d8 2b       	or	r29, r24
			no_of_registers = ((frame[4] << 8) | frame[5]);
    529c:	84 81       	ldd	r24, Z+4	; 0x04
    529e:	45 81       	ldd	r20, Z+5	; 0x05
    52a0:	50 e0       	ldi	r21, 0x00	; 0
    52a2:	58 2b       	or	r21, r24
			maxData = startingAddress + no_of_registers *10;
    52a4:	7a 01       	movw	r14, r20
    52a6:	ee 0c       	add	r14, r14
    52a8:	ff 1c       	adc	r15, r15
    52aa:	ca 01       	movw	r24, r20
    52ac:	88 0f       	add	r24, r24
    52ae:	99 1f       	adc	r25, r25
    52b0:	88 0f       	add	r24, r24
    52b2:	99 1f       	adc	r25, r25
    52b4:	88 0f       	add	r24, r24
    52b6:	99 1f       	adc	r25, r25
    52b8:	e8 0e       	add	r14, r24
    52ba:	f9 1e       	adc	r15, r25
    52bc:	ec 0e       	add	r14, r28
    52be:	fd 1e       	adc	r15, r29
			//avrSerialPrintf("function= %d \r\n",function);
			//avrSerialPrintf("startingAddress= %d \r\n",startingAddress);
			//avrSerialPrintf("no_of_registers= %d \r\n",no_of_registers);
			//avrSerialPrintf("maxData= %d \r\n",maxData);
			if (function == 3)
    52c0:	23 30       	cpi	r18, 0x03	; 3
    52c2:	09 f0       	breq	.+2      	; 0x52c6 <modbus_update+0xb6>
    52c4:	65 c0       	rjmp	.+202    	; 0x5390 <modbus_update+0x180>
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
    52c6:	9e 01       	movw	r18, r28
    52c8:	ad ec       	ldi	r26, 0xCD	; 205
    52ca:	bc ec       	ldi	r27, 0xCC	; 204
    52cc:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    52d0:	96 95       	lsr	r25
    52d2:	87 95       	ror	r24
    52d4:	96 95       	lsr	r25
    52d6:	87 95       	ror	r24
    52d8:	96 95       	lsr	r25
    52da:	87 95       	ror	r24
    52dc:	9c 01       	movw	r18, r24
    52de:	22 0f       	add	r18, r18
    52e0:	33 1f       	adc	r19, r19
    52e2:	88 0f       	add	r24, r24
    52e4:	99 1f       	adc	r25, r25
    52e6:	88 0f       	add	r24, r24
    52e8:	99 1f       	adc	r25, r25
    52ea:	88 0f       	add	r24, r24
    52ec:	99 1f       	adc	r25, r25
    52ee:	82 0f       	add	r24, r18
    52f0:	93 1f       	adc	r25, r19
    52f2:	9e 01       	movw	r18, r28
    52f4:	28 1b       	sub	r18, r24
    52f6:	39 0b       	sbc	r19, r25
    52f8:	21 30       	cpi	r18, 0x01	; 1
    52fa:	31 05       	cpc	r19, r1
    52fc:	51 f0       	breq	.+20     	; 0x5312 <modbus_update+0x102>
				else if(startingAddress%10==2){ptr=&Comp_2;}
    52fe:	22 30       	cpi	r18, 0x02	; 2
    5300:	31 05       	cpc	r19, r1
    5302:	71 f4       	brne	.+28     	; 0x5320 <modbus_update+0x110>
    5304:	0f 2e       	mov	r0, r31
    5306:	fc ed       	ldi	r31, 0xDC	; 220
    5308:	cf 2e       	mov	r12, r31
    530a:	f9 e0       	ldi	r31, 0x09	; 9
    530c:	df 2e       	mov	r13, r31
    530e:	f0 2d       	mov	r31, r0
    5310:	09 c0       	rjmp	.+18     	; 0x5324 <modbus_update+0x114>
			//avrSerialPrintf("startingAddress= %d \r\n",startingAddress);
			//avrSerialPrintf("no_of_registers= %d \r\n",no_of_registers);
			//avrSerialPrintf("maxData= %d \r\n",maxData);
			if (function == 3)
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
    5312:	0f 2e       	mov	r0, r31
    5314:	f6 e5       	ldi	r31, 0x56	; 86
    5316:	cf 2e       	mov	r12, r31
    5318:	f9 e0       	ldi	r31, 0x09	; 9
    531a:	df 2e       	mov	r13, r31
    531c:	f0 2d       	mov	r31, r0
    531e:	02 c0       	rjmp	.+4      	; 0x5324 <modbus_update+0x114>
	unsigned int crc16;
	unsigned int crc;
	unsigned char noOfBytes;
	unsigned char responseFrameSize;
	unsigned int temp;
	void* ptr=NULL;
    5320:	c1 2c       	mov	r12, r1
    5322:	d1 2c       	mov	r13, r1
			if (function == 3)
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
				else if(startingAddress%10==2){ptr=&Comp_2;}
				
				noOfBytes = no_of_registers * 2;
    5324:	a4 2e       	mov	r10, r20
    5326:	aa 0c       	add	r10, r10
				responseFrameSize = 5 + noOfBytes; // ID, function, noOfBytes, (dataLo + dataHi) * number of registers, crcLo, crcHi
    5328:	0f 2e       	mov	r0, r31
    532a:	f5 e0       	ldi	r31, 0x05	; 5
    532c:	bf 2e       	mov	r11, r31
    532e:	f0 2d       	mov	r31, r0
    5330:	ba 0c       	add	r11, r10
				frame[0] = slaveID;
    5332:	e6 eb       	ldi	r30, 0xB6	; 182
    5334:	f7 e0       	ldi	r31, 0x07	; 7
    5336:	81 e0       	ldi	r24, 0x01	; 1
    5338:	80 83       	st	Z, r24
				frame[1] = function;
    533a:	83 e0       	ldi	r24, 0x03	; 3
    533c:	81 83       	std	Z+1, r24	; 0x01
				frame[2] = noOfBytes;
    533e:	a2 82       	std	Z+2, r10	; 0x02
				//avrSerialPrintf("FrameSize= %d \r\n",responseFrameSize);
				//avrSerialPrintf("frame[1]= %d \r\n",frame[1]);
				//avrSerialPrintf("frame[2]= %d \r\n",frame[2]);
				address = 3; // PDU starts at the 4th byte
				for (index = startingAddress; index < maxData; )
    5340:	ce 15       	cp	r28, r14
    5342:	df 05       	cpc	r29, r15
    5344:	a8 f4       	brcc	.+42     	; 0x5370 <modbus_update+0x160>
    5346:	03 e0       	ldi	r16, 0x03	; 3
    5348:	10 e0       	ldi	r17, 0x00	; 0
				{
					temp = readSysReg(ptr,&EEpromData,index);//holdingRegs[index]
    534a:	ae 01       	movw	r20, r28
    534c:	66 ef       	ldi	r22, 0xF6	; 246
    534e:	78 e0       	ldi	r23, 0x08	; 8
    5350:	c6 01       	movw	r24, r12
    5352:	0c dc       	rcall	.-2024   	; 0x4b6c <readSysReg>
					frame[address] = temp >> 8; // split the register into 2 bytes
    5354:	f8 01       	movw	r30, r16
    5356:	ea 54       	subi	r30, 0x4A	; 74
    5358:	f8 4f       	sbci	r31, 0xF8	; 248
    535a:	90 83       	st	Z, r25
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
					frame[address] = temp & 0xFF;
    535c:	f8 01       	movw	r30, r16
    535e:	e9 54       	subi	r30, 0x49	; 73
    5360:	f8 4f       	sbci	r31, 0xF8	; 248
    5362:	80 83       	st	Z, r24
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
    5364:	0e 5f       	subi	r16, 0xFE	; 254
    5366:	1f 4f       	sbci	r17, 0xFF	; 255
					index +=10;
    5368:	2a 96       	adiw	r28, 0x0a	; 10
				frame[2] = noOfBytes;
				//avrSerialPrintf("FrameSize= %d \r\n",responseFrameSize);
				//avrSerialPrintf("frame[1]= %d \r\n",frame[1]);
				//avrSerialPrintf("frame[2]= %d \r\n",frame[2]);
				address = 3; // PDU starts at the 4th byte
				for (index = startingAddress; index < maxData; )
    536a:	ce 15       	cp	r28, r14
    536c:	df 05       	cpc	r29, r15
    536e:	68 f3       	brcs	.-38     	; 0x534a <modbus_update+0x13a>
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
					index +=10;
				}
				
				crc16 = calculateCRC(responseFrameSize - 2);
    5370:	83 e0       	ldi	r24, 0x03	; 3
    5372:	8a 0d       	add	r24, r10
    5374:	e1 de       	rcall	.-574    	; 0x5138 <calculateCRC>
				frame[responseFrameSize - 2] = crc16 >> 8; // split crc into 2 bytes
    5376:	2b 2d       	mov	r18, r11
    5378:	30 e0       	ldi	r19, 0x00	; 0
    537a:	f9 01       	movw	r30, r18
    537c:	ec 54       	subi	r30, 0x4C	; 76
    537e:	f8 4f       	sbci	r31, 0xF8	; 248
    5380:	90 83       	st	Z, r25
				frame[responseFrameSize - 1] = crc16 & 0xFF;
    5382:	f9 01       	movw	r30, r18
    5384:	eb 54       	subi	r30, 0x4B	; 75
    5386:	f8 4f       	sbci	r31, 0xF8	; 248
				//return;
				sendPacket(responseFrameSize);
    5388:	80 83       	st	Z, r24
    538a:	8b 2d       	mov	r24, r11
    538c:	fe de       	rcall	.-516    	; 0x518a <sendPacket>
    538e:	37 c0       	rjmp	.+110    	; 0x53fe <modbus_update+0x1ee>
				
			}
			
			else if (function == 16)
    5390:	20 31       	cpi	r18, 0x10	; 16
    5392:	09 f0       	breq	.+2      	; 0x5396 <modbus_update+0x186>
    5394:	34 c0       	rjmp	.+104    	; 0x53fe <modbus_update+0x1ee>
			{
				address = 7; // start at the 8th byte in the frame
				
				for (index = startingAddress; index < maxData; )
    5396:	ce 15       	cp	r28, r14
    5398:	df 05       	cpc	r29, r15
    539a:	b0 f4       	brcc	.+44     	; 0x53c8 <modbus_update+0x1b8>
    539c:	07 e0       	ldi	r16, 0x07	; 7
    539e:	10 e0       	ldi	r17, 0x00	; 0
				{
					temp = ((frame[address] << 8) | frame[address + 1]);
    53a0:	f8 01       	movw	r30, r16
    53a2:	ea 54       	subi	r30, 0x4A	; 74
    53a4:	f8 4f       	sbci	r31, 0xF8	; 248
    53a6:	80 81       	ld	r24, Z
    53a8:	f8 01       	movw	r30, r16
    53aa:	e9 54       	subi	r30, 0x49	; 73
    53ac:	f8 4f       	sbci	r31, 0xF8	; 248
    53ae:	40 81       	ld	r20, Z
					writeSysReg(&EEpromData,index,temp);
    53b0:	50 e0       	ldi	r21, 0x00	; 0
    53b2:	58 2b       	or	r21, r24
    53b4:	be 01       	movw	r22, r28
    53b6:	86 ef       	ldi	r24, 0xF6	; 246
    53b8:	98 e0       	ldi	r25, 0x08	; 8
    53ba:	f6 dd       	rcall	.-1044   	; 0x4fa8 <writeSysReg>
					address += 2;
    53bc:	0e 5f       	subi	r16, 0xFE	; 254
    53be:	1f 4f       	sbci	r17, 0xFF	; 255
					index+=10;
    53c0:	2a 96       	adiw	r28, 0x0a	; 10
			
			else if (function == 16)
			{
				address = 7; // start at the 8th byte in the frame
				
				for (index = startingAddress; index < maxData; )
    53c2:	ce 15       	cp	r28, r14
    53c4:	df 05       	cpc	r29, r15
    53c6:	60 f3       	brcs	.-40     	; 0x53a0 <modbus_update+0x190>
					temp = ((frame[address] << 8) | frame[address + 1]);
					writeSysReg(&EEpromData,index,temp);
					address += 2;
					index+=10;
				}
				portENTER_CRITICAL();
    53c8:	0f b6       	in	r0, 0x3f	; 63
    53ca:	f8 94       	cli
    53cc:	0f 92       	push	r0
				eeprom_write_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));
    53ce:	40 e6       	ldi	r20, 0x60	; 96
    53d0:	50 e0       	ldi	r21, 0x00	; 0
    53d2:	60 e0       	ldi	r22, 0x00	; 0
    53d4:	70 e0       	ldi	r23, 0x00	; 0
    53d6:	86 ef       	ldi	r24, 0xF6	; 246
    53d8:	98 e0       	ldi	r25, 0x08	; 8
    53da:	0e 94 ab 5d 	call	0xbb56	; 0xbb56 <eeprom_write_block>
				portEXIT_CRITICAL();
    53de:	0f 90       	pop	r0
				// only the first 6 bytes are used for CRC calculation
				crc16 = calculateCRC(6);
    53e0:	0f be       	out	0x3f, r0	; 63
    53e2:	86 e0       	ldi	r24, 0x06	; 6
				frame[6] = crc16 >> 8; // split crc into 2 bytes
    53e4:	a9 de       	rcall	.-686    	; 0x5138 <calculateCRC>
    53e6:	e6 eb       	ldi	r30, 0xB6	; 182
    53e8:	f7 e0       	ldi	r31, 0x07	; 7
				frame[7] = crc16 & 0xFF;
    53ea:	96 83       	std	Z+6, r25	; 0x06
				
				// a function 16 response is an echo of the first 6 bytes from the request + 2 crc bytes
				
				sendPacket(8);
    53ec:	87 83       	std	Z+7, r24	; 0x07
    53ee:	88 e0       	ldi	r24, 0x08	; 8
    53f0:	cc de       	rcall	.-616    	; 0x518a <sendPacket>
    53f2:	05 c0       	rjmp	.+10     	; 0x53fe <modbus_update+0x1ee>
	if(port_0)buffer=xSerialAvailableChar( &xSerialPort );
	else if (port_3)buffer=xSerialAvailableChar( &xSerial3Port );
	
	//avrSerialPrintf("buffer = %d \r\n",buffer );
	//avrSerialPrintf("overflow= %d \r\n",overflow);
	if (overflow){ return;}//exceptionResponse(OVERFLOW_BUFF);
    53f4:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <overflow>
    53f8:	88 23       	and	r24, r24
    53fa:	09 f4       	brne	.+2      	; 0x53fe <modbus_update+0x1ee>
    53fc:	2e cf       	rjmp	.-420    	; 0x525a <modbus_update+0x4a>
			
		}
		else {return;}// exceptionResponse(CHECKSUM_FAIL);
	}
	else {return;}//exceptionResponse(ERROR_FUNC);
}
    53fe:	df 91       	pop	r29
    5400:	cf 91       	pop	r28
    5402:	1f 91       	pop	r17
    5404:	0f 91       	pop	r16
    5406:	ff 90       	pop	r15
    5408:	ef 90       	pop	r14
    540a:	df 90       	pop	r13
    540c:	cf 90       	pop	r12
    540e:	bf 90       	pop	r11
    5410:	af 90       	pop	r10
    5412:	08 95       	ret

00005414 <StartHeatPump>:
}

//------------------------------------------------

void StartHeatPump(TimerHandle_t xTimer)
{
    5414:	8f 92       	push	r8
    5416:	9f 92       	push	r9
    5418:	af 92       	push	r10
    541a:	bf 92       	push	r11
    541c:	cf 92       	push	r12
    541e:	df 92       	push	r13
    5420:	ef 92       	push	r14
    5422:	ff 92       	push	r15
    5424:	0f 93       	push	r16
    5426:	1f 93       	push	r17
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5428:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    542c:	fc 01       	movw	r30, r24
	TickType_t period;
	period=(TickType_t)EEpromData.Compressor_delay;
    542e:	20 91 f6 08 	lds	r18, 0x08F6	; 0x8008f6 <EEpromData>
	period*=1000;
    5432:	30 e0       	ldi	r19, 0x00	; 0
    5434:	a8 ee       	ldi	r26, 0xE8	; 232
    5436:	b3 e0       	ldi	r27, 0x03	; 3
    5438:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    543c:	4b 01       	movw	r8, r22
    543e:	5c 01       	movw	r10, r24
	//xSerialxPrintf(&xSerial3Port,"StartHeatPump\r\n");
	if((*pxTimerID) == uxStartDelayHeatPTimer_1_ID) {
    5440:	80 81       	ld	r24, Z
    5442:	82 30       	cpi	r24, 0x02	; 2
    5444:	09 f0       	breq	.+2      	; 0x5448 <StartHeatPump+0x34>
    5446:	40 c0       	rjmp	.+128    	; 0x54c8 <StartHeatPump+0xb4>
		xSerialxPrintf(&xSerial3Port,"StartHeatPump_1\r\n");
    5448:	81 eb       	ldi	r24, 0xB1	; 177
    544a:	92 e0       	ldi	r25, 0x02	; 2
    544c:	9f 93       	push	r25
    544e:	8f 93       	push	r24
    5450:	84 e9       	ldi	r24, 0x94	; 148
    5452:	97 e0       	ldi	r25, 0x07	; 7
    5454:	9f 93       	push	r25
    5456:	8f 93       	push	r24
    5458:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_1 ==0)
    545c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5460:	0f 90       	pop	r0
    5462:	0f 90       	pop	r0
    5464:	0f 90       	pop	r0
    5466:	0f 90       	pop	r0
    5468:	83 fd       	sbrc	r24, 3
    546a:	70 c0       	rjmp	.+224    	; 0x554c <StartHeatPump+0x138>
		{
			
			//xSerialxPrintf(&xSerial3Port,"StartHeatPump_1\r\n");
			Comp_1.heatPOn=1;
    546c:	81 e0       	ldi	r24, 0x01	; 1
    546e:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <Comp_1+0xc>
			START_HEAT_PUMP_1;
    5472:	e2 e0       	ldi	r30, 0x02	; 2
    5474:	f1 e0       	ldi	r31, 0x01	; 1
    5476:	80 81       	ld	r24, Z
    5478:	88 60       	ori	r24, 0x08	; 8
    547a:	80 83       	st	Z, r24
			timeStartHeatP_1=time(&current_time);
    547c:	81 ef       	ldi	r24, 0xF1	; 241
    547e:	98 e0       	ldi	r25, 0x08	; 8
    5480:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5484:	60 93 62 0a 	sts	0x0A62, r22	; 0x800a62 <timeStartHeatP_1>
    5488:	70 93 63 0a 	sts	0x0A63, r23	; 0x800a63 <timeStartHeatP_1+0x1>
    548c:	80 93 64 0a 	sts	0x0A64, r24	; 0x800a64 <timeStartHeatP_1+0x2>
    5490:	90 93 65 0a 	sts	0x0A65, r25	; 0x800a65 <timeStartHeatP_1+0x3>
			EEpromData.number_turnon_hiter_1+=1;			
    5494:	e8 e3       	ldi	r30, 0x38	; 56
    5496:	f9 e0       	ldi	r31, 0x09	; 9
    5498:	80 81       	ld	r24, Z
    549a:	91 81       	ldd	r25, Z+1	; 0x01
    549c:	01 96       	adiw	r24, 0x01	; 1
    549e:	91 83       	std	Z+1, r25	; 0x01
    54a0:	80 83       	st	Z, r24
			xTimerChangePeriod( xStartCompressor_1,period, 100 );
    54a2:	0f 2e       	mov	r0, r31
    54a4:	f4 e6       	ldi	r31, 0x64	; 100
    54a6:	cf 2e       	mov	r12, r31
    54a8:	d1 2c       	mov	r13, r1
    54aa:	e1 2c       	mov	r14, r1
    54ac:	f1 2c       	mov	r15, r1
    54ae:	f0 2d       	mov	r31, r0
    54b0:	00 e0       	ldi	r16, 0x00	; 0
    54b2:	10 e0       	ldi	r17, 0x00	; 0
    54b4:	a5 01       	movw	r20, r10
    54b6:	94 01       	movw	r18, r8
    54b8:	64 e0       	ldi	r22, 0x04	; 4
    54ba:	80 91 6c 0a 	lds	r24, 0x0A6C	; 0x800a6c <xStartCompressor_1>
    54be:	90 91 6d 0a 	lds	r25, 0x0A6D	; 0x800a6d <xStartCompressor_1+0x1>
    54c2:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    54c6:	42 c0       	rjmp	.+132    	; 0x554c <StartHeatPump+0x138>
			
		}
	}

	else if((*pxTimerID) == uxStartDelayHeatPTimer_2_ID) {
    54c8:	8f 30       	cpi	r24, 0x0F	; 15
    54ca:	09 f0       	breq	.+2      	; 0x54ce <StartHeatPump+0xba>
    54cc:	3f c0       	rjmp	.+126    	; 0x554c <StartHeatPump+0x138>
		xSerialxPrintf(&xSerial3Port,"StartHeatPump_2\r\n");
    54ce:	83 ec       	ldi	r24, 0xC3	; 195
    54d0:	92 e0       	ldi	r25, 0x02	; 2
    54d2:	9f 93       	push	r25
    54d4:	8f 93       	push	r24
    54d6:	84 e9       	ldi	r24, 0x94	; 148
    54d8:	97 e0       	ldi	r25, 0x07	; 7
    54da:	9f 93       	push	r25
    54dc:	8f 93       	push	r24
    54de:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_2 == 0)
    54e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    54e6:	0f 90       	pop	r0
    54e8:	0f 90       	pop	r0
    54ea:	0f 90       	pop	r0
    54ec:	0f 90       	pop	r0
    54ee:	84 fd       	sbrc	r24, 4
    54f0:	2d c0       	rjmp	.+90     	; 0x554c <StartHeatPump+0x138>
		{
			Comp_2.heatPOn=2;
    54f2:	82 e0       	ldi	r24, 0x02	; 2
    54f4:	80 93 e8 09 	sts	0x09E8, r24	; 0x8009e8 <Comp_2+0xc>
			START_HEAT_PUMP_2;
    54f8:	e2 e0       	ldi	r30, 0x02	; 2
    54fa:	f1 e0       	ldi	r31, 0x01	; 1
    54fc:	80 81       	ld	r24, Z
    54fe:	80 61       	ori	r24, 0x10	; 16
    5500:	80 83       	st	Z, r24
			timeStartHeatP_2=time(&current_time);
    5502:	81 ef       	ldi	r24, 0xF1	; 241
    5504:	98 e0       	ldi	r25, 0x08	; 8
    5506:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    550a:	60 93 76 0a 	sts	0x0A76, r22	; 0x800a76 <timeStartHeatP_2>
    550e:	70 93 77 0a 	sts	0x0A77, r23	; 0x800a77 <timeStartHeatP_2+0x1>
    5512:	80 93 78 0a 	sts	0x0A78, r24	; 0x800a78 <timeStartHeatP_2+0x2>
    5516:	90 93 79 0a 	sts	0x0A79, r25	; 0x800a79 <timeStartHeatP_2+0x3>
			EEpromData.number_turnon_hiter_2+=1;
    551a:	ec e4       	ldi	r30, 0x4C	; 76
    551c:	f9 e0       	ldi	r31, 0x09	; 9
    551e:	80 81       	ld	r24, Z
    5520:	91 81       	ldd	r25, Z+1	; 0x01
    5522:	01 96       	adiw	r24, 0x01	; 1
    5524:	91 83       	std	Z+1, r25	; 0x01
    5526:	80 83       	st	Z, r24
			xTimerChangePeriod( xStartCompressor_2,period, 100 );
    5528:	0f 2e       	mov	r0, r31
    552a:	f4 e6       	ldi	r31, 0x64	; 100
    552c:	cf 2e       	mov	r12, r31
    552e:	d1 2c       	mov	r13, r1
    5530:	e1 2c       	mov	r14, r1
    5532:	f1 2c       	mov	r15, r1
    5534:	f0 2d       	mov	r31, r0
    5536:	00 e0       	ldi	r16, 0x00	; 0
    5538:	10 e0       	ldi	r17, 0x00	; 0
    553a:	a5 01       	movw	r20, r10
    553c:	94 01       	movw	r18, r8
    553e:	64 e0       	ldi	r22, 0x04	; 4
    5540:	80 91 7e 0a 	lds	r24, 0x0A7E	; 0x800a7e <xStartCompressor_2>
    5544:	90 91 7f 0a 	lds	r25, 0x0A7F	; 0x800a7f <xStartCompressor_2+0x1>
    5548:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		}
		
	}
}
    554c:	1f 91       	pop	r17
    554e:	0f 91       	pop	r16
    5550:	ff 90       	pop	r15
    5552:	ef 90       	pop	r14
    5554:	df 90       	pop	r13
    5556:	cf 90       	pop	r12
    5558:	bf 90       	pop	r11
    555a:	af 90       	pop	r10
    555c:	9f 90       	pop	r9
    555e:	8f 90       	pop	r8
    5560:	08 95       	ret

00005562 <SwitchRev_2_Time>:
		xTimerStart(xSwitchRevTwo_2_time, 0);
	}
}
//-------------------------------------------------------------------------
void SwitchRev_2_Time(TimerHandle_t xTimer)
{
    5562:	8f 92       	push	r8
    5564:	9f 92       	push	r9
    5566:	af 92       	push	r10
    5568:	bf 92       	push	r11
    556a:	cf 92       	push	r12
    556c:	df 92       	push	r13
    556e:	ef 92       	push	r14
    5570:	ff 92       	push	r15
    5572:	0f 93       	push	r16
    5574:	1f 93       	push	r17
    5576:	cf 93       	push	r28
    5578:	df 93       	push	r29
    557a:	ac 01       	movw	r20, r24
	portBASE_TYPE *pxTimerID;
	
	TickType_t period;
	period=(TickType_t)EEpromData.HeatingPump_delay;
    557c:	20 91 f9 08 	lds	r18, 0x08F9	; 0x8008f9 <EEpromData+0x3>
	period*=1000;
    5580:	30 e0       	ldi	r19, 0x00	; 0
    5582:	a8 ee       	ldi	r26, 0xE8	; 232
    5584:	b3 e0       	ldi	r27, 0x03	; 3
    5586:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    558a:	4b 01       	movw	r8, r22
    558c:	5c 01       	movw	r10, r24
	pxTimerID = pvTimerGetTimerID(xTimer);
    558e:	ca 01       	movw	r24, r20
    5590:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    5594:	ec 01       	movw	r28, r24
	
	//xSerialxPrintf(&xSerial3Port,"SwitchRev_2\r\n");
	
	if((*pxTimerID) == uxSwitchRevTwo_1_ID)
    5596:	88 81       	ld	r24, Y
    5598:	8d 30       	cpi	r24, 0x0D	; 13
    559a:	29 f5       	brne	.+74     	; 0x55e6 <SwitchRev_2_Time+0x84>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_ON_1_2\r\n");
    559c:	85 ed       	ldi	r24, 0xD5	; 213
    559e:	92 e0       	ldi	r25, 0x02	; 2
    55a0:	9f 93       	push	r25
    55a2:	8f 93       	push	r24
    55a4:	84 e9       	ldi	r24, 0x94	; 148
    55a6:	97 e0       	ldi	r25, 0x07	; 7
    55a8:	9f 93       	push	r25
    55aa:	8f 93       	push	r24
    55ac:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_REV_VALVE_1 == 0){START_REV_VALVE_1;}//
    55b0:	0f 90       	pop	r0
    55b2:	0f 90       	pop	r0
    55b4:	0f 90       	pop	r0
    55b6:	0f 90       	pop	r0
    55b8:	94 99       	sbic	0x12, 4	; 18
    55ba:	02 c0       	rjmp	.+4      	; 0x55c0 <SwitchRev_2_Time+0x5e>
    55bc:	a4 9a       	sbi	0x14, 4	; 20
    55be:	01 c0       	rjmp	.+2      	; 0x55c2 <SwitchRev_2_Time+0x60>
		else {STOP_REV_VALVE_1;}//xSerialxPrintf(&xSerial3Port,"SwitchRev_OFF_2\r\n");
    55c0:	a4 98       	cbi	0x14, 4	; 20
		xTimerChangePeriod( xStopHeatPump_1,period, 100 );
    55c2:	0f 2e       	mov	r0, r31
    55c4:	f4 e6       	ldi	r31, 0x64	; 100
    55c6:	cf 2e       	mov	r12, r31
    55c8:	d1 2c       	mov	r13, r1
    55ca:	e1 2c       	mov	r14, r1
    55cc:	f1 2c       	mov	r15, r1
    55ce:	f0 2d       	mov	r31, r0
    55d0:	00 e0       	ldi	r16, 0x00	; 0
    55d2:	10 e0       	ldi	r17, 0x00	; 0
    55d4:	a5 01       	movw	r20, r10
    55d6:	94 01       	movw	r18, r8
    55d8:	64 e0       	ldi	r22, 0x04	; 4
    55da:	80 91 e3 08 	lds	r24, 0x08E3	; 0x8008e3 <xStopHeatPump_1>
    55de:	90 91 e4 08 	lds	r25, 0x08E4	; 0x8008e4 <xStopHeatPump_1+0x1>
    55e2:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
	if((*pxTimerID) == uxSwitchRevTwo_2_ID)
    55e6:	88 81       	ld	r24, Y
    55e8:	89 31       	cpi	r24, 0x19	; 25
    55ea:	b9 f4       	brne	.+46     	; 0x561a <SwitchRev_2_Time+0xb8>
	{
		//xSerialxPrintf(&xSerial3Port,"SwitchRev_2_2\r\n");
		if(PIN_REV_VALVE_2 == 0) START_REV_VALVE_2;
    55ec:	93 99       	sbic	0x12, 3	; 18
    55ee:	02 c0       	rjmp	.+4      	; 0x55f4 <SwitchRev_2_Time+0x92>
    55f0:	a3 9a       	sbi	0x14, 3	; 20
    55f2:	01 c0       	rjmp	.+2      	; 0x55f6 <SwitchRev_2_Time+0x94>
		else STOP_REV_VALVE_2;
    55f4:	a3 98       	cbi	0x14, 3	; 20
		xTimerChangePeriod( xStopHeatPump_2,period, 100 );
    55f6:	0f 2e       	mov	r0, r31
    55f8:	f4 e6       	ldi	r31, 0x64	; 100
    55fa:	cf 2e       	mov	r12, r31
    55fc:	d1 2c       	mov	r13, r1
    55fe:	e1 2c       	mov	r14, r1
    5600:	f1 2c       	mov	r15, r1
    5602:	f0 2d       	mov	r31, r0
    5604:	00 e0       	ldi	r16, 0x00	; 0
    5606:	10 e0       	ldi	r17, 0x00	; 0
    5608:	a5 01       	movw	r20, r10
    560a:	94 01       	movw	r18, r8
    560c:	64 e0       	ldi	r22, 0x04	; 4
    560e:	80 91 5c 0a 	lds	r24, 0x0A5C	; 0x800a5c <xStopHeatPump_2>
    5612:	90 91 5d 0a 	lds	r25, 0x0A5D	; 0x800a5d <xStopHeatPump_2+0x1>
    5616:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
}
    561a:	df 91       	pop	r29
    561c:	cf 91       	pop	r28
    561e:	1f 91       	pop	r17
    5620:	0f 91       	pop	r16
    5622:	ff 90       	pop	r15
    5624:	ef 90       	pop	r14
    5626:	df 90       	pop	r13
    5628:	cf 90       	pop	r12
    562a:	bf 90       	pop	r11
    562c:	af 90       	pop	r10
    562e:	9f 90       	pop	r9
    5630:	8f 90       	pop	r8
    5632:	08 95       	ret

00005634 <StartCheckErrors>:
}
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------
void StartCheckErrors(TimerHandle_t xTimer)
{
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5634:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
	
	
	if((*pxTimerID) == uxStartDelayChekErrTimer_1_ID){Comp_1.countError=0; Comp_1.checkErrors=true;xSerialxPrintf(&xSerial3Port,"StartCheckErrors_1\r\n");}
    5638:	fc 01       	movw	r30, r24
    563a:	80 81       	ld	r24, Z
    563c:	87 30       	cpi	r24, 0x07	; 7
    563e:	a1 f4       	brne	.+40     	; 0x5668 <StartCheckErrors+0x34>
    5640:	e6 e5       	ldi	r30, 0x56	; 86
    5642:	f9 e0       	ldi	r31, 0x09	; 9
    5644:	11 8a       	std	Z+17, r1	; 0x11
    5646:	81 e0       	ldi	r24, 0x01	; 1
    5648:	85 83       	std	Z+5, r24	; 0x05
    564a:	88 ee       	ldi	r24, 0xE8	; 232
    564c:	92 e0       	ldi	r25, 0x02	; 2
    564e:	9f 93       	push	r25
    5650:	8f 93       	push	r24
    5652:	84 e9       	ldi	r24, 0x94	; 148
    5654:	97 e0       	ldi	r25, 0x07	; 7
    5656:	9f 93       	push	r25
    5658:	8f 93       	push	r24
    565a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    565e:	0f 90       	pop	r0
    5660:	0f 90       	pop	r0
    5662:	0f 90       	pop	r0
    5664:	0f 90       	pop	r0
    5666:	08 95       	ret
	else if((*pxTimerID) == uxStartDelayChekErrTimer_2_ID){Comp_2.countError=0;Comp_2.checkErrors=true;xSerialxPrintf(&xSerial3Port,"StartCheckErrors_2\r\n");}
    5668:	84 31       	cpi	r24, 0x14	; 20
    566a:	99 f4       	brne	.+38     	; 0x5692 <StartCheckErrors+0x5e>
    566c:	ec ed       	ldi	r30, 0xDC	; 220
    566e:	f9 e0       	ldi	r31, 0x09	; 9
    5670:	11 8a       	std	Z+17, r1	; 0x11
    5672:	81 e0       	ldi	r24, 0x01	; 1
    5674:	85 83       	std	Z+5, r24	; 0x05
    5676:	8d ef       	ldi	r24, 0xFD	; 253
    5678:	92 e0       	ldi	r25, 0x02	; 2
    567a:	9f 93       	push	r25
    567c:	8f 93       	push	r24
    567e:	84 e9       	ldi	r24, 0x94	; 148
    5680:	97 e0       	ldi	r25, 0x07	; 7
    5682:	9f 93       	push	r25
    5684:	8f 93       	push	r24
    5686:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    568a:	0f 90       	pop	r0
    568c:	0f 90       	pop	r0
    568e:	0f 90       	pop	r0
    5690:	0f 90       	pop	r0
    5692:	08 95       	ret

00005694 <StartCheckTrv>:
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------
void StartCheckTrv(TimerHandle_t xTimer)
{
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5694:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	if((*pxTimerID) == uxStartDelayChekTrvTimer_1_ID)       {Comp_1.checkTrv=true;xSerialxPrintf(&xSerial3Port,"StartCheckTrv_1\r\n");}
    5698:	fc 01       	movw	r30, r24
    569a:	80 81       	ld	r24, Z
    569c:	86 30       	cpi	r24, 0x06	; 6
    569e:	91 f4       	brne	.+36     	; 0x56c4 <StartCheckTrv+0x30>
    56a0:	81 e0       	ldi	r24, 0x01	; 1
    56a2:	80 93 57 09 	sts	0x0957, r24	; 0x800957 <Comp_1+0x1>
    56a6:	82 e1       	ldi	r24, 0x12	; 18
    56a8:	93 e0       	ldi	r25, 0x03	; 3
    56aa:	9f 93       	push	r25
    56ac:	8f 93       	push	r24
    56ae:	84 e9       	ldi	r24, 0x94	; 148
    56b0:	97 e0       	ldi	r25, 0x07	; 7
    56b2:	9f 93       	push	r25
    56b4:	8f 93       	push	r24
    56b6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    56ba:	0f 90       	pop	r0
    56bc:	0f 90       	pop	r0
    56be:	0f 90       	pop	r0
    56c0:	0f 90       	pop	r0
    56c2:	08 95       	ret
	else if((*pxTimerID) == uxStartDelayChekTrvTimer_2_ID) {Comp_2.checkTrv=true;xSerialxPrintf(&xSerial3Port,"StartCheckTrv_2\r\n");}
    56c4:	83 31       	cpi	r24, 0x13	; 19
    56c6:	89 f4       	brne	.+34     	; 0x56ea <StartCheckTrv+0x56>
    56c8:	81 e0       	ldi	r24, 0x01	; 1
    56ca:	80 93 dd 09 	sts	0x09DD, r24	; 0x8009dd <Comp_2+0x1>
    56ce:	84 e2       	ldi	r24, 0x24	; 36
    56d0:	93 e0       	ldi	r25, 0x03	; 3
    56d2:	9f 93       	push	r25
    56d4:	8f 93       	push	r24
    56d6:	84 e9       	ldi	r24, 0x94	; 148
    56d8:	97 e0       	ldi	r25, 0x07	; 7
    56da:	9f 93       	push	r25
    56dc:	8f 93       	push	r24
    56de:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    56e2:	0f 90       	pop	r0
    56e4:	0f 90       	pop	r0
    56e6:	0f 90       	pop	r0
    56e8:	0f 90       	pop	r0
    56ea:	08 95       	ret

000056ec <StartReversingValve>:
		xTimerChangePeriod( xStartRevValve_2,period, 100 );
	}
	
}
//------------------------------------------------
void StartReversingValve(TimerHandle_t xTimer){
    56ec:	8f 92       	push	r8
    56ee:	9f 92       	push	r9
    56f0:	af 92       	push	r10
    56f2:	bf 92       	push	r11
    56f4:	cf 92       	push	r12
    56f6:	df 92       	push	r13
    56f8:	ef 92       	push	r14
    56fa:	ff 92       	push	r15
    56fc:	0f 93       	push	r16
    56fe:	1f 93       	push	r17
	TickType_t period;
	static time_t time_count_1;
	static time_t time_count_2;
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5700:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
	if((*pxTimerID) == uxStartDelayRevVTimer_1_ID)
    5704:	fc 01       	movw	r30, r24
    5706:	80 81       	ld	r24, Z
    5708:	84 30       	cpi	r24, 0x04	; 4
    570a:	09 f0       	breq	.+2      	; 0x570e <StartReversingValve+0x22>
    570c:	3a c1       	rjmp	.+628    	; 0x5982 <StartReversingValve+0x296>
	{	period=(TickType_t)EEpromData.Three_Way_delay;
    570e:	20 91 fa 08 	lds	r18, 0x08FA	; 0x8008fa <EEpromData+0x4>
		period*=1000;
    5712:	30 e0       	ldi	r19, 0x00	; 0
    5714:	a8 ee       	ldi	r26, 0xE8	; 232
    5716:	b3 e0       	ldi	r27, 0x03	; 3
    5718:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
		period+=10000;
    571c:	4b 01       	movw	r8, r22
    571e:	5c 01       	movw	r10, r24
    5720:	f0 e1       	ldi	r31, 0x10	; 16
    5722:	8f 0e       	add	r8, r31
    5724:	f7 e2       	ldi	r31, 0x27	; 39
    5726:	9f 1e       	adc	r9, r31
    5728:	a1 1c       	adc	r10, r1
    572a:	b1 1c       	adc	r11, r1
		//////////////////////////////////////////

     //xSerialxPrintf(&xSerial3Port,"StartReversingValve\r\n");

		if(Comp_1.Cooling  )
    572c:	80 91 59 09 	lds	r24, 0x0959	; 0x800959 <Comp_1+0x3>
    5730:	88 23       	and	r24, r24
    5732:	09 f4       	brne	.+2      	; 0x5736 <StartReversingValve+0x4a>
    5734:	86 c0       	rjmp	.+268    	; 0x5842 <StartReversingValve+0x156>
		{
			
			if(PIN_REV_VALVE_1 >0 && EEpromData.reversMod==1){
    5736:	94 9b       	sbis	0x12, 4	; 18
    5738:	59 c0       	rjmp	.+178    	; 0x57ec <StartReversingValve+0x100>
    573a:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <EEpromData+0x28>
    573e:	81 30       	cpi	r24, 0x01	; 1
    5740:	09 f0       	breq	.+2      	; 0x5744 <StartReversingValve+0x58>
    5742:	54 c0       	rjmp	.+168    	; 0x57ec <StartReversingValve+0x100>
				
				STOP_REV_VALVE_1;//
    5744:	a4 98       	cbi	0x14, 4	; 20
				xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    5746:	86 e3       	ldi	r24, 0x36	; 54
    5748:	93 e0       	ldi	r25, 0x03	; 3
    574a:	9f 93       	push	r25
    574c:	8f 93       	push	r24
    574e:	84 e9       	ldi	r24, 0x94	; 148
    5750:	97 e0       	ldi	r25, 0x07	; 7
    5752:	9f 93       	push	r25
    5754:	8f 93       	push	r24
    5756:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_1.revVOn=0;
    575a:	10 92 64 09 	sts	0x0964, r1	; 0x800964 <Comp_1+0xe>
				time_count_1+= difftime(time(&current_time), timeStartRevV_1);
    575e:	c0 90 85 0a 	lds	r12, 0x0A85	; 0x800a85 <timeStartRevV_1>
    5762:	d0 90 86 0a 	lds	r13, 0x0A86	; 0x800a86 <timeStartRevV_1+0x1>
    5766:	e0 90 87 0a 	lds	r14, 0x0A87	; 0x800a87 <timeStartRevV_1+0x2>
    576a:	f0 90 88 0a 	lds	r15, 0x0A88	; 0x800a88 <timeStartRevV_1+0x3>
    576e:	81 ef       	ldi	r24, 0xF1	; 241
    5770:	98 e0       	ldi	r25, 0x08	; 8
    5772:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5776:	a7 01       	movw	r20, r14
    5778:	96 01       	movw	r18, r12
    577a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    577e:	c0 90 3b 07 	lds	r12, 0x073B	; 0x80073b <time_count_1.3175>
    5782:	d0 90 3c 07 	lds	r13, 0x073C	; 0x80073c <time_count_1.3175+0x1>
    5786:	e0 90 3d 07 	lds	r14, 0x073D	; 0x80073d <time_count_1.3175+0x2>
    578a:	f0 90 3e 07 	lds	r15, 0x073E	; 0x80073e <time_count_1.3175+0x3>
    578e:	dc 01       	movw	r26, r24
    5790:	cb 01       	movw	r24, r22
    5792:	8c 0d       	add	r24, r12
    5794:	9d 1d       	adc	r25, r13
    5796:	ae 1d       	adc	r26, r14
    5798:	bf 1d       	adc	r27, r15
    579a:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <time_count_1.3175>
    579e:	90 93 3c 07 	sts	0x073C, r25	; 0x80073c <time_count_1.3175+0x1>
    57a2:	a0 93 3d 07 	sts	0x073D, r26	; 0x80073d <time_count_1.3175+0x2>
    57a6:	b0 93 3e 07 	sts	0x073E, r27	; 0x80073e <time_count_1.3175+0x3>
				if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    57aa:	0f 90       	pop	r0
    57ac:	0f 90       	pop	r0
    57ae:	0f 90       	pop	r0
    57b0:	0f 90       	pop	r0
    57b2:	81 31       	cpi	r24, 0x11	; 17
    57b4:	9e 40       	sbci	r25, 0x0E	; 14
    57b6:	a1 05       	cpc	r26, r1
    57b8:	b1 05       	cpc	r27, r1
    57ba:	08 f4       	brcc	.+2      	; 0x57be <StartReversingValve+0xd2>
    57bc:	42 c0       	rjmp	.+132    	; 0x5842 <StartReversingValve+0x156>
    57be:	e6 ef       	ldi	r30, 0xF6	; 246
    57c0:	f8 e0       	ldi	r31, 0x08	; 8
    57c2:	80 ad       	ldd	r24, Z+56	; 0x38
    57c4:	91 ad       	ldd	r25, Z+57	; 0x39
    57c6:	01 96       	adiw	r24, 0x01	; 1
    57c8:	91 af       	std	Z+57, r25	; 0x39
    57ca:	80 af       	std	Z+56, r24	; 0x38
    57cc:	40 e6       	ldi	r20, 0x60	; 96
    57ce:	50 e0       	ldi	r21, 0x00	; 0
    57d0:	60 e0       	ldi	r22, 0x00	; 0
    57d2:	70 e0       	ldi	r23, 0x00	; 0
    57d4:	cf 01       	movw	r24, r30
    57d6:	0e 94 8a 5d 	call	0xbb14	; 0xbb14 <eeprom_update_block>
    57da:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <time_count_1.3175>
    57de:	10 92 3c 07 	sts	0x073C, r1	; 0x80073c <time_count_1.3175+0x1>
    57e2:	10 92 3d 07 	sts	0x073D, r1	; 0x80073d <time_count_1.3175+0x2>
    57e6:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <time_count_1.3175+0x3>
    57ea:	2b c0       	rjmp	.+86     	; 0x5842 <StartReversingValve+0x156>
				
				
			}
			else if(PIN_REV_VALVE_1 == 0 && EEpromData.reversMod==0){
    57ec:	94 99       	sbic	0x12, 4	; 18
    57ee:	29 c0       	rjmp	.+82     	; 0x5842 <StartReversingValve+0x156>
    57f0:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <EEpromData+0x28>
    57f4:	81 11       	cpse	r24, r1
    57f6:	25 c0       	rjmp	.+74     	; 0x5842 <StartReversingValve+0x156>
				START_REV_VALVE_1;
    57f8:	a4 9a       	sbi	0x14, 4	; 20
				Comp_1.revVOn=1;
    57fa:	81 e0       	ldi	r24, 0x01	; 1
    57fc:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <Comp_1+0xe>
				xSerialxPrintf(&xSerial3Port,"StarRevValve_1\r\n");
    5800:	87 e4       	ldi	r24, 0x47	; 71
    5802:	93 e0       	ldi	r25, 0x03	; 3
    5804:	9f 93       	push	r25
    5806:	8f 93       	push	r24
    5808:	84 e9       	ldi	r24, 0x94	; 148
    580a:	97 e0       	ldi	r25, 0x07	; 7
    580c:	9f 93       	push	r25
    580e:	8f 93       	push	r24
    5810:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_1=time(&current_time);
    5814:	81 ef       	ldi	r24, 0xF1	; 241
    5816:	98 e0       	ldi	r25, 0x08	; 8
    5818:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    581c:	60 93 85 0a 	sts	0x0A85, r22	; 0x800a85 <timeStartRevV_1>
    5820:	70 93 86 0a 	sts	0x0A86, r23	; 0x800a86 <timeStartRevV_1+0x1>
    5824:	80 93 87 0a 	sts	0x0A87, r24	; 0x800a87 <timeStartRevV_1+0x2>
    5828:	90 93 88 0a 	sts	0x0A88, r25	; 0x800a88 <timeStartRevV_1+0x3>
				EEpromData.number_turnon_revers_1+=1;
    582c:	ea e3       	ldi	r30, 0x3A	; 58
    582e:	f9 e0       	ldi	r31, 0x09	; 9
    5830:	80 81       	ld	r24, Z
    5832:	91 81       	ldd	r25, Z+1	; 0x01
    5834:	01 96       	adiw	r24, 0x01	; 1
    5836:	91 83       	std	Z+1, r25	; 0x01
    5838:	80 83       	st	Z, r24
    583a:	0f 90       	pop	r0
    583c:	0f 90       	pop	r0
    583e:	0f 90       	pop	r0
    5840:	0f 90       	pop	r0
			}
		}
		if(Comp_1.heatingWater || Comp_1.Heating)
    5842:	80 91 5a 09 	lds	r24, 0x095A	; 0x80095a <Comp_1+0x4>
    5846:	81 11       	cpse	r24, r1
    5848:	05 c0       	rjmp	.+10     	; 0x5854 <StartReversingValve+0x168>
    584a:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <Comp_1+0x2>
    584e:	88 23       	and	r24, r24
    5850:	09 f4       	brne	.+2      	; 0x5854 <StartReversingValve+0x168>
    5852:	84 c0       	rjmp	.+264    	; 0x595c <StartReversingValve+0x270>
		{
			
			if(PIN_REV_VALVE_1 > 0 && EEpromData.reversMod==0){//
    5854:	94 9b       	sbis	0x12, 4	; 18
    5856:	58 c0       	rjmp	.+176    	; 0x5908 <StartReversingValve+0x21c>
    5858:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <EEpromData+0x28>
    585c:	81 11       	cpse	r24, r1
    585e:	54 c0       	rjmp	.+168    	; 0x5908 <StartReversingValve+0x21c>
				
				STOP_REV_VALVE_1;
    5860:	a4 98       	cbi	0x14, 4	; 20
				
				xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    5862:	86 e3       	ldi	r24, 0x36	; 54
    5864:	93 e0       	ldi	r25, 0x03	; 3
    5866:	9f 93       	push	r25
    5868:	8f 93       	push	r24
    586a:	84 e9       	ldi	r24, 0x94	; 148
    586c:	97 e0       	ldi	r25, 0x07	; 7
    586e:	9f 93       	push	r25
    5870:	8f 93       	push	r24
    5872:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_1.revVOn=0;
    5876:	10 92 64 09 	sts	0x0964, r1	; 0x800964 <Comp_1+0xe>
				time_count_1+= difftime(time(&current_time), timeStartRevV_1);
    587a:	c0 90 85 0a 	lds	r12, 0x0A85	; 0x800a85 <timeStartRevV_1>
    587e:	d0 90 86 0a 	lds	r13, 0x0A86	; 0x800a86 <timeStartRevV_1+0x1>
    5882:	e0 90 87 0a 	lds	r14, 0x0A87	; 0x800a87 <timeStartRevV_1+0x2>
    5886:	f0 90 88 0a 	lds	r15, 0x0A88	; 0x800a88 <timeStartRevV_1+0x3>
    588a:	81 ef       	ldi	r24, 0xF1	; 241
    588c:	98 e0       	ldi	r25, 0x08	; 8
    588e:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5892:	a7 01       	movw	r20, r14
    5894:	96 01       	movw	r18, r12
    5896:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    589a:	c0 90 3b 07 	lds	r12, 0x073B	; 0x80073b <time_count_1.3175>
    589e:	d0 90 3c 07 	lds	r13, 0x073C	; 0x80073c <time_count_1.3175+0x1>
    58a2:	e0 90 3d 07 	lds	r14, 0x073D	; 0x80073d <time_count_1.3175+0x2>
    58a6:	f0 90 3e 07 	lds	r15, 0x073E	; 0x80073e <time_count_1.3175+0x3>
    58aa:	dc 01       	movw	r26, r24
    58ac:	cb 01       	movw	r24, r22
    58ae:	8c 0d       	add	r24, r12
    58b0:	9d 1d       	adc	r25, r13
    58b2:	ae 1d       	adc	r26, r14
    58b4:	bf 1d       	adc	r27, r15
    58b6:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <time_count_1.3175>
    58ba:	90 93 3c 07 	sts	0x073C, r25	; 0x80073c <time_count_1.3175+0x1>
    58be:	a0 93 3d 07 	sts	0x073D, r26	; 0x80073d <time_count_1.3175+0x2>
    58c2:	b0 93 3e 07 	sts	0x073E, r27	; 0x80073e <time_count_1.3175+0x3>
				if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    58c6:	0f 90       	pop	r0
    58c8:	0f 90       	pop	r0
    58ca:	0f 90       	pop	r0
    58cc:	0f 90       	pop	r0
    58ce:	81 31       	cpi	r24, 0x11	; 17
    58d0:	9e 40       	sbci	r25, 0x0E	; 14
    58d2:	a1 05       	cpc	r26, r1
    58d4:	b1 05       	cpc	r27, r1
    58d6:	08 f4       	brcc	.+2      	; 0x58da <StartReversingValve+0x1ee>
    58d8:	41 c0       	rjmp	.+130    	; 0x595c <StartReversingValve+0x270>
    58da:	e6 ef       	ldi	r30, 0xF6	; 246
    58dc:	f8 e0       	ldi	r31, 0x08	; 8
    58de:	80 ad       	ldd	r24, Z+56	; 0x38
    58e0:	91 ad       	ldd	r25, Z+57	; 0x39
    58e2:	01 96       	adiw	r24, 0x01	; 1
    58e4:	91 af       	std	Z+57, r25	; 0x39
    58e6:	80 af       	std	Z+56, r24	; 0x38
    58e8:	40 e6       	ldi	r20, 0x60	; 96
    58ea:	50 e0       	ldi	r21, 0x00	; 0
    58ec:	60 e0       	ldi	r22, 0x00	; 0
    58ee:	70 e0       	ldi	r23, 0x00	; 0
    58f0:	cf 01       	movw	r24, r30
    58f2:	0e 94 8a 5d 	call	0xbb14	; 0xbb14 <eeprom_update_block>
    58f6:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <time_count_1.3175>
    58fa:	10 92 3c 07 	sts	0x073C, r1	; 0x80073c <time_count_1.3175+0x1>
    58fe:	10 92 3d 07 	sts	0x073D, r1	; 0x80073d <time_count_1.3175+0x2>
    5902:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <time_count_1.3175+0x3>
    5906:	2a c0       	rjmp	.+84     	; 0x595c <StartReversingValve+0x270>
				
			}
			else if(PIN_REV_VALVE_1 == 0 && EEpromData.reversMod==1){
    5908:	94 99       	sbic	0x12, 4	; 18
    590a:	28 c0       	rjmp	.+80     	; 0x595c <StartReversingValve+0x270>
    590c:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <EEpromData+0x28>
    5910:	81 30       	cpi	r24, 0x01	; 1
    5912:	21 f5       	brne	.+72     	; 0x595c <StartReversingValve+0x270>
				START_REV_VALVE_1;
    5914:	a4 9a       	sbi	0x14, 4	; 20
				Comp_1.revVOn=1;
    5916:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <Comp_1+0xe>
				xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    591a:	86 e3       	ldi	r24, 0x36	; 54
    591c:	93 e0       	ldi	r25, 0x03	; 3
    591e:	9f 93       	push	r25
    5920:	8f 93       	push	r24
    5922:	84 e9       	ldi	r24, 0x94	; 148
    5924:	97 e0       	ldi	r25, 0x07	; 7
    5926:	9f 93       	push	r25
    5928:	8f 93       	push	r24
    592a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_1=time(&current_time);
    592e:	81 ef       	ldi	r24, 0xF1	; 241
    5930:	98 e0       	ldi	r25, 0x08	; 8
    5932:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5936:	60 93 85 0a 	sts	0x0A85, r22	; 0x800a85 <timeStartRevV_1>
    593a:	70 93 86 0a 	sts	0x0A86, r23	; 0x800a86 <timeStartRevV_1+0x1>
    593e:	80 93 87 0a 	sts	0x0A87, r24	; 0x800a87 <timeStartRevV_1+0x2>
    5942:	90 93 88 0a 	sts	0x0A88, r25	; 0x800a88 <timeStartRevV_1+0x3>
				EEpromData.number_turnon_revers_1+=1;
    5946:	ea e3       	ldi	r30, 0x3A	; 58
    5948:	f9 e0       	ldi	r31, 0x09	; 9
    594a:	80 81       	ld	r24, Z
    594c:	91 81       	ldd	r25, Z+1	; 0x01
    594e:	01 96       	adiw	r24, 0x01	; 1
    5950:	91 83       	std	Z+1, r25	; 0x01
    5952:	80 83       	st	Z, r24
    5954:	0f 90       	pop	r0
    5956:	0f 90       	pop	r0
    5958:	0f 90       	pop	r0
    595a:	0f 90       	pop	r0
			}
		}
		
		xTimerChangePeriod( xStartThreeWay,period, 100 );
    595c:	0f 2e       	mov	r0, r31
    595e:	f4 e6       	ldi	r31, 0x64	; 100
    5960:	cf 2e       	mov	r12, r31
    5962:	d1 2c       	mov	r13, r1
    5964:	e1 2c       	mov	r14, r1
    5966:	f1 2c       	mov	r15, r1
    5968:	f0 2d       	mov	r31, r0
    596a:	00 e0       	ldi	r16, 0x00	; 0
    596c:	10 e0       	ldi	r17, 0x00	; 0
    596e:	a5 01       	movw	r20, r10
    5970:	94 01       	movw	r18, r8
    5972:	64 e0       	ldi	r22, 0x04	; 4
    5974:	80 91 ca 09 	lds	r24, 0x09CA	; 0x8009ca <xStartThreeWay>
    5978:	90 91 cb 09 	lds	r25, 0x09CB	; 0x8009cb <xStartThreeWay+0x1>
    597c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    5980:	34 c1       	rjmp	.+616    	; 0x5bea <StartReversingValve+0x4fe>
		
	}
	else if((*pxTimerID) == uxStartDelayRevVTimer_2_ID)
    5982:	81 31       	cpi	r24, 0x11	; 17
    5984:	09 f0       	breq	.+2      	; 0x5988 <StartReversingValve+0x29c>
    5986:	31 c1       	rjmp	.+610    	; 0x5bea <StartReversingValve+0x4fe>
	{
		period=(TickType_t)EEpromData.HeatingPump_delay;
    5988:	20 91 f9 08 	lds	r18, 0x08F9	; 0x8008f9 <EEpromData+0x3>
		period*=1000;
    598c:	30 e0       	ldi	r19, 0x00	; 0
    598e:	a8 ee       	ldi	r26, 0xE8	; 232
    5990:	b3 e0       	ldi	r27, 0x03	; 3
    5992:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    5996:	4b 01       	movw	r8, r22
    5998:	5c 01       	movw	r10, r24
		
		if(Comp_2.Cooling)
    599a:	80 91 df 09 	lds	r24, 0x09DF	; 0x8009df <Comp_2+0x3>
    599e:	88 23       	and	r24, r24
    59a0:	09 f4       	brne	.+2      	; 0x59a4 <StartReversingValve+0x2b8>
    59a2:	87 c0       	rjmp	.+270    	; 0x5ab2 <StartReversingValve+0x3c6>
		{
			if(PIN_REV_VALVE_2 >0 && EEpromData.reversMod==1){
    59a4:	93 9b       	sbis	0x12, 3	; 18
    59a6:	5a c0       	rjmp	.+180    	; 0x5a5c <StartReversingValve+0x370>
    59a8:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <EEpromData+0x28>
    59ac:	81 30       	cpi	r24, 0x01	; 1
    59ae:	09 f0       	breq	.+2      	; 0x59b2 <StartReversingValve+0x2c6>
    59b0:	55 c0       	rjmp	.+170    	; 0x5a5c <StartReversingValve+0x370>
				
				STOP_REV_VALVE_2;//
    59b2:	a3 98       	cbi	0x14, 3	; 20
				
				xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    59b4:	88 e5       	ldi	r24, 0x58	; 88
    59b6:	93 e0       	ldi	r25, 0x03	; 3
    59b8:	9f 93       	push	r25
    59ba:	8f 93       	push	r24
    59bc:	84 e9       	ldi	r24, 0x94	; 148
    59be:	97 e0       	ldi	r25, 0x07	; 7
    59c0:	9f 93       	push	r25
    59c2:	8f 93       	push	r24
    59c4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_2.revVOn=0;
    59c8:	10 92 ea 09 	sts	0x09EA, r1	; 0x8009ea <Comp_2+0xe>
				time_count_2+= difftime(time(&current_time), timeStartRevV_2);
    59cc:	c0 90 a0 0a 	lds	r12, 0x0AA0	; 0x800aa0 <timeStartRevV_2>
    59d0:	d0 90 a1 0a 	lds	r13, 0x0AA1	; 0x800aa1 <timeStartRevV_2+0x1>
    59d4:	e0 90 a2 0a 	lds	r14, 0x0AA2	; 0x800aa2 <timeStartRevV_2+0x2>
    59d8:	f0 90 a3 0a 	lds	r15, 0x0AA3	; 0x800aa3 <timeStartRevV_2+0x3>
    59dc:	81 ef       	ldi	r24, 0xF1	; 241
    59de:	98 e0       	ldi	r25, 0x08	; 8
    59e0:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    59e4:	a7 01       	movw	r20, r14
    59e6:	96 01       	movw	r18, r12
    59e8:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    59ec:	c0 90 37 07 	lds	r12, 0x0737	; 0x800737 <time_count_2.3176>
    59f0:	d0 90 38 07 	lds	r13, 0x0738	; 0x800738 <time_count_2.3176+0x1>
    59f4:	e0 90 39 07 	lds	r14, 0x0739	; 0x800739 <time_count_2.3176+0x2>
    59f8:	f0 90 3a 07 	lds	r15, 0x073A	; 0x80073a <time_count_2.3176+0x3>
    59fc:	dc 01       	movw	r26, r24
    59fe:	cb 01       	movw	r24, r22
    5a00:	8c 0d       	add	r24, r12
    5a02:	9d 1d       	adc	r25, r13
    5a04:	ae 1d       	adc	r26, r14
    5a06:	bf 1d       	adc	r27, r15
    5a08:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <time_count_2.3176>
    5a0c:	90 93 38 07 	sts	0x0738, r25	; 0x800738 <time_count_2.3176+0x1>
    5a10:	a0 93 39 07 	sts	0x0739, r26	; 0x800739 <time_count_2.3176+0x2>
    5a14:	b0 93 3a 07 	sts	0x073A, r27	; 0x80073a <time_count_2.3176+0x3>
				if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    5a18:	0f 90       	pop	r0
    5a1a:	0f 90       	pop	r0
    5a1c:	0f 90       	pop	r0
    5a1e:	0f 90       	pop	r0
    5a20:	81 31       	cpi	r24, 0x11	; 17
    5a22:	9e 40       	sbci	r25, 0x0E	; 14
    5a24:	a1 05       	cpc	r26, r1
    5a26:	b1 05       	cpc	r27, r1
    5a28:	08 f4       	brcc	.+2      	; 0x5a2c <StartReversingValve+0x340>
    5a2a:	43 c0       	rjmp	.+134    	; 0x5ab2 <StartReversingValve+0x3c6>
    5a2c:	e4 e4       	ldi	r30, 0x44	; 68
    5a2e:	f9 e0       	ldi	r31, 0x09	; 9
    5a30:	80 81       	ld	r24, Z
    5a32:	91 81       	ldd	r25, Z+1	; 0x01
    5a34:	01 96       	adiw	r24, 0x01	; 1
    5a36:	91 83       	std	Z+1, r25	; 0x01
    5a38:	80 83       	st	Z, r24
    5a3a:	40 e6       	ldi	r20, 0x60	; 96
    5a3c:	50 e0       	ldi	r21, 0x00	; 0
    5a3e:	60 e0       	ldi	r22, 0x00	; 0
    5a40:	70 e0       	ldi	r23, 0x00	; 0
    5a42:	86 ef       	ldi	r24, 0xF6	; 246
    5a44:	98 e0       	ldi	r25, 0x08	; 8
    5a46:	0e 94 8a 5d 	call	0xbb14	; 0xbb14 <eeprom_update_block>
    5a4a:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <time_count_2.3176>
    5a4e:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <time_count_2.3176+0x1>
    5a52:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <time_count_2.3176+0x2>
    5a56:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <time_count_2.3176+0x3>
    5a5a:	2b c0       	rjmp	.+86     	; 0x5ab2 <StartReversingValve+0x3c6>
				
				
			}
			else if(PIN_REV_VALVE_2 == 0 && EEpromData.reversMod==0){
    5a5c:	93 99       	sbic	0x12, 3	; 18
    5a5e:	29 c0       	rjmp	.+82     	; 0x5ab2 <StartReversingValve+0x3c6>
    5a60:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <EEpromData+0x28>
    5a64:	81 11       	cpse	r24, r1
    5a66:	25 c0       	rjmp	.+74     	; 0x5ab2 <StartReversingValve+0x3c6>
				START_REV_VALVE_2;
    5a68:	a3 9a       	sbi	0x14, 3	; 20
				Comp_1.revVOn=1;
    5a6a:	81 e0       	ldi	r24, 0x01	; 1
    5a6c:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <Comp_1+0xe>
				xSerialxPrintf(&xSerial3Port,"StarRevValve_2\r\n");
    5a70:	89 e6       	ldi	r24, 0x69	; 105
    5a72:	93 e0       	ldi	r25, 0x03	; 3
    5a74:	9f 93       	push	r25
    5a76:	8f 93       	push	r24
    5a78:	84 e9       	ldi	r24, 0x94	; 148
    5a7a:	97 e0       	ldi	r25, 0x07	; 7
    5a7c:	9f 93       	push	r25
    5a7e:	8f 93       	push	r24
    5a80:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_2=time(&current_time);
    5a84:	81 ef       	ldi	r24, 0xF1	; 241
    5a86:	98 e0       	ldi	r25, 0x08	; 8
    5a88:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5a8c:	60 93 a0 0a 	sts	0x0AA0, r22	; 0x800aa0 <timeStartRevV_2>
    5a90:	70 93 a1 0a 	sts	0x0AA1, r23	; 0x800aa1 <timeStartRevV_2+0x1>
    5a94:	80 93 a2 0a 	sts	0x0AA2, r24	; 0x800aa2 <timeStartRevV_2+0x2>
    5a98:	90 93 a3 0a 	sts	0x0AA3, r25	; 0x800aa3 <timeStartRevV_2+0x3>
				EEpromData.number_turnon_revers_2+=1;
    5a9c:	ee e4       	ldi	r30, 0x4E	; 78
    5a9e:	f9 e0       	ldi	r31, 0x09	; 9
    5aa0:	80 81       	ld	r24, Z
    5aa2:	91 81       	ldd	r25, Z+1	; 0x01
    5aa4:	01 96       	adiw	r24, 0x01	; 1
    5aa6:	91 83       	std	Z+1, r25	; 0x01
    5aa8:	80 83       	st	Z, r24
    5aaa:	0f 90       	pop	r0
    5aac:	0f 90       	pop	r0
    5aae:	0f 90       	pop	r0
    5ab0:	0f 90       	pop	r0
			}
		}
		if(Comp_2.Heating)
    5ab2:	80 91 de 09 	lds	r24, 0x09DE	; 0x8009de <Comp_2+0x2>
    5ab6:	88 23       	and	r24, r24
    5ab8:	09 f4       	brne	.+2      	; 0x5abc <StartReversingValve+0x3d0>
    5aba:	85 c0       	rjmp	.+266    	; 0x5bc6 <StartReversingValve+0x4da>
		{
			if(PIN_REV_VALVE_2 > 0 && EEpromData.reversMod==0){//
    5abc:	93 9b       	sbis	0x12, 3	; 18
    5abe:	59 c0       	rjmp	.+178    	; 0x5b72 <StartReversingValve+0x486>
    5ac0:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <EEpromData+0x28>
    5ac4:	81 11       	cpse	r24, r1
    5ac6:	55 c0       	rjmp	.+170    	; 0x5b72 <StartReversingValve+0x486>
				
				STOP_REV_VALVE_2;
    5ac8:	a3 98       	cbi	0x14, 3	; 20
				
				xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    5aca:	88 e5       	ldi	r24, 0x58	; 88
    5acc:	93 e0       	ldi	r25, 0x03	; 3
    5ace:	9f 93       	push	r25
    5ad0:	8f 93       	push	r24
    5ad2:	84 e9       	ldi	r24, 0x94	; 148
    5ad4:	97 e0       	ldi	r25, 0x07	; 7
    5ad6:	9f 93       	push	r25
    5ad8:	8f 93       	push	r24
    5ada:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_2.revVOn=0;
    5ade:	10 92 ea 09 	sts	0x09EA, r1	; 0x8009ea <Comp_2+0xe>
				time_count_2+= difftime(time(&current_time), timeStartRevV_2);
    5ae2:	c0 90 a0 0a 	lds	r12, 0x0AA0	; 0x800aa0 <timeStartRevV_2>
    5ae6:	d0 90 a1 0a 	lds	r13, 0x0AA1	; 0x800aa1 <timeStartRevV_2+0x1>
    5aea:	e0 90 a2 0a 	lds	r14, 0x0AA2	; 0x800aa2 <timeStartRevV_2+0x2>
    5aee:	f0 90 a3 0a 	lds	r15, 0x0AA3	; 0x800aa3 <timeStartRevV_2+0x3>
    5af2:	81 ef       	ldi	r24, 0xF1	; 241
    5af4:	98 e0       	ldi	r25, 0x08	; 8
    5af6:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5afa:	a7 01       	movw	r20, r14
    5afc:	96 01       	movw	r18, r12
    5afe:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5b02:	c0 90 37 07 	lds	r12, 0x0737	; 0x800737 <time_count_2.3176>
    5b06:	d0 90 38 07 	lds	r13, 0x0738	; 0x800738 <time_count_2.3176+0x1>
    5b0a:	e0 90 39 07 	lds	r14, 0x0739	; 0x800739 <time_count_2.3176+0x2>
    5b0e:	f0 90 3a 07 	lds	r15, 0x073A	; 0x80073a <time_count_2.3176+0x3>
    5b12:	dc 01       	movw	r26, r24
    5b14:	cb 01       	movw	r24, r22
    5b16:	8c 0d       	add	r24, r12
    5b18:	9d 1d       	adc	r25, r13
    5b1a:	ae 1d       	adc	r26, r14
    5b1c:	bf 1d       	adc	r27, r15
    5b1e:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <time_count_2.3176>
    5b22:	90 93 38 07 	sts	0x0738, r25	; 0x800738 <time_count_2.3176+0x1>
    5b26:	a0 93 39 07 	sts	0x0739, r26	; 0x800739 <time_count_2.3176+0x2>
    5b2a:	b0 93 3a 07 	sts	0x073A, r27	; 0x80073a <time_count_2.3176+0x3>
				if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    5b2e:	0f 90       	pop	r0
    5b30:	0f 90       	pop	r0
    5b32:	0f 90       	pop	r0
    5b34:	0f 90       	pop	r0
    5b36:	81 31       	cpi	r24, 0x11	; 17
    5b38:	9e 40       	sbci	r25, 0x0E	; 14
    5b3a:	a1 05       	cpc	r26, r1
    5b3c:	b1 05       	cpc	r27, r1
    5b3e:	08 f4       	brcc	.+2      	; 0x5b42 <StartReversingValve+0x456>
    5b40:	42 c0       	rjmp	.+132    	; 0x5bc6 <StartReversingValve+0x4da>
    5b42:	e4 e4       	ldi	r30, 0x44	; 68
    5b44:	f9 e0       	ldi	r31, 0x09	; 9
    5b46:	80 81       	ld	r24, Z
    5b48:	91 81       	ldd	r25, Z+1	; 0x01
    5b4a:	01 96       	adiw	r24, 0x01	; 1
    5b4c:	91 83       	std	Z+1, r25	; 0x01
    5b4e:	80 83       	st	Z, r24
    5b50:	40 e6       	ldi	r20, 0x60	; 96
    5b52:	50 e0       	ldi	r21, 0x00	; 0
    5b54:	60 e0       	ldi	r22, 0x00	; 0
    5b56:	70 e0       	ldi	r23, 0x00	; 0
    5b58:	86 ef       	ldi	r24, 0xF6	; 246
    5b5a:	98 e0       	ldi	r25, 0x08	; 8
    5b5c:	0e 94 8a 5d 	call	0xbb14	; 0xbb14 <eeprom_update_block>
    5b60:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <time_count_2.3176>
    5b64:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <time_count_2.3176+0x1>
    5b68:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <time_count_2.3176+0x2>
    5b6c:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <time_count_2.3176+0x3>
    5b70:	2a c0       	rjmp	.+84     	; 0x5bc6 <StartReversingValve+0x4da>
				
			}
			else if(PIN_REV_VALVE_2 == 0 && EEpromData.reversMod==1){
    5b72:	93 99       	sbic	0x12, 3	; 18
    5b74:	28 c0       	rjmp	.+80     	; 0x5bc6 <StartReversingValve+0x4da>
    5b76:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <EEpromData+0x28>
    5b7a:	81 30       	cpi	r24, 0x01	; 1
    5b7c:	21 f5       	brne	.+72     	; 0x5bc6 <StartReversingValve+0x4da>
				START_REV_VALVE_2;
    5b7e:	a3 9a       	sbi	0x14, 3	; 20
				Comp_2.revVOn=1;
    5b80:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <Comp_2+0xe>
				xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    5b84:	88 e5       	ldi	r24, 0x58	; 88
    5b86:	93 e0       	ldi	r25, 0x03	; 3
    5b88:	9f 93       	push	r25
    5b8a:	8f 93       	push	r24
    5b8c:	84 e9       	ldi	r24, 0x94	; 148
    5b8e:	97 e0       	ldi	r25, 0x07	; 7
    5b90:	9f 93       	push	r25
    5b92:	8f 93       	push	r24
    5b94:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_2=time(&current_time);
    5b98:	81 ef       	ldi	r24, 0xF1	; 241
    5b9a:	98 e0       	ldi	r25, 0x08	; 8
    5b9c:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5ba0:	60 93 a0 0a 	sts	0x0AA0, r22	; 0x800aa0 <timeStartRevV_2>
    5ba4:	70 93 a1 0a 	sts	0x0AA1, r23	; 0x800aa1 <timeStartRevV_2+0x1>
    5ba8:	80 93 a2 0a 	sts	0x0AA2, r24	; 0x800aa2 <timeStartRevV_2+0x2>
    5bac:	90 93 a3 0a 	sts	0x0AA3, r25	; 0x800aa3 <timeStartRevV_2+0x3>
				EEpromData.number_turnon_revers_2+=1;
    5bb0:	ee e4       	ldi	r30, 0x4E	; 78
    5bb2:	f9 e0       	ldi	r31, 0x09	; 9
    5bb4:	80 81       	ld	r24, Z
    5bb6:	91 81       	ldd	r25, Z+1	; 0x01
    5bb8:	01 96       	adiw	r24, 0x01	; 1
    5bba:	91 83       	std	Z+1, r25	; 0x01
    5bbc:	80 83       	st	Z, r24
    5bbe:	0f 90       	pop	r0
    5bc0:	0f 90       	pop	r0
    5bc2:	0f 90       	pop	r0
    5bc4:	0f 90       	pop	r0
			}
		}

		xTimerChangePeriod( xStartHeatPump_2,period, 100 );
    5bc6:	0f 2e       	mov	r0, r31
    5bc8:	f4 e6       	ldi	r31, 0x64	; 100
    5bca:	cf 2e       	mov	r12, r31
    5bcc:	d1 2c       	mov	r13, r1
    5bce:	e1 2c       	mov	r14, r1
    5bd0:	f1 2c       	mov	r15, r1
    5bd2:	f0 2d       	mov	r31, r0
    5bd4:	00 e0       	ldi	r16, 0x00	; 0
    5bd6:	10 e0       	ldi	r17, 0x00	; 0
    5bd8:	a5 01       	movw	r20, r10
    5bda:	94 01       	movw	r18, r8
    5bdc:	64 e0       	ldi	r22, 0x04	; 4
    5bde:	80 91 cc 09 	lds	r24, 0x09CC	; 0x8009cc <xStartHeatPump_2>
    5be2:	90 91 cd 09 	lds	r25, 0x09CD	; 0x8009cd <xStartHeatPump_2+0x1>
    5be6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}


}
    5bea:	1f 91       	pop	r17
    5bec:	0f 91       	pop	r16
    5bee:	ff 90       	pop	r15
    5bf0:	ef 90       	pop	r14
    5bf2:	df 90       	pop	r13
    5bf4:	cf 90       	pop	r12
    5bf6:	bf 90       	pop	r11
    5bf8:	af 90       	pop	r10
    5bfa:	9f 90       	pop	r9
    5bfc:	8f 90       	pop	r8
    5bfe:	08 95       	ret

00005c00 <StartThreeWay>:
//------------------------------------------------
void StartThreeWay()
{
    5c00:	8f 92       	push	r8
    5c02:	9f 92       	push	r9
    5c04:	af 92       	push	r10
    5c06:	bf 92       	push	r11
    5c08:	cf 92       	push	r12
    5c0a:	df 92       	push	r13
    5c0c:	ef 92       	push	r14
    5c0e:	ff 92       	push	r15
    5c10:	0f 93       	push	r16
    5c12:	1f 93       	push	r17
	static time_t time_count;
    TickType_t period;
	
	
	period=(TickType_t)EEpromData.HeatingPump_delay;
    5c14:	20 91 f9 08 	lds	r18, 0x08F9	; 0x8008f9 <EEpromData+0x3>
	period*=1000;
    5c18:	30 e0       	ldi	r19, 0x00	; 0
    5c1a:	a8 ee       	ldi	r26, 0xE8	; 232
    5c1c:	b3 e0       	ldi	r27, 0x03	; 3
    5c1e:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    5c22:	4b 01       	movw	r8, r22
    5c24:	5c 01       	movw	r10, r24
	xSerialxPrintf(&xSerial3Port,"StartThreeWay\r\n");
    5c26:	8a e7       	ldi	r24, 0x7A	; 122
    5c28:	93 e0       	ldi	r25, 0x03	; 3
    5c2a:	9f 93       	push	r25
    5c2c:	8f 93       	push	r24
    5c2e:	84 e9       	ldi	r24, 0x94	; 148
    5c30:	97 e0       	ldi	r25, 0x07	; 7
    5c32:	9f 93       	push	r25
    5c34:	8f 93       	push	r24
    5c36:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(Comp_1.heatingWater)
    5c3a:	0f 90       	pop	r0
    5c3c:	0f 90       	pop	r0
    5c3e:	0f 90       	pop	r0
    5c40:	0f 90       	pop	r0
    5c42:	80 91 5a 09 	lds	r24, 0x095A	; 0x80095a <Comp_1+0x4>
    5c46:	88 23       	and	r24, r24
    5c48:	71 f1       	breq	.+92     	; 0x5ca6 <StartThreeWay+0xa6>
	{
		
		if(PIN_THWAY_VALVE == 0)//
    5c4a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5c4e:	88 23       	and	r24, r24
    5c50:	e4 f0       	brlt	.+56     	; 0x5c8a <StartThreeWay+0x8a>
		{
			START_THWAY_VALVE;
    5c52:	e2 e0       	ldi	r30, 0x02	; 2
    5c54:	f1 e0       	ldi	r31, 0x01	; 1
    5c56:	80 81       	ld	r24, Z
    5c58:	80 68       	ori	r24, 0x80	; 128
    5c5a:	80 83       	st	Z, r24
			
			//xSerialxPrintf(&xSerial3Port,"StartThreeWay\r\n");
			Comp_1.threeWOn=1;
    5c5c:	81 e0       	ldi	r24, 0x01	; 1
    5c5e:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <Comp_1+0xd>
			timeStartThreeW=time(&current_time);
    5c62:	81 ef       	ldi	r24, 0xF1	; 241
    5c64:	98 e0       	ldi	r25, 0x08	; 8
    5c66:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5c6a:	60 93 7a 0a 	sts	0x0A7A, r22	; 0x800a7a <timeStartThreeW>
    5c6e:	70 93 7b 0a 	sts	0x0A7B, r23	; 0x800a7b <timeStartThreeW+0x1>
    5c72:	80 93 7c 0a 	sts	0x0A7C, r24	; 0x800a7c <timeStartThreeW+0x2>
    5c76:	90 93 7d 0a 	sts	0x0A7D, r25	; 0x800a7d <timeStartThreeW+0x3>
			EEpromData.number_turnon_threeway+=1;
    5c7a:	ec e3       	ldi	r30, 0x3C	; 60
    5c7c:	f9 e0       	ldi	r31, 0x09	; 9
    5c7e:	80 81       	ld	r24, Z
    5c80:	91 81       	ldd	r25, Z+1	; 0x01
    5c82:	01 96       	adiw	r24, 0x01	; 1
    5c84:	91 83       	std	Z+1, r25	; 0x01
    5c86:	80 83       	st	Z, r24
    5c88:	0e c0       	rjmp	.+28     	; 0x5ca6 <StartThreeWay+0xa6>
			
		} else xSerialxPrintf(&xSerial3Port,"StopThreeWay\r\n");
    5c8a:	8a e8       	ldi	r24, 0x8A	; 138
    5c8c:	93 e0       	ldi	r25, 0x03	; 3
    5c8e:	9f 93       	push	r25
    5c90:	8f 93       	push	r24
    5c92:	84 e9       	ldi	r24, 0x94	; 148
    5c94:	97 e0       	ldi	r25, 0x07	; 7
    5c96:	9f 93       	push	r25
    5c98:	8f 93       	push	r24
    5c9a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    5c9e:	0f 90       	pop	r0
    5ca0:	0f 90       	pop	r0
    5ca2:	0f 90       	pop	r0
    5ca4:	0f 90       	pop	r0
	}
	if(Comp_1.Heating || Comp_1.Cooling)
    5ca6:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <Comp_1+0x2>
    5caa:	81 11       	cpse	r24, r1
    5cac:	05 c0       	rjmp	.+10     	; 0x5cb8 <StartThreeWay+0xb8>
    5cae:	80 91 59 09 	lds	r24, 0x0959	; 0x800959 <Comp_1+0x3>
    5cb2:	88 23       	and	r24, r24
    5cb4:	09 f4       	brne	.+2      	; 0x5cb8 <StartThreeWay+0xb8>
    5cb6:	4d c0       	rjmp	.+154    	; 0x5d52 <StartThreeWay+0x152>
	{
		if(PIN_THWAY_VALVE > 0)//
    5cb8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5cbc:	88 23       	and	r24, r24
    5cbe:	0c f0       	brlt	.+2      	; 0x5cc2 <StartThreeWay+0xc2>
    5cc0:	48 c0       	rjmp	.+144    	; 0x5d52 <StartThreeWay+0x152>
		{
			STOP_THWAY_VALVE;
    5cc2:	e2 e0       	ldi	r30, 0x02	; 2
    5cc4:	f1 e0       	ldi	r31, 0x01	; 1
    5cc6:	80 81       	ld	r24, Z
    5cc8:	8f 77       	andi	r24, 0x7F	; 127
    5cca:	80 83       	st	Z, r24
			
			//xSerialxPrintf(&xSerial3Port,"StopThreeWay\r\n");
			Comp_1.threeWOn=0;
    5ccc:	10 92 63 09 	sts	0x0963, r1	; 0x800963 <Comp_1+0xd>
			time_count+= difftime(time(&current_time), timeStartThreeW);
    5cd0:	c0 90 7a 0a 	lds	r12, 0x0A7A	; 0x800a7a <timeStartThreeW>
    5cd4:	d0 90 7b 0a 	lds	r13, 0x0A7B	; 0x800a7b <timeStartThreeW+0x1>
    5cd8:	e0 90 7c 0a 	lds	r14, 0x0A7C	; 0x800a7c <timeStartThreeW+0x2>
    5cdc:	f0 90 7d 0a 	lds	r15, 0x0A7D	; 0x800a7d <timeStartThreeW+0x3>
    5ce0:	81 ef       	ldi	r24, 0xF1	; 241
    5ce2:	98 e0       	ldi	r25, 0x08	; 8
    5ce4:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5ce8:	a7 01       	movw	r20, r14
    5cea:	96 01       	movw	r18, r12
    5cec:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5cf0:	c0 90 33 07 	lds	r12, 0x0733	; 0x800733 <time_count.3180>
    5cf4:	d0 90 34 07 	lds	r13, 0x0734	; 0x800734 <time_count.3180+0x1>
    5cf8:	e0 90 35 07 	lds	r14, 0x0735	; 0x800735 <time_count.3180+0x2>
    5cfc:	f0 90 36 07 	lds	r15, 0x0736	; 0x800736 <time_count.3180+0x3>
    5d00:	dc 01       	movw	r26, r24
    5d02:	cb 01       	movw	r24, r22
    5d04:	8c 0d       	add	r24, r12
    5d06:	9d 1d       	adc	r25, r13
    5d08:	ae 1d       	adc	r26, r14
    5d0a:	bf 1d       	adc	r27, r15
    5d0c:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <time_count.3180>
    5d10:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <time_count.3180+0x1>
    5d14:	a0 93 35 07 	sts	0x0735, r26	; 0x800735 <time_count.3180+0x2>
    5d18:	b0 93 36 07 	sts	0x0736, r27	; 0x800736 <time_count.3180+0x3>
			if(time_count>ONE_HOUR){EEpromData.time_threeway++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count=0;}
    5d1c:	81 31       	cpi	r24, 0x11	; 17
    5d1e:	9e 40       	sbci	r25, 0x0E	; 14
    5d20:	a1 05       	cpc	r26, r1
    5d22:	b1 05       	cpc	r27, r1
    5d24:	b0 f0       	brcs	.+44     	; 0x5d52 <StartThreeWay+0x152>
    5d26:	e6 ef       	ldi	r30, 0xF6	; 246
    5d28:	f8 e0       	ldi	r31, 0x08	; 8
    5d2a:	84 ad       	ldd	r24, Z+60	; 0x3c
    5d2c:	95 ad       	ldd	r25, Z+61	; 0x3d
    5d2e:	01 96       	adiw	r24, 0x01	; 1
    5d30:	95 af       	std	Z+61, r25	; 0x3d
    5d32:	84 af       	std	Z+60, r24	; 0x3c
    5d34:	40 e6       	ldi	r20, 0x60	; 96
    5d36:	50 e0       	ldi	r21, 0x00	; 0
    5d38:	60 e0       	ldi	r22, 0x00	; 0
    5d3a:	70 e0       	ldi	r23, 0x00	; 0
    5d3c:	cf 01       	movw	r24, r30
    5d3e:	0e 94 8a 5d 	call	0xbb14	; 0xbb14 <eeprom_update_block>
    5d42:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <time_count.3180>
    5d46:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <time_count.3180+0x1>
    5d4a:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <time_count.3180+0x2>
    5d4e:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <time_count.3180+0x3>
		}
	}
	
	xTimerChangePeriod( xStartHeatPump_1,period, 100 );
    5d52:	0f 2e       	mov	r0, r31
    5d54:	f4 e6       	ldi	r31, 0x64	; 100
    5d56:	cf 2e       	mov	r12, r31
    5d58:	d1 2c       	mov	r13, r1
    5d5a:	e1 2c       	mov	r14, r1
    5d5c:	f1 2c       	mov	r15, r1
    5d5e:	f0 2d       	mov	r31, r0
    5d60:	00 e0       	ldi	r16, 0x00	; 0
    5d62:	10 e0       	ldi	r17, 0x00	; 0
    5d64:	a5 01       	movw	r20, r10
    5d66:	94 01       	movw	r18, r8
    5d68:	64 e0       	ldi	r22, 0x04	; 4
    5d6a:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <xStartHeatPump_1>
    5d6e:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <xStartHeatPump_1+0x1>
    5d72:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	
}
    5d76:	1f 91       	pop	r17
    5d78:	0f 91       	pop	r16
    5d7a:	ff 90       	pop	r15
    5d7c:	ef 90       	pop	r14
    5d7e:	df 90       	pop	r13
    5d80:	cf 90       	pop	r12
    5d82:	bf 90       	pop	r11
    5d84:	af 90       	pop	r10
    5d86:	9f 90       	pop	r9
    5d88:	8f 90       	pop	r8
    5d8a:	08 95       	ret

00005d8c <HeatPump_Stop>:
		
	}
}
//-------------------------------------------------------------------------
void HeatPump_Stop(TimerHandle_t xTimer)
{
    5d8c:	8f 92       	push	r8
    5d8e:	9f 92       	push	r9
    5d90:	af 92       	push	r10
    5d92:	bf 92       	push	r11
    5d94:	cf 92       	push	r12
    5d96:	df 92       	push	r13
    5d98:	ef 92       	push	r14
    5d9a:	ff 92       	push	r15
    5d9c:	0f 93       	push	r16
    5d9e:	1f 93       	push	r17
	
	TickType_t period;
	
	//xSerialxPrintf(&xSerial3Port,"StopHeatPump\r\n");
	
	pxTimerID = pvTimerGetTimerID(xTimer);
    5da0:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>

	if((*pxTimerID) == uxStopDelayHeatPTimer_1_ID)
    5da4:	fc 01       	movw	r30, r24
    5da6:	80 81       	ld	r24, Z
    5da8:	88 30       	cpi	r24, 0x08	; 8
    5daa:	09 f0       	breq	.+2      	; 0x5dae <HeatPump_Stop+0x22>
    5dac:	76 c0       	rjmp	.+236    	; 0x5e9a <HeatPump_Stop+0x10e>
	{
		period=(TickType_t)EEpromData.Three_Way_delay;
    5dae:	20 91 fa 08 	lds	r18, 0x08FA	; 0x8008fa <EEpromData+0x4>
		period*=1000;
    5db2:	30 e0       	ldi	r19, 0x00	; 0
    5db4:	a8 ee       	ldi	r26, 0xE8	; 232
    5db6:	b3 e0       	ldi	r27, 0x03	; 3
    5db8:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    5dbc:	4b 01       	movw	r8, r22
    5dbe:	5c 01       	movw	r10, r24
		
		if(PIN_HEAT_PUMP_1 > 0)//
    5dc0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5dc4:	83 ff       	sbrs	r24, 3
    5dc6:	56 c0       	rjmp	.+172    	; 0x5e74 <HeatPump_Stop+0xe8>
		{
			STOP_HEAT_PUMP_1;
    5dc8:	e2 e0       	ldi	r30, 0x02	; 2
    5dca:	f1 e0       	ldi	r31, 0x01	; 1
    5dcc:	80 81       	ld	r24, Z
    5dce:	87 7f       	andi	r24, 0xF7	; 247
    5dd0:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopHeatPump_1\r\n");
    5dd2:	89 e9       	ldi	r24, 0x99	; 153
    5dd4:	93 e0       	ldi	r25, 0x03	; 3
    5dd6:	9f 93       	push	r25
    5dd8:	8f 93       	push	r24
    5dda:	84 e9       	ldi	r24, 0x94	; 148
    5ddc:	97 e0       	ldi	r25, 0x07	; 7
    5dde:	9f 93       	push	r25
    5de0:	8f 93       	push	r24
    5de2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.heatPOn=0;
    5de6:	10 92 62 09 	sts	0x0962, r1	; 0x800962 <Comp_1+0xc>
			time_count_1+= difftime(time(&current_time), timeStartHeatP_1);
    5dea:	c0 90 62 0a 	lds	r12, 0x0A62	; 0x800a62 <timeStartHeatP_1>
    5dee:	d0 90 63 0a 	lds	r13, 0x0A63	; 0x800a63 <timeStartHeatP_1+0x1>
    5df2:	e0 90 64 0a 	lds	r14, 0x0A64	; 0x800a64 <timeStartHeatP_1+0x2>
    5df6:	f0 90 65 0a 	lds	r15, 0x0A65	; 0x800a65 <timeStartHeatP_1+0x3>
    5dfa:	81 ef       	ldi	r24, 0xF1	; 241
    5dfc:	98 e0       	ldi	r25, 0x08	; 8
    5dfe:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5e02:	a7 01       	movw	r20, r14
    5e04:	96 01       	movw	r18, r12
    5e06:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5e0a:	c0 90 27 07 	lds	r12, 0x0727	; 0x800727 <time_count_1.3209>
    5e0e:	d0 90 28 07 	lds	r13, 0x0728	; 0x800728 <time_count_1.3209+0x1>
    5e12:	e0 90 29 07 	lds	r14, 0x0729	; 0x800729 <time_count_1.3209+0x2>
    5e16:	f0 90 2a 07 	lds	r15, 0x072A	; 0x80072a <time_count_1.3209+0x3>
    5e1a:	dc 01       	movw	r26, r24
    5e1c:	cb 01       	movw	r24, r22
    5e1e:	8c 0d       	add	r24, r12
    5e20:	9d 1d       	adc	r25, r13
    5e22:	ae 1d       	adc	r26, r14
    5e24:	bf 1d       	adc	r27, r15
    5e26:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <time_count_1.3209>
    5e2a:	90 93 28 07 	sts	0x0728, r25	; 0x800728 <time_count_1.3209+0x1>
    5e2e:	a0 93 29 07 	sts	0x0729, r26	; 0x800729 <time_count_1.3209+0x2>
    5e32:	b0 93 2a 07 	sts	0x072A, r27	; 0x80072a <time_count_1.3209+0x3>
			if(time_count_1>ONE_HOUR){EEpromData.time_pump_hiter_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    5e36:	0f 90       	pop	r0
    5e38:	0f 90       	pop	r0
    5e3a:	0f 90       	pop	r0
    5e3c:	0f 90       	pop	r0
    5e3e:	81 31       	cpi	r24, 0x11	; 17
    5e40:	9e 40       	sbci	r25, 0x0E	; 14
    5e42:	a1 05       	cpc	r26, r1
    5e44:	b1 05       	cpc	r27, r1
    5e46:	b0 f0       	brcs	.+44     	; 0x5e74 <HeatPump_Stop+0xe8>
    5e48:	e6 ef       	ldi	r30, 0xF6	; 246
    5e4a:	f8 e0       	ldi	r31, 0x08	; 8
    5e4c:	84 a9       	ldd	r24, Z+52	; 0x34
    5e4e:	95 a9       	ldd	r25, Z+53	; 0x35
    5e50:	01 96       	adiw	r24, 0x01	; 1
    5e52:	95 ab       	std	Z+53, r25	; 0x35
    5e54:	84 ab       	std	Z+52, r24	; 0x34
    5e56:	40 e6       	ldi	r20, 0x60	; 96
    5e58:	50 e0       	ldi	r21, 0x00	; 0
    5e5a:	60 e0       	ldi	r22, 0x00	; 0
    5e5c:	70 e0       	ldi	r23, 0x00	; 0
    5e5e:	cf 01       	movw	r24, r30
    5e60:	0e 94 8a 5d 	call	0xbb14	; 0xbb14 <eeprom_update_block>
    5e64:	10 92 27 07 	sts	0x0727, r1	; 0x800727 <time_count_1.3209>
    5e68:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <time_count_1.3209+0x1>
    5e6c:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <time_count_1.3209+0x2>
    5e70:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <time_count_1.3209+0x3>
			
		}
		xTimerChangePeriod( xStopThreeWay,period, 100 );
    5e74:	0f 2e       	mov	r0, r31
    5e76:	f4 e6       	ldi	r31, 0x64	; 100
    5e78:	cf 2e       	mov	r12, r31
    5e7a:	d1 2c       	mov	r13, r1
    5e7c:	e1 2c       	mov	r14, r1
    5e7e:	f1 2c       	mov	r15, r1
    5e80:	f0 2d       	mov	r31, r0
    5e82:	00 e0       	ldi	r16, 0x00	; 0
    5e84:	10 e0       	ldi	r17, 0x00	; 0
    5e86:	a5 01       	movw	r20, r10
    5e88:	94 01       	movw	r18, r8
    5e8a:	64 e0       	ldi	r22, 0x04	; 4
    5e8c:	80 91 c8 09 	lds	r24, 0x09C8	; 0x8009c8 <xStopThreeWay>
    5e90:	90 91 c9 09 	lds	r25, 0x09C9	; 0x8009c9 <xStopThreeWay+0x1>
    5e94:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    5e98:	7b c0       	rjmp	.+246    	; 0x5f90 <HeatPump_Stop+0x204>
		//xTimerStart(xStopThreeWay, 0);
	}

	else if((*pxTimerID) == uxStopDelayHeatPTimer_2_ID)
    5e9a:	85 31       	cpi	r24, 0x15	; 21
    5e9c:	09 f0       	breq	.+2      	; 0x5ea0 <HeatPump_Stop+0x114>
    5e9e:	78 c0       	rjmp	.+240    	; 0x5f90 <HeatPump_Stop+0x204>
	{
		period=(TickType_t)EEpromData.Revers_Valve_delay;
		period*=1000;
		xSerialxPrintf(&xSerial3Port,"StopHeatPump_2\r\n");
    5ea0:	8a ea       	ldi	r24, 0xAA	; 170
    5ea2:	93 e0       	ldi	r25, 0x03	; 3
    5ea4:	9f 93       	push	r25
    5ea6:	8f 93       	push	r24
    5ea8:	84 e9       	ldi	r24, 0x94	; 148
    5eaa:	97 e0       	ldi	r25, 0x07	; 7
    5eac:	9f 93       	push	r25
    5eae:	8f 93       	push	r24
    5eb0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_2 > 0)//
    5eb4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5eb8:	0f 90       	pop	r0
    5eba:	0f 90       	pop	r0
    5ebc:	0f 90       	pop	r0
    5ebe:	0f 90       	pop	r0
    5ec0:	84 ff       	sbrs	r24, 4
    5ec2:	49 c0       	rjmp	.+146    	; 0x5f56 <HeatPump_Stop+0x1ca>
		{
			STOP_HEAT_PUMP_2;
    5ec4:	e2 e0       	ldi	r30, 0x02	; 2
    5ec6:	f1 e0       	ldi	r31, 0x01	; 1
    5ec8:	80 81       	ld	r24, Z
    5eca:	8f 7e       	andi	r24, 0xEF	; 239
    5ecc:	80 83       	st	Z, r24
			
			
			Comp_2.heatPOn=0;
    5ece:	10 92 e8 09 	sts	0x09E8, r1	; 0x8009e8 <Comp_2+0xc>
			time_count_2+= difftime(time(&current_time), timeStartHeatP_2);
    5ed2:	c0 90 76 0a 	lds	r12, 0x0A76	; 0x800a76 <timeStartHeatP_2>
    5ed6:	d0 90 77 0a 	lds	r13, 0x0A77	; 0x800a77 <timeStartHeatP_2+0x1>
    5eda:	e0 90 78 0a 	lds	r14, 0x0A78	; 0x800a78 <timeStartHeatP_2+0x2>
    5ede:	f0 90 79 0a 	lds	r15, 0x0A79	; 0x800a79 <timeStartHeatP_2+0x3>
    5ee2:	81 ef       	ldi	r24, 0xF1	; 241
    5ee4:	98 e0       	ldi	r25, 0x08	; 8
    5ee6:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5eea:	a7 01       	movw	r20, r14
    5eec:	96 01       	movw	r18, r12
    5eee:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5ef2:	c0 90 23 07 	lds	r12, 0x0723	; 0x800723 <time_count_2.3210>
    5ef6:	d0 90 24 07 	lds	r13, 0x0724	; 0x800724 <time_count_2.3210+0x1>
    5efa:	e0 90 25 07 	lds	r14, 0x0725	; 0x800725 <time_count_2.3210+0x2>
    5efe:	f0 90 26 07 	lds	r15, 0x0726	; 0x800726 <time_count_2.3210+0x3>
    5f02:	dc 01       	movw	r26, r24
    5f04:	cb 01       	movw	r24, r22
    5f06:	8c 0d       	add	r24, r12
    5f08:	9d 1d       	adc	r25, r13
    5f0a:	ae 1d       	adc	r26, r14
    5f0c:	bf 1d       	adc	r27, r15
    5f0e:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <time_count_2.3210>
    5f12:	90 93 24 07 	sts	0x0724, r25	; 0x800724 <time_count_2.3210+0x1>
    5f16:	a0 93 25 07 	sts	0x0725, r26	; 0x800725 <time_count_2.3210+0x2>
    5f1a:	b0 93 26 07 	sts	0x0726, r27	; 0x800726 <time_count_2.3210+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_pump_hiter_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    5f1e:	81 31       	cpi	r24, 0x11	; 17
    5f20:	9e 40       	sbci	r25, 0x0E	; 14
    5f22:	a1 05       	cpc	r26, r1
    5f24:	b1 05       	cpc	r27, r1
    5f26:	b8 f0       	brcs	.+46     	; 0x5f56 <HeatPump_Stop+0x1ca>
    5f28:	e0 e4       	ldi	r30, 0x40	; 64
    5f2a:	f9 e0       	ldi	r31, 0x09	; 9
    5f2c:	80 81       	ld	r24, Z
    5f2e:	91 81       	ldd	r25, Z+1	; 0x01
    5f30:	01 96       	adiw	r24, 0x01	; 1
    5f32:	91 83       	std	Z+1, r25	; 0x01
    5f34:	80 83       	st	Z, r24
    5f36:	40 e6       	ldi	r20, 0x60	; 96
    5f38:	50 e0       	ldi	r21, 0x00	; 0
    5f3a:	60 e0       	ldi	r22, 0x00	; 0
    5f3c:	70 e0       	ldi	r23, 0x00	; 0
    5f3e:	86 ef       	ldi	r24, 0xF6	; 246
    5f40:	98 e0       	ldi	r25, 0x08	; 8
    5f42:	0e 94 8a 5d 	call	0xbb14	; 0xbb14 <eeprom_update_block>
    5f46:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <time_count_2.3210>
    5f4a:	10 92 24 07 	sts	0x0724, r1	; 0x800724 <time_count_2.3210+0x1>
    5f4e:	10 92 25 07 	sts	0x0725, r1	; 0x800725 <time_count_2.3210+0x2>
    5f52:	10 92 26 07 	sts	0x0726, r1	; 0x800726 <time_count_2.3210+0x3>
			
		}
		xTimerChangePeriod( xStopRevValve_2,(EEpromData.Revers_Valve_delay*1000) / portTICK_PERIOD_MS, 100 );
    5f56:	40 91 f8 08 	lds	r20, 0x08F8	; 0x8008f8 <EEpromData+0x2>
    5f5a:	88 ee       	ldi	r24, 0xE8	; 232
    5f5c:	93 e0       	ldi	r25, 0x03	; 3
    5f5e:	48 9f       	mul	r20, r24
    5f60:	90 01       	movw	r18, r0
    5f62:	49 9f       	mul	r20, r25
    5f64:	30 0d       	add	r19, r0
    5f66:	11 24       	eor	r1, r1
    5f68:	03 2e       	mov	r0, r19
    5f6a:	00 0c       	add	r0, r0
    5f6c:	44 0b       	sbc	r20, r20
    5f6e:	55 0b       	sbc	r21, r21
    5f70:	0f 2e       	mov	r0, r31
    5f72:	f4 e6       	ldi	r31, 0x64	; 100
    5f74:	cf 2e       	mov	r12, r31
    5f76:	d1 2c       	mov	r13, r1
    5f78:	e1 2c       	mov	r14, r1
    5f7a:	f1 2c       	mov	r15, r1
    5f7c:	f0 2d       	mov	r31, r0
    5f7e:	00 e0       	ldi	r16, 0x00	; 0
    5f80:	10 e0       	ldi	r17, 0x00	; 0
    5f82:	64 e0       	ldi	r22, 0x04	; 4
    5f84:	80 91 eb 08 	lds	r24, 0x08EB	; 0x8008eb <xStopRevValve_2>
    5f88:	90 91 ec 08 	lds	r25, 0x08EC	; 0x8008ec <xStopRevValve_2+0x1>
    5f8c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
}
    5f90:	1f 91       	pop	r17
    5f92:	0f 91       	pop	r16
    5f94:	ff 90       	pop	r15
    5f96:	ef 90       	pop	r14
    5f98:	df 90       	pop	r13
    5f9a:	cf 90       	pop	r12
    5f9c:	bf 90       	pop	r11
    5f9e:	af 90       	pop	r10
    5fa0:	9f 90       	pop	r9
    5fa2:	8f 90       	pop	r8
    5fa4:	08 95       	ret

00005fa6 <ThreeWay_Stop>:
//-------------------------------------------------------------------------
void ThreeWay_Stop()
{
    5fa6:	8f 92       	push	r8
    5fa8:	9f 92       	push	r9
    5faa:	af 92       	push	r10
    5fac:	bf 92       	push	r11
    5fae:	cf 92       	push	r12
    5fb0:	df 92       	push	r13
    5fb2:	ef 92       	push	r14
    5fb4:	ff 92       	push	r15
    5fb6:	0f 93       	push	r16
    5fb8:	1f 93       	push	r17
	static time_t time_count;
	TickType_t period;
	period=(TickType_t)EEpromData.Revers_Valve_delay;
    5fba:	20 91 f8 08 	lds	r18, 0x08F8	; 0x8008f8 <EEpromData+0x2>
	period*=1000;
    5fbe:	30 e0       	ldi	r19, 0x00	; 0
    5fc0:	a8 ee       	ldi	r26, 0xE8	; 232
    5fc2:	b3 e0       	ldi	r27, 0x03	; 3
    5fc4:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    5fc8:	4b 01       	movw	r8, r22
    5fca:	5c 01       	movw	r10, r24
	
	xSerialxPrintf(&xSerial3Port,"ThreeWay_Stop\r\n");
    5fcc:	8b eb       	ldi	r24, 0xBB	; 187
    5fce:	93 e0       	ldi	r25, 0x03	; 3
    5fd0:	9f 93       	push	r25
    5fd2:	8f 93       	push	r24
    5fd4:	84 e9       	ldi	r24, 0x94	; 148
    5fd6:	97 e0       	ldi	r25, 0x07	; 7
    5fd8:	9f 93       	push	r25
    5fda:	8f 93       	push	r24
    5fdc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(PIN_THWAY_VALVE > 0)
    5fe0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5fe4:	0f 90       	pop	r0
    5fe6:	0f 90       	pop	r0
    5fe8:	0f 90       	pop	r0
    5fea:	0f 90       	pop	r0
    5fec:	88 23       	and	r24, r24
    5fee:	0c f0       	brlt	.+2      	; 0x5ff2 <ThreeWay_Stop+0x4c>
    5ff0:	48 c0       	rjmp	.+144    	; 0x6082 <ThreeWay_Stop+0xdc>
	{
		STOP_THWAY_VALVE;
    5ff2:	e2 e0       	ldi	r30, 0x02	; 2
    5ff4:	f1 e0       	ldi	r31, 0x01	; 1
    5ff6:	80 81       	ld	r24, Z
    5ff8:	8f 77       	andi	r24, 0x7F	; 127
    5ffa:	80 83       	st	Z, r24
		//xSerialxPrintf(&xSerial3Port,"ThreeWay_Stop\r\n");
		Comp_1.threeWOn=0;
    5ffc:	10 92 63 09 	sts	0x0963, r1	; 0x800963 <Comp_1+0xd>
		time_count+= difftime(time(&current_time), timeStartThreeW);
    6000:	c0 90 7a 0a 	lds	r12, 0x0A7A	; 0x800a7a <timeStartThreeW>
    6004:	d0 90 7b 0a 	lds	r13, 0x0A7B	; 0x800a7b <timeStartThreeW+0x1>
    6008:	e0 90 7c 0a 	lds	r14, 0x0A7C	; 0x800a7c <timeStartThreeW+0x2>
    600c:	f0 90 7d 0a 	lds	r15, 0x0A7D	; 0x800a7d <timeStartThreeW+0x3>
    6010:	81 ef       	ldi	r24, 0xF1	; 241
    6012:	98 e0       	ldi	r25, 0x08	; 8
    6014:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6018:	a7 01       	movw	r20, r14
    601a:	96 01       	movw	r18, r12
    601c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    6020:	c0 90 1f 07 	lds	r12, 0x071F	; 0x80071f <time_count.3215>
    6024:	d0 90 20 07 	lds	r13, 0x0720	; 0x800720 <time_count.3215+0x1>
    6028:	e0 90 21 07 	lds	r14, 0x0721	; 0x800721 <time_count.3215+0x2>
    602c:	f0 90 22 07 	lds	r15, 0x0722	; 0x800722 <time_count.3215+0x3>
    6030:	dc 01       	movw	r26, r24
    6032:	cb 01       	movw	r24, r22
    6034:	8c 0d       	add	r24, r12
    6036:	9d 1d       	adc	r25, r13
    6038:	ae 1d       	adc	r26, r14
    603a:	bf 1d       	adc	r27, r15
    603c:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <time_count.3215>
    6040:	90 93 20 07 	sts	0x0720, r25	; 0x800720 <time_count.3215+0x1>
    6044:	a0 93 21 07 	sts	0x0721, r26	; 0x800721 <time_count.3215+0x2>
    6048:	b0 93 22 07 	sts	0x0722, r27	; 0x800722 <time_count.3215+0x3>
		if(time_count>ONE_HOUR){EEpromData.time_threeway++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count=0;}
    604c:	81 31       	cpi	r24, 0x11	; 17
    604e:	9e 40       	sbci	r25, 0x0E	; 14
    6050:	a1 05       	cpc	r26, r1
    6052:	b1 05       	cpc	r27, r1
    6054:	b0 f0       	brcs	.+44     	; 0x6082 <ThreeWay_Stop+0xdc>
    6056:	e6 ef       	ldi	r30, 0xF6	; 246
    6058:	f8 e0       	ldi	r31, 0x08	; 8
    605a:	84 ad       	ldd	r24, Z+60	; 0x3c
    605c:	95 ad       	ldd	r25, Z+61	; 0x3d
    605e:	01 96       	adiw	r24, 0x01	; 1
    6060:	95 af       	std	Z+61, r25	; 0x3d
    6062:	84 af       	std	Z+60, r24	; 0x3c
    6064:	40 e6       	ldi	r20, 0x60	; 96
    6066:	50 e0       	ldi	r21, 0x00	; 0
    6068:	60 e0       	ldi	r22, 0x00	; 0
    606a:	70 e0       	ldi	r23, 0x00	; 0
    606c:	cf 01       	movw	r24, r30
    606e:	0e 94 8a 5d 	call	0xbb14	; 0xbb14 <eeprom_update_block>
    6072:	10 92 1f 07 	sts	0x071F, r1	; 0x80071f <time_count.3215>
    6076:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <time_count.3215+0x1>
    607a:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <time_count.3215+0x2>
    607e:	10 92 22 07 	sts	0x0722, r1	; 0x800722 <time_count.3215+0x3>
		
	} else{ }//xSerialxPrintf(&xSerial3Port,"ThreeWay_isRun\r\n");
	xTimerChangePeriod( xStopRevValve_1,period, 100 );
    6082:	0f 2e       	mov	r0, r31
    6084:	f4 e6       	ldi	r31, 0x64	; 100
    6086:	cf 2e       	mov	r12, r31
    6088:	d1 2c       	mov	r13, r1
    608a:	e1 2c       	mov	r14, r1
    608c:	f1 2c       	mov	r15, r1
    608e:	f0 2d       	mov	r31, r0
    6090:	00 e0       	ldi	r16, 0x00	; 0
    6092:	10 e0       	ldi	r17, 0x00	; 0
    6094:	a5 01       	movw	r20, r10
    6096:	94 01       	movw	r18, r8
    6098:	64 e0       	ldi	r22, 0x04	; 4
    609a:	80 91 5e 0a 	lds	r24, 0x0A5E	; 0x800a5e <xStopRevValve_1>
    609e:	90 91 5f 0a 	lds	r25, 0x0A5F	; 0x800a5f <xStopRevValve_1+0x1>
    60a2:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	
}
    60a6:	1f 91       	pop	r17
    60a8:	0f 91       	pop	r16
    60aa:	ff 90       	pop	r15
    60ac:	ef 90       	pop	r14
    60ae:	df 90       	pop	r13
    60b0:	cf 90       	pop	r12
    60b2:	bf 90       	pop	r11
    60b4:	af 90       	pop	r10
    60b6:	9f 90       	pop	r9
    60b8:	8f 90       	pop	r8
    60ba:	08 95       	ret

000060bc <Revers_Stop>:

//-------------------------------------------------------------------------
void Revers_Stop(TimerHandle_t xTimer)
{
    60bc:	8f 92       	push	r8
    60be:	9f 92       	push	r9
    60c0:	af 92       	push	r10
    60c2:	bf 92       	push	r11
    60c4:	cf 92       	push	r12
    60c6:	df 92       	push	r13
    60c8:	ef 92       	push	r14
    60ca:	ff 92       	push	r15
    60cc:	0f 93       	push	r16
    60ce:	1f 93       	push	r17
    60d0:	ac 01       	movw	r20, r24
	static time_t time_count_1;
	static time_t time_count_2;
	TickType_t period;
	period=(TickType_t)EEpromData.Source_Pump_delay;
    60d2:	20 91 f7 08 	lds	r18, 0x08F7	; 0x8008f7 <EEpromData+0x1>
	period*=1000;
    60d6:	30 e0       	ldi	r19, 0x00	; 0
    60d8:	a8 ee       	ldi	r26, 0xE8	; 232
    60da:	b3 e0       	ldi	r27, 0x03	; 3
    60dc:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    60e0:	4b 01       	movw	r8, r22
    60e2:	5c 01       	movw	r10, r24

	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    60e4:	ca 01       	movw	r24, r20
    60e6:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
   // xSerialxPrintf(&xSerial3Port,"StopRevValve\r\n");

	if((*pxTimerID) == uxStopDelayRevVTimer_1_ID)
    60ea:	fc 01       	movw	r30, r24
    60ec:	80 81       	ld	r24, Z
    60ee:	8a 30       	cpi	r24, 0x0A	; 10
    60f0:	09 f0       	breq	.+2      	; 0x60f4 <Revers_Stop+0x38>
    60f2:	67 c0       	rjmp	.+206    	; 0x61c2 <Revers_Stop+0x106>
	{
		
		
		if(PIN_REV_VALVE_1 > 0)//
    60f4:	94 9b       	sbis	0x12, 4	; 18
    60f6:	52 c0       	rjmp	.+164    	; 0x619c <Revers_Stop+0xe0>
		{
			STOP_REV_VALVE_1;
    60f8:	a4 98       	cbi	0x14, 4	; 20
			xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    60fa:	86 e3       	ldi	r24, 0x36	; 54
    60fc:	93 e0       	ldi	r25, 0x03	; 3
    60fe:	9f 93       	push	r25
    6100:	8f 93       	push	r24
    6102:	84 e9       	ldi	r24, 0x94	; 148
    6104:	97 e0       	ldi	r25, 0x07	; 7
    6106:	9f 93       	push	r25
    6108:	8f 93       	push	r24
    610a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.revVOn=0;
    610e:	10 92 64 09 	sts	0x0964, r1	; 0x800964 <Comp_1+0xe>
			time_count_1+= difftime(time(&current_time), timeStartRevV_1);
    6112:	c0 90 85 0a 	lds	r12, 0x0A85	; 0x800a85 <timeStartRevV_1>
    6116:	d0 90 86 0a 	lds	r13, 0x0A86	; 0x800a86 <timeStartRevV_1+0x1>
    611a:	e0 90 87 0a 	lds	r14, 0x0A87	; 0x800a87 <timeStartRevV_1+0x2>
    611e:	f0 90 88 0a 	lds	r15, 0x0A88	; 0x800a88 <timeStartRevV_1+0x3>
    6122:	81 ef       	ldi	r24, 0xF1	; 241
    6124:	98 e0       	ldi	r25, 0x08	; 8
    6126:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    612a:	a7 01       	movw	r20, r14
    612c:	96 01       	movw	r18, r12
    612e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    6132:	c0 90 1b 07 	lds	r12, 0x071B	; 0x80071b <time_count_1.3220>
    6136:	d0 90 1c 07 	lds	r13, 0x071C	; 0x80071c <time_count_1.3220+0x1>
    613a:	e0 90 1d 07 	lds	r14, 0x071D	; 0x80071d <time_count_1.3220+0x2>
    613e:	f0 90 1e 07 	lds	r15, 0x071E	; 0x80071e <time_count_1.3220+0x3>
    6142:	dc 01       	movw	r26, r24
    6144:	cb 01       	movw	r24, r22
    6146:	8c 0d       	add	r24, r12
    6148:	9d 1d       	adc	r25, r13
    614a:	ae 1d       	adc	r26, r14
    614c:	bf 1d       	adc	r27, r15
    614e:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <time_count_1.3220>
    6152:	90 93 1c 07 	sts	0x071C, r25	; 0x80071c <time_count_1.3220+0x1>
    6156:	a0 93 1d 07 	sts	0x071D, r26	; 0x80071d <time_count_1.3220+0x2>
    615a:	b0 93 1e 07 	sts	0x071E, r27	; 0x80071e <time_count_1.3220+0x3>
			if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    615e:	0f 90       	pop	r0
    6160:	0f 90       	pop	r0
    6162:	0f 90       	pop	r0
    6164:	0f 90       	pop	r0
    6166:	81 31       	cpi	r24, 0x11	; 17
    6168:	9e 40       	sbci	r25, 0x0E	; 14
    616a:	a1 05       	cpc	r26, r1
    616c:	b1 05       	cpc	r27, r1
    616e:	b0 f0       	brcs	.+44     	; 0x619c <Revers_Stop+0xe0>
    6170:	e6 ef       	ldi	r30, 0xF6	; 246
    6172:	f8 e0       	ldi	r31, 0x08	; 8
    6174:	80 ad       	ldd	r24, Z+56	; 0x38
    6176:	91 ad       	ldd	r25, Z+57	; 0x39
    6178:	01 96       	adiw	r24, 0x01	; 1
    617a:	91 af       	std	Z+57, r25	; 0x39
    617c:	80 af       	std	Z+56, r24	; 0x38
    617e:	40 e6       	ldi	r20, 0x60	; 96
    6180:	50 e0       	ldi	r21, 0x00	; 0
    6182:	60 e0       	ldi	r22, 0x00	; 0
    6184:	70 e0       	ldi	r23, 0x00	; 0
    6186:	cf 01       	movw	r24, r30
    6188:	0e 94 8a 5d 	call	0xbb14	; 0xbb14 <eeprom_update_block>
    618c:	10 92 1b 07 	sts	0x071B, r1	; 0x80071b <time_count_1.3220>
    6190:	10 92 1c 07 	sts	0x071C, r1	; 0x80071c <time_count_1.3220+0x1>
    6194:	10 92 1d 07 	sts	0x071D, r1	; 0x80071d <time_count_1.3220+0x2>
    6198:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <time_count_1.3220+0x3>

		}
		xTimerChangePeriod( xStopSource_1,period, 100 );
    619c:	0f 2e       	mov	r0, r31
    619e:	f4 e6       	ldi	r31, 0x64	; 100
    61a0:	cf 2e       	mov	r12, r31
    61a2:	d1 2c       	mov	r13, r1
    61a4:	e1 2c       	mov	r14, r1
    61a6:	f1 2c       	mov	r15, r1
    61a8:	f0 2d       	mov	r31, r0
    61aa:	00 e0       	ldi	r16, 0x00	; 0
    61ac:	10 e0       	ldi	r17, 0x00	; 0
    61ae:	a5 01       	movw	r20, r10
    61b0:	94 01       	movw	r18, r8
    61b2:	64 e0       	ldi	r22, 0x04	; 4
    61b4:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <xStopSource_1>
    61b8:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <xStopSource_1+0x1>
    61bc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    61c0:	6a c0       	rjmp	.+212    	; 0x6296 <Revers_Stop+0x1da>
		//xTimerStart(xStopSource_1, 0);
	}
	
	else if((*pxTimerID) == uxStopDelayRevVTimer_2_ID)
    61c2:	87 31       	cpi	r24, 0x17	; 23
    61c4:	09 f0       	breq	.+2      	; 0x61c8 <Revers_Stop+0x10c>
    61c6:	67 c0       	rjmp	.+206    	; 0x6296 <Revers_Stop+0x1da>
	{
		
		if(PIN_REV_VALVE_2 > 0)//
    61c8:	93 9b       	sbis	0x12, 3	; 18
    61ca:	53 c0       	rjmp	.+166    	; 0x6272 <Revers_Stop+0x1b6>
		{   
			xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    61cc:	88 e5       	ldi	r24, 0x58	; 88
    61ce:	93 e0       	ldi	r25, 0x03	; 3
    61d0:	9f 93       	push	r25
    61d2:	8f 93       	push	r24
    61d4:	84 e9       	ldi	r24, 0x94	; 148
    61d6:	97 e0       	ldi	r25, 0x07	; 7
    61d8:	9f 93       	push	r25
    61da:	8f 93       	push	r24
    61dc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			STOP_REV_VALVE_2;
    61e0:	a3 98       	cbi	0x14, 3	; 20
			
			
			Comp_2.revVOn=0;
    61e2:	10 92 ea 09 	sts	0x09EA, r1	; 0x8009ea <Comp_2+0xe>
			time_count_2+= difftime(time(&current_time), timeStartRevV_2);
    61e6:	c0 90 a0 0a 	lds	r12, 0x0AA0	; 0x800aa0 <timeStartRevV_2>
    61ea:	d0 90 a1 0a 	lds	r13, 0x0AA1	; 0x800aa1 <timeStartRevV_2+0x1>
    61ee:	e0 90 a2 0a 	lds	r14, 0x0AA2	; 0x800aa2 <timeStartRevV_2+0x2>
    61f2:	f0 90 a3 0a 	lds	r15, 0x0AA3	; 0x800aa3 <timeStartRevV_2+0x3>
    61f6:	81 ef       	ldi	r24, 0xF1	; 241
    61f8:	98 e0       	ldi	r25, 0x08	; 8
    61fa:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    61fe:	a7 01       	movw	r20, r14
    6200:	96 01       	movw	r18, r12
    6202:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    6206:	c0 90 17 07 	lds	r12, 0x0717	; 0x800717 <time_count_2.3221>
    620a:	d0 90 18 07 	lds	r13, 0x0718	; 0x800718 <time_count_2.3221+0x1>
    620e:	e0 90 19 07 	lds	r14, 0x0719	; 0x800719 <time_count_2.3221+0x2>
    6212:	f0 90 1a 07 	lds	r15, 0x071A	; 0x80071a <time_count_2.3221+0x3>
    6216:	dc 01       	movw	r26, r24
    6218:	cb 01       	movw	r24, r22
    621a:	8c 0d       	add	r24, r12
    621c:	9d 1d       	adc	r25, r13
    621e:	ae 1d       	adc	r26, r14
    6220:	bf 1d       	adc	r27, r15
    6222:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <time_count_2.3221>
    6226:	90 93 18 07 	sts	0x0718, r25	; 0x800718 <time_count_2.3221+0x1>
    622a:	a0 93 19 07 	sts	0x0719, r26	; 0x800719 <time_count_2.3221+0x2>
    622e:	b0 93 1a 07 	sts	0x071A, r27	; 0x80071a <time_count_2.3221+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    6232:	0f 90       	pop	r0
    6234:	0f 90       	pop	r0
    6236:	0f 90       	pop	r0
    6238:	0f 90       	pop	r0
    623a:	81 31       	cpi	r24, 0x11	; 17
    623c:	9e 40       	sbci	r25, 0x0E	; 14
    623e:	a1 05       	cpc	r26, r1
    6240:	b1 05       	cpc	r27, r1
    6242:	b8 f0       	brcs	.+46     	; 0x6272 <Revers_Stop+0x1b6>
    6244:	e4 e4       	ldi	r30, 0x44	; 68
    6246:	f9 e0       	ldi	r31, 0x09	; 9
    6248:	80 81       	ld	r24, Z
    624a:	91 81       	ldd	r25, Z+1	; 0x01
    624c:	01 96       	adiw	r24, 0x01	; 1
    624e:	91 83       	std	Z+1, r25	; 0x01
    6250:	80 83       	st	Z, r24
    6252:	40 e6       	ldi	r20, 0x60	; 96
    6254:	50 e0       	ldi	r21, 0x00	; 0
    6256:	60 e0       	ldi	r22, 0x00	; 0
    6258:	70 e0       	ldi	r23, 0x00	; 0
    625a:	86 ef       	ldi	r24, 0xF6	; 246
    625c:	98 e0       	ldi	r25, 0x08	; 8
    625e:	0e 94 8a 5d 	call	0xbb14	; 0xbb14 <eeprom_update_block>
    6262:	10 92 17 07 	sts	0x0717, r1	; 0x800717 <time_count_2.3221>
    6266:	10 92 18 07 	sts	0x0718, r1	; 0x800718 <time_count_2.3221+0x1>
    626a:	10 92 19 07 	sts	0x0719, r1	; 0x800719 <time_count_2.3221+0x2>
    626e:	10 92 1a 07 	sts	0x071A, r1	; 0x80071a <time_count_2.3221+0x3>

		}
		xTimerChangePeriod( xStopSource_2,period, 100 );
    6272:	0f 2e       	mov	r0, r31
    6274:	f4 e6       	ldi	r31, 0x64	; 100
    6276:	cf 2e       	mov	r12, r31
    6278:	d1 2c       	mov	r13, r1
    627a:	e1 2c       	mov	r14, r1
    627c:	f1 2c       	mov	r15, r1
    627e:	f0 2d       	mov	r31, r0
    6280:	00 e0       	ldi	r16, 0x00	; 0
    6282:	10 e0       	ldi	r17, 0x00	; 0
    6284:	a5 01       	movw	r20, r10
    6286:	94 01       	movw	r18, r8
    6288:	64 e0       	ldi	r22, 0x04	; 4
    628a:	80 91 4c 0a 	lds	r24, 0x0A4C	; 0x800a4c <xStopSource_2>
    628e:	90 91 4d 0a 	lds	r25, 0x0A4D	; 0x800a4d <xStopSource_2+0x1>
    6292:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		//xTimerStart(xStopSource_2, 0);
	}
	
	
}
    6296:	1f 91       	pop	r17
    6298:	0f 91       	pop	r16
    629a:	ff 90       	pop	r15
    629c:	ef 90       	pop	r14
    629e:	df 90       	pop	r13
    62a0:	cf 90       	pop	r12
    62a2:	bf 90       	pop	r11
    62a4:	af 90       	pop	r10
    62a6:	9f 90       	pop	r9
    62a8:	8f 90       	pop	r8
    62aa:	08 95       	ret

000062ac <SorcePump_Stop>:
//---------------------------------------------------------------------------
void SorcePump_Stop(TimerHandle_t xTimer)
{
    62ac:	cf 92       	push	r12
    62ae:	df 92       	push	r13
    62b0:	ef 92       	push	r14
    62b2:	ff 92       	push	r15
	static time_t time_count_1;
	static time_t time_count_2;
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    62b4:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
     // xSerialxPrintf(&xSerial3Port,"StopSource\r\n");
    
	 	
	 
	if((*pxTimerID) == uxStopDelaySourcePTimer_1_ID)
    62b8:	fc 01       	movw	r30, r24
    62ba:	80 81       	ld	r24, Z
    62bc:	89 30       	cpi	r24, 0x09	; 9
    62be:	09 f0       	breq	.+2      	; 0x62c2 <SorcePump_Stop+0x16>
    62c0:	5e c0       	rjmp	.+188    	; 0x637e <SorcePump_Stop+0xd2>
	{
		Comp_1.switchToMode=false ;
    62c2:	10 92 56 09 	sts	0x0956, r1	; 0x800956 <Comp_1>
		
		
		if(PIN_SOURCE_PUMP_1 > 0)//
    62c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    62ca:	81 ff       	sbrs	r24, 1
    62cc:	b8 c0       	rjmp	.+368    	; 0x643e <SorcePump_Stop+0x192>
		{
			STOP_SOURCE_PUMP_1;
    62ce:	e2 e0       	ldi	r30, 0x02	; 2
    62d0:	f1 e0       	ldi	r31, 0x01	; 1
    62d2:	80 81       	ld	r24, Z
    62d4:	8d 7f       	andi	r24, 0xFD	; 253
    62d6:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopSource_1\r\n");
    62d8:	8b ec       	ldi	r24, 0xCB	; 203
    62da:	93 e0       	ldi	r25, 0x03	; 3
    62dc:	9f 93       	push	r25
    62de:	8f 93       	push	r24
    62e0:	84 e9       	ldi	r24, 0x94	; 148
    62e2:	97 e0       	ldi	r25, 0x07	; 7
    62e4:	9f 93       	push	r25
    62e6:	8f 93       	push	r24
    62e8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.srcPOn=0;
    62ec:	10 92 65 09 	sts	0x0965, r1	; 0x800965 <Comp_1+0xf>
			
			
			time_count_1+= difftime(time(&current_time), timeStartSrcP_1);
    62f0:	c0 90 ce 09 	lds	r12, 0x09CE	; 0x8009ce <timeStartSrcP_1>
    62f4:	d0 90 cf 09 	lds	r13, 0x09CF	; 0x8009cf <timeStartSrcP_1+0x1>
    62f8:	e0 90 d0 09 	lds	r14, 0x09D0	; 0x8009d0 <timeStartSrcP_1+0x2>
    62fc:	f0 90 d1 09 	lds	r15, 0x09D1	; 0x8009d1 <timeStartSrcP_1+0x3>
    6300:	81 ef       	ldi	r24, 0xF1	; 241
    6302:	98 e0       	ldi	r25, 0x08	; 8
    6304:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6308:	a7 01       	movw	r20, r14
    630a:	96 01       	movw	r18, r12
    630c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    6310:	c0 90 13 07 	lds	r12, 0x0713	; 0x800713 <time_count_1.3227>
    6314:	d0 90 14 07 	lds	r13, 0x0714	; 0x800714 <time_count_1.3227+0x1>
    6318:	e0 90 15 07 	lds	r14, 0x0715	; 0x800715 <time_count_1.3227+0x2>
    631c:	f0 90 16 07 	lds	r15, 0x0716	; 0x800716 <time_count_1.3227+0x3>
    6320:	dc 01       	movw	r26, r24
    6322:	cb 01       	movw	r24, r22
    6324:	8c 0d       	add	r24, r12
    6326:	9d 1d       	adc	r25, r13
    6328:	ae 1d       	adc	r26, r14
    632a:	bf 1d       	adc	r27, r15
    632c:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <time_count_1.3227>
    6330:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <time_count_1.3227+0x1>
    6334:	a0 93 15 07 	sts	0x0715, r26	; 0x800715 <time_count_1.3227+0x2>
    6338:	b0 93 16 07 	sts	0x0716, r27	; 0x800716 <time_count_1.3227+0x3>
			//xSerialxPrintf(&xSerial3Port,"time_count_1=%d\r\n",time_count_1);
			if(time_count_1>ONE_HOUR){EEpromData.time_pump_source_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    633c:	0f 90       	pop	r0
    633e:	0f 90       	pop	r0
    6340:	0f 90       	pop	r0
    6342:	0f 90       	pop	r0
    6344:	81 31       	cpi	r24, 0x11	; 17
    6346:	9e 40       	sbci	r25, 0x0E	; 14
    6348:	a1 05       	cpc	r26, r1
    634a:	b1 05       	cpc	r27, r1
    634c:	08 f4       	brcc	.+2      	; 0x6350 <SorcePump_Stop+0xa4>
    634e:	77 c0       	rjmp	.+238    	; 0x643e <SorcePump_Stop+0x192>
    6350:	e6 ef       	ldi	r30, 0xF6	; 246
    6352:	f8 e0       	ldi	r31, 0x08	; 8
    6354:	86 a9       	ldd	r24, Z+54	; 0x36
    6356:	97 a9       	ldd	r25, Z+55	; 0x37
    6358:	01 96       	adiw	r24, 0x01	; 1
    635a:	97 ab       	std	Z+55, r25	; 0x37
    635c:	86 ab       	std	Z+54, r24	; 0x36
    635e:	40 e6       	ldi	r20, 0x60	; 96
    6360:	50 e0       	ldi	r21, 0x00	; 0
    6362:	60 e0       	ldi	r22, 0x00	; 0
    6364:	70 e0       	ldi	r23, 0x00	; 0
    6366:	cf 01       	movw	r24, r30
    6368:	0e 94 8a 5d 	call	0xbb14	; 0xbb14 <eeprom_update_block>
    636c:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <time_count_1.3227>
    6370:	10 92 14 07 	sts	0x0714, r1	; 0x800714 <time_count_1.3227+0x1>
    6374:	10 92 15 07 	sts	0x0715, r1	; 0x800715 <time_count_1.3227+0x2>
    6378:	10 92 16 07 	sts	0x0716, r1	; 0x800716 <time_count_1.3227+0x3>
    637c:	60 c0       	rjmp	.+192    	; 0x643e <SorcePump_Stop+0x192>

		}
		
	}
	
	else if((*pxTimerID) == uxStopDelaySourcePTimer_2_ID)
    637e:	86 31       	cpi	r24, 0x16	; 22
    6380:	09 f0       	breq	.+2      	; 0x6384 <SorcePump_Stop+0xd8>
    6382:	5d c0       	rjmp	.+186    	; 0x643e <SorcePump_Stop+0x192>
	{
		//xSerialxPrintf(&xSerial3Port,"StopSource_2\r\n");
		if(PIN_SOURCE_PUMP_2 > 0)//
    6384:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6388:	82 ff       	sbrs	r24, 2
    638a:	59 c0       	rjmp	.+178    	; 0x643e <SorcePump_Stop+0x192>
		{
			STOP_SOURCE_PUMP_2;
    638c:	e2 e0       	ldi	r30, 0x02	; 2
    638e:	f1 e0       	ldi	r31, 0x01	; 1
    6390:	80 81       	ld	r24, Z
    6392:	8b 7f       	andi	r24, 0xFB	; 251
    6394:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopSource_2\r\n");
    6396:	8a ed       	ldi	r24, 0xDA	; 218
    6398:	93 e0       	ldi	r25, 0x03	; 3
    639a:	9f 93       	push	r25
    639c:	8f 93       	push	r24
    639e:	84 e9       	ldi	r24, 0x94	; 148
    63a0:	97 e0       	ldi	r25, 0x07	; 7
    63a2:	9f 93       	push	r25
    63a4:	8f 93       	push	r24
    63a6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			Comp_2.srcPOn=0;
    63aa:	ec ed       	ldi	r30, 0xDC	; 220
    63ac:	f9 e0       	ldi	r31, 0x09	; 9
    63ae:	17 86       	std	Z+15, r1	; 0x0f
			Comp_2.switchToMode=false;
    63b0:	10 82       	st	Z, r1
			time_count_2+= difftime(time(&current_time), timeStartSrcP_2);
    63b2:	c0 90 89 0a 	lds	r12, 0x0A89	; 0x800a89 <timeStartSrcP_2>
    63b6:	d0 90 8a 0a 	lds	r13, 0x0A8A	; 0x800a8a <timeStartSrcP_2+0x1>
    63ba:	e0 90 8b 0a 	lds	r14, 0x0A8B	; 0x800a8b <timeStartSrcP_2+0x2>
    63be:	f0 90 8c 0a 	lds	r15, 0x0A8C	; 0x800a8c <timeStartSrcP_2+0x3>
    63c2:	81 ef       	ldi	r24, 0xF1	; 241
    63c4:	98 e0       	ldi	r25, 0x08	; 8
    63c6:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    63ca:	a7 01       	movw	r20, r14
    63cc:	96 01       	movw	r18, r12
    63ce:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    63d2:	c0 90 0f 07 	lds	r12, 0x070F	; 0x80070f <time_count_2.3228>
    63d6:	d0 90 10 07 	lds	r13, 0x0710	; 0x800710 <time_count_2.3228+0x1>
    63da:	e0 90 11 07 	lds	r14, 0x0711	; 0x800711 <time_count_2.3228+0x2>
    63de:	f0 90 12 07 	lds	r15, 0x0712	; 0x800712 <time_count_2.3228+0x3>
    63e2:	dc 01       	movw	r26, r24
    63e4:	cb 01       	movw	r24, r22
    63e6:	8c 0d       	add	r24, r12
    63e8:	9d 1d       	adc	r25, r13
    63ea:	ae 1d       	adc	r26, r14
    63ec:	bf 1d       	adc	r27, r15
    63ee:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <time_count_2.3228>
    63f2:	90 93 10 07 	sts	0x0710, r25	; 0x800710 <time_count_2.3228+0x1>
    63f6:	a0 93 11 07 	sts	0x0711, r26	; 0x800711 <time_count_2.3228+0x2>
    63fa:	b0 93 12 07 	sts	0x0712, r27	; 0x800712 <time_count_2.3228+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_pump_source_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    63fe:	0f 90       	pop	r0
    6400:	0f 90       	pop	r0
    6402:	0f 90       	pop	r0
    6404:	0f 90       	pop	r0
    6406:	81 31       	cpi	r24, 0x11	; 17
    6408:	9e 40       	sbci	r25, 0x0E	; 14
    640a:	a1 05       	cpc	r26, r1
    640c:	b1 05       	cpc	r27, r1
    640e:	b8 f0       	brcs	.+46     	; 0x643e <SorcePump_Stop+0x192>
    6410:	e2 e4       	ldi	r30, 0x42	; 66
    6412:	f9 e0       	ldi	r31, 0x09	; 9
    6414:	80 81       	ld	r24, Z
    6416:	91 81       	ldd	r25, Z+1	; 0x01
    6418:	01 96       	adiw	r24, 0x01	; 1
    641a:	91 83       	std	Z+1, r25	; 0x01
    641c:	80 83       	st	Z, r24
    641e:	40 e6       	ldi	r20, 0x60	; 96
    6420:	50 e0       	ldi	r21, 0x00	; 0
    6422:	60 e0       	ldi	r22, 0x00	; 0
    6424:	70 e0       	ldi	r23, 0x00	; 0
    6426:	86 ef       	ldi	r24, 0xF6	; 246
    6428:	98 e0       	ldi	r25, 0x08	; 8
    642a:	0e 94 8a 5d 	call	0xbb14	; 0xbb14 <eeprom_update_block>
    642e:	10 92 0f 07 	sts	0x070F, r1	; 0x80070f <time_count_2.3228>
    6432:	10 92 10 07 	sts	0x0710, r1	; 0x800710 <time_count_2.3228+0x1>
    6436:	10 92 11 07 	sts	0x0711, r1	; 0x800711 <time_count_2.3228+0x2>
    643a:	10 92 12 07 	sts	0x0712, r1	; 0x800712 <time_count_2.3228+0x3>

		}
	}
}
    643e:	ff 90       	pop	r15
    6440:	ef 90       	pop	r14
    6442:	df 90       	pop	r13
    6444:	cf 90       	pop	r12
    6446:	08 95       	ret

00006448 <StartComp>:
		
	}
}


void StartComp(TimerHandle_t xTimer){
    6448:	8f 92       	push	r8
    644a:	9f 92       	push	r9
    644c:	af 92       	push	r10
    644e:	bf 92       	push	r11
    6450:	cf 92       	push	r12
    6452:	df 92       	push	r13
    6454:	ef 92       	push	r14
    6456:	ff 92       	push	r15
    6458:	0f 93       	push	r16
    645a:	1f 93       	push	r17
    645c:	ac 01       	movw	r20, r24
	
	portBASE_TYPE *pxTimerID;
	
	TickType_t period;	
	period=(TickType_t)EEpromData.TRV_Delay;
    645e:	20 91 fb 08 	lds	r18, 0x08FB	; 0x8008fb <EEpromData+0x5>
    period*=1000;
    6462:	30 e0       	ldi	r19, 0x00	; 0
    6464:	a8 ee       	ldi	r26, 0xE8	; 232
    6466:	b3 e0       	ldi	r27, 0x03	; 3
    6468:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    646c:	4b 01       	movw	r8, r22
    646e:	5c 01       	movw	r10, r24
	
	pxTimerID = pvTimerGetTimerID(xTimer);
    6470:	ca 01       	movw	r24, r20
    6472:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
//xSerialxPrintf(&xSerial3Port,"StartCompressor\r\n");
	if((*pxTimerID) == uxStartDelayCompTimer_1_ID) {
    6476:	fc 01       	movw	r30, r24
    6478:	80 81       	ld	r24, Z
    647a:	81 30       	cpi	r24, 0x01	; 1
    647c:	09 f0       	breq	.+2      	; 0x6480 <StartComp+0x38>
    647e:	61 c0       	rjmp	.+194    	; 0x6542 <StartComp+0xfa>
		Comp_1.switchToMode=false;
    6480:	e6 e5       	ldi	r30, 0x56	; 86
    6482:	f9 e0       	ldi	r31, 0x09	; 9
    6484:	10 82       	st	Z, r1
		 if(Comp_1.def) {timeTillDef=xTaskGetTickCount();Comp_1.stopdef=true;}
    6486:	81 85       	ldd	r24, Z+9	; 0x09
    6488:	88 23       	and	r24, r24
    648a:	69 f0       	breq	.+26     	; 0x64a6 <StartComp+0x5e>
    648c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    6490:	60 93 d7 08 	sts	0x08D7, r22	; 0x8008d7 <timeTillDef>
    6494:	70 93 d8 08 	sts	0x08D8, r23	; 0x8008d8 <timeTillDef+0x1>
    6498:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <timeTillDef+0x2>
    649c:	90 93 da 08 	sts	0x08DA, r25	; 0x8008da <timeTillDef+0x3>
    64a0:	81 e0       	ldi	r24, 0x01	; 1
    64a2:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <Comp_1+0xa>
		if(PIN_COMPRESSOR_1 == 0)
    64a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    64aa:	85 fd       	sbrc	r24, 5
    64ac:	9c c0       	rjmp	.+312    	; 0x65e6 <StartComp+0x19e>
		{   
			
			Comp_1.compOn=1;
    64ae:	81 e0       	ldi	r24, 0x01	; 1
    64b0:	80 93 61 09 	sts	0x0961, r24	; 0x800961 <Comp_1+0xb>
			//if(Comp_2.compOn)vTaskDelay(5000);
			START_COMPRESSOR_1;
    64b4:	e2 e0       	ldi	r30, 0x02	; 2
    64b6:	f1 e0       	ldi	r31, 0x01	; 1
    64b8:	80 81       	ld	r24, Z
    64ba:	80 62       	ori	r24, 0x20	; 32
    64bc:	80 83       	st	Z, r24
			
			xSerialxPrintf(&xSerial3Port,"StartCompressor_1\r\n");
    64be:	89 ee       	ldi	r24, 0xE9	; 233
    64c0:	93 e0       	ldi	r25, 0x03	; 3
    64c2:	9f 93       	push	r25
    64c4:	8f 93       	push	r24
    64c6:	84 e9       	ldi	r24, 0x94	; 148
    64c8:	97 e0       	ldi	r25, 0x07	; 7
    64ca:	9f 93       	push	r25
    64cc:	8f 93       	push	r24
    64ce:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			
			timeStartComp_1=time(&current_time);
    64d2:	81 ef       	ldi	r24, 0xF1	; 241
    64d4:	98 e0       	ldi	r25, 0x08	; 8
    64d6:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    64da:	60 93 e5 08 	sts	0x08E5, r22	; 0x8008e5 <timeStartComp_1>
    64de:	70 93 e6 08 	sts	0x08E6, r23	; 0x8008e6 <timeStartComp_1+0x1>
    64e2:	80 93 e7 08 	sts	0x08E7, r24	; 0x8008e7 <timeStartComp_1+0x2>
    64e6:	90 93 e8 08 	sts	0x08E8, r25	; 0x8008e8 <timeStartComp_1+0x3>
			EEpromData.number_turnon_compressor_1+=1;
    64ea:	e6 ef       	ldi	r30, 0xF6	; 246
    64ec:	f8 e0       	ldi	r31, 0x08	; 8
    64ee:	86 ad       	ldd	r24, Z+62	; 0x3e
    64f0:	97 ad       	ldd	r25, Z+63	; 0x3f
    64f2:	01 96       	adiw	r24, 0x01	; 1
    64f4:	97 af       	std	Z+63, r25	; 0x3f
    64f6:	86 af       	std	Z+62, r24	; 0x3e
			//xSerialxPrintf(&xSerial3Port,"Number_turnon_Compressor_=%d\r\n",EEpromData.number_turnon_compressor_1);
			xTimerChangePeriod( xTStartCheckTrv_1,period, 100 );
    64f8:	0f 2e       	mov	r0, r31
    64fa:	f4 e6       	ldi	r31, 0x64	; 100
    64fc:	cf 2e       	mov	r12, r31
    64fe:	d1 2c       	mov	r13, r1
    6500:	e1 2c       	mov	r14, r1
    6502:	f1 2c       	mov	r15, r1
    6504:	f0 2d       	mov	r31, r0
    6506:	00 e0       	ldi	r16, 0x00	; 0
    6508:	10 e0       	ldi	r17, 0x00	; 0
    650a:	a5 01       	movw	r20, r10
    650c:	94 01       	movw	r18, r8
    650e:	64 e0       	ldi	r22, 0x04	; 4
    6510:	80 91 ef 08 	lds	r24, 0x08EF	; 0x8008ef <xTStartCheckTrv_1>
    6514:	90 91 f0 08 	lds	r25, 0x08F0	; 0x8008f0 <xTStartCheckTrv_1+0x1>
    6518:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
			xTimerStart(xTStartCheckErrors_1, 0);
    651c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    6520:	9b 01       	movw	r18, r22
    6522:	ac 01       	movw	r20, r24
    6524:	c1 2c       	mov	r12, r1
    6526:	d1 2c       	mov	r13, r1
    6528:	76 01       	movw	r14, r12
    652a:	61 e0       	ldi	r22, 0x01	; 1
    652c:	80 91 8d 0a 	lds	r24, 0x0A8D	; 0x800a8d <xTStartCheckErrors_1>
    6530:	90 91 8e 0a 	lds	r25, 0x0A8E	; 0x800a8e <xTStartCheckErrors_1+0x1>
    6534:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    6538:	0f 90       	pop	r0
    653a:	0f 90       	pop	r0
    653c:	0f 90       	pop	r0
    653e:	0f 90       	pop	r0
    6540:	52 c0       	rjmp	.+164    	; 0x65e6 <StartComp+0x19e>
	
		}
	}
	else if((*pxTimerID) == uxStartDelayCompTimer_2_ID) {
    6542:	8e 30       	cpi	r24, 0x0E	; 14
    6544:	09 f0       	breq	.+2      	; 0x6548 <StartComp+0x100>
    6546:	4f c0       	rjmp	.+158    	; 0x65e6 <StartComp+0x19e>
		xSerialxPrintf(&xSerial3Port,"StartCompressor_2\r\n");
    6548:	8d ef       	ldi	r24, 0xFD	; 253
    654a:	93 e0       	ldi	r25, 0x03	; 3
    654c:	9f 93       	push	r25
    654e:	8f 93       	push	r24
    6550:	84 e9       	ldi	r24, 0x94	; 148
    6552:	97 e0       	ldi	r25, 0x07	; 7
    6554:	9f 93       	push	r25
    6556:	8f 93       	push	r24
    6558:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_COMPRESSOR_2 == 0)
    655c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6560:	0f 90       	pop	r0
    6562:	0f 90       	pop	r0
    6564:	0f 90       	pop	r0
    6566:	0f 90       	pop	r0
    6568:	86 fd       	sbrc	r24, 6
    656a:	3d c0       	rjmp	.+122    	; 0x65e6 <StartComp+0x19e>
		{
			//if(Comp_1.compOn)vTaskDelay(5000);
			Comp_2.compOn=1;
    656c:	ec ed       	ldi	r30, 0xDC	; 220
    656e:	f9 e0       	ldi	r31, 0x09	; 9
    6570:	81 e0       	ldi	r24, 0x01	; 1
    6572:	83 87       	std	Z+11, r24	; 0x0b
			START_COMPRESSOR_2;
    6574:	a2 e0       	ldi	r26, 0x02	; 2
    6576:	b1 e0       	ldi	r27, 0x01	; 1
    6578:	8c 91       	ld	r24, X
    657a:	80 64       	ori	r24, 0x40	; 64
    657c:	8c 93       	st	X, r24
			
			
			Comp_2.switchToMode=false;
    657e:	10 82       	st	Z, r1
			
			timeStartComp_2=time(&current_time);
    6580:	81 ef       	ldi	r24, 0xF1	; 241
    6582:	98 e0       	ldi	r25, 0x08	; 8
    6584:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6588:	60 93 8f 0a 	sts	0x0A8F, r22	; 0x800a8f <timeStartComp_2>
    658c:	70 93 90 0a 	sts	0x0A90, r23	; 0x800a90 <timeStartComp_2+0x1>
    6590:	80 93 91 0a 	sts	0x0A91, r24	; 0x800a91 <timeStartComp_2+0x2>
    6594:	90 93 92 0a 	sts	0x0A92, r25	; 0x800a92 <timeStartComp_2+0x3>
			EEpromData.number_turnon_compressor_2+=1;
    6598:	e8 e4       	ldi	r30, 0x48	; 72
    659a:	f9 e0       	ldi	r31, 0x09	; 9
    659c:	80 81       	ld	r24, Z
    659e:	91 81       	ldd	r25, Z+1	; 0x01
    65a0:	01 96       	adiw	r24, 0x01	; 1
    65a2:	91 83       	std	Z+1, r25	; 0x01
    65a4:	80 83       	st	Z, r24
			xTimerChangePeriod( xTStartCheckTrv_2,period, 100 );
    65a6:	0f 2e       	mov	r0, r31
    65a8:	f4 e6       	ldi	r31, 0x64	; 100
    65aa:	cf 2e       	mov	r12, r31
    65ac:	d1 2c       	mov	r13, r1
    65ae:	e1 2c       	mov	r14, r1
    65b0:	f1 2c       	mov	r15, r1
    65b2:	f0 2d       	mov	r31, r0
    65b4:	00 e0       	ldi	r16, 0x00	; 0
    65b6:	10 e0       	ldi	r17, 0x00	; 0
    65b8:	a5 01       	movw	r20, r10
    65ba:	94 01       	movw	r18, r8
    65bc:	64 e0       	ldi	r22, 0x04	; 4
    65be:	80 91 c6 09 	lds	r24, 0x09C6	; 0x8009c6 <xTStartCheckTrv_2>
    65c2:	90 91 c7 09 	lds	r25, 0x09C7	; 0x8009c7 <xTStartCheckTrv_2+0x1>
    65c6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
			xTimerStart(xTStartCheckErrors_2, 0);
    65ca:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    65ce:	9b 01       	movw	r18, r22
    65d0:	ac 01       	movw	r20, r24
    65d2:	c1 2c       	mov	r12, r1
    65d4:	d1 2c       	mov	r13, r1
    65d6:	76 01       	movw	r14, r12
    65d8:	61 e0       	ldi	r22, 0x01	; 1
    65da:	80 91 dd 08 	lds	r24, 0x08DD	; 0x8008dd <xTStartCheckErrors_2>
    65de:	90 91 de 08 	lds	r25, 0x08DE	; 0x8008de <xTStartCheckErrors_2+0x1>
    65e2:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		}
	}
	
	
}
    65e6:	1f 91       	pop	r17
    65e8:	0f 91       	pop	r16
    65ea:	ff 90       	pop	r15
    65ec:	ef 90       	pop	r14
    65ee:	df 90       	pop	r13
    65f0:	cf 90       	pop	r12
    65f2:	bf 90       	pop	r11
    65f4:	af 90       	pop	r10
    65f6:	9f 90       	pop	r9
    65f8:	8f 90       	pop	r8
    65fa:	08 95       	ret

000065fc <SwitchRev_1_Time>:
	
	
}
//-------------------------------------------------------------------------
void SwitchRev_1_Time(TimerHandle_t xTimer)
{
    65fc:	cf 92       	push	r12
    65fe:	df 92       	push	r13
    6600:	ef 92       	push	r14
    6602:	ff 92       	push	r15
    6604:	0f 93       	push	r16
    6606:	1f 93       	push	r17
    6608:	cf 93       	push	r28
    660a:	df 93       	push	r29
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    660c:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    6610:	ec 01       	movw	r28, r24
	
	//xSerialxPrintf(&xSerial3Port,"SwitchRev_1\r\n");
	
	if((*pxTimerID) == uxSwitchRevOne_1_ID)
    6612:	88 81       	ld	r24, Y
    6614:	8c 30       	cpi	r24, 0x0C	; 12
    6616:	19 f5       	brne	.+70     	; 0x665e <SwitchRev_1_Time+0x62>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_ON_1_1\r\n");
    6618:	81 e1       	ldi	r24, 0x11	; 17
    661a:	94 e0       	ldi	r25, 0x04	; 4
    661c:	9f 93       	push	r25
    661e:	8f 93       	push	r24
    6620:	84 e9       	ldi	r24, 0x94	; 148
    6622:	97 e0       	ldi	r25, 0x07	; 7
    6624:	9f 93       	push	r25
    6626:	8f 93       	push	r24
    6628:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_REV_VALVE_1 == 0){START_REV_VALVE_1;}//
    662c:	0f 90       	pop	r0
    662e:	0f 90       	pop	r0
    6630:	0f 90       	pop	r0
    6632:	0f 90       	pop	r0
    6634:	94 99       	sbic	0x12, 4	; 18
    6636:	02 c0       	rjmp	.+4      	; 0x663c <SwitchRev_1_Time+0x40>
    6638:	a4 9a       	sbi	0x14, 4	; 20
    663a:	01 c0       	rjmp	.+2      	; 0x663e <SwitchRev_1_Time+0x42>
		else {STOP_REV_VALVE_1;}//xSerialxPrintf(&xSerial3Port,"SwitchRev_OFF_1\r\n");
    663c:	a4 98       	cbi	0x14, 4	; 20
		xTimerStart(xSwitchRevTwo_1_time, 0);
    663e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    6642:	9b 01       	movw	r18, r22
    6644:	ac 01       	movw	r20, r24
    6646:	c1 2c       	mov	r12, r1
    6648:	d1 2c       	mov	r13, r1
    664a:	76 01       	movw	r14, r12
    664c:	00 e0       	ldi	r16, 0x00	; 0
    664e:	10 e0       	ldi	r17, 0x00	; 0
    6650:	61 e0       	ldi	r22, 0x01	; 1
    6652:	80 91 68 0a 	lds	r24, 0x0A68	; 0x800a68 <xSwitchRevTwo_1_time>
    6656:	90 91 69 0a 	lds	r25, 0x0A69	; 0x800a69 <xSwitchRevTwo_1_time+0x1>
    665a:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if((*pxTimerID) == uxSwitchRevOne_2_ID)
    665e:	88 81       	ld	r24, Y
    6660:	88 31       	cpi	r24, 0x18	; 24
    6662:	19 f5       	brne	.+70     	; 0x66aa <SwitchRev_1_Time+0xae>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_2_1\r\n");
    6664:	84 e2       	ldi	r24, 0x24	; 36
    6666:	94 e0       	ldi	r25, 0x04	; 4
    6668:	9f 93       	push	r25
    666a:	8f 93       	push	r24
    666c:	84 e9       	ldi	r24, 0x94	; 148
    666e:	97 e0       	ldi	r25, 0x07	; 7
    6670:	9f 93       	push	r25
    6672:	8f 93       	push	r24
    6674:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		
		if(PIN_REV_VALVE_2 == 0)START_REV_VALVE_2;
    6678:	0f 90       	pop	r0
    667a:	0f 90       	pop	r0
    667c:	0f 90       	pop	r0
    667e:	0f 90       	pop	r0
    6680:	93 99       	sbic	0x12, 3	; 18
    6682:	02 c0       	rjmp	.+4      	; 0x6688 <SwitchRev_1_Time+0x8c>
    6684:	a3 9a       	sbi	0x14, 3	; 20
    6686:	01 c0       	rjmp	.+2      	; 0x668a <SwitchRev_1_Time+0x8e>
		else STOP_REV_VALVE_2;
    6688:	a3 98       	cbi	0x14, 3	; 20
		xTimerStart(xSwitchRevTwo_2_time, 0);
    668a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    668e:	9b 01       	movw	r18, r22
    6690:	ac 01       	movw	r20, r24
    6692:	c1 2c       	mov	r12, r1
    6694:	d1 2c       	mov	r13, r1
    6696:	76 01       	movw	r14, r12
    6698:	00 e0       	ldi	r16, 0x00	; 0
    669a:	10 e0       	ldi	r17, 0x00	; 0
    669c:	61 e0       	ldi	r22, 0x01	; 1
    669e:	80 91 83 0a 	lds	r24, 0x0A83	; 0x800a83 <xSwitchRevTwo_2_time>
    66a2:	90 91 84 0a 	lds	r25, 0x0A84	; 0x800a84 <xSwitchRevTwo_2_time+0x1>
    66a6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
}
    66aa:	df 91       	pop	r29
    66ac:	cf 91       	pop	r28
    66ae:	1f 91       	pop	r17
    66b0:	0f 91       	pop	r16
    66b2:	ff 90       	pop	r15
    66b4:	ef 90       	pop	r14
    66b6:	df 90       	pop	r13
    66b8:	cf 90       	pop	r12
    66ba:	08 95       	ret

000066bc <activateTimers>:
const portBASE_TYPE uxStopDelayRevVTimer_2_ID		= 23;
const portBASE_TYPE uxSwitchRevOne_2_ID				= 24;
const portBASE_TYPE uxSwitchRevTwo_2_ID				= 25;

void activateTimers(xCompressor *comp)
{
    66bc:	ef 92       	push	r14
    66be:	ff 92       	push	r15
    66c0:	0f 93       	push	r16
    66c2:	1f 93       	push	r17
    66c4:	cf 93       	push	r28
    66c6:	df 93       	push	r29
    66c8:	ec 01       	movw	r28, r24
	
	
	if(comp->Index==1)
    66ca:	fc 01       	movw	r30, r24
    66cc:	e2 59       	subi	r30, 0x92	; 146
    66ce:	ff 4f       	sbci	r31, 0xFF	; 255
    66d0:	80 81       	ld	r24, Z
    66d2:	91 81       	ldd	r25, Z+1	; 0x01
    66d4:	01 97       	sbiw	r24, 0x01	; 1
    66d6:	09 f0       	breq	.+2      	; 0x66da <activateTimers+0x1e>
    66d8:	fc c0       	rjmp	.+504    	; 0x68d2 <activateTimers+0x216>
	{
		
		xStartRevValve_1   =	xTimerCreate("StRevV_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayRevVTimer_1_ID, StartReversingValve);//(EEpromData.Revers_Valve_delay*1000) 
    66da:	0f 2e       	mov	r0, r31
    66dc:	f6 e7       	ldi	r31, 0x76	; 118
    66de:	ef 2e       	mov	r14, r31
    66e0:	fb e2       	ldi	r31, 0x2B	; 43
    66e2:	ff 2e       	mov	r15, r31
    66e4:	f0 2d       	mov	r31, r0
    66e6:	09 e1       	ldi	r16, 0x19	; 25
    66e8:	16 e0       	ldi	r17, 0x06	; 6
    66ea:	20 e0       	ldi	r18, 0x00	; 0
    66ec:	48 e5       	ldi	r20, 0x58	; 88
    66ee:	5b e1       	ldi	r21, 0x1B	; 27
    66f0:	60 e0       	ldi	r22, 0x00	; 0
    66f2:	70 e0       	ldi	r23, 0x00	; 0
    66f4:	84 e3       	ldi	r24, 0x34	; 52
    66f6:	94 e0       	ldi	r25, 0x04	; 4
    66f8:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    66fc:	90 93 96 0a 	sts	0x0A96, r25	; 0x800a96 <xStartRevValve_1+0x1>
    6700:	80 93 95 0a 	sts	0x0A95, r24	; 0x800a95 <xStartRevValve_1>
		xStartThreeWay     =	xTimerCreate("StThreeW",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayThreeVTimer_1_ID, StartThreeWay);//(EEpromData.Three_Way_delay*1000)
    6704:	0f 2e       	mov	r0, r31
    6706:	f0 e0       	ldi	r31, 0x00	; 0
    6708:	ef 2e       	mov	r14, r31
    670a:	fe e2       	ldi	r31, 0x2E	; 46
    670c:	ff 2e       	mov	r15, r31
    670e:	f0 2d       	mov	r31, r0
    6710:	08 e1       	ldi	r16, 0x18	; 24
    6712:	16 e0       	ldi	r17, 0x06	; 6
    6714:	20 e0       	ldi	r18, 0x00	; 0
    6716:	48 e5       	ldi	r20, 0x58	; 88
    6718:	5b e1       	ldi	r21, 0x1B	; 27
    671a:	60 e0       	ldi	r22, 0x00	; 0
    671c:	70 e0       	ldi	r23, 0x00	; 0
    671e:	8d e3       	ldi	r24, 0x3D	; 61
    6720:	94 e0       	ldi	r25, 0x04	; 4
    6722:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6726:	90 93 cb 09 	sts	0x09CB, r25	; 0x8009cb <xStartThreeWay+0x1>
    672a:	80 93 ca 09 	sts	0x09CA, r24	; 0x8009ca <xStartThreeWay>
		xStartHeatPump_1   =	xTimerCreate("StHeatP_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayHeatPTimer_1_ID, StartHeatPump);//(EEpromData.HeatingPump_delay*1000) 
    672e:	0f 2e       	mov	r0, r31
    6730:	fa e0       	ldi	r31, 0x0A	; 10
    6732:	ef 2e       	mov	r14, r31
    6734:	fa e2       	ldi	r31, 0x2A	; 42
    6736:	ff 2e       	mov	r15, r31
    6738:	f0 2d       	mov	r31, r0
    673a:	0a e1       	ldi	r16, 0x1A	; 26
    673c:	16 e0       	ldi	r17, 0x06	; 6
    673e:	20 e0       	ldi	r18, 0x00	; 0
    6740:	48 e5       	ldi	r20, 0x58	; 88
    6742:	5b e1       	ldi	r21, 0x1B	; 27
    6744:	60 e0       	ldi	r22, 0x00	; 0
    6746:	70 e0       	ldi	r23, 0x00	; 0
    6748:	86 e4       	ldi	r24, 0x46	; 70
    674a:	94 e0       	ldi	r25, 0x04	; 4
    674c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6750:	90 93 6b 0a 	sts	0x0A6B, r25	; 0x800a6b <xStartHeatPump_1+0x1>
    6754:	80 93 6a 0a 	sts	0x0A6A, r24	; 0x800a6a <xStartHeatPump_1>
		xStartCompressor_1 =	xTimerCreate("StComp_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayCompTimer_1_ID, StartComp);//(EEpromData.Compressor_delay*1000)
    6758:	0f 2e       	mov	r0, r31
    675a:	f4 e2       	ldi	r31, 0x24	; 36
    675c:	ef 2e       	mov	r14, r31
    675e:	f2 e3       	ldi	r31, 0x32	; 50
    6760:	ff 2e       	mov	r15, r31
    6762:	f0 2d       	mov	r31, r0
    6764:	0b e1       	ldi	r16, 0x1B	; 27
    6766:	16 e0       	ldi	r17, 0x06	; 6
    6768:	20 e0       	ldi	r18, 0x00	; 0
    676a:	48 e5       	ldi	r20, 0x58	; 88
    676c:	5b e1       	ldi	r21, 0x1B	; 27
    676e:	60 e0       	ldi	r22, 0x00	; 0
    6770:	70 e0       	ldi	r23, 0x00	; 0
    6772:	80 e5       	ldi	r24, 0x50	; 80
    6774:	94 e0       	ldi	r25, 0x04	; 4
    6776:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    677a:	90 93 6d 0a 	sts	0x0A6D, r25	; 0x800a6d <xStartCompressor_1+0x1>
    677e:	80 93 6c 0a 	sts	0x0A6C, r24	; 0x800a6c <xStartCompressor_1>
		xTStartCheckErrors_1 =	xTimerCreate("ChErr_1",			300000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayChekErrTimer_1_ID, StartCheckErrors);
    6782:	0f 2e       	mov	r0, r31
    6784:	fa e1       	ldi	r31, 0x1A	; 26
    6786:	ef 2e       	mov	r14, r31
    6788:	fb e2       	ldi	r31, 0x2B	; 43
    678a:	ff 2e       	mov	r15, r31
    678c:	f0 2d       	mov	r31, r0
    678e:	06 e1       	ldi	r16, 0x16	; 22
    6790:	16 e0       	ldi	r17, 0x06	; 6
    6792:	20 e0       	ldi	r18, 0x00	; 0
    6794:	40 ee       	ldi	r20, 0xE0	; 224
    6796:	53 e9       	ldi	r21, 0x93	; 147
    6798:	64 e0       	ldi	r22, 0x04	; 4
    679a:	70 e0       	ldi	r23, 0x00	; 0
    679c:	89 e5       	ldi	r24, 0x59	; 89
    679e:	94 e0       	ldi	r25, 0x04	; 4
    67a0:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    67a4:	90 93 8e 0a 	sts	0x0A8E, r25	; 0x800a8e <xTStartCheckErrors_1+0x1>
    67a8:	80 93 8d 0a 	sts	0x0A8D, r24	; 0x800a8d <xTStartCheckErrors_1>
		xTStartCheckTrv_1 =		xTimerCreate("ChTrv_1",			7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayChekTrvTimer_1_ID, StartCheckTrv);//(EEpromData.TRV_Delay*1000)
    67ac:	0f 2e       	mov	r0, r31
    67ae:	fa e4       	ldi	r31, 0x4A	; 74
    67b0:	ef 2e       	mov	r14, r31
    67b2:	fb e2       	ldi	r31, 0x2B	; 43
    67b4:	ff 2e       	mov	r15, r31
    67b6:	f0 2d       	mov	r31, r0
    67b8:	07 e1       	ldi	r16, 0x17	; 23
    67ba:	16 e0       	ldi	r17, 0x06	; 6
    67bc:	20 e0       	ldi	r18, 0x00	; 0
    67be:	48 e5       	ldi	r20, 0x58	; 88
    67c0:	5b e1       	ldi	r21, 0x1B	; 27
    67c2:	60 e0       	ldi	r22, 0x00	; 0
    67c4:	70 e0       	ldi	r23, 0x00	; 0
    67c6:	81 e6       	ldi	r24, 0x61	; 97
    67c8:	94 e0       	ldi	r25, 0x04	; 4
    67ca:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    67ce:	90 93 f0 08 	sts	0x08F0, r25	; 0x8008f0 <xTStartCheckTrv_1+0x1>
    67d2:	80 93 ef 08 	sts	0x08EF, r24	; 0x8008ef <xTStartCheckTrv_1>
		//----------stop

		xSwitchRevOne_1_time =	xTimerCreate("swRevOne_1",		5000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxSwitchRevOne_1_ID, SwitchRev_1_Time);
    67d6:	0f 2e       	mov	r0, r31
    67d8:	fe ef       	ldi	r31, 0xFE	; 254
    67da:	ef 2e       	mov	r14, r31
    67dc:	f2 e3       	ldi	r31, 0x32	; 50
    67de:	ff 2e       	mov	r15, r31
    67e0:	f0 2d       	mov	r31, r0
    67e2:	01 e1       	ldi	r16, 0x11	; 17
    67e4:	16 e0       	ldi	r17, 0x06	; 6
    67e6:	20 e0       	ldi	r18, 0x00	; 0
    67e8:	48 e8       	ldi	r20, 0x88	; 136
    67ea:	53 e1       	ldi	r21, 0x13	; 19
    67ec:	60 e0       	ldi	r22, 0x00	; 0
    67ee:	70 e0       	ldi	r23, 0x00	; 0
    67f0:	89 e6       	ldi	r24, 0x69	; 105
    67f2:	94 e0       	ldi	r25, 0x04	; 4
    67f4:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    67f8:	90 93 ea 08 	sts	0x08EA, r25	; 0x8008ea <xSwitchRevOne_1_time+0x1>
    67fc:	80 93 e9 08 	sts	0x08E9, r24	; 0x8008e9 <xSwitchRevOne_1_time>
		xSwitchRevTwo_1_time =	xTimerCreate("swRevTwo_1",		5000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxSwitchRevTwo_1_ID, SwitchRev_2_Time);
    6800:	0f 2e       	mov	r0, r31
    6802:	f1 eb       	ldi	r31, 0xB1	; 177
    6804:	ef 2e       	mov	r14, r31
    6806:	fa e2       	ldi	r31, 0x2A	; 42
    6808:	ff 2e       	mov	r15, r31
    680a:	f0 2d       	mov	r31, r0
    680c:	00 e1       	ldi	r16, 0x10	; 16
    680e:	16 e0       	ldi	r17, 0x06	; 6
    6810:	20 e0       	ldi	r18, 0x00	; 0
    6812:	48 e8       	ldi	r20, 0x88	; 136
    6814:	53 e1       	ldi	r21, 0x13	; 19
    6816:	60 e0       	ldi	r22, 0x00	; 0
    6818:	70 e0       	ldi	r23, 0x00	; 0
    681a:	84 e7       	ldi	r24, 0x74	; 116
    681c:	94 e0       	ldi	r25, 0x04	; 4
    681e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6822:	90 93 69 0a 	sts	0x0A69, r25	; 0x800a69 <xSwitchRevTwo_1_time+0x1>
    6826:	80 93 68 0a 	sts	0x0A68, r24	; 0x800a68 <xSwitchRevTwo_1_time>
		xStopHeatPump_1   =		xTimerCreate("offHeatP_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayHeatPTimer_1_ID, HeatPump_Stop);//(EEpromData.HeatingPump_delay*1000)
    682a:	0f 2e       	mov	r0, r31
    682c:	f6 ec       	ldi	r31, 0xC6	; 198
    682e:	ef 2e       	mov	r14, r31
    6830:	fe e2       	ldi	r31, 0x2E	; 46
    6832:	ff 2e       	mov	r15, r31
    6834:	f0 2d       	mov	r31, r0
    6836:	05 e1       	ldi	r16, 0x15	; 21
    6838:	16 e0       	ldi	r17, 0x06	; 6
    683a:	20 e0       	ldi	r18, 0x00	; 0
    683c:	48 e5       	ldi	r20, 0x58	; 88
    683e:	5b e1       	ldi	r21, 0x1B	; 27
    6840:	60 e0       	ldi	r22, 0x00	; 0
    6842:	70 e0       	ldi	r23, 0x00	; 0
    6844:	8f e7       	ldi	r24, 0x7F	; 127
    6846:	94 e0       	ldi	r25, 0x04	; 4
    6848:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    684c:	90 93 e4 08 	sts	0x08E4, r25	; 0x8008e4 <xStopHeatPump_1+0x1>
    6850:	80 93 e3 08 	sts	0x08E3, r24	; 0x8008e3 <xStopHeatPump_1>
		xStopThreeWay     =		xTimerCreate("offThreeW",		7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayThreeVTimer_1_ID, ThreeWay_Stop);//(EEpromData.Three_Way_delay*1000)
    6854:	0f 2e       	mov	r0, r31
    6856:	f3 ed       	ldi	r31, 0xD3	; 211
    6858:	ef 2e       	mov	r14, r31
    685a:	ff e2       	ldi	r31, 0x2F	; 47
    685c:	ff 2e       	mov	r15, r31
    685e:	f0 2d       	mov	r31, r0
    6860:	02 e1       	ldi	r16, 0x12	; 18
    6862:	16 e0       	ldi	r17, 0x06	; 6
    6864:	20 e0       	ldi	r18, 0x00	; 0
    6866:	48 e5       	ldi	r20, 0x58	; 88
    6868:	5b e1       	ldi	r21, 0x1B	; 27
    686a:	60 e0       	ldi	r22, 0x00	; 0
    686c:	70 e0       	ldi	r23, 0x00	; 0
    686e:	8a e8       	ldi	r24, 0x8A	; 138
    6870:	94 e0       	ldi	r25, 0x04	; 4
    6872:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6876:	90 93 c9 09 	sts	0x09C9, r25	; 0x8009c9 <xStopThreeWay+0x1>
    687a:	80 93 c8 09 	sts	0x09C8, r24	; 0x8009c8 <xStopThreeWay>
		xStopRevValve_1   =		xTimerCreate("offRevV_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayRevVTimer_1_ID, Revers_Stop);//(EEpromData.Revers_Valve_delay*1000)
    687e:	0f 2e       	mov	r0, r31
    6880:	fe e5       	ldi	r31, 0x5E	; 94
    6882:	ef 2e       	mov	r14, r31
    6884:	f0 e3       	ldi	r31, 0x30	; 48
    6886:	ff 2e       	mov	r15, r31
    6888:	f0 2d       	mov	r31, r0
    688a:	03 e1       	ldi	r16, 0x13	; 19
    688c:	16 e0       	ldi	r17, 0x06	; 6
    688e:	20 e0       	ldi	r18, 0x00	; 0
    6890:	48 e5       	ldi	r20, 0x58	; 88
    6892:	5b e1       	ldi	r21, 0x1B	; 27
    6894:	60 e0       	ldi	r22, 0x00	; 0
    6896:	70 e0       	ldi	r23, 0x00	; 0
    6898:	84 e9       	ldi	r24, 0x94	; 148
    689a:	94 e0       	ldi	r25, 0x04	; 4
    689c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    68a0:	90 93 5f 0a 	sts	0x0A5F, r25	; 0x800a5f <xStopRevValve_1+0x1>
    68a4:	80 93 5e 0a 	sts	0x0A5E, r24	; 0x800a5e <xStopRevValve_1>
		xStopSource_1   =		xTimerCreate("offSourceP_1",	7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelaySourcePTimer_1_ID, SorcePump_Stop);//(EEpromData.Source_Pump_delay*1000)
    68a8:	0f 2e       	mov	r0, r31
    68aa:	f6 e5       	ldi	r31, 0x56	; 86
    68ac:	ef 2e       	mov	r14, r31
    68ae:	f1 e3       	ldi	r31, 0x31	; 49
    68b0:	ff 2e       	mov	r15, r31
    68b2:	f0 2d       	mov	r31, r0
    68b4:	04 e1       	ldi	r16, 0x14	; 20
    68b6:	16 e0       	ldi	r17, 0x06	; 6
    68b8:	20 e0       	ldi	r18, 0x00	; 0
    68ba:	48 e5       	ldi	r20, 0x58	; 88
    68bc:	5b e1       	ldi	r21, 0x1B	; 27
    68be:	60 e0       	ldi	r22, 0x00	; 0
    68c0:	70 e0       	ldi	r23, 0x00	; 0
    68c2:	8e e9       	ldi	r24, 0x9E	; 158
    68c4:	94 e0       	ldi	r25, 0x04	; 4
    68c6:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    68ca:	90 93 ee 08 	sts	0x08EE, r25	; 0x8008ee <xStopSource_1+0x1>
    68ce:	80 93 ed 08 	sts	0x08ED, r24	; 0x8008ed <xStopSource_1>
	}
	if (comp->Index==2)
    68d2:	c2 59       	subi	r28, 0x92	; 146
    68d4:	df 4f       	sbci	r29, 0xFF	; 255
    68d6:	88 81       	ld	r24, Y
    68d8:	99 81       	ldd	r25, Y+1	; 0x01
    68da:	02 97       	sbiw	r24, 0x02	; 2
    68dc:	09 f0       	breq	.+2      	; 0x68e0 <activateTimers+0x224>
    68de:	d2 c0       	rjmp	.+420    	; 0x6a84 <activateTimers+0x3c8>
	{
		
		xStartRevValve_2   =	xTimerCreate("StRevV_2",		7000, pdFALSE, (void*) &uxStartDelayRevVTimer_2_ID, StartReversingValve);
    68e0:	0f 2e       	mov	r0, r31
    68e2:	f6 e7       	ldi	r31, 0x76	; 118
    68e4:	ef 2e       	mov	r14, r31
    68e6:	fb e2       	ldi	r31, 0x2B	; 43
    68e8:	ff 2e       	mov	r15, r31
    68ea:	f0 2d       	mov	r31, r0
    68ec:	0d e0       	ldi	r16, 0x0D	; 13
    68ee:	16 e0       	ldi	r17, 0x06	; 6
    68f0:	20 e0       	ldi	r18, 0x00	; 0
    68f2:	48 e5       	ldi	r20, 0x58	; 88
    68f4:	5b e1       	ldi	r21, 0x1B	; 27
    68f6:	60 e0       	ldi	r22, 0x00	; 0
    68f8:	70 e0       	ldi	r23, 0x00	; 0
    68fa:	8b ea       	ldi	r24, 0xAB	; 171
    68fc:	94 e0       	ldi	r25, 0x04	; 4
    68fe:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6902:	90 93 57 0a 	sts	0x0A57, r25	; 0x800a57 <xStartRevValve_2+0x1>
    6906:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <xStartRevValve_2>
		xStartHeatPump_2   =	xTimerCreate("StHeatP_2",		7000, pdFALSE, (void*) &uxStartDelayHeatPTimer_2_ID, StartHeatPump);
    690a:	0f 2e       	mov	r0, r31
    690c:	fa e0       	ldi	r31, 0x0A	; 10
    690e:	ef 2e       	mov	r14, r31
    6910:	fa e2       	ldi	r31, 0x2A	; 42
    6912:	ff 2e       	mov	r15, r31
    6914:	f0 2d       	mov	r31, r0
    6916:	0e e0       	ldi	r16, 0x0E	; 14
    6918:	16 e0       	ldi	r17, 0x06	; 6
    691a:	20 e0       	ldi	r18, 0x00	; 0
    691c:	48 e5       	ldi	r20, 0x58	; 88
    691e:	5b e1       	ldi	r21, 0x1B	; 27
    6920:	60 e0       	ldi	r22, 0x00	; 0
    6922:	70 e0       	ldi	r23, 0x00	; 0
    6924:	84 eb       	ldi	r24, 0xB4	; 180
    6926:	94 e0       	ldi	r25, 0x04	; 4
    6928:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    692c:	90 93 cd 09 	sts	0x09CD, r25	; 0x8009cd <xStartHeatPump_2+0x1>
    6930:	80 93 cc 09 	sts	0x09CC, r24	; 0x8009cc <xStartHeatPump_2>
		xStartCompressor_2 =	xTimerCreate("StComp_2",		7000, pdFALSE, (void*) &uxStartDelayCompTimer_2_ID, StartComp);
    6934:	0f 2e       	mov	r0, r31
    6936:	f4 e2       	ldi	r31, 0x24	; 36
    6938:	ef 2e       	mov	r14, r31
    693a:	f2 e3       	ldi	r31, 0x32	; 50
    693c:	ff 2e       	mov	r15, r31
    693e:	f0 2d       	mov	r31, r0
    6940:	0f e0       	ldi	r16, 0x0F	; 15
    6942:	16 e0       	ldi	r17, 0x06	; 6
    6944:	20 e0       	ldi	r18, 0x00	; 0
    6946:	48 e5       	ldi	r20, 0x58	; 88
    6948:	5b e1       	ldi	r21, 0x1B	; 27
    694a:	60 e0       	ldi	r22, 0x00	; 0
    694c:	70 e0       	ldi	r23, 0x00	; 0
    694e:	8e eb       	ldi	r24, 0xBE	; 190
    6950:	94 e0       	ldi	r25, 0x04	; 4
    6952:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6956:	90 93 7f 0a 	sts	0x0A7F, r25	; 0x800a7f <xStartCompressor_2+0x1>
    695a:	80 93 7e 0a 	sts	0x0A7E, r24	; 0x800a7e <xStartCompressor_2>
		xTStartCheckErrors_2 =	xTimerCreate("ChErr_2",			300000, pdFALSE, (void*) &uxStartDelayChekErrTimer_2_ID, StartCheckErrors);
    695e:	0f 2e       	mov	r0, r31
    6960:	fa e1       	ldi	r31, 0x1A	; 26
    6962:	ef 2e       	mov	r14, r31
    6964:	fb e2       	ldi	r31, 0x2B	; 43
    6966:	ff 2e       	mov	r15, r31
    6968:	f0 2d       	mov	r31, r0
    696a:	0b e0       	ldi	r16, 0x0B	; 11
    696c:	16 e0       	ldi	r17, 0x06	; 6
    696e:	20 e0       	ldi	r18, 0x00	; 0
    6970:	40 ee       	ldi	r20, 0xE0	; 224
    6972:	53 e9       	ldi	r21, 0x93	; 147
    6974:	64 e0       	ldi	r22, 0x04	; 4
    6976:	70 e0       	ldi	r23, 0x00	; 0
    6978:	87 ec       	ldi	r24, 0xC7	; 199
    697a:	94 e0       	ldi	r25, 0x04	; 4
    697c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6980:	90 93 de 08 	sts	0x08DE, r25	; 0x8008de <xTStartCheckErrors_2+0x1>
    6984:	80 93 dd 08 	sts	0x08DD, r24	; 0x8008dd <xTStartCheckErrors_2>
		xTStartCheckTrv_2 =		xTimerCreate("ChTrv_2",			7000, pdFALSE, (void*) &uxStartDelayChekTrvTimer_2_ID, StartCheckTrv);
    6988:	0f 2e       	mov	r0, r31
    698a:	fa e4       	ldi	r31, 0x4A	; 74
    698c:	ef 2e       	mov	r14, r31
    698e:	fb e2       	ldi	r31, 0x2B	; 43
    6990:	ff 2e       	mov	r15, r31
    6992:	f0 2d       	mov	r31, r0
    6994:	0c e0       	ldi	r16, 0x0C	; 12
    6996:	16 e0       	ldi	r17, 0x06	; 6
    6998:	20 e0       	ldi	r18, 0x00	; 0
    699a:	48 e5       	ldi	r20, 0x58	; 88
    699c:	5b e1       	ldi	r21, 0x1B	; 27
    699e:	60 e0       	ldi	r22, 0x00	; 0
    69a0:	70 e0       	ldi	r23, 0x00	; 0
    69a2:	8f ec       	ldi	r24, 0xCF	; 207
    69a4:	94 e0       	ldi	r25, 0x04	; 4
    69a6:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    69aa:	90 93 c7 09 	sts	0x09C7, r25	; 0x8009c7 <xTStartCheckTrv_2+0x1>
    69ae:	80 93 c6 09 	sts	0x09C6, r24	; 0x8009c6 <xTStartCheckTrv_2>
		//---------stop
		xSwitchRevOne_2_time =	xTimerCreate("swRevOne_2",		5000, pdFALSE, (void*) &uxSwitchRevOne_2_ID, SwitchRev_1_Time);
    69b2:	0f 2e       	mov	r0, r31
    69b4:	fe ef       	ldi	r31, 0xFE	; 254
    69b6:	ef 2e       	mov	r14, r31
    69b8:	f2 e3       	ldi	r31, 0x32	; 50
    69ba:	ff 2e       	mov	r15, r31
    69bc:	f0 2d       	mov	r31, r0
    69be:	07 e0       	ldi	r16, 0x07	; 7
    69c0:	16 e0       	ldi	r17, 0x06	; 6
    69c2:	20 e0       	ldi	r18, 0x00	; 0
    69c4:	48 e8       	ldi	r20, 0x88	; 136
    69c6:	53 e1       	ldi	r21, 0x13	; 19
    69c8:	60 e0       	ldi	r22, 0x00	; 0
    69ca:	70 e0       	ldi	r23, 0x00	; 0
    69cc:	87 ed       	ldi	r24, 0xD7	; 215
    69ce:	94 e0       	ldi	r25, 0x04	; 4
    69d0:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    69d4:	90 93 9f 0a 	sts	0x0A9F, r25	; 0x800a9f <xSwitchRevOne_2_time+0x1>
    69d8:	80 93 9e 0a 	sts	0x0A9E, r24	; 0x800a9e <xSwitchRevOne_2_time>
		xSwitchRevTwo_2_time =	xTimerCreate("swRevTwo_2",		5000, pdFALSE, (void*) &uxSwitchRevTwo_2_ID, SwitchRev_2_Time);
    69dc:	0f 2e       	mov	r0, r31
    69de:	f1 eb       	ldi	r31, 0xB1	; 177
    69e0:	ef 2e       	mov	r14, r31
    69e2:	fa e2       	ldi	r31, 0x2A	; 42
    69e4:	ff 2e       	mov	r15, r31
    69e6:	f0 2d       	mov	r31, r0
    69e8:	06 e0       	ldi	r16, 0x06	; 6
    69ea:	16 e0       	ldi	r17, 0x06	; 6
    69ec:	20 e0       	ldi	r18, 0x00	; 0
    69ee:	48 e8       	ldi	r20, 0x88	; 136
    69f0:	53 e1       	ldi	r21, 0x13	; 19
    69f2:	60 e0       	ldi	r22, 0x00	; 0
    69f4:	70 e0       	ldi	r23, 0x00	; 0
    69f6:	82 ee       	ldi	r24, 0xE2	; 226
    69f8:	94 e0       	ldi	r25, 0x04	; 4
    69fa:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    69fe:	90 93 84 0a 	sts	0x0A84, r25	; 0x800a84 <xSwitchRevTwo_2_time+0x1>
    6a02:	80 93 83 0a 	sts	0x0A83, r24	; 0x800a83 <xSwitchRevTwo_2_time>
		xStopHeatPump_2   =		xTimerCreate("offHeatP_2",		7000, pdFALSE, (void*) &uxStopDelayHeatPTimer_2_ID, HeatPump_Stop);
    6a06:	0f 2e       	mov	r0, r31
    6a08:	f6 ec       	ldi	r31, 0xC6	; 198
    6a0a:	ef 2e       	mov	r14, r31
    6a0c:	fe e2       	ldi	r31, 0x2E	; 46
    6a0e:	ff 2e       	mov	r15, r31
    6a10:	f0 2d       	mov	r31, r0
    6a12:	0a e0       	ldi	r16, 0x0A	; 10
    6a14:	16 e0       	ldi	r17, 0x06	; 6
    6a16:	20 e0       	ldi	r18, 0x00	; 0
    6a18:	48 e5       	ldi	r20, 0x58	; 88
    6a1a:	5b e1       	ldi	r21, 0x1B	; 27
    6a1c:	60 e0       	ldi	r22, 0x00	; 0
    6a1e:	70 e0       	ldi	r23, 0x00	; 0
    6a20:	8d ee       	ldi	r24, 0xED	; 237
    6a22:	94 e0       	ldi	r25, 0x04	; 4
    6a24:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6a28:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <xStopHeatPump_2+0x1>
    6a2c:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <xStopHeatPump_2>
		xStopRevValve_2    =	xTimerCreate("offRevV_2",		7000, pdFALSE, (void*) &uxStopDelayRevVTimer_2_ID, Revers_Stop);
    6a30:	0f 2e       	mov	r0, r31
    6a32:	fe e5       	ldi	r31, 0x5E	; 94
    6a34:	ef 2e       	mov	r14, r31
    6a36:	f0 e3       	ldi	r31, 0x30	; 48
    6a38:	ff 2e       	mov	r15, r31
    6a3a:	f0 2d       	mov	r31, r0
    6a3c:	08 e0       	ldi	r16, 0x08	; 8
    6a3e:	16 e0       	ldi	r17, 0x06	; 6
    6a40:	20 e0       	ldi	r18, 0x00	; 0
    6a42:	48 e5       	ldi	r20, 0x58	; 88
    6a44:	5b e1       	ldi	r21, 0x1B	; 27
    6a46:	60 e0       	ldi	r22, 0x00	; 0
    6a48:	70 e0       	ldi	r23, 0x00	; 0
    6a4a:	88 ef       	ldi	r24, 0xF8	; 248
    6a4c:	94 e0       	ldi	r25, 0x04	; 4
    6a4e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6a52:	90 93 ec 08 	sts	0x08EC, r25	; 0x8008ec <xStopRevValve_2+0x1>
    6a56:	80 93 eb 08 	sts	0x08EB, r24	; 0x8008eb <xStopRevValve_2>
		xStopSource_2   =		xTimerCreate("offSourceP_2",	7000, pdFALSE, (void*) &uxStopDelaySourcePTimer_2_ID, SorcePump_Stop);
    6a5a:	0f 2e       	mov	r0, r31
    6a5c:	f6 e5       	ldi	r31, 0x56	; 86
    6a5e:	ef 2e       	mov	r14, r31
    6a60:	f1 e3       	ldi	r31, 0x31	; 49
    6a62:	ff 2e       	mov	r15, r31
    6a64:	f0 2d       	mov	r31, r0
    6a66:	09 e0       	ldi	r16, 0x09	; 9
    6a68:	16 e0       	ldi	r17, 0x06	; 6
    6a6a:	20 e0       	ldi	r18, 0x00	; 0
    6a6c:	48 e5       	ldi	r20, 0x58	; 88
    6a6e:	5b e1       	ldi	r21, 0x1B	; 27
    6a70:	60 e0       	ldi	r22, 0x00	; 0
    6a72:	70 e0       	ldi	r23, 0x00	; 0
    6a74:	82 e0       	ldi	r24, 0x02	; 2
    6a76:	95 e0       	ldi	r25, 0x05	; 5
    6a78:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6a7c:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <xStopSource_2+0x1>
    6a80:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <xStopSource_2>
	}
	
	
}
    6a84:	df 91       	pop	r29
    6a86:	cf 91       	pop	r28
    6a88:	1f 91       	pop	r17
    6a8a:	0f 91       	pop	r16
    6a8c:	ff 90       	pop	r15
    6a8e:	ef 90       	pop	r14
    6a90:	08 95       	ret

00006a92 <startDefrost>:
//------------------------------------------------
void startDefrost(xCompressor *comp,xEEdata* eeData){
    6a92:	fb 01       	movw	r30, r22
	_heatWater=eeData->heatWater;
    6a94:	81 e0       	ldi	r24, 0x01	; 1
    6a96:	95 a1       	ldd	r25, Z+37	; 0x25
    6a98:	91 11       	cpse	r25, r1
    6a9a:	01 c0       	rjmp	.+2      	; 0x6a9e <startDefrost+0xc>
    6a9c:	80 e0       	ldi	r24, 0x00	; 0
    6a9e:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <_heatWater>
	_heat =eeData->heat;
    6aa2:	81 e0       	ldi	r24, 0x01	; 1
    6aa4:	96 a1       	ldd	r25, Z+38	; 0x26
    6aa6:	91 11       	cpse	r25, r1
    6aa8:	01 c0       	rjmp	.+2      	; 0x6aac <startDefrost+0x1a>
    6aaa:	80 e0       	ldi	r24, 0x00	; 0
    6aac:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <_heat>
	_cool =eeData->cool;
    6ab0:	81 e0       	ldi	r24, 0x01	; 1
    6ab2:	97 a1       	ldd	r25, Z+39	; 0x27
    6ab4:	91 11       	cpse	r25, r1
    6ab6:	01 c0       	rjmp	.+2      	; 0x6aba <startDefrost+0x28>
    6ab8:	80 e0       	ldi	r24, 0x00	; 0
    6aba:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <_cool>
	eeData->heatWater=false;
    6abe:	15 a2       	std	Z+37, r1	; 0x25
	eeData->heat =false;
    6ac0:	16 a2       	std	Z+38, r1	; 0x26
	eeData->cool =true;
    6ac2:	81 e0       	ldi	r24, 0x01	; 1
    6ac4:	87 a3       	std	Z+39, r24	; 0x27
    6ac6:	08 95       	ret

00006ac8 <stopDefrost>:
	//Comp_Stop(comp);
		
}
void stopDefrost(xCompressor *comp,xEEdata* eeData){
    6ac8:	fb 01       	movw	r30, r22
	
	//Comp_Stop(comp);
	//eeData->heatWater=false;
	//eeData->heat =true;
	//eeData->cool =false;
	eeData->heatWater=_heatWater;
    6aca:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <_heatWater>
    6ace:	85 a3       	std	Z+37, r24	; 0x25
	eeData->heat =_heat;
    6ad0:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <_heat>
    6ad4:	86 a3       	std	Z+38, r24	; 0x26
	eeData->cool =_cool;
    6ad6:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <_cool>
    6ada:	87 a3       	std	Z+39, r24	; 0x27
    6adc:	08 95       	ret

00006ade <StarSoursePump>:




//------------------------------------------------
void StarSoursePump(xCompressor *comp){
    6ade:	4f 92       	push	r4
    6ae0:	5f 92       	push	r5
    6ae2:	6f 92       	push	r6
    6ae4:	7f 92       	push	r7
    6ae6:	af 92       	push	r10
    6ae8:	bf 92       	push	r11
    6aea:	cf 92       	push	r12
    6aec:	df 92       	push	r13
    6aee:	ef 92       	push	r14
    6af0:	ff 92       	push	r15
    6af2:	0f 93       	push	r16
    6af4:	1f 93       	push	r17
    6af6:	cf 93       	push	r28
    6af8:	df 93       	push	r29
    6afa:	5c 01       	movw	r10, r24
TickType_t period;

	period=(TickType_t)EEpromData.Revers_Valve_delay;
    6afc:	20 91 f8 08 	lds	r18, 0x08F8	; 0x8008f8 <EEpromData+0x2>
	period*=1000;
    6b00:	30 e0       	ldi	r19, 0x00	; 0
    6b02:	a8 ee       	ldi	r26, 0xE8	; 232
    6b04:	b3 e0       	ldi	r27, 0x03	; 3
    6b06:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    6b0a:	2b 01       	movw	r4, r22
    6b0c:	3c 01       	movw	r6, r24
	xSerialxPrintf(&xSerial3Port,"SoursePump_f_%d\r\n",comp->Index);
    6b0e:	e5 01       	movw	r28, r10
    6b10:	c2 59       	subi	r28, 0x92	; 146
    6b12:	df 4f       	sbci	r29, 0xFF	; 255
    6b14:	89 81       	ldd	r24, Y+1	; 0x01
    6b16:	8f 93       	push	r24
    6b18:	88 81       	ld	r24, Y
    6b1a:	8f 93       	push	r24
    6b1c:	8f e0       	ldi	r24, 0x0F	; 15
    6b1e:	95 e0       	ldi	r25, 0x05	; 5
    6b20:	9f 93       	push	r25
    6b22:	8f 93       	push	r24
    6b24:	84 e9       	ldi	r24, 0x94	; 148
    6b26:	97 e0       	ldi	r25, 0x07	; 7
    6b28:	9f 93       	push	r25
    6b2a:	8f 93       	push	r24
    6b2c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(comp->Index == 1)
    6b30:	0f 90       	pop	r0
    6b32:	0f 90       	pop	r0
    6b34:	0f 90       	pop	r0
    6b36:	0f 90       	pop	r0
    6b38:	0f 90       	pop	r0
    6b3a:	0f 90       	pop	r0
    6b3c:	88 81       	ld	r24, Y
    6b3e:	99 81       	ldd	r25, Y+1	; 0x01
    6b40:	01 97       	sbiw	r24, 0x01	; 1
    6b42:	09 f0       	breq	.+2      	; 0x6b46 <StarSoursePump+0x68>
    6b44:	4a c0       	rjmp	.+148    	; 0x6bda <StarSoursePump+0xfc>
	{
		
		Comp_1.error=0;
    6b46:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <Comp_1+0x6d>
    6b4a:	10 92 c2 09 	sts	0x09C2, r1	; 0x8009c2 <Comp_1+0x6c>
		Comp_1.switchToMode=true;
    6b4e:	81 e0       	ldi	r24, 0x01	; 1
    6b50:	80 93 56 09 	sts	0x0956, r24	; 0x800956 <Comp_1>
		if(PIN_SOURCE_PUMP_1 == 0 && !comp->def )
    6b54:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6b58:	81 fd       	sbrc	r24, 1
    6b5a:	2d c0       	rjmp	.+90     	; 0x6bb6 <StarSoursePump+0xd8>
    6b5c:	f5 01       	movw	r30, r10
    6b5e:	81 85       	ldd	r24, Z+9	; 0x09
    6b60:	81 11       	cpse	r24, r1
    6b62:	29 c0       	rjmp	.+82     	; 0x6bb6 <StarSoursePump+0xd8>
		{
			START_SOURCE_PUMP_1;
    6b64:	e2 e0       	ldi	r30, 0x02	; 2
    6b66:	f1 e0       	ldi	r31, 0x01	; 1
    6b68:	80 81       	ld	r24, Z
    6b6a:	82 60       	ori	r24, 0x02	; 2
    6b6c:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StartSourcePump_1\r\n");
    6b6e:	81 e2       	ldi	r24, 0x21	; 33
    6b70:	95 e0       	ldi	r25, 0x05	; 5
    6b72:	9f 93       	push	r25
    6b74:	8f 93       	push	r24
    6b76:	84 e9       	ldi	r24, 0x94	; 148
    6b78:	97 e0       	ldi	r25, 0x07	; 7
    6b7a:	9f 93       	push	r25
    6b7c:	8f 93       	push	r24
    6b7e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->srcPOn=1;
    6b82:	81 e0       	ldi	r24, 0x01	; 1
    6b84:	f5 01       	movw	r30, r10
    6b86:	87 87       	std	Z+15, r24	; 0x0f
			timeStartSrcP_1=time(&current_time);
    6b88:	81 ef       	ldi	r24, 0xF1	; 241
    6b8a:	98 e0       	ldi	r25, 0x08	; 8
    6b8c:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6b90:	60 93 ce 09 	sts	0x09CE, r22	; 0x8009ce <timeStartSrcP_1>
    6b94:	70 93 cf 09 	sts	0x09CF, r23	; 0x8009cf <timeStartSrcP_1+0x1>
    6b98:	80 93 d0 09 	sts	0x09D0, r24	; 0x8009d0 <timeStartSrcP_1+0x2>
    6b9c:	90 93 d1 09 	sts	0x09D1, r25	; 0x8009d1 <timeStartSrcP_1+0x3>
			EEpromData.number_turnon_source_1+=1;
    6ba0:	e6 e3       	ldi	r30, 0x36	; 54
    6ba2:	f9 e0       	ldi	r31, 0x09	; 9
    6ba4:	80 81       	ld	r24, Z
    6ba6:	91 81       	ldd	r25, Z+1	; 0x01
    6ba8:	01 96       	adiw	r24, 0x01	; 1
    6baa:	91 83       	std	Z+1, r25	; 0x01
    6bac:	80 83       	st	Z, r24
    6bae:	0f 90       	pop	r0
    6bb0:	0f 90       	pop	r0
    6bb2:	0f 90       	pop	r0
    6bb4:	0f 90       	pop	r0
			//xSerialxPrintf(&xSerial3Port,"Number_turnon_source_=%d\r\n",EEpromData.number_turnon_source_1);
			
						
		}
		xTimerChangePeriod( xStartRevValve_1,period, 100 );
    6bb6:	0f 2e       	mov	r0, r31
    6bb8:	f4 e6       	ldi	r31, 0x64	; 100
    6bba:	cf 2e       	mov	r12, r31
    6bbc:	d1 2c       	mov	r13, r1
    6bbe:	e1 2c       	mov	r14, r1
    6bc0:	f1 2c       	mov	r15, r1
    6bc2:	f0 2d       	mov	r31, r0
    6bc4:	00 e0       	ldi	r16, 0x00	; 0
    6bc6:	10 e0       	ldi	r17, 0x00	; 0
    6bc8:	a3 01       	movw	r20, r6
    6bca:	92 01       	movw	r18, r4
    6bcc:	64 e0       	ldi	r22, 0x04	; 4
    6bce:	80 91 95 0a 	lds	r24, 0x0A95	; 0x800a95 <xStartRevValve_1>
    6bd2:	90 91 96 0a 	lds	r25, 0x0A96	; 0x800a96 <xStartRevValve_1+0x1>
    6bd6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if(comp->Index == 2)
    6bda:	f5 01       	movw	r30, r10
    6bdc:	e2 59       	subi	r30, 0x92	; 146
    6bde:	ff 4f       	sbci	r31, 0xFF	; 255
    6be0:	80 81       	ld	r24, Z
    6be2:	91 81       	ldd	r25, Z+1	; 0x01
    6be4:	02 97       	sbiw	r24, 0x02	; 2
    6be6:	09 f0       	breq	.+2      	; 0x6bea <StarSoursePump+0x10c>
    6be8:	4a c0       	rjmp	.+148    	; 0x6c7e <StarSoursePump+0x1a0>
	{
		Comp_2.error=0;
    6bea:	10 92 49 0a 	sts	0x0A49, r1	; 0x800a49 <Comp_2+0x6d>
    6bee:	10 92 48 0a 	sts	0x0A48, r1	; 0x800a48 <Comp_2+0x6c>
		Comp_1.switchToMode=true;
    6bf2:	81 e0       	ldi	r24, 0x01	; 1
    6bf4:	80 93 56 09 	sts	0x0956, r24	; 0x800956 <Comp_1>
		
		xSerialxPrintf(&xSerial3Port,"StartSourcePump_2\r\n");
    6bf8:	85 e3       	ldi	r24, 0x35	; 53
    6bfa:	95 e0       	ldi	r25, 0x05	; 5
    6bfc:	9f 93       	push	r25
    6bfe:	8f 93       	push	r24
    6c00:	84 e9       	ldi	r24, 0x94	; 148
    6c02:	97 e0       	ldi	r25, 0x07	; 7
    6c04:	9f 93       	push	r25
    6c06:	8f 93       	push	r24
    6c08:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		
		if(PIN_SOURCE_PUMP_2 == 0 && !comp->def)
    6c0c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6c10:	0f 90       	pop	r0
    6c12:	0f 90       	pop	r0
    6c14:	0f 90       	pop	r0
    6c16:	0f 90       	pop	r0
    6c18:	82 fd       	sbrc	r24, 2
    6c1a:	1f c0       	rjmp	.+62     	; 0x6c5a <StarSoursePump+0x17c>
    6c1c:	f5 01       	movw	r30, r10
    6c1e:	81 85       	ldd	r24, Z+9	; 0x09
    6c20:	81 11       	cpse	r24, r1
    6c22:	1b c0       	rjmp	.+54     	; 0x6c5a <StarSoursePump+0x17c>
		{
			START_SOURCE_PUMP_2;						
    6c24:	e2 e0       	ldi	r30, 0x02	; 2
    6c26:	f1 e0       	ldi	r31, 0x01	; 1
    6c28:	80 81       	ld	r24, Z
    6c2a:	84 60       	ori	r24, 0x04	; 4
    6c2c:	80 83       	st	Z, r24
			comp->srcPOn=1;
    6c2e:	81 e0       	ldi	r24, 0x01	; 1
    6c30:	f5 01       	movw	r30, r10
    6c32:	87 87       	std	Z+15, r24	; 0x0f
			timeStartSrcP_2=time(&current_time);
    6c34:	81 ef       	ldi	r24, 0xF1	; 241
    6c36:	98 e0       	ldi	r25, 0x08	; 8
    6c38:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6c3c:	60 93 89 0a 	sts	0x0A89, r22	; 0x800a89 <timeStartSrcP_2>
    6c40:	70 93 8a 0a 	sts	0x0A8A, r23	; 0x800a8a <timeStartSrcP_2+0x1>
    6c44:	80 93 8b 0a 	sts	0x0A8B, r24	; 0x800a8b <timeStartSrcP_2+0x2>
    6c48:	90 93 8c 0a 	sts	0x0A8C, r25	; 0x800a8c <timeStartSrcP_2+0x3>
			EEpromData.number_turnon_source_2+=1;
    6c4c:	ea e4       	ldi	r30, 0x4A	; 74
    6c4e:	f9 e0       	ldi	r31, 0x09	; 9
    6c50:	80 81       	ld	r24, Z
    6c52:	91 81       	ldd	r25, Z+1	; 0x01
    6c54:	01 96       	adiw	r24, 0x01	; 1
    6c56:	91 83       	std	Z+1, r25	; 0x01
    6c58:	80 83       	st	Z, r24
						
		}
		xTimerChangePeriod( xStartRevValve_2,period, 100 );
    6c5a:	0f 2e       	mov	r0, r31
    6c5c:	f4 e6       	ldi	r31, 0x64	; 100
    6c5e:	cf 2e       	mov	r12, r31
    6c60:	d1 2c       	mov	r13, r1
    6c62:	e1 2c       	mov	r14, r1
    6c64:	f1 2c       	mov	r15, r1
    6c66:	f0 2d       	mov	r31, r0
    6c68:	00 e0       	ldi	r16, 0x00	; 0
    6c6a:	10 e0       	ldi	r17, 0x00	; 0
    6c6c:	a3 01       	movw	r20, r6
    6c6e:	92 01       	movw	r18, r4
    6c70:	64 e0       	ldi	r22, 0x04	; 4
    6c72:	80 91 56 0a 	lds	r24, 0x0A56	; 0x800a56 <xStartRevValve_2>
    6c76:	90 91 57 0a 	lds	r25, 0x0A57	; 0x800a57 <xStartRevValve_2+0x1>
    6c7a:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
}
    6c7e:	df 91       	pop	r29
    6c80:	cf 91       	pop	r28
    6c82:	1f 91       	pop	r17
    6c84:	0f 91       	pop	r16
    6c86:	ff 90       	pop	r15
    6c88:	ef 90       	pop	r14
    6c8a:	df 90       	pop	r13
    6c8c:	cf 90       	pop	r12
    6c8e:	bf 90       	pop	r11
    6c90:	af 90       	pop	r10
    6c92:	7f 90       	pop	r7
    6c94:	6f 90       	pop	r6
    6c96:	5f 90       	pop	r5
    6c98:	4f 90       	pop	r4
    6c9a:	08 95       	ret

00006c9c <selmode>:
   
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t selmode(xEEdata* eeData)
{
    6c9c:	fc 01       	movw	r30, r24

	if(eeData->heatWater && !eeData->heat && !eeData->cool)
    6c9e:	85 a1       	ldd	r24, Z+37	; 0x25
    6ca0:	88 23       	and	r24, r24
    6ca2:	39 f0       	breq	.+14     	; 0x6cb2 <selmode+0x16>
    6ca4:	86 a1       	ldd	r24, Z+38	; 0x26
    6ca6:	81 11       	cpse	r24, r1
    6ca8:	1a c0       	rjmp	.+52     	; 0x6cde <selmode+0x42>
    6caa:	97 a1       	ldd	r25, Z+39	; 0x27
    6cac:	91 11       	cpse	r25, r1
    6cae:	1c c0       	rjmp	.+56     	; 0x6ce8 <selmode+0x4c>
    6cb0:	0d c0       	rjmp	.+26     	; 0x6ccc <selmode+0x30>
	{
		return DHW;
		
	}
	if(!eeData->heatWater && eeData->heat && !eeData->cool)
    6cb2:	96 a1       	ldd	r25, Z+38	; 0x26
    6cb4:	99 23       	and	r25, r25
    6cb6:	71 f0       	breq	.+28     	; 0x6cd4 <selmode+0x38>
    6cb8:	97 a1       	ldd	r25, Z+39	; 0x27
    6cba:	91 11       	cpse	r25, r1
    6cbc:	17 c0       	rjmp	.+46     	; 0x6cec <selmode+0x50>
	{
		return HEAT;
    6cbe:	82 e0       	ldi	r24, 0x02	; 2
    6cc0:	08 95       	ret
	}
	if(eeData->heatWater && eeData->heat && !eeData->cool)
	{
		return HEAT_DHW;
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
    6cc2:	87 a1       	ldd	r24, Z+39	; 0x27
    6cc4:	88 23       	and	r24, r24
    6cc6:	91 f0       	breq	.+36     	; 0x6cec <selmode+0x50>
	{
		return COOL_DHW;
    6cc8:	85 e0       	ldi	r24, 0x05	; 5
    6cca:	08 95       	ret
uint8_t selmode(xEEdata* eeData)
{

	if(eeData->heatWater && !eeData->heat && !eeData->cool)
	{
		return DHW;
    6ccc:	81 e0       	ldi	r24, 0x01	; 1
    6cce:	08 95       	ret
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
	{
		return COOL_DHW;
	}
	else return OFF;
    6cd0:	80 e0       	ldi	r24, 0x00	; 0
    6cd2:	08 95       	ret
	}
	if(!eeData->heatWater && eeData->heat && !eeData->cool)
	{
		return HEAT;
	}
	if(!eeData->heatWater && !eeData->heat && eeData->cool)
    6cd4:	87 a1       	ldd	r24, Z+39	; 0x27
    6cd6:	88 23       	and	r24, r24
    6cd8:	49 f0       	breq	.+18     	; 0x6cec <selmode+0x50>
	{
		return COOL;
    6cda:	83 e0       	ldi	r24, 0x03	; 3
    6cdc:	08 95       	ret
	}
	if(eeData->heatWater && eeData->heat && !eeData->cool)
    6cde:	87 a1       	ldd	r24, Z+39	; 0x27
    6ce0:	81 11       	cpse	r24, r1
    6ce2:	f6 cf       	rjmp	.-20     	; 0x6cd0 <selmode+0x34>
	{
		return HEAT_DHW;
    6ce4:	84 e0       	ldi	r24, 0x04	; 4
    6ce6:	08 95       	ret
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
    6ce8:	88 23       	and	r24, r24
    6cea:	59 f3       	breq	.-42     	; 0x6cc2 <selmode+0x26>
	{
		return COOL_DHW;
	}
	else return OFF;

}
    6cec:	08 95       	ret

00006cee <stop_timers>:
			}
		}break;
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void stop_timers( xCompressor *comp){
    6cee:	cf 92       	push	r12
    6cf0:	df 92       	push	r13
    6cf2:	ef 92       	push	r14
    6cf4:	ff 92       	push	r15
    6cf6:	0f 93       	push	r16
    6cf8:	1f 93       	push	r17
	if(comp->Index==1)
    6cfa:	82 59       	subi	r24, 0x92	; 146
    6cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    6cfe:	fc 01       	movw	r30, r24
    6d00:	80 81       	ld	r24, Z
    6d02:	91 81       	ldd	r25, Z+1	; 0x01
    6d04:	81 30       	cpi	r24, 0x01	; 1
    6d06:	91 05       	cpc	r25, r1
    6d08:	09 f0       	breq	.+2      	; 0x6d0c <stop_timers+0x1e>
    6d0a:	3a c1       	rjmp	.+628    	; 0x6f80 <stop_timers+0x292>
	{
		if( xTimerIsTimerActive( xStartCompressor_1 ) != pdFALSE )      xTimerStop(xStartCompressor_1,1);
    6d0c:	80 91 6c 0a 	lds	r24, 0x0A6C	; 0x800a6c <xStartCompressor_1>
    6d10:	90 91 6d 0a 	lds	r25, 0x0A6D	; 0x800a6d <xStartCompressor_1+0x1>
    6d14:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6d18:	88 23       	and	r24, r24
    6d1a:	81 f0       	breq	.+32     	; 0x6d3c <stop_timers+0x4e>
    6d1c:	c1 2c       	mov	r12, r1
    6d1e:	d1 2c       	mov	r13, r1
    6d20:	76 01       	movw	r14, r12
    6d22:	c3 94       	inc	r12
    6d24:	00 e0       	ldi	r16, 0x00	; 0
    6d26:	10 e0       	ldi	r17, 0x00	; 0
    6d28:	20 e0       	ldi	r18, 0x00	; 0
    6d2a:	30 e0       	ldi	r19, 0x00	; 0
    6d2c:	a9 01       	movw	r20, r18
    6d2e:	63 e0       	ldi	r22, 0x03	; 3
    6d30:	80 91 6c 0a 	lds	r24, 0x0A6C	; 0x800a6c <xStartCompressor_1>
    6d34:	90 91 6d 0a 	lds	r25, 0x0A6D	; 0x800a6d <xStartCompressor_1+0x1>
    6d38:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartHeatPump_1 ) != pdFALSE )        xTimerStop(xStartHeatPump_1,1);
    6d3c:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <xStartHeatPump_1>
    6d40:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <xStartHeatPump_1+0x1>
    6d44:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6d48:	88 23       	and	r24, r24
    6d4a:	81 f0       	breq	.+32     	; 0x6d6c <stop_timers+0x7e>
    6d4c:	c1 2c       	mov	r12, r1
    6d4e:	d1 2c       	mov	r13, r1
    6d50:	76 01       	movw	r14, r12
    6d52:	c3 94       	inc	r12
    6d54:	00 e0       	ldi	r16, 0x00	; 0
    6d56:	10 e0       	ldi	r17, 0x00	; 0
    6d58:	20 e0       	ldi	r18, 0x00	; 0
    6d5a:	30 e0       	ldi	r19, 0x00	; 0
    6d5c:	a9 01       	movw	r20, r18
    6d5e:	63 e0       	ldi	r22, 0x03	; 3
    6d60:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <xStartHeatPump_1>
    6d64:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <xStartHeatPump_1+0x1>
    6d68:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartThreeWay ) != pdFALSE )			xTimerStop(xStartThreeWay,1);
    6d6c:	80 91 ca 09 	lds	r24, 0x09CA	; 0x8009ca <xStartThreeWay>
    6d70:	90 91 cb 09 	lds	r25, 0x09CB	; 0x8009cb <xStartThreeWay+0x1>
    6d74:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6d78:	88 23       	and	r24, r24
    6d7a:	81 f0       	breq	.+32     	; 0x6d9c <stop_timers+0xae>
    6d7c:	c1 2c       	mov	r12, r1
    6d7e:	d1 2c       	mov	r13, r1
    6d80:	76 01       	movw	r14, r12
    6d82:	c3 94       	inc	r12
    6d84:	00 e0       	ldi	r16, 0x00	; 0
    6d86:	10 e0       	ldi	r17, 0x00	; 0
    6d88:	20 e0       	ldi	r18, 0x00	; 0
    6d8a:	30 e0       	ldi	r19, 0x00	; 0
    6d8c:	a9 01       	movw	r20, r18
    6d8e:	63 e0       	ldi	r22, 0x03	; 3
    6d90:	80 91 ca 09 	lds	r24, 0x09CA	; 0x8009ca <xStartThreeWay>
    6d94:	90 91 cb 09 	lds	r25, 0x09CB	; 0x8009cb <xStartThreeWay+0x1>
    6d98:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartRevValve_1 ) != pdFALSE )		xTimerStop(xStartRevValve_1,1);
    6d9c:	80 91 95 0a 	lds	r24, 0x0A95	; 0x800a95 <xStartRevValve_1>
    6da0:	90 91 96 0a 	lds	r25, 0x0A96	; 0x800a96 <xStartRevValve_1+0x1>
    6da4:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6da8:	88 23       	and	r24, r24
    6daa:	81 f0       	breq	.+32     	; 0x6dcc <stop_timers+0xde>
    6dac:	c1 2c       	mov	r12, r1
    6dae:	d1 2c       	mov	r13, r1
    6db0:	76 01       	movw	r14, r12
    6db2:	c3 94       	inc	r12
    6db4:	00 e0       	ldi	r16, 0x00	; 0
    6db6:	10 e0       	ldi	r17, 0x00	; 0
    6db8:	20 e0       	ldi	r18, 0x00	; 0
    6dba:	30 e0       	ldi	r19, 0x00	; 0
    6dbc:	a9 01       	movw	r20, r18
    6dbe:	63 e0       	ldi	r22, 0x03	; 3
    6dc0:	80 91 95 0a 	lds	r24, 0x0A95	; 0x800a95 <xStartRevValve_1>
    6dc4:	90 91 96 0a 	lds	r25, 0x0A96	; 0x800a96 <xStartRevValve_1+0x1>
    6dc8:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevOne_1_time ) != pdFALSE )    xTimerStop(xSwitchRevOne_1_time,1);
    6dcc:	80 91 e9 08 	lds	r24, 0x08E9	; 0x8008e9 <xSwitchRevOne_1_time>
    6dd0:	90 91 ea 08 	lds	r25, 0x08EA	; 0x8008ea <xSwitchRevOne_1_time+0x1>
    6dd4:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6dd8:	88 23       	and	r24, r24
    6dda:	81 f0       	breq	.+32     	; 0x6dfc <stop_timers+0x10e>
    6ddc:	c1 2c       	mov	r12, r1
    6dde:	d1 2c       	mov	r13, r1
    6de0:	76 01       	movw	r14, r12
    6de2:	c3 94       	inc	r12
    6de4:	00 e0       	ldi	r16, 0x00	; 0
    6de6:	10 e0       	ldi	r17, 0x00	; 0
    6de8:	20 e0       	ldi	r18, 0x00	; 0
    6dea:	30 e0       	ldi	r19, 0x00	; 0
    6dec:	a9 01       	movw	r20, r18
    6dee:	63 e0       	ldi	r22, 0x03	; 3
    6df0:	80 91 e9 08 	lds	r24, 0x08E9	; 0x8008e9 <xSwitchRevOne_1_time>
    6df4:	90 91 ea 08 	lds	r25, 0x08EA	; 0x8008ea <xSwitchRevOne_1_time+0x1>
    6df8:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevTwo_1_time ) != pdFALSE )	xTimerStop(xSwitchRevTwo_1_time,1);
    6dfc:	80 91 68 0a 	lds	r24, 0x0A68	; 0x800a68 <xSwitchRevTwo_1_time>
    6e00:	90 91 69 0a 	lds	r25, 0x0A69	; 0x800a69 <xSwitchRevTwo_1_time+0x1>
    6e04:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6e08:	88 23       	and	r24, r24
    6e0a:	81 f0       	breq	.+32     	; 0x6e2c <stop_timers+0x13e>
    6e0c:	c1 2c       	mov	r12, r1
    6e0e:	d1 2c       	mov	r13, r1
    6e10:	76 01       	movw	r14, r12
    6e12:	c3 94       	inc	r12
    6e14:	00 e0       	ldi	r16, 0x00	; 0
    6e16:	10 e0       	ldi	r17, 0x00	; 0
    6e18:	20 e0       	ldi	r18, 0x00	; 0
    6e1a:	30 e0       	ldi	r19, 0x00	; 0
    6e1c:	a9 01       	movw	r20, r18
    6e1e:	63 e0       	ldi	r22, 0x03	; 3
    6e20:	80 91 68 0a 	lds	r24, 0x0A68	; 0x800a68 <xSwitchRevTwo_1_time>
    6e24:	90 91 69 0a 	lds	r25, 0x0A69	; 0x800a69 <xSwitchRevTwo_1_time+0x1>
    6e28:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopHeatPump_1 ) != pdFALSE )			xTimerStop(xStopHeatPump_1,1);
    6e2c:	80 91 e3 08 	lds	r24, 0x08E3	; 0x8008e3 <xStopHeatPump_1>
    6e30:	90 91 e4 08 	lds	r25, 0x08E4	; 0x8008e4 <xStopHeatPump_1+0x1>
    6e34:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6e38:	88 23       	and	r24, r24
    6e3a:	81 f0       	breq	.+32     	; 0x6e5c <stop_timers+0x16e>
    6e3c:	c1 2c       	mov	r12, r1
    6e3e:	d1 2c       	mov	r13, r1
    6e40:	76 01       	movw	r14, r12
    6e42:	c3 94       	inc	r12
    6e44:	00 e0       	ldi	r16, 0x00	; 0
    6e46:	10 e0       	ldi	r17, 0x00	; 0
    6e48:	20 e0       	ldi	r18, 0x00	; 0
    6e4a:	30 e0       	ldi	r19, 0x00	; 0
    6e4c:	a9 01       	movw	r20, r18
    6e4e:	63 e0       	ldi	r22, 0x03	; 3
    6e50:	80 91 e3 08 	lds	r24, 0x08E3	; 0x8008e3 <xStopHeatPump_1>
    6e54:	90 91 e4 08 	lds	r25, 0x08E4	; 0x8008e4 <xStopHeatPump_1+0x1>
    6e58:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopThreeWay ) != pdFALSE )			xTimerStop(xStopThreeWay,1);
    6e5c:	80 91 c8 09 	lds	r24, 0x09C8	; 0x8009c8 <xStopThreeWay>
    6e60:	90 91 c9 09 	lds	r25, 0x09C9	; 0x8009c9 <xStopThreeWay+0x1>
    6e64:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6e68:	88 23       	and	r24, r24
    6e6a:	81 f0       	breq	.+32     	; 0x6e8c <stop_timers+0x19e>
    6e6c:	c1 2c       	mov	r12, r1
    6e6e:	d1 2c       	mov	r13, r1
    6e70:	76 01       	movw	r14, r12
    6e72:	c3 94       	inc	r12
    6e74:	00 e0       	ldi	r16, 0x00	; 0
    6e76:	10 e0       	ldi	r17, 0x00	; 0
    6e78:	20 e0       	ldi	r18, 0x00	; 0
    6e7a:	30 e0       	ldi	r19, 0x00	; 0
    6e7c:	a9 01       	movw	r20, r18
    6e7e:	63 e0       	ldi	r22, 0x03	; 3
    6e80:	80 91 c8 09 	lds	r24, 0x09C8	; 0x8009c8 <xStopThreeWay>
    6e84:	90 91 c9 09 	lds	r25, 0x09C9	; 0x8009c9 <xStopThreeWay+0x1>
    6e88:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopRevValve_1 ) != pdFALSE )			xTimerStop(xStopRevValve_1,1);
    6e8c:	80 91 5e 0a 	lds	r24, 0x0A5E	; 0x800a5e <xStopRevValve_1>
    6e90:	90 91 5f 0a 	lds	r25, 0x0A5F	; 0x800a5f <xStopRevValve_1+0x1>
    6e94:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6e98:	88 23       	and	r24, r24
    6e9a:	81 f0       	breq	.+32     	; 0x6ebc <stop_timers+0x1ce>
    6e9c:	c1 2c       	mov	r12, r1
    6e9e:	d1 2c       	mov	r13, r1
    6ea0:	76 01       	movw	r14, r12
    6ea2:	c3 94       	inc	r12
    6ea4:	00 e0       	ldi	r16, 0x00	; 0
    6ea6:	10 e0       	ldi	r17, 0x00	; 0
    6ea8:	20 e0       	ldi	r18, 0x00	; 0
    6eaa:	30 e0       	ldi	r19, 0x00	; 0
    6eac:	a9 01       	movw	r20, r18
    6eae:	63 e0       	ldi	r22, 0x03	; 3
    6eb0:	80 91 5e 0a 	lds	r24, 0x0A5E	; 0x800a5e <xStopRevValve_1>
    6eb4:	90 91 5f 0a 	lds	r25, 0x0A5F	; 0x800a5f <xStopRevValve_1+0x1>
    6eb8:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopSource_1 ) != pdFALSE )			xTimerStop(xStopSource_1,1);
    6ebc:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <xStopSource_1>
    6ec0:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <xStopSource_1+0x1>
    6ec4:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6ec8:	88 23       	and	r24, r24
    6eca:	81 f0       	breq	.+32     	; 0x6eec <stop_timers+0x1fe>
    6ecc:	c1 2c       	mov	r12, r1
    6ece:	d1 2c       	mov	r13, r1
    6ed0:	76 01       	movw	r14, r12
    6ed2:	c3 94       	inc	r12
    6ed4:	00 e0       	ldi	r16, 0x00	; 0
    6ed6:	10 e0       	ldi	r17, 0x00	; 0
    6ed8:	20 e0       	ldi	r18, 0x00	; 0
    6eda:	30 e0       	ldi	r19, 0x00	; 0
    6edc:	a9 01       	movw	r20, r18
    6ede:	63 e0       	ldi	r22, 0x03	; 3
    6ee0:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <xStopSource_1>
    6ee4:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <xStopSource_1+0x1>
    6ee8:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckErrors_1 ) != pdFALSE )    xTimerStop(xTStartCheckErrors_1,1);
    6eec:	80 91 8d 0a 	lds	r24, 0x0A8D	; 0x800a8d <xTStartCheckErrors_1>
    6ef0:	90 91 8e 0a 	lds	r25, 0x0A8E	; 0x800a8e <xTStartCheckErrors_1+0x1>
    6ef4:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6ef8:	88 23       	and	r24, r24
    6efa:	81 f0       	breq	.+32     	; 0x6f1c <stop_timers+0x22e>
    6efc:	c1 2c       	mov	r12, r1
    6efe:	d1 2c       	mov	r13, r1
    6f00:	76 01       	movw	r14, r12
    6f02:	c3 94       	inc	r12
    6f04:	00 e0       	ldi	r16, 0x00	; 0
    6f06:	10 e0       	ldi	r17, 0x00	; 0
    6f08:	20 e0       	ldi	r18, 0x00	; 0
    6f0a:	30 e0       	ldi	r19, 0x00	; 0
    6f0c:	a9 01       	movw	r20, r18
    6f0e:	63 e0       	ldi	r22, 0x03	; 3
    6f10:	80 91 8d 0a 	lds	r24, 0x0A8D	; 0x800a8d <xTStartCheckErrors_1>
    6f14:	90 91 8e 0a 	lds	r25, 0x0A8E	; 0x800a8e <xTStartCheckErrors_1+0x1>
    6f18:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckTrv_1 ) != pdFALSE )       xTimerStop(xTStartCheckTrv_1,1);
    6f1c:	80 91 ef 08 	lds	r24, 0x08EF	; 0x8008ef <xTStartCheckTrv_1>
    6f20:	90 91 f0 08 	lds	r25, 0x08F0	; 0x8008f0 <xTStartCheckTrv_1+0x1>
    6f24:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6f28:	88 23       	and	r24, r24
    6f2a:	81 f0       	breq	.+32     	; 0x6f4c <stop_timers+0x25e>
    6f2c:	c1 2c       	mov	r12, r1
    6f2e:	d1 2c       	mov	r13, r1
    6f30:	76 01       	movw	r14, r12
    6f32:	c3 94       	inc	r12
    6f34:	00 e0       	ldi	r16, 0x00	; 0
    6f36:	10 e0       	ldi	r17, 0x00	; 0
    6f38:	20 e0       	ldi	r18, 0x00	; 0
    6f3a:	30 e0       	ldi	r19, 0x00	; 0
    6f3c:	a9 01       	movw	r20, r18
    6f3e:	63 e0       	ldi	r22, 0x03	; 3
    6f40:	80 91 ef 08 	lds	r24, 0x08EF	; 0x8008ef <xTStartCheckTrv_1>
    6f44:	90 91 f0 08 	lds	r25, 0x08F0	; 0x8008f0 <xTStartCheckTrv_1+0x1>
    6f48:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xComutateTrv_1 ) != pdFALSE )          xTimerStop(xComutateTrv_1,1);
    6f4c:	80 91 db 08 	lds	r24, 0x08DB	; 0x8008db <xComutateTrv_1>
    6f50:	90 91 dc 08 	lds	r25, 0x08DC	; 0x8008dc <xComutateTrv_1+0x1>
    6f54:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6f58:	88 23       	and	r24, r24
    6f5a:	09 f4       	brne	.+2      	; 0x6f5e <stop_timers+0x270>
    6f5c:	1c c1       	rjmp	.+568    	; 0x7196 <stop_timers+0x4a8>
    6f5e:	c1 2c       	mov	r12, r1
    6f60:	d1 2c       	mov	r13, r1
    6f62:	76 01       	movw	r14, r12
    6f64:	c3 94       	inc	r12
    6f66:	00 e0       	ldi	r16, 0x00	; 0
    6f68:	10 e0       	ldi	r17, 0x00	; 0
    6f6a:	20 e0       	ldi	r18, 0x00	; 0
    6f6c:	30 e0       	ldi	r19, 0x00	; 0
    6f6e:	a9 01       	movw	r20, r18
    6f70:	63 e0       	ldi	r22, 0x03	; 3
    6f72:	80 91 db 08 	lds	r24, 0x08DB	; 0x8008db <xComutateTrv_1>
    6f76:	90 91 dc 08 	lds	r25, 0x08DC	; 0x8008dc <xComutateTrv_1+0x1>
    6f7a:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    6f7e:	0b c1       	rjmp	.+534    	; 0x7196 <stop_timers+0x4a8>
	}
	else if (comp->Index==2)
    6f80:	02 97       	sbiw	r24, 0x02	; 2
    6f82:	09 f0       	breq	.+2      	; 0x6f86 <stop_timers+0x298>
    6f84:	08 c1       	rjmp	.+528    	; 0x7196 <stop_timers+0x4a8>
	{
		if( xTimerIsTimerActive( xStartCompressor_2 ) != pdFALSE )      xTimerStop(xStartCompressor_2,1);
    6f86:	80 91 7e 0a 	lds	r24, 0x0A7E	; 0x800a7e <xStartCompressor_2>
    6f8a:	90 91 7f 0a 	lds	r25, 0x0A7F	; 0x800a7f <xStartCompressor_2+0x1>
    6f8e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6f92:	88 23       	and	r24, r24
    6f94:	81 f0       	breq	.+32     	; 0x6fb6 <stop_timers+0x2c8>
    6f96:	c1 2c       	mov	r12, r1
    6f98:	d1 2c       	mov	r13, r1
    6f9a:	76 01       	movw	r14, r12
    6f9c:	c3 94       	inc	r12
    6f9e:	00 e0       	ldi	r16, 0x00	; 0
    6fa0:	10 e0       	ldi	r17, 0x00	; 0
    6fa2:	20 e0       	ldi	r18, 0x00	; 0
    6fa4:	30 e0       	ldi	r19, 0x00	; 0
    6fa6:	a9 01       	movw	r20, r18
    6fa8:	63 e0       	ldi	r22, 0x03	; 3
    6faa:	80 91 7e 0a 	lds	r24, 0x0A7E	; 0x800a7e <xStartCompressor_2>
    6fae:	90 91 7f 0a 	lds	r25, 0x0A7F	; 0x800a7f <xStartCompressor_2+0x1>
    6fb2:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartHeatPump_2 ) != pdFALSE )        xTimerStop(xStartHeatPump_2,1);
    6fb6:	80 91 cc 09 	lds	r24, 0x09CC	; 0x8009cc <xStartHeatPump_2>
    6fba:	90 91 cd 09 	lds	r25, 0x09CD	; 0x8009cd <xStartHeatPump_2+0x1>
    6fbe:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6fc2:	88 23       	and	r24, r24
    6fc4:	81 f0       	breq	.+32     	; 0x6fe6 <stop_timers+0x2f8>
    6fc6:	c1 2c       	mov	r12, r1
    6fc8:	d1 2c       	mov	r13, r1
    6fca:	76 01       	movw	r14, r12
    6fcc:	c3 94       	inc	r12
    6fce:	00 e0       	ldi	r16, 0x00	; 0
    6fd0:	10 e0       	ldi	r17, 0x00	; 0
    6fd2:	20 e0       	ldi	r18, 0x00	; 0
    6fd4:	30 e0       	ldi	r19, 0x00	; 0
    6fd6:	a9 01       	movw	r20, r18
    6fd8:	63 e0       	ldi	r22, 0x03	; 3
    6fda:	80 91 cc 09 	lds	r24, 0x09CC	; 0x8009cc <xStartHeatPump_2>
    6fde:	90 91 cd 09 	lds	r25, 0x09CD	; 0x8009cd <xStartHeatPump_2+0x1>
    6fe2:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartRevValve_2 ) != pdFALSE )		xTimerStop(xStartRevValve_2,1);
    6fe6:	80 91 56 0a 	lds	r24, 0x0A56	; 0x800a56 <xStartRevValve_2>
    6fea:	90 91 57 0a 	lds	r25, 0x0A57	; 0x800a57 <xStartRevValve_2+0x1>
    6fee:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6ff2:	88 23       	and	r24, r24
    6ff4:	81 f0       	breq	.+32     	; 0x7016 <stop_timers+0x328>
    6ff6:	c1 2c       	mov	r12, r1
    6ff8:	d1 2c       	mov	r13, r1
    6ffa:	76 01       	movw	r14, r12
    6ffc:	c3 94       	inc	r12
    6ffe:	00 e0       	ldi	r16, 0x00	; 0
    7000:	10 e0       	ldi	r17, 0x00	; 0
    7002:	20 e0       	ldi	r18, 0x00	; 0
    7004:	30 e0       	ldi	r19, 0x00	; 0
    7006:	a9 01       	movw	r20, r18
    7008:	63 e0       	ldi	r22, 0x03	; 3
    700a:	80 91 56 0a 	lds	r24, 0x0A56	; 0x800a56 <xStartRevValve_2>
    700e:	90 91 57 0a 	lds	r25, 0x0A57	; 0x800a57 <xStartRevValve_2+0x1>
    7012:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevOne_2_time ) != pdFALSE )    xTimerStop(xSwitchRevOne_2_time,1);
    7016:	80 91 9e 0a 	lds	r24, 0x0A9E	; 0x800a9e <xSwitchRevOne_2_time>
    701a:	90 91 9f 0a 	lds	r25, 0x0A9F	; 0x800a9f <xSwitchRevOne_2_time+0x1>
    701e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7022:	88 23       	and	r24, r24
    7024:	81 f0       	breq	.+32     	; 0x7046 <stop_timers+0x358>
    7026:	c1 2c       	mov	r12, r1
    7028:	d1 2c       	mov	r13, r1
    702a:	76 01       	movw	r14, r12
    702c:	c3 94       	inc	r12
    702e:	00 e0       	ldi	r16, 0x00	; 0
    7030:	10 e0       	ldi	r17, 0x00	; 0
    7032:	20 e0       	ldi	r18, 0x00	; 0
    7034:	30 e0       	ldi	r19, 0x00	; 0
    7036:	a9 01       	movw	r20, r18
    7038:	63 e0       	ldi	r22, 0x03	; 3
    703a:	80 91 9e 0a 	lds	r24, 0x0A9E	; 0x800a9e <xSwitchRevOne_2_time>
    703e:	90 91 9f 0a 	lds	r25, 0x0A9F	; 0x800a9f <xSwitchRevOne_2_time+0x1>
    7042:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevTwo_2_time ) != pdFALSE )	xTimerStop(xSwitchRevTwo_1_time,1);
    7046:	80 91 83 0a 	lds	r24, 0x0A83	; 0x800a83 <xSwitchRevTwo_2_time>
    704a:	90 91 84 0a 	lds	r25, 0x0A84	; 0x800a84 <xSwitchRevTwo_2_time+0x1>
    704e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7052:	88 23       	and	r24, r24
    7054:	81 f0       	breq	.+32     	; 0x7076 <stop_timers+0x388>
    7056:	c1 2c       	mov	r12, r1
    7058:	d1 2c       	mov	r13, r1
    705a:	76 01       	movw	r14, r12
    705c:	c3 94       	inc	r12
    705e:	00 e0       	ldi	r16, 0x00	; 0
    7060:	10 e0       	ldi	r17, 0x00	; 0
    7062:	20 e0       	ldi	r18, 0x00	; 0
    7064:	30 e0       	ldi	r19, 0x00	; 0
    7066:	a9 01       	movw	r20, r18
    7068:	63 e0       	ldi	r22, 0x03	; 3
    706a:	80 91 68 0a 	lds	r24, 0x0A68	; 0x800a68 <xSwitchRevTwo_1_time>
    706e:	90 91 69 0a 	lds	r25, 0x0A69	; 0x800a69 <xSwitchRevTwo_1_time+0x1>
    7072:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopHeatPump_2 ) != pdFALSE )			xTimerStop(xStopHeatPump_2,1);
    7076:	80 91 5c 0a 	lds	r24, 0x0A5C	; 0x800a5c <xStopHeatPump_2>
    707a:	90 91 5d 0a 	lds	r25, 0x0A5D	; 0x800a5d <xStopHeatPump_2+0x1>
    707e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7082:	88 23       	and	r24, r24
    7084:	81 f0       	breq	.+32     	; 0x70a6 <stop_timers+0x3b8>
    7086:	c1 2c       	mov	r12, r1
    7088:	d1 2c       	mov	r13, r1
    708a:	76 01       	movw	r14, r12
    708c:	c3 94       	inc	r12
    708e:	00 e0       	ldi	r16, 0x00	; 0
    7090:	10 e0       	ldi	r17, 0x00	; 0
    7092:	20 e0       	ldi	r18, 0x00	; 0
    7094:	30 e0       	ldi	r19, 0x00	; 0
    7096:	a9 01       	movw	r20, r18
    7098:	63 e0       	ldi	r22, 0x03	; 3
    709a:	80 91 5c 0a 	lds	r24, 0x0A5C	; 0x800a5c <xStopHeatPump_2>
    709e:	90 91 5d 0a 	lds	r25, 0x0A5D	; 0x800a5d <xStopHeatPump_2+0x1>
    70a2:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopRevValve_2 ) != pdFALSE )			xTimerStop(xStopRevValve_2,1);
    70a6:	80 91 eb 08 	lds	r24, 0x08EB	; 0x8008eb <xStopRevValve_2>
    70aa:	90 91 ec 08 	lds	r25, 0x08EC	; 0x8008ec <xStopRevValve_2+0x1>
    70ae:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    70b2:	88 23       	and	r24, r24
    70b4:	81 f0       	breq	.+32     	; 0x70d6 <stop_timers+0x3e8>
    70b6:	c1 2c       	mov	r12, r1
    70b8:	d1 2c       	mov	r13, r1
    70ba:	76 01       	movw	r14, r12
    70bc:	c3 94       	inc	r12
    70be:	00 e0       	ldi	r16, 0x00	; 0
    70c0:	10 e0       	ldi	r17, 0x00	; 0
    70c2:	20 e0       	ldi	r18, 0x00	; 0
    70c4:	30 e0       	ldi	r19, 0x00	; 0
    70c6:	a9 01       	movw	r20, r18
    70c8:	63 e0       	ldi	r22, 0x03	; 3
    70ca:	80 91 eb 08 	lds	r24, 0x08EB	; 0x8008eb <xStopRevValve_2>
    70ce:	90 91 ec 08 	lds	r25, 0x08EC	; 0x8008ec <xStopRevValve_2+0x1>
    70d2:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopSource_2 ) != pdFALSE )			xTimerStop(xStopSource_2,1);
    70d6:	80 91 4c 0a 	lds	r24, 0x0A4C	; 0x800a4c <xStopSource_2>
    70da:	90 91 4d 0a 	lds	r25, 0x0A4D	; 0x800a4d <xStopSource_2+0x1>
    70de:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    70e2:	88 23       	and	r24, r24
    70e4:	81 f0       	breq	.+32     	; 0x7106 <stop_timers+0x418>
    70e6:	c1 2c       	mov	r12, r1
    70e8:	d1 2c       	mov	r13, r1
    70ea:	76 01       	movw	r14, r12
    70ec:	c3 94       	inc	r12
    70ee:	00 e0       	ldi	r16, 0x00	; 0
    70f0:	10 e0       	ldi	r17, 0x00	; 0
    70f2:	20 e0       	ldi	r18, 0x00	; 0
    70f4:	30 e0       	ldi	r19, 0x00	; 0
    70f6:	a9 01       	movw	r20, r18
    70f8:	63 e0       	ldi	r22, 0x03	; 3
    70fa:	80 91 4c 0a 	lds	r24, 0x0A4C	; 0x800a4c <xStopSource_2>
    70fe:	90 91 4d 0a 	lds	r25, 0x0A4D	; 0x800a4d <xStopSource_2+0x1>
    7102:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckErrors_2 ) != pdFALSE )    xTimerStop(xTStartCheckErrors_2,1);
    7106:	80 91 dd 08 	lds	r24, 0x08DD	; 0x8008dd <xTStartCheckErrors_2>
    710a:	90 91 de 08 	lds	r25, 0x08DE	; 0x8008de <xTStartCheckErrors_2+0x1>
    710e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7112:	88 23       	and	r24, r24
    7114:	81 f0       	breq	.+32     	; 0x7136 <stop_timers+0x448>
    7116:	c1 2c       	mov	r12, r1
    7118:	d1 2c       	mov	r13, r1
    711a:	76 01       	movw	r14, r12
    711c:	c3 94       	inc	r12
    711e:	00 e0       	ldi	r16, 0x00	; 0
    7120:	10 e0       	ldi	r17, 0x00	; 0
    7122:	20 e0       	ldi	r18, 0x00	; 0
    7124:	30 e0       	ldi	r19, 0x00	; 0
    7126:	a9 01       	movw	r20, r18
    7128:	63 e0       	ldi	r22, 0x03	; 3
    712a:	80 91 dd 08 	lds	r24, 0x08DD	; 0x8008dd <xTStartCheckErrors_2>
    712e:	90 91 de 08 	lds	r25, 0x08DE	; 0x8008de <xTStartCheckErrors_2+0x1>
    7132:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckTrv_2 ) != pdFALSE )       xTimerStop(xTStartCheckTrv_2,1);
    7136:	80 91 c6 09 	lds	r24, 0x09C6	; 0x8009c6 <xTStartCheckTrv_2>
    713a:	90 91 c7 09 	lds	r25, 0x09C7	; 0x8009c7 <xTStartCheckTrv_2+0x1>
    713e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7142:	88 23       	and	r24, r24
    7144:	81 f0       	breq	.+32     	; 0x7166 <stop_timers+0x478>
    7146:	c1 2c       	mov	r12, r1
    7148:	d1 2c       	mov	r13, r1
    714a:	76 01       	movw	r14, r12
    714c:	c3 94       	inc	r12
    714e:	00 e0       	ldi	r16, 0x00	; 0
    7150:	10 e0       	ldi	r17, 0x00	; 0
    7152:	20 e0       	ldi	r18, 0x00	; 0
    7154:	30 e0       	ldi	r19, 0x00	; 0
    7156:	a9 01       	movw	r20, r18
    7158:	63 e0       	ldi	r22, 0x03	; 3
    715a:	80 91 c6 09 	lds	r24, 0x09C6	; 0x8009c6 <xTStartCheckTrv_2>
    715e:	90 91 c7 09 	lds	r25, 0x09C7	; 0x8009c7 <xTStartCheckTrv_2+0x1>
    7162:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xComutateTrv_2 ) != pdFALSE )          xTimerStop(xComutateTrv_2,1);
    7166:	80 91 d2 09 	lds	r24, 0x09D2	; 0x8009d2 <xComutateTrv_2>
    716a:	90 91 d3 09 	lds	r25, 0x09D3	; 0x8009d3 <xComutateTrv_2+0x1>
    716e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7172:	88 23       	and	r24, r24
    7174:	81 f0       	breq	.+32     	; 0x7196 <stop_timers+0x4a8>
    7176:	c1 2c       	mov	r12, r1
    7178:	d1 2c       	mov	r13, r1
    717a:	76 01       	movw	r14, r12
    717c:	c3 94       	inc	r12
    717e:	00 e0       	ldi	r16, 0x00	; 0
    7180:	10 e0       	ldi	r17, 0x00	; 0
    7182:	20 e0       	ldi	r18, 0x00	; 0
    7184:	30 e0       	ldi	r19, 0x00	; 0
    7186:	a9 01       	movw	r20, r18
    7188:	63 e0       	ldi	r22, 0x03	; 3
    718a:	80 91 d2 09 	lds	r24, 0x09D2	; 0x8009d2 <xComutateTrv_2>
    718e:	90 91 d3 09 	lds	r25, 0x09D3	; 0x8009d3 <xComutateTrv_2+0x1>
    7192:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
}
    7196:	1f 91       	pop	r17
    7198:	0f 91       	pop	r16
    719a:	ff 90       	pop	r15
    719c:	ef 90       	pop	r14
    719e:	df 90       	pop	r13
    71a0:	cf 90       	pop	r12
    71a2:	08 95       	ret

000071a4 <Comp_Stop>:
	}
	
	
}
//-------------------------------------------------------------------------Stop mod
void Comp_Stop(xCompressor *comp){
    71a4:	cf 92       	push	r12
    71a6:	df 92       	push	r13
    71a8:	ef 92       	push	r14
    71aa:	ff 92       	push	r15
    71ac:	0f 93       	push	r16
    71ae:	1f 93       	push	r17
    71b0:	cf 93       	push	r28
    71b2:	df 93       	push	r29
    71b4:	ec 01       	movw	r28, r24
	static time_t time_count_1;
	static time_t time_count_2;
	
	//xSerialxPrintf(&xSerial3Port,"StopCompressor\r\n");
	stop_timers(comp);
    71b6:	9b dd       	rcall	.-1226   	; 0x6cee <stop_timers>
	comp->Cooling=comp->heatingWater=comp->Heating=false;
    71b8:	1a 82       	std	Y+2, r1	; 0x02
    71ba:	1c 82       	std	Y+4, r1	; 0x04
    71bc:	1b 82       	std	Y+3, r1	; 0x03
    comp->switchToMode=true;
    71be:	81 e0       	ldi	r24, 0x01	; 1
    71c0:	88 83       	st	Y, r24
	if(comp->Index == 1)
    71c2:	fe 01       	movw	r30, r28
    71c4:	e2 59       	subi	r30, 0x92	; 146
    71c6:	ff 4f       	sbci	r31, 0xFF	; 255
    71c8:	80 81       	ld	r24, Z
    71ca:	91 81       	ldd	r25, Z+1	; 0x01
    71cc:	81 30       	cpi	r24, 0x01	; 1
    71ce:	91 05       	cpc	r25, r1
    71d0:	09 f0       	breq	.+2      	; 0x71d4 <Comp_Stop+0x30>
    71d2:	6c c0       	rjmp	.+216    	; 0x72ac <Comp_Stop+0x108>
	{
		if(PIN_COMPRESSOR_1 > 0)
    71d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    71d8:	85 ff       	sbrs	r24, 5
    71da:	57 c0       	rjmp	.+174    	; 0x728a <Comp_Stop+0xe6>
		{
			STOP_COMPRESSOR_1;
    71dc:	e2 e0       	ldi	r30, 0x02	; 2
    71de:	f1 e0       	ldi	r31, 0x01	; 1
    71e0:	80 81       	ld	r24, Z
    71e2:	8f 7d       	andi	r24, 0xDF	; 223
    71e4:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopCompressor_1\r\n");
    71e6:	89 e4       	ldi	r24, 0x49	; 73
    71e8:	95 e0       	ldi	r25, 0x05	; 5
    71ea:	9f 93       	push	r25
    71ec:	8f 93       	push	r24
    71ee:	84 e9       	ldi	r24, 0x94	; 148
    71f0:	97 e0       	ldi	r25, 0x07	; 7
    71f2:	9f 93       	push	r25
    71f4:	8f 93       	push	r24
    71f6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->checkErrors =false;
    71fa:	1d 82       	std	Y+5, r1	; 0x05
			
			comp->checkTrv =false;
    71fc:	19 82       	std	Y+1, r1	; 0x01
			comp->compOn=0;
    71fe:	1b 86       	std	Y+11, r1	; 0x0b
			time_count_1+= difftime(time(&current_time), timeStartComp_1);
    7200:	c0 90 e5 08 	lds	r12, 0x08E5	; 0x8008e5 <timeStartComp_1>
    7204:	d0 90 e6 08 	lds	r13, 0x08E6	; 0x8008e6 <timeStartComp_1+0x1>
    7208:	e0 90 e7 08 	lds	r14, 0x08E7	; 0x8008e7 <timeStartComp_1+0x2>
    720c:	f0 90 e8 08 	lds	r15, 0x08E8	; 0x8008e8 <timeStartComp_1+0x3>
    7210:	81 ef       	ldi	r24, 0xF1	; 241
    7212:	98 e0       	ldi	r25, 0x08	; 8
    7214:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    7218:	a7 01       	movw	r20, r14
    721a:	96 01       	movw	r18, r12
    721c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    7220:	c0 90 2f 07 	lds	r12, 0x072F	; 0x80072f <time_count_1.3195>
    7224:	d0 90 30 07 	lds	r13, 0x0730	; 0x800730 <time_count_1.3195+0x1>
    7228:	e0 90 31 07 	lds	r14, 0x0731	; 0x800731 <time_count_1.3195+0x2>
    722c:	f0 90 32 07 	lds	r15, 0x0732	; 0x800732 <time_count_1.3195+0x3>
    7230:	dc 01       	movw	r26, r24
    7232:	cb 01       	movw	r24, r22
    7234:	8c 0d       	add	r24, r12
    7236:	9d 1d       	adc	r25, r13
    7238:	ae 1d       	adc	r26, r14
    723a:	bf 1d       	adc	r27, r15
    723c:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <time_count_1.3195>
    7240:	90 93 30 07 	sts	0x0730, r25	; 0x800730 <time_count_1.3195+0x1>
    7244:	a0 93 31 07 	sts	0x0731, r26	; 0x800731 <time_count_1.3195+0x2>
    7248:	b0 93 32 07 	sts	0x0732, r27	; 0x800732 <time_count_1.3195+0x3>
			
			//xSerialxPrintf(&xSerial3Port,"time_Compressor_=%d\r\n",time_count_1);
			if(time_count_1>ONE_HOUR){EEpromData.time_compressor_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    724c:	0f 90       	pop	r0
    724e:	0f 90       	pop	r0
    7250:	0f 90       	pop	r0
    7252:	0f 90       	pop	r0
    7254:	81 31       	cpi	r24, 0x11	; 17
    7256:	9e 40       	sbci	r25, 0x0E	; 14
    7258:	a1 05       	cpc	r26, r1
    725a:	b1 05       	cpc	r27, r1
    725c:	b0 f0       	brcs	.+44     	; 0x728a <Comp_Stop+0xe6>
    725e:	e6 ef       	ldi	r30, 0xF6	; 246
    7260:	f8 e0       	ldi	r31, 0x08	; 8
    7262:	82 ad       	ldd	r24, Z+58	; 0x3a
    7264:	93 ad       	ldd	r25, Z+59	; 0x3b
    7266:	01 96       	adiw	r24, 0x01	; 1
    7268:	93 af       	std	Z+59, r25	; 0x3b
    726a:	82 af       	std	Z+58, r24	; 0x3a
    726c:	40 e6       	ldi	r20, 0x60	; 96
    726e:	50 e0       	ldi	r21, 0x00	; 0
    7270:	60 e0       	ldi	r22, 0x00	; 0
    7272:	70 e0       	ldi	r23, 0x00	; 0
    7274:	cf 01       	movw	r24, r30
    7276:	0e 94 8a 5d 	call	0xbb14	; 0xbb14 <eeprom_update_block>
    727a:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <time_count_1.3195>
    727e:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <time_count_1.3195+0x1>
    7282:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <time_count_1.3195+0x2>
    7286:	10 92 32 07 	sts	0x0732, r1	; 0x800732 <time_count_1.3195+0x3>
			
		}
		xTimerStart(xSwitchRevOne_1_time, 0);
    728a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    728e:	9b 01       	movw	r18, r22
    7290:	ac 01       	movw	r20, r24
    7292:	c1 2c       	mov	r12, r1
    7294:	d1 2c       	mov	r13, r1
    7296:	76 01       	movw	r14, r12
    7298:	00 e0       	ldi	r16, 0x00	; 0
    729a:	10 e0       	ldi	r17, 0x00	; 0
    729c:	61 e0       	ldi	r22, 0x01	; 1
    729e:	80 91 e9 08 	lds	r24, 0x08E9	; 0x8008e9 <xSwitchRevOne_1_time>
    72a2:	90 91 ea 08 	lds	r25, 0x08EA	; 0x8008ea <xSwitchRevOne_1_time+0x1>
    72a6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    72aa:	71 c0       	rjmp	.+226    	; 0x738e <Comp_Stop+0x1ea>
		
	}
	else if(comp->Index == 2)
    72ac:	02 97       	sbiw	r24, 0x02	; 2
    72ae:	09 f0       	breq	.+2      	; 0x72b2 <Comp_Stop+0x10e>
    72b0:	6e c0       	rjmp	.+220    	; 0x738e <Comp_Stop+0x1ea>
	{
		if(PIN_COMPRESSOR_2 > 0)
    72b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    72b6:	86 ff       	sbrs	r24, 6
    72b8:	5a c0       	rjmp	.+180    	; 0x736e <Comp_Stop+0x1ca>
		{
			
			STOP_COMPRESSOR_2;
    72ba:	e2 e0       	ldi	r30, 0x02	; 2
    72bc:	f1 e0       	ldi	r31, 0x01	; 1
    72be:	80 81       	ld	r24, Z
    72c0:	8f 7b       	andi	r24, 0xBF	; 191
    72c2:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopCompressor_2\r\n");
    72c4:	8c e5       	ldi	r24, 0x5C	; 92
    72c6:	95 e0       	ldi	r25, 0x05	; 5
    72c8:	9f 93       	push	r25
    72ca:	8f 93       	push	r24
    72cc:	84 e9       	ldi	r24, 0x94	; 148
    72ce:	97 e0       	ldi	r25, 0x07	; 7
    72d0:	9f 93       	push	r25
    72d2:	8f 93       	push	r24
    72d4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->checkErrors =false;
    72d8:	1d 82       	std	Y+5, r1	; 0x05
			comp->switchToMode=true;
    72da:	81 e0       	ldi	r24, 0x01	; 1
    72dc:	88 83       	st	Y, r24
			comp->checkTrv =false;
    72de:	19 82       	std	Y+1, r1	; 0x01
			comp->compOn=0;
    72e0:	1b 86       	std	Y+11, r1	; 0x0b
			time_count_2+= difftime(time(&current_time), timeStartComp_2);
    72e2:	c0 90 8f 0a 	lds	r12, 0x0A8F	; 0x800a8f <timeStartComp_2>
    72e6:	d0 90 90 0a 	lds	r13, 0x0A90	; 0x800a90 <timeStartComp_2+0x1>
    72ea:	e0 90 91 0a 	lds	r14, 0x0A91	; 0x800a91 <timeStartComp_2+0x2>
    72ee:	f0 90 92 0a 	lds	r15, 0x0A92	; 0x800a92 <timeStartComp_2+0x3>
    72f2:	81 ef       	ldi	r24, 0xF1	; 241
    72f4:	98 e0       	ldi	r25, 0x08	; 8
    72f6:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    72fa:	a7 01       	movw	r20, r14
    72fc:	96 01       	movw	r18, r12
    72fe:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    7302:	c0 90 2b 07 	lds	r12, 0x072B	; 0x80072b <time_count_2.3196>
    7306:	d0 90 2c 07 	lds	r13, 0x072C	; 0x80072c <time_count_2.3196+0x1>
    730a:	e0 90 2d 07 	lds	r14, 0x072D	; 0x80072d <time_count_2.3196+0x2>
    730e:	f0 90 2e 07 	lds	r15, 0x072E	; 0x80072e <time_count_2.3196+0x3>
    7312:	dc 01       	movw	r26, r24
    7314:	cb 01       	movw	r24, r22
    7316:	8c 0d       	add	r24, r12
    7318:	9d 1d       	adc	r25, r13
    731a:	ae 1d       	adc	r26, r14
    731c:	bf 1d       	adc	r27, r15
    731e:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <time_count_2.3196>
    7322:	90 93 2c 07 	sts	0x072C, r25	; 0x80072c <time_count_2.3196+0x1>
    7326:	a0 93 2d 07 	sts	0x072D, r26	; 0x80072d <time_count_2.3196+0x2>
    732a:	b0 93 2e 07 	sts	0x072E, r27	; 0x80072e <time_count_2.3196+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_compressor_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    732e:	0f 90       	pop	r0
    7330:	0f 90       	pop	r0
    7332:	0f 90       	pop	r0
    7334:	0f 90       	pop	r0
    7336:	81 31       	cpi	r24, 0x11	; 17
    7338:	9e 40       	sbci	r25, 0x0E	; 14
    733a:	a1 05       	cpc	r26, r1
    733c:	b1 05       	cpc	r27, r1
    733e:	b8 f0       	brcs	.+46     	; 0x736e <Comp_Stop+0x1ca>
    7340:	e6 e4       	ldi	r30, 0x46	; 70
    7342:	f9 e0       	ldi	r31, 0x09	; 9
    7344:	80 81       	ld	r24, Z
    7346:	91 81       	ldd	r25, Z+1	; 0x01
    7348:	01 96       	adiw	r24, 0x01	; 1
    734a:	91 83       	std	Z+1, r25	; 0x01
    734c:	80 83       	st	Z, r24
    734e:	40 e6       	ldi	r20, 0x60	; 96
    7350:	50 e0       	ldi	r21, 0x00	; 0
    7352:	60 e0       	ldi	r22, 0x00	; 0
    7354:	70 e0       	ldi	r23, 0x00	; 0
    7356:	86 ef       	ldi	r24, 0xF6	; 246
    7358:	98 e0       	ldi	r25, 0x08	; 8
    735a:	0e 94 8a 5d 	call	0xbb14	; 0xbb14 <eeprom_update_block>
    735e:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <time_count_2.3196>
    7362:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <time_count_2.3196+0x1>
    7366:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <time_count_2.3196+0x2>
    736a:	10 92 2e 07 	sts	0x072E, r1	; 0x80072e <time_count_2.3196+0x3>
			
		}
		xTimerStart(xSwitchRevOne_2_time, 0);
    736e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    7372:	9b 01       	movw	r18, r22
    7374:	ac 01       	movw	r20, r24
    7376:	c1 2c       	mov	r12, r1
    7378:	d1 2c       	mov	r13, r1
    737a:	76 01       	movw	r14, r12
    737c:	00 e0       	ldi	r16, 0x00	; 0
    737e:	10 e0       	ldi	r17, 0x00	; 0
    7380:	61 e0       	ldi	r22, 0x01	; 1
    7382:	80 91 9e 0a 	lds	r24, 0x0A9E	; 0x800a9e <xSwitchRevOne_2_time>
    7386:	90 91 9f 0a 	lds	r25, 0x0A9F	; 0x800a9f <xSwitchRevOne_2_time+0x1>
    738a:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
	
	
}
    738e:	df 91       	pop	r29
    7390:	cf 91       	pop	r28
    7392:	1f 91       	pop	r17
    7394:	0f 91       	pop	r16
    7396:	ff 90       	pop	r15
    7398:	ef 90       	pop	r14
    739a:	df 90       	pop	r13
    739c:	cf 90       	pop	r12
    739e:	08 95       	ret

000073a0 <goToMode>:
	else return OFF;

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void goToMode(xCompressor *comp)
{   //calibration(comp);
    73a0:	cf 93       	push	r28
    73a2:	df 93       	push	r29
    73a4:	ec 01       	movw	r28, r24
	stop_timers(comp);
    73a6:	a3 dc       	rcall	.-1722   	; 0x6cee <stop_timers>
	startTrvTimer(comp);
    73a8:	ce 01       	movw	r24, r28
    73aa:	0e 94 c3 51 	call	0xa386	; 0xa386 <startTrvTimer>
	//comp->switchToMode=true;
	
	StarSoursePump(comp);
    73ae:	ce 01       	movw	r24, r28
    73b0:	96 db       	rcall	.-2260   	; 0x6ade <StarSoursePump>
	//Comp_1.Steps = Fuzzy(&Comp_1,EEpromData.trv_corection_1);
	
}
    73b2:	df 91       	pop	r29
    73b4:	cf 91       	pop	r28
    73b6:	08 95       	ret

000073b8 <mod_pump>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void mod_pump( xCompressor *comp,xEEdata* eeData){
    73b8:	2f 92       	push	r2
    73ba:	3f 92       	push	r3
    73bc:	4f 92       	push	r4
    73be:	5f 92       	push	r5
    73c0:	6f 92       	push	r6
    73c2:	7f 92       	push	r7
    73c4:	8f 92       	push	r8
    73c6:	9f 92       	push	r9
    73c8:	af 92       	push	r10
    73ca:	bf 92       	push	r11
    73cc:	cf 92       	push	r12
    73ce:	df 92       	push	r13
    73d0:	ef 92       	push	r14
    73d2:	ff 92       	push	r15
    73d4:	1f 93       	push	r17
    73d6:	cf 93       	push	r28
    73d8:	df 93       	push	r29
    73da:	ec 01       	movw	r28, r24
    73dc:	1b 01       	movw	r2, r22

	uint8_t temp;
	temp = selmode(&EEpromData);
    73de:	86 ef       	ldi	r24, 0xF6	; 246
    73e0:	98 e0       	ldi	r25, 0x08	; 8
    73e2:	5c dc       	rcall	.-1864   	; 0x6c9c <selmode>
    73e4:	18 2f       	mov	r17, r24
	if(temp!=comp->modeOfPump ){comp->modeOfPump=temp; Comp_Stop(comp);}
    73e6:	88 89       	ldd	r24, Y+16	; 0x10
    73e8:	18 17       	cp	r17, r24
    73ea:	19 f0       	breq	.+6      	; 0x73f2 <mod_pump+0x3a>
    73ec:	18 8b       	std	Y+16, r17	; 0x10
    73ee:	ce 01       	movw	r24, r28
    73f0:	d9 de       	rcall	.-590    	; 0x71a4 <Comp_Stop>

	switch(temp){
    73f2:	13 30       	cpi	r17, 0x03	; 3
    73f4:	09 f4       	brne	.+2      	; 0x73f8 <mod_pump+0x40>
    73f6:	c8 c0       	rjmp	.+400    	; 0x7588 <mod_pump+0x1d0>
    73f8:	30 f4       	brcc	.+12     	; 0x7406 <mod_pump+0x4e>
    73fa:	11 30       	cpi	r17, 0x01	; 1
    73fc:	59 f0       	breq	.+22     	; 0x7414 <mod_pump+0x5c>
    73fe:	12 30       	cpi	r17, 0x02	; 2
    7400:	09 f4       	brne	.+2      	; 0x7404 <mod_pump+0x4c>
    7402:	6a c0       	rjmp	.+212    	; 0x74d8 <mod_pump+0x120>
    7404:	14 c5       	rjmp	.+2600   	; 0x7e2e <mod_pump+0xa76>
    7406:	14 30       	cpi	r17, 0x04	; 4
    7408:	09 f4       	brne	.+2      	; 0x740c <mod_pump+0x54>
    740a:	18 c1       	rjmp	.+560    	; 0x763c <mod_pump+0x284>
    740c:	15 30       	cpi	r17, 0x05	; 5
    740e:	09 f4       	brne	.+2      	; 0x7412 <mod_pump+0x5a>
    7410:	62 c2       	rjmp	.+1220   	; 0x78d6 <mod_pump+0x51e>
    7412:	0d c5       	rjmp	.+2586   	; 0x7e2e <mod_pump+0xa76>
		case DHW: {
		if(comp->Index==1){
    7414:	fe 01       	movw	r30, r28
    7416:	e2 59       	subi	r30, 0x92	; 146
    7418:	ff 4f       	sbci	r31, 0xFF	; 255
    741a:	80 81       	ld	r24, Z
    741c:	91 81       	ldd	r25, Z+1	; 0x01
    741e:	01 97       	sbiw	r24, 0x01	; 1
    7420:	09 f0       	breq	.+2      	; 0x7424 <mod_pump+0x6c>
    7422:	05 c5       	rjmp	.+2570   	; 0x7e2e <mod_pump+0xa76>
			if ( comp->Dhw_Temp > eeData->Set_DHW && comp->heatingWater && !comp->switchToMode) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp);}
    7424:	8a 88       	ldd	r8, Y+18	; 0x12
    7426:	9b 88       	ldd	r9, Y+19	; 0x13
    7428:	ac 88       	ldd	r10, Y+20	; 0x14
    742a:	bd 88       	ldd	r11, Y+21	; 0x15
    742c:	f1 01       	movw	r30, r2
    742e:	e3 8c       	ldd	r14, Z+27	; 0x1b
    7430:	f1 2c       	mov	r15, r1
    7432:	b7 01       	movw	r22, r14
    7434:	0f 2c       	mov	r0, r15
    7436:	00 0c       	add	r0, r0
    7438:	88 0b       	sbc	r24, r24
    743a:	99 0b       	sbc	r25, r25
    743c:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7440:	9b 01       	movw	r18, r22
    7442:	ac 01       	movw	r20, r24
    7444:	c5 01       	movw	r24, r10
    7446:	b4 01       	movw	r22, r8
    7448:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    744c:	18 16       	cp	r1, r24
    744e:	6c f4       	brge	.+26     	; 0x746a <mod_pump+0xb2>
    7450:	8c 81       	ldd	r24, Y+4	; 0x04
    7452:	88 23       	and	r24, r24
    7454:	09 f4       	brne	.+2      	; 0x7458 <mod_pump+0xa0>
    7456:	82 c3       	rjmp	.+1796   	; 0x7b5c <mod_pump+0x7a4>
    7458:	88 81       	ld	r24, Y
    745a:	81 11       	cpse	r24, r1
    745c:	e8 c4       	rjmp	.+2512   	; 0x7e2e <mod_pump+0xa76>
    745e:	1c 82       	std	Y+4, r1	; 0x04
    7460:	ce 01       	movw	r24, r28
    7462:	a0 de       	rcall	.-704    	; 0x71a4 <Comp_Stop>
    7464:	ce 01       	movw	r24, r28
    7466:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
			if ( comp->Dhw_Temp < (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->switchToMode){calibration(comp);Comp_1.error=0; comp->heatingWater=true; goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_Dhw\r\n");}//Start_Dhw();
    746a:	f1 01       	movw	r30, r2
    746c:	63 8d       	ldd	r22, Z+27	; 0x1b
    746e:	70 e0       	ldi	r23, 0x00	; 0
    7470:	86 8d       	ldd	r24, Z+30	; 0x1e
    7472:	68 1b       	sub	r22, r24
    7474:	71 09       	sbc	r23, r1
    7476:	07 2e       	mov	r0, r23
    7478:	00 0c       	add	r0, r0
    747a:	88 0b       	sbc	r24, r24
    747c:	99 0b       	sbc	r25, r25
    747e:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7482:	9b 01       	movw	r18, r22
    7484:	ac 01       	movw	r20, r24
    7486:	6a 89       	ldd	r22, Y+18	; 0x12
    7488:	7b 89       	ldd	r23, Y+19	; 0x13
    748a:	8c 89       	ldd	r24, Y+20	; 0x14
    748c:	9d 89       	ldd	r25, Y+21	; 0x15
    748e:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    7492:	88 23       	and	r24, r24
    7494:	0c f0       	brlt	.+2      	; 0x7498 <mod_pump+0xe0>
    7496:	cb c4       	rjmp	.+2454   	; 0x7e2e <mod_pump+0xa76>
    7498:	8c 81       	ldd	r24, Y+4	; 0x04
    749a:	81 11       	cpse	r24, r1
    749c:	c8 c4       	rjmp	.+2448   	; 0x7e2e <mod_pump+0xa76>
    749e:	88 81       	ld	r24, Y
    74a0:	81 11       	cpse	r24, r1
    74a2:	c5 c4       	rjmp	.+2442   	; 0x7e2e <mod_pump+0xa76>
    74a4:	ce 01       	movw	r24, r28
    74a6:	0e 94 25 54 	call	0xa84a	; 0xa84a <calibration>
    74aa:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <Comp_1+0x6d>
    74ae:	10 92 c2 09 	sts	0x09C2, r1	; 0x8009c2 <Comp_1+0x6c>
    74b2:	81 e0       	ldi	r24, 0x01	; 1
    74b4:	8c 83       	std	Y+4, r24	; 0x04
    74b6:	ce 01       	movw	r24, r28
    74b8:	73 df       	rcall	.-282    	; 0x73a0 <goToMode>
    74ba:	8f e6       	ldi	r24, 0x6F	; 111
    74bc:	95 e0       	ldi	r25, 0x05	; 5
    74be:	9f 93       	push	r25
    74c0:	8f 93       	push	r24
    74c2:	84 e9       	ldi	r24, 0x94	; 148
    74c4:	97 e0       	ldi	r25, 0x07	; 7
    74c6:	9f 93       	push	r25
    74c8:	8f 93       	push	r24
    74ca:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    74ce:	0f 90       	pop	r0
    74d0:	0f 90       	pop	r0
    74d2:	0f 90       	pop	r0
    74d4:	0f 90       	pop	r0
    74d6:	ab c4       	rjmp	.+2390   	; 0x7e2e <mod_pump+0xa76>
		
		case HEAT:{
			//xSerialxPrintf(&xSerial3Port,"Set_Heating =%d\r\n,diffHEAT =%d\r\n,Bac_Temp =%f\r\n",eeData->Set_Heating,eeData->diffHEAT,data->Bac_Temp);
			//xSerialxPrintf(&xSerial3Port,"diffHEAT =%d\r\n",eeData->diffHEAT);
			//xSerialxPrintf(&xSerial3Port,"heat mode\r\n");
			if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {comp->Heating=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat\r\n");}
    74d8:	8e 88       	ldd	r8, Y+22	; 0x16
    74da:	9f 88       	ldd	r9, Y+23	; 0x17
    74dc:	a8 8c       	ldd	r10, Y+24	; 0x18
    74de:	b9 8c       	ldd	r11, Y+25	; 0x19
    74e0:	f1 01       	movw	r30, r2
    74e2:	e1 8c       	ldd	r14, Z+25	; 0x19
    74e4:	f1 2c       	mov	r15, r1
    74e6:	84 8d       	ldd	r24, Z+28	; 0x1c
    74e8:	b7 01       	movw	r22, r14
    74ea:	68 1b       	sub	r22, r24
    74ec:	71 09       	sbc	r23, r1
    74ee:	07 2e       	mov	r0, r23
    74f0:	00 0c       	add	r0, r0
    74f2:	88 0b       	sbc	r24, r24
    74f4:	99 0b       	sbc	r25, r25
    74f6:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    74fa:	9b 01       	movw	r18, r22
    74fc:	ac 01       	movw	r20, r24
    74fe:	c5 01       	movw	r24, r10
    7500:	b4 01       	movw	r22, r8
    7502:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    7506:	88 23       	and	r24, r24
    7508:	fc f4       	brge	.+62     	; 0x7548 <mod_pump+0x190>
    750a:	8a 81       	ldd	r24, Y+2	; 0x02
    750c:	81 11       	cpse	r24, r1
    750e:	3b c3       	rjmp	.+1654   	; 0x7b86 <mod_pump+0x7ce>
    7510:	88 81       	ld	r24, Y
    7512:	81 11       	cpse	r24, r1
    7514:	8c c4       	rjmp	.+2328   	; 0x7e2e <mod_pump+0xa76>
    7516:	81 e0       	ldi	r24, 0x01	; 1
    7518:	8a 83       	std	Y+2, r24	; 0x02
    751a:	ce 01       	movw	r24, r28
    751c:	0e 94 25 54 	call	0xa84a	; 0xa84a <calibration>
    7520:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <Comp_1+0x6d>
    7524:	10 92 c2 09 	sts	0x09C2, r1	; 0x8009c2 <Comp_1+0x6c>
    7528:	ce 01       	movw	r24, r28
    752a:	3a df       	rcall	.-396    	; 0x73a0 <goToMode>
    752c:	8b e7       	ldi	r24, 0x7B	; 123
    752e:	95 e0       	ldi	r25, 0x05	; 5
    7530:	9f 93       	push	r25
    7532:	8f 93       	push	r24
    7534:	84 e9       	ldi	r24, 0x94	; 148
    7536:	97 e0       	ldi	r25, 0x07	; 7
    7538:	9f 93       	push	r25
    753a:	8f 93       	push	r24
    753c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7540:	0f 90       	pop	r0
    7542:	0f 90       	pop	r0
    7544:	0f 90       	pop	r0
    7546:	0f 90       	pop	r0
			if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    7548:	f1 01       	movw	r30, r2
    754a:	61 8d       	ldd	r22, Z+25	; 0x19
    754c:	70 e0       	ldi	r23, 0x00	; 0
    754e:	80 e0       	ldi	r24, 0x00	; 0
    7550:	90 e0       	ldi	r25, 0x00	; 0
    7552:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7556:	9b 01       	movw	r18, r22
    7558:	ac 01       	movw	r20, r24
    755a:	6e 89       	ldd	r22, Y+22	; 0x16
    755c:	7f 89       	ldd	r23, Y+23	; 0x17
    755e:	88 8d       	ldd	r24, Y+24	; 0x18
    7560:	99 8d       	ldd	r25, Y+25	; 0x19
    7562:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    7566:	18 16       	cp	r1, r24
    7568:	0c f0       	brlt	.+2      	; 0x756c <mod_pump+0x1b4>
    756a:	61 c4       	rjmp	.+2242   	; 0x7e2e <mod_pump+0xa76>
    756c:	8a 81       	ldd	r24, Y+2	; 0x02
    756e:	88 23       	and	r24, r24
    7570:	09 f4       	brne	.+2      	; 0x7574 <mod_pump+0x1bc>
    7572:	5d c4       	rjmp	.+2234   	; 0x7e2e <mod_pump+0xa76>
    7574:	88 81       	ld	r24, Y
    7576:	81 11       	cpse	r24, r1
    7578:	5a c4       	rjmp	.+2228   	; 0x7e2e <mod_pump+0xa76>
    757a:	1a 82       	std	Y+2, r1	; 0x02
    757c:	ce 01       	movw	r24, r28
    757e:	12 de       	rcall	.-988    	; 0x71a4 <Comp_Stop>
    7580:	ce 01       	movw	r24, r28
    7582:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
    7586:	53 c4       	rjmp	.+2214   	; 0x7e2e <mod_pump+0xa76>
		} break;
		
		case COOL:{
			//xSerialxPrintf(&xSerial3Port,"COOL mode\r\n");
			if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
    7588:	8e 88       	ldd	r8, Y+22	; 0x16
    758a:	9f 88       	ldd	r9, Y+23	; 0x17
    758c:	a8 8c       	ldd	r10, Y+24	; 0x18
    758e:	b9 8c       	ldd	r11, Y+25	; 0x19
    7590:	f1 01       	movw	r30, r2
    7592:	e2 8c       	ldd	r14, Z+26	; 0x1a
    7594:	f1 2c       	mov	r15, r1
    7596:	b7 01       	movw	r22, r14
    7598:	0f 2c       	mov	r0, r15
    759a:	00 0c       	add	r0, r0
    759c:	88 0b       	sbc	r24, r24
    759e:	99 0b       	sbc	r25, r25
    75a0:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    75a4:	9b 01       	movw	r18, r22
    75a6:	ac 01       	movw	r20, r24
    75a8:	c5 01       	movw	r24, r10
    75aa:	b4 01       	movw	r22, r8
    75ac:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    75b0:	88 23       	and	r24, r24
    75b2:	6c f4       	brge	.+26     	; 0x75ce <mod_pump+0x216>
    75b4:	8b 81       	ldd	r24, Y+3	; 0x03
    75b6:	88 23       	and	r24, r24
    75b8:	09 f4       	brne	.+2      	; 0x75bc <mod_pump+0x204>
    75ba:	f5 c2       	rjmp	.+1514   	; 0x7ba6 <mod_pump+0x7ee>
    75bc:	88 81       	ld	r24, Y
    75be:	81 11       	cpse	r24, r1
    75c0:	36 c4       	rjmp	.+2156   	; 0x7e2e <mod_pump+0xa76>
    75c2:	1b 82       	std	Y+3, r1	; 0x03
    75c4:	ce 01       	movw	r24, r28
    75c6:	ee dd       	rcall	.-1060   	; 0x71a4 <Comp_Stop>
    75c8:	ce 01       	movw	r24, r28
    75ca:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
			if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {comp->Cooling=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool\r\n");}//
    75ce:	f1 01       	movw	r30, r2
    75d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    75d2:	65 8d       	ldd	r22, Z+29	; 0x1d
    75d4:	70 e0       	ldi	r23, 0x00	; 0
    75d6:	68 0f       	add	r22, r24
    75d8:	71 1d       	adc	r23, r1
    75da:	07 2e       	mov	r0, r23
    75dc:	00 0c       	add	r0, r0
    75de:	88 0b       	sbc	r24, r24
    75e0:	99 0b       	sbc	r25, r25
    75e2:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    75e6:	9b 01       	movw	r18, r22
    75e8:	ac 01       	movw	r20, r24
    75ea:	6e 89       	ldd	r22, Y+22	; 0x16
    75ec:	7f 89       	ldd	r23, Y+23	; 0x17
    75ee:	88 8d       	ldd	r24, Y+24	; 0x18
    75f0:	99 8d       	ldd	r25, Y+25	; 0x19
    75f2:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    75f6:	18 16       	cp	r1, r24
    75f8:	0c f0       	brlt	.+2      	; 0x75fc <mod_pump+0x244>
    75fa:	19 c4       	rjmp	.+2098   	; 0x7e2e <mod_pump+0xa76>
    75fc:	8b 81       	ldd	r24, Y+3	; 0x03
    75fe:	81 11       	cpse	r24, r1
    7600:	16 c4       	rjmp	.+2092   	; 0x7e2e <mod_pump+0xa76>
    7602:	88 81       	ld	r24, Y
    7604:	81 11       	cpse	r24, r1
    7606:	13 c4       	rjmp	.+2086   	; 0x7e2e <mod_pump+0xa76>
    7608:	81 e0       	ldi	r24, 0x01	; 1
    760a:	8b 83       	std	Y+3, r24	; 0x03
    760c:	ce 01       	movw	r24, r28
    760e:	0e 94 25 54 	call	0xa84a	; 0xa84a <calibration>
    7612:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <Comp_1+0x6d>
    7616:	10 92 c2 09 	sts	0x09C2, r1	; 0x8009c2 <Comp_1+0x6c>
    761a:	ce 01       	movw	r24, r28
    761c:	c1 de       	rcall	.-638    	; 0x73a0 <goToMode>
    761e:	88 e8       	ldi	r24, 0x88	; 136
    7620:	95 e0       	ldi	r25, 0x05	; 5
    7622:	9f 93       	push	r25
    7624:	8f 93       	push	r24
    7626:	84 e9       	ldi	r24, 0x94	; 148
    7628:	97 e0       	ldi	r25, 0x07	; 7
    762a:	9f 93       	push	r25
    762c:	8f 93       	push	r24
    762e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7632:	0f 90       	pop	r0
    7634:	0f 90       	pop	r0
    7636:	0f 90       	pop	r0
    7638:	0f 90       	pop	r0
    763a:	f9 c3       	rjmp	.+2034   	; 0x7e2e <mod_pump+0xa76>
		}break;
		
		case HEAT_DHW:
		
		{
			if(comp->Index==1)
    763c:	fe 01       	movw	r30, r28
    763e:	e2 59       	subi	r30, 0x92	; 146
    7640:	ff 4f       	sbci	r31, 0xFF	; 255
    7642:	80 81       	ld	r24, Z
    7644:	91 81       	ldd	r25, Z+1	; 0x01
    7646:	81 30       	cpi	r24, 0x01	; 1
    7648:	91 05       	cpc	r25, r1
    764a:	09 f0       	breq	.+2      	; 0x764e <mod_pump+0x296>
    764c:	ed c0       	rjmp	.+474    	; 0x7828 <mod_pump+0x470>
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
    764e:	8a 88       	ldd	r8, Y+18	; 0x12
    7650:	9b 88       	ldd	r9, Y+19	; 0x13
    7652:	ac 88       	ldd	r10, Y+20	; 0x14
    7654:	bd 88       	ldd	r11, Y+21	; 0x15
    7656:	f1 01       	movw	r30, r2
    7658:	e3 8c       	ldd	r14, Z+27	; 0x1b
    765a:	f1 2c       	mov	r15, r1
    765c:	86 8d       	ldd	r24, Z+30	; 0x1e
    765e:	b7 01       	movw	r22, r14
    7660:	68 1b       	sub	r22, r24
    7662:	71 09       	sbc	r23, r1
    7664:	07 2e       	mov	r0, r23
    7666:	00 0c       	add	r0, r0
    7668:	88 0b       	sbc	r24, r24
    766a:	99 0b       	sbc	r25, r25
    766c:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7670:	9b 01       	movw	r18, r22
    7672:	ac 01       	movw	r20, r24
    7674:	c5 01       	movw	r24, r10
    7676:	b4 01       	movw	r22, r8
    7678:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    767c:	88 23       	and	r24, r24
    767e:	1c f5       	brge	.+70     	; 0x76c6 <mod_pump+0x30e>
    7680:	8c 81       	ldd	r24, Y+4	; 0x04
    7682:	81 11       	cpse	r24, r1
    7684:	3c c3       	rjmp	.+1656   	; 0x7cfe <mod_pump+0x946>
    7686:	8a 81       	ldd	r24, Y+2	; 0x02
    7688:	81 11       	cpse	r24, r1
    768a:	a2 c2       	rjmp	.+1348   	; 0x7bd0 <mod_pump+0x818>
    768c:	88 81       	ld	r24, Y
    768e:	81 11       	cpse	r24, r1
    7690:	98 c3       	rjmp	.+1840   	; 0x7dc2 <mod_pump+0xa0a>
    7692:	81 e0       	ldi	r24, 0x01	; 1
    7694:	8c 83       	std	Y+4, r24	; 0x04
    7696:	ce 01       	movw	r24, r28
    7698:	0e 94 25 54 	call	0xa84a	; 0xa84a <calibration>
    769c:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <Comp_1+0x6d>
    76a0:	10 92 c2 09 	sts	0x09C2, r1	; 0x8009c2 <Comp_1+0x6c>
    76a4:	ce 01       	movw	r24, r28
    76a6:	7c de       	rcall	.-776    	; 0x73a0 <goToMode>
    76a8:	85 e9       	ldi	r24, 0x95	; 149
    76aa:	95 e0       	ldi	r25, 0x05	; 5
    76ac:	9f 93       	push	r25
    76ae:	8f 93       	push	r24
    76b0:	84 e9       	ldi	r24, 0x94	; 148
    76b2:	97 e0       	ldi	r25, 0x07	; 7
    76b4:	9f 93       	push	r25
    76b6:	8f 93       	push	r24
    76b8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    76bc:	0f 90       	pop	r0
    76be:	0f 90       	pop	r0
    76c0:	0f 90       	pop	r0
    76c2:	0f 90       	pop	r0
    76c4:	76 c0       	rjmp	.+236    	; 0x77b2 <mod_pump+0x3fa>
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    76c6:	4e 88       	ldd	r4, Y+22	; 0x16
    76c8:	5f 88       	ldd	r5, Y+23	; 0x17
    76ca:	68 8c       	ldd	r6, Y+24	; 0x18
    76cc:	79 8c       	ldd	r7, Y+25	; 0x19
    76ce:	f1 01       	movw	r30, r2
    76d0:	c1 8c       	ldd	r12, Z+25	; 0x19
    76d2:	d1 2c       	mov	r13, r1
    76d4:	84 8d       	ldd	r24, Z+28	; 0x1c
    76d6:	b6 01       	movw	r22, r12
    76d8:	68 1b       	sub	r22, r24
    76da:	71 09       	sbc	r23, r1
    76dc:	07 2e       	mov	r0, r23
    76de:	00 0c       	add	r0, r0
    76e0:	88 0b       	sbc	r24, r24
    76e2:	99 0b       	sbc	r25, r25
    76e4:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    76e8:	9b 01       	movw	r18, r22
    76ea:	ac 01       	movw	r20, r24
    76ec:	c3 01       	movw	r24, r6
    76ee:	b2 01       	movw	r22, r4
    76f0:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    76f4:	88 23       	and	r24, r24
    76f6:	1c f5       	brge	.+70     	; 0x773e <mod_pump+0x386>
    76f8:	8c 81       	ldd	r24, Y+4	; 0x04
    76fa:	81 11       	cpse	r24, r1
    76fc:	84 c2       	rjmp	.+1288   	; 0x7c06 <mod_pump+0x84e>
    76fe:	8a 81       	ldd	r24, Y+2	; 0x02
    7700:	81 11       	cpse	r24, r1
    7702:	1d c0       	rjmp	.+58     	; 0x773e <mod_pump+0x386>
    7704:	88 81       	ld	r24, Y
    7706:	81 11       	cpse	r24, r1
    7708:	1a c0       	rjmp	.+52     	; 0x773e <mod_pump+0x386>
    770a:	ce 01       	movw	r24, r28
    770c:	0e 94 25 54 	call	0xa84a	; 0xa84a <calibration>
    7710:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <Comp_1+0x6d>
    7714:	10 92 c2 09 	sts	0x09C2, r1	; 0x8009c2 <Comp_1+0x6c>
    7718:	81 e0       	ldi	r24, 0x01	; 1
    771a:	8a 83       	std	Y+2, r24	; 0x02
    771c:	ce 01       	movw	r24, r28
    771e:	40 de       	rcall	.-896    	; 0x73a0 <goToMode>
    7720:	83 ea       	ldi	r24, 0xA3	; 163
    7722:	95 e0       	ldi	r25, 0x05	; 5
    7724:	9f 93       	push	r25
    7726:	8f 93       	push	r24
    7728:	84 e9       	ldi	r24, 0x94	; 148
    772a:	97 e0       	ldi	r25, 0x07	; 7
    772c:	9f 93       	push	r25
    772e:	8f 93       	push	r24
    7730:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7734:	0f 90       	pop	r0
    7736:	0f 90       	pop	r0
    7738:	0f 90       	pop	r0
    773a:	0f 90       	pop	r0
    773c:	3a c0       	rjmp	.+116    	; 0x77b2 <mod_pump+0x3fa>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    773e:	b7 01       	movw	r22, r14
    7740:	ff 0c       	add	r15, r15
    7742:	88 0b       	sbc	r24, r24
    7744:	99 0b       	sbc	r25, r25
    7746:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    774a:	9b 01       	movw	r18, r22
    774c:	ac 01       	movw	r20, r24
    774e:	c5 01       	movw	r24, r10
    7750:	b4 01       	movw	r22, r8
    7752:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    7756:	18 16       	cp	r1, r24
    7758:	8c f4       	brge	.+34     	; 0x777c <mod_pump+0x3c4>
    775a:	8c 81       	ldd	r24, Y+4	; 0x04
    775c:	88 23       	and	r24, r24
    775e:	09 f4       	brne	.+2      	; 0x7762 <mod_pump+0x3aa>
    7760:	62 c2       	rjmp	.+1220   	; 0x7c26 <mod_pump+0x86e>
    7762:	8a 81       	ldd	r24, Y+2	; 0x02
    7764:	81 11       	cpse	r24, r1
    7766:	25 c0       	rjmp	.+74     	; 0x77b2 <mod_pump+0x3fa>
    7768:	88 81       	ld	r24, Y
    776a:	81 11       	cpse	r24, r1
    776c:	22 c0       	rjmp	.+68     	; 0x77b2 <mod_pump+0x3fa>
    776e:	1c 82       	std	Y+4, r1	; 0x04
    7770:	ce 01       	movw	r24, r28
    7772:	18 dd       	rcall	.-1488   	; 0x71a4 <Comp_Stop>
    7774:	ce 01       	movw	r24, r28
    7776:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
    777a:	1b c0       	rjmp	.+54     	; 0x77b2 <mod_pump+0x3fa>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    777c:	b6 01       	movw	r22, r12
    777e:	dd 0c       	add	r13, r13
    7780:	88 0b       	sbc	r24, r24
    7782:	99 0b       	sbc	r25, r25
    7784:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7788:	a3 01       	movw	r20, r6
    778a:	92 01       	movw	r18, r4
    778c:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    7790:	88 23       	and	r24, r24
    7792:	7c f4       	brge	.+30     	; 0x77b2 <mod_pump+0x3fa>
    7794:	8c 81       	ldd	r24, Y+4	; 0x04
    7796:	81 11       	cpse	r24, r1
    7798:	0c c0       	rjmp	.+24     	; 0x77b2 <mod_pump+0x3fa>
    779a:	8a 81       	ldd	r24, Y+2	; 0x02
    779c:	88 23       	and	r24, r24
    779e:	49 f0       	breq	.+18     	; 0x77b2 <mod_pump+0x3fa>
    77a0:	88 81       	ld	r24, Y
    77a2:	81 11       	cpse	r24, r1
    77a4:	06 c0       	rjmp	.+12     	; 0x77b2 <mod_pump+0x3fa>
    77a6:	1a 82       	std	Y+2, r1	; 0x02
    77a8:	ce 01       	movw	r24, r28
    77aa:	fc dc       	rcall	.-1544   	; 0x71a4 <Comp_Stop>
    77ac:	ce 01       	movw	r24, r28
    77ae:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
				if(EEpromData.NombComp==2) if(comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW)&& !comp->heatingWater && comp->Heating && !comp->switchToMode){comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_again\r\n");}	
    77b2:	80 91 16 09 	lds	r24, 0x0916	; 0x800916 <EEpromData+0x20>
    77b6:	82 30       	cpi	r24, 0x02	; 2
    77b8:	09 f0       	breq	.+2      	; 0x77bc <mod_pump+0x404>
    77ba:	39 c3       	rjmp	.+1650   	; 0x7e2e <mod_pump+0xa76>
    77bc:	f1 01       	movw	r30, r2
    77be:	63 8d       	ldd	r22, Z+27	; 0x1b
    77c0:	70 e0       	ldi	r23, 0x00	; 0
    77c2:	86 8d       	ldd	r24, Z+30	; 0x1e
    77c4:	68 1b       	sub	r22, r24
    77c6:	71 09       	sbc	r23, r1
    77c8:	07 2e       	mov	r0, r23
    77ca:	00 0c       	add	r0, r0
    77cc:	88 0b       	sbc	r24, r24
    77ce:	99 0b       	sbc	r25, r25
    77d0:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    77d4:	9b 01       	movw	r18, r22
    77d6:	ac 01       	movw	r20, r24
    77d8:	6a 89       	ldd	r22, Y+18	; 0x12
    77da:	7b 89       	ldd	r23, Y+19	; 0x13
    77dc:	8c 89       	ldd	r24, Y+20	; 0x14
    77de:	9d 89       	ldd	r25, Y+21	; 0x15
    77e0:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    77e4:	88 23       	and	r24, r24
    77e6:	0c f0       	brlt	.+2      	; 0x77ea <mod_pump+0x432>
    77e8:	22 c3       	rjmp	.+1604   	; 0x7e2e <mod_pump+0xa76>
    77ea:	8c 81       	ldd	r24, Y+4	; 0x04
    77ec:	81 11       	cpse	r24, r1
    77ee:	1f c3       	rjmp	.+1598   	; 0x7e2e <mod_pump+0xa76>
    77f0:	8a 81       	ldd	r24, Y+2	; 0x02
    77f2:	88 23       	and	r24, r24
    77f4:	09 f4       	brne	.+2      	; 0x77f8 <mod_pump+0x440>
    77f6:	1b c3       	rjmp	.+1590   	; 0x7e2e <mod_pump+0xa76>
    77f8:	88 81       	ld	r24, Y
    77fa:	81 11       	cpse	r24, r1
    77fc:	18 c3       	rjmp	.+1584   	; 0x7e2e <mod_pump+0xa76>
    77fe:	1a 82       	std	Y+2, r1	; 0x02
    7800:	ce 01       	movw	r24, r28
    7802:	d0 dc       	rcall	.-1632   	; 0x71a4 <Comp_Stop>
    7804:	ce 01       	movw	r24, r28
    7806:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
    780a:	82 eb       	ldi	r24, 0xB2	; 178
    780c:	95 e0       	ldi	r25, 0x05	; 5
    780e:	9f 93       	push	r25
    7810:	8f 93       	push	r24
    7812:	84 e9       	ldi	r24, 0x94	; 148
    7814:	97 e0       	ldi	r25, 0x07	; 7
    7816:	9f 93       	push	r25
    7818:	8f 93       	push	r24
    781a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    781e:	0f 90       	pop	r0
    7820:	0f 90       	pop	r0
    7822:	0f 90       	pop	r0
    7824:	0f 90       	pop	r0
    7826:	03 c3       	rjmp	.+1542   	; 0x7e2e <mod_pump+0xa76>
			}
			else if(comp->Index==2)
    7828:	02 97       	sbiw	r24, 0x02	; 2
    782a:	09 f0       	breq	.+2      	; 0x782e <mod_pump+0x476>
    782c:	00 c3       	rjmp	.+1536   	; 0x7e2e <mod_pump+0xa76>
			{
				if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {calibration(comp);comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_2\r\n");}
    782e:	8e 88       	ldd	r8, Y+22	; 0x16
    7830:	9f 88       	ldd	r9, Y+23	; 0x17
    7832:	a8 8c       	ldd	r10, Y+24	; 0x18
    7834:	b9 8c       	ldd	r11, Y+25	; 0x19
    7836:	f1 01       	movw	r30, r2
    7838:	e1 8c       	ldd	r14, Z+25	; 0x19
    783a:	f1 2c       	mov	r15, r1
    783c:	84 8d       	ldd	r24, Z+28	; 0x1c
    783e:	b7 01       	movw	r22, r14
    7840:	68 1b       	sub	r22, r24
    7842:	71 09       	sbc	r23, r1
    7844:	07 2e       	mov	r0, r23
    7846:	00 0c       	add	r0, r0
    7848:	88 0b       	sbc	r24, r24
    784a:	99 0b       	sbc	r25, r25
    784c:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7850:	9b 01       	movw	r18, r22
    7852:	ac 01       	movw	r20, r24
    7854:	c5 01       	movw	r24, r10
    7856:	b4 01       	movw	r22, r8
    7858:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    785c:	88 23       	and	r24, r24
    785e:	dc f4       	brge	.+54     	; 0x7896 <mod_pump+0x4de>
    7860:	8a 81       	ldd	r24, Y+2	; 0x02
    7862:	81 11       	cpse	r24, r1
    7864:	ee c1       	rjmp	.+988    	; 0x7c42 <mod_pump+0x88a>
    7866:	88 81       	ld	r24, Y
    7868:	81 11       	cpse	r24, r1
    786a:	e1 c2       	rjmp	.+1474   	; 0x7e2e <mod_pump+0xa76>
    786c:	ce 01       	movw	r24, r28
    786e:	0e 94 25 54 	call	0xa84a	; 0xa84a <calibration>
    7872:	81 e0       	ldi	r24, 0x01	; 1
    7874:	8a 83       	std	Y+2, r24	; 0x02
    7876:	ce 01       	movw	r24, r28
    7878:	93 dd       	rcall	.-1242   	; 0x73a0 <goToMode>
    787a:	84 ec       	ldi	r24, 0xC4	; 196
    787c:	95 e0       	ldi	r25, 0x05	; 5
    787e:	9f 93       	push	r25
    7880:	8f 93       	push	r24
    7882:	84 e9       	ldi	r24, 0x94	; 148
    7884:	97 e0       	ldi	r25, 0x07	; 7
    7886:	9f 93       	push	r25
    7888:	8f 93       	push	r24
    788a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    788e:	0f 90       	pop	r0
    7890:	0f 90       	pop	r0
    7892:	0f 90       	pop	r0
    7894:	0f 90       	pop	r0
				if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    7896:	f1 01       	movw	r30, r2
    7898:	61 8d       	ldd	r22, Z+25	; 0x19
    789a:	70 e0       	ldi	r23, 0x00	; 0
    789c:	80 e0       	ldi	r24, 0x00	; 0
    789e:	90 e0       	ldi	r25, 0x00	; 0
    78a0:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    78a4:	9b 01       	movw	r18, r22
    78a6:	ac 01       	movw	r20, r24
    78a8:	6e 89       	ldd	r22, Y+22	; 0x16
    78aa:	7f 89       	ldd	r23, Y+23	; 0x17
    78ac:	88 8d       	ldd	r24, Y+24	; 0x18
    78ae:	99 8d       	ldd	r25, Y+25	; 0x19
    78b0:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    78b4:	18 16       	cp	r1, r24
    78b6:	0c f0       	brlt	.+2      	; 0x78ba <mod_pump+0x502>
    78b8:	ba c2       	rjmp	.+1396   	; 0x7e2e <mod_pump+0xa76>
    78ba:	8a 81       	ldd	r24, Y+2	; 0x02
    78bc:	88 23       	and	r24, r24
    78be:	09 f4       	brne	.+2      	; 0x78c2 <mod_pump+0x50a>
    78c0:	b6 c2       	rjmp	.+1388   	; 0x7e2e <mod_pump+0xa76>
    78c2:	88 81       	ld	r24, Y
    78c4:	81 11       	cpse	r24, r1
    78c6:	b3 c2       	rjmp	.+1382   	; 0x7e2e <mod_pump+0xa76>
    78c8:	1a 82       	std	Y+2, r1	; 0x02
    78ca:	ce 01       	movw	r24, r28
    78cc:	6b dc       	rcall	.-1834   	; 0x71a4 <Comp_Stop>
    78ce:	ce 01       	movw	r24, r28
    78d0:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
    78d4:	ac c2       	rjmp	.+1368   	; 0x7e2e <mod_pump+0xa76>
			
		}break;
		
		case COOL_DHW:
		{
			if(comp->Index==1)
    78d6:	fe 01       	movw	r30, r28
    78d8:	e2 59       	subi	r30, 0x92	; 146
    78da:	ff 4f       	sbci	r31, 0xFF	; 255
    78dc:	80 81       	ld	r24, Z
    78de:	91 81       	ldd	r25, Z+1	; 0x01
    78e0:	81 30       	cpi	r24, 0x01	; 1
    78e2:	91 05       	cpc	r25, r1
    78e4:	09 f0       	breq	.+2      	; 0x78e8 <mod_pump+0x530>
    78e6:	e1 c0       	rjmp	.+450    	; 0x7aaa <mod_pump+0x6f2>
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
    78e8:	8a 88       	ldd	r8, Y+18	; 0x12
    78ea:	9b 88       	ldd	r9, Y+19	; 0x13
    78ec:	ac 88       	ldd	r10, Y+20	; 0x14
    78ee:	bd 88       	ldd	r11, Y+21	; 0x15
    78f0:	f1 01       	movw	r30, r2
    78f2:	e3 8c       	ldd	r14, Z+27	; 0x1b
    78f4:	f1 2c       	mov	r15, r1
    78f6:	86 8d       	ldd	r24, Z+30	; 0x1e
    78f8:	b7 01       	movw	r22, r14
    78fa:	68 1b       	sub	r22, r24
    78fc:	71 09       	sbc	r23, r1
    78fe:	07 2e       	mov	r0, r23
    7900:	00 0c       	add	r0, r0
    7902:	88 0b       	sbc	r24, r24
    7904:	99 0b       	sbc	r25, r25
    7906:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    790a:	9b 01       	movw	r18, r22
    790c:	ac 01       	movw	r20, r24
    790e:	c5 01       	movw	r24, r10
    7910:	b4 01       	movw	r22, r8
    7912:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    7916:	88 23       	and	r24, r24
    7918:	2c f5       	brge	.+74     	; 0x7964 <mod_pump+0x5ac>
    791a:	8c 81       	ldd	r24, Y+4	; 0x04
    791c:	81 11       	cpse	r24, r1
    791e:	21 c2       	rjmp	.+1090   	; 0x7d62 <mod_pump+0x9aa>
    7920:	8b 81       	ldd	r24, Y+3	; 0x03
    7922:	81 11       	cpse	r24, r1
    7924:	9e c1       	rjmp	.+828    	; 0x7c62 <mod_pump+0x8aa>
    7926:	88 81       	ld	r24, Y
    7928:	81 11       	cpse	r24, r1
    792a:	66 c2       	rjmp	.+1228   	; 0x7df8 <mod_pump+0xa40>
    792c:	ff 24       	eor	r15, r15
    792e:	f3 94       	inc	r15
    7930:	fc 82       	std	Y+4, r15	; 0x04
    7932:	ce 01       	movw	r24, r28
    7934:	0e 94 25 54 	call	0xa84a	; 0xa84a <calibration>
    7938:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <Comp_1+0x6d>
    793c:	10 92 c2 09 	sts	0x09C2, r1	; 0x8009c2 <Comp_1+0x6c>
    7940:	fc 82       	std	Y+4, r15	; 0x04
    7942:	ce 01       	movw	r24, r28
    7944:	2d dd       	rcall	.-1446   	; 0x73a0 <goToMode>
    7946:	83 ed       	ldi	r24, 0xD3	; 211
    7948:	95 e0       	ldi	r25, 0x05	; 5
    794a:	9f 93       	push	r25
    794c:	8f 93       	push	r24
    794e:	84 e9       	ldi	r24, 0x94	; 148
    7950:	97 e0       	ldi	r25, 0x07	; 7
    7952:	9f 93       	push	r25
    7954:	8f 93       	push	r24
    7956:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    795a:	0f 90       	pop	r0
    795c:	0f 90       	pop	r0
    795e:	0f 90       	pop	r0
    7960:	0f 90       	pop	r0
    7962:	76 c0       	rjmp	.+236    	; 0x7a50 <mod_pump+0x698>
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7964:	4e 88       	ldd	r4, Y+22	; 0x16
    7966:	5f 88       	ldd	r5, Y+23	; 0x17
    7968:	68 8c       	ldd	r6, Y+24	; 0x18
    796a:	79 8c       	ldd	r7, Y+25	; 0x19
    796c:	f1 01       	movw	r30, r2
    796e:	c1 8c       	ldd	r12, Z+25	; 0x19
    7970:	d1 2c       	mov	r13, r1
    7972:	84 8d       	ldd	r24, Z+28	; 0x1c
    7974:	b6 01       	movw	r22, r12
    7976:	68 1b       	sub	r22, r24
    7978:	71 09       	sbc	r23, r1
    797a:	07 2e       	mov	r0, r23
    797c:	00 0c       	add	r0, r0
    797e:	88 0b       	sbc	r24, r24
    7980:	99 0b       	sbc	r25, r25
    7982:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7986:	9b 01       	movw	r18, r22
    7988:	ac 01       	movw	r20, r24
    798a:	c3 01       	movw	r24, r6
    798c:	b2 01       	movw	r22, r4
    798e:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    7992:	88 23       	and	r24, r24
    7994:	1c f5       	brge	.+70     	; 0x79dc <mod_pump+0x624>
    7996:	8c 81       	ldd	r24, Y+4	; 0x04
    7998:	81 11       	cpse	r24, r1
    799a:	7e c1       	rjmp	.+764    	; 0x7c98 <mod_pump+0x8e0>
    799c:	8b 81       	ldd	r24, Y+3	; 0x03
    799e:	81 11       	cpse	r24, r1
    79a0:	1d c0       	rjmp	.+58     	; 0x79dc <mod_pump+0x624>
    79a2:	88 81       	ld	r24, Y
    79a4:	81 11       	cpse	r24, r1
    79a6:	1a c0       	rjmp	.+52     	; 0x79dc <mod_pump+0x624>
    79a8:	ce 01       	movw	r24, r28
    79aa:	0e 94 25 54 	call	0xa84a	; 0xa84a <calibration>
    79ae:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <Comp_1+0x6d>
    79b2:	10 92 c2 09 	sts	0x09C2, r1	; 0x8009c2 <Comp_1+0x6c>
    79b6:	81 e0       	ldi	r24, 0x01	; 1
    79b8:	8b 83       	std	Y+3, r24	; 0x03
    79ba:	ce 01       	movw	r24, r28
    79bc:	f1 dc       	rcall	.-1566   	; 0x73a0 <goToMode>
    79be:	85 ee       	ldi	r24, 0xE5	; 229
    79c0:	95 e0       	ldi	r25, 0x05	; 5
    79c2:	9f 93       	push	r25
    79c4:	8f 93       	push	r24
    79c6:	84 e9       	ldi	r24, 0x94	; 148
    79c8:	97 e0       	ldi	r25, 0x07	; 7
    79ca:	9f 93       	push	r25
    79cc:	8f 93       	push	r24
    79ce:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    79d2:	0f 90       	pop	r0
    79d4:	0f 90       	pop	r0
    79d6:	0f 90       	pop	r0
    79d8:	0f 90       	pop	r0
    79da:	3a c0       	rjmp	.+116    	; 0x7a50 <mod_pump+0x698>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    79dc:	b7 01       	movw	r22, r14
    79de:	ff 0c       	add	r15, r15
    79e0:	88 0b       	sbc	r24, r24
    79e2:	99 0b       	sbc	r25, r25
    79e4:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    79e8:	9b 01       	movw	r18, r22
    79ea:	ac 01       	movw	r20, r24
    79ec:	c5 01       	movw	r24, r10
    79ee:	b4 01       	movw	r22, r8
    79f0:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    79f4:	18 16       	cp	r1, r24
    79f6:	8c f4       	brge	.+34     	; 0x7a1a <mod_pump+0x662>
    79f8:	8c 81       	ldd	r24, Y+4	; 0x04
    79fa:	88 23       	and	r24, r24
    79fc:	09 f4       	brne	.+2      	; 0x7a00 <mod_pump+0x648>
    79fe:	5c c1       	rjmp	.+696    	; 0x7cb8 <mod_pump+0x900>
    7a00:	8b 81       	ldd	r24, Y+3	; 0x03
    7a02:	81 11       	cpse	r24, r1
    7a04:	25 c0       	rjmp	.+74     	; 0x7a50 <mod_pump+0x698>
    7a06:	88 81       	ld	r24, Y
    7a08:	81 11       	cpse	r24, r1
    7a0a:	22 c0       	rjmp	.+68     	; 0x7a50 <mod_pump+0x698>
    7a0c:	1c 82       	std	Y+4, r1	; 0x04
    7a0e:	ce 01       	movw	r24, r28
    7a10:	c9 db       	rcall	.-2158   	; 0x71a4 <Comp_Stop>
    7a12:	ce 01       	movw	r24, r28
    7a14:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
    7a18:	1b c0       	rjmp	.+54     	; 0x7a50 <mod_pump+0x698>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7a1a:	b6 01       	movw	r22, r12
    7a1c:	dd 0c       	add	r13, r13
    7a1e:	88 0b       	sbc	r24, r24
    7a20:	99 0b       	sbc	r25, r25
    7a22:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7a26:	a3 01       	movw	r20, r6
    7a28:	92 01       	movw	r18, r4
    7a2a:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    7a2e:	88 23       	and	r24, r24
    7a30:	7c f4       	brge	.+30     	; 0x7a50 <mod_pump+0x698>
    7a32:	8c 81       	ldd	r24, Y+4	; 0x04
    7a34:	81 11       	cpse	r24, r1
    7a36:	0c c0       	rjmp	.+24     	; 0x7a50 <mod_pump+0x698>
    7a38:	8b 81       	ldd	r24, Y+3	; 0x03
    7a3a:	88 23       	and	r24, r24
    7a3c:	49 f0       	breq	.+18     	; 0x7a50 <mod_pump+0x698>
    7a3e:	88 81       	ld	r24, Y
    7a40:	81 11       	cpse	r24, r1
    7a42:	06 c0       	rjmp	.+12     	; 0x7a50 <mod_pump+0x698>
    7a44:	1b 82       	std	Y+3, r1	; 0x03
    7a46:	ce 01       	movw	r24, r28
    7a48:	ad db       	rcall	.-2214   	; 0x71a4 <Comp_Stop>
    7a4a:	ce 01       	movw	r24, r28
    7a4c:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
				if(EEpromData.NombComp==2) if (comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && comp->Cooling && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}	
    7a50:	80 91 16 09 	lds	r24, 0x0916	; 0x800916 <EEpromData+0x20>
    7a54:	82 30       	cpi	r24, 0x02	; 2
    7a56:	09 f0       	breq	.+2      	; 0x7a5a <mod_pump+0x6a2>
    7a58:	ea c1       	rjmp	.+980    	; 0x7e2e <mod_pump+0xa76>
    7a5a:	f1 01       	movw	r30, r2
    7a5c:	63 8d       	ldd	r22, Z+27	; 0x1b
    7a5e:	70 e0       	ldi	r23, 0x00	; 0
    7a60:	86 8d       	ldd	r24, Z+30	; 0x1e
    7a62:	68 1b       	sub	r22, r24
    7a64:	71 09       	sbc	r23, r1
    7a66:	07 2e       	mov	r0, r23
    7a68:	00 0c       	add	r0, r0
    7a6a:	88 0b       	sbc	r24, r24
    7a6c:	99 0b       	sbc	r25, r25
    7a6e:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7a72:	9b 01       	movw	r18, r22
    7a74:	ac 01       	movw	r20, r24
    7a76:	6a 89       	ldd	r22, Y+18	; 0x12
    7a78:	7b 89       	ldd	r23, Y+19	; 0x13
    7a7a:	8c 89       	ldd	r24, Y+20	; 0x14
    7a7c:	9d 89       	ldd	r25, Y+21	; 0x15
    7a7e:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    7a82:	88 23       	and	r24, r24
    7a84:	0c f0       	brlt	.+2      	; 0x7a88 <mod_pump+0x6d0>
    7a86:	d3 c1       	rjmp	.+934    	; 0x7e2e <mod_pump+0xa76>
    7a88:	8c 81       	ldd	r24, Y+4	; 0x04
    7a8a:	81 11       	cpse	r24, r1
    7a8c:	d0 c1       	rjmp	.+928    	; 0x7e2e <mod_pump+0xa76>
    7a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    7a90:	88 23       	and	r24, r24
    7a92:	09 f4       	brne	.+2      	; 0x7a96 <mod_pump+0x6de>
    7a94:	cc c1       	rjmp	.+920    	; 0x7e2e <mod_pump+0xa76>
    7a96:	88 81       	ld	r24, Y
    7a98:	81 11       	cpse	r24, r1
    7a9a:	c9 c1       	rjmp	.+914    	; 0x7e2e <mod_pump+0xa76>
    7a9c:	1b 82       	std	Y+3, r1	; 0x03
    7a9e:	ce 01       	movw	r24, r28
    7aa0:	81 db       	rcall	.-2302   	; 0x71a4 <Comp_Stop>
    7aa2:	ce 01       	movw	r24, r28
    7aa4:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
    7aa8:	c2 c1       	rjmp	.+900    	; 0x7e2e <mod_pump+0xa76>
			}
			else if(comp->Index==2)
    7aaa:	02 97       	sbiw	r24, 0x02	; 2
    7aac:	09 f0       	breq	.+2      	; 0x7ab0 <mod_pump+0x6f8>
    7aae:	bf c1       	rjmp	.+894    	; 0x7e2e <mod_pump+0xa76>
			{
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
    7ab0:	8e 88       	ldd	r8, Y+22	; 0x16
    7ab2:	9f 88       	ldd	r9, Y+23	; 0x17
    7ab4:	a8 8c       	ldd	r10, Y+24	; 0x18
    7ab6:	b9 8c       	ldd	r11, Y+25	; 0x19
    7ab8:	f1 01       	movw	r30, r2
    7aba:	e2 8c       	ldd	r14, Z+26	; 0x1a
    7abc:	f1 2c       	mov	r15, r1
    7abe:	b7 01       	movw	r22, r14
    7ac0:	0f 2c       	mov	r0, r15
    7ac2:	00 0c       	add	r0, r0
    7ac4:	88 0b       	sbc	r24, r24
    7ac6:	99 0b       	sbc	r25, r25
    7ac8:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7acc:	9b 01       	movw	r18, r22
    7ace:	ac 01       	movw	r20, r24
    7ad0:	c5 01       	movw	r24, r10
    7ad2:	b4 01       	movw	r22, r8
    7ad4:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    7ad8:	88 23       	and	r24, r24
    7ada:	6c f4       	brge	.+26     	; 0x7af6 <mod_pump+0x73e>
    7adc:	8b 81       	ldd	r24, Y+3	; 0x03
    7ade:	88 23       	and	r24, r24
    7ae0:	09 f4       	brne	.+2      	; 0x7ae4 <mod_pump+0x72c>
    7ae2:	f8 c0       	rjmp	.+496    	; 0x7cd4 <mod_pump+0x91c>
    7ae4:	88 81       	ld	r24, Y
    7ae6:	81 11       	cpse	r24, r1
    7ae8:	a2 c1       	rjmp	.+836    	; 0x7e2e <mod_pump+0xa76>
    7aea:	1b 82       	std	Y+3, r1	; 0x03
    7aec:	ce 01       	movw	r24, r28
    7aee:	5a db       	rcall	.-2380   	; 0x71a4 <Comp_Stop>
    7af0:	ce 01       	movw	r24, r28
    7af2:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <stopTrvTimer>
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
    7af6:	f1 01       	movw	r30, r2
    7af8:	82 8d       	ldd	r24, Z+26	; 0x1a
    7afa:	65 8d       	ldd	r22, Z+29	; 0x1d
    7afc:	70 e0       	ldi	r23, 0x00	; 0
    7afe:	68 0f       	add	r22, r24
    7b00:	71 1d       	adc	r23, r1
    7b02:	07 2e       	mov	r0, r23
    7b04:	00 0c       	add	r0, r0
    7b06:	88 0b       	sbc	r24, r24
    7b08:	99 0b       	sbc	r25, r25
    7b0a:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7b0e:	9b 01       	movw	r18, r22
    7b10:	ac 01       	movw	r20, r24
    7b12:	6e 89       	ldd	r22, Y+22	; 0x16
    7b14:	7f 89       	ldd	r23, Y+23	; 0x17
    7b16:	88 8d       	ldd	r24, Y+24	; 0x18
    7b18:	99 8d       	ldd	r25, Y+25	; 0x19
    7b1a:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    7b1e:	18 16       	cp	r1, r24
    7b20:	0c f0       	brlt	.+2      	; 0x7b24 <mod_pump+0x76c>
    7b22:	85 c1       	rjmp	.+778    	; 0x7e2e <mod_pump+0xa76>
    7b24:	8b 81       	ldd	r24, Y+3	; 0x03
    7b26:	81 11       	cpse	r24, r1
    7b28:	82 c1       	rjmp	.+772    	; 0x7e2e <mod_pump+0xa76>
    7b2a:	88 81       	ld	r24, Y
    7b2c:	81 11       	cpse	r24, r1
    7b2e:	7f c1       	rjmp	.+766    	; 0x7e2e <mod_pump+0xa76>
    7b30:	ce 01       	movw	r24, r28
    7b32:	0e 94 25 54 	call	0xa84a	; 0xa84a <calibration>
    7b36:	81 e0       	ldi	r24, 0x01	; 1
    7b38:	8b 83       	std	Y+3, r24	; 0x03
    7b3a:	ce 01       	movw	r24, r28
    7b3c:	31 dc       	rcall	.-1950   	; 0x73a0 <goToMode>
    7b3e:	87 ef       	ldi	r24, 0xF7	; 247
    7b40:	95 e0       	ldi	r25, 0x05	; 5
    7b42:	9f 93       	push	r25
    7b44:	8f 93       	push	r24
    7b46:	84 e9       	ldi	r24, 0x94	; 148
    7b48:	97 e0       	ldi	r25, 0x07	; 7
    7b4a:	9f 93       	push	r25
    7b4c:	8f 93       	push	r24
    7b4e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7b52:	0f 90       	pop	r0
    7b54:	0f 90       	pop	r0
    7b56:	0f 90       	pop	r0
    7b58:	0f 90       	pop	r0
			}
		}break;
	}
}
    7b5a:	69 c1       	rjmp	.+722    	; 0x7e2e <mod_pump+0xa76>

	switch(temp){
		case DHW: {
		if(comp->Index==1){
			if ( comp->Dhw_Temp > eeData->Set_DHW && comp->heatingWater && !comp->switchToMode) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp);}
			if ( comp->Dhw_Temp < (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->switchToMode){calibration(comp);Comp_1.error=0; comp->heatingWater=true; goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_Dhw\r\n");}//Start_Dhw();
    7b5c:	f1 01       	movw	r30, r2
    7b5e:	86 8d       	ldd	r24, Z+30	; 0x1e
    7b60:	b7 01       	movw	r22, r14
    7b62:	68 1b       	sub	r22, r24
    7b64:	71 09       	sbc	r23, r1
    7b66:	07 2e       	mov	r0, r23
    7b68:	00 0c       	add	r0, r0
    7b6a:	88 0b       	sbc	r24, r24
    7b6c:	99 0b       	sbc	r25, r25
    7b6e:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7b72:	9b 01       	movw	r18, r22
    7b74:	ac 01       	movw	r20, r24
    7b76:	c5 01       	movw	r24, r10
    7b78:	b4 01       	movw	r22, r8
    7b7a:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    7b7e:	88 23       	and	r24, r24
    7b80:	0c f4       	brge	.+2      	; 0x7b84 <mod_pump+0x7cc>
    7b82:	8d cc       	rjmp	.-1766   	; 0x749e <mod_pump+0xe6>
    7b84:	54 c1       	rjmp	.+680    	; 0x7e2e <mod_pump+0xa76>
		case HEAT:{
			//xSerialxPrintf(&xSerial3Port,"Set_Heating =%d\r\n,diffHEAT =%d\r\n,Bac_Temp =%f\r\n",eeData->Set_Heating,eeData->diffHEAT,data->Bac_Temp);
			//xSerialxPrintf(&xSerial3Port,"diffHEAT =%d\r\n",eeData->diffHEAT);
			//xSerialxPrintf(&xSerial3Port,"heat mode\r\n");
			if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {comp->Heating=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat\r\n");}
			if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    7b86:	b7 01       	movw	r22, r14
    7b88:	ff 0c       	add	r15, r15
    7b8a:	88 0b       	sbc	r24, r24
    7b8c:	99 0b       	sbc	r25, r25
    7b8e:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7b92:	9b 01       	movw	r18, r22
    7b94:	ac 01       	movw	r20, r24
    7b96:	c5 01       	movw	r24, r10
    7b98:	b4 01       	movw	r22, r8
    7b9a:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    7b9e:	18 16       	cp	r1, r24
    7ba0:	0c f4       	brge	.+2      	; 0x7ba4 <mod_pump+0x7ec>
    7ba2:	e8 cc       	rjmp	.-1584   	; 0x7574 <mod_pump+0x1bc>
    7ba4:	44 c1       	rjmp	.+648    	; 0x7e2e <mod_pump+0xa76>
		} break;
		
		case COOL:{
			//xSerialxPrintf(&xSerial3Port,"COOL mode\r\n");
			if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
			if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {comp->Cooling=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool\r\n");}//
    7ba6:	f1 01       	movw	r30, r2
    7ba8:	85 8d       	ldd	r24, Z+29	; 0x1d
    7baa:	b7 01       	movw	r22, r14
    7bac:	68 0f       	add	r22, r24
    7bae:	71 1d       	adc	r23, r1
    7bb0:	07 2e       	mov	r0, r23
    7bb2:	00 0c       	add	r0, r0
    7bb4:	88 0b       	sbc	r24, r24
    7bb6:	99 0b       	sbc	r25, r25
    7bb8:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7bbc:	9b 01       	movw	r18, r22
    7bbe:	ac 01       	movw	r20, r24
    7bc0:	c5 01       	movw	r24, r10
    7bc2:	b4 01       	movw	r22, r8
    7bc4:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    7bc8:	18 16       	cp	r1, r24
    7bca:	0c f4       	brge	.+2      	; 0x7bce <mod_pump+0x816>
    7bcc:	1a cd       	rjmp	.-1484   	; 0x7602 <mod_pump+0x24a>
    7bce:	2f c1       	rjmp	.+606    	; 0x7e2e <mod_pump+0xa76>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    7bd0:	4e 88       	ldd	r4, Y+22	; 0x16
    7bd2:	5f 88       	ldd	r5, Y+23	; 0x17
    7bd4:	68 8c       	ldd	r6, Y+24	; 0x18
    7bd6:	79 8c       	ldd	r7, Y+25	; 0x19
    7bd8:	f1 01       	movw	r30, r2
    7bda:	c1 8c       	ldd	r12, Z+25	; 0x19
    7bdc:	d1 2c       	mov	r13, r1
    7bde:	84 8d       	ldd	r24, Z+28	; 0x1c
    7be0:	b6 01       	movw	r22, r12
    7be2:	68 1b       	sub	r22, r24
    7be4:	71 09       	sbc	r23, r1
    7be6:	07 2e       	mov	r0, r23
    7be8:	00 0c       	add	r0, r0
    7bea:	88 0b       	sbc	r24, r24
    7bec:	99 0b       	sbc	r25, r25
    7bee:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7bf2:	9b 01       	movw	r18, r22
    7bf4:	ac 01       	movw	r20, r24
    7bf6:	c3 01       	movw	r24, r6
    7bf8:	b2 01       	movw	r22, r4
    7bfa:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    7bfe:	88 23       	and	r24, r24
    7c00:	0c f4       	brge	.+2      	; 0x7c04 <mod_pump+0x84c>
    7c02:	7d cd       	rjmp	.-1286   	; 0x76fe <mod_pump+0x346>
    7c04:	97 c0       	rjmp	.+302    	; 0x7d34 <mod_pump+0x97c>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7c06:	b7 01       	movw	r22, r14
    7c08:	ff 0c       	add	r15, r15
    7c0a:	88 0b       	sbc	r24, r24
    7c0c:	99 0b       	sbc	r25, r25
    7c0e:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7c12:	9b 01       	movw	r18, r22
    7c14:	ac 01       	movw	r20, r24
    7c16:	c5 01       	movw	r24, r10
    7c18:	b4 01       	movw	r22, r8
    7c1a:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    7c1e:	18 16       	cp	r1, r24
    7c20:	0c f4       	brge	.+2      	; 0x7c24 <mod_pump+0x86c>
    7c22:	9f cd       	rjmp	.-1218   	; 0x7762 <mod_pump+0x3aa>
    7c24:	97 c0       	rjmp	.+302    	; 0x7d54 <mod_pump+0x99c>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7c26:	b6 01       	movw	r22, r12
    7c28:	dd 0c       	add	r13, r13
    7c2a:	88 0b       	sbc	r24, r24
    7c2c:	99 0b       	sbc	r25, r25
    7c2e:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7c32:	a3 01       	movw	r20, r6
    7c34:	92 01       	movw	r18, r4
    7c36:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    7c3a:	88 23       	and	r24, r24
    7c3c:	0c f4       	brge	.+2      	; 0x7c40 <mod_pump+0x888>
    7c3e:	ad cd       	rjmp	.-1190   	; 0x779a <mod_pump+0x3e2>
    7c40:	b8 cd       	rjmp	.-1168   	; 0x77b2 <mod_pump+0x3fa>
				if(EEpromData.NombComp==2) if(comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW)&& !comp->heatingWater && comp->Heating && !comp->switchToMode){comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_again\r\n");}	
			}
			else if(comp->Index==2)
			{
				if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {calibration(comp);comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_2\r\n");}
				if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    7c42:	b7 01       	movw	r22, r14
    7c44:	ff 0c       	add	r15, r15
    7c46:	88 0b       	sbc	r24, r24
    7c48:	99 0b       	sbc	r25, r25
    7c4a:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7c4e:	9b 01       	movw	r18, r22
    7c50:	ac 01       	movw	r20, r24
    7c52:	c5 01       	movw	r24, r10
    7c54:	b4 01       	movw	r22, r8
    7c56:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    7c5a:	18 16       	cp	r1, r24
    7c5c:	0c f4       	brge	.+2      	; 0x7c60 <mod_pump+0x8a8>
    7c5e:	31 ce       	rjmp	.-926    	; 0x78c2 <mod_pump+0x50a>
    7c60:	e6 c0       	rjmp	.+460    	; 0x7e2e <mod_pump+0xa76>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7c62:	4e 88       	ldd	r4, Y+22	; 0x16
    7c64:	5f 88       	ldd	r5, Y+23	; 0x17
    7c66:	68 8c       	ldd	r6, Y+24	; 0x18
    7c68:	79 8c       	ldd	r7, Y+25	; 0x19
    7c6a:	f1 01       	movw	r30, r2
    7c6c:	c1 8c       	ldd	r12, Z+25	; 0x19
    7c6e:	d1 2c       	mov	r13, r1
    7c70:	84 8d       	ldd	r24, Z+28	; 0x1c
    7c72:	b6 01       	movw	r22, r12
    7c74:	68 1b       	sub	r22, r24
    7c76:	71 09       	sbc	r23, r1
    7c78:	07 2e       	mov	r0, r23
    7c7a:	00 0c       	add	r0, r0
    7c7c:	88 0b       	sbc	r24, r24
    7c7e:	99 0b       	sbc	r25, r25
    7c80:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7c84:	9b 01       	movw	r18, r22
    7c86:	ac 01       	movw	r20, r24
    7c88:	c3 01       	movw	r24, r6
    7c8a:	b2 01       	movw	r22, r4
    7c8c:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    7c90:	88 23       	and	r24, r24
    7c92:	0c f4       	brge	.+2      	; 0x7c96 <mod_pump+0x8de>
    7c94:	83 ce       	rjmp	.-762    	; 0x799c <mod_pump+0x5e4>
    7c96:	7e c0       	rjmp	.+252    	; 0x7d94 <mod_pump+0x9dc>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7c98:	b7 01       	movw	r22, r14
    7c9a:	ff 0c       	add	r15, r15
    7c9c:	88 0b       	sbc	r24, r24
    7c9e:	99 0b       	sbc	r25, r25
    7ca0:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7ca4:	9b 01       	movw	r18, r22
    7ca6:	ac 01       	movw	r20, r24
    7ca8:	c5 01       	movw	r24, r10
    7caa:	b4 01       	movw	r22, r8
    7cac:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    7cb0:	18 16       	cp	r1, r24
    7cb2:	0c f4       	brge	.+2      	; 0x7cb6 <mod_pump+0x8fe>
    7cb4:	a5 ce       	rjmp	.-694    	; 0x7a00 <mod_pump+0x648>
    7cb6:	7e c0       	rjmp	.+252    	; 0x7db4 <mod_pump+0x9fc>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7cb8:	b6 01       	movw	r22, r12
    7cba:	dd 0c       	add	r13, r13
    7cbc:	88 0b       	sbc	r24, r24
    7cbe:	99 0b       	sbc	r25, r25
    7cc0:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7cc4:	a3 01       	movw	r20, r6
    7cc6:	92 01       	movw	r18, r4
    7cc8:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    7ccc:	88 23       	and	r24, r24
    7cce:	0c f4       	brge	.+2      	; 0x7cd2 <mod_pump+0x91a>
    7cd0:	b3 ce       	rjmp	.-666    	; 0x7a38 <mod_pump+0x680>
    7cd2:	be ce       	rjmp	.-644    	; 0x7a50 <mod_pump+0x698>
				if(EEpromData.NombComp==2) if (comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && comp->Cooling && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}	
			}
			else if(comp->Index==2)
			{
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
    7cd4:	f1 01       	movw	r30, r2
    7cd6:	85 8d       	ldd	r24, Z+29	; 0x1d
    7cd8:	b7 01       	movw	r22, r14
    7cda:	68 0f       	add	r22, r24
    7cdc:	71 1d       	adc	r23, r1
    7cde:	07 2e       	mov	r0, r23
    7ce0:	00 0c       	add	r0, r0
    7ce2:	88 0b       	sbc	r24, r24
    7ce4:	99 0b       	sbc	r25, r25
    7ce6:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7cea:	9b 01       	movw	r18, r22
    7cec:	ac 01       	movw	r20, r24
    7cee:	c5 01       	movw	r24, r10
    7cf0:	b4 01       	movw	r22, r8
    7cf2:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    7cf6:	18 16       	cp	r1, r24
    7cf8:	0c f4       	brge	.+2      	; 0x7cfc <mod_pump+0x944>
    7cfa:	17 cf       	rjmp	.-466    	; 0x7b2a <mod_pump+0x772>
    7cfc:	98 c0       	rjmp	.+304    	; 0x7e2e <mod_pump+0xa76>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    7cfe:	4e 88       	ldd	r4, Y+22	; 0x16
    7d00:	5f 88       	ldd	r5, Y+23	; 0x17
    7d02:	68 8c       	ldd	r6, Y+24	; 0x18
    7d04:	79 8c       	ldd	r7, Y+25	; 0x19
    7d06:	f1 01       	movw	r30, r2
    7d08:	c1 8c       	ldd	r12, Z+25	; 0x19
    7d0a:	d1 2c       	mov	r13, r1
    7d0c:	84 8d       	ldd	r24, Z+28	; 0x1c
    7d0e:	b6 01       	movw	r22, r12
    7d10:	68 1b       	sub	r22, r24
    7d12:	71 09       	sbc	r23, r1
    7d14:	07 2e       	mov	r0, r23
    7d16:	00 0c       	add	r0, r0
    7d18:	88 0b       	sbc	r24, r24
    7d1a:	99 0b       	sbc	r25, r25
    7d1c:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7d20:	9b 01       	movw	r18, r22
    7d22:	ac 01       	movw	r20, r24
    7d24:	c3 01       	movw	r24, r6
    7d26:	b2 01       	movw	r22, r4
    7d28:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    7d2c:	88 23       	and	r24, r24
    7d2e:	0c f4       	brge	.+2      	; 0x7d32 <mod_pump+0x97a>
    7d30:	6a cf       	rjmp	.-300    	; 0x7c06 <mod_pump+0x84e>
    7d32:	05 cd       	rjmp	.-1526   	; 0x773e <mod_pump+0x386>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7d34:	b7 01       	movw	r22, r14
    7d36:	ff 0c       	add	r15, r15
    7d38:	88 0b       	sbc	r24, r24
    7d3a:	99 0b       	sbc	r25, r25
    7d3c:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7d40:	9b 01       	movw	r18, r22
    7d42:	ac 01       	movw	r20, r24
    7d44:	c5 01       	movw	r24, r10
    7d46:	b4 01       	movw	r22, r8
    7d48:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    7d4c:	18 16       	cp	r1, r24
    7d4e:	0c f4       	brge	.+2      	; 0x7d52 <mod_pump+0x99a>
    7d50:	6a cf       	rjmp	.-300    	; 0x7c26 <mod_pump+0x86e>
    7d52:	14 cd       	rjmp	.-1496   	; 0x777c <mod_pump+0x3c4>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7d54:	b6 01       	movw	r22, r12
    7d56:	dd 0c       	add	r13, r13
    7d58:	88 0b       	sbc	r24, r24
    7d5a:	99 0b       	sbc	r25, r25
    7d5c:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7d60:	28 cd       	rjmp	.-1456   	; 0x77b2 <mod_pump+0x3fa>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7d62:	4e 88       	ldd	r4, Y+22	; 0x16
    7d64:	5f 88       	ldd	r5, Y+23	; 0x17
    7d66:	68 8c       	ldd	r6, Y+24	; 0x18
    7d68:	79 8c       	ldd	r7, Y+25	; 0x19
    7d6a:	f1 01       	movw	r30, r2
    7d6c:	c1 8c       	ldd	r12, Z+25	; 0x19
    7d6e:	d1 2c       	mov	r13, r1
    7d70:	84 8d       	ldd	r24, Z+28	; 0x1c
    7d72:	b6 01       	movw	r22, r12
    7d74:	68 1b       	sub	r22, r24
    7d76:	71 09       	sbc	r23, r1
    7d78:	07 2e       	mov	r0, r23
    7d7a:	00 0c       	add	r0, r0
    7d7c:	88 0b       	sbc	r24, r24
    7d7e:	99 0b       	sbc	r25, r25
    7d80:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7d84:	a3 01       	movw	r20, r6
    7d86:	92 01       	movw	r18, r4
    7d88:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    7d8c:	18 16       	cp	r1, r24
    7d8e:	0c f4       	brge	.+2      	; 0x7d92 <mod_pump+0x9da>
    7d90:	83 cf       	rjmp	.-250    	; 0x7c98 <mod_pump+0x8e0>
    7d92:	24 ce       	rjmp	.-952    	; 0x79dc <mod_pump+0x624>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7d94:	b7 01       	movw	r22, r14
    7d96:	ff 0c       	add	r15, r15
    7d98:	88 0b       	sbc	r24, r24
    7d9a:	99 0b       	sbc	r25, r25
    7d9c:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7da0:	9b 01       	movw	r18, r22
    7da2:	ac 01       	movw	r20, r24
    7da4:	c5 01       	movw	r24, r10
    7da6:	b4 01       	movw	r22, r8
    7da8:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    7dac:	18 16       	cp	r1, r24
    7dae:	0c f4       	brge	.+2      	; 0x7db2 <mod_pump+0x9fa>
    7db0:	83 cf       	rjmp	.-250    	; 0x7cb8 <mod_pump+0x900>
    7db2:	33 ce       	rjmp	.-922    	; 0x7a1a <mod_pump+0x662>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7db4:	b6 01       	movw	r22, r12
    7db6:	dd 0c       	add	r13, r13
    7db8:	88 0b       	sbc	r24, r24
    7dba:	99 0b       	sbc	r25, r25
    7dbc:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7dc0:	47 ce       	rjmp	.-882    	; 0x7a50 <mod_pump+0x698>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    7dc2:	4e 88       	ldd	r4, Y+22	; 0x16
    7dc4:	5f 88       	ldd	r5, Y+23	; 0x17
    7dc6:	68 8c       	ldd	r6, Y+24	; 0x18
    7dc8:	79 8c       	ldd	r7, Y+25	; 0x19
    7dca:	f1 01       	movw	r30, r2
    7dcc:	c1 8c       	ldd	r12, Z+25	; 0x19
    7dce:	d1 2c       	mov	r13, r1
    7dd0:	84 8d       	ldd	r24, Z+28	; 0x1c
    7dd2:	b6 01       	movw	r22, r12
    7dd4:	68 1b       	sub	r22, r24
    7dd6:	71 09       	sbc	r23, r1
    7dd8:	07 2e       	mov	r0, r23
    7dda:	00 0c       	add	r0, r0
    7ddc:	88 0b       	sbc	r24, r24
    7dde:	99 0b       	sbc	r25, r25
    7de0:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7de4:	9b 01       	movw	r18, r22
    7de6:	ac 01       	movw	r20, r24
    7de8:	c3 01       	movw	r24, r6
    7dea:	b2 01       	movw	r22, r4
    7dec:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    7df0:	88 23       	and	r24, r24
    7df2:	0c f4       	brge	.+2      	; 0x7df6 <mod_pump+0xa3e>
    7df4:	87 cc       	rjmp	.-1778   	; 0x7704 <mod_pump+0x34c>
    7df6:	9e cf       	rjmp	.-196    	; 0x7d34 <mod_pump+0x97c>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7df8:	4e 88       	ldd	r4, Y+22	; 0x16
    7dfa:	5f 88       	ldd	r5, Y+23	; 0x17
    7dfc:	68 8c       	ldd	r6, Y+24	; 0x18
    7dfe:	79 8c       	ldd	r7, Y+25	; 0x19
    7e00:	f1 01       	movw	r30, r2
    7e02:	c1 8c       	ldd	r12, Z+25	; 0x19
    7e04:	d1 2c       	mov	r13, r1
    7e06:	84 8d       	ldd	r24, Z+28	; 0x1c
    7e08:	b6 01       	movw	r22, r12
    7e0a:	68 1b       	sub	r22, r24
    7e0c:	71 09       	sbc	r23, r1
    7e0e:	07 2e       	mov	r0, r23
    7e10:	00 0c       	add	r0, r0
    7e12:	88 0b       	sbc	r24, r24
    7e14:	99 0b       	sbc	r25, r25
    7e16:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7e1a:	9b 01       	movw	r18, r22
    7e1c:	ac 01       	movw	r20, r24
    7e1e:	c3 01       	movw	r24, r6
    7e20:	b2 01       	movw	r22, r4
    7e22:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    7e26:	88 23       	and	r24, r24
    7e28:	0c f4       	brge	.+2      	; 0x7e2c <mod_pump+0xa74>
    7e2a:	bb cd       	rjmp	.-1162   	; 0x79a2 <mod_pump+0x5ea>
    7e2c:	b3 cf       	rjmp	.-154    	; 0x7d94 <mod_pump+0x9dc>
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
			}
		}break;
	}
}
    7e2e:	df 91       	pop	r29
    7e30:	cf 91       	pop	r28
    7e32:	1f 91       	pop	r17
    7e34:	ff 90       	pop	r15
    7e36:	ef 90       	pop	r14
    7e38:	df 90       	pop	r13
    7e3a:	cf 90       	pop	r12
    7e3c:	bf 90       	pop	r11
    7e3e:	af 90       	pop	r10
    7e40:	9f 90       	pop	r9
    7e42:	8f 90       	pop	r8
    7e44:	7f 90       	pop	r7
    7e46:	6f 90       	pop	r6
    7e48:	5f 90       	pop	r5
    7e4a:	4f 90       	pop	r4
    7e4c:	3f 90       	pop	r3
    7e4e:	2f 90       	pop	r2
    7e50:	08 95       	ret

00007e52 <initPins>:
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void initPins()
{

	DDRG |= (_BV(PG4) | _BV(PG3));
    7e52:	83 b3       	in	r24, 0x13	; 19
    7e54:	88 61       	ori	r24, 0x18	; 24
    7e56:	83 bb       	out	0x13, r24	; 19
	DDRH |= (_BV(PH7) | _BV(PH6) | _BV(PH5) | _BV(PH4) | _BV(PH3) | _BV(PH1) | _BV(PH2));
    7e58:	e1 e0       	ldi	r30, 0x01	; 1
    7e5a:	f1 e0       	ldi	r31, 0x01	; 1
    7e5c:	80 81       	ld	r24, Z
    7e5e:	8e 6f       	ori	r24, 0xFE	; 254
    7e60:	80 83       	st	Z, r24
	DDRL |= (_BV(PL2) | _BV(PL1) | _BV(PL0));
    7e62:	ea e0       	ldi	r30, 0x0A	; 10
    7e64:	f1 e0       	ldi	r31, 0x01	; 1
    7e66:	80 81       	ld	r24, Z
    7e68:	87 60       	ori	r24, 0x07	; 7
    7e6a:	80 83       	st	Z, r24
	DDRD &= (_BV(PD2) | _BV(PD3));
    7e6c:	8a b1       	in	r24, 0x0a	; 10
    7e6e:	8c 70       	andi	r24, 0x0C	; 12
    7e70:	8a b9       	out	0x0a, r24	; 10
	DDRE &= (_BV(PE5));
    7e72:	8d b1       	in	r24, 0x0d	; 13
    7e74:	80 72       	andi	r24, 0x20	; 32
    7e76:	8d b9       	out	0x0d, r24	; 13
	DDRA = 0xFF;
    7e78:	8f ef       	ldi	r24, 0xFF	; 255
    7e7a:	81 b9       	out	0x01, r24	; 1
	PORTD|= (_BV(PD2) | _BV(PD3));
    7e7c:	8b b1       	in	r24, 0x0b	; 11
    7e7e:	8c 60       	ori	r24, 0x0C	; 12
    7e80:	8b b9       	out	0x0b, r24	; 11
	PORTE|= (_BV(PE5));
    7e82:	75 9a       	sbi	0x0e, 5	; 14
	
    DDRJ|= (_BV(PIN_rs485));
    7e84:	e4 e0       	ldi	r30, 0x04	; 4
    7e86:	f1 e0       	ldi	r31, 0x01	; 1
    7e88:	80 81       	ld	r24, Z
    7e8a:	84 60       	ori	r24, 0x04	; 4
    7e8c:	80 83       	st	Z, r24
    7e8e:	08 95       	ret

00007e90 <ConvertToTemp>:
	return (ADC_value - Low_Limit_HP) * HP_max/ (Hi_Limit_HP - Low_Limit_HP);
}

float ConvertToLowPress(uint16_t ADC_value){
	return (ADC_value - Low_Limit_LP) * LP_max/ (Hi_Limit_LP - Low_Limit_LP) ;
}
    7e90:	8f 92       	push	r8
    7e92:	9f 92       	push	r9
    7e94:	af 92       	push	r10
    7e96:	bf 92       	push	r11
    7e98:	cf 92       	push	r12
    7e9a:	df 92       	push	r13
    7e9c:	ef 92       	push	r14
    7e9e:	ff 92       	push	r15
    7ea0:	bc 01       	movw	r22, r24
    7ea2:	80 e0       	ldi	r24, 0x00	; 0
    7ea4:	90 e0       	ldi	r25, 0x00	; 0
    7ea6:	0e 94 36 55 	call	0xaa6c	; 0xaa6c <__floatunsisf>
    7eaa:	9b 01       	movw	r18, r22
    7eac:	ac 01       	movw	r20, r24
    7eae:	60 e0       	ldi	r22, 0x00	; 0
    7eb0:	70 ec       	ldi	r23, 0xC0	; 192
    7eb2:	8f e7       	ldi	r24, 0x7F	; 127
    7eb4:	94 e4       	ldi	r25, 0x44	; 68
    7eb6:	0e 94 9d 54 	call	0xa93a	; 0xa93a <__divsf3>
    7eba:	20 e0       	ldi	r18, 0x00	; 0
    7ebc:	30 e0       	ldi	r19, 0x00	; 0
    7ebe:	40 e8       	ldi	r20, 0x80	; 128
    7ec0:	5f e3       	ldi	r21, 0x3F	; 63
    7ec2:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    7ec6:	20 e0       	ldi	r18, 0x00	; 0
    7ec8:	30 e4       	ldi	r19, 0x40	; 64
    7eca:	4c e1       	ldi	r20, 0x1C	; 28
    7ecc:	56 e4       	ldi	r21, 0x46	; 70
    7ece:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    7ed2:	0e 94 f1 55 	call	0xabe2	; 0xabe2 <log>
    7ed6:	6b 01       	movw	r12, r22
    7ed8:	7c 01       	movw	r14, r24
    7eda:	29 e5       	ldi	r18, 0x59	; 89
    7edc:	37 e4       	ldi	r19, 0x47	; 71
    7ede:	4c eb       	ldi	r20, 0xBC	; 188
    7ee0:	53 e3       	ldi	r21, 0x33	; 51
    7ee2:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    7ee6:	a7 01       	movw	r20, r14
    7ee8:	96 01       	movw	r18, r12
    7eea:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    7eee:	a7 01       	movw	r20, r14
    7ef0:	96 01       	movw	r18, r12
    7ef2:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    7ef6:	4b 01       	movw	r8, r22
    7ef8:	5c 01       	movw	r10, r24
    7efa:	2b e0       	ldi	r18, 0x0B	; 11
    7efc:	31 ee       	ldi	r19, 0xE1	; 225
    7efe:	45 e7       	ldi	r20, 0x75	; 117
    7f00:	59 e3       	ldi	r21, 0x39	; 57
    7f02:	c7 01       	movw	r24, r14
    7f04:	b6 01       	movw	r22, r12
    7f06:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    7f0a:	29 ed       	ldi	r18, 0xD9	; 217
    7f0c:	3d ea       	ldi	r19, 0xAD	; 173
    7f0e:	49 ea       	ldi	r20, 0xA9	; 169
    7f10:	5a e3       	ldi	r21, 0x3A	; 58
    7f12:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    7f16:	9b 01       	movw	r18, r22
    7f18:	ac 01       	movw	r20, r24
    7f1a:	c5 01       	movw	r24, r10
    7f1c:	b4 01       	movw	r22, r8
    7f1e:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    7f22:	9b 01       	movw	r18, r22
    7f24:	ac 01       	movw	r20, r24
    7f26:	60 e0       	ldi	r22, 0x00	; 0
    7f28:	70 e0       	ldi	r23, 0x00	; 0
    7f2a:	80 e8       	ldi	r24, 0x80	; 128
    7f2c:	9f e3       	ldi	r25, 0x3F	; 63
    7f2e:	0e 94 9d 54 	call	0xa93a	; 0xa93a <__divsf3>
    7f32:	23 e3       	ldi	r18, 0x33	; 51
    7f34:	33 e9       	ldi	r19, 0x93	; 147
    7f36:	48 e8       	ldi	r20, 0x88	; 136
    7f38:	53 e4       	ldi	r21, 0x43	; 67
    7f3a:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    7f3e:	ff 90       	pop	r15
    7f40:	ef 90       	pop	r14
    7f42:	df 90       	pop	r13
    7f44:	cf 90       	pop	r12
    7f46:	bf 90       	pop	r11
    7f48:	af 90       	pop	r10
    7f4a:	9f 90       	pop	r9
    7f4c:	8f 90       	pop	r8
    7f4e:	08 95       	ret

00007f50 <ReadSuperHeat>:
					}

return;	
}

float  ReadSuperHeat (xCompressor *comp){
    7f50:	4f 92       	push	r4
    7f52:	5f 92       	push	r5
    7f54:	6f 92       	push	r6
    7f56:	7f 92       	push	r7
    7f58:	8f 92       	push	r8
    7f5a:	9f 92       	push	r9
    7f5c:	af 92       	push	r10
    7f5e:	bf 92       	push	r11
    7f60:	cf 92       	push	r12
    7f62:	df 92       	push	r13
    7f64:	ef 92       	push	r14
    7f66:	ff 92       	push	r15
    7f68:	cf 93       	push	r28
    7f6a:	df 93       	push	r29
    7f6c:	ec 01       	movw	r28, r24
	float Val, Next_val, Span, Saturation_Temp, decimals, work;
	int I;
	work = ((comp->Low_Press - 1.0) / 1.0);
    7f6e:	20 e0       	ldi	r18, 0x00	; 0
    7f70:	30 e0       	ldi	r19, 0x00	; 0
    7f72:	40 e8       	ldi	r20, 0x80	; 128
    7f74:	5f e3       	ldi	r21, 0x3F	; 63
    7f76:	6e 8d       	ldd	r22, Y+30	; 0x1e
    7f78:	7f 8d       	ldd	r23, Y+31	; 0x1f
    7f7a:	88 a1       	ldd	r24, Y+32	; 0x20
    7f7c:	99 a1       	ldd	r25, Y+33	; 0x21
    7f7e:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    7f82:	4b 01       	movw	r8, r22
    7f84:	5c 01       	movw	r10, r24
	I = work;                                //drop decimals to get array index
    7f86:	0e 94 05 55 	call	0xaa0a	; 0xaa0a <__fixsfsi>
	decimals = work - I; //restore decimals for interpolation between array points
	Val = pgm_read_float(&R22_Saturation_Temp[I]);           //get array value
    7f8a:	fb 01       	movw	r30, r22
    7f8c:	ee 0f       	add	r30, r30
    7f8e:	ff 1f       	adc	r31, r31
    7f90:	ee 0f       	add	r30, r30
    7f92:	ff 1f       	adc	r31, r31
    7f94:	e0 51       	subi	r30, 0x10	; 16
    7f96:	f6 4f       	sbci	r31, 0xF6	; 246
    7f98:	c5 90       	lpm	r12, Z+
    7f9a:	d5 90       	lpm	r13, Z+
    7f9c:	e5 90       	lpm	r14, Z+
    7f9e:	f4 90       	lpm	r15, Z
	Next_val = pgm_read_float(&R22_Saturation_Temp[I + 1]);  //get Next array value
    7fa0:	fb 01       	movw	r30, r22
    7fa2:	31 96       	adiw	r30, 0x01	; 1
    7fa4:	ee 0f       	add	r30, r30
    7fa6:	ff 1f       	adc	r31, r31
    7fa8:	ee 0f       	add	r30, r30
    7faa:	ff 1f       	adc	r31, r31
    7fac:	e0 51       	subi	r30, 0x10	; 16
    7fae:	f6 4f       	sbci	r31, 0xF6	; 246
    7fb0:	45 90       	lpm	r4, Z+
    7fb2:	55 90       	lpm	r5, Z+
    7fb4:	65 90       	lpm	r6, Z+
    7fb6:	74 90       	lpm	r7, Z
	Span = Next_val - Val;                  //Calc Span
	Saturation_Temp = Val + (Span * decimals);//interpolate between array points
		
	return(comp->Suc_Comp - Saturation_Temp);// Suct_T - Saturation_Temp;
    7fb8:	ee 96       	adiw	r28, 0x3e	; 62
    7fba:	07 2e       	mov	r0, r23
    7fbc:	00 0c       	add	r0, r0
    7fbe:	88 0b       	sbc	r24, r24
    7fc0:	99 0b       	sbc	r25, r25
    7fc2:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    7fc6:	9b 01       	movw	r18, r22
    7fc8:	ac 01       	movw	r20, r24
    7fca:	c5 01       	movw	r24, r10
    7fcc:	b4 01       	movw	r22, r8
    7fce:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    7fd2:	4b 01       	movw	r8, r22
    7fd4:	5c 01       	movw	r10, r24
    7fd6:	a7 01       	movw	r20, r14
    7fd8:	96 01       	movw	r18, r12
    7fda:	c3 01       	movw	r24, r6
    7fdc:	b2 01       	movw	r22, r4
    7fde:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    7fe2:	9b 01       	movw	r18, r22
    7fe4:	ac 01       	movw	r20, r24
    7fe6:	c5 01       	movw	r24, r10
    7fe8:	b4 01       	movw	r22, r8
    7fea:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    7fee:	a7 01       	movw	r20, r14
    7ff0:	96 01       	movw	r18, r12
    7ff2:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    7ff6:	9b 01       	movw	r18, r22
    7ff8:	ac 01       	movw	r20, r24
    7ffa:	68 81       	ld	r22, Y
    7ffc:	79 81       	ldd	r23, Y+1	; 0x01
    7ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    8000:	9b 81       	ldd	r25, Y+3	; 0x03
    8002:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>

}
    8006:	df 91       	pop	r29
    8008:	cf 91       	pop	r28
    800a:	ff 90       	pop	r15
    800c:	ef 90       	pop	r14
    800e:	df 90       	pop	r13
    8010:	cf 90       	pop	r12
    8012:	bf 90       	pop	r11
    8014:	af 90       	pop	r10
    8016:	9f 90       	pop	r9
    8018:	8f 90       	pop	r8
    801a:	7f 90       	pop	r7
    801c:	6f 90       	pop	r6
    801e:	5f 90       	pop	r5
    8020:	4f 90       	pop	r4
    8022:	08 95       	ret

00008024 <ReadSuperCool>:
float ReadSuperCool (xCompressor *comp){
    8024:	4f 92       	push	r4
    8026:	5f 92       	push	r5
    8028:	6f 92       	push	r6
    802a:	7f 92       	push	r7
    802c:	8f 92       	push	r8
    802e:	9f 92       	push	r9
    8030:	af 92       	push	r10
    8032:	bf 92       	push	r11
    8034:	cf 92       	push	r12
    8036:	df 92       	push	r13
    8038:	ef 92       	push	r14
    803a:	ff 92       	push	r15
    803c:	cf 93       	push	r28
    803e:	df 93       	push	r29
    8040:	ec 01       	movw	r28, r24
	float Val, Next_val, Span, Saturation_Temp, decimals, work;
	int I;
	work = ((comp->High_Press - 1.0) / 1.0);
    8042:	20 e0       	ldi	r18, 0x00	; 0
    8044:	30 e0       	ldi	r19, 0x00	; 0
    8046:	40 e8       	ldi	r20, 0x80	; 128
    8048:	5f e3       	ldi	r21, 0x3F	; 63
    804a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    804c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    804e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8050:	9d 8d       	ldd	r25, Y+29	; 0x1d
    8052:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    8056:	4b 01       	movw	r8, r22
    8058:	5c 01       	movw	r10, r24

	I = work;                                //drop decimals to get array index
    805a:	0e 94 05 55 	call	0xaa0a	; 0xaa0a <__fixsfsi>

	decimals = work - I; //restore decimals for interpolation between array points
	Val = pgm_read_float(&R22_Saturation_Temp[I]);           //get array value
    805e:	fb 01       	movw	r30, r22
    8060:	ee 0f       	add	r30, r30
    8062:	ff 1f       	adc	r31, r31
    8064:	ee 0f       	add	r30, r30
    8066:	ff 1f       	adc	r31, r31
    8068:	e0 51       	subi	r30, 0x10	; 16
    806a:	f6 4f       	sbci	r31, 0xF6	; 246
    806c:	c5 90       	lpm	r12, Z+
    806e:	d5 90       	lpm	r13, Z+
    8070:	e5 90       	lpm	r14, Z+
    8072:	f4 90       	lpm	r15, Z
	Next_val = pgm_read_float(&R22_Saturation_Temp[I + 1]);  //get Next array value
    8074:	fb 01       	movw	r30, r22
    8076:	31 96       	adiw	r30, 0x01	; 1
    8078:	ee 0f       	add	r30, r30
    807a:	ff 1f       	adc	r31, r31
    807c:	ee 0f       	add	r30, r30
    807e:	ff 1f       	adc	r31, r31
    8080:	e0 51       	subi	r30, 0x10	; 16
    8082:	f6 4f       	sbci	r31, 0xF6	; 246
    8084:	45 90       	lpm	r4, Z+
    8086:	55 90       	lpm	r5, Z+
    8088:	65 90       	lpm	r6, Z+
    808a:	74 90       	lpm	r7, Z
	Span = Next_val - Val;                   //Calc Span
	Saturation_Temp = Val + (Span * decimals);//interpolate between array points
	
    return(Saturation_Temp - comp->Cond_Temp);// Suct_T - Saturation_Temp;	
    808c:	07 2e       	mov	r0, r23
    808e:	00 0c       	add	r0, r0
    8090:	88 0b       	sbc	r24, r24
    8092:	99 0b       	sbc	r25, r25
    8094:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    8098:	9b 01       	movw	r18, r22
    809a:	ac 01       	movw	r20, r24
    809c:	c5 01       	movw	r24, r10
    809e:	b4 01       	movw	r22, r8
    80a0:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    80a4:	4b 01       	movw	r8, r22
    80a6:	5c 01       	movw	r10, r24
    80a8:	a7 01       	movw	r20, r14
    80aa:	96 01       	movw	r18, r12
    80ac:	c3 01       	movw	r24, r6
    80ae:	b2 01       	movw	r22, r4
    80b0:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    80b4:	9b 01       	movw	r18, r22
    80b6:	ac 01       	movw	r20, r24
    80b8:	c5 01       	movw	r24, r10
    80ba:	b4 01       	movw	r22, r8
    80bc:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    80c0:	a7 01       	movw	r20, r14
    80c2:	96 01       	movw	r18, r12
    80c4:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    80c8:	ce 5b       	subi	r28, 0xBE	; 190
    80ca:	df 4f       	sbci	r29, 0xFF	; 255
    80cc:	28 81       	ld	r18, Y
    80ce:	39 81       	ldd	r19, Y+1	; 0x01
    80d0:	4a 81       	ldd	r20, Y+2	; 0x02
    80d2:	5b 81       	ldd	r21, Y+3	; 0x03
    80d4:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
}
    80d8:	df 91       	pop	r29
    80da:	cf 91       	pop	r28
    80dc:	ff 90       	pop	r15
    80de:	ef 90       	pop	r14
    80e0:	df 90       	pop	r13
    80e2:	cf 90       	pop	r12
    80e4:	bf 90       	pop	r11
    80e6:	af 90       	pop	r10
    80e8:	9f 90       	pop	r9
    80ea:	8f 90       	pop	r8
    80ec:	7f 90       	pop	r7
    80ee:	6f 90       	pop	r6
    80f0:	5f 90       	pop	r5
    80f2:	4f 90       	pop	r4
    80f4:	08 95       	ret

000080f6 <corectTrv>:
//-------------------------------------------------------------
float  corectTrv(xCompressor *comp){
    80f6:	4f 92       	push	r4
    80f8:	5f 92       	push	r5
    80fa:	6f 92       	push	r6
    80fc:	7f 92       	push	r7
    80fe:	8f 92       	push	r8
    8100:	9f 92       	push	r9
    8102:	af 92       	push	r10
    8104:	bf 92       	push	r11
    8106:	cf 92       	push	r12
    8108:	df 92       	push	r13
    810a:	ef 92       	push	r14
    810c:	ff 92       	push	r15
    810e:	cf 93       	push	r28
    8110:	df 93       	push	r29
	static float Superheat_old=0;
	int SSet;
	float ds;
	float Superheat;
	Superheat=comp->SuperHeat;
    8112:	8a 5b       	subi	r24, 0xBA	; 186
    8114:	9f 4f       	sbci	r25, 0xFF	; 255
    8116:	fc 01       	movw	r30, r24
    8118:	c0 80       	ld	r12, Z
    811a:	d1 80       	ldd	r13, Z+1	; 0x01
    811c:	e2 80       	ldd	r14, Z+2	; 0x02
    811e:	f3 80       	ldd	r15, Z+3	; 0x03
	ds = Superheat - Superheat_old; // calculate the change in Superheat
    8120:	20 91 3f 07 	lds	r18, 0x073F	; 0x80073f <Superheat_old.3257>
    8124:	30 91 40 07 	lds	r19, 0x0740	; 0x800740 <Superheat_old.3257+0x1>
    8128:	40 91 41 07 	lds	r20, 0x0741	; 0x800741 <Superheat_old.3257+0x2>
    812c:	50 91 42 07 	lds	r21, 0x0742	; 0x800742 <Superheat_old.3257+0x3>
    8130:	c7 01       	movw	r24, r14
    8132:	b6 01       	movw	r22, r12
    8134:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
	ds = ds * 2; // scaling factor for DS
    8138:	9b 01       	movw	r18, r22
    813a:	ac 01       	movw	r20, r24
    813c:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8140:	4b 01       	movw	r8, r22
    8142:	5c 01       	movw	r10, r24
	SSet=7;

	// Variable sampling rate --------------------------------------------
	int  k = 1; // Gain for the steps

	if ( Superheat - SSet > 3)
    8144:	20 e0       	ldi	r18, 0x00	; 0
    8146:	30 e0       	ldi	r19, 0x00	; 0
    8148:	40 ee       	ldi	r20, 0xE0	; 224
    814a:	50 e4       	ldi	r21, 0x40	; 64
    814c:	c7 01       	movw	r24, r14
    814e:	b6 01       	movw	r22, r12
    8150:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    8154:	2b 01       	movw	r4, r22
    8156:	3c 01       	movw	r6, r24
    8158:	20 e0       	ldi	r18, 0x00	; 0
    815a:	30 e0       	ldi	r19, 0x00	; 0
    815c:	40 e4       	ldi	r20, 0x40	; 64
    815e:	50 e4       	ldi	r21, 0x40	; 64
    8160:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    8164:	18 16       	cp	r1, r24
    8166:	e4 f4       	brge	.+56     	; 0x81a0 <corectTrv+0xaa>
	{
		if (ds > 2 || ds < -2)
    8168:	20 e0       	ldi	r18, 0x00	; 0
    816a:	30 e0       	ldi	r19, 0x00	; 0
    816c:	40 e0       	ldi	r20, 0x00	; 0
    816e:	50 e4       	ldi	r21, 0x40	; 64
    8170:	c5 01       	movw	r24, r10
    8172:	b4 01       	movw	r22, r8
    8174:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    8178:	18 16       	cp	r1, r24
    817a:	ac f0       	brlt	.+42     	; 0x81a6 <corectTrv+0xb0>
    817c:	20 e0       	ldi	r18, 0x00	; 0
    817e:	30 e0       	ldi	r19, 0x00	; 0
    8180:	40 e0       	ldi	r20, 0x00	; 0
    8182:	50 ec       	ldi	r21, 0xC0	; 192
    8184:	c5 01       	movw	r24, r10
    8186:	b4 01       	movw	r22, r8
    8188:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
	ds = Superheat - Superheat_old; // calculate the change in Superheat
	ds = ds * 2; // scaling factor for DS
	SSet=7;

	// Variable sampling rate --------------------------------------------
	int  k = 1; // Gain for the steps
    818c:	68 2f       	mov	r22, r24
    818e:	88 0f       	add	r24, r24
    8190:	77 0b       	sbc	r23, r23
    8192:	eb 01       	movw	r28, r22
    8194:	cc 27       	eor	r28, r28
    8196:	dd 0f       	add	r29, r29
    8198:	cc 1f       	adc	r28, r28
    819a:	dd 27       	eor	r29, r29
    819c:	21 96       	adiw	r28, 0x01	; 1
    819e:	05 c0       	rjmp	.+10     	; 0x81aa <corectTrv+0xb4>
    81a0:	c1 e0       	ldi	r28, 0x01	; 1
    81a2:	d0 e0       	ldi	r29, 0x00	; 0
    81a4:	02 c0       	rjmp	.+4      	; 0x81aa <corectTrv+0xb4>
	if ( Superheat - SSet > 3)
	{
		if (ds > 2 || ds < -2)

		{
			k = 2; // Gain for the steps
    81a6:	c2 e0       	ldi	r28, 0x02	; 2
    81a8:	d0 e0       	ldi	r29, 0x00	; 0
			
		}
	}

	if ( Superheat - SSet >= 5)
    81aa:	20 e0       	ldi	r18, 0x00	; 0
    81ac:	30 e0       	ldi	r19, 0x00	; 0
    81ae:	40 ea       	ldi	r20, 0xA0	; 160
    81b0:	50 e4       	ldi	r21, 0x40	; 64
    81b2:	c3 01       	movw	r24, r6
    81b4:	b2 01       	movw	r22, r4
    81b6:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    81ba:	88 23       	and	r24, r24
    81bc:	cc f0       	brlt	.+50     	; 0x81f0 <corectTrv+0xfa>
	{
		if (ds > 2 || ds < -2)
    81be:	20 e0       	ldi	r18, 0x00	; 0
    81c0:	30 e0       	ldi	r19, 0x00	; 0
    81c2:	40 e0       	ldi	r20, 0x00	; 0
    81c4:	50 e4       	ldi	r21, 0x40	; 64
    81c6:	c5 01       	movw	r24, r10
    81c8:	b4 01       	movw	r22, r8
    81ca:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    81ce:	18 16       	cp	r1, r24
    81d0:	6c f0       	brlt	.+26     	; 0x81ec <corectTrv+0xf6>
    81d2:	20 e0       	ldi	r18, 0x00	; 0
    81d4:	30 e0       	ldi	r19, 0x00	; 0
    81d6:	40 e0       	ldi	r20, 0x00	; 0
    81d8:	50 ec       	ldi	r21, 0xC0	; 192
    81da:	c5 01       	movw	r24, r10
    81dc:	b4 01       	movw	r22, r8
    81de:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    81e2:	88 23       	and	r24, r24
    81e4:	2c f4       	brge	.+10     	; 0x81f0 <corectTrv+0xfa>
		{
			k = 3; // Gain for the steps
    81e6:	c3 e0       	ldi	r28, 0x03	; 3
    81e8:	d0 e0       	ldi	r29, 0x00	; 0
    81ea:	02 c0       	rjmp	.+4      	; 0x81f0 <corectTrv+0xfa>
    81ec:	c3 e0       	ldi	r28, 0x03	; 3
    81ee:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}

	//------------------------

	if (Superheat < SSet)
    81f0:	20 e0       	ldi	r18, 0x00	; 0
    81f2:	30 e0       	ldi	r19, 0x00	; 0
    81f4:	40 ee       	ldi	r20, 0xE0	; 224
    81f6:	50 e4       	ldi	r21, 0x40	; 64
    81f8:	c7 01       	movw	r24, r14
    81fa:	b6 01       	movw	r22, r12
    81fc:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    8200:	88 23       	and	r24, r24
    8202:	84 f4       	brge	.+32     	; 0x8224 <corectTrv+0x12e>
	{
		k = -1; // if the Superheat is too low, this gain changes the step direction
		Superheat = SSet + 10 - Superheat;
    8204:	a7 01       	movw	r20, r14
    8206:	96 01       	movw	r18, r12
    8208:	60 e0       	ldi	r22, 0x00	; 0
    820a:	70 e0       	ldi	r23, 0x00	; 0
    820c:	88 e8       	ldi	r24, 0x88	; 136
    820e:	91 e4       	ldi	r25, 0x41	; 65
    8210:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    8214:	6b 01       	movw	r12, r22
    8216:	7c 01       	movw	r14, r24
		ds = -ds;
    8218:	b7 fa       	bst	r11, 7
    821a:	b0 94       	com	r11
    821c:	b7 f8       	bld	r11, 7
    821e:	b0 94       	com	r11

	//------------------------

	if (Superheat < SSet)
	{
		k = -1; // if the Superheat is too low, this gain changes the step direction
    8220:	cf ef       	ldi	r28, 0xFF	; 255
    8222:	df ef       	ldi	r29, 0xFF	; 255
		Superheat = SSet + 10 - Superheat;
		ds = -ds;
	}
	
	Superheat_old = Superheat;
    8224:	c0 92 3f 07 	sts	0x073F, r12	; 0x80073f <Superheat_old.3257>
    8228:	d0 92 40 07 	sts	0x0740, r13	; 0x800740 <Superheat_old.3257+0x1>
    822c:	e0 92 41 07 	sts	0x0741, r14	; 0x800741 <Superheat_old.3257+0x2>
    8230:	f0 92 42 07 	sts	0x0742, r15	; 0x800742 <Superheat_old.3257+0x3>
	
	if (ds > 20)
    8234:	20 e0       	ldi	r18, 0x00	; 0
    8236:	30 e0       	ldi	r19, 0x00	; 0
    8238:	40 ea       	ldi	r20, 0xA0	; 160
    823a:	51 e4       	ldi	r21, 0x41	; 65
    823c:	c5 01       	movw	r24, r10
    823e:	b4 01       	movw	r22, r8
    8240:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    8244:	18 16       	cp	r1, r24
    8246:	14 f4       	brge	.+4      	; 0x824c <corectTrv+0x156>
    8248:	0c 94 c5 4b 	jmp	0x978a	; 0x978a <corectTrv+0x1694>
	{
		ds = 20;
	}

	 else if (ds < -20)
    824c:	20 e0       	ldi	r18, 0x00	; 0
    824e:	30 e0       	ldi	r19, 0x00	; 0
    8250:	40 ea       	ldi	r20, 0xA0	; 160
    8252:	51 ec       	ldi	r21, 0xC1	; 193
    8254:	c5 01       	movw	r24, r10
    8256:	b4 01       	movw	r22, r8
    8258:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    825c:	88 23       	and	r24, r24
    825e:	64 f0       	brlt	.+24     	; 0x8278 <corectTrv+0x182>
	{
		ds = -20;
	}
//--------------------------------------
	if (ds < -10)
    8260:	20 e0       	ldi	r18, 0x00	; 0
    8262:	30 e0       	ldi	r19, 0x00	; 0
    8264:	40 e2       	ldi	r20, 0x20	; 32
    8266:	51 ec       	ldi	r21, 0xC1	; 193
    8268:	c5 01       	movw	r24, r10
    826a:	b4 01       	movw	r22, r8
    826c:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    8270:	88 23       	and	r24, r24
    8272:	0c f0       	brlt	.+2      	; 0x8276 <corectTrv+0x180>
    8274:	ab c3       	rjmp	.+1878   	; 0x89cc <corectTrv+0x8d6>
    8276:	08 c0       	rjmp	.+16     	; 0x8288 <corectTrv+0x192>
		ds = 20;
	}

	 else if (ds < -20)
	{
		ds = -20;
    8278:	0f 2e       	mov	r0, r31
    827a:	81 2c       	mov	r8, r1
    827c:	91 2c       	mov	r9, r1
    827e:	f0 ea       	ldi	r31, 0xA0	; 160
    8280:	af 2e       	mov	r10, r31
    8282:	f1 ec       	ldi	r31, 0xC1	; 193
    8284:	bf 2e       	mov	r11, r31
    8286:	f0 2d       	mov	r31, r0
	}
//--------------------------------------
	if (ds < -10)
	{
		if (Superheat == SSet)
    8288:	20 e0       	ldi	r18, 0x00	; 0
    828a:	30 e0       	ldi	r19, 0x00	; 0
    828c:	40 ee       	ldi	r20, 0xE0	; 224
    828e:	50 e4       	ldi	r21, 0x40	; 64
    8290:	c7 01       	movw	r24, r14
    8292:	b6 01       	movw	r22, r12
    8294:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    8298:	81 11       	cpse	r24, r1
    829a:	32 c0       	rjmp	.+100    	; 0x8300 <corectTrv+0x20a>
		{
			return(-0.123 * ds * ds - 2.768 * ds - 30.62)* k ;
    829c:	2d e6       	ldi	r18, 0x6D	; 109
    829e:	37 ee       	ldi	r19, 0xE7	; 231
    82a0:	4b ef       	ldi	r20, 0xFB	; 251
    82a2:	5d eb       	ldi	r21, 0xBD	; 189
    82a4:	c5 01       	movw	r24, r10
    82a6:	b4 01       	movw	r22, r8
    82a8:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    82ac:	a5 01       	movw	r20, r10
    82ae:	94 01       	movw	r18, r8
    82b0:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    82b4:	6b 01       	movw	r12, r22
    82b6:	7c 01       	movw	r14, r24
    82b8:	29 ee       	ldi	r18, 0xE9	; 233
    82ba:	36 e2       	ldi	r19, 0x26	; 38
    82bc:	41 e3       	ldi	r20, 0x31	; 49
    82be:	50 e4       	ldi	r21, 0x40	; 64
    82c0:	c5 01       	movw	r24, r10
    82c2:	b4 01       	movw	r22, r8
    82c4:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    82c8:	9b 01       	movw	r18, r22
    82ca:	ac 01       	movw	r20, r24
    82cc:	c7 01       	movw	r24, r14
    82ce:	b6 01       	movw	r22, r12
    82d0:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    82d4:	23 ec       	ldi	r18, 0xC3	; 195
    82d6:	35 ef       	ldi	r19, 0xF5	; 245
    82d8:	44 ef       	ldi	r20, 0xF4	; 244
    82da:	51 e4       	ldi	r21, 0x41	; 65
    82dc:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    82e0:	6b 01       	movw	r12, r22
    82e2:	7c 01       	movw	r14, r24
    82e4:	be 01       	movw	r22, r28
    82e6:	dd 0f       	add	r29, r29
    82e8:	88 0b       	sbc	r24, r24
    82ea:	99 0b       	sbc	r25, r25
    82ec:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    82f0:	9b 01       	movw	r18, r22
    82f2:	ac 01       	movw	r20, r24
    82f4:	c7 01       	movw	r24, r14
    82f6:	b6 01       	movw	r22, r12
    82f8:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    82fc:	0c 94 6c 4d 	jmp	0x9ad8	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    8300:	20 e0       	ldi	r18, 0x00	; 0
    8302:	30 e0       	ldi	r19, 0x00	; 0
    8304:	40 ee       	ldi	r20, 0xE0	; 224
    8306:	50 e4       	ldi	r21, 0x40	; 64
    8308:	c7 01       	movw	r24, r14
    830a:	b6 01       	movw	r22, r12
    830c:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    8310:	18 16       	cp	r1, r24
    8312:	0c f0       	brlt	.+2      	; 0x8316 <corectTrv+0x220>
    8314:	55 c0       	rjmp	.+170    	; 0x83c0 <corectTrv+0x2ca>
    8316:	20 e0       	ldi	r18, 0x00	; 0
    8318:	30 e0       	ldi	r19, 0x00	; 0
    831a:	40 e0       	ldi	r20, 0x00	; 0
    831c:	51 e4       	ldi	r21, 0x41	; 65
    831e:	c7 01       	movw	r24, r14
    8320:	b6 01       	movw	r22, r12
    8322:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    8326:	18 16       	cp	r1, r24
    8328:	0c f4       	brge	.+2      	; 0x832c <corectTrv+0x236>
    832a:	4a c0       	rjmp	.+148    	; 0x83c0 <corectTrv+0x2ca>
		{
			return( 0.02416 * ds * ds * ds + 0.95688 * ds * ds + 12.69588 * ds + 44.31142)* k;
    832c:	21 e3       	ldi	r18, 0x31	; 49
    832e:	3b ee       	ldi	r19, 0xEB	; 235
    8330:	45 ec       	ldi	r20, 0xC5	; 197
    8332:	5c e3       	ldi	r21, 0x3C	; 60
    8334:	c5 01       	movw	r24, r10
    8336:	b4 01       	movw	r22, r8
    8338:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    833c:	a5 01       	movw	r20, r10
    833e:	94 01       	movw	r18, r8
    8340:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8344:	a5 01       	movw	r20, r10
    8346:	94 01       	movw	r18, r8
    8348:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    834c:	6b 01       	movw	r12, r22
    834e:	7c 01       	movw	r14, r24
    8350:	26 e1       	ldi	r18, 0x16	; 22
    8352:	36 ef       	ldi	r19, 0xF6	; 246
    8354:	44 e7       	ldi	r20, 0x74	; 116
    8356:	5f e3       	ldi	r21, 0x3F	; 63
    8358:	c5 01       	movw	r24, r10
    835a:	b4 01       	movw	r22, r8
    835c:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8360:	a5 01       	movw	r20, r10
    8362:	94 01       	movw	r18, r8
    8364:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8368:	9b 01       	movw	r18, r22
    836a:	ac 01       	movw	r20, r24
    836c:	c7 01       	movw	r24, r14
    836e:	b6 01       	movw	r22, r12
    8370:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8374:	6b 01       	movw	r12, r22
    8376:	7c 01       	movw	r14, r24
    8378:	23 e5       	ldi	r18, 0x53	; 83
    837a:	32 e2       	ldi	r19, 0x22	; 34
    837c:	4b e4       	ldi	r20, 0x4B	; 75
    837e:	51 e4       	ldi	r21, 0x41	; 65
    8380:	c5 01       	movw	r24, r10
    8382:	b4 01       	movw	r22, r8
    8384:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8388:	9b 01       	movw	r18, r22
    838a:	ac 01       	movw	r20, r24
    838c:	c7 01       	movw	r24, r14
    838e:	b6 01       	movw	r22, r12
    8390:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8394:	25 ee       	ldi	r18, 0xE5	; 229
    8396:	3e e3       	ldi	r19, 0x3E	; 62
    8398:	41 e3       	ldi	r20, 0x31	; 49
    839a:	52 e4       	ldi	r21, 0x42	; 66
    839c:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    83a0:	6b 01       	movw	r12, r22
    83a2:	7c 01       	movw	r14, r24
    83a4:	be 01       	movw	r22, r28
    83a6:	dd 0f       	add	r29, r29
    83a8:	88 0b       	sbc	r24, r24
    83aa:	99 0b       	sbc	r25, r25
    83ac:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    83b0:	9b 01       	movw	r18, r22
    83b2:	ac 01       	movw	r20, r24
    83b4:	c7 01       	movw	r24, r14
    83b6:	b6 01       	movw	r22, r12
    83b8:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    83bc:	0c 94 6c 4d 	jmp	0x9ad8	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    83c0:	20 e0       	ldi	r18, 0x00	; 0
    83c2:	30 e0       	ldi	r19, 0x00	; 0
    83c4:	40 e0       	ldi	r20, 0x00	; 0
    83c6:	51 e4       	ldi	r21, 0x41	; 65
    83c8:	c7 01       	movw	r24, r14
    83ca:	b6 01       	movw	r22, r12
    83cc:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    83d0:	18 16       	cp	r1, r24
    83d2:	0c f0       	brlt	.+2      	; 0x83d6 <corectTrv+0x2e0>
    83d4:	55 c0       	rjmp	.+170    	; 0x8480 <corectTrv+0x38a>
    83d6:	20 e0       	ldi	r18, 0x00	; 0
    83d8:	30 e0       	ldi	r19, 0x00	; 0
    83da:	40 e1       	ldi	r20, 0x10	; 16
    83dc:	51 e4       	ldi	r21, 0x41	; 65
    83de:	c7 01       	movw	r24, r14
    83e0:	b6 01       	movw	r22, r12
    83e2:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    83e6:	18 16       	cp	r1, r24
    83e8:	0c f4       	brge	.+2      	; 0x83ec <corectTrv+0x2f6>
    83ea:	4a c0       	rjmp	.+148    	; 0x8480 <corectTrv+0x38a>
		{
			return( 0.01715 * ds * ds * ds + 0.64880 * ds * ds + 8.39021 * ds + 27.61058)* k;
    83ec:	28 e2       	ldi	r18, 0x28	; 40
    83ee:	3e e7       	ldi	r19, 0x7E	; 126
    83f0:	4c e8       	ldi	r20, 0x8C	; 140
    83f2:	5c e3       	ldi	r21, 0x3C	; 60
    83f4:	c5 01       	movw	r24, r10
    83f6:	b4 01       	movw	r22, r8
    83f8:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    83fc:	a5 01       	movw	r20, r10
    83fe:	94 01       	movw	r18, r8
    8400:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8404:	a5 01       	movw	r20, r10
    8406:	94 01       	movw	r18, r8
    8408:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    840c:	6b 01       	movw	r12, r22
    840e:	7c 01       	movw	r14, r24
    8410:	22 ec       	ldi	r18, 0xC2	; 194
    8412:	37 e1       	ldi	r19, 0x17	; 23
    8414:	46 e2       	ldi	r20, 0x26	; 38
    8416:	5f e3       	ldi	r21, 0x3F	; 63
    8418:	c5 01       	movw	r24, r10
    841a:	b4 01       	movw	r22, r8
    841c:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8420:	a5 01       	movw	r20, r10
    8422:	94 01       	movw	r18, r8
    8424:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8428:	9b 01       	movw	r18, r22
    842a:	ac 01       	movw	r20, r24
    842c:	c7 01       	movw	r24, r14
    842e:	b6 01       	movw	r22, r12
    8430:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8434:	6b 01       	movw	r12, r22
    8436:	7c 01       	movw	r14, r24
    8438:	2d e4       	ldi	r18, 0x4D	; 77
    843a:	3e e3       	ldi	r19, 0x3E	; 62
    843c:	46 e0       	ldi	r20, 0x06	; 6
    843e:	51 e4       	ldi	r21, 0x41	; 65
    8440:	c5 01       	movw	r24, r10
    8442:	b4 01       	movw	r22, r8
    8444:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8448:	9b 01       	movw	r18, r22
    844a:	ac 01       	movw	r20, r24
    844c:	c7 01       	movw	r24, r14
    844e:	b6 01       	movw	r22, r12
    8450:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8454:	28 e7       	ldi	r18, 0x78	; 120
    8456:	32 ee       	ldi	r19, 0xE2	; 226
    8458:	4c ed       	ldi	r20, 0xDC	; 220
    845a:	51 e4       	ldi	r21, 0x41	; 65
    845c:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8460:	6b 01       	movw	r12, r22
    8462:	7c 01       	movw	r14, r24
    8464:	be 01       	movw	r22, r28
    8466:	dd 0f       	add	r29, r29
    8468:	88 0b       	sbc	r24, r24
    846a:	99 0b       	sbc	r25, r25
    846c:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    8470:	9b 01       	movw	r18, r22
    8472:	ac 01       	movw	r20, r24
    8474:	c7 01       	movw	r24, r14
    8476:	b6 01       	movw	r22, r12
    8478:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    847c:	0c 94 6c 4d 	jmp	0x9ad8	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    8480:	20 e0       	ldi	r18, 0x00	; 0
    8482:	30 e0       	ldi	r19, 0x00	; 0
    8484:	40 e1       	ldi	r20, 0x10	; 16
    8486:	51 e4       	ldi	r21, 0x41	; 65
    8488:	c7 01       	movw	r24, r14
    848a:	b6 01       	movw	r22, r12
    848c:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    8490:	18 16       	cp	r1, r24
    8492:	74 f5       	brge	.+92     	; 0x84f0 <corectTrv+0x3fa>
    8494:	20 e0       	ldi	r18, 0x00	; 0
    8496:	30 e0       	ldi	r19, 0x00	; 0
    8498:	40 e2       	ldi	r20, 0x20	; 32
    849a:	51 e4       	ldi	r21, 0x41	; 65
    849c:	c7 01       	movw	r24, r14
    849e:	b6 01       	movw	r22, r12
    84a0:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    84a4:	18 16       	cp	r1, r24
    84a6:	24 f1       	brlt	.+72     	; 0x84f0 <corectTrv+0x3fa>
		{
			return( -0.099 * ds * ds - 2.002 * ds - 16.444);
    84a8:	23 e8       	ldi	r18, 0x83	; 131
    84aa:	30 ec       	ldi	r19, 0xC0	; 192
    84ac:	4a ec       	ldi	r20, 0xCA	; 202
    84ae:	5d eb       	ldi	r21, 0xBD	; 189
    84b0:	c5 01       	movw	r24, r10
    84b2:	b4 01       	movw	r22, r8
    84b4:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    84b8:	a5 01       	movw	r20, r10
    84ba:	94 01       	movw	r18, r8
    84bc:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    84c0:	6b 01       	movw	r12, r22
    84c2:	7c 01       	movw	r14, r24
    84c4:	25 ec       	ldi	r18, 0xC5	; 197
    84c6:	30 e2       	ldi	r19, 0x20	; 32
    84c8:	40 e0       	ldi	r20, 0x00	; 0
    84ca:	50 e4       	ldi	r21, 0x40	; 64
    84cc:	c5 01       	movw	r24, r10
    84ce:	b4 01       	movw	r22, r8
    84d0:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    84d4:	9b 01       	movw	r18, r22
    84d6:	ac 01       	movw	r20, r24
    84d8:	c7 01       	movw	r24, r14
    84da:	b6 01       	movw	r22, r12
    84dc:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    84e0:	20 e5       	ldi	r18, 0x50	; 80
    84e2:	3d e8       	ldi	r19, 0x8D	; 141
    84e4:	43 e8       	ldi	r20, 0x83	; 131
    84e6:	51 e4       	ldi	r21, 0x41	; 65
    84e8:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    84ec:	0c 94 6c 4d 	jmp	0x9ad8	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    84f0:	20 e0       	ldi	r18, 0x00	; 0
    84f2:	30 e0       	ldi	r19, 0x00	; 0
    84f4:	40 e2       	ldi	r20, 0x20	; 32
    84f6:	51 e4       	ldi	r21, 0x41	; 65
    84f8:	c7 01       	movw	r24, r14
    84fa:	b6 01       	movw	r22, r12
    84fc:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    8500:	18 16       	cp	r1, r24
    8502:	74 f5       	brge	.+92     	; 0x8560 <corectTrv+0x46a>
    8504:	20 e0       	ldi	r18, 0x00	; 0
    8506:	30 e0       	ldi	r19, 0x00	; 0
    8508:	40 e3       	ldi	r20, 0x30	; 48
    850a:	51 e4       	ldi	r21, 0x41	; 65
    850c:	c7 01       	movw	r24, r14
    850e:	b6 01       	movw	r22, r12
    8510:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    8514:	18 16       	cp	r1, r24
    8516:	24 f1       	brlt	.+72     	; 0x8560 <corectTrv+0x46a>
		{
			return( -0.065 * ds * ds - 0.773 * ds - 4.451);
    8518:	28 eb       	ldi	r18, 0xB8	; 184
    851a:	3e e1       	ldi	r19, 0x1E	; 30
    851c:	45 e8       	ldi	r20, 0x85	; 133
    851e:	5d eb       	ldi	r21, 0xBD	; 189
    8520:	c5 01       	movw	r24, r10
    8522:	b4 01       	movw	r22, r8
    8524:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8528:	a5 01       	movw	r20, r10
    852a:	94 01       	movw	r18, r8
    852c:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8530:	6b 01       	movw	r12, r22
    8532:	7c 01       	movw	r14, r24
    8534:	24 e5       	ldi	r18, 0x54	; 84
    8536:	33 ee       	ldi	r19, 0xE3	; 227
    8538:	45 e4       	ldi	r20, 0x45	; 69
    853a:	5f e3       	ldi	r21, 0x3F	; 63
    853c:	c5 01       	movw	r24, r10
    853e:	b4 01       	movw	r22, r8
    8540:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8544:	9b 01       	movw	r18, r22
    8546:	ac 01       	movw	r20, r24
    8548:	c7 01       	movw	r24, r14
    854a:	b6 01       	movw	r22, r12
    854c:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    8550:	28 e9       	ldi	r18, 0x98	; 152
    8552:	3e e6       	ldi	r19, 0x6E	; 110
    8554:	4e e8       	ldi	r20, 0x8E	; 142
    8556:	50 e4       	ldi	r21, 0x40	; 64
    8558:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    855c:	0c 94 6c 4d 	jmp	0x9ad8	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    8560:	20 e0       	ldi	r18, 0x00	; 0
    8562:	30 e0       	ldi	r19, 0x00	; 0
    8564:	40 e3       	ldi	r20, 0x30	; 48
    8566:	51 e4       	ldi	r21, 0x41	; 65
    8568:	c7 01       	movw	r24, r14
    856a:	b6 01       	movw	r22, r12
    856c:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    8570:	18 16       	cp	r1, r24
    8572:	0c f0       	brlt	.+2      	; 0x8576 <corectTrv+0x480>
    8574:	55 c0       	rjmp	.+170    	; 0x8620 <corectTrv+0x52a>
    8576:	20 e0       	ldi	r18, 0x00	; 0
    8578:	30 e0       	ldi	r19, 0x00	; 0
    857a:	40 e4       	ldi	r20, 0x40	; 64
    857c:	51 e4       	ldi	r21, 0x41	; 65
    857e:	c7 01       	movw	r24, r14
    8580:	b6 01       	movw	r22, r12
    8582:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    8586:	18 16       	cp	r1, r24
    8588:	0c f4       	brge	.+2      	; 0x858c <corectTrv+0x496>
    858a:	4a c0       	rjmp	.+148    	; 0x8620 <corectTrv+0x52a>
		{
			return( 0.01315 * ds * ds * ds + 0.59145 * ds * ds + 10.05298 * ds + 54.52301)* k;
    858c:	29 e1       	ldi	r18, 0x19	; 25
    858e:	33 e7       	ldi	r19, 0x73	; 115
    8590:	47 e5       	ldi	r20, 0x57	; 87
    8592:	5c e3       	ldi	r21, 0x3C	; 60
    8594:	c5 01       	movw	r24, r10
    8596:	b4 01       	movw	r22, r8
    8598:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    859c:	a5 01       	movw	r20, r10
    859e:	94 01       	movw	r18, r8
    85a0:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    85a4:	a5 01       	movw	r20, r10
    85a6:	94 01       	movw	r18, r8
    85a8:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    85ac:	6b 01       	movw	r12, r22
    85ae:	7c 01       	movw	r14, r24
    85b0:	24 e4       	ldi	r18, 0x44	; 68
    85b2:	39 e6       	ldi	r19, 0x69	; 105
    85b4:	47 e1       	ldi	r20, 0x17	; 23
    85b6:	5f e3       	ldi	r21, 0x3F	; 63
    85b8:	c5 01       	movw	r24, r10
    85ba:	b4 01       	movw	r22, r8
    85bc:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    85c0:	a5 01       	movw	r20, r10
    85c2:	94 01       	movw	r18, r8
    85c4:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    85c8:	9b 01       	movw	r18, r22
    85ca:	ac 01       	movw	r20, r24
    85cc:	c7 01       	movw	r24, r14
    85ce:	b6 01       	movw	r22, r12
    85d0:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    85d4:	6b 01       	movw	r12, r22
    85d6:	7c 01       	movw	r14, r24
    85d8:	22 e0       	ldi	r18, 0x02	; 2
    85da:	39 ed       	ldi	r19, 0xD9	; 217
    85dc:	40 e2       	ldi	r20, 0x20	; 32
    85de:	51 e4       	ldi	r21, 0x41	; 65
    85e0:	c5 01       	movw	r24, r10
    85e2:	b4 01       	movw	r22, r8
    85e4:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    85e8:	9b 01       	movw	r18, r22
    85ea:	ac 01       	movw	r20, r24
    85ec:	c7 01       	movw	r24, r14
    85ee:	b6 01       	movw	r22, r12
    85f0:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    85f4:	20 e9       	ldi	r18, 0x90	; 144
    85f6:	37 e1       	ldi	r19, 0x17	; 23
    85f8:	4a e5       	ldi	r20, 0x5A	; 90
    85fa:	52 e4       	ldi	r21, 0x42	; 66
    85fc:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8600:	6b 01       	movw	r12, r22
    8602:	7c 01       	movw	r14, r24
    8604:	be 01       	movw	r22, r28
    8606:	dd 0f       	add	r29, r29
    8608:	88 0b       	sbc	r24, r24
    860a:	99 0b       	sbc	r25, r25
    860c:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    8610:	9b 01       	movw	r18, r22
    8612:	ac 01       	movw	r20, r24
    8614:	c7 01       	movw	r24, r14
    8616:	b6 01       	movw	r22, r12
    8618:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    861c:	0c 94 6c 4d 	jmp	0x9ad8	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    8620:	20 e0       	ldi	r18, 0x00	; 0
    8622:	30 e0       	ldi	r19, 0x00	; 0
    8624:	40 e4       	ldi	r20, 0x40	; 64
    8626:	51 e4       	ldi	r21, 0x41	; 65
    8628:	c7 01       	movw	r24, r14
    862a:	b6 01       	movw	r22, r12
    862c:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    8630:	18 16       	cp	r1, r24
    8632:	0c f0       	brlt	.+2      	; 0x8636 <corectTrv+0x540>
    8634:	55 c0       	rjmp	.+170    	; 0x86e0 <corectTrv+0x5ea>
    8636:	20 e0       	ldi	r18, 0x00	; 0
    8638:	30 e0       	ldi	r19, 0x00	; 0
    863a:	40 e5       	ldi	r20, 0x50	; 80
    863c:	51 e4       	ldi	r21, 0x41	; 65
    863e:	c7 01       	movw	r24, r14
    8640:	b6 01       	movw	r22, r12
    8642:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    8646:	18 16       	cp	r1, r24
    8648:	0c f4       	brge	.+2      	; 0x864c <corectTrv+0x556>
    864a:	4a c0       	rjmp	.+148    	; 0x86e0 <corectTrv+0x5ea>
		{
			return( 0.02485 * ds * ds * ds + 1.09724 * ds * ds + 17.05530 * ds + 89.43916)* k;
    864c:	2a e3       	ldi	r18, 0x3A	; 58
    864e:	32 e9       	ldi	r19, 0x92	; 146
    8650:	4b ec       	ldi	r20, 0xCB	; 203
    8652:	5c e3       	ldi	r21, 0x3C	; 60
    8654:	c5 01       	movw	r24, r10
    8656:	b4 01       	movw	r22, r8
    8658:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    865c:	a5 01       	movw	r20, r10
    865e:	94 01       	movw	r18, r8
    8660:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8664:	a5 01       	movw	r20, r10
    8666:	94 01       	movw	r18, r8
    8668:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    866c:	6b 01       	movw	r12, r22
    866e:	7c 01       	movw	r14, r24
    8670:	2c e5       	ldi	r18, 0x5C	; 92
    8672:	32 e7       	ldi	r19, 0x72	; 114
    8674:	4c e8       	ldi	r20, 0x8C	; 140
    8676:	5f e3       	ldi	r21, 0x3F	; 63
    8678:	c5 01       	movw	r24, r10
    867a:	b4 01       	movw	r22, r8
    867c:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8680:	a5 01       	movw	r20, r10
    8682:	94 01       	movw	r18, r8
    8684:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8688:	9b 01       	movw	r18, r22
    868a:	ac 01       	movw	r20, r24
    868c:	c7 01       	movw	r24, r14
    868e:	b6 01       	movw	r22, r12
    8690:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8694:	6b 01       	movw	r12, r22
    8696:	7c 01       	movw	r14, r24
    8698:	21 e4       	ldi	r18, 0x41	; 65
    869a:	31 e7       	ldi	r19, 0x71	; 113
    869c:	48 e8       	ldi	r20, 0x88	; 136
    869e:	51 e4       	ldi	r21, 0x41	; 65
    86a0:	c5 01       	movw	r24, r10
    86a2:	b4 01       	movw	r22, r8
    86a4:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    86a8:	9b 01       	movw	r18, r22
    86aa:	ac 01       	movw	r20, r24
    86ac:	c7 01       	movw	r24, r14
    86ae:	b6 01       	movw	r22, r12
    86b0:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    86b4:	2a ed       	ldi	r18, 0xDA	; 218
    86b6:	30 ee       	ldi	r19, 0xE0	; 224
    86b8:	42 eb       	ldi	r20, 0xB2	; 178
    86ba:	52 e4       	ldi	r21, 0x42	; 66
    86bc:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    86c0:	6b 01       	movw	r12, r22
    86c2:	7c 01       	movw	r14, r24
    86c4:	be 01       	movw	r22, r28
    86c6:	dd 0f       	add	r29, r29
    86c8:	88 0b       	sbc	r24, r24
    86ca:	99 0b       	sbc	r25, r25
    86cc:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    86d0:	9b 01       	movw	r18, r22
    86d2:	ac 01       	movw	r20, r24
    86d4:	c7 01       	movw	r24, r14
    86d6:	b6 01       	movw	r22, r12
    86d8:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    86dc:	0c 94 6c 4d 	jmp	0x9ad8	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    86e0:	20 e0       	ldi	r18, 0x00	; 0
    86e2:	30 e0       	ldi	r19, 0x00	; 0
    86e4:	40 e5       	ldi	r20, 0x50	; 80
    86e6:	51 e4       	ldi	r21, 0x41	; 65
    86e8:	c7 01       	movw	r24, r14
    86ea:	b6 01       	movw	r22, r12
    86ec:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    86f0:	18 16       	cp	r1, r24
    86f2:	0c f0       	brlt	.+2      	; 0x86f6 <corectTrv+0x600>
    86f4:	55 c0       	rjmp	.+170    	; 0x87a0 <corectTrv+0x6aa>
    86f6:	20 e0       	ldi	r18, 0x00	; 0
    86f8:	30 e0       	ldi	r19, 0x00	; 0
    86fa:	40 e6       	ldi	r20, 0x60	; 96
    86fc:	51 e4       	ldi	r21, 0x41	; 65
    86fe:	c7 01       	movw	r24, r14
    8700:	b6 01       	movw	r22, r12
    8702:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    8706:	18 16       	cp	r1, r24
    8708:	0c f4       	brge	.+2      	; 0x870c <corectTrv+0x616>
    870a:	4a c0       	rjmp	.+148    	; 0x87a0 <corectTrv+0x6aa>
		{
			return( 0.02257 * ds * ds * ds + 0.99967 * ds * ds + 15.71735 * ds + 86.11652)* k;
    870c:	28 eb       	ldi	r18, 0xB8	; 184
    870e:	34 ee       	ldi	r19, 0xE4	; 228
    8710:	48 eb       	ldi	r20, 0xB8	; 184
    8712:	5c e3       	ldi	r21, 0x3C	; 60
    8714:	c5 01       	movw	r24, r10
    8716:	b4 01       	movw	r22, r8
    8718:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    871c:	a5 01       	movw	r20, r10
    871e:	94 01       	movw	r18, r8
    8720:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8724:	a5 01       	movw	r20, r10
    8726:	94 01       	movw	r18, r8
    8728:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    872c:	6b 01       	movw	r12, r22
    872e:	7c 01       	movw	r14, r24
    8730:	20 e6       	ldi	r18, 0x60	; 96
    8732:	3a ee       	ldi	r19, 0xEA	; 234
    8734:	4f e7       	ldi	r20, 0x7F	; 127
    8736:	5f e3       	ldi	r21, 0x3F	; 63
    8738:	c5 01       	movw	r24, r10
    873a:	b4 01       	movw	r22, r8
    873c:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8740:	a5 01       	movw	r20, r10
    8742:	94 01       	movw	r18, r8
    8744:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8748:	9b 01       	movw	r18, r22
    874a:	ac 01       	movw	r20, r24
    874c:	c7 01       	movw	r24, r14
    874e:	b6 01       	movw	r22, r12
    8750:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8754:	6b 01       	movw	r12, r22
    8756:	7c 01       	movw	r14, r24
    8758:	24 e4       	ldi	r18, 0x44	; 68
    875a:	3a e7       	ldi	r19, 0x7A	; 122
    875c:	4b e7       	ldi	r20, 0x7B	; 123
    875e:	51 e4       	ldi	r21, 0x41	; 65
    8760:	c5 01       	movw	r24, r10
    8762:	b4 01       	movw	r22, r8
    8764:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8768:	9b 01       	movw	r18, r22
    876a:	ac 01       	movw	r20, r24
    876c:	c7 01       	movw	r24, r14
    876e:	b6 01       	movw	r22, r12
    8770:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8774:	29 ea       	ldi	r18, 0xA9	; 169
    8776:	3b e3       	ldi	r19, 0x3B	; 59
    8778:	4c ea       	ldi	r20, 0xAC	; 172
    877a:	52 e4       	ldi	r21, 0x42	; 66
    877c:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8780:	6b 01       	movw	r12, r22
    8782:	7c 01       	movw	r14, r24
    8784:	be 01       	movw	r22, r28
    8786:	dd 0f       	add	r29, r29
    8788:	88 0b       	sbc	r24, r24
    878a:	99 0b       	sbc	r25, r25
    878c:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    8790:	9b 01       	movw	r18, r22
    8792:	ac 01       	movw	r20, r24
    8794:	c7 01       	movw	r24, r14
    8796:	b6 01       	movw	r22, r12
    8798:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    879c:	0c 94 6c 4d 	jmp	0x9ad8	; 0x9ad8 <corectTrv+0x19e2>
		}
		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    87a0:	20 e0       	ldi	r18, 0x00	; 0
    87a2:	30 e0       	ldi	r19, 0x00	; 0
    87a4:	40 e6       	ldi	r20, 0x60	; 96
    87a6:	51 e4       	ldi	r21, 0x41	; 65
    87a8:	c7 01       	movw	r24, r14
    87aa:	b6 01       	movw	r22, r12
    87ac:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    87b0:	18 16       	cp	r1, r24
    87b2:	0c f0       	brlt	.+2      	; 0x87b6 <corectTrv+0x6c0>
    87b4:	55 c0       	rjmp	.+170    	; 0x8860 <corectTrv+0x76a>
    87b6:	20 e0       	ldi	r18, 0x00	; 0
    87b8:	30 e0       	ldi	r19, 0x00	; 0
    87ba:	40 e7       	ldi	r20, 0x70	; 112
    87bc:	51 e4       	ldi	r21, 0x41	; 65
    87be:	c7 01       	movw	r24, r14
    87c0:	b6 01       	movw	r22, r12
    87c2:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    87c6:	18 16       	cp	r1, r24
    87c8:	0c f4       	brge	.+2      	; 0x87cc <corectTrv+0x6d6>
    87ca:	4a c0       	rjmp	.+148    	; 0x8860 <corectTrv+0x76a>
		{
			return( 0.02199 * ds * ds * ds + 0.99841 * ds * ds + 16.07877 * ds + 91.69972)* k;
    87cc:	2f e5       	ldi	r18, 0x5F	; 95
    87ce:	34 e2       	ldi	r19, 0x24	; 36
    87d0:	44 eb       	ldi	r20, 0xB4	; 180
    87d2:	5c e3       	ldi	r21, 0x3C	; 60
    87d4:	c5 01       	movw	r24, r10
    87d6:	b4 01       	movw	r22, r8
    87d8:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    87dc:	a5 01       	movw	r20, r10
    87de:	94 01       	movw	r18, r8
    87e0:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    87e4:	a5 01       	movw	r20, r10
    87e6:	94 01       	movw	r18, r8
    87e8:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    87ec:	6b 01       	movw	r12, r22
    87ee:	7c 01       	movw	r14, r24
    87f0:	2c ec       	ldi	r18, 0xCC	; 204
    87f2:	37 e9       	ldi	r19, 0x97	; 151
    87f4:	4f e7       	ldi	r20, 0x7F	; 127
    87f6:	5f e3       	ldi	r21, 0x3F	; 63
    87f8:	c5 01       	movw	r24, r10
    87fa:	b4 01       	movw	r22, r8
    87fc:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8800:	a5 01       	movw	r20, r10
    8802:	94 01       	movw	r18, r8
    8804:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8808:	9b 01       	movw	r18, r22
    880a:	ac 01       	movw	r20, r24
    880c:	c7 01       	movw	r24, r14
    880e:	b6 01       	movw	r22, r12
    8810:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8814:	6b 01       	movw	r12, r22
    8816:	7c 01       	movw	r14, r24
    8818:	22 e5       	ldi	r18, 0x52	; 82
    881a:	31 ea       	ldi	r19, 0xA1	; 161
    881c:	40 e8       	ldi	r20, 0x80	; 128
    881e:	51 e4       	ldi	r21, 0x41	; 65
    8820:	c5 01       	movw	r24, r10
    8822:	b4 01       	movw	r22, r8
    8824:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8828:	9b 01       	movw	r18, r22
    882a:	ac 01       	movw	r20, r24
    882c:	c7 01       	movw	r24, r14
    882e:	b6 01       	movw	r22, r12
    8830:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8834:	22 e4       	ldi	r18, 0x42	; 66
    8836:	36 e6       	ldi	r19, 0x66	; 102
    8838:	47 eb       	ldi	r20, 0xB7	; 183
    883a:	52 e4       	ldi	r21, 0x42	; 66
    883c:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8840:	6b 01       	movw	r12, r22
    8842:	7c 01       	movw	r14, r24
    8844:	be 01       	movw	r22, r28
    8846:	dd 0f       	add	r29, r29
    8848:	88 0b       	sbc	r24, r24
    884a:	99 0b       	sbc	r25, r25
    884c:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    8850:	9b 01       	movw	r18, r22
    8852:	ac 01       	movw	r20, r24
    8854:	c7 01       	movw	r24, r14
    8856:	b6 01       	movw	r22, r12
    8858:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    885c:	0c 94 6c 4d 	jmp	0x9ad8	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    8860:	20 e0       	ldi	r18, 0x00	; 0
    8862:	30 e0       	ldi	r19, 0x00	; 0
    8864:	40 e7       	ldi	r20, 0x70	; 112
    8866:	51 e4       	ldi	r21, 0x41	; 65
    8868:	c7 01       	movw	r24, r14
    886a:	b6 01       	movw	r22, r12
    886c:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    8870:	18 16       	cp	r1, r24
    8872:	0c f0       	brlt	.+2      	; 0x8876 <corectTrv+0x780>
    8874:	55 c0       	rjmp	.+170    	; 0x8920 <corectTrv+0x82a>
    8876:	20 e0       	ldi	r18, 0x00	; 0
    8878:	30 e0       	ldi	r19, 0x00	; 0
    887a:	40 e8       	ldi	r20, 0x80	; 128
    887c:	51 e4       	ldi	r21, 0x41	; 65
    887e:	c7 01       	movw	r24, r14
    8880:	b6 01       	movw	r22, r12
    8882:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    8886:	18 16       	cp	r1, r24
    8888:	0c f4       	brge	.+2      	; 0x888c <corectTrv+0x796>
    888a:	4a c0       	rjmp	.+148    	; 0x8920 <corectTrv+0x82a>
		{
			return( 0.02293 * ds * ds * ds + 1.04454 * ds * ds + 16.79148 * ds + 97.65075)* k;
    888c:	22 eb       	ldi	r18, 0xB2	; 178
    888e:	37 ed       	ldi	r19, 0xD7	; 215
    8890:	4b eb       	ldi	r20, 0xBB	; 187
    8892:	5c e3       	ldi	r21, 0x3C	; 60
    8894:	c5 01       	movw	r24, r10
    8896:	b4 01       	movw	r22, r8
    8898:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    889c:	a5 01       	movw	r20, r10
    889e:	94 01       	movw	r18, r8
    88a0:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    88a4:	a5 01       	movw	r20, r10
    88a6:	94 01       	movw	r18, r8
    88a8:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    88ac:	6b 01       	movw	r12, r22
    88ae:	7c 01       	movw	r14, r24
    88b0:	2d e7       	ldi	r18, 0x7D	; 125
    88b2:	33 eb       	ldi	r19, 0xB3	; 179
    88b4:	45 e8       	ldi	r20, 0x85	; 133
    88b6:	5f e3       	ldi	r21, 0x3F	; 63
    88b8:	c5 01       	movw	r24, r10
    88ba:	b4 01       	movw	r22, r8
    88bc:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    88c0:	a5 01       	movw	r20, r10
    88c2:	94 01       	movw	r18, r8
    88c4:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    88c8:	9b 01       	movw	r18, r22
    88ca:	ac 01       	movw	r20, r24
    88cc:	c7 01       	movw	r24, r14
    88ce:	b6 01       	movw	r22, r12
    88d0:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    88d4:	6b 01       	movw	r12, r22
    88d6:	7c 01       	movw	r14, r24
    88d8:	23 ef       	ldi	r18, 0xF3	; 243
    88da:	34 e5       	ldi	r19, 0x54	; 84
    88dc:	46 e8       	ldi	r20, 0x86	; 134
    88de:	51 e4       	ldi	r21, 0x41	; 65
    88e0:	c5 01       	movw	r24, r10
    88e2:	b4 01       	movw	r22, r8
    88e4:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    88e8:	9b 01       	movw	r18, r22
    88ea:	ac 01       	movw	r20, r24
    88ec:	c7 01       	movw	r24, r14
    88ee:	b6 01       	movw	r22, r12
    88f0:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    88f4:	2f e2       	ldi	r18, 0x2F	; 47
    88f6:	3d e4       	ldi	r19, 0x4D	; 77
    88f8:	43 ec       	ldi	r20, 0xC3	; 195
    88fa:	52 e4       	ldi	r21, 0x42	; 66
    88fc:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8900:	6b 01       	movw	r12, r22
    8902:	7c 01       	movw	r14, r24
    8904:	be 01       	movw	r22, r28
    8906:	dd 0f       	add	r29, r29
    8908:	88 0b       	sbc	r24, r24
    890a:	99 0b       	sbc	r25, r25
    890c:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    8910:	9b 01       	movw	r18, r22
    8912:	ac 01       	movw	r20, r24
    8914:	c7 01       	movw	r24, r14
    8916:	b6 01       	movw	r22, r12
    8918:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    891c:	0c 94 6c 4d 	jmp	0x9ad8	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 9)
    8920:	20 e0       	ldi	r18, 0x00	; 0
    8922:	30 e0       	ldi	r19, 0x00	; 0
    8924:	40 e8       	ldi	r20, 0x80	; 128
    8926:	51 e4       	ldi	r21, 0x41	; 65
    8928:	c7 01       	movw	r24, r14
    892a:	b6 01       	movw	r22, r12
    892c:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    8930:	18 16       	cp	r1, r24
    8932:	14 f0       	brlt	.+4      	; 0x8938 <corectTrv+0x842>
    8934:	0c 94 59 4d 	jmp	0x9ab2	; 0x9ab2 <corectTrv+0x19bc>
		{
			return( 0.01242 * ds * ds * ds + 0.55907 * ds * ds + 9.57142 * ds + 67.21499)* k;
    8938:	21 e4       	ldi	r18, 0x41	; 65
    893a:	3d e7       	ldi	r19, 0x7D	; 125
    893c:	4b e4       	ldi	r20, 0x4B	; 75
    893e:	5c e3       	ldi	r21, 0x3C	; 60
    8940:	c5 01       	movw	r24, r10
    8942:	b4 01       	movw	r22, r8
    8944:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8948:	a5 01       	movw	r20, r10
    894a:	94 01       	movw	r18, r8
    894c:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8950:	a5 01       	movw	r20, r10
    8952:	94 01       	movw	r18, r8
    8954:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8958:	6b 01       	movw	r12, r22
    895a:	7c 01       	movw	r14, r24
    895c:	26 e3       	ldi	r18, 0x36	; 54
    895e:	3f e1       	ldi	r19, 0x1F	; 31
    8960:	4f e0       	ldi	r20, 0x0F	; 15
    8962:	5f e3       	ldi	r21, 0x3F	; 63
    8964:	c5 01       	movw	r24, r10
    8966:	b4 01       	movw	r22, r8
    8968:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    896c:	a5 01       	movw	r20, r10
    896e:	94 01       	movw	r18, r8
    8970:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8974:	9b 01       	movw	r18, r22
    8976:	ac 01       	movw	r20, r24
    8978:	c7 01       	movw	r24, r14
    897a:	b6 01       	movw	r22, r12
    897c:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8980:	6b 01       	movw	r12, r22
    8982:	7c 01       	movw	r14, r24
    8984:	29 e8       	ldi	r18, 0x89	; 137
    8986:	34 e2       	ldi	r19, 0x24	; 36
    8988:	49 e1       	ldi	r20, 0x19	; 25
    898a:	51 e4       	ldi	r21, 0x41	; 65
    898c:	c5 01       	movw	r24, r10
    898e:	b4 01       	movw	r22, r8
    8990:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8994:	9b 01       	movw	r18, r22
    8996:	ac 01       	movw	r20, r24
    8998:	c7 01       	movw	r24, r14
    899a:	b6 01       	movw	r22, r12
    899c:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    89a0:	23 e1       	ldi	r18, 0x13	; 19
    89a2:	3e e6       	ldi	r19, 0x6E	; 110
    89a4:	46 e8       	ldi	r20, 0x86	; 134
    89a6:	52 e4       	ldi	r21, 0x42	; 66
    89a8:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    89ac:	6b 01       	movw	r12, r22
    89ae:	7c 01       	movw	r14, r24
    89b0:	be 01       	movw	r22, r28
    89b2:	dd 0f       	add	r29, r29
    89b4:	88 0b       	sbc	r24, r24
    89b6:	99 0b       	sbc	r25, r25
    89b8:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    89bc:	9b 01       	movw	r18, r22
    89be:	ac 01       	movw	r20, r24
    89c0:	c7 01       	movw	r24, r14
    89c2:	b6 01       	movw	r22, r12
    89c4:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    89c8:	0c 94 6c 4d 	jmp	0x9ad8	; 0x9ad8 <corectTrv+0x19e2>
		}
	}

	else if (ds < 0 && ds >= -10)
    89cc:	20 e0       	ldi	r18, 0x00	; 0
    89ce:	30 e0       	ldi	r19, 0x00	; 0
    89d0:	a9 01       	movw	r20, r18
    89d2:	c5 01       	movw	r24, r10
    89d4:	b4 01       	movw	r22, r8
    89d6:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    89da:	88 23       	and	r24, r24
    89dc:	0c f0       	brlt	.+2      	; 0x89e0 <corectTrv+0x8ea>
    89de:	d6 c3       	rjmp	.+1964   	; 0x918c <corectTrv+0x1096>
    89e0:	20 e0       	ldi	r18, 0x00	; 0
    89e2:	30 e0       	ldi	r19, 0x00	; 0
    89e4:	40 e2       	ldi	r20, 0x20	; 32
    89e6:	51 ec       	ldi	r21, 0xC1	; 193
    89e8:	c5 01       	movw	r24, r10
    89ea:	b4 01       	movw	r22, r8
    89ec:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    89f0:	88 23       	and	r24, r24
    89f2:	0c f4       	brge	.+2      	; 0x89f6 <corectTrv+0x900>
    89f4:	cb c3       	rjmp	.+1942   	; 0x918c <corectTrv+0x1096>
	{
		if (Superheat == SSet)
    89f6:	20 e0       	ldi	r18, 0x00	; 0
    89f8:	30 e0       	ldi	r19, 0x00	; 0
    89fa:	40 ee       	ldi	r20, 0xE0	; 224
    89fc:	50 e4       	ldi	r21, 0x40	; 64
    89fe:	c7 01       	movw	r24, r14
    8a00:	b6 01       	movw	r22, r12
    8a02:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    8a06:	81 11       	cpse	r24, r1
    8a08:	4a c0       	rjmp	.+148    	; 0x8a9e <corectTrv+0x9a8>
		{
			return( 0.01259 * ds * ds * ds + 0.18896 * ds * ds + 2.12770 * ds - 0.01350)* k;
    8a0a:	2a e4       	ldi	r18, 0x4A	; 74
    8a0c:	36 e4       	ldi	r19, 0x46	; 70
    8a0e:	4e e4       	ldi	r20, 0x4E	; 78
    8a10:	5c e3       	ldi	r21, 0x3C	; 60
    8a12:	c5 01       	movw	r24, r10
    8a14:	b4 01       	movw	r22, r8
    8a16:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8a1a:	a5 01       	movw	r20, r10
    8a1c:	94 01       	movw	r18, r8
    8a1e:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8a22:	a5 01       	movw	r20, r10
    8a24:	94 01       	movw	r18, r8
    8a26:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8a2a:	6b 01       	movw	r12, r22
    8a2c:	7c 01       	movw	r14, r24
    8a2e:	2b eb       	ldi	r18, 0xBB	; 187
    8a30:	3e e7       	ldi	r19, 0x7E	; 126
    8a32:	41 e4       	ldi	r20, 0x41	; 65
    8a34:	5e e3       	ldi	r21, 0x3E	; 62
    8a36:	c5 01       	movw	r24, r10
    8a38:	b4 01       	movw	r22, r8
    8a3a:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8a3e:	a5 01       	movw	r20, r10
    8a40:	94 01       	movw	r18, r8
    8a42:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8a46:	9b 01       	movw	r18, r22
    8a48:	ac 01       	movw	r20, r24
    8a4a:	c7 01       	movw	r24, r14
    8a4c:	b6 01       	movw	r22, r12
    8a4e:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8a52:	6b 01       	movw	r12, r22
    8a54:	7c 01       	movw	r14, r24
    8a56:	2d e3       	ldi	r18, 0x3D	; 61
    8a58:	3c e2       	ldi	r19, 0x2C	; 44
    8a5a:	48 e0       	ldi	r20, 0x08	; 8
    8a5c:	50 e4       	ldi	r21, 0x40	; 64
    8a5e:	c5 01       	movw	r24, r10
    8a60:	b4 01       	movw	r22, r8
    8a62:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8a66:	9b 01       	movw	r18, r22
    8a68:	ac 01       	movw	r20, r24
    8a6a:	c7 01       	movw	r24, r14
    8a6c:	b6 01       	movw	r22, r12
    8a6e:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8a72:	2b e1       	ldi	r18, 0x1B	; 27
    8a74:	3f e2       	ldi	r19, 0x2F	; 47
    8a76:	4d e5       	ldi	r20, 0x5D	; 93
    8a78:	5c e3       	ldi	r21, 0x3C	; 60
    8a7a:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    8a7e:	6b 01       	movw	r12, r22
    8a80:	7c 01       	movw	r14, r24
    8a82:	be 01       	movw	r22, r28
    8a84:	dd 0f       	add	r29, r29
    8a86:	88 0b       	sbc	r24, r24
    8a88:	99 0b       	sbc	r25, r25
    8a8a:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    8a8e:	9b 01       	movw	r18, r22
    8a90:	ac 01       	movw	r20, r24
    8a92:	c7 01       	movw	r24, r14
    8a94:	b6 01       	movw	r22, r12
    8a96:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8a9a:	0c 94 6c 4d 	jmp	0x9ad8	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    8a9e:	20 e0       	ldi	r18, 0x00	; 0
    8aa0:	30 e0       	ldi	r19, 0x00	; 0
    8aa2:	40 ee       	ldi	r20, 0xE0	; 224
    8aa4:	50 e4       	ldi	r21, 0x40	; 64
    8aa6:	c7 01       	movw	r24, r14
    8aa8:	b6 01       	movw	r22, r12
    8aaa:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    8aae:	18 16       	cp	r1, r24
    8ab0:	0c f0       	brlt	.+2      	; 0x8ab4 <corectTrv+0x9be>
    8ab2:	54 c0       	rjmp	.+168    	; 0x8b5c <corectTrv+0xa66>
    8ab4:	20 e0       	ldi	r18, 0x00	; 0
    8ab6:	30 e0       	ldi	r19, 0x00	; 0
    8ab8:	40 e0       	ldi	r20, 0x00	; 0
    8aba:	51 e4       	ldi	r21, 0x41	; 65
    8abc:	c7 01       	movw	r24, r14
    8abe:	b6 01       	movw	r22, r12
    8ac0:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    8ac4:	18 16       	cp	r1, r24
    8ac6:	0c f4       	brge	.+2      	; 0x8aca <corectTrv+0x9d4>
    8ac8:	49 c0       	rjmp	.+146    	; 0x8b5c <corectTrv+0xa66>
		{
			return( 0.02252 * ds * ds * ds + 0.32376 * ds * ds + 2.48397 * ds + 3.72657)* k;
    8aca:	2d ed       	ldi	r18, 0xDD	; 221
    8acc:	3b e7       	ldi	r19, 0x7B	; 123
    8ace:	48 eb       	ldi	r20, 0xB8	; 184
    8ad0:	5c e3       	ldi	r21, 0x3C	; 60
    8ad2:	c5 01       	movw	r24, r10
    8ad4:	b4 01       	movw	r22, r8
    8ad6:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8ada:	a5 01       	movw	r20, r10
    8adc:	94 01       	movw	r18, r8
    8ade:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8ae2:	a5 01       	movw	r20, r10
    8ae4:	94 01       	movw	r18, r8
    8ae6:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8aea:	6b 01       	movw	r12, r22
    8aec:	7c 01       	movw	r14, r24
    8aee:	2f ed       	ldi	r18, 0xDF	; 223
    8af0:	33 ec       	ldi	r19, 0xC3	; 195
    8af2:	45 ea       	ldi	r20, 0xA5	; 165
    8af4:	5e e3       	ldi	r21, 0x3E	; 62
    8af6:	c5 01       	movw	r24, r10
    8af8:	b4 01       	movw	r22, r8
    8afa:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8afe:	a5 01       	movw	r20, r10
    8b00:	94 01       	movw	r18, r8
    8b02:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8b06:	9b 01       	movw	r18, r22
    8b08:	ac 01       	movw	r20, r24
    8b0a:	c7 01       	movw	r24, r14
    8b0c:	b6 01       	movw	r22, r12
    8b0e:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8b12:	6b 01       	movw	r12, r22
    8b14:	7c 01       	movw	r14, r24
    8b16:	2d e5       	ldi	r18, 0x5D	; 93
    8b18:	39 ef       	ldi	r19, 0xF9	; 249
    8b1a:	4e e1       	ldi	r20, 0x1E	; 30
    8b1c:	50 e4       	ldi	r21, 0x40	; 64
    8b1e:	c5 01       	movw	r24, r10
    8b20:	b4 01       	movw	r22, r8
    8b22:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8b26:	9b 01       	movw	r18, r22
    8b28:	ac 01       	movw	r20, r24
    8b2a:	c7 01       	movw	r24, r14
    8b2c:	b6 01       	movw	r22, r12
    8b2e:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8b32:	2f e1       	ldi	r18, 0x1F	; 31
    8b34:	30 e8       	ldi	r19, 0x80	; 128
    8b36:	4e e6       	ldi	r20, 0x6E	; 110
    8b38:	50 e4       	ldi	r21, 0x40	; 64
    8b3a:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8b3e:	6b 01       	movw	r12, r22
    8b40:	7c 01       	movw	r14, r24
    8b42:	be 01       	movw	r22, r28
    8b44:	dd 0f       	add	r29, r29
    8b46:	88 0b       	sbc	r24, r24
    8b48:	99 0b       	sbc	r25, r25
    8b4a:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    8b4e:	9b 01       	movw	r18, r22
    8b50:	ac 01       	movw	r20, r24
    8b52:	c7 01       	movw	r24, r14
    8b54:	b6 01       	movw	r22, r12
    8b56:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8b5a:	be c7       	rjmp	.+3964   	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    8b5c:	20 e0       	ldi	r18, 0x00	; 0
    8b5e:	30 e0       	ldi	r19, 0x00	; 0
    8b60:	40 e0       	ldi	r20, 0x00	; 0
    8b62:	51 e4       	ldi	r21, 0x41	; 65
    8b64:	c7 01       	movw	r24, r14
    8b66:	b6 01       	movw	r22, r12
    8b68:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    8b6c:	18 16       	cp	r1, r24
    8b6e:	0c f0       	brlt	.+2      	; 0x8b72 <corectTrv+0xa7c>
    8b70:	54 c0       	rjmp	.+168    	; 0x8c1a <corectTrv+0xb24>
    8b72:	20 e0       	ldi	r18, 0x00	; 0
    8b74:	30 e0       	ldi	r19, 0x00	; 0
    8b76:	40 e1       	ldi	r20, 0x10	; 16
    8b78:	51 e4       	ldi	r21, 0x41	; 65
    8b7a:	c7 01       	movw	r24, r14
    8b7c:	b6 01       	movw	r22, r12
    8b7e:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    8b82:	18 16       	cp	r1, r24
    8b84:	0c f4       	brge	.+2      	; 0x8b88 <corectTrv+0xa92>
    8b86:	49 c0       	rjmp	.+146    	; 0x8c1a <corectTrv+0xb24>
		{
			return( 0.02106 * ds * ds * ds + 0.30427 * ds * ds + 2.44311 * ds + 6.31417)* k;
    8b88:	25 e0       	ldi	r18, 0x05	; 5
    8b8a:	36 e8       	ldi	r19, 0x86	; 134
    8b8c:	4c ea       	ldi	r20, 0xAC	; 172
    8b8e:	5c e3       	ldi	r21, 0x3C	; 60
    8b90:	c5 01       	movw	r24, r10
    8b92:	b4 01       	movw	r22, r8
    8b94:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8b98:	a5 01       	movw	r20, r10
    8b9a:	94 01       	movw	r18, r8
    8b9c:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8ba0:	a5 01       	movw	r20, r10
    8ba2:	94 01       	movw	r18, r8
    8ba4:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8ba8:	6b 01       	movw	r12, r22
    8baa:	7c 01       	movw	r14, r24
    8bac:	27 e4       	ldi	r18, 0x47	; 71
    8bae:	39 ec       	ldi	r19, 0xC9	; 201
    8bb0:	4b e9       	ldi	r20, 0x9B	; 155
    8bb2:	5e e3       	ldi	r21, 0x3E	; 62
    8bb4:	c5 01       	movw	r24, r10
    8bb6:	b4 01       	movw	r22, r8
    8bb8:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8bbc:	a5 01       	movw	r20, r10
    8bbe:	94 01       	movw	r18, r8
    8bc0:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8bc4:	9b 01       	movw	r18, r22
    8bc6:	ac 01       	movw	r20, r24
    8bc8:	c7 01       	movw	r24, r14
    8bca:	b6 01       	movw	r22, r12
    8bcc:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8bd0:	6b 01       	movw	r12, r22
    8bd2:	7c 01       	movw	r14, r24
    8bd4:	2a ee       	ldi	r18, 0xEA	; 234
    8bd6:	3b e5       	ldi	r19, 0x5B	; 91
    8bd8:	4c e1       	ldi	r20, 0x1C	; 28
    8bda:	50 e4       	ldi	r21, 0x40	; 64
    8bdc:	c5 01       	movw	r24, r10
    8bde:	b4 01       	movw	r22, r8
    8be0:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8be4:	9b 01       	movw	r18, r22
    8be6:	ac 01       	movw	r20, r24
    8be8:	c7 01       	movw	r24, r14
    8bea:	b6 01       	movw	r22, r12
    8bec:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8bf0:	2e ea       	ldi	r18, 0xAE	; 174
    8bf2:	3d e0       	ldi	r19, 0x0D	; 13
    8bf4:	4a ec       	ldi	r20, 0xCA	; 202
    8bf6:	50 e4       	ldi	r21, 0x40	; 64
    8bf8:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8bfc:	6b 01       	movw	r12, r22
    8bfe:	7c 01       	movw	r14, r24
    8c00:	be 01       	movw	r22, r28
    8c02:	dd 0f       	add	r29, r29
    8c04:	88 0b       	sbc	r24, r24
    8c06:	99 0b       	sbc	r25, r25
    8c08:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    8c0c:	9b 01       	movw	r18, r22
    8c0e:	ac 01       	movw	r20, r24
    8c10:	c7 01       	movw	r24, r14
    8c12:	b6 01       	movw	r22, r12
    8c14:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8c18:	5f c7       	rjmp	.+3774   	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    8c1a:	20 e0       	ldi	r18, 0x00	; 0
    8c1c:	30 e0       	ldi	r19, 0x00	; 0
    8c1e:	40 e1       	ldi	r20, 0x10	; 16
    8c20:	51 e4       	ldi	r21, 0x41	; 65
    8c22:	c7 01       	movw	r24, r14
    8c24:	b6 01       	movw	r22, r12
    8c26:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    8c2a:	18 16       	cp	r1, r24
    8c2c:	0c f0       	brlt	.+2      	; 0x8c30 <corectTrv+0xb3a>
    8c2e:	54 c0       	rjmp	.+168    	; 0x8cd8 <corectTrv+0xbe2>
    8c30:	20 e0       	ldi	r18, 0x00	; 0
    8c32:	30 e0       	ldi	r19, 0x00	; 0
    8c34:	40 e2       	ldi	r20, 0x20	; 32
    8c36:	51 e4       	ldi	r21, 0x41	; 65
    8c38:	c7 01       	movw	r24, r14
    8c3a:	b6 01       	movw	r22, r12
    8c3c:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    8c40:	18 16       	cp	r1, r24
    8c42:	0c f4       	brge	.+2      	; 0x8c46 <corectTrv+0xb50>
    8c44:	49 c0       	rjmp	.+146    	; 0x8cd8 <corectTrv+0xbe2>
		{
			return( 0.02106 * ds * ds * ds + 0.32749 * ds * ds + 2.67528 * ds + 8.74842)* k;
    8c46:	25 e0       	ldi	r18, 0x05	; 5
    8c48:	36 e8       	ldi	r19, 0x86	; 134
    8c4a:	4c ea       	ldi	r20, 0xAC	; 172
    8c4c:	5c e3       	ldi	r21, 0x3C	; 60
    8c4e:	c5 01       	movw	r24, r10
    8c50:	b4 01       	movw	r22, r8
    8c52:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8c56:	a5 01       	movw	r20, r10
    8c58:	94 01       	movw	r18, r8
    8c5a:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8c5e:	a5 01       	movw	r20, r10
    8c60:	94 01       	movw	r18, r8
    8c62:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8c66:	6b 01       	movw	r12, r22
    8c68:	7c 01       	movw	r14, r24
    8c6a:	25 ec       	ldi	r18, 0xC5	; 197
    8c6c:	3c ea       	ldi	r19, 0xAC	; 172
    8c6e:	47 ea       	ldi	r20, 0xA7	; 167
    8c70:	5e e3       	ldi	r21, 0x3E	; 62
    8c72:	c5 01       	movw	r24, r10
    8c74:	b4 01       	movw	r22, r8
    8c76:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8c7a:	a5 01       	movw	r20, r10
    8c7c:	94 01       	movw	r18, r8
    8c7e:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8c82:	9b 01       	movw	r18, r22
    8c84:	ac 01       	movw	r20, r24
    8c86:	c7 01       	movw	r24, r14
    8c88:	b6 01       	movw	r22, r12
    8c8a:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8c8e:	6b 01       	movw	r12, r22
    8c90:	7c 01       	movw	r14, r24
    8c92:	2a ec       	ldi	r18, 0xCA	; 202
    8c94:	37 e3       	ldi	r19, 0x37	; 55
    8c96:	4b e2       	ldi	r20, 0x2B	; 43
    8c98:	50 e4       	ldi	r21, 0x40	; 64
    8c9a:	c5 01       	movw	r24, r10
    8c9c:	b4 01       	movw	r22, r8
    8c9e:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8ca2:	9b 01       	movw	r18, r22
    8ca4:	ac 01       	movw	r20, r24
    8ca6:	c7 01       	movw	r24, r14
    8ca8:	b6 01       	movw	r22, r12
    8caa:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8cae:	27 e8       	ldi	r18, 0x87	; 135
    8cb0:	39 ef       	ldi	r19, 0xF9	; 249
    8cb2:	4b e0       	ldi	r20, 0x0B	; 11
    8cb4:	51 e4       	ldi	r21, 0x41	; 65
    8cb6:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8cba:	6b 01       	movw	r12, r22
    8cbc:	7c 01       	movw	r14, r24
    8cbe:	be 01       	movw	r22, r28
    8cc0:	dd 0f       	add	r29, r29
    8cc2:	88 0b       	sbc	r24, r24
    8cc4:	99 0b       	sbc	r25, r25
    8cc6:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    8cca:	9b 01       	movw	r18, r22
    8ccc:	ac 01       	movw	r20, r24
    8cce:	c7 01       	movw	r24, r14
    8cd0:	b6 01       	movw	r22, r12
    8cd2:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8cd6:	00 c7       	rjmp	.+3584   	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    8cd8:	20 e0       	ldi	r18, 0x00	; 0
    8cda:	30 e0       	ldi	r19, 0x00	; 0
    8cdc:	40 e2       	ldi	r20, 0x20	; 32
    8cde:	51 e4       	ldi	r21, 0x41	; 65
    8ce0:	c7 01       	movw	r24, r14
    8ce2:	b6 01       	movw	r22, r12
    8ce4:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    8ce8:	18 16       	cp	r1, r24
    8cea:	0c f0       	brlt	.+2      	; 0x8cee <corectTrv+0xbf8>
    8cec:	54 c0       	rjmp	.+168    	; 0x8d96 <corectTrv+0xca0>
    8cee:	20 e0       	ldi	r18, 0x00	; 0
    8cf0:	30 e0       	ldi	r19, 0x00	; 0
    8cf2:	40 e3       	ldi	r20, 0x30	; 48
    8cf4:	51 e4       	ldi	r21, 0x41	; 65
    8cf6:	c7 01       	movw	r24, r14
    8cf8:	b6 01       	movw	r22, r12
    8cfa:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    8cfe:	18 16       	cp	r1, r24
    8d00:	0c f4       	brge	.+2      	; 0x8d04 <corectTrv+0xc0e>
    8d02:	49 c0       	rjmp	.+146    	; 0x8d96 <corectTrv+0xca0>
		{
			return( 0.02252 * ds * ds * ds + 0.35182 * ds * ds + 2.76462 * ds + 11.25664)* k;
    8d04:	2d ed       	ldi	r18, 0xDD	; 221
    8d06:	3b e7       	ldi	r19, 0x7B	; 123
    8d08:	48 eb       	ldi	r20, 0xB8	; 184
    8d0a:	5c e3       	ldi	r21, 0x3C	; 60
    8d0c:	c5 01       	movw	r24, r10
    8d0e:	b4 01       	movw	r22, r8
    8d10:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8d14:	a5 01       	movw	r20, r10
    8d16:	94 01       	movw	r18, r8
    8d18:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8d1c:	a5 01       	movw	r20, r10
    8d1e:	94 01       	movw	r18, r8
    8d20:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8d24:	6b 01       	movw	r12, r22
    8d26:	7c 01       	movw	r14, r24
    8d28:	20 ec       	ldi	r18, 0xC0	; 192
    8d2a:	31 e2       	ldi	r19, 0x21	; 33
    8d2c:	44 eb       	ldi	r20, 0xB4	; 180
    8d2e:	5e e3       	ldi	r21, 0x3E	; 62
    8d30:	c5 01       	movw	r24, r10
    8d32:	b4 01       	movw	r22, r8
    8d34:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8d38:	a5 01       	movw	r20, r10
    8d3a:	94 01       	movw	r18, r8
    8d3c:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8d40:	9b 01       	movw	r18, r22
    8d42:	ac 01       	movw	r20, r24
    8d44:	c7 01       	movw	r24, r14
    8d46:	b6 01       	movw	r22, r12
    8d48:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8d4c:	6b 01       	movw	r12, r22
    8d4e:	7c 01       	movw	r14, r24
    8d50:	29 e8       	ldi	r18, 0x89	; 137
    8d52:	3f ee       	ldi	r19, 0xEF	; 239
    8d54:	40 e3       	ldi	r20, 0x30	; 48
    8d56:	50 e4       	ldi	r21, 0x40	; 64
    8d58:	c5 01       	movw	r24, r10
    8d5a:	b4 01       	movw	r22, r8
    8d5c:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8d60:	9b 01       	movw	r18, r22
    8d62:	ac 01       	movw	r20, r24
    8d64:	c7 01       	movw	r24, r14
    8d66:	b6 01       	movw	r22, r12
    8d68:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8d6c:	23 e3       	ldi	r18, 0x33	; 51
    8d6e:	3b e1       	ldi	r19, 0x1B	; 27
    8d70:	44 e3       	ldi	r20, 0x34	; 52
    8d72:	51 e4       	ldi	r21, 0x41	; 65
    8d74:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8d78:	6b 01       	movw	r12, r22
    8d7a:	7c 01       	movw	r14, r24
    8d7c:	be 01       	movw	r22, r28
    8d7e:	dd 0f       	add	r29, r29
    8d80:	88 0b       	sbc	r24, r24
    8d82:	99 0b       	sbc	r25, r25
    8d84:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    8d88:	9b 01       	movw	r18, r22
    8d8a:	ac 01       	movw	r20, r24
    8d8c:	c7 01       	movw	r24, r14
    8d8e:	b6 01       	movw	r22, r12
    8d90:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8d94:	a1 c6       	rjmp	.+3394   	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    8d96:	20 e0       	ldi	r18, 0x00	; 0
    8d98:	30 e0       	ldi	r19, 0x00	; 0
    8d9a:	40 e3       	ldi	r20, 0x30	; 48
    8d9c:	51 e4       	ldi	r21, 0x41	; 65
    8d9e:	c7 01       	movw	r24, r14
    8da0:	b6 01       	movw	r22, r12
    8da2:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    8da6:	18 16       	cp	r1, r24
    8da8:	0c f0       	brlt	.+2      	; 0x8dac <corectTrv+0xcb6>
    8daa:	54 c0       	rjmp	.+168    	; 0x8e54 <corectTrv+0xd5e>
    8dac:	20 e0       	ldi	r18, 0x00	; 0
    8dae:	30 e0       	ldi	r19, 0x00	; 0
    8db0:	40 e4       	ldi	r20, 0x40	; 64
    8db2:	51 e4       	ldi	r21, 0x41	; 65
    8db4:	c7 01       	movw	r24, r14
    8db6:	b6 01       	movw	r22, r12
    8db8:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    8dbc:	18 16       	cp	r1, r24
    8dbe:	0c f4       	brge	.+2      	; 0x8dc2 <corectTrv+0xccc>
    8dc0:	49 c0       	rjmp	.+146    	; 0x8e54 <corectTrv+0xd5e>
		{
			return( 0.01251 * ds * ds * ds + 0.18754 * ds * ds + 2.12069 * ds + 14.98441)* k;
    8dc2:	2e eb       	ldi	r18, 0xBE	; 190
    8dc4:	36 ef       	ldi	r19, 0xF6	; 246
    8dc6:	4c e4       	ldi	r20, 0x4C	; 76
    8dc8:	5c e3       	ldi	r21, 0x3C	; 60
    8dca:	c5 01       	movw	r24, r10
    8dcc:	b4 01       	movw	r22, r8
    8dce:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8dd2:	a5 01       	movw	r20, r10
    8dd4:	94 01       	movw	r18, r8
    8dd6:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8dda:	a5 01       	movw	r20, r10
    8ddc:	94 01       	movw	r18, r8
    8dde:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8de2:	6b 01       	movw	r12, r22
    8de4:	7c 01       	movw	r14, r24
    8de6:	2c e7       	ldi	r18, 0x7C	; 124
    8de8:	3a e0       	ldi	r19, 0x0A	; 10
    8dea:	40 e4       	ldi	r20, 0x40	; 64
    8dec:	5e e3       	ldi	r21, 0x3E	; 62
    8dee:	c5 01       	movw	r24, r10
    8df0:	b4 01       	movw	r22, r8
    8df2:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8df6:	a5 01       	movw	r20, r10
    8df8:	94 01       	movw	r18, r8
    8dfa:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8dfe:	9b 01       	movw	r18, r22
    8e00:	ac 01       	movw	r20, r24
    8e02:	c7 01       	movw	r24, r14
    8e04:	b6 01       	movw	r22, r12
    8e06:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8e0a:	6b 01       	movw	r12, r22
    8e0c:	7c 01       	movw	r14, r24
    8e0e:	23 e6       	ldi	r18, 0x63	; 99
    8e10:	39 eb       	ldi	r19, 0xB9	; 185
    8e12:	47 e0       	ldi	r20, 0x07	; 7
    8e14:	50 e4       	ldi	r21, 0x40	; 64
    8e16:	c5 01       	movw	r24, r10
    8e18:	b4 01       	movw	r22, r8
    8e1a:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8e1e:	9b 01       	movw	r18, r22
    8e20:	ac 01       	movw	r20, r24
    8e22:	c7 01       	movw	r24, r14
    8e24:	b6 01       	movw	r22, r12
    8e26:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8e2a:	25 e2       	ldi	r18, 0x25	; 37
    8e2c:	30 ec       	ldi	r19, 0xC0	; 192
    8e2e:	4f e6       	ldi	r20, 0x6F	; 111
    8e30:	51 e4       	ldi	r21, 0x41	; 65
    8e32:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8e36:	6b 01       	movw	r12, r22
    8e38:	7c 01       	movw	r14, r24
    8e3a:	be 01       	movw	r22, r28
    8e3c:	dd 0f       	add	r29, r29
    8e3e:	88 0b       	sbc	r24, r24
    8e40:	99 0b       	sbc	r25, r25
    8e42:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    8e46:	9b 01       	movw	r18, r22
    8e48:	ac 01       	movw	r20, r24
    8e4a:	c7 01       	movw	r24, r14
    8e4c:	b6 01       	movw	r22, r12
    8e4e:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8e52:	42 c6       	rjmp	.+3204   	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    8e54:	20 e0       	ldi	r18, 0x00	; 0
    8e56:	30 e0       	ldi	r19, 0x00	; 0
    8e58:	40 e4       	ldi	r20, 0x40	; 64
    8e5a:	51 e4       	ldi	r21, 0x41	; 65
    8e5c:	c7 01       	movw	r24, r14
    8e5e:	b6 01       	movw	r22, r12
    8e60:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    8e64:	18 16       	cp	r1, r24
    8e66:	dc f5       	brge	.+118    	; 0x8ede <corectTrv+0xde8>
    8e68:	20 e0       	ldi	r18, 0x00	; 0
    8e6a:	30 e0       	ldi	r19, 0x00	; 0
    8e6c:	40 e5       	ldi	r20, 0x50	; 80
    8e6e:	51 e4       	ldi	r21, 0x41	; 65
    8e70:	c7 01       	movw	r24, r14
    8e72:	b6 01       	movw	r22, r12
    8e74:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    8e78:	18 16       	cp	r1, r24
    8e7a:	8c f1       	brlt	.+98     	; 0x8ede <corectTrv+0xde8>
		{
			return(0.062 * ds * ds + 1.818 * ds + 15.22)* k;
    8e7c:	26 eb       	ldi	r18, 0xB6	; 182
    8e7e:	33 ef       	ldi	r19, 0xF3	; 243
    8e80:	4d e7       	ldi	r20, 0x7D	; 125
    8e82:	5d e3       	ldi	r21, 0x3D	; 61
    8e84:	c5 01       	movw	r24, r10
    8e86:	b4 01       	movw	r22, r8
    8e88:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8e8c:	a5 01       	movw	r20, r10
    8e8e:	94 01       	movw	r18, r8
    8e90:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8e94:	6b 01       	movw	r12, r22
    8e96:	7c 01       	movw	r14, r24
    8e98:	29 e3       	ldi	r18, 0x39	; 57
    8e9a:	34 eb       	ldi	r19, 0xB4	; 180
    8e9c:	48 ee       	ldi	r20, 0xE8	; 232
    8e9e:	5f e3       	ldi	r21, 0x3F	; 63
    8ea0:	c5 01       	movw	r24, r10
    8ea2:	b4 01       	movw	r22, r8
    8ea4:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8ea8:	9b 01       	movw	r18, r22
    8eaa:	ac 01       	movw	r20, r24
    8eac:	c7 01       	movw	r24, r14
    8eae:	b6 01       	movw	r22, r12
    8eb0:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8eb4:	2f e1       	ldi	r18, 0x1F	; 31
    8eb6:	35 e8       	ldi	r19, 0x85	; 133
    8eb8:	43 e7       	ldi	r20, 0x73	; 115
    8eba:	51 e4       	ldi	r21, 0x41	; 65
    8ebc:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8ec0:	6b 01       	movw	r12, r22
    8ec2:	7c 01       	movw	r14, r24
    8ec4:	be 01       	movw	r22, r28
    8ec6:	dd 0f       	add	r29, r29
    8ec8:	88 0b       	sbc	r24, r24
    8eca:	99 0b       	sbc	r25, r25
    8ecc:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    8ed0:	9b 01       	movw	r18, r22
    8ed2:	ac 01       	movw	r20, r24
    8ed4:	c7 01       	movw	r24, r14
    8ed6:	b6 01       	movw	r22, r12
    8ed8:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8edc:	fd c5       	rjmp	.+3066   	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    8ede:	20 e0       	ldi	r18, 0x00	; 0
    8ee0:	30 e0       	ldi	r19, 0x00	; 0
    8ee2:	40 e5       	ldi	r20, 0x50	; 80
    8ee4:	51 e4       	ldi	r21, 0x41	; 65
    8ee6:	c7 01       	movw	r24, r14
    8ee8:	b6 01       	movw	r22, r12
    8eea:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    8eee:	18 16       	cp	r1, r24
    8ef0:	dc f5       	brge	.+118    	; 0x8f68 <corectTrv+0xe72>
    8ef2:	20 e0       	ldi	r18, 0x00	; 0
    8ef4:	30 e0       	ldi	r19, 0x00	; 0
    8ef6:	40 e6       	ldi	r20, 0x60	; 96
    8ef8:	51 e4       	ldi	r21, 0x41	; 65
    8efa:	c7 01       	movw	r24, r14
    8efc:	b6 01       	movw	r22, r12
    8efe:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    8f02:	18 16       	cp	r1, r24
    8f04:	8c f1       	brlt	.+98     	; 0x8f68 <corectTrv+0xe72>
		{
			return( 0.097 * ds * ds + 1.941 * ds + 16.00)* k;
    8f06:	20 ef       	ldi	r18, 0xF0	; 240
    8f08:	37 ea       	ldi	r19, 0xA7	; 167
    8f0a:	46 ec       	ldi	r20, 0xC6	; 198
    8f0c:	5d e3       	ldi	r21, 0x3D	; 61
    8f0e:	c5 01       	movw	r24, r10
    8f10:	b4 01       	movw	r22, r8
    8f12:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8f16:	a5 01       	movw	r20, r10
    8f18:	94 01       	movw	r18, r8
    8f1a:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8f1e:	6b 01       	movw	r12, r22
    8f20:	7c 01       	movw	r14, r24
    8f22:	20 eb       	ldi	r18, 0xB0	; 176
    8f24:	32 e7       	ldi	r19, 0x72	; 114
    8f26:	48 ef       	ldi	r20, 0xF8	; 248
    8f28:	5f e3       	ldi	r21, 0x3F	; 63
    8f2a:	c5 01       	movw	r24, r10
    8f2c:	b4 01       	movw	r22, r8
    8f2e:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8f32:	9b 01       	movw	r18, r22
    8f34:	ac 01       	movw	r20, r24
    8f36:	c7 01       	movw	r24, r14
    8f38:	b6 01       	movw	r22, r12
    8f3a:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8f3e:	20 e0       	ldi	r18, 0x00	; 0
    8f40:	30 e0       	ldi	r19, 0x00	; 0
    8f42:	40 e8       	ldi	r20, 0x80	; 128
    8f44:	51 e4       	ldi	r21, 0x41	; 65
    8f46:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8f4a:	6b 01       	movw	r12, r22
    8f4c:	7c 01       	movw	r14, r24
    8f4e:	be 01       	movw	r22, r28
    8f50:	dd 0f       	add	r29, r29
    8f52:	88 0b       	sbc	r24, r24
    8f54:	99 0b       	sbc	r25, r25
    8f56:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    8f5a:	9b 01       	movw	r18, r22
    8f5c:	ac 01       	movw	r20, r24
    8f5e:	c7 01       	movw	r24, r14
    8f60:	b6 01       	movw	r22, r12
    8f62:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8f66:	b8 c5       	rjmp	.+2928   	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    8f68:	20 e0       	ldi	r18, 0x00	; 0
    8f6a:	30 e0       	ldi	r19, 0x00	; 0
    8f6c:	40 e6       	ldi	r20, 0x60	; 96
    8f6e:	51 e4       	ldi	r21, 0x41	; 65
    8f70:	c7 01       	movw	r24, r14
    8f72:	b6 01       	movw	r22, r12
    8f74:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    8f78:	18 16       	cp	r1, r24
    8f7a:	0c f0       	brlt	.+2      	; 0x8f7e <corectTrv+0xe88>
    8f7c:	54 c0       	rjmp	.+168    	; 0x9026 <corectTrv+0xf30>
    8f7e:	20 e0       	ldi	r18, 0x00	; 0
    8f80:	30 e0       	ldi	r19, 0x00	; 0
    8f82:	40 e7       	ldi	r20, 0x70	; 112
    8f84:	51 e4       	ldi	r21, 0x41	; 65
    8f86:	c7 01       	movw	r24, r14
    8f88:	b6 01       	movw	r22, r12
    8f8a:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    8f8e:	18 16       	cp	r1, r24
    8f90:	0c f4       	brge	.+2      	; 0x8f94 <corectTrv+0xe9e>
    8f92:	49 c0       	rjmp	.+146    	; 0x9026 <corectTrv+0xf30>
		{
			return( 0.01598 * ds * ds * ds + 0.35913 * ds * ds + 2.90559 * ds + 17.70294)* k;
    8f94:	2d e7       	ldi	r18, 0x7D	; 125
    8f96:	38 ee       	ldi	r19, 0xE8	; 232
    8f98:	42 e8       	ldi	r20, 0x82	; 130
    8f9a:	5c e3       	ldi	r21, 0x3C	; 60
    8f9c:	c5 01       	movw	r24, r10
    8f9e:	b4 01       	movw	r22, r8
    8fa0:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8fa4:	a5 01       	movw	r20, r10
    8fa6:	94 01       	movw	r18, r8
    8fa8:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8fac:	a5 01       	movw	r20, r10
    8fae:	94 01       	movw	r18, r8
    8fb0:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8fb4:	6b 01       	movw	r12, r22
    8fb6:	7c 01       	movw	r14, r24
    8fb8:	23 ee       	ldi	r18, 0xE3	; 227
    8fba:	3f ed       	ldi	r19, 0xDF	; 223
    8fbc:	47 eb       	ldi	r20, 0xB7	; 183
    8fbe:	5e e3       	ldi	r21, 0x3E	; 62
    8fc0:	c5 01       	movw	r24, r10
    8fc2:	b4 01       	movw	r22, r8
    8fc4:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8fc8:	a5 01       	movw	r20, r10
    8fca:	94 01       	movw	r18, r8
    8fcc:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8fd0:	9b 01       	movw	r18, r22
    8fd2:	ac 01       	movw	r20, r24
    8fd4:	c7 01       	movw	r24, r14
    8fd6:	b6 01       	movw	r22, r12
    8fd8:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8fdc:	6b 01       	movw	r12, r22
    8fde:	7c 01       	movw	r14, r24
    8fe0:	20 e3       	ldi	r18, 0x30	; 48
    8fe2:	35 ef       	ldi	r19, 0xF5	; 245
    8fe4:	49 e3       	ldi	r20, 0x39	; 57
    8fe6:	50 e4       	ldi	r21, 0x40	; 64
    8fe8:	c5 01       	movw	r24, r10
    8fea:	b4 01       	movw	r22, r8
    8fec:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    8ff0:	9b 01       	movw	r18, r22
    8ff2:	ac 01       	movw	r20, r24
    8ff4:	c7 01       	movw	r24, r14
    8ff6:	b6 01       	movw	r22, r12
    8ff8:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    8ffc:	2f e9       	ldi	r18, 0x9F	; 159
    8ffe:	3f e9       	ldi	r19, 0x9F	; 159
    9000:	4d e8       	ldi	r20, 0x8D	; 141
    9002:	51 e4       	ldi	r21, 0x41	; 65
    9004:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    9008:	6b 01       	movw	r12, r22
    900a:	7c 01       	movw	r14, r24
    900c:	be 01       	movw	r22, r28
    900e:	dd 0f       	add	r29, r29
    9010:	88 0b       	sbc	r24, r24
    9012:	99 0b       	sbc	r25, r25
    9014:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    9018:	9b 01       	movw	r18, r22
    901a:	ac 01       	movw	r20, r24
    901c:	c7 01       	movw	r24, r14
    901e:	b6 01       	movw	r22, r12
    9020:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9024:	59 c5       	rjmp	.+2738   	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    9026:	20 e0       	ldi	r18, 0x00	; 0
    9028:	30 e0       	ldi	r19, 0x00	; 0
    902a:	40 e7       	ldi	r20, 0x70	; 112
    902c:	51 e4       	ldi	r21, 0x41	; 65
    902e:	c7 01       	movw	r24, r14
    9030:	b6 01       	movw	r22, r12
    9032:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    9036:	18 16       	cp	r1, r24
    9038:	0c f0       	brlt	.+2      	; 0x903c <corectTrv+0xf46>
    903a:	54 c0       	rjmp	.+168    	; 0x90e4 <corectTrv+0xfee>
    903c:	20 e0       	ldi	r18, 0x00	; 0
    903e:	30 e0       	ldi	r19, 0x00	; 0
    9040:	40 e8       	ldi	r20, 0x80	; 128
    9042:	51 e4       	ldi	r21, 0x41	; 65
    9044:	c7 01       	movw	r24, r14
    9046:	b6 01       	movw	r22, r12
    9048:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    904c:	18 16       	cp	r1, r24
    904e:	0c f4       	brge	.+2      	; 0x9052 <corectTrv+0xf5c>
    9050:	49 c0       	rjmp	.+146    	; 0x90e4 <corectTrv+0xfee>
		{
			return( 0.02358 * ds * ds * ds + 0.48252 * ds * ds + 3.36313 * ds + 20.09441)* k;
    9052:	28 ed       	ldi	r18, 0xD8	; 216
    9054:	3a e2       	ldi	r19, 0x2A	; 42
    9056:	41 ec       	ldi	r20, 0xC1	; 193
    9058:	5c e3       	ldi	r21, 0x3C	; 60
    905a:	c5 01       	movw	r24, r10
    905c:	b4 01       	movw	r22, r8
    905e:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9062:	a5 01       	movw	r20, r10
    9064:	94 01       	movw	r18, r8
    9066:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    906a:	a5 01       	movw	r20, r10
    906c:	94 01       	movw	r18, r8
    906e:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9072:	6b 01       	movw	r12, r22
    9074:	7c 01       	movw	r14, r24
    9076:	2d ed       	ldi	r18, 0xDD	; 221
    9078:	3c e0       	ldi	r19, 0x0C	; 12
    907a:	47 ef       	ldi	r20, 0xF7	; 247
    907c:	5e e3       	ldi	r21, 0x3E	; 62
    907e:	c5 01       	movw	r24, r10
    9080:	b4 01       	movw	r22, r8
    9082:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9086:	a5 01       	movw	r20, r10
    9088:	94 01       	movw	r18, r8
    908a:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    908e:	9b 01       	movw	r18, r22
    9090:	ac 01       	movw	r20, r24
    9092:	c7 01       	movw	r24, r14
    9094:	b6 01       	movw	r22, r12
    9096:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    909a:	6b 01       	movw	r12, r22
    909c:	7c 01       	movw	r14, r24
    909e:	26 e8       	ldi	r18, 0x86	; 134
    90a0:	3d e3       	ldi	r19, 0x3D	; 61
    90a2:	47 e5       	ldi	r20, 0x57	; 87
    90a4:	50 e4       	ldi	r21, 0x40	; 64
    90a6:	c5 01       	movw	r24, r10
    90a8:	b4 01       	movw	r22, r8
    90aa:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    90ae:	9b 01       	movw	r18, r22
    90b0:	ac 01       	movw	r20, r24
    90b2:	c7 01       	movw	r24, r14
    90b4:	b6 01       	movw	r22, r12
    90b6:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    90ba:	2a e5       	ldi	r18, 0x5A	; 90
    90bc:	31 ec       	ldi	r19, 0xC1	; 193
    90be:	40 ea       	ldi	r20, 0xA0	; 160
    90c0:	51 e4       	ldi	r21, 0x41	; 65
    90c2:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    90c6:	6b 01       	movw	r12, r22
    90c8:	7c 01       	movw	r14, r24
    90ca:	be 01       	movw	r22, r28
    90cc:	dd 0f       	add	r29, r29
    90ce:	88 0b       	sbc	r24, r24
    90d0:	99 0b       	sbc	r25, r25
    90d2:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    90d6:	9b 01       	movw	r18, r22
    90d8:	ac 01       	movw	r20, r24
    90da:	c7 01       	movw	r24, r14
    90dc:	b6 01       	movw	r22, r12
    90de:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    90e2:	fa c4       	rjmp	.+2548   	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 9)
    90e4:	20 e0       	ldi	r18, 0x00	; 0
    90e6:	30 e0       	ldi	r19, 0x00	; 0
    90e8:	40 e8       	ldi	r20, 0x80	; 128
    90ea:	51 e4       	ldi	r21, 0x41	; 65
    90ec:	c7 01       	movw	r24, r14
    90ee:	b6 01       	movw	r22, r12
    90f0:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    90f4:	18 16       	cp	r1, r24
    90f6:	0c f0       	brlt	.+2      	; 0x90fa <corectTrv+0x1004>
    90f8:	e0 c4       	rjmp	.+2496   	; 0x9aba <corectTrv+0x19c4>
		{
			return( 0.01076 * ds * ds * ds + 0.28823 * ds * ds + 2.82362 * ds + 25.08042)* k;
    90fa:	26 eb       	ldi	r18, 0xB6	; 182
    90fc:	3a e4       	ldi	r19, 0x4A	; 74
    90fe:	40 e3       	ldi	r20, 0x30	; 48
    9100:	5c e3       	ldi	r21, 0x3C	; 60
    9102:	c5 01       	movw	r24, r10
    9104:	b4 01       	movw	r22, r8
    9106:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    910a:	a5 01       	movw	r20, r10
    910c:	94 01       	movw	r18, r8
    910e:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9112:	a5 01       	movw	r20, r10
    9114:	94 01       	movw	r18, r8
    9116:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    911a:	6b 01       	movw	r12, r22
    911c:	7c 01       	movw	r14, r24
    911e:	22 ee       	ldi	r18, 0xE2	; 226
    9120:	32 e9       	ldi	r19, 0x92	; 146
    9122:	43 e9       	ldi	r20, 0x93	; 147
    9124:	5e e3       	ldi	r21, 0x3E	; 62
    9126:	c5 01       	movw	r24, r10
    9128:	b4 01       	movw	r22, r8
    912a:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    912e:	a5 01       	movw	r20, r10
    9130:	94 01       	movw	r18, r8
    9132:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9136:	9b 01       	movw	r18, r22
    9138:	ac 01       	movw	r20, r24
    913a:	c7 01       	movw	r24, r14
    913c:	b6 01       	movw	r22, r12
    913e:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    9142:	6b 01       	movw	r12, r22
    9144:	7c 01       	movw	r14, r24
    9146:	21 e3       	ldi	r18, 0x31	; 49
    9148:	36 eb       	ldi	r19, 0xB6	; 182
    914a:	44 e3       	ldi	r20, 0x34	; 52
    914c:	50 e4       	ldi	r21, 0x40	; 64
    914e:	c5 01       	movw	r24, r10
    9150:	b4 01       	movw	r22, r8
    9152:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9156:	9b 01       	movw	r18, r22
    9158:	ac 01       	movw	r20, r24
    915a:	c7 01       	movw	r24, r14
    915c:	b6 01       	movw	r22, r12
    915e:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    9162:	23 eb       	ldi	r18, 0xB3	; 179
    9164:	34 ea       	ldi	r19, 0xA4	; 164
    9166:	48 ec       	ldi	r20, 0xC8	; 200
    9168:	51 e4       	ldi	r21, 0x41	; 65
    916a:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    916e:	6b 01       	movw	r12, r22
    9170:	7c 01       	movw	r14, r24
    9172:	be 01       	movw	r22, r28
    9174:	dd 0f       	add	r29, r29
    9176:	88 0b       	sbc	r24, r24
    9178:	99 0b       	sbc	r25, r25
    917a:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    917e:	9b 01       	movw	r18, r22
    9180:	ac 01       	movw	r20, r24
    9182:	c7 01       	movw	r24, r14
    9184:	b6 01       	movw	r22, r12
    9186:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    918a:	a6 c4       	rjmp	.+2380   	; 0x9ad8 <corectTrv+0x19e2>
		}
	}

	else if (ds >= 0 && ds <= 10)
    918c:	20 e0       	ldi	r18, 0x00	; 0
    918e:	30 e0       	ldi	r19, 0x00	; 0
    9190:	a9 01       	movw	r20, r18
    9192:	c5 01       	movw	r24, r10
    9194:	b4 01       	movw	r22, r8
    9196:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    919a:	88 23       	and	r24, r24
    919c:	0c f4       	brge	.+2      	; 0x91a0 <corectTrv+0x10aa>
    919e:	e9 c2       	rjmp	.+1490   	; 0x9772 <corectTrv+0x167c>
    91a0:	20 e0       	ldi	r18, 0x00	; 0
    91a2:	30 e0       	ldi	r19, 0x00	; 0
    91a4:	40 e2       	ldi	r20, 0x20	; 32
    91a6:	51 e4       	ldi	r21, 0x41	; 65
    91a8:	c5 01       	movw	r24, r10
    91aa:	b4 01       	movw	r22, r8
    91ac:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    91b0:	18 16       	cp	r1, r24
    91b2:	0c f4       	brge	.+2      	; 0x91b6 <corectTrv+0x10c0>
    91b4:	de c2       	rjmp	.+1468   	; 0x9772 <corectTrv+0x167c>
	{
		if (Superheat == SSet)
    91b6:	20 e0       	ldi	r18, 0x00	; 0
    91b8:	30 e0       	ldi	r19, 0x00	; 0
    91ba:	40 ee       	ldi	r20, 0xE0	; 224
    91bc:	50 e4       	ldi	r21, 0x40	; 64
    91be:	c7 01       	movw	r24, r14
    91c0:	b6 01       	movw	r22, r12
    91c2:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    91c6:	81 11       	cpse	r24, r1
    91c8:	2b c0       	rjmp	.+86     	; 0x9220 <corectTrv+0x112a>
		{
			return( -2 * .00001 * ds * ds + 1.406 * ds)* k;
    91ca:	2c ea       	ldi	r18, 0xAC	; 172
    91cc:	35 ec       	ldi	r19, 0xC5	; 197
    91ce:	47 ea       	ldi	r20, 0xA7	; 167
    91d0:	57 eb       	ldi	r21, 0xB7	; 183
    91d2:	c5 01       	movw	r24, r10
    91d4:	b4 01       	movw	r22, r8
    91d6:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    91da:	a5 01       	movw	r20, r10
    91dc:	94 01       	movw	r18, r8
    91de:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    91e2:	6b 01       	movw	r12, r22
    91e4:	7c 01       	movw	r14, r24
    91e6:	2f ec       	ldi	r18, 0xCF	; 207
    91e8:	37 ef       	ldi	r19, 0xF7	; 247
    91ea:	43 eb       	ldi	r20, 0xB3	; 179
    91ec:	5f e3       	ldi	r21, 0x3F	; 63
    91ee:	c5 01       	movw	r24, r10
    91f0:	b4 01       	movw	r22, r8
    91f2:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    91f6:	9b 01       	movw	r18, r22
    91f8:	ac 01       	movw	r20, r24
    91fa:	c7 01       	movw	r24, r14
    91fc:	b6 01       	movw	r22, r12
    91fe:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    9202:	6b 01       	movw	r12, r22
    9204:	7c 01       	movw	r14, r24
    9206:	be 01       	movw	r22, r28
    9208:	dd 0f       	add	r29, r29
    920a:	88 0b       	sbc	r24, r24
    920c:	99 0b       	sbc	r25, r25
    920e:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    9212:	9b 01       	movw	r18, r22
    9214:	ac 01       	movw	r20, r24
    9216:	c7 01       	movw	r24, r14
    9218:	b6 01       	movw	r22, r12
    921a:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    921e:	5c c4       	rjmp	.+2232   	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    9220:	20 e0       	ldi	r18, 0x00	; 0
    9222:	30 e0       	ldi	r19, 0x00	; 0
    9224:	40 ee       	ldi	r20, 0xE0	; 224
    9226:	50 e4       	ldi	r21, 0x40	; 64
    9228:	c7 01       	movw	r24, r14
    922a:	b6 01       	movw	r22, r12
    922c:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    9230:	18 16       	cp	r1, r24
    9232:	dc f5       	brge	.+118    	; 0x92aa <corectTrv+0x11b4>
    9234:	20 e0       	ldi	r18, 0x00	; 0
    9236:	30 e0       	ldi	r19, 0x00	; 0
    9238:	40 e0       	ldi	r20, 0x00	; 0
    923a:	51 e4       	ldi	r21, 0x41	; 65
    923c:	c7 01       	movw	r24, r14
    923e:	b6 01       	movw	r22, r12
    9240:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    9244:	18 16       	cp	r1, r24
    9246:	8c f1       	brlt	.+98     	; 0x92aa <corectTrv+0x11b4>
		{
			return( 0.062 * ds * ds + 0.570 * ds + 3.280)* k;
    9248:	26 eb       	ldi	r18, 0xB6	; 182
    924a:	33 ef       	ldi	r19, 0xF3	; 243
    924c:	4d e7       	ldi	r20, 0x7D	; 125
    924e:	5d e3       	ldi	r21, 0x3D	; 61
    9250:	c5 01       	movw	r24, r10
    9252:	b4 01       	movw	r22, r8
    9254:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9258:	a5 01       	movw	r20, r10
    925a:	94 01       	movw	r18, r8
    925c:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9260:	6b 01       	movw	r12, r22
    9262:	7c 01       	movw	r14, r24
    9264:	25 e8       	ldi	r18, 0x85	; 133
    9266:	3b ee       	ldi	r19, 0xEB	; 235
    9268:	41 e1       	ldi	r20, 0x11	; 17
    926a:	5f e3       	ldi	r21, 0x3F	; 63
    926c:	c5 01       	movw	r24, r10
    926e:	b4 01       	movw	r22, r8
    9270:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9274:	9b 01       	movw	r18, r22
    9276:	ac 01       	movw	r20, r24
    9278:	c7 01       	movw	r24, r14
    927a:	b6 01       	movw	r22, r12
    927c:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    9280:	25 e8       	ldi	r18, 0x85	; 133
    9282:	3b ee       	ldi	r19, 0xEB	; 235
    9284:	41 e5       	ldi	r20, 0x51	; 81
    9286:	50 e4       	ldi	r21, 0x40	; 64
    9288:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    928c:	6b 01       	movw	r12, r22
    928e:	7c 01       	movw	r14, r24
    9290:	be 01       	movw	r22, r28
    9292:	dd 0f       	add	r29, r29
    9294:	88 0b       	sbc	r24, r24
    9296:	99 0b       	sbc	r25, r25
    9298:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    929c:	9b 01       	movw	r18, r22
    929e:	ac 01       	movw	r20, r24
    92a0:	c7 01       	movw	r24, r14
    92a2:	b6 01       	movw	r22, r12
    92a4:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    92a8:	17 c4       	rjmp	.+2094   	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    92aa:	20 e0       	ldi	r18, 0x00	; 0
    92ac:	30 e0       	ldi	r19, 0x00	; 0
    92ae:	40 e0       	ldi	r20, 0x00	; 0
    92b0:	51 e4       	ldi	r21, 0x41	; 65
    92b2:	c7 01       	movw	r24, r14
    92b4:	b6 01       	movw	r22, r12
    92b6:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    92ba:	18 16       	cp	r1, r24
    92bc:	dc f5       	brge	.+118    	; 0x9334 <corectTrv+0x123e>
    92be:	20 e0       	ldi	r18, 0x00	; 0
    92c0:	30 e0       	ldi	r19, 0x00	; 0
    92c2:	40 e1       	ldi	r20, 0x10	; 16
    92c4:	51 e4       	ldi	r21, 0x41	; 65
    92c6:	c7 01       	movw	r24, r14
    92c8:	b6 01       	movw	r22, r12
    92ca:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    92ce:	18 16       	cp	r1, r24
    92d0:	8c f1       	brlt	.+98     	; 0x9334 <corectTrv+0x123e>
		{
			return( 0.099 * ds * ds - 0.019 * ds + 6.338)* k;
    92d2:	23 e8       	ldi	r18, 0x83	; 131
    92d4:	30 ec       	ldi	r19, 0xC0	; 192
    92d6:	4a ec       	ldi	r20, 0xCA	; 202
    92d8:	5d e3       	ldi	r21, 0x3D	; 61
    92da:	c5 01       	movw	r24, r10
    92dc:	b4 01       	movw	r22, r8
    92de:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    92e2:	a5 01       	movw	r20, r10
    92e4:	94 01       	movw	r18, r8
    92e6:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    92ea:	6b 01       	movw	r12, r22
    92ec:	7c 01       	movw	r14, r24
    92ee:	23 ee       	ldi	r18, 0xE3	; 227
    92f0:	35 ea       	ldi	r19, 0xA5	; 165
    92f2:	4b e9       	ldi	r20, 0x9B	; 155
    92f4:	5c e3       	ldi	r21, 0x3C	; 60
    92f6:	c5 01       	movw	r24, r10
    92f8:	b4 01       	movw	r22, r8
    92fa:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    92fe:	9b 01       	movw	r18, r22
    9300:	ac 01       	movw	r20, r24
    9302:	c7 01       	movw	r24, r14
    9304:	b6 01       	movw	r22, r12
    9306:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    930a:	25 ee       	ldi	r18, 0xE5	; 229
    930c:	30 ed       	ldi	r19, 0xD0	; 208
    930e:	4a ec       	ldi	r20, 0xCA	; 202
    9310:	50 e4       	ldi	r21, 0x40	; 64
    9312:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    9316:	6b 01       	movw	r12, r22
    9318:	7c 01       	movw	r14, r24
    931a:	be 01       	movw	r22, r28
    931c:	dd 0f       	add	r29, r29
    931e:	88 0b       	sbc	r24, r24
    9320:	99 0b       	sbc	r25, r25
    9322:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    9326:	9b 01       	movw	r18, r22
    9328:	ac 01       	movw	r20, r24
    932a:	c7 01       	movw	r24, r14
    932c:	b6 01       	movw	r22, r12
    932e:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9332:	d2 c3       	rjmp	.+1956   	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    9334:	20 e0       	ldi	r18, 0x00	; 0
    9336:	30 e0       	ldi	r19, 0x00	; 0
    9338:	40 e1       	ldi	r20, 0x10	; 16
    933a:	51 e4       	ldi	r21, 0x41	; 65
    933c:	c7 01       	movw	r24, r14
    933e:	b6 01       	movw	r22, r12
    9340:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    9344:	18 16       	cp	r1, r24
    9346:	dc f5       	brge	.+118    	; 0x93be <corectTrv+0x12c8>
    9348:	20 e0       	ldi	r18, 0x00	; 0
    934a:	30 e0       	ldi	r19, 0x00	; 0
    934c:	40 e2       	ldi	r20, 0x20	; 32
    934e:	51 e4       	ldi	r21, 0x41	; 65
    9350:	c7 01       	movw	r24, r14
    9352:	b6 01       	movw	r22, r12
    9354:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    9358:	18 16       	cp	r1, r24
    935a:	8c f1       	brlt	.+98     	; 0x93be <corectTrv+0x12c8>
		{
			return( 0.121 * ds * ds - 0.409 * ds + 9.164)* k;
    935c:	29 ed       	ldi	r18, 0xD9	; 217
    935e:	3e ec       	ldi	r19, 0xCE	; 206
    9360:	47 ef       	ldi	r20, 0xF7	; 247
    9362:	5d e3       	ldi	r21, 0x3D	; 61
    9364:	c5 01       	movw	r24, r10
    9366:	b4 01       	movw	r22, r8
    9368:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    936c:	a5 01       	movw	r20, r10
    936e:	94 01       	movw	r18, r8
    9370:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9374:	6b 01       	movw	r12, r22
    9376:	7c 01       	movw	r14, r24
    9378:	23 e7       	ldi	r18, 0x73	; 115
    937a:	38 e6       	ldi	r19, 0x68	; 104
    937c:	41 ed       	ldi	r20, 0xD1	; 209
    937e:	5e e3       	ldi	r21, 0x3E	; 62
    9380:	c5 01       	movw	r24, r10
    9382:	b4 01       	movw	r22, r8
    9384:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9388:	9b 01       	movw	r18, r22
    938a:	ac 01       	movw	r20, r24
    938c:	c7 01       	movw	r24, r14
    938e:	b6 01       	movw	r22, r12
    9390:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    9394:	2e eb       	ldi	r18, 0xBE	; 190
    9396:	3f e9       	ldi	r19, 0x9F	; 159
    9398:	42 e1       	ldi	r20, 0x12	; 18
    939a:	51 e4       	ldi	r21, 0x41	; 65
    939c:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    93a0:	6b 01       	movw	r12, r22
    93a2:	7c 01       	movw	r14, r24
    93a4:	be 01       	movw	r22, r28
    93a6:	dd 0f       	add	r29, r29
    93a8:	88 0b       	sbc	r24, r24
    93aa:	99 0b       	sbc	r25, r25
    93ac:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    93b0:	9b 01       	movw	r18, r22
    93b2:	ac 01       	movw	r20, r24
    93b4:	c7 01       	movw	r24, r14
    93b6:	b6 01       	movw	r22, r12
    93b8:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    93bc:	8d c3       	rjmp	.+1818   	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    93be:	20 e0       	ldi	r18, 0x00	; 0
    93c0:	30 e0       	ldi	r19, 0x00	; 0
    93c2:	40 e2       	ldi	r20, 0x20	; 32
    93c4:	51 e4       	ldi	r21, 0x41	; 65
    93c6:	c7 01       	movw	r24, r14
    93c8:	b6 01       	movw	r22, r12
    93ca:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    93ce:	18 16       	cp	r1, r24
    93d0:	dc f5       	brge	.+118    	; 0x9448 <corectTrv+0x1352>
    93d2:	20 e0       	ldi	r18, 0x00	; 0
    93d4:	30 e0       	ldi	r19, 0x00	; 0
    93d6:	40 e3       	ldi	r20, 0x30	; 48
    93d8:	51 e4       	ldi	r21, 0x41	; 65
    93da:	c7 01       	movw	r24, r14
    93dc:	b6 01       	movw	r22, r12
    93de:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    93e2:	18 16       	cp	r1, r24
    93e4:	8c f1       	brlt	.+98     	; 0x9448 <corectTrv+0x1352>
		{
			return( 0.128 * ds * ds - 0.340 * ds + 11.4)* k;
    93e6:	2f e6       	ldi	r18, 0x6F	; 111
    93e8:	32 e1       	ldi	r19, 0x12	; 18
    93ea:	43 e0       	ldi	r20, 0x03	; 3
    93ec:	5e e3       	ldi	r21, 0x3E	; 62
    93ee:	c5 01       	movw	r24, r10
    93f0:	b4 01       	movw	r22, r8
    93f2:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    93f6:	a5 01       	movw	r20, r10
    93f8:	94 01       	movw	r18, r8
    93fa:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    93fe:	6b 01       	movw	r12, r22
    9400:	7c 01       	movw	r14, r24
    9402:	2b e7       	ldi	r18, 0x7B	; 123
    9404:	34 e1       	ldi	r19, 0x14	; 20
    9406:	4e ea       	ldi	r20, 0xAE	; 174
    9408:	5e e3       	ldi	r21, 0x3E	; 62
    940a:	c5 01       	movw	r24, r10
    940c:	b4 01       	movw	r22, r8
    940e:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9412:	9b 01       	movw	r18, r22
    9414:	ac 01       	movw	r20, r24
    9416:	c7 01       	movw	r24, r14
    9418:	b6 01       	movw	r22, r12
    941a:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    941e:	26 e6       	ldi	r18, 0x66	; 102
    9420:	36 e6       	ldi	r19, 0x66	; 102
    9422:	46 e3       	ldi	r20, 0x36	; 54
    9424:	51 e4       	ldi	r21, 0x41	; 65
    9426:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    942a:	6b 01       	movw	r12, r22
    942c:	7c 01       	movw	r14, r24
    942e:	be 01       	movw	r22, r28
    9430:	dd 0f       	add	r29, r29
    9432:	88 0b       	sbc	r24, r24
    9434:	99 0b       	sbc	r25, r25
    9436:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    943a:	9b 01       	movw	r18, r22
    943c:	ac 01       	movw	r20, r24
    943e:	c7 01       	movw	r24, r14
    9440:	b6 01       	movw	r22, r12
    9442:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9446:	48 c3       	rjmp	.+1680   	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    9448:	20 e0       	ldi	r18, 0x00	; 0
    944a:	30 e0       	ldi	r19, 0x00	; 0
    944c:	40 e3       	ldi	r20, 0x30	; 48
    944e:	51 e4       	ldi	r21, 0x41	; 65
    9450:	c7 01       	movw	r24, r14
    9452:	b6 01       	movw	r22, r12
    9454:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    9458:	18 16       	cp	r1, r24
    945a:	dc f5       	brge	.+118    	; 0x94d2 <corectTrv+0x13dc>
    945c:	20 e0       	ldi	r18, 0x00	; 0
    945e:	30 e0       	ldi	r19, 0x00	; 0
    9460:	40 e4       	ldi	r20, 0x40	; 64
    9462:	51 e4       	ldi	r21, 0x41	; 65
    9464:	c7 01       	movw	r24, r14
    9466:	b6 01       	movw	r22, r12
    9468:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    946c:	18 16       	cp	r1, r24
    946e:	8c f1       	brlt	.+98     	; 0x94d2 <corectTrv+0x13dc>
		{
			return( 0.128 * ds * ds - 0.382 * ds + 15.51)* k;
    9470:	2f e6       	ldi	r18, 0x6F	; 111
    9472:	32 e1       	ldi	r19, 0x12	; 18
    9474:	43 e0       	ldi	r20, 0x03	; 3
    9476:	5e e3       	ldi	r21, 0x3E	; 62
    9478:	c5 01       	movw	r24, r10
    947a:	b4 01       	movw	r22, r8
    947c:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9480:	a5 01       	movw	r20, r10
    9482:	94 01       	movw	r18, r8
    9484:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9488:	6b 01       	movw	r12, r22
    948a:	7c 01       	movw	r14, r24
    948c:	21 e8       	ldi	r18, 0x81	; 129
    948e:	35 e9       	ldi	r19, 0x95	; 149
    9490:	43 ec       	ldi	r20, 0xC3	; 195
    9492:	5e e3       	ldi	r21, 0x3E	; 62
    9494:	c5 01       	movw	r24, r10
    9496:	b4 01       	movw	r22, r8
    9498:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    949c:	9b 01       	movw	r18, r22
    949e:	ac 01       	movw	r20, r24
    94a0:	c7 01       	movw	r24, r14
    94a2:	b6 01       	movw	r22, r12
    94a4:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    94a8:	26 ef       	ldi	r18, 0xF6	; 246
    94aa:	38 e2       	ldi	r19, 0x28	; 40
    94ac:	48 e7       	ldi	r20, 0x78	; 120
    94ae:	51 e4       	ldi	r21, 0x41	; 65
    94b0:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    94b4:	6b 01       	movw	r12, r22
    94b6:	7c 01       	movw	r14, r24
    94b8:	be 01       	movw	r22, r28
    94ba:	dd 0f       	add	r29, r29
    94bc:	88 0b       	sbc	r24, r24
    94be:	99 0b       	sbc	r25, r25
    94c0:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    94c4:	9b 01       	movw	r18, r22
    94c6:	ac 01       	movw	r20, r24
    94c8:	c7 01       	movw	r24, r14
    94ca:	b6 01       	movw	r22, r12
    94cc:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    94d0:	03 c3       	rjmp	.+1542   	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    94d2:	20 e0       	ldi	r18, 0x00	; 0
    94d4:	30 e0       	ldi	r19, 0x00	; 0
    94d6:	40 e4       	ldi	r20, 0x40	; 64
    94d8:	51 e4       	ldi	r21, 0x41	; 65
    94da:	c7 01       	movw	r24, r14
    94dc:	b6 01       	movw	r22, r12
    94de:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    94e2:	18 16       	cp	r1, r24
    94e4:	dc f5       	brge	.+118    	; 0x955c <corectTrv+0x1466>
    94e6:	20 e0       	ldi	r18, 0x00	; 0
    94e8:	30 e0       	ldi	r19, 0x00	; 0
    94ea:	40 e5       	ldi	r20, 0x50	; 80
    94ec:	51 e4       	ldi	r21, 0x41	; 65
    94ee:	c7 01       	movw	r24, r14
    94f0:	b6 01       	movw	r22, r12
    94f2:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    94f6:	18 16       	cp	r1, r24
    94f8:	8c f1       	brlt	.+98     	; 0x955c <corectTrv+0x1466>
		{
			return( 0.128 * ds * ds - 0.382 * ds + 15.51)* k;
    94fa:	2f e6       	ldi	r18, 0x6F	; 111
    94fc:	32 e1       	ldi	r19, 0x12	; 18
    94fe:	43 e0       	ldi	r20, 0x03	; 3
    9500:	5e e3       	ldi	r21, 0x3E	; 62
    9502:	c5 01       	movw	r24, r10
    9504:	b4 01       	movw	r22, r8
    9506:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    950a:	a5 01       	movw	r20, r10
    950c:	94 01       	movw	r18, r8
    950e:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9512:	6b 01       	movw	r12, r22
    9514:	7c 01       	movw	r14, r24
    9516:	21 e8       	ldi	r18, 0x81	; 129
    9518:	35 e9       	ldi	r19, 0x95	; 149
    951a:	43 ec       	ldi	r20, 0xC3	; 195
    951c:	5e e3       	ldi	r21, 0x3E	; 62
    951e:	c5 01       	movw	r24, r10
    9520:	b4 01       	movw	r22, r8
    9522:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9526:	9b 01       	movw	r18, r22
    9528:	ac 01       	movw	r20, r24
    952a:	c7 01       	movw	r24, r14
    952c:	b6 01       	movw	r22, r12
    952e:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    9532:	26 ef       	ldi	r18, 0xF6	; 246
    9534:	38 e2       	ldi	r19, 0x28	; 40
    9536:	48 e7       	ldi	r20, 0x78	; 120
    9538:	51 e4       	ldi	r21, 0x41	; 65
    953a:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    953e:	6b 01       	movw	r12, r22
    9540:	7c 01       	movw	r14, r24
    9542:	be 01       	movw	r22, r28
    9544:	dd 0f       	add	r29, r29
    9546:	88 0b       	sbc	r24, r24
    9548:	99 0b       	sbc	r25, r25
    954a:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    954e:	9b 01       	movw	r18, r22
    9550:	ac 01       	movw	r20, r24
    9552:	c7 01       	movw	r24, r14
    9554:	b6 01       	movw	r22, r12
    9556:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    955a:	be c2       	rjmp	.+1404   	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    955c:	20 e0       	ldi	r18, 0x00	; 0
    955e:	30 e0       	ldi	r19, 0x00	; 0
    9560:	40 e5       	ldi	r20, 0x50	; 80
    9562:	51 e4       	ldi	r21, 0x41	; 65
    9564:	c7 01       	movw	r24, r14
    9566:	b6 01       	movw	r22, r12
    9568:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    956c:	18 16       	cp	r1, r24
    956e:	dc f5       	brge	.+118    	; 0x95e6 <corectTrv+0x14f0>
    9570:	20 e0       	ldi	r18, 0x00	; 0
    9572:	30 e0       	ldi	r19, 0x00	; 0
    9574:	40 e6       	ldi	r20, 0x60	; 96
    9576:	51 e4       	ldi	r21, 0x41	; 65
    9578:	c7 01       	movw	r24, r14
    957a:	b6 01       	movw	r22, r12
    957c:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    9580:	18 16       	cp	r1, r24
    9582:	8c f1       	brlt	.+98     	; 0x95e6 <corectTrv+0x14f0>
		{
			return( 0.137 * ds * ds - 0.652 * ds + 16.63)* k;
    9584:	2a eb       	ldi	r18, 0xBA	; 186
    9586:	39 e4       	ldi	r19, 0x49	; 73
    9588:	4c e0       	ldi	r20, 0x0C	; 12
    958a:	5e e3       	ldi	r21, 0x3E	; 62
    958c:	c5 01       	movw	r24, r10
    958e:	b4 01       	movw	r22, r8
    9590:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9594:	a5 01       	movw	r20, r10
    9596:	94 01       	movw	r18, r8
    9598:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    959c:	6b 01       	movw	r12, r22
    959e:	7c 01       	movw	r14, r24
    95a0:	29 e7       	ldi	r18, 0x79	; 121
    95a2:	39 ee       	ldi	r19, 0xE9	; 233
    95a4:	46 e2       	ldi	r20, 0x26	; 38
    95a6:	5f e3       	ldi	r21, 0x3F	; 63
    95a8:	c5 01       	movw	r24, r10
    95aa:	b4 01       	movw	r22, r8
    95ac:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    95b0:	9b 01       	movw	r18, r22
    95b2:	ac 01       	movw	r20, r24
    95b4:	c7 01       	movw	r24, r14
    95b6:	b6 01       	movw	r22, r12
    95b8:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    95bc:	2d e3       	ldi	r18, 0x3D	; 61
    95be:	3a e0       	ldi	r19, 0x0A	; 10
    95c0:	45 e8       	ldi	r20, 0x85	; 133
    95c2:	51 e4       	ldi	r21, 0x41	; 65
    95c4:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    95c8:	6b 01       	movw	r12, r22
    95ca:	7c 01       	movw	r14, r24
    95cc:	be 01       	movw	r22, r28
    95ce:	dd 0f       	add	r29, r29
    95d0:	88 0b       	sbc	r24, r24
    95d2:	99 0b       	sbc	r25, r25
    95d4:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    95d8:	9b 01       	movw	r18, r22
    95da:	ac 01       	movw	r20, r24
    95dc:	c7 01       	movw	r24, r14
    95de:	b6 01       	movw	r22, r12
    95e0:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    95e4:	79 c2       	rjmp	.+1266   	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    95e6:	20 e0       	ldi	r18, 0x00	; 0
    95e8:	30 e0       	ldi	r19, 0x00	; 0
    95ea:	40 e6       	ldi	r20, 0x60	; 96
    95ec:	51 e4       	ldi	r21, 0x41	; 65
    95ee:	c7 01       	movw	r24, r14
    95f0:	b6 01       	movw	r22, r12
    95f2:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    95f6:	18 16       	cp	r1, r24
    95f8:	dc f5       	brge	.+118    	; 0x9670 <corectTrv+0x157a>
    95fa:	20 e0       	ldi	r18, 0x00	; 0
    95fc:	30 e0       	ldi	r19, 0x00	; 0
    95fe:	40 e7       	ldi	r20, 0x70	; 112
    9600:	51 e4       	ldi	r21, 0x41	; 65
    9602:	c7 01       	movw	r24, r14
    9604:	b6 01       	movw	r22, r12
    9606:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    960a:	18 16       	cp	r1, r24
    960c:	8c f1       	brlt	.+98     	; 0x9670 <corectTrv+0x157a>
		{
			return( 0.142 * ds * ds - 0.630 * ds + 17.7)* k;
    960e:	23 e7       	ldi	r18, 0x73	; 115
    9610:	38 e6       	ldi	r19, 0x68	; 104
    9612:	41 e1       	ldi	r20, 0x11	; 17
    9614:	5e e3       	ldi	r21, 0x3E	; 62
    9616:	c5 01       	movw	r24, r10
    9618:	b4 01       	movw	r22, r8
    961a:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    961e:	a5 01       	movw	r20, r10
    9620:	94 01       	movw	r18, r8
    9622:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9626:	6b 01       	movw	r12, r22
    9628:	7c 01       	movw	r14, r24
    962a:	2e ea       	ldi	r18, 0xAE	; 174
    962c:	37 e4       	ldi	r19, 0x47	; 71
    962e:	41 e2       	ldi	r20, 0x21	; 33
    9630:	5f e3       	ldi	r21, 0x3F	; 63
    9632:	c5 01       	movw	r24, r10
    9634:	b4 01       	movw	r22, r8
    9636:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    963a:	9b 01       	movw	r18, r22
    963c:	ac 01       	movw	r20, r24
    963e:	c7 01       	movw	r24, r14
    9640:	b6 01       	movw	r22, r12
    9642:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    9646:	2a e9       	ldi	r18, 0x9A	; 154
    9648:	39 e9       	ldi	r19, 0x99	; 153
    964a:	4d e8       	ldi	r20, 0x8D	; 141
    964c:	51 e4       	ldi	r21, 0x41	; 65
    964e:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    9652:	6b 01       	movw	r12, r22
    9654:	7c 01       	movw	r14, r24
    9656:	be 01       	movw	r22, r28
    9658:	dd 0f       	add	r29, r29
    965a:	88 0b       	sbc	r24, r24
    965c:	99 0b       	sbc	r25, r25
    965e:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    9662:	9b 01       	movw	r18, r22
    9664:	ac 01       	movw	r20, r24
    9666:	c7 01       	movw	r24, r14
    9668:	b6 01       	movw	r22, r12
    966a:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    966e:	34 c2       	rjmp	.+1128   	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    9670:	20 e0       	ldi	r18, 0x00	; 0
    9672:	30 e0       	ldi	r19, 0x00	; 0
    9674:	40 e7       	ldi	r20, 0x70	; 112
    9676:	51 e4       	ldi	r21, 0x41	; 65
    9678:	c7 01       	movw	r24, r14
    967a:	b6 01       	movw	r22, r12
    967c:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    9680:	18 16       	cp	r1, r24
    9682:	dc f5       	brge	.+118    	; 0x96fa <corectTrv+0x1604>
    9684:	20 e0       	ldi	r18, 0x00	; 0
    9686:	30 e0       	ldi	r19, 0x00	; 0
    9688:	40 e8       	ldi	r20, 0x80	; 128
    968a:	51 e4       	ldi	r21, 0x41	; 65
    968c:	c7 01       	movw	r24, r14
    968e:	b6 01       	movw	r22, r12
    9690:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    9694:	18 16       	cp	r1, r24
    9696:	8c f1       	brlt	.+98     	; 0x96fa <corectTrv+0x1604>
		{
			return( 0.126 * ds * ds - 0.683 * ds + 20.4)* k;
    9698:	25 e2       	ldi	r18, 0x25	; 37
    969a:	36 e0       	ldi	r19, 0x06	; 6
    969c:	41 e0       	ldi	r20, 0x01	; 1
    969e:	5e e3       	ldi	r21, 0x3E	; 62
    96a0:	c5 01       	movw	r24, r10
    96a2:	b4 01       	movw	r22, r8
    96a4:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    96a8:	a5 01       	movw	r20, r10
    96aa:	94 01       	movw	r18, r8
    96ac:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    96b0:	6b 01       	movw	r12, r22
    96b2:	7c 01       	movw	r14, r24
    96b4:	27 e1       	ldi	r18, 0x17	; 23
    96b6:	39 ed       	ldi	r19, 0xD9	; 217
    96b8:	4e e2       	ldi	r20, 0x2E	; 46
    96ba:	5f e3       	ldi	r21, 0x3F	; 63
    96bc:	c5 01       	movw	r24, r10
    96be:	b4 01       	movw	r22, r8
    96c0:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    96c4:	9b 01       	movw	r18, r22
    96c6:	ac 01       	movw	r20, r24
    96c8:	c7 01       	movw	r24, r14
    96ca:	b6 01       	movw	r22, r12
    96cc:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    96d0:	23 e3       	ldi	r18, 0x33	; 51
    96d2:	33 e3       	ldi	r19, 0x33	; 51
    96d4:	43 ea       	ldi	r20, 0xA3	; 163
    96d6:	51 e4       	ldi	r21, 0x41	; 65
    96d8:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    96dc:	6b 01       	movw	r12, r22
    96de:	7c 01       	movw	r14, r24
    96e0:	be 01       	movw	r22, r28
    96e2:	dd 0f       	add	r29, r29
    96e4:	88 0b       	sbc	r24, r24
    96e6:	99 0b       	sbc	r25, r25
    96e8:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    96ec:	9b 01       	movw	r18, r22
    96ee:	ac 01       	movw	r20, r24
    96f0:	c7 01       	movw	r24, r14
    96f2:	b6 01       	movw	r22, r12
    96f4:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    96f8:	ef c1       	rjmp	.+990    	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 9)
    96fa:	20 e0       	ldi	r18, 0x00	; 0
    96fc:	30 e0       	ldi	r19, 0x00	; 0
    96fe:	40 e8       	ldi	r20, 0x80	; 128
    9700:	51 e4       	ldi	r21, 0x41	; 65
    9702:	c7 01       	movw	r24, r14
    9704:	b6 01       	movw	r22, r12
    9706:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    970a:	18 16       	cp	r1, r24
    970c:	0c f0       	brlt	.+2      	; 0x9710 <corectTrv+0x161a>
    970e:	d9 c1       	rjmp	.+946    	; 0x9ac2 <corectTrv+0x19cc>
		{
			return( 0.027 * ds * ds - 0.277 * ds + 25.29)* k;
    9710:	2b e1       	ldi	r18, 0x1B	; 27
    9712:	3f e2       	ldi	r19, 0x2F	; 47
    9714:	4d ed       	ldi	r20, 0xDD	; 221
    9716:	5c e3       	ldi	r21, 0x3C	; 60
    9718:	c5 01       	movw	r24, r10
    971a:	b4 01       	movw	r22, r8
    971c:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9720:	a5 01       	movw	r20, r10
    9722:	94 01       	movw	r18, r8
    9724:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9728:	6b 01       	movw	r12, r22
    972a:	7c 01       	movw	r14, r24
    972c:	22 ef       	ldi	r18, 0xF2	; 242
    972e:	32 ed       	ldi	r19, 0xD2	; 210
    9730:	4d e8       	ldi	r20, 0x8D	; 141
    9732:	5e e3       	ldi	r21, 0x3E	; 62
    9734:	c5 01       	movw	r24, r10
    9736:	b4 01       	movw	r22, r8
    9738:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    973c:	9b 01       	movw	r18, r22
    973e:	ac 01       	movw	r20, r24
    9740:	c7 01       	movw	r24, r14
    9742:	b6 01       	movw	r22, r12
    9744:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    9748:	2c ee       	ldi	r18, 0xEC	; 236
    974a:	31 e5       	ldi	r19, 0x51	; 81
    974c:	4a ec       	ldi	r20, 0xCA	; 202
    974e:	51 e4       	ldi	r21, 0x41	; 65
    9750:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    9754:	6b 01       	movw	r12, r22
    9756:	7c 01       	movw	r14, r24
    9758:	be 01       	movw	r22, r28
    975a:	dd 0f       	add	r29, r29
    975c:	88 0b       	sbc	r24, r24
    975e:	99 0b       	sbc	r25, r25
    9760:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    9764:	9b 01       	movw	r18, r22
    9766:	ac 01       	movw	r20, r24
    9768:	c7 01       	movw	r24, r14
    976a:	b6 01       	movw	r22, r12
    976c:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9770:	b3 c1       	rjmp	.+870    	; 0x9ad8 <corectTrv+0x19e2>
		}
	}

	else if (ds > 10)
    9772:	20 e0       	ldi	r18, 0x00	; 0
    9774:	30 e0       	ldi	r19, 0x00	; 0
    9776:	40 e2       	ldi	r20, 0x20	; 32
    9778:	51 e4       	ldi	r21, 0x41	; 65
    977a:	c5 01       	movw	r24, r10
    977c:	b4 01       	movw	r22, r8
    977e:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    9782:	18 16       	cp	r1, r24
    9784:	0c f0       	brlt	.+2      	; 0x9788 <corectTrv+0x1692>
    9786:	a1 c1       	rjmp	.+834    	; 0x9aca <corectTrv+0x19d4>
    9788:	08 c0       	rjmp	.+16     	; 0x979a <corectTrv+0x16a4>
	
	Superheat_old = Superheat;
	
	if (ds > 20)
	{
		ds = 20;
    978a:	0f 2e       	mov	r0, r31
    978c:	81 2c       	mov	r8, r1
    978e:	91 2c       	mov	r9, r1
    9790:	f0 ea       	ldi	r31, 0xA0	; 160
    9792:	af 2e       	mov	r10, r31
    9794:	f1 e4       	ldi	r31, 0x41	; 65
    9796:	bf 2e       	mov	r11, r31
    9798:	f0 2d       	mov	r31, r0
		}
	}

	else if (ds > 10)
	{
		if (Superheat == SSet)
    979a:	20 e0       	ldi	r18, 0x00	; 0
    979c:	30 e0       	ldi	r19, 0x00	; 0
    979e:	40 ee       	ldi	r20, 0xE0	; 224
    97a0:	50 e4       	ldi	r21, 0x40	; 64
    97a2:	c7 01       	movw	r24, r14
    97a4:	b6 01       	movw	r22, r12
    97a6:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    97aa:	81 11       	cpse	r24, r1
    97ac:	31 c0       	rjmp	.+98     	; 0x9810 <corectTrv+0x171a>
		{
			return( 0.137 * ds * ds - 3.245 * ds + 34.51)* k;
    97ae:	2a eb       	ldi	r18, 0xBA	; 186
    97b0:	39 e4       	ldi	r19, 0x49	; 73
    97b2:	4c e0       	ldi	r20, 0x0C	; 12
    97b4:	5e e3       	ldi	r21, 0x3E	; 62
    97b6:	c5 01       	movw	r24, r10
    97b8:	b4 01       	movw	r22, r8
    97ba:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    97be:	a5 01       	movw	r20, r10
    97c0:	94 01       	movw	r18, r8
    97c2:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    97c6:	6b 01       	movw	r12, r22
    97c8:	7c 01       	movw	r14, r24
    97ca:	24 e1       	ldi	r18, 0x14	; 20
    97cc:	3e ea       	ldi	r19, 0xAE	; 174
    97ce:	4f e4       	ldi	r20, 0x4F	; 79
    97d0:	50 e4       	ldi	r21, 0x40	; 64
    97d2:	c5 01       	movw	r24, r10
    97d4:	b4 01       	movw	r22, r8
    97d6:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    97da:	9b 01       	movw	r18, r22
    97dc:	ac 01       	movw	r20, r24
    97de:	c7 01       	movw	r24, r14
    97e0:	b6 01       	movw	r22, r12
    97e2:	0e 94 34 54 	call	0xa868	; 0xa868 <__subsf3>
    97e6:	2d e3       	ldi	r18, 0x3D	; 61
    97e8:	3a e0       	ldi	r19, 0x0A	; 10
    97ea:	4a e0       	ldi	r20, 0x0A	; 10
    97ec:	52 e4       	ldi	r21, 0x42	; 66
    97ee:	0e 94 35 54 	call	0xa86a	; 0xa86a <__addsf3>
    97f2:	6b 01       	movw	r12, r22
    97f4:	7c 01       	movw	r14, r24
    97f6:	be 01       	movw	r22, r28
    97f8:	dd 0f       	add	r29, r29
    97fa:	88 0b       	sbc	r24, r24
    97fc:	99 0b       	sbc	r25, r25
    97fe:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    9802:	9b 01       	movw	r18, r22
    9804:	ac 01       	movw	r20, r24
    9806:	c7 01       	movw	r24, r14
    9808:	b6 01       	movw	r22, r12
    980a:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    980e:	64 c1       	rjmp	.+712    	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    9810:	20 e0       	ldi	r18, 0x00	; 0
    9812:	30 e0       	ldi	r19, 0x00	; 0
    9814:	40 ee       	ldi	r20, 0xE0	; 224
    9816:	50 e4       	ldi	r21, 0x40	; 64
    9818:	c7 01       	movw	r24, r14
    981a:	b6 01       	movw	r22, r12
    981c:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    9820:	18 16       	cp	r1, r24
    9822:	cc f5       	brge	.+114    	; 0x9896 <corectTrv+0x17a0>
    9824:	20 e0       	ldi	r18, 0x00	; 0
    9826:	30 e0       	ldi	r19, 0x00	; 0
    9828:	40 e0       	ldi	r20, 0x00	; 0
    982a:	51 e4       	ldi	r21, 0x41	; 65
    982c:	c7 01       	movw	r24, r14
    982e:	b6 01       	movw	r22, r12
    9830:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    9834:	18 16       	cp	r1, r24
    9836:	7c f1       	brlt	.+94     	; 0x9896 <corectTrv+0x17a0>
		{
			return( 0.137 * ds * ds - 3.245 * ds + 34.51)* k;
    9838:	2a eb       	ldi	r18, 0xBA	; 186
    983a:	39 e4       	ldi	r19, 0x49	; 73
    983c:	4c e0       	ldi	r20, 0x0C	; 12
    983e:	5e e3       	ldi	r21, 0x3E	; 62
    9840:	c5 01       	movw	r24, r10
    9842:	b4 01       	movw	r22, r8
    9844:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9848:	a5 01       	movw	r20, r10
    984a:	94 01       	movw	r18, r8
    984c:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9850:	6b 01       	movw	r12, r22
    9852:	7c 01       	movw	r14, r24
    9854:	24 e1       	ldi	r18, 0x14	; 20
    9856:	3e ea       	ldi	r19, 0xAE	; 174
    9858:	4f e4       	ldi	r20, 0x4F	; 79
    985a:	50 e4       	ldi	r21, 0x40	; 64
    985c:	c5 01       	movw	r24, r10
    985e:	b4 01       	movw	r22, r8
    9860:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9864:	9b 01       	movw	r18, r22
    9866:	ac 01       	movw	r20, r24
    9868:	c7 01       	movw	r24, r14
    986a:	b6 01       	movw	r22, r12
    986c:	fd d7       	rcall	.+4090   	; 0xa868 <__subsf3>
    986e:	2d e3       	ldi	r18, 0x3D	; 61
    9870:	3a e0       	ldi	r19, 0x0A	; 10
    9872:	4a e0       	ldi	r20, 0x0A	; 10
    9874:	52 e4       	ldi	r21, 0x42	; 66
    9876:	f9 d7       	rcall	.+4082   	; 0xa86a <__addsf3>
    9878:	6b 01       	movw	r12, r22
    987a:	7c 01       	movw	r14, r24
    987c:	be 01       	movw	r22, r28
    987e:	dd 0f       	add	r29, r29
    9880:	88 0b       	sbc	r24, r24
    9882:	99 0b       	sbc	r25, r25
    9884:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    9888:	9b 01       	movw	r18, r22
    988a:	ac 01       	movw	r20, r24
    988c:	c7 01       	movw	r24, r14
    988e:	b6 01       	movw	r22, r12
    9890:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9894:	21 c1       	rjmp	.+578    	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    9896:	20 e0       	ldi	r18, 0x00	; 0
    9898:	30 e0       	ldi	r19, 0x00	; 0
    989a:	40 e0       	ldi	r20, 0x00	; 0
    989c:	51 e4       	ldi	r21, 0x41	; 65
    989e:	c7 01       	movw	r24, r14
    98a0:	b6 01       	movw	r22, r12
    98a2:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    98a6:	18 16       	cp	r1, r24
    98a8:	cc f5       	brge	.+114    	; 0x991c <corectTrv+0x1826>
    98aa:	20 e0       	ldi	r18, 0x00	; 0
    98ac:	30 e0       	ldi	r19, 0x00	; 0
    98ae:	40 e1       	ldi	r20, 0x10	; 16
    98b0:	51 e4       	ldi	r21, 0x41	; 65
    98b2:	c7 01       	movw	r24, r14
    98b4:	b6 01       	movw	r22, r12
    98b6:	0e 94 99 54 	call	0xa932	; 0xa932 <__cmpsf2>
    98ba:	18 16       	cp	r1, r24
    98bc:	7c f1       	brlt	.+94     	; 0x991c <corectTrv+0x1826>
		{
			return( 0.158 * ds * ds - 4.086 * ds + 42.41)* k;
    98be:	21 ec       	ldi	r18, 0xC1	; 193
    98c0:	3a ec       	ldi	r19, 0xCA	; 202
    98c2:	41 e2       	ldi	r20, 0x21	; 33
    98c4:	5e e3       	ldi	r21, 0x3E	; 62
    98c6:	c5 01       	movw	r24, r10
    98c8:	b4 01       	movw	r22, r8
    98ca:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    98ce:	a5 01       	movw	r20, r10
    98d0:	94 01       	movw	r18, r8
    98d2:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    98d6:	6b 01       	movw	r12, r22
    98d8:	7c 01       	movw	r14, r24
    98da:	23 e8       	ldi	r18, 0x83	; 131
    98dc:	30 ec       	ldi	r19, 0xC0	; 192
    98de:	42 e8       	ldi	r20, 0x82	; 130
    98e0:	50 e4       	ldi	r21, 0x40	; 64
    98e2:	c5 01       	movw	r24, r10
    98e4:	b4 01       	movw	r22, r8
    98e6:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    98ea:	9b 01       	movw	r18, r22
    98ec:	ac 01       	movw	r20, r24
    98ee:	c7 01       	movw	r24, r14
    98f0:	b6 01       	movw	r22, r12
    98f2:	ba d7       	rcall	.+3956   	; 0xa868 <__subsf3>
    98f4:	27 ed       	ldi	r18, 0xD7	; 215
    98f6:	33 ea       	ldi	r19, 0xA3	; 163
    98f8:	49 e2       	ldi	r20, 0x29	; 41
    98fa:	52 e4       	ldi	r21, 0x42	; 66
    98fc:	b6 d7       	rcall	.+3948   	; 0xa86a <__addsf3>
    98fe:	6b 01       	movw	r12, r22
    9900:	7c 01       	movw	r14, r24
    9902:	be 01       	movw	r22, r28
    9904:	dd 0f       	add	r29, r29
    9906:	88 0b       	sbc	r24, r24
    9908:	99 0b       	sbc	r25, r25
    990a:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    990e:	9b 01       	movw	r18, r22
    9910:	ac 01       	movw	r20, r24
    9912:	c7 01       	movw	r24, r14
    9914:	b6 01       	movw	r22, r12
    9916:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    991a:	de c0       	rjmp	.+444    	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    991c:	20 e0       	ldi	r18, 0x00	; 0
    991e:	30 e0       	ldi	r19, 0x00	; 0
    9920:	40 e1       	ldi	r20, 0x10	; 16
    9922:	51 e4       	ldi	r21, 0x41	; 65
    9924:	c7 01       	movw	r24, r14
    9926:	b6 01       	movw	r22, r12
    9928:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    992c:	18 16       	cp	r1, r24
    992e:	0c f0       	brlt	.+2      	; 0x9932 <corectTrv+0x183c>
    9930:	50 c0       	rjmp	.+160    	; 0x99d2 <corectTrv+0x18dc>
    9932:	20 e0       	ldi	r18, 0x00	; 0
    9934:	30 e0       	ldi	r19, 0x00	; 0
    9936:	40 e2       	ldi	r20, 0x20	; 32
    9938:	51 e4       	ldi	r21, 0x41	; 65
    993a:	c7 01       	movw	r24, r14
    993c:	b6 01       	movw	r22, r12
    993e:	f9 d7       	rcall	.+4082   	; 0xa932 <__cmpsf2>
    9940:	18 16       	cp	r1, r24
    9942:	0c f4       	brge	.+2      	; 0x9946 <corectTrv+0x1850>
    9944:	46 c0       	rjmp	.+140    	; 0x99d2 <corectTrv+0x18dc>
		{
			return( 0.027 * ds * ds * ds - 1.086 * ds * ds + 14.32 * ds - 44.48)* k;
    9946:	2b e1       	ldi	r18, 0x1B	; 27
    9948:	3f e2       	ldi	r19, 0x2F	; 47
    994a:	4d ed       	ldi	r20, 0xDD	; 221
    994c:	5c e3       	ldi	r21, 0x3C	; 60
    994e:	c5 01       	movw	r24, r10
    9950:	b4 01       	movw	r22, r8
    9952:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9956:	a5 01       	movw	r20, r10
    9958:	94 01       	movw	r18, r8
    995a:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    995e:	a5 01       	movw	r20, r10
    9960:	94 01       	movw	r18, r8
    9962:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9966:	6b 01       	movw	r12, r22
    9968:	7c 01       	movw	r14, r24
    996a:	2c e0       	ldi	r18, 0x0C	; 12
    996c:	32 e0       	ldi	r19, 0x02	; 2
    996e:	4b e8       	ldi	r20, 0x8B	; 139
    9970:	5f e3       	ldi	r21, 0x3F	; 63
    9972:	c5 01       	movw	r24, r10
    9974:	b4 01       	movw	r22, r8
    9976:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    997a:	a5 01       	movw	r20, r10
    997c:	94 01       	movw	r18, r8
    997e:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9982:	9b 01       	movw	r18, r22
    9984:	ac 01       	movw	r20, r24
    9986:	c7 01       	movw	r24, r14
    9988:	b6 01       	movw	r22, r12
    998a:	6e d7       	rcall	.+3804   	; 0xa868 <__subsf3>
    998c:	6b 01       	movw	r12, r22
    998e:	7c 01       	movw	r14, r24
    9990:	28 eb       	ldi	r18, 0xB8	; 184
    9992:	3e e1       	ldi	r19, 0x1E	; 30
    9994:	45 e6       	ldi	r20, 0x65	; 101
    9996:	51 e4       	ldi	r21, 0x41	; 65
    9998:	c5 01       	movw	r24, r10
    999a:	b4 01       	movw	r22, r8
    999c:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    99a0:	9b 01       	movw	r18, r22
    99a2:	ac 01       	movw	r20, r24
    99a4:	c7 01       	movw	r24, r14
    99a6:	b6 01       	movw	r22, r12
    99a8:	60 d7       	rcall	.+3776   	; 0xa86a <__addsf3>
    99aa:	25 e8       	ldi	r18, 0x85	; 133
    99ac:	3b ee       	ldi	r19, 0xEB	; 235
    99ae:	41 e3       	ldi	r20, 0x31	; 49
    99b0:	52 e4       	ldi	r21, 0x42	; 66
    99b2:	5a d7       	rcall	.+3764   	; 0xa868 <__subsf3>
    99b4:	6b 01       	movw	r12, r22
    99b6:	7c 01       	movw	r14, r24
    99b8:	be 01       	movw	r22, r28
    99ba:	dd 0f       	add	r29, r29
    99bc:	88 0b       	sbc	r24, r24
    99be:	99 0b       	sbc	r25, r25
    99c0:	0e 94 38 55 	call	0xaa70	; 0xaa70 <__floatsisf>
    99c4:	9b 01       	movw	r18, r22
    99c6:	ac 01       	movw	r20, r24
    99c8:	c7 01       	movw	r24, r14
    99ca:	b6 01       	movw	r22, r12
    99cc:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    99d0:	83 c0       	rjmp	.+262    	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    99d2:	20 e0       	ldi	r18, 0x00	; 0
    99d4:	30 e0       	ldi	r19, 0x00	; 0
    99d6:	40 e2       	ldi	r20, 0x20	; 32
    99d8:	51 e4       	ldi	r21, 0x41	; 65
    99da:	c7 01       	movw	r24, r14
    99dc:	b6 01       	movw	r22, r12
    99de:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    99e2:	18 16       	cp	r1, r24
    99e4:	0c f0       	brlt	.+2      	; 0x99e8 <corectTrv+0x18f2>
    99e6:	4f c0       	rjmp	.+158    	; 0x9a86 <corectTrv+0x1990>
    99e8:	20 e0       	ldi	r18, 0x00	; 0
    99ea:	30 e0       	ldi	r19, 0x00	; 0
    99ec:	40 e3       	ldi	r20, 0x30	; 48
    99ee:	51 e4       	ldi	r21, 0x41	; 65
    99f0:	c7 01       	movw	r24, r14
    99f2:	b6 01       	movw	r22, r12
    99f4:	9e d7       	rcall	.+3900   	; 0xa932 <__cmpsf2>
    99f6:	18 16       	cp	r1, r24
    99f8:	0c f4       	brge	.+2      	; 0x99fc <corectTrv+0x1906>
    99fa:	45 c0       	rjmp	.+138    	; 0x9a86 <corectTrv+0x1990>
		{
			return( 0.026 * ds * ds * ds - 1.084 * ds * ds + 14.27 * ds - 40.99)* k;
    99fc:	24 ef       	ldi	r18, 0xF4	; 244
    99fe:	3d ef       	ldi	r19, 0xFD	; 253
    9a00:	44 ed       	ldi	r20, 0xD4	; 212
    9a02:	5c e3       	ldi	r21, 0x3C	; 60
    9a04:	c5 01       	movw	r24, r10
    9a06:	b4 01       	movw	r22, r8
    9a08:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9a0c:	a5 01       	movw	r20, r10
    9a0e:	94 01       	movw	r18, r8
    9a10:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9a14:	a5 01       	movw	r20, r10
    9a16:	94 01       	movw	r18, r8
    9a18:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9a1c:	6b 01       	movw	r12, r22
    9a1e:	7c 01       	movw	r14, r24
    9a20:	23 e8       	ldi	r18, 0x83	; 131
    9a22:	30 ec       	ldi	r19, 0xC0	; 192
    9a24:	4a e8       	ldi	r20, 0x8A	; 138
    9a26:	5f e3       	ldi	r21, 0x3F	; 63
    9a28:	c5 01       	movw	r24, r10
    9a2a:	b4 01       	movw	r22, r8
    9a2c:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9a30:	a5 01       	movw	r20, r10
    9a32:	94 01       	movw	r18, r8
    9a34:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9a38:	9b 01       	movw	r18, r22
    9a3a:	ac 01       	movw	r20, r24
    9a3c:	c7 01       	movw	r24, r14
    9a3e:	b6 01       	movw	r22, r12
    9a40:	13 d7       	rcall	.+3622   	; 0xa868 <__subsf3>
    9a42:	6b 01       	movw	r12, r22
    9a44:	7c 01       	movw	r14, r24
    9a46:	2c ee       	ldi	r18, 0xEC	; 236
    9a48:	31 e5       	ldi	r19, 0x51	; 81
    9a4a:	44 e6       	ldi	r20, 0x64	; 100
    9a4c:	51 e4       	ldi	r21, 0x41	; 65
    9a4e:	c5 01       	movw	r24, r10
    9a50:	b4 01       	movw	r22, r8
    9a52:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9a56:	9b 01       	movw	r18, r22
    9a58:	ac 01       	movw	r20, r24
    9a5a:	c7 01       	movw	r24, r14
    9a5c:	b6 01       	movw	r22, r12
    9a5e:	05 d7       	rcall	.+3594   	; 0xa86a <__addsf3>
    9a60:	23 ec       	ldi	r18, 0xC3	; 195
    9a62:	35 ef       	ldi	r19, 0xF5	; 245
    9a64:	43 e2       	ldi	r20, 0x23	; 35
    9a66:	52 e4       	ldi	r21, 0x42	; 66
    9a68:	ff d6       	rcall	.+3582   	; 0xa868 <__subsf3>
    9a6a:	6b 01       	movw	r12, r22
    9a6c:	7c 01       	movw	r14, r24
    9a6e:	be 01       	movw	r22, r28
    9a70:	dd 0f       	add	r29, r29
    9a72:	88 0b       	sbc	r24, r24
    9a74:	99 0b       	sbc	r25, r25
    9a76:	fc d7       	rcall	.+4088   	; 0xaa70 <__floatsisf>
    9a78:	9b 01       	movw	r18, r22
    9a7a:	ac 01       	movw	r20, r24
    9a7c:	c7 01       	movw	r24, r14
    9a7e:	b6 01       	movw	r22, r12
    9a80:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9a84:	29 c0       	rjmp	.+82     	; 0x9ad8 <corectTrv+0x19e2>
		}

		if (Superheat > SSet + 4)
    9a86:	20 e0       	ldi	r18, 0x00	; 0
    9a88:	30 e0       	ldi	r19, 0x00	; 0
    9a8a:	40 e3       	ldi	r20, 0x30	; 48
    9a8c:	51 e4       	ldi	r21, 0x41	; 65
    9a8e:	c7 01       	movw	r24, r14
    9a90:	b6 01       	movw	r22, r12
    9a92:	0e 94 e8 55 	call	0xabd0	; 0xabd0 <__gesf2>
    9a96:	18 16       	cp	r1, r24
    9a98:	e4 f4       	brge	.+56     	; 0x9ad2 <corectTrv+0x19dc>
		{
			return 25* k;
    9a9a:	89 e1       	ldi	r24, 0x19	; 25
    9a9c:	8c 9f       	mul	r24, r28
    9a9e:	b0 01       	movw	r22, r0
    9aa0:	8d 9f       	mul	r24, r29
    9aa2:	70 0d       	add	r23, r0
    9aa4:	11 24       	eor	r1, r1
    9aa6:	07 2e       	mov	r0, r23
    9aa8:	00 0c       	add	r0, r0
    9aaa:	88 0b       	sbc	r24, r24
    9aac:	99 0b       	sbc	r25, r25
    9aae:	e0 d7       	rcall	.+4032   	; 0xaa70 <__floatsisf>
    9ab0:	13 c0       	rjmp	.+38     	; 0x9ad8 <corectTrv+0x19e2>
		}
	}

	
	return 0;
    9ab2:	60 e0       	ldi	r22, 0x00	; 0
    9ab4:	70 e0       	ldi	r23, 0x00	; 0
    9ab6:	cb 01       	movw	r24, r22
    9ab8:	0f c0       	rjmp	.+30     	; 0x9ad8 <corectTrv+0x19e2>
    9aba:	60 e0       	ldi	r22, 0x00	; 0
    9abc:	70 e0       	ldi	r23, 0x00	; 0
    9abe:	cb 01       	movw	r24, r22
    9ac0:	0b c0       	rjmp	.+22     	; 0x9ad8 <corectTrv+0x19e2>
    9ac2:	60 e0       	ldi	r22, 0x00	; 0
    9ac4:	70 e0       	ldi	r23, 0x00	; 0
    9ac6:	cb 01       	movw	r24, r22
    9ac8:	07 c0       	rjmp	.+14     	; 0x9ad8 <corectTrv+0x19e2>
    9aca:	60 e0       	ldi	r22, 0x00	; 0
    9acc:	70 e0       	ldi	r23, 0x00	; 0
    9ace:	cb 01       	movw	r24, r22
    9ad0:	03 c0       	rjmp	.+6      	; 0x9ad8 <corectTrv+0x19e2>
    9ad2:	60 e0       	ldi	r22, 0x00	; 0
    9ad4:	70 e0       	ldi	r23, 0x00	; 0
    9ad6:	cb 01       	movw	r24, r22

}
    9ad8:	df 91       	pop	r29
    9ada:	cf 91       	pop	r28
    9adc:	ff 90       	pop	r15
    9ade:	ef 90       	pop	r14
    9ae0:	df 90       	pop	r13
    9ae2:	cf 90       	pop	r12
    9ae4:	bf 90       	pop	r11
    9ae6:	af 90       	pop	r10
    9ae8:	9f 90       	pop	r9
    9aea:	8f 90       	pop	r8
    9aec:	7f 90       	pop	r7
    9aee:	6f 90       	pop	r6
    9af0:	5f 90       	pop	r5
    9af2:	4f 90       	pop	r4
    9af4:	08 95       	ret

00009af6 <ReadSensors>:
float ConvertToLowPress(uint16_t ADC_value){
	return (ADC_value - Low_Limit_LP) * LP_max/ (Hi_Limit_LP - Low_Limit_LP) ;
}

void ReadSensors(xCompressor *comp)  
{ 
    9af6:	ef 92       	push	r14
    9af8:	ff 92       	push	r15
    9afa:	0f 93       	push	r16
    9afc:	1f 93       	push	r17
    9afe:	cf 93       	push	r28
    9b00:	df 93       	push	r29
    9b02:	7c 01       	movw	r14, r24
 uint16_t temp = 0;
 const uint8_t samples = 10;        // determines the number of samples taken
 unsigned int sum;               // holds the summated samples
 uint8_t i;
 //static TickType_t countTrvTime=0;
 setAnalogMode(MODE_10_BIT);
    9b04:	80 e0       	ldi	r24, 0x00	; 0
    9b06:	0e 94 98 07 	call	0xf30	; 0xf30 <setAnalogMode>
    9b0a:	ca e0       	ldi	r28, 0x0A	; 10
 i = samples;                     // clean up for next channel
 sum = 0;
    9b0c:	00 e0       	ldi	r16, 0x00	; 0
    9b0e:	10 e0       	ldi	r17, 0x00	; 0
 
 do
 {
	 startAnalogConversion(1, 0);
    9b10:	60 e0       	ldi	r22, 0x00	; 0
    9b12:	81 e0       	ldi	r24, 0x01	; 1
    9b14:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
	 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9b18:	01 c0       	rjmp	.+2      	; 0x9b1c <ReadSensors+0x26>
    9b1a:	00 00       	nop
    9b1c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9b20:	81 11       	cpse	r24, r1
    9b22:	fb cf       	rjmp	.-10     	; 0x9b1a <ReadSensors+0x24>
	 sum += 	analogConversionResult();
    9b24:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9b28:	08 0f       	add	r16, r24
    9b2a:	19 1f       	adc	r17, r25
    9b2c:	c1 50       	subi	r28, 0x01	; 1
	 //temp =analogConversionResult();
 } while (--i);
    9b2e:	81 f7       	brne	.-32     	; 0x9b10 <ReadSensors+0x1a>
 temp = (unsigned int) (sum / samples);
 comp->Bac_Temp = ConvertToTemp(temp);
    9b30:	98 01       	movw	r18, r16
    9b32:	ad ec       	ldi	r26, 0xCD	; 205
    9b34:	bc ec       	ldi	r27, 0xCC	; 204
    9b36:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    9b3a:	96 95       	lsr	r25
    9b3c:	87 95       	ror	r24
    9b3e:	96 95       	lsr	r25
    9b40:	87 95       	ror	r24
    9b42:	96 95       	lsr	r25
    9b44:	87 95       	ror	r24
    9b46:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <ConvertToTemp>
    9b4a:	f7 01       	movw	r30, r14
    9b4c:	66 8b       	std	Z+22, r22	; 0x16
    9b4e:	77 8b       	std	Z+23, r23	; 0x17
    9b50:	80 8f       	std	Z+24, r24	; 0x18
    9b52:	91 8f       	std	Z+25, r25	; 0x19
 //read DHW
 PORTL &= ~ (1 << PL2);//A0
    9b54:	eb e0       	ldi	r30, 0x0B	; 11
    9b56:	f1 e0       	ldi	r31, 0x01	; 1
    9b58:	80 81       	ld	r24, Z
    9b5a:	8b 7f       	andi	r24, 0xFB	; 251
    9b5c:	80 83       	st	Z, r24
 PORTL &= ~ (1 << PL1);//A1
    9b5e:	80 81       	ld	r24, Z
    9b60:	8d 7f       	andi	r24, 0xFD	; 253
    9b62:	80 83       	st	Z, r24
 PORTL |=   (1 << PL0);//A2
    9b64:	80 81       	ld	r24, Z
    9b66:	81 60       	ori	r24, 0x01	; 1
    9b68:	80 83       	st	Z, r24
    9b6a:	ca e0       	ldi	r28, 0x0A	; 10
 i = samples;
 sum = 0;
    9b6c:	00 e0       	ldi	r16, 0x00	; 0
    9b6e:	10 e0       	ldi	r17, 0x00	; 0
 do
 {
	 startAnalogConversion(0, 0);
    9b70:	60 e0       	ldi	r22, 0x00	; 0
    9b72:	80 e0       	ldi	r24, 0x00	; 0
    9b74:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
	 while( analogIsConverting())_delay_us(25);// portYIELD();
    9b78:	01 c0       	rjmp	.+2      	; 0x9b7c <ReadSensors+0x86>
    9b7a:	00 00       	nop
    9b7c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9b80:	81 11       	cpse	r24, r1
    9b82:	fb cf       	rjmp	.-10     	; 0x9b7a <ReadSensors+0x84>
	 sum += 	analogConversionResult();
    9b84:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9b88:	08 0f       	add	r16, r24
    9b8a:	19 1f       	adc	r17, r25
    9b8c:	c1 50       	subi	r28, 0x01	; 1
 } while (--i);
    9b8e:	81 f7       	brne	.-32     	; 0x9b70 <ReadSensors+0x7a>
 //temp = analogConversionResult();
 temp = (unsigned int) (sum / samples);
 comp->Dhw_Temp = ConvertToTemp(temp);
    9b90:	98 01       	movw	r18, r16
    9b92:	ad ec       	ldi	r26, 0xCD	; 205
    9b94:	bc ec       	ldi	r27, 0xCC	; 204
    9b96:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    9b9a:	96 95       	lsr	r25
    9b9c:	87 95       	ror	r24
    9b9e:	96 95       	lsr	r25
    9ba0:	87 95       	ror	r24
    9ba2:	96 95       	lsr	r25
    9ba4:	87 95       	ror	r24
    9ba6:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <ConvertToTemp>
    9baa:	f7 01       	movw	r30, r14
    9bac:	62 8b       	std	Z+18, r22	; 0x12
    9bae:	73 8b       	std	Z+19, r23	; 0x13
    9bb0:	84 8b       	std	Z+20, r24	; 0x14
    9bb2:	95 8b       	std	Z+21, r25	; 0x15
 
 if(comp->Index==1){
    9bb4:	e2 59       	subi	r30, 0x92	; 146
    9bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    9bb8:	80 81       	ld	r24, Z
    9bba:	91 81       	ldd	r25, Z+1	; 0x01
    9bbc:	01 97       	sbiw	r24, 0x01	; 1
    9bbe:	09 f0       	breq	.+2      	; 0x9bc2 <ReadSensors+0xcc>
    9bc0:	9d c1       	rjmp	.+826    	; 0x9efc <ReadSensors+0x406>
	 
	 //read High_Pressure_1
	 PORTL |=    (1 << PL2);//a0
    9bc2:	eb e0       	ldi	r30, 0x0B	; 11
    9bc4:	f1 e0       	ldi	r31, 0x01	; 1
    9bc6:	80 81       	ld	r24, Z
    9bc8:	84 60       	ori	r24, 0x04	; 4
    9bca:	80 83       	st	Z, r24
	 PORTL |=    (1 << PL1);//a1
    9bcc:	80 81       	ld	r24, Z
    9bce:	82 60       	ori	r24, 0x02	; 2
    9bd0:	80 83       	st	Z, r24
	 PORTL &= ~  (1 << PL0);//a2
    9bd2:	80 81       	ld	r24, Z
    9bd4:	8e 7f       	andi	r24, 0xFE	; 254
    9bd6:	80 83       	st	Z, r24
    9bd8:	ca e0       	ldi	r28, 0x0A	; 10
	 i = samples;
	 sum = 0;
    9bda:	00 e0       	ldi	r16, 0x00	; 0
    9bdc:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {		     startAnalogConversion(0, 0);
    9bde:	60 e0       	ldi	r22, 0x00	; 0
    9be0:	80 e0       	ldi	r24, 0x00	; 0
    9be2:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() ) _delay_us(25);//portYIELD();
    9be6:	01 c0       	rjmp	.+2      	; 0x9bea <ReadSensors+0xf4>
    9be8:	00 00       	nop
    9bea:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9bee:	81 11       	cpse	r24, r1
    9bf0:	fb cf       	rjmp	.-10     	; 0x9be8 <ReadSensors+0xf2>
		 sum += analogConversionResult();
    9bf2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9bf6:	08 0f       	add	r16, r24
    9bf8:	19 1f       	adc	r17, r25
    9bfa:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9bfc:	81 f7       	brne	.-32     	; 0x9bde <ReadSensors+0xe8>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->High_Press = ConvertToHighPress(temp);
    9bfe:	98 01       	movw	r18, r16
    9c00:	ad ec       	ldi	r26, 0xCD	; 205
    9c02:	bc ec       	ldi	r27, 0xCC	; 204
    9c04:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    9c08:	96 95       	lsr	r25
    9c0a:	87 95       	ror	r24
    9c0c:	96 95       	lsr	r25
    9c0e:	87 95       	ror	r24
    9c10:	96 95       	lsr	r25
    9c12:	87 95       	ror	r24
    9c14:	bc 01       	movw	r22, r24
    9c16:	80 e0       	ldi	r24, 0x00	; 0
    9c18:	90 e0       	ldi	r25, 0x00	; 0
    9c1a:	28 d7       	rcall	.+3664   	; 0xaa6c <__floatunsisf>
    9c1c:	20 e0       	ldi	r18, 0x00	; 0
    9c1e:	30 e0       	ldi	r19, 0x00	; 0
    9c20:	4c ec       	ldi	r20, 0xCC	; 204
    9c22:	52 e4       	ldi	r21, 0x42	; 66
    9c24:	21 d6       	rcall	.+3138   	; 0xa868 <__subsf3>
    9c26:	20 e0       	ldi	r18, 0x00	; 0
    9c28:	30 e0       	ldi	r19, 0x00	; 0
    9c2a:	48 e0       	ldi	r20, 0x08	; 8
    9c2c:	52 e4       	ldi	r21, 0x42	; 66
    9c2e:	0e 94 31 56 	call	0xac62	; 0xac62 <__mulsf3>
    9c32:	20 e0       	ldi	r18, 0x00	; 0
    9c34:	30 e0       	ldi	r19, 0x00	; 0
    9c36:	4d e4       	ldi	r20, 0x4D	; 77
    9c38:	54 e4       	ldi	r21, 0x44	; 68
    9c3a:	7f d6       	rcall	.+3326   	; 0xa93a <__divsf3>
    9c3c:	f7 01       	movw	r30, r14
    9c3e:	62 8f       	std	Z+26, r22	; 0x1a
    9c40:	73 8f       	std	Z+27, r23	; 0x1b
    9c42:	84 8f       	std	Z+28, r24	; 0x1c
    9c44:	95 8f       	std	Z+29, r25	; 0x1d
	 //read Low_Pressure_1
	 PORTL &= ~   (1 << PL2);
    9c46:	eb e0       	ldi	r30, 0x0B	; 11
    9c48:	f1 e0       	ldi	r31, 0x01	; 1
    9c4a:	80 81       	ld	r24, Z
    9c4c:	8b 7f       	andi	r24, 0xFB	; 251
    9c4e:	80 83       	st	Z, r24
	 PORTL &= ~   (1 << PL1);
    9c50:	80 81       	ld	r24, Z
    9c52:	8d 7f       	andi	r24, 0xFD	; 253
    9c54:	80 83       	st	Z, r24
	 PORTL &= ~   (1 << PL0);
    9c56:	80 81       	ld	r24, Z
    9c58:	8e 7f       	andi	r24, 0xFE	; 254
    9c5a:	80 83       	st	Z, r24
    9c5c:	ca e0       	ldi	r28, 0x0A	; 10
	 i = samples;
	 sum = 0;
    9c5e:	00 e0       	ldi	r16, 0x00	; 0
    9c60:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(0, 0);
    9c62:	60 e0       	ldi	r22, 0x00	; 0
    9c64:	80 e0       	ldi	r24, 0x00	; 0
    9c66:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9c6a:	01 c0       	rjmp	.+2      	; 0x9c6e <ReadSensors+0x178>
    9c6c:	00 00       	nop
    9c6e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9c72:	81 11       	cpse	r24, r1
    9c74:	fb cf       	rjmp	.-10     	; 0x9c6c <ReadSensors+0x176>
		 sum += analogConversionResult();
    9c76:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9c7a:	08 0f       	add	r16, r24
    9c7c:	19 1f       	adc	r17, r25
    9c7e:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9c80:	81 f7       	brne	.-32     	; 0x9c62 <ReadSensors+0x16c>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Low_Press = ConvertToLowPress( temp );
    9c82:	98 01       	movw	r18, r16
    9c84:	ad ec       	ldi	r26, 0xCD	; 205
    9c86:	bc ec       	ldi	r27, 0xCC	; 204
    9c88:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    9c8c:	96 95       	lsr	r25
    9c8e:	87 95       	ror	r24
    9c90:	96 95       	lsr	r25
    9c92:	87 95       	ror	r24
    9c94:	96 95       	lsr	r25
    9c96:	87 95       	ror	r24
    9c98:	bc 01       	movw	r22, r24
    9c9a:	80 e0       	ldi	r24, 0x00	; 0
    9c9c:	90 e0       	ldi	r25, 0x00	; 0
    9c9e:	e6 d6       	rcall	.+3532   	; 0xaa6c <__floatunsisf>
    9ca0:	20 e0       	ldi	r18, 0x00	; 0
    9ca2:	30 e0       	ldi	r19, 0x00	; 0
    9ca4:	4c e5       	ldi	r20, 0x5C	; 92
    9ca6:	52 e4       	ldi	r21, 0x42	; 66
    9ca8:	df d5       	rcall	.+3006   	; 0xa868 <__subsf3>
    9caa:	20 e0       	ldi	r18, 0x00	; 0
    9cac:	30 e0       	ldi	r19, 0x00	; 0
    9cae:	40 e9       	ldi	r20, 0x90	; 144
    9cb0:	51 e4       	ldi	r21, 0x41	; 65
    9cb2:	d7 d7       	rcall	.+4014   	; 0xac62 <__mulsf3>
    9cb4:	20 e0       	ldi	r18, 0x00	; 0
    9cb6:	30 ec       	ldi	r19, 0xC0	; 192
    9cb8:	48 e5       	ldi	r20, 0x58	; 88
    9cba:	54 e4       	ldi	r21, 0x44	; 68
    9cbc:	3e d6       	rcall	.+3196   	; 0xa93a <__divsf3>
    9cbe:	f7 01       	movw	r30, r14
    9cc0:	66 8f       	std	Z+30, r22	; 0x1e
    9cc2:	77 8f       	std	Z+31, r23	; 0x1f
    9cc4:	80 a3       	std	Z+32, r24	; 0x20
    9cc6:	91 a3       	std	Z+33, r25	; 0x21
    9cc8:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9cca:	00 e0       	ldi	r16, 0x00	; 0
    9ccc:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(9, 0);
    9cce:	60 e0       	ldi	r22, 0x00	; 0
    9cd0:	89 e0       	ldi	r24, 0x09	; 9
    9cd2:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9cd6:	01 c0       	rjmp	.+2      	; 0x9cda <ReadSensors+0x1e4>
    9cd8:	00 00       	nop
    9cda:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9cde:	81 11       	cpse	r24, r1
    9ce0:	fb cf       	rjmp	.-10     	; 0x9cd8 <ReadSensors+0x1e2>
		 sum += analogConversionResult();
    9ce2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9ce6:	08 0f       	add	r16, r24
    9ce8:	19 1f       	adc	r17, r25
    9cea:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9cec:	81 f7       	brne	.-32     	; 0x9cce <ReadSensors+0x1d8>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Heat_Out = ConvertToTemp( temp );
    9cee:	98 01       	movw	r18, r16
    9cf0:	ad ec       	ldi	r26, 0xCD	; 205
    9cf2:	bc ec       	ldi	r27, 0xCC	; 204
    9cf4:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    9cf8:	96 95       	lsr	r25
    9cfa:	87 95       	ror	r24
    9cfc:	96 95       	lsr	r25
    9cfe:	87 95       	ror	r24
    9d00:	96 95       	lsr	r25
    9d02:	87 95       	ror	r24
    9d04:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <ConvertToTemp>
    9d08:	f7 01       	movw	r30, r14
    9d0a:	62 a7       	std	Z+42, r22	; 0x2a
    9d0c:	73 a7       	std	Z+43, r23	; 0x2b
    9d0e:	84 a7       	std	Z+44, r24	; 0x2c
    9d10:	95 a7       	std	Z+45, r25	; 0x2d
    9d12:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9d14:	00 e0       	ldi	r16, 0x00	; 0
    9d16:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(10, 0);
    9d18:	60 e0       	ldi	r22, 0x00	; 0
    9d1a:	8a e0       	ldi	r24, 0x0A	; 10
    9d1c:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9d20:	01 c0       	rjmp	.+2      	; 0x9d24 <ReadSensors+0x22e>
    9d22:	00 00       	nop
    9d24:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9d28:	81 11       	cpse	r24, r1
    9d2a:	fb cf       	rjmp	.-10     	; 0x9d22 <ReadSensors+0x22c>
		 sum += analogConversionResult();
    9d2c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9d30:	08 0f       	add	r16, r24
    9d32:	19 1f       	adc	r17, r25
    9d34:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9d36:	81 f7       	brne	.-32     	; 0x9d18 <ReadSensors+0x222>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Heat_In = ConvertToTemp( temp );
    9d38:	98 01       	movw	r18, r16
    9d3a:	ad ec       	ldi	r26, 0xCD	; 205
    9d3c:	bc ec       	ldi	r27, 0xCC	; 204
    9d3e:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    9d42:	96 95       	lsr	r25
    9d44:	87 95       	ror	r24
    9d46:	96 95       	lsr	r25
    9d48:	87 95       	ror	r24
    9d4a:	96 95       	lsr	r25
    9d4c:	87 95       	ror	r24
    9d4e:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <ConvertToTemp>
    9d52:	f7 01       	movw	r30, r14
    9d54:	66 a7       	std	Z+46, r22	; 0x2e
    9d56:	77 a7       	std	Z+47, r23	; 0x2f
    9d58:	80 ab       	std	Z+48, r24	; 0x30
    9d5a:	91 ab       	std	Z+49, r25	; 0x31
    9d5c:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9d5e:	00 e0       	ldi	r16, 0x00	; 0
    9d60:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(11, 0);
    9d62:	60 e0       	ldi	r22, 0x00	; 0
    9d64:	8b e0       	ldi	r24, 0x0B	; 11
    9d66:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9d6a:	01 c0       	rjmp	.+2      	; 0x9d6e <ReadSensors+0x278>
    9d6c:	00 00       	nop
    9d6e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9d72:	81 11       	cpse	r24, r1
    9d74:	fb cf       	rjmp	.-10     	; 0x9d6c <ReadSensors+0x276>
		 sum += analogConversionResult();
    9d76:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9d7a:	08 0f       	add	r16, r24
    9d7c:	19 1f       	adc	r17, r25
    9d7e:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9d80:	81 f7       	brne	.-32     	; 0x9d62 <ReadSensors+0x26c>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Src_In = ConvertToTemp( temp );
    9d82:	98 01       	movw	r18, r16
    9d84:	ad ec       	ldi	r26, 0xCD	; 205
    9d86:	bc ec       	ldi	r27, 0xCC	; 204
    9d88:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    9d8c:	96 95       	lsr	r25
    9d8e:	87 95       	ror	r24
    9d90:	96 95       	lsr	r25
    9d92:	87 95       	ror	r24
    9d94:	96 95       	lsr	r25
    9d96:	87 95       	ror	r24
    9d98:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <ConvertToTemp>
    9d9c:	f7 01       	movw	r30, r14
    9d9e:	62 ab       	std	Z+50, r22	; 0x32
    9da0:	73 ab       	std	Z+51, r23	; 0x33
    9da2:	84 ab       	std	Z+52, r24	; 0x34
    9da4:	95 ab       	std	Z+53, r25	; 0x35
    9da6:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9da8:	00 e0       	ldi	r16, 0x00	; 0
    9daa:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(12, 0);
    9dac:	60 e0       	ldi	r22, 0x00	; 0
    9dae:	8c e0       	ldi	r24, 0x0C	; 12
    9db0:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);
    9db4:	01 c0       	rjmp	.+2      	; 0x9db8 <ReadSensors+0x2c2>
    9db6:	00 00       	nop
    9db8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9dbc:	81 11       	cpse	r24, r1
    9dbe:	fb cf       	rjmp	.-10     	; 0x9db6 <ReadSensors+0x2c0>
		 sum += analogConversionResult();
    9dc0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9dc4:	08 0f       	add	r16, r24
    9dc6:	19 1f       	adc	r17, r25
    9dc8:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9dca:	81 f7       	brne	.-32     	; 0x9dac <ReadSensors+0x2b6>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Src_Out = ConvertToTemp( temp );
    9dcc:	98 01       	movw	r18, r16
    9dce:	ad ec       	ldi	r26, 0xCD	; 205
    9dd0:	bc ec       	ldi	r27, 0xCC	; 204
    9dd2:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    9dd6:	96 95       	lsr	r25
    9dd8:	87 95       	ror	r24
    9dda:	96 95       	lsr	r25
    9ddc:	87 95       	ror	r24
    9dde:	96 95       	lsr	r25
    9de0:	87 95       	ror	r24
    9de2:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <ConvertToTemp>
    9de6:	f7 01       	movw	r30, r14
    9de8:	66 ab       	std	Z+54, r22	; 0x36
    9dea:	77 ab       	std	Z+55, r23	; 0x37
    9dec:	80 af       	std	Z+56, r24	; 0x38
    9dee:	91 af       	std	Z+57, r25	; 0x39
    9df0:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9df2:	00 e0       	ldi	r16, 0x00	; 0
    9df4:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(13, 0);
    9df6:	60 e0       	ldi	r22, 0x00	; 0
    9df8:	8d e0       	ldi	r24, 0x0D	; 13
    9dfa:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9dfe:	01 c0       	rjmp	.+2      	; 0x9e02 <ReadSensors+0x30c>
    9e00:	00 00       	nop
    9e02:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9e06:	81 11       	cpse	r24, r1
    9e08:	fb cf       	rjmp	.-10     	; 0x9e00 <ReadSensors+0x30a>
		 sum += analogConversionResult();
    9e0a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9e0e:	08 0f       	add	r16, r24
    9e10:	19 1f       	adc	r17, r25
    9e12:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9e14:	81 f7       	brne	.-32     	; 0x9df6 <ReadSensors+0x300>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Ex_Comp = ConvertToTemp( temp );
    9e16:	98 01       	movw	r18, r16
    9e18:	ad ec       	ldi	r26, 0xCD	; 205
    9e1a:	bc ec       	ldi	r27, 0xCC	; 204
    9e1c:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    9e20:	96 95       	lsr	r25
    9e22:	87 95       	ror	r24
    9e24:	96 95       	lsr	r25
    9e26:	87 95       	ror	r24
    9e28:	96 95       	lsr	r25
    9e2a:	87 95       	ror	r24
    9e2c:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <ConvertToTemp>
    9e30:	f7 01       	movw	r30, r14
    9e32:	62 af       	std	Z+58, r22	; 0x3a
    9e34:	73 af       	std	Z+59, r23	; 0x3b
    9e36:	84 af       	std	Z+60, r24	; 0x3c
    9e38:	95 af       	std	Z+61, r25	; 0x3d
    9e3a:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9e3c:	00 e0       	ldi	r16, 0x00	; 0
    9e3e:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(14, 0);
    9e40:	60 e0       	ldi	r22, 0x00	; 0
    9e42:	8e e0       	ldi	r24, 0x0E	; 14
    9e44:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9e48:	01 c0       	rjmp	.+2      	; 0x9e4c <ReadSensors+0x356>
    9e4a:	00 00       	nop
    9e4c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9e50:	81 11       	cpse	r24, r1
    9e52:	fb cf       	rjmp	.-10     	; 0x9e4a <ReadSensors+0x354>
		 sum += analogConversionResult();
    9e54:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9e58:	08 0f       	add	r16, r24
    9e5a:	19 1f       	adc	r17, r25
    9e5c:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9e5e:	81 f7       	brne	.-32     	; 0x9e40 <ReadSensors+0x34a>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Suc_Comp = ConvertToTemp( temp );
    9e60:	98 01       	movw	r18, r16
    9e62:	ad ec       	ldi	r26, 0xCD	; 205
    9e64:	bc ec       	ldi	r27, 0xCC	; 204
    9e66:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    9e6a:	96 95       	lsr	r25
    9e6c:	87 95       	ror	r24
    9e6e:	96 95       	lsr	r25
    9e70:	87 95       	ror	r24
    9e72:	96 95       	lsr	r25
    9e74:	87 95       	ror	r24
    9e76:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <ConvertToTemp>
    9e7a:	f7 01       	movw	r30, r14
    9e7c:	fe 96       	adiw	r30, 0x3e	; 62
    9e7e:	60 83       	st	Z, r22
    9e80:	71 83       	std	Z+1, r23	; 0x01
    9e82:	82 83       	std	Z+2, r24	; 0x02
    9e84:	93 83       	std	Z+3, r25	; 0x03
    9e86:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9e88:	00 e0       	ldi	r16, 0x00	; 0
    9e8a:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(15, 0);
    9e8c:	60 e0       	ldi	r22, 0x00	; 0
    9e8e:	8f e0       	ldi	r24, 0x0F	; 15
    9e90:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9e94:	01 c0       	rjmp	.+2      	; 0x9e98 <ReadSensors+0x3a2>
    9e96:	00 00       	nop
    9e98:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9e9c:	81 11       	cpse	r24, r1
    9e9e:	fb cf       	rjmp	.-10     	; 0x9e96 <ReadSensors+0x3a0>
		 sum += analogConversionResult();
    9ea0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9ea4:	08 0f       	add	r16, r24
    9ea6:	19 1f       	adc	r17, r25
    9ea8:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9eaa:	81 f7       	brne	.-32     	; 0x9e8c <ReadSensors+0x396>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Cond_Temp = ConvertToTemp( temp )	;
    9eac:	98 01       	movw	r18, r16
    9eae:	ad ec       	ldi	r26, 0xCD	; 205
    9eb0:	bc ec       	ldi	r27, 0xCC	; 204
    9eb2:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <__umulhisi3>
    9eb6:	96 95       	lsr	r25
    9eb8:	87 95       	ror	r24
    9eba:	96 95       	lsr	r25
    9ebc:	87 95       	ror	r24
    9ebe:	96 95       	lsr	r25
    9ec0:	87 95       	ror	r24
    9ec2:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <ConvertToTemp>
    9ec6:	f7 01       	movw	r30, r14
    9ec8:	ee 5b       	subi	r30, 0xBE	; 190
    9eca:	ff 4f       	sbci	r31, 0xFF	; 255
    9ecc:	60 83       	st	Z, r22
    9ece:	71 83       	std	Z+1, r23	; 0x01
    9ed0:	82 83       	std	Z+2, r24	; 0x02
    9ed2:	93 83       	std	Z+3, r25	; 0x03
	 //--------------------------------------------------------------
	 comp->SuperHeat=ReadSuperHeat (comp);
    9ed4:	c7 01       	movw	r24, r14
    9ed6:	0e 94 a8 3f 	call	0x7f50	; 0x7f50 <ReadSuperHeat>
    9eda:	f7 01       	movw	r30, r14
    9edc:	ea 5b       	subi	r30, 0xBA	; 186
    9ede:	ff 4f       	sbci	r31, 0xFF	; 255
    9ee0:	60 83       	st	Z, r22
    9ee2:	71 83       	std	Z+1, r23	; 0x01
    9ee4:	82 83       	std	Z+2, r24	; 0x02
    9ee6:	93 83       	std	Z+3, r25	; 0x03
	 comp->SuperCool=ReadSuperCool (comp);				
    9ee8:	c7 01       	movw	r24, r14
    9eea:	0e 94 12 40 	call	0x8024	; 0x8024 <ReadSuperCool>
    9eee:	f7 01       	movw	r30, r14
    9ef0:	e6 5b       	subi	r30, 0xB6	; 182
    9ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    9ef4:	60 83       	st	Z, r22
    9ef6:	71 83       	std	Z+1, r23	; 0x01
    9ef8:	82 83       	std	Z+2, r24	; 0x02
    9efa:	93 83       	std	Z+3, r25	; 0x03
						}
						
    if(comp->Index==2) 
    9efc:	f7 01       	movw	r30, r14
    9efe:	e2 59       	subi	r30, 0x92	; 146
    9f00:	ff 4f       	sbci	r31, 0xFF	; 255
    9f02:	80 81       	ld	r24, Z
    9f04:	91 81       	ldd	r25, Z+1	; 0x01
    9f06:	02 97       	sbiw	r24, 0x02	; 2
    9f08:	09 f0       	breq	.+2      	; 0x9f0c <ReadSensors+0x416>
    9f0a:	07 c1       	rjmp	.+526    	; 0xa11a <ReadSensors+0x624>
	{
					 //read High_Pressure_1
					 PORTL |=    (1 << PL2);//a0
    9f0c:	eb e0       	ldi	r30, 0x0B	; 11
    9f0e:	f1 e0       	ldi	r31, 0x01	; 1
    9f10:	80 81       	ld	r24, Z
    9f12:	84 60       	ori	r24, 0x04	; 4
    9f14:	80 83       	st	Z, r24
					 PORTL &= ~  (1 << PL1);//a1
    9f16:	80 81       	ld	r24, Z
    9f18:	8d 7f       	andi	r24, 0xFD	; 253
    9f1a:	80 83       	st	Z, r24
					 PORTL &= ~  (1 << PL0);//a2
    9f1c:	80 81       	ld	r24, Z
    9f1e:	8e 7f       	andi	r24, 0xFE	; 254
    9f20:	80 83       	st	Z, r24
					 startAnalogConversion(0, 0);
    9f22:	60 e0       	ldi	r22, 0x00	; 0
    9f24:	80 e0       	ldi	r24, 0x00	; 0
    9f26:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					 while( analogIsConverting() )
    9f2a:	01 c0       	rjmp	.+2      	; 0x9f2e <ReadSensors+0x438>
    9f2c:	00 00       	nop
    9f2e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9f32:	81 11       	cpse	r24, r1
					 _delay_us(25);//portYIELD();
					 temp = analogConversionResult();
    9f34:	fb cf       	rjmp	.-10     	; 0x9f2c <ReadSensors+0x436>
    9f36:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					 comp->High_Press = ConvertToHighPress(temp);
    9f3a:	bc 01       	movw	r22, r24
    9f3c:	80 e0       	ldi	r24, 0x00	; 0
    9f3e:	90 e0       	ldi	r25, 0x00	; 0
    9f40:	95 d5       	rcall	.+2858   	; 0xaa6c <__floatunsisf>
    9f42:	20 e0       	ldi	r18, 0x00	; 0
    9f44:	30 e0       	ldi	r19, 0x00	; 0
    9f46:	4c ec       	ldi	r20, 0xCC	; 204
    9f48:	52 e4       	ldi	r21, 0x42	; 66
    9f4a:	8e d4       	rcall	.+2332   	; 0xa868 <__subsf3>
    9f4c:	20 e0       	ldi	r18, 0x00	; 0
    9f4e:	30 e0       	ldi	r19, 0x00	; 0
    9f50:	48 e0       	ldi	r20, 0x08	; 8
    9f52:	52 e4       	ldi	r21, 0x42	; 66
    9f54:	86 d6       	rcall	.+3340   	; 0xac62 <__mulsf3>
    9f56:	20 e0       	ldi	r18, 0x00	; 0
    9f58:	30 e0       	ldi	r19, 0x00	; 0
    9f5a:	4d e4       	ldi	r20, 0x4D	; 77
    9f5c:	54 e4       	ldi	r21, 0x44	; 68
    9f5e:	ed d4       	rcall	.+2522   	; 0xa93a <__divsf3>
    9f60:	f7 01       	movw	r30, r14
    9f62:	62 8f       	std	Z+26, r22	; 0x1a
    9f64:	73 8f       	std	Z+27, r23	; 0x1b
    9f66:	84 8f       	std	Z+28, r24	; 0x1c
    9f68:	95 8f       	std	Z+29, r25	; 0x1d
					 //read Low_Pressure_1
					 PORTL &= ~   (1 << PL2);
    9f6a:	eb e0       	ldi	r30, 0x0B	; 11
    9f6c:	f1 e0       	ldi	r31, 0x01	; 1
    9f6e:	80 81       	ld	r24, Z
    9f70:	8b 7f       	andi	r24, 0xFB	; 251
    9f72:	80 83       	st	Z, r24
					 PORTL |=     (1 << PL1);
    9f74:	80 81       	ld	r24, Z
    9f76:	82 60       	ori	r24, 0x02	; 2
    9f78:	80 83       	st	Z, r24
					 PORTL &= ~   (1 << PL0);
    9f7a:	80 81       	ld	r24, Z
    9f7c:	8e 7f       	andi	r24, 0xFE	; 254
    9f7e:	80 83       	st	Z, r24
					 startAnalogConversion(0, 0);
    9f80:	60 e0       	ldi	r22, 0x00	; 0
    9f82:	80 e0       	ldi	r24, 0x00	; 0
    9f84:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					 while( analogIsConverting() )
    9f88:	01 c0       	rjmp	.+2      	; 0x9f8c <ReadSensors+0x496>
    9f8a:	00 00       	nop
    9f8c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9f90:	81 11       	cpse	r24, r1
					_delay_us(25);// portYIELD();
					 temp = analogConversionResult();
    9f92:	fb cf       	rjmp	.-10     	; 0x9f8a <ReadSensors+0x494>
					 comp->Low_Press = ConvertToLowPress( temp );
    9f94:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9f98:	bc 01       	movw	r22, r24
    9f9a:	80 e0       	ldi	r24, 0x00	; 0
    9f9c:	90 e0       	ldi	r25, 0x00	; 0
    9f9e:	66 d5       	rcall	.+2764   	; 0xaa6c <__floatunsisf>
    9fa0:	20 e0       	ldi	r18, 0x00	; 0
    9fa2:	30 e0       	ldi	r19, 0x00	; 0
    9fa4:	4c e5       	ldi	r20, 0x5C	; 92
    9fa6:	52 e4       	ldi	r21, 0x42	; 66
    9fa8:	5f d4       	rcall	.+2238   	; 0xa868 <__subsf3>
    9faa:	20 e0       	ldi	r18, 0x00	; 0
    9fac:	30 e0       	ldi	r19, 0x00	; 0
    9fae:	40 e9       	ldi	r20, 0x90	; 144
    9fb0:	51 e4       	ldi	r21, 0x41	; 65
    9fb2:	57 d6       	rcall	.+3246   	; 0xac62 <__mulsf3>
    9fb4:	20 e0       	ldi	r18, 0x00	; 0
    9fb6:	30 ec       	ldi	r19, 0xC0	; 192
    9fb8:	48 e5       	ldi	r20, 0x58	; 88
    9fba:	54 e4       	ldi	r21, 0x44	; 68
    9fbc:	be d4       	rcall	.+2428   	; 0xa93a <__divsf3>
    9fbe:	f7 01       	movw	r30, r14
    9fc0:	66 8f       	std	Z+30, r22	; 0x1e
    9fc2:	77 8f       	std	Z+31, r23	; 0x1f
    9fc4:	80 a3       	std	Z+32, r24	; 0x20
    9fc6:	91 a3       	std	Z+33, r25	; 0x21
					startAnalogConversion(2, 0);
    9fc8:	60 e0       	ldi	r22, 0x00	; 0
    9fca:	82 e0       	ldi	r24, 0x02	; 2
    9fcc:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9fd0:	01 c0       	rjmp	.+2      	; 0x9fd4 <ReadSensors+0x4de>
    9fd2:	00 00       	nop
    9fd4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9fd8:	81 11       	cpse	r24, r1
    9fda:	fb cf       	rjmp	.-10     	; 0x9fd2 <ReadSensors+0x4dc>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9fdc:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Heat_Out = ConvertToTemp( temp );
    9fe0:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <ConvertToTemp>
    9fe4:	f7 01       	movw	r30, r14
    9fe6:	62 a7       	std	Z+42, r22	; 0x2a
    9fe8:	73 a7       	std	Z+43, r23	; 0x2b
    9fea:	84 a7       	std	Z+44, r24	; 0x2c
    9fec:	95 a7       	std	Z+45, r25	; 0x2d
					//---------------------------------------------------------------
					startAnalogConversion(3, 0);
    9fee:	60 e0       	ldi	r22, 0x00	; 0
    9ff0:	83 e0       	ldi	r24, 0x03	; 3
    9ff2:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9ff6:	01 c0       	rjmp	.+2      	; 0x9ffa <ReadSensors+0x504>
    9ff8:	00 00       	nop
    9ffa:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9ffe:	81 11       	cpse	r24, r1
    a000:	fb cf       	rjmp	.-10     	; 0x9ff8 <ReadSensors+0x502>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    a002:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Heat_In = ConvertToTemp( temp );
    a006:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <ConvertToTemp>
    a00a:	f7 01       	movw	r30, r14
    a00c:	66 a7       	std	Z+46, r22	; 0x2e
    a00e:	77 a7       	std	Z+47, r23	; 0x2f
    a010:	80 ab       	std	Z+48, r24	; 0x30
    a012:	91 ab       	std	Z+49, r25	; 0x31
					//---------------------------------------------------------------
					startAnalogConversion(4, 0);
    a014:	60 e0       	ldi	r22, 0x00	; 0
    a016:	84 e0       	ldi	r24, 0x04	; 4
    a018:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    a01c:	01 c0       	rjmp	.+2      	; 0xa020 <ReadSensors+0x52a>
    a01e:	00 00       	nop
    a020:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    a024:	81 11       	cpse	r24, r1
    a026:	fb cf       	rjmp	.-10     	; 0xa01e <ReadSensors+0x528>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    a028:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Src_In = ConvertToTemp( temp );
    a02c:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <ConvertToTemp>
    a030:	f7 01       	movw	r30, r14
    a032:	62 ab       	std	Z+50, r22	; 0x32
    a034:	73 ab       	std	Z+51, r23	; 0x33
    a036:	84 ab       	std	Z+52, r24	; 0x34
    a038:	95 ab       	std	Z+53, r25	; 0x35
					//---------------------------------------------------------------
					startAnalogConversion(5, 0);
    a03a:	60 e0       	ldi	r22, 0x00	; 0
    a03c:	85 e0       	ldi	r24, 0x05	; 5
    a03e:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    a042:	01 c0       	rjmp	.+2      	; 0xa046 <ReadSensors+0x550>
    a044:	00 00       	nop
    a046:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    a04a:	81 11       	cpse	r24, r1
    a04c:	fb cf       	rjmp	.-10     	; 0xa044 <ReadSensors+0x54e>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    a04e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Src_Out = ConvertToTemp( temp );
    a052:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <ConvertToTemp>
    a056:	f7 01       	movw	r30, r14
    a058:	66 ab       	std	Z+54, r22	; 0x36
    a05a:	77 ab       	std	Z+55, r23	; 0x37
    a05c:	80 af       	std	Z+56, r24	; 0x38
    a05e:	91 af       	std	Z+57, r25	; 0x39
					//---------------------------------------------------------------
					startAnalogConversion(6, 0);
    a060:	60 e0       	ldi	r22, 0x00	; 0
    a062:	86 e0       	ldi	r24, 0x06	; 6
    a064:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    a068:	01 c0       	rjmp	.+2      	; 0xa06c <ReadSensors+0x576>
    a06a:	00 00       	nop
    a06c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    a070:	81 11       	cpse	r24, r1
    a072:	fb cf       	rjmp	.-10     	; 0xa06a <ReadSensors+0x574>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    a074:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Ex_Comp = ConvertToTemp( temp );
    a078:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <ConvertToTemp>
    a07c:	f7 01       	movw	r30, r14
    a07e:	62 af       	std	Z+58, r22	; 0x3a
    a080:	73 af       	std	Z+59, r23	; 0x3b
    a082:	84 af       	std	Z+60, r24	; 0x3c
    a084:	95 af       	std	Z+61, r25	; 0x3d
					//---------------------------------------------------------------
					startAnalogConversion(7, 0);
    a086:	60 e0       	ldi	r22, 0x00	; 0
    a088:	87 e0       	ldi	r24, 0x07	; 7
    a08a:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    a08e:	01 c0       	rjmp	.+2      	; 0xa092 <ReadSensors+0x59c>
    a090:	00 00       	nop
    a092:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    a096:	81 11       	cpse	r24, r1
    a098:	fb cf       	rjmp	.-10     	; 0xa090 <ReadSensors+0x59a>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    a09a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Suc_Comp = ConvertToTemp( temp );
    a09e:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <ConvertToTemp>
    a0a2:	f7 01       	movw	r30, r14
    a0a4:	fe 96       	adiw	r30, 0x3e	; 62
    a0a6:	60 83       	st	Z, r22
    a0a8:	71 83       	std	Z+1, r23	; 0x01
    a0aa:	82 83       	std	Z+2, r24	; 0x02
    a0ac:	93 83       	std	Z+3, r25	; 0x03
					//---------------------------------------------------------------
					startAnalogConversion(8, 0);
    a0ae:	60 e0       	ldi	r22, 0x00	; 0
    a0b0:	88 e0       	ldi	r24, 0x08	; 8
    a0b2:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    a0b6:	01 c0       	rjmp	.+2      	; 0xa0ba <ReadSensors+0x5c4>
    a0b8:	00 00       	nop
    a0ba:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    a0be:	81 11       	cpse	r24, r1
    a0c0:	fb cf       	rjmp	.-10     	; 0xa0b8 <ReadSensors+0x5c2>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    a0c2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Cond_Temp = ConvertToTemp( temp )	;
    a0c6:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <ConvertToTemp>
    a0ca:	f7 01       	movw	r30, r14
    a0cc:	ee 5b       	subi	r30, 0xBE	; 190
    a0ce:	ff 4f       	sbci	r31, 0xFF	; 255
    a0d0:	60 83       	st	Z, r22
    a0d2:	71 83       	std	Z+1, r23	; 0x01
    a0d4:	82 83       	std	Z+2, r24	; 0x02
    a0d6:	93 83       	std	Z+3, r25	; 0x03
					//--------------------------------------------------------------
					comp->SuperHeat=ReadSuperHeat (comp);
    a0d8:	c7 01       	movw	r24, r14
    a0da:	0e 94 a8 3f 	call	0x7f50	; 0x7f50 <ReadSuperHeat>
    a0de:	f7 01       	movw	r30, r14
    a0e0:	ea 5b       	subi	r30, 0xBA	; 186
    a0e2:	ff 4f       	sbci	r31, 0xFF	; 255
    a0e4:	60 83       	st	Z, r22
    a0e6:	71 83       	std	Z+1, r23	; 0x01
    a0e8:	82 83       	std	Z+2, r24	; 0x02
    a0ea:	93 83       	std	Z+3, r25	; 0x03
					comp->SuperCool=ReadSuperCool (comp);
    a0ec:	c7 01       	movw	r24, r14
    a0ee:	0e 94 12 40 	call	0x8024	; 0x8024 <ReadSuperCool>
    a0f2:	f7 01       	movw	r30, r14
    a0f4:	e6 5b       	subi	r30, 0xB6	; 182
    a0f6:	ff 4f       	sbci	r31, 0xFF	; 255
    a0f8:	60 83       	st	Z, r22
    a0fa:	71 83       	std	Z+1, r23	; 0x01
    a0fc:	82 83       	std	Z+2, r24	; 0x02
					if(comp->checkTrv)comp->trvCorection=corectTrv(comp);
    a0fe:	93 83       	std	Z+3, r25	; 0x03
    a100:	f7 01       	movw	r30, r14
    a102:	81 81       	ldd	r24, Z+1	; 0x01
    a104:	88 23       	and	r24, r24
    a106:	49 f0       	breq	.+18     	; 0xa11a <ReadSensors+0x624>
    a108:	c7 01       	movw	r24, r14
    a10a:	0e 94 7b 40 	call	0x80f6	; 0x80f6 <corectTrv>
    a10e:	e7 01       	movw	r28, r14
    a110:	ca 59       	subi	r28, 0x9A	; 154
    a112:	df 4f       	sbci	r29, 0xFF	; 255
    a114:	7a d4       	rcall	.+2292   	; 0xaa0a <__fixsfsi>
    a116:	79 83       	std	Y+1, r23	; 0x01
    a118:	68 83       	st	Y, r22
					//EEpromData.Volt_B= ADE7758_bvrms();
					//EEpromData.Volt_C= ADE7758_cvrms();
					}

return;	
}
    a11a:	df 91       	pop	r29
    a11c:	cf 91       	pop	r28
    a11e:	1f 91       	pop	r17
    a120:	0f 91       	pop	r16
    a122:	ff 90       	pop	r15
    a124:	ef 90       	pop	r14
    a126:	08 95       	ret

0000a128 <ComutateTrv>:
	}
	if(comp->Index==2)
	{
		xTimerDelete(xComutateTrv_2,0);
	}
}
    a128:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    a12c:	fc 01       	movw	r30, r24
    a12e:	20 81       	ld	r18, Z
    a130:	2a 31       	cpi	r18, 0x1A	; 26
    a132:	09 f0       	breq	.+2      	; 0xa136 <ComutateTrv+0xe>
    a134:	74 c0       	rjmp	.+232    	; 0xa21e <ComutateTrv+0xf6>
    a136:	22 b1       	in	r18, 0x02	; 2
    a138:	20 7f       	andi	r18, 0xF0	; 240
    a13a:	22 b9       	out	0x02, r18	; 2
    a13c:	20 91 be 09 	lds	r18, 0x09BE	; 0x8009be <Comp_1+0x68>
    a140:	30 91 bf 09 	lds	r19, 0x09BF	; 0x8009bf <Comp_1+0x69>
    a144:	12 16       	cp	r1, r18
    a146:	13 06       	cpc	r1, r19
    a148:	54 f5       	brge	.+84     	; 0xa19e <ComutateTrv+0x76>
    a14a:	e0 91 44 07 	lds	r30, 0x0744	; 0x800744 <step_index.2937>
    a14e:	21 e0       	ldi	r18, 0x01	; 1
    a150:	2e 0f       	add	r18, r30
    a152:	20 93 44 07 	sts	0x0744, r18	; 0x800744 <step_index.2937>
    a156:	32 b1       	in	r19, 0x02	; 2
    a158:	f0 e0       	ldi	r31, 0x00	; 0
    a15a:	ee 5e       	subi	r30, 0xEE	; 238
    a15c:	fd 4f       	sbci	r31, 0xFD	; 253
    a15e:	20 81       	ld	r18, Z
    a160:	23 2b       	or	r18, r19
    a162:	22 b9       	out	0x02, r18	; 2
    a164:	ee eb       	ldi	r30, 0xBE	; 190
    a166:	f9 e0       	ldi	r31, 0x09	; 9
    a168:	20 81       	ld	r18, Z
    a16a:	31 81       	ldd	r19, Z+1	; 0x01
    a16c:	21 50       	subi	r18, 0x01	; 1
    a16e:	31 09       	sbc	r19, r1
    a170:	31 83       	std	Z+1, r19	; 0x01
    a172:	20 83       	st	Z, r18
    a174:	20 91 c0 09 	lds	r18, 0x09C0	; 0x8009c0 <Comp_1+0x6a>
    a178:	30 91 c1 09 	lds	r19, 0x09C1	; 0x8009c1 <Comp_1+0x6b>
    a17c:	2f 5f       	subi	r18, 0xFF	; 255
    a17e:	3f 4f       	sbci	r19, 0xFF	; 255
    a180:	21 3f       	cpi	r18, 0xF1	; 241
    a182:	31 05       	cpc	r19, r1
    a184:	2c f4       	brge	.+10     	; 0xa190 <ComutateTrv+0x68>
    a186:	30 93 c1 09 	sts	0x09C1, r19	; 0x8009c1 <Comp_1+0x6b>
    a18a:	20 93 c0 09 	sts	0x09C0, r18	; 0x8009c0 <Comp_1+0x6a>
    a18e:	41 c0       	rjmp	.+130    	; 0xa212 <ComutateTrv+0xea>
    a190:	20 ef       	ldi	r18, 0xF0	; 240
    a192:	30 e0       	ldi	r19, 0x00	; 0
    a194:	30 93 c1 09 	sts	0x09C1, r19	; 0x8009c1 <Comp_1+0x6b>
    a198:	20 93 c0 09 	sts	0x09C0, r18	; 0x8009c0 <Comp_1+0x6a>
    a19c:	3a c0       	rjmp	.+116    	; 0xa212 <ComutateTrv+0xea>
    a19e:	33 23       	and	r19, r19
    a1a0:	24 f5       	brge	.+72     	; 0xa1ea <ComutateTrv+0xc2>
    a1a2:	e0 91 44 07 	lds	r30, 0x0744	; 0x800744 <step_index.2937>
    a1a6:	21 e0       	ldi	r18, 0x01	; 1
    a1a8:	2e 0f       	add	r18, r30
    a1aa:	20 93 44 07 	sts	0x0744, r18	; 0x800744 <step_index.2937>
    a1ae:	f0 e0       	ldi	r31, 0x00	; 0
    a1b0:	e2 5f       	subi	r30, 0xF2	; 242
    a1b2:	fd 4f       	sbci	r31, 0xFD	; 253
    a1b4:	20 81       	ld	r18, Z
    a1b6:	22 b9       	out	0x02, r18	; 2
    a1b8:	ee eb       	ldi	r30, 0xBE	; 190
    a1ba:	f9 e0       	ldi	r31, 0x09	; 9
    a1bc:	20 81       	ld	r18, Z
    a1be:	31 81       	ldd	r19, Z+1	; 0x01
    a1c0:	2f 5f       	subi	r18, 0xFF	; 255
    a1c2:	3f 4f       	sbci	r19, 0xFF	; 255
    a1c4:	31 83       	std	Z+1, r19	; 0x01
    a1c6:	20 83       	st	Z, r18
    a1c8:	20 91 c0 09 	lds	r18, 0x09C0	; 0x8009c0 <Comp_1+0x6a>
    a1cc:	30 91 c1 09 	lds	r19, 0x09C1	; 0x8009c1 <Comp_1+0x6b>
    a1d0:	21 50       	subi	r18, 0x01	; 1
    a1d2:	31 09       	sbc	r19, r1
    a1d4:	2a f0       	brmi	.+10     	; 0xa1e0 <ComutateTrv+0xb8>
    a1d6:	30 93 c1 09 	sts	0x09C1, r19	; 0x8009c1 <Comp_1+0x6b>
    a1da:	20 93 c0 09 	sts	0x09C0, r18	; 0x8009c0 <Comp_1+0x6a>
    a1de:	19 c0       	rjmp	.+50     	; 0xa212 <ComutateTrv+0xea>
    a1e0:	10 92 c1 09 	sts	0x09C1, r1	; 0x8009c1 <Comp_1+0x6b>
    a1e4:	10 92 c0 09 	sts	0x09C0, r1	; 0x8009c0 <Comp_1+0x6a>
    a1e8:	14 c0       	rjmp	.+40     	; 0xa212 <ComutateTrv+0xea>
    a1ea:	23 2b       	or	r18, r19
    a1ec:	69 f4       	brne	.+26     	; 0xa208 <ComutateTrv+0xe0>
    a1ee:	20 91 5d 09 	lds	r18, 0x095D	; 0x80095d <Comp_1+0x7>
    a1f2:	22 23       	and	r18, r18
    a1f4:	49 f0       	breq	.+18     	; 0xa208 <ComutateTrv+0xe0>
    a1f6:	20 ef       	ldi	r18, 0xF0	; 240
    a1f8:	30 e0       	ldi	r19, 0x00	; 0
    a1fa:	30 93 bf 09 	sts	0x09BF, r19	; 0x8009bf <Comp_1+0x69>
    a1fe:	20 93 be 09 	sts	0x09BE, r18	; 0x8009be <Comp_1+0x68>
    a202:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <Comp_1+0x7>
    a206:	05 c0       	rjmp	.+10     	; 0xa212 <ComutateTrv+0xea>
    a208:	22 b1       	in	r18, 0x02	; 2
    a20a:	20 7f       	andi	r18, 0xF0	; 240
    a20c:	22 b9       	out	0x02, r18	; 2
    a20e:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <Comp_1+0x7>
    a212:	20 91 44 07 	lds	r18, 0x0744	; 0x800744 <step_index.2937>
    a216:	24 30       	cpi	r18, 0x04	; 4
    a218:	10 f0       	brcs	.+4      	; 0xa21e <ComutateTrv+0xf6>
    a21a:	10 92 44 07 	sts	0x0744, r1	; 0x800744 <step_index.2937>
    a21e:	fc 01       	movw	r30, r24
    a220:	80 81       	ld	r24, Z
    a222:	8b 31       	cpi	r24, 0x1B	; 27
    a224:	09 f0       	breq	.+2      	; 0xa228 <ComutateTrv+0x100>
    a226:	70 c0       	rjmp	.+224    	; 0xa308 <ComutateTrv+0x1e0>
    a228:	82 b1       	in	r24, 0x02	; 2
    a22a:	8f 70       	andi	r24, 0x0F	; 15
    a22c:	82 b9       	out	0x02, r24	; 2
    a22e:	80 91 44 0a 	lds	r24, 0x0A44	; 0x800a44 <Comp_2+0x68>
    a232:	90 91 45 0a 	lds	r25, 0x0A45	; 0x800a45 <Comp_2+0x69>
    a236:	18 16       	cp	r1, r24
    a238:	19 06       	cpc	r1, r25
    a23a:	44 f5       	brge	.+80     	; 0xa28c <ComutateTrv+0x164>
    a23c:	e0 91 43 07 	lds	r30, 0x0743	; 0x800743 <step_index.2938>
    a240:	81 e0       	ldi	r24, 0x01	; 1
    a242:	8e 0f       	add	r24, r30
    a244:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <step_index.2938>
    a248:	92 b1       	in	r25, 0x02	; 2
    a24a:	f0 e0       	ldi	r31, 0x00	; 0
    a24c:	e6 5f       	subi	r30, 0xF6	; 246
    a24e:	fd 4f       	sbci	r31, 0xFD	; 253
    a250:	80 81       	ld	r24, Z
    a252:	89 2b       	or	r24, r25
    a254:	82 b9       	out	0x02, r24	; 2
    a256:	e4 e4       	ldi	r30, 0x44	; 68
    a258:	fa e0       	ldi	r31, 0x0A	; 10
    a25a:	80 81       	ld	r24, Z
    a25c:	91 81       	ldd	r25, Z+1	; 0x01
    a25e:	01 97       	sbiw	r24, 0x01	; 1
    a260:	91 83       	std	Z+1, r25	; 0x01
    a262:	80 83       	st	Z, r24
    a264:	80 91 46 0a 	lds	r24, 0x0A46	; 0x800a46 <Comp_2+0x6a>
    a268:	90 91 47 0a 	lds	r25, 0x0A47	; 0x800a47 <Comp_2+0x6b>
    a26c:	01 96       	adiw	r24, 0x01	; 1
    a26e:	81 3f       	cpi	r24, 0xF1	; 241
    a270:	91 05       	cpc	r25, r1
    a272:	2c f4       	brge	.+10     	; 0xa27e <ComutateTrv+0x156>
    a274:	90 93 47 0a 	sts	0x0A47, r25	; 0x800a47 <Comp_2+0x6b>
    a278:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <Comp_2+0x6a>
    a27c:	3f c0       	rjmp	.+126    	; 0xa2fc <ComutateTrv+0x1d4>
    a27e:	80 ef       	ldi	r24, 0xF0	; 240
    a280:	90 e0       	ldi	r25, 0x00	; 0
    a282:	90 93 47 0a 	sts	0x0A47, r25	; 0x800a47 <Comp_2+0x6b>
    a286:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <Comp_2+0x6a>
    a28a:	38 c0       	rjmp	.+112    	; 0xa2fc <ComutateTrv+0x1d4>
    a28c:	99 23       	and	r25, r25
    a28e:	14 f5       	brge	.+68     	; 0xa2d4 <ComutateTrv+0x1ac>
    a290:	e0 91 43 07 	lds	r30, 0x0743	; 0x800743 <step_index.2938>
    a294:	81 e0       	ldi	r24, 0x01	; 1
    a296:	8e 0f       	add	r24, r30
    a298:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <step_index.2938>
    a29c:	f0 e0       	ldi	r31, 0x00	; 0
    a29e:	ea 5f       	subi	r30, 0xFA	; 250
    a2a0:	fd 4f       	sbci	r31, 0xFD	; 253
    a2a2:	80 81       	ld	r24, Z
    a2a4:	82 b9       	out	0x02, r24	; 2
    a2a6:	e4 e4       	ldi	r30, 0x44	; 68
    a2a8:	fa e0       	ldi	r31, 0x0A	; 10
    a2aa:	80 81       	ld	r24, Z
    a2ac:	91 81       	ldd	r25, Z+1	; 0x01
    a2ae:	01 96       	adiw	r24, 0x01	; 1
    a2b0:	91 83       	std	Z+1, r25	; 0x01
    a2b2:	80 83       	st	Z, r24
    a2b4:	80 91 46 0a 	lds	r24, 0x0A46	; 0x800a46 <Comp_2+0x6a>
    a2b8:	90 91 47 0a 	lds	r25, 0x0A47	; 0x800a47 <Comp_2+0x6b>
    a2bc:	01 97       	sbiw	r24, 0x01	; 1
    a2be:	2a f0       	brmi	.+10     	; 0xa2ca <ComutateTrv+0x1a2>
    a2c0:	90 93 47 0a 	sts	0x0A47, r25	; 0x800a47 <Comp_2+0x6b>
    a2c4:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <Comp_2+0x6a>
    a2c8:	19 c0       	rjmp	.+50     	; 0xa2fc <ComutateTrv+0x1d4>
    a2ca:	10 92 47 0a 	sts	0x0A47, r1	; 0x800a47 <Comp_2+0x6b>
    a2ce:	10 92 46 0a 	sts	0x0A46, r1	; 0x800a46 <Comp_2+0x6a>
    a2d2:	14 c0       	rjmp	.+40     	; 0xa2fc <ComutateTrv+0x1d4>
    a2d4:	89 2b       	or	r24, r25
    a2d6:	69 f4       	brne	.+26     	; 0xa2f2 <ComutateTrv+0x1ca>
    a2d8:	80 91 e3 09 	lds	r24, 0x09E3	; 0x8009e3 <Comp_2+0x7>
    a2dc:	88 23       	and	r24, r24
    a2de:	49 f0       	breq	.+18     	; 0xa2f2 <ComutateTrv+0x1ca>
    a2e0:	80 ef       	ldi	r24, 0xF0	; 240
    a2e2:	90 e0       	ldi	r25, 0x00	; 0
    a2e4:	90 93 45 0a 	sts	0x0A45, r25	; 0x800a45 <Comp_2+0x69>
    a2e8:	80 93 44 0a 	sts	0x0A44, r24	; 0x800a44 <Comp_2+0x68>
    a2ec:	10 92 e3 09 	sts	0x09E3, r1	; 0x8009e3 <Comp_2+0x7>
    a2f0:	05 c0       	rjmp	.+10     	; 0xa2fc <ComutateTrv+0x1d4>
    a2f2:	82 b1       	in	r24, 0x02	; 2
    a2f4:	8f 70       	andi	r24, 0x0F	; 15
    a2f6:	82 b9       	out	0x02, r24	; 2
    a2f8:	10 92 e3 09 	sts	0x09E3, r1	; 0x8009e3 <Comp_2+0x7>
    a2fc:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <step_index.2938>
    a300:	84 30       	cpi	r24, 0x04	; 4
    a302:	10 f0       	brcs	.+4      	; 0xa308 <ComutateTrv+0x1e0>
    a304:	10 92 43 07 	sts	0x0743, r1	; 0x800743 <step_index.2938>
    a308:	08 95       	ret

0000a30a <activateTrvTimer>:
    a30a:	ef 92       	push	r14
    a30c:	ff 92       	push	r15
    a30e:	0f 93       	push	r16
    a310:	1f 93       	push	r17
    a312:	82 59       	subi	r24, 0x92	; 146
    a314:	9f 4f       	sbci	r25, 0xFF	; 255
    a316:	fc 01       	movw	r30, r24
    a318:	80 81       	ld	r24, Z
    a31a:	91 81       	ldd	r25, Z+1	; 0x01
    a31c:	81 30       	cpi	r24, 0x01	; 1
    a31e:	91 05       	cpc	r25, r1
    a320:	b1 f4       	brne	.+44     	; 0xa34e <activateTrvTimer+0x44>
    a322:	0f 2e       	mov	r0, r31
    a324:	f4 e9       	ldi	r31, 0x94	; 148
    a326:	ef 2e       	mov	r14, r31
    a328:	f0 e5       	ldi	r31, 0x50	; 80
    a32a:	ff 2e       	mov	r15, r31
    a32c:	f0 2d       	mov	r31, r0
    a32e:	0d e5       	ldi	r16, 0x5D	; 93
    a330:	16 e0       	ldi	r17, 0x06	; 6
    a332:	21 e0       	ldi	r18, 0x01	; 1
    a334:	42 e3       	ldi	r20, 0x32	; 50
    a336:	50 e0       	ldi	r21, 0x00	; 0
    a338:	60 e0       	ldi	r22, 0x00	; 0
    a33a:	70 e0       	ldi	r23, 0x00	; 0
    a33c:	8c e1       	ldi	r24, 0x1C	; 28
    a33e:	96 e0       	ldi	r25, 0x06	; 6
    a340:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    a344:	90 93 dc 08 	sts	0x08DC, r25	; 0x8008dc <xComutateTrv_1+0x1>
    a348:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <xComutateTrv_1>
    a34c:	17 c0       	rjmp	.+46     	; 0xa37c <activateTrvTimer+0x72>
    a34e:	02 97       	sbiw	r24, 0x02	; 2
    a350:	a9 f4       	brne	.+42     	; 0xa37c <activateTrvTimer+0x72>
    a352:	0f 2e       	mov	r0, r31
    a354:	f4 e9       	ldi	r31, 0x94	; 148
    a356:	ef 2e       	mov	r14, r31
    a358:	f0 e5       	ldi	r31, 0x50	; 80
    a35a:	ff 2e       	mov	r15, r31
    a35c:	f0 2d       	mov	r31, r0
    a35e:	0c e5       	ldi	r16, 0x5C	; 92
    a360:	16 e0       	ldi	r17, 0x06	; 6
    a362:	21 e0       	ldi	r18, 0x01	; 1
    a364:	42 e3       	ldi	r20, 0x32	; 50
    a366:	50 e0       	ldi	r21, 0x00	; 0
    a368:	60 e0       	ldi	r22, 0x00	; 0
    a36a:	70 e0       	ldi	r23, 0x00	; 0
    a36c:	85 e2       	ldi	r24, 0x25	; 37
    a36e:	96 e0       	ldi	r25, 0x06	; 6
    a370:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    a374:	90 93 d3 09 	sts	0x09D3, r25	; 0x8009d3 <xComutateTrv_2+0x1>
    a378:	80 93 d2 09 	sts	0x09D2, r24	; 0x8009d2 <xComutateTrv_2>
    a37c:	1f 91       	pop	r17
    a37e:	0f 91       	pop	r16
    a380:	ff 90       	pop	r15
    a382:	ef 90       	pop	r14
    a384:	08 95       	ret

0000a386 <startTrvTimer>:
    a386:	cf 92       	push	r12
    a388:	df 92       	push	r13
    a38a:	ef 92       	push	r14
    a38c:	ff 92       	push	r15
    a38e:	0f 93       	push	r16
    a390:	1f 93       	push	r17
    a392:	82 59       	subi	r24, 0x92	; 146
    a394:	9f 4f       	sbci	r25, 0xFF	; 255
    a396:	fc 01       	movw	r30, r24
    a398:	80 81       	ld	r24, Z
    a39a:	91 81       	ldd	r25, Z+1	; 0x01
    a39c:	81 30       	cpi	r24, 0x01	; 1
    a39e:	91 05       	cpc	r25, r1
    a3a0:	89 f4       	brne	.+34     	; 0xa3c4 <startTrvTimer+0x3e>
    a3a2:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    a3a6:	9b 01       	movw	r18, r22
    a3a8:	ac 01       	movw	r20, r24
    a3aa:	c1 2c       	mov	r12, r1
    a3ac:	d1 2c       	mov	r13, r1
    a3ae:	76 01       	movw	r14, r12
    a3b0:	00 e0       	ldi	r16, 0x00	; 0
    a3b2:	10 e0       	ldi	r17, 0x00	; 0
    a3b4:	61 e0       	ldi	r22, 0x01	; 1
    a3b6:	80 91 db 08 	lds	r24, 0x08DB	; 0x8008db <xComutateTrv_1>
    a3ba:	90 91 dc 08 	lds	r25, 0x08DC	; 0x8008dc <xComutateTrv_1+0x1>
    a3be:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    a3c2:	12 c0       	rjmp	.+36     	; 0xa3e8 <startTrvTimer+0x62>
    a3c4:	02 97       	sbiw	r24, 0x02	; 2
    a3c6:	81 f4       	brne	.+32     	; 0xa3e8 <startTrvTimer+0x62>
    a3c8:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    a3cc:	9b 01       	movw	r18, r22
    a3ce:	ac 01       	movw	r20, r24
    a3d0:	c1 2c       	mov	r12, r1
    a3d2:	d1 2c       	mov	r13, r1
    a3d4:	76 01       	movw	r14, r12
    a3d6:	00 e0       	ldi	r16, 0x00	; 0
    a3d8:	10 e0       	ldi	r17, 0x00	; 0
    a3da:	61 e0       	ldi	r22, 0x01	; 1
    a3dc:	80 91 d2 09 	lds	r24, 0x09D2	; 0x8009d2 <xComutateTrv_2>
    a3e0:	90 91 d3 09 	lds	r25, 0x09D3	; 0x8009d3 <xComutateTrv_2+0x1>
    a3e4:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    a3e8:	1f 91       	pop	r17
    a3ea:	0f 91       	pop	r16
    a3ec:	ff 90       	pop	r15
    a3ee:	ef 90       	pop	r14
    a3f0:	df 90       	pop	r13
    a3f2:	cf 90       	pop	r12
    a3f4:	08 95       	ret

0000a3f6 <stopTrvTimer>:
void stopTrvTimer(xCompressor *comp)
{
    a3f6:	cf 92       	push	r12
    a3f8:	df 92       	push	r13
    a3fa:	ef 92       	push	r14
    a3fc:	ff 92       	push	r15
    a3fe:	0f 93       	push	r16
    a400:	1f 93       	push	r17
    a402:	cf 93       	push	r28
    a404:	df 93       	push	r29
    a406:	ec 01       	movw	r28, r24
	if(comp->Index==1)
    a408:	fc 01       	movw	r30, r24
    a40a:	e2 59       	subi	r30, 0x92	; 146
    a40c:	ff 4f       	sbci	r31, 0xFF	; 255
    a40e:	80 81       	ld	r24, Z
    a410:	91 81       	ldd	r25, Z+1	; 0x01
    a412:	01 97       	sbiw	r24, 0x01	; 1
    a414:	c1 f4       	brne	.+48     	; 0xa446 <stopTrvTimer+0x50>
	{
		if( xTimerIsTimerActive( xComutateTrv_1 ) != pdFALSE )	xTimerStop(xComutateTrv_1, 1);
    a416:	80 91 db 08 	lds	r24, 0x08DB	; 0x8008db <xComutateTrv_1>
    a41a:	90 91 dc 08 	lds	r25, 0x08DC	; 0x8008dc <xComutateTrv_1+0x1>
    a41e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    a422:	88 23       	and	r24, r24
    a424:	81 f0       	breq	.+32     	; 0xa446 <stopTrvTimer+0x50>
    a426:	c1 2c       	mov	r12, r1
    a428:	d1 2c       	mov	r13, r1
    a42a:	76 01       	movw	r14, r12
    a42c:	c3 94       	inc	r12
    a42e:	00 e0       	ldi	r16, 0x00	; 0
    a430:	10 e0       	ldi	r17, 0x00	; 0
    a432:	20 e0       	ldi	r18, 0x00	; 0
    a434:	30 e0       	ldi	r19, 0x00	; 0
    a436:	a9 01       	movw	r20, r18
    a438:	63 e0       	ldi	r22, 0x03	; 3
    a43a:	80 91 db 08 	lds	r24, 0x08DB	; 0x8008db <xComutateTrv_1>
    a43e:	90 91 dc 08 	lds	r25, 0x08DC	; 0x8008dc <xComutateTrv_1+0x1>
    a442:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if(comp->Index==2)
    a446:	c2 59       	subi	r28, 0x92	; 146
    a448:	df 4f       	sbci	r29, 0xFF	; 255
    a44a:	88 81       	ld	r24, Y
    a44c:	99 81       	ldd	r25, Y+1	; 0x01
    a44e:	02 97       	sbiw	r24, 0x02	; 2
    a450:	c1 f4       	brne	.+48     	; 0xa482 <stopTrvTimer+0x8c>
	{
		if( xTimerIsTimerActive( xComutateTrv_2 ) != pdFALSE )	xTimerStop(xComutateTrv_2, 1);
    a452:	80 91 d2 09 	lds	r24, 0x09D2	; 0x8009d2 <xComutateTrv_2>
    a456:	90 91 d3 09 	lds	r25, 0x09D3	; 0x8009d3 <xComutateTrv_2+0x1>
    a45a:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    a45e:	88 23       	and	r24, r24
    a460:	81 f0       	breq	.+32     	; 0xa482 <stopTrvTimer+0x8c>
    a462:	c1 2c       	mov	r12, r1
    a464:	d1 2c       	mov	r13, r1
    a466:	76 01       	movw	r14, r12
    a468:	c3 94       	inc	r12
    a46a:	00 e0       	ldi	r16, 0x00	; 0
    a46c:	10 e0       	ldi	r17, 0x00	; 0
    a46e:	20 e0       	ldi	r18, 0x00	; 0
    a470:	30 e0       	ldi	r19, 0x00	; 0
    a472:	a9 01       	movw	r20, r18
    a474:	63 e0       	ldi	r22, 0x03	; 3
    a476:	80 91 d2 09 	lds	r24, 0x09D2	; 0x8009d2 <xComutateTrv_2>
    a47a:	90 91 d3 09 	lds	r25, 0x09D3	; 0x8009d3 <xComutateTrv_2+0x1>
    a47e:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
}
    a482:	df 91       	pop	r29
    a484:	cf 91       	pop	r28
    a486:	1f 91       	pop	r17
    a488:	0f 91       	pop	r16
    a48a:	ff 90       	pop	r15
    a48c:	ef 90       	pop	r14
    a48e:	df 90       	pop	r13
    a490:	cf 90       	pop	r12
    a492:	08 95       	ret

0000a494 <Fuzzy>:
		
	}
}
//----------------------------------------------------------------------------------------------------------
int Fuzzy(xCompressor *comp,int corection)
{
    a494:	8f 92       	push	r8
    a496:	9f 92       	push	r9
    a498:	af 92       	push	r10
    a49a:	bf 92       	push	r11
    a49c:	cf 92       	push	r12
    a49e:	df 92       	push	r13
    a4a0:	ef 92       	push	r14
    a4a2:	ff 92       	push	r15
    a4a4:	0f 93       	push	r16
    a4a6:	1f 93       	push	r17
    a4a8:	cf 93       	push	r28
    a4aa:	df 93       	push	r29
    a4ac:	ec 01       	movw	r28, r24
    a4ae:	8b 01       	movw	r16, r22
	int steps=0;
	//static int old_corection=0;
	//static int old_corection_1=0;
	if(comp->Index==2)xSerialxPrintf(&xSerial3Port,"corection_2 = %d \r\n", corection);
    a4b0:	fc 01       	movw	r30, r24
    a4b2:	e2 59       	subi	r30, 0x92	; 146
    a4b4:	ff 4f       	sbci	r31, 0xFF	; 255
    a4b6:	80 81       	ld	r24, Z
    a4b8:	91 81       	ldd	r25, Z+1	; 0x01
    a4ba:	02 97       	sbiw	r24, 0x02	; 2
    a4bc:	91 f4       	brne	.+36     	; 0xa4e2 <Fuzzy+0x4e>
    a4be:	1f 93       	push	r17
    a4c0:	6f 93       	push	r22
    a4c2:	81 e3       	ldi	r24, 0x31	; 49
    a4c4:	96 e0       	ldi	r25, 0x06	; 6
    a4c6:	9f 93       	push	r25
    a4c8:	8f 93       	push	r24
    a4ca:	84 e9       	ldi	r24, 0x94	; 148
    a4cc:	97 e0       	ldi	r25, 0x07	; 7
    a4ce:	9f 93       	push	r25
    a4d0:	8f 93       	push	r24
    a4d2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a4d6:	0f 90       	pop	r0
    a4d8:	0f 90       	pop	r0
    a4da:	0f 90       	pop	r0
    a4dc:	0f 90       	pop	r0
    a4de:	0f 90       	pop	r0
    a4e0:	0f 90       	pop	r0
	if(comp->Src_In<=10 && comp->Heating==1 ){steps=(comp->Src_In)/10 * 100 ;}
    a4e2:	ca a8       	ldd	r12, Y+50	; 0x32
    a4e4:	db a8       	ldd	r13, Y+51	; 0x33
    a4e6:	ec a8       	ldd	r14, Y+52	; 0x34
    a4e8:	fd a8       	ldd	r15, Y+53	; 0x35
    a4ea:	20 e0       	ldi	r18, 0x00	; 0
    a4ec:	30 e0       	ldi	r19, 0x00	; 0
    a4ee:	40 e2       	ldi	r20, 0x20	; 32
    a4f0:	51 e4       	ldi	r21, 0x41	; 65
    a4f2:	c7 01       	movw	r24, r14
    a4f4:	b6 01       	movw	r22, r12
    a4f6:	1d d2       	rcall	.+1082   	; 0xa932 <__cmpsf2>
    a4f8:	18 16       	cp	r1, r24
    a4fa:	94 f0       	brlt	.+36     	; 0xa520 <Fuzzy+0x8c>
    a4fc:	8a 81       	ldd	r24, Y+2	; 0x02
    a4fe:	88 23       	and	r24, r24
    a500:	79 f0       	breq	.+30     	; 0xa520 <Fuzzy+0x8c>
    a502:	20 e0       	ldi	r18, 0x00	; 0
    a504:	30 e0       	ldi	r19, 0x00	; 0
    a506:	40 e2       	ldi	r20, 0x20	; 32
    a508:	51 e4       	ldi	r21, 0x41	; 65
    a50a:	c7 01       	movw	r24, r14
    a50c:	b6 01       	movw	r22, r12
    a50e:	15 d2       	rcall	.+1066   	; 0xa93a <__divsf3>
    a510:	20 e0       	ldi	r18, 0x00	; 0
    a512:	30 e0       	ldi	r19, 0x00	; 0
    a514:	48 ec       	ldi	r20, 0xC8	; 200
    a516:	52 e4       	ldi	r21, 0x42	; 66
    a518:	a4 d3       	rcall	.+1864   	; 0xac62 <__mulsf3>
    a51a:	77 d2       	rcall	.+1262   	; 0xaa0a <__fixsfsi>
    a51c:	7b 01       	movw	r14, r22
    a51e:	3b c1       	rjmp	.+630    	; 0xa796 <Fuzzy+0x302>
	else if(comp->Src_Out<=10 && comp->Cooling==1){steps=(comp->Src_Out)/10 * 100 ;}
    a520:	8e a8       	ldd	r8, Y+54	; 0x36
    a522:	9f a8       	ldd	r9, Y+55	; 0x37
    a524:	a8 ac       	ldd	r10, Y+56	; 0x38
    a526:	b9 ac       	ldd	r11, Y+57	; 0x39
    a528:	20 e0       	ldi	r18, 0x00	; 0
    a52a:	30 e0       	ldi	r19, 0x00	; 0
    a52c:	40 e2       	ldi	r20, 0x20	; 32
    a52e:	51 e4       	ldi	r21, 0x41	; 65
    a530:	c5 01       	movw	r24, r10
    a532:	b4 01       	movw	r22, r8
    a534:	fe d1       	rcall	.+1020   	; 0xa932 <__cmpsf2>
    a536:	18 16       	cp	r1, r24
    a538:	94 f0       	brlt	.+36     	; 0xa55e <Fuzzy+0xca>
    a53a:	8b 81       	ldd	r24, Y+3	; 0x03
    a53c:	88 23       	and	r24, r24
    a53e:	79 f0       	breq	.+30     	; 0xa55e <Fuzzy+0xca>
    a540:	20 e0       	ldi	r18, 0x00	; 0
    a542:	30 e0       	ldi	r19, 0x00	; 0
    a544:	40 e2       	ldi	r20, 0x20	; 32
    a546:	51 e4       	ldi	r21, 0x41	; 65
    a548:	c5 01       	movw	r24, r10
    a54a:	b4 01       	movw	r22, r8
    a54c:	f6 d1       	rcall	.+1004   	; 0xa93a <__divsf3>
    a54e:	20 e0       	ldi	r18, 0x00	; 0
    a550:	30 e0       	ldi	r19, 0x00	; 0
    a552:	48 ec       	ldi	r20, 0xC8	; 200
    a554:	52 e4       	ldi	r21, 0x42	; 66
    a556:	85 d3       	rcall	.+1802   	; 0xac62 <__mulsf3>
    a558:	58 d2       	rcall	.+1200   	; 0xaa0a <__fixsfsi>
    a55a:	7b 01       	movw	r14, r22
    a55c:	1c c1       	rjmp	.+568    	; 0xa796 <Fuzzy+0x302>
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps); }//comp->trvCorection;
	else if(comp->Src_In>10 && comp->Src_In<=20 && comp->Heating==1)  {steps = (comp->Src_In-10)/10 * 100 + 100;}
    a55e:	20 e0       	ldi	r18, 0x00	; 0
    a560:	30 e0       	ldi	r19, 0x00	; 0
    a562:	40 e2       	ldi	r20, 0x20	; 32
    a564:	51 e4       	ldi	r21, 0x41	; 65
    a566:	c7 01       	movw	r24, r14
    a568:	b6 01       	movw	r22, r12
    a56a:	32 d3       	rcall	.+1636   	; 0xabd0 <__gesf2>
    a56c:	18 16       	cp	r1, r24
    a56e:	2c f5       	brge	.+74     	; 0xa5ba <Fuzzy+0x126>
    a570:	20 e0       	ldi	r18, 0x00	; 0
    a572:	30 e0       	ldi	r19, 0x00	; 0
    a574:	40 ea       	ldi	r20, 0xA0	; 160
    a576:	51 e4       	ldi	r21, 0x41	; 65
    a578:	c7 01       	movw	r24, r14
    a57a:	b6 01       	movw	r22, r12
    a57c:	da d1       	rcall	.+948    	; 0xa932 <__cmpsf2>
    a57e:	18 16       	cp	r1, r24
    a580:	e4 f0       	brlt	.+56     	; 0xa5ba <Fuzzy+0x126>
    a582:	8a 81       	ldd	r24, Y+2	; 0x02
    a584:	88 23       	and	r24, r24
    a586:	c9 f0       	breq	.+50     	; 0xa5ba <Fuzzy+0x126>
    a588:	20 e0       	ldi	r18, 0x00	; 0
    a58a:	30 e0       	ldi	r19, 0x00	; 0
    a58c:	40 e2       	ldi	r20, 0x20	; 32
    a58e:	51 e4       	ldi	r21, 0x41	; 65
    a590:	c7 01       	movw	r24, r14
    a592:	b6 01       	movw	r22, r12
    a594:	69 d1       	rcall	.+722    	; 0xa868 <__subsf3>
    a596:	20 e0       	ldi	r18, 0x00	; 0
    a598:	30 e0       	ldi	r19, 0x00	; 0
    a59a:	40 e2       	ldi	r20, 0x20	; 32
    a59c:	51 e4       	ldi	r21, 0x41	; 65
    a59e:	cd d1       	rcall	.+922    	; 0xa93a <__divsf3>
    a5a0:	20 e0       	ldi	r18, 0x00	; 0
    a5a2:	30 e0       	ldi	r19, 0x00	; 0
    a5a4:	48 ec       	ldi	r20, 0xC8	; 200
    a5a6:	52 e4       	ldi	r21, 0x42	; 66
    a5a8:	5c d3       	rcall	.+1720   	; 0xac62 <__mulsf3>
    a5aa:	20 e0       	ldi	r18, 0x00	; 0
    a5ac:	30 e0       	ldi	r19, 0x00	; 0
    a5ae:	48 ec       	ldi	r20, 0xC8	; 200
    a5b0:	52 e4       	ldi	r21, 0x42	; 66
    a5b2:	5b d1       	rcall	.+694    	; 0xa86a <__addsf3>
    a5b4:	2a d2       	rcall	.+1108   	; 0xaa0a <__fixsfsi>
    a5b6:	7b 01       	movw	r14, r22
    a5b8:	ee c0       	rjmp	.+476    	; 0xa796 <Fuzzy+0x302>
	else if(comp->Src_Out>10 && comp->Src_Out<=20 && comp->Cooling==1)  {steps = (comp->Src_Out-10)/10 * 100 + 100;}	
    a5ba:	20 e0       	ldi	r18, 0x00	; 0
    a5bc:	30 e0       	ldi	r19, 0x00	; 0
    a5be:	40 e2       	ldi	r20, 0x20	; 32
    a5c0:	51 e4       	ldi	r21, 0x41	; 65
    a5c2:	c5 01       	movw	r24, r10
    a5c4:	b4 01       	movw	r22, r8
    a5c6:	04 d3       	rcall	.+1544   	; 0xabd0 <__gesf2>
    a5c8:	18 16       	cp	r1, r24
    a5ca:	2c f5       	brge	.+74     	; 0xa616 <Fuzzy+0x182>
    a5cc:	20 e0       	ldi	r18, 0x00	; 0
    a5ce:	30 e0       	ldi	r19, 0x00	; 0
    a5d0:	40 ea       	ldi	r20, 0xA0	; 160
    a5d2:	51 e4       	ldi	r21, 0x41	; 65
    a5d4:	c5 01       	movw	r24, r10
    a5d6:	b4 01       	movw	r22, r8
    a5d8:	ac d1       	rcall	.+856    	; 0xa932 <__cmpsf2>
    a5da:	18 16       	cp	r1, r24
    a5dc:	e4 f0       	brlt	.+56     	; 0xa616 <Fuzzy+0x182>
    a5de:	8b 81       	ldd	r24, Y+3	; 0x03
    a5e0:	88 23       	and	r24, r24
    a5e2:	c9 f0       	breq	.+50     	; 0xa616 <Fuzzy+0x182>
    a5e4:	20 e0       	ldi	r18, 0x00	; 0
    a5e6:	30 e0       	ldi	r19, 0x00	; 0
    a5e8:	40 e2       	ldi	r20, 0x20	; 32
    a5ea:	51 e4       	ldi	r21, 0x41	; 65
    a5ec:	c5 01       	movw	r24, r10
    a5ee:	b4 01       	movw	r22, r8
    a5f0:	3b d1       	rcall	.+630    	; 0xa868 <__subsf3>
    a5f2:	20 e0       	ldi	r18, 0x00	; 0
    a5f4:	30 e0       	ldi	r19, 0x00	; 0
    a5f6:	40 e2       	ldi	r20, 0x20	; 32
    a5f8:	51 e4       	ldi	r21, 0x41	; 65
    a5fa:	9f d1       	rcall	.+830    	; 0xa93a <__divsf3>
    a5fc:	20 e0       	ldi	r18, 0x00	; 0
    a5fe:	30 e0       	ldi	r19, 0x00	; 0
    a600:	48 ec       	ldi	r20, 0xC8	; 200
    a602:	52 e4       	ldi	r21, 0x42	; 66
    a604:	2e d3       	rcall	.+1628   	; 0xac62 <__mulsf3>
    a606:	20 e0       	ldi	r18, 0x00	; 0
    a608:	30 e0       	ldi	r19, 0x00	; 0
    a60a:	48 ec       	ldi	r20, 0xC8	; 200
    a60c:	52 e4       	ldi	r21, 0x42	; 66
    a60e:	2d d1       	rcall	.+602    	; 0xa86a <__addsf3>
    a610:	fc d1       	rcall	.+1016   	; 0xaa0a <__fixsfsi>
    a612:	7b 01       	movw	r14, r22
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps); }//;
	else if(comp->Src_In >20 && comp->Src_In<=30 && comp->Heating==1) {steps = (comp->Src_In-20)/10 * 100 + 150;}
    a614:	c0 c0       	rjmp	.+384    	; 0xa796 <Fuzzy+0x302>
    a616:	20 e0       	ldi	r18, 0x00	; 0
    a618:	30 e0       	ldi	r19, 0x00	; 0
    a61a:	40 ea       	ldi	r20, 0xA0	; 160
    a61c:	51 e4       	ldi	r21, 0x41	; 65
    a61e:	c7 01       	movw	r24, r14
    a620:	b6 01       	movw	r22, r12
    a622:	d6 d2       	rcall	.+1452   	; 0xabd0 <__gesf2>
    a624:	18 16       	cp	r1, r24
    a626:	2c f5       	brge	.+74     	; 0xa672 <Fuzzy+0x1de>
    a628:	20 e0       	ldi	r18, 0x00	; 0
    a62a:	30 e0       	ldi	r19, 0x00	; 0
    a62c:	40 ef       	ldi	r20, 0xF0	; 240
    a62e:	51 e4       	ldi	r21, 0x41	; 65
    a630:	c7 01       	movw	r24, r14
    a632:	b6 01       	movw	r22, r12
    a634:	7e d1       	rcall	.+764    	; 0xa932 <__cmpsf2>
    a636:	18 16       	cp	r1, r24
    a638:	e4 f0       	brlt	.+56     	; 0xa672 <Fuzzy+0x1de>
    a63a:	8a 81       	ldd	r24, Y+2	; 0x02
    a63c:	88 23       	and	r24, r24
    a63e:	c9 f0       	breq	.+50     	; 0xa672 <Fuzzy+0x1de>
    a640:	20 e0       	ldi	r18, 0x00	; 0
    a642:	30 e0       	ldi	r19, 0x00	; 0
    a644:	40 ea       	ldi	r20, 0xA0	; 160
    a646:	51 e4       	ldi	r21, 0x41	; 65
    a648:	c7 01       	movw	r24, r14
    a64a:	b6 01       	movw	r22, r12
    a64c:	0d d1       	rcall	.+538    	; 0xa868 <__subsf3>
    a64e:	20 e0       	ldi	r18, 0x00	; 0
    a650:	30 e0       	ldi	r19, 0x00	; 0
    a652:	40 e2       	ldi	r20, 0x20	; 32
    a654:	51 e4       	ldi	r21, 0x41	; 65
    a656:	71 d1       	rcall	.+738    	; 0xa93a <__divsf3>
    a658:	20 e0       	ldi	r18, 0x00	; 0
    a65a:	30 e0       	ldi	r19, 0x00	; 0
    a65c:	48 ec       	ldi	r20, 0xC8	; 200
    a65e:	52 e4       	ldi	r21, 0x42	; 66
    a660:	00 d3       	rcall	.+1536   	; 0xac62 <__mulsf3>
    a662:	20 e0       	ldi	r18, 0x00	; 0
    a664:	30 e0       	ldi	r19, 0x00	; 0
    a666:	46 e1       	ldi	r20, 0x16	; 22
    a668:	53 e4       	ldi	r21, 0x43	; 67
    a66a:	ff d0       	rcall	.+510    	; 0xa86a <__addsf3>
    a66c:	ce d1       	rcall	.+924    	; 0xaa0a <__fixsfsi>
    a66e:	7b 01       	movw	r14, r22
	else if(comp->Src_Out >20 && comp->Src_Out<=30 && comp->Cooling==1) {steps = (comp->Src_Out-20)/10 * 100 + 150;}	
    a670:	92 c0       	rjmp	.+292    	; 0xa796 <Fuzzy+0x302>
    a672:	20 e0       	ldi	r18, 0x00	; 0
    a674:	30 e0       	ldi	r19, 0x00	; 0
    a676:	40 ea       	ldi	r20, 0xA0	; 160
    a678:	51 e4       	ldi	r21, 0x41	; 65
    a67a:	c5 01       	movw	r24, r10
    a67c:	b4 01       	movw	r22, r8
    a67e:	a8 d2       	rcall	.+1360   	; 0xabd0 <__gesf2>
    a680:	18 16       	cp	r1, r24
    a682:	2c f5       	brge	.+74     	; 0xa6ce <Fuzzy+0x23a>
    a684:	20 e0       	ldi	r18, 0x00	; 0
    a686:	30 e0       	ldi	r19, 0x00	; 0
    a688:	40 ef       	ldi	r20, 0xF0	; 240
    a68a:	51 e4       	ldi	r21, 0x41	; 65
    a68c:	c5 01       	movw	r24, r10
    a68e:	b4 01       	movw	r22, r8
    a690:	50 d1       	rcall	.+672    	; 0xa932 <__cmpsf2>
    a692:	18 16       	cp	r1, r24
    a694:	e4 f0       	brlt	.+56     	; 0xa6ce <Fuzzy+0x23a>
    a696:	8b 81       	ldd	r24, Y+3	; 0x03
    a698:	88 23       	and	r24, r24
    a69a:	c9 f0       	breq	.+50     	; 0xa6ce <Fuzzy+0x23a>
    a69c:	20 e0       	ldi	r18, 0x00	; 0
    a69e:	30 e0       	ldi	r19, 0x00	; 0
    a6a0:	40 ea       	ldi	r20, 0xA0	; 160
    a6a2:	51 e4       	ldi	r21, 0x41	; 65
    a6a4:	c5 01       	movw	r24, r10
    a6a6:	b4 01       	movw	r22, r8
    a6a8:	df d0       	rcall	.+446    	; 0xa868 <__subsf3>
    a6aa:	20 e0       	ldi	r18, 0x00	; 0
    a6ac:	30 e0       	ldi	r19, 0x00	; 0
    a6ae:	40 e2       	ldi	r20, 0x20	; 32
    a6b0:	51 e4       	ldi	r21, 0x41	; 65
    a6b2:	43 d1       	rcall	.+646    	; 0xa93a <__divsf3>
    a6b4:	20 e0       	ldi	r18, 0x00	; 0
    a6b6:	30 e0       	ldi	r19, 0x00	; 0
    a6b8:	48 ec       	ldi	r20, 0xC8	; 200
    a6ba:	52 e4       	ldi	r21, 0x42	; 66
    a6bc:	d2 d2       	rcall	.+1444   	; 0xac62 <__mulsf3>
    a6be:	20 e0       	ldi	r18, 0x00	; 0
    a6c0:	30 e0       	ldi	r19, 0x00	; 0
    a6c2:	46 e1       	ldi	r20, 0x16	; 22
    a6c4:	53 e4       	ldi	r21, 0x43	; 67
    a6c6:	d1 d0       	rcall	.+418    	; 0xa86a <__addsf3>
    a6c8:	a0 d1       	rcall	.+832    	; 0xaa0a <__fixsfsi>
		
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps);}// comp->trvCorection;
	else if(comp->Src_In>30 && comp->Src_In<=40 && comp->Heating==1)  {steps = (comp->Src_In-30)/10 * 100 + 200;}
    a6ca:	7b 01       	movw	r14, r22
    a6cc:	64 c0       	rjmp	.+200    	; 0xa796 <Fuzzy+0x302>
    a6ce:	20 e0       	ldi	r18, 0x00	; 0
    a6d0:	30 e0       	ldi	r19, 0x00	; 0
    a6d2:	40 ef       	ldi	r20, 0xF0	; 240
    a6d4:	51 e4       	ldi	r21, 0x41	; 65
    a6d6:	c7 01       	movw	r24, r14
    a6d8:	b6 01       	movw	r22, r12
    a6da:	7a d2       	rcall	.+1268   	; 0xabd0 <__gesf2>
    a6dc:	18 16       	cp	r1, r24
    a6de:	2c f5       	brge	.+74     	; 0xa72a <Fuzzy+0x296>
    a6e0:	20 e0       	ldi	r18, 0x00	; 0
    a6e2:	30 e0       	ldi	r19, 0x00	; 0
    a6e4:	40 e2       	ldi	r20, 0x20	; 32
    a6e6:	52 e4       	ldi	r21, 0x42	; 66
    a6e8:	c7 01       	movw	r24, r14
    a6ea:	b6 01       	movw	r22, r12
    a6ec:	22 d1       	rcall	.+580    	; 0xa932 <__cmpsf2>
    a6ee:	18 16       	cp	r1, r24
    a6f0:	e4 f0       	brlt	.+56     	; 0xa72a <Fuzzy+0x296>
    a6f2:	8a 81       	ldd	r24, Y+2	; 0x02
    a6f4:	88 23       	and	r24, r24
    a6f6:	c9 f0       	breq	.+50     	; 0xa72a <Fuzzy+0x296>
    a6f8:	20 e0       	ldi	r18, 0x00	; 0
    a6fa:	30 e0       	ldi	r19, 0x00	; 0
    a6fc:	40 ef       	ldi	r20, 0xF0	; 240
    a6fe:	51 e4       	ldi	r21, 0x41	; 65
    a700:	c7 01       	movw	r24, r14
    a702:	b6 01       	movw	r22, r12
    a704:	b1 d0       	rcall	.+354    	; 0xa868 <__subsf3>
    a706:	20 e0       	ldi	r18, 0x00	; 0
    a708:	30 e0       	ldi	r19, 0x00	; 0
    a70a:	40 e2       	ldi	r20, 0x20	; 32
    a70c:	51 e4       	ldi	r21, 0x41	; 65
    a70e:	15 d1       	rcall	.+554    	; 0xa93a <__divsf3>
    a710:	20 e0       	ldi	r18, 0x00	; 0
    a712:	30 e0       	ldi	r19, 0x00	; 0
    a714:	48 ec       	ldi	r20, 0xC8	; 200
    a716:	52 e4       	ldi	r21, 0x42	; 66
    a718:	a4 d2       	rcall	.+1352   	; 0xac62 <__mulsf3>
    a71a:	20 e0       	ldi	r18, 0x00	; 0
    a71c:	30 e0       	ldi	r19, 0x00	; 0
    a71e:	48 e4       	ldi	r20, 0x48	; 72
    a720:	53 e4       	ldi	r21, 0x43	; 67
    a722:	a3 d0       	rcall	.+326    	; 0xa86a <__addsf3>
	else if(comp->Src_Out>30 && comp->Src_Out<=40 && comp->Cooling==1)  {steps = (comp->Src_Out-30)/10 * 100 + 200;}	
    a724:	72 d1       	rcall	.+740    	; 0xaa0a <__fixsfsi>
    a726:	7b 01       	movw	r14, r22
    a728:	36 c0       	rjmp	.+108    	; 0xa796 <Fuzzy+0x302>
    a72a:	20 e0       	ldi	r18, 0x00	; 0
    a72c:	30 e0       	ldi	r19, 0x00	; 0
    a72e:	40 ef       	ldi	r20, 0xF0	; 240
    a730:	51 e4       	ldi	r21, 0x41	; 65
    a732:	c5 01       	movw	r24, r10
    a734:	b4 01       	movw	r22, r8
    a736:	4c d2       	rcall	.+1176   	; 0xabd0 <__gesf2>
    a738:	18 16       	cp	r1, r24
    a73a:	2c f5       	brge	.+74     	; 0xa786 <Fuzzy+0x2f2>
    a73c:	20 e0       	ldi	r18, 0x00	; 0
    a73e:	30 e0       	ldi	r19, 0x00	; 0
    a740:	40 e2       	ldi	r20, 0x20	; 32
    a742:	52 e4       	ldi	r21, 0x42	; 66
    a744:	c5 01       	movw	r24, r10
    a746:	b4 01       	movw	r22, r8
    a748:	f4 d0       	rcall	.+488    	; 0xa932 <__cmpsf2>
    a74a:	18 16       	cp	r1, r24
    a74c:	fc f0       	brlt	.+62     	; 0xa78c <Fuzzy+0x2f8>
    a74e:	8b 81       	ldd	r24, Y+3	; 0x03
    a750:	88 23       	and	r24, r24
    a752:	f9 f0       	breq	.+62     	; 0xa792 <Fuzzy+0x2fe>
    a754:	20 e0       	ldi	r18, 0x00	; 0
    a756:	30 e0       	ldi	r19, 0x00	; 0
    a758:	40 ef       	ldi	r20, 0xF0	; 240
    a75a:	51 e4       	ldi	r21, 0x41	; 65
    a75c:	c5 01       	movw	r24, r10
    a75e:	b4 01       	movw	r22, r8
    a760:	83 d0       	rcall	.+262    	; 0xa868 <__subsf3>
    a762:	20 e0       	ldi	r18, 0x00	; 0
    a764:	30 e0       	ldi	r19, 0x00	; 0
    a766:	40 e2       	ldi	r20, 0x20	; 32
    a768:	51 e4       	ldi	r21, 0x41	; 65
    a76a:	e7 d0       	rcall	.+462    	; 0xa93a <__divsf3>
    a76c:	20 e0       	ldi	r18, 0x00	; 0
    a76e:	30 e0       	ldi	r19, 0x00	; 0
    a770:	48 ec       	ldi	r20, 0xC8	; 200
    a772:	52 e4       	ldi	r21, 0x42	; 66
    a774:	76 d2       	rcall	.+1260   	; 0xac62 <__mulsf3>
    a776:	20 e0       	ldi	r18, 0x00	; 0
    a778:	30 e0       	ldi	r19, 0x00	; 0
    a77a:	48 e4       	ldi	r20, 0x48	; 72
    a77c:	53 e4       	ldi	r21, 0x43	; 67
    a77e:	75 d0       	rcall	.+234    	; 0xa86a <__addsf3>
    a780:	44 d1       	rcall	.+648    	; 0xaa0a <__fixsfsi>
    a782:	7b 01       	movw	r14, r22
    a784:	08 c0       	rjmp	.+16     	; 0xa796 <Fuzzy+0x302>
    a786:	e1 2c       	mov	r14, r1
    a788:	f1 2c       	mov	r15, r1
    a78a:	05 c0       	rjmp	.+10     	; 0xa796 <Fuzzy+0x302>
	}
}
//----------------------------------------------------------------------------------------------------------
int Fuzzy(xCompressor *comp,int corection)
{
	int steps=0;
    a78c:	e1 2c       	mov	r14, r1
    a78e:	f1 2c       	mov	r15, r1
    a790:	02 c0       	rjmp	.+4      	; 0xa796 <Fuzzy+0x302>
    a792:	e1 2c       	mov	r14, r1
    a794:	f1 2c       	mov	r15, r1
    a796:	0e 19       	sub	r16, r14
    a798:	1f 09       	sbc	r17, r15
    a79a:	fe 01       	movw	r30, r28
		 //if(old_corection_2!=corection && comp->Index==2){comp->trvCorection=corection-steps;old_corection_2=corection;}
	//xSerialxPrintf(&xSerial3Port,"TRVcorection_%d = %d \r\n",comp->Index, corection);
			
	
	
	comp->trvCorection=corection-steps;
    a79c:	ea 59       	subi	r30, 0x9A	; 154
    a79e:	ff 4f       	sbci	r31, 0xFF	; 255
    a7a0:	11 83       	std	Z+1, r17	; 0x01
    a7a2:	00 83       	st	Z, r16
    a7a4:	38 96       	adiw	r30, 0x08	; 8
    a7a6:	80 81       	ld	r24, Z
    a7a8:	91 81       	ldd	r25, Z+1	; 0x01
	if(comp->Index==2)xSerialxPrintf(&xSerial3Port,"TRVcorection_2 = %d \r\n", comp->trvCorection);
    a7aa:	02 97       	sbiw	r24, 0x02	; 2
    a7ac:	91 f4       	brne	.+36     	; 0xa7d2 <Fuzzy+0x33e>
    a7ae:	1f 93       	push	r17
    a7b0:	0f 93       	push	r16
    a7b2:	8e e2       	ldi	r24, 0x2E	; 46
    a7b4:	96 e0       	ldi	r25, 0x06	; 6
    a7b6:	9f 93       	push	r25
    a7b8:	8f 93       	push	r24
    a7ba:	84 e9       	ldi	r24, 0x94	; 148
    a7bc:	97 e0       	ldi	r25, 0x07	; 7
    a7be:	9f 93       	push	r25
    a7c0:	8f 93       	push	r24
    a7c2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a7c6:	0f 90       	pop	r0
    a7c8:	0f 90       	pop	r0
    a7ca:	0f 90       	pop	r0
    a7cc:	0f 90       	pop	r0
    a7ce:	0f 90       	pop	r0
    a7d0:	0f 90       	pop	r0
    a7d2:	fe 01       	movw	r30, r28
    a7d4:	e2 59       	subi	r30, 0x92	; 146
    a7d6:	ff 4f       	sbci	r31, 0xFF	; 255
	if(comp->Index==1)xSerialxPrintf(&xSerial3Port,"TRVcorection_1 = %d \r\n", comp->trvCorection);
    a7d8:	80 81       	ld	r24, Z
    a7da:	91 81       	ldd	r25, Z+1	; 0x01
    a7dc:	01 97       	sbiw	r24, 0x01	; 1
    a7de:	a9 f4       	brne	.+42     	; 0xa80a <Fuzzy+0x376>
    a7e0:	38 97       	sbiw	r30, 0x08	; 8
    a7e2:	81 81       	ldd	r24, Z+1	; 0x01
    a7e4:	8f 93       	push	r24
    a7e6:	80 81       	ld	r24, Z
    a7e8:	8f 93       	push	r24
    a7ea:	85 e4       	ldi	r24, 0x45	; 69
    a7ec:	96 e0       	ldi	r25, 0x06	; 6
    a7ee:	9f 93       	push	r25
    a7f0:	8f 93       	push	r24
    a7f2:	84 e9       	ldi	r24, 0x94	; 148
    a7f4:	97 e0       	ldi	r25, 0x07	; 7
    a7f6:	9f 93       	push	r25
    a7f8:	8f 93       	push	r24
    a7fa:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a7fe:	0f 90       	pop	r0
    a800:	0f 90       	pop	r0
    a802:	0f 90       	pop	r0
    a804:	0f 90       	pop	r0
    a806:	0f 90       	pop	r0
    a808:	0f 90       	pop	r0
    a80a:	fe 01       	movw	r30, r28
    a80c:	ea 59       	subi	r30, 0x9A	; 154
    a80e:	ff 4f       	sbci	r31, 0xFF	; 255
	steps=steps+comp->trvCorection;		
    a810:	80 81       	ld	r24, Z
    a812:	91 81       	ldd	r25, Z+1	; 0x01
    a814:	b7 01       	movw	r22, r14
	comp->Steps=steps - comp->Trv_position;
    a816:	68 0f       	add	r22, r24
    a818:	79 1f       	adc	r23, r25
    a81a:	34 96       	adiw	r30, 0x04	; 4
    a81c:	80 81       	ld	r24, Z
    a81e:	91 81       	ldd	r25, Z+1	; 0x01
    a820:	9b 01       	movw	r18, r22
    a822:	28 1b       	sub	r18, r24
    a824:	39 0b       	sbc	r19, r25
    a826:	c9 01       	movw	r24, r18
    a828:	c8 59       	subi	r28, 0x98	; 152
    a82a:	df 4f       	sbci	r29, 0xFF	; 255
    a82c:	39 83       	std	Y+1, r19	; 0x01
    a82e:	28 83       	st	Y, r18
    a830:	df 91       	pop	r29
    a832:	cf 91       	pop	r28
    a834:	1f 91       	pop	r17

	return comp->Steps;
}
    a836:	0f 91       	pop	r16
    a838:	ff 90       	pop	r15
    a83a:	ef 90       	pop	r14
    a83c:	df 90       	pop	r13
    a83e:	cf 90       	pop	r12
    a840:	bf 90       	pop	r11
    a842:	af 90       	pop	r10
    a844:	9f 90       	pop	r9
    a846:	8f 90       	pop	r8
    a848:	08 95       	ret

0000a84a <calibration>:
    a84a:	21 e0       	ldi	r18, 0x01	; 1
    a84c:	fc 01       	movw	r30, r24
    a84e:	27 83       	std	Z+7, r18	; 0x07
////////////////////////////////////////////////////////////////////////////////////////////////////////
void calibration(xCompressor *comp)
{
	comp->calibrate=true;
	comp->Steps=-240;
    a850:	e8 59       	subi	r30, 0x98	; 152
    a852:	ff 4f       	sbci	r31, 0xFF	; 255
    a854:	20 e1       	ldi	r18, 0x10	; 16
    a856:	3f ef       	ldi	r19, 0xFF	; 255
    a858:	31 83       	std	Z+1, r19	; 0x01
    a85a:	20 83       	st	Z, r18
	comp->Trv_position=240;
    a85c:	32 96       	adiw	r30, 0x02	; 2
    a85e:	20 ef       	ldi	r18, 0xF0	; 240
    a860:	30 e0       	ldi	r19, 0x00	; 0
    a862:	31 83       	std	Z+1, r19	; 0x01
    a864:	20 83       	st	Z, r18
    a866:	08 95       	ret

0000a868 <__subsf3>:
    a868:	50 58       	subi	r21, 0x80	; 128

0000a86a <__addsf3>:
    a86a:	bb 27       	eor	r27, r27
    a86c:	aa 27       	eor	r26, r26
    a86e:	0e d0       	rcall	.+28     	; 0xa88c <__addsf3x>
    a870:	75 c1       	rjmp	.+746    	; 0xab5c <__fp_round>
    a872:	66 d1       	rcall	.+716    	; 0xab40 <__fp_pscA>
    a874:	30 f0       	brcs	.+12     	; 0xa882 <__addsf3+0x18>
    a876:	6b d1       	rcall	.+726    	; 0xab4e <__fp_pscB>
    a878:	20 f0       	brcs	.+8      	; 0xa882 <__addsf3+0x18>
    a87a:	31 f4       	brne	.+12     	; 0xa888 <__addsf3+0x1e>
    a87c:	9f 3f       	cpi	r25, 0xFF	; 255
    a87e:	11 f4       	brne	.+4      	; 0xa884 <__addsf3+0x1a>
    a880:	1e f4       	brtc	.+6      	; 0xa888 <__addsf3+0x1e>
    a882:	5b c1       	rjmp	.+694    	; 0xab3a <__fp_nan>
    a884:	0e f4       	brtc	.+2      	; 0xa888 <__addsf3+0x1e>
    a886:	e0 95       	com	r30
    a888:	e7 fb       	bst	r30, 7
    a88a:	51 c1       	rjmp	.+674    	; 0xab2e <__fp_inf>

0000a88c <__addsf3x>:
    a88c:	e9 2f       	mov	r30, r25
    a88e:	77 d1       	rcall	.+750    	; 0xab7e <__fp_split3>
    a890:	80 f3       	brcs	.-32     	; 0xa872 <__addsf3+0x8>
    a892:	ba 17       	cp	r27, r26
    a894:	62 07       	cpc	r22, r18
    a896:	73 07       	cpc	r23, r19
    a898:	84 07       	cpc	r24, r20
    a89a:	95 07       	cpc	r25, r21
    a89c:	18 f0       	brcs	.+6      	; 0xa8a4 <__addsf3x+0x18>
    a89e:	71 f4       	brne	.+28     	; 0xa8bc <__addsf3x+0x30>
    a8a0:	9e f5       	brtc	.+102    	; 0xa908 <__addsf3x+0x7c>
    a8a2:	8f c1       	rjmp	.+798    	; 0xabc2 <__fp_zero>
    a8a4:	0e f4       	brtc	.+2      	; 0xa8a8 <__addsf3x+0x1c>
    a8a6:	e0 95       	com	r30
    a8a8:	0b 2e       	mov	r0, r27
    a8aa:	ba 2f       	mov	r27, r26
    a8ac:	a0 2d       	mov	r26, r0
    a8ae:	0b 01       	movw	r0, r22
    a8b0:	b9 01       	movw	r22, r18
    a8b2:	90 01       	movw	r18, r0
    a8b4:	0c 01       	movw	r0, r24
    a8b6:	ca 01       	movw	r24, r20
    a8b8:	a0 01       	movw	r20, r0
    a8ba:	11 24       	eor	r1, r1
    a8bc:	ff 27       	eor	r31, r31
    a8be:	59 1b       	sub	r21, r25
    a8c0:	99 f0       	breq	.+38     	; 0xa8e8 <__addsf3x+0x5c>
    a8c2:	59 3f       	cpi	r21, 0xF9	; 249
    a8c4:	50 f4       	brcc	.+20     	; 0xa8da <__addsf3x+0x4e>
    a8c6:	50 3e       	cpi	r21, 0xE0	; 224
    a8c8:	68 f1       	brcs	.+90     	; 0xa924 <__addsf3x+0x98>
    a8ca:	1a 16       	cp	r1, r26
    a8cc:	f0 40       	sbci	r31, 0x00	; 0
    a8ce:	a2 2f       	mov	r26, r18
    a8d0:	23 2f       	mov	r18, r19
    a8d2:	34 2f       	mov	r19, r20
    a8d4:	44 27       	eor	r20, r20
    a8d6:	58 5f       	subi	r21, 0xF8	; 248
    a8d8:	f3 cf       	rjmp	.-26     	; 0xa8c0 <__addsf3x+0x34>
    a8da:	46 95       	lsr	r20
    a8dc:	37 95       	ror	r19
    a8de:	27 95       	ror	r18
    a8e0:	a7 95       	ror	r26
    a8e2:	f0 40       	sbci	r31, 0x00	; 0
    a8e4:	53 95       	inc	r21
    a8e6:	c9 f7       	brne	.-14     	; 0xa8da <__addsf3x+0x4e>
    a8e8:	7e f4       	brtc	.+30     	; 0xa908 <__addsf3x+0x7c>
    a8ea:	1f 16       	cp	r1, r31
    a8ec:	ba 0b       	sbc	r27, r26
    a8ee:	62 0b       	sbc	r22, r18
    a8f0:	73 0b       	sbc	r23, r19
    a8f2:	84 0b       	sbc	r24, r20
    a8f4:	ba f0       	brmi	.+46     	; 0xa924 <__addsf3x+0x98>
    a8f6:	91 50       	subi	r25, 0x01	; 1
    a8f8:	a1 f0       	breq	.+40     	; 0xa922 <__addsf3x+0x96>
    a8fa:	ff 0f       	add	r31, r31
    a8fc:	bb 1f       	adc	r27, r27
    a8fe:	66 1f       	adc	r22, r22
    a900:	77 1f       	adc	r23, r23
    a902:	88 1f       	adc	r24, r24
    a904:	c2 f7       	brpl	.-16     	; 0xa8f6 <__addsf3x+0x6a>
    a906:	0e c0       	rjmp	.+28     	; 0xa924 <__addsf3x+0x98>
    a908:	ba 0f       	add	r27, r26
    a90a:	62 1f       	adc	r22, r18
    a90c:	73 1f       	adc	r23, r19
    a90e:	84 1f       	adc	r24, r20
    a910:	48 f4       	brcc	.+18     	; 0xa924 <__addsf3x+0x98>
    a912:	87 95       	ror	r24
    a914:	77 95       	ror	r23
    a916:	67 95       	ror	r22
    a918:	b7 95       	ror	r27
    a91a:	f7 95       	ror	r31
    a91c:	9e 3f       	cpi	r25, 0xFE	; 254
    a91e:	08 f0       	brcs	.+2      	; 0xa922 <__addsf3x+0x96>
    a920:	b3 cf       	rjmp	.-154    	; 0xa888 <__addsf3+0x1e>
    a922:	93 95       	inc	r25
    a924:	88 0f       	add	r24, r24
    a926:	08 f0       	brcs	.+2      	; 0xa92a <__addsf3x+0x9e>
    a928:	99 27       	eor	r25, r25
    a92a:	ee 0f       	add	r30, r30
    a92c:	97 95       	ror	r25
    a92e:	87 95       	ror	r24
    a930:	08 95       	ret

0000a932 <__cmpsf2>:
    a932:	d9 d0       	rcall	.+434    	; 0xaae6 <__fp_cmp>
    a934:	08 f4       	brcc	.+2      	; 0xa938 <__cmpsf2+0x6>
    a936:	81 e0       	ldi	r24, 0x01	; 1
    a938:	08 95       	ret

0000a93a <__divsf3>:
    a93a:	0c d0       	rcall	.+24     	; 0xa954 <__divsf3x>
    a93c:	0f c1       	rjmp	.+542    	; 0xab5c <__fp_round>
    a93e:	07 d1       	rcall	.+526    	; 0xab4e <__fp_pscB>
    a940:	40 f0       	brcs	.+16     	; 0xa952 <__divsf3+0x18>
    a942:	fe d0       	rcall	.+508    	; 0xab40 <__fp_pscA>
    a944:	30 f0       	brcs	.+12     	; 0xa952 <__divsf3+0x18>
    a946:	21 f4       	brne	.+8      	; 0xa950 <__divsf3+0x16>
    a948:	5f 3f       	cpi	r21, 0xFF	; 255
    a94a:	19 f0       	breq	.+6      	; 0xa952 <__divsf3+0x18>
    a94c:	f0 c0       	rjmp	.+480    	; 0xab2e <__fp_inf>
    a94e:	51 11       	cpse	r21, r1
    a950:	39 c1       	rjmp	.+626    	; 0xabc4 <__fp_szero>
    a952:	f3 c0       	rjmp	.+486    	; 0xab3a <__fp_nan>

0000a954 <__divsf3x>:
    a954:	14 d1       	rcall	.+552    	; 0xab7e <__fp_split3>
    a956:	98 f3       	brcs	.-26     	; 0xa93e <__divsf3+0x4>

0000a958 <__divsf3_pse>:
    a958:	99 23       	and	r25, r25
    a95a:	c9 f3       	breq	.-14     	; 0xa94e <__divsf3+0x14>
    a95c:	55 23       	and	r21, r21
    a95e:	b1 f3       	breq	.-20     	; 0xa94c <__divsf3+0x12>
    a960:	95 1b       	sub	r25, r21
    a962:	55 0b       	sbc	r21, r21
    a964:	bb 27       	eor	r27, r27
    a966:	aa 27       	eor	r26, r26
    a968:	62 17       	cp	r22, r18
    a96a:	73 07       	cpc	r23, r19
    a96c:	84 07       	cpc	r24, r20
    a96e:	38 f0       	brcs	.+14     	; 0xa97e <__divsf3_pse+0x26>
    a970:	9f 5f       	subi	r25, 0xFF	; 255
    a972:	5f 4f       	sbci	r21, 0xFF	; 255
    a974:	22 0f       	add	r18, r18
    a976:	33 1f       	adc	r19, r19
    a978:	44 1f       	adc	r20, r20
    a97a:	aa 1f       	adc	r26, r26
    a97c:	a9 f3       	breq	.-22     	; 0xa968 <__divsf3_pse+0x10>
    a97e:	33 d0       	rcall	.+102    	; 0xa9e6 <__divsf3_pse+0x8e>
    a980:	0e 2e       	mov	r0, r30
    a982:	3a f0       	brmi	.+14     	; 0xa992 <__divsf3_pse+0x3a>
    a984:	e0 e8       	ldi	r30, 0x80	; 128
    a986:	30 d0       	rcall	.+96     	; 0xa9e8 <__divsf3_pse+0x90>
    a988:	91 50       	subi	r25, 0x01	; 1
    a98a:	50 40       	sbci	r21, 0x00	; 0
    a98c:	e6 95       	lsr	r30
    a98e:	00 1c       	adc	r0, r0
    a990:	ca f7       	brpl	.-14     	; 0xa984 <__divsf3_pse+0x2c>
    a992:	29 d0       	rcall	.+82     	; 0xa9e6 <__divsf3_pse+0x8e>
    a994:	fe 2f       	mov	r31, r30
    a996:	27 d0       	rcall	.+78     	; 0xa9e6 <__divsf3_pse+0x8e>
    a998:	66 0f       	add	r22, r22
    a99a:	77 1f       	adc	r23, r23
    a99c:	88 1f       	adc	r24, r24
    a99e:	bb 1f       	adc	r27, r27
    a9a0:	26 17       	cp	r18, r22
    a9a2:	37 07       	cpc	r19, r23
    a9a4:	48 07       	cpc	r20, r24
    a9a6:	ab 07       	cpc	r26, r27
    a9a8:	b0 e8       	ldi	r27, 0x80	; 128
    a9aa:	09 f0       	breq	.+2      	; 0xa9ae <__divsf3_pse+0x56>
    a9ac:	bb 0b       	sbc	r27, r27
    a9ae:	80 2d       	mov	r24, r0
    a9b0:	bf 01       	movw	r22, r30
    a9b2:	ff 27       	eor	r31, r31
    a9b4:	93 58       	subi	r25, 0x83	; 131
    a9b6:	5f 4f       	sbci	r21, 0xFF	; 255
    a9b8:	2a f0       	brmi	.+10     	; 0xa9c4 <__divsf3_pse+0x6c>
    a9ba:	9e 3f       	cpi	r25, 0xFE	; 254
    a9bc:	51 05       	cpc	r21, r1
    a9be:	68 f0       	brcs	.+26     	; 0xa9da <__divsf3_pse+0x82>
    a9c0:	b6 c0       	rjmp	.+364    	; 0xab2e <__fp_inf>
    a9c2:	00 c1       	rjmp	.+512    	; 0xabc4 <__fp_szero>
    a9c4:	5f 3f       	cpi	r21, 0xFF	; 255
    a9c6:	ec f3       	brlt	.-6      	; 0xa9c2 <__divsf3_pse+0x6a>
    a9c8:	98 3e       	cpi	r25, 0xE8	; 232
    a9ca:	dc f3       	brlt	.-10     	; 0xa9c2 <__divsf3_pse+0x6a>
    a9cc:	86 95       	lsr	r24
    a9ce:	77 95       	ror	r23
    a9d0:	67 95       	ror	r22
    a9d2:	b7 95       	ror	r27
    a9d4:	f7 95       	ror	r31
    a9d6:	9f 5f       	subi	r25, 0xFF	; 255
    a9d8:	c9 f7       	brne	.-14     	; 0xa9cc <__divsf3_pse+0x74>
    a9da:	88 0f       	add	r24, r24
    a9dc:	91 1d       	adc	r25, r1
    a9de:	96 95       	lsr	r25
    a9e0:	87 95       	ror	r24
    a9e2:	97 f9       	bld	r25, 7
    a9e4:	08 95       	ret
    a9e6:	e1 e0       	ldi	r30, 0x01	; 1
    a9e8:	66 0f       	add	r22, r22
    a9ea:	77 1f       	adc	r23, r23
    a9ec:	88 1f       	adc	r24, r24
    a9ee:	bb 1f       	adc	r27, r27
    a9f0:	62 17       	cp	r22, r18
    a9f2:	73 07       	cpc	r23, r19
    a9f4:	84 07       	cpc	r24, r20
    a9f6:	ba 07       	cpc	r27, r26
    a9f8:	20 f0       	brcs	.+8      	; 0xaa02 <__divsf3_pse+0xaa>
    a9fa:	62 1b       	sub	r22, r18
    a9fc:	73 0b       	sbc	r23, r19
    a9fe:	84 0b       	sbc	r24, r20
    aa00:	ba 0b       	sbc	r27, r26
    aa02:	ee 1f       	adc	r30, r30
    aa04:	88 f7       	brcc	.-30     	; 0xa9e8 <__divsf3_pse+0x90>
    aa06:	e0 95       	com	r30
    aa08:	08 95       	ret

0000aa0a <__fixsfsi>:
    aa0a:	04 d0       	rcall	.+8      	; 0xaa14 <__fixunssfsi>
    aa0c:	68 94       	set
    aa0e:	b1 11       	cpse	r27, r1
    aa10:	d9 c0       	rjmp	.+434    	; 0xabc4 <__fp_szero>
    aa12:	08 95       	ret

0000aa14 <__fixunssfsi>:
    aa14:	bc d0       	rcall	.+376    	; 0xab8e <__fp_splitA>
    aa16:	88 f0       	brcs	.+34     	; 0xaa3a <__fixunssfsi+0x26>
    aa18:	9f 57       	subi	r25, 0x7F	; 127
    aa1a:	90 f0       	brcs	.+36     	; 0xaa40 <__fixunssfsi+0x2c>
    aa1c:	b9 2f       	mov	r27, r25
    aa1e:	99 27       	eor	r25, r25
    aa20:	b7 51       	subi	r27, 0x17	; 23
    aa22:	a0 f0       	brcs	.+40     	; 0xaa4c <__fixunssfsi+0x38>
    aa24:	d1 f0       	breq	.+52     	; 0xaa5a <__fixunssfsi+0x46>
    aa26:	66 0f       	add	r22, r22
    aa28:	77 1f       	adc	r23, r23
    aa2a:	88 1f       	adc	r24, r24
    aa2c:	99 1f       	adc	r25, r25
    aa2e:	1a f0       	brmi	.+6      	; 0xaa36 <__fixunssfsi+0x22>
    aa30:	ba 95       	dec	r27
    aa32:	c9 f7       	brne	.-14     	; 0xaa26 <__fixunssfsi+0x12>
    aa34:	12 c0       	rjmp	.+36     	; 0xaa5a <__fixunssfsi+0x46>
    aa36:	b1 30       	cpi	r27, 0x01	; 1
    aa38:	81 f0       	breq	.+32     	; 0xaa5a <__fixunssfsi+0x46>
    aa3a:	c3 d0       	rcall	.+390    	; 0xabc2 <__fp_zero>
    aa3c:	b1 e0       	ldi	r27, 0x01	; 1
    aa3e:	08 95       	ret
    aa40:	c0 c0       	rjmp	.+384    	; 0xabc2 <__fp_zero>
    aa42:	67 2f       	mov	r22, r23
    aa44:	78 2f       	mov	r23, r24
    aa46:	88 27       	eor	r24, r24
    aa48:	b8 5f       	subi	r27, 0xF8	; 248
    aa4a:	39 f0       	breq	.+14     	; 0xaa5a <__fixunssfsi+0x46>
    aa4c:	b9 3f       	cpi	r27, 0xF9	; 249
    aa4e:	cc f3       	brlt	.-14     	; 0xaa42 <__fixunssfsi+0x2e>
    aa50:	86 95       	lsr	r24
    aa52:	77 95       	ror	r23
    aa54:	67 95       	ror	r22
    aa56:	b3 95       	inc	r27
    aa58:	d9 f7       	brne	.-10     	; 0xaa50 <__fixunssfsi+0x3c>
    aa5a:	3e f4       	brtc	.+14     	; 0xaa6a <__fixunssfsi+0x56>
    aa5c:	90 95       	com	r25
    aa5e:	80 95       	com	r24
    aa60:	70 95       	com	r23
    aa62:	61 95       	neg	r22
    aa64:	7f 4f       	sbci	r23, 0xFF	; 255
    aa66:	8f 4f       	sbci	r24, 0xFF	; 255
    aa68:	9f 4f       	sbci	r25, 0xFF	; 255
    aa6a:	08 95       	ret

0000aa6c <__floatunsisf>:
    aa6c:	e8 94       	clt
    aa6e:	09 c0       	rjmp	.+18     	; 0xaa82 <__floatsisf+0x12>

0000aa70 <__floatsisf>:
    aa70:	97 fb       	bst	r25, 7
    aa72:	3e f4       	brtc	.+14     	; 0xaa82 <__floatsisf+0x12>
    aa74:	90 95       	com	r25
    aa76:	80 95       	com	r24
    aa78:	70 95       	com	r23
    aa7a:	61 95       	neg	r22
    aa7c:	7f 4f       	sbci	r23, 0xFF	; 255
    aa7e:	8f 4f       	sbci	r24, 0xFF	; 255
    aa80:	9f 4f       	sbci	r25, 0xFF	; 255
    aa82:	99 23       	and	r25, r25
    aa84:	a9 f0       	breq	.+42     	; 0xaab0 <__floatsisf+0x40>
    aa86:	f9 2f       	mov	r31, r25
    aa88:	96 e9       	ldi	r25, 0x96	; 150
    aa8a:	bb 27       	eor	r27, r27
    aa8c:	93 95       	inc	r25
    aa8e:	f6 95       	lsr	r31
    aa90:	87 95       	ror	r24
    aa92:	77 95       	ror	r23
    aa94:	67 95       	ror	r22
    aa96:	b7 95       	ror	r27
    aa98:	f1 11       	cpse	r31, r1
    aa9a:	f8 cf       	rjmp	.-16     	; 0xaa8c <__floatsisf+0x1c>
    aa9c:	fa f4       	brpl	.+62     	; 0xaadc <__floatsisf+0x6c>
    aa9e:	bb 0f       	add	r27, r27
    aaa0:	11 f4       	brne	.+4      	; 0xaaa6 <__floatsisf+0x36>
    aaa2:	60 ff       	sbrs	r22, 0
    aaa4:	1b c0       	rjmp	.+54     	; 0xaadc <__floatsisf+0x6c>
    aaa6:	6f 5f       	subi	r22, 0xFF	; 255
    aaa8:	7f 4f       	sbci	r23, 0xFF	; 255
    aaaa:	8f 4f       	sbci	r24, 0xFF	; 255
    aaac:	9f 4f       	sbci	r25, 0xFF	; 255
    aaae:	16 c0       	rjmp	.+44     	; 0xaadc <__floatsisf+0x6c>
    aab0:	88 23       	and	r24, r24
    aab2:	11 f0       	breq	.+4      	; 0xaab8 <__floatsisf+0x48>
    aab4:	96 e9       	ldi	r25, 0x96	; 150
    aab6:	11 c0       	rjmp	.+34     	; 0xaada <__floatsisf+0x6a>
    aab8:	77 23       	and	r23, r23
    aaba:	21 f0       	breq	.+8      	; 0xaac4 <__floatsisf+0x54>
    aabc:	9e e8       	ldi	r25, 0x8E	; 142
    aabe:	87 2f       	mov	r24, r23
    aac0:	76 2f       	mov	r23, r22
    aac2:	05 c0       	rjmp	.+10     	; 0xaace <__floatsisf+0x5e>
    aac4:	66 23       	and	r22, r22
    aac6:	71 f0       	breq	.+28     	; 0xaae4 <__floatsisf+0x74>
    aac8:	96 e8       	ldi	r25, 0x86	; 134
    aaca:	86 2f       	mov	r24, r22
    aacc:	70 e0       	ldi	r23, 0x00	; 0
    aace:	60 e0       	ldi	r22, 0x00	; 0
    aad0:	2a f0       	brmi	.+10     	; 0xaadc <__floatsisf+0x6c>
    aad2:	9a 95       	dec	r25
    aad4:	66 0f       	add	r22, r22
    aad6:	77 1f       	adc	r23, r23
    aad8:	88 1f       	adc	r24, r24
    aada:	da f7       	brpl	.-10     	; 0xaad2 <__floatsisf+0x62>
    aadc:	88 0f       	add	r24, r24
    aade:	96 95       	lsr	r25
    aae0:	87 95       	ror	r24
    aae2:	97 f9       	bld	r25, 7
    aae4:	08 95       	ret

0000aae6 <__fp_cmp>:
    aae6:	99 0f       	add	r25, r25
    aae8:	00 08       	sbc	r0, r0
    aaea:	55 0f       	add	r21, r21
    aaec:	aa 0b       	sbc	r26, r26
    aaee:	e0 e8       	ldi	r30, 0x80	; 128
    aaf0:	fe ef       	ldi	r31, 0xFE	; 254
    aaf2:	16 16       	cp	r1, r22
    aaf4:	17 06       	cpc	r1, r23
    aaf6:	e8 07       	cpc	r30, r24
    aaf8:	f9 07       	cpc	r31, r25
    aafa:	c0 f0       	brcs	.+48     	; 0xab2c <__fp_cmp+0x46>
    aafc:	12 16       	cp	r1, r18
    aafe:	13 06       	cpc	r1, r19
    ab00:	e4 07       	cpc	r30, r20
    ab02:	f5 07       	cpc	r31, r21
    ab04:	98 f0       	brcs	.+38     	; 0xab2c <__fp_cmp+0x46>
    ab06:	62 1b       	sub	r22, r18
    ab08:	73 0b       	sbc	r23, r19
    ab0a:	84 0b       	sbc	r24, r20
    ab0c:	95 0b       	sbc	r25, r21
    ab0e:	39 f4       	brne	.+14     	; 0xab1e <__fp_cmp+0x38>
    ab10:	0a 26       	eor	r0, r26
    ab12:	61 f0       	breq	.+24     	; 0xab2c <__fp_cmp+0x46>
    ab14:	23 2b       	or	r18, r19
    ab16:	24 2b       	or	r18, r20
    ab18:	25 2b       	or	r18, r21
    ab1a:	21 f4       	brne	.+8      	; 0xab24 <__fp_cmp+0x3e>
    ab1c:	08 95       	ret
    ab1e:	0a 26       	eor	r0, r26
    ab20:	09 f4       	brne	.+2      	; 0xab24 <__fp_cmp+0x3e>
    ab22:	a1 40       	sbci	r26, 0x01	; 1
    ab24:	a6 95       	lsr	r26
    ab26:	8f ef       	ldi	r24, 0xFF	; 255
    ab28:	81 1d       	adc	r24, r1
    ab2a:	81 1d       	adc	r24, r1
    ab2c:	08 95       	ret

0000ab2e <__fp_inf>:
    ab2e:	97 f9       	bld	r25, 7
    ab30:	9f 67       	ori	r25, 0x7F	; 127
    ab32:	80 e8       	ldi	r24, 0x80	; 128
    ab34:	70 e0       	ldi	r23, 0x00	; 0
    ab36:	60 e0       	ldi	r22, 0x00	; 0
    ab38:	08 95       	ret

0000ab3a <__fp_nan>:
    ab3a:	9f ef       	ldi	r25, 0xFF	; 255
    ab3c:	80 ec       	ldi	r24, 0xC0	; 192
    ab3e:	08 95       	ret

0000ab40 <__fp_pscA>:
    ab40:	00 24       	eor	r0, r0
    ab42:	0a 94       	dec	r0
    ab44:	16 16       	cp	r1, r22
    ab46:	17 06       	cpc	r1, r23
    ab48:	18 06       	cpc	r1, r24
    ab4a:	09 06       	cpc	r0, r25
    ab4c:	08 95       	ret

0000ab4e <__fp_pscB>:
    ab4e:	00 24       	eor	r0, r0
    ab50:	0a 94       	dec	r0
    ab52:	12 16       	cp	r1, r18
    ab54:	13 06       	cpc	r1, r19
    ab56:	14 06       	cpc	r1, r20
    ab58:	05 06       	cpc	r0, r21
    ab5a:	08 95       	ret

0000ab5c <__fp_round>:
    ab5c:	09 2e       	mov	r0, r25
    ab5e:	03 94       	inc	r0
    ab60:	00 0c       	add	r0, r0
    ab62:	11 f4       	brne	.+4      	; 0xab68 <__fp_round+0xc>
    ab64:	88 23       	and	r24, r24
    ab66:	52 f0       	brmi	.+20     	; 0xab7c <__fp_round+0x20>
    ab68:	bb 0f       	add	r27, r27
    ab6a:	40 f4       	brcc	.+16     	; 0xab7c <__fp_round+0x20>
    ab6c:	bf 2b       	or	r27, r31
    ab6e:	11 f4       	brne	.+4      	; 0xab74 <__fp_round+0x18>
    ab70:	60 ff       	sbrs	r22, 0
    ab72:	04 c0       	rjmp	.+8      	; 0xab7c <__fp_round+0x20>
    ab74:	6f 5f       	subi	r22, 0xFF	; 255
    ab76:	7f 4f       	sbci	r23, 0xFF	; 255
    ab78:	8f 4f       	sbci	r24, 0xFF	; 255
    ab7a:	9f 4f       	sbci	r25, 0xFF	; 255
    ab7c:	08 95       	ret

0000ab7e <__fp_split3>:
    ab7e:	57 fd       	sbrc	r21, 7
    ab80:	90 58       	subi	r25, 0x80	; 128
    ab82:	44 0f       	add	r20, r20
    ab84:	55 1f       	adc	r21, r21
    ab86:	59 f0       	breq	.+22     	; 0xab9e <__fp_splitA+0x10>
    ab88:	5f 3f       	cpi	r21, 0xFF	; 255
    ab8a:	71 f0       	breq	.+28     	; 0xaba8 <__fp_splitA+0x1a>
    ab8c:	47 95       	ror	r20

0000ab8e <__fp_splitA>:
    ab8e:	88 0f       	add	r24, r24
    ab90:	97 fb       	bst	r25, 7
    ab92:	99 1f       	adc	r25, r25
    ab94:	61 f0       	breq	.+24     	; 0xabae <__fp_splitA+0x20>
    ab96:	9f 3f       	cpi	r25, 0xFF	; 255
    ab98:	79 f0       	breq	.+30     	; 0xabb8 <__fp_splitA+0x2a>
    ab9a:	87 95       	ror	r24
    ab9c:	08 95       	ret
    ab9e:	12 16       	cp	r1, r18
    aba0:	13 06       	cpc	r1, r19
    aba2:	14 06       	cpc	r1, r20
    aba4:	55 1f       	adc	r21, r21
    aba6:	f2 cf       	rjmp	.-28     	; 0xab8c <__fp_split3+0xe>
    aba8:	46 95       	lsr	r20
    abaa:	f1 df       	rcall	.-30     	; 0xab8e <__fp_splitA>
    abac:	08 c0       	rjmp	.+16     	; 0xabbe <__fp_splitA+0x30>
    abae:	16 16       	cp	r1, r22
    abb0:	17 06       	cpc	r1, r23
    abb2:	18 06       	cpc	r1, r24
    abb4:	99 1f       	adc	r25, r25
    abb6:	f1 cf       	rjmp	.-30     	; 0xab9a <__fp_splitA+0xc>
    abb8:	86 95       	lsr	r24
    abba:	71 05       	cpc	r23, r1
    abbc:	61 05       	cpc	r22, r1
    abbe:	08 94       	sec
    abc0:	08 95       	ret

0000abc2 <__fp_zero>:
    abc2:	e8 94       	clt

0000abc4 <__fp_szero>:
    abc4:	bb 27       	eor	r27, r27
    abc6:	66 27       	eor	r22, r22
    abc8:	77 27       	eor	r23, r23
    abca:	cb 01       	movw	r24, r22
    abcc:	97 f9       	bld	r25, 7
    abce:	08 95       	ret

0000abd0 <__gesf2>:
    abd0:	8a df       	rcall	.-236    	; 0xaae6 <__fp_cmp>
    abd2:	08 f4       	brcc	.+2      	; 0xabd6 <__gesf2+0x6>
    abd4:	8f ef       	ldi	r24, 0xFF	; 255
    abd6:	08 95       	ret
    abd8:	0e f0       	brts	.+2      	; 0xabdc <__gesf2+0xc>
    abda:	a6 c0       	rjmp	.+332    	; 0xad28 <__fp_mpack>
    abdc:	ae cf       	rjmp	.-164    	; 0xab3a <__fp_nan>
    abde:	68 94       	set
    abe0:	a6 cf       	rjmp	.-180    	; 0xab2e <__fp_inf>

0000abe2 <log>:
    abe2:	d5 df       	rcall	.-86     	; 0xab8e <__fp_splitA>
    abe4:	c8 f3       	brcs	.-14     	; 0xabd8 <__gesf2+0x8>
    abe6:	99 23       	and	r25, r25
    abe8:	d1 f3       	breq	.-12     	; 0xabde <__gesf2+0xe>
    abea:	c6 f3       	brts	.-16     	; 0xabdc <__gesf2+0xc>
    abec:	df 93       	push	r29
    abee:	cf 93       	push	r28
    abf0:	1f 93       	push	r17
    abf2:	0f 93       	push	r16
    abf4:	ff 92       	push	r15
    abf6:	c9 2f       	mov	r28, r25
    abf8:	dd 27       	eor	r29, r29
    abfa:	88 23       	and	r24, r24
    abfc:	2a f0       	brmi	.+10     	; 0xac08 <log+0x26>
    abfe:	21 97       	sbiw	r28, 0x01	; 1
    ac00:	66 0f       	add	r22, r22
    ac02:	77 1f       	adc	r23, r23
    ac04:	88 1f       	adc	r24, r24
    ac06:	da f7       	brpl	.-10     	; 0xabfe <log+0x1c>
    ac08:	20 e0       	ldi	r18, 0x00	; 0
    ac0a:	30 e0       	ldi	r19, 0x00	; 0
    ac0c:	40 e8       	ldi	r20, 0x80	; 128
    ac0e:	5f eb       	ldi	r21, 0xBF	; 191
    ac10:	9f e3       	ldi	r25, 0x3F	; 63
    ac12:	88 39       	cpi	r24, 0x98	; 152
    ac14:	20 f0       	brcs	.+8      	; 0xac1e <log+0x3c>
    ac16:	80 3e       	cpi	r24, 0xE0	; 224
    ac18:	30 f0       	brcs	.+12     	; 0xac26 <log+0x44>
    ac1a:	21 96       	adiw	r28, 0x01	; 1
    ac1c:	8f 77       	andi	r24, 0x7F	; 127
    ac1e:	25 de       	rcall	.-950    	; 0xa86a <__addsf3>
    ac20:	e4 e9       	ldi	r30, 0x94	; 148
    ac22:	f8 e0       	ldi	r31, 0x08	; 8
    ac24:	03 c0       	rjmp	.+6      	; 0xac2c <log+0x4a>
    ac26:	21 de       	rcall	.-958    	; 0xa86a <__addsf3>
    ac28:	e1 ec       	ldi	r30, 0xC1	; 193
    ac2a:	f8 e0       	ldi	r31, 0x08	; 8
    ac2c:	8b d0       	rcall	.+278    	; 0xad44 <__fp_powser>
    ac2e:	8b 01       	movw	r16, r22
    ac30:	be 01       	movw	r22, r28
    ac32:	ec 01       	movw	r28, r24
    ac34:	fb 2e       	mov	r15, r27
    ac36:	6f 57       	subi	r22, 0x7F	; 127
    ac38:	71 09       	sbc	r23, r1
    ac3a:	75 95       	asr	r23
    ac3c:	77 1f       	adc	r23, r23
    ac3e:	88 0b       	sbc	r24, r24
    ac40:	99 0b       	sbc	r25, r25
    ac42:	16 df       	rcall	.-468    	; 0xaa70 <__floatsisf>
    ac44:	28 e1       	ldi	r18, 0x18	; 24
    ac46:	32 e7       	ldi	r19, 0x72	; 114
    ac48:	41 e3       	ldi	r20, 0x31	; 49
    ac4a:	5f e3       	ldi	r21, 0x3F	; 63
    ac4c:	16 d0       	rcall	.+44     	; 0xac7a <__mulsf3x>
    ac4e:	af 2d       	mov	r26, r15
    ac50:	98 01       	movw	r18, r16
    ac52:	ae 01       	movw	r20, r28
    ac54:	ff 90       	pop	r15
    ac56:	0f 91       	pop	r16
    ac58:	1f 91       	pop	r17
    ac5a:	cf 91       	pop	r28
    ac5c:	df 91       	pop	r29
    ac5e:	16 de       	rcall	.-980    	; 0xa88c <__addsf3x>
    ac60:	7d cf       	rjmp	.-262    	; 0xab5c <__fp_round>

0000ac62 <__mulsf3>:
    ac62:	0b d0       	rcall	.+22     	; 0xac7a <__mulsf3x>
    ac64:	7b cf       	rjmp	.-266    	; 0xab5c <__fp_round>
    ac66:	6c df       	rcall	.-296    	; 0xab40 <__fp_pscA>
    ac68:	28 f0       	brcs	.+10     	; 0xac74 <__mulsf3+0x12>
    ac6a:	71 df       	rcall	.-286    	; 0xab4e <__fp_pscB>
    ac6c:	18 f0       	brcs	.+6      	; 0xac74 <__mulsf3+0x12>
    ac6e:	95 23       	and	r25, r21
    ac70:	09 f0       	breq	.+2      	; 0xac74 <__mulsf3+0x12>
    ac72:	5d cf       	rjmp	.-326    	; 0xab2e <__fp_inf>
    ac74:	62 cf       	rjmp	.-316    	; 0xab3a <__fp_nan>
    ac76:	11 24       	eor	r1, r1
    ac78:	a5 cf       	rjmp	.-182    	; 0xabc4 <__fp_szero>

0000ac7a <__mulsf3x>:
    ac7a:	81 df       	rcall	.-254    	; 0xab7e <__fp_split3>
    ac7c:	a0 f3       	brcs	.-24     	; 0xac66 <__mulsf3+0x4>

0000ac7e <__mulsf3_pse>:
    ac7e:	95 9f       	mul	r25, r21
    ac80:	d1 f3       	breq	.-12     	; 0xac76 <__mulsf3+0x14>
    ac82:	95 0f       	add	r25, r21
    ac84:	50 e0       	ldi	r21, 0x00	; 0
    ac86:	55 1f       	adc	r21, r21
    ac88:	62 9f       	mul	r22, r18
    ac8a:	f0 01       	movw	r30, r0
    ac8c:	72 9f       	mul	r23, r18
    ac8e:	bb 27       	eor	r27, r27
    ac90:	f0 0d       	add	r31, r0
    ac92:	b1 1d       	adc	r27, r1
    ac94:	63 9f       	mul	r22, r19
    ac96:	aa 27       	eor	r26, r26
    ac98:	f0 0d       	add	r31, r0
    ac9a:	b1 1d       	adc	r27, r1
    ac9c:	aa 1f       	adc	r26, r26
    ac9e:	64 9f       	mul	r22, r20
    aca0:	66 27       	eor	r22, r22
    aca2:	b0 0d       	add	r27, r0
    aca4:	a1 1d       	adc	r26, r1
    aca6:	66 1f       	adc	r22, r22
    aca8:	82 9f       	mul	r24, r18
    acaa:	22 27       	eor	r18, r18
    acac:	b0 0d       	add	r27, r0
    acae:	a1 1d       	adc	r26, r1
    acb0:	62 1f       	adc	r22, r18
    acb2:	73 9f       	mul	r23, r19
    acb4:	b0 0d       	add	r27, r0
    acb6:	a1 1d       	adc	r26, r1
    acb8:	62 1f       	adc	r22, r18
    acba:	83 9f       	mul	r24, r19
    acbc:	a0 0d       	add	r26, r0
    acbe:	61 1d       	adc	r22, r1
    acc0:	22 1f       	adc	r18, r18
    acc2:	74 9f       	mul	r23, r20
    acc4:	33 27       	eor	r19, r19
    acc6:	a0 0d       	add	r26, r0
    acc8:	61 1d       	adc	r22, r1
    acca:	23 1f       	adc	r18, r19
    accc:	84 9f       	mul	r24, r20
    acce:	60 0d       	add	r22, r0
    acd0:	21 1d       	adc	r18, r1
    acd2:	82 2f       	mov	r24, r18
    acd4:	76 2f       	mov	r23, r22
    acd6:	6a 2f       	mov	r22, r26
    acd8:	11 24       	eor	r1, r1
    acda:	9f 57       	subi	r25, 0x7F	; 127
    acdc:	50 40       	sbci	r21, 0x00	; 0
    acde:	8a f0       	brmi	.+34     	; 0xad02 <__mulsf3_pse+0x84>
    ace0:	e1 f0       	breq	.+56     	; 0xad1a <__mulsf3_pse+0x9c>
    ace2:	88 23       	and	r24, r24
    ace4:	4a f0       	brmi	.+18     	; 0xacf8 <__mulsf3_pse+0x7a>
    ace6:	ee 0f       	add	r30, r30
    ace8:	ff 1f       	adc	r31, r31
    acea:	bb 1f       	adc	r27, r27
    acec:	66 1f       	adc	r22, r22
    acee:	77 1f       	adc	r23, r23
    acf0:	88 1f       	adc	r24, r24
    acf2:	91 50       	subi	r25, 0x01	; 1
    acf4:	50 40       	sbci	r21, 0x00	; 0
    acf6:	a9 f7       	brne	.-22     	; 0xace2 <__mulsf3_pse+0x64>
    acf8:	9e 3f       	cpi	r25, 0xFE	; 254
    acfa:	51 05       	cpc	r21, r1
    acfc:	70 f0       	brcs	.+28     	; 0xad1a <__mulsf3_pse+0x9c>
    acfe:	17 cf       	rjmp	.-466    	; 0xab2e <__fp_inf>
    ad00:	61 cf       	rjmp	.-318    	; 0xabc4 <__fp_szero>
    ad02:	5f 3f       	cpi	r21, 0xFF	; 255
    ad04:	ec f3       	brlt	.-6      	; 0xad00 <__mulsf3_pse+0x82>
    ad06:	98 3e       	cpi	r25, 0xE8	; 232
    ad08:	dc f3       	brlt	.-10     	; 0xad00 <__mulsf3_pse+0x82>
    ad0a:	86 95       	lsr	r24
    ad0c:	77 95       	ror	r23
    ad0e:	67 95       	ror	r22
    ad10:	b7 95       	ror	r27
    ad12:	f7 95       	ror	r31
    ad14:	e7 95       	ror	r30
    ad16:	9f 5f       	subi	r25, 0xFF	; 255
    ad18:	c1 f7       	brne	.-16     	; 0xad0a <__mulsf3_pse+0x8c>
    ad1a:	fe 2b       	or	r31, r30
    ad1c:	88 0f       	add	r24, r24
    ad1e:	91 1d       	adc	r25, r1
    ad20:	96 95       	lsr	r25
    ad22:	87 95       	ror	r24
    ad24:	97 f9       	bld	r25, 7
    ad26:	08 95       	ret

0000ad28 <__fp_mpack>:
    ad28:	9f 3f       	cpi	r25, 0xFF	; 255
    ad2a:	31 f0       	breq	.+12     	; 0xad38 <__fp_mpack_finite+0xc>

0000ad2c <__fp_mpack_finite>:
    ad2c:	91 50       	subi	r25, 0x01	; 1
    ad2e:	20 f4       	brcc	.+8      	; 0xad38 <__fp_mpack_finite+0xc>
    ad30:	87 95       	ror	r24
    ad32:	77 95       	ror	r23
    ad34:	67 95       	ror	r22
    ad36:	b7 95       	ror	r27
    ad38:	88 0f       	add	r24, r24
    ad3a:	91 1d       	adc	r25, r1
    ad3c:	96 95       	lsr	r25
    ad3e:	87 95       	ror	r24
    ad40:	97 f9       	bld	r25, 7
    ad42:	08 95       	ret

0000ad44 <__fp_powser>:
    ad44:	df 93       	push	r29
    ad46:	cf 93       	push	r28
    ad48:	1f 93       	push	r17
    ad4a:	0f 93       	push	r16
    ad4c:	ff 92       	push	r15
    ad4e:	ef 92       	push	r14
    ad50:	df 92       	push	r13
    ad52:	7b 01       	movw	r14, r22
    ad54:	8c 01       	movw	r16, r24
    ad56:	68 94       	set
    ad58:	05 c0       	rjmp	.+10     	; 0xad64 <__fp_powser+0x20>
    ad5a:	da 2e       	mov	r13, r26
    ad5c:	ef 01       	movw	r28, r30
    ad5e:	8d df       	rcall	.-230    	; 0xac7a <__mulsf3x>
    ad60:	fe 01       	movw	r30, r28
    ad62:	e8 94       	clt
    ad64:	a5 91       	lpm	r26, Z+
    ad66:	25 91       	lpm	r18, Z+
    ad68:	35 91       	lpm	r19, Z+
    ad6a:	45 91       	lpm	r20, Z+
    ad6c:	55 91       	lpm	r21, Z+
    ad6e:	ae f3       	brts	.-22     	; 0xad5a <__fp_powser+0x16>
    ad70:	ef 01       	movw	r28, r30
    ad72:	8c dd       	rcall	.-1256   	; 0xa88c <__addsf3x>
    ad74:	fe 01       	movw	r30, r28
    ad76:	97 01       	movw	r18, r14
    ad78:	a8 01       	movw	r20, r16
    ad7a:	da 94       	dec	r13
    ad7c:	79 f7       	brne	.-34     	; 0xad5c <__fp_powser+0x18>
    ad7e:	df 90       	pop	r13
    ad80:	ef 90       	pop	r14
    ad82:	ff 90       	pop	r15
    ad84:	0f 91       	pop	r16
    ad86:	1f 91       	pop	r17
    ad88:	cf 91       	pop	r28
    ad8a:	df 91       	pop	r29
    ad8c:	08 95       	ret

0000ad8e <vfprintf>:
    ad8e:	2f 92       	push	r2
    ad90:	3f 92       	push	r3
    ad92:	4f 92       	push	r4
    ad94:	5f 92       	push	r5
    ad96:	6f 92       	push	r6
    ad98:	7f 92       	push	r7
    ad9a:	8f 92       	push	r8
    ad9c:	9f 92       	push	r9
    ad9e:	af 92       	push	r10
    ada0:	bf 92       	push	r11
    ada2:	cf 92       	push	r12
    ada4:	df 92       	push	r13
    ada6:	ef 92       	push	r14
    ada8:	ff 92       	push	r15
    adaa:	0f 93       	push	r16
    adac:	1f 93       	push	r17
    adae:	cf 93       	push	r28
    adb0:	df 93       	push	r29
    adb2:	cd b7       	in	r28, 0x3d	; 61
    adb4:	de b7       	in	r29, 0x3e	; 62
    adb6:	60 97       	sbiw	r28, 0x10	; 16
    adb8:	0f b6       	in	r0, 0x3f	; 63
    adba:	f8 94       	cli
    adbc:	de bf       	out	0x3e, r29	; 62
    adbe:	0f be       	out	0x3f, r0	; 63
    adc0:	cd bf       	out	0x3d, r28	; 61
    adc2:	7c 01       	movw	r14, r24
    adc4:	1b 01       	movw	r2, r22
    adc6:	6a 01       	movw	r12, r20
    adc8:	fc 01       	movw	r30, r24
    adca:	17 82       	std	Z+7, r1	; 0x07
    adcc:	16 82       	std	Z+6, r1	; 0x06
    adce:	83 81       	ldd	r24, Z+3	; 0x03
    add0:	81 ff       	sbrs	r24, 1
    add2:	2a c3       	rjmp	.+1620   	; 0xb428 <vfprintf+0x69a>
    add4:	9e 01       	movw	r18, r28
    add6:	2f 5f       	subi	r18, 0xFF	; 255
    add8:	3f 4f       	sbci	r19, 0xFF	; 255
    adda:	39 01       	movw	r6, r18
    addc:	f7 01       	movw	r30, r14
    adde:	93 81       	ldd	r25, Z+3	; 0x03
    ade0:	f1 01       	movw	r30, r2
    ade2:	93 fd       	sbrc	r25, 3
    ade4:	85 91       	lpm	r24, Z+
    ade6:	93 ff       	sbrs	r25, 3
    ade8:	81 91       	ld	r24, Z+
    adea:	1f 01       	movw	r2, r30
    adec:	88 23       	and	r24, r24
    adee:	09 f4       	brne	.+2      	; 0xadf2 <vfprintf+0x64>
    adf0:	17 c3       	rjmp	.+1582   	; 0xb420 <vfprintf+0x692>
    adf2:	85 32       	cpi	r24, 0x25	; 37
    adf4:	39 f4       	brne	.+14     	; 0xae04 <vfprintf+0x76>
    adf6:	93 fd       	sbrc	r25, 3
    adf8:	85 91       	lpm	r24, Z+
    adfa:	93 ff       	sbrs	r25, 3
    adfc:	81 91       	ld	r24, Z+
    adfe:	1f 01       	movw	r2, r30
    ae00:	85 32       	cpi	r24, 0x25	; 37
    ae02:	31 f4       	brne	.+12     	; 0xae10 <vfprintf+0x82>
    ae04:	b7 01       	movw	r22, r14
    ae06:	90 e0       	ldi	r25, 0x00	; 0
    ae08:	a3 d5       	rcall	.+2886   	; 0xb950 <fputc>
    ae0a:	56 01       	movw	r10, r12
    ae0c:	65 01       	movw	r12, r10
    ae0e:	e6 cf       	rjmp	.-52     	; 0xaddc <vfprintf+0x4e>
    ae10:	10 e0       	ldi	r17, 0x00	; 0
    ae12:	51 2c       	mov	r5, r1
    ae14:	91 2c       	mov	r9, r1
    ae16:	ff e1       	ldi	r31, 0x1F	; 31
    ae18:	f9 15       	cp	r31, r9
    ae1a:	d8 f0       	brcs	.+54     	; 0xae52 <vfprintf+0xc4>
    ae1c:	8b 32       	cpi	r24, 0x2B	; 43
    ae1e:	79 f0       	breq	.+30     	; 0xae3e <vfprintf+0xb0>
    ae20:	38 f4       	brcc	.+14     	; 0xae30 <vfprintf+0xa2>
    ae22:	80 32       	cpi	r24, 0x20	; 32
    ae24:	79 f0       	breq	.+30     	; 0xae44 <vfprintf+0xb6>
    ae26:	83 32       	cpi	r24, 0x23	; 35
    ae28:	a1 f4       	brne	.+40     	; 0xae52 <vfprintf+0xc4>
    ae2a:	f9 2d       	mov	r31, r9
    ae2c:	f0 61       	ori	r31, 0x10	; 16
    ae2e:	2e c0       	rjmp	.+92     	; 0xae8c <vfprintf+0xfe>
    ae30:	8d 32       	cpi	r24, 0x2D	; 45
    ae32:	61 f0       	breq	.+24     	; 0xae4c <vfprintf+0xbe>
    ae34:	80 33       	cpi	r24, 0x30	; 48
    ae36:	69 f4       	brne	.+26     	; 0xae52 <vfprintf+0xc4>
    ae38:	29 2d       	mov	r18, r9
    ae3a:	21 60       	ori	r18, 0x01	; 1
    ae3c:	2d c0       	rjmp	.+90     	; 0xae98 <vfprintf+0x10a>
    ae3e:	39 2d       	mov	r19, r9
    ae40:	32 60       	ori	r19, 0x02	; 2
    ae42:	93 2e       	mov	r9, r19
    ae44:	89 2d       	mov	r24, r9
    ae46:	84 60       	ori	r24, 0x04	; 4
    ae48:	98 2e       	mov	r9, r24
    ae4a:	2a c0       	rjmp	.+84     	; 0xaea0 <vfprintf+0x112>
    ae4c:	e9 2d       	mov	r30, r9
    ae4e:	e8 60       	ori	r30, 0x08	; 8
    ae50:	15 c0       	rjmp	.+42     	; 0xae7c <vfprintf+0xee>
    ae52:	97 fc       	sbrc	r9, 7
    ae54:	2d c0       	rjmp	.+90     	; 0xaeb0 <vfprintf+0x122>
    ae56:	20 ed       	ldi	r18, 0xD0	; 208
    ae58:	28 0f       	add	r18, r24
    ae5a:	2a 30       	cpi	r18, 0x0A	; 10
    ae5c:	88 f4       	brcc	.+34     	; 0xae80 <vfprintf+0xf2>
    ae5e:	96 fe       	sbrs	r9, 6
    ae60:	06 c0       	rjmp	.+12     	; 0xae6e <vfprintf+0xe0>
    ae62:	3a e0       	ldi	r19, 0x0A	; 10
    ae64:	13 9f       	mul	r17, r19
    ae66:	20 0d       	add	r18, r0
    ae68:	11 24       	eor	r1, r1
    ae6a:	12 2f       	mov	r17, r18
    ae6c:	19 c0       	rjmp	.+50     	; 0xaea0 <vfprintf+0x112>
    ae6e:	8a e0       	ldi	r24, 0x0A	; 10
    ae70:	58 9e       	mul	r5, r24
    ae72:	20 0d       	add	r18, r0
    ae74:	11 24       	eor	r1, r1
    ae76:	52 2e       	mov	r5, r18
    ae78:	e9 2d       	mov	r30, r9
    ae7a:	e0 62       	ori	r30, 0x20	; 32
    ae7c:	9e 2e       	mov	r9, r30
    ae7e:	10 c0       	rjmp	.+32     	; 0xaea0 <vfprintf+0x112>
    ae80:	8e 32       	cpi	r24, 0x2E	; 46
    ae82:	31 f4       	brne	.+12     	; 0xae90 <vfprintf+0x102>
    ae84:	96 fc       	sbrc	r9, 6
    ae86:	cc c2       	rjmp	.+1432   	; 0xb420 <vfprintf+0x692>
    ae88:	f9 2d       	mov	r31, r9
    ae8a:	f0 64       	ori	r31, 0x40	; 64
    ae8c:	9f 2e       	mov	r9, r31
    ae8e:	08 c0       	rjmp	.+16     	; 0xaea0 <vfprintf+0x112>
    ae90:	8c 36       	cpi	r24, 0x6C	; 108
    ae92:	21 f4       	brne	.+8      	; 0xae9c <vfprintf+0x10e>
    ae94:	29 2d       	mov	r18, r9
    ae96:	20 68       	ori	r18, 0x80	; 128
    ae98:	92 2e       	mov	r9, r18
    ae9a:	02 c0       	rjmp	.+4      	; 0xaea0 <vfprintf+0x112>
    ae9c:	88 36       	cpi	r24, 0x68	; 104
    ae9e:	41 f4       	brne	.+16     	; 0xaeb0 <vfprintf+0x122>
    aea0:	f1 01       	movw	r30, r2
    aea2:	93 fd       	sbrc	r25, 3
    aea4:	85 91       	lpm	r24, Z+
    aea6:	93 ff       	sbrs	r25, 3
    aea8:	81 91       	ld	r24, Z+
    aeaa:	1f 01       	movw	r2, r30
    aeac:	81 11       	cpse	r24, r1
    aeae:	b3 cf       	rjmp	.-154    	; 0xae16 <vfprintf+0x88>
    aeb0:	9b eb       	ldi	r25, 0xBB	; 187
    aeb2:	98 0f       	add	r25, r24
    aeb4:	93 30       	cpi	r25, 0x03	; 3
    aeb6:	20 f4       	brcc	.+8      	; 0xaec0 <vfprintf+0x132>
    aeb8:	99 2d       	mov	r25, r9
    aeba:	90 61       	ori	r25, 0x10	; 16
    aebc:	80 5e       	subi	r24, 0xE0	; 224
    aebe:	07 c0       	rjmp	.+14     	; 0xaece <vfprintf+0x140>
    aec0:	9b e9       	ldi	r25, 0x9B	; 155
    aec2:	98 0f       	add	r25, r24
    aec4:	93 30       	cpi	r25, 0x03	; 3
    aec6:	08 f0       	brcs	.+2      	; 0xaeca <vfprintf+0x13c>
    aec8:	59 c1       	rjmp	.+690    	; 0xb17c <vfprintf+0x3ee>
    aeca:	99 2d       	mov	r25, r9
    aecc:	9f 7e       	andi	r25, 0xEF	; 239
    aece:	96 ff       	sbrs	r25, 6
    aed0:	16 e0       	ldi	r17, 0x06	; 6
    aed2:	9f 73       	andi	r25, 0x3F	; 63
    aed4:	99 2e       	mov	r9, r25
    aed6:	85 36       	cpi	r24, 0x65	; 101
    aed8:	19 f4       	brne	.+6      	; 0xaee0 <vfprintf+0x152>
    aeda:	90 64       	ori	r25, 0x40	; 64
    aedc:	99 2e       	mov	r9, r25
    aede:	08 c0       	rjmp	.+16     	; 0xaef0 <vfprintf+0x162>
    aee0:	86 36       	cpi	r24, 0x66	; 102
    aee2:	21 f4       	brne	.+8      	; 0xaeec <vfprintf+0x15e>
    aee4:	39 2f       	mov	r19, r25
    aee6:	30 68       	ori	r19, 0x80	; 128
    aee8:	93 2e       	mov	r9, r19
    aeea:	02 c0       	rjmp	.+4      	; 0xaef0 <vfprintf+0x162>
    aeec:	11 11       	cpse	r17, r1
    aeee:	11 50       	subi	r17, 0x01	; 1
    aef0:	97 fe       	sbrs	r9, 7
    aef2:	07 c0       	rjmp	.+14     	; 0xaf02 <vfprintf+0x174>
    aef4:	1c 33       	cpi	r17, 0x3C	; 60
    aef6:	50 f4       	brcc	.+20     	; 0xaf0c <vfprintf+0x17e>
    aef8:	44 24       	eor	r4, r4
    aefa:	43 94       	inc	r4
    aefc:	41 0e       	add	r4, r17
    aefe:	27 e0       	ldi	r18, 0x07	; 7
    af00:	0b c0       	rjmp	.+22     	; 0xaf18 <vfprintf+0x18a>
    af02:	18 30       	cpi	r17, 0x08	; 8
    af04:	38 f0       	brcs	.+14     	; 0xaf14 <vfprintf+0x186>
    af06:	27 e0       	ldi	r18, 0x07	; 7
    af08:	17 e0       	ldi	r17, 0x07	; 7
    af0a:	05 c0       	rjmp	.+10     	; 0xaf16 <vfprintf+0x188>
    af0c:	27 e0       	ldi	r18, 0x07	; 7
    af0e:	9c e3       	ldi	r25, 0x3C	; 60
    af10:	49 2e       	mov	r4, r25
    af12:	02 c0       	rjmp	.+4      	; 0xaf18 <vfprintf+0x18a>
    af14:	21 2f       	mov	r18, r17
    af16:	41 2c       	mov	r4, r1
    af18:	56 01       	movw	r10, r12
    af1a:	84 e0       	ldi	r24, 0x04	; 4
    af1c:	a8 0e       	add	r10, r24
    af1e:	b1 1c       	adc	r11, r1
    af20:	f6 01       	movw	r30, r12
    af22:	60 81       	ld	r22, Z
    af24:	71 81       	ldd	r23, Z+1	; 0x01
    af26:	82 81       	ldd	r24, Z+2	; 0x02
    af28:	93 81       	ldd	r25, Z+3	; 0x03
    af2a:	04 2d       	mov	r16, r4
    af2c:	a3 01       	movw	r20, r6
    af2e:	12 d4       	rcall	.+2084   	; 0xb754 <__ftoa_engine>
    af30:	6c 01       	movw	r12, r24
    af32:	f9 81       	ldd	r31, Y+1	; 0x01
    af34:	fc 87       	std	Y+12, r31	; 0x0c
    af36:	f0 ff       	sbrs	r31, 0
    af38:	02 c0       	rjmp	.+4      	; 0xaf3e <vfprintf+0x1b0>
    af3a:	f3 ff       	sbrs	r31, 3
    af3c:	06 c0       	rjmp	.+12     	; 0xaf4a <vfprintf+0x1bc>
    af3e:	91 fc       	sbrc	r9, 1
    af40:	06 c0       	rjmp	.+12     	; 0xaf4e <vfprintf+0x1c0>
    af42:	92 fe       	sbrs	r9, 2
    af44:	06 c0       	rjmp	.+12     	; 0xaf52 <vfprintf+0x1c4>
    af46:	00 e2       	ldi	r16, 0x20	; 32
    af48:	05 c0       	rjmp	.+10     	; 0xaf54 <vfprintf+0x1c6>
    af4a:	0d e2       	ldi	r16, 0x2D	; 45
    af4c:	03 c0       	rjmp	.+6      	; 0xaf54 <vfprintf+0x1c6>
    af4e:	0b e2       	ldi	r16, 0x2B	; 43
    af50:	01 c0       	rjmp	.+2      	; 0xaf54 <vfprintf+0x1c6>
    af52:	00 e0       	ldi	r16, 0x00	; 0
    af54:	8c 85       	ldd	r24, Y+12	; 0x0c
    af56:	8c 70       	andi	r24, 0x0C	; 12
    af58:	19 f0       	breq	.+6      	; 0xaf60 <vfprintf+0x1d2>
    af5a:	01 11       	cpse	r16, r1
    af5c:	43 c2       	rjmp	.+1158   	; 0xb3e4 <vfprintf+0x656>
    af5e:	80 c2       	rjmp	.+1280   	; 0xb460 <vfprintf+0x6d2>
    af60:	97 fe       	sbrs	r9, 7
    af62:	10 c0       	rjmp	.+32     	; 0xaf84 <vfprintf+0x1f6>
    af64:	4c 0c       	add	r4, r12
    af66:	fc 85       	ldd	r31, Y+12	; 0x0c
    af68:	f4 ff       	sbrs	r31, 4
    af6a:	04 c0       	rjmp	.+8      	; 0xaf74 <vfprintf+0x1e6>
    af6c:	8a 81       	ldd	r24, Y+2	; 0x02
    af6e:	81 33       	cpi	r24, 0x31	; 49
    af70:	09 f4       	brne	.+2      	; 0xaf74 <vfprintf+0x1e6>
    af72:	4a 94       	dec	r4
    af74:	14 14       	cp	r1, r4
    af76:	74 f5       	brge	.+92     	; 0xafd4 <vfprintf+0x246>
    af78:	28 e0       	ldi	r18, 0x08	; 8
    af7a:	24 15       	cp	r18, r4
    af7c:	78 f5       	brcc	.+94     	; 0xafdc <vfprintf+0x24e>
    af7e:	88 e0       	ldi	r24, 0x08	; 8
    af80:	48 2e       	mov	r4, r24
    af82:	2c c0       	rjmp	.+88     	; 0xafdc <vfprintf+0x24e>
    af84:	96 fc       	sbrc	r9, 6
    af86:	2a c0       	rjmp	.+84     	; 0xafdc <vfprintf+0x24e>
    af88:	81 2f       	mov	r24, r17
    af8a:	90 e0       	ldi	r25, 0x00	; 0
    af8c:	8c 15       	cp	r24, r12
    af8e:	9d 05       	cpc	r25, r13
    af90:	9c f0       	brlt	.+38     	; 0xafb8 <vfprintf+0x22a>
    af92:	3c ef       	ldi	r19, 0xFC	; 252
    af94:	c3 16       	cp	r12, r19
    af96:	3f ef       	ldi	r19, 0xFF	; 255
    af98:	d3 06       	cpc	r13, r19
    af9a:	74 f0       	brlt	.+28     	; 0xafb8 <vfprintf+0x22a>
    af9c:	89 2d       	mov	r24, r9
    af9e:	80 68       	ori	r24, 0x80	; 128
    afa0:	98 2e       	mov	r9, r24
    afa2:	0a c0       	rjmp	.+20     	; 0xafb8 <vfprintf+0x22a>
    afa4:	e2 e0       	ldi	r30, 0x02	; 2
    afa6:	f0 e0       	ldi	r31, 0x00	; 0
    afa8:	ec 0f       	add	r30, r28
    afaa:	fd 1f       	adc	r31, r29
    afac:	e1 0f       	add	r30, r17
    afae:	f1 1d       	adc	r31, r1
    afb0:	80 81       	ld	r24, Z
    afb2:	80 33       	cpi	r24, 0x30	; 48
    afb4:	19 f4       	brne	.+6      	; 0xafbc <vfprintf+0x22e>
    afb6:	11 50       	subi	r17, 0x01	; 1
    afb8:	11 11       	cpse	r17, r1
    afba:	f4 cf       	rjmp	.-24     	; 0xafa4 <vfprintf+0x216>
    afbc:	97 fe       	sbrs	r9, 7
    afbe:	0e c0       	rjmp	.+28     	; 0xafdc <vfprintf+0x24e>
    afc0:	44 24       	eor	r4, r4
    afc2:	43 94       	inc	r4
    afc4:	41 0e       	add	r4, r17
    afc6:	81 2f       	mov	r24, r17
    afc8:	90 e0       	ldi	r25, 0x00	; 0
    afca:	c8 16       	cp	r12, r24
    afcc:	d9 06       	cpc	r13, r25
    afce:	2c f4       	brge	.+10     	; 0xafda <vfprintf+0x24c>
    afd0:	1c 19       	sub	r17, r12
    afd2:	04 c0       	rjmp	.+8      	; 0xafdc <vfprintf+0x24e>
    afd4:	44 24       	eor	r4, r4
    afd6:	43 94       	inc	r4
    afd8:	01 c0       	rjmp	.+2      	; 0xafdc <vfprintf+0x24e>
    afda:	10 e0       	ldi	r17, 0x00	; 0
    afdc:	97 fe       	sbrs	r9, 7
    afde:	06 c0       	rjmp	.+12     	; 0xafec <vfprintf+0x25e>
    afe0:	1c 14       	cp	r1, r12
    afe2:	1d 04       	cpc	r1, r13
    afe4:	34 f4       	brge	.+12     	; 0xaff2 <vfprintf+0x264>
    afe6:	c6 01       	movw	r24, r12
    afe8:	01 96       	adiw	r24, 0x01	; 1
    afea:	05 c0       	rjmp	.+10     	; 0xaff6 <vfprintf+0x268>
    afec:	85 e0       	ldi	r24, 0x05	; 5
    afee:	90 e0       	ldi	r25, 0x00	; 0
    aff0:	02 c0       	rjmp	.+4      	; 0xaff6 <vfprintf+0x268>
    aff2:	81 e0       	ldi	r24, 0x01	; 1
    aff4:	90 e0       	ldi	r25, 0x00	; 0
    aff6:	01 11       	cpse	r16, r1
    aff8:	01 96       	adiw	r24, 0x01	; 1
    affa:	11 23       	and	r17, r17
    affc:	31 f0       	breq	.+12     	; 0xb00a <vfprintf+0x27c>
    affe:	21 2f       	mov	r18, r17
    b000:	30 e0       	ldi	r19, 0x00	; 0
    b002:	2f 5f       	subi	r18, 0xFF	; 255
    b004:	3f 4f       	sbci	r19, 0xFF	; 255
    b006:	82 0f       	add	r24, r18
    b008:	93 1f       	adc	r25, r19
    b00a:	25 2d       	mov	r18, r5
    b00c:	30 e0       	ldi	r19, 0x00	; 0
    b00e:	82 17       	cp	r24, r18
    b010:	93 07       	cpc	r25, r19
    b012:	14 f4       	brge	.+4      	; 0xb018 <vfprintf+0x28a>
    b014:	58 1a       	sub	r5, r24
    b016:	01 c0       	rjmp	.+2      	; 0xb01a <vfprintf+0x28c>
    b018:	51 2c       	mov	r5, r1
    b01a:	89 2d       	mov	r24, r9
    b01c:	89 70       	andi	r24, 0x09	; 9
    b01e:	41 f4       	brne	.+16     	; 0xb030 <vfprintf+0x2a2>
    b020:	55 20       	and	r5, r5
    b022:	31 f0       	breq	.+12     	; 0xb030 <vfprintf+0x2a2>
    b024:	b7 01       	movw	r22, r14
    b026:	80 e2       	ldi	r24, 0x20	; 32
    b028:	90 e0       	ldi	r25, 0x00	; 0
    b02a:	92 d4       	rcall	.+2340   	; 0xb950 <fputc>
    b02c:	5a 94       	dec	r5
    b02e:	f8 cf       	rjmp	.-16     	; 0xb020 <vfprintf+0x292>
    b030:	00 23       	and	r16, r16
    b032:	21 f0       	breq	.+8      	; 0xb03c <vfprintf+0x2ae>
    b034:	b7 01       	movw	r22, r14
    b036:	80 2f       	mov	r24, r16
    b038:	90 e0       	ldi	r25, 0x00	; 0
    b03a:	8a d4       	rcall	.+2324   	; 0xb950 <fputc>
    b03c:	93 fc       	sbrc	r9, 3
    b03e:	08 c0       	rjmp	.+16     	; 0xb050 <vfprintf+0x2c2>
    b040:	55 20       	and	r5, r5
    b042:	31 f0       	breq	.+12     	; 0xb050 <vfprintf+0x2c2>
    b044:	b7 01       	movw	r22, r14
    b046:	80 e3       	ldi	r24, 0x30	; 48
    b048:	90 e0       	ldi	r25, 0x00	; 0
    b04a:	82 d4       	rcall	.+2308   	; 0xb950 <fputc>
    b04c:	5a 94       	dec	r5
    b04e:	f8 cf       	rjmp	.-16     	; 0xb040 <vfprintf+0x2b2>
    b050:	97 fe       	sbrs	r9, 7
    b052:	4a c0       	rjmp	.+148    	; 0xb0e8 <vfprintf+0x35a>
    b054:	46 01       	movw	r8, r12
    b056:	d7 fe       	sbrs	r13, 7
    b058:	02 c0       	rjmp	.+4      	; 0xb05e <vfprintf+0x2d0>
    b05a:	81 2c       	mov	r8, r1
    b05c:	91 2c       	mov	r9, r1
    b05e:	c6 01       	movw	r24, r12
    b060:	88 19       	sub	r24, r8
    b062:	99 09       	sbc	r25, r9
    b064:	f3 01       	movw	r30, r6
    b066:	e8 0f       	add	r30, r24
    b068:	f9 1f       	adc	r31, r25
    b06a:	fe 87       	std	Y+14, r31	; 0x0e
    b06c:	ed 87       	std	Y+13, r30	; 0x0d
    b06e:	96 01       	movw	r18, r12
    b070:	24 19       	sub	r18, r4
    b072:	31 09       	sbc	r19, r1
    b074:	38 8b       	std	Y+16, r19	; 0x10
    b076:	2f 87       	std	Y+15, r18	; 0x0f
    b078:	01 2f       	mov	r16, r17
    b07a:	10 e0       	ldi	r17, 0x00	; 0
    b07c:	11 95       	neg	r17
    b07e:	01 95       	neg	r16
    b080:	11 09       	sbc	r17, r1
    b082:	3f ef       	ldi	r19, 0xFF	; 255
    b084:	83 16       	cp	r8, r19
    b086:	93 06       	cpc	r9, r19
    b088:	21 f4       	brne	.+8      	; 0xb092 <vfprintf+0x304>
    b08a:	b7 01       	movw	r22, r14
    b08c:	8e e2       	ldi	r24, 0x2E	; 46
    b08e:	90 e0       	ldi	r25, 0x00	; 0
    b090:	5f d4       	rcall	.+2238   	; 0xb950 <fputc>
    b092:	c8 14       	cp	r12, r8
    b094:	d9 04       	cpc	r13, r9
    b096:	4c f0       	brlt	.+18     	; 0xb0aa <vfprintf+0x31c>
    b098:	8f 85       	ldd	r24, Y+15	; 0x0f
    b09a:	98 89       	ldd	r25, Y+16	; 0x10
    b09c:	88 15       	cp	r24, r8
    b09e:	99 05       	cpc	r25, r9
    b0a0:	24 f4       	brge	.+8      	; 0xb0aa <vfprintf+0x31c>
    b0a2:	ed 85       	ldd	r30, Y+13	; 0x0d
    b0a4:	fe 85       	ldd	r31, Y+14	; 0x0e
    b0a6:	81 81       	ldd	r24, Z+1	; 0x01
    b0a8:	01 c0       	rjmp	.+2      	; 0xb0ac <vfprintf+0x31e>
    b0aa:	80 e3       	ldi	r24, 0x30	; 48
    b0ac:	f1 e0       	ldi	r31, 0x01	; 1
    b0ae:	8f 1a       	sub	r8, r31
    b0b0:	91 08       	sbc	r9, r1
    b0b2:	2d 85       	ldd	r18, Y+13	; 0x0d
    b0b4:	3e 85       	ldd	r19, Y+14	; 0x0e
    b0b6:	2f 5f       	subi	r18, 0xFF	; 255
    b0b8:	3f 4f       	sbci	r19, 0xFF	; 255
    b0ba:	3e 87       	std	Y+14, r19	; 0x0e
    b0bc:	2d 87       	std	Y+13, r18	; 0x0d
    b0be:	80 16       	cp	r8, r16
    b0c0:	91 06       	cpc	r9, r17
    b0c2:	24 f0       	brlt	.+8      	; 0xb0cc <vfprintf+0x33e>
    b0c4:	b7 01       	movw	r22, r14
    b0c6:	90 e0       	ldi	r25, 0x00	; 0
    b0c8:	43 d4       	rcall	.+2182   	; 0xb950 <fputc>
    b0ca:	db cf       	rjmp	.-74     	; 0xb082 <vfprintf+0x2f4>
    b0cc:	c8 14       	cp	r12, r8
    b0ce:	d9 04       	cpc	r13, r9
    b0d0:	41 f4       	brne	.+16     	; 0xb0e2 <vfprintf+0x354>
    b0d2:	9a 81       	ldd	r25, Y+2	; 0x02
    b0d4:	96 33       	cpi	r25, 0x36	; 54
    b0d6:	20 f4       	brcc	.+8      	; 0xb0e0 <vfprintf+0x352>
    b0d8:	95 33       	cpi	r25, 0x35	; 53
    b0da:	19 f4       	brne	.+6      	; 0xb0e2 <vfprintf+0x354>
    b0dc:	3c 85       	ldd	r19, Y+12	; 0x0c
    b0de:	34 ff       	sbrs	r19, 4
    b0e0:	81 e3       	ldi	r24, 0x31	; 49
    b0e2:	b7 01       	movw	r22, r14
    b0e4:	90 e0       	ldi	r25, 0x00	; 0
    b0e6:	48 c0       	rjmp	.+144    	; 0xb178 <vfprintf+0x3ea>
    b0e8:	8a 81       	ldd	r24, Y+2	; 0x02
    b0ea:	81 33       	cpi	r24, 0x31	; 49
    b0ec:	19 f0       	breq	.+6      	; 0xb0f4 <vfprintf+0x366>
    b0ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    b0f0:	9f 7e       	andi	r25, 0xEF	; 239
    b0f2:	9c 87       	std	Y+12, r25	; 0x0c
    b0f4:	b7 01       	movw	r22, r14
    b0f6:	90 e0       	ldi	r25, 0x00	; 0
    b0f8:	2b d4       	rcall	.+2134   	; 0xb950 <fputc>
    b0fa:	11 11       	cpse	r17, r1
    b0fc:	05 c0       	rjmp	.+10     	; 0xb108 <vfprintf+0x37a>
    b0fe:	94 fc       	sbrc	r9, 4
    b100:	16 c0       	rjmp	.+44     	; 0xb12e <vfprintf+0x3a0>
    b102:	85 e6       	ldi	r24, 0x65	; 101
    b104:	90 e0       	ldi	r25, 0x00	; 0
    b106:	15 c0       	rjmp	.+42     	; 0xb132 <vfprintf+0x3a4>
    b108:	b7 01       	movw	r22, r14
    b10a:	8e e2       	ldi	r24, 0x2E	; 46
    b10c:	90 e0       	ldi	r25, 0x00	; 0
    b10e:	20 d4       	rcall	.+2112   	; 0xb950 <fputc>
    b110:	1e 5f       	subi	r17, 0xFE	; 254
    b112:	82 e0       	ldi	r24, 0x02	; 2
    b114:	01 e0       	ldi	r16, 0x01	; 1
    b116:	08 0f       	add	r16, r24
    b118:	f3 01       	movw	r30, r6
    b11a:	e8 0f       	add	r30, r24
    b11c:	f1 1d       	adc	r31, r1
    b11e:	80 81       	ld	r24, Z
    b120:	b7 01       	movw	r22, r14
    b122:	90 e0       	ldi	r25, 0x00	; 0
    b124:	15 d4       	rcall	.+2090   	; 0xb950 <fputc>
    b126:	80 2f       	mov	r24, r16
    b128:	01 13       	cpse	r16, r17
    b12a:	f4 cf       	rjmp	.-24     	; 0xb114 <vfprintf+0x386>
    b12c:	e8 cf       	rjmp	.-48     	; 0xb0fe <vfprintf+0x370>
    b12e:	85 e4       	ldi	r24, 0x45	; 69
    b130:	90 e0       	ldi	r25, 0x00	; 0
    b132:	b7 01       	movw	r22, r14
    b134:	0d d4       	rcall	.+2074   	; 0xb950 <fputc>
    b136:	d7 fc       	sbrc	r13, 7
    b138:	06 c0       	rjmp	.+12     	; 0xb146 <vfprintf+0x3b8>
    b13a:	c1 14       	cp	r12, r1
    b13c:	d1 04       	cpc	r13, r1
    b13e:	41 f4       	brne	.+16     	; 0xb150 <vfprintf+0x3c2>
    b140:	ec 85       	ldd	r30, Y+12	; 0x0c
    b142:	e4 ff       	sbrs	r30, 4
    b144:	05 c0       	rjmp	.+10     	; 0xb150 <vfprintf+0x3c2>
    b146:	d1 94       	neg	r13
    b148:	c1 94       	neg	r12
    b14a:	d1 08       	sbc	r13, r1
    b14c:	8d e2       	ldi	r24, 0x2D	; 45
    b14e:	01 c0       	rjmp	.+2      	; 0xb152 <vfprintf+0x3c4>
    b150:	8b e2       	ldi	r24, 0x2B	; 43
    b152:	b7 01       	movw	r22, r14
    b154:	90 e0       	ldi	r25, 0x00	; 0
    b156:	fc d3       	rcall	.+2040   	; 0xb950 <fputc>
    b158:	80 e3       	ldi	r24, 0x30	; 48
    b15a:	2a e0       	ldi	r18, 0x0A	; 10
    b15c:	c2 16       	cp	r12, r18
    b15e:	d1 04       	cpc	r13, r1
    b160:	2c f0       	brlt	.+10     	; 0xb16c <vfprintf+0x3de>
    b162:	8f 5f       	subi	r24, 0xFF	; 255
    b164:	fa e0       	ldi	r31, 0x0A	; 10
    b166:	cf 1a       	sub	r12, r31
    b168:	d1 08       	sbc	r13, r1
    b16a:	f7 cf       	rjmp	.-18     	; 0xb15a <vfprintf+0x3cc>
    b16c:	b7 01       	movw	r22, r14
    b16e:	90 e0       	ldi	r25, 0x00	; 0
    b170:	ef d3       	rcall	.+2014   	; 0xb950 <fputc>
    b172:	b7 01       	movw	r22, r14
    b174:	c6 01       	movw	r24, r12
    b176:	c0 96       	adiw	r24, 0x30	; 48
    b178:	eb d3       	rcall	.+2006   	; 0xb950 <fputc>
    b17a:	49 c1       	rjmp	.+658    	; 0xb40e <vfprintf+0x680>
    b17c:	83 36       	cpi	r24, 0x63	; 99
    b17e:	31 f0       	breq	.+12     	; 0xb18c <vfprintf+0x3fe>
    b180:	83 37       	cpi	r24, 0x73	; 115
    b182:	79 f0       	breq	.+30     	; 0xb1a2 <vfprintf+0x414>
    b184:	83 35       	cpi	r24, 0x53	; 83
    b186:	09 f0       	breq	.+2      	; 0xb18a <vfprintf+0x3fc>
    b188:	52 c0       	rjmp	.+164    	; 0xb22e <vfprintf+0x4a0>
    b18a:	1f c0       	rjmp	.+62     	; 0xb1ca <vfprintf+0x43c>
    b18c:	56 01       	movw	r10, r12
    b18e:	32 e0       	ldi	r19, 0x02	; 2
    b190:	a3 0e       	add	r10, r19
    b192:	b1 1c       	adc	r11, r1
    b194:	f6 01       	movw	r30, r12
    b196:	80 81       	ld	r24, Z
    b198:	89 83       	std	Y+1, r24	; 0x01
    b19a:	01 e0       	ldi	r16, 0x01	; 1
    b19c:	10 e0       	ldi	r17, 0x00	; 0
    b19e:	63 01       	movw	r12, r6
    b1a0:	11 c0       	rjmp	.+34     	; 0xb1c4 <vfprintf+0x436>
    b1a2:	56 01       	movw	r10, r12
    b1a4:	f2 e0       	ldi	r31, 0x02	; 2
    b1a6:	af 0e       	add	r10, r31
    b1a8:	b1 1c       	adc	r11, r1
    b1aa:	f6 01       	movw	r30, r12
    b1ac:	c0 80       	ld	r12, Z
    b1ae:	d1 80       	ldd	r13, Z+1	; 0x01
    b1b0:	96 fe       	sbrs	r9, 6
    b1b2:	03 c0       	rjmp	.+6      	; 0xb1ba <vfprintf+0x42c>
    b1b4:	61 2f       	mov	r22, r17
    b1b6:	70 e0       	ldi	r23, 0x00	; 0
    b1b8:	02 c0       	rjmp	.+4      	; 0xb1be <vfprintf+0x430>
    b1ba:	6f ef       	ldi	r22, 0xFF	; 255
    b1bc:	7f ef       	ldi	r23, 0xFF	; 255
    b1be:	c6 01       	movw	r24, r12
    b1c0:	bc d3       	rcall	.+1912   	; 0xb93a <strnlen>
    b1c2:	8c 01       	movw	r16, r24
    b1c4:	f9 2d       	mov	r31, r9
    b1c6:	ff 77       	andi	r31, 0x7F	; 127
    b1c8:	13 c0       	rjmp	.+38     	; 0xb1f0 <vfprintf+0x462>
    b1ca:	56 01       	movw	r10, r12
    b1cc:	22 e0       	ldi	r18, 0x02	; 2
    b1ce:	a2 0e       	add	r10, r18
    b1d0:	b1 1c       	adc	r11, r1
    b1d2:	f6 01       	movw	r30, r12
    b1d4:	c0 80       	ld	r12, Z
    b1d6:	d1 80       	ldd	r13, Z+1	; 0x01
    b1d8:	96 fe       	sbrs	r9, 6
    b1da:	03 c0       	rjmp	.+6      	; 0xb1e2 <vfprintf+0x454>
    b1dc:	61 2f       	mov	r22, r17
    b1de:	70 e0       	ldi	r23, 0x00	; 0
    b1e0:	02 c0       	rjmp	.+4      	; 0xb1e6 <vfprintf+0x458>
    b1e2:	6f ef       	ldi	r22, 0xFF	; 255
    b1e4:	7f ef       	ldi	r23, 0xFF	; 255
    b1e6:	c6 01       	movw	r24, r12
    b1e8:	8d d3       	rcall	.+1818   	; 0xb904 <strnlen_P>
    b1ea:	8c 01       	movw	r16, r24
    b1ec:	f9 2d       	mov	r31, r9
    b1ee:	f0 68       	ori	r31, 0x80	; 128
    b1f0:	9f 2e       	mov	r9, r31
    b1f2:	f3 fd       	sbrc	r31, 3
    b1f4:	18 c0       	rjmp	.+48     	; 0xb226 <vfprintf+0x498>
    b1f6:	85 2d       	mov	r24, r5
    b1f8:	90 e0       	ldi	r25, 0x00	; 0
    b1fa:	08 17       	cp	r16, r24
    b1fc:	19 07       	cpc	r17, r25
    b1fe:	98 f4       	brcc	.+38     	; 0xb226 <vfprintf+0x498>
    b200:	b7 01       	movw	r22, r14
    b202:	80 e2       	ldi	r24, 0x20	; 32
    b204:	90 e0       	ldi	r25, 0x00	; 0
    b206:	a4 d3       	rcall	.+1864   	; 0xb950 <fputc>
    b208:	5a 94       	dec	r5
    b20a:	f5 cf       	rjmp	.-22     	; 0xb1f6 <vfprintf+0x468>
    b20c:	f6 01       	movw	r30, r12
    b20e:	97 fc       	sbrc	r9, 7
    b210:	85 91       	lpm	r24, Z+
    b212:	97 fe       	sbrs	r9, 7
    b214:	81 91       	ld	r24, Z+
    b216:	6f 01       	movw	r12, r30
    b218:	b7 01       	movw	r22, r14
    b21a:	90 e0       	ldi	r25, 0x00	; 0
    b21c:	99 d3       	rcall	.+1842   	; 0xb950 <fputc>
    b21e:	51 10       	cpse	r5, r1
    b220:	5a 94       	dec	r5
    b222:	01 50       	subi	r16, 0x01	; 1
    b224:	11 09       	sbc	r17, r1
    b226:	01 15       	cp	r16, r1
    b228:	11 05       	cpc	r17, r1
    b22a:	81 f7       	brne	.-32     	; 0xb20c <vfprintf+0x47e>
    b22c:	f0 c0       	rjmp	.+480    	; 0xb40e <vfprintf+0x680>
    b22e:	84 36       	cpi	r24, 0x64	; 100
    b230:	11 f0       	breq	.+4      	; 0xb236 <vfprintf+0x4a8>
    b232:	89 36       	cpi	r24, 0x69	; 105
    b234:	59 f5       	brne	.+86     	; 0xb28c <vfprintf+0x4fe>
    b236:	56 01       	movw	r10, r12
    b238:	97 fe       	sbrs	r9, 7
    b23a:	09 c0       	rjmp	.+18     	; 0xb24e <vfprintf+0x4c0>
    b23c:	24 e0       	ldi	r18, 0x04	; 4
    b23e:	a2 0e       	add	r10, r18
    b240:	b1 1c       	adc	r11, r1
    b242:	f6 01       	movw	r30, r12
    b244:	60 81       	ld	r22, Z
    b246:	71 81       	ldd	r23, Z+1	; 0x01
    b248:	82 81       	ldd	r24, Z+2	; 0x02
    b24a:	93 81       	ldd	r25, Z+3	; 0x03
    b24c:	0a c0       	rjmp	.+20     	; 0xb262 <vfprintf+0x4d4>
    b24e:	f2 e0       	ldi	r31, 0x02	; 2
    b250:	af 0e       	add	r10, r31
    b252:	b1 1c       	adc	r11, r1
    b254:	f6 01       	movw	r30, r12
    b256:	60 81       	ld	r22, Z
    b258:	71 81       	ldd	r23, Z+1	; 0x01
    b25a:	07 2e       	mov	r0, r23
    b25c:	00 0c       	add	r0, r0
    b25e:	88 0b       	sbc	r24, r24
    b260:	99 0b       	sbc	r25, r25
    b262:	f9 2d       	mov	r31, r9
    b264:	ff 76       	andi	r31, 0x6F	; 111
    b266:	9f 2e       	mov	r9, r31
    b268:	97 ff       	sbrs	r25, 7
    b26a:	09 c0       	rjmp	.+18     	; 0xb27e <vfprintf+0x4f0>
    b26c:	90 95       	com	r25
    b26e:	80 95       	com	r24
    b270:	70 95       	com	r23
    b272:	61 95       	neg	r22
    b274:	7f 4f       	sbci	r23, 0xFF	; 255
    b276:	8f 4f       	sbci	r24, 0xFF	; 255
    b278:	9f 4f       	sbci	r25, 0xFF	; 255
    b27a:	f0 68       	ori	r31, 0x80	; 128
    b27c:	9f 2e       	mov	r9, r31
    b27e:	2a e0       	ldi	r18, 0x0A	; 10
    b280:	30 e0       	ldi	r19, 0x00	; 0
    b282:	a3 01       	movw	r20, r6
    b284:	d9 d3       	rcall	.+1970   	; 0xba38 <__ultoa_invert>
    b286:	c8 2e       	mov	r12, r24
    b288:	c6 18       	sub	r12, r6
    b28a:	3e c0       	rjmp	.+124    	; 0xb308 <vfprintf+0x57a>
    b28c:	09 2d       	mov	r16, r9
    b28e:	85 37       	cpi	r24, 0x75	; 117
    b290:	21 f4       	brne	.+8      	; 0xb29a <vfprintf+0x50c>
    b292:	0f 7e       	andi	r16, 0xEF	; 239
    b294:	2a e0       	ldi	r18, 0x0A	; 10
    b296:	30 e0       	ldi	r19, 0x00	; 0
    b298:	1d c0       	rjmp	.+58     	; 0xb2d4 <vfprintf+0x546>
    b29a:	09 7f       	andi	r16, 0xF9	; 249
    b29c:	8f 36       	cpi	r24, 0x6F	; 111
    b29e:	91 f0       	breq	.+36     	; 0xb2c4 <vfprintf+0x536>
    b2a0:	18 f4       	brcc	.+6      	; 0xb2a8 <vfprintf+0x51a>
    b2a2:	88 35       	cpi	r24, 0x58	; 88
    b2a4:	59 f0       	breq	.+22     	; 0xb2bc <vfprintf+0x52e>
    b2a6:	bc c0       	rjmp	.+376    	; 0xb420 <vfprintf+0x692>
    b2a8:	80 37       	cpi	r24, 0x70	; 112
    b2aa:	19 f0       	breq	.+6      	; 0xb2b2 <vfprintf+0x524>
    b2ac:	88 37       	cpi	r24, 0x78	; 120
    b2ae:	11 f0       	breq	.+4      	; 0xb2b4 <vfprintf+0x526>
    b2b0:	b7 c0       	rjmp	.+366    	; 0xb420 <vfprintf+0x692>
    b2b2:	00 61       	ori	r16, 0x10	; 16
    b2b4:	04 ff       	sbrs	r16, 4
    b2b6:	09 c0       	rjmp	.+18     	; 0xb2ca <vfprintf+0x53c>
    b2b8:	04 60       	ori	r16, 0x04	; 4
    b2ba:	07 c0       	rjmp	.+14     	; 0xb2ca <vfprintf+0x53c>
    b2bc:	94 fe       	sbrs	r9, 4
    b2be:	08 c0       	rjmp	.+16     	; 0xb2d0 <vfprintf+0x542>
    b2c0:	06 60       	ori	r16, 0x06	; 6
    b2c2:	06 c0       	rjmp	.+12     	; 0xb2d0 <vfprintf+0x542>
    b2c4:	28 e0       	ldi	r18, 0x08	; 8
    b2c6:	30 e0       	ldi	r19, 0x00	; 0
    b2c8:	05 c0       	rjmp	.+10     	; 0xb2d4 <vfprintf+0x546>
    b2ca:	20 e1       	ldi	r18, 0x10	; 16
    b2cc:	30 e0       	ldi	r19, 0x00	; 0
    b2ce:	02 c0       	rjmp	.+4      	; 0xb2d4 <vfprintf+0x546>
    b2d0:	20 e1       	ldi	r18, 0x10	; 16
    b2d2:	32 e0       	ldi	r19, 0x02	; 2
    b2d4:	56 01       	movw	r10, r12
    b2d6:	07 ff       	sbrs	r16, 7
    b2d8:	09 c0       	rjmp	.+18     	; 0xb2ec <vfprintf+0x55e>
    b2da:	84 e0       	ldi	r24, 0x04	; 4
    b2dc:	a8 0e       	add	r10, r24
    b2de:	b1 1c       	adc	r11, r1
    b2e0:	f6 01       	movw	r30, r12
    b2e2:	60 81       	ld	r22, Z
    b2e4:	71 81       	ldd	r23, Z+1	; 0x01
    b2e6:	82 81       	ldd	r24, Z+2	; 0x02
    b2e8:	93 81       	ldd	r25, Z+3	; 0x03
    b2ea:	08 c0       	rjmp	.+16     	; 0xb2fc <vfprintf+0x56e>
    b2ec:	f2 e0       	ldi	r31, 0x02	; 2
    b2ee:	af 0e       	add	r10, r31
    b2f0:	b1 1c       	adc	r11, r1
    b2f2:	f6 01       	movw	r30, r12
    b2f4:	60 81       	ld	r22, Z
    b2f6:	71 81       	ldd	r23, Z+1	; 0x01
    b2f8:	80 e0       	ldi	r24, 0x00	; 0
    b2fa:	90 e0       	ldi	r25, 0x00	; 0
    b2fc:	a3 01       	movw	r20, r6
    b2fe:	9c d3       	rcall	.+1848   	; 0xba38 <__ultoa_invert>
    b300:	c8 2e       	mov	r12, r24
    b302:	c6 18       	sub	r12, r6
    b304:	0f 77       	andi	r16, 0x7F	; 127
    b306:	90 2e       	mov	r9, r16
    b308:	96 fe       	sbrs	r9, 6
    b30a:	0b c0       	rjmp	.+22     	; 0xb322 <vfprintf+0x594>
    b30c:	09 2d       	mov	r16, r9
    b30e:	0e 7f       	andi	r16, 0xFE	; 254
    b310:	c1 16       	cp	r12, r17
    b312:	50 f4       	brcc	.+20     	; 0xb328 <vfprintf+0x59a>
    b314:	94 fe       	sbrs	r9, 4
    b316:	0a c0       	rjmp	.+20     	; 0xb32c <vfprintf+0x59e>
    b318:	92 fc       	sbrc	r9, 2
    b31a:	08 c0       	rjmp	.+16     	; 0xb32c <vfprintf+0x59e>
    b31c:	09 2d       	mov	r16, r9
    b31e:	0e 7e       	andi	r16, 0xEE	; 238
    b320:	05 c0       	rjmp	.+10     	; 0xb32c <vfprintf+0x59e>
    b322:	dc 2c       	mov	r13, r12
    b324:	09 2d       	mov	r16, r9
    b326:	03 c0       	rjmp	.+6      	; 0xb32e <vfprintf+0x5a0>
    b328:	dc 2c       	mov	r13, r12
    b32a:	01 c0       	rjmp	.+2      	; 0xb32e <vfprintf+0x5a0>
    b32c:	d1 2e       	mov	r13, r17
    b32e:	04 ff       	sbrs	r16, 4
    b330:	0d c0       	rjmp	.+26     	; 0xb34c <vfprintf+0x5be>
    b332:	fe 01       	movw	r30, r28
    b334:	ec 0d       	add	r30, r12
    b336:	f1 1d       	adc	r31, r1
    b338:	80 81       	ld	r24, Z
    b33a:	80 33       	cpi	r24, 0x30	; 48
    b33c:	11 f4       	brne	.+4      	; 0xb342 <vfprintf+0x5b4>
    b33e:	09 7e       	andi	r16, 0xE9	; 233
    b340:	09 c0       	rjmp	.+18     	; 0xb354 <vfprintf+0x5c6>
    b342:	02 ff       	sbrs	r16, 2
    b344:	06 c0       	rjmp	.+12     	; 0xb352 <vfprintf+0x5c4>
    b346:	d3 94       	inc	r13
    b348:	d3 94       	inc	r13
    b34a:	04 c0       	rjmp	.+8      	; 0xb354 <vfprintf+0x5c6>
    b34c:	80 2f       	mov	r24, r16
    b34e:	86 78       	andi	r24, 0x86	; 134
    b350:	09 f0       	breq	.+2      	; 0xb354 <vfprintf+0x5c6>
    b352:	d3 94       	inc	r13
    b354:	03 fd       	sbrc	r16, 3
    b356:	10 c0       	rjmp	.+32     	; 0xb378 <vfprintf+0x5ea>
    b358:	00 ff       	sbrs	r16, 0
    b35a:	06 c0       	rjmp	.+12     	; 0xb368 <vfprintf+0x5da>
    b35c:	1c 2d       	mov	r17, r12
    b35e:	d5 14       	cp	r13, r5
    b360:	78 f4       	brcc	.+30     	; 0xb380 <vfprintf+0x5f2>
    b362:	15 0d       	add	r17, r5
    b364:	1d 19       	sub	r17, r13
    b366:	0c c0       	rjmp	.+24     	; 0xb380 <vfprintf+0x5f2>
    b368:	d5 14       	cp	r13, r5
    b36a:	50 f4       	brcc	.+20     	; 0xb380 <vfprintf+0x5f2>
    b36c:	b7 01       	movw	r22, r14
    b36e:	80 e2       	ldi	r24, 0x20	; 32
    b370:	90 e0       	ldi	r25, 0x00	; 0
    b372:	ee d2       	rcall	.+1500   	; 0xb950 <fputc>
    b374:	d3 94       	inc	r13
    b376:	f8 cf       	rjmp	.-16     	; 0xb368 <vfprintf+0x5da>
    b378:	d5 14       	cp	r13, r5
    b37a:	10 f4       	brcc	.+4      	; 0xb380 <vfprintf+0x5f2>
    b37c:	5d 18       	sub	r5, r13
    b37e:	01 c0       	rjmp	.+2      	; 0xb382 <vfprintf+0x5f4>
    b380:	51 2c       	mov	r5, r1
    b382:	04 ff       	sbrs	r16, 4
    b384:	0f c0       	rjmp	.+30     	; 0xb3a4 <vfprintf+0x616>
    b386:	b7 01       	movw	r22, r14
    b388:	80 e3       	ldi	r24, 0x30	; 48
    b38a:	90 e0       	ldi	r25, 0x00	; 0
    b38c:	e1 d2       	rcall	.+1474   	; 0xb950 <fputc>
    b38e:	02 ff       	sbrs	r16, 2
    b390:	16 c0       	rjmp	.+44     	; 0xb3be <vfprintf+0x630>
    b392:	01 fd       	sbrc	r16, 1
    b394:	03 c0       	rjmp	.+6      	; 0xb39c <vfprintf+0x60e>
    b396:	88 e7       	ldi	r24, 0x78	; 120
    b398:	90 e0       	ldi	r25, 0x00	; 0
    b39a:	02 c0       	rjmp	.+4      	; 0xb3a0 <vfprintf+0x612>
    b39c:	88 e5       	ldi	r24, 0x58	; 88
    b39e:	90 e0       	ldi	r25, 0x00	; 0
    b3a0:	b7 01       	movw	r22, r14
    b3a2:	0c c0       	rjmp	.+24     	; 0xb3bc <vfprintf+0x62e>
    b3a4:	80 2f       	mov	r24, r16
    b3a6:	86 78       	andi	r24, 0x86	; 134
    b3a8:	51 f0       	breq	.+20     	; 0xb3be <vfprintf+0x630>
    b3aa:	01 ff       	sbrs	r16, 1
    b3ac:	02 c0       	rjmp	.+4      	; 0xb3b2 <vfprintf+0x624>
    b3ae:	8b e2       	ldi	r24, 0x2B	; 43
    b3b0:	01 c0       	rjmp	.+2      	; 0xb3b4 <vfprintf+0x626>
    b3b2:	80 e2       	ldi	r24, 0x20	; 32
    b3b4:	07 fd       	sbrc	r16, 7
    b3b6:	8d e2       	ldi	r24, 0x2D	; 45
    b3b8:	b7 01       	movw	r22, r14
    b3ba:	90 e0       	ldi	r25, 0x00	; 0
    b3bc:	c9 d2       	rcall	.+1426   	; 0xb950 <fputc>
    b3be:	c1 16       	cp	r12, r17
    b3c0:	30 f4       	brcc	.+12     	; 0xb3ce <vfprintf+0x640>
    b3c2:	b7 01       	movw	r22, r14
    b3c4:	80 e3       	ldi	r24, 0x30	; 48
    b3c6:	90 e0       	ldi	r25, 0x00	; 0
    b3c8:	c3 d2       	rcall	.+1414   	; 0xb950 <fputc>
    b3ca:	11 50       	subi	r17, 0x01	; 1
    b3cc:	f8 cf       	rjmp	.-16     	; 0xb3be <vfprintf+0x630>
    b3ce:	ca 94       	dec	r12
    b3d0:	f3 01       	movw	r30, r6
    b3d2:	ec 0d       	add	r30, r12
    b3d4:	f1 1d       	adc	r31, r1
    b3d6:	80 81       	ld	r24, Z
    b3d8:	b7 01       	movw	r22, r14
    b3da:	90 e0       	ldi	r25, 0x00	; 0
    b3dc:	b9 d2       	rcall	.+1394   	; 0xb950 <fputc>
    b3de:	c1 10       	cpse	r12, r1
    b3e0:	f6 cf       	rjmp	.-20     	; 0xb3ce <vfprintf+0x640>
    b3e2:	15 c0       	rjmp	.+42     	; 0xb40e <vfprintf+0x680>
    b3e4:	f4 e0       	ldi	r31, 0x04	; 4
    b3e6:	f5 15       	cp	r31, r5
    b3e8:	50 f5       	brcc	.+84     	; 0xb43e <vfprintf+0x6b0>
    b3ea:	84 e0       	ldi	r24, 0x04	; 4
    b3ec:	58 1a       	sub	r5, r24
    b3ee:	93 fe       	sbrs	r9, 3
    b3f0:	1e c0       	rjmp	.+60     	; 0xb42e <vfprintf+0x6a0>
    b3f2:	01 11       	cpse	r16, r1
    b3f4:	25 c0       	rjmp	.+74     	; 0xb440 <vfprintf+0x6b2>
    b3f6:	2c 85       	ldd	r18, Y+12	; 0x0c
    b3f8:	23 ff       	sbrs	r18, 3
    b3fa:	27 c0       	rjmp	.+78     	; 0xb44a <vfprintf+0x6bc>
    b3fc:	0e ee       	ldi	r16, 0xEE	; 238
    b3fe:	18 e0       	ldi	r17, 0x08	; 8
    b400:	39 2d       	mov	r19, r9
    b402:	30 71       	andi	r19, 0x10	; 16
    b404:	93 2e       	mov	r9, r19
    b406:	f8 01       	movw	r30, r16
    b408:	84 91       	lpm	r24, Z
    b40a:	81 11       	cpse	r24, r1
    b40c:	21 c0       	rjmp	.+66     	; 0xb450 <vfprintf+0x6c2>
    b40e:	55 20       	and	r5, r5
    b410:	09 f4       	brne	.+2      	; 0xb414 <vfprintf+0x686>
    b412:	fc cc       	rjmp	.-1544   	; 0xae0c <vfprintf+0x7e>
    b414:	b7 01       	movw	r22, r14
    b416:	80 e2       	ldi	r24, 0x20	; 32
    b418:	90 e0       	ldi	r25, 0x00	; 0
    b41a:	9a d2       	rcall	.+1332   	; 0xb950 <fputc>
    b41c:	5a 94       	dec	r5
    b41e:	f7 cf       	rjmp	.-18     	; 0xb40e <vfprintf+0x680>
    b420:	f7 01       	movw	r30, r14
    b422:	86 81       	ldd	r24, Z+6	; 0x06
    b424:	97 81       	ldd	r25, Z+7	; 0x07
    b426:	23 c0       	rjmp	.+70     	; 0xb46e <vfprintf+0x6e0>
    b428:	8f ef       	ldi	r24, 0xFF	; 255
    b42a:	9f ef       	ldi	r25, 0xFF	; 255
    b42c:	20 c0       	rjmp	.+64     	; 0xb46e <vfprintf+0x6e0>
    b42e:	b7 01       	movw	r22, r14
    b430:	80 e2       	ldi	r24, 0x20	; 32
    b432:	90 e0       	ldi	r25, 0x00	; 0
    b434:	8d d2       	rcall	.+1306   	; 0xb950 <fputc>
    b436:	5a 94       	dec	r5
    b438:	51 10       	cpse	r5, r1
    b43a:	f9 cf       	rjmp	.-14     	; 0xb42e <vfprintf+0x6a0>
    b43c:	da cf       	rjmp	.-76     	; 0xb3f2 <vfprintf+0x664>
    b43e:	51 2c       	mov	r5, r1
    b440:	b7 01       	movw	r22, r14
    b442:	80 2f       	mov	r24, r16
    b444:	90 e0       	ldi	r25, 0x00	; 0
    b446:	84 d2       	rcall	.+1288   	; 0xb950 <fputc>
    b448:	d6 cf       	rjmp	.-84     	; 0xb3f6 <vfprintf+0x668>
    b44a:	02 ef       	ldi	r16, 0xF2	; 242
    b44c:	18 e0       	ldi	r17, 0x08	; 8
    b44e:	d8 cf       	rjmp	.-80     	; 0xb400 <vfprintf+0x672>
    b450:	91 10       	cpse	r9, r1
    b452:	80 52       	subi	r24, 0x20	; 32
    b454:	b7 01       	movw	r22, r14
    b456:	90 e0       	ldi	r25, 0x00	; 0
    b458:	7b d2       	rcall	.+1270   	; 0xb950 <fputc>
    b45a:	0f 5f       	subi	r16, 0xFF	; 255
    b45c:	1f 4f       	sbci	r17, 0xFF	; 255
    b45e:	d3 cf       	rjmp	.-90     	; 0xb406 <vfprintf+0x678>
    b460:	23 e0       	ldi	r18, 0x03	; 3
    b462:	25 15       	cp	r18, r5
    b464:	10 f4       	brcc	.+4      	; 0xb46a <vfprintf+0x6dc>
    b466:	83 e0       	ldi	r24, 0x03	; 3
    b468:	c1 cf       	rjmp	.-126    	; 0xb3ec <vfprintf+0x65e>
    b46a:	51 2c       	mov	r5, r1
    b46c:	c4 cf       	rjmp	.-120    	; 0xb3f6 <vfprintf+0x668>
    b46e:	60 96       	adiw	r28, 0x10	; 16
    b470:	0f b6       	in	r0, 0x3f	; 63
    b472:	f8 94       	cli
    b474:	de bf       	out	0x3e, r29	; 62
    b476:	0f be       	out	0x3f, r0	; 63
    b478:	cd bf       	out	0x3d, r28	; 61
    b47a:	df 91       	pop	r29
    b47c:	cf 91       	pop	r28
    b47e:	1f 91       	pop	r17
    b480:	0f 91       	pop	r16
    b482:	ff 90       	pop	r15
    b484:	ef 90       	pop	r14
    b486:	df 90       	pop	r13
    b488:	cf 90       	pop	r12
    b48a:	bf 90       	pop	r11
    b48c:	af 90       	pop	r10
    b48e:	9f 90       	pop	r9
    b490:	8f 90       	pop	r8
    b492:	7f 90       	pop	r7
    b494:	6f 90       	pop	r6
    b496:	5f 90       	pop	r5
    b498:	4f 90       	pop	r4
    b49a:	3f 90       	pop	r3
    b49c:	2f 90       	pop	r2
    b49e:	08 95       	ret

0000b4a0 <__udivmodsi4>:
    b4a0:	a1 e2       	ldi	r26, 0x21	; 33
    b4a2:	1a 2e       	mov	r1, r26
    b4a4:	aa 1b       	sub	r26, r26
    b4a6:	bb 1b       	sub	r27, r27
    b4a8:	fd 01       	movw	r30, r26
    b4aa:	0d c0       	rjmp	.+26     	; 0xb4c6 <__udivmodsi4_ep>

0000b4ac <__udivmodsi4_loop>:
    b4ac:	aa 1f       	adc	r26, r26
    b4ae:	bb 1f       	adc	r27, r27
    b4b0:	ee 1f       	adc	r30, r30
    b4b2:	ff 1f       	adc	r31, r31
    b4b4:	a2 17       	cp	r26, r18
    b4b6:	b3 07       	cpc	r27, r19
    b4b8:	e4 07       	cpc	r30, r20
    b4ba:	f5 07       	cpc	r31, r21
    b4bc:	20 f0       	brcs	.+8      	; 0xb4c6 <__udivmodsi4_ep>
    b4be:	a2 1b       	sub	r26, r18
    b4c0:	b3 0b       	sbc	r27, r19
    b4c2:	e4 0b       	sbc	r30, r20
    b4c4:	f5 0b       	sbc	r31, r21

0000b4c6 <__udivmodsi4_ep>:
    b4c6:	66 1f       	adc	r22, r22
    b4c8:	77 1f       	adc	r23, r23
    b4ca:	88 1f       	adc	r24, r24
    b4cc:	99 1f       	adc	r25, r25
    b4ce:	1a 94       	dec	r1
    b4d0:	69 f7       	brne	.-38     	; 0xb4ac <__udivmodsi4_loop>
    b4d2:	60 95       	com	r22
    b4d4:	70 95       	com	r23
    b4d6:	80 95       	com	r24
    b4d8:	90 95       	com	r25
    b4da:	9b 01       	movw	r18, r22
    b4dc:	ac 01       	movw	r20, r24
    b4de:	bd 01       	movw	r22, r26
    b4e0:	cf 01       	movw	r24, r30
    b4e2:	08 95       	ret

0000b4e4 <__tablejump2__>:
    b4e4:	ee 0f       	add	r30, r30
    b4e6:	ff 1f       	adc	r31, r31
    b4e8:	88 1f       	adc	r24, r24
    b4ea:	8b bf       	out	0x3b, r24	; 59
    b4ec:	07 90       	elpm	r0, Z+
    b4ee:	f6 91       	elpm	r31, Z
    b4f0:	e0 2d       	mov	r30, r0
    b4f2:	19 94       	eijmp

0000b4f4 <__umulhisi3>:
    b4f4:	a2 9f       	mul	r26, r18
    b4f6:	b0 01       	movw	r22, r0
    b4f8:	b3 9f       	mul	r27, r19
    b4fa:	c0 01       	movw	r24, r0
    b4fc:	a3 9f       	mul	r26, r19
    b4fe:	70 0d       	add	r23, r0
    b500:	81 1d       	adc	r24, r1
    b502:	11 24       	eor	r1, r1
    b504:	91 1d       	adc	r25, r1
    b506:	b2 9f       	mul	r27, r18
    b508:	70 0d       	add	r23, r0
    b50a:	81 1d       	adc	r24, r1
    b50c:	11 24       	eor	r1, r1
    b50e:	91 1d       	adc	r25, r1
    b510:	08 95       	ret

0000b512 <malloc>:
    b512:	0f 93       	push	r16
    b514:	1f 93       	push	r17
    b516:	cf 93       	push	r28
    b518:	df 93       	push	r29
    b51a:	82 30       	cpi	r24, 0x02	; 2
    b51c:	91 05       	cpc	r25, r1
    b51e:	10 f4       	brcc	.+4      	; 0xb524 <malloc+0x12>
    b520:	82 e0       	ldi	r24, 0x02	; 2
    b522:	90 e0       	ldi	r25, 0x00	; 0
    b524:	e0 91 a7 0a 	lds	r30, 0x0AA7	; 0x800aa7 <__flp>
    b528:	f0 91 a8 0a 	lds	r31, 0x0AA8	; 0x800aa8 <__flp+0x1>
    b52c:	20 e0       	ldi	r18, 0x00	; 0
    b52e:	30 e0       	ldi	r19, 0x00	; 0
    b530:	a0 e0       	ldi	r26, 0x00	; 0
    b532:	b0 e0       	ldi	r27, 0x00	; 0
    b534:	30 97       	sbiw	r30, 0x00	; 0
    b536:	19 f1       	breq	.+70     	; 0xb57e <malloc+0x6c>
    b538:	40 81       	ld	r20, Z
    b53a:	51 81       	ldd	r21, Z+1	; 0x01
    b53c:	02 81       	ldd	r16, Z+2	; 0x02
    b53e:	13 81       	ldd	r17, Z+3	; 0x03
    b540:	48 17       	cp	r20, r24
    b542:	59 07       	cpc	r21, r25
    b544:	c8 f0       	brcs	.+50     	; 0xb578 <malloc+0x66>
    b546:	84 17       	cp	r24, r20
    b548:	95 07       	cpc	r25, r21
    b54a:	69 f4       	brne	.+26     	; 0xb566 <malloc+0x54>
    b54c:	10 97       	sbiw	r26, 0x00	; 0
    b54e:	31 f0       	breq	.+12     	; 0xb55c <malloc+0x4a>
    b550:	12 96       	adiw	r26, 0x02	; 2
    b552:	0c 93       	st	X, r16
    b554:	12 97       	sbiw	r26, 0x02	; 2
    b556:	13 96       	adiw	r26, 0x03	; 3
    b558:	1c 93       	st	X, r17
    b55a:	27 c0       	rjmp	.+78     	; 0xb5aa <malloc+0x98>
    b55c:	00 93 a7 0a 	sts	0x0AA7, r16	; 0x800aa7 <__flp>
    b560:	10 93 a8 0a 	sts	0x0AA8, r17	; 0x800aa8 <__flp+0x1>
    b564:	22 c0       	rjmp	.+68     	; 0xb5aa <malloc+0x98>
    b566:	21 15       	cp	r18, r1
    b568:	31 05       	cpc	r19, r1
    b56a:	19 f0       	breq	.+6      	; 0xb572 <malloc+0x60>
    b56c:	42 17       	cp	r20, r18
    b56e:	53 07       	cpc	r21, r19
    b570:	18 f4       	brcc	.+6      	; 0xb578 <malloc+0x66>
    b572:	9a 01       	movw	r18, r20
    b574:	bd 01       	movw	r22, r26
    b576:	ef 01       	movw	r28, r30
    b578:	df 01       	movw	r26, r30
    b57a:	f8 01       	movw	r30, r16
    b57c:	db cf       	rjmp	.-74     	; 0xb534 <malloc+0x22>
    b57e:	21 15       	cp	r18, r1
    b580:	31 05       	cpc	r19, r1
    b582:	f9 f0       	breq	.+62     	; 0xb5c2 <malloc+0xb0>
    b584:	28 1b       	sub	r18, r24
    b586:	39 0b       	sbc	r19, r25
    b588:	24 30       	cpi	r18, 0x04	; 4
    b58a:	31 05       	cpc	r19, r1
    b58c:	80 f4       	brcc	.+32     	; 0xb5ae <malloc+0x9c>
    b58e:	8a 81       	ldd	r24, Y+2	; 0x02
    b590:	9b 81       	ldd	r25, Y+3	; 0x03
    b592:	61 15       	cp	r22, r1
    b594:	71 05       	cpc	r23, r1
    b596:	21 f0       	breq	.+8      	; 0xb5a0 <malloc+0x8e>
    b598:	fb 01       	movw	r30, r22
    b59a:	93 83       	std	Z+3, r25	; 0x03
    b59c:	82 83       	std	Z+2, r24	; 0x02
    b59e:	04 c0       	rjmp	.+8      	; 0xb5a8 <malloc+0x96>
    b5a0:	90 93 a8 0a 	sts	0x0AA8, r25	; 0x800aa8 <__flp+0x1>
    b5a4:	80 93 a7 0a 	sts	0x0AA7, r24	; 0x800aa7 <__flp>
    b5a8:	fe 01       	movw	r30, r28
    b5aa:	32 96       	adiw	r30, 0x02	; 2
    b5ac:	44 c0       	rjmp	.+136    	; 0xb636 <malloc+0x124>
    b5ae:	fe 01       	movw	r30, r28
    b5b0:	e2 0f       	add	r30, r18
    b5b2:	f3 1f       	adc	r31, r19
    b5b4:	81 93       	st	Z+, r24
    b5b6:	91 93       	st	Z+, r25
    b5b8:	22 50       	subi	r18, 0x02	; 2
    b5ba:	31 09       	sbc	r19, r1
    b5bc:	39 83       	std	Y+1, r19	; 0x01
    b5be:	28 83       	st	Y, r18
    b5c0:	3a c0       	rjmp	.+116    	; 0xb636 <malloc+0x124>
    b5c2:	20 91 a5 0a 	lds	r18, 0x0AA5	; 0x800aa5 <__brkval>
    b5c6:	30 91 a6 0a 	lds	r19, 0x0AA6	; 0x800aa6 <__brkval+0x1>
    b5ca:	23 2b       	or	r18, r19
    b5cc:	41 f4       	brne	.+16     	; 0xb5de <malloc+0xcc>
    b5ce:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    b5d2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    b5d6:	30 93 a6 0a 	sts	0x0AA6, r19	; 0x800aa6 <__brkval+0x1>
    b5da:	20 93 a5 0a 	sts	0x0AA5, r18	; 0x800aa5 <__brkval>
    b5de:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    b5e2:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    b5e6:	21 15       	cp	r18, r1
    b5e8:	31 05       	cpc	r19, r1
    b5ea:	41 f4       	brne	.+16     	; 0xb5fc <malloc+0xea>
    b5ec:	2d b7       	in	r18, 0x3d	; 61
    b5ee:	3e b7       	in	r19, 0x3e	; 62
    b5f0:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    b5f4:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    b5f8:	24 1b       	sub	r18, r20
    b5fa:	35 0b       	sbc	r19, r21
    b5fc:	e0 91 a5 0a 	lds	r30, 0x0AA5	; 0x800aa5 <__brkval>
    b600:	f0 91 a6 0a 	lds	r31, 0x0AA6	; 0x800aa6 <__brkval+0x1>
    b604:	e2 17       	cp	r30, r18
    b606:	f3 07       	cpc	r31, r19
    b608:	a0 f4       	brcc	.+40     	; 0xb632 <malloc+0x120>
    b60a:	2e 1b       	sub	r18, r30
    b60c:	3f 0b       	sbc	r19, r31
    b60e:	28 17       	cp	r18, r24
    b610:	39 07       	cpc	r19, r25
    b612:	78 f0       	brcs	.+30     	; 0xb632 <malloc+0x120>
    b614:	ac 01       	movw	r20, r24
    b616:	4e 5f       	subi	r20, 0xFE	; 254
    b618:	5f 4f       	sbci	r21, 0xFF	; 255
    b61a:	24 17       	cp	r18, r20
    b61c:	35 07       	cpc	r19, r21
    b61e:	48 f0       	brcs	.+18     	; 0xb632 <malloc+0x120>
    b620:	4e 0f       	add	r20, r30
    b622:	5f 1f       	adc	r21, r31
    b624:	50 93 a6 0a 	sts	0x0AA6, r21	; 0x800aa6 <__brkval+0x1>
    b628:	40 93 a5 0a 	sts	0x0AA5, r20	; 0x800aa5 <__brkval>
    b62c:	81 93       	st	Z+, r24
    b62e:	91 93       	st	Z+, r25
    b630:	02 c0       	rjmp	.+4      	; 0xb636 <malloc+0x124>
    b632:	e0 e0       	ldi	r30, 0x00	; 0
    b634:	f0 e0       	ldi	r31, 0x00	; 0
    b636:	cf 01       	movw	r24, r30
    b638:	df 91       	pop	r29
    b63a:	cf 91       	pop	r28
    b63c:	1f 91       	pop	r17
    b63e:	0f 91       	pop	r16
    b640:	08 95       	ret

0000b642 <free>:
    b642:	cf 93       	push	r28
    b644:	df 93       	push	r29
    b646:	00 97       	sbiw	r24, 0x00	; 0
    b648:	09 f4       	brne	.+2      	; 0xb64c <free+0xa>
    b64a:	81 c0       	rjmp	.+258    	; 0xb74e <free+0x10c>
    b64c:	fc 01       	movw	r30, r24
    b64e:	32 97       	sbiw	r30, 0x02	; 2
    b650:	13 82       	std	Z+3, r1	; 0x03
    b652:	12 82       	std	Z+2, r1	; 0x02
    b654:	a0 91 a7 0a 	lds	r26, 0x0AA7	; 0x800aa7 <__flp>
    b658:	b0 91 a8 0a 	lds	r27, 0x0AA8	; 0x800aa8 <__flp+0x1>
    b65c:	10 97       	sbiw	r26, 0x00	; 0
    b65e:	81 f4       	brne	.+32     	; 0xb680 <free+0x3e>
    b660:	20 81       	ld	r18, Z
    b662:	31 81       	ldd	r19, Z+1	; 0x01
    b664:	82 0f       	add	r24, r18
    b666:	93 1f       	adc	r25, r19
    b668:	20 91 a5 0a 	lds	r18, 0x0AA5	; 0x800aa5 <__brkval>
    b66c:	30 91 a6 0a 	lds	r19, 0x0AA6	; 0x800aa6 <__brkval+0x1>
    b670:	28 17       	cp	r18, r24
    b672:	39 07       	cpc	r19, r25
    b674:	51 f5       	brne	.+84     	; 0xb6ca <free+0x88>
    b676:	f0 93 a6 0a 	sts	0x0AA6, r31	; 0x800aa6 <__brkval+0x1>
    b67a:	e0 93 a5 0a 	sts	0x0AA5, r30	; 0x800aa5 <__brkval>
    b67e:	67 c0       	rjmp	.+206    	; 0xb74e <free+0x10c>
    b680:	ed 01       	movw	r28, r26
    b682:	20 e0       	ldi	r18, 0x00	; 0
    b684:	30 e0       	ldi	r19, 0x00	; 0
    b686:	ce 17       	cp	r28, r30
    b688:	df 07       	cpc	r29, r31
    b68a:	40 f4       	brcc	.+16     	; 0xb69c <free+0x5a>
    b68c:	4a 81       	ldd	r20, Y+2	; 0x02
    b68e:	5b 81       	ldd	r21, Y+3	; 0x03
    b690:	9e 01       	movw	r18, r28
    b692:	41 15       	cp	r20, r1
    b694:	51 05       	cpc	r21, r1
    b696:	f1 f0       	breq	.+60     	; 0xb6d4 <free+0x92>
    b698:	ea 01       	movw	r28, r20
    b69a:	f5 cf       	rjmp	.-22     	; 0xb686 <free+0x44>
    b69c:	d3 83       	std	Z+3, r29	; 0x03
    b69e:	c2 83       	std	Z+2, r28	; 0x02
    b6a0:	40 81       	ld	r20, Z
    b6a2:	51 81       	ldd	r21, Z+1	; 0x01
    b6a4:	84 0f       	add	r24, r20
    b6a6:	95 1f       	adc	r25, r21
    b6a8:	c8 17       	cp	r28, r24
    b6aa:	d9 07       	cpc	r29, r25
    b6ac:	59 f4       	brne	.+22     	; 0xb6c4 <free+0x82>
    b6ae:	88 81       	ld	r24, Y
    b6b0:	99 81       	ldd	r25, Y+1	; 0x01
    b6b2:	84 0f       	add	r24, r20
    b6b4:	95 1f       	adc	r25, r21
    b6b6:	02 96       	adiw	r24, 0x02	; 2
    b6b8:	91 83       	std	Z+1, r25	; 0x01
    b6ba:	80 83       	st	Z, r24
    b6bc:	8a 81       	ldd	r24, Y+2	; 0x02
    b6be:	9b 81       	ldd	r25, Y+3	; 0x03
    b6c0:	93 83       	std	Z+3, r25	; 0x03
    b6c2:	82 83       	std	Z+2, r24	; 0x02
    b6c4:	21 15       	cp	r18, r1
    b6c6:	31 05       	cpc	r19, r1
    b6c8:	29 f4       	brne	.+10     	; 0xb6d4 <free+0x92>
    b6ca:	f0 93 a8 0a 	sts	0x0AA8, r31	; 0x800aa8 <__flp+0x1>
    b6ce:	e0 93 a7 0a 	sts	0x0AA7, r30	; 0x800aa7 <__flp>
    b6d2:	3d c0       	rjmp	.+122    	; 0xb74e <free+0x10c>
    b6d4:	e9 01       	movw	r28, r18
    b6d6:	fb 83       	std	Y+3, r31	; 0x03
    b6d8:	ea 83       	std	Y+2, r30	; 0x02
    b6da:	49 91       	ld	r20, Y+
    b6dc:	59 91       	ld	r21, Y+
    b6de:	c4 0f       	add	r28, r20
    b6e0:	d5 1f       	adc	r29, r21
    b6e2:	ec 17       	cp	r30, r28
    b6e4:	fd 07       	cpc	r31, r29
    b6e6:	61 f4       	brne	.+24     	; 0xb700 <free+0xbe>
    b6e8:	80 81       	ld	r24, Z
    b6ea:	91 81       	ldd	r25, Z+1	; 0x01
    b6ec:	84 0f       	add	r24, r20
    b6ee:	95 1f       	adc	r25, r21
    b6f0:	02 96       	adiw	r24, 0x02	; 2
    b6f2:	e9 01       	movw	r28, r18
    b6f4:	99 83       	std	Y+1, r25	; 0x01
    b6f6:	88 83       	st	Y, r24
    b6f8:	82 81       	ldd	r24, Z+2	; 0x02
    b6fa:	93 81       	ldd	r25, Z+3	; 0x03
    b6fc:	9b 83       	std	Y+3, r25	; 0x03
    b6fe:	8a 83       	std	Y+2, r24	; 0x02
    b700:	e0 e0       	ldi	r30, 0x00	; 0
    b702:	f0 e0       	ldi	r31, 0x00	; 0
    b704:	12 96       	adiw	r26, 0x02	; 2
    b706:	8d 91       	ld	r24, X+
    b708:	9c 91       	ld	r25, X
    b70a:	13 97       	sbiw	r26, 0x03	; 3
    b70c:	00 97       	sbiw	r24, 0x00	; 0
    b70e:	19 f0       	breq	.+6      	; 0xb716 <free+0xd4>
    b710:	fd 01       	movw	r30, r26
    b712:	dc 01       	movw	r26, r24
    b714:	f7 cf       	rjmp	.-18     	; 0xb704 <free+0xc2>
    b716:	8d 91       	ld	r24, X+
    b718:	9c 91       	ld	r25, X
    b71a:	11 97       	sbiw	r26, 0x01	; 1
    b71c:	9d 01       	movw	r18, r26
    b71e:	2e 5f       	subi	r18, 0xFE	; 254
    b720:	3f 4f       	sbci	r19, 0xFF	; 255
    b722:	82 0f       	add	r24, r18
    b724:	93 1f       	adc	r25, r19
    b726:	20 91 a5 0a 	lds	r18, 0x0AA5	; 0x800aa5 <__brkval>
    b72a:	30 91 a6 0a 	lds	r19, 0x0AA6	; 0x800aa6 <__brkval+0x1>
    b72e:	28 17       	cp	r18, r24
    b730:	39 07       	cpc	r19, r25
    b732:	69 f4       	brne	.+26     	; 0xb74e <free+0x10c>
    b734:	30 97       	sbiw	r30, 0x00	; 0
    b736:	29 f4       	brne	.+10     	; 0xb742 <free+0x100>
    b738:	10 92 a8 0a 	sts	0x0AA8, r1	; 0x800aa8 <__flp+0x1>
    b73c:	10 92 a7 0a 	sts	0x0AA7, r1	; 0x800aa7 <__flp>
    b740:	02 c0       	rjmp	.+4      	; 0xb746 <free+0x104>
    b742:	13 82       	std	Z+3, r1	; 0x03
    b744:	12 82       	std	Z+2, r1	; 0x02
    b746:	b0 93 a6 0a 	sts	0x0AA6, r27	; 0x800aa6 <__brkval+0x1>
    b74a:	a0 93 a5 0a 	sts	0x0AA5, r26	; 0x800aa5 <__brkval>
    b74e:	df 91       	pop	r29
    b750:	cf 91       	pop	r28
    b752:	08 95       	ret

0000b754 <__ftoa_engine>:
    b754:	28 30       	cpi	r18, 0x08	; 8
    b756:	08 f0       	brcs	.+2      	; 0xb75a <__ftoa_engine+0x6>
    b758:	27 e0       	ldi	r18, 0x07	; 7
    b75a:	33 27       	eor	r19, r19
    b75c:	da 01       	movw	r26, r20
    b75e:	99 0f       	add	r25, r25
    b760:	31 1d       	adc	r19, r1
    b762:	87 fd       	sbrc	r24, 7
    b764:	91 60       	ori	r25, 0x01	; 1
    b766:	00 96       	adiw	r24, 0x00	; 0
    b768:	61 05       	cpc	r22, r1
    b76a:	71 05       	cpc	r23, r1
    b76c:	39 f4       	brne	.+14     	; 0xb77c <__ftoa_engine+0x28>
    b76e:	32 60       	ori	r19, 0x02	; 2
    b770:	2e 5f       	subi	r18, 0xFE	; 254
    b772:	3d 93       	st	X+, r19
    b774:	30 e3       	ldi	r19, 0x30	; 48
    b776:	2a 95       	dec	r18
    b778:	e1 f7       	brne	.-8      	; 0xb772 <__ftoa_engine+0x1e>
    b77a:	08 95       	ret
    b77c:	9f 3f       	cpi	r25, 0xFF	; 255
    b77e:	30 f0       	brcs	.+12     	; 0xb78c <__ftoa_engine+0x38>
    b780:	80 38       	cpi	r24, 0x80	; 128
    b782:	71 05       	cpc	r23, r1
    b784:	61 05       	cpc	r22, r1
    b786:	09 f0       	breq	.+2      	; 0xb78a <__ftoa_engine+0x36>
    b788:	3c 5f       	subi	r19, 0xFC	; 252
    b78a:	3c 5f       	subi	r19, 0xFC	; 252
    b78c:	3d 93       	st	X+, r19
    b78e:	91 30       	cpi	r25, 0x01	; 1
    b790:	08 f0       	brcs	.+2      	; 0xb794 <__ftoa_engine+0x40>
    b792:	80 68       	ori	r24, 0x80	; 128
    b794:	91 1d       	adc	r25, r1
    b796:	df 93       	push	r29
    b798:	cf 93       	push	r28
    b79a:	1f 93       	push	r17
    b79c:	0f 93       	push	r16
    b79e:	ff 92       	push	r15
    b7a0:	ef 92       	push	r14
    b7a2:	19 2f       	mov	r17, r25
    b7a4:	98 7f       	andi	r25, 0xF8	; 248
    b7a6:	96 95       	lsr	r25
    b7a8:	e9 2f       	mov	r30, r25
    b7aa:	96 95       	lsr	r25
    b7ac:	96 95       	lsr	r25
    b7ae:	e9 0f       	add	r30, r25
    b7b0:	ff 27       	eor	r31, r31
    b7b2:	e0 5b       	subi	r30, 0xB0	; 176
    b7b4:	f6 4f       	sbci	r31, 0xF6	; 246
    b7b6:	99 27       	eor	r25, r25
    b7b8:	33 27       	eor	r19, r19
    b7ba:	ee 24       	eor	r14, r14
    b7bc:	ff 24       	eor	r15, r15
    b7be:	a7 01       	movw	r20, r14
    b7c0:	e7 01       	movw	r28, r14
    b7c2:	05 90       	lpm	r0, Z+
    b7c4:	08 94       	sec
    b7c6:	07 94       	ror	r0
    b7c8:	28 f4       	brcc	.+10     	; 0xb7d4 <__ftoa_engine+0x80>
    b7ca:	36 0f       	add	r19, r22
    b7cc:	e7 1e       	adc	r14, r23
    b7ce:	f8 1e       	adc	r15, r24
    b7d0:	49 1f       	adc	r20, r25
    b7d2:	51 1d       	adc	r21, r1
    b7d4:	66 0f       	add	r22, r22
    b7d6:	77 1f       	adc	r23, r23
    b7d8:	88 1f       	adc	r24, r24
    b7da:	99 1f       	adc	r25, r25
    b7dc:	06 94       	lsr	r0
    b7de:	a1 f7       	brne	.-24     	; 0xb7c8 <__ftoa_engine+0x74>
    b7e0:	05 90       	lpm	r0, Z+
    b7e2:	07 94       	ror	r0
    b7e4:	28 f4       	brcc	.+10     	; 0xb7f0 <__ftoa_engine+0x9c>
    b7e6:	e7 0e       	add	r14, r23
    b7e8:	f8 1e       	adc	r15, r24
    b7ea:	49 1f       	adc	r20, r25
    b7ec:	56 1f       	adc	r21, r22
    b7ee:	c1 1d       	adc	r28, r1
    b7f0:	77 0f       	add	r23, r23
    b7f2:	88 1f       	adc	r24, r24
    b7f4:	99 1f       	adc	r25, r25
    b7f6:	66 1f       	adc	r22, r22
    b7f8:	06 94       	lsr	r0
    b7fa:	a1 f7       	brne	.-24     	; 0xb7e4 <__ftoa_engine+0x90>
    b7fc:	05 90       	lpm	r0, Z+
    b7fe:	07 94       	ror	r0
    b800:	28 f4       	brcc	.+10     	; 0xb80c <__ftoa_engine+0xb8>
    b802:	f8 0e       	add	r15, r24
    b804:	49 1f       	adc	r20, r25
    b806:	56 1f       	adc	r21, r22
    b808:	c7 1f       	adc	r28, r23
    b80a:	d1 1d       	adc	r29, r1
    b80c:	88 0f       	add	r24, r24
    b80e:	99 1f       	adc	r25, r25
    b810:	66 1f       	adc	r22, r22
    b812:	77 1f       	adc	r23, r23
    b814:	06 94       	lsr	r0
    b816:	a1 f7       	brne	.-24     	; 0xb800 <__ftoa_engine+0xac>
    b818:	05 90       	lpm	r0, Z+
    b81a:	07 94       	ror	r0
    b81c:	20 f4       	brcc	.+8      	; 0xb826 <__ftoa_engine+0xd2>
    b81e:	49 0f       	add	r20, r25
    b820:	56 1f       	adc	r21, r22
    b822:	c7 1f       	adc	r28, r23
    b824:	d8 1f       	adc	r29, r24
    b826:	99 0f       	add	r25, r25
    b828:	66 1f       	adc	r22, r22
    b82a:	77 1f       	adc	r23, r23
    b82c:	88 1f       	adc	r24, r24
    b82e:	06 94       	lsr	r0
    b830:	a9 f7       	brne	.-22     	; 0xb81c <__ftoa_engine+0xc8>
    b832:	84 91       	lpm	r24, Z
    b834:	10 95       	com	r17
    b836:	17 70       	andi	r17, 0x07	; 7
    b838:	41 f0       	breq	.+16     	; 0xb84a <__ftoa_engine+0xf6>
    b83a:	d6 95       	lsr	r29
    b83c:	c7 95       	ror	r28
    b83e:	57 95       	ror	r21
    b840:	47 95       	ror	r20
    b842:	f7 94       	ror	r15
    b844:	e7 94       	ror	r14
    b846:	1a 95       	dec	r17
    b848:	c1 f7       	brne	.-16     	; 0xb83a <__ftoa_engine+0xe6>
    b84a:	e6 ef       	ldi	r30, 0xF6	; 246
    b84c:	f8 e0       	ldi	r31, 0x08	; 8
    b84e:	68 94       	set
    b850:	15 90       	lpm	r1, Z+
    b852:	15 91       	lpm	r17, Z+
    b854:	35 91       	lpm	r19, Z+
    b856:	65 91       	lpm	r22, Z+
    b858:	95 91       	lpm	r25, Z+
    b85a:	05 90       	lpm	r0, Z+
    b85c:	7f e2       	ldi	r23, 0x2F	; 47
    b85e:	73 95       	inc	r23
    b860:	e1 18       	sub	r14, r1
    b862:	f1 0a       	sbc	r15, r17
    b864:	43 0b       	sbc	r20, r19
    b866:	56 0b       	sbc	r21, r22
    b868:	c9 0b       	sbc	r28, r25
    b86a:	d0 09       	sbc	r29, r0
    b86c:	c0 f7       	brcc	.-16     	; 0xb85e <__ftoa_engine+0x10a>
    b86e:	e1 0c       	add	r14, r1
    b870:	f1 1e       	adc	r15, r17
    b872:	43 1f       	adc	r20, r19
    b874:	56 1f       	adc	r21, r22
    b876:	c9 1f       	adc	r28, r25
    b878:	d0 1d       	adc	r29, r0
    b87a:	7e f4       	brtc	.+30     	; 0xb89a <__ftoa_engine+0x146>
    b87c:	70 33       	cpi	r23, 0x30	; 48
    b87e:	11 f4       	brne	.+4      	; 0xb884 <__ftoa_engine+0x130>
    b880:	8a 95       	dec	r24
    b882:	e6 cf       	rjmp	.-52     	; 0xb850 <__ftoa_engine+0xfc>
    b884:	e8 94       	clt
    b886:	01 50       	subi	r16, 0x01	; 1
    b888:	30 f0       	brcs	.+12     	; 0xb896 <__ftoa_engine+0x142>
    b88a:	08 0f       	add	r16, r24
    b88c:	0a f4       	brpl	.+2      	; 0xb890 <__ftoa_engine+0x13c>
    b88e:	00 27       	eor	r16, r16
    b890:	02 17       	cp	r16, r18
    b892:	08 f4       	brcc	.+2      	; 0xb896 <__ftoa_engine+0x142>
    b894:	20 2f       	mov	r18, r16
    b896:	23 95       	inc	r18
    b898:	02 2f       	mov	r16, r18
    b89a:	7a 33       	cpi	r23, 0x3A	; 58
    b89c:	28 f0       	brcs	.+10     	; 0xb8a8 <__ftoa_engine+0x154>
    b89e:	79 e3       	ldi	r23, 0x39	; 57
    b8a0:	7d 93       	st	X+, r23
    b8a2:	2a 95       	dec	r18
    b8a4:	e9 f7       	brne	.-6      	; 0xb8a0 <__ftoa_engine+0x14c>
    b8a6:	10 c0       	rjmp	.+32     	; 0xb8c8 <__ftoa_engine+0x174>
    b8a8:	7d 93       	st	X+, r23
    b8aa:	2a 95       	dec	r18
    b8ac:	89 f6       	brne	.-94     	; 0xb850 <__ftoa_engine+0xfc>
    b8ae:	06 94       	lsr	r0
    b8b0:	97 95       	ror	r25
    b8b2:	67 95       	ror	r22
    b8b4:	37 95       	ror	r19
    b8b6:	17 95       	ror	r17
    b8b8:	17 94       	ror	r1
    b8ba:	e1 18       	sub	r14, r1
    b8bc:	f1 0a       	sbc	r15, r17
    b8be:	43 0b       	sbc	r20, r19
    b8c0:	56 0b       	sbc	r21, r22
    b8c2:	c9 0b       	sbc	r28, r25
    b8c4:	d0 09       	sbc	r29, r0
    b8c6:	98 f0       	brcs	.+38     	; 0xb8ee <__ftoa_engine+0x19a>
    b8c8:	23 95       	inc	r18
    b8ca:	7e 91       	ld	r23, -X
    b8cc:	73 95       	inc	r23
    b8ce:	7a 33       	cpi	r23, 0x3A	; 58
    b8d0:	08 f0       	brcs	.+2      	; 0xb8d4 <__ftoa_engine+0x180>
    b8d2:	70 e3       	ldi	r23, 0x30	; 48
    b8d4:	7c 93       	st	X, r23
    b8d6:	20 13       	cpse	r18, r16
    b8d8:	b8 f7       	brcc	.-18     	; 0xb8c8 <__ftoa_engine+0x174>
    b8da:	7e 91       	ld	r23, -X
    b8dc:	70 61       	ori	r23, 0x10	; 16
    b8de:	7d 93       	st	X+, r23
    b8e0:	30 f0       	brcs	.+12     	; 0xb8ee <__ftoa_engine+0x19a>
    b8e2:	83 95       	inc	r24
    b8e4:	71 e3       	ldi	r23, 0x31	; 49
    b8e6:	7d 93       	st	X+, r23
    b8e8:	70 e3       	ldi	r23, 0x30	; 48
    b8ea:	2a 95       	dec	r18
    b8ec:	e1 f7       	brne	.-8      	; 0xb8e6 <__ftoa_engine+0x192>
    b8ee:	11 24       	eor	r1, r1
    b8f0:	ef 90       	pop	r14
    b8f2:	ff 90       	pop	r15
    b8f4:	0f 91       	pop	r16
    b8f6:	1f 91       	pop	r17
    b8f8:	cf 91       	pop	r28
    b8fa:	df 91       	pop	r29
    b8fc:	99 27       	eor	r25, r25
    b8fe:	87 fd       	sbrc	r24, 7
    b900:	90 95       	com	r25
    b902:	08 95       	ret

0000b904 <strnlen_P>:
    b904:	fc 01       	movw	r30, r24
    b906:	05 90       	lpm	r0, Z+
    b908:	61 50       	subi	r22, 0x01	; 1
    b90a:	70 40       	sbci	r23, 0x00	; 0
    b90c:	01 10       	cpse	r0, r1
    b90e:	d8 f7       	brcc	.-10     	; 0xb906 <strnlen_P+0x2>
    b910:	80 95       	com	r24
    b912:	90 95       	com	r25
    b914:	8e 0f       	add	r24, r30
    b916:	9f 1f       	adc	r25, r31
    b918:	08 95       	ret

0000b91a <memcpy>:
    b91a:	fb 01       	movw	r30, r22
    b91c:	dc 01       	movw	r26, r24
    b91e:	02 c0       	rjmp	.+4      	; 0xb924 <memcpy+0xa>
    b920:	01 90       	ld	r0, Z+
    b922:	0d 92       	st	X+, r0
    b924:	41 50       	subi	r20, 0x01	; 1
    b926:	50 40       	sbci	r21, 0x00	; 0
    b928:	d8 f7       	brcc	.-10     	; 0xb920 <memcpy+0x6>
    b92a:	08 95       	ret

0000b92c <memset>:
    b92c:	dc 01       	movw	r26, r24
    b92e:	01 c0       	rjmp	.+2      	; 0xb932 <memset+0x6>
    b930:	6d 93       	st	X+, r22
    b932:	41 50       	subi	r20, 0x01	; 1
    b934:	50 40       	sbci	r21, 0x00	; 0
    b936:	e0 f7       	brcc	.-8      	; 0xb930 <memset+0x4>
    b938:	08 95       	ret

0000b93a <strnlen>:
    b93a:	fc 01       	movw	r30, r24
    b93c:	61 50       	subi	r22, 0x01	; 1
    b93e:	70 40       	sbci	r23, 0x00	; 0
    b940:	01 90       	ld	r0, Z+
    b942:	01 10       	cpse	r0, r1
    b944:	d8 f7       	brcc	.-10     	; 0xb93c <strnlen+0x2>
    b946:	80 95       	com	r24
    b948:	90 95       	com	r25
    b94a:	8e 0f       	add	r24, r30
    b94c:	9f 1f       	adc	r25, r31
    b94e:	08 95       	ret

0000b950 <fputc>:
    b950:	0f 93       	push	r16
    b952:	1f 93       	push	r17
    b954:	cf 93       	push	r28
    b956:	df 93       	push	r29
    b958:	fb 01       	movw	r30, r22
    b95a:	23 81       	ldd	r18, Z+3	; 0x03
    b95c:	21 fd       	sbrc	r18, 1
    b95e:	03 c0       	rjmp	.+6      	; 0xb966 <fputc+0x16>
    b960:	8f ef       	ldi	r24, 0xFF	; 255
    b962:	9f ef       	ldi	r25, 0xFF	; 255
    b964:	2c c0       	rjmp	.+88     	; 0xb9be <fputc+0x6e>
    b966:	22 ff       	sbrs	r18, 2
    b968:	16 c0       	rjmp	.+44     	; 0xb996 <fputc+0x46>
    b96a:	46 81       	ldd	r20, Z+6	; 0x06
    b96c:	57 81       	ldd	r21, Z+7	; 0x07
    b96e:	24 81       	ldd	r18, Z+4	; 0x04
    b970:	35 81       	ldd	r19, Z+5	; 0x05
    b972:	42 17       	cp	r20, r18
    b974:	53 07       	cpc	r21, r19
    b976:	44 f4       	brge	.+16     	; 0xb988 <fputc+0x38>
    b978:	a0 81       	ld	r26, Z
    b97a:	b1 81       	ldd	r27, Z+1	; 0x01
    b97c:	9d 01       	movw	r18, r26
    b97e:	2f 5f       	subi	r18, 0xFF	; 255
    b980:	3f 4f       	sbci	r19, 0xFF	; 255
    b982:	31 83       	std	Z+1, r19	; 0x01
    b984:	20 83       	st	Z, r18
    b986:	8c 93       	st	X, r24
    b988:	26 81       	ldd	r18, Z+6	; 0x06
    b98a:	37 81       	ldd	r19, Z+7	; 0x07
    b98c:	2f 5f       	subi	r18, 0xFF	; 255
    b98e:	3f 4f       	sbci	r19, 0xFF	; 255
    b990:	37 83       	std	Z+7, r19	; 0x07
    b992:	26 83       	std	Z+6, r18	; 0x06
    b994:	14 c0       	rjmp	.+40     	; 0xb9be <fputc+0x6e>
    b996:	8b 01       	movw	r16, r22
    b998:	ec 01       	movw	r28, r24
    b99a:	fb 01       	movw	r30, r22
    b99c:	00 84       	ldd	r0, Z+8	; 0x08
    b99e:	f1 85       	ldd	r31, Z+9	; 0x09
    b9a0:	e0 2d       	mov	r30, r0
    b9a2:	19 95       	eicall
    b9a4:	89 2b       	or	r24, r25
    b9a6:	e1 f6       	brne	.-72     	; 0xb960 <fputc+0x10>
    b9a8:	d8 01       	movw	r26, r16
    b9aa:	16 96       	adiw	r26, 0x06	; 6
    b9ac:	8d 91       	ld	r24, X+
    b9ae:	9c 91       	ld	r25, X
    b9b0:	17 97       	sbiw	r26, 0x07	; 7
    b9b2:	01 96       	adiw	r24, 0x01	; 1
    b9b4:	17 96       	adiw	r26, 0x07	; 7
    b9b6:	9c 93       	st	X, r25
    b9b8:	8e 93       	st	-X, r24
    b9ba:	16 97       	sbiw	r26, 0x06	; 6
    b9bc:	ce 01       	movw	r24, r28
    b9be:	df 91       	pop	r29
    b9c0:	cf 91       	pop	r28
    b9c2:	1f 91       	pop	r17
    b9c4:	0f 91       	pop	r16
    b9c6:	08 95       	ret

0000b9c8 <vsnprintf>:
    b9c8:	0f 93       	push	r16
    b9ca:	1f 93       	push	r17
    b9cc:	cf 93       	push	r28
    b9ce:	df 93       	push	r29
    b9d0:	cd b7       	in	r28, 0x3d	; 61
    b9d2:	de b7       	in	r29, 0x3e	; 62
    b9d4:	2e 97       	sbiw	r28, 0x0e	; 14
    b9d6:	0f b6       	in	r0, 0x3f	; 63
    b9d8:	f8 94       	cli
    b9da:	de bf       	out	0x3e, r29	; 62
    b9dc:	0f be       	out	0x3f, r0	; 63
    b9de:	cd bf       	out	0x3d, r28	; 61
    b9e0:	8c 01       	movw	r16, r24
    b9e2:	fa 01       	movw	r30, r20
    b9e4:	86 e0       	ldi	r24, 0x06	; 6
    b9e6:	8c 83       	std	Y+4, r24	; 0x04
    b9e8:	1a 83       	std	Y+2, r17	; 0x02
    b9ea:	09 83       	std	Y+1, r16	; 0x01
    b9ec:	77 ff       	sbrs	r23, 7
    b9ee:	02 c0       	rjmp	.+4      	; 0xb9f4 <vsnprintf+0x2c>
    b9f0:	60 e0       	ldi	r22, 0x00	; 0
    b9f2:	70 e8       	ldi	r23, 0x80	; 128
    b9f4:	cb 01       	movw	r24, r22
    b9f6:	01 97       	sbiw	r24, 0x01	; 1
    b9f8:	9e 83       	std	Y+6, r25	; 0x06
    b9fa:	8d 83       	std	Y+5, r24	; 0x05
    b9fc:	a9 01       	movw	r20, r18
    b9fe:	bf 01       	movw	r22, r30
    ba00:	ce 01       	movw	r24, r28
    ba02:	01 96       	adiw	r24, 0x01	; 1
    ba04:	c4 d9       	rcall	.-3192   	; 0xad8e <vfprintf>
    ba06:	4d 81       	ldd	r20, Y+5	; 0x05
    ba08:	5e 81       	ldd	r21, Y+6	; 0x06
    ba0a:	57 fd       	sbrc	r21, 7
    ba0c:	0a c0       	rjmp	.+20     	; 0xba22 <vsnprintf+0x5a>
    ba0e:	2f 81       	ldd	r18, Y+7	; 0x07
    ba10:	38 85       	ldd	r19, Y+8	; 0x08
    ba12:	42 17       	cp	r20, r18
    ba14:	53 07       	cpc	r21, r19
    ba16:	0c f4       	brge	.+2      	; 0xba1a <vsnprintf+0x52>
    ba18:	9a 01       	movw	r18, r20
    ba1a:	f8 01       	movw	r30, r16
    ba1c:	e2 0f       	add	r30, r18
    ba1e:	f3 1f       	adc	r31, r19
    ba20:	10 82       	st	Z, r1
    ba22:	2e 96       	adiw	r28, 0x0e	; 14
    ba24:	0f b6       	in	r0, 0x3f	; 63
    ba26:	f8 94       	cli
    ba28:	de bf       	out	0x3e, r29	; 62
    ba2a:	0f be       	out	0x3f, r0	; 63
    ba2c:	cd bf       	out	0x3d, r28	; 61
    ba2e:	df 91       	pop	r29
    ba30:	cf 91       	pop	r28
    ba32:	1f 91       	pop	r17
    ba34:	0f 91       	pop	r16
    ba36:	08 95       	ret

0000ba38 <__ultoa_invert>:
    ba38:	fa 01       	movw	r30, r20
    ba3a:	aa 27       	eor	r26, r26
    ba3c:	28 30       	cpi	r18, 0x08	; 8
    ba3e:	51 f1       	breq	.+84     	; 0xba94 <__ultoa_invert+0x5c>
    ba40:	20 31       	cpi	r18, 0x10	; 16
    ba42:	81 f1       	breq	.+96     	; 0xbaa4 <__ultoa_invert+0x6c>
    ba44:	e8 94       	clt
    ba46:	6f 93       	push	r22
    ba48:	6e 7f       	andi	r22, 0xFE	; 254
    ba4a:	6e 5f       	subi	r22, 0xFE	; 254
    ba4c:	7f 4f       	sbci	r23, 0xFF	; 255
    ba4e:	8f 4f       	sbci	r24, 0xFF	; 255
    ba50:	9f 4f       	sbci	r25, 0xFF	; 255
    ba52:	af 4f       	sbci	r26, 0xFF	; 255
    ba54:	b1 e0       	ldi	r27, 0x01	; 1
    ba56:	3e d0       	rcall	.+124    	; 0xbad4 <__ultoa_invert+0x9c>
    ba58:	b4 e0       	ldi	r27, 0x04	; 4
    ba5a:	3c d0       	rcall	.+120    	; 0xbad4 <__ultoa_invert+0x9c>
    ba5c:	67 0f       	add	r22, r23
    ba5e:	78 1f       	adc	r23, r24
    ba60:	89 1f       	adc	r24, r25
    ba62:	9a 1f       	adc	r25, r26
    ba64:	a1 1d       	adc	r26, r1
    ba66:	68 0f       	add	r22, r24
    ba68:	79 1f       	adc	r23, r25
    ba6a:	8a 1f       	adc	r24, r26
    ba6c:	91 1d       	adc	r25, r1
    ba6e:	a1 1d       	adc	r26, r1
    ba70:	6a 0f       	add	r22, r26
    ba72:	71 1d       	adc	r23, r1
    ba74:	81 1d       	adc	r24, r1
    ba76:	91 1d       	adc	r25, r1
    ba78:	a1 1d       	adc	r26, r1
    ba7a:	20 d0       	rcall	.+64     	; 0xbabc <__ultoa_invert+0x84>
    ba7c:	09 f4       	brne	.+2      	; 0xba80 <__ultoa_invert+0x48>
    ba7e:	68 94       	set
    ba80:	3f 91       	pop	r19
    ba82:	2a e0       	ldi	r18, 0x0A	; 10
    ba84:	26 9f       	mul	r18, r22
    ba86:	11 24       	eor	r1, r1
    ba88:	30 19       	sub	r19, r0
    ba8a:	30 5d       	subi	r19, 0xD0	; 208
    ba8c:	31 93       	st	Z+, r19
    ba8e:	de f6       	brtc	.-74     	; 0xba46 <__ultoa_invert+0xe>
    ba90:	cf 01       	movw	r24, r30
    ba92:	08 95       	ret
    ba94:	46 2f       	mov	r20, r22
    ba96:	47 70       	andi	r20, 0x07	; 7
    ba98:	40 5d       	subi	r20, 0xD0	; 208
    ba9a:	41 93       	st	Z+, r20
    ba9c:	b3 e0       	ldi	r27, 0x03	; 3
    ba9e:	0f d0       	rcall	.+30     	; 0xbabe <__ultoa_invert+0x86>
    baa0:	c9 f7       	brne	.-14     	; 0xba94 <__ultoa_invert+0x5c>
    baa2:	f6 cf       	rjmp	.-20     	; 0xba90 <__ultoa_invert+0x58>
    baa4:	46 2f       	mov	r20, r22
    baa6:	4f 70       	andi	r20, 0x0F	; 15
    baa8:	40 5d       	subi	r20, 0xD0	; 208
    baaa:	4a 33       	cpi	r20, 0x3A	; 58
    baac:	18 f0       	brcs	.+6      	; 0xbab4 <__ultoa_invert+0x7c>
    baae:	49 5d       	subi	r20, 0xD9	; 217
    bab0:	31 fd       	sbrc	r19, 1
    bab2:	40 52       	subi	r20, 0x20	; 32
    bab4:	41 93       	st	Z+, r20
    bab6:	02 d0       	rcall	.+4      	; 0xbabc <__ultoa_invert+0x84>
    bab8:	a9 f7       	brne	.-22     	; 0xbaa4 <__ultoa_invert+0x6c>
    baba:	ea cf       	rjmp	.-44     	; 0xba90 <__ultoa_invert+0x58>
    babc:	b4 e0       	ldi	r27, 0x04	; 4
    babe:	a6 95       	lsr	r26
    bac0:	97 95       	ror	r25
    bac2:	87 95       	ror	r24
    bac4:	77 95       	ror	r23
    bac6:	67 95       	ror	r22
    bac8:	ba 95       	dec	r27
    baca:	c9 f7       	brne	.-14     	; 0xbabe <__ultoa_invert+0x86>
    bacc:	00 97       	sbiw	r24, 0x00	; 0
    bace:	61 05       	cpc	r22, r1
    bad0:	71 05       	cpc	r23, r1
    bad2:	08 95       	ret
    bad4:	9b 01       	movw	r18, r22
    bad6:	ac 01       	movw	r20, r24
    bad8:	0a 2e       	mov	r0, r26
    bada:	06 94       	lsr	r0
    badc:	57 95       	ror	r21
    bade:	47 95       	ror	r20
    bae0:	37 95       	ror	r19
    bae2:	27 95       	ror	r18
    bae4:	ba 95       	dec	r27
    bae6:	c9 f7       	brne	.-14     	; 0xbada <__ultoa_invert+0xa2>
    bae8:	62 0f       	add	r22, r18
    baea:	73 1f       	adc	r23, r19
    baec:	84 1f       	adc	r24, r20
    baee:	95 1f       	adc	r25, r21
    baf0:	a0 1d       	adc	r26, r0
    baf2:	08 95       	ret

0000baf4 <eeprom_read_block>:
    baf4:	dc 01       	movw	r26, r24
    baf6:	cb 01       	movw	r24, r22

0000baf8 <eeprom_read_blraw>:
    baf8:	fc 01       	movw	r30, r24
    bafa:	f9 99       	sbic	0x1f, 1	; 31
    bafc:	fe cf       	rjmp	.-4      	; 0xbafa <eeprom_read_blraw+0x2>
    bafe:	06 c0       	rjmp	.+12     	; 0xbb0c <eeprom_read_blraw+0x14>
    bb00:	f2 bd       	out	0x22, r31	; 34
    bb02:	e1 bd       	out	0x21, r30	; 33
    bb04:	f8 9a       	sbi	0x1f, 0	; 31
    bb06:	31 96       	adiw	r30, 0x01	; 1
    bb08:	00 b4       	in	r0, 0x20	; 32
    bb0a:	0d 92       	st	X+, r0
    bb0c:	41 50       	subi	r20, 0x01	; 1
    bb0e:	50 40       	sbci	r21, 0x00	; 0
    bb10:	b8 f7       	brcc	.-18     	; 0xbb00 <eeprom_read_blraw+0x8>
    bb12:	08 95       	ret

0000bb14 <eeprom_update_block>:
    bb14:	dc 01       	movw	r26, r24
    bb16:	a4 0f       	add	r26, r20
    bb18:	b5 1f       	adc	r27, r21
    bb1a:	41 50       	subi	r20, 0x01	; 1
    bb1c:	50 40       	sbci	r21, 0x00	; 0
    bb1e:	40 f0       	brcs	.+16     	; 0xbb30 <eeprom_update_block+0x1c>
    bb20:	cb 01       	movw	r24, r22
    bb22:	84 0f       	add	r24, r20
    bb24:	95 1f       	adc	r25, r21
    bb26:	2e 91       	ld	r18, -X
    bb28:	05 d0       	rcall	.+10     	; 0xbb34 <eeprom_update_r18>
    bb2a:	41 50       	subi	r20, 0x01	; 1
    bb2c:	50 40       	sbci	r21, 0x00	; 0
    bb2e:	d8 f7       	brcc	.-10     	; 0xbb26 <eeprom_update_block+0x12>
    bb30:	08 95       	ret

0000bb32 <eeprom_update_byte>:
    bb32:	26 2f       	mov	r18, r22

0000bb34 <eeprom_update_r18>:
    bb34:	f9 99       	sbic	0x1f, 1	; 31
    bb36:	fe cf       	rjmp	.-4      	; 0xbb34 <eeprom_update_r18>
    bb38:	92 bd       	out	0x22, r25	; 34
    bb3a:	81 bd       	out	0x21, r24	; 33
    bb3c:	f8 9a       	sbi	0x1f, 0	; 31
    bb3e:	01 97       	sbiw	r24, 0x01	; 1
    bb40:	00 b4       	in	r0, 0x20	; 32
    bb42:	02 16       	cp	r0, r18
    bb44:	39 f0       	breq	.+14     	; 0xbb54 <eeprom_update_r18+0x20>
    bb46:	1f ba       	out	0x1f, r1	; 31
    bb48:	20 bd       	out	0x20, r18	; 32
    bb4a:	0f b6       	in	r0, 0x3f	; 63
    bb4c:	f8 94       	cli
    bb4e:	fa 9a       	sbi	0x1f, 2	; 31
    bb50:	f9 9a       	sbi	0x1f, 1	; 31
    bb52:	0f be       	out	0x3f, r0	; 63
    bb54:	08 95       	ret

0000bb56 <eeprom_write_block>:
    bb56:	dc 01       	movw	r26, r24
    bb58:	cb 01       	movw	r24, r22
    bb5a:	02 c0       	rjmp	.+4      	; 0xbb60 <eeprom_write_block+0xa>
    bb5c:	2d 91       	ld	r18, X+
    bb5e:	05 d0       	rcall	.+10     	; 0xbb6a <eeprom_write_r18>
    bb60:	41 50       	subi	r20, 0x01	; 1
    bb62:	50 40       	sbci	r21, 0x00	; 0
    bb64:	d8 f7       	brcc	.-10     	; 0xbb5c <eeprom_write_block+0x6>
    bb66:	08 95       	ret

0000bb68 <eeprom_write_byte>:
    bb68:	26 2f       	mov	r18, r22

0000bb6a <eeprom_write_r18>:
    bb6a:	f9 99       	sbic	0x1f, 1	; 31
    bb6c:	fe cf       	rjmp	.-4      	; 0xbb6a <eeprom_write_r18>
    bb6e:	1f ba       	out	0x1f, r1	; 31
    bb70:	92 bd       	out	0x22, r25	; 34
    bb72:	81 bd       	out	0x21, r24	; 33
    bb74:	20 bd       	out	0x20, r18	; 32
    bb76:	0f b6       	in	r0, 0x3f	; 63
    bb78:	f8 94       	cli
    bb7a:	fa 9a       	sbi	0x1f, 2	; 31
    bb7c:	f9 9a       	sbi	0x1f, 1	; 31
    bb7e:	0f be       	out	0x3f, r0	; 63
    bb80:	01 96       	adiw	r24, 0x01	; 1
    bb82:	08 95       	ret

0000bb84 <_exit>:
    bb84:	f8 94       	cli

0000bb86 <__stop_program>:
    bb86:	ff cf       	rjmp	.-2      	; 0xbb86 <__stop_program>
