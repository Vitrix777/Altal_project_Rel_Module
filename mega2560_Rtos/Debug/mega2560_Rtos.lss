
mega2560_Rtos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000474  00800200  0000b96a  0000b9fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000b96a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000457  00800674  00800674  0000be72  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000be72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000bed0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000aa8  00000000  00000000  0000bf10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011b6f  00000000  00000000  0000c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e8a  00000000  00000000  0001e527  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008e21  00000000  00000000  000213b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002940  00000000  00000000  0002a1d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003a53  00000000  00000000  0002cb14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f5fe  00000000  00000000  00030567  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ca0  00000000  00000000  0003fb65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6c c5       	rjmp	.+2776   	; 0xada <__ctors_end>
       2:	00 00       	nop
       4:	8b c5       	rjmp	.+2838   	; 0xb1c <__bad_interrupt>
       6:	00 00       	nop
       8:	89 c5       	rjmp	.+2834   	; 0xb1c <__bad_interrupt>
       a:	00 00       	nop
       c:	87 c5       	rjmp	.+2830   	; 0xb1c <__bad_interrupt>
       e:	00 00       	nop
      10:	85 c5       	rjmp	.+2826   	; 0xb1c <__bad_interrupt>
      12:	00 00       	nop
      14:	83 c5       	rjmp	.+2822   	; 0xb1c <__bad_interrupt>
      16:	00 00       	nop
      18:	81 c5       	rjmp	.+2818   	; 0xb1c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7f c5       	rjmp	.+2814   	; 0xb1c <__bad_interrupt>
      1e:	00 00       	nop
      20:	7d c5       	rjmp	.+2810   	; 0xb1c <__bad_interrupt>
      22:	00 00       	nop
      24:	7b c5       	rjmp	.+2806   	; 0xb1c <__bad_interrupt>
      26:	00 00       	nop
      28:	79 c5       	rjmp	.+2802   	; 0xb1c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	77 c5       	rjmp	.+2798   	; 0xb1c <__bad_interrupt>
      2e:	00 00       	nop
      30:	75 c5       	rjmp	.+2794   	; 0xb1c <__bad_interrupt>
      32:	00 00       	nop
      34:	73 c5       	rjmp	.+2790   	; 0xb1c <__bad_interrupt>
      36:	00 00       	nop
      38:	71 c5       	rjmp	.+2786   	; 0xb1c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6f c5       	rjmp	.+2782   	; 0xb1c <__bad_interrupt>
      3e:	00 00       	nop
      40:	6d c5       	rjmp	.+2778   	; 0xb1c <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 61 21 	jmp	0x42c2	; 0x42c2 <__vector_17>
      48:	69 c5       	rjmp	.+2770   	; 0xb1c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	67 c5       	rjmp	.+2766   	; 0xb1c <__bad_interrupt>
      4e:	00 00       	nop
      50:	65 c5       	rjmp	.+2762   	; 0xb1c <__bad_interrupt>
      52:	00 00       	nop
      54:	63 c5       	rjmp	.+2758   	; 0xb1c <__bad_interrupt>
      56:	00 00       	nop
      58:	61 c5       	rjmp	.+2754   	; 0xb1c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5f c5       	rjmp	.+2750   	; 0xb1c <__bad_interrupt>
      5e:	00 00       	nop
      60:	5d c5       	rjmp	.+2746   	; 0xb1c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 8f 10 	jmp	0x211e	; 0x211e <__vector_25>
      68:	0c 94 17 11 	jmp	0x222e	; 0x222e <__vector_26>
      6c:	57 c5       	rjmp	.+2734   	; 0xb1c <__bad_interrupt>
      6e:	00 00       	nop
      70:	55 c5       	rjmp	.+2730   	; 0xb1c <__bad_interrupt>
      72:	00 00       	nop
      74:	53 c5       	rjmp	.+2726   	; 0xb1c <__bad_interrupt>
      76:	00 00       	nop
      78:	51 c5       	rjmp	.+2722   	; 0xb1c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4f c5       	rjmp	.+2718   	; 0xb1c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c7       	rjmp	.+3754   	; 0xf2c <__vector_32>
      82:	00 00       	nop
      84:	4b c5       	rjmp	.+2710   	; 0xb1c <__bad_interrupt>
      86:	00 00       	nop
      88:	49 c5       	rjmp	.+2706   	; 0xb1c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	47 c5       	rjmp	.+2702   	; 0xb1c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__vector_36>
      94:	0c 94 bf 11 	jmp	0x237e	; 0x237e <__vector_37>
      98:	41 c5       	rjmp	.+2690   	; 0xb1c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	3f c5       	rjmp	.+2686   	; 0xb1c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3d c5       	rjmp	.+2682   	; 0xb1c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3b c5       	rjmp	.+2678   	; 0xb1c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	39 c5       	rjmp	.+2674   	; 0xb1c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	37 c5       	rjmp	.+2670   	; 0xb1c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	35 c5       	rjmp	.+2666   	; 0xb1c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	33 c5       	rjmp	.+2662   	; 0xb1c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	31 c5       	rjmp	.+2658   	; 0xb1c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2f c5       	rjmp	.+2654   	; 0xb1c <__bad_interrupt>
      be:	00 00       	nop
      c0:	2d c5       	rjmp	.+2650   	; 0xb1c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2b c5       	rjmp	.+2646   	; 0xb1c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	29 c5       	rjmp	.+2642   	; 0xb1c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__vector_51>
      d0:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__vector_52>
      d4:	23 c5       	rjmp	.+2630   	; 0xb1c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <__vector_54>
      dc:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__vector_55>
      e0:	1d c5       	rjmp	.+2618   	; 0xb1c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0c 0d       	add	r16, r12
      e6:	0c 0d       	add	r16, r12
      e8:	11 0d       	add	r17, r1
      ea:	11 0d       	add	r17, r1
      ec:	16 0d       	add	r17, r6
      ee:	16 0d       	add	r17, r6
      f0:	1b 0d       	add	r17, r11
      f2:	1b 0d       	add	r17, r11
      f4:	7d 0d       	add	r23, r13
      f6:	7d 0d       	add	r23, r13
      f8:	78 0d       	add	r23, r8
      fa:	78 0d       	add	r23, r8
      fc:	73 0d       	add	r23, r3
      fe:	73 0d       	add	r23, r3
     100:	6e 0d       	add	r22, r14
     102:	6e 0d       	add	r22, r14
     104:	31 0e       	add	r3, r17
     106:	31 0e       	add	r3, r17
     108:	38 0e       	add	r3, r24
     10a:	38 0e       	add	r3, r24
     10c:	3f 0e       	add	r3, r31
     10e:	3f 0e       	add	r3, r31
     110:	46 0e       	add	r4, r22
     112:	46 0e       	add	r4, r22
     114:	bd 0e       	add	r11, r29
     116:	ee 0e       	add	r14, r30
     118:	28 0f       	add	r18, r24
     11a:	59 0f       	add	r21, r25
     11c:	93 0f       	add	r25, r19
     11e:	c4 0f       	add	r28, r20
     120:	02 10       	cpse	r0, r2
     122:	33 10       	cpse	r3, r3
     124:	39 1d       	adc	r19, r9
     126:	39 1d       	adc	r19, r9
     128:	39 1d       	adc	r19, r9
     12a:	84 1d       	adc	r24, r4
     12c:	6d 1d       	adc	r22, r13
     12e:	81 1d       	adc	r24, r1
     130:	39 1d       	adc	r19, r9
     132:	39 1d       	adc	r19, r9
     134:	84 1d       	adc	r24, r4
     136:	6d 1d       	adc	r22, r13
     138:	45 25       	eor	r20, r5
     13a:	59 24       	eor	r5, r9
     13c:	59 24       	eor	r5, r9
     13e:	62 26       	eor	r6, r18
     140:	62 26       	eor	r6, r18
     142:	62 26       	eor	r6, r18
     144:	62 26       	eor	r6, r18
     146:	62 26       	eor	r6, r18
     148:	62 26       	eor	r6, r18
     14a:	62 26       	eor	r6, r18
     14c:	49 25       	eor	r20, r9
     14e:	5e 24       	eor	r5, r14
     150:	5e 24       	eor	r5, r14
     152:	62 26       	eor	r6, r18
     154:	62 26       	eor	r6, r18
     156:	62 26       	eor	r6, r18
     158:	62 26       	eor	r6, r18
     15a:	62 26       	eor	r6, r18
     15c:	62 26       	eor	r6, r18
     15e:	62 26       	eor	r6, r18
     160:	4d 25       	eor	r20, r13
     162:	63 24       	eor	r6, r3
     164:	63 24       	eor	r6, r3
     166:	62 26       	eor	r6, r18
     168:	62 26       	eor	r6, r18
     16a:	62 26       	eor	r6, r18
     16c:	62 26       	eor	r6, r18
     16e:	62 26       	eor	r6, r18
     170:	62 26       	eor	r6, r18
     172:	62 26       	eor	r6, r18
     174:	51 25       	eor	r21, r1
     176:	68 24       	eor	r6, r8
     178:	68 24       	eor	r6, r8
     17a:	62 26       	eor	r6, r18
     17c:	62 26       	eor	r6, r18
     17e:	62 26       	eor	r6, r18
     180:	62 26       	eor	r6, r18
     182:	62 26       	eor	r6, r18
     184:	62 26       	eor	r6, r18
     186:	62 26       	eor	r6, r18
     188:	55 25       	eor	r21, r5
     18a:	6d 24       	eor	r6, r13
     18c:	6d 24       	eor	r6, r13
     18e:	62 26       	eor	r6, r18
     190:	62 26       	eor	r6, r18
     192:	62 26       	eor	r6, r18
     194:	62 26       	eor	r6, r18
     196:	62 26       	eor	r6, r18
     198:	62 26       	eor	r6, r18
     19a:	62 26       	eor	r6, r18
     19c:	59 25       	eor	r21, r9
     19e:	72 24       	eor	r7, r2
     1a0:	72 24       	eor	r7, r2
     1a2:	62 26       	eor	r6, r18
     1a4:	62 26       	eor	r6, r18
     1a6:	62 26       	eor	r6, r18
     1a8:	62 26       	eor	r6, r18
     1aa:	62 26       	eor	r6, r18
     1ac:	62 26       	eor	r6, r18
     1ae:	62 26       	eor	r6, r18
     1b0:	5d 25       	eor	r21, r13
     1b2:	77 24       	eor	r7, r7
     1b4:	77 24       	eor	r7, r7
     1b6:	62 26       	eor	r6, r18
     1b8:	62 26       	eor	r6, r18
     1ba:	62 26       	eor	r6, r18
     1bc:	62 26       	eor	r6, r18
     1be:	62 26       	eor	r6, r18
     1c0:	62 26       	eor	r6, r18
     1c2:	62 26       	eor	r6, r18
     1c4:	61 25       	eor	r22, r1
     1c6:	87 24       	eor	r8, r7
     1c8:	87 24       	eor	r8, r7
     1ca:	62 26       	eor	r6, r18
     1cc:	62 26       	eor	r6, r18
     1ce:	62 26       	eor	r6, r18
     1d0:	62 26       	eor	r6, r18
     1d2:	62 26       	eor	r6, r18
     1d4:	62 26       	eor	r6, r18
     1d6:	62 26       	eor	r6, r18
     1d8:	65 25       	eor	r22, r5
     1da:	97 24       	eor	r9, r7
     1dc:	97 24       	eor	r9, r7
     1de:	62 26       	eor	r6, r18
     1e0:	62 26       	eor	r6, r18
     1e2:	62 26       	eor	r6, r18
     1e4:	62 26       	eor	r6, r18
     1e6:	62 26       	eor	r6, r18
     1e8:	62 26       	eor	r6, r18
     1ea:	62 26       	eor	r6, r18
     1ec:	69 25       	eor	r22, r9
     1ee:	a7 24       	eor	r10, r7
     1f0:	a7 24       	eor	r10, r7
     1f2:	62 26       	eor	r6, r18
     1f4:	62 26       	eor	r6, r18
     1f6:	62 26       	eor	r6, r18
     1f8:	62 26       	eor	r6, r18
     1fa:	62 26       	eor	r6, r18
     1fc:	62 26       	eor	r6, r18
     1fe:	62 26       	eor	r6, r18
     200:	6d 25       	eor	r22, r13
     202:	b7 24       	eor	r11, r7
     204:	b7 24       	eor	r11, r7
     206:	62 26       	eor	r6, r18
     208:	62 26       	eor	r6, r18
     20a:	62 26       	eor	r6, r18
     20c:	62 26       	eor	r6, r18
     20e:	62 26       	eor	r6, r18
     210:	62 26       	eor	r6, r18
     212:	62 26       	eor	r6, r18
     214:	71 25       	eor	r23, r1
     216:	bc 24       	eor	r11, r12
     218:	bc 24       	eor	r11, r12
     21a:	62 26       	eor	r6, r18
     21c:	62 26       	eor	r6, r18
     21e:	62 26       	eor	r6, r18
     220:	62 26       	eor	r6, r18
     222:	62 26       	eor	r6, r18
     224:	62 26       	eor	r6, r18
     226:	62 26       	eor	r6, r18
     228:	75 25       	eor	r23, r5
     22a:	cc 24       	eor	r12, r12
     22c:	cc 24       	eor	r12, r12
     22e:	62 26       	eor	r6, r18
     230:	62 26       	eor	r6, r18
     232:	62 26       	eor	r6, r18
     234:	62 26       	eor	r6, r18
     236:	62 26       	eor	r6, r18
     238:	62 26       	eor	r6, r18
     23a:	62 26       	eor	r6, r18
     23c:	79 25       	eor	r23, r9
     23e:	db 24       	eor	r13, r11
     240:	db 24       	eor	r13, r11
     242:	62 26       	eor	r6, r18
     244:	62 26       	eor	r6, r18
     246:	62 26       	eor	r6, r18
     248:	62 26       	eor	r6, r18
     24a:	62 26       	eor	r6, r18
     24c:	62 26       	eor	r6, r18
     24e:	62 26       	eor	r6, r18
     250:	7d 25       	eor	r23, r13
     252:	eb 24       	eor	r14, r11
     254:	eb 24       	eor	r14, r11
     256:	62 26       	eor	r6, r18
     258:	62 26       	eor	r6, r18
     25a:	62 26       	eor	r6, r18
     25c:	62 26       	eor	r6, r18
     25e:	62 26       	eor	r6, r18
     260:	62 26       	eor	r6, r18
     262:	62 26       	eor	r6, r18
     264:	81 25       	eor	r24, r1
     266:	fb 24       	eor	r15, r11
     268:	fb 24       	eor	r15, r11
     26a:	62 26       	eor	r6, r18
     26c:	62 26       	eor	r6, r18
     26e:	62 26       	eor	r6, r18
     270:	62 26       	eor	r6, r18
     272:	62 26       	eor	r6, r18
     274:	62 26       	eor	r6, r18
     276:	62 26       	eor	r6, r18
     278:	85 25       	eor	r24, r5
     27a:	0b 25       	eor	r16, r11
     27c:	0b 25       	eor	r16, r11
     27e:	62 26       	eor	r6, r18
     280:	62 26       	eor	r6, r18
     282:	62 26       	eor	r6, r18
     284:	62 26       	eor	r6, r18
     286:	62 26       	eor	r6, r18
     288:	62 26       	eor	r6, r18
     28a:	62 26       	eor	r6, r18
     28c:	89 25       	eor	r24, r9
     28e:	1b 25       	eor	r17, r11
     290:	1b 25       	eor	r17, r11
     292:	62 26       	eor	r6, r18
     294:	62 26       	eor	r6, r18
     296:	62 26       	eor	r6, r18
     298:	62 26       	eor	r6, r18
     29a:	62 26       	eor	r6, r18
     29c:	62 26       	eor	r6, r18
     29e:	62 26       	eor	r6, r18
     2a0:	8d 25       	eor	r24, r13
     2a2:	2b 25       	eor	r18, r11
     2a4:	2b 25       	eor	r18, r11
     2a6:	62 26       	eor	r6, r18
     2a8:	62 26       	eor	r6, r18
     2aa:	62 26       	eor	r6, r18
     2ac:	62 26       	eor	r6, r18
     2ae:	62 26       	eor	r6, r18
     2b0:	62 26       	eor	r6, r18
     2b2:	62 26       	eor	r6, r18
     2b4:	91 25       	eor	r25, r1
     2b6:	3b 25       	eor	r19, r11
     2b8:	3b 25       	eor	r19, r11
     2ba:	62 26       	eor	r6, r18
     2bc:	62 26       	eor	r6, r18
     2be:	62 26       	eor	r6, r18
     2c0:	62 26       	eor	r6, r18
     2c2:	62 26       	eor	r6, r18
     2c4:	62 26       	eor	r6, r18
     2c6:	62 26       	eor	r6, r18
     2c8:	95 25       	eor	r25, r5
     2ca:	62 26       	eor	r6, r18
     2cc:	62 26       	eor	r6, r18
     2ce:	62 26       	eor	r6, r18
     2d0:	62 26       	eor	r6, r18
     2d2:	62 26       	eor	r6, r18
     2d4:	62 26       	eor	r6, r18
     2d6:	62 26       	eor	r6, r18
     2d8:	62 26       	eor	r6, r18
     2da:	62 26       	eor	r6, r18
     2dc:	99 25       	eor	r25, r9
     2de:	62 26       	eor	r6, r18
     2e0:	62 26       	eor	r6, r18
     2e2:	62 26       	eor	r6, r18
     2e4:	62 26       	eor	r6, r18
     2e6:	62 26       	eor	r6, r18
     2e8:	62 26       	eor	r6, r18
     2ea:	62 26       	eor	r6, r18
     2ec:	62 26       	eor	r6, r18
     2ee:	62 26       	eor	r6, r18
     2f0:	9d 25       	eor	r25, r13
     2f2:	62 26       	eor	r6, r18
     2f4:	62 26       	eor	r6, r18
     2f6:	62 26       	eor	r6, r18
     2f8:	62 26       	eor	r6, r18
     2fa:	62 26       	eor	r6, r18
     2fc:	62 26       	eor	r6, r18
     2fe:	62 26       	eor	r6, r18
     300:	62 26       	eor	r6, r18
     302:	62 26       	eor	r6, r18
     304:	a1 25       	eor	r26, r1
     306:	62 26       	eor	r6, r18
     308:	62 26       	eor	r6, r18
     30a:	62 26       	eor	r6, r18
     30c:	62 26       	eor	r6, r18
     30e:	62 26       	eor	r6, r18
     310:	62 26       	eor	r6, r18
     312:	62 26       	eor	r6, r18
     314:	62 26       	eor	r6, r18
     316:	62 26       	eor	r6, r18
     318:	a5 25       	eor	r26, r5
     31a:	62 26       	eor	r6, r18
     31c:	62 26       	eor	r6, r18
     31e:	62 26       	eor	r6, r18
     320:	62 26       	eor	r6, r18
     322:	62 26       	eor	r6, r18
     324:	62 26       	eor	r6, r18
     326:	62 26       	eor	r6, r18
     328:	62 26       	eor	r6, r18
     32a:	62 26       	eor	r6, r18
     32c:	b0 25       	eor	r27, r0
     32e:	62 26       	eor	r6, r18
     330:	62 26       	eor	r6, r18
     332:	62 26       	eor	r6, r18
     334:	62 26       	eor	r6, r18
     336:	62 26       	eor	r6, r18
     338:	62 26       	eor	r6, r18
     33a:	62 26       	eor	r6, r18
     33c:	62 26       	eor	r6, r18
     33e:	62 26       	eor	r6, r18
     340:	b4 25       	eor	r27, r4
     342:	62 26       	eor	r6, r18
     344:	62 26       	eor	r6, r18
     346:	62 26       	eor	r6, r18
     348:	62 26       	eor	r6, r18
     34a:	62 26       	eor	r6, r18
     34c:	62 26       	eor	r6, r18
     34e:	62 26       	eor	r6, r18
     350:	62 26       	eor	r6, r18
     352:	62 26       	eor	r6, r18
     354:	b8 25       	eor	r27, r8
     356:	62 26       	eor	r6, r18
     358:	62 26       	eor	r6, r18
     35a:	62 26       	eor	r6, r18
     35c:	62 26       	eor	r6, r18
     35e:	62 26       	eor	r6, r18
     360:	62 26       	eor	r6, r18
     362:	62 26       	eor	r6, r18
     364:	62 26       	eor	r6, r18
     366:	62 26       	eor	r6, r18
     368:	bc 25       	eor	r27, r12
     36a:	62 26       	eor	r6, r18
     36c:	62 26       	eor	r6, r18
     36e:	62 26       	eor	r6, r18
     370:	62 26       	eor	r6, r18
     372:	62 26       	eor	r6, r18
     374:	62 26       	eor	r6, r18
     376:	62 26       	eor	r6, r18
     378:	62 26       	eor	r6, r18
     37a:	62 26       	eor	r6, r18
     37c:	c0 25       	eor	r28, r0
     37e:	09 26       	eor	r0, r25
     380:	2d 26       	eor	r2, r29
     382:	62 26       	eor	r6, r18
     384:	62 26       	eor	r6, r18
     386:	62 26       	eor	r6, r18
     388:	62 26       	eor	r6, r18
     38a:	62 26       	eor	r6, r18
     38c:	62 26       	eor	r6, r18
     38e:	62 26       	eor	r6, r18
     390:	c6 25       	eor	r28, r6
     392:	0c 26       	eor	r0, r28
     394:	33 26       	eor	r3, r19
     396:	62 26       	eor	r6, r18
     398:	62 26       	eor	r6, r18
     39a:	62 26       	eor	r6, r18
     39c:	62 26       	eor	r6, r18
     39e:	62 26       	eor	r6, r18
     3a0:	62 26       	eor	r6, r18
     3a2:	62 26       	eor	r6, r18
     3a4:	ca 25       	eor	r28, r10
     3a6:	12 26       	eor	r1, r18
     3a8:	39 26       	eor	r3, r25
     3aa:	62 26       	eor	r6, r18
     3ac:	62 26       	eor	r6, r18
     3ae:	62 26       	eor	r6, r18
     3b0:	62 26       	eor	r6, r18
     3b2:	62 26       	eor	r6, r18
     3b4:	62 26       	eor	r6, r18
     3b6:	62 26       	eor	r6, r18
     3b8:	ce 25       	eor	r28, r14
     3ba:	18 26       	eor	r1, r24
     3bc:	3f 26       	eor	r3, r31
     3be:	62 26       	eor	r6, r18
     3c0:	62 26       	eor	r6, r18
     3c2:	62 26       	eor	r6, r18
     3c4:	62 26       	eor	r6, r18
     3c6:	62 26       	eor	r6, r18
     3c8:	62 26       	eor	r6, r18
     3ca:	62 26       	eor	r6, r18
     3cc:	d2 25       	eor	r29, r2
     3ce:	1e 26       	eor	r1, r30
     3d0:	45 26       	eor	r4, r21
     3d2:	62 26       	eor	r6, r18
     3d4:	62 26       	eor	r6, r18
     3d6:	62 26       	eor	r6, r18
     3d8:	62 26       	eor	r6, r18
     3da:	62 26       	eor	r6, r18
     3dc:	62 26       	eor	r6, r18
     3de:	62 26       	eor	r6, r18
     3e0:	d6 25       	eor	r29, r6
     3e2:	21 26       	eor	r2, r17
     3e4:	4b 26       	eor	r4, r27
     3e6:	62 26       	eor	r6, r18
     3e8:	62 26       	eor	r6, r18
     3ea:	62 26       	eor	r6, r18
     3ec:	62 26       	eor	r6, r18
     3ee:	62 26       	eor	r6, r18
     3f0:	62 26       	eor	r6, r18
     3f2:	62 26       	eor	r6, r18
     3f4:	d9 25       	eor	r29, r9
     3f6:	62 26       	eor	r6, r18
     3f8:	62 26       	eor	r6, r18
     3fa:	62 26       	eor	r6, r18
     3fc:	62 26       	eor	r6, r18
     3fe:	62 26       	eor	r6, r18
     400:	62 26       	eor	r6, r18
     402:	62 26       	eor	r6, r18
     404:	62 26       	eor	r6, r18
     406:	62 26       	eor	r6, r18
     408:	dd 25       	eor	r29, r13
     40a:	24 26       	eor	r2, r20
     40c:	51 26       	eor	r5, r17
     40e:	62 26       	eor	r6, r18
     410:	62 26       	eor	r6, r18
     412:	62 26       	eor	r6, r18
     414:	62 26       	eor	r6, r18
     416:	62 26       	eor	r6, r18
     418:	62 26       	eor	r6, r18
     41a:	62 26       	eor	r6, r18
     41c:	e0 25       	eor	r30, r0
     41e:	27 26       	eor	r2, r23
     420:	57 26       	eor	r5, r23
     422:	62 26       	eor	r6, r18
     424:	62 26       	eor	r6, r18
     426:	62 26       	eor	r6, r18
     428:	62 26       	eor	r6, r18
     42a:	62 26       	eor	r6, r18
     42c:	62 26       	eor	r6, r18
     42e:	62 26       	eor	r6, r18
     430:	e3 25       	eor	r30, r3
     432:	2a 26       	eor	r2, r26
     434:	5d 26       	eor	r5, r29
     436:	62 26       	eor	r6, r18
     438:	62 26       	eor	r6, r18
     43a:	62 26       	eor	r6, r18
     43c:	62 26       	eor	r6, r18
     43e:	62 26       	eor	r6, r18
     440:	62 26       	eor	r6, r18
     442:	62 26       	eor	r6, r18
     444:	e6 25       	eor	r30, r6
     446:	62 26       	eor	r6, r18
     448:	62 26       	eor	r6, r18
     44a:	62 26       	eor	r6, r18
     44c:	62 26       	eor	r6, r18
     44e:	62 26       	eor	r6, r18
     450:	62 26       	eor	r6, r18
     452:	62 26       	eor	r6, r18
     454:	62 26       	eor	r6, r18
     456:	62 26       	eor	r6, r18
     458:	ea 25       	eor	r30, r10
     45a:	62 26       	eor	r6, r18
     45c:	62 26       	eor	r6, r18
     45e:	62 26       	eor	r6, r18
     460:	62 26       	eor	r6, r18
     462:	62 26       	eor	r6, r18
     464:	62 26       	eor	r6, r18
     466:	62 26       	eor	r6, r18
     468:	62 26       	eor	r6, r18
     46a:	62 26       	eor	r6, r18
     46c:	ee 25       	eor	r30, r14
     46e:	62 26       	eor	r6, r18
     470:	62 26       	eor	r6, r18
     472:	62 26       	eor	r6, r18
     474:	62 26       	eor	r6, r18
     476:	62 26       	eor	r6, r18
     478:	62 26       	eor	r6, r18
     47a:	62 26       	eor	r6, r18
     47c:	62 26       	eor	r6, r18
     47e:	62 26       	eor	r6, r18
     480:	f2 25       	eor	r31, r2
     482:	62 26       	eor	r6, r18
     484:	62 26       	eor	r6, r18
     486:	62 26       	eor	r6, r18
     488:	62 26       	eor	r6, r18
     48a:	62 26       	eor	r6, r18
     48c:	62 26       	eor	r6, r18
     48e:	62 26       	eor	r6, r18
     490:	62 26       	eor	r6, r18
     492:	62 26       	eor	r6, r18
     494:	f6 25       	eor	r31, r6
     496:	62 26       	eor	r6, r18
     498:	62 26       	eor	r6, r18
     49a:	62 26       	eor	r6, r18
     49c:	62 26       	eor	r6, r18
     49e:	62 26       	eor	r6, r18
     4a0:	62 26       	eor	r6, r18
     4a2:	62 26       	eor	r6, r18
     4a4:	62 26       	eor	r6, r18
     4a6:	62 26       	eor	r6, r18
     4a8:	f9 25       	eor	r31, r9
     4aa:	62 26       	eor	r6, r18
     4ac:	62 26       	eor	r6, r18
     4ae:	62 26       	eor	r6, r18
     4b0:	62 26       	eor	r6, r18
     4b2:	62 26       	eor	r6, r18
     4b4:	62 26       	eor	r6, r18
     4b6:	62 26       	eor	r6, r18
     4b8:	62 26       	eor	r6, r18
     4ba:	62 26       	eor	r6, r18
     4bc:	fd 25       	eor	r31, r13
     4be:	62 26       	eor	r6, r18
     4c0:	62 26       	eor	r6, r18
     4c2:	62 26       	eor	r6, r18
     4c4:	62 26       	eor	r6, r18
     4c6:	62 26       	eor	r6, r18
     4c8:	62 26       	eor	r6, r18
     4ca:	62 26       	eor	r6, r18
     4cc:	62 26       	eor	r6, r18
     4ce:	62 26       	eor	r6, r18
     4d0:	01 26       	eor	r0, r17
     4d2:	62 26       	eor	r6, r18
     4d4:	62 26       	eor	r6, r18
     4d6:	62 26       	eor	r6, r18
     4d8:	62 26       	eor	r6, r18
     4da:	62 26       	eor	r6, r18
     4dc:	62 26       	eor	r6, r18
     4de:	62 26       	eor	r6, r18
     4e0:	62 26       	eor	r6, r18
     4e2:	62 26       	eor	r6, r18
     4e4:	05 26       	eor	r0, r21
     4e6:	76 26       	eor	r7, r22
     4e8:	2b 27       	eor	r18, r27
     4ea:	2b 27       	eor	r18, r27
     4ec:	2b 27       	eor	r18, r27
     4ee:	2b 27       	eor	r18, r27
     4f0:	2b 27       	eor	r18, r27
     4f2:	2b 27       	eor	r18, r27
     4f4:	2b 27       	eor	r18, r27
     4f6:	2b 27       	eor	r18, r27
     4f8:	2b 27       	eor	r18, r27
     4fa:	78 26       	eor	r7, r24
     4fc:	2b 27       	eor	r18, r27
     4fe:	2b 27       	eor	r18, r27
     500:	2b 27       	eor	r18, r27
     502:	2b 27       	eor	r18, r27
     504:	2b 27       	eor	r18, r27
     506:	2b 27       	eor	r18, r27
     508:	2b 27       	eor	r18, r27
     50a:	2b 27       	eor	r18, r27
     50c:	2b 27       	eor	r18, r27
     50e:	7b 26       	eor	r7, r27
     510:	2b 27       	eor	r18, r27
     512:	2b 27       	eor	r18, r27
     514:	2b 27       	eor	r18, r27
     516:	2b 27       	eor	r18, r27
     518:	2b 27       	eor	r18, r27
     51a:	2b 27       	eor	r18, r27
     51c:	2b 27       	eor	r18, r27
     51e:	2b 27       	eor	r18, r27
     520:	2b 27       	eor	r18, r27
     522:	7e 26       	eor	r7, r30
     524:	2b 27       	eor	r18, r27
     526:	2b 27       	eor	r18, r27
     528:	2b 27       	eor	r18, r27
     52a:	2b 27       	eor	r18, r27
     52c:	2b 27       	eor	r18, r27
     52e:	2b 27       	eor	r18, r27
     530:	2b 27       	eor	r18, r27
     532:	2b 27       	eor	r18, r27
     534:	2b 27       	eor	r18, r27
     536:	81 26       	eor	r8, r17
     538:	2b 27       	eor	r18, r27
     53a:	2b 27       	eor	r18, r27
     53c:	2b 27       	eor	r18, r27
     53e:	2b 27       	eor	r18, r27
     540:	2b 27       	eor	r18, r27
     542:	2b 27       	eor	r18, r27
     544:	2b 27       	eor	r18, r27
     546:	2b 27       	eor	r18, r27
     548:	2b 27       	eor	r18, r27
     54a:	84 26       	eor	r8, r20
     54c:	2b 27       	eor	r18, r27
     54e:	2b 27       	eor	r18, r27
     550:	2b 27       	eor	r18, r27
     552:	2b 27       	eor	r18, r27
     554:	2b 27       	eor	r18, r27
     556:	2b 27       	eor	r18, r27
     558:	2b 27       	eor	r18, r27
     55a:	2b 27       	eor	r18, r27
     55c:	2b 27       	eor	r18, r27
     55e:	87 26       	eor	r8, r23
     560:	2b 27       	eor	r18, r27
     562:	2b 27       	eor	r18, r27
     564:	2b 27       	eor	r18, r27
     566:	2b 27       	eor	r18, r27
     568:	2b 27       	eor	r18, r27
     56a:	2b 27       	eor	r18, r27
     56c:	2b 27       	eor	r18, r27
     56e:	2b 27       	eor	r18, r27
     570:	2b 27       	eor	r18, r27
     572:	8a 26       	eor	r8, r26
     574:	2b 27       	eor	r18, r27
     576:	2b 27       	eor	r18, r27
     578:	2b 27       	eor	r18, r27
     57a:	2b 27       	eor	r18, r27
     57c:	2b 27       	eor	r18, r27
     57e:	2b 27       	eor	r18, r27
     580:	2b 27       	eor	r18, r27
     582:	2b 27       	eor	r18, r27
     584:	2b 27       	eor	r18, r27
     586:	8d 26       	eor	r8, r29
     588:	2b 27       	eor	r18, r27
     58a:	2b 27       	eor	r18, r27
     58c:	2b 27       	eor	r18, r27
     58e:	2b 27       	eor	r18, r27
     590:	2b 27       	eor	r18, r27
     592:	2b 27       	eor	r18, r27
     594:	2b 27       	eor	r18, r27
     596:	2b 27       	eor	r18, r27
     598:	2b 27       	eor	r18, r27
     59a:	90 26       	eor	r9, r16
     59c:	2b 27       	eor	r18, r27
     59e:	2b 27       	eor	r18, r27
     5a0:	2b 27       	eor	r18, r27
     5a2:	2b 27       	eor	r18, r27
     5a4:	2b 27       	eor	r18, r27
     5a6:	2b 27       	eor	r18, r27
     5a8:	2b 27       	eor	r18, r27
     5aa:	2b 27       	eor	r18, r27
     5ac:	2b 27       	eor	r18, r27
     5ae:	93 26       	eor	r9, r19
     5b0:	2b 27       	eor	r18, r27
     5b2:	2b 27       	eor	r18, r27
     5b4:	2b 27       	eor	r18, r27
     5b6:	2b 27       	eor	r18, r27
     5b8:	2b 27       	eor	r18, r27
     5ba:	2b 27       	eor	r18, r27
     5bc:	2b 27       	eor	r18, r27
     5be:	2b 27       	eor	r18, r27
     5c0:	2b 27       	eor	r18, r27
     5c2:	96 26       	eor	r9, r22
     5c4:	2b 27       	eor	r18, r27
     5c6:	2b 27       	eor	r18, r27
     5c8:	2b 27       	eor	r18, r27
     5ca:	2b 27       	eor	r18, r27
     5cc:	2b 27       	eor	r18, r27
     5ce:	2b 27       	eor	r18, r27
     5d0:	2b 27       	eor	r18, r27
     5d2:	2b 27       	eor	r18, r27
     5d4:	2b 27       	eor	r18, r27
     5d6:	99 26       	eor	r9, r25
     5d8:	2b 27       	eor	r18, r27
     5da:	2b 27       	eor	r18, r27
     5dc:	2b 27       	eor	r18, r27
     5de:	2b 27       	eor	r18, r27
     5e0:	2b 27       	eor	r18, r27
     5e2:	2b 27       	eor	r18, r27
     5e4:	2b 27       	eor	r18, r27
     5e6:	2b 27       	eor	r18, r27
     5e8:	2b 27       	eor	r18, r27
     5ea:	9c 26       	eor	r9, r28
     5ec:	2b 27       	eor	r18, r27
     5ee:	2b 27       	eor	r18, r27
     5f0:	2b 27       	eor	r18, r27
     5f2:	2b 27       	eor	r18, r27
     5f4:	2b 27       	eor	r18, r27
     5f6:	2b 27       	eor	r18, r27
     5f8:	2b 27       	eor	r18, r27
     5fa:	2b 27       	eor	r18, r27
     5fc:	2b 27       	eor	r18, r27
     5fe:	9f 26       	eor	r9, r31
     600:	2b 27       	eor	r18, r27
     602:	2b 27       	eor	r18, r27
     604:	2b 27       	eor	r18, r27
     606:	2b 27       	eor	r18, r27
     608:	2b 27       	eor	r18, r27
     60a:	2b 27       	eor	r18, r27
     60c:	2b 27       	eor	r18, r27
     60e:	2b 27       	eor	r18, r27
     610:	2b 27       	eor	r18, r27
     612:	a2 26       	eor	r10, r18
     614:	2b 27       	eor	r18, r27
     616:	2b 27       	eor	r18, r27
     618:	2b 27       	eor	r18, r27
     61a:	2b 27       	eor	r18, r27
     61c:	2b 27       	eor	r18, r27
     61e:	2b 27       	eor	r18, r27
     620:	2b 27       	eor	r18, r27
     622:	2b 27       	eor	r18, r27
     624:	2b 27       	eor	r18, r27
     626:	a5 26       	eor	r10, r21
     628:	2b 27       	eor	r18, r27
     62a:	2b 27       	eor	r18, r27
     62c:	2b 27       	eor	r18, r27
     62e:	2b 27       	eor	r18, r27
     630:	2b 27       	eor	r18, r27
     632:	2b 27       	eor	r18, r27
     634:	2b 27       	eor	r18, r27
     636:	2b 27       	eor	r18, r27
     638:	2b 27       	eor	r18, r27
     63a:	a8 26       	eor	r10, r24
     63c:	2b 27       	eor	r18, r27
     63e:	2b 27       	eor	r18, r27
     640:	2b 27       	eor	r18, r27
     642:	2b 27       	eor	r18, r27
     644:	2b 27       	eor	r18, r27
     646:	2b 27       	eor	r18, r27
     648:	2b 27       	eor	r18, r27
     64a:	2b 27       	eor	r18, r27
     64c:	2b 27       	eor	r18, r27
     64e:	ab 26       	eor	r10, r27
     650:	2b 27       	eor	r18, r27
     652:	2b 27       	eor	r18, r27
     654:	2b 27       	eor	r18, r27
     656:	2b 27       	eor	r18, r27
     658:	2b 27       	eor	r18, r27
     65a:	2b 27       	eor	r18, r27
     65c:	2b 27       	eor	r18, r27
     65e:	2b 27       	eor	r18, r27
     660:	2b 27       	eor	r18, r27
     662:	ae 26       	eor	r10, r30
     664:	2b 27       	eor	r18, r27
     666:	2b 27       	eor	r18, r27
     668:	2b 27       	eor	r18, r27
     66a:	2b 27       	eor	r18, r27
     66c:	2b 27       	eor	r18, r27
     66e:	2b 27       	eor	r18, r27
     670:	2b 27       	eor	r18, r27
     672:	2b 27       	eor	r18, r27
     674:	2b 27       	eor	r18, r27
     676:	b1 26       	eor	r11, r17
     678:	2b 27       	eor	r18, r27
     67a:	2b 27       	eor	r18, r27
     67c:	2b 27       	eor	r18, r27
     67e:	2b 27       	eor	r18, r27
     680:	2b 27       	eor	r18, r27
     682:	2b 27       	eor	r18, r27
     684:	2b 27       	eor	r18, r27
     686:	2b 27       	eor	r18, r27
     688:	2b 27       	eor	r18, r27
     68a:	b4 26       	eor	r11, r20
     68c:	2b 27       	eor	r18, r27
     68e:	2b 27       	eor	r18, r27
     690:	2b 27       	eor	r18, r27
     692:	2b 27       	eor	r18, r27
     694:	2b 27       	eor	r18, r27
     696:	2b 27       	eor	r18, r27
     698:	2b 27       	eor	r18, r27
     69a:	2b 27       	eor	r18, r27
     69c:	2b 27       	eor	r18, r27
     69e:	b7 26       	eor	r11, r23
     6a0:	2b 27       	eor	r18, r27
     6a2:	2b 27       	eor	r18, r27
     6a4:	2b 27       	eor	r18, r27
     6a6:	2b 27       	eor	r18, r27
     6a8:	2b 27       	eor	r18, r27
     6aa:	2b 27       	eor	r18, r27
     6ac:	2b 27       	eor	r18, r27
     6ae:	2b 27       	eor	r18, r27
     6b0:	2b 27       	eor	r18, r27
     6b2:	ba 26       	eor	r11, r26
     6b4:	2b 27       	eor	r18, r27
     6b6:	2b 27       	eor	r18, r27
     6b8:	2b 27       	eor	r18, r27
     6ba:	2b 27       	eor	r18, r27
     6bc:	2b 27       	eor	r18, r27
     6be:	2b 27       	eor	r18, r27
     6c0:	2b 27       	eor	r18, r27
     6c2:	2b 27       	eor	r18, r27
     6c4:	2b 27       	eor	r18, r27
     6c6:	bd 26       	eor	r11, r29
     6c8:	2b 27       	eor	r18, r27
     6ca:	2b 27       	eor	r18, r27
     6cc:	2b 27       	eor	r18, r27
     6ce:	2b 27       	eor	r18, r27
     6d0:	2b 27       	eor	r18, r27
     6d2:	2b 27       	eor	r18, r27
     6d4:	2b 27       	eor	r18, r27
     6d6:	2b 27       	eor	r18, r27
     6d8:	2b 27       	eor	r18, r27
     6da:	ca 26       	eor	r12, r26
     6dc:	2b 27       	eor	r18, r27
     6de:	2b 27       	eor	r18, r27
     6e0:	2b 27       	eor	r18, r27
     6e2:	2b 27       	eor	r18, r27
     6e4:	2b 27       	eor	r18, r27
     6e6:	2b 27       	eor	r18, r27
     6e8:	2b 27       	eor	r18, r27
     6ea:	2b 27       	eor	r18, r27
     6ec:	2b 27       	eor	r18, r27
     6ee:	cd 26       	eor	r12, r29
     6f0:	2b 27       	eor	r18, r27
     6f2:	2b 27       	eor	r18, r27
     6f4:	2b 27       	eor	r18, r27
     6f6:	2b 27       	eor	r18, r27
     6f8:	2b 27       	eor	r18, r27
     6fa:	2b 27       	eor	r18, r27
     6fc:	2b 27       	eor	r18, r27
     6fe:	2b 27       	eor	r18, r27
     700:	2b 27       	eor	r18, r27
     702:	d0 26       	eor	r13, r16
     704:	2b 27       	eor	r18, r27
     706:	2b 27       	eor	r18, r27
     708:	2b 27       	eor	r18, r27
     70a:	2b 27       	eor	r18, r27
     70c:	2b 27       	eor	r18, r27
     70e:	2b 27       	eor	r18, r27
     710:	2b 27       	eor	r18, r27
     712:	2b 27       	eor	r18, r27
     714:	2b 27       	eor	r18, r27
     716:	d3 26       	eor	r13, r19
     718:	2b 27       	eor	r18, r27
     71a:	2b 27       	eor	r18, r27
     71c:	2b 27       	eor	r18, r27
     71e:	2b 27       	eor	r18, r27
     720:	2b 27       	eor	r18, r27
     722:	2b 27       	eor	r18, r27
     724:	2b 27       	eor	r18, r27
     726:	2b 27       	eor	r18, r27
     728:	2b 27       	eor	r18, r27
     72a:	d6 26       	eor	r13, r22
     72c:	2b 27       	eor	r18, r27
     72e:	2b 27       	eor	r18, r27
     730:	2b 27       	eor	r18, r27
     732:	2b 27       	eor	r18, r27
     734:	2b 27       	eor	r18, r27
     736:	2b 27       	eor	r18, r27
     738:	2b 27       	eor	r18, r27
     73a:	2b 27       	eor	r18, r27
     73c:	2b 27       	eor	r18, r27
     73e:	db 26       	eor	r13, r27
     740:	2b 27       	eor	r18, r27
     742:	2b 27       	eor	r18, r27
     744:	2b 27       	eor	r18, r27
     746:	2b 27       	eor	r18, r27
     748:	2b 27       	eor	r18, r27
     74a:	2b 27       	eor	r18, r27
     74c:	2b 27       	eor	r18, r27
     74e:	2b 27       	eor	r18, r27
     750:	2b 27       	eor	r18, r27
     752:	de 26       	eor	r13, r30
     754:	2b 27       	eor	r18, r27
     756:	2b 27       	eor	r18, r27
     758:	2b 27       	eor	r18, r27
     75a:	2b 27       	eor	r18, r27
     75c:	2b 27       	eor	r18, r27
     75e:	2b 27       	eor	r18, r27
     760:	2b 27       	eor	r18, r27
     762:	2b 27       	eor	r18, r27
     764:	2b 27       	eor	r18, r27
     766:	e1 26       	eor	r14, r17
     768:	2b 27       	eor	r18, r27
     76a:	2b 27       	eor	r18, r27
     76c:	2b 27       	eor	r18, r27
     76e:	2b 27       	eor	r18, r27
     770:	2b 27       	eor	r18, r27
     772:	2b 27       	eor	r18, r27
     774:	2b 27       	eor	r18, r27
     776:	2b 27       	eor	r18, r27
     778:	2b 27       	eor	r18, r27
     77a:	e4 26       	eor	r14, r20
     77c:	2b 27       	eor	r18, r27
     77e:	2b 27       	eor	r18, r27
     780:	2b 27       	eor	r18, r27
     782:	2b 27       	eor	r18, r27
     784:	2b 27       	eor	r18, r27
     786:	2b 27       	eor	r18, r27
     788:	2b 27       	eor	r18, r27
     78a:	2b 27       	eor	r18, r27
     78c:	2b 27       	eor	r18, r27
     78e:	e7 26       	eor	r14, r23
     790:	2b 27       	eor	r18, r27
     792:	2b 27       	eor	r18, r27
     794:	2b 27       	eor	r18, r27
     796:	2b 27       	eor	r18, r27
     798:	2b 27       	eor	r18, r27
     79a:	2b 27       	eor	r18, r27
     79c:	2b 27       	eor	r18, r27
     79e:	2b 27       	eor	r18, r27
     7a0:	2b 27       	eor	r18, r27
     7a2:	ec 26       	eor	r14, r28
     7a4:	2b 27       	eor	r18, r27
     7a6:	2b 27       	eor	r18, r27
     7a8:	2b 27       	eor	r18, r27
     7aa:	2b 27       	eor	r18, r27
     7ac:	2b 27       	eor	r18, r27
     7ae:	2b 27       	eor	r18, r27
     7b0:	2b 27       	eor	r18, r27
     7b2:	2b 27       	eor	r18, r27
     7b4:	2b 27       	eor	r18, r27
     7b6:	ef 26       	eor	r14, r31
     7b8:	2b 27       	eor	r18, r27
     7ba:	2b 27       	eor	r18, r27
     7bc:	2b 27       	eor	r18, r27
     7be:	2b 27       	eor	r18, r27
     7c0:	2b 27       	eor	r18, r27
     7c2:	2b 27       	eor	r18, r27
     7c4:	2b 27       	eor	r18, r27
     7c6:	2b 27       	eor	r18, r27
     7c8:	2b 27       	eor	r18, r27
     7ca:	f4 26       	eor	r15, r20
     7cc:	2b 27       	eor	r18, r27
     7ce:	2b 27       	eor	r18, r27
     7d0:	2b 27       	eor	r18, r27
     7d2:	2b 27       	eor	r18, r27
     7d4:	2b 27       	eor	r18, r27
     7d6:	2b 27       	eor	r18, r27
     7d8:	2b 27       	eor	r18, r27
     7da:	2b 27       	eor	r18, r27
     7dc:	2b 27       	eor	r18, r27
     7de:	f9 26       	eor	r15, r25
     7e0:	1b 27       	eor	r17, r27
     7e2:	20 27       	eor	r18, r16
     7e4:	25 27       	eor	r18, r21
     7e6:	2b 27       	eor	r18, r27
     7e8:	2b 27       	eor	r18, r27
     7ea:	2b 27       	eor	r18, r27
     7ec:	2b 27       	eor	r18, r27
     7ee:	2b 27       	eor	r18, r27
     7f0:	2b 27       	eor	r18, r27
     7f2:	fe 26       	eor	r15, r30
     7f4:	2b 27       	eor	r18, r27
     7f6:	2b 27       	eor	r18, r27
     7f8:	2b 27       	eor	r18, r27
     7fa:	2b 27       	eor	r18, r27
     7fc:	2b 27       	eor	r18, r27
     7fe:	2b 27       	eor	r18, r27
     800:	2b 27       	eor	r18, r27
     802:	2b 27       	eor	r18, r27
     804:	2b 27       	eor	r18, r27
     806:	01 27       	eor	r16, r17
     808:	2b 27       	eor	r18, r27
     80a:	2b 27       	eor	r18, r27
     80c:	2b 27       	eor	r18, r27
     80e:	2b 27       	eor	r18, r27
     810:	2b 27       	eor	r18, r27
     812:	2b 27       	eor	r18, r27
     814:	2b 27       	eor	r18, r27
     816:	2b 27       	eor	r18, r27
     818:	2b 27       	eor	r18, r27
     81a:	04 27       	eor	r16, r20
     81c:	2b 27       	eor	r18, r27
     81e:	2b 27       	eor	r18, r27
     820:	2b 27       	eor	r18, r27
     822:	2b 27       	eor	r18, r27
     824:	2b 27       	eor	r18, r27
     826:	2b 27       	eor	r18, r27
     828:	2b 27       	eor	r18, r27
     82a:	2b 27       	eor	r18, r27
     82c:	2b 27       	eor	r18, r27
     82e:	07 27       	eor	r16, r23
     830:	2b 27       	eor	r18, r27
     832:	2b 27       	eor	r18, r27
     834:	2b 27       	eor	r18, r27
     836:	2b 27       	eor	r18, r27
     838:	2b 27       	eor	r18, r27
     83a:	2b 27       	eor	r18, r27
     83c:	2b 27       	eor	r18, r27
     83e:	2b 27       	eor	r18, r27
     840:	2b 27       	eor	r18, r27
     842:	0a 27       	eor	r16, r26
     844:	2b 27       	eor	r18, r27
     846:	2b 27       	eor	r18, r27
     848:	2b 27       	eor	r18, r27
     84a:	2b 27       	eor	r18, r27
     84c:	2b 27       	eor	r18, r27
     84e:	2b 27       	eor	r18, r27
     850:	2b 27       	eor	r18, r27
     852:	2b 27       	eor	r18, r27
     854:	2b 27       	eor	r18, r27
     856:	0f 27       	eor	r16, r31
     858:	2b 27       	eor	r18, r27
     85a:	2b 27       	eor	r18, r27
     85c:	2b 27       	eor	r18, r27
     85e:	2b 27       	eor	r18, r27
     860:	2b 27       	eor	r18, r27
     862:	2b 27       	eor	r18, r27
     864:	2b 27       	eor	r18, r27
     866:	2b 27       	eor	r18, r27
     868:	2b 27       	eor	r18, r27
     86a:	12 27       	eor	r17, r18
     86c:	2b 27       	eor	r18, r27
     86e:	2b 27       	eor	r18, r27
     870:	2b 27       	eor	r18, r27
     872:	2b 27       	eor	r18, r27
     874:	2b 27       	eor	r18, r27
     876:	2b 27       	eor	r18, r27
     878:	2b 27       	eor	r18, r27
     87a:	2b 27       	eor	r18, r27
     87c:	2b 27       	eor	r18, r27
     87e:	15 27       	eor	r17, r21
     880:	2b 27       	eor	r18, r27
     882:	2b 27       	eor	r18, r27
     884:	2b 27       	eor	r18, r27
     886:	2b 27       	eor	r18, r27
     888:	2b 27       	eor	r18, r27
     88a:	2b 27       	eor	r18, r27
     88c:	2b 27       	eor	r18, r27
     88e:	2b 27       	eor	r18, r27
     890:	2b 27       	eor	r18, r27
     892:	18 27       	eor	r17, r24
     894:	08 00       	.word	0x0008	; ????
     896:	00 00       	nop
     898:	be 92       	st	-X, r11
     89a:	24 49       	sbci	r18, 0x94	; 148
     89c:	12 3e       	cpi	r17, 0xE2	; 226
     89e:	ab aa       	std	Y+51, r10	; 0x33
     8a0:	aa 2a       	or	r10, r26
     8a2:	be cd       	rjmp	.-1156   	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     8a4:	cc cc       	rjmp	.-1640   	; 0x23e <__SREG__+0x1ff>
     8a6:	4c 3e       	cpi	r20, 0xEC	; 236
     8a8:	00 00       	nop
     8aa:	00 80       	ld	r0, Z
     8ac:	be ab       	std	Y+54, r27	; 0x36
     8ae:	aa aa       	std	Y+50, r10	; 0x32
     8b0:	aa 3e       	cpi	r26, 0xEA	; 234
     8b2:	00 00       	nop
     8b4:	00 00       	nop
     8b6:	bf 00       	.word	0x00bf	; ????
     8b8:	00 00       	nop
     8ba:	80 3f       	cpi	r24, 0xF0	; 240
     8bc:	00 00       	nop
     8be:	00 00       	nop
     8c0:	00 08       	sbc	r0, r0
     8c2:	41 78       	andi	r20, 0x81	; 129
     8c4:	d3 bb       	out	0x13, r29	; 19
     8c6:	43 87       	std	Z+11, r20	; 0x0b
     8c8:	d1 13       	cpse	r29, r17
     8ca:	3d 19       	sub	r19, r13
     8cc:	0e 3c       	cpi	r16, 0xCE	; 206
     8ce:	c3 bd       	out	0x23, r28	; 35
     8d0:	42 82       	std	Z+2, r4	; 0x02
     8d2:	ad 2b       	or	r26, r29
     8d4:	3e 68       	ori	r19, 0x8E	; 142
     8d6:	ec 82       	std	Y+4, r14	; 0x04
     8d8:	76 be       	out	0x36, r7	; 54
     8da:	d9 8f       	std	Y+25, r29	; 0x19
     8dc:	e1 a9       	ldd	r30, Z+49	; 0x31
     8de:	3e 4c       	sbci	r19, 0xCE	; 206
     8e0:	80 ef       	ldi	r24, 0xF0	; 240
     8e2:	ff be       	out	0x3f, r15	; 63
     8e4:	01 c4       	rjmp	.+2050   	; 0x10e8 <vListInsert+0x78>
     8e6:	ff 7f       	andi	r31, 0xFF	; 255
     8e8:	3f 00       	.word	0x003f	; ????
     8ea:	00 00       	nop
	...

000008ee <__trampolines_end>:
     8ee:	6e 61       	ori	r22, 0x1E	; 30
     8f0:	6e 00       	.word	0x006e	; ????

000008f2 <__c.2332>:
     8f2:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     902:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     912:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     922:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     932:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     942:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     952:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     962:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     972:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     982:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     992:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     9a2:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     9b2:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     9c2:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     9d2:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     9e2:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000009f0 <R22_Saturation_Temp>:
     9f0:	9a 99 c9 c1 33 33 6b c1 33 33 d3 c0 cd cc cc 3d     ....33k.33.....=
     a00:	48 e1 a2 40 66 66 2e 41 00 00 78 41 9a 99 9d 41     H..@ff.A..xA...A
     a10:	00 00 bc 41 cd cc d8 41 33 33 f3 41 66 66 06 42     ...A...A33.Aff.B
     a20:	66 66 12 42 9a 99 1d 42 66 66 28 42 cd cc 32 42     ff.B...Bff(B..2B
     a30:	cd cc 28 42 66 66 46 42 9a 99 4f 42 66 66 58 42     ..(BffFB..OBffXB
     a40:	33 33 61 42 9a 99 69 42 9a 99 71 42 33 33 79 42     33aB..iB..qB33yB
     a50:	9a 99 80 42 33 33 84 42 cd cc 87 42 66 66 8b 42     ...B33.B...Bff.B
     a60:	00 00 8f 42 66 66 92 42 9a 99 95 42 cd cc 98 42     ...Bff.B...B...B

00000a70 <prvIdleTask>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
     a70:	04 e9       	ldi	r16, 0x94	; 148
     a72:	16 e0       	ldi	r17, 0x06	; 6
     a74:	0f 2e       	mov	r0, r31
     a76:	f4 ec       	ldi	r31, 0xC4	; 196
     a78:	ef 2e       	mov	r14, r31
     a7a:	f6 e0       	ldi	r31, 0x06	; 6
     a7c:	ff 2e       	mov	r15, r31
     a7e:	f0 2d       	mov	r31, r0
     a80:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <uxDeletedTasksWaitingCleanUp>
     a84:	88 23       	and	r24, r24
     a86:	11 f1       	breq	.+68     	; 0xacc <prvIdleTask+0x5c>
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	0f 92       	push	r0
     a8e:	d8 01       	movw	r26, r16
     a90:	17 96       	adiw	r26, 0x07	; 7
     a92:	ed 91       	ld	r30, X+
     a94:	fc 91       	ld	r31, X
     a96:	18 97       	sbiw	r26, 0x08	; 8
     a98:	c0 85       	ldd	r28, Z+8	; 0x08
     a9a:	d1 85       	ldd	r29, Z+9	; 0x09
     a9c:	ce 01       	movw	r24, r28
     a9e:	02 96       	adiw	r24, 0x02	; 2
     aa0:	24 d3       	rcall	.+1608   	; 0x10ea <uxListRemove>
     aa2:	80 91 87 06 	lds	r24, 0x0687	; 0x800687 <uxCurrentNumberOfTasks>
     aa6:	81 50       	subi	r24, 0x01	; 1
     aa8:	80 93 87 06 	sts	0x0687, r24	; 0x800687 <uxCurrentNumberOfTasks>
     aac:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <uxDeletedTasksWaitingCleanUp>
     ab0:	81 50       	subi	r24, 0x01	; 1
     ab2:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <uxDeletedTasksWaitingCleanUp>
     ab6:	0f 90       	pop	r0
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     abc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     abe:	75 d0       	rcall	.+234    	; 0xbaa <vPortFree>
     ac0:	ce 01       	movw	r24, r28
     ac2:	73 d0       	rcall	.+230    	; 0xbaa <vPortFree>
     ac4:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <uxDeletedTasksWaitingCleanUp>
     ac8:	81 11       	cpse	r24, r1
     aca:	de cf       	rjmp	.-68     	; 0xa88 <prvIdleTask+0x18>
     acc:	f7 01       	movw	r30, r14
     ace:	80 81       	ld	r24, Z
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	08 f0       	brcs	.+2      	; 0xad6 <prvIdleTask+0x66>
     ad4:	3d d1       	rcall	.+634    	; 0xd50 <vPortYield>
     ad6:	73 d2       	rcall	.+1254   	; 0xfbe <vApplicationIdleHook>
     ad8:	d3 cf       	rjmp	.-90     	; 0xa80 <prvIdleTask+0x10>

00000ada <__ctors_end>:
     ada:	11 24       	eor	r1, r1
     adc:	1f be       	out	0x3f, r1	; 63
     ade:	cf ef       	ldi	r28, 0xFF	; 255
     ae0:	d1 e2       	ldi	r29, 0x21	; 33
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	cd bf       	out	0x3d, r28	; 61
     ae6:	00 e0       	ldi	r16, 0x00	; 0
     ae8:	0c bf       	out	0x3c, r16	; 60

00000aea <__do_copy_data>:
     aea:	16 e0       	ldi	r17, 0x06	; 6
     aec:	a0 e0       	ldi	r26, 0x00	; 0
     aee:	b2 e0       	ldi	r27, 0x02	; 2
     af0:	ea e6       	ldi	r30, 0x6A	; 106
     af2:	f9 eb       	ldi	r31, 0xB9	; 185
     af4:	00 e0       	ldi	r16, 0x00	; 0
     af6:	0b bf       	out	0x3b, r16	; 59
     af8:	02 c0       	rjmp	.+4      	; 0xafe <__do_copy_data+0x14>
     afa:	07 90       	elpm	r0, Z+
     afc:	0d 92       	st	X+, r0
     afe:	a4 37       	cpi	r26, 0x74	; 116
     b00:	b1 07       	cpc	r27, r17
     b02:	d9 f7       	brne	.-10     	; 0xafa <__do_copy_data+0x10>

00000b04 <__do_clear_bss>:
     b04:	2a e0       	ldi	r18, 0x0A	; 10
     b06:	a4 e7       	ldi	r26, 0x74	; 116
     b08:	b6 e0       	ldi	r27, 0x06	; 6
     b0a:	01 c0       	rjmp	.+2      	; 0xb0e <.do_clear_bss_start>

00000b0c <.do_clear_bss_loop>:
     b0c:	1d 92       	st	X+, r1

00000b0e <.do_clear_bss_start>:
     b0e:	ab 3c       	cpi	r26, 0xCB	; 203
     b10:	b2 07       	cpc	r27, r18
     b12:	e1 f7       	brne	.-8      	; 0xb0c <.do_clear_bss_loop>
     b14:	0e 94 81 20 	call	0x4102	; 0x4102 <main>
     b18:	0c 94 b3 5c 	jmp	0xb966	; 0xb966 <_exit>

00000b1c <__bad_interrupt>:
     b1c:	71 ca       	rjmp	.-2846   	; 0x0 <__vectors>

00000b1e <difftime>:
     b1e:	62 1b       	sub	r22, r18
     b20:	73 0b       	sbc	r23, r19
     b22:	84 0b       	sbc	r24, r20
     b24:	95 0b       	sbc	r25, r21
     b26:	08 95       	ret

00000b28 <time>:
     b28:	fc 01       	movw	r30, r24
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	60 91 c7 0a 	lds	r22, 0x0AC7	; 0x800ac7 <__system_time>
     b32:	70 91 c8 0a 	lds	r23, 0x0AC8	; 0x800ac8 <__system_time+0x1>
     b36:	80 91 c9 0a 	lds	r24, 0x0AC9	; 0x800ac9 <__system_time+0x2>
     b3a:	90 91 ca 0a 	lds	r25, 0x0ACA	; 0x800aca <__system_time+0x3>
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	30 97       	sbiw	r30, 0x00	; 0
     b42:	21 f0       	breq	.+8      	; 0xb4c <time+0x24>
     b44:	60 83       	st	Z, r22
     b46:	71 83       	std	Z+1, r23	; 0x01
     b48:	82 83       	std	Z+2, r24	; 0x02
     b4a:	93 83       	std	Z+3, r25	; 0x03
     b4c:	08 95       	ret

00000b4e <system_tick>:
     b4e:	8f 93       	push	r24
     b50:	8f b7       	in	r24, 0x3f	; 63
     b52:	8f 93       	push	r24
     b54:	f8 94       	cli
     b56:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <__system_time>
     b5a:	8f 5f       	subi	r24, 0xFF	; 255
     b5c:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <__system_time>
     b60:	80 91 c8 0a 	lds	r24, 0x0AC8	; 0x800ac8 <__system_time+0x1>
     b64:	8f 4f       	sbci	r24, 0xFF	; 255
     b66:	80 93 c8 0a 	sts	0x0AC8, r24	; 0x800ac8 <__system_time+0x1>
     b6a:	80 91 c9 0a 	lds	r24, 0x0AC9	; 0x800ac9 <__system_time+0x2>
     b6e:	8f 4f       	sbci	r24, 0xFF	; 255
     b70:	80 93 c9 0a 	sts	0x0AC9, r24	; 0x800ac9 <__system_time+0x2>
     b74:	80 91 ca 0a 	lds	r24, 0x0ACA	; 0x800aca <__system_time+0x3>
     b78:	8f 4f       	sbci	r24, 0xFF	; 255
     b7a:	80 93 ca 0a 	sts	0x0ACA, r24	; 0x800aca <__system_time+0x3>
     b7e:	8f 91       	pop	r24
     b80:	8f bf       	out	0x3f, r24	; 63
     b82:	8f 91       	pop	r24
     b84:	08 95       	ret

00000b86 <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
     b8c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
     b90:	ce 01       	movw	r24, r28
     b92:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <malloc>
     b96:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     b98:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     b9c:	20 97       	sbiw	r28, 0x00	; 0
     b9e:	09 f4       	brne	.+2      	; 0xba2 <pvPortMalloc+0x1c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     ba0:	27 d2       	rcall	.+1102   	; 0xff0 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
     ba2:	ce 01       	movw	r24, r28
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
	if( pv )
     bae:	00 97       	sbiw	r24, 0x00	; 0
     bb0:	41 f0       	breq	.+16     	; 0xbc2 <vPortFree+0x18>
     bb2:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
     bb4:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
		{
			free( pv );
     bb8:	ce 01       	movw	r24, r28
     bba:	0e 94 12 5a 	call	0xb424	; 0xb424 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
     bbe:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
	}
}
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <pxPortInitialiseStack>:
#elif defined( portUSE_TIMER2 )
        portTIMSK &= ~( _BV(OCIE2B)|_BV(OCIE2A)|_BV(TOIE2) );	// disable all Timer2 interrupts
        ASSR = 0x00;              								// set Timer/Counter2 to be off

#elif defined( portUSE_TIMER3 )
        portTIMSK &= ~( _BV(OCIE3B)|_BV(OCIE3A)|_BV(TOIE3) );	// disable all Timer3 interrupts
     bc8:	31 e1       	ldi	r19, 0x11	; 17
     bca:	fc 01       	movw	r30, r24
     bcc:	30 83       	st	Z, r19
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	22 e2       	ldi	r18, 0x22	; 34
     bd2:	20 83       	st	Z, r18
     bd4:	31 97       	sbiw	r30, 0x01	; 1
     bd6:	a3 e3       	ldi	r26, 0x33	; 51
     bd8:	a0 83       	st	Z, r26
     bda:	31 97       	sbiw	r30, 0x01	; 1
     bdc:	60 83       	st	Z, r22
     bde:	31 97       	sbiw	r30, 0x01	; 1
     be0:	70 83       	st	Z, r23
     be2:	31 97       	sbiw	r30, 0x01	; 1
     be4:	10 82       	st	Z, r1
     be6:	31 97       	sbiw	r30, 0x01	; 1
     be8:	10 82       	st	Z, r1
     bea:	31 97       	sbiw	r30, 0x01	; 1
     bec:	60 e8       	ldi	r22, 0x80	; 128
     bee:	60 83       	st	Z, r22
     bf0:	31 97       	sbiw	r30, 0x01	; 1
     bf2:	10 82       	st	Z, r1
     bf4:	31 97       	sbiw	r30, 0x01	; 1
     bf6:	10 82       	st	Z, r1
     bf8:	31 97       	sbiw	r30, 0x01	; 1
     bfa:	10 82       	st	Z, r1
     bfc:	31 97       	sbiw	r30, 0x01	; 1
     bfe:	62 e0       	ldi	r22, 0x02	; 2
     c00:	60 83       	st	Z, r22
     c02:	31 97       	sbiw	r30, 0x01	; 1
     c04:	63 e0       	ldi	r22, 0x03	; 3
     c06:	60 83       	st	Z, r22
     c08:	31 97       	sbiw	r30, 0x01	; 1
     c0a:	64 e0       	ldi	r22, 0x04	; 4
     c0c:	60 83       	st	Z, r22
     c0e:	31 97       	sbiw	r30, 0x01	; 1
     c10:	65 e0       	ldi	r22, 0x05	; 5
     c12:	60 83       	st	Z, r22
     c14:	31 97       	sbiw	r30, 0x01	; 1
     c16:	66 e0       	ldi	r22, 0x06	; 6
     c18:	60 83       	st	Z, r22
     c1a:	31 97       	sbiw	r30, 0x01	; 1
     c1c:	67 e0       	ldi	r22, 0x07	; 7
     c1e:	60 83       	st	Z, r22
     c20:	31 97       	sbiw	r30, 0x01	; 1
     c22:	68 e0       	ldi	r22, 0x08	; 8
     c24:	60 83       	st	Z, r22
     c26:	31 97       	sbiw	r30, 0x01	; 1
     c28:	69 e0       	ldi	r22, 0x09	; 9
     c2a:	60 83       	st	Z, r22
     c2c:	31 97       	sbiw	r30, 0x01	; 1
     c2e:	60 e1       	ldi	r22, 0x10	; 16
     c30:	60 83       	st	Z, r22
     c32:	31 97       	sbiw	r30, 0x01	; 1
     c34:	30 83       	st	Z, r19
     c36:	31 97       	sbiw	r30, 0x01	; 1
     c38:	32 e1       	ldi	r19, 0x12	; 18
     c3a:	30 83       	st	Z, r19
     c3c:	31 97       	sbiw	r30, 0x01	; 1
     c3e:	33 e1       	ldi	r19, 0x13	; 19
     c40:	30 83       	st	Z, r19
     c42:	31 97       	sbiw	r30, 0x01	; 1
     c44:	34 e1       	ldi	r19, 0x14	; 20
     c46:	30 83       	st	Z, r19
     c48:	31 97       	sbiw	r30, 0x01	; 1
     c4a:	35 e1       	ldi	r19, 0x15	; 21
     c4c:	30 83       	st	Z, r19
     c4e:	31 97       	sbiw	r30, 0x01	; 1
     c50:	36 e1       	ldi	r19, 0x16	; 22
     c52:	30 83       	st	Z, r19
     c54:	31 97       	sbiw	r30, 0x01	; 1
     c56:	37 e1       	ldi	r19, 0x17	; 23
     c58:	30 83       	st	Z, r19
     c5a:	31 97       	sbiw	r30, 0x01	; 1
     c5c:	38 e1       	ldi	r19, 0x18	; 24
     c5e:	30 83       	st	Z, r19
     c60:	31 97       	sbiw	r30, 0x01	; 1
     c62:	39 e1       	ldi	r19, 0x19	; 25
     c64:	30 83       	st	Z, r19
     c66:	31 97       	sbiw	r30, 0x01	; 1
     c68:	30 e2       	ldi	r19, 0x20	; 32
     c6a:	30 83       	st	Z, r19
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	31 e2       	ldi	r19, 0x21	; 33
     c70:	30 83       	st	Z, r19
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	20 83       	st	Z, r18
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	23 e2       	ldi	r18, 0x23	; 35
     c7a:	20 83       	st	Z, r18
     c7c:	31 97       	sbiw	r30, 0x01	; 1
     c7e:	40 83       	st	Z, r20
     c80:	31 97       	sbiw	r30, 0x01	; 1
     c82:	50 83       	st	Z, r21
     c84:	31 97       	sbiw	r30, 0x01	; 1
     c86:	26 e2       	ldi	r18, 0x26	; 38
     c88:	20 83       	st	Z, r18
     c8a:	31 97       	sbiw	r30, 0x01	; 1
     c8c:	27 e2       	ldi	r18, 0x27	; 39
     c8e:	20 83       	st	Z, r18
     c90:	31 97       	sbiw	r30, 0x01	; 1
     c92:	28 e2       	ldi	r18, 0x28	; 40
     c94:	20 83       	st	Z, r18
     c96:	31 97       	sbiw	r30, 0x01	; 1
     c98:	29 e2       	ldi	r18, 0x29	; 41
     c9a:	20 83       	st	Z, r18
     c9c:	31 97       	sbiw	r30, 0x01	; 1
     c9e:	20 e3       	ldi	r18, 0x30	; 48
     ca0:	20 83       	st	Z, r18
     ca2:	31 97       	sbiw	r30, 0x01	; 1
     ca4:	21 e3       	ldi	r18, 0x31	; 49
     ca6:	20 83       	st	Z, r18
     ca8:	89 97       	sbiw	r24, 0x29	; 41
     caa:	08 95       	ret

00000cac <xPortStartScheduler>:
     cac:	88 ee       	ldi	r24, 0xE8	; 232
     cae:	93 e0       	ldi	r25, 0x03	; 3
     cb0:	a0 e0       	ldi	r26, 0x00	; 0
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <portTickRateHz>
     cb8:	90 93 5c 07 	sts	0x075C, r25	; 0x80075c <portTickRateHz+0x1>
     cbc:	a0 93 5d 07 	sts	0x075D, r26	; 0x80075d <portTickRateHz+0x2>
     cc0:	b0 93 5e 07 	sts	0x075E, r27	; 0x80075e <portTickRateHz+0x3>
     cc4:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <ticksRemainingInSec>
     cc8:	90 93 60 07 	sts	0x0760, r25	; 0x800760 <ticksRemainingInSec+0x1>
     ccc:	a0 93 61 07 	sts	0x0761, r26	; 0x800761 <ticksRemainingInSec+0x2>
     cd0:	b0 93 62 07 	sts	0x0762, r27	; 0x800762 <ticksRemainingInSec+0x3>
     cd4:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     cd8:	89 ef       	ldi	r24, 0xF9	; 249
     cda:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     cde:	8b e0       	ldi	r24, 0x0B	; 11
     ce0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
     ce4:	e1 e7       	ldi	r30, 0x71	; 113
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	82 60       	ori	r24, 0x02	; 2
     cec:	80 83       	st	Z, r24
     cee:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <pxCurrentTCB>
     cf2:	b0 91 f1 06 	lds	r27, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
     cf6:	cd 91       	ld	r28, X+
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	dd 91       	ld	r29, X+
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	ff 91       	pop	r31
     d00:	ef 91       	pop	r30
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	bf 91       	pop	r27
     d08:	af 91       	pop	r26
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	7f 91       	pop	r23
     d10:	6f 91       	pop	r22
     d12:	5f 91       	pop	r21
     d14:	4f 91       	pop	r20
     d16:	3f 91       	pop	r19
     d18:	2f 91       	pop	r18
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	ff 90       	pop	r15
     d20:	ef 90       	pop	r14
     d22:	df 90       	pop	r13
     d24:	cf 90       	pop	r12
     d26:	bf 90       	pop	r11
     d28:	af 90       	pop	r10
     d2a:	9f 90       	pop	r9
     d2c:	8f 90       	pop	r8
     d2e:	7f 90       	pop	r7
     d30:	6f 90       	pop	r6
     d32:	5f 90       	pop	r5
     d34:	4f 90       	pop	r4
     d36:	3f 90       	pop	r3
     d38:	2f 90       	pop	r2
     d3a:	1f 90       	pop	r1
     d3c:	0f 90       	pop	r0
     d3e:	0c be       	out	0x3c, r0	; 60
     d40:	0f 90       	pop	r0
     d42:	0b be       	out	0x3b, r0	; 59
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	0f 90       	pop	r0
     d4a:	08 95       	ret
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	08 95       	ret

00000d50 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	0f 92       	push	r0
     d58:	0b b6       	in	r0, 0x3b	; 59
     d5a:	0f 92       	push	r0
     d5c:	0c b6       	in	r0, 0x3c	; 60
     d5e:	0f 92       	push	r0
     d60:	1f 92       	push	r1
     d62:	11 24       	eor	r1, r1
     d64:	2f 92       	push	r2
     d66:	3f 92       	push	r3
     d68:	4f 92       	push	r4
     d6a:	5f 92       	push	r5
     d6c:	6f 92       	push	r6
     d6e:	7f 92       	push	r7
     d70:	8f 92       	push	r8
     d72:	9f 92       	push	r9
     d74:	af 92       	push	r10
     d76:	bf 92       	push	r11
     d78:	cf 92       	push	r12
     d7a:	df 92       	push	r13
     d7c:	ef 92       	push	r14
     d7e:	ff 92       	push	r15
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	2f 93       	push	r18
     d86:	3f 93       	push	r19
     d88:	4f 93       	push	r20
     d8a:	5f 93       	push	r21
     d8c:	6f 93       	push	r22
     d8e:	7f 93       	push	r23
     d90:	8f 93       	push	r24
     d92:	9f 93       	push	r25
     d94:	af 93       	push	r26
     d96:	bf 93       	push	r27
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31
     da0:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <pxCurrentTCB>
     da4:	b0 91 f1 06 	lds	r27, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
     da8:	0d b6       	in	r0, 0x3d	; 61
     daa:	0d 92       	st	X+, r0
     dac:	0e b6       	in	r0, 0x3e	; 62
     dae:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     db0:	0e 94 09 18 	call	0x3012	; 0x3012 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     db4:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <pxCurrentTCB>
     db8:	b0 91 f1 06 	lds	r27, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
     dbc:	cd 91       	ld	r28, X+
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	dd 91       	ld	r29, X+
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	bf 91       	pop	r27
     dce:	af 91       	pop	r26
     dd0:	9f 91       	pop	r25
     dd2:	8f 91       	pop	r24
     dd4:	7f 91       	pop	r23
     dd6:	6f 91       	pop	r22
     dd8:	5f 91       	pop	r21
     dda:	4f 91       	pop	r20
     ddc:	3f 91       	pop	r19
     dde:	2f 91       	pop	r18
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	ff 90       	pop	r15
     de6:	ef 90       	pop	r14
     de8:	df 90       	pop	r13
     dea:	cf 90       	pop	r12
     dec:	bf 90       	pop	r11
     dee:	af 90       	pop	r10
     df0:	9f 90       	pop	r9
     df2:	8f 90       	pop	r8
     df4:	7f 90       	pop	r7
     df6:	6f 90       	pop	r6
     df8:	5f 90       	pop	r5
     dfa:	4f 90       	pop	r4
     dfc:	3f 90       	pop	r3
     dfe:	2f 90       	pop	r2
     e00:	1f 90       	pop	r1
     e02:	0f 90       	pop	r0
     e04:	0c be       	out	0x3c, r0	; 60
     e06:	0f 90       	pop	r0
     e08:	0b be       	out	0x3b, r0	; 59
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
     e10:	08 95       	ret

00000e12 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     e12:	0f 92       	push	r0
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	0f 92       	push	r0
     e1a:	0b b6       	in	r0, 0x3b	; 59
     e1c:	0f 92       	push	r0
     e1e:	0c b6       	in	r0, 0x3c	; 60
     e20:	0f 92       	push	r0
     e22:	1f 92       	push	r1
     e24:	11 24       	eor	r1, r1
     e26:	2f 92       	push	r2
     e28:	3f 92       	push	r3
     e2a:	4f 92       	push	r4
     e2c:	5f 92       	push	r5
     e2e:	6f 92       	push	r6
     e30:	7f 92       	push	r7
     e32:	8f 92       	push	r8
     e34:	9f 92       	push	r9
     e36:	af 92       	push	r10
     e38:	bf 92       	push	r11
     e3a:	cf 92       	push	r12
     e3c:	df 92       	push	r13
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	2f 93       	push	r18
     e48:	3f 93       	push	r19
     e4a:	4f 93       	push	r20
     e4c:	5f 93       	push	r21
     e4e:	6f 93       	push	r22
     e50:	7f 93       	push	r23
     e52:	8f 93       	push	r24
     e54:	9f 93       	push	r25
     e56:	af 93       	push	r26
     e58:	bf 93       	push	r27
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
     e62:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <pxCurrentTCB>
     e66:	b0 91 f1 06 	lds	r27, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
     e6a:	0d b6       	in	r0, 0x3d	; 61
     e6c:	0d 92       	st	X+, r0
     e6e:	0e b6       	in	r0, 0x3e	; 62
     e70:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
     e72:	13 be       	out	0x33, r1	; 51
	// start mark - check for start of interrupt - for debugging only
	PORTD |=  _BV(PORTD7);				// Ping IO line.
#endif

#if !defined(portUSE_TIMER2_RTC)
	if (--ticksRemainingInSec == 0)
     e74:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <ticksRemainingInSec>
     e78:	90 91 60 07 	lds	r25, 0x0760	; 0x800760 <ticksRemainingInSec+0x1>
     e7c:	a0 91 61 07 	lds	r26, 0x0761	; 0x800761 <ticksRemainingInSec+0x2>
     e80:	b0 91 62 07 	lds	r27, 0x0762	; 0x800762 <ticksRemainingInSec+0x3>
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	a1 09       	sbc	r26, r1
     e88:	b1 09       	sbc	r27, r1
     e8a:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <ticksRemainingInSec>
     e8e:	90 93 60 07 	sts	0x0760, r25	; 0x800760 <ticksRemainingInSec+0x1>
     e92:	a0 93 61 07 	sts	0x0761, r26	; 0x800761 <ticksRemainingInSec+0x2>
     e96:	b0 93 62 07 	sts	0x0762, r27	; 0x800762 <ticksRemainingInSec+0x3>
     e9a:	89 2b       	or	r24, r25
     e9c:	8a 2b       	or	r24, r26
     e9e:	8b 2b       	or	r24, r27
     ea0:	89 f4       	brne	.+34     	; 0xec4 <vPortYieldFromTick+0xb2>
	{
		system_tick();
     ea2:	55 de       	rcall	.-854    	; 0xb4e <system_tick>
		ticksRemainingInSec = portTickRateHz;
     ea4:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <portTickRateHz>
     ea8:	90 91 5c 07 	lds	r25, 0x075C	; 0x80075c <portTickRateHz+0x1>
     eac:	a0 91 5d 07 	lds	r26, 0x075D	; 0x80075d <portTickRateHz+0x2>
     eb0:	b0 91 5e 07 	lds	r27, 0x075E	; 0x80075e <portTickRateHz+0x3>
     eb4:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <ticksRemainingInSec>
     eb8:	90 93 60 07 	sts	0x0760, r25	; 0x800760 <ticksRemainingInSec+0x1>
     ebc:	a0 93 61 07 	sts	0x0761, r26	; 0x800761 <ticksRemainingInSec+0x2>
     ec0:	b0 93 62 07 	sts	0x0762, r27	; 0x800762 <ticksRemainingInSec+0x3>
	}
#endif

	if( xTaskIncrementTick() != pdFALSE )
     ec4:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <xTaskIncrementTick>
     ec8:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     eca:	0e 94 09 18 	call	0x3012	; 0x3012 <vTaskSwitchContext>
#if defined(DEBUG_PING)
	// end mark - check for end of interrupt - for debugging only
	PORTD &= ~_BV(PORTD7);
#endif

	portRESTORE_CONTEXT();
     ece:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <pxCurrentTCB>
     ed2:	b0 91 f1 06 	lds	r27, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
     ed6:	cd 91       	ld	r28, X+
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	dd 91       	ld	r29, X+
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	ff 91       	pop	r31
     ee0:	ef 91       	pop	r30
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	bf 91       	pop	r27
     ee8:	af 91       	pop	r26
     eea:	9f 91       	pop	r25
     eec:	8f 91       	pop	r24
     eee:	7f 91       	pop	r23
     ef0:	6f 91       	pop	r22
     ef2:	5f 91       	pop	r21
     ef4:	4f 91       	pop	r20
     ef6:	3f 91       	pop	r19
     ef8:	2f 91       	pop	r18
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
     f02:	df 90       	pop	r13
     f04:	cf 90       	pop	r12
     f06:	bf 90       	pop	r11
     f08:	af 90       	pop	r10
     f0a:	9f 90       	pop	r9
     f0c:	8f 90       	pop	r8
     f0e:	7f 90       	pop	r7
     f10:	6f 90       	pop	r6
     f12:	5f 90       	pop	r5
     f14:	4f 90       	pop	r4
     f16:	3f 90       	pop	r3
     f18:	2f 90       	pop	r2
     f1a:	1f 90       	pop	r1
     f1c:	0f 90       	pop	r0
     f1e:	0c be       	out	0x3c, r0	; 60
     f20:	0f 90       	pop	r0
     f22:	0b be       	out	0x3b, r0	; 59
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
     f2a:	08 95       	ret

00000f2c <__vector_32>:
	 * count is incremented after the context is saved.
	 */
	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
     f2c:	72 df       	rcall	.-284    	; 0xe12 <vPortYieldFromTick>
		__asm__ __volatile__ ( "reti" );
     f2e:	18 95       	reti

00000f30 <setAnalogMode>:
// For example: if (getMode() == MODE_8_BIT) ...

inline uint8_t getAnalogMode(void)
{
	return (ADMUX >> ADLAR) & 1;
}
     f30:	81 11       	cpse	r24, r1
     f32:	06 c0       	rjmp	.+12     	; 0xf40 <setAnalogMode+0x10>
     f34:	ec e7       	ldi	r30, 0x7C	; 124
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	8f 7d       	andi	r24, 0xDF	; 223
     f3c:	80 83       	st	Z, r24
     f3e:	08 95       	ret
     f40:	ec e7       	ldi	r30, 0x7C	; 124
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	80 62       	ori	r24, 0x20	; 32
     f48:	80 83       	st	Z, r24
     f4a:	08 95       	ret

00000f4c <analogIsConverting>:

// returns 1 if the ADC is in the middle of an conversion, otherwise
// returns 0
inline uint8_t analogIsConverting(void)
{
	return (ADCSRA >> ADSC) & 1;
     f4c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
}
     f50:	86 fb       	bst	r24, 6
     f52:	88 27       	eor	r24, r24
     f54:	80 f9       	bld	r24, 0
     f56:	08 95       	ret

00000f58 <startAnalogConversion>:
//  Orangutan SVP.

inline void startAnalogConversion(uint8_t channel, uint8_t use_internal_reference)
{
	// Channel numbers greater than 15 on 328p or 1284p or 31 on 2560 are invalid.
	if (channel > 0x1F)
     f58:	80 32       	cpi	r24, 0x20	; 32
     f5a:	18 f5       	brcc	.+70     	; 0xfa2 <startAnalogConversion+0x4a>
	{
		return;
	}

	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
     f5c:	97 e8       	ldi	r25, 0x87	; 135
     f5e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	// to channel 0, which can affect the ADC charge capacitor.  For example, if you have a
	// high output impedance voltage on channel 1 and a low output impedance voltage on channel
	// 0, the voltage on channel 0 be briefly applied to the ADC capacitor before every conversion,
	// which could prevent the capacitor from settling to the voltage on channel 1, even over
	// many reads.
	uint8_t tempADMUX = ADMUX;
     f62:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	tempADMUX |= _BV(REFS0);		// Use external capacitor on ARef
	if(use_internal_reference)		// Note: internal reference should NOT be used on devices
     f66:	66 23       	and	r22, r22
     f68:	11 f0       	breq	.+4      	; 0xf6e <startAnalogConversion+0x16>
	{								//  where AREF is connected to an external voltage!
		// use the internal voltage reference
		tempADMUX |= _BV(REFS1);	// Internal reference: 1.1 V on ATmega48/168/328; 2.56 V on ATmega324/644/1284
     f6a:	90 6c       	ori	r25, 0xC0	; 192
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <startAnalogConversion+0x1a>
     f6e:	9f 77       	andi	r25, 0x7F	; 127
	}
	else
	{
		// use AVcc as a reference
		tempADMUX &= ~_BV(REFS1);	// External reference: on AVcc
     f70:	90 64       	ori	r25, 0x40	; 64
	}

	tempADMUX &= ~0x1F;		 // clear channel selection bits of ADMUX
     f72:	90 7e       	andi	r25, 0xE0	; 224
	#ifdef MUX5
	if (channel > 7) {
     f74:	88 30       	cpi	r24, 0x08	; 8
     f76:	40 f0       	brcs	.+16     	; 0xf88 <startAnalogConversion+0x30>
		ADCSRB |= _BV(MUX5);
     f78:	eb e7       	ldi	r30, 0x7B	; 123
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	20 81       	ld	r18, Z
     f7e:	28 60       	ori	r18, 0x08	; 8
     f80:	20 83       	st	Z, r18
		tempADMUX |= channel - 8; 
     f82:	88 50       	subi	r24, 0x08	; 8
     f84:	89 2b       	or	r24, r25
     f86:	06 c0       	rjmp	.+12     	; 0xf94 <startAnalogConversion+0x3c>
		} else {
		ADCSRB &= ~(_BV(MUX5));
     f88:	eb e7       	ldi	r30, 0x7B	; 123
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	20 81       	ld	r18, Z
     f8e:	27 7f       	andi	r18, 0xF7	; 247
     f90:	20 83       	st	Z, r18
		tempADMUX |= channel;
     f92:	89 2b       	or	r24, r25
	}
	#endif
	
	   // we only get this far if channel is less than 32
	ADMUX = tempADMUX;
     f94:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA |= _BV(ADSC); // start the conversion
     f98:	ea e7       	ldi	r30, 0x7A	; 122
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	80 64       	ori	r24, 0x40	; 64
     fa0:	80 83       	st	Z, r24
     fa2:	08 95       	ret

00000fa4 <analogConversionResult>:
// MODE_8_BIT and MODE_10_BIT:
// For example: if (getMode() == MODE_8_BIT) ...

inline uint8_t getAnalogMode(void)
{
	return (ADMUX >> ADLAR) & 1;
     fa4:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
}

// returns the result of the previous ADC conversion.
inline uint16_t analogConversionResult(void)
{
	if (getAnalogMode())				// if left-adjusted (i.e. 8-bit mode)
     fa8:	85 ff       	sbrs	r24, 5
     faa:	04 c0       	rjmp	.+8      	; 0xfb4 <analogConversionResult+0x10>
	{
		return (uint16_t) ADCH;			// 8-bit result
     fac:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	08 95       	ret
	}
	else
	{
		return ADC;				// 10-bit result
     fb4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     fb8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	}
}
     fbc:	08 95       	ret

00000fbe <vApplicationIdleHook>:
	// The corresponding PIN Register bit will always read as zero when this bit is set. When an
	// analogue signal is applied to the ADC7..0 pin and the digital input from this pin is not needed, this
	// bit should be written logic one to reduce power consumption in the digital input buffer.

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
	DIDR0 = 0xFF;
     fbe:	8f ef       	ldi	r24, 0xFF	; 255
     fc0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xFF;
     fc4:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	// When the ACD bit is written logic one, the power to the Analogue Comparator is switched off.
	// This bit can be set at any time to turn off the Analogue Comparator.
	// This will reduce power consumption in Active and Idle mode.
	// When changing the ACD bit, the Analogue Comparator Interrupt must be disabled by clearing the ACIE bit in ACSR.
	// Otherwise an interrupt can occur when the ACD bit is changed.
	ACSR &= ~_BV(ACIE);
     fc8:	80 b7       	in	r24, 0x30	; 48
     fca:	87 7f       	andi	r24, 0xF7	; 247
     fcc:	80 bf       	out	0x30, r24	; 48
	ACSR |=  _BV(ACD);
     fce:	80 b7       	in	r24, 0x30	; 48
     fd0:	80 68       	ori	r24, 0x80	; 128
     fd2:	80 bf       	out	0x30, r24	; 48
	// SLEEP_MODE_PWR_DOWN     _BV(SM1)
	// SLEEP_MODE_PWR_SAVE     (_BV(SM0) | _BV(SM1))
	// SLEEP_MODE_STANDBY      (_BV(SM1) | _BV(SM2))
	// SLEEP_MODE_EXT_STANDBY  (_BV(SM0) | _BV(SM1) | _BV(SM2))

	set_sleep_mode( SLEEP_MODE_IDLE );
     fd4:	83 b7       	in	r24, 0x33	; 51
     fd6:	81 7f       	andi	r24, 0xF1	; 241
     fd8:	83 bf       	out	0x33, r24	; 51

	portENTER_CRITICAL();
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	0f 92       	push	r0
	sleep_enable();
     fe0:	83 b7       	in	r24, 0x33	; 51
     fe2:	81 60       	ori	r24, 0x01	; 1
     fe4:	83 bf       	out	0x33, r24	; 51

#if defined(BODS) && defined(BODSE) // only if there is support to disable the BOD.
	sleep_bod_disable();
#endif

	portEXIT_CRITICAL();
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
	sleep_cpu();		// good night.
     fea:	88 95       	sleep

	sleep_reset();		// reset the sleep_mode() faster than sleep_disable();
     fec:	13 be       	out	0x33, r1	; 51
     fee:	08 95       	ret

00000ff0 <vApplicationMallocFailedHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
     ff0:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     ff2:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ff4:	00 00       	nop
	for(;;)
	{
		_delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
     ff6:	1f 9a       	sbi	0x03, 7	; 3
     ff8:	fd cf       	rjmp	.-6      	; 0xff4 <vApplicationMallocFailedHook+0x4>

00000ffa <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
     ffa:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     ffc:	2f 9a       	sbi	0x05, 7	; 5
     ffe:	00 c0       	rjmp	.+0      	; 0x1000 <vApplicationStackOverflowHook+0x6>
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    1000:	1f 9a       	sbi	0x03, 7	; 3
    1002:	fd cf       	rjmp	.-6      	; 0xffe <vApplicationStackOverflowHook+0x4>

00001004 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1004:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1006:	03 96       	adiw	r24, 0x03	; 3
    1008:	92 83       	std	Z+2, r25	; 0x02
    100a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    100c:	4f ef       	ldi	r20, 0xFF	; 255
    100e:	5f ef       	ldi	r21, 0xFF	; 255
    1010:	ba 01       	movw	r22, r20
    1012:	43 83       	std	Z+3, r20	; 0x03
    1014:	54 83       	std	Z+4, r21	; 0x04
    1016:	65 83       	std	Z+5, r22	; 0x05
    1018:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    101a:	90 87       	std	Z+8, r25	; 0x08
    101c:	87 83       	std	Z+7, r24	; 0x07
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    101e:	92 87       	std	Z+10, r25	; 0x0a
    1020:	81 87       	std	Z+9, r24	; 0x09

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1022:	10 82       	st	Z, r1
    1024:	08 95       	ret

00001026 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1026:	fc 01       	movw	r30, r24
    1028:	13 86       	std	Z+11, r1	; 0x0b
    102a:	12 86       	std	Z+10, r1	; 0x0a
    102c:	08 95       	ret

0000102e <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	9c 01       	movw	r18, r24
    1034:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1036:	dc 01       	movw	r26, r24
    1038:	11 96       	adiw	r26, 0x01	; 1
    103a:	cd 91       	ld	r28, X+
    103c:	dc 91       	ld	r29, X
    103e:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1040:	d5 83       	std	Z+5, r29	; 0x05
    1042:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1044:	8e 81       	ldd	r24, Y+6	; 0x06
    1046:	9f 81       	ldd	r25, Y+7	; 0x07
    1048:	97 83       	std	Z+7, r25	; 0x07
    104a:	86 83       	std	Z+6, r24	; 0x06

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    104c:	8e 81       	ldd	r24, Y+6	; 0x06
    104e:	9f 81       	ldd	r25, Y+7	; 0x07
    1050:	dc 01       	movw	r26, r24
    1052:	15 96       	adiw	r26, 0x05	; 5
    1054:	7c 93       	st	X, r23
    1056:	6e 93       	st	-X, r22
    1058:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxPrevious = pxNewListItem;
    105a:	7f 83       	std	Y+7, r23	; 0x07
    105c:	6e 83       	std	Y+6, r22	; 0x06

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    105e:	33 87       	std	Z+11, r19	; 0x0b
    1060:	22 87       	std	Z+10, r18	; 0x0a

	( pxList->uxNumberOfItems )++;
    1062:	f9 01       	movw	r30, r18
    1064:	80 81       	ld	r24, Z
    1066:	8f 5f       	subi	r24, 0xFF	; 255
    1068:	80 83       	st	Z, r24
}
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	08 95       	ret

00001070 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    107a:	08 81       	ld	r16, Y
    107c:	19 81       	ldd	r17, Y+1	; 0x01
    107e:	2a 81       	ldd	r18, Y+2	; 0x02
    1080:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1082:	0f 3f       	cpi	r16, 0xFF	; 255
    1084:	4f ef       	ldi	r20, 0xFF	; 255
    1086:	14 07       	cpc	r17, r20
    1088:	24 07       	cpc	r18, r20
    108a:	34 07       	cpc	r19, r20
    108c:	21 f4       	brne	.+8      	; 0x1096 <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    108e:	fc 01       	movw	r30, r24
    1090:	a1 85       	ldd	r26, Z+9	; 0x09
    1092:	b2 85       	ldd	r27, Z+10	; 0x0a
    1094:	11 c0       	rjmp	.+34     	; 0x10b8 <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1096:	dc 01       	movw	r26, r24
    1098:	13 96       	adiw	r26, 0x03	; 3
    109a:	01 c0       	rjmp	.+2      	; 0x109e <vListInsert+0x2e>
    109c:	df 01       	movw	r26, r30
    109e:	14 96       	adiw	r26, 0x04	; 4
    10a0:	ed 91       	ld	r30, X+
    10a2:	fc 91       	ld	r31, X
    10a4:	15 97       	sbiw	r26, 0x05	; 5
    10a6:	40 81       	ld	r20, Z
    10a8:	51 81       	ldd	r21, Z+1	; 0x01
    10aa:	62 81       	ldd	r22, Z+2	; 0x02
    10ac:	73 81       	ldd	r23, Z+3	; 0x03
    10ae:	04 17       	cp	r16, r20
    10b0:	15 07       	cpc	r17, r21
    10b2:	26 07       	cpc	r18, r22
    10b4:	37 07       	cpc	r19, r23
    10b6:	90 f7       	brcc	.-28     	; 0x109c <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    10b8:	14 96       	adiw	r26, 0x04	; 4
    10ba:	ed 91       	ld	r30, X+
    10bc:	fc 91       	ld	r31, X
    10be:	15 97       	sbiw	r26, 0x05	; 5
    10c0:	fd 83       	std	Y+5, r31	; 0x05
    10c2:	ec 83       	std	Y+4, r30	; 0x04
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    10c4:	d7 83       	std	Z+7, r29	; 0x07
    10c6:	c6 83       	std	Z+6, r28	; 0x06
	pxNewListItem->pxPrevious = pxIterator;
    10c8:	bf 83       	std	Y+7, r27	; 0x07
    10ca:	ae 83       	std	Y+6, r26	; 0x06
	pxIterator->pxNext = pxNewListItem;
    10cc:	15 96       	adiw	r26, 0x05	; 5
    10ce:	dc 93       	st	X, r29
    10d0:	ce 93       	st	-X, r28
    10d2:	14 97       	sbiw	r26, 0x04	; 4

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    10d4:	9b 87       	std	Y+11, r25	; 0x0b
    10d6:	8a 87       	std	Y+10, r24	; 0x0a

	( pxList->uxNumberOfItems )++;
    10d8:	fc 01       	movw	r30, r24
    10da:	20 81       	ld	r18, Z
    10dc:	2f 5f       	subi	r18, 0xFF	; 255
    10de:	20 83       	st	Z, r18
}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	08 95       	ret

000010ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    10f0:	a2 85       	ldd	r26, Z+10	; 0x0a
    10f2:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    10f4:	c4 81       	ldd	r28, Z+4	; 0x04
    10f6:	d5 81       	ldd	r29, Z+5	; 0x05
    10f8:	86 81       	ldd	r24, Z+6	; 0x06
    10fa:	97 81       	ldd	r25, Z+7	; 0x07
    10fc:	9f 83       	std	Y+7, r25	; 0x07
    10fe:	8e 83       	std	Y+6, r24	; 0x06
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1100:	c6 81       	ldd	r28, Z+6	; 0x06
    1102:	d7 81       	ldd	r29, Z+7	; 0x07
    1104:	84 81       	ldd	r24, Z+4	; 0x04
    1106:	95 81       	ldd	r25, Z+5	; 0x05
    1108:	9d 83       	std	Y+5, r25	; 0x05
    110a:	8c 83       	std	Y+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    110c:	11 96       	adiw	r26, 0x01	; 1
    110e:	8d 91       	ld	r24, X+
    1110:	9c 91       	ld	r25, X
    1112:	12 97       	sbiw	r26, 0x02	; 2
    1114:	e8 17       	cp	r30, r24
    1116:	f9 07       	cpc	r31, r25
    1118:	31 f4       	brne	.+12     	; 0x1126 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    111a:	86 81       	ldd	r24, Z+6	; 0x06
    111c:	97 81       	ldd	r25, Z+7	; 0x07
    111e:	12 96       	adiw	r26, 0x02	; 2
    1120:	9c 93       	st	X, r25
    1122:	8e 93       	st	-X, r24
    1124:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1126:	13 86       	std	Z+11, r1	; 0x0b
    1128:	12 86       	std	Z+10, r1	; 0x0a
	( pxList->uxNumberOfItems )--;
    112a:	8c 91       	ld	r24, X
    112c:	81 50       	subi	r24, 0x01	; 1
    112e:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
    1130:	8c 91       	ld	r24, X
}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	0f 92       	push	r0
    113e:	fc 01       	movw	r30, r24
    1140:	96 8d       	ldd	r25, Z+30	; 0x1e
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	91 11       	cpse	r25, r1
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	08 95       	ret

0000114e <prvCopyDataToQueue>:
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	ec 01       	movw	r28, r24
    1158:	04 2f       	mov	r16, r20
    115a:	1e 8d       	ldd	r17, Y+30	; 0x1e
    115c:	48 a1       	ldd	r20, Y+32	; 0x20
    115e:	41 11       	cpse	r20, r1
    1160:	0c c0       	rjmp	.+24     	; 0x117a <prvCopyDataToQueue+0x2c>
    1162:	88 81       	ld	r24, Y
    1164:	99 81       	ldd	r25, Y+1	; 0x01
    1166:	89 2b       	or	r24, r25
    1168:	09 f0       	breq	.+2      	; 0x116c <prvCopyDataToQueue+0x1e>
    116a:	42 c0       	rjmp	.+132    	; 0x11f0 <prvCopyDataToQueue+0xa2>
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	9b 81       	ldd	r25, Y+3	; 0x03
    1170:	0e 94 2a 1a 	call	0x3454	; 0x3454 <xTaskPriorityDisinherit>
    1174:	1b 82       	std	Y+3, r1	; 0x03
    1176:	1a 82       	std	Y+2, r1	; 0x02
    1178:	42 c0       	rjmp	.+132    	; 0x11fe <prvCopyDataToQueue+0xb0>
    117a:	01 11       	cpse	r16, r1
    117c:	17 c0       	rjmp	.+46     	; 0x11ac <prvCopyDataToQueue+0x5e>
    117e:	50 e0       	ldi	r21, 0x00	; 0
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	9d 81       	ldd	r25, Y+5	; 0x05
    1184:	0e 94 7e 5b 	call	0xb6fc	; 0xb6fc <memcpy>
    1188:	28 a1       	ldd	r18, Y+32	; 0x20
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	9d 81       	ldd	r25, Y+5	; 0x05
    118e:	82 0f       	add	r24, r18
    1190:	91 1d       	adc	r25, r1
    1192:	9d 83       	std	Y+5, r25	; 0x05
    1194:	8c 83       	std	Y+4, r24	; 0x04
    1196:	2a 81       	ldd	r18, Y+2	; 0x02
    1198:	3b 81       	ldd	r19, Y+3	; 0x03
    119a:	82 17       	cp	r24, r18
    119c:	93 07       	cpc	r25, r19
    119e:	50 f1       	brcs	.+84     	; 0x11f4 <prvCopyDataToQueue+0xa6>
    11a0:	88 81       	ld	r24, Y
    11a2:	99 81       	ldd	r25, Y+1	; 0x01
    11a4:	9d 83       	std	Y+5, r25	; 0x05
    11a6:	8c 83       	std	Y+4, r24	; 0x04
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	29 c0       	rjmp	.+82     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11ac:	50 e0       	ldi	r21, 0x00	; 0
    11ae:	8e 81       	ldd	r24, Y+6	; 0x06
    11b0:	9f 81       	ldd	r25, Y+7	; 0x07
    11b2:	0e 94 7e 5b 	call	0xb6fc	; 0xb6fc <memcpy>
    11b6:	88 a1       	ldd	r24, Y+32	; 0x20
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	91 95       	neg	r25
    11bc:	81 95       	neg	r24
    11be:	91 09       	sbc	r25, r1
    11c0:	2e 81       	ldd	r18, Y+6	; 0x06
    11c2:	3f 81       	ldd	r19, Y+7	; 0x07
    11c4:	28 0f       	add	r18, r24
    11c6:	39 1f       	adc	r19, r25
    11c8:	3f 83       	std	Y+7, r19	; 0x07
    11ca:	2e 83       	std	Y+6, r18	; 0x06
    11cc:	48 81       	ld	r20, Y
    11ce:	59 81       	ldd	r21, Y+1	; 0x01
    11d0:	24 17       	cp	r18, r20
    11d2:	35 07       	cpc	r19, r21
    11d4:	30 f4       	brcc	.+12     	; 0x11e2 <prvCopyDataToQueue+0x94>
    11d6:	2a 81       	ldd	r18, Y+2	; 0x02
    11d8:	3b 81       	ldd	r19, Y+3	; 0x03
    11da:	82 0f       	add	r24, r18
    11dc:	93 1f       	adc	r25, r19
    11de:	9f 83       	std	Y+7, r25	; 0x07
    11e0:	8e 83       	std	Y+6, r24	; 0x06
    11e2:	02 30       	cpi	r16, 0x02	; 2
    11e4:	49 f4       	brne	.+18     	; 0x11f8 <prvCopyDataToQueue+0xaa>
    11e6:	11 23       	and	r17, r17
    11e8:	49 f0       	breq	.+18     	; 0x11fc <prvCopyDataToQueue+0xae>
    11ea:	11 50       	subi	r17, 0x01	; 1
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	07 c0       	rjmp	.+14     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	05 c0       	rjmp	.+10     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <prvCopyDataToQueue+0xb0>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	1f 5f       	subi	r17, 0xFF	; 255
    1200:	1e 8f       	std	Y+30, r17	; 0x1e
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	08 95       	ret

0000120c <prvCopyDataFromQueue>:
    120c:	fc 01       	movw	r30, r24
    120e:	40 a1       	ldd	r20, Z+32	; 0x20
    1210:	44 23       	and	r20, r20
    1212:	a9 f0       	breq	.+42     	; 0x123e <prvCopyDataFromQueue+0x32>
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	26 81       	ldd	r18, Z+6	; 0x06
    1218:	37 81       	ldd	r19, Z+7	; 0x07
    121a:	24 0f       	add	r18, r20
    121c:	35 1f       	adc	r19, r21
    121e:	37 83       	std	Z+7, r19	; 0x07
    1220:	26 83       	std	Z+6, r18	; 0x06
    1222:	82 81       	ldd	r24, Z+2	; 0x02
    1224:	93 81       	ldd	r25, Z+3	; 0x03
    1226:	28 17       	cp	r18, r24
    1228:	39 07       	cpc	r19, r25
    122a:	20 f0       	brcs	.+8      	; 0x1234 <prvCopyDataFromQueue+0x28>
    122c:	80 81       	ld	r24, Z
    122e:	91 81       	ldd	r25, Z+1	; 0x01
    1230:	97 83       	std	Z+7, r25	; 0x07
    1232:	86 83       	std	Z+6, r24	; 0x06
    1234:	cb 01       	movw	r24, r22
    1236:	66 81       	ldd	r22, Z+6	; 0x06
    1238:	77 81       	ldd	r23, Z+7	; 0x07
    123a:	0c 94 7e 5b 	jmp	0xb6fc	; 0xb6fc <memcpy>
    123e:	08 95       	ret

00001240 <prvUnlockQueue>:
    1240:	ef 92       	push	r14
    1242:	ff 92       	push	r15
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	8c 01       	movw	r16, r24
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	0f 92       	push	r0
    1252:	fc 01       	movw	r30, r24
    1254:	c2 a1       	ldd	r28, Z+34	; 0x22
    1256:	1c 16       	cp	r1, r28
    1258:	ac f4       	brge	.+42     	; 0x1284 <prvUnlockQueue+0x44>
    125a:	83 89       	ldd	r24, Z+19	; 0x13
    125c:	81 11       	cpse	r24, r1
    125e:	06 c0       	rjmp	.+12     	; 0x126c <prvUnlockQueue+0x2c>
    1260:	11 c0       	rjmp	.+34     	; 0x1284 <prvUnlockQueue+0x44>
    1262:	f8 01       	movw	r30, r16
    1264:	83 89       	ldd	r24, Z+19	; 0x13
    1266:	81 11       	cpse	r24, r1
    1268:	05 c0       	rjmp	.+10     	; 0x1274 <prvUnlockQueue+0x34>
    126a:	0c c0       	rjmp	.+24     	; 0x1284 <prvUnlockQueue+0x44>
    126c:	78 01       	movw	r14, r16
    126e:	f3 e1       	ldi	r31, 0x13	; 19
    1270:	ef 0e       	add	r14, r31
    1272:	f1 1c       	adc	r15, r1
    1274:	c7 01       	movw	r24, r14
    1276:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    127a:	81 11       	cpse	r24, r1
    127c:	0e 94 aa 19 	call	0x3354	; 0x3354 <vTaskMissedYield>
    1280:	c1 50       	subi	r28, 0x01	; 1
    1282:	79 f7       	brne	.-34     	; 0x1262 <prvUnlockQueue+0x22>
    1284:	8f ef       	ldi	r24, 0xFF	; 255
    1286:	f8 01       	movw	r30, r16
    1288:	82 a3       	std	Z+34, r24	; 0x22
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	0f 92       	push	r0
    1294:	c1 a1       	ldd	r28, Z+33	; 0x21
    1296:	1c 16       	cp	r1, r28
    1298:	ac f4       	brge	.+42     	; 0x12c4 <prvUnlockQueue+0x84>
    129a:	80 85       	ldd	r24, Z+8	; 0x08
    129c:	81 11       	cpse	r24, r1
    129e:	06 c0       	rjmp	.+12     	; 0x12ac <prvUnlockQueue+0x6c>
    12a0:	11 c0       	rjmp	.+34     	; 0x12c4 <prvUnlockQueue+0x84>
    12a2:	f8 01       	movw	r30, r16
    12a4:	80 85       	ldd	r24, Z+8	; 0x08
    12a6:	81 11       	cpse	r24, r1
    12a8:	05 c0       	rjmp	.+10     	; 0x12b4 <prvUnlockQueue+0x74>
    12aa:	0c c0       	rjmp	.+24     	; 0x12c4 <prvUnlockQueue+0x84>
    12ac:	78 01       	movw	r14, r16
    12ae:	f8 e0       	ldi	r31, 0x08	; 8
    12b0:	ef 0e       	add	r14, r31
    12b2:	f1 1c       	adc	r15, r1
    12b4:	c7 01       	movw	r24, r14
    12b6:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    12ba:	81 11       	cpse	r24, r1
    12bc:	0e 94 aa 19 	call	0x3354	; 0x3354 <vTaskMissedYield>
    12c0:	c1 50       	subi	r28, 0x01	; 1
    12c2:	79 f7       	brne	.-34     	; 0x12a2 <prvUnlockQueue+0x62>
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	f8 01       	movw	r30, r16
    12c8:	81 a3       	std	Z+33, r24	; 0x21
    12ca:	0f 90       	pop	r0
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	ff 90       	pop	r15
    12d6:	ef 90       	pop	r14
    12d8:	08 95       	ret

000012da <xQueueGenericReset>:
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	ec 01       	movw	r28, r24
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	0f 92       	push	r0
    12e6:	48 81       	ld	r20, Y
    12e8:	59 81       	ldd	r21, Y+1	; 0x01
    12ea:	28 a1       	ldd	r18, Y+32	; 0x20
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	7f 8d       	ldd	r23, Y+31	; 0x1f
    12f0:	72 9f       	mul	r23, r18
    12f2:	c0 01       	movw	r24, r0
    12f4:	73 9f       	mul	r23, r19
    12f6:	90 0d       	add	r25, r0
    12f8:	11 24       	eor	r1, r1
    12fa:	fa 01       	movw	r30, r20
    12fc:	e8 0f       	add	r30, r24
    12fe:	f9 1f       	adc	r31, r25
    1300:	fb 83       	std	Y+3, r31	; 0x03
    1302:	ea 83       	std	Y+2, r30	; 0x02
    1304:	1e 8e       	std	Y+30, r1	; 0x1e
    1306:	5d 83       	std	Y+5, r21	; 0x05
    1308:	4c 83       	std	Y+4, r20	; 0x04
    130a:	82 1b       	sub	r24, r18
    130c:	93 0b       	sbc	r25, r19
    130e:	84 0f       	add	r24, r20
    1310:	95 1f       	adc	r25, r21
    1312:	9f 83       	std	Y+7, r25	; 0x07
    1314:	8e 83       	std	Y+6, r24	; 0x06
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	89 a3       	std	Y+33, r24	; 0x21
    131a:	8a a3       	std	Y+34, r24	; 0x22
    131c:	61 11       	cpse	r22, r1
    131e:	0b c0       	rjmp	.+22     	; 0x1336 <xQueueGenericReset+0x5c>
    1320:	88 85       	ldd	r24, Y+8	; 0x08
    1322:	88 23       	and	r24, r24
    1324:	71 f0       	breq	.+28     	; 0x1342 <xQueueGenericReset+0x68>
    1326:	ce 01       	movw	r24, r28
    1328:	08 96       	adiw	r24, 0x08	; 8
    132a:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    132e:	88 23       	and	r24, r24
    1330:	41 f0       	breq	.+16     	; 0x1342 <xQueueGenericReset+0x68>
    1332:	0e dd       	rcall	.-1508   	; 0xd50 <vPortYield>
    1334:	06 c0       	rjmp	.+12     	; 0x1342 <xQueueGenericReset+0x68>
    1336:	ce 01       	movw	r24, r28
    1338:	08 96       	adiw	r24, 0x08	; 8
    133a:	64 de       	rcall	.-824    	; 0x1004 <vListInitialise>
    133c:	ce 01       	movw	r24, r28
    133e:	43 96       	adiw	r24, 0x13	; 19
    1340:	61 de       	rcall	.-830    	; 0x1004 <vListInitialise>
    1342:	0f 90       	pop	r0
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	08 95       	ret

0000134e <xQueueGenericCreate>:
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	08 2f       	mov	r16, r24
    1358:	16 2f       	mov	r17, r22
    135a:	66 23       	and	r22, r22
    135c:	b1 f0       	breq	.+44     	; 0x138a <xQueueGenericCreate+0x3c>
    135e:	86 9f       	mul	r24, r22
    1360:	c0 01       	movw	r24, r0
    1362:	11 24       	eor	r1, r1
    1364:	83 96       	adiw	r24, 0x23	; 35
    1366:	0f dc       	rcall	.-2018   	; 0xb86 <pvPortMalloc>
    1368:	ec 01       	movw	r28, r24
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	39 f4       	brne	.+14     	; 0x137c <xQueueGenericCreate+0x2e>
    136e:	13 c0       	rjmp	.+38     	; 0x1396 <xQueueGenericCreate+0x48>
    1370:	0f 8f       	std	Y+31, r16	; 0x1f
    1372:	18 a3       	std	Y+32, r17	; 0x20
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	ce 01       	movw	r24, r28
    1378:	b0 df       	rcall	.-160    	; 0x12da <xQueueGenericReset>
    137a:	0d c0       	rjmp	.+26     	; 0x1396 <xQueueGenericCreate+0x48>
    137c:	83 96       	adiw	r24, 0x23	; 35
    137e:	99 83       	std	Y+1, r25	; 0x01
    1380:	88 83       	st	Y, r24
    1382:	f6 cf       	rjmp	.-20     	; 0x1370 <xQueueGenericCreate+0x22>
    1384:	d9 83       	std	Y+1, r29	; 0x01
    1386:	c8 83       	st	Y, r28
    1388:	f3 cf       	rjmp	.-26     	; 0x1370 <xQueueGenericCreate+0x22>
    138a:	83 e2       	ldi	r24, 0x23	; 35
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	fb db       	rcall	.-2058   	; 0xb86 <pvPortMalloc>
    1390:	ec 01       	movw	r28, r24
    1392:	89 2b       	or	r24, r25
    1394:	b9 f7       	brne	.-18     	; 0x1384 <xQueueGenericCreate+0x36>
    1396:	ce 01       	movw	r24, r28
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	08 95       	ret

000013a2 <xQueueGenericSend>:
    13a2:	9f 92       	push	r9
    13a4:	af 92       	push	r10
    13a6:	bf 92       	push	r11
    13a8:	cf 92       	push	r12
    13aa:	df 92       	push	r13
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	29 97       	sbiw	r28, 0x09	; 9
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	7c 01       	movw	r14, r24
    13ca:	5b 01       	movw	r10, r22
    13cc:	2e 83       	std	Y+6, r18	; 0x06
    13ce:	3f 83       	std	Y+7, r19	; 0x07
    13d0:	48 87       	std	Y+8, r20	; 0x08
    13d2:	59 87       	std	Y+9, r21	; 0x09
    13d4:	10 e0       	ldi	r17, 0x00	; 0
    13d6:	99 24       	eor	r9, r9
    13d8:	93 94       	inc	r9
    13da:	6c 01       	movw	r12, r24
    13dc:	88 e0       	ldi	r24, 0x08	; 8
    13de:	c8 0e       	add	r12, r24
    13e0:	d1 1c       	adc	r13, r1
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	0f 92       	push	r0
    13e8:	f7 01       	movw	r30, r14
    13ea:	96 8d       	ldd	r25, Z+30	; 0x1e
    13ec:	87 8d       	ldd	r24, Z+31	; 0x1f
    13ee:	98 17       	cp	r25, r24
    13f0:	10 f0       	brcs	.+4      	; 0x13f6 <xQueueGenericSend+0x54>
    13f2:	02 30       	cpi	r16, 0x02	; 2
    13f4:	b1 f4       	brne	.+44     	; 0x1422 <xQueueGenericSend+0x80>
    13f6:	40 2f       	mov	r20, r16
    13f8:	b5 01       	movw	r22, r10
    13fa:	c7 01       	movw	r24, r14
    13fc:	a8 de       	rcall	.-688    	; 0x114e <prvCopyDataToQueue>
    13fe:	f7 01       	movw	r30, r14
    1400:	93 89       	ldd	r25, Z+19	; 0x13
    1402:	99 23       	and	r25, r25
    1404:	41 f0       	breq	.+16     	; 0x1416 <xQueueGenericSend+0x74>
    1406:	c7 01       	movw	r24, r14
    1408:	43 96       	adiw	r24, 0x13	; 19
    140a:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    140e:	88 23       	and	r24, r24
    1410:	21 f0       	breq	.+8      	; 0x141a <xQueueGenericSend+0x78>
    1412:	9e dc       	rcall	.-1732   	; 0xd50 <vPortYield>
    1414:	02 c0       	rjmp	.+4      	; 0x141a <xQueueGenericSend+0x78>
    1416:	81 11       	cpse	r24, r1
    1418:	9b dc       	rcall	.-1738   	; 0xd50 <vPortYield>
    141a:	0f 90       	pop	r0
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	52 c0       	rjmp	.+164    	; 0x14c6 <xQueueGenericSend+0x124>
    1422:	8e 81       	ldd	r24, Y+6	; 0x06
    1424:	9f 81       	ldd	r25, Y+7	; 0x07
    1426:	a8 85       	ldd	r26, Y+8	; 0x08
    1428:	b9 85       	ldd	r27, Y+9	; 0x09
    142a:	89 2b       	or	r24, r25
    142c:	8a 2b       	or	r24, r26
    142e:	8b 2b       	or	r24, r27
    1430:	21 f4       	brne	.+8      	; 0x143a <xQueueGenericSend+0x98>
    1432:	0f 90       	pop	r0
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	46 c0       	rjmp	.+140    	; 0x14c6 <xQueueGenericSend+0x124>
    143a:	11 11       	cpse	r17, r1
    143c:	05 c0       	rjmp	.+10     	; 0x1448 <xQueueGenericSend+0xa6>
    143e:	ce 01       	movw	r24, r28
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    1446:	19 2d       	mov	r17, r9
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	0f 92       	push	r0
    1456:	f7 01       	movw	r30, r14
    1458:	81 a1       	ldd	r24, Z+33	; 0x21
    145a:	8f 3f       	cpi	r24, 0xFF	; 255
    145c:	09 f4       	brne	.+2      	; 0x1460 <xQueueGenericSend+0xbe>
    145e:	11 a2       	std	Z+33, r1	; 0x21
    1460:	f7 01       	movw	r30, r14
    1462:	82 a1       	ldd	r24, Z+34	; 0x22
    1464:	8f 3f       	cpi	r24, 0xFF	; 255
    1466:	09 f4       	brne	.+2      	; 0x146a <xQueueGenericSend+0xc8>
    1468:	12 a2       	std	Z+34, r1	; 0x22
    146a:	0f 90       	pop	r0
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	be 01       	movw	r22, r28
    1470:	6a 5f       	subi	r22, 0xFA	; 250
    1472:	7f 4f       	sbci	r23, 0xFF	; 255
    1474:	ce 01       	movw	r24, r28
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    147c:	81 11       	cpse	r24, r1
    147e:	1e c0       	rjmp	.+60     	; 0x14bc <xQueueGenericSend+0x11a>
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	0f 92       	push	r0
    1486:	f7 01       	movw	r30, r14
    1488:	96 8d       	ldd	r25, Z+30	; 0x1e
    148a:	87 8d       	ldd	r24, Z+31	; 0x1f
    148c:	0f 90       	pop	r0
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	98 13       	cpse	r25, r24
    1492:	0f c0       	rjmp	.+30     	; 0x14b2 <xQueueGenericSend+0x110>
    1494:	4e 81       	ldd	r20, Y+6	; 0x06
    1496:	5f 81       	ldd	r21, Y+7	; 0x07
    1498:	68 85       	ldd	r22, Y+8	; 0x08
    149a:	79 85       	ldd	r23, Y+9	; 0x09
    149c:	c6 01       	movw	r24, r12
    149e:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    14a2:	c7 01       	movw	r24, r14
    14a4:	cd de       	rcall	.-614    	; 0x1240 <prvUnlockQueue>
    14a6:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14aa:	81 11       	cpse	r24, r1
    14ac:	9a cf       	rjmp	.-204    	; 0x13e2 <xQueueGenericSend+0x40>
    14ae:	50 dc       	rcall	.-1888   	; 0xd50 <vPortYield>
    14b0:	98 cf       	rjmp	.-208    	; 0x13e2 <xQueueGenericSend+0x40>
    14b2:	c7 01       	movw	r24, r14
    14b4:	c5 de       	rcall	.-630    	; 0x1240 <prvUnlockQueue>
    14b6:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14ba:	93 cf       	rjmp	.-218    	; 0x13e2 <xQueueGenericSend+0x40>
    14bc:	c7 01       	movw	r24, r14
    14be:	c0 de       	rcall	.-640    	; 0x1240 <prvUnlockQueue>
    14c0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	29 96       	adiw	r28, 0x09	; 9
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	ff 90       	pop	r15
    14dc:	ef 90       	pop	r14
    14de:	df 90       	pop	r13
    14e0:	cf 90       	pop	r12
    14e2:	bf 90       	pop	r11
    14e4:	af 90       	pop	r10
    14e6:	9f 90       	pop	r9
    14e8:	08 95       	ret

000014ea <xQueueCreateMutex>:
    14ea:	0f 93       	push	r16
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	48 2f       	mov	r20, r24
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	2b df       	rcall	.-426    	; 0x134e <xQueueGenericCreate>
    14f8:	ec 01       	movw	r28, r24
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	61 f0       	breq	.+24     	; 0x1516 <xQueueCreateMutex+0x2c>
    14fe:	1b 82       	std	Y+3, r1	; 0x03
    1500:	1a 82       	std	Y+2, r1	; 0x02
    1502:	19 82       	std	Y+1, r1	; 0x01
    1504:	18 82       	st	Y, r1
    1506:	1e 82       	std	Y+6, r1	; 0x06
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	a9 01       	movw	r20, r18
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	46 df       	rcall	.-372    	; 0x13a2 <xQueueGenericSend>
    1516:	ce 01       	movw	r24, r28
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	0f 91       	pop	r16
    151e:	08 95       	ret

00001520 <xQueueGenericSendFromISR>:
    1520:	ef 92       	push	r14
    1522:	ff 92       	push	r15
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	8a 01       	movw	r16, r20
    152e:	fc 01       	movw	r30, r24
    1530:	56 8d       	ldd	r21, Z+30	; 0x1e
    1532:	37 8d       	ldd	r19, Z+31	; 0x1f
    1534:	53 17       	cp	r21, r19
    1536:	10 f0       	brcs	.+4      	; 0x153c <xQueueGenericSendFromISR+0x1c>
    1538:	22 30       	cpi	r18, 0x02	; 2
    153a:	e9 f4       	brne	.+58     	; 0x1576 <xQueueGenericSendFromISR+0x56>
    153c:	42 2f       	mov	r20, r18
    153e:	78 01       	movw	r14, r16
    1540:	ec 01       	movw	r28, r24
    1542:	1a a1       	ldd	r17, Y+34	; 0x22
    1544:	04 de       	rcall	.-1016   	; 0x114e <prvCopyDataToQueue>
    1546:	1f 3f       	cpi	r17, 0xFF	; 255
    1548:	81 f4       	brne	.+32     	; 0x156a <xQueueGenericSendFromISR+0x4a>
    154a:	8b 89       	ldd	r24, Y+19	; 0x13
    154c:	88 23       	and	r24, r24
    154e:	a9 f0       	breq	.+42     	; 0x157a <xQueueGenericSendFromISR+0x5a>
    1550:	ce 01       	movw	r24, r28
    1552:	43 96       	adiw	r24, 0x13	; 19
    1554:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    1558:	88 23       	and	r24, r24
    155a:	89 f0       	breq	.+34     	; 0x157e <xQueueGenericSendFromISR+0x5e>
    155c:	e1 14       	cp	r14, r1
    155e:	f1 04       	cpc	r15, r1
    1560:	81 f0       	breq	.+32     	; 0x1582 <xQueueGenericSendFromISR+0x62>
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	f7 01       	movw	r30, r14
    1566:	80 83       	st	Z, r24
    1568:	0d c0       	rjmp	.+26     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    156a:	ff 24       	eor	r15, r15
    156c:	f3 94       	inc	r15
    156e:	f1 0e       	add	r15, r17
    1570:	fa a2       	std	Y+34, r15	; 0x22
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	07 c0       	rjmp	.+14     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	05 c0       	rjmp	.+10     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <xQueueGenericSendFromISR+0x64>
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	01 c0       	rjmp	.+2      	; 0x1584 <xQueueGenericSendFromISR+0x64>
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	ff 90       	pop	r15
    158e:	ef 90       	pop	r14
    1590:	08 95       	ret

00001592 <xQueueGiveFromISR>:
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	fc 01       	movw	r30, r24
    1598:	86 8d       	ldd	r24, Z+30	; 0x1e
    159a:	97 8d       	ldd	r25, Z+31	; 0x1f
    159c:	89 17       	cp	r24, r25
    159e:	c0 f4       	brcc	.+48     	; 0x15d0 <xQueueGiveFromISR+0x3e>
    15a0:	92 a1       	ldd	r25, Z+34	; 0x22
    15a2:	8f 5f       	subi	r24, 0xFF	; 255
    15a4:	86 8f       	std	Z+30, r24	; 0x1e
    15a6:	9f 3f       	cpi	r25, 0xFF	; 255
    15a8:	79 f4       	brne	.+30     	; 0x15c8 <xQueueGiveFromISR+0x36>
    15aa:	83 89       	ldd	r24, Z+19	; 0x13
    15ac:	88 23       	and	r24, r24
    15ae:	91 f0       	breq	.+36     	; 0x15d4 <xQueueGiveFromISR+0x42>
    15b0:	eb 01       	movw	r28, r22
    15b2:	cf 01       	movw	r24, r30
    15b4:	43 96       	adiw	r24, 0x13	; 19
    15b6:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    15ba:	88 23       	and	r24, r24
    15bc:	69 f0       	breq	.+26     	; 0x15d8 <xQueueGiveFromISR+0x46>
    15be:	20 97       	sbiw	r28, 0x00	; 0
    15c0:	69 f0       	breq	.+26     	; 0x15dc <xQueueGiveFromISR+0x4a>
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	88 83       	st	Y, r24
    15c6:	0b c0       	rjmp	.+22     	; 0x15de <xQueueGiveFromISR+0x4c>
    15c8:	9f 5f       	subi	r25, 0xFF	; 255
    15ca:	92 a3       	std	Z+34, r25	; 0x22
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	07 c0       	rjmp	.+14     	; 0x15de <xQueueGiveFromISR+0x4c>
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	05 c0       	rjmp	.+10     	; 0x15de <xQueueGiveFromISR+0x4c>
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	03 c0       	rjmp	.+6      	; 0x15de <xQueueGiveFromISR+0x4c>
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	01 c0       	rjmp	.+2      	; 0x15de <xQueueGiveFromISR+0x4c>
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	08 95       	ret

000015e4 <xQueueReceive>:
    15e4:	9f 92       	push	r9
    15e6:	af 92       	push	r10
    15e8:	bf 92       	push	r11
    15ea:	cf 92       	push	r12
    15ec:	df 92       	push	r13
    15ee:	ef 92       	push	r14
    15f0:	ff 92       	push	r15
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	29 97       	sbiw	r28, 0x09	; 9
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	8c 01       	movw	r16, r24
    160c:	5b 01       	movw	r10, r22
    160e:	2e 83       	std	Y+6, r18	; 0x06
    1610:	3f 83       	std	Y+7, r19	; 0x07
    1612:	48 87       	std	Y+8, r20	; 0x08
    1614:	59 87       	std	Y+9, r21	; 0x09
    1616:	e1 2c       	mov	r14, r1
    1618:	99 24       	eor	r9, r9
    161a:	93 94       	inc	r9
    161c:	6c 01       	movw	r12, r24
    161e:	83 e1       	ldi	r24, 0x13	; 19
    1620:	c8 0e       	add	r12, r24
    1622:	d1 1c       	adc	r13, r1
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	0f 92       	push	r0
    162a:	f8 01       	movw	r30, r16
    162c:	f6 8c       	ldd	r15, Z+30	; 0x1e
    162e:	ff 20       	and	r15, r15
    1630:	99 f0       	breq	.+38     	; 0x1658 <xQueueReceive+0x74>
    1632:	b5 01       	movw	r22, r10
    1634:	c8 01       	movw	r24, r16
    1636:	ea dd       	rcall	.-1068   	; 0x120c <prvCopyDataFromQueue>
    1638:	fa 94       	dec	r15
    163a:	f8 01       	movw	r30, r16
    163c:	f6 8e       	std	Z+30, r15	; 0x1e
    163e:	80 85       	ldd	r24, Z+8	; 0x08
    1640:	88 23       	and	r24, r24
    1642:	31 f0       	breq	.+12     	; 0x1650 <xQueueReceive+0x6c>
    1644:	c8 01       	movw	r24, r16
    1646:	08 96       	adiw	r24, 0x08	; 8
    1648:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    164c:	81 11       	cpse	r24, r1
    164e:	80 db       	rcall	.-2304   	; 0xd50 <vPortYield>
    1650:	0f 90       	pop	r0
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	51 c0       	rjmp	.+162    	; 0x16fa <xQueueReceive+0x116>
    1658:	8e 81       	ldd	r24, Y+6	; 0x06
    165a:	9f 81       	ldd	r25, Y+7	; 0x07
    165c:	a8 85       	ldd	r26, Y+8	; 0x08
    165e:	b9 85       	ldd	r27, Y+9	; 0x09
    1660:	89 2b       	or	r24, r25
    1662:	8a 2b       	or	r24, r26
    1664:	8b 2b       	or	r24, r27
    1666:	21 f4       	brne	.+8      	; 0x1670 <xQueueReceive+0x8c>
    1668:	0f 90       	pop	r0
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	45 c0       	rjmp	.+138    	; 0x16fa <xQueueReceive+0x116>
    1670:	e1 10       	cpse	r14, r1
    1672:	05 c0       	rjmp	.+10     	; 0x167e <xQueueReceive+0x9a>
    1674:	ce 01       	movw	r24, r28
    1676:	01 96       	adiw	r24, 0x01	; 1
    1678:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    167c:	e9 2c       	mov	r14, r9
    167e:	0f 90       	pop	r0
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	0f 92       	push	r0
    168c:	f8 01       	movw	r30, r16
    168e:	81 a1       	ldd	r24, Z+33	; 0x21
    1690:	8f 3f       	cpi	r24, 0xFF	; 255
    1692:	09 f4       	brne	.+2      	; 0x1696 <xQueueReceive+0xb2>
    1694:	11 a2       	std	Z+33, r1	; 0x21
    1696:	f8 01       	movw	r30, r16
    1698:	82 a1       	ldd	r24, Z+34	; 0x22
    169a:	8f 3f       	cpi	r24, 0xFF	; 255
    169c:	09 f4       	brne	.+2      	; 0x16a0 <xQueueReceive+0xbc>
    169e:	12 a2       	std	Z+34, r1	; 0x22
    16a0:	0f 90       	pop	r0
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	be 01       	movw	r22, r28
    16a6:	6a 5f       	subi	r22, 0xFA	; 250
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	ce 01       	movw	r24, r28
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    16b2:	81 11       	cpse	r24, r1
    16b4:	18 c0       	rjmp	.+48     	; 0x16e6 <xQueueReceive+0x102>
    16b6:	c8 01       	movw	r24, r16
    16b8:	3f dd       	rcall	.-1410   	; 0x1138 <prvIsQueueEmpty>
    16ba:	88 23       	and	r24, r24
    16bc:	79 f0       	breq	.+30     	; 0x16dc <xQueueReceive+0xf8>
    16be:	4e 81       	ldd	r20, Y+6	; 0x06
    16c0:	5f 81       	ldd	r21, Y+7	; 0x07
    16c2:	68 85       	ldd	r22, Y+8	; 0x08
    16c4:	79 85       	ldd	r23, Y+9	; 0x09
    16c6:	c6 01       	movw	r24, r12
    16c8:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    16cc:	c8 01       	movw	r24, r16
    16ce:	b8 dd       	rcall	.-1168   	; 0x1240 <prvUnlockQueue>
    16d0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16d4:	81 11       	cpse	r24, r1
    16d6:	a6 cf       	rjmp	.-180    	; 0x1624 <xQueueReceive+0x40>
    16d8:	3b db       	rcall	.-2442   	; 0xd50 <vPortYield>
    16da:	a4 cf       	rjmp	.-184    	; 0x1624 <xQueueReceive+0x40>
    16dc:	c8 01       	movw	r24, r16
    16de:	b0 dd       	rcall	.-1184   	; 0x1240 <prvUnlockQueue>
    16e0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16e4:	9f cf       	rjmp	.-194    	; 0x1624 <xQueueReceive+0x40>
    16e6:	c8 01       	movw	r24, r16
    16e8:	ab dd       	rcall	.-1194   	; 0x1240 <prvUnlockQueue>
    16ea:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16ee:	c8 01       	movw	r24, r16
    16f0:	23 dd       	rcall	.-1466   	; 0x1138 <prvIsQueueEmpty>
    16f2:	88 23       	and	r24, r24
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <xQueueReceive+0x114>
    16f6:	96 cf       	rjmp	.-212    	; 0x1624 <xQueueReceive+0x40>
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	29 96       	adiw	r28, 0x09	; 9
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	bf 90       	pop	r11
    1718:	af 90       	pop	r10
    171a:	9f 90       	pop	r9
    171c:	08 95       	ret

0000171e <xQueueSemaphoreTake>:
    171e:	bf 92       	push	r11
    1720:	cf 92       	push	r12
    1722:	df 92       	push	r13
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	29 97       	sbiw	r28, 0x09	; 9
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	8c 01       	movw	r16, r24
    1742:	4e 83       	std	Y+6, r20	; 0x06
    1744:	5f 83       	std	Y+7, r21	; 0x07
    1746:	68 87       	std	Y+8, r22	; 0x08
    1748:	79 87       	std	Y+9, r23	; 0x09
    174a:	b1 2c       	mov	r11, r1
    174c:	d1 2c       	mov	r13, r1
    174e:	cc 24       	eor	r12, r12
    1750:	c3 94       	inc	r12
    1752:	7c 01       	movw	r14, r24
    1754:	83 e1       	ldi	r24, 0x13	; 19
    1756:	e8 0e       	add	r14, r24
    1758:	f1 1c       	adc	r15, r1
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	0f 92       	push	r0
    1760:	d8 01       	movw	r26, r16
    1762:	5e 96       	adiw	r26, 0x1e	; 30
    1764:	8c 91       	ld	r24, X
    1766:	5e 97       	sbiw	r26, 0x1e	; 30
    1768:	88 23       	and	r24, r24
    176a:	e1 f0       	breq	.+56     	; 0x17a4 <xQueueSemaphoreTake+0x86>
    176c:	81 50       	subi	r24, 0x01	; 1
    176e:	5e 96       	adiw	r26, 0x1e	; 30
    1770:	8c 93       	st	X, r24
    1772:	5e 97       	sbiw	r26, 0x1e	; 30
    1774:	8d 91       	ld	r24, X+
    1776:	9c 91       	ld	r25, X
    1778:	89 2b       	or	r24, r25
    177a:	29 f4       	brne	.+10     	; 0x1786 <xQueueSemaphoreTake+0x68>
    177c:	0e 94 b6 1a 	call	0x356c	; 0x356c <pvTaskIncrementMutexHeldCount>
    1780:	f8 01       	movw	r30, r16
    1782:	93 83       	std	Z+3, r25	; 0x03
    1784:	82 83       	std	Z+2, r24	; 0x02
    1786:	d8 01       	movw	r26, r16
    1788:	18 96       	adiw	r26, 0x08	; 8
    178a:	8c 91       	ld	r24, X
    178c:	88 23       	and	r24, r24
    178e:	31 f0       	breq	.+12     	; 0x179c <xQueueSemaphoreTake+0x7e>
    1790:	c8 01       	movw	r24, r16
    1792:	08 96       	adiw	r24, 0x08	; 8
    1794:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    1798:	81 11       	cpse	r24, r1
    179a:	da da       	rcall	.-2636   	; 0xd50 <vPortYield>
    179c:	0f 90       	pop	r0
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	7f c0       	rjmp	.+254    	; 0x18a2 <xQueueSemaphoreTake+0x184>
    17a4:	8e 81       	ldd	r24, Y+6	; 0x06
    17a6:	9f 81       	ldd	r25, Y+7	; 0x07
    17a8:	a8 85       	ldd	r26, Y+8	; 0x08
    17aa:	b9 85       	ldd	r27, Y+9	; 0x09
    17ac:	89 2b       	or	r24, r25
    17ae:	8a 2b       	or	r24, r26
    17b0:	8b 2b       	or	r24, r27
    17b2:	21 f4       	brne	.+8      	; 0x17bc <xQueueSemaphoreTake+0x9e>
    17b4:	0f 90       	pop	r0
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	73 c0       	rjmp	.+230    	; 0x18a2 <xQueueSemaphoreTake+0x184>
    17bc:	d1 10       	cpse	r13, r1
    17be:	05 c0       	rjmp	.+10     	; 0x17ca <xQueueSemaphoreTake+0xac>
    17c0:	ce 01       	movw	r24, r28
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    17c8:	dc 2c       	mov	r13, r12
    17ca:	0f 90       	pop	r0
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	0f 92       	push	r0
    17d8:	f8 01       	movw	r30, r16
    17da:	81 a1       	ldd	r24, Z+33	; 0x21
    17dc:	8f 3f       	cpi	r24, 0xFF	; 255
    17de:	09 f4       	brne	.+2      	; 0x17e2 <xQueueSemaphoreTake+0xc4>
    17e0:	11 a2       	std	Z+33, r1	; 0x21
    17e2:	d8 01       	movw	r26, r16
    17e4:	92 96       	adiw	r26, 0x22	; 34
    17e6:	8c 91       	ld	r24, X
    17e8:	92 97       	sbiw	r26, 0x22	; 34
    17ea:	8f 3f       	cpi	r24, 0xFF	; 255
    17ec:	11 f4       	brne	.+4      	; 0x17f2 <xQueueSemaphoreTake+0xd4>
    17ee:	92 96       	adiw	r26, 0x22	; 34
    17f0:	1c 92       	st	X, r1
    17f2:	0f 90       	pop	r0
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	be 01       	movw	r22, r28
    17f8:	6a 5f       	subi	r22, 0xFA	; 250
    17fa:	7f 4f       	sbci	r23, 0xFF	; 255
    17fc:	ce 01       	movw	r24, r28
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    1804:	81 11       	cpse	r24, r1
    1806:	27 c0       	rjmp	.+78     	; 0x1856 <xQueueSemaphoreTake+0x138>
    1808:	c8 01       	movw	r24, r16
    180a:	96 dc       	rcall	.-1748   	; 0x1138 <prvIsQueueEmpty>
    180c:	88 23       	and	r24, r24
    180e:	f1 f0       	breq	.+60     	; 0x184c <xQueueSemaphoreTake+0x12e>
    1810:	f8 01       	movw	r30, r16
    1812:	80 81       	ld	r24, Z
    1814:	91 81       	ldd	r25, Z+1	; 0x01
    1816:	89 2b       	or	r24, r25
    1818:	51 f4       	brne	.+20     	; 0x182e <xQueueSemaphoreTake+0x110>
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	0f 92       	push	r0
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	93 81       	ldd	r25, Z+3	; 0x03
    1824:	0e 94 bc 19 	call	0x3378	; 0x3378 <xTaskPriorityInherit>
    1828:	b8 2e       	mov	r11, r24
    182a:	0f 90       	pop	r0
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	4e 81       	ldd	r20, Y+6	; 0x06
    1830:	5f 81       	ldd	r21, Y+7	; 0x07
    1832:	68 85       	ldd	r22, Y+8	; 0x08
    1834:	79 85       	ldd	r23, Y+9	; 0x09
    1836:	c7 01       	movw	r24, r14
    1838:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    183c:	c8 01       	movw	r24, r16
    183e:	00 dd       	rcall	.-1536   	; 0x1240 <prvUnlockQueue>
    1840:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    1844:	81 11       	cpse	r24, r1
    1846:	89 cf       	rjmp	.-238    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1848:	83 da       	rcall	.-2810   	; 0xd50 <vPortYield>
    184a:	87 cf       	rjmp	.-242    	; 0x175a <xQueueSemaphoreTake+0x3c>
    184c:	c8 01       	movw	r24, r16
    184e:	f8 dc       	rcall	.-1552   	; 0x1240 <prvUnlockQueue>
    1850:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    1854:	82 cf       	rjmp	.-252    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1856:	c8 01       	movw	r24, r16
    1858:	f3 dc       	rcall	.-1562   	; 0x1240 <prvUnlockQueue>
    185a:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    185e:	c8 01       	movw	r24, r16
    1860:	6b dc       	rcall	.-1834   	; 0x1138 <prvIsQueueEmpty>
    1862:	88 23       	and	r24, r24
    1864:	09 f4       	brne	.+2      	; 0x1868 <xQueueSemaphoreTake+0x14a>
    1866:	79 cf       	rjmp	.-270    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1868:	bb 20       	and	r11, r11
    186a:	d1 f0       	breq	.+52     	; 0x18a0 <xQueueSemaphoreTake+0x182>
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	0f 92       	push	r0
    1872:	f8 01       	movw	r30, r16
    1874:	83 89       	ldd	r24, Z+19	; 0x13
    1876:	88 23       	and	r24, r24
    1878:	39 f0       	breq	.+14     	; 0x1888 <xQueueSemaphoreTake+0x16a>
    187a:	02 8c       	ldd	r0, Z+26	; 0x1a
    187c:	f3 8d       	ldd	r31, Z+27	; 0x1b
    187e:	e0 2d       	mov	r30, r0
    1880:	80 81       	ld	r24, Z
    1882:	64 e0       	ldi	r22, 0x04	; 4
    1884:	68 1b       	sub	r22, r24
    1886:	01 c0       	rjmp	.+2      	; 0x188a <xQueueSemaphoreTake+0x16c>
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	d8 01       	movw	r26, r16
    188c:	12 96       	adiw	r26, 0x02	; 2
    188e:	8d 91       	ld	r24, X+
    1890:	9c 91       	ld	r25, X
    1892:	13 97       	sbiw	r26, 0x03	; 3
    1894:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <vTaskPriorityDisinheritAfterTimeout>
    1898:	0f 90       	pop	r0
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <xQueueSemaphoreTake+0x184>
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	29 96       	adiw	r28, 0x09	; 9
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	ff 90       	pop	r15
    18b8:	ef 90       	pop	r14
    18ba:	df 90       	pop	r13
    18bc:	cf 90       	pop	r12
    18be:	bf 90       	pop	r11
    18c0:	08 95       	ret

000018c2 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	0f 92       	push	r0
    18ce:	89 a1       	ldd	r24, Y+33	; 0x21
    18d0:	8f 3f       	cpi	r24, 0xFF	; 255
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <vQueueWaitForMessageRestricted+0x14>
    18d4:	19 a2       	std	Y+33, r1	; 0x21
    18d6:	8a a1       	ldd	r24, Y+34	; 0x22
    18d8:	8f 3f       	cpi	r24, 0xFF	; 255
    18da:	09 f4       	brne	.+2      	; 0x18de <vQueueWaitForMessageRestricted+0x1c>
    18dc:	1a a2       	std	Y+34, r1	; 0x22
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    18e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18e4:	81 11       	cpse	r24, r1
    18e6:	04 c0       	rjmp	.+8      	; 0x18f0 <vQueueWaitForMessageRestricted+0x2e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    18e8:	ce 01       	movw	r24, r28
    18ea:	43 96       	adiw	r24, 0x13	; 19
    18ec:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    18f0:	ce 01       	movw	r24, r28
    18f2:	a6 dc       	rcall	.-1716   	; 0x1240 <prvUnlockQueue>
	}
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	08 95       	ret

000018fa <xSerialxPrint>:

		default:
			break;
	}
	return 0;
}
    18fa:	4f 92       	push	r4
    18fc:	5f 92       	push	r5
    18fe:	6f 92       	push	r6
    1900:	7f 92       	push	r7
    1902:	8f 92       	push	r8
    1904:	9f 92       	push	r9
    1906:	af 92       	push	r10
    1908:	bf 92       	push	r11
    190a:	cf 92       	push	r12
    190c:	df 92       	push	r13
    190e:	ef 92       	push	r14
    1910:	ff 92       	push	r15
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	ec 01       	movw	r28, r24
    191c:	fb 01       	movw	r30, r22
    191e:	01 90       	ld	r0, Z+
    1920:	00 20       	and	r0, r0
    1922:	e9 f7       	brne	.-6      	; 0x191e <xSerialxPrint+0x24>
    1924:	4b 01       	movw	r8, r22
    1926:	9f 01       	movw	r18, r30
    1928:	21 50       	subi	r18, 0x01	; 1
    192a:	31 09       	sbc	r19, r1
    192c:	0f 2e       	mov	r0, r31
    192e:	f1 e3       	ldi	r31, 0x31	; 49
    1930:	ef 2e       	mov	r14, r31
    1932:	ff 24       	eor	r15, r15
    1934:	f3 94       	inc	r15
    1936:	f0 2d       	mov	r31, r0
    1938:	01 ed       	ldi	r16, 0xD1	; 209
    193a:	10 e0       	ldi	r17, 0x00	; 0
    193c:	69 ec       	ldi	r22, 0xC9	; 201
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	41 ec       	ldi	r20, 0xC1	; 193
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	5c 01       	movw	r10, r24
    1946:	8d e0       	ldi	r24, 0x0D	; 13
    1948:	a8 0e       	add	r10, r24
    194a:	b1 1c       	adc	r11, r1
    194c:	78 c0       	rjmp	.+240    	; 0x1a3e <xSerialxPrint+0x144>
    194e:	d4 01       	movw	r26, r8
    1950:	dd 90       	ld	r13, X+
    1952:	4d 01       	movw	r8, r26
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	0f 92       	push	r0
    195a:	ed 85       	ldd	r30, Y+13	; 0x0d
    195c:	fe 85       	ldd	r31, Y+14	; 0x0e
    195e:	0f 90       	pop	r0
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	8f 89       	ldd	r24, Y+23	; 0x17
    1964:	98 8d       	ldd	r25, Y+24	; 0x18
    1966:	e8 17       	cp	r30, r24
    1968:	f9 07       	cpc	r31, r25
    196a:	f1 f0       	breq	.+60     	; 0x19a8 <xSerialxPrint+0xae>
    196c:	f5 01       	movw	r30, r10
    196e:	82 81       	ldd	r24, Z+2	; 0x02
    1970:	93 81       	ldd	r25, Z+3	; 0x03
    1972:	dc 01       	movw	r26, r24
    1974:	dc 92       	st	X, r13
    1976:	82 81       	ldd	r24, Z+2	; 0x02
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	93 83       	std	Z+3, r25	; 0x03
    197e:	82 83       	std	Z+2, r24	; 0x02
    1980:	c0 84       	ldd	r12, Z+8	; 0x08
    1982:	d1 84       	ldd	r13, Z+9	; 0x09
    1984:	8c 15       	cp	r24, r12
    1986:	9d 05       	cpc	r25, r13
    1988:	21 f4       	brne	.+8      	; 0x1992 <xSerialxPrint+0x98>
    198a:	86 81       	ldd	r24, Z+6	; 0x06
    198c:	97 81       	ldd	r25, Z+7	; 0x07
    198e:	93 83       	std	Z+3, r25	; 0x03
    1990:	82 83       	std	Z+2, r24	; 0x02
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	0f 92       	push	r0
    1998:	80 81       	ld	r24, Z
    199a:	91 81       	ldd	r25, Z+1	; 0x01
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	80 83       	st	Z, r24
    19a2:	0f 90       	pop	r0
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	2b c0       	rjmp	.+86     	; 0x19fe <xSerialxPrint+0x104>
    19a8:	00 00       	nop
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	0f 92       	push	r0
    19b0:	ed 85       	ldd	r30, Y+13	; 0x0d
    19b2:	fe 85       	ldd	r31, Y+14	; 0x0e
    19b4:	0f 90       	pop	r0
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ba:	98 8d       	ldd	r25, Y+24	; 0x18
    19bc:	e8 17       	cp	r30, r24
    19be:	f9 07       	cpc	r31, r25
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <xSerialxPrint+0xca>
    19c2:	3d c0       	rjmp	.+122    	; 0x1a3e <xSerialxPrint+0x144>
    19c4:	f5 01       	movw	r30, r10
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	dc 01       	movw	r26, r24
    19cc:	dc 92       	st	X, r13
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	93 83       	std	Z+3, r25	; 0x03
    19d6:	82 83       	std	Z+2, r24	; 0x02
    19d8:	c0 84       	ldd	r12, Z+8	; 0x08
    19da:	d1 84       	ldd	r13, Z+9	; 0x09
    19dc:	8c 15       	cp	r24, r12
    19de:	9d 05       	cpc	r25, r13
    19e0:	21 f4       	brne	.+8      	; 0x19ea <xSerialxPrint+0xf0>
    19e2:	86 81       	ldd	r24, Z+6	; 0x06
    19e4:	97 81       	ldd	r25, Z+7	; 0x07
    19e6:	93 83       	std	Z+3, r25	; 0x03
    19e8:	82 83       	std	Z+2, r24	; 0x02
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	0f 92       	push	r0
    19f0:	80 81       	ld	r24, Z
    19f2:	91 81       	ldd	r25, Z+1	; 0x01
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	80 83       	st	Z, r24
    19fa:	0f 90       	pop	r0
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	48 80       	ld	r4, Y
    1a00:	51 2c       	mov	r5, r1
    1a02:	b8 e0       	ldi	r27, 0x08	; 8
    1a04:	4b 16       	cp	r4, r27
    1a06:	51 04       	cpc	r5, r1
    1a08:	d0 f4       	brcc	.+52     	; 0x1a3e <xSerialxPrint+0x144>
    1a0a:	f2 01       	movw	r30, r4
    1a0c:	88 27       	eor	r24, r24
    1a0e:	ee 58       	subi	r30, 0x8E	; 142
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	8f 4f       	sbci	r24, 0xFF	; 255
    1a14:	0c 94 63 59 	jmp	0xb2c6	; 0xb2c6 <__tablejump2__>
    1a18:	fa 01       	movw	r30, r20
    1a1a:	80 81       	ld	r24, Z
    1a1c:	80 62       	ori	r24, 0x20	; 32
    1a1e:	80 83       	st	Z, r24
    1a20:	0e c0       	rjmp	.+28     	; 0x1a3e <xSerialxPrint+0x144>
    1a22:	db 01       	movw	r26, r22
    1a24:	8c 91       	ld	r24, X
    1a26:	80 62       	ori	r24, 0x20	; 32
    1a28:	8c 93       	st	X, r24
    1a2a:	09 c0       	rjmp	.+18     	; 0x1a3e <xSerialxPrint+0x144>
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	80 81       	ld	r24, Z
    1a30:	80 62       	ori	r24, 0x20	; 32
    1a32:	80 83       	st	Z, r24
    1a34:	04 c0       	rjmp	.+8      	; 0x1a3e <xSerialxPrint+0x144>
    1a36:	d7 01       	movw	r26, r14
    1a38:	8c 91       	ld	r24, X
    1a3a:	80 62       	ori	r24, 0x20	; 32
    1a3c:	8c 93       	st	X, r24
    1a3e:	82 16       	cp	r8, r18
    1a40:	93 06       	cpc	r9, r19
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <xSerialxPrint+0x14c>
    1a44:	84 cf       	rjmp	.-248    	; 0x194e <xSerialxPrint+0x54>
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	ff 90       	pop	r15
    1a50:	ef 90       	pop	r14
    1a52:	df 90       	pop	r13
    1a54:	cf 90       	pop	r12
    1a56:	bf 90       	pop	r11
    1a58:	af 90       	pop	r10
    1a5a:	9f 90       	pop	r9
    1a5c:	8f 90       	pop	r8
    1a5e:	7f 90       	pop	r7
    1a60:	6f 90       	pop	r6
    1a62:	5f 90       	pop	r5
    1a64:	4f 90       	pop	r4
    1a66:	08 95       	ret

00001a68 <xSerialxPrintf>:
    1a68:	0f 93       	push	r16
    1a6a:	1f 93       	push	r17
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	08 85       	ldd	r16, Y+8	; 0x08
    1a76:	19 85       	ldd	r17, Y+9	; 0x09
    1a78:	f8 01       	movw	r30, r16
    1a7a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	29 f4       	brne	.+10     	; 0x1a8a <xSerialxPrintf+0x22>
    1a80:	67 d9       	rcall	.-3378   	; 0xd50 <vPortYield>
    1a82:	f8 01       	movw	r30, r16
    1a84:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a86:	81 30       	cpi	r24, 0x01	; 1
    1a88:	d9 f3       	breq	.-10     	; 0x1a80 <xSerialxPrintf+0x18>
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	85 8f       	std	Z+29, r24	; 0x1d
    1a90:	63 8d       	ldd	r22, Z+27	; 0x1b
    1a92:	74 8d       	ldd	r23, Z+28	; 0x1c
    1a94:	9e 01       	movw	r18, r28
    1a96:	24 5f       	subi	r18, 0xF4	; 244
    1a98:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9a:	4a 85       	ldd	r20, Y+10	; 0x0a
    1a9c:	5b 85       	ldd	r21, Y+11	; 0x0b
    1a9e:	81 8d       	ldd	r24, Z+25	; 0x19
    1aa0:	92 8d       	ldd	r25, Z+26	; 0x1a
    1aa2:	0e 94 d5 5b 	call	0xb7aa	; 0xb7aa <vsnprintf>
    1aa6:	f8 01       	movw	r30, r16
    1aa8:	61 8d       	ldd	r22, Z+25	; 0x19
    1aaa:	72 8d       	ldd	r23, Z+26	; 0x1a
    1aac:	c8 01       	movw	r24, r16
    1aae:	25 df       	rcall	.-438    	; 0x18fa <xSerialxPrint>
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	15 8e       	std	Z+29, r1	; 0x1d
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	08 95       	ret

00001abe <xSerialRxFlush>:
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	4c 91       	ld	r20, X
    1ac6:	50 e0       	ldi	r21, 0x00	; 0
    1ac8:	48 30       	cpi	r20, 0x08	; 8
    1aca:	51 05       	cpc	r21, r1
    1acc:	e8 f5       	brcc	.+122    	; 0x1b48 <xSerialRxFlush+0x8a>
    1ace:	fa 01       	movw	r30, r20
    1ad0:	88 27       	eor	r24, r24
    1ad2:	e6 58       	subi	r30, 0x86	; 134
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad8:	0c 94 63 59 	jmp	0xb2c6	; 0xb2c6 <__tablejump2__>
    1adc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1ae0:	88 23       	and	r24, r24
    1ae2:	54 f1       	brlt	.+84     	; 0x1b38 <xSerialRxFlush+0x7a>
    1ae4:	31 c0       	rjmp	.+98     	; 0x1b48 <xSerialRxFlush+0x8a>
    1ae6:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1aea:	88 23       	and	r24, r24
    1aec:	e4 f0       	brlt	.+56     	; 0x1b26 <xSerialRxFlush+0x68>
    1aee:	2c c0       	rjmp	.+88     	; 0x1b48 <xSerialRxFlush+0x8a>
    1af0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1af4:	88 23       	and	r24, r24
    1af6:	74 f0       	brlt	.+28     	; 0x1b14 <xSerialRxFlush+0x56>
    1af8:	27 c0       	rjmp	.+78     	; 0x1b48 <xSerialRxFlush+0x8a>
    1afa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1afe:	88 23       	and	r24, r24
    1b00:	1c f5       	brge	.+70     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b02:	c6 ec       	ldi	r28, 0xC6	; 198
    1b04:	d0 e0       	ldi	r29, 0x00	; 0
    1b06:	e0 ec       	ldi	r30, 0xC0	; 192
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	88 81       	ld	r24, Y
    1b0c:	80 81       	ld	r24, Z
    1b0e:	88 23       	and	r24, r24
    1b10:	e4 f3       	brlt	.-8      	; 0x1b0a <xSerialRxFlush+0x4c>
    1b12:	1a c0       	rjmp	.+52     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b14:	ce ec       	ldi	r28, 0xCE	; 206
    1b16:	d0 e0       	ldi	r29, 0x00	; 0
    1b18:	e8 ec       	ldi	r30, 0xC8	; 200
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	88 81       	ld	r24, Y
    1b1e:	80 81       	ld	r24, Z
    1b20:	88 23       	and	r24, r24
    1b22:	e4 f3       	brlt	.-8      	; 0x1b1c <xSerialRxFlush+0x5e>
    1b24:	11 c0       	rjmp	.+34     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b26:	c6 ed       	ldi	r28, 0xD6	; 214
    1b28:	d0 e0       	ldi	r29, 0x00	; 0
    1b2a:	e0 ed       	ldi	r30, 0xD0	; 208
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	88 81       	ld	r24, Y
    1b30:	80 81       	ld	r24, Z
    1b32:	88 23       	and	r24, r24
    1b34:	e4 f3       	brlt	.-8      	; 0x1b2e <xSerialRxFlush+0x70>
    1b36:	08 c0       	rjmp	.+16     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b38:	c6 e3       	ldi	r28, 0x36	; 54
    1b3a:	d1 e0       	ldi	r29, 0x01	; 1
    1b3c:	e0 e3       	ldi	r30, 0x30	; 48
    1b3e:	f1 e0       	ldi	r31, 0x01	; 1
    1b40:	88 81       	ld	r24, Y
    1b42:	80 81       	ld	r24, Z
    1b44:	88 23       	and	r24, r24
    1b46:	e4 f3       	brlt	.-8      	; 0x1b40 <xSerialRxFlush+0x82>
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	0f 92       	push	r0
    1b4e:	12 96       	adiw	r26, 0x02	; 2
    1b50:	1c 92       	st	X, r1
    1b52:	1e 92       	st	-X, r1
    1b54:	11 97       	sbiw	r26, 0x01	; 1
    1b56:	17 96       	adiw	r26, 0x07	; 7
    1b58:	8d 91       	ld	r24, X+
    1b5a:	9c 91       	ld	r25, X
    1b5c:	18 97       	sbiw	r26, 0x08	; 8
    1b5e:	14 96       	adiw	r26, 0x04	; 4
    1b60:	9c 93       	st	X, r25
    1b62:	8e 93       	st	-X, r24
    1b64:	13 97       	sbiw	r26, 0x03	; 3
    1b66:	16 96       	adiw	r26, 0x06	; 6
    1b68:	9c 93       	st	X, r25
    1b6a:	8e 93       	st	-X, r24
    1b6c:	15 97       	sbiw	r26, 0x05	; 5
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	08 95       	ret

00001b78 <xSerialAvailableChar>:
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	0f 92       	push	r0
    1b7e:	fc 01       	movw	r30, r24
    1b80:	81 81       	ldd	r24, Z+1	; 0x01
    1b82:	92 81       	ldd	r25, Z+2	; 0x02
    1b84:	0f 90       	pop	r0
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	08 95       	ret

00001b8a <xSerialPutChar>:
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	dc 01       	movw	r26, r24
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	0f 92       	push	r0
    1b96:	1d 96       	adiw	r26, 0x0d	; 13
    1b98:	2d 91       	ld	r18, X+
    1b9a:	3c 91       	ld	r19, X
    1b9c:	1e 97       	sbiw	r26, 0x0e	; 14
    1b9e:	0f 90       	pop	r0
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	57 96       	adiw	r26, 0x17	; 23
    1ba4:	8d 91       	ld	r24, X+
    1ba6:	9c 91       	ld	r25, X
    1ba8:	58 97       	sbiw	r26, 0x18	; 24
    1baa:	28 17       	cp	r18, r24
    1bac:	39 07       	cpc	r19, r25
    1bae:	f1 f0       	breq	.+60     	; 0x1bec <xSerialPutChar+0x62>
    1bb0:	fd 01       	movw	r30, r26
    1bb2:	3d 96       	adiw	r30, 0x0d	; 13
    1bb4:	c2 81       	ldd	r28, Z+2	; 0x02
    1bb6:	d3 81       	ldd	r29, Z+3	; 0x03
    1bb8:	68 83       	st	Y, r22
    1bba:	82 81       	ldd	r24, Z+2	; 0x02
    1bbc:	93 81       	ldd	r25, Z+3	; 0x03
    1bbe:	01 96       	adiw	r24, 0x01	; 1
    1bc0:	93 83       	std	Z+3, r25	; 0x03
    1bc2:	82 83       	std	Z+2, r24	; 0x02
    1bc4:	20 85       	ldd	r18, Z+8	; 0x08
    1bc6:	31 85       	ldd	r19, Z+9	; 0x09
    1bc8:	82 17       	cp	r24, r18
    1bca:	93 07       	cpc	r25, r19
    1bcc:	21 f4       	brne	.+8      	; 0x1bd6 <xSerialPutChar+0x4c>
    1bce:	86 81       	ldd	r24, Z+6	; 0x06
    1bd0:	97 81       	ldd	r25, Z+7	; 0x07
    1bd2:	93 83       	std	Z+3, r25	; 0x03
    1bd4:	82 83       	std	Z+2, r24	; 0x02
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	0f 92       	push	r0
    1bdc:	80 81       	ld	r24, Z
    1bde:	91 81       	ldd	r25, Z+1	; 0x01
    1be0:	01 96       	adiw	r24, 0x01	; 1
    1be2:	91 83       	std	Z+1, r25	; 0x01
    1be4:	80 83       	st	Z, r24
    1be6:	0f 90       	pop	r0
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	2f c0       	rjmp	.+94     	; 0x1c4a <xSerialPutChar+0xc0>
    1bec:	00 00       	nop
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	0f 92       	push	r0
    1bf4:	1d 96       	adiw	r26, 0x0d	; 13
    1bf6:	2d 91       	ld	r18, X+
    1bf8:	3c 91       	ld	r19, X
    1bfa:	1e 97       	sbiw	r26, 0x0e	; 14
    1bfc:	0f 90       	pop	r0
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	57 96       	adiw	r26, 0x17	; 23
    1c02:	8d 91       	ld	r24, X+
    1c04:	9c 91       	ld	r25, X
    1c06:	58 97       	sbiw	r26, 0x18	; 24
    1c08:	28 17       	cp	r18, r24
    1c0a:	39 07       	cpc	r19, r25
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <xSerialPutChar+0x86>
    1c0e:	45 c0       	rjmp	.+138    	; 0x1c9a <xSerialPutChar+0x110>
    1c10:	fd 01       	movw	r30, r26
    1c12:	3d 96       	adiw	r30, 0x0d	; 13
    1c14:	c2 81       	ldd	r28, Z+2	; 0x02
    1c16:	d3 81       	ldd	r29, Z+3	; 0x03
    1c18:	68 83       	st	Y, r22
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	01 96       	adiw	r24, 0x01	; 1
    1c20:	93 83       	std	Z+3, r25	; 0x03
    1c22:	82 83       	std	Z+2, r24	; 0x02
    1c24:	20 85       	ldd	r18, Z+8	; 0x08
    1c26:	31 85       	ldd	r19, Z+9	; 0x09
    1c28:	82 17       	cp	r24, r18
    1c2a:	93 07       	cpc	r25, r19
    1c2c:	21 f4       	brne	.+8      	; 0x1c36 <xSerialPutChar+0xac>
    1c2e:	86 81       	ldd	r24, Z+6	; 0x06
    1c30:	97 81       	ldd	r25, Z+7	; 0x07
    1c32:	93 83       	std	Z+3, r25	; 0x03
    1c34:	82 83       	std	Z+2, r24	; 0x02
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	0f 92       	push	r0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	91 81       	ldd	r25, Z+1	; 0x01
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	80 83       	st	Z, r24
    1c46:	0f 90       	pop	r0
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	8c 91       	ld	r24, X
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	88 30       	cpi	r24, 0x08	; 8
    1c50:	91 05       	cpc	r25, r1
    1c52:	28 f5       	brcc	.+74     	; 0x1c9e <xSerialPutChar+0x114>
    1c54:	fc 01       	movw	r30, r24
    1c56:	88 27       	eor	r24, r24
    1c58:	ee 57       	subi	r30, 0x7E	; 126
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5e:	0c 94 63 59 	jmp	0xb2c6	; 0xb2c6 <__tablejump2__>
    1c62:	e1 ec       	ldi	r30, 0xC1	; 193
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	80 62       	ori	r24, 0x20	; 32
    1c6a:	80 83       	st	Z, r24
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	18 c0       	rjmp	.+48     	; 0x1ca0 <xSerialPutChar+0x116>
    1c70:	e9 ec       	ldi	r30, 0xC9	; 201
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	80 62       	ori	r24, 0x20	; 32
    1c78:	80 83       	st	Z, r24
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	11 c0       	rjmp	.+34     	; 0x1ca0 <xSerialPutChar+0x116>
    1c7e:	e1 ed       	ldi	r30, 0xD1	; 209
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	80 62       	ori	r24, 0x20	; 32
    1c86:	80 83       	st	Z, r24
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	0a c0       	rjmp	.+20     	; 0x1ca0 <xSerialPutChar+0x116>
    1c8c:	e1 e3       	ldi	r30, 0x31	; 49
    1c8e:	f1 e0       	ldi	r31, 0x01	; 1
    1c90:	80 81       	ld	r24, Z
    1c92:	80 62       	ori	r24, 0x20	; 32
    1c94:	80 83       	st	Z, r24
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	03 c0       	rjmp	.+6      	; 0x1ca0 <xSerialPutChar+0x116>
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	01 c0       	rjmp	.+2      	; 0x1ca0 <xSerialPutChar+0x116>
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	08 95       	ret

00001ca6 <xSerialPortInitMinimal>:
    1ca6:	7f 92       	push	r7
    1ca8:	8f 92       	push	r8
    1caa:	9f 92       	push	r9
    1cac:	af 92       	push	r10
    1cae:	bf 92       	push	r11
    1cb0:	cf 92       	push	r12
    1cb2:	df 92       	push	r13
    1cb4:	ef 92       	push	r14
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	a2 97       	sbiw	r28, 0x22	; 34
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	6c 01       	movw	r12, r24
    1cd2:	76 2e       	mov	r7, r22
    1cd4:	49 01       	movw	r8, r18
    1cd6:	5a 01       	movw	r10, r20
    1cd8:	c7 01       	movw	r24, r14
    1cda:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	a9 f0       	breq	.+42     	; 0x1d0c <xSerialPortInitMinimal+0x66>
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	32 96       	adiw	r30, 0x02	; 2
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	0f 92       	push	r0
    1cec:	11 82       	std	Z+1, r1	; 0x01
    1cee:	10 82       	st	Z, r1
    1cf0:	93 83       	std	Z+3, r25	; 0x03
    1cf2:	82 83       	std	Z+2, r24	; 0x02
    1cf4:	95 83       	std	Z+5, r25	; 0x05
    1cf6:	84 83       	std	Z+4, r24	; 0x04
    1cf8:	97 83       	std	Z+7, r25	; 0x07
    1cfa:	86 83       	std	Z+6, r24	; 0x06
    1cfc:	8e 0d       	add	r24, r14
    1cfe:	9f 1d       	adc	r25, r15
    1d00:	91 87       	std	Z+9, r25	; 0x09
    1d02:	80 87       	std	Z+8, r24	; 0x08
    1d04:	f3 86       	std	Z+11, r15	; 0x0b
    1d06:	e2 86       	std	Z+10, r14	; 0x0a
    1d08:	0f 90       	pop	r0
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	c8 01       	movw	r24, r16
    1d0e:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	a9 f0       	breq	.+42     	; 0x1d40 <xSerialPortInitMinimal+0x9a>
    1d16:	fe 01       	movw	r30, r28
    1d18:	3e 96       	adiw	r30, 0x0e	; 14
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	0f 92       	push	r0
    1d20:	11 82       	std	Z+1, r1	; 0x01
    1d22:	10 82       	st	Z, r1
    1d24:	93 83       	std	Z+3, r25	; 0x03
    1d26:	82 83       	std	Z+2, r24	; 0x02
    1d28:	95 83       	std	Z+5, r25	; 0x05
    1d2a:	84 83       	std	Z+4, r24	; 0x04
    1d2c:	97 83       	std	Z+7, r25	; 0x07
    1d2e:	86 83       	std	Z+6, r24	; 0x06
    1d30:	80 0f       	add	r24, r16
    1d32:	91 1f       	adc	r25, r17
    1d34:	91 87       	std	Z+9, r25	; 0x09
    1d36:	80 87       	std	Z+8, r24	; 0x08
    1d38:	13 87       	std	Z+11, r17	; 0x0b
    1d3a:	02 87       	std	Z+10, r16	; 0x0a
    1d3c:	0f 90       	pop	r0
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	c8 01       	movw	r24, r16
    1d42:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1d46:	9b 8f       	std	Y+27, r25	; 0x1b
    1d48:	8a 8f       	std	Y+26, r24	; 0x1a
    1d4a:	79 82       	std	Y+1, r7	; 0x01
    1d4c:	1d 8f       	std	Y+29, r17	; 0x1d
    1d4e:	0c 8f       	std	Y+28, r16	; 0x1c
    1d50:	1e 8e       	std	Y+30, r1	; 0x1e
    1d52:	8f 8e       	std	Y+31, r8	; 0x1f
    1d54:	98 a2       	std	Y+32, r9	; 0x20
    1d56:	a9 a2       	std	Y+33, r10	; 0x21
    1d58:	ba a2       	std	Y+34, r11	; 0x22
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	f8 94       	cli
    1d5e:	0f 92       	push	r0
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	88 30       	cpi	r24, 0x08	; 8
    1d66:	91 05       	cpc	r25, r1
    1d68:	08 f0       	brcs	.+2      	; 0x1d6c <xSerialPortInitMinimal+0xc6>
    1d6a:	ba c1       	rjmp	.+884    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	88 27       	eor	r24, r24
    1d70:	e6 57       	subi	r30, 0x76	; 118
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	8f 4f       	sbci	r24, 0xFF	; 255
    1d76:	0c 94 63 59 	jmp	0xb2c6	; 0xb2c6 <__tablejump2__>
    1d7a:	d5 01       	movw	r26, r10
    1d7c:	c4 01       	movw	r24, r8
    1d7e:	97 5f       	subi	r25, 0xF7	; 247
    1d80:	a2 4c       	sbci	r26, 0xC2	; 194
    1d82:	bf 4f       	sbci	r27, 0xFF	; 255
    1d84:	bc 01       	movw	r22, r24
    1d86:	cd 01       	movw	r24, r26
    1d88:	66 0f       	add	r22, r22
    1d8a:	77 1f       	adc	r23, r23
    1d8c:	88 1f       	adc	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	66 0f       	add	r22, r22
    1d92:	77 1f       	adc	r23, r23
    1d94:	88 1f       	adc	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	95 01       	movw	r18, r10
    1d9a:	84 01       	movw	r16, r8
    1d9c:	00 0f       	add	r16, r16
    1d9e:	11 1f       	adc	r17, r17
    1da0:	22 1f       	adc	r18, r18
    1da2:	33 1f       	adc	r19, r19
    1da4:	00 0f       	add	r16, r16
    1da6:	11 1f       	adc	r17, r17
    1da8:	22 1f       	adc	r18, r18
    1daa:	33 1f       	adc	r19, r19
    1dac:	a9 01       	movw	r20, r18
    1dae:	98 01       	movw	r18, r16
    1db0:	22 0f       	add	r18, r18
    1db2:	33 1f       	adc	r19, r19
    1db4:	44 1f       	adc	r20, r20
    1db6:	55 1f       	adc	r21, r21
    1db8:	0e 94 41 59 	call	0xb282	; 0xb282 <__udivmodsi4>
    1dbc:	21 50       	subi	r18, 0x01	; 1
    1dbe:	31 09       	sbc	r19, r1
    1dc0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1dc4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1dce:	88 e9       	ldi	r24, 0x98	; 152
    1dd0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1dd4:	8e e0       	ldi	r24, 0x0E	; 14
    1dd6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1dda:	82 c1       	rjmp	.+772    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1ddc:	04 ec       	ldi	r16, 0xC4	; 196
    1dde:	10 e0       	ldi	r17, 0x00	; 0
    1de0:	f8 01       	movw	r30, r16
    1de2:	11 82       	std	Z+1, r1	; 0x01
    1de4:	10 82       	st	Z, r1
    1de6:	6a 9a       	sbi	0x0d, 2	; 13
    1de8:	80 ec       	ldi	r24, 0xC0	; 192
    1dea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1dee:	88 e9       	ldi	r24, 0x98	; 152
    1df0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1df4:	d5 01       	movw	r26, r10
    1df6:	c4 01       	movw	r24, r8
    1df8:	80 58       	subi	r24, 0x80	; 128
    1dfa:	9b 47       	sbci	r25, 0x7B	; 123
    1dfc:	a1 4e       	sbci	r26, 0xE1	; 225
    1dfe:	bf 4f       	sbci	r27, 0xFF	; 255
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	aa 1f       	adc	r26, r26
    1e06:	bb 1f       	adc	r27, r27
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	aa 1f       	adc	r26, r26
    1e0e:	bb 1f       	adc	r27, r27
    1e10:	bc 01       	movw	r22, r24
    1e12:	cd 01       	movw	r24, r26
    1e14:	66 0f       	add	r22, r22
    1e16:	77 1f       	adc	r23, r23
    1e18:	88 1f       	adc	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	88 0c       	add	r8, r8
    1e1e:	99 1c       	adc	r9, r9
    1e20:	aa 1c       	adc	r10, r10
    1e22:	bb 1c       	adc	r11, r11
    1e24:	88 0c       	add	r8, r8
    1e26:	99 1c       	adc	r9, r9
    1e28:	aa 1c       	adc	r10, r10
    1e2a:	bb 1c       	adc	r11, r11
    1e2c:	a5 01       	movw	r20, r10
    1e2e:	94 01       	movw	r18, r8
    1e30:	22 0f       	add	r18, r18
    1e32:	33 1f       	adc	r19, r19
    1e34:	44 1f       	adc	r20, r20
    1e36:	55 1f       	adc	r21, r21
    1e38:	22 0f       	add	r18, r18
    1e3a:	33 1f       	adc	r19, r19
    1e3c:	44 1f       	adc	r20, r20
    1e3e:	55 1f       	adc	r21, r21
    1e40:	0e 94 41 59 	call	0xb282	; 0xb282 <__udivmodsi4>
    1e44:	21 50       	subi	r18, 0x01	; 1
    1e46:	31 09       	sbc	r19, r1
    1e48:	f8 01       	movw	r30, r16
    1e4a:	31 83       	std	Z+1, r19	; 0x01
    1e4c:	20 83       	st	Z, r18
    1e4e:	48 c1       	rjmp	.+656    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1e50:	d5 01       	movw	r26, r10
    1e52:	c4 01       	movw	r24, r8
    1e54:	97 5f       	subi	r25, 0xF7	; 247
    1e56:	a2 4c       	sbci	r26, 0xC2	; 194
    1e58:	bf 4f       	sbci	r27, 0xFF	; 255
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	66 0f       	add	r22, r22
    1e60:	77 1f       	adc	r23, r23
    1e62:	88 1f       	adc	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	66 0f       	add	r22, r22
    1e68:	77 1f       	adc	r23, r23
    1e6a:	88 1f       	adc	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	95 01       	movw	r18, r10
    1e70:	84 01       	movw	r16, r8
    1e72:	00 0f       	add	r16, r16
    1e74:	11 1f       	adc	r17, r17
    1e76:	22 1f       	adc	r18, r18
    1e78:	33 1f       	adc	r19, r19
    1e7a:	00 0f       	add	r16, r16
    1e7c:	11 1f       	adc	r17, r17
    1e7e:	22 1f       	adc	r18, r18
    1e80:	33 1f       	adc	r19, r19
    1e82:	a9 01       	movw	r20, r18
    1e84:	98 01       	movw	r18, r16
    1e86:	22 0f       	add	r18, r18
    1e88:	33 1f       	adc	r19, r19
    1e8a:	44 1f       	adc	r20, r20
    1e8c:	55 1f       	adc	r21, r21
    1e8e:	0e 94 41 59 	call	0xb282	; 0xb282 <__udivmodsi4>
    1e92:	21 50       	subi	r18, 0x01	; 1
    1e94:	31 09       	sbc	r19, r1
    1e96:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    1e9a:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    1e9e:	82 e0       	ldi	r24, 0x02	; 2
    1ea0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1ea4:	88 e9       	ldi	r24, 0x98	; 152
    1ea6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1eaa:	8e e0       	ldi	r24, 0x0E	; 14
    1eac:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1eb0:	17 c1       	rjmp	.+558    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1eb2:	0c ec       	ldi	r16, 0xCC	; 204
    1eb4:	10 e0       	ldi	r17, 0x00	; 0
    1eb6:	f8 01       	movw	r30, r16
    1eb8:	11 82       	std	Z+1, r1	; 0x01
    1eba:	10 82       	st	Z, r1
    1ebc:	55 9a       	sbi	0x0a, 5	; 10
    1ebe:	80 ec       	ldi	r24, 0xC0	; 192
    1ec0:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1ec4:	88 e9       	ldi	r24, 0x98	; 152
    1ec6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1eca:	d5 01       	movw	r26, r10
    1ecc:	c4 01       	movw	r24, r8
    1ece:	80 58       	subi	r24, 0x80	; 128
    1ed0:	9b 47       	sbci	r25, 0x7B	; 123
    1ed2:	a1 4e       	sbci	r26, 0xE1	; 225
    1ed4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	aa 1f       	adc	r26, r26
    1edc:	bb 1f       	adc	r27, r27
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	aa 1f       	adc	r26, r26
    1ee4:	bb 1f       	adc	r27, r27
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	66 0f       	add	r22, r22
    1eec:	77 1f       	adc	r23, r23
    1eee:	88 1f       	adc	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	88 0c       	add	r8, r8
    1ef4:	99 1c       	adc	r9, r9
    1ef6:	aa 1c       	adc	r10, r10
    1ef8:	bb 1c       	adc	r11, r11
    1efa:	88 0c       	add	r8, r8
    1efc:	99 1c       	adc	r9, r9
    1efe:	aa 1c       	adc	r10, r10
    1f00:	bb 1c       	adc	r11, r11
    1f02:	a5 01       	movw	r20, r10
    1f04:	94 01       	movw	r18, r8
    1f06:	22 0f       	add	r18, r18
    1f08:	33 1f       	adc	r19, r19
    1f0a:	44 1f       	adc	r20, r20
    1f0c:	55 1f       	adc	r21, r21
    1f0e:	22 0f       	add	r18, r18
    1f10:	33 1f       	adc	r19, r19
    1f12:	44 1f       	adc	r20, r20
    1f14:	55 1f       	adc	r21, r21
    1f16:	0e 94 41 59 	call	0xb282	; 0xb282 <__udivmodsi4>
    1f1a:	21 50       	subi	r18, 0x01	; 1
    1f1c:	31 09       	sbc	r19, r1
    1f1e:	f8 01       	movw	r30, r16
    1f20:	31 83       	std	Z+1, r19	; 0x01
    1f22:	20 83       	st	Z, r18
    1f24:	dd c0       	rjmp	.+442    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1f26:	d5 01       	movw	r26, r10
    1f28:	c4 01       	movw	r24, r8
    1f2a:	97 5f       	subi	r25, 0xF7	; 247
    1f2c:	a2 4c       	sbci	r26, 0xC2	; 194
    1f2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	66 0f       	add	r22, r22
    1f36:	77 1f       	adc	r23, r23
    1f38:	88 1f       	adc	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	66 0f       	add	r22, r22
    1f3e:	77 1f       	adc	r23, r23
    1f40:	88 1f       	adc	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	95 01       	movw	r18, r10
    1f46:	84 01       	movw	r16, r8
    1f48:	00 0f       	add	r16, r16
    1f4a:	11 1f       	adc	r17, r17
    1f4c:	22 1f       	adc	r18, r18
    1f4e:	33 1f       	adc	r19, r19
    1f50:	00 0f       	add	r16, r16
    1f52:	11 1f       	adc	r17, r17
    1f54:	22 1f       	adc	r18, r18
    1f56:	33 1f       	adc	r19, r19
    1f58:	a9 01       	movw	r20, r18
    1f5a:	98 01       	movw	r18, r16
    1f5c:	22 0f       	add	r18, r18
    1f5e:	33 1f       	adc	r19, r19
    1f60:	44 1f       	adc	r20, r20
    1f62:	55 1f       	adc	r21, r21
    1f64:	0e 94 41 59 	call	0xb282	; 0xb282 <__udivmodsi4>
    1f68:	21 50       	subi	r18, 0x01	; 1
    1f6a:	31 09       	sbc	r19, r1
    1f6c:	30 93 d5 00 	sts	0x00D5, r19	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    1f70:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    1f74:	82 e0       	ldi	r24, 0x02	; 2
    1f76:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1f7a:	88 e9       	ldi	r24, 0x98	; 152
    1f7c:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1f80:	8e e0       	ldi	r24, 0x0E	; 14
    1f82:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1f86:	ac c0       	rjmp	.+344    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1f88:	04 ed       	ldi	r16, 0xD4	; 212
    1f8a:	10 e0       	ldi	r17, 0x00	; 0
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	11 82       	std	Z+1, r1	; 0x01
    1f90:	10 82       	st	Z, r1
    1f92:	e1 e0       	ldi	r30, 0x01	; 1
    1f94:	f1 e0       	ldi	r31, 0x01	; 1
    1f96:	80 81       	ld	r24, Z
    1f98:	84 60       	ori	r24, 0x04	; 4
    1f9a:	80 83       	st	Z, r24
    1f9c:	80 ec       	ldi	r24, 0xC0	; 192
    1f9e:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1fa2:	88 e9       	ldi	r24, 0x98	; 152
    1fa4:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1fa8:	d5 01       	movw	r26, r10
    1faa:	c4 01       	movw	r24, r8
    1fac:	80 58       	subi	r24, 0x80	; 128
    1fae:	9b 47       	sbci	r25, 0x7B	; 123
    1fb0:	a1 4e       	sbci	r26, 0xE1	; 225
    1fb2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	aa 1f       	adc	r26, r26
    1fba:	bb 1f       	adc	r27, r27
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	aa 1f       	adc	r26, r26
    1fc2:	bb 1f       	adc	r27, r27
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	66 0f       	add	r22, r22
    1fca:	77 1f       	adc	r23, r23
    1fcc:	88 1f       	adc	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	88 0c       	add	r8, r8
    1fd2:	99 1c       	adc	r9, r9
    1fd4:	aa 1c       	adc	r10, r10
    1fd6:	bb 1c       	adc	r11, r11
    1fd8:	88 0c       	add	r8, r8
    1fda:	99 1c       	adc	r9, r9
    1fdc:	aa 1c       	adc	r10, r10
    1fde:	bb 1c       	adc	r11, r11
    1fe0:	a5 01       	movw	r20, r10
    1fe2:	94 01       	movw	r18, r8
    1fe4:	22 0f       	add	r18, r18
    1fe6:	33 1f       	adc	r19, r19
    1fe8:	44 1f       	adc	r20, r20
    1fea:	55 1f       	adc	r21, r21
    1fec:	22 0f       	add	r18, r18
    1fee:	33 1f       	adc	r19, r19
    1ff0:	44 1f       	adc	r20, r20
    1ff2:	55 1f       	adc	r21, r21
    1ff4:	0e 94 41 59 	call	0xb282	; 0xb282 <__udivmodsi4>
    1ff8:	21 50       	subi	r18, 0x01	; 1
    1ffa:	31 09       	sbc	r19, r1
    1ffc:	f8 01       	movw	r30, r16
    1ffe:	31 83       	std	Z+1, r19	; 0x01
    2000:	20 83       	st	Z, r18
    2002:	6e c0       	rjmp	.+220    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    2004:	d5 01       	movw	r26, r10
    2006:	c4 01       	movw	r24, r8
    2008:	97 5f       	subi	r25, 0xF7	; 247
    200a:	a2 4c       	sbci	r26, 0xC2	; 194
    200c:	bf 4f       	sbci	r27, 0xFF	; 255
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	66 0f       	add	r22, r22
    2014:	77 1f       	adc	r23, r23
    2016:	88 1f       	adc	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	66 0f       	add	r22, r22
    201c:	77 1f       	adc	r23, r23
    201e:	88 1f       	adc	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	95 01       	movw	r18, r10
    2024:	84 01       	movw	r16, r8
    2026:	00 0f       	add	r16, r16
    2028:	11 1f       	adc	r17, r17
    202a:	22 1f       	adc	r18, r18
    202c:	33 1f       	adc	r19, r19
    202e:	00 0f       	add	r16, r16
    2030:	11 1f       	adc	r17, r17
    2032:	22 1f       	adc	r18, r18
    2034:	33 1f       	adc	r19, r19
    2036:	a9 01       	movw	r20, r18
    2038:	98 01       	movw	r18, r16
    203a:	22 0f       	add	r18, r18
    203c:	33 1f       	adc	r19, r19
    203e:	44 1f       	adc	r20, r20
    2040:	55 1f       	adc	r21, r21
    2042:	0e 94 41 59 	call	0xb282	; 0xb282 <__udivmodsi4>
    2046:	21 50       	subi	r18, 0x01	; 1
    2048:	31 09       	sbc	r19, r1
    204a:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    204e:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2058:	88 e9       	ldi	r24, 0x98	; 152
    205a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    205e:	8e e0       	ldi	r24, 0x0E	; 14
    2060:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    2064:	3d c0       	rjmp	.+122    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    2066:	04 e3       	ldi	r16, 0x34	; 52
    2068:	11 e0       	ldi	r17, 0x01	; 1
    206a:	f8 01       	movw	r30, r16
    206c:	11 82       	std	Z+1, r1	; 0x01
    206e:	10 82       	st	Z, r1
    2070:	e4 e0       	ldi	r30, 0x04	; 4
    2072:	f1 e0       	ldi	r31, 0x01	; 1
    2074:	80 81       	ld	r24, Z
    2076:	84 60       	ori	r24, 0x04	; 4
    2078:	80 83       	st	Z, r24
    207a:	80 ec       	ldi	r24, 0xC0	; 192
    207c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    2080:	88 e9       	ldi	r24, 0x98	; 152
    2082:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    2086:	d5 01       	movw	r26, r10
    2088:	c4 01       	movw	r24, r8
    208a:	80 58       	subi	r24, 0x80	; 128
    208c:	9b 47       	sbci	r25, 0x7B	; 123
    208e:	a1 4e       	sbci	r26, 0xE1	; 225
    2090:	bf 4f       	sbci	r27, 0xFF	; 255
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	aa 1f       	adc	r26, r26
    2098:	bb 1f       	adc	r27, r27
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	aa 1f       	adc	r26, r26
    20a0:	bb 1f       	adc	r27, r27
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	66 0f       	add	r22, r22
    20a8:	77 1f       	adc	r23, r23
    20aa:	88 1f       	adc	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	88 0c       	add	r8, r8
    20b0:	99 1c       	adc	r9, r9
    20b2:	aa 1c       	adc	r10, r10
    20b4:	bb 1c       	adc	r11, r11
    20b6:	88 0c       	add	r8, r8
    20b8:	99 1c       	adc	r9, r9
    20ba:	aa 1c       	adc	r10, r10
    20bc:	bb 1c       	adc	r11, r11
    20be:	a5 01       	movw	r20, r10
    20c0:	94 01       	movw	r18, r8
    20c2:	22 0f       	add	r18, r18
    20c4:	33 1f       	adc	r19, r19
    20c6:	44 1f       	adc	r20, r20
    20c8:	55 1f       	adc	r21, r21
    20ca:	22 0f       	add	r18, r18
    20cc:	33 1f       	adc	r19, r19
    20ce:	44 1f       	adc	r20, r20
    20d0:	55 1f       	adc	r21, r21
    20d2:	0e 94 41 59 	call	0xb282	; 0xb282 <__udivmodsi4>
    20d6:	21 50       	subi	r18, 0x01	; 1
    20d8:	31 09       	sbc	r19, r1
    20da:	f8 01       	movw	r30, r16
    20dc:	31 83       	std	Z+1, r19	; 0x01
    20de:	20 83       	st	Z, r18
    20e0:	0f 90       	pop	r0
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	82 e2       	ldi	r24, 0x22	; 34
    20e6:	fe 01       	movw	r30, r28
    20e8:	31 96       	adiw	r30, 0x01	; 1
    20ea:	d6 01       	movw	r26, r12
    20ec:	01 90       	ld	r0, Z+
    20ee:	0d 92       	st	X+, r0
    20f0:	8a 95       	dec	r24
    20f2:	e1 f7       	brne	.-8      	; 0x20ec <xSerialPortInitMinimal+0x446>
    20f4:	c6 01       	movw	r24, r12
    20f6:	a2 96       	adiw	r28, 0x22	; 34
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	ff 90       	pop	r15
    210c:	ef 90       	pop	r14
    210e:	df 90       	pop	r13
    2110:	cf 90       	pop	r12
    2112:	bf 90       	pop	r11
    2114:	af 90       	pop	r10
    2116:	9f 90       	pop	r9
    2118:	8f 90       	pop	r8
    211a:	7f 90       	pop	r7
    211c:	08 95       	ret

0000211e <__vector_25>:
#elif defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
ISR( USART0_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART0_RX_vect )

#endif
{
    211e:	1f 92       	push	r1
    2120:	0f 92       	push	r0
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	0f 92       	push	r0
    2126:	11 24       	eor	r1, r1
    2128:	0b b6       	in	r0, 0x3b	; 59
    212a:	0f 92       	push	r0
    212c:	2f 93       	push	r18
    212e:	3f 93       	push	r19
    2130:	4f 93       	push	r20
    2132:	5f 93       	push	r21
    2134:	6f 93       	push	r22
    2136:	7f 93       	push	r23
    2138:	8f 93       	push	r24
    213a:	9f 93       	push	r25
    213c:	af 93       	push	r26
    213e:	bf 93       	push	r27
    2140:	cf 93       	push	r28
    2142:	ef 93       	push	r30
    2144:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR0A & (_BV(FE0)|_BV(DOR0)|_BV(UPE0)) ) )
    2146:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    214a:	8c 71       	andi	r24, 0x1C	; 28
    214c:	71 f0       	breq	.+28     	; 0x216a <__vector_25+0x4c>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR0A & (1<<RXC0) ) erroredByte = UDR0;
    214e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    2152:	88 23       	and	r24, r24
    2154:	0c f0       	brlt	.+2      	; 0x2158 <__vector_25+0x3a>
    2156:	57 c0       	rjmp	.+174    	; 0x2206 <__stack+0x7>
    2158:	a6 ec       	ldi	r26, 0xC6	; 198
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e0 ec       	ldi	r30, 0xC0	; 192
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	8c 91       	ld	r24, X
    2162:	80 81       	ld	r24, Z
    2164:	88 23       	and	r24, r24
    2166:	e4 f3       	brlt	.-8      	; 0x2160 <__vector_25+0x42>
    2168:	4e c0       	rjmp	.+156    	; 0x2206 <__stack+0x7>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR0;
    216a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
//UCSR3B &= ~ ( _BV(RXCIE3) | _BV(RXEN3) | _BV(TXEN3));
if(!port_3)
    216e:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <port_3>
    2172:	81 11       	cpse	r24, r1
    2174:	1d c0       	rjmp	.+58     	; 0x21b0 <__vector_25+0x92>
{
port_0=true;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <port_0>
//timer_1_Init();
stop_1_Timer();
    217c:	0e 94 2d 24 	call	0x485a	; 0x485a <stop_1_Timer>
TCNT1=0;//my cod		
    2180:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    2184:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
frame[indexBuf] = cChar;//my cod
    2188:	e0 91 a9 07 	lds	r30, 0x07A9	; 0x8007a9 <indexBuf>
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	e4 53       	subi	r30, 0x34	; 52
    2190:	f8 4f       	sbci	r31, 0xF8	; 248
    2192:	c0 83       	st	Z, r28
indexBuf++;//my cod
    2194:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <indexBuf>
    2198:	8f 5f       	subi	r24, 0xFF	; 255
    219a:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <indexBuf>
if(indexBuf == portSERIAL_BUFFER_RX ) overflow=1;//my cod
    219e:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <indexBuf>
    21a2:	8f 3f       	cpi	r24, 0xFF	; 255
    21a4:	19 f4       	brne	.+6      	; 0x21ac <__vector_25+0x8e>
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	80 93 85 07 	sts	0x0785, r24	; 0x800785 <overflow>
start_1_Timer();//my cod
    21ac:	0e 94 22 24 	call	0x4844	; 0x4844 <start_1_Timer>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	0f 92       	push	r0
	{
	    count = buffer->count;
    21b6:	e3 e6       	ldi	r30, 0x63	; 99
    21b8:	f7 e0       	ldi	r31, 0x07	; 7
    21ba:	21 81       	ldd	r18, Z+1	; 0x01
    21bc:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    21be:	0f 90       	pop	r0
    21c0:	0f be       	out	0x3f, r0	; 63
}
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerialPort.xRxedChars) ) )
    21c2:	83 85       	ldd	r24, Z+11	; 0x0b
    21c4:	94 85       	ldd	r25, Z+12	; 0x0c
    21c6:	28 17       	cp	r18, r24
    21c8:	39 07       	cpc	r19, r25
    21ca:	e9 f0       	breq	.+58     	; 0x2206 <__stack+0x7>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    21cc:	e4 e6       	ldi	r30, 0x64	; 100
    21ce:	f7 e0       	ldi	r31, 0x07	; 7

	*buffer->in = data;
    21d0:	a2 81       	ldd	r26, Z+2	; 0x02
    21d2:	b3 81       	ldd	r27, Z+3	; 0x03
    21d4:	cc 93       	st	X, r28

	if (++buffer->in == buffer->end)
    21d6:	82 81       	ldd	r24, Z+2	; 0x02
    21d8:	93 81       	ldd	r25, Z+3	; 0x03
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	93 83       	std	Z+3, r25	; 0x03
    21de:	82 83       	std	Z+2, r24	; 0x02
    21e0:	20 85       	ldd	r18, Z+8	; 0x08
    21e2:	31 85       	ldd	r19, Z+9	; 0x09
    21e4:	82 17       	cp	r24, r18
    21e6:	93 07       	cpc	r25, r19
    21e8:	21 f4       	brne	.+8      	; 0x21f2 <__vector_25+0xd4>
	  buffer->in = buffer->start;
    21ea:	86 81       	ldd	r24, Z+6	; 0x06
    21ec:	97 81       	ldd	r25, Z+7	; 0x07
    21ee:	93 83       	std	Z+3, r25	; 0x03
    21f0:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	0f 92       	push	r0
	{
	    buffer->count++;
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	01 96       	adiw	r24, 0x01	; 1
    21fe:	91 83       	std	Z+1, r25	; 0x01
    2200:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    2202:	0f 90       	pop	r0
    2204:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerialPort.xRxedChars), cChar);
	}
}
    2206:	ff 91       	pop	r31
    2208:	ef 91       	pop	r30
    220a:	cf 91       	pop	r28
    220c:	bf 91       	pop	r27
    220e:	af 91       	pop	r26
    2210:	9f 91       	pop	r25
    2212:	8f 91       	pop	r24
    2214:	7f 91       	pop	r23
    2216:	6f 91       	pop	r22
    2218:	5f 91       	pop	r21
    221a:	4f 91       	pop	r20
    221c:	3f 91       	pop	r19
    221e:	2f 91       	pop	r18
    2220:	0f 90       	pop	r0
    2222:	0b be       	out	0x3b, r0	; 59
    2224:	0f 90       	pop	r0
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	0f 90       	pop	r0
    222a:	1f 90       	pop	r1
    222c:	18 95       	reti

0000222e <__vector_26>:
#elif defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
ISR( USART0_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART0_UDRE_vect )

#endif
{
    222e:	1f 92       	push	r1
    2230:	0f 92       	push	r0
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	0f 92       	push	r0
    2236:	11 24       	eor	r1, r1
    2238:	0b b6       	in	r0, 0x3b	; 59
    223a:	0f 92       	push	r0
    223c:	2f 93       	push	r18
    223e:	8f 93       	push	r24
    2240:	9f 93       	push	r25
    2242:	af 93       	push	r26
    2244:	bf 93       	push	r27
    2246:	ef 93       	push	r30
    2248:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	0f 92       	push	r0
	{
	    count = buffer->count;
    2250:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <xSerialPort+0xd>
    2254:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <xSerialPort+0xe>
	}
	portEXIT_CRITICAL();
    2258:	0f 90       	pop	r0
    225a:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerialPort.xCharsForTx) ) )
    225c:	89 2b       	or	r24, r25
    225e:	31 f4       	brne	.+12     	; 0x226c <__vector_26+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt0_Off();
    2260:	e1 ec       	ldi	r30, 0xC1	; 193
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	8f 7d       	andi	r24, 0xDF	; 223
    2268:	80 83       	st	Z, r24
    226a:	1c c0       	rjmp	.+56     	; 0x22a4 <__vector_26+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    226c:	e0 e7       	ldi	r30, 0x70	; 112
    226e:	f7 e0       	ldi	r31, 0x07	; 7

	uint8_t data = *buffer->out;
    2270:	a4 81       	ldd	r26, Z+4	; 0x04
    2272:	b5 81       	ldd	r27, Z+5	; 0x05
    2274:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    2276:	b5 83       	std	Z+5, r27	; 0x05
    2278:	a4 83       	std	Z+4, r26	; 0x04
    227a:	80 85       	ldd	r24, Z+8	; 0x08
    227c:	91 85       	ldd	r25, Z+9	; 0x09
    227e:	a8 17       	cp	r26, r24
    2280:	b9 07       	cpc	r27, r25
    2282:	21 f4       	brne	.+8      	; 0x228c <__vector_26+0x5e>
	  buffer->out = buffer->start;
    2284:	86 81       	ldd	r24, Z+6	; 0x06
    2286:	97 81       	ldd	r25, Z+7	; 0x07
    2288:	95 83       	std	Z+5, r25	; 0x05
    228a:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	0f 92       	push	r0
	{
	    buffer->count--;
    2292:	80 81       	ld	r24, Z
    2294:	91 81       	ldd	r25, Z+1	; 0x01
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    229c:	0f 90       	pop	r0
    229e:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR0 = ringBuffer_Pop( (ringBuffer_t*) &(xSerialPort.xCharsForTx) );
    22a0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    22a4:	ff 91       	pop	r31
    22a6:	ef 91       	pop	r30
    22a8:	bf 91       	pop	r27
    22aa:	af 91       	pop	r26
    22ac:	9f 91       	pop	r25
    22ae:	8f 91       	pop	r24
    22b0:	2f 91       	pop	r18
    22b2:	0f 90       	pop	r0
    22b4:	0b be       	out	0x3b, r0	; 59
    22b6:	0f 90       	pop	r0
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	0f 90       	pop	r0
    22bc:	1f 90       	pop	r1
    22be:	18 95       	reti

000022c0 <__vector_36>:

#if defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

ISR( USART1_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART1_RX_vect )
{
    22c0:	1f 92       	push	r1
    22c2:	0f 92       	push	r0
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	0f 92       	push	r0
    22c8:	11 24       	eor	r1, r1
    22ca:	0b b6       	in	r0, 0x3b	; 59
    22cc:	0f 92       	push	r0
    22ce:	2f 93       	push	r18
    22d0:	3f 93       	push	r19
    22d2:	4f 93       	push	r20
    22d4:	8f 93       	push	r24
    22d6:	9f 93       	push	r25
    22d8:	af 93       	push	r26
    22da:	bf 93       	push	r27
    22dc:	ef 93       	push	r30
    22de:	ff 93       	push	r31
	/* Get status and data from buffer */
     
	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR1A &  (_BV(FE1)|_BV(DOR1)|_BV(UPE1)) ) )
    22e0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    22e4:	8c 71       	andi	r24, 0x1C	; 28
    22e6:	71 f0       	breq	.+28     	; 0x2304 <__vector_36+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR1A & (1<<RXC1) ) erroredByte = UDR1;
    22e8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    22ec:	88 23       	and	r24, r24
    22ee:	0c f0       	brlt	.+2      	; 0x22f2 <__vector_36+0x32>
    22f0:	36 c0       	rjmp	.+108    	; 0x235e <__vector_36+0x9e>
    22f2:	ae ec       	ldi	r26, 0xCE	; 206
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e8 ec       	ldi	r30, 0xC8	; 200
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	8c 91       	ld	r24, X
    22fc:	80 81       	ld	r24, Z
    22fe:	88 23       	and	r24, r24
    2300:	e4 f3       	brlt	.-8      	; 0x22fa <__vector_36+0x3a>
    2302:	2d c0       	rjmp	.+90     	; 0x235e <__vector_36+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR1;
    2304:	40 91 ce 00 	lds	r20, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	0f 92       	push	r0
	{
	    count = buffer->count;
    230e:	eb ec       	ldi	r30, 0xCB	; 203
    2310:	f8 e0       	ldi	r31, 0x08	; 8
    2312:	21 81       	ldd	r18, Z+1	; 0x01
    2314:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2316:	0f 90       	pop	r0
    2318:	0f be       	out	0x3f, r0	; 63
				
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial1Port.xRxedChars) ) )
    231a:	83 85       	ldd	r24, Z+11	; 0x0b
    231c:	94 85       	ldd	r25, Z+12	; 0x0c
    231e:	28 17       	cp	r18, r24
    2320:	39 07       	cpc	r19, r25
    2322:	e9 f0       	breq	.+58     	; 0x235e <__vector_36+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    2324:	ec ec       	ldi	r30, 0xCC	; 204
    2326:	f8 e0       	ldi	r31, 0x08	; 8

	*buffer->in = data;
    2328:	a2 81       	ldd	r26, Z+2	; 0x02
    232a:	b3 81       	ldd	r27, Z+3	; 0x03
    232c:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	01 96       	adiw	r24, 0x01	; 1
    2334:	93 83       	std	Z+3, r25	; 0x03
    2336:	82 83       	std	Z+2, r24	; 0x02
    2338:	20 85       	ldd	r18, Z+8	; 0x08
    233a:	31 85       	ldd	r19, Z+9	; 0x09
    233c:	82 17       	cp	r24, r18
    233e:	93 07       	cpc	r25, r19
    2340:	21 f4       	brne	.+8      	; 0x234a <__vector_36+0x8a>
	  buffer->in = buffer->start;
    2342:	86 81       	ldd	r24, Z+6	; 0x06
    2344:	97 81       	ldd	r25, Z+7	; 0x07
    2346:	93 83       	std	Z+3, r25	; 0x03
    2348:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	0f 92       	push	r0
	{
	    buffer->count++;
    2350:	80 81       	ld	r24, Z
    2352:	91 81       	ldd	r25, Z+1	; 0x01
    2354:	01 96       	adiw	r24, 0x01	; 1
    2356:	91 83       	std	Z+1, r25	; 0x01
    2358:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    235a:	0f 90       	pop	r0
    235c:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial1Port.xRxedChars), cChar);
			
	}
}
    235e:	ff 91       	pop	r31
    2360:	ef 91       	pop	r30
    2362:	bf 91       	pop	r27
    2364:	af 91       	pop	r26
    2366:	9f 91       	pop	r25
    2368:	8f 91       	pop	r24
    236a:	4f 91       	pop	r20
    236c:	3f 91       	pop	r19
    236e:	2f 91       	pop	r18
    2370:	0f 90       	pop	r0
    2372:	0b be       	out	0x3b, r0	; 59
    2374:	0f 90       	pop	r0
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	0f 90       	pop	r0
    237a:	1f 90       	pop	r1
    237c:	18 95       	reti

0000237e <__vector_37>:
/*-----------------------------------------------------------*/

ISR( USART1_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART1_UDRE_vect )
{
    237e:	1f 92       	push	r1
    2380:	0f 92       	push	r0
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	0f 92       	push	r0
    2386:	11 24       	eor	r1, r1
    2388:	0b b6       	in	r0, 0x3b	; 59
    238a:	0f 92       	push	r0
    238c:	2f 93       	push	r18
    238e:	8f 93       	push	r24
    2390:	9f 93       	push	r25
    2392:	af 93       	push	r26
    2394:	bf 93       	push	r27
    2396:	ef 93       	push	r30
    2398:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	0f 92       	push	r0
	{
	    count = buffer->count;
    23a0:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <xSerial1Port+0xd>
    23a4:	90 91 d9 08 	lds	r25, 0x08D9	; 0x8008d9 <xSerial1Port+0xe>
	}
	portEXIT_CRITICAL();
    23a8:	0f 90       	pop	r0
    23aa:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) ) )
    23ac:	89 2b       	or	r24, r25
    23ae:	31 f4       	brne	.+12     	; 0x23bc <__vector_37+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt1_Off();
    23b0:	e9 ec       	ldi	r30, 0xC9	; 201
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	8f 7d       	andi	r24, 0xDF	; 223
    23b8:	80 83       	st	Z, r24
    23ba:	1c c0       	rjmp	.+56     	; 0x23f4 <__vector_37+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    23bc:	e8 ed       	ldi	r30, 0xD8	; 216
    23be:	f8 e0       	ldi	r31, 0x08	; 8

	uint8_t data = *buffer->out;
    23c0:	a4 81       	ldd	r26, Z+4	; 0x04
    23c2:	b5 81       	ldd	r27, Z+5	; 0x05
    23c4:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    23c6:	b5 83       	std	Z+5, r27	; 0x05
    23c8:	a4 83       	std	Z+4, r26	; 0x04
    23ca:	80 85       	ldd	r24, Z+8	; 0x08
    23cc:	91 85       	ldd	r25, Z+9	; 0x09
    23ce:	a8 17       	cp	r26, r24
    23d0:	b9 07       	cpc	r27, r25
    23d2:	21 f4       	brne	.+8      	; 0x23dc <__vector_37+0x5e>
	  buffer->out = buffer->start;
    23d4:	86 81       	ldd	r24, Z+6	; 0x06
    23d6:	97 81       	ldd	r25, Z+7	; 0x07
    23d8:	95 83       	std	Z+5, r25	; 0x05
    23da:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	0f 92       	push	r0
	{
	    buffer->count--;
    23e2:	80 81       	ld	r24, Z
    23e4:	91 81       	ldd	r25, Z+1	; 0x01
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	91 83       	std	Z+1, r25	; 0x01
    23ea:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    23ec:	0f 90       	pop	r0
    23ee:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR1 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) );
    23f0:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
	}
}
    23f4:	ff 91       	pop	r31
    23f6:	ef 91       	pop	r30
    23f8:	bf 91       	pop	r27
    23fa:	af 91       	pop	r26
    23fc:	9f 91       	pop	r25
    23fe:	8f 91       	pop	r24
    2400:	2f 91       	pop	r18
    2402:	0f 90       	pop	r0
    2404:	0b be       	out	0x3b, r0	; 59
    2406:	0f 90       	pop	r0
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	0f 90       	pop	r0
    240c:	1f 90       	pop	r1
    240e:	18 95       	reti

00002410 <__vector_51>:

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

ISR( USART2_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART2_RX_vect )
{
    2410:	1f 92       	push	r1
    2412:	0f 92       	push	r0
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	0f 92       	push	r0
    2418:	11 24       	eor	r1, r1
    241a:	0b b6       	in	r0, 0x3b	; 59
    241c:	0f 92       	push	r0
    241e:	2f 93       	push	r18
    2420:	3f 93       	push	r19
    2422:	4f 93       	push	r20
    2424:	8f 93       	push	r24
    2426:	9f 93       	push	r25
    2428:	af 93       	push	r26
    242a:	bf 93       	push	r27
    242c:	ef 93       	push	r30
    242e:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR2A & (_BV(FE2)|_BV(DOR2)|_BV(UPE2)) ) )
    2430:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    2434:	8c 71       	andi	r24, 0x1C	; 28
    2436:	71 f0       	breq	.+28     	; 0x2454 <__vector_51+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR2A & (1<<RXC2) ) erroredByte = UDR2;
    2438:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    243c:	88 23       	and	r24, r24
    243e:	0c f0       	brlt	.+2      	; 0x2442 <__vector_51+0x32>
    2440:	36 c0       	rjmp	.+108    	; 0x24ae <__vector_51+0x9e>
    2442:	a6 ed       	ldi	r26, 0xD6	; 214
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e0 ed       	ldi	r30, 0xD0	; 208
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	8c 91       	ld	r24, X
    244c:	80 81       	ld	r24, Z
    244e:	88 23       	and	r24, r24
    2450:	e4 f3       	brlt	.-8      	; 0x244a <__vector_51+0x3a>
    2452:	2d c0       	rjmp	.+90     	; 0x24ae <__vector_51+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR2;
    2454:	40 91 d6 00 	lds	r20, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	0f 92       	push	r0
	{
	    count = buffer->count;
    245e:	e7 e8       	ldi	r30, 0x87	; 135
    2460:	f7 e0       	ldi	r31, 0x07	; 7
    2462:	21 81       	ldd	r18, Z+1	; 0x01
    2464:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2466:	0f 90       	pop	r0
    2468:	0f be       	out	0x3f, r0	; 63

		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial2Port.xRxedChars) ) )
    246a:	83 85       	ldd	r24, Z+11	; 0x0b
    246c:	94 85       	ldd	r25, Z+12	; 0x0c
    246e:	28 17       	cp	r18, r24
    2470:	39 07       	cpc	r19, r25
    2472:	e9 f0       	breq	.+58     	; 0x24ae <__vector_51+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    2474:	e8 e8       	ldi	r30, 0x88	; 136
    2476:	f7 e0       	ldi	r31, 0x07	; 7

	*buffer->in = data;
    2478:	a2 81       	ldd	r26, Z+2	; 0x02
    247a:	b3 81       	ldd	r27, Z+3	; 0x03
    247c:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	93 81       	ldd	r25, Z+3	; 0x03
    2482:	01 96       	adiw	r24, 0x01	; 1
    2484:	93 83       	std	Z+3, r25	; 0x03
    2486:	82 83       	std	Z+2, r24	; 0x02
    2488:	20 85       	ldd	r18, Z+8	; 0x08
    248a:	31 85       	ldd	r19, Z+9	; 0x09
    248c:	82 17       	cp	r24, r18
    248e:	93 07       	cpc	r25, r19
    2490:	21 f4       	brne	.+8      	; 0x249a <__vector_51+0x8a>
	  buffer->in = buffer->start;
    2492:	86 81       	ldd	r24, Z+6	; 0x06
    2494:	97 81       	ldd	r25, Z+7	; 0x07
    2496:	93 83       	std	Z+3, r25	; 0x03
    2498:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	0f 92       	push	r0
	{
	    buffer->count++;
    24a0:	80 81       	ld	r24, Z
    24a2:	91 81       	ldd	r25, Z+1	; 0x01
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    24aa:	0f 90       	pop	r0
    24ac:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial2Port.xRxedChars), cChar);
	}
}
    24ae:	ff 91       	pop	r31
    24b0:	ef 91       	pop	r30
    24b2:	bf 91       	pop	r27
    24b4:	af 91       	pop	r26
    24b6:	9f 91       	pop	r25
    24b8:	8f 91       	pop	r24
    24ba:	4f 91       	pop	r20
    24bc:	3f 91       	pop	r19
    24be:	2f 91       	pop	r18
    24c0:	0f 90       	pop	r0
    24c2:	0b be       	out	0x3b, r0	; 59
    24c4:	0f 90       	pop	r0
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	0f 90       	pop	r0
    24ca:	1f 90       	pop	r1
    24cc:	18 95       	reti

000024ce <__vector_52>:
/*-----------------------------------------------------------*/

ISR( USART2_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART2_UDRE_vect )
{
    24ce:	1f 92       	push	r1
    24d0:	0f 92       	push	r0
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	0f 92       	push	r0
    24d6:	11 24       	eor	r1, r1
    24d8:	0b b6       	in	r0, 0x3b	; 59
    24da:	0f 92       	push	r0
    24dc:	2f 93       	push	r18
    24de:	8f 93       	push	r24
    24e0:	9f 93       	push	r25
    24e2:	af 93       	push	r26
    24e4:	bf 93       	push	r27
    24e6:	ef 93       	push	r30
    24e8:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	0f 92       	push	r0
	{
	    count = buffer->count;
    24f0:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <xSerial2Port+0xd>
    24f4:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <xSerial2Port+0xe>
	}
	portEXIT_CRITICAL();
    24f8:	0f 90       	pop	r0
    24fa:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) ) )
    24fc:	89 2b       	or	r24, r25
    24fe:	31 f4       	brne	.+12     	; 0x250c <__vector_52+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt2_Off();
    2500:	e1 ed       	ldi	r30, 0xD1	; 209
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	8f 7d       	andi	r24, 0xDF	; 223
    2508:	80 83       	st	Z, r24
    250a:	1c c0       	rjmp	.+56     	; 0x2544 <__vector_52+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    250c:	e4 e9       	ldi	r30, 0x94	; 148
    250e:	f7 e0       	ldi	r31, 0x07	; 7

	uint8_t data = *buffer->out;
    2510:	a4 81       	ldd	r26, Z+4	; 0x04
    2512:	b5 81       	ldd	r27, Z+5	; 0x05
    2514:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    2516:	b5 83       	std	Z+5, r27	; 0x05
    2518:	a4 83       	std	Z+4, r26	; 0x04
    251a:	80 85       	ldd	r24, Z+8	; 0x08
    251c:	91 85       	ldd	r25, Z+9	; 0x09
    251e:	a8 17       	cp	r26, r24
    2520:	b9 07       	cpc	r27, r25
    2522:	21 f4       	brne	.+8      	; 0x252c <__vector_52+0x5e>
	  buffer->out = buffer->start;
    2524:	86 81       	ldd	r24, Z+6	; 0x06
    2526:	97 81       	ldd	r25, Z+7	; 0x07
    2528:	95 83       	std	Z+5, r25	; 0x05
    252a:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	0f 92       	push	r0
	{
	    buffer->count--;
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	91 83       	std	Z+1, r25	; 0x01
    253a:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    253c:	0f 90       	pop	r0
    253e:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR2 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) );
    2540:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	}
}
    2544:	ff 91       	pop	r31
    2546:	ef 91       	pop	r30
    2548:	bf 91       	pop	r27
    254a:	af 91       	pop	r26
    254c:	9f 91       	pop	r25
    254e:	8f 91       	pop	r24
    2550:	2f 91       	pop	r18
    2552:	0f 90       	pop	r0
    2554:	0b be       	out	0x3b, r0	; 59
    2556:	0f 90       	pop	r0
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	0f 90       	pop	r0
    255c:	1f 90       	pop	r1
    255e:	18 95       	reti

00002560 <__vector_54>:
/*-----------------------------------------------------------*/

ISR( USART3_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART3_RX_vect )
{
    2560:	1f 92       	push	r1
    2562:	0f 92       	push	r0
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	0f 92       	push	r0
    2568:	11 24       	eor	r1, r1
    256a:	0b b6       	in	r0, 0x3b	; 59
    256c:	0f 92       	push	r0
    256e:	2f 93       	push	r18
    2570:	3f 93       	push	r19
    2572:	4f 93       	push	r20
    2574:	5f 93       	push	r21
    2576:	6f 93       	push	r22
    2578:	7f 93       	push	r23
    257a:	8f 93       	push	r24
    257c:	9f 93       	push	r25
    257e:	af 93       	push	r26
    2580:	bf 93       	push	r27
    2582:	cf 93       	push	r28
    2584:	ef 93       	push	r30
    2586:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR3A & (_BV(FE3)|_BV(DOR3)|_BV(UPE3)) ) )
    2588:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    258c:	8c 71       	andi	r24, 0x1C	; 28
    258e:	71 f0       	breq	.+28     	; 0x25ac <__vector_54+0x4c>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR3A & (1<<RXC3) ) erroredByte = UDR3;
    2590:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2594:	88 23       	and	r24, r24
    2596:	0c f0       	brlt	.+2      	; 0x259a <__vector_54+0x3a>
    2598:	57 c0       	rjmp	.+174    	; 0x2648 <__vector_54+0xe8>
    259a:	a6 e3       	ldi	r26, 0x36	; 54
    259c:	b1 e0       	ldi	r27, 0x01	; 1
    259e:	e0 e3       	ldi	r30, 0x30	; 48
    25a0:	f1 e0       	ldi	r31, 0x01	; 1
    25a2:	8c 91       	ld	r24, X
    25a4:	80 81       	ld	r24, Z
    25a6:	88 23       	and	r24, r24
    25a8:	e4 f3       	brlt	.-8      	; 0x25a2 <__vector_54+0x42>
    25aa:	4e c0       	rjmp	.+156    	; 0x2648 <__vector_54+0xe8>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR3;
    25ac:	c0 91 36 01 	lds	r28, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		
	//xSerialxPrintf(&xSerial3Port,"interrupt\r\n");	
if(!port_0)
    25b0:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <port_0>
    25b4:	81 11       	cpse	r24, r1
    25b6:	1d c0       	rjmp	.+58     	; 0x25f2 <__vector_54+0x92>
{			//xSerialxPrintf(&xSerial3Port,"port_3\r\n");
			port_3=true;
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	80 93 0b 09 	sts	0x090B, r24	; 0x80090b <port_3>
			//timer_1_Init();
			stop_1_Timer();
    25be:	0e 94 2d 24 	call	0x485a	; 0x485a <stop_1_Timer>
			TCNT1=0;//my cod
    25c2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    25c6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
			frame[indexBuf] = cChar;//my cod
    25ca:	e0 91 a9 07 	lds	r30, 0x07A9	; 0x8007a9 <indexBuf>
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	e4 53       	subi	r30, 0x34	; 52
    25d2:	f8 4f       	sbci	r31, 0xF8	; 248
    25d4:	c0 83       	st	Z, r28
			indexBuf++;//my cod
    25d6:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <indexBuf>
    25da:	8f 5f       	subi	r24, 0xFF	; 255
    25dc:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <indexBuf>
			if(indexBuf == portSERIAL_BUFFER_RX ) overflow=1;//my cod
    25e0:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <indexBuf>
    25e4:	8f 3f       	cpi	r24, 0xFF	; 255
    25e6:	19 f4       	brne	.+6      	; 0x25ee <__vector_54+0x8e>
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	80 93 85 07 	sts	0x0785, r24	; 0x800785 <overflow>
			start_1_Timer();//my cod
    25ee:	0e 94 22 24 	call	0x4844	; 0x4844 <start_1_Timer>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	0f 92       	push	r0
	{
	    count = buffer->count;
    25f8:	ea ea       	ldi	r30, 0xAA	; 170
    25fa:	f7 e0       	ldi	r31, 0x07	; 7
    25fc:	21 81       	ldd	r18, Z+1	; 0x01
    25fe:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2600:	0f 90       	pop	r0
    2602:	0f be       	out	0x3f, r0	; 63
}
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial3Port.xRxedChars) ) )
    2604:	83 85       	ldd	r24, Z+11	; 0x0b
    2606:	94 85       	ldd	r25, Z+12	; 0x0c
    2608:	28 17       	cp	r18, r24
    260a:	39 07       	cpc	r19, r25
    260c:	e9 f0       	breq	.+58     	; 0x2648 <__vector_54+0xe8>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    260e:	eb ea       	ldi	r30, 0xAB	; 171
    2610:	f7 e0       	ldi	r31, 0x07	; 7

	*buffer->in = data;
    2612:	a2 81       	ldd	r26, Z+2	; 0x02
    2614:	b3 81       	ldd	r27, Z+3	; 0x03
    2616:	cc 93       	st	X, r28

	if (++buffer->in == buffer->end)
    2618:	82 81       	ldd	r24, Z+2	; 0x02
    261a:	93 81       	ldd	r25, Z+3	; 0x03
    261c:	01 96       	adiw	r24, 0x01	; 1
    261e:	93 83       	std	Z+3, r25	; 0x03
    2620:	82 83       	std	Z+2, r24	; 0x02
    2622:	20 85       	ldd	r18, Z+8	; 0x08
    2624:	31 85       	ldd	r19, Z+9	; 0x09
    2626:	82 17       	cp	r24, r18
    2628:	93 07       	cpc	r25, r19
    262a:	21 f4       	brne	.+8      	; 0x2634 <__vector_54+0xd4>
	  buffer->in = buffer->start;
    262c:	86 81       	ldd	r24, Z+6	; 0x06
    262e:	97 81       	ldd	r25, Z+7	; 0x07
    2630:	93 83       	std	Z+3, r25	; 0x03
    2632:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	0f 92       	push	r0
	{
	    buffer->count++;
    263a:	80 81       	ld	r24, Z
    263c:	91 81       	ldd	r25, Z+1	; 0x01
    263e:	01 96       	adiw	r24, 0x01	; 1
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    2644:	0f 90       	pop	r0
    2646:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial3Port.xRxedChars), cChar);
	}
}
    2648:	ff 91       	pop	r31
    264a:	ef 91       	pop	r30
    264c:	cf 91       	pop	r28
    264e:	bf 91       	pop	r27
    2650:	af 91       	pop	r26
    2652:	9f 91       	pop	r25
    2654:	8f 91       	pop	r24
    2656:	7f 91       	pop	r23
    2658:	6f 91       	pop	r22
    265a:	5f 91       	pop	r21
    265c:	4f 91       	pop	r20
    265e:	3f 91       	pop	r19
    2660:	2f 91       	pop	r18
    2662:	0f 90       	pop	r0
    2664:	0b be       	out	0x3b, r0	; 59
    2666:	0f 90       	pop	r0
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	0f 90       	pop	r0
    266c:	1f 90       	pop	r1
    266e:	18 95       	reti

00002670 <__vector_55>:
/*-----------------------------------------------------------*/

ISR( USART3_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART3_UDRE_vect )
{
    2670:	1f 92       	push	r1
    2672:	0f 92       	push	r0
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	0f 92       	push	r0
    2678:	11 24       	eor	r1, r1
    267a:	0b b6       	in	r0, 0x3b	; 59
    267c:	0f 92       	push	r0
    267e:	2f 93       	push	r18
    2680:	8f 93       	push	r24
    2682:	9f 93       	push	r25
    2684:	af 93       	push	r26
    2686:	bf 93       	push	r27
    2688:	ef 93       	push	r30
    268a:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	0f 92       	push	r0
	{
	    count = buffer->count;
    2692:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <xSerial3Port+0xd>
    2696:	90 91 b8 07 	lds	r25, 0x07B8	; 0x8007b8 <xSerial3Port+0xe>
	}
	portEXIT_CRITICAL();
    269a:	0f 90       	pop	r0
    269c:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) ) )
    269e:	89 2b       	or	r24, r25
    26a0:	31 f4       	brne	.+12     	; 0x26ae <__vector_55+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt3_Off();
    26a2:	e1 e3       	ldi	r30, 0x31	; 49
    26a4:	f1 e0       	ldi	r31, 0x01	; 1
    26a6:	80 81       	ld	r24, Z
    26a8:	8f 7d       	andi	r24, 0xDF	; 223
    26aa:	80 83       	st	Z, r24
    26ac:	1c c0       	rjmp	.+56     	; 0x26e6 <__vector_55+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    26ae:	e7 eb       	ldi	r30, 0xB7	; 183
    26b0:	f7 e0       	ldi	r31, 0x07	; 7

	uint8_t data = *buffer->out;
    26b2:	a4 81       	ldd	r26, Z+4	; 0x04
    26b4:	b5 81       	ldd	r27, Z+5	; 0x05
    26b6:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    26b8:	b5 83       	std	Z+5, r27	; 0x05
    26ba:	a4 83       	std	Z+4, r26	; 0x04
    26bc:	80 85       	ldd	r24, Z+8	; 0x08
    26be:	91 85       	ldd	r25, Z+9	; 0x09
    26c0:	a8 17       	cp	r26, r24
    26c2:	b9 07       	cpc	r27, r25
    26c4:	21 f4       	brne	.+8      	; 0x26ce <__vector_55+0x5e>
	  buffer->out = buffer->start;
    26c6:	86 81       	ldd	r24, Z+6	; 0x06
    26c8:	97 81       	ldd	r25, Z+7	; 0x07
    26ca:	95 83       	std	Z+5, r25	; 0x05
    26cc:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	0f 92       	push	r0
	{
	    buffer->count--;
    26d4:	80 81       	ld	r24, Z
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    26de:	0f 90       	pop	r0
    26e0:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR3 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) );
    26e2:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	}
}
    26e6:	ff 91       	pop	r31
    26e8:	ef 91       	pop	r30
    26ea:	bf 91       	pop	r27
    26ec:	af 91       	pop	r26
    26ee:	9f 91       	pop	r25
    26f0:	8f 91       	pop	r24
    26f2:	2f 91       	pop	r18
    26f4:	0f 90       	pop	r0
    26f6:	0b be       	out	0x3b, r0	; 59
    26f8:	0f 90       	pop	r0
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	0f 90       	pop	r0
    26fe:	1f 90       	pop	r1
    2700:	18 95       	reti

00002702 <spiBegin>:
	SPCR |= _BV(SPIE);
}

void spiDetachInterrupt(void)
{
	SPCR &= ~_BV(SPIE);
    2702:	0f 93       	push	r16
    2704:	81 30       	cpi	r24, 0x01	; 1
    2706:	71 f0       	breq	.+28     	; 0x2724 <spiBegin+0x22>
    2708:	18 f0       	brcs	.+6      	; 0x2710 <spiBegin+0xe>
    270a:	82 30       	cpi	r24, 0x02	; 2
    270c:	a9 f0       	breq	.+42     	; 0x2738 <spiBegin+0x36>
    270e:	26 c0       	rjmp	.+76     	; 0x275c <spiBegin+0x5a>
    2710:	84 b1       	in	r24, 0x04	; 4
    2712:	87 60       	ori	r24, 0x07	; 7
    2714:	84 b9       	out	0x04, r24	; 4
    2716:	23 98       	cbi	0x04, 3	; 4
    2718:	85 b1       	in	r24, 0x05	; 5
    271a:	89 60       	ori	r24, 0x09	; 9
    271c:	85 b9       	out	0x05, r24	; 5
    271e:	24 9a       	sbi	0x04, 4	; 4
    2720:	2c 9a       	sbi	0x05, 4	; 5
    2722:	23 c0       	rjmp	.+70     	; 0x276a <spiBegin+0x68>
    2724:	84 b1       	in	r24, 0x04	; 4
    2726:	87 60       	ori	r24, 0x07	; 7
    2728:	84 b9       	out	0x04, r24	; 4
    272a:	23 98       	cbi	0x04, 3	; 4
    272c:	85 b1       	in	r24, 0x05	; 5
    272e:	89 60       	ori	r24, 0x09	; 9
    2730:	85 b9       	out	0x05, r24	; 5
    2732:	9d 9a       	sbi	0x13, 5	; 19
    2734:	a5 9a       	sbi	0x14, 5	; 20
    2736:	19 c0       	rjmp	.+50     	; 0x276a <spiBegin+0x68>
    2738:	84 b1       	in	r24, 0x04	; 4
    273a:	87 60       	ori	r24, 0x07	; 7
    273c:	84 b9       	out	0x04, r24	; 4
    273e:	23 98       	cbi	0x04, 3	; 4
    2740:	85 b1       	in	r24, 0x05	; 5
    2742:	89 60       	ori	r24, 0x09	; 9
    2744:	85 b9       	out	0x05, r24	; 5
    2746:	e1 e0       	ldi	r30, 0x01	; 1
    2748:	f1 e0       	ldi	r31, 0x01	; 1
    274a:	80 81       	ld	r24, Z
    274c:	80 62       	ori	r24, 0x20	; 32
    274e:	80 83       	st	Z, r24
    2750:	e2 e0       	ldi	r30, 0x02	; 2
    2752:	f1 e0       	ldi	r31, 0x01	; 1
    2754:	80 81       	ld	r24, Z
    2756:	80 62       	ori	r24, 0x20	; 32
    2758:	80 83       	st	Z, r24
    275a:	07 c0       	rjmp	.+14     	; 0x276a <spiBegin+0x68>
    275c:	84 b1       	in	r24, 0x04	; 4
    275e:	87 60       	ori	r24, 0x07	; 7
    2760:	84 b9       	out	0x04, r24	; 4
    2762:	23 98       	cbi	0x04, 3	; 4
    2764:	85 b1       	in	r24, 0x05	; 5
    2766:	89 60       	ori	r24, 0x09	; 9
    2768:	85 b9       	out	0x05, r24	; 5
    276a:	8c b5       	in	r24, 0x2c	; 44
    276c:	80 65       	ori	r24, 0x50	; 80
    276e:	8c bd       	out	0x2c, r24	; 44
    2770:	8d b5       	in	r24, 0x2d	; 45
    2772:	8e b5       	in	r24, 0x2e	; 46
    2774:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <__data_end>
    2778:	90 91 75 06 	lds	r25, 0x0675	; 0x800675 <__data_end+0x1>
    277c:	89 2b       	or	r24, r25
    277e:	89 f4       	brne	.+34     	; 0x27a2 <spiBegin+0xa0>
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	0e 94 75 0a 	call	0x14ea	; 0x14ea <xQueueCreateMutex>
    2786:	90 93 75 06 	sts	0x0675, r25	; 0x800675 <__data_end+0x1>
    278a:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <__data_end>
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	41 f0       	breq	.+16     	; 0x27a2 <spiBegin+0xa0>
    2792:	00 e0       	ldi	r16, 0x00	; 0
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	a9 01       	movw	r20, r18
    279a:	60 e0       	ldi	r22, 0x00	; 0
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    27a2:	0f 91       	pop	r16
    27a4:	08 95       	ret

000027a6 <spiSetClockDivider>:
    27a6:	9c b5       	in	r25, 0x2c	; 44
    27a8:	9c 7f       	andi	r25, 0xFC	; 252
    27aa:	28 2f       	mov	r18, r24
    27ac:	23 70       	andi	r18, 0x03	; 3
    27ae:	92 2b       	or	r25, r18
    27b0:	9c bd       	out	0x2c, r25	; 44
    27b2:	9d b5       	in	r25, 0x2d	; 45
    27b4:	82 fb       	bst	r24, 2
    27b6:	88 27       	eor	r24, r24
    27b8:	80 f9       	bld	r24, 0
    27ba:	9e 7f       	andi	r25, 0xFE	; 254
    27bc:	89 2b       	or	r24, r25
    27be:	8d bd       	out	0x2d, r24	; 45
    27c0:	08 95       	ret

000027c2 <spiSetBitOrder>:
    27c2:	81 11       	cpse	r24, r1
    27c4:	04 c0       	rjmp	.+8      	; 0x27ce <spiSetBitOrder+0xc>
    27c6:	8c b5       	in	r24, 0x2c	; 44
    27c8:	80 62       	ori	r24, 0x20	; 32
    27ca:	8c bd       	out	0x2c, r24	; 44
    27cc:	08 95       	ret
    27ce:	8c b5       	in	r24, 0x2c	; 44
    27d0:	8f 7d       	andi	r24, 0xDF	; 223
    27d2:	8c bd       	out	0x2c, r24	; 44
    27d4:	08 95       	ret

000027d6 <spiSetDataMode>:
    27d6:	9c b5       	in	r25, 0x2c	; 44
    27d8:	93 7f       	andi	r25, 0xF3	; 243
    27da:	89 2b       	or	r24, r25
    27dc:	8c bd       	out	0x2c, r24	; 44
    27de:	08 95       	ret

000027e0 <spiSelect>:
/*-----------------------------------------------------------------------*/
/* Select the SPI device                                    */
/*-----------------------------------------------------------------------*/

uint8_t spiSelect(SPI_SLAVE_SELECT SS_pin)	/* 1:Successful, 0:Timeout */
{
    27e0:	cf 93       	push	r28
    27e2:	c8 2f       	mov	r28, r24

	if( (xSemaphoreTake( xSPISemaphore, (SPI_TIMEOUT / portTICK_PERIOD_MS )) == pdTRUE ) )
    27e4:	48 ee       	ldi	r20, 0xE8	; 232
    27e6:	53 e0       	ldi	r21, 0x03	; 3
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	70 e0       	ldi	r23, 0x00	; 0
    27ec:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <__data_end>
    27f0:	90 91 75 06 	lds	r25, 0x0675	; 0x800675 <__data_end+0x1>
    27f4:	0e 94 8f 0b 	call	0x171e	; 0x171e <xQueueSemaphoreTake>
    27f8:	81 30       	cpi	r24, 0x01	; 1
    27fa:	b1 f4       	brne	.+44     	; 0x2828 <spiSelect+0x48>
	{

		switch( SS_pin )
    27fc:	c1 30       	cpi	r28, 0x01	; 1
    27fe:	39 f0       	breq	.+14     	; 0x280e <spiSelect+0x2e>
    2800:	18 f0       	brcs	.+6      	; 0x2808 <spiSelect+0x28>
    2802:	c2 30       	cpi	r28, 0x02	; 2
    2804:	39 f0       	breq	.+14     	; 0x2814 <spiSelect+0x34>
    2806:	0d c0       	rjmp	.+26     	; 0x2822 <spiSelect+0x42>
		{
		case Wiznet:	// added for EtherMega Wiznet 5100/5200 support
#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
			W5100_SEN_ENABLE(1); // Enable SEN, to get on the SPI bus. PORT D7
#endif
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
    2808:	2c 98       	cbi	0x05, 4	; 5
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    280a:	81 e0       	ldi	r24, 0x01	; 1
		case Wiznet:	// added for EtherMega Wiznet 5100/5200 support
#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
			W5100_SEN_ENABLE(1); // Enable SEN, to get on the SPI bus. PORT D7
#endif
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
			break;
    280c:	0e c0       	rjmp	.+28     	; 0x282a <spiSelect+0x4a>

		case SDCard:	// added for  SD Card support
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
    280e:	a5 98       	cbi	0x14, 5	; 20
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    2810:	81 e0       	ldi	r24, 0x01	; 1
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
			break;

		case SDCard:	// added for  SD Card support
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
			break;
    2812:	0b c0       	rjmp	.+22     	; 0x282a <spiSelect+0x4a>

		case Gameduino2:// added for Gameduino2 using FTDI FT800
			SPI_PORT_SS_G2 &= ~SPI_BIT_SS_G2; // Pull SS low to select the Gameduino 2.
    2814:	e2 e0       	ldi	r30, 0x02	; 2
    2816:	f1 e0       	ldi	r31, 0x01	; 1
    2818:	80 81       	ld	r24, Z
    281a:	8f 7d       	andi	r24, 0xDF	; 223
    281c:	80 83       	st	Z, r24
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    281e:	81 e0       	ldi	r24, 0x01	; 1
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
			break;

		case Gameduino2:// added for Gameduino2 using FTDI FT800
			SPI_PORT_SS_G2 &= ~SPI_BIT_SS_G2; // Pull SS low to select the Gameduino 2.
			break;
    2820:	04 c0       	rjmp	.+8      	; 0x282a <spiSelect+0x4a>
			break;
#endif

		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
    2822:	28 98       	cbi	0x05, 0	; 5
			break;
		}
		return 1;		// OK /
    2824:	81 e0       	ldi	r24, 0x01	; 1
#endif

		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
    2826:	01 c0       	rjmp	.+2      	; 0x282a <spiSelect+0x4a>
		}
		return 1;		// OK /
	}
	else
		return 0;		// Timeout
    2828:	80 e0       	ldi	r24, 0x00	; 0
}
    282a:	cf 91       	pop	r28
    282c:	08 95       	ret

0000282e <spiDeselect>:
/*-----------------------------------------------------------------------*/
/* Deselect the SPI device                                 */
/*-----------------------------------------------------------------------*/

void spiDeselect(SPI_SLAVE_SELECT SS_pin)
{
    282e:	0f 93       	push	r16
	// Pull SS high to Deselect the card.
	switch( SS_pin )
    2830:	81 30       	cpi	r24, 0x01	; 1
    2832:	31 f0       	breq	.+12     	; 0x2840 <spiDeselect+0x12>
    2834:	18 f0       	brcs	.+6      	; 0x283c <spiDeselect+0xe>
    2836:	82 30       	cpi	r24, 0x02	; 2
    2838:	29 f0       	breq	.+10     	; 0x2844 <spiDeselect+0x16>
    283a:	0a c0       	rjmp	.+20     	; 0x2850 <spiDeselect+0x22>
	{
	case Wiznet:		// added for EtherMega Wiznet 5100/5200 support
		SPI_PORT |= SPI_BIT_SS_WIZNET;
    283c:	2c 9a       	sbi	0x05, 4	; 5

#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
		W5100_SEN_ENABLE(0); // Disable SEN, to get off the SPI bus. PORT D7
#endif
		break;
    283e:	09 c0       	rjmp	.+18     	; 0x2852 <spiDeselect+0x24>

	case SDCard:		// added for  SD Card support
		SPI_PORT_SS_SD |= SPI_BIT_SS_SD;	// Pull SS high to deselect the uSD card.
    2840:	a5 9a       	sbi	0x14, 5	; 20
		break;
    2842:	07 c0       	rjmp	.+14     	; 0x2852 <spiDeselect+0x24>

	case Gameduino2:	// added for Gameduino 2 using FTDI FT800
		SPI_PORT_SS_G2 |= SPI_BIT_SS_G2;	// Pull SS high to deselect the Gameduino 2.
    2844:	e2 e0       	ldi	r30, 0x02	; 2
    2846:	f1 e0       	ldi	r31, 0x01	; 1
    2848:	80 81       	ld	r24, Z
    284a:	80 62       	ori	r24, 0x20	; 32
    284c:	80 83       	st	Z, r24
		break;
    284e:	01 c0       	rjmp	.+2      	; 0x2852 <spiDeselect+0x24>
		break;
#endif

	case Default:		// default SS line for Arduino Uno
	default:
		SPI_PORT |= SPI_BIT_SS;
    2850:	28 9a       	sbi	0x05, 0	; 5
		break;
	}

	xSemaphoreGive( xSPISemaphore );	/* Free FreeRTOS semaphore to allow other SPI access */
    2852:	00 e0       	ldi	r16, 0x00	; 0
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	a9 01       	movw	r20, r18
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <__data_end>
    2862:	90 91 75 06 	lds	r25, 0x0675	; 0x800675 <__data_end+0x1>
    2866:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
}
    286a:	0f 91       	pop	r16
    286c:	08 95       	ret

0000286e <spiTransfer>:



uint8_t spiTransfer(uint8_t data)
{
    286e:	28 2f       	mov	r18, r24
	// That is NOT done by this function..., because...
	// Some devices need to have their SS held low across multiple transfer calls.
	// Using spiSelect (SS_pin);

	// If the SPI module has not been enabled yet, then return with nothing.
	if( !(SPCR & _BV(SPE)) ) return 0;
    2870:	9c b5       	in	r25, 0x2c	; 44
    2872:	89 2f       	mov	r24, r25
    2874:	80 74       	andi	r24, 0x40	; 64
    2876:	96 ff       	sbrs	r25, 6
    2878:	17 c0       	rjmp	.+46     	; 0x28a8 <spiTransfer+0x3a>

	// The SPI module is enabled, but it is in slave mode, so we can not
	// transmit the byte. This can happen if SSbar is an input and it went low.
	// We will try to recover by setting the MSTR bit.
	if( !(SPCR & _BV(MSTR)) )
    287a:	0c b4       	in	r0, 0x2c	; 44
    287c:	04 fc       	sbrc	r0, 4
    287e:	08 c0       	rjmp	.+16     	; 0x2890 <spiTransfer+0x22>
		{
			SPCR |= _BV(MSTR);
    2880:	8c b5       	in	r24, 0x2c	; 44
    2882:	80 61       	ori	r24, 0x10	; 16
    2884:	8c bd       	out	0x2c, r24	; 44
			if( !(SPCR & _BV(MSTR)) ) return 0;
    2886:	9c b5       	in	r25, 0x2c	; 44
    2888:	89 2f       	mov	r24, r25
    288a:	80 71       	andi	r24, 0x10	; 16
    288c:	94 ff       	sbrs	r25, 4
    288e:	0c c0       	rjmp	.+24     	; 0x28a8 <spiTransfer+0x3a>
		}

	SPDR = data; 	// Begin transmission
    2890:	2e bd       	out	0x2e, r18	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop from iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
	__asm__ __volatile__("nop");
    2892:	00 00       	nop

	while( !(SPSR & _BV(SPIF)) )
    2894:	05 c0       	rjmp	.+10     	; 0x28a0 <spiTransfer+0x32>
	{
		if( !(SPCR & _BV(MSTR)) ) return 0;
    2896:	9c b5       	in	r25, 0x2c	; 44
    2898:	89 2f       	mov	r24, r25
    289a:	80 71       	andi	r24, 0x10	; 16
    289c:	94 ff       	sbrs	r25, 4
    289e:	04 c0       	rjmp	.+8      	; 0x28a8 <spiTransfer+0x3a>
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
	__asm__ __volatile__("nop");

	while( !(SPSR & _BV(SPIF)) )
    28a0:	0d b4       	in	r0, 0x2d	; 45
    28a2:	07 fe       	sbrs	r0, 7
    28a4:	f8 cf       	rjmp	.-16     	; 0x2896 <spiTransfer+0x28>
		if( !(SPCR & _BV(MSTR)) ) return 0;
			// The SPI module has left master mode, so return.
			// Otherwise, this will be an infinite loop.
	}

	return SPDR;
    28a6:	8e b5       	in	r24, 0x2e	; 46

	// Make sure you pull slave select high to indicate end of transfer.
	// That is NOT done by this function.
	// Using spiDeselect (SS_pin);
}
    28a8:	08 95       	ret

000028aa <prvResetNextTaskUnblockTime>:
    28aa:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <pxDelayedTaskList>
    28ae:	f0 91 ad 06 	lds	r31, 0x06AD	; 0x8006ad <pxDelayedTaskList+0x1>
    28b2:	80 81       	ld	r24, Z
    28b4:	81 11       	cpse	r24, r1
    28b6:	0c c0       	rjmp	.+24     	; 0x28d0 <prvResetNextTaskUnblockTime+0x26>
    28b8:	8f ef       	ldi	r24, 0xFF	; 255
    28ba:	9f ef       	ldi	r25, 0xFF	; 255
    28bc:	dc 01       	movw	r26, r24
    28be:	80 93 79 06 	sts	0x0679, r24	; 0x800679 <xNextTaskUnblockTime>
    28c2:	90 93 7a 06 	sts	0x067A, r25	; 0x80067a <xNextTaskUnblockTime+0x1>
    28c6:	a0 93 7b 06 	sts	0x067B, r26	; 0x80067b <xNextTaskUnblockTime+0x2>
    28ca:	b0 93 7c 06 	sts	0x067C, r27	; 0x80067c <xNextTaskUnblockTime+0x3>
    28ce:	08 95       	ret
    28d0:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <pxDelayedTaskList>
    28d4:	f0 91 ad 06 	lds	r31, 0x06AD	; 0x8006ad <pxDelayedTaskList+0x1>
    28d8:	07 80       	ldd	r0, Z+7	; 0x07
    28da:	f0 85       	ldd	r31, Z+8	; 0x08
    28dc:	e0 2d       	mov	r30, r0
    28de:	00 84       	ldd	r0, Z+8	; 0x08
    28e0:	f1 85       	ldd	r31, Z+9	; 0x09
    28e2:	e0 2d       	mov	r30, r0
    28e4:	82 81       	ldd	r24, Z+2	; 0x02
    28e6:	93 81       	ldd	r25, Z+3	; 0x03
    28e8:	a4 81       	ldd	r26, Z+4	; 0x04
    28ea:	b5 81       	ldd	r27, Z+5	; 0x05
    28ec:	80 93 79 06 	sts	0x0679, r24	; 0x800679 <xNextTaskUnblockTime>
    28f0:	90 93 7a 06 	sts	0x067A, r25	; 0x80067a <xNextTaskUnblockTime+0x1>
    28f4:	a0 93 7b 06 	sts	0x067B, r26	; 0x80067b <xNextTaskUnblockTime+0x2>
    28f8:	b0 93 7c 06 	sts	0x067C, r27	; 0x80067c <xNextTaskUnblockTime+0x3>
    28fc:	08 95       	ret

000028fe <prvAddCurrentTaskToDelayedList>:
    28fe:	8f 92       	push	r8
    2900:	9f 92       	push	r9
    2902:	af 92       	push	r10
    2904:	bf 92       	push	r11
    2906:	cf 92       	push	r12
    2908:	df 92       	push	r13
    290a:	ef 92       	push	r14
    290c:	ff 92       	push	r15
    290e:	cf 93       	push	r28
    2910:	6b 01       	movw	r12, r22
    2912:	7c 01       	movw	r14, r24
    2914:	c4 2f       	mov	r28, r20
    2916:	80 90 83 06 	lds	r8, 0x0683	; 0x800683 <xTickCount>
    291a:	90 90 84 06 	lds	r9, 0x0684	; 0x800684 <xTickCount+0x1>
    291e:	a0 90 85 06 	lds	r10, 0x0685	; 0x800685 <xTickCount+0x2>
    2922:	b0 90 86 06 	lds	r11, 0x0686	; 0x800686 <xTickCount+0x3>
    2926:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    292a:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    292e:	02 96       	adiw	r24, 0x02	; 2
    2930:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2934:	8f ef       	ldi	r24, 0xFF	; 255
    2936:	c8 16       	cp	r12, r24
    2938:	d8 06       	cpc	r13, r24
    293a:	e8 06       	cpc	r14, r24
    293c:	f8 06       	cpc	r15, r24
    293e:	69 f4       	brne	.+26     	; 0x295a <prvAddCurrentTaskToDelayedList+0x5c>
    2940:	cc 23       	and	r28, r28
    2942:	59 f0       	breq	.+22     	; 0x295a <prvAddCurrentTaskToDelayedList+0x5c>
    2944:	60 91 f0 06 	lds	r22, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    2948:	70 91 f1 06 	lds	r23, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    294c:	6e 5f       	subi	r22, 0xFE	; 254
    294e:	7f 4f       	sbci	r23, 0xFF	; 255
    2950:	88 e8       	ldi	r24, 0x88	; 136
    2952:	96 e0       	ldi	r25, 0x06	; 6
    2954:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2958:	3f c0       	rjmp	.+126    	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    295a:	c8 0c       	add	r12, r8
    295c:	d9 1c       	adc	r13, r9
    295e:	ea 1c       	adc	r14, r10
    2960:	fb 1c       	adc	r15, r11
    2962:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    2966:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    296a:	c2 82       	std	Z+2, r12	; 0x02
    296c:	d3 82       	std	Z+3, r13	; 0x03
    296e:	e4 82       	std	Z+4, r14	; 0x04
    2970:	f5 82       	std	Z+5, r15	; 0x05
    2972:	c8 14       	cp	r12, r8
    2974:	d9 04       	cpc	r13, r9
    2976:	ea 04       	cpc	r14, r10
    2978:	fb 04       	cpc	r15, r11
    297a:	68 f4       	brcc	.+26     	; 0x2996 <prvAddCurrentTaskToDelayedList+0x98>
    297c:	60 91 f0 06 	lds	r22, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    2980:	70 91 f1 06 	lds	r23, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    2984:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <pxOverflowDelayedTaskList>
    2988:	90 91 ab 06 	lds	r25, 0x06AB	; 0x8006ab <pxOverflowDelayedTaskList+0x1>
    298c:	6e 5f       	subi	r22, 0xFE	; 254
    298e:	7f 4f       	sbci	r23, 0xFF	; 255
    2990:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    2994:	21 c0       	rjmp	.+66     	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    2996:	60 91 f0 06 	lds	r22, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    299a:	70 91 f1 06 	lds	r23, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    299e:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <pxDelayedTaskList>
    29a2:	90 91 ad 06 	lds	r25, 0x06AD	; 0x8006ad <pxDelayedTaskList+0x1>
    29a6:	6e 5f       	subi	r22, 0xFE	; 254
    29a8:	7f 4f       	sbci	r23, 0xFF	; 255
    29aa:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    29ae:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <xNextTaskUnblockTime>
    29b2:	90 91 7a 06 	lds	r25, 0x067A	; 0x80067a <xNextTaskUnblockTime+0x1>
    29b6:	a0 91 7b 06 	lds	r26, 0x067B	; 0x80067b <xNextTaskUnblockTime+0x2>
    29ba:	b0 91 7c 06 	lds	r27, 0x067C	; 0x80067c <xNextTaskUnblockTime+0x3>
    29be:	c8 16       	cp	r12, r24
    29c0:	d9 06       	cpc	r13, r25
    29c2:	ea 06       	cpc	r14, r26
    29c4:	fb 06       	cpc	r15, r27
    29c6:	40 f4       	brcc	.+16     	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    29c8:	c0 92 79 06 	sts	0x0679, r12	; 0x800679 <xNextTaskUnblockTime>
    29cc:	d0 92 7a 06 	sts	0x067A, r13	; 0x80067a <xNextTaskUnblockTime+0x1>
    29d0:	e0 92 7b 06 	sts	0x067B, r14	; 0x80067b <xNextTaskUnblockTime+0x2>
    29d4:	f0 92 7c 06 	sts	0x067C, r15	; 0x80067c <xNextTaskUnblockTime+0x3>
    29d8:	cf 91       	pop	r28
    29da:	ff 90       	pop	r15
    29dc:	ef 90       	pop	r14
    29de:	df 90       	pop	r13
    29e0:	cf 90       	pop	r12
    29e2:	bf 90       	pop	r11
    29e4:	af 90       	pop	r10
    29e6:	9f 90       	pop	r9
    29e8:	8f 90       	pop	r8
    29ea:	08 95       	ret

000029ec <xTaskCreate>:
    29ec:	4f 92       	push	r4
    29ee:	5f 92       	push	r5
    29f0:	6f 92       	push	r6
    29f2:	7f 92       	push	r7
    29f4:	8f 92       	push	r8
    29f6:	9f 92       	push	r9
    29f8:	af 92       	push	r10
    29fa:	bf 92       	push	r11
    29fc:	cf 92       	push	r12
    29fe:	df 92       	push	r13
    2a00:	ef 92       	push	r14
    2a02:	ff 92       	push	r15
    2a04:	0f 93       	push	r16
    2a06:	cf 93       	push	r28
    2a08:	df 93       	push	r29
    2a0a:	4c 01       	movw	r8, r24
    2a0c:	6b 01       	movw	r12, r22
    2a0e:	5a 01       	movw	r10, r20
    2a10:	29 01       	movw	r4, r18
    2a12:	ca 01       	movw	r24, r20
    2a14:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    2a18:	3c 01       	movw	r6, r24
    2a1a:	89 2b       	or	r24, r25
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <xTaskCreate+0x34>
    2a1e:	ec c0       	rjmp	.+472    	; 0x2bf8 <xTaskCreate+0x20c>
    2a20:	83 e3       	ldi	r24, 0x33	; 51
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    2a28:	ec 01       	movw	r28, r24
    2a2a:	89 2b       	or	r24, r25
    2a2c:	b1 f0       	breq	.+44     	; 0x2a5a <xTaskCreate+0x6e>
    2a2e:	7c 8e       	std	Y+28, r7	; 0x1c
    2a30:	6b 8e       	std	Y+27, r6	; 0x1b
    2a32:	a5 01       	movw	r20, r10
    2a34:	65 ea       	ldi	r22, 0xA5	; 165
    2a36:	70 e0       	ldi	r23, 0x00	; 0
    2a38:	c3 01       	movw	r24, r6
    2a3a:	0e 94 87 5b 	call	0xb70e	; 0xb70e <memset>
    2a3e:	21 e0       	ldi	r18, 0x01	; 1
    2a40:	a2 1a       	sub	r10, r18
    2a42:	b1 08       	sbc	r11, r1
    2a44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a48:	a8 0e       	add	r10, r24
    2a4a:	b9 1e       	adc	r11, r25
    2a4c:	d6 01       	movw	r26, r12
    2a4e:	8c 91       	ld	r24, X
    2a50:	8d 8f       	std	Y+29, r24	; 0x1d
    2a52:	8c 91       	ld	r24, X
    2a54:	81 11       	cpse	r24, r1
    2a56:	05 c0       	rjmp	.+10     	; 0x2a62 <xTaskCreate+0x76>
    2a58:	18 c0       	rjmp	.+48     	; 0x2a8a <xTaskCreate+0x9e>
    2a5a:	c3 01       	movw	r24, r6
    2a5c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vPortFree>
    2a60:	cb c0       	rjmp	.+406    	; 0x2bf8 <xTaskCreate+0x20c>
    2a62:	ae 01       	movw	r20, r28
    2a64:	42 5e       	subi	r20, 0xE2	; 226
    2a66:	5f 4f       	sbci	r21, 0xFF	; 255
    2a68:	f6 01       	movw	r30, r12
    2a6a:	31 96       	adiw	r30, 0x01	; 1
    2a6c:	bf e0       	ldi	r27, 0x0F	; 15
    2a6e:	cb 0e       	add	r12, r27
    2a70:	d1 1c       	adc	r13, r1
    2a72:	cf 01       	movw	r24, r30
    2a74:	21 91       	ld	r18, Z+
    2a76:	da 01       	movw	r26, r20
    2a78:	2d 93       	st	X+, r18
    2a7a:	ad 01       	movw	r20, r26
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	8c 91       	ld	r24, X
    2a80:	88 23       	and	r24, r24
    2a82:	19 f0       	breq	.+6      	; 0x2a8a <xTaskCreate+0x9e>
    2a84:	ec 15       	cp	r30, r12
    2a86:	fd 05       	cpc	r31, r13
    2a88:	a1 f7       	brne	.-24     	; 0x2a72 <xTaskCreate+0x86>
    2a8a:	1b a6       	std	Y+43, r1	; 0x2b
    2a8c:	04 30       	cpi	r16, 0x04	; 4
    2a8e:	08 f0       	brcs	.+2      	; 0x2a92 <xTaskCreate+0xa6>
    2a90:	03 e0       	ldi	r16, 0x03	; 3
    2a92:	0a 8f       	std	Y+26, r16	; 0x1a
    2a94:	0c a7       	std	Y+44, r16	; 0x2c
    2a96:	1d a6       	std	Y+45, r1	; 0x2d
    2a98:	6e 01       	movw	r12, r28
    2a9a:	b2 e0       	ldi	r27, 0x02	; 2
    2a9c:	cb 0e       	add	r12, r27
    2a9e:	d1 1c       	adc	r13, r1
    2aa0:	c6 01       	movw	r24, r12
    2aa2:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    2aa6:	ce 01       	movw	r24, r28
    2aa8:	0e 96       	adiw	r24, 0x0e	; 14
    2aaa:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    2aae:	db 87       	std	Y+11, r29	; 0x0b
    2ab0:	ca 87       	std	Y+10, r28	; 0x0a
    2ab2:	84 e0       	ldi	r24, 0x04	; 4
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	a0 e0       	ldi	r26, 0x00	; 0
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	80 1b       	sub	r24, r16
    2abc:	91 09       	sbc	r25, r1
    2abe:	a1 09       	sbc	r26, r1
    2ac0:	b1 09       	sbc	r27, r1
    2ac2:	8e 87       	std	Y+14, r24	; 0x0e
    2ac4:	9f 87       	std	Y+15, r25	; 0x0f
    2ac6:	a8 8b       	std	Y+16, r26	; 0x10
    2ac8:	b9 8b       	std	Y+17, r27	; 0x11
    2aca:	df 8b       	std	Y+23, r29	; 0x17
    2acc:	ce 8b       	std	Y+22, r28	; 0x16
    2ace:	1e a6       	std	Y+46, r1	; 0x2e
    2ad0:	1f a6       	std	Y+47, r1	; 0x2f
    2ad2:	18 aa       	std	Y+48, r1	; 0x30
    2ad4:	19 aa       	std	Y+49, r1	; 0x31
    2ad6:	1a aa       	std	Y+50, r1	; 0x32
    2ad8:	a2 01       	movw	r20, r4
    2ada:	b4 01       	movw	r22, r8
    2adc:	c5 01       	movw	r24, r10
    2ade:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pxPortInitialiseStack>
    2ae2:	99 83       	std	Y+1, r25	; 0x01
    2ae4:	88 83       	st	Y, r24
    2ae6:	e1 14       	cp	r14, r1
    2ae8:	f1 04       	cpc	r15, r1
    2aea:	19 f0       	breq	.+6      	; 0x2af2 <xTaskCreate+0x106>
    2aec:	f7 01       	movw	r30, r14
    2aee:	d1 83       	std	Z+1, r29	; 0x01
    2af0:	c0 83       	st	Z, r28
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	0f 92       	push	r0
    2af8:	80 91 87 06 	lds	r24, 0x0687	; 0x800687 <uxCurrentNumberOfTasks>
    2afc:	8f 5f       	subi	r24, 0xFF	; 255
    2afe:	80 93 87 06 	sts	0x0687, r24	; 0x800687 <uxCurrentNumberOfTasks>
    2b02:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    2b06:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    2b0a:	89 2b       	or	r24, r25
    2b0c:	d1 f5       	brne	.+116    	; 0x2b82 <xTaskCreate+0x196>
    2b0e:	d0 93 f1 06 	sts	0x06F1, r29	; 0x8006f1 <pxCurrentTCB+0x1>
    2b12:	c0 93 f0 06 	sts	0x06F0, r28	; 0x8006f0 <pxCurrentTCB>
    2b16:	80 91 87 06 	lds	r24, 0x0687	; 0x800687 <uxCurrentNumberOfTasks>
    2b1a:	81 30       	cpi	r24, 0x01	; 1
    2b1c:	09 f0       	breq	.+2      	; 0x2b20 <xTaskCreate+0x134>
    2b1e:	41 c0       	rjmp	.+130    	; 0x2ba2 <xTaskCreate+0x1b6>
    2b20:	84 ec       	ldi	r24, 0xC4	; 196
    2b22:	96 e0       	ldi	r25, 0x06	; 6
    2b24:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b28:	8f ec       	ldi	r24, 0xCF	; 207
    2b2a:	96 e0       	ldi	r25, 0x06	; 6
    2b2c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b30:	8a ed       	ldi	r24, 0xDA	; 218
    2b32:	96 e0       	ldi	r25, 0x06	; 6
    2b34:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b38:	85 ee       	ldi	r24, 0xE5	; 229
    2b3a:	96 e0       	ldi	r25, 0x06	; 6
    2b3c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b40:	89 eb       	ldi	r24, 0xB9	; 185
    2b42:	96 e0       	ldi	r25, 0x06	; 6
    2b44:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b48:	8e ea       	ldi	r24, 0xAE	; 174
    2b4a:	96 e0       	ldi	r25, 0x06	; 6
    2b4c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b50:	8f e9       	ldi	r24, 0x9F	; 159
    2b52:	96 e0       	ldi	r25, 0x06	; 6
    2b54:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b58:	84 e9       	ldi	r24, 0x94	; 148
    2b5a:	96 e0       	ldi	r25, 0x06	; 6
    2b5c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b60:	88 e8       	ldi	r24, 0x88	; 136
    2b62:	96 e0       	ldi	r25, 0x06	; 6
    2b64:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b68:	89 eb       	ldi	r24, 0xB9	; 185
    2b6a:	96 e0       	ldi	r25, 0x06	; 6
    2b6c:	90 93 ad 06 	sts	0x06AD, r25	; 0x8006ad <pxDelayedTaskList+0x1>
    2b70:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <pxDelayedTaskList>
    2b74:	8e ea       	ldi	r24, 0xAE	; 174
    2b76:	96 e0       	ldi	r25, 0x06	; 6
    2b78:	90 93 ab 06 	sts	0x06AB, r25	; 0x8006ab <pxOverflowDelayedTaskList+0x1>
    2b7c:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <pxOverflowDelayedTaskList>
    2b80:	10 c0       	rjmp	.+32     	; 0x2ba2 <xTaskCreate+0x1b6>
    2b82:	80 91 81 06 	lds	r24, 0x0681	; 0x800681 <xSchedulerRunning>
    2b86:	81 11       	cpse	r24, r1
    2b88:	0c c0       	rjmp	.+24     	; 0x2ba2 <xTaskCreate+0x1b6>
    2b8a:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    2b8e:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    2b92:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b94:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b96:	89 17       	cp	r24, r25
    2b98:	20 f0       	brcs	.+8      	; 0x2ba2 <xTaskCreate+0x1b6>
    2b9a:	d0 93 f1 06 	sts	0x06F1, r29	; 0x8006f1 <pxCurrentTCB+0x1>
    2b9e:	c0 93 f0 06 	sts	0x06F0, r28	; 0x8006f0 <pxCurrentTCB>
    2ba2:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <uxTaskNumber>
    2ba6:	8f 5f       	subi	r24, 0xFF	; 255
    2ba8:	80 93 7d 06 	sts	0x067D, r24	; 0x80067d <uxTaskNumber>
    2bac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bae:	90 91 82 06 	lds	r25, 0x0682	; 0x800682 <uxTopReadyPriority>
    2bb2:	98 17       	cp	r25, r24
    2bb4:	10 f4       	brcc	.+4      	; 0x2bba <xTaskCreate+0x1ce>
    2bb6:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <uxTopReadyPriority>
    2bba:	fb e0       	ldi	r31, 0x0B	; 11
    2bbc:	8f 9f       	mul	r24, r31
    2bbe:	c0 01       	movw	r24, r0
    2bc0:	11 24       	eor	r1, r1
    2bc2:	b6 01       	movw	r22, r12
    2bc4:	8c 53       	subi	r24, 0x3C	; 60
    2bc6:	99 4f       	sbci	r25, 0xF9	; 249
    2bc8:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2bcc:	0f 90       	pop	r0
    2bce:	0f be       	out	0x3f, r0	; 63
    2bd0:	80 91 81 06 	lds	r24, 0x0681	; 0x800681 <xSchedulerRunning>
    2bd4:	88 23       	and	r24, r24
    2bd6:	61 f0       	breq	.+24     	; 0x2bf0 <xTaskCreate+0x204>
    2bd8:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    2bdc:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    2be0:	92 8d       	ldd	r25, Z+26	; 0x1a
    2be2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2be4:	98 17       	cp	r25, r24
    2be6:	30 f4       	brcc	.+12     	; 0x2bf4 <xTaskCreate+0x208>
    2be8:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	05 c0       	rjmp	.+10     	; 0x2bfa <xTaskCreate+0x20e>
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	03 c0       	rjmp	.+6      	; 0x2bfa <xTaskCreate+0x20e>
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	01 c0       	rjmp	.+2      	; 0x2bfa <xTaskCreate+0x20e>
    2bf8:	8f ef       	ldi	r24, 0xFF	; 255
    2bfa:	df 91       	pop	r29
    2bfc:	cf 91       	pop	r28
    2bfe:	0f 91       	pop	r16
    2c00:	ff 90       	pop	r15
    2c02:	ef 90       	pop	r14
    2c04:	df 90       	pop	r13
    2c06:	cf 90       	pop	r12
    2c08:	bf 90       	pop	r11
    2c0a:	af 90       	pop	r10
    2c0c:	9f 90       	pop	r9
    2c0e:	8f 90       	pop	r8
    2c10:	7f 90       	pop	r7
    2c12:	6f 90       	pop	r6
    2c14:	5f 90       	pop	r5
    2c16:	4f 90       	pop	r4
    2c18:	08 95       	ret

00002c1a <vTaskResume>:
    2c1a:	0f 93       	push	r16
    2c1c:	1f 93       	push	r17
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
    2c22:	00 97       	sbiw	r24, 0x00	; 0
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <vTaskResume+0xe>
    2c26:	3d c0       	rjmp	.+122    	; 0x2ca2 <vTaskResume+0x88>
    2c28:	20 91 f0 06 	lds	r18, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    2c2c:	30 91 f1 06 	lds	r19, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    2c30:	82 17       	cp	r24, r18
    2c32:	93 07       	cpc	r25, r19
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <vTaskResume+0x1e>
    2c36:	35 c0       	rjmp	.+106    	; 0x2ca2 <vTaskResume+0x88>
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	0f 92       	push	r0
    2c3e:	fc 01       	movw	r30, r24
    2c40:	24 85       	ldd	r18, Z+12	; 0x0c
    2c42:	35 85       	ldd	r19, Z+13	; 0x0d
    2c44:	28 58       	subi	r18, 0x88	; 136
    2c46:	36 40       	sbci	r19, 0x06	; 6
    2c48:	51 f5       	brne	.+84     	; 0x2c9e <vTaskResume+0x84>
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	20 8d       	ldd	r18, Z+24	; 0x18
    2c4e:	31 8d       	ldd	r19, Z+25	; 0x19
    2c50:	f6 e0       	ldi	r31, 0x06	; 6
    2c52:	2f 39       	cpi	r18, 0x9F	; 159
    2c54:	3f 07       	cpc	r19, r31
    2c56:	19 f1       	breq	.+70     	; 0x2c9e <vTaskResume+0x84>
    2c58:	23 2b       	or	r18, r19
    2c5a:	09 f5       	brne	.+66     	; 0x2c9e <vTaskResume+0x84>
    2c5c:	ec 01       	movw	r28, r24
    2c5e:	8c 01       	movw	r16, r24
    2c60:	0e 5f       	subi	r16, 0xFE	; 254
    2c62:	1f 4f       	sbci	r17, 0xFF	; 255
    2c64:	c8 01       	movw	r24, r16
    2c66:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2c6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c6c:	90 91 82 06 	lds	r25, 0x0682	; 0x800682 <uxTopReadyPriority>
    2c70:	98 17       	cp	r25, r24
    2c72:	10 f4       	brcc	.+4      	; 0x2c78 <vTaskResume+0x5e>
    2c74:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <uxTopReadyPriority>
    2c78:	2b e0       	ldi	r18, 0x0B	; 11
    2c7a:	82 9f       	mul	r24, r18
    2c7c:	c0 01       	movw	r24, r0
    2c7e:	11 24       	eor	r1, r1
    2c80:	b8 01       	movw	r22, r16
    2c82:	8c 53       	subi	r24, 0x3C	; 60
    2c84:	99 4f       	sbci	r25, 0xF9	; 249
    2c86:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2c8a:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    2c8e:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    2c92:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c94:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c96:	98 17       	cp	r25, r24
    2c98:	10 f0       	brcs	.+4      	; 0x2c9e <vTaskResume+0x84>
    2c9a:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2c9e:	0f 90       	pop	r0
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	df 91       	pop	r29
    2ca4:	cf 91       	pop	r28
    2ca6:	1f 91       	pop	r17
    2ca8:	0f 91       	pop	r16
    2caa:	08 95       	ret

00002cac <vTaskStartScheduler>:
    2cac:	ef 92       	push	r14
    2cae:	ff 92       	push	r15
    2cb0:	0f 93       	push	r16
    2cb2:	0f 2e       	mov	r0, r31
    2cb4:	f7 e7       	ldi	r31, 0x77	; 119
    2cb6:	ef 2e       	mov	r14, r31
    2cb8:	f6 e0       	ldi	r31, 0x06	; 6
    2cba:	ff 2e       	mov	r15, r31
    2cbc:	f0 2d       	mov	r31, r0
    2cbe:	00 e0       	ldi	r16, 0x00	; 0
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	40 e8       	ldi	r20, 0x80	; 128
    2cc6:	50 e0       	ldi	r21, 0x00	; 0
    2cc8:	66 e1       	ldi	r22, 0x16	; 22
    2cca:	72 e0       	ldi	r23, 0x02	; 2
    2ccc:	88 e3       	ldi	r24, 0x38	; 56
    2cce:	95 e0       	ldi	r25, 0x05	; 5
    2cd0:	8d de       	rcall	.-742    	; 0x29ec <xTaskCreate>
    2cd2:	81 30       	cpi	r24, 0x01	; 1
    2cd4:	e1 f4       	brne	.+56     	; 0x2d0e <vTaskStartScheduler+0x62>
    2cd6:	ce d4       	rcall	.+2460   	; 0x3674 <xTimerCreateTimerTask>
    2cd8:	81 30       	cpi	r24, 0x01	; 1
    2cda:	c9 f4       	brne	.+50     	; 0x2d0e <vTaskStartScheduler+0x62>
    2cdc:	f8 94       	cli
    2cde:	8f ef       	ldi	r24, 0xFF	; 255
    2ce0:	9f ef       	ldi	r25, 0xFF	; 255
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	80 93 79 06 	sts	0x0679, r24	; 0x800679 <xNextTaskUnblockTime>
    2ce8:	90 93 7a 06 	sts	0x067A, r25	; 0x80067a <xNextTaskUnblockTime+0x1>
    2cec:	a0 93 7b 06 	sts	0x067B, r26	; 0x80067b <xNextTaskUnblockTime+0x2>
    2cf0:	b0 93 7c 06 	sts	0x067C, r27	; 0x80067c <xNextTaskUnblockTime+0x3>
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <xSchedulerRunning>
    2cfa:	10 92 83 06 	sts	0x0683, r1	; 0x800683 <xTickCount>
    2cfe:	10 92 84 06 	sts	0x0684, r1	; 0x800684 <xTickCount+0x1>
    2d02:	10 92 85 06 	sts	0x0685, r1	; 0x800685 <xTickCount+0x2>
    2d06:	10 92 86 06 	sts	0x0686, r1	; 0x800686 <xTickCount+0x3>
    2d0a:	0e 94 56 06 	call	0xcac	; 0xcac <xPortStartScheduler>
    2d0e:	0f 91       	pop	r16
    2d10:	ff 90       	pop	r15
    2d12:	ef 90       	pop	r14
    2d14:	08 95       	ret

00002d16 <vTaskSuspendAll>:
    2d16:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <uxSchedulerSuspended>
    2d1a:	8f 5f       	subi	r24, 0xFF	; 255
    2d1c:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <uxSchedulerSuspended>
    2d20:	08 95       	ret

00002d22 <xTaskGetTickCount>:
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	0f 92       	push	r0
    2d28:	60 91 83 06 	lds	r22, 0x0683	; 0x800683 <xTickCount>
    2d2c:	70 91 84 06 	lds	r23, 0x0684	; 0x800684 <xTickCount+0x1>
    2d30:	80 91 85 06 	lds	r24, 0x0685	; 0x800685 <xTickCount+0x2>
    2d34:	90 91 86 06 	lds	r25, 0x0686	; 0x800686 <xTickCount+0x3>
    2d38:	0f 90       	pop	r0
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	08 95       	ret

00002d3e <xTaskIncrementTick>:
    2d3e:	9f 92       	push	r9
    2d40:	af 92       	push	r10
    2d42:	bf 92       	push	r11
    2d44:	cf 92       	push	r12
    2d46:	df 92       	push	r13
    2d48:	ef 92       	push	r14
    2d4a:	ff 92       	push	r15
    2d4c:	0f 93       	push	r16
    2d4e:	1f 93       	push	r17
    2d50:	cf 93       	push	r28
    2d52:	df 93       	push	r29
    2d54:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <uxSchedulerSuspended>
    2d58:	81 11       	cpse	r24, r1
    2d5a:	ad c0       	rjmp	.+346    	; 0x2eb6 <xTaskIncrementTick+0x178>
    2d5c:	c0 90 83 06 	lds	r12, 0x0683	; 0x800683 <xTickCount>
    2d60:	d0 90 84 06 	lds	r13, 0x0684	; 0x800684 <xTickCount+0x1>
    2d64:	e0 90 85 06 	lds	r14, 0x0685	; 0x800685 <xTickCount+0x2>
    2d68:	f0 90 86 06 	lds	r15, 0x0686	; 0x800686 <xTickCount+0x3>
    2d6c:	8f ef       	ldi	r24, 0xFF	; 255
    2d6e:	c8 1a       	sub	r12, r24
    2d70:	d8 0a       	sbc	r13, r24
    2d72:	e8 0a       	sbc	r14, r24
    2d74:	f8 0a       	sbc	r15, r24
    2d76:	c0 92 83 06 	sts	0x0683, r12	; 0x800683 <xTickCount>
    2d7a:	d0 92 84 06 	sts	0x0684, r13	; 0x800684 <xTickCount+0x1>
    2d7e:	e0 92 85 06 	sts	0x0685, r14	; 0x800685 <xTickCount+0x2>
    2d82:	f0 92 86 06 	sts	0x0686, r15	; 0x800686 <xTickCount+0x3>
    2d86:	c1 14       	cp	r12, r1
    2d88:	d1 04       	cpc	r13, r1
    2d8a:	e1 04       	cpc	r14, r1
    2d8c:	f1 04       	cpc	r15, r1
    2d8e:	b1 f4       	brne	.+44     	; 0x2dbc <xTaskIncrementTick+0x7e>
    2d90:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <pxDelayedTaskList>
    2d94:	90 91 ad 06 	lds	r25, 0x06AD	; 0x8006ad <pxDelayedTaskList+0x1>
    2d98:	20 91 aa 06 	lds	r18, 0x06AA	; 0x8006aa <pxOverflowDelayedTaskList>
    2d9c:	30 91 ab 06 	lds	r19, 0x06AB	; 0x8006ab <pxOverflowDelayedTaskList+0x1>
    2da0:	30 93 ad 06 	sts	0x06AD, r19	; 0x8006ad <pxDelayedTaskList+0x1>
    2da4:	20 93 ac 06 	sts	0x06AC, r18	; 0x8006ac <pxDelayedTaskList>
    2da8:	90 93 ab 06 	sts	0x06AB, r25	; 0x8006ab <pxOverflowDelayedTaskList+0x1>
    2dac:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <pxOverflowDelayedTaskList>
    2db0:	80 91 7e 06 	lds	r24, 0x067E	; 0x80067e <xNumOfOverflows>
    2db4:	8f 5f       	subi	r24, 0xFF	; 255
    2db6:	80 93 7e 06 	sts	0x067E, r24	; 0x80067e <xNumOfOverflows>
    2dba:	77 dd       	rcall	.-1298   	; 0x28aa <prvResetNextTaskUnblockTime>
    2dbc:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <xNextTaskUnblockTime>
    2dc0:	90 91 7a 06 	lds	r25, 0x067A	; 0x80067a <xNextTaskUnblockTime+0x1>
    2dc4:	a0 91 7b 06 	lds	r26, 0x067B	; 0x80067b <xNextTaskUnblockTime+0x2>
    2dc8:	b0 91 7c 06 	lds	r27, 0x067C	; 0x80067c <xNextTaskUnblockTime+0x3>
    2dcc:	c8 16       	cp	r12, r24
    2dce:	d9 06       	cpc	r13, r25
    2dd0:	ea 06       	cpc	r14, r26
    2dd2:	fb 06       	cpc	r15, r27
    2dd4:	10 f4       	brcc	.+4      	; 0x2dda <xTaskIncrementTick+0x9c>
    2dd6:	b1 2c       	mov	r11, r1
    2dd8:	5d c0       	rjmp	.+186    	; 0x2e94 <xTaskIncrementTick+0x156>
    2dda:	b1 2c       	mov	r11, r1
    2ddc:	0f 2e       	mov	r0, r31
    2dde:	fb e0       	ldi	r31, 0x0B	; 11
    2de0:	af 2e       	mov	r10, r31
    2de2:	f0 2d       	mov	r31, r0
    2de4:	99 24       	eor	r9, r9
    2de6:	93 94       	inc	r9
    2de8:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <pxDelayedTaskList>
    2dec:	f0 91 ad 06 	lds	r31, 0x06AD	; 0x8006ad <pxDelayedTaskList+0x1>
    2df0:	80 81       	ld	r24, Z
    2df2:	81 11       	cpse	r24, r1
    2df4:	0c c0       	rjmp	.+24     	; 0x2e0e <xTaskIncrementTick+0xd0>
    2df6:	8f ef       	ldi	r24, 0xFF	; 255
    2df8:	9f ef       	ldi	r25, 0xFF	; 255
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	80 93 79 06 	sts	0x0679, r24	; 0x800679 <xNextTaskUnblockTime>
    2e00:	90 93 7a 06 	sts	0x067A, r25	; 0x80067a <xNextTaskUnblockTime+0x1>
    2e04:	a0 93 7b 06 	sts	0x067B, r26	; 0x80067b <xNextTaskUnblockTime+0x2>
    2e08:	b0 93 7c 06 	sts	0x067C, r27	; 0x80067c <xNextTaskUnblockTime+0x3>
    2e0c:	43 c0       	rjmp	.+134    	; 0x2e94 <xTaskIncrementTick+0x156>
    2e0e:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <pxDelayedTaskList>
    2e12:	f0 91 ad 06 	lds	r31, 0x06AD	; 0x8006ad <pxDelayedTaskList+0x1>
    2e16:	07 80       	ldd	r0, Z+7	; 0x07
    2e18:	f0 85       	ldd	r31, Z+8	; 0x08
    2e1a:	e0 2d       	mov	r30, r0
    2e1c:	c0 85       	ldd	r28, Z+8	; 0x08
    2e1e:	d1 85       	ldd	r29, Z+9	; 0x09
    2e20:	8a 81       	ldd	r24, Y+2	; 0x02
    2e22:	9b 81       	ldd	r25, Y+3	; 0x03
    2e24:	ac 81       	ldd	r26, Y+4	; 0x04
    2e26:	bd 81       	ldd	r27, Y+5	; 0x05
    2e28:	c8 16       	cp	r12, r24
    2e2a:	d9 06       	cpc	r13, r25
    2e2c:	ea 06       	cpc	r14, r26
    2e2e:	fb 06       	cpc	r15, r27
    2e30:	48 f4       	brcc	.+18     	; 0x2e44 <xTaskIncrementTick+0x106>
    2e32:	80 93 79 06 	sts	0x0679, r24	; 0x800679 <xNextTaskUnblockTime>
    2e36:	90 93 7a 06 	sts	0x067A, r25	; 0x80067a <xNextTaskUnblockTime+0x1>
    2e3a:	a0 93 7b 06 	sts	0x067B, r26	; 0x80067b <xNextTaskUnblockTime+0x2>
    2e3e:	b0 93 7c 06 	sts	0x067C, r27	; 0x80067c <xNextTaskUnblockTime+0x3>
    2e42:	28 c0       	rjmp	.+80     	; 0x2e94 <xTaskIncrementTick+0x156>
    2e44:	8e 01       	movw	r16, r28
    2e46:	0e 5f       	subi	r16, 0xFE	; 254
    2e48:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4a:	c8 01       	movw	r24, r16
    2e4c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2e50:	88 8d       	ldd	r24, Y+24	; 0x18
    2e52:	99 8d       	ldd	r25, Y+25	; 0x19
    2e54:	89 2b       	or	r24, r25
    2e56:	21 f0       	breq	.+8      	; 0x2e60 <xTaskIncrementTick+0x122>
    2e58:	ce 01       	movw	r24, r28
    2e5a:	0e 96       	adiw	r24, 0x0e	; 14
    2e5c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2e60:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e62:	90 91 82 06 	lds	r25, 0x0682	; 0x800682 <uxTopReadyPriority>
    2e66:	98 17       	cp	r25, r24
    2e68:	10 f4       	brcc	.+4      	; 0x2e6e <xTaskIncrementTick+0x130>
    2e6a:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <uxTopReadyPriority>
    2e6e:	a8 9e       	mul	r10, r24
    2e70:	c0 01       	movw	r24, r0
    2e72:	11 24       	eor	r1, r1
    2e74:	b8 01       	movw	r22, r16
    2e76:	8c 53       	subi	r24, 0x3C	; 60
    2e78:	99 4f       	sbci	r25, 0xF9	; 249
    2e7a:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2e7e:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    2e82:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    2e86:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e88:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e8a:	98 17       	cp	r25, r24
    2e8c:	08 f4       	brcc	.+2      	; 0x2e90 <xTaskIncrementTick+0x152>
    2e8e:	ac cf       	rjmp	.-168    	; 0x2de8 <xTaskIncrementTick+0xaa>
    2e90:	b9 2c       	mov	r11, r9
    2e92:	aa cf       	rjmp	.-172    	; 0x2de8 <xTaskIncrementTick+0xaa>
    2e94:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    2e98:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    2e9c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2e9e:	8b e0       	ldi	r24, 0x0B	; 11
    2ea0:	e8 9f       	mul	r30, r24
    2ea2:	f0 01       	movw	r30, r0
    2ea4:	11 24       	eor	r1, r1
    2ea6:	ec 53       	subi	r30, 0x3C	; 60
    2ea8:	f9 4f       	sbci	r31, 0xF9	; 249
    2eaa:	80 81       	ld	r24, Z
    2eac:	82 30       	cpi	r24, 0x02	; 2
    2eae:	48 f0       	brcs	.+18     	; 0x2ec2 <xTaskIncrementTick+0x184>
    2eb0:	bb 24       	eor	r11, r11
    2eb2:	b3 94       	inc	r11
    2eb4:	06 c0       	rjmp	.+12     	; 0x2ec2 <xTaskIncrementTick+0x184>
    2eb6:	80 91 80 06 	lds	r24, 0x0680	; 0x800680 <uxPendedTicks>
    2eba:	8f 5f       	subi	r24, 0xFF	; 255
    2ebc:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <uxPendedTicks>
    2ec0:	b1 2c       	mov	r11, r1
    2ec2:	80 91 7f 06 	lds	r24, 0x067F	; 0x80067f <xYieldPending>
    2ec6:	88 23       	and	r24, r24
    2ec8:	11 f0       	breq	.+4      	; 0x2ece <xTaskIncrementTick+0x190>
    2eca:	bb 24       	eor	r11, r11
    2ecc:	b3 94       	inc	r11
    2ece:	8b 2d       	mov	r24, r11
    2ed0:	df 91       	pop	r29
    2ed2:	cf 91       	pop	r28
    2ed4:	1f 91       	pop	r17
    2ed6:	0f 91       	pop	r16
    2ed8:	ff 90       	pop	r15
    2eda:	ef 90       	pop	r14
    2edc:	df 90       	pop	r13
    2ede:	cf 90       	pop	r12
    2ee0:	bf 90       	pop	r11
    2ee2:	af 90       	pop	r10
    2ee4:	9f 90       	pop	r9
    2ee6:	08 95       	ret

00002ee8 <xTaskResumeAll>:
    2ee8:	cf 92       	push	r12
    2eea:	df 92       	push	r13
    2eec:	ef 92       	push	r14
    2eee:	ff 92       	push	r15
    2ef0:	0f 93       	push	r16
    2ef2:	1f 93       	push	r17
    2ef4:	cf 93       	push	r28
    2ef6:	df 93       	push	r29
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	f8 94       	cli
    2efc:	0f 92       	push	r0
    2efe:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <uxSchedulerSuspended>
    2f02:	81 50       	subi	r24, 0x01	; 1
    2f04:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <uxSchedulerSuspended>
    2f08:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <uxSchedulerSuspended>
    2f0c:	81 11       	cpse	r24, r1
    2f0e:	5a c0       	rjmp	.+180    	; 0x2fc4 <xTaskResumeAll+0xdc>
    2f10:	80 91 87 06 	lds	r24, 0x0687	; 0x800687 <uxCurrentNumberOfTasks>
    2f14:	81 11       	cpse	r24, r1
    2f16:	2c c0       	rjmp	.+88     	; 0x2f70 <xTaskResumeAll+0x88>
    2f18:	58 c0       	rjmp	.+176    	; 0x2fca <xTaskResumeAll+0xe2>
    2f1a:	d7 01       	movw	r26, r14
    2f1c:	17 96       	adiw	r26, 0x07	; 7
    2f1e:	ed 91       	ld	r30, X+
    2f20:	fc 91       	ld	r31, X
    2f22:	18 97       	sbiw	r26, 0x08	; 8
    2f24:	c0 85       	ldd	r28, Z+8	; 0x08
    2f26:	d1 85       	ldd	r29, Z+9	; 0x09
    2f28:	ce 01       	movw	r24, r28
    2f2a:	0e 96       	adiw	r24, 0x0e	; 14
    2f2c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2f30:	8e 01       	movw	r16, r28
    2f32:	0e 5f       	subi	r16, 0xFE	; 254
    2f34:	1f 4f       	sbci	r17, 0xFF	; 255
    2f36:	c8 01       	movw	r24, r16
    2f38:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2f3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f3e:	90 91 82 06 	lds	r25, 0x0682	; 0x800682 <uxTopReadyPriority>
    2f42:	98 17       	cp	r25, r24
    2f44:	10 f4       	brcc	.+4      	; 0x2f4a <xTaskResumeAll+0x62>
    2f46:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <uxTopReadyPriority>
    2f4a:	d8 9e       	mul	r13, r24
    2f4c:	c0 01       	movw	r24, r0
    2f4e:	11 24       	eor	r1, r1
    2f50:	b8 01       	movw	r22, r16
    2f52:	8c 53       	subi	r24, 0x3C	; 60
    2f54:	99 4f       	sbci	r25, 0xF9	; 249
    2f56:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2f5a:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    2f5e:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    2f62:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f64:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f66:	98 17       	cp	r25, r24
    2f68:	88 f0       	brcs	.+34     	; 0x2f8c <xTaskResumeAll+0xa4>
    2f6a:	c0 92 7f 06 	sts	0x067F, r12	; 0x80067f <xYieldPending>
    2f6e:	0e c0       	rjmp	.+28     	; 0x2f8c <xTaskResumeAll+0xa4>
    2f70:	c0 e0       	ldi	r28, 0x00	; 0
    2f72:	d0 e0       	ldi	r29, 0x00	; 0
    2f74:	0f 2e       	mov	r0, r31
    2f76:	ff e9       	ldi	r31, 0x9F	; 159
    2f78:	ef 2e       	mov	r14, r31
    2f7a:	f6 e0       	ldi	r31, 0x06	; 6
    2f7c:	ff 2e       	mov	r15, r31
    2f7e:	f0 2d       	mov	r31, r0
    2f80:	0f 2e       	mov	r0, r31
    2f82:	fb e0       	ldi	r31, 0x0B	; 11
    2f84:	df 2e       	mov	r13, r31
    2f86:	f0 2d       	mov	r31, r0
    2f88:	cc 24       	eor	r12, r12
    2f8a:	c3 94       	inc	r12
    2f8c:	f7 01       	movw	r30, r14
    2f8e:	80 81       	ld	r24, Z
    2f90:	81 11       	cpse	r24, r1
    2f92:	c3 cf       	rjmp	.-122    	; 0x2f1a <xTaskResumeAll+0x32>
    2f94:	cd 2b       	or	r28, r29
    2f96:	09 f0       	breq	.+2      	; 0x2f9a <xTaskResumeAll+0xb2>
    2f98:	88 dc       	rcall	.-1776   	; 0x28aa <prvResetNextTaskUnblockTime>
    2f9a:	c0 91 80 06 	lds	r28, 0x0680	; 0x800680 <uxPendedTicks>
    2f9e:	cc 23       	and	r28, r28
    2fa0:	49 f0       	breq	.+18     	; 0x2fb4 <xTaskResumeAll+0xcc>
    2fa2:	d1 e0       	ldi	r29, 0x01	; 1
    2fa4:	cc de       	rcall	.-616    	; 0x2d3e <xTaskIncrementTick>
    2fa6:	81 11       	cpse	r24, r1
    2fa8:	d0 93 7f 06 	sts	0x067F, r29	; 0x80067f <xYieldPending>
    2fac:	c1 50       	subi	r28, 0x01	; 1
    2fae:	d1 f7       	brne	.-12     	; 0x2fa4 <xTaskResumeAll+0xbc>
    2fb0:	10 92 80 06 	sts	0x0680, r1	; 0x800680 <uxPendedTicks>
    2fb4:	80 91 7f 06 	lds	r24, 0x067F	; 0x80067f <xYieldPending>
    2fb8:	88 23       	and	r24, r24
    2fba:	31 f0       	breq	.+12     	; 0x2fc8 <xTaskResumeAll+0xe0>
    2fbc:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	03 c0       	rjmp	.+6      	; 0x2fca <xTaskResumeAll+0xe2>
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	01 c0       	rjmp	.+2      	; 0x2fca <xTaskResumeAll+0xe2>
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	0f 90       	pop	r0
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	ff 90       	pop	r15
    2fd8:	ef 90       	pop	r14
    2fda:	df 90       	pop	r13
    2fdc:	cf 90       	pop	r12
    2fde:	08 95       	ret

00002fe0 <vTaskDelay>:
    2fe0:	cf 92       	push	r12
    2fe2:	df 92       	push	r13
    2fe4:	ef 92       	push	r14
    2fe6:	ff 92       	push	r15
    2fe8:	6b 01       	movw	r12, r22
    2fea:	7c 01       	movw	r14, r24
    2fec:	67 2b       	or	r22, r23
    2fee:	68 2b       	or	r22, r24
    2ff0:	69 2b       	or	r22, r25
    2ff2:	41 f0       	breq	.+16     	; 0x3004 <vTaskDelay+0x24>
    2ff4:	90 de       	rcall	.-736    	; 0x2d16 <vTaskSuspendAll>
    2ff6:	40 e0       	ldi	r20, 0x00	; 0
    2ff8:	c7 01       	movw	r24, r14
    2ffa:	b6 01       	movw	r22, r12
    2ffc:	80 dc       	rcall	.-1792   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    2ffe:	74 df       	rcall	.-280    	; 0x2ee8 <xTaskResumeAll>
    3000:	81 11       	cpse	r24, r1
    3002:	02 c0       	rjmp	.+4      	; 0x3008 <vTaskDelay+0x28>
    3004:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3008:	ff 90       	pop	r15
    300a:	ef 90       	pop	r14
    300c:	df 90       	pop	r13
    300e:	cf 90       	pop	r12
    3010:	08 95       	ret

00003012 <vTaskSwitchContext>:
    3012:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <uxSchedulerSuspended>
    3016:	88 23       	and	r24, r24
    3018:	21 f0       	breq	.+8      	; 0x3022 <vTaskSwitchContext+0x10>
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	80 93 7f 06 	sts	0x067F, r24	; 0x80067f <xYieldPending>
    3020:	08 95       	ret
    3022:	10 92 7f 06 	sts	0x067F, r1	; 0x80067f <xYieldPending>
    3026:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    302a:	b0 91 f1 06 	lds	r27, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    302e:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    3032:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    3036:	2d 91       	ld	r18, X+
    3038:	3c 91       	ld	r19, X
    303a:	83 8d       	ldd	r24, Z+27	; 0x1b
    303c:	94 8d       	ldd	r25, Z+28	; 0x1c
    303e:	82 17       	cp	r24, r18
    3040:	93 07       	cpc	r25, r19
    3042:	60 f0       	brcs	.+24     	; 0x305c <vTaskSwitchContext+0x4a>
    3044:	60 91 f0 06 	lds	r22, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    3048:	70 91 f1 06 	lds	r23, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    304c:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    3050:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    3054:	63 5e       	subi	r22, 0xE3	; 227
    3056:	7f 4f       	sbci	r23, 0xFF	; 255
    3058:	0e 94 fd 07 	call	0xffa	; 0xffa <vApplicationStackOverflowHook>
    305c:	80 91 82 06 	lds	r24, 0x0682	; 0x800682 <uxTopReadyPriority>
    3060:	28 2f       	mov	r18, r24
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	9b e0       	ldi	r25, 0x0B	; 11
    3066:	89 9f       	mul	r24, r25
    3068:	f0 01       	movw	r30, r0
    306a:	11 24       	eor	r1, r1
    306c:	ec 53       	subi	r30, 0x3C	; 60
    306e:	f9 4f       	sbci	r31, 0xF9	; 249
    3070:	90 81       	ld	r25, Z
    3072:	91 11       	cpse	r25, r1
    3074:	0e c0       	rjmp	.+28     	; 0x3092 <vTaskSwitchContext+0x80>
    3076:	4b e0       	ldi	r20, 0x0B	; 11
    3078:	81 50       	subi	r24, 0x01	; 1
    307a:	28 2f       	mov	r18, r24
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	42 9f       	mul	r20, r18
    3080:	f0 01       	movw	r30, r0
    3082:	43 9f       	mul	r20, r19
    3084:	f0 0d       	add	r31, r0
    3086:	11 24       	eor	r1, r1
    3088:	ec 53       	subi	r30, 0x3C	; 60
    308a:	f9 4f       	sbci	r31, 0xF9	; 249
    308c:	90 81       	ld	r25, Z
    308e:	99 23       	and	r25, r25
    3090:	99 f3       	breq	.-26     	; 0x3078 <vTaskSwitchContext+0x66>
    3092:	9b e0       	ldi	r25, 0x0B	; 11
    3094:	92 9f       	mul	r25, r18
    3096:	a0 01       	movw	r20, r0
    3098:	93 9f       	mul	r25, r19
    309a:	50 0d       	add	r21, r0
    309c:	11 24       	eor	r1, r1
    309e:	da 01       	movw	r26, r20
    30a0:	ac 53       	subi	r26, 0x3C	; 60
    30a2:	b9 4f       	sbci	r27, 0xF9	; 249
    30a4:	11 96       	adiw	r26, 0x01	; 1
    30a6:	ed 91       	ld	r30, X+
    30a8:	fc 91       	ld	r31, X
    30aa:	12 97       	sbiw	r26, 0x02	; 2
    30ac:	04 80       	ldd	r0, Z+4	; 0x04
    30ae:	f5 81       	ldd	r31, Z+5	; 0x05
    30b0:	e0 2d       	mov	r30, r0
    30b2:	12 96       	adiw	r26, 0x02	; 2
    30b4:	fc 93       	st	X, r31
    30b6:	ee 93       	st	-X, r30
    30b8:	11 97       	sbiw	r26, 0x01	; 1
    30ba:	49 53       	subi	r20, 0x39	; 57
    30bc:	59 4f       	sbci	r21, 0xF9	; 249
    30be:	e4 17       	cp	r30, r20
    30c0:	f5 07       	cpc	r31, r21
    30c2:	29 f4       	brne	.+10     	; 0x30ce <vTaskSwitchContext+0xbc>
    30c4:	44 81       	ldd	r20, Z+4	; 0x04
    30c6:	55 81       	ldd	r21, Z+5	; 0x05
    30c8:	fd 01       	movw	r30, r26
    30ca:	52 83       	std	Z+2, r21	; 0x02
    30cc:	41 83       	std	Z+1, r20	; 0x01
    30ce:	9b e0       	ldi	r25, 0x0B	; 11
    30d0:	92 9f       	mul	r25, r18
    30d2:	f0 01       	movw	r30, r0
    30d4:	93 9f       	mul	r25, r19
    30d6:	f0 0d       	add	r31, r0
    30d8:	11 24       	eor	r1, r1
    30da:	ec 53       	subi	r30, 0x3C	; 60
    30dc:	f9 4f       	sbci	r31, 0xF9	; 249
    30de:	01 80       	ldd	r0, Z+1	; 0x01
    30e0:	f2 81       	ldd	r31, Z+2	; 0x02
    30e2:	e0 2d       	mov	r30, r0
    30e4:	20 85       	ldd	r18, Z+8	; 0x08
    30e6:	31 85       	ldd	r19, Z+9	; 0x09
    30e8:	30 93 f1 06 	sts	0x06F1, r19	; 0x8006f1 <pxCurrentTCB+0x1>
    30ec:	20 93 f0 06 	sts	0x06F0, r18	; 0x8006f0 <pxCurrentTCB>
    30f0:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <uxTopReadyPriority>
    30f4:	08 95       	ret

000030f6 <vTaskSuspend>:
    30f6:	0f 93       	push	r16
    30f8:	1f 93       	push	r17
    30fa:	cf 93       	push	r28
    30fc:	df 93       	push	r29
    30fe:	ec 01       	movw	r28, r24
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	0f 92       	push	r0
    3106:	89 2b       	or	r24, r25
    3108:	21 f4       	brne	.+8      	; 0x3112 <vTaskSuspend+0x1c>
    310a:	c0 91 f0 06 	lds	r28, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    310e:	d0 91 f1 06 	lds	r29, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    3112:	8e 01       	movw	r16, r28
    3114:	0e 5f       	subi	r16, 0xFE	; 254
    3116:	1f 4f       	sbci	r17, 0xFF	; 255
    3118:	c8 01       	movw	r24, r16
    311a:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    311e:	88 8d       	ldd	r24, Y+24	; 0x18
    3120:	99 8d       	ldd	r25, Y+25	; 0x19
    3122:	89 2b       	or	r24, r25
    3124:	21 f0       	breq	.+8      	; 0x312e <vTaskSuspend+0x38>
    3126:	ce 01       	movw	r24, r28
    3128:	0e 96       	adiw	r24, 0x0e	; 14
    312a:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    312e:	b8 01       	movw	r22, r16
    3130:	88 e8       	ldi	r24, 0x88	; 136
    3132:	96 e0       	ldi	r25, 0x06	; 6
    3134:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3138:	8a a9       	ldd	r24, Y+50	; 0x32
    313a:	81 30       	cpi	r24, 0x01	; 1
    313c:	09 f4       	brne	.+2      	; 0x3140 <vTaskSuspend+0x4a>
    313e:	1a aa       	std	Y+50, r1	; 0x32
    3140:	0f 90       	pop	r0
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	80 91 81 06 	lds	r24, 0x0681	; 0x800681 <xSchedulerRunning>
    3148:	88 23       	and	r24, r24
    314a:	31 f0       	breq	.+12     	; 0x3158 <vTaskSuspend+0x62>
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	0f 92       	push	r0
    3152:	ab db       	rcall	.-2218   	; 0x28aa <prvResetNextTaskUnblockTime>
    3154:	0f 90       	pop	r0
    3156:	0f be       	out	0x3f, r0	; 63
    3158:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    315c:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    3160:	c8 17       	cp	r28, r24
    3162:	d9 07       	cpc	r29, r25
    3164:	99 f4       	brne	.+38     	; 0x318c <vTaskSuspend+0x96>
    3166:	80 91 81 06 	lds	r24, 0x0681	; 0x800681 <xSchedulerRunning>
    316a:	88 23       	and	r24, r24
    316c:	19 f0       	breq	.+6      	; 0x3174 <vTaskSuspend+0x7e>
    316e:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3172:	0c c0       	rjmp	.+24     	; 0x318c <vTaskSuspend+0x96>
    3174:	90 91 88 06 	lds	r25, 0x0688	; 0x800688 <xSuspendedTaskList>
    3178:	80 91 87 06 	lds	r24, 0x0687	; 0x800687 <uxCurrentNumberOfTasks>
    317c:	98 13       	cpse	r25, r24
    317e:	05 c0       	rjmp	.+10     	; 0x318a <vTaskSuspend+0x94>
    3180:	10 92 f1 06 	sts	0x06F1, r1	; 0x8006f1 <pxCurrentTCB+0x1>
    3184:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <pxCurrentTCB>
    3188:	01 c0       	rjmp	.+2      	; 0x318c <vTaskSuspend+0x96>
    318a:	43 df       	rcall	.-378    	; 0x3012 <vTaskSwitchContext>
    318c:	df 91       	pop	r29
    318e:	cf 91       	pop	r28
    3190:	1f 91       	pop	r17
    3192:	0f 91       	pop	r16
    3194:	08 95       	ret

00003196 <vTaskPlaceOnEventList>:
    3196:	cf 92       	push	r12
    3198:	df 92       	push	r13
    319a:	ef 92       	push	r14
    319c:	ff 92       	push	r15
    319e:	6a 01       	movw	r12, r20
    31a0:	7b 01       	movw	r14, r22
    31a2:	60 91 f0 06 	lds	r22, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    31a6:	70 91 f1 06 	lds	r23, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    31aa:	62 5f       	subi	r22, 0xF2	; 242
    31ac:	7f 4f       	sbci	r23, 0xFF	; 255
    31ae:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    31b2:	41 e0       	ldi	r20, 0x01	; 1
    31b4:	c7 01       	movw	r24, r14
    31b6:	b6 01       	movw	r22, r12
    31b8:	a2 db       	rcall	.-2236   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    31ba:	ff 90       	pop	r15
    31bc:	ef 90       	pop	r14
    31be:	df 90       	pop	r13
    31c0:	cf 90       	pop	r12
    31c2:	08 95       	ret

000031c4 <vTaskPlaceOnEventListRestricted>:
    31c4:	cf 92       	push	r12
    31c6:	df 92       	push	r13
    31c8:	ef 92       	push	r14
    31ca:	ff 92       	push	r15
    31cc:	cf 93       	push	r28
    31ce:	6a 01       	movw	r12, r20
    31d0:	7b 01       	movw	r14, r22
    31d2:	c2 2f       	mov	r28, r18
    31d4:	60 91 f0 06 	lds	r22, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    31d8:	70 91 f1 06 	lds	r23, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    31dc:	62 5f       	subi	r22, 0xF2	; 242
    31de:	7f 4f       	sbci	r23, 0xFF	; 255
    31e0:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    31e4:	cc 23       	and	r28, r28
    31e6:	21 f0       	breq	.+8      	; 0x31f0 <vTaskPlaceOnEventListRestricted+0x2c>
    31e8:	cc 24       	eor	r12, r12
    31ea:	ca 94       	dec	r12
    31ec:	dc 2c       	mov	r13, r12
    31ee:	76 01       	movw	r14, r12
    31f0:	4c 2f       	mov	r20, r28
    31f2:	c7 01       	movw	r24, r14
    31f4:	b6 01       	movw	r22, r12
    31f6:	83 db       	rcall	.-2298   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    31f8:	cf 91       	pop	r28
    31fa:	ff 90       	pop	r15
    31fc:	ef 90       	pop	r14
    31fe:	df 90       	pop	r13
    3200:	cf 90       	pop	r12
    3202:	08 95       	ret

00003204 <xTaskRemoveFromEventList>:
    3204:	0f 93       	push	r16
    3206:	1f 93       	push	r17
    3208:	cf 93       	push	r28
    320a:	df 93       	push	r29
    320c:	dc 01       	movw	r26, r24
    320e:	17 96       	adiw	r26, 0x07	; 7
    3210:	ed 91       	ld	r30, X+
    3212:	fc 91       	ld	r31, X
    3214:	18 97       	sbiw	r26, 0x08	; 8
    3216:	c0 85       	ldd	r28, Z+8	; 0x08
    3218:	d1 85       	ldd	r29, Z+9	; 0x09
    321a:	8e 01       	movw	r16, r28
    321c:	02 5f       	subi	r16, 0xF2	; 242
    321e:	1f 4f       	sbci	r17, 0xFF	; 255
    3220:	c8 01       	movw	r24, r16
    3222:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3226:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <uxSchedulerSuspended>
    322a:	81 11       	cpse	r24, r1
    322c:	16 c0       	rjmp	.+44     	; 0x325a <xTaskRemoveFromEventList+0x56>
    322e:	0c 50       	subi	r16, 0x0C	; 12
    3230:	11 09       	sbc	r17, r1
    3232:	c8 01       	movw	r24, r16
    3234:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3238:	8a 8d       	ldd	r24, Y+26	; 0x1a
    323a:	90 91 82 06 	lds	r25, 0x0682	; 0x800682 <uxTopReadyPriority>
    323e:	98 17       	cp	r25, r24
    3240:	10 f4       	brcc	.+4      	; 0x3246 <xTaskRemoveFromEventList+0x42>
    3242:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <uxTopReadyPriority>
    3246:	bb e0       	ldi	r27, 0x0B	; 11
    3248:	8b 9f       	mul	r24, r27
    324a:	c0 01       	movw	r24, r0
    324c:	11 24       	eor	r1, r1
    324e:	b8 01       	movw	r22, r16
    3250:	8c 53       	subi	r24, 0x3C	; 60
    3252:	99 4f       	sbci	r25, 0xF9	; 249
    3254:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3258:	05 c0       	rjmp	.+10     	; 0x3264 <xTaskRemoveFromEventList+0x60>
    325a:	b8 01       	movw	r22, r16
    325c:	8f e9       	ldi	r24, 0x9F	; 159
    325e:	96 e0       	ldi	r25, 0x06	; 6
    3260:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3264:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    3268:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    326c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    326e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3270:	89 17       	cp	r24, r25
    3272:	20 f4       	brcc	.+8      	; 0x327c <xTaskRemoveFromEventList+0x78>
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	80 93 7f 06 	sts	0x067F, r24	; 0x80067f <xYieldPending>
    327a:	01 c0       	rjmp	.+2      	; 0x327e <xTaskRemoveFromEventList+0x7a>
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	df 91       	pop	r29
    3280:	cf 91       	pop	r28
    3282:	1f 91       	pop	r17
    3284:	0f 91       	pop	r16
    3286:	08 95       	ret

00003288 <vTaskInternalSetTimeOutState>:
    3288:	20 91 7e 06 	lds	r18, 0x067E	; 0x80067e <xNumOfOverflows>
    328c:	fc 01       	movw	r30, r24
    328e:	20 83       	st	Z, r18
    3290:	40 91 83 06 	lds	r20, 0x0683	; 0x800683 <xTickCount>
    3294:	50 91 84 06 	lds	r21, 0x0684	; 0x800684 <xTickCount+0x1>
    3298:	60 91 85 06 	lds	r22, 0x0685	; 0x800685 <xTickCount+0x2>
    329c:	70 91 86 06 	lds	r23, 0x0686	; 0x800686 <xTickCount+0x3>
    32a0:	41 83       	std	Z+1, r20	; 0x01
    32a2:	52 83       	std	Z+2, r21	; 0x02
    32a4:	63 83       	std	Z+3, r22	; 0x03
    32a6:	74 83       	std	Z+4, r23	; 0x04
    32a8:	08 95       	ret

000032aa <xTaskCheckForTimeOut>:
    32aa:	cf 92       	push	r12
    32ac:	df 92       	push	r13
    32ae:	ef 92       	push	r14
    32b0:	ff 92       	push	r15
    32b2:	0f 93       	push	r16
    32b4:	1f 93       	push	r17
    32b6:	cf 93       	push	r28
    32b8:	df 93       	push	r29
    32ba:	fb 01       	movw	r30, r22
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	f8 94       	cli
    32c0:	0f 92       	push	r0
    32c2:	40 91 83 06 	lds	r20, 0x0683	; 0x800683 <xTickCount>
    32c6:	50 91 84 06 	lds	r21, 0x0684	; 0x800684 <xTickCount+0x1>
    32ca:	60 91 85 06 	lds	r22, 0x0685	; 0x800685 <xTickCount+0x2>
    32ce:	70 91 86 06 	lds	r23, 0x0686	; 0x800686 <xTickCount+0x3>
    32d2:	00 81       	ld	r16, Z
    32d4:	11 81       	ldd	r17, Z+1	; 0x01
    32d6:	22 81       	ldd	r18, Z+2	; 0x02
    32d8:	33 81       	ldd	r19, Z+3	; 0x03
    32da:	0f 3f       	cpi	r16, 0xFF	; 255
    32dc:	af ef       	ldi	r26, 0xFF	; 255
    32de:	1a 07       	cpc	r17, r26
    32e0:	2a 07       	cpc	r18, r26
    32e2:	3a 07       	cpc	r19, r26
    32e4:	49 f1       	breq	.+82     	; 0x3338 <xTaskCheckForTimeOut+0x8e>
    32e6:	ec 01       	movw	r28, r24
    32e8:	c9 80       	ldd	r12, Y+1	; 0x01
    32ea:	da 80       	ldd	r13, Y+2	; 0x02
    32ec:	eb 80       	ldd	r14, Y+3	; 0x03
    32ee:	fc 80       	ldd	r15, Y+4	; 0x04
    32f0:	a0 91 7e 06 	lds	r26, 0x067E	; 0x80067e <xNumOfOverflows>
    32f4:	b8 81       	ld	r27, Y
    32f6:	ba 17       	cp	r27, r26
    32f8:	29 f0       	breq	.+10     	; 0x3304 <xTaskCheckForTimeOut+0x5a>
    32fa:	4c 15       	cp	r20, r12
    32fc:	5d 05       	cpc	r21, r13
    32fe:	6e 05       	cpc	r22, r14
    3300:	7f 05       	cpc	r23, r15
    3302:	e0 f4       	brcc	.+56     	; 0x333c <xTaskCheckForTimeOut+0x92>
    3304:	4c 19       	sub	r20, r12
    3306:	5d 09       	sbc	r21, r13
    3308:	6e 09       	sbc	r22, r14
    330a:	7f 09       	sbc	r23, r15
    330c:	40 17       	cp	r20, r16
    330e:	51 07       	cpc	r21, r17
    3310:	62 07       	cpc	r22, r18
    3312:	73 07       	cpc	r23, r19
    3314:	58 f4       	brcc	.+22     	; 0x332c <xTaskCheckForTimeOut+0x82>
    3316:	04 1b       	sub	r16, r20
    3318:	15 0b       	sbc	r17, r21
    331a:	26 0b       	sbc	r18, r22
    331c:	37 0b       	sbc	r19, r23
    331e:	00 83       	st	Z, r16
    3320:	11 83       	std	Z+1, r17	; 0x01
    3322:	22 83       	std	Z+2, r18	; 0x02
    3324:	33 83       	std	Z+3, r19	; 0x03
    3326:	b0 df       	rcall	.-160    	; 0x3288 <vTaskInternalSetTimeOutState>
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	09 c0       	rjmp	.+18     	; 0x333e <xTaskCheckForTimeOut+0x94>
    332c:	10 82       	st	Z, r1
    332e:	11 82       	std	Z+1, r1	; 0x01
    3330:	12 82       	std	Z+2, r1	; 0x02
    3332:	13 82       	std	Z+3, r1	; 0x03
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	03 c0       	rjmp	.+6      	; 0x333e <xTaskCheckForTimeOut+0x94>
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	01 c0       	rjmp	.+2      	; 0x333e <xTaskCheckForTimeOut+0x94>
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	0f 90       	pop	r0
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	1f 91       	pop	r17
    3348:	0f 91       	pop	r16
    334a:	ff 90       	pop	r15
    334c:	ef 90       	pop	r14
    334e:	df 90       	pop	r13
    3350:	cf 90       	pop	r12
    3352:	08 95       	ret

00003354 <vTaskMissedYield>:
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	80 93 7f 06 	sts	0x067F, r24	; 0x80067f <xYieldPending>
    335a:	08 95       	ret

0000335c <xTaskGetSchedulerState>:
    335c:	80 91 81 06 	lds	r24, 0x0681	; 0x800681 <xSchedulerRunning>
    3360:	88 23       	and	r24, r24
    3362:	31 f0       	breq	.+12     	; 0x3370 <xTaskGetSchedulerState+0x14>
    3364:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <uxSchedulerSuspended>
    3368:	88 23       	and	r24, r24
    336a:	21 f0       	breq	.+8      	; 0x3374 <xTaskGetSchedulerState+0x18>
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	08 95       	ret
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	08 95       	ret
    3374:	82 e0       	ldi	r24, 0x02	; 2
    3376:	08 95       	ret

00003378 <xTaskPriorityInherit>:
    3378:	0f 93       	push	r16
    337a:	1f 93       	push	r17
    337c:	cf 93       	push	r28
    337e:	df 93       	push	r29
    3380:	fc 01       	movw	r30, r24
    3382:	89 2b       	or	r24, r25
    3384:	09 f4       	brne	.+2      	; 0x3388 <xTaskPriorityInherit+0x10>
    3386:	60 c0       	rjmp	.+192    	; 0x3448 <xTaskPriorityInherit+0xd0>
    3388:	82 8d       	ldd	r24, Z+26	; 0x1a
    338a:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    338e:	b0 91 f1 06 	lds	r27, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    3392:	5a 96       	adiw	r26, 0x1a	; 26
    3394:	9c 91       	ld	r25, X
    3396:	89 17       	cp	r24, r25
    3398:	08 f0       	brcs	.+2      	; 0x339c <xTaskPriorityInherit+0x24>
    339a:	4a c0       	rjmp	.+148    	; 0x3430 <xTaskPriorityInherit+0xb8>
    339c:	46 85       	ldd	r20, Z+14	; 0x0e
    339e:	57 85       	ldd	r21, Z+15	; 0x0f
    33a0:	60 89       	ldd	r22, Z+16	; 0x10
    33a2:	71 89       	ldd	r23, Z+17	; 0x11
    33a4:	77 23       	and	r23, r23
    33a6:	94 f0       	brlt	.+36     	; 0x33cc <xTaskPriorityInherit+0x54>
    33a8:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    33ac:	b0 91 f1 06 	lds	r27, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    33b0:	5a 96       	adiw	r26, 0x1a	; 26
    33b2:	9c 91       	ld	r25, X
    33b4:	44 e0       	ldi	r20, 0x04	; 4
    33b6:	50 e0       	ldi	r21, 0x00	; 0
    33b8:	60 e0       	ldi	r22, 0x00	; 0
    33ba:	70 e0       	ldi	r23, 0x00	; 0
    33bc:	49 1b       	sub	r20, r25
    33be:	51 09       	sbc	r21, r1
    33c0:	61 09       	sbc	r22, r1
    33c2:	71 09       	sbc	r23, r1
    33c4:	46 87       	std	Z+14, r20	; 0x0e
    33c6:	57 87       	std	Z+15, r21	; 0x0f
    33c8:	60 8b       	std	Z+16, r22	; 0x10
    33ca:	71 8b       	std	Z+17, r23	; 0x11
    33cc:	2b e0       	ldi	r18, 0x0B	; 11
    33ce:	82 9f       	mul	r24, r18
    33d0:	c0 01       	movw	r24, r0
    33d2:	11 24       	eor	r1, r1
    33d4:	8c 53       	subi	r24, 0x3C	; 60
    33d6:	99 4f       	sbci	r25, 0xF9	; 249
    33d8:	24 85       	ldd	r18, Z+12	; 0x0c
    33da:	35 85       	ldd	r19, Z+13	; 0x0d
    33dc:	28 17       	cp	r18, r24
    33de:	39 07       	cpc	r19, r25
    33e0:	f1 f4       	brne	.+60     	; 0x341e <xTaskPriorityInherit+0xa6>
    33e2:	8f 01       	movw	r16, r30
    33e4:	ef 01       	movw	r28, r30
    33e6:	22 96       	adiw	r28, 0x02	; 2
    33e8:	ce 01       	movw	r24, r28
    33ea:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    33ee:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    33f2:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    33f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    33f8:	f8 01       	movw	r30, r16
    33fa:	82 8f       	std	Z+26, r24	; 0x1a
    33fc:	90 91 82 06 	lds	r25, 0x0682	; 0x800682 <uxTopReadyPriority>
    3400:	98 17       	cp	r25, r24
    3402:	10 f4       	brcc	.+4      	; 0x3408 <xTaskPriorityInherit+0x90>
    3404:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <uxTopReadyPriority>
    3408:	fb e0       	ldi	r31, 0x0B	; 11
    340a:	8f 9f       	mul	r24, r31
    340c:	c0 01       	movw	r24, r0
    340e:	11 24       	eor	r1, r1
    3410:	be 01       	movw	r22, r28
    3412:	8c 53       	subi	r24, 0x3C	; 60
    3414:	99 4f       	sbci	r25, 0xF9	; 249
    3416:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	16 c0       	rjmp	.+44     	; 0x344a <xTaskPriorityInherit+0xd2>
    341e:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    3422:	b0 91 f1 06 	lds	r27, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    3426:	5a 96       	adiw	r26, 0x1a	; 26
    3428:	8c 91       	ld	r24, X
    342a:	82 8f       	std	Z+26, r24	; 0x1a
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	0d c0       	rjmp	.+26     	; 0x344a <xTaskPriorityInherit+0xd2>
    3430:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    3434:	b0 91 f1 06 	lds	r27, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	24 a5       	ldd	r18, Z+44	; 0x2c
    343c:	5a 96       	adiw	r26, 0x1a	; 26
    343e:	9c 91       	ld	r25, X
    3440:	29 17       	cp	r18, r25
    3442:	18 f0       	brcs	.+6      	; 0x344a <xTaskPriorityInherit+0xd2>
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	01 c0       	rjmp	.+2      	; 0x344a <xTaskPriorityInherit+0xd2>
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	df 91       	pop	r29
    344c:	cf 91       	pop	r28
    344e:	1f 91       	pop	r17
    3450:	0f 91       	pop	r16
    3452:	08 95       	ret

00003454 <xTaskPriorityDisinherit>:
    3454:	0f 93       	push	r16
    3456:	1f 93       	push	r17
    3458:	cf 93       	push	r28
    345a:	df 93       	push	r29
    345c:	fc 01       	movw	r30, r24
    345e:	89 2b       	or	r24, r25
    3460:	79 f1       	breq	.+94     	; 0x34c0 <xTaskPriorityDisinherit+0x6c>
    3462:	85 a5       	ldd	r24, Z+45	; 0x2d
    3464:	81 50       	subi	r24, 0x01	; 1
    3466:	85 a7       	std	Z+45, r24	; 0x2d
    3468:	22 8d       	ldd	r18, Z+26	; 0x1a
    346a:	94 a5       	ldd	r25, Z+44	; 0x2c
    346c:	29 17       	cp	r18, r25
    346e:	51 f1       	breq	.+84     	; 0x34c4 <xTaskPriorityDisinherit+0x70>
    3470:	81 11       	cpse	r24, r1
    3472:	2a c0       	rjmp	.+84     	; 0x34c8 <xTaskPriorityDisinherit+0x74>
    3474:	ef 01       	movw	r28, r30
    3476:	8f 01       	movw	r16, r30
    3478:	0e 5f       	subi	r16, 0xFE	; 254
    347a:	1f 4f       	sbci	r17, 0xFF	; 255
    347c:	c8 01       	movw	r24, r16
    347e:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3482:	8c a5       	ldd	r24, Y+44	; 0x2c
    3484:	8a 8f       	std	Y+26, r24	; 0x1a
    3486:	44 e0       	ldi	r20, 0x04	; 4
    3488:	50 e0       	ldi	r21, 0x00	; 0
    348a:	60 e0       	ldi	r22, 0x00	; 0
    348c:	70 e0       	ldi	r23, 0x00	; 0
    348e:	48 1b       	sub	r20, r24
    3490:	51 09       	sbc	r21, r1
    3492:	61 09       	sbc	r22, r1
    3494:	71 09       	sbc	r23, r1
    3496:	4e 87       	std	Y+14, r20	; 0x0e
    3498:	5f 87       	std	Y+15, r21	; 0x0f
    349a:	68 8b       	std	Y+16, r22	; 0x10
    349c:	79 8b       	std	Y+17, r23	; 0x11
    349e:	90 91 82 06 	lds	r25, 0x0682	; 0x800682 <uxTopReadyPriority>
    34a2:	98 17       	cp	r25, r24
    34a4:	10 f4       	brcc	.+4      	; 0x34aa <xTaskPriorityDisinherit+0x56>
    34a6:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <uxTopReadyPriority>
    34aa:	2b e0       	ldi	r18, 0x0B	; 11
    34ac:	82 9f       	mul	r24, r18
    34ae:	c0 01       	movw	r24, r0
    34b0:	11 24       	eor	r1, r1
    34b2:	b8 01       	movw	r22, r16
    34b4:	8c 53       	subi	r24, 0x3C	; 60
    34b6:	99 4f       	sbci	r25, 0xF9	; 249
    34b8:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	05 c0       	rjmp	.+10     	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	03 c0       	rjmp	.+6      	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	01 c0       	rjmp	.+2      	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	df 91       	pop	r29
    34cc:	cf 91       	pop	r28
    34ce:	1f 91       	pop	r17
    34d0:	0f 91       	pop	r16
    34d2:	08 95       	ret

000034d4 <vTaskPriorityDisinheritAfterTimeout>:
    34d4:	0f 93       	push	r16
    34d6:	1f 93       	push	r17
    34d8:	cf 93       	push	r28
    34da:	df 93       	push	r29
    34dc:	fc 01       	movw	r30, r24
    34de:	89 2b       	or	r24, r25
    34e0:	09 f4       	brne	.+2      	; 0x34e4 <vTaskPriorityDisinheritAfterTimeout+0x10>
    34e2:	3f c0       	rjmp	.+126    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34e4:	84 a5       	ldd	r24, Z+44	; 0x2c
    34e6:	86 17       	cp	r24, r22
    34e8:	08 f4       	brcc	.+2      	; 0x34ec <vTaskPriorityDisinheritAfterTimeout+0x18>
    34ea:	86 2f       	mov	r24, r22
    34ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    34ee:	98 17       	cp	r25, r24
    34f0:	c1 f1       	breq	.+112    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34f2:	25 a5       	ldd	r18, Z+45	; 0x2d
    34f4:	21 30       	cpi	r18, 0x01	; 1
    34f6:	a9 f5       	brne	.+106    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34f8:	82 8f       	std	Z+26, r24	; 0x1a
    34fa:	46 85       	ldd	r20, Z+14	; 0x0e
    34fc:	57 85       	ldd	r21, Z+15	; 0x0f
    34fe:	60 89       	ldd	r22, Z+16	; 0x10
    3500:	71 89       	ldd	r23, Z+17	; 0x11
    3502:	77 23       	and	r23, r23
    3504:	64 f0       	brlt	.+24     	; 0x351e <vTaskPriorityDisinheritAfterTimeout+0x4a>
    3506:	44 e0       	ldi	r20, 0x04	; 4
    3508:	50 e0       	ldi	r21, 0x00	; 0
    350a:	60 e0       	ldi	r22, 0x00	; 0
    350c:	70 e0       	ldi	r23, 0x00	; 0
    350e:	48 1b       	sub	r20, r24
    3510:	51 09       	sbc	r21, r1
    3512:	61 09       	sbc	r22, r1
    3514:	71 09       	sbc	r23, r1
    3516:	46 87       	std	Z+14, r20	; 0x0e
    3518:	57 87       	std	Z+15, r21	; 0x0f
    351a:	60 8b       	std	Z+16, r22	; 0x10
    351c:	71 8b       	std	Z+17, r23	; 0x11
    351e:	2b e0       	ldi	r18, 0x0B	; 11
    3520:	92 9f       	mul	r25, r18
    3522:	c0 01       	movw	r24, r0
    3524:	11 24       	eor	r1, r1
    3526:	8c 53       	subi	r24, 0x3C	; 60
    3528:	99 4f       	sbci	r25, 0xF9	; 249
    352a:	24 85       	ldd	r18, Z+12	; 0x0c
    352c:	35 85       	ldd	r19, Z+13	; 0x0d
    352e:	28 17       	cp	r18, r24
    3530:	39 07       	cpc	r19, r25
    3532:	b9 f4       	brne	.+46     	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3534:	ef 01       	movw	r28, r30
    3536:	8f 01       	movw	r16, r30
    3538:	0e 5f       	subi	r16, 0xFE	; 254
    353a:	1f 4f       	sbci	r17, 0xFF	; 255
    353c:	c8 01       	movw	r24, r16
    353e:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3542:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3544:	90 91 82 06 	lds	r25, 0x0682	; 0x800682 <uxTopReadyPriority>
    3548:	98 17       	cp	r25, r24
    354a:	10 f4       	brcc	.+4      	; 0x3550 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    354c:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <uxTopReadyPriority>
    3550:	2b e0       	ldi	r18, 0x0B	; 11
    3552:	82 9f       	mul	r24, r18
    3554:	c0 01       	movw	r24, r0
    3556:	11 24       	eor	r1, r1
    3558:	b8 01       	movw	r22, r16
    355a:	8c 53       	subi	r24, 0x3C	; 60
    355c:	99 4f       	sbci	r25, 0xF9	; 249
    355e:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3562:	df 91       	pop	r29
    3564:	cf 91       	pop	r28
    3566:	1f 91       	pop	r17
    3568:	0f 91       	pop	r16
    356a:	08 95       	ret

0000356c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    356c:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    3570:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    3574:	89 2b       	or	r24, r25
    3576:	39 f0       	breq	.+14     	; 0x3586 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    3578:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    357c:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    3580:	85 a5       	ldd	r24, Z+45	; 0x2d
    3582:	8f 5f       	subi	r24, 0xFF	; 255
    3584:	85 a7       	std	Z+45, r24	; 0x2d
		}

		return pxCurrentTCB;
    3586:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    358a:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
	}
    358e:	08 95       	ret

00003590 <prvInsertTimerInActiveList>:
{
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );
	return pxTimer->pcTimerName;
}
    3590:	cf 92       	push	r12
    3592:	df 92       	push	r13
    3594:	ef 92       	push	r14
    3596:	ff 92       	push	r15
    3598:	0f 93       	push	r16
    359a:	1f 93       	push	r17
    359c:	fc 01       	movw	r30, r24
    359e:	42 83       	std	Z+2, r20	; 0x02
    35a0:	53 83       	std	Z+3, r21	; 0x03
    35a2:	64 83       	std	Z+4, r22	; 0x04
    35a4:	75 83       	std	Z+5, r23	; 0x05
    35a6:	93 87       	std	Z+11, r25	; 0x0b
    35a8:	82 87       	std	Z+10, r24	; 0x0a
    35aa:	04 17       	cp	r16, r20
    35ac:	15 07       	cpc	r17, r21
    35ae:	26 07       	cpc	r18, r22
    35b0:	37 07       	cpc	r19, r23
    35b2:	c0 f0       	brcs	.+48     	; 0x35e4 <prvInsertTimerInActiveList+0x54>
    35b4:	0c 19       	sub	r16, r12
    35b6:	1d 09       	sbc	r17, r13
    35b8:	2e 09       	sbc	r18, r14
    35ba:	3f 09       	sbc	r19, r15
    35bc:	86 85       	ldd	r24, Z+14	; 0x0e
    35be:	97 85       	ldd	r25, Z+15	; 0x0f
    35c0:	a0 89       	ldd	r26, Z+16	; 0x10
    35c2:	b1 89       	ldd	r27, Z+17	; 0x11
    35c4:	08 17       	cp	r16, r24
    35c6:	19 07       	cpc	r17, r25
    35c8:	2a 07       	cpc	r18, r26
    35ca:	3b 07       	cpc	r19, r27
    35cc:	00 f5       	brcc	.+64     	; 0x360e <prvInsertTimerInActiveList+0x7e>
    35ce:	bf 01       	movw	r22, r30
    35d0:	6e 5f       	subi	r22, 0xFE	; 254
    35d2:	7f 4f       	sbci	r23, 0xFF	; 255
    35d4:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <pxOverflowTimerList>
    35d8:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <pxOverflowTimerList+0x1>
    35dc:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	18 c0       	rjmp	.+48     	; 0x3614 <prvInsertTimerInActiveList+0x84>
    35e4:	0c 15       	cp	r16, r12
    35e6:	1d 05       	cpc	r17, r13
    35e8:	2e 05       	cpc	r18, r14
    35ea:	3f 05       	cpc	r19, r15
    35ec:	28 f4       	brcc	.+10     	; 0x35f8 <prvInsertTimerInActiveList+0x68>
    35ee:	4c 15       	cp	r20, r12
    35f0:	5d 05       	cpc	r21, r13
    35f2:	6e 05       	cpc	r22, r14
    35f4:	7f 05       	cpc	r23, r15
    35f6:	68 f4       	brcc	.+26     	; 0x3612 <prvInsertTimerInActiveList+0x82>
    35f8:	bf 01       	movw	r22, r30
    35fa:	6e 5f       	subi	r22, 0xFE	; 254
    35fc:	7f 4f       	sbci	r23, 0xFF	; 255
    35fe:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <pxCurrentTimerList>
    3602:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <pxCurrentTimerList+0x1>
    3606:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	03 c0       	rjmp	.+6      	; 0x3614 <prvInsertTimerInActiveList+0x84>
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	01 c0       	rjmp	.+2      	; 0x3614 <prvInsertTimerInActiveList+0x84>
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	1f 91       	pop	r17
    3616:	0f 91       	pop	r16
    3618:	ff 90       	pop	r15
    361a:	ef 90       	pop	r14
    361c:	df 90       	pop	r13
    361e:	cf 90       	pop	r12
    3620:	08 95       	ret

00003622 <prvCheckForValidListAndQueue>:
    3622:	0f b6       	in	r0, 0x3f	; 63
    3624:	f8 94       	cli
    3626:	0f 92       	push	r0
    3628:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <xTimerQueue>
    362c:	90 91 f9 06 	lds	r25, 0x06F9	; 0x8006f9 <xTimerQueue+0x1>
    3630:	89 2b       	or	r24, r25
    3632:	e9 f4       	brne	.+58     	; 0x366e <prvCheckForValidListAndQueue+0x4c>
    3634:	89 e0       	ldi	r24, 0x09	; 9
    3636:	97 e0       	ldi	r25, 0x07	; 7
    3638:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    363c:	8e ef       	ldi	r24, 0xFE	; 254
    363e:	96 e0       	ldi	r25, 0x06	; 6
    3640:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    3644:	89 e0       	ldi	r24, 0x09	; 9
    3646:	97 e0       	ldi	r25, 0x07	; 7
    3648:	90 93 fd 06 	sts	0x06FD, r25	; 0x8006fd <pxCurrentTimerList+0x1>
    364c:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <pxCurrentTimerList>
    3650:	8e ef       	ldi	r24, 0xFE	; 254
    3652:	96 e0       	ldi	r25, 0x06	; 6
    3654:	90 93 fb 06 	sts	0x06FB, r25	; 0x8006fb <pxOverflowTimerList+0x1>
    3658:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <pxOverflowTimerList>
    365c:	40 e0       	ldi	r20, 0x00	; 0
    365e:	67 e0       	ldi	r22, 0x07	; 7
    3660:	8a e0       	ldi	r24, 0x0A	; 10
    3662:	0e 94 a7 09 	call	0x134e	; 0x134e <xQueueGenericCreate>
    3666:	90 93 f9 06 	sts	0x06F9, r25	; 0x8006f9 <xTimerQueue+0x1>
    366a:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <xTimerQueue>
    366e:	0f 90       	pop	r0
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	08 95       	ret

00003674 <xTimerCreateTimerTask>:
    3674:	ef 92       	push	r14
    3676:	ff 92       	push	r15
    3678:	0f 93       	push	r16
    367a:	d3 df       	rcall	.-90     	; 0x3622 <prvCheckForValidListAndQueue>
    367c:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <xTimerQueue>
    3680:	90 91 f9 06 	lds	r25, 0x06F9	; 0x8006f9 <xTimerQueue+0x1>
    3684:	89 2b       	or	r24, r25
    3686:	89 f0       	breq	.+34     	; 0x36aa <xTimerCreateTimerTask+0x36>
    3688:	0f 2e       	mov	r0, r31
    368a:	f6 ef       	ldi	r31, 0xF6	; 246
    368c:	ef 2e       	mov	r14, r31
    368e:	f6 e0       	ldi	r31, 0x06	; 6
    3690:	ff 2e       	mov	r15, r31
    3692:	f0 2d       	mov	r31, r0
    3694:	03 e0       	ldi	r16, 0x03	; 3
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	40 e8       	ldi	r20, 0x80	; 128
    369c:	50 e0       	ldi	r21, 0x00	; 0
    369e:	6b e1       	ldi	r22, 0x1B	; 27
    36a0:	72 e0       	ldi	r23, 0x02	; 2
    36a2:	85 e8       	ldi	r24, 0x85	; 133
    36a4:	9c e1       	ldi	r25, 0x1C	; 28
    36a6:	a2 d9       	rcall	.-3260   	; 0x29ec <xTaskCreate>
    36a8:	01 c0       	rjmp	.+2      	; 0x36ac <xTimerCreateTimerTask+0x38>
    36aa:	80 e0       	ldi	r24, 0x00	; 0
    36ac:	0f 91       	pop	r16
    36ae:	ff 90       	pop	r15
    36b0:	ef 90       	pop	r14
    36b2:	08 95       	ret

000036b4 <xTimerCreate>:
    36b4:	7f 92       	push	r7
    36b6:	8f 92       	push	r8
    36b8:	9f 92       	push	r9
    36ba:	af 92       	push	r10
    36bc:	bf 92       	push	r11
    36be:	cf 92       	push	r12
    36c0:	df 92       	push	r13
    36c2:	ef 92       	push	r14
    36c4:	ff 92       	push	r15
    36c6:	0f 93       	push	r16
    36c8:	1f 93       	push	r17
    36ca:	cf 93       	push	r28
    36cc:	df 93       	push	r29
    36ce:	6c 01       	movw	r12, r24
    36d0:	4a 01       	movw	r8, r20
    36d2:	5b 01       	movw	r10, r22
    36d4:	72 2e       	mov	r7, r18
    36d6:	87 e1       	ldi	r24, 0x17	; 23
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    36de:	ec 01       	movw	r28, r24
    36e0:	89 2b       	or	r24, r25
    36e2:	81 f0       	breq	.+32     	; 0x3704 <xTimerCreate+0x50>
    36e4:	9e df       	rcall	.-196    	; 0x3622 <prvCheckForValidListAndQueue>
    36e6:	d9 82       	std	Y+1, r13	; 0x01
    36e8:	c8 82       	st	Y, r12
    36ea:	8e 86       	std	Y+14, r8	; 0x0e
    36ec:	9f 86       	std	Y+15, r9	; 0x0f
    36ee:	a8 8a       	std	Y+16, r10	; 0x10
    36f0:	b9 8a       	std	Y+17, r11	; 0x11
    36f2:	7a 8a       	std	Y+18, r7	; 0x12
    36f4:	1c 8b       	std	Y+20, r17	; 0x14
    36f6:	0b 8b       	std	Y+19, r16	; 0x13
    36f8:	fe 8a       	std	Y+22, r15	; 0x16
    36fa:	ed 8a       	std	Y+21, r14	; 0x15
    36fc:	ce 01       	movw	r24, r28
    36fe:	02 96       	adiw	r24, 0x02	; 2
    3700:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    3704:	ce 01       	movw	r24, r28
    3706:	df 91       	pop	r29
    3708:	cf 91       	pop	r28
    370a:	1f 91       	pop	r17
    370c:	0f 91       	pop	r16
    370e:	ff 90       	pop	r15
    3710:	ef 90       	pop	r14
    3712:	df 90       	pop	r13
    3714:	cf 90       	pop	r12
    3716:	bf 90       	pop	r11
    3718:	af 90       	pop	r10
    371a:	9f 90       	pop	r9
    371c:	8f 90       	pop	r8
    371e:	7f 90       	pop	r7
    3720:	08 95       	ret

00003722 <xTimerGenericCommand>:
    3722:	8f 92       	push	r8
    3724:	9f 92       	push	r9
    3726:	af 92       	push	r10
    3728:	bf 92       	push	r11
    372a:	cf 92       	push	r12
    372c:	df 92       	push	r13
    372e:	ef 92       	push	r14
    3730:	ff 92       	push	r15
    3732:	0f 93       	push	r16
    3734:	1f 93       	push	r17
    3736:	cf 93       	push	r28
    3738:	df 93       	push	r29
    373a:	cd b7       	in	r28, 0x3d	; 61
    373c:	de b7       	in	r29, 0x3e	; 62
    373e:	27 97       	sbiw	r28, 0x07	; 7
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	f8 94       	cli
    3744:	de bf       	out	0x3e, r29	; 62
    3746:	0f be       	out	0x3f, r0	; 63
    3748:	cd bf       	out	0x3d, r28	; 61
    374a:	e0 91 f8 06 	lds	r30, 0x06F8	; 0x8006f8 <xTimerQueue>
    374e:	f0 91 f9 06 	lds	r31, 0x06F9	; 0x8006f9 <xTimerQueue+0x1>
    3752:	30 97       	sbiw	r30, 0x00	; 0
    3754:	81 f1       	breq	.+96     	; 0x37b6 <xTimerGenericCommand+0x94>
    3756:	69 83       	std	Y+1, r22	; 0x01
    3758:	2a 83       	std	Y+2, r18	; 0x02
    375a:	3b 83       	std	Y+3, r19	; 0x03
    375c:	4c 83       	std	Y+4, r20	; 0x04
    375e:	5d 83       	std	Y+5, r21	; 0x05
    3760:	9f 83       	std	Y+7, r25	; 0x07
    3762:	8e 83       	std	Y+6, r24	; 0x06
    3764:	66 30       	cpi	r22, 0x06	; 6
    3766:	f4 f4       	brge	.+60     	; 0x37a4 <xTimerGenericCommand+0x82>
    3768:	f9 dd       	rcall	.-1038   	; 0x335c <xTaskGetSchedulerState>
    376a:	82 30       	cpi	r24, 0x02	; 2
    376c:	69 f4       	brne	.+26     	; 0x3788 <xTimerGenericCommand+0x66>
    376e:	00 e0       	ldi	r16, 0x00	; 0
    3770:	a7 01       	movw	r20, r14
    3772:	96 01       	movw	r18, r12
    3774:	be 01       	movw	r22, r28
    3776:	6f 5f       	subi	r22, 0xFF	; 255
    3778:	7f 4f       	sbci	r23, 0xFF	; 255
    377a:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <xTimerQueue>
    377e:	90 91 f9 06 	lds	r25, 0x06F9	; 0x8006f9 <xTimerQueue+0x1>
    3782:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    3786:	18 c0       	rjmp	.+48     	; 0x37b8 <xTimerGenericCommand+0x96>
    3788:	00 e0       	ldi	r16, 0x00	; 0
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	a9 01       	movw	r20, r18
    3790:	be 01       	movw	r22, r28
    3792:	6f 5f       	subi	r22, 0xFF	; 255
    3794:	7f 4f       	sbci	r23, 0xFF	; 255
    3796:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <xTimerQueue>
    379a:	90 91 f9 06 	lds	r25, 0x06F9	; 0x8006f9 <xTimerQueue+0x1>
    379e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    37a2:	0a c0       	rjmp	.+20     	; 0x37b8 <xTimerGenericCommand+0x96>
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	a8 01       	movw	r20, r16
    37a8:	be 01       	movw	r22, r28
    37aa:	6f 5f       	subi	r22, 0xFF	; 255
    37ac:	7f 4f       	sbci	r23, 0xFF	; 255
    37ae:	cf 01       	movw	r24, r30
    37b0:	0e 94 90 0a 	call	0x1520	; 0x1520 <xQueueGenericSendFromISR>
    37b4:	01 c0       	rjmp	.+2      	; 0x37b8 <xTimerGenericCommand+0x96>
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	27 96       	adiw	r28, 0x07	; 7
    37ba:	0f b6       	in	r0, 0x3f	; 63
    37bc:	f8 94       	cli
    37be:	de bf       	out	0x3e, r29	; 62
    37c0:	0f be       	out	0x3f, r0	; 63
    37c2:	cd bf       	out	0x3d, r28	; 61
    37c4:	df 91       	pop	r29
    37c6:	cf 91       	pop	r28
    37c8:	1f 91       	pop	r17
    37ca:	0f 91       	pop	r16
    37cc:	ff 90       	pop	r15
    37ce:	ef 90       	pop	r14
    37d0:	df 90       	pop	r13
    37d2:	cf 90       	pop	r12
    37d4:	bf 90       	pop	r11
    37d6:	af 90       	pop	r10
    37d8:	9f 90       	pop	r9
    37da:	8f 90       	pop	r8
    37dc:	08 95       	ret

000037de <prvSampleTimeNow>:
    37de:	2f 92       	push	r2
    37e0:	3f 92       	push	r3
    37e2:	4f 92       	push	r4
    37e4:	5f 92       	push	r5
    37e6:	6f 92       	push	r6
    37e8:	7f 92       	push	r7
    37ea:	8f 92       	push	r8
    37ec:	9f 92       	push	r9
    37ee:	af 92       	push	r10
    37f0:	bf 92       	push	r11
    37f2:	cf 92       	push	r12
    37f4:	df 92       	push	r13
    37f6:	ef 92       	push	r14
    37f8:	ff 92       	push	r15
    37fa:	0f 93       	push	r16
    37fc:	1f 93       	push	r17
    37fe:	cf 93       	push	r28
    3800:	df 93       	push	r29
    3802:	1c 01       	movw	r2, r24
    3804:	8e da       	rcall	.-2788   	; 0x2d22 <xTaskGetTickCount>
    3806:	2b 01       	movw	r4, r22
    3808:	3c 01       	movw	r6, r24
    380a:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <xLastTime.2378>
    380e:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <xLastTime.2378+0x1>
    3812:	a0 91 f4 06 	lds	r26, 0x06F4	; 0x8006f4 <xLastTime.2378+0x2>
    3816:	b0 91 f5 06 	lds	r27, 0x06F5	; 0x8006f5 <xLastTime.2378+0x3>
    381a:	48 16       	cp	r4, r24
    381c:	59 06       	cpc	r5, r25
    381e:	6a 06       	cpc	r6, r26
    3820:	7b 06       	cpc	r7, r27
    3822:	08 f0       	brcs	.+2      	; 0x3826 <prvSampleTimeNow+0x48>
    3824:	53 c0       	rjmp	.+166    	; 0x38cc <prvSampleTimeNow+0xee>
    3826:	3b c0       	rjmp	.+118    	; 0x389e <prvSampleTimeNow+0xc0>
    3828:	07 80       	ldd	r0, Z+7	; 0x07
    382a:	f0 85       	ldd	r31, Z+8	; 0x08
    382c:	e0 2d       	mov	r30, r0
    382e:	80 80       	ld	r8, Z
    3830:	91 80       	ldd	r9, Z+1	; 0x01
    3832:	a2 80       	ldd	r10, Z+2	; 0x02
    3834:	b3 80       	ldd	r11, Z+3	; 0x03
    3836:	c0 85       	ldd	r28, Z+8	; 0x08
    3838:	d1 85       	ldd	r29, Z+9	; 0x09
    383a:	8e 01       	movw	r16, r28
    383c:	0e 5f       	subi	r16, 0xFE	; 254
    383e:	1f 4f       	sbci	r17, 0xFF	; 255
    3840:	c8 01       	movw	r24, r16
    3842:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3846:	ed 89       	ldd	r30, Y+21	; 0x15
    3848:	fe 89       	ldd	r31, Y+22	; 0x16
    384a:	ce 01       	movw	r24, r28
    384c:	19 95       	eicall
    384e:	8a 89       	ldd	r24, Y+18	; 0x12
    3850:	81 30       	cpi	r24, 0x01	; 1
    3852:	29 f5       	brne	.+74     	; 0x389e <prvSampleTimeNow+0xc0>
    3854:	8e 85       	ldd	r24, Y+14	; 0x0e
    3856:	9f 85       	ldd	r25, Y+15	; 0x0f
    3858:	a8 89       	ldd	r26, Y+16	; 0x10
    385a:	b9 89       	ldd	r27, Y+17	; 0x11
    385c:	88 0d       	add	r24, r8
    385e:	99 1d       	adc	r25, r9
    3860:	aa 1d       	adc	r26, r10
    3862:	bb 1d       	adc	r27, r11
    3864:	88 16       	cp	r8, r24
    3866:	99 06       	cpc	r9, r25
    3868:	aa 06       	cpc	r10, r26
    386a:	bb 06       	cpc	r11, r27
    386c:	70 f4       	brcc	.+28     	; 0x388a <prvSampleTimeNow+0xac>
    386e:	8a 83       	std	Y+2, r24	; 0x02
    3870:	9b 83       	std	Y+3, r25	; 0x03
    3872:	ac 83       	std	Y+4, r26	; 0x04
    3874:	bd 83       	std	Y+5, r27	; 0x05
    3876:	db 87       	std	Y+11, r29	; 0x0b
    3878:	ca 87       	std	Y+10, r28	; 0x0a
    387a:	b8 01       	movw	r22, r16
    387c:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <pxCurrentTimerList>
    3880:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <pxCurrentTimerList+0x1>
    3884:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    3888:	0a c0       	rjmp	.+20     	; 0x389e <prvSampleTimeNow+0xc0>
    388a:	c1 2c       	mov	r12, r1
    388c:	d1 2c       	mov	r13, r1
    388e:	76 01       	movw	r14, r12
    3890:	00 e0       	ldi	r16, 0x00	; 0
    3892:	10 e0       	ldi	r17, 0x00	; 0
    3894:	a5 01       	movw	r20, r10
    3896:	94 01       	movw	r18, r8
    3898:	60 e0       	ldi	r22, 0x00	; 0
    389a:	ce 01       	movw	r24, r28
    389c:	42 df       	rcall	.-380    	; 0x3722 <xTimerGenericCommand>
    389e:	e0 91 fc 06 	lds	r30, 0x06FC	; 0x8006fc <pxCurrentTimerList>
    38a2:	f0 91 fd 06 	lds	r31, 0x06FD	; 0x8006fd <pxCurrentTimerList+0x1>
    38a6:	80 81       	ld	r24, Z
    38a8:	81 11       	cpse	r24, r1
    38aa:	be cf       	rjmp	.-132    	; 0x3828 <prvSampleTimeNow+0x4a>
    38ac:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <pxOverflowTimerList>
    38b0:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <pxOverflowTimerList+0x1>
    38b4:	90 93 fd 06 	sts	0x06FD, r25	; 0x8006fd <pxCurrentTimerList+0x1>
    38b8:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <pxCurrentTimerList>
    38bc:	f0 93 fb 06 	sts	0x06FB, r31	; 0x8006fb <pxOverflowTimerList+0x1>
    38c0:	e0 93 fa 06 	sts	0x06FA, r30	; 0x8006fa <pxOverflowTimerList>
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	f1 01       	movw	r30, r2
    38c8:	80 83       	st	Z, r24
    38ca:	02 c0       	rjmp	.+4      	; 0x38d0 <prvSampleTimeNow+0xf2>
    38cc:	f1 01       	movw	r30, r2
    38ce:	10 82       	st	Z, r1
    38d0:	40 92 f2 06 	sts	0x06F2, r4	; 0x8006f2 <xLastTime.2378>
    38d4:	50 92 f3 06 	sts	0x06F3, r5	; 0x8006f3 <xLastTime.2378+0x1>
    38d8:	60 92 f4 06 	sts	0x06F4, r6	; 0x8006f4 <xLastTime.2378+0x2>
    38dc:	70 92 f5 06 	sts	0x06F5, r7	; 0x8006f5 <xLastTime.2378+0x3>
    38e0:	c3 01       	movw	r24, r6
    38e2:	b2 01       	movw	r22, r4
    38e4:	df 91       	pop	r29
    38e6:	cf 91       	pop	r28
    38e8:	1f 91       	pop	r17
    38ea:	0f 91       	pop	r16
    38ec:	ff 90       	pop	r15
    38ee:	ef 90       	pop	r14
    38f0:	df 90       	pop	r13
    38f2:	cf 90       	pop	r12
    38f4:	bf 90       	pop	r11
    38f6:	af 90       	pop	r10
    38f8:	9f 90       	pop	r9
    38fa:	8f 90       	pop	r8
    38fc:	7f 90       	pop	r7
    38fe:	6f 90       	pop	r6
    3900:	5f 90       	pop	r5
    3902:	4f 90       	pop	r4
    3904:	3f 90       	pop	r3
    3906:	2f 90       	pop	r2
    3908:	08 95       	ret

0000390a <prvTimerTask>:
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
    3912:	60 97       	sbiw	r28, 0x10	; 16
    3914:	0f b6       	in	r0, 0x3f	; 63
    3916:	f8 94       	cli
    3918:	de bf       	out	0x3e, r29	; 62
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	cd bf       	out	0x3d, r28	; 61
    391e:	ce 01       	movw	r24, r28
    3920:	01 96       	adiw	r24, 0x01	; 1
    3922:	9a 87       	std	Y+10, r25	; 0x0a
    3924:	89 87       	std	Y+9, r24	; 0x09
    3926:	81 2c       	mov	r8, r1
    3928:	91 2c       	mov	r9, r1
    392a:	a1 2c       	mov	r10, r1
    392c:	b1 2c       	mov	r11, r1
    392e:	69 84       	ldd	r6, Y+9	; 0x09
    3930:	7a 84       	ldd	r7, Y+10	; 0x0a
    3932:	e0 91 fc 06 	lds	r30, 0x06FC	; 0x8006fc <pxCurrentTimerList>
    3936:	f0 91 fd 06 	lds	r31, 0x06FD	; 0x8006fd <pxCurrentTimerList+0x1>
    393a:	80 81       	ld	r24, Z
    393c:	88 23       	and	r24, r24
    393e:	09 f4       	brne	.+2      	; 0x3942 <prvTimerTask+0x38>
    3940:	f2 c0       	rjmp	.+484    	; 0x3b26 <prvTimerTask+0x21c>
    3942:	07 80       	ldd	r0, Z+7	; 0x07
    3944:	f0 85       	ldd	r31, Z+8	; 0x08
    3946:	e0 2d       	mov	r30, r0
    3948:	20 80       	ld	r2, Z
    394a:	31 80       	ldd	r3, Z+1	; 0x01
    394c:	42 80       	ldd	r4, Z+2	; 0x02
    394e:	53 80       	ldd	r5, Z+3	; 0x03
    3950:	e2 d9       	rcall	.-3132   	; 0x2d16 <vTaskSuspendAll>
    3952:	ce 01       	movw	r24, r28
    3954:	01 96       	adiw	r24, 0x01	; 1
    3956:	43 df       	rcall	.-378    	; 0x37de <prvSampleTimeNow>
    3958:	6b 87       	std	Y+11, r22	; 0x0b
    395a:	7c 87       	std	Y+12, r23	; 0x0c
    395c:	8d 87       	std	Y+13, r24	; 0x0d
    395e:	9e 87       	std	Y+14, r25	; 0x0e
    3960:	89 81       	ldd	r24, Y+1	; 0x01
    3962:	81 11       	cpse	r24, r1
    3964:	5d c0       	rjmp	.+186    	; 0x3a20 <prvTimerTask+0x116>
    3966:	8b 85       	ldd	r24, Y+11	; 0x0b
    3968:	9c 85       	ldd	r25, Y+12	; 0x0c
    396a:	ad 85       	ldd	r26, Y+13	; 0x0d
    396c:	be 85       	ldd	r27, Y+14	; 0x0e
    396e:	82 15       	cp	r24, r2
    3970:	93 05       	cpc	r25, r3
    3972:	a4 05       	cpc	r26, r4
    3974:	b5 05       	cpc	r27, r5
    3976:	08 f4       	brcc	.+2      	; 0x397a <prvTimerTask+0x70>
    3978:	3c c0       	rjmp	.+120    	; 0x39f2 <prvTimerTask+0xe8>
    397a:	b6 da       	rcall	.-2708   	; 0x2ee8 <xTaskResumeAll>
    397c:	e0 91 fc 06 	lds	r30, 0x06FC	; 0x8006fc <pxCurrentTimerList>
    3980:	f0 91 fd 06 	lds	r31, 0x06FD	; 0x8006fd <pxCurrentTimerList+0x1>
    3984:	07 80       	ldd	r0, Z+7	; 0x07
    3986:	f0 85       	ldd	r31, Z+8	; 0x08
    3988:	e0 2d       	mov	r30, r0
    398a:	a0 85       	ldd	r26, Z+8	; 0x08
    398c:	b1 85       	ldd	r27, Z+9	; 0x09
    398e:	b8 8b       	std	Y+16, r27	; 0x10
    3990:	af 87       	std	Y+15, r26	; 0x0f
    3992:	cd 01       	movw	r24, r26
    3994:	02 96       	adiw	r24, 0x02	; 2
    3996:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    399a:	ef 85       	ldd	r30, Y+15	; 0x0f
    399c:	f8 89       	ldd	r31, Y+16	; 0x10
    399e:	82 89       	ldd	r24, Z+18	; 0x12
    39a0:	81 30       	cpi	r24, 0x01	; 1
    39a2:	f1 f4       	brne	.+60     	; 0x39e0 <prvTimerTask+0xd6>
    39a4:	46 85       	ldd	r20, Z+14	; 0x0e
    39a6:	57 85       	ldd	r21, Z+15	; 0x0f
    39a8:	60 89       	ldd	r22, Z+16	; 0x10
    39aa:	71 89       	ldd	r23, Z+17	; 0x11
    39ac:	42 0d       	add	r20, r2
    39ae:	53 1d       	adc	r21, r3
    39b0:	64 1d       	adc	r22, r4
    39b2:	75 1d       	adc	r23, r5
    39b4:	72 01       	movw	r14, r4
    39b6:	61 01       	movw	r12, r2
    39b8:	0b 85       	ldd	r16, Y+11	; 0x0b
    39ba:	1c 85       	ldd	r17, Y+12	; 0x0c
    39bc:	2d 85       	ldd	r18, Y+13	; 0x0d
    39be:	3e 85       	ldd	r19, Y+14	; 0x0e
    39c0:	cf 01       	movw	r24, r30
    39c2:	e6 dd       	rcall	.-1076   	; 0x3590 <prvInsertTimerInActiveList>
    39c4:	88 23       	and	r24, r24
    39c6:	61 f0       	breq	.+24     	; 0x39e0 <prvTimerTask+0xd6>
    39c8:	c8 2c       	mov	r12, r8
    39ca:	d9 2c       	mov	r13, r9
    39cc:	ea 2c       	mov	r14, r10
    39ce:	fb 2c       	mov	r15, r11
    39d0:	00 e0       	ldi	r16, 0x00	; 0
    39d2:	10 e0       	ldi	r17, 0x00	; 0
    39d4:	a2 01       	movw	r20, r4
    39d6:	91 01       	movw	r18, r2
    39d8:	60 e0       	ldi	r22, 0x00	; 0
    39da:	8f 85       	ldd	r24, Y+15	; 0x0f
    39dc:	98 89       	ldd	r25, Y+16	; 0x10
    39de:	a1 de       	rcall	.-702    	; 0x3722 <xTimerGenericCommand>
    39e0:	af 85       	ldd	r26, Y+15	; 0x0f
    39e2:	b8 89       	ldd	r27, Y+16	; 0x10
    39e4:	55 96       	adiw	r26, 0x15	; 21
    39e6:	ed 91       	ld	r30, X+
    39e8:	fc 91       	ld	r31, X
    39ea:	56 97       	sbiw	r26, 0x16	; 22
    39ec:	cd 01       	movw	r24, r26
    39ee:	19 95       	eicall
    39f0:	8b c0       	rjmp	.+278    	; 0x3b08 <prvTimerTask+0x1fe>
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	b2 01       	movw	r22, r4
    39f6:	a1 01       	movw	r20, r2
    39f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    39fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    39fc:	ad 85       	ldd	r26, Y+13	; 0x0d
    39fe:	be 85       	ldd	r27, Y+14	; 0x0e
    3a00:	48 1b       	sub	r20, r24
    3a02:	59 0b       	sbc	r21, r25
    3a04:	6a 0b       	sbc	r22, r26
    3a06:	7b 0b       	sbc	r23, r27
    3a08:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <xTimerQueue>
    3a0c:	90 91 f9 06 	lds	r25, 0x06F9	; 0x8006f9 <xTimerQueue+0x1>
    3a10:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <vQueueWaitForMessageRestricted>
    3a14:	69 da       	rcall	.-2862   	; 0x2ee8 <xTaskResumeAll>
    3a16:	81 11       	cpse	r24, r1
    3a18:	77 c0       	rjmp	.+238    	; 0x3b08 <prvTimerTask+0x1fe>
    3a1a:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3a1e:	74 c0       	rjmp	.+232    	; 0x3b08 <prvTimerTask+0x1fe>
    3a20:	63 da       	rcall	.-2874   	; 0x2ee8 <xTaskResumeAll>
    3a22:	72 c0       	rjmp	.+228    	; 0x3b08 <prvTimerTask+0x1fe>
    3a24:	89 81       	ldd	r24, Y+1	; 0x01
    3a26:	88 23       	and	r24, r24
    3a28:	0c f4       	brge	.+2      	; 0x3a2c <prvTimerTask+0x122>
    3a2a:	6e c0       	rjmp	.+220    	; 0x3b08 <prvTimerTask+0x1fe>
    3a2c:	4e 80       	ldd	r4, Y+6	; 0x06
    3a2e:	5f 80       	ldd	r5, Y+7	; 0x07
    3a30:	d2 01       	movw	r26, r4
    3a32:	1c 96       	adiw	r26, 0x0c	; 12
    3a34:	8d 91       	ld	r24, X+
    3a36:	9c 91       	ld	r25, X
    3a38:	1d 97       	sbiw	r26, 0x0d	; 13
    3a3a:	89 2b       	or	r24, r25
    3a3c:	21 f0       	breq	.+8      	; 0x3a46 <prvTimerTask+0x13c>
    3a3e:	c2 01       	movw	r24, r4
    3a40:	02 96       	adiw	r24, 0x02	; 2
    3a42:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3a46:	ce 01       	movw	r24, r28
    3a48:	08 96       	adiw	r24, 0x08	; 8
    3a4a:	c9 de       	rcall	.-622    	; 0x37de <prvSampleTimeNow>
    3a4c:	8b 01       	movw	r16, r22
    3a4e:	9c 01       	movw	r18, r24
    3a50:	89 81       	ldd	r24, Y+1	; 0x01
    3a52:	08 2e       	mov	r0, r24
    3a54:	00 0c       	add	r0, r0
    3a56:	99 0b       	sbc	r25, r25
    3a58:	aa 0b       	sbc	r26, r26
    3a5a:	bb 0b       	sbc	r27, r27
    3a5c:	8a 30       	cpi	r24, 0x0A	; 10
    3a5e:	91 05       	cpc	r25, r1
    3a60:	08 f0       	brcs	.+2      	; 0x3a64 <prvTimerTask+0x15a>
    3a62:	52 c0       	rjmp	.+164    	; 0x3b08 <prvTimerTask+0x1fe>
    3a64:	fc 01       	movw	r30, r24
    3a66:	88 27       	eor	r24, r24
    3a68:	ee 56       	subi	r30, 0x6E	; 110
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a6e:	0c 94 63 59 	jmp	0xb2c6	; 0xb2c6 <__tablejump2__>
    3a72:	ca 80       	ldd	r12, Y+2	; 0x02
    3a74:	db 80       	ldd	r13, Y+3	; 0x03
    3a76:	ec 80       	ldd	r14, Y+4	; 0x04
    3a78:	fd 80       	ldd	r15, Y+5	; 0x05
    3a7a:	f2 01       	movw	r30, r4
    3a7c:	46 85       	ldd	r20, Z+14	; 0x0e
    3a7e:	57 85       	ldd	r21, Z+15	; 0x0f
    3a80:	60 89       	ldd	r22, Z+16	; 0x10
    3a82:	71 89       	ldd	r23, Z+17	; 0x11
    3a84:	4c 0d       	add	r20, r12
    3a86:	5d 1d       	adc	r21, r13
    3a88:	6e 1d       	adc	r22, r14
    3a8a:	7f 1d       	adc	r23, r15
    3a8c:	c2 01       	movw	r24, r4
    3a8e:	80 dd       	rcall	.-1280   	; 0x3590 <prvInsertTimerInActiveList>
    3a90:	88 23       	and	r24, r24
    3a92:	d1 f1       	breq	.+116    	; 0x3b08 <prvTimerTask+0x1fe>
    3a94:	d2 01       	movw	r26, r4
    3a96:	55 96       	adiw	r26, 0x15	; 21
    3a98:	ed 91       	ld	r30, X+
    3a9a:	fc 91       	ld	r31, X
    3a9c:	56 97       	sbiw	r26, 0x16	; 22
    3a9e:	c2 01       	movw	r24, r4
    3aa0:	19 95       	eicall
    3aa2:	f2 01       	movw	r30, r4
    3aa4:	82 89       	ldd	r24, Z+18	; 0x12
    3aa6:	81 30       	cpi	r24, 0x01	; 1
    3aa8:	79 f5       	brne	.+94     	; 0x3b08 <prvTimerTask+0x1fe>
    3aaa:	4a 81       	ldd	r20, Y+2	; 0x02
    3aac:	5b 81       	ldd	r21, Y+3	; 0x03
    3aae:	6c 81       	ldd	r22, Y+4	; 0x04
    3ab0:	7d 81       	ldd	r23, Y+5	; 0x05
    3ab2:	86 85       	ldd	r24, Z+14	; 0x0e
    3ab4:	97 85       	ldd	r25, Z+15	; 0x0f
    3ab6:	a0 89       	ldd	r26, Z+16	; 0x10
    3ab8:	b1 89       	ldd	r27, Z+17	; 0x11
    3aba:	9a 01       	movw	r18, r20
    3abc:	ab 01       	movw	r20, r22
    3abe:	28 0f       	add	r18, r24
    3ac0:	39 1f       	adc	r19, r25
    3ac2:	4a 1f       	adc	r20, r26
    3ac4:	5b 1f       	adc	r21, r27
    3ac6:	c8 2c       	mov	r12, r8
    3ac8:	d9 2c       	mov	r13, r9
    3aca:	ea 2c       	mov	r14, r10
    3acc:	fb 2c       	mov	r15, r11
    3ace:	00 e0       	ldi	r16, 0x00	; 0
    3ad0:	10 e0       	ldi	r17, 0x00	; 0
    3ad2:	60 e0       	ldi	r22, 0x00	; 0
    3ad4:	c2 01       	movw	r24, r4
    3ad6:	25 de       	rcall	.-950    	; 0x3722 <xTimerGenericCommand>
    3ad8:	17 c0       	rjmp	.+46     	; 0x3b08 <prvTimerTask+0x1fe>
    3ada:	4a 81       	ldd	r20, Y+2	; 0x02
    3adc:	5b 81       	ldd	r21, Y+3	; 0x03
    3ade:	6c 81       	ldd	r22, Y+4	; 0x04
    3ae0:	7d 81       	ldd	r23, Y+5	; 0x05
    3ae2:	d2 01       	movw	r26, r4
    3ae4:	1e 96       	adiw	r26, 0x0e	; 14
    3ae6:	4d 93       	st	X+, r20
    3ae8:	5d 93       	st	X+, r21
    3aea:	6d 93       	st	X+, r22
    3aec:	7c 93       	st	X, r23
    3aee:	51 97       	sbiw	r26, 0x11	; 17
    3af0:	40 0f       	add	r20, r16
    3af2:	51 1f       	adc	r21, r17
    3af4:	62 1f       	adc	r22, r18
    3af6:	73 1f       	adc	r23, r19
    3af8:	68 01       	movw	r12, r16
    3afa:	79 01       	movw	r14, r18
    3afc:	c2 01       	movw	r24, r4
    3afe:	48 dd       	rcall	.-1392   	; 0x3590 <prvInsertTimerInActiveList>
    3b00:	03 c0       	rjmp	.+6      	; 0x3b08 <prvTimerTask+0x1fe>
    3b02:	c2 01       	movw	r24, r4
    3b04:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vPortFree>
    3b08:	28 2d       	mov	r18, r8
    3b0a:	39 2d       	mov	r19, r9
    3b0c:	4a 2d       	mov	r20, r10
    3b0e:	5b 2d       	mov	r21, r11
    3b10:	66 2d       	mov	r22, r6
    3b12:	77 2d       	mov	r23, r7
    3b14:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <xTimerQueue>
    3b18:	90 91 f9 06 	lds	r25, 0x06F9	; 0x8006f9 <xTimerQueue+0x1>
    3b1c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <xQueueReceive>
    3b20:	81 11       	cpse	r24, r1
    3b22:	80 cf       	rjmp	.-256    	; 0x3a24 <prvTimerTask+0x11a>
    3b24:	06 cf       	rjmp	.-500    	; 0x3932 <prvTimerTask+0x28>
    3b26:	f7 d8       	rcall	.-3602   	; 0x2d16 <vTaskSuspendAll>
    3b28:	ce 01       	movw	r24, r28
    3b2a:	01 96       	adiw	r24, 0x01	; 1
    3b2c:	58 de       	rcall	.-848    	; 0x37de <prvSampleTimeNow>
    3b2e:	6b 87       	std	Y+11, r22	; 0x0b
    3b30:	7c 87       	std	Y+12, r23	; 0x0c
    3b32:	8d 87       	std	Y+13, r24	; 0x0d
    3b34:	9e 87       	std	Y+14, r25	; 0x0e
    3b36:	89 81       	ldd	r24, Y+1	; 0x01
    3b38:	81 11       	cpse	r24, r1
    3b3a:	72 cf       	rjmp	.-284    	; 0x3a20 <prvTimerTask+0x116>
    3b3c:	e0 91 fa 06 	lds	r30, 0x06FA	; 0x8006fa <pxOverflowTimerList>
    3b40:	f0 91 fb 06 	lds	r31, 0x06FB	; 0x8006fb <pxOverflowTimerList+0x1>
    3b44:	80 81       	ld	r24, Z
    3b46:	21 e0       	ldi	r18, 0x01	; 1
    3b48:	81 11       	cpse	r24, r1
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	28 2c       	mov	r2, r8
    3b4e:	39 2c       	mov	r3, r9
    3b50:	4a 2c       	mov	r4, r10
    3b52:	5b 2c       	mov	r5, r11
    3b54:	4f cf       	rjmp	.-354    	; 0x39f4 <prvTimerTask+0xea>

00003b56 <xTimerIsTimerActive>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
    3b56:	fc 01       	movw	r30, r24
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
    3b58:	0f b6       	in	r0, 0x3f	; 63
    3b5a:	f8 94       	cli
    3b5c:	0f 92       	push	r0
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	24 85       	ldd	r18, Z+12	; 0x0c
    3b62:	35 85       	ldd	r19, Z+13	; 0x0d
    3b64:	23 2b       	or	r18, r19
    3b66:	09 f4       	brne	.+2      	; 0x3b6a <xTimerIsTimerActive+0x14>
    3b68:	80 e0       	ldi	r24, 0x00	; 0
	}
	taskEXIT_CRITICAL();
    3b6a:	0f 90       	pop	r0
    3b6c:	0f be       	out	0x3f, r0	; 63

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
    3b6e:	08 95       	ret

00003b70 <pvTimerGetTimerID>:
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
    3b70:	0f b6       	in	r0, 0x3f	; 63
    3b72:	f8 94       	cli
    3b74:	0f 92       	push	r0
	{
		pvReturn = pxTimer->pvTimerID;
    3b76:	fc 01       	movw	r30, r24
    3b78:	83 89       	ldd	r24, Z+19	; 0x13
    3b7a:	94 89       	ldd	r25, Z+20	; 0x14
	}
	taskEXIT_CRITICAL();
    3b7c:	0f 90       	pop	r0
    3b7e:	0f be       	out	0x3f, r0	; 63

	return pvReturn;
}
    3b80:	08 95       	ret

00003b82 <Defrost>:
{
	
while(1){
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
    3b82:	cc e0       	ldi	r28, 0x0C	; 12
    3b84:	d9 e0       	ldi	r29, 0x09	; 9
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Temp_Out<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3b86:	0c e6       	ldi	r16, 0x6C	; 108
    3b88:	19 e0       	ldi	r17, 0x09	; 9
				if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
				else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3b8a:	0f 2e       	mov	r0, r31
    3b8c:	fe e3       	ldi	r31, 0x3E	; 62
    3b8e:	cf 2e       	mov	r12, r31
    3b90:	f2 e0       	ldi	r31, 0x02	; 2
    3b92:	df 2e       	mov	r13, r31
    3b94:	f0 2d       	mov	r31, r0
    3b96:	0f 2e       	mov	r0, r31
    3b98:	fa ea       	ldi	r31, 0xAA	; 170
    3b9a:	ef 2e       	mov	r14, r31
    3b9c:	f7 e0       	ldi	r31, 0x07	; 7
    3b9e:	ff 2e       	mov	r15, r31
    3ba0:	f0 2d       	mov	r31, r0
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Temp_Out<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3ba2:	0f 2e       	mov	r0, r31
    3ba4:	fa eb       	ldi	r31, 0xBA	; 186
    3ba6:	8f 2e       	mov	r8, r31
    3ba8:	f9 e0       	ldi	r31, 0x09	; 9
    3baa:	9f 2e       	mov	r9, r31
    3bac:	f0 2d       	mov	r31, r0
    3bae:	33 24       	eor	r3, r3
    3bb0:	33 94       	inc	r3
while(1){
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
    3bb2:	0f 2e       	mov	r0, r31
    3bb4:	f3 e2       	ldi	r31, 0x23	; 35
    3bb6:	af 2e       	mov	r10, r31
    3bb8:	f2 e0       	ldi	r31, 0x02	; 2
    3bba:	bf 2e       	mov	r11, r31
    3bbc:	f0 2d       	mov	r31, r0
//////////////////////////////////////////////////
static void Defrost(void *pvParameters)
{
	
while(1){
			wdt_reset();
    3bbe:	a8 95       	wdr
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
    3bc0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bc2:	81 30       	cpi	r24, 0x01	; 1
    3bc4:	09 f0       	breq	.+2      	; 0x3bc8 <Defrost+0x46>
    3bc6:	d1 c0       	rjmp	.+418    	; 0x3d6a <Defrost+0x1e8>
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
    3bc8:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <forsDefrost>
    3bcc:	81 30       	cpi	r24, 0x01	; 1
    3bce:	91 f4       	brne	.+36     	; 0x3bf4 <Defrost+0x72>
    3bd0:	be 01       	movw	r22, r28
    3bd2:	c8 01       	movw	r24, r16
    3bd4:	0e 94 db 33 	call	0x67b6	; 0x67b6 <startDefrost>
    3bd8:	f8 01       	movw	r30, r16
    3bda:	31 86       	std	Z+9, r3	; 0x09
    3bdc:	10 92 15 07 	sts	0x0715, r1	; 0x800715 <forsDefrost>
    3be0:	bf 92       	push	r11
    3be2:	af 92       	push	r10
    3be4:	ff 92       	push	r15
    3be6:	ef 92       	push	r14
    3be8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3bec:	0f 90       	pop	r0
    3bee:	0f 90       	pop	r0
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Temp_Out<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3bf4:	f8 01       	movw	r30, r16
    3bf6:	81 85       	ldd	r24, Z+9	; 0x09
    3bf8:	81 11       	cpse	r24, r1
    3bfa:	4a c0       	rjmp	.+148    	; 0x3c90 <Defrost+0x10e>
    3bfc:	92 d8       	rcall	.-3804   	; 0x2d22 <xTaskGetTickCount>
    3bfe:	40 90 ed 08 	lds	r4, 0x08ED	; 0x8008ed <timeTillDef>
    3c02:	50 90 ee 08 	lds	r5, 0x08EE	; 0x8008ee <timeTillDef+0x1>
    3c06:	60 90 ef 08 	lds	r6, 0x08EF	; 0x8008ef <timeTillDef+0x2>
    3c0a:	70 90 f0 08 	lds	r7, 0x08F0	; 0x8008f0 <timeTillDef+0x3>
    3c0e:	9b 01       	movw	r18, r22
    3c10:	ac 01       	movw	r20, r24
    3c12:	24 19       	sub	r18, r4
    3c14:	35 09       	sbc	r19, r5
    3c16:	46 09       	sbc	r20, r6
    3c18:	57 09       	sbc	r21, r7
    3c1a:	29 01       	movw	r4, r18
    3c1c:	3a 01       	movw	r6, r20
    3c1e:	2a a1       	ldd	r18, Y+34	; 0x22
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	a0 e6       	ldi	r26, 0x60	; 96
    3c24:	ba ee       	ldi	r27, 0xEA	; 234
    3c26:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    3c2a:	64 15       	cp	r22, r4
    3c2c:	75 05       	cpc	r23, r5
    3c2e:	86 05       	cpc	r24, r6
    3c30:	97 05       	cpc	r25, r7
    3c32:	48 f5       	brcc	.+82     	; 0x3c86 <Defrost+0x104>
    3c34:	6a a5       	ldd	r22, Y+42	; 0x2a
    3c36:	7b a5       	ldd	r23, Y+43	; 0x2b
    3c38:	07 2e       	mov	r0, r23
    3c3a:	00 0c       	add	r0, r0
    3c3c:	88 0b       	sbc	r24, r24
    3c3e:	99 0b       	sbc	r25, r25
    3c40:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    3c44:	9b 01       	movw	r18, r22
    3c46:	ac 01       	movw	r20, r24
    3c48:	f4 01       	movw	r30, r8
    3c4a:	60 81       	ld	r22, Z
    3c4c:	71 81       	ldd	r23, Z+1	; 0x01
    3c4e:	82 81       	ldd	r24, Z+2	; 0x02
    3c50:	93 81       	ldd	r25, Z+3	; 0x03
    3c52:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    3c56:	88 23       	and	r24, r24
    3c58:	b4 f4       	brge	.+44     	; 0x3c86 <Defrost+0x104>
    3c5a:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <forsDefrost>
    3c5e:	81 11       	cpse	r24, r1
    3c60:	12 c0       	rjmp	.+36     	; 0x3c86 <Defrost+0x104>
    3c62:	be 01       	movw	r22, r28
    3c64:	c8 01       	movw	r24, r16
    3c66:	0e 94 db 33 	call	0x67b6	; 0x67b6 <startDefrost>
    3c6a:	f8 01       	movw	r30, r16
    3c6c:	31 86       	std	Z+9, r3	; 0x09
    3c6e:	23 e3       	ldi	r18, 0x33	; 51
    3c70:	32 e0       	ldi	r19, 0x02	; 2
    3c72:	3f 93       	push	r19
    3c74:	2f 93       	push	r18
    3c76:	ff 92       	push	r15
    3c78:	ef 92       	push	r14
    3c7a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3c7e:	0f 90       	pop	r0
    3c80:	0f 90       	pop	r0
    3c82:	0f 90       	pop	r0
    3c84:	0f 90       	pop	r0
				if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3c86:	f8 01       	movw	r30, r16
    3c88:	81 85       	ldd	r24, Z+9	; 0x09
    3c8a:	88 23       	and	r24, r24
    3c8c:	09 f4       	brne	.+2      	; 0x3c90 <Defrost+0x10e>
    3c8e:	6d c0       	rjmp	.+218    	; 0x3d6a <Defrost+0x1e8>
    3c90:	48 d8       	rcall	.-3952   	; 0x2d22 <xTaskGetTickCount>
    3c92:	40 90 ed 08 	lds	r4, 0x08ED	; 0x8008ed <timeTillDef>
    3c96:	50 90 ee 08 	lds	r5, 0x08EE	; 0x8008ee <timeTillDef+0x1>
    3c9a:	60 90 ef 08 	lds	r6, 0x08EF	; 0x8008ef <timeTillDef+0x2>
    3c9e:	70 90 f0 08 	lds	r7, 0x08F0	; 0x8008f0 <timeTillDef+0x3>
    3ca2:	9b 01       	movw	r18, r22
    3ca4:	ac 01       	movw	r20, r24
    3ca6:	24 19       	sub	r18, r4
    3ca8:	35 09       	sbc	r19, r5
    3caa:	46 09       	sbc	r20, r6
    3cac:	57 09       	sbc	r21, r7
    3cae:	29 01       	movw	r4, r18
    3cb0:	3a 01       	movw	r6, r20
    3cb2:	29 a1       	ldd	r18, Y+33	; 0x21
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	a0 e6       	ldi	r26, 0x60	; 96
    3cb8:	ba ee       	ldi	r27, 0xEA	; 234
    3cba:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    3cbe:	64 15       	cp	r22, r4
    3cc0:	75 05       	cpc	r23, r5
    3cc2:	86 05       	cpc	r24, r6
    3cc4:	97 05       	cpc	r25, r7
    3cc6:	f8 f4       	brcc	.+62     	; 0x3d06 <Defrost+0x184>
    3cc8:	f8 01       	movw	r30, r16
    3cca:	82 85       	ldd	r24, Z+10	; 0x0a
    3ccc:	88 23       	and	r24, r24
    3cce:	d9 f0       	breq	.+54     	; 0x3d06 <Defrost+0x184>
    3cd0:	be 01       	movw	r22, r28
    3cd2:	c8 01       	movw	r24, r16
    3cd4:	0e 94 f6 33 	call	0x67ec	; 0x67ec <stopDefrost>
    3cd8:	f8 01       	movw	r30, r16
    3cda:	11 86       	std	Z+9, r1	; 0x09
    3cdc:	12 86       	std	Z+10, r1	; 0x0a
    3cde:	21 d8       	rcall	.-4030   	; 0x2d22 <xTaskGetTickCount>
    3ce0:	60 93 ed 08 	sts	0x08ED, r22	; 0x8008ed <timeTillDef>
    3ce4:	70 93 ee 08 	sts	0x08EE, r23	; 0x8008ee <timeTillDef+0x1>
    3ce8:	80 93 ef 08 	sts	0x08EF, r24	; 0x8008ef <timeTillDef+0x2>
    3cec:	90 93 f0 08 	sts	0x08F0, r25	; 0x8008f0 <timeTillDef+0x3>
    3cf0:	df 92       	push	r13
    3cf2:	cf 92       	push	r12
    3cf4:	ff 92       	push	r15
    3cf6:	ef 92       	push	r14
    3cf8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3cfc:	0f 90       	pop	r0
    3cfe:	0f 90       	pop	r0
    3d00:	0f 90       	pop	r0
    3d02:	0f 90       	pop	r0
    3d04:	32 c0       	rjmp	.+100    	; 0x3d6a <Defrost+0x1e8>
				else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3d06:	f8 01       	movw	r30, r16
    3d08:	81 85       	ldd	r24, Z+9	; 0x09
    3d0a:	88 23       	and	r24, r24
    3d0c:	71 f1       	breq	.+92     	; 0x3d6a <Defrost+0x1e8>
    3d0e:	6c a5       	ldd	r22, Y+44	; 0x2c
    3d10:	7d a5       	ldd	r23, Y+45	; 0x2d
    3d12:	07 2e       	mov	r0, r23
    3d14:	00 0c       	add	r0, r0
    3d16:	88 0b       	sbc	r24, r24
    3d18:	99 0b       	sbc	r25, r25
    3d1a:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    3d1e:	9b 01       	movw	r18, r22
    3d20:	ac 01       	movw	r20, r24
    3d22:	f8 01       	movw	r30, r16
    3d24:	62 a9       	ldd	r22, Z+50	; 0x32
    3d26:	73 a9       	ldd	r23, Z+51	; 0x33
    3d28:	84 a9       	ldd	r24, Z+52	; 0x34
    3d2a:	95 a9       	ldd	r25, Z+53	; 0x35
    3d2c:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    3d30:	18 16       	cp	r1, r24
    3d32:	dc f4       	brge	.+54     	; 0x3d6a <Defrost+0x1e8>
    3d34:	be 01       	movw	r22, r28
    3d36:	c8 01       	movw	r24, r16
    3d38:	0e 94 f6 33 	call	0x67ec	; 0x67ec <stopDefrost>
    3d3c:	f8 01       	movw	r30, r16
    3d3e:	11 86       	std	Z+9, r1	; 0x09
    3d40:	12 86       	std	Z+10, r1	; 0x0a
    3d42:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3d46:	60 93 ed 08 	sts	0x08ED, r22	; 0x8008ed <timeTillDef>
    3d4a:	70 93 ee 08 	sts	0x08EE, r23	; 0x8008ee <timeTillDef+0x1>
    3d4e:	80 93 ef 08 	sts	0x08EF, r24	; 0x8008ef <timeTillDef+0x2>
    3d52:	90 93 f0 08 	sts	0x08F0, r25	; 0x8008f0 <timeTillDef+0x3>
    3d56:	df 92       	push	r13
    3d58:	cf 92       	push	r12
    3d5a:	ff 92       	push	r15
    3d5c:	ef 92       	push	r14
    3d5e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3d62:	0f 90       	pop	r0
    3d64:	0f 90       	pop	r0
    3d66:	0f 90       	pop	r0
    3d68:	0f 90       	pop	r0
	
			}
			//xSerialxPrintf(&xSerial3Port,"defrost\r\n");
vTaskDelay(2000);
    3d6a:	60 ed       	ldi	r22, 0xD0	; 208
    3d6c:	77 e0       	ldi	r23, 0x07	; 7
    3d6e:	80 e0       	ldi	r24, 0x00	; 0
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	36 d9       	rcall	.-3476   	; 0x2fe0 <vTaskDelay>
//xSerialxPrintf(&xSerial3Port,"Stack_0 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
//portYIELD();			
}
    3d74:	24 cf       	rjmp	.-440    	; 0x3bbe <Defrost+0x3c>

00003d76 <System_2>:
ReadSensors(&Comp_2);
portEXIT_CRITICAL();
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3d76:	cc e0       	ldi	r28, 0x0C	; 12
    3d78:	d9 e0       	ldi	r29, 0x09	; 9
		{
			_err2=Check_Erors(&Comp_2,&EEpromData);
		
			//if(_err2>0 && Comp_1.error==0){Comp_2.error=_err2;Comp_2.countError++;Comp_2.Steps=0;Comp_Stop(&Comp_2);}//if(Comp_2.countError==3)EEpromData.power=0;
			mod_pump(&Comp_2,&EEpromData);
	       if(Comp_2.checkTrv && xTaskGetTickCount()-countTrvTime_2>10000 ){Comp_2.Steps = Fuzzy(&Comp_2,EEpromData.trv_corection_2);countTrvTime_2=xTaskGetTickCount();}
    3d7a:	0f 2e       	mov	r0, r31
    3d7c:	f4 e5       	ldi	r31, 0x54	; 84
    3d7e:	8f 2e       	mov	r8, r31
    3d80:	f9 e0       	ldi	r31, 0x09	; 9
    3d82:	9f 2e       	mov	r9, r31
    3d84:	f0 2d       	mov	r31, r0
    3d86:	0f 2e       	mov	r0, r31
    3d88:	f2 e6       	ldi	r31, 0x62	; 98
    3d8a:	6f 2e       	mov	r6, r31
    3d8c:	fa e0       	ldi	r31, 0x0A	; 10
    3d8e:	7f 2e       	mov	r7, r31
    3d90:	f0 2d       	mov	r31, r0
portEXIT_CRITICAL();
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
		else if(EEpromData.power==0 && Comp_2.suply){Comp_2.suply=false;Comp_2.error=0;_err2=0;Comp_2.countError=0; xSerialxPrintf(&xSerial3Port,"OFF_System_2\r\n");stopTrvTimer(&Comp_2);Comp_Stop(&Comp_2);}
    3d92:	0f 2e       	mov	r0, r31
    3d94:	f6 e6       	ldi	r31, 0x66	; 102
    3d96:	cf 2e       	mov	r12, r31
    3d98:	fa e0       	ldi	r31, 0x0A	; 10
    3d9a:	df 2e       	mov	r13, r31
    3d9c:	f0 2d       	mov	r31, r0
    3d9e:	0f 2e       	mov	r0, r31
    3da0:	f6 e5       	ldi	r31, 0x56	; 86
    3da2:	ef 2e       	mov	r14, r31
    3da4:	f2 e0       	ldi	r31, 0x02	; 2
    3da6:	ff 2e       	mov	r15, r31
    3da8:	f0 2d       	mov	r31, r0
    3daa:	0a ea       	ldi	r16, 0xAA	; 170
    3dac:	17 e0       	ldi	r17, 0x07	; 7
ReadSensors(&Comp_2);
portEXIT_CRITICAL();
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3dae:	55 24       	eor	r5, r5
    3db0:	53 94       	inc	r5
    3db2:	0f 2e       	mov	r0, r31
    3db4:	f8 e4       	ldi	r31, 0x48	; 72
    3db6:	af 2e       	mov	r10, r31
    3db8:	f2 e0       	ldi	r31, 0x02	; 2
    3dba:	bf 2e       	mov	r11, r31
    3dbc:	f0 2d       	mov	r31, r0
	(void) pvParameters;

	while (1)
	{
		
    	wdt_reset();
    3dbe:	a8 95       	wdr
		//xSerialxPrintf(&xSerial3Port,"System_2_task\r\n");
vTaskSuspend( xHandleFirst );				
    3dc0:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <xHandleFirst>
    3dc4:	90 91 24 07 	lds	r25, 0x0724	; 0x800724 <xHandleFirst+0x1>
    3dc8:	96 d9       	rcall	.-3284   	; 0x30f6 <vTaskSuspend>
portENTER_CRITICAL();
    3dca:	0f b6       	in	r0, 0x3f	; 63
    3dcc:	f8 94       	cli
    3dce:	0f 92       	push	r0
ReadSensors(&Comp_2);
    3dd0:	86 ef       	ldi	r24, 0xF6	; 246
    3dd2:	99 e0       	ldi	r25, 0x09	; 9
    3dd4:	0e 94 14 4c 	call	0x9828	; 0x9828 <ReadSensors>
portEXIT_CRITICAL();
    3dd8:	0f 90       	pop	r0
    3dda:	0f be       	out	0x3f, r0	; 63
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
    3ddc:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <xHandleFirst>
    3de0:	90 91 24 07 	lds	r25, 0x0724	; 0x800724 <xHandleFirst+0x1>
    3de4:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <vTaskResume>
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3de8:	8c a1       	ldd	r24, Y+36	; 0x24
    3dea:	81 30       	cpi	r24, 0x01	; 1
    3dec:	a9 f4       	brne	.+42     	; 0x3e18 <System_2+0xa2>
    3dee:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <Comp_2+0x6>
    3df2:	81 11       	cpse	r24, r1
    3df4:	3a c0       	rjmp	.+116    	; 0x3e6a <System_2+0xf4>
    3df6:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <Comp_2>
    3dfa:	81 11       	cpse	r24, r1
    3dfc:	74 c0       	rjmp	.+232    	; 0x3ee6 <System_2+0x170>
    3dfe:	50 92 fc 09 	sts	0x09FC, r5	; 0x8009fc <Comp_2+0x6>
    3e02:	bf 92       	push	r11
    3e04:	af 92       	push	r10
    3e06:	1f 93       	push	r17
    3e08:	0f 93       	push	r16
    3e0a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3e0e:	0f 90       	pop	r0
    3e10:	0f 90       	pop	r0
    3e12:	0f 90       	pop	r0
    3e14:	0f 90       	pop	r0
    3e16:	24 c0       	rjmp	.+72     	; 0x3e60 <System_2+0xea>
		else if(EEpromData.power==0 && Comp_2.suply){Comp_2.suply=false;Comp_2.error=0;_err2=0;Comp_2.countError=0; xSerialxPrintf(&xSerial3Port,"OFF_System_2\r\n");stopTrvTimer(&Comp_2);Comp_Stop(&Comp_2);}
    3e18:	81 11       	cpse	r24, r1
    3e1a:	22 c0       	rjmp	.+68     	; 0x3e60 <System_2+0xea>
    3e1c:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <Comp_2+0x6>
    3e20:	88 23       	and	r24, r24
    3e22:	09 f4       	brne	.+2      	; 0x3e26 <System_2+0xb0>
    3e24:	60 c0       	rjmp	.+192    	; 0x3ee6 <System_2+0x170>
    3e26:	e6 ef       	ldi	r30, 0xF6	; 246
    3e28:	f9 e0       	ldi	r31, 0x09	; 9
    3e2a:	16 82       	std	Z+6, r1	; 0x06
    3e2c:	d6 01       	movw	r26, r12
    3e2e:	1d 92       	st	X+, r1
    3e30:	1c 92       	st	X, r1
    3e32:	10 92 b2 0a 	sts	0x0AB2, r1	; 0x800ab2 <_err2+0x1>
    3e36:	10 92 b1 0a 	sts	0x0AB1, r1	; 0x800ab1 <_err2>
    3e3a:	11 8a       	std	Z+17, r1	; 0x11
    3e3c:	ff 92       	push	r15
    3e3e:	ef 92       	push	r14
    3e40:	1f 93       	push	r17
    3e42:	0f 93       	push	r16
    3e44:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3e48:	86 ef       	ldi	r24, 0xF6	; 246
    3e4a:	99 e0       	ldi	r25, 0x09	; 9
    3e4c:	0e 94 c5 50 	call	0xa18a	; 0xa18a <stopTrvTimer>
    3e50:	86 ef       	ldi	r24, 0xF6	; 246
    3e52:	99 e0       	ldi	r25, 0x09	; 9
    3e54:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <Comp_Stop>
    3e58:	0f 90       	pop	r0
    3e5a:	0f 90       	pop	r0
    3e5c:	0f 90       	pop	r0
    3e5e:	0f 90       	pop	r0
	
		if(Comp_2.suply && Comp_2.countError<3)
    3e60:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <Comp_2+0x6>
    3e64:	88 23       	and	r24, r24
    3e66:	09 f4       	brne	.+2      	; 0x3e6a <System_2+0xf4>
    3e68:	3e c0       	rjmp	.+124    	; 0x3ee6 <System_2+0x170>
    3e6a:	80 91 07 0a 	lds	r24, 0x0A07	; 0x800a07 <Comp_2+0x11>
    3e6e:	83 30       	cpi	r24, 0x03	; 3
    3e70:	d0 f5       	brcc	.+116    	; 0x3ee6 <System_2+0x170>
		{
			_err2=Check_Erors(&Comp_2,&EEpromData);
    3e72:	be 01       	movw	r22, r28
    3e74:	86 ef       	ldi	r24, 0xF6	; 246
    3e76:	99 e0       	ldi	r25, 0x09	; 9
    3e78:	ff d2       	rcall	.+1534   	; 0x4478 <Check_Erors>
    3e7a:	90 93 b2 0a 	sts	0x0AB2, r25	; 0x800ab2 <_err2+0x1>
    3e7e:	80 93 b1 0a 	sts	0x0AB1, r24	; 0x800ab1 <_err2>
		
			//if(_err2>0 && Comp_1.error==0){Comp_2.error=_err2;Comp_2.countError++;Comp_2.Steps=0;Comp_Stop(&Comp_2);}//if(Comp_2.countError==3)EEpromData.power=0;
			mod_pump(&Comp_2,&EEpromData);
    3e82:	be 01       	movw	r22, r28
    3e84:	86 ef       	ldi	r24, 0xF6	; 246
    3e86:	99 e0       	ldi	r25, 0x09	; 9
    3e88:	0e 94 6e 38 	call	0x70dc	; 0x70dc <mod_pump>
	       if(Comp_2.checkTrv && xTaskGetTickCount()-countTrvTime_2>10000 ){Comp_2.Steps = Fuzzy(&Comp_2,EEpromData.trv_corection_2);countTrvTime_2=xTaskGetTickCount();}
    3e8c:	80 91 f7 09 	lds	r24, 0x09F7	; 0x8009f7 <Comp_2+0x1>
    3e90:	88 23       	and	r24, r24
    3e92:	49 f1       	breq	.+82     	; 0x3ee6 <System_2+0x170>
    3e94:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3e98:	20 91 19 07 	lds	r18, 0x0719	; 0x800719 <countTrvTime_2>
    3e9c:	30 91 1a 07 	lds	r19, 0x071A	; 0x80071a <countTrvTime_2+0x1>
    3ea0:	40 91 1b 07 	lds	r20, 0x071B	; 0x80071b <countTrvTime_2+0x2>
    3ea4:	50 91 1c 07 	lds	r21, 0x071C	; 0x80071c <countTrvTime_2+0x3>
    3ea8:	dc 01       	movw	r26, r24
    3eaa:	cb 01       	movw	r24, r22
    3eac:	82 1b       	sub	r24, r18
    3eae:	93 0b       	sbc	r25, r19
    3eb0:	a4 0b       	sbc	r26, r20
    3eb2:	b5 0b       	sbc	r27, r21
    3eb4:	81 31       	cpi	r24, 0x11	; 17
    3eb6:	97 42       	sbci	r25, 0x27	; 39
    3eb8:	a1 05       	cpc	r26, r1
    3eba:	b1 05       	cpc	r27, r1
    3ebc:	a0 f0       	brcs	.+40     	; 0x3ee6 <System_2+0x170>
    3ebe:	d4 01       	movw	r26, r8
    3ec0:	6d 91       	ld	r22, X+
    3ec2:	7c 91       	ld	r23, X
    3ec4:	86 ef       	ldi	r24, 0xF6	; 246
    3ec6:	99 e0       	ldi	r25, 0x09	; 9
    3ec8:	0e 94 14 51 	call	0xa228	; 0xa228 <Fuzzy>
    3ecc:	f3 01       	movw	r30, r6
    3ece:	91 83       	std	Z+1, r25	; 0x01
    3ed0:	80 83       	st	Z, r24
    3ed2:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3ed6:	60 93 19 07 	sts	0x0719, r22	; 0x800719 <countTrvTime_2>
    3eda:	70 93 1a 07 	sts	0x071A, r23	; 0x80071a <countTrvTime_2+0x1>
    3ede:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <countTrvTime_2+0x2>
    3ee2:	90 93 1c 07 	sts	0x071C, r25	; 0x80071c <countTrvTime_2+0x3>
		}

		vTaskDelay(1000);
    3ee6:	68 ee       	ldi	r22, 0xE8	; 232
    3ee8:	73 e0       	ldi	r23, 0x03	; 3
    3eea:	80 e0       	ldi	r24, 0x00	; 0
    3eec:	90 e0       	ldi	r25, 0x00	; 0
    3eee:	78 d8       	rcall	.-3856   	; 0x2fe0 <vTaskDelay>
		//xSerialxPrintf(&xSerial3Port,"Stack_2 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
		//portYIELD();
		//xSerialxPrintf(&xSerial3Port,"Stack2 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
	}
    3ef0:	66 cf       	rjmp	.-308    	; 0x3dbe <System_2+0x48>

00003ef2 <System_1>:
portENTER_CRITICAL();
ReadSensors(&Comp_1);
portEXIT_CRITICAL();
//EEpromData.AireToWater==1 &&

		if(EEpromData.NombComp==2 )
    3ef2:	cc e0       	ldi	r28, 0x0C	; 12
    3ef4:	d9 e0       	ldi	r29, 0x09	; 9
			vTaskResume( xHandleSecond );
			stop_second=false;
			
		}
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
    3ef6:	77 24       	eor	r7, r7
    3ef8:	73 94       	inc	r7
				
			//if(_err1>0 && Comp_1.error==0){Comp_1.error=_err1;Comp_1.countError++;Comp_1.Steps=0;Comp_Stop(&Comp_1);xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);}//
				
			 mod_pump(&Comp_1,&EEpromData);
			//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);
			if(Comp_1.checkTrv && xTaskGetTickCount()-countTrvTime_1>10000 ){Comp_1.Steps = Fuzzy(&Comp_1,EEpromData.trv_corection_1);countTrvTime_1=xTaskGetTickCount();}
    3efa:	0f 2e       	mov	r0, r31
    3efc:	f8 ed       	ldi	r31, 0xD8	; 216
    3efe:	8f 2e       	mov	r8, r31
    3f00:	f9 e0       	ldi	r31, 0x09	; 9
    3f02:	9f 2e       	mov	r9, r31
    3f04:	f0 2d       	mov	r31, r0
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
//xSerialxPrintf(&xSerial3Port,"temp_out =%f\r\n",Comp_1.Temp_Out);
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
		else if(EEpromData.power==0 && Comp_1.suply){Comp_1.suply=false;PORTA &= 0x0;Comp_1.error=0;_err1=0;Comp_1.countError=0;xSerialxPrintf(&xSerial3Port,"OFF_System_1\r\n"); stopTrvTimer(&Comp_1);Comp_Stop(&Comp_1);}
    3f06:	0f 2e       	mov	r0, r31
    3f08:	fc ed       	ldi	r31, 0xDC	; 220
    3f0a:	cf 2e       	mov	r12, r31
    3f0c:	f9 e0       	ldi	r31, 0x09	; 9
    3f0e:	df 2e       	mov	r13, r31
    3f10:	f0 2d       	mov	r31, r0
    3f12:	0f 2e       	mov	r0, r31
    3f14:	f3 e7       	ldi	r31, 0x73	; 115
    3f16:	ef 2e       	mov	r14, r31
    3f18:	f2 e0       	ldi	r31, 0x02	; 2
    3f1a:	ff 2e       	mov	r15, r31
    3f1c:	f0 2d       	mov	r31, r0
    3f1e:	0a ea       	ldi	r16, 0xAA	; 170
    3f20:	17 e0       	ldi	r17, 0x07	; 7
		}
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
//xSerialxPrintf(&xSerial3Port,"temp_out =%f\r\n",Comp_1.Temp_Out);
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
    3f22:	0f 2e       	mov	r0, r31
    3f24:	f5 e6       	ldi	r31, 0x65	; 101
    3f26:	af 2e       	mov	r10, r31
    3f28:	f2 e0       	ldi	r31, 0x02	; 2
    3f2a:	bf 2e       	mov	r11, r31
    3f2c:	f0 2d       	mov	r31, r0
	
	
	while (1)
	{

		wdt_reset();
    3f2e:	a8 95       	wdr
		//xSerialxPrintf(&xSerial3Port,"System_1_task\r\n");
vTaskSuspend( xHandleSecond );		
    3f30:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <xHandleSecond>
    3f34:	90 91 22 07 	lds	r25, 0x0722	; 0x800722 <xHandleSecond+0x1>
    3f38:	de d8       	rcall	.-3652   	; 0x30f6 <vTaskSuspend>
portENTER_CRITICAL();
    3f3a:	0f b6       	in	r0, 0x3f	; 63
    3f3c:	f8 94       	cli
    3f3e:	0f 92       	push	r0
ReadSensors(&Comp_1);
    3f40:	8c e6       	ldi	r24, 0x6C	; 108
    3f42:	99 e0       	ldi	r25, 0x09	; 9
    3f44:	0e 94 14 4c 	call	0x9828	; 0x9828 <ReadSensors>
portEXIT_CRITICAL();
    3f48:	0f 90       	pop	r0
    3f4a:	0f be       	out	0x3f, r0	; 63
//EEpromData.AireToWater==1 &&

		if(EEpromData.NombComp==2 )
    3f4c:	88 a1       	ldd	r24, Y+32	; 0x20
    3f4e:	82 30       	cpi	r24, 0x02	; 2
    3f50:	61 f4       	brne	.+24     	; 0x3f6a <System_1+0x78>
		{
			vTaskResume( xHandleSecond );
    3f52:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <xHandleSecond>
    3f56:	90 91 22 07 	lds	r25, 0x0722	; 0x800722 <xHandleSecond+0x1>
    3f5a:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <vTaskResume>
			stop_second=false;
    3f5e:	10 92 c2 0a 	sts	0x0AC2, r1	; 0x800ac2 <stop_second>
			
		}
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
    3f62:	88 a1       	ldd	r24, Y+32	; 0x20
    3f64:	81 30       	cpi	r24, 0x01	; 1
    3f66:	69 f4       	brne	.+26     	; 0x3f82 <System_1+0x90>
    3f68:	06 c0       	rjmp	.+12     	; 0x3f76 <System_1+0x84>
    3f6a:	81 30       	cpi	r24, 0x01	; 1
    3f6c:	51 f4       	brne	.+20     	; 0x3f82 <System_1+0x90>
    3f6e:	80 91 c2 0a 	lds	r24, 0x0AC2	; 0x800ac2 <stop_second>
    3f72:	81 11       	cpse	r24, r1
    3f74:	06 c0       	rjmp	.+12     	; 0x3f82 <System_1+0x90>
    3f76:	70 92 c2 0a 	sts	0x0AC2, r7	; 0x800ac2 <stop_second>
    3f7a:	86 ef       	ldi	r24, 0xF6	; 246
    3f7c:	99 e0       	ldi	r25, 0x09	; 9
    3f7e:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <Comp_Stop>
//xSerialxPrintf(&xSerial3Port,"temp_out =%f\r\n",Comp_1.Temp_Out);
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
    3f82:	8c a1       	ldd	r24, Y+36	; 0x24
    3f84:	81 30       	cpi	r24, 0x01	; 1
    3f86:	f9 f4       	brne	.+62     	; 0x3fc6 <System_1+0xd4>
    3f88:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <Comp_1+0x6>
    3f8c:	81 11       	cpse	r24, r1
    3f8e:	46 c0       	rjmp	.+140    	; 0x401c <System_1+0x12a>
    3f90:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <Comp_1>
    3f94:	81 11       	cpse	r24, r1
    3f96:	88 c0       	rjmp	.+272    	; 0x40a8 <System_1+0x1b6>
    3f98:	70 92 72 09 	sts	0x0972, r7	; 0x800972 <Comp_1+0x6>
    3f9c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3fa0:	60 93 ed 08 	sts	0x08ED, r22	; 0x8008ed <timeTillDef>
    3fa4:	70 93 ee 08 	sts	0x08EE, r23	; 0x8008ee <timeTillDef+0x1>
    3fa8:	80 93 ef 08 	sts	0x08EF, r24	; 0x8008ef <timeTillDef+0x2>
    3fac:	90 93 f0 08 	sts	0x08F0, r25	; 0x8008f0 <timeTillDef+0x3>
    3fb0:	bf 92       	push	r11
    3fb2:	af 92       	push	r10
    3fb4:	1f 93       	push	r17
    3fb6:	0f 93       	push	r16
    3fb8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3fbc:	0f 90       	pop	r0
    3fbe:	0f 90       	pop	r0
    3fc0:	0f 90       	pop	r0
    3fc2:	0f 90       	pop	r0
    3fc4:	26 c0       	rjmp	.+76     	; 0x4012 <System_1+0x120>
		else if(EEpromData.power==0 && Comp_1.suply){Comp_1.suply=false;PORTA &= 0x0;Comp_1.error=0;_err1=0;Comp_1.countError=0;xSerialxPrintf(&xSerial3Port,"OFF_System_1\r\n"); stopTrvTimer(&Comp_1);Comp_Stop(&Comp_1);}
    3fc6:	81 11       	cpse	r24, r1
    3fc8:	24 c0       	rjmp	.+72     	; 0x4012 <System_1+0x120>
    3fca:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <Comp_1+0x6>
    3fce:	88 23       	and	r24, r24
    3fd0:	09 f4       	brne	.+2      	; 0x3fd4 <System_1+0xe2>
    3fd2:	6a c0       	rjmp	.+212    	; 0x40a8 <System_1+0x1b6>
    3fd4:	ec e6       	ldi	r30, 0x6C	; 108
    3fd6:	f9 e0       	ldi	r31, 0x09	; 9
    3fd8:	16 82       	std	Z+6, r1	; 0x06
    3fda:	82 b1       	in	r24, 0x02	; 2
    3fdc:	12 b8       	out	0x02, r1	; 2
    3fde:	d6 01       	movw	r26, r12
    3fe0:	1d 92       	st	X+, r1
    3fe2:	1c 92       	st	X, r1
    3fe4:	10 92 7f 0a 	sts	0x0A7F, r1	; 0x800a7f <_err1+0x1>
    3fe8:	10 92 7e 0a 	sts	0x0A7E, r1	; 0x800a7e <_err1>
    3fec:	11 8a       	std	Z+17, r1	; 0x11
    3fee:	ff 92       	push	r15
    3ff0:	ef 92       	push	r14
    3ff2:	1f 93       	push	r17
    3ff4:	0f 93       	push	r16
    3ff6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3ffa:	8c e6       	ldi	r24, 0x6C	; 108
    3ffc:	99 e0       	ldi	r25, 0x09	; 9
    3ffe:	0e 94 c5 50 	call	0xa18a	; 0xa18a <stopTrvTimer>
    4002:	8c e6       	ldi	r24, 0x6C	; 108
    4004:	99 e0       	ldi	r25, 0x09	; 9
    4006:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <Comp_Stop>
    400a:	0f 90       	pop	r0
    400c:	0f 90       	pop	r0
    400e:	0f 90       	pop	r0
    4010:	0f 90       	pop	r0
		//xSerialxPrintf(&xSerial3Port,"mod =%d\r\n",EEpromData.AireToWater);
		//xSerialxPrintf(&xSerial3Port,"TimeBetweenDef =%d\r\n",EEpromData.TimeBetweenDef);
		
	
		
		if(Comp_1.suply &&  Comp_1.countError<3)
    4012:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <Comp_1+0x6>
    4016:	88 23       	and	r24, r24
    4018:	09 f4       	brne	.+2      	; 0x401c <System_1+0x12a>
    401a:	46 c0       	rjmp	.+140    	; 0x40a8 <System_1+0x1b6>
    401c:	80 91 7d 09 	lds	r24, 0x097D	; 0x80097d <Comp_1+0x11>
    4020:	83 30       	cpi	r24, 0x03	; 3
    4022:	08 f0       	brcs	.+2      	; 0x4026 <System_1+0x134>
    4024:	41 c0       	rjmp	.+130    	; 0x40a8 <System_1+0x1b6>
			if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
			else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
			
			}
			*/
			if(!init_system){_err1=Check_Erors(&Comp_1,&EEpromData);ADE7758_resetStatus();} else init_system=false;
    4026:	80 91 9e 0a 	lds	r24, 0x0A9E	; 0x800a9e <init_system>
    402a:	81 11       	cpse	r24, r1
    402c:	0a c0       	rjmp	.+20     	; 0x4042 <System_1+0x150>
    402e:	be 01       	movw	r22, r28
    4030:	8c e6       	ldi	r24, 0x6C	; 108
    4032:	99 e0       	ldi	r25, 0x09	; 9
    4034:	21 d2       	rcall	.+1090   	; 0x4478 <Check_Erors>
    4036:	90 93 7f 0a 	sts	0x0A7F, r25	; 0x800a7f <_err1+0x1>
    403a:	80 93 7e 0a 	sts	0x0A7E, r24	; 0x800a7e <_err1>
    403e:	19 d2       	rcall	.+1074   	; 0x4472 <ADE7758_resetStatus>
    4040:	02 c0       	rjmp	.+4      	; 0x4046 <System_1+0x154>
    4042:	10 92 9e 0a 	sts	0x0A9E, r1	; 0x800a9e <init_system>
				
			//if(_err1>0 && Comp_1.error==0){Comp_1.error=_err1;Comp_1.countError++;Comp_1.Steps=0;Comp_Stop(&Comp_1);xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);}//
				
			 mod_pump(&Comp_1,&EEpromData);
    4046:	be 01       	movw	r22, r28
    4048:	8c e6       	ldi	r24, 0x6C	; 108
    404a:	99 e0       	ldi	r25, 0x09	; 9
    404c:	0e 94 6e 38 	call	0x70dc	; 0x70dc <mod_pump>
			//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);
			if(Comp_1.checkTrv && xTaskGetTickCount()-countTrvTime_1>10000 ){Comp_1.Steps = Fuzzy(&Comp_1,EEpromData.trv_corection_1);countTrvTime_1=xTaskGetTickCount();}
    4050:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <Comp_1+0x1>
    4054:	88 23       	and	r24, r24
    4056:	41 f1       	breq	.+80     	; 0x40a8 <System_1+0x1b6>
    4058:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    405c:	20 91 1d 07 	lds	r18, 0x071D	; 0x80071d <countTrvTime_1>
    4060:	30 91 1e 07 	lds	r19, 0x071E	; 0x80071e <countTrvTime_1+0x1>
    4064:	40 91 1f 07 	lds	r20, 0x071F	; 0x80071f <countTrvTime_1+0x2>
    4068:	50 91 20 07 	lds	r21, 0x0720	; 0x800720 <countTrvTime_1+0x3>
    406c:	dc 01       	movw	r26, r24
    406e:	cb 01       	movw	r24, r22
    4070:	82 1b       	sub	r24, r18
    4072:	93 0b       	sbc	r25, r19
    4074:	a4 0b       	sbc	r26, r20
    4076:	b5 0b       	sbc	r27, r21
    4078:	81 31       	cpi	r24, 0x11	; 17
    407a:	97 42       	sbci	r25, 0x27	; 39
    407c:	a1 05       	cpc	r26, r1
    407e:	b1 05       	cpc	r27, r1
    4080:	98 f0       	brcs	.+38     	; 0x40a8 <System_1+0x1b6>
    4082:	6a a9       	ldd	r22, Y+50	; 0x32
    4084:	7b a9       	ldd	r23, Y+51	; 0x33
    4086:	8c e6       	ldi	r24, 0x6C	; 108
    4088:	99 e0       	ldi	r25, 0x09	; 9
    408a:	0e 94 14 51 	call	0xa228	; 0xa228 <Fuzzy>
    408e:	d4 01       	movw	r26, r8
    4090:	8d 93       	st	X+, r24
    4092:	9c 93       	st	X, r25
    4094:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    4098:	60 93 1d 07 	sts	0x071D, r22	; 0x80071d <countTrvTime_1>
    409c:	70 93 1e 07 	sts	0x071E, r23	; 0x80071e <countTrvTime_1+0x1>
    40a0:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <countTrvTime_1+0x2>
    40a4:	90 93 20 07 	sts	0x0720, r25	; 0x800720 <countTrvTime_1+0x3>
			
			
		}
		
		vTaskDelay(1000);
    40a8:	68 ee       	ldi	r22, 0xE8	; 232
    40aa:	73 e0       	ldi	r23, 0x03	; 3
    40ac:	80 e0       	ldi	r24, 0x00	; 0
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <vTaskDelay>
		//xSerialxPrintf(&xSerial3Port,"Stack1 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
	}
    40b4:	3c cf       	rjmp	.-392    	; 0x3f2e <System_1+0x3c>

000040b6 <ModBus>:

	while (1)
	{   
		//wdt_reset();
		//xSerialxPrintf(&xSerial3Port,"ModBus_task\r\n");
		if (xSemaphoreTake(xMbBinarySemaphore, portMAX_DELAY) == pdTRUE )
    40b6:	4f ef       	ldi	r20, 0xFF	; 255
    40b8:	5f ef       	ldi	r21, 0xFF	; 255
    40ba:	ba 01       	movw	r22, r20
    40bc:	80 91 9f 0a 	lds	r24, 0x0A9F	; 0x800a9f <xMbBinarySemaphore>
    40c0:	90 91 a0 0a 	lds	r25, 0x0AA0	; 0x800aa0 <xMbBinarySemaphore+0x1>
    40c4:	0e 94 8f 0b 	call	0x171e	; 0x171e <xQueueSemaphoreTake>
    40c8:	81 30       	cpi	r24, 0x01	; 1
    40ca:	a9 f7       	brne	.-22     	; 0x40b6 <ModBus>
		{
			modbus_update();
    40cc:	33 d7       	rcall	.+3686   	; 0x4f34 <modbus_update>
			//xSerialxPrintf(&xSerial3Port,"Interrupt\r\n");
			if(port_0){xSerialRxFlush( &xSerialPort );port_0=false;indexBuf=0;}
    40ce:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <port_0>
    40d2:	88 23       	and	r24, r24
    40d4:	49 f0       	breq	.+18     	; 0x40e8 <ModBus+0x32>
    40d6:	83 e6       	ldi	r24, 0x63	; 99
    40d8:	97 e0       	ldi	r25, 0x07	; 7
    40da:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xSerialRxFlush>
    40de:	10 92 b9 0a 	sts	0x0AB9, r1	; 0x800ab9 <port_0>
    40e2:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <indexBuf>
    40e6:	e7 cf       	rjmp	.-50     	; 0x40b6 <ModBus>
			else if(port_3){xSerialRxFlush( &xSerial3Port );port_3=false;indexBuf=0;}
    40e8:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <port_3>
    40ec:	88 23       	and	r24, r24
    40ee:	19 f3       	breq	.-58     	; 0x40b6 <ModBus>
    40f0:	8a ea       	ldi	r24, 0xAA	; 170
    40f2:	97 e0       	ldi	r25, 0x07	; 7
    40f4:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xSerialRxFlush>
    40f8:	10 92 0b 09 	sts	0x090B, r1	; 0x80090b <port_3>
    40fc:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <indexBuf>
    4100:	da cf       	rjmp	.-76     	; 0x40b6 <ModBus>

00004102 <main>:
//--------------------------------------------------------
volatile long  countTimer;
int main(void) __attribute__ ((OS_main));

int main(void)
{
    4102:	cd b7       	in	r28, 0x3d	; 61
    4104:	de b7       	in	r29, 0x3e	; 62
    4106:	a2 97       	sbiw	r28, 0x22	; 34
    4108:	de bf       	out	0x3e, r29	; 62
    410a:	cd bf       	out	0x3d, r28	; 61

	initPins();
    410c:	0e 94 bb 3d 	call	0x7b76	; 0x7b76 <initPins>
	ADE7758_Init();
    4110:	93 d1       	rcall	.+806    	; 0x4438 <ADE7758_Init>
	timer_1_Init();
    4112:	b3 d3       	rcall	.+1894   	; 0x487a <timer_1_Init>
    4114:	81 e0       	ldi	r24, 0x01	; 1
	Comp_1.Index=1;
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	90 93 df 09 	sts	0x09DF, r25	; 0x8009df <Comp_1+0x73>
    411c:	80 93 de 09 	sts	0x09DE, r24	; 0x8009de <Comp_1+0x72>
    4120:	82 e0       	ldi	r24, 0x02	; 2
	Comp_2.Index=2;
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	90 93 69 0a 	sts	0x0A69, r25	; 0x800a69 <Comp_2+0x73>
    4128:	80 93 68 0a 	sts	0x0A68, r24	; 0x800a68 <Comp_2+0x72>
    412c:	80 e0       	ldi	r24, 0x00	; 0
	//eeprom_write_block((void*)&EEpromData, ( void*)0, sizeof (xEEdata));
	current_time = time(NULL);
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    4134:	60 93 07 09 	sts	0x0907, r22	; 0x800907 <current_time>
    4138:	70 93 08 09 	sts	0x0908, r23	; 0x800908 <current_time+0x1>
    413c:	80 93 09 09 	sts	0x0909, r24	; 0x800909 <current_time+0x2>
    4140:	90 93 0a 09 	sts	0x090A, r25	; 0x80090a <current_time+0x3>
    4144:	ee 24       	eor	r14, r14
	xSerialPort = xSerialPortInitMinimal( USART0, 9600, portSERIAL_BUFFER_TX, portSERIAL_BUFFER_RX);
    4146:	ea 94       	dec	r14
    4148:	f1 2c       	mov	r15, r1
    414a:	0f ef       	ldi	r16, 0xFF	; 255
    414c:	10 e0       	ldi	r17, 0x00	; 0
    414e:	20 e8       	ldi	r18, 0x80	; 128
    4150:	35 e2       	ldi	r19, 0x25	; 37
    4152:	40 e0       	ldi	r20, 0x00	; 0
    4154:	50 e0       	ldi	r21, 0x00	; 0
    4156:	60 e0       	ldi	r22, 0x00	; 0
    4158:	ce 01       	movw	r24, r28
    415a:	01 96       	adiw	r24, 0x01	; 1
    415c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <xSerialPortInitMinimal>
    4160:	82 e2       	ldi	r24, 0x22	; 34
    4162:	fe 01       	movw	r30, r28
    4164:	31 96       	adiw	r30, 0x01	; 1
    4166:	a3 e6       	ldi	r26, 0x63	; 99
    4168:	b7 e0       	ldi	r27, 0x07	; 7
    416a:	01 90       	ld	r0, Z+
    416c:	0d 92       	st	X+, r0
    416e:	8a 95       	dec	r24
    4170:	e1 f7       	brne	.-8      	; 0x416a <main+0x68>
    4172:	20 e8       	ldi	r18, 0x80	; 128
	xSerial3Port = xSerialPortInitMinimal( USART3, 9600, portSERIAL_BUFFER_TX, portSERIAL_BUFFER_RX);
    4174:	35 e2       	ldi	r19, 0x25	; 37
    4176:	40 e0       	ldi	r20, 0x00	; 0
    4178:	50 e0       	ldi	r21, 0x00	; 0
    417a:	66 e0       	ldi	r22, 0x06	; 6
    417c:	ce 01       	movw	r24, r28
    417e:	01 96       	adiw	r24, 0x01	; 1
    4180:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <xSerialPortInitMinimal>
    4184:	82 e2       	ldi	r24, 0x22	; 34
    4186:	fe 01       	movw	r30, r28
    4188:	31 96       	adiw	r30, 0x01	; 1
    418a:	aa ea       	ldi	r26, 0xAA	; 170
    418c:	b7 e0       	ldi	r27, 0x07	; 7
    418e:	01 90       	ld	r0, Z+
    4190:	0d 92       	st	X+, r0
    4192:	8a 95       	dec	r24
    4194:	e1 f7       	brne	.-8      	; 0x418e <main+0x8c>
    4196:	43 e0       	ldi	r20, 0x03	; 3
	vSemaphoreCreateBinary(xMbBinarySemaphore);
    4198:	60 e0       	ldi	r22, 0x00	; 0
    419a:	81 e0       	ldi	r24, 0x01	; 1
    419c:	0e 94 a7 09 	call	0x134e	; 0x134e <xQueueGenericCreate>
    41a0:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <xMbBinarySemaphore+0x1>
    41a4:	80 93 9f 0a 	sts	0x0A9F, r24	; 0x800a9f <xMbBinarySemaphore>
    41a8:	00 97       	sbiw	r24, 0x00	; 0
    41aa:	41 f0       	breq	.+16     	; 0x41bc <main+0xba>
    41ac:	00 e0       	ldi	r16, 0x00	; 0
    41ae:	20 e0       	ldi	r18, 0x00	; 0
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	a9 01       	movw	r20, r18
    41b4:	60 e0       	ldi	r22, 0x00	; 0
    41b6:	70 e0       	ldi	r23, 0x00	; 0
    41b8:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    41bc:	40 e6       	ldi	r20, 0x60	; 96

    
	eeprom_read_block((void*)&EEpromData, (const void*)0, sizeof (xEEdata));
    41be:	50 e0       	ldi	r21, 0x00	; 0
    41c0:	60 e0       	ldi	r22, 0x00	; 0
    41c2:	70 e0       	ldi	r23, 0x00	; 0
    41c4:	8c e0       	ldi	r24, 0x0C	; 12
    41c6:	99 e0       	ldi	r25, 0x09	; 9
    41c8:	0e 94 6b 5c 	call	0xb8d6	; 0xb8d6 <eeprom_read_block>
    41cc:	8c e6       	ldi	r24, 0x6C	; 108
	activateTimers(&Comp_1);
    41ce:	99 e0       	ldi	r25, 0x09	; 9
    41d0:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <activateTimers>
    41d4:	86 ef       	ldi	r24, 0xF6	; 246
	activateTimers(&Comp_2);
    41d6:	99 e0       	ldi	r25, 0x09	; 9
    41d8:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <activateTimers>
    41dc:	8c e6       	ldi	r24, 0x6C	; 108
	activateTrvTimer(&Comp_1);
    41de:	99 e0       	ldi	r25, 0x09	; 9
    41e0:	0e 94 4f 50 	call	0xa09e	; 0xa09e <activateTrvTimer>
    41e4:	86 ef       	ldi	r24, 0xF6	; 246
	activateTrvTimer(&Comp_2);
    41e6:	99 e0       	ldi	r25, 0x09	; 9
    41e8:	0e 94 4f 50 	call	0xa09e	; 0xa09e <activateTrvTimer>
    41ec:	81 e0       	ldi	r24, 0x01	; 1
	init_system=true;
    41ee:	80 93 9e 0a 	sts	0x0A9E, r24	; 0x800a9e <init_system>
    41f2:	80 91 3e 09 	lds	r24, 0x093E	; 0x80093e <EEpromData+0x32>
	old_corection_1=EEpromData.trv_corection_1;
    41f6:	90 91 3f 09 	lds	r25, 0x093F	; 0x80093f <EEpromData+0x33>
    41fa:	90 93 85 0a 	sts	0x0A85, r25	; 0x800a85 <old_corection_1+0x1>
    41fe:	80 93 84 0a 	sts	0x0A84, r24	; 0x800a84 <old_corection_1>
    4202:	80 91 54 09 	lds	r24, 0x0954	; 0x800954 <EEpromData+0x48>
	old_corection_2=EEpromData.trv_corection_2;
    4206:	90 91 55 09 	lds	r25, 0x0955	; 0x800955 <EEpromData+0x49>
    420a:	90 93 f5 09 	sts	0x09F5, r25	; 0x8009f5 <old_corection_2+0x1>
    420e:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <old_corection_2>
    4212:	8c e0       	ldi	r24, 0x0C	; 12
	Comp_1.modeOfPump=Comp_2.modeOfPump=selmode(&EEpromData);
    4214:	99 e0       	ldi	r25, 0x09	; 9
    4216:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <selmode>
    421a:	80 93 06 0a 	sts	0x0A06, r24	; 0x800a06 <Comp_2+0x10>
    421e:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <Comp_1+0x10>
    4222:	99 e2       	ldi	r25, 0x29	; 41
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    4224:	88 e1       	ldi	r24, 0x18	; 24
    4226:	0f b6       	in	r0, 0x3f	; 63
    4228:	f8 94       	cli
    422a:	a8 95       	wdr
    422c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    4230:	0f be       	out	0x3f, r0	; 63
    4232:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    4236:	78 94       	sei
	wdt_enable(WDTO_8S);
	//-------------------------------------
	sei(); 
    4238:	e1 2c       	mov	r14, r1
	//-------------------------------------
	xTaskCreate(ModBus,(const portCHAR *)"ModBus",256,NULL,2, NULL );
    423a:	f1 2c       	mov	r15, r1
    423c:	02 e0       	ldi	r16, 0x02	; 2
    423e:	20 e0       	ldi	r18, 0x00	; 0
    4240:	30 e0       	ldi	r19, 0x00	; 0
    4242:	40 e0       	ldi	r20, 0x00	; 0
    4244:	51 e0       	ldi	r21, 0x01	; 1
    4246:	62 e8       	ldi	r22, 0x82	; 130
    4248:	72 e0       	ldi	r23, 0x02	; 2
    424a:	8b e5       	ldi	r24, 0x5B	; 91
    424c:	90 e2       	ldi	r25, 0x20	; 32
    424e:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    4252:	0f 2e       	mov	r0, r31
	xTaskCreate(System_1,(const portCHAR *)"System_1",512,NULL,0, &xHandleFirst );
    4254:	f3 e2       	ldi	r31, 0x23	; 35
    4256:	ef 2e       	mov	r14, r31
    4258:	f7 e0       	ldi	r31, 0x07	; 7
    425a:	ff 2e       	mov	r15, r31
    425c:	f0 2d       	mov	r31, r0
    425e:	00 e0       	ldi	r16, 0x00	; 0
    4260:	20 e0       	ldi	r18, 0x00	; 0
    4262:	30 e0       	ldi	r19, 0x00	; 0
    4264:	40 e0       	ldi	r20, 0x00	; 0
    4266:	52 e0       	ldi	r21, 0x02	; 2
    4268:	69 e8       	ldi	r22, 0x89	; 137
    426a:	72 e0       	ldi	r23, 0x02	; 2
    426c:	89 e7       	ldi	r24, 0x79	; 121
    426e:	9f e1       	ldi	r25, 0x1F	; 31
    4270:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    4274:	0f 2e       	mov	r0, r31
	xTaskCreate(System_2,(const portCHAR *)"System_2",512,NULL,0, &xHandleSecond );
    4276:	f1 e2       	ldi	r31, 0x21	; 33
    4278:	ef 2e       	mov	r14, r31
    427a:	f7 e0       	ldi	r31, 0x07	; 7
    427c:	ff 2e       	mov	r15, r31
    427e:	f0 2d       	mov	r31, r0
    4280:	20 e0       	ldi	r18, 0x00	; 0
    4282:	30 e0       	ldi	r19, 0x00	; 0
    4284:	40 e0       	ldi	r20, 0x00	; 0
    4286:	52 e0       	ldi	r21, 0x02	; 2
    4288:	62 e9       	ldi	r22, 0x92	; 146
    428a:	72 e0       	ldi	r23, 0x02	; 2
    428c:	8b eb       	ldi	r24, 0xBB	; 187
    428e:	9e e1       	ldi	r25, 0x1E	; 30
    4290:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    4294:	e1 2c       	mov	r14, r1
	xTaskCreate(Defrost,(const portCHAR *)"Defrost",256,NULL,0, NULL );
    4296:	f1 2c       	mov	r15, r1
    4298:	20 e0       	ldi	r18, 0x00	; 0
    429a:	30 e0       	ldi	r19, 0x00	; 0
    429c:	40 e0       	ldi	r20, 0x00	; 0
    429e:	51 e0       	ldi	r21, 0x01	; 1
    42a0:	6b e9       	ldi	r22, 0x9B	; 155
    42a2:	72 e0       	ldi	r23, 0x02	; 2
    42a4:	81 ec       	ldi	r24, 0xC1	; 193
    42a6:	9d e1       	ldi	r25, 0x1D	; 29
    42a8:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    42ac:	0e 94 56 16 	call	0x2cac	; 0x2cac <vTaskStartScheduler>
	//--------------------------------------
	vTaskStartScheduler();
    42b0:	80 e0       	ldi	r24, 0x00	; 0
}
    42b2:	90 e0       	ldi	r25, 0x00	; 0
    42b4:	a2 96       	adiw	r28, 0x22	; 34
    42b6:	0f b6       	in	r0, 0x3f	; 63
    42b8:	f8 94       	cli
    42ba:	de bf       	out	0x3e, r29	; 62
    42bc:	0f be       	out	0x3f, r0	; 63
    42be:	cd bf       	out	0x3d, r28	; 61
    42c0:	08 95       	ret

000042c2 <__vector_17>:
    42c2:	1f 92       	push	r1

ISR(TIMER1_COMPA_vect) // timer_compare_a
{
    42c4:	0f 92       	push	r0
    42c6:	0f b6       	in	r0, 0x3f	; 63
    42c8:	0f 92       	push	r0
    42ca:	11 24       	eor	r1, r1
    42cc:	0b b6       	in	r0, 0x3b	; 59
    42ce:	0f 92       	push	r0
    42d0:	2f 93       	push	r18
    42d2:	3f 93       	push	r19
    42d4:	4f 93       	push	r20
    42d6:	5f 93       	push	r21
    42d8:	6f 93       	push	r22
    42da:	7f 93       	push	r23
    42dc:	8f 93       	push	r24
    42de:	9f 93       	push	r25
    42e0:	af 93       	push	r26
    42e2:	bf 93       	push	r27
    42e4:	ef 93       	push	r30
    42e6:	ff 93       	push	r31
	
	static BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
    42e8:	10 92 14 07 	sts	0x0714, r1	; 0x800714 <xHigherPriorityTaskWoken.3697>
	countTimer++;
    42ec:	80 91 b5 0a 	lds	r24, 0x0AB5	; 0x800ab5 <countTimer>
    42f0:	90 91 b6 0a 	lds	r25, 0x0AB6	; 0x800ab6 <countTimer+0x1>
    42f4:	a0 91 b7 0a 	lds	r26, 0x0AB7	; 0x800ab7 <countTimer+0x2>
    42f8:	b0 91 b8 0a 	lds	r27, 0x0AB8	; 0x800ab8 <countTimer+0x3>
    42fc:	01 96       	adiw	r24, 0x01	; 1
    42fe:	a1 1d       	adc	r26, r1
    4300:	b1 1d       	adc	r27, r1
    4302:	80 93 b5 0a 	sts	0x0AB5, r24	; 0x800ab5 <countTimer>
    4306:	90 93 b6 0a 	sts	0x0AB6, r25	; 0x800ab6 <countTimer+0x1>
    430a:	a0 93 b7 0a 	sts	0x0AB7, r26	; 0x800ab7 <countTimer+0x2>
    430e:	b0 93 b8 0a 	sts	0x0AB8, r27	; 0x800ab8 <countTimer+0x3>
	if(countTimer==7){stop_1_Timer();countTimer=0;xSemaphoreGiveFromISR(xMbBinarySemaphore,&xHigherPriorityTaskWoken);}
    4312:	80 91 b5 0a 	lds	r24, 0x0AB5	; 0x800ab5 <countTimer>
    4316:	90 91 b6 0a 	lds	r25, 0x0AB6	; 0x800ab6 <countTimer+0x1>
    431a:	a0 91 b7 0a 	lds	r26, 0x0AB7	; 0x800ab7 <countTimer+0x2>
    431e:	b0 91 b8 0a 	lds	r27, 0x0AB8	; 0x800ab8 <countTimer+0x3>
    4322:	07 97       	sbiw	r24, 0x07	; 7
    4324:	a1 05       	cpc	r26, r1
    4326:	b1 05       	cpc	r27, r1
    4328:	89 f4       	brne	.+34     	; 0x434c <__vector_17+0x8a>
    432a:	97 d2       	rcall	.+1326   	; 0x485a <stop_1_Timer>
    432c:	10 92 b5 0a 	sts	0x0AB5, r1	; 0x800ab5 <countTimer>
    4330:	10 92 b6 0a 	sts	0x0AB6, r1	; 0x800ab6 <countTimer+0x1>
    4334:	10 92 b7 0a 	sts	0x0AB7, r1	; 0x800ab7 <countTimer+0x2>
    4338:	10 92 b8 0a 	sts	0x0AB8, r1	; 0x800ab8 <countTimer+0x3>
    433c:	64 e1       	ldi	r22, 0x14	; 20
    433e:	77 e0       	ldi	r23, 0x07	; 7
    4340:	80 91 9f 0a 	lds	r24, 0x0A9F	; 0x800a9f <xMbBinarySemaphore>
    4344:	90 91 a0 0a 	lds	r25, 0x0AA0	; 0x800aa0 <xMbBinarySemaphore+0x1>
    4348:	0e 94 c9 0a 	call	0x1592	; 0x1592 <xQueueGiveFromISR>
	//if( xHigherPriorityTaskWoken == pdTRUE )portYIELD();

}
    434c:	ff 91       	pop	r31
    434e:	ef 91       	pop	r30
    4350:	bf 91       	pop	r27
    4352:	af 91       	pop	r26
    4354:	9f 91       	pop	r25
    4356:	8f 91       	pop	r24
    4358:	7f 91       	pop	r23
    435a:	6f 91       	pop	r22
    435c:	5f 91       	pop	r21
    435e:	4f 91       	pop	r20
    4360:	3f 91       	pop	r19
    4362:	2f 91       	pop	r18
    4364:	0f 90       	pop	r0
    4366:	0b be       	out	0x3b, r0	; 59
    4368:	0f 90       	pop	r0
    436a:	0f be       	out	0x3f, r0	; 63
    436c:	0f 90       	pop	r0
    436e:	1f 90       	pop	r1
    4370:	18 95       	reti

00004372 <ADE7758_read24>:
}
long ADE7758_getMaskInterrupts(void){
	return ADE7758_read24(MASK);
}
void ADE7758_setMaskInterrupts(unsigned long data){
	return ADE7758_write24(MASK, data);
    4372:	1f 93       	push	r17
    4374:	cf 93       	push	r28
    4376:	df 93       	push	r29
    4378:	c8 2f       	mov	r28, r24
    437a:	0f b6       	in	r0, 0x3f	; 63
    437c:	f8 94       	cli
    437e:	0f 92       	push	r0
    4380:	84 e0       	ldi	r24, 0x04	; 4
    4382:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <spiSelect>
    4386:	8c 2f       	mov	r24, r28
    4388:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    438c:	80 e0       	ldi	r24, 0x00	; 0
    438e:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    4392:	18 2f       	mov	r17, r24
    4394:	80 e0       	ldi	r24, 0x00	; 0
    4396:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    439a:	c8 2f       	mov	r28, r24
    439c:	80 e0       	ldi	r24, 0x00	; 0
    439e:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    43a2:	d8 2f       	mov	r29, r24
    43a4:	84 e0       	ldi	r24, 0x04	; 4
    43a6:	0e 94 17 14 	call	0x282e	; 0x282e <spiDeselect>
    43aa:	0f 90       	pop	r0
    43ac:	0f be       	out	0x3f, r0	; 63
    43ae:	8c 2f       	mov	r24, r28
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    43b2:	a0 e0       	ldi	r26, 0x00	; 0
    43b4:	b0 e0       	ldi	r27, 0x00	; 0
    43b6:	ba 2f       	mov	r27, r26
    43b8:	a9 2f       	mov	r26, r25
    43ba:	98 2f       	mov	r25, r24
    43bc:	88 27       	eor	r24, r24
    43be:	a1 2b       	or	r26, r17
    43c0:	bc 01       	movw	r22, r24
    43c2:	cd 01       	movw	r24, r26
    43c4:	6d 2b       	or	r22, r29
    43c6:	df 91       	pop	r29
    43c8:	cf 91       	pop	r28
    43ca:	1f 91       	pop	r17
    43cc:	08 95       	ret

000043ce <ADE7758_write8>:
    43ce:	cf 93       	push	r28
    43d0:	df 93       	push	r29
    43d2:	d8 2f       	mov	r29, r24
    43d4:	c6 2f       	mov	r28, r22
    43d6:	0f b6       	in	r0, 0x3f	; 63
    43d8:	f8 94       	cli
    43da:	0f 92       	push	r0
    43dc:	84 e0       	ldi	r24, 0x04	; 4
    43de:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <spiSelect>
    43e2:	8d 2f       	mov	r24, r29
    43e4:	80 68       	ori	r24, 0x80	; 128
    43e6:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    43ea:	8c 2f       	mov	r24, r28
    43ec:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    43f0:	84 e0       	ldi	r24, 0x04	; 4
    43f2:	0e 94 17 14 	call	0x282e	; 0x282e <spiDeselect>
    43f6:	0f 90       	pop	r0
    43f8:	0f be       	out	0x3f, r0	; 63
    43fa:	df 91       	pop	r29
    43fc:	cf 91       	pop	r28
    43fe:	08 95       	ret

00004400 <ADE7758_setOpMode>:
    4400:	68 2f       	mov	r22, r24
    4402:	83 e1       	ldi	r24, 0x13	; 19
    4404:	e4 cf       	rjmp	.-56     	; 0x43ce <ADE7758_write8>
    4406:	08 95       	ret

00004408 <ADE7758_setWavMode>:
    4408:	68 2f       	mov	r22, r24
    440a:	85 e1       	ldi	r24, 0x15	; 21
    440c:	e0 cf       	rjmp	.-64     	; 0x43ce <ADE7758_write8>
    440e:	08 95       	ret

00004410 <ADE7758_setLcycMode>:
    4410:	68 2f       	mov	r22, r24
    4412:	87 e1       	ldi	r24, 0x17	; 23
    4414:	dc cf       	rjmp	.-72     	; 0x43ce <ADE7758_write8>
    4416:	08 95       	ret

00004418 <ADE7758_setupDivs>:
    4418:	cf 93       	push	r28
    441a:	df 93       	push	r29
    441c:	d6 2f       	mov	r29, r22
    441e:	c4 2f       	mov	r28, r20
    4420:	68 2f       	mov	r22, r24
    4422:	82 e4       	ldi	r24, 0x42	; 66
    4424:	d4 df       	rcall	.-88     	; 0x43ce <ADE7758_write8>
    4426:	6d 2f       	mov	r22, r29
    4428:	83 e4       	ldi	r24, 0x43	; 67
    442a:	d1 df       	rcall	.-94     	; 0x43ce <ADE7758_write8>
    442c:	6c 2f       	mov	r22, r28
    442e:	84 e4       	ldi	r24, 0x44	; 68
    4430:	ce df       	rcall	.-100    	; 0x43ce <ADE7758_write8>
    4432:	df 91       	pop	r29
    4434:	cf 91       	pop	r28
    4436:	08 95       	ret

00004438 <ADE7758_Init>:
    4438:	88 e0       	ldi	r24, 0x08	; 8
    443a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <spiSetDataMode>
    443e:	86 e0       	ldi	r24, 0x06	; 6
    4440:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <spiSetClockDivider>
    4444:	81 e0       	ldi	r24, 0x01	; 1
    4446:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <spiSetBitOrder>
    444a:	84 e0       	ldi	r24, 0x04	; 4
    444c:	0e 94 81 13 	call	0x2702	; 0x2702 <spiBegin>
    4450:	80 e0       	ldi	r24, 0x00	; 0
    4452:	de df       	rcall	.-68     	; 0x4410 <ADE7758_setLcycMode>
    4454:	60 e0       	ldi	r22, 0x00	; 0
    4456:	83 e2       	ldi	r24, 0x23	; 35
    4458:	ba df       	rcall	.-140    	; 0x43ce <ADE7758_write8>
    445a:	42 e0       	ldi	r20, 0x02	; 2
    445c:	62 e0       	ldi	r22, 0x02	; 2
    445e:	82 e0       	ldi	r24, 0x02	; 2
    4460:	db df       	rcall	.-74     	; 0x4418 <ADE7758_setupDivs>
    4462:	84 e0       	ldi	r24, 0x04	; 4
    4464:	cd df       	rcall	.-102    	; 0x4400 <ADE7758_setOpMode>
    4466:	80 e1       	ldi	r24, 0x10	; 16
    4468:	cf cf       	rjmp	.-98     	; 0x4408 <ADE7758_setWavMode>
    446a:	08 95       	ret

0000446c <ADE7758_getStatus>:
}
unsigned long ADE7758_getStatus(){
	return ADE7758_read24(STATUS);
    446c:	89 e1       	ldi	r24, 0x19	; 25
    446e:	81 cf       	rjmp	.-254    	; 0x4372 <ADE7758_read24>
}
    4470:	08 95       	ret

00004472 <ADE7758_resetStatus>:
unsigned long ADE7758_resetStatus(){
	return ADE7758_read24(RSTATUS);
    4472:	8a e1       	ldi	r24, 0x1A	; 26
    4474:	7e cf       	rjmp	.-260    	; 0x4372 <ADE7758_read24>
}
    4476:	08 95       	ret

00004478 <Check_Erors>:
#include "Errors.h"

extern  bool def;
int Check_Erors(xCompressor *comp,xEEdata *EElimit)
{
    4478:	4f 92       	push	r4
    447a:	5f 92       	push	r5
    447c:	6f 92       	push	r6
    447e:	7f 92       	push	r7
    4480:	8f 92       	push	r8
    4482:	9f 92       	push	r9
    4484:	af 92       	push	r10
    4486:	bf 92       	push	r11
    4488:	cf 92       	push	r12
    448a:	df 92       	push	r13
    448c:	ef 92       	push	r14
    448e:	ff 92       	push	r15
    4490:	0f 93       	push	r16
    4492:	1f 93       	push	r17
    4494:	cf 93       	push	r28
    4496:	df 93       	push	r29
    4498:	ec 01       	movw	r28, r24
    449a:	8b 01       	movw	r16, r22
		if( comp->Dhw_Temp<-100){return (10+comp->Index);}
    449c:	20 e0       	ldi	r18, 0x00	; 0
    449e:	30 e0       	ldi	r19, 0x00	; 0
    44a0:	48 ec       	ldi	r20, 0xC8	; 200
    44a2:	52 ec       	ldi	r21, 0xC2	; 194
    44a4:	6a 89       	ldd	r22, Y+18	; 0x12
    44a6:	7b 89       	ldd	r23, Y+19	; 0x13
    44a8:	8c 89       	ldd	r24, Y+20	; 0x14
    44aa:	9d 89       	ldd	r25, Y+21	; 0x15
    44ac:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    44b0:	88 23       	and	r24, r24
    44b2:	34 f4       	brge	.+12     	; 0x44c0 <Check_Erors+0x48>
    44b4:	ce 58       	subi	r28, 0x8E	; 142
    44b6:	df 4f       	sbci	r29, 0xFF	; 255
    44b8:	88 81       	ld	r24, Y
    44ba:	99 81       	ldd	r25, Y+1	; 0x01
    44bc:	0a 96       	adiw	r24, 0x0a	; 10
    44be:	b1 c1       	rjmp	.+866    	; 0x4822 <Check_Erors+0x3aa>
		else if(comp->Bac_Temp<-100) {return (20+comp->Index);}
    44c0:	20 e0       	ldi	r18, 0x00	; 0
    44c2:	30 e0       	ldi	r19, 0x00	; 0
    44c4:	48 ec       	ldi	r20, 0xC8	; 200
    44c6:	52 ec       	ldi	r21, 0xC2	; 194
    44c8:	6e 89       	ldd	r22, Y+22	; 0x16
    44ca:	7f 89       	ldd	r23, Y+23	; 0x17
    44cc:	88 8d       	ldd	r24, Y+24	; 0x18
    44ce:	99 8d       	ldd	r25, Y+25	; 0x19
    44d0:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    44d4:	88 23       	and	r24, r24
    44d6:	34 f4       	brge	.+12     	; 0x44e4 <Check_Erors+0x6c>
    44d8:	ce 58       	subi	r28, 0x8E	; 142
    44da:	df 4f       	sbci	r29, 0xFF	; 255
    44dc:	88 81       	ld	r24, Y
    44de:	99 81       	ldd	r25, Y+1	; 0x01
    44e0:	44 96       	adiw	r24, 0x14	; 20
    44e2:	9f c1       	rjmp	.+830    	; 0x4822 <Check_Erors+0x3aa>
		else if (comp->Heat_Out<-100) {return (30+comp->Index);}
    44e4:	ca a4       	ldd	r12, Y+42	; 0x2a
    44e6:	db a4       	ldd	r13, Y+43	; 0x2b
    44e8:	ec a4       	ldd	r14, Y+44	; 0x2c
    44ea:	fd a4       	ldd	r15, Y+45	; 0x2d
    44ec:	20 e0       	ldi	r18, 0x00	; 0
    44ee:	30 e0       	ldi	r19, 0x00	; 0
    44f0:	48 ec       	ldi	r20, 0xC8	; 200
    44f2:	52 ec       	ldi	r21, 0xC2	; 194
    44f4:	c7 01       	movw	r24, r14
    44f6:	b6 01       	movw	r22, r12
    44f8:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    44fc:	88 23       	and	r24, r24
    44fe:	34 f4       	brge	.+12     	; 0x450c <Check_Erors+0x94>
    4500:	ce 58       	subi	r28, 0x8E	; 142
    4502:	df 4f       	sbci	r29, 0xFF	; 255
    4504:	88 81       	ld	r24, Y
    4506:	99 81       	ldd	r25, Y+1	; 0x01
    4508:	4e 96       	adiw	r24, 0x1e	; 30
    450a:	8b c1       	rjmp	.+790    	; 0x4822 <Check_Erors+0x3aa>
		else if (comp->Heat_In<-100){return (40+comp->Index);}
    450c:	8e a4       	ldd	r8, Y+46	; 0x2e
    450e:	9f a4       	ldd	r9, Y+47	; 0x2f
    4510:	a8 a8       	ldd	r10, Y+48	; 0x30
    4512:	b9 a8       	ldd	r11, Y+49	; 0x31
    4514:	20 e0       	ldi	r18, 0x00	; 0
    4516:	30 e0       	ldi	r19, 0x00	; 0
    4518:	48 ec       	ldi	r20, 0xC8	; 200
    451a:	52 ec       	ldi	r21, 0xC2	; 194
    451c:	c5 01       	movw	r24, r10
    451e:	b4 01       	movw	r22, r8
    4520:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    4524:	88 23       	and	r24, r24
    4526:	34 f4       	brge	.+12     	; 0x4534 <Check_Erors+0xbc>
    4528:	ce 58       	subi	r28, 0x8E	; 142
    452a:	df 4f       	sbci	r29, 0xFF	; 255
    452c:	88 81       	ld	r24, Y
    452e:	99 81       	ldd	r25, Y+1	; 0x01
    4530:	88 96       	adiw	r24, 0x28	; 40
    4532:	77 c1       	rjmp	.+750    	; 0x4822 <Check_Erors+0x3aa>
		else if(comp->Src_In<-100) {return (50+comp->Index);}
    4534:	20 e0       	ldi	r18, 0x00	; 0
    4536:	30 e0       	ldi	r19, 0x00	; 0
    4538:	48 ec       	ldi	r20, 0xC8	; 200
    453a:	52 ec       	ldi	r21, 0xC2	; 194
    453c:	6a a9       	ldd	r22, Y+50	; 0x32
    453e:	7b a9       	ldd	r23, Y+51	; 0x33
    4540:	8c a9       	ldd	r24, Y+52	; 0x34
    4542:	9d a9       	ldd	r25, Y+53	; 0x35
    4544:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    4548:	88 23       	and	r24, r24
    454a:	34 f4       	brge	.+12     	; 0x4558 <Check_Erors+0xe0>
    454c:	ce 58       	subi	r28, 0x8E	; 142
    454e:	df 4f       	sbci	r29, 0xFF	; 255
    4550:	88 81       	ld	r24, Y
    4552:	99 81       	ldd	r25, Y+1	; 0x01
    4554:	c2 96       	adiw	r24, 0x32	; 50
    4556:	65 c1       	rjmp	.+714    	; 0x4822 <Check_Erors+0x3aa>
		else if (comp->Src_Out<-100) {return (60+comp->Index);}
    4558:	20 e0       	ldi	r18, 0x00	; 0
    455a:	30 e0       	ldi	r19, 0x00	; 0
    455c:	48 ec       	ldi	r20, 0xC8	; 200
    455e:	52 ec       	ldi	r21, 0xC2	; 194
    4560:	6e a9       	ldd	r22, Y+54	; 0x36
    4562:	7f a9       	ldd	r23, Y+55	; 0x37
    4564:	88 ad       	ldd	r24, Y+56	; 0x38
    4566:	99 ad       	ldd	r25, Y+57	; 0x39
    4568:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    456c:	88 23       	and	r24, r24
    456e:	34 f4       	brge	.+12     	; 0x457c <Check_Erors+0x104>
    4570:	ce 58       	subi	r28, 0x8E	; 142
    4572:	df 4f       	sbci	r29, 0xFF	; 255
    4574:	88 81       	ld	r24, Y
    4576:	99 81       	ldd	r25, Y+1	; 0x01
    4578:	cc 96       	adiw	r24, 0x3c	; 60
    457a:	53 c1       	rjmp	.+678    	; 0x4822 <Check_Erors+0x3aa>
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
    457c:	4a ac       	ldd	r4, Y+58	; 0x3a
    457e:	5b ac       	ldd	r5, Y+59	; 0x3b
    4580:	6c ac       	ldd	r6, Y+60	; 0x3c
    4582:	7d ac       	ldd	r7, Y+61	; 0x3d
    4584:	20 e0       	ldi	r18, 0x00	; 0
    4586:	30 e0       	ldi	r19, 0x00	; 0
    4588:	48 ec       	ldi	r20, 0xC8	; 200
    458a:	52 ec       	ldi	r21, 0xC2	; 194
    458c:	c3 01       	movw	r24, r6
    458e:	b2 01       	movw	r22, r4
    4590:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    4594:	88 23       	and	r24, r24
    4596:	3c f4       	brge	.+14     	; 0x45a6 <Check_Erors+0x12e>
    4598:	ce 58       	subi	r28, 0x8E	; 142
    459a:	df 4f       	sbci	r29, 0xFF	; 255
    459c:	88 81       	ld	r24, Y
    459e:	99 81       	ldd	r25, Y+1	; 0x01
    45a0:	8a 5b       	subi	r24, 0xBA	; 186
    45a2:	9f 4f       	sbci	r25, 0xFF	; 255
    45a4:	3e c1       	rjmp	.+636    	; 0x4822 <Check_Erors+0x3aa>
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
    45a6:	20 e0       	ldi	r18, 0x00	; 0
    45a8:	30 e0       	ldi	r19, 0x00	; 0
    45aa:	48 ec       	ldi	r20, 0xC8	; 200
    45ac:	52 ec       	ldi	r21, 0xC2	; 194
    45ae:	fe 01       	movw	r30, r28
    45b0:	fe 96       	adiw	r30, 0x3e	; 62
    45b2:	60 81       	ld	r22, Z
    45b4:	71 81       	ldd	r23, Z+1	; 0x01
    45b6:	82 81       	ldd	r24, Z+2	; 0x02
    45b8:	93 81       	ldd	r25, Z+3	; 0x03
    45ba:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    45be:	88 23       	and	r24, r24
    45c0:	3c f4       	brge	.+14     	; 0x45d0 <Check_Erors+0x158>
    45c2:	ce 58       	subi	r28, 0x8E	; 142
    45c4:	df 4f       	sbci	r29, 0xFF	; 255
    45c6:	88 81       	ld	r24, Y
    45c8:	99 81       	ldd	r25, Y+1	; 0x01
    45ca:	80 5b       	subi	r24, 0xB0	; 176
    45cc:	9f 4f       	sbci	r25, 0xFF	; 255
    45ce:	29 c1       	rjmp	.+594    	; 0x4822 <Check_Erors+0x3aa>
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
    45d0:	20 e0       	ldi	r18, 0x00	; 0
    45d2:	30 e0       	ldi	r19, 0x00	; 0
    45d4:	48 ec       	ldi	r20, 0xC8	; 200
    45d6:	52 ec       	ldi	r21, 0xC2	; 194
    45d8:	fe 01       	movw	r30, r28
    45da:	ee 5b       	subi	r30, 0xBE	; 190
    45dc:	ff 4f       	sbci	r31, 0xFF	; 255
    45de:	60 81       	ld	r22, Z
    45e0:	71 81       	ldd	r23, Z+1	; 0x01
    45e2:	82 81       	ldd	r24, Z+2	; 0x02
    45e4:	93 81       	ldd	r25, Z+3	; 0x03
    45e6:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    45ea:	88 23       	and	r24, r24
    45ec:	3c f4       	brge	.+14     	; 0x45fc <Check_Erors+0x184>
    45ee:	ce 58       	subi	r28, 0x8E	; 142
    45f0:	df 4f       	sbci	r29, 0xFF	; 255
    45f2:	88 81       	ld	r24, Y
    45f4:	99 81       	ldd	r25, Y+1	; 0x01
    45f6:	86 5a       	subi	r24, 0xA6	; 166
    45f8:	9f 4f       	sbci	r25, 0xFF	; 255
    45fa:	13 c1       	rjmp	.+550    	; 0x4822 <Check_Erors+0x3aa>
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
    45fc:	4a 9b       	sbis	0x09, 2	; 9
    45fe:	0c c0       	rjmp	.+24     	; 0x4618 <Check_Erors+0x1a0>
    4600:	8f 85       	ldd	r24, Y+15	; 0x0f
    4602:	81 30       	cpi	r24, 0x01	; 1
    4604:	49 f4       	brne	.+18     	; 0x4618 <Check_Erors+0x1a0>
    4606:	fe 01       	movw	r30, r28
    4608:	ee 58       	subi	r30, 0x8E	; 142
    460a:	ff 4f       	sbci	r31, 0xFF	; 255
    460c:	80 81       	ld	r24, Z
    460e:	91 81       	ldd	r25, Z+1	; 0x01
    4610:	01 97       	sbiw	r24, 0x01	; 1
    4612:	09 f0       	breq	.+2      	; 0x4616 <Check_Erors+0x19e>
    4614:	f5 c0       	rjmp	.+490    	; 0x4800 <Check_Erors+0x388>
    4616:	d3 c0       	rjmp	.+422    	; 0x47be <Check_Erors+0x346>
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    4618:	4b 9b       	sbis	0x09, 3	; 9
    461a:	0d c0       	rjmp	.+26     	; 0x4636 <Check_Erors+0x1be>
    461c:	8f 85       	ldd	r24, Y+15	; 0x0f
    461e:	81 30       	cpi	r24, 0x01	; 1
    4620:	09 f0       	breq	.+2      	; 0x4624 <Check_Erors+0x1ac>
    4622:	fc c0       	rjmp	.+504    	; 0x481c <Check_Erors+0x3a4>
    4624:	fe 01       	movw	r30, r28
    4626:	ee 58       	subi	r30, 0x8E	; 142
    4628:	ff 4f       	sbci	r31, 0xFF	; 255
    462a:	80 81       	ld	r24, Z
    462c:	91 81       	ldd	r25, Z+1	; 0x01
    462e:	02 97       	sbiw	r24, 0x02	; 2
    4630:	09 f0       	breq	.+2      	; 0x4634 <Check_Erors+0x1bc>
    4632:	e9 c0       	rjmp	.+466    	; 0x4806 <Check_Erors+0x38e>
    4634:	c7 c0       	rjmp	.+398    	; 0x47c4 <Check_Erors+0x34c>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    4636:	65 9b       	sbis	0x0c, 5	; 12
    4638:	0d c0       	rjmp	.+26     	; 0x4654 <Check_Erors+0x1dc>
    463a:	8f 85       	ldd	r24, Y+15	; 0x0f
    463c:	81 30       	cpi	r24, 0x01	; 1
    463e:	09 f0       	breq	.+2      	; 0x4642 <Check_Erors+0x1ca>
    4640:	e5 c0       	rjmp	.+458    	; 0x480c <Check_Erors+0x394>
    4642:	fe 01       	movw	r30, r28
    4644:	ee 58       	subi	r30, 0x8E	; 142
    4646:	ff 4f       	sbci	r31, 0xFF	; 255
    4648:	80 81       	ld	r24, Z
    464a:	91 81       	ldd	r25, Z+1	; 0x01
    464c:	01 97       	sbiw	r24, 0x01	; 1
    464e:	09 f0       	breq	.+2      	; 0x4652 <Check_Erors+0x1da>
    4650:	df c0       	rjmp	.+446    	; 0x4810 <Check_Erors+0x398>
    4652:	bb c0       	rjmp	.+374    	; 0x47ca <Check_Erors+0x352>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    4654:	65 9b       	sbis	0x0c, 5	; 12
    4656:	0b c0       	rjmp	.+22     	; 0x466e <Check_Erors+0x1f6>
    4658:	8f 85       	ldd	r24, Y+15	; 0x0f
    465a:	81 30       	cpi	r24, 0x01	; 1
    465c:	41 f4       	brne	.+16     	; 0x466e <Check_Erors+0x1f6>
    465e:	fe 01       	movw	r30, r28
    4660:	ee 58       	subi	r30, 0x8E	; 142
    4662:	ff 4f       	sbci	r31, 0xFF	; 255
    4664:	80 81       	ld	r24, Z
    4666:	91 81       	ldd	r25, Z+1	; 0x01
    4668:	02 97       	sbiw	r24, 0x02	; 2
    466a:	09 f4       	brne	.+2      	; 0x466e <Check_Erors+0x1f6>
    466c:	b1 c0       	rjmp	.+354    	; 0x47d0 <Check_Erors+0x358>
		// else if ( comp->High_Press > 0){return (140+comp->Index);}
		// else if ( comp->Low_Press>0 ) {return (120+comp->Index);}
		 else if ( comp->Low_Press< EElimit->LP_Min ) {return (120+comp->Index);}
    466e:	f8 01       	movw	r30, r16
    4670:	e4 5a       	subi	r30, 0xA4	; 164
    4672:	ff 4f       	sbci	r31, 0xFF	; 255
    4674:	20 81       	ld	r18, Z
    4676:	31 81       	ldd	r19, Z+1	; 0x01
    4678:	42 81       	ldd	r20, Z+2	; 0x02
    467a:	53 81       	ldd	r21, Z+3	; 0x03
    467c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    467e:	7f 8d       	ldd	r23, Y+31	; 0x1f
    4680:	88 a1       	ldd	r24, Y+32	; 0x20
    4682:	99 a1       	ldd	r25, Y+33	; 0x21
    4684:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    4688:	88 23       	and	r24, r24
    468a:	3c f4       	brge	.+14     	; 0x469a <Check_Erors+0x222>
    468c:	ce 58       	subi	r28, 0x8E	; 142
    468e:	df 4f       	sbci	r29, 0xFF	; 255
    4690:	88 81       	ld	r24, Y
    4692:	99 81       	ldd	r25, Y+1	; 0x01
    4694:	88 58       	subi	r24, 0x88	; 136
    4696:	9f 4f       	sbci	r25, 0xFF	; 255
    4698:	c4 c0       	rjmp	.+392    	; 0x4822 <Check_Erors+0x3aa>
		 else if ( comp->High_Press > EElimit->HP_Max){return (140+comp->Index);}	
    469a:	f8 01       	movw	r30, r16
    469c:	66 81       	ldd	r22, Z+6	; 0x06
    469e:	70 e0       	ldi	r23, 0x00	; 0
    46a0:	80 e0       	ldi	r24, 0x00	; 0
    46a2:	90 e0       	ldi	r25, 0x00	; 0
    46a4:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    46a8:	9b 01       	movw	r18, r22
    46aa:	ac 01       	movw	r20, r24
    46ac:	6a 8d       	ldd	r22, Y+26	; 0x1a
    46ae:	7b 8d       	ldd	r23, Y+27	; 0x1b
    46b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    46b2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    46b4:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    46b8:	18 16       	cp	r1, r24
    46ba:	3c f4       	brge	.+14     	; 0x46ca <Check_Erors+0x252>
    46bc:	ce 58       	subi	r28, 0x8E	; 142
    46be:	df 4f       	sbci	r29, 0xFF	; 255
    46c0:	88 81       	ld	r24, Y
    46c2:	99 81       	ldd	r25, Y+1	; 0x01
    46c4:	84 57       	subi	r24, 0x74	; 116
    46c6:	9f 4f       	sbci	r25, 0xFF	; 255
    46c8:	ac c0       	rjmp	.+344    	; 0x4822 <Check_Erors+0x3aa>
		//else if ( comp->Bac_Temp < EElimit->Cool_Min && comp->Cooling==1){return (170+comp->Index);}
		//else if ( comp->SuperHeat < EElimit->MinSuperheat && comp->checkTrv) {return (180+comp->Index);}
		//else if ( comp->SuperHeat > EElimit->MaxSuperheat && comp->checkTrv && !comp->def) {return (190+comp->Index);}
		//else if ( comp->SuperCool < EElimit->MinSupercool && comp->checkTrv){return (200+comp->Index);}
		//else if ( comp->SuperCool > EElimit->MaxSupercool && comp->checkTrv && !comp->def){return (210+comp->Index);}
		else if ( comp->Ex_Comp > EElimit->ExhaustMax){return 220;}	
    46ca:	f8 01       	movw	r30, r16
    46cc:	66 85       	ldd	r22, Z+14	; 0x0e
    46ce:	70 e0       	ldi	r23, 0x00	; 0
    46d0:	80 e0       	ldi	r24, 0x00	; 0
    46d2:	90 e0       	ldi	r25, 0x00	; 0
    46d4:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    46d8:	9b 01       	movw	r18, r22
    46da:	ac 01       	movw	r20, r24
    46dc:	c3 01       	movw	r24, r6
    46de:	b2 01       	movw	r22, r4
    46e0:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    46e4:	18 16       	cp	r1, r24
    46e6:	0c f4       	brge	.+2      	; 0x46ea <Check_Erors+0x272>
    46e8:	76 c0       	rjmp	.+236    	; 0x47d6 <Check_Erors+0x35e>
		//else if (abs(comp->Src_In - comp->Src_Out) > EElimit->Delta_source_max && comp->checkErrors && EEpromData.AireToWater==0) {return (230+comp->Index);}
		//else if (abs(comp->Src_In - comp->Src_Out) <  EElimit->Delta_source_min && comp->checkErrors && EEpromData.AireToWater==0) {return (240+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out)  > EElimit->Delta_heating_max && comp->checkErrors) {return (250+comp->Index);}
    46ea:	a7 01       	movw	r20, r14
    46ec:	96 01       	movw	r18, r12
    46ee:	c5 01       	movw	r24, r10
    46f0:	b4 01       	movw	r22, r8
    46f2:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    46f6:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__fixsfsi>
    46fa:	9b 01       	movw	r18, r22
    46fc:	77 23       	and	r23, r23
    46fe:	24 f4       	brge	.+8      	; 0x4708 <Check_Erors+0x290>
    4700:	22 27       	eor	r18, r18
    4702:	33 27       	eor	r19, r19
    4704:	26 1b       	sub	r18, r22
    4706:	37 0b       	sbc	r19, r23
    4708:	c9 01       	movw	r24, r18
    470a:	f8 01       	movw	r30, r16
    470c:	24 89       	ldd	r18, Z+20	; 0x14
    470e:	30 e0       	ldi	r19, 0x00	; 0
    4710:	28 17       	cp	r18, r24
    4712:	39 07       	cpc	r19, r25
    4714:	54 f4       	brge	.+20     	; 0x472a <Check_Erors+0x2b2>
    4716:	8d 81       	ldd	r24, Y+5	; 0x05
    4718:	88 23       	and	r24, r24
    471a:	b9 f0       	breq	.+46     	; 0x474a <Check_Erors+0x2d2>
    471c:	ce 58       	subi	r28, 0x8E	; 142
    471e:	df 4f       	sbci	r29, 0xFF	; 255
    4720:	88 81       	ld	r24, Y
    4722:	99 81       	ldd	r25, Y+1	; 0x01
    4724:	86 50       	subi	r24, 0x06	; 6
    4726:	9f 4f       	sbci	r25, 0xFF	; 255
    4728:	7c c0       	rjmp	.+248    	; 0x4822 <Check_Erors+0x3aa>
		else if (abs(comp->Heat_In - comp->Heat_Out) < EElimit->Delta_heating_min &&  comp->checkErrors) {return (260+comp->Index);} 
    472a:	f8 01       	movw	r30, r16
    472c:	23 89       	ldd	r18, Z+19	; 0x13
    472e:	30 e0       	ldi	r19, 0x00	; 0
    4730:	82 17       	cp	r24, r18
    4732:	93 07       	cpc	r25, r19
    4734:	54 f4       	brge	.+20     	; 0x474a <Check_Erors+0x2d2>
    4736:	8d 81       	ldd	r24, Y+5	; 0x05
    4738:	88 23       	and	r24, r24
    473a:	39 f0       	breq	.+14     	; 0x474a <Check_Erors+0x2d2>
    473c:	ce 58       	subi	r28, 0x8E	; 142
    473e:	df 4f       	sbci	r29, 0xFF	; 255
    4740:	88 81       	ld	r24, Y
    4742:	99 81       	ldd	r25, Y+1	; 0x01
    4744:	8c 5f       	subi	r24, 0xFC	; 252
    4746:	9e 4f       	sbci	r25, 0xFE	; 254
    4748:	6c c0       	rjmp	.+216    	; 0x4822 <Check_Erors+0x3aa>
		else if (!(ADE7758_getStatus() & ZXA) && EElimit->Power_380==1 && comp->Index==1){return 271;} // ADE7758_resetStatus();
    474a:	90 de       	rcall	.-736    	; 0x446c <ADE7758_getStatus>
    474c:	71 fd       	sbrc	r23, 1
    474e:	0b c0       	rjmp	.+22     	; 0x4766 <Check_Erors+0x2ee>
    4750:	f8 01       	movw	r30, r16
    4752:	81 a5       	ldd	r24, Z+41	; 0x29
    4754:	81 30       	cpi	r24, 0x01	; 1
    4756:	39 f4       	brne	.+14     	; 0x4766 <Check_Erors+0x2ee>
    4758:	fe 01       	movw	r30, r28
    475a:	ee 58       	subi	r30, 0x8E	; 142
    475c:	ff 4f       	sbci	r31, 0xFF	; 255
    475e:	80 81       	ld	r24, Z
    4760:	91 81       	ldd	r25, Z+1	; 0x01
    4762:	01 97       	sbiw	r24, 0x01	; 1
		else if (!(ADE7758_getStatus() & ZXB) && EElimit->Power_380==1 && comp->Index==1){return 281;}//ADE7758_resetStatus();
    4764:	d9 f1       	breq	.+118    	; 0x47dc <Check_Erors+0x364>
    4766:	82 de       	rcall	.-764    	; 0x446c <ADE7758_getStatus>
    4768:	72 fd       	sbrc	r23, 2
    476a:	0b c0       	rjmp	.+22     	; 0x4782 <Check_Erors+0x30a>
    476c:	f8 01       	movw	r30, r16
    476e:	81 a5       	ldd	r24, Z+41	; 0x29
    4770:	81 30       	cpi	r24, 0x01	; 1
    4772:	39 f4       	brne	.+14     	; 0x4782 <Check_Erors+0x30a>
    4774:	fe 01       	movw	r30, r28
    4776:	ee 58       	subi	r30, 0x8E	; 142
    4778:	ff 4f       	sbci	r31, 0xFF	; 255
    477a:	80 81       	ld	r24, Z
    477c:	91 81       	ldd	r25, Z+1	; 0x01
    477e:	01 97       	sbiw	r24, 0x01	; 1
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 && comp->Index==1){return 291;}//ADE7758_resetStatus();
    4780:	81 f1       	breq	.+96     	; 0x47e2 <Check_Erors+0x36a>
    4782:	74 de       	rcall	.-792    	; 0x446c <ADE7758_getStatus>
    4784:	73 fd       	sbrc	r23, 3
    4786:	0b c0       	rjmp	.+22     	; 0x479e <Check_Erors+0x326>
    4788:	f8 01       	movw	r30, r16
    478a:	81 a5       	ldd	r24, Z+41	; 0x29
    478c:	81 30       	cpi	r24, 0x01	; 1
    478e:	39 f4       	brne	.+14     	; 0x479e <Check_Erors+0x326>
    4790:	fe 01       	movw	r30, r28
    4792:	ee 58       	subi	r30, 0x8E	; 142
    4794:	ff 4f       	sbci	r31, 0xFF	; 255
    4796:	80 81       	ld	r24, Z
    4798:	91 81       	ldd	r25, Z+1	; 0x01
    479a:	01 97       	sbiw	r24, 0x01	; 1
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1 && comp->Index==1){return 301;}//ADE7758_resetStatus();
    479c:	29 f1       	breq	.+74     	; 0x47e8 <Check_Erors+0x370>
    479e:	66 de       	rcall	.-820    	; 0x446c <ADE7758_getStatus>
    47a0:	83 fd       	sbrc	r24, 3
    47a2:	25 c0       	rjmp	.+74     	; 0x47ee <Check_Erors+0x376>
    47a4:	f8 01       	movw	r30, r16
    47a6:	81 a5       	ldd	r24, Z+41	; 0x29
    47a8:	81 30       	cpi	r24, 0x01	; 1
    47aa:	21 f5       	brne	.+72     	; 0x47f4 <Check_Erors+0x37c>
    47ac:	ce 58       	subi	r28, 0x8E	; 142
    47ae:	df 4f       	sbci	r29, 0xFF	; 255
    47b0:	88 81       	ld	r24, Y
    47b2:	99 81       	ldd	r25, Y+1	; 0x01
    47b4:	01 97       	sbiw	r24, 0x01	; 1
    47b6:	09 f5       	brne	.+66     	; 0x47fa <Check_Erors+0x382>
    47b8:	8d e2       	ldi	r24, 0x2D	; 45
    47ba:	91 e0       	ldi	r25, 0x01	; 1
    47bc:	32 c0       	rjmp	.+100    	; 0x4822 <Check_Erors+0x3aa>
		else if (comp->Src_Out<-100) {return (60+comp->Index);}
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
    47be:	85 e6       	ldi	r24, 0x65	; 101
    47c0:	90 e0       	ldi	r25, 0x00	; 0
    47c2:	2f c0       	rjmp	.+94     	; 0x4822 <Check_Erors+0x3aa>
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    47c4:	86 e6       	ldi	r24, 0x66	; 102
    47c6:	90 e0       	ldi	r25, 0x00	; 0
    47c8:	2c c0       	rjmp	.+88     	; 0x4822 <Check_Erors+0x3aa>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    47ca:	8f e6       	ldi	r24, 0x6F	; 111
    47cc:	90 e0       	ldi	r25, 0x00	; 0
    47ce:	29 c0       	rjmp	.+82     	; 0x4822 <Check_Erors+0x3aa>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    47d0:	80 e7       	ldi	r24, 0x70	; 112
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	26 c0       	rjmp	.+76     	; 0x4822 <Check_Erors+0x3aa>
		//else if ( comp->Bac_Temp < EElimit->Cool_Min && comp->Cooling==1){return (170+comp->Index);}
		//else if ( comp->SuperHeat < EElimit->MinSuperheat && comp->checkTrv) {return (180+comp->Index);}
		//else if ( comp->SuperHeat > EElimit->MaxSuperheat && comp->checkTrv && !comp->def) {return (190+comp->Index);}
		//else if ( comp->SuperCool < EElimit->MinSupercool && comp->checkTrv){return (200+comp->Index);}
		//else if ( comp->SuperCool > EElimit->MaxSupercool && comp->checkTrv && !comp->def){return (210+comp->Index);}
		else if ( comp->Ex_Comp > EElimit->ExhaustMax){return 220;}	
    47d6:	8c ed       	ldi	r24, 0xDC	; 220
    47d8:	90 e0       	ldi	r25, 0x00	; 0
    47da:	23 c0       	rjmp	.+70     	; 0x4822 <Check_Erors+0x3aa>
		//else if (abs(comp->Src_In - comp->Src_Out) > EElimit->Delta_source_max && comp->checkErrors && EEpromData.AireToWater==0) {return (230+comp->Index);}
		//else if (abs(comp->Src_In - comp->Src_Out) <  EElimit->Delta_source_min && comp->checkErrors && EEpromData.AireToWater==0) {return (240+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out)  > EElimit->Delta_heating_max && comp->checkErrors) {return (250+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out) < EElimit->Delta_heating_min &&  comp->checkErrors) {return (260+comp->Index);} 
		else if (!(ADE7758_getStatus() & ZXA) && EElimit->Power_380==1 && comp->Index==1){return 271;} // ADE7758_resetStatus();
    47dc:	8f e0       	ldi	r24, 0x0F	; 15
    47de:	91 e0       	ldi	r25, 0x01	; 1
    47e0:	20 c0       	rjmp	.+64     	; 0x4822 <Check_Erors+0x3aa>
		else if (!(ADE7758_getStatus() & ZXB) && EElimit->Power_380==1 && comp->Index==1){return 281;}//ADE7758_resetStatus();
    47e2:	89 e1       	ldi	r24, 0x19	; 25
    47e4:	91 e0       	ldi	r25, 0x01	; 1
    47e6:	1d c0       	rjmp	.+58     	; 0x4822 <Check_Erors+0x3aa>
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 && comp->Index==1){return 291;}//ADE7758_resetStatus();
    47e8:	83 e2       	ldi	r24, 0x23	; 35
    47ea:	91 e0       	ldi	r25, 0x01	; 1
    47ec:	1a c0       	rjmp	.+52     	; 0x4822 <Check_Erors+0x3aa>
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1 && comp->Index==1){return 301;}//ADE7758_resetStatus();
		//else if (comp->Src_In > EElimit->Source_Max){return (400+comp->Index);}
		//else if (comp->Src_In < EElimit->Source_Min){return (410+comp->Index);}			
		else {return 0;}
    47ee:	80 e0       	ldi	r24, 0x00	; 0
    47f0:	90 e0       	ldi	r25, 0x00	; 0
    47f2:	17 c0       	rjmp	.+46     	; 0x4822 <Check_Erors+0x3aa>
    47f4:	80 e0       	ldi	r24, 0x00	; 0
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	14 c0       	rjmp	.+40     	; 0x4822 <Check_Erors+0x3aa>
    47fa:	80 e0       	ldi	r24, 0x00	; 0
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	11 c0       	rjmp	.+34     	; 0x4822 <Check_Erors+0x3aa>
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    4800:	4b 99       	sbic	0x09, 3	; 9
    4802:	10 cf       	rjmp	.-480    	; 0x4624 <Check_Erors+0x1ac>
    4804:	08 c0       	rjmp	.+16     	; 0x4816 <Check_Erors+0x39e>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    4806:	65 99       	sbic	0x0c, 5	; 12
    4808:	1c cf       	rjmp	.-456    	; 0x4642 <Check_Erors+0x1ca>
    480a:	24 cf       	rjmp	.-440    	; 0x4654 <Check_Erors+0x1dc>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    480c:	8c b1       	in	r24, 0x0c	; 12
    480e:	2f cf       	rjmp	.-418    	; 0x466e <Check_Erors+0x1f6>
    4810:	65 99       	sbic	0x0c, 5	; 12
    4812:	25 cf       	rjmp	.-438    	; 0x465e <Check_Erors+0x1e6>
    4814:	2c cf       	rjmp	.-424    	; 0x466e <Check_Erors+0x1f6>
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    4816:	65 99       	sbic	0x0c, 5	; 12
    4818:	14 cf       	rjmp	.-472    	; 0x4642 <Check_Erors+0x1ca>
    481a:	1c cf       	rjmp	.-456    	; 0x4654 <Check_Erors+0x1dc>
    481c:	65 99       	sbic	0x0c, 5	; 12
    481e:	f6 cf       	rjmp	.-20     	; 0x480c <Check_Erors+0x394>
    4820:	19 cf       	rjmp	.-462    	; 0x4654 <Check_Erors+0x1dc>
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 && comp->Index==1){return 291;}//ADE7758_resetStatus();
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1 && comp->Index==1){return 301;}//ADE7758_resetStatus();
		//else if (comp->Src_In > EElimit->Source_Max){return (400+comp->Index);}
		//else if (comp->Src_In < EElimit->Source_Min){return (410+comp->Index);}			
		else {return 0;}
    4822:	df 91       	pop	r29
    4824:	cf 91       	pop	r28
    4826:	1f 91       	pop	r17
    4828:	0f 91       	pop	r16
    482a:	ff 90       	pop	r15
    482c:	ef 90       	pop	r14
    482e:	df 90       	pop	r13
    4830:	cf 90       	pop	r12
    4832:	bf 90       	pop	r11
    4834:	af 90       	pop	r10
    4836:	9f 90       	pop	r9
    4838:	8f 90       	pop	r8
    483a:	7f 90       	pop	r7
    483c:	6f 90       	pop	r6
    483e:	5f 90       	pop	r5
    4840:	4f 90       	pop	r4
    4842:	08 95       	ret

00004844 <start_1_Timer>:
	
	
}
void start_1_Timer()
{
	TIMSK1 |= (1<<OCIE1A);
    4844:	ef e6       	ldi	r30, 0x6F	; 111
    4846:	f0 e0       	ldi	r31, 0x00	; 0
    4848:	80 81       	ld	r24, Z
    484a:	82 60       	ori	r24, 0x02	; 2
    484c:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11);//1<<CS10 |
    484e:	e1 e8       	ldi	r30, 0x81	; 129
    4850:	f0 e0       	ldi	r31, 0x00	; 0
    4852:	80 81       	ld	r24, Z
    4854:	82 60       	ori	r24, 0x02	; 2
    4856:	80 83       	st	Z, r24
    4858:	08 95       	ret

0000485a <stop_1_Timer>:
	
}
void stop_1_Timer()
{
	TCCR1B &= ~ (1<<CS10);
    485a:	e1 e8       	ldi	r30, 0x81	; 129
    485c:	f0 e0       	ldi	r31, 0x00	; 0
    485e:	80 81       	ld	r24, Z
    4860:	8e 7f       	andi	r24, 0xFE	; 254
    4862:	80 83       	st	Z, r24
	TCNT1=0;
    4864:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    4868:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TIMSK1 &= ~( _BV( OCIE1A ) );
    486c:	ef e6       	ldi	r30, 0x6F	; 111
    486e:	f0 e0       	ldi	r31, 0x00	; 0
    4870:	80 81       	ld	r24, Z
    4872:	8d 7f       	andi	r24, 0xFD	; 253
    4874:	80 83       	st	Z, r24
	TIFR1 |= _BV( OCF1A );
    4876:	b1 9a       	sbi	0x16, 1	; 22
    4878:	08 95       	ret

0000487a <timer_1_Init>:
void timer_1_Init()
{
	// --- TIMER1_COMPA irq ---
	// selected time = 1562 us (24992 ticks)
	// prescaler = 1 (1 ticks ... 4.096 ms)
	TCCR1B = (1<<WGM12);//|(1<<CS10)
    487a:	88 e0       	ldi	r24, 0x08	; 8
    487c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	OCR1AH = 158 ;//158
    4880:	8e e9       	ldi	r24, 0x9E	; 158
    4882:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL =96;//96
    4886:	80 e6       	ldi	r24, 0x60	; 96
    4888:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	stop_1_Timer();
    488c:	e6 cf       	rjmp	.-52     	; 0x485a <stop_1_Timer>
    488e:	08 95       	ret

00004890 <readSysReg>:
	TIMSK1 &= ~( _BV( OCIE1A ) );
	TIFR1 |= _BV( OCF1A );
}

int readSysReg(xCompressor*compPtr,xEEdata *eeprom,uint16_t adress)
{
    4890:	cf 93       	push	r28
    4892:	df 93       	push	r29
	int temp;
	switch(adress)
    4894:	fa 01       	movw	r30, r20
    4896:	3a 97       	sbiw	r30, 0x0a	; 10
    4898:	e7 3d       	cpi	r30, 0xD7	; 215
    489a:	41 e0       	ldi	r20, 0x01	; 1
    489c:	f4 07       	cpc	r31, r20
    489e:	08 f0       	brcs	.+2      	; 0x48a2 <readSysReg+0x12>
    48a0:	11 c2       	rjmp	.+1058   	; 0x4cc4 <readSysReg+0x434>
    48a2:	eb 01       	movw	r28, r22
    48a4:	dc 01       	movw	r26, r24
    48a6:	88 27       	eor	r24, r24
    48a8:	e4 56       	subi	r30, 0x64	; 100
    48aa:	ff 4f       	sbci	r31, 0xFF	; 255
    48ac:	8f 4f       	sbci	r24, 0xFF	; 255
    48ae:	0c 94 63 59 	jmp	0xb2c6	; 0xb2c6 <__tablejump2__>
	{
		case 11: case 12: temp =  (int)   compPtr->compOn;break;
    48b2:	1b 96       	adiw	r26, 0x0b	; 11
    48b4:	6c 91       	ld	r22, X
    48b6:	26 2f       	mov	r18, r22
    48b8:	30 e0       	ldi	r19, 0x00	; 0
    48ba:	04 c2       	rjmp	.+1032   	; 0x4cc4 <readSysReg+0x434>
		case 21: case 22: temp =   (int)  compPtr->srcPOn;break;
    48bc:	1f 96       	adiw	r26, 0x0f	; 15
    48be:	6c 91       	ld	r22, X
    48c0:	26 2f       	mov	r18, r22
    48c2:	30 e0       	ldi	r19, 0x00	; 0
    48c4:	ff c1       	rjmp	.+1022   	; 0x4cc4 <readSysReg+0x434>
		case 31: case 32: temp =   (int)  compPtr->heatPOn;break;
    48c6:	1c 96       	adiw	r26, 0x0c	; 12
    48c8:	6c 91       	ld	r22, X
    48ca:	26 2f       	mov	r18, r22
    48cc:	30 e0       	ldi	r19, 0x00	; 0
    48ce:	fa c1       	rjmp	.+1012   	; 0x4cc4 <readSysReg+0x434>
		case 41: case 42: temp =   (int)  compPtr->revVOn;break;
    48d0:	1e 96       	adiw	r26, 0x0e	; 14
    48d2:	6c 91       	ld	r22, X
    48d4:	26 2f       	mov	r18, r22
    48d6:	30 e0       	ldi	r19, 0x00	; 0
    48d8:	f5 c1       	rjmp	.+1002   	; 0x4cc4 <readSysReg+0x434>
		case 51: case 52: temp =   (int)  compPtr->threeWOn;break;
    48da:	1d 96       	adiw	r26, 0x0d	; 13
    48dc:	6c 91       	ld	r22, X
    48de:	26 2f       	mov	r18, r22
    48e0:	30 e0       	ldi	r19, 0x00	; 0
    48e2:	f0 c1       	rjmp	.+992    	; 0x4cc4 <readSysReg+0x434>
		case 61: case 62: temp =   (int)  compPtr->Trv_position;break;
    48e4:	a2 59       	subi	r26, 0x92	; 146
    48e6:	bf 4f       	sbci	r27, 0xFF	; 255
    48e8:	2d 91       	ld	r18, X+
    48ea:	3c 91       	ld	r19, X
    48ec:	eb c1       	rjmp	.+982    	; 0x4cc4 <readSysReg+0x434>
		
		case 71: case 72: temp =   (int)   (compPtr->Bac_Temp*10);break;
    48ee:	20 e0       	ldi	r18, 0x00	; 0
    48f0:	30 e0       	ldi	r19, 0x00	; 0
    48f2:	40 e2       	ldi	r20, 0x20	; 32
    48f4:	51 e4       	ldi	r21, 0x41	; 65
    48f6:	56 96       	adiw	r26, 0x16	; 22
    48f8:	6d 91       	ld	r22, X+
    48fa:	7d 91       	ld	r23, X+
    48fc:	8d 91       	ld	r24, X+
    48fe:	9c 91       	ld	r25, X
    4900:	59 97       	sbiw	r26, 0x19	; 25
    4902:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    4906:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__fixsfsi>
    490a:	9b 01       	movw	r18, r22
    490c:	db c1       	rjmp	.+950    	; 0x4cc4 <readSysReg+0x434>
		case 81: case 82:  temp =   (int)  (compPtr->Dhw_Temp*10);break;
    490e:	20 e0       	ldi	r18, 0x00	; 0
    4910:	30 e0       	ldi	r19, 0x00	; 0
    4912:	40 e2       	ldi	r20, 0x20	; 32
    4914:	51 e4       	ldi	r21, 0x41	; 65
    4916:	52 96       	adiw	r26, 0x12	; 18
    4918:	6d 91       	ld	r22, X+
    491a:	7d 91       	ld	r23, X+
    491c:	8d 91       	ld	r24, X+
    491e:	9c 91       	ld	r25, X
    4920:	55 97       	sbiw	r26, 0x15	; 21
    4922:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    4926:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__fixsfsi>
    492a:	9b 01       	movw	r18, r22
    492c:	cb c1       	rjmp	.+918    	; 0x4cc4 <readSysReg+0x434>
		case 91:case 92:  temp =  (int)  (compPtr->Src_In*10);break;
    492e:	20 e0       	ldi	r18, 0x00	; 0
    4930:	30 e0       	ldi	r19, 0x00	; 0
    4932:	40 e2       	ldi	r20, 0x20	; 32
    4934:	51 e4       	ldi	r21, 0x41	; 65
    4936:	d2 96       	adiw	r26, 0x32	; 50
    4938:	6d 91       	ld	r22, X+
    493a:	7d 91       	ld	r23, X+
    493c:	8d 91       	ld	r24, X+
    493e:	9c 91       	ld	r25, X
    4940:	d5 97       	sbiw	r26, 0x35	; 53
    4942:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    4946:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__fixsfsi>
    494a:	9b 01       	movw	r18, r22
    494c:	bb c1       	rjmp	.+886    	; 0x4cc4 <readSysReg+0x434>
		case 101:case 102:  temp =  (int)  (compPtr->Src_Out*10);break;
    494e:	20 e0       	ldi	r18, 0x00	; 0
    4950:	30 e0       	ldi	r19, 0x00	; 0
    4952:	40 e2       	ldi	r20, 0x20	; 32
    4954:	51 e4       	ldi	r21, 0x41	; 65
    4956:	d6 96       	adiw	r26, 0x36	; 54
    4958:	6d 91       	ld	r22, X+
    495a:	7d 91       	ld	r23, X+
    495c:	8d 91       	ld	r24, X+
    495e:	9c 91       	ld	r25, X
    4960:	d9 97       	sbiw	r26, 0x39	; 57
    4962:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    4966:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__fixsfsi>
    496a:	9b 01       	movw	r18, r22
    496c:	ab c1       	rjmp	.+854    	; 0x4cc4 <readSysReg+0x434>
		case 111:case 112: temp =   (int)  (compPtr->error);break;
    496e:	a0 59       	subi	r26, 0x90	; 144
    4970:	bf 4f       	sbci	r27, 0xFF	; 255
    4972:	2d 91       	ld	r18, X+
    4974:	3c 91       	ld	r19, X
    4976:	a6 c1       	rjmp	.+844    	; 0x4cc4 <readSysReg+0x434>
		case 121: case 122: temp =   (int)   (compPtr->Cond_Temp*10);break;
    4978:	ae 5b       	subi	r26, 0xBE	; 190
    497a:	bf 4f       	sbci	r27, 0xFF	; 255
    497c:	20 e0       	ldi	r18, 0x00	; 0
    497e:	30 e0       	ldi	r19, 0x00	; 0
    4980:	40 e2       	ldi	r20, 0x20	; 32
    4982:	51 e4       	ldi	r21, 0x41	; 65
    4984:	6d 91       	ld	r22, X+
    4986:	7d 91       	ld	r23, X+
    4988:	8d 91       	ld	r24, X+
    498a:	9c 91       	ld	r25, X
    498c:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    4990:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__fixsfsi>
    4994:	9b 01       	movw	r18, r22
    4996:	96 c1       	rjmp	.+812    	; 0x4cc4 <readSysReg+0x434>
		case 131:case 132: temp =   (int)  (compPtr->Suc_Comp*10);break;
    4998:	de 96       	adiw	r26, 0x3e	; 62
    499a:	20 e0       	ldi	r18, 0x00	; 0
    499c:	30 e0       	ldi	r19, 0x00	; 0
    499e:	40 e2       	ldi	r20, 0x20	; 32
    49a0:	51 e4       	ldi	r21, 0x41	; 65
    49a2:	6d 91       	ld	r22, X+
    49a4:	7d 91       	ld	r23, X+
    49a6:	8d 91       	ld	r24, X+
    49a8:	9c 91       	ld	r25, X
    49aa:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    49ae:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__fixsfsi>
    49b2:	9b 01       	movw	r18, r22
    49b4:	87 c1       	rjmp	.+782    	; 0x4cc4 <readSysReg+0x434>
		case 141:case 142: temp =   (int)  (compPtr->SuperCool*10);break;
    49b6:	a6 5b       	subi	r26, 0xB6	; 182
    49b8:	bf 4f       	sbci	r27, 0xFF	; 255
    49ba:	20 e0       	ldi	r18, 0x00	; 0
    49bc:	30 e0       	ldi	r19, 0x00	; 0
    49be:	40 e2       	ldi	r20, 0x20	; 32
    49c0:	51 e4       	ldi	r21, 0x41	; 65
    49c2:	6d 91       	ld	r22, X+
    49c4:	7d 91       	ld	r23, X+
    49c6:	8d 91       	ld	r24, X+
    49c8:	9c 91       	ld	r25, X
    49ca:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    49ce:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__fixsfsi>
    49d2:	9b 01       	movw	r18, r22
    49d4:	77 c1       	rjmp	.+750    	; 0x4cc4 <readSysReg+0x434>
		case 151:case 152: temp =   (int)  (compPtr->SuperHeat*10);break;
    49d6:	aa 5b       	subi	r26, 0xBA	; 186
    49d8:	bf 4f       	sbci	r27, 0xFF	; 255
    49da:	20 e0       	ldi	r18, 0x00	; 0
    49dc:	30 e0       	ldi	r19, 0x00	; 0
    49de:	40 e2       	ldi	r20, 0x20	; 32
    49e0:	51 e4       	ldi	r21, 0x41	; 65
    49e2:	6d 91       	ld	r22, X+
    49e4:	7d 91       	ld	r23, X+
    49e6:	8d 91       	ld	r24, X+
    49e8:	9c 91       	ld	r25, X
    49ea:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    49ee:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__fixsfsi>
    49f2:	9b 01       	movw	r18, r22
    49f4:	67 c1       	rjmp	.+718    	; 0x4cc4 <readSysReg+0x434>
		case 161:case 162:  temp =  (int)  (compPtr->Heat_In*10);break;
    49f6:	20 e0       	ldi	r18, 0x00	; 0
    49f8:	30 e0       	ldi	r19, 0x00	; 0
    49fa:	40 e2       	ldi	r20, 0x20	; 32
    49fc:	51 e4       	ldi	r21, 0x41	; 65
    49fe:	9e 96       	adiw	r26, 0x2e	; 46
    4a00:	6d 91       	ld	r22, X+
    4a02:	7d 91       	ld	r23, X+
    4a04:	8d 91       	ld	r24, X+
    4a06:	9c 91       	ld	r25, X
    4a08:	d1 97       	sbiw	r26, 0x31	; 49
    4a0a:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    4a0e:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__fixsfsi>
    4a12:	9b 01       	movw	r18, r22
    4a14:	57 c1       	rjmp	.+686    	; 0x4cc4 <readSysReg+0x434>
		case 171:case 172:  temp =  (int)  (compPtr->Heat_Out*10);break;		
    4a16:	20 e0       	ldi	r18, 0x00	; 0
    4a18:	30 e0       	ldi	r19, 0x00	; 0
    4a1a:	40 e2       	ldi	r20, 0x20	; 32
    4a1c:	51 e4       	ldi	r21, 0x41	; 65
    4a1e:	9a 96       	adiw	r26, 0x2a	; 42
    4a20:	6d 91       	ld	r22, X+
    4a22:	7d 91       	ld	r23, X+
    4a24:	8d 91       	ld	r24, X+
    4a26:	9c 91       	ld	r25, X
    4a28:	9d 97       	sbiw	r26, 0x2d	; 45
    4a2a:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    4a2e:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__fixsfsi>
    4a32:	9b 01       	movw	r18, r22
    4a34:	47 c1       	rjmp	.+654    	; 0x4cc4 <readSysReg+0x434>
		case 181:case 182: temp =   (int)  (compPtr->High_Press*10);break;
    4a36:	20 e0       	ldi	r18, 0x00	; 0
    4a38:	30 e0       	ldi	r19, 0x00	; 0
    4a3a:	40 e2       	ldi	r20, 0x20	; 32
    4a3c:	51 e4       	ldi	r21, 0x41	; 65
    4a3e:	5a 96       	adiw	r26, 0x1a	; 26
    4a40:	6d 91       	ld	r22, X+
    4a42:	7d 91       	ld	r23, X+
    4a44:	8d 91       	ld	r24, X+
    4a46:	9c 91       	ld	r25, X
    4a48:	5d 97       	sbiw	r26, 0x1d	; 29
    4a4a:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    4a4e:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__fixsfsi>
    4a52:	9b 01       	movw	r18, r22
    4a54:	37 c1       	rjmp	.+622    	; 0x4cc4 <readSysReg+0x434>
		case 191:case 192: temp =   (int)  (compPtr->Low_Press*10);break;
    4a56:	20 e0       	ldi	r18, 0x00	; 0
    4a58:	30 e0       	ldi	r19, 0x00	; 0
    4a5a:	40 e2       	ldi	r20, 0x20	; 32
    4a5c:	51 e4       	ldi	r21, 0x41	; 65
    4a5e:	5e 96       	adiw	r26, 0x1e	; 30
    4a60:	6d 91       	ld	r22, X+
    4a62:	7d 91       	ld	r23, X+
    4a64:	8d 91       	ld	r24, X+
    4a66:	9c 91       	ld	r25, X
    4a68:	91 97       	sbiw	r26, 0x21	; 33
    4a6a:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    4a6e:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__fixsfsi>
    4a72:	9b 01       	movw	r18, r22
    4a74:	27 c1       	rjmp	.+590    	; 0x4cc4 <readSysReg+0x434>
		case 201:case 202: temp =   (int)  (compPtr->Ex_Comp);break;
    4a76:	da 96       	adiw	r26, 0x3a	; 58
    4a78:	6d 91       	ld	r22, X+
    4a7a:	7d 91       	ld	r23, X+
    4a7c:	8d 91       	ld	r24, X+
    4a7e:	9c 91       	ld	r25, X
    4a80:	dd 97       	sbiw	r26, 0x3d	; 61
    4a82:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__fixsfsi>
    4a86:	9b 01       	movw	r18, r22
    4a88:	1d c1       	rjmp	.+570    	; 0x4cc4 <readSysReg+0x434>
		
	
		
		//-----------------------------------eeprom--------
		case 10:  temp =    eeprom->Compressor_delay;break;
    4a8a:	68 81       	ld	r22, Y
    4a8c:	26 2f       	mov	r18, r22
    4a8e:	30 e0       	ldi	r19, 0x00	; 0
    4a90:	19 c1       	rjmp	.+562    	; 0x4cc4 <readSysReg+0x434>
		case 20:  temp =    eeprom->HeatingPump_delay;break;
    4a92:	6b 81       	ldd	r22, Y+3	; 0x03
    4a94:	26 2f       	mov	r18, r22
    4a96:	30 e0       	ldi	r19, 0x00	; 0
    4a98:	15 c1       	rjmp	.+554    	; 0x4cc4 <readSysReg+0x434>
		case 30:  temp =    eeprom->Source_Pump_delay;break;
    4a9a:	69 81       	ldd	r22, Y+1	; 0x01
    4a9c:	26 2f       	mov	r18, r22
    4a9e:	30 e0       	ldi	r19, 0x00	; 0
    4aa0:	11 c1       	rjmp	.+546    	; 0x4cc4 <readSysReg+0x434>
		case 40:  temp =    eeprom->Revers_Valve_delay;break;
    4aa2:	6a 81       	ldd	r22, Y+2	; 0x02
    4aa4:	26 2f       	mov	r18, r22
    4aa6:	30 e0       	ldi	r19, 0x00	; 0
    4aa8:	0d c1       	rjmp	.+538    	; 0x4cc4 <readSysReg+0x434>
		case 50:  temp =    eeprom->Three_Way_delay;break;
    4aaa:	6c 81       	ldd	r22, Y+4	; 0x04
    4aac:	26 2f       	mov	r18, r22
    4aae:	30 e0       	ldi	r19, 0x00	; 0
    4ab0:	09 c1       	rjmp	.+530    	; 0x4cc4 <readSysReg+0x434>
		case 60:  temp =    (int)  eeprom->Cool_Max;break;
    4ab2:	6c 85       	ldd	r22, Y+12	; 0x0c
    4ab4:	26 2f       	mov	r18, r22
    4ab6:	30 e0       	ldi	r19, 0x00	; 0
    4ab8:	05 c1       	rjmp	.+522    	; 0x4cc4 <readSysReg+0x434>
		case 70:  temp =    (int)  eeprom->Cool_Min;break;
    4aba:	6d 85       	ldd	r22, Y+13	; 0x0d
    4abc:	26 2f       	mov	r18, r22
    4abe:	30 e0       	ldi	r19, 0x00	; 0
    4ac0:	01 c1       	rjmp	.+514    	; 0x4cc4 <readSysReg+0x434>
		case 80:  temp =    (int)  eeprom->HEAT_Max;break;
    4ac2:	69 85       	ldd	r22, Y+9	; 0x09
    4ac4:	26 2f       	mov	r18, r22
    4ac6:	30 e0       	ldi	r19, 0x00	; 0
    4ac8:	fd c0       	rjmp	.+506    	; 0x4cc4 <readSysReg+0x434>
		case 90:  temp =    (int)  eeprom->HEAT_Min;break;
    4aca:	6a 85       	ldd	r22, Y+10	; 0x0a
    4acc:	26 2f       	mov	r18, r22
    4ace:	30 e0       	ldi	r19, 0x00	; 0
    4ad0:	f9 c0       	rjmp	.+498    	; 0x4cc4 <readSysReg+0x434>
		case 100: temp =    (int)  eeprom->Delta_heating_max;break;
    4ad2:	6c 89       	ldd	r22, Y+20	; 0x14
    4ad4:	26 2f       	mov	r18, r22
    4ad6:	30 e0       	ldi	r19, 0x00	; 0
    4ad8:	f5 c0       	rjmp	.+490    	; 0x4cc4 <readSysReg+0x434>
		case 110: temp =    (int)  eeprom->Delta_heating_min;break;
    4ada:	6b 89       	ldd	r22, Y+19	; 0x13
    4adc:	26 2f       	mov	r18, r22
    4ade:	30 e0       	ldi	r19, 0x00	; 0
    4ae0:	f1 c0       	rjmp	.+482    	; 0x4cc4 <readSysReg+0x434>
		case 120: temp =    (int)  eeprom->Delta_source_max;break;
    4ae2:	6e 89       	ldd	r22, Y+22	; 0x16
    4ae4:	26 2f       	mov	r18, r22
    4ae6:	30 e0       	ldi	r19, 0x00	; 0
    4ae8:	ed c0       	rjmp	.+474    	; 0x4cc4 <readSysReg+0x434>
		case 130: temp =    (int)  eeprom->Delta_source_min;break;
    4aea:	6d 89       	ldd	r22, Y+21	; 0x15
    4aec:	26 2f       	mov	r18, r22
    4aee:	30 e0       	ldi	r19, 0x00	; 0
    4af0:	e9 c0       	rjmp	.+466    	; 0x4cc4 <readSysReg+0x434>
		case 140: temp =    (int)  eeprom->diffCOOL;break;
    4af2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4af4:	26 2f       	mov	r18, r22
    4af6:	30 e0       	ldi	r19, 0x00	; 0
    4af8:	e5 c0       	rjmp	.+458    	; 0x4cc4 <readSysReg+0x434>
		case 150: temp =    (int)  eeprom->diffDHW ;break;
    4afa:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4afc:	26 2f       	mov	r18, r22
    4afe:	30 e0       	ldi	r19, 0x00	; 0
    4b00:	e1 c0       	rjmp	.+450    	; 0x4cc4 <readSysReg+0x434>
		case 160: temp =    (int)  eeprom->diffHEAT;break;
    4b02:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4b04:	26 2f       	mov	r18, r22
    4b06:	30 e0       	ldi	r19, 0x00	; 0
    4b08:	dd c0       	rjmp	.+442    	; 0x4cc4 <readSysReg+0x434>
		case 170: temp =    (int)  eeprom->AireToWater;break;
    4b0a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4b0c:	26 2f       	mov	r18, r22
    4b0e:	30 e0       	ldi	r19, 0x00	; 0
    4b10:	d9 c0       	rjmp	.+434    	; 0x4cc4 <readSysReg+0x434>
		case 180: temp =    (int)  eeprom->ExhaustMax;break;
    4b12:	6e 85       	ldd	r22, Y+14	; 0x0e
    4b14:	26 2f       	mov	r18, r22
    4b16:	30 e0       	ldi	r19, 0x00	; 0
    4b18:	d5 c0       	rjmp	.+426    	; 0x4cc4 <readSysReg+0x434>
		case 190: temp =    (int)  eeprom->cool;break;
    4b1a:	6f a1       	ldd	r22, Y+39	; 0x27
    4b1c:	26 2f       	mov	r18, r22
    4b1e:	30 e0       	ldi	r19, 0x00	; 0
    4b20:	d1 c0       	rjmp	.+418    	; 0x4cc4 <readSysReg+0x434>
		case 200: temp =    (int)  eeprom->heat;break;
    4b22:	6e a1       	ldd	r22, Y+38	; 0x26
    4b24:	26 2f       	mov	r18, r22
    4b26:	30 e0       	ldi	r19, 0x00	; 0
    4b28:	cd c0       	rjmp	.+410    	; 0x4cc4 <readSysReg+0x434>
		case 210: temp =    (int)  eeprom->heatWater;break;
    4b2a:	6d a1       	ldd	r22, Y+37	; 0x25
    4b2c:	26 2f       	mov	r18, r22
    4b2e:	30 e0       	ldi	r19, 0x00	; 0
    4b30:	c9 c0       	rjmp	.+402    	; 0x4cc4 <readSysReg+0x434>
		case 220: temp =    (int)  eeprom->HP_Max;break;
    4b32:	6e 81       	ldd	r22, Y+6	; 0x06
    4b34:	26 2f       	mov	r18, r22
    4b36:	30 e0       	ldi	r19, 0x00	; 0
    4b38:	c5 c0       	rjmp	.+394    	; 0x4cc4 <readSysReg+0x434>
		case 230: temp =    (int)  eeprom->LP_Max;break;
    4b3a:	68 85       	ldd	r22, Y+8	; 0x08
    4b3c:	26 2f       	mov	r18, r22
    4b3e:	30 e0       	ldi	r19, 0x00	; 0
    4b40:	c1 c0       	rjmp	.+386    	; 0x4cc4 <readSysReg+0x434>
		case 240: temp =    (int)  eeprom->HP_Min;break;
    4b42:	6f 81       	ldd	r22, Y+7	; 0x07
    4b44:	26 2f       	mov	r18, r22
    4b46:	30 e0       	ldi	r19, 0x00	; 0
    4b48:	bd c0       	rjmp	.+378    	; 0x4cc4 <readSysReg+0x434>
		case 250: temp =    (int)  eeprom->LP_Min;break;
    4b4a:	fb 01       	movw	r30, r22
    4b4c:	e4 5a       	subi	r30, 0xA4	; 164
    4b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b50:	60 81       	ld	r22, Z
    4b52:	71 81       	ldd	r23, Z+1	; 0x01
    4b54:	82 81       	ldd	r24, Z+2	; 0x02
    4b56:	93 81       	ldd	r25, Z+3	; 0x03
    4b58:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__fixsfsi>
    4b5c:	9b 01       	movw	r18, r22
    4b5e:	b2 c0       	rjmp	.+356    	; 0x4cc4 <readSysReg+0x434>
		case 260: temp =    (int)  eeprom->MaxSupercool;break;
    4b60:	6a 89       	ldd	r22, Y+18	; 0x12
    4b62:	26 2f       	mov	r18, r22
    4b64:	30 e0       	ldi	r19, 0x00	; 0
    4b66:	ae c0       	rjmp	.+348    	; 0x4cc4 <readSysReg+0x434>
		case 270: temp =    (int)  eeprom->MinSupercool;break;
    4b68:	69 89       	ldd	r22, Y+17	; 0x11
    4b6a:	26 2f       	mov	r18, r22
    4b6c:	30 e0       	ldi	r19, 0x00	; 0
    4b6e:	aa c0       	rjmp	.+340    	; 0x4cc4 <readSysReg+0x434>
		case 280: temp =    (int)  eeprom->MaxSuperheat;break;
    4b70:	68 89       	ldd	r22, Y+16	; 0x10
    4b72:	26 2f       	mov	r18, r22
    4b74:	30 e0       	ldi	r19, 0x00	; 0
    4b76:	a6 c0       	rjmp	.+332    	; 0x4cc4 <readSysReg+0x434>
		case 290: temp =    (int)  eeprom->MinSuperheat;break;
    4b78:	6f 85       	ldd	r22, Y+15	; 0x0f
    4b7a:	26 2f       	mov	r18, r22
    4b7c:	30 e0       	ldi	r19, 0x00	; 0
    4b7e:	a2 c0       	rjmp	.+324    	; 0x4cc4 <readSysReg+0x434>
		case 300: temp =    (int)  eeprom->number_turnon_threeway;break;
    4b80:	fb 01       	movw	r30, r22
    4b82:	ea 5b       	subi	r30, 0xBA	; 186
    4b84:	ff 4f       	sbci	r31, 0xFF	; 255
    4b86:	20 81       	ld	r18, Z
    4b88:	31 81       	ldd	r19, Z+1	; 0x01
    4b8a:	9c c0       	rjmp	.+312    	; 0x4cc4 <readSysReg+0x434>
		case 310: temp =    (int)  eeprom->power;break;
    4b8c:	6c a1       	ldd	r22, Y+36	; 0x24
    4b8e:	26 2f       	mov	r18, r22
    4b90:	30 e0       	ldi	r19, 0x00	; 0
    4b92:	98 c0       	rjmp	.+304    	; 0x4cc4 <readSysReg+0x434>
		case 320: temp =    (int)  eeprom->Set_Cooling;break;
    4b94:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4b96:	26 2f       	mov	r18, r22
    4b98:	30 e0       	ldi	r19, 0x00	; 0
    4b9a:	94 c0       	rjmp	.+296    	; 0x4cc4 <readSysReg+0x434>
		case 330: temp =    (int)  eeprom->Set_DHW;break;
    4b9c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    4b9e:	26 2f       	mov	r18, r22
    4ba0:	30 e0       	ldi	r19, 0x00	; 0
    4ba2:	90 c0       	rjmp	.+288    	; 0x4cc4 <readSysReg+0x434>
		case 340: temp =    (int)  eeprom->Set_Heating;break;
    4ba4:	69 8d       	ldd	r22, Y+25	; 0x19
    4ba6:	26 2f       	mov	r18, r22
    4ba8:	30 e0       	ldi	r19, 0x00	; 0
    4baa:	8c c0       	rjmp	.+280    	; 0x4cc4 <readSysReg+0x434>
		case 350: temp =    (int)  eeprom->TempDef;break;
    4bac:	2a a5       	ldd	r18, Y+42	; 0x2a
    4bae:	3b a5       	ldd	r19, Y+43	; 0x2b
    4bb0:	89 c0       	rjmp	.+274    	; 0x4cc4 <readSysReg+0x434>
		case 360: temp =    (int)  eeprom->TimeDef;break;
    4bb2:	69 a1       	ldd	r22, Y+33	; 0x21
    4bb4:	26 2f       	mov	r18, r22
    4bb6:	30 e0       	ldi	r19, 0x00	; 0
    4bb8:	85 c0       	rjmp	.+266    	; 0x4cc4 <readSysReg+0x434>
		
		
		case 370: temp =    (int)  eeprom->TempOut;break;
    4bba:	2e a5       	ldd	r18, Y+46	; 0x2e
    4bbc:	3f a5       	ldd	r19, Y+47	; 0x2f
    4bbe:	82 c0       	rjmp	.+260    	; 0x4cc4 <readSysReg+0x434>
		case 380: temp =    (int)  eeprom->TempStopDef;break;
    4bc0:	2c a5       	ldd	r18, Y+44	; 0x2c
    4bc2:	3d a5       	ldd	r19, Y+45	; 0x2d
    4bc4:	7f c0       	rjmp	.+254    	; 0x4cc4 <readSysReg+0x434>
		case 390: temp =    (int)  eeprom->time_threeway;break;
    4bc6:	2c ad       	ldd	r18, Y+60	; 0x3c
    4bc8:	3d ad       	ldd	r19, Y+61	; 0x3d
    4bca:	7c c0       	rjmp	.+248    	; 0x4cc4 <readSysReg+0x434>
		case 400: temp =    (int)  eeprom->NombComp;break;
    4bcc:	68 a1       	ldd	r22, Y+32	; 0x20
    4bce:	26 2f       	mov	r18, r22
    4bd0:	30 e0       	ldi	r19, 0x00	; 0
    4bd2:	78 c0       	rjmp	.+240    	; 0x4cc4 <readSysReg+0x434>
		case 410: temp =    (int)  eeprom->reversMod;break;
    4bd4:	68 a5       	ldd	r22, Y+40	; 0x28
    4bd6:	26 2f       	mov	r18, r22
    4bd8:	30 e0       	ldi	r19, 0x00	; 0
    4bda:	74 c0       	rjmp	.+232    	; 0x4cc4 <readSysReg+0x434>
		case 420: temp =    (int)  eeprom->TRV_Delay;break;
    4bdc:	6d 81       	ldd	r22, Y+5	; 0x05
    4bde:	26 2f       	mov	r18, r22
    4be0:	30 e0       	ldi	r19, 0x00	; 0
    4be2:	70 c0       	rjmp	.+224    	; 0x4cc4 <readSysReg+0x434>
		case 430: temp =    (int)  eeprom->Source_Max;break;
    4be4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4be6:	26 2f       	mov	r18, r22
    4be8:	30 e0       	ldi	r19, 0x00	; 0
    4bea:	6c c0       	rjmp	.+216    	; 0x4cc4 <readSysReg+0x434>
		case 440: temp =    (int)  eeprom->Source_Min;break;
    4bec:	28 a9       	ldd	r18, Y+48	; 0x30
    4bee:	39 a9       	ldd	r19, Y+49	; 0x31
    4bf0:	69 c0       	rjmp	.+210    	; 0x4cc4 <readSysReg+0x434>
		case 450: temp =    (int)  eeprom->Delta_dhw_max;break;
    4bf2:	68 8d       	ldd	r22, Y+24	; 0x18
    4bf4:	26 2f       	mov	r18, r22
    4bf6:	30 e0       	ldi	r19, 0x00	; 0
    4bf8:	65 c0       	rjmp	.+202    	; 0x4cc4 <readSysReg+0x434>
		case 460: temp =    (int)  eeprom->Delta_dhw_min;break;
    4bfa:	6f 89       	ldd	r22, Y+23	; 0x17
    4bfc:	26 2f       	mov	r18, r22
    4bfe:	30 e0       	ldi	r19, 0x00	; 0
    4c00:	61 c0       	rjmp	.+194    	; 0x4cc4 <readSysReg+0x434>
		case 470: temp =    (int)  eeprom->Power_380;break;
    4c02:	69 a5       	ldd	r22, Y+41	; 0x29
    4c04:	26 2f       	mov	r18, r22
    4c06:	30 e0       	ldi	r19, 0x00	; 0
    4c08:	5d c0       	rjmp	.+186    	; 0x4cc4 <readSysReg+0x434>
		case 480: temp =    (int)  eeprom->TimeBetweenDef;break;
    4c0a:	6a a1       	ldd	r22, Y+34	; 0x22
    4c0c:	26 2f       	mov	r18, r22
    4c0e:	30 e0       	ldi	r19, 0x00	; 0
    4c10:	59 c0       	rjmp	.+178    	; 0x4cc4 <readSysReg+0x434>
		//case 500: temp =    (int)  compPtr-> Curr_A;break;
		//case 510: temp =    (int)  compPtr-> Curr_B;break;
		//case 520: temp =    (int)  compPtr-> Curr_C;break;
		
		//--------------------------------------
		case 301: temp =    (int)  eeprom->number_turnon_compressor_1;break;
    4c12:	2e ad       	ldd	r18, Y+62	; 0x3e
    4c14:	3f ad       	ldd	r19, Y+63	; 0x3f
    4c16:	56 c0       	rjmp	.+172    	; 0x4cc4 <readSysReg+0x434>
		case 311: temp =    (int)  eeprom->number_turnon_hiter_1;break;
    4c18:	fb 01       	movw	r30, r22
    4c1a:	ee 5b       	subi	r30, 0xBE	; 190
    4c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1e:	20 81       	ld	r18, Z
    4c20:	31 81       	ldd	r19, Z+1	; 0x01
    4c22:	50 c0       	rjmp	.+160    	; 0x4cc4 <readSysReg+0x434>
		case 321: temp =    (int)  eeprom->number_turnon_revers_1;break;
    4c24:	fb 01       	movw	r30, r22
    4c26:	ec 5b       	subi	r30, 0xBC	; 188
    4c28:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2a:	20 81       	ld	r18, Z
    4c2c:	31 81       	ldd	r19, Z+1	; 0x01
    4c2e:	4a c0       	rjmp	.+148    	; 0x4cc4 <readSysReg+0x434>
		case 331: temp =    (int)  eeprom->number_turnon_source_1;break;
    4c30:	fb 01       	movw	r30, r22
    4c32:	e0 5c       	subi	r30, 0xC0	; 192
    4c34:	ff 4f       	sbci	r31, 0xFF	; 255
    4c36:	20 81       	ld	r18, Z
    4c38:	31 81       	ldd	r19, Z+1	; 0x01
    4c3a:	44 c0       	rjmp	.+136    	; 0x4cc4 <readSysReg+0x434>
		case 341: temp =    (int)  eeprom->time_compressor_1;break;
    4c3c:	2a ad       	ldd	r18, Y+58	; 0x3a
    4c3e:	3b ad       	ldd	r19, Y+59	; 0x3b
    4c40:	41 c0       	rjmp	.+130    	; 0x4cc4 <readSysReg+0x434>
		case 351: temp =    (int)  eeprom->time_pump_hiter_1;break;
    4c42:	2c a9       	ldd	r18, Y+52	; 0x34
    4c44:	3d a9       	ldd	r19, Y+53	; 0x35
    4c46:	3e c0       	rjmp	.+124    	; 0x4cc4 <readSysReg+0x434>
		case 371: temp =    (int)  eeprom->time_pump_source_1;break;
    4c48:	2e a9       	ldd	r18, Y+54	; 0x36
    4c4a:	3f a9       	ldd	r19, Y+55	; 0x37
    4c4c:	3b c0       	rjmp	.+118    	; 0x4cc4 <readSysReg+0x434>
		case 381: temp =    (int)  eeprom->time_revers_1;break;
    4c4e:	28 ad       	ldd	r18, Y+56	; 0x38
    4c50:	39 ad       	ldd	r19, Y+57	; 0x39
    4c52:	38 c0       	rjmp	.+112    	; 0x4cc4 <readSysReg+0x434>
		case 391: temp =    (int)  eeprom->trv_corection_1;break;
    4c54:	2a a9       	ldd	r18, Y+50	; 0x32
    4c56:	3b a9       	ldd	r19, Y+51	; 0x33
    4c58:	35 c0       	rjmp	.+106    	; 0x4cc4 <readSysReg+0x434>
		//------------------------------------
		case 302: temp =    (int)  eeprom->number_turnon_compressor_2;break;
    4c5a:	fb 01       	movw	r30, r22
    4c5c:	ee 5a       	subi	r30, 0xAE	; 174
    4c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c60:	20 81       	ld	r18, Z
    4c62:	31 81       	ldd	r19, Z+1	; 0x01
    4c64:	2f c0       	rjmp	.+94     	; 0x4cc4 <readSysReg+0x434>
		case 312: temp =    (int)  eeprom->number_turnon_hiter_2;break;
    4c66:	fb 01       	movw	r30, r22
    4c68:	ea 5a       	subi	r30, 0xAA	; 170
    4c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c6c:	20 81       	ld	r18, Z
    4c6e:	31 81       	ldd	r19, Z+1	; 0x01
    4c70:	29 c0       	rjmp	.+82     	; 0x4cc4 <readSysReg+0x434>
		case 322: temp =    (int)  eeprom->number_turnon_revers_2;break;
    4c72:	fb 01       	movw	r30, r22
    4c74:	e8 5a       	subi	r30, 0xA8	; 168
    4c76:	ff 4f       	sbci	r31, 0xFF	; 255
    4c78:	20 81       	ld	r18, Z
    4c7a:	31 81       	ldd	r19, Z+1	; 0x01
    4c7c:	23 c0       	rjmp	.+70     	; 0x4cc4 <readSysReg+0x434>
		case 332: temp =    (int)  eeprom->number_turnon_source_2;break;
    4c7e:	fb 01       	movw	r30, r22
    4c80:	ec 5a       	subi	r30, 0xAC	; 172
    4c82:	ff 4f       	sbci	r31, 0xFF	; 255
    4c84:	20 81       	ld	r18, Z
    4c86:	31 81       	ldd	r19, Z+1	; 0x01
    4c88:	1d c0       	rjmp	.+58     	; 0x4cc4 <readSysReg+0x434>
		case 342: temp =    (int)  eeprom->time_compressor_2;break;
    4c8a:	fb 01       	movw	r30, r22
    4c8c:	e0 5b       	subi	r30, 0xB0	; 176
    4c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c90:	20 81       	ld	r18, Z
    4c92:	31 81       	ldd	r19, Z+1	; 0x01
    4c94:	17 c0       	rjmp	.+46     	; 0x4cc4 <readSysReg+0x434>
		case 352: temp =    (int)  eeprom->time_pump_hiter_2;break;
    4c96:	fb 01       	movw	r30, r22
    4c98:	e6 5b       	subi	r30, 0xB6	; 182
    4c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9c:	20 81       	ld	r18, Z
    4c9e:	31 81       	ldd	r19, Z+1	; 0x01
    4ca0:	11 c0       	rjmp	.+34     	; 0x4cc4 <readSysReg+0x434>
		case 372: temp =    (int)  eeprom->time_pump_source_2;break;
    4ca2:	fb 01       	movw	r30, r22
    4ca4:	e4 5b       	subi	r30, 0xB4	; 180
    4ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca8:	20 81       	ld	r18, Z
    4caa:	31 81       	ldd	r19, Z+1	; 0x01
    4cac:	0b c0       	rjmp	.+22     	; 0x4cc4 <readSysReg+0x434>
		case 382: temp =    (int)  eeprom->time_revers_2;break;
    4cae:	fb 01       	movw	r30, r22
    4cb0:	e2 5b       	subi	r30, 0xB2	; 178
    4cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb4:	20 81       	ld	r18, Z
    4cb6:	31 81       	ldd	r19, Z+1	; 0x01
    4cb8:	05 c0       	rjmp	.+10     	; 0x4cc4 <readSysReg+0x434>
		case 392: temp =    (int)  eeprom->trv_corection_2;break;
    4cba:	fb 01       	movw	r30, r22
    4cbc:	e8 5b       	subi	r30, 0xB8	; 184
    4cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc0:	20 81       	ld	r18, Z
    4cc2:	31 81       	ldd	r19, Z+1	; 0x01
		
	}
	return temp;
}
    4cc4:	c9 01       	movw	r24, r18
    4cc6:	df 91       	pop	r29
    4cc8:	cf 91       	pop	r28
    4cca:	08 95       	ret

00004ccc <writeSysReg>:
void writeSysReg(xEEdata*comp,uint16_t adress,uint16_t value)
{
    4ccc:	cf 93       	push	r28
    4cce:	df 93       	push	r29
    4cd0:	dc 01       	movw	r26, r24
	
	switch(adress)
    4cd2:	fb 01       	movw	r30, r22
    4cd4:	3a 97       	sbiw	r30, 0x0a	; 10
    4cd6:	e7 3d       	cpi	r30, 0xD7	; 215
    4cd8:	81 e0       	ldi	r24, 0x01	; 1
    4cda:	f8 07       	cpc	r31, r24
    4cdc:	08 f0       	brcs	.+2      	; 0x4ce0 <writeSysReg+0x14>
    4cde:	bb c0       	rjmp	.+374    	; 0x4e56 <writeSysReg+0x18a>
    4ce0:	88 27       	eor	r24, r24
    4ce2:	ed 58       	subi	r30, 0x8D	; 141
    4ce4:	fd 4f       	sbci	r31, 0xFD	; 253
    4ce6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ce8:	0c 94 63 59 	jmp	0xb2c6	; 0xb2c6 <__tablejump2__>
	{
		case 10:  comp->Compressor_delay  = value;break;
    4cec:	4c 93       	st	X, r20
    4cee:	b3 c0       	rjmp	.+358    	; 0x4e56 <writeSysReg+0x18a>
		case 20:  comp->HeatingPump_delay = value;break;
    4cf0:	13 96       	adiw	r26, 0x03	; 3
    4cf2:	4c 93       	st	X, r20
    4cf4:	b0 c0       	rjmp	.+352    	; 0x4e56 <writeSysReg+0x18a>
		case 30:  comp->Source_Pump_delay = value;break;
    4cf6:	11 96       	adiw	r26, 0x01	; 1
    4cf8:	4c 93       	st	X, r20
    4cfa:	ad c0       	rjmp	.+346    	; 0x4e56 <writeSysReg+0x18a>
		case 40:  comp->Revers_Valve_delay = value;break;
    4cfc:	12 96       	adiw	r26, 0x02	; 2
    4cfe:	4c 93       	st	X, r20
    4d00:	aa c0       	rjmp	.+340    	; 0x4e56 <writeSysReg+0x18a>
		case 50:  comp->Three_Way_delay  = value;break;
    4d02:	14 96       	adiw	r26, 0x04	; 4
    4d04:	4c 93       	st	X, r20
    4d06:	a7 c0       	rjmp	.+334    	; 0x4e56 <writeSysReg+0x18a>
		case 60:  comp->Cool_Max = value;break;
    4d08:	1c 96       	adiw	r26, 0x0c	; 12
    4d0a:	4c 93       	st	X, r20
    4d0c:	a4 c0       	rjmp	.+328    	; 0x4e56 <writeSysReg+0x18a>
		case 70:  comp->Cool_Min = value;break;
    4d0e:	1d 96       	adiw	r26, 0x0d	; 13
    4d10:	4c 93       	st	X, r20
    4d12:	a1 c0       	rjmp	.+322    	; 0x4e56 <writeSysReg+0x18a>
		case 80:  comp->HEAT_Max  = value;break;
    4d14:	19 96       	adiw	r26, 0x09	; 9
    4d16:	4c 93       	st	X, r20
    4d18:	9e c0       	rjmp	.+316    	; 0x4e56 <writeSysReg+0x18a>
		case 90:  comp->HEAT_Min = value;break;
    4d1a:	1a 96       	adiw	r26, 0x0a	; 10
    4d1c:	4c 93       	st	X, r20
    4d1e:	9b c0       	rjmp	.+310    	; 0x4e56 <writeSysReg+0x18a>
		case 100: comp->Delta_heating_max  = value;break;
    4d20:	54 96       	adiw	r26, 0x14	; 20
    4d22:	4c 93       	st	X, r20
    4d24:	98 c0       	rjmp	.+304    	; 0x4e56 <writeSysReg+0x18a>
		case 110: comp->Delta_heating_min  = value;break;
    4d26:	53 96       	adiw	r26, 0x13	; 19
    4d28:	4c 93       	st	X, r20
    4d2a:	95 c0       	rjmp	.+298    	; 0x4e56 <writeSysReg+0x18a>
		case 120: comp->Delta_source_max  = value;break;
    4d2c:	56 96       	adiw	r26, 0x16	; 22
    4d2e:	4c 93       	st	X, r20
    4d30:	92 c0       	rjmp	.+292    	; 0x4e56 <writeSysReg+0x18a>
		case 130: comp->Delta_source_min  = value;break;
    4d32:	55 96       	adiw	r26, 0x15	; 21
    4d34:	4c 93       	st	X, r20
    4d36:	8f c0       	rjmp	.+286    	; 0x4e56 <writeSysReg+0x18a>
		case 140: comp->diffCOOL  = value;break;
    4d38:	5d 96       	adiw	r26, 0x1d	; 29
    4d3a:	4c 93       	st	X, r20
    4d3c:	8c c0       	rjmp	.+280    	; 0x4e56 <writeSysReg+0x18a>
		case 150: comp->diffDHW  = value;break;
    4d3e:	5e 96       	adiw	r26, 0x1e	; 30
    4d40:	4c 93       	st	X, r20
    4d42:	89 c0       	rjmp	.+274    	; 0x4e56 <writeSysReg+0x18a>
		case 160: comp->diffHEAT  = value;break;
    4d44:	5c 96       	adiw	r26, 0x1c	; 28
    4d46:	4c 93       	st	X, r20
    4d48:	86 c0       	rjmp	.+268    	; 0x4e56 <writeSysReg+0x18a>
		case 170: comp->AireToWater  = value;break;
    4d4a:	5f 96       	adiw	r26, 0x1f	; 31
    4d4c:	4c 93       	st	X, r20
    4d4e:	83 c0       	rjmp	.+262    	; 0x4e56 <writeSysReg+0x18a>
		case 180: comp->ExhaustMax  = value;break;
    4d50:	1e 96       	adiw	r26, 0x0e	; 14
    4d52:	4c 93       	st	X, r20
    4d54:	80 c0       	rjmp	.+256    	; 0x4e56 <writeSysReg+0x18a>
		case 190: comp->cool  = value;break;
    4d56:	97 96       	adiw	r26, 0x27	; 39
    4d58:	4c 93       	st	X, r20
    4d5a:	7d c0       	rjmp	.+250    	; 0x4e56 <writeSysReg+0x18a>
		case 200: comp->heat  = value;break;
    4d5c:	96 96       	adiw	r26, 0x26	; 38
    4d5e:	4c 93       	st	X, r20
    4d60:	7a c0       	rjmp	.+244    	; 0x4e56 <writeSysReg+0x18a>
		case 210: comp->heatWater  = value;break;
    4d62:	95 96       	adiw	r26, 0x25	; 37
    4d64:	4c 93       	st	X, r20
    4d66:	77 c0       	rjmp	.+238    	; 0x4e56 <writeSysReg+0x18a>
		case 220: comp->HP_Max  = value;break;
    4d68:	16 96       	adiw	r26, 0x06	; 6
    4d6a:	4c 93       	st	X, r20
    4d6c:	74 c0       	rjmp	.+232    	; 0x4e56 <writeSysReg+0x18a>
		case 230: comp->LP_Max  = value;break;
    4d6e:	18 96       	adiw	r26, 0x08	; 8
    4d70:	4c 93       	st	X, r20
    4d72:	71 c0       	rjmp	.+226    	; 0x4e56 <writeSysReg+0x18a>
		case 240: comp->HP_Min  = value;break;
    4d74:	17 96       	adiw	r26, 0x07	; 7
    4d76:	4c 93       	st	X, r20
    4d78:	6e c0       	rjmp	.+220    	; 0x4e56 <writeSysReg+0x18a>
		case 250: comp->LP_Min  = value;break;
    4d7a:	ed 01       	movw	r28, r26
    4d7c:	c4 5a       	subi	r28, 0xA4	; 164
    4d7e:	df 4f       	sbci	r29, 0xFF	; 255
    4d80:	ba 01       	movw	r22, r20
    4d82:	80 e0       	ldi	r24, 0x00	; 0
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	0e 94 27 54 	call	0xa84e	; 0xa84e <__floatunsisf>
    4d8a:	68 83       	st	Y, r22
    4d8c:	79 83       	std	Y+1, r23	; 0x01
    4d8e:	8a 83       	std	Y+2, r24	; 0x02
    4d90:	9b 83       	std	Y+3, r25	; 0x03
    4d92:	61 c0       	rjmp	.+194    	; 0x4e56 <writeSysReg+0x18a>
		case 260: comp->MaxSupercool  = value;break;
    4d94:	52 96       	adiw	r26, 0x12	; 18
    4d96:	4c 93       	st	X, r20
    4d98:	5e c0       	rjmp	.+188    	; 0x4e56 <writeSysReg+0x18a>
		case 270: comp->MinSupercool  = value;break;
    4d9a:	51 96       	adiw	r26, 0x11	; 17
    4d9c:	4c 93       	st	X, r20
    4d9e:	5b c0       	rjmp	.+182    	; 0x4e56 <writeSysReg+0x18a>
		case 280: comp->MaxSuperheat  = value;break;
    4da0:	50 96       	adiw	r26, 0x10	; 16
    4da2:	4c 93       	st	X, r20
    4da4:	58 c0       	rjmp	.+176    	; 0x4e56 <writeSysReg+0x18a>
		case 290: comp->MinSuperheat  = value;break;
    4da6:	1f 96       	adiw	r26, 0x0f	; 15
    4da8:	4c 93       	st	X, r20
    4daa:	55 c0       	rjmp	.+170    	; 0x4e56 <writeSysReg+0x18a>
		case 300: comp->number_turnon_threeway  = value;break;
    4dac:	aa 5b       	subi	r26, 0xBA	; 186
    4dae:	bf 4f       	sbci	r27, 0xFF	; 255
    4db0:	4d 93       	st	X+, r20
    4db2:	5c 93       	st	X, r21
    4db4:	50 c0       	rjmp	.+160    	; 0x4e56 <writeSysReg+0x18a>
		case 310: comp->power  = value;break;
    4db6:	94 96       	adiw	r26, 0x24	; 36
    4db8:	4c 93       	st	X, r20
    4dba:	4d c0       	rjmp	.+154    	; 0x4e56 <writeSysReg+0x18a>
		case 320: comp->Set_Cooling  = value;break;
    4dbc:	5a 96       	adiw	r26, 0x1a	; 26
    4dbe:	4c 93       	st	X, r20
    4dc0:	4a c0       	rjmp	.+148    	; 0x4e56 <writeSysReg+0x18a>
		case 330: comp->Set_DHW  = value;break;
    4dc2:	5b 96       	adiw	r26, 0x1b	; 27
    4dc4:	4c 93       	st	X, r20
    4dc6:	47 c0       	rjmp	.+142    	; 0x4e56 <writeSysReg+0x18a>
		case 340: comp->Set_Heating  = value;break;
    4dc8:	59 96       	adiw	r26, 0x19	; 25
    4dca:	4c 93       	st	X, r20
    4dcc:	44 c0       	rjmp	.+136    	; 0x4e56 <writeSysReg+0x18a>
		case 350: comp->TempDef  = value;break;//
    4dce:	9b 96       	adiw	r26, 0x2b	; 43
    4dd0:	5c 93       	st	X, r21
    4dd2:	4e 93       	st	-X, r20
    4dd4:	9a 97       	sbiw	r26, 0x2a	; 42
    4dd6:	3f c0       	rjmp	.+126    	; 0x4e56 <writeSysReg+0x18a>
		case 360: comp->TimeDef  = value;break;//
    4dd8:	91 96       	adiw	r26, 0x21	; 33
    4dda:	4c 93       	st	X, r20
    4ddc:	3c c0       	rjmp	.+120    	; 0x4e56 <writeSysReg+0x18a>
		case 370: comp->TempOut  = value;break;
    4dde:	9f 96       	adiw	r26, 0x2f	; 47
    4de0:	5c 93       	st	X, r21
    4de2:	4e 93       	st	-X, r20
    4de4:	9e 97       	sbiw	r26, 0x2e	; 46
    4de6:	37 c0       	rjmp	.+110    	; 0x4e56 <writeSysReg+0x18a>
		case 380: comp->TempStopDef  = value;break;//
    4de8:	9d 96       	adiw	r26, 0x2d	; 45
    4dea:	5c 93       	st	X, r21
    4dec:	4e 93       	st	-X, r20
    4dee:	9c 97       	sbiw	r26, 0x2c	; 44
    4df0:	32 c0       	rjmp	.+100    	; 0x4e56 <writeSysReg+0x18a>
		case 390: comp->time_threeway  = value;break;
    4df2:	dd 96       	adiw	r26, 0x3d	; 61
    4df4:	5c 93       	st	X, r21
    4df6:	4e 93       	st	-X, r20
    4df8:	dc 97       	sbiw	r26, 0x3c	; 60
    4dfa:	2d c0       	rjmp	.+90     	; 0x4e56 <writeSysReg+0x18a>
		case 400: comp->NombComp  = value;break;
    4dfc:	90 96       	adiw	r26, 0x20	; 32
    4dfe:	4c 93       	st	X, r20
    4e00:	2a c0       	rjmp	.+84     	; 0x4e56 <writeSysReg+0x18a>
		case 410: comp->reversMod =value;break;
    4e02:	98 96       	adiw	r26, 0x28	; 40
    4e04:	4c 93       	st	X, r20
    4e06:	27 c0       	rjmp	.+78     	; 0x4e56 <writeSysReg+0x18a>
		case 420: comp->TRV_Delay=value;break;
    4e08:	15 96       	adiw	r26, 0x05	; 5
    4e0a:	4c 93       	st	X, r20
    4e0c:	24 c0       	rjmp	.+72     	; 0x4e56 <writeSysReg+0x18a>
		case 430: comp->Source_Max=value;break;
    4e0e:	1b 96       	adiw	r26, 0x0b	; 11
    4e10:	4c 93       	st	X, r20
    4e12:	21 c0       	rjmp	.+66     	; 0x4e56 <writeSysReg+0x18a>
		case 440: comp->Source_Min=value;break;
    4e14:	d1 96       	adiw	r26, 0x31	; 49
    4e16:	5c 93       	st	X, r21
    4e18:	4e 93       	st	-X, r20
    4e1a:	d0 97       	sbiw	r26, 0x30	; 48
    4e1c:	1c c0       	rjmp	.+56     	; 0x4e56 <writeSysReg+0x18a>
		case 450: comp->Delta_dhw_max  = value;break;
    4e1e:	58 96       	adiw	r26, 0x18	; 24
    4e20:	4c 93       	st	X, r20
    4e22:	19 c0       	rjmp	.+50     	; 0x4e56 <writeSysReg+0x18a>
		case 460: comp->Delta_dhw_min  = value;break;
    4e24:	57 96       	adiw	r26, 0x17	; 23
    4e26:	4c 93       	st	X, r20
    4e28:	16 c0       	rjmp	.+44     	; 0x4e56 <writeSysReg+0x18a>
		case 470: comp->Power_380 = value;break;
    4e2a:	99 96       	adiw	r26, 0x29	; 41
    4e2c:	4c 93       	st	X, r20
    4e2e:	13 c0       	rjmp	.+38     	; 0x4e56 <writeSysReg+0x18a>
		case 480: comp->TimeBetweenDef = value;break;//
    4e30:	92 96       	adiw	r26, 0x22	; 34
    4e32:	4c 93       	st	X, r20
    4e34:	10 c0       	rjmp	.+32     	; 0x4e56 <writeSysReg+0x18a>
		case 391: comp->trv_corection_1 = value;break;
    4e36:	d3 96       	adiw	r26, 0x33	; 51
    4e38:	5c 93       	st	X, r21
    4e3a:	4e 93       	st	-X, r20
    4e3c:	d2 97       	sbiw	r26, 0x32	; 50
    4e3e:	0b c0       	rjmp	.+22     	; 0x4e56 <writeSysReg+0x18a>
		case 392: comp->trv_corection_2 = value;break;
    4e40:	a8 5b       	subi	r26, 0xB8	; 184
    4e42:	bf 4f       	sbci	r27, 0xFF	; 255
    4e44:	4d 93       	st	X+, r20
    4e46:	5c 93       	st	X, r21
    4e48:	06 c0       	rjmp	.+12     	; 0x4e56 <writeSysReg+0x18a>
		case 393:if(comp->AireToWater==1) forsDefrost = value;break;
    4e4a:	5f 96       	adiw	r26, 0x1f	; 31
    4e4c:	8c 91       	ld	r24, X
    4e4e:	81 30       	cpi	r24, 0x01	; 1
    4e50:	11 f4       	brne	.+4      	; 0x4e56 <writeSysReg+0x18a>
    4e52:	40 93 15 07 	sts	0x0715, r20	; 0x800715 <forsDefrost>
	}
}
    4e56:	df 91       	pop	r29
    4e58:	cf 91       	pop	r28
    4e5a:	08 95       	ret

00004e5c <calculateCRC>:
}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
    4e5c:	88 23       	and	r24, r24
    4e5e:	09 f1       	breq	.+66     	; 0x4ea2 <calculateCRC+0x46>
    4e60:	af ef       	ldi	r26, 0xFF	; 255
    4e62:	a8 0f       	add	r26, r24
    4e64:	b0 e0       	ldi	r27, 0x00	; 0
    4e66:	11 96       	adiw	r26, 0x01	; 1
    4e68:	60 e0       	ldi	r22, 0x00	; 0
    4e6a:	70 e0       	ldi	r23, 0x00	; 0
    4e6c:	8f ef       	ldi	r24, 0xFF	; 255
    4e6e:	9f ef       	ldi	r25, 0xFF	; 255
	{
		temp = temp ^ frame[i];
    4e70:	fb 01       	movw	r30, r22
    4e72:	e4 53       	subi	r30, 0x34	; 52
    4e74:	f8 4f       	sbci	r31, 0xF8	; 248
    4e76:	20 81       	ld	r18, Z
    4e78:	82 27       	eor	r24, r18
    4e7a:	28 e0       	ldi	r18, 0x08	; 8
		for (unsigned char j = 1; j <= 8; j++)
		{
			flag = temp & 0x0001;
    4e7c:	ac 01       	movw	r20, r24
    4e7e:	41 70       	andi	r20, 0x01	; 1
    4e80:	55 27       	eor	r21, r21
			temp >>= 1;
    4e82:	96 95       	lsr	r25
    4e84:	87 95       	ror	r24
			if (flag)
    4e86:	45 2b       	or	r20, r21
    4e88:	21 f0       	breq	.+8      	; 0x4e92 <calculateCRC+0x36>
			temp ^= 0xA001;
    4e8a:	31 e0       	ldi	r19, 0x01	; 1
    4e8c:	83 27       	eor	r24, r19
    4e8e:	30 ea       	ldi	r19, 0xA0	; 160
    4e90:	93 27       	eor	r25, r19
    4e92:	21 50       	subi	r18, 0x01	; 1
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
	{
		temp = temp ^ frame[i];
		for (unsigned char j = 1; j <= 8; j++)
    4e94:	99 f7       	brne	.-26     	; 0x4e7c <calculateCRC+0x20>
    4e96:	6f 5f       	subi	r22, 0xFF	; 255
    4e98:	7f 4f       	sbci	r23, 0xFF	; 255
}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
    4e9a:	6a 17       	cp	r22, r26
    4e9c:	7b 07       	cpc	r23, r27
    4e9e:	41 f7       	brne	.-48     	; 0x4e70 <calculateCRC+0x14>
    4ea0:	02 c0       	rjmp	.+4      	; 0x4ea6 <calculateCRC+0x4a>

}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
    4ea2:	8f ef       	ldi	r24, 0xFF	; 255
    4ea4:	9f ef       	ldi	r25, 0xFF	; 255
	// Reverse byte order.
	temp2 = temp >> 8;
	temp = (temp << 8) | temp2;
	temp &= 0xFFFF;
	return temp; // the returned value is already swopped - crcLo byte is first & crcHi byte is last
}
    4ea6:	98 27       	eor	r25, r24
    4ea8:	89 27       	eor	r24, r25
    4eaa:	98 27       	eor	r25, r24
    4eac:	08 95       	ret

00004eae <sendPacket>:

void sendPacket(unsigned char bufferSize)
{
    4eae:	ef 92       	push	r14
    4eb0:	ff 92       	push	r15
    4eb2:	0f 93       	push	r16
    4eb4:	1f 93       	push	r17
    4eb6:	cf 93       	push	r28
    4eb8:	df 93       	push	r29
	
	for (unsigned char i = 0; i < bufferSize; i++) if(port_0)xSerialPutChar(&xSerialPort,frame[i]); else if(port_3){PORTJ|= (_BV(PIN_rs485));xSerialPutChar(&xSerial3Port,frame[i]);}
    4eba:	88 23       	and	r24, r24
    4ebc:	71 f1       	breq	.+92     	; 0x4f1a <sendPacket+0x6c>
    4ebe:	81 50       	subi	r24, 0x01	; 1
    4ec0:	08 2f       	mov	r16, r24
    4ec2:	10 e0       	ldi	r17, 0x00	; 0
    4ec4:	0f 5f       	subi	r16, 0xFF	; 255
    4ec6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ec8:	c0 e0       	ldi	r28, 0x00	; 0
    4eca:	d0 e0       	ldi	r29, 0x00	; 0
    4ecc:	0f 2e       	mov	r0, r31
    4ece:	f5 e0       	ldi	r31, 0x05	; 5
    4ed0:	ef 2e       	mov	r14, r31
    4ed2:	ff 24       	eor	r15, r15
    4ed4:	f3 94       	inc	r15
    4ed6:	f0 2d       	mov	r31, r0
    4ed8:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <port_0>
    4edc:	88 23       	and	r24, r24
    4ede:	49 f0       	breq	.+18     	; 0x4ef2 <sendPacket+0x44>
    4ee0:	fe 01       	movw	r30, r28
    4ee2:	e4 53       	subi	r30, 0x34	; 52
    4ee4:	f8 4f       	sbci	r31, 0xF8	; 248
    4ee6:	60 81       	ld	r22, Z
    4ee8:	83 e6       	ldi	r24, 0x63	; 99
    4eea:	97 e0       	ldi	r25, 0x07	; 7
    4eec:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <xSerialPutChar>
    4ef0:	10 c0       	rjmp	.+32     	; 0x4f12 <sendPacket+0x64>
    4ef2:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <port_3>
    4ef6:	88 23       	and	r24, r24
    4ef8:	61 f0       	breq	.+24     	; 0x4f12 <sendPacket+0x64>
    4efa:	f7 01       	movw	r30, r14
    4efc:	80 81       	ld	r24, Z
    4efe:	84 60       	ori	r24, 0x04	; 4
    4f00:	80 83       	st	Z, r24
    4f02:	fe 01       	movw	r30, r28
    4f04:	e4 53       	subi	r30, 0x34	; 52
    4f06:	f8 4f       	sbci	r31, 0xF8	; 248
    4f08:	60 81       	ld	r22, Z
    4f0a:	8a ea       	ldi	r24, 0xAA	; 170
    4f0c:	97 e0       	ldi	r25, 0x07	; 7
    4f0e:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <xSerialPutChar>
    4f12:	21 96       	adiw	r28, 0x01	; 1
    4f14:	c0 17       	cp	r28, r16
    4f16:	d1 07       	cpc	r29, r17
    4f18:	f9 f6       	brne	.-66     	; 0x4ed8 <sendPacket+0x2a>
	//xSerialRxFlush(&xSerialPort);
	PORTJ &= (_BV(PIN_rs485));
    4f1a:	e5 e0       	ldi	r30, 0x05	; 5
    4f1c:	f1 e0       	ldi	r31, 0x01	; 1
    4f1e:	80 81       	ld	r24, Z
    4f20:	84 70       	andi	r24, 0x04	; 4
    4f22:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4f24:	00 00       	nop

	_delay_us(3645);
	
	
    4f26:	df 91       	pop	r29
    4f28:	cf 91       	pop	r28
    4f2a:	1f 91       	pop	r17
    4f2c:	0f 91       	pop	r16
    4f2e:	ff 90       	pop	r15
    4f30:	ef 90       	pop	r14
    4f32:	08 95       	ret

00004f34 <modbus_update>:
		case 393:if(comp->AireToWater==1) forsDefrost = value;break;
	}
}

void modbus_update()
{
    4f34:	af 92       	push	r10
    4f36:	bf 92       	push	r11
    4f38:	cf 92       	push	r12
    4f3a:	df 92       	push	r13
    4f3c:	ef 92       	push	r14
    4f3e:	ff 92       	push	r15
    4f40:	0f 93       	push	r16
    4f42:	1f 93       	push	r17
    4f44:	cf 93       	push	r28
    4f46:	df 93       	push	r29
	unsigned char noOfBytes;
	unsigned char responseFrameSize;
	unsigned int temp;
	void* ptr=NULL;
	
	if(port_0)buffer=xSerialAvailableChar( &xSerialPort );
    4f48:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <port_0>
    4f4c:	88 23       	and	r24, r24
    4f4e:	29 f0       	breq	.+10     	; 0x4f5a <modbus_update+0x26>
    4f50:	83 e6       	ldi	r24, 0x63	; 99
    4f52:	97 e0       	ldi	r25, 0x07	; 7
    4f54:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <xSerialAvailableChar>
    4f58:	09 c0       	rjmp	.+18     	; 0x4f6c <modbus_update+0x38>
	else if (port_3)buffer=xSerialAvailableChar( &xSerial3Port );
    4f5a:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <port_3>
    4f5e:	88 23       	and	r24, r24
    4f60:	09 f4       	brne	.+2      	; 0x4f64 <modbus_update+0x30>
    4f62:	da c0       	rjmp	.+436    	; 0x5118 <modbus_update+0x1e4>
    4f64:	8a ea       	ldi	r24, 0xAA	; 170
    4f66:	97 e0       	ldi	r25, 0x07	; 7
    4f68:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <xSerialAvailableChar>
	
	//avrSerialPrintf("buffer = %d \r\n",buffer );
	//avrSerialPrintf("overflow= %d \r\n",overflow);
	if (overflow){ return;}//exceptionResponse(OVERFLOW_BUFF);
    4f6c:	90 91 85 07 	lds	r25, 0x0785	; 0x800785 <overflow>
    4f70:	91 11       	cpse	r25, r1
    4f72:	d7 c0       	rjmp	.+430    	; 0x5122 <modbus_update+0x1ee>
	if (buffer > 0 && buffer < 8) {  return;}// exceptionResponse(CORRUPT_PACKET);
    4f74:	9f ef       	ldi	r25, 0xFF	; 255
    4f76:	98 0f       	add	r25, r24
    4f78:	97 30       	cpi	r25, 0x07	; 7
    4f7a:	08 f4       	brcc	.+2      	; 0x4f7e <modbus_update+0x4a>
    4f7c:	d2 c0       	rjmp	.+420    	; 0x5122 <modbus_update+0x1ee>
	
	// The minimum request packet is 8 bytes for function 3 & 16
	
	id = frame[0];
    4f7e:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <frame>
	//avrSerialPrintf("buffer= %d \r\n",buffer);
	
	if (id == slaveID ) // if the recieved ID matches the slaveID or broadcasting id (0), continue
    4f82:	91 30       	cpi	r25, 0x01	; 1
    4f84:	09 f0       	breq	.+2      	; 0x4f88 <modbus_update+0x54>
    4f86:	cd c0       	rjmp	.+410    	; 0x5122 <modbus_update+0x1ee>
	{
		crc = ((frame[buffer - 2] << 8) | frame[buffer - 1]); // combine the crc Low & High bytes
    4f88:	28 2f       	mov	r18, r24
    4f8a:	30 e0       	ldi	r19, 0x00	; 0
    4f8c:	f9 01       	movw	r30, r18
    4f8e:	e6 53       	subi	r30, 0x36	; 54
    4f90:	f8 4f       	sbci	r31, 0xF8	; 248
    4f92:	d0 81       	ld	r29, Z
    4f94:	f9 01       	movw	r30, r18
    4f96:	e5 53       	subi	r30, 0x35	; 53
    4f98:	f8 4f       	sbci	r31, 0xF8	; 248
    4f9a:	c0 81       	ld	r28, Z
		//avrSerialPrintf("crc= %d \r\n",crc);
		if (calculateCRC(buffer - 2) == crc) // if the calculated crc matches the recieved crc continue
    4f9c:	82 50       	subi	r24, 0x02	; 2
    4f9e:	5e df       	rcall	.-324    	; 0x4e5c <calculateCRC>
    4fa0:	2c 2f       	mov	r18, r28
    4fa2:	30 e0       	ldi	r19, 0x00	; 0
    4fa4:	3d 2b       	or	r19, r29
    4fa6:	28 17       	cp	r18, r24
    4fa8:	39 07       	cpc	r19, r25
    4faa:	09 f0       	breq	.+2      	; 0x4fae <modbus_update+0x7a>
    4fac:	ba c0       	rjmp	.+372    	; 0x5122 <modbus_update+0x1ee>
		{
			function = frame[1];
    4fae:	ec ec       	ldi	r30, 0xCC	; 204
    4fb0:	f7 e0       	ldi	r31, 0x07	; 7
    4fb2:	21 81       	ldd	r18, Z+1	; 0x01
    4fb4:	20 93 86 07 	sts	0x0786, r18	; 0x800786 <function>
			startingAddress = ((frame[2] << 8) | frame[3]); // combine the starting address bytes
    4fb8:	82 81       	ldd	r24, Z+2	; 0x02
    4fba:	c3 81       	ldd	r28, Z+3	; 0x03
    4fbc:	d0 e0       	ldi	r29, 0x00	; 0
    4fbe:	d8 2b       	or	r29, r24
			no_of_registers = ((frame[4] << 8) | frame[5]);
    4fc0:	84 81       	ldd	r24, Z+4	; 0x04
    4fc2:	45 81       	ldd	r20, Z+5	; 0x05
    4fc4:	50 e0       	ldi	r21, 0x00	; 0
    4fc6:	58 2b       	or	r21, r24
			maxData = startingAddress + no_of_registers *10;
    4fc8:	7a 01       	movw	r14, r20
    4fca:	ee 0c       	add	r14, r14
    4fcc:	ff 1c       	adc	r15, r15
    4fce:	ca 01       	movw	r24, r20
    4fd0:	88 0f       	add	r24, r24
    4fd2:	99 1f       	adc	r25, r25
    4fd4:	88 0f       	add	r24, r24
    4fd6:	99 1f       	adc	r25, r25
    4fd8:	88 0f       	add	r24, r24
    4fda:	99 1f       	adc	r25, r25
    4fdc:	e8 0e       	add	r14, r24
    4fde:	f9 1e       	adc	r15, r25
    4fe0:	ec 0e       	add	r14, r28
    4fe2:	fd 1e       	adc	r15, r29
			//avrSerialPrintf("function= %d \r\n",function);
			//avrSerialPrintf("startingAddress= %d \r\n",startingAddress);
			//avrSerialPrintf("no_of_registers= %d \r\n",no_of_registers);
			//avrSerialPrintf("maxData= %d \r\n",maxData);
			if (function == 3)
    4fe4:	23 30       	cpi	r18, 0x03	; 3
    4fe6:	09 f0       	breq	.+2      	; 0x4fea <modbus_update+0xb6>
    4fe8:	65 c0       	rjmp	.+202    	; 0x50b4 <modbus_update+0x180>
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
    4fea:	9e 01       	movw	r18, r28
    4fec:	ad ec       	ldi	r26, 0xCD	; 205
    4fee:	bc ec       	ldi	r27, 0xCC	; 204
    4ff0:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    4ff4:	96 95       	lsr	r25
    4ff6:	87 95       	ror	r24
    4ff8:	96 95       	lsr	r25
    4ffa:	87 95       	ror	r24
    4ffc:	96 95       	lsr	r25
    4ffe:	87 95       	ror	r24
    5000:	9c 01       	movw	r18, r24
    5002:	22 0f       	add	r18, r18
    5004:	33 1f       	adc	r19, r19
    5006:	88 0f       	add	r24, r24
    5008:	99 1f       	adc	r25, r25
    500a:	88 0f       	add	r24, r24
    500c:	99 1f       	adc	r25, r25
    500e:	88 0f       	add	r24, r24
    5010:	99 1f       	adc	r25, r25
    5012:	82 0f       	add	r24, r18
    5014:	93 1f       	adc	r25, r19
    5016:	9e 01       	movw	r18, r28
    5018:	28 1b       	sub	r18, r24
    501a:	39 0b       	sbc	r19, r25
    501c:	21 30       	cpi	r18, 0x01	; 1
    501e:	31 05       	cpc	r19, r1
    5020:	51 f0       	breq	.+20     	; 0x5036 <modbus_update+0x102>
				else if(startingAddress%10==2){ptr=&Comp_2;}
    5022:	22 30       	cpi	r18, 0x02	; 2
    5024:	31 05       	cpc	r19, r1
    5026:	71 f4       	brne	.+28     	; 0x5044 <modbus_update+0x110>
    5028:	0f 2e       	mov	r0, r31
    502a:	f6 ef       	ldi	r31, 0xF6	; 246
    502c:	cf 2e       	mov	r12, r31
    502e:	f9 e0       	ldi	r31, 0x09	; 9
    5030:	df 2e       	mov	r13, r31
    5032:	f0 2d       	mov	r31, r0
    5034:	09 c0       	rjmp	.+18     	; 0x5048 <modbus_update+0x114>
			//avrSerialPrintf("startingAddress= %d \r\n",startingAddress);
			//avrSerialPrintf("no_of_registers= %d \r\n",no_of_registers);
			//avrSerialPrintf("maxData= %d \r\n",maxData);
			if (function == 3)
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
    5036:	0f 2e       	mov	r0, r31
    5038:	fc e6       	ldi	r31, 0x6C	; 108
    503a:	cf 2e       	mov	r12, r31
    503c:	f9 e0       	ldi	r31, 0x09	; 9
    503e:	df 2e       	mov	r13, r31
    5040:	f0 2d       	mov	r31, r0
    5042:	02 c0       	rjmp	.+4      	; 0x5048 <modbus_update+0x114>
	unsigned int crc16;
	unsigned int crc;
	unsigned char noOfBytes;
	unsigned char responseFrameSize;
	unsigned int temp;
	void* ptr=NULL;
    5044:	c1 2c       	mov	r12, r1
    5046:	d1 2c       	mov	r13, r1
			if (function == 3)
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
				else if(startingAddress%10==2){ptr=&Comp_2;}
				
				noOfBytes = no_of_registers * 2;
    5048:	a4 2e       	mov	r10, r20
    504a:	aa 0c       	add	r10, r10
				responseFrameSize = 5 + noOfBytes; // ID, function, noOfBytes, (dataLo + dataHi) * number of registers, crcLo, crcHi
    504c:	0f 2e       	mov	r0, r31
    504e:	f5 e0       	ldi	r31, 0x05	; 5
    5050:	bf 2e       	mov	r11, r31
    5052:	f0 2d       	mov	r31, r0
    5054:	ba 0c       	add	r11, r10
				frame[0] = slaveID;
    5056:	ec ec       	ldi	r30, 0xCC	; 204
    5058:	f7 e0       	ldi	r31, 0x07	; 7
    505a:	81 e0       	ldi	r24, 0x01	; 1
    505c:	80 83       	st	Z, r24
				frame[1] = function;
    505e:	83 e0       	ldi	r24, 0x03	; 3
    5060:	81 83       	std	Z+1, r24	; 0x01
				frame[2] = noOfBytes;
    5062:	a2 82       	std	Z+2, r10	; 0x02
				//avrSerialPrintf("FrameSize= %d \r\n",responseFrameSize);
				//avrSerialPrintf("frame[1]= %d \r\n",frame[1]);
				//avrSerialPrintf("frame[2]= %d \r\n",frame[2]);
				address = 3; // PDU starts at the 4th byte
				for (index = startingAddress; index < maxData; )
    5064:	ce 15       	cp	r28, r14
    5066:	df 05       	cpc	r29, r15
    5068:	a8 f4       	brcc	.+42     	; 0x5094 <modbus_update+0x160>
    506a:	03 e0       	ldi	r16, 0x03	; 3
    506c:	10 e0       	ldi	r17, 0x00	; 0
				{
					temp = readSysReg(ptr,&EEpromData,index);//holdingRegs[index]
    506e:	ae 01       	movw	r20, r28
    5070:	6c e0       	ldi	r22, 0x0C	; 12
    5072:	79 e0       	ldi	r23, 0x09	; 9
    5074:	c6 01       	movw	r24, r12
    5076:	0c dc       	rcall	.-2024   	; 0x4890 <readSysReg>
					frame[address] = temp >> 8; // split the register into 2 bytes
    5078:	f8 01       	movw	r30, r16
    507a:	e4 53       	subi	r30, 0x34	; 52
    507c:	f8 4f       	sbci	r31, 0xF8	; 248
    507e:	90 83       	st	Z, r25
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
					frame[address] = temp & 0xFF;
    5080:	f8 01       	movw	r30, r16
    5082:	e3 53       	subi	r30, 0x33	; 51
    5084:	f8 4f       	sbci	r31, 0xF8	; 248
    5086:	80 83       	st	Z, r24
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
    5088:	0e 5f       	subi	r16, 0xFE	; 254
    508a:	1f 4f       	sbci	r17, 0xFF	; 255
					index +=10;
    508c:	2a 96       	adiw	r28, 0x0a	; 10
				frame[2] = noOfBytes;
				//avrSerialPrintf("FrameSize= %d \r\n",responseFrameSize);
				//avrSerialPrintf("frame[1]= %d \r\n",frame[1]);
				//avrSerialPrintf("frame[2]= %d \r\n",frame[2]);
				address = 3; // PDU starts at the 4th byte
				for (index = startingAddress; index < maxData; )
    508e:	ce 15       	cp	r28, r14
    5090:	df 05       	cpc	r29, r15
    5092:	68 f3       	brcs	.-38     	; 0x506e <modbus_update+0x13a>
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
					index +=10;
				}
				
				crc16 = calculateCRC(responseFrameSize - 2);
    5094:	83 e0       	ldi	r24, 0x03	; 3
    5096:	8a 0d       	add	r24, r10
    5098:	e1 de       	rcall	.-574    	; 0x4e5c <calculateCRC>
				frame[responseFrameSize - 2] = crc16 >> 8; // split crc into 2 bytes
    509a:	2b 2d       	mov	r18, r11
    509c:	30 e0       	ldi	r19, 0x00	; 0
    509e:	f9 01       	movw	r30, r18
    50a0:	e6 53       	subi	r30, 0x36	; 54
    50a2:	f8 4f       	sbci	r31, 0xF8	; 248
    50a4:	90 83       	st	Z, r25
				frame[responseFrameSize - 1] = crc16 & 0xFF;
    50a6:	f9 01       	movw	r30, r18
    50a8:	e5 53       	subi	r30, 0x35	; 53
    50aa:	f8 4f       	sbci	r31, 0xF8	; 248
				//return;
				sendPacket(responseFrameSize);
    50ac:	80 83       	st	Z, r24
    50ae:	8b 2d       	mov	r24, r11
    50b0:	fe de       	rcall	.-516    	; 0x4eae <sendPacket>
    50b2:	37 c0       	rjmp	.+110    	; 0x5122 <modbus_update+0x1ee>
				
			}
			
			else if (function == 16)
    50b4:	20 31       	cpi	r18, 0x10	; 16
    50b6:	09 f0       	breq	.+2      	; 0x50ba <modbus_update+0x186>
    50b8:	34 c0       	rjmp	.+104    	; 0x5122 <modbus_update+0x1ee>
			{
				address = 7; // start at the 8th byte in the frame
				
				for (index = startingAddress; index < maxData; )
    50ba:	ce 15       	cp	r28, r14
    50bc:	df 05       	cpc	r29, r15
    50be:	b0 f4       	brcc	.+44     	; 0x50ec <modbus_update+0x1b8>
    50c0:	07 e0       	ldi	r16, 0x07	; 7
    50c2:	10 e0       	ldi	r17, 0x00	; 0
				{
					temp = ((frame[address] << 8) | frame[address + 1]);
    50c4:	f8 01       	movw	r30, r16
    50c6:	e4 53       	subi	r30, 0x34	; 52
    50c8:	f8 4f       	sbci	r31, 0xF8	; 248
    50ca:	80 81       	ld	r24, Z
    50cc:	f8 01       	movw	r30, r16
    50ce:	e3 53       	subi	r30, 0x33	; 51
    50d0:	f8 4f       	sbci	r31, 0xF8	; 248
    50d2:	40 81       	ld	r20, Z
					writeSysReg(&EEpromData,index,temp);
    50d4:	50 e0       	ldi	r21, 0x00	; 0
    50d6:	58 2b       	or	r21, r24
    50d8:	be 01       	movw	r22, r28
    50da:	8c e0       	ldi	r24, 0x0C	; 12
    50dc:	99 e0       	ldi	r25, 0x09	; 9
    50de:	f6 dd       	rcall	.-1044   	; 0x4ccc <writeSysReg>
					address += 2;
    50e0:	0e 5f       	subi	r16, 0xFE	; 254
    50e2:	1f 4f       	sbci	r17, 0xFF	; 255
					index+=10;
    50e4:	2a 96       	adiw	r28, 0x0a	; 10
			
			else if (function == 16)
			{
				address = 7; // start at the 8th byte in the frame
				
				for (index = startingAddress; index < maxData; )
    50e6:	ce 15       	cp	r28, r14
    50e8:	df 05       	cpc	r29, r15
    50ea:	60 f3       	brcs	.-40     	; 0x50c4 <modbus_update+0x190>
					temp = ((frame[address] << 8) | frame[address + 1]);
					writeSysReg(&EEpromData,index,temp);
					address += 2;
					index+=10;
				}
				portENTER_CRITICAL();
    50ec:	0f b6       	in	r0, 0x3f	; 63
    50ee:	f8 94       	cli
    50f0:	0f 92       	push	r0
				eeprom_write_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));
    50f2:	40 e6       	ldi	r20, 0x60	; 96
    50f4:	50 e0       	ldi	r21, 0x00	; 0
    50f6:	60 e0       	ldi	r22, 0x00	; 0
    50f8:	70 e0       	ldi	r23, 0x00	; 0
    50fa:	8c e0       	ldi	r24, 0x0C	; 12
    50fc:	99 e0       	ldi	r25, 0x09	; 9
    50fe:	0e 94 9c 5c 	call	0xb938	; 0xb938 <eeprom_write_block>
				portEXIT_CRITICAL();
    5102:	0f 90       	pop	r0
				// only the first 6 bytes are used for CRC calculation
				crc16 = calculateCRC(6);
    5104:	0f be       	out	0x3f, r0	; 63
    5106:	86 e0       	ldi	r24, 0x06	; 6
				frame[6] = crc16 >> 8; // split crc into 2 bytes
    5108:	a9 de       	rcall	.-686    	; 0x4e5c <calculateCRC>
    510a:	ec ec       	ldi	r30, 0xCC	; 204
    510c:	f7 e0       	ldi	r31, 0x07	; 7
				frame[7] = crc16 & 0xFF;
    510e:	96 83       	std	Z+6, r25	; 0x06
				
				// a function 16 response is an echo of the first 6 bytes from the request + 2 crc bytes
				
				sendPacket(8);
    5110:	87 83       	std	Z+7, r24	; 0x07
    5112:	88 e0       	ldi	r24, 0x08	; 8
    5114:	cc de       	rcall	.-616    	; 0x4eae <sendPacket>
    5116:	05 c0       	rjmp	.+10     	; 0x5122 <modbus_update+0x1ee>
	if(port_0)buffer=xSerialAvailableChar( &xSerialPort );
	else if (port_3)buffer=xSerialAvailableChar( &xSerial3Port );
	
	//avrSerialPrintf("buffer = %d \r\n",buffer );
	//avrSerialPrintf("overflow= %d \r\n",overflow);
	if (overflow){ return;}//exceptionResponse(OVERFLOW_BUFF);
    5118:	80 91 85 07 	lds	r24, 0x0785	; 0x800785 <overflow>
    511c:	88 23       	and	r24, r24
    511e:	09 f4       	brne	.+2      	; 0x5122 <modbus_update+0x1ee>
    5120:	2e cf       	rjmp	.-420    	; 0x4f7e <modbus_update+0x4a>
			
		}
		else {return;}// exceptionResponse(CHECKSUM_FAIL);
	}
	else {return;}//exceptionResponse(ERROR_FUNC);
}
    5122:	df 91       	pop	r29
    5124:	cf 91       	pop	r28
    5126:	1f 91       	pop	r17
    5128:	0f 91       	pop	r16
    512a:	ff 90       	pop	r15
    512c:	ef 90       	pop	r14
    512e:	df 90       	pop	r13
    5130:	cf 90       	pop	r12
    5132:	bf 90       	pop	r11
    5134:	af 90       	pop	r10
    5136:	08 95       	ret

00005138 <StartHeatPump>:
}

//------------------------------------------------

void StartHeatPump(TimerHandle_t xTimer)
{
    5138:	8f 92       	push	r8
    513a:	9f 92       	push	r9
    513c:	af 92       	push	r10
    513e:	bf 92       	push	r11
    5140:	cf 92       	push	r12
    5142:	df 92       	push	r13
    5144:	ef 92       	push	r14
    5146:	ff 92       	push	r15
    5148:	0f 93       	push	r16
    514a:	1f 93       	push	r17
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    514c:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    5150:	fc 01       	movw	r30, r24
	TickType_t period;
	period=(TickType_t)EEpromData.Compressor_delay;
    5152:	20 91 0c 09 	lds	r18, 0x090C	; 0x80090c <EEpromData>
	period*=1000;
    5156:	30 e0       	ldi	r19, 0x00	; 0
    5158:	a8 ee       	ldi	r26, 0xE8	; 232
    515a:	b3 e0       	ldi	r27, 0x03	; 3
    515c:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    5160:	4b 01       	movw	r8, r22
    5162:	5c 01       	movw	r10, r24
	//xSerialxPrintf(&xSerial3Port,"StartHeatPump\r\n");
	if((*pxTimerID) == uxStartDelayHeatPTimer_1_ID) {
    5164:	80 81       	ld	r24, Z
    5166:	82 30       	cpi	r24, 0x02	; 2
    5168:	09 f0       	breq	.+2      	; 0x516c <StartHeatPump+0x34>
    516a:	40 c0       	rjmp	.+128    	; 0x51ec <StartHeatPump+0xb4>
		xSerialxPrintf(&xSerial3Port,"StartHeatPump_1\r\n");
    516c:	83 ea       	ldi	r24, 0xA3	; 163
    516e:	92 e0       	ldi	r25, 0x02	; 2
    5170:	9f 93       	push	r25
    5172:	8f 93       	push	r24
    5174:	8a ea       	ldi	r24, 0xAA	; 170
    5176:	97 e0       	ldi	r25, 0x07	; 7
    5178:	9f 93       	push	r25
    517a:	8f 93       	push	r24
    517c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_1 ==0)
    5180:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5184:	0f 90       	pop	r0
    5186:	0f 90       	pop	r0
    5188:	0f 90       	pop	r0
    518a:	0f 90       	pop	r0
    518c:	83 fd       	sbrc	r24, 3
    518e:	70 c0       	rjmp	.+224    	; 0x5270 <StartHeatPump+0x138>
		{
			
			//xSerialxPrintf(&xSerial3Port,"StartHeatPump_1\r\n");
			Comp_1.heatPOn=1;
    5190:	81 e0       	ldi	r24, 0x01	; 1
    5192:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <Comp_1+0xc>
			START_HEAT_PUMP_1;
    5196:	e2 e0       	ldi	r30, 0x02	; 2
    5198:	f1 e0       	ldi	r31, 0x01	; 1
    519a:	80 81       	ld	r24, Z
    519c:	88 60       	ori	r24, 0x08	; 8
    519e:	80 83       	st	Z, r24
			timeStartHeatP_1=time(&current_time);
    51a0:	87 e0       	ldi	r24, 0x07	; 7
    51a2:	99 e0       	ldi	r25, 0x09	; 9
    51a4:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    51a8:	60 93 80 0a 	sts	0x0A80, r22	; 0x800a80 <timeStartHeatP_1>
    51ac:	70 93 81 0a 	sts	0x0A81, r23	; 0x800a81 <timeStartHeatP_1+0x1>
    51b0:	80 93 82 0a 	sts	0x0A82, r24	; 0x800a82 <timeStartHeatP_1+0x2>
    51b4:	90 93 83 0a 	sts	0x0A83, r25	; 0x800a83 <timeStartHeatP_1+0x3>
			EEpromData.number_turnon_hiter_1+=1;			
    51b8:	ee e4       	ldi	r30, 0x4E	; 78
    51ba:	f9 e0       	ldi	r31, 0x09	; 9
    51bc:	80 81       	ld	r24, Z
    51be:	91 81       	ldd	r25, Z+1	; 0x01
    51c0:	01 96       	adiw	r24, 0x01	; 1
    51c2:	91 83       	std	Z+1, r25	; 0x01
    51c4:	80 83       	st	Z, r24
			xTimerChangePeriod( xStartCompressor_1,period, 100 );
    51c6:	0f 2e       	mov	r0, r31
    51c8:	f4 e6       	ldi	r31, 0x64	; 100
    51ca:	cf 2e       	mov	r12, r31
    51cc:	d1 2c       	mov	r13, r1
    51ce:	e1 2c       	mov	r14, r1
    51d0:	f1 2c       	mov	r15, r1
    51d2:	f0 2d       	mov	r31, r0
    51d4:	00 e0       	ldi	r16, 0x00	; 0
    51d6:	10 e0       	ldi	r17, 0x00	; 0
    51d8:	a5 01       	movw	r20, r10
    51da:	94 01       	movw	r18, r8
    51dc:	64 e0       	ldi	r22, 0x04	; 4
    51de:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <xStartCompressor_1>
    51e2:	90 91 8b 0a 	lds	r25, 0x0A8B	; 0x800a8b <xStartCompressor_1+0x1>
    51e6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    51ea:	42 c0       	rjmp	.+132    	; 0x5270 <StartHeatPump+0x138>
			
		}
	}

	else if((*pxTimerID) == uxStartDelayHeatPTimer_2_ID) {
    51ec:	8f 30       	cpi	r24, 0x0F	; 15
    51ee:	09 f0       	breq	.+2      	; 0x51f2 <StartHeatPump+0xba>
    51f0:	3f c0       	rjmp	.+126    	; 0x5270 <StartHeatPump+0x138>
		xSerialxPrintf(&xSerial3Port,"StartHeatPump_2\r\n");
    51f2:	85 eb       	ldi	r24, 0xB5	; 181
    51f4:	92 e0       	ldi	r25, 0x02	; 2
    51f6:	9f 93       	push	r25
    51f8:	8f 93       	push	r24
    51fa:	8a ea       	ldi	r24, 0xAA	; 170
    51fc:	97 e0       	ldi	r25, 0x07	; 7
    51fe:	9f 93       	push	r25
    5200:	8f 93       	push	r24
    5202:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_2 == 0)
    5206:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    520a:	0f 90       	pop	r0
    520c:	0f 90       	pop	r0
    520e:	0f 90       	pop	r0
    5210:	0f 90       	pop	r0
    5212:	84 fd       	sbrc	r24, 4
    5214:	2d c0       	rjmp	.+90     	; 0x5270 <StartHeatPump+0x138>
		{
			Comp_2.heatPOn=2;
    5216:	82 e0       	ldi	r24, 0x02	; 2
    5218:	80 93 02 0a 	sts	0x0A02, r24	; 0x800a02 <Comp_2+0xc>
			START_HEAT_PUMP_2;
    521c:	e2 e0       	ldi	r30, 0x02	; 2
    521e:	f1 e0       	ldi	r31, 0x01	; 1
    5220:	80 81       	ld	r24, Z
    5222:	80 61       	ori	r24, 0x10	; 16
    5224:	80 83       	st	Z, r24
			timeStartHeatP_2=time(&current_time);
    5226:	87 e0       	ldi	r24, 0x07	; 7
    5228:	99 e0       	ldi	r25, 0x09	; 9
    522a:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    522e:	60 93 94 0a 	sts	0x0A94, r22	; 0x800a94 <timeStartHeatP_2>
    5232:	70 93 95 0a 	sts	0x0A95, r23	; 0x800a95 <timeStartHeatP_2+0x1>
    5236:	80 93 96 0a 	sts	0x0A96, r24	; 0x800a96 <timeStartHeatP_2+0x2>
    523a:	90 93 97 0a 	sts	0x0A97, r25	; 0x800a97 <timeStartHeatP_2+0x3>
			EEpromData.number_turnon_hiter_2+=1;
    523e:	e2 e6       	ldi	r30, 0x62	; 98
    5240:	f9 e0       	ldi	r31, 0x09	; 9
    5242:	80 81       	ld	r24, Z
    5244:	91 81       	ldd	r25, Z+1	; 0x01
    5246:	01 96       	adiw	r24, 0x01	; 1
    5248:	91 83       	std	Z+1, r25	; 0x01
    524a:	80 83       	st	Z, r24
			xTimerChangePeriod( xStartCompressor_2,period, 100 );
    524c:	0f 2e       	mov	r0, r31
    524e:	f4 e6       	ldi	r31, 0x64	; 100
    5250:	cf 2e       	mov	r12, r31
    5252:	d1 2c       	mov	r13, r1
    5254:	e1 2c       	mov	r14, r1
    5256:	f1 2c       	mov	r15, r1
    5258:	f0 2d       	mov	r31, r0
    525a:	00 e0       	ldi	r16, 0x00	; 0
    525c:	10 e0       	ldi	r17, 0x00	; 0
    525e:	a5 01       	movw	r20, r10
    5260:	94 01       	movw	r18, r8
    5262:	64 e0       	ldi	r22, 0x04	; 4
    5264:	80 91 9c 0a 	lds	r24, 0x0A9C	; 0x800a9c <xStartCompressor_2>
    5268:	90 91 9d 0a 	lds	r25, 0x0A9D	; 0x800a9d <xStartCompressor_2+0x1>
    526c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		}
		
	}
}
    5270:	1f 91       	pop	r17
    5272:	0f 91       	pop	r16
    5274:	ff 90       	pop	r15
    5276:	ef 90       	pop	r14
    5278:	df 90       	pop	r13
    527a:	cf 90       	pop	r12
    527c:	bf 90       	pop	r11
    527e:	af 90       	pop	r10
    5280:	9f 90       	pop	r9
    5282:	8f 90       	pop	r8
    5284:	08 95       	ret

00005286 <SwitchRev_2_Time>:
		xTimerStart(xSwitchRevTwo_2_time, 0);
	}
}
//-------------------------------------------------------------------------
void SwitchRev_2_Time(TimerHandle_t xTimer)
{
    5286:	8f 92       	push	r8
    5288:	9f 92       	push	r9
    528a:	af 92       	push	r10
    528c:	bf 92       	push	r11
    528e:	cf 92       	push	r12
    5290:	df 92       	push	r13
    5292:	ef 92       	push	r14
    5294:	ff 92       	push	r15
    5296:	0f 93       	push	r16
    5298:	1f 93       	push	r17
    529a:	cf 93       	push	r28
    529c:	df 93       	push	r29
    529e:	ac 01       	movw	r20, r24
	portBASE_TYPE *pxTimerID;
	
	TickType_t period;
	period=(TickType_t)EEpromData.HeatingPump_delay;
    52a0:	20 91 0f 09 	lds	r18, 0x090F	; 0x80090f <EEpromData+0x3>
	period*=1000;
    52a4:	30 e0       	ldi	r19, 0x00	; 0
    52a6:	a8 ee       	ldi	r26, 0xE8	; 232
    52a8:	b3 e0       	ldi	r27, 0x03	; 3
    52aa:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    52ae:	4b 01       	movw	r8, r22
    52b0:	5c 01       	movw	r10, r24
	pxTimerID = pvTimerGetTimerID(xTimer);
    52b2:	ca 01       	movw	r24, r20
    52b4:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    52b8:	ec 01       	movw	r28, r24
	
	//xSerialxPrintf(&xSerial3Port,"SwitchRev_2\r\n");
	
	if((*pxTimerID) == uxSwitchRevTwo_1_ID)
    52ba:	88 81       	ld	r24, Y
    52bc:	8d 30       	cpi	r24, 0x0D	; 13
    52be:	29 f5       	brne	.+74     	; 0x530a <SwitchRev_2_Time+0x84>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_ON_1_2\r\n");
    52c0:	87 ec       	ldi	r24, 0xC7	; 199
    52c2:	92 e0       	ldi	r25, 0x02	; 2
    52c4:	9f 93       	push	r25
    52c6:	8f 93       	push	r24
    52c8:	8a ea       	ldi	r24, 0xAA	; 170
    52ca:	97 e0       	ldi	r25, 0x07	; 7
    52cc:	9f 93       	push	r25
    52ce:	8f 93       	push	r24
    52d0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_REV_VALVE_1 == 0){START_REV_VALVE_1;}//
    52d4:	0f 90       	pop	r0
    52d6:	0f 90       	pop	r0
    52d8:	0f 90       	pop	r0
    52da:	0f 90       	pop	r0
    52dc:	94 99       	sbic	0x12, 4	; 18
    52de:	02 c0       	rjmp	.+4      	; 0x52e4 <SwitchRev_2_Time+0x5e>
    52e0:	a4 9a       	sbi	0x14, 4	; 20
    52e2:	01 c0       	rjmp	.+2      	; 0x52e6 <SwitchRev_2_Time+0x60>
		else {STOP_REV_VALVE_1;}//xSerialxPrintf(&xSerial3Port,"SwitchRev_OFF_2\r\n");
    52e4:	a4 98       	cbi	0x14, 4	; 20
		xTimerChangePeriod( xStopHeatPump_1,period, 100 );
    52e6:	0f 2e       	mov	r0, r31
    52e8:	f4 e6       	ldi	r31, 0x64	; 100
    52ea:	cf 2e       	mov	r12, r31
    52ec:	d1 2c       	mov	r13, r1
    52ee:	e1 2c       	mov	r14, r1
    52f0:	f1 2c       	mov	r15, r1
    52f2:	f0 2d       	mov	r31, r0
    52f4:	00 e0       	ldi	r16, 0x00	; 0
    52f6:	10 e0       	ldi	r17, 0x00	; 0
    52f8:	a5 01       	movw	r20, r10
    52fa:	94 01       	movw	r18, r8
    52fc:	64 e0       	ldi	r22, 0x04	; 4
    52fe:	80 91 f9 08 	lds	r24, 0x08F9	; 0x8008f9 <xStopHeatPump_1>
    5302:	90 91 fa 08 	lds	r25, 0x08FA	; 0x8008fa <xStopHeatPump_1+0x1>
    5306:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
	if((*pxTimerID) == uxSwitchRevTwo_2_ID)
    530a:	88 81       	ld	r24, Y
    530c:	89 31       	cpi	r24, 0x19	; 25
    530e:	b9 f4       	brne	.+46     	; 0x533e <SwitchRev_2_Time+0xb8>
	{
		//xSerialxPrintf(&xSerial3Port,"SwitchRev_2_2\r\n");
		if(PIN_REV_VALVE_2 == 0) START_REV_VALVE_2;
    5310:	93 99       	sbic	0x12, 3	; 18
    5312:	02 c0       	rjmp	.+4      	; 0x5318 <SwitchRev_2_Time+0x92>
    5314:	a3 9a       	sbi	0x14, 3	; 20
    5316:	01 c0       	rjmp	.+2      	; 0x531a <SwitchRev_2_Time+0x94>
		else STOP_REV_VALVE_2;
    5318:	a3 98       	cbi	0x14, 3	; 20
		xTimerChangePeriod( xStopHeatPump_2,period, 100 );
    531a:	0f 2e       	mov	r0, r31
    531c:	f4 e6       	ldi	r31, 0x64	; 100
    531e:	cf 2e       	mov	r12, r31
    5320:	d1 2c       	mov	r13, r1
    5322:	e1 2c       	mov	r14, r1
    5324:	f1 2c       	mov	r15, r1
    5326:	f0 2d       	mov	r31, r0
    5328:	00 e0       	ldi	r16, 0x00	; 0
    532a:	10 e0       	ldi	r17, 0x00	; 0
    532c:	a5 01       	movw	r20, r10
    532e:	94 01       	movw	r18, r8
    5330:	64 e0       	ldi	r22, 0x04	; 4
    5332:	80 91 7a 0a 	lds	r24, 0x0A7A	; 0x800a7a <xStopHeatPump_2>
    5336:	90 91 7b 0a 	lds	r25, 0x0A7B	; 0x800a7b <xStopHeatPump_2+0x1>
    533a:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
}
    533e:	df 91       	pop	r29
    5340:	cf 91       	pop	r28
    5342:	1f 91       	pop	r17
    5344:	0f 91       	pop	r16
    5346:	ff 90       	pop	r15
    5348:	ef 90       	pop	r14
    534a:	df 90       	pop	r13
    534c:	cf 90       	pop	r12
    534e:	bf 90       	pop	r11
    5350:	af 90       	pop	r10
    5352:	9f 90       	pop	r9
    5354:	8f 90       	pop	r8
    5356:	08 95       	ret

00005358 <StartCheckErrors>:
}
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------
void StartCheckErrors(TimerHandle_t xTimer)
{
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5358:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
	
	
	if((*pxTimerID) == uxStartDelayChekErrTimer_1_ID){Comp_1.countError=0; Comp_1.checkErrors=true;xSerialxPrintf(&xSerial3Port,"StartCheckErrors_1\r\n");}
    535c:	fc 01       	movw	r30, r24
    535e:	80 81       	ld	r24, Z
    5360:	87 30       	cpi	r24, 0x07	; 7
    5362:	a1 f4       	brne	.+40     	; 0x538c <StartCheckErrors+0x34>
    5364:	ec e6       	ldi	r30, 0x6C	; 108
    5366:	f9 e0       	ldi	r31, 0x09	; 9
    5368:	11 8a       	std	Z+17, r1	; 0x11
    536a:	81 e0       	ldi	r24, 0x01	; 1
    536c:	85 83       	std	Z+5, r24	; 0x05
    536e:	8a ed       	ldi	r24, 0xDA	; 218
    5370:	92 e0       	ldi	r25, 0x02	; 2
    5372:	9f 93       	push	r25
    5374:	8f 93       	push	r24
    5376:	8a ea       	ldi	r24, 0xAA	; 170
    5378:	97 e0       	ldi	r25, 0x07	; 7
    537a:	9f 93       	push	r25
    537c:	8f 93       	push	r24
    537e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    5382:	0f 90       	pop	r0
    5384:	0f 90       	pop	r0
    5386:	0f 90       	pop	r0
    5388:	0f 90       	pop	r0
    538a:	08 95       	ret
	else if((*pxTimerID) == uxStartDelayChekErrTimer_2_ID){Comp_2.countError=0;Comp_2.checkErrors=true;xSerialxPrintf(&xSerial3Port,"StartCheckErrors_2\r\n");}
    538c:	84 31       	cpi	r24, 0x14	; 20
    538e:	99 f4       	brne	.+38     	; 0x53b6 <StartCheckErrors+0x5e>
    5390:	e6 ef       	ldi	r30, 0xF6	; 246
    5392:	f9 e0       	ldi	r31, 0x09	; 9
    5394:	11 8a       	std	Z+17, r1	; 0x11
    5396:	81 e0       	ldi	r24, 0x01	; 1
    5398:	85 83       	std	Z+5, r24	; 0x05
    539a:	8f ee       	ldi	r24, 0xEF	; 239
    539c:	92 e0       	ldi	r25, 0x02	; 2
    539e:	9f 93       	push	r25
    53a0:	8f 93       	push	r24
    53a2:	8a ea       	ldi	r24, 0xAA	; 170
    53a4:	97 e0       	ldi	r25, 0x07	; 7
    53a6:	9f 93       	push	r25
    53a8:	8f 93       	push	r24
    53aa:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    53ae:	0f 90       	pop	r0
    53b0:	0f 90       	pop	r0
    53b2:	0f 90       	pop	r0
    53b4:	0f 90       	pop	r0
    53b6:	08 95       	ret

000053b8 <StartCheckTrv>:
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------
void StartCheckTrv(TimerHandle_t xTimer)
{
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    53b8:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	if((*pxTimerID) == uxStartDelayChekTrvTimer_1_ID)       {Comp_1.checkTrv=true;xSerialxPrintf(&xSerial3Port,"StartCheckTrv_1\r\n");}
    53bc:	fc 01       	movw	r30, r24
    53be:	80 81       	ld	r24, Z
    53c0:	86 30       	cpi	r24, 0x06	; 6
    53c2:	91 f4       	brne	.+36     	; 0x53e8 <StartCheckTrv+0x30>
    53c4:	81 e0       	ldi	r24, 0x01	; 1
    53c6:	80 93 6d 09 	sts	0x096D, r24	; 0x80096d <Comp_1+0x1>
    53ca:	84 e0       	ldi	r24, 0x04	; 4
    53cc:	93 e0       	ldi	r25, 0x03	; 3
    53ce:	9f 93       	push	r25
    53d0:	8f 93       	push	r24
    53d2:	8a ea       	ldi	r24, 0xAA	; 170
    53d4:	97 e0       	ldi	r25, 0x07	; 7
    53d6:	9f 93       	push	r25
    53d8:	8f 93       	push	r24
    53da:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    53de:	0f 90       	pop	r0
    53e0:	0f 90       	pop	r0
    53e2:	0f 90       	pop	r0
    53e4:	0f 90       	pop	r0
    53e6:	08 95       	ret
	else if((*pxTimerID) == uxStartDelayChekTrvTimer_2_ID) {Comp_2.checkTrv=true;xSerialxPrintf(&xSerial3Port,"StartCheckTrv_2\r\n");}
    53e8:	83 31       	cpi	r24, 0x13	; 19
    53ea:	89 f4       	brne	.+34     	; 0x540e <StartCheckTrv+0x56>
    53ec:	81 e0       	ldi	r24, 0x01	; 1
    53ee:	80 93 f7 09 	sts	0x09F7, r24	; 0x8009f7 <Comp_2+0x1>
    53f2:	86 e1       	ldi	r24, 0x16	; 22
    53f4:	93 e0       	ldi	r25, 0x03	; 3
    53f6:	9f 93       	push	r25
    53f8:	8f 93       	push	r24
    53fa:	8a ea       	ldi	r24, 0xAA	; 170
    53fc:	97 e0       	ldi	r25, 0x07	; 7
    53fe:	9f 93       	push	r25
    5400:	8f 93       	push	r24
    5402:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    5406:	0f 90       	pop	r0
    5408:	0f 90       	pop	r0
    540a:	0f 90       	pop	r0
    540c:	0f 90       	pop	r0
    540e:	08 95       	ret

00005410 <StartReversingValve>:
		xTimerChangePeriod( xStartRevValve_2,period, 100 );
	}
	
}
//------------------------------------------------
void StartReversingValve(TimerHandle_t xTimer){
    5410:	8f 92       	push	r8
    5412:	9f 92       	push	r9
    5414:	af 92       	push	r10
    5416:	bf 92       	push	r11
    5418:	cf 92       	push	r12
    541a:	df 92       	push	r13
    541c:	ef 92       	push	r14
    541e:	ff 92       	push	r15
    5420:	0f 93       	push	r16
    5422:	1f 93       	push	r17
	TickType_t period;
	static time_t time_count_1;
	static time_t time_count_2;
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5424:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
	if((*pxTimerID) == uxStartDelayRevVTimer_1_ID)
    5428:	fc 01       	movw	r30, r24
    542a:	80 81       	ld	r24, Z
    542c:	84 30       	cpi	r24, 0x04	; 4
    542e:	09 f0       	breq	.+2      	; 0x5432 <StartReversingValve+0x22>
    5430:	3a c1       	rjmp	.+628    	; 0x56a6 <StartReversingValve+0x296>
	{	period=(TickType_t)EEpromData.Three_Way_delay;
    5432:	20 91 10 09 	lds	r18, 0x0910	; 0x800910 <EEpromData+0x4>
		period*=1000;
    5436:	30 e0       	ldi	r19, 0x00	; 0
    5438:	a8 ee       	ldi	r26, 0xE8	; 232
    543a:	b3 e0       	ldi	r27, 0x03	; 3
    543c:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
		period+=10000;
    5440:	4b 01       	movw	r8, r22
    5442:	5c 01       	movw	r10, r24
    5444:	f0 e1       	ldi	r31, 0x10	; 16
    5446:	8f 0e       	add	r8, r31
    5448:	f7 e2       	ldi	r31, 0x27	; 39
    544a:	9f 1e       	adc	r9, r31
    544c:	a1 1c       	adc	r10, r1
    544e:	b1 1c       	adc	r11, r1
		//////////////////////////////////////////

     //xSerialxPrintf(&xSerial3Port,"StartReversingValve\r\n");

		if(Comp_1.Cooling  )
    5450:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <Comp_1+0x3>
    5454:	88 23       	and	r24, r24
    5456:	09 f4       	brne	.+2      	; 0x545a <StartReversingValve+0x4a>
    5458:	86 c0       	rjmp	.+268    	; 0x5566 <StartReversingValve+0x156>
		{
			
			if(PIN_REV_VALVE_1 >0 && EEpromData.reversMod==1){
    545a:	94 9b       	sbis	0x12, 4	; 18
    545c:	59 c0       	rjmp	.+178    	; 0x5510 <StartReversingValve+0x100>
    545e:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <EEpromData+0x28>
    5462:	81 30       	cpi	r24, 0x01	; 1
    5464:	09 f0       	breq	.+2      	; 0x5468 <StartReversingValve+0x58>
    5466:	54 c0       	rjmp	.+168    	; 0x5510 <StartReversingValve+0x100>
				
				STOP_REV_VALVE_1;//
    5468:	a4 98       	cbi	0x14, 4	; 20
				xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    546a:	88 e2       	ldi	r24, 0x28	; 40
    546c:	93 e0       	ldi	r25, 0x03	; 3
    546e:	9f 93       	push	r25
    5470:	8f 93       	push	r24
    5472:	8a ea       	ldi	r24, 0xAA	; 170
    5474:	97 e0       	ldi	r25, 0x07	; 7
    5476:	9f 93       	push	r25
    5478:	8f 93       	push	r24
    547a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_1.revVOn=0;
    547e:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <Comp_1+0xe>
				time_count_1+= difftime(time(&current_time), timeStartRevV_1);
    5482:	c0 90 a3 0a 	lds	r12, 0x0AA3	; 0x800aa3 <timeStartRevV_1>
    5486:	d0 90 a4 0a 	lds	r13, 0x0AA4	; 0x800aa4 <timeStartRevV_1+0x1>
    548a:	e0 90 a5 0a 	lds	r14, 0x0AA5	; 0x800aa5 <timeStartRevV_1+0x2>
    548e:	f0 90 a6 0a 	lds	r15, 0x0AA6	; 0x800aa6 <timeStartRevV_1+0x3>
    5492:	87 e0       	ldi	r24, 0x07	; 7
    5494:	99 e0       	ldi	r25, 0x09	; 9
    5496:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    549a:	a7 01       	movw	r20, r14
    549c:	96 01       	movw	r18, r12
    549e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    54a2:	c0 90 51 07 	lds	r12, 0x0751	; 0x800751 <time_count_1.3176>
    54a6:	d0 90 52 07 	lds	r13, 0x0752	; 0x800752 <time_count_1.3176+0x1>
    54aa:	e0 90 53 07 	lds	r14, 0x0753	; 0x800753 <time_count_1.3176+0x2>
    54ae:	f0 90 54 07 	lds	r15, 0x0754	; 0x800754 <time_count_1.3176+0x3>
    54b2:	dc 01       	movw	r26, r24
    54b4:	cb 01       	movw	r24, r22
    54b6:	8c 0d       	add	r24, r12
    54b8:	9d 1d       	adc	r25, r13
    54ba:	ae 1d       	adc	r26, r14
    54bc:	bf 1d       	adc	r27, r15
    54be:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <time_count_1.3176>
    54c2:	90 93 52 07 	sts	0x0752, r25	; 0x800752 <time_count_1.3176+0x1>
    54c6:	a0 93 53 07 	sts	0x0753, r26	; 0x800753 <time_count_1.3176+0x2>
    54ca:	b0 93 54 07 	sts	0x0754, r27	; 0x800754 <time_count_1.3176+0x3>
				if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    54ce:	0f 90       	pop	r0
    54d0:	0f 90       	pop	r0
    54d2:	0f 90       	pop	r0
    54d4:	0f 90       	pop	r0
    54d6:	81 31       	cpi	r24, 0x11	; 17
    54d8:	9e 40       	sbci	r25, 0x0E	; 14
    54da:	a1 05       	cpc	r26, r1
    54dc:	b1 05       	cpc	r27, r1
    54de:	08 f4       	brcc	.+2      	; 0x54e2 <StartReversingValve+0xd2>
    54e0:	42 c0       	rjmp	.+132    	; 0x5566 <StartReversingValve+0x156>
    54e2:	ec e0       	ldi	r30, 0x0C	; 12
    54e4:	f9 e0       	ldi	r31, 0x09	; 9
    54e6:	80 ad       	ldd	r24, Z+56	; 0x38
    54e8:	91 ad       	ldd	r25, Z+57	; 0x39
    54ea:	01 96       	adiw	r24, 0x01	; 1
    54ec:	91 af       	std	Z+57, r25	; 0x39
    54ee:	80 af       	std	Z+56, r24	; 0x38
    54f0:	40 e6       	ldi	r20, 0x60	; 96
    54f2:	50 e0       	ldi	r21, 0x00	; 0
    54f4:	60 e0       	ldi	r22, 0x00	; 0
    54f6:	70 e0       	ldi	r23, 0x00	; 0
    54f8:	cf 01       	movw	r24, r30
    54fa:	0e 94 7b 5c 	call	0xb8f6	; 0xb8f6 <eeprom_update_block>
    54fe:	10 92 51 07 	sts	0x0751, r1	; 0x800751 <time_count_1.3176>
    5502:	10 92 52 07 	sts	0x0752, r1	; 0x800752 <time_count_1.3176+0x1>
    5506:	10 92 53 07 	sts	0x0753, r1	; 0x800753 <time_count_1.3176+0x2>
    550a:	10 92 54 07 	sts	0x0754, r1	; 0x800754 <time_count_1.3176+0x3>
    550e:	2b c0       	rjmp	.+86     	; 0x5566 <StartReversingValve+0x156>
				
				
			}
			else if(PIN_REV_VALVE_1 == 0 && EEpromData.reversMod==0){
    5510:	94 99       	sbic	0x12, 4	; 18
    5512:	29 c0       	rjmp	.+82     	; 0x5566 <StartReversingValve+0x156>
    5514:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <EEpromData+0x28>
    5518:	81 11       	cpse	r24, r1
    551a:	25 c0       	rjmp	.+74     	; 0x5566 <StartReversingValve+0x156>
				START_REV_VALVE_1;
    551c:	a4 9a       	sbi	0x14, 4	; 20
				Comp_1.revVOn=1;
    551e:	81 e0       	ldi	r24, 0x01	; 1
    5520:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <Comp_1+0xe>
				xSerialxPrintf(&xSerial3Port,"StarRevValve_1\r\n");
    5524:	89 e3       	ldi	r24, 0x39	; 57
    5526:	93 e0       	ldi	r25, 0x03	; 3
    5528:	9f 93       	push	r25
    552a:	8f 93       	push	r24
    552c:	8a ea       	ldi	r24, 0xAA	; 170
    552e:	97 e0       	ldi	r25, 0x07	; 7
    5530:	9f 93       	push	r25
    5532:	8f 93       	push	r24
    5534:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_1=time(&current_time);
    5538:	87 e0       	ldi	r24, 0x07	; 7
    553a:	99 e0       	ldi	r25, 0x09	; 9
    553c:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5540:	60 93 a3 0a 	sts	0x0AA3, r22	; 0x800aa3 <timeStartRevV_1>
    5544:	70 93 a4 0a 	sts	0x0AA4, r23	; 0x800aa4 <timeStartRevV_1+0x1>
    5548:	80 93 a5 0a 	sts	0x0AA5, r24	; 0x800aa5 <timeStartRevV_1+0x2>
    554c:	90 93 a6 0a 	sts	0x0AA6, r25	; 0x800aa6 <timeStartRevV_1+0x3>
				EEpromData.number_turnon_revers_1+=1;
    5550:	e0 e5       	ldi	r30, 0x50	; 80
    5552:	f9 e0       	ldi	r31, 0x09	; 9
    5554:	80 81       	ld	r24, Z
    5556:	91 81       	ldd	r25, Z+1	; 0x01
    5558:	01 96       	adiw	r24, 0x01	; 1
    555a:	91 83       	std	Z+1, r25	; 0x01
    555c:	80 83       	st	Z, r24
    555e:	0f 90       	pop	r0
    5560:	0f 90       	pop	r0
    5562:	0f 90       	pop	r0
    5564:	0f 90       	pop	r0
			}
		}
		if(Comp_1.heatingWater || Comp_1.Heating)
    5566:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <Comp_1+0x4>
    556a:	81 11       	cpse	r24, r1
    556c:	05 c0       	rjmp	.+10     	; 0x5578 <StartReversingValve+0x168>
    556e:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <Comp_1+0x2>
    5572:	88 23       	and	r24, r24
    5574:	09 f4       	brne	.+2      	; 0x5578 <StartReversingValve+0x168>
    5576:	84 c0       	rjmp	.+264    	; 0x5680 <StartReversingValve+0x270>
		{
			
			if(PIN_REV_VALVE_1 > 0 && EEpromData.reversMod==0){//
    5578:	94 9b       	sbis	0x12, 4	; 18
    557a:	58 c0       	rjmp	.+176    	; 0x562c <StartReversingValve+0x21c>
    557c:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <EEpromData+0x28>
    5580:	81 11       	cpse	r24, r1
    5582:	54 c0       	rjmp	.+168    	; 0x562c <StartReversingValve+0x21c>
				
				STOP_REV_VALVE_1;
    5584:	a4 98       	cbi	0x14, 4	; 20
				
				xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    5586:	88 e2       	ldi	r24, 0x28	; 40
    5588:	93 e0       	ldi	r25, 0x03	; 3
    558a:	9f 93       	push	r25
    558c:	8f 93       	push	r24
    558e:	8a ea       	ldi	r24, 0xAA	; 170
    5590:	97 e0       	ldi	r25, 0x07	; 7
    5592:	9f 93       	push	r25
    5594:	8f 93       	push	r24
    5596:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_1.revVOn=0;
    559a:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <Comp_1+0xe>
				time_count_1+= difftime(time(&current_time), timeStartRevV_1);
    559e:	c0 90 a3 0a 	lds	r12, 0x0AA3	; 0x800aa3 <timeStartRevV_1>
    55a2:	d0 90 a4 0a 	lds	r13, 0x0AA4	; 0x800aa4 <timeStartRevV_1+0x1>
    55a6:	e0 90 a5 0a 	lds	r14, 0x0AA5	; 0x800aa5 <timeStartRevV_1+0x2>
    55aa:	f0 90 a6 0a 	lds	r15, 0x0AA6	; 0x800aa6 <timeStartRevV_1+0x3>
    55ae:	87 e0       	ldi	r24, 0x07	; 7
    55b0:	99 e0       	ldi	r25, 0x09	; 9
    55b2:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    55b6:	a7 01       	movw	r20, r14
    55b8:	96 01       	movw	r18, r12
    55ba:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    55be:	c0 90 51 07 	lds	r12, 0x0751	; 0x800751 <time_count_1.3176>
    55c2:	d0 90 52 07 	lds	r13, 0x0752	; 0x800752 <time_count_1.3176+0x1>
    55c6:	e0 90 53 07 	lds	r14, 0x0753	; 0x800753 <time_count_1.3176+0x2>
    55ca:	f0 90 54 07 	lds	r15, 0x0754	; 0x800754 <time_count_1.3176+0x3>
    55ce:	dc 01       	movw	r26, r24
    55d0:	cb 01       	movw	r24, r22
    55d2:	8c 0d       	add	r24, r12
    55d4:	9d 1d       	adc	r25, r13
    55d6:	ae 1d       	adc	r26, r14
    55d8:	bf 1d       	adc	r27, r15
    55da:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <time_count_1.3176>
    55de:	90 93 52 07 	sts	0x0752, r25	; 0x800752 <time_count_1.3176+0x1>
    55e2:	a0 93 53 07 	sts	0x0753, r26	; 0x800753 <time_count_1.3176+0x2>
    55e6:	b0 93 54 07 	sts	0x0754, r27	; 0x800754 <time_count_1.3176+0x3>
				if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    55ea:	0f 90       	pop	r0
    55ec:	0f 90       	pop	r0
    55ee:	0f 90       	pop	r0
    55f0:	0f 90       	pop	r0
    55f2:	81 31       	cpi	r24, 0x11	; 17
    55f4:	9e 40       	sbci	r25, 0x0E	; 14
    55f6:	a1 05       	cpc	r26, r1
    55f8:	b1 05       	cpc	r27, r1
    55fa:	08 f4       	brcc	.+2      	; 0x55fe <StartReversingValve+0x1ee>
    55fc:	41 c0       	rjmp	.+130    	; 0x5680 <StartReversingValve+0x270>
    55fe:	ec e0       	ldi	r30, 0x0C	; 12
    5600:	f9 e0       	ldi	r31, 0x09	; 9
    5602:	80 ad       	ldd	r24, Z+56	; 0x38
    5604:	91 ad       	ldd	r25, Z+57	; 0x39
    5606:	01 96       	adiw	r24, 0x01	; 1
    5608:	91 af       	std	Z+57, r25	; 0x39
    560a:	80 af       	std	Z+56, r24	; 0x38
    560c:	40 e6       	ldi	r20, 0x60	; 96
    560e:	50 e0       	ldi	r21, 0x00	; 0
    5610:	60 e0       	ldi	r22, 0x00	; 0
    5612:	70 e0       	ldi	r23, 0x00	; 0
    5614:	cf 01       	movw	r24, r30
    5616:	0e 94 7b 5c 	call	0xb8f6	; 0xb8f6 <eeprom_update_block>
    561a:	10 92 51 07 	sts	0x0751, r1	; 0x800751 <time_count_1.3176>
    561e:	10 92 52 07 	sts	0x0752, r1	; 0x800752 <time_count_1.3176+0x1>
    5622:	10 92 53 07 	sts	0x0753, r1	; 0x800753 <time_count_1.3176+0x2>
    5626:	10 92 54 07 	sts	0x0754, r1	; 0x800754 <time_count_1.3176+0x3>
    562a:	2a c0       	rjmp	.+84     	; 0x5680 <StartReversingValve+0x270>
				
			}
			else if(PIN_REV_VALVE_1 == 0 && EEpromData.reversMod==1){
    562c:	94 99       	sbic	0x12, 4	; 18
    562e:	28 c0       	rjmp	.+80     	; 0x5680 <StartReversingValve+0x270>
    5630:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <EEpromData+0x28>
    5634:	81 30       	cpi	r24, 0x01	; 1
    5636:	21 f5       	brne	.+72     	; 0x5680 <StartReversingValve+0x270>
				START_REV_VALVE_1;
    5638:	a4 9a       	sbi	0x14, 4	; 20
				Comp_1.revVOn=1;
    563a:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <Comp_1+0xe>
				xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    563e:	88 e2       	ldi	r24, 0x28	; 40
    5640:	93 e0       	ldi	r25, 0x03	; 3
    5642:	9f 93       	push	r25
    5644:	8f 93       	push	r24
    5646:	8a ea       	ldi	r24, 0xAA	; 170
    5648:	97 e0       	ldi	r25, 0x07	; 7
    564a:	9f 93       	push	r25
    564c:	8f 93       	push	r24
    564e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_1=time(&current_time);
    5652:	87 e0       	ldi	r24, 0x07	; 7
    5654:	99 e0       	ldi	r25, 0x09	; 9
    5656:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    565a:	60 93 a3 0a 	sts	0x0AA3, r22	; 0x800aa3 <timeStartRevV_1>
    565e:	70 93 a4 0a 	sts	0x0AA4, r23	; 0x800aa4 <timeStartRevV_1+0x1>
    5662:	80 93 a5 0a 	sts	0x0AA5, r24	; 0x800aa5 <timeStartRevV_1+0x2>
    5666:	90 93 a6 0a 	sts	0x0AA6, r25	; 0x800aa6 <timeStartRevV_1+0x3>
				EEpromData.number_turnon_revers_1+=1;
    566a:	e0 e5       	ldi	r30, 0x50	; 80
    566c:	f9 e0       	ldi	r31, 0x09	; 9
    566e:	80 81       	ld	r24, Z
    5670:	91 81       	ldd	r25, Z+1	; 0x01
    5672:	01 96       	adiw	r24, 0x01	; 1
    5674:	91 83       	std	Z+1, r25	; 0x01
    5676:	80 83       	st	Z, r24
    5678:	0f 90       	pop	r0
    567a:	0f 90       	pop	r0
    567c:	0f 90       	pop	r0
    567e:	0f 90       	pop	r0
			}
		}
		
		xTimerChangePeriod( xStartThreeWay,period, 100 );
    5680:	0f 2e       	mov	r0, r31
    5682:	f4 e6       	ldi	r31, 0x64	; 100
    5684:	cf 2e       	mov	r12, r31
    5686:	d1 2c       	mov	r13, r1
    5688:	e1 2c       	mov	r14, r1
    568a:	f1 2c       	mov	r15, r1
    568c:	f0 2d       	mov	r31, r0
    568e:	00 e0       	ldi	r16, 0x00	; 0
    5690:	10 e0       	ldi	r17, 0x00	; 0
    5692:	a5 01       	movw	r20, r10
    5694:	94 01       	movw	r18, r8
    5696:	64 e0       	ldi	r22, 0x04	; 4
    5698:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <xStartThreeWay>
    569c:	90 91 e5 09 	lds	r25, 0x09E5	; 0x8009e5 <xStartThreeWay+0x1>
    56a0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    56a4:	34 c1       	rjmp	.+616    	; 0x590e <StartReversingValve+0x4fe>
		
	}
	else if((*pxTimerID) == uxStartDelayRevVTimer_2_ID)
    56a6:	81 31       	cpi	r24, 0x11	; 17
    56a8:	09 f0       	breq	.+2      	; 0x56ac <StartReversingValve+0x29c>
    56aa:	31 c1       	rjmp	.+610    	; 0x590e <StartReversingValve+0x4fe>
	{
		period=(TickType_t)EEpromData.HeatingPump_delay;
    56ac:	20 91 0f 09 	lds	r18, 0x090F	; 0x80090f <EEpromData+0x3>
		period*=1000;
    56b0:	30 e0       	ldi	r19, 0x00	; 0
    56b2:	a8 ee       	ldi	r26, 0xE8	; 232
    56b4:	b3 e0       	ldi	r27, 0x03	; 3
    56b6:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    56ba:	4b 01       	movw	r8, r22
    56bc:	5c 01       	movw	r10, r24
		
		if(Comp_2.Cooling)
    56be:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <Comp_2+0x3>
    56c2:	88 23       	and	r24, r24
    56c4:	09 f4       	brne	.+2      	; 0x56c8 <StartReversingValve+0x2b8>
    56c6:	87 c0       	rjmp	.+270    	; 0x57d6 <StartReversingValve+0x3c6>
		{
			if(PIN_REV_VALVE_2 >0 && EEpromData.reversMod==1){
    56c8:	93 9b       	sbis	0x12, 3	; 18
    56ca:	5a c0       	rjmp	.+180    	; 0x5780 <StartReversingValve+0x370>
    56cc:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <EEpromData+0x28>
    56d0:	81 30       	cpi	r24, 0x01	; 1
    56d2:	09 f0       	breq	.+2      	; 0x56d6 <StartReversingValve+0x2c6>
    56d4:	55 c0       	rjmp	.+170    	; 0x5780 <StartReversingValve+0x370>
				
				STOP_REV_VALVE_2;//
    56d6:	a3 98       	cbi	0x14, 3	; 20
				
				xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    56d8:	8a e4       	ldi	r24, 0x4A	; 74
    56da:	93 e0       	ldi	r25, 0x03	; 3
    56dc:	9f 93       	push	r25
    56de:	8f 93       	push	r24
    56e0:	8a ea       	ldi	r24, 0xAA	; 170
    56e2:	97 e0       	ldi	r25, 0x07	; 7
    56e4:	9f 93       	push	r25
    56e6:	8f 93       	push	r24
    56e8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_2.revVOn=0;
    56ec:	10 92 04 0a 	sts	0x0A04, r1	; 0x800a04 <Comp_2+0xe>
				time_count_2+= difftime(time(&current_time), timeStartRevV_2);
    56f0:	c0 90 be 0a 	lds	r12, 0x0ABE	; 0x800abe <timeStartRevV_2>
    56f4:	d0 90 bf 0a 	lds	r13, 0x0ABF	; 0x800abf <timeStartRevV_2+0x1>
    56f8:	e0 90 c0 0a 	lds	r14, 0x0AC0	; 0x800ac0 <timeStartRevV_2+0x2>
    56fc:	f0 90 c1 0a 	lds	r15, 0x0AC1	; 0x800ac1 <timeStartRevV_2+0x3>
    5700:	87 e0       	ldi	r24, 0x07	; 7
    5702:	99 e0       	ldi	r25, 0x09	; 9
    5704:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5708:	a7 01       	movw	r20, r14
    570a:	96 01       	movw	r18, r12
    570c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5710:	c0 90 4d 07 	lds	r12, 0x074D	; 0x80074d <time_count_2.3177>
    5714:	d0 90 4e 07 	lds	r13, 0x074E	; 0x80074e <time_count_2.3177+0x1>
    5718:	e0 90 4f 07 	lds	r14, 0x074F	; 0x80074f <time_count_2.3177+0x2>
    571c:	f0 90 50 07 	lds	r15, 0x0750	; 0x800750 <time_count_2.3177+0x3>
    5720:	dc 01       	movw	r26, r24
    5722:	cb 01       	movw	r24, r22
    5724:	8c 0d       	add	r24, r12
    5726:	9d 1d       	adc	r25, r13
    5728:	ae 1d       	adc	r26, r14
    572a:	bf 1d       	adc	r27, r15
    572c:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <time_count_2.3177>
    5730:	90 93 4e 07 	sts	0x074E, r25	; 0x80074e <time_count_2.3177+0x1>
    5734:	a0 93 4f 07 	sts	0x074F, r26	; 0x80074f <time_count_2.3177+0x2>
    5738:	b0 93 50 07 	sts	0x0750, r27	; 0x800750 <time_count_2.3177+0x3>
				if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    573c:	0f 90       	pop	r0
    573e:	0f 90       	pop	r0
    5740:	0f 90       	pop	r0
    5742:	0f 90       	pop	r0
    5744:	81 31       	cpi	r24, 0x11	; 17
    5746:	9e 40       	sbci	r25, 0x0E	; 14
    5748:	a1 05       	cpc	r26, r1
    574a:	b1 05       	cpc	r27, r1
    574c:	08 f4       	brcc	.+2      	; 0x5750 <StartReversingValve+0x340>
    574e:	43 c0       	rjmp	.+134    	; 0x57d6 <StartReversingValve+0x3c6>
    5750:	ea e5       	ldi	r30, 0x5A	; 90
    5752:	f9 e0       	ldi	r31, 0x09	; 9
    5754:	80 81       	ld	r24, Z
    5756:	91 81       	ldd	r25, Z+1	; 0x01
    5758:	01 96       	adiw	r24, 0x01	; 1
    575a:	91 83       	std	Z+1, r25	; 0x01
    575c:	80 83       	st	Z, r24
    575e:	40 e6       	ldi	r20, 0x60	; 96
    5760:	50 e0       	ldi	r21, 0x00	; 0
    5762:	60 e0       	ldi	r22, 0x00	; 0
    5764:	70 e0       	ldi	r23, 0x00	; 0
    5766:	8c e0       	ldi	r24, 0x0C	; 12
    5768:	99 e0       	ldi	r25, 0x09	; 9
    576a:	0e 94 7b 5c 	call	0xb8f6	; 0xb8f6 <eeprom_update_block>
    576e:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <time_count_2.3177>
    5772:	10 92 4e 07 	sts	0x074E, r1	; 0x80074e <time_count_2.3177+0x1>
    5776:	10 92 4f 07 	sts	0x074F, r1	; 0x80074f <time_count_2.3177+0x2>
    577a:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <time_count_2.3177+0x3>
    577e:	2b c0       	rjmp	.+86     	; 0x57d6 <StartReversingValve+0x3c6>
				
				
			}
			else if(PIN_REV_VALVE_2 == 0 && EEpromData.reversMod==0){
    5780:	93 99       	sbic	0x12, 3	; 18
    5782:	29 c0       	rjmp	.+82     	; 0x57d6 <StartReversingValve+0x3c6>
    5784:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <EEpromData+0x28>
    5788:	81 11       	cpse	r24, r1
    578a:	25 c0       	rjmp	.+74     	; 0x57d6 <StartReversingValve+0x3c6>
				START_REV_VALVE_2;
    578c:	a3 9a       	sbi	0x14, 3	; 20
				Comp_1.revVOn=1;
    578e:	81 e0       	ldi	r24, 0x01	; 1
    5790:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <Comp_1+0xe>
				xSerialxPrintf(&xSerial3Port,"StarRevValve_2\r\n");
    5794:	8b e5       	ldi	r24, 0x5B	; 91
    5796:	93 e0       	ldi	r25, 0x03	; 3
    5798:	9f 93       	push	r25
    579a:	8f 93       	push	r24
    579c:	8a ea       	ldi	r24, 0xAA	; 170
    579e:	97 e0       	ldi	r25, 0x07	; 7
    57a0:	9f 93       	push	r25
    57a2:	8f 93       	push	r24
    57a4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_2=time(&current_time);
    57a8:	87 e0       	ldi	r24, 0x07	; 7
    57aa:	99 e0       	ldi	r25, 0x09	; 9
    57ac:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    57b0:	60 93 be 0a 	sts	0x0ABE, r22	; 0x800abe <timeStartRevV_2>
    57b4:	70 93 bf 0a 	sts	0x0ABF, r23	; 0x800abf <timeStartRevV_2+0x1>
    57b8:	80 93 c0 0a 	sts	0x0AC0, r24	; 0x800ac0 <timeStartRevV_2+0x2>
    57bc:	90 93 c1 0a 	sts	0x0AC1, r25	; 0x800ac1 <timeStartRevV_2+0x3>
				EEpromData.number_turnon_revers_2+=1;
    57c0:	e4 e6       	ldi	r30, 0x64	; 100
    57c2:	f9 e0       	ldi	r31, 0x09	; 9
    57c4:	80 81       	ld	r24, Z
    57c6:	91 81       	ldd	r25, Z+1	; 0x01
    57c8:	01 96       	adiw	r24, 0x01	; 1
    57ca:	91 83       	std	Z+1, r25	; 0x01
    57cc:	80 83       	st	Z, r24
    57ce:	0f 90       	pop	r0
    57d0:	0f 90       	pop	r0
    57d2:	0f 90       	pop	r0
    57d4:	0f 90       	pop	r0
			}
		}
		if(Comp_2.Heating)
    57d6:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <Comp_2+0x2>
    57da:	88 23       	and	r24, r24
    57dc:	09 f4       	brne	.+2      	; 0x57e0 <StartReversingValve+0x3d0>
    57de:	85 c0       	rjmp	.+266    	; 0x58ea <StartReversingValve+0x4da>
		{
			if(PIN_REV_VALVE_2 > 0 && EEpromData.reversMod==0){//
    57e0:	93 9b       	sbis	0x12, 3	; 18
    57e2:	59 c0       	rjmp	.+178    	; 0x5896 <StartReversingValve+0x486>
    57e4:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <EEpromData+0x28>
    57e8:	81 11       	cpse	r24, r1
    57ea:	55 c0       	rjmp	.+170    	; 0x5896 <StartReversingValve+0x486>
				
				STOP_REV_VALVE_2;
    57ec:	a3 98       	cbi	0x14, 3	; 20
				
				xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    57ee:	8a e4       	ldi	r24, 0x4A	; 74
    57f0:	93 e0       	ldi	r25, 0x03	; 3
    57f2:	9f 93       	push	r25
    57f4:	8f 93       	push	r24
    57f6:	8a ea       	ldi	r24, 0xAA	; 170
    57f8:	97 e0       	ldi	r25, 0x07	; 7
    57fa:	9f 93       	push	r25
    57fc:	8f 93       	push	r24
    57fe:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_2.revVOn=0;
    5802:	10 92 04 0a 	sts	0x0A04, r1	; 0x800a04 <Comp_2+0xe>
				time_count_2+= difftime(time(&current_time), timeStartRevV_2);
    5806:	c0 90 be 0a 	lds	r12, 0x0ABE	; 0x800abe <timeStartRevV_2>
    580a:	d0 90 bf 0a 	lds	r13, 0x0ABF	; 0x800abf <timeStartRevV_2+0x1>
    580e:	e0 90 c0 0a 	lds	r14, 0x0AC0	; 0x800ac0 <timeStartRevV_2+0x2>
    5812:	f0 90 c1 0a 	lds	r15, 0x0AC1	; 0x800ac1 <timeStartRevV_2+0x3>
    5816:	87 e0       	ldi	r24, 0x07	; 7
    5818:	99 e0       	ldi	r25, 0x09	; 9
    581a:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    581e:	a7 01       	movw	r20, r14
    5820:	96 01       	movw	r18, r12
    5822:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5826:	c0 90 4d 07 	lds	r12, 0x074D	; 0x80074d <time_count_2.3177>
    582a:	d0 90 4e 07 	lds	r13, 0x074E	; 0x80074e <time_count_2.3177+0x1>
    582e:	e0 90 4f 07 	lds	r14, 0x074F	; 0x80074f <time_count_2.3177+0x2>
    5832:	f0 90 50 07 	lds	r15, 0x0750	; 0x800750 <time_count_2.3177+0x3>
    5836:	dc 01       	movw	r26, r24
    5838:	cb 01       	movw	r24, r22
    583a:	8c 0d       	add	r24, r12
    583c:	9d 1d       	adc	r25, r13
    583e:	ae 1d       	adc	r26, r14
    5840:	bf 1d       	adc	r27, r15
    5842:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <time_count_2.3177>
    5846:	90 93 4e 07 	sts	0x074E, r25	; 0x80074e <time_count_2.3177+0x1>
    584a:	a0 93 4f 07 	sts	0x074F, r26	; 0x80074f <time_count_2.3177+0x2>
    584e:	b0 93 50 07 	sts	0x0750, r27	; 0x800750 <time_count_2.3177+0x3>
				if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    5852:	0f 90       	pop	r0
    5854:	0f 90       	pop	r0
    5856:	0f 90       	pop	r0
    5858:	0f 90       	pop	r0
    585a:	81 31       	cpi	r24, 0x11	; 17
    585c:	9e 40       	sbci	r25, 0x0E	; 14
    585e:	a1 05       	cpc	r26, r1
    5860:	b1 05       	cpc	r27, r1
    5862:	08 f4       	brcc	.+2      	; 0x5866 <StartReversingValve+0x456>
    5864:	42 c0       	rjmp	.+132    	; 0x58ea <StartReversingValve+0x4da>
    5866:	ea e5       	ldi	r30, 0x5A	; 90
    5868:	f9 e0       	ldi	r31, 0x09	; 9
    586a:	80 81       	ld	r24, Z
    586c:	91 81       	ldd	r25, Z+1	; 0x01
    586e:	01 96       	adiw	r24, 0x01	; 1
    5870:	91 83       	std	Z+1, r25	; 0x01
    5872:	80 83       	st	Z, r24
    5874:	40 e6       	ldi	r20, 0x60	; 96
    5876:	50 e0       	ldi	r21, 0x00	; 0
    5878:	60 e0       	ldi	r22, 0x00	; 0
    587a:	70 e0       	ldi	r23, 0x00	; 0
    587c:	8c e0       	ldi	r24, 0x0C	; 12
    587e:	99 e0       	ldi	r25, 0x09	; 9
    5880:	0e 94 7b 5c 	call	0xb8f6	; 0xb8f6 <eeprom_update_block>
    5884:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <time_count_2.3177>
    5888:	10 92 4e 07 	sts	0x074E, r1	; 0x80074e <time_count_2.3177+0x1>
    588c:	10 92 4f 07 	sts	0x074F, r1	; 0x80074f <time_count_2.3177+0x2>
    5890:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <time_count_2.3177+0x3>
    5894:	2a c0       	rjmp	.+84     	; 0x58ea <StartReversingValve+0x4da>
				
			}
			else if(PIN_REV_VALVE_2 == 0 && EEpromData.reversMod==1){
    5896:	93 99       	sbic	0x12, 3	; 18
    5898:	28 c0       	rjmp	.+80     	; 0x58ea <StartReversingValve+0x4da>
    589a:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <EEpromData+0x28>
    589e:	81 30       	cpi	r24, 0x01	; 1
    58a0:	21 f5       	brne	.+72     	; 0x58ea <StartReversingValve+0x4da>
				START_REV_VALVE_2;
    58a2:	a3 9a       	sbi	0x14, 3	; 20
				Comp_2.revVOn=1;
    58a4:	80 93 04 0a 	sts	0x0A04, r24	; 0x800a04 <Comp_2+0xe>
				xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    58a8:	8a e4       	ldi	r24, 0x4A	; 74
    58aa:	93 e0       	ldi	r25, 0x03	; 3
    58ac:	9f 93       	push	r25
    58ae:	8f 93       	push	r24
    58b0:	8a ea       	ldi	r24, 0xAA	; 170
    58b2:	97 e0       	ldi	r25, 0x07	; 7
    58b4:	9f 93       	push	r25
    58b6:	8f 93       	push	r24
    58b8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_2=time(&current_time);
    58bc:	87 e0       	ldi	r24, 0x07	; 7
    58be:	99 e0       	ldi	r25, 0x09	; 9
    58c0:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    58c4:	60 93 be 0a 	sts	0x0ABE, r22	; 0x800abe <timeStartRevV_2>
    58c8:	70 93 bf 0a 	sts	0x0ABF, r23	; 0x800abf <timeStartRevV_2+0x1>
    58cc:	80 93 c0 0a 	sts	0x0AC0, r24	; 0x800ac0 <timeStartRevV_2+0x2>
    58d0:	90 93 c1 0a 	sts	0x0AC1, r25	; 0x800ac1 <timeStartRevV_2+0x3>
				EEpromData.number_turnon_revers_2+=1;
    58d4:	e4 e6       	ldi	r30, 0x64	; 100
    58d6:	f9 e0       	ldi	r31, 0x09	; 9
    58d8:	80 81       	ld	r24, Z
    58da:	91 81       	ldd	r25, Z+1	; 0x01
    58dc:	01 96       	adiw	r24, 0x01	; 1
    58de:	91 83       	std	Z+1, r25	; 0x01
    58e0:	80 83       	st	Z, r24
    58e2:	0f 90       	pop	r0
    58e4:	0f 90       	pop	r0
    58e6:	0f 90       	pop	r0
    58e8:	0f 90       	pop	r0
			}
		}

		xTimerChangePeriod( xStartHeatPump_2,period, 100 );
    58ea:	0f 2e       	mov	r0, r31
    58ec:	f4 e6       	ldi	r31, 0x64	; 100
    58ee:	cf 2e       	mov	r12, r31
    58f0:	d1 2c       	mov	r13, r1
    58f2:	e1 2c       	mov	r14, r1
    58f4:	f1 2c       	mov	r15, r1
    58f6:	f0 2d       	mov	r31, r0
    58f8:	00 e0       	ldi	r16, 0x00	; 0
    58fa:	10 e0       	ldi	r17, 0x00	; 0
    58fc:	a5 01       	movw	r20, r10
    58fe:	94 01       	movw	r18, r8
    5900:	64 e0       	ldi	r22, 0x04	; 4
    5902:	80 91 e6 09 	lds	r24, 0x09E6	; 0x8009e6 <xStartHeatPump_2>
    5906:	90 91 e7 09 	lds	r25, 0x09E7	; 0x8009e7 <xStartHeatPump_2+0x1>
    590a:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}


}
    590e:	1f 91       	pop	r17
    5910:	0f 91       	pop	r16
    5912:	ff 90       	pop	r15
    5914:	ef 90       	pop	r14
    5916:	df 90       	pop	r13
    5918:	cf 90       	pop	r12
    591a:	bf 90       	pop	r11
    591c:	af 90       	pop	r10
    591e:	9f 90       	pop	r9
    5920:	8f 90       	pop	r8
    5922:	08 95       	ret

00005924 <StartThreeWay>:
//------------------------------------------------
void StartThreeWay()
{
    5924:	8f 92       	push	r8
    5926:	9f 92       	push	r9
    5928:	af 92       	push	r10
    592a:	bf 92       	push	r11
    592c:	cf 92       	push	r12
    592e:	df 92       	push	r13
    5930:	ef 92       	push	r14
    5932:	ff 92       	push	r15
    5934:	0f 93       	push	r16
    5936:	1f 93       	push	r17
	static time_t time_count;
    TickType_t period;
	
	
	period=(TickType_t)EEpromData.HeatingPump_delay;
    5938:	20 91 0f 09 	lds	r18, 0x090F	; 0x80090f <EEpromData+0x3>
	period*=1000;
    593c:	30 e0       	ldi	r19, 0x00	; 0
    593e:	a8 ee       	ldi	r26, 0xE8	; 232
    5940:	b3 e0       	ldi	r27, 0x03	; 3
    5942:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    5946:	4b 01       	movw	r8, r22
    5948:	5c 01       	movw	r10, r24
	xSerialxPrintf(&xSerial3Port,"StartThreeWay\r\n");
    594a:	8c e6       	ldi	r24, 0x6C	; 108
    594c:	93 e0       	ldi	r25, 0x03	; 3
    594e:	9f 93       	push	r25
    5950:	8f 93       	push	r24
    5952:	8a ea       	ldi	r24, 0xAA	; 170
    5954:	97 e0       	ldi	r25, 0x07	; 7
    5956:	9f 93       	push	r25
    5958:	8f 93       	push	r24
    595a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(Comp_1.heatingWater)
    595e:	0f 90       	pop	r0
    5960:	0f 90       	pop	r0
    5962:	0f 90       	pop	r0
    5964:	0f 90       	pop	r0
    5966:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <Comp_1+0x4>
    596a:	88 23       	and	r24, r24
    596c:	71 f1       	breq	.+92     	; 0x59ca <StartThreeWay+0xa6>
	{
		
		if(PIN_THWAY_VALVE == 0)//
    596e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5972:	88 23       	and	r24, r24
    5974:	e4 f0       	brlt	.+56     	; 0x59ae <StartThreeWay+0x8a>
		{
			START_THWAY_VALVE;
    5976:	e2 e0       	ldi	r30, 0x02	; 2
    5978:	f1 e0       	ldi	r31, 0x01	; 1
    597a:	80 81       	ld	r24, Z
    597c:	80 68       	ori	r24, 0x80	; 128
    597e:	80 83       	st	Z, r24
			
			//xSerialxPrintf(&xSerial3Port,"StartThreeWay\r\n");
			Comp_1.threeWOn=1;
    5980:	81 e0       	ldi	r24, 0x01	; 1
    5982:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <Comp_1+0xd>
			timeStartThreeW=time(&current_time);
    5986:	87 e0       	ldi	r24, 0x07	; 7
    5988:	99 e0       	ldi	r25, 0x09	; 9
    598a:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    598e:	60 93 98 0a 	sts	0x0A98, r22	; 0x800a98 <timeStartThreeW>
    5992:	70 93 99 0a 	sts	0x0A99, r23	; 0x800a99 <timeStartThreeW+0x1>
    5996:	80 93 9a 0a 	sts	0x0A9A, r24	; 0x800a9a <timeStartThreeW+0x2>
    599a:	90 93 9b 0a 	sts	0x0A9B, r25	; 0x800a9b <timeStartThreeW+0x3>
			EEpromData.number_turnon_threeway+=1;
    599e:	e2 e5       	ldi	r30, 0x52	; 82
    59a0:	f9 e0       	ldi	r31, 0x09	; 9
    59a2:	80 81       	ld	r24, Z
    59a4:	91 81       	ldd	r25, Z+1	; 0x01
    59a6:	01 96       	adiw	r24, 0x01	; 1
    59a8:	91 83       	std	Z+1, r25	; 0x01
    59aa:	80 83       	st	Z, r24
    59ac:	0e c0       	rjmp	.+28     	; 0x59ca <StartThreeWay+0xa6>
			
		} else xSerialxPrintf(&xSerial3Port,"StopThreeWay\r\n");
    59ae:	8c e7       	ldi	r24, 0x7C	; 124
    59b0:	93 e0       	ldi	r25, 0x03	; 3
    59b2:	9f 93       	push	r25
    59b4:	8f 93       	push	r24
    59b6:	8a ea       	ldi	r24, 0xAA	; 170
    59b8:	97 e0       	ldi	r25, 0x07	; 7
    59ba:	9f 93       	push	r25
    59bc:	8f 93       	push	r24
    59be:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    59c2:	0f 90       	pop	r0
    59c4:	0f 90       	pop	r0
    59c6:	0f 90       	pop	r0
    59c8:	0f 90       	pop	r0
	}
	if(Comp_1.Heating || Comp_1.Cooling)
    59ca:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <Comp_1+0x2>
    59ce:	81 11       	cpse	r24, r1
    59d0:	05 c0       	rjmp	.+10     	; 0x59dc <StartThreeWay+0xb8>
    59d2:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <Comp_1+0x3>
    59d6:	88 23       	and	r24, r24
    59d8:	09 f4       	brne	.+2      	; 0x59dc <StartThreeWay+0xb8>
    59da:	4d c0       	rjmp	.+154    	; 0x5a76 <StartThreeWay+0x152>
	{
		if(PIN_THWAY_VALVE > 0)//
    59dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    59e0:	88 23       	and	r24, r24
    59e2:	0c f0       	brlt	.+2      	; 0x59e6 <StartThreeWay+0xc2>
    59e4:	48 c0       	rjmp	.+144    	; 0x5a76 <StartThreeWay+0x152>
		{
			STOP_THWAY_VALVE;
    59e6:	e2 e0       	ldi	r30, 0x02	; 2
    59e8:	f1 e0       	ldi	r31, 0x01	; 1
    59ea:	80 81       	ld	r24, Z
    59ec:	8f 77       	andi	r24, 0x7F	; 127
    59ee:	80 83       	st	Z, r24
			
			//xSerialxPrintf(&xSerial3Port,"StopThreeWay\r\n");
			Comp_1.threeWOn=0;
    59f0:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <Comp_1+0xd>
			time_count+= difftime(time(&current_time), timeStartThreeW);
    59f4:	c0 90 98 0a 	lds	r12, 0x0A98	; 0x800a98 <timeStartThreeW>
    59f8:	d0 90 99 0a 	lds	r13, 0x0A99	; 0x800a99 <timeStartThreeW+0x1>
    59fc:	e0 90 9a 0a 	lds	r14, 0x0A9A	; 0x800a9a <timeStartThreeW+0x2>
    5a00:	f0 90 9b 0a 	lds	r15, 0x0A9B	; 0x800a9b <timeStartThreeW+0x3>
    5a04:	87 e0       	ldi	r24, 0x07	; 7
    5a06:	99 e0       	ldi	r25, 0x09	; 9
    5a08:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5a0c:	a7 01       	movw	r20, r14
    5a0e:	96 01       	movw	r18, r12
    5a10:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5a14:	c0 90 49 07 	lds	r12, 0x0749	; 0x800749 <time_count.3181>
    5a18:	d0 90 4a 07 	lds	r13, 0x074A	; 0x80074a <time_count.3181+0x1>
    5a1c:	e0 90 4b 07 	lds	r14, 0x074B	; 0x80074b <time_count.3181+0x2>
    5a20:	f0 90 4c 07 	lds	r15, 0x074C	; 0x80074c <time_count.3181+0x3>
    5a24:	dc 01       	movw	r26, r24
    5a26:	cb 01       	movw	r24, r22
    5a28:	8c 0d       	add	r24, r12
    5a2a:	9d 1d       	adc	r25, r13
    5a2c:	ae 1d       	adc	r26, r14
    5a2e:	bf 1d       	adc	r27, r15
    5a30:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <time_count.3181>
    5a34:	90 93 4a 07 	sts	0x074A, r25	; 0x80074a <time_count.3181+0x1>
    5a38:	a0 93 4b 07 	sts	0x074B, r26	; 0x80074b <time_count.3181+0x2>
    5a3c:	b0 93 4c 07 	sts	0x074C, r27	; 0x80074c <time_count.3181+0x3>
			if(time_count>ONE_HOUR){EEpromData.time_threeway++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count=0;}
    5a40:	81 31       	cpi	r24, 0x11	; 17
    5a42:	9e 40       	sbci	r25, 0x0E	; 14
    5a44:	a1 05       	cpc	r26, r1
    5a46:	b1 05       	cpc	r27, r1
    5a48:	b0 f0       	brcs	.+44     	; 0x5a76 <StartThreeWay+0x152>
    5a4a:	ec e0       	ldi	r30, 0x0C	; 12
    5a4c:	f9 e0       	ldi	r31, 0x09	; 9
    5a4e:	84 ad       	ldd	r24, Z+60	; 0x3c
    5a50:	95 ad       	ldd	r25, Z+61	; 0x3d
    5a52:	01 96       	adiw	r24, 0x01	; 1
    5a54:	95 af       	std	Z+61, r25	; 0x3d
    5a56:	84 af       	std	Z+60, r24	; 0x3c
    5a58:	40 e6       	ldi	r20, 0x60	; 96
    5a5a:	50 e0       	ldi	r21, 0x00	; 0
    5a5c:	60 e0       	ldi	r22, 0x00	; 0
    5a5e:	70 e0       	ldi	r23, 0x00	; 0
    5a60:	cf 01       	movw	r24, r30
    5a62:	0e 94 7b 5c 	call	0xb8f6	; 0xb8f6 <eeprom_update_block>
    5a66:	10 92 49 07 	sts	0x0749, r1	; 0x800749 <time_count.3181>
    5a6a:	10 92 4a 07 	sts	0x074A, r1	; 0x80074a <time_count.3181+0x1>
    5a6e:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <time_count.3181+0x2>
    5a72:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <time_count.3181+0x3>
		}
	}
	
	xTimerChangePeriod( xStartHeatPump_1,period, 100 );
    5a76:	0f 2e       	mov	r0, r31
    5a78:	f4 e6       	ldi	r31, 0x64	; 100
    5a7a:	cf 2e       	mov	r12, r31
    5a7c:	d1 2c       	mov	r13, r1
    5a7e:	e1 2c       	mov	r14, r1
    5a80:	f1 2c       	mov	r15, r1
    5a82:	f0 2d       	mov	r31, r0
    5a84:	00 e0       	ldi	r16, 0x00	; 0
    5a86:	10 e0       	ldi	r17, 0x00	; 0
    5a88:	a5 01       	movw	r20, r10
    5a8a:	94 01       	movw	r18, r8
    5a8c:	64 e0       	ldi	r22, 0x04	; 4
    5a8e:	80 91 88 0a 	lds	r24, 0x0A88	; 0x800a88 <xStartHeatPump_1>
    5a92:	90 91 89 0a 	lds	r25, 0x0A89	; 0x800a89 <xStartHeatPump_1+0x1>
    5a96:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	
}
    5a9a:	1f 91       	pop	r17
    5a9c:	0f 91       	pop	r16
    5a9e:	ff 90       	pop	r15
    5aa0:	ef 90       	pop	r14
    5aa2:	df 90       	pop	r13
    5aa4:	cf 90       	pop	r12
    5aa6:	bf 90       	pop	r11
    5aa8:	af 90       	pop	r10
    5aaa:	9f 90       	pop	r9
    5aac:	8f 90       	pop	r8
    5aae:	08 95       	ret

00005ab0 <HeatPump_Stop>:
		
	}
}
//-------------------------------------------------------------------------
void HeatPump_Stop(TimerHandle_t xTimer)
{
    5ab0:	8f 92       	push	r8
    5ab2:	9f 92       	push	r9
    5ab4:	af 92       	push	r10
    5ab6:	bf 92       	push	r11
    5ab8:	cf 92       	push	r12
    5aba:	df 92       	push	r13
    5abc:	ef 92       	push	r14
    5abe:	ff 92       	push	r15
    5ac0:	0f 93       	push	r16
    5ac2:	1f 93       	push	r17
	
	TickType_t period;
	
	//xSerialxPrintf(&xSerial3Port,"StopHeatPump\r\n");
	
	pxTimerID = pvTimerGetTimerID(xTimer);
    5ac4:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>

	if((*pxTimerID) == uxStopDelayHeatPTimer_1_ID)
    5ac8:	fc 01       	movw	r30, r24
    5aca:	80 81       	ld	r24, Z
    5acc:	88 30       	cpi	r24, 0x08	; 8
    5ace:	09 f0       	breq	.+2      	; 0x5ad2 <HeatPump_Stop+0x22>
    5ad0:	76 c0       	rjmp	.+236    	; 0x5bbe <HeatPump_Stop+0x10e>
	{
		period=(TickType_t)EEpromData.Three_Way_delay;
    5ad2:	20 91 10 09 	lds	r18, 0x0910	; 0x800910 <EEpromData+0x4>
		period*=1000;
    5ad6:	30 e0       	ldi	r19, 0x00	; 0
    5ad8:	a8 ee       	ldi	r26, 0xE8	; 232
    5ada:	b3 e0       	ldi	r27, 0x03	; 3
    5adc:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    5ae0:	4b 01       	movw	r8, r22
    5ae2:	5c 01       	movw	r10, r24
		
		if(PIN_HEAT_PUMP_1 > 0)//
    5ae4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5ae8:	83 ff       	sbrs	r24, 3
    5aea:	56 c0       	rjmp	.+172    	; 0x5b98 <HeatPump_Stop+0xe8>
		{
			STOP_HEAT_PUMP_1;
    5aec:	e2 e0       	ldi	r30, 0x02	; 2
    5aee:	f1 e0       	ldi	r31, 0x01	; 1
    5af0:	80 81       	ld	r24, Z
    5af2:	87 7f       	andi	r24, 0xF7	; 247
    5af4:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopHeatPump_1\r\n");
    5af6:	8b e8       	ldi	r24, 0x8B	; 139
    5af8:	93 e0       	ldi	r25, 0x03	; 3
    5afa:	9f 93       	push	r25
    5afc:	8f 93       	push	r24
    5afe:	8a ea       	ldi	r24, 0xAA	; 170
    5b00:	97 e0       	ldi	r25, 0x07	; 7
    5b02:	9f 93       	push	r25
    5b04:	8f 93       	push	r24
    5b06:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.heatPOn=0;
    5b0a:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <Comp_1+0xc>
			time_count_1+= difftime(time(&current_time), timeStartHeatP_1);
    5b0e:	c0 90 80 0a 	lds	r12, 0x0A80	; 0x800a80 <timeStartHeatP_1>
    5b12:	d0 90 81 0a 	lds	r13, 0x0A81	; 0x800a81 <timeStartHeatP_1+0x1>
    5b16:	e0 90 82 0a 	lds	r14, 0x0A82	; 0x800a82 <timeStartHeatP_1+0x2>
    5b1a:	f0 90 83 0a 	lds	r15, 0x0A83	; 0x800a83 <timeStartHeatP_1+0x3>
    5b1e:	87 e0       	ldi	r24, 0x07	; 7
    5b20:	99 e0       	ldi	r25, 0x09	; 9
    5b22:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5b26:	a7 01       	movw	r20, r14
    5b28:	96 01       	movw	r18, r12
    5b2a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5b2e:	c0 90 3d 07 	lds	r12, 0x073D	; 0x80073d <time_count_1.3210>
    5b32:	d0 90 3e 07 	lds	r13, 0x073E	; 0x80073e <time_count_1.3210+0x1>
    5b36:	e0 90 3f 07 	lds	r14, 0x073F	; 0x80073f <time_count_1.3210+0x2>
    5b3a:	f0 90 40 07 	lds	r15, 0x0740	; 0x800740 <time_count_1.3210+0x3>
    5b3e:	dc 01       	movw	r26, r24
    5b40:	cb 01       	movw	r24, r22
    5b42:	8c 0d       	add	r24, r12
    5b44:	9d 1d       	adc	r25, r13
    5b46:	ae 1d       	adc	r26, r14
    5b48:	bf 1d       	adc	r27, r15
    5b4a:	80 93 3d 07 	sts	0x073D, r24	; 0x80073d <time_count_1.3210>
    5b4e:	90 93 3e 07 	sts	0x073E, r25	; 0x80073e <time_count_1.3210+0x1>
    5b52:	a0 93 3f 07 	sts	0x073F, r26	; 0x80073f <time_count_1.3210+0x2>
    5b56:	b0 93 40 07 	sts	0x0740, r27	; 0x800740 <time_count_1.3210+0x3>
			if(time_count_1>ONE_HOUR){EEpromData.time_pump_hiter_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    5b5a:	0f 90       	pop	r0
    5b5c:	0f 90       	pop	r0
    5b5e:	0f 90       	pop	r0
    5b60:	0f 90       	pop	r0
    5b62:	81 31       	cpi	r24, 0x11	; 17
    5b64:	9e 40       	sbci	r25, 0x0E	; 14
    5b66:	a1 05       	cpc	r26, r1
    5b68:	b1 05       	cpc	r27, r1
    5b6a:	b0 f0       	brcs	.+44     	; 0x5b98 <HeatPump_Stop+0xe8>
    5b6c:	ec e0       	ldi	r30, 0x0C	; 12
    5b6e:	f9 e0       	ldi	r31, 0x09	; 9
    5b70:	84 a9       	ldd	r24, Z+52	; 0x34
    5b72:	95 a9       	ldd	r25, Z+53	; 0x35
    5b74:	01 96       	adiw	r24, 0x01	; 1
    5b76:	95 ab       	std	Z+53, r25	; 0x35
    5b78:	84 ab       	std	Z+52, r24	; 0x34
    5b7a:	40 e6       	ldi	r20, 0x60	; 96
    5b7c:	50 e0       	ldi	r21, 0x00	; 0
    5b7e:	60 e0       	ldi	r22, 0x00	; 0
    5b80:	70 e0       	ldi	r23, 0x00	; 0
    5b82:	cf 01       	movw	r24, r30
    5b84:	0e 94 7b 5c 	call	0xb8f6	; 0xb8f6 <eeprom_update_block>
    5b88:	10 92 3d 07 	sts	0x073D, r1	; 0x80073d <time_count_1.3210>
    5b8c:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <time_count_1.3210+0x1>
    5b90:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <time_count_1.3210+0x2>
    5b94:	10 92 40 07 	sts	0x0740, r1	; 0x800740 <time_count_1.3210+0x3>
			
		}
		xTimerChangePeriod( xStopThreeWay,period, 100 );
    5b98:	0f 2e       	mov	r0, r31
    5b9a:	f4 e6       	ldi	r31, 0x64	; 100
    5b9c:	cf 2e       	mov	r12, r31
    5b9e:	d1 2c       	mov	r13, r1
    5ba0:	e1 2c       	mov	r14, r1
    5ba2:	f1 2c       	mov	r15, r1
    5ba4:	f0 2d       	mov	r31, r0
    5ba6:	00 e0       	ldi	r16, 0x00	; 0
    5ba8:	10 e0       	ldi	r17, 0x00	; 0
    5baa:	a5 01       	movw	r20, r10
    5bac:	94 01       	movw	r18, r8
    5bae:	64 e0       	ldi	r22, 0x04	; 4
    5bb0:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <xStopThreeWay>
    5bb4:	90 91 e3 09 	lds	r25, 0x09E3	; 0x8009e3 <xStopThreeWay+0x1>
    5bb8:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    5bbc:	7b c0       	rjmp	.+246    	; 0x5cb4 <HeatPump_Stop+0x204>
		//xTimerStart(xStopThreeWay, 0);
	}

	else if((*pxTimerID) == uxStopDelayHeatPTimer_2_ID)
    5bbe:	85 31       	cpi	r24, 0x15	; 21
    5bc0:	09 f0       	breq	.+2      	; 0x5bc4 <HeatPump_Stop+0x114>
    5bc2:	78 c0       	rjmp	.+240    	; 0x5cb4 <HeatPump_Stop+0x204>
	{
		period=(TickType_t)EEpromData.Revers_Valve_delay;
		period*=1000;
		xSerialxPrintf(&xSerial3Port,"StopHeatPump_2\r\n");
    5bc4:	8c e9       	ldi	r24, 0x9C	; 156
    5bc6:	93 e0       	ldi	r25, 0x03	; 3
    5bc8:	9f 93       	push	r25
    5bca:	8f 93       	push	r24
    5bcc:	8a ea       	ldi	r24, 0xAA	; 170
    5bce:	97 e0       	ldi	r25, 0x07	; 7
    5bd0:	9f 93       	push	r25
    5bd2:	8f 93       	push	r24
    5bd4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_2 > 0)//
    5bd8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5bdc:	0f 90       	pop	r0
    5bde:	0f 90       	pop	r0
    5be0:	0f 90       	pop	r0
    5be2:	0f 90       	pop	r0
    5be4:	84 ff       	sbrs	r24, 4
    5be6:	49 c0       	rjmp	.+146    	; 0x5c7a <HeatPump_Stop+0x1ca>
		{
			STOP_HEAT_PUMP_2;
    5be8:	e2 e0       	ldi	r30, 0x02	; 2
    5bea:	f1 e0       	ldi	r31, 0x01	; 1
    5bec:	80 81       	ld	r24, Z
    5bee:	8f 7e       	andi	r24, 0xEF	; 239
    5bf0:	80 83       	st	Z, r24
			
			
			Comp_2.heatPOn=0;
    5bf2:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <Comp_2+0xc>
			time_count_2+= difftime(time(&current_time), timeStartHeatP_2);
    5bf6:	c0 90 94 0a 	lds	r12, 0x0A94	; 0x800a94 <timeStartHeatP_2>
    5bfa:	d0 90 95 0a 	lds	r13, 0x0A95	; 0x800a95 <timeStartHeatP_2+0x1>
    5bfe:	e0 90 96 0a 	lds	r14, 0x0A96	; 0x800a96 <timeStartHeatP_2+0x2>
    5c02:	f0 90 97 0a 	lds	r15, 0x0A97	; 0x800a97 <timeStartHeatP_2+0x3>
    5c06:	87 e0       	ldi	r24, 0x07	; 7
    5c08:	99 e0       	ldi	r25, 0x09	; 9
    5c0a:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5c0e:	a7 01       	movw	r20, r14
    5c10:	96 01       	movw	r18, r12
    5c12:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5c16:	c0 90 39 07 	lds	r12, 0x0739	; 0x800739 <time_count_2.3211>
    5c1a:	d0 90 3a 07 	lds	r13, 0x073A	; 0x80073a <time_count_2.3211+0x1>
    5c1e:	e0 90 3b 07 	lds	r14, 0x073B	; 0x80073b <time_count_2.3211+0x2>
    5c22:	f0 90 3c 07 	lds	r15, 0x073C	; 0x80073c <time_count_2.3211+0x3>
    5c26:	dc 01       	movw	r26, r24
    5c28:	cb 01       	movw	r24, r22
    5c2a:	8c 0d       	add	r24, r12
    5c2c:	9d 1d       	adc	r25, r13
    5c2e:	ae 1d       	adc	r26, r14
    5c30:	bf 1d       	adc	r27, r15
    5c32:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <time_count_2.3211>
    5c36:	90 93 3a 07 	sts	0x073A, r25	; 0x80073a <time_count_2.3211+0x1>
    5c3a:	a0 93 3b 07 	sts	0x073B, r26	; 0x80073b <time_count_2.3211+0x2>
    5c3e:	b0 93 3c 07 	sts	0x073C, r27	; 0x80073c <time_count_2.3211+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_pump_hiter_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    5c42:	81 31       	cpi	r24, 0x11	; 17
    5c44:	9e 40       	sbci	r25, 0x0E	; 14
    5c46:	a1 05       	cpc	r26, r1
    5c48:	b1 05       	cpc	r27, r1
    5c4a:	b8 f0       	brcs	.+46     	; 0x5c7a <HeatPump_Stop+0x1ca>
    5c4c:	e6 e5       	ldi	r30, 0x56	; 86
    5c4e:	f9 e0       	ldi	r31, 0x09	; 9
    5c50:	80 81       	ld	r24, Z
    5c52:	91 81       	ldd	r25, Z+1	; 0x01
    5c54:	01 96       	adiw	r24, 0x01	; 1
    5c56:	91 83       	std	Z+1, r25	; 0x01
    5c58:	80 83       	st	Z, r24
    5c5a:	40 e6       	ldi	r20, 0x60	; 96
    5c5c:	50 e0       	ldi	r21, 0x00	; 0
    5c5e:	60 e0       	ldi	r22, 0x00	; 0
    5c60:	70 e0       	ldi	r23, 0x00	; 0
    5c62:	8c e0       	ldi	r24, 0x0C	; 12
    5c64:	99 e0       	ldi	r25, 0x09	; 9
    5c66:	0e 94 7b 5c 	call	0xb8f6	; 0xb8f6 <eeprom_update_block>
    5c6a:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <time_count_2.3211>
    5c6e:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <time_count_2.3211+0x1>
    5c72:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <time_count_2.3211+0x2>
    5c76:	10 92 3c 07 	sts	0x073C, r1	; 0x80073c <time_count_2.3211+0x3>
			
		}
		xTimerChangePeriod( xStopRevValve_2,(EEpromData.Revers_Valve_delay*1000) / portTICK_PERIOD_MS, 100 );
    5c7a:	40 91 0e 09 	lds	r20, 0x090E	; 0x80090e <EEpromData+0x2>
    5c7e:	88 ee       	ldi	r24, 0xE8	; 232
    5c80:	93 e0       	ldi	r25, 0x03	; 3
    5c82:	48 9f       	mul	r20, r24
    5c84:	90 01       	movw	r18, r0
    5c86:	49 9f       	mul	r20, r25
    5c88:	30 0d       	add	r19, r0
    5c8a:	11 24       	eor	r1, r1
    5c8c:	03 2e       	mov	r0, r19
    5c8e:	00 0c       	add	r0, r0
    5c90:	44 0b       	sbc	r20, r20
    5c92:	55 0b       	sbc	r21, r21
    5c94:	0f 2e       	mov	r0, r31
    5c96:	f4 e6       	ldi	r31, 0x64	; 100
    5c98:	cf 2e       	mov	r12, r31
    5c9a:	d1 2c       	mov	r13, r1
    5c9c:	e1 2c       	mov	r14, r1
    5c9e:	f1 2c       	mov	r15, r1
    5ca0:	f0 2d       	mov	r31, r0
    5ca2:	00 e0       	ldi	r16, 0x00	; 0
    5ca4:	10 e0       	ldi	r17, 0x00	; 0
    5ca6:	64 e0       	ldi	r22, 0x04	; 4
    5ca8:	80 91 01 09 	lds	r24, 0x0901	; 0x800901 <xStopRevValve_2>
    5cac:	90 91 02 09 	lds	r25, 0x0902	; 0x800902 <xStopRevValve_2+0x1>
    5cb0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
}
    5cb4:	1f 91       	pop	r17
    5cb6:	0f 91       	pop	r16
    5cb8:	ff 90       	pop	r15
    5cba:	ef 90       	pop	r14
    5cbc:	df 90       	pop	r13
    5cbe:	cf 90       	pop	r12
    5cc0:	bf 90       	pop	r11
    5cc2:	af 90       	pop	r10
    5cc4:	9f 90       	pop	r9
    5cc6:	8f 90       	pop	r8
    5cc8:	08 95       	ret

00005cca <ThreeWay_Stop>:
//-------------------------------------------------------------------------
void ThreeWay_Stop()
{
    5cca:	8f 92       	push	r8
    5ccc:	9f 92       	push	r9
    5cce:	af 92       	push	r10
    5cd0:	bf 92       	push	r11
    5cd2:	cf 92       	push	r12
    5cd4:	df 92       	push	r13
    5cd6:	ef 92       	push	r14
    5cd8:	ff 92       	push	r15
    5cda:	0f 93       	push	r16
    5cdc:	1f 93       	push	r17
	static time_t time_count;
	TickType_t period;
	period=(TickType_t)EEpromData.Revers_Valve_delay;
    5cde:	20 91 0e 09 	lds	r18, 0x090E	; 0x80090e <EEpromData+0x2>
	period*=1000;
    5ce2:	30 e0       	ldi	r19, 0x00	; 0
    5ce4:	a8 ee       	ldi	r26, 0xE8	; 232
    5ce6:	b3 e0       	ldi	r27, 0x03	; 3
    5ce8:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    5cec:	4b 01       	movw	r8, r22
    5cee:	5c 01       	movw	r10, r24
	
	xSerialxPrintf(&xSerial3Port,"ThreeWay_Stop\r\n");
    5cf0:	8d ea       	ldi	r24, 0xAD	; 173
    5cf2:	93 e0       	ldi	r25, 0x03	; 3
    5cf4:	9f 93       	push	r25
    5cf6:	8f 93       	push	r24
    5cf8:	8a ea       	ldi	r24, 0xAA	; 170
    5cfa:	97 e0       	ldi	r25, 0x07	; 7
    5cfc:	9f 93       	push	r25
    5cfe:	8f 93       	push	r24
    5d00:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(PIN_THWAY_VALVE > 0)
    5d04:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5d08:	0f 90       	pop	r0
    5d0a:	0f 90       	pop	r0
    5d0c:	0f 90       	pop	r0
    5d0e:	0f 90       	pop	r0
    5d10:	88 23       	and	r24, r24
    5d12:	0c f0       	brlt	.+2      	; 0x5d16 <ThreeWay_Stop+0x4c>
    5d14:	48 c0       	rjmp	.+144    	; 0x5da6 <ThreeWay_Stop+0xdc>
	{
		STOP_THWAY_VALVE;
    5d16:	e2 e0       	ldi	r30, 0x02	; 2
    5d18:	f1 e0       	ldi	r31, 0x01	; 1
    5d1a:	80 81       	ld	r24, Z
    5d1c:	8f 77       	andi	r24, 0x7F	; 127
    5d1e:	80 83       	st	Z, r24
		//xSerialxPrintf(&xSerial3Port,"ThreeWay_Stop\r\n");
		Comp_1.threeWOn=0;
    5d20:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <Comp_1+0xd>
		time_count+= difftime(time(&current_time), timeStartThreeW);
    5d24:	c0 90 98 0a 	lds	r12, 0x0A98	; 0x800a98 <timeStartThreeW>
    5d28:	d0 90 99 0a 	lds	r13, 0x0A99	; 0x800a99 <timeStartThreeW+0x1>
    5d2c:	e0 90 9a 0a 	lds	r14, 0x0A9A	; 0x800a9a <timeStartThreeW+0x2>
    5d30:	f0 90 9b 0a 	lds	r15, 0x0A9B	; 0x800a9b <timeStartThreeW+0x3>
    5d34:	87 e0       	ldi	r24, 0x07	; 7
    5d36:	99 e0       	ldi	r25, 0x09	; 9
    5d38:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5d3c:	a7 01       	movw	r20, r14
    5d3e:	96 01       	movw	r18, r12
    5d40:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5d44:	c0 90 35 07 	lds	r12, 0x0735	; 0x800735 <time_count.3216>
    5d48:	d0 90 36 07 	lds	r13, 0x0736	; 0x800736 <time_count.3216+0x1>
    5d4c:	e0 90 37 07 	lds	r14, 0x0737	; 0x800737 <time_count.3216+0x2>
    5d50:	f0 90 38 07 	lds	r15, 0x0738	; 0x800738 <time_count.3216+0x3>
    5d54:	dc 01       	movw	r26, r24
    5d56:	cb 01       	movw	r24, r22
    5d58:	8c 0d       	add	r24, r12
    5d5a:	9d 1d       	adc	r25, r13
    5d5c:	ae 1d       	adc	r26, r14
    5d5e:	bf 1d       	adc	r27, r15
    5d60:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <time_count.3216>
    5d64:	90 93 36 07 	sts	0x0736, r25	; 0x800736 <time_count.3216+0x1>
    5d68:	a0 93 37 07 	sts	0x0737, r26	; 0x800737 <time_count.3216+0x2>
    5d6c:	b0 93 38 07 	sts	0x0738, r27	; 0x800738 <time_count.3216+0x3>
		if(time_count>ONE_HOUR){EEpromData.time_threeway++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count=0;}
    5d70:	81 31       	cpi	r24, 0x11	; 17
    5d72:	9e 40       	sbci	r25, 0x0E	; 14
    5d74:	a1 05       	cpc	r26, r1
    5d76:	b1 05       	cpc	r27, r1
    5d78:	b0 f0       	brcs	.+44     	; 0x5da6 <ThreeWay_Stop+0xdc>
    5d7a:	ec e0       	ldi	r30, 0x0C	; 12
    5d7c:	f9 e0       	ldi	r31, 0x09	; 9
    5d7e:	84 ad       	ldd	r24, Z+60	; 0x3c
    5d80:	95 ad       	ldd	r25, Z+61	; 0x3d
    5d82:	01 96       	adiw	r24, 0x01	; 1
    5d84:	95 af       	std	Z+61, r25	; 0x3d
    5d86:	84 af       	std	Z+60, r24	; 0x3c
    5d88:	40 e6       	ldi	r20, 0x60	; 96
    5d8a:	50 e0       	ldi	r21, 0x00	; 0
    5d8c:	60 e0       	ldi	r22, 0x00	; 0
    5d8e:	70 e0       	ldi	r23, 0x00	; 0
    5d90:	cf 01       	movw	r24, r30
    5d92:	0e 94 7b 5c 	call	0xb8f6	; 0xb8f6 <eeprom_update_block>
    5d96:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <time_count.3216>
    5d9a:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <time_count.3216+0x1>
    5d9e:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <time_count.3216+0x2>
    5da2:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <time_count.3216+0x3>
		
	} else{ }//xSerialxPrintf(&xSerial3Port,"ThreeWay_isRun\r\n");
	xTimerChangePeriod( xStopRevValve_1,period, 100 );
    5da6:	0f 2e       	mov	r0, r31
    5da8:	f4 e6       	ldi	r31, 0x64	; 100
    5daa:	cf 2e       	mov	r12, r31
    5dac:	d1 2c       	mov	r13, r1
    5dae:	e1 2c       	mov	r14, r1
    5db0:	f1 2c       	mov	r15, r1
    5db2:	f0 2d       	mov	r31, r0
    5db4:	00 e0       	ldi	r16, 0x00	; 0
    5db6:	10 e0       	ldi	r17, 0x00	; 0
    5db8:	a5 01       	movw	r20, r10
    5dba:	94 01       	movw	r18, r8
    5dbc:	64 e0       	ldi	r22, 0x04	; 4
    5dbe:	80 91 7c 0a 	lds	r24, 0x0A7C	; 0x800a7c <xStopRevValve_1>
    5dc2:	90 91 7d 0a 	lds	r25, 0x0A7D	; 0x800a7d <xStopRevValve_1+0x1>
    5dc6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	
}
    5dca:	1f 91       	pop	r17
    5dcc:	0f 91       	pop	r16
    5dce:	ff 90       	pop	r15
    5dd0:	ef 90       	pop	r14
    5dd2:	df 90       	pop	r13
    5dd4:	cf 90       	pop	r12
    5dd6:	bf 90       	pop	r11
    5dd8:	af 90       	pop	r10
    5dda:	9f 90       	pop	r9
    5ddc:	8f 90       	pop	r8
    5dde:	08 95       	ret

00005de0 <Revers_Stop>:

//-------------------------------------------------------------------------
void Revers_Stop(TimerHandle_t xTimer)
{
    5de0:	8f 92       	push	r8
    5de2:	9f 92       	push	r9
    5de4:	af 92       	push	r10
    5de6:	bf 92       	push	r11
    5de8:	cf 92       	push	r12
    5dea:	df 92       	push	r13
    5dec:	ef 92       	push	r14
    5dee:	ff 92       	push	r15
    5df0:	0f 93       	push	r16
    5df2:	1f 93       	push	r17
    5df4:	ac 01       	movw	r20, r24
	static time_t time_count_1;
	static time_t time_count_2;
	TickType_t period;
	period=(TickType_t)EEpromData.Source_Pump_delay;
    5df6:	20 91 0d 09 	lds	r18, 0x090D	; 0x80090d <EEpromData+0x1>
	period*=1000;
    5dfa:	30 e0       	ldi	r19, 0x00	; 0
    5dfc:	a8 ee       	ldi	r26, 0xE8	; 232
    5dfe:	b3 e0       	ldi	r27, 0x03	; 3
    5e00:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    5e04:	4b 01       	movw	r8, r22
    5e06:	5c 01       	movw	r10, r24

	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5e08:	ca 01       	movw	r24, r20
    5e0a:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
   // xSerialxPrintf(&xSerial3Port,"StopRevValve\r\n");

	if((*pxTimerID) == uxStopDelayRevVTimer_1_ID)
    5e0e:	fc 01       	movw	r30, r24
    5e10:	80 81       	ld	r24, Z
    5e12:	8a 30       	cpi	r24, 0x0A	; 10
    5e14:	09 f0       	breq	.+2      	; 0x5e18 <Revers_Stop+0x38>
    5e16:	67 c0       	rjmp	.+206    	; 0x5ee6 <Revers_Stop+0x106>
	{
		
		
		if(PIN_REV_VALVE_1 > 0)//
    5e18:	94 9b       	sbis	0x12, 4	; 18
    5e1a:	52 c0       	rjmp	.+164    	; 0x5ec0 <Revers_Stop+0xe0>
		{
			STOP_REV_VALVE_1;
    5e1c:	a4 98       	cbi	0x14, 4	; 20
			xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    5e1e:	88 e2       	ldi	r24, 0x28	; 40
    5e20:	93 e0       	ldi	r25, 0x03	; 3
    5e22:	9f 93       	push	r25
    5e24:	8f 93       	push	r24
    5e26:	8a ea       	ldi	r24, 0xAA	; 170
    5e28:	97 e0       	ldi	r25, 0x07	; 7
    5e2a:	9f 93       	push	r25
    5e2c:	8f 93       	push	r24
    5e2e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.revVOn=0;
    5e32:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <Comp_1+0xe>
			time_count_1+= difftime(time(&current_time), timeStartRevV_1);
    5e36:	c0 90 a3 0a 	lds	r12, 0x0AA3	; 0x800aa3 <timeStartRevV_1>
    5e3a:	d0 90 a4 0a 	lds	r13, 0x0AA4	; 0x800aa4 <timeStartRevV_1+0x1>
    5e3e:	e0 90 a5 0a 	lds	r14, 0x0AA5	; 0x800aa5 <timeStartRevV_1+0x2>
    5e42:	f0 90 a6 0a 	lds	r15, 0x0AA6	; 0x800aa6 <timeStartRevV_1+0x3>
    5e46:	87 e0       	ldi	r24, 0x07	; 7
    5e48:	99 e0       	ldi	r25, 0x09	; 9
    5e4a:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5e4e:	a7 01       	movw	r20, r14
    5e50:	96 01       	movw	r18, r12
    5e52:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5e56:	c0 90 31 07 	lds	r12, 0x0731	; 0x800731 <time_count_1.3221>
    5e5a:	d0 90 32 07 	lds	r13, 0x0732	; 0x800732 <time_count_1.3221+0x1>
    5e5e:	e0 90 33 07 	lds	r14, 0x0733	; 0x800733 <time_count_1.3221+0x2>
    5e62:	f0 90 34 07 	lds	r15, 0x0734	; 0x800734 <time_count_1.3221+0x3>
    5e66:	dc 01       	movw	r26, r24
    5e68:	cb 01       	movw	r24, r22
    5e6a:	8c 0d       	add	r24, r12
    5e6c:	9d 1d       	adc	r25, r13
    5e6e:	ae 1d       	adc	r26, r14
    5e70:	bf 1d       	adc	r27, r15
    5e72:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <time_count_1.3221>
    5e76:	90 93 32 07 	sts	0x0732, r25	; 0x800732 <time_count_1.3221+0x1>
    5e7a:	a0 93 33 07 	sts	0x0733, r26	; 0x800733 <time_count_1.3221+0x2>
    5e7e:	b0 93 34 07 	sts	0x0734, r27	; 0x800734 <time_count_1.3221+0x3>
			if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    5e82:	0f 90       	pop	r0
    5e84:	0f 90       	pop	r0
    5e86:	0f 90       	pop	r0
    5e88:	0f 90       	pop	r0
    5e8a:	81 31       	cpi	r24, 0x11	; 17
    5e8c:	9e 40       	sbci	r25, 0x0E	; 14
    5e8e:	a1 05       	cpc	r26, r1
    5e90:	b1 05       	cpc	r27, r1
    5e92:	b0 f0       	brcs	.+44     	; 0x5ec0 <Revers_Stop+0xe0>
    5e94:	ec e0       	ldi	r30, 0x0C	; 12
    5e96:	f9 e0       	ldi	r31, 0x09	; 9
    5e98:	80 ad       	ldd	r24, Z+56	; 0x38
    5e9a:	91 ad       	ldd	r25, Z+57	; 0x39
    5e9c:	01 96       	adiw	r24, 0x01	; 1
    5e9e:	91 af       	std	Z+57, r25	; 0x39
    5ea0:	80 af       	std	Z+56, r24	; 0x38
    5ea2:	40 e6       	ldi	r20, 0x60	; 96
    5ea4:	50 e0       	ldi	r21, 0x00	; 0
    5ea6:	60 e0       	ldi	r22, 0x00	; 0
    5ea8:	70 e0       	ldi	r23, 0x00	; 0
    5eaa:	cf 01       	movw	r24, r30
    5eac:	0e 94 7b 5c 	call	0xb8f6	; 0xb8f6 <eeprom_update_block>
    5eb0:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <time_count_1.3221>
    5eb4:	10 92 32 07 	sts	0x0732, r1	; 0x800732 <time_count_1.3221+0x1>
    5eb8:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <time_count_1.3221+0x2>
    5ebc:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <time_count_1.3221+0x3>

		}
		xTimerChangePeriod( xStopSource_1,period, 100 );
    5ec0:	0f 2e       	mov	r0, r31
    5ec2:	f4 e6       	ldi	r31, 0x64	; 100
    5ec4:	cf 2e       	mov	r12, r31
    5ec6:	d1 2c       	mov	r13, r1
    5ec8:	e1 2c       	mov	r14, r1
    5eca:	f1 2c       	mov	r15, r1
    5ecc:	f0 2d       	mov	r31, r0
    5ece:	00 e0       	ldi	r16, 0x00	; 0
    5ed0:	10 e0       	ldi	r17, 0x00	; 0
    5ed2:	a5 01       	movw	r20, r10
    5ed4:	94 01       	movw	r18, r8
    5ed6:	64 e0       	ldi	r22, 0x04	; 4
    5ed8:	80 91 03 09 	lds	r24, 0x0903	; 0x800903 <xStopSource_1>
    5edc:	90 91 04 09 	lds	r25, 0x0904	; 0x800904 <xStopSource_1+0x1>
    5ee0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    5ee4:	6a c0       	rjmp	.+212    	; 0x5fba <Revers_Stop+0x1da>
		//xTimerStart(xStopSource_1, 0);
	}
	
	else if((*pxTimerID) == uxStopDelayRevVTimer_2_ID)
    5ee6:	87 31       	cpi	r24, 0x17	; 23
    5ee8:	09 f0       	breq	.+2      	; 0x5eec <Revers_Stop+0x10c>
    5eea:	67 c0       	rjmp	.+206    	; 0x5fba <Revers_Stop+0x1da>
	{
		
		if(PIN_REV_VALVE_2 > 0)//
    5eec:	93 9b       	sbis	0x12, 3	; 18
    5eee:	53 c0       	rjmp	.+166    	; 0x5f96 <Revers_Stop+0x1b6>
		{   
			xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    5ef0:	8a e4       	ldi	r24, 0x4A	; 74
    5ef2:	93 e0       	ldi	r25, 0x03	; 3
    5ef4:	9f 93       	push	r25
    5ef6:	8f 93       	push	r24
    5ef8:	8a ea       	ldi	r24, 0xAA	; 170
    5efa:	97 e0       	ldi	r25, 0x07	; 7
    5efc:	9f 93       	push	r25
    5efe:	8f 93       	push	r24
    5f00:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			STOP_REV_VALVE_2;
    5f04:	a3 98       	cbi	0x14, 3	; 20
			
			
			Comp_2.revVOn=0;
    5f06:	10 92 04 0a 	sts	0x0A04, r1	; 0x800a04 <Comp_2+0xe>
			time_count_2+= difftime(time(&current_time), timeStartRevV_2);
    5f0a:	c0 90 be 0a 	lds	r12, 0x0ABE	; 0x800abe <timeStartRevV_2>
    5f0e:	d0 90 bf 0a 	lds	r13, 0x0ABF	; 0x800abf <timeStartRevV_2+0x1>
    5f12:	e0 90 c0 0a 	lds	r14, 0x0AC0	; 0x800ac0 <timeStartRevV_2+0x2>
    5f16:	f0 90 c1 0a 	lds	r15, 0x0AC1	; 0x800ac1 <timeStartRevV_2+0x3>
    5f1a:	87 e0       	ldi	r24, 0x07	; 7
    5f1c:	99 e0       	ldi	r25, 0x09	; 9
    5f1e:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5f22:	a7 01       	movw	r20, r14
    5f24:	96 01       	movw	r18, r12
    5f26:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5f2a:	c0 90 2d 07 	lds	r12, 0x072D	; 0x80072d <time_count_2.3222>
    5f2e:	d0 90 2e 07 	lds	r13, 0x072E	; 0x80072e <time_count_2.3222+0x1>
    5f32:	e0 90 2f 07 	lds	r14, 0x072F	; 0x80072f <time_count_2.3222+0x2>
    5f36:	f0 90 30 07 	lds	r15, 0x0730	; 0x800730 <time_count_2.3222+0x3>
    5f3a:	dc 01       	movw	r26, r24
    5f3c:	cb 01       	movw	r24, r22
    5f3e:	8c 0d       	add	r24, r12
    5f40:	9d 1d       	adc	r25, r13
    5f42:	ae 1d       	adc	r26, r14
    5f44:	bf 1d       	adc	r27, r15
    5f46:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <time_count_2.3222>
    5f4a:	90 93 2e 07 	sts	0x072E, r25	; 0x80072e <time_count_2.3222+0x1>
    5f4e:	a0 93 2f 07 	sts	0x072F, r26	; 0x80072f <time_count_2.3222+0x2>
    5f52:	b0 93 30 07 	sts	0x0730, r27	; 0x800730 <time_count_2.3222+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    5f56:	0f 90       	pop	r0
    5f58:	0f 90       	pop	r0
    5f5a:	0f 90       	pop	r0
    5f5c:	0f 90       	pop	r0
    5f5e:	81 31       	cpi	r24, 0x11	; 17
    5f60:	9e 40       	sbci	r25, 0x0E	; 14
    5f62:	a1 05       	cpc	r26, r1
    5f64:	b1 05       	cpc	r27, r1
    5f66:	b8 f0       	brcs	.+46     	; 0x5f96 <Revers_Stop+0x1b6>
    5f68:	ea e5       	ldi	r30, 0x5A	; 90
    5f6a:	f9 e0       	ldi	r31, 0x09	; 9
    5f6c:	80 81       	ld	r24, Z
    5f6e:	91 81       	ldd	r25, Z+1	; 0x01
    5f70:	01 96       	adiw	r24, 0x01	; 1
    5f72:	91 83       	std	Z+1, r25	; 0x01
    5f74:	80 83       	st	Z, r24
    5f76:	40 e6       	ldi	r20, 0x60	; 96
    5f78:	50 e0       	ldi	r21, 0x00	; 0
    5f7a:	60 e0       	ldi	r22, 0x00	; 0
    5f7c:	70 e0       	ldi	r23, 0x00	; 0
    5f7e:	8c e0       	ldi	r24, 0x0C	; 12
    5f80:	99 e0       	ldi	r25, 0x09	; 9
    5f82:	0e 94 7b 5c 	call	0xb8f6	; 0xb8f6 <eeprom_update_block>
    5f86:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <time_count_2.3222>
    5f8a:	10 92 2e 07 	sts	0x072E, r1	; 0x80072e <time_count_2.3222+0x1>
    5f8e:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <time_count_2.3222+0x2>
    5f92:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <time_count_2.3222+0x3>

		}
		xTimerChangePeriod( xStopSource_2,period, 100 );
    5f96:	0f 2e       	mov	r0, r31
    5f98:	f4 e6       	ldi	r31, 0x64	; 100
    5f9a:	cf 2e       	mov	r12, r31
    5f9c:	d1 2c       	mov	r13, r1
    5f9e:	e1 2c       	mov	r14, r1
    5fa0:	f1 2c       	mov	r15, r1
    5fa2:	f0 2d       	mov	r31, r0
    5fa4:	00 e0       	ldi	r16, 0x00	; 0
    5fa6:	10 e0       	ldi	r17, 0x00	; 0
    5fa8:	a5 01       	movw	r20, r10
    5faa:	94 01       	movw	r18, r8
    5fac:	64 e0       	ldi	r22, 0x04	; 4
    5fae:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <xStopSource_2>
    5fb2:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <xStopSource_2+0x1>
    5fb6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		//xTimerStart(xStopSource_2, 0);
	}
	
	
}
    5fba:	1f 91       	pop	r17
    5fbc:	0f 91       	pop	r16
    5fbe:	ff 90       	pop	r15
    5fc0:	ef 90       	pop	r14
    5fc2:	df 90       	pop	r13
    5fc4:	cf 90       	pop	r12
    5fc6:	bf 90       	pop	r11
    5fc8:	af 90       	pop	r10
    5fca:	9f 90       	pop	r9
    5fcc:	8f 90       	pop	r8
    5fce:	08 95       	ret

00005fd0 <SorcePump_Stop>:
//---------------------------------------------------------------------------
void SorcePump_Stop(TimerHandle_t xTimer)
{
    5fd0:	cf 92       	push	r12
    5fd2:	df 92       	push	r13
    5fd4:	ef 92       	push	r14
    5fd6:	ff 92       	push	r15
	static time_t time_count_1;
	static time_t time_count_2;
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5fd8:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
     // xSerialxPrintf(&xSerial3Port,"StopSource\r\n");
    
	 	
	 
	if((*pxTimerID) == uxStopDelaySourcePTimer_1_ID)
    5fdc:	fc 01       	movw	r30, r24
    5fde:	80 81       	ld	r24, Z
    5fe0:	89 30       	cpi	r24, 0x09	; 9
    5fe2:	09 f0       	breq	.+2      	; 0x5fe6 <SorcePump_Stop+0x16>
    5fe4:	5e c0       	rjmp	.+188    	; 0x60a2 <SorcePump_Stop+0xd2>
	{
		Comp_1.switchToMode=false ;
    5fe6:	10 92 6c 09 	sts	0x096C, r1	; 0x80096c <Comp_1>
		
		
		if(PIN_SOURCE_PUMP_1 > 0)//
    5fea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5fee:	81 ff       	sbrs	r24, 1
    5ff0:	b8 c0       	rjmp	.+368    	; 0x6162 <SorcePump_Stop+0x192>
		{
			STOP_SOURCE_PUMP_1;
    5ff2:	e2 e0       	ldi	r30, 0x02	; 2
    5ff4:	f1 e0       	ldi	r31, 0x01	; 1
    5ff6:	80 81       	ld	r24, Z
    5ff8:	8d 7f       	andi	r24, 0xFD	; 253
    5ffa:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopSource_1\r\n");
    5ffc:	8d eb       	ldi	r24, 0xBD	; 189
    5ffe:	93 e0       	ldi	r25, 0x03	; 3
    6000:	9f 93       	push	r25
    6002:	8f 93       	push	r24
    6004:	8a ea       	ldi	r24, 0xAA	; 170
    6006:	97 e0       	ldi	r25, 0x07	; 7
    6008:	9f 93       	push	r25
    600a:	8f 93       	push	r24
    600c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.srcPOn=0;
    6010:	10 92 7b 09 	sts	0x097B, r1	; 0x80097b <Comp_1+0xf>
			
			
			time_count_1+= difftime(time(&current_time), timeStartSrcP_1);
    6014:	c0 90 e8 09 	lds	r12, 0x09E8	; 0x8009e8 <timeStartSrcP_1>
    6018:	d0 90 e9 09 	lds	r13, 0x09E9	; 0x8009e9 <timeStartSrcP_1+0x1>
    601c:	e0 90 ea 09 	lds	r14, 0x09EA	; 0x8009ea <timeStartSrcP_1+0x2>
    6020:	f0 90 eb 09 	lds	r15, 0x09EB	; 0x8009eb <timeStartSrcP_1+0x3>
    6024:	87 e0       	ldi	r24, 0x07	; 7
    6026:	99 e0       	ldi	r25, 0x09	; 9
    6028:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    602c:	a7 01       	movw	r20, r14
    602e:	96 01       	movw	r18, r12
    6030:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    6034:	c0 90 29 07 	lds	r12, 0x0729	; 0x800729 <time_count_1.3228>
    6038:	d0 90 2a 07 	lds	r13, 0x072A	; 0x80072a <time_count_1.3228+0x1>
    603c:	e0 90 2b 07 	lds	r14, 0x072B	; 0x80072b <time_count_1.3228+0x2>
    6040:	f0 90 2c 07 	lds	r15, 0x072C	; 0x80072c <time_count_1.3228+0x3>
    6044:	dc 01       	movw	r26, r24
    6046:	cb 01       	movw	r24, r22
    6048:	8c 0d       	add	r24, r12
    604a:	9d 1d       	adc	r25, r13
    604c:	ae 1d       	adc	r26, r14
    604e:	bf 1d       	adc	r27, r15
    6050:	80 93 29 07 	sts	0x0729, r24	; 0x800729 <time_count_1.3228>
    6054:	90 93 2a 07 	sts	0x072A, r25	; 0x80072a <time_count_1.3228+0x1>
    6058:	a0 93 2b 07 	sts	0x072B, r26	; 0x80072b <time_count_1.3228+0x2>
    605c:	b0 93 2c 07 	sts	0x072C, r27	; 0x80072c <time_count_1.3228+0x3>
			//xSerialxPrintf(&xSerial3Port,"time_count_1=%d\r\n",time_count_1);
			if(time_count_1>ONE_HOUR){EEpromData.time_pump_source_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    6060:	0f 90       	pop	r0
    6062:	0f 90       	pop	r0
    6064:	0f 90       	pop	r0
    6066:	0f 90       	pop	r0
    6068:	81 31       	cpi	r24, 0x11	; 17
    606a:	9e 40       	sbci	r25, 0x0E	; 14
    606c:	a1 05       	cpc	r26, r1
    606e:	b1 05       	cpc	r27, r1
    6070:	08 f4       	brcc	.+2      	; 0x6074 <SorcePump_Stop+0xa4>
    6072:	77 c0       	rjmp	.+238    	; 0x6162 <SorcePump_Stop+0x192>
    6074:	ec e0       	ldi	r30, 0x0C	; 12
    6076:	f9 e0       	ldi	r31, 0x09	; 9
    6078:	86 a9       	ldd	r24, Z+54	; 0x36
    607a:	97 a9       	ldd	r25, Z+55	; 0x37
    607c:	01 96       	adiw	r24, 0x01	; 1
    607e:	97 ab       	std	Z+55, r25	; 0x37
    6080:	86 ab       	std	Z+54, r24	; 0x36
    6082:	40 e6       	ldi	r20, 0x60	; 96
    6084:	50 e0       	ldi	r21, 0x00	; 0
    6086:	60 e0       	ldi	r22, 0x00	; 0
    6088:	70 e0       	ldi	r23, 0x00	; 0
    608a:	cf 01       	movw	r24, r30
    608c:	0e 94 7b 5c 	call	0xb8f6	; 0xb8f6 <eeprom_update_block>
    6090:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <time_count_1.3228>
    6094:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <time_count_1.3228+0x1>
    6098:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <time_count_1.3228+0x2>
    609c:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <time_count_1.3228+0x3>
    60a0:	60 c0       	rjmp	.+192    	; 0x6162 <SorcePump_Stop+0x192>

		}
		
	}
	
	else if((*pxTimerID) == uxStopDelaySourcePTimer_2_ID)
    60a2:	86 31       	cpi	r24, 0x16	; 22
    60a4:	09 f0       	breq	.+2      	; 0x60a8 <SorcePump_Stop+0xd8>
    60a6:	5d c0       	rjmp	.+186    	; 0x6162 <SorcePump_Stop+0x192>
	{
		//xSerialxPrintf(&xSerial3Port,"StopSource_2\r\n");
		if(PIN_SOURCE_PUMP_2 > 0)//
    60a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    60ac:	82 ff       	sbrs	r24, 2
    60ae:	59 c0       	rjmp	.+178    	; 0x6162 <SorcePump_Stop+0x192>
		{
			STOP_SOURCE_PUMP_2;
    60b0:	e2 e0       	ldi	r30, 0x02	; 2
    60b2:	f1 e0       	ldi	r31, 0x01	; 1
    60b4:	80 81       	ld	r24, Z
    60b6:	8b 7f       	andi	r24, 0xFB	; 251
    60b8:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopSource_2\r\n");
    60ba:	8c ec       	ldi	r24, 0xCC	; 204
    60bc:	93 e0       	ldi	r25, 0x03	; 3
    60be:	9f 93       	push	r25
    60c0:	8f 93       	push	r24
    60c2:	8a ea       	ldi	r24, 0xAA	; 170
    60c4:	97 e0       	ldi	r25, 0x07	; 7
    60c6:	9f 93       	push	r25
    60c8:	8f 93       	push	r24
    60ca:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			Comp_2.srcPOn=0;
    60ce:	e6 ef       	ldi	r30, 0xF6	; 246
    60d0:	f9 e0       	ldi	r31, 0x09	; 9
    60d2:	17 86       	std	Z+15, r1	; 0x0f
			Comp_2.switchToMode=false;
    60d4:	10 82       	st	Z, r1
			time_count_2+= difftime(time(&current_time), timeStartSrcP_2);
    60d6:	c0 90 a7 0a 	lds	r12, 0x0AA7	; 0x800aa7 <timeStartSrcP_2>
    60da:	d0 90 a8 0a 	lds	r13, 0x0AA8	; 0x800aa8 <timeStartSrcP_2+0x1>
    60de:	e0 90 a9 0a 	lds	r14, 0x0AA9	; 0x800aa9 <timeStartSrcP_2+0x2>
    60e2:	f0 90 aa 0a 	lds	r15, 0x0AAA	; 0x800aaa <timeStartSrcP_2+0x3>
    60e6:	87 e0       	ldi	r24, 0x07	; 7
    60e8:	99 e0       	ldi	r25, 0x09	; 9
    60ea:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    60ee:	a7 01       	movw	r20, r14
    60f0:	96 01       	movw	r18, r12
    60f2:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    60f6:	c0 90 25 07 	lds	r12, 0x0725	; 0x800725 <time_count_2.3229>
    60fa:	d0 90 26 07 	lds	r13, 0x0726	; 0x800726 <time_count_2.3229+0x1>
    60fe:	e0 90 27 07 	lds	r14, 0x0727	; 0x800727 <time_count_2.3229+0x2>
    6102:	f0 90 28 07 	lds	r15, 0x0728	; 0x800728 <time_count_2.3229+0x3>
    6106:	dc 01       	movw	r26, r24
    6108:	cb 01       	movw	r24, r22
    610a:	8c 0d       	add	r24, r12
    610c:	9d 1d       	adc	r25, r13
    610e:	ae 1d       	adc	r26, r14
    6110:	bf 1d       	adc	r27, r15
    6112:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <time_count_2.3229>
    6116:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <time_count_2.3229+0x1>
    611a:	a0 93 27 07 	sts	0x0727, r26	; 0x800727 <time_count_2.3229+0x2>
    611e:	b0 93 28 07 	sts	0x0728, r27	; 0x800728 <time_count_2.3229+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_pump_source_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    6122:	0f 90       	pop	r0
    6124:	0f 90       	pop	r0
    6126:	0f 90       	pop	r0
    6128:	0f 90       	pop	r0
    612a:	81 31       	cpi	r24, 0x11	; 17
    612c:	9e 40       	sbci	r25, 0x0E	; 14
    612e:	a1 05       	cpc	r26, r1
    6130:	b1 05       	cpc	r27, r1
    6132:	b8 f0       	brcs	.+46     	; 0x6162 <SorcePump_Stop+0x192>
    6134:	e8 e5       	ldi	r30, 0x58	; 88
    6136:	f9 e0       	ldi	r31, 0x09	; 9
    6138:	80 81       	ld	r24, Z
    613a:	91 81       	ldd	r25, Z+1	; 0x01
    613c:	01 96       	adiw	r24, 0x01	; 1
    613e:	91 83       	std	Z+1, r25	; 0x01
    6140:	80 83       	st	Z, r24
    6142:	40 e6       	ldi	r20, 0x60	; 96
    6144:	50 e0       	ldi	r21, 0x00	; 0
    6146:	60 e0       	ldi	r22, 0x00	; 0
    6148:	70 e0       	ldi	r23, 0x00	; 0
    614a:	8c e0       	ldi	r24, 0x0C	; 12
    614c:	99 e0       	ldi	r25, 0x09	; 9
    614e:	0e 94 7b 5c 	call	0xb8f6	; 0xb8f6 <eeprom_update_block>
    6152:	10 92 25 07 	sts	0x0725, r1	; 0x800725 <time_count_2.3229>
    6156:	10 92 26 07 	sts	0x0726, r1	; 0x800726 <time_count_2.3229+0x1>
    615a:	10 92 27 07 	sts	0x0727, r1	; 0x800727 <time_count_2.3229+0x2>
    615e:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <time_count_2.3229+0x3>

		}
	}
}
    6162:	ff 90       	pop	r15
    6164:	ef 90       	pop	r14
    6166:	df 90       	pop	r13
    6168:	cf 90       	pop	r12
    616a:	08 95       	ret

0000616c <StartComp>:
		
	}
}


void StartComp(TimerHandle_t xTimer){
    616c:	8f 92       	push	r8
    616e:	9f 92       	push	r9
    6170:	af 92       	push	r10
    6172:	bf 92       	push	r11
    6174:	cf 92       	push	r12
    6176:	df 92       	push	r13
    6178:	ef 92       	push	r14
    617a:	ff 92       	push	r15
    617c:	0f 93       	push	r16
    617e:	1f 93       	push	r17
    6180:	ac 01       	movw	r20, r24
	
	portBASE_TYPE *pxTimerID;
	
	TickType_t period;	
	period=(TickType_t)EEpromData.TRV_Delay;
    6182:	20 91 11 09 	lds	r18, 0x0911	; 0x800911 <EEpromData+0x5>
    period*=1000;
    6186:	30 e0       	ldi	r19, 0x00	; 0
    6188:	a8 ee       	ldi	r26, 0xE8	; 232
    618a:	b3 e0       	ldi	r27, 0x03	; 3
    618c:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    6190:	4b 01       	movw	r8, r22
    6192:	5c 01       	movw	r10, r24
	
	pxTimerID = pvTimerGetTimerID(xTimer);
    6194:	ca 01       	movw	r24, r20
    6196:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
//xSerialxPrintf(&xSerial3Port,"StartCompressor\r\n");
	if((*pxTimerID) == uxStartDelayCompTimer_1_ID) {
    619a:	fc 01       	movw	r30, r24
    619c:	80 81       	ld	r24, Z
    619e:	81 30       	cpi	r24, 0x01	; 1
    61a0:	09 f0       	breq	.+2      	; 0x61a4 <StartComp+0x38>
    61a2:	61 c0       	rjmp	.+194    	; 0x6266 <StartComp+0xfa>
		Comp_1.switchToMode=false;
    61a4:	ec e6       	ldi	r30, 0x6C	; 108
    61a6:	f9 e0       	ldi	r31, 0x09	; 9
    61a8:	10 82       	st	Z, r1
		 if(Comp_1.def) {timeTillDef=xTaskGetTickCount();Comp_1.stopdef=true;}
    61aa:	81 85       	ldd	r24, Z+9	; 0x09
    61ac:	88 23       	and	r24, r24
    61ae:	69 f0       	breq	.+26     	; 0x61ca <StartComp+0x5e>
    61b0:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    61b4:	60 93 ed 08 	sts	0x08ED, r22	; 0x8008ed <timeTillDef>
    61b8:	70 93 ee 08 	sts	0x08EE, r23	; 0x8008ee <timeTillDef+0x1>
    61bc:	80 93 ef 08 	sts	0x08EF, r24	; 0x8008ef <timeTillDef+0x2>
    61c0:	90 93 f0 08 	sts	0x08F0, r25	; 0x8008f0 <timeTillDef+0x3>
    61c4:	81 e0       	ldi	r24, 0x01	; 1
    61c6:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <Comp_1+0xa>
		if(PIN_COMPRESSOR_1 == 0)
    61ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    61ce:	85 fd       	sbrc	r24, 5
    61d0:	9c c0       	rjmp	.+312    	; 0x630a <StartComp+0x19e>
		{   
			
			Comp_1.compOn=1;
    61d2:	81 e0       	ldi	r24, 0x01	; 1
    61d4:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <Comp_1+0xb>
			//if(Comp_2.compOn)vTaskDelay(5000);
			START_COMPRESSOR_1;
    61d8:	e2 e0       	ldi	r30, 0x02	; 2
    61da:	f1 e0       	ldi	r31, 0x01	; 1
    61dc:	80 81       	ld	r24, Z
    61de:	80 62       	ori	r24, 0x20	; 32
    61e0:	80 83       	st	Z, r24
			
			xSerialxPrintf(&xSerial3Port,"StartCompressor_1\r\n");
    61e2:	8b ed       	ldi	r24, 0xDB	; 219
    61e4:	93 e0       	ldi	r25, 0x03	; 3
    61e6:	9f 93       	push	r25
    61e8:	8f 93       	push	r24
    61ea:	8a ea       	ldi	r24, 0xAA	; 170
    61ec:	97 e0       	ldi	r25, 0x07	; 7
    61ee:	9f 93       	push	r25
    61f0:	8f 93       	push	r24
    61f2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			
			timeStartComp_1=time(&current_time);
    61f6:	87 e0       	ldi	r24, 0x07	; 7
    61f8:	99 e0       	ldi	r25, 0x09	; 9
    61fa:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    61fe:	60 93 fb 08 	sts	0x08FB, r22	; 0x8008fb <timeStartComp_1>
    6202:	70 93 fc 08 	sts	0x08FC, r23	; 0x8008fc <timeStartComp_1+0x1>
    6206:	80 93 fd 08 	sts	0x08FD, r24	; 0x8008fd <timeStartComp_1+0x2>
    620a:	90 93 fe 08 	sts	0x08FE, r25	; 0x8008fe <timeStartComp_1+0x3>
			EEpromData.number_turnon_compressor_1+=1;
    620e:	ec e0       	ldi	r30, 0x0C	; 12
    6210:	f9 e0       	ldi	r31, 0x09	; 9
    6212:	86 ad       	ldd	r24, Z+62	; 0x3e
    6214:	97 ad       	ldd	r25, Z+63	; 0x3f
    6216:	01 96       	adiw	r24, 0x01	; 1
    6218:	97 af       	std	Z+63, r25	; 0x3f
    621a:	86 af       	std	Z+62, r24	; 0x3e
			//xSerialxPrintf(&xSerial3Port,"Number_turnon_Compressor_=%d\r\n",EEpromData.number_turnon_compressor_1);
			xTimerChangePeriod( xTStartCheckTrv_1,period, 100 );
    621c:	0f 2e       	mov	r0, r31
    621e:	f4 e6       	ldi	r31, 0x64	; 100
    6220:	cf 2e       	mov	r12, r31
    6222:	d1 2c       	mov	r13, r1
    6224:	e1 2c       	mov	r14, r1
    6226:	f1 2c       	mov	r15, r1
    6228:	f0 2d       	mov	r31, r0
    622a:	00 e0       	ldi	r16, 0x00	; 0
    622c:	10 e0       	ldi	r17, 0x00	; 0
    622e:	a5 01       	movw	r20, r10
    6230:	94 01       	movw	r18, r8
    6232:	64 e0       	ldi	r22, 0x04	; 4
    6234:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <xTStartCheckTrv_1>
    6238:	90 91 06 09 	lds	r25, 0x0906	; 0x800906 <xTStartCheckTrv_1+0x1>
    623c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
			xTimerStart(xTStartCheckErrors_1, 0);
    6240:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    6244:	9b 01       	movw	r18, r22
    6246:	ac 01       	movw	r20, r24
    6248:	c1 2c       	mov	r12, r1
    624a:	d1 2c       	mov	r13, r1
    624c:	76 01       	movw	r14, r12
    624e:	61 e0       	ldi	r22, 0x01	; 1
    6250:	80 91 ab 0a 	lds	r24, 0x0AAB	; 0x800aab <xTStartCheckErrors_1>
    6254:	90 91 ac 0a 	lds	r25, 0x0AAC	; 0x800aac <xTStartCheckErrors_1+0x1>
    6258:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    625c:	0f 90       	pop	r0
    625e:	0f 90       	pop	r0
    6260:	0f 90       	pop	r0
    6262:	0f 90       	pop	r0
    6264:	52 c0       	rjmp	.+164    	; 0x630a <StartComp+0x19e>
	
		}
	}
	else if((*pxTimerID) == uxStartDelayCompTimer_2_ID) {
    6266:	8e 30       	cpi	r24, 0x0E	; 14
    6268:	09 f0       	breq	.+2      	; 0x626c <StartComp+0x100>
    626a:	4f c0       	rjmp	.+158    	; 0x630a <StartComp+0x19e>
		xSerialxPrintf(&xSerial3Port,"StartCompressor_2\r\n");
    626c:	8f ee       	ldi	r24, 0xEF	; 239
    626e:	93 e0       	ldi	r25, 0x03	; 3
    6270:	9f 93       	push	r25
    6272:	8f 93       	push	r24
    6274:	8a ea       	ldi	r24, 0xAA	; 170
    6276:	97 e0       	ldi	r25, 0x07	; 7
    6278:	9f 93       	push	r25
    627a:	8f 93       	push	r24
    627c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_COMPRESSOR_2 == 0)
    6280:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6284:	0f 90       	pop	r0
    6286:	0f 90       	pop	r0
    6288:	0f 90       	pop	r0
    628a:	0f 90       	pop	r0
    628c:	86 fd       	sbrc	r24, 6
    628e:	3d c0       	rjmp	.+122    	; 0x630a <StartComp+0x19e>
		{
			//if(Comp_1.compOn)vTaskDelay(5000);
			Comp_2.compOn=1;
    6290:	e6 ef       	ldi	r30, 0xF6	; 246
    6292:	f9 e0       	ldi	r31, 0x09	; 9
    6294:	81 e0       	ldi	r24, 0x01	; 1
    6296:	83 87       	std	Z+11, r24	; 0x0b
			START_COMPRESSOR_2;
    6298:	a2 e0       	ldi	r26, 0x02	; 2
    629a:	b1 e0       	ldi	r27, 0x01	; 1
    629c:	8c 91       	ld	r24, X
    629e:	80 64       	ori	r24, 0x40	; 64
    62a0:	8c 93       	st	X, r24
			
			
			Comp_2.switchToMode=false;
    62a2:	10 82       	st	Z, r1
			
			timeStartComp_2=time(&current_time);
    62a4:	87 e0       	ldi	r24, 0x07	; 7
    62a6:	99 e0       	ldi	r25, 0x09	; 9
    62a8:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    62ac:	60 93 ad 0a 	sts	0x0AAD, r22	; 0x800aad <timeStartComp_2>
    62b0:	70 93 ae 0a 	sts	0x0AAE, r23	; 0x800aae <timeStartComp_2+0x1>
    62b4:	80 93 af 0a 	sts	0x0AAF, r24	; 0x800aaf <timeStartComp_2+0x2>
    62b8:	90 93 b0 0a 	sts	0x0AB0, r25	; 0x800ab0 <timeStartComp_2+0x3>
			EEpromData.number_turnon_compressor_2+=1;
    62bc:	ee e5       	ldi	r30, 0x5E	; 94
    62be:	f9 e0       	ldi	r31, 0x09	; 9
    62c0:	80 81       	ld	r24, Z
    62c2:	91 81       	ldd	r25, Z+1	; 0x01
    62c4:	01 96       	adiw	r24, 0x01	; 1
    62c6:	91 83       	std	Z+1, r25	; 0x01
    62c8:	80 83       	st	Z, r24
			xTimerChangePeriod( xTStartCheckTrv_2,period, 100 );
    62ca:	0f 2e       	mov	r0, r31
    62cc:	f4 e6       	ldi	r31, 0x64	; 100
    62ce:	cf 2e       	mov	r12, r31
    62d0:	d1 2c       	mov	r13, r1
    62d2:	e1 2c       	mov	r14, r1
    62d4:	f1 2c       	mov	r15, r1
    62d6:	f0 2d       	mov	r31, r0
    62d8:	00 e0       	ldi	r16, 0x00	; 0
    62da:	10 e0       	ldi	r17, 0x00	; 0
    62dc:	a5 01       	movw	r20, r10
    62de:	94 01       	movw	r18, r8
    62e0:	64 e0       	ldi	r22, 0x04	; 4
    62e2:	80 91 e0 09 	lds	r24, 0x09E0	; 0x8009e0 <xTStartCheckTrv_2>
    62e6:	90 91 e1 09 	lds	r25, 0x09E1	; 0x8009e1 <xTStartCheckTrv_2+0x1>
    62ea:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
			xTimerStart(xTStartCheckErrors_2, 0);
    62ee:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    62f2:	9b 01       	movw	r18, r22
    62f4:	ac 01       	movw	r20, r24
    62f6:	c1 2c       	mov	r12, r1
    62f8:	d1 2c       	mov	r13, r1
    62fa:	76 01       	movw	r14, r12
    62fc:	61 e0       	ldi	r22, 0x01	; 1
    62fe:	80 91 f3 08 	lds	r24, 0x08F3	; 0x8008f3 <xTStartCheckErrors_2>
    6302:	90 91 f4 08 	lds	r25, 0x08F4	; 0x8008f4 <xTStartCheckErrors_2+0x1>
    6306:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		}
	}
	
	
}
    630a:	1f 91       	pop	r17
    630c:	0f 91       	pop	r16
    630e:	ff 90       	pop	r15
    6310:	ef 90       	pop	r14
    6312:	df 90       	pop	r13
    6314:	cf 90       	pop	r12
    6316:	bf 90       	pop	r11
    6318:	af 90       	pop	r10
    631a:	9f 90       	pop	r9
    631c:	8f 90       	pop	r8
    631e:	08 95       	ret

00006320 <SwitchRev_1_Time>:
	
	
}
//-------------------------------------------------------------------------
void SwitchRev_1_Time(TimerHandle_t xTimer)
{
    6320:	cf 92       	push	r12
    6322:	df 92       	push	r13
    6324:	ef 92       	push	r14
    6326:	ff 92       	push	r15
    6328:	0f 93       	push	r16
    632a:	1f 93       	push	r17
    632c:	cf 93       	push	r28
    632e:	df 93       	push	r29
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    6330:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    6334:	ec 01       	movw	r28, r24
	
	//xSerialxPrintf(&xSerial3Port,"SwitchRev_1\r\n");
	
	if((*pxTimerID) == uxSwitchRevOne_1_ID)
    6336:	88 81       	ld	r24, Y
    6338:	8c 30       	cpi	r24, 0x0C	; 12
    633a:	19 f5       	brne	.+70     	; 0x6382 <SwitchRev_1_Time+0x62>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_ON_1_1\r\n");
    633c:	83 e0       	ldi	r24, 0x03	; 3
    633e:	94 e0       	ldi	r25, 0x04	; 4
    6340:	9f 93       	push	r25
    6342:	8f 93       	push	r24
    6344:	8a ea       	ldi	r24, 0xAA	; 170
    6346:	97 e0       	ldi	r25, 0x07	; 7
    6348:	9f 93       	push	r25
    634a:	8f 93       	push	r24
    634c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_REV_VALVE_1 == 0){START_REV_VALVE_1;}//
    6350:	0f 90       	pop	r0
    6352:	0f 90       	pop	r0
    6354:	0f 90       	pop	r0
    6356:	0f 90       	pop	r0
    6358:	94 99       	sbic	0x12, 4	; 18
    635a:	02 c0       	rjmp	.+4      	; 0x6360 <SwitchRev_1_Time+0x40>
    635c:	a4 9a       	sbi	0x14, 4	; 20
    635e:	01 c0       	rjmp	.+2      	; 0x6362 <SwitchRev_1_Time+0x42>
		else {STOP_REV_VALVE_1;}//xSerialxPrintf(&xSerial3Port,"SwitchRev_OFF_1\r\n");
    6360:	a4 98       	cbi	0x14, 4	; 20
		xTimerStart(xSwitchRevTwo_1_time, 0);
    6362:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    6366:	9b 01       	movw	r18, r22
    6368:	ac 01       	movw	r20, r24
    636a:	c1 2c       	mov	r12, r1
    636c:	d1 2c       	mov	r13, r1
    636e:	76 01       	movw	r14, r12
    6370:	00 e0       	ldi	r16, 0x00	; 0
    6372:	10 e0       	ldi	r17, 0x00	; 0
    6374:	61 e0       	ldi	r22, 0x01	; 1
    6376:	80 91 86 0a 	lds	r24, 0x0A86	; 0x800a86 <xSwitchRevTwo_1_time>
    637a:	90 91 87 0a 	lds	r25, 0x0A87	; 0x800a87 <xSwitchRevTwo_1_time+0x1>
    637e:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if((*pxTimerID) == uxSwitchRevOne_2_ID)
    6382:	88 81       	ld	r24, Y
    6384:	88 31       	cpi	r24, 0x18	; 24
    6386:	19 f5       	brne	.+70     	; 0x63ce <SwitchRev_1_Time+0xae>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_2_1\r\n");
    6388:	86 e1       	ldi	r24, 0x16	; 22
    638a:	94 e0       	ldi	r25, 0x04	; 4
    638c:	9f 93       	push	r25
    638e:	8f 93       	push	r24
    6390:	8a ea       	ldi	r24, 0xAA	; 170
    6392:	97 e0       	ldi	r25, 0x07	; 7
    6394:	9f 93       	push	r25
    6396:	8f 93       	push	r24
    6398:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		
		if(PIN_REV_VALVE_2 == 0)START_REV_VALVE_2;
    639c:	0f 90       	pop	r0
    639e:	0f 90       	pop	r0
    63a0:	0f 90       	pop	r0
    63a2:	0f 90       	pop	r0
    63a4:	93 99       	sbic	0x12, 3	; 18
    63a6:	02 c0       	rjmp	.+4      	; 0x63ac <SwitchRev_1_Time+0x8c>
    63a8:	a3 9a       	sbi	0x14, 3	; 20
    63aa:	01 c0       	rjmp	.+2      	; 0x63ae <SwitchRev_1_Time+0x8e>
		else STOP_REV_VALVE_2;
    63ac:	a3 98       	cbi	0x14, 3	; 20
		xTimerStart(xSwitchRevTwo_2_time, 0);
    63ae:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    63b2:	9b 01       	movw	r18, r22
    63b4:	ac 01       	movw	r20, r24
    63b6:	c1 2c       	mov	r12, r1
    63b8:	d1 2c       	mov	r13, r1
    63ba:	76 01       	movw	r14, r12
    63bc:	00 e0       	ldi	r16, 0x00	; 0
    63be:	10 e0       	ldi	r17, 0x00	; 0
    63c0:	61 e0       	ldi	r22, 0x01	; 1
    63c2:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <xSwitchRevTwo_2_time>
    63c6:	90 91 a2 0a 	lds	r25, 0x0AA2	; 0x800aa2 <xSwitchRevTwo_2_time+0x1>
    63ca:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
}
    63ce:	df 91       	pop	r29
    63d0:	cf 91       	pop	r28
    63d2:	1f 91       	pop	r17
    63d4:	0f 91       	pop	r16
    63d6:	ff 90       	pop	r15
    63d8:	ef 90       	pop	r14
    63da:	df 90       	pop	r13
    63dc:	cf 90       	pop	r12
    63de:	08 95       	ret

000063e0 <activateTimers>:
const portBASE_TYPE uxStopDelayRevVTimer_2_ID		= 23;
const portBASE_TYPE uxSwitchRevOne_2_ID				= 24;
const portBASE_TYPE uxSwitchRevTwo_2_ID				= 25;

void activateTimers(xCompressor *comp)
{
    63e0:	ef 92       	push	r14
    63e2:	ff 92       	push	r15
    63e4:	0f 93       	push	r16
    63e6:	1f 93       	push	r17
    63e8:	cf 93       	push	r28
    63ea:	df 93       	push	r29
    63ec:	ec 01       	movw	r28, r24
	
	
	if(comp->Index==1)
    63ee:	fc 01       	movw	r30, r24
    63f0:	ee 58       	subi	r30, 0x8E	; 142
    63f2:	ff 4f       	sbci	r31, 0xFF	; 255
    63f4:	80 81       	ld	r24, Z
    63f6:	91 81       	ldd	r25, Z+1	; 0x01
    63f8:	01 97       	sbiw	r24, 0x01	; 1
    63fa:	09 f0       	breq	.+2      	; 0x63fe <activateTimers+0x1e>
    63fc:	fc c0       	rjmp	.+504    	; 0x65f6 <activateTimers+0x216>
	{
		
		xStartRevValve_1   =	xTimerCreate("StRevV_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayRevVTimer_1_ID, StartReversingValve);//(EEpromData.Revers_Valve_delay*1000) 
    63fe:	0f 2e       	mov	r0, r31
    6400:	f8 e0       	ldi	r31, 0x08	; 8
    6402:	ef 2e       	mov	r14, r31
    6404:	fa e2       	ldi	r31, 0x2A	; 42
    6406:	ff 2e       	mov	r15, r31
    6408:	f0 2d       	mov	r31, r0
    640a:	0b e0       	ldi	r16, 0x0B	; 11
    640c:	16 e0       	ldi	r17, 0x06	; 6
    640e:	20 e0       	ldi	r18, 0x00	; 0
    6410:	48 e5       	ldi	r20, 0x58	; 88
    6412:	5b e1       	ldi	r21, 0x1B	; 27
    6414:	60 e0       	ldi	r22, 0x00	; 0
    6416:	70 e0       	ldi	r23, 0x00	; 0
    6418:	86 e2       	ldi	r24, 0x26	; 38
    641a:	94 e0       	ldi	r25, 0x04	; 4
    641c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6420:	90 93 b4 0a 	sts	0x0AB4, r25	; 0x800ab4 <xStartRevValve_1+0x1>
    6424:	80 93 b3 0a 	sts	0x0AB3, r24	; 0x800ab3 <xStartRevValve_1>
		xStartThreeWay     =	xTimerCreate("StThreeW",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayThreeVTimer_1_ID, StartThreeWay);//(EEpromData.Three_Way_delay*1000)
    6428:	0f 2e       	mov	r0, r31
    642a:	f2 e9       	ldi	r31, 0x92	; 146
    642c:	ef 2e       	mov	r14, r31
    642e:	fc e2       	ldi	r31, 0x2C	; 44
    6430:	ff 2e       	mov	r15, r31
    6432:	f0 2d       	mov	r31, r0
    6434:	0a e0       	ldi	r16, 0x0A	; 10
    6436:	16 e0       	ldi	r17, 0x06	; 6
    6438:	20 e0       	ldi	r18, 0x00	; 0
    643a:	48 e5       	ldi	r20, 0x58	; 88
    643c:	5b e1       	ldi	r21, 0x1B	; 27
    643e:	60 e0       	ldi	r22, 0x00	; 0
    6440:	70 e0       	ldi	r23, 0x00	; 0
    6442:	8f e2       	ldi	r24, 0x2F	; 47
    6444:	94 e0       	ldi	r25, 0x04	; 4
    6446:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    644a:	90 93 e5 09 	sts	0x09E5, r25	; 0x8009e5 <xStartThreeWay+0x1>
    644e:	80 93 e4 09 	sts	0x09E4, r24	; 0x8009e4 <xStartThreeWay>
		xStartHeatPump_1   =	xTimerCreate("StHeatP_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayHeatPTimer_1_ID, StartHeatPump);//(EEpromData.HeatingPump_delay*1000) 
    6452:	0f 2e       	mov	r0, r31
    6454:	fc e9       	ldi	r31, 0x9C	; 156
    6456:	ef 2e       	mov	r14, r31
    6458:	f8 e2       	ldi	r31, 0x28	; 40
    645a:	ff 2e       	mov	r15, r31
    645c:	f0 2d       	mov	r31, r0
    645e:	0c e0       	ldi	r16, 0x0C	; 12
    6460:	16 e0       	ldi	r17, 0x06	; 6
    6462:	20 e0       	ldi	r18, 0x00	; 0
    6464:	48 e5       	ldi	r20, 0x58	; 88
    6466:	5b e1       	ldi	r21, 0x1B	; 27
    6468:	60 e0       	ldi	r22, 0x00	; 0
    646a:	70 e0       	ldi	r23, 0x00	; 0
    646c:	88 e3       	ldi	r24, 0x38	; 56
    646e:	94 e0       	ldi	r25, 0x04	; 4
    6470:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6474:	90 93 89 0a 	sts	0x0A89, r25	; 0x800a89 <xStartHeatPump_1+0x1>
    6478:	80 93 88 0a 	sts	0x0A88, r24	; 0x800a88 <xStartHeatPump_1>
		xStartCompressor_1 =	xTimerCreate("StComp_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayCompTimer_1_ID, StartComp);//(EEpromData.Compressor_delay*1000)
    647c:	0f 2e       	mov	r0, r31
    647e:	f6 eb       	ldi	r31, 0xB6	; 182
    6480:	ef 2e       	mov	r14, r31
    6482:	f0 e3       	ldi	r31, 0x30	; 48
    6484:	ff 2e       	mov	r15, r31
    6486:	f0 2d       	mov	r31, r0
    6488:	0d e0       	ldi	r16, 0x0D	; 13
    648a:	16 e0       	ldi	r17, 0x06	; 6
    648c:	20 e0       	ldi	r18, 0x00	; 0
    648e:	48 e5       	ldi	r20, 0x58	; 88
    6490:	5b e1       	ldi	r21, 0x1B	; 27
    6492:	60 e0       	ldi	r22, 0x00	; 0
    6494:	70 e0       	ldi	r23, 0x00	; 0
    6496:	82 e4       	ldi	r24, 0x42	; 66
    6498:	94 e0       	ldi	r25, 0x04	; 4
    649a:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    649e:	90 93 8b 0a 	sts	0x0A8B, r25	; 0x800a8b <xStartCompressor_1+0x1>
    64a2:	80 93 8a 0a 	sts	0x0A8A, r24	; 0x800a8a <xStartCompressor_1>
		xTStartCheckErrors_1 =	xTimerCreate("ChErr_1",			300000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayChekErrTimer_1_ID, StartCheckErrors);
    64a6:	0f 2e       	mov	r0, r31
    64a8:	fc ea       	ldi	r31, 0xAC	; 172
    64aa:	ef 2e       	mov	r14, r31
    64ac:	f9 e2       	ldi	r31, 0x29	; 41
    64ae:	ff 2e       	mov	r15, r31
    64b0:	f0 2d       	mov	r31, r0
    64b2:	08 e0       	ldi	r16, 0x08	; 8
    64b4:	16 e0       	ldi	r17, 0x06	; 6
    64b6:	20 e0       	ldi	r18, 0x00	; 0
    64b8:	40 ee       	ldi	r20, 0xE0	; 224
    64ba:	53 e9       	ldi	r21, 0x93	; 147
    64bc:	64 e0       	ldi	r22, 0x04	; 4
    64be:	70 e0       	ldi	r23, 0x00	; 0
    64c0:	8b e4       	ldi	r24, 0x4B	; 75
    64c2:	94 e0       	ldi	r25, 0x04	; 4
    64c4:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    64c8:	90 93 ac 0a 	sts	0x0AAC, r25	; 0x800aac <xTStartCheckErrors_1+0x1>
    64cc:	80 93 ab 0a 	sts	0x0AAB, r24	; 0x800aab <xTStartCheckErrors_1>
		xTStartCheckTrv_1 =		xTimerCreate("ChTrv_1",			7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayChekTrvTimer_1_ID, StartCheckTrv);//(EEpromData.TRV_Delay*1000)
    64d0:	0f 2e       	mov	r0, r31
    64d2:	fc ed       	ldi	r31, 0xDC	; 220
    64d4:	ef 2e       	mov	r14, r31
    64d6:	f9 e2       	ldi	r31, 0x29	; 41
    64d8:	ff 2e       	mov	r15, r31
    64da:	f0 2d       	mov	r31, r0
    64dc:	09 e0       	ldi	r16, 0x09	; 9
    64de:	16 e0       	ldi	r17, 0x06	; 6
    64e0:	20 e0       	ldi	r18, 0x00	; 0
    64e2:	48 e5       	ldi	r20, 0x58	; 88
    64e4:	5b e1       	ldi	r21, 0x1B	; 27
    64e6:	60 e0       	ldi	r22, 0x00	; 0
    64e8:	70 e0       	ldi	r23, 0x00	; 0
    64ea:	83 e5       	ldi	r24, 0x53	; 83
    64ec:	94 e0       	ldi	r25, 0x04	; 4
    64ee:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    64f2:	90 93 06 09 	sts	0x0906, r25	; 0x800906 <xTStartCheckTrv_1+0x1>
    64f6:	80 93 05 09 	sts	0x0905, r24	; 0x800905 <xTStartCheckTrv_1>
		//----------stop

		xSwitchRevOne_1_time =	xTimerCreate("swRevOne_1",		5000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxSwitchRevOne_1_ID, SwitchRev_1_Time);
    64fa:	0f 2e       	mov	r0, r31
    64fc:	f0 e9       	ldi	r31, 0x90	; 144
    64fe:	ef 2e       	mov	r14, r31
    6500:	f1 e3       	ldi	r31, 0x31	; 49
    6502:	ff 2e       	mov	r15, r31
    6504:	f0 2d       	mov	r31, r0
    6506:	03 e0       	ldi	r16, 0x03	; 3
    6508:	16 e0       	ldi	r17, 0x06	; 6
    650a:	20 e0       	ldi	r18, 0x00	; 0
    650c:	48 e8       	ldi	r20, 0x88	; 136
    650e:	53 e1       	ldi	r21, 0x13	; 19
    6510:	60 e0       	ldi	r22, 0x00	; 0
    6512:	70 e0       	ldi	r23, 0x00	; 0
    6514:	8b e5       	ldi	r24, 0x5B	; 91
    6516:	94 e0       	ldi	r25, 0x04	; 4
    6518:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    651c:	90 93 00 09 	sts	0x0900, r25	; 0x800900 <xSwitchRevOne_1_time+0x1>
    6520:	80 93 ff 08 	sts	0x08FF, r24	; 0x8008ff <xSwitchRevOne_1_time>
		xSwitchRevTwo_1_time =	xTimerCreate("swRevTwo_1",		5000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxSwitchRevTwo_1_ID, SwitchRev_2_Time);
    6524:	0f 2e       	mov	r0, r31
    6526:	f3 e4       	ldi	r31, 0x43	; 67
    6528:	ef 2e       	mov	r14, r31
    652a:	f9 e2       	ldi	r31, 0x29	; 41
    652c:	ff 2e       	mov	r15, r31
    652e:	f0 2d       	mov	r31, r0
    6530:	02 e0       	ldi	r16, 0x02	; 2
    6532:	16 e0       	ldi	r17, 0x06	; 6
    6534:	20 e0       	ldi	r18, 0x00	; 0
    6536:	48 e8       	ldi	r20, 0x88	; 136
    6538:	53 e1       	ldi	r21, 0x13	; 19
    653a:	60 e0       	ldi	r22, 0x00	; 0
    653c:	70 e0       	ldi	r23, 0x00	; 0
    653e:	86 e6       	ldi	r24, 0x66	; 102
    6540:	94 e0       	ldi	r25, 0x04	; 4
    6542:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6546:	90 93 87 0a 	sts	0x0A87, r25	; 0x800a87 <xSwitchRevTwo_1_time+0x1>
    654a:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <xSwitchRevTwo_1_time>
		xStopHeatPump_1   =		xTimerCreate("offHeatP_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayHeatPTimer_1_ID, HeatPump_Stop);//(EEpromData.HeatingPump_delay*1000)
    654e:	0f 2e       	mov	r0, r31
    6550:	f8 e5       	ldi	r31, 0x58	; 88
    6552:	ef 2e       	mov	r14, r31
    6554:	fd e2       	ldi	r31, 0x2D	; 45
    6556:	ff 2e       	mov	r15, r31
    6558:	f0 2d       	mov	r31, r0
    655a:	07 e0       	ldi	r16, 0x07	; 7
    655c:	16 e0       	ldi	r17, 0x06	; 6
    655e:	20 e0       	ldi	r18, 0x00	; 0
    6560:	48 e5       	ldi	r20, 0x58	; 88
    6562:	5b e1       	ldi	r21, 0x1B	; 27
    6564:	60 e0       	ldi	r22, 0x00	; 0
    6566:	70 e0       	ldi	r23, 0x00	; 0
    6568:	81 e7       	ldi	r24, 0x71	; 113
    656a:	94 e0       	ldi	r25, 0x04	; 4
    656c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6570:	90 93 fa 08 	sts	0x08FA, r25	; 0x8008fa <xStopHeatPump_1+0x1>
    6574:	80 93 f9 08 	sts	0x08F9, r24	; 0x8008f9 <xStopHeatPump_1>
		xStopThreeWay     =		xTimerCreate("offThreeW",		7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayThreeVTimer_1_ID, ThreeWay_Stop);//(EEpromData.Three_Way_delay*1000)
    6578:	0f 2e       	mov	r0, r31
    657a:	f5 e6       	ldi	r31, 0x65	; 101
    657c:	ef 2e       	mov	r14, r31
    657e:	fe e2       	ldi	r31, 0x2E	; 46
    6580:	ff 2e       	mov	r15, r31
    6582:	f0 2d       	mov	r31, r0
    6584:	04 e0       	ldi	r16, 0x04	; 4
    6586:	16 e0       	ldi	r17, 0x06	; 6
    6588:	20 e0       	ldi	r18, 0x00	; 0
    658a:	48 e5       	ldi	r20, 0x58	; 88
    658c:	5b e1       	ldi	r21, 0x1B	; 27
    658e:	60 e0       	ldi	r22, 0x00	; 0
    6590:	70 e0       	ldi	r23, 0x00	; 0
    6592:	8c e7       	ldi	r24, 0x7C	; 124
    6594:	94 e0       	ldi	r25, 0x04	; 4
    6596:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    659a:	90 93 e3 09 	sts	0x09E3, r25	; 0x8009e3 <xStopThreeWay+0x1>
    659e:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <xStopThreeWay>
		xStopRevValve_1   =		xTimerCreate("offRevV_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayRevVTimer_1_ID, Revers_Stop);//(EEpromData.Revers_Valve_delay*1000)
    65a2:	0f 2e       	mov	r0, r31
    65a4:	f0 ef       	ldi	r31, 0xF0	; 240
    65a6:	ef 2e       	mov	r14, r31
    65a8:	fe e2       	ldi	r31, 0x2E	; 46
    65aa:	ff 2e       	mov	r15, r31
    65ac:	f0 2d       	mov	r31, r0
    65ae:	05 e0       	ldi	r16, 0x05	; 5
    65b0:	16 e0       	ldi	r17, 0x06	; 6
    65b2:	20 e0       	ldi	r18, 0x00	; 0
    65b4:	48 e5       	ldi	r20, 0x58	; 88
    65b6:	5b e1       	ldi	r21, 0x1B	; 27
    65b8:	60 e0       	ldi	r22, 0x00	; 0
    65ba:	70 e0       	ldi	r23, 0x00	; 0
    65bc:	86 e8       	ldi	r24, 0x86	; 134
    65be:	94 e0       	ldi	r25, 0x04	; 4
    65c0:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    65c4:	90 93 7d 0a 	sts	0x0A7D, r25	; 0x800a7d <xStopRevValve_1+0x1>
    65c8:	80 93 7c 0a 	sts	0x0A7C, r24	; 0x800a7c <xStopRevValve_1>
		xStopSource_1   =		xTimerCreate("offSourceP_1",	7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelaySourcePTimer_1_ID, SorcePump_Stop);//(EEpromData.Source_Pump_delay*1000)
    65cc:	0f 2e       	mov	r0, r31
    65ce:	f8 ee       	ldi	r31, 0xE8	; 232
    65d0:	ef 2e       	mov	r14, r31
    65d2:	ff e2       	ldi	r31, 0x2F	; 47
    65d4:	ff 2e       	mov	r15, r31
    65d6:	f0 2d       	mov	r31, r0
    65d8:	06 e0       	ldi	r16, 0x06	; 6
    65da:	16 e0       	ldi	r17, 0x06	; 6
    65dc:	20 e0       	ldi	r18, 0x00	; 0
    65de:	48 e5       	ldi	r20, 0x58	; 88
    65e0:	5b e1       	ldi	r21, 0x1B	; 27
    65e2:	60 e0       	ldi	r22, 0x00	; 0
    65e4:	70 e0       	ldi	r23, 0x00	; 0
    65e6:	80 e9       	ldi	r24, 0x90	; 144
    65e8:	94 e0       	ldi	r25, 0x04	; 4
    65ea:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    65ee:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <xStopSource_1+0x1>
    65f2:	80 93 03 09 	sts	0x0903, r24	; 0x800903 <xStopSource_1>
	}
	if (comp->Index==2)
    65f6:	ce 58       	subi	r28, 0x8E	; 142
    65f8:	df 4f       	sbci	r29, 0xFF	; 255
    65fa:	88 81       	ld	r24, Y
    65fc:	99 81       	ldd	r25, Y+1	; 0x01
    65fe:	02 97       	sbiw	r24, 0x02	; 2
    6600:	09 f0       	breq	.+2      	; 0x6604 <activateTimers+0x224>
    6602:	d2 c0       	rjmp	.+420    	; 0x67a8 <activateTimers+0x3c8>
	{
		
		xStartRevValve_2   =	xTimerCreate("StRevV_2",		7000, pdFALSE, (void*) &uxStartDelayRevVTimer_2_ID, StartReversingValve);
    6604:	0f 2e       	mov	r0, r31
    6606:	f8 e0       	ldi	r31, 0x08	; 8
    6608:	ef 2e       	mov	r14, r31
    660a:	fa e2       	ldi	r31, 0x2A	; 42
    660c:	ff 2e       	mov	r15, r31
    660e:	f0 2d       	mov	r31, r0
    6610:	0f ef       	ldi	r16, 0xFF	; 255
    6612:	15 e0       	ldi	r17, 0x05	; 5
    6614:	20 e0       	ldi	r18, 0x00	; 0
    6616:	48 e5       	ldi	r20, 0x58	; 88
    6618:	5b e1       	ldi	r21, 0x1B	; 27
    661a:	60 e0       	ldi	r22, 0x00	; 0
    661c:	70 e0       	ldi	r23, 0x00	; 0
    661e:	8d e9       	ldi	r24, 0x9D	; 157
    6620:	94 e0       	ldi	r25, 0x04	; 4
    6622:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6626:	90 93 75 0a 	sts	0x0A75, r25	; 0x800a75 <xStartRevValve_2+0x1>
    662a:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <xStartRevValve_2>
		xStartHeatPump_2   =	xTimerCreate("StHeatP_2",		7000, pdFALSE, (void*) &uxStartDelayHeatPTimer_2_ID, StartHeatPump);
    662e:	0f 2e       	mov	r0, r31
    6630:	fc e9       	ldi	r31, 0x9C	; 156
    6632:	ef 2e       	mov	r14, r31
    6634:	f8 e2       	ldi	r31, 0x28	; 40
    6636:	ff 2e       	mov	r15, r31
    6638:	f0 2d       	mov	r31, r0
    663a:	00 e0       	ldi	r16, 0x00	; 0
    663c:	16 e0       	ldi	r17, 0x06	; 6
    663e:	20 e0       	ldi	r18, 0x00	; 0
    6640:	48 e5       	ldi	r20, 0x58	; 88
    6642:	5b e1       	ldi	r21, 0x1B	; 27
    6644:	60 e0       	ldi	r22, 0x00	; 0
    6646:	70 e0       	ldi	r23, 0x00	; 0
    6648:	86 ea       	ldi	r24, 0xA6	; 166
    664a:	94 e0       	ldi	r25, 0x04	; 4
    664c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6650:	90 93 e7 09 	sts	0x09E7, r25	; 0x8009e7 <xStartHeatPump_2+0x1>
    6654:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <xStartHeatPump_2>
		xStartCompressor_2 =	xTimerCreate("StComp_2",		7000, pdFALSE, (void*) &uxStartDelayCompTimer_2_ID, StartComp);
    6658:	0f 2e       	mov	r0, r31
    665a:	f6 eb       	ldi	r31, 0xB6	; 182
    665c:	ef 2e       	mov	r14, r31
    665e:	f0 e3       	ldi	r31, 0x30	; 48
    6660:	ff 2e       	mov	r15, r31
    6662:	f0 2d       	mov	r31, r0
    6664:	01 e0       	ldi	r16, 0x01	; 1
    6666:	16 e0       	ldi	r17, 0x06	; 6
    6668:	20 e0       	ldi	r18, 0x00	; 0
    666a:	48 e5       	ldi	r20, 0x58	; 88
    666c:	5b e1       	ldi	r21, 0x1B	; 27
    666e:	60 e0       	ldi	r22, 0x00	; 0
    6670:	70 e0       	ldi	r23, 0x00	; 0
    6672:	80 eb       	ldi	r24, 0xB0	; 176
    6674:	94 e0       	ldi	r25, 0x04	; 4
    6676:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    667a:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <xStartCompressor_2+0x1>
    667e:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <xStartCompressor_2>
		xTStartCheckErrors_2 =	xTimerCreate("ChErr_2",			300000, pdFALSE, (void*) &uxStartDelayChekErrTimer_2_ID, StartCheckErrors);
    6682:	0f 2e       	mov	r0, r31
    6684:	fc ea       	ldi	r31, 0xAC	; 172
    6686:	ef 2e       	mov	r14, r31
    6688:	f9 e2       	ldi	r31, 0x29	; 41
    668a:	ff 2e       	mov	r15, r31
    668c:	f0 2d       	mov	r31, r0
    668e:	0d ef       	ldi	r16, 0xFD	; 253
    6690:	15 e0       	ldi	r17, 0x05	; 5
    6692:	20 e0       	ldi	r18, 0x00	; 0
    6694:	40 ee       	ldi	r20, 0xE0	; 224
    6696:	53 e9       	ldi	r21, 0x93	; 147
    6698:	64 e0       	ldi	r22, 0x04	; 4
    669a:	70 e0       	ldi	r23, 0x00	; 0
    669c:	89 eb       	ldi	r24, 0xB9	; 185
    669e:	94 e0       	ldi	r25, 0x04	; 4
    66a0:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    66a4:	90 93 f4 08 	sts	0x08F4, r25	; 0x8008f4 <xTStartCheckErrors_2+0x1>
    66a8:	80 93 f3 08 	sts	0x08F3, r24	; 0x8008f3 <xTStartCheckErrors_2>
		xTStartCheckTrv_2 =		xTimerCreate("ChTrv_2",			7000, pdFALSE, (void*) &uxStartDelayChekTrvTimer_2_ID, StartCheckTrv);
    66ac:	0f 2e       	mov	r0, r31
    66ae:	fc ed       	ldi	r31, 0xDC	; 220
    66b0:	ef 2e       	mov	r14, r31
    66b2:	f9 e2       	ldi	r31, 0x29	; 41
    66b4:	ff 2e       	mov	r15, r31
    66b6:	f0 2d       	mov	r31, r0
    66b8:	0e ef       	ldi	r16, 0xFE	; 254
    66ba:	15 e0       	ldi	r17, 0x05	; 5
    66bc:	20 e0       	ldi	r18, 0x00	; 0
    66be:	48 e5       	ldi	r20, 0x58	; 88
    66c0:	5b e1       	ldi	r21, 0x1B	; 27
    66c2:	60 e0       	ldi	r22, 0x00	; 0
    66c4:	70 e0       	ldi	r23, 0x00	; 0
    66c6:	81 ec       	ldi	r24, 0xC1	; 193
    66c8:	94 e0       	ldi	r25, 0x04	; 4
    66ca:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    66ce:	90 93 e1 09 	sts	0x09E1, r25	; 0x8009e1 <xTStartCheckTrv_2+0x1>
    66d2:	80 93 e0 09 	sts	0x09E0, r24	; 0x8009e0 <xTStartCheckTrv_2>
		//---------stop
		xSwitchRevOne_2_time =	xTimerCreate("swRevOne_2",		5000, pdFALSE, (void*) &uxSwitchRevOne_2_ID, SwitchRev_1_Time);
    66d6:	0f 2e       	mov	r0, r31
    66d8:	f0 e9       	ldi	r31, 0x90	; 144
    66da:	ef 2e       	mov	r14, r31
    66dc:	f1 e3       	ldi	r31, 0x31	; 49
    66de:	ff 2e       	mov	r15, r31
    66e0:	f0 2d       	mov	r31, r0
    66e2:	09 ef       	ldi	r16, 0xF9	; 249
    66e4:	15 e0       	ldi	r17, 0x05	; 5
    66e6:	20 e0       	ldi	r18, 0x00	; 0
    66e8:	48 e8       	ldi	r20, 0x88	; 136
    66ea:	53 e1       	ldi	r21, 0x13	; 19
    66ec:	60 e0       	ldi	r22, 0x00	; 0
    66ee:	70 e0       	ldi	r23, 0x00	; 0
    66f0:	89 ec       	ldi	r24, 0xC9	; 201
    66f2:	94 e0       	ldi	r25, 0x04	; 4
    66f4:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    66f8:	90 93 bd 0a 	sts	0x0ABD, r25	; 0x800abd <xSwitchRevOne_2_time+0x1>
    66fc:	80 93 bc 0a 	sts	0x0ABC, r24	; 0x800abc <xSwitchRevOne_2_time>
		xSwitchRevTwo_2_time =	xTimerCreate("swRevTwo_2",		5000, pdFALSE, (void*) &uxSwitchRevTwo_2_ID, SwitchRev_2_Time);
    6700:	0f 2e       	mov	r0, r31
    6702:	f3 e4       	ldi	r31, 0x43	; 67
    6704:	ef 2e       	mov	r14, r31
    6706:	f9 e2       	ldi	r31, 0x29	; 41
    6708:	ff 2e       	mov	r15, r31
    670a:	f0 2d       	mov	r31, r0
    670c:	08 ef       	ldi	r16, 0xF8	; 248
    670e:	15 e0       	ldi	r17, 0x05	; 5
    6710:	20 e0       	ldi	r18, 0x00	; 0
    6712:	48 e8       	ldi	r20, 0x88	; 136
    6714:	53 e1       	ldi	r21, 0x13	; 19
    6716:	60 e0       	ldi	r22, 0x00	; 0
    6718:	70 e0       	ldi	r23, 0x00	; 0
    671a:	84 ed       	ldi	r24, 0xD4	; 212
    671c:	94 e0       	ldi	r25, 0x04	; 4
    671e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6722:	90 93 a2 0a 	sts	0x0AA2, r25	; 0x800aa2 <xSwitchRevTwo_2_time+0x1>
    6726:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <xSwitchRevTwo_2_time>
		xStopHeatPump_2   =		xTimerCreate("offHeatP_2",		7000, pdFALSE, (void*) &uxStopDelayHeatPTimer_2_ID, HeatPump_Stop);
    672a:	0f 2e       	mov	r0, r31
    672c:	f8 e5       	ldi	r31, 0x58	; 88
    672e:	ef 2e       	mov	r14, r31
    6730:	fd e2       	ldi	r31, 0x2D	; 45
    6732:	ff 2e       	mov	r15, r31
    6734:	f0 2d       	mov	r31, r0
    6736:	0c ef       	ldi	r16, 0xFC	; 252
    6738:	15 e0       	ldi	r17, 0x05	; 5
    673a:	20 e0       	ldi	r18, 0x00	; 0
    673c:	48 e5       	ldi	r20, 0x58	; 88
    673e:	5b e1       	ldi	r21, 0x1B	; 27
    6740:	60 e0       	ldi	r22, 0x00	; 0
    6742:	70 e0       	ldi	r23, 0x00	; 0
    6744:	8f ed       	ldi	r24, 0xDF	; 223
    6746:	94 e0       	ldi	r25, 0x04	; 4
    6748:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    674c:	90 93 7b 0a 	sts	0x0A7B, r25	; 0x800a7b <xStopHeatPump_2+0x1>
    6750:	80 93 7a 0a 	sts	0x0A7A, r24	; 0x800a7a <xStopHeatPump_2>
		xStopRevValve_2    =	xTimerCreate("offRevV_2",		7000, pdFALSE, (void*) &uxStopDelayRevVTimer_2_ID, Revers_Stop);
    6754:	0f 2e       	mov	r0, r31
    6756:	f0 ef       	ldi	r31, 0xF0	; 240
    6758:	ef 2e       	mov	r14, r31
    675a:	fe e2       	ldi	r31, 0x2E	; 46
    675c:	ff 2e       	mov	r15, r31
    675e:	f0 2d       	mov	r31, r0
    6760:	0a ef       	ldi	r16, 0xFA	; 250
    6762:	15 e0       	ldi	r17, 0x05	; 5
    6764:	20 e0       	ldi	r18, 0x00	; 0
    6766:	48 e5       	ldi	r20, 0x58	; 88
    6768:	5b e1       	ldi	r21, 0x1B	; 27
    676a:	60 e0       	ldi	r22, 0x00	; 0
    676c:	70 e0       	ldi	r23, 0x00	; 0
    676e:	8a ee       	ldi	r24, 0xEA	; 234
    6770:	94 e0       	ldi	r25, 0x04	; 4
    6772:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6776:	90 93 02 09 	sts	0x0902, r25	; 0x800902 <xStopRevValve_2+0x1>
    677a:	80 93 01 09 	sts	0x0901, r24	; 0x800901 <xStopRevValve_2>
		xStopSource_2   =		xTimerCreate("offSourceP_2",	7000, pdFALSE, (void*) &uxStopDelaySourcePTimer_2_ID, SorcePump_Stop);
    677e:	0f 2e       	mov	r0, r31
    6780:	f8 ee       	ldi	r31, 0xE8	; 232
    6782:	ef 2e       	mov	r14, r31
    6784:	ff e2       	ldi	r31, 0x2F	; 47
    6786:	ff 2e       	mov	r15, r31
    6788:	f0 2d       	mov	r31, r0
    678a:	0b ef       	ldi	r16, 0xFB	; 251
    678c:	15 e0       	ldi	r17, 0x05	; 5
    678e:	20 e0       	ldi	r18, 0x00	; 0
    6790:	48 e5       	ldi	r20, 0x58	; 88
    6792:	5b e1       	ldi	r21, 0x1B	; 27
    6794:	60 e0       	ldi	r22, 0x00	; 0
    6796:	70 e0       	ldi	r23, 0x00	; 0
    6798:	84 ef       	ldi	r24, 0xF4	; 244
    679a:	94 e0       	ldi	r25, 0x04	; 4
    679c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    67a0:	90 93 6b 0a 	sts	0x0A6B, r25	; 0x800a6b <xStopSource_2+0x1>
    67a4:	80 93 6a 0a 	sts	0x0A6A, r24	; 0x800a6a <xStopSource_2>
	}
	
	
}
    67a8:	df 91       	pop	r29
    67aa:	cf 91       	pop	r28
    67ac:	1f 91       	pop	r17
    67ae:	0f 91       	pop	r16
    67b0:	ff 90       	pop	r15
    67b2:	ef 90       	pop	r14
    67b4:	08 95       	ret

000067b6 <startDefrost>:
//------------------------------------------------
void startDefrost(xCompressor *comp,xEEdata* eeData){
    67b6:	fb 01       	movw	r30, r22
	_heatWater=eeData->heatWater;
    67b8:	81 e0       	ldi	r24, 0x01	; 1
    67ba:	95 a1       	ldd	r25, Z+37	; 0x25
    67bc:	91 11       	cpse	r25, r1
    67be:	01 c0       	rjmp	.+2      	; 0x67c2 <startDefrost+0xc>
    67c0:	80 e0       	ldi	r24, 0x00	; 0
    67c2:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <_heatWater>
	_heat =eeData->heat;
    67c6:	81 e0       	ldi	r24, 0x01	; 1
    67c8:	96 a1       	ldd	r25, Z+38	; 0x26
    67ca:	91 11       	cpse	r25, r1
    67cc:	01 c0       	rjmp	.+2      	; 0x67d0 <startDefrost+0x1a>
    67ce:	80 e0       	ldi	r24, 0x00	; 0
    67d0:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <_heat>
	_cool =eeData->cool;
    67d4:	81 e0       	ldi	r24, 0x01	; 1
    67d6:	97 a1       	ldd	r25, Z+39	; 0x27
    67d8:	91 11       	cpse	r25, r1
    67da:	01 c0       	rjmp	.+2      	; 0x67de <startDefrost+0x28>
    67dc:	80 e0       	ldi	r24, 0x00	; 0
    67de:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <_cool>
	eeData->heatWater=false;
    67e2:	15 a2       	std	Z+37, r1	; 0x25
	eeData->heat =false;
    67e4:	16 a2       	std	Z+38, r1	; 0x26
	eeData->cool =true;
    67e6:	81 e0       	ldi	r24, 0x01	; 1
    67e8:	87 a3       	std	Z+39, r24	; 0x27
    67ea:	08 95       	ret

000067ec <stopDefrost>:
	//Comp_Stop(comp);
		
}
void stopDefrost(xCompressor *comp,xEEdata* eeData){
    67ec:	fb 01       	movw	r30, r22
	
	//Comp_Stop(comp);
	//eeData->heatWater=false;
	//eeData->heat =true;
	//eeData->cool =false;
	eeData->heatWater=_heatWater;
    67ee:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <_heatWater>
    67f2:	85 a3       	std	Z+37, r24	; 0x25
	eeData->heat =_heat;
    67f4:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <_heat>
    67f8:	86 a3       	std	Z+38, r24	; 0x26
	eeData->cool =_cool;
    67fa:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <_cool>
    67fe:	87 a3       	std	Z+39, r24	; 0x27
    6800:	08 95       	ret

00006802 <StarSoursePump>:




//------------------------------------------------
void StarSoursePump(xCompressor *comp){
    6802:	4f 92       	push	r4
    6804:	5f 92       	push	r5
    6806:	6f 92       	push	r6
    6808:	7f 92       	push	r7
    680a:	af 92       	push	r10
    680c:	bf 92       	push	r11
    680e:	cf 92       	push	r12
    6810:	df 92       	push	r13
    6812:	ef 92       	push	r14
    6814:	ff 92       	push	r15
    6816:	0f 93       	push	r16
    6818:	1f 93       	push	r17
    681a:	cf 93       	push	r28
    681c:	df 93       	push	r29
    681e:	5c 01       	movw	r10, r24
TickType_t period;

	period=(TickType_t)EEpromData.Revers_Valve_delay;
    6820:	20 91 0e 09 	lds	r18, 0x090E	; 0x80090e <EEpromData+0x2>
	period*=1000;
    6824:	30 e0       	ldi	r19, 0x00	; 0
    6826:	a8 ee       	ldi	r26, 0xE8	; 232
    6828:	b3 e0       	ldi	r27, 0x03	; 3
    682a:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    682e:	2b 01       	movw	r4, r22
    6830:	3c 01       	movw	r6, r24
	xSerialxPrintf(&xSerial3Port,"SoursePump_f_%d\r\n",comp->Index);
    6832:	e5 01       	movw	r28, r10
    6834:	ce 58       	subi	r28, 0x8E	; 142
    6836:	df 4f       	sbci	r29, 0xFF	; 255
    6838:	89 81       	ldd	r24, Y+1	; 0x01
    683a:	8f 93       	push	r24
    683c:	88 81       	ld	r24, Y
    683e:	8f 93       	push	r24
    6840:	81 e0       	ldi	r24, 0x01	; 1
    6842:	95 e0       	ldi	r25, 0x05	; 5
    6844:	9f 93       	push	r25
    6846:	8f 93       	push	r24
    6848:	8a ea       	ldi	r24, 0xAA	; 170
    684a:	97 e0       	ldi	r25, 0x07	; 7
    684c:	9f 93       	push	r25
    684e:	8f 93       	push	r24
    6850:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(comp->Index == 1)
    6854:	0f 90       	pop	r0
    6856:	0f 90       	pop	r0
    6858:	0f 90       	pop	r0
    685a:	0f 90       	pop	r0
    685c:	0f 90       	pop	r0
    685e:	0f 90       	pop	r0
    6860:	88 81       	ld	r24, Y
    6862:	99 81       	ldd	r25, Y+1	; 0x01
    6864:	01 97       	sbiw	r24, 0x01	; 1
    6866:	09 f0       	breq	.+2      	; 0x686a <StarSoursePump+0x68>
    6868:	4a c0       	rjmp	.+148    	; 0x68fe <StarSoursePump+0xfc>
	{
		
		Comp_1.error=0;
    686a:	10 92 dd 09 	sts	0x09DD, r1	; 0x8009dd <Comp_1+0x71>
    686e:	10 92 dc 09 	sts	0x09DC, r1	; 0x8009dc <Comp_1+0x70>
		Comp_1.switchToMode=true;
    6872:	81 e0       	ldi	r24, 0x01	; 1
    6874:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <Comp_1>
		if(PIN_SOURCE_PUMP_1 == 0 && !comp->def )
    6878:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    687c:	81 fd       	sbrc	r24, 1
    687e:	2d c0       	rjmp	.+90     	; 0x68da <StarSoursePump+0xd8>
    6880:	f5 01       	movw	r30, r10
    6882:	81 85       	ldd	r24, Z+9	; 0x09
    6884:	81 11       	cpse	r24, r1
    6886:	29 c0       	rjmp	.+82     	; 0x68da <StarSoursePump+0xd8>
		{
			START_SOURCE_PUMP_1;
    6888:	e2 e0       	ldi	r30, 0x02	; 2
    688a:	f1 e0       	ldi	r31, 0x01	; 1
    688c:	80 81       	ld	r24, Z
    688e:	82 60       	ori	r24, 0x02	; 2
    6890:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StartSourcePump_1\r\n");
    6892:	83 e1       	ldi	r24, 0x13	; 19
    6894:	95 e0       	ldi	r25, 0x05	; 5
    6896:	9f 93       	push	r25
    6898:	8f 93       	push	r24
    689a:	8a ea       	ldi	r24, 0xAA	; 170
    689c:	97 e0       	ldi	r25, 0x07	; 7
    689e:	9f 93       	push	r25
    68a0:	8f 93       	push	r24
    68a2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->srcPOn=1;
    68a6:	81 e0       	ldi	r24, 0x01	; 1
    68a8:	f5 01       	movw	r30, r10
    68aa:	87 87       	std	Z+15, r24	; 0x0f
			timeStartSrcP_1=time(&current_time);
    68ac:	87 e0       	ldi	r24, 0x07	; 7
    68ae:	99 e0       	ldi	r25, 0x09	; 9
    68b0:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    68b4:	60 93 e8 09 	sts	0x09E8, r22	; 0x8009e8 <timeStartSrcP_1>
    68b8:	70 93 e9 09 	sts	0x09E9, r23	; 0x8009e9 <timeStartSrcP_1+0x1>
    68bc:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <timeStartSrcP_1+0x2>
    68c0:	90 93 eb 09 	sts	0x09EB, r25	; 0x8009eb <timeStartSrcP_1+0x3>
			EEpromData.number_turnon_source_1+=1;
    68c4:	ec e4       	ldi	r30, 0x4C	; 76
    68c6:	f9 e0       	ldi	r31, 0x09	; 9
    68c8:	80 81       	ld	r24, Z
    68ca:	91 81       	ldd	r25, Z+1	; 0x01
    68cc:	01 96       	adiw	r24, 0x01	; 1
    68ce:	91 83       	std	Z+1, r25	; 0x01
    68d0:	80 83       	st	Z, r24
    68d2:	0f 90       	pop	r0
    68d4:	0f 90       	pop	r0
    68d6:	0f 90       	pop	r0
    68d8:	0f 90       	pop	r0
			//xSerialxPrintf(&xSerial3Port,"Number_turnon_source_=%d\r\n",EEpromData.number_turnon_source_1);
			
						
		}
		xTimerChangePeriod( xStartRevValve_1,period, 100 );
    68da:	0f 2e       	mov	r0, r31
    68dc:	f4 e6       	ldi	r31, 0x64	; 100
    68de:	cf 2e       	mov	r12, r31
    68e0:	d1 2c       	mov	r13, r1
    68e2:	e1 2c       	mov	r14, r1
    68e4:	f1 2c       	mov	r15, r1
    68e6:	f0 2d       	mov	r31, r0
    68e8:	00 e0       	ldi	r16, 0x00	; 0
    68ea:	10 e0       	ldi	r17, 0x00	; 0
    68ec:	a3 01       	movw	r20, r6
    68ee:	92 01       	movw	r18, r4
    68f0:	64 e0       	ldi	r22, 0x04	; 4
    68f2:	80 91 b3 0a 	lds	r24, 0x0AB3	; 0x800ab3 <xStartRevValve_1>
    68f6:	90 91 b4 0a 	lds	r25, 0x0AB4	; 0x800ab4 <xStartRevValve_1+0x1>
    68fa:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if(comp->Index == 2)
    68fe:	f5 01       	movw	r30, r10
    6900:	ee 58       	subi	r30, 0x8E	; 142
    6902:	ff 4f       	sbci	r31, 0xFF	; 255
    6904:	80 81       	ld	r24, Z
    6906:	91 81       	ldd	r25, Z+1	; 0x01
    6908:	02 97       	sbiw	r24, 0x02	; 2
    690a:	09 f0       	breq	.+2      	; 0x690e <StarSoursePump+0x10c>
    690c:	4a c0       	rjmp	.+148    	; 0x69a2 <StarSoursePump+0x1a0>
	{
		Comp_2.error=0;
    690e:	10 92 67 0a 	sts	0x0A67, r1	; 0x800a67 <Comp_2+0x71>
    6912:	10 92 66 0a 	sts	0x0A66, r1	; 0x800a66 <Comp_2+0x70>
		Comp_1.switchToMode=true;
    6916:	81 e0       	ldi	r24, 0x01	; 1
    6918:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <Comp_1>
		
		xSerialxPrintf(&xSerial3Port,"StartSourcePump_2\r\n");
    691c:	87 e2       	ldi	r24, 0x27	; 39
    691e:	95 e0       	ldi	r25, 0x05	; 5
    6920:	9f 93       	push	r25
    6922:	8f 93       	push	r24
    6924:	8a ea       	ldi	r24, 0xAA	; 170
    6926:	97 e0       	ldi	r25, 0x07	; 7
    6928:	9f 93       	push	r25
    692a:	8f 93       	push	r24
    692c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		
		if(PIN_SOURCE_PUMP_2 == 0 && !comp->def)
    6930:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6934:	0f 90       	pop	r0
    6936:	0f 90       	pop	r0
    6938:	0f 90       	pop	r0
    693a:	0f 90       	pop	r0
    693c:	82 fd       	sbrc	r24, 2
    693e:	1f c0       	rjmp	.+62     	; 0x697e <StarSoursePump+0x17c>
    6940:	f5 01       	movw	r30, r10
    6942:	81 85       	ldd	r24, Z+9	; 0x09
    6944:	81 11       	cpse	r24, r1
    6946:	1b c0       	rjmp	.+54     	; 0x697e <StarSoursePump+0x17c>
		{
			START_SOURCE_PUMP_2;						
    6948:	e2 e0       	ldi	r30, 0x02	; 2
    694a:	f1 e0       	ldi	r31, 0x01	; 1
    694c:	80 81       	ld	r24, Z
    694e:	84 60       	ori	r24, 0x04	; 4
    6950:	80 83       	st	Z, r24
			comp->srcPOn=1;
    6952:	81 e0       	ldi	r24, 0x01	; 1
    6954:	f5 01       	movw	r30, r10
    6956:	87 87       	std	Z+15, r24	; 0x0f
			timeStartSrcP_2=time(&current_time);
    6958:	87 e0       	ldi	r24, 0x07	; 7
    695a:	99 e0       	ldi	r25, 0x09	; 9
    695c:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6960:	60 93 a7 0a 	sts	0x0AA7, r22	; 0x800aa7 <timeStartSrcP_2>
    6964:	70 93 a8 0a 	sts	0x0AA8, r23	; 0x800aa8 <timeStartSrcP_2+0x1>
    6968:	80 93 a9 0a 	sts	0x0AA9, r24	; 0x800aa9 <timeStartSrcP_2+0x2>
    696c:	90 93 aa 0a 	sts	0x0AAA, r25	; 0x800aaa <timeStartSrcP_2+0x3>
			EEpromData.number_turnon_source_2+=1;
    6970:	e0 e6       	ldi	r30, 0x60	; 96
    6972:	f9 e0       	ldi	r31, 0x09	; 9
    6974:	80 81       	ld	r24, Z
    6976:	91 81       	ldd	r25, Z+1	; 0x01
    6978:	01 96       	adiw	r24, 0x01	; 1
    697a:	91 83       	std	Z+1, r25	; 0x01
    697c:	80 83       	st	Z, r24
						
		}
		xTimerChangePeriod( xStartRevValve_2,period, 100 );
    697e:	0f 2e       	mov	r0, r31
    6980:	f4 e6       	ldi	r31, 0x64	; 100
    6982:	cf 2e       	mov	r12, r31
    6984:	d1 2c       	mov	r13, r1
    6986:	e1 2c       	mov	r14, r1
    6988:	f1 2c       	mov	r15, r1
    698a:	f0 2d       	mov	r31, r0
    698c:	00 e0       	ldi	r16, 0x00	; 0
    698e:	10 e0       	ldi	r17, 0x00	; 0
    6990:	a3 01       	movw	r20, r6
    6992:	92 01       	movw	r18, r4
    6994:	64 e0       	ldi	r22, 0x04	; 4
    6996:	80 91 74 0a 	lds	r24, 0x0A74	; 0x800a74 <xStartRevValve_2>
    699a:	90 91 75 0a 	lds	r25, 0x0A75	; 0x800a75 <xStartRevValve_2+0x1>
    699e:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
}
    69a2:	df 91       	pop	r29
    69a4:	cf 91       	pop	r28
    69a6:	1f 91       	pop	r17
    69a8:	0f 91       	pop	r16
    69aa:	ff 90       	pop	r15
    69ac:	ef 90       	pop	r14
    69ae:	df 90       	pop	r13
    69b0:	cf 90       	pop	r12
    69b2:	bf 90       	pop	r11
    69b4:	af 90       	pop	r10
    69b6:	7f 90       	pop	r7
    69b8:	6f 90       	pop	r6
    69ba:	5f 90       	pop	r5
    69bc:	4f 90       	pop	r4
    69be:	08 95       	ret

000069c0 <selmode>:
   
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t selmode(xEEdata* eeData)
{
    69c0:	fc 01       	movw	r30, r24

	if(eeData->heatWater && !eeData->heat && !eeData->cool)
    69c2:	85 a1       	ldd	r24, Z+37	; 0x25
    69c4:	88 23       	and	r24, r24
    69c6:	39 f0       	breq	.+14     	; 0x69d6 <selmode+0x16>
    69c8:	86 a1       	ldd	r24, Z+38	; 0x26
    69ca:	81 11       	cpse	r24, r1
    69cc:	1a c0       	rjmp	.+52     	; 0x6a02 <selmode+0x42>
    69ce:	97 a1       	ldd	r25, Z+39	; 0x27
    69d0:	91 11       	cpse	r25, r1
    69d2:	1c c0       	rjmp	.+56     	; 0x6a0c <selmode+0x4c>
    69d4:	0d c0       	rjmp	.+26     	; 0x69f0 <selmode+0x30>
	{
		return DHW;
		
	}
	if(!eeData->heatWater && eeData->heat && !eeData->cool)
    69d6:	96 a1       	ldd	r25, Z+38	; 0x26
    69d8:	99 23       	and	r25, r25
    69da:	71 f0       	breq	.+28     	; 0x69f8 <selmode+0x38>
    69dc:	97 a1       	ldd	r25, Z+39	; 0x27
    69de:	91 11       	cpse	r25, r1
    69e0:	17 c0       	rjmp	.+46     	; 0x6a10 <selmode+0x50>
	{
		return HEAT;
    69e2:	82 e0       	ldi	r24, 0x02	; 2
    69e4:	08 95       	ret
	}
	if(eeData->heatWater && eeData->heat && !eeData->cool)
	{
		return HEAT_DHW;
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
    69e6:	87 a1       	ldd	r24, Z+39	; 0x27
    69e8:	88 23       	and	r24, r24
    69ea:	91 f0       	breq	.+36     	; 0x6a10 <selmode+0x50>
	{
		return COOL_DHW;
    69ec:	85 e0       	ldi	r24, 0x05	; 5
    69ee:	08 95       	ret
uint8_t selmode(xEEdata* eeData)
{

	if(eeData->heatWater && !eeData->heat && !eeData->cool)
	{
		return DHW;
    69f0:	81 e0       	ldi	r24, 0x01	; 1
    69f2:	08 95       	ret
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
	{
		return COOL_DHW;
	}
	else return OFF;
    69f4:	80 e0       	ldi	r24, 0x00	; 0
    69f6:	08 95       	ret
	}
	if(!eeData->heatWater && eeData->heat && !eeData->cool)
	{
		return HEAT;
	}
	if(!eeData->heatWater && !eeData->heat && eeData->cool)
    69f8:	87 a1       	ldd	r24, Z+39	; 0x27
    69fa:	88 23       	and	r24, r24
    69fc:	49 f0       	breq	.+18     	; 0x6a10 <selmode+0x50>
	{
		return COOL;
    69fe:	83 e0       	ldi	r24, 0x03	; 3
    6a00:	08 95       	ret
	}
	if(eeData->heatWater && eeData->heat && !eeData->cool)
    6a02:	87 a1       	ldd	r24, Z+39	; 0x27
    6a04:	81 11       	cpse	r24, r1
    6a06:	f6 cf       	rjmp	.-20     	; 0x69f4 <selmode+0x34>
	{
		return HEAT_DHW;
    6a08:	84 e0       	ldi	r24, 0x04	; 4
    6a0a:	08 95       	ret
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
    6a0c:	88 23       	and	r24, r24
    6a0e:	59 f3       	breq	.-42     	; 0x69e6 <selmode+0x26>
	{
		return COOL_DHW;
	}
	else return OFF;

}
    6a10:	08 95       	ret

00006a12 <stop_timers>:
			}
		}break;
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void stop_timers( xCompressor *comp){
    6a12:	cf 92       	push	r12
    6a14:	df 92       	push	r13
    6a16:	ef 92       	push	r14
    6a18:	ff 92       	push	r15
    6a1a:	0f 93       	push	r16
    6a1c:	1f 93       	push	r17
	if(comp->Index==1)
    6a1e:	8e 58       	subi	r24, 0x8E	; 142
    6a20:	9f 4f       	sbci	r25, 0xFF	; 255
    6a22:	fc 01       	movw	r30, r24
    6a24:	80 81       	ld	r24, Z
    6a26:	91 81       	ldd	r25, Z+1	; 0x01
    6a28:	81 30       	cpi	r24, 0x01	; 1
    6a2a:	91 05       	cpc	r25, r1
    6a2c:	09 f0       	breq	.+2      	; 0x6a30 <stop_timers+0x1e>
    6a2e:	3a c1       	rjmp	.+628    	; 0x6ca4 <stop_timers+0x292>
	{
		if( xTimerIsTimerActive( xStartCompressor_1 ) != pdFALSE )      xTimerStop(xStartCompressor_1,1);
    6a30:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <xStartCompressor_1>
    6a34:	90 91 8b 0a 	lds	r25, 0x0A8B	; 0x800a8b <xStartCompressor_1+0x1>
    6a38:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6a3c:	88 23       	and	r24, r24
    6a3e:	81 f0       	breq	.+32     	; 0x6a60 <stop_timers+0x4e>
    6a40:	c1 2c       	mov	r12, r1
    6a42:	d1 2c       	mov	r13, r1
    6a44:	76 01       	movw	r14, r12
    6a46:	c3 94       	inc	r12
    6a48:	00 e0       	ldi	r16, 0x00	; 0
    6a4a:	10 e0       	ldi	r17, 0x00	; 0
    6a4c:	20 e0       	ldi	r18, 0x00	; 0
    6a4e:	30 e0       	ldi	r19, 0x00	; 0
    6a50:	a9 01       	movw	r20, r18
    6a52:	63 e0       	ldi	r22, 0x03	; 3
    6a54:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <xStartCompressor_1>
    6a58:	90 91 8b 0a 	lds	r25, 0x0A8B	; 0x800a8b <xStartCompressor_1+0x1>
    6a5c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartHeatPump_1 ) != pdFALSE )        xTimerStop(xStartHeatPump_1,1);
    6a60:	80 91 88 0a 	lds	r24, 0x0A88	; 0x800a88 <xStartHeatPump_1>
    6a64:	90 91 89 0a 	lds	r25, 0x0A89	; 0x800a89 <xStartHeatPump_1+0x1>
    6a68:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6a6c:	88 23       	and	r24, r24
    6a6e:	81 f0       	breq	.+32     	; 0x6a90 <stop_timers+0x7e>
    6a70:	c1 2c       	mov	r12, r1
    6a72:	d1 2c       	mov	r13, r1
    6a74:	76 01       	movw	r14, r12
    6a76:	c3 94       	inc	r12
    6a78:	00 e0       	ldi	r16, 0x00	; 0
    6a7a:	10 e0       	ldi	r17, 0x00	; 0
    6a7c:	20 e0       	ldi	r18, 0x00	; 0
    6a7e:	30 e0       	ldi	r19, 0x00	; 0
    6a80:	a9 01       	movw	r20, r18
    6a82:	63 e0       	ldi	r22, 0x03	; 3
    6a84:	80 91 88 0a 	lds	r24, 0x0A88	; 0x800a88 <xStartHeatPump_1>
    6a88:	90 91 89 0a 	lds	r25, 0x0A89	; 0x800a89 <xStartHeatPump_1+0x1>
    6a8c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartThreeWay ) != pdFALSE )			xTimerStop(xStartThreeWay,1);
    6a90:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <xStartThreeWay>
    6a94:	90 91 e5 09 	lds	r25, 0x09E5	; 0x8009e5 <xStartThreeWay+0x1>
    6a98:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6a9c:	88 23       	and	r24, r24
    6a9e:	81 f0       	breq	.+32     	; 0x6ac0 <stop_timers+0xae>
    6aa0:	c1 2c       	mov	r12, r1
    6aa2:	d1 2c       	mov	r13, r1
    6aa4:	76 01       	movw	r14, r12
    6aa6:	c3 94       	inc	r12
    6aa8:	00 e0       	ldi	r16, 0x00	; 0
    6aaa:	10 e0       	ldi	r17, 0x00	; 0
    6aac:	20 e0       	ldi	r18, 0x00	; 0
    6aae:	30 e0       	ldi	r19, 0x00	; 0
    6ab0:	a9 01       	movw	r20, r18
    6ab2:	63 e0       	ldi	r22, 0x03	; 3
    6ab4:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <xStartThreeWay>
    6ab8:	90 91 e5 09 	lds	r25, 0x09E5	; 0x8009e5 <xStartThreeWay+0x1>
    6abc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartRevValve_1 ) != pdFALSE )		xTimerStop(xStartRevValve_1,1);
    6ac0:	80 91 b3 0a 	lds	r24, 0x0AB3	; 0x800ab3 <xStartRevValve_1>
    6ac4:	90 91 b4 0a 	lds	r25, 0x0AB4	; 0x800ab4 <xStartRevValve_1+0x1>
    6ac8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6acc:	88 23       	and	r24, r24
    6ace:	81 f0       	breq	.+32     	; 0x6af0 <stop_timers+0xde>
    6ad0:	c1 2c       	mov	r12, r1
    6ad2:	d1 2c       	mov	r13, r1
    6ad4:	76 01       	movw	r14, r12
    6ad6:	c3 94       	inc	r12
    6ad8:	00 e0       	ldi	r16, 0x00	; 0
    6ada:	10 e0       	ldi	r17, 0x00	; 0
    6adc:	20 e0       	ldi	r18, 0x00	; 0
    6ade:	30 e0       	ldi	r19, 0x00	; 0
    6ae0:	a9 01       	movw	r20, r18
    6ae2:	63 e0       	ldi	r22, 0x03	; 3
    6ae4:	80 91 b3 0a 	lds	r24, 0x0AB3	; 0x800ab3 <xStartRevValve_1>
    6ae8:	90 91 b4 0a 	lds	r25, 0x0AB4	; 0x800ab4 <xStartRevValve_1+0x1>
    6aec:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevOne_1_time ) != pdFALSE )    xTimerStop(xSwitchRevOne_1_time,1);
    6af0:	80 91 ff 08 	lds	r24, 0x08FF	; 0x8008ff <xSwitchRevOne_1_time>
    6af4:	90 91 00 09 	lds	r25, 0x0900	; 0x800900 <xSwitchRevOne_1_time+0x1>
    6af8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6afc:	88 23       	and	r24, r24
    6afe:	81 f0       	breq	.+32     	; 0x6b20 <stop_timers+0x10e>
    6b00:	c1 2c       	mov	r12, r1
    6b02:	d1 2c       	mov	r13, r1
    6b04:	76 01       	movw	r14, r12
    6b06:	c3 94       	inc	r12
    6b08:	00 e0       	ldi	r16, 0x00	; 0
    6b0a:	10 e0       	ldi	r17, 0x00	; 0
    6b0c:	20 e0       	ldi	r18, 0x00	; 0
    6b0e:	30 e0       	ldi	r19, 0x00	; 0
    6b10:	a9 01       	movw	r20, r18
    6b12:	63 e0       	ldi	r22, 0x03	; 3
    6b14:	80 91 ff 08 	lds	r24, 0x08FF	; 0x8008ff <xSwitchRevOne_1_time>
    6b18:	90 91 00 09 	lds	r25, 0x0900	; 0x800900 <xSwitchRevOne_1_time+0x1>
    6b1c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevTwo_1_time ) != pdFALSE )	xTimerStop(xSwitchRevTwo_1_time,1);
    6b20:	80 91 86 0a 	lds	r24, 0x0A86	; 0x800a86 <xSwitchRevTwo_1_time>
    6b24:	90 91 87 0a 	lds	r25, 0x0A87	; 0x800a87 <xSwitchRevTwo_1_time+0x1>
    6b28:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6b2c:	88 23       	and	r24, r24
    6b2e:	81 f0       	breq	.+32     	; 0x6b50 <stop_timers+0x13e>
    6b30:	c1 2c       	mov	r12, r1
    6b32:	d1 2c       	mov	r13, r1
    6b34:	76 01       	movw	r14, r12
    6b36:	c3 94       	inc	r12
    6b38:	00 e0       	ldi	r16, 0x00	; 0
    6b3a:	10 e0       	ldi	r17, 0x00	; 0
    6b3c:	20 e0       	ldi	r18, 0x00	; 0
    6b3e:	30 e0       	ldi	r19, 0x00	; 0
    6b40:	a9 01       	movw	r20, r18
    6b42:	63 e0       	ldi	r22, 0x03	; 3
    6b44:	80 91 86 0a 	lds	r24, 0x0A86	; 0x800a86 <xSwitchRevTwo_1_time>
    6b48:	90 91 87 0a 	lds	r25, 0x0A87	; 0x800a87 <xSwitchRevTwo_1_time+0x1>
    6b4c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopHeatPump_1 ) != pdFALSE )			xTimerStop(xStopHeatPump_1,1);
    6b50:	80 91 f9 08 	lds	r24, 0x08F9	; 0x8008f9 <xStopHeatPump_1>
    6b54:	90 91 fa 08 	lds	r25, 0x08FA	; 0x8008fa <xStopHeatPump_1+0x1>
    6b58:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6b5c:	88 23       	and	r24, r24
    6b5e:	81 f0       	breq	.+32     	; 0x6b80 <stop_timers+0x16e>
    6b60:	c1 2c       	mov	r12, r1
    6b62:	d1 2c       	mov	r13, r1
    6b64:	76 01       	movw	r14, r12
    6b66:	c3 94       	inc	r12
    6b68:	00 e0       	ldi	r16, 0x00	; 0
    6b6a:	10 e0       	ldi	r17, 0x00	; 0
    6b6c:	20 e0       	ldi	r18, 0x00	; 0
    6b6e:	30 e0       	ldi	r19, 0x00	; 0
    6b70:	a9 01       	movw	r20, r18
    6b72:	63 e0       	ldi	r22, 0x03	; 3
    6b74:	80 91 f9 08 	lds	r24, 0x08F9	; 0x8008f9 <xStopHeatPump_1>
    6b78:	90 91 fa 08 	lds	r25, 0x08FA	; 0x8008fa <xStopHeatPump_1+0x1>
    6b7c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopThreeWay ) != pdFALSE )			xTimerStop(xStopThreeWay,1);
    6b80:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <xStopThreeWay>
    6b84:	90 91 e3 09 	lds	r25, 0x09E3	; 0x8009e3 <xStopThreeWay+0x1>
    6b88:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6b8c:	88 23       	and	r24, r24
    6b8e:	81 f0       	breq	.+32     	; 0x6bb0 <stop_timers+0x19e>
    6b90:	c1 2c       	mov	r12, r1
    6b92:	d1 2c       	mov	r13, r1
    6b94:	76 01       	movw	r14, r12
    6b96:	c3 94       	inc	r12
    6b98:	00 e0       	ldi	r16, 0x00	; 0
    6b9a:	10 e0       	ldi	r17, 0x00	; 0
    6b9c:	20 e0       	ldi	r18, 0x00	; 0
    6b9e:	30 e0       	ldi	r19, 0x00	; 0
    6ba0:	a9 01       	movw	r20, r18
    6ba2:	63 e0       	ldi	r22, 0x03	; 3
    6ba4:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <xStopThreeWay>
    6ba8:	90 91 e3 09 	lds	r25, 0x09E3	; 0x8009e3 <xStopThreeWay+0x1>
    6bac:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopRevValve_1 ) != pdFALSE )			xTimerStop(xStopRevValve_1,1);
    6bb0:	80 91 7c 0a 	lds	r24, 0x0A7C	; 0x800a7c <xStopRevValve_1>
    6bb4:	90 91 7d 0a 	lds	r25, 0x0A7D	; 0x800a7d <xStopRevValve_1+0x1>
    6bb8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6bbc:	88 23       	and	r24, r24
    6bbe:	81 f0       	breq	.+32     	; 0x6be0 <stop_timers+0x1ce>
    6bc0:	c1 2c       	mov	r12, r1
    6bc2:	d1 2c       	mov	r13, r1
    6bc4:	76 01       	movw	r14, r12
    6bc6:	c3 94       	inc	r12
    6bc8:	00 e0       	ldi	r16, 0x00	; 0
    6bca:	10 e0       	ldi	r17, 0x00	; 0
    6bcc:	20 e0       	ldi	r18, 0x00	; 0
    6bce:	30 e0       	ldi	r19, 0x00	; 0
    6bd0:	a9 01       	movw	r20, r18
    6bd2:	63 e0       	ldi	r22, 0x03	; 3
    6bd4:	80 91 7c 0a 	lds	r24, 0x0A7C	; 0x800a7c <xStopRevValve_1>
    6bd8:	90 91 7d 0a 	lds	r25, 0x0A7D	; 0x800a7d <xStopRevValve_1+0x1>
    6bdc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopSource_1 ) != pdFALSE )			xTimerStop(xStopSource_1,1);
    6be0:	80 91 03 09 	lds	r24, 0x0903	; 0x800903 <xStopSource_1>
    6be4:	90 91 04 09 	lds	r25, 0x0904	; 0x800904 <xStopSource_1+0x1>
    6be8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6bec:	88 23       	and	r24, r24
    6bee:	81 f0       	breq	.+32     	; 0x6c10 <stop_timers+0x1fe>
    6bf0:	c1 2c       	mov	r12, r1
    6bf2:	d1 2c       	mov	r13, r1
    6bf4:	76 01       	movw	r14, r12
    6bf6:	c3 94       	inc	r12
    6bf8:	00 e0       	ldi	r16, 0x00	; 0
    6bfa:	10 e0       	ldi	r17, 0x00	; 0
    6bfc:	20 e0       	ldi	r18, 0x00	; 0
    6bfe:	30 e0       	ldi	r19, 0x00	; 0
    6c00:	a9 01       	movw	r20, r18
    6c02:	63 e0       	ldi	r22, 0x03	; 3
    6c04:	80 91 03 09 	lds	r24, 0x0903	; 0x800903 <xStopSource_1>
    6c08:	90 91 04 09 	lds	r25, 0x0904	; 0x800904 <xStopSource_1+0x1>
    6c0c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckErrors_1 ) != pdFALSE )    xTimerStop(xTStartCheckErrors_1,1);
    6c10:	80 91 ab 0a 	lds	r24, 0x0AAB	; 0x800aab <xTStartCheckErrors_1>
    6c14:	90 91 ac 0a 	lds	r25, 0x0AAC	; 0x800aac <xTStartCheckErrors_1+0x1>
    6c18:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6c1c:	88 23       	and	r24, r24
    6c1e:	81 f0       	breq	.+32     	; 0x6c40 <stop_timers+0x22e>
    6c20:	c1 2c       	mov	r12, r1
    6c22:	d1 2c       	mov	r13, r1
    6c24:	76 01       	movw	r14, r12
    6c26:	c3 94       	inc	r12
    6c28:	00 e0       	ldi	r16, 0x00	; 0
    6c2a:	10 e0       	ldi	r17, 0x00	; 0
    6c2c:	20 e0       	ldi	r18, 0x00	; 0
    6c2e:	30 e0       	ldi	r19, 0x00	; 0
    6c30:	a9 01       	movw	r20, r18
    6c32:	63 e0       	ldi	r22, 0x03	; 3
    6c34:	80 91 ab 0a 	lds	r24, 0x0AAB	; 0x800aab <xTStartCheckErrors_1>
    6c38:	90 91 ac 0a 	lds	r25, 0x0AAC	; 0x800aac <xTStartCheckErrors_1+0x1>
    6c3c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckTrv_1 ) != pdFALSE )       xTimerStop(xTStartCheckTrv_1,1);
    6c40:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <xTStartCheckTrv_1>
    6c44:	90 91 06 09 	lds	r25, 0x0906	; 0x800906 <xTStartCheckTrv_1+0x1>
    6c48:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6c4c:	88 23       	and	r24, r24
    6c4e:	81 f0       	breq	.+32     	; 0x6c70 <stop_timers+0x25e>
    6c50:	c1 2c       	mov	r12, r1
    6c52:	d1 2c       	mov	r13, r1
    6c54:	76 01       	movw	r14, r12
    6c56:	c3 94       	inc	r12
    6c58:	00 e0       	ldi	r16, 0x00	; 0
    6c5a:	10 e0       	ldi	r17, 0x00	; 0
    6c5c:	20 e0       	ldi	r18, 0x00	; 0
    6c5e:	30 e0       	ldi	r19, 0x00	; 0
    6c60:	a9 01       	movw	r20, r18
    6c62:	63 e0       	ldi	r22, 0x03	; 3
    6c64:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <xTStartCheckTrv_1>
    6c68:	90 91 06 09 	lds	r25, 0x0906	; 0x800906 <xTStartCheckTrv_1+0x1>
    6c6c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xComutateTrv_1 ) != pdFALSE )          xTimerStop(xComutateTrv_1,1);
    6c70:	80 91 f1 08 	lds	r24, 0x08F1	; 0x8008f1 <xComutateTrv_1>
    6c74:	90 91 f2 08 	lds	r25, 0x08F2	; 0x8008f2 <xComutateTrv_1+0x1>
    6c78:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6c7c:	88 23       	and	r24, r24
    6c7e:	09 f4       	brne	.+2      	; 0x6c82 <stop_timers+0x270>
    6c80:	1c c1       	rjmp	.+568    	; 0x6eba <stop_timers+0x4a8>
    6c82:	c1 2c       	mov	r12, r1
    6c84:	d1 2c       	mov	r13, r1
    6c86:	76 01       	movw	r14, r12
    6c88:	c3 94       	inc	r12
    6c8a:	00 e0       	ldi	r16, 0x00	; 0
    6c8c:	10 e0       	ldi	r17, 0x00	; 0
    6c8e:	20 e0       	ldi	r18, 0x00	; 0
    6c90:	30 e0       	ldi	r19, 0x00	; 0
    6c92:	a9 01       	movw	r20, r18
    6c94:	63 e0       	ldi	r22, 0x03	; 3
    6c96:	80 91 f1 08 	lds	r24, 0x08F1	; 0x8008f1 <xComutateTrv_1>
    6c9a:	90 91 f2 08 	lds	r25, 0x08F2	; 0x8008f2 <xComutateTrv_1+0x1>
    6c9e:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    6ca2:	0b c1       	rjmp	.+534    	; 0x6eba <stop_timers+0x4a8>
	}
	else if (comp->Index==2)
    6ca4:	02 97       	sbiw	r24, 0x02	; 2
    6ca6:	09 f0       	breq	.+2      	; 0x6caa <stop_timers+0x298>
    6ca8:	08 c1       	rjmp	.+528    	; 0x6eba <stop_timers+0x4a8>
	{
		if( xTimerIsTimerActive( xStartCompressor_2 ) != pdFALSE )      xTimerStop(xStartCompressor_2,1);
    6caa:	80 91 9c 0a 	lds	r24, 0x0A9C	; 0x800a9c <xStartCompressor_2>
    6cae:	90 91 9d 0a 	lds	r25, 0x0A9D	; 0x800a9d <xStartCompressor_2+0x1>
    6cb2:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6cb6:	88 23       	and	r24, r24
    6cb8:	81 f0       	breq	.+32     	; 0x6cda <stop_timers+0x2c8>
    6cba:	c1 2c       	mov	r12, r1
    6cbc:	d1 2c       	mov	r13, r1
    6cbe:	76 01       	movw	r14, r12
    6cc0:	c3 94       	inc	r12
    6cc2:	00 e0       	ldi	r16, 0x00	; 0
    6cc4:	10 e0       	ldi	r17, 0x00	; 0
    6cc6:	20 e0       	ldi	r18, 0x00	; 0
    6cc8:	30 e0       	ldi	r19, 0x00	; 0
    6cca:	a9 01       	movw	r20, r18
    6ccc:	63 e0       	ldi	r22, 0x03	; 3
    6cce:	80 91 9c 0a 	lds	r24, 0x0A9C	; 0x800a9c <xStartCompressor_2>
    6cd2:	90 91 9d 0a 	lds	r25, 0x0A9D	; 0x800a9d <xStartCompressor_2+0x1>
    6cd6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartHeatPump_2 ) != pdFALSE )        xTimerStop(xStartHeatPump_2,1);
    6cda:	80 91 e6 09 	lds	r24, 0x09E6	; 0x8009e6 <xStartHeatPump_2>
    6cde:	90 91 e7 09 	lds	r25, 0x09E7	; 0x8009e7 <xStartHeatPump_2+0x1>
    6ce2:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6ce6:	88 23       	and	r24, r24
    6ce8:	81 f0       	breq	.+32     	; 0x6d0a <stop_timers+0x2f8>
    6cea:	c1 2c       	mov	r12, r1
    6cec:	d1 2c       	mov	r13, r1
    6cee:	76 01       	movw	r14, r12
    6cf0:	c3 94       	inc	r12
    6cf2:	00 e0       	ldi	r16, 0x00	; 0
    6cf4:	10 e0       	ldi	r17, 0x00	; 0
    6cf6:	20 e0       	ldi	r18, 0x00	; 0
    6cf8:	30 e0       	ldi	r19, 0x00	; 0
    6cfa:	a9 01       	movw	r20, r18
    6cfc:	63 e0       	ldi	r22, 0x03	; 3
    6cfe:	80 91 e6 09 	lds	r24, 0x09E6	; 0x8009e6 <xStartHeatPump_2>
    6d02:	90 91 e7 09 	lds	r25, 0x09E7	; 0x8009e7 <xStartHeatPump_2+0x1>
    6d06:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartRevValve_2 ) != pdFALSE )		xTimerStop(xStartRevValve_2,1);
    6d0a:	80 91 74 0a 	lds	r24, 0x0A74	; 0x800a74 <xStartRevValve_2>
    6d0e:	90 91 75 0a 	lds	r25, 0x0A75	; 0x800a75 <xStartRevValve_2+0x1>
    6d12:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6d16:	88 23       	and	r24, r24
    6d18:	81 f0       	breq	.+32     	; 0x6d3a <stop_timers+0x328>
    6d1a:	c1 2c       	mov	r12, r1
    6d1c:	d1 2c       	mov	r13, r1
    6d1e:	76 01       	movw	r14, r12
    6d20:	c3 94       	inc	r12
    6d22:	00 e0       	ldi	r16, 0x00	; 0
    6d24:	10 e0       	ldi	r17, 0x00	; 0
    6d26:	20 e0       	ldi	r18, 0x00	; 0
    6d28:	30 e0       	ldi	r19, 0x00	; 0
    6d2a:	a9 01       	movw	r20, r18
    6d2c:	63 e0       	ldi	r22, 0x03	; 3
    6d2e:	80 91 74 0a 	lds	r24, 0x0A74	; 0x800a74 <xStartRevValve_2>
    6d32:	90 91 75 0a 	lds	r25, 0x0A75	; 0x800a75 <xStartRevValve_2+0x1>
    6d36:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevOne_2_time ) != pdFALSE )    xTimerStop(xSwitchRevOne_2_time,1);
    6d3a:	80 91 bc 0a 	lds	r24, 0x0ABC	; 0x800abc <xSwitchRevOne_2_time>
    6d3e:	90 91 bd 0a 	lds	r25, 0x0ABD	; 0x800abd <xSwitchRevOne_2_time+0x1>
    6d42:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6d46:	88 23       	and	r24, r24
    6d48:	81 f0       	breq	.+32     	; 0x6d6a <stop_timers+0x358>
    6d4a:	c1 2c       	mov	r12, r1
    6d4c:	d1 2c       	mov	r13, r1
    6d4e:	76 01       	movw	r14, r12
    6d50:	c3 94       	inc	r12
    6d52:	00 e0       	ldi	r16, 0x00	; 0
    6d54:	10 e0       	ldi	r17, 0x00	; 0
    6d56:	20 e0       	ldi	r18, 0x00	; 0
    6d58:	30 e0       	ldi	r19, 0x00	; 0
    6d5a:	a9 01       	movw	r20, r18
    6d5c:	63 e0       	ldi	r22, 0x03	; 3
    6d5e:	80 91 bc 0a 	lds	r24, 0x0ABC	; 0x800abc <xSwitchRevOne_2_time>
    6d62:	90 91 bd 0a 	lds	r25, 0x0ABD	; 0x800abd <xSwitchRevOne_2_time+0x1>
    6d66:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevTwo_2_time ) != pdFALSE )	xTimerStop(xSwitchRevTwo_1_time,1);
    6d6a:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <xSwitchRevTwo_2_time>
    6d6e:	90 91 a2 0a 	lds	r25, 0x0AA2	; 0x800aa2 <xSwitchRevTwo_2_time+0x1>
    6d72:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6d76:	88 23       	and	r24, r24
    6d78:	81 f0       	breq	.+32     	; 0x6d9a <stop_timers+0x388>
    6d7a:	c1 2c       	mov	r12, r1
    6d7c:	d1 2c       	mov	r13, r1
    6d7e:	76 01       	movw	r14, r12
    6d80:	c3 94       	inc	r12
    6d82:	00 e0       	ldi	r16, 0x00	; 0
    6d84:	10 e0       	ldi	r17, 0x00	; 0
    6d86:	20 e0       	ldi	r18, 0x00	; 0
    6d88:	30 e0       	ldi	r19, 0x00	; 0
    6d8a:	a9 01       	movw	r20, r18
    6d8c:	63 e0       	ldi	r22, 0x03	; 3
    6d8e:	80 91 86 0a 	lds	r24, 0x0A86	; 0x800a86 <xSwitchRevTwo_1_time>
    6d92:	90 91 87 0a 	lds	r25, 0x0A87	; 0x800a87 <xSwitchRevTwo_1_time+0x1>
    6d96:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopHeatPump_2 ) != pdFALSE )			xTimerStop(xStopHeatPump_2,1);
    6d9a:	80 91 7a 0a 	lds	r24, 0x0A7A	; 0x800a7a <xStopHeatPump_2>
    6d9e:	90 91 7b 0a 	lds	r25, 0x0A7B	; 0x800a7b <xStopHeatPump_2+0x1>
    6da2:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6da6:	88 23       	and	r24, r24
    6da8:	81 f0       	breq	.+32     	; 0x6dca <stop_timers+0x3b8>
    6daa:	c1 2c       	mov	r12, r1
    6dac:	d1 2c       	mov	r13, r1
    6dae:	76 01       	movw	r14, r12
    6db0:	c3 94       	inc	r12
    6db2:	00 e0       	ldi	r16, 0x00	; 0
    6db4:	10 e0       	ldi	r17, 0x00	; 0
    6db6:	20 e0       	ldi	r18, 0x00	; 0
    6db8:	30 e0       	ldi	r19, 0x00	; 0
    6dba:	a9 01       	movw	r20, r18
    6dbc:	63 e0       	ldi	r22, 0x03	; 3
    6dbe:	80 91 7a 0a 	lds	r24, 0x0A7A	; 0x800a7a <xStopHeatPump_2>
    6dc2:	90 91 7b 0a 	lds	r25, 0x0A7B	; 0x800a7b <xStopHeatPump_2+0x1>
    6dc6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopRevValve_2 ) != pdFALSE )			xTimerStop(xStopRevValve_2,1);
    6dca:	80 91 01 09 	lds	r24, 0x0901	; 0x800901 <xStopRevValve_2>
    6dce:	90 91 02 09 	lds	r25, 0x0902	; 0x800902 <xStopRevValve_2+0x1>
    6dd2:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6dd6:	88 23       	and	r24, r24
    6dd8:	81 f0       	breq	.+32     	; 0x6dfa <stop_timers+0x3e8>
    6dda:	c1 2c       	mov	r12, r1
    6ddc:	d1 2c       	mov	r13, r1
    6dde:	76 01       	movw	r14, r12
    6de0:	c3 94       	inc	r12
    6de2:	00 e0       	ldi	r16, 0x00	; 0
    6de4:	10 e0       	ldi	r17, 0x00	; 0
    6de6:	20 e0       	ldi	r18, 0x00	; 0
    6de8:	30 e0       	ldi	r19, 0x00	; 0
    6dea:	a9 01       	movw	r20, r18
    6dec:	63 e0       	ldi	r22, 0x03	; 3
    6dee:	80 91 01 09 	lds	r24, 0x0901	; 0x800901 <xStopRevValve_2>
    6df2:	90 91 02 09 	lds	r25, 0x0902	; 0x800902 <xStopRevValve_2+0x1>
    6df6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopSource_2 ) != pdFALSE )			xTimerStop(xStopSource_2,1);
    6dfa:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <xStopSource_2>
    6dfe:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <xStopSource_2+0x1>
    6e02:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6e06:	88 23       	and	r24, r24
    6e08:	81 f0       	breq	.+32     	; 0x6e2a <stop_timers+0x418>
    6e0a:	c1 2c       	mov	r12, r1
    6e0c:	d1 2c       	mov	r13, r1
    6e0e:	76 01       	movw	r14, r12
    6e10:	c3 94       	inc	r12
    6e12:	00 e0       	ldi	r16, 0x00	; 0
    6e14:	10 e0       	ldi	r17, 0x00	; 0
    6e16:	20 e0       	ldi	r18, 0x00	; 0
    6e18:	30 e0       	ldi	r19, 0x00	; 0
    6e1a:	a9 01       	movw	r20, r18
    6e1c:	63 e0       	ldi	r22, 0x03	; 3
    6e1e:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <xStopSource_2>
    6e22:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <xStopSource_2+0x1>
    6e26:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckErrors_2 ) != pdFALSE )    xTimerStop(xTStartCheckErrors_2,1);
    6e2a:	80 91 f3 08 	lds	r24, 0x08F3	; 0x8008f3 <xTStartCheckErrors_2>
    6e2e:	90 91 f4 08 	lds	r25, 0x08F4	; 0x8008f4 <xTStartCheckErrors_2+0x1>
    6e32:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6e36:	88 23       	and	r24, r24
    6e38:	81 f0       	breq	.+32     	; 0x6e5a <stop_timers+0x448>
    6e3a:	c1 2c       	mov	r12, r1
    6e3c:	d1 2c       	mov	r13, r1
    6e3e:	76 01       	movw	r14, r12
    6e40:	c3 94       	inc	r12
    6e42:	00 e0       	ldi	r16, 0x00	; 0
    6e44:	10 e0       	ldi	r17, 0x00	; 0
    6e46:	20 e0       	ldi	r18, 0x00	; 0
    6e48:	30 e0       	ldi	r19, 0x00	; 0
    6e4a:	a9 01       	movw	r20, r18
    6e4c:	63 e0       	ldi	r22, 0x03	; 3
    6e4e:	80 91 f3 08 	lds	r24, 0x08F3	; 0x8008f3 <xTStartCheckErrors_2>
    6e52:	90 91 f4 08 	lds	r25, 0x08F4	; 0x8008f4 <xTStartCheckErrors_2+0x1>
    6e56:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckTrv_2 ) != pdFALSE )       xTimerStop(xTStartCheckTrv_2,1);
    6e5a:	80 91 e0 09 	lds	r24, 0x09E0	; 0x8009e0 <xTStartCheckTrv_2>
    6e5e:	90 91 e1 09 	lds	r25, 0x09E1	; 0x8009e1 <xTStartCheckTrv_2+0x1>
    6e62:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6e66:	88 23       	and	r24, r24
    6e68:	81 f0       	breq	.+32     	; 0x6e8a <stop_timers+0x478>
    6e6a:	c1 2c       	mov	r12, r1
    6e6c:	d1 2c       	mov	r13, r1
    6e6e:	76 01       	movw	r14, r12
    6e70:	c3 94       	inc	r12
    6e72:	00 e0       	ldi	r16, 0x00	; 0
    6e74:	10 e0       	ldi	r17, 0x00	; 0
    6e76:	20 e0       	ldi	r18, 0x00	; 0
    6e78:	30 e0       	ldi	r19, 0x00	; 0
    6e7a:	a9 01       	movw	r20, r18
    6e7c:	63 e0       	ldi	r22, 0x03	; 3
    6e7e:	80 91 e0 09 	lds	r24, 0x09E0	; 0x8009e0 <xTStartCheckTrv_2>
    6e82:	90 91 e1 09 	lds	r25, 0x09E1	; 0x8009e1 <xTStartCheckTrv_2+0x1>
    6e86:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xComutateTrv_2 ) != pdFALSE )          xTimerStop(xComutateTrv_2,1);
    6e8a:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <xComutateTrv_2>
    6e8e:	90 91 ed 09 	lds	r25, 0x09ED	; 0x8009ed <xComutateTrv_2+0x1>
    6e92:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6e96:	88 23       	and	r24, r24
    6e98:	81 f0       	breq	.+32     	; 0x6eba <stop_timers+0x4a8>
    6e9a:	c1 2c       	mov	r12, r1
    6e9c:	d1 2c       	mov	r13, r1
    6e9e:	76 01       	movw	r14, r12
    6ea0:	c3 94       	inc	r12
    6ea2:	00 e0       	ldi	r16, 0x00	; 0
    6ea4:	10 e0       	ldi	r17, 0x00	; 0
    6ea6:	20 e0       	ldi	r18, 0x00	; 0
    6ea8:	30 e0       	ldi	r19, 0x00	; 0
    6eaa:	a9 01       	movw	r20, r18
    6eac:	63 e0       	ldi	r22, 0x03	; 3
    6eae:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <xComutateTrv_2>
    6eb2:	90 91 ed 09 	lds	r25, 0x09ED	; 0x8009ed <xComutateTrv_2+0x1>
    6eb6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
}
    6eba:	1f 91       	pop	r17
    6ebc:	0f 91       	pop	r16
    6ebe:	ff 90       	pop	r15
    6ec0:	ef 90       	pop	r14
    6ec2:	df 90       	pop	r13
    6ec4:	cf 90       	pop	r12
    6ec6:	08 95       	ret

00006ec8 <Comp_Stop>:
	}
	
	
}
//-------------------------------------------------------------------------Stop mod
void Comp_Stop(xCompressor *comp){
    6ec8:	cf 92       	push	r12
    6eca:	df 92       	push	r13
    6ecc:	ef 92       	push	r14
    6ece:	ff 92       	push	r15
    6ed0:	0f 93       	push	r16
    6ed2:	1f 93       	push	r17
    6ed4:	cf 93       	push	r28
    6ed6:	df 93       	push	r29
    6ed8:	ec 01       	movw	r28, r24
	static time_t time_count_1;
	static time_t time_count_2;
	
	//xSerialxPrintf(&xSerial3Port,"StopCompressor\r\n");
	stop_timers(comp);
    6eda:	9b dd       	rcall	.-1226   	; 0x6a12 <stop_timers>
	comp->Cooling=comp->heatingWater=comp->Heating=false;
    6edc:	1a 82       	std	Y+2, r1	; 0x02
    6ede:	1c 82       	std	Y+4, r1	; 0x04
    6ee0:	1b 82       	std	Y+3, r1	; 0x03
    comp->switchToMode=true;
    6ee2:	81 e0       	ldi	r24, 0x01	; 1
    6ee4:	88 83       	st	Y, r24
	if(comp->Index == 1)
    6ee6:	fe 01       	movw	r30, r28
    6ee8:	ee 58       	subi	r30, 0x8E	; 142
    6eea:	ff 4f       	sbci	r31, 0xFF	; 255
    6eec:	80 81       	ld	r24, Z
    6eee:	91 81       	ldd	r25, Z+1	; 0x01
    6ef0:	81 30       	cpi	r24, 0x01	; 1
    6ef2:	91 05       	cpc	r25, r1
    6ef4:	09 f0       	breq	.+2      	; 0x6ef8 <Comp_Stop+0x30>
    6ef6:	6c c0       	rjmp	.+216    	; 0x6fd0 <Comp_Stop+0x108>
	{
		if(PIN_COMPRESSOR_1 > 0)
    6ef8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6efc:	85 ff       	sbrs	r24, 5
    6efe:	57 c0       	rjmp	.+174    	; 0x6fae <Comp_Stop+0xe6>
		{
			STOP_COMPRESSOR_1;
    6f00:	e2 e0       	ldi	r30, 0x02	; 2
    6f02:	f1 e0       	ldi	r31, 0x01	; 1
    6f04:	80 81       	ld	r24, Z
    6f06:	8f 7d       	andi	r24, 0xDF	; 223
    6f08:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopCompressor_1\r\n");
    6f0a:	8b e3       	ldi	r24, 0x3B	; 59
    6f0c:	95 e0       	ldi	r25, 0x05	; 5
    6f0e:	9f 93       	push	r25
    6f10:	8f 93       	push	r24
    6f12:	8a ea       	ldi	r24, 0xAA	; 170
    6f14:	97 e0       	ldi	r25, 0x07	; 7
    6f16:	9f 93       	push	r25
    6f18:	8f 93       	push	r24
    6f1a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->checkErrors =false;
    6f1e:	1d 82       	std	Y+5, r1	; 0x05
			
			comp->checkTrv =false;
    6f20:	19 82       	std	Y+1, r1	; 0x01
			comp->compOn=0;
    6f22:	1b 86       	std	Y+11, r1	; 0x0b
			time_count_1+= difftime(time(&current_time), timeStartComp_1);
    6f24:	c0 90 fb 08 	lds	r12, 0x08FB	; 0x8008fb <timeStartComp_1>
    6f28:	d0 90 fc 08 	lds	r13, 0x08FC	; 0x8008fc <timeStartComp_1+0x1>
    6f2c:	e0 90 fd 08 	lds	r14, 0x08FD	; 0x8008fd <timeStartComp_1+0x2>
    6f30:	f0 90 fe 08 	lds	r15, 0x08FE	; 0x8008fe <timeStartComp_1+0x3>
    6f34:	87 e0       	ldi	r24, 0x07	; 7
    6f36:	99 e0       	ldi	r25, 0x09	; 9
    6f38:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6f3c:	a7 01       	movw	r20, r14
    6f3e:	96 01       	movw	r18, r12
    6f40:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    6f44:	c0 90 45 07 	lds	r12, 0x0745	; 0x800745 <time_count_1.3196>
    6f48:	d0 90 46 07 	lds	r13, 0x0746	; 0x800746 <time_count_1.3196+0x1>
    6f4c:	e0 90 47 07 	lds	r14, 0x0747	; 0x800747 <time_count_1.3196+0x2>
    6f50:	f0 90 48 07 	lds	r15, 0x0748	; 0x800748 <time_count_1.3196+0x3>
    6f54:	dc 01       	movw	r26, r24
    6f56:	cb 01       	movw	r24, r22
    6f58:	8c 0d       	add	r24, r12
    6f5a:	9d 1d       	adc	r25, r13
    6f5c:	ae 1d       	adc	r26, r14
    6f5e:	bf 1d       	adc	r27, r15
    6f60:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <time_count_1.3196>
    6f64:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <time_count_1.3196+0x1>
    6f68:	a0 93 47 07 	sts	0x0747, r26	; 0x800747 <time_count_1.3196+0x2>
    6f6c:	b0 93 48 07 	sts	0x0748, r27	; 0x800748 <time_count_1.3196+0x3>
			
			//xSerialxPrintf(&xSerial3Port,"time_Compressor_=%d\r\n",time_count_1);
			if(time_count_1>ONE_HOUR){EEpromData.time_compressor_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    6f70:	0f 90       	pop	r0
    6f72:	0f 90       	pop	r0
    6f74:	0f 90       	pop	r0
    6f76:	0f 90       	pop	r0
    6f78:	81 31       	cpi	r24, 0x11	; 17
    6f7a:	9e 40       	sbci	r25, 0x0E	; 14
    6f7c:	a1 05       	cpc	r26, r1
    6f7e:	b1 05       	cpc	r27, r1
    6f80:	b0 f0       	brcs	.+44     	; 0x6fae <Comp_Stop+0xe6>
    6f82:	ec e0       	ldi	r30, 0x0C	; 12
    6f84:	f9 e0       	ldi	r31, 0x09	; 9
    6f86:	82 ad       	ldd	r24, Z+58	; 0x3a
    6f88:	93 ad       	ldd	r25, Z+59	; 0x3b
    6f8a:	01 96       	adiw	r24, 0x01	; 1
    6f8c:	93 af       	std	Z+59, r25	; 0x3b
    6f8e:	82 af       	std	Z+58, r24	; 0x3a
    6f90:	40 e6       	ldi	r20, 0x60	; 96
    6f92:	50 e0       	ldi	r21, 0x00	; 0
    6f94:	60 e0       	ldi	r22, 0x00	; 0
    6f96:	70 e0       	ldi	r23, 0x00	; 0
    6f98:	cf 01       	movw	r24, r30
    6f9a:	0e 94 7b 5c 	call	0xb8f6	; 0xb8f6 <eeprom_update_block>
    6f9e:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <time_count_1.3196>
    6fa2:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <time_count_1.3196+0x1>
    6fa6:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <time_count_1.3196+0x2>
    6faa:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <time_count_1.3196+0x3>
			
		}
		xTimerStart(xSwitchRevOne_1_time, 0);
    6fae:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    6fb2:	9b 01       	movw	r18, r22
    6fb4:	ac 01       	movw	r20, r24
    6fb6:	c1 2c       	mov	r12, r1
    6fb8:	d1 2c       	mov	r13, r1
    6fba:	76 01       	movw	r14, r12
    6fbc:	00 e0       	ldi	r16, 0x00	; 0
    6fbe:	10 e0       	ldi	r17, 0x00	; 0
    6fc0:	61 e0       	ldi	r22, 0x01	; 1
    6fc2:	80 91 ff 08 	lds	r24, 0x08FF	; 0x8008ff <xSwitchRevOne_1_time>
    6fc6:	90 91 00 09 	lds	r25, 0x0900	; 0x800900 <xSwitchRevOne_1_time+0x1>
    6fca:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    6fce:	71 c0       	rjmp	.+226    	; 0x70b2 <Comp_Stop+0x1ea>
		
	}
	else if(comp->Index == 2)
    6fd0:	02 97       	sbiw	r24, 0x02	; 2
    6fd2:	09 f0       	breq	.+2      	; 0x6fd6 <Comp_Stop+0x10e>
    6fd4:	6e c0       	rjmp	.+220    	; 0x70b2 <Comp_Stop+0x1ea>
	{
		if(PIN_COMPRESSOR_2 > 0)
    6fd6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6fda:	86 ff       	sbrs	r24, 6
    6fdc:	5a c0       	rjmp	.+180    	; 0x7092 <Comp_Stop+0x1ca>
		{
			
			STOP_COMPRESSOR_2;
    6fde:	e2 e0       	ldi	r30, 0x02	; 2
    6fe0:	f1 e0       	ldi	r31, 0x01	; 1
    6fe2:	80 81       	ld	r24, Z
    6fe4:	8f 7b       	andi	r24, 0xBF	; 191
    6fe6:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopCompressor_2\r\n");
    6fe8:	8e e4       	ldi	r24, 0x4E	; 78
    6fea:	95 e0       	ldi	r25, 0x05	; 5
    6fec:	9f 93       	push	r25
    6fee:	8f 93       	push	r24
    6ff0:	8a ea       	ldi	r24, 0xAA	; 170
    6ff2:	97 e0       	ldi	r25, 0x07	; 7
    6ff4:	9f 93       	push	r25
    6ff6:	8f 93       	push	r24
    6ff8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->checkErrors =false;
    6ffc:	1d 82       	std	Y+5, r1	; 0x05
			comp->switchToMode=true;
    6ffe:	81 e0       	ldi	r24, 0x01	; 1
    7000:	88 83       	st	Y, r24
			comp->checkTrv =false;
    7002:	19 82       	std	Y+1, r1	; 0x01
			comp->compOn=0;
    7004:	1b 86       	std	Y+11, r1	; 0x0b
			time_count_2+= difftime(time(&current_time), timeStartComp_2);
    7006:	c0 90 ad 0a 	lds	r12, 0x0AAD	; 0x800aad <timeStartComp_2>
    700a:	d0 90 ae 0a 	lds	r13, 0x0AAE	; 0x800aae <timeStartComp_2+0x1>
    700e:	e0 90 af 0a 	lds	r14, 0x0AAF	; 0x800aaf <timeStartComp_2+0x2>
    7012:	f0 90 b0 0a 	lds	r15, 0x0AB0	; 0x800ab0 <timeStartComp_2+0x3>
    7016:	87 e0       	ldi	r24, 0x07	; 7
    7018:	99 e0       	ldi	r25, 0x09	; 9
    701a:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    701e:	a7 01       	movw	r20, r14
    7020:	96 01       	movw	r18, r12
    7022:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    7026:	c0 90 41 07 	lds	r12, 0x0741	; 0x800741 <time_count_2.3197>
    702a:	d0 90 42 07 	lds	r13, 0x0742	; 0x800742 <time_count_2.3197+0x1>
    702e:	e0 90 43 07 	lds	r14, 0x0743	; 0x800743 <time_count_2.3197+0x2>
    7032:	f0 90 44 07 	lds	r15, 0x0744	; 0x800744 <time_count_2.3197+0x3>
    7036:	dc 01       	movw	r26, r24
    7038:	cb 01       	movw	r24, r22
    703a:	8c 0d       	add	r24, r12
    703c:	9d 1d       	adc	r25, r13
    703e:	ae 1d       	adc	r26, r14
    7040:	bf 1d       	adc	r27, r15
    7042:	80 93 41 07 	sts	0x0741, r24	; 0x800741 <time_count_2.3197>
    7046:	90 93 42 07 	sts	0x0742, r25	; 0x800742 <time_count_2.3197+0x1>
    704a:	a0 93 43 07 	sts	0x0743, r26	; 0x800743 <time_count_2.3197+0x2>
    704e:	b0 93 44 07 	sts	0x0744, r27	; 0x800744 <time_count_2.3197+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_compressor_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    7052:	0f 90       	pop	r0
    7054:	0f 90       	pop	r0
    7056:	0f 90       	pop	r0
    7058:	0f 90       	pop	r0
    705a:	81 31       	cpi	r24, 0x11	; 17
    705c:	9e 40       	sbci	r25, 0x0E	; 14
    705e:	a1 05       	cpc	r26, r1
    7060:	b1 05       	cpc	r27, r1
    7062:	b8 f0       	brcs	.+46     	; 0x7092 <Comp_Stop+0x1ca>
    7064:	ec e5       	ldi	r30, 0x5C	; 92
    7066:	f9 e0       	ldi	r31, 0x09	; 9
    7068:	80 81       	ld	r24, Z
    706a:	91 81       	ldd	r25, Z+1	; 0x01
    706c:	01 96       	adiw	r24, 0x01	; 1
    706e:	91 83       	std	Z+1, r25	; 0x01
    7070:	80 83       	st	Z, r24
    7072:	40 e6       	ldi	r20, 0x60	; 96
    7074:	50 e0       	ldi	r21, 0x00	; 0
    7076:	60 e0       	ldi	r22, 0x00	; 0
    7078:	70 e0       	ldi	r23, 0x00	; 0
    707a:	8c e0       	ldi	r24, 0x0C	; 12
    707c:	99 e0       	ldi	r25, 0x09	; 9
    707e:	0e 94 7b 5c 	call	0xb8f6	; 0xb8f6 <eeprom_update_block>
    7082:	10 92 41 07 	sts	0x0741, r1	; 0x800741 <time_count_2.3197>
    7086:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <time_count_2.3197+0x1>
    708a:	10 92 43 07 	sts	0x0743, r1	; 0x800743 <time_count_2.3197+0x2>
    708e:	10 92 44 07 	sts	0x0744, r1	; 0x800744 <time_count_2.3197+0x3>
			
		}
		xTimerStart(xSwitchRevOne_2_time, 0);
    7092:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    7096:	9b 01       	movw	r18, r22
    7098:	ac 01       	movw	r20, r24
    709a:	c1 2c       	mov	r12, r1
    709c:	d1 2c       	mov	r13, r1
    709e:	76 01       	movw	r14, r12
    70a0:	00 e0       	ldi	r16, 0x00	; 0
    70a2:	10 e0       	ldi	r17, 0x00	; 0
    70a4:	61 e0       	ldi	r22, 0x01	; 1
    70a6:	80 91 bc 0a 	lds	r24, 0x0ABC	; 0x800abc <xSwitchRevOne_2_time>
    70aa:	90 91 bd 0a 	lds	r25, 0x0ABD	; 0x800abd <xSwitchRevOne_2_time+0x1>
    70ae:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
	
	
}
    70b2:	df 91       	pop	r29
    70b4:	cf 91       	pop	r28
    70b6:	1f 91       	pop	r17
    70b8:	0f 91       	pop	r16
    70ba:	ff 90       	pop	r15
    70bc:	ef 90       	pop	r14
    70be:	df 90       	pop	r13
    70c0:	cf 90       	pop	r12
    70c2:	08 95       	ret

000070c4 <goToMode>:
	else return OFF;

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void goToMode(xCompressor *comp)
{   //calibration(comp);
    70c4:	cf 93       	push	r28
    70c6:	df 93       	push	r29
    70c8:	ec 01       	movw	r28, r24
	stop_timers(comp);
    70ca:	a3 dc       	rcall	.-1722   	; 0x6a12 <stop_timers>
	startTrvTimer(comp);
    70cc:	ce 01       	movw	r24, r28
    70ce:	0e 94 8d 50 	call	0xa11a	; 0xa11a <startTrvTimer>
	//comp->switchToMode=true;
	
	StarSoursePump(comp);
    70d2:	ce 01       	movw	r24, r28
    70d4:	96 db       	rcall	.-2260   	; 0x6802 <StarSoursePump>
	//Comp_1.Steps = Fuzzy(&Comp_1,EEpromData.trv_corection_1);
	
}
    70d6:	df 91       	pop	r29
    70d8:	cf 91       	pop	r28
    70da:	08 95       	ret

000070dc <mod_pump>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void mod_pump( xCompressor *comp,xEEdata* eeData){
    70dc:	2f 92       	push	r2
    70de:	3f 92       	push	r3
    70e0:	4f 92       	push	r4
    70e2:	5f 92       	push	r5
    70e4:	6f 92       	push	r6
    70e6:	7f 92       	push	r7
    70e8:	8f 92       	push	r8
    70ea:	9f 92       	push	r9
    70ec:	af 92       	push	r10
    70ee:	bf 92       	push	r11
    70f0:	cf 92       	push	r12
    70f2:	df 92       	push	r13
    70f4:	ef 92       	push	r14
    70f6:	ff 92       	push	r15
    70f8:	1f 93       	push	r17
    70fa:	cf 93       	push	r28
    70fc:	df 93       	push	r29
    70fe:	ec 01       	movw	r28, r24
    7100:	1b 01       	movw	r2, r22

	uint8_t temp;
	temp = selmode(&EEpromData);
    7102:	8c e0       	ldi	r24, 0x0C	; 12
    7104:	99 e0       	ldi	r25, 0x09	; 9
    7106:	5c dc       	rcall	.-1864   	; 0x69c0 <selmode>
    7108:	18 2f       	mov	r17, r24
	if(temp!=comp->modeOfPump ){comp->modeOfPump=temp; Comp_Stop(comp);}
    710a:	88 89       	ldd	r24, Y+16	; 0x10
    710c:	18 17       	cp	r17, r24
    710e:	19 f0       	breq	.+6      	; 0x7116 <mod_pump+0x3a>
    7110:	18 8b       	std	Y+16, r17	; 0x10
    7112:	ce 01       	movw	r24, r28
    7114:	d9 de       	rcall	.-590    	; 0x6ec8 <Comp_Stop>

	switch(temp){
    7116:	13 30       	cpi	r17, 0x03	; 3
    7118:	09 f4       	brne	.+2      	; 0x711c <mod_pump+0x40>
    711a:	c8 c0       	rjmp	.+400    	; 0x72ac <mod_pump+0x1d0>
    711c:	30 f4       	brcc	.+12     	; 0x712a <mod_pump+0x4e>
    711e:	11 30       	cpi	r17, 0x01	; 1
    7120:	59 f0       	breq	.+22     	; 0x7138 <mod_pump+0x5c>
    7122:	12 30       	cpi	r17, 0x02	; 2
    7124:	09 f4       	brne	.+2      	; 0x7128 <mod_pump+0x4c>
    7126:	6a c0       	rjmp	.+212    	; 0x71fc <mod_pump+0x120>
    7128:	14 c5       	rjmp	.+2600   	; 0x7b52 <mod_pump+0xa76>
    712a:	14 30       	cpi	r17, 0x04	; 4
    712c:	09 f4       	brne	.+2      	; 0x7130 <mod_pump+0x54>
    712e:	18 c1       	rjmp	.+560    	; 0x7360 <mod_pump+0x284>
    7130:	15 30       	cpi	r17, 0x05	; 5
    7132:	09 f4       	brne	.+2      	; 0x7136 <mod_pump+0x5a>
    7134:	62 c2       	rjmp	.+1220   	; 0x75fa <mod_pump+0x51e>
    7136:	0d c5       	rjmp	.+2586   	; 0x7b52 <mod_pump+0xa76>
		case DHW: {
		if(comp->Index==1){
    7138:	fe 01       	movw	r30, r28
    713a:	ee 58       	subi	r30, 0x8E	; 142
    713c:	ff 4f       	sbci	r31, 0xFF	; 255
    713e:	80 81       	ld	r24, Z
    7140:	91 81       	ldd	r25, Z+1	; 0x01
    7142:	01 97       	sbiw	r24, 0x01	; 1
    7144:	09 f0       	breq	.+2      	; 0x7148 <mod_pump+0x6c>
    7146:	05 c5       	rjmp	.+2570   	; 0x7b52 <mod_pump+0xa76>
			if ( comp->Dhw_Temp > eeData->Set_DHW && comp->heatingWater && !comp->switchToMode) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp);}
    7148:	8a 88       	ldd	r8, Y+18	; 0x12
    714a:	9b 88       	ldd	r9, Y+19	; 0x13
    714c:	ac 88       	ldd	r10, Y+20	; 0x14
    714e:	bd 88       	ldd	r11, Y+21	; 0x15
    7150:	f1 01       	movw	r30, r2
    7152:	e3 8c       	ldd	r14, Z+27	; 0x1b
    7154:	f1 2c       	mov	r15, r1
    7156:	b7 01       	movw	r22, r14
    7158:	0f 2c       	mov	r0, r15
    715a:	00 0c       	add	r0, r0
    715c:	88 0b       	sbc	r24, r24
    715e:	99 0b       	sbc	r25, r25
    7160:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    7164:	9b 01       	movw	r18, r22
    7166:	ac 01       	movw	r20, r24
    7168:	c5 01       	movw	r24, r10
    716a:	b4 01       	movw	r22, r8
    716c:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    7170:	18 16       	cp	r1, r24
    7172:	6c f4       	brge	.+26     	; 0x718e <mod_pump+0xb2>
    7174:	8c 81       	ldd	r24, Y+4	; 0x04
    7176:	88 23       	and	r24, r24
    7178:	09 f4       	brne	.+2      	; 0x717c <mod_pump+0xa0>
    717a:	82 c3       	rjmp	.+1796   	; 0x7880 <mod_pump+0x7a4>
    717c:	88 81       	ld	r24, Y
    717e:	81 11       	cpse	r24, r1
    7180:	e8 c4       	rjmp	.+2512   	; 0x7b52 <mod_pump+0xa76>
    7182:	1c 82       	std	Y+4, r1	; 0x04
    7184:	ce 01       	movw	r24, r28
    7186:	a0 de       	rcall	.-704    	; 0x6ec8 <Comp_Stop>
    7188:	ce 01       	movw	r24, r28
    718a:	0e 94 c5 50 	call	0xa18a	; 0xa18a <stopTrvTimer>
			if ( comp->Dhw_Temp < (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->switchToMode){calibration(comp);Comp_1.error=0; comp->heatingWater=true; goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_Dhw\r\n");}//Start_Dhw();
    718e:	f1 01       	movw	r30, r2
    7190:	63 8d       	ldd	r22, Z+27	; 0x1b
    7192:	70 e0       	ldi	r23, 0x00	; 0
    7194:	86 8d       	ldd	r24, Z+30	; 0x1e
    7196:	68 1b       	sub	r22, r24
    7198:	71 09       	sbc	r23, r1
    719a:	07 2e       	mov	r0, r23
    719c:	00 0c       	add	r0, r0
    719e:	88 0b       	sbc	r24, r24
    71a0:	99 0b       	sbc	r25, r25
    71a2:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    71a6:	9b 01       	movw	r18, r22
    71a8:	ac 01       	movw	r20, r24
    71aa:	6a 89       	ldd	r22, Y+18	; 0x12
    71ac:	7b 89       	ldd	r23, Y+19	; 0x13
    71ae:	8c 89       	ldd	r24, Y+20	; 0x14
    71b0:	9d 89       	ldd	r25, Y+21	; 0x15
    71b2:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    71b6:	88 23       	and	r24, r24
    71b8:	0c f0       	brlt	.+2      	; 0x71bc <mod_pump+0xe0>
    71ba:	cb c4       	rjmp	.+2454   	; 0x7b52 <mod_pump+0xa76>
    71bc:	8c 81       	ldd	r24, Y+4	; 0x04
    71be:	81 11       	cpse	r24, r1
    71c0:	c8 c4       	rjmp	.+2448   	; 0x7b52 <mod_pump+0xa76>
    71c2:	88 81       	ld	r24, Y
    71c4:	81 11       	cpse	r24, r1
    71c6:	c5 c4       	rjmp	.+2442   	; 0x7b52 <mod_pump+0xa76>
    71c8:	ce 01       	movw	r24, r28
    71ca:	0e 94 16 53 	call	0xa62c	; 0xa62c <calibration>
    71ce:	10 92 dd 09 	sts	0x09DD, r1	; 0x8009dd <Comp_1+0x71>
    71d2:	10 92 dc 09 	sts	0x09DC, r1	; 0x8009dc <Comp_1+0x70>
    71d6:	81 e0       	ldi	r24, 0x01	; 1
    71d8:	8c 83       	std	Y+4, r24	; 0x04
    71da:	ce 01       	movw	r24, r28
    71dc:	73 df       	rcall	.-282    	; 0x70c4 <goToMode>
    71de:	81 e6       	ldi	r24, 0x61	; 97
    71e0:	95 e0       	ldi	r25, 0x05	; 5
    71e2:	9f 93       	push	r25
    71e4:	8f 93       	push	r24
    71e6:	8a ea       	ldi	r24, 0xAA	; 170
    71e8:	97 e0       	ldi	r25, 0x07	; 7
    71ea:	9f 93       	push	r25
    71ec:	8f 93       	push	r24
    71ee:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    71f2:	0f 90       	pop	r0
    71f4:	0f 90       	pop	r0
    71f6:	0f 90       	pop	r0
    71f8:	0f 90       	pop	r0
    71fa:	ab c4       	rjmp	.+2390   	; 0x7b52 <mod_pump+0xa76>
		
		case HEAT:{
			//xSerialxPrintf(&xSerial3Port,"Set_Heating =%d\r\n,diffHEAT =%d\r\n,Bac_Temp =%f\r\n",eeData->Set_Heating,eeData->diffHEAT,data->Bac_Temp);
			//xSerialxPrintf(&xSerial3Port,"diffHEAT =%d\r\n",eeData->diffHEAT);
			//xSerialxPrintf(&xSerial3Port,"heat mode\r\n");
			if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {comp->Heating=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat\r\n");}
    71fc:	8e 88       	ldd	r8, Y+22	; 0x16
    71fe:	9f 88       	ldd	r9, Y+23	; 0x17
    7200:	a8 8c       	ldd	r10, Y+24	; 0x18
    7202:	b9 8c       	ldd	r11, Y+25	; 0x19
    7204:	f1 01       	movw	r30, r2
    7206:	e1 8c       	ldd	r14, Z+25	; 0x19
    7208:	f1 2c       	mov	r15, r1
    720a:	84 8d       	ldd	r24, Z+28	; 0x1c
    720c:	b7 01       	movw	r22, r14
    720e:	68 1b       	sub	r22, r24
    7210:	71 09       	sbc	r23, r1
    7212:	07 2e       	mov	r0, r23
    7214:	00 0c       	add	r0, r0
    7216:	88 0b       	sbc	r24, r24
    7218:	99 0b       	sbc	r25, r25
    721a:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    721e:	9b 01       	movw	r18, r22
    7220:	ac 01       	movw	r20, r24
    7222:	c5 01       	movw	r24, r10
    7224:	b4 01       	movw	r22, r8
    7226:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    722a:	88 23       	and	r24, r24
    722c:	fc f4       	brge	.+62     	; 0x726c <mod_pump+0x190>
    722e:	8a 81       	ldd	r24, Y+2	; 0x02
    7230:	81 11       	cpse	r24, r1
    7232:	3b c3       	rjmp	.+1654   	; 0x78aa <mod_pump+0x7ce>
    7234:	88 81       	ld	r24, Y
    7236:	81 11       	cpse	r24, r1
    7238:	8c c4       	rjmp	.+2328   	; 0x7b52 <mod_pump+0xa76>
    723a:	81 e0       	ldi	r24, 0x01	; 1
    723c:	8a 83       	std	Y+2, r24	; 0x02
    723e:	ce 01       	movw	r24, r28
    7240:	0e 94 16 53 	call	0xa62c	; 0xa62c <calibration>
    7244:	10 92 dd 09 	sts	0x09DD, r1	; 0x8009dd <Comp_1+0x71>
    7248:	10 92 dc 09 	sts	0x09DC, r1	; 0x8009dc <Comp_1+0x70>
    724c:	ce 01       	movw	r24, r28
    724e:	3a df       	rcall	.-396    	; 0x70c4 <goToMode>
    7250:	8d e6       	ldi	r24, 0x6D	; 109
    7252:	95 e0       	ldi	r25, 0x05	; 5
    7254:	9f 93       	push	r25
    7256:	8f 93       	push	r24
    7258:	8a ea       	ldi	r24, 0xAA	; 170
    725a:	97 e0       	ldi	r25, 0x07	; 7
    725c:	9f 93       	push	r25
    725e:	8f 93       	push	r24
    7260:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7264:	0f 90       	pop	r0
    7266:	0f 90       	pop	r0
    7268:	0f 90       	pop	r0
    726a:	0f 90       	pop	r0
			if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    726c:	f1 01       	movw	r30, r2
    726e:	61 8d       	ldd	r22, Z+25	; 0x19
    7270:	70 e0       	ldi	r23, 0x00	; 0
    7272:	80 e0       	ldi	r24, 0x00	; 0
    7274:	90 e0       	ldi	r25, 0x00	; 0
    7276:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    727a:	9b 01       	movw	r18, r22
    727c:	ac 01       	movw	r20, r24
    727e:	6e 89       	ldd	r22, Y+22	; 0x16
    7280:	7f 89       	ldd	r23, Y+23	; 0x17
    7282:	88 8d       	ldd	r24, Y+24	; 0x18
    7284:	99 8d       	ldd	r25, Y+25	; 0x19
    7286:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    728a:	18 16       	cp	r1, r24
    728c:	0c f0       	brlt	.+2      	; 0x7290 <mod_pump+0x1b4>
    728e:	61 c4       	rjmp	.+2242   	; 0x7b52 <mod_pump+0xa76>
    7290:	8a 81       	ldd	r24, Y+2	; 0x02
    7292:	88 23       	and	r24, r24
    7294:	09 f4       	brne	.+2      	; 0x7298 <mod_pump+0x1bc>
    7296:	5d c4       	rjmp	.+2234   	; 0x7b52 <mod_pump+0xa76>
    7298:	88 81       	ld	r24, Y
    729a:	81 11       	cpse	r24, r1
    729c:	5a c4       	rjmp	.+2228   	; 0x7b52 <mod_pump+0xa76>
    729e:	1a 82       	std	Y+2, r1	; 0x02
    72a0:	ce 01       	movw	r24, r28
    72a2:	12 de       	rcall	.-988    	; 0x6ec8 <Comp_Stop>
    72a4:	ce 01       	movw	r24, r28
    72a6:	0e 94 c5 50 	call	0xa18a	; 0xa18a <stopTrvTimer>
    72aa:	53 c4       	rjmp	.+2214   	; 0x7b52 <mod_pump+0xa76>
		} break;
		
		case COOL:{
			//xSerialxPrintf(&xSerial3Port,"COOL mode\r\n");
			if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
    72ac:	8e 88       	ldd	r8, Y+22	; 0x16
    72ae:	9f 88       	ldd	r9, Y+23	; 0x17
    72b0:	a8 8c       	ldd	r10, Y+24	; 0x18
    72b2:	b9 8c       	ldd	r11, Y+25	; 0x19
    72b4:	f1 01       	movw	r30, r2
    72b6:	e2 8c       	ldd	r14, Z+26	; 0x1a
    72b8:	f1 2c       	mov	r15, r1
    72ba:	b7 01       	movw	r22, r14
    72bc:	0f 2c       	mov	r0, r15
    72be:	00 0c       	add	r0, r0
    72c0:	88 0b       	sbc	r24, r24
    72c2:	99 0b       	sbc	r25, r25
    72c4:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    72c8:	9b 01       	movw	r18, r22
    72ca:	ac 01       	movw	r20, r24
    72cc:	c5 01       	movw	r24, r10
    72ce:	b4 01       	movw	r22, r8
    72d0:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    72d4:	88 23       	and	r24, r24
    72d6:	6c f4       	brge	.+26     	; 0x72f2 <mod_pump+0x216>
    72d8:	8b 81       	ldd	r24, Y+3	; 0x03
    72da:	88 23       	and	r24, r24
    72dc:	09 f4       	brne	.+2      	; 0x72e0 <mod_pump+0x204>
    72de:	f5 c2       	rjmp	.+1514   	; 0x78ca <mod_pump+0x7ee>
    72e0:	88 81       	ld	r24, Y
    72e2:	81 11       	cpse	r24, r1
    72e4:	36 c4       	rjmp	.+2156   	; 0x7b52 <mod_pump+0xa76>
    72e6:	1b 82       	std	Y+3, r1	; 0x03
    72e8:	ce 01       	movw	r24, r28
    72ea:	ee dd       	rcall	.-1060   	; 0x6ec8 <Comp_Stop>
    72ec:	ce 01       	movw	r24, r28
    72ee:	0e 94 c5 50 	call	0xa18a	; 0xa18a <stopTrvTimer>
			if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {comp->Cooling=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool\r\n");}//
    72f2:	f1 01       	movw	r30, r2
    72f4:	82 8d       	ldd	r24, Z+26	; 0x1a
    72f6:	65 8d       	ldd	r22, Z+29	; 0x1d
    72f8:	70 e0       	ldi	r23, 0x00	; 0
    72fa:	68 0f       	add	r22, r24
    72fc:	71 1d       	adc	r23, r1
    72fe:	07 2e       	mov	r0, r23
    7300:	00 0c       	add	r0, r0
    7302:	88 0b       	sbc	r24, r24
    7304:	99 0b       	sbc	r25, r25
    7306:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    730a:	9b 01       	movw	r18, r22
    730c:	ac 01       	movw	r20, r24
    730e:	6e 89       	ldd	r22, Y+22	; 0x16
    7310:	7f 89       	ldd	r23, Y+23	; 0x17
    7312:	88 8d       	ldd	r24, Y+24	; 0x18
    7314:	99 8d       	ldd	r25, Y+25	; 0x19
    7316:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    731a:	18 16       	cp	r1, r24
    731c:	0c f0       	brlt	.+2      	; 0x7320 <mod_pump+0x244>
    731e:	19 c4       	rjmp	.+2098   	; 0x7b52 <mod_pump+0xa76>
    7320:	8b 81       	ldd	r24, Y+3	; 0x03
    7322:	81 11       	cpse	r24, r1
    7324:	16 c4       	rjmp	.+2092   	; 0x7b52 <mod_pump+0xa76>
    7326:	88 81       	ld	r24, Y
    7328:	81 11       	cpse	r24, r1
    732a:	13 c4       	rjmp	.+2086   	; 0x7b52 <mod_pump+0xa76>
    732c:	81 e0       	ldi	r24, 0x01	; 1
    732e:	8b 83       	std	Y+3, r24	; 0x03
    7330:	ce 01       	movw	r24, r28
    7332:	0e 94 16 53 	call	0xa62c	; 0xa62c <calibration>
    7336:	10 92 dd 09 	sts	0x09DD, r1	; 0x8009dd <Comp_1+0x71>
    733a:	10 92 dc 09 	sts	0x09DC, r1	; 0x8009dc <Comp_1+0x70>
    733e:	ce 01       	movw	r24, r28
    7340:	c1 de       	rcall	.-638    	; 0x70c4 <goToMode>
    7342:	8a e7       	ldi	r24, 0x7A	; 122
    7344:	95 e0       	ldi	r25, 0x05	; 5
    7346:	9f 93       	push	r25
    7348:	8f 93       	push	r24
    734a:	8a ea       	ldi	r24, 0xAA	; 170
    734c:	97 e0       	ldi	r25, 0x07	; 7
    734e:	9f 93       	push	r25
    7350:	8f 93       	push	r24
    7352:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7356:	0f 90       	pop	r0
    7358:	0f 90       	pop	r0
    735a:	0f 90       	pop	r0
    735c:	0f 90       	pop	r0
    735e:	f9 c3       	rjmp	.+2034   	; 0x7b52 <mod_pump+0xa76>
		}break;
		
		case HEAT_DHW:
		
		{
			if(comp->Index==1)
    7360:	fe 01       	movw	r30, r28
    7362:	ee 58       	subi	r30, 0x8E	; 142
    7364:	ff 4f       	sbci	r31, 0xFF	; 255
    7366:	80 81       	ld	r24, Z
    7368:	91 81       	ldd	r25, Z+1	; 0x01
    736a:	81 30       	cpi	r24, 0x01	; 1
    736c:	91 05       	cpc	r25, r1
    736e:	09 f0       	breq	.+2      	; 0x7372 <mod_pump+0x296>
    7370:	ed c0       	rjmp	.+474    	; 0x754c <mod_pump+0x470>
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
    7372:	8a 88       	ldd	r8, Y+18	; 0x12
    7374:	9b 88       	ldd	r9, Y+19	; 0x13
    7376:	ac 88       	ldd	r10, Y+20	; 0x14
    7378:	bd 88       	ldd	r11, Y+21	; 0x15
    737a:	f1 01       	movw	r30, r2
    737c:	e3 8c       	ldd	r14, Z+27	; 0x1b
    737e:	f1 2c       	mov	r15, r1
    7380:	86 8d       	ldd	r24, Z+30	; 0x1e
    7382:	b7 01       	movw	r22, r14
    7384:	68 1b       	sub	r22, r24
    7386:	71 09       	sbc	r23, r1
    7388:	07 2e       	mov	r0, r23
    738a:	00 0c       	add	r0, r0
    738c:	88 0b       	sbc	r24, r24
    738e:	99 0b       	sbc	r25, r25
    7390:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    7394:	9b 01       	movw	r18, r22
    7396:	ac 01       	movw	r20, r24
    7398:	c5 01       	movw	r24, r10
    739a:	b4 01       	movw	r22, r8
    739c:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    73a0:	88 23       	and	r24, r24
    73a2:	1c f5       	brge	.+70     	; 0x73ea <mod_pump+0x30e>
    73a4:	8c 81       	ldd	r24, Y+4	; 0x04
    73a6:	81 11       	cpse	r24, r1
    73a8:	3c c3       	rjmp	.+1656   	; 0x7a22 <mod_pump+0x946>
    73aa:	8a 81       	ldd	r24, Y+2	; 0x02
    73ac:	81 11       	cpse	r24, r1
    73ae:	a2 c2       	rjmp	.+1348   	; 0x78f4 <mod_pump+0x818>
    73b0:	88 81       	ld	r24, Y
    73b2:	81 11       	cpse	r24, r1
    73b4:	98 c3       	rjmp	.+1840   	; 0x7ae6 <mod_pump+0xa0a>
    73b6:	81 e0       	ldi	r24, 0x01	; 1
    73b8:	8c 83       	std	Y+4, r24	; 0x04
    73ba:	ce 01       	movw	r24, r28
    73bc:	0e 94 16 53 	call	0xa62c	; 0xa62c <calibration>
    73c0:	10 92 dd 09 	sts	0x09DD, r1	; 0x8009dd <Comp_1+0x71>
    73c4:	10 92 dc 09 	sts	0x09DC, r1	; 0x8009dc <Comp_1+0x70>
    73c8:	ce 01       	movw	r24, r28
    73ca:	7c de       	rcall	.-776    	; 0x70c4 <goToMode>
    73cc:	87 e8       	ldi	r24, 0x87	; 135
    73ce:	95 e0       	ldi	r25, 0x05	; 5
    73d0:	9f 93       	push	r25
    73d2:	8f 93       	push	r24
    73d4:	8a ea       	ldi	r24, 0xAA	; 170
    73d6:	97 e0       	ldi	r25, 0x07	; 7
    73d8:	9f 93       	push	r25
    73da:	8f 93       	push	r24
    73dc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    73e0:	0f 90       	pop	r0
    73e2:	0f 90       	pop	r0
    73e4:	0f 90       	pop	r0
    73e6:	0f 90       	pop	r0
    73e8:	76 c0       	rjmp	.+236    	; 0x74d6 <mod_pump+0x3fa>
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    73ea:	4e 88       	ldd	r4, Y+22	; 0x16
    73ec:	5f 88       	ldd	r5, Y+23	; 0x17
    73ee:	68 8c       	ldd	r6, Y+24	; 0x18
    73f0:	79 8c       	ldd	r7, Y+25	; 0x19
    73f2:	f1 01       	movw	r30, r2
    73f4:	c1 8c       	ldd	r12, Z+25	; 0x19
    73f6:	d1 2c       	mov	r13, r1
    73f8:	84 8d       	ldd	r24, Z+28	; 0x1c
    73fa:	b6 01       	movw	r22, r12
    73fc:	68 1b       	sub	r22, r24
    73fe:	71 09       	sbc	r23, r1
    7400:	07 2e       	mov	r0, r23
    7402:	00 0c       	add	r0, r0
    7404:	88 0b       	sbc	r24, r24
    7406:	99 0b       	sbc	r25, r25
    7408:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    740c:	9b 01       	movw	r18, r22
    740e:	ac 01       	movw	r20, r24
    7410:	c3 01       	movw	r24, r6
    7412:	b2 01       	movw	r22, r4
    7414:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    7418:	88 23       	and	r24, r24
    741a:	1c f5       	brge	.+70     	; 0x7462 <mod_pump+0x386>
    741c:	8c 81       	ldd	r24, Y+4	; 0x04
    741e:	81 11       	cpse	r24, r1
    7420:	84 c2       	rjmp	.+1288   	; 0x792a <mod_pump+0x84e>
    7422:	8a 81       	ldd	r24, Y+2	; 0x02
    7424:	81 11       	cpse	r24, r1
    7426:	1d c0       	rjmp	.+58     	; 0x7462 <mod_pump+0x386>
    7428:	88 81       	ld	r24, Y
    742a:	81 11       	cpse	r24, r1
    742c:	1a c0       	rjmp	.+52     	; 0x7462 <mod_pump+0x386>
    742e:	ce 01       	movw	r24, r28
    7430:	0e 94 16 53 	call	0xa62c	; 0xa62c <calibration>
    7434:	10 92 dd 09 	sts	0x09DD, r1	; 0x8009dd <Comp_1+0x71>
    7438:	10 92 dc 09 	sts	0x09DC, r1	; 0x8009dc <Comp_1+0x70>
    743c:	81 e0       	ldi	r24, 0x01	; 1
    743e:	8a 83       	std	Y+2, r24	; 0x02
    7440:	ce 01       	movw	r24, r28
    7442:	40 de       	rcall	.-896    	; 0x70c4 <goToMode>
    7444:	85 e9       	ldi	r24, 0x95	; 149
    7446:	95 e0       	ldi	r25, 0x05	; 5
    7448:	9f 93       	push	r25
    744a:	8f 93       	push	r24
    744c:	8a ea       	ldi	r24, 0xAA	; 170
    744e:	97 e0       	ldi	r25, 0x07	; 7
    7450:	9f 93       	push	r25
    7452:	8f 93       	push	r24
    7454:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7458:	0f 90       	pop	r0
    745a:	0f 90       	pop	r0
    745c:	0f 90       	pop	r0
    745e:	0f 90       	pop	r0
    7460:	3a c0       	rjmp	.+116    	; 0x74d6 <mod_pump+0x3fa>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7462:	b7 01       	movw	r22, r14
    7464:	ff 0c       	add	r15, r15
    7466:	88 0b       	sbc	r24, r24
    7468:	99 0b       	sbc	r25, r25
    746a:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    746e:	9b 01       	movw	r18, r22
    7470:	ac 01       	movw	r20, r24
    7472:	c5 01       	movw	r24, r10
    7474:	b4 01       	movw	r22, r8
    7476:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    747a:	18 16       	cp	r1, r24
    747c:	8c f4       	brge	.+34     	; 0x74a0 <mod_pump+0x3c4>
    747e:	8c 81       	ldd	r24, Y+4	; 0x04
    7480:	88 23       	and	r24, r24
    7482:	09 f4       	brne	.+2      	; 0x7486 <mod_pump+0x3aa>
    7484:	62 c2       	rjmp	.+1220   	; 0x794a <mod_pump+0x86e>
    7486:	8a 81       	ldd	r24, Y+2	; 0x02
    7488:	81 11       	cpse	r24, r1
    748a:	25 c0       	rjmp	.+74     	; 0x74d6 <mod_pump+0x3fa>
    748c:	88 81       	ld	r24, Y
    748e:	81 11       	cpse	r24, r1
    7490:	22 c0       	rjmp	.+68     	; 0x74d6 <mod_pump+0x3fa>
    7492:	1c 82       	std	Y+4, r1	; 0x04
    7494:	ce 01       	movw	r24, r28
    7496:	18 dd       	rcall	.-1488   	; 0x6ec8 <Comp_Stop>
    7498:	ce 01       	movw	r24, r28
    749a:	0e 94 c5 50 	call	0xa18a	; 0xa18a <stopTrvTimer>
    749e:	1b c0       	rjmp	.+54     	; 0x74d6 <mod_pump+0x3fa>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    74a0:	b6 01       	movw	r22, r12
    74a2:	dd 0c       	add	r13, r13
    74a4:	88 0b       	sbc	r24, r24
    74a6:	99 0b       	sbc	r25, r25
    74a8:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    74ac:	a3 01       	movw	r20, r6
    74ae:	92 01       	movw	r18, r4
    74b0:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    74b4:	88 23       	and	r24, r24
    74b6:	7c f4       	brge	.+30     	; 0x74d6 <mod_pump+0x3fa>
    74b8:	8c 81       	ldd	r24, Y+4	; 0x04
    74ba:	81 11       	cpse	r24, r1
    74bc:	0c c0       	rjmp	.+24     	; 0x74d6 <mod_pump+0x3fa>
    74be:	8a 81       	ldd	r24, Y+2	; 0x02
    74c0:	88 23       	and	r24, r24
    74c2:	49 f0       	breq	.+18     	; 0x74d6 <mod_pump+0x3fa>
    74c4:	88 81       	ld	r24, Y
    74c6:	81 11       	cpse	r24, r1
    74c8:	06 c0       	rjmp	.+12     	; 0x74d6 <mod_pump+0x3fa>
    74ca:	1a 82       	std	Y+2, r1	; 0x02
    74cc:	ce 01       	movw	r24, r28
    74ce:	fc dc       	rcall	.-1544   	; 0x6ec8 <Comp_Stop>
    74d0:	ce 01       	movw	r24, r28
    74d2:	0e 94 c5 50 	call	0xa18a	; 0xa18a <stopTrvTimer>
				if(EEpromData.NombComp==2) if(comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW)&& !comp->heatingWater && comp->Heating && !comp->switchToMode){comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_again\r\n");}	
    74d6:	80 91 2c 09 	lds	r24, 0x092C	; 0x80092c <EEpromData+0x20>
    74da:	82 30       	cpi	r24, 0x02	; 2
    74dc:	09 f0       	breq	.+2      	; 0x74e0 <mod_pump+0x404>
    74de:	39 c3       	rjmp	.+1650   	; 0x7b52 <mod_pump+0xa76>
    74e0:	f1 01       	movw	r30, r2
    74e2:	63 8d       	ldd	r22, Z+27	; 0x1b
    74e4:	70 e0       	ldi	r23, 0x00	; 0
    74e6:	86 8d       	ldd	r24, Z+30	; 0x1e
    74e8:	68 1b       	sub	r22, r24
    74ea:	71 09       	sbc	r23, r1
    74ec:	07 2e       	mov	r0, r23
    74ee:	00 0c       	add	r0, r0
    74f0:	88 0b       	sbc	r24, r24
    74f2:	99 0b       	sbc	r25, r25
    74f4:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    74f8:	9b 01       	movw	r18, r22
    74fa:	ac 01       	movw	r20, r24
    74fc:	6a 89       	ldd	r22, Y+18	; 0x12
    74fe:	7b 89       	ldd	r23, Y+19	; 0x13
    7500:	8c 89       	ldd	r24, Y+20	; 0x14
    7502:	9d 89       	ldd	r25, Y+21	; 0x15
    7504:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    7508:	88 23       	and	r24, r24
    750a:	0c f0       	brlt	.+2      	; 0x750e <mod_pump+0x432>
    750c:	22 c3       	rjmp	.+1604   	; 0x7b52 <mod_pump+0xa76>
    750e:	8c 81       	ldd	r24, Y+4	; 0x04
    7510:	81 11       	cpse	r24, r1
    7512:	1f c3       	rjmp	.+1598   	; 0x7b52 <mod_pump+0xa76>
    7514:	8a 81       	ldd	r24, Y+2	; 0x02
    7516:	88 23       	and	r24, r24
    7518:	09 f4       	brne	.+2      	; 0x751c <mod_pump+0x440>
    751a:	1b c3       	rjmp	.+1590   	; 0x7b52 <mod_pump+0xa76>
    751c:	88 81       	ld	r24, Y
    751e:	81 11       	cpse	r24, r1
    7520:	18 c3       	rjmp	.+1584   	; 0x7b52 <mod_pump+0xa76>
    7522:	1a 82       	std	Y+2, r1	; 0x02
    7524:	ce 01       	movw	r24, r28
    7526:	d0 dc       	rcall	.-1632   	; 0x6ec8 <Comp_Stop>
    7528:	ce 01       	movw	r24, r28
    752a:	0e 94 c5 50 	call	0xa18a	; 0xa18a <stopTrvTimer>
    752e:	84 ea       	ldi	r24, 0xA4	; 164
    7530:	95 e0       	ldi	r25, 0x05	; 5
    7532:	9f 93       	push	r25
    7534:	8f 93       	push	r24
    7536:	8a ea       	ldi	r24, 0xAA	; 170
    7538:	97 e0       	ldi	r25, 0x07	; 7
    753a:	9f 93       	push	r25
    753c:	8f 93       	push	r24
    753e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7542:	0f 90       	pop	r0
    7544:	0f 90       	pop	r0
    7546:	0f 90       	pop	r0
    7548:	0f 90       	pop	r0
    754a:	03 c3       	rjmp	.+1542   	; 0x7b52 <mod_pump+0xa76>
			}
			else if(comp->Index==2)
    754c:	02 97       	sbiw	r24, 0x02	; 2
    754e:	09 f0       	breq	.+2      	; 0x7552 <mod_pump+0x476>
    7550:	00 c3       	rjmp	.+1536   	; 0x7b52 <mod_pump+0xa76>
			{
				if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {calibration(comp);comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_2\r\n");}
    7552:	8e 88       	ldd	r8, Y+22	; 0x16
    7554:	9f 88       	ldd	r9, Y+23	; 0x17
    7556:	a8 8c       	ldd	r10, Y+24	; 0x18
    7558:	b9 8c       	ldd	r11, Y+25	; 0x19
    755a:	f1 01       	movw	r30, r2
    755c:	e1 8c       	ldd	r14, Z+25	; 0x19
    755e:	f1 2c       	mov	r15, r1
    7560:	84 8d       	ldd	r24, Z+28	; 0x1c
    7562:	b7 01       	movw	r22, r14
    7564:	68 1b       	sub	r22, r24
    7566:	71 09       	sbc	r23, r1
    7568:	07 2e       	mov	r0, r23
    756a:	00 0c       	add	r0, r0
    756c:	88 0b       	sbc	r24, r24
    756e:	99 0b       	sbc	r25, r25
    7570:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    7574:	9b 01       	movw	r18, r22
    7576:	ac 01       	movw	r20, r24
    7578:	c5 01       	movw	r24, r10
    757a:	b4 01       	movw	r22, r8
    757c:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    7580:	88 23       	and	r24, r24
    7582:	dc f4       	brge	.+54     	; 0x75ba <mod_pump+0x4de>
    7584:	8a 81       	ldd	r24, Y+2	; 0x02
    7586:	81 11       	cpse	r24, r1
    7588:	ee c1       	rjmp	.+988    	; 0x7966 <mod_pump+0x88a>
    758a:	88 81       	ld	r24, Y
    758c:	81 11       	cpse	r24, r1
    758e:	e1 c2       	rjmp	.+1474   	; 0x7b52 <mod_pump+0xa76>
    7590:	ce 01       	movw	r24, r28
    7592:	0e 94 16 53 	call	0xa62c	; 0xa62c <calibration>
    7596:	81 e0       	ldi	r24, 0x01	; 1
    7598:	8a 83       	std	Y+2, r24	; 0x02
    759a:	ce 01       	movw	r24, r28
    759c:	93 dd       	rcall	.-1242   	; 0x70c4 <goToMode>
    759e:	86 eb       	ldi	r24, 0xB6	; 182
    75a0:	95 e0       	ldi	r25, 0x05	; 5
    75a2:	9f 93       	push	r25
    75a4:	8f 93       	push	r24
    75a6:	8a ea       	ldi	r24, 0xAA	; 170
    75a8:	97 e0       	ldi	r25, 0x07	; 7
    75aa:	9f 93       	push	r25
    75ac:	8f 93       	push	r24
    75ae:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    75b2:	0f 90       	pop	r0
    75b4:	0f 90       	pop	r0
    75b6:	0f 90       	pop	r0
    75b8:	0f 90       	pop	r0
				if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    75ba:	f1 01       	movw	r30, r2
    75bc:	61 8d       	ldd	r22, Z+25	; 0x19
    75be:	70 e0       	ldi	r23, 0x00	; 0
    75c0:	80 e0       	ldi	r24, 0x00	; 0
    75c2:	90 e0       	ldi	r25, 0x00	; 0
    75c4:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    75c8:	9b 01       	movw	r18, r22
    75ca:	ac 01       	movw	r20, r24
    75cc:	6e 89       	ldd	r22, Y+22	; 0x16
    75ce:	7f 89       	ldd	r23, Y+23	; 0x17
    75d0:	88 8d       	ldd	r24, Y+24	; 0x18
    75d2:	99 8d       	ldd	r25, Y+25	; 0x19
    75d4:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    75d8:	18 16       	cp	r1, r24
    75da:	0c f0       	brlt	.+2      	; 0x75de <mod_pump+0x502>
    75dc:	ba c2       	rjmp	.+1396   	; 0x7b52 <mod_pump+0xa76>
    75de:	8a 81       	ldd	r24, Y+2	; 0x02
    75e0:	88 23       	and	r24, r24
    75e2:	09 f4       	brne	.+2      	; 0x75e6 <mod_pump+0x50a>
    75e4:	b6 c2       	rjmp	.+1388   	; 0x7b52 <mod_pump+0xa76>
    75e6:	88 81       	ld	r24, Y
    75e8:	81 11       	cpse	r24, r1
    75ea:	b3 c2       	rjmp	.+1382   	; 0x7b52 <mod_pump+0xa76>
    75ec:	1a 82       	std	Y+2, r1	; 0x02
    75ee:	ce 01       	movw	r24, r28
    75f0:	6b dc       	rcall	.-1834   	; 0x6ec8 <Comp_Stop>
    75f2:	ce 01       	movw	r24, r28
    75f4:	0e 94 c5 50 	call	0xa18a	; 0xa18a <stopTrvTimer>
    75f8:	ac c2       	rjmp	.+1368   	; 0x7b52 <mod_pump+0xa76>
			
		}break;
		
		case COOL_DHW:
		{
			if(comp->Index==1)
    75fa:	fe 01       	movw	r30, r28
    75fc:	ee 58       	subi	r30, 0x8E	; 142
    75fe:	ff 4f       	sbci	r31, 0xFF	; 255
    7600:	80 81       	ld	r24, Z
    7602:	91 81       	ldd	r25, Z+1	; 0x01
    7604:	81 30       	cpi	r24, 0x01	; 1
    7606:	91 05       	cpc	r25, r1
    7608:	09 f0       	breq	.+2      	; 0x760c <mod_pump+0x530>
    760a:	e1 c0       	rjmp	.+450    	; 0x77ce <mod_pump+0x6f2>
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
    760c:	8a 88       	ldd	r8, Y+18	; 0x12
    760e:	9b 88       	ldd	r9, Y+19	; 0x13
    7610:	ac 88       	ldd	r10, Y+20	; 0x14
    7612:	bd 88       	ldd	r11, Y+21	; 0x15
    7614:	f1 01       	movw	r30, r2
    7616:	e3 8c       	ldd	r14, Z+27	; 0x1b
    7618:	f1 2c       	mov	r15, r1
    761a:	86 8d       	ldd	r24, Z+30	; 0x1e
    761c:	b7 01       	movw	r22, r14
    761e:	68 1b       	sub	r22, r24
    7620:	71 09       	sbc	r23, r1
    7622:	07 2e       	mov	r0, r23
    7624:	00 0c       	add	r0, r0
    7626:	88 0b       	sbc	r24, r24
    7628:	99 0b       	sbc	r25, r25
    762a:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    762e:	9b 01       	movw	r18, r22
    7630:	ac 01       	movw	r20, r24
    7632:	c5 01       	movw	r24, r10
    7634:	b4 01       	movw	r22, r8
    7636:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    763a:	88 23       	and	r24, r24
    763c:	2c f5       	brge	.+74     	; 0x7688 <mod_pump+0x5ac>
    763e:	8c 81       	ldd	r24, Y+4	; 0x04
    7640:	81 11       	cpse	r24, r1
    7642:	21 c2       	rjmp	.+1090   	; 0x7a86 <mod_pump+0x9aa>
    7644:	8b 81       	ldd	r24, Y+3	; 0x03
    7646:	81 11       	cpse	r24, r1
    7648:	9e c1       	rjmp	.+828    	; 0x7986 <mod_pump+0x8aa>
    764a:	88 81       	ld	r24, Y
    764c:	81 11       	cpse	r24, r1
    764e:	66 c2       	rjmp	.+1228   	; 0x7b1c <mod_pump+0xa40>
    7650:	ff 24       	eor	r15, r15
    7652:	f3 94       	inc	r15
    7654:	fc 82       	std	Y+4, r15	; 0x04
    7656:	ce 01       	movw	r24, r28
    7658:	0e 94 16 53 	call	0xa62c	; 0xa62c <calibration>
    765c:	10 92 dd 09 	sts	0x09DD, r1	; 0x8009dd <Comp_1+0x71>
    7660:	10 92 dc 09 	sts	0x09DC, r1	; 0x8009dc <Comp_1+0x70>
    7664:	fc 82       	std	Y+4, r15	; 0x04
    7666:	ce 01       	movw	r24, r28
    7668:	2d dd       	rcall	.-1446   	; 0x70c4 <goToMode>
    766a:	85 ec       	ldi	r24, 0xC5	; 197
    766c:	95 e0       	ldi	r25, 0x05	; 5
    766e:	9f 93       	push	r25
    7670:	8f 93       	push	r24
    7672:	8a ea       	ldi	r24, 0xAA	; 170
    7674:	97 e0       	ldi	r25, 0x07	; 7
    7676:	9f 93       	push	r25
    7678:	8f 93       	push	r24
    767a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    767e:	0f 90       	pop	r0
    7680:	0f 90       	pop	r0
    7682:	0f 90       	pop	r0
    7684:	0f 90       	pop	r0
    7686:	76 c0       	rjmp	.+236    	; 0x7774 <mod_pump+0x698>
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7688:	4e 88       	ldd	r4, Y+22	; 0x16
    768a:	5f 88       	ldd	r5, Y+23	; 0x17
    768c:	68 8c       	ldd	r6, Y+24	; 0x18
    768e:	79 8c       	ldd	r7, Y+25	; 0x19
    7690:	f1 01       	movw	r30, r2
    7692:	c1 8c       	ldd	r12, Z+25	; 0x19
    7694:	d1 2c       	mov	r13, r1
    7696:	84 8d       	ldd	r24, Z+28	; 0x1c
    7698:	b6 01       	movw	r22, r12
    769a:	68 1b       	sub	r22, r24
    769c:	71 09       	sbc	r23, r1
    769e:	07 2e       	mov	r0, r23
    76a0:	00 0c       	add	r0, r0
    76a2:	88 0b       	sbc	r24, r24
    76a4:	99 0b       	sbc	r25, r25
    76a6:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    76aa:	9b 01       	movw	r18, r22
    76ac:	ac 01       	movw	r20, r24
    76ae:	c3 01       	movw	r24, r6
    76b0:	b2 01       	movw	r22, r4
    76b2:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    76b6:	88 23       	and	r24, r24
    76b8:	1c f5       	brge	.+70     	; 0x7700 <mod_pump+0x624>
    76ba:	8c 81       	ldd	r24, Y+4	; 0x04
    76bc:	81 11       	cpse	r24, r1
    76be:	7e c1       	rjmp	.+764    	; 0x79bc <mod_pump+0x8e0>
    76c0:	8b 81       	ldd	r24, Y+3	; 0x03
    76c2:	81 11       	cpse	r24, r1
    76c4:	1d c0       	rjmp	.+58     	; 0x7700 <mod_pump+0x624>
    76c6:	88 81       	ld	r24, Y
    76c8:	81 11       	cpse	r24, r1
    76ca:	1a c0       	rjmp	.+52     	; 0x7700 <mod_pump+0x624>
    76cc:	ce 01       	movw	r24, r28
    76ce:	0e 94 16 53 	call	0xa62c	; 0xa62c <calibration>
    76d2:	10 92 dd 09 	sts	0x09DD, r1	; 0x8009dd <Comp_1+0x71>
    76d6:	10 92 dc 09 	sts	0x09DC, r1	; 0x8009dc <Comp_1+0x70>
    76da:	81 e0       	ldi	r24, 0x01	; 1
    76dc:	8b 83       	std	Y+3, r24	; 0x03
    76de:	ce 01       	movw	r24, r28
    76e0:	f1 dc       	rcall	.-1566   	; 0x70c4 <goToMode>
    76e2:	87 ed       	ldi	r24, 0xD7	; 215
    76e4:	95 e0       	ldi	r25, 0x05	; 5
    76e6:	9f 93       	push	r25
    76e8:	8f 93       	push	r24
    76ea:	8a ea       	ldi	r24, 0xAA	; 170
    76ec:	97 e0       	ldi	r25, 0x07	; 7
    76ee:	9f 93       	push	r25
    76f0:	8f 93       	push	r24
    76f2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    76f6:	0f 90       	pop	r0
    76f8:	0f 90       	pop	r0
    76fa:	0f 90       	pop	r0
    76fc:	0f 90       	pop	r0
    76fe:	3a c0       	rjmp	.+116    	; 0x7774 <mod_pump+0x698>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7700:	b7 01       	movw	r22, r14
    7702:	ff 0c       	add	r15, r15
    7704:	88 0b       	sbc	r24, r24
    7706:	99 0b       	sbc	r25, r25
    7708:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    770c:	9b 01       	movw	r18, r22
    770e:	ac 01       	movw	r20, r24
    7710:	c5 01       	movw	r24, r10
    7712:	b4 01       	movw	r22, r8
    7714:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    7718:	18 16       	cp	r1, r24
    771a:	8c f4       	brge	.+34     	; 0x773e <mod_pump+0x662>
    771c:	8c 81       	ldd	r24, Y+4	; 0x04
    771e:	88 23       	and	r24, r24
    7720:	09 f4       	brne	.+2      	; 0x7724 <mod_pump+0x648>
    7722:	5c c1       	rjmp	.+696    	; 0x79dc <mod_pump+0x900>
    7724:	8b 81       	ldd	r24, Y+3	; 0x03
    7726:	81 11       	cpse	r24, r1
    7728:	25 c0       	rjmp	.+74     	; 0x7774 <mod_pump+0x698>
    772a:	88 81       	ld	r24, Y
    772c:	81 11       	cpse	r24, r1
    772e:	22 c0       	rjmp	.+68     	; 0x7774 <mod_pump+0x698>
    7730:	1c 82       	std	Y+4, r1	; 0x04
    7732:	ce 01       	movw	r24, r28
    7734:	c9 db       	rcall	.-2158   	; 0x6ec8 <Comp_Stop>
    7736:	ce 01       	movw	r24, r28
    7738:	0e 94 c5 50 	call	0xa18a	; 0xa18a <stopTrvTimer>
    773c:	1b c0       	rjmp	.+54     	; 0x7774 <mod_pump+0x698>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    773e:	b6 01       	movw	r22, r12
    7740:	dd 0c       	add	r13, r13
    7742:	88 0b       	sbc	r24, r24
    7744:	99 0b       	sbc	r25, r25
    7746:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    774a:	a3 01       	movw	r20, r6
    774c:	92 01       	movw	r18, r4
    774e:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    7752:	88 23       	and	r24, r24
    7754:	7c f4       	brge	.+30     	; 0x7774 <mod_pump+0x698>
    7756:	8c 81       	ldd	r24, Y+4	; 0x04
    7758:	81 11       	cpse	r24, r1
    775a:	0c c0       	rjmp	.+24     	; 0x7774 <mod_pump+0x698>
    775c:	8b 81       	ldd	r24, Y+3	; 0x03
    775e:	88 23       	and	r24, r24
    7760:	49 f0       	breq	.+18     	; 0x7774 <mod_pump+0x698>
    7762:	88 81       	ld	r24, Y
    7764:	81 11       	cpse	r24, r1
    7766:	06 c0       	rjmp	.+12     	; 0x7774 <mod_pump+0x698>
    7768:	1b 82       	std	Y+3, r1	; 0x03
    776a:	ce 01       	movw	r24, r28
    776c:	ad db       	rcall	.-2214   	; 0x6ec8 <Comp_Stop>
    776e:	ce 01       	movw	r24, r28
    7770:	0e 94 c5 50 	call	0xa18a	; 0xa18a <stopTrvTimer>
				if(EEpromData.NombComp==2) if (comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && comp->Cooling && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}	
    7774:	80 91 2c 09 	lds	r24, 0x092C	; 0x80092c <EEpromData+0x20>
    7778:	82 30       	cpi	r24, 0x02	; 2
    777a:	09 f0       	breq	.+2      	; 0x777e <mod_pump+0x6a2>
    777c:	ea c1       	rjmp	.+980    	; 0x7b52 <mod_pump+0xa76>
    777e:	f1 01       	movw	r30, r2
    7780:	63 8d       	ldd	r22, Z+27	; 0x1b
    7782:	70 e0       	ldi	r23, 0x00	; 0
    7784:	86 8d       	ldd	r24, Z+30	; 0x1e
    7786:	68 1b       	sub	r22, r24
    7788:	71 09       	sbc	r23, r1
    778a:	07 2e       	mov	r0, r23
    778c:	00 0c       	add	r0, r0
    778e:	88 0b       	sbc	r24, r24
    7790:	99 0b       	sbc	r25, r25
    7792:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    7796:	9b 01       	movw	r18, r22
    7798:	ac 01       	movw	r20, r24
    779a:	6a 89       	ldd	r22, Y+18	; 0x12
    779c:	7b 89       	ldd	r23, Y+19	; 0x13
    779e:	8c 89       	ldd	r24, Y+20	; 0x14
    77a0:	9d 89       	ldd	r25, Y+21	; 0x15
    77a2:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    77a6:	88 23       	and	r24, r24
    77a8:	0c f0       	brlt	.+2      	; 0x77ac <mod_pump+0x6d0>
    77aa:	d3 c1       	rjmp	.+934    	; 0x7b52 <mod_pump+0xa76>
    77ac:	8c 81       	ldd	r24, Y+4	; 0x04
    77ae:	81 11       	cpse	r24, r1
    77b0:	d0 c1       	rjmp	.+928    	; 0x7b52 <mod_pump+0xa76>
    77b2:	8b 81       	ldd	r24, Y+3	; 0x03
    77b4:	88 23       	and	r24, r24
    77b6:	09 f4       	brne	.+2      	; 0x77ba <mod_pump+0x6de>
    77b8:	cc c1       	rjmp	.+920    	; 0x7b52 <mod_pump+0xa76>
    77ba:	88 81       	ld	r24, Y
    77bc:	81 11       	cpse	r24, r1
    77be:	c9 c1       	rjmp	.+914    	; 0x7b52 <mod_pump+0xa76>
    77c0:	1b 82       	std	Y+3, r1	; 0x03
    77c2:	ce 01       	movw	r24, r28
    77c4:	81 db       	rcall	.-2302   	; 0x6ec8 <Comp_Stop>
    77c6:	ce 01       	movw	r24, r28
    77c8:	0e 94 c5 50 	call	0xa18a	; 0xa18a <stopTrvTimer>
    77cc:	c2 c1       	rjmp	.+900    	; 0x7b52 <mod_pump+0xa76>
			}
			else if(comp->Index==2)
    77ce:	02 97       	sbiw	r24, 0x02	; 2
    77d0:	09 f0       	breq	.+2      	; 0x77d4 <mod_pump+0x6f8>
    77d2:	bf c1       	rjmp	.+894    	; 0x7b52 <mod_pump+0xa76>
			{
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
    77d4:	8e 88       	ldd	r8, Y+22	; 0x16
    77d6:	9f 88       	ldd	r9, Y+23	; 0x17
    77d8:	a8 8c       	ldd	r10, Y+24	; 0x18
    77da:	b9 8c       	ldd	r11, Y+25	; 0x19
    77dc:	f1 01       	movw	r30, r2
    77de:	e2 8c       	ldd	r14, Z+26	; 0x1a
    77e0:	f1 2c       	mov	r15, r1
    77e2:	b7 01       	movw	r22, r14
    77e4:	0f 2c       	mov	r0, r15
    77e6:	00 0c       	add	r0, r0
    77e8:	88 0b       	sbc	r24, r24
    77ea:	99 0b       	sbc	r25, r25
    77ec:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    77f0:	9b 01       	movw	r18, r22
    77f2:	ac 01       	movw	r20, r24
    77f4:	c5 01       	movw	r24, r10
    77f6:	b4 01       	movw	r22, r8
    77f8:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    77fc:	88 23       	and	r24, r24
    77fe:	6c f4       	brge	.+26     	; 0x781a <mod_pump+0x73e>
    7800:	8b 81       	ldd	r24, Y+3	; 0x03
    7802:	88 23       	and	r24, r24
    7804:	09 f4       	brne	.+2      	; 0x7808 <mod_pump+0x72c>
    7806:	f8 c0       	rjmp	.+496    	; 0x79f8 <mod_pump+0x91c>
    7808:	88 81       	ld	r24, Y
    780a:	81 11       	cpse	r24, r1
    780c:	a2 c1       	rjmp	.+836    	; 0x7b52 <mod_pump+0xa76>
    780e:	1b 82       	std	Y+3, r1	; 0x03
    7810:	ce 01       	movw	r24, r28
    7812:	5a db       	rcall	.-2380   	; 0x6ec8 <Comp_Stop>
    7814:	ce 01       	movw	r24, r28
    7816:	0e 94 c5 50 	call	0xa18a	; 0xa18a <stopTrvTimer>
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
    781a:	f1 01       	movw	r30, r2
    781c:	82 8d       	ldd	r24, Z+26	; 0x1a
    781e:	65 8d       	ldd	r22, Z+29	; 0x1d
    7820:	70 e0       	ldi	r23, 0x00	; 0
    7822:	68 0f       	add	r22, r24
    7824:	71 1d       	adc	r23, r1
    7826:	07 2e       	mov	r0, r23
    7828:	00 0c       	add	r0, r0
    782a:	88 0b       	sbc	r24, r24
    782c:	99 0b       	sbc	r25, r25
    782e:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    7832:	9b 01       	movw	r18, r22
    7834:	ac 01       	movw	r20, r24
    7836:	6e 89       	ldd	r22, Y+22	; 0x16
    7838:	7f 89       	ldd	r23, Y+23	; 0x17
    783a:	88 8d       	ldd	r24, Y+24	; 0x18
    783c:	99 8d       	ldd	r25, Y+25	; 0x19
    783e:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    7842:	18 16       	cp	r1, r24
    7844:	0c f0       	brlt	.+2      	; 0x7848 <mod_pump+0x76c>
    7846:	85 c1       	rjmp	.+778    	; 0x7b52 <mod_pump+0xa76>
    7848:	8b 81       	ldd	r24, Y+3	; 0x03
    784a:	81 11       	cpse	r24, r1
    784c:	82 c1       	rjmp	.+772    	; 0x7b52 <mod_pump+0xa76>
    784e:	88 81       	ld	r24, Y
    7850:	81 11       	cpse	r24, r1
    7852:	7f c1       	rjmp	.+766    	; 0x7b52 <mod_pump+0xa76>
    7854:	ce 01       	movw	r24, r28
    7856:	0e 94 16 53 	call	0xa62c	; 0xa62c <calibration>
    785a:	81 e0       	ldi	r24, 0x01	; 1
    785c:	8b 83       	std	Y+3, r24	; 0x03
    785e:	ce 01       	movw	r24, r28
    7860:	31 dc       	rcall	.-1950   	; 0x70c4 <goToMode>
    7862:	89 ee       	ldi	r24, 0xE9	; 233
    7864:	95 e0       	ldi	r25, 0x05	; 5
    7866:	9f 93       	push	r25
    7868:	8f 93       	push	r24
    786a:	8a ea       	ldi	r24, 0xAA	; 170
    786c:	97 e0       	ldi	r25, 0x07	; 7
    786e:	9f 93       	push	r25
    7870:	8f 93       	push	r24
    7872:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7876:	0f 90       	pop	r0
    7878:	0f 90       	pop	r0
    787a:	0f 90       	pop	r0
    787c:	0f 90       	pop	r0
			}
		}break;
	}
}
    787e:	69 c1       	rjmp	.+722    	; 0x7b52 <mod_pump+0xa76>

	switch(temp){
		case DHW: {
		if(comp->Index==1){
			if ( comp->Dhw_Temp > eeData->Set_DHW && comp->heatingWater && !comp->switchToMode) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp);}
			if ( comp->Dhw_Temp < (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->switchToMode){calibration(comp);Comp_1.error=0; comp->heatingWater=true; goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_Dhw\r\n");}//Start_Dhw();
    7880:	f1 01       	movw	r30, r2
    7882:	86 8d       	ldd	r24, Z+30	; 0x1e
    7884:	b7 01       	movw	r22, r14
    7886:	68 1b       	sub	r22, r24
    7888:	71 09       	sbc	r23, r1
    788a:	07 2e       	mov	r0, r23
    788c:	00 0c       	add	r0, r0
    788e:	88 0b       	sbc	r24, r24
    7890:	99 0b       	sbc	r25, r25
    7892:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    7896:	9b 01       	movw	r18, r22
    7898:	ac 01       	movw	r20, r24
    789a:	c5 01       	movw	r24, r10
    789c:	b4 01       	movw	r22, r8
    789e:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    78a2:	88 23       	and	r24, r24
    78a4:	0c f4       	brge	.+2      	; 0x78a8 <mod_pump+0x7cc>
    78a6:	8d cc       	rjmp	.-1766   	; 0x71c2 <mod_pump+0xe6>
    78a8:	54 c1       	rjmp	.+680    	; 0x7b52 <mod_pump+0xa76>
		case HEAT:{
			//xSerialxPrintf(&xSerial3Port,"Set_Heating =%d\r\n,diffHEAT =%d\r\n,Bac_Temp =%f\r\n",eeData->Set_Heating,eeData->diffHEAT,data->Bac_Temp);
			//xSerialxPrintf(&xSerial3Port,"diffHEAT =%d\r\n",eeData->diffHEAT);
			//xSerialxPrintf(&xSerial3Port,"heat mode\r\n");
			if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {comp->Heating=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat\r\n");}
			if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    78aa:	b7 01       	movw	r22, r14
    78ac:	ff 0c       	add	r15, r15
    78ae:	88 0b       	sbc	r24, r24
    78b0:	99 0b       	sbc	r25, r25
    78b2:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    78b6:	9b 01       	movw	r18, r22
    78b8:	ac 01       	movw	r20, r24
    78ba:	c5 01       	movw	r24, r10
    78bc:	b4 01       	movw	r22, r8
    78be:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    78c2:	18 16       	cp	r1, r24
    78c4:	0c f4       	brge	.+2      	; 0x78c8 <mod_pump+0x7ec>
    78c6:	e8 cc       	rjmp	.-1584   	; 0x7298 <mod_pump+0x1bc>
    78c8:	44 c1       	rjmp	.+648    	; 0x7b52 <mod_pump+0xa76>
		} break;
		
		case COOL:{
			//xSerialxPrintf(&xSerial3Port,"COOL mode\r\n");
			if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
			if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {comp->Cooling=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool\r\n");}//
    78ca:	f1 01       	movw	r30, r2
    78cc:	85 8d       	ldd	r24, Z+29	; 0x1d
    78ce:	b7 01       	movw	r22, r14
    78d0:	68 0f       	add	r22, r24
    78d2:	71 1d       	adc	r23, r1
    78d4:	07 2e       	mov	r0, r23
    78d6:	00 0c       	add	r0, r0
    78d8:	88 0b       	sbc	r24, r24
    78da:	99 0b       	sbc	r25, r25
    78dc:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    78e0:	9b 01       	movw	r18, r22
    78e2:	ac 01       	movw	r20, r24
    78e4:	c5 01       	movw	r24, r10
    78e6:	b4 01       	movw	r22, r8
    78e8:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    78ec:	18 16       	cp	r1, r24
    78ee:	0c f4       	brge	.+2      	; 0x78f2 <mod_pump+0x816>
    78f0:	1a cd       	rjmp	.-1484   	; 0x7326 <mod_pump+0x24a>
    78f2:	2f c1       	rjmp	.+606    	; 0x7b52 <mod_pump+0xa76>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    78f4:	4e 88       	ldd	r4, Y+22	; 0x16
    78f6:	5f 88       	ldd	r5, Y+23	; 0x17
    78f8:	68 8c       	ldd	r6, Y+24	; 0x18
    78fa:	79 8c       	ldd	r7, Y+25	; 0x19
    78fc:	f1 01       	movw	r30, r2
    78fe:	c1 8c       	ldd	r12, Z+25	; 0x19
    7900:	d1 2c       	mov	r13, r1
    7902:	84 8d       	ldd	r24, Z+28	; 0x1c
    7904:	b6 01       	movw	r22, r12
    7906:	68 1b       	sub	r22, r24
    7908:	71 09       	sbc	r23, r1
    790a:	07 2e       	mov	r0, r23
    790c:	00 0c       	add	r0, r0
    790e:	88 0b       	sbc	r24, r24
    7910:	99 0b       	sbc	r25, r25
    7912:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    7916:	9b 01       	movw	r18, r22
    7918:	ac 01       	movw	r20, r24
    791a:	c3 01       	movw	r24, r6
    791c:	b2 01       	movw	r22, r4
    791e:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    7922:	88 23       	and	r24, r24
    7924:	0c f4       	brge	.+2      	; 0x7928 <mod_pump+0x84c>
    7926:	7d cd       	rjmp	.-1286   	; 0x7422 <mod_pump+0x346>
    7928:	97 c0       	rjmp	.+302    	; 0x7a58 <mod_pump+0x97c>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    792a:	b7 01       	movw	r22, r14
    792c:	ff 0c       	add	r15, r15
    792e:	88 0b       	sbc	r24, r24
    7930:	99 0b       	sbc	r25, r25
    7932:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    7936:	9b 01       	movw	r18, r22
    7938:	ac 01       	movw	r20, r24
    793a:	c5 01       	movw	r24, r10
    793c:	b4 01       	movw	r22, r8
    793e:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    7942:	18 16       	cp	r1, r24
    7944:	0c f4       	brge	.+2      	; 0x7948 <mod_pump+0x86c>
    7946:	9f cd       	rjmp	.-1218   	; 0x7486 <mod_pump+0x3aa>
    7948:	97 c0       	rjmp	.+302    	; 0x7a78 <mod_pump+0x99c>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    794a:	b6 01       	movw	r22, r12
    794c:	dd 0c       	add	r13, r13
    794e:	88 0b       	sbc	r24, r24
    7950:	99 0b       	sbc	r25, r25
    7952:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    7956:	a3 01       	movw	r20, r6
    7958:	92 01       	movw	r18, r4
    795a:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    795e:	88 23       	and	r24, r24
    7960:	0c f4       	brge	.+2      	; 0x7964 <mod_pump+0x888>
    7962:	ad cd       	rjmp	.-1190   	; 0x74be <mod_pump+0x3e2>
    7964:	b8 cd       	rjmp	.-1168   	; 0x74d6 <mod_pump+0x3fa>
				if(EEpromData.NombComp==2) if(comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW)&& !comp->heatingWater && comp->Heating && !comp->switchToMode){comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_again\r\n");}	
			}
			else if(comp->Index==2)
			{
				if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {calibration(comp);comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_2\r\n");}
				if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    7966:	b7 01       	movw	r22, r14
    7968:	ff 0c       	add	r15, r15
    796a:	88 0b       	sbc	r24, r24
    796c:	99 0b       	sbc	r25, r25
    796e:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    7972:	9b 01       	movw	r18, r22
    7974:	ac 01       	movw	r20, r24
    7976:	c5 01       	movw	r24, r10
    7978:	b4 01       	movw	r22, r8
    797a:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    797e:	18 16       	cp	r1, r24
    7980:	0c f4       	brge	.+2      	; 0x7984 <mod_pump+0x8a8>
    7982:	31 ce       	rjmp	.-926    	; 0x75e6 <mod_pump+0x50a>
    7984:	e6 c0       	rjmp	.+460    	; 0x7b52 <mod_pump+0xa76>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7986:	4e 88       	ldd	r4, Y+22	; 0x16
    7988:	5f 88       	ldd	r5, Y+23	; 0x17
    798a:	68 8c       	ldd	r6, Y+24	; 0x18
    798c:	79 8c       	ldd	r7, Y+25	; 0x19
    798e:	f1 01       	movw	r30, r2
    7990:	c1 8c       	ldd	r12, Z+25	; 0x19
    7992:	d1 2c       	mov	r13, r1
    7994:	84 8d       	ldd	r24, Z+28	; 0x1c
    7996:	b6 01       	movw	r22, r12
    7998:	68 1b       	sub	r22, r24
    799a:	71 09       	sbc	r23, r1
    799c:	07 2e       	mov	r0, r23
    799e:	00 0c       	add	r0, r0
    79a0:	88 0b       	sbc	r24, r24
    79a2:	99 0b       	sbc	r25, r25
    79a4:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    79a8:	9b 01       	movw	r18, r22
    79aa:	ac 01       	movw	r20, r24
    79ac:	c3 01       	movw	r24, r6
    79ae:	b2 01       	movw	r22, r4
    79b0:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    79b4:	88 23       	and	r24, r24
    79b6:	0c f4       	brge	.+2      	; 0x79ba <mod_pump+0x8de>
    79b8:	83 ce       	rjmp	.-762    	; 0x76c0 <mod_pump+0x5e4>
    79ba:	7e c0       	rjmp	.+252    	; 0x7ab8 <mod_pump+0x9dc>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    79bc:	b7 01       	movw	r22, r14
    79be:	ff 0c       	add	r15, r15
    79c0:	88 0b       	sbc	r24, r24
    79c2:	99 0b       	sbc	r25, r25
    79c4:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    79c8:	9b 01       	movw	r18, r22
    79ca:	ac 01       	movw	r20, r24
    79cc:	c5 01       	movw	r24, r10
    79ce:	b4 01       	movw	r22, r8
    79d0:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    79d4:	18 16       	cp	r1, r24
    79d6:	0c f4       	brge	.+2      	; 0x79da <mod_pump+0x8fe>
    79d8:	a5 ce       	rjmp	.-694    	; 0x7724 <mod_pump+0x648>
    79da:	7e c0       	rjmp	.+252    	; 0x7ad8 <mod_pump+0x9fc>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    79dc:	b6 01       	movw	r22, r12
    79de:	dd 0c       	add	r13, r13
    79e0:	88 0b       	sbc	r24, r24
    79e2:	99 0b       	sbc	r25, r25
    79e4:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    79e8:	a3 01       	movw	r20, r6
    79ea:	92 01       	movw	r18, r4
    79ec:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    79f0:	88 23       	and	r24, r24
    79f2:	0c f4       	brge	.+2      	; 0x79f6 <mod_pump+0x91a>
    79f4:	b3 ce       	rjmp	.-666    	; 0x775c <mod_pump+0x680>
    79f6:	be ce       	rjmp	.-644    	; 0x7774 <mod_pump+0x698>
				if(EEpromData.NombComp==2) if (comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && comp->Cooling && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}	
			}
			else if(comp->Index==2)
			{
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
    79f8:	f1 01       	movw	r30, r2
    79fa:	85 8d       	ldd	r24, Z+29	; 0x1d
    79fc:	b7 01       	movw	r22, r14
    79fe:	68 0f       	add	r22, r24
    7a00:	71 1d       	adc	r23, r1
    7a02:	07 2e       	mov	r0, r23
    7a04:	00 0c       	add	r0, r0
    7a06:	88 0b       	sbc	r24, r24
    7a08:	99 0b       	sbc	r25, r25
    7a0a:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    7a0e:	9b 01       	movw	r18, r22
    7a10:	ac 01       	movw	r20, r24
    7a12:	c5 01       	movw	r24, r10
    7a14:	b4 01       	movw	r22, r8
    7a16:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    7a1a:	18 16       	cp	r1, r24
    7a1c:	0c f4       	brge	.+2      	; 0x7a20 <mod_pump+0x944>
    7a1e:	17 cf       	rjmp	.-466    	; 0x784e <mod_pump+0x772>
    7a20:	98 c0       	rjmp	.+304    	; 0x7b52 <mod_pump+0xa76>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    7a22:	4e 88       	ldd	r4, Y+22	; 0x16
    7a24:	5f 88       	ldd	r5, Y+23	; 0x17
    7a26:	68 8c       	ldd	r6, Y+24	; 0x18
    7a28:	79 8c       	ldd	r7, Y+25	; 0x19
    7a2a:	f1 01       	movw	r30, r2
    7a2c:	c1 8c       	ldd	r12, Z+25	; 0x19
    7a2e:	d1 2c       	mov	r13, r1
    7a30:	84 8d       	ldd	r24, Z+28	; 0x1c
    7a32:	b6 01       	movw	r22, r12
    7a34:	68 1b       	sub	r22, r24
    7a36:	71 09       	sbc	r23, r1
    7a38:	07 2e       	mov	r0, r23
    7a3a:	00 0c       	add	r0, r0
    7a3c:	88 0b       	sbc	r24, r24
    7a3e:	99 0b       	sbc	r25, r25
    7a40:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    7a44:	9b 01       	movw	r18, r22
    7a46:	ac 01       	movw	r20, r24
    7a48:	c3 01       	movw	r24, r6
    7a4a:	b2 01       	movw	r22, r4
    7a4c:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    7a50:	88 23       	and	r24, r24
    7a52:	0c f4       	brge	.+2      	; 0x7a56 <mod_pump+0x97a>
    7a54:	6a cf       	rjmp	.-300    	; 0x792a <mod_pump+0x84e>
    7a56:	05 cd       	rjmp	.-1526   	; 0x7462 <mod_pump+0x386>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7a58:	b7 01       	movw	r22, r14
    7a5a:	ff 0c       	add	r15, r15
    7a5c:	88 0b       	sbc	r24, r24
    7a5e:	99 0b       	sbc	r25, r25
    7a60:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    7a64:	9b 01       	movw	r18, r22
    7a66:	ac 01       	movw	r20, r24
    7a68:	c5 01       	movw	r24, r10
    7a6a:	b4 01       	movw	r22, r8
    7a6c:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    7a70:	18 16       	cp	r1, r24
    7a72:	0c f4       	brge	.+2      	; 0x7a76 <mod_pump+0x99a>
    7a74:	6a cf       	rjmp	.-300    	; 0x794a <mod_pump+0x86e>
    7a76:	14 cd       	rjmp	.-1496   	; 0x74a0 <mod_pump+0x3c4>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7a78:	b6 01       	movw	r22, r12
    7a7a:	dd 0c       	add	r13, r13
    7a7c:	88 0b       	sbc	r24, r24
    7a7e:	99 0b       	sbc	r25, r25
    7a80:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    7a84:	28 cd       	rjmp	.-1456   	; 0x74d6 <mod_pump+0x3fa>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7a86:	4e 88       	ldd	r4, Y+22	; 0x16
    7a88:	5f 88       	ldd	r5, Y+23	; 0x17
    7a8a:	68 8c       	ldd	r6, Y+24	; 0x18
    7a8c:	79 8c       	ldd	r7, Y+25	; 0x19
    7a8e:	f1 01       	movw	r30, r2
    7a90:	c1 8c       	ldd	r12, Z+25	; 0x19
    7a92:	d1 2c       	mov	r13, r1
    7a94:	84 8d       	ldd	r24, Z+28	; 0x1c
    7a96:	b6 01       	movw	r22, r12
    7a98:	68 1b       	sub	r22, r24
    7a9a:	71 09       	sbc	r23, r1
    7a9c:	07 2e       	mov	r0, r23
    7a9e:	00 0c       	add	r0, r0
    7aa0:	88 0b       	sbc	r24, r24
    7aa2:	99 0b       	sbc	r25, r25
    7aa4:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    7aa8:	a3 01       	movw	r20, r6
    7aaa:	92 01       	movw	r18, r4
    7aac:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    7ab0:	18 16       	cp	r1, r24
    7ab2:	0c f4       	brge	.+2      	; 0x7ab6 <mod_pump+0x9da>
    7ab4:	83 cf       	rjmp	.-250    	; 0x79bc <mod_pump+0x8e0>
    7ab6:	24 ce       	rjmp	.-952    	; 0x7700 <mod_pump+0x624>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7ab8:	b7 01       	movw	r22, r14
    7aba:	ff 0c       	add	r15, r15
    7abc:	88 0b       	sbc	r24, r24
    7abe:	99 0b       	sbc	r25, r25
    7ac0:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    7ac4:	9b 01       	movw	r18, r22
    7ac6:	ac 01       	movw	r20, r24
    7ac8:	c5 01       	movw	r24, r10
    7aca:	b4 01       	movw	r22, r8
    7acc:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    7ad0:	18 16       	cp	r1, r24
    7ad2:	0c f4       	brge	.+2      	; 0x7ad6 <mod_pump+0x9fa>
    7ad4:	83 cf       	rjmp	.-250    	; 0x79dc <mod_pump+0x900>
    7ad6:	33 ce       	rjmp	.-922    	; 0x773e <mod_pump+0x662>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7ad8:	b6 01       	movw	r22, r12
    7ada:	dd 0c       	add	r13, r13
    7adc:	88 0b       	sbc	r24, r24
    7ade:	99 0b       	sbc	r25, r25
    7ae0:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    7ae4:	47 ce       	rjmp	.-882    	; 0x7774 <mod_pump+0x698>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    7ae6:	4e 88       	ldd	r4, Y+22	; 0x16
    7ae8:	5f 88       	ldd	r5, Y+23	; 0x17
    7aea:	68 8c       	ldd	r6, Y+24	; 0x18
    7aec:	79 8c       	ldd	r7, Y+25	; 0x19
    7aee:	f1 01       	movw	r30, r2
    7af0:	c1 8c       	ldd	r12, Z+25	; 0x19
    7af2:	d1 2c       	mov	r13, r1
    7af4:	84 8d       	ldd	r24, Z+28	; 0x1c
    7af6:	b6 01       	movw	r22, r12
    7af8:	68 1b       	sub	r22, r24
    7afa:	71 09       	sbc	r23, r1
    7afc:	07 2e       	mov	r0, r23
    7afe:	00 0c       	add	r0, r0
    7b00:	88 0b       	sbc	r24, r24
    7b02:	99 0b       	sbc	r25, r25
    7b04:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    7b08:	9b 01       	movw	r18, r22
    7b0a:	ac 01       	movw	r20, r24
    7b0c:	c3 01       	movw	r24, r6
    7b0e:	b2 01       	movw	r22, r4
    7b10:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    7b14:	88 23       	and	r24, r24
    7b16:	0c f4       	brge	.+2      	; 0x7b1a <mod_pump+0xa3e>
    7b18:	87 cc       	rjmp	.-1778   	; 0x7428 <mod_pump+0x34c>
    7b1a:	9e cf       	rjmp	.-196    	; 0x7a58 <mod_pump+0x97c>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7b1c:	4e 88       	ldd	r4, Y+22	; 0x16
    7b1e:	5f 88       	ldd	r5, Y+23	; 0x17
    7b20:	68 8c       	ldd	r6, Y+24	; 0x18
    7b22:	79 8c       	ldd	r7, Y+25	; 0x19
    7b24:	f1 01       	movw	r30, r2
    7b26:	c1 8c       	ldd	r12, Z+25	; 0x19
    7b28:	d1 2c       	mov	r13, r1
    7b2a:	84 8d       	ldd	r24, Z+28	; 0x1c
    7b2c:	b6 01       	movw	r22, r12
    7b2e:	68 1b       	sub	r22, r24
    7b30:	71 09       	sbc	r23, r1
    7b32:	07 2e       	mov	r0, r23
    7b34:	00 0c       	add	r0, r0
    7b36:	88 0b       	sbc	r24, r24
    7b38:	99 0b       	sbc	r25, r25
    7b3a:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    7b3e:	9b 01       	movw	r18, r22
    7b40:	ac 01       	movw	r20, r24
    7b42:	c3 01       	movw	r24, r6
    7b44:	b2 01       	movw	r22, r4
    7b46:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    7b4a:	88 23       	and	r24, r24
    7b4c:	0c f4       	brge	.+2      	; 0x7b50 <mod_pump+0xa74>
    7b4e:	bb cd       	rjmp	.-1162   	; 0x76c6 <mod_pump+0x5ea>
    7b50:	b3 cf       	rjmp	.-154    	; 0x7ab8 <mod_pump+0x9dc>
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
			}
		}break;
	}
}
    7b52:	df 91       	pop	r29
    7b54:	cf 91       	pop	r28
    7b56:	1f 91       	pop	r17
    7b58:	ff 90       	pop	r15
    7b5a:	ef 90       	pop	r14
    7b5c:	df 90       	pop	r13
    7b5e:	cf 90       	pop	r12
    7b60:	bf 90       	pop	r11
    7b62:	af 90       	pop	r10
    7b64:	9f 90       	pop	r9
    7b66:	8f 90       	pop	r8
    7b68:	7f 90       	pop	r7
    7b6a:	6f 90       	pop	r6
    7b6c:	5f 90       	pop	r5
    7b6e:	4f 90       	pop	r4
    7b70:	3f 90       	pop	r3
    7b72:	2f 90       	pop	r2
    7b74:	08 95       	ret

00007b76 <initPins>:
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void initPins()
{

	DDRG |= (_BV(PG4) | _BV(PG3));
    7b76:	83 b3       	in	r24, 0x13	; 19
    7b78:	88 61       	ori	r24, 0x18	; 24
    7b7a:	83 bb       	out	0x13, r24	; 19
	DDRH |= (_BV(PH7) | _BV(PH6) | _BV(PH5) | _BV(PH4) | _BV(PH3) | _BV(PH1) | _BV(PH2));
    7b7c:	e1 e0       	ldi	r30, 0x01	; 1
    7b7e:	f1 e0       	ldi	r31, 0x01	; 1
    7b80:	80 81       	ld	r24, Z
    7b82:	8e 6f       	ori	r24, 0xFE	; 254
    7b84:	80 83       	st	Z, r24
	DDRL |= (_BV(PL2) | _BV(PL1) | _BV(PL0));
    7b86:	ea e0       	ldi	r30, 0x0A	; 10
    7b88:	f1 e0       	ldi	r31, 0x01	; 1
    7b8a:	80 81       	ld	r24, Z
    7b8c:	87 60       	ori	r24, 0x07	; 7
    7b8e:	80 83       	st	Z, r24
	DDRD &= (_BV(PD2) | _BV(PD3));
    7b90:	8a b1       	in	r24, 0x0a	; 10
    7b92:	8c 70       	andi	r24, 0x0C	; 12
    7b94:	8a b9       	out	0x0a, r24	; 10
	DDRE &= (_BV(PE5));
    7b96:	8d b1       	in	r24, 0x0d	; 13
    7b98:	80 72       	andi	r24, 0x20	; 32
    7b9a:	8d b9       	out	0x0d, r24	; 13
	DDRA = 0xFF;
    7b9c:	8f ef       	ldi	r24, 0xFF	; 255
    7b9e:	81 b9       	out	0x01, r24	; 1
	PORTD|= (_BV(PD2) | _BV(PD3));
    7ba0:	8b b1       	in	r24, 0x0b	; 11
    7ba2:	8c 60       	ori	r24, 0x0C	; 12
    7ba4:	8b b9       	out	0x0b, r24	; 11
	PORTE|= (_BV(PE5));
    7ba6:	75 9a       	sbi	0x0e, 5	; 14
	
    DDRJ|= (_BV(PIN_rs485));
    7ba8:	e4 e0       	ldi	r30, 0x04	; 4
    7baa:	f1 e0       	ldi	r31, 0x01	; 1
    7bac:	80 81       	ld	r24, Z
    7bae:	84 60       	ori	r24, 0x04	; 4
    7bb0:	80 83       	st	Z, r24
    7bb2:	08 95       	ret

00007bb4 <ConvertToTemp>:
	return (ADC_value - Low_Limit_HP) * HP_max/ (Hi_Limit_HP - Low_Limit_HP);
}

float ConvertToLowPress(uint16_t ADC_value){
	return (ADC_value - Low_Limit_LP) * LP_max/ (Hi_Limit_LP - Low_Limit_LP) ;
}
    7bb4:	8f 92       	push	r8
    7bb6:	9f 92       	push	r9
    7bb8:	af 92       	push	r10
    7bba:	bf 92       	push	r11
    7bbc:	cf 92       	push	r12
    7bbe:	df 92       	push	r13
    7bc0:	ef 92       	push	r14
    7bc2:	ff 92       	push	r15
    7bc4:	bc 01       	movw	r22, r24
    7bc6:	80 e0       	ldi	r24, 0x00	; 0
    7bc8:	90 e0       	ldi	r25, 0x00	; 0
    7bca:	0e 94 27 54 	call	0xa84e	; 0xa84e <__floatunsisf>
    7bce:	9b 01       	movw	r18, r22
    7bd0:	ac 01       	movw	r20, r24
    7bd2:	60 e0       	ldi	r22, 0x00	; 0
    7bd4:	70 ec       	ldi	r23, 0xC0	; 192
    7bd6:	8f e7       	ldi	r24, 0x7F	; 127
    7bd8:	94 e4       	ldi	r25, 0x44	; 68
    7bda:	0e 94 8e 53 	call	0xa71c	; 0xa71c <__divsf3>
    7bde:	20 e0       	ldi	r18, 0x00	; 0
    7be0:	30 e0       	ldi	r19, 0x00	; 0
    7be2:	40 e8       	ldi	r20, 0x80	; 128
    7be4:	5f e3       	ldi	r21, 0x3F	; 63
    7be6:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    7bea:	20 e0       	ldi	r18, 0x00	; 0
    7bec:	30 e4       	ldi	r19, 0x40	; 64
    7bee:	4c e1       	ldi	r20, 0x1C	; 28
    7bf0:	56 e4       	ldi	r21, 0x46	; 70
    7bf2:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    7bf6:	0e 94 e2 54 	call	0xa9c4	; 0xa9c4 <log>
    7bfa:	6b 01       	movw	r12, r22
    7bfc:	7c 01       	movw	r14, r24
    7bfe:	29 e5       	ldi	r18, 0x59	; 89
    7c00:	37 e4       	ldi	r19, 0x47	; 71
    7c02:	4c eb       	ldi	r20, 0xBC	; 188
    7c04:	53 e3       	ldi	r21, 0x33	; 51
    7c06:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    7c0a:	a7 01       	movw	r20, r14
    7c0c:	96 01       	movw	r18, r12
    7c0e:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    7c12:	a7 01       	movw	r20, r14
    7c14:	96 01       	movw	r18, r12
    7c16:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    7c1a:	4b 01       	movw	r8, r22
    7c1c:	5c 01       	movw	r10, r24
    7c1e:	2b e0       	ldi	r18, 0x0B	; 11
    7c20:	31 ee       	ldi	r19, 0xE1	; 225
    7c22:	45 e7       	ldi	r20, 0x75	; 117
    7c24:	59 e3       	ldi	r21, 0x39	; 57
    7c26:	c7 01       	movw	r24, r14
    7c28:	b6 01       	movw	r22, r12
    7c2a:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    7c2e:	29 ed       	ldi	r18, 0xD9	; 217
    7c30:	3d ea       	ldi	r19, 0xAD	; 173
    7c32:	49 ea       	ldi	r20, 0xA9	; 169
    7c34:	5a e3       	ldi	r21, 0x3A	; 58
    7c36:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    7c3a:	9b 01       	movw	r18, r22
    7c3c:	ac 01       	movw	r20, r24
    7c3e:	c5 01       	movw	r24, r10
    7c40:	b4 01       	movw	r22, r8
    7c42:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    7c46:	9b 01       	movw	r18, r22
    7c48:	ac 01       	movw	r20, r24
    7c4a:	60 e0       	ldi	r22, 0x00	; 0
    7c4c:	70 e0       	ldi	r23, 0x00	; 0
    7c4e:	80 e8       	ldi	r24, 0x80	; 128
    7c50:	9f e3       	ldi	r25, 0x3F	; 63
    7c52:	0e 94 8e 53 	call	0xa71c	; 0xa71c <__divsf3>
    7c56:	23 e3       	ldi	r18, 0x33	; 51
    7c58:	33 e9       	ldi	r19, 0x93	; 147
    7c5a:	48 e8       	ldi	r20, 0x88	; 136
    7c5c:	53 e4       	ldi	r21, 0x43	; 67
    7c5e:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    7c62:	ff 90       	pop	r15
    7c64:	ef 90       	pop	r14
    7c66:	df 90       	pop	r13
    7c68:	cf 90       	pop	r12
    7c6a:	bf 90       	pop	r11
    7c6c:	af 90       	pop	r10
    7c6e:	9f 90       	pop	r9
    7c70:	8f 90       	pop	r8
    7c72:	08 95       	ret

00007c74 <ReadSuperHeat>:
					}

return;	
}

float  ReadSuperHeat (xCompressor *comp){
    7c74:	4f 92       	push	r4
    7c76:	5f 92       	push	r5
    7c78:	6f 92       	push	r6
    7c7a:	7f 92       	push	r7
    7c7c:	8f 92       	push	r8
    7c7e:	9f 92       	push	r9
    7c80:	af 92       	push	r10
    7c82:	bf 92       	push	r11
    7c84:	cf 92       	push	r12
    7c86:	df 92       	push	r13
    7c88:	ef 92       	push	r14
    7c8a:	ff 92       	push	r15
    7c8c:	cf 93       	push	r28
    7c8e:	df 93       	push	r29
    7c90:	ec 01       	movw	r28, r24
	float Val, Next_val, Span, Saturation_Temp, decimals, work;
	int I;
	work = ((comp->Low_Press - 1.0) / 1.0);
    7c92:	20 e0       	ldi	r18, 0x00	; 0
    7c94:	30 e0       	ldi	r19, 0x00	; 0
    7c96:	40 e8       	ldi	r20, 0x80	; 128
    7c98:	5f e3       	ldi	r21, 0x3F	; 63
    7c9a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    7c9c:	7f 8d       	ldd	r23, Y+31	; 0x1f
    7c9e:	88 a1       	ldd	r24, Y+32	; 0x20
    7ca0:	99 a1       	ldd	r25, Y+33	; 0x21
    7ca2:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    7ca6:	4b 01       	movw	r8, r22
    7ca8:	5c 01       	movw	r10, r24
	I = work;                                //drop decimals to get array index
    7caa:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__fixsfsi>
	decimals = work - I; //restore decimals for interpolation between array points
	Val = pgm_read_float(&R22_Saturation_Temp[I]);           //get array value
    7cae:	fb 01       	movw	r30, r22
    7cb0:	ee 0f       	add	r30, r30
    7cb2:	ff 1f       	adc	r31, r31
    7cb4:	ee 0f       	add	r30, r30
    7cb6:	ff 1f       	adc	r31, r31
    7cb8:	e0 51       	subi	r30, 0x10	; 16
    7cba:	f6 4f       	sbci	r31, 0xF6	; 246
    7cbc:	c5 90       	lpm	r12, Z+
    7cbe:	d5 90       	lpm	r13, Z+
    7cc0:	e5 90       	lpm	r14, Z+
    7cc2:	f4 90       	lpm	r15, Z
	Next_val = pgm_read_float(&R22_Saturation_Temp[I + 1]);  //get Next array value
    7cc4:	fb 01       	movw	r30, r22
    7cc6:	31 96       	adiw	r30, 0x01	; 1
    7cc8:	ee 0f       	add	r30, r30
    7cca:	ff 1f       	adc	r31, r31
    7ccc:	ee 0f       	add	r30, r30
    7cce:	ff 1f       	adc	r31, r31
    7cd0:	e0 51       	subi	r30, 0x10	; 16
    7cd2:	f6 4f       	sbci	r31, 0xF6	; 246
    7cd4:	45 90       	lpm	r4, Z+
    7cd6:	55 90       	lpm	r5, Z+
    7cd8:	65 90       	lpm	r6, Z+
    7cda:	74 90       	lpm	r7, Z
	Span = Next_val - Val;                  //Calc Span
	Saturation_Temp = Val + (Span * decimals);//interpolate between array points
		
	return(comp->Suc_Comp - Saturation_Temp);// Suct_T - Saturation_Temp;
    7cdc:	ee 96       	adiw	r28, 0x3e	; 62
    7cde:	07 2e       	mov	r0, r23
    7ce0:	00 0c       	add	r0, r0
    7ce2:	88 0b       	sbc	r24, r24
    7ce4:	99 0b       	sbc	r25, r25
    7ce6:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    7cea:	9b 01       	movw	r18, r22
    7cec:	ac 01       	movw	r20, r24
    7cee:	c5 01       	movw	r24, r10
    7cf0:	b4 01       	movw	r22, r8
    7cf2:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    7cf6:	4b 01       	movw	r8, r22
    7cf8:	5c 01       	movw	r10, r24
    7cfa:	a7 01       	movw	r20, r14
    7cfc:	96 01       	movw	r18, r12
    7cfe:	c3 01       	movw	r24, r6
    7d00:	b2 01       	movw	r22, r4
    7d02:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    7d06:	9b 01       	movw	r18, r22
    7d08:	ac 01       	movw	r20, r24
    7d0a:	c5 01       	movw	r24, r10
    7d0c:	b4 01       	movw	r22, r8
    7d0e:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    7d12:	a7 01       	movw	r20, r14
    7d14:	96 01       	movw	r18, r12
    7d16:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    7d1a:	9b 01       	movw	r18, r22
    7d1c:	ac 01       	movw	r20, r24
    7d1e:	68 81       	ld	r22, Y
    7d20:	79 81       	ldd	r23, Y+1	; 0x01
    7d22:	8a 81       	ldd	r24, Y+2	; 0x02
    7d24:	9b 81       	ldd	r25, Y+3	; 0x03
    7d26:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>

}
    7d2a:	df 91       	pop	r29
    7d2c:	cf 91       	pop	r28
    7d2e:	ff 90       	pop	r15
    7d30:	ef 90       	pop	r14
    7d32:	df 90       	pop	r13
    7d34:	cf 90       	pop	r12
    7d36:	bf 90       	pop	r11
    7d38:	af 90       	pop	r10
    7d3a:	9f 90       	pop	r9
    7d3c:	8f 90       	pop	r8
    7d3e:	7f 90       	pop	r7
    7d40:	6f 90       	pop	r6
    7d42:	5f 90       	pop	r5
    7d44:	4f 90       	pop	r4
    7d46:	08 95       	ret

00007d48 <ReadSuperCool>:
float ReadSuperCool (xCompressor *comp){
    7d48:	4f 92       	push	r4
    7d4a:	5f 92       	push	r5
    7d4c:	6f 92       	push	r6
    7d4e:	7f 92       	push	r7
    7d50:	8f 92       	push	r8
    7d52:	9f 92       	push	r9
    7d54:	af 92       	push	r10
    7d56:	bf 92       	push	r11
    7d58:	cf 92       	push	r12
    7d5a:	df 92       	push	r13
    7d5c:	ef 92       	push	r14
    7d5e:	ff 92       	push	r15
    7d60:	cf 93       	push	r28
    7d62:	df 93       	push	r29
    7d64:	ec 01       	movw	r28, r24
	float Val, Next_val, Span, Saturation_Temp, decimals, work;
	int I;
	work = ((comp->High_Press - 1.0) / 1.0);
    7d66:	20 e0       	ldi	r18, 0x00	; 0
    7d68:	30 e0       	ldi	r19, 0x00	; 0
    7d6a:	40 e8       	ldi	r20, 0x80	; 128
    7d6c:	5f e3       	ldi	r21, 0x3F	; 63
    7d6e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    7d70:	7b 8d       	ldd	r23, Y+27	; 0x1b
    7d72:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7d74:	9d 8d       	ldd	r25, Y+29	; 0x1d
    7d76:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    7d7a:	4b 01       	movw	r8, r22
    7d7c:	5c 01       	movw	r10, r24

	I = work;                                //drop decimals to get array index
    7d7e:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__fixsfsi>

	decimals = work - I; //restore decimals for interpolation between array points
	Val = pgm_read_float(&R22_Saturation_Temp[I]);           //get array value
    7d82:	fb 01       	movw	r30, r22
    7d84:	ee 0f       	add	r30, r30
    7d86:	ff 1f       	adc	r31, r31
    7d88:	ee 0f       	add	r30, r30
    7d8a:	ff 1f       	adc	r31, r31
    7d8c:	e0 51       	subi	r30, 0x10	; 16
    7d8e:	f6 4f       	sbci	r31, 0xF6	; 246
    7d90:	c5 90       	lpm	r12, Z+
    7d92:	d5 90       	lpm	r13, Z+
    7d94:	e5 90       	lpm	r14, Z+
    7d96:	f4 90       	lpm	r15, Z
	Next_val = pgm_read_float(&R22_Saturation_Temp[I + 1]);  //get Next array value
    7d98:	fb 01       	movw	r30, r22
    7d9a:	31 96       	adiw	r30, 0x01	; 1
    7d9c:	ee 0f       	add	r30, r30
    7d9e:	ff 1f       	adc	r31, r31
    7da0:	ee 0f       	add	r30, r30
    7da2:	ff 1f       	adc	r31, r31
    7da4:	e0 51       	subi	r30, 0x10	; 16
    7da6:	f6 4f       	sbci	r31, 0xF6	; 246
    7da8:	45 90       	lpm	r4, Z+
    7daa:	55 90       	lpm	r5, Z+
    7dac:	65 90       	lpm	r6, Z+
    7dae:	74 90       	lpm	r7, Z
	Span = Next_val - Val;                   //Calc Span
	Saturation_Temp = Val + (Span * decimals);//interpolate between array points
	
    return(Saturation_Temp - comp->Cond_Temp);// Suct_T - Saturation_Temp;	
    7db0:	07 2e       	mov	r0, r23
    7db2:	00 0c       	add	r0, r0
    7db4:	88 0b       	sbc	r24, r24
    7db6:	99 0b       	sbc	r25, r25
    7db8:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    7dbc:	9b 01       	movw	r18, r22
    7dbe:	ac 01       	movw	r20, r24
    7dc0:	c5 01       	movw	r24, r10
    7dc2:	b4 01       	movw	r22, r8
    7dc4:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    7dc8:	4b 01       	movw	r8, r22
    7dca:	5c 01       	movw	r10, r24
    7dcc:	a7 01       	movw	r20, r14
    7dce:	96 01       	movw	r18, r12
    7dd0:	c3 01       	movw	r24, r6
    7dd2:	b2 01       	movw	r22, r4
    7dd4:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    7dd8:	9b 01       	movw	r18, r22
    7dda:	ac 01       	movw	r20, r24
    7ddc:	c5 01       	movw	r24, r10
    7dde:	b4 01       	movw	r22, r8
    7de0:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    7de4:	a7 01       	movw	r20, r14
    7de6:	96 01       	movw	r18, r12
    7de8:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    7dec:	ce 5b       	subi	r28, 0xBE	; 190
    7dee:	df 4f       	sbci	r29, 0xFF	; 255
    7df0:	28 81       	ld	r18, Y
    7df2:	39 81       	ldd	r19, Y+1	; 0x01
    7df4:	4a 81       	ldd	r20, Y+2	; 0x02
    7df6:	5b 81       	ldd	r21, Y+3	; 0x03
    7df8:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
}
    7dfc:	df 91       	pop	r29
    7dfe:	cf 91       	pop	r28
    7e00:	ff 90       	pop	r15
    7e02:	ef 90       	pop	r14
    7e04:	df 90       	pop	r13
    7e06:	cf 90       	pop	r12
    7e08:	bf 90       	pop	r11
    7e0a:	af 90       	pop	r10
    7e0c:	9f 90       	pop	r9
    7e0e:	8f 90       	pop	r8
    7e10:	7f 90       	pop	r7
    7e12:	6f 90       	pop	r6
    7e14:	5f 90       	pop	r5
    7e16:	4f 90       	pop	r4
    7e18:	08 95       	ret

00007e1a <corectTrv>:
//-------------------------------------------------------------
float  corectTrv(xCompressor *comp){
    7e1a:	4f 92       	push	r4
    7e1c:	5f 92       	push	r5
    7e1e:	6f 92       	push	r6
    7e20:	7f 92       	push	r7
    7e22:	8f 92       	push	r8
    7e24:	9f 92       	push	r9
    7e26:	af 92       	push	r10
    7e28:	bf 92       	push	r11
    7e2a:	cf 92       	push	r12
    7e2c:	df 92       	push	r13
    7e2e:	ef 92       	push	r14
    7e30:	ff 92       	push	r15
    7e32:	cf 93       	push	r28
    7e34:	df 93       	push	r29
	static float Superheat_old=0;
	int SSet;
	float ds;
	float Superheat;
	Superheat=comp->SuperHeat;
    7e36:	8a 5b       	subi	r24, 0xBA	; 186
    7e38:	9f 4f       	sbci	r25, 0xFF	; 255
    7e3a:	fc 01       	movw	r30, r24
    7e3c:	c0 80       	ld	r12, Z
    7e3e:	d1 80       	ldd	r13, Z+1	; 0x01
    7e40:	e2 80       	ldd	r14, Z+2	; 0x02
    7e42:	f3 80       	ldd	r15, Z+3	; 0x03
	ds = Superheat - Superheat_old; // calculate the change in Superheat
    7e44:	20 91 55 07 	lds	r18, 0x0755	; 0x800755 <Superheat_old.3263>
    7e48:	30 91 56 07 	lds	r19, 0x0756	; 0x800756 <Superheat_old.3263+0x1>
    7e4c:	40 91 57 07 	lds	r20, 0x0757	; 0x800757 <Superheat_old.3263+0x2>
    7e50:	50 91 58 07 	lds	r21, 0x0758	; 0x800758 <Superheat_old.3263+0x3>
    7e54:	c7 01       	movw	r24, r14
    7e56:	b6 01       	movw	r22, r12
    7e58:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
	ds = ds * 2; // scaling factor for DS
    7e5c:	9b 01       	movw	r18, r22
    7e5e:	ac 01       	movw	r20, r24
    7e60:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    7e64:	4b 01       	movw	r8, r22
    7e66:	5c 01       	movw	r10, r24
	SSet=7;

	// Variable sampling rate --------------------------------------------
	int  k = 1; // Gain for the steps

	if ( Superheat - SSet > 3)
    7e68:	20 e0       	ldi	r18, 0x00	; 0
    7e6a:	30 e0       	ldi	r19, 0x00	; 0
    7e6c:	40 ee       	ldi	r20, 0xE0	; 224
    7e6e:	50 e4       	ldi	r21, 0x40	; 64
    7e70:	c7 01       	movw	r24, r14
    7e72:	b6 01       	movw	r22, r12
    7e74:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    7e78:	2b 01       	movw	r4, r22
    7e7a:	3c 01       	movw	r6, r24
    7e7c:	20 e0       	ldi	r18, 0x00	; 0
    7e7e:	30 e0       	ldi	r19, 0x00	; 0
    7e80:	40 e4       	ldi	r20, 0x40	; 64
    7e82:	50 e4       	ldi	r21, 0x40	; 64
    7e84:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    7e88:	18 16       	cp	r1, r24
    7e8a:	e4 f4       	brge	.+56     	; 0x7ec4 <corectTrv+0xaa>
	{
		if (ds > 2 || ds < -2)
    7e8c:	20 e0       	ldi	r18, 0x00	; 0
    7e8e:	30 e0       	ldi	r19, 0x00	; 0
    7e90:	40 e0       	ldi	r20, 0x00	; 0
    7e92:	50 e4       	ldi	r21, 0x40	; 64
    7e94:	c5 01       	movw	r24, r10
    7e96:	b4 01       	movw	r22, r8
    7e98:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    7e9c:	18 16       	cp	r1, r24
    7e9e:	ac f0       	brlt	.+42     	; 0x7eca <corectTrv+0xb0>
    7ea0:	20 e0       	ldi	r18, 0x00	; 0
    7ea2:	30 e0       	ldi	r19, 0x00	; 0
    7ea4:	40 e0       	ldi	r20, 0x00	; 0
    7ea6:	50 ec       	ldi	r21, 0xC0	; 192
    7ea8:	c5 01       	movw	r24, r10
    7eaa:	b4 01       	movw	r22, r8
    7eac:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
	ds = Superheat - Superheat_old; // calculate the change in Superheat
	ds = ds * 2; // scaling factor for DS
	SSet=7;

	// Variable sampling rate --------------------------------------------
	int  k = 1; // Gain for the steps
    7eb0:	68 2f       	mov	r22, r24
    7eb2:	88 0f       	add	r24, r24
    7eb4:	77 0b       	sbc	r23, r23
    7eb6:	eb 01       	movw	r28, r22
    7eb8:	cc 27       	eor	r28, r28
    7eba:	dd 0f       	add	r29, r29
    7ebc:	cc 1f       	adc	r28, r28
    7ebe:	dd 27       	eor	r29, r29
    7ec0:	21 96       	adiw	r28, 0x01	; 1
    7ec2:	05 c0       	rjmp	.+10     	; 0x7ece <corectTrv+0xb4>
    7ec4:	c1 e0       	ldi	r28, 0x01	; 1
    7ec6:	d0 e0       	ldi	r29, 0x00	; 0
    7ec8:	02 c0       	rjmp	.+4      	; 0x7ece <corectTrv+0xb4>
	if ( Superheat - SSet > 3)
	{
		if (ds > 2 || ds < -2)

		{
			k = 2; // Gain for the steps
    7eca:	c2 e0       	ldi	r28, 0x02	; 2
    7ecc:	d0 e0       	ldi	r29, 0x00	; 0
			
		}
	}

	if ( Superheat - SSet >= 5)
    7ece:	20 e0       	ldi	r18, 0x00	; 0
    7ed0:	30 e0       	ldi	r19, 0x00	; 0
    7ed2:	40 ea       	ldi	r20, 0xA0	; 160
    7ed4:	50 e4       	ldi	r21, 0x40	; 64
    7ed6:	c3 01       	movw	r24, r6
    7ed8:	b2 01       	movw	r22, r4
    7eda:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    7ede:	88 23       	and	r24, r24
    7ee0:	cc f0       	brlt	.+50     	; 0x7f14 <corectTrv+0xfa>
	{
		if (ds > 2 || ds < -2)
    7ee2:	20 e0       	ldi	r18, 0x00	; 0
    7ee4:	30 e0       	ldi	r19, 0x00	; 0
    7ee6:	40 e0       	ldi	r20, 0x00	; 0
    7ee8:	50 e4       	ldi	r21, 0x40	; 64
    7eea:	c5 01       	movw	r24, r10
    7eec:	b4 01       	movw	r22, r8
    7eee:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    7ef2:	18 16       	cp	r1, r24
    7ef4:	6c f0       	brlt	.+26     	; 0x7f10 <corectTrv+0xf6>
    7ef6:	20 e0       	ldi	r18, 0x00	; 0
    7ef8:	30 e0       	ldi	r19, 0x00	; 0
    7efa:	40 e0       	ldi	r20, 0x00	; 0
    7efc:	50 ec       	ldi	r21, 0xC0	; 192
    7efe:	c5 01       	movw	r24, r10
    7f00:	b4 01       	movw	r22, r8
    7f02:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    7f06:	88 23       	and	r24, r24
    7f08:	2c f4       	brge	.+10     	; 0x7f14 <corectTrv+0xfa>
		{
			k = 3; // Gain for the steps
    7f0a:	c3 e0       	ldi	r28, 0x03	; 3
    7f0c:	d0 e0       	ldi	r29, 0x00	; 0
    7f0e:	02 c0       	rjmp	.+4      	; 0x7f14 <corectTrv+0xfa>
    7f10:	c3 e0       	ldi	r28, 0x03	; 3
    7f12:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}

	//------------------------

	if (Superheat < SSet)
    7f14:	20 e0       	ldi	r18, 0x00	; 0
    7f16:	30 e0       	ldi	r19, 0x00	; 0
    7f18:	40 ee       	ldi	r20, 0xE0	; 224
    7f1a:	50 e4       	ldi	r21, 0x40	; 64
    7f1c:	c7 01       	movw	r24, r14
    7f1e:	b6 01       	movw	r22, r12
    7f20:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    7f24:	88 23       	and	r24, r24
    7f26:	84 f4       	brge	.+32     	; 0x7f48 <corectTrv+0x12e>
	{
		k = -1; // if the Superheat is too low, this gain changes the step direction
		Superheat = SSet + 10 - Superheat;
    7f28:	a7 01       	movw	r20, r14
    7f2a:	96 01       	movw	r18, r12
    7f2c:	60 e0       	ldi	r22, 0x00	; 0
    7f2e:	70 e0       	ldi	r23, 0x00	; 0
    7f30:	88 e8       	ldi	r24, 0x88	; 136
    7f32:	91 e4       	ldi	r25, 0x41	; 65
    7f34:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    7f38:	6b 01       	movw	r12, r22
    7f3a:	7c 01       	movw	r14, r24
		ds = -ds;
    7f3c:	b7 fa       	bst	r11, 7
    7f3e:	b0 94       	com	r11
    7f40:	b7 f8       	bld	r11, 7
    7f42:	b0 94       	com	r11

	//------------------------

	if (Superheat < SSet)
	{
		k = -1; // if the Superheat is too low, this gain changes the step direction
    7f44:	cf ef       	ldi	r28, 0xFF	; 255
    7f46:	df ef       	ldi	r29, 0xFF	; 255
		Superheat = SSet + 10 - Superheat;
		ds = -ds;
	}
	
	Superheat_old = Superheat;
    7f48:	c0 92 55 07 	sts	0x0755, r12	; 0x800755 <Superheat_old.3263>
    7f4c:	d0 92 56 07 	sts	0x0756, r13	; 0x800756 <Superheat_old.3263+0x1>
    7f50:	e0 92 57 07 	sts	0x0757, r14	; 0x800757 <Superheat_old.3263+0x2>
    7f54:	f0 92 58 07 	sts	0x0758, r15	; 0x800758 <Superheat_old.3263+0x3>
	
	if (ds > 20)
    7f58:	20 e0       	ldi	r18, 0x00	; 0
    7f5a:	30 e0       	ldi	r19, 0x00	; 0
    7f5c:	40 ea       	ldi	r20, 0xA0	; 160
    7f5e:	51 e4       	ldi	r21, 0x41	; 65
    7f60:	c5 01       	movw	r24, r10
    7f62:	b4 01       	movw	r22, r8
    7f64:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    7f68:	18 16       	cp	r1, r24
    7f6a:	14 f4       	brge	.+4      	; 0x7f70 <corectTrv+0x156>
    7f6c:	0c 94 57 4a 	jmp	0x94ae	; 0x94ae <corectTrv+0x1694>
	{
		ds = 20;
	}

	 else if (ds < -20)
    7f70:	20 e0       	ldi	r18, 0x00	; 0
    7f72:	30 e0       	ldi	r19, 0x00	; 0
    7f74:	40 ea       	ldi	r20, 0xA0	; 160
    7f76:	51 ec       	ldi	r21, 0xC1	; 193
    7f78:	c5 01       	movw	r24, r10
    7f7a:	b4 01       	movw	r22, r8
    7f7c:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    7f80:	88 23       	and	r24, r24
    7f82:	64 f0       	brlt	.+24     	; 0x7f9c <corectTrv+0x182>
	{
		ds = -20;
	}
//--------------------------------------
	if (ds < -10)
    7f84:	20 e0       	ldi	r18, 0x00	; 0
    7f86:	30 e0       	ldi	r19, 0x00	; 0
    7f88:	40 e2       	ldi	r20, 0x20	; 32
    7f8a:	51 ec       	ldi	r21, 0xC1	; 193
    7f8c:	c5 01       	movw	r24, r10
    7f8e:	b4 01       	movw	r22, r8
    7f90:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    7f94:	88 23       	and	r24, r24
    7f96:	0c f0       	brlt	.+2      	; 0x7f9a <corectTrv+0x180>
    7f98:	ab c3       	rjmp	.+1878   	; 0x86f0 <corectTrv+0x8d6>
    7f9a:	08 c0       	rjmp	.+16     	; 0x7fac <corectTrv+0x192>
		ds = 20;
	}

	 else if (ds < -20)
	{
		ds = -20;
    7f9c:	0f 2e       	mov	r0, r31
    7f9e:	81 2c       	mov	r8, r1
    7fa0:	91 2c       	mov	r9, r1
    7fa2:	f0 ea       	ldi	r31, 0xA0	; 160
    7fa4:	af 2e       	mov	r10, r31
    7fa6:	f1 ec       	ldi	r31, 0xC1	; 193
    7fa8:	bf 2e       	mov	r11, r31
    7faa:	f0 2d       	mov	r31, r0
	}
//--------------------------------------
	if (ds < -10)
	{
		if (Superheat == SSet)
    7fac:	20 e0       	ldi	r18, 0x00	; 0
    7fae:	30 e0       	ldi	r19, 0x00	; 0
    7fb0:	40 ee       	ldi	r20, 0xE0	; 224
    7fb2:	50 e4       	ldi	r21, 0x40	; 64
    7fb4:	c7 01       	movw	r24, r14
    7fb6:	b6 01       	movw	r22, r12
    7fb8:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    7fbc:	81 11       	cpse	r24, r1
    7fbe:	32 c0       	rjmp	.+100    	; 0x8024 <corectTrv+0x20a>
		{
			return(-0.123 * ds * ds - 2.768 * ds - 30.62)* k ;
    7fc0:	2d e6       	ldi	r18, 0x6D	; 109
    7fc2:	37 ee       	ldi	r19, 0xE7	; 231
    7fc4:	4b ef       	ldi	r20, 0xFB	; 251
    7fc6:	5d eb       	ldi	r21, 0xBD	; 189
    7fc8:	c5 01       	movw	r24, r10
    7fca:	b4 01       	movw	r22, r8
    7fcc:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    7fd0:	a5 01       	movw	r20, r10
    7fd2:	94 01       	movw	r18, r8
    7fd4:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    7fd8:	6b 01       	movw	r12, r22
    7fda:	7c 01       	movw	r14, r24
    7fdc:	29 ee       	ldi	r18, 0xE9	; 233
    7fde:	36 e2       	ldi	r19, 0x26	; 38
    7fe0:	41 e3       	ldi	r20, 0x31	; 49
    7fe2:	50 e4       	ldi	r21, 0x40	; 64
    7fe4:	c5 01       	movw	r24, r10
    7fe6:	b4 01       	movw	r22, r8
    7fe8:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    7fec:	9b 01       	movw	r18, r22
    7fee:	ac 01       	movw	r20, r24
    7ff0:	c7 01       	movw	r24, r14
    7ff2:	b6 01       	movw	r22, r12
    7ff4:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    7ff8:	23 ec       	ldi	r18, 0xC3	; 195
    7ffa:	35 ef       	ldi	r19, 0xF5	; 245
    7ffc:	44 ef       	ldi	r20, 0xF4	; 244
    7ffe:	51 e4       	ldi	r21, 0x41	; 65
    8000:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    8004:	6b 01       	movw	r12, r22
    8006:	7c 01       	movw	r14, r24
    8008:	be 01       	movw	r22, r28
    800a:	dd 0f       	add	r29, r29
    800c:	88 0b       	sbc	r24, r24
    800e:	99 0b       	sbc	r25, r25
    8010:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    8014:	9b 01       	movw	r18, r22
    8016:	ac 01       	movw	r20, r24
    8018:	c7 01       	movw	r24, r14
    801a:	b6 01       	movw	r22, r12
    801c:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8020:	0c 94 05 4c 	jmp	0x980a	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    8024:	20 e0       	ldi	r18, 0x00	; 0
    8026:	30 e0       	ldi	r19, 0x00	; 0
    8028:	40 ee       	ldi	r20, 0xE0	; 224
    802a:	50 e4       	ldi	r21, 0x40	; 64
    802c:	c7 01       	movw	r24, r14
    802e:	b6 01       	movw	r22, r12
    8030:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    8034:	18 16       	cp	r1, r24
    8036:	0c f0       	brlt	.+2      	; 0x803a <corectTrv+0x220>
    8038:	55 c0       	rjmp	.+170    	; 0x80e4 <corectTrv+0x2ca>
    803a:	20 e0       	ldi	r18, 0x00	; 0
    803c:	30 e0       	ldi	r19, 0x00	; 0
    803e:	40 e0       	ldi	r20, 0x00	; 0
    8040:	51 e4       	ldi	r21, 0x41	; 65
    8042:	c7 01       	movw	r24, r14
    8044:	b6 01       	movw	r22, r12
    8046:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    804a:	18 16       	cp	r1, r24
    804c:	0c f4       	brge	.+2      	; 0x8050 <corectTrv+0x236>
    804e:	4a c0       	rjmp	.+148    	; 0x80e4 <corectTrv+0x2ca>
		{
			return( 0.02416 * ds * ds * ds + 0.95688 * ds * ds + 12.69588 * ds + 44.31142)* k;
    8050:	21 e3       	ldi	r18, 0x31	; 49
    8052:	3b ee       	ldi	r19, 0xEB	; 235
    8054:	45 ec       	ldi	r20, 0xC5	; 197
    8056:	5c e3       	ldi	r21, 0x3C	; 60
    8058:	c5 01       	movw	r24, r10
    805a:	b4 01       	movw	r22, r8
    805c:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8060:	a5 01       	movw	r20, r10
    8062:	94 01       	movw	r18, r8
    8064:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8068:	a5 01       	movw	r20, r10
    806a:	94 01       	movw	r18, r8
    806c:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8070:	6b 01       	movw	r12, r22
    8072:	7c 01       	movw	r14, r24
    8074:	26 e1       	ldi	r18, 0x16	; 22
    8076:	36 ef       	ldi	r19, 0xF6	; 246
    8078:	44 e7       	ldi	r20, 0x74	; 116
    807a:	5f e3       	ldi	r21, 0x3F	; 63
    807c:	c5 01       	movw	r24, r10
    807e:	b4 01       	movw	r22, r8
    8080:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8084:	a5 01       	movw	r20, r10
    8086:	94 01       	movw	r18, r8
    8088:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    808c:	9b 01       	movw	r18, r22
    808e:	ac 01       	movw	r20, r24
    8090:	c7 01       	movw	r24, r14
    8092:	b6 01       	movw	r22, r12
    8094:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8098:	6b 01       	movw	r12, r22
    809a:	7c 01       	movw	r14, r24
    809c:	23 e5       	ldi	r18, 0x53	; 83
    809e:	32 e2       	ldi	r19, 0x22	; 34
    80a0:	4b e4       	ldi	r20, 0x4B	; 75
    80a2:	51 e4       	ldi	r21, 0x41	; 65
    80a4:	c5 01       	movw	r24, r10
    80a6:	b4 01       	movw	r22, r8
    80a8:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    80ac:	9b 01       	movw	r18, r22
    80ae:	ac 01       	movw	r20, r24
    80b0:	c7 01       	movw	r24, r14
    80b2:	b6 01       	movw	r22, r12
    80b4:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    80b8:	25 ee       	ldi	r18, 0xE5	; 229
    80ba:	3e e3       	ldi	r19, 0x3E	; 62
    80bc:	41 e3       	ldi	r20, 0x31	; 49
    80be:	52 e4       	ldi	r21, 0x42	; 66
    80c0:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    80c4:	6b 01       	movw	r12, r22
    80c6:	7c 01       	movw	r14, r24
    80c8:	be 01       	movw	r22, r28
    80ca:	dd 0f       	add	r29, r29
    80cc:	88 0b       	sbc	r24, r24
    80ce:	99 0b       	sbc	r25, r25
    80d0:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    80d4:	9b 01       	movw	r18, r22
    80d6:	ac 01       	movw	r20, r24
    80d8:	c7 01       	movw	r24, r14
    80da:	b6 01       	movw	r22, r12
    80dc:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    80e0:	0c 94 05 4c 	jmp	0x980a	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    80e4:	20 e0       	ldi	r18, 0x00	; 0
    80e6:	30 e0       	ldi	r19, 0x00	; 0
    80e8:	40 e0       	ldi	r20, 0x00	; 0
    80ea:	51 e4       	ldi	r21, 0x41	; 65
    80ec:	c7 01       	movw	r24, r14
    80ee:	b6 01       	movw	r22, r12
    80f0:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    80f4:	18 16       	cp	r1, r24
    80f6:	0c f0       	brlt	.+2      	; 0x80fa <corectTrv+0x2e0>
    80f8:	55 c0       	rjmp	.+170    	; 0x81a4 <corectTrv+0x38a>
    80fa:	20 e0       	ldi	r18, 0x00	; 0
    80fc:	30 e0       	ldi	r19, 0x00	; 0
    80fe:	40 e1       	ldi	r20, 0x10	; 16
    8100:	51 e4       	ldi	r21, 0x41	; 65
    8102:	c7 01       	movw	r24, r14
    8104:	b6 01       	movw	r22, r12
    8106:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    810a:	18 16       	cp	r1, r24
    810c:	0c f4       	brge	.+2      	; 0x8110 <corectTrv+0x2f6>
    810e:	4a c0       	rjmp	.+148    	; 0x81a4 <corectTrv+0x38a>
		{
			return( 0.01715 * ds * ds * ds + 0.64880 * ds * ds + 8.39021 * ds + 27.61058)* k;
    8110:	28 e2       	ldi	r18, 0x28	; 40
    8112:	3e e7       	ldi	r19, 0x7E	; 126
    8114:	4c e8       	ldi	r20, 0x8C	; 140
    8116:	5c e3       	ldi	r21, 0x3C	; 60
    8118:	c5 01       	movw	r24, r10
    811a:	b4 01       	movw	r22, r8
    811c:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8120:	a5 01       	movw	r20, r10
    8122:	94 01       	movw	r18, r8
    8124:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8128:	a5 01       	movw	r20, r10
    812a:	94 01       	movw	r18, r8
    812c:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8130:	6b 01       	movw	r12, r22
    8132:	7c 01       	movw	r14, r24
    8134:	22 ec       	ldi	r18, 0xC2	; 194
    8136:	37 e1       	ldi	r19, 0x17	; 23
    8138:	46 e2       	ldi	r20, 0x26	; 38
    813a:	5f e3       	ldi	r21, 0x3F	; 63
    813c:	c5 01       	movw	r24, r10
    813e:	b4 01       	movw	r22, r8
    8140:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8144:	a5 01       	movw	r20, r10
    8146:	94 01       	movw	r18, r8
    8148:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    814c:	9b 01       	movw	r18, r22
    814e:	ac 01       	movw	r20, r24
    8150:	c7 01       	movw	r24, r14
    8152:	b6 01       	movw	r22, r12
    8154:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8158:	6b 01       	movw	r12, r22
    815a:	7c 01       	movw	r14, r24
    815c:	2d e4       	ldi	r18, 0x4D	; 77
    815e:	3e e3       	ldi	r19, 0x3E	; 62
    8160:	46 e0       	ldi	r20, 0x06	; 6
    8162:	51 e4       	ldi	r21, 0x41	; 65
    8164:	c5 01       	movw	r24, r10
    8166:	b4 01       	movw	r22, r8
    8168:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    816c:	9b 01       	movw	r18, r22
    816e:	ac 01       	movw	r20, r24
    8170:	c7 01       	movw	r24, r14
    8172:	b6 01       	movw	r22, r12
    8174:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8178:	28 e7       	ldi	r18, 0x78	; 120
    817a:	32 ee       	ldi	r19, 0xE2	; 226
    817c:	4c ed       	ldi	r20, 0xDC	; 220
    817e:	51 e4       	ldi	r21, 0x41	; 65
    8180:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8184:	6b 01       	movw	r12, r22
    8186:	7c 01       	movw	r14, r24
    8188:	be 01       	movw	r22, r28
    818a:	dd 0f       	add	r29, r29
    818c:	88 0b       	sbc	r24, r24
    818e:	99 0b       	sbc	r25, r25
    8190:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    8194:	9b 01       	movw	r18, r22
    8196:	ac 01       	movw	r20, r24
    8198:	c7 01       	movw	r24, r14
    819a:	b6 01       	movw	r22, r12
    819c:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    81a0:	0c 94 05 4c 	jmp	0x980a	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    81a4:	20 e0       	ldi	r18, 0x00	; 0
    81a6:	30 e0       	ldi	r19, 0x00	; 0
    81a8:	40 e1       	ldi	r20, 0x10	; 16
    81aa:	51 e4       	ldi	r21, 0x41	; 65
    81ac:	c7 01       	movw	r24, r14
    81ae:	b6 01       	movw	r22, r12
    81b0:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    81b4:	18 16       	cp	r1, r24
    81b6:	74 f5       	brge	.+92     	; 0x8214 <corectTrv+0x3fa>
    81b8:	20 e0       	ldi	r18, 0x00	; 0
    81ba:	30 e0       	ldi	r19, 0x00	; 0
    81bc:	40 e2       	ldi	r20, 0x20	; 32
    81be:	51 e4       	ldi	r21, 0x41	; 65
    81c0:	c7 01       	movw	r24, r14
    81c2:	b6 01       	movw	r22, r12
    81c4:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    81c8:	18 16       	cp	r1, r24
    81ca:	24 f1       	brlt	.+72     	; 0x8214 <corectTrv+0x3fa>
		{
			return( -0.099 * ds * ds - 2.002 * ds - 16.444);
    81cc:	23 e8       	ldi	r18, 0x83	; 131
    81ce:	30 ec       	ldi	r19, 0xC0	; 192
    81d0:	4a ec       	ldi	r20, 0xCA	; 202
    81d2:	5d eb       	ldi	r21, 0xBD	; 189
    81d4:	c5 01       	movw	r24, r10
    81d6:	b4 01       	movw	r22, r8
    81d8:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    81dc:	a5 01       	movw	r20, r10
    81de:	94 01       	movw	r18, r8
    81e0:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    81e4:	6b 01       	movw	r12, r22
    81e6:	7c 01       	movw	r14, r24
    81e8:	25 ec       	ldi	r18, 0xC5	; 197
    81ea:	30 e2       	ldi	r19, 0x20	; 32
    81ec:	40 e0       	ldi	r20, 0x00	; 0
    81ee:	50 e4       	ldi	r21, 0x40	; 64
    81f0:	c5 01       	movw	r24, r10
    81f2:	b4 01       	movw	r22, r8
    81f4:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    81f8:	9b 01       	movw	r18, r22
    81fa:	ac 01       	movw	r20, r24
    81fc:	c7 01       	movw	r24, r14
    81fe:	b6 01       	movw	r22, r12
    8200:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    8204:	20 e5       	ldi	r18, 0x50	; 80
    8206:	3d e8       	ldi	r19, 0x8D	; 141
    8208:	43 e8       	ldi	r20, 0x83	; 131
    820a:	51 e4       	ldi	r21, 0x41	; 65
    820c:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    8210:	0c 94 05 4c 	jmp	0x980a	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    8214:	20 e0       	ldi	r18, 0x00	; 0
    8216:	30 e0       	ldi	r19, 0x00	; 0
    8218:	40 e2       	ldi	r20, 0x20	; 32
    821a:	51 e4       	ldi	r21, 0x41	; 65
    821c:	c7 01       	movw	r24, r14
    821e:	b6 01       	movw	r22, r12
    8220:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    8224:	18 16       	cp	r1, r24
    8226:	74 f5       	brge	.+92     	; 0x8284 <corectTrv+0x46a>
    8228:	20 e0       	ldi	r18, 0x00	; 0
    822a:	30 e0       	ldi	r19, 0x00	; 0
    822c:	40 e3       	ldi	r20, 0x30	; 48
    822e:	51 e4       	ldi	r21, 0x41	; 65
    8230:	c7 01       	movw	r24, r14
    8232:	b6 01       	movw	r22, r12
    8234:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    8238:	18 16       	cp	r1, r24
    823a:	24 f1       	brlt	.+72     	; 0x8284 <corectTrv+0x46a>
		{
			return( -0.065 * ds * ds - 0.773 * ds - 4.451);
    823c:	28 eb       	ldi	r18, 0xB8	; 184
    823e:	3e e1       	ldi	r19, 0x1E	; 30
    8240:	45 e8       	ldi	r20, 0x85	; 133
    8242:	5d eb       	ldi	r21, 0xBD	; 189
    8244:	c5 01       	movw	r24, r10
    8246:	b4 01       	movw	r22, r8
    8248:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    824c:	a5 01       	movw	r20, r10
    824e:	94 01       	movw	r18, r8
    8250:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8254:	6b 01       	movw	r12, r22
    8256:	7c 01       	movw	r14, r24
    8258:	24 e5       	ldi	r18, 0x54	; 84
    825a:	33 ee       	ldi	r19, 0xE3	; 227
    825c:	45 e4       	ldi	r20, 0x45	; 69
    825e:	5f e3       	ldi	r21, 0x3F	; 63
    8260:	c5 01       	movw	r24, r10
    8262:	b4 01       	movw	r22, r8
    8264:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8268:	9b 01       	movw	r18, r22
    826a:	ac 01       	movw	r20, r24
    826c:	c7 01       	movw	r24, r14
    826e:	b6 01       	movw	r22, r12
    8270:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    8274:	28 e9       	ldi	r18, 0x98	; 152
    8276:	3e e6       	ldi	r19, 0x6E	; 110
    8278:	4e e8       	ldi	r20, 0x8E	; 142
    827a:	50 e4       	ldi	r21, 0x40	; 64
    827c:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    8280:	0c 94 05 4c 	jmp	0x980a	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    8284:	20 e0       	ldi	r18, 0x00	; 0
    8286:	30 e0       	ldi	r19, 0x00	; 0
    8288:	40 e3       	ldi	r20, 0x30	; 48
    828a:	51 e4       	ldi	r21, 0x41	; 65
    828c:	c7 01       	movw	r24, r14
    828e:	b6 01       	movw	r22, r12
    8290:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    8294:	18 16       	cp	r1, r24
    8296:	0c f0       	brlt	.+2      	; 0x829a <corectTrv+0x480>
    8298:	55 c0       	rjmp	.+170    	; 0x8344 <corectTrv+0x52a>
    829a:	20 e0       	ldi	r18, 0x00	; 0
    829c:	30 e0       	ldi	r19, 0x00	; 0
    829e:	40 e4       	ldi	r20, 0x40	; 64
    82a0:	51 e4       	ldi	r21, 0x41	; 65
    82a2:	c7 01       	movw	r24, r14
    82a4:	b6 01       	movw	r22, r12
    82a6:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    82aa:	18 16       	cp	r1, r24
    82ac:	0c f4       	brge	.+2      	; 0x82b0 <corectTrv+0x496>
    82ae:	4a c0       	rjmp	.+148    	; 0x8344 <corectTrv+0x52a>
		{
			return( 0.01315 * ds * ds * ds + 0.59145 * ds * ds + 10.05298 * ds + 54.52301)* k;
    82b0:	29 e1       	ldi	r18, 0x19	; 25
    82b2:	33 e7       	ldi	r19, 0x73	; 115
    82b4:	47 e5       	ldi	r20, 0x57	; 87
    82b6:	5c e3       	ldi	r21, 0x3C	; 60
    82b8:	c5 01       	movw	r24, r10
    82ba:	b4 01       	movw	r22, r8
    82bc:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    82c0:	a5 01       	movw	r20, r10
    82c2:	94 01       	movw	r18, r8
    82c4:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    82c8:	a5 01       	movw	r20, r10
    82ca:	94 01       	movw	r18, r8
    82cc:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    82d0:	6b 01       	movw	r12, r22
    82d2:	7c 01       	movw	r14, r24
    82d4:	24 e4       	ldi	r18, 0x44	; 68
    82d6:	39 e6       	ldi	r19, 0x69	; 105
    82d8:	47 e1       	ldi	r20, 0x17	; 23
    82da:	5f e3       	ldi	r21, 0x3F	; 63
    82dc:	c5 01       	movw	r24, r10
    82de:	b4 01       	movw	r22, r8
    82e0:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    82e4:	a5 01       	movw	r20, r10
    82e6:	94 01       	movw	r18, r8
    82e8:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    82ec:	9b 01       	movw	r18, r22
    82ee:	ac 01       	movw	r20, r24
    82f0:	c7 01       	movw	r24, r14
    82f2:	b6 01       	movw	r22, r12
    82f4:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    82f8:	6b 01       	movw	r12, r22
    82fa:	7c 01       	movw	r14, r24
    82fc:	22 e0       	ldi	r18, 0x02	; 2
    82fe:	39 ed       	ldi	r19, 0xD9	; 217
    8300:	40 e2       	ldi	r20, 0x20	; 32
    8302:	51 e4       	ldi	r21, 0x41	; 65
    8304:	c5 01       	movw	r24, r10
    8306:	b4 01       	movw	r22, r8
    8308:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    830c:	9b 01       	movw	r18, r22
    830e:	ac 01       	movw	r20, r24
    8310:	c7 01       	movw	r24, r14
    8312:	b6 01       	movw	r22, r12
    8314:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8318:	20 e9       	ldi	r18, 0x90	; 144
    831a:	37 e1       	ldi	r19, 0x17	; 23
    831c:	4a e5       	ldi	r20, 0x5A	; 90
    831e:	52 e4       	ldi	r21, 0x42	; 66
    8320:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8324:	6b 01       	movw	r12, r22
    8326:	7c 01       	movw	r14, r24
    8328:	be 01       	movw	r22, r28
    832a:	dd 0f       	add	r29, r29
    832c:	88 0b       	sbc	r24, r24
    832e:	99 0b       	sbc	r25, r25
    8330:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    8334:	9b 01       	movw	r18, r22
    8336:	ac 01       	movw	r20, r24
    8338:	c7 01       	movw	r24, r14
    833a:	b6 01       	movw	r22, r12
    833c:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8340:	0c 94 05 4c 	jmp	0x980a	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    8344:	20 e0       	ldi	r18, 0x00	; 0
    8346:	30 e0       	ldi	r19, 0x00	; 0
    8348:	40 e4       	ldi	r20, 0x40	; 64
    834a:	51 e4       	ldi	r21, 0x41	; 65
    834c:	c7 01       	movw	r24, r14
    834e:	b6 01       	movw	r22, r12
    8350:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    8354:	18 16       	cp	r1, r24
    8356:	0c f0       	brlt	.+2      	; 0x835a <corectTrv+0x540>
    8358:	55 c0       	rjmp	.+170    	; 0x8404 <corectTrv+0x5ea>
    835a:	20 e0       	ldi	r18, 0x00	; 0
    835c:	30 e0       	ldi	r19, 0x00	; 0
    835e:	40 e5       	ldi	r20, 0x50	; 80
    8360:	51 e4       	ldi	r21, 0x41	; 65
    8362:	c7 01       	movw	r24, r14
    8364:	b6 01       	movw	r22, r12
    8366:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    836a:	18 16       	cp	r1, r24
    836c:	0c f4       	brge	.+2      	; 0x8370 <corectTrv+0x556>
    836e:	4a c0       	rjmp	.+148    	; 0x8404 <corectTrv+0x5ea>
		{
			return( 0.02485 * ds * ds * ds + 1.09724 * ds * ds + 17.05530 * ds + 89.43916)* k;
    8370:	2a e3       	ldi	r18, 0x3A	; 58
    8372:	32 e9       	ldi	r19, 0x92	; 146
    8374:	4b ec       	ldi	r20, 0xCB	; 203
    8376:	5c e3       	ldi	r21, 0x3C	; 60
    8378:	c5 01       	movw	r24, r10
    837a:	b4 01       	movw	r22, r8
    837c:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8380:	a5 01       	movw	r20, r10
    8382:	94 01       	movw	r18, r8
    8384:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8388:	a5 01       	movw	r20, r10
    838a:	94 01       	movw	r18, r8
    838c:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8390:	6b 01       	movw	r12, r22
    8392:	7c 01       	movw	r14, r24
    8394:	2c e5       	ldi	r18, 0x5C	; 92
    8396:	32 e7       	ldi	r19, 0x72	; 114
    8398:	4c e8       	ldi	r20, 0x8C	; 140
    839a:	5f e3       	ldi	r21, 0x3F	; 63
    839c:	c5 01       	movw	r24, r10
    839e:	b4 01       	movw	r22, r8
    83a0:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    83a4:	a5 01       	movw	r20, r10
    83a6:	94 01       	movw	r18, r8
    83a8:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    83ac:	9b 01       	movw	r18, r22
    83ae:	ac 01       	movw	r20, r24
    83b0:	c7 01       	movw	r24, r14
    83b2:	b6 01       	movw	r22, r12
    83b4:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    83b8:	6b 01       	movw	r12, r22
    83ba:	7c 01       	movw	r14, r24
    83bc:	21 e4       	ldi	r18, 0x41	; 65
    83be:	31 e7       	ldi	r19, 0x71	; 113
    83c0:	48 e8       	ldi	r20, 0x88	; 136
    83c2:	51 e4       	ldi	r21, 0x41	; 65
    83c4:	c5 01       	movw	r24, r10
    83c6:	b4 01       	movw	r22, r8
    83c8:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    83cc:	9b 01       	movw	r18, r22
    83ce:	ac 01       	movw	r20, r24
    83d0:	c7 01       	movw	r24, r14
    83d2:	b6 01       	movw	r22, r12
    83d4:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    83d8:	2a ed       	ldi	r18, 0xDA	; 218
    83da:	30 ee       	ldi	r19, 0xE0	; 224
    83dc:	42 eb       	ldi	r20, 0xB2	; 178
    83de:	52 e4       	ldi	r21, 0x42	; 66
    83e0:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    83e4:	6b 01       	movw	r12, r22
    83e6:	7c 01       	movw	r14, r24
    83e8:	be 01       	movw	r22, r28
    83ea:	dd 0f       	add	r29, r29
    83ec:	88 0b       	sbc	r24, r24
    83ee:	99 0b       	sbc	r25, r25
    83f0:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    83f4:	9b 01       	movw	r18, r22
    83f6:	ac 01       	movw	r20, r24
    83f8:	c7 01       	movw	r24, r14
    83fa:	b6 01       	movw	r22, r12
    83fc:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8400:	0c 94 05 4c 	jmp	0x980a	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    8404:	20 e0       	ldi	r18, 0x00	; 0
    8406:	30 e0       	ldi	r19, 0x00	; 0
    8408:	40 e5       	ldi	r20, 0x50	; 80
    840a:	51 e4       	ldi	r21, 0x41	; 65
    840c:	c7 01       	movw	r24, r14
    840e:	b6 01       	movw	r22, r12
    8410:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    8414:	18 16       	cp	r1, r24
    8416:	0c f0       	brlt	.+2      	; 0x841a <corectTrv+0x600>
    8418:	55 c0       	rjmp	.+170    	; 0x84c4 <corectTrv+0x6aa>
    841a:	20 e0       	ldi	r18, 0x00	; 0
    841c:	30 e0       	ldi	r19, 0x00	; 0
    841e:	40 e6       	ldi	r20, 0x60	; 96
    8420:	51 e4       	ldi	r21, 0x41	; 65
    8422:	c7 01       	movw	r24, r14
    8424:	b6 01       	movw	r22, r12
    8426:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    842a:	18 16       	cp	r1, r24
    842c:	0c f4       	brge	.+2      	; 0x8430 <corectTrv+0x616>
    842e:	4a c0       	rjmp	.+148    	; 0x84c4 <corectTrv+0x6aa>
		{
			return( 0.02257 * ds * ds * ds + 0.99967 * ds * ds + 15.71735 * ds + 86.11652)* k;
    8430:	28 eb       	ldi	r18, 0xB8	; 184
    8432:	34 ee       	ldi	r19, 0xE4	; 228
    8434:	48 eb       	ldi	r20, 0xB8	; 184
    8436:	5c e3       	ldi	r21, 0x3C	; 60
    8438:	c5 01       	movw	r24, r10
    843a:	b4 01       	movw	r22, r8
    843c:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8440:	a5 01       	movw	r20, r10
    8442:	94 01       	movw	r18, r8
    8444:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8448:	a5 01       	movw	r20, r10
    844a:	94 01       	movw	r18, r8
    844c:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8450:	6b 01       	movw	r12, r22
    8452:	7c 01       	movw	r14, r24
    8454:	20 e6       	ldi	r18, 0x60	; 96
    8456:	3a ee       	ldi	r19, 0xEA	; 234
    8458:	4f e7       	ldi	r20, 0x7F	; 127
    845a:	5f e3       	ldi	r21, 0x3F	; 63
    845c:	c5 01       	movw	r24, r10
    845e:	b4 01       	movw	r22, r8
    8460:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8464:	a5 01       	movw	r20, r10
    8466:	94 01       	movw	r18, r8
    8468:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    846c:	9b 01       	movw	r18, r22
    846e:	ac 01       	movw	r20, r24
    8470:	c7 01       	movw	r24, r14
    8472:	b6 01       	movw	r22, r12
    8474:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8478:	6b 01       	movw	r12, r22
    847a:	7c 01       	movw	r14, r24
    847c:	24 e4       	ldi	r18, 0x44	; 68
    847e:	3a e7       	ldi	r19, 0x7A	; 122
    8480:	4b e7       	ldi	r20, 0x7B	; 123
    8482:	51 e4       	ldi	r21, 0x41	; 65
    8484:	c5 01       	movw	r24, r10
    8486:	b4 01       	movw	r22, r8
    8488:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    848c:	9b 01       	movw	r18, r22
    848e:	ac 01       	movw	r20, r24
    8490:	c7 01       	movw	r24, r14
    8492:	b6 01       	movw	r22, r12
    8494:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8498:	29 ea       	ldi	r18, 0xA9	; 169
    849a:	3b e3       	ldi	r19, 0x3B	; 59
    849c:	4c ea       	ldi	r20, 0xAC	; 172
    849e:	52 e4       	ldi	r21, 0x42	; 66
    84a0:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    84a4:	6b 01       	movw	r12, r22
    84a6:	7c 01       	movw	r14, r24
    84a8:	be 01       	movw	r22, r28
    84aa:	dd 0f       	add	r29, r29
    84ac:	88 0b       	sbc	r24, r24
    84ae:	99 0b       	sbc	r25, r25
    84b0:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    84b4:	9b 01       	movw	r18, r22
    84b6:	ac 01       	movw	r20, r24
    84b8:	c7 01       	movw	r24, r14
    84ba:	b6 01       	movw	r22, r12
    84bc:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    84c0:	0c 94 05 4c 	jmp	0x980a	; 0x980a <corectTrv+0x19f0>
		}
		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    84c4:	20 e0       	ldi	r18, 0x00	; 0
    84c6:	30 e0       	ldi	r19, 0x00	; 0
    84c8:	40 e6       	ldi	r20, 0x60	; 96
    84ca:	51 e4       	ldi	r21, 0x41	; 65
    84cc:	c7 01       	movw	r24, r14
    84ce:	b6 01       	movw	r22, r12
    84d0:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    84d4:	18 16       	cp	r1, r24
    84d6:	0c f0       	brlt	.+2      	; 0x84da <corectTrv+0x6c0>
    84d8:	55 c0       	rjmp	.+170    	; 0x8584 <corectTrv+0x76a>
    84da:	20 e0       	ldi	r18, 0x00	; 0
    84dc:	30 e0       	ldi	r19, 0x00	; 0
    84de:	40 e7       	ldi	r20, 0x70	; 112
    84e0:	51 e4       	ldi	r21, 0x41	; 65
    84e2:	c7 01       	movw	r24, r14
    84e4:	b6 01       	movw	r22, r12
    84e6:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    84ea:	18 16       	cp	r1, r24
    84ec:	0c f4       	brge	.+2      	; 0x84f0 <corectTrv+0x6d6>
    84ee:	4a c0       	rjmp	.+148    	; 0x8584 <corectTrv+0x76a>
		{
			return( 0.02199 * ds * ds * ds + 0.99841 * ds * ds + 16.07877 * ds + 91.69972)* k;
    84f0:	2f e5       	ldi	r18, 0x5F	; 95
    84f2:	34 e2       	ldi	r19, 0x24	; 36
    84f4:	44 eb       	ldi	r20, 0xB4	; 180
    84f6:	5c e3       	ldi	r21, 0x3C	; 60
    84f8:	c5 01       	movw	r24, r10
    84fa:	b4 01       	movw	r22, r8
    84fc:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8500:	a5 01       	movw	r20, r10
    8502:	94 01       	movw	r18, r8
    8504:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8508:	a5 01       	movw	r20, r10
    850a:	94 01       	movw	r18, r8
    850c:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8510:	6b 01       	movw	r12, r22
    8512:	7c 01       	movw	r14, r24
    8514:	2c ec       	ldi	r18, 0xCC	; 204
    8516:	37 e9       	ldi	r19, 0x97	; 151
    8518:	4f e7       	ldi	r20, 0x7F	; 127
    851a:	5f e3       	ldi	r21, 0x3F	; 63
    851c:	c5 01       	movw	r24, r10
    851e:	b4 01       	movw	r22, r8
    8520:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8524:	a5 01       	movw	r20, r10
    8526:	94 01       	movw	r18, r8
    8528:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    852c:	9b 01       	movw	r18, r22
    852e:	ac 01       	movw	r20, r24
    8530:	c7 01       	movw	r24, r14
    8532:	b6 01       	movw	r22, r12
    8534:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8538:	6b 01       	movw	r12, r22
    853a:	7c 01       	movw	r14, r24
    853c:	22 e5       	ldi	r18, 0x52	; 82
    853e:	31 ea       	ldi	r19, 0xA1	; 161
    8540:	40 e8       	ldi	r20, 0x80	; 128
    8542:	51 e4       	ldi	r21, 0x41	; 65
    8544:	c5 01       	movw	r24, r10
    8546:	b4 01       	movw	r22, r8
    8548:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    854c:	9b 01       	movw	r18, r22
    854e:	ac 01       	movw	r20, r24
    8550:	c7 01       	movw	r24, r14
    8552:	b6 01       	movw	r22, r12
    8554:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8558:	22 e4       	ldi	r18, 0x42	; 66
    855a:	36 e6       	ldi	r19, 0x66	; 102
    855c:	47 eb       	ldi	r20, 0xB7	; 183
    855e:	52 e4       	ldi	r21, 0x42	; 66
    8560:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8564:	6b 01       	movw	r12, r22
    8566:	7c 01       	movw	r14, r24
    8568:	be 01       	movw	r22, r28
    856a:	dd 0f       	add	r29, r29
    856c:	88 0b       	sbc	r24, r24
    856e:	99 0b       	sbc	r25, r25
    8570:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    8574:	9b 01       	movw	r18, r22
    8576:	ac 01       	movw	r20, r24
    8578:	c7 01       	movw	r24, r14
    857a:	b6 01       	movw	r22, r12
    857c:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8580:	0c 94 05 4c 	jmp	0x980a	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    8584:	20 e0       	ldi	r18, 0x00	; 0
    8586:	30 e0       	ldi	r19, 0x00	; 0
    8588:	40 e7       	ldi	r20, 0x70	; 112
    858a:	51 e4       	ldi	r21, 0x41	; 65
    858c:	c7 01       	movw	r24, r14
    858e:	b6 01       	movw	r22, r12
    8590:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    8594:	18 16       	cp	r1, r24
    8596:	0c f0       	brlt	.+2      	; 0x859a <corectTrv+0x780>
    8598:	55 c0       	rjmp	.+170    	; 0x8644 <corectTrv+0x82a>
    859a:	20 e0       	ldi	r18, 0x00	; 0
    859c:	30 e0       	ldi	r19, 0x00	; 0
    859e:	40 e8       	ldi	r20, 0x80	; 128
    85a0:	51 e4       	ldi	r21, 0x41	; 65
    85a2:	c7 01       	movw	r24, r14
    85a4:	b6 01       	movw	r22, r12
    85a6:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    85aa:	18 16       	cp	r1, r24
    85ac:	0c f4       	brge	.+2      	; 0x85b0 <corectTrv+0x796>
    85ae:	4a c0       	rjmp	.+148    	; 0x8644 <corectTrv+0x82a>
		{
			return( 0.02293 * ds * ds * ds + 1.04454 * ds * ds + 16.79148 * ds + 97.65075)* k;
    85b0:	22 eb       	ldi	r18, 0xB2	; 178
    85b2:	37 ed       	ldi	r19, 0xD7	; 215
    85b4:	4b eb       	ldi	r20, 0xBB	; 187
    85b6:	5c e3       	ldi	r21, 0x3C	; 60
    85b8:	c5 01       	movw	r24, r10
    85ba:	b4 01       	movw	r22, r8
    85bc:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    85c0:	a5 01       	movw	r20, r10
    85c2:	94 01       	movw	r18, r8
    85c4:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    85c8:	a5 01       	movw	r20, r10
    85ca:	94 01       	movw	r18, r8
    85cc:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    85d0:	6b 01       	movw	r12, r22
    85d2:	7c 01       	movw	r14, r24
    85d4:	2d e7       	ldi	r18, 0x7D	; 125
    85d6:	33 eb       	ldi	r19, 0xB3	; 179
    85d8:	45 e8       	ldi	r20, 0x85	; 133
    85da:	5f e3       	ldi	r21, 0x3F	; 63
    85dc:	c5 01       	movw	r24, r10
    85de:	b4 01       	movw	r22, r8
    85e0:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    85e4:	a5 01       	movw	r20, r10
    85e6:	94 01       	movw	r18, r8
    85e8:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    85ec:	9b 01       	movw	r18, r22
    85ee:	ac 01       	movw	r20, r24
    85f0:	c7 01       	movw	r24, r14
    85f2:	b6 01       	movw	r22, r12
    85f4:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    85f8:	6b 01       	movw	r12, r22
    85fa:	7c 01       	movw	r14, r24
    85fc:	23 ef       	ldi	r18, 0xF3	; 243
    85fe:	34 e5       	ldi	r19, 0x54	; 84
    8600:	46 e8       	ldi	r20, 0x86	; 134
    8602:	51 e4       	ldi	r21, 0x41	; 65
    8604:	c5 01       	movw	r24, r10
    8606:	b4 01       	movw	r22, r8
    8608:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    860c:	9b 01       	movw	r18, r22
    860e:	ac 01       	movw	r20, r24
    8610:	c7 01       	movw	r24, r14
    8612:	b6 01       	movw	r22, r12
    8614:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8618:	2f e2       	ldi	r18, 0x2F	; 47
    861a:	3d e4       	ldi	r19, 0x4D	; 77
    861c:	43 ec       	ldi	r20, 0xC3	; 195
    861e:	52 e4       	ldi	r21, 0x42	; 66
    8620:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8624:	6b 01       	movw	r12, r22
    8626:	7c 01       	movw	r14, r24
    8628:	be 01       	movw	r22, r28
    862a:	dd 0f       	add	r29, r29
    862c:	88 0b       	sbc	r24, r24
    862e:	99 0b       	sbc	r25, r25
    8630:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    8634:	9b 01       	movw	r18, r22
    8636:	ac 01       	movw	r20, r24
    8638:	c7 01       	movw	r24, r14
    863a:	b6 01       	movw	r22, r12
    863c:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8640:	0c 94 05 4c 	jmp	0x980a	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 9)
    8644:	20 e0       	ldi	r18, 0x00	; 0
    8646:	30 e0       	ldi	r19, 0x00	; 0
    8648:	40 e8       	ldi	r20, 0x80	; 128
    864a:	51 e4       	ldi	r21, 0x41	; 65
    864c:	c7 01       	movw	r24, r14
    864e:	b6 01       	movw	r22, r12
    8650:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    8654:	18 16       	cp	r1, r24
    8656:	14 f0       	brlt	.+4      	; 0x865c <corectTrv+0x842>
    8658:	0c 94 f2 4b 	jmp	0x97e4	; 0x97e4 <corectTrv+0x19ca>
		{
			return( 0.01242 * ds * ds * ds + 0.55907 * ds * ds + 9.57142 * ds + 67.21499)* k;
    865c:	21 e4       	ldi	r18, 0x41	; 65
    865e:	3d e7       	ldi	r19, 0x7D	; 125
    8660:	4b e4       	ldi	r20, 0x4B	; 75
    8662:	5c e3       	ldi	r21, 0x3C	; 60
    8664:	c5 01       	movw	r24, r10
    8666:	b4 01       	movw	r22, r8
    8668:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    866c:	a5 01       	movw	r20, r10
    866e:	94 01       	movw	r18, r8
    8670:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8674:	a5 01       	movw	r20, r10
    8676:	94 01       	movw	r18, r8
    8678:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    867c:	6b 01       	movw	r12, r22
    867e:	7c 01       	movw	r14, r24
    8680:	26 e3       	ldi	r18, 0x36	; 54
    8682:	3f e1       	ldi	r19, 0x1F	; 31
    8684:	4f e0       	ldi	r20, 0x0F	; 15
    8686:	5f e3       	ldi	r21, 0x3F	; 63
    8688:	c5 01       	movw	r24, r10
    868a:	b4 01       	movw	r22, r8
    868c:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8690:	a5 01       	movw	r20, r10
    8692:	94 01       	movw	r18, r8
    8694:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8698:	9b 01       	movw	r18, r22
    869a:	ac 01       	movw	r20, r24
    869c:	c7 01       	movw	r24, r14
    869e:	b6 01       	movw	r22, r12
    86a0:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    86a4:	6b 01       	movw	r12, r22
    86a6:	7c 01       	movw	r14, r24
    86a8:	29 e8       	ldi	r18, 0x89	; 137
    86aa:	34 e2       	ldi	r19, 0x24	; 36
    86ac:	49 e1       	ldi	r20, 0x19	; 25
    86ae:	51 e4       	ldi	r21, 0x41	; 65
    86b0:	c5 01       	movw	r24, r10
    86b2:	b4 01       	movw	r22, r8
    86b4:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    86b8:	9b 01       	movw	r18, r22
    86ba:	ac 01       	movw	r20, r24
    86bc:	c7 01       	movw	r24, r14
    86be:	b6 01       	movw	r22, r12
    86c0:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    86c4:	23 e1       	ldi	r18, 0x13	; 19
    86c6:	3e e6       	ldi	r19, 0x6E	; 110
    86c8:	46 e8       	ldi	r20, 0x86	; 134
    86ca:	52 e4       	ldi	r21, 0x42	; 66
    86cc:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    86d0:	6b 01       	movw	r12, r22
    86d2:	7c 01       	movw	r14, r24
    86d4:	be 01       	movw	r22, r28
    86d6:	dd 0f       	add	r29, r29
    86d8:	88 0b       	sbc	r24, r24
    86da:	99 0b       	sbc	r25, r25
    86dc:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    86e0:	9b 01       	movw	r18, r22
    86e2:	ac 01       	movw	r20, r24
    86e4:	c7 01       	movw	r24, r14
    86e6:	b6 01       	movw	r22, r12
    86e8:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    86ec:	0c 94 05 4c 	jmp	0x980a	; 0x980a <corectTrv+0x19f0>
		}
	}

	else if (ds < 0 && ds >= -10)
    86f0:	20 e0       	ldi	r18, 0x00	; 0
    86f2:	30 e0       	ldi	r19, 0x00	; 0
    86f4:	a9 01       	movw	r20, r18
    86f6:	c5 01       	movw	r24, r10
    86f8:	b4 01       	movw	r22, r8
    86fa:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    86fe:	88 23       	and	r24, r24
    8700:	0c f0       	brlt	.+2      	; 0x8704 <corectTrv+0x8ea>
    8702:	d6 c3       	rjmp	.+1964   	; 0x8eb0 <corectTrv+0x1096>
    8704:	20 e0       	ldi	r18, 0x00	; 0
    8706:	30 e0       	ldi	r19, 0x00	; 0
    8708:	40 e2       	ldi	r20, 0x20	; 32
    870a:	51 ec       	ldi	r21, 0xC1	; 193
    870c:	c5 01       	movw	r24, r10
    870e:	b4 01       	movw	r22, r8
    8710:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    8714:	88 23       	and	r24, r24
    8716:	0c f4       	brge	.+2      	; 0x871a <corectTrv+0x900>
    8718:	cb c3       	rjmp	.+1942   	; 0x8eb0 <corectTrv+0x1096>
	{
		if (Superheat == SSet)
    871a:	20 e0       	ldi	r18, 0x00	; 0
    871c:	30 e0       	ldi	r19, 0x00	; 0
    871e:	40 ee       	ldi	r20, 0xE0	; 224
    8720:	50 e4       	ldi	r21, 0x40	; 64
    8722:	c7 01       	movw	r24, r14
    8724:	b6 01       	movw	r22, r12
    8726:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    872a:	81 11       	cpse	r24, r1
    872c:	4a c0       	rjmp	.+148    	; 0x87c2 <corectTrv+0x9a8>
		{
			return( 0.01259 * ds * ds * ds + 0.18896 * ds * ds + 2.12770 * ds - 0.01350)* k;
    872e:	2a e4       	ldi	r18, 0x4A	; 74
    8730:	36 e4       	ldi	r19, 0x46	; 70
    8732:	4e e4       	ldi	r20, 0x4E	; 78
    8734:	5c e3       	ldi	r21, 0x3C	; 60
    8736:	c5 01       	movw	r24, r10
    8738:	b4 01       	movw	r22, r8
    873a:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    873e:	a5 01       	movw	r20, r10
    8740:	94 01       	movw	r18, r8
    8742:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8746:	a5 01       	movw	r20, r10
    8748:	94 01       	movw	r18, r8
    874a:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    874e:	6b 01       	movw	r12, r22
    8750:	7c 01       	movw	r14, r24
    8752:	2b eb       	ldi	r18, 0xBB	; 187
    8754:	3e e7       	ldi	r19, 0x7E	; 126
    8756:	41 e4       	ldi	r20, 0x41	; 65
    8758:	5e e3       	ldi	r21, 0x3E	; 62
    875a:	c5 01       	movw	r24, r10
    875c:	b4 01       	movw	r22, r8
    875e:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8762:	a5 01       	movw	r20, r10
    8764:	94 01       	movw	r18, r8
    8766:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    876a:	9b 01       	movw	r18, r22
    876c:	ac 01       	movw	r20, r24
    876e:	c7 01       	movw	r24, r14
    8770:	b6 01       	movw	r22, r12
    8772:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8776:	6b 01       	movw	r12, r22
    8778:	7c 01       	movw	r14, r24
    877a:	2d e3       	ldi	r18, 0x3D	; 61
    877c:	3c e2       	ldi	r19, 0x2C	; 44
    877e:	48 e0       	ldi	r20, 0x08	; 8
    8780:	50 e4       	ldi	r21, 0x40	; 64
    8782:	c5 01       	movw	r24, r10
    8784:	b4 01       	movw	r22, r8
    8786:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    878a:	9b 01       	movw	r18, r22
    878c:	ac 01       	movw	r20, r24
    878e:	c7 01       	movw	r24, r14
    8790:	b6 01       	movw	r22, r12
    8792:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8796:	2b e1       	ldi	r18, 0x1B	; 27
    8798:	3f e2       	ldi	r19, 0x2F	; 47
    879a:	4d e5       	ldi	r20, 0x5D	; 93
    879c:	5c e3       	ldi	r21, 0x3C	; 60
    879e:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    87a2:	6b 01       	movw	r12, r22
    87a4:	7c 01       	movw	r14, r24
    87a6:	be 01       	movw	r22, r28
    87a8:	dd 0f       	add	r29, r29
    87aa:	88 0b       	sbc	r24, r24
    87ac:	99 0b       	sbc	r25, r25
    87ae:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    87b2:	9b 01       	movw	r18, r22
    87b4:	ac 01       	movw	r20, r24
    87b6:	c7 01       	movw	r24, r14
    87b8:	b6 01       	movw	r22, r12
    87ba:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    87be:	0c 94 05 4c 	jmp	0x980a	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    87c2:	20 e0       	ldi	r18, 0x00	; 0
    87c4:	30 e0       	ldi	r19, 0x00	; 0
    87c6:	40 ee       	ldi	r20, 0xE0	; 224
    87c8:	50 e4       	ldi	r21, 0x40	; 64
    87ca:	c7 01       	movw	r24, r14
    87cc:	b6 01       	movw	r22, r12
    87ce:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    87d2:	18 16       	cp	r1, r24
    87d4:	0c f0       	brlt	.+2      	; 0x87d8 <corectTrv+0x9be>
    87d6:	54 c0       	rjmp	.+168    	; 0x8880 <corectTrv+0xa66>
    87d8:	20 e0       	ldi	r18, 0x00	; 0
    87da:	30 e0       	ldi	r19, 0x00	; 0
    87dc:	40 e0       	ldi	r20, 0x00	; 0
    87de:	51 e4       	ldi	r21, 0x41	; 65
    87e0:	c7 01       	movw	r24, r14
    87e2:	b6 01       	movw	r22, r12
    87e4:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    87e8:	18 16       	cp	r1, r24
    87ea:	0c f4       	brge	.+2      	; 0x87ee <corectTrv+0x9d4>
    87ec:	49 c0       	rjmp	.+146    	; 0x8880 <corectTrv+0xa66>
		{
			return( 0.02252 * ds * ds * ds + 0.32376 * ds * ds + 2.48397 * ds + 3.72657)* k;
    87ee:	2d ed       	ldi	r18, 0xDD	; 221
    87f0:	3b e7       	ldi	r19, 0x7B	; 123
    87f2:	48 eb       	ldi	r20, 0xB8	; 184
    87f4:	5c e3       	ldi	r21, 0x3C	; 60
    87f6:	c5 01       	movw	r24, r10
    87f8:	b4 01       	movw	r22, r8
    87fa:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    87fe:	a5 01       	movw	r20, r10
    8800:	94 01       	movw	r18, r8
    8802:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8806:	a5 01       	movw	r20, r10
    8808:	94 01       	movw	r18, r8
    880a:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    880e:	6b 01       	movw	r12, r22
    8810:	7c 01       	movw	r14, r24
    8812:	2f ed       	ldi	r18, 0xDF	; 223
    8814:	33 ec       	ldi	r19, 0xC3	; 195
    8816:	45 ea       	ldi	r20, 0xA5	; 165
    8818:	5e e3       	ldi	r21, 0x3E	; 62
    881a:	c5 01       	movw	r24, r10
    881c:	b4 01       	movw	r22, r8
    881e:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8822:	a5 01       	movw	r20, r10
    8824:	94 01       	movw	r18, r8
    8826:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    882a:	9b 01       	movw	r18, r22
    882c:	ac 01       	movw	r20, r24
    882e:	c7 01       	movw	r24, r14
    8830:	b6 01       	movw	r22, r12
    8832:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8836:	6b 01       	movw	r12, r22
    8838:	7c 01       	movw	r14, r24
    883a:	2d e5       	ldi	r18, 0x5D	; 93
    883c:	39 ef       	ldi	r19, 0xF9	; 249
    883e:	4e e1       	ldi	r20, 0x1E	; 30
    8840:	50 e4       	ldi	r21, 0x40	; 64
    8842:	c5 01       	movw	r24, r10
    8844:	b4 01       	movw	r22, r8
    8846:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    884a:	9b 01       	movw	r18, r22
    884c:	ac 01       	movw	r20, r24
    884e:	c7 01       	movw	r24, r14
    8850:	b6 01       	movw	r22, r12
    8852:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8856:	2f e1       	ldi	r18, 0x1F	; 31
    8858:	30 e8       	ldi	r19, 0x80	; 128
    885a:	4e e6       	ldi	r20, 0x6E	; 110
    885c:	50 e4       	ldi	r21, 0x40	; 64
    885e:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8862:	6b 01       	movw	r12, r22
    8864:	7c 01       	movw	r14, r24
    8866:	be 01       	movw	r22, r28
    8868:	dd 0f       	add	r29, r29
    886a:	88 0b       	sbc	r24, r24
    886c:	99 0b       	sbc	r25, r25
    886e:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    8872:	9b 01       	movw	r18, r22
    8874:	ac 01       	movw	r20, r24
    8876:	c7 01       	movw	r24, r14
    8878:	b6 01       	movw	r22, r12
    887a:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    887e:	c5 c7       	rjmp	.+3978   	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    8880:	20 e0       	ldi	r18, 0x00	; 0
    8882:	30 e0       	ldi	r19, 0x00	; 0
    8884:	40 e0       	ldi	r20, 0x00	; 0
    8886:	51 e4       	ldi	r21, 0x41	; 65
    8888:	c7 01       	movw	r24, r14
    888a:	b6 01       	movw	r22, r12
    888c:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    8890:	18 16       	cp	r1, r24
    8892:	0c f0       	brlt	.+2      	; 0x8896 <corectTrv+0xa7c>
    8894:	54 c0       	rjmp	.+168    	; 0x893e <corectTrv+0xb24>
    8896:	20 e0       	ldi	r18, 0x00	; 0
    8898:	30 e0       	ldi	r19, 0x00	; 0
    889a:	40 e1       	ldi	r20, 0x10	; 16
    889c:	51 e4       	ldi	r21, 0x41	; 65
    889e:	c7 01       	movw	r24, r14
    88a0:	b6 01       	movw	r22, r12
    88a2:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    88a6:	18 16       	cp	r1, r24
    88a8:	0c f4       	brge	.+2      	; 0x88ac <corectTrv+0xa92>
    88aa:	49 c0       	rjmp	.+146    	; 0x893e <corectTrv+0xb24>
		{
			return( 0.02106 * ds * ds * ds + 0.30427 * ds * ds + 2.44311 * ds + 6.31417)* k;
    88ac:	25 e0       	ldi	r18, 0x05	; 5
    88ae:	36 e8       	ldi	r19, 0x86	; 134
    88b0:	4c ea       	ldi	r20, 0xAC	; 172
    88b2:	5c e3       	ldi	r21, 0x3C	; 60
    88b4:	c5 01       	movw	r24, r10
    88b6:	b4 01       	movw	r22, r8
    88b8:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    88bc:	a5 01       	movw	r20, r10
    88be:	94 01       	movw	r18, r8
    88c0:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    88c4:	a5 01       	movw	r20, r10
    88c6:	94 01       	movw	r18, r8
    88c8:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    88cc:	6b 01       	movw	r12, r22
    88ce:	7c 01       	movw	r14, r24
    88d0:	27 e4       	ldi	r18, 0x47	; 71
    88d2:	39 ec       	ldi	r19, 0xC9	; 201
    88d4:	4b e9       	ldi	r20, 0x9B	; 155
    88d6:	5e e3       	ldi	r21, 0x3E	; 62
    88d8:	c5 01       	movw	r24, r10
    88da:	b4 01       	movw	r22, r8
    88dc:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    88e0:	a5 01       	movw	r20, r10
    88e2:	94 01       	movw	r18, r8
    88e4:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    88e8:	9b 01       	movw	r18, r22
    88ea:	ac 01       	movw	r20, r24
    88ec:	c7 01       	movw	r24, r14
    88ee:	b6 01       	movw	r22, r12
    88f0:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    88f4:	6b 01       	movw	r12, r22
    88f6:	7c 01       	movw	r14, r24
    88f8:	2a ee       	ldi	r18, 0xEA	; 234
    88fa:	3b e5       	ldi	r19, 0x5B	; 91
    88fc:	4c e1       	ldi	r20, 0x1C	; 28
    88fe:	50 e4       	ldi	r21, 0x40	; 64
    8900:	c5 01       	movw	r24, r10
    8902:	b4 01       	movw	r22, r8
    8904:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8908:	9b 01       	movw	r18, r22
    890a:	ac 01       	movw	r20, r24
    890c:	c7 01       	movw	r24, r14
    890e:	b6 01       	movw	r22, r12
    8910:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8914:	2e ea       	ldi	r18, 0xAE	; 174
    8916:	3d e0       	ldi	r19, 0x0D	; 13
    8918:	4a ec       	ldi	r20, 0xCA	; 202
    891a:	50 e4       	ldi	r21, 0x40	; 64
    891c:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8920:	6b 01       	movw	r12, r22
    8922:	7c 01       	movw	r14, r24
    8924:	be 01       	movw	r22, r28
    8926:	dd 0f       	add	r29, r29
    8928:	88 0b       	sbc	r24, r24
    892a:	99 0b       	sbc	r25, r25
    892c:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    8930:	9b 01       	movw	r18, r22
    8932:	ac 01       	movw	r20, r24
    8934:	c7 01       	movw	r24, r14
    8936:	b6 01       	movw	r22, r12
    8938:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    893c:	66 c7       	rjmp	.+3788   	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    893e:	20 e0       	ldi	r18, 0x00	; 0
    8940:	30 e0       	ldi	r19, 0x00	; 0
    8942:	40 e1       	ldi	r20, 0x10	; 16
    8944:	51 e4       	ldi	r21, 0x41	; 65
    8946:	c7 01       	movw	r24, r14
    8948:	b6 01       	movw	r22, r12
    894a:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    894e:	18 16       	cp	r1, r24
    8950:	0c f0       	brlt	.+2      	; 0x8954 <corectTrv+0xb3a>
    8952:	54 c0       	rjmp	.+168    	; 0x89fc <corectTrv+0xbe2>
    8954:	20 e0       	ldi	r18, 0x00	; 0
    8956:	30 e0       	ldi	r19, 0x00	; 0
    8958:	40 e2       	ldi	r20, 0x20	; 32
    895a:	51 e4       	ldi	r21, 0x41	; 65
    895c:	c7 01       	movw	r24, r14
    895e:	b6 01       	movw	r22, r12
    8960:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    8964:	18 16       	cp	r1, r24
    8966:	0c f4       	brge	.+2      	; 0x896a <corectTrv+0xb50>
    8968:	49 c0       	rjmp	.+146    	; 0x89fc <corectTrv+0xbe2>
		{
			return( 0.02106 * ds * ds * ds + 0.32749 * ds * ds + 2.67528 * ds + 8.74842)* k;
    896a:	25 e0       	ldi	r18, 0x05	; 5
    896c:	36 e8       	ldi	r19, 0x86	; 134
    896e:	4c ea       	ldi	r20, 0xAC	; 172
    8970:	5c e3       	ldi	r21, 0x3C	; 60
    8972:	c5 01       	movw	r24, r10
    8974:	b4 01       	movw	r22, r8
    8976:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    897a:	a5 01       	movw	r20, r10
    897c:	94 01       	movw	r18, r8
    897e:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8982:	a5 01       	movw	r20, r10
    8984:	94 01       	movw	r18, r8
    8986:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    898a:	6b 01       	movw	r12, r22
    898c:	7c 01       	movw	r14, r24
    898e:	25 ec       	ldi	r18, 0xC5	; 197
    8990:	3c ea       	ldi	r19, 0xAC	; 172
    8992:	47 ea       	ldi	r20, 0xA7	; 167
    8994:	5e e3       	ldi	r21, 0x3E	; 62
    8996:	c5 01       	movw	r24, r10
    8998:	b4 01       	movw	r22, r8
    899a:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    899e:	a5 01       	movw	r20, r10
    89a0:	94 01       	movw	r18, r8
    89a2:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    89a6:	9b 01       	movw	r18, r22
    89a8:	ac 01       	movw	r20, r24
    89aa:	c7 01       	movw	r24, r14
    89ac:	b6 01       	movw	r22, r12
    89ae:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    89b2:	6b 01       	movw	r12, r22
    89b4:	7c 01       	movw	r14, r24
    89b6:	2a ec       	ldi	r18, 0xCA	; 202
    89b8:	37 e3       	ldi	r19, 0x37	; 55
    89ba:	4b e2       	ldi	r20, 0x2B	; 43
    89bc:	50 e4       	ldi	r21, 0x40	; 64
    89be:	c5 01       	movw	r24, r10
    89c0:	b4 01       	movw	r22, r8
    89c2:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    89c6:	9b 01       	movw	r18, r22
    89c8:	ac 01       	movw	r20, r24
    89ca:	c7 01       	movw	r24, r14
    89cc:	b6 01       	movw	r22, r12
    89ce:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    89d2:	27 e8       	ldi	r18, 0x87	; 135
    89d4:	39 ef       	ldi	r19, 0xF9	; 249
    89d6:	4b e0       	ldi	r20, 0x0B	; 11
    89d8:	51 e4       	ldi	r21, 0x41	; 65
    89da:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    89de:	6b 01       	movw	r12, r22
    89e0:	7c 01       	movw	r14, r24
    89e2:	be 01       	movw	r22, r28
    89e4:	dd 0f       	add	r29, r29
    89e6:	88 0b       	sbc	r24, r24
    89e8:	99 0b       	sbc	r25, r25
    89ea:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    89ee:	9b 01       	movw	r18, r22
    89f0:	ac 01       	movw	r20, r24
    89f2:	c7 01       	movw	r24, r14
    89f4:	b6 01       	movw	r22, r12
    89f6:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    89fa:	07 c7       	rjmp	.+3598   	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    89fc:	20 e0       	ldi	r18, 0x00	; 0
    89fe:	30 e0       	ldi	r19, 0x00	; 0
    8a00:	40 e2       	ldi	r20, 0x20	; 32
    8a02:	51 e4       	ldi	r21, 0x41	; 65
    8a04:	c7 01       	movw	r24, r14
    8a06:	b6 01       	movw	r22, r12
    8a08:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    8a0c:	18 16       	cp	r1, r24
    8a0e:	0c f0       	brlt	.+2      	; 0x8a12 <corectTrv+0xbf8>
    8a10:	54 c0       	rjmp	.+168    	; 0x8aba <corectTrv+0xca0>
    8a12:	20 e0       	ldi	r18, 0x00	; 0
    8a14:	30 e0       	ldi	r19, 0x00	; 0
    8a16:	40 e3       	ldi	r20, 0x30	; 48
    8a18:	51 e4       	ldi	r21, 0x41	; 65
    8a1a:	c7 01       	movw	r24, r14
    8a1c:	b6 01       	movw	r22, r12
    8a1e:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    8a22:	18 16       	cp	r1, r24
    8a24:	0c f4       	brge	.+2      	; 0x8a28 <corectTrv+0xc0e>
    8a26:	49 c0       	rjmp	.+146    	; 0x8aba <corectTrv+0xca0>
		{
			return( 0.02252 * ds * ds * ds + 0.35182 * ds * ds + 2.76462 * ds + 11.25664)* k;
    8a28:	2d ed       	ldi	r18, 0xDD	; 221
    8a2a:	3b e7       	ldi	r19, 0x7B	; 123
    8a2c:	48 eb       	ldi	r20, 0xB8	; 184
    8a2e:	5c e3       	ldi	r21, 0x3C	; 60
    8a30:	c5 01       	movw	r24, r10
    8a32:	b4 01       	movw	r22, r8
    8a34:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8a38:	a5 01       	movw	r20, r10
    8a3a:	94 01       	movw	r18, r8
    8a3c:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8a40:	a5 01       	movw	r20, r10
    8a42:	94 01       	movw	r18, r8
    8a44:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8a48:	6b 01       	movw	r12, r22
    8a4a:	7c 01       	movw	r14, r24
    8a4c:	20 ec       	ldi	r18, 0xC0	; 192
    8a4e:	31 e2       	ldi	r19, 0x21	; 33
    8a50:	44 eb       	ldi	r20, 0xB4	; 180
    8a52:	5e e3       	ldi	r21, 0x3E	; 62
    8a54:	c5 01       	movw	r24, r10
    8a56:	b4 01       	movw	r22, r8
    8a58:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8a5c:	a5 01       	movw	r20, r10
    8a5e:	94 01       	movw	r18, r8
    8a60:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8a64:	9b 01       	movw	r18, r22
    8a66:	ac 01       	movw	r20, r24
    8a68:	c7 01       	movw	r24, r14
    8a6a:	b6 01       	movw	r22, r12
    8a6c:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8a70:	6b 01       	movw	r12, r22
    8a72:	7c 01       	movw	r14, r24
    8a74:	29 e8       	ldi	r18, 0x89	; 137
    8a76:	3f ee       	ldi	r19, 0xEF	; 239
    8a78:	40 e3       	ldi	r20, 0x30	; 48
    8a7a:	50 e4       	ldi	r21, 0x40	; 64
    8a7c:	c5 01       	movw	r24, r10
    8a7e:	b4 01       	movw	r22, r8
    8a80:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8a84:	9b 01       	movw	r18, r22
    8a86:	ac 01       	movw	r20, r24
    8a88:	c7 01       	movw	r24, r14
    8a8a:	b6 01       	movw	r22, r12
    8a8c:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8a90:	23 e3       	ldi	r18, 0x33	; 51
    8a92:	3b e1       	ldi	r19, 0x1B	; 27
    8a94:	44 e3       	ldi	r20, 0x34	; 52
    8a96:	51 e4       	ldi	r21, 0x41	; 65
    8a98:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8a9c:	6b 01       	movw	r12, r22
    8a9e:	7c 01       	movw	r14, r24
    8aa0:	be 01       	movw	r22, r28
    8aa2:	dd 0f       	add	r29, r29
    8aa4:	88 0b       	sbc	r24, r24
    8aa6:	99 0b       	sbc	r25, r25
    8aa8:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    8aac:	9b 01       	movw	r18, r22
    8aae:	ac 01       	movw	r20, r24
    8ab0:	c7 01       	movw	r24, r14
    8ab2:	b6 01       	movw	r22, r12
    8ab4:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8ab8:	a8 c6       	rjmp	.+3408   	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    8aba:	20 e0       	ldi	r18, 0x00	; 0
    8abc:	30 e0       	ldi	r19, 0x00	; 0
    8abe:	40 e3       	ldi	r20, 0x30	; 48
    8ac0:	51 e4       	ldi	r21, 0x41	; 65
    8ac2:	c7 01       	movw	r24, r14
    8ac4:	b6 01       	movw	r22, r12
    8ac6:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    8aca:	18 16       	cp	r1, r24
    8acc:	0c f0       	brlt	.+2      	; 0x8ad0 <corectTrv+0xcb6>
    8ace:	54 c0       	rjmp	.+168    	; 0x8b78 <corectTrv+0xd5e>
    8ad0:	20 e0       	ldi	r18, 0x00	; 0
    8ad2:	30 e0       	ldi	r19, 0x00	; 0
    8ad4:	40 e4       	ldi	r20, 0x40	; 64
    8ad6:	51 e4       	ldi	r21, 0x41	; 65
    8ad8:	c7 01       	movw	r24, r14
    8ada:	b6 01       	movw	r22, r12
    8adc:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    8ae0:	18 16       	cp	r1, r24
    8ae2:	0c f4       	brge	.+2      	; 0x8ae6 <corectTrv+0xccc>
    8ae4:	49 c0       	rjmp	.+146    	; 0x8b78 <corectTrv+0xd5e>
		{
			return( 0.01251 * ds * ds * ds + 0.18754 * ds * ds + 2.12069 * ds + 14.98441)* k;
    8ae6:	2e eb       	ldi	r18, 0xBE	; 190
    8ae8:	36 ef       	ldi	r19, 0xF6	; 246
    8aea:	4c e4       	ldi	r20, 0x4C	; 76
    8aec:	5c e3       	ldi	r21, 0x3C	; 60
    8aee:	c5 01       	movw	r24, r10
    8af0:	b4 01       	movw	r22, r8
    8af2:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8af6:	a5 01       	movw	r20, r10
    8af8:	94 01       	movw	r18, r8
    8afa:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8afe:	a5 01       	movw	r20, r10
    8b00:	94 01       	movw	r18, r8
    8b02:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8b06:	6b 01       	movw	r12, r22
    8b08:	7c 01       	movw	r14, r24
    8b0a:	2c e7       	ldi	r18, 0x7C	; 124
    8b0c:	3a e0       	ldi	r19, 0x0A	; 10
    8b0e:	40 e4       	ldi	r20, 0x40	; 64
    8b10:	5e e3       	ldi	r21, 0x3E	; 62
    8b12:	c5 01       	movw	r24, r10
    8b14:	b4 01       	movw	r22, r8
    8b16:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8b1a:	a5 01       	movw	r20, r10
    8b1c:	94 01       	movw	r18, r8
    8b1e:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8b22:	9b 01       	movw	r18, r22
    8b24:	ac 01       	movw	r20, r24
    8b26:	c7 01       	movw	r24, r14
    8b28:	b6 01       	movw	r22, r12
    8b2a:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8b2e:	6b 01       	movw	r12, r22
    8b30:	7c 01       	movw	r14, r24
    8b32:	23 e6       	ldi	r18, 0x63	; 99
    8b34:	39 eb       	ldi	r19, 0xB9	; 185
    8b36:	47 e0       	ldi	r20, 0x07	; 7
    8b38:	50 e4       	ldi	r21, 0x40	; 64
    8b3a:	c5 01       	movw	r24, r10
    8b3c:	b4 01       	movw	r22, r8
    8b3e:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8b42:	9b 01       	movw	r18, r22
    8b44:	ac 01       	movw	r20, r24
    8b46:	c7 01       	movw	r24, r14
    8b48:	b6 01       	movw	r22, r12
    8b4a:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8b4e:	25 e2       	ldi	r18, 0x25	; 37
    8b50:	30 ec       	ldi	r19, 0xC0	; 192
    8b52:	4f e6       	ldi	r20, 0x6F	; 111
    8b54:	51 e4       	ldi	r21, 0x41	; 65
    8b56:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8b5a:	6b 01       	movw	r12, r22
    8b5c:	7c 01       	movw	r14, r24
    8b5e:	be 01       	movw	r22, r28
    8b60:	dd 0f       	add	r29, r29
    8b62:	88 0b       	sbc	r24, r24
    8b64:	99 0b       	sbc	r25, r25
    8b66:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    8b6a:	9b 01       	movw	r18, r22
    8b6c:	ac 01       	movw	r20, r24
    8b6e:	c7 01       	movw	r24, r14
    8b70:	b6 01       	movw	r22, r12
    8b72:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8b76:	49 c6       	rjmp	.+3218   	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    8b78:	20 e0       	ldi	r18, 0x00	; 0
    8b7a:	30 e0       	ldi	r19, 0x00	; 0
    8b7c:	40 e4       	ldi	r20, 0x40	; 64
    8b7e:	51 e4       	ldi	r21, 0x41	; 65
    8b80:	c7 01       	movw	r24, r14
    8b82:	b6 01       	movw	r22, r12
    8b84:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    8b88:	18 16       	cp	r1, r24
    8b8a:	dc f5       	brge	.+118    	; 0x8c02 <corectTrv+0xde8>
    8b8c:	20 e0       	ldi	r18, 0x00	; 0
    8b8e:	30 e0       	ldi	r19, 0x00	; 0
    8b90:	40 e5       	ldi	r20, 0x50	; 80
    8b92:	51 e4       	ldi	r21, 0x41	; 65
    8b94:	c7 01       	movw	r24, r14
    8b96:	b6 01       	movw	r22, r12
    8b98:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    8b9c:	18 16       	cp	r1, r24
    8b9e:	8c f1       	brlt	.+98     	; 0x8c02 <corectTrv+0xde8>
		{
			return(0.062 * ds * ds + 1.818 * ds + 15.22)* k;
    8ba0:	26 eb       	ldi	r18, 0xB6	; 182
    8ba2:	33 ef       	ldi	r19, 0xF3	; 243
    8ba4:	4d e7       	ldi	r20, 0x7D	; 125
    8ba6:	5d e3       	ldi	r21, 0x3D	; 61
    8ba8:	c5 01       	movw	r24, r10
    8baa:	b4 01       	movw	r22, r8
    8bac:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8bb0:	a5 01       	movw	r20, r10
    8bb2:	94 01       	movw	r18, r8
    8bb4:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8bb8:	6b 01       	movw	r12, r22
    8bba:	7c 01       	movw	r14, r24
    8bbc:	29 e3       	ldi	r18, 0x39	; 57
    8bbe:	34 eb       	ldi	r19, 0xB4	; 180
    8bc0:	48 ee       	ldi	r20, 0xE8	; 232
    8bc2:	5f e3       	ldi	r21, 0x3F	; 63
    8bc4:	c5 01       	movw	r24, r10
    8bc6:	b4 01       	movw	r22, r8
    8bc8:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8bcc:	9b 01       	movw	r18, r22
    8bce:	ac 01       	movw	r20, r24
    8bd0:	c7 01       	movw	r24, r14
    8bd2:	b6 01       	movw	r22, r12
    8bd4:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8bd8:	2f e1       	ldi	r18, 0x1F	; 31
    8bda:	35 e8       	ldi	r19, 0x85	; 133
    8bdc:	43 e7       	ldi	r20, 0x73	; 115
    8bde:	51 e4       	ldi	r21, 0x41	; 65
    8be0:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8be4:	6b 01       	movw	r12, r22
    8be6:	7c 01       	movw	r14, r24
    8be8:	be 01       	movw	r22, r28
    8bea:	dd 0f       	add	r29, r29
    8bec:	88 0b       	sbc	r24, r24
    8bee:	99 0b       	sbc	r25, r25
    8bf0:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    8bf4:	9b 01       	movw	r18, r22
    8bf6:	ac 01       	movw	r20, r24
    8bf8:	c7 01       	movw	r24, r14
    8bfa:	b6 01       	movw	r22, r12
    8bfc:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8c00:	04 c6       	rjmp	.+3080   	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    8c02:	20 e0       	ldi	r18, 0x00	; 0
    8c04:	30 e0       	ldi	r19, 0x00	; 0
    8c06:	40 e5       	ldi	r20, 0x50	; 80
    8c08:	51 e4       	ldi	r21, 0x41	; 65
    8c0a:	c7 01       	movw	r24, r14
    8c0c:	b6 01       	movw	r22, r12
    8c0e:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    8c12:	18 16       	cp	r1, r24
    8c14:	dc f5       	brge	.+118    	; 0x8c8c <corectTrv+0xe72>
    8c16:	20 e0       	ldi	r18, 0x00	; 0
    8c18:	30 e0       	ldi	r19, 0x00	; 0
    8c1a:	40 e6       	ldi	r20, 0x60	; 96
    8c1c:	51 e4       	ldi	r21, 0x41	; 65
    8c1e:	c7 01       	movw	r24, r14
    8c20:	b6 01       	movw	r22, r12
    8c22:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    8c26:	18 16       	cp	r1, r24
    8c28:	8c f1       	brlt	.+98     	; 0x8c8c <corectTrv+0xe72>
		{
			return( 0.097 * ds * ds + 1.941 * ds + 16.00)* k;
    8c2a:	20 ef       	ldi	r18, 0xF0	; 240
    8c2c:	37 ea       	ldi	r19, 0xA7	; 167
    8c2e:	46 ec       	ldi	r20, 0xC6	; 198
    8c30:	5d e3       	ldi	r21, 0x3D	; 61
    8c32:	c5 01       	movw	r24, r10
    8c34:	b4 01       	movw	r22, r8
    8c36:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8c3a:	a5 01       	movw	r20, r10
    8c3c:	94 01       	movw	r18, r8
    8c3e:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8c42:	6b 01       	movw	r12, r22
    8c44:	7c 01       	movw	r14, r24
    8c46:	20 eb       	ldi	r18, 0xB0	; 176
    8c48:	32 e7       	ldi	r19, 0x72	; 114
    8c4a:	48 ef       	ldi	r20, 0xF8	; 248
    8c4c:	5f e3       	ldi	r21, 0x3F	; 63
    8c4e:	c5 01       	movw	r24, r10
    8c50:	b4 01       	movw	r22, r8
    8c52:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8c56:	9b 01       	movw	r18, r22
    8c58:	ac 01       	movw	r20, r24
    8c5a:	c7 01       	movw	r24, r14
    8c5c:	b6 01       	movw	r22, r12
    8c5e:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8c62:	20 e0       	ldi	r18, 0x00	; 0
    8c64:	30 e0       	ldi	r19, 0x00	; 0
    8c66:	40 e8       	ldi	r20, 0x80	; 128
    8c68:	51 e4       	ldi	r21, 0x41	; 65
    8c6a:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8c6e:	6b 01       	movw	r12, r22
    8c70:	7c 01       	movw	r14, r24
    8c72:	be 01       	movw	r22, r28
    8c74:	dd 0f       	add	r29, r29
    8c76:	88 0b       	sbc	r24, r24
    8c78:	99 0b       	sbc	r25, r25
    8c7a:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    8c7e:	9b 01       	movw	r18, r22
    8c80:	ac 01       	movw	r20, r24
    8c82:	c7 01       	movw	r24, r14
    8c84:	b6 01       	movw	r22, r12
    8c86:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8c8a:	bf c5       	rjmp	.+2942   	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    8c8c:	20 e0       	ldi	r18, 0x00	; 0
    8c8e:	30 e0       	ldi	r19, 0x00	; 0
    8c90:	40 e6       	ldi	r20, 0x60	; 96
    8c92:	51 e4       	ldi	r21, 0x41	; 65
    8c94:	c7 01       	movw	r24, r14
    8c96:	b6 01       	movw	r22, r12
    8c98:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    8c9c:	18 16       	cp	r1, r24
    8c9e:	0c f0       	brlt	.+2      	; 0x8ca2 <corectTrv+0xe88>
    8ca0:	54 c0       	rjmp	.+168    	; 0x8d4a <corectTrv+0xf30>
    8ca2:	20 e0       	ldi	r18, 0x00	; 0
    8ca4:	30 e0       	ldi	r19, 0x00	; 0
    8ca6:	40 e7       	ldi	r20, 0x70	; 112
    8ca8:	51 e4       	ldi	r21, 0x41	; 65
    8caa:	c7 01       	movw	r24, r14
    8cac:	b6 01       	movw	r22, r12
    8cae:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    8cb2:	18 16       	cp	r1, r24
    8cb4:	0c f4       	brge	.+2      	; 0x8cb8 <corectTrv+0xe9e>
    8cb6:	49 c0       	rjmp	.+146    	; 0x8d4a <corectTrv+0xf30>
		{
			return( 0.01598 * ds * ds * ds + 0.35913 * ds * ds + 2.90559 * ds + 17.70294)* k;
    8cb8:	2d e7       	ldi	r18, 0x7D	; 125
    8cba:	38 ee       	ldi	r19, 0xE8	; 232
    8cbc:	42 e8       	ldi	r20, 0x82	; 130
    8cbe:	5c e3       	ldi	r21, 0x3C	; 60
    8cc0:	c5 01       	movw	r24, r10
    8cc2:	b4 01       	movw	r22, r8
    8cc4:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8cc8:	a5 01       	movw	r20, r10
    8cca:	94 01       	movw	r18, r8
    8ccc:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8cd0:	a5 01       	movw	r20, r10
    8cd2:	94 01       	movw	r18, r8
    8cd4:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8cd8:	6b 01       	movw	r12, r22
    8cda:	7c 01       	movw	r14, r24
    8cdc:	23 ee       	ldi	r18, 0xE3	; 227
    8cde:	3f ed       	ldi	r19, 0xDF	; 223
    8ce0:	47 eb       	ldi	r20, 0xB7	; 183
    8ce2:	5e e3       	ldi	r21, 0x3E	; 62
    8ce4:	c5 01       	movw	r24, r10
    8ce6:	b4 01       	movw	r22, r8
    8ce8:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8cec:	a5 01       	movw	r20, r10
    8cee:	94 01       	movw	r18, r8
    8cf0:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8cf4:	9b 01       	movw	r18, r22
    8cf6:	ac 01       	movw	r20, r24
    8cf8:	c7 01       	movw	r24, r14
    8cfa:	b6 01       	movw	r22, r12
    8cfc:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8d00:	6b 01       	movw	r12, r22
    8d02:	7c 01       	movw	r14, r24
    8d04:	20 e3       	ldi	r18, 0x30	; 48
    8d06:	35 ef       	ldi	r19, 0xF5	; 245
    8d08:	49 e3       	ldi	r20, 0x39	; 57
    8d0a:	50 e4       	ldi	r21, 0x40	; 64
    8d0c:	c5 01       	movw	r24, r10
    8d0e:	b4 01       	movw	r22, r8
    8d10:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8d14:	9b 01       	movw	r18, r22
    8d16:	ac 01       	movw	r20, r24
    8d18:	c7 01       	movw	r24, r14
    8d1a:	b6 01       	movw	r22, r12
    8d1c:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8d20:	2f e9       	ldi	r18, 0x9F	; 159
    8d22:	3f e9       	ldi	r19, 0x9F	; 159
    8d24:	4d e8       	ldi	r20, 0x8D	; 141
    8d26:	51 e4       	ldi	r21, 0x41	; 65
    8d28:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8d2c:	6b 01       	movw	r12, r22
    8d2e:	7c 01       	movw	r14, r24
    8d30:	be 01       	movw	r22, r28
    8d32:	dd 0f       	add	r29, r29
    8d34:	88 0b       	sbc	r24, r24
    8d36:	99 0b       	sbc	r25, r25
    8d38:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    8d3c:	9b 01       	movw	r18, r22
    8d3e:	ac 01       	movw	r20, r24
    8d40:	c7 01       	movw	r24, r14
    8d42:	b6 01       	movw	r22, r12
    8d44:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8d48:	60 c5       	rjmp	.+2752   	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    8d4a:	20 e0       	ldi	r18, 0x00	; 0
    8d4c:	30 e0       	ldi	r19, 0x00	; 0
    8d4e:	40 e7       	ldi	r20, 0x70	; 112
    8d50:	51 e4       	ldi	r21, 0x41	; 65
    8d52:	c7 01       	movw	r24, r14
    8d54:	b6 01       	movw	r22, r12
    8d56:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    8d5a:	18 16       	cp	r1, r24
    8d5c:	0c f0       	brlt	.+2      	; 0x8d60 <corectTrv+0xf46>
    8d5e:	54 c0       	rjmp	.+168    	; 0x8e08 <corectTrv+0xfee>
    8d60:	20 e0       	ldi	r18, 0x00	; 0
    8d62:	30 e0       	ldi	r19, 0x00	; 0
    8d64:	40 e8       	ldi	r20, 0x80	; 128
    8d66:	51 e4       	ldi	r21, 0x41	; 65
    8d68:	c7 01       	movw	r24, r14
    8d6a:	b6 01       	movw	r22, r12
    8d6c:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    8d70:	18 16       	cp	r1, r24
    8d72:	0c f4       	brge	.+2      	; 0x8d76 <corectTrv+0xf5c>
    8d74:	49 c0       	rjmp	.+146    	; 0x8e08 <corectTrv+0xfee>
		{
			return( 0.02358 * ds * ds * ds + 0.48252 * ds * ds + 3.36313 * ds + 20.09441)* k;
    8d76:	28 ed       	ldi	r18, 0xD8	; 216
    8d78:	3a e2       	ldi	r19, 0x2A	; 42
    8d7a:	41 ec       	ldi	r20, 0xC1	; 193
    8d7c:	5c e3       	ldi	r21, 0x3C	; 60
    8d7e:	c5 01       	movw	r24, r10
    8d80:	b4 01       	movw	r22, r8
    8d82:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8d86:	a5 01       	movw	r20, r10
    8d88:	94 01       	movw	r18, r8
    8d8a:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8d8e:	a5 01       	movw	r20, r10
    8d90:	94 01       	movw	r18, r8
    8d92:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8d96:	6b 01       	movw	r12, r22
    8d98:	7c 01       	movw	r14, r24
    8d9a:	2d ed       	ldi	r18, 0xDD	; 221
    8d9c:	3c e0       	ldi	r19, 0x0C	; 12
    8d9e:	47 ef       	ldi	r20, 0xF7	; 247
    8da0:	5e e3       	ldi	r21, 0x3E	; 62
    8da2:	c5 01       	movw	r24, r10
    8da4:	b4 01       	movw	r22, r8
    8da6:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8daa:	a5 01       	movw	r20, r10
    8dac:	94 01       	movw	r18, r8
    8dae:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8db2:	9b 01       	movw	r18, r22
    8db4:	ac 01       	movw	r20, r24
    8db6:	c7 01       	movw	r24, r14
    8db8:	b6 01       	movw	r22, r12
    8dba:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8dbe:	6b 01       	movw	r12, r22
    8dc0:	7c 01       	movw	r14, r24
    8dc2:	26 e8       	ldi	r18, 0x86	; 134
    8dc4:	3d e3       	ldi	r19, 0x3D	; 61
    8dc6:	47 e5       	ldi	r20, 0x57	; 87
    8dc8:	50 e4       	ldi	r21, 0x40	; 64
    8dca:	c5 01       	movw	r24, r10
    8dcc:	b4 01       	movw	r22, r8
    8dce:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8dd2:	9b 01       	movw	r18, r22
    8dd4:	ac 01       	movw	r20, r24
    8dd6:	c7 01       	movw	r24, r14
    8dd8:	b6 01       	movw	r22, r12
    8dda:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8dde:	2a e5       	ldi	r18, 0x5A	; 90
    8de0:	31 ec       	ldi	r19, 0xC1	; 193
    8de2:	40 ea       	ldi	r20, 0xA0	; 160
    8de4:	51 e4       	ldi	r21, 0x41	; 65
    8de6:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8dea:	6b 01       	movw	r12, r22
    8dec:	7c 01       	movw	r14, r24
    8dee:	be 01       	movw	r22, r28
    8df0:	dd 0f       	add	r29, r29
    8df2:	88 0b       	sbc	r24, r24
    8df4:	99 0b       	sbc	r25, r25
    8df6:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    8dfa:	9b 01       	movw	r18, r22
    8dfc:	ac 01       	movw	r20, r24
    8dfe:	c7 01       	movw	r24, r14
    8e00:	b6 01       	movw	r22, r12
    8e02:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8e06:	01 c5       	rjmp	.+2562   	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 9)
    8e08:	20 e0       	ldi	r18, 0x00	; 0
    8e0a:	30 e0       	ldi	r19, 0x00	; 0
    8e0c:	40 e8       	ldi	r20, 0x80	; 128
    8e0e:	51 e4       	ldi	r21, 0x41	; 65
    8e10:	c7 01       	movw	r24, r14
    8e12:	b6 01       	movw	r22, r12
    8e14:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    8e18:	18 16       	cp	r1, r24
    8e1a:	0c f0       	brlt	.+2      	; 0x8e1e <corectTrv+0x1004>
    8e1c:	e7 c4       	rjmp	.+2510   	; 0x97ec <corectTrv+0x19d2>
		{
			return( 0.01076 * ds * ds * ds + 0.28823 * ds * ds + 2.82362 * ds + 25.08042)* k;
    8e1e:	26 eb       	ldi	r18, 0xB6	; 182
    8e20:	3a e4       	ldi	r19, 0x4A	; 74
    8e22:	40 e3       	ldi	r20, 0x30	; 48
    8e24:	5c e3       	ldi	r21, 0x3C	; 60
    8e26:	c5 01       	movw	r24, r10
    8e28:	b4 01       	movw	r22, r8
    8e2a:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8e2e:	a5 01       	movw	r20, r10
    8e30:	94 01       	movw	r18, r8
    8e32:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8e36:	a5 01       	movw	r20, r10
    8e38:	94 01       	movw	r18, r8
    8e3a:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8e3e:	6b 01       	movw	r12, r22
    8e40:	7c 01       	movw	r14, r24
    8e42:	22 ee       	ldi	r18, 0xE2	; 226
    8e44:	32 e9       	ldi	r19, 0x92	; 146
    8e46:	43 e9       	ldi	r20, 0x93	; 147
    8e48:	5e e3       	ldi	r21, 0x3E	; 62
    8e4a:	c5 01       	movw	r24, r10
    8e4c:	b4 01       	movw	r22, r8
    8e4e:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8e52:	a5 01       	movw	r20, r10
    8e54:	94 01       	movw	r18, r8
    8e56:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8e5a:	9b 01       	movw	r18, r22
    8e5c:	ac 01       	movw	r20, r24
    8e5e:	c7 01       	movw	r24, r14
    8e60:	b6 01       	movw	r22, r12
    8e62:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8e66:	6b 01       	movw	r12, r22
    8e68:	7c 01       	movw	r14, r24
    8e6a:	21 e3       	ldi	r18, 0x31	; 49
    8e6c:	36 eb       	ldi	r19, 0xB6	; 182
    8e6e:	44 e3       	ldi	r20, 0x34	; 52
    8e70:	50 e4       	ldi	r21, 0x40	; 64
    8e72:	c5 01       	movw	r24, r10
    8e74:	b4 01       	movw	r22, r8
    8e76:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8e7a:	9b 01       	movw	r18, r22
    8e7c:	ac 01       	movw	r20, r24
    8e7e:	c7 01       	movw	r24, r14
    8e80:	b6 01       	movw	r22, r12
    8e82:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8e86:	23 eb       	ldi	r18, 0xB3	; 179
    8e88:	34 ea       	ldi	r19, 0xA4	; 164
    8e8a:	48 ec       	ldi	r20, 0xC8	; 200
    8e8c:	51 e4       	ldi	r21, 0x41	; 65
    8e8e:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8e92:	6b 01       	movw	r12, r22
    8e94:	7c 01       	movw	r14, r24
    8e96:	be 01       	movw	r22, r28
    8e98:	dd 0f       	add	r29, r29
    8e9a:	88 0b       	sbc	r24, r24
    8e9c:	99 0b       	sbc	r25, r25
    8e9e:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    8ea2:	9b 01       	movw	r18, r22
    8ea4:	ac 01       	movw	r20, r24
    8ea6:	c7 01       	movw	r24, r14
    8ea8:	b6 01       	movw	r22, r12
    8eaa:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8eae:	ad c4       	rjmp	.+2394   	; 0x980a <corectTrv+0x19f0>
		}
	}

	else if (ds >= 0 && ds <= 10)
    8eb0:	20 e0       	ldi	r18, 0x00	; 0
    8eb2:	30 e0       	ldi	r19, 0x00	; 0
    8eb4:	a9 01       	movw	r20, r18
    8eb6:	c5 01       	movw	r24, r10
    8eb8:	b4 01       	movw	r22, r8
    8eba:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    8ebe:	88 23       	and	r24, r24
    8ec0:	0c f4       	brge	.+2      	; 0x8ec4 <corectTrv+0x10aa>
    8ec2:	e9 c2       	rjmp	.+1490   	; 0x9496 <corectTrv+0x167c>
    8ec4:	20 e0       	ldi	r18, 0x00	; 0
    8ec6:	30 e0       	ldi	r19, 0x00	; 0
    8ec8:	40 e2       	ldi	r20, 0x20	; 32
    8eca:	51 e4       	ldi	r21, 0x41	; 65
    8ecc:	c5 01       	movw	r24, r10
    8ece:	b4 01       	movw	r22, r8
    8ed0:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    8ed4:	18 16       	cp	r1, r24
    8ed6:	0c f4       	brge	.+2      	; 0x8eda <corectTrv+0x10c0>
    8ed8:	de c2       	rjmp	.+1468   	; 0x9496 <corectTrv+0x167c>
	{
		if (Superheat == SSet)
    8eda:	20 e0       	ldi	r18, 0x00	; 0
    8edc:	30 e0       	ldi	r19, 0x00	; 0
    8ede:	40 ee       	ldi	r20, 0xE0	; 224
    8ee0:	50 e4       	ldi	r21, 0x40	; 64
    8ee2:	c7 01       	movw	r24, r14
    8ee4:	b6 01       	movw	r22, r12
    8ee6:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    8eea:	81 11       	cpse	r24, r1
    8eec:	2b c0       	rjmp	.+86     	; 0x8f44 <corectTrv+0x112a>
		{
			return( -2 * .00001 * ds * ds + 1.406 * ds)* k;
    8eee:	2c ea       	ldi	r18, 0xAC	; 172
    8ef0:	35 ec       	ldi	r19, 0xC5	; 197
    8ef2:	47 ea       	ldi	r20, 0xA7	; 167
    8ef4:	57 eb       	ldi	r21, 0xB7	; 183
    8ef6:	c5 01       	movw	r24, r10
    8ef8:	b4 01       	movw	r22, r8
    8efa:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8efe:	a5 01       	movw	r20, r10
    8f00:	94 01       	movw	r18, r8
    8f02:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8f06:	6b 01       	movw	r12, r22
    8f08:	7c 01       	movw	r14, r24
    8f0a:	2f ec       	ldi	r18, 0xCF	; 207
    8f0c:	37 ef       	ldi	r19, 0xF7	; 247
    8f0e:	43 eb       	ldi	r20, 0xB3	; 179
    8f10:	5f e3       	ldi	r21, 0x3F	; 63
    8f12:	c5 01       	movw	r24, r10
    8f14:	b4 01       	movw	r22, r8
    8f16:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8f1a:	9b 01       	movw	r18, r22
    8f1c:	ac 01       	movw	r20, r24
    8f1e:	c7 01       	movw	r24, r14
    8f20:	b6 01       	movw	r22, r12
    8f22:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8f26:	6b 01       	movw	r12, r22
    8f28:	7c 01       	movw	r14, r24
    8f2a:	be 01       	movw	r22, r28
    8f2c:	dd 0f       	add	r29, r29
    8f2e:	88 0b       	sbc	r24, r24
    8f30:	99 0b       	sbc	r25, r25
    8f32:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    8f36:	9b 01       	movw	r18, r22
    8f38:	ac 01       	movw	r20, r24
    8f3a:	c7 01       	movw	r24, r14
    8f3c:	b6 01       	movw	r22, r12
    8f3e:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8f42:	63 c4       	rjmp	.+2246   	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    8f44:	20 e0       	ldi	r18, 0x00	; 0
    8f46:	30 e0       	ldi	r19, 0x00	; 0
    8f48:	40 ee       	ldi	r20, 0xE0	; 224
    8f4a:	50 e4       	ldi	r21, 0x40	; 64
    8f4c:	c7 01       	movw	r24, r14
    8f4e:	b6 01       	movw	r22, r12
    8f50:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    8f54:	18 16       	cp	r1, r24
    8f56:	dc f5       	brge	.+118    	; 0x8fce <corectTrv+0x11b4>
    8f58:	20 e0       	ldi	r18, 0x00	; 0
    8f5a:	30 e0       	ldi	r19, 0x00	; 0
    8f5c:	40 e0       	ldi	r20, 0x00	; 0
    8f5e:	51 e4       	ldi	r21, 0x41	; 65
    8f60:	c7 01       	movw	r24, r14
    8f62:	b6 01       	movw	r22, r12
    8f64:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    8f68:	18 16       	cp	r1, r24
    8f6a:	8c f1       	brlt	.+98     	; 0x8fce <corectTrv+0x11b4>
		{
			return( 0.062 * ds * ds + 0.570 * ds + 3.280)* k;
    8f6c:	26 eb       	ldi	r18, 0xB6	; 182
    8f6e:	33 ef       	ldi	r19, 0xF3	; 243
    8f70:	4d e7       	ldi	r20, 0x7D	; 125
    8f72:	5d e3       	ldi	r21, 0x3D	; 61
    8f74:	c5 01       	movw	r24, r10
    8f76:	b4 01       	movw	r22, r8
    8f78:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8f7c:	a5 01       	movw	r20, r10
    8f7e:	94 01       	movw	r18, r8
    8f80:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8f84:	6b 01       	movw	r12, r22
    8f86:	7c 01       	movw	r14, r24
    8f88:	25 e8       	ldi	r18, 0x85	; 133
    8f8a:	3b ee       	ldi	r19, 0xEB	; 235
    8f8c:	41 e1       	ldi	r20, 0x11	; 17
    8f8e:	5f e3       	ldi	r21, 0x3F	; 63
    8f90:	c5 01       	movw	r24, r10
    8f92:	b4 01       	movw	r22, r8
    8f94:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8f98:	9b 01       	movw	r18, r22
    8f9a:	ac 01       	movw	r20, r24
    8f9c:	c7 01       	movw	r24, r14
    8f9e:	b6 01       	movw	r22, r12
    8fa0:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8fa4:	25 e8       	ldi	r18, 0x85	; 133
    8fa6:	3b ee       	ldi	r19, 0xEB	; 235
    8fa8:	41 e5       	ldi	r20, 0x51	; 81
    8faa:	50 e4       	ldi	r21, 0x40	; 64
    8fac:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    8fb0:	6b 01       	movw	r12, r22
    8fb2:	7c 01       	movw	r14, r24
    8fb4:	be 01       	movw	r22, r28
    8fb6:	dd 0f       	add	r29, r29
    8fb8:	88 0b       	sbc	r24, r24
    8fba:	99 0b       	sbc	r25, r25
    8fbc:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    8fc0:	9b 01       	movw	r18, r22
    8fc2:	ac 01       	movw	r20, r24
    8fc4:	c7 01       	movw	r24, r14
    8fc6:	b6 01       	movw	r22, r12
    8fc8:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    8fcc:	1e c4       	rjmp	.+2108   	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    8fce:	20 e0       	ldi	r18, 0x00	; 0
    8fd0:	30 e0       	ldi	r19, 0x00	; 0
    8fd2:	40 e0       	ldi	r20, 0x00	; 0
    8fd4:	51 e4       	ldi	r21, 0x41	; 65
    8fd6:	c7 01       	movw	r24, r14
    8fd8:	b6 01       	movw	r22, r12
    8fda:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    8fde:	18 16       	cp	r1, r24
    8fe0:	dc f5       	brge	.+118    	; 0x9058 <corectTrv+0x123e>
    8fe2:	20 e0       	ldi	r18, 0x00	; 0
    8fe4:	30 e0       	ldi	r19, 0x00	; 0
    8fe6:	40 e1       	ldi	r20, 0x10	; 16
    8fe8:	51 e4       	ldi	r21, 0x41	; 65
    8fea:	c7 01       	movw	r24, r14
    8fec:	b6 01       	movw	r22, r12
    8fee:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    8ff2:	18 16       	cp	r1, r24
    8ff4:	8c f1       	brlt	.+98     	; 0x9058 <corectTrv+0x123e>
		{
			return( 0.099 * ds * ds - 0.019 * ds + 6.338)* k;
    8ff6:	23 e8       	ldi	r18, 0x83	; 131
    8ff8:	30 ec       	ldi	r19, 0xC0	; 192
    8ffa:	4a ec       	ldi	r20, 0xCA	; 202
    8ffc:	5d e3       	ldi	r21, 0x3D	; 61
    8ffe:	c5 01       	movw	r24, r10
    9000:	b4 01       	movw	r22, r8
    9002:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9006:	a5 01       	movw	r20, r10
    9008:	94 01       	movw	r18, r8
    900a:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    900e:	6b 01       	movw	r12, r22
    9010:	7c 01       	movw	r14, r24
    9012:	23 ee       	ldi	r18, 0xE3	; 227
    9014:	35 ea       	ldi	r19, 0xA5	; 165
    9016:	4b e9       	ldi	r20, 0x9B	; 155
    9018:	5c e3       	ldi	r21, 0x3C	; 60
    901a:	c5 01       	movw	r24, r10
    901c:	b4 01       	movw	r22, r8
    901e:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9022:	9b 01       	movw	r18, r22
    9024:	ac 01       	movw	r20, r24
    9026:	c7 01       	movw	r24, r14
    9028:	b6 01       	movw	r22, r12
    902a:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    902e:	25 ee       	ldi	r18, 0xE5	; 229
    9030:	30 ed       	ldi	r19, 0xD0	; 208
    9032:	4a ec       	ldi	r20, 0xCA	; 202
    9034:	50 e4       	ldi	r21, 0x40	; 64
    9036:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    903a:	6b 01       	movw	r12, r22
    903c:	7c 01       	movw	r14, r24
    903e:	be 01       	movw	r22, r28
    9040:	dd 0f       	add	r29, r29
    9042:	88 0b       	sbc	r24, r24
    9044:	99 0b       	sbc	r25, r25
    9046:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    904a:	9b 01       	movw	r18, r22
    904c:	ac 01       	movw	r20, r24
    904e:	c7 01       	movw	r24, r14
    9050:	b6 01       	movw	r22, r12
    9052:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9056:	d9 c3       	rjmp	.+1970   	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    9058:	20 e0       	ldi	r18, 0x00	; 0
    905a:	30 e0       	ldi	r19, 0x00	; 0
    905c:	40 e1       	ldi	r20, 0x10	; 16
    905e:	51 e4       	ldi	r21, 0x41	; 65
    9060:	c7 01       	movw	r24, r14
    9062:	b6 01       	movw	r22, r12
    9064:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    9068:	18 16       	cp	r1, r24
    906a:	dc f5       	brge	.+118    	; 0x90e2 <corectTrv+0x12c8>
    906c:	20 e0       	ldi	r18, 0x00	; 0
    906e:	30 e0       	ldi	r19, 0x00	; 0
    9070:	40 e2       	ldi	r20, 0x20	; 32
    9072:	51 e4       	ldi	r21, 0x41	; 65
    9074:	c7 01       	movw	r24, r14
    9076:	b6 01       	movw	r22, r12
    9078:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    907c:	18 16       	cp	r1, r24
    907e:	8c f1       	brlt	.+98     	; 0x90e2 <corectTrv+0x12c8>
		{
			return( 0.121 * ds * ds - 0.409 * ds + 9.164)* k;
    9080:	29 ed       	ldi	r18, 0xD9	; 217
    9082:	3e ec       	ldi	r19, 0xCE	; 206
    9084:	47 ef       	ldi	r20, 0xF7	; 247
    9086:	5d e3       	ldi	r21, 0x3D	; 61
    9088:	c5 01       	movw	r24, r10
    908a:	b4 01       	movw	r22, r8
    908c:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9090:	a5 01       	movw	r20, r10
    9092:	94 01       	movw	r18, r8
    9094:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9098:	6b 01       	movw	r12, r22
    909a:	7c 01       	movw	r14, r24
    909c:	23 e7       	ldi	r18, 0x73	; 115
    909e:	38 e6       	ldi	r19, 0x68	; 104
    90a0:	41 ed       	ldi	r20, 0xD1	; 209
    90a2:	5e e3       	ldi	r21, 0x3E	; 62
    90a4:	c5 01       	movw	r24, r10
    90a6:	b4 01       	movw	r22, r8
    90a8:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    90ac:	9b 01       	movw	r18, r22
    90ae:	ac 01       	movw	r20, r24
    90b0:	c7 01       	movw	r24, r14
    90b2:	b6 01       	movw	r22, r12
    90b4:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    90b8:	2e eb       	ldi	r18, 0xBE	; 190
    90ba:	3f e9       	ldi	r19, 0x9F	; 159
    90bc:	42 e1       	ldi	r20, 0x12	; 18
    90be:	51 e4       	ldi	r21, 0x41	; 65
    90c0:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    90c4:	6b 01       	movw	r12, r22
    90c6:	7c 01       	movw	r14, r24
    90c8:	be 01       	movw	r22, r28
    90ca:	dd 0f       	add	r29, r29
    90cc:	88 0b       	sbc	r24, r24
    90ce:	99 0b       	sbc	r25, r25
    90d0:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    90d4:	9b 01       	movw	r18, r22
    90d6:	ac 01       	movw	r20, r24
    90d8:	c7 01       	movw	r24, r14
    90da:	b6 01       	movw	r22, r12
    90dc:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    90e0:	94 c3       	rjmp	.+1832   	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    90e2:	20 e0       	ldi	r18, 0x00	; 0
    90e4:	30 e0       	ldi	r19, 0x00	; 0
    90e6:	40 e2       	ldi	r20, 0x20	; 32
    90e8:	51 e4       	ldi	r21, 0x41	; 65
    90ea:	c7 01       	movw	r24, r14
    90ec:	b6 01       	movw	r22, r12
    90ee:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    90f2:	18 16       	cp	r1, r24
    90f4:	dc f5       	brge	.+118    	; 0x916c <corectTrv+0x1352>
    90f6:	20 e0       	ldi	r18, 0x00	; 0
    90f8:	30 e0       	ldi	r19, 0x00	; 0
    90fa:	40 e3       	ldi	r20, 0x30	; 48
    90fc:	51 e4       	ldi	r21, 0x41	; 65
    90fe:	c7 01       	movw	r24, r14
    9100:	b6 01       	movw	r22, r12
    9102:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    9106:	18 16       	cp	r1, r24
    9108:	8c f1       	brlt	.+98     	; 0x916c <corectTrv+0x1352>
		{
			return( 0.128 * ds * ds - 0.340 * ds + 11.4)* k;
    910a:	2f e6       	ldi	r18, 0x6F	; 111
    910c:	32 e1       	ldi	r19, 0x12	; 18
    910e:	43 e0       	ldi	r20, 0x03	; 3
    9110:	5e e3       	ldi	r21, 0x3E	; 62
    9112:	c5 01       	movw	r24, r10
    9114:	b4 01       	movw	r22, r8
    9116:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    911a:	a5 01       	movw	r20, r10
    911c:	94 01       	movw	r18, r8
    911e:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9122:	6b 01       	movw	r12, r22
    9124:	7c 01       	movw	r14, r24
    9126:	2b e7       	ldi	r18, 0x7B	; 123
    9128:	34 e1       	ldi	r19, 0x14	; 20
    912a:	4e ea       	ldi	r20, 0xAE	; 174
    912c:	5e e3       	ldi	r21, 0x3E	; 62
    912e:	c5 01       	movw	r24, r10
    9130:	b4 01       	movw	r22, r8
    9132:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9136:	9b 01       	movw	r18, r22
    9138:	ac 01       	movw	r20, r24
    913a:	c7 01       	movw	r24, r14
    913c:	b6 01       	movw	r22, r12
    913e:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    9142:	26 e6       	ldi	r18, 0x66	; 102
    9144:	36 e6       	ldi	r19, 0x66	; 102
    9146:	46 e3       	ldi	r20, 0x36	; 54
    9148:	51 e4       	ldi	r21, 0x41	; 65
    914a:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    914e:	6b 01       	movw	r12, r22
    9150:	7c 01       	movw	r14, r24
    9152:	be 01       	movw	r22, r28
    9154:	dd 0f       	add	r29, r29
    9156:	88 0b       	sbc	r24, r24
    9158:	99 0b       	sbc	r25, r25
    915a:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    915e:	9b 01       	movw	r18, r22
    9160:	ac 01       	movw	r20, r24
    9162:	c7 01       	movw	r24, r14
    9164:	b6 01       	movw	r22, r12
    9166:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    916a:	4f c3       	rjmp	.+1694   	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    916c:	20 e0       	ldi	r18, 0x00	; 0
    916e:	30 e0       	ldi	r19, 0x00	; 0
    9170:	40 e3       	ldi	r20, 0x30	; 48
    9172:	51 e4       	ldi	r21, 0x41	; 65
    9174:	c7 01       	movw	r24, r14
    9176:	b6 01       	movw	r22, r12
    9178:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    917c:	18 16       	cp	r1, r24
    917e:	dc f5       	brge	.+118    	; 0x91f6 <corectTrv+0x13dc>
    9180:	20 e0       	ldi	r18, 0x00	; 0
    9182:	30 e0       	ldi	r19, 0x00	; 0
    9184:	40 e4       	ldi	r20, 0x40	; 64
    9186:	51 e4       	ldi	r21, 0x41	; 65
    9188:	c7 01       	movw	r24, r14
    918a:	b6 01       	movw	r22, r12
    918c:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    9190:	18 16       	cp	r1, r24
    9192:	8c f1       	brlt	.+98     	; 0x91f6 <corectTrv+0x13dc>
		{
			return( 0.128 * ds * ds - 0.382 * ds + 15.51)* k;
    9194:	2f e6       	ldi	r18, 0x6F	; 111
    9196:	32 e1       	ldi	r19, 0x12	; 18
    9198:	43 e0       	ldi	r20, 0x03	; 3
    919a:	5e e3       	ldi	r21, 0x3E	; 62
    919c:	c5 01       	movw	r24, r10
    919e:	b4 01       	movw	r22, r8
    91a0:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    91a4:	a5 01       	movw	r20, r10
    91a6:	94 01       	movw	r18, r8
    91a8:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    91ac:	6b 01       	movw	r12, r22
    91ae:	7c 01       	movw	r14, r24
    91b0:	21 e8       	ldi	r18, 0x81	; 129
    91b2:	35 e9       	ldi	r19, 0x95	; 149
    91b4:	43 ec       	ldi	r20, 0xC3	; 195
    91b6:	5e e3       	ldi	r21, 0x3E	; 62
    91b8:	c5 01       	movw	r24, r10
    91ba:	b4 01       	movw	r22, r8
    91bc:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    91c0:	9b 01       	movw	r18, r22
    91c2:	ac 01       	movw	r20, r24
    91c4:	c7 01       	movw	r24, r14
    91c6:	b6 01       	movw	r22, r12
    91c8:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    91cc:	26 ef       	ldi	r18, 0xF6	; 246
    91ce:	38 e2       	ldi	r19, 0x28	; 40
    91d0:	48 e7       	ldi	r20, 0x78	; 120
    91d2:	51 e4       	ldi	r21, 0x41	; 65
    91d4:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    91d8:	6b 01       	movw	r12, r22
    91da:	7c 01       	movw	r14, r24
    91dc:	be 01       	movw	r22, r28
    91de:	dd 0f       	add	r29, r29
    91e0:	88 0b       	sbc	r24, r24
    91e2:	99 0b       	sbc	r25, r25
    91e4:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    91e8:	9b 01       	movw	r18, r22
    91ea:	ac 01       	movw	r20, r24
    91ec:	c7 01       	movw	r24, r14
    91ee:	b6 01       	movw	r22, r12
    91f0:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    91f4:	0a c3       	rjmp	.+1556   	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    91f6:	20 e0       	ldi	r18, 0x00	; 0
    91f8:	30 e0       	ldi	r19, 0x00	; 0
    91fa:	40 e4       	ldi	r20, 0x40	; 64
    91fc:	51 e4       	ldi	r21, 0x41	; 65
    91fe:	c7 01       	movw	r24, r14
    9200:	b6 01       	movw	r22, r12
    9202:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    9206:	18 16       	cp	r1, r24
    9208:	dc f5       	brge	.+118    	; 0x9280 <corectTrv+0x1466>
    920a:	20 e0       	ldi	r18, 0x00	; 0
    920c:	30 e0       	ldi	r19, 0x00	; 0
    920e:	40 e5       	ldi	r20, 0x50	; 80
    9210:	51 e4       	ldi	r21, 0x41	; 65
    9212:	c7 01       	movw	r24, r14
    9214:	b6 01       	movw	r22, r12
    9216:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    921a:	18 16       	cp	r1, r24
    921c:	8c f1       	brlt	.+98     	; 0x9280 <corectTrv+0x1466>
		{
			return( 0.128 * ds * ds - 0.382 * ds + 15.51)* k;
    921e:	2f e6       	ldi	r18, 0x6F	; 111
    9220:	32 e1       	ldi	r19, 0x12	; 18
    9222:	43 e0       	ldi	r20, 0x03	; 3
    9224:	5e e3       	ldi	r21, 0x3E	; 62
    9226:	c5 01       	movw	r24, r10
    9228:	b4 01       	movw	r22, r8
    922a:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    922e:	a5 01       	movw	r20, r10
    9230:	94 01       	movw	r18, r8
    9232:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9236:	6b 01       	movw	r12, r22
    9238:	7c 01       	movw	r14, r24
    923a:	21 e8       	ldi	r18, 0x81	; 129
    923c:	35 e9       	ldi	r19, 0x95	; 149
    923e:	43 ec       	ldi	r20, 0xC3	; 195
    9240:	5e e3       	ldi	r21, 0x3E	; 62
    9242:	c5 01       	movw	r24, r10
    9244:	b4 01       	movw	r22, r8
    9246:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    924a:	9b 01       	movw	r18, r22
    924c:	ac 01       	movw	r20, r24
    924e:	c7 01       	movw	r24, r14
    9250:	b6 01       	movw	r22, r12
    9252:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    9256:	26 ef       	ldi	r18, 0xF6	; 246
    9258:	38 e2       	ldi	r19, 0x28	; 40
    925a:	48 e7       	ldi	r20, 0x78	; 120
    925c:	51 e4       	ldi	r21, 0x41	; 65
    925e:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    9262:	6b 01       	movw	r12, r22
    9264:	7c 01       	movw	r14, r24
    9266:	be 01       	movw	r22, r28
    9268:	dd 0f       	add	r29, r29
    926a:	88 0b       	sbc	r24, r24
    926c:	99 0b       	sbc	r25, r25
    926e:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    9272:	9b 01       	movw	r18, r22
    9274:	ac 01       	movw	r20, r24
    9276:	c7 01       	movw	r24, r14
    9278:	b6 01       	movw	r22, r12
    927a:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    927e:	c5 c2       	rjmp	.+1418   	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    9280:	20 e0       	ldi	r18, 0x00	; 0
    9282:	30 e0       	ldi	r19, 0x00	; 0
    9284:	40 e5       	ldi	r20, 0x50	; 80
    9286:	51 e4       	ldi	r21, 0x41	; 65
    9288:	c7 01       	movw	r24, r14
    928a:	b6 01       	movw	r22, r12
    928c:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    9290:	18 16       	cp	r1, r24
    9292:	dc f5       	brge	.+118    	; 0x930a <corectTrv+0x14f0>
    9294:	20 e0       	ldi	r18, 0x00	; 0
    9296:	30 e0       	ldi	r19, 0x00	; 0
    9298:	40 e6       	ldi	r20, 0x60	; 96
    929a:	51 e4       	ldi	r21, 0x41	; 65
    929c:	c7 01       	movw	r24, r14
    929e:	b6 01       	movw	r22, r12
    92a0:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    92a4:	18 16       	cp	r1, r24
    92a6:	8c f1       	brlt	.+98     	; 0x930a <corectTrv+0x14f0>
		{
			return( 0.137 * ds * ds - 0.652 * ds + 16.63)* k;
    92a8:	2a eb       	ldi	r18, 0xBA	; 186
    92aa:	39 e4       	ldi	r19, 0x49	; 73
    92ac:	4c e0       	ldi	r20, 0x0C	; 12
    92ae:	5e e3       	ldi	r21, 0x3E	; 62
    92b0:	c5 01       	movw	r24, r10
    92b2:	b4 01       	movw	r22, r8
    92b4:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    92b8:	a5 01       	movw	r20, r10
    92ba:	94 01       	movw	r18, r8
    92bc:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    92c0:	6b 01       	movw	r12, r22
    92c2:	7c 01       	movw	r14, r24
    92c4:	29 e7       	ldi	r18, 0x79	; 121
    92c6:	39 ee       	ldi	r19, 0xE9	; 233
    92c8:	46 e2       	ldi	r20, 0x26	; 38
    92ca:	5f e3       	ldi	r21, 0x3F	; 63
    92cc:	c5 01       	movw	r24, r10
    92ce:	b4 01       	movw	r22, r8
    92d0:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    92d4:	9b 01       	movw	r18, r22
    92d6:	ac 01       	movw	r20, r24
    92d8:	c7 01       	movw	r24, r14
    92da:	b6 01       	movw	r22, r12
    92dc:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    92e0:	2d e3       	ldi	r18, 0x3D	; 61
    92e2:	3a e0       	ldi	r19, 0x0A	; 10
    92e4:	45 e8       	ldi	r20, 0x85	; 133
    92e6:	51 e4       	ldi	r21, 0x41	; 65
    92e8:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    92ec:	6b 01       	movw	r12, r22
    92ee:	7c 01       	movw	r14, r24
    92f0:	be 01       	movw	r22, r28
    92f2:	dd 0f       	add	r29, r29
    92f4:	88 0b       	sbc	r24, r24
    92f6:	99 0b       	sbc	r25, r25
    92f8:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    92fc:	9b 01       	movw	r18, r22
    92fe:	ac 01       	movw	r20, r24
    9300:	c7 01       	movw	r24, r14
    9302:	b6 01       	movw	r22, r12
    9304:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9308:	80 c2       	rjmp	.+1280   	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    930a:	20 e0       	ldi	r18, 0x00	; 0
    930c:	30 e0       	ldi	r19, 0x00	; 0
    930e:	40 e6       	ldi	r20, 0x60	; 96
    9310:	51 e4       	ldi	r21, 0x41	; 65
    9312:	c7 01       	movw	r24, r14
    9314:	b6 01       	movw	r22, r12
    9316:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    931a:	18 16       	cp	r1, r24
    931c:	dc f5       	brge	.+118    	; 0x9394 <corectTrv+0x157a>
    931e:	20 e0       	ldi	r18, 0x00	; 0
    9320:	30 e0       	ldi	r19, 0x00	; 0
    9322:	40 e7       	ldi	r20, 0x70	; 112
    9324:	51 e4       	ldi	r21, 0x41	; 65
    9326:	c7 01       	movw	r24, r14
    9328:	b6 01       	movw	r22, r12
    932a:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    932e:	18 16       	cp	r1, r24
    9330:	8c f1       	brlt	.+98     	; 0x9394 <corectTrv+0x157a>
		{
			return( 0.142 * ds * ds - 0.630 * ds + 17.7)* k;
    9332:	23 e7       	ldi	r18, 0x73	; 115
    9334:	38 e6       	ldi	r19, 0x68	; 104
    9336:	41 e1       	ldi	r20, 0x11	; 17
    9338:	5e e3       	ldi	r21, 0x3E	; 62
    933a:	c5 01       	movw	r24, r10
    933c:	b4 01       	movw	r22, r8
    933e:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9342:	a5 01       	movw	r20, r10
    9344:	94 01       	movw	r18, r8
    9346:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    934a:	6b 01       	movw	r12, r22
    934c:	7c 01       	movw	r14, r24
    934e:	2e ea       	ldi	r18, 0xAE	; 174
    9350:	37 e4       	ldi	r19, 0x47	; 71
    9352:	41 e2       	ldi	r20, 0x21	; 33
    9354:	5f e3       	ldi	r21, 0x3F	; 63
    9356:	c5 01       	movw	r24, r10
    9358:	b4 01       	movw	r22, r8
    935a:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    935e:	9b 01       	movw	r18, r22
    9360:	ac 01       	movw	r20, r24
    9362:	c7 01       	movw	r24, r14
    9364:	b6 01       	movw	r22, r12
    9366:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    936a:	2a e9       	ldi	r18, 0x9A	; 154
    936c:	39 e9       	ldi	r19, 0x99	; 153
    936e:	4d e8       	ldi	r20, 0x8D	; 141
    9370:	51 e4       	ldi	r21, 0x41	; 65
    9372:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    9376:	6b 01       	movw	r12, r22
    9378:	7c 01       	movw	r14, r24
    937a:	be 01       	movw	r22, r28
    937c:	dd 0f       	add	r29, r29
    937e:	88 0b       	sbc	r24, r24
    9380:	99 0b       	sbc	r25, r25
    9382:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    9386:	9b 01       	movw	r18, r22
    9388:	ac 01       	movw	r20, r24
    938a:	c7 01       	movw	r24, r14
    938c:	b6 01       	movw	r22, r12
    938e:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9392:	3b c2       	rjmp	.+1142   	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    9394:	20 e0       	ldi	r18, 0x00	; 0
    9396:	30 e0       	ldi	r19, 0x00	; 0
    9398:	40 e7       	ldi	r20, 0x70	; 112
    939a:	51 e4       	ldi	r21, 0x41	; 65
    939c:	c7 01       	movw	r24, r14
    939e:	b6 01       	movw	r22, r12
    93a0:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    93a4:	18 16       	cp	r1, r24
    93a6:	dc f5       	brge	.+118    	; 0x941e <corectTrv+0x1604>
    93a8:	20 e0       	ldi	r18, 0x00	; 0
    93aa:	30 e0       	ldi	r19, 0x00	; 0
    93ac:	40 e8       	ldi	r20, 0x80	; 128
    93ae:	51 e4       	ldi	r21, 0x41	; 65
    93b0:	c7 01       	movw	r24, r14
    93b2:	b6 01       	movw	r22, r12
    93b4:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    93b8:	18 16       	cp	r1, r24
    93ba:	8c f1       	brlt	.+98     	; 0x941e <corectTrv+0x1604>
		{
			return( 0.126 * ds * ds - 0.683 * ds + 20.4)* k;
    93bc:	25 e2       	ldi	r18, 0x25	; 37
    93be:	36 e0       	ldi	r19, 0x06	; 6
    93c0:	41 e0       	ldi	r20, 0x01	; 1
    93c2:	5e e3       	ldi	r21, 0x3E	; 62
    93c4:	c5 01       	movw	r24, r10
    93c6:	b4 01       	movw	r22, r8
    93c8:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    93cc:	a5 01       	movw	r20, r10
    93ce:	94 01       	movw	r18, r8
    93d0:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    93d4:	6b 01       	movw	r12, r22
    93d6:	7c 01       	movw	r14, r24
    93d8:	27 e1       	ldi	r18, 0x17	; 23
    93da:	39 ed       	ldi	r19, 0xD9	; 217
    93dc:	4e e2       	ldi	r20, 0x2E	; 46
    93de:	5f e3       	ldi	r21, 0x3F	; 63
    93e0:	c5 01       	movw	r24, r10
    93e2:	b4 01       	movw	r22, r8
    93e4:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    93e8:	9b 01       	movw	r18, r22
    93ea:	ac 01       	movw	r20, r24
    93ec:	c7 01       	movw	r24, r14
    93ee:	b6 01       	movw	r22, r12
    93f0:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    93f4:	23 e3       	ldi	r18, 0x33	; 51
    93f6:	33 e3       	ldi	r19, 0x33	; 51
    93f8:	43 ea       	ldi	r20, 0xA3	; 163
    93fa:	51 e4       	ldi	r21, 0x41	; 65
    93fc:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    9400:	6b 01       	movw	r12, r22
    9402:	7c 01       	movw	r14, r24
    9404:	be 01       	movw	r22, r28
    9406:	dd 0f       	add	r29, r29
    9408:	88 0b       	sbc	r24, r24
    940a:	99 0b       	sbc	r25, r25
    940c:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    9410:	9b 01       	movw	r18, r22
    9412:	ac 01       	movw	r20, r24
    9414:	c7 01       	movw	r24, r14
    9416:	b6 01       	movw	r22, r12
    9418:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    941c:	f6 c1       	rjmp	.+1004   	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 9)
    941e:	20 e0       	ldi	r18, 0x00	; 0
    9420:	30 e0       	ldi	r19, 0x00	; 0
    9422:	40 e8       	ldi	r20, 0x80	; 128
    9424:	51 e4       	ldi	r21, 0x41	; 65
    9426:	c7 01       	movw	r24, r14
    9428:	b6 01       	movw	r22, r12
    942a:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    942e:	18 16       	cp	r1, r24
    9430:	0c f0       	brlt	.+2      	; 0x9434 <corectTrv+0x161a>
    9432:	e0 c1       	rjmp	.+960    	; 0x97f4 <corectTrv+0x19da>
		{
			return( 0.027 * ds * ds - 0.277 * ds + 25.29)* k;
    9434:	2b e1       	ldi	r18, 0x1B	; 27
    9436:	3f e2       	ldi	r19, 0x2F	; 47
    9438:	4d ed       	ldi	r20, 0xDD	; 221
    943a:	5c e3       	ldi	r21, 0x3C	; 60
    943c:	c5 01       	movw	r24, r10
    943e:	b4 01       	movw	r22, r8
    9440:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9444:	a5 01       	movw	r20, r10
    9446:	94 01       	movw	r18, r8
    9448:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    944c:	6b 01       	movw	r12, r22
    944e:	7c 01       	movw	r14, r24
    9450:	22 ef       	ldi	r18, 0xF2	; 242
    9452:	32 ed       	ldi	r19, 0xD2	; 210
    9454:	4d e8       	ldi	r20, 0x8D	; 141
    9456:	5e e3       	ldi	r21, 0x3E	; 62
    9458:	c5 01       	movw	r24, r10
    945a:	b4 01       	movw	r22, r8
    945c:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9460:	9b 01       	movw	r18, r22
    9462:	ac 01       	movw	r20, r24
    9464:	c7 01       	movw	r24, r14
    9466:	b6 01       	movw	r22, r12
    9468:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    946c:	2c ee       	ldi	r18, 0xEC	; 236
    946e:	31 e5       	ldi	r19, 0x51	; 81
    9470:	4a ec       	ldi	r20, 0xCA	; 202
    9472:	51 e4       	ldi	r21, 0x41	; 65
    9474:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    9478:	6b 01       	movw	r12, r22
    947a:	7c 01       	movw	r14, r24
    947c:	be 01       	movw	r22, r28
    947e:	dd 0f       	add	r29, r29
    9480:	88 0b       	sbc	r24, r24
    9482:	99 0b       	sbc	r25, r25
    9484:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    9488:	9b 01       	movw	r18, r22
    948a:	ac 01       	movw	r20, r24
    948c:	c7 01       	movw	r24, r14
    948e:	b6 01       	movw	r22, r12
    9490:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9494:	ba c1       	rjmp	.+884    	; 0x980a <corectTrv+0x19f0>
		}
	}

	else if (ds > 10)
    9496:	20 e0       	ldi	r18, 0x00	; 0
    9498:	30 e0       	ldi	r19, 0x00	; 0
    949a:	40 e2       	ldi	r20, 0x20	; 32
    949c:	51 e4       	ldi	r21, 0x41	; 65
    949e:	c5 01       	movw	r24, r10
    94a0:	b4 01       	movw	r22, r8
    94a2:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    94a6:	18 16       	cp	r1, r24
    94a8:	0c f0       	brlt	.+2      	; 0x94ac <corectTrv+0x1692>
    94aa:	a8 c1       	rjmp	.+848    	; 0x97fc <corectTrv+0x19e2>
    94ac:	08 c0       	rjmp	.+16     	; 0x94be <corectTrv+0x16a4>
	
	Superheat_old = Superheat;
	
	if (ds > 20)
	{
		ds = 20;
    94ae:	0f 2e       	mov	r0, r31
    94b0:	81 2c       	mov	r8, r1
    94b2:	91 2c       	mov	r9, r1
    94b4:	f0 ea       	ldi	r31, 0xA0	; 160
    94b6:	af 2e       	mov	r10, r31
    94b8:	f1 e4       	ldi	r31, 0x41	; 65
    94ba:	bf 2e       	mov	r11, r31
    94bc:	f0 2d       	mov	r31, r0
		}
	}

	else if (ds > 10)
	{
		if (Superheat == SSet)
    94be:	20 e0       	ldi	r18, 0x00	; 0
    94c0:	30 e0       	ldi	r19, 0x00	; 0
    94c2:	40 ee       	ldi	r20, 0xE0	; 224
    94c4:	50 e4       	ldi	r21, 0x40	; 64
    94c6:	c7 01       	movw	r24, r14
    94c8:	b6 01       	movw	r22, r12
    94ca:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    94ce:	81 11       	cpse	r24, r1
    94d0:	31 c0       	rjmp	.+98     	; 0x9534 <corectTrv+0x171a>
		{
			return( 0.137 * ds * ds - 3.245 * ds + 34.51)* k;
    94d2:	2a eb       	ldi	r18, 0xBA	; 186
    94d4:	39 e4       	ldi	r19, 0x49	; 73
    94d6:	4c e0       	ldi	r20, 0x0C	; 12
    94d8:	5e e3       	ldi	r21, 0x3E	; 62
    94da:	c5 01       	movw	r24, r10
    94dc:	b4 01       	movw	r22, r8
    94de:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    94e2:	a5 01       	movw	r20, r10
    94e4:	94 01       	movw	r18, r8
    94e6:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    94ea:	6b 01       	movw	r12, r22
    94ec:	7c 01       	movw	r14, r24
    94ee:	24 e1       	ldi	r18, 0x14	; 20
    94f0:	3e ea       	ldi	r19, 0xAE	; 174
    94f2:	4f e4       	ldi	r20, 0x4F	; 79
    94f4:	50 e4       	ldi	r21, 0x40	; 64
    94f6:	c5 01       	movw	r24, r10
    94f8:	b4 01       	movw	r22, r8
    94fa:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    94fe:	9b 01       	movw	r18, r22
    9500:	ac 01       	movw	r20, r24
    9502:	c7 01       	movw	r24, r14
    9504:	b6 01       	movw	r22, r12
    9506:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    950a:	2d e3       	ldi	r18, 0x3D	; 61
    950c:	3a e0       	ldi	r19, 0x0A	; 10
    950e:	4a e0       	ldi	r20, 0x0A	; 10
    9510:	52 e4       	ldi	r21, 0x42	; 66
    9512:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    9516:	6b 01       	movw	r12, r22
    9518:	7c 01       	movw	r14, r24
    951a:	be 01       	movw	r22, r28
    951c:	dd 0f       	add	r29, r29
    951e:	88 0b       	sbc	r24, r24
    9520:	99 0b       	sbc	r25, r25
    9522:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    9526:	9b 01       	movw	r18, r22
    9528:	ac 01       	movw	r20, r24
    952a:	c7 01       	movw	r24, r14
    952c:	b6 01       	movw	r22, r12
    952e:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9532:	6b c1       	rjmp	.+726    	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    9534:	20 e0       	ldi	r18, 0x00	; 0
    9536:	30 e0       	ldi	r19, 0x00	; 0
    9538:	40 ee       	ldi	r20, 0xE0	; 224
    953a:	50 e4       	ldi	r21, 0x40	; 64
    953c:	c7 01       	movw	r24, r14
    953e:	b6 01       	movw	r22, r12
    9540:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    9544:	18 16       	cp	r1, r24
    9546:	dc f5       	brge	.+118    	; 0x95be <corectTrv+0x17a4>
    9548:	20 e0       	ldi	r18, 0x00	; 0
    954a:	30 e0       	ldi	r19, 0x00	; 0
    954c:	40 e0       	ldi	r20, 0x00	; 0
    954e:	51 e4       	ldi	r21, 0x41	; 65
    9550:	c7 01       	movw	r24, r14
    9552:	b6 01       	movw	r22, r12
    9554:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    9558:	18 16       	cp	r1, r24
    955a:	8c f1       	brlt	.+98     	; 0x95be <corectTrv+0x17a4>
		{
			return( 0.137 * ds * ds - 3.245 * ds + 34.51)* k;
    955c:	2a eb       	ldi	r18, 0xBA	; 186
    955e:	39 e4       	ldi	r19, 0x49	; 73
    9560:	4c e0       	ldi	r20, 0x0C	; 12
    9562:	5e e3       	ldi	r21, 0x3E	; 62
    9564:	c5 01       	movw	r24, r10
    9566:	b4 01       	movw	r22, r8
    9568:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    956c:	a5 01       	movw	r20, r10
    956e:	94 01       	movw	r18, r8
    9570:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9574:	6b 01       	movw	r12, r22
    9576:	7c 01       	movw	r14, r24
    9578:	24 e1       	ldi	r18, 0x14	; 20
    957a:	3e ea       	ldi	r19, 0xAE	; 174
    957c:	4f e4       	ldi	r20, 0x4F	; 79
    957e:	50 e4       	ldi	r21, 0x40	; 64
    9580:	c5 01       	movw	r24, r10
    9582:	b4 01       	movw	r22, r8
    9584:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9588:	9b 01       	movw	r18, r22
    958a:	ac 01       	movw	r20, r24
    958c:	c7 01       	movw	r24, r14
    958e:	b6 01       	movw	r22, r12
    9590:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    9594:	2d e3       	ldi	r18, 0x3D	; 61
    9596:	3a e0       	ldi	r19, 0x0A	; 10
    9598:	4a e0       	ldi	r20, 0x0A	; 10
    959a:	52 e4       	ldi	r21, 0x42	; 66
    959c:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    95a0:	6b 01       	movw	r12, r22
    95a2:	7c 01       	movw	r14, r24
    95a4:	be 01       	movw	r22, r28
    95a6:	dd 0f       	add	r29, r29
    95a8:	88 0b       	sbc	r24, r24
    95aa:	99 0b       	sbc	r25, r25
    95ac:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    95b0:	9b 01       	movw	r18, r22
    95b2:	ac 01       	movw	r20, r24
    95b4:	c7 01       	movw	r24, r14
    95b6:	b6 01       	movw	r22, r12
    95b8:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    95bc:	26 c1       	rjmp	.+588    	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    95be:	20 e0       	ldi	r18, 0x00	; 0
    95c0:	30 e0       	ldi	r19, 0x00	; 0
    95c2:	40 e0       	ldi	r20, 0x00	; 0
    95c4:	51 e4       	ldi	r21, 0x41	; 65
    95c6:	c7 01       	movw	r24, r14
    95c8:	b6 01       	movw	r22, r12
    95ca:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    95ce:	18 16       	cp	r1, r24
    95d0:	dc f5       	brge	.+118    	; 0x9648 <corectTrv+0x182e>
    95d2:	20 e0       	ldi	r18, 0x00	; 0
    95d4:	30 e0       	ldi	r19, 0x00	; 0
    95d6:	40 e1       	ldi	r20, 0x10	; 16
    95d8:	51 e4       	ldi	r21, 0x41	; 65
    95da:	c7 01       	movw	r24, r14
    95dc:	b6 01       	movw	r22, r12
    95de:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    95e2:	18 16       	cp	r1, r24
    95e4:	8c f1       	brlt	.+98     	; 0x9648 <corectTrv+0x182e>
		{
			return( 0.158 * ds * ds - 4.086 * ds + 42.41)* k;
    95e6:	21 ec       	ldi	r18, 0xC1	; 193
    95e8:	3a ec       	ldi	r19, 0xCA	; 202
    95ea:	41 e2       	ldi	r20, 0x21	; 33
    95ec:	5e e3       	ldi	r21, 0x3E	; 62
    95ee:	c5 01       	movw	r24, r10
    95f0:	b4 01       	movw	r22, r8
    95f2:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    95f6:	a5 01       	movw	r20, r10
    95f8:	94 01       	movw	r18, r8
    95fa:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    95fe:	6b 01       	movw	r12, r22
    9600:	7c 01       	movw	r14, r24
    9602:	23 e8       	ldi	r18, 0x83	; 131
    9604:	30 ec       	ldi	r19, 0xC0	; 192
    9606:	42 e8       	ldi	r20, 0x82	; 130
    9608:	50 e4       	ldi	r21, 0x40	; 64
    960a:	c5 01       	movw	r24, r10
    960c:	b4 01       	movw	r22, r8
    960e:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9612:	9b 01       	movw	r18, r22
    9614:	ac 01       	movw	r20, r24
    9616:	c7 01       	movw	r24, r14
    9618:	b6 01       	movw	r22, r12
    961a:	0e 94 25 53 	call	0xa64a	; 0xa64a <__subsf3>
    961e:	27 ed       	ldi	r18, 0xD7	; 215
    9620:	33 ea       	ldi	r19, 0xA3	; 163
    9622:	49 e2       	ldi	r20, 0x29	; 41
    9624:	52 e4       	ldi	r21, 0x42	; 66
    9626:	0e 94 26 53 	call	0xa64c	; 0xa64c <__addsf3>
    962a:	6b 01       	movw	r12, r22
    962c:	7c 01       	movw	r14, r24
    962e:	be 01       	movw	r22, r28
    9630:	dd 0f       	add	r29, r29
    9632:	88 0b       	sbc	r24, r24
    9634:	99 0b       	sbc	r25, r25
    9636:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    963a:	9b 01       	movw	r18, r22
    963c:	ac 01       	movw	r20, r24
    963e:	c7 01       	movw	r24, r14
    9640:	b6 01       	movw	r22, r12
    9642:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9646:	e1 c0       	rjmp	.+450    	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    9648:	20 e0       	ldi	r18, 0x00	; 0
    964a:	30 e0       	ldi	r19, 0x00	; 0
    964c:	40 e1       	ldi	r20, 0x10	; 16
    964e:	51 e4       	ldi	r21, 0x41	; 65
    9650:	c7 01       	movw	r24, r14
    9652:	b6 01       	movw	r22, r12
    9654:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    9658:	18 16       	cp	r1, r24
    965a:	0c f0       	brlt	.+2      	; 0x965e <corectTrv+0x1844>
    965c:	51 c0       	rjmp	.+162    	; 0x9700 <corectTrv+0x18e6>
    965e:	20 e0       	ldi	r18, 0x00	; 0
    9660:	30 e0       	ldi	r19, 0x00	; 0
    9662:	40 e2       	ldi	r20, 0x20	; 32
    9664:	51 e4       	ldi	r21, 0x41	; 65
    9666:	c7 01       	movw	r24, r14
    9668:	b6 01       	movw	r22, r12
    966a:	0e 94 8a 53 	call	0xa714	; 0xa714 <__cmpsf2>
    966e:	18 16       	cp	r1, r24
    9670:	0c f4       	brge	.+2      	; 0x9674 <corectTrv+0x185a>
    9672:	46 c0       	rjmp	.+140    	; 0x9700 <corectTrv+0x18e6>
		{
			return( 0.027 * ds * ds * ds - 1.086 * ds * ds + 14.32 * ds - 44.48)* k;
    9674:	2b e1       	ldi	r18, 0x1B	; 27
    9676:	3f e2       	ldi	r19, 0x2F	; 47
    9678:	4d ed       	ldi	r20, 0xDD	; 221
    967a:	5c e3       	ldi	r21, 0x3C	; 60
    967c:	c5 01       	movw	r24, r10
    967e:	b4 01       	movw	r22, r8
    9680:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9684:	a5 01       	movw	r20, r10
    9686:	94 01       	movw	r18, r8
    9688:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    968c:	a5 01       	movw	r20, r10
    968e:	94 01       	movw	r18, r8
    9690:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9694:	6b 01       	movw	r12, r22
    9696:	7c 01       	movw	r14, r24
    9698:	2c e0       	ldi	r18, 0x0C	; 12
    969a:	32 e0       	ldi	r19, 0x02	; 2
    969c:	4b e8       	ldi	r20, 0x8B	; 139
    969e:	5f e3       	ldi	r21, 0x3F	; 63
    96a0:	c5 01       	movw	r24, r10
    96a2:	b4 01       	movw	r22, r8
    96a4:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    96a8:	a5 01       	movw	r20, r10
    96aa:	94 01       	movw	r18, r8
    96ac:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    96b0:	9b 01       	movw	r18, r22
    96b2:	ac 01       	movw	r20, r24
    96b4:	c7 01       	movw	r24, r14
    96b6:	b6 01       	movw	r22, r12
    96b8:	c8 d7       	rcall	.+3984   	; 0xa64a <__subsf3>
    96ba:	6b 01       	movw	r12, r22
    96bc:	7c 01       	movw	r14, r24
    96be:	28 eb       	ldi	r18, 0xB8	; 184
    96c0:	3e e1       	ldi	r19, 0x1E	; 30
    96c2:	45 e6       	ldi	r20, 0x65	; 101
    96c4:	51 e4       	ldi	r21, 0x41	; 65
    96c6:	c5 01       	movw	r24, r10
    96c8:	b4 01       	movw	r22, r8
    96ca:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    96ce:	9b 01       	movw	r18, r22
    96d0:	ac 01       	movw	r20, r24
    96d2:	c7 01       	movw	r24, r14
    96d4:	b6 01       	movw	r22, r12
    96d6:	ba d7       	rcall	.+3956   	; 0xa64c <__addsf3>
    96d8:	25 e8       	ldi	r18, 0x85	; 133
    96da:	3b ee       	ldi	r19, 0xEB	; 235
    96dc:	41 e3       	ldi	r20, 0x31	; 49
    96de:	52 e4       	ldi	r21, 0x42	; 66
    96e0:	b4 d7       	rcall	.+3944   	; 0xa64a <__subsf3>
    96e2:	6b 01       	movw	r12, r22
    96e4:	7c 01       	movw	r14, r24
    96e6:	be 01       	movw	r22, r28
    96e8:	dd 0f       	add	r29, r29
    96ea:	88 0b       	sbc	r24, r24
    96ec:	99 0b       	sbc	r25, r25
    96ee:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    96f2:	9b 01       	movw	r18, r22
    96f4:	ac 01       	movw	r20, r24
    96f6:	c7 01       	movw	r24, r14
    96f8:	b6 01       	movw	r22, r12
    96fa:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    96fe:	85 c0       	rjmp	.+266    	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    9700:	20 e0       	ldi	r18, 0x00	; 0
    9702:	30 e0       	ldi	r19, 0x00	; 0
    9704:	40 e2       	ldi	r20, 0x20	; 32
    9706:	51 e4       	ldi	r21, 0x41	; 65
    9708:	c7 01       	movw	r24, r14
    970a:	b6 01       	movw	r22, r12
    970c:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    9710:	18 16       	cp	r1, r24
    9712:	0c f0       	brlt	.+2      	; 0x9716 <corectTrv+0x18fc>
    9714:	50 c0       	rjmp	.+160    	; 0x97b6 <corectTrv+0x199c>
    9716:	20 e0       	ldi	r18, 0x00	; 0
    9718:	30 e0       	ldi	r19, 0x00	; 0
    971a:	40 e3       	ldi	r20, 0x30	; 48
    971c:	51 e4       	ldi	r21, 0x41	; 65
    971e:	c7 01       	movw	r24, r14
    9720:	b6 01       	movw	r22, r12
    9722:	f8 d7       	rcall	.+4080   	; 0xa714 <__cmpsf2>
    9724:	18 16       	cp	r1, r24
    9726:	0c f4       	brge	.+2      	; 0x972a <corectTrv+0x1910>
    9728:	46 c0       	rjmp	.+140    	; 0x97b6 <corectTrv+0x199c>
		{
			return( 0.026 * ds * ds * ds - 1.084 * ds * ds + 14.27 * ds - 40.99)* k;
    972a:	24 ef       	ldi	r18, 0xF4	; 244
    972c:	3d ef       	ldi	r19, 0xFD	; 253
    972e:	44 ed       	ldi	r20, 0xD4	; 212
    9730:	5c e3       	ldi	r21, 0x3C	; 60
    9732:	c5 01       	movw	r24, r10
    9734:	b4 01       	movw	r22, r8
    9736:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    973a:	a5 01       	movw	r20, r10
    973c:	94 01       	movw	r18, r8
    973e:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9742:	a5 01       	movw	r20, r10
    9744:	94 01       	movw	r18, r8
    9746:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    974a:	6b 01       	movw	r12, r22
    974c:	7c 01       	movw	r14, r24
    974e:	23 e8       	ldi	r18, 0x83	; 131
    9750:	30 ec       	ldi	r19, 0xC0	; 192
    9752:	4a e8       	ldi	r20, 0x8A	; 138
    9754:	5f e3       	ldi	r21, 0x3F	; 63
    9756:	c5 01       	movw	r24, r10
    9758:	b4 01       	movw	r22, r8
    975a:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    975e:	a5 01       	movw	r20, r10
    9760:	94 01       	movw	r18, r8
    9762:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9766:	9b 01       	movw	r18, r22
    9768:	ac 01       	movw	r20, r24
    976a:	c7 01       	movw	r24, r14
    976c:	b6 01       	movw	r22, r12
    976e:	6d d7       	rcall	.+3802   	; 0xa64a <__subsf3>
    9770:	6b 01       	movw	r12, r22
    9772:	7c 01       	movw	r14, r24
    9774:	2c ee       	ldi	r18, 0xEC	; 236
    9776:	31 e5       	ldi	r19, 0x51	; 81
    9778:	44 e6       	ldi	r20, 0x64	; 100
    977a:	51 e4       	ldi	r21, 0x41	; 65
    977c:	c5 01       	movw	r24, r10
    977e:	b4 01       	movw	r22, r8
    9780:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    9784:	9b 01       	movw	r18, r22
    9786:	ac 01       	movw	r20, r24
    9788:	c7 01       	movw	r24, r14
    978a:	b6 01       	movw	r22, r12
    978c:	5f d7       	rcall	.+3774   	; 0xa64c <__addsf3>
    978e:	23 ec       	ldi	r18, 0xC3	; 195
    9790:	35 ef       	ldi	r19, 0xF5	; 245
    9792:	43 e2       	ldi	r20, 0x23	; 35
    9794:	52 e4       	ldi	r21, 0x42	; 66
    9796:	59 d7       	rcall	.+3762   	; 0xa64a <__subsf3>
    9798:	6b 01       	movw	r12, r22
    979a:	7c 01       	movw	r14, r24
    979c:	be 01       	movw	r22, r28
    979e:	dd 0f       	add	r29, r29
    97a0:	88 0b       	sbc	r24, r24
    97a2:	99 0b       	sbc	r25, r25
    97a4:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    97a8:	9b 01       	movw	r18, r22
    97aa:	ac 01       	movw	r20, r24
    97ac:	c7 01       	movw	r24, r14
    97ae:	b6 01       	movw	r22, r12
    97b0:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    97b4:	2a c0       	rjmp	.+84     	; 0x980a <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 4)
    97b6:	20 e0       	ldi	r18, 0x00	; 0
    97b8:	30 e0       	ldi	r19, 0x00	; 0
    97ba:	40 e3       	ldi	r20, 0x30	; 48
    97bc:	51 e4       	ldi	r21, 0x41	; 65
    97be:	c7 01       	movw	r24, r14
    97c0:	b6 01       	movw	r22, r12
    97c2:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <__gesf2>
    97c6:	18 16       	cp	r1, r24
    97c8:	ec f4       	brge	.+58     	; 0x9804 <corectTrv+0x19ea>
		{
			return 25* k;
    97ca:	89 e1       	ldi	r24, 0x19	; 25
    97cc:	8c 9f       	mul	r24, r28
    97ce:	b0 01       	movw	r22, r0
    97d0:	8d 9f       	mul	r24, r29
    97d2:	70 0d       	add	r23, r0
    97d4:	11 24       	eor	r1, r1
    97d6:	07 2e       	mov	r0, r23
    97d8:	00 0c       	add	r0, r0
    97da:	88 0b       	sbc	r24, r24
    97dc:	99 0b       	sbc	r25, r25
    97de:	0e 94 29 54 	call	0xa852	; 0xa852 <__floatsisf>
    97e2:	13 c0       	rjmp	.+38     	; 0x980a <corectTrv+0x19f0>
		}
	}

	
	return 0;
    97e4:	60 e0       	ldi	r22, 0x00	; 0
    97e6:	70 e0       	ldi	r23, 0x00	; 0
    97e8:	cb 01       	movw	r24, r22
    97ea:	0f c0       	rjmp	.+30     	; 0x980a <corectTrv+0x19f0>
    97ec:	60 e0       	ldi	r22, 0x00	; 0
    97ee:	70 e0       	ldi	r23, 0x00	; 0
    97f0:	cb 01       	movw	r24, r22
    97f2:	0b c0       	rjmp	.+22     	; 0x980a <corectTrv+0x19f0>
    97f4:	60 e0       	ldi	r22, 0x00	; 0
    97f6:	70 e0       	ldi	r23, 0x00	; 0
    97f8:	cb 01       	movw	r24, r22
    97fa:	07 c0       	rjmp	.+14     	; 0x980a <corectTrv+0x19f0>
    97fc:	60 e0       	ldi	r22, 0x00	; 0
    97fe:	70 e0       	ldi	r23, 0x00	; 0
    9800:	cb 01       	movw	r24, r22
    9802:	03 c0       	rjmp	.+6      	; 0x980a <corectTrv+0x19f0>
    9804:	60 e0       	ldi	r22, 0x00	; 0
    9806:	70 e0       	ldi	r23, 0x00	; 0
    9808:	cb 01       	movw	r24, r22

}
    980a:	df 91       	pop	r29
    980c:	cf 91       	pop	r28
    980e:	ff 90       	pop	r15
    9810:	ef 90       	pop	r14
    9812:	df 90       	pop	r13
    9814:	cf 90       	pop	r12
    9816:	bf 90       	pop	r11
    9818:	af 90       	pop	r10
    981a:	9f 90       	pop	r9
    981c:	8f 90       	pop	r8
    981e:	7f 90       	pop	r7
    9820:	6f 90       	pop	r6
    9822:	5f 90       	pop	r5
    9824:	4f 90       	pop	r4
    9826:	08 95       	ret

00009828 <ReadSensors>:
float ConvertToLowPress(uint16_t ADC_value){
	return (ADC_value - Low_Limit_LP) * LP_max/ (Hi_Limit_LP - Low_Limit_LP) ;
}

void ReadSensors(xCompressor *comp)  
{ 
    9828:	ef 92       	push	r14
    982a:	ff 92       	push	r15
    982c:	0f 93       	push	r16
    982e:	1f 93       	push	r17
    9830:	cf 93       	push	r28
    9832:	df 93       	push	r29
    9834:	7c 01       	movw	r14, r24
 uint16_t temp = 0;
 const uint8_t samples = 10;        // determines the number of samples taken
 unsigned int sum;               // holds the summated samples
 uint8_t i;
 //static TickType_t countTrvTime=0;
 setAnalogMode(MODE_10_BIT);
    9836:	80 e0       	ldi	r24, 0x00	; 0
    9838:	0e 94 98 07 	call	0xf30	; 0xf30 <setAnalogMode>
    983c:	ca e0       	ldi	r28, 0x0A	; 10
 i = samples;                     // clean up for next channel
 sum = 0;
    983e:	00 e0       	ldi	r16, 0x00	; 0
    9840:	10 e0       	ldi	r17, 0x00	; 0
 
 do
 {
	 startAnalogConversion(1, 0);
    9842:	60 e0       	ldi	r22, 0x00	; 0
    9844:	81 e0       	ldi	r24, 0x01	; 1
    9846:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
	 while( analogIsConverting() )_delay_us(25);//portYIELD();
    984a:	01 c0       	rjmp	.+2      	; 0x984e <ReadSensors+0x26>
    984c:	00 00       	nop
    984e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9852:	81 11       	cpse	r24, r1
    9854:	fb cf       	rjmp	.-10     	; 0x984c <ReadSensors+0x24>
	 sum += 	analogConversionResult();
    9856:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    985a:	08 0f       	add	r16, r24
    985c:	19 1f       	adc	r17, r25
    985e:	c1 50       	subi	r28, 0x01	; 1
	 //temp =analogConversionResult();
 } while (--i);
    9860:	81 f7       	brne	.-32     	; 0x9842 <ReadSensors+0x1a>
 temp = (unsigned int) (sum / samples);
 comp->Bac_Temp = ConvertToTemp(temp);
    9862:	98 01       	movw	r18, r16
    9864:	ad ec       	ldi	r26, 0xCD	; 205
    9866:	bc ec       	ldi	r27, 0xCC	; 204
    9868:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    986c:	96 95       	lsr	r25
    986e:	87 95       	ror	r24
    9870:	96 95       	lsr	r25
    9872:	87 95       	ror	r24
    9874:	96 95       	lsr	r25
    9876:	87 95       	ror	r24
    9878:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <ConvertToTemp>
    987c:	f7 01       	movw	r30, r14
    987e:	66 8b       	std	Z+22, r22	; 0x16
    9880:	77 8b       	std	Z+23, r23	; 0x17
    9882:	80 8f       	std	Z+24, r24	; 0x18
    9884:	91 8f       	std	Z+25, r25	; 0x19
 //read DHW
 PORTL &= ~ (1 << PL2);//A0
    9886:	eb e0       	ldi	r30, 0x0B	; 11
    9888:	f1 e0       	ldi	r31, 0x01	; 1
    988a:	80 81       	ld	r24, Z
    988c:	8b 7f       	andi	r24, 0xFB	; 251
    988e:	80 83       	st	Z, r24
 PORTL &= ~ (1 << PL1);//A1
    9890:	80 81       	ld	r24, Z
    9892:	8d 7f       	andi	r24, 0xFD	; 253
    9894:	80 83       	st	Z, r24
 PORTL |=   (1 << PL0);//A2
    9896:	80 81       	ld	r24, Z
    9898:	81 60       	ori	r24, 0x01	; 1
    989a:	80 83       	st	Z, r24
    989c:	ca e0       	ldi	r28, 0x0A	; 10
 i = samples;
 sum = 0;
    989e:	00 e0       	ldi	r16, 0x00	; 0
    98a0:	10 e0       	ldi	r17, 0x00	; 0

 do
 {
	 startAnalogConversion(0, 0);
    98a2:	60 e0       	ldi	r22, 0x00	; 0
    98a4:	80 e0       	ldi	r24, 0x00	; 0
    98a6:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
	 while( analogIsConverting())_delay_us(25);// portYIELD();
    98aa:	01 c0       	rjmp	.+2      	; 0x98ae <ReadSensors+0x86>
    98ac:	00 00       	nop
    98ae:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    98b2:	81 11       	cpse	r24, r1
    98b4:	fb cf       	rjmp	.-10     	; 0x98ac <ReadSensors+0x84>
	 sum += 	analogConversionResult();
    98b6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    98ba:	08 0f       	add	r16, r24
    98bc:	19 1f       	adc	r17, r25
    98be:	c1 50       	subi	r28, 0x01	; 1
 } while (--i);
    98c0:	81 f7       	brne	.-32     	; 0x98a2 <ReadSensors+0x7a>
 //temp = analogConversionResult();
 temp = (unsigned int) (sum / samples);
 comp->Dhw_Temp = ConvertToTemp(temp);
    98c2:	98 01       	movw	r18, r16
    98c4:	ad ec       	ldi	r26, 0xCD	; 205
    98c6:	bc ec       	ldi	r27, 0xCC	; 204
    98c8:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    98cc:	96 95       	lsr	r25
    98ce:	87 95       	ror	r24
    98d0:	96 95       	lsr	r25
    98d2:	87 95       	ror	r24
    98d4:	96 95       	lsr	r25
    98d6:	87 95       	ror	r24
    98d8:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <ConvertToTemp>
    98dc:	f7 01       	movw	r30, r14
    98de:	62 8b       	std	Z+18, r22	; 0x12
    98e0:	73 8b       	std	Z+19, r23	; 0x13
    98e2:	84 8b       	std	Z+20, r24	; 0x14
    98e4:	95 8b       	std	Z+21, r25	; 0x15
  //------------------------------------------
  
  //read tempout
  PORTL |=   (1 << PL2);//A0
    98e6:	eb e0       	ldi	r30, 0x0B	; 11
    98e8:	f1 e0       	ldi	r31, 0x01	; 1
    98ea:	80 81       	ld	r24, Z
    98ec:	84 60       	ori	r24, 0x04	; 4
    98ee:	80 83       	st	Z, r24
  PORTL &= ~ (1 << PL1);//A1
    98f0:	80 81       	ld	r24, Z
    98f2:	8d 7f       	andi	r24, 0xFD	; 253
    98f4:	80 83       	st	Z, r24
  PORTL |=   (1 << PL0);//A2
    98f6:	80 81       	ld	r24, Z
    98f8:	81 60       	ori	r24, 0x01	; 1
    98fa:	80 83       	st	Z, r24
    98fc:	ca e0       	ldi	r28, 0x0A	; 10
  i = samples;
  sum = 0;
    98fe:	00 e0       	ldi	r16, 0x00	; 0
    9900:	10 e0       	ldi	r17, 0x00	; 0

  do
  {
	  startAnalogConversion(0, 0);
    9902:	60 e0       	ldi	r22, 0x00	; 0
    9904:	80 e0       	ldi	r24, 0x00	; 0
    9906:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
	  while( analogIsConverting())_delay_us(25);// portYIELD();
    990a:	01 c0       	rjmp	.+2      	; 0x990e <ReadSensors+0xe6>
    990c:	00 00       	nop
    990e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9912:	81 11       	cpse	r24, r1
    9914:	fb cf       	rjmp	.-10     	; 0x990c <ReadSensors+0xe4>
	  sum += 	analogConversionResult();
    9916:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    991a:	08 0f       	add	r16, r24
    991c:	19 1f       	adc	r17, r25
    991e:	c1 50       	subi	r28, 0x01	; 1
  } while (--i);
    9920:	81 f7       	brne	.-32     	; 0x9902 <ReadSensors+0xda>
 //temp = analogConversionResult();
  temp = (unsigned int) (sum / samples);
  comp->Temp_Out = ConvertToTemp(temp);
    9922:	98 01       	movw	r18, r16
    9924:	ad ec       	ldi	r26, 0xCD	; 205
    9926:	bc ec       	ldi	r27, 0xCC	; 204
    9928:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    992c:	96 95       	lsr	r25
    992e:	87 95       	ror	r24
    9930:	96 95       	lsr	r25
    9932:	87 95       	ror	r24
    9934:	96 95       	lsr	r25
    9936:	87 95       	ror	r24
    9938:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <ConvertToTemp>
    993c:	f7 01       	movw	r30, r14
    993e:	e2 5b       	subi	r30, 0xB2	; 178
    9940:	ff 4f       	sbci	r31, 0xFF	; 255
    9942:	60 83       	st	Z, r22
    9944:	71 83       	std	Z+1, r23	; 0x01
    9946:	82 83       	std	Z+2, r24	; 0x02
    9948:	93 83       	std	Z+3, r25	; 0x03
   /*
  */
  //------------------------------------------
 if(comp->Index==1){
    994a:	b4 96       	adiw	r30, 0x24	; 36
    994c:	80 81       	ld	r24, Z
    994e:	91 81       	ldd	r25, Z+1	; 0x01
    9950:	01 97       	sbiw	r24, 0x01	; 1
    9952:	09 f0       	breq	.+2      	; 0x9956 <ReadSensors+0x12e>
    9954:	9d c1       	rjmp	.+826    	; 0x9c90 <ReadSensors+0x468>
	 
	 //read High_Pressure_1
	 PORTL |=    (1 << PL2);//a0
    9956:	eb e0       	ldi	r30, 0x0B	; 11
    9958:	f1 e0       	ldi	r31, 0x01	; 1
    995a:	80 81       	ld	r24, Z
    995c:	84 60       	ori	r24, 0x04	; 4
    995e:	80 83       	st	Z, r24
	 PORTL |=    (1 << PL1);//a1
    9960:	80 81       	ld	r24, Z
    9962:	82 60       	ori	r24, 0x02	; 2
    9964:	80 83       	st	Z, r24
	 PORTL &= ~  (1 << PL0);//a2
    9966:	80 81       	ld	r24, Z
    9968:	8e 7f       	andi	r24, 0xFE	; 254
    996a:	80 83       	st	Z, r24
    996c:	ca e0       	ldi	r28, 0x0A	; 10
	 i = samples;
	 sum = 0;
    996e:	00 e0       	ldi	r16, 0x00	; 0
    9970:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {		     startAnalogConversion(0, 0);
    9972:	60 e0       	ldi	r22, 0x00	; 0
    9974:	80 e0       	ldi	r24, 0x00	; 0
    9976:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() ) _delay_us(25);//portYIELD();
    997a:	01 c0       	rjmp	.+2      	; 0x997e <ReadSensors+0x156>
    997c:	00 00       	nop
    997e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9982:	81 11       	cpse	r24, r1
    9984:	fb cf       	rjmp	.-10     	; 0x997c <ReadSensors+0x154>
		 sum += analogConversionResult();
    9986:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    998a:	08 0f       	add	r16, r24
    998c:	19 1f       	adc	r17, r25
    998e:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9990:	81 f7       	brne	.-32     	; 0x9972 <ReadSensors+0x14a>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->High_Press = ConvertToHighPress(temp);
    9992:	98 01       	movw	r18, r16
    9994:	ad ec       	ldi	r26, 0xCD	; 205
    9996:	bc ec       	ldi	r27, 0xCC	; 204
    9998:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    999c:	96 95       	lsr	r25
    999e:	87 95       	ror	r24
    99a0:	96 95       	lsr	r25
    99a2:	87 95       	ror	r24
    99a4:	96 95       	lsr	r25
    99a6:	87 95       	ror	r24
    99a8:	bc 01       	movw	r22, r24
    99aa:	80 e0       	ldi	r24, 0x00	; 0
    99ac:	90 e0       	ldi	r25, 0x00	; 0
    99ae:	4f d7       	rcall	.+3742   	; 0xa84e <__floatunsisf>
    99b0:	20 e0       	ldi	r18, 0x00	; 0
    99b2:	30 e0       	ldi	r19, 0x00	; 0
    99b4:	4c ec       	ldi	r20, 0xCC	; 204
    99b6:	52 e4       	ldi	r21, 0x42	; 66
    99b8:	48 d6       	rcall	.+3216   	; 0xa64a <__subsf3>
    99ba:	20 e0       	ldi	r18, 0x00	; 0
    99bc:	30 e0       	ldi	r19, 0x00	; 0
    99be:	48 e0       	ldi	r20, 0x08	; 8
    99c0:	52 e4       	ldi	r21, 0x42	; 66
    99c2:	0e 94 22 55 	call	0xaa44	; 0xaa44 <__mulsf3>
    99c6:	20 e0       	ldi	r18, 0x00	; 0
    99c8:	30 e0       	ldi	r19, 0x00	; 0
    99ca:	4d e4       	ldi	r20, 0x4D	; 77
    99cc:	54 e4       	ldi	r21, 0x44	; 68
    99ce:	a6 d6       	rcall	.+3404   	; 0xa71c <__divsf3>
    99d0:	f7 01       	movw	r30, r14
    99d2:	62 8f       	std	Z+26, r22	; 0x1a
    99d4:	73 8f       	std	Z+27, r23	; 0x1b
    99d6:	84 8f       	std	Z+28, r24	; 0x1c
    99d8:	95 8f       	std	Z+29, r25	; 0x1d
	 //read Low_Pressure_1
	 PORTL &= ~   (1 << PL2);
    99da:	eb e0       	ldi	r30, 0x0B	; 11
    99dc:	f1 e0       	ldi	r31, 0x01	; 1
    99de:	80 81       	ld	r24, Z
    99e0:	8b 7f       	andi	r24, 0xFB	; 251
    99e2:	80 83       	st	Z, r24
	 PORTL &= ~   (1 << PL1);
    99e4:	80 81       	ld	r24, Z
    99e6:	8d 7f       	andi	r24, 0xFD	; 253
    99e8:	80 83       	st	Z, r24
	 PORTL &= ~   (1 << PL0);
    99ea:	80 81       	ld	r24, Z
    99ec:	8e 7f       	andi	r24, 0xFE	; 254
    99ee:	80 83       	st	Z, r24
    99f0:	ca e0       	ldi	r28, 0x0A	; 10
	 i = samples;
	 sum = 0;
    99f2:	00 e0       	ldi	r16, 0x00	; 0
    99f4:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(0, 0);
    99f6:	60 e0       	ldi	r22, 0x00	; 0
    99f8:	80 e0       	ldi	r24, 0x00	; 0
    99fa:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    99fe:	01 c0       	rjmp	.+2      	; 0x9a02 <ReadSensors+0x1da>
    9a00:	00 00       	nop
    9a02:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9a06:	81 11       	cpse	r24, r1
    9a08:	fb cf       	rjmp	.-10     	; 0x9a00 <ReadSensors+0x1d8>
		 sum += analogConversionResult();
    9a0a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9a0e:	08 0f       	add	r16, r24
    9a10:	19 1f       	adc	r17, r25
    9a12:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9a14:	81 f7       	brne	.-32     	; 0x99f6 <ReadSensors+0x1ce>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Low_Press = ConvertToLowPress( temp );
    9a16:	98 01       	movw	r18, r16
    9a18:	ad ec       	ldi	r26, 0xCD	; 205
    9a1a:	bc ec       	ldi	r27, 0xCC	; 204
    9a1c:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    9a20:	96 95       	lsr	r25
    9a22:	87 95       	ror	r24
    9a24:	96 95       	lsr	r25
    9a26:	87 95       	ror	r24
    9a28:	96 95       	lsr	r25
    9a2a:	87 95       	ror	r24
    9a2c:	bc 01       	movw	r22, r24
    9a2e:	80 e0       	ldi	r24, 0x00	; 0
    9a30:	90 e0       	ldi	r25, 0x00	; 0
    9a32:	0d d7       	rcall	.+3610   	; 0xa84e <__floatunsisf>
    9a34:	20 e0       	ldi	r18, 0x00	; 0
    9a36:	30 e0       	ldi	r19, 0x00	; 0
    9a38:	4c e5       	ldi	r20, 0x5C	; 92
    9a3a:	52 e4       	ldi	r21, 0x42	; 66
    9a3c:	06 d6       	rcall	.+3084   	; 0xa64a <__subsf3>
    9a3e:	20 e0       	ldi	r18, 0x00	; 0
    9a40:	30 e0       	ldi	r19, 0x00	; 0
    9a42:	40 e9       	ldi	r20, 0x90	; 144
    9a44:	51 e4       	ldi	r21, 0x41	; 65
    9a46:	fe d7       	rcall	.+4092   	; 0xaa44 <__mulsf3>
    9a48:	20 e0       	ldi	r18, 0x00	; 0
    9a4a:	30 ec       	ldi	r19, 0xC0	; 192
    9a4c:	48 e5       	ldi	r20, 0x58	; 88
    9a4e:	54 e4       	ldi	r21, 0x44	; 68
    9a50:	65 d6       	rcall	.+3274   	; 0xa71c <__divsf3>
    9a52:	f7 01       	movw	r30, r14
    9a54:	66 8f       	std	Z+30, r22	; 0x1e
    9a56:	77 8f       	std	Z+31, r23	; 0x1f
    9a58:	80 a3       	std	Z+32, r24	; 0x20
    9a5a:	91 a3       	std	Z+33, r25	; 0x21
    9a5c:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9a5e:	00 e0       	ldi	r16, 0x00	; 0
    9a60:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(9, 0);
    9a62:	60 e0       	ldi	r22, 0x00	; 0
    9a64:	89 e0       	ldi	r24, 0x09	; 9
    9a66:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9a6a:	01 c0       	rjmp	.+2      	; 0x9a6e <ReadSensors+0x246>
    9a6c:	00 00       	nop
    9a6e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9a72:	81 11       	cpse	r24, r1
    9a74:	fb cf       	rjmp	.-10     	; 0x9a6c <ReadSensors+0x244>
		 sum += analogConversionResult();
    9a76:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9a7a:	08 0f       	add	r16, r24
    9a7c:	19 1f       	adc	r17, r25
    9a7e:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9a80:	81 f7       	brne	.-32     	; 0x9a62 <ReadSensors+0x23a>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Heat_Out = ConvertToTemp( temp );
    9a82:	98 01       	movw	r18, r16
    9a84:	ad ec       	ldi	r26, 0xCD	; 205
    9a86:	bc ec       	ldi	r27, 0xCC	; 204
    9a88:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    9a8c:	96 95       	lsr	r25
    9a8e:	87 95       	ror	r24
    9a90:	96 95       	lsr	r25
    9a92:	87 95       	ror	r24
    9a94:	96 95       	lsr	r25
    9a96:	87 95       	ror	r24
    9a98:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <ConvertToTemp>
    9a9c:	f7 01       	movw	r30, r14
    9a9e:	62 a7       	std	Z+42, r22	; 0x2a
    9aa0:	73 a7       	std	Z+43, r23	; 0x2b
    9aa2:	84 a7       	std	Z+44, r24	; 0x2c
    9aa4:	95 a7       	std	Z+45, r25	; 0x2d
    9aa6:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9aa8:	00 e0       	ldi	r16, 0x00	; 0
    9aaa:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(10, 0);
    9aac:	60 e0       	ldi	r22, 0x00	; 0
    9aae:	8a e0       	ldi	r24, 0x0A	; 10
    9ab0:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9ab4:	01 c0       	rjmp	.+2      	; 0x9ab8 <ReadSensors+0x290>
    9ab6:	00 00       	nop
    9ab8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9abc:	81 11       	cpse	r24, r1
    9abe:	fb cf       	rjmp	.-10     	; 0x9ab6 <ReadSensors+0x28e>
		 sum += analogConversionResult();
    9ac0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9ac4:	08 0f       	add	r16, r24
    9ac6:	19 1f       	adc	r17, r25
    9ac8:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9aca:	81 f7       	brne	.-32     	; 0x9aac <ReadSensors+0x284>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Heat_In = ConvertToTemp( temp );
    9acc:	98 01       	movw	r18, r16
    9ace:	ad ec       	ldi	r26, 0xCD	; 205
    9ad0:	bc ec       	ldi	r27, 0xCC	; 204
    9ad2:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    9ad6:	96 95       	lsr	r25
    9ad8:	87 95       	ror	r24
    9ada:	96 95       	lsr	r25
    9adc:	87 95       	ror	r24
    9ade:	96 95       	lsr	r25
    9ae0:	87 95       	ror	r24
    9ae2:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <ConvertToTemp>
    9ae6:	f7 01       	movw	r30, r14
    9ae8:	66 a7       	std	Z+46, r22	; 0x2e
    9aea:	77 a7       	std	Z+47, r23	; 0x2f
    9aec:	80 ab       	std	Z+48, r24	; 0x30
    9aee:	91 ab       	std	Z+49, r25	; 0x31
    9af0:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9af2:	00 e0       	ldi	r16, 0x00	; 0
    9af4:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(11, 0);
    9af6:	60 e0       	ldi	r22, 0x00	; 0
    9af8:	8b e0       	ldi	r24, 0x0B	; 11
    9afa:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9afe:	01 c0       	rjmp	.+2      	; 0x9b02 <ReadSensors+0x2da>
    9b00:	00 00       	nop
    9b02:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9b06:	81 11       	cpse	r24, r1
    9b08:	fb cf       	rjmp	.-10     	; 0x9b00 <ReadSensors+0x2d8>
		 sum += analogConversionResult();
    9b0a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9b0e:	08 0f       	add	r16, r24
    9b10:	19 1f       	adc	r17, r25
    9b12:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9b14:	81 f7       	brne	.-32     	; 0x9af6 <ReadSensors+0x2ce>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Src_In = ConvertToTemp( temp );
    9b16:	98 01       	movw	r18, r16
    9b18:	ad ec       	ldi	r26, 0xCD	; 205
    9b1a:	bc ec       	ldi	r27, 0xCC	; 204
    9b1c:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    9b20:	96 95       	lsr	r25
    9b22:	87 95       	ror	r24
    9b24:	96 95       	lsr	r25
    9b26:	87 95       	ror	r24
    9b28:	96 95       	lsr	r25
    9b2a:	87 95       	ror	r24
    9b2c:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <ConvertToTemp>
    9b30:	f7 01       	movw	r30, r14
    9b32:	62 ab       	std	Z+50, r22	; 0x32
    9b34:	73 ab       	std	Z+51, r23	; 0x33
    9b36:	84 ab       	std	Z+52, r24	; 0x34
    9b38:	95 ab       	std	Z+53, r25	; 0x35
    9b3a:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9b3c:	00 e0       	ldi	r16, 0x00	; 0
    9b3e:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(12, 0);
    9b40:	60 e0       	ldi	r22, 0x00	; 0
    9b42:	8c e0       	ldi	r24, 0x0C	; 12
    9b44:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);
    9b48:	01 c0       	rjmp	.+2      	; 0x9b4c <ReadSensors+0x324>
    9b4a:	00 00       	nop
    9b4c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9b50:	81 11       	cpse	r24, r1
    9b52:	fb cf       	rjmp	.-10     	; 0x9b4a <ReadSensors+0x322>
		 sum += analogConversionResult();
    9b54:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9b58:	08 0f       	add	r16, r24
    9b5a:	19 1f       	adc	r17, r25
    9b5c:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9b5e:	81 f7       	brne	.-32     	; 0x9b40 <ReadSensors+0x318>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Src_Out = ConvertToTemp( temp );
    9b60:	98 01       	movw	r18, r16
    9b62:	ad ec       	ldi	r26, 0xCD	; 205
    9b64:	bc ec       	ldi	r27, 0xCC	; 204
    9b66:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    9b6a:	96 95       	lsr	r25
    9b6c:	87 95       	ror	r24
    9b6e:	96 95       	lsr	r25
    9b70:	87 95       	ror	r24
    9b72:	96 95       	lsr	r25
    9b74:	87 95       	ror	r24
    9b76:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <ConvertToTemp>
    9b7a:	f7 01       	movw	r30, r14
    9b7c:	66 ab       	std	Z+54, r22	; 0x36
    9b7e:	77 ab       	std	Z+55, r23	; 0x37
    9b80:	80 af       	std	Z+56, r24	; 0x38
    9b82:	91 af       	std	Z+57, r25	; 0x39
    9b84:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9b86:	00 e0       	ldi	r16, 0x00	; 0
    9b88:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(13, 0);
    9b8a:	60 e0       	ldi	r22, 0x00	; 0
    9b8c:	8d e0       	ldi	r24, 0x0D	; 13
    9b8e:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9b92:	01 c0       	rjmp	.+2      	; 0x9b96 <ReadSensors+0x36e>
    9b94:	00 00       	nop
    9b96:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9b9a:	81 11       	cpse	r24, r1
    9b9c:	fb cf       	rjmp	.-10     	; 0x9b94 <ReadSensors+0x36c>
		 sum += analogConversionResult();
    9b9e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9ba2:	08 0f       	add	r16, r24
    9ba4:	19 1f       	adc	r17, r25
    9ba6:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9ba8:	81 f7       	brne	.-32     	; 0x9b8a <ReadSensors+0x362>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Ex_Comp = ConvertToTemp( temp );
    9baa:	98 01       	movw	r18, r16
    9bac:	ad ec       	ldi	r26, 0xCD	; 205
    9bae:	bc ec       	ldi	r27, 0xCC	; 204
    9bb0:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    9bb4:	96 95       	lsr	r25
    9bb6:	87 95       	ror	r24
    9bb8:	96 95       	lsr	r25
    9bba:	87 95       	ror	r24
    9bbc:	96 95       	lsr	r25
    9bbe:	87 95       	ror	r24
    9bc0:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <ConvertToTemp>
    9bc4:	f7 01       	movw	r30, r14
    9bc6:	62 af       	std	Z+58, r22	; 0x3a
    9bc8:	73 af       	std	Z+59, r23	; 0x3b
    9bca:	84 af       	std	Z+60, r24	; 0x3c
    9bcc:	95 af       	std	Z+61, r25	; 0x3d
    9bce:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9bd0:	00 e0       	ldi	r16, 0x00	; 0
    9bd2:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(14, 0);
    9bd4:	60 e0       	ldi	r22, 0x00	; 0
    9bd6:	8e e0       	ldi	r24, 0x0E	; 14
    9bd8:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9bdc:	01 c0       	rjmp	.+2      	; 0x9be0 <ReadSensors+0x3b8>
    9bde:	00 00       	nop
    9be0:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9be4:	81 11       	cpse	r24, r1
    9be6:	fb cf       	rjmp	.-10     	; 0x9bde <ReadSensors+0x3b6>
		 sum += analogConversionResult();
    9be8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9bec:	08 0f       	add	r16, r24
    9bee:	19 1f       	adc	r17, r25
    9bf0:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9bf2:	81 f7       	brne	.-32     	; 0x9bd4 <ReadSensors+0x3ac>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Suc_Comp = ConvertToTemp( temp );
    9bf4:	98 01       	movw	r18, r16
    9bf6:	ad ec       	ldi	r26, 0xCD	; 205
    9bf8:	bc ec       	ldi	r27, 0xCC	; 204
    9bfa:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    9bfe:	96 95       	lsr	r25
    9c00:	87 95       	ror	r24
    9c02:	96 95       	lsr	r25
    9c04:	87 95       	ror	r24
    9c06:	96 95       	lsr	r25
    9c08:	87 95       	ror	r24
    9c0a:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <ConvertToTemp>
    9c0e:	f7 01       	movw	r30, r14
    9c10:	fe 96       	adiw	r30, 0x3e	; 62
    9c12:	60 83       	st	Z, r22
    9c14:	71 83       	std	Z+1, r23	; 0x01
    9c16:	82 83       	std	Z+2, r24	; 0x02
    9c18:	93 83       	std	Z+3, r25	; 0x03
    9c1a:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9c1c:	00 e0       	ldi	r16, 0x00	; 0
    9c1e:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(15, 0);
    9c20:	60 e0       	ldi	r22, 0x00	; 0
    9c22:	8f e0       	ldi	r24, 0x0F	; 15
    9c24:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9c28:	01 c0       	rjmp	.+2      	; 0x9c2c <ReadSensors+0x404>
    9c2a:	00 00       	nop
    9c2c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9c30:	81 11       	cpse	r24, r1
    9c32:	fb cf       	rjmp	.-10     	; 0x9c2a <ReadSensors+0x402>
		 sum += analogConversionResult();
    9c34:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9c38:	08 0f       	add	r16, r24
    9c3a:	19 1f       	adc	r17, r25
    9c3c:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9c3e:	81 f7       	brne	.-32     	; 0x9c20 <ReadSensors+0x3f8>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Cond_Temp = ConvertToTemp( temp )	;
    9c40:	98 01       	movw	r18, r16
    9c42:	ad ec       	ldi	r26, 0xCD	; 205
    9c44:	bc ec       	ldi	r27, 0xCC	; 204
    9c46:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <__umulhisi3>
    9c4a:	96 95       	lsr	r25
    9c4c:	87 95       	ror	r24
    9c4e:	96 95       	lsr	r25
    9c50:	87 95       	ror	r24
    9c52:	96 95       	lsr	r25
    9c54:	87 95       	ror	r24
    9c56:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <ConvertToTemp>
    9c5a:	f7 01       	movw	r30, r14
    9c5c:	ee 5b       	subi	r30, 0xBE	; 190
    9c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    9c60:	60 83       	st	Z, r22
    9c62:	71 83       	std	Z+1, r23	; 0x01
    9c64:	82 83       	std	Z+2, r24	; 0x02
    9c66:	93 83       	std	Z+3, r25	; 0x03
	 //--------------------------------------------------------------
	 comp->SuperHeat=ReadSuperHeat (comp);
    9c68:	c7 01       	movw	r24, r14
    9c6a:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <ReadSuperHeat>
    9c6e:	f7 01       	movw	r30, r14
    9c70:	ea 5b       	subi	r30, 0xBA	; 186
    9c72:	ff 4f       	sbci	r31, 0xFF	; 255
    9c74:	60 83       	st	Z, r22
    9c76:	71 83       	std	Z+1, r23	; 0x01
    9c78:	82 83       	std	Z+2, r24	; 0x02
    9c7a:	93 83       	std	Z+3, r25	; 0x03
	 comp->SuperCool=ReadSuperCool (comp);				
    9c7c:	c7 01       	movw	r24, r14
    9c7e:	0e 94 a4 3e 	call	0x7d48	; 0x7d48 <ReadSuperCool>
    9c82:	f7 01       	movw	r30, r14
    9c84:	e6 5b       	subi	r30, 0xB6	; 182
    9c86:	ff 4f       	sbci	r31, 0xFF	; 255
    9c88:	60 83       	st	Z, r22
    9c8a:	71 83       	std	Z+1, r23	; 0x01
    9c8c:	82 83       	std	Z+2, r24	; 0x02
    9c8e:	93 83       	std	Z+3, r25	; 0x03
						}
						
    if(comp->Index==2) 
    9c90:	f7 01       	movw	r30, r14
    9c92:	ee 58       	subi	r30, 0x8E	; 142
    9c94:	ff 4f       	sbci	r31, 0xFF	; 255
    9c96:	80 81       	ld	r24, Z
    9c98:	91 81       	ldd	r25, Z+1	; 0x01
    9c9a:	02 97       	sbiw	r24, 0x02	; 2
    9c9c:	09 f0       	breq	.+2      	; 0x9ca0 <ReadSensors+0x478>
    9c9e:	07 c1       	rjmp	.+526    	; 0x9eae <ReadSensors+0x686>
	{
					 //read High_Pressure_1
					 PORTL |=    (1 << PL2);//a0
    9ca0:	eb e0       	ldi	r30, 0x0B	; 11
    9ca2:	f1 e0       	ldi	r31, 0x01	; 1
    9ca4:	80 81       	ld	r24, Z
    9ca6:	84 60       	ori	r24, 0x04	; 4
    9ca8:	80 83       	st	Z, r24
					 PORTL &= ~  (1 << PL1);//a1
    9caa:	80 81       	ld	r24, Z
    9cac:	8d 7f       	andi	r24, 0xFD	; 253
    9cae:	80 83       	st	Z, r24
					 PORTL &= ~  (1 << PL0);//a2
    9cb0:	80 81       	ld	r24, Z
    9cb2:	8e 7f       	andi	r24, 0xFE	; 254
    9cb4:	80 83       	st	Z, r24
					 startAnalogConversion(0, 0);
    9cb6:	60 e0       	ldi	r22, 0x00	; 0
    9cb8:	80 e0       	ldi	r24, 0x00	; 0
    9cba:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					 while( analogIsConverting() )
    9cbe:	01 c0       	rjmp	.+2      	; 0x9cc2 <ReadSensors+0x49a>
    9cc0:	00 00       	nop
    9cc2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9cc6:	81 11       	cpse	r24, r1
					 _delay_us(25);//portYIELD();
					 temp = analogConversionResult();
    9cc8:	fb cf       	rjmp	.-10     	; 0x9cc0 <ReadSensors+0x498>
    9cca:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					 comp->High_Press = ConvertToHighPress(temp);
    9cce:	bc 01       	movw	r22, r24
    9cd0:	80 e0       	ldi	r24, 0x00	; 0
    9cd2:	90 e0       	ldi	r25, 0x00	; 0
    9cd4:	bc d5       	rcall	.+2936   	; 0xa84e <__floatunsisf>
    9cd6:	20 e0       	ldi	r18, 0x00	; 0
    9cd8:	30 e0       	ldi	r19, 0x00	; 0
    9cda:	4c ec       	ldi	r20, 0xCC	; 204
    9cdc:	52 e4       	ldi	r21, 0x42	; 66
    9cde:	b5 d4       	rcall	.+2410   	; 0xa64a <__subsf3>
    9ce0:	20 e0       	ldi	r18, 0x00	; 0
    9ce2:	30 e0       	ldi	r19, 0x00	; 0
    9ce4:	48 e0       	ldi	r20, 0x08	; 8
    9ce6:	52 e4       	ldi	r21, 0x42	; 66
    9ce8:	ad d6       	rcall	.+3418   	; 0xaa44 <__mulsf3>
    9cea:	20 e0       	ldi	r18, 0x00	; 0
    9cec:	30 e0       	ldi	r19, 0x00	; 0
    9cee:	4d e4       	ldi	r20, 0x4D	; 77
    9cf0:	54 e4       	ldi	r21, 0x44	; 68
    9cf2:	14 d5       	rcall	.+2600   	; 0xa71c <__divsf3>
    9cf4:	f7 01       	movw	r30, r14
    9cf6:	62 8f       	std	Z+26, r22	; 0x1a
    9cf8:	73 8f       	std	Z+27, r23	; 0x1b
    9cfa:	84 8f       	std	Z+28, r24	; 0x1c
    9cfc:	95 8f       	std	Z+29, r25	; 0x1d
					 //read Low_Pressure_1
					 PORTL &= ~   (1 << PL2);
    9cfe:	eb e0       	ldi	r30, 0x0B	; 11
    9d00:	f1 e0       	ldi	r31, 0x01	; 1
    9d02:	80 81       	ld	r24, Z
    9d04:	8b 7f       	andi	r24, 0xFB	; 251
    9d06:	80 83       	st	Z, r24
					 PORTL |=     (1 << PL1);
    9d08:	80 81       	ld	r24, Z
    9d0a:	82 60       	ori	r24, 0x02	; 2
    9d0c:	80 83       	st	Z, r24
					 PORTL &= ~   (1 << PL0);
    9d0e:	80 81       	ld	r24, Z
    9d10:	8e 7f       	andi	r24, 0xFE	; 254
    9d12:	80 83       	st	Z, r24
					 startAnalogConversion(0, 0);
    9d14:	60 e0       	ldi	r22, 0x00	; 0
    9d16:	80 e0       	ldi	r24, 0x00	; 0
    9d18:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					 while( analogIsConverting() )
    9d1c:	01 c0       	rjmp	.+2      	; 0x9d20 <ReadSensors+0x4f8>
    9d1e:	00 00       	nop
    9d20:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9d24:	81 11       	cpse	r24, r1
					_delay_us(25);// portYIELD();
					 temp = analogConversionResult();
    9d26:	fb cf       	rjmp	.-10     	; 0x9d1e <ReadSensors+0x4f6>
					 comp->Low_Press = ConvertToLowPress( temp );
    9d28:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9d2c:	bc 01       	movw	r22, r24
    9d2e:	80 e0       	ldi	r24, 0x00	; 0
    9d30:	90 e0       	ldi	r25, 0x00	; 0
    9d32:	8d d5       	rcall	.+2842   	; 0xa84e <__floatunsisf>
    9d34:	20 e0       	ldi	r18, 0x00	; 0
    9d36:	30 e0       	ldi	r19, 0x00	; 0
    9d38:	4c e5       	ldi	r20, 0x5C	; 92
    9d3a:	52 e4       	ldi	r21, 0x42	; 66
    9d3c:	86 d4       	rcall	.+2316   	; 0xa64a <__subsf3>
    9d3e:	20 e0       	ldi	r18, 0x00	; 0
    9d40:	30 e0       	ldi	r19, 0x00	; 0
    9d42:	40 e9       	ldi	r20, 0x90	; 144
    9d44:	51 e4       	ldi	r21, 0x41	; 65
    9d46:	7e d6       	rcall	.+3324   	; 0xaa44 <__mulsf3>
    9d48:	20 e0       	ldi	r18, 0x00	; 0
    9d4a:	30 ec       	ldi	r19, 0xC0	; 192
    9d4c:	48 e5       	ldi	r20, 0x58	; 88
    9d4e:	54 e4       	ldi	r21, 0x44	; 68
    9d50:	e5 d4       	rcall	.+2506   	; 0xa71c <__divsf3>
    9d52:	f7 01       	movw	r30, r14
    9d54:	66 8f       	std	Z+30, r22	; 0x1e
    9d56:	77 8f       	std	Z+31, r23	; 0x1f
    9d58:	80 a3       	std	Z+32, r24	; 0x20
    9d5a:	91 a3       	std	Z+33, r25	; 0x21
					startAnalogConversion(2, 0);
    9d5c:	60 e0       	ldi	r22, 0x00	; 0
    9d5e:	82 e0       	ldi	r24, 0x02	; 2
    9d60:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9d64:	01 c0       	rjmp	.+2      	; 0x9d68 <ReadSensors+0x540>
    9d66:	00 00       	nop
    9d68:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9d6c:	81 11       	cpse	r24, r1
    9d6e:	fb cf       	rjmp	.-10     	; 0x9d66 <ReadSensors+0x53e>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9d70:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Heat_Out = ConvertToTemp( temp );
    9d74:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <ConvertToTemp>
    9d78:	f7 01       	movw	r30, r14
    9d7a:	62 a7       	std	Z+42, r22	; 0x2a
    9d7c:	73 a7       	std	Z+43, r23	; 0x2b
    9d7e:	84 a7       	std	Z+44, r24	; 0x2c
    9d80:	95 a7       	std	Z+45, r25	; 0x2d
					//---------------------------------------------------------------
					startAnalogConversion(3, 0);
    9d82:	60 e0       	ldi	r22, 0x00	; 0
    9d84:	83 e0       	ldi	r24, 0x03	; 3
    9d86:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9d8a:	01 c0       	rjmp	.+2      	; 0x9d8e <ReadSensors+0x566>
    9d8c:	00 00       	nop
    9d8e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9d92:	81 11       	cpse	r24, r1
    9d94:	fb cf       	rjmp	.-10     	; 0x9d8c <ReadSensors+0x564>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9d96:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Heat_In = ConvertToTemp( temp );
    9d9a:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <ConvertToTemp>
    9d9e:	f7 01       	movw	r30, r14
    9da0:	66 a7       	std	Z+46, r22	; 0x2e
    9da2:	77 a7       	std	Z+47, r23	; 0x2f
    9da4:	80 ab       	std	Z+48, r24	; 0x30
    9da6:	91 ab       	std	Z+49, r25	; 0x31
					//---------------------------------------------------------------
					startAnalogConversion(4, 0);
    9da8:	60 e0       	ldi	r22, 0x00	; 0
    9daa:	84 e0       	ldi	r24, 0x04	; 4
    9dac:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9db0:	01 c0       	rjmp	.+2      	; 0x9db4 <ReadSensors+0x58c>
    9db2:	00 00       	nop
    9db4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9db8:	81 11       	cpse	r24, r1
    9dba:	fb cf       	rjmp	.-10     	; 0x9db2 <ReadSensors+0x58a>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9dbc:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Src_In = ConvertToTemp( temp );
    9dc0:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <ConvertToTemp>
    9dc4:	f7 01       	movw	r30, r14
    9dc6:	62 ab       	std	Z+50, r22	; 0x32
    9dc8:	73 ab       	std	Z+51, r23	; 0x33
    9dca:	84 ab       	std	Z+52, r24	; 0x34
    9dcc:	95 ab       	std	Z+53, r25	; 0x35
					//---------------------------------------------------------------
					startAnalogConversion(5, 0);
    9dce:	60 e0       	ldi	r22, 0x00	; 0
    9dd0:	85 e0       	ldi	r24, 0x05	; 5
    9dd2:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9dd6:	01 c0       	rjmp	.+2      	; 0x9dda <ReadSensors+0x5b2>
    9dd8:	00 00       	nop
    9dda:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9dde:	81 11       	cpse	r24, r1
    9de0:	fb cf       	rjmp	.-10     	; 0x9dd8 <ReadSensors+0x5b0>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9de2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Src_Out = ConvertToTemp( temp );
    9de6:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <ConvertToTemp>
    9dea:	f7 01       	movw	r30, r14
    9dec:	66 ab       	std	Z+54, r22	; 0x36
    9dee:	77 ab       	std	Z+55, r23	; 0x37
    9df0:	80 af       	std	Z+56, r24	; 0x38
    9df2:	91 af       	std	Z+57, r25	; 0x39
					//---------------------------------------------------------------
					startAnalogConversion(6, 0);
    9df4:	60 e0       	ldi	r22, 0x00	; 0
    9df6:	86 e0       	ldi	r24, 0x06	; 6
    9df8:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9dfc:	01 c0       	rjmp	.+2      	; 0x9e00 <ReadSensors+0x5d8>
    9dfe:	00 00       	nop
    9e00:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9e04:	81 11       	cpse	r24, r1
    9e06:	fb cf       	rjmp	.-10     	; 0x9dfe <ReadSensors+0x5d6>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9e08:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Ex_Comp = ConvertToTemp( temp );
    9e0c:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <ConvertToTemp>
    9e10:	f7 01       	movw	r30, r14
    9e12:	62 af       	std	Z+58, r22	; 0x3a
    9e14:	73 af       	std	Z+59, r23	; 0x3b
    9e16:	84 af       	std	Z+60, r24	; 0x3c
    9e18:	95 af       	std	Z+61, r25	; 0x3d
					//---------------------------------------------------------------
					startAnalogConversion(7, 0);
    9e1a:	60 e0       	ldi	r22, 0x00	; 0
    9e1c:	87 e0       	ldi	r24, 0x07	; 7
    9e1e:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9e22:	01 c0       	rjmp	.+2      	; 0x9e26 <ReadSensors+0x5fe>
    9e24:	00 00       	nop
    9e26:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9e2a:	81 11       	cpse	r24, r1
    9e2c:	fb cf       	rjmp	.-10     	; 0x9e24 <ReadSensors+0x5fc>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9e2e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Suc_Comp = ConvertToTemp( temp );
    9e32:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <ConvertToTemp>
    9e36:	f7 01       	movw	r30, r14
    9e38:	fe 96       	adiw	r30, 0x3e	; 62
    9e3a:	60 83       	st	Z, r22
    9e3c:	71 83       	std	Z+1, r23	; 0x01
    9e3e:	82 83       	std	Z+2, r24	; 0x02
    9e40:	93 83       	std	Z+3, r25	; 0x03
					//---------------------------------------------------------------
					startAnalogConversion(8, 0);
    9e42:	60 e0       	ldi	r22, 0x00	; 0
    9e44:	88 e0       	ldi	r24, 0x08	; 8
    9e46:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9e4a:	01 c0       	rjmp	.+2      	; 0x9e4e <ReadSensors+0x626>
    9e4c:	00 00       	nop
    9e4e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9e52:	81 11       	cpse	r24, r1
    9e54:	fb cf       	rjmp	.-10     	; 0x9e4c <ReadSensors+0x624>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9e56:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Cond_Temp = ConvertToTemp( temp )	;
    9e5a:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <ConvertToTemp>
    9e5e:	f7 01       	movw	r30, r14
    9e60:	ee 5b       	subi	r30, 0xBE	; 190
    9e62:	ff 4f       	sbci	r31, 0xFF	; 255
    9e64:	60 83       	st	Z, r22
    9e66:	71 83       	std	Z+1, r23	; 0x01
    9e68:	82 83       	std	Z+2, r24	; 0x02
    9e6a:	93 83       	std	Z+3, r25	; 0x03
					//--------------------------------------------------------------
					comp->SuperHeat=ReadSuperHeat (comp);
    9e6c:	c7 01       	movw	r24, r14
    9e6e:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <ReadSuperHeat>
    9e72:	f7 01       	movw	r30, r14
    9e74:	ea 5b       	subi	r30, 0xBA	; 186
    9e76:	ff 4f       	sbci	r31, 0xFF	; 255
    9e78:	60 83       	st	Z, r22
    9e7a:	71 83       	std	Z+1, r23	; 0x01
    9e7c:	82 83       	std	Z+2, r24	; 0x02
    9e7e:	93 83       	std	Z+3, r25	; 0x03
					comp->SuperCool=ReadSuperCool (comp);
    9e80:	c7 01       	movw	r24, r14
    9e82:	0e 94 a4 3e 	call	0x7d48	; 0x7d48 <ReadSuperCool>
    9e86:	f7 01       	movw	r30, r14
    9e88:	e6 5b       	subi	r30, 0xB6	; 182
    9e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    9e8c:	60 83       	st	Z, r22
    9e8e:	71 83       	std	Z+1, r23	; 0x01
    9e90:	82 83       	std	Z+2, r24	; 0x02
					if(comp->checkTrv)comp->trvCorection=corectTrv(comp);
    9e92:	93 83       	std	Z+3, r25	; 0x03
    9e94:	f7 01       	movw	r30, r14
    9e96:	81 81       	ldd	r24, Z+1	; 0x01
    9e98:	88 23       	and	r24, r24
    9e9a:	49 f0       	breq	.+18     	; 0x9eae <ReadSensors+0x686>
    9e9c:	c7 01       	movw	r24, r14
    9e9e:	0e 94 0d 3f 	call	0x7e1a	; 0x7e1a <corectTrv>
    9ea2:	e7 01       	movw	r28, r14
    9ea4:	c6 59       	subi	r28, 0x96	; 150
    9ea6:	df 4f       	sbci	r29, 0xFF	; 255
    9ea8:	a1 d4       	rcall	.+2370   	; 0xa7ec <__fixsfsi>
    9eaa:	79 83       	std	Y+1, r23	; 0x01
    9eac:	68 83       	st	Y, r22
					//EEpromData.Volt_B= ADE7758_bvrms();
					//EEpromData.Volt_C= ADE7758_cvrms();
					}

return;	
}
    9eae:	df 91       	pop	r29
    9eb0:	cf 91       	pop	r28
    9eb2:	1f 91       	pop	r17
    9eb4:	0f 91       	pop	r16
    9eb6:	ff 90       	pop	r15
    9eb8:	ef 90       	pop	r14
    9eba:	08 95       	ret

00009ebc <ComutateTrv>:
	}
	if(comp->Index==2)
	{
		xTimerDelete(xComutateTrv_2,0);
	}
}
    9ebc:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    9ec0:	fc 01       	movw	r30, r24
    9ec2:	20 81       	ld	r18, Z
    9ec4:	2a 31       	cpi	r18, 0x1A	; 26
    9ec6:	09 f0       	breq	.+2      	; 0x9eca <ComutateTrv+0xe>
    9ec8:	74 c0       	rjmp	.+232    	; 0x9fb2 <ComutateTrv+0xf6>
    9eca:	22 b1       	in	r18, 0x02	; 2
    9ecc:	20 7f       	andi	r18, 0xF0	; 240
    9ece:	22 b9       	out	0x02, r18	; 2
    9ed0:	20 91 d8 09 	lds	r18, 0x09D8	; 0x8009d8 <Comp_1+0x6c>
    9ed4:	30 91 d9 09 	lds	r19, 0x09D9	; 0x8009d9 <Comp_1+0x6d>
    9ed8:	12 16       	cp	r1, r18
    9eda:	13 06       	cpc	r1, r19
    9edc:	54 f5       	brge	.+84     	; 0x9f32 <ComutateTrv+0x76>
    9ede:	e0 91 5a 07 	lds	r30, 0x075A	; 0x80075a <step_index.2938>
    9ee2:	21 e0       	ldi	r18, 0x01	; 1
    9ee4:	2e 0f       	add	r18, r30
    9ee6:	20 93 5a 07 	sts	0x075A, r18	; 0x80075a <step_index.2938>
    9eea:	32 b1       	in	r19, 0x02	; 2
    9eec:	f0 e0       	ldi	r31, 0x00	; 0
    9eee:	ee 5e       	subi	r30, 0xEE	; 238
    9ef0:	fd 4f       	sbci	r31, 0xFD	; 253
    9ef2:	20 81       	ld	r18, Z
    9ef4:	23 2b       	or	r18, r19
    9ef6:	22 b9       	out	0x02, r18	; 2
    9ef8:	e8 ed       	ldi	r30, 0xD8	; 216
    9efa:	f9 e0       	ldi	r31, 0x09	; 9
    9efc:	20 81       	ld	r18, Z
    9efe:	31 81       	ldd	r19, Z+1	; 0x01
    9f00:	21 50       	subi	r18, 0x01	; 1
    9f02:	31 09       	sbc	r19, r1
    9f04:	31 83       	std	Z+1, r19	; 0x01
    9f06:	20 83       	st	Z, r18
    9f08:	20 91 da 09 	lds	r18, 0x09DA	; 0x8009da <Comp_1+0x6e>
    9f0c:	30 91 db 09 	lds	r19, 0x09DB	; 0x8009db <Comp_1+0x6f>
    9f10:	2f 5f       	subi	r18, 0xFF	; 255
    9f12:	3f 4f       	sbci	r19, 0xFF	; 255
    9f14:	21 3f       	cpi	r18, 0xF1	; 241
    9f16:	31 05       	cpc	r19, r1
    9f18:	2c f4       	brge	.+10     	; 0x9f24 <ComutateTrv+0x68>
    9f1a:	30 93 db 09 	sts	0x09DB, r19	; 0x8009db <Comp_1+0x6f>
    9f1e:	20 93 da 09 	sts	0x09DA, r18	; 0x8009da <Comp_1+0x6e>
    9f22:	41 c0       	rjmp	.+130    	; 0x9fa6 <ComutateTrv+0xea>
    9f24:	20 ef       	ldi	r18, 0xF0	; 240
    9f26:	30 e0       	ldi	r19, 0x00	; 0
    9f28:	30 93 db 09 	sts	0x09DB, r19	; 0x8009db <Comp_1+0x6f>
    9f2c:	20 93 da 09 	sts	0x09DA, r18	; 0x8009da <Comp_1+0x6e>
    9f30:	3a c0       	rjmp	.+116    	; 0x9fa6 <ComutateTrv+0xea>
    9f32:	33 23       	and	r19, r19
    9f34:	24 f5       	brge	.+72     	; 0x9f7e <ComutateTrv+0xc2>
    9f36:	e0 91 5a 07 	lds	r30, 0x075A	; 0x80075a <step_index.2938>
    9f3a:	21 e0       	ldi	r18, 0x01	; 1
    9f3c:	2e 0f       	add	r18, r30
    9f3e:	20 93 5a 07 	sts	0x075A, r18	; 0x80075a <step_index.2938>
    9f42:	f0 e0       	ldi	r31, 0x00	; 0
    9f44:	e2 5f       	subi	r30, 0xF2	; 242
    9f46:	fd 4f       	sbci	r31, 0xFD	; 253
    9f48:	20 81       	ld	r18, Z
    9f4a:	22 b9       	out	0x02, r18	; 2
    9f4c:	e8 ed       	ldi	r30, 0xD8	; 216
    9f4e:	f9 e0       	ldi	r31, 0x09	; 9
    9f50:	20 81       	ld	r18, Z
    9f52:	31 81       	ldd	r19, Z+1	; 0x01
    9f54:	2f 5f       	subi	r18, 0xFF	; 255
    9f56:	3f 4f       	sbci	r19, 0xFF	; 255
    9f58:	31 83       	std	Z+1, r19	; 0x01
    9f5a:	20 83       	st	Z, r18
    9f5c:	20 91 da 09 	lds	r18, 0x09DA	; 0x8009da <Comp_1+0x6e>
    9f60:	30 91 db 09 	lds	r19, 0x09DB	; 0x8009db <Comp_1+0x6f>
    9f64:	21 50       	subi	r18, 0x01	; 1
    9f66:	31 09       	sbc	r19, r1
    9f68:	2a f0       	brmi	.+10     	; 0x9f74 <ComutateTrv+0xb8>
    9f6a:	30 93 db 09 	sts	0x09DB, r19	; 0x8009db <Comp_1+0x6f>
    9f6e:	20 93 da 09 	sts	0x09DA, r18	; 0x8009da <Comp_1+0x6e>
    9f72:	19 c0       	rjmp	.+50     	; 0x9fa6 <ComutateTrv+0xea>
    9f74:	10 92 db 09 	sts	0x09DB, r1	; 0x8009db <Comp_1+0x6f>
    9f78:	10 92 da 09 	sts	0x09DA, r1	; 0x8009da <Comp_1+0x6e>
    9f7c:	14 c0       	rjmp	.+40     	; 0x9fa6 <ComutateTrv+0xea>
    9f7e:	23 2b       	or	r18, r19
    9f80:	69 f4       	brne	.+26     	; 0x9f9c <ComutateTrv+0xe0>
    9f82:	20 91 73 09 	lds	r18, 0x0973	; 0x800973 <Comp_1+0x7>
    9f86:	22 23       	and	r18, r18
    9f88:	49 f0       	breq	.+18     	; 0x9f9c <ComutateTrv+0xe0>
    9f8a:	20 ef       	ldi	r18, 0xF0	; 240
    9f8c:	30 e0       	ldi	r19, 0x00	; 0
    9f8e:	30 93 d9 09 	sts	0x09D9, r19	; 0x8009d9 <Comp_1+0x6d>
    9f92:	20 93 d8 09 	sts	0x09D8, r18	; 0x8009d8 <Comp_1+0x6c>
    9f96:	10 92 73 09 	sts	0x0973, r1	; 0x800973 <Comp_1+0x7>
    9f9a:	05 c0       	rjmp	.+10     	; 0x9fa6 <ComutateTrv+0xea>
    9f9c:	22 b1       	in	r18, 0x02	; 2
    9f9e:	20 7f       	andi	r18, 0xF0	; 240
    9fa0:	22 b9       	out	0x02, r18	; 2
    9fa2:	10 92 73 09 	sts	0x0973, r1	; 0x800973 <Comp_1+0x7>
    9fa6:	20 91 5a 07 	lds	r18, 0x075A	; 0x80075a <step_index.2938>
    9faa:	24 30       	cpi	r18, 0x04	; 4
    9fac:	10 f0       	brcs	.+4      	; 0x9fb2 <ComutateTrv+0xf6>
    9fae:	10 92 5a 07 	sts	0x075A, r1	; 0x80075a <step_index.2938>
    9fb2:	fc 01       	movw	r30, r24
    9fb4:	80 81       	ld	r24, Z
    9fb6:	8b 31       	cpi	r24, 0x1B	; 27
    9fb8:	09 f0       	breq	.+2      	; 0x9fbc <ComutateTrv+0x100>
    9fba:	70 c0       	rjmp	.+224    	; 0xa09c <ComutateTrv+0x1e0>
    9fbc:	82 b1       	in	r24, 0x02	; 2
    9fbe:	8f 70       	andi	r24, 0x0F	; 15
    9fc0:	82 b9       	out	0x02, r24	; 2
    9fc2:	80 91 62 0a 	lds	r24, 0x0A62	; 0x800a62 <Comp_2+0x6c>
    9fc6:	90 91 63 0a 	lds	r25, 0x0A63	; 0x800a63 <Comp_2+0x6d>
    9fca:	18 16       	cp	r1, r24
    9fcc:	19 06       	cpc	r1, r25
    9fce:	44 f5       	brge	.+80     	; 0xa020 <ComutateTrv+0x164>
    9fd0:	e0 91 59 07 	lds	r30, 0x0759	; 0x800759 <step_index.2939>
    9fd4:	81 e0       	ldi	r24, 0x01	; 1
    9fd6:	8e 0f       	add	r24, r30
    9fd8:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <step_index.2939>
    9fdc:	92 b1       	in	r25, 0x02	; 2
    9fde:	f0 e0       	ldi	r31, 0x00	; 0
    9fe0:	e6 5f       	subi	r30, 0xF6	; 246
    9fe2:	fd 4f       	sbci	r31, 0xFD	; 253
    9fe4:	80 81       	ld	r24, Z
    9fe6:	89 2b       	or	r24, r25
    9fe8:	82 b9       	out	0x02, r24	; 2
    9fea:	e2 e6       	ldi	r30, 0x62	; 98
    9fec:	fa e0       	ldi	r31, 0x0A	; 10
    9fee:	80 81       	ld	r24, Z
    9ff0:	91 81       	ldd	r25, Z+1	; 0x01
    9ff2:	01 97       	sbiw	r24, 0x01	; 1
    9ff4:	91 83       	std	Z+1, r25	; 0x01
    9ff6:	80 83       	st	Z, r24
    9ff8:	80 91 64 0a 	lds	r24, 0x0A64	; 0x800a64 <Comp_2+0x6e>
    9ffc:	90 91 65 0a 	lds	r25, 0x0A65	; 0x800a65 <Comp_2+0x6f>
    a000:	01 96       	adiw	r24, 0x01	; 1
    a002:	81 3f       	cpi	r24, 0xF1	; 241
    a004:	91 05       	cpc	r25, r1
    a006:	2c f4       	brge	.+10     	; 0xa012 <ComutateTrv+0x156>
    a008:	90 93 65 0a 	sts	0x0A65, r25	; 0x800a65 <Comp_2+0x6f>
    a00c:	80 93 64 0a 	sts	0x0A64, r24	; 0x800a64 <Comp_2+0x6e>
    a010:	3f c0       	rjmp	.+126    	; 0xa090 <ComutateTrv+0x1d4>
    a012:	80 ef       	ldi	r24, 0xF0	; 240
    a014:	90 e0       	ldi	r25, 0x00	; 0
    a016:	90 93 65 0a 	sts	0x0A65, r25	; 0x800a65 <Comp_2+0x6f>
    a01a:	80 93 64 0a 	sts	0x0A64, r24	; 0x800a64 <Comp_2+0x6e>
    a01e:	38 c0       	rjmp	.+112    	; 0xa090 <ComutateTrv+0x1d4>
    a020:	99 23       	and	r25, r25
    a022:	14 f5       	brge	.+68     	; 0xa068 <ComutateTrv+0x1ac>
    a024:	e0 91 59 07 	lds	r30, 0x0759	; 0x800759 <step_index.2939>
    a028:	81 e0       	ldi	r24, 0x01	; 1
    a02a:	8e 0f       	add	r24, r30
    a02c:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <step_index.2939>
    a030:	f0 e0       	ldi	r31, 0x00	; 0
    a032:	ea 5f       	subi	r30, 0xFA	; 250
    a034:	fd 4f       	sbci	r31, 0xFD	; 253
    a036:	80 81       	ld	r24, Z
    a038:	82 b9       	out	0x02, r24	; 2
    a03a:	e2 e6       	ldi	r30, 0x62	; 98
    a03c:	fa e0       	ldi	r31, 0x0A	; 10
    a03e:	80 81       	ld	r24, Z
    a040:	91 81       	ldd	r25, Z+1	; 0x01
    a042:	01 96       	adiw	r24, 0x01	; 1
    a044:	91 83       	std	Z+1, r25	; 0x01
    a046:	80 83       	st	Z, r24
    a048:	80 91 64 0a 	lds	r24, 0x0A64	; 0x800a64 <Comp_2+0x6e>
    a04c:	90 91 65 0a 	lds	r25, 0x0A65	; 0x800a65 <Comp_2+0x6f>
    a050:	01 97       	sbiw	r24, 0x01	; 1
    a052:	2a f0       	brmi	.+10     	; 0xa05e <ComutateTrv+0x1a2>
    a054:	90 93 65 0a 	sts	0x0A65, r25	; 0x800a65 <Comp_2+0x6f>
    a058:	80 93 64 0a 	sts	0x0A64, r24	; 0x800a64 <Comp_2+0x6e>
    a05c:	19 c0       	rjmp	.+50     	; 0xa090 <ComutateTrv+0x1d4>
    a05e:	10 92 65 0a 	sts	0x0A65, r1	; 0x800a65 <Comp_2+0x6f>
    a062:	10 92 64 0a 	sts	0x0A64, r1	; 0x800a64 <Comp_2+0x6e>
    a066:	14 c0       	rjmp	.+40     	; 0xa090 <ComutateTrv+0x1d4>
    a068:	89 2b       	or	r24, r25
    a06a:	69 f4       	brne	.+26     	; 0xa086 <ComutateTrv+0x1ca>
    a06c:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <Comp_2+0x7>
    a070:	88 23       	and	r24, r24
    a072:	49 f0       	breq	.+18     	; 0xa086 <ComutateTrv+0x1ca>
    a074:	80 ef       	ldi	r24, 0xF0	; 240
    a076:	90 e0       	ldi	r25, 0x00	; 0
    a078:	90 93 63 0a 	sts	0x0A63, r25	; 0x800a63 <Comp_2+0x6d>
    a07c:	80 93 62 0a 	sts	0x0A62, r24	; 0x800a62 <Comp_2+0x6c>
    a080:	10 92 fd 09 	sts	0x09FD, r1	; 0x8009fd <Comp_2+0x7>
    a084:	05 c0       	rjmp	.+10     	; 0xa090 <ComutateTrv+0x1d4>
    a086:	82 b1       	in	r24, 0x02	; 2
    a088:	8f 70       	andi	r24, 0x0F	; 15
    a08a:	82 b9       	out	0x02, r24	; 2
    a08c:	10 92 fd 09 	sts	0x09FD, r1	; 0x8009fd <Comp_2+0x7>
    a090:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <step_index.2939>
    a094:	84 30       	cpi	r24, 0x04	; 4
    a096:	10 f0       	brcs	.+4      	; 0xa09c <ComutateTrv+0x1e0>
    a098:	10 92 59 07 	sts	0x0759, r1	; 0x800759 <step_index.2939>
    a09c:	08 95       	ret

0000a09e <activateTrvTimer>:
    a09e:	ef 92       	push	r14
    a0a0:	ff 92       	push	r15
    a0a2:	0f 93       	push	r16
    a0a4:	1f 93       	push	r17
    a0a6:	8e 58       	subi	r24, 0x8E	; 142
    a0a8:	9f 4f       	sbci	r25, 0xFF	; 255
    a0aa:	fc 01       	movw	r30, r24
    a0ac:	80 81       	ld	r24, Z
    a0ae:	91 81       	ldd	r25, Z+1	; 0x01
    a0b0:	81 30       	cpi	r24, 0x01	; 1
    a0b2:	91 05       	cpc	r25, r1
    a0b4:	b1 f4       	brne	.+44     	; 0xa0e2 <activateTrvTimer+0x44>
    a0b6:	0f 2e       	mov	r0, r31
    a0b8:	fe e5       	ldi	r31, 0x5E	; 94
    a0ba:	ef 2e       	mov	r14, r31
    a0bc:	ff e4       	ldi	r31, 0x4F	; 79
    a0be:	ff 2e       	mov	r15, r31
    a0c0:	f0 2d       	mov	r31, r0
    a0c2:	02 e7       	ldi	r16, 0x72	; 114
    a0c4:	16 e0       	ldi	r17, 0x06	; 6
    a0c6:	21 e0       	ldi	r18, 0x01	; 1
    a0c8:	42 e3       	ldi	r20, 0x32	; 50
    a0ca:	50 e0       	ldi	r21, 0x00	; 0
    a0cc:	60 e0       	ldi	r22, 0x00	; 0
    a0ce:	70 e0       	ldi	r23, 0x00	; 0
    a0d0:	8e e0       	ldi	r24, 0x0E	; 14
    a0d2:	96 e0       	ldi	r25, 0x06	; 6
    a0d4:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    a0d8:	90 93 f2 08 	sts	0x08F2, r25	; 0x8008f2 <xComutateTrv_1+0x1>
    a0dc:	80 93 f1 08 	sts	0x08F1, r24	; 0x8008f1 <xComutateTrv_1>
    a0e0:	17 c0       	rjmp	.+46     	; 0xa110 <activateTrvTimer+0x72>
    a0e2:	02 97       	sbiw	r24, 0x02	; 2
    a0e4:	a9 f4       	brne	.+42     	; 0xa110 <activateTrvTimer+0x72>
    a0e6:	0f 2e       	mov	r0, r31
    a0e8:	fe e5       	ldi	r31, 0x5E	; 94
    a0ea:	ef 2e       	mov	r14, r31
    a0ec:	ff e4       	ldi	r31, 0x4F	; 79
    a0ee:	ff 2e       	mov	r15, r31
    a0f0:	f0 2d       	mov	r31, r0
    a0f2:	01 e7       	ldi	r16, 0x71	; 113
    a0f4:	16 e0       	ldi	r17, 0x06	; 6
    a0f6:	21 e0       	ldi	r18, 0x01	; 1
    a0f8:	42 e3       	ldi	r20, 0x32	; 50
    a0fa:	50 e0       	ldi	r21, 0x00	; 0
    a0fc:	60 e0       	ldi	r22, 0x00	; 0
    a0fe:	70 e0       	ldi	r23, 0x00	; 0
    a100:	87 e1       	ldi	r24, 0x17	; 23
    a102:	96 e0       	ldi	r25, 0x06	; 6
    a104:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    a108:	90 93 ed 09 	sts	0x09ED, r25	; 0x8009ed <xComutateTrv_2+0x1>
    a10c:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <xComutateTrv_2>
    a110:	1f 91       	pop	r17
    a112:	0f 91       	pop	r16
    a114:	ff 90       	pop	r15
    a116:	ef 90       	pop	r14
    a118:	08 95       	ret

0000a11a <startTrvTimer>:
    a11a:	cf 92       	push	r12
    a11c:	df 92       	push	r13
    a11e:	ef 92       	push	r14
    a120:	ff 92       	push	r15
    a122:	0f 93       	push	r16
    a124:	1f 93       	push	r17
    a126:	8e 58       	subi	r24, 0x8E	; 142
    a128:	9f 4f       	sbci	r25, 0xFF	; 255
    a12a:	fc 01       	movw	r30, r24
    a12c:	80 81       	ld	r24, Z
    a12e:	91 81       	ldd	r25, Z+1	; 0x01
    a130:	81 30       	cpi	r24, 0x01	; 1
    a132:	91 05       	cpc	r25, r1
    a134:	89 f4       	brne	.+34     	; 0xa158 <startTrvTimer+0x3e>
    a136:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    a13a:	9b 01       	movw	r18, r22
    a13c:	ac 01       	movw	r20, r24
    a13e:	c1 2c       	mov	r12, r1
    a140:	d1 2c       	mov	r13, r1
    a142:	76 01       	movw	r14, r12
    a144:	00 e0       	ldi	r16, 0x00	; 0
    a146:	10 e0       	ldi	r17, 0x00	; 0
    a148:	61 e0       	ldi	r22, 0x01	; 1
    a14a:	80 91 f1 08 	lds	r24, 0x08F1	; 0x8008f1 <xComutateTrv_1>
    a14e:	90 91 f2 08 	lds	r25, 0x08F2	; 0x8008f2 <xComutateTrv_1+0x1>
    a152:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    a156:	12 c0       	rjmp	.+36     	; 0xa17c <startTrvTimer+0x62>
    a158:	02 97       	sbiw	r24, 0x02	; 2
    a15a:	81 f4       	brne	.+32     	; 0xa17c <startTrvTimer+0x62>
    a15c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    a160:	9b 01       	movw	r18, r22
    a162:	ac 01       	movw	r20, r24
    a164:	c1 2c       	mov	r12, r1
    a166:	d1 2c       	mov	r13, r1
    a168:	76 01       	movw	r14, r12
    a16a:	00 e0       	ldi	r16, 0x00	; 0
    a16c:	10 e0       	ldi	r17, 0x00	; 0
    a16e:	61 e0       	ldi	r22, 0x01	; 1
    a170:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <xComutateTrv_2>
    a174:	90 91 ed 09 	lds	r25, 0x09ED	; 0x8009ed <xComutateTrv_2+0x1>
    a178:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    a17c:	1f 91       	pop	r17
    a17e:	0f 91       	pop	r16
    a180:	ff 90       	pop	r15
    a182:	ef 90       	pop	r14
    a184:	df 90       	pop	r13
    a186:	cf 90       	pop	r12
    a188:	08 95       	ret

0000a18a <stopTrvTimer>:
void stopTrvTimer(xCompressor *comp)
{
    a18a:	cf 92       	push	r12
    a18c:	df 92       	push	r13
    a18e:	ef 92       	push	r14
    a190:	ff 92       	push	r15
    a192:	0f 93       	push	r16
    a194:	1f 93       	push	r17
    a196:	cf 93       	push	r28
    a198:	df 93       	push	r29
    a19a:	ec 01       	movw	r28, r24
	if(comp->Index==1)
    a19c:	fc 01       	movw	r30, r24
    a19e:	ee 58       	subi	r30, 0x8E	; 142
    a1a0:	ff 4f       	sbci	r31, 0xFF	; 255
    a1a2:	80 81       	ld	r24, Z
    a1a4:	91 81       	ldd	r25, Z+1	; 0x01
    a1a6:	01 97       	sbiw	r24, 0x01	; 1
    a1a8:	c1 f4       	brne	.+48     	; 0xa1da <stopTrvTimer+0x50>
	{
		if( xTimerIsTimerActive( xComutateTrv_1 ) != pdFALSE )	xTimerStop(xComutateTrv_1, 1);
    a1aa:	80 91 f1 08 	lds	r24, 0x08F1	; 0x8008f1 <xComutateTrv_1>
    a1ae:	90 91 f2 08 	lds	r25, 0x08F2	; 0x8008f2 <xComutateTrv_1+0x1>
    a1b2:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    a1b6:	88 23       	and	r24, r24
    a1b8:	81 f0       	breq	.+32     	; 0xa1da <stopTrvTimer+0x50>
    a1ba:	c1 2c       	mov	r12, r1
    a1bc:	d1 2c       	mov	r13, r1
    a1be:	76 01       	movw	r14, r12
    a1c0:	c3 94       	inc	r12
    a1c2:	00 e0       	ldi	r16, 0x00	; 0
    a1c4:	10 e0       	ldi	r17, 0x00	; 0
    a1c6:	20 e0       	ldi	r18, 0x00	; 0
    a1c8:	30 e0       	ldi	r19, 0x00	; 0
    a1ca:	a9 01       	movw	r20, r18
    a1cc:	63 e0       	ldi	r22, 0x03	; 3
    a1ce:	80 91 f1 08 	lds	r24, 0x08F1	; 0x8008f1 <xComutateTrv_1>
    a1d2:	90 91 f2 08 	lds	r25, 0x08F2	; 0x8008f2 <xComutateTrv_1+0x1>
    a1d6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if(comp->Index==2)
    a1da:	ce 58       	subi	r28, 0x8E	; 142
    a1dc:	df 4f       	sbci	r29, 0xFF	; 255
    a1de:	88 81       	ld	r24, Y
    a1e0:	99 81       	ldd	r25, Y+1	; 0x01
    a1e2:	02 97       	sbiw	r24, 0x02	; 2
    a1e4:	c1 f4       	brne	.+48     	; 0xa216 <stopTrvTimer+0x8c>
	{
		if( xTimerIsTimerActive( xComutateTrv_2 ) != pdFALSE )	xTimerStop(xComutateTrv_2, 1);
    a1e6:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <xComutateTrv_2>
    a1ea:	90 91 ed 09 	lds	r25, 0x09ED	; 0x8009ed <xComutateTrv_2+0x1>
    a1ee:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    a1f2:	88 23       	and	r24, r24
    a1f4:	81 f0       	breq	.+32     	; 0xa216 <stopTrvTimer+0x8c>
    a1f6:	c1 2c       	mov	r12, r1
    a1f8:	d1 2c       	mov	r13, r1
    a1fa:	76 01       	movw	r14, r12
    a1fc:	c3 94       	inc	r12
    a1fe:	00 e0       	ldi	r16, 0x00	; 0
    a200:	10 e0       	ldi	r17, 0x00	; 0
    a202:	20 e0       	ldi	r18, 0x00	; 0
    a204:	30 e0       	ldi	r19, 0x00	; 0
    a206:	a9 01       	movw	r20, r18
    a208:	63 e0       	ldi	r22, 0x03	; 3
    a20a:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <xComutateTrv_2>
    a20e:	90 91 ed 09 	lds	r25, 0x09ED	; 0x8009ed <xComutateTrv_2+0x1>
    a212:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
}
    a216:	df 91       	pop	r29
    a218:	cf 91       	pop	r28
    a21a:	1f 91       	pop	r17
    a21c:	0f 91       	pop	r16
    a21e:	ff 90       	pop	r15
    a220:	ef 90       	pop	r14
    a222:	df 90       	pop	r13
    a224:	cf 90       	pop	r12
    a226:	08 95       	ret

0000a228 <Fuzzy>:
		
	}
}
//----------------------------------------------------------------------------------------------------------
int Fuzzy(xCompressor *comp,int corection)
{
    a228:	8f 92       	push	r8
    a22a:	9f 92       	push	r9
    a22c:	af 92       	push	r10
    a22e:	bf 92       	push	r11
    a230:	cf 92       	push	r12
    a232:	df 92       	push	r13
    a234:	ef 92       	push	r14
    a236:	ff 92       	push	r15
    a238:	0f 93       	push	r16
    a23a:	1f 93       	push	r17
    a23c:	cf 93       	push	r28
    a23e:	df 93       	push	r29
    a240:	ec 01       	movw	r28, r24
    a242:	8b 01       	movw	r16, r22
	int steps=0;
	//static int old_corection=0;
	//static int old_corection_1=0;
	if(comp->Index==2)xSerialxPrintf(&xSerial3Port,"corection_2 = %d \r\n", corection);
    a244:	fc 01       	movw	r30, r24
    a246:	ee 58       	subi	r30, 0x8E	; 142
    a248:	ff 4f       	sbci	r31, 0xFF	; 255
    a24a:	80 81       	ld	r24, Z
    a24c:	91 81       	ldd	r25, Z+1	; 0x01
    a24e:	02 97       	sbiw	r24, 0x02	; 2
    a250:	91 f4       	brne	.+36     	; 0xa276 <Fuzzy+0x4e>
    a252:	1f 93       	push	r17
    a254:	6f 93       	push	r22
    a256:	83 e2       	ldi	r24, 0x23	; 35
    a258:	96 e0       	ldi	r25, 0x06	; 6
    a25a:	9f 93       	push	r25
    a25c:	8f 93       	push	r24
    a25e:	8a ea       	ldi	r24, 0xAA	; 170
    a260:	97 e0       	ldi	r25, 0x07	; 7
    a262:	9f 93       	push	r25
    a264:	8f 93       	push	r24
    a266:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a26a:	0f 90       	pop	r0
    a26c:	0f 90       	pop	r0
    a26e:	0f 90       	pop	r0
    a270:	0f 90       	pop	r0
    a272:	0f 90       	pop	r0
    a274:	0f 90       	pop	r0
	if(comp->Src_In<=10 && comp->Heating==1 ){steps=(comp->Src_In)/10 * 100 ;}
    a276:	ca a8       	ldd	r12, Y+50	; 0x32
    a278:	db a8       	ldd	r13, Y+51	; 0x33
    a27a:	ec a8       	ldd	r14, Y+52	; 0x34
    a27c:	fd a8       	ldd	r15, Y+53	; 0x35
    a27e:	20 e0       	ldi	r18, 0x00	; 0
    a280:	30 e0       	ldi	r19, 0x00	; 0
    a282:	40 e2       	ldi	r20, 0x20	; 32
    a284:	51 e4       	ldi	r21, 0x41	; 65
    a286:	c7 01       	movw	r24, r14
    a288:	b6 01       	movw	r22, r12
    a28a:	44 d2       	rcall	.+1160   	; 0xa714 <__cmpsf2>
    a28c:	18 16       	cp	r1, r24
    a28e:	94 f0       	brlt	.+36     	; 0xa2b4 <Fuzzy+0x8c>
    a290:	8a 81       	ldd	r24, Y+2	; 0x02
    a292:	88 23       	and	r24, r24
    a294:	79 f0       	breq	.+30     	; 0xa2b4 <Fuzzy+0x8c>
    a296:	20 e0       	ldi	r18, 0x00	; 0
    a298:	30 e0       	ldi	r19, 0x00	; 0
    a29a:	40 e2       	ldi	r20, 0x20	; 32
    a29c:	51 e4       	ldi	r21, 0x41	; 65
    a29e:	c7 01       	movw	r24, r14
    a2a0:	b6 01       	movw	r22, r12
    a2a2:	3c d2       	rcall	.+1144   	; 0xa71c <__divsf3>
    a2a4:	20 e0       	ldi	r18, 0x00	; 0
    a2a6:	30 e0       	ldi	r19, 0x00	; 0
    a2a8:	48 ec       	ldi	r20, 0xC8	; 200
    a2aa:	52 e4       	ldi	r21, 0x42	; 66
    a2ac:	cb d3       	rcall	.+1942   	; 0xaa44 <__mulsf3>
    a2ae:	9e d2       	rcall	.+1340   	; 0xa7ec <__fixsfsi>
    a2b0:	7b 01       	movw	r14, r22
    a2b2:	3b c1       	rjmp	.+630    	; 0xa52a <Fuzzy+0x302>
	else if(comp->Src_Out<=10 && comp->Cooling==1){steps=(comp->Src_Out)/10 * 100 ;}
    a2b4:	8e a8       	ldd	r8, Y+54	; 0x36
    a2b6:	9f a8       	ldd	r9, Y+55	; 0x37
    a2b8:	a8 ac       	ldd	r10, Y+56	; 0x38
    a2ba:	b9 ac       	ldd	r11, Y+57	; 0x39
    a2bc:	20 e0       	ldi	r18, 0x00	; 0
    a2be:	30 e0       	ldi	r19, 0x00	; 0
    a2c0:	40 e2       	ldi	r20, 0x20	; 32
    a2c2:	51 e4       	ldi	r21, 0x41	; 65
    a2c4:	c5 01       	movw	r24, r10
    a2c6:	b4 01       	movw	r22, r8
    a2c8:	25 d2       	rcall	.+1098   	; 0xa714 <__cmpsf2>
    a2ca:	18 16       	cp	r1, r24
    a2cc:	94 f0       	brlt	.+36     	; 0xa2f2 <Fuzzy+0xca>
    a2ce:	8b 81       	ldd	r24, Y+3	; 0x03
    a2d0:	88 23       	and	r24, r24
    a2d2:	79 f0       	breq	.+30     	; 0xa2f2 <Fuzzy+0xca>
    a2d4:	20 e0       	ldi	r18, 0x00	; 0
    a2d6:	30 e0       	ldi	r19, 0x00	; 0
    a2d8:	40 e2       	ldi	r20, 0x20	; 32
    a2da:	51 e4       	ldi	r21, 0x41	; 65
    a2dc:	c5 01       	movw	r24, r10
    a2de:	b4 01       	movw	r22, r8
    a2e0:	1d d2       	rcall	.+1082   	; 0xa71c <__divsf3>
    a2e2:	20 e0       	ldi	r18, 0x00	; 0
    a2e4:	30 e0       	ldi	r19, 0x00	; 0
    a2e6:	48 ec       	ldi	r20, 0xC8	; 200
    a2e8:	52 e4       	ldi	r21, 0x42	; 66
    a2ea:	ac d3       	rcall	.+1880   	; 0xaa44 <__mulsf3>
    a2ec:	7f d2       	rcall	.+1278   	; 0xa7ec <__fixsfsi>
    a2ee:	7b 01       	movw	r14, r22
    a2f0:	1c c1       	rjmp	.+568    	; 0xa52a <Fuzzy+0x302>
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps); }//comp->trvCorection;
	else if(comp->Src_In>10 && comp->Src_In<=20 && comp->Heating==1)  {steps = (comp->Src_In-10)/10 * 100 + 100;}
    a2f2:	20 e0       	ldi	r18, 0x00	; 0
    a2f4:	30 e0       	ldi	r19, 0x00	; 0
    a2f6:	40 e2       	ldi	r20, 0x20	; 32
    a2f8:	51 e4       	ldi	r21, 0x41	; 65
    a2fa:	c7 01       	movw	r24, r14
    a2fc:	b6 01       	movw	r22, r12
    a2fe:	59 d3       	rcall	.+1714   	; 0xa9b2 <__gesf2>
    a300:	18 16       	cp	r1, r24
    a302:	2c f5       	brge	.+74     	; 0xa34e <Fuzzy+0x126>
    a304:	20 e0       	ldi	r18, 0x00	; 0
    a306:	30 e0       	ldi	r19, 0x00	; 0
    a308:	40 ea       	ldi	r20, 0xA0	; 160
    a30a:	51 e4       	ldi	r21, 0x41	; 65
    a30c:	c7 01       	movw	r24, r14
    a30e:	b6 01       	movw	r22, r12
    a310:	01 d2       	rcall	.+1026   	; 0xa714 <__cmpsf2>
    a312:	18 16       	cp	r1, r24
    a314:	e4 f0       	brlt	.+56     	; 0xa34e <Fuzzy+0x126>
    a316:	8a 81       	ldd	r24, Y+2	; 0x02
    a318:	88 23       	and	r24, r24
    a31a:	c9 f0       	breq	.+50     	; 0xa34e <Fuzzy+0x126>
    a31c:	20 e0       	ldi	r18, 0x00	; 0
    a31e:	30 e0       	ldi	r19, 0x00	; 0
    a320:	40 e2       	ldi	r20, 0x20	; 32
    a322:	51 e4       	ldi	r21, 0x41	; 65
    a324:	c7 01       	movw	r24, r14
    a326:	b6 01       	movw	r22, r12
    a328:	90 d1       	rcall	.+800    	; 0xa64a <__subsf3>
    a32a:	20 e0       	ldi	r18, 0x00	; 0
    a32c:	30 e0       	ldi	r19, 0x00	; 0
    a32e:	40 e2       	ldi	r20, 0x20	; 32
    a330:	51 e4       	ldi	r21, 0x41	; 65
    a332:	f4 d1       	rcall	.+1000   	; 0xa71c <__divsf3>
    a334:	20 e0       	ldi	r18, 0x00	; 0
    a336:	30 e0       	ldi	r19, 0x00	; 0
    a338:	48 ec       	ldi	r20, 0xC8	; 200
    a33a:	52 e4       	ldi	r21, 0x42	; 66
    a33c:	83 d3       	rcall	.+1798   	; 0xaa44 <__mulsf3>
    a33e:	20 e0       	ldi	r18, 0x00	; 0
    a340:	30 e0       	ldi	r19, 0x00	; 0
    a342:	48 ec       	ldi	r20, 0xC8	; 200
    a344:	52 e4       	ldi	r21, 0x42	; 66
    a346:	82 d1       	rcall	.+772    	; 0xa64c <__addsf3>
    a348:	51 d2       	rcall	.+1186   	; 0xa7ec <__fixsfsi>
    a34a:	7b 01       	movw	r14, r22
    a34c:	ee c0       	rjmp	.+476    	; 0xa52a <Fuzzy+0x302>
	else if(comp->Src_Out>10 && comp->Src_Out<=20 && comp->Cooling==1)  {steps = (comp->Src_Out-10)/10 * 100 + 100;}	
    a34e:	20 e0       	ldi	r18, 0x00	; 0
    a350:	30 e0       	ldi	r19, 0x00	; 0
    a352:	40 e2       	ldi	r20, 0x20	; 32
    a354:	51 e4       	ldi	r21, 0x41	; 65
    a356:	c5 01       	movw	r24, r10
    a358:	b4 01       	movw	r22, r8
    a35a:	2b d3       	rcall	.+1622   	; 0xa9b2 <__gesf2>
    a35c:	18 16       	cp	r1, r24
    a35e:	2c f5       	brge	.+74     	; 0xa3aa <Fuzzy+0x182>
    a360:	20 e0       	ldi	r18, 0x00	; 0
    a362:	30 e0       	ldi	r19, 0x00	; 0
    a364:	40 ea       	ldi	r20, 0xA0	; 160
    a366:	51 e4       	ldi	r21, 0x41	; 65
    a368:	c5 01       	movw	r24, r10
    a36a:	b4 01       	movw	r22, r8
    a36c:	d3 d1       	rcall	.+934    	; 0xa714 <__cmpsf2>
    a36e:	18 16       	cp	r1, r24
    a370:	e4 f0       	brlt	.+56     	; 0xa3aa <Fuzzy+0x182>
    a372:	8b 81       	ldd	r24, Y+3	; 0x03
    a374:	88 23       	and	r24, r24
    a376:	c9 f0       	breq	.+50     	; 0xa3aa <Fuzzy+0x182>
    a378:	20 e0       	ldi	r18, 0x00	; 0
    a37a:	30 e0       	ldi	r19, 0x00	; 0
    a37c:	40 e2       	ldi	r20, 0x20	; 32
    a37e:	51 e4       	ldi	r21, 0x41	; 65
    a380:	c5 01       	movw	r24, r10
    a382:	b4 01       	movw	r22, r8
    a384:	62 d1       	rcall	.+708    	; 0xa64a <__subsf3>
    a386:	20 e0       	ldi	r18, 0x00	; 0
    a388:	30 e0       	ldi	r19, 0x00	; 0
    a38a:	40 e2       	ldi	r20, 0x20	; 32
    a38c:	51 e4       	ldi	r21, 0x41	; 65
    a38e:	c6 d1       	rcall	.+908    	; 0xa71c <__divsf3>
    a390:	20 e0       	ldi	r18, 0x00	; 0
    a392:	30 e0       	ldi	r19, 0x00	; 0
    a394:	48 ec       	ldi	r20, 0xC8	; 200
    a396:	52 e4       	ldi	r21, 0x42	; 66
    a398:	55 d3       	rcall	.+1706   	; 0xaa44 <__mulsf3>
    a39a:	20 e0       	ldi	r18, 0x00	; 0
    a39c:	30 e0       	ldi	r19, 0x00	; 0
    a39e:	48 ec       	ldi	r20, 0xC8	; 200
    a3a0:	52 e4       	ldi	r21, 0x42	; 66
    a3a2:	54 d1       	rcall	.+680    	; 0xa64c <__addsf3>
    a3a4:	23 d2       	rcall	.+1094   	; 0xa7ec <__fixsfsi>
    a3a6:	7b 01       	movw	r14, r22
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps); }//;
	else if(comp->Src_In >20 && comp->Src_In<=30 && comp->Heating==1) {steps = (comp->Src_In-20)/10 * 100 + 150;}
    a3a8:	c0 c0       	rjmp	.+384    	; 0xa52a <Fuzzy+0x302>
    a3aa:	20 e0       	ldi	r18, 0x00	; 0
    a3ac:	30 e0       	ldi	r19, 0x00	; 0
    a3ae:	40 ea       	ldi	r20, 0xA0	; 160
    a3b0:	51 e4       	ldi	r21, 0x41	; 65
    a3b2:	c7 01       	movw	r24, r14
    a3b4:	b6 01       	movw	r22, r12
    a3b6:	fd d2       	rcall	.+1530   	; 0xa9b2 <__gesf2>
    a3b8:	18 16       	cp	r1, r24
    a3ba:	2c f5       	brge	.+74     	; 0xa406 <Fuzzy+0x1de>
    a3bc:	20 e0       	ldi	r18, 0x00	; 0
    a3be:	30 e0       	ldi	r19, 0x00	; 0
    a3c0:	40 ef       	ldi	r20, 0xF0	; 240
    a3c2:	51 e4       	ldi	r21, 0x41	; 65
    a3c4:	c7 01       	movw	r24, r14
    a3c6:	b6 01       	movw	r22, r12
    a3c8:	a5 d1       	rcall	.+842    	; 0xa714 <__cmpsf2>
    a3ca:	18 16       	cp	r1, r24
    a3cc:	e4 f0       	brlt	.+56     	; 0xa406 <Fuzzy+0x1de>
    a3ce:	8a 81       	ldd	r24, Y+2	; 0x02
    a3d0:	88 23       	and	r24, r24
    a3d2:	c9 f0       	breq	.+50     	; 0xa406 <Fuzzy+0x1de>
    a3d4:	20 e0       	ldi	r18, 0x00	; 0
    a3d6:	30 e0       	ldi	r19, 0x00	; 0
    a3d8:	40 ea       	ldi	r20, 0xA0	; 160
    a3da:	51 e4       	ldi	r21, 0x41	; 65
    a3dc:	c7 01       	movw	r24, r14
    a3de:	b6 01       	movw	r22, r12
    a3e0:	34 d1       	rcall	.+616    	; 0xa64a <__subsf3>
    a3e2:	20 e0       	ldi	r18, 0x00	; 0
    a3e4:	30 e0       	ldi	r19, 0x00	; 0
    a3e6:	40 e2       	ldi	r20, 0x20	; 32
    a3e8:	51 e4       	ldi	r21, 0x41	; 65
    a3ea:	98 d1       	rcall	.+816    	; 0xa71c <__divsf3>
    a3ec:	20 e0       	ldi	r18, 0x00	; 0
    a3ee:	30 e0       	ldi	r19, 0x00	; 0
    a3f0:	48 ec       	ldi	r20, 0xC8	; 200
    a3f2:	52 e4       	ldi	r21, 0x42	; 66
    a3f4:	27 d3       	rcall	.+1614   	; 0xaa44 <__mulsf3>
    a3f6:	20 e0       	ldi	r18, 0x00	; 0
    a3f8:	30 e0       	ldi	r19, 0x00	; 0
    a3fa:	46 e1       	ldi	r20, 0x16	; 22
    a3fc:	53 e4       	ldi	r21, 0x43	; 67
    a3fe:	26 d1       	rcall	.+588    	; 0xa64c <__addsf3>
    a400:	f5 d1       	rcall	.+1002   	; 0xa7ec <__fixsfsi>
    a402:	7b 01       	movw	r14, r22
	else if(comp->Src_Out >20 && comp->Src_Out<=30 && comp->Cooling==1) {steps = (comp->Src_Out-20)/10 * 100 + 150;}	
    a404:	92 c0       	rjmp	.+292    	; 0xa52a <Fuzzy+0x302>
    a406:	20 e0       	ldi	r18, 0x00	; 0
    a408:	30 e0       	ldi	r19, 0x00	; 0
    a40a:	40 ea       	ldi	r20, 0xA0	; 160
    a40c:	51 e4       	ldi	r21, 0x41	; 65
    a40e:	c5 01       	movw	r24, r10
    a410:	b4 01       	movw	r22, r8
    a412:	cf d2       	rcall	.+1438   	; 0xa9b2 <__gesf2>
    a414:	18 16       	cp	r1, r24
    a416:	2c f5       	brge	.+74     	; 0xa462 <Fuzzy+0x23a>
    a418:	20 e0       	ldi	r18, 0x00	; 0
    a41a:	30 e0       	ldi	r19, 0x00	; 0
    a41c:	40 ef       	ldi	r20, 0xF0	; 240
    a41e:	51 e4       	ldi	r21, 0x41	; 65
    a420:	c5 01       	movw	r24, r10
    a422:	b4 01       	movw	r22, r8
    a424:	77 d1       	rcall	.+750    	; 0xa714 <__cmpsf2>
    a426:	18 16       	cp	r1, r24
    a428:	e4 f0       	brlt	.+56     	; 0xa462 <Fuzzy+0x23a>
    a42a:	8b 81       	ldd	r24, Y+3	; 0x03
    a42c:	88 23       	and	r24, r24
    a42e:	c9 f0       	breq	.+50     	; 0xa462 <Fuzzy+0x23a>
    a430:	20 e0       	ldi	r18, 0x00	; 0
    a432:	30 e0       	ldi	r19, 0x00	; 0
    a434:	40 ea       	ldi	r20, 0xA0	; 160
    a436:	51 e4       	ldi	r21, 0x41	; 65
    a438:	c5 01       	movw	r24, r10
    a43a:	b4 01       	movw	r22, r8
    a43c:	06 d1       	rcall	.+524    	; 0xa64a <__subsf3>
    a43e:	20 e0       	ldi	r18, 0x00	; 0
    a440:	30 e0       	ldi	r19, 0x00	; 0
    a442:	40 e2       	ldi	r20, 0x20	; 32
    a444:	51 e4       	ldi	r21, 0x41	; 65
    a446:	6a d1       	rcall	.+724    	; 0xa71c <__divsf3>
    a448:	20 e0       	ldi	r18, 0x00	; 0
    a44a:	30 e0       	ldi	r19, 0x00	; 0
    a44c:	48 ec       	ldi	r20, 0xC8	; 200
    a44e:	52 e4       	ldi	r21, 0x42	; 66
    a450:	f9 d2       	rcall	.+1522   	; 0xaa44 <__mulsf3>
    a452:	20 e0       	ldi	r18, 0x00	; 0
    a454:	30 e0       	ldi	r19, 0x00	; 0
    a456:	46 e1       	ldi	r20, 0x16	; 22
    a458:	53 e4       	ldi	r21, 0x43	; 67
    a45a:	f8 d0       	rcall	.+496    	; 0xa64c <__addsf3>
    a45c:	c7 d1       	rcall	.+910    	; 0xa7ec <__fixsfsi>
		
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps);}// comp->trvCorection;
	else if(comp->Src_In>30 && comp->Src_In<=40 && comp->Heating==1)  {steps = (comp->Src_In-30)/10 * 100 + 200;}
    a45e:	7b 01       	movw	r14, r22
    a460:	64 c0       	rjmp	.+200    	; 0xa52a <Fuzzy+0x302>
    a462:	20 e0       	ldi	r18, 0x00	; 0
    a464:	30 e0       	ldi	r19, 0x00	; 0
    a466:	40 ef       	ldi	r20, 0xF0	; 240
    a468:	51 e4       	ldi	r21, 0x41	; 65
    a46a:	c7 01       	movw	r24, r14
    a46c:	b6 01       	movw	r22, r12
    a46e:	a1 d2       	rcall	.+1346   	; 0xa9b2 <__gesf2>
    a470:	18 16       	cp	r1, r24
    a472:	2c f5       	brge	.+74     	; 0xa4be <Fuzzy+0x296>
    a474:	20 e0       	ldi	r18, 0x00	; 0
    a476:	30 e0       	ldi	r19, 0x00	; 0
    a478:	40 e2       	ldi	r20, 0x20	; 32
    a47a:	52 e4       	ldi	r21, 0x42	; 66
    a47c:	c7 01       	movw	r24, r14
    a47e:	b6 01       	movw	r22, r12
    a480:	49 d1       	rcall	.+658    	; 0xa714 <__cmpsf2>
    a482:	18 16       	cp	r1, r24
    a484:	e4 f0       	brlt	.+56     	; 0xa4be <Fuzzy+0x296>
    a486:	8a 81       	ldd	r24, Y+2	; 0x02
    a488:	88 23       	and	r24, r24
    a48a:	c9 f0       	breq	.+50     	; 0xa4be <Fuzzy+0x296>
    a48c:	20 e0       	ldi	r18, 0x00	; 0
    a48e:	30 e0       	ldi	r19, 0x00	; 0
    a490:	40 ef       	ldi	r20, 0xF0	; 240
    a492:	51 e4       	ldi	r21, 0x41	; 65
    a494:	c7 01       	movw	r24, r14
    a496:	b6 01       	movw	r22, r12
    a498:	d8 d0       	rcall	.+432    	; 0xa64a <__subsf3>
    a49a:	20 e0       	ldi	r18, 0x00	; 0
    a49c:	30 e0       	ldi	r19, 0x00	; 0
    a49e:	40 e2       	ldi	r20, 0x20	; 32
    a4a0:	51 e4       	ldi	r21, 0x41	; 65
    a4a2:	3c d1       	rcall	.+632    	; 0xa71c <__divsf3>
    a4a4:	20 e0       	ldi	r18, 0x00	; 0
    a4a6:	30 e0       	ldi	r19, 0x00	; 0
    a4a8:	48 ec       	ldi	r20, 0xC8	; 200
    a4aa:	52 e4       	ldi	r21, 0x42	; 66
    a4ac:	cb d2       	rcall	.+1430   	; 0xaa44 <__mulsf3>
    a4ae:	20 e0       	ldi	r18, 0x00	; 0
    a4b0:	30 e0       	ldi	r19, 0x00	; 0
    a4b2:	48 e4       	ldi	r20, 0x48	; 72
    a4b4:	53 e4       	ldi	r21, 0x43	; 67
    a4b6:	ca d0       	rcall	.+404    	; 0xa64c <__addsf3>
	else if(comp->Src_Out>30 && comp->Src_Out<=40 && comp->Cooling==1)  {steps = (comp->Src_Out-30)/10 * 100 + 200;}	
    a4b8:	99 d1       	rcall	.+818    	; 0xa7ec <__fixsfsi>
    a4ba:	7b 01       	movw	r14, r22
    a4bc:	36 c0       	rjmp	.+108    	; 0xa52a <Fuzzy+0x302>
    a4be:	20 e0       	ldi	r18, 0x00	; 0
    a4c0:	30 e0       	ldi	r19, 0x00	; 0
    a4c2:	40 ef       	ldi	r20, 0xF0	; 240
    a4c4:	51 e4       	ldi	r21, 0x41	; 65
    a4c6:	c5 01       	movw	r24, r10
    a4c8:	b4 01       	movw	r22, r8
    a4ca:	73 d2       	rcall	.+1254   	; 0xa9b2 <__gesf2>
    a4cc:	18 16       	cp	r1, r24
    a4ce:	2c f5       	brge	.+74     	; 0xa51a <Fuzzy+0x2f2>
    a4d0:	20 e0       	ldi	r18, 0x00	; 0
    a4d2:	30 e0       	ldi	r19, 0x00	; 0
    a4d4:	40 e2       	ldi	r20, 0x20	; 32
    a4d6:	52 e4       	ldi	r21, 0x42	; 66
    a4d8:	c5 01       	movw	r24, r10
    a4da:	b4 01       	movw	r22, r8
    a4dc:	1b d1       	rcall	.+566    	; 0xa714 <__cmpsf2>
    a4de:	18 16       	cp	r1, r24
    a4e0:	fc f0       	brlt	.+62     	; 0xa520 <Fuzzy+0x2f8>
    a4e2:	8b 81       	ldd	r24, Y+3	; 0x03
    a4e4:	88 23       	and	r24, r24
    a4e6:	f9 f0       	breq	.+62     	; 0xa526 <Fuzzy+0x2fe>
    a4e8:	20 e0       	ldi	r18, 0x00	; 0
    a4ea:	30 e0       	ldi	r19, 0x00	; 0
    a4ec:	40 ef       	ldi	r20, 0xF0	; 240
    a4ee:	51 e4       	ldi	r21, 0x41	; 65
    a4f0:	c5 01       	movw	r24, r10
    a4f2:	b4 01       	movw	r22, r8
    a4f4:	aa d0       	rcall	.+340    	; 0xa64a <__subsf3>
    a4f6:	20 e0       	ldi	r18, 0x00	; 0
    a4f8:	30 e0       	ldi	r19, 0x00	; 0
    a4fa:	40 e2       	ldi	r20, 0x20	; 32
    a4fc:	51 e4       	ldi	r21, 0x41	; 65
    a4fe:	0e d1       	rcall	.+540    	; 0xa71c <__divsf3>
    a500:	20 e0       	ldi	r18, 0x00	; 0
    a502:	30 e0       	ldi	r19, 0x00	; 0
    a504:	48 ec       	ldi	r20, 0xC8	; 200
    a506:	52 e4       	ldi	r21, 0x42	; 66
    a508:	9d d2       	rcall	.+1338   	; 0xaa44 <__mulsf3>
    a50a:	20 e0       	ldi	r18, 0x00	; 0
    a50c:	30 e0       	ldi	r19, 0x00	; 0
    a50e:	48 e4       	ldi	r20, 0x48	; 72
    a510:	53 e4       	ldi	r21, 0x43	; 67
    a512:	9c d0       	rcall	.+312    	; 0xa64c <__addsf3>
    a514:	6b d1       	rcall	.+726    	; 0xa7ec <__fixsfsi>
    a516:	7b 01       	movw	r14, r22
    a518:	08 c0       	rjmp	.+16     	; 0xa52a <Fuzzy+0x302>
    a51a:	e1 2c       	mov	r14, r1
    a51c:	f1 2c       	mov	r15, r1
    a51e:	05 c0       	rjmp	.+10     	; 0xa52a <Fuzzy+0x302>
	}
}
//----------------------------------------------------------------------------------------------------------
int Fuzzy(xCompressor *comp,int corection)
{
	int steps=0;
    a520:	e1 2c       	mov	r14, r1
    a522:	f1 2c       	mov	r15, r1
    a524:	02 c0       	rjmp	.+4      	; 0xa52a <Fuzzy+0x302>
    a526:	e1 2c       	mov	r14, r1
    a528:	f1 2c       	mov	r15, r1
    a52a:	0e 19       	sub	r16, r14
    a52c:	1f 09       	sbc	r17, r15
    a52e:	fe 01       	movw	r30, r28
		 //if(old_corection_2!=corection && comp->Index==2){comp->trvCorection=corection-steps;old_corection_2=corection;}
	//xSerialxPrintf(&xSerial3Port,"TRVcorection_%d = %d \r\n",comp->Index, corection);
			
	
	
	comp->trvCorection=corection-steps;
    a530:	e6 59       	subi	r30, 0x96	; 150
    a532:	ff 4f       	sbci	r31, 0xFF	; 255
    a534:	11 83       	std	Z+1, r17	; 0x01
    a536:	00 83       	st	Z, r16
    a538:	38 96       	adiw	r30, 0x08	; 8
    a53a:	80 81       	ld	r24, Z
    a53c:	91 81       	ldd	r25, Z+1	; 0x01
	if(comp->Index==2)xSerialxPrintf(&xSerial3Port,"TRVcorection_2 = %d \r\n", comp->trvCorection);
    a53e:	02 97       	sbiw	r24, 0x02	; 2
    a540:	91 f4       	brne	.+36     	; 0xa566 <Fuzzy+0x33e>
    a542:	1f 93       	push	r17
    a544:	0f 93       	push	r16
    a546:	80 e2       	ldi	r24, 0x20	; 32
    a548:	96 e0       	ldi	r25, 0x06	; 6
    a54a:	9f 93       	push	r25
    a54c:	8f 93       	push	r24
    a54e:	8a ea       	ldi	r24, 0xAA	; 170
    a550:	97 e0       	ldi	r25, 0x07	; 7
    a552:	9f 93       	push	r25
    a554:	8f 93       	push	r24
    a556:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a55a:	0f 90       	pop	r0
    a55c:	0f 90       	pop	r0
    a55e:	0f 90       	pop	r0
    a560:	0f 90       	pop	r0
    a562:	0f 90       	pop	r0
    a564:	0f 90       	pop	r0
    a566:	fe 01       	movw	r30, r28
    a568:	ee 58       	subi	r30, 0x8E	; 142
    a56a:	ff 4f       	sbci	r31, 0xFF	; 255
	if(comp->Index==1)xSerialxPrintf(&xSerial3Port,"TRVcorection_1 = %d \r\n", comp->trvCorection);
    a56c:	80 81       	ld	r24, Z
    a56e:	91 81       	ldd	r25, Z+1	; 0x01
    a570:	01 97       	sbiw	r24, 0x01	; 1
    a572:	a9 f4       	brne	.+42     	; 0xa59e <Fuzzy+0x376>
    a574:	38 97       	sbiw	r30, 0x08	; 8
    a576:	81 81       	ldd	r24, Z+1	; 0x01
    a578:	8f 93       	push	r24
    a57a:	80 81       	ld	r24, Z
    a57c:	8f 93       	push	r24
    a57e:	87 e3       	ldi	r24, 0x37	; 55
    a580:	96 e0       	ldi	r25, 0x06	; 6
    a582:	9f 93       	push	r25
    a584:	8f 93       	push	r24
    a586:	8a ea       	ldi	r24, 0xAA	; 170
    a588:	97 e0       	ldi	r25, 0x07	; 7
    a58a:	9f 93       	push	r25
    a58c:	8f 93       	push	r24
    a58e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a592:	0f 90       	pop	r0
    a594:	0f 90       	pop	r0
    a596:	0f 90       	pop	r0
    a598:	0f 90       	pop	r0
    a59a:	0f 90       	pop	r0
    a59c:	0f 90       	pop	r0
    a59e:	fe 01       	movw	r30, r28
    a5a0:	e6 59       	subi	r30, 0x96	; 150
    a5a2:	ff 4f       	sbci	r31, 0xFF	; 255
	steps=steps+comp->trvCorection;
    a5a4:	60 81       	ld	r22, Z
    a5a6:	71 81       	ldd	r23, Z+1	; 0x01
    a5a8:	e6 0e       	add	r14, r22
    a5aa:	f7 1e       	adc	r15, r23
    a5ac:	8e 01       	movw	r16, r28
    a5ae:	02 59       	subi	r16, 0x92	; 146
    a5b0:	1f 4f       	sbci	r17, 0xFF	; 255
	comp->Steps=comp->Trv_position;		
    a5b2:	f8 01       	movw	r30, r16
    a5b4:	80 81       	ld	r24, Z
    a5b6:	91 81       	ldd	r25, Z+1	; 0x01
    a5b8:	c4 59       	subi	r28, 0x94	; 148
    a5ba:	df 4f       	sbci	r29, 0xFF	; 255
    a5bc:	88 83       	st	Y, r24
    a5be:	99 83       	std	Y+1, r25	; 0x01
    a5c0:	9f 93       	push	r25
    a5c2:	8f 93       	push	r24
    a5c4:	8e e4       	ldi	r24, 0x4E	; 78
	//comp->Steps=steps - comp->Trv_position;
xSerialxPrintf(&xSerial3Port,"Steps = %d \r\n", comp->Steps);
    a5c6:	96 e0       	ldi	r25, 0x06	; 6
    a5c8:	9f 93       	push	r25
    a5ca:	8f 93       	push	r24
    a5cc:	ca ea       	ldi	r28, 0xAA	; 170
    a5ce:	d7 e0       	ldi	r29, 0x07	; 7
    a5d0:	df 93       	push	r29
    a5d2:	cf 93       	push	r28
    a5d4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a5d8:	f8 01       	movw	r30, r16
    a5da:	81 81       	ldd	r24, Z+1	; 0x01
    a5dc:	8f 93       	push	r24
xSerialxPrintf(&xSerial3Port,"Trv_position = %d \r\n", comp->Trv_position);	
    a5de:	80 81       	ld	r24, Z
    a5e0:	8f 93       	push	r24
    a5e2:	8c e5       	ldi	r24, 0x5C	; 92
    a5e4:	96 e0       	ldi	r25, 0x06	; 6
    a5e6:	9f 93       	push	r25
    a5e8:	8f 93       	push	r24
    a5ea:	df 93       	push	r29
    a5ec:	cf 93       	push	r28
    a5ee:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a5f2:	f8 01       	movw	r30, r16
    a5f4:	80 81       	ld	r24, Z
    a5f6:	91 81       	ldd	r25, Z+1	; 0x01
return (steps - comp->Trv_position);//comp->Steps;
    a5f8:	2d b7       	in	r18, 0x3d	; 61
    a5fa:	3e b7       	in	r19, 0x3e	; 62
    a5fc:	24 5f       	subi	r18, 0xF4	; 244
    a5fe:	3f 4f       	sbci	r19, 0xFF	; 255
    a600:	0f b6       	in	r0, 0x3f	; 63
    a602:	f8 94       	cli
    a604:	3e bf       	out	0x3e, r19	; 62
    a606:	0f be       	out	0x3f, r0	; 63
    a608:	2d bf       	out	0x3d, r18	; 61
    a60a:	f7 01       	movw	r30, r14
    a60c:	e8 1b       	sub	r30, r24
    a60e:	f9 0b       	sbc	r31, r25
}
    a610:	cf 01       	movw	r24, r30
    a612:	df 91       	pop	r29
    a614:	cf 91       	pop	r28
    a616:	1f 91       	pop	r17
    a618:	0f 91       	pop	r16
    a61a:	ff 90       	pop	r15
    a61c:	ef 90       	pop	r14
    a61e:	df 90       	pop	r13
    a620:	cf 90       	pop	r12
    a622:	bf 90       	pop	r11
    a624:	af 90       	pop	r10
    a626:	9f 90       	pop	r9
    a628:	8f 90       	pop	r8
    a62a:	08 95       	ret

0000a62c <calibration>:
    a62c:	21 e0       	ldi	r18, 0x01	; 1
    a62e:	fc 01       	movw	r30, r24
    a630:	27 83       	std	Z+7, r18	; 0x07
////////////////////////////////////////////////////////////////////////////////////////////////////////
void calibration(xCompressor *comp)
{
	comp->calibrate=true;
	comp->Steps=-240;
    a632:	e4 59       	subi	r30, 0x94	; 148
    a634:	ff 4f       	sbci	r31, 0xFF	; 255
    a636:	20 e1       	ldi	r18, 0x10	; 16
    a638:	3f ef       	ldi	r19, 0xFF	; 255
    a63a:	31 83       	std	Z+1, r19	; 0x01
    a63c:	20 83       	st	Z, r18
	comp->Trv_position=240;
    a63e:	32 96       	adiw	r30, 0x02	; 2
    a640:	20 ef       	ldi	r18, 0xF0	; 240
    a642:	30 e0       	ldi	r19, 0x00	; 0
    a644:	31 83       	std	Z+1, r19	; 0x01
    a646:	20 83       	st	Z, r18
    a648:	08 95       	ret

0000a64a <__subsf3>:
    a64a:	50 58       	subi	r21, 0x80	; 128

0000a64c <__addsf3>:
    a64c:	bb 27       	eor	r27, r27
    a64e:	aa 27       	eor	r26, r26
    a650:	0e d0       	rcall	.+28     	; 0xa66e <__addsf3x>
    a652:	75 c1       	rjmp	.+746    	; 0xa93e <__fp_round>
    a654:	66 d1       	rcall	.+716    	; 0xa922 <__fp_pscA>
    a656:	30 f0       	brcs	.+12     	; 0xa664 <__addsf3+0x18>
    a658:	6b d1       	rcall	.+726    	; 0xa930 <__fp_pscB>
    a65a:	20 f0       	brcs	.+8      	; 0xa664 <__addsf3+0x18>
    a65c:	31 f4       	brne	.+12     	; 0xa66a <__addsf3+0x1e>
    a65e:	9f 3f       	cpi	r25, 0xFF	; 255
    a660:	11 f4       	brne	.+4      	; 0xa666 <__addsf3+0x1a>
    a662:	1e f4       	brtc	.+6      	; 0xa66a <__addsf3+0x1e>
    a664:	5b c1       	rjmp	.+694    	; 0xa91c <__fp_nan>
    a666:	0e f4       	brtc	.+2      	; 0xa66a <__addsf3+0x1e>
    a668:	e0 95       	com	r30
    a66a:	e7 fb       	bst	r30, 7
    a66c:	51 c1       	rjmp	.+674    	; 0xa910 <__fp_inf>

0000a66e <__addsf3x>:
    a66e:	e9 2f       	mov	r30, r25
    a670:	77 d1       	rcall	.+750    	; 0xa960 <__fp_split3>
    a672:	80 f3       	brcs	.-32     	; 0xa654 <__addsf3+0x8>
    a674:	ba 17       	cp	r27, r26
    a676:	62 07       	cpc	r22, r18
    a678:	73 07       	cpc	r23, r19
    a67a:	84 07       	cpc	r24, r20
    a67c:	95 07       	cpc	r25, r21
    a67e:	18 f0       	brcs	.+6      	; 0xa686 <__addsf3x+0x18>
    a680:	71 f4       	brne	.+28     	; 0xa69e <__addsf3x+0x30>
    a682:	9e f5       	brtc	.+102    	; 0xa6ea <__addsf3x+0x7c>
    a684:	8f c1       	rjmp	.+798    	; 0xa9a4 <__fp_zero>
    a686:	0e f4       	brtc	.+2      	; 0xa68a <__addsf3x+0x1c>
    a688:	e0 95       	com	r30
    a68a:	0b 2e       	mov	r0, r27
    a68c:	ba 2f       	mov	r27, r26
    a68e:	a0 2d       	mov	r26, r0
    a690:	0b 01       	movw	r0, r22
    a692:	b9 01       	movw	r22, r18
    a694:	90 01       	movw	r18, r0
    a696:	0c 01       	movw	r0, r24
    a698:	ca 01       	movw	r24, r20
    a69a:	a0 01       	movw	r20, r0
    a69c:	11 24       	eor	r1, r1
    a69e:	ff 27       	eor	r31, r31
    a6a0:	59 1b       	sub	r21, r25
    a6a2:	99 f0       	breq	.+38     	; 0xa6ca <__addsf3x+0x5c>
    a6a4:	59 3f       	cpi	r21, 0xF9	; 249
    a6a6:	50 f4       	brcc	.+20     	; 0xa6bc <__addsf3x+0x4e>
    a6a8:	50 3e       	cpi	r21, 0xE0	; 224
    a6aa:	68 f1       	brcs	.+90     	; 0xa706 <__addsf3x+0x98>
    a6ac:	1a 16       	cp	r1, r26
    a6ae:	f0 40       	sbci	r31, 0x00	; 0
    a6b0:	a2 2f       	mov	r26, r18
    a6b2:	23 2f       	mov	r18, r19
    a6b4:	34 2f       	mov	r19, r20
    a6b6:	44 27       	eor	r20, r20
    a6b8:	58 5f       	subi	r21, 0xF8	; 248
    a6ba:	f3 cf       	rjmp	.-26     	; 0xa6a2 <__addsf3x+0x34>
    a6bc:	46 95       	lsr	r20
    a6be:	37 95       	ror	r19
    a6c0:	27 95       	ror	r18
    a6c2:	a7 95       	ror	r26
    a6c4:	f0 40       	sbci	r31, 0x00	; 0
    a6c6:	53 95       	inc	r21
    a6c8:	c9 f7       	brne	.-14     	; 0xa6bc <__addsf3x+0x4e>
    a6ca:	7e f4       	brtc	.+30     	; 0xa6ea <__addsf3x+0x7c>
    a6cc:	1f 16       	cp	r1, r31
    a6ce:	ba 0b       	sbc	r27, r26
    a6d0:	62 0b       	sbc	r22, r18
    a6d2:	73 0b       	sbc	r23, r19
    a6d4:	84 0b       	sbc	r24, r20
    a6d6:	ba f0       	brmi	.+46     	; 0xa706 <__addsf3x+0x98>
    a6d8:	91 50       	subi	r25, 0x01	; 1
    a6da:	a1 f0       	breq	.+40     	; 0xa704 <__addsf3x+0x96>
    a6dc:	ff 0f       	add	r31, r31
    a6de:	bb 1f       	adc	r27, r27
    a6e0:	66 1f       	adc	r22, r22
    a6e2:	77 1f       	adc	r23, r23
    a6e4:	88 1f       	adc	r24, r24
    a6e6:	c2 f7       	brpl	.-16     	; 0xa6d8 <__addsf3x+0x6a>
    a6e8:	0e c0       	rjmp	.+28     	; 0xa706 <__addsf3x+0x98>
    a6ea:	ba 0f       	add	r27, r26
    a6ec:	62 1f       	adc	r22, r18
    a6ee:	73 1f       	adc	r23, r19
    a6f0:	84 1f       	adc	r24, r20
    a6f2:	48 f4       	brcc	.+18     	; 0xa706 <__addsf3x+0x98>
    a6f4:	87 95       	ror	r24
    a6f6:	77 95       	ror	r23
    a6f8:	67 95       	ror	r22
    a6fa:	b7 95       	ror	r27
    a6fc:	f7 95       	ror	r31
    a6fe:	9e 3f       	cpi	r25, 0xFE	; 254
    a700:	08 f0       	brcs	.+2      	; 0xa704 <__addsf3x+0x96>
    a702:	b3 cf       	rjmp	.-154    	; 0xa66a <__addsf3+0x1e>
    a704:	93 95       	inc	r25
    a706:	88 0f       	add	r24, r24
    a708:	08 f0       	brcs	.+2      	; 0xa70c <__addsf3x+0x9e>
    a70a:	99 27       	eor	r25, r25
    a70c:	ee 0f       	add	r30, r30
    a70e:	97 95       	ror	r25
    a710:	87 95       	ror	r24
    a712:	08 95       	ret

0000a714 <__cmpsf2>:
    a714:	d9 d0       	rcall	.+434    	; 0xa8c8 <__fp_cmp>
    a716:	08 f4       	brcc	.+2      	; 0xa71a <__cmpsf2+0x6>
    a718:	81 e0       	ldi	r24, 0x01	; 1
    a71a:	08 95       	ret

0000a71c <__divsf3>:
    a71c:	0c d0       	rcall	.+24     	; 0xa736 <__divsf3x>
    a71e:	0f c1       	rjmp	.+542    	; 0xa93e <__fp_round>
    a720:	07 d1       	rcall	.+526    	; 0xa930 <__fp_pscB>
    a722:	40 f0       	brcs	.+16     	; 0xa734 <__divsf3+0x18>
    a724:	fe d0       	rcall	.+508    	; 0xa922 <__fp_pscA>
    a726:	30 f0       	brcs	.+12     	; 0xa734 <__divsf3+0x18>
    a728:	21 f4       	brne	.+8      	; 0xa732 <__divsf3+0x16>
    a72a:	5f 3f       	cpi	r21, 0xFF	; 255
    a72c:	19 f0       	breq	.+6      	; 0xa734 <__divsf3+0x18>
    a72e:	f0 c0       	rjmp	.+480    	; 0xa910 <__fp_inf>
    a730:	51 11       	cpse	r21, r1
    a732:	39 c1       	rjmp	.+626    	; 0xa9a6 <__fp_szero>
    a734:	f3 c0       	rjmp	.+486    	; 0xa91c <__fp_nan>

0000a736 <__divsf3x>:
    a736:	14 d1       	rcall	.+552    	; 0xa960 <__fp_split3>
    a738:	98 f3       	brcs	.-26     	; 0xa720 <__divsf3+0x4>

0000a73a <__divsf3_pse>:
    a73a:	99 23       	and	r25, r25
    a73c:	c9 f3       	breq	.-14     	; 0xa730 <__divsf3+0x14>
    a73e:	55 23       	and	r21, r21
    a740:	b1 f3       	breq	.-20     	; 0xa72e <__divsf3+0x12>
    a742:	95 1b       	sub	r25, r21
    a744:	55 0b       	sbc	r21, r21
    a746:	bb 27       	eor	r27, r27
    a748:	aa 27       	eor	r26, r26
    a74a:	62 17       	cp	r22, r18
    a74c:	73 07       	cpc	r23, r19
    a74e:	84 07       	cpc	r24, r20
    a750:	38 f0       	brcs	.+14     	; 0xa760 <__divsf3_pse+0x26>
    a752:	9f 5f       	subi	r25, 0xFF	; 255
    a754:	5f 4f       	sbci	r21, 0xFF	; 255
    a756:	22 0f       	add	r18, r18
    a758:	33 1f       	adc	r19, r19
    a75a:	44 1f       	adc	r20, r20
    a75c:	aa 1f       	adc	r26, r26
    a75e:	a9 f3       	breq	.-22     	; 0xa74a <__divsf3_pse+0x10>
    a760:	33 d0       	rcall	.+102    	; 0xa7c8 <__divsf3_pse+0x8e>
    a762:	0e 2e       	mov	r0, r30
    a764:	3a f0       	brmi	.+14     	; 0xa774 <__divsf3_pse+0x3a>
    a766:	e0 e8       	ldi	r30, 0x80	; 128
    a768:	30 d0       	rcall	.+96     	; 0xa7ca <__divsf3_pse+0x90>
    a76a:	91 50       	subi	r25, 0x01	; 1
    a76c:	50 40       	sbci	r21, 0x00	; 0
    a76e:	e6 95       	lsr	r30
    a770:	00 1c       	adc	r0, r0
    a772:	ca f7       	brpl	.-14     	; 0xa766 <__divsf3_pse+0x2c>
    a774:	29 d0       	rcall	.+82     	; 0xa7c8 <__divsf3_pse+0x8e>
    a776:	fe 2f       	mov	r31, r30
    a778:	27 d0       	rcall	.+78     	; 0xa7c8 <__divsf3_pse+0x8e>
    a77a:	66 0f       	add	r22, r22
    a77c:	77 1f       	adc	r23, r23
    a77e:	88 1f       	adc	r24, r24
    a780:	bb 1f       	adc	r27, r27
    a782:	26 17       	cp	r18, r22
    a784:	37 07       	cpc	r19, r23
    a786:	48 07       	cpc	r20, r24
    a788:	ab 07       	cpc	r26, r27
    a78a:	b0 e8       	ldi	r27, 0x80	; 128
    a78c:	09 f0       	breq	.+2      	; 0xa790 <__divsf3_pse+0x56>
    a78e:	bb 0b       	sbc	r27, r27
    a790:	80 2d       	mov	r24, r0
    a792:	bf 01       	movw	r22, r30
    a794:	ff 27       	eor	r31, r31
    a796:	93 58       	subi	r25, 0x83	; 131
    a798:	5f 4f       	sbci	r21, 0xFF	; 255
    a79a:	2a f0       	brmi	.+10     	; 0xa7a6 <__divsf3_pse+0x6c>
    a79c:	9e 3f       	cpi	r25, 0xFE	; 254
    a79e:	51 05       	cpc	r21, r1
    a7a0:	68 f0       	brcs	.+26     	; 0xa7bc <__divsf3_pse+0x82>
    a7a2:	b6 c0       	rjmp	.+364    	; 0xa910 <__fp_inf>
    a7a4:	00 c1       	rjmp	.+512    	; 0xa9a6 <__fp_szero>
    a7a6:	5f 3f       	cpi	r21, 0xFF	; 255
    a7a8:	ec f3       	brlt	.-6      	; 0xa7a4 <__divsf3_pse+0x6a>
    a7aa:	98 3e       	cpi	r25, 0xE8	; 232
    a7ac:	dc f3       	brlt	.-10     	; 0xa7a4 <__divsf3_pse+0x6a>
    a7ae:	86 95       	lsr	r24
    a7b0:	77 95       	ror	r23
    a7b2:	67 95       	ror	r22
    a7b4:	b7 95       	ror	r27
    a7b6:	f7 95       	ror	r31
    a7b8:	9f 5f       	subi	r25, 0xFF	; 255
    a7ba:	c9 f7       	brne	.-14     	; 0xa7ae <__divsf3_pse+0x74>
    a7bc:	88 0f       	add	r24, r24
    a7be:	91 1d       	adc	r25, r1
    a7c0:	96 95       	lsr	r25
    a7c2:	87 95       	ror	r24
    a7c4:	97 f9       	bld	r25, 7
    a7c6:	08 95       	ret
    a7c8:	e1 e0       	ldi	r30, 0x01	; 1
    a7ca:	66 0f       	add	r22, r22
    a7cc:	77 1f       	adc	r23, r23
    a7ce:	88 1f       	adc	r24, r24
    a7d0:	bb 1f       	adc	r27, r27
    a7d2:	62 17       	cp	r22, r18
    a7d4:	73 07       	cpc	r23, r19
    a7d6:	84 07       	cpc	r24, r20
    a7d8:	ba 07       	cpc	r27, r26
    a7da:	20 f0       	brcs	.+8      	; 0xa7e4 <__divsf3_pse+0xaa>
    a7dc:	62 1b       	sub	r22, r18
    a7de:	73 0b       	sbc	r23, r19
    a7e0:	84 0b       	sbc	r24, r20
    a7e2:	ba 0b       	sbc	r27, r26
    a7e4:	ee 1f       	adc	r30, r30
    a7e6:	88 f7       	brcc	.-30     	; 0xa7ca <__divsf3_pse+0x90>
    a7e8:	e0 95       	com	r30
    a7ea:	08 95       	ret

0000a7ec <__fixsfsi>:
    a7ec:	04 d0       	rcall	.+8      	; 0xa7f6 <__fixunssfsi>
    a7ee:	68 94       	set
    a7f0:	b1 11       	cpse	r27, r1
    a7f2:	d9 c0       	rjmp	.+434    	; 0xa9a6 <__fp_szero>
    a7f4:	08 95       	ret

0000a7f6 <__fixunssfsi>:
    a7f6:	bc d0       	rcall	.+376    	; 0xa970 <__fp_splitA>
    a7f8:	88 f0       	brcs	.+34     	; 0xa81c <__fixunssfsi+0x26>
    a7fa:	9f 57       	subi	r25, 0x7F	; 127
    a7fc:	90 f0       	brcs	.+36     	; 0xa822 <__fixunssfsi+0x2c>
    a7fe:	b9 2f       	mov	r27, r25
    a800:	99 27       	eor	r25, r25
    a802:	b7 51       	subi	r27, 0x17	; 23
    a804:	a0 f0       	brcs	.+40     	; 0xa82e <__fixunssfsi+0x38>
    a806:	d1 f0       	breq	.+52     	; 0xa83c <__fixunssfsi+0x46>
    a808:	66 0f       	add	r22, r22
    a80a:	77 1f       	adc	r23, r23
    a80c:	88 1f       	adc	r24, r24
    a80e:	99 1f       	adc	r25, r25
    a810:	1a f0       	brmi	.+6      	; 0xa818 <__fixunssfsi+0x22>
    a812:	ba 95       	dec	r27
    a814:	c9 f7       	brne	.-14     	; 0xa808 <__fixunssfsi+0x12>
    a816:	12 c0       	rjmp	.+36     	; 0xa83c <__fixunssfsi+0x46>
    a818:	b1 30       	cpi	r27, 0x01	; 1
    a81a:	81 f0       	breq	.+32     	; 0xa83c <__fixunssfsi+0x46>
    a81c:	c3 d0       	rcall	.+390    	; 0xa9a4 <__fp_zero>
    a81e:	b1 e0       	ldi	r27, 0x01	; 1
    a820:	08 95       	ret
    a822:	c0 c0       	rjmp	.+384    	; 0xa9a4 <__fp_zero>
    a824:	67 2f       	mov	r22, r23
    a826:	78 2f       	mov	r23, r24
    a828:	88 27       	eor	r24, r24
    a82a:	b8 5f       	subi	r27, 0xF8	; 248
    a82c:	39 f0       	breq	.+14     	; 0xa83c <__fixunssfsi+0x46>
    a82e:	b9 3f       	cpi	r27, 0xF9	; 249
    a830:	cc f3       	brlt	.-14     	; 0xa824 <__fixunssfsi+0x2e>
    a832:	86 95       	lsr	r24
    a834:	77 95       	ror	r23
    a836:	67 95       	ror	r22
    a838:	b3 95       	inc	r27
    a83a:	d9 f7       	brne	.-10     	; 0xa832 <__fixunssfsi+0x3c>
    a83c:	3e f4       	brtc	.+14     	; 0xa84c <__fixunssfsi+0x56>
    a83e:	90 95       	com	r25
    a840:	80 95       	com	r24
    a842:	70 95       	com	r23
    a844:	61 95       	neg	r22
    a846:	7f 4f       	sbci	r23, 0xFF	; 255
    a848:	8f 4f       	sbci	r24, 0xFF	; 255
    a84a:	9f 4f       	sbci	r25, 0xFF	; 255
    a84c:	08 95       	ret

0000a84e <__floatunsisf>:
    a84e:	e8 94       	clt
    a850:	09 c0       	rjmp	.+18     	; 0xa864 <__floatsisf+0x12>

0000a852 <__floatsisf>:
    a852:	97 fb       	bst	r25, 7
    a854:	3e f4       	brtc	.+14     	; 0xa864 <__floatsisf+0x12>
    a856:	90 95       	com	r25
    a858:	80 95       	com	r24
    a85a:	70 95       	com	r23
    a85c:	61 95       	neg	r22
    a85e:	7f 4f       	sbci	r23, 0xFF	; 255
    a860:	8f 4f       	sbci	r24, 0xFF	; 255
    a862:	9f 4f       	sbci	r25, 0xFF	; 255
    a864:	99 23       	and	r25, r25
    a866:	a9 f0       	breq	.+42     	; 0xa892 <__floatsisf+0x40>
    a868:	f9 2f       	mov	r31, r25
    a86a:	96 e9       	ldi	r25, 0x96	; 150
    a86c:	bb 27       	eor	r27, r27
    a86e:	93 95       	inc	r25
    a870:	f6 95       	lsr	r31
    a872:	87 95       	ror	r24
    a874:	77 95       	ror	r23
    a876:	67 95       	ror	r22
    a878:	b7 95       	ror	r27
    a87a:	f1 11       	cpse	r31, r1
    a87c:	f8 cf       	rjmp	.-16     	; 0xa86e <__floatsisf+0x1c>
    a87e:	fa f4       	brpl	.+62     	; 0xa8be <__floatsisf+0x6c>
    a880:	bb 0f       	add	r27, r27
    a882:	11 f4       	brne	.+4      	; 0xa888 <__floatsisf+0x36>
    a884:	60 ff       	sbrs	r22, 0
    a886:	1b c0       	rjmp	.+54     	; 0xa8be <__floatsisf+0x6c>
    a888:	6f 5f       	subi	r22, 0xFF	; 255
    a88a:	7f 4f       	sbci	r23, 0xFF	; 255
    a88c:	8f 4f       	sbci	r24, 0xFF	; 255
    a88e:	9f 4f       	sbci	r25, 0xFF	; 255
    a890:	16 c0       	rjmp	.+44     	; 0xa8be <__floatsisf+0x6c>
    a892:	88 23       	and	r24, r24
    a894:	11 f0       	breq	.+4      	; 0xa89a <__floatsisf+0x48>
    a896:	96 e9       	ldi	r25, 0x96	; 150
    a898:	11 c0       	rjmp	.+34     	; 0xa8bc <__floatsisf+0x6a>
    a89a:	77 23       	and	r23, r23
    a89c:	21 f0       	breq	.+8      	; 0xa8a6 <__floatsisf+0x54>
    a89e:	9e e8       	ldi	r25, 0x8E	; 142
    a8a0:	87 2f       	mov	r24, r23
    a8a2:	76 2f       	mov	r23, r22
    a8a4:	05 c0       	rjmp	.+10     	; 0xa8b0 <__floatsisf+0x5e>
    a8a6:	66 23       	and	r22, r22
    a8a8:	71 f0       	breq	.+28     	; 0xa8c6 <__floatsisf+0x74>
    a8aa:	96 e8       	ldi	r25, 0x86	; 134
    a8ac:	86 2f       	mov	r24, r22
    a8ae:	70 e0       	ldi	r23, 0x00	; 0
    a8b0:	60 e0       	ldi	r22, 0x00	; 0
    a8b2:	2a f0       	brmi	.+10     	; 0xa8be <__floatsisf+0x6c>
    a8b4:	9a 95       	dec	r25
    a8b6:	66 0f       	add	r22, r22
    a8b8:	77 1f       	adc	r23, r23
    a8ba:	88 1f       	adc	r24, r24
    a8bc:	da f7       	brpl	.-10     	; 0xa8b4 <__floatsisf+0x62>
    a8be:	88 0f       	add	r24, r24
    a8c0:	96 95       	lsr	r25
    a8c2:	87 95       	ror	r24
    a8c4:	97 f9       	bld	r25, 7
    a8c6:	08 95       	ret

0000a8c8 <__fp_cmp>:
    a8c8:	99 0f       	add	r25, r25
    a8ca:	00 08       	sbc	r0, r0
    a8cc:	55 0f       	add	r21, r21
    a8ce:	aa 0b       	sbc	r26, r26
    a8d0:	e0 e8       	ldi	r30, 0x80	; 128
    a8d2:	fe ef       	ldi	r31, 0xFE	; 254
    a8d4:	16 16       	cp	r1, r22
    a8d6:	17 06       	cpc	r1, r23
    a8d8:	e8 07       	cpc	r30, r24
    a8da:	f9 07       	cpc	r31, r25
    a8dc:	c0 f0       	brcs	.+48     	; 0xa90e <__fp_cmp+0x46>
    a8de:	12 16       	cp	r1, r18
    a8e0:	13 06       	cpc	r1, r19
    a8e2:	e4 07       	cpc	r30, r20
    a8e4:	f5 07       	cpc	r31, r21
    a8e6:	98 f0       	brcs	.+38     	; 0xa90e <__fp_cmp+0x46>
    a8e8:	62 1b       	sub	r22, r18
    a8ea:	73 0b       	sbc	r23, r19
    a8ec:	84 0b       	sbc	r24, r20
    a8ee:	95 0b       	sbc	r25, r21
    a8f0:	39 f4       	brne	.+14     	; 0xa900 <__fp_cmp+0x38>
    a8f2:	0a 26       	eor	r0, r26
    a8f4:	61 f0       	breq	.+24     	; 0xa90e <__fp_cmp+0x46>
    a8f6:	23 2b       	or	r18, r19
    a8f8:	24 2b       	or	r18, r20
    a8fa:	25 2b       	or	r18, r21
    a8fc:	21 f4       	brne	.+8      	; 0xa906 <__fp_cmp+0x3e>
    a8fe:	08 95       	ret
    a900:	0a 26       	eor	r0, r26
    a902:	09 f4       	brne	.+2      	; 0xa906 <__fp_cmp+0x3e>
    a904:	a1 40       	sbci	r26, 0x01	; 1
    a906:	a6 95       	lsr	r26
    a908:	8f ef       	ldi	r24, 0xFF	; 255
    a90a:	81 1d       	adc	r24, r1
    a90c:	81 1d       	adc	r24, r1
    a90e:	08 95       	ret

0000a910 <__fp_inf>:
    a910:	97 f9       	bld	r25, 7
    a912:	9f 67       	ori	r25, 0x7F	; 127
    a914:	80 e8       	ldi	r24, 0x80	; 128
    a916:	70 e0       	ldi	r23, 0x00	; 0
    a918:	60 e0       	ldi	r22, 0x00	; 0
    a91a:	08 95       	ret

0000a91c <__fp_nan>:
    a91c:	9f ef       	ldi	r25, 0xFF	; 255
    a91e:	80 ec       	ldi	r24, 0xC0	; 192
    a920:	08 95       	ret

0000a922 <__fp_pscA>:
    a922:	00 24       	eor	r0, r0
    a924:	0a 94       	dec	r0
    a926:	16 16       	cp	r1, r22
    a928:	17 06       	cpc	r1, r23
    a92a:	18 06       	cpc	r1, r24
    a92c:	09 06       	cpc	r0, r25
    a92e:	08 95       	ret

0000a930 <__fp_pscB>:
    a930:	00 24       	eor	r0, r0
    a932:	0a 94       	dec	r0
    a934:	12 16       	cp	r1, r18
    a936:	13 06       	cpc	r1, r19
    a938:	14 06       	cpc	r1, r20
    a93a:	05 06       	cpc	r0, r21
    a93c:	08 95       	ret

0000a93e <__fp_round>:
    a93e:	09 2e       	mov	r0, r25
    a940:	03 94       	inc	r0
    a942:	00 0c       	add	r0, r0
    a944:	11 f4       	brne	.+4      	; 0xa94a <__fp_round+0xc>
    a946:	88 23       	and	r24, r24
    a948:	52 f0       	brmi	.+20     	; 0xa95e <__fp_round+0x20>
    a94a:	bb 0f       	add	r27, r27
    a94c:	40 f4       	brcc	.+16     	; 0xa95e <__fp_round+0x20>
    a94e:	bf 2b       	or	r27, r31
    a950:	11 f4       	brne	.+4      	; 0xa956 <__fp_round+0x18>
    a952:	60 ff       	sbrs	r22, 0
    a954:	04 c0       	rjmp	.+8      	; 0xa95e <__fp_round+0x20>
    a956:	6f 5f       	subi	r22, 0xFF	; 255
    a958:	7f 4f       	sbci	r23, 0xFF	; 255
    a95a:	8f 4f       	sbci	r24, 0xFF	; 255
    a95c:	9f 4f       	sbci	r25, 0xFF	; 255
    a95e:	08 95       	ret

0000a960 <__fp_split3>:
    a960:	57 fd       	sbrc	r21, 7
    a962:	90 58       	subi	r25, 0x80	; 128
    a964:	44 0f       	add	r20, r20
    a966:	55 1f       	adc	r21, r21
    a968:	59 f0       	breq	.+22     	; 0xa980 <__fp_splitA+0x10>
    a96a:	5f 3f       	cpi	r21, 0xFF	; 255
    a96c:	71 f0       	breq	.+28     	; 0xa98a <__fp_splitA+0x1a>
    a96e:	47 95       	ror	r20

0000a970 <__fp_splitA>:
    a970:	88 0f       	add	r24, r24
    a972:	97 fb       	bst	r25, 7
    a974:	99 1f       	adc	r25, r25
    a976:	61 f0       	breq	.+24     	; 0xa990 <__fp_splitA+0x20>
    a978:	9f 3f       	cpi	r25, 0xFF	; 255
    a97a:	79 f0       	breq	.+30     	; 0xa99a <__fp_splitA+0x2a>
    a97c:	87 95       	ror	r24
    a97e:	08 95       	ret
    a980:	12 16       	cp	r1, r18
    a982:	13 06       	cpc	r1, r19
    a984:	14 06       	cpc	r1, r20
    a986:	55 1f       	adc	r21, r21
    a988:	f2 cf       	rjmp	.-28     	; 0xa96e <__fp_split3+0xe>
    a98a:	46 95       	lsr	r20
    a98c:	f1 df       	rcall	.-30     	; 0xa970 <__fp_splitA>
    a98e:	08 c0       	rjmp	.+16     	; 0xa9a0 <__fp_splitA+0x30>
    a990:	16 16       	cp	r1, r22
    a992:	17 06       	cpc	r1, r23
    a994:	18 06       	cpc	r1, r24
    a996:	99 1f       	adc	r25, r25
    a998:	f1 cf       	rjmp	.-30     	; 0xa97c <__fp_splitA+0xc>
    a99a:	86 95       	lsr	r24
    a99c:	71 05       	cpc	r23, r1
    a99e:	61 05       	cpc	r22, r1
    a9a0:	08 94       	sec
    a9a2:	08 95       	ret

0000a9a4 <__fp_zero>:
    a9a4:	e8 94       	clt

0000a9a6 <__fp_szero>:
    a9a6:	bb 27       	eor	r27, r27
    a9a8:	66 27       	eor	r22, r22
    a9aa:	77 27       	eor	r23, r23
    a9ac:	cb 01       	movw	r24, r22
    a9ae:	97 f9       	bld	r25, 7
    a9b0:	08 95       	ret

0000a9b2 <__gesf2>:
    a9b2:	8a df       	rcall	.-236    	; 0xa8c8 <__fp_cmp>
    a9b4:	08 f4       	brcc	.+2      	; 0xa9b8 <__gesf2+0x6>
    a9b6:	8f ef       	ldi	r24, 0xFF	; 255
    a9b8:	08 95       	ret
    a9ba:	0e f0       	brts	.+2      	; 0xa9be <__gesf2+0xc>
    a9bc:	a6 c0       	rjmp	.+332    	; 0xab0a <__fp_mpack>
    a9be:	ae cf       	rjmp	.-164    	; 0xa91c <__fp_nan>
    a9c0:	68 94       	set
    a9c2:	a6 cf       	rjmp	.-180    	; 0xa910 <__fp_inf>

0000a9c4 <log>:
    a9c4:	d5 df       	rcall	.-86     	; 0xa970 <__fp_splitA>
    a9c6:	c8 f3       	brcs	.-14     	; 0xa9ba <__gesf2+0x8>
    a9c8:	99 23       	and	r25, r25
    a9ca:	d1 f3       	breq	.-12     	; 0xa9c0 <__gesf2+0xe>
    a9cc:	c6 f3       	brts	.-16     	; 0xa9be <__gesf2+0xc>
    a9ce:	df 93       	push	r29
    a9d0:	cf 93       	push	r28
    a9d2:	1f 93       	push	r17
    a9d4:	0f 93       	push	r16
    a9d6:	ff 92       	push	r15
    a9d8:	c9 2f       	mov	r28, r25
    a9da:	dd 27       	eor	r29, r29
    a9dc:	88 23       	and	r24, r24
    a9de:	2a f0       	brmi	.+10     	; 0xa9ea <log+0x26>
    a9e0:	21 97       	sbiw	r28, 0x01	; 1
    a9e2:	66 0f       	add	r22, r22
    a9e4:	77 1f       	adc	r23, r23
    a9e6:	88 1f       	adc	r24, r24
    a9e8:	da f7       	brpl	.-10     	; 0xa9e0 <log+0x1c>
    a9ea:	20 e0       	ldi	r18, 0x00	; 0
    a9ec:	30 e0       	ldi	r19, 0x00	; 0
    a9ee:	40 e8       	ldi	r20, 0x80	; 128
    a9f0:	5f eb       	ldi	r21, 0xBF	; 191
    a9f2:	9f e3       	ldi	r25, 0x3F	; 63
    a9f4:	88 39       	cpi	r24, 0x98	; 152
    a9f6:	20 f0       	brcs	.+8      	; 0xaa00 <log+0x3c>
    a9f8:	80 3e       	cpi	r24, 0xE0	; 224
    a9fa:	30 f0       	brcs	.+12     	; 0xaa08 <log+0x44>
    a9fc:	21 96       	adiw	r28, 0x01	; 1
    a9fe:	8f 77       	andi	r24, 0x7F	; 127
    aa00:	25 de       	rcall	.-950    	; 0xa64c <__addsf3>
    aa02:	e4 e9       	ldi	r30, 0x94	; 148
    aa04:	f8 e0       	ldi	r31, 0x08	; 8
    aa06:	03 c0       	rjmp	.+6      	; 0xaa0e <log+0x4a>
    aa08:	21 de       	rcall	.-958    	; 0xa64c <__addsf3>
    aa0a:	e1 ec       	ldi	r30, 0xC1	; 193
    aa0c:	f8 e0       	ldi	r31, 0x08	; 8
    aa0e:	8b d0       	rcall	.+278    	; 0xab26 <__fp_powser>
    aa10:	8b 01       	movw	r16, r22
    aa12:	be 01       	movw	r22, r28
    aa14:	ec 01       	movw	r28, r24
    aa16:	fb 2e       	mov	r15, r27
    aa18:	6f 57       	subi	r22, 0x7F	; 127
    aa1a:	71 09       	sbc	r23, r1
    aa1c:	75 95       	asr	r23
    aa1e:	77 1f       	adc	r23, r23
    aa20:	88 0b       	sbc	r24, r24
    aa22:	99 0b       	sbc	r25, r25
    aa24:	16 df       	rcall	.-468    	; 0xa852 <__floatsisf>
    aa26:	28 e1       	ldi	r18, 0x18	; 24
    aa28:	32 e7       	ldi	r19, 0x72	; 114
    aa2a:	41 e3       	ldi	r20, 0x31	; 49
    aa2c:	5f e3       	ldi	r21, 0x3F	; 63
    aa2e:	16 d0       	rcall	.+44     	; 0xaa5c <__mulsf3x>
    aa30:	af 2d       	mov	r26, r15
    aa32:	98 01       	movw	r18, r16
    aa34:	ae 01       	movw	r20, r28
    aa36:	ff 90       	pop	r15
    aa38:	0f 91       	pop	r16
    aa3a:	1f 91       	pop	r17
    aa3c:	cf 91       	pop	r28
    aa3e:	df 91       	pop	r29
    aa40:	16 de       	rcall	.-980    	; 0xa66e <__addsf3x>
    aa42:	7d cf       	rjmp	.-262    	; 0xa93e <__fp_round>

0000aa44 <__mulsf3>:
    aa44:	0b d0       	rcall	.+22     	; 0xaa5c <__mulsf3x>
    aa46:	7b cf       	rjmp	.-266    	; 0xa93e <__fp_round>
    aa48:	6c df       	rcall	.-296    	; 0xa922 <__fp_pscA>
    aa4a:	28 f0       	brcs	.+10     	; 0xaa56 <__mulsf3+0x12>
    aa4c:	71 df       	rcall	.-286    	; 0xa930 <__fp_pscB>
    aa4e:	18 f0       	brcs	.+6      	; 0xaa56 <__mulsf3+0x12>
    aa50:	95 23       	and	r25, r21
    aa52:	09 f0       	breq	.+2      	; 0xaa56 <__mulsf3+0x12>
    aa54:	5d cf       	rjmp	.-326    	; 0xa910 <__fp_inf>
    aa56:	62 cf       	rjmp	.-316    	; 0xa91c <__fp_nan>
    aa58:	11 24       	eor	r1, r1
    aa5a:	a5 cf       	rjmp	.-182    	; 0xa9a6 <__fp_szero>

0000aa5c <__mulsf3x>:
    aa5c:	81 df       	rcall	.-254    	; 0xa960 <__fp_split3>
    aa5e:	a0 f3       	brcs	.-24     	; 0xaa48 <__mulsf3+0x4>

0000aa60 <__mulsf3_pse>:
    aa60:	95 9f       	mul	r25, r21
    aa62:	d1 f3       	breq	.-12     	; 0xaa58 <__mulsf3+0x14>
    aa64:	95 0f       	add	r25, r21
    aa66:	50 e0       	ldi	r21, 0x00	; 0
    aa68:	55 1f       	adc	r21, r21
    aa6a:	62 9f       	mul	r22, r18
    aa6c:	f0 01       	movw	r30, r0
    aa6e:	72 9f       	mul	r23, r18
    aa70:	bb 27       	eor	r27, r27
    aa72:	f0 0d       	add	r31, r0
    aa74:	b1 1d       	adc	r27, r1
    aa76:	63 9f       	mul	r22, r19
    aa78:	aa 27       	eor	r26, r26
    aa7a:	f0 0d       	add	r31, r0
    aa7c:	b1 1d       	adc	r27, r1
    aa7e:	aa 1f       	adc	r26, r26
    aa80:	64 9f       	mul	r22, r20
    aa82:	66 27       	eor	r22, r22
    aa84:	b0 0d       	add	r27, r0
    aa86:	a1 1d       	adc	r26, r1
    aa88:	66 1f       	adc	r22, r22
    aa8a:	82 9f       	mul	r24, r18
    aa8c:	22 27       	eor	r18, r18
    aa8e:	b0 0d       	add	r27, r0
    aa90:	a1 1d       	adc	r26, r1
    aa92:	62 1f       	adc	r22, r18
    aa94:	73 9f       	mul	r23, r19
    aa96:	b0 0d       	add	r27, r0
    aa98:	a1 1d       	adc	r26, r1
    aa9a:	62 1f       	adc	r22, r18
    aa9c:	83 9f       	mul	r24, r19
    aa9e:	a0 0d       	add	r26, r0
    aaa0:	61 1d       	adc	r22, r1
    aaa2:	22 1f       	adc	r18, r18
    aaa4:	74 9f       	mul	r23, r20
    aaa6:	33 27       	eor	r19, r19
    aaa8:	a0 0d       	add	r26, r0
    aaaa:	61 1d       	adc	r22, r1
    aaac:	23 1f       	adc	r18, r19
    aaae:	84 9f       	mul	r24, r20
    aab0:	60 0d       	add	r22, r0
    aab2:	21 1d       	adc	r18, r1
    aab4:	82 2f       	mov	r24, r18
    aab6:	76 2f       	mov	r23, r22
    aab8:	6a 2f       	mov	r22, r26
    aaba:	11 24       	eor	r1, r1
    aabc:	9f 57       	subi	r25, 0x7F	; 127
    aabe:	50 40       	sbci	r21, 0x00	; 0
    aac0:	8a f0       	brmi	.+34     	; 0xaae4 <__mulsf3_pse+0x84>
    aac2:	e1 f0       	breq	.+56     	; 0xaafc <__mulsf3_pse+0x9c>
    aac4:	88 23       	and	r24, r24
    aac6:	4a f0       	brmi	.+18     	; 0xaada <__mulsf3_pse+0x7a>
    aac8:	ee 0f       	add	r30, r30
    aaca:	ff 1f       	adc	r31, r31
    aacc:	bb 1f       	adc	r27, r27
    aace:	66 1f       	adc	r22, r22
    aad0:	77 1f       	adc	r23, r23
    aad2:	88 1f       	adc	r24, r24
    aad4:	91 50       	subi	r25, 0x01	; 1
    aad6:	50 40       	sbci	r21, 0x00	; 0
    aad8:	a9 f7       	brne	.-22     	; 0xaac4 <__mulsf3_pse+0x64>
    aada:	9e 3f       	cpi	r25, 0xFE	; 254
    aadc:	51 05       	cpc	r21, r1
    aade:	70 f0       	brcs	.+28     	; 0xaafc <__mulsf3_pse+0x9c>
    aae0:	17 cf       	rjmp	.-466    	; 0xa910 <__fp_inf>
    aae2:	61 cf       	rjmp	.-318    	; 0xa9a6 <__fp_szero>
    aae4:	5f 3f       	cpi	r21, 0xFF	; 255
    aae6:	ec f3       	brlt	.-6      	; 0xaae2 <__mulsf3_pse+0x82>
    aae8:	98 3e       	cpi	r25, 0xE8	; 232
    aaea:	dc f3       	brlt	.-10     	; 0xaae2 <__mulsf3_pse+0x82>
    aaec:	86 95       	lsr	r24
    aaee:	77 95       	ror	r23
    aaf0:	67 95       	ror	r22
    aaf2:	b7 95       	ror	r27
    aaf4:	f7 95       	ror	r31
    aaf6:	e7 95       	ror	r30
    aaf8:	9f 5f       	subi	r25, 0xFF	; 255
    aafa:	c1 f7       	brne	.-16     	; 0xaaec <__mulsf3_pse+0x8c>
    aafc:	fe 2b       	or	r31, r30
    aafe:	88 0f       	add	r24, r24
    ab00:	91 1d       	adc	r25, r1
    ab02:	96 95       	lsr	r25
    ab04:	87 95       	ror	r24
    ab06:	97 f9       	bld	r25, 7
    ab08:	08 95       	ret

0000ab0a <__fp_mpack>:
    ab0a:	9f 3f       	cpi	r25, 0xFF	; 255
    ab0c:	31 f0       	breq	.+12     	; 0xab1a <__fp_mpack_finite+0xc>

0000ab0e <__fp_mpack_finite>:
    ab0e:	91 50       	subi	r25, 0x01	; 1
    ab10:	20 f4       	brcc	.+8      	; 0xab1a <__fp_mpack_finite+0xc>
    ab12:	87 95       	ror	r24
    ab14:	77 95       	ror	r23
    ab16:	67 95       	ror	r22
    ab18:	b7 95       	ror	r27
    ab1a:	88 0f       	add	r24, r24
    ab1c:	91 1d       	adc	r25, r1
    ab1e:	96 95       	lsr	r25
    ab20:	87 95       	ror	r24
    ab22:	97 f9       	bld	r25, 7
    ab24:	08 95       	ret

0000ab26 <__fp_powser>:
    ab26:	df 93       	push	r29
    ab28:	cf 93       	push	r28
    ab2a:	1f 93       	push	r17
    ab2c:	0f 93       	push	r16
    ab2e:	ff 92       	push	r15
    ab30:	ef 92       	push	r14
    ab32:	df 92       	push	r13
    ab34:	7b 01       	movw	r14, r22
    ab36:	8c 01       	movw	r16, r24
    ab38:	68 94       	set
    ab3a:	05 c0       	rjmp	.+10     	; 0xab46 <__fp_powser+0x20>
    ab3c:	da 2e       	mov	r13, r26
    ab3e:	ef 01       	movw	r28, r30
    ab40:	8d df       	rcall	.-230    	; 0xaa5c <__mulsf3x>
    ab42:	fe 01       	movw	r30, r28
    ab44:	e8 94       	clt
    ab46:	a5 91       	lpm	r26, Z+
    ab48:	25 91       	lpm	r18, Z+
    ab4a:	35 91       	lpm	r19, Z+
    ab4c:	45 91       	lpm	r20, Z+
    ab4e:	55 91       	lpm	r21, Z+
    ab50:	ae f3       	brts	.-22     	; 0xab3c <__fp_powser+0x16>
    ab52:	ef 01       	movw	r28, r30
    ab54:	8c dd       	rcall	.-1256   	; 0xa66e <__addsf3x>
    ab56:	fe 01       	movw	r30, r28
    ab58:	97 01       	movw	r18, r14
    ab5a:	a8 01       	movw	r20, r16
    ab5c:	da 94       	dec	r13
    ab5e:	79 f7       	brne	.-34     	; 0xab3e <__fp_powser+0x18>
    ab60:	df 90       	pop	r13
    ab62:	ef 90       	pop	r14
    ab64:	ff 90       	pop	r15
    ab66:	0f 91       	pop	r16
    ab68:	1f 91       	pop	r17
    ab6a:	cf 91       	pop	r28
    ab6c:	df 91       	pop	r29
    ab6e:	08 95       	ret

0000ab70 <vfprintf>:
    ab70:	2f 92       	push	r2
    ab72:	3f 92       	push	r3
    ab74:	4f 92       	push	r4
    ab76:	5f 92       	push	r5
    ab78:	6f 92       	push	r6
    ab7a:	7f 92       	push	r7
    ab7c:	8f 92       	push	r8
    ab7e:	9f 92       	push	r9
    ab80:	af 92       	push	r10
    ab82:	bf 92       	push	r11
    ab84:	cf 92       	push	r12
    ab86:	df 92       	push	r13
    ab88:	ef 92       	push	r14
    ab8a:	ff 92       	push	r15
    ab8c:	0f 93       	push	r16
    ab8e:	1f 93       	push	r17
    ab90:	cf 93       	push	r28
    ab92:	df 93       	push	r29
    ab94:	cd b7       	in	r28, 0x3d	; 61
    ab96:	de b7       	in	r29, 0x3e	; 62
    ab98:	60 97       	sbiw	r28, 0x10	; 16
    ab9a:	0f b6       	in	r0, 0x3f	; 63
    ab9c:	f8 94       	cli
    ab9e:	de bf       	out	0x3e, r29	; 62
    aba0:	0f be       	out	0x3f, r0	; 63
    aba2:	cd bf       	out	0x3d, r28	; 61
    aba4:	7c 01       	movw	r14, r24
    aba6:	1b 01       	movw	r2, r22
    aba8:	6a 01       	movw	r12, r20
    abaa:	fc 01       	movw	r30, r24
    abac:	17 82       	std	Z+7, r1	; 0x07
    abae:	16 82       	std	Z+6, r1	; 0x06
    abb0:	83 81       	ldd	r24, Z+3	; 0x03
    abb2:	81 ff       	sbrs	r24, 1
    abb4:	2a c3       	rjmp	.+1620   	; 0xb20a <vfprintf+0x69a>
    abb6:	9e 01       	movw	r18, r28
    abb8:	2f 5f       	subi	r18, 0xFF	; 255
    abba:	3f 4f       	sbci	r19, 0xFF	; 255
    abbc:	39 01       	movw	r6, r18
    abbe:	f7 01       	movw	r30, r14
    abc0:	93 81       	ldd	r25, Z+3	; 0x03
    abc2:	f1 01       	movw	r30, r2
    abc4:	93 fd       	sbrc	r25, 3
    abc6:	85 91       	lpm	r24, Z+
    abc8:	93 ff       	sbrs	r25, 3
    abca:	81 91       	ld	r24, Z+
    abcc:	1f 01       	movw	r2, r30
    abce:	88 23       	and	r24, r24
    abd0:	09 f4       	brne	.+2      	; 0xabd4 <vfprintf+0x64>
    abd2:	17 c3       	rjmp	.+1582   	; 0xb202 <vfprintf+0x692>
    abd4:	85 32       	cpi	r24, 0x25	; 37
    abd6:	39 f4       	brne	.+14     	; 0xabe6 <vfprintf+0x76>
    abd8:	93 fd       	sbrc	r25, 3
    abda:	85 91       	lpm	r24, Z+
    abdc:	93 ff       	sbrs	r25, 3
    abde:	81 91       	ld	r24, Z+
    abe0:	1f 01       	movw	r2, r30
    abe2:	85 32       	cpi	r24, 0x25	; 37
    abe4:	31 f4       	brne	.+12     	; 0xabf2 <vfprintf+0x82>
    abe6:	b7 01       	movw	r22, r14
    abe8:	90 e0       	ldi	r25, 0x00	; 0
    abea:	a3 d5       	rcall	.+2886   	; 0xb732 <fputc>
    abec:	56 01       	movw	r10, r12
    abee:	65 01       	movw	r12, r10
    abf0:	e6 cf       	rjmp	.-52     	; 0xabbe <vfprintf+0x4e>
    abf2:	10 e0       	ldi	r17, 0x00	; 0
    abf4:	51 2c       	mov	r5, r1
    abf6:	91 2c       	mov	r9, r1
    abf8:	ff e1       	ldi	r31, 0x1F	; 31
    abfa:	f9 15       	cp	r31, r9
    abfc:	d8 f0       	brcs	.+54     	; 0xac34 <vfprintf+0xc4>
    abfe:	8b 32       	cpi	r24, 0x2B	; 43
    ac00:	79 f0       	breq	.+30     	; 0xac20 <vfprintf+0xb0>
    ac02:	38 f4       	brcc	.+14     	; 0xac12 <vfprintf+0xa2>
    ac04:	80 32       	cpi	r24, 0x20	; 32
    ac06:	79 f0       	breq	.+30     	; 0xac26 <vfprintf+0xb6>
    ac08:	83 32       	cpi	r24, 0x23	; 35
    ac0a:	a1 f4       	brne	.+40     	; 0xac34 <vfprintf+0xc4>
    ac0c:	f9 2d       	mov	r31, r9
    ac0e:	f0 61       	ori	r31, 0x10	; 16
    ac10:	2e c0       	rjmp	.+92     	; 0xac6e <vfprintf+0xfe>
    ac12:	8d 32       	cpi	r24, 0x2D	; 45
    ac14:	61 f0       	breq	.+24     	; 0xac2e <vfprintf+0xbe>
    ac16:	80 33       	cpi	r24, 0x30	; 48
    ac18:	69 f4       	brne	.+26     	; 0xac34 <vfprintf+0xc4>
    ac1a:	29 2d       	mov	r18, r9
    ac1c:	21 60       	ori	r18, 0x01	; 1
    ac1e:	2d c0       	rjmp	.+90     	; 0xac7a <vfprintf+0x10a>
    ac20:	39 2d       	mov	r19, r9
    ac22:	32 60       	ori	r19, 0x02	; 2
    ac24:	93 2e       	mov	r9, r19
    ac26:	89 2d       	mov	r24, r9
    ac28:	84 60       	ori	r24, 0x04	; 4
    ac2a:	98 2e       	mov	r9, r24
    ac2c:	2a c0       	rjmp	.+84     	; 0xac82 <vfprintf+0x112>
    ac2e:	e9 2d       	mov	r30, r9
    ac30:	e8 60       	ori	r30, 0x08	; 8
    ac32:	15 c0       	rjmp	.+42     	; 0xac5e <vfprintf+0xee>
    ac34:	97 fc       	sbrc	r9, 7
    ac36:	2d c0       	rjmp	.+90     	; 0xac92 <vfprintf+0x122>
    ac38:	20 ed       	ldi	r18, 0xD0	; 208
    ac3a:	28 0f       	add	r18, r24
    ac3c:	2a 30       	cpi	r18, 0x0A	; 10
    ac3e:	88 f4       	brcc	.+34     	; 0xac62 <vfprintf+0xf2>
    ac40:	96 fe       	sbrs	r9, 6
    ac42:	06 c0       	rjmp	.+12     	; 0xac50 <vfprintf+0xe0>
    ac44:	3a e0       	ldi	r19, 0x0A	; 10
    ac46:	13 9f       	mul	r17, r19
    ac48:	20 0d       	add	r18, r0
    ac4a:	11 24       	eor	r1, r1
    ac4c:	12 2f       	mov	r17, r18
    ac4e:	19 c0       	rjmp	.+50     	; 0xac82 <vfprintf+0x112>
    ac50:	8a e0       	ldi	r24, 0x0A	; 10
    ac52:	58 9e       	mul	r5, r24
    ac54:	20 0d       	add	r18, r0
    ac56:	11 24       	eor	r1, r1
    ac58:	52 2e       	mov	r5, r18
    ac5a:	e9 2d       	mov	r30, r9
    ac5c:	e0 62       	ori	r30, 0x20	; 32
    ac5e:	9e 2e       	mov	r9, r30
    ac60:	10 c0       	rjmp	.+32     	; 0xac82 <vfprintf+0x112>
    ac62:	8e 32       	cpi	r24, 0x2E	; 46
    ac64:	31 f4       	brne	.+12     	; 0xac72 <vfprintf+0x102>
    ac66:	96 fc       	sbrc	r9, 6
    ac68:	cc c2       	rjmp	.+1432   	; 0xb202 <vfprintf+0x692>
    ac6a:	f9 2d       	mov	r31, r9
    ac6c:	f0 64       	ori	r31, 0x40	; 64
    ac6e:	9f 2e       	mov	r9, r31
    ac70:	08 c0       	rjmp	.+16     	; 0xac82 <vfprintf+0x112>
    ac72:	8c 36       	cpi	r24, 0x6C	; 108
    ac74:	21 f4       	brne	.+8      	; 0xac7e <vfprintf+0x10e>
    ac76:	29 2d       	mov	r18, r9
    ac78:	20 68       	ori	r18, 0x80	; 128
    ac7a:	92 2e       	mov	r9, r18
    ac7c:	02 c0       	rjmp	.+4      	; 0xac82 <vfprintf+0x112>
    ac7e:	88 36       	cpi	r24, 0x68	; 104
    ac80:	41 f4       	brne	.+16     	; 0xac92 <vfprintf+0x122>
    ac82:	f1 01       	movw	r30, r2
    ac84:	93 fd       	sbrc	r25, 3
    ac86:	85 91       	lpm	r24, Z+
    ac88:	93 ff       	sbrs	r25, 3
    ac8a:	81 91       	ld	r24, Z+
    ac8c:	1f 01       	movw	r2, r30
    ac8e:	81 11       	cpse	r24, r1
    ac90:	b3 cf       	rjmp	.-154    	; 0xabf8 <vfprintf+0x88>
    ac92:	9b eb       	ldi	r25, 0xBB	; 187
    ac94:	98 0f       	add	r25, r24
    ac96:	93 30       	cpi	r25, 0x03	; 3
    ac98:	20 f4       	brcc	.+8      	; 0xaca2 <vfprintf+0x132>
    ac9a:	99 2d       	mov	r25, r9
    ac9c:	90 61       	ori	r25, 0x10	; 16
    ac9e:	80 5e       	subi	r24, 0xE0	; 224
    aca0:	07 c0       	rjmp	.+14     	; 0xacb0 <vfprintf+0x140>
    aca2:	9b e9       	ldi	r25, 0x9B	; 155
    aca4:	98 0f       	add	r25, r24
    aca6:	93 30       	cpi	r25, 0x03	; 3
    aca8:	08 f0       	brcs	.+2      	; 0xacac <vfprintf+0x13c>
    acaa:	59 c1       	rjmp	.+690    	; 0xaf5e <vfprintf+0x3ee>
    acac:	99 2d       	mov	r25, r9
    acae:	9f 7e       	andi	r25, 0xEF	; 239
    acb0:	96 ff       	sbrs	r25, 6
    acb2:	16 e0       	ldi	r17, 0x06	; 6
    acb4:	9f 73       	andi	r25, 0x3F	; 63
    acb6:	99 2e       	mov	r9, r25
    acb8:	85 36       	cpi	r24, 0x65	; 101
    acba:	19 f4       	brne	.+6      	; 0xacc2 <vfprintf+0x152>
    acbc:	90 64       	ori	r25, 0x40	; 64
    acbe:	99 2e       	mov	r9, r25
    acc0:	08 c0       	rjmp	.+16     	; 0xacd2 <vfprintf+0x162>
    acc2:	86 36       	cpi	r24, 0x66	; 102
    acc4:	21 f4       	brne	.+8      	; 0xacce <vfprintf+0x15e>
    acc6:	39 2f       	mov	r19, r25
    acc8:	30 68       	ori	r19, 0x80	; 128
    acca:	93 2e       	mov	r9, r19
    accc:	02 c0       	rjmp	.+4      	; 0xacd2 <vfprintf+0x162>
    acce:	11 11       	cpse	r17, r1
    acd0:	11 50       	subi	r17, 0x01	; 1
    acd2:	97 fe       	sbrs	r9, 7
    acd4:	07 c0       	rjmp	.+14     	; 0xace4 <vfprintf+0x174>
    acd6:	1c 33       	cpi	r17, 0x3C	; 60
    acd8:	50 f4       	brcc	.+20     	; 0xacee <vfprintf+0x17e>
    acda:	44 24       	eor	r4, r4
    acdc:	43 94       	inc	r4
    acde:	41 0e       	add	r4, r17
    ace0:	27 e0       	ldi	r18, 0x07	; 7
    ace2:	0b c0       	rjmp	.+22     	; 0xacfa <vfprintf+0x18a>
    ace4:	18 30       	cpi	r17, 0x08	; 8
    ace6:	38 f0       	brcs	.+14     	; 0xacf6 <vfprintf+0x186>
    ace8:	27 e0       	ldi	r18, 0x07	; 7
    acea:	17 e0       	ldi	r17, 0x07	; 7
    acec:	05 c0       	rjmp	.+10     	; 0xacf8 <vfprintf+0x188>
    acee:	27 e0       	ldi	r18, 0x07	; 7
    acf0:	9c e3       	ldi	r25, 0x3C	; 60
    acf2:	49 2e       	mov	r4, r25
    acf4:	02 c0       	rjmp	.+4      	; 0xacfa <vfprintf+0x18a>
    acf6:	21 2f       	mov	r18, r17
    acf8:	41 2c       	mov	r4, r1
    acfa:	56 01       	movw	r10, r12
    acfc:	84 e0       	ldi	r24, 0x04	; 4
    acfe:	a8 0e       	add	r10, r24
    ad00:	b1 1c       	adc	r11, r1
    ad02:	f6 01       	movw	r30, r12
    ad04:	60 81       	ld	r22, Z
    ad06:	71 81       	ldd	r23, Z+1	; 0x01
    ad08:	82 81       	ldd	r24, Z+2	; 0x02
    ad0a:	93 81       	ldd	r25, Z+3	; 0x03
    ad0c:	04 2d       	mov	r16, r4
    ad0e:	a3 01       	movw	r20, r6
    ad10:	12 d4       	rcall	.+2084   	; 0xb536 <__ftoa_engine>
    ad12:	6c 01       	movw	r12, r24
    ad14:	f9 81       	ldd	r31, Y+1	; 0x01
    ad16:	fc 87       	std	Y+12, r31	; 0x0c
    ad18:	f0 ff       	sbrs	r31, 0
    ad1a:	02 c0       	rjmp	.+4      	; 0xad20 <vfprintf+0x1b0>
    ad1c:	f3 ff       	sbrs	r31, 3
    ad1e:	06 c0       	rjmp	.+12     	; 0xad2c <vfprintf+0x1bc>
    ad20:	91 fc       	sbrc	r9, 1
    ad22:	06 c0       	rjmp	.+12     	; 0xad30 <vfprintf+0x1c0>
    ad24:	92 fe       	sbrs	r9, 2
    ad26:	06 c0       	rjmp	.+12     	; 0xad34 <vfprintf+0x1c4>
    ad28:	00 e2       	ldi	r16, 0x20	; 32
    ad2a:	05 c0       	rjmp	.+10     	; 0xad36 <vfprintf+0x1c6>
    ad2c:	0d e2       	ldi	r16, 0x2D	; 45
    ad2e:	03 c0       	rjmp	.+6      	; 0xad36 <vfprintf+0x1c6>
    ad30:	0b e2       	ldi	r16, 0x2B	; 43
    ad32:	01 c0       	rjmp	.+2      	; 0xad36 <vfprintf+0x1c6>
    ad34:	00 e0       	ldi	r16, 0x00	; 0
    ad36:	8c 85       	ldd	r24, Y+12	; 0x0c
    ad38:	8c 70       	andi	r24, 0x0C	; 12
    ad3a:	19 f0       	breq	.+6      	; 0xad42 <vfprintf+0x1d2>
    ad3c:	01 11       	cpse	r16, r1
    ad3e:	43 c2       	rjmp	.+1158   	; 0xb1c6 <vfprintf+0x656>
    ad40:	80 c2       	rjmp	.+1280   	; 0xb242 <vfprintf+0x6d2>
    ad42:	97 fe       	sbrs	r9, 7
    ad44:	10 c0       	rjmp	.+32     	; 0xad66 <vfprintf+0x1f6>
    ad46:	4c 0c       	add	r4, r12
    ad48:	fc 85       	ldd	r31, Y+12	; 0x0c
    ad4a:	f4 ff       	sbrs	r31, 4
    ad4c:	04 c0       	rjmp	.+8      	; 0xad56 <vfprintf+0x1e6>
    ad4e:	8a 81       	ldd	r24, Y+2	; 0x02
    ad50:	81 33       	cpi	r24, 0x31	; 49
    ad52:	09 f4       	brne	.+2      	; 0xad56 <vfprintf+0x1e6>
    ad54:	4a 94       	dec	r4
    ad56:	14 14       	cp	r1, r4
    ad58:	74 f5       	brge	.+92     	; 0xadb6 <vfprintf+0x246>
    ad5a:	28 e0       	ldi	r18, 0x08	; 8
    ad5c:	24 15       	cp	r18, r4
    ad5e:	78 f5       	brcc	.+94     	; 0xadbe <vfprintf+0x24e>
    ad60:	88 e0       	ldi	r24, 0x08	; 8
    ad62:	48 2e       	mov	r4, r24
    ad64:	2c c0       	rjmp	.+88     	; 0xadbe <vfprintf+0x24e>
    ad66:	96 fc       	sbrc	r9, 6
    ad68:	2a c0       	rjmp	.+84     	; 0xadbe <vfprintf+0x24e>
    ad6a:	81 2f       	mov	r24, r17
    ad6c:	90 e0       	ldi	r25, 0x00	; 0
    ad6e:	8c 15       	cp	r24, r12
    ad70:	9d 05       	cpc	r25, r13
    ad72:	9c f0       	brlt	.+38     	; 0xad9a <vfprintf+0x22a>
    ad74:	3c ef       	ldi	r19, 0xFC	; 252
    ad76:	c3 16       	cp	r12, r19
    ad78:	3f ef       	ldi	r19, 0xFF	; 255
    ad7a:	d3 06       	cpc	r13, r19
    ad7c:	74 f0       	brlt	.+28     	; 0xad9a <vfprintf+0x22a>
    ad7e:	89 2d       	mov	r24, r9
    ad80:	80 68       	ori	r24, 0x80	; 128
    ad82:	98 2e       	mov	r9, r24
    ad84:	0a c0       	rjmp	.+20     	; 0xad9a <vfprintf+0x22a>
    ad86:	e2 e0       	ldi	r30, 0x02	; 2
    ad88:	f0 e0       	ldi	r31, 0x00	; 0
    ad8a:	ec 0f       	add	r30, r28
    ad8c:	fd 1f       	adc	r31, r29
    ad8e:	e1 0f       	add	r30, r17
    ad90:	f1 1d       	adc	r31, r1
    ad92:	80 81       	ld	r24, Z
    ad94:	80 33       	cpi	r24, 0x30	; 48
    ad96:	19 f4       	brne	.+6      	; 0xad9e <vfprintf+0x22e>
    ad98:	11 50       	subi	r17, 0x01	; 1
    ad9a:	11 11       	cpse	r17, r1
    ad9c:	f4 cf       	rjmp	.-24     	; 0xad86 <vfprintf+0x216>
    ad9e:	97 fe       	sbrs	r9, 7
    ada0:	0e c0       	rjmp	.+28     	; 0xadbe <vfprintf+0x24e>
    ada2:	44 24       	eor	r4, r4
    ada4:	43 94       	inc	r4
    ada6:	41 0e       	add	r4, r17
    ada8:	81 2f       	mov	r24, r17
    adaa:	90 e0       	ldi	r25, 0x00	; 0
    adac:	c8 16       	cp	r12, r24
    adae:	d9 06       	cpc	r13, r25
    adb0:	2c f4       	brge	.+10     	; 0xadbc <vfprintf+0x24c>
    adb2:	1c 19       	sub	r17, r12
    adb4:	04 c0       	rjmp	.+8      	; 0xadbe <vfprintf+0x24e>
    adb6:	44 24       	eor	r4, r4
    adb8:	43 94       	inc	r4
    adba:	01 c0       	rjmp	.+2      	; 0xadbe <vfprintf+0x24e>
    adbc:	10 e0       	ldi	r17, 0x00	; 0
    adbe:	97 fe       	sbrs	r9, 7
    adc0:	06 c0       	rjmp	.+12     	; 0xadce <vfprintf+0x25e>
    adc2:	1c 14       	cp	r1, r12
    adc4:	1d 04       	cpc	r1, r13
    adc6:	34 f4       	brge	.+12     	; 0xadd4 <vfprintf+0x264>
    adc8:	c6 01       	movw	r24, r12
    adca:	01 96       	adiw	r24, 0x01	; 1
    adcc:	05 c0       	rjmp	.+10     	; 0xadd8 <vfprintf+0x268>
    adce:	85 e0       	ldi	r24, 0x05	; 5
    add0:	90 e0       	ldi	r25, 0x00	; 0
    add2:	02 c0       	rjmp	.+4      	; 0xadd8 <vfprintf+0x268>
    add4:	81 e0       	ldi	r24, 0x01	; 1
    add6:	90 e0       	ldi	r25, 0x00	; 0
    add8:	01 11       	cpse	r16, r1
    adda:	01 96       	adiw	r24, 0x01	; 1
    addc:	11 23       	and	r17, r17
    adde:	31 f0       	breq	.+12     	; 0xadec <vfprintf+0x27c>
    ade0:	21 2f       	mov	r18, r17
    ade2:	30 e0       	ldi	r19, 0x00	; 0
    ade4:	2f 5f       	subi	r18, 0xFF	; 255
    ade6:	3f 4f       	sbci	r19, 0xFF	; 255
    ade8:	82 0f       	add	r24, r18
    adea:	93 1f       	adc	r25, r19
    adec:	25 2d       	mov	r18, r5
    adee:	30 e0       	ldi	r19, 0x00	; 0
    adf0:	82 17       	cp	r24, r18
    adf2:	93 07       	cpc	r25, r19
    adf4:	14 f4       	brge	.+4      	; 0xadfa <vfprintf+0x28a>
    adf6:	58 1a       	sub	r5, r24
    adf8:	01 c0       	rjmp	.+2      	; 0xadfc <vfprintf+0x28c>
    adfa:	51 2c       	mov	r5, r1
    adfc:	89 2d       	mov	r24, r9
    adfe:	89 70       	andi	r24, 0x09	; 9
    ae00:	41 f4       	brne	.+16     	; 0xae12 <vfprintf+0x2a2>
    ae02:	55 20       	and	r5, r5
    ae04:	31 f0       	breq	.+12     	; 0xae12 <vfprintf+0x2a2>
    ae06:	b7 01       	movw	r22, r14
    ae08:	80 e2       	ldi	r24, 0x20	; 32
    ae0a:	90 e0       	ldi	r25, 0x00	; 0
    ae0c:	92 d4       	rcall	.+2340   	; 0xb732 <fputc>
    ae0e:	5a 94       	dec	r5
    ae10:	f8 cf       	rjmp	.-16     	; 0xae02 <vfprintf+0x292>
    ae12:	00 23       	and	r16, r16
    ae14:	21 f0       	breq	.+8      	; 0xae1e <vfprintf+0x2ae>
    ae16:	b7 01       	movw	r22, r14
    ae18:	80 2f       	mov	r24, r16
    ae1a:	90 e0       	ldi	r25, 0x00	; 0
    ae1c:	8a d4       	rcall	.+2324   	; 0xb732 <fputc>
    ae1e:	93 fc       	sbrc	r9, 3
    ae20:	08 c0       	rjmp	.+16     	; 0xae32 <vfprintf+0x2c2>
    ae22:	55 20       	and	r5, r5
    ae24:	31 f0       	breq	.+12     	; 0xae32 <vfprintf+0x2c2>
    ae26:	b7 01       	movw	r22, r14
    ae28:	80 e3       	ldi	r24, 0x30	; 48
    ae2a:	90 e0       	ldi	r25, 0x00	; 0
    ae2c:	82 d4       	rcall	.+2308   	; 0xb732 <fputc>
    ae2e:	5a 94       	dec	r5
    ae30:	f8 cf       	rjmp	.-16     	; 0xae22 <vfprintf+0x2b2>
    ae32:	97 fe       	sbrs	r9, 7
    ae34:	4a c0       	rjmp	.+148    	; 0xaeca <vfprintf+0x35a>
    ae36:	46 01       	movw	r8, r12
    ae38:	d7 fe       	sbrs	r13, 7
    ae3a:	02 c0       	rjmp	.+4      	; 0xae40 <vfprintf+0x2d0>
    ae3c:	81 2c       	mov	r8, r1
    ae3e:	91 2c       	mov	r9, r1
    ae40:	c6 01       	movw	r24, r12
    ae42:	88 19       	sub	r24, r8
    ae44:	99 09       	sbc	r25, r9
    ae46:	f3 01       	movw	r30, r6
    ae48:	e8 0f       	add	r30, r24
    ae4a:	f9 1f       	adc	r31, r25
    ae4c:	fe 87       	std	Y+14, r31	; 0x0e
    ae4e:	ed 87       	std	Y+13, r30	; 0x0d
    ae50:	96 01       	movw	r18, r12
    ae52:	24 19       	sub	r18, r4
    ae54:	31 09       	sbc	r19, r1
    ae56:	38 8b       	std	Y+16, r19	; 0x10
    ae58:	2f 87       	std	Y+15, r18	; 0x0f
    ae5a:	01 2f       	mov	r16, r17
    ae5c:	10 e0       	ldi	r17, 0x00	; 0
    ae5e:	11 95       	neg	r17
    ae60:	01 95       	neg	r16
    ae62:	11 09       	sbc	r17, r1
    ae64:	3f ef       	ldi	r19, 0xFF	; 255
    ae66:	83 16       	cp	r8, r19
    ae68:	93 06       	cpc	r9, r19
    ae6a:	21 f4       	brne	.+8      	; 0xae74 <vfprintf+0x304>
    ae6c:	b7 01       	movw	r22, r14
    ae6e:	8e e2       	ldi	r24, 0x2E	; 46
    ae70:	90 e0       	ldi	r25, 0x00	; 0
    ae72:	5f d4       	rcall	.+2238   	; 0xb732 <fputc>
    ae74:	c8 14       	cp	r12, r8
    ae76:	d9 04       	cpc	r13, r9
    ae78:	4c f0       	brlt	.+18     	; 0xae8c <vfprintf+0x31c>
    ae7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    ae7c:	98 89       	ldd	r25, Y+16	; 0x10
    ae7e:	88 15       	cp	r24, r8
    ae80:	99 05       	cpc	r25, r9
    ae82:	24 f4       	brge	.+8      	; 0xae8c <vfprintf+0x31c>
    ae84:	ed 85       	ldd	r30, Y+13	; 0x0d
    ae86:	fe 85       	ldd	r31, Y+14	; 0x0e
    ae88:	81 81       	ldd	r24, Z+1	; 0x01
    ae8a:	01 c0       	rjmp	.+2      	; 0xae8e <vfprintf+0x31e>
    ae8c:	80 e3       	ldi	r24, 0x30	; 48
    ae8e:	f1 e0       	ldi	r31, 0x01	; 1
    ae90:	8f 1a       	sub	r8, r31
    ae92:	91 08       	sbc	r9, r1
    ae94:	2d 85       	ldd	r18, Y+13	; 0x0d
    ae96:	3e 85       	ldd	r19, Y+14	; 0x0e
    ae98:	2f 5f       	subi	r18, 0xFF	; 255
    ae9a:	3f 4f       	sbci	r19, 0xFF	; 255
    ae9c:	3e 87       	std	Y+14, r19	; 0x0e
    ae9e:	2d 87       	std	Y+13, r18	; 0x0d
    aea0:	80 16       	cp	r8, r16
    aea2:	91 06       	cpc	r9, r17
    aea4:	24 f0       	brlt	.+8      	; 0xaeae <vfprintf+0x33e>
    aea6:	b7 01       	movw	r22, r14
    aea8:	90 e0       	ldi	r25, 0x00	; 0
    aeaa:	43 d4       	rcall	.+2182   	; 0xb732 <fputc>
    aeac:	db cf       	rjmp	.-74     	; 0xae64 <vfprintf+0x2f4>
    aeae:	c8 14       	cp	r12, r8
    aeb0:	d9 04       	cpc	r13, r9
    aeb2:	41 f4       	brne	.+16     	; 0xaec4 <vfprintf+0x354>
    aeb4:	9a 81       	ldd	r25, Y+2	; 0x02
    aeb6:	96 33       	cpi	r25, 0x36	; 54
    aeb8:	20 f4       	brcc	.+8      	; 0xaec2 <vfprintf+0x352>
    aeba:	95 33       	cpi	r25, 0x35	; 53
    aebc:	19 f4       	brne	.+6      	; 0xaec4 <vfprintf+0x354>
    aebe:	3c 85       	ldd	r19, Y+12	; 0x0c
    aec0:	34 ff       	sbrs	r19, 4
    aec2:	81 e3       	ldi	r24, 0x31	; 49
    aec4:	b7 01       	movw	r22, r14
    aec6:	90 e0       	ldi	r25, 0x00	; 0
    aec8:	48 c0       	rjmp	.+144    	; 0xaf5a <vfprintf+0x3ea>
    aeca:	8a 81       	ldd	r24, Y+2	; 0x02
    aecc:	81 33       	cpi	r24, 0x31	; 49
    aece:	19 f0       	breq	.+6      	; 0xaed6 <vfprintf+0x366>
    aed0:	9c 85       	ldd	r25, Y+12	; 0x0c
    aed2:	9f 7e       	andi	r25, 0xEF	; 239
    aed4:	9c 87       	std	Y+12, r25	; 0x0c
    aed6:	b7 01       	movw	r22, r14
    aed8:	90 e0       	ldi	r25, 0x00	; 0
    aeda:	2b d4       	rcall	.+2134   	; 0xb732 <fputc>
    aedc:	11 11       	cpse	r17, r1
    aede:	05 c0       	rjmp	.+10     	; 0xaeea <vfprintf+0x37a>
    aee0:	94 fc       	sbrc	r9, 4
    aee2:	16 c0       	rjmp	.+44     	; 0xaf10 <vfprintf+0x3a0>
    aee4:	85 e6       	ldi	r24, 0x65	; 101
    aee6:	90 e0       	ldi	r25, 0x00	; 0
    aee8:	15 c0       	rjmp	.+42     	; 0xaf14 <vfprintf+0x3a4>
    aeea:	b7 01       	movw	r22, r14
    aeec:	8e e2       	ldi	r24, 0x2E	; 46
    aeee:	90 e0       	ldi	r25, 0x00	; 0
    aef0:	20 d4       	rcall	.+2112   	; 0xb732 <fputc>
    aef2:	1e 5f       	subi	r17, 0xFE	; 254
    aef4:	82 e0       	ldi	r24, 0x02	; 2
    aef6:	01 e0       	ldi	r16, 0x01	; 1
    aef8:	08 0f       	add	r16, r24
    aefa:	f3 01       	movw	r30, r6
    aefc:	e8 0f       	add	r30, r24
    aefe:	f1 1d       	adc	r31, r1
    af00:	80 81       	ld	r24, Z
    af02:	b7 01       	movw	r22, r14
    af04:	90 e0       	ldi	r25, 0x00	; 0
    af06:	15 d4       	rcall	.+2090   	; 0xb732 <fputc>
    af08:	80 2f       	mov	r24, r16
    af0a:	01 13       	cpse	r16, r17
    af0c:	f4 cf       	rjmp	.-24     	; 0xaef6 <vfprintf+0x386>
    af0e:	e8 cf       	rjmp	.-48     	; 0xaee0 <vfprintf+0x370>
    af10:	85 e4       	ldi	r24, 0x45	; 69
    af12:	90 e0       	ldi	r25, 0x00	; 0
    af14:	b7 01       	movw	r22, r14
    af16:	0d d4       	rcall	.+2074   	; 0xb732 <fputc>
    af18:	d7 fc       	sbrc	r13, 7
    af1a:	06 c0       	rjmp	.+12     	; 0xaf28 <vfprintf+0x3b8>
    af1c:	c1 14       	cp	r12, r1
    af1e:	d1 04       	cpc	r13, r1
    af20:	41 f4       	brne	.+16     	; 0xaf32 <vfprintf+0x3c2>
    af22:	ec 85       	ldd	r30, Y+12	; 0x0c
    af24:	e4 ff       	sbrs	r30, 4
    af26:	05 c0       	rjmp	.+10     	; 0xaf32 <vfprintf+0x3c2>
    af28:	d1 94       	neg	r13
    af2a:	c1 94       	neg	r12
    af2c:	d1 08       	sbc	r13, r1
    af2e:	8d e2       	ldi	r24, 0x2D	; 45
    af30:	01 c0       	rjmp	.+2      	; 0xaf34 <vfprintf+0x3c4>
    af32:	8b e2       	ldi	r24, 0x2B	; 43
    af34:	b7 01       	movw	r22, r14
    af36:	90 e0       	ldi	r25, 0x00	; 0
    af38:	fc d3       	rcall	.+2040   	; 0xb732 <fputc>
    af3a:	80 e3       	ldi	r24, 0x30	; 48
    af3c:	2a e0       	ldi	r18, 0x0A	; 10
    af3e:	c2 16       	cp	r12, r18
    af40:	d1 04       	cpc	r13, r1
    af42:	2c f0       	brlt	.+10     	; 0xaf4e <vfprintf+0x3de>
    af44:	8f 5f       	subi	r24, 0xFF	; 255
    af46:	fa e0       	ldi	r31, 0x0A	; 10
    af48:	cf 1a       	sub	r12, r31
    af4a:	d1 08       	sbc	r13, r1
    af4c:	f7 cf       	rjmp	.-18     	; 0xaf3c <vfprintf+0x3cc>
    af4e:	b7 01       	movw	r22, r14
    af50:	90 e0       	ldi	r25, 0x00	; 0
    af52:	ef d3       	rcall	.+2014   	; 0xb732 <fputc>
    af54:	b7 01       	movw	r22, r14
    af56:	c6 01       	movw	r24, r12
    af58:	c0 96       	adiw	r24, 0x30	; 48
    af5a:	eb d3       	rcall	.+2006   	; 0xb732 <fputc>
    af5c:	49 c1       	rjmp	.+658    	; 0xb1f0 <vfprintf+0x680>
    af5e:	83 36       	cpi	r24, 0x63	; 99
    af60:	31 f0       	breq	.+12     	; 0xaf6e <vfprintf+0x3fe>
    af62:	83 37       	cpi	r24, 0x73	; 115
    af64:	79 f0       	breq	.+30     	; 0xaf84 <vfprintf+0x414>
    af66:	83 35       	cpi	r24, 0x53	; 83
    af68:	09 f0       	breq	.+2      	; 0xaf6c <vfprintf+0x3fc>
    af6a:	52 c0       	rjmp	.+164    	; 0xb010 <vfprintf+0x4a0>
    af6c:	1f c0       	rjmp	.+62     	; 0xafac <vfprintf+0x43c>
    af6e:	56 01       	movw	r10, r12
    af70:	32 e0       	ldi	r19, 0x02	; 2
    af72:	a3 0e       	add	r10, r19
    af74:	b1 1c       	adc	r11, r1
    af76:	f6 01       	movw	r30, r12
    af78:	80 81       	ld	r24, Z
    af7a:	89 83       	std	Y+1, r24	; 0x01
    af7c:	01 e0       	ldi	r16, 0x01	; 1
    af7e:	10 e0       	ldi	r17, 0x00	; 0
    af80:	63 01       	movw	r12, r6
    af82:	11 c0       	rjmp	.+34     	; 0xafa6 <vfprintf+0x436>
    af84:	56 01       	movw	r10, r12
    af86:	f2 e0       	ldi	r31, 0x02	; 2
    af88:	af 0e       	add	r10, r31
    af8a:	b1 1c       	adc	r11, r1
    af8c:	f6 01       	movw	r30, r12
    af8e:	c0 80       	ld	r12, Z
    af90:	d1 80       	ldd	r13, Z+1	; 0x01
    af92:	96 fe       	sbrs	r9, 6
    af94:	03 c0       	rjmp	.+6      	; 0xaf9c <vfprintf+0x42c>
    af96:	61 2f       	mov	r22, r17
    af98:	70 e0       	ldi	r23, 0x00	; 0
    af9a:	02 c0       	rjmp	.+4      	; 0xafa0 <vfprintf+0x430>
    af9c:	6f ef       	ldi	r22, 0xFF	; 255
    af9e:	7f ef       	ldi	r23, 0xFF	; 255
    afa0:	c6 01       	movw	r24, r12
    afa2:	bc d3       	rcall	.+1912   	; 0xb71c <strnlen>
    afa4:	8c 01       	movw	r16, r24
    afa6:	f9 2d       	mov	r31, r9
    afa8:	ff 77       	andi	r31, 0x7F	; 127
    afaa:	13 c0       	rjmp	.+38     	; 0xafd2 <vfprintf+0x462>
    afac:	56 01       	movw	r10, r12
    afae:	22 e0       	ldi	r18, 0x02	; 2
    afb0:	a2 0e       	add	r10, r18
    afb2:	b1 1c       	adc	r11, r1
    afb4:	f6 01       	movw	r30, r12
    afb6:	c0 80       	ld	r12, Z
    afb8:	d1 80       	ldd	r13, Z+1	; 0x01
    afba:	96 fe       	sbrs	r9, 6
    afbc:	03 c0       	rjmp	.+6      	; 0xafc4 <vfprintf+0x454>
    afbe:	61 2f       	mov	r22, r17
    afc0:	70 e0       	ldi	r23, 0x00	; 0
    afc2:	02 c0       	rjmp	.+4      	; 0xafc8 <vfprintf+0x458>
    afc4:	6f ef       	ldi	r22, 0xFF	; 255
    afc6:	7f ef       	ldi	r23, 0xFF	; 255
    afc8:	c6 01       	movw	r24, r12
    afca:	8d d3       	rcall	.+1818   	; 0xb6e6 <strnlen_P>
    afcc:	8c 01       	movw	r16, r24
    afce:	f9 2d       	mov	r31, r9
    afd0:	f0 68       	ori	r31, 0x80	; 128
    afd2:	9f 2e       	mov	r9, r31
    afd4:	f3 fd       	sbrc	r31, 3
    afd6:	18 c0       	rjmp	.+48     	; 0xb008 <vfprintf+0x498>
    afd8:	85 2d       	mov	r24, r5
    afda:	90 e0       	ldi	r25, 0x00	; 0
    afdc:	08 17       	cp	r16, r24
    afde:	19 07       	cpc	r17, r25
    afe0:	98 f4       	brcc	.+38     	; 0xb008 <vfprintf+0x498>
    afe2:	b7 01       	movw	r22, r14
    afe4:	80 e2       	ldi	r24, 0x20	; 32
    afe6:	90 e0       	ldi	r25, 0x00	; 0
    afe8:	a4 d3       	rcall	.+1864   	; 0xb732 <fputc>
    afea:	5a 94       	dec	r5
    afec:	f5 cf       	rjmp	.-22     	; 0xafd8 <vfprintf+0x468>
    afee:	f6 01       	movw	r30, r12
    aff0:	97 fc       	sbrc	r9, 7
    aff2:	85 91       	lpm	r24, Z+
    aff4:	97 fe       	sbrs	r9, 7
    aff6:	81 91       	ld	r24, Z+
    aff8:	6f 01       	movw	r12, r30
    affa:	b7 01       	movw	r22, r14
    affc:	90 e0       	ldi	r25, 0x00	; 0
    affe:	99 d3       	rcall	.+1842   	; 0xb732 <fputc>
    b000:	51 10       	cpse	r5, r1
    b002:	5a 94       	dec	r5
    b004:	01 50       	subi	r16, 0x01	; 1
    b006:	11 09       	sbc	r17, r1
    b008:	01 15       	cp	r16, r1
    b00a:	11 05       	cpc	r17, r1
    b00c:	81 f7       	brne	.-32     	; 0xafee <vfprintf+0x47e>
    b00e:	f0 c0       	rjmp	.+480    	; 0xb1f0 <vfprintf+0x680>
    b010:	84 36       	cpi	r24, 0x64	; 100
    b012:	11 f0       	breq	.+4      	; 0xb018 <vfprintf+0x4a8>
    b014:	89 36       	cpi	r24, 0x69	; 105
    b016:	59 f5       	brne	.+86     	; 0xb06e <vfprintf+0x4fe>
    b018:	56 01       	movw	r10, r12
    b01a:	97 fe       	sbrs	r9, 7
    b01c:	09 c0       	rjmp	.+18     	; 0xb030 <vfprintf+0x4c0>
    b01e:	24 e0       	ldi	r18, 0x04	; 4
    b020:	a2 0e       	add	r10, r18
    b022:	b1 1c       	adc	r11, r1
    b024:	f6 01       	movw	r30, r12
    b026:	60 81       	ld	r22, Z
    b028:	71 81       	ldd	r23, Z+1	; 0x01
    b02a:	82 81       	ldd	r24, Z+2	; 0x02
    b02c:	93 81       	ldd	r25, Z+3	; 0x03
    b02e:	0a c0       	rjmp	.+20     	; 0xb044 <vfprintf+0x4d4>
    b030:	f2 e0       	ldi	r31, 0x02	; 2
    b032:	af 0e       	add	r10, r31
    b034:	b1 1c       	adc	r11, r1
    b036:	f6 01       	movw	r30, r12
    b038:	60 81       	ld	r22, Z
    b03a:	71 81       	ldd	r23, Z+1	; 0x01
    b03c:	07 2e       	mov	r0, r23
    b03e:	00 0c       	add	r0, r0
    b040:	88 0b       	sbc	r24, r24
    b042:	99 0b       	sbc	r25, r25
    b044:	f9 2d       	mov	r31, r9
    b046:	ff 76       	andi	r31, 0x6F	; 111
    b048:	9f 2e       	mov	r9, r31
    b04a:	97 ff       	sbrs	r25, 7
    b04c:	09 c0       	rjmp	.+18     	; 0xb060 <vfprintf+0x4f0>
    b04e:	90 95       	com	r25
    b050:	80 95       	com	r24
    b052:	70 95       	com	r23
    b054:	61 95       	neg	r22
    b056:	7f 4f       	sbci	r23, 0xFF	; 255
    b058:	8f 4f       	sbci	r24, 0xFF	; 255
    b05a:	9f 4f       	sbci	r25, 0xFF	; 255
    b05c:	f0 68       	ori	r31, 0x80	; 128
    b05e:	9f 2e       	mov	r9, r31
    b060:	2a e0       	ldi	r18, 0x0A	; 10
    b062:	30 e0       	ldi	r19, 0x00	; 0
    b064:	a3 01       	movw	r20, r6
    b066:	d9 d3       	rcall	.+1970   	; 0xb81a <__ultoa_invert>
    b068:	c8 2e       	mov	r12, r24
    b06a:	c6 18       	sub	r12, r6
    b06c:	3e c0       	rjmp	.+124    	; 0xb0ea <vfprintf+0x57a>
    b06e:	09 2d       	mov	r16, r9
    b070:	85 37       	cpi	r24, 0x75	; 117
    b072:	21 f4       	brne	.+8      	; 0xb07c <vfprintf+0x50c>
    b074:	0f 7e       	andi	r16, 0xEF	; 239
    b076:	2a e0       	ldi	r18, 0x0A	; 10
    b078:	30 e0       	ldi	r19, 0x00	; 0
    b07a:	1d c0       	rjmp	.+58     	; 0xb0b6 <vfprintf+0x546>
    b07c:	09 7f       	andi	r16, 0xF9	; 249
    b07e:	8f 36       	cpi	r24, 0x6F	; 111
    b080:	91 f0       	breq	.+36     	; 0xb0a6 <vfprintf+0x536>
    b082:	18 f4       	brcc	.+6      	; 0xb08a <vfprintf+0x51a>
    b084:	88 35       	cpi	r24, 0x58	; 88
    b086:	59 f0       	breq	.+22     	; 0xb09e <vfprintf+0x52e>
    b088:	bc c0       	rjmp	.+376    	; 0xb202 <vfprintf+0x692>
    b08a:	80 37       	cpi	r24, 0x70	; 112
    b08c:	19 f0       	breq	.+6      	; 0xb094 <vfprintf+0x524>
    b08e:	88 37       	cpi	r24, 0x78	; 120
    b090:	11 f0       	breq	.+4      	; 0xb096 <vfprintf+0x526>
    b092:	b7 c0       	rjmp	.+366    	; 0xb202 <vfprintf+0x692>
    b094:	00 61       	ori	r16, 0x10	; 16
    b096:	04 ff       	sbrs	r16, 4
    b098:	09 c0       	rjmp	.+18     	; 0xb0ac <vfprintf+0x53c>
    b09a:	04 60       	ori	r16, 0x04	; 4
    b09c:	07 c0       	rjmp	.+14     	; 0xb0ac <vfprintf+0x53c>
    b09e:	94 fe       	sbrs	r9, 4
    b0a0:	08 c0       	rjmp	.+16     	; 0xb0b2 <vfprintf+0x542>
    b0a2:	06 60       	ori	r16, 0x06	; 6
    b0a4:	06 c0       	rjmp	.+12     	; 0xb0b2 <vfprintf+0x542>
    b0a6:	28 e0       	ldi	r18, 0x08	; 8
    b0a8:	30 e0       	ldi	r19, 0x00	; 0
    b0aa:	05 c0       	rjmp	.+10     	; 0xb0b6 <vfprintf+0x546>
    b0ac:	20 e1       	ldi	r18, 0x10	; 16
    b0ae:	30 e0       	ldi	r19, 0x00	; 0
    b0b0:	02 c0       	rjmp	.+4      	; 0xb0b6 <vfprintf+0x546>
    b0b2:	20 e1       	ldi	r18, 0x10	; 16
    b0b4:	32 e0       	ldi	r19, 0x02	; 2
    b0b6:	56 01       	movw	r10, r12
    b0b8:	07 ff       	sbrs	r16, 7
    b0ba:	09 c0       	rjmp	.+18     	; 0xb0ce <vfprintf+0x55e>
    b0bc:	84 e0       	ldi	r24, 0x04	; 4
    b0be:	a8 0e       	add	r10, r24
    b0c0:	b1 1c       	adc	r11, r1
    b0c2:	f6 01       	movw	r30, r12
    b0c4:	60 81       	ld	r22, Z
    b0c6:	71 81       	ldd	r23, Z+1	; 0x01
    b0c8:	82 81       	ldd	r24, Z+2	; 0x02
    b0ca:	93 81       	ldd	r25, Z+3	; 0x03
    b0cc:	08 c0       	rjmp	.+16     	; 0xb0de <vfprintf+0x56e>
    b0ce:	f2 e0       	ldi	r31, 0x02	; 2
    b0d0:	af 0e       	add	r10, r31
    b0d2:	b1 1c       	adc	r11, r1
    b0d4:	f6 01       	movw	r30, r12
    b0d6:	60 81       	ld	r22, Z
    b0d8:	71 81       	ldd	r23, Z+1	; 0x01
    b0da:	80 e0       	ldi	r24, 0x00	; 0
    b0dc:	90 e0       	ldi	r25, 0x00	; 0
    b0de:	a3 01       	movw	r20, r6
    b0e0:	9c d3       	rcall	.+1848   	; 0xb81a <__ultoa_invert>
    b0e2:	c8 2e       	mov	r12, r24
    b0e4:	c6 18       	sub	r12, r6
    b0e6:	0f 77       	andi	r16, 0x7F	; 127
    b0e8:	90 2e       	mov	r9, r16
    b0ea:	96 fe       	sbrs	r9, 6
    b0ec:	0b c0       	rjmp	.+22     	; 0xb104 <vfprintf+0x594>
    b0ee:	09 2d       	mov	r16, r9
    b0f0:	0e 7f       	andi	r16, 0xFE	; 254
    b0f2:	c1 16       	cp	r12, r17
    b0f4:	50 f4       	brcc	.+20     	; 0xb10a <vfprintf+0x59a>
    b0f6:	94 fe       	sbrs	r9, 4
    b0f8:	0a c0       	rjmp	.+20     	; 0xb10e <vfprintf+0x59e>
    b0fa:	92 fc       	sbrc	r9, 2
    b0fc:	08 c0       	rjmp	.+16     	; 0xb10e <vfprintf+0x59e>
    b0fe:	09 2d       	mov	r16, r9
    b100:	0e 7e       	andi	r16, 0xEE	; 238
    b102:	05 c0       	rjmp	.+10     	; 0xb10e <vfprintf+0x59e>
    b104:	dc 2c       	mov	r13, r12
    b106:	09 2d       	mov	r16, r9
    b108:	03 c0       	rjmp	.+6      	; 0xb110 <vfprintf+0x5a0>
    b10a:	dc 2c       	mov	r13, r12
    b10c:	01 c0       	rjmp	.+2      	; 0xb110 <vfprintf+0x5a0>
    b10e:	d1 2e       	mov	r13, r17
    b110:	04 ff       	sbrs	r16, 4
    b112:	0d c0       	rjmp	.+26     	; 0xb12e <vfprintf+0x5be>
    b114:	fe 01       	movw	r30, r28
    b116:	ec 0d       	add	r30, r12
    b118:	f1 1d       	adc	r31, r1
    b11a:	80 81       	ld	r24, Z
    b11c:	80 33       	cpi	r24, 0x30	; 48
    b11e:	11 f4       	brne	.+4      	; 0xb124 <vfprintf+0x5b4>
    b120:	09 7e       	andi	r16, 0xE9	; 233
    b122:	09 c0       	rjmp	.+18     	; 0xb136 <vfprintf+0x5c6>
    b124:	02 ff       	sbrs	r16, 2
    b126:	06 c0       	rjmp	.+12     	; 0xb134 <vfprintf+0x5c4>
    b128:	d3 94       	inc	r13
    b12a:	d3 94       	inc	r13
    b12c:	04 c0       	rjmp	.+8      	; 0xb136 <vfprintf+0x5c6>
    b12e:	80 2f       	mov	r24, r16
    b130:	86 78       	andi	r24, 0x86	; 134
    b132:	09 f0       	breq	.+2      	; 0xb136 <vfprintf+0x5c6>
    b134:	d3 94       	inc	r13
    b136:	03 fd       	sbrc	r16, 3
    b138:	10 c0       	rjmp	.+32     	; 0xb15a <vfprintf+0x5ea>
    b13a:	00 ff       	sbrs	r16, 0
    b13c:	06 c0       	rjmp	.+12     	; 0xb14a <vfprintf+0x5da>
    b13e:	1c 2d       	mov	r17, r12
    b140:	d5 14       	cp	r13, r5
    b142:	78 f4       	brcc	.+30     	; 0xb162 <vfprintf+0x5f2>
    b144:	15 0d       	add	r17, r5
    b146:	1d 19       	sub	r17, r13
    b148:	0c c0       	rjmp	.+24     	; 0xb162 <vfprintf+0x5f2>
    b14a:	d5 14       	cp	r13, r5
    b14c:	50 f4       	brcc	.+20     	; 0xb162 <vfprintf+0x5f2>
    b14e:	b7 01       	movw	r22, r14
    b150:	80 e2       	ldi	r24, 0x20	; 32
    b152:	90 e0       	ldi	r25, 0x00	; 0
    b154:	ee d2       	rcall	.+1500   	; 0xb732 <fputc>
    b156:	d3 94       	inc	r13
    b158:	f8 cf       	rjmp	.-16     	; 0xb14a <vfprintf+0x5da>
    b15a:	d5 14       	cp	r13, r5
    b15c:	10 f4       	brcc	.+4      	; 0xb162 <vfprintf+0x5f2>
    b15e:	5d 18       	sub	r5, r13
    b160:	01 c0       	rjmp	.+2      	; 0xb164 <vfprintf+0x5f4>
    b162:	51 2c       	mov	r5, r1
    b164:	04 ff       	sbrs	r16, 4
    b166:	0f c0       	rjmp	.+30     	; 0xb186 <vfprintf+0x616>
    b168:	b7 01       	movw	r22, r14
    b16a:	80 e3       	ldi	r24, 0x30	; 48
    b16c:	90 e0       	ldi	r25, 0x00	; 0
    b16e:	e1 d2       	rcall	.+1474   	; 0xb732 <fputc>
    b170:	02 ff       	sbrs	r16, 2
    b172:	16 c0       	rjmp	.+44     	; 0xb1a0 <vfprintf+0x630>
    b174:	01 fd       	sbrc	r16, 1
    b176:	03 c0       	rjmp	.+6      	; 0xb17e <vfprintf+0x60e>
    b178:	88 e7       	ldi	r24, 0x78	; 120
    b17a:	90 e0       	ldi	r25, 0x00	; 0
    b17c:	02 c0       	rjmp	.+4      	; 0xb182 <vfprintf+0x612>
    b17e:	88 e5       	ldi	r24, 0x58	; 88
    b180:	90 e0       	ldi	r25, 0x00	; 0
    b182:	b7 01       	movw	r22, r14
    b184:	0c c0       	rjmp	.+24     	; 0xb19e <vfprintf+0x62e>
    b186:	80 2f       	mov	r24, r16
    b188:	86 78       	andi	r24, 0x86	; 134
    b18a:	51 f0       	breq	.+20     	; 0xb1a0 <vfprintf+0x630>
    b18c:	01 ff       	sbrs	r16, 1
    b18e:	02 c0       	rjmp	.+4      	; 0xb194 <vfprintf+0x624>
    b190:	8b e2       	ldi	r24, 0x2B	; 43
    b192:	01 c0       	rjmp	.+2      	; 0xb196 <vfprintf+0x626>
    b194:	80 e2       	ldi	r24, 0x20	; 32
    b196:	07 fd       	sbrc	r16, 7
    b198:	8d e2       	ldi	r24, 0x2D	; 45
    b19a:	b7 01       	movw	r22, r14
    b19c:	90 e0       	ldi	r25, 0x00	; 0
    b19e:	c9 d2       	rcall	.+1426   	; 0xb732 <fputc>
    b1a0:	c1 16       	cp	r12, r17
    b1a2:	30 f4       	brcc	.+12     	; 0xb1b0 <vfprintf+0x640>
    b1a4:	b7 01       	movw	r22, r14
    b1a6:	80 e3       	ldi	r24, 0x30	; 48
    b1a8:	90 e0       	ldi	r25, 0x00	; 0
    b1aa:	c3 d2       	rcall	.+1414   	; 0xb732 <fputc>
    b1ac:	11 50       	subi	r17, 0x01	; 1
    b1ae:	f8 cf       	rjmp	.-16     	; 0xb1a0 <vfprintf+0x630>
    b1b0:	ca 94       	dec	r12
    b1b2:	f3 01       	movw	r30, r6
    b1b4:	ec 0d       	add	r30, r12
    b1b6:	f1 1d       	adc	r31, r1
    b1b8:	80 81       	ld	r24, Z
    b1ba:	b7 01       	movw	r22, r14
    b1bc:	90 e0       	ldi	r25, 0x00	; 0
    b1be:	b9 d2       	rcall	.+1394   	; 0xb732 <fputc>
    b1c0:	c1 10       	cpse	r12, r1
    b1c2:	f6 cf       	rjmp	.-20     	; 0xb1b0 <vfprintf+0x640>
    b1c4:	15 c0       	rjmp	.+42     	; 0xb1f0 <vfprintf+0x680>
    b1c6:	f4 e0       	ldi	r31, 0x04	; 4
    b1c8:	f5 15       	cp	r31, r5
    b1ca:	50 f5       	brcc	.+84     	; 0xb220 <vfprintf+0x6b0>
    b1cc:	84 e0       	ldi	r24, 0x04	; 4
    b1ce:	58 1a       	sub	r5, r24
    b1d0:	93 fe       	sbrs	r9, 3
    b1d2:	1e c0       	rjmp	.+60     	; 0xb210 <vfprintf+0x6a0>
    b1d4:	01 11       	cpse	r16, r1
    b1d6:	25 c0       	rjmp	.+74     	; 0xb222 <vfprintf+0x6b2>
    b1d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    b1da:	23 ff       	sbrs	r18, 3
    b1dc:	27 c0       	rjmp	.+78     	; 0xb22c <vfprintf+0x6bc>
    b1de:	0e ee       	ldi	r16, 0xEE	; 238
    b1e0:	18 e0       	ldi	r17, 0x08	; 8
    b1e2:	39 2d       	mov	r19, r9
    b1e4:	30 71       	andi	r19, 0x10	; 16
    b1e6:	93 2e       	mov	r9, r19
    b1e8:	f8 01       	movw	r30, r16
    b1ea:	84 91       	lpm	r24, Z
    b1ec:	81 11       	cpse	r24, r1
    b1ee:	21 c0       	rjmp	.+66     	; 0xb232 <vfprintf+0x6c2>
    b1f0:	55 20       	and	r5, r5
    b1f2:	09 f4       	brne	.+2      	; 0xb1f6 <vfprintf+0x686>
    b1f4:	fc cc       	rjmp	.-1544   	; 0xabee <vfprintf+0x7e>
    b1f6:	b7 01       	movw	r22, r14
    b1f8:	80 e2       	ldi	r24, 0x20	; 32
    b1fa:	90 e0       	ldi	r25, 0x00	; 0
    b1fc:	9a d2       	rcall	.+1332   	; 0xb732 <fputc>
    b1fe:	5a 94       	dec	r5
    b200:	f7 cf       	rjmp	.-18     	; 0xb1f0 <vfprintf+0x680>
    b202:	f7 01       	movw	r30, r14
    b204:	86 81       	ldd	r24, Z+6	; 0x06
    b206:	97 81       	ldd	r25, Z+7	; 0x07
    b208:	23 c0       	rjmp	.+70     	; 0xb250 <vfprintf+0x6e0>
    b20a:	8f ef       	ldi	r24, 0xFF	; 255
    b20c:	9f ef       	ldi	r25, 0xFF	; 255
    b20e:	20 c0       	rjmp	.+64     	; 0xb250 <vfprintf+0x6e0>
    b210:	b7 01       	movw	r22, r14
    b212:	80 e2       	ldi	r24, 0x20	; 32
    b214:	90 e0       	ldi	r25, 0x00	; 0
    b216:	8d d2       	rcall	.+1306   	; 0xb732 <fputc>
    b218:	5a 94       	dec	r5
    b21a:	51 10       	cpse	r5, r1
    b21c:	f9 cf       	rjmp	.-14     	; 0xb210 <vfprintf+0x6a0>
    b21e:	da cf       	rjmp	.-76     	; 0xb1d4 <vfprintf+0x664>
    b220:	51 2c       	mov	r5, r1
    b222:	b7 01       	movw	r22, r14
    b224:	80 2f       	mov	r24, r16
    b226:	90 e0       	ldi	r25, 0x00	; 0
    b228:	84 d2       	rcall	.+1288   	; 0xb732 <fputc>
    b22a:	d6 cf       	rjmp	.-84     	; 0xb1d8 <vfprintf+0x668>
    b22c:	02 ef       	ldi	r16, 0xF2	; 242
    b22e:	18 e0       	ldi	r17, 0x08	; 8
    b230:	d8 cf       	rjmp	.-80     	; 0xb1e2 <vfprintf+0x672>
    b232:	91 10       	cpse	r9, r1
    b234:	80 52       	subi	r24, 0x20	; 32
    b236:	b7 01       	movw	r22, r14
    b238:	90 e0       	ldi	r25, 0x00	; 0
    b23a:	7b d2       	rcall	.+1270   	; 0xb732 <fputc>
    b23c:	0f 5f       	subi	r16, 0xFF	; 255
    b23e:	1f 4f       	sbci	r17, 0xFF	; 255
    b240:	d3 cf       	rjmp	.-90     	; 0xb1e8 <vfprintf+0x678>
    b242:	23 e0       	ldi	r18, 0x03	; 3
    b244:	25 15       	cp	r18, r5
    b246:	10 f4       	brcc	.+4      	; 0xb24c <vfprintf+0x6dc>
    b248:	83 e0       	ldi	r24, 0x03	; 3
    b24a:	c1 cf       	rjmp	.-126    	; 0xb1ce <vfprintf+0x65e>
    b24c:	51 2c       	mov	r5, r1
    b24e:	c4 cf       	rjmp	.-120    	; 0xb1d8 <vfprintf+0x668>
    b250:	60 96       	adiw	r28, 0x10	; 16
    b252:	0f b6       	in	r0, 0x3f	; 63
    b254:	f8 94       	cli
    b256:	de bf       	out	0x3e, r29	; 62
    b258:	0f be       	out	0x3f, r0	; 63
    b25a:	cd bf       	out	0x3d, r28	; 61
    b25c:	df 91       	pop	r29
    b25e:	cf 91       	pop	r28
    b260:	1f 91       	pop	r17
    b262:	0f 91       	pop	r16
    b264:	ff 90       	pop	r15
    b266:	ef 90       	pop	r14
    b268:	df 90       	pop	r13
    b26a:	cf 90       	pop	r12
    b26c:	bf 90       	pop	r11
    b26e:	af 90       	pop	r10
    b270:	9f 90       	pop	r9
    b272:	8f 90       	pop	r8
    b274:	7f 90       	pop	r7
    b276:	6f 90       	pop	r6
    b278:	5f 90       	pop	r5
    b27a:	4f 90       	pop	r4
    b27c:	3f 90       	pop	r3
    b27e:	2f 90       	pop	r2
    b280:	08 95       	ret

0000b282 <__udivmodsi4>:
    b282:	a1 e2       	ldi	r26, 0x21	; 33
    b284:	1a 2e       	mov	r1, r26
    b286:	aa 1b       	sub	r26, r26
    b288:	bb 1b       	sub	r27, r27
    b28a:	fd 01       	movw	r30, r26
    b28c:	0d c0       	rjmp	.+26     	; 0xb2a8 <__udivmodsi4_ep>

0000b28e <__udivmodsi4_loop>:
    b28e:	aa 1f       	adc	r26, r26
    b290:	bb 1f       	adc	r27, r27
    b292:	ee 1f       	adc	r30, r30
    b294:	ff 1f       	adc	r31, r31
    b296:	a2 17       	cp	r26, r18
    b298:	b3 07       	cpc	r27, r19
    b29a:	e4 07       	cpc	r30, r20
    b29c:	f5 07       	cpc	r31, r21
    b29e:	20 f0       	brcs	.+8      	; 0xb2a8 <__udivmodsi4_ep>
    b2a0:	a2 1b       	sub	r26, r18
    b2a2:	b3 0b       	sbc	r27, r19
    b2a4:	e4 0b       	sbc	r30, r20
    b2a6:	f5 0b       	sbc	r31, r21

0000b2a8 <__udivmodsi4_ep>:
    b2a8:	66 1f       	adc	r22, r22
    b2aa:	77 1f       	adc	r23, r23
    b2ac:	88 1f       	adc	r24, r24
    b2ae:	99 1f       	adc	r25, r25
    b2b0:	1a 94       	dec	r1
    b2b2:	69 f7       	brne	.-38     	; 0xb28e <__udivmodsi4_loop>
    b2b4:	60 95       	com	r22
    b2b6:	70 95       	com	r23
    b2b8:	80 95       	com	r24
    b2ba:	90 95       	com	r25
    b2bc:	9b 01       	movw	r18, r22
    b2be:	ac 01       	movw	r20, r24
    b2c0:	bd 01       	movw	r22, r26
    b2c2:	cf 01       	movw	r24, r30
    b2c4:	08 95       	ret

0000b2c6 <__tablejump2__>:
    b2c6:	ee 0f       	add	r30, r30
    b2c8:	ff 1f       	adc	r31, r31
    b2ca:	88 1f       	adc	r24, r24
    b2cc:	8b bf       	out	0x3b, r24	; 59
    b2ce:	07 90       	elpm	r0, Z+
    b2d0:	f6 91       	elpm	r31, Z
    b2d2:	e0 2d       	mov	r30, r0
    b2d4:	19 94       	eijmp

0000b2d6 <__umulhisi3>:
    b2d6:	a2 9f       	mul	r26, r18
    b2d8:	b0 01       	movw	r22, r0
    b2da:	b3 9f       	mul	r27, r19
    b2dc:	c0 01       	movw	r24, r0
    b2de:	a3 9f       	mul	r26, r19
    b2e0:	70 0d       	add	r23, r0
    b2e2:	81 1d       	adc	r24, r1
    b2e4:	11 24       	eor	r1, r1
    b2e6:	91 1d       	adc	r25, r1
    b2e8:	b2 9f       	mul	r27, r18
    b2ea:	70 0d       	add	r23, r0
    b2ec:	81 1d       	adc	r24, r1
    b2ee:	11 24       	eor	r1, r1
    b2f0:	91 1d       	adc	r25, r1
    b2f2:	08 95       	ret

0000b2f4 <malloc>:
    b2f4:	0f 93       	push	r16
    b2f6:	1f 93       	push	r17
    b2f8:	cf 93       	push	r28
    b2fa:	df 93       	push	r29
    b2fc:	82 30       	cpi	r24, 0x02	; 2
    b2fe:	91 05       	cpc	r25, r1
    b300:	10 f4       	brcc	.+4      	; 0xb306 <malloc+0x12>
    b302:	82 e0       	ldi	r24, 0x02	; 2
    b304:	90 e0       	ldi	r25, 0x00	; 0
    b306:	e0 91 c5 0a 	lds	r30, 0x0AC5	; 0x800ac5 <__flp>
    b30a:	f0 91 c6 0a 	lds	r31, 0x0AC6	; 0x800ac6 <__flp+0x1>
    b30e:	20 e0       	ldi	r18, 0x00	; 0
    b310:	30 e0       	ldi	r19, 0x00	; 0
    b312:	a0 e0       	ldi	r26, 0x00	; 0
    b314:	b0 e0       	ldi	r27, 0x00	; 0
    b316:	30 97       	sbiw	r30, 0x00	; 0
    b318:	19 f1       	breq	.+70     	; 0xb360 <malloc+0x6c>
    b31a:	40 81       	ld	r20, Z
    b31c:	51 81       	ldd	r21, Z+1	; 0x01
    b31e:	02 81       	ldd	r16, Z+2	; 0x02
    b320:	13 81       	ldd	r17, Z+3	; 0x03
    b322:	48 17       	cp	r20, r24
    b324:	59 07       	cpc	r21, r25
    b326:	c8 f0       	brcs	.+50     	; 0xb35a <malloc+0x66>
    b328:	84 17       	cp	r24, r20
    b32a:	95 07       	cpc	r25, r21
    b32c:	69 f4       	brne	.+26     	; 0xb348 <malloc+0x54>
    b32e:	10 97       	sbiw	r26, 0x00	; 0
    b330:	31 f0       	breq	.+12     	; 0xb33e <malloc+0x4a>
    b332:	12 96       	adiw	r26, 0x02	; 2
    b334:	0c 93       	st	X, r16
    b336:	12 97       	sbiw	r26, 0x02	; 2
    b338:	13 96       	adiw	r26, 0x03	; 3
    b33a:	1c 93       	st	X, r17
    b33c:	27 c0       	rjmp	.+78     	; 0xb38c <malloc+0x98>
    b33e:	00 93 c5 0a 	sts	0x0AC5, r16	; 0x800ac5 <__flp>
    b342:	10 93 c6 0a 	sts	0x0AC6, r17	; 0x800ac6 <__flp+0x1>
    b346:	22 c0       	rjmp	.+68     	; 0xb38c <malloc+0x98>
    b348:	21 15       	cp	r18, r1
    b34a:	31 05       	cpc	r19, r1
    b34c:	19 f0       	breq	.+6      	; 0xb354 <malloc+0x60>
    b34e:	42 17       	cp	r20, r18
    b350:	53 07       	cpc	r21, r19
    b352:	18 f4       	brcc	.+6      	; 0xb35a <malloc+0x66>
    b354:	9a 01       	movw	r18, r20
    b356:	bd 01       	movw	r22, r26
    b358:	ef 01       	movw	r28, r30
    b35a:	df 01       	movw	r26, r30
    b35c:	f8 01       	movw	r30, r16
    b35e:	db cf       	rjmp	.-74     	; 0xb316 <malloc+0x22>
    b360:	21 15       	cp	r18, r1
    b362:	31 05       	cpc	r19, r1
    b364:	f9 f0       	breq	.+62     	; 0xb3a4 <malloc+0xb0>
    b366:	28 1b       	sub	r18, r24
    b368:	39 0b       	sbc	r19, r25
    b36a:	24 30       	cpi	r18, 0x04	; 4
    b36c:	31 05       	cpc	r19, r1
    b36e:	80 f4       	brcc	.+32     	; 0xb390 <malloc+0x9c>
    b370:	8a 81       	ldd	r24, Y+2	; 0x02
    b372:	9b 81       	ldd	r25, Y+3	; 0x03
    b374:	61 15       	cp	r22, r1
    b376:	71 05       	cpc	r23, r1
    b378:	21 f0       	breq	.+8      	; 0xb382 <malloc+0x8e>
    b37a:	fb 01       	movw	r30, r22
    b37c:	93 83       	std	Z+3, r25	; 0x03
    b37e:	82 83       	std	Z+2, r24	; 0x02
    b380:	04 c0       	rjmp	.+8      	; 0xb38a <malloc+0x96>
    b382:	90 93 c6 0a 	sts	0x0AC6, r25	; 0x800ac6 <__flp+0x1>
    b386:	80 93 c5 0a 	sts	0x0AC5, r24	; 0x800ac5 <__flp>
    b38a:	fe 01       	movw	r30, r28
    b38c:	32 96       	adiw	r30, 0x02	; 2
    b38e:	44 c0       	rjmp	.+136    	; 0xb418 <malloc+0x124>
    b390:	fe 01       	movw	r30, r28
    b392:	e2 0f       	add	r30, r18
    b394:	f3 1f       	adc	r31, r19
    b396:	81 93       	st	Z+, r24
    b398:	91 93       	st	Z+, r25
    b39a:	22 50       	subi	r18, 0x02	; 2
    b39c:	31 09       	sbc	r19, r1
    b39e:	39 83       	std	Y+1, r19	; 0x01
    b3a0:	28 83       	st	Y, r18
    b3a2:	3a c0       	rjmp	.+116    	; 0xb418 <malloc+0x124>
    b3a4:	20 91 c3 0a 	lds	r18, 0x0AC3	; 0x800ac3 <__brkval>
    b3a8:	30 91 c4 0a 	lds	r19, 0x0AC4	; 0x800ac4 <__brkval+0x1>
    b3ac:	23 2b       	or	r18, r19
    b3ae:	41 f4       	brne	.+16     	; 0xb3c0 <malloc+0xcc>
    b3b0:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    b3b4:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    b3b8:	30 93 c4 0a 	sts	0x0AC4, r19	; 0x800ac4 <__brkval+0x1>
    b3bc:	20 93 c3 0a 	sts	0x0AC3, r18	; 0x800ac3 <__brkval>
    b3c0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    b3c4:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    b3c8:	21 15       	cp	r18, r1
    b3ca:	31 05       	cpc	r19, r1
    b3cc:	41 f4       	brne	.+16     	; 0xb3de <malloc+0xea>
    b3ce:	2d b7       	in	r18, 0x3d	; 61
    b3d0:	3e b7       	in	r19, 0x3e	; 62
    b3d2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    b3d6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    b3da:	24 1b       	sub	r18, r20
    b3dc:	35 0b       	sbc	r19, r21
    b3de:	e0 91 c3 0a 	lds	r30, 0x0AC3	; 0x800ac3 <__brkval>
    b3e2:	f0 91 c4 0a 	lds	r31, 0x0AC4	; 0x800ac4 <__brkval+0x1>
    b3e6:	e2 17       	cp	r30, r18
    b3e8:	f3 07       	cpc	r31, r19
    b3ea:	a0 f4       	brcc	.+40     	; 0xb414 <malloc+0x120>
    b3ec:	2e 1b       	sub	r18, r30
    b3ee:	3f 0b       	sbc	r19, r31
    b3f0:	28 17       	cp	r18, r24
    b3f2:	39 07       	cpc	r19, r25
    b3f4:	78 f0       	brcs	.+30     	; 0xb414 <malloc+0x120>
    b3f6:	ac 01       	movw	r20, r24
    b3f8:	4e 5f       	subi	r20, 0xFE	; 254
    b3fa:	5f 4f       	sbci	r21, 0xFF	; 255
    b3fc:	24 17       	cp	r18, r20
    b3fe:	35 07       	cpc	r19, r21
    b400:	48 f0       	brcs	.+18     	; 0xb414 <malloc+0x120>
    b402:	4e 0f       	add	r20, r30
    b404:	5f 1f       	adc	r21, r31
    b406:	50 93 c4 0a 	sts	0x0AC4, r21	; 0x800ac4 <__brkval+0x1>
    b40a:	40 93 c3 0a 	sts	0x0AC3, r20	; 0x800ac3 <__brkval>
    b40e:	81 93       	st	Z+, r24
    b410:	91 93       	st	Z+, r25
    b412:	02 c0       	rjmp	.+4      	; 0xb418 <malloc+0x124>
    b414:	e0 e0       	ldi	r30, 0x00	; 0
    b416:	f0 e0       	ldi	r31, 0x00	; 0
    b418:	cf 01       	movw	r24, r30
    b41a:	df 91       	pop	r29
    b41c:	cf 91       	pop	r28
    b41e:	1f 91       	pop	r17
    b420:	0f 91       	pop	r16
    b422:	08 95       	ret

0000b424 <free>:
    b424:	cf 93       	push	r28
    b426:	df 93       	push	r29
    b428:	00 97       	sbiw	r24, 0x00	; 0
    b42a:	09 f4       	brne	.+2      	; 0xb42e <free+0xa>
    b42c:	81 c0       	rjmp	.+258    	; 0xb530 <free+0x10c>
    b42e:	fc 01       	movw	r30, r24
    b430:	32 97       	sbiw	r30, 0x02	; 2
    b432:	13 82       	std	Z+3, r1	; 0x03
    b434:	12 82       	std	Z+2, r1	; 0x02
    b436:	a0 91 c5 0a 	lds	r26, 0x0AC5	; 0x800ac5 <__flp>
    b43a:	b0 91 c6 0a 	lds	r27, 0x0AC6	; 0x800ac6 <__flp+0x1>
    b43e:	10 97       	sbiw	r26, 0x00	; 0
    b440:	81 f4       	brne	.+32     	; 0xb462 <free+0x3e>
    b442:	20 81       	ld	r18, Z
    b444:	31 81       	ldd	r19, Z+1	; 0x01
    b446:	82 0f       	add	r24, r18
    b448:	93 1f       	adc	r25, r19
    b44a:	20 91 c3 0a 	lds	r18, 0x0AC3	; 0x800ac3 <__brkval>
    b44e:	30 91 c4 0a 	lds	r19, 0x0AC4	; 0x800ac4 <__brkval+0x1>
    b452:	28 17       	cp	r18, r24
    b454:	39 07       	cpc	r19, r25
    b456:	51 f5       	brne	.+84     	; 0xb4ac <free+0x88>
    b458:	f0 93 c4 0a 	sts	0x0AC4, r31	; 0x800ac4 <__brkval+0x1>
    b45c:	e0 93 c3 0a 	sts	0x0AC3, r30	; 0x800ac3 <__brkval>
    b460:	67 c0       	rjmp	.+206    	; 0xb530 <free+0x10c>
    b462:	ed 01       	movw	r28, r26
    b464:	20 e0       	ldi	r18, 0x00	; 0
    b466:	30 e0       	ldi	r19, 0x00	; 0
    b468:	ce 17       	cp	r28, r30
    b46a:	df 07       	cpc	r29, r31
    b46c:	40 f4       	brcc	.+16     	; 0xb47e <free+0x5a>
    b46e:	4a 81       	ldd	r20, Y+2	; 0x02
    b470:	5b 81       	ldd	r21, Y+3	; 0x03
    b472:	9e 01       	movw	r18, r28
    b474:	41 15       	cp	r20, r1
    b476:	51 05       	cpc	r21, r1
    b478:	f1 f0       	breq	.+60     	; 0xb4b6 <free+0x92>
    b47a:	ea 01       	movw	r28, r20
    b47c:	f5 cf       	rjmp	.-22     	; 0xb468 <free+0x44>
    b47e:	d3 83       	std	Z+3, r29	; 0x03
    b480:	c2 83       	std	Z+2, r28	; 0x02
    b482:	40 81       	ld	r20, Z
    b484:	51 81       	ldd	r21, Z+1	; 0x01
    b486:	84 0f       	add	r24, r20
    b488:	95 1f       	adc	r25, r21
    b48a:	c8 17       	cp	r28, r24
    b48c:	d9 07       	cpc	r29, r25
    b48e:	59 f4       	brne	.+22     	; 0xb4a6 <free+0x82>
    b490:	88 81       	ld	r24, Y
    b492:	99 81       	ldd	r25, Y+1	; 0x01
    b494:	84 0f       	add	r24, r20
    b496:	95 1f       	adc	r25, r21
    b498:	02 96       	adiw	r24, 0x02	; 2
    b49a:	91 83       	std	Z+1, r25	; 0x01
    b49c:	80 83       	st	Z, r24
    b49e:	8a 81       	ldd	r24, Y+2	; 0x02
    b4a0:	9b 81       	ldd	r25, Y+3	; 0x03
    b4a2:	93 83       	std	Z+3, r25	; 0x03
    b4a4:	82 83       	std	Z+2, r24	; 0x02
    b4a6:	21 15       	cp	r18, r1
    b4a8:	31 05       	cpc	r19, r1
    b4aa:	29 f4       	brne	.+10     	; 0xb4b6 <free+0x92>
    b4ac:	f0 93 c6 0a 	sts	0x0AC6, r31	; 0x800ac6 <__flp+0x1>
    b4b0:	e0 93 c5 0a 	sts	0x0AC5, r30	; 0x800ac5 <__flp>
    b4b4:	3d c0       	rjmp	.+122    	; 0xb530 <free+0x10c>
    b4b6:	e9 01       	movw	r28, r18
    b4b8:	fb 83       	std	Y+3, r31	; 0x03
    b4ba:	ea 83       	std	Y+2, r30	; 0x02
    b4bc:	49 91       	ld	r20, Y+
    b4be:	59 91       	ld	r21, Y+
    b4c0:	c4 0f       	add	r28, r20
    b4c2:	d5 1f       	adc	r29, r21
    b4c4:	ec 17       	cp	r30, r28
    b4c6:	fd 07       	cpc	r31, r29
    b4c8:	61 f4       	brne	.+24     	; 0xb4e2 <free+0xbe>
    b4ca:	80 81       	ld	r24, Z
    b4cc:	91 81       	ldd	r25, Z+1	; 0x01
    b4ce:	84 0f       	add	r24, r20
    b4d0:	95 1f       	adc	r25, r21
    b4d2:	02 96       	adiw	r24, 0x02	; 2
    b4d4:	e9 01       	movw	r28, r18
    b4d6:	99 83       	std	Y+1, r25	; 0x01
    b4d8:	88 83       	st	Y, r24
    b4da:	82 81       	ldd	r24, Z+2	; 0x02
    b4dc:	93 81       	ldd	r25, Z+3	; 0x03
    b4de:	9b 83       	std	Y+3, r25	; 0x03
    b4e0:	8a 83       	std	Y+2, r24	; 0x02
    b4e2:	e0 e0       	ldi	r30, 0x00	; 0
    b4e4:	f0 e0       	ldi	r31, 0x00	; 0
    b4e6:	12 96       	adiw	r26, 0x02	; 2
    b4e8:	8d 91       	ld	r24, X+
    b4ea:	9c 91       	ld	r25, X
    b4ec:	13 97       	sbiw	r26, 0x03	; 3
    b4ee:	00 97       	sbiw	r24, 0x00	; 0
    b4f0:	19 f0       	breq	.+6      	; 0xb4f8 <free+0xd4>
    b4f2:	fd 01       	movw	r30, r26
    b4f4:	dc 01       	movw	r26, r24
    b4f6:	f7 cf       	rjmp	.-18     	; 0xb4e6 <free+0xc2>
    b4f8:	8d 91       	ld	r24, X+
    b4fa:	9c 91       	ld	r25, X
    b4fc:	11 97       	sbiw	r26, 0x01	; 1
    b4fe:	9d 01       	movw	r18, r26
    b500:	2e 5f       	subi	r18, 0xFE	; 254
    b502:	3f 4f       	sbci	r19, 0xFF	; 255
    b504:	82 0f       	add	r24, r18
    b506:	93 1f       	adc	r25, r19
    b508:	20 91 c3 0a 	lds	r18, 0x0AC3	; 0x800ac3 <__brkval>
    b50c:	30 91 c4 0a 	lds	r19, 0x0AC4	; 0x800ac4 <__brkval+0x1>
    b510:	28 17       	cp	r18, r24
    b512:	39 07       	cpc	r19, r25
    b514:	69 f4       	brne	.+26     	; 0xb530 <free+0x10c>
    b516:	30 97       	sbiw	r30, 0x00	; 0
    b518:	29 f4       	brne	.+10     	; 0xb524 <free+0x100>
    b51a:	10 92 c6 0a 	sts	0x0AC6, r1	; 0x800ac6 <__flp+0x1>
    b51e:	10 92 c5 0a 	sts	0x0AC5, r1	; 0x800ac5 <__flp>
    b522:	02 c0       	rjmp	.+4      	; 0xb528 <free+0x104>
    b524:	13 82       	std	Z+3, r1	; 0x03
    b526:	12 82       	std	Z+2, r1	; 0x02
    b528:	b0 93 c4 0a 	sts	0x0AC4, r27	; 0x800ac4 <__brkval+0x1>
    b52c:	a0 93 c3 0a 	sts	0x0AC3, r26	; 0x800ac3 <__brkval>
    b530:	df 91       	pop	r29
    b532:	cf 91       	pop	r28
    b534:	08 95       	ret

0000b536 <__ftoa_engine>:
    b536:	28 30       	cpi	r18, 0x08	; 8
    b538:	08 f0       	brcs	.+2      	; 0xb53c <__ftoa_engine+0x6>
    b53a:	27 e0       	ldi	r18, 0x07	; 7
    b53c:	33 27       	eor	r19, r19
    b53e:	da 01       	movw	r26, r20
    b540:	99 0f       	add	r25, r25
    b542:	31 1d       	adc	r19, r1
    b544:	87 fd       	sbrc	r24, 7
    b546:	91 60       	ori	r25, 0x01	; 1
    b548:	00 96       	adiw	r24, 0x00	; 0
    b54a:	61 05       	cpc	r22, r1
    b54c:	71 05       	cpc	r23, r1
    b54e:	39 f4       	brne	.+14     	; 0xb55e <__ftoa_engine+0x28>
    b550:	32 60       	ori	r19, 0x02	; 2
    b552:	2e 5f       	subi	r18, 0xFE	; 254
    b554:	3d 93       	st	X+, r19
    b556:	30 e3       	ldi	r19, 0x30	; 48
    b558:	2a 95       	dec	r18
    b55a:	e1 f7       	brne	.-8      	; 0xb554 <__ftoa_engine+0x1e>
    b55c:	08 95       	ret
    b55e:	9f 3f       	cpi	r25, 0xFF	; 255
    b560:	30 f0       	brcs	.+12     	; 0xb56e <__ftoa_engine+0x38>
    b562:	80 38       	cpi	r24, 0x80	; 128
    b564:	71 05       	cpc	r23, r1
    b566:	61 05       	cpc	r22, r1
    b568:	09 f0       	breq	.+2      	; 0xb56c <__ftoa_engine+0x36>
    b56a:	3c 5f       	subi	r19, 0xFC	; 252
    b56c:	3c 5f       	subi	r19, 0xFC	; 252
    b56e:	3d 93       	st	X+, r19
    b570:	91 30       	cpi	r25, 0x01	; 1
    b572:	08 f0       	brcs	.+2      	; 0xb576 <__ftoa_engine+0x40>
    b574:	80 68       	ori	r24, 0x80	; 128
    b576:	91 1d       	adc	r25, r1
    b578:	df 93       	push	r29
    b57a:	cf 93       	push	r28
    b57c:	1f 93       	push	r17
    b57e:	0f 93       	push	r16
    b580:	ff 92       	push	r15
    b582:	ef 92       	push	r14
    b584:	19 2f       	mov	r17, r25
    b586:	98 7f       	andi	r25, 0xF8	; 248
    b588:	96 95       	lsr	r25
    b58a:	e9 2f       	mov	r30, r25
    b58c:	96 95       	lsr	r25
    b58e:	96 95       	lsr	r25
    b590:	e9 0f       	add	r30, r25
    b592:	ff 27       	eor	r31, r31
    b594:	e0 5b       	subi	r30, 0xB0	; 176
    b596:	f6 4f       	sbci	r31, 0xF6	; 246
    b598:	99 27       	eor	r25, r25
    b59a:	33 27       	eor	r19, r19
    b59c:	ee 24       	eor	r14, r14
    b59e:	ff 24       	eor	r15, r15
    b5a0:	a7 01       	movw	r20, r14
    b5a2:	e7 01       	movw	r28, r14
    b5a4:	05 90       	lpm	r0, Z+
    b5a6:	08 94       	sec
    b5a8:	07 94       	ror	r0
    b5aa:	28 f4       	brcc	.+10     	; 0xb5b6 <__ftoa_engine+0x80>
    b5ac:	36 0f       	add	r19, r22
    b5ae:	e7 1e       	adc	r14, r23
    b5b0:	f8 1e       	adc	r15, r24
    b5b2:	49 1f       	adc	r20, r25
    b5b4:	51 1d       	adc	r21, r1
    b5b6:	66 0f       	add	r22, r22
    b5b8:	77 1f       	adc	r23, r23
    b5ba:	88 1f       	adc	r24, r24
    b5bc:	99 1f       	adc	r25, r25
    b5be:	06 94       	lsr	r0
    b5c0:	a1 f7       	brne	.-24     	; 0xb5aa <__ftoa_engine+0x74>
    b5c2:	05 90       	lpm	r0, Z+
    b5c4:	07 94       	ror	r0
    b5c6:	28 f4       	brcc	.+10     	; 0xb5d2 <__ftoa_engine+0x9c>
    b5c8:	e7 0e       	add	r14, r23
    b5ca:	f8 1e       	adc	r15, r24
    b5cc:	49 1f       	adc	r20, r25
    b5ce:	56 1f       	adc	r21, r22
    b5d0:	c1 1d       	adc	r28, r1
    b5d2:	77 0f       	add	r23, r23
    b5d4:	88 1f       	adc	r24, r24
    b5d6:	99 1f       	adc	r25, r25
    b5d8:	66 1f       	adc	r22, r22
    b5da:	06 94       	lsr	r0
    b5dc:	a1 f7       	brne	.-24     	; 0xb5c6 <__ftoa_engine+0x90>
    b5de:	05 90       	lpm	r0, Z+
    b5e0:	07 94       	ror	r0
    b5e2:	28 f4       	brcc	.+10     	; 0xb5ee <__ftoa_engine+0xb8>
    b5e4:	f8 0e       	add	r15, r24
    b5e6:	49 1f       	adc	r20, r25
    b5e8:	56 1f       	adc	r21, r22
    b5ea:	c7 1f       	adc	r28, r23
    b5ec:	d1 1d       	adc	r29, r1
    b5ee:	88 0f       	add	r24, r24
    b5f0:	99 1f       	adc	r25, r25
    b5f2:	66 1f       	adc	r22, r22
    b5f4:	77 1f       	adc	r23, r23
    b5f6:	06 94       	lsr	r0
    b5f8:	a1 f7       	brne	.-24     	; 0xb5e2 <__ftoa_engine+0xac>
    b5fa:	05 90       	lpm	r0, Z+
    b5fc:	07 94       	ror	r0
    b5fe:	20 f4       	brcc	.+8      	; 0xb608 <__ftoa_engine+0xd2>
    b600:	49 0f       	add	r20, r25
    b602:	56 1f       	adc	r21, r22
    b604:	c7 1f       	adc	r28, r23
    b606:	d8 1f       	adc	r29, r24
    b608:	99 0f       	add	r25, r25
    b60a:	66 1f       	adc	r22, r22
    b60c:	77 1f       	adc	r23, r23
    b60e:	88 1f       	adc	r24, r24
    b610:	06 94       	lsr	r0
    b612:	a9 f7       	brne	.-22     	; 0xb5fe <__ftoa_engine+0xc8>
    b614:	84 91       	lpm	r24, Z
    b616:	10 95       	com	r17
    b618:	17 70       	andi	r17, 0x07	; 7
    b61a:	41 f0       	breq	.+16     	; 0xb62c <__ftoa_engine+0xf6>
    b61c:	d6 95       	lsr	r29
    b61e:	c7 95       	ror	r28
    b620:	57 95       	ror	r21
    b622:	47 95       	ror	r20
    b624:	f7 94       	ror	r15
    b626:	e7 94       	ror	r14
    b628:	1a 95       	dec	r17
    b62a:	c1 f7       	brne	.-16     	; 0xb61c <__ftoa_engine+0xe6>
    b62c:	e6 ef       	ldi	r30, 0xF6	; 246
    b62e:	f8 e0       	ldi	r31, 0x08	; 8
    b630:	68 94       	set
    b632:	15 90       	lpm	r1, Z+
    b634:	15 91       	lpm	r17, Z+
    b636:	35 91       	lpm	r19, Z+
    b638:	65 91       	lpm	r22, Z+
    b63a:	95 91       	lpm	r25, Z+
    b63c:	05 90       	lpm	r0, Z+
    b63e:	7f e2       	ldi	r23, 0x2F	; 47
    b640:	73 95       	inc	r23
    b642:	e1 18       	sub	r14, r1
    b644:	f1 0a       	sbc	r15, r17
    b646:	43 0b       	sbc	r20, r19
    b648:	56 0b       	sbc	r21, r22
    b64a:	c9 0b       	sbc	r28, r25
    b64c:	d0 09       	sbc	r29, r0
    b64e:	c0 f7       	brcc	.-16     	; 0xb640 <__ftoa_engine+0x10a>
    b650:	e1 0c       	add	r14, r1
    b652:	f1 1e       	adc	r15, r17
    b654:	43 1f       	adc	r20, r19
    b656:	56 1f       	adc	r21, r22
    b658:	c9 1f       	adc	r28, r25
    b65a:	d0 1d       	adc	r29, r0
    b65c:	7e f4       	brtc	.+30     	; 0xb67c <__ftoa_engine+0x146>
    b65e:	70 33       	cpi	r23, 0x30	; 48
    b660:	11 f4       	brne	.+4      	; 0xb666 <__ftoa_engine+0x130>
    b662:	8a 95       	dec	r24
    b664:	e6 cf       	rjmp	.-52     	; 0xb632 <__ftoa_engine+0xfc>
    b666:	e8 94       	clt
    b668:	01 50       	subi	r16, 0x01	; 1
    b66a:	30 f0       	brcs	.+12     	; 0xb678 <__ftoa_engine+0x142>
    b66c:	08 0f       	add	r16, r24
    b66e:	0a f4       	brpl	.+2      	; 0xb672 <__ftoa_engine+0x13c>
    b670:	00 27       	eor	r16, r16
    b672:	02 17       	cp	r16, r18
    b674:	08 f4       	brcc	.+2      	; 0xb678 <__ftoa_engine+0x142>
    b676:	20 2f       	mov	r18, r16
    b678:	23 95       	inc	r18
    b67a:	02 2f       	mov	r16, r18
    b67c:	7a 33       	cpi	r23, 0x3A	; 58
    b67e:	28 f0       	brcs	.+10     	; 0xb68a <__ftoa_engine+0x154>
    b680:	79 e3       	ldi	r23, 0x39	; 57
    b682:	7d 93       	st	X+, r23
    b684:	2a 95       	dec	r18
    b686:	e9 f7       	brne	.-6      	; 0xb682 <__ftoa_engine+0x14c>
    b688:	10 c0       	rjmp	.+32     	; 0xb6aa <__ftoa_engine+0x174>
    b68a:	7d 93       	st	X+, r23
    b68c:	2a 95       	dec	r18
    b68e:	89 f6       	brne	.-94     	; 0xb632 <__ftoa_engine+0xfc>
    b690:	06 94       	lsr	r0
    b692:	97 95       	ror	r25
    b694:	67 95       	ror	r22
    b696:	37 95       	ror	r19
    b698:	17 95       	ror	r17
    b69a:	17 94       	ror	r1
    b69c:	e1 18       	sub	r14, r1
    b69e:	f1 0a       	sbc	r15, r17
    b6a0:	43 0b       	sbc	r20, r19
    b6a2:	56 0b       	sbc	r21, r22
    b6a4:	c9 0b       	sbc	r28, r25
    b6a6:	d0 09       	sbc	r29, r0
    b6a8:	98 f0       	brcs	.+38     	; 0xb6d0 <__ftoa_engine+0x19a>
    b6aa:	23 95       	inc	r18
    b6ac:	7e 91       	ld	r23, -X
    b6ae:	73 95       	inc	r23
    b6b0:	7a 33       	cpi	r23, 0x3A	; 58
    b6b2:	08 f0       	brcs	.+2      	; 0xb6b6 <__ftoa_engine+0x180>
    b6b4:	70 e3       	ldi	r23, 0x30	; 48
    b6b6:	7c 93       	st	X, r23
    b6b8:	20 13       	cpse	r18, r16
    b6ba:	b8 f7       	brcc	.-18     	; 0xb6aa <__ftoa_engine+0x174>
    b6bc:	7e 91       	ld	r23, -X
    b6be:	70 61       	ori	r23, 0x10	; 16
    b6c0:	7d 93       	st	X+, r23
    b6c2:	30 f0       	brcs	.+12     	; 0xb6d0 <__ftoa_engine+0x19a>
    b6c4:	83 95       	inc	r24
    b6c6:	71 e3       	ldi	r23, 0x31	; 49
    b6c8:	7d 93       	st	X+, r23
    b6ca:	70 e3       	ldi	r23, 0x30	; 48
    b6cc:	2a 95       	dec	r18
    b6ce:	e1 f7       	brne	.-8      	; 0xb6c8 <__ftoa_engine+0x192>
    b6d0:	11 24       	eor	r1, r1
    b6d2:	ef 90       	pop	r14
    b6d4:	ff 90       	pop	r15
    b6d6:	0f 91       	pop	r16
    b6d8:	1f 91       	pop	r17
    b6da:	cf 91       	pop	r28
    b6dc:	df 91       	pop	r29
    b6de:	99 27       	eor	r25, r25
    b6e0:	87 fd       	sbrc	r24, 7
    b6e2:	90 95       	com	r25
    b6e4:	08 95       	ret

0000b6e6 <strnlen_P>:
    b6e6:	fc 01       	movw	r30, r24
    b6e8:	05 90       	lpm	r0, Z+
    b6ea:	61 50       	subi	r22, 0x01	; 1
    b6ec:	70 40       	sbci	r23, 0x00	; 0
    b6ee:	01 10       	cpse	r0, r1
    b6f0:	d8 f7       	brcc	.-10     	; 0xb6e8 <strnlen_P+0x2>
    b6f2:	80 95       	com	r24
    b6f4:	90 95       	com	r25
    b6f6:	8e 0f       	add	r24, r30
    b6f8:	9f 1f       	adc	r25, r31
    b6fa:	08 95       	ret

0000b6fc <memcpy>:
    b6fc:	fb 01       	movw	r30, r22
    b6fe:	dc 01       	movw	r26, r24
    b700:	02 c0       	rjmp	.+4      	; 0xb706 <memcpy+0xa>
    b702:	01 90       	ld	r0, Z+
    b704:	0d 92       	st	X+, r0
    b706:	41 50       	subi	r20, 0x01	; 1
    b708:	50 40       	sbci	r21, 0x00	; 0
    b70a:	d8 f7       	brcc	.-10     	; 0xb702 <memcpy+0x6>
    b70c:	08 95       	ret

0000b70e <memset>:
    b70e:	dc 01       	movw	r26, r24
    b710:	01 c0       	rjmp	.+2      	; 0xb714 <memset+0x6>
    b712:	6d 93       	st	X+, r22
    b714:	41 50       	subi	r20, 0x01	; 1
    b716:	50 40       	sbci	r21, 0x00	; 0
    b718:	e0 f7       	brcc	.-8      	; 0xb712 <memset+0x4>
    b71a:	08 95       	ret

0000b71c <strnlen>:
    b71c:	fc 01       	movw	r30, r24
    b71e:	61 50       	subi	r22, 0x01	; 1
    b720:	70 40       	sbci	r23, 0x00	; 0
    b722:	01 90       	ld	r0, Z+
    b724:	01 10       	cpse	r0, r1
    b726:	d8 f7       	brcc	.-10     	; 0xb71e <strnlen+0x2>
    b728:	80 95       	com	r24
    b72a:	90 95       	com	r25
    b72c:	8e 0f       	add	r24, r30
    b72e:	9f 1f       	adc	r25, r31
    b730:	08 95       	ret

0000b732 <fputc>:
    b732:	0f 93       	push	r16
    b734:	1f 93       	push	r17
    b736:	cf 93       	push	r28
    b738:	df 93       	push	r29
    b73a:	fb 01       	movw	r30, r22
    b73c:	23 81       	ldd	r18, Z+3	; 0x03
    b73e:	21 fd       	sbrc	r18, 1
    b740:	03 c0       	rjmp	.+6      	; 0xb748 <fputc+0x16>
    b742:	8f ef       	ldi	r24, 0xFF	; 255
    b744:	9f ef       	ldi	r25, 0xFF	; 255
    b746:	2c c0       	rjmp	.+88     	; 0xb7a0 <fputc+0x6e>
    b748:	22 ff       	sbrs	r18, 2
    b74a:	16 c0       	rjmp	.+44     	; 0xb778 <fputc+0x46>
    b74c:	46 81       	ldd	r20, Z+6	; 0x06
    b74e:	57 81       	ldd	r21, Z+7	; 0x07
    b750:	24 81       	ldd	r18, Z+4	; 0x04
    b752:	35 81       	ldd	r19, Z+5	; 0x05
    b754:	42 17       	cp	r20, r18
    b756:	53 07       	cpc	r21, r19
    b758:	44 f4       	brge	.+16     	; 0xb76a <fputc+0x38>
    b75a:	a0 81       	ld	r26, Z
    b75c:	b1 81       	ldd	r27, Z+1	; 0x01
    b75e:	9d 01       	movw	r18, r26
    b760:	2f 5f       	subi	r18, 0xFF	; 255
    b762:	3f 4f       	sbci	r19, 0xFF	; 255
    b764:	31 83       	std	Z+1, r19	; 0x01
    b766:	20 83       	st	Z, r18
    b768:	8c 93       	st	X, r24
    b76a:	26 81       	ldd	r18, Z+6	; 0x06
    b76c:	37 81       	ldd	r19, Z+7	; 0x07
    b76e:	2f 5f       	subi	r18, 0xFF	; 255
    b770:	3f 4f       	sbci	r19, 0xFF	; 255
    b772:	37 83       	std	Z+7, r19	; 0x07
    b774:	26 83       	std	Z+6, r18	; 0x06
    b776:	14 c0       	rjmp	.+40     	; 0xb7a0 <fputc+0x6e>
    b778:	8b 01       	movw	r16, r22
    b77a:	ec 01       	movw	r28, r24
    b77c:	fb 01       	movw	r30, r22
    b77e:	00 84       	ldd	r0, Z+8	; 0x08
    b780:	f1 85       	ldd	r31, Z+9	; 0x09
    b782:	e0 2d       	mov	r30, r0
    b784:	19 95       	eicall
    b786:	89 2b       	or	r24, r25
    b788:	e1 f6       	brne	.-72     	; 0xb742 <fputc+0x10>
    b78a:	d8 01       	movw	r26, r16
    b78c:	16 96       	adiw	r26, 0x06	; 6
    b78e:	8d 91       	ld	r24, X+
    b790:	9c 91       	ld	r25, X
    b792:	17 97       	sbiw	r26, 0x07	; 7
    b794:	01 96       	adiw	r24, 0x01	; 1
    b796:	17 96       	adiw	r26, 0x07	; 7
    b798:	9c 93       	st	X, r25
    b79a:	8e 93       	st	-X, r24
    b79c:	16 97       	sbiw	r26, 0x06	; 6
    b79e:	ce 01       	movw	r24, r28
    b7a0:	df 91       	pop	r29
    b7a2:	cf 91       	pop	r28
    b7a4:	1f 91       	pop	r17
    b7a6:	0f 91       	pop	r16
    b7a8:	08 95       	ret

0000b7aa <vsnprintf>:
    b7aa:	0f 93       	push	r16
    b7ac:	1f 93       	push	r17
    b7ae:	cf 93       	push	r28
    b7b0:	df 93       	push	r29
    b7b2:	cd b7       	in	r28, 0x3d	; 61
    b7b4:	de b7       	in	r29, 0x3e	; 62
    b7b6:	2e 97       	sbiw	r28, 0x0e	; 14
    b7b8:	0f b6       	in	r0, 0x3f	; 63
    b7ba:	f8 94       	cli
    b7bc:	de bf       	out	0x3e, r29	; 62
    b7be:	0f be       	out	0x3f, r0	; 63
    b7c0:	cd bf       	out	0x3d, r28	; 61
    b7c2:	8c 01       	movw	r16, r24
    b7c4:	fa 01       	movw	r30, r20
    b7c6:	86 e0       	ldi	r24, 0x06	; 6
    b7c8:	8c 83       	std	Y+4, r24	; 0x04
    b7ca:	1a 83       	std	Y+2, r17	; 0x02
    b7cc:	09 83       	std	Y+1, r16	; 0x01
    b7ce:	77 ff       	sbrs	r23, 7
    b7d0:	02 c0       	rjmp	.+4      	; 0xb7d6 <vsnprintf+0x2c>
    b7d2:	60 e0       	ldi	r22, 0x00	; 0
    b7d4:	70 e8       	ldi	r23, 0x80	; 128
    b7d6:	cb 01       	movw	r24, r22
    b7d8:	01 97       	sbiw	r24, 0x01	; 1
    b7da:	9e 83       	std	Y+6, r25	; 0x06
    b7dc:	8d 83       	std	Y+5, r24	; 0x05
    b7de:	a9 01       	movw	r20, r18
    b7e0:	bf 01       	movw	r22, r30
    b7e2:	ce 01       	movw	r24, r28
    b7e4:	01 96       	adiw	r24, 0x01	; 1
    b7e6:	c4 d9       	rcall	.-3192   	; 0xab70 <vfprintf>
    b7e8:	4d 81       	ldd	r20, Y+5	; 0x05
    b7ea:	5e 81       	ldd	r21, Y+6	; 0x06
    b7ec:	57 fd       	sbrc	r21, 7
    b7ee:	0a c0       	rjmp	.+20     	; 0xb804 <vsnprintf+0x5a>
    b7f0:	2f 81       	ldd	r18, Y+7	; 0x07
    b7f2:	38 85       	ldd	r19, Y+8	; 0x08
    b7f4:	42 17       	cp	r20, r18
    b7f6:	53 07       	cpc	r21, r19
    b7f8:	0c f4       	brge	.+2      	; 0xb7fc <vsnprintf+0x52>
    b7fa:	9a 01       	movw	r18, r20
    b7fc:	f8 01       	movw	r30, r16
    b7fe:	e2 0f       	add	r30, r18
    b800:	f3 1f       	adc	r31, r19
    b802:	10 82       	st	Z, r1
    b804:	2e 96       	adiw	r28, 0x0e	; 14
    b806:	0f b6       	in	r0, 0x3f	; 63
    b808:	f8 94       	cli
    b80a:	de bf       	out	0x3e, r29	; 62
    b80c:	0f be       	out	0x3f, r0	; 63
    b80e:	cd bf       	out	0x3d, r28	; 61
    b810:	df 91       	pop	r29
    b812:	cf 91       	pop	r28
    b814:	1f 91       	pop	r17
    b816:	0f 91       	pop	r16
    b818:	08 95       	ret

0000b81a <__ultoa_invert>:
    b81a:	fa 01       	movw	r30, r20
    b81c:	aa 27       	eor	r26, r26
    b81e:	28 30       	cpi	r18, 0x08	; 8
    b820:	51 f1       	breq	.+84     	; 0xb876 <__ultoa_invert+0x5c>
    b822:	20 31       	cpi	r18, 0x10	; 16
    b824:	81 f1       	breq	.+96     	; 0xb886 <__ultoa_invert+0x6c>
    b826:	e8 94       	clt
    b828:	6f 93       	push	r22
    b82a:	6e 7f       	andi	r22, 0xFE	; 254
    b82c:	6e 5f       	subi	r22, 0xFE	; 254
    b82e:	7f 4f       	sbci	r23, 0xFF	; 255
    b830:	8f 4f       	sbci	r24, 0xFF	; 255
    b832:	9f 4f       	sbci	r25, 0xFF	; 255
    b834:	af 4f       	sbci	r26, 0xFF	; 255
    b836:	b1 e0       	ldi	r27, 0x01	; 1
    b838:	3e d0       	rcall	.+124    	; 0xb8b6 <__ultoa_invert+0x9c>
    b83a:	b4 e0       	ldi	r27, 0x04	; 4
    b83c:	3c d0       	rcall	.+120    	; 0xb8b6 <__ultoa_invert+0x9c>
    b83e:	67 0f       	add	r22, r23
    b840:	78 1f       	adc	r23, r24
    b842:	89 1f       	adc	r24, r25
    b844:	9a 1f       	adc	r25, r26
    b846:	a1 1d       	adc	r26, r1
    b848:	68 0f       	add	r22, r24
    b84a:	79 1f       	adc	r23, r25
    b84c:	8a 1f       	adc	r24, r26
    b84e:	91 1d       	adc	r25, r1
    b850:	a1 1d       	adc	r26, r1
    b852:	6a 0f       	add	r22, r26
    b854:	71 1d       	adc	r23, r1
    b856:	81 1d       	adc	r24, r1
    b858:	91 1d       	adc	r25, r1
    b85a:	a1 1d       	adc	r26, r1
    b85c:	20 d0       	rcall	.+64     	; 0xb89e <__ultoa_invert+0x84>
    b85e:	09 f4       	brne	.+2      	; 0xb862 <__ultoa_invert+0x48>
    b860:	68 94       	set
    b862:	3f 91       	pop	r19
    b864:	2a e0       	ldi	r18, 0x0A	; 10
    b866:	26 9f       	mul	r18, r22
    b868:	11 24       	eor	r1, r1
    b86a:	30 19       	sub	r19, r0
    b86c:	30 5d       	subi	r19, 0xD0	; 208
    b86e:	31 93       	st	Z+, r19
    b870:	de f6       	brtc	.-74     	; 0xb828 <__ultoa_invert+0xe>
    b872:	cf 01       	movw	r24, r30
    b874:	08 95       	ret
    b876:	46 2f       	mov	r20, r22
    b878:	47 70       	andi	r20, 0x07	; 7
    b87a:	40 5d       	subi	r20, 0xD0	; 208
    b87c:	41 93       	st	Z+, r20
    b87e:	b3 e0       	ldi	r27, 0x03	; 3
    b880:	0f d0       	rcall	.+30     	; 0xb8a0 <__ultoa_invert+0x86>
    b882:	c9 f7       	brne	.-14     	; 0xb876 <__ultoa_invert+0x5c>
    b884:	f6 cf       	rjmp	.-20     	; 0xb872 <__ultoa_invert+0x58>
    b886:	46 2f       	mov	r20, r22
    b888:	4f 70       	andi	r20, 0x0F	; 15
    b88a:	40 5d       	subi	r20, 0xD0	; 208
    b88c:	4a 33       	cpi	r20, 0x3A	; 58
    b88e:	18 f0       	brcs	.+6      	; 0xb896 <__ultoa_invert+0x7c>
    b890:	49 5d       	subi	r20, 0xD9	; 217
    b892:	31 fd       	sbrc	r19, 1
    b894:	40 52       	subi	r20, 0x20	; 32
    b896:	41 93       	st	Z+, r20
    b898:	02 d0       	rcall	.+4      	; 0xb89e <__ultoa_invert+0x84>
    b89a:	a9 f7       	brne	.-22     	; 0xb886 <__ultoa_invert+0x6c>
    b89c:	ea cf       	rjmp	.-44     	; 0xb872 <__ultoa_invert+0x58>
    b89e:	b4 e0       	ldi	r27, 0x04	; 4
    b8a0:	a6 95       	lsr	r26
    b8a2:	97 95       	ror	r25
    b8a4:	87 95       	ror	r24
    b8a6:	77 95       	ror	r23
    b8a8:	67 95       	ror	r22
    b8aa:	ba 95       	dec	r27
    b8ac:	c9 f7       	brne	.-14     	; 0xb8a0 <__ultoa_invert+0x86>
    b8ae:	00 97       	sbiw	r24, 0x00	; 0
    b8b0:	61 05       	cpc	r22, r1
    b8b2:	71 05       	cpc	r23, r1
    b8b4:	08 95       	ret
    b8b6:	9b 01       	movw	r18, r22
    b8b8:	ac 01       	movw	r20, r24
    b8ba:	0a 2e       	mov	r0, r26
    b8bc:	06 94       	lsr	r0
    b8be:	57 95       	ror	r21
    b8c0:	47 95       	ror	r20
    b8c2:	37 95       	ror	r19
    b8c4:	27 95       	ror	r18
    b8c6:	ba 95       	dec	r27
    b8c8:	c9 f7       	brne	.-14     	; 0xb8bc <__ultoa_invert+0xa2>
    b8ca:	62 0f       	add	r22, r18
    b8cc:	73 1f       	adc	r23, r19
    b8ce:	84 1f       	adc	r24, r20
    b8d0:	95 1f       	adc	r25, r21
    b8d2:	a0 1d       	adc	r26, r0
    b8d4:	08 95       	ret

0000b8d6 <eeprom_read_block>:
    b8d6:	dc 01       	movw	r26, r24
    b8d8:	cb 01       	movw	r24, r22

0000b8da <eeprom_read_blraw>:
    b8da:	fc 01       	movw	r30, r24
    b8dc:	f9 99       	sbic	0x1f, 1	; 31
    b8de:	fe cf       	rjmp	.-4      	; 0xb8dc <eeprom_read_blraw+0x2>
    b8e0:	06 c0       	rjmp	.+12     	; 0xb8ee <eeprom_read_blraw+0x14>
    b8e2:	f2 bd       	out	0x22, r31	; 34
    b8e4:	e1 bd       	out	0x21, r30	; 33
    b8e6:	f8 9a       	sbi	0x1f, 0	; 31
    b8e8:	31 96       	adiw	r30, 0x01	; 1
    b8ea:	00 b4       	in	r0, 0x20	; 32
    b8ec:	0d 92       	st	X+, r0
    b8ee:	41 50       	subi	r20, 0x01	; 1
    b8f0:	50 40       	sbci	r21, 0x00	; 0
    b8f2:	b8 f7       	brcc	.-18     	; 0xb8e2 <eeprom_read_blraw+0x8>
    b8f4:	08 95       	ret

0000b8f6 <eeprom_update_block>:
    b8f6:	dc 01       	movw	r26, r24
    b8f8:	a4 0f       	add	r26, r20
    b8fa:	b5 1f       	adc	r27, r21
    b8fc:	41 50       	subi	r20, 0x01	; 1
    b8fe:	50 40       	sbci	r21, 0x00	; 0
    b900:	40 f0       	brcs	.+16     	; 0xb912 <eeprom_update_block+0x1c>
    b902:	cb 01       	movw	r24, r22
    b904:	84 0f       	add	r24, r20
    b906:	95 1f       	adc	r25, r21
    b908:	2e 91       	ld	r18, -X
    b90a:	05 d0       	rcall	.+10     	; 0xb916 <eeprom_update_r18>
    b90c:	41 50       	subi	r20, 0x01	; 1
    b90e:	50 40       	sbci	r21, 0x00	; 0
    b910:	d8 f7       	brcc	.-10     	; 0xb908 <eeprom_update_block+0x12>
    b912:	08 95       	ret

0000b914 <eeprom_update_byte>:
    b914:	26 2f       	mov	r18, r22

0000b916 <eeprom_update_r18>:
    b916:	f9 99       	sbic	0x1f, 1	; 31
    b918:	fe cf       	rjmp	.-4      	; 0xb916 <eeprom_update_r18>
    b91a:	92 bd       	out	0x22, r25	; 34
    b91c:	81 bd       	out	0x21, r24	; 33
    b91e:	f8 9a       	sbi	0x1f, 0	; 31
    b920:	01 97       	sbiw	r24, 0x01	; 1
    b922:	00 b4       	in	r0, 0x20	; 32
    b924:	02 16       	cp	r0, r18
    b926:	39 f0       	breq	.+14     	; 0xb936 <eeprom_update_r18+0x20>
    b928:	1f ba       	out	0x1f, r1	; 31
    b92a:	20 bd       	out	0x20, r18	; 32
    b92c:	0f b6       	in	r0, 0x3f	; 63
    b92e:	f8 94       	cli
    b930:	fa 9a       	sbi	0x1f, 2	; 31
    b932:	f9 9a       	sbi	0x1f, 1	; 31
    b934:	0f be       	out	0x3f, r0	; 63
    b936:	08 95       	ret

0000b938 <eeprom_write_block>:
    b938:	dc 01       	movw	r26, r24
    b93a:	cb 01       	movw	r24, r22
    b93c:	02 c0       	rjmp	.+4      	; 0xb942 <eeprom_write_block+0xa>
    b93e:	2d 91       	ld	r18, X+
    b940:	05 d0       	rcall	.+10     	; 0xb94c <eeprom_write_r18>
    b942:	41 50       	subi	r20, 0x01	; 1
    b944:	50 40       	sbci	r21, 0x00	; 0
    b946:	d8 f7       	brcc	.-10     	; 0xb93e <eeprom_write_block+0x6>
    b948:	08 95       	ret

0000b94a <eeprom_write_byte>:
    b94a:	26 2f       	mov	r18, r22

0000b94c <eeprom_write_r18>:
    b94c:	f9 99       	sbic	0x1f, 1	; 31
    b94e:	fe cf       	rjmp	.-4      	; 0xb94c <eeprom_write_r18>
    b950:	1f ba       	out	0x1f, r1	; 31
    b952:	92 bd       	out	0x22, r25	; 34
    b954:	81 bd       	out	0x21, r24	; 33
    b956:	20 bd       	out	0x20, r18	; 32
    b958:	0f b6       	in	r0, 0x3f	; 63
    b95a:	f8 94       	cli
    b95c:	fa 9a       	sbi	0x1f, 2	; 31
    b95e:	f9 9a       	sbi	0x1f, 1	; 31
    b960:	0f be       	out	0x3f, r0	; 63
    b962:	01 96       	adiw	r24, 0x01	; 1
    b964:	08 95       	ret

0000b966 <_exit>:
    b966:	f8 94       	cli

0000b968 <__stop_program>:
    b968:	ff cf       	rjmp	.-2      	; 0xb968 <__stop_program>
