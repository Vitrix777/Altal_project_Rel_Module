
mega2560_Rtos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000050c  00800200  0000b72c  0000b7c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000b72c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000447  0080070c  0080070c  0000bccc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000bccc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000bd28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000aa8  00000000  00000000  0000bd68  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000119b2  00000000  00000000  0000c810  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e95  00000000  00000000  0001e1c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008d49  00000000  00000000  00021057  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000296c  00000000  00000000  00029da0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003a53  00000000  00000000  0002c70c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f4bb  00000000  00000000  0003015f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ca0  00000000  00000000  0003f61a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6c c5       	rjmp	.+2776   	; 0xada <__ctors_end>
       2:	00 00       	nop
       4:	8b c5       	rjmp	.+2838   	; 0xb1c <__bad_interrupt>
       6:	00 00       	nop
       8:	89 c5       	rjmp	.+2834   	; 0xb1c <__bad_interrupt>
       a:	00 00       	nop
       c:	87 c5       	rjmp	.+2830   	; 0xb1c <__bad_interrupt>
       e:	00 00       	nop
      10:	85 c5       	rjmp	.+2826   	; 0xb1c <__bad_interrupt>
      12:	00 00       	nop
      14:	83 c5       	rjmp	.+2822   	; 0xb1c <__bad_interrupt>
      16:	00 00       	nop
      18:	81 c5       	rjmp	.+2818   	; 0xb1c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7f c5       	rjmp	.+2814   	; 0xb1c <__bad_interrupt>
      1e:	00 00       	nop
      20:	7d c5       	rjmp	.+2810   	; 0xb1c <__bad_interrupt>
      22:	00 00       	nop
      24:	7b c5       	rjmp	.+2806   	; 0xb1c <__bad_interrupt>
      26:	00 00       	nop
      28:	79 c5       	rjmp	.+2802   	; 0xb1c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	77 c5       	rjmp	.+2798   	; 0xb1c <__bad_interrupt>
      2e:	00 00       	nop
      30:	75 c5       	rjmp	.+2794   	; 0xb1c <__bad_interrupt>
      32:	00 00       	nop
      34:	73 c5       	rjmp	.+2790   	; 0xb1c <__bad_interrupt>
      36:	00 00       	nop
      38:	71 c5       	rjmp	.+2786   	; 0xb1c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6f c5       	rjmp	.+2782   	; 0xb1c <__bad_interrupt>
      3e:	00 00       	nop
      40:	6d c5       	rjmp	.+2778   	; 0xb1c <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 c6 21 	jmp	0x438c	; 0x438c <__vector_17>
      48:	69 c5       	rjmp	.+2770   	; 0xb1c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	67 c5       	rjmp	.+2766   	; 0xb1c <__bad_interrupt>
      4e:	00 00       	nop
      50:	65 c5       	rjmp	.+2762   	; 0xb1c <__bad_interrupt>
      52:	00 00       	nop
      54:	63 c5       	rjmp	.+2758   	; 0xb1c <__bad_interrupt>
      56:	00 00       	nop
      58:	61 c5       	rjmp	.+2754   	; 0xb1c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5f c5       	rjmp	.+2750   	; 0xb1c <__bad_interrupt>
      5e:	00 00       	nop
      60:	5d c5       	rjmp	.+2746   	; 0xb1c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 8f 10 	jmp	0x211e	; 0x211e <__vector_25>
      68:	0c 94 17 11 	jmp	0x222e	; 0x222e <__vector_26>
      6c:	57 c5       	rjmp	.+2734   	; 0xb1c <__bad_interrupt>
      6e:	00 00       	nop
      70:	55 c5       	rjmp	.+2730   	; 0xb1c <__bad_interrupt>
      72:	00 00       	nop
      74:	53 c5       	rjmp	.+2726   	; 0xb1c <__bad_interrupt>
      76:	00 00       	nop
      78:	51 c5       	rjmp	.+2722   	; 0xb1c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4f c5       	rjmp	.+2718   	; 0xb1c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c7       	rjmp	.+3754   	; 0xf2c <__vector_32>
      82:	00 00       	nop
      84:	4b c5       	rjmp	.+2710   	; 0xb1c <__bad_interrupt>
      86:	00 00       	nop
      88:	49 c5       	rjmp	.+2706   	; 0xb1c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	47 c5       	rjmp	.+2702   	; 0xb1c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__vector_36>
      94:	0c 94 bf 11 	jmp	0x237e	; 0x237e <__vector_37>
      98:	41 c5       	rjmp	.+2690   	; 0xb1c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	3f c5       	rjmp	.+2686   	; 0xb1c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3d c5       	rjmp	.+2682   	; 0xb1c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3b c5       	rjmp	.+2678   	; 0xb1c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	39 c5       	rjmp	.+2674   	; 0xb1c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	37 c5       	rjmp	.+2670   	; 0xb1c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	35 c5       	rjmp	.+2666   	; 0xb1c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	33 c5       	rjmp	.+2662   	; 0xb1c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	31 c5       	rjmp	.+2658   	; 0xb1c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2f c5       	rjmp	.+2654   	; 0xb1c <__bad_interrupt>
      be:	00 00       	nop
      c0:	2d c5       	rjmp	.+2650   	; 0xb1c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2b c5       	rjmp	.+2646   	; 0xb1c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	29 c5       	rjmp	.+2642   	; 0xb1c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__vector_51>
      d0:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__vector_52>
      d4:	23 c5       	rjmp	.+2630   	; 0xb1c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <__vector_54>
      dc:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__vector_55>
      e0:	1d c5       	rjmp	.+2618   	; 0xb1c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0c 0d       	add	r16, r12
      e6:	0c 0d       	add	r16, r12
      e8:	11 0d       	add	r17, r1
      ea:	11 0d       	add	r17, r1
      ec:	16 0d       	add	r17, r6
      ee:	16 0d       	add	r17, r6
      f0:	1b 0d       	add	r17, r11
      f2:	1b 0d       	add	r17, r11
      f4:	7d 0d       	add	r23, r13
      f6:	7d 0d       	add	r23, r13
      f8:	78 0d       	add	r23, r8
      fa:	78 0d       	add	r23, r8
      fc:	73 0d       	add	r23, r3
      fe:	73 0d       	add	r23, r3
     100:	6e 0d       	add	r22, r14
     102:	6e 0d       	add	r22, r14
     104:	31 0e       	add	r3, r17
     106:	31 0e       	add	r3, r17
     108:	38 0e       	add	r3, r24
     10a:	38 0e       	add	r3, r24
     10c:	3f 0e       	add	r3, r31
     10e:	3f 0e       	add	r3, r31
     110:	46 0e       	add	r4, r22
     112:	46 0e       	add	r4, r22
     114:	bd 0e       	add	r11, r29
     116:	ee 0e       	add	r14, r30
     118:	28 0f       	add	r18, r24
     11a:	59 0f       	add	r21, r25
     11c:	93 0f       	add	r25, r19
     11e:	c4 0f       	add	r28, r20
     120:	02 10       	cpse	r0, r2
     122:	33 10       	cpse	r3, r3
     124:	39 1d       	adc	r19, r9
     126:	39 1d       	adc	r19, r9
     128:	39 1d       	adc	r19, r9
     12a:	84 1d       	adc	r24, r4
     12c:	6d 1d       	adc	r22, r13
     12e:	81 1d       	adc	r24, r1
     130:	39 1d       	adc	r19, r9
     132:	39 1d       	adc	r19, r9
     134:	84 1d       	adc	r24, r4
     136:	6d 1d       	adc	r22, r13
     138:	2b 26       	eor	r2, r27
     13a:	3f 25       	eor	r19, r15
     13c:	3f 25       	eor	r19, r15
     13e:	48 27       	eor	r20, r24
     140:	48 27       	eor	r20, r24
     142:	48 27       	eor	r20, r24
     144:	48 27       	eor	r20, r24
     146:	48 27       	eor	r20, r24
     148:	48 27       	eor	r20, r24
     14a:	48 27       	eor	r20, r24
     14c:	2f 26       	eor	r2, r31
     14e:	44 25       	eor	r20, r4
     150:	44 25       	eor	r20, r4
     152:	48 27       	eor	r20, r24
     154:	48 27       	eor	r20, r24
     156:	48 27       	eor	r20, r24
     158:	48 27       	eor	r20, r24
     15a:	48 27       	eor	r20, r24
     15c:	48 27       	eor	r20, r24
     15e:	48 27       	eor	r20, r24
     160:	33 26       	eor	r3, r19
     162:	49 25       	eor	r20, r9
     164:	49 25       	eor	r20, r9
     166:	48 27       	eor	r20, r24
     168:	48 27       	eor	r20, r24
     16a:	48 27       	eor	r20, r24
     16c:	48 27       	eor	r20, r24
     16e:	48 27       	eor	r20, r24
     170:	48 27       	eor	r20, r24
     172:	48 27       	eor	r20, r24
     174:	37 26       	eor	r3, r23
     176:	4e 25       	eor	r20, r14
     178:	4e 25       	eor	r20, r14
     17a:	48 27       	eor	r20, r24
     17c:	48 27       	eor	r20, r24
     17e:	48 27       	eor	r20, r24
     180:	48 27       	eor	r20, r24
     182:	48 27       	eor	r20, r24
     184:	48 27       	eor	r20, r24
     186:	48 27       	eor	r20, r24
     188:	3b 26       	eor	r3, r27
     18a:	53 25       	eor	r21, r3
     18c:	53 25       	eor	r21, r3
     18e:	48 27       	eor	r20, r24
     190:	48 27       	eor	r20, r24
     192:	48 27       	eor	r20, r24
     194:	48 27       	eor	r20, r24
     196:	48 27       	eor	r20, r24
     198:	48 27       	eor	r20, r24
     19a:	48 27       	eor	r20, r24
     19c:	3f 26       	eor	r3, r31
     19e:	58 25       	eor	r21, r8
     1a0:	58 25       	eor	r21, r8
     1a2:	48 27       	eor	r20, r24
     1a4:	48 27       	eor	r20, r24
     1a6:	48 27       	eor	r20, r24
     1a8:	48 27       	eor	r20, r24
     1aa:	48 27       	eor	r20, r24
     1ac:	48 27       	eor	r20, r24
     1ae:	48 27       	eor	r20, r24
     1b0:	43 26       	eor	r4, r19
     1b2:	5d 25       	eor	r21, r13
     1b4:	5d 25       	eor	r21, r13
     1b6:	48 27       	eor	r20, r24
     1b8:	48 27       	eor	r20, r24
     1ba:	48 27       	eor	r20, r24
     1bc:	48 27       	eor	r20, r24
     1be:	48 27       	eor	r20, r24
     1c0:	48 27       	eor	r20, r24
     1c2:	48 27       	eor	r20, r24
     1c4:	47 26       	eor	r4, r23
     1c6:	6d 25       	eor	r22, r13
     1c8:	6d 25       	eor	r22, r13
     1ca:	48 27       	eor	r20, r24
     1cc:	48 27       	eor	r20, r24
     1ce:	48 27       	eor	r20, r24
     1d0:	48 27       	eor	r20, r24
     1d2:	48 27       	eor	r20, r24
     1d4:	48 27       	eor	r20, r24
     1d6:	48 27       	eor	r20, r24
     1d8:	4b 26       	eor	r4, r27
     1da:	7d 25       	eor	r23, r13
     1dc:	7d 25       	eor	r23, r13
     1de:	48 27       	eor	r20, r24
     1e0:	48 27       	eor	r20, r24
     1e2:	48 27       	eor	r20, r24
     1e4:	48 27       	eor	r20, r24
     1e6:	48 27       	eor	r20, r24
     1e8:	48 27       	eor	r20, r24
     1ea:	48 27       	eor	r20, r24
     1ec:	4f 26       	eor	r4, r31
     1ee:	8d 25       	eor	r24, r13
     1f0:	8d 25       	eor	r24, r13
     1f2:	48 27       	eor	r20, r24
     1f4:	48 27       	eor	r20, r24
     1f6:	48 27       	eor	r20, r24
     1f8:	48 27       	eor	r20, r24
     1fa:	48 27       	eor	r20, r24
     1fc:	48 27       	eor	r20, r24
     1fe:	48 27       	eor	r20, r24
     200:	53 26       	eor	r5, r19
     202:	9d 25       	eor	r25, r13
     204:	9d 25       	eor	r25, r13
     206:	48 27       	eor	r20, r24
     208:	48 27       	eor	r20, r24
     20a:	48 27       	eor	r20, r24
     20c:	48 27       	eor	r20, r24
     20e:	48 27       	eor	r20, r24
     210:	48 27       	eor	r20, r24
     212:	48 27       	eor	r20, r24
     214:	57 26       	eor	r5, r23
     216:	a2 25       	eor	r26, r2
     218:	a2 25       	eor	r26, r2
     21a:	48 27       	eor	r20, r24
     21c:	48 27       	eor	r20, r24
     21e:	48 27       	eor	r20, r24
     220:	48 27       	eor	r20, r24
     222:	48 27       	eor	r20, r24
     224:	48 27       	eor	r20, r24
     226:	48 27       	eor	r20, r24
     228:	5b 26       	eor	r5, r27
     22a:	b2 25       	eor	r27, r2
     22c:	b2 25       	eor	r27, r2
     22e:	48 27       	eor	r20, r24
     230:	48 27       	eor	r20, r24
     232:	48 27       	eor	r20, r24
     234:	48 27       	eor	r20, r24
     236:	48 27       	eor	r20, r24
     238:	48 27       	eor	r20, r24
     23a:	48 27       	eor	r20, r24
     23c:	5f 26       	eor	r5, r31
     23e:	c1 25       	eor	r28, r1
     240:	c1 25       	eor	r28, r1
     242:	48 27       	eor	r20, r24
     244:	48 27       	eor	r20, r24
     246:	48 27       	eor	r20, r24
     248:	48 27       	eor	r20, r24
     24a:	48 27       	eor	r20, r24
     24c:	48 27       	eor	r20, r24
     24e:	48 27       	eor	r20, r24
     250:	63 26       	eor	r6, r19
     252:	d1 25       	eor	r29, r1
     254:	d1 25       	eor	r29, r1
     256:	48 27       	eor	r20, r24
     258:	48 27       	eor	r20, r24
     25a:	48 27       	eor	r20, r24
     25c:	48 27       	eor	r20, r24
     25e:	48 27       	eor	r20, r24
     260:	48 27       	eor	r20, r24
     262:	48 27       	eor	r20, r24
     264:	67 26       	eor	r6, r23
     266:	e1 25       	eor	r30, r1
     268:	e1 25       	eor	r30, r1
     26a:	48 27       	eor	r20, r24
     26c:	48 27       	eor	r20, r24
     26e:	48 27       	eor	r20, r24
     270:	48 27       	eor	r20, r24
     272:	48 27       	eor	r20, r24
     274:	48 27       	eor	r20, r24
     276:	48 27       	eor	r20, r24
     278:	6b 26       	eor	r6, r27
     27a:	f1 25       	eor	r31, r1
     27c:	f1 25       	eor	r31, r1
     27e:	48 27       	eor	r20, r24
     280:	48 27       	eor	r20, r24
     282:	48 27       	eor	r20, r24
     284:	48 27       	eor	r20, r24
     286:	48 27       	eor	r20, r24
     288:	48 27       	eor	r20, r24
     28a:	48 27       	eor	r20, r24
     28c:	6f 26       	eor	r6, r31
     28e:	01 26       	eor	r0, r17
     290:	01 26       	eor	r0, r17
     292:	48 27       	eor	r20, r24
     294:	48 27       	eor	r20, r24
     296:	48 27       	eor	r20, r24
     298:	48 27       	eor	r20, r24
     29a:	48 27       	eor	r20, r24
     29c:	48 27       	eor	r20, r24
     29e:	48 27       	eor	r20, r24
     2a0:	73 26       	eor	r7, r19
     2a2:	11 26       	eor	r1, r17
     2a4:	11 26       	eor	r1, r17
     2a6:	48 27       	eor	r20, r24
     2a8:	48 27       	eor	r20, r24
     2aa:	48 27       	eor	r20, r24
     2ac:	48 27       	eor	r20, r24
     2ae:	48 27       	eor	r20, r24
     2b0:	48 27       	eor	r20, r24
     2b2:	48 27       	eor	r20, r24
     2b4:	77 26       	eor	r7, r23
     2b6:	21 26       	eor	r2, r17
     2b8:	21 26       	eor	r2, r17
     2ba:	48 27       	eor	r20, r24
     2bc:	48 27       	eor	r20, r24
     2be:	48 27       	eor	r20, r24
     2c0:	48 27       	eor	r20, r24
     2c2:	48 27       	eor	r20, r24
     2c4:	48 27       	eor	r20, r24
     2c6:	48 27       	eor	r20, r24
     2c8:	7b 26       	eor	r7, r27
     2ca:	48 27       	eor	r20, r24
     2cc:	48 27       	eor	r20, r24
     2ce:	48 27       	eor	r20, r24
     2d0:	48 27       	eor	r20, r24
     2d2:	48 27       	eor	r20, r24
     2d4:	48 27       	eor	r20, r24
     2d6:	48 27       	eor	r20, r24
     2d8:	48 27       	eor	r20, r24
     2da:	48 27       	eor	r20, r24
     2dc:	7f 26       	eor	r7, r31
     2de:	48 27       	eor	r20, r24
     2e0:	48 27       	eor	r20, r24
     2e2:	48 27       	eor	r20, r24
     2e4:	48 27       	eor	r20, r24
     2e6:	48 27       	eor	r20, r24
     2e8:	48 27       	eor	r20, r24
     2ea:	48 27       	eor	r20, r24
     2ec:	48 27       	eor	r20, r24
     2ee:	48 27       	eor	r20, r24
     2f0:	83 26       	eor	r8, r19
     2f2:	48 27       	eor	r20, r24
     2f4:	48 27       	eor	r20, r24
     2f6:	48 27       	eor	r20, r24
     2f8:	48 27       	eor	r20, r24
     2fa:	48 27       	eor	r20, r24
     2fc:	48 27       	eor	r20, r24
     2fe:	48 27       	eor	r20, r24
     300:	48 27       	eor	r20, r24
     302:	48 27       	eor	r20, r24
     304:	87 26       	eor	r8, r23
     306:	48 27       	eor	r20, r24
     308:	48 27       	eor	r20, r24
     30a:	48 27       	eor	r20, r24
     30c:	48 27       	eor	r20, r24
     30e:	48 27       	eor	r20, r24
     310:	48 27       	eor	r20, r24
     312:	48 27       	eor	r20, r24
     314:	48 27       	eor	r20, r24
     316:	48 27       	eor	r20, r24
     318:	8b 26       	eor	r8, r27
     31a:	48 27       	eor	r20, r24
     31c:	48 27       	eor	r20, r24
     31e:	48 27       	eor	r20, r24
     320:	48 27       	eor	r20, r24
     322:	48 27       	eor	r20, r24
     324:	48 27       	eor	r20, r24
     326:	48 27       	eor	r20, r24
     328:	48 27       	eor	r20, r24
     32a:	48 27       	eor	r20, r24
     32c:	96 26       	eor	r9, r22
     32e:	48 27       	eor	r20, r24
     330:	48 27       	eor	r20, r24
     332:	48 27       	eor	r20, r24
     334:	48 27       	eor	r20, r24
     336:	48 27       	eor	r20, r24
     338:	48 27       	eor	r20, r24
     33a:	48 27       	eor	r20, r24
     33c:	48 27       	eor	r20, r24
     33e:	48 27       	eor	r20, r24
     340:	9a 26       	eor	r9, r26
     342:	48 27       	eor	r20, r24
     344:	48 27       	eor	r20, r24
     346:	48 27       	eor	r20, r24
     348:	48 27       	eor	r20, r24
     34a:	48 27       	eor	r20, r24
     34c:	48 27       	eor	r20, r24
     34e:	48 27       	eor	r20, r24
     350:	48 27       	eor	r20, r24
     352:	48 27       	eor	r20, r24
     354:	9e 26       	eor	r9, r30
     356:	48 27       	eor	r20, r24
     358:	48 27       	eor	r20, r24
     35a:	48 27       	eor	r20, r24
     35c:	48 27       	eor	r20, r24
     35e:	48 27       	eor	r20, r24
     360:	48 27       	eor	r20, r24
     362:	48 27       	eor	r20, r24
     364:	48 27       	eor	r20, r24
     366:	48 27       	eor	r20, r24
     368:	a2 26       	eor	r10, r18
     36a:	48 27       	eor	r20, r24
     36c:	48 27       	eor	r20, r24
     36e:	48 27       	eor	r20, r24
     370:	48 27       	eor	r20, r24
     372:	48 27       	eor	r20, r24
     374:	48 27       	eor	r20, r24
     376:	48 27       	eor	r20, r24
     378:	48 27       	eor	r20, r24
     37a:	48 27       	eor	r20, r24
     37c:	a6 26       	eor	r10, r22
     37e:	ef 26       	eor	r14, r31
     380:	13 27       	eor	r17, r19
     382:	48 27       	eor	r20, r24
     384:	48 27       	eor	r20, r24
     386:	48 27       	eor	r20, r24
     388:	48 27       	eor	r20, r24
     38a:	48 27       	eor	r20, r24
     38c:	48 27       	eor	r20, r24
     38e:	48 27       	eor	r20, r24
     390:	ac 26       	eor	r10, r28
     392:	f2 26       	eor	r15, r18
     394:	19 27       	eor	r17, r25
     396:	48 27       	eor	r20, r24
     398:	48 27       	eor	r20, r24
     39a:	48 27       	eor	r20, r24
     39c:	48 27       	eor	r20, r24
     39e:	48 27       	eor	r20, r24
     3a0:	48 27       	eor	r20, r24
     3a2:	48 27       	eor	r20, r24
     3a4:	b0 26       	eor	r11, r16
     3a6:	f8 26       	eor	r15, r24
     3a8:	1f 27       	eor	r17, r31
     3aa:	48 27       	eor	r20, r24
     3ac:	48 27       	eor	r20, r24
     3ae:	48 27       	eor	r20, r24
     3b0:	48 27       	eor	r20, r24
     3b2:	48 27       	eor	r20, r24
     3b4:	48 27       	eor	r20, r24
     3b6:	48 27       	eor	r20, r24
     3b8:	b4 26       	eor	r11, r20
     3ba:	fe 26       	eor	r15, r30
     3bc:	25 27       	eor	r18, r21
     3be:	48 27       	eor	r20, r24
     3c0:	48 27       	eor	r20, r24
     3c2:	48 27       	eor	r20, r24
     3c4:	48 27       	eor	r20, r24
     3c6:	48 27       	eor	r20, r24
     3c8:	48 27       	eor	r20, r24
     3ca:	48 27       	eor	r20, r24
     3cc:	b8 26       	eor	r11, r24
     3ce:	04 27       	eor	r16, r20
     3d0:	2b 27       	eor	r18, r27
     3d2:	48 27       	eor	r20, r24
     3d4:	48 27       	eor	r20, r24
     3d6:	48 27       	eor	r20, r24
     3d8:	48 27       	eor	r20, r24
     3da:	48 27       	eor	r20, r24
     3dc:	48 27       	eor	r20, r24
     3de:	48 27       	eor	r20, r24
     3e0:	bc 26       	eor	r11, r28
     3e2:	07 27       	eor	r16, r23
     3e4:	31 27       	eor	r19, r17
     3e6:	48 27       	eor	r20, r24
     3e8:	48 27       	eor	r20, r24
     3ea:	48 27       	eor	r20, r24
     3ec:	48 27       	eor	r20, r24
     3ee:	48 27       	eor	r20, r24
     3f0:	48 27       	eor	r20, r24
     3f2:	48 27       	eor	r20, r24
     3f4:	bf 26       	eor	r11, r31
     3f6:	48 27       	eor	r20, r24
     3f8:	48 27       	eor	r20, r24
     3fa:	48 27       	eor	r20, r24
     3fc:	48 27       	eor	r20, r24
     3fe:	48 27       	eor	r20, r24
     400:	48 27       	eor	r20, r24
     402:	48 27       	eor	r20, r24
     404:	48 27       	eor	r20, r24
     406:	48 27       	eor	r20, r24
     408:	c3 26       	eor	r12, r19
     40a:	0a 27       	eor	r16, r26
     40c:	37 27       	eor	r19, r23
     40e:	48 27       	eor	r20, r24
     410:	48 27       	eor	r20, r24
     412:	48 27       	eor	r20, r24
     414:	48 27       	eor	r20, r24
     416:	48 27       	eor	r20, r24
     418:	48 27       	eor	r20, r24
     41a:	48 27       	eor	r20, r24
     41c:	c6 26       	eor	r12, r22
     41e:	0d 27       	eor	r16, r29
     420:	3d 27       	eor	r19, r29
     422:	48 27       	eor	r20, r24
     424:	48 27       	eor	r20, r24
     426:	48 27       	eor	r20, r24
     428:	48 27       	eor	r20, r24
     42a:	48 27       	eor	r20, r24
     42c:	48 27       	eor	r20, r24
     42e:	48 27       	eor	r20, r24
     430:	c9 26       	eor	r12, r25
     432:	10 27       	eor	r17, r16
     434:	43 27       	eor	r20, r19
     436:	48 27       	eor	r20, r24
     438:	48 27       	eor	r20, r24
     43a:	48 27       	eor	r20, r24
     43c:	48 27       	eor	r20, r24
     43e:	48 27       	eor	r20, r24
     440:	48 27       	eor	r20, r24
     442:	48 27       	eor	r20, r24
     444:	cc 26       	eor	r12, r28
     446:	48 27       	eor	r20, r24
     448:	48 27       	eor	r20, r24
     44a:	48 27       	eor	r20, r24
     44c:	48 27       	eor	r20, r24
     44e:	48 27       	eor	r20, r24
     450:	48 27       	eor	r20, r24
     452:	48 27       	eor	r20, r24
     454:	48 27       	eor	r20, r24
     456:	48 27       	eor	r20, r24
     458:	d0 26       	eor	r13, r16
     45a:	48 27       	eor	r20, r24
     45c:	48 27       	eor	r20, r24
     45e:	48 27       	eor	r20, r24
     460:	48 27       	eor	r20, r24
     462:	48 27       	eor	r20, r24
     464:	48 27       	eor	r20, r24
     466:	48 27       	eor	r20, r24
     468:	48 27       	eor	r20, r24
     46a:	48 27       	eor	r20, r24
     46c:	d4 26       	eor	r13, r20
     46e:	48 27       	eor	r20, r24
     470:	48 27       	eor	r20, r24
     472:	48 27       	eor	r20, r24
     474:	48 27       	eor	r20, r24
     476:	48 27       	eor	r20, r24
     478:	48 27       	eor	r20, r24
     47a:	48 27       	eor	r20, r24
     47c:	48 27       	eor	r20, r24
     47e:	48 27       	eor	r20, r24
     480:	d8 26       	eor	r13, r24
     482:	48 27       	eor	r20, r24
     484:	48 27       	eor	r20, r24
     486:	48 27       	eor	r20, r24
     488:	48 27       	eor	r20, r24
     48a:	48 27       	eor	r20, r24
     48c:	48 27       	eor	r20, r24
     48e:	48 27       	eor	r20, r24
     490:	48 27       	eor	r20, r24
     492:	48 27       	eor	r20, r24
     494:	dc 26       	eor	r13, r28
     496:	48 27       	eor	r20, r24
     498:	48 27       	eor	r20, r24
     49a:	48 27       	eor	r20, r24
     49c:	48 27       	eor	r20, r24
     49e:	48 27       	eor	r20, r24
     4a0:	48 27       	eor	r20, r24
     4a2:	48 27       	eor	r20, r24
     4a4:	48 27       	eor	r20, r24
     4a6:	48 27       	eor	r20, r24
     4a8:	df 26       	eor	r13, r31
     4aa:	48 27       	eor	r20, r24
     4ac:	48 27       	eor	r20, r24
     4ae:	48 27       	eor	r20, r24
     4b0:	48 27       	eor	r20, r24
     4b2:	48 27       	eor	r20, r24
     4b4:	48 27       	eor	r20, r24
     4b6:	48 27       	eor	r20, r24
     4b8:	48 27       	eor	r20, r24
     4ba:	48 27       	eor	r20, r24
     4bc:	e3 26       	eor	r14, r19
     4be:	48 27       	eor	r20, r24
     4c0:	48 27       	eor	r20, r24
     4c2:	48 27       	eor	r20, r24
     4c4:	48 27       	eor	r20, r24
     4c6:	48 27       	eor	r20, r24
     4c8:	48 27       	eor	r20, r24
     4ca:	48 27       	eor	r20, r24
     4cc:	48 27       	eor	r20, r24
     4ce:	48 27       	eor	r20, r24
     4d0:	e7 26       	eor	r14, r23
     4d2:	48 27       	eor	r20, r24
     4d4:	48 27       	eor	r20, r24
     4d6:	48 27       	eor	r20, r24
     4d8:	48 27       	eor	r20, r24
     4da:	48 27       	eor	r20, r24
     4dc:	48 27       	eor	r20, r24
     4de:	48 27       	eor	r20, r24
     4e0:	48 27       	eor	r20, r24
     4e2:	48 27       	eor	r20, r24
     4e4:	eb 26       	eor	r14, r27
     4e6:	5c 27       	eor	r21, r28
     4e8:	11 28       	or	r1, r1
     4ea:	11 28       	or	r1, r1
     4ec:	11 28       	or	r1, r1
     4ee:	11 28       	or	r1, r1
     4f0:	11 28       	or	r1, r1
     4f2:	11 28       	or	r1, r1
     4f4:	11 28       	or	r1, r1
     4f6:	11 28       	or	r1, r1
     4f8:	11 28       	or	r1, r1
     4fa:	5e 27       	eor	r21, r30
     4fc:	11 28       	or	r1, r1
     4fe:	11 28       	or	r1, r1
     500:	11 28       	or	r1, r1
     502:	11 28       	or	r1, r1
     504:	11 28       	or	r1, r1
     506:	11 28       	or	r1, r1
     508:	11 28       	or	r1, r1
     50a:	11 28       	or	r1, r1
     50c:	11 28       	or	r1, r1
     50e:	61 27       	eor	r22, r17
     510:	11 28       	or	r1, r1
     512:	11 28       	or	r1, r1
     514:	11 28       	or	r1, r1
     516:	11 28       	or	r1, r1
     518:	11 28       	or	r1, r1
     51a:	11 28       	or	r1, r1
     51c:	11 28       	or	r1, r1
     51e:	11 28       	or	r1, r1
     520:	11 28       	or	r1, r1
     522:	64 27       	eor	r22, r20
     524:	11 28       	or	r1, r1
     526:	11 28       	or	r1, r1
     528:	11 28       	or	r1, r1
     52a:	11 28       	or	r1, r1
     52c:	11 28       	or	r1, r1
     52e:	11 28       	or	r1, r1
     530:	11 28       	or	r1, r1
     532:	11 28       	or	r1, r1
     534:	11 28       	or	r1, r1
     536:	67 27       	eor	r22, r23
     538:	11 28       	or	r1, r1
     53a:	11 28       	or	r1, r1
     53c:	11 28       	or	r1, r1
     53e:	11 28       	or	r1, r1
     540:	11 28       	or	r1, r1
     542:	11 28       	or	r1, r1
     544:	11 28       	or	r1, r1
     546:	11 28       	or	r1, r1
     548:	11 28       	or	r1, r1
     54a:	6a 27       	eor	r22, r26
     54c:	11 28       	or	r1, r1
     54e:	11 28       	or	r1, r1
     550:	11 28       	or	r1, r1
     552:	11 28       	or	r1, r1
     554:	11 28       	or	r1, r1
     556:	11 28       	or	r1, r1
     558:	11 28       	or	r1, r1
     55a:	11 28       	or	r1, r1
     55c:	11 28       	or	r1, r1
     55e:	6d 27       	eor	r22, r29
     560:	11 28       	or	r1, r1
     562:	11 28       	or	r1, r1
     564:	11 28       	or	r1, r1
     566:	11 28       	or	r1, r1
     568:	11 28       	or	r1, r1
     56a:	11 28       	or	r1, r1
     56c:	11 28       	or	r1, r1
     56e:	11 28       	or	r1, r1
     570:	11 28       	or	r1, r1
     572:	70 27       	eor	r23, r16
     574:	11 28       	or	r1, r1
     576:	11 28       	or	r1, r1
     578:	11 28       	or	r1, r1
     57a:	11 28       	or	r1, r1
     57c:	11 28       	or	r1, r1
     57e:	11 28       	or	r1, r1
     580:	11 28       	or	r1, r1
     582:	11 28       	or	r1, r1
     584:	11 28       	or	r1, r1
     586:	73 27       	eor	r23, r19
     588:	11 28       	or	r1, r1
     58a:	11 28       	or	r1, r1
     58c:	11 28       	or	r1, r1
     58e:	11 28       	or	r1, r1
     590:	11 28       	or	r1, r1
     592:	11 28       	or	r1, r1
     594:	11 28       	or	r1, r1
     596:	11 28       	or	r1, r1
     598:	11 28       	or	r1, r1
     59a:	76 27       	eor	r23, r22
     59c:	11 28       	or	r1, r1
     59e:	11 28       	or	r1, r1
     5a0:	11 28       	or	r1, r1
     5a2:	11 28       	or	r1, r1
     5a4:	11 28       	or	r1, r1
     5a6:	11 28       	or	r1, r1
     5a8:	11 28       	or	r1, r1
     5aa:	11 28       	or	r1, r1
     5ac:	11 28       	or	r1, r1
     5ae:	79 27       	eor	r23, r25
     5b0:	11 28       	or	r1, r1
     5b2:	11 28       	or	r1, r1
     5b4:	11 28       	or	r1, r1
     5b6:	11 28       	or	r1, r1
     5b8:	11 28       	or	r1, r1
     5ba:	11 28       	or	r1, r1
     5bc:	11 28       	or	r1, r1
     5be:	11 28       	or	r1, r1
     5c0:	11 28       	or	r1, r1
     5c2:	7c 27       	eor	r23, r28
     5c4:	11 28       	or	r1, r1
     5c6:	11 28       	or	r1, r1
     5c8:	11 28       	or	r1, r1
     5ca:	11 28       	or	r1, r1
     5cc:	11 28       	or	r1, r1
     5ce:	11 28       	or	r1, r1
     5d0:	11 28       	or	r1, r1
     5d2:	11 28       	or	r1, r1
     5d4:	11 28       	or	r1, r1
     5d6:	7f 27       	eor	r23, r31
     5d8:	11 28       	or	r1, r1
     5da:	11 28       	or	r1, r1
     5dc:	11 28       	or	r1, r1
     5de:	11 28       	or	r1, r1
     5e0:	11 28       	or	r1, r1
     5e2:	11 28       	or	r1, r1
     5e4:	11 28       	or	r1, r1
     5e6:	11 28       	or	r1, r1
     5e8:	11 28       	or	r1, r1
     5ea:	82 27       	eor	r24, r18
     5ec:	11 28       	or	r1, r1
     5ee:	11 28       	or	r1, r1
     5f0:	11 28       	or	r1, r1
     5f2:	11 28       	or	r1, r1
     5f4:	11 28       	or	r1, r1
     5f6:	11 28       	or	r1, r1
     5f8:	11 28       	or	r1, r1
     5fa:	11 28       	or	r1, r1
     5fc:	11 28       	or	r1, r1
     5fe:	85 27       	eor	r24, r21
     600:	11 28       	or	r1, r1
     602:	11 28       	or	r1, r1
     604:	11 28       	or	r1, r1
     606:	11 28       	or	r1, r1
     608:	11 28       	or	r1, r1
     60a:	11 28       	or	r1, r1
     60c:	11 28       	or	r1, r1
     60e:	11 28       	or	r1, r1
     610:	11 28       	or	r1, r1
     612:	88 27       	eor	r24, r24
     614:	11 28       	or	r1, r1
     616:	11 28       	or	r1, r1
     618:	11 28       	or	r1, r1
     61a:	11 28       	or	r1, r1
     61c:	11 28       	or	r1, r1
     61e:	11 28       	or	r1, r1
     620:	11 28       	or	r1, r1
     622:	11 28       	or	r1, r1
     624:	11 28       	or	r1, r1
     626:	8b 27       	eor	r24, r27
     628:	11 28       	or	r1, r1
     62a:	11 28       	or	r1, r1
     62c:	11 28       	or	r1, r1
     62e:	11 28       	or	r1, r1
     630:	11 28       	or	r1, r1
     632:	11 28       	or	r1, r1
     634:	11 28       	or	r1, r1
     636:	11 28       	or	r1, r1
     638:	11 28       	or	r1, r1
     63a:	8e 27       	eor	r24, r30
     63c:	11 28       	or	r1, r1
     63e:	11 28       	or	r1, r1
     640:	11 28       	or	r1, r1
     642:	11 28       	or	r1, r1
     644:	11 28       	or	r1, r1
     646:	11 28       	or	r1, r1
     648:	11 28       	or	r1, r1
     64a:	11 28       	or	r1, r1
     64c:	11 28       	or	r1, r1
     64e:	91 27       	eor	r25, r17
     650:	11 28       	or	r1, r1
     652:	11 28       	or	r1, r1
     654:	11 28       	or	r1, r1
     656:	11 28       	or	r1, r1
     658:	11 28       	or	r1, r1
     65a:	11 28       	or	r1, r1
     65c:	11 28       	or	r1, r1
     65e:	11 28       	or	r1, r1
     660:	11 28       	or	r1, r1
     662:	94 27       	eor	r25, r20
     664:	11 28       	or	r1, r1
     666:	11 28       	or	r1, r1
     668:	11 28       	or	r1, r1
     66a:	11 28       	or	r1, r1
     66c:	11 28       	or	r1, r1
     66e:	11 28       	or	r1, r1
     670:	11 28       	or	r1, r1
     672:	11 28       	or	r1, r1
     674:	11 28       	or	r1, r1
     676:	97 27       	eor	r25, r23
     678:	11 28       	or	r1, r1
     67a:	11 28       	or	r1, r1
     67c:	11 28       	or	r1, r1
     67e:	11 28       	or	r1, r1
     680:	11 28       	or	r1, r1
     682:	11 28       	or	r1, r1
     684:	11 28       	or	r1, r1
     686:	11 28       	or	r1, r1
     688:	11 28       	or	r1, r1
     68a:	9a 27       	eor	r25, r26
     68c:	11 28       	or	r1, r1
     68e:	11 28       	or	r1, r1
     690:	11 28       	or	r1, r1
     692:	11 28       	or	r1, r1
     694:	11 28       	or	r1, r1
     696:	11 28       	or	r1, r1
     698:	11 28       	or	r1, r1
     69a:	11 28       	or	r1, r1
     69c:	11 28       	or	r1, r1
     69e:	9d 27       	eor	r25, r29
     6a0:	11 28       	or	r1, r1
     6a2:	11 28       	or	r1, r1
     6a4:	11 28       	or	r1, r1
     6a6:	11 28       	or	r1, r1
     6a8:	11 28       	or	r1, r1
     6aa:	11 28       	or	r1, r1
     6ac:	11 28       	or	r1, r1
     6ae:	11 28       	or	r1, r1
     6b0:	11 28       	or	r1, r1
     6b2:	a0 27       	eor	r26, r16
     6b4:	11 28       	or	r1, r1
     6b6:	11 28       	or	r1, r1
     6b8:	11 28       	or	r1, r1
     6ba:	11 28       	or	r1, r1
     6bc:	11 28       	or	r1, r1
     6be:	11 28       	or	r1, r1
     6c0:	11 28       	or	r1, r1
     6c2:	11 28       	or	r1, r1
     6c4:	11 28       	or	r1, r1
     6c6:	a3 27       	eor	r26, r19
     6c8:	11 28       	or	r1, r1
     6ca:	11 28       	or	r1, r1
     6cc:	11 28       	or	r1, r1
     6ce:	11 28       	or	r1, r1
     6d0:	11 28       	or	r1, r1
     6d2:	11 28       	or	r1, r1
     6d4:	11 28       	or	r1, r1
     6d6:	11 28       	or	r1, r1
     6d8:	11 28       	or	r1, r1
     6da:	b0 27       	eor	r27, r16
     6dc:	11 28       	or	r1, r1
     6de:	11 28       	or	r1, r1
     6e0:	11 28       	or	r1, r1
     6e2:	11 28       	or	r1, r1
     6e4:	11 28       	or	r1, r1
     6e6:	11 28       	or	r1, r1
     6e8:	11 28       	or	r1, r1
     6ea:	11 28       	or	r1, r1
     6ec:	11 28       	or	r1, r1
     6ee:	b3 27       	eor	r27, r19
     6f0:	11 28       	or	r1, r1
     6f2:	11 28       	or	r1, r1
     6f4:	11 28       	or	r1, r1
     6f6:	11 28       	or	r1, r1
     6f8:	11 28       	or	r1, r1
     6fa:	11 28       	or	r1, r1
     6fc:	11 28       	or	r1, r1
     6fe:	11 28       	or	r1, r1
     700:	11 28       	or	r1, r1
     702:	b6 27       	eor	r27, r22
     704:	11 28       	or	r1, r1
     706:	11 28       	or	r1, r1
     708:	11 28       	or	r1, r1
     70a:	11 28       	or	r1, r1
     70c:	11 28       	or	r1, r1
     70e:	11 28       	or	r1, r1
     710:	11 28       	or	r1, r1
     712:	11 28       	or	r1, r1
     714:	11 28       	or	r1, r1
     716:	b9 27       	eor	r27, r25
     718:	11 28       	or	r1, r1
     71a:	11 28       	or	r1, r1
     71c:	11 28       	or	r1, r1
     71e:	11 28       	or	r1, r1
     720:	11 28       	or	r1, r1
     722:	11 28       	or	r1, r1
     724:	11 28       	or	r1, r1
     726:	11 28       	or	r1, r1
     728:	11 28       	or	r1, r1
     72a:	bc 27       	eor	r27, r28
     72c:	11 28       	or	r1, r1
     72e:	11 28       	or	r1, r1
     730:	11 28       	or	r1, r1
     732:	11 28       	or	r1, r1
     734:	11 28       	or	r1, r1
     736:	11 28       	or	r1, r1
     738:	11 28       	or	r1, r1
     73a:	11 28       	or	r1, r1
     73c:	11 28       	or	r1, r1
     73e:	c1 27       	eor	r28, r17
     740:	11 28       	or	r1, r1
     742:	11 28       	or	r1, r1
     744:	11 28       	or	r1, r1
     746:	11 28       	or	r1, r1
     748:	11 28       	or	r1, r1
     74a:	11 28       	or	r1, r1
     74c:	11 28       	or	r1, r1
     74e:	11 28       	or	r1, r1
     750:	11 28       	or	r1, r1
     752:	c4 27       	eor	r28, r20
     754:	11 28       	or	r1, r1
     756:	11 28       	or	r1, r1
     758:	11 28       	or	r1, r1
     75a:	11 28       	or	r1, r1
     75c:	11 28       	or	r1, r1
     75e:	11 28       	or	r1, r1
     760:	11 28       	or	r1, r1
     762:	11 28       	or	r1, r1
     764:	11 28       	or	r1, r1
     766:	c7 27       	eor	r28, r23
     768:	11 28       	or	r1, r1
     76a:	11 28       	or	r1, r1
     76c:	11 28       	or	r1, r1
     76e:	11 28       	or	r1, r1
     770:	11 28       	or	r1, r1
     772:	11 28       	or	r1, r1
     774:	11 28       	or	r1, r1
     776:	11 28       	or	r1, r1
     778:	11 28       	or	r1, r1
     77a:	ca 27       	eor	r28, r26
     77c:	11 28       	or	r1, r1
     77e:	11 28       	or	r1, r1
     780:	11 28       	or	r1, r1
     782:	11 28       	or	r1, r1
     784:	11 28       	or	r1, r1
     786:	11 28       	or	r1, r1
     788:	11 28       	or	r1, r1
     78a:	11 28       	or	r1, r1
     78c:	11 28       	or	r1, r1
     78e:	cd 27       	eor	r28, r29
     790:	11 28       	or	r1, r1
     792:	11 28       	or	r1, r1
     794:	11 28       	or	r1, r1
     796:	11 28       	or	r1, r1
     798:	11 28       	or	r1, r1
     79a:	11 28       	or	r1, r1
     79c:	11 28       	or	r1, r1
     79e:	11 28       	or	r1, r1
     7a0:	11 28       	or	r1, r1
     7a2:	d2 27       	eor	r29, r18
     7a4:	11 28       	or	r1, r1
     7a6:	11 28       	or	r1, r1
     7a8:	11 28       	or	r1, r1
     7aa:	11 28       	or	r1, r1
     7ac:	11 28       	or	r1, r1
     7ae:	11 28       	or	r1, r1
     7b0:	11 28       	or	r1, r1
     7b2:	11 28       	or	r1, r1
     7b4:	11 28       	or	r1, r1
     7b6:	d5 27       	eor	r29, r21
     7b8:	11 28       	or	r1, r1
     7ba:	11 28       	or	r1, r1
     7bc:	11 28       	or	r1, r1
     7be:	11 28       	or	r1, r1
     7c0:	11 28       	or	r1, r1
     7c2:	11 28       	or	r1, r1
     7c4:	11 28       	or	r1, r1
     7c6:	11 28       	or	r1, r1
     7c8:	11 28       	or	r1, r1
     7ca:	da 27       	eor	r29, r26
     7cc:	11 28       	or	r1, r1
     7ce:	11 28       	or	r1, r1
     7d0:	11 28       	or	r1, r1
     7d2:	11 28       	or	r1, r1
     7d4:	11 28       	or	r1, r1
     7d6:	11 28       	or	r1, r1
     7d8:	11 28       	or	r1, r1
     7da:	11 28       	or	r1, r1
     7dc:	11 28       	or	r1, r1
     7de:	df 27       	eor	r29, r31
     7e0:	01 28       	or	r0, r1
     7e2:	06 28       	or	r0, r6
     7e4:	0b 28       	or	r0, r11
     7e6:	11 28       	or	r1, r1
     7e8:	11 28       	or	r1, r1
     7ea:	11 28       	or	r1, r1
     7ec:	11 28       	or	r1, r1
     7ee:	11 28       	or	r1, r1
     7f0:	11 28       	or	r1, r1
     7f2:	e4 27       	eor	r30, r20
     7f4:	11 28       	or	r1, r1
     7f6:	11 28       	or	r1, r1
     7f8:	11 28       	or	r1, r1
     7fa:	11 28       	or	r1, r1
     7fc:	11 28       	or	r1, r1
     7fe:	11 28       	or	r1, r1
     800:	11 28       	or	r1, r1
     802:	11 28       	or	r1, r1
     804:	11 28       	or	r1, r1
     806:	e7 27       	eor	r30, r23
     808:	11 28       	or	r1, r1
     80a:	11 28       	or	r1, r1
     80c:	11 28       	or	r1, r1
     80e:	11 28       	or	r1, r1
     810:	11 28       	or	r1, r1
     812:	11 28       	or	r1, r1
     814:	11 28       	or	r1, r1
     816:	11 28       	or	r1, r1
     818:	11 28       	or	r1, r1
     81a:	ea 27       	eor	r30, r26
     81c:	11 28       	or	r1, r1
     81e:	11 28       	or	r1, r1
     820:	11 28       	or	r1, r1
     822:	11 28       	or	r1, r1
     824:	11 28       	or	r1, r1
     826:	11 28       	or	r1, r1
     828:	11 28       	or	r1, r1
     82a:	11 28       	or	r1, r1
     82c:	11 28       	or	r1, r1
     82e:	ed 27       	eor	r30, r29
     830:	11 28       	or	r1, r1
     832:	11 28       	or	r1, r1
     834:	11 28       	or	r1, r1
     836:	11 28       	or	r1, r1
     838:	11 28       	or	r1, r1
     83a:	11 28       	or	r1, r1
     83c:	11 28       	or	r1, r1
     83e:	11 28       	or	r1, r1
     840:	11 28       	or	r1, r1
     842:	f0 27       	eor	r31, r16
     844:	11 28       	or	r1, r1
     846:	11 28       	or	r1, r1
     848:	11 28       	or	r1, r1
     84a:	11 28       	or	r1, r1
     84c:	11 28       	or	r1, r1
     84e:	11 28       	or	r1, r1
     850:	11 28       	or	r1, r1
     852:	11 28       	or	r1, r1
     854:	11 28       	or	r1, r1
     856:	f5 27       	eor	r31, r21
     858:	11 28       	or	r1, r1
     85a:	11 28       	or	r1, r1
     85c:	11 28       	or	r1, r1
     85e:	11 28       	or	r1, r1
     860:	11 28       	or	r1, r1
     862:	11 28       	or	r1, r1
     864:	11 28       	or	r1, r1
     866:	11 28       	or	r1, r1
     868:	11 28       	or	r1, r1
     86a:	f8 27       	eor	r31, r24
     86c:	11 28       	or	r1, r1
     86e:	11 28       	or	r1, r1
     870:	11 28       	or	r1, r1
     872:	11 28       	or	r1, r1
     874:	11 28       	or	r1, r1
     876:	11 28       	or	r1, r1
     878:	11 28       	or	r1, r1
     87a:	11 28       	or	r1, r1
     87c:	11 28       	or	r1, r1
     87e:	fb 27       	eor	r31, r27
     880:	11 28       	or	r1, r1
     882:	11 28       	or	r1, r1
     884:	11 28       	or	r1, r1
     886:	11 28       	or	r1, r1
     888:	11 28       	or	r1, r1
     88a:	11 28       	or	r1, r1
     88c:	11 28       	or	r1, r1
     88e:	11 28       	or	r1, r1
     890:	11 28       	or	r1, r1
     892:	fe 27       	eor	r31, r30
     894:	08 00       	.word	0x0008	; ????
     896:	00 00       	nop
     898:	be 92       	st	-X, r11
     89a:	24 49       	sbci	r18, 0x94	; 148
     89c:	12 3e       	cpi	r17, 0xE2	; 226
     89e:	ab aa       	std	Y+51, r10	; 0x33
     8a0:	aa 2a       	or	r10, r26
     8a2:	be cd       	rjmp	.-1156   	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     8a4:	cc cc       	rjmp	.-1640   	; 0x23e <__SREG__+0x1ff>
     8a6:	4c 3e       	cpi	r20, 0xEC	; 236
     8a8:	00 00       	nop
     8aa:	00 80       	ld	r0, Z
     8ac:	be ab       	std	Y+54, r27	; 0x36
     8ae:	aa aa       	std	Y+50, r10	; 0x32
     8b0:	aa 3e       	cpi	r26, 0xEA	; 234
     8b2:	00 00       	nop
     8b4:	00 00       	nop
     8b6:	bf 00       	.word	0x00bf	; ????
     8b8:	00 00       	nop
     8ba:	80 3f       	cpi	r24, 0xF0	; 240
     8bc:	00 00       	nop
     8be:	00 00       	nop
     8c0:	00 08       	sbc	r0, r0
     8c2:	41 78       	andi	r20, 0x81	; 129
     8c4:	d3 bb       	out	0x13, r29	; 19
     8c6:	43 87       	std	Z+11, r20	; 0x0b
     8c8:	d1 13       	cpse	r29, r17
     8ca:	3d 19       	sub	r19, r13
     8cc:	0e 3c       	cpi	r16, 0xCE	; 206
     8ce:	c3 bd       	out	0x23, r28	; 35
     8d0:	42 82       	std	Z+2, r4	; 0x02
     8d2:	ad 2b       	or	r26, r29
     8d4:	3e 68       	ori	r19, 0x8E	; 142
     8d6:	ec 82       	std	Y+4, r14	; 0x04
     8d8:	76 be       	out	0x36, r7	; 54
     8da:	d9 8f       	std	Y+25, r29	; 0x19
     8dc:	e1 a9       	ldd	r30, Z+49	; 0x31
     8de:	3e 4c       	sbci	r19, 0xCE	; 206
     8e0:	80 ef       	ldi	r24, 0xF0	; 240
     8e2:	ff be       	out	0x3f, r15	; 63
     8e4:	01 c4       	rjmp	.+2050   	; 0x10e8 <vListInsert+0x78>
     8e6:	ff 7f       	andi	r31, 0xFF	; 255
     8e8:	3f 00       	.word	0x003f	; ????
     8ea:	00 00       	nop
	...

000008ee <__trampolines_end>:
     8ee:	6e 61       	ori	r22, 0x1E	; 30
     8f0:	6e 00       	.word	0x006e	; ????

000008f2 <__c.2332>:
     8f2:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     902:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     912:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     922:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     932:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     942:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     952:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     962:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     972:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     982:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     992:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     9a2:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     9b2:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     9c2:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     9d2:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     9e2:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000009f0 <R22_Saturation_Temp>:
     9f0:	9a 99 c9 c1 33 33 6b c1 33 33 d3 c0 cd cc cc 3d     ....33k.33.....=
     a00:	48 e1 a2 40 66 66 2e 41 00 00 78 41 9a 99 9d 41     H..@ff.A..xA...A
     a10:	00 00 bc 41 cd cc d8 41 33 33 f3 41 66 66 06 42     ...A...A33.Aff.B
     a20:	66 66 12 42 9a 99 1d 42 66 66 28 42 cd cc 32 42     ff.B...Bff(B..2B
     a30:	cd cc 28 42 66 66 46 42 9a 99 4f 42 66 66 58 42     ..(BffFB..OBffXB
     a40:	33 33 61 42 9a 99 69 42 9a 99 71 42 33 33 79 42     33aB..iB..qB33yB
     a50:	9a 99 80 42 33 33 84 42 cd cc 87 42 66 66 8b 42     ...B33.B...Bff.B
     a60:	00 00 8f 42 66 66 92 42 9a 99 95 42 cd cc 98 42     ...Bff.B...B...B

00000a70 <prvIdleTask>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
     a70:	0c e2       	ldi	r16, 0x2C	; 44
     a72:	17 e0       	ldi	r17, 0x07	; 7
     a74:	0f 2e       	mov	r0, r31
     a76:	fc e5       	ldi	r31, 0x5C	; 92
     a78:	ef 2e       	mov	r14, r31
     a7a:	f7 e0       	ldi	r31, 0x07	; 7
     a7c:	ff 2e       	mov	r15, r31
     a7e:	f0 2d       	mov	r31, r0
     a80:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <uxDeletedTasksWaitingCleanUp>
     a84:	88 23       	and	r24, r24
     a86:	11 f1       	breq	.+68     	; 0xacc <prvIdleTask+0x5c>
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	0f 92       	push	r0
     a8e:	d8 01       	movw	r26, r16
     a90:	17 96       	adiw	r26, 0x07	; 7
     a92:	ed 91       	ld	r30, X+
     a94:	fc 91       	ld	r31, X
     a96:	18 97       	sbiw	r26, 0x08	; 8
     a98:	c0 85       	ldd	r28, Z+8	; 0x08
     a9a:	d1 85       	ldd	r29, Z+9	; 0x09
     a9c:	ce 01       	movw	r24, r28
     a9e:	02 96       	adiw	r24, 0x02	; 2
     aa0:	24 d3       	rcall	.+1608   	; 0x10ea <uxListRemove>
     aa2:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <uxCurrentNumberOfTasks>
     aa6:	81 50       	subi	r24, 0x01	; 1
     aa8:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <uxCurrentNumberOfTasks>
     aac:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <uxDeletedTasksWaitingCleanUp>
     ab0:	81 50       	subi	r24, 0x01	; 1
     ab2:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <uxDeletedTasksWaitingCleanUp>
     ab6:	0f 90       	pop	r0
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     abc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     abe:	75 d0       	rcall	.+234    	; 0xbaa <vPortFree>
     ac0:	ce 01       	movw	r24, r28
     ac2:	73 d0       	rcall	.+230    	; 0xbaa <vPortFree>
     ac4:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <uxDeletedTasksWaitingCleanUp>
     ac8:	81 11       	cpse	r24, r1
     aca:	de cf       	rjmp	.-68     	; 0xa88 <prvIdleTask+0x18>
     acc:	f7 01       	movw	r30, r14
     ace:	80 81       	ld	r24, Z
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	08 f0       	brcs	.+2      	; 0xad6 <prvIdleTask+0x66>
     ad4:	3d d1       	rcall	.+634    	; 0xd50 <vPortYield>
     ad6:	73 d2       	rcall	.+1254   	; 0xfbe <vApplicationIdleHook>
     ad8:	d3 cf       	rjmp	.-90     	; 0xa80 <prvIdleTask+0x10>

00000ada <__ctors_end>:
     ada:	11 24       	eor	r1, r1
     adc:	1f be       	out	0x3f, r1	; 63
     ade:	cf ef       	ldi	r28, 0xFF	; 255
     ae0:	d1 e2       	ldi	r29, 0x21	; 33
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	cd bf       	out	0x3d, r28	; 61
     ae6:	00 e0       	ldi	r16, 0x00	; 0
     ae8:	0c bf       	out	0x3c, r16	; 60

00000aea <__do_copy_data>:
     aea:	17 e0       	ldi	r17, 0x07	; 7
     aec:	a0 e0       	ldi	r26, 0x00	; 0
     aee:	b2 e0       	ldi	r27, 0x02	; 2
     af0:	ec e2       	ldi	r30, 0x2C	; 44
     af2:	f7 eb       	ldi	r31, 0xB7	; 183
     af4:	00 e0       	ldi	r16, 0x00	; 0
     af6:	0b bf       	out	0x3b, r16	; 59
     af8:	02 c0       	rjmp	.+4      	; 0xafe <__do_copy_data+0x14>
     afa:	07 90       	elpm	r0, Z+
     afc:	0d 92       	st	X+, r0
     afe:	ac 30       	cpi	r26, 0x0C	; 12
     b00:	b1 07       	cpc	r27, r17
     b02:	d9 f7       	brne	.-10     	; 0xafa <__do_copy_data+0x10>

00000b04 <__do_clear_bss>:
     b04:	2b e0       	ldi	r18, 0x0B	; 11
     b06:	ac e0       	ldi	r26, 0x0C	; 12
     b08:	b7 e0       	ldi	r27, 0x07	; 7
     b0a:	01 c0       	rjmp	.+2      	; 0xb0e <.do_clear_bss_start>

00000b0c <.do_clear_bss_loop>:
     b0c:	1d 92       	st	X+, r1

00000b0e <.do_clear_bss_start>:
     b0e:	a3 35       	cpi	r26, 0x53	; 83
     b10:	b2 07       	cpc	r27, r18
     b12:	e1 f7       	brne	.-8      	; 0xb0c <.do_clear_bss_loop>
     b14:	0e 94 e6 20 	call	0x41cc	; 0x41cc <main>
     b18:	0c 94 94 5b 	jmp	0xb728	; 0xb728 <_exit>

00000b1c <__bad_interrupt>:
     b1c:	71 ca       	rjmp	.-2846   	; 0x0 <__vectors>

00000b1e <difftime>:
     b1e:	62 1b       	sub	r22, r18
     b20:	73 0b       	sbc	r23, r19
     b22:	84 0b       	sbc	r24, r20
     b24:	95 0b       	sbc	r25, r21
     b26:	08 95       	ret

00000b28 <time>:
     b28:	fc 01       	movw	r30, r24
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	60 91 4f 0b 	lds	r22, 0x0B4F	; 0x800b4f <__system_time>
     b32:	70 91 50 0b 	lds	r23, 0x0B50	; 0x800b50 <__system_time+0x1>
     b36:	80 91 51 0b 	lds	r24, 0x0B51	; 0x800b51 <__system_time+0x2>
     b3a:	90 91 52 0b 	lds	r25, 0x0B52	; 0x800b52 <__system_time+0x3>
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	30 97       	sbiw	r30, 0x00	; 0
     b42:	21 f0       	breq	.+8      	; 0xb4c <time+0x24>
     b44:	60 83       	st	Z, r22
     b46:	71 83       	std	Z+1, r23	; 0x01
     b48:	82 83       	std	Z+2, r24	; 0x02
     b4a:	93 83       	std	Z+3, r25	; 0x03
     b4c:	08 95       	ret

00000b4e <system_tick>:
     b4e:	8f 93       	push	r24
     b50:	8f b7       	in	r24, 0x3f	; 63
     b52:	8f 93       	push	r24
     b54:	f8 94       	cli
     b56:	80 91 4f 0b 	lds	r24, 0x0B4F	; 0x800b4f <__system_time>
     b5a:	8f 5f       	subi	r24, 0xFF	; 255
     b5c:	80 93 4f 0b 	sts	0x0B4F, r24	; 0x800b4f <__system_time>
     b60:	80 91 50 0b 	lds	r24, 0x0B50	; 0x800b50 <__system_time+0x1>
     b64:	8f 4f       	sbci	r24, 0xFF	; 255
     b66:	80 93 50 0b 	sts	0x0B50, r24	; 0x800b50 <__system_time+0x1>
     b6a:	80 91 51 0b 	lds	r24, 0x0B51	; 0x800b51 <__system_time+0x2>
     b6e:	8f 4f       	sbci	r24, 0xFF	; 255
     b70:	80 93 51 0b 	sts	0x0B51, r24	; 0x800b51 <__system_time+0x2>
     b74:	80 91 52 0b 	lds	r24, 0x0B52	; 0x800b52 <__system_time+0x3>
     b78:	8f 4f       	sbci	r24, 0xFF	; 255
     b7a:	80 93 52 0b 	sts	0x0B52, r24	; 0x800b52 <__system_time+0x3>
     b7e:	8f 91       	pop	r24
     b80:	8f bf       	out	0x3f, r24	; 63
     b82:	8f 91       	pop	r24
     b84:	08 95       	ret

00000b86 <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
     b8c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
     b90:	ce 01       	movw	r24, r28
     b92:	0e 94 5b 58 	call	0xb0b6	; 0xb0b6 <malloc>
     b96:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     b98:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     b9c:	20 97       	sbiw	r28, 0x00	; 0
     b9e:	09 f4       	brne	.+2      	; 0xba2 <pvPortMalloc+0x1c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     ba0:	27 d2       	rcall	.+1102   	; 0xff0 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
     ba2:	ce 01       	movw	r24, r28
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
	if( pv )
     bae:	00 97       	sbiw	r24, 0x00	; 0
     bb0:	41 f0       	breq	.+16     	; 0xbc2 <vPortFree+0x18>
     bb2:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
     bb4:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
		{
			free( pv );
     bb8:	ce 01       	movw	r24, r28
     bba:	0e 94 f3 58 	call	0xb1e6	; 0xb1e6 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
     bbe:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
	}
}
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <pxPortInitialiseStack>:
#elif defined( portUSE_TIMER2 )
        portTIMSK &= ~( _BV(OCIE2B)|_BV(OCIE2A)|_BV(TOIE2) );	// disable all Timer2 interrupts
        ASSR = 0x00;              								// set Timer/Counter2 to be off

#elif defined( portUSE_TIMER3 )
        portTIMSK &= ~( _BV(OCIE3B)|_BV(OCIE3A)|_BV(TOIE3) );	// disable all Timer3 interrupts
     bc8:	31 e1       	ldi	r19, 0x11	; 17
     bca:	fc 01       	movw	r30, r24
     bcc:	30 83       	st	Z, r19
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	22 e2       	ldi	r18, 0x22	; 34
     bd2:	20 83       	st	Z, r18
     bd4:	31 97       	sbiw	r30, 0x01	; 1
     bd6:	a3 e3       	ldi	r26, 0x33	; 51
     bd8:	a0 83       	st	Z, r26
     bda:	31 97       	sbiw	r30, 0x01	; 1
     bdc:	60 83       	st	Z, r22
     bde:	31 97       	sbiw	r30, 0x01	; 1
     be0:	70 83       	st	Z, r23
     be2:	31 97       	sbiw	r30, 0x01	; 1
     be4:	10 82       	st	Z, r1
     be6:	31 97       	sbiw	r30, 0x01	; 1
     be8:	10 82       	st	Z, r1
     bea:	31 97       	sbiw	r30, 0x01	; 1
     bec:	60 e8       	ldi	r22, 0x80	; 128
     bee:	60 83       	st	Z, r22
     bf0:	31 97       	sbiw	r30, 0x01	; 1
     bf2:	10 82       	st	Z, r1
     bf4:	31 97       	sbiw	r30, 0x01	; 1
     bf6:	10 82       	st	Z, r1
     bf8:	31 97       	sbiw	r30, 0x01	; 1
     bfa:	10 82       	st	Z, r1
     bfc:	31 97       	sbiw	r30, 0x01	; 1
     bfe:	62 e0       	ldi	r22, 0x02	; 2
     c00:	60 83       	st	Z, r22
     c02:	31 97       	sbiw	r30, 0x01	; 1
     c04:	63 e0       	ldi	r22, 0x03	; 3
     c06:	60 83       	st	Z, r22
     c08:	31 97       	sbiw	r30, 0x01	; 1
     c0a:	64 e0       	ldi	r22, 0x04	; 4
     c0c:	60 83       	st	Z, r22
     c0e:	31 97       	sbiw	r30, 0x01	; 1
     c10:	65 e0       	ldi	r22, 0x05	; 5
     c12:	60 83       	st	Z, r22
     c14:	31 97       	sbiw	r30, 0x01	; 1
     c16:	66 e0       	ldi	r22, 0x06	; 6
     c18:	60 83       	st	Z, r22
     c1a:	31 97       	sbiw	r30, 0x01	; 1
     c1c:	67 e0       	ldi	r22, 0x07	; 7
     c1e:	60 83       	st	Z, r22
     c20:	31 97       	sbiw	r30, 0x01	; 1
     c22:	68 e0       	ldi	r22, 0x08	; 8
     c24:	60 83       	st	Z, r22
     c26:	31 97       	sbiw	r30, 0x01	; 1
     c28:	69 e0       	ldi	r22, 0x09	; 9
     c2a:	60 83       	st	Z, r22
     c2c:	31 97       	sbiw	r30, 0x01	; 1
     c2e:	60 e1       	ldi	r22, 0x10	; 16
     c30:	60 83       	st	Z, r22
     c32:	31 97       	sbiw	r30, 0x01	; 1
     c34:	30 83       	st	Z, r19
     c36:	31 97       	sbiw	r30, 0x01	; 1
     c38:	32 e1       	ldi	r19, 0x12	; 18
     c3a:	30 83       	st	Z, r19
     c3c:	31 97       	sbiw	r30, 0x01	; 1
     c3e:	33 e1       	ldi	r19, 0x13	; 19
     c40:	30 83       	st	Z, r19
     c42:	31 97       	sbiw	r30, 0x01	; 1
     c44:	34 e1       	ldi	r19, 0x14	; 20
     c46:	30 83       	st	Z, r19
     c48:	31 97       	sbiw	r30, 0x01	; 1
     c4a:	35 e1       	ldi	r19, 0x15	; 21
     c4c:	30 83       	st	Z, r19
     c4e:	31 97       	sbiw	r30, 0x01	; 1
     c50:	36 e1       	ldi	r19, 0x16	; 22
     c52:	30 83       	st	Z, r19
     c54:	31 97       	sbiw	r30, 0x01	; 1
     c56:	37 e1       	ldi	r19, 0x17	; 23
     c58:	30 83       	st	Z, r19
     c5a:	31 97       	sbiw	r30, 0x01	; 1
     c5c:	38 e1       	ldi	r19, 0x18	; 24
     c5e:	30 83       	st	Z, r19
     c60:	31 97       	sbiw	r30, 0x01	; 1
     c62:	39 e1       	ldi	r19, 0x19	; 25
     c64:	30 83       	st	Z, r19
     c66:	31 97       	sbiw	r30, 0x01	; 1
     c68:	30 e2       	ldi	r19, 0x20	; 32
     c6a:	30 83       	st	Z, r19
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	31 e2       	ldi	r19, 0x21	; 33
     c70:	30 83       	st	Z, r19
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	20 83       	st	Z, r18
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	23 e2       	ldi	r18, 0x23	; 35
     c7a:	20 83       	st	Z, r18
     c7c:	31 97       	sbiw	r30, 0x01	; 1
     c7e:	40 83       	st	Z, r20
     c80:	31 97       	sbiw	r30, 0x01	; 1
     c82:	50 83       	st	Z, r21
     c84:	31 97       	sbiw	r30, 0x01	; 1
     c86:	26 e2       	ldi	r18, 0x26	; 38
     c88:	20 83       	st	Z, r18
     c8a:	31 97       	sbiw	r30, 0x01	; 1
     c8c:	27 e2       	ldi	r18, 0x27	; 39
     c8e:	20 83       	st	Z, r18
     c90:	31 97       	sbiw	r30, 0x01	; 1
     c92:	28 e2       	ldi	r18, 0x28	; 40
     c94:	20 83       	st	Z, r18
     c96:	31 97       	sbiw	r30, 0x01	; 1
     c98:	29 e2       	ldi	r18, 0x29	; 41
     c9a:	20 83       	st	Z, r18
     c9c:	31 97       	sbiw	r30, 0x01	; 1
     c9e:	20 e3       	ldi	r18, 0x30	; 48
     ca0:	20 83       	st	Z, r18
     ca2:	31 97       	sbiw	r30, 0x01	; 1
     ca4:	21 e3       	ldi	r18, 0x31	; 49
     ca6:	20 83       	st	Z, r18
     ca8:	89 97       	sbiw	r24, 0x29	; 41
     caa:	08 95       	ret

00000cac <xPortStartScheduler>:
     cac:	88 ee       	ldi	r24, 0xE8	; 232
     cae:	93 e0       	ldi	r25, 0x03	; 3
     cb0:	a0 e0       	ldi	r26, 0x00	; 0
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	80 93 e3 07 	sts	0x07E3, r24	; 0x8007e3 <portTickRateHz>
     cb8:	90 93 e4 07 	sts	0x07E4, r25	; 0x8007e4 <portTickRateHz+0x1>
     cbc:	a0 93 e5 07 	sts	0x07E5, r26	; 0x8007e5 <portTickRateHz+0x2>
     cc0:	b0 93 e6 07 	sts	0x07E6, r27	; 0x8007e6 <portTickRateHz+0x3>
     cc4:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <ticksRemainingInSec>
     cc8:	90 93 e8 07 	sts	0x07E8, r25	; 0x8007e8 <ticksRemainingInSec+0x1>
     ccc:	a0 93 e9 07 	sts	0x07E9, r26	; 0x8007e9 <ticksRemainingInSec+0x2>
     cd0:	b0 93 ea 07 	sts	0x07EA, r27	; 0x8007ea <ticksRemainingInSec+0x3>
     cd4:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     cd8:	89 ef       	ldi	r24, 0xF9	; 249
     cda:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     cde:	8b e0       	ldi	r24, 0x0B	; 11
     ce0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
     ce4:	e1 e7       	ldi	r30, 0x71	; 113
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	82 60       	ori	r24, 0x02	; 2
     cec:	80 83       	st	Z, r24
     cee:	a0 91 88 07 	lds	r26, 0x0788	; 0x800788 <pxCurrentTCB>
     cf2:	b0 91 89 07 	lds	r27, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
     cf6:	cd 91       	ld	r28, X+
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	dd 91       	ld	r29, X+
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	ff 91       	pop	r31
     d00:	ef 91       	pop	r30
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	bf 91       	pop	r27
     d08:	af 91       	pop	r26
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	7f 91       	pop	r23
     d10:	6f 91       	pop	r22
     d12:	5f 91       	pop	r21
     d14:	4f 91       	pop	r20
     d16:	3f 91       	pop	r19
     d18:	2f 91       	pop	r18
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	ff 90       	pop	r15
     d20:	ef 90       	pop	r14
     d22:	df 90       	pop	r13
     d24:	cf 90       	pop	r12
     d26:	bf 90       	pop	r11
     d28:	af 90       	pop	r10
     d2a:	9f 90       	pop	r9
     d2c:	8f 90       	pop	r8
     d2e:	7f 90       	pop	r7
     d30:	6f 90       	pop	r6
     d32:	5f 90       	pop	r5
     d34:	4f 90       	pop	r4
     d36:	3f 90       	pop	r3
     d38:	2f 90       	pop	r2
     d3a:	1f 90       	pop	r1
     d3c:	0f 90       	pop	r0
     d3e:	0c be       	out	0x3c, r0	; 60
     d40:	0f 90       	pop	r0
     d42:	0b be       	out	0x3b, r0	; 59
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	0f 90       	pop	r0
     d4a:	08 95       	ret
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	08 95       	ret

00000d50 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	0f 92       	push	r0
     d58:	0b b6       	in	r0, 0x3b	; 59
     d5a:	0f 92       	push	r0
     d5c:	0c b6       	in	r0, 0x3c	; 60
     d5e:	0f 92       	push	r0
     d60:	1f 92       	push	r1
     d62:	11 24       	eor	r1, r1
     d64:	2f 92       	push	r2
     d66:	3f 92       	push	r3
     d68:	4f 92       	push	r4
     d6a:	5f 92       	push	r5
     d6c:	6f 92       	push	r6
     d6e:	7f 92       	push	r7
     d70:	8f 92       	push	r8
     d72:	9f 92       	push	r9
     d74:	af 92       	push	r10
     d76:	bf 92       	push	r11
     d78:	cf 92       	push	r12
     d7a:	df 92       	push	r13
     d7c:	ef 92       	push	r14
     d7e:	ff 92       	push	r15
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	2f 93       	push	r18
     d86:	3f 93       	push	r19
     d88:	4f 93       	push	r20
     d8a:	5f 93       	push	r21
     d8c:	6f 93       	push	r22
     d8e:	7f 93       	push	r23
     d90:	8f 93       	push	r24
     d92:	9f 93       	push	r25
     d94:	af 93       	push	r26
     d96:	bf 93       	push	r27
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31
     da0:	a0 91 88 07 	lds	r26, 0x0788	; 0x800788 <pxCurrentTCB>
     da4:	b0 91 89 07 	lds	r27, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
     da8:	0d b6       	in	r0, 0x3d	; 61
     daa:	0d 92       	st	X+, r0
     dac:	0e b6       	in	r0, 0x3e	; 62
     dae:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     db0:	0e 94 09 18 	call	0x3012	; 0x3012 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     db4:	a0 91 88 07 	lds	r26, 0x0788	; 0x800788 <pxCurrentTCB>
     db8:	b0 91 89 07 	lds	r27, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
     dbc:	cd 91       	ld	r28, X+
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	dd 91       	ld	r29, X+
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	bf 91       	pop	r27
     dce:	af 91       	pop	r26
     dd0:	9f 91       	pop	r25
     dd2:	8f 91       	pop	r24
     dd4:	7f 91       	pop	r23
     dd6:	6f 91       	pop	r22
     dd8:	5f 91       	pop	r21
     dda:	4f 91       	pop	r20
     ddc:	3f 91       	pop	r19
     dde:	2f 91       	pop	r18
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	ff 90       	pop	r15
     de6:	ef 90       	pop	r14
     de8:	df 90       	pop	r13
     dea:	cf 90       	pop	r12
     dec:	bf 90       	pop	r11
     dee:	af 90       	pop	r10
     df0:	9f 90       	pop	r9
     df2:	8f 90       	pop	r8
     df4:	7f 90       	pop	r7
     df6:	6f 90       	pop	r6
     df8:	5f 90       	pop	r5
     dfa:	4f 90       	pop	r4
     dfc:	3f 90       	pop	r3
     dfe:	2f 90       	pop	r2
     e00:	1f 90       	pop	r1
     e02:	0f 90       	pop	r0
     e04:	0c be       	out	0x3c, r0	; 60
     e06:	0f 90       	pop	r0
     e08:	0b be       	out	0x3b, r0	; 59
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
     e10:	08 95       	ret

00000e12 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     e12:	0f 92       	push	r0
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	0f 92       	push	r0
     e1a:	0b b6       	in	r0, 0x3b	; 59
     e1c:	0f 92       	push	r0
     e1e:	0c b6       	in	r0, 0x3c	; 60
     e20:	0f 92       	push	r0
     e22:	1f 92       	push	r1
     e24:	11 24       	eor	r1, r1
     e26:	2f 92       	push	r2
     e28:	3f 92       	push	r3
     e2a:	4f 92       	push	r4
     e2c:	5f 92       	push	r5
     e2e:	6f 92       	push	r6
     e30:	7f 92       	push	r7
     e32:	8f 92       	push	r8
     e34:	9f 92       	push	r9
     e36:	af 92       	push	r10
     e38:	bf 92       	push	r11
     e3a:	cf 92       	push	r12
     e3c:	df 92       	push	r13
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	2f 93       	push	r18
     e48:	3f 93       	push	r19
     e4a:	4f 93       	push	r20
     e4c:	5f 93       	push	r21
     e4e:	6f 93       	push	r22
     e50:	7f 93       	push	r23
     e52:	8f 93       	push	r24
     e54:	9f 93       	push	r25
     e56:	af 93       	push	r26
     e58:	bf 93       	push	r27
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
     e62:	a0 91 88 07 	lds	r26, 0x0788	; 0x800788 <pxCurrentTCB>
     e66:	b0 91 89 07 	lds	r27, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
     e6a:	0d b6       	in	r0, 0x3d	; 61
     e6c:	0d 92       	st	X+, r0
     e6e:	0e b6       	in	r0, 0x3e	; 62
     e70:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
     e72:	13 be       	out	0x33, r1	; 51
	// start mark - check for start of interrupt - for debugging only
	PORTD |=  _BV(PORTD7);				// Ping IO line.
#endif

#if !defined(portUSE_TIMER2_RTC)
	if (--ticksRemainingInSec == 0)
     e74:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <ticksRemainingInSec>
     e78:	90 91 e8 07 	lds	r25, 0x07E8	; 0x8007e8 <ticksRemainingInSec+0x1>
     e7c:	a0 91 e9 07 	lds	r26, 0x07E9	; 0x8007e9 <ticksRemainingInSec+0x2>
     e80:	b0 91 ea 07 	lds	r27, 0x07EA	; 0x8007ea <ticksRemainingInSec+0x3>
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	a1 09       	sbc	r26, r1
     e88:	b1 09       	sbc	r27, r1
     e8a:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <ticksRemainingInSec>
     e8e:	90 93 e8 07 	sts	0x07E8, r25	; 0x8007e8 <ticksRemainingInSec+0x1>
     e92:	a0 93 e9 07 	sts	0x07E9, r26	; 0x8007e9 <ticksRemainingInSec+0x2>
     e96:	b0 93 ea 07 	sts	0x07EA, r27	; 0x8007ea <ticksRemainingInSec+0x3>
     e9a:	89 2b       	or	r24, r25
     e9c:	8a 2b       	or	r24, r26
     e9e:	8b 2b       	or	r24, r27
     ea0:	89 f4       	brne	.+34     	; 0xec4 <vPortYieldFromTick+0xb2>
	{
		system_tick();
     ea2:	55 de       	rcall	.-854    	; 0xb4e <system_tick>
		ticksRemainingInSec = portTickRateHz;
     ea4:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <portTickRateHz>
     ea8:	90 91 e4 07 	lds	r25, 0x07E4	; 0x8007e4 <portTickRateHz+0x1>
     eac:	a0 91 e5 07 	lds	r26, 0x07E5	; 0x8007e5 <portTickRateHz+0x2>
     eb0:	b0 91 e6 07 	lds	r27, 0x07E6	; 0x8007e6 <portTickRateHz+0x3>
     eb4:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <ticksRemainingInSec>
     eb8:	90 93 e8 07 	sts	0x07E8, r25	; 0x8007e8 <ticksRemainingInSec+0x1>
     ebc:	a0 93 e9 07 	sts	0x07E9, r26	; 0x8007e9 <ticksRemainingInSec+0x2>
     ec0:	b0 93 ea 07 	sts	0x07EA, r27	; 0x8007ea <ticksRemainingInSec+0x3>
	}
#endif

	if( xTaskIncrementTick() != pdFALSE )
     ec4:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <xTaskIncrementTick>
     ec8:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     eca:	0e 94 09 18 	call	0x3012	; 0x3012 <vTaskSwitchContext>
#if defined(DEBUG_PING)
	// end mark - check for end of interrupt - for debugging only
	PORTD &= ~_BV(PORTD7);
#endif

	portRESTORE_CONTEXT();
     ece:	a0 91 88 07 	lds	r26, 0x0788	; 0x800788 <pxCurrentTCB>
     ed2:	b0 91 89 07 	lds	r27, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
     ed6:	cd 91       	ld	r28, X+
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	dd 91       	ld	r29, X+
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	ff 91       	pop	r31
     ee0:	ef 91       	pop	r30
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	bf 91       	pop	r27
     ee8:	af 91       	pop	r26
     eea:	9f 91       	pop	r25
     eec:	8f 91       	pop	r24
     eee:	7f 91       	pop	r23
     ef0:	6f 91       	pop	r22
     ef2:	5f 91       	pop	r21
     ef4:	4f 91       	pop	r20
     ef6:	3f 91       	pop	r19
     ef8:	2f 91       	pop	r18
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
     f02:	df 90       	pop	r13
     f04:	cf 90       	pop	r12
     f06:	bf 90       	pop	r11
     f08:	af 90       	pop	r10
     f0a:	9f 90       	pop	r9
     f0c:	8f 90       	pop	r8
     f0e:	7f 90       	pop	r7
     f10:	6f 90       	pop	r6
     f12:	5f 90       	pop	r5
     f14:	4f 90       	pop	r4
     f16:	3f 90       	pop	r3
     f18:	2f 90       	pop	r2
     f1a:	1f 90       	pop	r1
     f1c:	0f 90       	pop	r0
     f1e:	0c be       	out	0x3c, r0	; 60
     f20:	0f 90       	pop	r0
     f22:	0b be       	out	0x3b, r0	; 59
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
     f2a:	08 95       	ret

00000f2c <__vector_32>:
	 * count is incremented after the context is saved.
	 */
	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
     f2c:	72 df       	rcall	.-284    	; 0xe12 <vPortYieldFromTick>
		__asm__ __volatile__ ( "reti" );
     f2e:	18 95       	reti

00000f30 <setAnalogMode>:
// For example: if (getMode() == MODE_8_BIT) ...

inline uint8_t getAnalogMode(void)
{
	return (ADMUX >> ADLAR) & 1;
}
     f30:	81 11       	cpse	r24, r1
     f32:	06 c0       	rjmp	.+12     	; 0xf40 <setAnalogMode+0x10>
     f34:	ec e7       	ldi	r30, 0x7C	; 124
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	8f 7d       	andi	r24, 0xDF	; 223
     f3c:	80 83       	st	Z, r24
     f3e:	08 95       	ret
     f40:	ec e7       	ldi	r30, 0x7C	; 124
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	80 62       	ori	r24, 0x20	; 32
     f48:	80 83       	st	Z, r24
     f4a:	08 95       	ret

00000f4c <analogIsConverting>:

// returns 1 if the ADC is in the middle of an conversion, otherwise
// returns 0
inline uint8_t analogIsConverting(void)
{
	return (ADCSRA >> ADSC) & 1;
     f4c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
}
     f50:	86 fb       	bst	r24, 6
     f52:	88 27       	eor	r24, r24
     f54:	80 f9       	bld	r24, 0
     f56:	08 95       	ret

00000f58 <startAnalogConversion>:
//  Orangutan SVP.

inline void startAnalogConversion(uint8_t channel, uint8_t use_internal_reference)
{
	// Channel numbers greater than 15 on 328p or 1284p or 31 on 2560 are invalid.
	if (channel > 0x1F)
     f58:	80 32       	cpi	r24, 0x20	; 32
     f5a:	18 f5       	brcc	.+70     	; 0xfa2 <startAnalogConversion+0x4a>
	{
		return;
	}

	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
     f5c:	97 e8       	ldi	r25, 0x87	; 135
     f5e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	// to channel 0, which can affect the ADC charge capacitor.  For example, if you have a
	// high output impedance voltage on channel 1 and a low output impedance voltage on channel
	// 0, the voltage on channel 0 be briefly applied to the ADC capacitor before every conversion,
	// which could prevent the capacitor from settling to the voltage on channel 1, even over
	// many reads.
	uint8_t tempADMUX = ADMUX;
     f62:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	tempADMUX |= _BV(REFS0);		// Use external capacitor on ARef
	if(use_internal_reference)		// Note: internal reference should NOT be used on devices
     f66:	66 23       	and	r22, r22
     f68:	11 f0       	breq	.+4      	; 0xf6e <startAnalogConversion+0x16>
	{								//  where AREF is connected to an external voltage!
		// use the internal voltage reference
		tempADMUX |= _BV(REFS1);	// Internal reference: 1.1 V on ATmega48/168/328; 2.56 V on ATmega324/644/1284
     f6a:	90 6c       	ori	r25, 0xC0	; 192
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <startAnalogConversion+0x1a>
     f6e:	9f 77       	andi	r25, 0x7F	; 127
	}
	else
	{
		// use AVcc as a reference
		tempADMUX &= ~_BV(REFS1);	// External reference: on AVcc
     f70:	90 64       	ori	r25, 0x40	; 64
	}

	tempADMUX &= ~0x1F;		 // clear channel selection bits of ADMUX
     f72:	90 7e       	andi	r25, 0xE0	; 224
	#ifdef MUX5
	if (channel > 7) {
     f74:	88 30       	cpi	r24, 0x08	; 8
     f76:	40 f0       	brcs	.+16     	; 0xf88 <startAnalogConversion+0x30>
		ADCSRB |= _BV(MUX5);
     f78:	eb e7       	ldi	r30, 0x7B	; 123
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	20 81       	ld	r18, Z
     f7e:	28 60       	ori	r18, 0x08	; 8
     f80:	20 83       	st	Z, r18
		tempADMUX |= channel - 8; 
     f82:	88 50       	subi	r24, 0x08	; 8
     f84:	89 2b       	or	r24, r25
     f86:	06 c0       	rjmp	.+12     	; 0xf94 <startAnalogConversion+0x3c>
		} else {
		ADCSRB &= ~(_BV(MUX5));
     f88:	eb e7       	ldi	r30, 0x7B	; 123
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	20 81       	ld	r18, Z
     f8e:	27 7f       	andi	r18, 0xF7	; 247
     f90:	20 83       	st	Z, r18
		tempADMUX |= channel;
     f92:	89 2b       	or	r24, r25
	}
	#endif
	
	   // we only get this far if channel is less than 32
	ADMUX = tempADMUX;
     f94:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA |= _BV(ADSC); // start the conversion
     f98:	ea e7       	ldi	r30, 0x7A	; 122
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	80 64       	ori	r24, 0x40	; 64
     fa0:	80 83       	st	Z, r24
     fa2:	08 95       	ret

00000fa4 <analogConversionResult>:
// MODE_8_BIT and MODE_10_BIT:
// For example: if (getMode() == MODE_8_BIT) ...

inline uint8_t getAnalogMode(void)
{
	return (ADMUX >> ADLAR) & 1;
     fa4:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
}

// returns the result of the previous ADC conversion.
inline uint16_t analogConversionResult(void)
{
	if (getAnalogMode())				// if left-adjusted (i.e. 8-bit mode)
     fa8:	85 ff       	sbrs	r24, 5
     faa:	04 c0       	rjmp	.+8      	; 0xfb4 <analogConversionResult+0x10>
	{
		return (uint16_t) ADCH;			// 8-bit result
     fac:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	08 95       	ret
	}
	else
	{
		return ADC;				// 10-bit result
     fb4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     fb8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	}
}
     fbc:	08 95       	ret

00000fbe <vApplicationIdleHook>:
	// The corresponding PIN Register bit will always read as zero when this bit is set. When an
	// analogue signal is applied to the ADC7..0 pin and the digital input from this pin is not needed, this
	// bit should be written logic one to reduce power consumption in the digital input buffer.

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
	DIDR0 = 0xFF;
     fbe:	8f ef       	ldi	r24, 0xFF	; 255
     fc0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xFF;
     fc4:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	// When the ACD bit is written logic one, the power to the Analogue Comparator is switched off.
	// This bit can be set at any time to turn off the Analogue Comparator.
	// This will reduce power consumption in Active and Idle mode.
	// When changing the ACD bit, the Analogue Comparator Interrupt must be disabled by clearing the ACIE bit in ACSR.
	// Otherwise an interrupt can occur when the ACD bit is changed.
	ACSR &= ~_BV(ACIE);
     fc8:	80 b7       	in	r24, 0x30	; 48
     fca:	87 7f       	andi	r24, 0xF7	; 247
     fcc:	80 bf       	out	0x30, r24	; 48
	ACSR |=  _BV(ACD);
     fce:	80 b7       	in	r24, 0x30	; 48
     fd0:	80 68       	ori	r24, 0x80	; 128
     fd2:	80 bf       	out	0x30, r24	; 48
	// SLEEP_MODE_PWR_DOWN     _BV(SM1)
	// SLEEP_MODE_PWR_SAVE     (_BV(SM0) | _BV(SM1))
	// SLEEP_MODE_STANDBY      (_BV(SM1) | _BV(SM2))
	// SLEEP_MODE_EXT_STANDBY  (_BV(SM0) | _BV(SM1) | _BV(SM2))

	set_sleep_mode( SLEEP_MODE_IDLE );
     fd4:	83 b7       	in	r24, 0x33	; 51
     fd6:	81 7f       	andi	r24, 0xF1	; 241
     fd8:	83 bf       	out	0x33, r24	; 51

	portENTER_CRITICAL();
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	0f 92       	push	r0
	sleep_enable();
     fe0:	83 b7       	in	r24, 0x33	; 51
     fe2:	81 60       	ori	r24, 0x01	; 1
     fe4:	83 bf       	out	0x33, r24	; 51

#if defined(BODS) && defined(BODSE) // only if there is support to disable the BOD.
	sleep_bod_disable();
#endif

	portEXIT_CRITICAL();
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
	sleep_cpu();		// good night.
     fea:	88 95       	sleep

	sleep_reset();		// reset the sleep_mode() faster than sleep_disable();
     fec:	13 be       	out	0x33, r1	; 51
     fee:	08 95       	ret

00000ff0 <vApplicationMallocFailedHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
     ff0:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     ff2:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ff4:	00 00       	nop
	for(;;)
	{
		_delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
     ff6:	1f 9a       	sbi	0x03, 7	; 3
     ff8:	fd cf       	rjmp	.-6      	; 0xff4 <vApplicationMallocFailedHook+0x4>

00000ffa <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
     ffa:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     ffc:	2f 9a       	sbi	0x05, 7	; 5
     ffe:	00 c0       	rjmp	.+0      	; 0x1000 <vApplicationStackOverflowHook+0x6>
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    1000:	1f 9a       	sbi	0x03, 7	; 3
    1002:	fd cf       	rjmp	.-6      	; 0xffe <vApplicationStackOverflowHook+0x4>

00001004 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1004:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1006:	03 96       	adiw	r24, 0x03	; 3
    1008:	92 83       	std	Z+2, r25	; 0x02
    100a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    100c:	4f ef       	ldi	r20, 0xFF	; 255
    100e:	5f ef       	ldi	r21, 0xFF	; 255
    1010:	ba 01       	movw	r22, r20
    1012:	43 83       	std	Z+3, r20	; 0x03
    1014:	54 83       	std	Z+4, r21	; 0x04
    1016:	65 83       	std	Z+5, r22	; 0x05
    1018:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    101a:	90 87       	std	Z+8, r25	; 0x08
    101c:	87 83       	std	Z+7, r24	; 0x07
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    101e:	92 87       	std	Z+10, r25	; 0x0a
    1020:	81 87       	std	Z+9, r24	; 0x09

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1022:	10 82       	st	Z, r1
    1024:	08 95       	ret

00001026 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1026:	fc 01       	movw	r30, r24
    1028:	13 86       	std	Z+11, r1	; 0x0b
    102a:	12 86       	std	Z+10, r1	; 0x0a
    102c:	08 95       	ret

0000102e <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	9c 01       	movw	r18, r24
    1034:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1036:	dc 01       	movw	r26, r24
    1038:	11 96       	adiw	r26, 0x01	; 1
    103a:	cd 91       	ld	r28, X+
    103c:	dc 91       	ld	r29, X
    103e:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1040:	d5 83       	std	Z+5, r29	; 0x05
    1042:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1044:	8e 81       	ldd	r24, Y+6	; 0x06
    1046:	9f 81       	ldd	r25, Y+7	; 0x07
    1048:	97 83       	std	Z+7, r25	; 0x07
    104a:	86 83       	std	Z+6, r24	; 0x06

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    104c:	8e 81       	ldd	r24, Y+6	; 0x06
    104e:	9f 81       	ldd	r25, Y+7	; 0x07
    1050:	dc 01       	movw	r26, r24
    1052:	15 96       	adiw	r26, 0x05	; 5
    1054:	7c 93       	st	X, r23
    1056:	6e 93       	st	-X, r22
    1058:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxPrevious = pxNewListItem;
    105a:	7f 83       	std	Y+7, r23	; 0x07
    105c:	6e 83       	std	Y+6, r22	; 0x06

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    105e:	33 87       	std	Z+11, r19	; 0x0b
    1060:	22 87       	std	Z+10, r18	; 0x0a

	( pxList->uxNumberOfItems )++;
    1062:	f9 01       	movw	r30, r18
    1064:	80 81       	ld	r24, Z
    1066:	8f 5f       	subi	r24, 0xFF	; 255
    1068:	80 83       	st	Z, r24
}
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	08 95       	ret

00001070 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    107a:	08 81       	ld	r16, Y
    107c:	19 81       	ldd	r17, Y+1	; 0x01
    107e:	2a 81       	ldd	r18, Y+2	; 0x02
    1080:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1082:	0f 3f       	cpi	r16, 0xFF	; 255
    1084:	4f ef       	ldi	r20, 0xFF	; 255
    1086:	14 07       	cpc	r17, r20
    1088:	24 07       	cpc	r18, r20
    108a:	34 07       	cpc	r19, r20
    108c:	21 f4       	brne	.+8      	; 0x1096 <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    108e:	fc 01       	movw	r30, r24
    1090:	a1 85       	ldd	r26, Z+9	; 0x09
    1092:	b2 85       	ldd	r27, Z+10	; 0x0a
    1094:	11 c0       	rjmp	.+34     	; 0x10b8 <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1096:	dc 01       	movw	r26, r24
    1098:	13 96       	adiw	r26, 0x03	; 3
    109a:	01 c0       	rjmp	.+2      	; 0x109e <vListInsert+0x2e>
    109c:	df 01       	movw	r26, r30
    109e:	14 96       	adiw	r26, 0x04	; 4
    10a0:	ed 91       	ld	r30, X+
    10a2:	fc 91       	ld	r31, X
    10a4:	15 97       	sbiw	r26, 0x05	; 5
    10a6:	40 81       	ld	r20, Z
    10a8:	51 81       	ldd	r21, Z+1	; 0x01
    10aa:	62 81       	ldd	r22, Z+2	; 0x02
    10ac:	73 81       	ldd	r23, Z+3	; 0x03
    10ae:	04 17       	cp	r16, r20
    10b0:	15 07       	cpc	r17, r21
    10b2:	26 07       	cpc	r18, r22
    10b4:	37 07       	cpc	r19, r23
    10b6:	90 f7       	brcc	.-28     	; 0x109c <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    10b8:	14 96       	adiw	r26, 0x04	; 4
    10ba:	ed 91       	ld	r30, X+
    10bc:	fc 91       	ld	r31, X
    10be:	15 97       	sbiw	r26, 0x05	; 5
    10c0:	fd 83       	std	Y+5, r31	; 0x05
    10c2:	ec 83       	std	Y+4, r30	; 0x04
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    10c4:	d7 83       	std	Z+7, r29	; 0x07
    10c6:	c6 83       	std	Z+6, r28	; 0x06
	pxNewListItem->pxPrevious = pxIterator;
    10c8:	bf 83       	std	Y+7, r27	; 0x07
    10ca:	ae 83       	std	Y+6, r26	; 0x06
	pxIterator->pxNext = pxNewListItem;
    10cc:	15 96       	adiw	r26, 0x05	; 5
    10ce:	dc 93       	st	X, r29
    10d0:	ce 93       	st	-X, r28
    10d2:	14 97       	sbiw	r26, 0x04	; 4

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    10d4:	9b 87       	std	Y+11, r25	; 0x0b
    10d6:	8a 87       	std	Y+10, r24	; 0x0a

	( pxList->uxNumberOfItems )++;
    10d8:	fc 01       	movw	r30, r24
    10da:	20 81       	ld	r18, Z
    10dc:	2f 5f       	subi	r18, 0xFF	; 255
    10de:	20 83       	st	Z, r18
}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	08 95       	ret

000010ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    10f0:	a2 85       	ldd	r26, Z+10	; 0x0a
    10f2:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    10f4:	c4 81       	ldd	r28, Z+4	; 0x04
    10f6:	d5 81       	ldd	r29, Z+5	; 0x05
    10f8:	86 81       	ldd	r24, Z+6	; 0x06
    10fa:	97 81       	ldd	r25, Z+7	; 0x07
    10fc:	9f 83       	std	Y+7, r25	; 0x07
    10fe:	8e 83       	std	Y+6, r24	; 0x06
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1100:	c6 81       	ldd	r28, Z+6	; 0x06
    1102:	d7 81       	ldd	r29, Z+7	; 0x07
    1104:	84 81       	ldd	r24, Z+4	; 0x04
    1106:	95 81       	ldd	r25, Z+5	; 0x05
    1108:	9d 83       	std	Y+5, r25	; 0x05
    110a:	8c 83       	std	Y+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    110c:	11 96       	adiw	r26, 0x01	; 1
    110e:	8d 91       	ld	r24, X+
    1110:	9c 91       	ld	r25, X
    1112:	12 97       	sbiw	r26, 0x02	; 2
    1114:	e8 17       	cp	r30, r24
    1116:	f9 07       	cpc	r31, r25
    1118:	31 f4       	brne	.+12     	; 0x1126 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    111a:	86 81       	ldd	r24, Z+6	; 0x06
    111c:	97 81       	ldd	r25, Z+7	; 0x07
    111e:	12 96       	adiw	r26, 0x02	; 2
    1120:	9c 93       	st	X, r25
    1122:	8e 93       	st	-X, r24
    1124:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1126:	13 86       	std	Z+11, r1	; 0x0b
    1128:	12 86       	std	Z+10, r1	; 0x0a
	( pxList->uxNumberOfItems )--;
    112a:	8c 91       	ld	r24, X
    112c:	81 50       	subi	r24, 0x01	; 1
    112e:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
    1130:	8c 91       	ld	r24, X
}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	0f 92       	push	r0
    113e:	fc 01       	movw	r30, r24
    1140:	96 8d       	ldd	r25, Z+30	; 0x1e
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	91 11       	cpse	r25, r1
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	08 95       	ret

0000114e <prvCopyDataToQueue>:
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	ec 01       	movw	r28, r24
    1158:	04 2f       	mov	r16, r20
    115a:	1e 8d       	ldd	r17, Y+30	; 0x1e
    115c:	48 a1       	ldd	r20, Y+32	; 0x20
    115e:	41 11       	cpse	r20, r1
    1160:	0c c0       	rjmp	.+24     	; 0x117a <prvCopyDataToQueue+0x2c>
    1162:	88 81       	ld	r24, Y
    1164:	99 81       	ldd	r25, Y+1	; 0x01
    1166:	89 2b       	or	r24, r25
    1168:	09 f0       	breq	.+2      	; 0x116c <prvCopyDataToQueue+0x1e>
    116a:	42 c0       	rjmp	.+132    	; 0x11f0 <prvCopyDataToQueue+0xa2>
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	9b 81       	ldd	r25, Y+3	; 0x03
    1170:	0e 94 2a 1a 	call	0x3454	; 0x3454 <xTaskPriorityDisinherit>
    1174:	1b 82       	std	Y+3, r1	; 0x03
    1176:	1a 82       	std	Y+2, r1	; 0x02
    1178:	42 c0       	rjmp	.+132    	; 0x11fe <prvCopyDataToQueue+0xb0>
    117a:	01 11       	cpse	r16, r1
    117c:	17 c0       	rjmp	.+46     	; 0x11ac <prvCopyDataToQueue+0x5e>
    117e:	50 e0       	ldi	r21, 0x00	; 0
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	9d 81       	ldd	r25, Y+5	; 0x05
    1184:	0e 94 5f 5a 	call	0xb4be	; 0xb4be <memcpy>
    1188:	28 a1       	ldd	r18, Y+32	; 0x20
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	9d 81       	ldd	r25, Y+5	; 0x05
    118e:	82 0f       	add	r24, r18
    1190:	91 1d       	adc	r25, r1
    1192:	9d 83       	std	Y+5, r25	; 0x05
    1194:	8c 83       	std	Y+4, r24	; 0x04
    1196:	2a 81       	ldd	r18, Y+2	; 0x02
    1198:	3b 81       	ldd	r19, Y+3	; 0x03
    119a:	82 17       	cp	r24, r18
    119c:	93 07       	cpc	r25, r19
    119e:	50 f1       	brcs	.+84     	; 0x11f4 <prvCopyDataToQueue+0xa6>
    11a0:	88 81       	ld	r24, Y
    11a2:	99 81       	ldd	r25, Y+1	; 0x01
    11a4:	9d 83       	std	Y+5, r25	; 0x05
    11a6:	8c 83       	std	Y+4, r24	; 0x04
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	29 c0       	rjmp	.+82     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11ac:	50 e0       	ldi	r21, 0x00	; 0
    11ae:	8e 81       	ldd	r24, Y+6	; 0x06
    11b0:	9f 81       	ldd	r25, Y+7	; 0x07
    11b2:	0e 94 5f 5a 	call	0xb4be	; 0xb4be <memcpy>
    11b6:	88 a1       	ldd	r24, Y+32	; 0x20
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	91 95       	neg	r25
    11bc:	81 95       	neg	r24
    11be:	91 09       	sbc	r25, r1
    11c0:	2e 81       	ldd	r18, Y+6	; 0x06
    11c2:	3f 81       	ldd	r19, Y+7	; 0x07
    11c4:	28 0f       	add	r18, r24
    11c6:	39 1f       	adc	r19, r25
    11c8:	3f 83       	std	Y+7, r19	; 0x07
    11ca:	2e 83       	std	Y+6, r18	; 0x06
    11cc:	48 81       	ld	r20, Y
    11ce:	59 81       	ldd	r21, Y+1	; 0x01
    11d0:	24 17       	cp	r18, r20
    11d2:	35 07       	cpc	r19, r21
    11d4:	30 f4       	brcc	.+12     	; 0x11e2 <prvCopyDataToQueue+0x94>
    11d6:	2a 81       	ldd	r18, Y+2	; 0x02
    11d8:	3b 81       	ldd	r19, Y+3	; 0x03
    11da:	82 0f       	add	r24, r18
    11dc:	93 1f       	adc	r25, r19
    11de:	9f 83       	std	Y+7, r25	; 0x07
    11e0:	8e 83       	std	Y+6, r24	; 0x06
    11e2:	02 30       	cpi	r16, 0x02	; 2
    11e4:	49 f4       	brne	.+18     	; 0x11f8 <prvCopyDataToQueue+0xaa>
    11e6:	11 23       	and	r17, r17
    11e8:	49 f0       	breq	.+18     	; 0x11fc <prvCopyDataToQueue+0xae>
    11ea:	11 50       	subi	r17, 0x01	; 1
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	07 c0       	rjmp	.+14     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	05 c0       	rjmp	.+10     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <prvCopyDataToQueue+0xb0>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	1f 5f       	subi	r17, 0xFF	; 255
    1200:	1e 8f       	std	Y+30, r17	; 0x1e
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	08 95       	ret

0000120c <prvCopyDataFromQueue>:
    120c:	fc 01       	movw	r30, r24
    120e:	40 a1       	ldd	r20, Z+32	; 0x20
    1210:	44 23       	and	r20, r20
    1212:	a9 f0       	breq	.+42     	; 0x123e <prvCopyDataFromQueue+0x32>
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	26 81       	ldd	r18, Z+6	; 0x06
    1218:	37 81       	ldd	r19, Z+7	; 0x07
    121a:	24 0f       	add	r18, r20
    121c:	35 1f       	adc	r19, r21
    121e:	37 83       	std	Z+7, r19	; 0x07
    1220:	26 83       	std	Z+6, r18	; 0x06
    1222:	82 81       	ldd	r24, Z+2	; 0x02
    1224:	93 81       	ldd	r25, Z+3	; 0x03
    1226:	28 17       	cp	r18, r24
    1228:	39 07       	cpc	r19, r25
    122a:	20 f0       	brcs	.+8      	; 0x1234 <prvCopyDataFromQueue+0x28>
    122c:	80 81       	ld	r24, Z
    122e:	91 81       	ldd	r25, Z+1	; 0x01
    1230:	97 83       	std	Z+7, r25	; 0x07
    1232:	86 83       	std	Z+6, r24	; 0x06
    1234:	cb 01       	movw	r24, r22
    1236:	66 81       	ldd	r22, Z+6	; 0x06
    1238:	77 81       	ldd	r23, Z+7	; 0x07
    123a:	0c 94 5f 5a 	jmp	0xb4be	; 0xb4be <memcpy>
    123e:	08 95       	ret

00001240 <prvUnlockQueue>:
    1240:	ef 92       	push	r14
    1242:	ff 92       	push	r15
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	8c 01       	movw	r16, r24
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	0f 92       	push	r0
    1252:	fc 01       	movw	r30, r24
    1254:	c2 a1       	ldd	r28, Z+34	; 0x22
    1256:	1c 16       	cp	r1, r28
    1258:	ac f4       	brge	.+42     	; 0x1284 <prvUnlockQueue+0x44>
    125a:	83 89       	ldd	r24, Z+19	; 0x13
    125c:	81 11       	cpse	r24, r1
    125e:	06 c0       	rjmp	.+12     	; 0x126c <prvUnlockQueue+0x2c>
    1260:	11 c0       	rjmp	.+34     	; 0x1284 <prvUnlockQueue+0x44>
    1262:	f8 01       	movw	r30, r16
    1264:	83 89       	ldd	r24, Z+19	; 0x13
    1266:	81 11       	cpse	r24, r1
    1268:	05 c0       	rjmp	.+10     	; 0x1274 <prvUnlockQueue+0x34>
    126a:	0c c0       	rjmp	.+24     	; 0x1284 <prvUnlockQueue+0x44>
    126c:	78 01       	movw	r14, r16
    126e:	f3 e1       	ldi	r31, 0x13	; 19
    1270:	ef 0e       	add	r14, r31
    1272:	f1 1c       	adc	r15, r1
    1274:	c7 01       	movw	r24, r14
    1276:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    127a:	81 11       	cpse	r24, r1
    127c:	0e 94 aa 19 	call	0x3354	; 0x3354 <vTaskMissedYield>
    1280:	c1 50       	subi	r28, 0x01	; 1
    1282:	79 f7       	brne	.-34     	; 0x1262 <prvUnlockQueue+0x22>
    1284:	8f ef       	ldi	r24, 0xFF	; 255
    1286:	f8 01       	movw	r30, r16
    1288:	82 a3       	std	Z+34, r24	; 0x22
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	0f 92       	push	r0
    1294:	c1 a1       	ldd	r28, Z+33	; 0x21
    1296:	1c 16       	cp	r1, r28
    1298:	ac f4       	brge	.+42     	; 0x12c4 <prvUnlockQueue+0x84>
    129a:	80 85       	ldd	r24, Z+8	; 0x08
    129c:	81 11       	cpse	r24, r1
    129e:	06 c0       	rjmp	.+12     	; 0x12ac <prvUnlockQueue+0x6c>
    12a0:	11 c0       	rjmp	.+34     	; 0x12c4 <prvUnlockQueue+0x84>
    12a2:	f8 01       	movw	r30, r16
    12a4:	80 85       	ldd	r24, Z+8	; 0x08
    12a6:	81 11       	cpse	r24, r1
    12a8:	05 c0       	rjmp	.+10     	; 0x12b4 <prvUnlockQueue+0x74>
    12aa:	0c c0       	rjmp	.+24     	; 0x12c4 <prvUnlockQueue+0x84>
    12ac:	78 01       	movw	r14, r16
    12ae:	f8 e0       	ldi	r31, 0x08	; 8
    12b0:	ef 0e       	add	r14, r31
    12b2:	f1 1c       	adc	r15, r1
    12b4:	c7 01       	movw	r24, r14
    12b6:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    12ba:	81 11       	cpse	r24, r1
    12bc:	0e 94 aa 19 	call	0x3354	; 0x3354 <vTaskMissedYield>
    12c0:	c1 50       	subi	r28, 0x01	; 1
    12c2:	79 f7       	brne	.-34     	; 0x12a2 <prvUnlockQueue+0x62>
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	f8 01       	movw	r30, r16
    12c8:	81 a3       	std	Z+33, r24	; 0x21
    12ca:	0f 90       	pop	r0
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	ff 90       	pop	r15
    12d6:	ef 90       	pop	r14
    12d8:	08 95       	ret

000012da <xQueueGenericReset>:
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	ec 01       	movw	r28, r24
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	0f 92       	push	r0
    12e6:	48 81       	ld	r20, Y
    12e8:	59 81       	ldd	r21, Y+1	; 0x01
    12ea:	28 a1       	ldd	r18, Y+32	; 0x20
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	7f 8d       	ldd	r23, Y+31	; 0x1f
    12f0:	72 9f       	mul	r23, r18
    12f2:	c0 01       	movw	r24, r0
    12f4:	73 9f       	mul	r23, r19
    12f6:	90 0d       	add	r25, r0
    12f8:	11 24       	eor	r1, r1
    12fa:	fa 01       	movw	r30, r20
    12fc:	e8 0f       	add	r30, r24
    12fe:	f9 1f       	adc	r31, r25
    1300:	fb 83       	std	Y+3, r31	; 0x03
    1302:	ea 83       	std	Y+2, r30	; 0x02
    1304:	1e 8e       	std	Y+30, r1	; 0x1e
    1306:	5d 83       	std	Y+5, r21	; 0x05
    1308:	4c 83       	std	Y+4, r20	; 0x04
    130a:	82 1b       	sub	r24, r18
    130c:	93 0b       	sbc	r25, r19
    130e:	84 0f       	add	r24, r20
    1310:	95 1f       	adc	r25, r21
    1312:	9f 83       	std	Y+7, r25	; 0x07
    1314:	8e 83       	std	Y+6, r24	; 0x06
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	89 a3       	std	Y+33, r24	; 0x21
    131a:	8a a3       	std	Y+34, r24	; 0x22
    131c:	61 11       	cpse	r22, r1
    131e:	0b c0       	rjmp	.+22     	; 0x1336 <xQueueGenericReset+0x5c>
    1320:	88 85       	ldd	r24, Y+8	; 0x08
    1322:	88 23       	and	r24, r24
    1324:	71 f0       	breq	.+28     	; 0x1342 <xQueueGenericReset+0x68>
    1326:	ce 01       	movw	r24, r28
    1328:	08 96       	adiw	r24, 0x08	; 8
    132a:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    132e:	88 23       	and	r24, r24
    1330:	41 f0       	breq	.+16     	; 0x1342 <xQueueGenericReset+0x68>
    1332:	0e dd       	rcall	.-1508   	; 0xd50 <vPortYield>
    1334:	06 c0       	rjmp	.+12     	; 0x1342 <xQueueGenericReset+0x68>
    1336:	ce 01       	movw	r24, r28
    1338:	08 96       	adiw	r24, 0x08	; 8
    133a:	64 de       	rcall	.-824    	; 0x1004 <vListInitialise>
    133c:	ce 01       	movw	r24, r28
    133e:	43 96       	adiw	r24, 0x13	; 19
    1340:	61 de       	rcall	.-830    	; 0x1004 <vListInitialise>
    1342:	0f 90       	pop	r0
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	08 95       	ret

0000134e <xQueueGenericCreate>:
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	08 2f       	mov	r16, r24
    1358:	16 2f       	mov	r17, r22
    135a:	66 23       	and	r22, r22
    135c:	b1 f0       	breq	.+44     	; 0x138a <xQueueGenericCreate+0x3c>
    135e:	86 9f       	mul	r24, r22
    1360:	c0 01       	movw	r24, r0
    1362:	11 24       	eor	r1, r1
    1364:	83 96       	adiw	r24, 0x23	; 35
    1366:	0f dc       	rcall	.-2018   	; 0xb86 <pvPortMalloc>
    1368:	ec 01       	movw	r28, r24
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	39 f4       	brne	.+14     	; 0x137c <xQueueGenericCreate+0x2e>
    136e:	13 c0       	rjmp	.+38     	; 0x1396 <xQueueGenericCreate+0x48>
    1370:	0f 8f       	std	Y+31, r16	; 0x1f
    1372:	18 a3       	std	Y+32, r17	; 0x20
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	ce 01       	movw	r24, r28
    1378:	b0 df       	rcall	.-160    	; 0x12da <xQueueGenericReset>
    137a:	0d c0       	rjmp	.+26     	; 0x1396 <xQueueGenericCreate+0x48>
    137c:	83 96       	adiw	r24, 0x23	; 35
    137e:	99 83       	std	Y+1, r25	; 0x01
    1380:	88 83       	st	Y, r24
    1382:	f6 cf       	rjmp	.-20     	; 0x1370 <xQueueGenericCreate+0x22>
    1384:	d9 83       	std	Y+1, r29	; 0x01
    1386:	c8 83       	st	Y, r28
    1388:	f3 cf       	rjmp	.-26     	; 0x1370 <xQueueGenericCreate+0x22>
    138a:	83 e2       	ldi	r24, 0x23	; 35
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	fb db       	rcall	.-2058   	; 0xb86 <pvPortMalloc>
    1390:	ec 01       	movw	r28, r24
    1392:	89 2b       	or	r24, r25
    1394:	b9 f7       	brne	.-18     	; 0x1384 <xQueueGenericCreate+0x36>
    1396:	ce 01       	movw	r24, r28
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	08 95       	ret

000013a2 <xQueueGenericSend>:
    13a2:	9f 92       	push	r9
    13a4:	af 92       	push	r10
    13a6:	bf 92       	push	r11
    13a8:	cf 92       	push	r12
    13aa:	df 92       	push	r13
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	29 97       	sbiw	r28, 0x09	; 9
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	7c 01       	movw	r14, r24
    13ca:	5b 01       	movw	r10, r22
    13cc:	2e 83       	std	Y+6, r18	; 0x06
    13ce:	3f 83       	std	Y+7, r19	; 0x07
    13d0:	48 87       	std	Y+8, r20	; 0x08
    13d2:	59 87       	std	Y+9, r21	; 0x09
    13d4:	10 e0       	ldi	r17, 0x00	; 0
    13d6:	99 24       	eor	r9, r9
    13d8:	93 94       	inc	r9
    13da:	6c 01       	movw	r12, r24
    13dc:	88 e0       	ldi	r24, 0x08	; 8
    13de:	c8 0e       	add	r12, r24
    13e0:	d1 1c       	adc	r13, r1
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	0f 92       	push	r0
    13e8:	f7 01       	movw	r30, r14
    13ea:	96 8d       	ldd	r25, Z+30	; 0x1e
    13ec:	87 8d       	ldd	r24, Z+31	; 0x1f
    13ee:	98 17       	cp	r25, r24
    13f0:	10 f0       	brcs	.+4      	; 0x13f6 <xQueueGenericSend+0x54>
    13f2:	02 30       	cpi	r16, 0x02	; 2
    13f4:	b1 f4       	brne	.+44     	; 0x1422 <xQueueGenericSend+0x80>
    13f6:	40 2f       	mov	r20, r16
    13f8:	b5 01       	movw	r22, r10
    13fa:	c7 01       	movw	r24, r14
    13fc:	a8 de       	rcall	.-688    	; 0x114e <prvCopyDataToQueue>
    13fe:	f7 01       	movw	r30, r14
    1400:	93 89       	ldd	r25, Z+19	; 0x13
    1402:	99 23       	and	r25, r25
    1404:	41 f0       	breq	.+16     	; 0x1416 <xQueueGenericSend+0x74>
    1406:	c7 01       	movw	r24, r14
    1408:	43 96       	adiw	r24, 0x13	; 19
    140a:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    140e:	88 23       	and	r24, r24
    1410:	21 f0       	breq	.+8      	; 0x141a <xQueueGenericSend+0x78>
    1412:	9e dc       	rcall	.-1732   	; 0xd50 <vPortYield>
    1414:	02 c0       	rjmp	.+4      	; 0x141a <xQueueGenericSend+0x78>
    1416:	81 11       	cpse	r24, r1
    1418:	9b dc       	rcall	.-1738   	; 0xd50 <vPortYield>
    141a:	0f 90       	pop	r0
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	52 c0       	rjmp	.+164    	; 0x14c6 <xQueueGenericSend+0x124>
    1422:	8e 81       	ldd	r24, Y+6	; 0x06
    1424:	9f 81       	ldd	r25, Y+7	; 0x07
    1426:	a8 85       	ldd	r26, Y+8	; 0x08
    1428:	b9 85       	ldd	r27, Y+9	; 0x09
    142a:	89 2b       	or	r24, r25
    142c:	8a 2b       	or	r24, r26
    142e:	8b 2b       	or	r24, r27
    1430:	21 f4       	brne	.+8      	; 0x143a <xQueueGenericSend+0x98>
    1432:	0f 90       	pop	r0
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	46 c0       	rjmp	.+140    	; 0x14c6 <xQueueGenericSend+0x124>
    143a:	11 11       	cpse	r17, r1
    143c:	05 c0       	rjmp	.+10     	; 0x1448 <xQueueGenericSend+0xa6>
    143e:	ce 01       	movw	r24, r28
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    1446:	19 2d       	mov	r17, r9
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	0f 92       	push	r0
    1456:	f7 01       	movw	r30, r14
    1458:	81 a1       	ldd	r24, Z+33	; 0x21
    145a:	8f 3f       	cpi	r24, 0xFF	; 255
    145c:	09 f4       	brne	.+2      	; 0x1460 <xQueueGenericSend+0xbe>
    145e:	11 a2       	std	Z+33, r1	; 0x21
    1460:	f7 01       	movw	r30, r14
    1462:	82 a1       	ldd	r24, Z+34	; 0x22
    1464:	8f 3f       	cpi	r24, 0xFF	; 255
    1466:	09 f4       	brne	.+2      	; 0x146a <xQueueGenericSend+0xc8>
    1468:	12 a2       	std	Z+34, r1	; 0x22
    146a:	0f 90       	pop	r0
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	be 01       	movw	r22, r28
    1470:	6a 5f       	subi	r22, 0xFA	; 250
    1472:	7f 4f       	sbci	r23, 0xFF	; 255
    1474:	ce 01       	movw	r24, r28
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    147c:	81 11       	cpse	r24, r1
    147e:	1e c0       	rjmp	.+60     	; 0x14bc <xQueueGenericSend+0x11a>
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	0f 92       	push	r0
    1486:	f7 01       	movw	r30, r14
    1488:	96 8d       	ldd	r25, Z+30	; 0x1e
    148a:	87 8d       	ldd	r24, Z+31	; 0x1f
    148c:	0f 90       	pop	r0
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	98 13       	cpse	r25, r24
    1492:	0f c0       	rjmp	.+30     	; 0x14b2 <xQueueGenericSend+0x110>
    1494:	4e 81       	ldd	r20, Y+6	; 0x06
    1496:	5f 81       	ldd	r21, Y+7	; 0x07
    1498:	68 85       	ldd	r22, Y+8	; 0x08
    149a:	79 85       	ldd	r23, Y+9	; 0x09
    149c:	c6 01       	movw	r24, r12
    149e:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    14a2:	c7 01       	movw	r24, r14
    14a4:	cd de       	rcall	.-614    	; 0x1240 <prvUnlockQueue>
    14a6:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14aa:	81 11       	cpse	r24, r1
    14ac:	9a cf       	rjmp	.-204    	; 0x13e2 <xQueueGenericSend+0x40>
    14ae:	50 dc       	rcall	.-1888   	; 0xd50 <vPortYield>
    14b0:	98 cf       	rjmp	.-208    	; 0x13e2 <xQueueGenericSend+0x40>
    14b2:	c7 01       	movw	r24, r14
    14b4:	c5 de       	rcall	.-630    	; 0x1240 <prvUnlockQueue>
    14b6:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14ba:	93 cf       	rjmp	.-218    	; 0x13e2 <xQueueGenericSend+0x40>
    14bc:	c7 01       	movw	r24, r14
    14be:	c0 de       	rcall	.-640    	; 0x1240 <prvUnlockQueue>
    14c0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	29 96       	adiw	r28, 0x09	; 9
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	ff 90       	pop	r15
    14dc:	ef 90       	pop	r14
    14de:	df 90       	pop	r13
    14e0:	cf 90       	pop	r12
    14e2:	bf 90       	pop	r11
    14e4:	af 90       	pop	r10
    14e6:	9f 90       	pop	r9
    14e8:	08 95       	ret

000014ea <xQueueCreateMutex>:
    14ea:	0f 93       	push	r16
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	48 2f       	mov	r20, r24
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	2b df       	rcall	.-426    	; 0x134e <xQueueGenericCreate>
    14f8:	ec 01       	movw	r28, r24
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	61 f0       	breq	.+24     	; 0x1516 <xQueueCreateMutex+0x2c>
    14fe:	1b 82       	std	Y+3, r1	; 0x03
    1500:	1a 82       	std	Y+2, r1	; 0x02
    1502:	19 82       	std	Y+1, r1	; 0x01
    1504:	18 82       	st	Y, r1
    1506:	1e 82       	std	Y+6, r1	; 0x06
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	a9 01       	movw	r20, r18
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	46 df       	rcall	.-372    	; 0x13a2 <xQueueGenericSend>
    1516:	ce 01       	movw	r24, r28
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	0f 91       	pop	r16
    151e:	08 95       	ret

00001520 <xQueueGenericSendFromISR>:
    1520:	ef 92       	push	r14
    1522:	ff 92       	push	r15
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	8a 01       	movw	r16, r20
    152e:	fc 01       	movw	r30, r24
    1530:	56 8d       	ldd	r21, Z+30	; 0x1e
    1532:	37 8d       	ldd	r19, Z+31	; 0x1f
    1534:	53 17       	cp	r21, r19
    1536:	10 f0       	brcs	.+4      	; 0x153c <xQueueGenericSendFromISR+0x1c>
    1538:	22 30       	cpi	r18, 0x02	; 2
    153a:	e9 f4       	brne	.+58     	; 0x1576 <xQueueGenericSendFromISR+0x56>
    153c:	42 2f       	mov	r20, r18
    153e:	78 01       	movw	r14, r16
    1540:	ec 01       	movw	r28, r24
    1542:	1a a1       	ldd	r17, Y+34	; 0x22
    1544:	04 de       	rcall	.-1016   	; 0x114e <prvCopyDataToQueue>
    1546:	1f 3f       	cpi	r17, 0xFF	; 255
    1548:	81 f4       	brne	.+32     	; 0x156a <xQueueGenericSendFromISR+0x4a>
    154a:	8b 89       	ldd	r24, Y+19	; 0x13
    154c:	88 23       	and	r24, r24
    154e:	a9 f0       	breq	.+42     	; 0x157a <xQueueGenericSendFromISR+0x5a>
    1550:	ce 01       	movw	r24, r28
    1552:	43 96       	adiw	r24, 0x13	; 19
    1554:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    1558:	88 23       	and	r24, r24
    155a:	89 f0       	breq	.+34     	; 0x157e <xQueueGenericSendFromISR+0x5e>
    155c:	e1 14       	cp	r14, r1
    155e:	f1 04       	cpc	r15, r1
    1560:	81 f0       	breq	.+32     	; 0x1582 <xQueueGenericSendFromISR+0x62>
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	f7 01       	movw	r30, r14
    1566:	80 83       	st	Z, r24
    1568:	0d c0       	rjmp	.+26     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    156a:	ff 24       	eor	r15, r15
    156c:	f3 94       	inc	r15
    156e:	f1 0e       	add	r15, r17
    1570:	fa a2       	std	Y+34, r15	; 0x22
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	07 c0       	rjmp	.+14     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	05 c0       	rjmp	.+10     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <xQueueGenericSendFromISR+0x64>
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	01 c0       	rjmp	.+2      	; 0x1584 <xQueueGenericSendFromISR+0x64>
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	ff 90       	pop	r15
    158e:	ef 90       	pop	r14
    1590:	08 95       	ret

00001592 <xQueueGiveFromISR>:
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	fc 01       	movw	r30, r24
    1598:	86 8d       	ldd	r24, Z+30	; 0x1e
    159a:	97 8d       	ldd	r25, Z+31	; 0x1f
    159c:	89 17       	cp	r24, r25
    159e:	c0 f4       	brcc	.+48     	; 0x15d0 <xQueueGiveFromISR+0x3e>
    15a0:	92 a1       	ldd	r25, Z+34	; 0x22
    15a2:	8f 5f       	subi	r24, 0xFF	; 255
    15a4:	86 8f       	std	Z+30, r24	; 0x1e
    15a6:	9f 3f       	cpi	r25, 0xFF	; 255
    15a8:	79 f4       	brne	.+30     	; 0x15c8 <xQueueGiveFromISR+0x36>
    15aa:	83 89       	ldd	r24, Z+19	; 0x13
    15ac:	88 23       	and	r24, r24
    15ae:	91 f0       	breq	.+36     	; 0x15d4 <xQueueGiveFromISR+0x42>
    15b0:	eb 01       	movw	r28, r22
    15b2:	cf 01       	movw	r24, r30
    15b4:	43 96       	adiw	r24, 0x13	; 19
    15b6:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    15ba:	88 23       	and	r24, r24
    15bc:	69 f0       	breq	.+26     	; 0x15d8 <xQueueGiveFromISR+0x46>
    15be:	20 97       	sbiw	r28, 0x00	; 0
    15c0:	69 f0       	breq	.+26     	; 0x15dc <xQueueGiveFromISR+0x4a>
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	88 83       	st	Y, r24
    15c6:	0b c0       	rjmp	.+22     	; 0x15de <xQueueGiveFromISR+0x4c>
    15c8:	9f 5f       	subi	r25, 0xFF	; 255
    15ca:	92 a3       	std	Z+34, r25	; 0x22
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	07 c0       	rjmp	.+14     	; 0x15de <xQueueGiveFromISR+0x4c>
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	05 c0       	rjmp	.+10     	; 0x15de <xQueueGiveFromISR+0x4c>
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	03 c0       	rjmp	.+6      	; 0x15de <xQueueGiveFromISR+0x4c>
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	01 c0       	rjmp	.+2      	; 0x15de <xQueueGiveFromISR+0x4c>
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	08 95       	ret

000015e4 <xQueueReceive>:
    15e4:	9f 92       	push	r9
    15e6:	af 92       	push	r10
    15e8:	bf 92       	push	r11
    15ea:	cf 92       	push	r12
    15ec:	df 92       	push	r13
    15ee:	ef 92       	push	r14
    15f0:	ff 92       	push	r15
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	29 97       	sbiw	r28, 0x09	; 9
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	8c 01       	movw	r16, r24
    160c:	5b 01       	movw	r10, r22
    160e:	2e 83       	std	Y+6, r18	; 0x06
    1610:	3f 83       	std	Y+7, r19	; 0x07
    1612:	48 87       	std	Y+8, r20	; 0x08
    1614:	59 87       	std	Y+9, r21	; 0x09
    1616:	e1 2c       	mov	r14, r1
    1618:	99 24       	eor	r9, r9
    161a:	93 94       	inc	r9
    161c:	6c 01       	movw	r12, r24
    161e:	83 e1       	ldi	r24, 0x13	; 19
    1620:	c8 0e       	add	r12, r24
    1622:	d1 1c       	adc	r13, r1
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	0f 92       	push	r0
    162a:	f8 01       	movw	r30, r16
    162c:	f6 8c       	ldd	r15, Z+30	; 0x1e
    162e:	ff 20       	and	r15, r15
    1630:	99 f0       	breq	.+38     	; 0x1658 <xQueueReceive+0x74>
    1632:	b5 01       	movw	r22, r10
    1634:	c8 01       	movw	r24, r16
    1636:	ea dd       	rcall	.-1068   	; 0x120c <prvCopyDataFromQueue>
    1638:	fa 94       	dec	r15
    163a:	f8 01       	movw	r30, r16
    163c:	f6 8e       	std	Z+30, r15	; 0x1e
    163e:	80 85       	ldd	r24, Z+8	; 0x08
    1640:	88 23       	and	r24, r24
    1642:	31 f0       	breq	.+12     	; 0x1650 <xQueueReceive+0x6c>
    1644:	c8 01       	movw	r24, r16
    1646:	08 96       	adiw	r24, 0x08	; 8
    1648:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    164c:	81 11       	cpse	r24, r1
    164e:	80 db       	rcall	.-2304   	; 0xd50 <vPortYield>
    1650:	0f 90       	pop	r0
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	51 c0       	rjmp	.+162    	; 0x16fa <xQueueReceive+0x116>
    1658:	8e 81       	ldd	r24, Y+6	; 0x06
    165a:	9f 81       	ldd	r25, Y+7	; 0x07
    165c:	a8 85       	ldd	r26, Y+8	; 0x08
    165e:	b9 85       	ldd	r27, Y+9	; 0x09
    1660:	89 2b       	or	r24, r25
    1662:	8a 2b       	or	r24, r26
    1664:	8b 2b       	or	r24, r27
    1666:	21 f4       	brne	.+8      	; 0x1670 <xQueueReceive+0x8c>
    1668:	0f 90       	pop	r0
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	45 c0       	rjmp	.+138    	; 0x16fa <xQueueReceive+0x116>
    1670:	e1 10       	cpse	r14, r1
    1672:	05 c0       	rjmp	.+10     	; 0x167e <xQueueReceive+0x9a>
    1674:	ce 01       	movw	r24, r28
    1676:	01 96       	adiw	r24, 0x01	; 1
    1678:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    167c:	e9 2c       	mov	r14, r9
    167e:	0f 90       	pop	r0
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	0f 92       	push	r0
    168c:	f8 01       	movw	r30, r16
    168e:	81 a1       	ldd	r24, Z+33	; 0x21
    1690:	8f 3f       	cpi	r24, 0xFF	; 255
    1692:	09 f4       	brne	.+2      	; 0x1696 <xQueueReceive+0xb2>
    1694:	11 a2       	std	Z+33, r1	; 0x21
    1696:	f8 01       	movw	r30, r16
    1698:	82 a1       	ldd	r24, Z+34	; 0x22
    169a:	8f 3f       	cpi	r24, 0xFF	; 255
    169c:	09 f4       	brne	.+2      	; 0x16a0 <xQueueReceive+0xbc>
    169e:	12 a2       	std	Z+34, r1	; 0x22
    16a0:	0f 90       	pop	r0
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	be 01       	movw	r22, r28
    16a6:	6a 5f       	subi	r22, 0xFA	; 250
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	ce 01       	movw	r24, r28
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    16b2:	81 11       	cpse	r24, r1
    16b4:	18 c0       	rjmp	.+48     	; 0x16e6 <xQueueReceive+0x102>
    16b6:	c8 01       	movw	r24, r16
    16b8:	3f dd       	rcall	.-1410   	; 0x1138 <prvIsQueueEmpty>
    16ba:	88 23       	and	r24, r24
    16bc:	79 f0       	breq	.+30     	; 0x16dc <xQueueReceive+0xf8>
    16be:	4e 81       	ldd	r20, Y+6	; 0x06
    16c0:	5f 81       	ldd	r21, Y+7	; 0x07
    16c2:	68 85       	ldd	r22, Y+8	; 0x08
    16c4:	79 85       	ldd	r23, Y+9	; 0x09
    16c6:	c6 01       	movw	r24, r12
    16c8:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    16cc:	c8 01       	movw	r24, r16
    16ce:	b8 dd       	rcall	.-1168   	; 0x1240 <prvUnlockQueue>
    16d0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16d4:	81 11       	cpse	r24, r1
    16d6:	a6 cf       	rjmp	.-180    	; 0x1624 <xQueueReceive+0x40>
    16d8:	3b db       	rcall	.-2442   	; 0xd50 <vPortYield>
    16da:	a4 cf       	rjmp	.-184    	; 0x1624 <xQueueReceive+0x40>
    16dc:	c8 01       	movw	r24, r16
    16de:	b0 dd       	rcall	.-1184   	; 0x1240 <prvUnlockQueue>
    16e0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16e4:	9f cf       	rjmp	.-194    	; 0x1624 <xQueueReceive+0x40>
    16e6:	c8 01       	movw	r24, r16
    16e8:	ab dd       	rcall	.-1194   	; 0x1240 <prvUnlockQueue>
    16ea:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16ee:	c8 01       	movw	r24, r16
    16f0:	23 dd       	rcall	.-1466   	; 0x1138 <prvIsQueueEmpty>
    16f2:	88 23       	and	r24, r24
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <xQueueReceive+0x114>
    16f6:	96 cf       	rjmp	.-212    	; 0x1624 <xQueueReceive+0x40>
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	29 96       	adiw	r28, 0x09	; 9
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	bf 90       	pop	r11
    1718:	af 90       	pop	r10
    171a:	9f 90       	pop	r9
    171c:	08 95       	ret

0000171e <xQueueSemaphoreTake>:
    171e:	bf 92       	push	r11
    1720:	cf 92       	push	r12
    1722:	df 92       	push	r13
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	29 97       	sbiw	r28, 0x09	; 9
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	8c 01       	movw	r16, r24
    1742:	4e 83       	std	Y+6, r20	; 0x06
    1744:	5f 83       	std	Y+7, r21	; 0x07
    1746:	68 87       	std	Y+8, r22	; 0x08
    1748:	79 87       	std	Y+9, r23	; 0x09
    174a:	b1 2c       	mov	r11, r1
    174c:	d1 2c       	mov	r13, r1
    174e:	cc 24       	eor	r12, r12
    1750:	c3 94       	inc	r12
    1752:	7c 01       	movw	r14, r24
    1754:	83 e1       	ldi	r24, 0x13	; 19
    1756:	e8 0e       	add	r14, r24
    1758:	f1 1c       	adc	r15, r1
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	0f 92       	push	r0
    1760:	d8 01       	movw	r26, r16
    1762:	5e 96       	adiw	r26, 0x1e	; 30
    1764:	8c 91       	ld	r24, X
    1766:	5e 97       	sbiw	r26, 0x1e	; 30
    1768:	88 23       	and	r24, r24
    176a:	e1 f0       	breq	.+56     	; 0x17a4 <xQueueSemaphoreTake+0x86>
    176c:	81 50       	subi	r24, 0x01	; 1
    176e:	5e 96       	adiw	r26, 0x1e	; 30
    1770:	8c 93       	st	X, r24
    1772:	5e 97       	sbiw	r26, 0x1e	; 30
    1774:	8d 91       	ld	r24, X+
    1776:	9c 91       	ld	r25, X
    1778:	89 2b       	or	r24, r25
    177a:	29 f4       	brne	.+10     	; 0x1786 <xQueueSemaphoreTake+0x68>
    177c:	0e 94 b6 1a 	call	0x356c	; 0x356c <pvTaskIncrementMutexHeldCount>
    1780:	f8 01       	movw	r30, r16
    1782:	93 83       	std	Z+3, r25	; 0x03
    1784:	82 83       	std	Z+2, r24	; 0x02
    1786:	d8 01       	movw	r26, r16
    1788:	18 96       	adiw	r26, 0x08	; 8
    178a:	8c 91       	ld	r24, X
    178c:	88 23       	and	r24, r24
    178e:	31 f0       	breq	.+12     	; 0x179c <xQueueSemaphoreTake+0x7e>
    1790:	c8 01       	movw	r24, r16
    1792:	08 96       	adiw	r24, 0x08	; 8
    1794:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    1798:	81 11       	cpse	r24, r1
    179a:	da da       	rcall	.-2636   	; 0xd50 <vPortYield>
    179c:	0f 90       	pop	r0
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	7f c0       	rjmp	.+254    	; 0x18a2 <xQueueSemaphoreTake+0x184>
    17a4:	8e 81       	ldd	r24, Y+6	; 0x06
    17a6:	9f 81       	ldd	r25, Y+7	; 0x07
    17a8:	a8 85       	ldd	r26, Y+8	; 0x08
    17aa:	b9 85       	ldd	r27, Y+9	; 0x09
    17ac:	89 2b       	or	r24, r25
    17ae:	8a 2b       	or	r24, r26
    17b0:	8b 2b       	or	r24, r27
    17b2:	21 f4       	brne	.+8      	; 0x17bc <xQueueSemaphoreTake+0x9e>
    17b4:	0f 90       	pop	r0
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	73 c0       	rjmp	.+230    	; 0x18a2 <xQueueSemaphoreTake+0x184>
    17bc:	d1 10       	cpse	r13, r1
    17be:	05 c0       	rjmp	.+10     	; 0x17ca <xQueueSemaphoreTake+0xac>
    17c0:	ce 01       	movw	r24, r28
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    17c8:	dc 2c       	mov	r13, r12
    17ca:	0f 90       	pop	r0
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	0f 92       	push	r0
    17d8:	f8 01       	movw	r30, r16
    17da:	81 a1       	ldd	r24, Z+33	; 0x21
    17dc:	8f 3f       	cpi	r24, 0xFF	; 255
    17de:	09 f4       	brne	.+2      	; 0x17e2 <xQueueSemaphoreTake+0xc4>
    17e0:	11 a2       	std	Z+33, r1	; 0x21
    17e2:	d8 01       	movw	r26, r16
    17e4:	92 96       	adiw	r26, 0x22	; 34
    17e6:	8c 91       	ld	r24, X
    17e8:	92 97       	sbiw	r26, 0x22	; 34
    17ea:	8f 3f       	cpi	r24, 0xFF	; 255
    17ec:	11 f4       	brne	.+4      	; 0x17f2 <xQueueSemaphoreTake+0xd4>
    17ee:	92 96       	adiw	r26, 0x22	; 34
    17f0:	1c 92       	st	X, r1
    17f2:	0f 90       	pop	r0
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	be 01       	movw	r22, r28
    17f8:	6a 5f       	subi	r22, 0xFA	; 250
    17fa:	7f 4f       	sbci	r23, 0xFF	; 255
    17fc:	ce 01       	movw	r24, r28
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    1804:	81 11       	cpse	r24, r1
    1806:	27 c0       	rjmp	.+78     	; 0x1856 <xQueueSemaphoreTake+0x138>
    1808:	c8 01       	movw	r24, r16
    180a:	96 dc       	rcall	.-1748   	; 0x1138 <prvIsQueueEmpty>
    180c:	88 23       	and	r24, r24
    180e:	f1 f0       	breq	.+60     	; 0x184c <xQueueSemaphoreTake+0x12e>
    1810:	f8 01       	movw	r30, r16
    1812:	80 81       	ld	r24, Z
    1814:	91 81       	ldd	r25, Z+1	; 0x01
    1816:	89 2b       	or	r24, r25
    1818:	51 f4       	brne	.+20     	; 0x182e <xQueueSemaphoreTake+0x110>
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	0f 92       	push	r0
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	93 81       	ldd	r25, Z+3	; 0x03
    1824:	0e 94 bc 19 	call	0x3378	; 0x3378 <xTaskPriorityInherit>
    1828:	b8 2e       	mov	r11, r24
    182a:	0f 90       	pop	r0
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	4e 81       	ldd	r20, Y+6	; 0x06
    1830:	5f 81       	ldd	r21, Y+7	; 0x07
    1832:	68 85       	ldd	r22, Y+8	; 0x08
    1834:	79 85       	ldd	r23, Y+9	; 0x09
    1836:	c7 01       	movw	r24, r14
    1838:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    183c:	c8 01       	movw	r24, r16
    183e:	00 dd       	rcall	.-1536   	; 0x1240 <prvUnlockQueue>
    1840:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    1844:	81 11       	cpse	r24, r1
    1846:	89 cf       	rjmp	.-238    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1848:	83 da       	rcall	.-2810   	; 0xd50 <vPortYield>
    184a:	87 cf       	rjmp	.-242    	; 0x175a <xQueueSemaphoreTake+0x3c>
    184c:	c8 01       	movw	r24, r16
    184e:	f8 dc       	rcall	.-1552   	; 0x1240 <prvUnlockQueue>
    1850:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    1854:	82 cf       	rjmp	.-252    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1856:	c8 01       	movw	r24, r16
    1858:	f3 dc       	rcall	.-1562   	; 0x1240 <prvUnlockQueue>
    185a:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    185e:	c8 01       	movw	r24, r16
    1860:	6b dc       	rcall	.-1834   	; 0x1138 <prvIsQueueEmpty>
    1862:	88 23       	and	r24, r24
    1864:	09 f4       	brne	.+2      	; 0x1868 <xQueueSemaphoreTake+0x14a>
    1866:	79 cf       	rjmp	.-270    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1868:	bb 20       	and	r11, r11
    186a:	d1 f0       	breq	.+52     	; 0x18a0 <xQueueSemaphoreTake+0x182>
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	0f 92       	push	r0
    1872:	f8 01       	movw	r30, r16
    1874:	83 89       	ldd	r24, Z+19	; 0x13
    1876:	88 23       	and	r24, r24
    1878:	39 f0       	breq	.+14     	; 0x1888 <xQueueSemaphoreTake+0x16a>
    187a:	02 8c       	ldd	r0, Z+26	; 0x1a
    187c:	f3 8d       	ldd	r31, Z+27	; 0x1b
    187e:	e0 2d       	mov	r30, r0
    1880:	80 81       	ld	r24, Z
    1882:	64 e0       	ldi	r22, 0x04	; 4
    1884:	68 1b       	sub	r22, r24
    1886:	01 c0       	rjmp	.+2      	; 0x188a <xQueueSemaphoreTake+0x16c>
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	d8 01       	movw	r26, r16
    188c:	12 96       	adiw	r26, 0x02	; 2
    188e:	8d 91       	ld	r24, X+
    1890:	9c 91       	ld	r25, X
    1892:	13 97       	sbiw	r26, 0x03	; 3
    1894:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <vTaskPriorityDisinheritAfterTimeout>
    1898:	0f 90       	pop	r0
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <xQueueSemaphoreTake+0x184>
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	29 96       	adiw	r28, 0x09	; 9
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	ff 90       	pop	r15
    18b8:	ef 90       	pop	r14
    18ba:	df 90       	pop	r13
    18bc:	cf 90       	pop	r12
    18be:	bf 90       	pop	r11
    18c0:	08 95       	ret

000018c2 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	0f 92       	push	r0
    18ce:	89 a1       	ldd	r24, Y+33	; 0x21
    18d0:	8f 3f       	cpi	r24, 0xFF	; 255
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <vQueueWaitForMessageRestricted+0x14>
    18d4:	19 a2       	std	Y+33, r1	; 0x21
    18d6:	8a a1       	ldd	r24, Y+34	; 0x22
    18d8:	8f 3f       	cpi	r24, 0xFF	; 255
    18da:	09 f4       	brne	.+2      	; 0x18de <vQueueWaitForMessageRestricted+0x1c>
    18dc:	1a a2       	std	Y+34, r1	; 0x22
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    18e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18e4:	81 11       	cpse	r24, r1
    18e6:	04 c0       	rjmp	.+8      	; 0x18f0 <vQueueWaitForMessageRestricted+0x2e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    18e8:	ce 01       	movw	r24, r28
    18ea:	43 96       	adiw	r24, 0x13	; 19
    18ec:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    18f0:	ce 01       	movw	r24, r28
    18f2:	a6 dc       	rcall	.-1716   	; 0x1240 <prvUnlockQueue>
	}
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	08 95       	ret

000018fa <xSerialxPrint>:

		default:
			break;
	}
	return 0;
}
    18fa:	4f 92       	push	r4
    18fc:	5f 92       	push	r5
    18fe:	6f 92       	push	r6
    1900:	7f 92       	push	r7
    1902:	8f 92       	push	r8
    1904:	9f 92       	push	r9
    1906:	af 92       	push	r10
    1908:	bf 92       	push	r11
    190a:	cf 92       	push	r12
    190c:	df 92       	push	r13
    190e:	ef 92       	push	r14
    1910:	ff 92       	push	r15
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	ec 01       	movw	r28, r24
    191c:	fb 01       	movw	r30, r22
    191e:	01 90       	ld	r0, Z+
    1920:	00 20       	and	r0, r0
    1922:	e9 f7       	brne	.-6      	; 0x191e <xSerialxPrint+0x24>
    1924:	4b 01       	movw	r8, r22
    1926:	9f 01       	movw	r18, r30
    1928:	21 50       	subi	r18, 0x01	; 1
    192a:	31 09       	sbc	r19, r1
    192c:	0f 2e       	mov	r0, r31
    192e:	f1 e3       	ldi	r31, 0x31	; 49
    1930:	ef 2e       	mov	r14, r31
    1932:	ff 24       	eor	r15, r15
    1934:	f3 94       	inc	r15
    1936:	f0 2d       	mov	r31, r0
    1938:	01 ed       	ldi	r16, 0xD1	; 209
    193a:	10 e0       	ldi	r17, 0x00	; 0
    193c:	69 ec       	ldi	r22, 0xC9	; 201
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	41 ec       	ldi	r20, 0xC1	; 193
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	5c 01       	movw	r10, r24
    1946:	8d e0       	ldi	r24, 0x0D	; 13
    1948:	a8 0e       	add	r10, r24
    194a:	b1 1c       	adc	r11, r1
    194c:	78 c0       	rjmp	.+240    	; 0x1a3e <xSerialxPrint+0x144>
    194e:	d4 01       	movw	r26, r8
    1950:	dd 90       	ld	r13, X+
    1952:	4d 01       	movw	r8, r26
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	0f 92       	push	r0
    195a:	ed 85       	ldd	r30, Y+13	; 0x0d
    195c:	fe 85       	ldd	r31, Y+14	; 0x0e
    195e:	0f 90       	pop	r0
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	8f 89       	ldd	r24, Y+23	; 0x17
    1964:	98 8d       	ldd	r25, Y+24	; 0x18
    1966:	e8 17       	cp	r30, r24
    1968:	f9 07       	cpc	r31, r25
    196a:	f1 f0       	breq	.+60     	; 0x19a8 <xSerialxPrint+0xae>
    196c:	f5 01       	movw	r30, r10
    196e:	82 81       	ldd	r24, Z+2	; 0x02
    1970:	93 81       	ldd	r25, Z+3	; 0x03
    1972:	dc 01       	movw	r26, r24
    1974:	dc 92       	st	X, r13
    1976:	82 81       	ldd	r24, Z+2	; 0x02
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	93 83       	std	Z+3, r25	; 0x03
    197e:	82 83       	std	Z+2, r24	; 0x02
    1980:	c0 84       	ldd	r12, Z+8	; 0x08
    1982:	d1 84       	ldd	r13, Z+9	; 0x09
    1984:	8c 15       	cp	r24, r12
    1986:	9d 05       	cpc	r25, r13
    1988:	21 f4       	brne	.+8      	; 0x1992 <xSerialxPrint+0x98>
    198a:	86 81       	ldd	r24, Z+6	; 0x06
    198c:	97 81       	ldd	r25, Z+7	; 0x07
    198e:	93 83       	std	Z+3, r25	; 0x03
    1990:	82 83       	std	Z+2, r24	; 0x02
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	0f 92       	push	r0
    1998:	80 81       	ld	r24, Z
    199a:	91 81       	ldd	r25, Z+1	; 0x01
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	80 83       	st	Z, r24
    19a2:	0f 90       	pop	r0
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	2b c0       	rjmp	.+86     	; 0x19fe <xSerialxPrint+0x104>
    19a8:	00 00       	nop
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	0f 92       	push	r0
    19b0:	ed 85       	ldd	r30, Y+13	; 0x0d
    19b2:	fe 85       	ldd	r31, Y+14	; 0x0e
    19b4:	0f 90       	pop	r0
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ba:	98 8d       	ldd	r25, Y+24	; 0x18
    19bc:	e8 17       	cp	r30, r24
    19be:	f9 07       	cpc	r31, r25
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <xSerialxPrint+0xca>
    19c2:	3d c0       	rjmp	.+122    	; 0x1a3e <xSerialxPrint+0x144>
    19c4:	f5 01       	movw	r30, r10
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	dc 01       	movw	r26, r24
    19cc:	dc 92       	st	X, r13
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	93 83       	std	Z+3, r25	; 0x03
    19d6:	82 83       	std	Z+2, r24	; 0x02
    19d8:	c0 84       	ldd	r12, Z+8	; 0x08
    19da:	d1 84       	ldd	r13, Z+9	; 0x09
    19dc:	8c 15       	cp	r24, r12
    19de:	9d 05       	cpc	r25, r13
    19e0:	21 f4       	brne	.+8      	; 0x19ea <xSerialxPrint+0xf0>
    19e2:	86 81       	ldd	r24, Z+6	; 0x06
    19e4:	97 81       	ldd	r25, Z+7	; 0x07
    19e6:	93 83       	std	Z+3, r25	; 0x03
    19e8:	82 83       	std	Z+2, r24	; 0x02
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	0f 92       	push	r0
    19f0:	80 81       	ld	r24, Z
    19f2:	91 81       	ldd	r25, Z+1	; 0x01
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	80 83       	st	Z, r24
    19fa:	0f 90       	pop	r0
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	48 80       	ld	r4, Y
    1a00:	51 2c       	mov	r5, r1
    1a02:	b8 e0       	ldi	r27, 0x08	; 8
    1a04:	4b 16       	cp	r4, r27
    1a06:	51 04       	cpc	r5, r1
    1a08:	d0 f4       	brcc	.+52     	; 0x1a3e <xSerialxPrint+0x144>
    1a0a:	f2 01       	movw	r30, r4
    1a0c:	88 27       	eor	r24, r24
    1a0e:	ee 58       	subi	r30, 0x8E	; 142
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	8f 4f       	sbci	r24, 0xFF	; 255
    1a14:	0c 94 44 58 	jmp	0xb088	; 0xb088 <__tablejump2__>
    1a18:	fa 01       	movw	r30, r20
    1a1a:	80 81       	ld	r24, Z
    1a1c:	80 62       	ori	r24, 0x20	; 32
    1a1e:	80 83       	st	Z, r24
    1a20:	0e c0       	rjmp	.+28     	; 0x1a3e <xSerialxPrint+0x144>
    1a22:	db 01       	movw	r26, r22
    1a24:	8c 91       	ld	r24, X
    1a26:	80 62       	ori	r24, 0x20	; 32
    1a28:	8c 93       	st	X, r24
    1a2a:	09 c0       	rjmp	.+18     	; 0x1a3e <xSerialxPrint+0x144>
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	80 81       	ld	r24, Z
    1a30:	80 62       	ori	r24, 0x20	; 32
    1a32:	80 83       	st	Z, r24
    1a34:	04 c0       	rjmp	.+8      	; 0x1a3e <xSerialxPrint+0x144>
    1a36:	d7 01       	movw	r26, r14
    1a38:	8c 91       	ld	r24, X
    1a3a:	80 62       	ori	r24, 0x20	; 32
    1a3c:	8c 93       	st	X, r24
    1a3e:	82 16       	cp	r8, r18
    1a40:	93 06       	cpc	r9, r19
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <xSerialxPrint+0x14c>
    1a44:	84 cf       	rjmp	.-248    	; 0x194e <xSerialxPrint+0x54>
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	ff 90       	pop	r15
    1a50:	ef 90       	pop	r14
    1a52:	df 90       	pop	r13
    1a54:	cf 90       	pop	r12
    1a56:	bf 90       	pop	r11
    1a58:	af 90       	pop	r10
    1a5a:	9f 90       	pop	r9
    1a5c:	8f 90       	pop	r8
    1a5e:	7f 90       	pop	r7
    1a60:	6f 90       	pop	r6
    1a62:	5f 90       	pop	r5
    1a64:	4f 90       	pop	r4
    1a66:	08 95       	ret

00001a68 <xSerialxPrintf>:
    1a68:	0f 93       	push	r16
    1a6a:	1f 93       	push	r17
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	08 85       	ldd	r16, Y+8	; 0x08
    1a76:	19 85       	ldd	r17, Y+9	; 0x09
    1a78:	f8 01       	movw	r30, r16
    1a7a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	29 f4       	brne	.+10     	; 0x1a8a <xSerialxPrintf+0x22>
    1a80:	67 d9       	rcall	.-3378   	; 0xd50 <vPortYield>
    1a82:	f8 01       	movw	r30, r16
    1a84:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a86:	81 30       	cpi	r24, 0x01	; 1
    1a88:	d9 f3       	breq	.-10     	; 0x1a80 <xSerialxPrintf+0x18>
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	85 8f       	std	Z+29, r24	; 0x1d
    1a90:	63 8d       	ldd	r22, Z+27	; 0x1b
    1a92:	74 8d       	ldd	r23, Z+28	; 0x1c
    1a94:	9e 01       	movw	r18, r28
    1a96:	24 5f       	subi	r18, 0xF4	; 244
    1a98:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9a:	4a 85       	ldd	r20, Y+10	; 0x0a
    1a9c:	5b 85       	ldd	r21, Y+11	; 0x0b
    1a9e:	81 8d       	ldd	r24, Z+25	; 0x19
    1aa0:	92 8d       	ldd	r25, Z+26	; 0x1a
    1aa2:	0e 94 b6 5a 	call	0xb56c	; 0xb56c <vsnprintf>
    1aa6:	f8 01       	movw	r30, r16
    1aa8:	61 8d       	ldd	r22, Z+25	; 0x19
    1aaa:	72 8d       	ldd	r23, Z+26	; 0x1a
    1aac:	c8 01       	movw	r24, r16
    1aae:	25 df       	rcall	.-438    	; 0x18fa <xSerialxPrint>
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	15 8e       	std	Z+29, r1	; 0x1d
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	08 95       	ret

00001abe <xSerialRxFlush>:
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	4c 91       	ld	r20, X
    1ac6:	50 e0       	ldi	r21, 0x00	; 0
    1ac8:	48 30       	cpi	r20, 0x08	; 8
    1aca:	51 05       	cpc	r21, r1
    1acc:	e8 f5       	brcc	.+122    	; 0x1b48 <xSerialRxFlush+0x8a>
    1ace:	fa 01       	movw	r30, r20
    1ad0:	88 27       	eor	r24, r24
    1ad2:	e6 58       	subi	r30, 0x86	; 134
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad8:	0c 94 44 58 	jmp	0xb088	; 0xb088 <__tablejump2__>
    1adc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1ae0:	88 23       	and	r24, r24
    1ae2:	54 f1       	brlt	.+84     	; 0x1b38 <xSerialRxFlush+0x7a>
    1ae4:	31 c0       	rjmp	.+98     	; 0x1b48 <xSerialRxFlush+0x8a>
    1ae6:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1aea:	88 23       	and	r24, r24
    1aec:	e4 f0       	brlt	.+56     	; 0x1b26 <xSerialRxFlush+0x68>
    1aee:	2c c0       	rjmp	.+88     	; 0x1b48 <xSerialRxFlush+0x8a>
    1af0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1af4:	88 23       	and	r24, r24
    1af6:	74 f0       	brlt	.+28     	; 0x1b14 <xSerialRxFlush+0x56>
    1af8:	27 c0       	rjmp	.+78     	; 0x1b48 <xSerialRxFlush+0x8a>
    1afa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1afe:	88 23       	and	r24, r24
    1b00:	1c f5       	brge	.+70     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b02:	c6 ec       	ldi	r28, 0xC6	; 198
    1b04:	d0 e0       	ldi	r29, 0x00	; 0
    1b06:	e0 ec       	ldi	r30, 0xC0	; 192
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	88 81       	ld	r24, Y
    1b0c:	80 81       	ld	r24, Z
    1b0e:	88 23       	and	r24, r24
    1b10:	e4 f3       	brlt	.-8      	; 0x1b0a <xSerialRxFlush+0x4c>
    1b12:	1a c0       	rjmp	.+52     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b14:	ce ec       	ldi	r28, 0xCE	; 206
    1b16:	d0 e0       	ldi	r29, 0x00	; 0
    1b18:	e8 ec       	ldi	r30, 0xC8	; 200
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	88 81       	ld	r24, Y
    1b1e:	80 81       	ld	r24, Z
    1b20:	88 23       	and	r24, r24
    1b22:	e4 f3       	brlt	.-8      	; 0x1b1c <xSerialRxFlush+0x5e>
    1b24:	11 c0       	rjmp	.+34     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b26:	c6 ed       	ldi	r28, 0xD6	; 214
    1b28:	d0 e0       	ldi	r29, 0x00	; 0
    1b2a:	e0 ed       	ldi	r30, 0xD0	; 208
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	88 81       	ld	r24, Y
    1b30:	80 81       	ld	r24, Z
    1b32:	88 23       	and	r24, r24
    1b34:	e4 f3       	brlt	.-8      	; 0x1b2e <xSerialRxFlush+0x70>
    1b36:	08 c0       	rjmp	.+16     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b38:	c6 e3       	ldi	r28, 0x36	; 54
    1b3a:	d1 e0       	ldi	r29, 0x01	; 1
    1b3c:	e0 e3       	ldi	r30, 0x30	; 48
    1b3e:	f1 e0       	ldi	r31, 0x01	; 1
    1b40:	88 81       	ld	r24, Y
    1b42:	80 81       	ld	r24, Z
    1b44:	88 23       	and	r24, r24
    1b46:	e4 f3       	brlt	.-8      	; 0x1b40 <xSerialRxFlush+0x82>
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	0f 92       	push	r0
    1b4e:	12 96       	adiw	r26, 0x02	; 2
    1b50:	1c 92       	st	X, r1
    1b52:	1e 92       	st	-X, r1
    1b54:	11 97       	sbiw	r26, 0x01	; 1
    1b56:	17 96       	adiw	r26, 0x07	; 7
    1b58:	8d 91       	ld	r24, X+
    1b5a:	9c 91       	ld	r25, X
    1b5c:	18 97       	sbiw	r26, 0x08	; 8
    1b5e:	14 96       	adiw	r26, 0x04	; 4
    1b60:	9c 93       	st	X, r25
    1b62:	8e 93       	st	-X, r24
    1b64:	13 97       	sbiw	r26, 0x03	; 3
    1b66:	16 96       	adiw	r26, 0x06	; 6
    1b68:	9c 93       	st	X, r25
    1b6a:	8e 93       	st	-X, r24
    1b6c:	15 97       	sbiw	r26, 0x05	; 5
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	08 95       	ret

00001b78 <xSerialAvailableChar>:
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	0f 92       	push	r0
    1b7e:	fc 01       	movw	r30, r24
    1b80:	81 81       	ldd	r24, Z+1	; 0x01
    1b82:	92 81       	ldd	r25, Z+2	; 0x02
    1b84:	0f 90       	pop	r0
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	08 95       	ret

00001b8a <xSerialPutChar>:
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	dc 01       	movw	r26, r24
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	0f 92       	push	r0
    1b96:	1d 96       	adiw	r26, 0x0d	; 13
    1b98:	2d 91       	ld	r18, X+
    1b9a:	3c 91       	ld	r19, X
    1b9c:	1e 97       	sbiw	r26, 0x0e	; 14
    1b9e:	0f 90       	pop	r0
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	57 96       	adiw	r26, 0x17	; 23
    1ba4:	8d 91       	ld	r24, X+
    1ba6:	9c 91       	ld	r25, X
    1ba8:	58 97       	sbiw	r26, 0x18	; 24
    1baa:	28 17       	cp	r18, r24
    1bac:	39 07       	cpc	r19, r25
    1bae:	f1 f0       	breq	.+60     	; 0x1bec <xSerialPutChar+0x62>
    1bb0:	fd 01       	movw	r30, r26
    1bb2:	3d 96       	adiw	r30, 0x0d	; 13
    1bb4:	c2 81       	ldd	r28, Z+2	; 0x02
    1bb6:	d3 81       	ldd	r29, Z+3	; 0x03
    1bb8:	68 83       	st	Y, r22
    1bba:	82 81       	ldd	r24, Z+2	; 0x02
    1bbc:	93 81       	ldd	r25, Z+3	; 0x03
    1bbe:	01 96       	adiw	r24, 0x01	; 1
    1bc0:	93 83       	std	Z+3, r25	; 0x03
    1bc2:	82 83       	std	Z+2, r24	; 0x02
    1bc4:	20 85       	ldd	r18, Z+8	; 0x08
    1bc6:	31 85       	ldd	r19, Z+9	; 0x09
    1bc8:	82 17       	cp	r24, r18
    1bca:	93 07       	cpc	r25, r19
    1bcc:	21 f4       	brne	.+8      	; 0x1bd6 <xSerialPutChar+0x4c>
    1bce:	86 81       	ldd	r24, Z+6	; 0x06
    1bd0:	97 81       	ldd	r25, Z+7	; 0x07
    1bd2:	93 83       	std	Z+3, r25	; 0x03
    1bd4:	82 83       	std	Z+2, r24	; 0x02
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	0f 92       	push	r0
    1bdc:	80 81       	ld	r24, Z
    1bde:	91 81       	ldd	r25, Z+1	; 0x01
    1be0:	01 96       	adiw	r24, 0x01	; 1
    1be2:	91 83       	std	Z+1, r25	; 0x01
    1be4:	80 83       	st	Z, r24
    1be6:	0f 90       	pop	r0
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	2f c0       	rjmp	.+94     	; 0x1c4a <xSerialPutChar+0xc0>
    1bec:	00 00       	nop
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	0f 92       	push	r0
    1bf4:	1d 96       	adiw	r26, 0x0d	; 13
    1bf6:	2d 91       	ld	r18, X+
    1bf8:	3c 91       	ld	r19, X
    1bfa:	1e 97       	sbiw	r26, 0x0e	; 14
    1bfc:	0f 90       	pop	r0
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	57 96       	adiw	r26, 0x17	; 23
    1c02:	8d 91       	ld	r24, X+
    1c04:	9c 91       	ld	r25, X
    1c06:	58 97       	sbiw	r26, 0x18	; 24
    1c08:	28 17       	cp	r18, r24
    1c0a:	39 07       	cpc	r19, r25
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <xSerialPutChar+0x86>
    1c0e:	45 c0       	rjmp	.+138    	; 0x1c9a <xSerialPutChar+0x110>
    1c10:	fd 01       	movw	r30, r26
    1c12:	3d 96       	adiw	r30, 0x0d	; 13
    1c14:	c2 81       	ldd	r28, Z+2	; 0x02
    1c16:	d3 81       	ldd	r29, Z+3	; 0x03
    1c18:	68 83       	st	Y, r22
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	01 96       	adiw	r24, 0x01	; 1
    1c20:	93 83       	std	Z+3, r25	; 0x03
    1c22:	82 83       	std	Z+2, r24	; 0x02
    1c24:	20 85       	ldd	r18, Z+8	; 0x08
    1c26:	31 85       	ldd	r19, Z+9	; 0x09
    1c28:	82 17       	cp	r24, r18
    1c2a:	93 07       	cpc	r25, r19
    1c2c:	21 f4       	brne	.+8      	; 0x1c36 <xSerialPutChar+0xac>
    1c2e:	86 81       	ldd	r24, Z+6	; 0x06
    1c30:	97 81       	ldd	r25, Z+7	; 0x07
    1c32:	93 83       	std	Z+3, r25	; 0x03
    1c34:	82 83       	std	Z+2, r24	; 0x02
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	0f 92       	push	r0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	91 81       	ldd	r25, Z+1	; 0x01
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	80 83       	st	Z, r24
    1c46:	0f 90       	pop	r0
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	8c 91       	ld	r24, X
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	88 30       	cpi	r24, 0x08	; 8
    1c50:	91 05       	cpc	r25, r1
    1c52:	28 f5       	brcc	.+74     	; 0x1c9e <xSerialPutChar+0x114>
    1c54:	fc 01       	movw	r30, r24
    1c56:	88 27       	eor	r24, r24
    1c58:	ee 57       	subi	r30, 0x7E	; 126
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5e:	0c 94 44 58 	jmp	0xb088	; 0xb088 <__tablejump2__>
    1c62:	e1 ec       	ldi	r30, 0xC1	; 193
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	80 62       	ori	r24, 0x20	; 32
    1c6a:	80 83       	st	Z, r24
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	18 c0       	rjmp	.+48     	; 0x1ca0 <xSerialPutChar+0x116>
    1c70:	e9 ec       	ldi	r30, 0xC9	; 201
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	80 62       	ori	r24, 0x20	; 32
    1c78:	80 83       	st	Z, r24
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	11 c0       	rjmp	.+34     	; 0x1ca0 <xSerialPutChar+0x116>
    1c7e:	e1 ed       	ldi	r30, 0xD1	; 209
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	80 62       	ori	r24, 0x20	; 32
    1c86:	80 83       	st	Z, r24
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	0a c0       	rjmp	.+20     	; 0x1ca0 <xSerialPutChar+0x116>
    1c8c:	e1 e3       	ldi	r30, 0x31	; 49
    1c8e:	f1 e0       	ldi	r31, 0x01	; 1
    1c90:	80 81       	ld	r24, Z
    1c92:	80 62       	ori	r24, 0x20	; 32
    1c94:	80 83       	st	Z, r24
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	03 c0       	rjmp	.+6      	; 0x1ca0 <xSerialPutChar+0x116>
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	01 c0       	rjmp	.+2      	; 0x1ca0 <xSerialPutChar+0x116>
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	08 95       	ret

00001ca6 <xSerialPortInitMinimal>:
    1ca6:	7f 92       	push	r7
    1ca8:	8f 92       	push	r8
    1caa:	9f 92       	push	r9
    1cac:	af 92       	push	r10
    1cae:	bf 92       	push	r11
    1cb0:	cf 92       	push	r12
    1cb2:	df 92       	push	r13
    1cb4:	ef 92       	push	r14
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	a2 97       	sbiw	r28, 0x22	; 34
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	6c 01       	movw	r12, r24
    1cd2:	76 2e       	mov	r7, r22
    1cd4:	49 01       	movw	r8, r18
    1cd6:	5a 01       	movw	r10, r20
    1cd8:	c7 01       	movw	r24, r14
    1cda:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	a9 f0       	breq	.+42     	; 0x1d0c <xSerialPortInitMinimal+0x66>
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	32 96       	adiw	r30, 0x02	; 2
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	0f 92       	push	r0
    1cec:	11 82       	std	Z+1, r1	; 0x01
    1cee:	10 82       	st	Z, r1
    1cf0:	93 83       	std	Z+3, r25	; 0x03
    1cf2:	82 83       	std	Z+2, r24	; 0x02
    1cf4:	95 83       	std	Z+5, r25	; 0x05
    1cf6:	84 83       	std	Z+4, r24	; 0x04
    1cf8:	97 83       	std	Z+7, r25	; 0x07
    1cfa:	86 83       	std	Z+6, r24	; 0x06
    1cfc:	8e 0d       	add	r24, r14
    1cfe:	9f 1d       	adc	r25, r15
    1d00:	91 87       	std	Z+9, r25	; 0x09
    1d02:	80 87       	std	Z+8, r24	; 0x08
    1d04:	f3 86       	std	Z+11, r15	; 0x0b
    1d06:	e2 86       	std	Z+10, r14	; 0x0a
    1d08:	0f 90       	pop	r0
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	c8 01       	movw	r24, r16
    1d0e:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	a9 f0       	breq	.+42     	; 0x1d40 <xSerialPortInitMinimal+0x9a>
    1d16:	fe 01       	movw	r30, r28
    1d18:	3e 96       	adiw	r30, 0x0e	; 14
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	0f 92       	push	r0
    1d20:	11 82       	std	Z+1, r1	; 0x01
    1d22:	10 82       	st	Z, r1
    1d24:	93 83       	std	Z+3, r25	; 0x03
    1d26:	82 83       	std	Z+2, r24	; 0x02
    1d28:	95 83       	std	Z+5, r25	; 0x05
    1d2a:	84 83       	std	Z+4, r24	; 0x04
    1d2c:	97 83       	std	Z+7, r25	; 0x07
    1d2e:	86 83       	std	Z+6, r24	; 0x06
    1d30:	80 0f       	add	r24, r16
    1d32:	91 1f       	adc	r25, r17
    1d34:	91 87       	std	Z+9, r25	; 0x09
    1d36:	80 87       	std	Z+8, r24	; 0x08
    1d38:	13 87       	std	Z+11, r17	; 0x0b
    1d3a:	02 87       	std	Z+10, r16	; 0x0a
    1d3c:	0f 90       	pop	r0
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	c8 01       	movw	r24, r16
    1d42:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1d46:	9b 8f       	std	Y+27, r25	; 0x1b
    1d48:	8a 8f       	std	Y+26, r24	; 0x1a
    1d4a:	79 82       	std	Y+1, r7	; 0x01
    1d4c:	1d 8f       	std	Y+29, r17	; 0x1d
    1d4e:	0c 8f       	std	Y+28, r16	; 0x1c
    1d50:	1e 8e       	std	Y+30, r1	; 0x1e
    1d52:	8f 8e       	std	Y+31, r8	; 0x1f
    1d54:	98 a2       	std	Y+32, r9	; 0x20
    1d56:	a9 a2       	std	Y+33, r10	; 0x21
    1d58:	ba a2       	std	Y+34, r11	; 0x22
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	f8 94       	cli
    1d5e:	0f 92       	push	r0
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	88 30       	cpi	r24, 0x08	; 8
    1d66:	91 05       	cpc	r25, r1
    1d68:	08 f0       	brcs	.+2      	; 0x1d6c <xSerialPortInitMinimal+0xc6>
    1d6a:	ba c1       	rjmp	.+884    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	88 27       	eor	r24, r24
    1d70:	e6 57       	subi	r30, 0x76	; 118
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	8f 4f       	sbci	r24, 0xFF	; 255
    1d76:	0c 94 44 58 	jmp	0xb088	; 0xb088 <__tablejump2__>
    1d7a:	d5 01       	movw	r26, r10
    1d7c:	c4 01       	movw	r24, r8
    1d7e:	97 5f       	subi	r25, 0xF7	; 247
    1d80:	a2 4c       	sbci	r26, 0xC2	; 194
    1d82:	bf 4f       	sbci	r27, 0xFF	; 255
    1d84:	bc 01       	movw	r22, r24
    1d86:	cd 01       	movw	r24, r26
    1d88:	66 0f       	add	r22, r22
    1d8a:	77 1f       	adc	r23, r23
    1d8c:	88 1f       	adc	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	66 0f       	add	r22, r22
    1d92:	77 1f       	adc	r23, r23
    1d94:	88 1f       	adc	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	95 01       	movw	r18, r10
    1d9a:	84 01       	movw	r16, r8
    1d9c:	00 0f       	add	r16, r16
    1d9e:	11 1f       	adc	r17, r17
    1da0:	22 1f       	adc	r18, r18
    1da2:	33 1f       	adc	r19, r19
    1da4:	00 0f       	add	r16, r16
    1da6:	11 1f       	adc	r17, r17
    1da8:	22 1f       	adc	r18, r18
    1daa:	33 1f       	adc	r19, r19
    1dac:	a9 01       	movw	r20, r18
    1dae:	98 01       	movw	r18, r16
    1db0:	22 0f       	add	r18, r18
    1db2:	33 1f       	adc	r19, r19
    1db4:	44 1f       	adc	r20, r20
    1db6:	55 1f       	adc	r21, r21
    1db8:	0e 94 22 58 	call	0xb044	; 0xb044 <__udivmodsi4>
    1dbc:	21 50       	subi	r18, 0x01	; 1
    1dbe:	31 09       	sbc	r19, r1
    1dc0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1dc4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1dce:	88 e9       	ldi	r24, 0x98	; 152
    1dd0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1dd4:	8e e0       	ldi	r24, 0x0E	; 14
    1dd6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1dda:	82 c1       	rjmp	.+772    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1ddc:	04 ec       	ldi	r16, 0xC4	; 196
    1dde:	10 e0       	ldi	r17, 0x00	; 0
    1de0:	f8 01       	movw	r30, r16
    1de2:	11 82       	std	Z+1, r1	; 0x01
    1de4:	10 82       	st	Z, r1
    1de6:	6a 9a       	sbi	0x0d, 2	; 13
    1de8:	80 ec       	ldi	r24, 0xC0	; 192
    1dea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1dee:	88 e9       	ldi	r24, 0x98	; 152
    1df0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1df4:	d5 01       	movw	r26, r10
    1df6:	c4 01       	movw	r24, r8
    1df8:	80 58       	subi	r24, 0x80	; 128
    1dfa:	9b 47       	sbci	r25, 0x7B	; 123
    1dfc:	a1 4e       	sbci	r26, 0xE1	; 225
    1dfe:	bf 4f       	sbci	r27, 0xFF	; 255
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	aa 1f       	adc	r26, r26
    1e06:	bb 1f       	adc	r27, r27
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	aa 1f       	adc	r26, r26
    1e0e:	bb 1f       	adc	r27, r27
    1e10:	bc 01       	movw	r22, r24
    1e12:	cd 01       	movw	r24, r26
    1e14:	66 0f       	add	r22, r22
    1e16:	77 1f       	adc	r23, r23
    1e18:	88 1f       	adc	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	88 0c       	add	r8, r8
    1e1e:	99 1c       	adc	r9, r9
    1e20:	aa 1c       	adc	r10, r10
    1e22:	bb 1c       	adc	r11, r11
    1e24:	88 0c       	add	r8, r8
    1e26:	99 1c       	adc	r9, r9
    1e28:	aa 1c       	adc	r10, r10
    1e2a:	bb 1c       	adc	r11, r11
    1e2c:	a5 01       	movw	r20, r10
    1e2e:	94 01       	movw	r18, r8
    1e30:	22 0f       	add	r18, r18
    1e32:	33 1f       	adc	r19, r19
    1e34:	44 1f       	adc	r20, r20
    1e36:	55 1f       	adc	r21, r21
    1e38:	22 0f       	add	r18, r18
    1e3a:	33 1f       	adc	r19, r19
    1e3c:	44 1f       	adc	r20, r20
    1e3e:	55 1f       	adc	r21, r21
    1e40:	0e 94 22 58 	call	0xb044	; 0xb044 <__udivmodsi4>
    1e44:	21 50       	subi	r18, 0x01	; 1
    1e46:	31 09       	sbc	r19, r1
    1e48:	f8 01       	movw	r30, r16
    1e4a:	31 83       	std	Z+1, r19	; 0x01
    1e4c:	20 83       	st	Z, r18
    1e4e:	48 c1       	rjmp	.+656    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1e50:	d5 01       	movw	r26, r10
    1e52:	c4 01       	movw	r24, r8
    1e54:	97 5f       	subi	r25, 0xF7	; 247
    1e56:	a2 4c       	sbci	r26, 0xC2	; 194
    1e58:	bf 4f       	sbci	r27, 0xFF	; 255
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	66 0f       	add	r22, r22
    1e60:	77 1f       	adc	r23, r23
    1e62:	88 1f       	adc	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	66 0f       	add	r22, r22
    1e68:	77 1f       	adc	r23, r23
    1e6a:	88 1f       	adc	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	95 01       	movw	r18, r10
    1e70:	84 01       	movw	r16, r8
    1e72:	00 0f       	add	r16, r16
    1e74:	11 1f       	adc	r17, r17
    1e76:	22 1f       	adc	r18, r18
    1e78:	33 1f       	adc	r19, r19
    1e7a:	00 0f       	add	r16, r16
    1e7c:	11 1f       	adc	r17, r17
    1e7e:	22 1f       	adc	r18, r18
    1e80:	33 1f       	adc	r19, r19
    1e82:	a9 01       	movw	r20, r18
    1e84:	98 01       	movw	r18, r16
    1e86:	22 0f       	add	r18, r18
    1e88:	33 1f       	adc	r19, r19
    1e8a:	44 1f       	adc	r20, r20
    1e8c:	55 1f       	adc	r21, r21
    1e8e:	0e 94 22 58 	call	0xb044	; 0xb044 <__udivmodsi4>
    1e92:	21 50       	subi	r18, 0x01	; 1
    1e94:	31 09       	sbc	r19, r1
    1e96:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    1e9a:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    1e9e:	82 e0       	ldi	r24, 0x02	; 2
    1ea0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1ea4:	88 e9       	ldi	r24, 0x98	; 152
    1ea6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1eaa:	8e e0       	ldi	r24, 0x0E	; 14
    1eac:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1eb0:	17 c1       	rjmp	.+558    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1eb2:	0c ec       	ldi	r16, 0xCC	; 204
    1eb4:	10 e0       	ldi	r17, 0x00	; 0
    1eb6:	f8 01       	movw	r30, r16
    1eb8:	11 82       	std	Z+1, r1	; 0x01
    1eba:	10 82       	st	Z, r1
    1ebc:	55 9a       	sbi	0x0a, 5	; 10
    1ebe:	80 ec       	ldi	r24, 0xC0	; 192
    1ec0:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1ec4:	88 e9       	ldi	r24, 0x98	; 152
    1ec6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1eca:	d5 01       	movw	r26, r10
    1ecc:	c4 01       	movw	r24, r8
    1ece:	80 58       	subi	r24, 0x80	; 128
    1ed0:	9b 47       	sbci	r25, 0x7B	; 123
    1ed2:	a1 4e       	sbci	r26, 0xE1	; 225
    1ed4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	aa 1f       	adc	r26, r26
    1edc:	bb 1f       	adc	r27, r27
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	aa 1f       	adc	r26, r26
    1ee4:	bb 1f       	adc	r27, r27
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	66 0f       	add	r22, r22
    1eec:	77 1f       	adc	r23, r23
    1eee:	88 1f       	adc	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	88 0c       	add	r8, r8
    1ef4:	99 1c       	adc	r9, r9
    1ef6:	aa 1c       	adc	r10, r10
    1ef8:	bb 1c       	adc	r11, r11
    1efa:	88 0c       	add	r8, r8
    1efc:	99 1c       	adc	r9, r9
    1efe:	aa 1c       	adc	r10, r10
    1f00:	bb 1c       	adc	r11, r11
    1f02:	a5 01       	movw	r20, r10
    1f04:	94 01       	movw	r18, r8
    1f06:	22 0f       	add	r18, r18
    1f08:	33 1f       	adc	r19, r19
    1f0a:	44 1f       	adc	r20, r20
    1f0c:	55 1f       	adc	r21, r21
    1f0e:	22 0f       	add	r18, r18
    1f10:	33 1f       	adc	r19, r19
    1f12:	44 1f       	adc	r20, r20
    1f14:	55 1f       	adc	r21, r21
    1f16:	0e 94 22 58 	call	0xb044	; 0xb044 <__udivmodsi4>
    1f1a:	21 50       	subi	r18, 0x01	; 1
    1f1c:	31 09       	sbc	r19, r1
    1f1e:	f8 01       	movw	r30, r16
    1f20:	31 83       	std	Z+1, r19	; 0x01
    1f22:	20 83       	st	Z, r18
    1f24:	dd c0       	rjmp	.+442    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1f26:	d5 01       	movw	r26, r10
    1f28:	c4 01       	movw	r24, r8
    1f2a:	97 5f       	subi	r25, 0xF7	; 247
    1f2c:	a2 4c       	sbci	r26, 0xC2	; 194
    1f2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	66 0f       	add	r22, r22
    1f36:	77 1f       	adc	r23, r23
    1f38:	88 1f       	adc	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	66 0f       	add	r22, r22
    1f3e:	77 1f       	adc	r23, r23
    1f40:	88 1f       	adc	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	95 01       	movw	r18, r10
    1f46:	84 01       	movw	r16, r8
    1f48:	00 0f       	add	r16, r16
    1f4a:	11 1f       	adc	r17, r17
    1f4c:	22 1f       	adc	r18, r18
    1f4e:	33 1f       	adc	r19, r19
    1f50:	00 0f       	add	r16, r16
    1f52:	11 1f       	adc	r17, r17
    1f54:	22 1f       	adc	r18, r18
    1f56:	33 1f       	adc	r19, r19
    1f58:	a9 01       	movw	r20, r18
    1f5a:	98 01       	movw	r18, r16
    1f5c:	22 0f       	add	r18, r18
    1f5e:	33 1f       	adc	r19, r19
    1f60:	44 1f       	adc	r20, r20
    1f62:	55 1f       	adc	r21, r21
    1f64:	0e 94 22 58 	call	0xb044	; 0xb044 <__udivmodsi4>
    1f68:	21 50       	subi	r18, 0x01	; 1
    1f6a:	31 09       	sbc	r19, r1
    1f6c:	30 93 d5 00 	sts	0x00D5, r19	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    1f70:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    1f74:	82 e0       	ldi	r24, 0x02	; 2
    1f76:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1f7a:	88 e9       	ldi	r24, 0x98	; 152
    1f7c:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1f80:	8e e0       	ldi	r24, 0x0E	; 14
    1f82:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1f86:	ac c0       	rjmp	.+344    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1f88:	04 ed       	ldi	r16, 0xD4	; 212
    1f8a:	10 e0       	ldi	r17, 0x00	; 0
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	11 82       	std	Z+1, r1	; 0x01
    1f90:	10 82       	st	Z, r1
    1f92:	e1 e0       	ldi	r30, 0x01	; 1
    1f94:	f1 e0       	ldi	r31, 0x01	; 1
    1f96:	80 81       	ld	r24, Z
    1f98:	84 60       	ori	r24, 0x04	; 4
    1f9a:	80 83       	st	Z, r24
    1f9c:	80 ec       	ldi	r24, 0xC0	; 192
    1f9e:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1fa2:	88 e9       	ldi	r24, 0x98	; 152
    1fa4:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1fa8:	d5 01       	movw	r26, r10
    1faa:	c4 01       	movw	r24, r8
    1fac:	80 58       	subi	r24, 0x80	; 128
    1fae:	9b 47       	sbci	r25, 0x7B	; 123
    1fb0:	a1 4e       	sbci	r26, 0xE1	; 225
    1fb2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	aa 1f       	adc	r26, r26
    1fba:	bb 1f       	adc	r27, r27
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	aa 1f       	adc	r26, r26
    1fc2:	bb 1f       	adc	r27, r27
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	66 0f       	add	r22, r22
    1fca:	77 1f       	adc	r23, r23
    1fcc:	88 1f       	adc	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	88 0c       	add	r8, r8
    1fd2:	99 1c       	adc	r9, r9
    1fd4:	aa 1c       	adc	r10, r10
    1fd6:	bb 1c       	adc	r11, r11
    1fd8:	88 0c       	add	r8, r8
    1fda:	99 1c       	adc	r9, r9
    1fdc:	aa 1c       	adc	r10, r10
    1fde:	bb 1c       	adc	r11, r11
    1fe0:	a5 01       	movw	r20, r10
    1fe2:	94 01       	movw	r18, r8
    1fe4:	22 0f       	add	r18, r18
    1fe6:	33 1f       	adc	r19, r19
    1fe8:	44 1f       	adc	r20, r20
    1fea:	55 1f       	adc	r21, r21
    1fec:	22 0f       	add	r18, r18
    1fee:	33 1f       	adc	r19, r19
    1ff0:	44 1f       	adc	r20, r20
    1ff2:	55 1f       	adc	r21, r21
    1ff4:	0e 94 22 58 	call	0xb044	; 0xb044 <__udivmodsi4>
    1ff8:	21 50       	subi	r18, 0x01	; 1
    1ffa:	31 09       	sbc	r19, r1
    1ffc:	f8 01       	movw	r30, r16
    1ffe:	31 83       	std	Z+1, r19	; 0x01
    2000:	20 83       	st	Z, r18
    2002:	6e c0       	rjmp	.+220    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    2004:	d5 01       	movw	r26, r10
    2006:	c4 01       	movw	r24, r8
    2008:	97 5f       	subi	r25, 0xF7	; 247
    200a:	a2 4c       	sbci	r26, 0xC2	; 194
    200c:	bf 4f       	sbci	r27, 0xFF	; 255
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	66 0f       	add	r22, r22
    2014:	77 1f       	adc	r23, r23
    2016:	88 1f       	adc	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	66 0f       	add	r22, r22
    201c:	77 1f       	adc	r23, r23
    201e:	88 1f       	adc	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	95 01       	movw	r18, r10
    2024:	84 01       	movw	r16, r8
    2026:	00 0f       	add	r16, r16
    2028:	11 1f       	adc	r17, r17
    202a:	22 1f       	adc	r18, r18
    202c:	33 1f       	adc	r19, r19
    202e:	00 0f       	add	r16, r16
    2030:	11 1f       	adc	r17, r17
    2032:	22 1f       	adc	r18, r18
    2034:	33 1f       	adc	r19, r19
    2036:	a9 01       	movw	r20, r18
    2038:	98 01       	movw	r18, r16
    203a:	22 0f       	add	r18, r18
    203c:	33 1f       	adc	r19, r19
    203e:	44 1f       	adc	r20, r20
    2040:	55 1f       	adc	r21, r21
    2042:	0e 94 22 58 	call	0xb044	; 0xb044 <__udivmodsi4>
    2046:	21 50       	subi	r18, 0x01	; 1
    2048:	31 09       	sbc	r19, r1
    204a:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    204e:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2058:	88 e9       	ldi	r24, 0x98	; 152
    205a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    205e:	8e e0       	ldi	r24, 0x0E	; 14
    2060:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    2064:	3d c0       	rjmp	.+122    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    2066:	04 e3       	ldi	r16, 0x34	; 52
    2068:	11 e0       	ldi	r17, 0x01	; 1
    206a:	f8 01       	movw	r30, r16
    206c:	11 82       	std	Z+1, r1	; 0x01
    206e:	10 82       	st	Z, r1
    2070:	e4 e0       	ldi	r30, 0x04	; 4
    2072:	f1 e0       	ldi	r31, 0x01	; 1
    2074:	80 81       	ld	r24, Z
    2076:	84 60       	ori	r24, 0x04	; 4
    2078:	80 83       	st	Z, r24
    207a:	80 ec       	ldi	r24, 0xC0	; 192
    207c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    2080:	88 e9       	ldi	r24, 0x98	; 152
    2082:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    2086:	d5 01       	movw	r26, r10
    2088:	c4 01       	movw	r24, r8
    208a:	80 58       	subi	r24, 0x80	; 128
    208c:	9b 47       	sbci	r25, 0x7B	; 123
    208e:	a1 4e       	sbci	r26, 0xE1	; 225
    2090:	bf 4f       	sbci	r27, 0xFF	; 255
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	aa 1f       	adc	r26, r26
    2098:	bb 1f       	adc	r27, r27
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	aa 1f       	adc	r26, r26
    20a0:	bb 1f       	adc	r27, r27
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	66 0f       	add	r22, r22
    20a8:	77 1f       	adc	r23, r23
    20aa:	88 1f       	adc	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	88 0c       	add	r8, r8
    20b0:	99 1c       	adc	r9, r9
    20b2:	aa 1c       	adc	r10, r10
    20b4:	bb 1c       	adc	r11, r11
    20b6:	88 0c       	add	r8, r8
    20b8:	99 1c       	adc	r9, r9
    20ba:	aa 1c       	adc	r10, r10
    20bc:	bb 1c       	adc	r11, r11
    20be:	a5 01       	movw	r20, r10
    20c0:	94 01       	movw	r18, r8
    20c2:	22 0f       	add	r18, r18
    20c4:	33 1f       	adc	r19, r19
    20c6:	44 1f       	adc	r20, r20
    20c8:	55 1f       	adc	r21, r21
    20ca:	22 0f       	add	r18, r18
    20cc:	33 1f       	adc	r19, r19
    20ce:	44 1f       	adc	r20, r20
    20d0:	55 1f       	adc	r21, r21
    20d2:	0e 94 22 58 	call	0xb044	; 0xb044 <__udivmodsi4>
    20d6:	21 50       	subi	r18, 0x01	; 1
    20d8:	31 09       	sbc	r19, r1
    20da:	f8 01       	movw	r30, r16
    20dc:	31 83       	std	Z+1, r19	; 0x01
    20de:	20 83       	st	Z, r18
    20e0:	0f 90       	pop	r0
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	82 e2       	ldi	r24, 0x22	; 34
    20e6:	fe 01       	movw	r30, r28
    20e8:	31 96       	adiw	r30, 0x01	; 1
    20ea:	d6 01       	movw	r26, r12
    20ec:	01 90       	ld	r0, Z+
    20ee:	0d 92       	st	X+, r0
    20f0:	8a 95       	dec	r24
    20f2:	e1 f7       	brne	.-8      	; 0x20ec <xSerialPortInitMinimal+0x446>
    20f4:	c6 01       	movw	r24, r12
    20f6:	a2 96       	adiw	r28, 0x22	; 34
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	ff 90       	pop	r15
    210c:	ef 90       	pop	r14
    210e:	df 90       	pop	r13
    2110:	cf 90       	pop	r12
    2112:	bf 90       	pop	r11
    2114:	af 90       	pop	r10
    2116:	9f 90       	pop	r9
    2118:	8f 90       	pop	r8
    211a:	7f 90       	pop	r7
    211c:	08 95       	ret

0000211e <__vector_25>:
#elif defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
ISR( USART0_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART0_RX_vect )

#endif
{
    211e:	1f 92       	push	r1
    2120:	0f 92       	push	r0
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	0f 92       	push	r0
    2126:	11 24       	eor	r1, r1
    2128:	0b b6       	in	r0, 0x3b	; 59
    212a:	0f 92       	push	r0
    212c:	2f 93       	push	r18
    212e:	3f 93       	push	r19
    2130:	4f 93       	push	r20
    2132:	5f 93       	push	r21
    2134:	6f 93       	push	r22
    2136:	7f 93       	push	r23
    2138:	8f 93       	push	r24
    213a:	9f 93       	push	r25
    213c:	af 93       	push	r26
    213e:	bf 93       	push	r27
    2140:	cf 93       	push	r28
    2142:	ef 93       	push	r30
    2144:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR0A & (_BV(FE0)|_BV(DOR0)|_BV(UPE0)) ) )
    2146:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    214a:	8c 71       	andi	r24, 0x1C	; 28
    214c:	71 f0       	breq	.+28     	; 0x216a <__vector_25+0x4c>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR0A & (1<<RXC0) ) erroredByte = UDR0;
    214e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    2152:	88 23       	and	r24, r24
    2154:	0c f0       	brlt	.+2      	; 0x2158 <__vector_25+0x3a>
    2156:	57 c0       	rjmp	.+174    	; 0x2206 <__stack+0x7>
    2158:	a6 ec       	ldi	r26, 0xC6	; 198
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e0 ec       	ldi	r30, 0xC0	; 192
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	8c 91       	ld	r24, X
    2162:	80 81       	ld	r24, Z
    2164:	88 23       	and	r24, r24
    2166:	e4 f3       	brlt	.-8      	; 0x2160 <__vector_25+0x42>
    2168:	4e c0       	rjmp	.+156    	; 0x2206 <__stack+0x7>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR0;
    216a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
//UCSR3B &= ~ ( _BV(RXCIE3) | _BV(RXEN3) | _BV(TXEN3));
if(!port_3)
    216e:	80 91 93 09 	lds	r24, 0x0993	; 0x800993 <port_3>
    2172:	81 11       	cpse	r24, r1
    2174:	1d c0       	rjmp	.+58     	; 0x21b0 <__vector_25+0x92>
{
port_0=true;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	80 93 41 0b 	sts	0x0B41, r24	; 0x800b41 <port_0>
//timer_1_Init();
stop_1_Timer();
    217c:	0e 94 13 25 	call	0x4a26	; 0x4a26 <stop_1_Timer>
TCNT1=0;//my cod		
    2180:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    2184:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
frame[indexBuf] = cChar;//my cod
    2188:	e0 91 31 08 	lds	r30, 0x0831	; 0x800831 <indexBuf>
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	ec 5a       	subi	r30, 0xAC	; 172
    2190:	f7 4f       	sbci	r31, 0xF7	; 247
    2192:	c0 83       	st	Z, r28
indexBuf++;//my cod
    2194:	80 91 31 08 	lds	r24, 0x0831	; 0x800831 <indexBuf>
    2198:	8f 5f       	subi	r24, 0xFF	; 255
    219a:	80 93 31 08 	sts	0x0831, r24	; 0x800831 <indexBuf>
if(indexBuf == portSERIAL_BUFFER_RX ) overflow=1;//my cod
    219e:	80 91 31 08 	lds	r24, 0x0831	; 0x800831 <indexBuf>
    21a2:	8f 3f       	cpi	r24, 0xFF	; 255
    21a4:	19 f4       	brne	.+6      	; 0x21ac <__vector_25+0x8e>
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	80 93 0d 08 	sts	0x080D, r24	; 0x80080d <overflow>
start_1_Timer();//my cod
    21ac:	0e 94 08 25 	call	0x4a10	; 0x4a10 <start_1_Timer>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	0f 92       	push	r0
	{
	    count = buffer->count;
    21b6:	eb ee       	ldi	r30, 0xEB	; 235
    21b8:	f7 e0       	ldi	r31, 0x07	; 7
    21ba:	21 81       	ldd	r18, Z+1	; 0x01
    21bc:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    21be:	0f 90       	pop	r0
    21c0:	0f be       	out	0x3f, r0	; 63
}
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerialPort.xRxedChars) ) )
    21c2:	83 85       	ldd	r24, Z+11	; 0x0b
    21c4:	94 85       	ldd	r25, Z+12	; 0x0c
    21c6:	28 17       	cp	r18, r24
    21c8:	39 07       	cpc	r19, r25
    21ca:	e9 f0       	breq	.+58     	; 0x2206 <__stack+0x7>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    21cc:	ec ee       	ldi	r30, 0xEC	; 236
    21ce:	f7 e0       	ldi	r31, 0x07	; 7

	*buffer->in = data;
    21d0:	a2 81       	ldd	r26, Z+2	; 0x02
    21d2:	b3 81       	ldd	r27, Z+3	; 0x03
    21d4:	cc 93       	st	X, r28

	if (++buffer->in == buffer->end)
    21d6:	82 81       	ldd	r24, Z+2	; 0x02
    21d8:	93 81       	ldd	r25, Z+3	; 0x03
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	93 83       	std	Z+3, r25	; 0x03
    21de:	82 83       	std	Z+2, r24	; 0x02
    21e0:	20 85       	ldd	r18, Z+8	; 0x08
    21e2:	31 85       	ldd	r19, Z+9	; 0x09
    21e4:	82 17       	cp	r24, r18
    21e6:	93 07       	cpc	r25, r19
    21e8:	21 f4       	brne	.+8      	; 0x21f2 <__vector_25+0xd4>
	  buffer->in = buffer->start;
    21ea:	86 81       	ldd	r24, Z+6	; 0x06
    21ec:	97 81       	ldd	r25, Z+7	; 0x07
    21ee:	93 83       	std	Z+3, r25	; 0x03
    21f0:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	0f 92       	push	r0
	{
	    buffer->count++;
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	01 96       	adiw	r24, 0x01	; 1
    21fe:	91 83       	std	Z+1, r25	; 0x01
    2200:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    2202:	0f 90       	pop	r0
    2204:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerialPort.xRxedChars), cChar);
	}
}
    2206:	ff 91       	pop	r31
    2208:	ef 91       	pop	r30
    220a:	cf 91       	pop	r28
    220c:	bf 91       	pop	r27
    220e:	af 91       	pop	r26
    2210:	9f 91       	pop	r25
    2212:	8f 91       	pop	r24
    2214:	7f 91       	pop	r23
    2216:	6f 91       	pop	r22
    2218:	5f 91       	pop	r21
    221a:	4f 91       	pop	r20
    221c:	3f 91       	pop	r19
    221e:	2f 91       	pop	r18
    2220:	0f 90       	pop	r0
    2222:	0b be       	out	0x3b, r0	; 59
    2224:	0f 90       	pop	r0
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	0f 90       	pop	r0
    222a:	1f 90       	pop	r1
    222c:	18 95       	reti

0000222e <__vector_26>:
#elif defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
ISR( USART0_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART0_UDRE_vect )

#endif
{
    222e:	1f 92       	push	r1
    2230:	0f 92       	push	r0
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	0f 92       	push	r0
    2236:	11 24       	eor	r1, r1
    2238:	0b b6       	in	r0, 0x3b	; 59
    223a:	0f 92       	push	r0
    223c:	2f 93       	push	r18
    223e:	8f 93       	push	r24
    2240:	9f 93       	push	r25
    2242:	af 93       	push	r26
    2244:	bf 93       	push	r27
    2246:	ef 93       	push	r30
    2248:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	0f 92       	push	r0
	{
	    count = buffer->count;
    2250:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <xSerialPort+0xd>
    2254:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <xSerialPort+0xe>
	}
	portEXIT_CRITICAL();
    2258:	0f 90       	pop	r0
    225a:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerialPort.xCharsForTx) ) )
    225c:	89 2b       	or	r24, r25
    225e:	31 f4       	brne	.+12     	; 0x226c <__vector_26+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt0_Off();
    2260:	e1 ec       	ldi	r30, 0xC1	; 193
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	8f 7d       	andi	r24, 0xDF	; 223
    2268:	80 83       	st	Z, r24
    226a:	1c c0       	rjmp	.+56     	; 0x22a4 <__vector_26+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    226c:	e8 ef       	ldi	r30, 0xF8	; 248
    226e:	f7 e0       	ldi	r31, 0x07	; 7

	uint8_t data = *buffer->out;
    2270:	a4 81       	ldd	r26, Z+4	; 0x04
    2272:	b5 81       	ldd	r27, Z+5	; 0x05
    2274:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    2276:	b5 83       	std	Z+5, r27	; 0x05
    2278:	a4 83       	std	Z+4, r26	; 0x04
    227a:	80 85       	ldd	r24, Z+8	; 0x08
    227c:	91 85       	ldd	r25, Z+9	; 0x09
    227e:	a8 17       	cp	r26, r24
    2280:	b9 07       	cpc	r27, r25
    2282:	21 f4       	brne	.+8      	; 0x228c <__vector_26+0x5e>
	  buffer->out = buffer->start;
    2284:	86 81       	ldd	r24, Z+6	; 0x06
    2286:	97 81       	ldd	r25, Z+7	; 0x07
    2288:	95 83       	std	Z+5, r25	; 0x05
    228a:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	0f 92       	push	r0
	{
	    buffer->count--;
    2292:	80 81       	ld	r24, Z
    2294:	91 81       	ldd	r25, Z+1	; 0x01
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    229c:	0f 90       	pop	r0
    229e:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR0 = ringBuffer_Pop( (ringBuffer_t*) &(xSerialPort.xCharsForTx) );
    22a0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    22a4:	ff 91       	pop	r31
    22a6:	ef 91       	pop	r30
    22a8:	bf 91       	pop	r27
    22aa:	af 91       	pop	r26
    22ac:	9f 91       	pop	r25
    22ae:	8f 91       	pop	r24
    22b0:	2f 91       	pop	r18
    22b2:	0f 90       	pop	r0
    22b4:	0b be       	out	0x3b, r0	; 59
    22b6:	0f 90       	pop	r0
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	0f 90       	pop	r0
    22bc:	1f 90       	pop	r1
    22be:	18 95       	reti

000022c0 <__vector_36>:

#if defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

ISR( USART1_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART1_RX_vect )
{
    22c0:	1f 92       	push	r1
    22c2:	0f 92       	push	r0
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	0f 92       	push	r0
    22c8:	11 24       	eor	r1, r1
    22ca:	0b b6       	in	r0, 0x3b	; 59
    22cc:	0f 92       	push	r0
    22ce:	2f 93       	push	r18
    22d0:	3f 93       	push	r19
    22d2:	4f 93       	push	r20
    22d4:	8f 93       	push	r24
    22d6:	9f 93       	push	r25
    22d8:	af 93       	push	r26
    22da:	bf 93       	push	r27
    22dc:	ef 93       	push	r30
    22de:	ff 93       	push	r31
	/* Get status and data from buffer */
     
	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR1A &  (_BV(FE1)|_BV(DOR1)|_BV(UPE1)) ) )
    22e0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    22e4:	8c 71       	andi	r24, 0x1C	; 28
    22e6:	71 f0       	breq	.+28     	; 0x2304 <__vector_36+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR1A & (1<<RXC1) ) erroredByte = UDR1;
    22e8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    22ec:	88 23       	and	r24, r24
    22ee:	0c f0       	brlt	.+2      	; 0x22f2 <__vector_36+0x32>
    22f0:	36 c0       	rjmp	.+108    	; 0x235e <__vector_36+0x9e>
    22f2:	ae ec       	ldi	r26, 0xCE	; 206
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e8 ec       	ldi	r30, 0xC8	; 200
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	8c 91       	ld	r24, X
    22fc:	80 81       	ld	r24, Z
    22fe:	88 23       	and	r24, r24
    2300:	e4 f3       	brlt	.-8      	; 0x22fa <__vector_36+0x3a>
    2302:	2d c0       	rjmp	.+90     	; 0x235e <__vector_36+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR1;
    2304:	40 91 ce 00 	lds	r20, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	0f 92       	push	r0
	{
	    count = buffer->count;
    230e:	e3 e5       	ldi	r30, 0x53	; 83
    2310:	f9 e0       	ldi	r31, 0x09	; 9
    2312:	21 81       	ldd	r18, Z+1	; 0x01
    2314:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2316:	0f 90       	pop	r0
    2318:	0f be       	out	0x3f, r0	; 63
				
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial1Port.xRxedChars) ) )
    231a:	83 85       	ldd	r24, Z+11	; 0x0b
    231c:	94 85       	ldd	r25, Z+12	; 0x0c
    231e:	28 17       	cp	r18, r24
    2320:	39 07       	cpc	r19, r25
    2322:	e9 f0       	breq	.+58     	; 0x235e <__vector_36+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    2324:	e4 e5       	ldi	r30, 0x54	; 84
    2326:	f9 e0       	ldi	r31, 0x09	; 9

	*buffer->in = data;
    2328:	a2 81       	ldd	r26, Z+2	; 0x02
    232a:	b3 81       	ldd	r27, Z+3	; 0x03
    232c:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	01 96       	adiw	r24, 0x01	; 1
    2334:	93 83       	std	Z+3, r25	; 0x03
    2336:	82 83       	std	Z+2, r24	; 0x02
    2338:	20 85       	ldd	r18, Z+8	; 0x08
    233a:	31 85       	ldd	r19, Z+9	; 0x09
    233c:	82 17       	cp	r24, r18
    233e:	93 07       	cpc	r25, r19
    2340:	21 f4       	brne	.+8      	; 0x234a <__vector_36+0x8a>
	  buffer->in = buffer->start;
    2342:	86 81       	ldd	r24, Z+6	; 0x06
    2344:	97 81       	ldd	r25, Z+7	; 0x07
    2346:	93 83       	std	Z+3, r25	; 0x03
    2348:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	0f 92       	push	r0
	{
	    buffer->count++;
    2350:	80 81       	ld	r24, Z
    2352:	91 81       	ldd	r25, Z+1	; 0x01
    2354:	01 96       	adiw	r24, 0x01	; 1
    2356:	91 83       	std	Z+1, r25	; 0x01
    2358:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    235a:	0f 90       	pop	r0
    235c:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial1Port.xRxedChars), cChar);
			
	}
}
    235e:	ff 91       	pop	r31
    2360:	ef 91       	pop	r30
    2362:	bf 91       	pop	r27
    2364:	af 91       	pop	r26
    2366:	9f 91       	pop	r25
    2368:	8f 91       	pop	r24
    236a:	4f 91       	pop	r20
    236c:	3f 91       	pop	r19
    236e:	2f 91       	pop	r18
    2370:	0f 90       	pop	r0
    2372:	0b be       	out	0x3b, r0	; 59
    2374:	0f 90       	pop	r0
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	0f 90       	pop	r0
    237a:	1f 90       	pop	r1
    237c:	18 95       	reti

0000237e <__vector_37>:
/*-----------------------------------------------------------*/

ISR( USART1_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART1_UDRE_vect )
{
    237e:	1f 92       	push	r1
    2380:	0f 92       	push	r0
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	0f 92       	push	r0
    2386:	11 24       	eor	r1, r1
    2388:	0b b6       	in	r0, 0x3b	; 59
    238a:	0f 92       	push	r0
    238c:	2f 93       	push	r18
    238e:	8f 93       	push	r24
    2390:	9f 93       	push	r25
    2392:	af 93       	push	r26
    2394:	bf 93       	push	r27
    2396:	ef 93       	push	r30
    2398:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	0f 92       	push	r0
	{
	    count = buffer->count;
    23a0:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <xSerial1Port+0xd>
    23a4:	90 91 61 09 	lds	r25, 0x0961	; 0x800961 <xSerial1Port+0xe>
	}
	portEXIT_CRITICAL();
    23a8:	0f 90       	pop	r0
    23aa:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) ) )
    23ac:	89 2b       	or	r24, r25
    23ae:	31 f4       	brne	.+12     	; 0x23bc <__vector_37+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt1_Off();
    23b0:	e9 ec       	ldi	r30, 0xC9	; 201
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	8f 7d       	andi	r24, 0xDF	; 223
    23b8:	80 83       	st	Z, r24
    23ba:	1c c0       	rjmp	.+56     	; 0x23f4 <__vector_37+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    23bc:	e0 e6       	ldi	r30, 0x60	; 96
    23be:	f9 e0       	ldi	r31, 0x09	; 9

	uint8_t data = *buffer->out;
    23c0:	a4 81       	ldd	r26, Z+4	; 0x04
    23c2:	b5 81       	ldd	r27, Z+5	; 0x05
    23c4:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    23c6:	b5 83       	std	Z+5, r27	; 0x05
    23c8:	a4 83       	std	Z+4, r26	; 0x04
    23ca:	80 85       	ldd	r24, Z+8	; 0x08
    23cc:	91 85       	ldd	r25, Z+9	; 0x09
    23ce:	a8 17       	cp	r26, r24
    23d0:	b9 07       	cpc	r27, r25
    23d2:	21 f4       	brne	.+8      	; 0x23dc <__vector_37+0x5e>
	  buffer->out = buffer->start;
    23d4:	86 81       	ldd	r24, Z+6	; 0x06
    23d6:	97 81       	ldd	r25, Z+7	; 0x07
    23d8:	95 83       	std	Z+5, r25	; 0x05
    23da:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	0f 92       	push	r0
	{
	    buffer->count--;
    23e2:	80 81       	ld	r24, Z
    23e4:	91 81       	ldd	r25, Z+1	; 0x01
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	91 83       	std	Z+1, r25	; 0x01
    23ea:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    23ec:	0f 90       	pop	r0
    23ee:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR1 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) );
    23f0:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
	}
}
    23f4:	ff 91       	pop	r31
    23f6:	ef 91       	pop	r30
    23f8:	bf 91       	pop	r27
    23fa:	af 91       	pop	r26
    23fc:	9f 91       	pop	r25
    23fe:	8f 91       	pop	r24
    2400:	2f 91       	pop	r18
    2402:	0f 90       	pop	r0
    2404:	0b be       	out	0x3b, r0	; 59
    2406:	0f 90       	pop	r0
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	0f 90       	pop	r0
    240c:	1f 90       	pop	r1
    240e:	18 95       	reti

00002410 <__vector_51>:

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

ISR( USART2_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART2_RX_vect )
{
    2410:	1f 92       	push	r1
    2412:	0f 92       	push	r0
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	0f 92       	push	r0
    2418:	11 24       	eor	r1, r1
    241a:	0b b6       	in	r0, 0x3b	; 59
    241c:	0f 92       	push	r0
    241e:	2f 93       	push	r18
    2420:	3f 93       	push	r19
    2422:	4f 93       	push	r20
    2424:	8f 93       	push	r24
    2426:	9f 93       	push	r25
    2428:	af 93       	push	r26
    242a:	bf 93       	push	r27
    242c:	ef 93       	push	r30
    242e:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR2A & (_BV(FE2)|_BV(DOR2)|_BV(UPE2)) ) )
    2430:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    2434:	8c 71       	andi	r24, 0x1C	; 28
    2436:	71 f0       	breq	.+28     	; 0x2454 <__vector_51+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR2A & (1<<RXC2) ) erroredByte = UDR2;
    2438:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    243c:	88 23       	and	r24, r24
    243e:	0c f0       	brlt	.+2      	; 0x2442 <__vector_51+0x32>
    2440:	36 c0       	rjmp	.+108    	; 0x24ae <__vector_51+0x9e>
    2442:	a6 ed       	ldi	r26, 0xD6	; 214
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e0 ed       	ldi	r30, 0xD0	; 208
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	8c 91       	ld	r24, X
    244c:	80 81       	ld	r24, Z
    244e:	88 23       	and	r24, r24
    2450:	e4 f3       	brlt	.-8      	; 0x244a <__vector_51+0x3a>
    2452:	2d c0       	rjmp	.+90     	; 0x24ae <__vector_51+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR2;
    2454:	40 91 d6 00 	lds	r20, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	0f 92       	push	r0
	{
	    count = buffer->count;
    245e:	ef e0       	ldi	r30, 0x0F	; 15
    2460:	f8 e0       	ldi	r31, 0x08	; 8
    2462:	21 81       	ldd	r18, Z+1	; 0x01
    2464:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2466:	0f 90       	pop	r0
    2468:	0f be       	out	0x3f, r0	; 63

		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial2Port.xRxedChars) ) )
    246a:	83 85       	ldd	r24, Z+11	; 0x0b
    246c:	94 85       	ldd	r25, Z+12	; 0x0c
    246e:	28 17       	cp	r18, r24
    2470:	39 07       	cpc	r19, r25
    2472:	e9 f0       	breq	.+58     	; 0x24ae <__vector_51+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    2474:	e0 e1       	ldi	r30, 0x10	; 16
    2476:	f8 e0       	ldi	r31, 0x08	; 8

	*buffer->in = data;
    2478:	a2 81       	ldd	r26, Z+2	; 0x02
    247a:	b3 81       	ldd	r27, Z+3	; 0x03
    247c:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	93 81       	ldd	r25, Z+3	; 0x03
    2482:	01 96       	adiw	r24, 0x01	; 1
    2484:	93 83       	std	Z+3, r25	; 0x03
    2486:	82 83       	std	Z+2, r24	; 0x02
    2488:	20 85       	ldd	r18, Z+8	; 0x08
    248a:	31 85       	ldd	r19, Z+9	; 0x09
    248c:	82 17       	cp	r24, r18
    248e:	93 07       	cpc	r25, r19
    2490:	21 f4       	brne	.+8      	; 0x249a <__vector_51+0x8a>
	  buffer->in = buffer->start;
    2492:	86 81       	ldd	r24, Z+6	; 0x06
    2494:	97 81       	ldd	r25, Z+7	; 0x07
    2496:	93 83       	std	Z+3, r25	; 0x03
    2498:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	0f 92       	push	r0
	{
	    buffer->count++;
    24a0:	80 81       	ld	r24, Z
    24a2:	91 81       	ldd	r25, Z+1	; 0x01
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    24aa:	0f 90       	pop	r0
    24ac:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial2Port.xRxedChars), cChar);
	}
}
    24ae:	ff 91       	pop	r31
    24b0:	ef 91       	pop	r30
    24b2:	bf 91       	pop	r27
    24b4:	af 91       	pop	r26
    24b6:	9f 91       	pop	r25
    24b8:	8f 91       	pop	r24
    24ba:	4f 91       	pop	r20
    24bc:	3f 91       	pop	r19
    24be:	2f 91       	pop	r18
    24c0:	0f 90       	pop	r0
    24c2:	0b be       	out	0x3b, r0	; 59
    24c4:	0f 90       	pop	r0
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	0f 90       	pop	r0
    24ca:	1f 90       	pop	r1
    24cc:	18 95       	reti

000024ce <__vector_52>:
/*-----------------------------------------------------------*/

ISR( USART2_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART2_UDRE_vect )
{
    24ce:	1f 92       	push	r1
    24d0:	0f 92       	push	r0
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	0f 92       	push	r0
    24d6:	11 24       	eor	r1, r1
    24d8:	0b b6       	in	r0, 0x3b	; 59
    24da:	0f 92       	push	r0
    24dc:	2f 93       	push	r18
    24de:	8f 93       	push	r24
    24e0:	9f 93       	push	r25
    24e2:	af 93       	push	r26
    24e4:	bf 93       	push	r27
    24e6:	ef 93       	push	r30
    24e8:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	0f 92       	push	r0
	{
	    count = buffer->count;
    24f0:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <xSerial2Port+0xd>
    24f4:	90 91 1d 08 	lds	r25, 0x081D	; 0x80081d <xSerial2Port+0xe>
	}
	portEXIT_CRITICAL();
    24f8:	0f 90       	pop	r0
    24fa:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) ) )
    24fc:	89 2b       	or	r24, r25
    24fe:	31 f4       	brne	.+12     	; 0x250c <__vector_52+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt2_Off();
    2500:	e1 ed       	ldi	r30, 0xD1	; 209
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	8f 7d       	andi	r24, 0xDF	; 223
    2508:	80 83       	st	Z, r24
    250a:	1c c0       	rjmp	.+56     	; 0x2544 <__vector_52+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    250c:	ec e1       	ldi	r30, 0x1C	; 28
    250e:	f8 e0       	ldi	r31, 0x08	; 8

	uint8_t data = *buffer->out;
    2510:	a4 81       	ldd	r26, Z+4	; 0x04
    2512:	b5 81       	ldd	r27, Z+5	; 0x05
    2514:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    2516:	b5 83       	std	Z+5, r27	; 0x05
    2518:	a4 83       	std	Z+4, r26	; 0x04
    251a:	80 85       	ldd	r24, Z+8	; 0x08
    251c:	91 85       	ldd	r25, Z+9	; 0x09
    251e:	a8 17       	cp	r26, r24
    2520:	b9 07       	cpc	r27, r25
    2522:	21 f4       	brne	.+8      	; 0x252c <__vector_52+0x5e>
	  buffer->out = buffer->start;
    2524:	86 81       	ldd	r24, Z+6	; 0x06
    2526:	97 81       	ldd	r25, Z+7	; 0x07
    2528:	95 83       	std	Z+5, r25	; 0x05
    252a:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	0f 92       	push	r0
	{
	    buffer->count--;
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	91 83       	std	Z+1, r25	; 0x01
    253a:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    253c:	0f 90       	pop	r0
    253e:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR2 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) );
    2540:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	}
}
    2544:	ff 91       	pop	r31
    2546:	ef 91       	pop	r30
    2548:	bf 91       	pop	r27
    254a:	af 91       	pop	r26
    254c:	9f 91       	pop	r25
    254e:	8f 91       	pop	r24
    2550:	2f 91       	pop	r18
    2552:	0f 90       	pop	r0
    2554:	0b be       	out	0x3b, r0	; 59
    2556:	0f 90       	pop	r0
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	0f 90       	pop	r0
    255c:	1f 90       	pop	r1
    255e:	18 95       	reti

00002560 <__vector_54>:
/*-----------------------------------------------------------*/

ISR( USART3_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART3_RX_vect )
{
    2560:	1f 92       	push	r1
    2562:	0f 92       	push	r0
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	0f 92       	push	r0
    2568:	11 24       	eor	r1, r1
    256a:	0b b6       	in	r0, 0x3b	; 59
    256c:	0f 92       	push	r0
    256e:	2f 93       	push	r18
    2570:	3f 93       	push	r19
    2572:	4f 93       	push	r20
    2574:	5f 93       	push	r21
    2576:	6f 93       	push	r22
    2578:	7f 93       	push	r23
    257a:	8f 93       	push	r24
    257c:	9f 93       	push	r25
    257e:	af 93       	push	r26
    2580:	bf 93       	push	r27
    2582:	cf 93       	push	r28
    2584:	ef 93       	push	r30
    2586:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR3A & (_BV(FE3)|_BV(DOR3)|_BV(UPE3)) ) )
    2588:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    258c:	8c 71       	andi	r24, 0x1C	; 28
    258e:	71 f0       	breq	.+28     	; 0x25ac <__vector_54+0x4c>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR3A & (1<<RXC3) ) erroredByte = UDR3;
    2590:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2594:	88 23       	and	r24, r24
    2596:	0c f0       	brlt	.+2      	; 0x259a <__vector_54+0x3a>
    2598:	57 c0       	rjmp	.+174    	; 0x2648 <__vector_54+0xe8>
    259a:	a6 e3       	ldi	r26, 0x36	; 54
    259c:	b1 e0       	ldi	r27, 0x01	; 1
    259e:	e0 e3       	ldi	r30, 0x30	; 48
    25a0:	f1 e0       	ldi	r31, 0x01	; 1
    25a2:	8c 91       	ld	r24, X
    25a4:	80 81       	ld	r24, Z
    25a6:	88 23       	and	r24, r24
    25a8:	e4 f3       	brlt	.-8      	; 0x25a2 <__vector_54+0x42>
    25aa:	4e c0       	rjmp	.+156    	; 0x2648 <__vector_54+0xe8>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR3;
    25ac:	c0 91 36 01 	lds	r28, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		
	//xSerialxPrintf(&xSerial3Port,"interrupt\r\n");	
if(!port_0)
    25b0:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <port_0>
    25b4:	81 11       	cpse	r24, r1
    25b6:	1d c0       	rjmp	.+58     	; 0x25f2 <__vector_54+0x92>
{			//xSerialxPrintf(&xSerial3Port,"port_3\r\n");
			port_3=true;
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	80 93 93 09 	sts	0x0993, r24	; 0x800993 <port_3>
			//timer_1_Init();
			stop_1_Timer();
    25be:	0e 94 13 25 	call	0x4a26	; 0x4a26 <stop_1_Timer>
			TCNT1=0;//my cod
    25c2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    25c6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
			frame[indexBuf] = cChar;//my cod
    25ca:	e0 91 31 08 	lds	r30, 0x0831	; 0x800831 <indexBuf>
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	ec 5a       	subi	r30, 0xAC	; 172
    25d2:	f7 4f       	sbci	r31, 0xF7	; 247
    25d4:	c0 83       	st	Z, r28
			indexBuf++;//my cod
    25d6:	80 91 31 08 	lds	r24, 0x0831	; 0x800831 <indexBuf>
    25da:	8f 5f       	subi	r24, 0xFF	; 255
    25dc:	80 93 31 08 	sts	0x0831, r24	; 0x800831 <indexBuf>
			if(indexBuf == portSERIAL_BUFFER_RX ) overflow=1;//my cod
    25e0:	80 91 31 08 	lds	r24, 0x0831	; 0x800831 <indexBuf>
    25e4:	8f 3f       	cpi	r24, 0xFF	; 255
    25e6:	19 f4       	brne	.+6      	; 0x25ee <__vector_54+0x8e>
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	80 93 0d 08 	sts	0x080D, r24	; 0x80080d <overflow>
			start_1_Timer();//my cod
    25ee:	0e 94 08 25 	call	0x4a10	; 0x4a10 <start_1_Timer>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	0f 92       	push	r0
	{
	    count = buffer->count;
    25f8:	e2 e3       	ldi	r30, 0x32	; 50
    25fa:	f8 e0       	ldi	r31, 0x08	; 8
    25fc:	21 81       	ldd	r18, Z+1	; 0x01
    25fe:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2600:	0f 90       	pop	r0
    2602:	0f be       	out	0x3f, r0	; 63
}
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial3Port.xRxedChars) ) )
    2604:	83 85       	ldd	r24, Z+11	; 0x0b
    2606:	94 85       	ldd	r25, Z+12	; 0x0c
    2608:	28 17       	cp	r18, r24
    260a:	39 07       	cpc	r19, r25
    260c:	e9 f0       	breq	.+58     	; 0x2648 <__vector_54+0xe8>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    260e:	e3 e3       	ldi	r30, 0x33	; 51
    2610:	f8 e0       	ldi	r31, 0x08	; 8

	*buffer->in = data;
    2612:	a2 81       	ldd	r26, Z+2	; 0x02
    2614:	b3 81       	ldd	r27, Z+3	; 0x03
    2616:	cc 93       	st	X, r28

	if (++buffer->in == buffer->end)
    2618:	82 81       	ldd	r24, Z+2	; 0x02
    261a:	93 81       	ldd	r25, Z+3	; 0x03
    261c:	01 96       	adiw	r24, 0x01	; 1
    261e:	93 83       	std	Z+3, r25	; 0x03
    2620:	82 83       	std	Z+2, r24	; 0x02
    2622:	20 85       	ldd	r18, Z+8	; 0x08
    2624:	31 85       	ldd	r19, Z+9	; 0x09
    2626:	82 17       	cp	r24, r18
    2628:	93 07       	cpc	r25, r19
    262a:	21 f4       	brne	.+8      	; 0x2634 <__vector_54+0xd4>
	  buffer->in = buffer->start;
    262c:	86 81       	ldd	r24, Z+6	; 0x06
    262e:	97 81       	ldd	r25, Z+7	; 0x07
    2630:	93 83       	std	Z+3, r25	; 0x03
    2632:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	0f 92       	push	r0
	{
	    buffer->count++;
    263a:	80 81       	ld	r24, Z
    263c:	91 81       	ldd	r25, Z+1	; 0x01
    263e:	01 96       	adiw	r24, 0x01	; 1
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    2644:	0f 90       	pop	r0
    2646:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial3Port.xRxedChars), cChar);
	}
}
    2648:	ff 91       	pop	r31
    264a:	ef 91       	pop	r30
    264c:	cf 91       	pop	r28
    264e:	bf 91       	pop	r27
    2650:	af 91       	pop	r26
    2652:	9f 91       	pop	r25
    2654:	8f 91       	pop	r24
    2656:	7f 91       	pop	r23
    2658:	6f 91       	pop	r22
    265a:	5f 91       	pop	r21
    265c:	4f 91       	pop	r20
    265e:	3f 91       	pop	r19
    2660:	2f 91       	pop	r18
    2662:	0f 90       	pop	r0
    2664:	0b be       	out	0x3b, r0	; 59
    2666:	0f 90       	pop	r0
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	0f 90       	pop	r0
    266c:	1f 90       	pop	r1
    266e:	18 95       	reti

00002670 <__vector_55>:
/*-----------------------------------------------------------*/

ISR( USART3_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART3_UDRE_vect )
{
    2670:	1f 92       	push	r1
    2672:	0f 92       	push	r0
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	0f 92       	push	r0
    2678:	11 24       	eor	r1, r1
    267a:	0b b6       	in	r0, 0x3b	; 59
    267c:	0f 92       	push	r0
    267e:	2f 93       	push	r18
    2680:	8f 93       	push	r24
    2682:	9f 93       	push	r25
    2684:	af 93       	push	r26
    2686:	bf 93       	push	r27
    2688:	ef 93       	push	r30
    268a:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	0f 92       	push	r0
	{
	    count = buffer->count;
    2692:	80 91 3f 08 	lds	r24, 0x083F	; 0x80083f <xSerial3Port+0xd>
    2696:	90 91 40 08 	lds	r25, 0x0840	; 0x800840 <xSerial3Port+0xe>
	}
	portEXIT_CRITICAL();
    269a:	0f 90       	pop	r0
    269c:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) ) )
    269e:	89 2b       	or	r24, r25
    26a0:	31 f4       	brne	.+12     	; 0x26ae <__vector_55+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt3_Off();
    26a2:	e1 e3       	ldi	r30, 0x31	; 49
    26a4:	f1 e0       	ldi	r31, 0x01	; 1
    26a6:	80 81       	ld	r24, Z
    26a8:	8f 7d       	andi	r24, 0xDF	; 223
    26aa:	80 83       	st	Z, r24
    26ac:	1c c0       	rjmp	.+56     	; 0x26e6 <__vector_55+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    26ae:	ef e3       	ldi	r30, 0x3F	; 63
    26b0:	f8 e0       	ldi	r31, 0x08	; 8

	uint8_t data = *buffer->out;
    26b2:	a4 81       	ldd	r26, Z+4	; 0x04
    26b4:	b5 81       	ldd	r27, Z+5	; 0x05
    26b6:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    26b8:	b5 83       	std	Z+5, r27	; 0x05
    26ba:	a4 83       	std	Z+4, r26	; 0x04
    26bc:	80 85       	ldd	r24, Z+8	; 0x08
    26be:	91 85       	ldd	r25, Z+9	; 0x09
    26c0:	a8 17       	cp	r26, r24
    26c2:	b9 07       	cpc	r27, r25
    26c4:	21 f4       	brne	.+8      	; 0x26ce <__vector_55+0x5e>
	  buffer->out = buffer->start;
    26c6:	86 81       	ldd	r24, Z+6	; 0x06
    26c8:	97 81       	ldd	r25, Z+7	; 0x07
    26ca:	95 83       	std	Z+5, r25	; 0x05
    26cc:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	0f 92       	push	r0
	{
	    buffer->count--;
    26d4:	80 81       	ld	r24, Z
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    26de:	0f 90       	pop	r0
    26e0:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR3 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) );
    26e2:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	}
}
    26e6:	ff 91       	pop	r31
    26e8:	ef 91       	pop	r30
    26ea:	bf 91       	pop	r27
    26ec:	af 91       	pop	r26
    26ee:	9f 91       	pop	r25
    26f0:	8f 91       	pop	r24
    26f2:	2f 91       	pop	r18
    26f4:	0f 90       	pop	r0
    26f6:	0b be       	out	0x3b, r0	; 59
    26f8:	0f 90       	pop	r0
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	0f 90       	pop	r0
    26fe:	1f 90       	pop	r1
    2700:	18 95       	reti

00002702 <spiBegin>:
	SPCR |= _BV(SPIE);
}

void spiDetachInterrupt(void)
{
	SPCR &= ~_BV(SPIE);
    2702:	0f 93       	push	r16
    2704:	81 30       	cpi	r24, 0x01	; 1
    2706:	71 f0       	breq	.+28     	; 0x2724 <spiBegin+0x22>
    2708:	18 f0       	brcs	.+6      	; 0x2710 <spiBegin+0xe>
    270a:	82 30       	cpi	r24, 0x02	; 2
    270c:	a9 f0       	breq	.+42     	; 0x2738 <spiBegin+0x36>
    270e:	26 c0       	rjmp	.+76     	; 0x275c <spiBegin+0x5a>
    2710:	84 b1       	in	r24, 0x04	; 4
    2712:	87 60       	ori	r24, 0x07	; 7
    2714:	84 b9       	out	0x04, r24	; 4
    2716:	23 98       	cbi	0x04, 3	; 4
    2718:	85 b1       	in	r24, 0x05	; 5
    271a:	89 60       	ori	r24, 0x09	; 9
    271c:	85 b9       	out	0x05, r24	; 5
    271e:	24 9a       	sbi	0x04, 4	; 4
    2720:	2c 9a       	sbi	0x05, 4	; 5
    2722:	23 c0       	rjmp	.+70     	; 0x276a <spiBegin+0x68>
    2724:	84 b1       	in	r24, 0x04	; 4
    2726:	87 60       	ori	r24, 0x07	; 7
    2728:	84 b9       	out	0x04, r24	; 4
    272a:	23 98       	cbi	0x04, 3	; 4
    272c:	85 b1       	in	r24, 0x05	; 5
    272e:	89 60       	ori	r24, 0x09	; 9
    2730:	85 b9       	out	0x05, r24	; 5
    2732:	9d 9a       	sbi	0x13, 5	; 19
    2734:	a5 9a       	sbi	0x14, 5	; 20
    2736:	19 c0       	rjmp	.+50     	; 0x276a <spiBegin+0x68>
    2738:	84 b1       	in	r24, 0x04	; 4
    273a:	87 60       	ori	r24, 0x07	; 7
    273c:	84 b9       	out	0x04, r24	; 4
    273e:	23 98       	cbi	0x04, 3	; 4
    2740:	85 b1       	in	r24, 0x05	; 5
    2742:	89 60       	ori	r24, 0x09	; 9
    2744:	85 b9       	out	0x05, r24	; 5
    2746:	e1 e0       	ldi	r30, 0x01	; 1
    2748:	f1 e0       	ldi	r31, 0x01	; 1
    274a:	80 81       	ld	r24, Z
    274c:	80 62       	ori	r24, 0x20	; 32
    274e:	80 83       	st	Z, r24
    2750:	e2 e0       	ldi	r30, 0x02	; 2
    2752:	f1 e0       	ldi	r31, 0x01	; 1
    2754:	80 81       	ld	r24, Z
    2756:	80 62       	ori	r24, 0x20	; 32
    2758:	80 83       	st	Z, r24
    275a:	07 c0       	rjmp	.+14     	; 0x276a <spiBegin+0x68>
    275c:	84 b1       	in	r24, 0x04	; 4
    275e:	87 60       	ori	r24, 0x07	; 7
    2760:	84 b9       	out	0x04, r24	; 4
    2762:	23 98       	cbi	0x04, 3	; 4
    2764:	85 b1       	in	r24, 0x05	; 5
    2766:	89 60       	ori	r24, 0x09	; 9
    2768:	85 b9       	out	0x05, r24	; 5
    276a:	8c b5       	in	r24, 0x2c	; 44
    276c:	80 65       	ori	r24, 0x50	; 80
    276e:	8c bd       	out	0x2c, r24	; 44
    2770:	8d b5       	in	r24, 0x2d	; 45
    2772:	8e b5       	in	r24, 0x2e	; 46
    2774:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <__data_end>
    2778:	90 91 0d 07 	lds	r25, 0x070D	; 0x80070d <__data_end+0x1>
    277c:	89 2b       	or	r24, r25
    277e:	89 f4       	brne	.+34     	; 0x27a2 <spiBegin+0xa0>
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	0e 94 75 0a 	call	0x14ea	; 0x14ea <xQueueCreateMutex>
    2786:	90 93 0d 07 	sts	0x070D, r25	; 0x80070d <__data_end+0x1>
    278a:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <__data_end>
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	41 f0       	breq	.+16     	; 0x27a2 <spiBegin+0xa0>
    2792:	00 e0       	ldi	r16, 0x00	; 0
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	a9 01       	movw	r20, r18
    279a:	60 e0       	ldi	r22, 0x00	; 0
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    27a2:	0f 91       	pop	r16
    27a4:	08 95       	ret

000027a6 <spiSetClockDivider>:
    27a6:	9c b5       	in	r25, 0x2c	; 44
    27a8:	9c 7f       	andi	r25, 0xFC	; 252
    27aa:	28 2f       	mov	r18, r24
    27ac:	23 70       	andi	r18, 0x03	; 3
    27ae:	92 2b       	or	r25, r18
    27b0:	9c bd       	out	0x2c, r25	; 44
    27b2:	9d b5       	in	r25, 0x2d	; 45
    27b4:	82 fb       	bst	r24, 2
    27b6:	88 27       	eor	r24, r24
    27b8:	80 f9       	bld	r24, 0
    27ba:	9e 7f       	andi	r25, 0xFE	; 254
    27bc:	89 2b       	or	r24, r25
    27be:	8d bd       	out	0x2d, r24	; 45
    27c0:	08 95       	ret

000027c2 <spiSetBitOrder>:
    27c2:	81 11       	cpse	r24, r1
    27c4:	04 c0       	rjmp	.+8      	; 0x27ce <spiSetBitOrder+0xc>
    27c6:	8c b5       	in	r24, 0x2c	; 44
    27c8:	80 62       	ori	r24, 0x20	; 32
    27ca:	8c bd       	out	0x2c, r24	; 44
    27cc:	08 95       	ret
    27ce:	8c b5       	in	r24, 0x2c	; 44
    27d0:	8f 7d       	andi	r24, 0xDF	; 223
    27d2:	8c bd       	out	0x2c, r24	; 44
    27d4:	08 95       	ret

000027d6 <spiSetDataMode>:
    27d6:	9c b5       	in	r25, 0x2c	; 44
    27d8:	93 7f       	andi	r25, 0xF3	; 243
    27da:	89 2b       	or	r24, r25
    27dc:	8c bd       	out	0x2c, r24	; 44
    27de:	08 95       	ret

000027e0 <spiSelect>:
/*-----------------------------------------------------------------------*/
/* Select the SPI device                                    */
/*-----------------------------------------------------------------------*/

uint8_t spiSelect(SPI_SLAVE_SELECT SS_pin)	/* 1:Successful, 0:Timeout */
{
    27e0:	cf 93       	push	r28
    27e2:	c8 2f       	mov	r28, r24

	if( (xSemaphoreTake( xSPISemaphore, (SPI_TIMEOUT / portTICK_PERIOD_MS )) == pdTRUE ) )
    27e4:	48 ee       	ldi	r20, 0xE8	; 232
    27e6:	53 e0       	ldi	r21, 0x03	; 3
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	70 e0       	ldi	r23, 0x00	; 0
    27ec:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <__data_end>
    27f0:	90 91 0d 07 	lds	r25, 0x070D	; 0x80070d <__data_end+0x1>
    27f4:	0e 94 8f 0b 	call	0x171e	; 0x171e <xQueueSemaphoreTake>
    27f8:	81 30       	cpi	r24, 0x01	; 1
    27fa:	b1 f4       	brne	.+44     	; 0x2828 <spiSelect+0x48>
	{

		switch( SS_pin )
    27fc:	c1 30       	cpi	r28, 0x01	; 1
    27fe:	39 f0       	breq	.+14     	; 0x280e <spiSelect+0x2e>
    2800:	18 f0       	brcs	.+6      	; 0x2808 <spiSelect+0x28>
    2802:	c2 30       	cpi	r28, 0x02	; 2
    2804:	39 f0       	breq	.+14     	; 0x2814 <spiSelect+0x34>
    2806:	0d c0       	rjmp	.+26     	; 0x2822 <spiSelect+0x42>
		{
		case Wiznet:	// added for EtherMega Wiznet 5100/5200 support
#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
			W5100_SEN_ENABLE(1); // Enable SEN, to get on the SPI bus. PORT D7
#endif
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
    2808:	2c 98       	cbi	0x05, 4	; 5
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    280a:	81 e0       	ldi	r24, 0x01	; 1
		case Wiznet:	// added for EtherMega Wiznet 5100/5200 support
#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
			W5100_SEN_ENABLE(1); // Enable SEN, to get on the SPI bus. PORT D7
#endif
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
			break;
    280c:	0e c0       	rjmp	.+28     	; 0x282a <spiSelect+0x4a>

		case SDCard:	// added for  SD Card support
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
    280e:	a5 98       	cbi	0x14, 5	; 20
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    2810:	81 e0       	ldi	r24, 0x01	; 1
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
			break;

		case SDCard:	// added for  SD Card support
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
			break;
    2812:	0b c0       	rjmp	.+22     	; 0x282a <spiSelect+0x4a>

		case Gameduino2:// added for Gameduino2 using FTDI FT800
			SPI_PORT_SS_G2 &= ~SPI_BIT_SS_G2; // Pull SS low to select the Gameduino 2.
    2814:	e2 e0       	ldi	r30, 0x02	; 2
    2816:	f1 e0       	ldi	r31, 0x01	; 1
    2818:	80 81       	ld	r24, Z
    281a:	8f 7d       	andi	r24, 0xDF	; 223
    281c:	80 83       	st	Z, r24
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    281e:	81 e0       	ldi	r24, 0x01	; 1
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
			break;

		case Gameduino2:// added for Gameduino2 using FTDI FT800
			SPI_PORT_SS_G2 &= ~SPI_BIT_SS_G2; // Pull SS low to select the Gameduino 2.
			break;
    2820:	04 c0       	rjmp	.+8      	; 0x282a <spiSelect+0x4a>
			break;
#endif

		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
    2822:	28 98       	cbi	0x05, 0	; 5
			break;
		}
		return 1;		// OK /
    2824:	81 e0       	ldi	r24, 0x01	; 1
#endif

		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
    2826:	01 c0       	rjmp	.+2      	; 0x282a <spiSelect+0x4a>
		}
		return 1;		// OK /
	}
	else
		return 0;		// Timeout
    2828:	80 e0       	ldi	r24, 0x00	; 0
}
    282a:	cf 91       	pop	r28
    282c:	08 95       	ret

0000282e <spiDeselect>:
/*-----------------------------------------------------------------------*/
/* Deselect the SPI device                                 */
/*-----------------------------------------------------------------------*/

void spiDeselect(SPI_SLAVE_SELECT SS_pin)
{
    282e:	0f 93       	push	r16
	// Pull SS high to Deselect the card.
	switch( SS_pin )
    2830:	81 30       	cpi	r24, 0x01	; 1
    2832:	31 f0       	breq	.+12     	; 0x2840 <spiDeselect+0x12>
    2834:	18 f0       	brcs	.+6      	; 0x283c <spiDeselect+0xe>
    2836:	82 30       	cpi	r24, 0x02	; 2
    2838:	29 f0       	breq	.+10     	; 0x2844 <spiDeselect+0x16>
    283a:	0a c0       	rjmp	.+20     	; 0x2850 <spiDeselect+0x22>
	{
	case Wiznet:		// added for EtherMega Wiznet 5100/5200 support
		SPI_PORT |= SPI_BIT_SS_WIZNET;
    283c:	2c 9a       	sbi	0x05, 4	; 5

#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
		W5100_SEN_ENABLE(0); // Disable SEN, to get off the SPI bus. PORT D7
#endif
		break;
    283e:	09 c0       	rjmp	.+18     	; 0x2852 <spiDeselect+0x24>

	case SDCard:		// added for  SD Card support
		SPI_PORT_SS_SD |= SPI_BIT_SS_SD;	// Pull SS high to deselect the uSD card.
    2840:	a5 9a       	sbi	0x14, 5	; 20
		break;
    2842:	07 c0       	rjmp	.+14     	; 0x2852 <spiDeselect+0x24>

	case Gameduino2:	// added for Gameduino 2 using FTDI FT800
		SPI_PORT_SS_G2 |= SPI_BIT_SS_G2;	// Pull SS high to deselect the Gameduino 2.
    2844:	e2 e0       	ldi	r30, 0x02	; 2
    2846:	f1 e0       	ldi	r31, 0x01	; 1
    2848:	80 81       	ld	r24, Z
    284a:	80 62       	ori	r24, 0x20	; 32
    284c:	80 83       	st	Z, r24
		break;
    284e:	01 c0       	rjmp	.+2      	; 0x2852 <spiDeselect+0x24>
		break;
#endif

	case Default:		// default SS line for Arduino Uno
	default:
		SPI_PORT |= SPI_BIT_SS;
    2850:	28 9a       	sbi	0x05, 0	; 5
		break;
	}

	xSemaphoreGive( xSPISemaphore );	/* Free FreeRTOS semaphore to allow other SPI access */
    2852:	00 e0       	ldi	r16, 0x00	; 0
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	a9 01       	movw	r20, r18
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <__data_end>
    2862:	90 91 0d 07 	lds	r25, 0x070D	; 0x80070d <__data_end+0x1>
    2866:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
}
    286a:	0f 91       	pop	r16
    286c:	08 95       	ret

0000286e <spiTransfer>:



uint8_t spiTransfer(uint8_t data)
{
    286e:	28 2f       	mov	r18, r24
	// That is NOT done by this function..., because...
	// Some devices need to have their SS held low across multiple transfer calls.
	// Using spiSelect (SS_pin);

	// If the SPI module has not been enabled yet, then return with nothing.
	if( !(SPCR & _BV(SPE)) ) return 0;
    2870:	9c b5       	in	r25, 0x2c	; 44
    2872:	89 2f       	mov	r24, r25
    2874:	80 74       	andi	r24, 0x40	; 64
    2876:	96 ff       	sbrs	r25, 6
    2878:	17 c0       	rjmp	.+46     	; 0x28a8 <spiTransfer+0x3a>

	// The SPI module is enabled, but it is in slave mode, so we can not
	// transmit the byte. This can happen if SSbar is an input and it went low.
	// We will try to recover by setting the MSTR bit.
	if( !(SPCR & _BV(MSTR)) )
    287a:	0c b4       	in	r0, 0x2c	; 44
    287c:	04 fc       	sbrc	r0, 4
    287e:	08 c0       	rjmp	.+16     	; 0x2890 <spiTransfer+0x22>
		{
			SPCR |= _BV(MSTR);
    2880:	8c b5       	in	r24, 0x2c	; 44
    2882:	80 61       	ori	r24, 0x10	; 16
    2884:	8c bd       	out	0x2c, r24	; 44
			if( !(SPCR & _BV(MSTR)) ) return 0;
    2886:	9c b5       	in	r25, 0x2c	; 44
    2888:	89 2f       	mov	r24, r25
    288a:	80 71       	andi	r24, 0x10	; 16
    288c:	94 ff       	sbrs	r25, 4
    288e:	0c c0       	rjmp	.+24     	; 0x28a8 <spiTransfer+0x3a>
		}

	SPDR = data; 	// Begin transmission
    2890:	2e bd       	out	0x2e, r18	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop from iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
	__asm__ __volatile__("nop");
    2892:	00 00       	nop

	while( !(SPSR & _BV(SPIF)) )
    2894:	05 c0       	rjmp	.+10     	; 0x28a0 <spiTransfer+0x32>
	{
		if( !(SPCR & _BV(MSTR)) ) return 0;
    2896:	9c b5       	in	r25, 0x2c	; 44
    2898:	89 2f       	mov	r24, r25
    289a:	80 71       	andi	r24, 0x10	; 16
    289c:	94 ff       	sbrs	r25, 4
    289e:	04 c0       	rjmp	.+8      	; 0x28a8 <spiTransfer+0x3a>
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
	__asm__ __volatile__("nop");

	while( !(SPSR & _BV(SPIF)) )
    28a0:	0d b4       	in	r0, 0x2d	; 45
    28a2:	07 fe       	sbrs	r0, 7
    28a4:	f8 cf       	rjmp	.-16     	; 0x2896 <spiTransfer+0x28>
		if( !(SPCR & _BV(MSTR)) ) return 0;
			// The SPI module has left master mode, so return.
			// Otherwise, this will be an infinite loop.
	}

	return SPDR;
    28a6:	8e b5       	in	r24, 0x2e	; 46

	// Make sure you pull slave select high to indicate end of transfer.
	// That is NOT done by this function.
	// Using spiDeselect (SS_pin);
}
    28a8:	08 95       	ret

000028aa <prvResetNextTaskUnblockTime>:
    28aa:	e0 91 44 07 	lds	r30, 0x0744	; 0x800744 <pxDelayedTaskList>
    28ae:	f0 91 45 07 	lds	r31, 0x0745	; 0x800745 <pxDelayedTaskList+0x1>
    28b2:	80 81       	ld	r24, Z
    28b4:	81 11       	cpse	r24, r1
    28b6:	0c c0       	rjmp	.+24     	; 0x28d0 <prvResetNextTaskUnblockTime+0x26>
    28b8:	8f ef       	ldi	r24, 0xFF	; 255
    28ba:	9f ef       	ldi	r25, 0xFF	; 255
    28bc:	dc 01       	movw	r26, r24
    28be:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <xNextTaskUnblockTime>
    28c2:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <xNextTaskUnblockTime+0x1>
    28c6:	a0 93 13 07 	sts	0x0713, r26	; 0x800713 <xNextTaskUnblockTime+0x2>
    28ca:	b0 93 14 07 	sts	0x0714, r27	; 0x800714 <xNextTaskUnblockTime+0x3>
    28ce:	08 95       	ret
    28d0:	e0 91 44 07 	lds	r30, 0x0744	; 0x800744 <pxDelayedTaskList>
    28d4:	f0 91 45 07 	lds	r31, 0x0745	; 0x800745 <pxDelayedTaskList+0x1>
    28d8:	07 80       	ldd	r0, Z+7	; 0x07
    28da:	f0 85       	ldd	r31, Z+8	; 0x08
    28dc:	e0 2d       	mov	r30, r0
    28de:	00 84       	ldd	r0, Z+8	; 0x08
    28e0:	f1 85       	ldd	r31, Z+9	; 0x09
    28e2:	e0 2d       	mov	r30, r0
    28e4:	82 81       	ldd	r24, Z+2	; 0x02
    28e6:	93 81       	ldd	r25, Z+3	; 0x03
    28e8:	a4 81       	ldd	r26, Z+4	; 0x04
    28ea:	b5 81       	ldd	r27, Z+5	; 0x05
    28ec:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <xNextTaskUnblockTime>
    28f0:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <xNextTaskUnblockTime+0x1>
    28f4:	a0 93 13 07 	sts	0x0713, r26	; 0x800713 <xNextTaskUnblockTime+0x2>
    28f8:	b0 93 14 07 	sts	0x0714, r27	; 0x800714 <xNextTaskUnblockTime+0x3>
    28fc:	08 95       	ret

000028fe <prvAddCurrentTaskToDelayedList>:
    28fe:	8f 92       	push	r8
    2900:	9f 92       	push	r9
    2902:	af 92       	push	r10
    2904:	bf 92       	push	r11
    2906:	cf 92       	push	r12
    2908:	df 92       	push	r13
    290a:	ef 92       	push	r14
    290c:	ff 92       	push	r15
    290e:	cf 93       	push	r28
    2910:	6b 01       	movw	r12, r22
    2912:	7c 01       	movw	r14, r24
    2914:	c4 2f       	mov	r28, r20
    2916:	80 90 1b 07 	lds	r8, 0x071B	; 0x80071b <xTickCount>
    291a:	90 90 1c 07 	lds	r9, 0x071C	; 0x80071c <xTickCount+0x1>
    291e:	a0 90 1d 07 	lds	r10, 0x071D	; 0x80071d <xTickCount+0x2>
    2922:	b0 90 1e 07 	lds	r11, 0x071E	; 0x80071e <xTickCount+0x3>
    2926:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <pxCurrentTCB>
    292a:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    292e:	02 96       	adiw	r24, 0x02	; 2
    2930:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2934:	8f ef       	ldi	r24, 0xFF	; 255
    2936:	c8 16       	cp	r12, r24
    2938:	d8 06       	cpc	r13, r24
    293a:	e8 06       	cpc	r14, r24
    293c:	f8 06       	cpc	r15, r24
    293e:	69 f4       	brne	.+26     	; 0x295a <prvAddCurrentTaskToDelayedList+0x5c>
    2940:	cc 23       	and	r28, r28
    2942:	59 f0       	breq	.+22     	; 0x295a <prvAddCurrentTaskToDelayedList+0x5c>
    2944:	60 91 88 07 	lds	r22, 0x0788	; 0x800788 <pxCurrentTCB>
    2948:	70 91 89 07 	lds	r23, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    294c:	6e 5f       	subi	r22, 0xFE	; 254
    294e:	7f 4f       	sbci	r23, 0xFF	; 255
    2950:	80 e2       	ldi	r24, 0x20	; 32
    2952:	97 e0       	ldi	r25, 0x07	; 7
    2954:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2958:	3f c0       	rjmp	.+126    	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    295a:	c8 0c       	add	r12, r8
    295c:	d9 1c       	adc	r13, r9
    295e:	ea 1c       	adc	r14, r10
    2960:	fb 1c       	adc	r15, r11
    2962:	e0 91 88 07 	lds	r30, 0x0788	; 0x800788 <pxCurrentTCB>
    2966:	f0 91 89 07 	lds	r31, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    296a:	c2 82       	std	Z+2, r12	; 0x02
    296c:	d3 82       	std	Z+3, r13	; 0x03
    296e:	e4 82       	std	Z+4, r14	; 0x04
    2970:	f5 82       	std	Z+5, r15	; 0x05
    2972:	c8 14       	cp	r12, r8
    2974:	d9 04       	cpc	r13, r9
    2976:	ea 04       	cpc	r14, r10
    2978:	fb 04       	cpc	r15, r11
    297a:	68 f4       	brcc	.+26     	; 0x2996 <prvAddCurrentTaskToDelayedList+0x98>
    297c:	60 91 88 07 	lds	r22, 0x0788	; 0x800788 <pxCurrentTCB>
    2980:	70 91 89 07 	lds	r23, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    2984:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <pxOverflowDelayedTaskList>
    2988:	90 91 43 07 	lds	r25, 0x0743	; 0x800743 <pxOverflowDelayedTaskList+0x1>
    298c:	6e 5f       	subi	r22, 0xFE	; 254
    298e:	7f 4f       	sbci	r23, 0xFF	; 255
    2990:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    2994:	21 c0       	rjmp	.+66     	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    2996:	60 91 88 07 	lds	r22, 0x0788	; 0x800788 <pxCurrentTCB>
    299a:	70 91 89 07 	lds	r23, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    299e:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <pxDelayedTaskList>
    29a2:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <pxDelayedTaskList+0x1>
    29a6:	6e 5f       	subi	r22, 0xFE	; 254
    29a8:	7f 4f       	sbci	r23, 0xFF	; 255
    29aa:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    29ae:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <xNextTaskUnblockTime>
    29b2:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <xNextTaskUnblockTime+0x1>
    29b6:	a0 91 13 07 	lds	r26, 0x0713	; 0x800713 <xNextTaskUnblockTime+0x2>
    29ba:	b0 91 14 07 	lds	r27, 0x0714	; 0x800714 <xNextTaskUnblockTime+0x3>
    29be:	c8 16       	cp	r12, r24
    29c0:	d9 06       	cpc	r13, r25
    29c2:	ea 06       	cpc	r14, r26
    29c4:	fb 06       	cpc	r15, r27
    29c6:	40 f4       	brcc	.+16     	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    29c8:	c0 92 11 07 	sts	0x0711, r12	; 0x800711 <xNextTaskUnblockTime>
    29cc:	d0 92 12 07 	sts	0x0712, r13	; 0x800712 <xNextTaskUnblockTime+0x1>
    29d0:	e0 92 13 07 	sts	0x0713, r14	; 0x800713 <xNextTaskUnblockTime+0x2>
    29d4:	f0 92 14 07 	sts	0x0714, r15	; 0x800714 <xNextTaskUnblockTime+0x3>
    29d8:	cf 91       	pop	r28
    29da:	ff 90       	pop	r15
    29dc:	ef 90       	pop	r14
    29de:	df 90       	pop	r13
    29e0:	cf 90       	pop	r12
    29e2:	bf 90       	pop	r11
    29e4:	af 90       	pop	r10
    29e6:	9f 90       	pop	r9
    29e8:	8f 90       	pop	r8
    29ea:	08 95       	ret

000029ec <xTaskCreate>:
    29ec:	4f 92       	push	r4
    29ee:	5f 92       	push	r5
    29f0:	6f 92       	push	r6
    29f2:	7f 92       	push	r7
    29f4:	8f 92       	push	r8
    29f6:	9f 92       	push	r9
    29f8:	af 92       	push	r10
    29fa:	bf 92       	push	r11
    29fc:	cf 92       	push	r12
    29fe:	df 92       	push	r13
    2a00:	ef 92       	push	r14
    2a02:	ff 92       	push	r15
    2a04:	0f 93       	push	r16
    2a06:	cf 93       	push	r28
    2a08:	df 93       	push	r29
    2a0a:	4c 01       	movw	r8, r24
    2a0c:	6b 01       	movw	r12, r22
    2a0e:	5a 01       	movw	r10, r20
    2a10:	29 01       	movw	r4, r18
    2a12:	ca 01       	movw	r24, r20
    2a14:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    2a18:	3c 01       	movw	r6, r24
    2a1a:	89 2b       	or	r24, r25
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <xTaskCreate+0x34>
    2a1e:	ec c0       	rjmp	.+472    	; 0x2bf8 <xTaskCreate+0x20c>
    2a20:	83 e3       	ldi	r24, 0x33	; 51
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    2a28:	ec 01       	movw	r28, r24
    2a2a:	89 2b       	or	r24, r25
    2a2c:	b1 f0       	breq	.+44     	; 0x2a5a <xTaskCreate+0x6e>
    2a2e:	7c 8e       	std	Y+28, r7	; 0x1c
    2a30:	6b 8e       	std	Y+27, r6	; 0x1b
    2a32:	a5 01       	movw	r20, r10
    2a34:	65 ea       	ldi	r22, 0xA5	; 165
    2a36:	70 e0       	ldi	r23, 0x00	; 0
    2a38:	c3 01       	movw	r24, r6
    2a3a:	0e 94 68 5a 	call	0xb4d0	; 0xb4d0 <memset>
    2a3e:	21 e0       	ldi	r18, 0x01	; 1
    2a40:	a2 1a       	sub	r10, r18
    2a42:	b1 08       	sbc	r11, r1
    2a44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a48:	a8 0e       	add	r10, r24
    2a4a:	b9 1e       	adc	r11, r25
    2a4c:	d6 01       	movw	r26, r12
    2a4e:	8c 91       	ld	r24, X
    2a50:	8d 8f       	std	Y+29, r24	; 0x1d
    2a52:	8c 91       	ld	r24, X
    2a54:	81 11       	cpse	r24, r1
    2a56:	05 c0       	rjmp	.+10     	; 0x2a62 <xTaskCreate+0x76>
    2a58:	18 c0       	rjmp	.+48     	; 0x2a8a <xTaskCreate+0x9e>
    2a5a:	c3 01       	movw	r24, r6
    2a5c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vPortFree>
    2a60:	cb c0       	rjmp	.+406    	; 0x2bf8 <xTaskCreate+0x20c>
    2a62:	ae 01       	movw	r20, r28
    2a64:	42 5e       	subi	r20, 0xE2	; 226
    2a66:	5f 4f       	sbci	r21, 0xFF	; 255
    2a68:	f6 01       	movw	r30, r12
    2a6a:	31 96       	adiw	r30, 0x01	; 1
    2a6c:	bf e0       	ldi	r27, 0x0F	; 15
    2a6e:	cb 0e       	add	r12, r27
    2a70:	d1 1c       	adc	r13, r1
    2a72:	cf 01       	movw	r24, r30
    2a74:	21 91       	ld	r18, Z+
    2a76:	da 01       	movw	r26, r20
    2a78:	2d 93       	st	X+, r18
    2a7a:	ad 01       	movw	r20, r26
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	8c 91       	ld	r24, X
    2a80:	88 23       	and	r24, r24
    2a82:	19 f0       	breq	.+6      	; 0x2a8a <xTaskCreate+0x9e>
    2a84:	ec 15       	cp	r30, r12
    2a86:	fd 05       	cpc	r31, r13
    2a88:	a1 f7       	brne	.-24     	; 0x2a72 <xTaskCreate+0x86>
    2a8a:	1b a6       	std	Y+43, r1	; 0x2b
    2a8c:	04 30       	cpi	r16, 0x04	; 4
    2a8e:	08 f0       	brcs	.+2      	; 0x2a92 <xTaskCreate+0xa6>
    2a90:	03 e0       	ldi	r16, 0x03	; 3
    2a92:	0a 8f       	std	Y+26, r16	; 0x1a
    2a94:	0c a7       	std	Y+44, r16	; 0x2c
    2a96:	1d a6       	std	Y+45, r1	; 0x2d
    2a98:	6e 01       	movw	r12, r28
    2a9a:	b2 e0       	ldi	r27, 0x02	; 2
    2a9c:	cb 0e       	add	r12, r27
    2a9e:	d1 1c       	adc	r13, r1
    2aa0:	c6 01       	movw	r24, r12
    2aa2:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    2aa6:	ce 01       	movw	r24, r28
    2aa8:	0e 96       	adiw	r24, 0x0e	; 14
    2aaa:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    2aae:	db 87       	std	Y+11, r29	; 0x0b
    2ab0:	ca 87       	std	Y+10, r28	; 0x0a
    2ab2:	84 e0       	ldi	r24, 0x04	; 4
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	a0 e0       	ldi	r26, 0x00	; 0
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	80 1b       	sub	r24, r16
    2abc:	91 09       	sbc	r25, r1
    2abe:	a1 09       	sbc	r26, r1
    2ac0:	b1 09       	sbc	r27, r1
    2ac2:	8e 87       	std	Y+14, r24	; 0x0e
    2ac4:	9f 87       	std	Y+15, r25	; 0x0f
    2ac6:	a8 8b       	std	Y+16, r26	; 0x10
    2ac8:	b9 8b       	std	Y+17, r27	; 0x11
    2aca:	df 8b       	std	Y+23, r29	; 0x17
    2acc:	ce 8b       	std	Y+22, r28	; 0x16
    2ace:	1e a6       	std	Y+46, r1	; 0x2e
    2ad0:	1f a6       	std	Y+47, r1	; 0x2f
    2ad2:	18 aa       	std	Y+48, r1	; 0x30
    2ad4:	19 aa       	std	Y+49, r1	; 0x31
    2ad6:	1a aa       	std	Y+50, r1	; 0x32
    2ad8:	a2 01       	movw	r20, r4
    2ada:	b4 01       	movw	r22, r8
    2adc:	c5 01       	movw	r24, r10
    2ade:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pxPortInitialiseStack>
    2ae2:	99 83       	std	Y+1, r25	; 0x01
    2ae4:	88 83       	st	Y, r24
    2ae6:	e1 14       	cp	r14, r1
    2ae8:	f1 04       	cpc	r15, r1
    2aea:	19 f0       	breq	.+6      	; 0x2af2 <xTaskCreate+0x106>
    2aec:	f7 01       	movw	r30, r14
    2aee:	d1 83       	std	Z+1, r29	; 0x01
    2af0:	c0 83       	st	Z, r28
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	0f 92       	push	r0
    2af8:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <uxCurrentNumberOfTasks>
    2afc:	8f 5f       	subi	r24, 0xFF	; 255
    2afe:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <uxCurrentNumberOfTasks>
    2b02:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <pxCurrentTCB>
    2b06:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    2b0a:	89 2b       	or	r24, r25
    2b0c:	d1 f5       	brne	.+116    	; 0x2b82 <xTaskCreate+0x196>
    2b0e:	d0 93 89 07 	sts	0x0789, r29	; 0x800789 <pxCurrentTCB+0x1>
    2b12:	c0 93 88 07 	sts	0x0788, r28	; 0x800788 <pxCurrentTCB>
    2b16:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <uxCurrentNumberOfTasks>
    2b1a:	81 30       	cpi	r24, 0x01	; 1
    2b1c:	09 f0       	breq	.+2      	; 0x2b20 <xTaskCreate+0x134>
    2b1e:	41 c0       	rjmp	.+130    	; 0x2ba2 <xTaskCreate+0x1b6>
    2b20:	8c e5       	ldi	r24, 0x5C	; 92
    2b22:	97 e0       	ldi	r25, 0x07	; 7
    2b24:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b28:	87 e6       	ldi	r24, 0x67	; 103
    2b2a:	97 e0       	ldi	r25, 0x07	; 7
    2b2c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b30:	82 e7       	ldi	r24, 0x72	; 114
    2b32:	97 e0       	ldi	r25, 0x07	; 7
    2b34:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b38:	8d e7       	ldi	r24, 0x7D	; 125
    2b3a:	97 e0       	ldi	r25, 0x07	; 7
    2b3c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b40:	81 e5       	ldi	r24, 0x51	; 81
    2b42:	97 e0       	ldi	r25, 0x07	; 7
    2b44:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b48:	86 e4       	ldi	r24, 0x46	; 70
    2b4a:	97 e0       	ldi	r25, 0x07	; 7
    2b4c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b50:	87 e3       	ldi	r24, 0x37	; 55
    2b52:	97 e0       	ldi	r25, 0x07	; 7
    2b54:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b58:	8c e2       	ldi	r24, 0x2C	; 44
    2b5a:	97 e0       	ldi	r25, 0x07	; 7
    2b5c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b60:	80 e2       	ldi	r24, 0x20	; 32
    2b62:	97 e0       	ldi	r25, 0x07	; 7
    2b64:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b68:	81 e5       	ldi	r24, 0x51	; 81
    2b6a:	97 e0       	ldi	r25, 0x07	; 7
    2b6c:	90 93 45 07 	sts	0x0745, r25	; 0x800745 <pxDelayedTaskList+0x1>
    2b70:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <pxDelayedTaskList>
    2b74:	86 e4       	ldi	r24, 0x46	; 70
    2b76:	97 e0       	ldi	r25, 0x07	; 7
    2b78:	90 93 43 07 	sts	0x0743, r25	; 0x800743 <pxOverflowDelayedTaskList+0x1>
    2b7c:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <pxOverflowDelayedTaskList>
    2b80:	10 c0       	rjmp	.+32     	; 0x2ba2 <xTaskCreate+0x1b6>
    2b82:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <xSchedulerRunning>
    2b86:	81 11       	cpse	r24, r1
    2b88:	0c c0       	rjmp	.+24     	; 0x2ba2 <xTaskCreate+0x1b6>
    2b8a:	e0 91 88 07 	lds	r30, 0x0788	; 0x800788 <pxCurrentTCB>
    2b8e:	f0 91 89 07 	lds	r31, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    2b92:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b94:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b96:	89 17       	cp	r24, r25
    2b98:	20 f0       	brcs	.+8      	; 0x2ba2 <xTaskCreate+0x1b6>
    2b9a:	d0 93 89 07 	sts	0x0789, r29	; 0x800789 <pxCurrentTCB+0x1>
    2b9e:	c0 93 88 07 	sts	0x0788, r28	; 0x800788 <pxCurrentTCB>
    2ba2:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <uxTaskNumber>
    2ba6:	8f 5f       	subi	r24, 0xFF	; 255
    2ba8:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <uxTaskNumber>
    2bac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bae:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <uxTopReadyPriority>
    2bb2:	98 17       	cp	r25, r24
    2bb4:	10 f4       	brcc	.+4      	; 0x2bba <xTaskCreate+0x1ce>
    2bb6:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <uxTopReadyPriority>
    2bba:	fb e0       	ldi	r31, 0x0B	; 11
    2bbc:	8f 9f       	mul	r24, r31
    2bbe:	c0 01       	movw	r24, r0
    2bc0:	11 24       	eor	r1, r1
    2bc2:	b6 01       	movw	r22, r12
    2bc4:	84 5a       	subi	r24, 0xA4	; 164
    2bc6:	98 4f       	sbci	r25, 0xF8	; 248
    2bc8:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2bcc:	0f 90       	pop	r0
    2bce:	0f be       	out	0x3f, r0	; 63
    2bd0:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <xSchedulerRunning>
    2bd4:	88 23       	and	r24, r24
    2bd6:	61 f0       	breq	.+24     	; 0x2bf0 <xTaskCreate+0x204>
    2bd8:	e0 91 88 07 	lds	r30, 0x0788	; 0x800788 <pxCurrentTCB>
    2bdc:	f0 91 89 07 	lds	r31, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    2be0:	92 8d       	ldd	r25, Z+26	; 0x1a
    2be2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2be4:	98 17       	cp	r25, r24
    2be6:	30 f4       	brcc	.+12     	; 0x2bf4 <xTaskCreate+0x208>
    2be8:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	05 c0       	rjmp	.+10     	; 0x2bfa <xTaskCreate+0x20e>
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	03 c0       	rjmp	.+6      	; 0x2bfa <xTaskCreate+0x20e>
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	01 c0       	rjmp	.+2      	; 0x2bfa <xTaskCreate+0x20e>
    2bf8:	8f ef       	ldi	r24, 0xFF	; 255
    2bfa:	df 91       	pop	r29
    2bfc:	cf 91       	pop	r28
    2bfe:	0f 91       	pop	r16
    2c00:	ff 90       	pop	r15
    2c02:	ef 90       	pop	r14
    2c04:	df 90       	pop	r13
    2c06:	cf 90       	pop	r12
    2c08:	bf 90       	pop	r11
    2c0a:	af 90       	pop	r10
    2c0c:	9f 90       	pop	r9
    2c0e:	8f 90       	pop	r8
    2c10:	7f 90       	pop	r7
    2c12:	6f 90       	pop	r6
    2c14:	5f 90       	pop	r5
    2c16:	4f 90       	pop	r4
    2c18:	08 95       	ret

00002c1a <vTaskResume>:
    2c1a:	0f 93       	push	r16
    2c1c:	1f 93       	push	r17
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
    2c22:	00 97       	sbiw	r24, 0x00	; 0
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <vTaskResume+0xe>
    2c26:	3d c0       	rjmp	.+122    	; 0x2ca2 <vTaskResume+0x88>
    2c28:	20 91 88 07 	lds	r18, 0x0788	; 0x800788 <pxCurrentTCB>
    2c2c:	30 91 89 07 	lds	r19, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    2c30:	82 17       	cp	r24, r18
    2c32:	93 07       	cpc	r25, r19
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <vTaskResume+0x1e>
    2c36:	35 c0       	rjmp	.+106    	; 0x2ca2 <vTaskResume+0x88>
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	0f 92       	push	r0
    2c3e:	fc 01       	movw	r30, r24
    2c40:	24 85       	ldd	r18, Z+12	; 0x0c
    2c42:	35 85       	ldd	r19, Z+13	; 0x0d
    2c44:	20 52       	subi	r18, 0x20	; 32
    2c46:	37 40       	sbci	r19, 0x07	; 7
    2c48:	51 f5       	brne	.+84     	; 0x2c9e <vTaskResume+0x84>
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	20 8d       	ldd	r18, Z+24	; 0x18
    2c4e:	31 8d       	ldd	r19, Z+25	; 0x19
    2c50:	f7 e0       	ldi	r31, 0x07	; 7
    2c52:	27 33       	cpi	r18, 0x37	; 55
    2c54:	3f 07       	cpc	r19, r31
    2c56:	19 f1       	breq	.+70     	; 0x2c9e <vTaskResume+0x84>
    2c58:	23 2b       	or	r18, r19
    2c5a:	09 f5       	brne	.+66     	; 0x2c9e <vTaskResume+0x84>
    2c5c:	ec 01       	movw	r28, r24
    2c5e:	8c 01       	movw	r16, r24
    2c60:	0e 5f       	subi	r16, 0xFE	; 254
    2c62:	1f 4f       	sbci	r17, 0xFF	; 255
    2c64:	c8 01       	movw	r24, r16
    2c66:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2c6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c6c:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <uxTopReadyPriority>
    2c70:	98 17       	cp	r25, r24
    2c72:	10 f4       	brcc	.+4      	; 0x2c78 <vTaskResume+0x5e>
    2c74:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <uxTopReadyPriority>
    2c78:	2b e0       	ldi	r18, 0x0B	; 11
    2c7a:	82 9f       	mul	r24, r18
    2c7c:	c0 01       	movw	r24, r0
    2c7e:	11 24       	eor	r1, r1
    2c80:	b8 01       	movw	r22, r16
    2c82:	84 5a       	subi	r24, 0xA4	; 164
    2c84:	98 4f       	sbci	r25, 0xF8	; 248
    2c86:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2c8a:	e0 91 88 07 	lds	r30, 0x0788	; 0x800788 <pxCurrentTCB>
    2c8e:	f0 91 89 07 	lds	r31, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    2c92:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c94:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c96:	98 17       	cp	r25, r24
    2c98:	10 f0       	brcs	.+4      	; 0x2c9e <vTaskResume+0x84>
    2c9a:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2c9e:	0f 90       	pop	r0
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	df 91       	pop	r29
    2ca4:	cf 91       	pop	r28
    2ca6:	1f 91       	pop	r17
    2ca8:	0f 91       	pop	r16
    2caa:	08 95       	ret

00002cac <vTaskStartScheduler>:
    2cac:	ef 92       	push	r14
    2cae:	ff 92       	push	r15
    2cb0:	0f 93       	push	r16
    2cb2:	0f 2e       	mov	r0, r31
    2cb4:	ff e0       	ldi	r31, 0x0F	; 15
    2cb6:	ef 2e       	mov	r14, r31
    2cb8:	f7 e0       	ldi	r31, 0x07	; 7
    2cba:	ff 2e       	mov	r15, r31
    2cbc:	f0 2d       	mov	r31, r0
    2cbe:	00 e0       	ldi	r16, 0x00	; 0
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	40 e8       	ldi	r20, 0x80	; 128
    2cc6:	50 e0       	ldi	r21, 0x00	; 0
    2cc8:	66 e1       	ldi	r22, 0x16	; 22
    2cca:	72 e0       	ldi	r23, 0x02	; 2
    2ccc:	88 e3       	ldi	r24, 0x38	; 56
    2cce:	95 e0       	ldi	r25, 0x05	; 5
    2cd0:	8d de       	rcall	.-742    	; 0x29ec <xTaskCreate>
    2cd2:	81 30       	cpi	r24, 0x01	; 1
    2cd4:	e1 f4       	brne	.+56     	; 0x2d0e <vTaskStartScheduler+0x62>
    2cd6:	ce d4       	rcall	.+2460   	; 0x3674 <xTimerCreateTimerTask>
    2cd8:	81 30       	cpi	r24, 0x01	; 1
    2cda:	c9 f4       	brne	.+50     	; 0x2d0e <vTaskStartScheduler+0x62>
    2cdc:	f8 94       	cli
    2cde:	8f ef       	ldi	r24, 0xFF	; 255
    2ce0:	9f ef       	ldi	r25, 0xFF	; 255
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <xNextTaskUnblockTime>
    2ce8:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <xNextTaskUnblockTime+0x1>
    2cec:	a0 93 13 07 	sts	0x0713, r26	; 0x800713 <xNextTaskUnblockTime+0x2>
    2cf0:	b0 93 14 07 	sts	0x0714, r27	; 0x800714 <xNextTaskUnblockTime+0x3>
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <xSchedulerRunning>
    2cfa:	10 92 1b 07 	sts	0x071B, r1	; 0x80071b <xTickCount>
    2cfe:	10 92 1c 07 	sts	0x071C, r1	; 0x80071c <xTickCount+0x1>
    2d02:	10 92 1d 07 	sts	0x071D, r1	; 0x80071d <xTickCount+0x2>
    2d06:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <xTickCount+0x3>
    2d0a:	0e 94 56 06 	call	0xcac	; 0xcac <xPortStartScheduler>
    2d0e:	0f 91       	pop	r16
    2d10:	ff 90       	pop	r15
    2d12:	ef 90       	pop	r14
    2d14:	08 95       	ret

00002d16 <vTaskSuspendAll>:
    2d16:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxSchedulerSuspended>
    2d1a:	8f 5f       	subi	r24, 0xFF	; 255
    2d1c:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <uxSchedulerSuspended>
    2d20:	08 95       	ret

00002d22 <xTaskGetTickCount>:
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	0f 92       	push	r0
    2d28:	60 91 1b 07 	lds	r22, 0x071B	; 0x80071b <xTickCount>
    2d2c:	70 91 1c 07 	lds	r23, 0x071C	; 0x80071c <xTickCount+0x1>
    2d30:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <xTickCount+0x2>
    2d34:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <xTickCount+0x3>
    2d38:	0f 90       	pop	r0
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	08 95       	ret

00002d3e <xTaskIncrementTick>:
    2d3e:	9f 92       	push	r9
    2d40:	af 92       	push	r10
    2d42:	bf 92       	push	r11
    2d44:	cf 92       	push	r12
    2d46:	df 92       	push	r13
    2d48:	ef 92       	push	r14
    2d4a:	ff 92       	push	r15
    2d4c:	0f 93       	push	r16
    2d4e:	1f 93       	push	r17
    2d50:	cf 93       	push	r28
    2d52:	df 93       	push	r29
    2d54:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxSchedulerSuspended>
    2d58:	81 11       	cpse	r24, r1
    2d5a:	ad c0       	rjmp	.+346    	; 0x2eb6 <xTaskIncrementTick+0x178>
    2d5c:	c0 90 1b 07 	lds	r12, 0x071B	; 0x80071b <xTickCount>
    2d60:	d0 90 1c 07 	lds	r13, 0x071C	; 0x80071c <xTickCount+0x1>
    2d64:	e0 90 1d 07 	lds	r14, 0x071D	; 0x80071d <xTickCount+0x2>
    2d68:	f0 90 1e 07 	lds	r15, 0x071E	; 0x80071e <xTickCount+0x3>
    2d6c:	8f ef       	ldi	r24, 0xFF	; 255
    2d6e:	c8 1a       	sub	r12, r24
    2d70:	d8 0a       	sbc	r13, r24
    2d72:	e8 0a       	sbc	r14, r24
    2d74:	f8 0a       	sbc	r15, r24
    2d76:	c0 92 1b 07 	sts	0x071B, r12	; 0x80071b <xTickCount>
    2d7a:	d0 92 1c 07 	sts	0x071C, r13	; 0x80071c <xTickCount+0x1>
    2d7e:	e0 92 1d 07 	sts	0x071D, r14	; 0x80071d <xTickCount+0x2>
    2d82:	f0 92 1e 07 	sts	0x071E, r15	; 0x80071e <xTickCount+0x3>
    2d86:	c1 14       	cp	r12, r1
    2d88:	d1 04       	cpc	r13, r1
    2d8a:	e1 04       	cpc	r14, r1
    2d8c:	f1 04       	cpc	r15, r1
    2d8e:	b1 f4       	brne	.+44     	; 0x2dbc <xTaskIncrementTick+0x7e>
    2d90:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <pxDelayedTaskList>
    2d94:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <pxDelayedTaskList+0x1>
    2d98:	20 91 42 07 	lds	r18, 0x0742	; 0x800742 <pxOverflowDelayedTaskList>
    2d9c:	30 91 43 07 	lds	r19, 0x0743	; 0x800743 <pxOverflowDelayedTaskList+0x1>
    2da0:	30 93 45 07 	sts	0x0745, r19	; 0x800745 <pxDelayedTaskList+0x1>
    2da4:	20 93 44 07 	sts	0x0744, r18	; 0x800744 <pxDelayedTaskList>
    2da8:	90 93 43 07 	sts	0x0743, r25	; 0x800743 <pxOverflowDelayedTaskList+0x1>
    2dac:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <pxOverflowDelayedTaskList>
    2db0:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <xNumOfOverflows>
    2db4:	8f 5f       	subi	r24, 0xFF	; 255
    2db6:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <xNumOfOverflows>
    2dba:	77 dd       	rcall	.-1298   	; 0x28aa <prvResetNextTaskUnblockTime>
    2dbc:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <xNextTaskUnblockTime>
    2dc0:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <xNextTaskUnblockTime+0x1>
    2dc4:	a0 91 13 07 	lds	r26, 0x0713	; 0x800713 <xNextTaskUnblockTime+0x2>
    2dc8:	b0 91 14 07 	lds	r27, 0x0714	; 0x800714 <xNextTaskUnblockTime+0x3>
    2dcc:	c8 16       	cp	r12, r24
    2dce:	d9 06       	cpc	r13, r25
    2dd0:	ea 06       	cpc	r14, r26
    2dd2:	fb 06       	cpc	r15, r27
    2dd4:	10 f4       	brcc	.+4      	; 0x2dda <xTaskIncrementTick+0x9c>
    2dd6:	b1 2c       	mov	r11, r1
    2dd8:	5d c0       	rjmp	.+186    	; 0x2e94 <xTaskIncrementTick+0x156>
    2dda:	b1 2c       	mov	r11, r1
    2ddc:	0f 2e       	mov	r0, r31
    2dde:	fb e0       	ldi	r31, 0x0B	; 11
    2de0:	af 2e       	mov	r10, r31
    2de2:	f0 2d       	mov	r31, r0
    2de4:	99 24       	eor	r9, r9
    2de6:	93 94       	inc	r9
    2de8:	e0 91 44 07 	lds	r30, 0x0744	; 0x800744 <pxDelayedTaskList>
    2dec:	f0 91 45 07 	lds	r31, 0x0745	; 0x800745 <pxDelayedTaskList+0x1>
    2df0:	80 81       	ld	r24, Z
    2df2:	81 11       	cpse	r24, r1
    2df4:	0c c0       	rjmp	.+24     	; 0x2e0e <xTaskIncrementTick+0xd0>
    2df6:	8f ef       	ldi	r24, 0xFF	; 255
    2df8:	9f ef       	ldi	r25, 0xFF	; 255
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <xNextTaskUnblockTime>
    2e00:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <xNextTaskUnblockTime+0x1>
    2e04:	a0 93 13 07 	sts	0x0713, r26	; 0x800713 <xNextTaskUnblockTime+0x2>
    2e08:	b0 93 14 07 	sts	0x0714, r27	; 0x800714 <xNextTaskUnblockTime+0x3>
    2e0c:	43 c0       	rjmp	.+134    	; 0x2e94 <xTaskIncrementTick+0x156>
    2e0e:	e0 91 44 07 	lds	r30, 0x0744	; 0x800744 <pxDelayedTaskList>
    2e12:	f0 91 45 07 	lds	r31, 0x0745	; 0x800745 <pxDelayedTaskList+0x1>
    2e16:	07 80       	ldd	r0, Z+7	; 0x07
    2e18:	f0 85       	ldd	r31, Z+8	; 0x08
    2e1a:	e0 2d       	mov	r30, r0
    2e1c:	c0 85       	ldd	r28, Z+8	; 0x08
    2e1e:	d1 85       	ldd	r29, Z+9	; 0x09
    2e20:	8a 81       	ldd	r24, Y+2	; 0x02
    2e22:	9b 81       	ldd	r25, Y+3	; 0x03
    2e24:	ac 81       	ldd	r26, Y+4	; 0x04
    2e26:	bd 81       	ldd	r27, Y+5	; 0x05
    2e28:	c8 16       	cp	r12, r24
    2e2a:	d9 06       	cpc	r13, r25
    2e2c:	ea 06       	cpc	r14, r26
    2e2e:	fb 06       	cpc	r15, r27
    2e30:	48 f4       	brcc	.+18     	; 0x2e44 <xTaskIncrementTick+0x106>
    2e32:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <xNextTaskUnblockTime>
    2e36:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <xNextTaskUnblockTime+0x1>
    2e3a:	a0 93 13 07 	sts	0x0713, r26	; 0x800713 <xNextTaskUnblockTime+0x2>
    2e3e:	b0 93 14 07 	sts	0x0714, r27	; 0x800714 <xNextTaskUnblockTime+0x3>
    2e42:	28 c0       	rjmp	.+80     	; 0x2e94 <xTaskIncrementTick+0x156>
    2e44:	8e 01       	movw	r16, r28
    2e46:	0e 5f       	subi	r16, 0xFE	; 254
    2e48:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4a:	c8 01       	movw	r24, r16
    2e4c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2e50:	88 8d       	ldd	r24, Y+24	; 0x18
    2e52:	99 8d       	ldd	r25, Y+25	; 0x19
    2e54:	89 2b       	or	r24, r25
    2e56:	21 f0       	breq	.+8      	; 0x2e60 <xTaskIncrementTick+0x122>
    2e58:	ce 01       	movw	r24, r28
    2e5a:	0e 96       	adiw	r24, 0x0e	; 14
    2e5c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2e60:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e62:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <uxTopReadyPriority>
    2e66:	98 17       	cp	r25, r24
    2e68:	10 f4       	brcc	.+4      	; 0x2e6e <xTaskIncrementTick+0x130>
    2e6a:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <uxTopReadyPriority>
    2e6e:	a8 9e       	mul	r10, r24
    2e70:	c0 01       	movw	r24, r0
    2e72:	11 24       	eor	r1, r1
    2e74:	b8 01       	movw	r22, r16
    2e76:	84 5a       	subi	r24, 0xA4	; 164
    2e78:	98 4f       	sbci	r25, 0xF8	; 248
    2e7a:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2e7e:	e0 91 88 07 	lds	r30, 0x0788	; 0x800788 <pxCurrentTCB>
    2e82:	f0 91 89 07 	lds	r31, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    2e86:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e88:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e8a:	98 17       	cp	r25, r24
    2e8c:	08 f4       	brcc	.+2      	; 0x2e90 <xTaskIncrementTick+0x152>
    2e8e:	ac cf       	rjmp	.-168    	; 0x2de8 <xTaskIncrementTick+0xaa>
    2e90:	b9 2c       	mov	r11, r9
    2e92:	aa cf       	rjmp	.-172    	; 0x2de8 <xTaskIncrementTick+0xaa>
    2e94:	e0 91 88 07 	lds	r30, 0x0788	; 0x800788 <pxCurrentTCB>
    2e98:	f0 91 89 07 	lds	r31, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    2e9c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2e9e:	8b e0       	ldi	r24, 0x0B	; 11
    2ea0:	e8 9f       	mul	r30, r24
    2ea2:	f0 01       	movw	r30, r0
    2ea4:	11 24       	eor	r1, r1
    2ea6:	e4 5a       	subi	r30, 0xA4	; 164
    2ea8:	f8 4f       	sbci	r31, 0xF8	; 248
    2eaa:	80 81       	ld	r24, Z
    2eac:	82 30       	cpi	r24, 0x02	; 2
    2eae:	48 f0       	brcs	.+18     	; 0x2ec2 <xTaskIncrementTick+0x184>
    2eb0:	bb 24       	eor	r11, r11
    2eb2:	b3 94       	inc	r11
    2eb4:	06 c0       	rjmp	.+12     	; 0x2ec2 <xTaskIncrementTick+0x184>
    2eb6:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxPendedTicks>
    2eba:	8f 5f       	subi	r24, 0xFF	; 255
    2ebc:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <uxPendedTicks>
    2ec0:	b1 2c       	mov	r11, r1
    2ec2:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <xYieldPending>
    2ec6:	88 23       	and	r24, r24
    2ec8:	11 f0       	breq	.+4      	; 0x2ece <xTaskIncrementTick+0x190>
    2eca:	bb 24       	eor	r11, r11
    2ecc:	b3 94       	inc	r11
    2ece:	8b 2d       	mov	r24, r11
    2ed0:	df 91       	pop	r29
    2ed2:	cf 91       	pop	r28
    2ed4:	1f 91       	pop	r17
    2ed6:	0f 91       	pop	r16
    2ed8:	ff 90       	pop	r15
    2eda:	ef 90       	pop	r14
    2edc:	df 90       	pop	r13
    2ede:	cf 90       	pop	r12
    2ee0:	bf 90       	pop	r11
    2ee2:	af 90       	pop	r10
    2ee4:	9f 90       	pop	r9
    2ee6:	08 95       	ret

00002ee8 <xTaskResumeAll>:
    2ee8:	cf 92       	push	r12
    2eea:	df 92       	push	r13
    2eec:	ef 92       	push	r14
    2eee:	ff 92       	push	r15
    2ef0:	0f 93       	push	r16
    2ef2:	1f 93       	push	r17
    2ef4:	cf 93       	push	r28
    2ef6:	df 93       	push	r29
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	f8 94       	cli
    2efc:	0f 92       	push	r0
    2efe:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxSchedulerSuspended>
    2f02:	81 50       	subi	r24, 0x01	; 1
    2f04:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <uxSchedulerSuspended>
    2f08:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxSchedulerSuspended>
    2f0c:	81 11       	cpse	r24, r1
    2f0e:	5a c0       	rjmp	.+180    	; 0x2fc4 <xTaskResumeAll+0xdc>
    2f10:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <uxCurrentNumberOfTasks>
    2f14:	81 11       	cpse	r24, r1
    2f16:	2c c0       	rjmp	.+88     	; 0x2f70 <xTaskResumeAll+0x88>
    2f18:	58 c0       	rjmp	.+176    	; 0x2fca <xTaskResumeAll+0xe2>
    2f1a:	d7 01       	movw	r26, r14
    2f1c:	17 96       	adiw	r26, 0x07	; 7
    2f1e:	ed 91       	ld	r30, X+
    2f20:	fc 91       	ld	r31, X
    2f22:	18 97       	sbiw	r26, 0x08	; 8
    2f24:	c0 85       	ldd	r28, Z+8	; 0x08
    2f26:	d1 85       	ldd	r29, Z+9	; 0x09
    2f28:	ce 01       	movw	r24, r28
    2f2a:	0e 96       	adiw	r24, 0x0e	; 14
    2f2c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2f30:	8e 01       	movw	r16, r28
    2f32:	0e 5f       	subi	r16, 0xFE	; 254
    2f34:	1f 4f       	sbci	r17, 0xFF	; 255
    2f36:	c8 01       	movw	r24, r16
    2f38:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2f3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f3e:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <uxTopReadyPriority>
    2f42:	98 17       	cp	r25, r24
    2f44:	10 f4       	brcc	.+4      	; 0x2f4a <xTaskResumeAll+0x62>
    2f46:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <uxTopReadyPriority>
    2f4a:	d8 9e       	mul	r13, r24
    2f4c:	c0 01       	movw	r24, r0
    2f4e:	11 24       	eor	r1, r1
    2f50:	b8 01       	movw	r22, r16
    2f52:	84 5a       	subi	r24, 0xA4	; 164
    2f54:	98 4f       	sbci	r25, 0xF8	; 248
    2f56:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2f5a:	e0 91 88 07 	lds	r30, 0x0788	; 0x800788 <pxCurrentTCB>
    2f5e:	f0 91 89 07 	lds	r31, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    2f62:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f64:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f66:	98 17       	cp	r25, r24
    2f68:	88 f0       	brcs	.+34     	; 0x2f8c <xTaskResumeAll+0xa4>
    2f6a:	c0 92 17 07 	sts	0x0717, r12	; 0x800717 <xYieldPending>
    2f6e:	0e c0       	rjmp	.+28     	; 0x2f8c <xTaskResumeAll+0xa4>
    2f70:	c0 e0       	ldi	r28, 0x00	; 0
    2f72:	d0 e0       	ldi	r29, 0x00	; 0
    2f74:	0f 2e       	mov	r0, r31
    2f76:	f7 e3       	ldi	r31, 0x37	; 55
    2f78:	ef 2e       	mov	r14, r31
    2f7a:	f7 e0       	ldi	r31, 0x07	; 7
    2f7c:	ff 2e       	mov	r15, r31
    2f7e:	f0 2d       	mov	r31, r0
    2f80:	0f 2e       	mov	r0, r31
    2f82:	fb e0       	ldi	r31, 0x0B	; 11
    2f84:	df 2e       	mov	r13, r31
    2f86:	f0 2d       	mov	r31, r0
    2f88:	cc 24       	eor	r12, r12
    2f8a:	c3 94       	inc	r12
    2f8c:	f7 01       	movw	r30, r14
    2f8e:	80 81       	ld	r24, Z
    2f90:	81 11       	cpse	r24, r1
    2f92:	c3 cf       	rjmp	.-122    	; 0x2f1a <xTaskResumeAll+0x32>
    2f94:	cd 2b       	or	r28, r29
    2f96:	09 f0       	breq	.+2      	; 0x2f9a <xTaskResumeAll+0xb2>
    2f98:	88 dc       	rcall	.-1776   	; 0x28aa <prvResetNextTaskUnblockTime>
    2f9a:	c0 91 18 07 	lds	r28, 0x0718	; 0x800718 <uxPendedTicks>
    2f9e:	cc 23       	and	r28, r28
    2fa0:	49 f0       	breq	.+18     	; 0x2fb4 <xTaskResumeAll+0xcc>
    2fa2:	d1 e0       	ldi	r29, 0x01	; 1
    2fa4:	cc de       	rcall	.-616    	; 0x2d3e <xTaskIncrementTick>
    2fa6:	81 11       	cpse	r24, r1
    2fa8:	d0 93 17 07 	sts	0x0717, r29	; 0x800717 <xYieldPending>
    2fac:	c1 50       	subi	r28, 0x01	; 1
    2fae:	d1 f7       	brne	.-12     	; 0x2fa4 <xTaskResumeAll+0xbc>
    2fb0:	10 92 18 07 	sts	0x0718, r1	; 0x800718 <uxPendedTicks>
    2fb4:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <xYieldPending>
    2fb8:	88 23       	and	r24, r24
    2fba:	31 f0       	breq	.+12     	; 0x2fc8 <xTaskResumeAll+0xe0>
    2fbc:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	03 c0       	rjmp	.+6      	; 0x2fca <xTaskResumeAll+0xe2>
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	01 c0       	rjmp	.+2      	; 0x2fca <xTaskResumeAll+0xe2>
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	0f 90       	pop	r0
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	ff 90       	pop	r15
    2fd8:	ef 90       	pop	r14
    2fda:	df 90       	pop	r13
    2fdc:	cf 90       	pop	r12
    2fde:	08 95       	ret

00002fe0 <vTaskDelay>:
    2fe0:	cf 92       	push	r12
    2fe2:	df 92       	push	r13
    2fe4:	ef 92       	push	r14
    2fe6:	ff 92       	push	r15
    2fe8:	6b 01       	movw	r12, r22
    2fea:	7c 01       	movw	r14, r24
    2fec:	67 2b       	or	r22, r23
    2fee:	68 2b       	or	r22, r24
    2ff0:	69 2b       	or	r22, r25
    2ff2:	41 f0       	breq	.+16     	; 0x3004 <vTaskDelay+0x24>
    2ff4:	90 de       	rcall	.-736    	; 0x2d16 <vTaskSuspendAll>
    2ff6:	40 e0       	ldi	r20, 0x00	; 0
    2ff8:	c7 01       	movw	r24, r14
    2ffa:	b6 01       	movw	r22, r12
    2ffc:	80 dc       	rcall	.-1792   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    2ffe:	74 df       	rcall	.-280    	; 0x2ee8 <xTaskResumeAll>
    3000:	81 11       	cpse	r24, r1
    3002:	02 c0       	rjmp	.+4      	; 0x3008 <vTaskDelay+0x28>
    3004:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3008:	ff 90       	pop	r15
    300a:	ef 90       	pop	r14
    300c:	df 90       	pop	r13
    300e:	cf 90       	pop	r12
    3010:	08 95       	ret

00003012 <vTaskSwitchContext>:
    3012:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxSchedulerSuspended>
    3016:	88 23       	and	r24, r24
    3018:	21 f0       	breq	.+8      	; 0x3022 <vTaskSwitchContext+0x10>
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <xYieldPending>
    3020:	08 95       	ret
    3022:	10 92 17 07 	sts	0x0717, r1	; 0x800717 <xYieldPending>
    3026:	a0 91 88 07 	lds	r26, 0x0788	; 0x800788 <pxCurrentTCB>
    302a:	b0 91 89 07 	lds	r27, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    302e:	e0 91 88 07 	lds	r30, 0x0788	; 0x800788 <pxCurrentTCB>
    3032:	f0 91 89 07 	lds	r31, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    3036:	2d 91       	ld	r18, X+
    3038:	3c 91       	ld	r19, X
    303a:	83 8d       	ldd	r24, Z+27	; 0x1b
    303c:	94 8d       	ldd	r25, Z+28	; 0x1c
    303e:	82 17       	cp	r24, r18
    3040:	93 07       	cpc	r25, r19
    3042:	60 f0       	brcs	.+24     	; 0x305c <vTaskSwitchContext+0x4a>
    3044:	60 91 88 07 	lds	r22, 0x0788	; 0x800788 <pxCurrentTCB>
    3048:	70 91 89 07 	lds	r23, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    304c:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <pxCurrentTCB>
    3050:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    3054:	63 5e       	subi	r22, 0xE3	; 227
    3056:	7f 4f       	sbci	r23, 0xFF	; 255
    3058:	0e 94 fd 07 	call	0xffa	; 0xffa <vApplicationStackOverflowHook>
    305c:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <uxTopReadyPriority>
    3060:	28 2f       	mov	r18, r24
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	9b e0       	ldi	r25, 0x0B	; 11
    3066:	89 9f       	mul	r24, r25
    3068:	f0 01       	movw	r30, r0
    306a:	11 24       	eor	r1, r1
    306c:	e4 5a       	subi	r30, 0xA4	; 164
    306e:	f8 4f       	sbci	r31, 0xF8	; 248
    3070:	90 81       	ld	r25, Z
    3072:	91 11       	cpse	r25, r1
    3074:	0e c0       	rjmp	.+28     	; 0x3092 <vTaskSwitchContext+0x80>
    3076:	4b e0       	ldi	r20, 0x0B	; 11
    3078:	81 50       	subi	r24, 0x01	; 1
    307a:	28 2f       	mov	r18, r24
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	42 9f       	mul	r20, r18
    3080:	f0 01       	movw	r30, r0
    3082:	43 9f       	mul	r20, r19
    3084:	f0 0d       	add	r31, r0
    3086:	11 24       	eor	r1, r1
    3088:	e4 5a       	subi	r30, 0xA4	; 164
    308a:	f8 4f       	sbci	r31, 0xF8	; 248
    308c:	90 81       	ld	r25, Z
    308e:	99 23       	and	r25, r25
    3090:	99 f3       	breq	.-26     	; 0x3078 <vTaskSwitchContext+0x66>
    3092:	9b e0       	ldi	r25, 0x0B	; 11
    3094:	92 9f       	mul	r25, r18
    3096:	a0 01       	movw	r20, r0
    3098:	93 9f       	mul	r25, r19
    309a:	50 0d       	add	r21, r0
    309c:	11 24       	eor	r1, r1
    309e:	da 01       	movw	r26, r20
    30a0:	a4 5a       	subi	r26, 0xA4	; 164
    30a2:	b8 4f       	sbci	r27, 0xF8	; 248
    30a4:	11 96       	adiw	r26, 0x01	; 1
    30a6:	ed 91       	ld	r30, X+
    30a8:	fc 91       	ld	r31, X
    30aa:	12 97       	sbiw	r26, 0x02	; 2
    30ac:	04 80       	ldd	r0, Z+4	; 0x04
    30ae:	f5 81       	ldd	r31, Z+5	; 0x05
    30b0:	e0 2d       	mov	r30, r0
    30b2:	12 96       	adiw	r26, 0x02	; 2
    30b4:	fc 93       	st	X, r31
    30b6:	ee 93       	st	-X, r30
    30b8:	11 97       	sbiw	r26, 0x01	; 1
    30ba:	41 5a       	subi	r20, 0xA1	; 161
    30bc:	58 4f       	sbci	r21, 0xF8	; 248
    30be:	e4 17       	cp	r30, r20
    30c0:	f5 07       	cpc	r31, r21
    30c2:	29 f4       	brne	.+10     	; 0x30ce <vTaskSwitchContext+0xbc>
    30c4:	44 81       	ldd	r20, Z+4	; 0x04
    30c6:	55 81       	ldd	r21, Z+5	; 0x05
    30c8:	fd 01       	movw	r30, r26
    30ca:	52 83       	std	Z+2, r21	; 0x02
    30cc:	41 83       	std	Z+1, r20	; 0x01
    30ce:	9b e0       	ldi	r25, 0x0B	; 11
    30d0:	92 9f       	mul	r25, r18
    30d2:	f0 01       	movw	r30, r0
    30d4:	93 9f       	mul	r25, r19
    30d6:	f0 0d       	add	r31, r0
    30d8:	11 24       	eor	r1, r1
    30da:	e4 5a       	subi	r30, 0xA4	; 164
    30dc:	f8 4f       	sbci	r31, 0xF8	; 248
    30de:	01 80       	ldd	r0, Z+1	; 0x01
    30e0:	f2 81       	ldd	r31, Z+2	; 0x02
    30e2:	e0 2d       	mov	r30, r0
    30e4:	20 85       	ldd	r18, Z+8	; 0x08
    30e6:	31 85       	ldd	r19, Z+9	; 0x09
    30e8:	30 93 89 07 	sts	0x0789, r19	; 0x800789 <pxCurrentTCB+0x1>
    30ec:	20 93 88 07 	sts	0x0788, r18	; 0x800788 <pxCurrentTCB>
    30f0:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <uxTopReadyPriority>
    30f4:	08 95       	ret

000030f6 <vTaskSuspend>:
    30f6:	0f 93       	push	r16
    30f8:	1f 93       	push	r17
    30fa:	cf 93       	push	r28
    30fc:	df 93       	push	r29
    30fe:	ec 01       	movw	r28, r24
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	0f 92       	push	r0
    3106:	89 2b       	or	r24, r25
    3108:	21 f4       	brne	.+8      	; 0x3112 <vTaskSuspend+0x1c>
    310a:	c0 91 88 07 	lds	r28, 0x0788	; 0x800788 <pxCurrentTCB>
    310e:	d0 91 89 07 	lds	r29, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    3112:	8e 01       	movw	r16, r28
    3114:	0e 5f       	subi	r16, 0xFE	; 254
    3116:	1f 4f       	sbci	r17, 0xFF	; 255
    3118:	c8 01       	movw	r24, r16
    311a:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    311e:	88 8d       	ldd	r24, Y+24	; 0x18
    3120:	99 8d       	ldd	r25, Y+25	; 0x19
    3122:	89 2b       	or	r24, r25
    3124:	21 f0       	breq	.+8      	; 0x312e <vTaskSuspend+0x38>
    3126:	ce 01       	movw	r24, r28
    3128:	0e 96       	adiw	r24, 0x0e	; 14
    312a:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    312e:	b8 01       	movw	r22, r16
    3130:	80 e2       	ldi	r24, 0x20	; 32
    3132:	97 e0       	ldi	r25, 0x07	; 7
    3134:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3138:	8a a9       	ldd	r24, Y+50	; 0x32
    313a:	81 30       	cpi	r24, 0x01	; 1
    313c:	09 f4       	brne	.+2      	; 0x3140 <vTaskSuspend+0x4a>
    313e:	1a aa       	std	Y+50, r1	; 0x32
    3140:	0f 90       	pop	r0
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <xSchedulerRunning>
    3148:	88 23       	and	r24, r24
    314a:	31 f0       	breq	.+12     	; 0x3158 <vTaskSuspend+0x62>
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	0f 92       	push	r0
    3152:	ab db       	rcall	.-2218   	; 0x28aa <prvResetNextTaskUnblockTime>
    3154:	0f 90       	pop	r0
    3156:	0f be       	out	0x3f, r0	; 63
    3158:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <pxCurrentTCB>
    315c:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    3160:	c8 17       	cp	r28, r24
    3162:	d9 07       	cpc	r29, r25
    3164:	99 f4       	brne	.+38     	; 0x318c <vTaskSuspend+0x96>
    3166:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <xSchedulerRunning>
    316a:	88 23       	and	r24, r24
    316c:	19 f0       	breq	.+6      	; 0x3174 <vTaskSuspend+0x7e>
    316e:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3172:	0c c0       	rjmp	.+24     	; 0x318c <vTaskSuspend+0x96>
    3174:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <xSuspendedTaskList>
    3178:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <uxCurrentNumberOfTasks>
    317c:	98 13       	cpse	r25, r24
    317e:	05 c0       	rjmp	.+10     	; 0x318a <vTaskSuspend+0x94>
    3180:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <pxCurrentTCB+0x1>
    3184:	10 92 88 07 	sts	0x0788, r1	; 0x800788 <pxCurrentTCB>
    3188:	01 c0       	rjmp	.+2      	; 0x318c <vTaskSuspend+0x96>
    318a:	43 df       	rcall	.-378    	; 0x3012 <vTaskSwitchContext>
    318c:	df 91       	pop	r29
    318e:	cf 91       	pop	r28
    3190:	1f 91       	pop	r17
    3192:	0f 91       	pop	r16
    3194:	08 95       	ret

00003196 <vTaskPlaceOnEventList>:
    3196:	cf 92       	push	r12
    3198:	df 92       	push	r13
    319a:	ef 92       	push	r14
    319c:	ff 92       	push	r15
    319e:	6a 01       	movw	r12, r20
    31a0:	7b 01       	movw	r14, r22
    31a2:	60 91 88 07 	lds	r22, 0x0788	; 0x800788 <pxCurrentTCB>
    31a6:	70 91 89 07 	lds	r23, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    31aa:	62 5f       	subi	r22, 0xF2	; 242
    31ac:	7f 4f       	sbci	r23, 0xFF	; 255
    31ae:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    31b2:	41 e0       	ldi	r20, 0x01	; 1
    31b4:	c7 01       	movw	r24, r14
    31b6:	b6 01       	movw	r22, r12
    31b8:	a2 db       	rcall	.-2236   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    31ba:	ff 90       	pop	r15
    31bc:	ef 90       	pop	r14
    31be:	df 90       	pop	r13
    31c0:	cf 90       	pop	r12
    31c2:	08 95       	ret

000031c4 <vTaskPlaceOnEventListRestricted>:
    31c4:	cf 92       	push	r12
    31c6:	df 92       	push	r13
    31c8:	ef 92       	push	r14
    31ca:	ff 92       	push	r15
    31cc:	cf 93       	push	r28
    31ce:	6a 01       	movw	r12, r20
    31d0:	7b 01       	movw	r14, r22
    31d2:	c2 2f       	mov	r28, r18
    31d4:	60 91 88 07 	lds	r22, 0x0788	; 0x800788 <pxCurrentTCB>
    31d8:	70 91 89 07 	lds	r23, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    31dc:	62 5f       	subi	r22, 0xF2	; 242
    31de:	7f 4f       	sbci	r23, 0xFF	; 255
    31e0:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    31e4:	cc 23       	and	r28, r28
    31e6:	21 f0       	breq	.+8      	; 0x31f0 <vTaskPlaceOnEventListRestricted+0x2c>
    31e8:	cc 24       	eor	r12, r12
    31ea:	ca 94       	dec	r12
    31ec:	dc 2c       	mov	r13, r12
    31ee:	76 01       	movw	r14, r12
    31f0:	4c 2f       	mov	r20, r28
    31f2:	c7 01       	movw	r24, r14
    31f4:	b6 01       	movw	r22, r12
    31f6:	83 db       	rcall	.-2298   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    31f8:	cf 91       	pop	r28
    31fa:	ff 90       	pop	r15
    31fc:	ef 90       	pop	r14
    31fe:	df 90       	pop	r13
    3200:	cf 90       	pop	r12
    3202:	08 95       	ret

00003204 <xTaskRemoveFromEventList>:
    3204:	0f 93       	push	r16
    3206:	1f 93       	push	r17
    3208:	cf 93       	push	r28
    320a:	df 93       	push	r29
    320c:	dc 01       	movw	r26, r24
    320e:	17 96       	adiw	r26, 0x07	; 7
    3210:	ed 91       	ld	r30, X+
    3212:	fc 91       	ld	r31, X
    3214:	18 97       	sbiw	r26, 0x08	; 8
    3216:	c0 85       	ldd	r28, Z+8	; 0x08
    3218:	d1 85       	ldd	r29, Z+9	; 0x09
    321a:	8e 01       	movw	r16, r28
    321c:	02 5f       	subi	r16, 0xF2	; 242
    321e:	1f 4f       	sbci	r17, 0xFF	; 255
    3220:	c8 01       	movw	r24, r16
    3222:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3226:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxSchedulerSuspended>
    322a:	81 11       	cpse	r24, r1
    322c:	16 c0       	rjmp	.+44     	; 0x325a <xTaskRemoveFromEventList+0x56>
    322e:	0c 50       	subi	r16, 0x0C	; 12
    3230:	11 09       	sbc	r17, r1
    3232:	c8 01       	movw	r24, r16
    3234:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3238:	8a 8d       	ldd	r24, Y+26	; 0x1a
    323a:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <uxTopReadyPriority>
    323e:	98 17       	cp	r25, r24
    3240:	10 f4       	brcc	.+4      	; 0x3246 <xTaskRemoveFromEventList+0x42>
    3242:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <uxTopReadyPriority>
    3246:	bb e0       	ldi	r27, 0x0B	; 11
    3248:	8b 9f       	mul	r24, r27
    324a:	c0 01       	movw	r24, r0
    324c:	11 24       	eor	r1, r1
    324e:	b8 01       	movw	r22, r16
    3250:	84 5a       	subi	r24, 0xA4	; 164
    3252:	98 4f       	sbci	r25, 0xF8	; 248
    3254:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3258:	05 c0       	rjmp	.+10     	; 0x3264 <xTaskRemoveFromEventList+0x60>
    325a:	b8 01       	movw	r22, r16
    325c:	87 e3       	ldi	r24, 0x37	; 55
    325e:	97 e0       	ldi	r25, 0x07	; 7
    3260:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3264:	e0 91 88 07 	lds	r30, 0x0788	; 0x800788 <pxCurrentTCB>
    3268:	f0 91 89 07 	lds	r31, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    326c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    326e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3270:	89 17       	cp	r24, r25
    3272:	20 f4       	brcc	.+8      	; 0x327c <xTaskRemoveFromEventList+0x78>
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <xYieldPending>
    327a:	01 c0       	rjmp	.+2      	; 0x327e <xTaskRemoveFromEventList+0x7a>
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	df 91       	pop	r29
    3280:	cf 91       	pop	r28
    3282:	1f 91       	pop	r17
    3284:	0f 91       	pop	r16
    3286:	08 95       	ret

00003288 <vTaskInternalSetTimeOutState>:
    3288:	20 91 16 07 	lds	r18, 0x0716	; 0x800716 <xNumOfOverflows>
    328c:	fc 01       	movw	r30, r24
    328e:	20 83       	st	Z, r18
    3290:	40 91 1b 07 	lds	r20, 0x071B	; 0x80071b <xTickCount>
    3294:	50 91 1c 07 	lds	r21, 0x071C	; 0x80071c <xTickCount+0x1>
    3298:	60 91 1d 07 	lds	r22, 0x071D	; 0x80071d <xTickCount+0x2>
    329c:	70 91 1e 07 	lds	r23, 0x071E	; 0x80071e <xTickCount+0x3>
    32a0:	41 83       	std	Z+1, r20	; 0x01
    32a2:	52 83       	std	Z+2, r21	; 0x02
    32a4:	63 83       	std	Z+3, r22	; 0x03
    32a6:	74 83       	std	Z+4, r23	; 0x04
    32a8:	08 95       	ret

000032aa <xTaskCheckForTimeOut>:
    32aa:	cf 92       	push	r12
    32ac:	df 92       	push	r13
    32ae:	ef 92       	push	r14
    32b0:	ff 92       	push	r15
    32b2:	0f 93       	push	r16
    32b4:	1f 93       	push	r17
    32b6:	cf 93       	push	r28
    32b8:	df 93       	push	r29
    32ba:	fb 01       	movw	r30, r22
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	f8 94       	cli
    32c0:	0f 92       	push	r0
    32c2:	40 91 1b 07 	lds	r20, 0x071B	; 0x80071b <xTickCount>
    32c6:	50 91 1c 07 	lds	r21, 0x071C	; 0x80071c <xTickCount+0x1>
    32ca:	60 91 1d 07 	lds	r22, 0x071D	; 0x80071d <xTickCount+0x2>
    32ce:	70 91 1e 07 	lds	r23, 0x071E	; 0x80071e <xTickCount+0x3>
    32d2:	00 81       	ld	r16, Z
    32d4:	11 81       	ldd	r17, Z+1	; 0x01
    32d6:	22 81       	ldd	r18, Z+2	; 0x02
    32d8:	33 81       	ldd	r19, Z+3	; 0x03
    32da:	0f 3f       	cpi	r16, 0xFF	; 255
    32dc:	af ef       	ldi	r26, 0xFF	; 255
    32de:	1a 07       	cpc	r17, r26
    32e0:	2a 07       	cpc	r18, r26
    32e2:	3a 07       	cpc	r19, r26
    32e4:	49 f1       	breq	.+82     	; 0x3338 <xTaskCheckForTimeOut+0x8e>
    32e6:	ec 01       	movw	r28, r24
    32e8:	c9 80       	ldd	r12, Y+1	; 0x01
    32ea:	da 80       	ldd	r13, Y+2	; 0x02
    32ec:	eb 80       	ldd	r14, Y+3	; 0x03
    32ee:	fc 80       	ldd	r15, Y+4	; 0x04
    32f0:	a0 91 16 07 	lds	r26, 0x0716	; 0x800716 <xNumOfOverflows>
    32f4:	b8 81       	ld	r27, Y
    32f6:	ba 17       	cp	r27, r26
    32f8:	29 f0       	breq	.+10     	; 0x3304 <xTaskCheckForTimeOut+0x5a>
    32fa:	4c 15       	cp	r20, r12
    32fc:	5d 05       	cpc	r21, r13
    32fe:	6e 05       	cpc	r22, r14
    3300:	7f 05       	cpc	r23, r15
    3302:	e0 f4       	brcc	.+56     	; 0x333c <xTaskCheckForTimeOut+0x92>
    3304:	4c 19       	sub	r20, r12
    3306:	5d 09       	sbc	r21, r13
    3308:	6e 09       	sbc	r22, r14
    330a:	7f 09       	sbc	r23, r15
    330c:	40 17       	cp	r20, r16
    330e:	51 07       	cpc	r21, r17
    3310:	62 07       	cpc	r22, r18
    3312:	73 07       	cpc	r23, r19
    3314:	58 f4       	brcc	.+22     	; 0x332c <xTaskCheckForTimeOut+0x82>
    3316:	04 1b       	sub	r16, r20
    3318:	15 0b       	sbc	r17, r21
    331a:	26 0b       	sbc	r18, r22
    331c:	37 0b       	sbc	r19, r23
    331e:	00 83       	st	Z, r16
    3320:	11 83       	std	Z+1, r17	; 0x01
    3322:	22 83       	std	Z+2, r18	; 0x02
    3324:	33 83       	std	Z+3, r19	; 0x03
    3326:	b0 df       	rcall	.-160    	; 0x3288 <vTaskInternalSetTimeOutState>
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	09 c0       	rjmp	.+18     	; 0x333e <xTaskCheckForTimeOut+0x94>
    332c:	10 82       	st	Z, r1
    332e:	11 82       	std	Z+1, r1	; 0x01
    3330:	12 82       	std	Z+2, r1	; 0x02
    3332:	13 82       	std	Z+3, r1	; 0x03
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	03 c0       	rjmp	.+6      	; 0x333e <xTaskCheckForTimeOut+0x94>
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	01 c0       	rjmp	.+2      	; 0x333e <xTaskCheckForTimeOut+0x94>
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	0f 90       	pop	r0
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	1f 91       	pop	r17
    3348:	0f 91       	pop	r16
    334a:	ff 90       	pop	r15
    334c:	ef 90       	pop	r14
    334e:	df 90       	pop	r13
    3350:	cf 90       	pop	r12
    3352:	08 95       	ret

00003354 <vTaskMissedYield>:
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <xYieldPending>
    335a:	08 95       	ret

0000335c <xTaskGetSchedulerState>:
    335c:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <xSchedulerRunning>
    3360:	88 23       	and	r24, r24
    3362:	31 f0       	breq	.+12     	; 0x3370 <xTaskGetSchedulerState+0x14>
    3364:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxSchedulerSuspended>
    3368:	88 23       	and	r24, r24
    336a:	21 f0       	breq	.+8      	; 0x3374 <xTaskGetSchedulerState+0x18>
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	08 95       	ret
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	08 95       	ret
    3374:	82 e0       	ldi	r24, 0x02	; 2
    3376:	08 95       	ret

00003378 <xTaskPriorityInherit>:
    3378:	0f 93       	push	r16
    337a:	1f 93       	push	r17
    337c:	cf 93       	push	r28
    337e:	df 93       	push	r29
    3380:	fc 01       	movw	r30, r24
    3382:	89 2b       	or	r24, r25
    3384:	09 f4       	brne	.+2      	; 0x3388 <xTaskPriorityInherit+0x10>
    3386:	60 c0       	rjmp	.+192    	; 0x3448 <xTaskPriorityInherit+0xd0>
    3388:	82 8d       	ldd	r24, Z+26	; 0x1a
    338a:	a0 91 88 07 	lds	r26, 0x0788	; 0x800788 <pxCurrentTCB>
    338e:	b0 91 89 07 	lds	r27, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    3392:	5a 96       	adiw	r26, 0x1a	; 26
    3394:	9c 91       	ld	r25, X
    3396:	89 17       	cp	r24, r25
    3398:	08 f0       	brcs	.+2      	; 0x339c <xTaskPriorityInherit+0x24>
    339a:	4a c0       	rjmp	.+148    	; 0x3430 <xTaskPriorityInherit+0xb8>
    339c:	46 85       	ldd	r20, Z+14	; 0x0e
    339e:	57 85       	ldd	r21, Z+15	; 0x0f
    33a0:	60 89       	ldd	r22, Z+16	; 0x10
    33a2:	71 89       	ldd	r23, Z+17	; 0x11
    33a4:	77 23       	and	r23, r23
    33a6:	94 f0       	brlt	.+36     	; 0x33cc <xTaskPriorityInherit+0x54>
    33a8:	a0 91 88 07 	lds	r26, 0x0788	; 0x800788 <pxCurrentTCB>
    33ac:	b0 91 89 07 	lds	r27, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    33b0:	5a 96       	adiw	r26, 0x1a	; 26
    33b2:	9c 91       	ld	r25, X
    33b4:	44 e0       	ldi	r20, 0x04	; 4
    33b6:	50 e0       	ldi	r21, 0x00	; 0
    33b8:	60 e0       	ldi	r22, 0x00	; 0
    33ba:	70 e0       	ldi	r23, 0x00	; 0
    33bc:	49 1b       	sub	r20, r25
    33be:	51 09       	sbc	r21, r1
    33c0:	61 09       	sbc	r22, r1
    33c2:	71 09       	sbc	r23, r1
    33c4:	46 87       	std	Z+14, r20	; 0x0e
    33c6:	57 87       	std	Z+15, r21	; 0x0f
    33c8:	60 8b       	std	Z+16, r22	; 0x10
    33ca:	71 8b       	std	Z+17, r23	; 0x11
    33cc:	2b e0       	ldi	r18, 0x0B	; 11
    33ce:	82 9f       	mul	r24, r18
    33d0:	c0 01       	movw	r24, r0
    33d2:	11 24       	eor	r1, r1
    33d4:	84 5a       	subi	r24, 0xA4	; 164
    33d6:	98 4f       	sbci	r25, 0xF8	; 248
    33d8:	24 85       	ldd	r18, Z+12	; 0x0c
    33da:	35 85       	ldd	r19, Z+13	; 0x0d
    33dc:	28 17       	cp	r18, r24
    33de:	39 07       	cpc	r19, r25
    33e0:	f1 f4       	brne	.+60     	; 0x341e <xTaskPriorityInherit+0xa6>
    33e2:	8f 01       	movw	r16, r30
    33e4:	ef 01       	movw	r28, r30
    33e6:	22 96       	adiw	r28, 0x02	; 2
    33e8:	ce 01       	movw	r24, r28
    33ea:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    33ee:	e0 91 88 07 	lds	r30, 0x0788	; 0x800788 <pxCurrentTCB>
    33f2:	f0 91 89 07 	lds	r31, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    33f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    33f8:	f8 01       	movw	r30, r16
    33fa:	82 8f       	std	Z+26, r24	; 0x1a
    33fc:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <uxTopReadyPriority>
    3400:	98 17       	cp	r25, r24
    3402:	10 f4       	brcc	.+4      	; 0x3408 <xTaskPriorityInherit+0x90>
    3404:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <uxTopReadyPriority>
    3408:	fb e0       	ldi	r31, 0x0B	; 11
    340a:	8f 9f       	mul	r24, r31
    340c:	c0 01       	movw	r24, r0
    340e:	11 24       	eor	r1, r1
    3410:	be 01       	movw	r22, r28
    3412:	84 5a       	subi	r24, 0xA4	; 164
    3414:	98 4f       	sbci	r25, 0xF8	; 248
    3416:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	16 c0       	rjmp	.+44     	; 0x344a <xTaskPriorityInherit+0xd2>
    341e:	a0 91 88 07 	lds	r26, 0x0788	; 0x800788 <pxCurrentTCB>
    3422:	b0 91 89 07 	lds	r27, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    3426:	5a 96       	adiw	r26, 0x1a	; 26
    3428:	8c 91       	ld	r24, X
    342a:	82 8f       	std	Z+26, r24	; 0x1a
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	0d c0       	rjmp	.+26     	; 0x344a <xTaskPriorityInherit+0xd2>
    3430:	a0 91 88 07 	lds	r26, 0x0788	; 0x800788 <pxCurrentTCB>
    3434:	b0 91 89 07 	lds	r27, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	24 a5       	ldd	r18, Z+44	; 0x2c
    343c:	5a 96       	adiw	r26, 0x1a	; 26
    343e:	9c 91       	ld	r25, X
    3440:	29 17       	cp	r18, r25
    3442:	18 f0       	brcs	.+6      	; 0x344a <xTaskPriorityInherit+0xd2>
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	01 c0       	rjmp	.+2      	; 0x344a <xTaskPriorityInherit+0xd2>
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	df 91       	pop	r29
    344c:	cf 91       	pop	r28
    344e:	1f 91       	pop	r17
    3450:	0f 91       	pop	r16
    3452:	08 95       	ret

00003454 <xTaskPriorityDisinherit>:
    3454:	0f 93       	push	r16
    3456:	1f 93       	push	r17
    3458:	cf 93       	push	r28
    345a:	df 93       	push	r29
    345c:	fc 01       	movw	r30, r24
    345e:	89 2b       	or	r24, r25
    3460:	79 f1       	breq	.+94     	; 0x34c0 <xTaskPriorityDisinherit+0x6c>
    3462:	85 a5       	ldd	r24, Z+45	; 0x2d
    3464:	81 50       	subi	r24, 0x01	; 1
    3466:	85 a7       	std	Z+45, r24	; 0x2d
    3468:	22 8d       	ldd	r18, Z+26	; 0x1a
    346a:	94 a5       	ldd	r25, Z+44	; 0x2c
    346c:	29 17       	cp	r18, r25
    346e:	51 f1       	breq	.+84     	; 0x34c4 <xTaskPriorityDisinherit+0x70>
    3470:	81 11       	cpse	r24, r1
    3472:	2a c0       	rjmp	.+84     	; 0x34c8 <xTaskPriorityDisinherit+0x74>
    3474:	ef 01       	movw	r28, r30
    3476:	8f 01       	movw	r16, r30
    3478:	0e 5f       	subi	r16, 0xFE	; 254
    347a:	1f 4f       	sbci	r17, 0xFF	; 255
    347c:	c8 01       	movw	r24, r16
    347e:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3482:	8c a5       	ldd	r24, Y+44	; 0x2c
    3484:	8a 8f       	std	Y+26, r24	; 0x1a
    3486:	44 e0       	ldi	r20, 0x04	; 4
    3488:	50 e0       	ldi	r21, 0x00	; 0
    348a:	60 e0       	ldi	r22, 0x00	; 0
    348c:	70 e0       	ldi	r23, 0x00	; 0
    348e:	48 1b       	sub	r20, r24
    3490:	51 09       	sbc	r21, r1
    3492:	61 09       	sbc	r22, r1
    3494:	71 09       	sbc	r23, r1
    3496:	4e 87       	std	Y+14, r20	; 0x0e
    3498:	5f 87       	std	Y+15, r21	; 0x0f
    349a:	68 8b       	std	Y+16, r22	; 0x10
    349c:	79 8b       	std	Y+17, r23	; 0x11
    349e:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <uxTopReadyPriority>
    34a2:	98 17       	cp	r25, r24
    34a4:	10 f4       	brcc	.+4      	; 0x34aa <xTaskPriorityDisinherit+0x56>
    34a6:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <uxTopReadyPriority>
    34aa:	2b e0       	ldi	r18, 0x0B	; 11
    34ac:	82 9f       	mul	r24, r18
    34ae:	c0 01       	movw	r24, r0
    34b0:	11 24       	eor	r1, r1
    34b2:	b8 01       	movw	r22, r16
    34b4:	84 5a       	subi	r24, 0xA4	; 164
    34b6:	98 4f       	sbci	r25, 0xF8	; 248
    34b8:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	05 c0       	rjmp	.+10     	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	03 c0       	rjmp	.+6      	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	01 c0       	rjmp	.+2      	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	df 91       	pop	r29
    34cc:	cf 91       	pop	r28
    34ce:	1f 91       	pop	r17
    34d0:	0f 91       	pop	r16
    34d2:	08 95       	ret

000034d4 <vTaskPriorityDisinheritAfterTimeout>:
    34d4:	0f 93       	push	r16
    34d6:	1f 93       	push	r17
    34d8:	cf 93       	push	r28
    34da:	df 93       	push	r29
    34dc:	fc 01       	movw	r30, r24
    34de:	89 2b       	or	r24, r25
    34e0:	09 f4       	brne	.+2      	; 0x34e4 <vTaskPriorityDisinheritAfterTimeout+0x10>
    34e2:	3f c0       	rjmp	.+126    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34e4:	84 a5       	ldd	r24, Z+44	; 0x2c
    34e6:	86 17       	cp	r24, r22
    34e8:	08 f4       	brcc	.+2      	; 0x34ec <vTaskPriorityDisinheritAfterTimeout+0x18>
    34ea:	86 2f       	mov	r24, r22
    34ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    34ee:	98 17       	cp	r25, r24
    34f0:	c1 f1       	breq	.+112    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34f2:	25 a5       	ldd	r18, Z+45	; 0x2d
    34f4:	21 30       	cpi	r18, 0x01	; 1
    34f6:	a9 f5       	brne	.+106    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34f8:	82 8f       	std	Z+26, r24	; 0x1a
    34fa:	46 85       	ldd	r20, Z+14	; 0x0e
    34fc:	57 85       	ldd	r21, Z+15	; 0x0f
    34fe:	60 89       	ldd	r22, Z+16	; 0x10
    3500:	71 89       	ldd	r23, Z+17	; 0x11
    3502:	77 23       	and	r23, r23
    3504:	64 f0       	brlt	.+24     	; 0x351e <vTaskPriorityDisinheritAfterTimeout+0x4a>
    3506:	44 e0       	ldi	r20, 0x04	; 4
    3508:	50 e0       	ldi	r21, 0x00	; 0
    350a:	60 e0       	ldi	r22, 0x00	; 0
    350c:	70 e0       	ldi	r23, 0x00	; 0
    350e:	48 1b       	sub	r20, r24
    3510:	51 09       	sbc	r21, r1
    3512:	61 09       	sbc	r22, r1
    3514:	71 09       	sbc	r23, r1
    3516:	46 87       	std	Z+14, r20	; 0x0e
    3518:	57 87       	std	Z+15, r21	; 0x0f
    351a:	60 8b       	std	Z+16, r22	; 0x10
    351c:	71 8b       	std	Z+17, r23	; 0x11
    351e:	2b e0       	ldi	r18, 0x0B	; 11
    3520:	92 9f       	mul	r25, r18
    3522:	c0 01       	movw	r24, r0
    3524:	11 24       	eor	r1, r1
    3526:	84 5a       	subi	r24, 0xA4	; 164
    3528:	98 4f       	sbci	r25, 0xF8	; 248
    352a:	24 85       	ldd	r18, Z+12	; 0x0c
    352c:	35 85       	ldd	r19, Z+13	; 0x0d
    352e:	28 17       	cp	r18, r24
    3530:	39 07       	cpc	r19, r25
    3532:	b9 f4       	brne	.+46     	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3534:	ef 01       	movw	r28, r30
    3536:	8f 01       	movw	r16, r30
    3538:	0e 5f       	subi	r16, 0xFE	; 254
    353a:	1f 4f       	sbci	r17, 0xFF	; 255
    353c:	c8 01       	movw	r24, r16
    353e:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3542:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3544:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <uxTopReadyPriority>
    3548:	98 17       	cp	r25, r24
    354a:	10 f4       	brcc	.+4      	; 0x3550 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    354c:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <uxTopReadyPriority>
    3550:	2b e0       	ldi	r18, 0x0B	; 11
    3552:	82 9f       	mul	r24, r18
    3554:	c0 01       	movw	r24, r0
    3556:	11 24       	eor	r1, r1
    3558:	b8 01       	movw	r22, r16
    355a:	84 5a       	subi	r24, 0xA4	; 164
    355c:	98 4f       	sbci	r25, 0xF8	; 248
    355e:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3562:	df 91       	pop	r29
    3564:	cf 91       	pop	r28
    3566:	1f 91       	pop	r17
    3568:	0f 91       	pop	r16
    356a:	08 95       	ret

0000356c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    356c:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <pxCurrentTCB>
    3570:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    3574:	89 2b       	or	r24, r25
    3576:	39 f0       	breq	.+14     	; 0x3586 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    3578:	e0 91 88 07 	lds	r30, 0x0788	; 0x800788 <pxCurrentTCB>
    357c:	f0 91 89 07 	lds	r31, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    3580:	85 a5       	ldd	r24, Z+45	; 0x2d
    3582:	8f 5f       	subi	r24, 0xFF	; 255
    3584:	85 a7       	std	Z+45, r24	; 0x2d
		}

		return pxCurrentTCB;
    3586:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <pxCurrentTCB>
    358a:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
	}
    358e:	08 95       	ret

00003590 <prvInsertTimerInActiveList>:
{
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );
	return pxTimer->pcTimerName;
}
    3590:	cf 92       	push	r12
    3592:	df 92       	push	r13
    3594:	ef 92       	push	r14
    3596:	ff 92       	push	r15
    3598:	0f 93       	push	r16
    359a:	1f 93       	push	r17
    359c:	fc 01       	movw	r30, r24
    359e:	42 83       	std	Z+2, r20	; 0x02
    35a0:	53 83       	std	Z+3, r21	; 0x03
    35a2:	64 83       	std	Z+4, r22	; 0x04
    35a4:	75 83       	std	Z+5, r23	; 0x05
    35a6:	93 87       	std	Z+11, r25	; 0x0b
    35a8:	82 87       	std	Z+10, r24	; 0x0a
    35aa:	04 17       	cp	r16, r20
    35ac:	15 07       	cpc	r17, r21
    35ae:	26 07       	cpc	r18, r22
    35b0:	37 07       	cpc	r19, r23
    35b2:	c0 f0       	brcs	.+48     	; 0x35e4 <prvInsertTimerInActiveList+0x54>
    35b4:	0c 19       	sub	r16, r12
    35b6:	1d 09       	sbc	r17, r13
    35b8:	2e 09       	sbc	r18, r14
    35ba:	3f 09       	sbc	r19, r15
    35bc:	86 85       	ldd	r24, Z+14	; 0x0e
    35be:	97 85       	ldd	r25, Z+15	; 0x0f
    35c0:	a0 89       	ldd	r26, Z+16	; 0x10
    35c2:	b1 89       	ldd	r27, Z+17	; 0x11
    35c4:	08 17       	cp	r16, r24
    35c6:	19 07       	cpc	r17, r25
    35c8:	2a 07       	cpc	r18, r26
    35ca:	3b 07       	cpc	r19, r27
    35cc:	00 f5       	brcc	.+64     	; 0x360e <prvInsertTimerInActiveList+0x7e>
    35ce:	bf 01       	movw	r22, r30
    35d0:	6e 5f       	subi	r22, 0xFE	; 254
    35d2:	7f 4f       	sbci	r23, 0xFF	; 255
    35d4:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <pxOverflowTimerList>
    35d8:	90 91 93 07 	lds	r25, 0x0793	; 0x800793 <pxOverflowTimerList+0x1>
    35dc:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	18 c0       	rjmp	.+48     	; 0x3614 <prvInsertTimerInActiveList+0x84>
    35e4:	0c 15       	cp	r16, r12
    35e6:	1d 05       	cpc	r17, r13
    35e8:	2e 05       	cpc	r18, r14
    35ea:	3f 05       	cpc	r19, r15
    35ec:	28 f4       	brcc	.+10     	; 0x35f8 <prvInsertTimerInActiveList+0x68>
    35ee:	4c 15       	cp	r20, r12
    35f0:	5d 05       	cpc	r21, r13
    35f2:	6e 05       	cpc	r22, r14
    35f4:	7f 05       	cpc	r23, r15
    35f6:	68 f4       	brcc	.+26     	; 0x3612 <prvInsertTimerInActiveList+0x82>
    35f8:	bf 01       	movw	r22, r30
    35fa:	6e 5f       	subi	r22, 0xFE	; 254
    35fc:	7f 4f       	sbci	r23, 0xFF	; 255
    35fe:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <pxCurrentTimerList>
    3602:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <pxCurrentTimerList+0x1>
    3606:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	03 c0       	rjmp	.+6      	; 0x3614 <prvInsertTimerInActiveList+0x84>
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	01 c0       	rjmp	.+2      	; 0x3614 <prvInsertTimerInActiveList+0x84>
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	1f 91       	pop	r17
    3616:	0f 91       	pop	r16
    3618:	ff 90       	pop	r15
    361a:	ef 90       	pop	r14
    361c:	df 90       	pop	r13
    361e:	cf 90       	pop	r12
    3620:	08 95       	ret

00003622 <prvCheckForValidListAndQueue>:
    3622:	0f b6       	in	r0, 0x3f	; 63
    3624:	f8 94       	cli
    3626:	0f 92       	push	r0
    3628:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <xTimerQueue>
    362c:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <xTimerQueue+0x1>
    3630:	89 2b       	or	r24, r25
    3632:	e9 f4       	brne	.+58     	; 0x366e <prvCheckForValidListAndQueue+0x4c>
    3634:	81 ea       	ldi	r24, 0xA1	; 161
    3636:	97 e0       	ldi	r25, 0x07	; 7
    3638:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    363c:	86 e9       	ldi	r24, 0x96	; 150
    363e:	97 e0       	ldi	r25, 0x07	; 7
    3640:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    3644:	81 ea       	ldi	r24, 0xA1	; 161
    3646:	97 e0       	ldi	r25, 0x07	; 7
    3648:	90 93 95 07 	sts	0x0795, r25	; 0x800795 <pxCurrentTimerList+0x1>
    364c:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <pxCurrentTimerList>
    3650:	86 e9       	ldi	r24, 0x96	; 150
    3652:	97 e0       	ldi	r25, 0x07	; 7
    3654:	90 93 93 07 	sts	0x0793, r25	; 0x800793 <pxOverflowTimerList+0x1>
    3658:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <pxOverflowTimerList>
    365c:	40 e0       	ldi	r20, 0x00	; 0
    365e:	67 e0       	ldi	r22, 0x07	; 7
    3660:	8a e0       	ldi	r24, 0x0A	; 10
    3662:	0e 94 a7 09 	call	0x134e	; 0x134e <xQueueGenericCreate>
    3666:	90 93 91 07 	sts	0x0791, r25	; 0x800791 <xTimerQueue+0x1>
    366a:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <xTimerQueue>
    366e:	0f 90       	pop	r0
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	08 95       	ret

00003674 <xTimerCreateTimerTask>:
    3674:	ef 92       	push	r14
    3676:	ff 92       	push	r15
    3678:	0f 93       	push	r16
    367a:	d3 df       	rcall	.-90     	; 0x3622 <prvCheckForValidListAndQueue>
    367c:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <xTimerQueue>
    3680:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <xTimerQueue+0x1>
    3684:	89 2b       	or	r24, r25
    3686:	89 f0       	breq	.+34     	; 0x36aa <xTimerCreateTimerTask+0x36>
    3688:	0f 2e       	mov	r0, r31
    368a:	fe e8       	ldi	r31, 0x8E	; 142
    368c:	ef 2e       	mov	r14, r31
    368e:	f7 e0       	ldi	r31, 0x07	; 7
    3690:	ff 2e       	mov	r15, r31
    3692:	f0 2d       	mov	r31, r0
    3694:	03 e0       	ldi	r16, 0x03	; 3
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	40 e8       	ldi	r20, 0x80	; 128
    369c:	50 e0       	ldi	r21, 0x00	; 0
    369e:	6b e1       	ldi	r22, 0x1B	; 27
    36a0:	72 e0       	ldi	r23, 0x02	; 2
    36a2:	85 e8       	ldi	r24, 0x85	; 133
    36a4:	9c e1       	ldi	r25, 0x1C	; 28
    36a6:	a2 d9       	rcall	.-3260   	; 0x29ec <xTaskCreate>
    36a8:	01 c0       	rjmp	.+2      	; 0x36ac <xTimerCreateTimerTask+0x38>
    36aa:	80 e0       	ldi	r24, 0x00	; 0
    36ac:	0f 91       	pop	r16
    36ae:	ff 90       	pop	r15
    36b0:	ef 90       	pop	r14
    36b2:	08 95       	ret

000036b4 <xTimerCreate>:
    36b4:	7f 92       	push	r7
    36b6:	8f 92       	push	r8
    36b8:	9f 92       	push	r9
    36ba:	af 92       	push	r10
    36bc:	bf 92       	push	r11
    36be:	cf 92       	push	r12
    36c0:	df 92       	push	r13
    36c2:	ef 92       	push	r14
    36c4:	ff 92       	push	r15
    36c6:	0f 93       	push	r16
    36c8:	1f 93       	push	r17
    36ca:	cf 93       	push	r28
    36cc:	df 93       	push	r29
    36ce:	6c 01       	movw	r12, r24
    36d0:	4a 01       	movw	r8, r20
    36d2:	5b 01       	movw	r10, r22
    36d4:	72 2e       	mov	r7, r18
    36d6:	87 e1       	ldi	r24, 0x17	; 23
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    36de:	ec 01       	movw	r28, r24
    36e0:	89 2b       	or	r24, r25
    36e2:	81 f0       	breq	.+32     	; 0x3704 <xTimerCreate+0x50>
    36e4:	9e df       	rcall	.-196    	; 0x3622 <prvCheckForValidListAndQueue>
    36e6:	d9 82       	std	Y+1, r13	; 0x01
    36e8:	c8 82       	st	Y, r12
    36ea:	8e 86       	std	Y+14, r8	; 0x0e
    36ec:	9f 86       	std	Y+15, r9	; 0x0f
    36ee:	a8 8a       	std	Y+16, r10	; 0x10
    36f0:	b9 8a       	std	Y+17, r11	; 0x11
    36f2:	7a 8a       	std	Y+18, r7	; 0x12
    36f4:	1c 8b       	std	Y+20, r17	; 0x14
    36f6:	0b 8b       	std	Y+19, r16	; 0x13
    36f8:	fe 8a       	std	Y+22, r15	; 0x16
    36fa:	ed 8a       	std	Y+21, r14	; 0x15
    36fc:	ce 01       	movw	r24, r28
    36fe:	02 96       	adiw	r24, 0x02	; 2
    3700:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    3704:	ce 01       	movw	r24, r28
    3706:	df 91       	pop	r29
    3708:	cf 91       	pop	r28
    370a:	1f 91       	pop	r17
    370c:	0f 91       	pop	r16
    370e:	ff 90       	pop	r15
    3710:	ef 90       	pop	r14
    3712:	df 90       	pop	r13
    3714:	cf 90       	pop	r12
    3716:	bf 90       	pop	r11
    3718:	af 90       	pop	r10
    371a:	9f 90       	pop	r9
    371c:	8f 90       	pop	r8
    371e:	7f 90       	pop	r7
    3720:	08 95       	ret

00003722 <xTimerGenericCommand>:
    3722:	8f 92       	push	r8
    3724:	9f 92       	push	r9
    3726:	af 92       	push	r10
    3728:	bf 92       	push	r11
    372a:	cf 92       	push	r12
    372c:	df 92       	push	r13
    372e:	ef 92       	push	r14
    3730:	ff 92       	push	r15
    3732:	0f 93       	push	r16
    3734:	1f 93       	push	r17
    3736:	cf 93       	push	r28
    3738:	df 93       	push	r29
    373a:	cd b7       	in	r28, 0x3d	; 61
    373c:	de b7       	in	r29, 0x3e	; 62
    373e:	27 97       	sbiw	r28, 0x07	; 7
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	f8 94       	cli
    3744:	de bf       	out	0x3e, r29	; 62
    3746:	0f be       	out	0x3f, r0	; 63
    3748:	cd bf       	out	0x3d, r28	; 61
    374a:	e0 91 90 07 	lds	r30, 0x0790	; 0x800790 <xTimerQueue>
    374e:	f0 91 91 07 	lds	r31, 0x0791	; 0x800791 <xTimerQueue+0x1>
    3752:	30 97       	sbiw	r30, 0x00	; 0
    3754:	81 f1       	breq	.+96     	; 0x37b6 <xTimerGenericCommand+0x94>
    3756:	69 83       	std	Y+1, r22	; 0x01
    3758:	2a 83       	std	Y+2, r18	; 0x02
    375a:	3b 83       	std	Y+3, r19	; 0x03
    375c:	4c 83       	std	Y+4, r20	; 0x04
    375e:	5d 83       	std	Y+5, r21	; 0x05
    3760:	9f 83       	std	Y+7, r25	; 0x07
    3762:	8e 83       	std	Y+6, r24	; 0x06
    3764:	66 30       	cpi	r22, 0x06	; 6
    3766:	f4 f4       	brge	.+60     	; 0x37a4 <xTimerGenericCommand+0x82>
    3768:	f9 dd       	rcall	.-1038   	; 0x335c <xTaskGetSchedulerState>
    376a:	82 30       	cpi	r24, 0x02	; 2
    376c:	69 f4       	brne	.+26     	; 0x3788 <xTimerGenericCommand+0x66>
    376e:	00 e0       	ldi	r16, 0x00	; 0
    3770:	a7 01       	movw	r20, r14
    3772:	96 01       	movw	r18, r12
    3774:	be 01       	movw	r22, r28
    3776:	6f 5f       	subi	r22, 0xFF	; 255
    3778:	7f 4f       	sbci	r23, 0xFF	; 255
    377a:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <xTimerQueue>
    377e:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <xTimerQueue+0x1>
    3782:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    3786:	18 c0       	rjmp	.+48     	; 0x37b8 <xTimerGenericCommand+0x96>
    3788:	00 e0       	ldi	r16, 0x00	; 0
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	a9 01       	movw	r20, r18
    3790:	be 01       	movw	r22, r28
    3792:	6f 5f       	subi	r22, 0xFF	; 255
    3794:	7f 4f       	sbci	r23, 0xFF	; 255
    3796:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <xTimerQueue>
    379a:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <xTimerQueue+0x1>
    379e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    37a2:	0a c0       	rjmp	.+20     	; 0x37b8 <xTimerGenericCommand+0x96>
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	a8 01       	movw	r20, r16
    37a8:	be 01       	movw	r22, r28
    37aa:	6f 5f       	subi	r22, 0xFF	; 255
    37ac:	7f 4f       	sbci	r23, 0xFF	; 255
    37ae:	cf 01       	movw	r24, r30
    37b0:	0e 94 90 0a 	call	0x1520	; 0x1520 <xQueueGenericSendFromISR>
    37b4:	01 c0       	rjmp	.+2      	; 0x37b8 <xTimerGenericCommand+0x96>
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	27 96       	adiw	r28, 0x07	; 7
    37ba:	0f b6       	in	r0, 0x3f	; 63
    37bc:	f8 94       	cli
    37be:	de bf       	out	0x3e, r29	; 62
    37c0:	0f be       	out	0x3f, r0	; 63
    37c2:	cd bf       	out	0x3d, r28	; 61
    37c4:	df 91       	pop	r29
    37c6:	cf 91       	pop	r28
    37c8:	1f 91       	pop	r17
    37ca:	0f 91       	pop	r16
    37cc:	ff 90       	pop	r15
    37ce:	ef 90       	pop	r14
    37d0:	df 90       	pop	r13
    37d2:	cf 90       	pop	r12
    37d4:	bf 90       	pop	r11
    37d6:	af 90       	pop	r10
    37d8:	9f 90       	pop	r9
    37da:	8f 90       	pop	r8
    37dc:	08 95       	ret

000037de <prvSampleTimeNow>:
    37de:	2f 92       	push	r2
    37e0:	3f 92       	push	r3
    37e2:	4f 92       	push	r4
    37e4:	5f 92       	push	r5
    37e6:	6f 92       	push	r6
    37e8:	7f 92       	push	r7
    37ea:	8f 92       	push	r8
    37ec:	9f 92       	push	r9
    37ee:	af 92       	push	r10
    37f0:	bf 92       	push	r11
    37f2:	cf 92       	push	r12
    37f4:	df 92       	push	r13
    37f6:	ef 92       	push	r14
    37f8:	ff 92       	push	r15
    37fa:	0f 93       	push	r16
    37fc:	1f 93       	push	r17
    37fe:	cf 93       	push	r28
    3800:	df 93       	push	r29
    3802:	1c 01       	movw	r2, r24
    3804:	8e da       	rcall	.-2788   	; 0x2d22 <xTaskGetTickCount>
    3806:	2b 01       	movw	r4, r22
    3808:	3c 01       	movw	r6, r24
    380a:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <xLastTime.2378>
    380e:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <xLastTime.2378+0x1>
    3812:	a0 91 8c 07 	lds	r26, 0x078C	; 0x80078c <xLastTime.2378+0x2>
    3816:	b0 91 8d 07 	lds	r27, 0x078D	; 0x80078d <xLastTime.2378+0x3>
    381a:	48 16       	cp	r4, r24
    381c:	59 06       	cpc	r5, r25
    381e:	6a 06       	cpc	r6, r26
    3820:	7b 06       	cpc	r7, r27
    3822:	08 f0       	brcs	.+2      	; 0x3826 <prvSampleTimeNow+0x48>
    3824:	53 c0       	rjmp	.+166    	; 0x38cc <prvSampleTimeNow+0xee>
    3826:	3b c0       	rjmp	.+118    	; 0x389e <prvSampleTimeNow+0xc0>
    3828:	07 80       	ldd	r0, Z+7	; 0x07
    382a:	f0 85       	ldd	r31, Z+8	; 0x08
    382c:	e0 2d       	mov	r30, r0
    382e:	80 80       	ld	r8, Z
    3830:	91 80       	ldd	r9, Z+1	; 0x01
    3832:	a2 80       	ldd	r10, Z+2	; 0x02
    3834:	b3 80       	ldd	r11, Z+3	; 0x03
    3836:	c0 85       	ldd	r28, Z+8	; 0x08
    3838:	d1 85       	ldd	r29, Z+9	; 0x09
    383a:	8e 01       	movw	r16, r28
    383c:	0e 5f       	subi	r16, 0xFE	; 254
    383e:	1f 4f       	sbci	r17, 0xFF	; 255
    3840:	c8 01       	movw	r24, r16
    3842:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3846:	ed 89       	ldd	r30, Y+21	; 0x15
    3848:	fe 89       	ldd	r31, Y+22	; 0x16
    384a:	ce 01       	movw	r24, r28
    384c:	19 95       	eicall
    384e:	8a 89       	ldd	r24, Y+18	; 0x12
    3850:	81 30       	cpi	r24, 0x01	; 1
    3852:	29 f5       	brne	.+74     	; 0x389e <prvSampleTimeNow+0xc0>
    3854:	8e 85       	ldd	r24, Y+14	; 0x0e
    3856:	9f 85       	ldd	r25, Y+15	; 0x0f
    3858:	a8 89       	ldd	r26, Y+16	; 0x10
    385a:	b9 89       	ldd	r27, Y+17	; 0x11
    385c:	88 0d       	add	r24, r8
    385e:	99 1d       	adc	r25, r9
    3860:	aa 1d       	adc	r26, r10
    3862:	bb 1d       	adc	r27, r11
    3864:	88 16       	cp	r8, r24
    3866:	99 06       	cpc	r9, r25
    3868:	aa 06       	cpc	r10, r26
    386a:	bb 06       	cpc	r11, r27
    386c:	70 f4       	brcc	.+28     	; 0x388a <prvSampleTimeNow+0xac>
    386e:	8a 83       	std	Y+2, r24	; 0x02
    3870:	9b 83       	std	Y+3, r25	; 0x03
    3872:	ac 83       	std	Y+4, r26	; 0x04
    3874:	bd 83       	std	Y+5, r27	; 0x05
    3876:	db 87       	std	Y+11, r29	; 0x0b
    3878:	ca 87       	std	Y+10, r28	; 0x0a
    387a:	b8 01       	movw	r22, r16
    387c:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <pxCurrentTimerList>
    3880:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <pxCurrentTimerList+0x1>
    3884:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    3888:	0a c0       	rjmp	.+20     	; 0x389e <prvSampleTimeNow+0xc0>
    388a:	c1 2c       	mov	r12, r1
    388c:	d1 2c       	mov	r13, r1
    388e:	76 01       	movw	r14, r12
    3890:	00 e0       	ldi	r16, 0x00	; 0
    3892:	10 e0       	ldi	r17, 0x00	; 0
    3894:	a5 01       	movw	r20, r10
    3896:	94 01       	movw	r18, r8
    3898:	60 e0       	ldi	r22, 0x00	; 0
    389a:	ce 01       	movw	r24, r28
    389c:	42 df       	rcall	.-380    	; 0x3722 <xTimerGenericCommand>
    389e:	e0 91 94 07 	lds	r30, 0x0794	; 0x800794 <pxCurrentTimerList>
    38a2:	f0 91 95 07 	lds	r31, 0x0795	; 0x800795 <pxCurrentTimerList+0x1>
    38a6:	80 81       	ld	r24, Z
    38a8:	81 11       	cpse	r24, r1
    38aa:	be cf       	rjmp	.-132    	; 0x3828 <prvSampleTimeNow+0x4a>
    38ac:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <pxOverflowTimerList>
    38b0:	90 91 93 07 	lds	r25, 0x0793	; 0x800793 <pxOverflowTimerList+0x1>
    38b4:	90 93 95 07 	sts	0x0795, r25	; 0x800795 <pxCurrentTimerList+0x1>
    38b8:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <pxCurrentTimerList>
    38bc:	f0 93 93 07 	sts	0x0793, r31	; 0x800793 <pxOverflowTimerList+0x1>
    38c0:	e0 93 92 07 	sts	0x0792, r30	; 0x800792 <pxOverflowTimerList>
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	f1 01       	movw	r30, r2
    38c8:	80 83       	st	Z, r24
    38ca:	02 c0       	rjmp	.+4      	; 0x38d0 <prvSampleTimeNow+0xf2>
    38cc:	f1 01       	movw	r30, r2
    38ce:	10 82       	st	Z, r1
    38d0:	40 92 8a 07 	sts	0x078A, r4	; 0x80078a <xLastTime.2378>
    38d4:	50 92 8b 07 	sts	0x078B, r5	; 0x80078b <xLastTime.2378+0x1>
    38d8:	60 92 8c 07 	sts	0x078C, r6	; 0x80078c <xLastTime.2378+0x2>
    38dc:	70 92 8d 07 	sts	0x078D, r7	; 0x80078d <xLastTime.2378+0x3>
    38e0:	c3 01       	movw	r24, r6
    38e2:	b2 01       	movw	r22, r4
    38e4:	df 91       	pop	r29
    38e6:	cf 91       	pop	r28
    38e8:	1f 91       	pop	r17
    38ea:	0f 91       	pop	r16
    38ec:	ff 90       	pop	r15
    38ee:	ef 90       	pop	r14
    38f0:	df 90       	pop	r13
    38f2:	cf 90       	pop	r12
    38f4:	bf 90       	pop	r11
    38f6:	af 90       	pop	r10
    38f8:	9f 90       	pop	r9
    38fa:	8f 90       	pop	r8
    38fc:	7f 90       	pop	r7
    38fe:	6f 90       	pop	r6
    3900:	5f 90       	pop	r5
    3902:	4f 90       	pop	r4
    3904:	3f 90       	pop	r3
    3906:	2f 90       	pop	r2
    3908:	08 95       	ret

0000390a <prvTimerTask>:
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
    3912:	60 97       	sbiw	r28, 0x10	; 16
    3914:	0f b6       	in	r0, 0x3f	; 63
    3916:	f8 94       	cli
    3918:	de bf       	out	0x3e, r29	; 62
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	cd bf       	out	0x3d, r28	; 61
    391e:	ce 01       	movw	r24, r28
    3920:	01 96       	adiw	r24, 0x01	; 1
    3922:	9a 87       	std	Y+10, r25	; 0x0a
    3924:	89 87       	std	Y+9, r24	; 0x09
    3926:	81 2c       	mov	r8, r1
    3928:	91 2c       	mov	r9, r1
    392a:	a1 2c       	mov	r10, r1
    392c:	b1 2c       	mov	r11, r1
    392e:	69 84       	ldd	r6, Y+9	; 0x09
    3930:	7a 84       	ldd	r7, Y+10	; 0x0a
    3932:	e0 91 94 07 	lds	r30, 0x0794	; 0x800794 <pxCurrentTimerList>
    3936:	f0 91 95 07 	lds	r31, 0x0795	; 0x800795 <pxCurrentTimerList+0x1>
    393a:	80 81       	ld	r24, Z
    393c:	88 23       	and	r24, r24
    393e:	09 f4       	brne	.+2      	; 0x3942 <prvTimerTask+0x38>
    3940:	f2 c0       	rjmp	.+484    	; 0x3b26 <prvTimerTask+0x21c>
    3942:	07 80       	ldd	r0, Z+7	; 0x07
    3944:	f0 85       	ldd	r31, Z+8	; 0x08
    3946:	e0 2d       	mov	r30, r0
    3948:	20 80       	ld	r2, Z
    394a:	31 80       	ldd	r3, Z+1	; 0x01
    394c:	42 80       	ldd	r4, Z+2	; 0x02
    394e:	53 80       	ldd	r5, Z+3	; 0x03
    3950:	e2 d9       	rcall	.-3132   	; 0x2d16 <vTaskSuspendAll>
    3952:	ce 01       	movw	r24, r28
    3954:	01 96       	adiw	r24, 0x01	; 1
    3956:	43 df       	rcall	.-378    	; 0x37de <prvSampleTimeNow>
    3958:	6b 87       	std	Y+11, r22	; 0x0b
    395a:	7c 87       	std	Y+12, r23	; 0x0c
    395c:	8d 87       	std	Y+13, r24	; 0x0d
    395e:	9e 87       	std	Y+14, r25	; 0x0e
    3960:	89 81       	ldd	r24, Y+1	; 0x01
    3962:	81 11       	cpse	r24, r1
    3964:	5d c0       	rjmp	.+186    	; 0x3a20 <prvTimerTask+0x116>
    3966:	8b 85       	ldd	r24, Y+11	; 0x0b
    3968:	9c 85       	ldd	r25, Y+12	; 0x0c
    396a:	ad 85       	ldd	r26, Y+13	; 0x0d
    396c:	be 85       	ldd	r27, Y+14	; 0x0e
    396e:	82 15       	cp	r24, r2
    3970:	93 05       	cpc	r25, r3
    3972:	a4 05       	cpc	r26, r4
    3974:	b5 05       	cpc	r27, r5
    3976:	08 f4       	brcc	.+2      	; 0x397a <prvTimerTask+0x70>
    3978:	3c c0       	rjmp	.+120    	; 0x39f2 <prvTimerTask+0xe8>
    397a:	b6 da       	rcall	.-2708   	; 0x2ee8 <xTaskResumeAll>
    397c:	e0 91 94 07 	lds	r30, 0x0794	; 0x800794 <pxCurrentTimerList>
    3980:	f0 91 95 07 	lds	r31, 0x0795	; 0x800795 <pxCurrentTimerList+0x1>
    3984:	07 80       	ldd	r0, Z+7	; 0x07
    3986:	f0 85       	ldd	r31, Z+8	; 0x08
    3988:	e0 2d       	mov	r30, r0
    398a:	a0 85       	ldd	r26, Z+8	; 0x08
    398c:	b1 85       	ldd	r27, Z+9	; 0x09
    398e:	b8 8b       	std	Y+16, r27	; 0x10
    3990:	af 87       	std	Y+15, r26	; 0x0f
    3992:	cd 01       	movw	r24, r26
    3994:	02 96       	adiw	r24, 0x02	; 2
    3996:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    399a:	ef 85       	ldd	r30, Y+15	; 0x0f
    399c:	f8 89       	ldd	r31, Y+16	; 0x10
    399e:	82 89       	ldd	r24, Z+18	; 0x12
    39a0:	81 30       	cpi	r24, 0x01	; 1
    39a2:	f1 f4       	brne	.+60     	; 0x39e0 <prvTimerTask+0xd6>
    39a4:	46 85       	ldd	r20, Z+14	; 0x0e
    39a6:	57 85       	ldd	r21, Z+15	; 0x0f
    39a8:	60 89       	ldd	r22, Z+16	; 0x10
    39aa:	71 89       	ldd	r23, Z+17	; 0x11
    39ac:	42 0d       	add	r20, r2
    39ae:	53 1d       	adc	r21, r3
    39b0:	64 1d       	adc	r22, r4
    39b2:	75 1d       	adc	r23, r5
    39b4:	72 01       	movw	r14, r4
    39b6:	61 01       	movw	r12, r2
    39b8:	0b 85       	ldd	r16, Y+11	; 0x0b
    39ba:	1c 85       	ldd	r17, Y+12	; 0x0c
    39bc:	2d 85       	ldd	r18, Y+13	; 0x0d
    39be:	3e 85       	ldd	r19, Y+14	; 0x0e
    39c0:	cf 01       	movw	r24, r30
    39c2:	e6 dd       	rcall	.-1076   	; 0x3590 <prvInsertTimerInActiveList>
    39c4:	88 23       	and	r24, r24
    39c6:	61 f0       	breq	.+24     	; 0x39e0 <prvTimerTask+0xd6>
    39c8:	c8 2c       	mov	r12, r8
    39ca:	d9 2c       	mov	r13, r9
    39cc:	ea 2c       	mov	r14, r10
    39ce:	fb 2c       	mov	r15, r11
    39d0:	00 e0       	ldi	r16, 0x00	; 0
    39d2:	10 e0       	ldi	r17, 0x00	; 0
    39d4:	a2 01       	movw	r20, r4
    39d6:	91 01       	movw	r18, r2
    39d8:	60 e0       	ldi	r22, 0x00	; 0
    39da:	8f 85       	ldd	r24, Y+15	; 0x0f
    39dc:	98 89       	ldd	r25, Y+16	; 0x10
    39de:	a1 de       	rcall	.-702    	; 0x3722 <xTimerGenericCommand>
    39e0:	af 85       	ldd	r26, Y+15	; 0x0f
    39e2:	b8 89       	ldd	r27, Y+16	; 0x10
    39e4:	55 96       	adiw	r26, 0x15	; 21
    39e6:	ed 91       	ld	r30, X+
    39e8:	fc 91       	ld	r31, X
    39ea:	56 97       	sbiw	r26, 0x16	; 22
    39ec:	cd 01       	movw	r24, r26
    39ee:	19 95       	eicall
    39f0:	8b c0       	rjmp	.+278    	; 0x3b08 <prvTimerTask+0x1fe>
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	b2 01       	movw	r22, r4
    39f6:	a1 01       	movw	r20, r2
    39f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    39fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    39fc:	ad 85       	ldd	r26, Y+13	; 0x0d
    39fe:	be 85       	ldd	r27, Y+14	; 0x0e
    3a00:	48 1b       	sub	r20, r24
    3a02:	59 0b       	sbc	r21, r25
    3a04:	6a 0b       	sbc	r22, r26
    3a06:	7b 0b       	sbc	r23, r27
    3a08:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <xTimerQueue>
    3a0c:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <xTimerQueue+0x1>
    3a10:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <vQueueWaitForMessageRestricted>
    3a14:	69 da       	rcall	.-2862   	; 0x2ee8 <xTaskResumeAll>
    3a16:	81 11       	cpse	r24, r1
    3a18:	77 c0       	rjmp	.+238    	; 0x3b08 <prvTimerTask+0x1fe>
    3a1a:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3a1e:	74 c0       	rjmp	.+232    	; 0x3b08 <prvTimerTask+0x1fe>
    3a20:	63 da       	rcall	.-2874   	; 0x2ee8 <xTaskResumeAll>
    3a22:	72 c0       	rjmp	.+228    	; 0x3b08 <prvTimerTask+0x1fe>
    3a24:	89 81       	ldd	r24, Y+1	; 0x01
    3a26:	88 23       	and	r24, r24
    3a28:	0c f4       	brge	.+2      	; 0x3a2c <prvTimerTask+0x122>
    3a2a:	6e c0       	rjmp	.+220    	; 0x3b08 <prvTimerTask+0x1fe>
    3a2c:	4e 80       	ldd	r4, Y+6	; 0x06
    3a2e:	5f 80       	ldd	r5, Y+7	; 0x07
    3a30:	d2 01       	movw	r26, r4
    3a32:	1c 96       	adiw	r26, 0x0c	; 12
    3a34:	8d 91       	ld	r24, X+
    3a36:	9c 91       	ld	r25, X
    3a38:	1d 97       	sbiw	r26, 0x0d	; 13
    3a3a:	89 2b       	or	r24, r25
    3a3c:	21 f0       	breq	.+8      	; 0x3a46 <prvTimerTask+0x13c>
    3a3e:	c2 01       	movw	r24, r4
    3a40:	02 96       	adiw	r24, 0x02	; 2
    3a42:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3a46:	ce 01       	movw	r24, r28
    3a48:	08 96       	adiw	r24, 0x08	; 8
    3a4a:	c9 de       	rcall	.-622    	; 0x37de <prvSampleTimeNow>
    3a4c:	8b 01       	movw	r16, r22
    3a4e:	9c 01       	movw	r18, r24
    3a50:	89 81       	ldd	r24, Y+1	; 0x01
    3a52:	08 2e       	mov	r0, r24
    3a54:	00 0c       	add	r0, r0
    3a56:	99 0b       	sbc	r25, r25
    3a58:	aa 0b       	sbc	r26, r26
    3a5a:	bb 0b       	sbc	r27, r27
    3a5c:	8a 30       	cpi	r24, 0x0A	; 10
    3a5e:	91 05       	cpc	r25, r1
    3a60:	08 f0       	brcs	.+2      	; 0x3a64 <prvTimerTask+0x15a>
    3a62:	52 c0       	rjmp	.+164    	; 0x3b08 <prvTimerTask+0x1fe>
    3a64:	fc 01       	movw	r30, r24
    3a66:	88 27       	eor	r24, r24
    3a68:	ee 56       	subi	r30, 0x6E	; 110
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a6e:	0c 94 44 58 	jmp	0xb088	; 0xb088 <__tablejump2__>
    3a72:	ca 80       	ldd	r12, Y+2	; 0x02
    3a74:	db 80       	ldd	r13, Y+3	; 0x03
    3a76:	ec 80       	ldd	r14, Y+4	; 0x04
    3a78:	fd 80       	ldd	r15, Y+5	; 0x05
    3a7a:	f2 01       	movw	r30, r4
    3a7c:	46 85       	ldd	r20, Z+14	; 0x0e
    3a7e:	57 85       	ldd	r21, Z+15	; 0x0f
    3a80:	60 89       	ldd	r22, Z+16	; 0x10
    3a82:	71 89       	ldd	r23, Z+17	; 0x11
    3a84:	4c 0d       	add	r20, r12
    3a86:	5d 1d       	adc	r21, r13
    3a88:	6e 1d       	adc	r22, r14
    3a8a:	7f 1d       	adc	r23, r15
    3a8c:	c2 01       	movw	r24, r4
    3a8e:	80 dd       	rcall	.-1280   	; 0x3590 <prvInsertTimerInActiveList>
    3a90:	88 23       	and	r24, r24
    3a92:	d1 f1       	breq	.+116    	; 0x3b08 <prvTimerTask+0x1fe>
    3a94:	d2 01       	movw	r26, r4
    3a96:	55 96       	adiw	r26, 0x15	; 21
    3a98:	ed 91       	ld	r30, X+
    3a9a:	fc 91       	ld	r31, X
    3a9c:	56 97       	sbiw	r26, 0x16	; 22
    3a9e:	c2 01       	movw	r24, r4
    3aa0:	19 95       	eicall
    3aa2:	f2 01       	movw	r30, r4
    3aa4:	82 89       	ldd	r24, Z+18	; 0x12
    3aa6:	81 30       	cpi	r24, 0x01	; 1
    3aa8:	79 f5       	brne	.+94     	; 0x3b08 <prvTimerTask+0x1fe>
    3aaa:	4a 81       	ldd	r20, Y+2	; 0x02
    3aac:	5b 81       	ldd	r21, Y+3	; 0x03
    3aae:	6c 81       	ldd	r22, Y+4	; 0x04
    3ab0:	7d 81       	ldd	r23, Y+5	; 0x05
    3ab2:	86 85       	ldd	r24, Z+14	; 0x0e
    3ab4:	97 85       	ldd	r25, Z+15	; 0x0f
    3ab6:	a0 89       	ldd	r26, Z+16	; 0x10
    3ab8:	b1 89       	ldd	r27, Z+17	; 0x11
    3aba:	9a 01       	movw	r18, r20
    3abc:	ab 01       	movw	r20, r22
    3abe:	28 0f       	add	r18, r24
    3ac0:	39 1f       	adc	r19, r25
    3ac2:	4a 1f       	adc	r20, r26
    3ac4:	5b 1f       	adc	r21, r27
    3ac6:	c8 2c       	mov	r12, r8
    3ac8:	d9 2c       	mov	r13, r9
    3aca:	ea 2c       	mov	r14, r10
    3acc:	fb 2c       	mov	r15, r11
    3ace:	00 e0       	ldi	r16, 0x00	; 0
    3ad0:	10 e0       	ldi	r17, 0x00	; 0
    3ad2:	60 e0       	ldi	r22, 0x00	; 0
    3ad4:	c2 01       	movw	r24, r4
    3ad6:	25 de       	rcall	.-950    	; 0x3722 <xTimerGenericCommand>
    3ad8:	17 c0       	rjmp	.+46     	; 0x3b08 <prvTimerTask+0x1fe>
    3ada:	4a 81       	ldd	r20, Y+2	; 0x02
    3adc:	5b 81       	ldd	r21, Y+3	; 0x03
    3ade:	6c 81       	ldd	r22, Y+4	; 0x04
    3ae0:	7d 81       	ldd	r23, Y+5	; 0x05
    3ae2:	d2 01       	movw	r26, r4
    3ae4:	1e 96       	adiw	r26, 0x0e	; 14
    3ae6:	4d 93       	st	X+, r20
    3ae8:	5d 93       	st	X+, r21
    3aea:	6d 93       	st	X+, r22
    3aec:	7c 93       	st	X, r23
    3aee:	51 97       	sbiw	r26, 0x11	; 17
    3af0:	40 0f       	add	r20, r16
    3af2:	51 1f       	adc	r21, r17
    3af4:	62 1f       	adc	r22, r18
    3af6:	73 1f       	adc	r23, r19
    3af8:	68 01       	movw	r12, r16
    3afa:	79 01       	movw	r14, r18
    3afc:	c2 01       	movw	r24, r4
    3afe:	48 dd       	rcall	.-1392   	; 0x3590 <prvInsertTimerInActiveList>
    3b00:	03 c0       	rjmp	.+6      	; 0x3b08 <prvTimerTask+0x1fe>
    3b02:	c2 01       	movw	r24, r4
    3b04:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vPortFree>
    3b08:	28 2d       	mov	r18, r8
    3b0a:	39 2d       	mov	r19, r9
    3b0c:	4a 2d       	mov	r20, r10
    3b0e:	5b 2d       	mov	r21, r11
    3b10:	66 2d       	mov	r22, r6
    3b12:	77 2d       	mov	r23, r7
    3b14:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <xTimerQueue>
    3b18:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <xTimerQueue+0x1>
    3b1c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <xQueueReceive>
    3b20:	81 11       	cpse	r24, r1
    3b22:	80 cf       	rjmp	.-256    	; 0x3a24 <prvTimerTask+0x11a>
    3b24:	06 cf       	rjmp	.-500    	; 0x3932 <prvTimerTask+0x28>
    3b26:	f7 d8       	rcall	.-3602   	; 0x2d16 <vTaskSuspendAll>
    3b28:	ce 01       	movw	r24, r28
    3b2a:	01 96       	adiw	r24, 0x01	; 1
    3b2c:	58 de       	rcall	.-848    	; 0x37de <prvSampleTimeNow>
    3b2e:	6b 87       	std	Y+11, r22	; 0x0b
    3b30:	7c 87       	std	Y+12, r23	; 0x0c
    3b32:	8d 87       	std	Y+13, r24	; 0x0d
    3b34:	9e 87       	std	Y+14, r25	; 0x0e
    3b36:	89 81       	ldd	r24, Y+1	; 0x01
    3b38:	81 11       	cpse	r24, r1
    3b3a:	72 cf       	rjmp	.-284    	; 0x3a20 <prvTimerTask+0x116>
    3b3c:	e0 91 92 07 	lds	r30, 0x0792	; 0x800792 <pxOverflowTimerList>
    3b40:	f0 91 93 07 	lds	r31, 0x0793	; 0x800793 <pxOverflowTimerList+0x1>
    3b44:	80 81       	ld	r24, Z
    3b46:	21 e0       	ldi	r18, 0x01	; 1
    3b48:	81 11       	cpse	r24, r1
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	28 2c       	mov	r2, r8
    3b4e:	39 2c       	mov	r3, r9
    3b50:	4a 2c       	mov	r4, r10
    3b52:	5b 2c       	mov	r5, r11
    3b54:	4f cf       	rjmp	.-354    	; 0x39f4 <prvTimerTask+0xea>

00003b56 <xTimerIsTimerActive>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
    3b56:	fc 01       	movw	r30, r24
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
    3b58:	0f b6       	in	r0, 0x3f	; 63
    3b5a:	f8 94       	cli
    3b5c:	0f 92       	push	r0
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	24 85       	ldd	r18, Z+12	; 0x0c
    3b62:	35 85       	ldd	r19, Z+13	; 0x0d
    3b64:	23 2b       	or	r18, r19
    3b66:	09 f4       	brne	.+2      	; 0x3b6a <xTimerIsTimerActive+0x14>
    3b68:	80 e0       	ldi	r24, 0x00	; 0
	}
	taskEXIT_CRITICAL();
    3b6a:	0f 90       	pop	r0
    3b6c:	0f be       	out	0x3f, r0	; 63

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
    3b6e:	08 95       	ret

00003b70 <pvTimerGetTimerID>:
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
    3b70:	0f b6       	in	r0, 0x3f	; 63
    3b72:	f8 94       	cli
    3b74:	0f 92       	push	r0
	{
		pvReturn = pxTimer->pvTimerID;
    3b76:	fc 01       	movw	r30, r24
    3b78:	83 89       	ldd	r24, Z+19	; 0x13
    3b7a:	94 89       	ldd	r25, Z+20	; 0x14
	}
	taskEXIT_CRITICAL();
    3b7c:	0f 90       	pop	r0
    3b7e:	0f be       	out	0x3f, r0	; 63

	return pvReturn;
}
    3b80:	08 95       	ret

00003b82 <Defrost>:
{
	
while(1){
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
    3b82:	c4 e9       	ldi	r28, 0x94	; 148
    3b84:	d9 e0       	ldi	r29, 0x09	; 9
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Temp_Out<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3b86:	04 ef       	ldi	r16, 0xF4	; 244
    3b88:	19 e0       	ldi	r17, 0x09	; 9
				if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
				else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3b8a:	0f 2e       	mov	r0, r31
    3b8c:	fe e3       	ldi	r31, 0x3E	; 62
    3b8e:	cf 2e       	mov	r12, r31
    3b90:	f2 e0       	ldi	r31, 0x02	; 2
    3b92:	df 2e       	mov	r13, r31
    3b94:	f0 2d       	mov	r31, r0
    3b96:	0f 2e       	mov	r0, r31
    3b98:	f2 e3       	ldi	r31, 0x32	; 50
    3b9a:	ef 2e       	mov	r14, r31
    3b9c:	f8 e0       	ldi	r31, 0x08	; 8
    3b9e:	ff 2e       	mov	r15, r31
    3ba0:	f0 2d       	mov	r31, r0
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Temp_Out<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3ba2:	0f 2e       	mov	r0, r31
    3ba4:	f2 e4       	ldi	r31, 0x42	; 66
    3ba6:	8f 2e       	mov	r8, r31
    3ba8:	fa e0       	ldi	r31, 0x0A	; 10
    3baa:	9f 2e       	mov	r9, r31
    3bac:	f0 2d       	mov	r31, r0
    3bae:	33 24       	eor	r3, r3
    3bb0:	33 94       	inc	r3
while(1){
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
    3bb2:	0f 2e       	mov	r0, r31
    3bb4:	f3 e2       	ldi	r31, 0x23	; 35
    3bb6:	af 2e       	mov	r10, r31
    3bb8:	f2 e0       	ldi	r31, 0x02	; 2
    3bba:	bf 2e       	mov	r11, r31
    3bbc:	f0 2d       	mov	r31, r0
//////////////////////////////////////////////////
static void Defrost(void *pvParameters)
{
	
while(1){
			wdt_reset();
    3bbe:	a8 95       	wdr
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
    3bc0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bc2:	81 30       	cpi	r24, 0x01	; 1
    3bc4:	09 f0       	breq	.+2      	; 0x3bc8 <Defrost+0x46>
    3bc6:	d1 c0       	rjmp	.+418    	; 0x3d6a <Defrost+0x1e8>
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
    3bc8:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <forsDefrost>
    3bcc:	81 30       	cpi	r24, 0x01	; 1
    3bce:	91 f4       	brne	.+36     	; 0x3bf4 <Defrost+0x72>
    3bd0:	be 01       	movw	r22, r28
    3bd2:	c8 01       	movw	r24, r16
    3bd4:	0e 94 be 32 	call	0x657c	; 0x657c <startDefrost>
    3bd8:	f8 01       	movw	r30, r16
    3bda:	31 86       	std	Z+9, r3	; 0x09
    3bdc:	10 92 ad 07 	sts	0x07AD, r1	; 0x8007ad <forsDefrost>
    3be0:	bf 92       	push	r11
    3be2:	af 92       	push	r10
    3be4:	ff 92       	push	r15
    3be6:	ef 92       	push	r14
    3be8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3bec:	0f 90       	pop	r0
    3bee:	0f 90       	pop	r0
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Temp_Out<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3bf4:	f8 01       	movw	r30, r16
    3bf6:	81 85       	ldd	r24, Z+9	; 0x09
    3bf8:	81 11       	cpse	r24, r1
    3bfa:	4a c0       	rjmp	.+148    	; 0x3c90 <Defrost+0x10e>
    3bfc:	92 d8       	rcall	.-3804   	; 0x2d22 <xTaskGetTickCount>
    3bfe:	40 90 75 09 	lds	r4, 0x0975	; 0x800975 <timeTillDef>
    3c02:	50 90 76 09 	lds	r5, 0x0976	; 0x800976 <timeTillDef+0x1>
    3c06:	60 90 77 09 	lds	r6, 0x0977	; 0x800977 <timeTillDef+0x2>
    3c0a:	70 90 78 09 	lds	r7, 0x0978	; 0x800978 <timeTillDef+0x3>
    3c0e:	9b 01       	movw	r18, r22
    3c10:	ac 01       	movw	r20, r24
    3c12:	24 19       	sub	r18, r4
    3c14:	35 09       	sbc	r19, r5
    3c16:	46 09       	sbc	r20, r6
    3c18:	57 09       	sbc	r21, r7
    3c1a:	29 01       	movw	r4, r18
    3c1c:	3a 01       	movw	r6, r20
    3c1e:	2a a1       	ldd	r18, Y+34	; 0x22
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	a0 e6       	ldi	r26, 0x60	; 96
    3c24:	ba ee       	ldi	r27, 0xEA	; 234
    3c26:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    3c2a:	64 15       	cp	r22, r4
    3c2c:	75 05       	cpc	r23, r5
    3c2e:	86 05       	cpc	r24, r6
    3c30:	97 05       	cpc	r25, r7
    3c32:	48 f5       	brcc	.+82     	; 0x3c86 <Defrost+0x104>
    3c34:	6a a5       	ldd	r22, Y+42	; 0x2a
    3c36:	7b a5       	ldd	r23, Y+43	; 0x2b
    3c38:	07 2e       	mov	r0, r23
    3c3a:	00 0c       	add	r0, r0
    3c3c:	88 0b       	sbc	r24, r24
    3c3e:	99 0b       	sbc	r25, r25
    3c40:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    3c44:	9b 01       	movw	r18, r22
    3c46:	ac 01       	movw	r20, r24
    3c48:	f4 01       	movw	r30, r8
    3c4a:	60 81       	ld	r22, Z
    3c4c:	71 81       	ldd	r23, Z+1	; 0x01
    3c4e:	82 81       	ldd	r24, Z+2	; 0x02
    3c50:	93 81       	ldd	r25, Z+3	; 0x03
    3c52:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    3c56:	88 23       	and	r24, r24
    3c58:	b4 f4       	brge	.+44     	; 0x3c86 <Defrost+0x104>
    3c5a:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <forsDefrost>
    3c5e:	81 11       	cpse	r24, r1
    3c60:	12 c0       	rjmp	.+36     	; 0x3c86 <Defrost+0x104>
    3c62:	be 01       	movw	r22, r28
    3c64:	c8 01       	movw	r24, r16
    3c66:	0e 94 be 32 	call	0x657c	; 0x657c <startDefrost>
    3c6a:	f8 01       	movw	r30, r16
    3c6c:	31 86       	std	Z+9, r3	; 0x09
    3c6e:	23 e3       	ldi	r18, 0x33	; 51
    3c70:	32 e0       	ldi	r19, 0x02	; 2
    3c72:	3f 93       	push	r19
    3c74:	2f 93       	push	r18
    3c76:	ff 92       	push	r15
    3c78:	ef 92       	push	r14
    3c7a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3c7e:	0f 90       	pop	r0
    3c80:	0f 90       	pop	r0
    3c82:	0f 90       	pop	r0
    3c84:	0f 90       	pop	r0
				if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3c86:	f8 01       	movw	r30, r16
    3c88:	81 85       	ldd	r24, Z+9	; 0x09
    3c8a:	88 23       	and	r24, r24
    3c8c:	09 f4       	brne	.+2      	; 0x3c90 <Defrost+0x10e>
    3c8e:	6d c0       	rjmp	.+218    	; 0x3d6a <Defrost+0x1e8>
    3c90:	48 d8       	rcall	.-3952   	; 0x2d22 <xTaskGetTickCount>
    3c92:	40 90 75 09 	lds	r4, 0x0975	; 0x800975 <timeTillDef>
    3c96:	50 90 76 09 	lds	r5, 0x0976	; 0x800976 <timeTillDef+0x1>
    3c9a:	60 90 77 09 	lds	r6, 0x0977	; 0x800977 <timeTillDef+0x2>
    3c9e:	70 90 78 09 	lds	r7, 0x0978	; 0x800978 <timeTillDef+0x3>
    3ca2:	9b 01       	movw	r18, r22
    3ca4:	ac 01       	movw	r20, r24
    3ca6:	24 19       	sub	r18, r4
    3ca8:	35 09       	sbc	r19, r5
    3caa:	46 09       	sbc	r20, r6
    3cac:	57 09       	sbc	r21, r7
    3cae:	29 01       	movw	r4, r18
    3cb0:	3a 01       	movw	r6, r20
    3cb2:	29 a1       	ldd	r18, Y+33	; 0x21
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	a0 e6       	ldi	r26, 0x60	; 96
    3cb8:	ba ee       	ldi	r27, 0xEA	; 234
    3cba:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    3cbe:	64 15       	cp	r22, r4
    3cc0:	75 05       	cpc	r23, r5
    3cc2:	86 05       	cpc	r24, r6
    3cc4:	97 05       	cpc	r25, r7
    3cc6:	f8 f4       	brcc	.+62     	; 0x3d06 <Defrost+0x184>
    3cc8:	f8 01       	movw	r30, r16
    3cca:	82 85       	ldd	r24, Z+10	; 0x0a
    3ccc:	88 23       	and	r24, r24
    3cce:	d9 f0       	breq	.+54     	; 0x3d06 <Defrost+0x184>
    3cd0:	be 01       	movw	r22, r28
    3cd2:	c8 01       	movw	r24, r16
    3cd4:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <stopDefrost>
    3cd8:	f8 01       	movw	r30, r16
    3cda:	11 86       	std	Z+9, r1	; 0x09
    3cdc:	12 86       	std	Z+10, r1	; 0x0a
    3cde:	21 d8       	rcall	.-4030   	; 0x2d22 <xTaskGetTickCount>
    3ce0:	60 93 75 09 	sts	0x0975, r22	; 0x800975 <timeTillDef>
    3ce4:	70 93 76 09 	sts	0x0976, r23	; 0x800976 <timeTillDef+0x1>
    3ce8:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <timeTillDef+0x2>
    3cec:	90 93 78 09 	sts	0x0978, r25	; 0x800978 <timeTillDef+0x3>
    3cf0:	df 92       	push	r13
    3cf2:	cf 92       	push	r12
    3cf4:	ff 92       	push	r15
    3cf6:	ef 92       	push	r14
    3cf8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3cfc:	0f 90       	pop	r0
    3cfe:	0f 90       	pop	r0
    3d00:	0f 90       	pop	r0
    3d02:	0f 90       	pop	r0
    3d04:	32 c0       	rjmp	.+100    	; 0x3d6a <Defrost+0x1e8>
				else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3d06:	f8 01       	movw	r30, r16
    3d08:	81 85       	ldd	r24, Z+9	; 0x09
    3d0a:	88 23       	and	r24, r24
    3d0c:	71 f1       	breq	.+92     	; 0x3d6a <Defrost+0x1e8>
    3d0e:	6c a5       	ldd	r22, Y+44	; 0x2c
    3d10:	7d a5       	ldd	r23, Y+45	; 0x2d
    3d12:	07 2e       	mov	r0, r23
    3d14:	00 0c       	add	r0, r0
    3d16:	88 0b       	sbc	r24, r24
    3d18:	99 0b       	sbc	r25, r25
    3d1a:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    3d1e:	9b 01       	movw	r18, r22
    3d20:	ac 01       	movw	r20, r24
    3d22:	f8 01       	movw	r30, r16
    3d24:	62 a9       	ldd	r22, Z+50	; 0x32
    3d26:	73 a9       	ldd	r23, Z+51	; 0x33
    3d28:	84 a9       	ldd	r24, Z+52	; 0x34
    3d2a:	95 a9       	ldd	r25, Z+53	; 0x35
    3d2c:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    3d30:	18 16       	cp	r1, r24
    3d32:	dc f4       	brge	.+54     	; 0x3d6a <Defrost+0x1e8>
    3d34:	be 01       	movw	r22, r28
    3d36:	c8 01       	movw	r24, r16
    3d38:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <stopDefrost>
    3d3c:	f8 01       	movw	r30, r16
    3d3e:	11 86       	std	Z+9, r1	; 0x09
    3d40:	12 86       	std	Z+10, r1	; 0x0a
    3d42:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3d46:	60 93 75 09 	sts	0x0975, r22	; 0x800975 <timeTillDef>
    3d4a:	70 93 76 09 	sts	0x0976, r23	; 0x800976 <timeTillDef+0x1>
    3d4e:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <timeTillDef+0x2>
    3d52:	90 93 78 09 	sts	0x0978, r25	; 0x800978 <timeTillDef+0x3>
    3d56:	df 92       	push	r13
    3d58:	cf 92       	push	r12
    3d5a:	ff 92       	push	r15
    3d5c:	ef 92       	push	r14
    3d5e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3d62:	0f 90       	pop	r0
    3d64:	0f 90       	pop	r0
    3d66:	0f 90       	pop	r0
    3d68:	0f 90       	pop	r0
	
			}
			//xSerialxPrintf(&xSerial3Port,"defrost\r\n");
vTaskDelay(2000);
    3d6a:	60 ed       	ldi	r22, 0xD0	; 208
    3d6c:	77 e0       	ldi	r23, 0x07	; 7
    3d6e:	80 e0       	ldi	r24, 0x00	; 0
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	36 d9       	rcall	.-3476   	; 0x2fe0 <vTaskDelay>
//xSerialxPrintf(&xSerial3Port,"Stack_0 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
//portYIELD();			
}
    3d74:	24 cf       	rjmp	.-440    	; 0x3bbe <Defrost+0x3c>

00003d76 <System_2>:
ReadSensors(&Comp_2);
portEXIT_CRITICAL();
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3d76:	c4 e9       	ldi	r28, 0x94	; 148
    3d78:	d9 e0       	ldi	r29, 0x09	; 9
		{
			_err2=Check_Erors(&Comp_2,&EEpromData);
		
			if(_err2>0 && Comp_2.error==0){Comp_2.error=_err2;Comp_2.countError++;Comp_2.Steps=0;Comp_Stop(&Comp_2);xSerialxPrintf(&xSerial3Port,"error_2 =%d\r\n",Comp_2.error);}//if(Comp_2.countError==3)EEpromData.power=0;
			mod_pump(&Comp_2,&EEpromData);
	       if(Comp_2.checkTrv && xTaskGetTickCount()-countTrvTime_2>10000 ){Comp_2.Steps = Fuzzy(&Comp_2,EEpromData.trv_corection_2);countTrvTime_2=xTaskGetTickCount();}
    3d7a:	0f 2e       	mov	r0, r31
    3d7c:	fc ed       	ldi	r31, 0xDC	; 220
    3d7e:	4f 2e       	mov	r4, r31
    3d80:	f9 e0       	ldi	r31, 0x09	; 9
    3d82:	5f 2e       	mov	r5, r31
    3d84:	f0 2d       	mov	r31, r0
    3d86:	0f 2e       	mov	r0, r31
    3d88:	fa ee       	ldi	r31, 0xEA	; 234
    3d8a:	af 2e       	mov	r10, r31
    3d8c:	fa e0       	ldi	r31, 0x0A	; 10
    3d8e:	bf 2e       	mov	r11, r31
    3d90:	f0 2d       	mov	r31, r0
	
		if(Comp_2.suply && Comp_2.countError<3)
		{
			_err2=Check_Erors(&Comp_2,&EEpromData);
		
			if(_err2>0 && Comp_2.error==0){Comp_2.error=_err2;Comp_2.countError++;Comp_2.Steps=0;Comp_Stop(&Comp_2);xSerialxPrintf(&xSerial3Port,"error_2 =%d\r\n",Comp_2.error);}//if(Comp_2.countError==3)EEpromData.power=0;
    3d92:	0f 2e       	mov	r0, r31
    3d94:	fe ee       	ldi	r31, 0xEE	; 238
    3d96:	ef 2e       	mov	r14, r31
    3d98:	fa e0       	ldi	r31, 0x0A	; 10
    3d9a:	ff 2e       	mov	r15, r31
    3d9c:	f0 2d       	mov	r31, r0
    3d9e:	0f 2e       	mov	r0, r31
    3da0:	f5 e6       	ldi	r31, 0x65	; 101
    3da2:	6f 2e       	mov	r6, r31
    3da4:	f2 e0       	ldi	r31, 0x02	; 2
    3da6:	7f 2e       	mov	r7, r31
    3da8:	f0 2d       	mov	r31, r0
    3daa:	02 e3       	ldi	r16, 0x32	; 50
    3dac:	18 e0       	ldi	r17, 0x08	; 8
portEXIT_CRITICAL();
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
		else if(EEpromData.power==0 && Comp_2.suply){Comp_2.suply=false;Comp_2.error=0;_err2=0;Comp_2.countError=0; xSerialxPrintf(&xSerial3Port,"OFF_System_2\r\n");stopTrvTimer(&Comp_2);Comp_Stop(&Comp_2);}
    3dae:	0f 2e       	mov	r0, r31
    3db0:	f6 e5       	ldi	r31, 0x56	; 86
    3db2:	cf 2e       	mov	r12, r31
    3db4:	f2 e0       	ldi	r31, 0x02	; 2
    3db6:	df 2e       	mov	r13, r31
    3db8:	f0 2d       	mov	r31, r0
ReadSensors(&Comp_2);
portEXIT_CRITICAL();
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3dba:	33 24       	eor	r3, r3
    3dbc:	33 94       	inc	r3
    3dbe:	0f 2e       	mov	r0, r31
    3dc0:	f8 e4       	ldi	r31, 0x48	; 72
    3dc2:	8f 2e       	mov	r8, r31
    3dc4:	f2 e0       	ldi	r31, 0x02	; 2
    3dc6:	9f 2e       	mov	r9, r31
    3dc8:	f0 2d       	mov	r31, r0
	(void) pvParameters;

	while (1)
	{
		
    	wdt_reset();
    3dca:	a8 95       	wdr
		//xSerialxPrintf(&xSerial3Port,"System_2_task\r\n");
vTaskSuspend( xHandleFirst );				
    3dcc:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <xHandleFirst>
    3dd0:	90 91 bc 07 	lds	r25, 0x07BC	; 0x8007bc <xHandleFirst+0x1>
    3dd4:	90 d9       	rcall	.-3296   	; 0x30f6 <vTaskSuspend>
portENTER_CRITICAL();
    3dd6:	0f b6       	in	r0, 0x3f	; 63
    3dd8:	f8 94       	cli
    3dda:	0f 92       	push	r0
ReadSensors(&Comp_2);
    3ddc:	8e e7       	ldi	r24, 0x7E	; 126
    3dde:	9a e0       	ldi	r25, 0x0A	; 10
    3de0:	0e 94 f5 4a 	call	0x95ea	; 0x95ea <ReadSensors>
portEXIT_CRITICAL();
    3de4:	0f 90       	pop	r0
    3de6:	0f be       	out	0x3f, r0	; 63
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
    3de8:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <xHandleFirst>
    3dec:	90 91 bc 07 	lds	r25, 0x07BC	; 0x8007bc <xHandleFirst+0x1>
    3df0:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <vTaskResume>
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3df4:	8c a1       	ldd	r24, Y+36	; 0x24
    3df6:	81 30       	cpi	r24, 0x01	; 1
    3df8:	a9 f4       	brne	.+42     	; 0x3e24 <System_2+0xae>
    3dfa:	80 91 84 0a 	lds	r24, 0x0A84	; 0x800a84 <Comp_2+0x6>
    3dfe:	81 11       	cpse	r24, r1
    3e00:	3a c0       	rjmp	.+116    	; 0x3e76 <System_2+0x100>
    3e02:	80 91 7e 0a 	lds	r24, 0x0A7E	; 0x800a7e <Comp_2>
    3e06:	81 11       	cpse	r24, r1
    3e08:	9f c0       	rjmp	.+318    	; 0x3f48 <System_2+0x1d2>
    3e0a:	30 92 84 0a 	sts	0x0A84, r3	; 0x800a84 <Comp_2+0x6>
    3e0e:	9f 92       	push	r9
    3e10:	8f 92       	push	r8
    3e12:	1f 93       	push	r17
    3e14:	0f 93       	push	r16
    3e16:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3e1a:	0f 90       	pop	r0
    3e1c:	0f 90       	pop	r0
    3e1e:	0f 90       	pop	r0
    3e20:	0f 90       	pop	r0
    3e22:	24 c0       	rjmp	.+72     	; 0x3e6c <System_2+0xf6>
		else if(EEpromData.power==0 && Comp_2.suply){Comp_2.suply=false;Comp_2.error=0;_err2=0;Comp_2.countError=0; xSerialxPrintf(&xSerial3Port,"OFF_System_2\r\n");stopTrvTimer(&Comp_2);Comp_Stop(&Comp_2);}
    3e24:	81 11       	cpse	r24, r1
    3e26:	22 c0       	rjmp	.+68     	; 0x3e6c <System_2+0xf6>
    3e28:	80 91 84 0a 	lds	r24, 0x0A84	; 0x800a84 <Comp_2+0x6>
    3e2c:	88 23       	and	r24, r24
    3e2e:	09 f4       	brne	.+2      	; 0x3e32 <System_2+0xbc>
    3e30:	8b c0       	rjmp	.+278    	; 0x3f48 <System_2+0x1d2>
    3e32:	ee e7       	ldi	r30, 0x7E	; 126
    3e34:	fa e0       	ldi	r31, 0x0A	; 10
    3e36:	16 82       	std	Z+6, r1	; 0x06
    3e38:	d7 01       	movw	r26, r14
    3e3a:	1d 92       	st	X+, r1
    3e3c:	1c 92       	st	X, r1
    3e3e:	10 92 3a 0b 	sts	0x0B3A, r1	; 0x800b3a <_err2+0x1>
    3e42:	10 92 39 0b 	sts	0x0B39, r1	; 0x800b39 <_err2>
    3e46:	11 8a       	std	Z+17, r1	; 0x11
    3e48:	df 92       	push	r13
    3e4a:	cf 92       	push	r12
    3e4c:	1f 93       	push	r17
    3e4e:	0f 93       	push	r16
    3e50:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3e54:	8e e7       	ldi	r24, 0x7E	; 126
    3e56:	9a e0       	ldi	r25, 0x0A	; 10
    3e58:	0e 94 a6 4f 	call	0x9f4c	; 0x9f4c <stopTrvTimer>
    3e5c:	8e e7       	ldi	r24, 0x7E	; 126
    3e5e:	9a e0       	ldi	r25, 0x0A	; 10
    3e60:	0e 94 47 36 	call	0x6c8e	; 0x6c8e <Comp_Stop>
    3e64:	0f 90       	pop	r0
    3e66:	0f 90       	pop	r0
    3e68:	0f 90       	pop	r0
    3e6a:	0f 90       	pop	r0
	
		if(Comp_2.suply && Comp_2.countError<3)
    3e6c:	80 91 84 0a 	lds	r24, 0x0A84	; 0x800a84 <Comp_2+0x6>
    3e70:	88 23       	and	r24, r24
    3e72:	09 f4       	brne	.+2      	; 0x3e76 <System_2+0x100>
    3e74:	69 c0       	rjmp	.+210    	; 0x3f48 <System_2+0x1d2>
    3e76:	80 91 8f 0a 	lds	r24, 0x0A8F	; 0x800a8f <Comp_2+0x11>
    3e7a:	83 30       	cpi	r24, 0x03	; 3
    3e7c:	08 f0       	brcs	.+2      	; 0x3e80 <System_2+0x10a>
    3e7e:	64 c0       	rjmp	.+200    	; 0x3f48 <System_2+0x1d2>
		{
			_err2=Check_Erors(&Comp_2,&EEpromData);
    3e80:	be 01       	movw	r22, r28
    3e82:	8e e7       	ldi	r24, 0x7E	; 126
    3e84:	9a e0       	ldi	r25, 0x0A	; 10
    3e86:	5d d3       	rcall	.+1722   	; 0x4542 <Check_Erors>
    3e88:	90 93 3a 0b 	sts	0x0B3A, r25	; 0x800b3a <_err2+0x1>
    3e8c:	80 93 39 0b 	sts	0x0B39, r24	; 0x800b39 <_err2>
		
			if(_err2>0 && Comp_2.error==0){Comp_2.error=_err2;Comp_2.countError++;Comp_2.Steps=0;Comp_Stop(&Comp_2);xSerialxPrintf(&xSerial3Port,"error_2 =%d\r\n",Comp_2.error);}//if(Comp_2.countError==3)EEpromData.power=0;
    3e90:	18 16       	cp	r1, r24
    3e92:	19 06       	cpc	r1, r25
    3e94:	3c f5       	brge	.+78     	; 0x3ee4 <System_2+0x16e>
    3e96:	f7 01       	movw	r30, r14
    3e98:	20 81       	ld	r18, Z
    3e9a:	31 81       	ldd	r19, Z+1	; 0x01
    3e9c:	23 2b       	or	r18, r19
    3e9e:	11 f5       	brne	.+68     	; 0x3ee4 <System_2+0x16e>
    3ea0:	ee e7       	ldi	r30, 0x7E	; 126
    3ea2:	fa e0       	ldi	r31, 0x0A	; 10
    3ea4:	d7 01       	movw	r26, r14
    3ea6:	8d 93       	st	X+, r24
    3ea8:	9c 93       	st	X, r25
    3eaa:	81 89       	ldd	r24, Z+17	; 0x11
    3eac:	8f 5f       	subi	r24, 0xFF	; 255
    3eae:	81 8b       	std	Z+17, r24	; 0x11
    3eb0:	f5 01       	movw	r30, r10
    3eb2:	11 82       	std	Z+1, r1	; 0x01
    3eb4:	10 82       	st	Z, r1
    3eb6:	8e e7       	ldi	r24, 0x7E	; 126
    3eb8:	9a e0       	ldi	r25, 0x0A	; 10
    3eba:	0e 94 47 36 	call	0x6c8e	; 0x6c8e <Comp_Stop>
    3ebe:	d7 01       	movw	r26, r14
    3ec0:	11 96       	adiw	r26, 0x01	; 1
    3ec2:	8c 91       	ld	r24, X
    3ec4:	11 97       	sbiw	r26, 0x01	; 1
    3ec6:	8f 93       	push	r24
    3ec8:	8c 91       	ld	r24, X
    3eca:	8f 93       	push	r24
    3ecc:	7f 92       	push	r7
    3ece:	6f 92       	push	r6
    3ed0:	1f 93       	push	r17
    3ed2:	0f 93       	push	r16
    3ed4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3ed8:	0f 90       	pop	r0
    3eda:	0f 90       	pop	r0
    3edc:	0f 90       	pop	r0
    3ede:	0f 90       	pop	r0
    3ee0:	0f 90       	pop	r0
    3ee2:	0f 90       	pop	r0
			mod_pump(&Comp_2,&EEpromData);
    3ee4:	be 01       	movw	r22, r28
    3ee6:	8e e7       	ldi	r24, 0x7E	; 126
    3ee8:	9a e0       	ldi	r25, 0x0A	; 10
    3eea:	0e 94 4f 37 	call	0x6e9e	; 0x6e9e <mod_pump>
	       if(Comp_2.checkTrv && xTaskGetTickCount()-countTrvTime_2>10000 ){Comp_2.Steps = Fuzzy(&Comp_2,EEpromData.trv_corection_2);countTrvTime_2=xTaskGetTickCount();}
    3eee:	80 91 7f 0a 	lds	r24, 0x0A7F	; 0x800a7f <Comp_2+0x1>
    3ef2:	88 23       	and	r24, r24
    3ef4:	49 f1       	breq	.+82     	; 0x3f48 <System_2+0x1d2>
    3ef6:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3efa:	20 91 b1 07 	lds	r18, 0x07B1	; 0x8007b1 <countTrvTime_2>
    3efe:	30 91 b2 07 	lds	r19, 0x07B2	; 0x8007b2 <countTrvTime_2+0x1>
    3f02:	40 91 b3 07 	lds	r20, 0x07B3	; 0x8007b3 <countTrvTime_2+0x2>
    3f06:	50 91 b4 07 	lds	r21, 0x07B4	; 0x8007b4 <countTrvTime_2+0x3>
    3f0a:	dc 01       	movw	r26, r24
    3f0c:	cb 01       	movw	r24, r22
    3f0e:	82 1b       	sub	r24, r18
    3f10:	93 0b       	sbc	r25, r19
    3f12:	a4 0b       	sbc	r26, r20
    3f14:	b5 0b       	sbc	r27, r21
    3f16:	81 31       	cpi	r24, 0x11	; 17
    3f18:	97 42       	sbci	r25, 0x27	; 39
    3f1a:	a1 05       	cpc	r26, r1
    3f1c:	b1 05       	cpc	r27, r1
    3f1e:	a0 f0       	brcs	.+40     	; 0x3f48 <System_2+0x1d2>
    3f20:	d2 01       	movw	r26, r4
    3f22:	6d 91       	ld	r22, X+
    3f24:	7c 91       	ld	r23, X
    3f26:	8e e7       	ldi	r24, 0x7E	; 126
    3f28:	9a e0       	ldi	r25, 0x0A	; 10
    3f2a:	0e 94 f5 4f 	call	0x9fea	; 0x9fea <Fuzzy>
    3f2e:	f5 01       	movw	r30, r10
    3f30:	91 83       	std	Z+1, r25	; 0x01
    3f32:	80 83       	st	Z, r24
    3f34:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3f38:	60 93 b1 07 	sts	0x07B1, r22	; 0x8007b1 <countTrvTime_2>
    3f3c:	70 93 b2 07 	sts	0x07B2, r23	; 0x8007b2 <countTrvTime_2+0x1>
    3f40:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <countTrvTime_2+0x2>
    3f44:	90 93 b4 07 	sts	0x07B4, r25	; 0x8007b4 <countTrvTime_2+0x3>
		}

		vTaskDelay(1000);
    3f48:	68 ee       	ldi	r22, 0xE8	; 232
    3f4a:	73 e0       	ldi	r23, 0x03	; 3
    3f4c:	80 e0       	ldi	r24, 0x00	; 0
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	47 d8       	rcall	.-3954   	; 0x2fe0 <vTaskDelay>
		//xSerialxPrintf(&xSerial3Port,"Stack_2 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
		//portYIELD();
		//xSerialxPrintf(&xSerial3Port,"Stack2 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
	}
    3f52:	3b cf       	rjmp	.-394    	; 0x3dca <System_2+0x54>

00003f54 <System_1>:
portENTER_CRITICAL();
ReadSensors(&Comp_1);
portEXIT_CRITICAL();
//EEpromData.AireToWater==1 &&

		if(EEpromData.NombComp==2 )
    3f54:	c4 e9       	ldi	r28, 0x94	; 148
    3f56:	d9 e0       	ldi	r29, 0x09	; 9
			vTaskResume( xHandleSecond );
			stop_second=false;
			
		}
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
    3f58:	55 24       	eor	r5, r5
    3f5a:	53 94       	inc	r5
				
			if(_err1>0 && Comp_1.error==0){Comp_1.error=_err1;Comp_1.countError++;Comp_1.Steps=0;Comp_Stop(&Comp_1);xSerialxPrintf(&xSerial3Port,"error_1 =%d\r\n",Comp_1.error);}//
				
			 mod_pump(&Comp_1,&EEpromData);
			//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);
			if(Comp_1.checkTrv && xTaskGetTickCount()-countTrvTime_1>10000 ){Comp_1.Steps = Fuzzy(&Comp_1,EEpromData.trv_corection_1);countTrvTime_1=xTaskGetTickCount();}
    3f5c:	0f 2e       	mov	r0, r31
    3f5e:	f0 e6       	ldi	r31, 0x60	; 96
    3f60:	af 2e       	mov	r10, r31
    3f62:	fa e0       	ldi	r31, 0x0A	; 10
    3f64:	bf 2e       	mov	r11, r31
    3f66:	f0 2d       	mov	r31, r0
			
			}
			*/
			if(!init_system){_err1=Check_Erors(&Comp_1,&EEpromData);ADE7758_resetStatus();} else init_system=false;
				
			if(_err1>0 && Comp_1.error==0){Comp_1.error=_err1;Comp_1.countError++;Comp_1.Steps=0;Comp_Stop(&Comp_1);xSerialxPrintf(&xSerial3Port,"error_1 =%d\r\n",Comp_1.error);}//
    3f68:	04 e6       	ldi	r16, 0x64	; 100
    3f6a:	1a e0       	ldi	r17, 0x0A	; 10
    3f6c:	0f 2e       	mov	r0, r31
    3f6e:	f0 e9       	ldi	r31, 0x90	; 144
    3f70:	8f 2e       	mov	r8, r31
    3f72:	f2 e0       	ldi	r31, 0x02	; 2
    3f74:	9f 2e       	mov	r9, r31
    3f76:	f0 2d       	mov	r31, r0
    3f78:	0f 2e       	mov	r0, r31
    3f7a:	f2 e3       	ldi	r31, 0x32	; 50
    3f7c:	ef 2e       	mov	r14, r31
    3f7e:	f8 e0       	ldi	r31, 0x08	; 8
    3f80:	ff 2e       	mov	r15, r31
    3f82:	f0 2d       	mov	r31, r0
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
//xSerialxPrintf(&xSerial3Port,"temp_out =%f\r\n",Comp_1.Temp_Out);
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
		else if(EEpromData.power==0 && Comp_1.suply){Comp_1.suply=false;PORTA &= 0x0;Comp_1.error=0;_err1=0;Comp_1.countError=0;xSerialxPrintf(&xSerial3Port,"OFF_System_1\r\n"); stopTrvTimer(&Comp_1);Comp_Stop(&Comp_1);}
    3f84:	0f 2e       	mov	r0, r31
    3f86:	f1 e8       	ldi	r31, 0x81	; 129
    3f88:	cf 2e       	mov	r12, r31
    3f8a:	f2 e0       	ldi	r31, 0x02	; 2
    3f8c:	df 2e       	mov	r13, r31
    3f8e:	f0 2d       	mov	r31, r0
		}
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
//xSerialxPrintf(&xSerial3Port,"temp_out =%f\r\n",Comp_1.Temp_Out);
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
    3f90:	0f 2e       	mov	r0, r31
    3f92:	f3 e7       	ldi	r31, 0x73	; 115
    3f94:	6f 2e       	mov	r6, r31
    3f96:	f2 e0       	ldi	r31, 0x02	; 2
    3f98:	7f 2e       	mov	r7, r31
    3f9a:	f0 2d       	mov	r31, r0
	
	
	while (1)
	{

		wdt_reset();
    3f9c:	a8 95       	wdr
	//xSerialxPrintf(&xSerial3Port,"System_1_task\r\n");
vTaskSuspend( xHandleSecond );		
    3f9e:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <xHandleSecond>
    3fa2:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <xHandleSecond+0x1>
    3fa6:	a7 d8       	rcall	.-3762   	; 0x30f6 <vTaskSuspend>
portENTER_CRITICAL();
    3fa8:	0f b6       	in	r0, 0x3f	; 63
    3faa:	f8 94       	cli
    3fac:	0f 92       	push	r0
ReadSensors(&Comp_1);
    3fae:	84 ef       	ldi	r24, 0xF4	; 244
    3fb0:	99 e0       	ldi	r25, 0x09	; 9
    3fb2:	0e 94 f5 4a 	call	0x95ea	; 0x95ea <ReadSensors>
portEXIT_CRITICAL();
    3fb6:	0f 90       	pop	r0
    3fb8:	0f be       	out	0x3f, r0	; 63
//EEpromData.AireToWater==1 &&

		if(EEpromData.NombComp==2 )
    3fba:	88 a1       	ldd	r24, Y+32	; 0x20
    3fbc:	82 30       	cpi	r24, 0x02	; 2
    3fbe:	61 f4       	brne	.+24     	; 0x3fd8 <System_1+0x84>
		{
			vTaskResume( xHandleSecond );
    3fc0:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <xHandleSecond>
    3fc4:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <xHandleSecond+0x1>
    3fc8:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <vTaskResume>
			stop_second=false;
    3fcc:	10 92 4a 0b 	sts	0x0B4A, r1	; 0x800b4a <stop_second>
			
		}
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
    3fd0:	88 a1       	ldd	r24, Y+32	; 0x20
    3fd2:	81 30       	cpi	r24, 0x01	; 1
    3fd4:	69 f4       	brne	.+26     	; 0x3ff0 <System_1+0x9c>
    3fd6:	06 c0       	rjmp	.+12     	; 0x3fe4 <System_1+0x90>
    3fd8:	81 30       	cpi	r24, 0x01	; 1
    3fda:	51 f4       	brne	.+20     	; 0x3ff0 <System_1+0x9c>
    3fdc:	80 91 4a 0b 	lds	r24, 0x0B4A	; 0x800b4a <stop_second>
    3fe0:	81 11       	cpse	r24, r1
    3fe2:	06 c0       	rjmp	.+12     	; 0x3ff0 <System_1+0x9c>
    3fe4:	50 92 4a 0b 	sts	0x0B4A, r5	; 0x800b4a <stop_second>
    3fe8:	8e e7       	ldi	r24, 0x7E	; 126
    3fea:	9a e0       	ldi	r25, 0x0A	; 10
    3fec:	0e 94 47 36 	call	0x6c8e	; 0x6c8e <Comp_Stop>
//xSerialxPrintf(&xSerial3Port,"temp_out =%f\r\n",Comp_1.Temp_Out);
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
    3ff0:	8c a1       	ldd	r24, Y+36	; 0x24
    3ff2:	81 30       	cpi	r24, 0x01	; 1
    3ff4:	f9 f4       	brne	.+62     	; 0x4034 <System_1+0xe0>
    3ff6:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <Comp_1+0x6>
    3ffa:	81 11       	cpse	r24, r1
    3ffc:	46 c0       	rjmp	.+140    	; 0x408a <System_1+0x136>
    3ffe:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <Comp_1>
    4002:	81 11       	cpse	r24, r1
    4004:	b6 c0       	rjmp	.+364    	; 0x4172 <System_1+0x21e>
    4006:	50 92 fa 09 	sts	0x09FA, r5	; 0x8009fa <Comp_1+0x6>
    400a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    400e:	60 93 75 09 	sts	0x0975, r22	; 0x800975 <timeTillDef>
    4012:	70 93 76 09 	sts	0x0976, r23	; 0x800976 <timeTillDef+0x1>
    4016:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <timeTillDef+0x2>
    401a:	90 93 78 09 	sts	0x0978, r25	; 0x800978 <timeTillDef+0x3>
    401e:	7f 92       	push	r7
    4020:	6f 92       	push	r6
    4022:	ff 92       	push	r15
    4024:	ef 92       	push	r14
    4026:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    402a:	0f 90       	pop	r0
    402c:	0f 90       	pop	r0
    402e:	0f 90       	pop	r0
    4030:	0f 90       	pop	r0
    4032:	26 c0       	rjmp	.+76     	; 0x4080 <System_1+0x12c>
		else if(EEpromData.power==0 && Comp_1.suply){Comp_1.suply=false;PORTA &= 0x0;Comp_1.error=0;_err1=0;Comp_1.countError=0;xSerialxPrintf(&xSerial3Port,"OFF_System_1\r\n"); stopTrvTimer(&Comp_1);Comp_Stop(&Comp_1);}
    4034:	81 11       	cpse	r24, r1
    4036:	24 c0       	rjmp	.+72     	; 0x4080 <System_1+0x12c>
    4038:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <Comp_1+0x6>
    403c:	88 23       	and	r24, r24
    403e:	09 f4       	brne	.+2      	; 0x4042 <System_1+0xee>
    4040:	98 c0       	rjmp	.+304    	; 0x4172 <System_1+0x21e>
    4042:	e4 ef       	ldi	r30, 0xF4	; 244
    4044:	f9 e0       	ldi	r31, 0x09	; 9
    4046:	16 82       	std	Z+6, r1	; 0x06
    4048:	82 b1       	in	r24, 0x02	; 2
    404a:	12 b8       	out	0x02, r1	; 2
    404c:	d8 01       	movw	r26, r16
    404e:	1d 92       	st	X+, r1
    4050:	1c 92       	st	X, r1
    4052:	10 92 07 0b 	sts	0x0B07, r1	; 0x800b07 <_err1+0x1>
    4056:	10 92 06 0b 	sts	0x0B06, r1	; 0x800b06 <_err1>
    405a:	11 8a       	std	Z+17, r1	; 0x11
    405c:	df 92       	push	r13
    405e:	cf 92       	push	r12
    4060:	ff 92       	push	r15
    4062:	ef 92       	push	r14
    4064:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    4068:	84 ef       	ldi	r24, 0xF4	; 244
    406a:	99 e0       	ldi	r25, 0x09	; 9
    406c:	0e 94 a6 4f 	call	0x9f4c	; 0x9f4c <stopTrvTimer>
    4070:	84 ef       	ldi	r24, 0xF4	; 244
    4072:	99 e0       	ldi	r25, 0x09	; 9
    4074:	0e 94 47 36 	call	0x6c8e	; 0x6c8e <Comp_Stop>
    4078:	0f 90       	pop	r0
    407a:	0f 90       	pop	r0
    407c:	0f 90       	pop	r0
    407e:	0f 90       	pop	r0
		//xSerialxPrintf(&xSerial3Port,"mod =%d\r\n",EEpromData.AireToWater);
		//xSerialxPrintf(&xSerial3Port,"TimeBetweenDef =%d\r\n",EEpromData.TimeBetweenDef);
		
	
		
		if(Comp_1.suply &&  Comp_1.countError<3)
    4080:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <Comp_1+0x6>
    4084:	88 23       	and	r24, r24
    4086:	09 f4       	brne	.+2      	; 0x408a <System_1+0x136>
    4088:	74 c0       	rjmp	.+232    	; 0x4172 <System_1+0x21e>
    408a:	80 91 05 0a 	lds	r24, 0x0A05	; 0x800a05 <Comp_1+0x11>
    408e:	83 30       	cpi	r24, 0x03	; 3
    4090:	08 f0       	brcs	.+2      	; 0x4094 <System_1+0x140>
    4092:	6f c0       	rjmp	.+222    	; 0x4172 <System_1+0x21e>
			if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
			else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
			
			}
			*/
			if(!init_system){_err1=Check_Erors(&Comp_1,&EEpromData);ADE7758_resetStatus();} else init_system=false;
    4094:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <init_system>
    4098:	81 11       	cpse	r24, r1
    409a:	0a c0       	rjmp	.+20     	; 0x40b0 <System_1+0x15c>
    409c:	be 01       	movw	r22, r28
    409e:	84 ef       	ldi	r24, 0xF4	; 244
    40a0:	99 e0       	ldi	r25, 0x09	; 9
    40a2:	4f d2       	rcall	.+1182   	; 0x4542 <Check_Erors>
    40a4:	90 93 07 0b 	sts	0x0B07, r25	; 0x800b07 <_err1+0x1>
    40a8:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <_err1>
    40ac:	47 d2       	rcall	.+1166   	; 0x453c <ADE7758_resetStatus>
    40ae:	02 c0       	rjmp	.+4      	; 0x40b4 <System_1+0x160>
    40b0:	10 92 26 0b 	sts	0x0B26, r1	; 0x800b26 <init_system>
				
			if(_err1>0 && Comp_1.error==0){Comp_1.error=_err1;Comp_1.countError++;Comp_1.Steps=0;Comp_Stop(&Comp_1);xSerialxPrintf(&xSerial3Port,"error_1 =%d\r\n",Comp_1.error);}//
    40b4:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <_err1>
    40b8:	90 91 07 0b 	lds	r25, 0x0B07	; 0x800b07 <_err1+0x1>
    40bc:	18 16       	cp	r1, r24
    40be:	19 06       	cpc	r1, r25
    40c0:	3c f5       	brge	.+78     	; 0x4110 <System_1+0x1bc>
    40c2:	f8 01       	movw	r30, r16
    40c4:	20 81       	ld	r18, Z
    40c6:	31 81       	ldd	r19, Z+1	; 0x01
    40c8:	23 2b       	or	r18, r19
    40ca:	11 f5       	brne	.+68     	; 0x4110 <System_1+0x1bc>
    40cc:	e4 ef       	ldi	r30, 0xF4	; 244
    40ce:	f9 e0       	ldi	r31, 0x09	; 9
    40d0:	d8 01       	movw	r26, r16
    40d2:	8d 93       	st	X+, r24
    40d4:	9c 93       	st	X, r25
    40d6:	81 89       	ldd	r24, Z+17	; 0x11
    40d8:	8f 5f       	subi	r24, 0xFF	; 255
    40da:	81 8b       	std	Z+17, r24	; 0x11
    40dc:	f5 01       	movw	r30, r10
    40de:	11 82       	std	Z+1, r1	; 0x01
    40e0:	10 82       	st	Z, r1
    40e2:	84 ef       	ldi	r24, 0xF4	; 244
    40e4:	99 e0       	ldi	r25, 0x09	; 9
    40e6:	0e 94 47 36 	call	0x6c8e	; 0x6c8e <Comp_Stop>
    40ea:	d8 01       	movw	r26, r16
    40ec:	11 96       	adiw	r26, 0x01	; 1
    40ee:	8c 91       	ld	r24, X
    40f0:	11 97       	sbiw	r26, 0x01	; 1
    40f2:	8f 93       	push	r24
    40f4:	8c 91       	ld	r24, X
    40f6:	8f 93       	push	r24
    40f8:	9f 92       	push	r9
    40fa:	8f 92       	push	r8
    40fc:	ff 92       	push	r15
    40fe:	ef 92       	push	r14
    4100:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    4104:	0f 90       	pop	r0
    4106:	0f 90       	pop	r0
    4108:	0f 90       	pop	r0
    410a:	0f 90       	pop	r0
    410c:	0f 90       	pop	r0
    410e:	0f 90       	pop	r0
				
			 mod_pump(&Comp_1,&EEpromData);
    4110:	be 01       	movw	r22, r28
    4112:	84 ef       	ldi	r24, 0xF4	; 244
    4114:	99 e0       	ldi	r25, 0x09	; 9
    4116:	0e 94 4f 37 	call	0x6e9e	; 0x6e9e <mod_pump>
			//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);
			if(Comp_1.checkTrv && xTaskGetTickCount()-countTrvTime_1>10000 ){Comp_1.Steps = Fuzzy(&Comp_1,EEpromData.trv_corection_1);countTrvTime_1=xTaskGetTickCount();}
    411a:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <Comp_1+0x1>
    411e:	88 23       	and	r24, r24
    4120:	41 f1       	breq	.+80     	; 0x4172 <System_1+0x21e>
    4122:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    4126:	20 91 b5 07 	lds	r18, 0x07B5	; 0x8007b5 <countTrvTime_1>
    412a:	30 91 b6 07 	lds	r19, 0x07B6	; 0x8007b6 <countTrvTime_1+0x1>
    412e:	40 91 b7 07 	lds	r20, 0x07B7	; 0x8007b7 <countTrvTime_1+0x2>
    4132:	50 91 b8 07 	lds	r21, 0x07B8	; 0x8007b8 <countTrvTime_1+0x3>
    4136:	dc 01       	movw	r26, r24
    4138:	cb 01       	movw	r24, r22
    413a:	82 1b       	sub	r24, r18
    413c:	93 0b       	sbc	r25, r19
    413e:	a4 0b       	sbc	r26, r20
    4140:	b5 0b       	sbc	r27, r21
    4142:	81 31       	cpi	r24, 0x11	; 17
    4144:	97 42       	sbci	r25, 0x27	; 39
    4146:	a1 05       	cpc	r26, r1
    4148:	b1 05       	cpc	r27, r1
    414a:	98 f0       	brcs	.+38     	; 0x4172 <System_1+0x21e>
    414c:	6a a9       	ldd	r22, Y+50	; 0x32
    414e:	7b a9       	ldd	r23, Y+51	; 0x33
    4150:	84 ef       	ldi	r24, 0xF4	; 244
    4152:	99 e0       	ldi	r25, 0x09	; 9
    4154:	0e 94 f5 4f 	call	0x9fea	; 0x9fea <Fuzzy>
    4158:	d5 01       	movw	r26, r10
    415a:	8d 93       	st	X+, r24
    415c:	9c 93       	st	X, r25
    415e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    4162:	60 93 b5 07 	sts	0x07B5, r22	; 0x8007b5 <countTrvTime_1>
    4166:	70 93 b6 07 	sts	0x07B6, r23	; 0x8007b6 <countTrvTime_1+0x1>
    416a:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <countTrvTime_1+0x2>
    416e:	90 93 b8 07 	sts	0x07B8, r25	; 0x8007b8 <countTrvTime_1+0x3>
			
			
		}
		
		vTaskDelay(1000);
    4172:	68 ee       	ldi	r22, 0xE8	; 232
    4174:	73 e0       	ldi	r23, 0x03	; 3
    4176:	80 e0       	ldi	r24, 0x00	; 0
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <vTaskDelay>
		//xSerialxPrintf(&xSerial3Port,"Stack1 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
	}
    417e:	0e cf       	rjmp	.-484    	; 0x3f9c <System_1+0x48>

00004180 <ModBus>:

	while (1)
	{   
		//wdt_reset();
		//xSerialxPrintf(&xSerial3Port,"ModBus_task\r\n");
		if (xSemaphoreTake(xMbBinarySemaphore, portMAX_DELAY) == pdTRUE )
    4180:	4f ef       	ldi	r20, 0xFF	; 255
    4182:	5f ef       	ldi	r21, 0xFF	; 255
    4184:	ba 01       	movw	r22, r20
    4186:	80 91 27 0b 	lds	r24, 0x0B27	; 0x800b27 <xMbBinarySemaphore>
    418a:	90 91 28 0b 	lds	r25, 0x0B28	; 0x800b28 <xMbBinarySemaphore+0x1>
    418e:	0e 94 8f 0b 	call	0x171e	; 0x171e <xQueueSemaphoreTake>
    4192:	81 30       	cpi	r24, 0x01	; 1
    4194:	a9 f7       	brne	.-22     	; 0x4180 <ModBus>
		{
			modbus_update();
    4196:	b4 d7       	rcall	.+3944   	; 0x5100 <modbus_update>
			//xSerialxPrintf(&xSerial3Port,"Interrupt\r\n");
			if(port_0){xSerialRxFlush( &xSerialPort );port_0=false;indexBuf=0;}
    4198:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <port_0>
    419c:	88 23       	and	r24, r24
    419e:	49 f0       	breq	.+18     	; 0x41b2 <ModBus+0x32>
    41a0:	8b ee       	ldi	r24, 0xEB	; 235
    41a2:	97 e0       	ldi	r25, 0x07	; 7
    41a4:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xSerialRxFlush>
    41a8:	10 92 41 0b 	sts	0x0B41, r1	; 0x800b41 <port_0>
    41ac:	10 92 31 08 	sts	0x0831, r1	; 0x800831 <indexBuf>
    41b0:	e7 cf       	rjmp	.-50     	; 0x4180 <ModBus>
			else if(port_3){xSerialRxFlush( &xSerial3Port );port_3=false;indexBuf=0;}
    41b2:	80 91 93 09 	lds	r24, 0x0993	; 0x800993 <port_3>
    41b6:	88 23       	and	r24, r24
    41b8:	19 f3       	breq	.-58     	; 0x4180 <ModBus>
    41ba:	82 e3       	ldi	r24, 0x32	; 50
    41bc:	98 e0       	ldi	r25, 0x08	; 8
    41be:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xSerialRxFlush>
    41c2:	10 92 93 09 	sts	0x0993, r1	; 0x800993 <port_3>
    41c6:	10 92 31 08 	sts	0x0831, r1	; 0x800831 <indexBuf>
    41ca:	da cf       	rjmp	.-76     	; 0x4180 <ModBus>

000041cc <main>:
//--------------------------------------------------------
volatile long  countTimer;
int main(void) __attribute__ ((OS_main));

int main(void)
{
    41cc:	cd b7       	in	r28, 0x3d	; 61
    41ce:	de b7       	in	r29, 0x3e	; 62
    41d0:	a2 97       	sbiw	r28, 0x22	; 34
    41d2:	de bf       	out	0x3e, r29	; 62
    41d4:	cd bf       	out	0x3d, r28	; 61

	initPins();
    41d6:	0e 94 9c 3c 	call	0x7938	; 0x7938 <initPins>
	ADE7758_Init();
    41da:	93 d1       	rcall	.+806    	; 0x4502 <ADE7758_Init>
	timer_1_Init();
    41dc:	34 d4       	rcall	.+2152   	; 0x4a46 <timer_1_Init>
    41de:	81 e0       	ldi	r24, 0x01	; 1
	Comp_1.Index=1;
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	90 93 67 0a 	sts	0x0A67, r25	; 0x800a67 <Comp_1+0x73>
    41e6:	80 93 66 0a 	sts	0x0A66, r24	; 0x800a66 <Comp_1+0x72>
    41ea:	82 e0       	ldi	r24, 0x02	; 2
	Comp_2.Index=2;
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	90 93 f1 0a 	sts	0x0AF1, r25	; 0x800af1 <Comp_2+0x73>
    41f2:	80 93 f0 0a 	sts	0x0AF0, r24	; 0x800af0 <Comp_2+0x72>
    41f6:	80 e0       	ldi	r24, 0x00	; 0
	//eeprom_write_block((void*)&EEpromData, ( void*)0, sizeof (xEEdata));
	current_time = time(NULL);
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    41fe:	60 93 8f 09 	sts	0x098F, r22	; 0x80098f <current_time>
    4202:	70 93 90 09 	sts	0x0990, r23	; 0x800990 <current_time+0x1>
    4206:	80 93 91 09 	sts	0x0991, r24	; 0x800991 <current_time+0x2>
    420a:	90 93 92 09 	sts	0x0992, r25	; 0x800992 <current_time+0x3>
    420e:	ee 24       	eor	r14, r14
	xSerialPort = xSerialPortInitMinimal( USART0, 9600, portSERIAL_BUFFER_TX, portSERIAL_BUFFER_RX);
    4210:	ea 94       	dec	r14
    4212:	f1 2c       	mov	r15, r1
    4214:	0f ef       	ldi	r16, 0xFF	; 255
    4216:	10 e0       	ldi	r17, 0x00	; 0
    4218:	20 e8       	ldi	r18, 0x80	; 128
    421a:	35 e2       	ldi	r19, 0x25	; 37
    421c:	40 e0       	ldi	r20, 0x00	; 0
    421e:	50 e0       	ldi	r21, 0x00	; 0
    4220:	60 e0       	ldi	r22, 0x00	; 0
    4222:	ce 01       	movw	r24, r28
    4224:	01 96       	adiw	r24, 0x01	; 1
    4226:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <xSerialPortInitMinimal>
    422a:	82 e2       	ldi	r24, 0x22	; 34
    422c:	fe 01       	movw	r30, r28
    422e:	31 96       	adiw	r30, 0x01	; 1
    4230:	ab ee       	ldi	r26, 0xEB	; 235
    4232:	b7 e0       	ldi	r27, 0x07	; 7
    4234:	01 90       	ld	r0, Z+
    4236:	0d 92       	st	X+, r0
    4238:	8a 95       	dec	r24
    423a:	e1 f7       	brne	.-8      	; 0x4234 <main+0x68>
    423c:	20 e8       	ldi	r18, 0x80	; 128
	xSerial3Port = xSerialPortInitMinimal( USART3, 9600, portSERIAL_BUFFER_TX, portSERIAL_BUFFER_RX);
    423e:	35 e2       	ldi	r19, 0x25	; 37
    4240:	40 e0       	ldi	r20, 0x00	; 0
    4242:	50 e0       	ldi	r21, 0x00	; 0
    4244:	66 e0       	ldi	r22, 0x06	; 6
    4246:	ce 01       	movw	r24, r28
    4248:	01 96       	adiw	r24, 0x01	; 1
    424a:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <xSerialPortInitMinimal>
    424e:	82 e2       	ldi	r24, 0x22	; 34
    4250:	fe 01       	movw	r30, r28
    4252:	31 96       	adiw	r30, 0x01	; 1
    4254:	a2 e3       	ldi	r26, 0x32	; 50
    4256:	b8 e0       	ldi	r27, 0x08	; 8
    4258:	01 90       	ld	r0, Z+
    425a:	0d 92       	st	X+, r0
    425c:	8a 95       	dec	r24
    425e:	e1 f7       	brne	.-8      	; 0x4258 <main+0x8c>
    4260:	43 e0       	ldi	r20, 0x03	; 3
	vSemaphoreCreateBinary(xMbBinarySemaphore);
    4262:	60 e0       	ldi	r22, 0x00	; 0
    4264:	81 e0       	ldi	r24, 0x01	; 1
    4266:	0e 94 a7 09 	call	0x134e	; 0x134e <xQueueGenericCreate>
    426a:	90 93 28 0b 	sts	0x0B28, r25	; 0x800b28 <xMbBinarySemaphore+0x1>
    426e:	80 93 27 0b 	sts	0x0B27, r24	; 0x800b27 <xMbBinarySemaphore>
    4272:	00 97       	sbiw	r24, 0x00	; 0
    4274:	41 f0       	breq	.+16     	; 0x4286 <main+0xba>
    4276:	00 e0       	ldi	r16, 0x00	; 0
    4278:	20 e0       	ldi	r18, 0x00	; 0
    427a:	30 e0       	ldi	r19, 0x00	; 0
    427c:	a9 01       	movw	r20, r18
    427e:	60 e0       	ldi	r22, 0x00	; 0
    4280:	70 e0       	ldi	r23, 0x00	; 0
    4282:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    4286:	40 e6       	ldi	r20, 0x60	; 96

    
	eeprom_read_block((void*)&EEpromData, (const void*)0, sizeof (xEEdata));
    4288:	50 e0       	ldi	r21, 0x00	; 0
    428a:	60 e0       	ldi	r22, 0x00	; 0
    428c:	70 e0       	ldi	r23, 0x00	; 0
    428e:	84 e9       	ldi	r24, 0x94	; 148
    4290:	99 e0       	ldi	r25, 0x09	; 9
    4292:	0e 94 4c 5b 	call	0xb698	; 0xb698 <eeprom_read_block>
    4296:	84 ef       	ldi	r24, 0xF4	; 244
	activateTimers(&Comp_1);
    4298:	99 e0       	ldi	r25, 0x09	; 9
    429a:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <activateTimers>
    429e:	8e e7       	ldi	r24, 0x7E	; 126
	activateTimers(&Comp_2);
    42a0:	9a e0       	ldi	r25, 0x0A	; 10
    42a2:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <activateTimers>
    42a6:	84 ef       	ldi	r24, 0xF4	; 244
	activateTrvTimer(&Comp_1);
    42a8:	99 e0       	ldi	r25, 0x09	; 9
    42aa:	0e 94 30 4f 	call	0x9e60	; 0x9e60 <activateTrvTimer>
    42ae:	8e e7       	ldi	r24, 0x7E	; 126
	activateTrvTimer(&Comp_2);
    42b0:	9a e0       	ldi	r25, 0x0A	; 10
    42b2:	0e 94 30 4f 	call	0x9e60	; 0x9e60 <activateTrvTimer>
    42b6:	81 e0       	ldi	r24, 0x01	; 1
	init_system=true;
    42b8:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <init_system>
    42bc:	80 91 c6 09 	lds	r24, 0x09C6	; 0x8009c6 <EEpromData+0x32>
	old_corection_1=EEpromData.trv_corection_1;
    42c0:	90 91 c7 09 	lds	r25, 0x09C7	; 0x8009c7 <EEpromData+0x33>
    42c4:	90 93 0d 0b 	sts	0x0B0D, r25	; 0x800b0d <old_corection_1+0x1>
    42c8:	80 93 0c 0b 	sts	0x0B0C, r24	; 0x800b0c <old_corection_1>
    42cc:	80 91 dc 09 	lds	r24, 0x09DC	; 0x8009dc <EEpromData+0x48>
	old_corection_2=EEpromData.trv_corection_2;
    42d0:	90 91 dd 09 	lds	r25, 0x09DD	; 0x8009dd <EEpromData+0x49>
    42d4:	90 93 7d 0a 	sts	0x0A7D, r25	; 0x800a7d <old_corection_2+0x1>
    42d8:	80 93 7c 0a 	sts	0x0A7C, r24	; 0x800a7c <old_corection_2>
    42dc:	84 e9       	ldi	r24, 0x94	; 148
	Comp_1.modeOfPump=Comp_2.modeOfPump=selmode(&EEpromData);
    42de:	99 e0       	ldi	r25, 0x09	; 9
    42e0:	0e 94 c3 33 	call	0x6786	; 0x6786 <selmode>
    42e4:	80 93 8e 0a 	sts	0x0A8E, r24	; 0x800a8e <Comp_2+0x10>
    42e8:	80 93 04 0a 	sts	0x0A04, r24	; 0x800a04 <Comp_1+0x10>
    42ec:	99 e2       	ldi	r25, 0x29	; 41
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    42ee:	88 e1       	ldi	r24, 0x18	; 24
    42f0:	0f b6       	in	r0, 0x3f	; 63
    42f2:	f8 94       	cli
    42f4:	a8 95       	wdr
    42f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    42fa:	0f be       	out	0x3f, r0	; 63
    42fc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    4300:	78 94       	sei
	wdt_enable(WDTO_8S);
	//-------------------------------------
	sei(); 
    4302:	e1 2c       	mov	r14, r1
	//-------------------------------------
	xTaskCreate(ModBus,(const portCHAR *)"ModBus",256,NULL,2, NULL );
    4304:	f1 2c       	mov	r15, r1
    4306:	02 e0       	ldi	r16, 0x02	; 2
    4308:	20 e0       	ldi	r18, 0x00	; 0
    430a:	30 e0       	ldi	r19, 0x00	; 0
    430c:	40 e0       	ldi	r20, 0x00	; 0
    430e:	51 e0       	ldi	r21, 0x01	; 1
    4310:	6e e9       	ldi	r22, 0x9E	; 158
    4312:	72 e0       	ldi	r23, 0x02	; 2
    4314:	80 ec       	ldi	r24, 0xC0	; 192
    4316:	90 e2       	ldi	r25, 0x20	; 32
    4318:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    431c:	0f 2e       	mov	r0, r31
	xTaskCreate(System_1,(const portCHAR *)"System_1",512,NULL,0, &xHandleFirst );
    431e:	fb eb       	ldi	r31, 0xBB	; 187
    4320:	ef 2e       	mov	r14, r31
    4322:	f7 e0       	ldi	r31, 0x07	; 7
    4324:	ff 2e       	mov	r15, r31
    4326:	f0 2d       	mov	r31, r0
    4328:	00 e0       	ldi	r16, 0x00	; 0
    432a:	20 e0       	ldi	r18, 0x00	; 0
    432c:	30 e0       	ldi	r19, 0x00	; 0
    432e:	40 e0       	ldi	r20, 0x00	; 0
    4330:	52 e0       	ldi	r21, 0x02	; 2
    4332:	65 ea       	ldi	r22, 0xA5	; 165
    4334:	72 e0       	ldi	r23, 0x02	; 2
    4336:	8a ea       	ldi	r24, 0xAA	; 170
    4338:	9f e1       	ldi	r25, 0x1F	; 31
    433a:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    433e:	0f 2e       	mov	r0, r31
	xTaskCreate(System_2,(const portCHAR *)"System_2",512,NULL,0, &xHandleSecond );
    4340:	f9 eb       	ldi	r31, 0xB9	; 185
    4342:	ef 2e       	mov	r14, r31
    4344:	f7 e0       	ldi	r31, 0x07	; 7
    4346:	ff 2e       	mov	r15, r31
    4348:	f0 2d       	mov	r31, r0
    434a:	20 e0       	ldi	r18, 0x00	; 0
    434c:	30 e0       	ldi	r19, 0x00	; 0
    434e:	40 e0       	ldi	r20, 0x00	; 0
    4350:	52 e0       	ldi	r21, 0x02	; 2
    4352:	6e ea       	ldi	r22, 0xAE	; 174
    4354:	72 e0       	ldi	r23, 0x02	; 2
    4356:	8b eb       	ldi	r24, 0xBB	; 187
    4358:	9e e1       	ldi	r25, 0x1E	; 30
    435a:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    435e:	e1 2c       	mov	r14, r1
	xTaskCreate(Defrost,(const portCHAR *)"Defrost",256,NULL,0, NULL );
    4360:	f1 2c       	mov	r15, r1
    4362:	20 e0       	ldi	r18, 0x00	; 0
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	40 e0       	ldi	r20, 0x00	; 0
    4368:	51 e0       	ldi	r21, 0x01	; 1
    436a:	67 eb       	ldi	r22, 0xB7	; 183
    436c:	72 e0       	ldi	r23, 0x02	; 2
    436e:	81 ec       	ldi	r24, 0xC1	; 193
    4370:	9d e1       	ldi	r25, 0x1D	; 29
    4372:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    4376:	0e 94 56 16 	call	0x2cac	; 0x2cac <vTaskStartScheduler>
	//--------------------------------------
	vTaskStartScheduler();
    437a:	80 e0       	ldi	r24, 0x00	; 0
}
    437c:	90 e0       	ldi	r25, 0x00	; 0
    437e:	a2 96       	adiw	r28, 0x22	; 34
    4380:	0f b6       	in	r0, 0x3f	; 63
    4382:	f8 94       	cli
    4384:	de bf       	out	0x3e, r29	; 62
    4386:	0f be       	out	0x3f, r0	; 63
    4388:	cd bf       	out	0x3d, r28	; 61
    438a:	08 95       	ret

0000438c <__vector_17>:
    438c:	1f 92       	push	r1

ISR(TIMER1_COMPA_vect) // timer_compare_a
{
    438e:	0f 92       	push	r0
    4390:	0f b6       	in	r0, 0x3f	; 63
    4392:	0f 92       	push	r0
    4394:	11 24       	eor	r1, r1
    4396:	0b b6       	in	r0, 0x3b	; 59
    4398:	0f 92       	push	r0
    439a:	2f 93       	push	r18
    439c:	3f 93       	push	r19
    439e:	4f 93       	push	r20
    43a0:	5f 93       	push	r21
    43a2:	6f 93       	push	r22
    43a4:	7f 93       	push	r23
    43a6:	8f 93       	push	r24
    43a8:	9f 93       	push	r25
    43aa:	af 93       	push	r26
    43ac:	bf 93       	push	r27
    43ae:	ef 93       	push	r30
    43b0:	ff 93       	push	r31
	
	static BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
    43b2:	10 92 ac 07 	sts	0x07AC, r1	; 0x8007ac <xHigherPriorityTaskWoken.3697>
	countTimer++;
    43b6:	80 91 3d 0b 	lds	r24, 0x0B3D	; 0x800b3d <countTimer>
    43ba:	90 91 3e 0b 	lds	r25, 0x0B3E	; 0x800b3e <countTimer+0x1>
    43be:	a0 91 3f 0b 	lds	r26, 0x0B3F	; 0x800b3f <countTimer+0x2>
    43c2:	b0 91 40 0b 	lds	r27, 0x0B40	; 0x800b40 <countTimer+0x3>
    43c6:	01 96       	adiw	r24, 0x01	; 1
    43c8:	a1 1d       	adc	r26, r1
    43ca:	b1 1d       	adc	r27, r1
    43cc:	80 93 3d 0b 	sts	0x0B3D, r24	; 0x800b3d <countTimer>
    43d0:	90 93 3e 0b 	sts	0x0B3E, r25	; 0x800b3e <countTimer+0x1>
    43d4:	a0 93 3f 0b 	sts	0x0B3F, r26	; 0x800b3f <countTimer+0x2>
    43d8:	b0 93 40 0b 	sts	0x0B40, r27	; 0x800b40 <countTimer+0x3>
	if(countTimer==7){stop_1_Timer();countTimer=0;xSemaphoreGiveFromISR(xMbBinarySemaphore,&xHigherPriorityTaskWoken);}
    43dc:	80 91 3d 0b 	lds	r24, 0x0B3D	; 0x800b3d <countTimer>
    43e0:	90 91 3e 0b 	lds	r25, 0x0B3E	; 0x800b3e <countTimer+0x1>
    43e4:	a0 91 3f 0b 	lds	r26, 0x0B3F	; 0x800b3f <countTimer+0x2>
    43e8:	b0 91 40 0b 	lds	r27, 0x0B40	; 0x800b40 <countTimer+0x3>
    43ec:	07 97       	sbiw	r24, 0x07	; 7
    43ee:	a1 05       	cpc	r26, r1
    43f0:	b1 05       	cpc	r27, r1
    43f2:	89 f4       	brne	.+34     	; 0x4416 <__vector_17+0x8a>
    43f4:	18 d3       	rcall	.+1584   	; 0x4a26 <stop_1_Timer>
    43f6:	10 92 3d 0b 	sts	0x0B3D, r1	; 0x800b3d <countTimer>
    43fa:	10 92 3e 0b 	sts	0x0B3E, r1	; 0x800b3e <countTimer+0x1>
    43fe:	10 92 3f 0b 	sts	0x0B3F, r1	; 0x800b3f <countTimer+0x2>
    4402:	10 92 40 0b 	sts	0x0B40, r1	; 0x800b40 <countTimer+0x3>
    4406:	6c ea       	ldi	r22, 0xAC	; 172
    4408:	77 e0       	ldi	r23, 0x07	; 7
    440a:	80 91 27 0b 	lds	r24, 0x0B27	; 0x800b27 <xMbBinarySemaphore>
    440e:	90 91 28 0b 	lds	r25, 0x0B28	; 0x800b28 <xMbBinarySemaphore+0x1>
    4412:	0e 94 c9 0a 	call	0x1592	; 0x1592 <xQueueGiveFromISR>
	//if( xHigherPriorityTaskWoken == pdTRUE )portYIELD();

}
    4416:	ff 91       	pop	r31
    4418:	ef 91       	pop	r30
    441a:	bf 91       	pop	r27
    441c:	af 91       	pop	r26
    441e:	9f 91       	pop	r25
    4420:	8f 91       	pop	r24
    4422:	7f 91       	pop	r23
    4424:	6f 91       	pop	r22
    4426:	5f 91       	pop	r21
    4428:	4f 91       	pop	r20
    442a:	3f 91       	pop	r19
    442c:	2f 91       	pop	r18
    442e:	0f 90       	pop	r0
    4430:	0b be       	out	0x3b, r0	; 59
    4432:	0f 90       	pop	r0
    4434:	0f be       	out	0x3f, r0	; 63
    4436:	0f 90       	pop	r0
    4438:	1f 90       	pop	r1
    443a:	18 95       	reti

0000443c <ADE7758_read24>:
}
long ADE7758_getMaskInterrupts(void){
	return ADE7758_read24(MASK);
}
void ADE7758_setMaskInterrupts(unsigned long data){
	return ADE7758_write24(MASK, data);
    443c:	1f 93       	push	r17
    443e:	cf 93       	push	r28
    4440:	df 93       	push	r29
    4442:	c8 2f       	mov	r28, r24
    4444:	0f b6       	in	r0, 0x3f	; 63
    4446:	f8 94       	cli
    4448:	0f 92       	push	r0
    444a:	84 e0       	ldi	r24, 0x04	; 4
    444c:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <spiSelect>
    4450:	8c 2f       	mov	r24, r28
    4452:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    4456:	80 e0       	ldi	r24, 0x00	; 0
    4458:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    445c:	18 2f       	mov	r17, r24
    445e:	80 e0       	ldi	r24, 0x00	; 0
    4460:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    4464:	c8 2f       	mov	r28, r24
    4466:	80 e0       	ldi	r24, 0x00	; 0
    4468:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    446c:	d8 2f       	mov	r29, r24
    446e:	84 e0       	ldi	r24, 0x04	; 4
    4470:	0e 94 17 14 	call	0x282e	; 0x282e <spiDeselect>
    4474:	0f 90       	pop	r0
    4476:	0f be       	out	0x3f, r0	; 63
    4478:	8c 2f       	mov	r24, r28
    447a:	90 e0       	ldi	r25, 0x00	; 0
    447c:	a0 e0       	ldi	r26, 0x00	; 0
    447e:	b0 e0       	ldi	r27, 0x00	; 0
    4480:	ba 2f       	mov	r27, r26
    4482:	a9 2f       	mov	r26, r25
    4484:	98 2f       	mov	r25, r24
    4486:	88 27       	eor	r24, r24
    4488:	a1 2b       	or	r26, r17
    448a:	bc 01       	movw	r22, r24
    448c:	cd 01       	movw	r24, r26
    448e:	6d 2b       	or	r22, r29
    4490:	df 91       	pop	r29
    4492:	cf 91       	pop	r28
    4494:	1f 91       	pop	r17
    4496:	08 95       	ret

00004498 <ADE7758_write8>:
    4498:	cf 93       	push	r28
    449a:	df 93       	push	r29
    449c:	d8 2f       	mov	r29, r24
    449e:	c6 2f       	mov	r28, r22
    44a0:	0f b6       	in	r0, 0x3f	; 63
    44a2:	f8 94       	cli
    44a4:	0f 92       	push	r0
    44a6:	84 e0       	ldi	r24, 0x04	; 4
    44a8:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <spiSelect>
    44ac:	8d 2f       	mov	r24, r29
    44ae:	80 68       	ori	r24, 0x80	; 128
    44b0:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    44b4:	8c 2f       	mov	r24, r28
    44b6:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    44ba:	84 e0       	ldi	r24, 0x04	; 4
    44bc:	0e 94 17 14 	call	0x282e	; 0x282e <spiDeselect>
    44c0:	0f 90       	pop	r0
    44c2:	0f be       	out	0x3f, r0	; 63
    44c4:	df 91       	pop	r29
    44c6:	cf 91       	pop	r28
    44c8:	08 95       	ret

000044ca <ADE7758_setOpMode>:
    44ca:	68 2f       	mov	r22, r24
    44cc:	83 e1       	ldi	r24, 0x13	; 19
    44ce:	e4 cf       	rjmp	.-56     	; 0x4498 <ADE7758_write8>
    44d0:	08 95       	ret

000044d2 <ADE7758_setWavMode>:
    44d2:	68 2f       	mov	r22, r24
    44d4:	85 e1       	ldi	r24, 0x15	; 21
    44d6:	e0 cf       	rjmp	.-64     	; 0x4498 <ADE7758_write8>
    44d8:	08 95       	ret

000044da <ADE7758_setLcycMode>:
    44da:	68 2f       	mov	r22, r24
    44dc:	87 e1       	ldi	r24, 0x17	; 23
    44de:	dc cf       	rjmp	.-72     	; 0x4498 <ADE7758_write8>
    44e0:	08 95       	ret

000044e2 <ADE7758_setupDivs>:
    44e2:	cf 93       	push	r28
    44e4:	df 93       	push	r29
    44e6:	d6 2f       	mov	r29, r22
    44e8:	c4 2f       	mov	r28, r20
    44ea:	68 2f       	mov	r22, r24
    44ec:	82 e4       	ldi	r24, 0x42	; 66
    44ee:	d4 df       	rcall	.-88     	; 0x4498 <ADE7758_write8>
    44f0:	6d 2f       	mov	r22, r29
    44f2:	83 e4       	ldi	r24, 0x43	; 67
    44f4:	d1 df       	rcall	.-94     	; 0x4498 <ADE7758_write8>
    44f6:	6c 2f       	mov	r22, r28
    44f8:	84 e4       	ldi	r24, 0x44	; 68
    44fa:	ce df       	rcall	.-100    	; 0x4498 <ADE7758_write8>
    44fc:	df 91       	pop	r29
    44fe:	cf 91       	pop	r28
    4500:	08 95       	ret

00004502 <ADE7758_Init>:
    4502:	88 e0       	ldi	r24, 0x08	; 8
    4504:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <spiSetDataMode>
    4508:	86 e0       	ldi	r24, 0x06	; 6
    450a:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <spiSetClockDivider>
    450e:	81 e0       	ldi	r24, 0x01	; 1
    4510:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <spiSetBitOrder>
    4514:	84 e0       	ldi	r24, 0x04	; 4
    4516:	0e 94 81 13 	call	0x2702	; 0x2702 <spiBegin>
    451a:	80 e0       	ldi	r24, 0x00	; 0
    451c:	de df       	rcall	.-68     	; 0x44da <ADE7758_setLcycMode>
    451e:	60 e0       	ldi	r22, 0x00	; 0
    4520:	83 e2       	ldi	r24, 0x23	; 35
    4522:	ba df       	rcall	.-140    	; 0x4498 <ADE7758_write8>
    4524:	42 e0       	ldi	r20, 0x02	; 2
    4526:	62 e0       	ldi	r22, 0x02	; 2
    4528:	82 e0       	ldi	r24, 0x02	; 2
    452a:	db df       	rcall	.-74     	; 0x44e2 <ADE7758_setupDivs>
    452c:	84 e0       	ldi	r24, 0x04	; 4
    452e:	cd df       	rcall	.-102    	; 0x44ca <ADE7758_setOpMode>
    4530:	80 e1       	ldi	r24, 0x10	; 16
    4532:	cf cf       	rjmp	.-98     	; 0x44d2 <ADE7758_setWavMode>
    4534:	08 95       	ret

00004536 <ADE7758_getStatus>:
}
unsigned long ADE7758_getStatus(){
	return ADE7758_read24(STATUS);
    4536:	89 e1       	ldi	r24, 0x19	; 25
    4538:	81 cf       	rjmp	.-254    	; 0x443c <ADE7758_read24>
}
    453a:	08 95       	ret

0000453c <ADE7758_resetStatus>:
unsigned long ADE7758_resetStatus(){
	return ADE7758_read24(RSTATUS);
    453c:	8a e1       	ldi	r24, 0x1A	; 26
    453e:	7e cf       	rjmp	.-260    	; 0x443c <ADE7758_read24>
}
    4540:	08 95       	ret

00004542 <Check_Erors>:
#include "Errors.h"

extern  bool def;
int Check_Erors(xCompressor *comp,xEEdata *EElimit)
{
    4542:	4f 92       	push	r4
    4544:	5f 92       	push	r5
    4546:	6f 92       	push	r6
    4548:	7f 92       	push	r7
    454a:	8f 92       	push	r8
    454c:	9f 92       	push	r9
    454e:	af 92       	push	r10
    4550:	bf 92       	push	r11
    4552:	cf 92       	push	r12
    4554:	df 92       	push	r13
    4556:	ef 92       	push	r14
    4558:	ff 92       	push	r15
    455a:	0f 93       	push	r16
    455c:	1f 93       	push	r17
    455e:	cf 93       	push	r28
    4560:	df 93       	push	r29
    4562:	00 d0       	rcall	.+0      	; 0x4564 <Check_Erors+0x22>
    4564:	00 d0       	rcall	.+0      	; 0x4566 <Check_Erors+0x24>
    4566:	cd b7       	in	r28, 0x3d	; 61
    4568:	de b7       	in	r29, 0x3e	; 62
    456a:	9e 83       	std	Y+6, r25	; 0x06
    456c:	8d 83       	std	Y+5, r24	; 0x05
    456e:	8b 01       	movw	r16, r22
		if( comp->Dhw_Temp<-100){return (10+comp->Index);}
    4570:	20 e0       	ldi	r18, 0x00	; 0
    4572:	30 e0       	ldi	r19, 0x00	; 0
    4574:	48 ec       	ldi	r20, 0xC8	; 200
    4576:	52 ec       	ldi	r21, 0xC2	; 194
    4578:	dc 01       	movw	r26, r24
    457a:	52 96       	adiw	r26, 0x12	; 18
    457c:	6d 91       	ld	r22, X+
    457e:	7d 91       	ld	r23, X+
    4580:	8d 91       	ld	r24, X+
    4582:	9c 91       	ld	r25, X
    4584:	55 97       	sbiw	r26, 0x15	; 21
    4586:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    458a:	88 23       	and	r24, r24
    458c:	44 f4       	brge	.+16     	; 0x459e <Check_Erors+0x5c>
    458e:	ed 81       	ldd	r30, Y+5	; 0x05
    4590:	fe 81       	ldd	r31, Y+6	; 0x06
    4592:	ee 58       	subi	r30, 0x8E	; 142
    4594:	ff 4f       	sbci	r31, 0xFF	; 255
    4596:	80 81       	ld	r24, Z
    4598:	91 81       	ldd	r25, Z+1	; 0x01
    459a:	0a 96       	adiw	r24, 0x0a	; 10
    459c:	22 c2       	rjmp	.+1092   	; 0x49e2 <Check_Erors+0x4a0>
		else if(comp->Bac_Temp<-100) {return (20+comp->Index);}
    459e:	ad 81       	ldd	r26, Y+5	; 0x05
    45a0:	be 81       	ldd	r27, Y+6	; 0x06
    45a2:	56 96       	adiw	r26, 0x16	; 22
    45a4:	cd 90       	ld	r12, X+
    45a6:	dd 90       	ld	r13, X+
    45a8:	ed 90       	ld	r14, X+
    45aa:	fc 90       	ld	r15, X
    45ac:	59 97       	sbiw	r26, 0x19	; 25
    45ae:	20 e0       	ldi	r18, 0x00	; 0
    45b0:	30 e0       	ldi	r19, 0x00	; 0
    45b2:	48 ec       	ldi	r20, 0xC8	; 200
    45b4:	52 ec       	ldi	r21, 0xC2	; 194
    45b6:	c7 01       	movw	r24, r14
    45b8:	b6 01       	movw	r22, r12
    45ba:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    45be:	88 23       	and	r24, r24
    45c0:	44 f4       	brge	.+16     	; 0x45d2 <Check_Erors+0x90>
    45c2:	ed 81       	ldd	r30, Y+5	; 0x05
    45c4:	fe 81       	ldd	r31, Y+6	; 0x06
    45c6:	ee 58       	subi	r30, 0x8E	; 142
    45c8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ca:	80 81       	ld	r24, Z
    45cc:	91 81       	ldd	r25, Z+1	; 0x01
    45ce:	44 96       	adiw	r24, 0x14	; 20
    45d0:	08 c2       	rjmp	.+1040   	; 0x49e2 <Check_Erors+0x4a0>
		else if (comp->Heat_Out<-100) {return (30+comp->Index);}
    45d2:	ad 81       	ldd	r26, Y+5	; 0x05
    45d4:	be 81       	ldd	r27, Y+6	; 0x06
    45d6:	9a 96       	adiw	r26, 0x2a	; 42
    45d8:	4d 90       	ld	r4, X+
    45da:	5d 90       	ld	r5, X+
    45dc:	6d 90       	ld	r6, X+
    45de:	7c 90       	ld	r7, X
    45e0:	9d 97       	sbiw	r26, 0x2d	; 45
    45e2:	20 e0       	ldi	r18, 0x00	; 0
    45e4:	30 e0       	ldi	r19, 0x00	; 0
    45e6:	48 ec       	ldi	r20, 0xC8	; 200
    45e8:	52 ec       	ldi	r21, 0xC2	; 194
    45ea:	c3 01       	movw	r24, r6
    45ec:	b2 01       	movw	r22, r4
    45ee:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    45f2:	88 23       	and	r24, r24
    45f4:	44 f4       	brge	.+16     	; 0x4606 <Check_Erors+0xc4>
    45f6:	ed 81       	ldd	r30, Y+5	; 0x05
    45f8:	fe 81       	ldd	r31, Y+6	; 0x06
    45fa:	ee 58       	subi	r30, 0x8E	; 142
    45fc:	ff 4f       	sbci	r31, 0xFF	; 255
    45fe:	80 81       	ld	r24, Z
    4600:	91 81       	ldd	r25, Z+1	; 0x01
    4602:	4e 96       	adiw	r24, 0x1e	; 30
    4604:	ee c1       	rjmp	.+988    	; 0x49e2 <Check_Erors+0x4a0>
		else if (comp->Heat_In<-100){return (40+comp->Index);}
    4606:	ad 81       	ldd	r26, Y+5	; 0x05
    4608:	be 81       	ldd	r27, Y+6	; 0x06
    460a:	9e 96       	adiw	r26, 0x2e	; 46
    460c:	8d 90       	ld	r8, X+
    460e:	9d 90       	ld	r9, X+
    4610:	ad 90       	ld	r10, X+
    4612:	bc 90       	ld	r11, X
    4614:	d1 97       	sbiw	r26, 0x31	; 49
    4616:	20 e0       	ldi	r18, 0x00	; 0
    4618:	30 e0       	ldi	r19, 0x00	; 0
    461a:	48 ec       	ldi	r20, 0xC8	; 200
    461c:	52 ec       	ldi	r21, 0xC2	; 194
    461e:	c5 01       	movw	r24, r10
    4620:	b4 01       	movw	r22, r8
    4622:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    4626:	88 23       	and	r24, r24
    4628:	44 f4       	brge	.+16     	; 0x463a <Check_Erors+0xf8>
    462a:	ed 81       	ldd	r30, Y+5	; 0x05
    462c:	fe 81       	ldd	r31, Y+6	; 0x06
    462e:	ee 58       	subi	r30, 0x8E	; 142
    4630:	ff 4f       	sbci	r31, 0xFF	; 255
    4632:	80 81       	ld	r24, Z
    4634:	91 81       	ldd	r25, Z+1	; 0x01
    4636:	88 96       	adiw	r24, 0x28	; 40
    4638:	d4 c1       	rjmp	.+936    	; 0x49e2 <Check_Erors+0x4a0>
		else if(comp->Src_In<-100) {return (50+comp->Index);}
    463a:	20 e0       	ldi	r18, 0x00	; 0
    463c:	30 e0       	ldi	r19, 0x00	; 0
    463e:	48 ec       	ldi	r20, 0xC8	; 200
    4640:	52 ec       	ldi	r21, 0xC2	; 194
    4642:	ad 81       	ldd	r26, Y+5	; 0x05
    4644:	be 81       	ldd	r27, Y+6	; 0x06
    4646:	d2 96       	adiw	r26, 0x32	; 50
    4648:	6d 91       	ld	r22, X+
    464a:	7d 91       	ld	r23, X+
    464c:	8d 91       	ld	r24, X+
    464e:	9c 91       	ld	r25, X
    4650:	d5 97       	sbiw	r26, 0x35	; 53
    4652:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    4656:	88 23       	and	r24, r24
    4658:	44 f4       	brge	.+16     	; 0x466a <Check_Erors+0x128>
    465a:	ed 81       	ldd	r30, Y+5	; 0x05
    465c:	fe 81       	ldd	r31, Y+6	; 0x06
    465e:	ee 58       	subi	r30, 0x8E	; 142
    4660:	ff 4f       	sbci	r31, 0xFF	; 255
    4662:	80 81       	ld	r24, Z
    4664:	91 81       	ldd	r25, Z+1	; 0x01
    4666:	c2 96       	adiw	r24, 0x32	; 50
    4668:	bc c1       	rjmp	.+888    	; 0x49e2 <Check_Erors+0x4a0>
		else if (comp->Src_Out<-100) {return (60+comp->Index);}
    466a:	20 e0       	ldi	r18, 0x00	; 0
    466c:	30 e0       	ldi	r19, 0x00	; 0
    466e:	48 ec       	ldi	r20, 0xC8	; 200
    4670:	52 ec       	ldi	r21, 0xC2	; 194
    4672:	ad 81       	ldd	r26, Y+5	; 0x05
    4674:	be 81       	ldd	r27, Y+6	; 0x06
    4676:	d6 96       	adiw	r26, 0x36	; 54
    4678:	6d 91       	ld	r22, X+
    467a:	7d 91       	ld	r23, X+
    467c:	8d 91       	ld	r24, X+
    467e:	9c 91       	ld	r25, X
    4680:	d9 97       	sbiw	r26, 0x39	; 57
    4682:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    4686:	88 23       	and	r24, r24
    4688:	44 f4       	brge	.+16     	; 0x469a <Check_Erors+0x158>
    468a:	ed 81       	ldd	r30, Y+5	; 0x05
    468c:	fe 81       	ldd	r31, Y+6	; 0x06
    468e:	ee 58       	subi	r30, 0x8E	; 142
    4690:	ff 4f       	sbci	r31, 0xFF	; 255
    4692:	80 81       	ld	r24, Z
    4694:	91 81       	ldd	r25, Z+1	; 0x01
    4696:	cc 96       	adiw	r24, 0x3c	; 60
    4698:	a4 c1       	rjmp	.+840    	; 0x49e2 <Check_Erors+0x4a0>
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
    469a:	ad 81       	ldd	r26, Y+5	; 0x05
    469c:	be 81       	ldd	r27, Y+6	; 0x06
    469e:	da 96       	adiw	r26, 0x3a	; 58
    46a0:	8d 91       	ld	r24, X+
    46a2:	9d 91       	ld	r25, X+
    46a4:	0d 90       	ld	r0, X+
    46a6:	bc 91       	ld	r27, X
    46a8:	a0 2d       	mov	r26, r0
    46aa:	89 83       	std	Y+1, r24	; 0x01
    46ac:	9a 83       	std	Y+2, r25	; 0x02
    46ae:	ab 83       	std	Y+3, r26	; 0x03
    46b0:	bc 83       	std	Y+4, r27	; 0x04
    46b2:	20 e0       	ldi	r18, 0x00	; 0
    46b4:	30 e0       	ldi	r19, 0x00	; 0
    46b6:	48 ec       	ldi	r20, 0xC8	; 200
    46b8:	52 ec       	ldi	r21, 0xC2	; 194
    46ba:	bc 01       	movw	r22, r24
    46bc:	cd 01       	movw	r24, r26
    46be:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    46c2:	88 23       	and	r24, r24
    46c4:	4c f4       	brge	.+18     	; 0x46d8 <Check_Erors+0x196>
    46c6:	ed 81       	ldd	r30, Y+5	; 0x05
    46c8:	fe 81       	ldd	r31, Y+6	; 0x06
    46ca:	ee 58       	subi	r30, 0x8E	; 142
    46cc:	ff 4f       	sbci	r31, 0xFF	; 255
    46ce:	80 81       	ld	r24, Z
    46d0:	91 81       	ldd	r25, Z+1	; 0x01
    46d2:	8a 5b       	subi	r24, 0xBA	; 186
    46d4:	9f 4f       	sbci	r25, 0xFF	; 255
    46d6:	85 c1       	rjmp	.+778    	; 0x49e2 <Check_Erors+0x4a0>
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
    46d8:	20 e0       	ldi	r18, 0x00	; 0
    46da:	30 e0       	ldi	r19, 0x00	; 0
    46dc:	48 ec       	ldi	r20, 0xC8	; 200
    46de:	52 ec       	ldi	r21, 0xC2	; 194
    46e0:	ed 81       	ldd	r30, Y+5	; 0x05
    46e2:	fe 81       	ldd	r31, Y+6	; 0x06
    46e4:	fe 96       	adiw	r30, 0x3e	; 62
    46e6:	60 81       	ld	r22, Z
    46e8:	71 81       	ldd	r23, Z+1	; 0x01
    46ea:	82 81       	ldd	r24, Z+2	; 0x02
    46ec:	93 81       	ldd	r25, Z+3	; 0x03
    46ee:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    46f2:	88 23       	and	r24, r24
    46f4:	54 f4       	brge	.+20     	; 0x470a <Check_Erors+0x1c8>
    46f6:	8d 81       	ldd	r24, Y+5	; 0x05
    46f8:	9e 81       	ldd	r25, Y+6	; 0x06
    46fa:	8e 58       	subi	r24, 0x8E	; 142
    46fc:	9f 4f       	sbci	r25, 0xFF	; 255
    46fe:	dc 01       	movw	r26, r24
    4700:	8d 91       	ld	r24, X+
    4702:	9c 91       	ld	r25, X
    4704:	80 5b       	subi	r24, 0xB0	; 176
    4706:	9f 4f       	sbci	r25, 0xFF	; 255
    4708:	6c c1       	rjmp	.+728    	; 0x49e2 <Check_Erors+0x4a0>
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
    470a:	20 e0       	ldi	r18, 0x00	; 0
    470c:	30 e0       	ldi	r19, 0x00	; 0
    470e:	48 ec       	ldi	r20, 0xC8	; 200
    4710:	52 ec       	ldi	r21, 0xC2	; 194
    4712:	ed 81       	ldd	r30, Y+5	; 0x05
    4714:	fe 81       	ldd	r31, Y+6	; 0x06
    4716:	ee 5b       	subi	r30, 0xBE	; 190
    4718:	ff 4f       	sbci	r31, 0xFF	; 255
    471a:	60 81       	ld	r22, Z
    471c:	71 81       	ldd	r23, Z+1	; 0x01
    471e:	82 81       	ldd	r24, Z+2	; 0x02
    4720:	93 81       	ldd	r25, Z+3	; 0x03
    4722:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    4726:	88 23       	and	r24, r24
    4728:	4c f4       	brge	.+18     	; 0x473c <Check_Erors+0x1fa>
    472a:	ed 81       	ldd	r30, Y+5	; 0x05
    472c:	fe 81       	ldd	r31, Y+6	; 0x06
    472e:	ee 58       	subi	r30, 0x8E	; 142
    4730:	ff 4f       	sbci	r31, 0xFF	; 255
    4732:	80 81       	ld	r24, Z
    4734:	91 81       	ldd	r25, Z+1	; 0x01
    4736:	86 5a       	subi	r24, 0xA6	; 166
    4738:	9f 4f       	sbci	r25, 0xFF	; 255
    473a:	53 c1       	rjmp	.+678    	; 0x49e2 <Check_Erors+0x4a0>
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
    473c:	4a 9b       	sbis	0x09, 2	; 9
    473e:	10 c0       	rjmp	.+32     	; 0x4760 <Check_Erors+0x21e>
    4740:	ad 81       	ldd	r26, Y+5	; 0x05
    4742:	be 81       	ldd	r27, Y+6	; 0x06
    4744:	1f 96       	adiw	r26, 0x0f	; 15
    4746:	8c 91       	ld	r24, X
    4748:	1f 97       	sbiw	r26, 0x0f	; 15
    474a:	81 30       	cpi	r24, 0x01	; 1
    474c:	49 f4       	brne	.+18     	; 0x4760 <Check_Erors+0x21e>
    474e:	fd 01       	movw	r30, r26
    4750:	ee 58       	subi	r30, 0x8E	; 142
    4752:	ff 4f       	sbci	r31, 0xFF	; 255
    4754:	80 81       	ld	r24, Z
    4756:	91 81       	ldd	r25, Z+1	; 0x01
    4758:	01 97       	sbiw	r24, 0x01	; 1
    475a:	09 f0       	breq	.+2      	; 0x475e <Check_Erors+0x21c>
    475c:	31 c1       	rjmp	.+610    	; 0x49c0 <Check_Erors+0x47e>
    475e:	12 c1       	rjmp	.+548    	; 0x4984 <Check_Erors+0x442>
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    4760:	4b 9b       	sbis	0x09, 3	; 9
    4762:	10 c0       	rjmp	.+32     	; 0x4784 <Check_Erors+0x242>
    4764:	ed 81       	ldd	r30, Y+5	; 0x05
    4766:	fe 81       	ldd	r31, Y+6	; 0x06
    4768:	87 85       	ldd	r24, Z+15	; 0x0f
    476a:	81 30       	cpi	r24, 0x01	; 1
    476c:	09 f0       	breq	.+2      	; 0x4770 <Check_Erors+0x22e>
    476e:	36 c1       	rjmp	.+620    	; 0x49dc <Check_Erors+0x49a>
    4770:	ed 81       	ldd	r30, Y+5	; 0x05
    4772:	fe 81       	ldd	r31, Y+6	; 0x06
    4774:	ee 58       	subi	r30, 0x8E	; 142
    4776:	ff 4f       	sbci	r31, 0xFF	; 255
    4778:	80 81       	ld	r24, Z
    477a:	91 81       	ldd	r25, Z+1	; 0x01
    477c:	02 97       	sbiw	r24, 0x02	; 2
    477e:	09 f0       	breq	.+2      	; 0x4782 <Check_Erors+0x240>
    4780:	22 c1       	rjmp	.+580    	; 0x49c6 <Check_Erors+0x484>
    4782:	03 c1       	rjmp	.+518    	; 0x498a <Check_Erors+0x448>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    4784:	65 9b       	sbis	0x0c, 5	; 12
    4786:	11 c0       	rjmp	.+34     	; 0x47aa <Check_Erors+0x268>
    4788:	ad 81       	ldd	r26, Y+5	; 0x05
    478a:	be 81       	ldd	r27, Y+6	; 0x06
    478c:	1f 96       	adiw	r26, 0x0f	; 15
    478e:	8c 91       	ld	r24, X
    4790:	81 30       	cpi	r24, 0x01	; 1
    4792:	09 f0       	breq	.+2      	; 0x4796 <Check_Erors+0x254>
    4794:	1b c1       	rjmp	.+566    	; 0x49cc <Check_Erors+0x48a>
    4796:	ed 81       	ldd	r30, Y+5	; 0x05
    4798:	fe 81       	ldd	r31, Y+6	; 0x06
    479a:	ee 58       	subi	r30, 0x8E	; 142
    479c:	ff 4f       	sbci	r31, 0xFF	; 255
    479e:	80 81       	ld	r24, Z
    47a0:	91 81       	ldd	r25, Z+1	; 0x01
    47a2:	01 97       	sbiw	r24, 0x01	; 1
    47a4:	09 f0       	breq	.+2      	; 0x47a8 <Check_Erors+0x266>
    47a6:	14 c1       	rjmp	.+552    	; 0x49d0 <Check_Erors+0x48e>
    47a8:	f3 c0       	rjmp	.+486    	; 0x4990 <Check_Erors+0x44e>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    47aa:	65 9b       	sbis	0x0c, 5	; 12
    47ac:	0e c0       	rjmp	.+28     	; 0x47ca <Check_Erors+0x288>
    47ae:	ed 81       	ldd	r30, Y+5	; 0x05
    47b0:	fe 81       	ldd	r31, Y+6	; 0x06
    47b2:	87 85       	ldd	r24, Z+15	; 0x0f
    47b4:	81 30       	cpi	r24, 0x01	; 1
    47b6:	49 f4       	brne	.+18     	; 0x47ca <Check_Erors+0x288>
    47b8:	ed 81       	ldd	r30, Y+5	; 0x05
    47ba:	fe 81       	ldd	r31, Y+6	; 0x06
    47bc:	ee 58       	subi	r30, 0x8E	; 142
    47be:	ff 4f       	sbci	r31, 0xFF	; 255
    47c0:	80 81       	ld	r24, Z
    47c2:	91 81       	ldd	r25, Z+1	; 0x01
    47c4:	02 97       	sbiw	r24, 0x02	; 2
    47c6:	09 f4       	brne	.+2      	; 0x47ca <Check_Erors+0x288>
    47c8:	e6 c0       	rjmp	.+460    	; 0x4996 <Check_Erors+0x454>
		 //else if ( comp->High_Press > 0){return (140+comp->Index);}
		 //else if ( comp->Low_Press>0 ) {return (120+comp->Index);}
		 else if ( comp->Low_Press< EElimit->LP_Min ) {return (120+comp->Index);}
    47ca:	f8 01       	movw	r30, r16
    47cc:	e4 5a       	subi	r30, 0xA4	; 164
    47ce:	ff 4f       	sbci	r31, 0xFF	; 255
    47d0:	20 81       	ld	r18, Z
    47d2:	31 81       	ldd	r19, Z+1	; 0x01
    47d4:	42 81       	ldd	r20, Z+2	; 0x02
    47d6:	53 81       	ldd	r21, Z+3	; 0x03
    47d8:	ad 81       	ldd	r26, Y+5	; 0x05
    47da:	be 81       	ldd	r27, Y+6	; 0x06
    47dc:	5e 96       	adiw	r26, 0x1e	; 30
    47de:	6d 91       	ld	r22, X+
    47e0:	7d 91       	ld	r23, X+
    47e2:	8d 91       	ld	r24, X+
    47e4:	9c 91       	ld	r25, X
    47e6:	91 97       	sbiw	r26, 0x21	; 33
    47e8:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    47ec:	88 23       	and	r24, r24
    47ee:	4c f4       	brge	.+18     	; 0x4802 <Check_Erors+0x2c0>
    47f0:	ed 81       	ldd	r30, Y+5	; 0x05
    47f2:	fe 81       	ldd	r31, Y+6	; 0x06
    47f4:	ee 58       	subi	r30, 0x8E	; 142
    47f6:	ff 4f       	sbci	r31, 0xFF	; 255
    47f8:	80 81       	ld	r24, Z
    47fa:	91 81       	ldd	r25, Z+1	; 0x01
    47fc:	88 58       	subi	r24, 0x88	; 136
    47fe:	9f 4f       	sbci	r25, 0xFF	; 255
    4800:	f0 c0       	rjmp	.+480    	; 0x49e2 <Check_Erors+0x4a0>
		 else if ( comp->High_Press > EElimit->HP_Max){return (140+comp->Index);}	
    4802:	d8 01       	movw	r26, r16
    4804:	16 96       	adiw	r26, 0x06	; 6
    4806:	6c 91       	ld	r22, X
    4808:	70 e0       	ldi	r23, 0x00	; 0
    480a:	80 e0       	ldi	r24, 0x00	; 0
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    4812:	9b 01       	movw	r18, r22
    4814:	ac 01       	movw	r20, r24
    4816:	ed 81       	ldd	r30, Y+5	; 0x05
    4818:	fe 81       	ldd	r31, Y+6	; 0x06
    481a:	62 8d       	ldd	r22, Z+26	; 0x1a
    481c:	73 8d       	ldd	r23, Z+27	; 0x1b
    481e:	84 8d       	ldd	r24, Z+28	; 0x1c
    4820:	95 8d       	ldd	r25, Z+29	; 0x1d
    4822:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    4826:	18 16       	cp	r1, r24
    4828:	54 f4       	brge	.+20     	; 0x483e <Check_Erors+0x2fc>
    482a:	8d 81       	ldd	r24, Y+5	; 0x05
    482c:	9e 81       	ldd	r25, Y+6	; 0x06
    482e:	8e 58       	subi	r24, 0x8E	; 142
    4830:	9f 4f       	sbci	r25, 0xFF	; 255
    4832:	dc 01       	movw	r26, r24
    4834:	8d 91       	ld	r24, X+
    4836:	9c 91       	ld	r25, X
    4838:	84 57       	subi	r24, 0x74	; 116
    483a:	9f 4f       	sbci	r25, 0xFF	; 255
    483c:	d2 c0       	rjmp	.+420    	; 0x49e2 <Check_Erors+0x4a0>
		 else if ( comp->Bac_Temp > EElimit->HEAT_Max && comp->Heating==1){return (160+comp->Index);}
    483e:	f8 01       	movw	r30, r16
    4840:	61 85       	ldd	r22, Z+9	; 0x09
    4842:	70 e0       	ldi	r23, 0x00	; 0
    4844:	80 e0       	ldi	r24, 0x00	; 0
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    484c:	9b 01       	movw	r18, r22
    484e:	ac 01       	movw	r20, r24
    4850:	c7 01       	movw	r24, r14
    4852:	b6 01       	movw	r22, r12
    4854:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    4858:	18 16       	cp	r1, r24
    485a:	74 f4       	brge	.+28     	; 0x4878 <Check_Erors+0x336>
    485c:	ad 81       	ldd	r26, Y+5	; 0x05
    485e:	be 81       	ldd	r27, Y+6	; 0x06
    4860:	12 96       	adiw	r26, 0x02	; 2
    4862:	8c 91       	ld	r24, X
    4864:	12 97       	sbiw	r26, 0x02	; 2
    4866:	88 23       	and	r24, r24
    4868:	39 f0       	breq	.+14     	; 0x4878 <Check_Erors+0x336>
    486a:	ae 58       	subi	r26, 0x8E	; 142
    486c:	bf 4f       	sbci	r27, 0xFF	; 255
    486e:	8d 91       	ld	r24, X+
    4870:	9c 91       	ld	r25, X
    4872:	80 56       	subi	r24, 0x60	; 96
    4874:	9f 4f       	sbci	r25, 0xFF	; 255
    4876:	b5 c0       	rjmp	.+362    	; 0x49e2 <Check_Erors+0x4a0>
		//else if ( comp->Bac_Temp < EElimit->HEAT_Min && comp->Cooling==1) {return (170+comp->Index);}	
		//else if ( comp->Bac_Temp < EElimit->HEAT_Min && comp->Heating==1) {return (170+comp->Index);}
		//else if ( comp->Bac_Temp > EElimit->Cool_Max && comp->Cooling==1){return (180+comp->Index);}
		else if ( comp->Bac_Temp < EElimit->Cool_Min && comp->Cooling==1){return (170+comp->Index);}
    4878:	f8 01       	movw	r30, r16
    487a:	65 85       	ldd	r22, Z+13	; 0x0d
    487c:	70 e0       	ldi	r23, 0x00	; 0
    487e:	80 e0       	ldi	r24, 0x00	; 0
    4880:	90 e0       	ldi	r25, 0x00	; 0
    4882:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    4886:	9b 01       	movw	r18, r22
    4888:	ac 01       	movw	r20, r24
    488a:	c7 01       	movw	r24, r14
    488c:	b6 01       	movw	r22, r12
    488e:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    4892:	88 23       	and	r24, r24
    4894:	74 f4       	brge	.+28     	; 0x48b2 <Check_Erors+0x370>
    4896:	ad 81       	ldd	r26, Y+5	; 0x05
    4898:	be 81       	ldd	r27, Y+6	; 0x06
    489a:	13 96       	adiw	r26, 0x03	; 3
    489c:	8c 91       	ld	r24, X
    489e:	13 97       	sbiw	r26, 0x03	; 3
    48a0:	88 23       	and	r24, r24
    48a2:	39 f0       	breq	.+14     	; 0x48b2 <Check_Erors+0x370>
    48a4:	ae 58       	subi	r26, 0x8E	; 142
    48a6:	bf 4f       	sbci	r27, 0xFF	; 255
    48a8:	8d 91       	ld	r24, X+
    48aa:	9c 91       	ld	r25, X
    48ac:	86 55       	subi	r24, 0x56	; 86
    48ae:	9f 4f       	sbci	r25, 0xFF	; 255
    48b0:	98 c0       	rjmp	.+304    	; 0x49e2 <Check_Erors+0x4a0>
		//else if ( comp->SuperHeat < EElimit->MinSuperheat && comp->checkTrv) {return (180+comp->Index);}
		//else if ( comp->SuperHeat > EElimit->MaxSuperheat && comp->checkTrv && !comp->def) {return (190+comp->Index);}
		//else if ( comp->SuperCool < EElimit->MinSupercool && comp->checkTrv){return (200+comp->Index);}
		//else if ( comp->SuperCool > EElimit->MaxSupercool && comp->checkTrv && !comp->def){return (210+comp->Index);}
		else if ( comp->Ex_Comp > EElimit->ExhaustMax){return 220;}	
    48b2:	f8 01       	movw	r30, r16
    48b4:	66 85       	ldd	r22, Z+14	; 0x0e
    48b6:	70 e0       	ldi	r23, 0x00	; 0
    48b8:	80 e0       	ldi	r24, 0x00	; 0
    48ba:	90 e0       	ldi	r25, 0x00	; 0
    48bc:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    48c0:	9b 01       	movw	r18, r22
    48c2:	ac 01       	movw	r20, r24
    48c4:	69 81       	ldd	r22, Y+1	; 0x01
    48c6:	7a 81       	ldd	r23, Y+2	; 0x02
    48c8:	8b 81       	ldd	r24, Y+3	; 0x03
    48ca:	9c 81       	ldd	r25, Y+4	; 0x04
    48cc:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    48d0:	18 16       	cp	r1, r24
    48d2:	0c f4       	brge	.+2      	; 0x48d6 <Check_Erors+0x394>
    48d4:	63 c0       	rjmp	.+198    	; 0x499c <Check_Erors+0x45a>
		//else if (abs(comp->Src_In - comp->Src_Out) > EElimit->Delta_source_max && comp->checkErrors && EEpromData.AireToWater==0) {return (230+comp->Index);}
		//else if (abs(comp->Src_In - comp->Src_Out) <  EElimit->Delta_source_min && comp->checkErrors && EEpromData.AireToWater==0) {return (240+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out)  > EElimit->Delta_heating_max && comp->checkErrors) {return (250+comp->Index);}
    48d6:	a3 01       	movw	r20, r6
    48d8:	92 01       	movw	r18, r4
    48da:	c5 01       	movw	r24, r10
    48dc:	b4 01       	movw	r22, r8
    48de:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    48e2:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixsfsi>
    48e6:	9b 01       	movw	r18, r22
    48e8:	77 23       	and	r23, r23
    48ea:	24 f4       	brge	.+8      	; 0x48f4 <Check_Erors+0x3b2>
    48ec:	22 27       	eor	r18, r18
    48ee:	33 27       	eor	r19, r19
    48f0:	26 1b       	sub	r18, r22
    48f2:	37 0b       	sbc	r19, r23
    48f4:	c9 01       	movw	r24, r18
    48f6:	d8 01       	movw	r26, r16
    48f8:	54 96       	adiw	r26, 0x14	; 20
    48fa:	2c 91       	ld	r18, X
    48fc:	30 e0       	ldi	r19, 0x00	; 0
    48fe:	28 17       	cp	r18, r24
    4900:	39 07       	cpc	r19, r25
    4902:	64 f4       	brge	.+24     	; 0x491c <Check_Erors+0x3da>
    4904:	ed 81       	ldd	r30, Y+5	; 0x05
    4906:	fe 81       	ldd	r31, Y+6	; 0x06
    4908:	85 81       	ldd	r24, Z+5	; 0x05
    490a:	88 23       	and	r24, r24
    490c:	d1 f0       	breq	.+52     	; 0x4942 <Check_Erors+0x400>
    490e:	ee 58       	subi	r30, 0x8E	; 142
    4910:	ff 4f       	sbci	r31, 0xFF	; 255
    4912:	80 81       	ld	r24, Z
    4914:	91 81       	ldd	r25, Z+1	; 0x01
    4916:	86 50       	subi	r24, 0x06	; 6
    4918:	9f 4f       	sbci	r25, 0xFF	; 255
    491a:	63 c0       	rjmp	.+198    	; 0x49e2 <Check_Erors+0x4a0>
		else if (abs(comp->Heat_In - comp->Heat_Out) < EElimit->Delta_heating_min &&  comp->checkErrors) {return (260+comp->Index);} 
    491c:	d8 01       	movw	r26, r16
    491e:	53 96       	adiw	r26, 0x13	; 19
    4920:	2c 91       	ld	r18, X
    4922:	30 e0       	ldi	r19, 0x00	; 0
    4924:	82 17       	cp	r24, r18
    4926:	93 07       	cpc	r25, r19
    4928:	64 f4       	brge	.+24     	; 0x4942 <Check_Erors+0x400>
    492a:	ed 81       	ldd	r30, Y+5	; 0x05
    492c:	fe 81       	ldd	r31, Y+6	; 0x06
    492e:	85 81       	ldd	r24, Z+5	; 0x05
    4930:	88 23       	and	r24, r24
    4932:	39 f0       	breq	.+14     	; 0x4942 <Check_Erors+0x400>
    4934:	ee 58       	subi	r30, 0x8E	; 142
    4936:	ff 4f       	sbci	r31, 0xFF	; 255
    4938:	80 81       	ld	r24, Z
    493a:	91 81       	ldd	r25, Z+1	; 0x01
    493c:	8c 5f       	subi	r24, 0xFC	; 252
    493e:	9e 4f       	sbci	r25, 0xFE	; 254
    4940:	50 c0       	rjmp	.+160    	; 0x49e2 <Check_Erors+0x4a0>
		else if (!(ADE7758_getStatus() & ZXA) && EElimit->Power_380==1 ){return 271;} // ADE7758_resetStatus();
    4942:	f9 dd       	rcall	.-1038   	; 0x4536 <ADE7758_getStatus>
    4944:	71 fd       	sbrc	r23, 1
    4946:	05 c0       	rjmp	.+10     	; 0x4952 <Check_Erors+0x410>
    4948:	d8 01       	movw	r26, r16
    494a:	99 96       	adiw	r26, 0x29	; 41
    494c:	8c 91       	ld	r24, X
    494e:	81 30       	cpi	r24, 0x01	; 1
		else if (!(ADE7758_getStatus() & ZXB) && EElimit->Power_380==1 ){return 281;}//ADE7758_resetStatus();
    4950:	41 f1       	breq	.+80     	; 0x49a2 <Check_Erors+0x460>
    4952:	f1 dd       	rcall	.-1054   	; 0x4536 <ADE7758_getStatus>
    4954:	72 fd       	sbrc	r23, 2
    4956:	04 c0       	rjmp	.+8      	; 0x4960 <Check_Erors+0x41e>
    4958:	f8 01       	movw	r30, r16
    495a:	81 a5       	ldd	r24, Z+41	; 0x29
    495c:	81 30       	cpi	r24, 0x01	; 1
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 ){return 291;}//ADE7758_resetStatus();
    495e:	21 f1       	breq	.+72     	; 0x49a8 <Check_Erors+0x466>
    4960:	ea dd       	rcall	.-1068   	; 0x4536 <ADE7758_getStatus>
    4962:	73 fd       	sbrc	r23, 3
    4964:	05 c0       	rjmp	.+10     	; 0x4970 <Check_Erors+0x42e>
    4966:	d8 01       	movw	r26, r16
    4968:	99 96       	adiw	r26, 0x29	; 41
    496a:	8c 91       	ld	r24, X
    496c:	81 30       	cpi	r24, 0x01	; 1
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1){return 301;}//ADE7758_resetStatus();
    496e:	f9 f0       	breq	.+62     	; 0x49ae <Check_Erors+0x46c>
    4970:	e2 dd       	rcall	.-1084   	; 0x4536 <ADE7758_getStatus>
    4972:	83 fd       	sbrc	r24, 3
    4974:	1f c0       	rjmp	.+62     	; 0x49b4 <Check_Erors+0x472>
    4976:	f8 01       	movw	r30, r16
    4978:	81 a5       	ldd	r24, Z+41	; 0x29
    497a:	81 30       	cpi	r24, 0x01	; 1
    497c:	f1 f4       	brne	.+60     	; 0x49ba <Check_Erors+0x478>
    497e:	8d e2       	ldi	r24, 0x2D	; 45
    4980:	91 e0       	ldi	r25, 0x01	; 1
    4982:	2f c0       	rjmp	.+94     	; 0x49e2 <Check_Erors+0x4a0>
		else if (comp->Src_Out<-100) {return (60+comp->Index);}
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
    4984:	85 e6       	ldi	r24, 0x65	; 101
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	2c c0       	rjmp	.+88     	; 0x49e2 <Check_Erors+0x4a0>
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    498a:	86 e6       	ldi	r24, 0x66	; 102
    498c:	90 e0       	ldi	r25, 0x00	; 0
    498e:	29 c0       	rjmp	.+82     	; 0x49e2 <Check_Erors+0x4a0>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    4990:	8f e6       	ldi	r24, 0x6F	; 111
    4992:	90 e0       	ldi	r25, 0x00	; 0
    4994:	26 c0       	rjmp	.+76     	; 0x49e2 <Check_Erors+0x4a0>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    4996:	80 e7       	ldi	r24, 0x70	; 112
    4998:	90 e0       	ldi	r25, 0x00	; 0
    499a:	23 c0       	rjmp	.+70     	; 0x49e2 <Check_Erors+0x4a0>
		else if ( comp->Bac_Temp < EElimit->Cool_Min && comp->Cooling==1){return (170+comp->Index);}
		//else if ( comp->SuperHeat < EElimit->MinSuperheat && comp->checkTrv) {return (180+comp->Index);}
		//else if ( comp->SuperHeat > EElimit->MaxSuperheat && comp->checkTrv && !comp->def) {return (190+comp->Index);}
		//else if ( comp->SuperCool < EElimit->MinSupercool && comp->checkTrv){return (200+comp->Index);}
		//else if ( comp->SuperCool > EElimit->MaxSupercool && comp->checkTrv && !comp->def){return (210+comp->Index);}
		else if ( comp->Ex_Comp > EElimit->ExhaustMax){return 220;}	
    499c:	8c ed       	ldi	r24, 0xDC	; 220
    499e:	90 e0       	ldi	r25, 0x00	; 0
    49a0:	20 c0       	rjmp	.+64     	; 0x49e2 <Check_Erors+0x4a0>
		//else if (abs(comp->Src_In - comp->Src_Out) > EElimit->Delta_source_max && comp->checkErrors && EEpromData.AireToWater==0) {return (230+comp->Index);}
		//else if (abs(comp->Src_In - comp->Src_Out) <  EElimit->Delta_source_min && comp->checkErrors && EEpromData.AireToWater==0) {return (240+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out)  > EElimit->Delta_heating_max && comp->checkErrors) {return (250+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out) < EElimit->Delta_heating_min &&  comp->checkErrors) {return (260+comp->Index);} 
		else if (!(ADE7758_getStatus() & ZXA) && EElimit->Power_380==1 ){return 271;} // ADE7758_resetStatus();
    49a2:	8f e0       	ldi	r24, 0x0F	; 15
    49a4:	91 e0       	ldi	r25, 0x01	; 1
    49a6:	1d c0       	rjmp	.+58     	; 0x49e2 <Check_Erors+0x4a0>
		else if (!(ADE7758_getStatus() & ZXB) && EElimit->Power_380==1 ){return 281;}//ADE7758_resetStatus();
    49a8:	89 e1       	ldi	r24, 0x19	; 25
    49aa:	91 e0       	ldi	r25, 0x01	; 1
    49ac:	1a c0       	rjmp	.+52     	; 0x49e2 <Check_Erors+0x4a0>
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 ){return 291;}//ADE7758_resetStatus();
    49ae:	83 e2       	ldi	r24, 0x23	; 35
    49b0:	91 e0       	ldi	r25, 0x01	; 1
    49b2:	17 c0       	rjmp	.+46     	; 0x49e2 <Check_Erors+0x4a0>
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1){return 301;}//ADE7758_resetStatus();
		//else if (comp->Src_In > EElimit->Source_Max){return (400+comp->Index);}
		//else if (comp->Src_In < EElimit->Source_Min){return (410+comp->Index);}			
		else {return 0;}
    49b4:	80 e0       	ldi	r24, 0x00	; 0
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	14 c0       	rjmp	.+40     	; 0x49e2 <Check_Erors+0x4a0>
    49ba:	80 e0       	ldi	r24, 0x00	; 0
    49bc:	90 e0       	ldi	r25, 0x00	; 0
    49be:	11 c0       	rjmp	.+34     	; 0x49e2 <Check_Erors+0x4a0>
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    49c0:	4b 99       	sbic	0x09, 3	; 9
    49c2:	d6 ce       	rjmp	.-596    	; 0x4770 <Check_Erors+0x22e>
    49c4:	08 c0       	rjmp	.+16     	; 0x49d6 <Check_Erors+0x494>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    49c6:	65 99       	sbic	0x0c, 5	; 12
    49c8:	e6 ce       	rjmp	.-564    	; 0x4796 <Check_Erors+0x254>
    49ca:	ef ce       	rjmp	.-546    	; 0x47aa <Check_Erors+0x268>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    49cc:	8c b1       	in	r24, 0x0c	; 12
    49ce:	fd ce       	rjmp	.-518    	; 0x47ca <Check_Erors+0x288>
    49d0:	65 99       	sbic	0x0c, 5	; 12
    49d2:	f2 ce       	rjmp	.-540    	; 0x47b8 <Check_Erors+0x276>
    49d4:	fa ce       	rjmp	.-524    	; 0x47ca <Check_Erors+0x288>
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    49d6:	65 99       	sbic	0x0c, 5	; 12
    49d8:	de ce       	rjmp	.-580    	; 0x4796 <Check_Erors+0x254>
    49da:	e7 ce       	rjmp	.-562    	; 0x47aa <Check_Erors+0x268>
    49dc:	65 99       	sbic	0x0c, 5	; 12
    49de:	f6 cf       	rjmp	.-20     	; 0x49cc <Check_Erors+0x48a>
    49e0:	e4 ce       	rjmp	.-568    	; 0x47aa <Check_Erors+0x268>
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 ){return 291;}//ADE7758_resetStatus();
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1){return 301;}//ADE7758_resetStatus();
		//else if (comp->Src_In > EElimit->Source_Max){return (400+comp->Index);}
		//else if (comp->Src_In < EElimit->Source_Min){return (410+comp->Index);}			
		else {return 0;}
    49e2:	26 96       	adiw	r28, 0x06	; 6
    49e4:	0f b6       	in	r0, 0x3f	; 63
    49e6:	f8 94       	cli
    49e8:	de bf       	out	0x3e, r29	; 62
    49ea:	0f be       	out	0x3f, r0	; 63
    49ec:	cd bf       	out	0x3d, r28	; 61
    49ee:	df 91       	pop	r29
    49f0:	cf 91       	pop	r28
    49f2:	1f 91       	pop	r17
    49f4:	0f 91       	pop	r16
    49f6:	ff 90       	pop	r15
    49f8:	ef 90       	pop	r14
    49fa:	df 90       	pop	r13
    49fc:	cf 90       	pop	r12
    49fe:	bf 90       	pop	r11
    4a00:	af 90       	pop	r10
    4a02:	9f 90       	pop	r9
    4a04:	8f 90       	pop	r8
    4a06:	7f 90       	pop	r7
    4a08:	6f 90       	pop	r6
    4a0a:	5f 90       	pop	r5
    4a0c:	4f 90       	pop	r4
    4a0e:	08 95       	ret

00004a10 <start_1_Timer>:
	
	
}
void start_1_Timer()
{
	TIMSK1 |= (1<<OCIE1A);
    4a10:	ef e6       	ldi	r30, 0x6F	; 111
    4a12:	f0 e0       	ldi	r31, 0x00	; 0
    4a14:	80 81       	ld	r24, Z
    4a16:	82 60       	ori	r24, 0x02	; 2
    4a18:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11);//1<<CS10 |
    4a1a:	e1 e8       	ldi	r30, 0x81	; 129
    4a1c:	f0 e0       	ldi	r31, 0x00	; 0
    4a1e:	80 81       	ld	r24, Z
    4a20:	82 60       	ori	r24, 0x02	; 2
    4a22:	80 83       	st	Z, r24
    4a24:	08 95       	ret

00004a26 <stop_1_Timer>:
	
}
void stop_1_Timer()
{
	TCCR1B &= ~ (1<<CS10);
    4a26:	e1 e8       	ldi	r30, 0x81	; 129
    4a28:	f0 e0       	ldi	r31, 0x00	; 0
    4a2a:	80 81       	ld	r24, Z
    4a2c:	8e 7f       	andi	r24, 0xFE	; 254
    4a2e:	80 83       	st	Z, r24
	TCNT1=0;
    4a30:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    4a34:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TIMSK1 &= ~( _BV( OCIE1A ) );
    4a38:	ef e6       	ldi	r30, 0x6F	; 111
    4a3a:	f0 e0       	ldi	r31, 0x00	; 0
    4a3c:	80 81       	ld	r24, Z
    4a3e:	8d 7f       	andi	r24, 0xFD	; 253
    4a40:	80 83       	st	Z, r24
	TIFR1 |= _BV( OCF1A );
    4a42:	b1 9a       	sbi	0x16, 1	; 22
    4a44:	08 95       	ret

00004a46 <timer_1_Init>:
void timer_1_Init()
{
	// --- TIMER1_COMPA irq ---
	// selected time = 1562 us (24992 ticks)
	// prescaler = 1 (1 ticks ... 4.096 ms)
	TCCR1B = (1<<WGM12);//|(1<<CS10)
    4a46:	88 e0       	ldi	r24, 0x08	; 8
    4a48:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	OCR1AH = 158 ;//158
    4a4c:	8e e9       	ldi	r24, 0x9E	; 158
    4a4e:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL =96;//96
    4a52:	80 e6       	ldi	r24, 0x60	; 96
    4a54:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	stop_1_Timer();
    4a58:	e6 cf       	rjmp	.-52     	; 0x4a26 <stop_1_Timer>
    4a5a:	08 95       	ret

00004a5c <readSysReg>:
	TIMSK1 &= ~( _BV( OCIE1A ) );
	TIFR1 |= _BV( OCF1A );
}

int readSysReg(xCompressor*compPtr,xEEdata *eeprom,uint16_t adress)
{
    4a5c:	cf 93       	push	r28
    4a5e:	df 93       	push	r29
	int temp;
	switch(adress)
    4a60:	fa 01       	movw	r30, r20
    4a62:	3a 97       	sbiw	r30, 0x0a	; 10
    4a64:	e7 3d       	cpi	r30, 0xD7	; 215
    4a66:	41 e0       	ldi	r20, 0x01	; 1
    4a68:	f4 07       	cpc	r31, r20
    4a6a:	08 f0       	brcs	.+2      	; 0x4a6e <readSysReg+0x12>
    4a6c:	11 c2       	rjmp	.+1058   	; 0x4e90 <readSysReg+0x434>
    4a6e:	eb 01       	movw	r28, r22
    4a70:	dc 01       	movw	r26, r24
    4a72:	88 27       	eor	r24, r24
    4a74:	e4 56       	subi	r30, 0x64	; 100
    4a76:	ff 4f       	sbci	r31, 0xFF	; 255
    4a78:	8f 4f       	sbci	r24, 0xFF	; 255
    4a7a:	0c 94 44 58 	jmp	0xb088	; 0xb088 <__tablejump2__>
	{
		case 11: case 12: temp =  (int)   compPtr->compOn;break;
    4a7e:	1b 96       	adiw	r26, 0x0b	; 11
    4a80:	6c 91       	ld	r22, X
    4a82:	26 2f       	mov	r18, r22
    4a84:	30 e0       	ldi	r19, 0x00	; 0
    4a86:	04 c2       	rjmp	.+1032   	; 0x4e90 <readSysReg+0x434>
		case 21: case 22: temp =   (int)  compPtr->srcPOn;break;
    4a88:	1f 96       	adiw	r26, 0x0f	; 15
    4a8a:	6c 91       	ld	r22, X
    4a8c:	26 2f       	mov	r18, r22
    4a8e:	30 e0       	ldi	r19, 0x00	; 0
    4a90:	ff c1       	rjmp	.+1022   	; 0x4e90 <readSysReg+0x434>
		case 31: case 32: temp =   (int)  compPtr->heatPOn;break;
    4a92:	1c 96       	adiw	r26, 0x0c	; 12
    4a94:	6c 91       	ld	r22, X
    4a96:	26 2f       	mov	r18, r22
    4a98:	30 e0       	ldi	r19, 0x00	; 0
    4a9a:	fa c1       	rjmp	.+1012   	; 0x4e90 <readSysReg+0x434>
		case 41: case 42: temp =   (int)  compPtr->revVOn;break;
    4a9c:	1e 96       	adiw	r26, 0x0e	; 14
    4a9e:	6c 91       	ld	r22, X
    4aa0:	26 2f       	mov	r18, r22
    4aa2:	30 e0       	ldi	r19, 0x00	; 0
    4aa4:	f5 c1       	rjmp	.+1002   	; 0x4e90 <readSysReg+0x434>
		case 51: case 52: temp =   (int)  compPtr->threeWOn;break;
    4aa6:	1d 96       	adiw	r26, 0x0d	; 13
    4aa8:	6c 91       	ld	r22, X
    4aaa:	26 2f       	mov	r18, r22
    4aac:	30 e0       	ldi	r19, 0x00	; 0
    4aae:	f0 c1       	rjmp	.+992    	; 0x4e90 <readSysReg+0x434>
		case 61: case 62: temp =   (int)  compPtr->Trv_position;break;
    4ab0:	a2 59       	subi	r26, 0x92	; 146
    4ab2:	bf 4f       	sbci	r27, 0xFF	; 255
    4ab4:	2d 91       	ld	r18, X+
    4ab6:	3c 91       	ld	r19, X
    4ab8:	eb c1       	rjmp	.+982    	; 0x4e90 <readSysReg+0x434>
		
		case 71: case 72: temp =   (int)   (compPtr->Bac_Temp*10);break;
    4aba:	20 e0       	ldi	r18, 0x00	; 0
    4abc:	30 e0       	ldi	r19, 0x00	; 0
    4abe:	40 e2       	ldi	r20, 0x20	; 32
    4ac0:	51 e4       	ldi	r21, 0x41	; 65
    4ac2:	56 96       	adiw	r26, 0x16	; 22
    4ac4:	6d 91       	ld	r22, X+
    4ac6:	7d 91       	ld	r23, X+
    4ac8:	8d 91       	ld	r24, X+
    4aca:	9c 91       	ld	r25, X
    4acc:	59 97       	sbiw	r26, 0x19	; 25
    4ace:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    4ad2:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixsfsi>
    4ad6:	9b 01       	movw	r18, r22
    4ad8:	db c1       	rjmp	.+950    	; 0x4e90 <readSysReg+0x434>
		case 81: case 82:  temp =   (int)  (compPtr->Dhw_Temp*10);break;
    4ada:	20 e0       	ldi	r18, 0x00	; 0
    4adc:	30 e0       	ldi	r19, 0x00	; 0
    4ade:	40 e2       	ldi	r20, 0x20	; 32
    4ae0:	51 e4       	ldi	r21, 0x41	; 65
    4ae2:	52 96       	adiw	r26, 0x12	; 18
    4ae4:	6d 91       	ld	r22, X+
    4ae6:	7d 91       	ld	r23, X+
    4ae8:	8d 91       	ld	r24, X+
    4aea:	9c 91       	ld	r25, X
    4aec:	55 97       	sbiw	r26, 0x15	; 21
    4aee:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    4af2:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixsfsi>
    4af6:	9b 01       	movw	r18, r22
    4af8:	cb c1       	rjmp	.+918    	; 0x4e90 <readSysReg+0x434>
		case 91:case 92:  temp =  (int)  (compPtr->Src_In*10);break;
    4afa:	20 e0       	ldi	r18, 0x00	; 0
    4afc:	30 e0       	ldi	r19, 0x00	; 0
    4afe:	40 e2       	ldi	r20, 0x20	; 32
    4b00:	51 e4       	ldi	r21, 0x41	; 65
    4b02:	d2 96       	adiw	r26, 0x32	; 50
    4b04:	6d 91       	ld	r22, X+
    4b06:	7d 91       	ld	r23, X+
    4b08:	8d 91       	ld	r24, X+
    4b0a:	9c 91       	ld	r25, X
    4b0c:	d5 97       	sbiw	r26, 0x35	; 53
    4b0e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    4b12:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixsfsi>
    4b16:	9b 01       	movw	r18, r22
    4b18:	bb c1       	rjmp	.+886    	; 0x4e90 <readSysReg+0x434>
		case 101:case 102:  temp =  (int)  (compPtr->Src_Out*10);break;
    4b1a:	20 e0       	ldi	r18, 0x00	; 0
    4b1c:	30 e0       	ldi	r19, 0x00	; 0
    4b1e:	40 e2       	ldi	r20, 0x20	; 32
    4b20:	51 e4       	ldi	r21, 0x41	; 65
    4b22:	d6 96       	adiw	r26, 0x36	; 54
    4b24:	6d 91       	ld	r22, X+
    4b26:	7d 91       	ld	r23, X+
    4b28:	8d 91       	ld	r24, X+
    4b2a:	9c 91       	ld	r25, X
    4b2c:	d9 97       	sbiw	r26, 0x39	; 57
    4b2e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    4b32:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixsfsi>
    4b36:	9b 01       	movw	r18, r22
    4b38:	ab c1       	rjmp	.+854    	; 0x4e90 <readSysReg+0x434>
		case 111:case 112: temp =   (int)  (compPtr->error);break;
    4b3a:	a0 59       	subi	r26, 0x90	; 144
    4b3c:	bf 4f       	sbci	r27, 0xFF	; 255
    4b3e:	2d 91       	ld	r18, X+
    4b40:	3c 91       	ld	r19, X
    4b42:	a6 c1       	rjmp	.+844    	; 0x4e90 <readSysReg+0x434>
		case 121: case 122: temp =   (int)   (compPtr->Cond_Temp*10);break;
    4b44:	ae 5b       	subi	r26, 0xBE	; 190
    4b46:	bf 4f       	sbci	r27, 0xFF	; 255
    4b48:	20 e0       	ldi	r18, 0x00	; 0
    4b4a:	30 e0       	ldi	r19, 0x00	; 0
    4b4c:	40 e2       	ldi	r20, 0x20	; 32
    4b4e:	51 e4       	ldi	r21, 0x41	; 65
    4b50:	6d 91       	ld	r22, X+
    4b52:	7d 91       	ld	r23, X+
    4b54:	8d 91       	ld	r24, X+
    4b56:	9c 91       	ld	r25, X
    4b58:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    4b5c:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixsfsi>
    4b60:	9b 01       	movw	r18, r22
    4b62:	96 c1       	rjmp	.+812    	; 0x4e90 <readSysReg+0x434>
		case 131:case 132: temp =   (int)  (compPtr->Suc_Comp*10);break;
    4b64:	de 96       	adiw	r26, 0x3e	; 62
    4b66:	20 e0       	ldi	r18, 0x00	; 0
    4b68:	30 e0       	ldi	r19, 0x00	; 0
    4b6a:	40 e2       	ldi	r20, 0x20	; 32
    4b6c:	51 e4       	ldi	r21, 0x41	; 65
    4b6e:	6d 91       	ld	r22, X+
    4b70:	7d 91       	ld	r23, X+
    4b72:	8d 91       	ld	r24, X+
    4b74:	9c 91       	ld	r25, X
    4b76:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    4b7a:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixsfsi>
    4b7e:	9b 01       	movw	r18, r22
    4b80:	87 c1       	rjmp	.+782    	; 0x4e90 <readSysReg+0x434>
		case 141:case 142: temp =   (int)  (compPtr->SuperCool*10);break;
    4b82:	a6 5b       	subi	r26, 0xB6	; 182
    4b84:	bf 4f       	sbci	r27, 0xFF	; 255
    4b86:	20 e0       	ldi	r18, 0x00	; 0
    4b88:	30 e0       	ldi	r19, 0x00	; 0
    4b8a:	40 e2       	ldi	r20, 0x20	; 32
    4b8c:	51 e4       	ldi	r21, 0x41	; 65
    4b8e:	6d 91       	ld	r22, X+
    4b90:	7d 91       	ld	r23, X+
    4b92:	8d 91       	ld	r24, X+
    4b94:	9c 91       	ld	r25, X
    4b96:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    4b9a:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixsfsi>
    4b9e:	9b 01       	movw	r18, r22
    4ba0:	77 c1       	rjmp	.+750    	; 0x4e90 <readSysReg+0x434>
		case 151:case 152: temp =   (int)  (compPtr->SuperHeat*10);break;
    4ba2:	aa 5b       	subi	r26, 0xBA	; 186
    4ba4:	bf 4f       	sbci	r27, 0xFF	; 255
    4ba6:	20 e0       	ldi	r18, 0x00	; 0
    4ba8:	30 e0       	ldi	r19, 0x00	; 0
    4baa:	40 e2       	ldi	r20, 0x20	; 32
    4bac:	51 e4       	ldi	r21, 0x41	; 65
    4bae:	6d 91       	ld	r22, X+
    4bb0:	7d 91       	ld	r23, X+
    4bb2:	8d 91       	ld	r24, X+
    4bb4:	9c 91       	ld	r25, X
    4bb6:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    4bba:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixsfsi>
    4bbe:	9b 01       	movw	r18, r22
    4bc0:	67 c1       	rjmp	.+718    	; 0x4e90 <readSysReg+0x434>
		case 161:case 162:  temp =  (int)  (compPtr->Heat_In*10);break;
    4bc2:	20 e0       	ldi	r18, 0x00	; 0
    4bc4:	30 e0       	ldi	r19, 0x00	; 0
    4bc6:	40 e2       	ldi	r20, 0x20	; 32
    4bc8:	51 e4       	ldi	r21, 0x41	; 65
    4bca:	9e 96       	adiw	r26, 0x2e	; 46
    4bcc:	6d 91       	ld	r22, X+
    4bce:	7d 91       	ld	r23, X+
    4bd0:	8d 91       	ld	r24, X+
    4bd2:	9c 91       	ld	r25, X
    4bd4:	d1 97       	sbiw	r26, 0x31	; 49
    4bd6:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    4bda:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixsfsi>
    4bde:	9b 01       	movw	r18, r22
    4be0:	57 c1       	rjmp	.+686    	; 0x4e90 <readSysReg+0x434>
		case 171:case 172:  temp =  (int)  (compPtr->Heat_Out*10);break;		
    4be2:	20 e0       	ldi	r18, 0x00	; 0
    4be4:	30 e0       	ldi	r19, 0x00	; 0
    4be6:	40 e2       	ldi	r20, 0x20	; 32
    4be8:	51 e4       	ldi	r21, 0x41	; 65
    4bea:	9a 96       	adiw	r26, 0x2a	; 42
    4bec:	6d 91       	ld	r22, X+
    4bee:	7d 91       	ld	r23, X+
    4bf0:	8d 91       	ld	r24, X+
    4bf2:	9c 91       	ld	r25, X
    4bf4:	9d 97       	sbiw	r26, 0x2d	; 45
    4bf6:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    4bfa:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixsfsi>
    4bfe:	9b 01       	movw	r18, r22
    4c00:	47 c1       	rjmp	.+654    	; 0x4e90 <readSysReg+0x434>
		case 181:case 182: temp =   (int)  (compPtr->High_Press*10);break;
    4c02:	20 e0       	ldi	r18, 0x00	; 0
    4c04:	30 e0       	ldi	r19, 0x00	; 0
    4c06:	40 e2       	ldi	r20, 0x20	; 32
    4c08:	51 e4       	ldi	r21, 0x41	; 65
    4c0a:	5a 96       	adiw	r26, 0x1a	; 26
    4c0c:	6d 91       	ld	r22, X+
    4c0e:	7d 91       	ld	r23, X+
    4c10:	8d 91       	ld	r24, X+
    4c12:	9c 91       	ld	r25, X
    4c14:	5d 97       	sbiw	r26, 0x1d	; 29
    4c16:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    4c1a:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixsfsi>
    4c1e:	9b 01       	movw	r18, r22
    4c20:	37 c1       	rjmp	.+622    	; 0x4e90 <readSysReg+0x434>
		case 191:case 192: temp =   (int)  (compPtr->Low_Press*10);break;
    4c22:	20 e0       	ldi	r18, 0x00	; 0
    4c24:	30 e0       	ldi	r19, 0x00	; 0
    4c26:	40 e2       	ldi	r20, 0x20	; 32
    4c28:	51 e4       	ldi	r21, 0x41	; 65
    4c2a:	5e 96       	adiw	r26, 0x1e	; 30
    4c2c:	6d 91       	ld	r22, X+
    4c2e:	7d 91       	ld	r23, X+
    4c30:	8d 91       	ld	r24, X+
    4c32:	9c 91       	ld	r25, X
    4c34:	91 97       	sbiw	r26, 0x21	; 33
    4c36:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    4c3a:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixsfsi>
    4c3e:	9b 01       	movw	r18, r22
    4c40:	27 c1       	rjmp	.+590    	; 0x4e90 <readSysReg+0x434>
		case 201:case 202: temp =   (int)  (compPtr->Ex_Comp);break;
    4c42:	da 96       	adiw	r26, 0x3a	; 58
    4c44:	6d 91       	ld	r22, X+
    4c46:	7d 91       	ld	r23, X+
    4c48:	8d 91       	ld	r24, X+
    4c4a:	9c 91       	ld	r25, X
    4c4c:	dd 97       	sbiw	r26, 0x3d	; 61
    4c4e:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixsfsi>
    4c52:	9b 01       	movw	r18, r22
    4c54:	1d c1       	rjmp	.+570    	; 0x4e90 <readSysReg+0x434>
		
	
		
		//-----------------------------------eeprom--------
		case 10:  temp =    eeprom->Compressor_delay;break;
    4c56:	68 81       	ld	r22, Y
    4c58:	26 2f       	mov	r18, r22
    4c5a:	30 e0       	ldi	r19, 0x00	; 0
    4c5c:	19 c1       	rjmp	.+562    	; 0x4e90 <readSysReg+0x434>
		case 20:  temp =    eeprom->HeatingPump_delay;break;
    4c5e:	6b 81       	ldd	r22, Y+3	; 0x03
    4c60:	26 2f       	mov	r18, r22
    4c62:	30 e0       	ldi	r19, 0x00	; 0
    4c64:	15 c1       	rjmp	.+554    	; 0x4e90 <readSysReg+0x434>
		case 30:  temp =    eeprom->Source_Pump_delay;break;
    4c66:	69 81       	ldd	r22, Y+1	; 0x01
    4c68:	26 2f       	mov	r18, r22
    4c6a:	30 e0       	ldi	r19, 0x00	; 0
    4c6c:	11 c1       	rjmp	.+546    	; 0x4e90 <readSysReg+0x434>
		case 40:  temp =    eeprom->Revers_Valve_delay;break;
    4c6e:	6a 81       	ldd	r22, Y+2	; 0x02
    4c70:	26 2f       	mov	r18, r22
    4c72:	30 e0       	ldi	r19, 0x00	; 0
    4c74:	0d c1       	rjmp	.+538    	; 0x4e90 <readSysReg+0x434>
		case 50:  temp =    eeprom->Three_Way_delay;break;
    4c76:	6c 81       	ldd	r22, Y+4	; 0x04
    4c78:	26 2f       	mov	r18, r22
    4c7a:	30 e0       	ldi	r19, 0x00	; 0
    4c7c:	09 c1       	rjmp	.+530    	; 0x4e90 <readSysReg+0x434>
		case 60:  temp =    (int)  eeprom->Cool_Max;break;
    4c7e:	6c 85       	ldd	r22, Y+12	; 0x0c
    4c80:	26 2f       	mov	r18, r22
    4c82:	30 e0       	ldi	r19, 0x00	; 0
    4c84:	05 c1       	rjmp	.+522    	; 0x4e90 <readSysReg+0x434>
		case 70:  temp =    (int)  eeprom->Cool_Min;break;
    4c86:	6d 85       	ldd	r22, Y+13	; 0x0d
    4c88:	26 2f       	mov	r18, r22
    4c8a:	30 e0       	ldi	r19, 0x00	; 0
    4c8c:	01 c1       	rjmp	.+514    	; 0x4e90 <readSysReg+0x434>
		case 80:  temp =    (int)  eeprom->HEAT_Max;break;
    4c8e:	69 85       	ldd	r22, Y+9	; 0x09
    4c90:	26 2f       	mov	r18, r22
    4c92:	30 e0       	ldi	r19, 0x00	; 0
    4c94:	fd c0       	rjmp	.+506    	; 0x4e90 <readSysReg+0x434>
		case 90:  temp =    (int)  eeprom->HEAT_Min;break;
    4c96:	6a 85       	ldd	r22, Y+10	; 0x0a
    4c98:	26 2f       	mov	r18, r22
    4c9a:	30 e0       	ldi	r19, 0x00	; 0
    4c9c:	f9 c0       	rjmp	.+498    	; 0x4e90 <readSysReg+0x434>
		case 100: temp =    (int)  eeprom->Delta_heating_max;break;
    4c9e:	6c 89       	ldd	r22, Y+20	; 0x14
    4ca0:	26 2f       	mov	r18, r22
    4ca2:	30 e0       	ldi	r19, 0x00	; 0
    4ca4:	f5 c0       	rjmp	.+490    	; 0x4e90 <readSysReg+0x434>
		case 110: temp =    (int)  eeprom->Delta_heating_min;break;
    4ca6:	6b 89       	ldd	r22, Y+19	; 0x13
    4ca8:	26 2f       	mov	r18, r22
    4caa:	30 e0       	ldi	r19, 0x00	; 0
    4cac:	f1 c0       	rjmp	.+482    	; 0x4e90 <readSysReg+0x434>
		case 120: temp =    (int)  eeprom->Delta_source_max;break;
    4cae:	6e 89       	ldd	r22, Y+22	; 0x16
    4cb0:	26 2f       	mov	r18, r22
    4cb2:	30 e0       	ldi	r19, 0x00	; 0
    4cb4:	ed c0       	rjmp	.+474    	; 0x4e90 <readSysReg+0x434>
		case 130: temp =    (int)  eeprom->Delta_source_min;break;
    4cb6:	6d 89       	ldd	r22, Y+21	; 0x15
    4cb8:	26 2f       	mov	r18, r22
    4cba:	30 e0       	ldi	r19, 0x00	; 0
    4cbc:	e9 c0       	rjmp	.+466    	; 0x4e90 <readSysReg+0x434>
		case 140: temp =    (int)  eeprom->diffCOOL;break;
    4cbe:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4cc0:	26 2f       	mov	r18, r22
    4cc2:	30 e0       	ldi	r19, 0x00	; 0
    4cc4:	e5 c0       	rjmp	.+458    	; 0x4e90 <readSysReg+0x434>
		case 150: temp =    (int)  eeprom->diffDHW ;break;
    4cc6:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4cc8:	26 2f       	mov	r18, r22
    4cca:	30 e0       	ldi	r19, 0x00	; 0
    4ccc:	e1 c0       	rjmp	.+450    	; 0x4e90 <readSysReg+0x434>
		case 160: temp =    (int)  eeprom->diffHEAT;break;
    4cce:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4cd0:	26 2f       	mov	r18, r22
    4cd2:	30 e0       	ldi	r19, 0x00	; 0
    4cd4:	dd c0       	rjmp	.+442    	; 0x4e90 <readSysReg+0x434>
		case 170: temp =    (int)  eeprom->AireToWater;break;
    4cd6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4cd8:	26 2f       	mov	r18, r22
    4cda:	30 e0       	ldi	r19, 0x00	; 0
    4cdc:	d9 c0       	rjmp	.+434    	; 0x4e90 <readSysReg+0x434>
		case 180: temp =    (int)  eeprom->ExhaustMax;break;
    4cde:	6e 85       	ldd	r22, Y+14	; 0x0e
    4ce0:	26 2f       	mov	r18, r22
    4ce2:	30 e0       	ldi	r19, 0x00	; 0
    4ce4:	d5 c0       	rjmp	.+426    	; 0x4e90 <readSysReg+0x434>
		case 190: temp =    (int)  eeprom->cool;break;
    4ce6:	6f a1       	ldd	r22, Y+39	; 0x27
    4ce8:	26 2f       	mov	r18, r22
    4cea:	30 e0       	ldi	r19, 0x00	; 0
    4cec:	d1 c0       	rjmp	.+418    	; 0x4e90 <readSysReg+0x434>
		case 200: temp =    (int)  eeprom->heat;break;
    4cee:	6e a1       	ldd	r22, Y+38	; 0x26
    4cf0:	26 2f       	mov	r18, r22
    4cf2:	30 e0       	ldi	r19, 0x00	; 0
    4cf4:	cd c0       	rjmp	.+410    	; 0x4e90 <readSysReg+0x434>
		case 210: temp =    (int)  eeprom->heatWater;break;
    4cf6:	6d a1       	ldd	r22, Y+37	; 0x25
    4cf8:	26 2f       	mov	r18, r22
    4cfa:	30 e0       	ldi	r19, 0x00	; 0
    4cfc:	c9 c0       	rjmp	.+402    	; 0x4e90 <readSysReg+0x434>
		case 220: temp =    (int)  eeprom->HP_Max;break;
    4cfe:	6e 81       	ldd	r22, Y+6	; 0x06
    4d00:	26 2f       	mov	r18, r22
    4d02:	30 e0       	ldi	r19, 0x00	; 0
    4d04:	c5 c0       	rjmp	.+394    	; 0x4e90 <readSysReg+0x434>
		case 230: temp =    (int)  eeprom->LP_Max;break;
    4d06:	68 85       	ldd	r22, Y+8	; 0x08
    4d08:	26 2f       	mov	r18, r22
    4d0a:	30 e0       	ldi	r19, 0x00	; 0
    4d0c:	c1 c0       	rjmp	.+386    	; 0x4e90 <readSysReg+0x434>
		case 240: temp =    (int)  eeprom->HP_Min;break;
    4d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    4d10:	26 2f       	mov	r18, r22
    4d12:	30 e0       	ldi	r19, 0x00	; 0
    4d14:	bd c0       	rjmp	.+378    	; 0x4e90 <readSysReg+0x434>
		case 250: temp =    (int)  eeprom->LP_Min;break;
    4d16:	fb 01       	movw	r30, r22
    4d18:	e4 5a       	subi	r30, 0xA4	; 164
    4d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d1c:	60 81       	ld	r22, Z
    4d1e:	71 81       	ldd	r23, Z+1	; 0x01
    4d20:	82 81       	ldd	r24, Z+2	; 0x02
    4d22:	93 81       	ldd	r25, Z+3	; 0x03
    4d24:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixsfsi>
    4d28:	9b 01       	movw	r18, r22
    4d2a:	b2 c0       	rjmp	.+356    	; 0x4e90 <readSysReg+0x434>
		case 260: temp =    (int)  eeprom->MaxSupercool;break;
    4d2c:	6a 89       	ldd	r22, Y+18	; 0x12
    4d2e:	26 2f       	mov	r18, r22
    4d30:	30 e0       	ldi	r19, 0x00	; 0
    4d32:	ae c0       	rjmp	.+348    	; 0x4e90 <readSysReg+0x434>
		case 270: temp =    (int)  eeprom->MinSupercool;break;
    4d34:	69 89       	ldd	r22, Y+17	; 0x11
    4d36:	26 2f       	mov	r18, r22
    4d38:	30 e0       	ldi	r19, 0x00	; 0
    4d3a:	aa c0       	rjmp	.+340    	; 0x4e90 <readSysReg+0x434>
		case 280: temp =    (int)  eeprom->MaxSuperheat;break;
    4d3c:	68 89       	ldd	r22, Y+16	; 0x10
    4d3e:	26 2f       	mov	r18, r22
    4d40:	30 e0       	ldi	r19, 0x00	; 0
    4d42:	a6 c0       	rjmp	.+332    	; 0x4e90 <readSysReg+0x434>
		case 290: temp =    (int)  eeprom->MinSuperheat;break;
    4d44:	6f 85       	ldd	r22, Y+15	; 0x0f
    4d46:	26 2f       	mov	r18, r22
    4d48:	30 e0       	ldi	r19, 0x00	; 0
    4d4a:	a2 c0       	rjmp	.+324    	; 0x4e90 <readSysReg+0x434>
		case 300: temp =    (int)  eeprom->number_turnon_threeway;break;
    4d4c:	fb 01       	movw	r30, r22
    4d4e:	ea 5b       	subi	r30, 0xBA	; 186
    4d50:	ff 4f       	sbci	r31, 0xFF	; 255
    4d52:	20 81       	ld	r18, Z
    4d54:	31 81       	ldd	r19, Z+1	; 0x01
    4d56:	9c c0       	rjmp	.+312    	; 0x4e90 <readSysReg+0x434>
		case 310: temp =    (int)  eeprom->power;break;
    4d58:	6c a1       	ldd	r22, Y+36	; 0x24
    4d5a:	26 2f       	mov	r18, r22
    4d5c:	30 e0       	ldi	r19, 0x00	; 0
    4d5e:	98 c0       	rjmp	.+304    	; 0x4e90 <readSysReg+0x434>
		case 320: temp =    (int)  eeprom->Set_Cooling;break;
    4d60:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4d62:	26 2f       	mov	r18, r22
    4d64:	30 e0       	ldi	r19, 0x00	; 0
    4d66:	94 c0       	rjmp	.+296    	; 0x4e90 <readSysReg+0x434>
		case 330: temp =    (int)  eeprom->Set_DHW;break;
    4d68:	6b 8d       	ldd	r22, Y+27	; 0x1b
    4d6a:	26 2f       	mov	r18, r22
    4d6c:	30 e0       	ldi	r19, 0x00	; 0
    4d6e:	90 c0       	rjmp	.+288    	; 0x4e90 <readSysReg+0x434>
		case 340: temp =    (int)  eeprom->Set_Heating;break;
    4d70:	69 8d       	ldd	r22, Y+25	; 0x19
    4d72:	26 2f       	mov	r18, r22
    4d74:	30 e0       	ldi	r19, 0x00	; 0
    4d76:	8c c0       	rjmp	.+280    	; 0x4e90 <readSysReg+0x434>
		case 350: temp =    (int)  eeprom->TempDef;break;
    4d78:	2a a5       	ldd	r18, Y+42	; 0x2a
    4d7a:	3b a5       	ldd	r19, Y+43	; 0x2b
    4d7c:	89 c0       	rjmp	.+274    	; 0x4e90 <readSysReg+0x434>
		case 360: temp =    (int)  eeprom->TimeDef;break;
    4d7e:	69 a1       	ldd	r22, Y+33	; 0x21
    4d80:	26 2f       	mov	r18, r22
    4d82:	30 e0       	ldi	r19, 0x00	; 0
    4d84:	85 c0       	rjmp	.+266    	; 0x4e90 <readSysReg+0x434>
		
		
		case 370: temp =    (int)  eeprom->TempOut;break;
    4d86:	2e a5       	ldd	r18, Y+46	; 0x2e
    4d88:	3f a5       	ldd	r19, Y+47	; 0x2f
    4d8a:	82 c0       	rjmp	.+260    	; 0x4e90 <readSysReg+0x434>
		case 380: temp =    (int)  eeprom->TempStopDef;break;
    4d8c:	2c a5       	ldd	r18, Y+44	; 0x2c
    4d8e:	3d a5       	ldd	r19, Y+45	; 0x2d
    4d90:	7f c0       	rjmp	.+254    	; 0x4e90 <readSysReg+0x434>
		case 390: temp =    (int)  eeprom->time_threeway;break;
    4d92:	2c ad       	ldd	r18, Y+60	; 0x3c
    4d94:	3d ad       	ldd	r19, Y+61	; 0x3d
    4d96:	7c c0       	rjmp	.+248    	; 0x4e90 <readSysReg+0x434>
		case 400: temp =    (int)  eeprom->NombComp;break;
    4d98:	68 a1       	ldd	r22, Y+32	; 0x20
    4d9a:	26 2f       	mov	r18, r22
    4d9c:	30 e0       	ldi	r19, 0x00	; 0
    4d9e:	78 c0       	rjmp	.+240    	; 0x4e90 <readSysReg+0x434>
		case 410: temp =    (int)  eeprom->reversMod;break;
    4da0:	68 a5       	ldd	r22, Y+40	; 0x28
    4da2:	26 2f       	mov	r18, r22
    4da4:	30 e0       	ldi	r19, 0x00	; 0
    4da6:	74 c0       	rjmp	.+232    	; 0x4e90 <readSysReg+0x434>
		case 420: temp =    (int)  eeprom->TRV_Delay;break;
    4da8:	6d 81       	ldd	r22, Y+5	; 0x05
    4daa:	26 2f       	mov	r18, r22
    4dac:	30 e0       	ldi	r19, 0x00	; 0
    4dae:	70 c0       	rjmp	.+224    	; 0x4e90 <readSysReg+0x434>
		case 430: temp =    (int)  eeprom->Source_Max;break;
    4db0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4db2:	26 2f       	mov	r18, r22
    4db4:	30 e0       	ldi	r19, 0x00	; 0
    4db6:	6c c0       	rjmp	.+216    	; 0x4e90 <readSysReg+0x434>
		case 440: temp =    (int)  eeprom->Source_Min;break;
    4db8:	28 a9       	ldd	r18, Y+48	; 0x30
    4dba:	39 a9       	ldd	r19, Y+49	; 0x31
    4dbc:	69 c0       	rjmp	.+210    	; 0x4e90 <readSysReg+0x434>
		case 450: temp =    (int)  eeprom->Delta_dhw_max;break;
    4dbe:	68 8d       	ldd	r22, Y+24	; 0x18
    4dc0:	26 2f       	mov	r18, r22
    4dc2:	30 e0       	ldi	r19, 0x00	; 0
    4dc4:	65 c0       	rjmp	.+202    	; 0x4e90 <readSysReg+0x434>
		case 460: temp =    (int)  eeprom->Delta_dhw_min;break;
    4dc6:	6f 89       	ldd	r22, Y+23	; 0x17
    4dc8:	26 2f       	mov	r18, r22
    4dca:	30 e0       	ldi	r19, 0x00	; 0
    4dcc:	61 c0       	rjmp	.+194    	; 0x4e90 <readSysReg+0x434>
		case 470: temp =    (int)  eeprom->Power_380;break;
    4dce:	69 a5       	ldd	r22, Y+41	; 0x29
    4dd0:	26 2f       	mov	r18, r22
    4dd2:	30 e0       	ldi	r19, 0x00	; 0
    4dd4:	5d c0       	rjmp	.+186    	; 0x4e90 <readSysReg+0x434>
		case 480: temp =    (int)  eeprom->TimeBetweenDef;break;
    4dd6:	6a a1       	ldd	r22, Y+34	; 0x22
    4dd8:	26 2f       	mov	r18, r22
    4dda:	30 e0       	ldi	r19, 0x00	; 0
    4ddc:	59 c0       	rjmp	.+178    	; 0x4e90 <readSysReg+0x434>
		//case 500: temp =    (int)  compPtr-> Curr_A;break;
		//case 510: temp =    (int)  compPtr-> Curr_B;break;
		//case 520: temp =    (int)  compPtr-> Curr_C;break;
		
		//--------------------------------------
		case 301: temp =    (int)  eeprom->number_turnon_compressor_1;break;
    4dde:	2e ad       	ldd	r18, Y+62	; 0x3e
    4de0:	3f ad       	ldd	r19, Y+63	; 0x3f
    4de2:	56 c0       	rjmp	.+172    	; 0x4e90 <readSysReg+0x434>
		case 311: temp =    (int)  eeprom->number_turnon_hiter_1;break;
    4de4:	fb 01       	movw	r30, r22
    4de6:	ee 5b       	subi	r30, 0xBE	; 190
    4de8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dea:	20 81       	ld	r18, Z
    4dec:	31 81       	ldd	r19, Z+1	; 0x01
    4dee:	50 c0       	rjmp	.+160    	; 0x4e90 <readSysReg+0x434>
		case 321: temp =    (int)  eeprom->number_turnon_revers_1;break;
    4df0:	fb 01       	movw	r30, r22
    4df2:	ec 5b       	subi	r30, 0xBC	; 188
    4df4:	ff 4f       	sbci	r31, 0xFF	; 255
    4df6:	20 81       	ld	r18, Z
    4df8:	31 81       	ldd	r19, Z+1	; 0x01
    4dfa:	4a c0       	rjmp	.+148    	; 0x4e90 <readSysReg+0x434>
		case 331: temp =    (int)  eeprom->number_turnon_source_1;break;
    4dfc:	fb 01       	movw	r30, r22
    4dfe:	e0 5c       	subi	r30, 0xC0	; 192
    4e00:	ff 4f       	sbci	r31, 0xFF	; 255
    4e02:	20 81       	ld	r18, Z
    4e04:	31 81       	ldd	r19, Z+1	; 0x01
    4e06:	44 c0       	rjmp	.+136    	; 0x4e90 <readSysReg+0x434>
		case 341: temp =    (int)  eeprom->time_compressor_1;break;
    4e08:	2a ad       	ldd	r18, Y+58	; 0x3a
    4e0a:	3b ad       	ldd	r19, Y+59	; 0x3b
    4e0c:	41 c0       	rjmp	.+130    	; 0x4e90 <readSysReg+0x434>
		case 351: temp =    (int)  eeprom->time_pump_hiter_1;break;
    4e0e:	2c a9       	ldd	r18, Y+52	; 0x34
    4e10:	3d a9       	ldd	r19, Y+53	; 0x35
    4e12:	3e c0       	rjmp	.+124    	; 0x4e90 <readSysReg+0x434>
		case 371: temp =    (int)  eeprom->time_pump_source_1;break;
    4e14:	2e a9       	ldd	r18, Y+54	; 0x36
    4e16:	3f a9       	ldd	r19, Y+55	; 0x37
    4e18:	3b c0       	rjmp	.+118    	; 0x4e90 <readSysReg+0x434>
		case 381: temp =    (int)  eeprom->time_revers_1;break;
    4e1a:	28 ad       	ldd	r18, Y+56	; 0x38
    4e1c:	39 ad       	ldd	r19, Y+57	; 0x39
    4e1e:	38 c0       	rjmp	.+112    	; 0x4e90 <readSysReg+0x434>
		case 391: temp =    (int)  eeprom->trv_corection_1;break;
    4e20:	2a a9       	ldd	r18, Y+50	; 0x32
    4e22:	3b a9       	ldd	r19, Y+51	; 0x33
    4e24:	35 c0       	rjmp	.+106    	; 0x4e90 <readSysReg+0x434>
		//------------------------------------
		case 302: temp =    (int)  eeprom->number_turnon_compressor_2;break;
    4e26:	fb 01       	movw	r30, r22
    4e28:	ee 5a       	subi	r30, 0xAE	; 174
    4e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e2c:	20 81       	ld	r18, Z
    4e2e:	31 81       	ldd	r19, Z+1	; 0x01
    4e30:	2f c0       	rjmp	.+94     	; 0x4e90 <readSysReg+0x434>
		case 312: temp =    (int)  eeprom->number_turnon_hiter_2;break;
    4e32:	fb 01       	movw	r30, r22
    4e34:	ea 5a       	subi	r30, 0xAA	; 170
    4e36:	ff 4f       	sbci	r31, 0xFF	; 255
    4e38:	20 81       	ld	r18, Z
    4e3a:	31 81       	ldd	r19, Z+1	; 0x01
    4e3c:	29 c0       	rjmp	.+82     	; 0x4e90 <readSysReg+0x434>
		case 322: temp =    (int)  eeprom->number_turnon_revers_2;break;
    4e3e:	fb 01       	movw	r30, r22
    4e40:	e8 5a       	subi	r30, 0xA8	; 168
    4e42:	ff 4f       	sbci	r31, 0xFF	; 255
    4e44:	20 81       	ld	r18, Z
    4e46:	31 81       	ldd	r19, Z+1	; 0x01
    4e48:	23 c0       	rjmp	.+70     	; 0x4e90 <readSysReg+0x434>
		case 332: temp =    (int)  eeprom->number_turnon_source_2;break;
    4e4a:	fb 01       	movw	r30, r22
    4e4c:	ec 5a       	subi	r30, 0xAC	; 172
    4e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e50:	20 81       	ld	r18, Z
    4e52:	31 81       	ldd	r19, Z+1	; 0x01
    4e54:	1d c0       	rjmp	.+58     	; 0x4e90 <readSysReg+0x434>
		case 342: temp =    (int)  eeprom->time_compressor_2;break;
    4e56:	fb 01       	movw	r30, r22
    4e58:	e0 5b       	subi	r30, 0xB0	; 176
    4e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e5c:	20 81       	ld	r18, Z
    4e5e:	31 81       	ldd	r19, Z+1	; 0x01
    4e60:	17 c0       	rjmp	.+46     	; 0x4e90 <readSysReg+0x434>
		case 352: temp =    (int)  eeprom->time_pump_hiter_2;break;
    4e62:	fb 01       	movw	r30, r22
    4e64:	e6 5b       	subi	r30, 0xB6	; 182
    4e66:	ff 4f       	sbci	r31, 0xFF	; 255
    4e68:	20 81       	ld	r18, Z
    4e6a:	31 81       	ldd	r19, Z+1	; 0x01
    4e6c:	11 c0       	rjmp	.+34     	; 0x4e90 <readSysReg+0x434>
		case 372: temp =    (int)  eeprom->time_pump_source_2;break;
    4e6e:	fb 01       	movw	r30, r22
    4e70:	e4 5b       	subi	r30, 0xB4	; 180
    4e72:	ff 4f       	sbci	r31, 0xFF	; 255
    4e74:	20 81       	ld	r18, Z
    4e76:	31 81       	ldd	r19, Z+1	; 0x01
    4e78:	0b c0       	rjmp	.+22     	; 0x4e90 <readSysReg+0x434>
		case 382: temp =    (int)  eeprom->time_revers_2;break;
    4e7a:	fb 01       	movw	r30, r22
    4e7c:	e2 5b       	subi	r30, 0xB2	; 178
    4e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e80:	20 81       	ld	r18, Z
    4e82:	31 81       	ldd	r19, Z+1	; 0x01
    4e84:	05 c0       	rjmp	.+10     	; 0x4e90 <readSysReg+0x434>
		case 392: temp =    (int)  eeprom->trv_corection_2;break;
    4e86:	fb 01       	movw	r30, r22
    4e88:	e8 5b       	subi	r30, 0xB8	; 184
    4e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8c:	20 81       	ld	r18, Z
    4e8e:	31 81       	ldd	r19, Z+1	; 0x01
		
	}
	return temp;
}
    4e90:	c9 01       	movw	r24, r18
    4e92:	df 91       	pop	r29
    4e94:	cf 91       	pop	r28
    4e96:	08 95       	ret

00004e98 <writeSysReg>:
void writeSysReg(xEEdata*comp,uint16_t adress,uint16_t value)
{
    4e98:	cf 93       	push	r28
    4e9a:	df 93       	push	r29
    4e9c:	dc 01       	movw	r26, r24
	
	switch(adress)
    4e9e:	fb 01       	movw	r30, r22
    4ea0:	3a 97       	sbiw	r30, 0x0a	; 10
    4ea2:	e7 3d       	cpi	r30, 0xD7	; 215
    4ea4:	81 e0       	ldi	r24, 0x01	; 1
    4ea6:	f8 07       	cpc	r31, r24
    4ea8:	08 f0       	brcs	.+2      	; 0x4eac <writeSysReg+0x14>
    4eaa:	bb c0       	rjmp	.+374    	; 0x5022 <writeSysReg+0x18a>
    4eac:	88 27       	eor	r24, r24
    4eae:	ed 58       	subi	r30, 0x8D	; 141
    4eb0:	fd 4f       	sbci	r31, 0xFD	; 253
    4eb2:	8f 4f       	sbci	r24, 0xFF	; 255
    4eb4:	0c 94 44 58 	jmp	0xb088	; 0xb088 <__tablejump2__>
	{
		case 10:  comp->Compressor_delay  = value;break;
    4eb8:	4c 93       	st	X, r20
    4eba:	b3 c0       	rjmp	.+358    	; 0x5022 <writeSysReg+0x18a>
		case 20:  comp->HeatingPump_delay = value;break;
    4ebc:	13 96       	adiw	r26, 0x03	; 3
    4ebe:	4c 93       	st	X, r20
    4ec0:	b0 c0       	rjmp	.+352    	; 0x5022 <writeSysReg+0x18a>
		case 30:  comp->Source_Pump_delay = value;break;
    4ec2:	11 96       	adiw	r26, 0x01	; 1
    4ec4:	4c 93       	st	X, r20
    4ec6:	ad c0       	rjmp	.+346    	; 0x5022 <writeSysReg+0x18a>
		case 40:  comp->Revers_Valve_delay = value;break;
    4ec8:	12 96       	adiw	r26, 0x02	; 2
    4eca:	4c 93       	st	X, r20
    4ecc:	aa c0       	rjmp	.+340    	; 0x5022 <writeSysReg+0x18a>
		case 50:  comp->Three_Way_delay  = value;break;
    4ece:	14 96       	adiw	r26, 0x04	; 4
    4ed0:	4c 93       	st	X, r20
    4ed2:	a7 c0       	rjmp	.+334    	; 0x5022 <writeSysReg+0x18a>
		case 60:  comp->Cool_Max = value;break;
    4ed4:	1c 96       	adiw	r26, 0x0c	; 12
    4ed6:	4c 93       	st	X, r20
    4ed8:	a4 c0       	rjmp	.+328    	; 0x5022 <writeSysReg+0x18a>
		case 70:  comp->Cool_Min = value;break;
    4eda:	1d 96       	adiw	r26, 0x0d	; 13
    4edc:	4c 93       	st	X, r20
    4ede:	a1 c0       	rjmp	.+322    	; 0x5022 <writeSysReg+0x18a>
		case 80:  comp->HEAT_Max  = value;break;
    4ee0:	19 96       	adiw	r26, 0x09	; 9
    4ee2:	4c 93       	st	X, r20
    4ee4:	9e c0       	rjmp	.+316    	; 0x5022 <writeSysReg+0x18a>
		case 90:  comp->HEAT_Min = value;break;
    4ee6:	1a 96       	adiw	r26, 0x0a	; 10
    4ee8:	4c 93       	st	X, r20
    4eea:	9b c0       	rjmp	.+310    	; 0x5022 <writeSysReg+0x18a>
		case 100: comp->Delta_heating_max  = value;break;
    4eec:	54 96       	adiw	r26, 0x14	; 20
    4eee:	4c 93       	st	X, r20
    4ef0:	98 c0       	rjmp	.+304    	; 0x5022 <writeSysReg+0x18a>
		case 110: comp->Delta_heating_min  = value;break;
    4ef2:	53 96       	adiw	r26, 0x13	; 19
    4ef4:	4c 93       	st	X, r20
    4ef6:	95 c0       	rjmp	.+298    	; 0x5022 <writeSysReg+0x18a>
		case 120: comp->Delta_source_max  = value;break;
    4ef8:	56 96       	adiw	r26, 0x16	; 22
    4efa:	4c 93       	st	X, r20
    4efc:	92 c0       	rjmp	.+292    	; 0x5022 <writeSysReg+0x18a>
		case 130: comp->Delta_source_min  = value;break;
    4efe:	55 96       	adiw	r26, 0x15	; 21
    4f00:	4c 93       	st	X, r20
    4f02:	8f c0       	rjmp	.+286    	; 0x5022 <writeSysReg+0x18a>
		case 140: comp->diffCOOL  = value;break;
    4f04:	5d 96       	adiw	r26, 0x1d	; 29
    4f06:	4c 93       	st	X, r20
    4f08:	8c c0       	rjmp	.+280    	; 0x5022 <writeSysReg+0x18a>
		case 150: comp->diffDHW  = value;break;
    4f0a:	5e 96       	adiw	r26, 0x1e	; 30
    4f0c:	4c 93       	st	X, r20
    4f0e:	89 c0       	rjmp	.+274    	; 0x5022 <writeSysReg+0x18a>
		case 160: comp->diffHEAT  = value;break;
    4f10:	5c 96       	adiw	r26, 0x1c	; 28
    4f12:	4c 93       	st	X, r20
    4f14:	86 c0       	rjmp	.+268    	; 0x5022 <writeSysReg+0x18a>
		case 170: comp->AireToWater  = value;break;
    4f16:	5f 96       	adiw	r26, 0x1f	; 31
    4f18:	4c 93       	st	X, r20
    4f1a:	83 c0       	rjmp	.+262    	; 0x5022 <writeSysReg+0x18a>
		case 180: comp->ExhaustMax  = value;break;
    4f1c:	1e 96       	adiw	r26, 0x0e	; 14
    4f1e:	4c 93       	st	X, r20
    4f20:	80 c0       	rjmp	.+256    	; 0x5022 <writeSysReg+0x18a>
		case 190: comp->cool  = value;break;
    4f22:	97 96       	adiw	r26, 0x27	; 39
    4f24:	4c 93       	st	X, r20
    4f26:	7d c0       	rjmp	.+250    	; 0x5022 <writeSysReg+0x18a>
		case 200: comp->heat  = value;break;
    4f28:	96 96       	adiw	r26, 0x26	; 38
    4f2a:	4c 93       	st	X, r20
    4f2c:	7a c0       	rjmp	.+244    	; 0x5022 <writeSysReg+0x18a>
		case 210: comp->heatWater  = value;break;
    4f2e:	95 96       	adiw	r26, 0x25	; 37
    4f30:	4c 93       	st	X, r20
    4f32:	77 c0       	rjmp	.+238    	; 0x5022 <writeSysReg+0x18a>
		case 220: comp->HP_Max  = value;break;
    4f34:	16 96       	adiw	r26, 0x06	; 6
    4f36:	4c 93       	st	X, r20
    4f38:	74 c0       	rjmp	.+232    	; 0x5022 <writeSysReg+0x18a>
		case 230: comp->LP_Max  = value;break;
    4f3a:	18 96       	adiw	r26, 0x08	; 8
    4f3c:	4c 93       	st	X, r20
    4f3e:	71 c0       	rjmp	.+226    	; 0x5022 <writeSysReg+0x18a>
		case 240: comp->HP_Min  = value;break;
    4f40:	17 96       	adiw	r26, 0x07	; 7
    4f42:	4c 93       	st	X, r20
    4f44:	6e c0       	rjmp	.+220    	; 0x5022 <writeSysReg+0x18a>
		case 250: comp->LP_Min  = value;break;
    4f46:	ed 01       	movw	r28, r26
    4f48:	c4 5a       	subi	r28, 0xA4	; 164
    4f4a:	df 4f       	sbci	r29, 0xFF	; 255
    4f4c:	ba 01       	movw	r22, r20
    4f4e:	80 e0       	ldi	r24, 0x00	; 0
    4f50:	90 e0       	ldi	r25, 0x00	; 0
    4f52:	0e 94 08 53 	call	0xa610	; 0xa610 <__floatunsisf>
    4f56:	68 83       	st	Y, r22
    4f58:	79 83       	std	Y+1, r23	; 0x01
    4f5a:	8a 83       	std	Y+2, r24	; 0x02
    4f5c:	9b 83       	std	Y+3, r25	; 0x03
    4f5e:	61 c0       	rjmp	.+194    	; 0x5022 <writeSysReg+0x18a>
		case 260: comp->MaxSupercool  = value;break;
    4f60:	52 96       	adiw	r26, 0x12	; 18
    4f62:	4c 93       	st	X, r20
    4f64:	5e c0       	rjmp	.+188    	; 0x5022 <writeSysReg+0x18a>
		case 270: comp->MinSupercool  = value;break;
    4f66:	51 96       	adiw	r26, 0x11	; 17
    4f68:	4c 93       	st	X, r20
    4f6a:	5b c0       	rjmp	.+182    	; 0x5022 <writeSysReg+0x18a>
		case 280: comp->MaxSuperheat  = value;break;
    4f6c:	50 96       	adiw	r26, 0x10	; 16
    4f6e:	4c 93       	st	X, r20
    4f70:	58 c0       	rjmp	.+176    	; 0x5022 <writeSysReg+0x18a>
		case 290: comp->MinSuperheat  = value;break;
    4f72:	1f 96       	adiw	r26, 0x0f	; 15
    4f74:	4c 93       	st	X, r20
    4f76:	55 c0       	rjmp	.+170    	; 0x5022 <writeSysReg+0x18a>
		case 300: comp->number_turnon_threeway  = value;break;
    4f78:	aa 5b       	subi	r26, 0xBA	; 186
    4f7a:	bf 4f       	sbci	r27, 0xFF	; 255
    4f7c:	4d 93       	st	X+, r20
    4f7e:	5c 93       	st	X, r21
    4f80:	50 c0       	rjmp	.+160    	; 0x5022 <writeSysReg+0x18a>
		case 310: comp->power  = value;break;
    4f82:	94 96       	adiw	r26, 0x24	; 36
    4f84:	4c 93       	st	X, r20
    4f86:	4d c0       	rjmp	.+154    	; 0x5022 <writeSysReg+0x18a>
		case 320: comp->Set_Cooling  = value;break;
    4f88:	5a 96       	adiw	r26, 0x1a	; 26
    4f8a:	4c 93       	st	X, r20
    4f8c:	4a c0       	rjmp	.+148    	; 0x5022 <writeSysReg+0x18a>
		case 330: comp->Set_DHW  = value;break;
    4f8e:	5b 96       	adiw	r26, 0x1b	; 27
    4f90:	4c 93       	st	X, r20
    4f92:	47 c0       	rjmp	.+142    	; 0x5022 <writeSysReg+0x18a>
		case 340: comp->Set_Heating  = value;break;
    4f94:	59 96       	adiw	r26, 0x19	; 25
    4f96:	4c 93       	st	X, r20
    4f98:	44 c0       	rjmp	.+136    	; 0x5022 <writeSysReg+0x18a>
		case 350: comp->TempDef  = value;break;//
    4f9a:	9b 96       	adiw	r26, 0x2b	; 43
    4f9c:	5c 93       	st	X, r21
    4f9e:	4e 93       	st	-X, r20
    4fa0:	9a 97       	sbiw	r26, 0x2a	; 42
    4fa2:	3f c0       	rjmp	.+126    	; 0x5022 <writeSysReg+0x18a>
		case 360: comp->TimeDef  = value;break;//
    4fa4:	91 96       	adiw	r26, 0x21	; 33
    4fa6:	4c 93       	st	X, r20
    4fa8:	3c c0       	rjmp	.+120    	; 0x5022 <writeSysReg+0x18a>
		case 370: comp->TempOut  = value;break;
    4faa:	9f 96       	adiw	r26, 0x2f	; 47
    4fac:	5c 93       	st	X, r21
    4fae:	4e 93       	st	-X, r20
    4fb0:	9e 97       	sbiw	r26, 0x2e	; 46
    4fb2:	37 c0       	rjmp	.+110    	; 0x5022 <writeSysReg+0x18a>
		case 380: comp->TempStopDef  = value;break;//
    4fb4:	9d 96       	adiw	r26, 0x2d	; 45
    4fb6:	5c 93       	st	X, r21
    4fb8:	4e 93       	st	-X, r20
    4fba:	9c 97       	sbiw	r26, 0x2c	; 44
    4fbc:	32 c0       	rjmp	.+100    	; 0x5022 <writeSysReg+0x18a>
		case 390: comp->time_threeway  = value;break;
    4fbe:	dd 96       	adiw	r26, 0x3d	; 61
    4fc0:	5c 93       	st	X, r21
    4fc2:	4e 93       	st	-X, r20
    4fc4:	dc 97       	sbiw	r26, 0x3c	; 60
    4fc6:	2d c0       	rjmp	.+90     	; 0x5022 <writeSysReg+0x18a>
		case 400: comp->NombComp  = value;break;
    4fc8:	90 96       	adiw	r26, 0x20	; 32
    4fca:	4c 93       	st	X, r20
    4fcc:	2a c0       	rjmp	.+84     	; 0x5022 <writeSysReg+0x18a>
		case 410: comp->reversMod =value;break;
    4fce:	98 96       	adiw	r26, 0x28	; 40
    4fd0:	4c 93       	st	X, r20
    4fd2:	27 c0       	rjmp	.+78     	; 0x5022 <writeSysReg+0x18a>
		case 420: comp->TRV_Delay=value;break;
    4fd4:	15 96       	adiw	r26, 0x05	; 5
    4fd6:	4c 93       	st	X, r20
    4fd8:	24 c0       	rjmp	.+72     	; 0x5022 <writeSysReg+0x18a>
		case 430: comp->Source_Max=value;break;
    4fda:	1b 96       	adiw	r26, 0x0b	; 11
    4fdc:	4c 93       	st	X, r20
    4fde:	21 c0       	rjmp	.+66     	; 0x5022 <writeSysReg+0x18a>
		case 440: comp->Source_Min=value;break;
    4fe0:	d1 96       	adiw	r26, 0x31	; 49
    4fe2:	5c 93       	st	X, r21
    4fe4:	4e 93       	st	-X, r20
    4fe6:	d0 97       	sbiw	r26, 0x30	; 48
    4fe8:	1c c0       	rjmp	.+56     	; 0x5022 <writeSysReg+0x18a>
		case 450: comp->Delta_dhw_max  = value;break;
    4fea:	58 96       	adiw	r26, 0x18	; 24
    4fec:	4c 93       	st	X, r20
    4fee:	19 c0       	rjmp	.+50     	; 0x5022 <writeSysReg+0x18a>
		case 460: comp->Delta_dhw_min  = value;break;
    4ff0:	57 96       	adiw	r26, 0x17	; 23
    4ff2:	4c 93       	st	X, r20
    4ff4:	16 c0       	rjmp	.+44     	; 0x5022 <writeSysReg+0x18a>
		case 470: comp->Power_380 = value;break;
    4ff6:	99 96       	adiw	r26, 0x29	; 41
    4ff8:	4c 93       	st	X, r20
    4ffa:	13 c0       	rjmp	.+38     	; 0x5022 <writeSysReg+0x18a>
		case 480: comp->TimeBetweenDef = value;break;//
    4ffc:	92 96       	adiw	r26, 0x22	; 34
    4ffe:	4c 93       	st	X, r20
    5000:	10 c0       	rjmp	.+32     	; 0x5022 <writeSysReg+0x18a>
		case 391: comp->trv_corection_1 = value;break;
    5002:	d3 96       	adiw	r26, 0x33	; 51
    5004:	5c 93       	st	X, r21
    5006:	4e 93       	st	-X, r20
    5008:	d2 97       	sbiw	r26, 0x32	; 50
    500a:	0b c0       	rjmp	.+22     	; 0x5022 <writeSysReg+0x18a>
		case 392: comp->trv_corection_2 = value;break;
    500c:	a8 5b       	subi	r26, 0xB8	; 184
    500e:	bf 4f       	sbci	r27, 0xFF	; 255
    5010:	4d 93       	st	X+, r20
    5012:	5c 93       	st	X, r21
    5014:	06 c0       	rjmp	.+12     	; 0x5022 <writeSysReg+0x18a>
		case 393:if(comp->AireToWater==1) forsDefrost = value;break;
    5016:	5f 96       	adiw	r26, 0x1f	; 31
    5018:	8c 91       	ld	r24, X
    501a:	81 30       	cpi	r24, 0x01	; 1
    501c:	11 f4       	brne	.+4      	; 0x5022 <writeSysReg+0x18a>
    501e:	40 93 ad 07 	sts	0x07AD, r20	; 0x8007ad <forsDefrost>
	}
}
    5022:	df 91       	pop	r29
    5024:	cf 91       	pop	r28
    5026:	08 95       	ret

00005028 <calculateCRC>:
}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
    5028:	88 23       	and	r24, r24
    502a:	09 f1       	breq	.+66     	; 0x506e <calculateCRC+0x46>
    502c:	af ef       	ldi	r26, 0xFF	; 255
    502e:	a8 0f       	add	r26, r24
    5030:	b0 e0       	ldi	r27, 0x00	; 0
    5032:	11 96       	adiw	r26, 0x01	; 1
    5034:	60 e0       	ldi	r22, 0x00	; 0
    5036:	70 e0       	ldi	r23, 0x00	; 0
    5038:	8f ef       	ldi	r24, 0xFF	; 255
    503a:	9f ef       	ldi	r25, 0xFF	; 255
	{
		temp = temp ^ frame[i];
    503c:	fb 01       	movw	r30, r22
    503e:	ec 5a       	subi	r30, 0xAC	; 172
    5040:	f7 4f       	sbci	r31, 0xF7	; 247
    5042:	20 81       	ld	r18, Z
    5044:	82 27       	eor	r24, r18
    5046:	28 e0       	ldi	r18, 0x08	; 8
		for (unsigned char j = 1; j <= 8; j++)
		{
			flag = temp & 0x0001;
    5048:	ac 01       	movw	r20, r24
    504a:	41 70       	andi	r20, 0x01	; 1
    504c:	55 27       	eor	r21, r21
			temp >>= 1;
    504e:	96 95       	lsr	r25
    5050:	87 95       	ror	r24
			if (flag)
    5052:	45 2b       	or	r20, r21
    5054:	21 f0       	breq	.+8      	; 0x505e <calculateCRC+0x36>
			temp ^= 0xA001;
    5056:	31 e0       	ldi	r19, 0x01	; 1
    5058:	83 27       	eor	r24, r19
    505a:	30 ea       	ldi	r19, 0xA0	; 160
    505c:	93 27       	eor	r25, r19
    505e:	21 50       	subi	r18, 0x01	; 1
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
	{
		temp = temp ^ frame[i];
		for (unsigned char j = 1; j <= 8; j++)
    5060:	99 f7       	brne	.-26     	; 0x5048 <calculateCRC+0x20>
    5062:	6f 5f       	subi	r22, 0xFF	; 255
    5064:	7f 4f       	sbci	r23, 0xFF	; 255
}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
    5066:	6a 17       	cp	r22, r26
    5068:	7b 07       	cpc	r23, r27
    506a:	41 f7       	brne	.-48     	; 0x503c <calculateCRC+0x14>
    506c:	02 c0       	rjmp	.+4      	; 0x5072 <calculateCRC+0x4a>

}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
    506e:	8f ef       	ldi	r24, 0xFF	; 255
    5070:	9f ef       	ldi	r25, 0xFF	; 255
	// Reverse byte order.
	temp2 = temp >> 8;
	temp = (temp << 8) | temp2;
	temp &= 0xFFFF;
	return temp; // the returned value is already swopped - crcLo byte is first & crcHi byte is last
}
    5072:	98 27       	eor	r25, r24
    5074:	89 27       	eor	r24, r25
    5076:	98 27       	eor	r25, r24
    5078:	08 95       	ret

0000507a <sendPacket>:

void sendPacket(unsigned char bufferSize)
{
    507a:	ef 92       	push	r14
    507c:	ff 92       	push	r15
    507e:	0f 93       	push	r16
    5080:	1f 93       	push	r17
    5082:	cf 93       	push	r28
    5084:	df 93       	push	r29
	
	for (unsigned char i = 0; i < bufferSize; i++) if(port_0)xSerialPutChar(&xSerialPort,frame[i]); else if(port_3){PORTJ|= (_BV(PIN_rs485));xSerialPutChar(&xSerial3Port,frame[i]);}
    5086:	88 23       	and	r24, r24
    5088:	71 f1       	breq	.+92     	; 0x50e6 <sendPacket+0x6c>
    508a:	81 50       	subi	r24, 0x01	; 1
    508c:	08 2f       	mov	r16, r24
    508e:	10 e0       	ldi	r17, 0x00	; 0
    5090:	0f 5f       	subi	r16, 0xFF	; 255
    5092:	1f 4f       	sbci	r17, 0xFF	; 255
    5094:	c0 e0       	ldi	r28, 0x00	; 0
    5096:	d0 e0       	ldi	r29, 0x00	; 0
    5098:	0f 2e       	mov	r0, r31
    509a:	f5 e0       	ldi	r31, 0x05	; 5
    509c:	ef 2e       	mov	r14, r31
    509e:	ff 24       	eor	r15, r15
    50a0:	f3 94       	inc	r15
    50a2:	f0 2d       	mov	r31, r0
    50a4:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <port_0>
    50a8:	88 23       	and	r24, r24
    50aa:	49 f0       	breq	.+18     	; 0x50be <sendPacket+0x44>
    50ac:	fe 01       	movw	r30, r28
    50ae:	ec 5a       	subi	r30, 0xAC	; 172
    50b0:	f7 4f       	sbci	r31, 0xF7	; 247
    50b2:	60 81       	ld	r22, Z
    50b4:	8b ee       	ldi	r24, 0xEB	; 235
    50b6:	97 e0       	ldi	r25, 0x07	; 7
    50b8:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <xSerialPutChar>
    50bc:	10 c0       	rjmp	.+32     	; 0x50de <sendPacket+0x64>
    50be:	80 91 93 09 	lds	r24, 0x0993	; 0x800993 <port_3>
    50c2:	88 23       	and	r24, r24
    50c4:	61 f0       	breq	.+24     	; 0x50de <sendPacket+0x64>
    50c6:	f7 01       	movw	r30, r14
    50c8:	80 81       	ld	r24, Z
    50ca:	84 60       	ori	r24, 0x04	; 4
    50cc:	80 83       	st	Z, r24
    50ce:	fe 01       	movw	r30, r28
    50d0:	ec 5a       	subi	r30, 0xAC	; 172
    50d2:	f7 4f       	sbci	r31, 0xF7	; 247
    50d4:	60 81       	ld	r22, Z
    50d6:	82 e3       	ldi	r24, 0x32	; 50
    50d8:	98 e0       	ldi	r25, 0x08	; 8
    50da:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <xSerialPutChar>
    50de:	21 96       	adiw	r28, 0x01	; 1
    50e0:	c0 17       	cp	r28, r16
    50e2:	d1 07       	cpc	r29, r17
    50e4:	f9 f6       	brne	.-66     	; 0x50a4 <sendPacket+0x2a>
	//xSerialRxFlush(&xSerialPort);
	PORTJ &= (_BV(PIN_rs485));
    50e6:	e5 e0       	ldi	r30, 0x05	; 5
    50e8:	f1 e0       	ldi	r31, 0x01	; 1
    50ea:	80 81       	ld	r24, Z
    50ec:	84 70       	andi	r24, 0x04	; 4
    50ee:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    50f0:	00 00       	nop

	_delay_us(3645);
	
	
    50f2:	df 91       	pop	r29
    50f4:	cf 91       	pop	r28
    50f6:	1f 91       	pop	r17
    50f8:	0f 91       	pop	r16
    50fa:	ff 90       	pop	r15
    50fc:	ef 90       	pop	r14
    50fe:	08 95       	ret

00005100 <modbus_update>:
		case 393:if(comp->AireToWater==1) forsDefrost = value;break;
	}
}

void modbus_update()
{
    5100:	af 92       	push	r10
    5102:	bf 92       	push	r11
    5104:	cf 92       	push	r12
    5106:	df 92       	push	r13
    5108:	ef 92       	push	r14
    510a:	ff 92       	push	r15
    510c:	0f 93       	push	r16
    510e:	1f 93       	push	r17
    5110:	cf 93       	push	r28
    5112:	df 93       	push	r29
	unsigned char noOfBytes;
	unsigned char responseFrameSize;
	unsigned int temp;
	void* ptr=NULL;
	
	if(port_0)buffer=xSerialAvailableChar( &xSerialPort );
    5114:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <port_0>
    5118:	88 23       	and	r24, r24
    511a:	29 f0       	breq	.+10     	; 0x5126 <modbus_update+0x26>
    511c:	8b ee       	ldi	r24, 0xEB	; 235
    511e:	97 e0       	ldi	r25, 0x07	; 7
    5120:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <xSerialAvailableChar>
    5124:	09 c0       	rjmp	.+18     	; 0x5138 <modbus_update+0x38>
	else if (port_3)buffer=xSerialAvailableChar( &xSerial3Port );
    5126:	80 91 93 09 	lds	r24, 0x0993	; 0x800993 <port_3>
    512a:	88 23       	and	r24, r24
    512c:	09 f4       	brne	.+2      	; 0x5130 <modbus_update+0x30>
    512e:	da c0       	rjmp	.+436    	; 0x52e4 <modbus_update+0x1e4>
    5130:	82 e3       	ldi	r24, 0x32	; 50
    5132:	98 e0       	ldi	r25, 0x08	; 8
    5134:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <xSerialAvailableChar>
	
	//avrSerialPrintf("buffer = %d \r\n",buffer );
	//avrSerialPrintf("overflow= %d \r\n",overflow);
	if (overflow){ return;}//exceptionResponse(OVERFLOW_BUFF);
    5138:	90 91 0d 08 	lds	r25, 0x080D	; 0x80080d <overflow>
    513c:	91 11       	cpse	r25, r1
    513e:	d7 c0       	rjmp	.+430    	; 0x52ee <modbus_update+0x1ee>
	if (buffer > 0 && buffer < 8) {  return;}// exceptionResponse(CORRUPT_PACKET);
    5140:	9f ef       	ldi	r25, 0xFF	; 255
    5142:	98 0f       	add	r25, r24
    5144:	97 30       	cpi	r25, 0x07	; 7
    5146:	08 f4       	brcc	.+2      	; 0x514a <modbus_update+0x4a>
    5148:	d2 c0       	rjmp	.+420    	; 0x52ee <modbus_update+0x1ee>
	
	// The minimum request packet is 8 bytes for function 3 & 16
	
	id = frame[0];
    514a:	90 91 54 08 	lds	r25, 0x0854	; 0x800854 <frame>
	//avrSerialPrintf("buffer= %d \r\n",buffer);
	
	if (id == slaveID ) // if the recieved ID matches the slaveID or broadcasting id (0), continue
    514e:	91 30       	cpi	r25, 0x01	; 1
    5150:	09 f0       	breq	.+2      	; 0x5154 <modbus_update+0x54>
    5152:	cd c0       	rjmp	.+410    	; 0x52ee <modbus_update+0x1ee>
	{
		crc = ((frame[buffer - 2] << 8) | frame[buffer - 1]); // combine the crc Low & High bytes
    5154:	28 2f       	mov	r18, r24
    5156:	30 e0       	ldi	r19, 0x00	; 0
    5158:	f9 01       	movw	r30, r18
    515a:	ee 5a       	subi	r30, 0xAE	; 174
    515c:	f7 4f       	sbci	r31, 0xF7	; 247
    515e:	d0 81       	ld	r29, Z
    5160:	f9 01       	movw	r30, r18
    5162:	ed 5a       	subi	r30, 0xAD	; 173
    5164:	f7 4f       	sbci	r31, 0xF7	; 247
    5166:	c0 81       	ld	r28, Z
		//avrSerialPrintf("crc= %d \r\n",crc);
		if (calculateCRC(buffer - 2) == crc) // if the calculated crc matches the recieved crc continue
    5168:	82 50       	subi	r24, 0x02	; 2
    516a:	5e df       	rcall	.-324    	; 0x5028 <calculateCRC>
    516c:	2c 2f       	mov	r18, r28
    516e:	30 e0       	ldi	r19, 0x00	; 0
    5170:	3d 2b       	or	r19, r29
    5172:	28 17       	cp	r18, r24
    5174:	39 07       	cpc	r19, r25
    5176:	09 f0       	breq	.+2      	; 0x517a <modbus_update+0x7a>
    5178:	ba c0       	rjmp	.+372    	; 0x52ee <modbus_update+0x1ee>
		{
			function = frame[1];
    517a:	e4 e5       	ldi	r30, 0x54	; 84
    517c:	f8 e0       	ldi	r31, 0x08	; 8
    517e:	21 81       	ldd	r18, Z+1	; 0x01
    5180:	20 93 0e 08 	sts	0x080E, r18	; 0x80080e <function>
			startingAddress = ((frame[2] << 8) | frame[3]); // combine the starting address bytes
    5184:	82 81       	ldd	r24, Z+2	; 0x02
    5186:	c3 81       	ldd	r28, Z+3	; 0x03
    5188:	d0 e0       	ldi	r29, 0x00	; 0
    518a:	d8 2b       	or	r29, r24
			no_of_registers = ((frame[4] << 8) | frame[5]);
    518c:	84 81       	ldd	r24, Z+4	; 0x04
    518e:	45 81       	ldd	r20, Z+5	; 0x05
    5190:	50 e0       	ldi	r21, 0x00	; 0
    5192:	58 2b       	or	r21, r24
			maxData = startingAddress + no_of_registers *10;
    5194:	7a 01       	movw	r14, r20
    5196:	ee 0c       	add	r14, r14
    5198:	ff 1c       	adc	r15, r15
    519a:	ca 01       	movw	r24, r20
    519c:	88 0f       	add	r24, r24
    519e:	99 1f       	adc	r25, r25
    51a0:	88 0f       	add	r24, r24
    51a2:	99 1f       	adc	r25, r25
    51a4:	88 0f       	add	r24, r24
    51a6:	99 1f       	adc	r25, r25
    51a8:	e8 0e       	add	r14, r24
    51aa:	f9 1e       	adc	r15, r25
    51ac:	ec 0e       	add	r14, r28
    51ae:	fd 1e       	adc	r15, r29
			//avrSerialPrintf("function= %d \r\n",function);
			//avrSerialPrintf("startingAddress= %d \r\n",startingAddress);
			//avrSerialPrintf("no_of_registers= %d \r\n",no_of_registers);
			//avrSerialPrintf("maxData= %d \r\n",maxData);
			if (function == 3)
    51b0:	23 30       	cpi	r18, 0x03	; 3
    51b2:	09 f0       	breq	.+2      	; 0x51b6 <modbus_update+0xb6>
    51b4:	65 c0       	rjmp	.+202    	; 0x5280 <modbus_update+0x180>
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
    51b6:	9e 01       	movw	r18, r28
    51b8:	ad ec       	ldi	r26, 0xCD	; 205
    51ba:	bc ec       	ldi	r27, 0xCC	; 204
    51bc:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    51c0:	96 95       	lsr	r25
    51c2:	87 95       	ror	r24
    51c4:	96 95       	lsr	r25
    51c6:	87 95       	ror	r24
    51c8:	96 95       	lsr	r25
    51ca:	87 95       	ror	r24
    51cc:	9c 01       	movw	r18, r24
    51ce:	22 0f       	add	r18, r18
    51d0:	33 1f       	adc	r19, r19
    51d2:	88 0f       	add	r24, r24
    51d4:	99 1f       	adc	r25, r25
    51d6:	88 0f       	add	r24, r24
    51d8:	99 1f       	adc	r25, r25
    51da:	88 0f       	add	r24, r24
    51dc:	99 1f       	adc	r25, r25
    51de:	82 0f       	add	r24, r18
    51e0:	93 1f       	adc	r25, r19
    51e2:	9e 01       	movw	r18, r28
    51e4:	28 1b       	sub	r18, r24
    51e6:	39 0b       	sbc	r19, r25
    51e8:	21 30       	cpi	r18, 0x01	; 1
    51ea:	31 05       	cpc	r19, r1
    51ec:	51 f0       	breq	.+20     	; 0x5202 <modbus_update+0x102>
				else if(startingAddress%10==2){ptr=&Comp_2;}
    51ee:	22 30       	cpi	r18, 0x02	; 2
    51f0:	31 05       	cpc	r19, r1
    51f2:	71 f4       	brne	.+28     	; 0x5210 <modbus_update+0x110>
    51f4:	0f 2e       	mov	r0, r31
    51f6:	fe e7       	ldi	r31, 0x7E	; 126
    51f8:	cf 2e       	mov	r12, r31
    51fa:	fa e0       	ldi	r31, 0x0A	; 10
    51fc:	df 2e       	mov	r13, r31
    51fe:	f0 2d       	mov	r31, r0
    5200:	09 c0       	rjmp	.+18     	; 0x5214 <modbus_update+0x114>
			//avrSerialPrintf("startingAddress= %d \r\n",startingAddress);
			//avrSerialPrintf("no_of_registers= %d \r\n",no_of_registers);
			//avrSerialPrintf("maxData= %d \r\n",maxData);
			if (function == 3)
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
    5202:	0f 2e       	mov	r0, r31
    5204:	f4 ef       	ldi	r31, 0xF4	; 244
    5206:	cf 2e       	mov	r12, r31
    5208:	f9 e0       	ldi	r31, 0x09	; 9
    520a:	df 2e       	mov	r13, r31
    520c:	f0 2d       	mov	r31, r0
    520e:	02 c0       	rjmp	.+4      	; 0x5214 <modbus_update+0x114>
	unsigned int crc16;
	unsigned int crc;
	unsigned char noOfBytes;
	unsigned char responseFrameSize;
	unsigned int temp;
	void* ptr=NULL;
    5210:	c1 2c       	mov	r12, r1
    5212:	d1 2c       	mov	r13, r1
			if (function == 3)
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
				else if(startingAddress%10==2){ptr=&Comp_2;}
				
				noOfBytes = no_of_registers * 2;
    5214:	a4 2e       	mov	r10, r20
    5216:	aa 0c       	add	r10, r10
				responseFrameSize = 5 + noOfBytes; // ID, function, noOfBytes, (dataLo + dataHi) * number of registers, crcLo, crcHi
    5218:	0f 2e       	mov	r0, r31
    521a:	f5 e0       	ldi	r31, 0x05	; 5
    521c:	bf 2e       	mov	r11, r31
    521e:	f0 2d       	mov	r31, r0
    5220:	ba 0c       	add	r11, r10
				frame[0] = slaveID;
    5222:	e4 e5       	ldi	r30, 0x54	; 84
    5224:	f8 e0       	ldi	r31, 0x08	; 8
    5226:	81 e0       	ldi	r24, 0x01	; 1
    5228:	80 83       	st	Z, r24
				frame[1] = function;
    522a:	83 e0       	ldi	r24, 0x03	; 3
    522c:	81 83       	std	Z+1, r24	; 0x01
				frame[2] = noOfBytes;
    522e:	a2 82       	std	Z+2, r10	; 0x02
				//avrSerialPrintf("FrameSize= %d \r\n",responseFrameSize);
				//avrSerialPrintf("frame[1]= %d \r\n",frame[1]);
				//avrSerialPrintf("frame[2]= %d \r\n",frame[2]);
				address = 3; // PDU starts at the 4th byte
				for (index = startingAddress; index < maxData; )
    5230:	ce 15       	cp	r28, r14
    5232:	df 05       	cpc	r29, r15
    5234:	a8 f4       	brcc	.+42     	; 0x5260 <modbus_update+0x160>
    5236:	03 e0       	ldi	r16, 0x03	; 3
    5238:	10 e0       	ldi	r17, 0x00	; 0
				{
					temp = readSysReg(ptr,&EEpromData,index);//holdingRegs[index]
    523a:	ae 01       	movw	r20, r28
    523c:	64 e9       	ldi	r22, 0x94	; 148
    523e:	79 e0       	ldi	r23, 0x09	; 9
    5240:	c6 01       	movw	r24, r12
    5242:	0c dc       	rcall	.-2024   	; 0x4a5c <readSysReg>
					frame[address] = temp >> 8; // split the register into 2 bytes
    5244:	f8 01       	movw	r30, r16
    5246:	ec 5a       	subi	r30, 0xAC	; 172
    5248:	f7 4f       	sbci	r31, 0xF7	; 247
    524a:	90 83       	st	Z, r25
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
					frame[address] = temp & 0xFF;
    524c:	f8 01       	movw	r30, r16
    524e:	eb 5a       	subi	r30, 0xAB	; 171
    5250:	f7 4f       	sbci	r31, 0xF7	; 247
    5252:	80 83       	st	Z, r24
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
    5254:	0e 5f       	subi	r16, 0xFE	; 254
    5256:	1f 4f       	sbci	r17, 0xFF	; 255
					index +=10;
    5258:	2a 96       	adiw	r28, 0x0a	; 10
				frame[2] = noOfBytes;
				//avrSerialPrintf("FrameSize= %d \r\n",responseFrameSize);
				//avrSerialPrintf("frame[1]= %d \r\n",frame[1]);
				//avrSerialPrintf("frame[2]= %d \r\n",frame[2]);
				address = 3; // PDU starts at the 4th byte
				for (index = startingAddress; index < maxData; )
    525a:	ce 15       	cp	r28, r14
    525c:	df 05       	cpc	r29, r15
    525e:	68 f3       	brcs	.-38     	; 0x523a <modbus_update+0x13a>
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
					index +=10;
				}
				
				crc16 = calculateCRC(responseFrameSize - 2);
    5260:	83 e0       	ldi	r24, 0x03	; 3
    5262:	8a 0d       	add	r24, r10
    5264:	e1 de       	rcall	.-574    	; 0x5028 <calculateCRC>
				frame[responseFrameSize - 2] = crc16 >> 8; // split crc into 2 bytes
    5266:	2b 2d       	mov	r18, r11
    5268:	30 e0       	ldi	r19, 0x00	; 0
    526a:	f9 01       	movw	r30, r18
    526c:	ee 5a       	subi	r30, 0xAE	; 174
    526e:	f7 4f       	sbci	r31, 0xF7	; 247
    5270:	90 83       	st	Z, r25
				frame[responseFrameSize - 1] = crc16 & 0xFF;
    5272:	f9 01       	movw	r30, r18
    5274:	ed 5a       	subi	r30, 0xAD	; 173
    5276:	f7 4f       	sbci	r31, 0xF7	; 247
				//return;
				sendPacket(responseFrameSize);
    5278:	80 83       	st	Z, r24
    527a:	8b 2d       	mov	r24, r11
    527c:	fe de       	rcall	.-516    	; 0x507a <sendPacket>
    527e:	37 c0       	rjmp	.+110    	; 0x52ee <modbus_update+0x1ee>
				
			}
			
			else if (function == 16)
    5280:	20 31       	cpi	r18, 0x10	; 16
    5282:	09 f0       	breq	.+2      	; 0x5286 <modbus_update+0x186>
    5284:	34 c0       	rjmp	.+104    	; 0x52ee <modbus_update+0x1ee>
			{
				address = 7; // start at the 8th byte in the frame
				
				for (index = startingAddress; index < maxData; )
    5286:	ce 15       	cp	r28, r14
    5288:	df 05       	cpc	r29, r15
    528a:	b0 f4       	brcc	.+44     	; 0x52b8 <modbus_update+0x1b8>
    528c:	07 e0       	ldi	r16, 0x07	; 7
    528e:	10 e0       	ldi	r17, 0x00	; 0
				{
					temp = ((frame[address] << 8) | frame[address + 1]);
    5290:	f8 01       	movw	r30, r16
    5292:	ec 5a       	subi	r30, 0xAC	; 172
    5294:	f7 4f       	sbci	r31, 0xF7	; 247
    5296:	80 81       	ld	r24, Z
    5298:	f8 01       	movw	r30, r16
    529a:	eb 5a       	subi	r30, 0xAB	; 171
    529c:	f7 4f       	sbci	r31, 0xF7	; 247
    529e:	40 81       	ld	r20, Z
					writeSysReg(&EEpromData,index,temp);
    52a0:	50 e0       	ldi	r21, 0x00	; 0
    52a2:	58 2b       	or	r21, r24
    52a4:	be 01       	movw	r22, r28
    52a6:	84 e9       	ldi	r24, 0x94	; 148
    52a8:	99 e0       	ldi	r25, 0x09	; 9
    52aa:	f6 dd       	rcall	.-1044   	; 0x4e98 <writeSysReg>
					address += 2;
    52ac:	0e 5f       	subi	r16, 0xFE	; 254
    52ae:	1f 4f       	sbci	r17, 0xFF	; 255
					index+=10;
    52b0:	2a 96       	adiw	r28, 0x0a	; 10
			
			else if (function == 16)
			{
				address = 7; // start at the 8th byte in the frame
				
				for (index = startingAddress; index < maxData; )
    52b2:	ce 15       	cp	r28, r14
    52b4:	df 05       	cpc	r29, r15
    52b6:	60 f3       	brcs	.-40     	; 0x5290 <modbus_update+0x190>
					temp = ((frame[address] << 8) | frame[address + 1]);
					writeSysReg(&EEpromData,index,temp);
					address += 2;
					index+=10;
				}
				portENTER_CRITICAL();
    52b8:	0f b6       	in	r0, 0x3f	; 63
    52ba:	f8 94       	cli
    52bc:	0f 92       	push	r0
				eeprom_write_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));
    52be:	40 e6       	ldi	r20, 0x60	; 96
    52c0:	50 e0       	ldi	r21, 0x00	; 0
    52c2:	60 e0       	ldi	r22, 0x00	; 0
    52c4:	70 e0       	ldi	r23, 0x00	; 0
    52c6:	84 e9       	ldi	r24, 0x94	; 148
    52c8:	99 e0       	ldi	r25, 0x09	; 9
    52ca:	0e 94 7d 5b 	call	0xb6fa	; 0xb6fa <eeprom_write_block>
				portEXIT_CRITICAL();
    52ce:	0f 90       	pop	r0
				// only the first 6 bytes are used for CRC calculation
				crc16 = calculateCRC(6);
    52d0:	0f be       	out	0x3f, r0	; 63
    52d2:	86 e0       	ldi	r24, 0x06	; 6
				frame[6] = crc16 >> 8; // split crc into 2 bytes
    52d4:	a9 de       	rcall	.-686    	; 0x5028 <calculateCRC>
    52d6:	e4 e5       	ldi	r30, 0x54	; 84
    52d8:	f8 e0       	ldi	r31, 0x08	; 8
				frame[7] = crc16 & 0xFF;
    52da:	96 83       	std	Z+6, r25	; 0x06
				
				// a function 16 response is an echo of the first 6 bytes from the request + 2 crc bytes
				
				sendPacket(8);
    52dc:	87 83       	std	Z+7, r24	; 0x07
    52de:	88 e0       	ldi	r24, 0x08	; 8
    52e0:	cc de       	rcall	.-616    	; 0x507a <sendPacket>
    52e2:	05 c0       	rjmp	.+10     	; 0x52ee <modbus_update+0x1ee>
	if(port_0)buffer=xSerialAvailableChar( &xSerialPort );
	else if (port_3)buffer=xSerialAvailableChar( &xSerial3Port );
	
	//avrSerialPrintf("buffer = %d \r\n",buffer );
	//avrSerialPrintf("overflow= %d \r\n",overflow);
	if (overflow){ return;}//exceptionResponse(OVERFLOW_BUFF);
    52e4:	80 91 0d 08 	lds	r24, 0x080D	; 0x80080d <overflow>
    52e8:	88 23       	and	r24, r24
    52ea:	09 f4       	brne	.+2      	; 0x52ee <modbus_update+0x1ee>
    52ec:	2e cf       	rjmp	.-420    	; 0x514a <modbus_update+0x4a>
			
		}
		else {return;}// exceptionResponse(CHECKSUM_FAIL);
	}
	else {return;}//exceptionResponse(ERROR_FUNC);
}
    52ee:	df 91       	pop	r29
    52f0:	cf 91       	pop	r28
    52f2:	1f 91       	pop	r17
    52f4:	0f 91       	pop	r16
    52f6:	ff 90       	pop	r15
    52f8:	ef 90       	pop	r14
    52fa:	df 90       	pop	r13
    52fc:	cf 90       	pop	r12
    52fe:	bf 90       	pop	r11
    5300:	af 90       	pop	r10
    5302:	08 95       	ret

00005304 <StartReversingValve>:
		xTimerChangePeriod( xStartRevValve_2,period, 100 );
	}
	
}
//------------------------------------------------
void StartReversingValve(TimerHandle_t xTimer){
    5304:	8f 92       	push	r8
    5306:	9f 92       	push	r9
    5308:	af 92       	push	r10
    530a:	bf 92       	push	r11
    530c:	cf 92       	push	r12
    530e:	df 92       	push	r13
    5310:	ef 92       	push	r14
    5312:	ff 92       	push	r15
    5314:	0f 93       	push	r16
    5316:	1f 93       	push	r17
    5318:	cf 93       	push	r28
    531a:	df 93       	push	r29
	TickType_t period;
	static time_t time_count_1;
	static time_t time_count_2;
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    531c:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    5320:	ec 01       	movw	r28, r24
	
	xSerialxPrintf(&xSerial3Port,"ReversingValve\r\n");
    5322:	8f eb       	ldi	r24, 0xBF	; 191
    5324:	92 e0       	ldi	r25, 0x02	; 2
    5326:	9f 93       	push	r25
    5328:	8f 93       	push	r24
    532a:	82 e3       	ldi	r24, 0x32	; 50
    532c:	98 e0       	ldi	r25, 0x08	; 8
    532e:	9f 93       	push	r25
    5330:	8f 93       	push	r24
    5332:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	
if((*pxTimerID) == uxStartDelayRevVTimer_1_ID)
    5336:	88 81       	ld	r24, Y
    5338:	0f 90       	pop	r0
    533a:	0f 90       	pop	r0
    533c:	0f 90       	pop	r0
    533e:	0f 90       	pop	r0
    5340:	84 30       	cpi	r24, 0x04	; 4
    5342:	09 f0       	breq	.+2      	; 0x5346 <StartReversingValve+0x42>
    5344:	73 c0       	rjmp	.+230    	; 0x542c <StartReversingValve+0x128>
	{	period=(TickType_t)EEpromData.Three_Way_delay;
    5346:	20 91 98 09 	lds	r18, 0x0998	; 0x800998 <EEpromData+0x4>
		period*=1000;
    534a:	30 e0       	ldi	r19, 0x00	; 0
    534c:	a8 ee       	ldi	r26, 0xE8	; 232
    534e:	b3 e0       	ldi	r27, 0x03	; 3
    5350:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
		period+=10000;
    5354:	4b 01       	movw	r8, r22
    5356:	5c 01       	movw	r10, r24
    5358:	20 e1       	ldi	r18, 0x10	; 16
    535a:	82 0e       	add	r8, r18
    535c:	27 e2       	ldi	r18, 0x27	; 39
    535e:	92 1e       	adc	r9, r18
    5360:	a1 1c       	adc	r10, r1
    5362:	b1 1c       	adc	r11, r1
		//////////////////////////////////////////

     xSerialxPrintf(&xSerial3Port,"StartReversingValve_1\r\n");
    5364:	80 ed       	ldi	r24, 0xD0	; 208
    5366:	92 e0       	ldi	r25, 0x02	; 2
    5368:	9f 93       	push	r25
    536a:	8f 93       	push	r24
    536c:	82 e3       	ldi	r24, 0x32	; 50
    536e:	98 e0       	ldi	r25, 0x08	; 8
    5370:	9f 93       	push	r25
    5372:	8f 93       	push	r24
    5374:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>

		if(Comp_1.Cooling  )
    5378:	0f 90       	pop	r0
    537a:	0f 90       	pop	r0
    537c:	0f 90       	pop	r0
    537e:	0f 90       	pop	r0
    5380:	80 91 f7 09 	lds	r24, 0x09F7	; 0x8009f7 <Comp_1+0x3>
    5384:	88 23       	and	r24, r24
    5386:	e1 f0       	breq	.+56     	; 0x53c0 <StartReversingValve+0xbc>
		{
			 xSerialxPrintf(&xSerial3Port,"StartReversingcool_1\r\n");
    5388:	88 ee       	ldi	r24, 0xE8	; 232
    538a:	92 e0       	ldi	r25, 0x02	; 2
    538c:	9f 93       	push	r25
    538e:	8f 93       	push	r24
    5390:	82 e3       	ldi	r24, 0x32	; 50
    5392:	98 e0       	ldi	r25, 0x08	; 8
    5394:	9f 93       	push	r25
    5396:	8f 93       	push	r24
    5398:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			 
			if( EEpromData.reversMod==1){//PIN_REV_VALVE_1 >0 &&
    539c:	80 91 bc 09 	lds	r24, 0x09BC	; 0x8009bc <EEpromData+0x28>
    53a0:	0f 90       	pop	r0
    53a2:	0f 90       	pop	r0
    53a4:	0f 90       	pop	r0
    53a6:	0f 90       	pop	r0
    53a8:	81 30       	cpi	r24, 0x01	; 1
    53aa:	21 f4       	brne	.+8      	; 0x53b4 <StartReversingValve+0xb0>
				
				STOP_REV_VALVE_1;//
    53ac:	a4 98       	cbi	0x14, 4	; 20
				
				Comp_1.revVOn=0;
    53ae:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <Comp_1+0xe>
    53b2:	06 c0       	rjmp	.+12     	; 0x53c0 <StartReversingValve+0xbc>
				time_count_1+= difftime(time(&current_time), timeStartRevV_1);
				if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
				*/
				
			}
			else if(EEpromData.reversMod==0){//PIN_REV_VALVE_1 == 0 && 
    53b4:	81 11       	cpse	r24, r1
    53b6:	04 c0       	rjmp	.+8      	; 0x53c0 <StartReversingValve+0xbc>
				START_REV_VALVE_1;
    53b8:	a4 9a       	sbi	0x14, 4	; 20
				Comp_1.revVOn=1;
    53ba:	81 e0       	ldi	r24, 0x01	; 1
    53bc:	80 93 02 0a 	sts	0x0A02, r24	; 0x800a02 <Comp_1+0xe>
				EEpromData.number_turnon_revers_1+=1;
				*/
			}
			
		}
		if(Comp_1.heatingWater || Comp_1.Heating)
    53c0:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <Comp_1+0x4>
    53c4:	81 11       	cpse	r24, r1
    53c6:	04 c0       	rjmp	.+8      	; 0x53d0 <StartReversingValve+0xcc>
    53c8:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <Comp_1+0x2>
    53cc:	88 23       	and	r24, r24
    53ce:	d9 f0       	breq	.+54     	; 0x5406 <StartReversingValve+0x102>
		{
			xSerialxPrintf(&xSerial3Port,"StartReversingheast_1\r\n");
    53d0:	8f ef       	ldi	r24, 0xFF	; 255
    53d2:	92 e0       	ldi	r25, 0x02	; 2
    53d4:	9f 93       	push	r25
    53d6:	8f 93       	push	r24
    53d8:	82 e3       	ldi	r24, 0x32	; 50
    53da:	98 e0       	ldi	r25, 0x08	; 8
    53dc:	9f 93       	push	r25
    53de:	8f 93       	push	r24
    53e0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			if(EEpromData.reversMod==0){//PIN_REV_VALVE_1 > 0 && 
    53e4:	80 91 bc 09 	lds	r24, 0x09BC	; 0x8009bc <EEpromData+0x28>
    53e8:	0f 90       	pop	r0
    53ea:	0f 90       	pop	r0
    53ec:	0f 90       	pop	r0
    53ee:	0f 90       	pop	r0
    53f0:	81 11       	cpse	r24, r1
    53f2:	04 c0       	rjmp	.+8      	; 0x53fc <StartReversingValve+0xf8>
				
				STOP_REV_VALVE_1;
    53f4:	a4 98       	cbi	0x14, 4	; 20
				Comp_1.revVOn=0;
    53f6:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <Comp_1+0xe>
    53fa:	05 c0       	rjmp	.+10     	; 0x5406 <StartReversingValve+0x102>
				
				time_count_1+= difftime(time(&current_time), timeStartRevV_1);
				if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
				*/
			}
			else if(EEpromData.reversMod==1){//PIN_REV_VALVE_1 == 0 && 
    53fc:	81 30       	cpi	r24, 0x01	; 1
    53fe:	19 f4       	brne	.+6      	; 0x5406 <StartReversingValve+0x102>
				START_REV_VALVE_1;
    5400:	a4 9a       	sbi	0x14, 4	; 20
				Comp_1.revVOn=1;
    5402:	80 93 02 0a 	sts	0x0A02, r24	; 0x800a02 <Comp_1+0xe>
				*/
			}
			
		}
		
		xTimerChangePeriod( xStartThreeWay,period, 100 );
    5406:	0f 2e       	mov	r0, r31
    5408:	f4 e6       	ldi	r31, 0x64	; 100
    540a:	cf 2e       	mov	r12, r31
    540c:	d1 2c       	mov	r13, r1
    540e:	e1 2c       	mov	r14, r1
    5410:	f1 2c       	mov	r15, r1
    5412:	f0 2d       	mov	r31, r0
    5414:	00 e0       	ldi	r16, 0x00	; 0
    5416:	10 e0       	ldi	r17, 0x00	; 0
    5418:	a5 01       	movw	r20, r10
    541a:	94 01       	movw	r18, r8
    541c:	64 e0       	ldi	r22, 0x04	; 4
    541e:	80 91 6c 0a 	lds	r24, 0x0A6C	; 0x800a6c <xStartThreeWay>
    5422:	90 91 6d 0a 	lds	r25, 0x0A6D	; 0x800a6d <xStartThreeWay+0x1>
    5426:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    542a:	6b c0       	rjmp	.+214    	; 0x5502 <StartReversingValve+0x1fe>
		
	}
else if((*pxTimerID) == uxStartDelayRevVTimer_2_ID)
    542c:	81 31       	cpi	r24, 0x11	; 17
    542e:	09 f0       	breq	.+2      	; 0x5432 <StartReversingValve+0x12e>
    5430:	68 c0       	rjmp	.+208    	; 0x5502 <StartReversingValve+0x1fe>
	{
		period=(TickType_t)EEpromData.HeatingPump_delay;
    5432:	20 91 97 09 	lds	r18, 0x0997	; 0x800997 <EEpromData+0x3>
		period*=1000;
    5436:	30 e0       	ldi	r19, 0x00	; 0
    5438:	a8 ee       	ldi	r26, 0xE8	; 232
    543a:	b3 e0       	ldi	r27, 0x03	; 3
    543c:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    5440:	4b 01       	movw	r8, r22
    5442:	5c 01       	movw	r10, r24
		 xSerialxPrintf(&xSerial3Port,"StartReversingValve_2\r\n");
    5444:	87 e1       	ldi	r24, 0x17	; 23
    5446:	93 e0       	ldi	r25, 0x03	; 3
    5448:	9f 93       	push	r25
    544a:	8f 93       	push	r24
    544c:	82 e3       	ldi	r24, 0x32	; 50
    544e:	98 e0       	ldi	r25, 0x08	; 8
    5450:	9f 93       	push	r25
    5452:	8f 93       	push	r24
    5454:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(Comp_2.Cooling)
    5458:	0f 90       	pop	r0
    545a:	0f 90       	pop	r0
    545c:	0f 90       	pop	r0
    545e:	0f 90       	pop	r0
    5460:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <Comp_2+0x3>
    5464:	88 23       	and	r24, r24
    5466:	e1 f0       	breq	.+56     	; 0x54a0 <StartReversingValve+0x19c>
		{xSerialxPrintf(&xSerial3Port,"StartReversingcool_2\r\n");
    5468:	8f e2       	ldi	r24, 0x2F	; 47
    546a:	93 e0       	ldi	r25, 0x03	; 3
    546c:	9f 93       	push	r25
    546e:	8f 93       	push	r24
    5470:	82 e3       	ldi	r24, 0x32	; 50
    5472:	98 e0       	ldi	r25, 0x08	; 8
    5474:	9f 93       	push	r25
    5476:	8f 93       	push	r24
    5478:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			if(EEpromData.reversMod==1){//PIN_REV_VALVE_2 >0 && 
    547c:	80 91 bc 09 	lds	r24, 0x09BC	; 0x8009bc <EEpromData+0x28>
    5480:	0f 90       	pop	r0
    5482:	0f 90       	pop	r0
    5484:	0f 90       	pop	r0
    5486:	0f 90       	pop	r0
    5488:	81 30       	cpi	r24, 0x01	; 1
    548a:	21 f4       	brne	.+8      	; 0x5494 <StartReversingValve+0x190>
				
				STOP_REV_VALVE_2;//
    548c:	a3 98       	cbi	0x14, 3	; 20
				Comp_2.revVOn=0;
    548e:	10 92 8c 0a 	sts	0x0A8C, r1	; 0x800a8c <Comp_2+0xe>
    5492:	06 c0       	rjmp	.+12     	; 0x54a0 <StartReversingValve+0x19c>
				time_count_2+= difftime(time(&current_time), timeStartRevV_2);
				if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
				*/
				
			}
			else if(EEpromData.reversMod==0){//PIN_REV_VALVE_2 == 0 && 
    5494:	81 11       	cpse	r24, r1
    5496:	04 c0       	rjmp	.+8      	; 0x54a0 <StartReversingValve+0x19c>
				START_REV_VALVE_2;
    5498:	a3 9a       	sbi	0x14, 3	; 20
				Comp_1.revVOn=1;
    549a:	81 e0       	ldi	r24, 0x01	; 1
    549c:	80 93 02 0a 	sts	0x0A02, r24	; 0x800a02 <Comp_1+0xe>
				EEpromData.number_turnon_revers_2+=1;
				*/
			}
			
		}
		if(Comp_2.Heating)
    54a0:	80 91 80 0a 	lds	r24, 0x0A80	; 0x800a80 <Comp_2+0x2>
    54a4:	88 23       	and	r24, r24
    54a6:	d9 f0       	breq	.+54     	; 0x54de <StartReversingValve+0x1da>
		{xSerialxPrintf(&xSerial3Port,"StartReversingheat_2\r\n");
    54a8:	86 e4       	ldi	r24, 0x46	; 70
    54aa:	93 e0       	ldi	r25, 0x03	; 3
    54ac:	9f 93       	push	r25
    54ae:	8f 93       	push	r24
    54b0:	82 e3       	ldi	r24, 0x32	; 50
    54b2:	98 e0       	ldi	r25, 0x08	; 8
    54b4:	9f 93       	push	r25
    54b6:	8f 93       	push	r24
    54b8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			if(EEpromData.reversMod==0){//PIN_REV_VALVE_2 > 0 && 
    54bc:	80 91 bc 09 	lds	r24, 0x09BC	; 0x8009bc <EEpromData+0x28>
    54c0:	0f 90       	pop	r0
    54c2:	0f 90       	pop	r0
    54c4:	0f 90       	pop	r0
    54c6:	0f 90       	pop	r0
    54c8:	81 11       	cpse	r24, r1
    54ca:	04 c0       	rjmp	.+8      	; 0x54d4 <StartReversingValve+0x1d0>
				
				STOP_REV_VALVE_2;
    54cc:	a3 98       	cbi	0x14, 3	; 20
				Comp_2.revVOn=0;
    54ce:	10 92 8c 0a 	sts	0x0A8C, r1	; 0x800a8c <Comp_2+0xe>
    54d2:	05 c0       	rjmp	.+10     	; 0x54de <StartReversingValve+0x1da>
				
				time_count_2+= difftime(time(&current_time), timeStartRevV_2);
				if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
				*/
			}
			else if(EEpromData.reversMod==1){//PIN_REV_VALVE_2 == 0 && 
    54d4:	81 30       	cpi	r24, 0x01	; 1
    54d6:	19 f4       	brne	.+6      	; 0x54de <StartReversingValve+0x1da>
				START_REV_VALVE_2;
    54d8:	a3 9a       	sbi	0x14, 3	; 20
				Comp_2.revVOn=1;
    54da:	80 93 8c 0a 	sts	0x0A8C, r24	; 0x800a8c <Comp_2+0xe>
				*/
			}
			
		}

		xTimerChangePeriod( xStartHeatPump_2,period, 100 );
    54de:	0f 2e       	mov	r0, r31
    54e0:	f4 e6       	ldi	r31, 0x64	; 100
    54e2:	cf 2e       	mov	r12, r31
    54e4:	d1 2c       	mov	r13, r1
    54e6:	e1 2c       	mov	r14, r1
    54e8:	f1 2c       	mov	r15, r1
    54ea:	f0 2d       	mov	r31, r0
    54ec:	00 e0       	ldi	r16, 0x00	; 0
    54ee:	10 e0       	ldi	r17, 0x00	; 0
    54f0:	a5 01       	movw	r20, r10
    54f2:	94 01       	movw	r18, r8
    54f4:	64 e0       	ldi	r22, 0x04	; 4
    54f6:	80 91 6e 0a 	lds	r24, 0x0A6E	; 0x800a6e <xStartHeatPump_2>
    54fa:	90 91 6f 0a 	lds	r25, 0x0A6F	; 0x800a6f <xStartHeatPump_2+0x1>
    54fe:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}


}
    5502:	df 91       	pop	r29
    5504:	cf 91       	pop	r28
    5506:	1f 91       	pop	r17
    5508:	0f 91       	pop	r16
    550a:	ff 90       	pop	r15
    550c:	ef 90       	pop	r14
    550e:	df 90       	pop	r13
    5510:	cf 90       	pop	r12
    5512:	bf 90       	pop	r11
    5514:	af 90       	pop	r10
    5516:	9f 90       	pop	r9
    5518:	8f 90       	pop	r8
    551a:	08 95       	ret

0000551c <StartHeatPump>:
}

//------------------------------------------------

void StartHeatPump(TimerHandle_t xTimer)
{
    551c:	8f 92       	push	r8
    551e:	9f 92       	push	r9
    5520:	af 92       	push	r10
    5522:	bf 92       	push	r11
    5524:	cf 92       	push	r12
    5526:	df 92       	push	r13
    5528:	ef 92       	push	r14
    552a:	ff 92       	push	r15
    552c:	0f 93       	push	r16
    552e:	1f 93       	push	r17
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5530:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    5534:	fc 01       	movw	r30, r24
	TickType_t period;
	period=(TickType_t)EEpromData.Compressor_delay;
    5536:	20 91 94 09 	lds	r18, 0x0994	; 0x800994 <EEpromData>
	period*=1000;
    553a:	30 e0       	ldi	r19, 0x00	; 0
    553c:	a8 ee       	ldi	r26, 0xE8	; 232
    553e:	b3 e0       	ldi	r27, 0x03	; 3
    5540:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    5544:	4b 01       	movw	r8, r22
    5546:	5c 01       	movw	r10, r24
	//xSerialxPrintf(&xSerial3Port,"StartHeatPump\r\n");
	if((*pxTimerID) == uxStartDelayHeatPTimer_1_ID) {
    5548:	80 81       	ld	r24, Z
    554a:	82 30       	cpi	r24, 0x02	; 2
    554c:	09 f0       	breq	.+2      	; 0x5550 <StartHeatPump+0x34>
    554e:	40 c0       	rjmp	.+128    	; 0x55d0 <StartHeatPump+0xb4>
		xSerialxPrintf(&xSerial3Port,"StartHeatPump_1\r\n");
    5550:	8d e5       	ldi	r24, 0x5D	; 93
    5552:	93 e0       	ldi	r25, 0x03	; 3
    5554:	9f 93       	push	r25
    5556:	8f 93       	push	r24
    5558:	82 e3       	ldi	r24, 0x32	; 50
    555a:	98 e0       	ldi	r25, 0x08	; 8
    555c:	9f 93       	push	r25
    555e:	8f 93       	push	r24
    5560:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_1 ==0)
    5564:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5568:	0f 90       	pop	r0
    556a:	0f 90       	pop	r0
    556c:	0f 90       	pop	r0
    556e:	0f 90       	pop	r0
    5570:	83 fd       	sbrc	r24, 3
    5572:	70 c0       	rjmp	.+224    	; 0x5654 <StartHeatPump+0x138>
		{
			
			//xSerialxPrintf(&xSerial3Port,"StartHeatPump_1\r\n");
			Comp_1.heatPOn=1;
    5574:	81 e0       	ldi	r24, 0x01	; 1
    5576:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <Comp_1+0xc>
			START_HEAT_PUMP_1;
    557a:	e2 e0       	ldi	r30, 0x02	; 2
    557c:	f1 e0       	ldi	r31, 0x01	; 1
    557e:	80 81       	ld	r24, Z
    5580:	88 60       	ori	r24, 0x08	; 8
    5582:	80 83       	st	Z, r24
			timeStartHeatP_1=time(&current_time);
    5584:	8f e8       	ldi	r24, 0x8F	; 143
    5586:	99 e0       	ldi	r25, 0x09	; 9
    5588:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    558c:	60 93 08 0b 	sts	0x0B08, r22	; 0x800b08 <timeStartHeatP_1>
    5590:	70 93 09 0b 	sts	0x0B09, r23	; 0x800b09 <timeStartHeatP_1+0x1>
    5594:	80 93 0a 0b 	sts	0x0B0A, r24	; 0x800b0a <timeStartHeatP_1+0x2>
    5598:	90 93 0b 0b 	sts	0x0B0B, r25	; 0x800b0b <timeStartHeatP_1+0x3>
			EEpromData.number_turnon_hiter_1+=1;			
    559c:	e6 ed       	ldi	r30, 0xD6	; 214
    559e:	f9 e0       	ldi	r31, 0x09	; 9
    55a0:	80 81       	ld	r24, Z
    55a2:	91 81       	ldd	r25, Z+1	; 0x01
    55a4:	01 96       	adiw	r24, 0x01	; 1
    55a6:	91 83       	std	Z+1, r25	; 0x01
    55a8:	80 83       	st	Z, r24
			xTimerChangePeriod( xStartCompressor_1,period, 100 );
    55aa:	0f 2e       	mov	r0, r31
    55ac:	f4 e6       	ldi	r31, 0x64	; 100
    55ae:	cf 2e       	mov	r12, r31
    55b0:	d1 2c       	mov	r13, r1
    55b2:	e1 2c       	mov	r14, r1
    55b4:	f1 2c       	mov	r15, r1
    55b6:	f0 2d       	mov	r31, r0
    55b8:	00 e0       	ldi	r16, 0x00	; 0
    55ba:	10 e0       	ldi	r17, 0x00	; 0
    55bc:	a5 01       	movw	r20, r10
    55be:	94 01       	movw	r18, r8
    55c0:	64 e0       	ldi	r22, 0x04	; 4
    55c2:	80 91 12 0b 	lds	r24, 0x0B12	; 0x800b12 <xStartCompressor_1>
    55c6:	90 91 13 0b 	lds	r25, 0x0B13	; 0x800b13 <xStartCompressor_1+0x1>
    55ca:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    55ce:	42 c0       	rjmp	.+132    	; 0x5654 <StartHeatPump+0x138>
			
		}
	}

	else if((*pxTimerID) == uxStartDelayHeatPTimer_2_ID) {
    55d0:	8f 30       	cpi	r24, 0x0F	; 15
    55d2:	09 f0       	breq	.+2      	; 0x55d6 <StartHeatPump+0xba>
    55d4:	3f c0       	rjmp	.+126    	; 0x5654 <StartHeatPump+0x138>
		xSerialxPrintf(&xSerial3Port,"StartHeatPump_2\r\n");
    55d6:	8f e6       	ldi	r24, 0x6F	; 111
    55d8:	93 e0       	ldi	r25, 0x03	; 3
    55da:	9f 93       	push	r25
    55dc:	8f 93       	push	r24
    55de:	82 e3       	ldi	r24, 0x32	; 50
    55e0:	98 e0       	ldi	r25, 0x08	; 8
    55e2:	9f 93       	push	r25
    55e4:	8f 93       	push	r24
    55e6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_2 == 0)
    55ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    55ee:	0f 90       	pop	r0
    55f0:	0f 90       	pop	r0
    55f2:	0f 90       	pop	r0
    55f4:	0f 90       	pop	r0
    55f6:	84 fd       	sbrc	r24, 4
    55f8:	2d c0       	rjmp	.+90     	; 0x5654 <StartHeatPump+0x138>
		{
			Comp_2.heatPOn=2;
    55fa:	82 e0       	ldi	r24, 0x02	; 2
    55fc:	80 93 8a 0a 	sts	0x0A8A, r24	; 0x800a8a <Comp_2+0xc>
			START_HEAT_PUMP_2;
    5600:	e2 e0       	ldi	r30, 0x02	; 2
    5602:	f1 e0       	ldi	r31, 0x01	; 1
    5604:	80 81       	ld	r24, Z
    5606:	80 61       	ori	r24, 0x10	; 16
    5608:	80 83       	st	Z, r24
			timeStartHeatP_2=time(&current_time);
    560a:	8f e8       	ldi	r24, 0x8F	; 143
    560c:	99 e0       	ldi	r25, 0x09	; 9
    560e:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5612:	60 93 1c 0b 	sts	0x0B1C, r22	; 0x800b1c <timeStartHeatP_2>
    5616:	70 93 1d 0b 	sts	0x0B1D, r23	; 0x800b1d <timeStartHeatP_2+0x1>
    561a:	80 93 1e 0b 	sts	0x0B1E, r24	; 0x800b1e <timeStartHeatP_2+0x2>
    561e:	90 93 1f 0b 	sts	0x0B1F, r25	; 0x800b1f <timeStartHeatP_2+0x3>
			EEpromData.number_turnon_hiter_2+=1;
    5622:	ea ee       	ldi	r30, 0xEA	; 234
    5624:	f9 e0       	ldi	r31, 0x09	; 9
    5626:	80 81       	ld	r24, Z
    5628:	91 81       	ldd	r25, Z+1	; 0x01
    562a:	01 96       	adiw	r24, 0x01	; 1
    562c:	91 83       	std	Z+1, r25	; 0x01
    562e:	80 83       	st	Z, r24
			xTimerChangePeriod( xStartCompressor_2,period, 100 );
    5630:	0f 2e       	mov	r0, r31
    5632:	f4 e6       	ldi	r31, 0x64	; 100
    5634:	cf 2e       	mov	r12, r31
    5636:	d1 2c       	mov	r13, r1
    5638:	e1 2c       	mov	r14, r1
    563a:	f1 2c       	mov	r15, r1
    563c:	f0 2d       	mov	r31, r0
    563e:	00 e0       	ldi	r16, 0x00	; 0
    5640:	10 e0       	ldi	r17, 0x00	; 0
    5642:	a5 01       	movw	r20, r10
    5644:	94 01       	movw	r18, r8
    5646:	64 e0       	ldi	r22, 0x04	; 4
    5648:	80 91 24 0b 	lds	r24, 0x0B24	; 0x800b24 <xStartCompressor_2>
    564c:	90 91 25 0b 	lds	r25, 0x0B25	; 0x800b25 <xStartCompressor_2+0x1>
    5650:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		}
		
	}
}
    5654:	1f 91       	pop	r17
    5656:	0f 91       	pop	r16
    5658:	ff 90       	pop	r15
    565a:	ef 90       	pop	r14
    565c:	df 90       	pop	r13
    565e:	cf 90       	pop	r12
    5660:	bf 90       	pop	r11
    5662:	af 90       	pop	r10
    5664:	9f 90       	pop	r9
    5666:	8f 90       	pop	r8
    5668:	08 95       	ret

0000566a <SwitchRev_2_Time>:
		xTimerStart(xSwitchRevTwo_2_time, 0);
	}
}
//-------------------------------------------------------------------------
void SwitchRev_2_Time(TimerHandle_t xTimer)
{
    566a:	8f 92       	push	r8
    566c:	9f 92       	push	r9
    566e:	af 92       	push	r10
    5670:	bf 92       	push	r11
    5672:	cf 92       	push	r12
    5674:	df 92       	push	r13
    5676:	ef 92       	push	r14
    5678:	ff 92       	push	r15
    567a:	0f 93       	push	r16
    567c:	1f 93       	push	r17
    567e:	cf 93       	push	r28
    5680:	df 93       	push	r29
    5682:	ac 01       	movw	r20, r24
	portBASE_TYPE *pxTimerID;
	
	TickType_t period;
	period=(TickType_t)EEpromData.HeatingPump_delay;
    5684:	20 91 97 09 	lds	r18, 0x0997	; 0x800997 <EEpromData+0x3>
	period*=1000;
    5688:	30 e0       	ldi	r19, 0x00	; 0
    568a:	a8 ee       	ldi	r26, 0xE8	; 232
    568c:	b3 e0       	ldi	r27, 0x03	; 3
    568e:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    5692:	4b 01       	movw	r8, r22
    5694:	5c 01       	movw	r10, r24
	pxTimerID = pvTimerGetTimerID(xTimer);
    5696:	ca 01       	movw	r24, r20
    5698:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    569c:	ec 01       	movw	r28, r24
	
	//xSerialxPrintf(&xSerial3Port,"SwitchRev_2\r\n");
	
	if((*pxTimerID) == uxSwitchRevTwo_1_ID)
    569e:	88 81       	ld	r24, Y
    56a0:	8d 30       	cpi	r24, 0x0D	; 13
    56a2:	29 f5       	brne	.+74     	; 0x56ee <SwitchRev_2_Time+0x84>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_ON_1_2\r\n");
    56a4:	81 e8       	ldi	r24, 0x81	; 129
    56a6:	93 e0       	ldi	r25, 0x03	; 3
    56a8:	9f 93       	push	r25
    56aa:	8f 93       	push	r24
    56ac:	82 e3       	ldi	r24, 0x32	; 50
    56ae:	98 e0       	ldi	r25, 0x08	; 8
    56b0:	9f 93       	push	r25
    56b2:	8f 93       	push	r24
    56b4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_REV_VALVE_1 == 0){START_REV_VALVE_1;}//
    56b8:	0f 90       	pop	r0
    56ba:	0f 90       	pop	r0
    56bc:	0f 90       	pop	r0
    56be:	0f 90       	pop	r0
    56c0:	94 99       	sbic	0x12, 4	; 18
    56c2:	02 c0       	rjmp	.+4      	; 0x56c8 <SwitchRev_2_Time+0x5e>
    56c4:	a4 9a       	sbi	0x14, 4	; 20
    56c6:	01 c0       	rjmp	.+2      	; 0x56ca <SwitchRev_2_Time+0x60>
		else {STOP_REV_VALVE_1;}//xSerialxPrintf(&xSerial3Port,"SwitchRev_OFF_2\r\n");
    56c8:	a4 98       	cbi	0x14, 4	; 20
		xTimerChangePeriod( xStopHeatPump_1,period, 100 );
    56ca:	0f 2e       	mov	r0, r31
    56cc:	f4 e6       	ldi	r31, 0x64	; 100
    56ce:	cf 2e       	mov	r12, r31
    56d0:	d1 2c       	mov	r13, r1
    56d2:	e1 2c       	mov	r14, r1
    56d4:	f1 2c       	mov	r15, r1
    56d6:	f0 2d       	mov	r31, r0
    56d8:	00 e0       	ldi	r16, 0x00	; 0
    56da:	10 e0       	ldi	r17, 0x00	; 0
    56dc:	a5 01       	movw	r20, r10
    56de:	94 01       	movw	r18, r8
    56e0:	64 e0       	ldi	r22, 0x04	; 4
    56e2:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <xStopHeatPump_1>
    56e6:	90 91 82 09 	lds	r25, 0x0982	; 0x800982 <xStopHeatPump_1+0x1>
    56ea:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
	if((*pxTimerID) == uxSwitchRevTwo_2_ID)
    56ee:	88 81       	ld	r24, Y
    56f0:	89 31       	cpi	r24, 0x19	; 25
    56f2:	b9 f4       	brne	.+46     	; 0x5722 <SwitchRev_2_Time+0xb8>
	{
		//xSerialxPrintf(&xSerial3Port,"SwitchRev_2_2\r\n");
		if(PIN_REV_VALVE_2 == 0) START_REV_VALVE_2;
    56f4:	93 99       	sbic	0x12, 3	; 18
    56f6:	02 c0       	rjmp	.+4      	; 0x56fc <SwitchRev_2_Time+0x92>
    56f8:	a3 9a       	sbi	0x14, 3	; 20
    56fa:	01 c0       	rjmp	.+2      	; 0x56fe <SwitchRev_2_Time+0x94>
		else STOP_REV_VALVE_2;
    56fc:	a3 98       	cbi	0x14, 3	; 20
		xTimerChangePeriod( xStopHeatPump_2,period, 100 );
    56fe:	0f 2e       	mov	r0, r31
    5700:	f4 e6       	ldi	r31, 0x64	; 100
    5702:	cf 2e       	mov	r12, r31
    5704:	d1 2c       	mov	r13, r1
    5706:	e1 2c       	mov	r14, r1
    5708:	f1 2c       	mov	r15, r1
    570a:	f0 2d       	mov	r31, r0
    570c:	00 e0       	ldi	r16, 0x00	; 0
    570e:	10 e0       	ldi	r17, 0x00	; 0
    5710:	a5 01       	movw	r20, r10
    5712:	94 01       	movw	r18, r8
    5714:	64 e0       	ldi	r22, 0x04	; 4
    5716:	80 91 02 0b 	lds	r24, 0x0B02	; 0x800b02 <xStopHeatPump_2>
    571a:	90 91 03 0b 	lds	r25, 0x0B03	; 0x800b03 <xStopHeatPump_2+0x1>
    571e:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
}
    5722:	df 91       	pop	r29
    5724:	cf 91       	pop	r28
    5726:	1f 91       	pop	r17
    5728:	0f 91       	pop	r16
    572a:	ff 90       	pop	r15
    572c:	ef 90       	pop	r14
    572e:	df 90       	pop	r13
    5730:	cf 90       	pop	r12
    5732:	bf 90       	pop	r11
    5734:	af 90       	pop	r10
    5736:	9f 90       	pop	r9
    5738:	8f 90       	pop	r8
    573a:	08 95       	ret

0000573c <Revers_Stop>:
	
}

//-------------------------------------------------------------------------
void Revers_Stop(TimerHandle_t xTimer)
{
    573c:	8f 92       	push	r8
    573e:	9f 92       	push	r9
    5740:	af 92       	push	r10
    5742:	bf 92       	push	r11
    5744:	cf 92       	push	r12
    5746:	df 92       	push	r13
    5748:	ef 92       	push	r14
    574a:	ff 92       	push	r15
    574c:	0f 93       	push	r16
    574e:	1f 93       	push	r17
    5750:	ac 01       	movw	r20, r24
	static time_t time_count_1;
	static time_t time_count_2;
	TickType_t period;
	period=(TickType_t)EEpromData.Source_Pump_delay;
    5752:	20 91 95 09 	lds	r18, 0x0995	; 0x800995 <EEpromData+0x1>
	period*=1000;
    5756:	30 e0       	ldi	r19, 0x00	; 0
    5758:	a8 ee       	ldi	r26, 0xE8	; 232
    575a:	b3 e0       	ldi	r27, 0x03	; 3
    575c:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    5760:	4b 01       	movw	r8, r22
    5762:	5c 01       	movw	r10, r24

	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5764:	ca 01       	movw	r24, r20
    5766:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
   // xSerialxPrintf(&xSerial3Port,"StopRevValve\r\n");

	if((*pxTimerID) == uxStopDelayRevVTimer_1_ID)
    576a:	fc 01       	movw	r30, r24
    576c:	80 81       	ld	r24, Z
    576e:	8a 30       	cpi	r24, 0x0A	; 10
    5770:	31 f5       	brne	.+76     	; 0x57be <Revers_Stop+0x82>
	{
		
		
		if(PIN_REV_VALVE_1 > 0)//
    5772:	94 9b       	sbis	0x12, 4	; 18
    5774:	11 c0       	rjmp	.+34     	; 0x5798 <Revers_Stop+0x5c>
		{
			STOP_REV_VALVE_1;
    5776:	a4 98       	cbi	0x14, 4	; 20
			xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    5778:	84 e9       	ldi	r24, 0x94	; 148
    577a:	93 e0       	ldi	r25, 0x03	; 3
    577c:	9f 93       	push	r25
    577e:	8f 93       	push	r24
    5780:	82 e3       	ldi	r24, 0x32	; 50
    5782:	98 e0       	ldi	r25, 0x08	; 8
    5784:	9f 93       	push	r25
    5786:	8f 93       	push	r24
    5788:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.revVOn=0;
    578c:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <Comp_1+0xe>
    5790:	0f 90       	pop	r0
    5792:	0f 90       	pop	r0
    5794:	0f 90       	pop	r0
    5796:	0f 90       	pop	r0
			//time_count_1+= difftime(time(&current_time), timeStartRevV_1);
			//if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}

		}
		xTimerChangePeriod( xStopSource_1,period, 100 );
    5798:	0f 2e       	mov	r0, r31
    579a:	f4 e6       	ldi	r31, 0x64	; 100
    579c:	cf 2e       	mov	r12, r31
    579e:	d1 2c       	mov	r13, r1
    57a0:	e1 2c       	mov	r14, r1
    57a2:	f1 2c       	mov	r15, r1
    57a4:	f0 2d       	mov	r31, r0
    57a6:	00 e0       	ldi	r16, 0x00	; 0
    57a8:	10 e0       	ldi	r17, 0x00	; 0
    57aa:	a5 01       	movw	r20, r10
    57ac:	94 01       	movw	r18, r8
    57ae:	64 e0       	ldi	r22, 0x04	; 4
    57b0:	80 91 8b 09 	lds	r24, 0x098B	; 0x80098b <xStopSource_1>
    57b4:	90 91 8c 09 	lds	r25, 0x098C	; 0x80098c <xStopSource_1+0x1>
    57b8:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    57bc:	27 c0       	rjmp	.+78     	; 0x580c <Revers_Stop+0xd0>
		//xTimerStart(xStopSource_1, 0);
	}
	
	else if((*pxTimerID) == uxStopDelayRevVTimer_2_ID)
    57be:	87 31       	cpi	r24, 0x17	; 23
    57c0:	29 f5       	brne	.+74     	; 0x580c <Revers_Stop+0xd0>
	{
		
		if(PIN_REV_VALVE_2 > 0)//
    57c2:	93 9b       	sbis	0x12, 3	; 18
    57c4:	11 c0       	rjmp	.+34     	; 0x57e8 <Revers_Stop+0xac>
		{   
			xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    57c6:	85 ea       	ldi	r24, 0xA5	; 165
    57c8:	93 e0       	ldi	r25, 0x03	; 3
    57ca:	9f 93       	push	r25
    57cc:	8f 93       	push	r24
    57ce:	82 e3       	ldi	r24, 0x32	; 50
    57d0:	98 e0       	ldi	r25, 0x08	; 8
    57d2:	9f 93       	push	r25
    57d4:	8f 93       	push	r24
    57d6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			STOP_REV_VALVE_2;
    57da:	a3 98       	cbi	0x14, 3	; 20
			
			
			Comp_2.revVOn=0;
    57dc:	10 92 8c 0a 	sts	0x0A8C, r1	; 0x800a8c <Comp_2+0xe>
    57e0:	0f 90       	pop	r0
    57e2:	0f 90       	pop	r0
    57e4:	0f 90       	pop	r0
    57e6:	0f 90       	pop	r0
			//time_count_2+= difftime(time(&current_time), timeStartRevV_2);
			//if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}

		}
		xTimerChangePeriod( xStopSource_2,period, 100 );
    57e8:	0f 2e       	mov	r0, r31
    57ea:	f4 e6       	ldi	r31, 0x64	; 100
    57ec:	cf 2e       	mov	r12, r31
    57ee:	d1 2c       	mov	r13, r1
    57f0:	e1 2c       	mov	r14, r1
    57f2:	f1 2c       	mov	r15, r1
    57f4:	f0 2d       	mov	r31, r0
    57f6:	00 e0       	ldi	r16, 0x00	; 0
    57f8:	10 e0       	ldi	r17, 0x00	; 0
    57fa:	a5 01       	movw	r20, r10
    57fc:	94 01       	movw	r18, r8
    57fe:	64 e0       	ldi	r22, 0x04	; 4
    5800:	80 91 f2 0a 	lds	r24, 0x0AF2	; 0x800af2 <xStopSource_2>
    5804:	90 91 f3 0a 	lds	r25, 0x0AF3	; 0x800af3 <xStopSource_2+0x1>
    5808:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		//xTimerStart(xStopSource_2, 0);
	}
	
	
}
    580c:	1f 91       	pop	r17
    580e:	0f 91       	pop	r16
    5810:	ff 90       	pop	r15
    5812:	ef 90       	pop	r14
    5814:	df 90       	pop	r13
    5816:	cf 90       	pop	r12
    5818:	bf 90       	pop	r11
    581a:	af 90       	pop	r10
    581c:	9f 90       	pop	r9
    581e:	8f 90       	pop	r8
    5820:	08 95       	ret

00005822 <StartCheckErrors>:
}
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------
void StartCheckErrors(TimerHandle_t xTimer)
{
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5822:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
	
	
	if((*pxTimerID) == uxStartDelayChekErrTimer_1_ID){Comp_1.countError=0; Comp_1.checkErrors=true;xSerialxPrintf(&xSerial3Port,"StartCheckErrors_1\r\n");}
    5826:	fc 01       	movw	r30, r24
    5828:	80 81       	ld	r24, Z
    582a:	87 30       	cpi	r24, 0x07	; 7
    582c:	a1 f4       	brne	.+40     	; 0x5856 <StartCheckErrors+0x34>
    582e:	e4 ef       	ldi	r30, 0xF4	; 244
    5830:	f9 e0       	ldi	r31, 0x09	; 9
    5832:	11 8a       	std	Z+17, r1	; 0x11
    5834:	81 e0       	ldi	r24, 0x01	; 1
    5836:	85 83       	std	Z+5, r24	; 0x05
    5838:	86 eb       	ldi	r24, 0xB6	; 182
    583a:	93 e0       	ldi	r25, 0x03	; 3
    583c:	9f 93       	push	r25
    583e:	8f 93       	push	r24
    5840:	82 e3       	ldi	r24, 0x32	; 50
    5842:	98 e0       	ldi	r25, 0x08	; 8
    5844:	9f 93       	push	r25
    5846:	8f 93       	push	r24
    5848:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    584c:	0f 90       	pop	r0
    584e:	0f 90       	pop	r0
    5850:	0f 90       	pop	r0
    5852:	0f 90       	pop	r0
    5854:	08 95       	ret
	else if((*pxTimerID) == uxStartDelayChekErrTimer_2_ID){Comp_2.countError=0;Comp_2.checkErrors=true;xSerialxPrintf(&xSerial3Port,"StartCheckErrors_2\r\n");}
    5856:	84 31       	cpi	r24, 0x14	; 20
    5858:	99 f4       	brne	.+38     	; 0x5880 <StartCheckErrors+0x5e>
    585a:	ee e7       	ldi	r30, 0x7E	; 126
    585c:	fa e0       	ldi	r31, 0x0A	; 10
    585e:	11 8a       	std	Z+17, r1	; 0x11
    5860:	81 e0       	ldi	r24, 0x01	; 1
    5862:	85 83       	std	Z+5, r24	; 0x05
    5864:	8b ec       	ldi	r24, 0xCB	; 203
    5866:	93 e0       	ldi	r25, 0x03	; 3
    5868:	9f 93       	push	r25
    586a:	8f 93       	push	r24
    586c:	82 e3       	ldi	r24, 0x32	; 50
    586e:	98 e0       	ldi	r25, 0x08	; 8
    5870:	9f 93       	push	r25
    5872:	8f 93       	push	r24
    5874:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    5878:	0f 90       	pop	r0
    587a:	0f 90       	pop	r0
    587c:	0f 90       	pop	r0
    587e:	0f 90       	pop	r0
    5880:	08 95       	ret

00005882 <StartCheckTrv>:
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------
void StartCheckTrv(TimerHandle_t xTimer)
{
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5882:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	if((*pxTimerID) == uxStartDelayChekTrvTimer_1_ID)       {Comp_1.checkTrv=true;xSerialxPrintf(&xSerial3Port,"StartCheckTrv_1\r\n");}
    5886:	fc 01       	movw	r30, r24
    5888:	80 81       	ld	r24, Z
    588a:	86 30       	cpi	r24, 0x06	; 6
    588c:	91 f4       	brne	.+36     	; 0x58b2 <StartCheckTrv+0x30>
    588e:	81 e0       	ldi	r24, 0x01	; 1
    5890:	80 93 f5 09 	sts	0x09F5, r24	; 0x8009f5 <Comp_1+0x1>
    5894:	80 ee       	ldi	r24, 0xE0	; 224
    5896:	93 e0       	ldi	r25, 0x03	; 3
    5898:	9f 93       	push	r25
    589a:	8f 93       	push	r24
    589c:	82 e3       	ldi	r24, 0x32	; 50
    589e:	98 e0       	ldi	r25, 0x08	; 8
    58a0:	9f 93       	push	r25
    58a2:	8f 93       	push	r24
    58a4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    58a8:	0f 90       	pop	r0
    58aa:	0f 90       	pop	r0
    58ac:	0f 90       	pop	r0
    58ae:	0f 90       	pop	r0
    58b0:	08 95       	ret
	else if((*pxTimerID) == uxStartDelayChekTrvTimer_2_ID) {Comp_2.checkTrv=true;xSerialxPrintf(&xSerial3Port,"StartCheckTrv_2\r\n");}
    58b2:	83 31       	cpi	r24, 0x13	; 19
    58b4:	89 f4       	brne	.+34     	; 0x58d8 <StartCheckTrv+0x56>
    58b6:	81 e0       	ldi	r24, 0x01	; 1
    58b8:	80 93 7f 0a 	sts	0x0A7F, r24	; 0x800a7f <Comp_2+0x1>
    58bc:	82 ef       	ldi	r24, 0xF2	; 242
    58be:	93 e0       	ldi	r25, 0x03	; 3
    58c0:	9f 93       	push	r25
    58c2:	8f 93       	push	r24
    58c4:	82 e3       	ldi	r24, 0x32	; 50
    58c6:	98 e0       	ldi	r25, 0x08	; 8
    58c8:	9f 93       	push	r25
    58ca:	8f 93       	push	r24
    58cc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    58d0:	0f 90       	pop	r0
    58d2:	0f 90       	pop	r0
    58d4:	0f 90       	pop	r0
    58d6:	0f 90       	pop	r0
    58d8:	08 95       	ret

000058da <StartThreeWay>:


}
//------------------------------------------------
void StartThreeWay()
{
    58da:	8f 92       	push	r8
    58dc:	9f 92       	push	r9
    58de:	af 92       	push	r10
    58e0:	bf 92       	push	r11
    58e2:	cf 92       	push	r12
    58e4:	df 92       	push	r13
    58e6:	ef 92       	push	r14
    58e8:	ff 92       	push	r15
    58ea:	0f 93       	push	r16
    58ec:	1f 93       	push	r17
	static time_t time_count;
    TickType_t period;
	
	
	period=(TickType_t)EEpromData.HeatingPump_delay;
    58ee:	20 91 97 09 	lds	r18, 0x0997	; 0x800997 <EEpromData+0x3>
	period*=1000;
    58f2:	30 e0       	ldi	r19, 0x00	; 0
    58f4:	a8 ee       	ldi	r26, 0xE8	; 232
    58f6:	b3 e0       	ldi	r27, 0x03	; 3
    58f8:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    58fc:	4b 01       	movw	r8, r22
    58fe:	5c 01       	movw	r10, r24
	xSerialxPrintf(&xSerial3Port,"StartThreeWay\r\n");
    5900:	84 e0       	ldi	r24, 0x04	; 4
    5902:	94 e0       	ldi	r25, 0x04	; 4
    5904:	9f 93       	push	r25
    5906:	8f 93       	push	r24
    5908:	82 e3       	ldi	r24, 0x32	; 50
    590a:	98 e0       	ldi	r25, 0x08	; 8
    590c:	9f 93       	push	r25
    590e:	8f 93       	push	r24
    5910:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(Comp_1.heatingWater)
    5914:	0f 90       	pop	r0
    5916:	0f 90       	pop	r0
    5918:	0f 90       	pop	r0
    591a:	0f 90       	pop	r0
    591c:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <Comp_1+0x4>
    5920:	88 23       	and	r24, r24
    5922:	71 f1       	breq	.+92     	; 0x5980 <StartThreeWay+0xa6>
	{
		
		if(PIN_THWAY_VALVE == 0)//
    5924:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5928:	88 23       	and	r24, r24
    592a:	e4 f0       	brlt	.+56     	; 0x5964 <StartThreeWay+0x8a>
		{
			START_THWAY_VALVE;
    592c:	e2 e0       	ldi	r30, 0x02	; 2
    592e:	f1 e0       	ldi	r31, 0x01	; 1
    5930:	80 81       	ld	r24, Z
    5932:	80 68       	ori	r24, 0x80	; 128
    5934:	80 83       	st	Z, r24
			
			//xSerialxPrintf(&xSerial3Port,"StartThreeWay\r\n");
			Comp_1.threeWOn=1;
    5936:	81 e0       	ldi	r24, 0x01	; 1
    5938:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <Comp_1+0xd>
			timeStartThreeW=time(&current_time);
    593c:	8f e8       	ldi	r24, 0x8F	; 143
    593e:	99 e0       	ldi	r25, 0x09	; 9
    5940:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5944:	60 93 20 0b 	sts	0x0B20, r22	; 0x800b20 <timeStartThreeW>
    5948:	70 93 21 0b 	sts	0x0B21, r23	; 0x800b21 <timeStartThreeW+0x1>
    594c:	80 93 22 0b 	sts	0x0B22, r24	; 0x800b22 <timeStartThreeW+0x2>
    5950:	90 93 23 0b 	sts	0x0B23, r25	; 0x800b23 <timeStartThreeW+0x3>
			EEpromData.number_turnon_threeway+=1;
    5954:	ea ed       	ldi	r30, 0xDA	; 218
    5956:	f9 e0       	ldi	r31, 0x09	; 9
    5958:	80 81       	ld	r24, Z
    595a:	91 81       	ldd	r25, Z+1	; 0x01
    595c:	01 96       	adiw	r24, 0x01	; 1
    595e:	91 83       	std	Z+1, r25	; 0x01
    5960:	80 83       	st	Z, r24
    5962:	0e c0       	rjmp	.+28     	; 0x5980 <StartThreeWay+0xa6>
			
		} else xSerialxPrintf(&xSerial3Port,"StopThreeWay\r\n");
    5964:	84 e1       	ldi	r24, 0x14	; 20
    5966:	94 e0       	ldi	r25, 0x04	; 4
    5968:	9f 93       	push	r25
    596a:	8f 93       	push	r24
    596c:	82 e3       	ldi	r24, 0x32	; 50
    596e:	98 e0       	ldi	r25, 0x08	; 8
    5970:	9f 93       	push	r25
    5972:	8f 93       	push	r24
    5974:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    5978:	0f 90       	pop	r0
    597a:	0f 90       	pop	r0
    597c:	0f 90       	pop	r0
    597e:	0f 90       	pop	r0
	}
	if(Comp_1.Heating || Comp_1.Cooling)
    5980:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <Comp_1+0x2>
    5984:	81 11       	cpse	r24, r1
    5986:	05 c0       	rjmp	.+10     	; 0x5992 <StartThreeWay+0xb8>
    5988:	80 91 f7 09 	lds	r24, 0x09F7	; 0x8009f7 <Comp_1+0x3>
    598c:	88 23       	and	r24, r24
    598e:	09 f4       	brne	.+2      	; 0x5992 <StartThreeWay+0xb8>
    5990:	4d c0       	rjmp	.+154    	; 0x5a2c <StartThreeWay+0x152>
	{
		if(PIN_THWAY_VALVE > 0)//
    5992:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5996:	88 23       	and	r24, r24
    5998:	0c f0       	brlt	.+2      	; 0x599c <StartThreeWay+0xc2>
    599a:	48 c0       	rjmp	.+144    	; 0x5a2c <StartThreeWay+0x152>
		{
			STOP_THWAY_VALVE;
    599c:	e2 e0       	ldi	r30, 0x02	; 2
    599e:	f1 e0       	ldi	r31, 0x01	; 1
    59a0:	80 81       	ld	r24, Z
    59a2:	8f 77       	andi	r24, 0x7F	; 127
    59a4:	80 83       	st	Z, r24
			
			//xSerialxPrintf(&xSerial3Port,"StopThreeWay\r\n");
			Comp_1.threeWOn=0;
    59a6:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <Comp_1+0xd>
			time_count+= difftime(time(&current_time), timeStartThreeW);
    59aa:	c0 90 20 0b 	lds	r12, 0x0B20	; 0x800b20 <timeStartThreeW>
    59ae:	d0 90 21 0b 	lds	r13, 0x0B21	; 0x800b21 <timeStartThreeW+0x1>
    59b2:	e0 90 22 0b 	lds	r14, 0x0B22	; 0x800b22 <timeStartThreeW+0x2>
    59b6:	f0 90 23 0b 	lds	r15, 0x0B23	; 0x800b23 <timeStartThreeW+0x3>
    59ba:	8f e8       	ldi	r24, 0x8F	; 143
    59bc:	99 e0       	ldi	r25, 0x09	; 9
    59be:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    59c2:	a7 01       	movw	r20, r14
    59c4:	96 01       	movw	r18, r12
    59c6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    59ca:	c0 90 d9 07 	lds	r12, 0x07D9	; 0x8007d9 <time_count.3181>
    59ce:	d0 90 da 07 	lds	r13, 0x07DA	; 0x8007da <time_count.3181+0x1>
    59d2:	e0 90 db 07 	lds	r14, 0x07DB	; 0x8007db <time_count.3181+0x2>
    59d6:	f0 90 dc 07 	lds	r15, 0x07DC	; 0x8007dc <time_count.3181+0x3>
    59da:	dc 01       	movw	r26, r24
    59dc:	cb 01       	movw	r24, r22
    59de:	8c 0d       	add	r24, r12
    59e0:	9d 1d       	adc	r25, r13
    59e2:	ae 1d       	adc	r26, r14
    59e4:	bf 1d       	adc	r27, r15
    59e6:	80 93 d9 07 	sts	0x07D9, r24	; 0x8007d9 <time_count.3181>
    59ea:	90 93 da 07 	sts	0x07DA, r25	; 0x8007da <time_count.3181+0x1>
    59ee:	a0 93 db 07 	sts	0x07DB, r26	; 0x8007db <time_count.3181+0x2>
    59f2:	b0 93 dc 07 	sts	0x07DC, r27	; 0x8007dc <time_count.3181+0x3>
			if(time_count>ONE_HOUR){EEpromData.time_threeway++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count=0;}
    59f6:	81 31       	cpi	r24, 0x11	; 17
    59f8:	9e 40       	sbci	r25, 0x0E	; 14
    59fa:	a1 05       	cpc	r26, r1
    59fc:	b1 05       	cpc	r27, r1
    59fe:	b0 f0       	brcs	.+44     	; 0x5a2c <StartThreeWay+0x152>
    5a00:	e4 e9       	ldi	r30, 0x94	; 148
    5a02:	f9 e0       	ldi	r31, 0x09	; 9
    5a04:	84 ad       	ldd	r24, Z+60	; 0x3c
    5a06:	95 ad       	ldd	r25, Z+61	; 0x3d
    5a08:	01 96       	adiw	r24, 0x01	; 1
    5a0a:	95 af       	std	Z+61, r25	; 0x3d
    5a0c:	84 af       	std	Z+60, r24	; 0x3c
    5a0e:	40 e6       	ldi	r20, 0x60	; 96
    5a10:	50 e0       	ldi	r21, 0x00	; 0
    5a12:	60 e0       	ldi	r22, 0x00	; 0
    5a14:	70 e0       	ldi	r23, 0x00	; 0
    5a16:	cf 01       	movw	r24, r30
    5a18:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <eeprom_update_block>
    5a1c:	10 92 d9 07 	sts	0x07D9, r1	; 0x8007d9 <time_count.3181>
    5a20:	10 92 da 07 	sts	0x07DA, r1	; 0x8007da <time_count.3181+0x1>
    5a24:	10 92 db 07 	sts	0x07DB, r1	; 0x8007db <time_count.3181+0x2>
    5a28:	10 92 dc 07 	sts	0x07DC, r1	; 0x8007dc <time_count.3181+0x3>
		}
	}
	
	xTimerChangePeriod( xStartHeatPump_1,period, 100 );
    5a2c:	0f 2e       	mov	r0, r31
    5a2e:	f4 e6       	ldi	r31, 0x64	; 100
    5a30:	cf 2e       	mov	r12, r31
    5a32:	d1 2c       	mov	r13, r1
    5a34:	e1 2c       	mov	r14, r1
    5a36:	f1 2c       	mov	r15, r1
    5a38:	f0 2d       	mov	r31, r0
    5a3a:	00 e0       	ldi	r16, 0x00	; 0
    5a3c:	10 e0       	ldi	r17, 0x00	; 0
    5a3e:	a5 01       	movw	r20, r10
    5a40:	94 01       	movw	r18, r8
    5a42:	64 e0       	ldi	r22, 0x04	; 4
    5a44:	80 91 10 0b 	lds	r24, 0x0B10	; 0x800b10 <xStartHeatPump_1>
    5a48:	90 91 11 0b 	lds	r25, 0x0B11	; 0x800b11 <xStartHeatPump_1+0x1>
    5a4c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	
}
    5a50:	1f 91       	pop	r17
    5a52:	0f 91       	pop	r16
    5a54:	ff 90       	pop	r15
    5a56:	ef 90       	pop	r14
    5a58:	df 90       	pop	r13
    5a5a:	cf 90       	pop	r12
    5a5c:	bf 90       	pop	r11
    5a5e:	af 90       	pop	r10
    5a60:	9f 90       	pop	r9
    5a62:	8f 90       	pop	r8
    5a64:	08 95       	ret

00005a66 <HeatPump_Stop>:
		
	}
}
//-------------------------------------------------------------------------
void HeatPump_Stop(TimerHandle_t xTimer)
{
    5a66:	8f 92       	push	r8
    5a68:	9f 92       	push	r9
    5a6a:	af 92       	push	r10
    5a6c:	bf 92       	push	r11
    5a6e:	cf 92       	push	r12
    5a70:	df 92       	push	r13
    5a72:	ef 92       	push	r14
    5a74:	ff 92       	push	r15
    5a76:	0f 93       	push	r16
    5a78:	1f 93       	push	r17
	
	TickType_t period;
	
	//xSerialxPrintf(&xSerial3Port,"StopHeatPump\r\n");
	
	pxTimerID = pvTimerGetTimerID(xTimer);
    5a7a:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>

	if((*pxTimerID) == uxStopDelayHeatPTimer_1_ID)
    5a7e:	fc 01       	movw	r30, r24
    5a80:	80 81       	ld	r24, Z
    5a82:	88 30       	cpi	r24, 0x08	; 8
    5a84:	09 f0       	breq	.+2      	; 0x5a88 <HeatPump_Stop+0x22>
    5a86:	76 c0       	rjmp	.+236    	; 0x5b74 <HeatPump_Stop+0x10e>
	{
		period=(TickType_t)EEpromData.Three_Way_delay;
    5a88:	20 91 98 09 	lds	r18, 0x0998	; 0x800998 <EEpromData+0x4>
		period*=1000;
    5a8c:	30 e0       	ldi	r19, 0x00	; 0
    5a8e:	a8 ee       	ldi	r26, 0xE8	; 232
    5a90:	b3 e0       	ldi	r27, 0x03	; 3
    5a92:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    5a96:	4b 01       	movw	r8, r22
    5a98:	5c 01       	movw	r10, r24
		
		if(PIN_HEAT_PUMP_1 > 0)//
    5a9a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5a9e:	83 ff       	sbrs	r24, 3
    5aa0:	56 c0       	rjmp	.+172    	; 0x5b4e <HeatPump_Stop+0xe8>
		{
			STOP_HEAT_PUMP_1;
    5aa2:	e2 e0       	ldi	r30, 0x02	; 2
    5aa4:	f1 e0       	ldi	r31, 0x01	; 1
    5aa6:	80 81       	ld	r24, Z
    5aa8:	87 7f       	andi	r24, 0xF7	; 247
    5aaa:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopHeatPump_1\r\n");
    5aac:	83 e2       	ldi	r24, 0x23	; 35
    5aae:	94 e0       	ldi	r25, 0x04	; 4
    5ab0:	9f 93       	push	r25
    5ab2:	8f 93       	push	r24
    5ab4:	82 e3       	ldi	r24, 0x32	; 50
    5ab6:	98 e0       	ldi	r25, 0x08	; 8
    5ab8:	9f 93       	push	r25
    5aba:	8f 93       	push	r24
    5abc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.heatPOn=0;
    5ac0:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <Comp_1+0xc>
			time_count_1+= difftime(time(&current_time), timeStartHeatP_1);
    5ac4:	c0 90 08 0b 	lds	r12, 0x0B08	; 0x800b08 <timeStartHeatP_1>
    5ac8:	d0 90 09 0b 	lds	r13, 0x0B09	; 0x800b09 <timeStartHeatP_1+0x1>
    5acc:	e0 90 0a 0b 	lds	r14, 0x0B0A	; 0x800b0a <timeStartHeatP_1+0x2>
    5ad0:	f0 90 0b 0b 	lds	r15, 0x0B0B	; 0x800b0b <timeStartHeatP_1+0x3>
    5ad4:	8f e8       	ldi	r24, 0x8F	; 143
    5ad6:	99 e0       	ldi	r25, 0x09	; 9
    5ad8:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5adc:	a7 01       	movw	r20, r14
    5ade:	96 01       	movw	r18, r12
    5ae0:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5ae4:	c0 90 cd 07 	lds	r12, 0x07CD	; 0x8007cd <time_count_1.3210>
    5ae8:	d0 90 ce 07 	lds	r13, 0x07CE	; 0x8007ce <time_count_1.3210+0x1>
    5aec:	e0 90 cf 07 	lds	r14, 0x07CF	; 0x8007cf <time_count_1.3210+0x2>
    5af0:	f0 90 d0 07 	lds	r15, 0x07D0	; 0x8007d0 <time_count_1.3210+0x3>
    5af4:	dc 01       	movw	r26, r24
    5af6:	cb 01       	movw	r24, r22
    5af8:	8c 0d       	add	r24, r12
    5afa:	9d 1d       	adc	r25, r13
    5afc:	ae 1d       	adc	r26, r14
    5afe:	bf 1d       	adc	r27, r15
    5b00:	80 93 cd 07 	sts	0x07CD, r24	; 0x8007cd <time_count_1.3210>
    5b04:	90 93 ce 07 	sts	0x07CE, r25	; 0x8007ce <time_count_1.3210+0x1>
    5b08:	a0 93 cf 07 	sts	0x07CF, r26	; 0x8007cf <time_count_1.3210+0x2>
    5b0c:	b0 93 d0 07 	sts	0x07D0, r27	; 0x8007d0 <time_count_1.3210+0x3>
			if(time_count_1>ONE_HOUR){EEpromData.time_pump_hiter_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    5b10:	0f 90       	pop	r0
    5b12:	0f 90       	pop	r0
    5b14:	0f 90       	pop	r0
    5b16:	0f 90       	pop	r0
    5b18:	81 31       	cpi	r24, 0x11	; 17
    5b1a:	9e 40       	sbci	r25, 0x0E	; 14
    5b1c:	a1 05       	cpc	r26, r1
    5b1e:	b1 05       	cpc	r27, r1
    5b20:	b0 f0       	brcs	.+44     	; 0x5b4e <HeatPump_Stop+0xe8>
    5b22:	e4 e9       	ldi	r30, 0x94	; 148
    5b24:	f9 e0       	ldi	r31, 0x09	; 9
    5b26:	84 a9       	ldd	r24, Z+52	; 0x34
    5b28:	95 a9       	ldd	r25, Z+53	; 0x35
    5b2a:	01 96       	adiw	r24, 0x01	; 1
    5b2c:	95 ab       	std	Z+53, r25	; 0x35
    5b2e:	84 ab       	std	Z+52, r24	; 0x34
    5b30:	40 e6       	ldi	r20, 0x60	; 96
    5b32:	50 e0       	ldi	r21, 0x00	; 0
    5b34:	60 e0       	ldi	r22, 0x00	; 0
    5b36:	70 e0       	ldi	r23, 0x00	; 0
    5b38:	cf 01       	movw	r24, r30
    5b3a:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <eeprom_update_block>
    5b3e:	10 92 cd 07 	sts	0x07CD, r1	; 0x8007cd <time_count_1.3210>
    5b42:	10 92 ce 07 	sts	0x07CE, r1	; 0x8007ce <time_count_1.3210+0x1>
    5b46:	10 92 cf 07 	sts	0x07CF, r1	; 0x8007cf <time_count_1.3210+0x2>
    5b4a:	10 92 d0 07 	sts	0x07D0, r1	; 0x8007d0 <time_count_1.3210+0x3>
			
		}
		xTimerChangePeriod( xStopThreeWay,period, 100 );
    5b4e:	0f 2e       	mov	r0, r31
    5b50:	f4 e6       	ldi	r31, 0x64	; 100
    5b52:	cf 2e       	mov	r12, r31
    5b54:	d1 2c       	mov	r13, r1
    5b56:	e1 2c       	mov	r14, r1
    5b58:	f1 2c       	mov	r15, r1
    5b5a:	f0 2d       	mov	r31, r0
    5b5c:	00 e0       	ldi	r16, 0x00	; 0
    5b5e:	10 e0       	ldi	r17, 0x00	; 0
    5b60:	a5 01       	movw	r20, r10
    5b62:	94 01       	movw	r18, r8
    5b64:	64 e0       	ldi	r22, 0x04	; 4
    5b66:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <xStopThreeWay>
    5b6a:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <xStopThreeWay+0x1>
    5b6e:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    5b72:	7b c0       	rjmp	.+246    	; 0x5c6a <HeatPump_Stop+0x204>
		//xTimerStart(xStopThreeWay, 0);
	}

	else if((*pxTimerID) == uxStopDelayHeatPTimer_2_ID)
    5b74:	85 31       	cpi	r24, 0x15	; 21
    5b76:	09 f0       	breq	.+2      	; 0x5b7a <HeatPump_Stop+0x114>
    5b78:	78 c0       	rjmp	.+240    	; 0x5c6a <HeatPump_Stop+0x204>
	{
		period=(TickType_t)EEpromData.Revers_Valve_delay;
		period*=1000;
		xSerialxPrintf(&xSerial3Port,"StopHeatPump_2\r\n");
    5b7a:	84 e3       	ldi	r24, 0x34	; 52
    5b7c:	94 e0       	ldi	r25, 0x04	; 4
    5b7e:	9f 93       	push	r25
    5b80:	8f 93       	push	r24
    5b82:	82 e3       	ldi	r24, 0x32	; 50
    5b84:	98 e0       	ldi	r25, 0x08	; 8
    5b86:	9f 93       	push	r25
    5b88:	8f 93       	push	r24
    5b8a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_2 > 0)//
    5b8e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5b92:	0f 90       	pop	r0
    5b94:	0f 90       	pop	r0
    5b96:	0f 90       	pop	r0
    5b98:	0f 90       	pop	r0
    5b9a:	84 ff       	sbrs	r24, 4
    5b9c:	49 c0       	rjmp	.+146    	; 0x5c30 <HeatPump_Stop+0x1ca>
		{
			STOP_HEAT_PUMP_2;
    5b9e:	e2 e0       	ldi	r30, 0x02	; 2
    5ba0:	f1 e0       	ldi	r31, 0x01	; 1
    5ba2:	80 81       	ld	r24, Z
    5ba4:	8f 7e       	andi	r24, 0xEF	; 239
    5ba6:	80 83       	st	Z, r24
			
			
			Comp_2.heatPOn=0;
    5ba8:	10 92 8a 0a 	sts	0x0A8A, r1	; 0x800a8a <Comp_2+0xc>
			time_count_2+= difftime(time(&current_time), timeStartHeatP_2);
    5bac:	c0 90 1c 0b 	lds	r12, 0x0B1C	; 0x800b1c <timeStartHeatP_2>
    5bb0:	d0 90 1d 0b 	lds	r13, 0x0B1D	; 0x800b1d <timeStartHeatP_2+0x1>
    5bb4:	e0 90 1e 0b 	lds	r14, 0x0B1E	; 0x800b1e <timeStartHeatP_2+0x2>
    5bb8:	f0 90 1f 0b 	lds	r15, 0x0B1F	; 0x800b1f <timeStartHeatP_2+0x3>
    5bbc:	8f e8       	ldi	r24, 0x8F	; 143
    5bbe:	99 e0       	ldi	r25, 0x09	; 9
    5bc0:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5bc4:	a7 01       	movw	r20, r14
    5bc6:	96 01       	movw	r18, r12
    5bc8:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5bcc:	c0 90 c9 07 	lds	r12, 0x07C9	; 0x8007c9 <time_count_2.3211>
    5bd0:	d0 90 ca 07 	lds	r13, 0x07CA	; 0x8007ca <time_count_2.3211+0x1>
    5bd4:	e0 90 cb 07 	lds	r14, 0x07CB	; 0x8007cb <time_count_2.3211+0x2>
    5bd8:	f0 90 cc 07 	lds	r15, 0x07CC	; 0x8007cc <time_count_2.3211+0x3>
    5bdc:	dc 01       	movw	r26, r24
    5bde:	cb 01       	movw	r24, r22
    5be0:	8c 0d       	add	r24, r12
    5be2:	9d 1d       	adc	r25, r13
    5be4:	ae 1d       	adc	r26, r14
    5be6:	bf 1d       	adc	r27, r15
    5be8:	80 93 c9 07 	sts	0x07C9, r24	; 0x8007c9 <time_count_2.3211>
    5bec:	90 93 ca 07 	sts	0x07CA, r25	; 0x8007ca <time_count_2.3211+0x1>
    5bf0:	a0 93 cb 07 	sts	0x07CB, r26	; 0x8007cb <time_count_2.3211+0x2>
    5bf4:	b0 93 cc 07 	sts	0x07CC, r27	; 0x8007cc <time_count_2.3211+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_pump_hiter_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    5bf8:	81 31       	cpi	r24, 0x11	; 17
    5bfa:	9e 40       	sbci	r25, 0x0E	; 14
    5bfc:	a1 05       	cpc	r26, r1
    5bfe:	b1 05       	cpc	r27, r1
    5c00:	b8 f0       	brcs	.+46     	; 0x5c30 <HeatPump_Stop+0x1ca>
    5c02:	ee ed       	ldi	r30, 0xDE	; 222
    5c04:	f9 e0       	ldi	r31, 0x09	; 9
    5c06:	80 81       	ld	r24, Z
    5c08:	91 81       	ldd	r25, Z+1	; 0x01
    5c0a:	01 96       	adiw	r24, 0x01	; 1
    5c0c:	91 83       	std	Z+1, r25	; 0x01
    5c0e:	80 83       	st	Z, r24
    5c10:	40 e6       	ldi	r20, 0x60	; 96
    5c12:	50 e0       	ldi	r21, 0x00	; 0
    5c14:	60 e0       	ldi	r22, 0x00	; 0
    5c16:	70 e0       	ldi	r23, 0x00	; 0
    5c18:	84 e9       	ldi	r24, 0x94	; 148
    5c1a:	99 e0       	ldi	r25, 0x09	; 9
    5c1c:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <eeprom_update_block>
    5c20:	10 92 c9 07 	sts	0x07C9, r1	; 0x8007c9 <time_count_2.3211>
    5c24:	10 92 ca 07 	sts	0x07CA, r1	; 0x8007ca <time_count_2.3211+0x1>
    5c28:	10 92 cb 07 	sts	0x07CB, r1	; 0x8007cb <time_count_2.3211+0x2>
    5c2c:	10 92 cc 07 	sts	0x07CC, r1	; 0x8007cc <time_count_2.3211+0x3>
			
		}
		xTimerChangePeriod( xStopRevValve_2,(EEpromData.Revers_Valve_delay*1000) / portTICK_PERIOD_MS, 100 );
    5c30:	40 91 96 09 	lds	r20, 0x0996	; 0x800996 <EEpromData+0x2>
    5c34:	88 ee       	ldi	r24, 0xE8	; 232
    5c36:	93 e0       	ldi	r25, 0x03	; 3
    5c38:	48 9f       	mul	r20, r24
    5c3a:	90 01       	movw	r18, r0
    5c3c:	49 9f       	mul	r20, r25
    5c3e:	30 0d       	add	r19, r0
    5c40:	11 24       	eor	r1, r1
    5c42:	03 2e       	mov	r0, r19
    5c44:	00 0c       	add	r0, r0
    5c46:	44 0b       	sbc	r20, r20
    5c48:	55 0b       	sbc	r21, r21
    5c4a:	0f 2e       	mov	r0, r31
    5c4c:	f4 e6       	ldi	r31, 0x64	; 100
    5c4e:	cf 2e       	mov	r12, r31
    5c50:	d1 2c       	mov	r13, r1
    5c52:	e1 2c       	mov	r14, r1
    5c54:	f1 2c       	mov	r15, r1
    5c56:	f0 2d       	mov	r31, r0
    5c58:	00 e0       	ldi	r16, 0x00	; 0
    5c5a:	10 e0       	ldi	r17, 0x00	; 0
    5c5c:	64 e0       	ldi	r22, 0x04	; 4
    5c5e:	80 91 89 09 	lds	r24, 0x0989	; 0x800989 <xStopRevValve_2>
    5c62:	90 91 8a 09 	lds	r25, 0x098A	; 0x80098a <xStopRevValve_2+0x1>
    5c66:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
}
    5c6a:	1f 91       	pop	r17
    5c6c:	0f 91       	pop	r16
    5c6e:	ff 90       	pop	r15
    5c70:	ef 90       	pop	r14
    5c72:	df 90       	pop	r13
    5c74:	cf 90       	pop	r12
    5c76:	bf 90       	pop	r11
    5c78:	af 90       	pop	r10
    5c7a:	9f 90       	pop	r9
    5c7c:	8f 90       	pop	r8
    5c7e:	08 95       	ret

00005c80 <ThreeWay_Stop>:
//-------------------------------------------------------------------------
void ThreeWay_Stop()
{
    5c80:	8f 92       	push	r8
    5c82:	9f 92       	push	r9
    5c84:	af 92       	push	r10
    5c86:	bf 92       	push	r11
    5c88:	cf 92       	push	r12
    5c8a:	df 92       	push	r13
    5c8c:	ef 92       	push	r14
    5c8e:	ff 92       	push	r15
    5c90:	0f 93       	push	r16
    5c92:	1f 93       	push	r17
	static time_t time_count;
	TickType_t period;
	period=(TickType_t)EEpromData.Revers_Valve_delay;
    5c94:	20 91 96 09 	lds	r18, 0x0996	; 0x800996 <EEpromData+0x2>
	period*=1000;
    5c98:	30 e0       	ldi	r19, 0x00	; 0
    5c9a:	a8 ee       	ldi	r26, 0xE8	; 232
    5c9c:	b3 e0       	ldi	r27, 0x03	; 3
    5c9e:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    5ca2:	4b 01       	movw	r8, r22
    5ca4:	5c 01       	movw	r10, r24
	
	xSerialxPrintf(&xSerial3Port,"ThreeWay_Stop\r\n");
    5ca6:	85 e4       	ldi	r24, 0x45	; 69
    5ca8:	94 e0       	ldi	r25, 0x04	; 4
    5caa:	9f 93       	push	r25
    5cac:	8f 93       	push	r24
    5cae:	82 e3       	ldi	r24, 0x32	; 50
    5cb0:	98 e0       	ldi	r25, 0x08	; 8
    5cb2:	9f 93       	push	r25
    5cb4:	8f 93       	push	r24
    5cb6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(PIN_THWAY_VALVE > 0)
    5cba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5cbe:	0f 90       	pop	r0
    5cc0:	0f 90       	pop	r0
    5cc2:	0f 90       	pop	r0
    5cc4:	0f 90       	pop	r0
    5cc6:	88 23       	and	r24, r24
    5cc8:	0c f0       	brlt	.+2      	; 0x5ccc <ThreeWay_Stop+0x4c>
    5cca:	48 c0       	rjmp	.+144    	; 0x5d5c <ThreeWay_Stop+0xdc>
	{
		STOP_THWAY_VALVE;
    5ccc:	e2 e0       	ldi	r30, 0x02	; 2
    5cce:	f1 e0       	ldi	r31, 0x01	; 1
    5cd0:	80 81       	ld	r24, Z
    5cd2:	8f 77       	andi	r24, 0x7F	; 127
    5cd4:	80 83       	st	Z, r24
		//xSerialxPrintf(&xSerial3Port,"ThreeWay_Stop\r\n");
		Comp_1.threeWOn=0;
    5cd6:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <Comp_1+0xd>
		time_count+= difftime(time(&current_time), timeStartThreeW);
    5cda:	c0 90 20 0b 	lds	r12, 0x0B20	; 0x800b20 <timeStartThreeW>
    5cde:	d0 90 21 0b 	lds	r13, 0x0B21	; 0x800b21 <timeStartThreeW+0x1>
    5ce2:	e0 90 22 0b 	lds	r14, 0x0B22	; 0x800b22 <timeStartThreeW+0x2>
    5ce6:	f0 90 23 0b 	lds	r15, 0x0B23	; 0x800b23 <timeStartThreeW+0x3>
    5cea:	8f e8       	ldi	r24, 0x8F	; 143
    5cec:	99 e0       	ldi	r25, 0x09	; 9
    5cee:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5cf2:	a7 01       	movw	r20, r14
    5cf4:	96 01       	movw	r18, r12
    5cf6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5cfa:	c0 90 c5 07 	lds	r12, 0x07C5	; 0x8007c5 <time_count.3216>
    5cfe:	d0 90 c6 07 	lds	r13, 0x07C6	; 0x8007c6 <time_count.3216+0x1>
    5d02:	e0 90 c7 07 	lds	r14, 0x07C7	; 0x8007c7 <time_count.3216+0x2>
    5d06:	f0 90 c8 07 	lds	r15, 0x07C8	; 0x8007c8 <time_count.3216+0x3>
    5d0a:	dc 01       	movw	r26, r24
    5d0c:	cb 01       	movw	r24, r22
    5d0e:	8c 0d       	add	r24, r12
    5d10:	9d 1d       	adc	r25, r13
    5d12:	ae 1d       	adc	r26, r14
    5d14:	bf 1d       	adc	r27, r15
    5d16:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <time_count.3216>
    5d1a:	90 93 c6 07 	sts	0x07C6, r25	; 0x8007c6 <time_count.3216+0x1>
    5d1e:	a0 93 c7 07 	sts	0x07C7, r26	; 0x8007c7 <time_count.3216+0x2>
    5d22:	b0 93 c8 07 	sts	0x07C8, r27	; 0x8007c8 <time_count.3216+0x3>
		if(time_count>ONE_HOUR){EEpromData.time_threeway++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count=0;}
    5d26:	81 31       	cpi	r24, 0x11	; 17
    5d28:	9e 40       	sbci	r25, 0x0E	; 14
    5d2a:	a1 05       	cpc	r26, r1
    5d2c:	b1 05       	cpc	r27, r1
    5d2e:	b0 f0       	brcs	.+44     	; 0x5d5c <ThreeWay_Stop+0xdc>
    5d30:	e4 e9       	ldi	r30, 0x94	; 148
    5d32:	f9 e0       	ldi	r31, 0x09	; 9
    5d34:	84 ad       	ldd	r24, Z+60	; 0x3c
    5d36:	95 ad       	ldd	r25, Z+61	; 0x3d
    5d38:	01 96       	adiw	r24, 0x01	; 1
    5d3a:	95 af       	std	Z+61, r25	; 0x3d
    5d3c:	84 af       	std	Z+60, r24	; 0x3c
    5d3e:	40 e6       	ldi	r20, 0x60	; 96
    5d40:	50 e0       	ldi	r21, 0x00	; 0
    5d42:	60 e0       	ldi	r22, 0x00	; 0
    5d44:	70 e0       	ldi	r23, 0x00	; 0
    5d46:	cf 01       	movw	r24, r30
    5d48:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <eeprom_update_block>
    5d4c:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <time_count.3216>
    5d50:	10 92 c6 07 	sts	0x07C6, r1	; 0x8007c6 <time_count.3216+0x1>
    5d54:	10 92 c7 07 	sts	0x07C7, r1	; 0x8007c7 <time_count.3216+0x2>
    5d58:	10 92 c8 07 	sts	0x07C8, r1	; 0x8007c8 <time_count.3216+0x3>
		
	} else{ }//xSerialxPrintf(&xSerial3Port,"ThreeWay_isRun\r\n");
	xTimerChangePeriod( xStopRevValve_1,period, 100 );
    5d5c:	0f 2e       	mov	r0, r31
    5d5e:	f4 e6       	ldi	r31, 0x64	; 100
    5d60:	cf 2e       	mov	r12, r31
    5d62:	d1 2c       	mov	r13, r1
    5d64:	e1 2c       	mov	r14, r1
    5d66:	f1 2c       	mov	r15, r1
    5d68:	f0 2d       	mov	r31, r0
    5d6a:	00 e0       	ldi	r16, 0x00	; 0
    5d6c:	10 e0       	ldi	r17, 0x00	; 0
    5d6e:	a5 01       	movw	r20, r10
    5d70:	94 01       	movw	r18, r8
    5d72:	64 e0       	ldi	r22, 0x04	; 4
    5d74:	80 91 04 0b 	lds	r24, 0x0B04	; 0x800b04 <xStopRevValve_1>
    5d78:	90 91 05 0b 	lds	r25, 0x0B05	; 0x800b05 <xStopRevValve_1+0x1>
    5d7c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	
}
    5d80:	1f 91       	pop	r17
    5d82:	0f 91       	pop	r16
    5d84:	ff 90       	pop	r15
    5d86:	ef 90       	pop	r14
    5d88:	df 90       	pop	r13
    5d8a:	cf 90       	pop	r12
    5d8c:	bf 90       	pop	r11
    5d8e:	af 90       	pop	r10
    5d90:	9f 90       	pop	r9
    5d92:	8f 90       	pop	r8
    5d94:	08 95       	ret

00005d96 <SorcePump_Stop>:
	
	
}
//---------------------------------------------------------------------------
void SorcePump_Stop(TimerHandle_t xTimer)
{
    5d96:	cf 92       	push	r12
    5d98:	df 92       	push	r13
    5d9a:	ef 92       	push	r14
    5d9c:	ff 92       	push	r15
	static time_t time_count_1;
	static time_t time_count_2;
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5d9e:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
     // xSerialxPrintf(&xSerial3Port,"StopSource\r\n");
    
	 	
	 
	if((*pxTimerID) == uxStopDelaySourcePTimer_1_ID)
    5da2:	fc 01       	movw	r30, r24
    5da4:	80 81       	ld	r24, Z
    5da6:	89 30       	cpi	r24, 0x09	; 9
    5da8:	09 f0       	breq	.+2      	; 0x5dac <SorcePump_Stop+0x16>
    5daa:	5e c0       	rjmp	.+188    	; 0x5e68 <SorcePump_Stop+0xd2>
	{
		Comp_1.switchToMode=false ;
    5dac:	10 92 f4 09 	sts	0x09F4, r1	; 0x8009f4 <Comp_1>
		
		
		if(PIN_SOURCE_PUMP_1 > 0)//
    5db0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5db4:	81 ff       	sbrs	r24, 1
    5db6:	b8 c0       	rjmp	.+368    	; 0x5f28 <SorcePump_Stop+0x192>
		{
			STOP_SOURCE_PUMP_1;
    5db8:	e2 e0       	ldi	r30, 0x02	; 2
    5dba:	f1 e0       	ldi	r31, 0x01	; 1
    5dbc:	80 81       	ld	r24, Z
    5dbe:	8d 7f       	andi	r24, 0xFD	; 253
    5dc0:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopSource_1\r\n");
    5dc2:	85 e5       	ldi	r24, 0x55	; 85
    5dc4:	94 e0       	ldi	r25, 0x04	; 4
    5dc6:	9f 93       	push	r25
    5dc8:	8f 93       	push	r24
    5dca:	82 e3       	ldi	r24, 0x32	; 50
    5dcc:	98 e0       	ldi	r25, 0x08	; 8
    5dce:	9f 93       	push	r25
    5dd0:	8f 93       	push	r24
    5dd2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.srcPOn=0;
    5dd6:	10 92 03 0a 	sts	0x0A03, r1	; 0x800a03 <Comp_1+0xf>
			
			
			time_count_1+= difftime(time(&current_time), timeStartSrcP_1);
    5dda:	c0 90 70 0a 	lds	r12, 0x0A70	; 0x800a70 <timeStartSrcP_1>
    5dde:	d0 90 71 0a 	lds	r13, 0x0A71	; 0x800a71 <timeStartSrcP_1+0x1>
    5de2:	e0 90 72 0a 	lds	r14, 0x0A72	; 0x800a72 <timeStartSrcP_1+0x2>
    5de6:	f0 90 73 0a 	lds	r15, 0x0A73	; 0x800a73 <timeStartSrcP_1+0x3>
    5dea:	8f e8       	ldi	r24, 0x8F	; 143
    5dec:	99 e0       	ldi	r25, 0x09	; 9
    5dee:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5df2:	a7 01       	movw	r20, r14
    5df4:	96 01       	movw	r18, r12
    5df6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5dfa:	c0 90 c1 07 	lds	r12, 0x07C1	; 0x8007c1 <time_count_1.3228>
    5dfe:	d0 90 c2 07 	lds	r13, 0x07C2	; 0x8007c2 <time_count_1.3228+0x1>
    5e02:	e0 90 c3 07 	lds	r14, 0x07C3	; 0x8007c3 <time_count_1.3228+0x2>
    5e06:	f0 90 c4 07 	lds	r15, 0x07C4	; 0x8007c4 <time_count_1.3228+0x3>
    5e0a:	dc 01       	movw	r26, r24
    5e0c:	cb 01       	movw	r24, r22
    5e0e:	8c 0d       	add	r24, r12
    5e10:	9d 1d       	adc	r25, r13
    5e12:	ae 1d       	adc	r26, r14
    5e14:	bf 1d       	adc	r27, r15
    5e16:	80 93 c1 07 	sts	0x07C1, r24	; 0x8007c1 <time_count_1.3228>
    5e1a:	90 93 c2 07 	sts	0x07C2, r25	; 0x8007c2 <time_count_1.3228+0x1>
    5e1e:	a0 93 c3 07 	sts	0x07C3, r26	; 0x8007c3 <time_count_1.3228+0x2>
    5e22:	b0 93 c4 07 	sts	0x07C4, r27	; 0x8007c4 <time_count_1.3228+0x3>
			//xSerialxPrintf(&xSerial3Port,"time_count_1=%d\r\n",time_count_1);
			if(time_count_1>ONE_HOUR){EEpromData.time_pump_source_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    5e26:	0f 90       	pop	r0
    5e28:	0f 90       	pop	r0
    5e2a:	0f 90       	pop	r0
    5e2c:	0f 90       	pop	r0
    5e2e:	81 31       	cpi	r24, 0x11	; 17
    5e30:	9e 40       	sbci	r25, 0x0E	; 14
    5e32:	a1 05       	cpc	r26, r1
    5e34:	b1 05       	cpc	r27, r1
    5e36:	08 f4       	brcc	.+2      	; 0x5e3a <SorcePump_Stop+0xa4>
    5e38:	77 c0       	rjmp	.+238    	; 0x5f28 <SorcePump_Stop+0x192>
    5e3a:	e4 e9       	ldi	r30, 0x94	; 148
    5e3c:	f9 e0       	ldi	r31, 0x09	; 9
    5e3e:	86 a9       	ldd	r24, Z+54	; 0x36
    5e40:	97 a9       	ldd	r25, Z+55	; 0x37
    5e42:	01 96       	adiw	r24, 0x01	; 1
    5e44:	97 ab       	std	Z+55, r25	; 0x37
    5e46:	86 ab       	std	Z+54, r24	; 0x36
    5e48:	40 e6       	ldi	r20, 0x60	; 96
    5e4a:	50 e0       	ldi	r21, 0x00	; 0
    5e4c:	60 e0       	ldi	r22, 0x00	; 0
    5e4e:	70 e0       	ldi	r23, 0x00	; 0
    5e50:	cf 01       	movw	r24, r30
    5e52:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <eeprom_update_block>
    5e56:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <time_count_1.3228>
    5e5a:	10 92 c2 07 	sts	0x07C2, r1	; 0x8007c2 <time_count_1.3228+0x1>
    5e5e:	10 92 c3 07 	sts	0x07C3, r1	; 0x8007c3 <time_count_1.3228+0x2>
    5e62:	10 92 c4 07 	sts	0x07C4, r1	; 0x8007c4 <time_count_1.3228+0x3>
    5e66:	60 c0       	rjmp	.+192    	; 0x5f28 <SorcePump_Stop+0x192>

		}
		
	}
	
	else if((*pxTimerID) == uxStopDelaySourcePTimer_2_ID)
    5e68:	86 31       	cpi	r24, 0x16	; 22
    5e6a:	09 f0       	breq	.+2      	; 0x5e6e <SorcePump_Stop+0xd8>
    5e6c:	5d c0       	rjmp	.+186    	; 0x5f28 <SorcePump_Stop+0x192>
	{
		//xSerialxPrintf(&xSerial3Port,"StopSource_2\r\n");
		Comp_2.switchToMode=false ;
    5e6e:	10 92 7e 0a 	sts	0x0A7E, r1	; 0x800a7e <Comp_2>
		if(PIN_SOURCE_PUMP_2 > 0)//
    5e72:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5e76:	82 ff       	sbrs	r24, 2
    5e78:	57 c0       	rjmp	.+174    	; 0x5f28 <SorcePump_Stop+0x192>
		{
			STOP_SOURCE_PUMP_2;
    5e7a:	e2 e0       	ldi	r30, 0x02	; 2
    5e7c:	f1 e0       	ldi	r31, 0x01	; 1
    5e7e:	80 81       	ld	r24, Z
    5e80:	8b 7f       	andi	r24, 0xFB	; 251
    5e82:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopSource_2\r\n");
    5e84:	84 e6       	ldi	r24, 0x64	; 100
    5e86:	94 e0       	ldi	r25, 0x04	; 4
    5e88:	9f 93       	push	r25
    5e8a:	8f 93       	push	r24
    5e8c:	82 e3       	ldi	r24, 0x32	; 50
    5e8e:	98 e0       	ldi	r25, 0x08	; 8
    5e90:	9f 93       	push	r25
    5e92:	8f 93       	push	r24
    5e94:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			Comp_2.srcPOn=0;
    5e98:	10 92 8d 0a 	sts	0x0A8D, r1	; 0x800a8d <Comp_2+0xf>
			//Comp_2.switchToMode=false;
			time_count_2+= difftime(time(&current_time), timeStartSrcP_2);
    5e9c:	c0 90 2f 0b 	lds	r12, 0x0B2F	; 0x800b2f <timeStartSrcP_2>
    5ea0:	d0 90 30 0b 	lds	r13, 0x0B30	; 0x800b30 <timeStartSrcP_2+0x1>
    5ea4:	e0 90 31 0b 	lds	r14, 0x0B31	; 0x800b31 <timeStartSrcP_2+0x2>
    5ea8:	f0 90 32 0b 	lds	r15, 0x0B32	; 0x800b32 <timeStartSrcP_2+0x3>
    5eac:	8f e8       	ldi	r24, 0x8F	; 143
    5eae:	99 e0       	ldi	r25, 0x09	; 9
    5eb0:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5eb4:	a7 01       	movw	r20, r14
    5eb6:	96 01       	movw	r18, r12
    5eb8:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5ebc:	c0 90 bd 07 	lds	r12, 0x07BD	; 0x8007bd <time_count_2.3229>
    5ec0:	d0 90 be 07 	lds	r13, 0x07BE	; 0x8007be <time_count_2.3229+0x1>
    5ec4:	e0 90 bf 07 	lds	r14, 0x07BF	; 0x8007bf <time_count_2.3229+0x2>
    5ec8:	f0 90 c0 07 	lds	r15, 0x07C0	; 0x8007c0 <time_count_2.3229+0x3>
    5ecc:	dc 01       	movw	r26, r24
    5ece:	cb 01       	movw	r24, r22
    5ed0:	8c 0d       	add	r24, r12
    5ed2:	9d 1d       	adc	r25, r13
    5ed4:	ae 1d       	adc	r26, r14
    5ed6:	bf 1d       	adc	r27, r15
    5ed8:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <time_count_2.3229>
    5edc:	90 93 be 07 	sts	0x07BE, r25	; 0x8007be <time_count_2.3229+0x1>
    5ee0:	a0 93 bf 07 	sts	0x07BF, r26	; 0x8007bf <time_count_2.3229+0x2>
    5ee4:	b0 93 c0 07 	sts	0x07C0, r27	; 0x8007c0 <time_count_2.3229+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_pump_source_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    5ee8:	0f 90       	pop	r0
    5eea:	0f 90       	pop	r0
    5eec:	0f 90       	pop	r0
    5eee:	0f 90       	pop	r0
    5ef0:	81 31       	cpi	r24, 0x11	; 17
    5ef2:	9e 40       	sbci	r25, 0x0E	; 14
    5ef4:	a1 05       	cpc	r26, r1
    5ef6:	b1 05       	cpc	r27, r1
    5ef8:	b8 f0       	brcs	.+46     	; 0x5f28 <SorcePump_Stop+0x192>
    5efa:	e0 ee       	ldi	r30, 0xE0	; 224
    5efc:	f9 e0       	ldi	r31, 0x09	; 9
    5efe:	80 81       	ld	r24, Z
    5f00:	91 81       	ldd	r25, Z+1	; 0x01
    5f02:	01 96       	adiw	r24, 0x01	; 1
    5f04:	91 83       	std	Z+1, r25	; 0x01
    5f06:	80 83       	st	Z, r24
    5f08:	40 e6       	ldi	r20, 0x60	; 96
    5f0a:	50 e0       	ldi	r21, 0x00	; 0
    5f0c:	60 e0       	ldi	r22, 0x00	; 0
    5f0e:	70 e0       	ldi	r23, 0x00	; 0
    5f10:	84 e9       	ldi	r24, 0x94	; 148
    5f12:	99 e0       	ldi	r25, 0x09	; 9
    5f14:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <eeprom_update_block>
    5f18:	10 92 bd 07 	sts	0x07BD, r1	; 0x8007bd <time_count_2.3229>
    5f1c:	10 92 be 07 	sts	0x07BE, r1	; 0x8007be <time_count_2.3229+0x1>
    5f20:	10 92 bf 07 	sts	0x07BF, r1	; 0x8007bf <time_count_2.3229+0x2>
    5f24:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <time_count_2.3229+0x3>

		}
	}
}
    5f28:	ff 90       	pop	r15
    5f2a:	ef 90       	pop	r14
    5f2c:	df 90       	pop	r13
    5f2e:	cf 90       	pop	r12
    5f30:	08 95       	ret

00005f32 <StartComp>:
		
	}
}


void StartComp(TimerHandle_t xTimer){
    5f32:	8f 92       	push	r8
    5f34:	9f 92       	push	r9
    5f36:	af 92       	push	r10
    5f38:	bf 92       	push	r11
    5f3a:	cf 92       	push	r12
    5f3c:	df 92       	push	r13
    5f3e:	ef 92       	push	r14
    5f40:	ff 92       	push	r15
    5f42:	0f 93       	push	r16
    5f44:	1f 93       	push	r17
    5f46:	ac 01       	movw	r20, r24
	
	portBASE_TYPE *pxTimerID;
	
	TickType_t period;	
	period=(TickType_t)EEpromData.TRV_Delay;
    5f48:	20 91 99 09 	lds	r18, 0x0999	; 0x800999 <EEpromData+0x5>
    period*=1000;
    5f4c:	30 e0       	ldi	r19, 0x00	; 0
    5f4e:	a8 ee       	ldi	r26, 0xE8	; 232
    5f50:	b3 e0       	ldi	r27, 0x03	; 3
    5f52:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    5f56:	4b 01       	movw	r8, r22
    5f58:	5c 01       	movw	r10, r24
	
	pxTimerID = pvTimerGetTimerID(xTimer);
    5f5a:	ca 01       	movw	r24, r20
    5f5c:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
//xSerialxPrintf(&xSerial3Port,"StartCompressor\r\n");
	if((*pxTimerID) == uxStartDelayCompTimer_1_ID) {
    5f60:	fc 01       	movw	r30, r24
    5f62:	80 81       	ld	r24, Z
    5f64:	81 30       	cpi	r24, 0x01	; 1
    5f66:	09 f0       	breq	.+2      	; 0x5f6a <StartComp+0x38>
    5f68:	61 c0       	rjmp	.+194    	; 0x602c <StartComp+0xfa>
		Comp_1.switchToMode=false;
    5f6a:	e4 ef       	ldi	r30, 0xF4	; 244
    5f6c:	f9 e0       	ldi	r31, 0x09	; 9
    5f6e:	10 82       	st	Z, r1
		 if(Comp_1.def) {timeTillDef=xTaskGetTickCount();Comp_1.stopdef=true;}
    5f70:	81 85       	ldd	r24, Z+9	; 0x09
    5f72:	88 23       	and	r24, r24
    5f74:	69 f0       	breq	.+26     	; 0x5f90 <StartComp+0x5e>
    5f76:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    5f7a:	60 93 75 09 	sts	0x0975, r22	; 0x800975 <timeTillDef>
    5f7e:	70 93 76 09 	sts	0x0976, r23	; 0x800976 <timeTillDef+0x1>
    5f82:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <timeTillDef+0x2>
    5f86:	90 93 78 09 	sts	0x0978, r25	; 0x800978 <timeTillDef+0x3>
    5f8a:	81 e0       	ldi	r24, 0x01	; 1
    5f8c:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <Comp_1+0xa>
		if(PIN_COMPRESSOR_1 == 0)
    5f90:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5f94:	85 fd       	sbrc	r24, 5
    5f96:	9c c0       	rjmp	.+312    	; 0x60d0 <StartComp+0x19e>
		{   
			
			Comp_1.compOn=1;
    5f98:	81 e0       	ldi	r24, 0x01	; 1
    5f9a:	80 93 ff 09 	sts	0x09FF, r24	; 0x8009ff <Comp_1+0xb>
			//if(Comp_2.compOn)vTaskDelay(5000);
			START_COMPRESSOR_1;
    5f9e:	e2 e0       	ldi	r30, 0x02	; 2
    5fa0:	f1 e0       	ldi	r31, 0x01	; 1
    5fa2:	80 81       	ld	r24, Z
    5fa4:	80 62       	ori	r24, 0x20	; 32
    5fa6:	80 83       	st	Z, r24
			
			xSerialxPrintf(&xSerial3Port,"StartCompressor_1\r\n");
    5fa8:	83 e7       	ldi	r24, 0x73	; 115
    5faa:	94 e0       	ldi	r25, 0x04	; 4
    5fac:	9f 93       	push	r25
    5fae:	8f 93       	push	r24
    5fb0:	82 e3       	ldi	r24, 0x32	; 50
    5fb2:	98 e0       	ldi	r25, 0x08	; 8
    5fb4:	9f 93       	push	r25
    5fb6:	8f 93       	push	r24
    5fb8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			
			timeStartComp_1=time(&current_time);
    5fbc:	8f e8       	ldi	r24, 0x8F	; 143
    5fbe:	99 e0       	ldi	r25, 0x09	; 9
    5fc0:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5fc4:	60 93 83 09 	sts	0x0983, r22	; 0x800983 <timeStartComp_1>
    5fc8:	70 93 84 09 	sts	0x0984, r23	; 0x800984 <timeStartComp_1+0x1>
    5fcc:	80 93 85 09 	sts	0x0985, r24	; 0x800985 <timeStartComp_1+0x2>
    5fd0:	90 93 86 09 	sts	0x0986, r25	; 0x800986 <timeStartComp_1+0x3>
			EEpromData.number_turnon_compressor_1+=1;
    5fd4:	e4 e9       	ldi	r30, 0x94	; 148
    5fd6:	f9 e0       	ldi	r31, 0x09	; 9
    5fd8:	86 ad       	ldd	r24, Z+62	; 0x3e
    5fda:	97 ad       	ldd	r25, Z+63	; 0x3f
    5fdc:	01 96       	adiw	r24, 0x01	; 1
    5fde:	97 af       	std	Z+63, r25	; 0x3f
    5fe0:	86 af       	std	Z+62, r24	; 0x3e
			//xSerialxPrintf(&xSerial3Port,"Number_turnon_Compressor_=%d\r\n",EEpromData.number_turnon_compressor_1);
			xTimerChangePeriod( xTStartCheckTrv_1,period, 100 );
    5fe2:	0f 2e       	mov	r0, r31
    5fe4:	f4 e6       	ldi	r31, 0x64	; 100
    5fe6:	cf 2e       	mov	r12, r31
    5fe8:	d1 2c       	mov	r13, r1
    5fea:	e1 2c       	mov	r14, r1
    5fec:	f1 2c       	mov	r15, r1
    5fee:	f0 2d       	mov	r31, r0
    5ff0:	00 e0       	ldi	r16, 0x00	; 0
    5ff2:	10 e0       	ldi	r17, 0x00	; 0
    5ff4:	a5 01       	movw	r20, r10
    5ff6:	94 01       	movw	r18, r8
    5ff8:	64 e0       	ldi	r22, 0x04	; 4
    5ffa:	80 91 8d 09 	lds	r24, 0x098D	; 0x80098d <xTStartCheckTrv_1>
    5ffe:	90 91 8e 09 	lds	r25, 0x098E	; 0x80098e <xTStartCheckTrv_1+0x1>
    6002:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
			xTimerStart(xTStartCheckErrors_1, 0);
    6006:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    600a:	9b 01       	movw	r18, r22
    600c:	ac 01       	movw	r20, r24
    600e:	c1 2c       	mov	r12, r1
    6010:	d1 2c       	mov	r13, r1
    6012:	76 01       	movw	r14, r12
    6014:	61 e0       	ldi	r22, 0x01	; 1
    6016:	80 91 33 0b 	lds	r24, 0x0B33	; 0x800b33 <xTStartCheckErrors_1>
    601a:	90 91 34 0b 	lds	r25, 0x0B34	; 0x800b34 <xTStartCheckErrors_1+0x1>
    601e:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    6022:	0f 90       	pop	r0
    6024:	0f 90       	pop	r0
    6026:	0f 90       	pop	r0
    6028:	0f 90       	pop	r0
    602a:	52 c0       	rjmp	.+164    	; 0x60d0 <StartComp+0x19e>
	
		}
	}
	else if((*pxTimerID) == uxStartDelayCompTimer_2_ID) {
    602c:	8e 30       	cpi	r24, 0x0E	; 14
    602e:	09 f0       	breq	.+2      	; 0x6032 <StartComp+0x100>
    6030:	4f c0       	rjmp	.+158    	; 0x60d0 <StartComp+0x19e>
		xSerialxPrintf(&xSerial3Port,"StartCompressor_2\r\n");
    6032:	87 e8       	ldi	r24, 0x87	; 135
    6034:	94 e0       	ldi	r25, 0x04	; 4
    6036:	9f 93       	push	r25
    6038:	8f 93       	push	r24
    603a:	82 e3       	ldi	r24, 0x32	; 50
    603c:	98 e0       	ldi	r25, 0x08	; 8
    603e:	9f 93       	push	r25
    6040:	8f 93       	push	r24
    6042:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_COMPRESSOR_2 == 0)
    6046:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    604a:	0f 90       	pop	r0
    604c:	0f 90       	pop	r0
    604e:	0f 90       	pop	r0
    6050:	0f 90       	pop	r0
    6052:	86 fd       	sbrc	r24, 6
    6054:	3d c0       	rjmp	.+122    	; 0x60d0 <StartComp+0x19e>
		{
			//if(Comp_1.compOn)vTaskDelay(5000);
			Comp_2.compOn=1;
    6056:	ee e7       	ldi	r30, 0x7E	; 126
    6058:	fa e0       	ldi	r31, 0x0A	; 10
    605a:	81 e0       	ldi	r24, 0x01	; 1
    605c:	83 87       	std	Z+11, r24	; 0x0b
			START_COMPRESSOR_2;
    605e:	a2 e0       	ldi	r26, 0x02	; 2
    6060:	b1 e0       	ldi	r27, 0x01	; 1
    6062:	8c 91       	ld	r24, X
    6064:	80 64       	ori	r24, 0x40	; 64
    6066:	8c 93       	st	X, r24
			
			
			Comp_2.switchToMode=false;
    6068:	10 82       	st	Z, r1
			
			timeStartComp_2=time(&current_time);
    606a:	8f e8       	ldi	r24, 0x8F	; 143
    606c:	99 e0       	ldi	r25, 0x09	; 9
    606e:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6072:	60 93 35 0b 	sts	0x0B35, r22	; 0x800b35 <timeStartComp_2>
    6076:	70 93 36 0b 	sts	0x0B36, r23	; 0x800b36 <timeStartComp_2+0x1>
    607a:	80 93 37 0b 	sts	0x0B37, r24	; 0x800b37 <timeStartComp_2+0x2>
    607e:	90 93 38 0b 	sts	0x0B38, r25	; 0x800b38 <timeStartComp_2+0x3>
			EEpromData.number_turnon_compressor_2+=1;
    6082:	e6 ee       	ldi	r30, 0xE6	; 230
    6084:	f9 e0       	ldi	r31, 0x09	; 9
    6086:	80 81       	ld	r24, Z
    6088:	91 81       	ldd	r25, Z+1	; 0x01
    608a:	01 96       	adiw	r24, 0x01	; 1
    608c:	91 83       	std	Z+1, r25	; 0x01
    608e:	80 83       	st	Z, r24
			xTimerChangePeriod( xTStartCheckTrv_2,period, 100 );
    6090:	0f 2e       	mov	r0, r31
    6092:	f4 e6       	ldi	r31, 0x64	; 100
    6094:	cf 2e       	mov	r12, r31
    6096:	d1 2c       	mov	r13, r1
    6098:	e1 2c       	mov	r14, r1
    609a:	f1 2c       	mov	r15, r1
    609c:	f0 2d       	mov	r31, r0
    609e:	00 e0       	ldi	r16, 0x00	; 0
    60a0:	10 e0       	ldi	r17, 0x00	; 0
    60a2:	a5 01       	movw	r20, r10
    60a4:	94 01       	movw	r18, r8
    60a6:	64 e0       	ldi	r22, 0x04	; 4
    60a8:	80 91 68 0a 	lds	r24, 0x0A68	; 0x800a68 <xTStartCheckTrv_2>
    60ac:	90 91 69 0a 	lds	r25, 0x0A69	; 0x800a69 <xTStartCheckTrv_2+0x1>
    60b0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
			xTimerStart(xTStartCheckErrors_2, 0);
    60b4:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    60b8:	9b 01       	movw	r18, r22
    60ba:	ac 01       	movw	r20, r24
    60bc:	c1 2c       	mov	r12, r1
    60be:	d1 2c       	mov	r13, r1
    60c0:	76 01       	movw	r14, r12
    60c2:	61 e0       	ldi	r22, 0x01	; 1
    60c4:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <xTStartCheckErrors_2>
    60c8:	90 91 7c 09 	lds	r25, 0x097C	; 0x80097c <xTStartCheckErrors_2+0x1>
    60cc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		}
	}
	
	
}
    60d0:	1f 91       	pop	r17
    60d2:	0f 91       	pop	r16
    60d4:	ff 90       	pop	r15
    60d6:	ef 90       	pop	r14
    60d8:	df 90       	pop	r13
    60da:	cf 90       	pop	r12
    60dc:	bf 90       	pop	r11
    60de:	af 90       	pop	r10
    60e0:	9f 90       	pop	r9
    60e2:	8f 90       	pop	r8
    60e4:	08 95       	ret

000060e6 <SwitchRev_1_Time>:
	
	
}
//-------------------------------------------------------------------------
void SwitchRev_1_Time(TimerHandle_t xTimer)
{
    60e6:	cf 92       	push	r12
    60e8:	df 92       	push	r13
    60ea:	ef 92       	push	r14
    60ec:	ff 92       	push	r15
    60ee:	0f 93       	push	r16
    60f0:	1f 93       	push	r17
    60f2:	cf 93       	push	r28
    60f4:	df 93       	push	r29
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    60f6:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    60fa:	ec 01       	movw	r28, r24
	
	//xSerialxPrintf(&xSerial3Port,"SwitchRev_1\r\n");
	
	if((*pxTimerID) == uxSwitchRevOne_1_ID)
    60fc:	88 81       	ld	r24, Y
    60fe:	8c 30       	cpi	r24, 0x0C	; 12
    6100:	19 f5       	brne	.+70     	; 0x6148 <SwitchRev_1_Time+0x62>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_ON_1_1\r\n");
    6102:	8b e9       	ldi	r24, 0x9B	; 155
    6104:	94 e0       	ldi	r25, 0x04	; 4
    6106:	9f 93       	push	r25
    6108:	8f 93       	push	r24
    610a:	82 e3       	ldi	r24, 0x32	; 50
    610c:	98 e0       	ldi	r25, 0x08	; 8
    610e:	9f 93       	push	r25
    6110:	8f 93       	push	r24
    6112:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_REV_VALVE_1 == 0){START_REV_VALVE_1;}//
    6116:	0f 90       	pop	r0
    6118:	0f 90       	pop	r0
    611a:	0f 90       	pop	r0
    611c:	0f 90       	pop	r0
    611e:	94 99       	sbic	0x12, 4	; 18
    6120:	02 c0       	rjmp	.+4      	; 0x6126 <SwitchRev_1_Time+0x40>
    6122:	a4 9a       	sbi	0x14, 4	; 20
    6124:	01 c0       	rjmp	.+2      	; 0x6128 <SwitchRev_1_Time+0x42>
		else {STOP_REV_VALVE_1;}//xSerialxPrintf(&xSerial3Port,"SwitchRev_OFF_1\r\n");
    6126:	a4 98       	cbi	0x14, 4	; 20
		xTimerStart(xSwitchRevTwo_1_time, 0);
    6128:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    612c:	9b 01       	movw	r18, r22
    612e:	ac 01       	movw	r20, r24
    6130:	c1 2c       	mov	r12, r1
    6132:	d1 2c       	mov	r13, r1
    6134:	76 01       	movw	r14, r12
    6136:	00 e0       	ldi	r16, 0x00	; 0
    6138:	10 e0       	ldi	r17, 0x00	; 0
    613a:	61 e0       	ldi	r22, 0x01	; 1
    613c:	80 91 0e 0b 	lds	r24, 0x0B0E	; 0x800b0e <xSwitchRevTwo_1_time>
    6140:	90 91 0f 0b 	lds	r25, 0x0B0F	; 0x800b0f <xSwitchRevTwo_1_time+0x1>
    6144:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if((*pxTimerID) == uxSwitchRevOne_2_ID)
    6148:	88 81       	ld	r24, Y
    614a:	88 31       	cpi	r24, 0x18	; 24
    614c:	19 f5       	brne	.+70     	; 0x6194 <SwitchRev_1_Time+0xae>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_2_1\r\n");
    614e:	8e ea       	ldi	r24, 0xAE	; 174
    6150:	94 e0       	ldi	r25, 0x04	; 4
    6152:	9f 93       	push	r25
    6154:	8f 93       	push	r24
    6156:	82 e3       	ldi	r24, 0x32	; 50
    6158:	98 e0       	ldi	r25, 0x08	; 8
    615a:	9f 93       	push	r25
    615c:	8f 93       	push	r24
    615e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		
		if(PIN_REV_VALVE_2 == 0)START_REV_VALVE_2;
    6162:	0f 90       	pop	r0
    6164:	0f 90       	pop	r0
    6166:	0f 90       	pop	r0
    6168:	0f 90       	pop	r0
    616a:	93 99       	sbic	0x12, 3	; 18
    616c:	02 c0       	rjmp	.+4      	; 0x6172 <SwitchRev_1_Time+0x8c>
    616e:	a3 9a       	sbi	0x14, 3	; 20
    6170:	01 c0       	rjmp	.+2      	; 0x6174 <SwitchRev_1_Time+0x8e>
		else STOP_REV_VALVE_2;
    6172:	a3 98       	cbi	0x14, 3	; 20
		xTimerStart(xSwitchRevTwo_2_time, 0);
    6174:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    6178:	9b 01       	movw	r18, r22
    617a:	ac 01       	movw	r20, r24
    617c:	c1 2c       	mov	r12, r1
    617e:	d1 2c       	mov	r13, r1
    6180:	76 01       	movw	r14, r12
    6182:	00 e0       	ldi	r16, 0x00	; 0
    6184:	10 e0       	ldi	r17, 0x00	; 0
    6186:	61 e0       	ldi	r22, 0x01	; 1
    6188:	80 91 29 0b 	lds	r24, 0x0B29	; 0x800b29 <xSwitchRevTwo_2_time>
    618c:	90 91 2a 0b 	lds	r25, 0x0B2A	; 0x800b2a <xSwitchRevTwo_2_time+0x1>
    6190:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
}
    6194:	df 91       	pop	r29
    6196:	cf 91       	pop	r28
    6198:	1f 91       	pop	r17
    619a:	0f 91       	pop	r16
    619c:	ff 90       	pop	r15
    619e:	ef 90       	pop	r14
    61a0:	df 90       	pop	r13
    61a2:	cf 90       	pop	r12
    61a4:	08 95       	ret

000061a6 <activateTimers>:
const portBASE_TYPE uxStopDelayRevVTimer_2_ID		= 23;
const portBASE_TYPE uxSwitchRevOne_2_ID				= 24;
const portBASE_TYPE uxSwitchRevTwo_2_ID				= 25;

void activateTimers(xCompressor *comp)
{
    61a6:	ef 92       	push	r14
    61a8:	ff 92       	push	r15
    61aa:	0f 93       	push	r16
    61ac:	1f 93       	push	r17
    61ae:	cf 93       	push	r28
    61b0:	df 93       	push	r29
    61b2:	ec 01       	movw	r28, r24
	
	
	if(comp->Index==1)
    61b4:	fc 01       	movw	r30, r24
    61b6:	ee 58       	subi	r30, 0x8E	; 142
    61b8:	ff 4f       	sbci	r31, 0xFF	; 255
    61ba:	80 81       	ld	r24, Z
    61bc:	91 81       	ldd	r25, Z+1	; 0x01
    61be:	01 97       	sbiw	r24, 0x01	; 1
    61c0:	09 f0       	breq	.+2      	; 0x61c4 <activateTimers+0x1e>
    61c2:	fc c0       	rjmp	.+504    	; 0x63bc <activateTimers+0x216>
	{
		
		xStartRevValve_1   =	xTimerCreate("StRevV_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayRevVTimer_1_ID, StartReversingValve);//(EEpromData.Revers_Valve_delay*1000) 
    61c4:	0f 2e       	mov	r0, r31
    61c6:	f2 e8       	ldi	r31, 0x82	; 130
    61c8:	ef 2e       	mov	r14, r31
    61ca:	f9 e2       	ldi	r31, 0x29	; 41
    61cc:	ff 2e       	mov	r15, r31
    61ce:	f0 2d       	mov	r31, r0
    61d0:	03 ea       	ldi	r16, 0xA3	; 163
    61d2:	16 e0       	ldi	r17, 0x06	; 6
    61d4:	20 e0       	ldi	r18, 0x00	; 0
    61d6:	48 e5       	ldi	r20, 0x58	; 88
    61d8:	5b e1       	ldi	r21, 0x1B	; 27
    61da:	60 e0       	ldi	r22, 0x00	; 0
    61dc:	70 e0       	ldi	r23, 0x00	; 0
    61de:	8e eb       	ldi	r24, 0xBE	; 190
    61e0:	94 e0       	ldi	r25, 0x04	; 4
    61e2:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    61e6:	90 93 3c 0b 	sts	0x0B3C, r25	; 0x800b3c <xStartRevValve_1+0x1>
    61ea:	80 93 3b 0b 	sts	0x0B3B, r24	; 0x800b3b <xStartRevValve_1>
		xStartThreeWay     =	xTimerCreate("StThreeW",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayThreeVTimer_1_ID, StartThreeWay);//(EEpromData.Three_Way_delay*1000)
    61ee:	0f 2e       	mov	r0, r31
    61f0:	fd e6       	ldi	r31, 0x6D	; 109
    61f2:	ef 2e       	mov	r14, r31
    61f4:	fc e2       	ldi	r31, 0x2C	; 44
    61f6:	ff 2e       	mov	r15, r31
    61f8:	f0 2d       	mov	r31, r0
    61fa:	02 ea       	ldi	r16, 0xA2	; 162
    61fc:	16 e0       	ldi	r17, 0x06	; 6
    61fe:	20 e0       	ldi	r18, 0x00	; 0
    6200:	48 e5       	ldi	r20, 0x58	; 88
    6202:	5b e1       	ldi	r21, 0x1B	; 27
    6204:	60 e0       	ldi	r22, 0x00	; 0
    6206:	70 e0       	ldi	r23, 0x00	; 0
    6208:	87 ec       	ldi	r24, 0xC7	; 199
    620a:	94 e0       	ldi	r25, 0x04	; 4
    620c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6210:	90 93 6d 0a 	sts	0x0A6D, r25	; 0x800a6d <xStartThreeWay+0x1>
    6214:	80 93 6c 0a 	sts	0x0A6C, r24	; 0x800a6c <xStartThreeWay>
		xStartHeatPump_1   =	xTimerCreate("StHeatP_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayHeatPTimer_1_ID, StartHeatPump);//(EEpromData.HeatingPump_delay*1000) 
    6218:	0f 2e       	mov	r0, r31
    621a:	fe e8       	ldi	r31, 0x8E	; 142
    621c:	ef 2e       	mov	r14, r31
    621e:	fa e2       	ldi	r31, 0x2A	; 42
    6220:	ff 2e       	mov	r15, r31
    6222:	f0 2d       	mov	r31, r0
    6224:	04 ea       	ldi	r16, 0xA4	; 164
    6226:	16 e0       	ldi	r17, 0x06	; 6
    6228:	20 e0       	ldi	r18, 0x00	; 0
    622a:	48 e5       	ldi	r20, 0x58	; 88
    622c:	5b e1       	ldi	r21, 0x1B	; 27
    622e:	60 e0       	ldi	r22, 0x00	; 0
    6230:	70 e0       	ldi	r23, 0x00	; 0
    6232:	80 ed       	ldi	r24, 0xD0	; 208
    6234:	94 e0       	ldi	r25, 0x04	; 4
    6236:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    623a:	90 93 11 0b 	sts	0x0B11, r25	; 0x800b11 <xStartHeatPump_1+0x1>
    623e:	80 93 10 0b 	sts	0x0B10, r24	; 0x800b10 <xStartHeatPump_1>
		xStartCompressor_1 =	xTimerCreate("StComp_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayCompTimer_1_ID, StartComp);//(EEpromData.Compressor_delay*1000)
    6242:	0f 2e       	mov	r0, r31
    6244:	f9 e9       	ldi	r31, 0x99	; 153
    6246:	ef 2e       	mov	r14, r31
    6248:	ff e2       	ldi	r31, 0x2F	; 47
    624a:	ff 2e       	mov	r15, r31
    624c:	f0 2d       	mov	r31, r0
    624e:	05 ea       	ldi	r16, 0xA5	; 165
    6250:	16 e0       	ldi	r17, 0x06	; 6
    6252:	20 e0       	ldi	r18, 0x00	; 0
    6254:	48 e5       	ldi	r20, 0x58	; 88
    6256:	5b e1       	ldi	r21, 0x1B	; 27
    6258:	60 e0       	ldi	r22, 0x00	; 0
    625a:	70 e0       	ldi	r23, 0x00	; 0
    625c:	8a ed       	ldi	r24, 0xDA	; 218
    625e:	94 e0       	ldi	r25, 0x04	; 4
    6260:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6264:	90 93 13 0b 	sts	0x0B13, r25	; 0x800b13 <xStartCompressor_1+0x1>
    6268:	80 93 12 0b 	sts	0x0B12, r24	; 0x800b12 <xStartCompressor_1>
		xTStartCheckErrors_1 =	xTimerCreate("ChErr_1",			300000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayChekErrTimer_1_ID, StartCheckErrors);
    626c:	0f 2e       	mov	r0, r31
    626e:	f1 e1       	ldi	r31, 0x11	; 17
    6270:	ef 2e       	mov	r14, r31
    6272:	fc e2       	ldi	r31, 0x2C	; 44
    6274:	ff 2e       	mov	r15, r31
    6276:	f0 2d       	mov	r31, r0
    6278:	00 ea       	ldi	r16, 0xA0	; 160
    627a:	16 e0       	ldi	r17, 0x06	; 6
    627c:	20 e0       	ldi	r18, 0x00	; 0
    627e:	40 ee       	ldi	r20, 0xE0	; 224
    6280:	53 e9       	ldi	r21, 0x93	; 147
    6282:	64 e0       	ldi	r22, 0x04	; 4
    6284:	70 e0       	ldi	r23, 0x00	; 0
    6286:	83 ee       	ldi	r24, 0xE3	; 227
    6288:	94 e0       	ldi	r25, 0x04	; 4
    628a:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    628e:	90 93 34 0b 	sts	0x0B34, r25	; 0x800b34 <xTStartCheckErrors_1+0x1>
    6292:	80 93 33 0b 	sts	0x0B33, r24	; 0x800b33 <xTStartCheckErrors_1>
		xTStartCheckTrv_1 =		xTimerCreate("ChTrv_1",			7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayChekTrvTimer_1_ID, StartCheckTrv);//(EEpromData.TRV_Delay*1000)
    6296:	0f 2e       	mov	r0, r31
    6298:	f1 e4       	ldi	r31, 0x41	; 65
    629a:	ef 2e       	mov	r14, r31
    629c:	fc e2       	ldi	r31, 0x2C	; 44
    629e:	ff 2e       	mov	r15, r31
    62a0:	f0 2d       	mov	r31, r0
    62a2:	01 ea       	ldi	r16, 0xA1	; 161
    62a4:	16 e0       	ldi	r17, 0x06	; 6
    62a6:	20 e0       	ldi	r18, 0x00	; 0
    62a8:	48 e5       	ldi	r20, 0x58	; 88
    62aa:	5b e1       	ldi	r21, 0x1B	; 27
    62ac:	60 e0       	ldi	r22, 0x00	; 0
    62ae:	70 e0       	ldi	r23, 0x00	; 0
    62b0:	8b ee       	ldi	r24, 0xEB	; 235
    62b2:	94 e0       	ldi	r25, 0x04	; 4
    62b4:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    62b8:	90 93 8e 09 	sts	0x098E, r25	; 0x80098e <xTStartCheckTrv_1+0x1>
    62bc:	80 93 8d 09 	sts	0x098D, r24	; 0x80098d <xTStartCheckTrv_1>
		//----------stop

		xSwitchRevOne_1_time =	xTimerCreate("swRevOne_1",		5000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxSwitchRevOne_1_ID, SwitchRev_1_Time);
    62c0:	0f 2e       	mov	r0, r31
    62c2:	f3 e7       	ldi	r31, 0x73	; 115
    62c4:	ef 2e       	mov	r14, r31
    62c6:	f0 e3       	ldi	r31, 0x30	; 48
    62c8:	ff 2e       	mov	r15, r31
    62ca:	f0 2d       	mov	r31, r0
    62cc:	0b e9       	ldi	r16, 0x9B	; 155
    62ce:	16 e0       	ldi	r17, 0x06	; 6
    62d0:	20 e0       	ldi	r18, 0x00	; 0
    62d2:	48 e8       	ldi	r20, 0x88	; 136
    62d4:	53 e1       	ldi	r21, 0x13	; 19
    62d6:	60 e0       	ldi	r22, 0x00	; 0
    62d8:	70 e0       	ldi	r23, 0x00	; 0
    62da:	83 ef       	ldi	r24, 0xF3	; 243
    62dc:	94 e0       	ldi	r25, 0x04	; 4
    62de:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    62e2:	90 93 88 09 	sts	0x0988, r25	; 0x800988 <xSwitchRevOne_1_time+0x1>
    62e6:	80 93 87 09 	sts	0x0987, r24	; 0x800987 <xSwitchRevOne_1_time>
		xSwitchRevTwo_1_time =	xTimerCreate("swRevTwo_1",		5000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxSwitchRevTwo_1_ID, SwitchRev_2_Time);
    62ea:	0f 2e       	mov	r0, r31
    62ec:	f5 e3       	ldi	r31, 0x35	; 53
    62ee:	ef 2e       	mov	r14, r31
    62f0:	fb e2       	ldi	r31, 0x2B	; 43
    62f2:	ff 2e       	mov	r15, r31
    62f4:	f0 2d       	mov	r31, r0
    62f6:	0a e9       	ldi	r16, 0x9A	; 154
    62f8:	16 e0       	ldi	r17, 0x06	; 6
    62fa:	20 e0       	ldi	r18, 0x00	; 0
    62fc:	48 e8       	ldi	r20, 0x88	; 136
    62fe:	53 e1       	ldi	r21, 0x13	; 19
    6300:	60 e0       	ldi	r22, 0x00	; 0
    6302:	70 e0       	ldi	r23, 0x00	; 0
    6304:	8e ef       	ldi	r24, 0xFE	; 254
    6306:	94 e0       	ldi	r25, 0x04	; 4
    6308:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    630c:	90 93 0f 0b 	sts	0x0B0F, r25	; 0x800b0f <xSwitchRevTwo_1_time+0x1>
    6310:	80 93 0e 0b 	sts	0x0B0E, r24	; 0x800b0e <xSwitchRevTwo_1_time>
		xStopHeatPump_1   =		xTimerCreate("offHeatP_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayHeatPTimer_1_ID, HeatPump_Stop);//(EEpromData.HeatingPump_delay*1000)
    6314:	0f 2e       	mov	r0, r31
    6316:	f3 e3       	ldi	r31, 0x33	; 51
    6318:	ef 2e       	mov	r14, r31
    631a:	fd e2       	ldi	r31, 0x2D	; 45
    631c:	ff 2e       	mov	r15, r31
    631e:	f0 2d       	mov	r31, r0
    6320:	0f e9       	ldi	r16, 0x9F	; 159
    6322:	16 e0       	ldi	r17, 0x06	; 6
    6324:	20 e0       	ldi	r18, 0x00	; 0
    6326:	48 e5       	ldi	r20, 0x58	; 88
    6328:	5b e1       	ldi	r21, 0x1B	; 27
    632a:	60 e0       	ldi	r22, 0x00	; 0
    632c:	70 e0       	ldi	r23, 0x00	; 0
    632e:	89 e0       	ldi	r24, 0x09	; 9
    6330:	95 e0       	ldi	r25, 0x05	; 5
    6332:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6336:	90 93 82 09 	sts	0x0982, r25	; 0x800982 <xStopHeatPump_1+0x1>
    633a:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <xStopHeatPump_1>
		xStopThreeWay     =		xTimerCreate("offThreeW",		7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayThreeVTimer_1_ID, ThreeWay_Stop);//(EEpromData.Three_Way_delay*1000)
    633e:	0f 2e       	mov	r0, r31
    6340:	f0 e4       	ldi	r31, 0x40	; 64
    6342:	ef 2e       	mov	r14, r31
    6344:	fe e2       	ldi	r31, 0x2E	; 46
    6346:	ff 2e       	mov	r15, r31
    6348:	f0 2d       	mov	r31, r0
    634a:	0c e9       	ldi	r16, 0x9C	; 156
    634c:	16 e0       	ldi	r17, 0x06	; 6
    634e:	20 e0       	ldi	r18, 0x00	; 0
    6350:	48 e5       	ldi	r20, 0x58	; 88
    6352:	5b e1       	ldi	r21, 0x1B	; 27
    6354:	60 e0       	ldi	r22, 0x00	; 0
    6356:	70 e0       	ldi	r23, 0x00	; 0
    6358:	84 e1       	ldi	r24, 0x14	; 20
    635a:	95 e0       	ldi	r25, 0x05	; 5
    635c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6360:	90 93 6b 0a 	sts	0x0A6B, r25	; 0x800a6b <xStopThreeWay+0x1>
    6364:	80 93 6a 0a 	sts	0x0A6A, r24	; 0x800a6a <xStopThreeWay>
		xStopRevValve_1   =		xTimerCreate("offRevV_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayRevVTimer_1_ID, Revers_Stop);//(EEpromData.Revers_Valve_delay*1000)
    6368:	0f 2e       	mov	r0, r31
    636a:	fe e9       	ldi	r31, 0x9E	; 158
    636c:	ef 2e       	mov	r14, r31
    636e:	fb e2       	ldi	r31, 0x2B	; 43
    6370:	ff 2e       	mov	r15, r31
    6372:	f0 2d       	mov	r31, r0
    6374:	0d e9       	ldi	r16, 0x9D	; 157
    6376:	16 e0       	ldi	r17, 0x06	; 6
    6378:	20 e0       	ldi	r18, 0x00	; 0
    637a:	48 e5       	ldi	r20, 0x58	; 88
    637c:	5b e1       	ldi	r21, 0x1B	; 27
    637e:	60 e0       	ldi	r22, 0x00	; 0
    6380:	70 e0       	ldi	r23, 0x00	; 0
    6382:	8e e1       	ldi	r24, 0x1E	; 30
    6384:	95 e0       	ldi	r25, 0x05	; 5
    6386:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    638a:	90 93 05 0b 	sts	0x0B05, r25	; 0x800b05 <xStopRevValve_1+0x1>
    638e:	80 93 04 0b 	sts	0x0B04, r24	; 0x800b04 <xStopRevValve_1>
		xStopSource_1   =		xTimerCreate("offSourceP_1",	7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelaySourcePTimer_1_ID, SorcePump_Stop);//(EEpromData.Source_Pump_delay*1000)
    6392:	0f 2e       	mov	r0, r31
    6394:	fb ec       	ldi	r31, 0xCB	; 203
    6396:	ef 2e       	mov	r14, r31
    6398:	fe e2       	ldi	r31, 0x2E	; 46
    639a:	ff 2e       	mov	r15, r31
    639c:	f0 2d       	mov	r31, r0
    639e:	0e e9       	ldi	r16, 0x9E	; 158
    63a0:	16 e0       	ldi	r17, 0x06	; 6
    63a2:	20 e0       	ldi	r18, 0x00	; 0
    63a4:	48 e5       	ldi	r20, 0x58	; 88
    63a6:	5b e1       	ldi	r21, 0x1B	; 27
    63a8:	60 e0       	ldi	r22, 0x00	; 0
    63aa:	70 e0       	ldi	r23, 0x00	; 0
    63ac:	88 e2       	ldi	r24, 0x28	; 40
    63ae:	95 e0       	ldi	r25, 0x05	; 5
    63b0:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    63b4:	90 93 8c 09 	sts	0x098C, r25	; 0x80098c <xStopSource_1+0x1>
    63b8:	80 93 8b 09 	sts	0x098B, r24	; 0x80098b <xStopSource_1>
	}
	if (comp->Index==2)
    63bc:	ce 58       	subi	r28, 0x8E	; 142
    63be:	df 4f       	sbci	r29, 0xFF	; 255
    63c0:	88 81       	ld	r24, Y
    63c2:	99 81       	ldd	r25, Y+1	; 0x01
    63c4:	02 97       	sbiw	r24, 0x02	; 2
    63c6:	09 f0       	breq	.+2      	; 0x63ca <activateTimers+0x224>
    63c8:	d2 c0       	rjmp	.+420    	; 0x656e <activateTimers+0x3c8>
	{
		
		xStartRevValve_2   =	xTimerCreate("StRevV_2",		7000, pdFALSE, (void*) &uxStartDelayRevVTimer_2_ID, StartReversingValve);
    63ca:	0f 2e       	mov	r0, r31
    63cc:	f2 e8       	ldi	r31, 0x82	; 130
    63ce:	ef 2e       	mov	r14, r31
    63d0:	f9 e2       	ldi	r31, 0x29	; 41
    63d2:	ff 2e       	mov	r15, r31
    63d4:	f0 2d       	mov	r31, r0
    63d6:	07 e9       	ldi	r16, 0x97	; 151
    63d8:	16 e0       	ldi	r17, 0x06	; 6
    63da:	20 e0       	ldi	r18, 0x00	; 0
    63dc:	48 e5       	ldi	r20, 0x58	; 88
    63de:	5b e1       	ldi	r21, 0x1B	; 27
    63e0:	60 e0       	ldi	r22, 0x00	; 0
    63e2:	70 e0       	ldi	r23, 0x00	; 0
    63e4:	85 e3       	ldi	r24, 0x35	; 53
    63e6:	95 e0       	ldi	r25, 0x05	; 5
    63e8:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    63ec:	90 93 fd 0a 	sts	0x0AFD, r25	; 0x800afd <xStartRevValve_2+0x1>
    63f0:	80 93 fc 0a 	sts	0x0AFC, r24	; 0x800afc <xStartRevValve_2>
		xStartHeatPump_2   =	xTimerCreate("StHeatP_2",		7000, pdFALSE, (void*) &uxStartDelayHeatPTimer_2_ID, StartHeatPump);
    63f4:	0f 2e       	mov	r0, r31
    63f6:	fe e8       	ldi	r31, 0x8E	; 142
    63f8:	ef 2e       	mov	r14, r31
    63fa:	fa e2       	ldi	r31, 0x2A	; 42
    63fc:	ff 2e       	mov	r15, r31
    63fe:	f0 2d       	mov	r31, r0
    6400:	08 e9       	ldi	r16, 0x98	; 152
    6402:	16 e0       	ldi	r17, 0x06	; 6
    6404:	20 e0       	ldi	r18, 0x00	; 0
    6406:	48 e5       	ldi	r20, 0x58	; 88
    6408:	5b e1       	ldi	r21, 0x1B	; 27
    640a:	60 e0       	ldi	r22, 0x00	; 0
    640c:	70 e0       	ldi	r23, 0x00	; 0
    640e:	8e e3       	ldi	r24, 0x3E	; 62
    6410:	95 e0       	ldi	r25, 0x05	; 5
    6412:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6416:	90 93 6f 0a 	sts	0x0A6F, r25	; 0x800a6f <xStartHeatPump_2+0x1>
    641a:	80 93 6e 0a 	sts	0x0A6E, r24	; 0x800a6e <xStartHeatPump_2>
		xStartCompressor_2 =	xTimerCreate("StComp_2",		7000, pdFALSE, (void*) &uxStartDelayCompTimer_2_ID, StartComp);
    641e:	0f 2e       	mov	r0, r31
    6420:	f9 e9       	ldi	r31, 0x99	; 153
    6422:	ef 2e       	mov	r14, r31
    6424:	ff e2       	ldi	r31, 0x2F	; 47
    6426:	ff 2e       	mov	r15, r31
    6428:	f0 2d       	mov	r31, r0
    642a:	09 e9       	ldi	r16, 0x99	; 153
    642c:	16 e0       	ldi	r17, 0x06	; 6
    642e:	20 e0       	ldi	r18, 0x00	; 0
    6430:	48 e5       	ldi	r20, 0x58	; 88
    6432:	5b e1       	ldi	r21, 0x1B	; 27
    6434:	60 e0       	ldi	r22, 0x00	; 0
    6436:	70 e0       	ldi	r23, 0x00	; 0
    6438:	88 e4       	ldi	r24, 0x48	; 72
    643a:	95 e0       	ldi	r25, 0x05	; 5
    643c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6440:	90 93 25 0b 	sts	0x0B25, r25	; 0x800b25 <xStartCompressor_2+0x1>
    6444:	80 93 24 0b 	sts	0x0B24, r24	; 0x800b24 <xStartCompressor_2>
		xTStartCheckErrors_2 =	xTimerCreate("ChErr_2",			300000, pdFALSE, (void*) &uxStartDelayChekErrTimer_2_ID, StartCheckErrors);
    6448:	0f 2e       	mov	r0, r31
    644a:	f1 e1       	ldi	r31, 0x11	; 17
    644c:	ef 2e       	mov	r14, r31
    644e:	fc e2       	ldi	r31, 0x2C	; 44
    6450:	ff 2e       	mov	r15, r31
    6452:	f0 2d       	mov	r31, r0
    6454:	05 e9       	ldi	r16, 0x95	; 149
    6456:	16 e0       	ldi	r17, 0x06	; 6
    6458:	20 e0       	ldi	r18, 0x00	; 0
    645a:	40 ee       	ldi	r20, 0xE0	; 224
    645c:	53 e9       	ldi	r21, 0x93	; 147
    645e:	64 e0       	ldi	r22, 0x04	; 4
    6460:	70 e0       	ldi	r23, 0x00	; 0
    6462:	81 e5       	ldi	r24, 0x51	; 81
    6464:	95 e0       	ldi	r25, 0x05	; 5
    6466:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    646a:	90 93 7c 09 	sts	0x097C, r25	; 0x80097c <xTStartCheckErrors_2+0x1>
    646e:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <xTStartCheckErrors_2>
		xTStartCheckTrv_2 =		xTimerCreate("ChTrv_2",			7000, pdFALSE, (void*) &uxStartDelayChekTrvTimer_2_ID, StartCheckTrv);
    6472:	0f 2e       	mov	r0, r31
    6474:	f1 e4       	ldi	r31, 0x41	; 65
    6476:	ef 2e       	mov	r14, r31
    6478:	fc e2       	ldi	r31, 0x2C	; 44
    647a:	ff 2e       	mov	r15, r31
    647c:	f0 2d       	mov	r31, r0
    647e:	06 e9       	ldi	r16, 0x96	; 150
    6480:	16 e0       	ldi	r17, 0x06	; 6
    6482:	20 e0       	ldi	r18, 0x00	; 0
    6484:	48 e5       	ldi	r20, 0x58	; 88
    6486:	5b e1       	ldi	r21, 0x1B	; 27
    6488:	60 e0       	ldi	r22, 0x00	; 0
    648a:	70 e0       	ldi	r23, 0x00	; 0
    648c:	89 e5       	ldi	r24, 0x59	; 89
    648e:	95 e0       	ldi	r25, 0x05	; 5
    6490:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6494:	90 93 69 0a 	sts	0x0A69, r25	; 0x800a69 <xTStartCheckTrv_2+0x1>
    6498:	80 93 68 0a 	sts	0x0A68, r24	; 0x800a68 <xTStartCheckTrv_2>
		//---------stop
		xSwitchRevOne_2_time =	xTimerCreate("swRevOne_2",		5000, pdFALSE, (void*) &uxSwitchRevOne_2_ID, SwitchRev_1_Time);
    649c:	0f 2e       	mov	r0, r31
    649e:	f3 e7       	ldi	r31, 0x73	; 115
    64a0:	ef 2e       	mov	r14, r31
    64a2:	f0 e3       	ldi	r31, 0x30	; 48
    64a4:	ff 2e       	mov	r15, r31
    64a6:	f0 2d       	mov	r31, r0
    64a8:	01 e9       	ldi	r16, 0x91	; 145
    64aa:	16 e0       	ldi	r17, 0x06	; 6
    64ac:	20 e0       	ldi	r18, 0x00	; 0
    64ae:	48 e8       	ldi	r20, 0x88	; 136
    64b0:	53 e1       	ldi	r21, 0x13	; 19
    64b2:	60 e0       	ldi	r22, 0x00	; 0
    64b4:	70 e0       	ldi	r23, 0x00	; 0
    64b6:	81 e6       	ldi	r24, 0x61	; 97
    64b8:	95 e0       	ldi	r25, 0x05	; 5
    64ba:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    64be:	90 93 45 0b 	sts	0x0B45, r25	; 0x800b45 <xSwitchRevOne_2_time+0x1>
    64c2:	80 93 44 0b 	sts	0x0B44, r24	; 0x800b44 <xSwitchRevOne_2_time>
		xSwitchRevTwo_2_time =	xTimerCreate("swRevTwo_2",		5000, pdFALSE, (void*) &uxSwitchRevTwo_2_ID, SwitchRev_2_Time);
    64c6:	0f 2e       	mov	r0, r31
    64c8:	f5 e3       	ldi	r31, 0x35	; 53
    64ca:	ef 2e       	mov	r14, r31
    64cc:	fb e2       	ldi	r31, 0x2B	; 43
    64ce:	ff 2e       	mov	r15, r31
    64d0:	f0 2d       	mov	r31, r0
    64d2:	00 e9       	ldi	r16, 0x90	; 144
    64d4:	16 e0       	ldi	r17, 0x06	; 6
    64d6:	20 e0       	ldi	r18, 0x00	; 0
    64d8:	48 e8       	ldi	r20, 0x88	; 136
    64da:	53 e1       	ldi	r21, 0x13	; 19
    64dc:	60 e0       	ldi	r22, 0x00	; 0
    64de:	70 e0       	ldi	r23, 0x00	; 0
    64e0:	8c e6       	ldi	r24, 0x6C	; 108
    64e2:	95 e0       	ldi	r25, 0x05	; 5
    64e4:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    64e8:	90 93 2a 0b 	sts	0x0B2A, r25	; 0x800b2a <xSwitchRevTwo_2_time+0x1>
    64ec:	80 93 29 0b 	sts	0x0B29, r24	; 0x800b29 <xSwitchRevTwo_2_time>
		xStopHeatPump_2   =		xTimerCreate("offHeatP_2",		7000, pdFALSE, (void*) &uxStopDelayHeatPTimer_2_ID, HeatPump_Stop);
    64f0:	0f 2e       	mov	r0, r31
    64f2:	f3 e3       	ldi	r31, 0x33	; 51
    64f4:	ef 2e       	mov	r14, r31
    64f6:	fd e2       	ldi	r31, 0x2D	; 45
    64f8:	ff 2e       	mov	r15, r31
    64fa:	f0 2d       	mov	r31, r0
    64fc:	04 e9       	ldi	r16, 0x94	; 148
    64fe:	16 e0       	ldi	r17, 0x06	; 6
    6500:	20 e0       	ldi	r18, 0x00	; 0
    6502:	48 e5       	ldi	r20, 0x58	; 88
    6504:	5b e1       	ldi	r21, 0x1B	; 27
    6506:	60 e0       	ldi	r22, 0x00	; 0
    6508:	70 e0       	ldi	r23, 0x00	; 0
    650a:	87 e7       	ldi	r24, 0x77	; 119
    650c:	95 e0       	ldi	r25, 0x05	; 5
    650e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6512:	90 93 03 0b 	sts	0x0B03, r25	; 0x800b03 <xStopHeatPump_2+0x1>
    6516:	80 93 02 0b 	sts	0x0B02, r24	; 0x800b02 <xStopHeatPump_2>
		xStopRevValve_2    =	xTimerCreate("offRevV_2",		7000, pdFALSE, (void*) &uxStopDelayRevVTimer_2_ID, Revers_Stop);
    651a:	0f 2e       	mov	r0, r31
    651c:	fe e9       	ldi	r31, 0x9E	; 158
    651e:	ef 2e       	mov	r14, r31
    6520:	fb e2       	ldi	r31, 0x2B	; 43
    6522:	ff 2e       	mov	r15, r31
    6524:	f0 2d       	mov	r31, r0
    6526:	02 e9       	ldi	r16, 0x92	; 146
    6528:	16 e0       	ldi	r17, 0x06	; 6
    652a:	20 e0       	ldi	r18, 0x00	; 0
    652c:	48 e5       	ldi	r20, 0x58	; 88
    652e:	5b e1       	ldi	r21, 0x1B	; 27
    6530:	60 e0       	ldi	r22, 0x00	; 0
    6532:	70 e0       	ldi	r23, 0x00	; 0
    6534:	82 e8       	ldi	r24, 0x82	; 130
    6536:	95 e0       	ldi	r25, 0x05	; 5
    6538:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    653c:	90 93 8a 09 	sts	0x098A, r25	; 0x80098a <xStopRevValve_2+0x1>
    6540:	80 93 89 09 	sts	0x0989, r24	; 0x800989 <xStopRevValve_2>
		xStopSource_2   =		xTimerCreate("offSourceP_2",	7000, pdFALSE, (void*) &uxStopDelaySourcePTimer_2_ID, SorcePump_Stop);
    6544:	0f 2e       	mov	r0, r31
    6546:	fb ec       	ldi	r31, 0xCB	; 203
    6548:	ef 2e       	mov	r14, r31
    654a:	fe e2       	ldi	r31, 0x2E	; 46
    654c:	ff 2e       	mov	r15, r31
    654e:	f0 2d       	mov	r31, r0
    6550:	03 e9       	ldi	r16, 0x93	; 147
    6552:	16 e0       	ldi	r17, 0x06	; 6
    6554:	20 e0       	ldi	r18, 0x00	; 0
    6556:	48 e5       	ldi	r20, 0x58	; 88
    6558:	5b e1       	ldi	r21, 0x1B	; 27
    655a:	60 e0       	ldi	r22, 0x00	; 0
    655c:	70 e0       	ldi	r23, 0x00	; 0
    655e:	8c e8       	ldi	r24, 0x8C	; 140
    6560:	95 e0       	ldi	r25, 0x05	; 5
    6562:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6566:	90 93 f3 0a 	sts	0x0AF3, r25	; 0x800af3 <xStopSource_2+0x1>
    656a:	80 93 f2 0a 	sts	0x0AF2, r24	; 0x800af2 <xStopSource_2>
	}
	
	
}
    656e:	df 91       	pop	r29
    6570:	cf 91       	pop	r28
    6572:	1f 91       	pop	r17
    6574:	0f 91       	pop	r16
    6576:	ff 90       	pop	r15
    6578:	ef 90       	pop	r14
    657a:	08 95       	ret

0000657c <startDefrost>:
//------------------------------------------------
void startDefrost(xCompressor *comp,xEEdata* eeData){
    657c:	fb 01       	movw	r30, r22
	_heatWater=eeData->heatWater;
    657e:	81 e0       	ldi	r24, 0x01	; 1
    6580:	95 a1       	ldd	r25, Z+37	; 0x25
    6582:	91 11       	cpse	r25, r1
    6584:	01 c0       	rjmp	.+2      	; 0x6588 <startDefrost+0xc>
    6586:	80 e0       	ldi	r24, 0x00	; 0
    6588:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <_heatWater>
	_heat =eeData->heat;
    658c:	81 e0       	ldi	r24, 0x01	; 1
    658e:	96 a1       	ldd	r25, Z+38	; 0x26
    6590:	91 11       	cpse	r25, r1
    6592:	01 c0       	rjmp	.+2      	; 0x6596 <startDefrost+0x1a>
    6594:	80 e0       	ldi	r24, 0x00	; 0
    6596:	80 93 af 07 	sts	0x07AF, r24	; 0x8007af <_heat>
	_cool =eeData->cool;
    659a:	81 e0       	ldi	r24, 0x01	; 1
    659c:	97 a1       	ldd	r25, Z+39	; 0x27
    659e:	91 11       	cpse	r25, r1
    65a0:	01 c0       	rjmp	.+2      	; 0x65a4 <startDefrost+0x28>
    65a2:	80 e0       	ldi	r24, 0x00	; 0
    65a4:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <_cool>
	eeData->heatWater=false;
    65a8:	15 a2       	std	Z+37, r1	; 0x25
	eeData->heat =false;
    65aa:	16 a2       	std	Z+38, r1	; 0x26
	eeData->cool =true;
    65ac:	81 e0       	ldi	r24, 0x01	; 1
    65ae:	87 a3       	std	Z+39, r24	; 0x27
    65b0:	08 95       	ret

000065b2 <stopDefrost>:
	//Comp_Stop(comp);
		
}
void stopDefrost(xCompressor *comp,xEEdata* eeData){
    65b2:	fb 01       	movw	r30, r22
	
	//Comp_Stop(comp);
	//eeData->heatWater=false;
	//eeData->heat =true;
	//eeData->cool =false;
	eeData->heatWater=_heatWater;
    65b4:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <_heatWater>
    65b8:	85 a3       	std	Z+37, r24	; 0x25
	eeData->heat =_heat;
    65ba:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <_heat>
    65be:	86 a3       	std	Z+38, r24	; 0x26
	eeData->cool =_cool;
    65c0:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <_cool>
    65c4:	87 a3       	std	Z+39, r24	; 0x27
    65c6:	08 95       	ret

000065c8 <StarSoursePump>:




//------------------------------------------------
void StarSoursePump(xCompressor *comp){
    65c8:	4f 92       	push	r4
    65ca:	5f 92       	push	r5
    65cc:	6f 92       	push	r6
    65ce:	7f 92       	push	r7
    65d0:	af 92       	push	r10
    65d2:	bf 92       	push	r11
    65d4:	cf 92       	push	r12
    65d6:	df 92       	push	r13
    65d8:	ef 92       	push	r14
    65da:	ff 92       	push	r15
    65dc:	0f 93       	push	r16
    65de:	1f 93       	push	r17
    65e0:	cf 93       	push	r28
    65e2:	df 93       	push	r29
    65e4:	5c 01       	movw	r10, r24
TickType_t period;

	period=(TickType_t)EEpromData.Revers_Valve_delay;
    65e6:	20 91 96 09 	lds	r18, 0x0996	; 0x800996 <EEpromData+0x2>
	period*=1000;
    65ea:	30 e0       	ldi	r19, 0x00	; 0
    65ec:	a8 ee       	ldi	r26, 0xE8	; 232
    65ee:	b3 e0       	ldi	r27, 0x03	; 3
    65f0:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    65f4:	2b 01       	movw	r4, r22
    65f6:	3c 01       	movw	r6, r24
	xSerialxPrintf(&xSerial3Port,"SoursePump_f_%d\r\n",comp->Index);
    65f8:	e5 01       	movw	r28, r10
    65fa:	ce 58       	subi	r28, 0x8E	; 142
    65fc:	df 4f       	sbci	r29, 0xFF	; 255
    65fe:	89 81       	ldd	r24, Y+1	; 0x01
    6600:	8f 93       	push	r24
    6602:	88 81       	ld	r24, Y
    6604:	8f 93       	push	r24
    6606:	89 e9       	ldi	r24, 0x99	; 153
    6608:	95 e0       	ldi	r25, 0x05	; 5
    660a:	9f 93       	push	r25
    660c:	8f 93       	push	r24
    660e:	82 e3       	ldi	r24, 0x32	; 50
    6610:	98 e0       	ldi	r25, 0x08	; 8
    6612:	9f 93       	push	r25
    6614:	8f 93       	push	r24
    6616:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(comp->Index == 1)
    661a:	0f 90       	pop	r0
    661c:	0f 90       	pop	r0
    661e:	0f 90       	pop	r0
    6620:	0f 90       	pop	r0
    6622:	0f 90       	pop	r0
    6624:	0f 90       	pop	r0
    6626:	88 81       	ld	r24, Y
    6628:	99 81       	ldd	r25, Y+1	; 0x01
    662a:	01 97       	sbiw	r24, 0x01	; 1
    662c:	09 f0       	breq	.+2      	; 0x6630 <StarSoursePump+0x68>
    662e:	4a c0       	rjmp	.+148    	; 0x66c4 <StarSoursePump+0xfc>
	{
		
		Comp_1.error=0;
    6630:	10 92 65 0a 	sts	0x0A65, r1	; 0x800a65 <Comp_1+0x71>
    6634:	10 92 64 0a 	sts	0x0A64, r1	; 0x800a64 <Comp_1+0x70>
		Comp_1.switchToMode=true;
    6638:	81 e0       	ldi	r24, 0x01	; 1
    663a:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <Comp_1>
		if(PIN_SOURCE_PUMP_1 == 0 && !comp->def )
    663e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6642:	81 fd       	sbrc	r24, 1
    6644:	2d c0       	rjmp	.+90     	; 0x66a0 <StarSoursePump+0xd8>
    6646:	f5 01       	movw	r30, r10
    6648:	81 85       	ldd	r24, Z+9	; 0x09
    664a:	81 11       	cpse	r24, r1
    664c:	29 c0       	rjmp	.+82     	; 0x66a0 <StarSoursePump+0xd8>
		{
			START_SOURCE_PUMP_1;
    664e:	e2 e0       	ldi	r30, 0x02	; 2
    6650:	f1 e0       	ldi	r31, 0x01	; 1
    6652:	80 81       	ld	r24, Z
    6654:	82 60       	ori	r24, 0x02	; 2
    6656:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StartSourcePump_1\r\n");
    6658:	8b ea       	ldi	r24, 0xAB	; 171
    665a:	95 e0       	ldi	r25, 0x05	; 5
    665c:	9f 93       	push	r25
    665e:	8f 93       	push	r24
    6660:	82 e3       	ldi	r24, 0x32	; 50
    6662:	98 e0       	ldi	r25, 0x08	; 8
    6664:	9f 93       	push	r25
    6666:	8f 93       	push	r24
    6668:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->srcPOn=1;
    666c:	81 e0       	ldi	r24, 0x01	; 1
    666e:	f5 01       	movw	r30, r10
    6670:	87 87       	std	Z+15, r24	; 0x0f
			timeStartSrcP_1=time(&current_time);
    6672:	8f e8       	ldi	r24, 0x8F	; 143
    6674:	99 e0       	ldi	r25, 0x09	; 9
    6676:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    667a:	60 93 70 0a 	sts	0x0A70, r22	; 0x800a70 <timeStartSrcP_1>
    667e:	70 93 71 0a 	sts	0x0A71, r23	; 0x800a71 <timeStartSrcP_1+0x1>
    6682:	80 93 72 0a 	sts	0x0A72, r24	; 0x800a72 <timeStartSrcP_1+0x2>
    6686:	90 93 73 0a 	sts	0x0A73, r25	; 0x800a73 <timeStartSrcP_1+0x3>
			EEpromData.number_turnon_source_1+=1;
    668a:	e4 ed       	ldi	r30, 0xD4	; 212
    668c:	f9 e0       	ldi	r31, 0x09	; 9
    668e:	80 81       	ld	r24, Z
    6690:	91 81       	ldd	r25, Z+1	; 0x01
    6692:	01 96       	adiw	r24, 0x01	; 1
    6694:	91 83       	std	Z+1, r25	; 0x01
    6696:	80 83       	st	Z, r24
    6698:	0f 90       	pop	r0
    669a:	0f 90       	pop	r0
    669c:	0f 90       	pop	r0
    669e:	0f 90       	pop	r0
			//xSerialxPrintf(&xSerial3Port,"Number_turnon_source_=%d\r\n",EEpromData.number_turnon_source_1);
			
						
		}
		xTimerChangePeriod( xStartRevValve_1,period, 100 );
    66a0:	0f 2e       	mov	r0, r31
    66a2:	f4 e6       	ldi	r31, 0x64	; 100
    66a4:	cf 2e       	mov	r12, r31
    66a6:	d1 2c       	mov	r13, r1
    66a8:	e1 2c       	mov	r14, r1
    66aa:	f1 2c       	mov	r15, r1
    66ac:	f0 2d       	mov	r31, r0
    66ae:	00 e0       	ldi	r16, 0x00	; 0
    66b0:	10 e0       	ldi	r17, 0x00	; 0
    66b2:	a3 01       	movw	r20, r6
    66b4:	92 01       	movw	r18, r4
    66b6:	64 e0       	ldi	r22, 0x04	; 4
    66b8:	80 91 3b 0b 	lds	r24, 0x0B3B	; 0x800b3b <xStartRevValve_1>
    66bc:	90 91 3c 0b 	lds	r25, 0x0B3C	; 0x800b3c <xStartRevValve_1+0x1>
    66c0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if(comp->Index == 2)
    66c4:	f5 01       	movw	r30, r10
    66c6:	ee 58       	subi	r30, 0x8E	; 142
    66c8:	ff 4f       	sbci	r31, 0xFF	; 255
    66ca:	80 81       	ld	r24, Z
    66cc:	91 81       	ldd	r25, Z+1	; 0x01
    66ce:	02 97       	sbiw	r24, 0x02	; 2
    66d0:	09 f0       	breq	.+2      	; 0x66d4 <StarSoursePump+0x10c>
    66d2:	4a c0       	rjmp	.+148    	; 0x6768 <StarSoursePump+0x1a0>
	{
		Comp_2.error=0;
    66d4:	10 92 ef 0a 	sts	0x0AEF, r1	; 0x800aef <Comp_2+0x71>
    66d8:	10 92 ee 0a 	sts	0x0AEE, r1	; 0x800aee <Comp_2+0x70>
		Comp_2.switchToMode=true;
    66dc:	81 e0       	ldi	r24, 0x01	; 1
    66de:	80 93 7e 0a 	sts	0x0A7E, r24	; 0x800a7e <Comp_2>
		
		xSerialxPrintf(&xSerial3Port,"StartSourcePump_2\r\n");
    66e2:	8f eb       	ldi	r24, 0xBF	; 191
    66e4:	95 e0       	ldi	r25, 0x05	; 5
    66e6:	9f 93       	push	r25
    66e8:	8f 93       	push	r24
    66ea:	82 e3       	ldi	r24, 0x32	; 50
    66ec:	98 e0       	ldi	r25, 0x08	; 8
    66ee:	9f 93       	push	r25
    66f0:	8f 93       	push	r24
    66f2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		
		if(PIN_SOURCE_PUMP_2 == 0 && !comp->def)
    66f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    66fa:	0f 90       	pop	r0
    66fc:	0f 90       	pop	r0
    66fe:	0f 90       	pop	r0
    6700:	0f 90       	pop	r0
    6702:	82 fd       	sbrc	r24, 2
    6704:	1f c0       	rjmp	.+62     	; 0x6744 <StarSoursePump+0x17c>
    6706:	f5 01       	movw	r30, r10
    6708:	81 85       	ldd	r24, Z+9	; 0x09
    670a:	81 11       	cpse	r24, r1
    670c:	1b c0       	rjmp	.+54     	; 0x6744 <StarSoursePump+0x17c>
		{
			START_SOURCE_PUMP_2;						
    670e:	e2 e0       	ldi	r30, 0x02	; 2
    6710:	f1 e0       	ldi	r31, 0x01	; 1
    6712:	80 81       	ld	r24, Z
    6714:	84 60       	ori	r24, 0x04	; 4
    6716:	80 83       	st	Z, r24
			comp->srcPOn=1;
    6718:	81 e0       	ldi	r24, 0x01	; 1
    671a:	f5 01       	movw	r30, r10
    671c:	87 87       	std	Z+15, r24	; 0x0f
			timeStartSrcP_2=time(&current_time);
    671e:	8f e8       	ldi	r24, 0x8F	; 143
    6720:	99 e0       	ldi	r25, 0x09	; 9
    6722:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6726:	60 93 2f 0b 	sts	0x0B2F, r22	; 0x800b2f <timeStartSrcP_2>
    672a:	70 93 30 0b 	sts	0x0B30, r23	; 0x800b30 <timeStartSrcP_2+0x1>
    672e:	80 93 31 0b 	sts	0x0B31, r24	; 0x800b31 <timeStartSrcP_2+0x2>
    6732:	90 93 32 0b 	sts	0x0B32, r25	; 0x800b32 <timeStartSrcP_2+0x3>
			EEpromData.number_turnon_source_2+=1;
    6736:	e8 ee       	ldi	r30, 0xE8	; 232
    6738:	f9 e0       	ldi	r31, 0x09	; 9
    673a:	80 81       	ld	r24, Z
    673c:	91 81       	ldd	r25, Z+1	; 0x01
    673e:	01 96       	adiw	r24, 0x01	; 1
    6740:	91 83       	std	Z+1, r25	; 0x01
    6742:	80 83       	st	Z, r24
						
		}
		xTimerChangePeriod( xStartRevValve_2,period, 100 );
    6744:	0f 2e       	mov	r0, r31
    6746:	f4 e6       	ldi	r31, 0x64	; 100
    6748:	cf 2e       	mov	r12, r31
    674a:	d1 2c       	mov	r13, r1
    674c:	e1 2c       	mov	r14, r1
    674e:	f1 2c       	mov	r15, r1
    6750:	f0 2d       	mov	r31, r0
    6752:	00 e0       	ldi	r16, 0x00	; 0
    6754:	10 e0       	ldi	r17, 0x00	; 0
    6756:	a3 01       	movw	r20, r6
    6758:	92 01       	movw	r18, r4
    675a:	64 e0       	ldi	r22, 0x04	; 4
    675c:	80 91 fc 0a 	lds	r24, 0x0AFC	; 0x800afc <xStartRevValve_2>
    6760:	90 91 fd 0a 	lds	r25, 0x0AFD	; 0x800afd <xStartRevValve_2+0x1>
    6764:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
}
    6768:	df 91       	pop	r29
    676a:	cf 91       	pop	r28
    676c:	1f 91       	pop	r17
    676e:	0f 91       	pop	r16
    6770:	ff 90       	pop	r15
    6772:	ef 90       	pop	r14
    6774:	df 90       	pop	r13
    6776:	cf 90       	pop	r12
    6778:	bf 90       	pop	r11
    677a:	af 90       	pop	r10
    677c:	7f 90       	pop	r7
    677e:	6f 90       	pop	r6
    6780:	5f 90       	pop	r5
    6782:	4f 90       	pop	r4
    6784:	08 95       	ret

00006786 <selmode>:
   
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t selmode(xEEdata* eeData)
{
    6786:	fc 01       	movw	r30, r24

	if(eeData->heatWater && !eeData->heat && !eeData->cool)
    6788:	85 a1       	ldd	r24, Z+37	; 0x25
    678a:	88 23       	and	r24, r24
    678c:	39 f0       	breq	.+14     	; 0x679c <selmode+0x16>
    678e:	86 a1       	ldd	r24, Z+38	; 0x26
    6790:	81 11       	cpse	r24, r1
    6792:	1a c0       	rjmp	.+52     	; 0x67c8 <selmode+0x42>
    6794:	97 a1       	ldd	r25, Z+39	; 0x27
    6796:	91 11       	cpse	r25, r1
    6798:	1c c0       	rjmp	.+56     	; 0x67d2 <selmode+0x4c>
    679a:	0d c0       	rjmp	.+26     	; 0x67b6 <selmode+0x30>
	{
		return DHW;
		
	}
	if(!eeData->heatWater && eeData->heat && !eeData->cool)
    679c:	96 a1       	ldd	r25, Z+38	; 0x26
    679e:	99 23       	and	r25, r25
    67a0:	71 f0       	breq	.+28     	; 0x67be <selmode+0x38>
    67a2:	97 a1       	ldd	r25, Z+39	; 0x27
    67a4:	91 11       	cpse	r25, r1
    67a6:	17 c0       	rjmp	.+46     	; 0x67d6 <selmode+0x50>
	{
		return HEAT;
    67a8:	82 e0       	ldi	r24, 0x02	; 2
    67aa:	08 95       	ret
	}
	if(eeData->heatWater && eeData->heat && !eeData->cool)
	{
		return HEAT_DHW;
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
    67ac:	87 a1       	ldd	r24, Z+39	; 0x27
    67ae:	88 23       	and	r24, r24
    67b0:	91 f0       	breq	.+36     	; 0x67d6 <selmode+0x50>
	{
		return COOL_DHW;
    67b2:	85 e0       	ldi	r24, 0x05	; 5
    67b4:	08 95       	ret
uint8_t selmode(xEEdata* eeData)
{

	if(eeData->heatWater && !eeData->heat && !eeData->cool)
	{
		return DHW;
    67b6:	81 e0       	ldi	r24, 0x01	; 1
    67b8:	08 95       	ret
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
	{
		return COOL_DHW;
	}
	else return OFF;
    67ba:	80 e0       	ldi	r24, 0x00	; 0
    67bc:	08 95       	ret
	}
	if(!eeData->heatWater && eeData->heat && !eeData->cool)
	{
		return HEAT;
	}
	if(!eeData->heatWater && !eeData->heat && eeData->cool)
    67be:	87 a1       	ldd	r24, Z+39	; 0x27
    67c0:	88 23       	and	r24, r24
    67c2:	49 f0       	breq	.+18     	; 0x67d6 <selmode+0x50>
	{
		return COOL;
    67c4:	83 e0       	ldi	r24, 0x03	; 3
    67c6:	08 95       	ret
	}
	if(eeData->heatWater && eeData->heat && !eeData->cool)
    67c8:	87 a1       	ldd	r24, Z+39	; 0x27
    67ca:	81 11       	cpse	r24, r1
    67cc:	f6 cf       	rjmp	.-20     	; 0x67ba <selmode+0x34>
	{
		return HEAT_DHW;
    67ce:	84 e0       	ldi	r24, 0x04	; 4
    67d0:	08 95       	ret
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
    67d2:	88 23       	and	r24, r24
    67d4:	59 f3       	breq	.-42     	; 0x67ac <selmode+0x26>
	{
		return COOL_DHW;
	}
	else return OFF;

}
    67d6:	08 95       	ret

000067d8 <stop_timers>:
			}
		}break;
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void stop_timers( xCompressor *comp){
    67d8:	cf 92       	push	r12
    67da:	df 92       	push	r13
    67dc:	ef 92       	push	r14
    67de:	ff 92       	push	r15
    67e0:	0f 93       	push	r16
    67e2:	1f 93       	push	r17
	if(comp->Index==1)
    67e4:	8e 58       	subi	r24, 0x8E	; 142
    67e6:	9f 4f       	sbci	r25, 0xFF	; 255
    67e8:	fc 01       	movw	r30, r24
    67ea:	80 81       	ld	r24, Z
    67ec:	91 81       	ldd	r25, Z+1	; 0x01
    67ee:	81 30       	cpi	r24, 0x01	; 1
    67f0:	91 05       	cpc	r25, r1
    67f2:	09 f0       	breq	.+2      	; 0x67f6 <stop_timers+0x1e>
    67f4:	3a c1       	rjmp	.+628    	; 0x6a6a <stop_timers+0x292>
	{
		if( xTimerIsTimerActive( xStartCompressor_1 ) != pdFALSE )      xTimerStop(xStartCompressor_1,1);
    67f6:	80 91 12 0b 	lds	r24, 0x0B12	; 0x800b12 <xStartCompressor_1>
    67fa:	90 91 13 0b 	lds	r25, 0x0B13	; 0x800b13 <xStartCompressor_1+0x1>
    67fe:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6802:	88 23       	and	r24, r24
    6804:	81 f0       	breq	.+32     	; 0x6826 <stop_timers+0x4e>
    6806:	c1 2c       	mov	r12, r1
    6808:	d1 2c       	mov	r13, r1
    680a:	76 01       	movw	r14, r12
    680c:	c3 94       	inc	r12
    680e:	00 e0       	ldi	r16, 0x00	; 0
    6810:	10 e0       	ldi	r17, 0x00	; 0
    6812:	20 e0       	ldi	r18, 0x00	; 0
    6814:	30 e0       	ldi	r19, 0x00	; 0
    6816:	a9 01       	movw	r20, r18
    6818:	63 e0       	ldi	r22, 0x03	; 3
    681a:	80 91 12 0b 	lds	r24, 0x0B12	; 0x800b12 <xStartCompressor_1>
    681e:	90 91 13 0b 	lds	r25, 0x0B13	; 0x800b13 <xStartCompressor_1+0x1>
    6822:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartHeatPump_1 ) != pdFALSE )        xTimerStop(xStartHeatPump_1,1);
    6826:	80 91 10 0b 	lds	r24, 0x0B10	; 0x800b10 <xStartHeatPump_1>
    682a:	90 91 11 0b 	lds	r25, 0x0B11	; 0x800b11 <xStartHeatPump_1+0x1>
    682e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6832:	88 23       	and	r24, r24
    6834:	81 f0       	breq	.+32     	; 0x6856 <stop_timers+0x7e>
    6836:	c1 2c       	mov	r12, r1
    6838:	d1 2c       	mov	r13, r1
    683a:	76 01       	movw	r14, r12
    683c:	c3 94       	inc	r12
    683e:	00 e0       	ldi	r16, 0x00	; 0
    6840:	10 e0       	ldi	r17, 0x00	; 0
    6842:	20 e0       	ldi	r18, 0x00	; 0
    6844:	30 e0       	ldi	r19, 0x00	; 0
    6846:	a9 01       	movw	r20, r18
    6848:	63 e0       	ldi	r22, 0x03	; 3
    684a:	80 91 10 0b 	lds	r24, 0x0B10	; 0x800b10 <xStartHeatPump_1>
    684e:	90 91 11 0b 	lds	r25, 0x0B11	; 0x800b11 <xStartHeatPump_1+0x1>
    6852:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartThreeWay ) != pdFALSE )			xTimerStop(xStartThreeWay,1);
    6856:	80 91 6c 0a 	lds	r24, 0x0A6C	; 0x800a6c <xStartThreeWay>
    685a:	90 91 6d 0a 	lds	r25, 0x0A6D	; 0x800a6d <xStartThreeWay+0x1>
    685e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6862:	88 23       	and	r24, r24
    6864:	81 f0       	breq	.+32     	; 0x6886 <stop_timers+0xae>
    6866:	c1 2c       	mov	r12, r1
    6868:	d1 2c       	mov	r13, r1
    686a:	76 01       	movw	r14, r12
    686c:	c3 94       	inc	r12
    686e:	00 e0       	ldi	r16, 0x00	; 0
    6870:	10 e0       	ldi	r17, 0x00	; 0
    6872:	20 e0       	ldi	r18, 0x00	; 0
    6874:	30 e0       	ldi	r19, 0x00	; 0
    6876:	a9 01       	movw	r20, r18
    6878:	63 e0       	ldi	r22, 0x03	; 3
    687a:	80 91 6c 0a 	lds	r24, 0x0A6C	; 0x800a6c <xStartThreeWay>
    687e:	90 91 6d 0a 	lds	r25, 0x0A6D	; 0x800a6d <xStartThreeWay+0x1>
    6882:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartRevValve_1 ) != pdFALSE )		xTimerStop(xStartRevValve_1,1);
    6886:	80 91 3b 0b 	lds	r24, 0x0B3B	; 0x800b3b <xStartRevValve_1>
    688a:	90 91 3c 0b 	lds	r25, 0x0B3C	; 0x800b3c <xStartRevValve_1+0x1>
    688e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6892:	88 23       	and	r24, r24
    6894:	81 f0       	breq	.+32     	; 0x68b6 <stop_timers+0xde>
    6896:	c1 2c       	mov	r12, r1
    6898:	d1 2c       	mov	r13, r1
    689a:	76 01       	movw	r14, r12
    689c:	c3 94       	inc	r12
    689e:	00 e0       	ldi	r16, 0x00	; 0
    68a0:	10 e0       	ldi	r17, 0x00	; 0
    68a2:	20 e0       	ldi	r18, 0x00	; 0
    68a4:	30 e0       	ldi	r19, 0x00	; 0
    68a6:	a9 01       	movw	r20, r18
    68a8:	63 e0       	ldi	r22, 0x03	; 3
    68aa:	80 91 3b 0b 	lds	r24, 0x0B3B	; 0x800b3b <xStartRevValve_1>
    68ae:	90 91 3c 0b 	lds	r25, 0x0B3C	; 0x800b3c <xStartRevValve_1+0x1>
    68b2:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevOne_1_time ) != pdFALSE )    xTimerStop(xSwitchRevOne_1_time,1);
    68b6:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <xSwitchRevOne_1_time>
    68ba:	90 91 88 09 	lds	r25, 0x0988	; 0x800988 <xSwitchRevOne_1_time+0x1>
    68be:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    68c2:	88 23       	and	r24, r24
    68c4:	81 f0       	breq	.+32     	; 0x68e6 <stop_timers+0x10e>
    68c6:	c1 2c       	mov	r12, r1
    68c8:	d1 2c       	mov	r13, r1
    68ca:	76 01       	movw	r14, r12
    68cc:	c3 94       	inc	r12
    68ce:	00 e0       	ldi	r16, 0x00	; 0
    68d0:	10 e0       	ldi	r17, 0x00	; 0
    68d2:	20 e0       	ldi	r18, 0x00	; 0
    68d4:	30 e0       	ldi	r19, 0x00	; 0
    68d6:	a9 01       	movw	r20, r18
    68d8:	63 e0       	ldi	r22, 0x03	; 3
    68da:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <xSwitchRevOne_1_time>
    68de:	90 91 88 09 	lds	r25, 0x0988	; 0x800988 <xSwitchRevOne_1_time+0x1>
    68e2:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevTwo_1_time ) != pdFALSE )	xTimerStop(xSwitchRevTwo_1_time,1);
    68e6:	80 91 0e 0b 	lds	r24, 0x0B0E	; 0x800b0e <xSwitchRevTwo_1_time>
    68ea:	90 91 0f 0b 	lds	r25, 0x0B0F	; 0x800b0f <xSwitchRevTwo_1_time+0x1>
    68ee:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    68f2:	88 23       	and	r24, r24
    68f4:	81 f0       	breq	.+32     	; 0x6916 <stop_timers+0x13e>
    68f6:	c1 2c       	mov	r12, r1
    68f8:	d1 2c       	mov	r13, r1
    68fa:	76 01       	movw	r14, r12
    68fc:	c3 94       	inc	r12
    68fe:	00 e0       	ldi	r16, 0x00	; 0
    6900:	10 e0       	ldi	r17, 0x00	; 0
    6902:	20 e0       	ldi	r18, 0x00	; 0
    6904:	30 e0       	ldi	r19, 0x00	; 0
    6906:	a9 01       	movw	r20, r18
    6908:	63 e0       	ldi	r22, 0x03	; 3
    690a:	80 91 0e 0b 	lds	r24, 0x0B0E	; 0x800b0e <xSwitchRevTwo_1_time>
    690e:	90 91 0f 0b 	lds	r25, 0x0B0F	; 0x800b0f <xSwitchRevTwo_1_time+0x1>
    6912:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopHeatPump_1 ) != pdFALSE )			xTimerStop(xStopHeatPump_1,1);
    6916:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <xStopHeatPump_1>
    691a:	90 91 82 09 	lds	r25, 0x0982	; 0x800982 <xStopHeatPump_1+0x1>
    691e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6922:	88 23       	and	r24, r24
    6924:	81 f0       	breq	.+32     	; 0x6946 <stop_timers+0x16e>
    6926:	c1 2c       	mov	r12, r1
    6928:	d1 2c       	mov	r13, r1
    692a:	76 01       	movw	r14, r12
    692c:	c3 94       	inc	r12
    692e:	00 e0       	ldi	r16, 0x00	; 0
    6930:	10 e0       	ldi	r17, 0x00	; 0
    6932:	20 e0       	ldi	r18, 0x00	; 0
    6934:	30 e0       	ldi	r19, 0x00	; 0
    6936:	a9 01       	movw	r20, r18
    6938:	63 e0       	ldi	r22, 0x03	; 3
    693a:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <xStopHeatPump_1>
    693e:	90 91 82 09 	lds	r25, 0x0982	; 0x800982 <xStopHeatPump_1+0x1>
    6942:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopThreeWay ) != pdFALSE )			xTimerStop(xStopThreeWay,1);
    6946:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <xStopThreeWay>
    694a:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <xStopThreeWay+0x1>
    694e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6952:	88 23       	and	r24, r24
    6954:	81 f0       	breq	.+32     	; 0x6976 <stop_timers+0x19e>
    6956:	c1 2c       	mov	r12, r1
    6958:	d1 2c       	mov	r13, r1
    695a:	76 01       	movw	r14, r12
    695c:	c3 94       	inc	r12
    695e:	00 e0       	ldi	r16, 0x00	; 0
    6960:	10 e0       	ldi	r17, 0x00	; 0
    6962:	20 e0       	ldi	r18, 0x00	; 0
    6964:	30 e0       	ldi	r19, 0x00	; 0
    6966:	a9 01       	movw	r20, r18
    6968:	63 e0       	ldi	r22, 0x03	; 3
    696a:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <xStopThreeWay>
    696e:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <xStopThreeWay+0x1>
    6972:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopRevValve_1 ) != pdFALSE )			xTimerStop(xStopRevValve_1,1);
    6976:	80 91 04 0b 	lds	r24, 0x0B04	; 0x800b04 <xStopRevValve_1>
    697a:	90 91 05 0b 	lds	r25, 0x0B05	; 0x800b05 <xStopRevValve_1+0x1>
    697e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6982:	88 23       	and	r24, r24
    6984:	81 f0       	breq	.+32     	; 0x69a6 <stop_timers+0x1ce>
    6986:	c1 2c       	mov	r12, r1
    6988:	d1 2c       	mov	r13, r1
    698a:	76 01       	movw	r14, r12
    698c:	c3 94       	inc	r12
    698e:	00 e0       	ldi	r16, 0x00	; 0
    6990:	10 e0       	ldi	r17, 0x00	; 0
    6992:	20 e0       	ldi	r18, 0x00	; 0
    6994:	30 e0       	ldi	r19, 0x00	; 0
    6996:	a9 01       	movw	r20, r18
    6998:	63 e0       	ldi	r22, 0x03	; 3
    699a:	80 91 04 0b 	lds	r24, 0x0B04	; 0x800b04 <xStopRevValve_1>
    699e:	90 91 05 0b 	lds	r25, 0x0B05	; 0x800b05 <xStopRevValve_1+0x1>
    69a2:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopSource_1 ) != pdFALSE )			xTimerStop(xStopSource_1,1);
    69a6:	80 91 8b 09 	lds	r24, 0x098B	; 0x80098b <xStopSource_1>
    69aa:	90 91 8c 09 	lds	r25, 0x098C	; 0x80098c <xStopSource_1+0x1>
    69ae:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    69b2:	88 23       	and	r24, r24
    69b4:	81 f0       	breq	.+32     	; 0x69d6 <stop_timers+0x1fe>
    69b6:	c1 2c       	mov	r12, r1
    69b8:	d1 2c       	mov	r13, r1
    69ba:	76 01       	movw	r14, r12
    69bc:	c3 94       	inc	r12
    69be:	00 e0       	ldi	r16, 0x00	; 0
    69c0:	10 e0       	ldi	r17, 0x00	; 0
    69c2:	20 e0       	ldi	r18, 0x00	; 0
    69c4:	30 e0       	ldi	r19, 0x00	; 0
    69c6:	a9 01       	movw	r20, r18
    69c8:	63 e0       	ldi	r22, 0x03	; 3
    69ca:	80 91 8b 09 	lds	r24, 0x098B	; 0x80098b <xStopSource_1>
    69ce:	90 91 8c 09 	lds	r25, 0x098C	; 0x80098c <xStopSource_1+0x1>
    69d2:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckErrors_1 ) != pdFALSE )    xTimerStop(xTStartCheckErrors_1,1);
    69d6:	80 91 33 0b 	lds	r24, 0x0B33	; 0x800b33 <xTStartCheckErrors_1>
    69da:	90 91 34 0b 	lds	r25, 0x0B34	; 0x800b34 <xTStartCheckErrors_1+0x1>
    69de:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    69e2:	88 23       	and	r24, r24
    69e4:	81 f0       	breq	.+32     	; 0x6a06 <stop_timers+0x22e>
    69e6:	c1 2c       	mov	r12, r1
    69e8:	d1 2c       	mov	r13, r1
    69ea:	76 01       	movw	r14, r12
    69ec:	c3 94       	inc	r12
    69ee:	00 e0       	ldi	r16, 0x00	; 0
    69f0:	10 e0       	ldi	r17, 0x00	; 0
    69f2:	20 e0       	ldi	r18, 0x00	; 0
    69f4:	30 e0       	ldi	r19, 0x00	; 0
    69f6:	a9 01       	movw	r20, r18
    69f8:	63 e0       	ldi	r22, 0x03	; 3
    69fa:	80 91 33 0b 	lds	r24, 0x0B33	; 0x800b33 <xTStartCheckErrors_1>
    69fe:	90 91 34 0b 	lds	r25, 0x0B34	; 0x800b34 <xTStartCheckErrors_1+0x1>
    6a02:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckTrv_1 ) != pdFALSE )       xTimerStop(xTStartCheckTrv_1,1);
    6a06:	80 91 8d 09 	lds	r24, 0x098D	; 0x80098d <xTStartCheckTrv_1>
    6a0a:	90 91 8e 09 	lds	r25, 0x098E	; 0x80098e <xTStartCheckTrv_1+0x1>
    6a0e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6a12:	88 23       	and	r24, r24
    6a14:	81 f0       	breq	.+32     	; 0x6a36 <stop_timers+0x25e>
    6a16:	c1 2c       	mov	r12, r1
    6a18:	d1 2c       	mov	r13, r1
    6a1a:	76 01       	movw	r14, r12
    6a1c:	c3 94       	inc	r12
    6a1e:	00 e0       	ldi	r16, 0x00	; 0
    6a20:	10 e0       	ldi	r17, 0x00	; 0
    6a22:	20 e0       	ldi	r18, 0x00	; 0
    6a24:	30 e0       	ldi	r19, 0x00	; 0
    6a26:	a9 01       	movw	r20, r18
    6a28:	63 e0       	ldi	r22, 0x03	; 3
    6a2a:	80 91 8d 09 	lds	r24, 0x098D	; 0x80098d <xTStartCheckTrv_1>
    6a2e:	90 91 8e 09 	lds	r25, 0x098E	; 0x80098e <xTStartCheckTrv_1+0x1>
    6a32:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xComutateTrv_1 ) != pdFALSE )          xTimerStop(xComutateTrv_1,1);
    6a36:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <xComutateTrv_1>
    6a3a:	90 91 7a 09 	lds	r25, 0x097A	; 0x80097a <xComutateTrv_1+0x1>
    6a3e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6a42:	88 23       	and	r24, r24
    6a44:	09 f4       	brne	.+2      	; 0x6a48 <stop_timers+0x270>
    6a46:	1c c1       	rjmp	.+568    	; 0x6c80 <stop_timers+0x4a8>
    6a48:	c1 2c       	mov	r12, r1
    6a4a:	d1 2c       	mov	r13, r1
    6a4c:	76 01       	movw	r14, r12
    6a4e:	c3 94       	inc	r12
    6a50:	00 e0       	ldi	r16, 0x00	; 0
    6a52:	10 e0       	ldi	r17, 0x00	; 0
    6a54:	20 e0       	ldi	r18, 0x00	; 0
    6a56:	30 e0       	ldi	r19, 0x00	; 0
    6a58:	a9 01       	movw	r20, r18
    6a5a:	63 e0       	ldi	r22, 0x03	; 3
    6a5c:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <xComutateTrv_1>
    6a60:	90 91 7a 09 	lds	r25, 0x097A	; 0x80097a <xComutateTrv_1+0x1>
    6a64:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    6a68:	0b c1       	rjmp	.+534    	; 0x6c80 <stop_timers+0x4a8>
	}
	else if (comp->Index==2)
    6a6a:	02 97       	sbiw	r24, 0x02	; 2
    6a6c:	09 f0       	breq	.+2      	; 0x6a70 <stop_timers+0x298>
    6a6e:	08 c1       	rjmp	.+528    	; 0x6c80 <stop_timers+0x4a8>
	{
		if( xTimerIsTimerActive( xStartCompressor_2 ) != pdFALSE )      xTimerStop(xStartCompressor_2,1);
    6a70:	80 91 24 0b 	lds	r24, 0x0B24	; 0x800b24 <xStartCompressor_2>
    6a74:	90 91 25 0b 	lds	r25, 0x0B25	; 0x800b25 <xStartCompressor_2+0x1>
    6a78:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6a7c:	88 23       	and	r24, r24
    6a7e:	81 f0       	breq	.+32     	; 0x6aa0 <stop_timers+0x2c8>
    6a80:	c1 2c       	mov	r12, r1
    6a82:	d1 2c       	mov	r13, r1
    6a84:	76 01       	movw	r14, r12
    6a86:	c3 94       	inc	r12
    6a88:	00 e0       	ldi	r16, 0x00	; 0
    6a8a:	10 e0       	ldi	r17, 0x00	; 0
    6a8c:	20 e0       	ldi	r18, 0x00	; 0
    6a8e:	30 e0       	ldi	r19, 0x00	; 0
    6a90:	a9 01       	movw	r20, r18
    6a92:	63 e0       	ldi	r22, 0x03	; 3
    6a94:	80 91 24 0b 	lds	r24, 0x0B24	; 0x800b24 <xStartCompressor_2>
    6a98:	90 91 25 0b 	lds	r25, 0x0B25	; 0x800b25 <xStartCompressor_2+0x1>
    6a9c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartHeatPump_2 ) != pdFALSE )        xTimerStop(xStartHeatPump_2,1);
    6aa0:	80 91 6e 0a 	lds	r24, 0x0A6E	; 0x800a6e <xStartHeatPump_2>
    6aa4:	90 91 6f 0a 	lds	r25, 0x0A6F	; 0x800a6f <xStartHeatPump_2+0x1>
    6aa8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6aac:	88 23       	and	r24, r24
    6aae:	81 f0       	breq	.+32     	; 0x6ad0 <stop_timers+0x2f8>
    6ab0:	c1 2c       	mov	r12, r1
    6ab2:	d1 2c       	mov	r13, r1
    6ab4:	76 01       	movw	r14, r12
    6ab6:	c3 94       	inc	r12
    6ab8:	00 e0       	ldi	r16, 0x00	; 0
    6aba:	10 e0       	ldi	r17, 0x00	; 0
    6abc:	20 e0       	ldi	r18, 0x00	; 0
    6abe:	30 e0       	ldi	r19, 0x00	; 0
    6ac0:	a9 01       	movw	r20, r18
    6ac2:	63 e0       	ldi	r22, 0x03	; 3
    6ac4:	80 91 6e 0a 	lds	r24, 0x0A6E	; 0x800a6e <xStartHeatPump_2>
    6ac8:	90 91 6f 0a 	lds	r25, 0x0A6F	; 0x800a6f <xStartHeatPump_2+0x1>
    6acc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartRevValve_2 ) != pdFALSE )		xTimerStop(xStartRevValve_2,1);
    6ad0:	80 91 fc 0a 	lds	r24, 0x0AFC	; 0x800afc <xStartRevValve_2>
    6ad4:	90 91 fd 0a 	lds	r25, 0x0AFD	; 0x800afd <xStartRevValve_2+0x1>
    6ad8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6adc:	88 23       	and	r24, r24
    6ade:	81 f0       	breq	.+32     	; 0x6b00 <stop_timers+0x328>
    6ae0:	c1 2c       	mov	r12, r1
    6ae2:	d1 2c       	mov	r13, r1
    6ae4:	76 01       	movw	r14, r12
    6ae6:	c3 94       	inc	r12
    6ae8:	00 e0       	ldi	r16, 0x00	; 0
    6aea:	10 e0       	ldi	r17, 0x00	; 0
    6aec:	20 e0       	ldi	r18, 0x00	; 0
    6aee:	30 e0       	ldi	r19, 0x00	; 0
    6af0:	a9 01       	movw	r20, r18
    6af2:	63 e0       	ldi	r22, 0x03	; 3
    6af4:	80 91 fc 0a 	lds	r24, 0x0AFC	; 0x800afc <xStartRevValve_2>
    6af8:	90 91 fd 0a 	lds	r25, 0x0AFD	; 0x800afd <xStartRevValve_2+0x1>
    6afc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevOne_2_time ) != pdFALSE )    xTimerStop(xSwitchRevOne_2_time,1);
    6b00:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <xSwitchRevOne_2_time>
    6b04:	90 91 45 0b 	lds	r25, 0x0B45	; 0x800b45 <xSwitchRevOne_2_time+0x1>
    6b08:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6b0c:	88 23       	and	r24, r24
    6b0e:	81 f0       	breq	.+32     	; 0x6b30 <stop_timers+0x358>
    6b10:	c1 2c       	mov	r12, r1
    6b12:	d1 2c       	mov	r13, r1
    6b14:	76 01       	movw	r14, r12
    6b16:	c3 94       	inc	r12
    6b18:	00 e0       	ldi	r16, 0x00	; 0
    6b1a:	10 e0       	ldi	r17, 0x00	; 0
    6b1c:	20 e0       	ldi	r18, 0x00	; 0
    6b1e:	30 e0       	ldi	r19, 0x00	; 0
    6b20:	a9 01       	movw	r20, r18
    6b22:	63 e0       	ldi	r22, 0x03	; 3
    6b24:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <xSwitchRevOne_2_time>
    6b28:	90 91 45 0b 	lds	r25, 0x0B45	; 0x800b45 <xSwitchRevOne_2_time+0x1>
    6b2c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevTwo_2_time ) != pdFALSE )	xTimerStop(xSwitchRevTwo_1_time,1);
    6b30:	80 91 29 0b 	lds	r24, 0x0B29	; 0x800b29 <xSwitchRevTwo_2_time>
    6b34:	90 91 2a 0b 	lds	r25, 0x0B2A	; 0x800b2a <xSwitchRevTwo_2_time+0x1>
    6b38:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6b3c:	88 23       	and	r24, r24
    6b3e:	81 f0       	breq	.+32     	; 0x6b60 <stop_timers+0x388>
    6b40:	c1 2c       	mov	r12, r1
    6b42:	d1 2c       	mov	r13, r1
    6b44:	76 01       	movw	r14, r12
    6b46:	c3 94       	inc	r12
    6b48:	00 e0       	ldi	r16, 0x00	; 0
    6b4a:	10 e0       	ldi	r17, 0x00	; 0
    6b4c:	20 e0       	ldi	r18, 0x00	; 0
    6b4e:	30 e0       	ldi	r19, 0x00	; 0
    6b50:	a9 01       	movw	r20, r18
    6b52:	63 e0       	ldi	r22, 0x03	; 3
    6b54:	80 91 0e 0b 	lds	r24, 0x0B0E	; 0x800b0e <xSwitchRevTwo_1_time>
    6b58:	90 91 0f 0b 	lds	r25, 0x0B0F	; 0x800b0f <xSwitchRevTwo_1_time+0x1>
    6b5c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopHeatPump_2 ) != pdFALSE )			xTimerStop(xStopHeatPump_2,1);
    6b60:	80 91 02 0b 	lds	r24, 0x0B02	; 0x800b02 <xStopHeatPump_2>
    6b64:	90 91 03 0b 	lds	r25, 0x0B03	; 0x800b03 <xStopHeatPump_2+0x1>
    6b68:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6b6c:	88 23       	and	r24, r24
    6b6e:	81 f0       	breq	.+32     	; 0x6b90 <stop_timers+0x3b8>
    6b70:	c1 2c       	mov	r12, r1
    6b72:	d1 2c       	mov	r13, r1
    6b74:	76 01       	movw	r14, r12
    6b76:	c3 94       	inc	r12
    6b78:	00 e0       	ldi	r16, 0x00	; 0
    6b7a:	10 e0       	ldi	r17, 0x00	; 0
    6b7c:	20 e0       	ldi	r18, 0x00	; 0
    6b7e:	30 e0       	ldi	r19, 0x00	; 0
    6b80:	a9 01       	movw	r20, r18
    6b82:	63 e0       	ldi	r22, 0x03	; 3
    6b84:	80 91 02 0b 	lds	r24, 0x0B02	; 0x800b02 <xStopHeatPump_2>
    6b88:	90 91 03 0b 	lds	r25, 0x0B03	; 0x800b03 <xStopHeatPump_2+0x1>
    6b8c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopRevValve_2 ) != pdFALSE )			xTimerStop(xStopRevValve_2,1);
    6b90:	80 91 89 09 	lds	r24, 0x0989	; 0x800989 <xStopRevValve_2>
    6b94:	90 91 8a 09 	lds	r25, 0x098A	; 0x80098a <xStopRevValve_2+0x1>
    6b98:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6b9c:	88 23       	and	r24, r24
    6b9e:	81 f0       	breq	.+32     	; 0x6bc0 <stop_timers+0x3e8>
    6ba0:	c1 2c       	mov	r12, r1
    6ba2:	d1 2c       	mov	r13, r1
    6ba4:	76 01       	movw	r14, r12
    6ba6:	c3 94       	inc	r12
    6ba8:	00 e0       	ldi	r16, 0x00	; 0
    6baa:	10 e0       	ldi	r17, 0x00	; 0
    6bac:	20 e0       	ldi	r18, 0x00	; 0
    6bae:	30 e0       	ldi	r19, 0x00	; 0
    6bb0:	a9 01       	movw	r20, r18
    6bb2:	63 e0       	ldi	r22, 0x03	; 3
    6bb4:	80 91 89 09 	lds	r24, 0x0989	; 0x800989 <xStopRevValve_2>
    6bb8:	90 91 8a 09 	lds	r25, 0x098A	; 0x80098a <xStopRevValve_2+0x1>
    6bbc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopSource_2 ) != pdFALSE )			xTimerStop(xStopSource_2,1);
    6bc0:	80 91 f2 0a 	lds	r24, 0x0AF2	; 0x800af2 <xStopSource_2>
    6bc4:	90 91 f3 0a 	lds	r25, 0x0AF3	; 0x800af3 <xStopSource_2+0x1>
    6bc8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6bcc:	88 23       	and	r24, r24
    6bce:	81 f0       	breq	.+32     	; 0x6bf0 <stop_timers+0x418>
    6bd0:	c1 2c       	mov	r12, r1
    6bd2:	d1 2c       	mov	r13, r1
    6bd4:	76 01       	movw	r14, r12
    6bd6:	c3 94       	inc	r12
    6bd8:	00 e0       	ldi	r16, 0x00	; 0
    6bda:	10 e0       	ldi	r17, 0x00	; 0
    6bdc:	20 e0       	ldi	r18, 0x00	; 0
    6bde:	30 e0       	ldi	r19, 0x00	; 0
    6be0:	a9 01       	movw	r20, r18
    6be2:	63 e0       	ldi	r22, 0x03	; 3
    6be4:	80 91 f2 0a 	lds	r24, 0x0AF2	; 0x800af2 <xStopSource_2>
    6be8:	90 91 f3 0a 	lds	r25, 0x0AF3	; 0x800af3 <xStopSource_2+0x1>
    6bec:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckErrors_2 ) != pdFALSE )    xTimerStop(xTStartCheckErrors_2,1);
    6bf0:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <xTStartCheckErrors_2>
    6bf4:	90 91 7c 09 	lds	r25, 0x097C	; 0x80097c <xTStartCheckErrors_2+0x1>
    6bf8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6bfc:	88 23       	and	r24, r24
    6bfe:	81 f0       	breq	.+32     	; 0x6c20 <stop_timers+0x448>
    6c00:	c1 2c       	mov	r12, r1
    6c02:	d1 2c       	mov	r13, r1
    6c04:	76 01       	movw	r14, r12
    6c06:	c3 94       	inc	r12
    6c08:	00 e0       	ldi	r16, 0x00	; 0
    6c0a:	10 e0       	ldi	r17, 0x00	; 0
    6c0c:	20 e0       	ldi	r18, 0x00	; 0
    6c0e:	30 e0       	ldi	r19, 0x00	; 0
    6c10:	a9 01       	movw	r20, r18
    6c12:	63 e0       	ldi	r22, 0x03	; 3
    6c14:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <xTStartCheckErrors_2>
    6c18:	90 91 7c 09 	lds	r25, 0x097C	; 0x80097c <xTStartCheckErrors_2+0x1>
    6c1c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckTrv_2 ) != pdFALSE )       xTimerStop(xTStartCheckTrv_2,1);
    6c20:	80 91 68 0a 	lds	r24, 0x0A68	; 0x800a68 <xTStartCheckTrv_2>
    6c24:	90 91 69 0a 	lds	r25, 0x0A69	; 0x800a69 <xTStartCheckTrv_2+0x1>
    6c28:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6c2c:	88 23       	and	r24, r24
    6c2e:	81 f0       	breq	.+32     	; 0x6c50 <stop_timers+0x478>
    6c30:	c1 2c       	mov	r12, r1
    6c32:	d1 2c       	mov	r13, r1
    6c34:	76 01       	movw	r14, r12
    6c36:	c3 94       	inc	r12
    6c38:	00 e0       	ldi	r16, 0x00	; 0
    6c3a:	10 e0       	ldi	r17, 0x00	; 0
    6c3c:	20 e0       	ldi	r18, 0x00	; 0
    6c3e:	30 e0       	ldi	r19, 0x00	; 0
    6c40:	a9 01       	movw	r20, r18
    6c42:	63 e0       	ldi	r22, 0x03	; 3
    6c44:	80 91 68 0a 	lds	r24, 0x0A68	; 0x800a68 <xTStartCheckTrv_2>
    6c48:	90 91 69 0a 	lds	r25, 0x0A69	; 0x800a69 <xTStartCheckTrv_2+0x1>
    6c4c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xComutateTrv_2 ) != pdFALSE )          xTimerStop(xComutateTrv_2,1);
    6c50:	80 91 74 0a 	lds	r24, 0x0A74	; 0x800a74 <xComutateTrv_2>
    6c54:	90 91 75 0a 	lds	r25, 0x0A75	; 0x800a75 <xComutateTrv_2+0x1>
    6c58:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6c5c:	88 23       	and	r24, r24
    6c5e:	81 f0       	breq	.+32     	; 0x6c80 <stop_timers+0x4a8>
    6c60:	c1 2c       	mov	r12, r1
    6c62:	d1 2c       	mov	r13, r1
    6c64:	76 01       	movw	r14, r12
    6c66:	c3 94       	inc	r12
    6c68:	00 e0       	ldi	r16, 0x00	; 0
    6c6a:	10 e0       	ldi	r17, 0x00	; 0
    6c6c:	20 e0       	ldi	r18, 0x00	; 0
    6c6e:	30 e0       	ldi	r19, 0x00	; 0
    6c70:	a9 01       	movw	r20, r18
    6c72:	63 e0       	ldi	r22, 0x03	; 3
    6c74:	80 91 74 0a 	lds	r24, 0x0A74	; 0x800a74 <xComutateTrv_2>
    6c78:	90 91 75 0a 	lds	r25, 0x0A75	; 0x800a75 <xComutateTrv_2+0x1>
    6c7c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
}
    6c80:	1f 91       	pop	r17
    6c82:	0f 91       	pop	r16
    6c84:	ff 90       	pop	r15
    6c86:	ef 90       	pop	r14
    6c88:	df 90       	pop	r13
    6c8a:	cf 90       	pop	r12
    6c8c:	08 95       	ret

00006c8e <Comp_Stop>:
	}
	
	
}
//-------------------------------------------------------------------------Stop mod
void Comp_Stop(xCompressor *comp){
    6c8e:	cf 92       	push	r12
    6c90:	df 92       	push	r13
    6c92:	ef 92       	push	r14
    6c94:	ff 92       	push	r15
    6c96:	0f 93       	push	r16
    6c98:	1f 93       	push	r17
    6c9a:	cf 93       	push	r28
    6c9c:	df 93       	push	r29
    6c9e:	ec 01       	movw	r28, r24
	static time_t time_count_1;
	static time_t time_count_2;
	
	//xSerialxPrintf(&xSerial3Port,"StopCompressor\r\n");
	stop_timers(comp);
    6ca0:	9b dd       	rcall	.-1226   	; 0x67d8 <stop_timers>
	comp->Cooling=comp->heatingWater=comp->Heating=false;
    6ca2:	1a 82       	std	Y+2, r1	; 0x02
    6ca4:	1c 82       	std	Y+4, r1	; 0x04
    6ca6:	1b 82       	std	Y+3, r1	; 0x03
    comp->switchToMode=true;
    6ca8:	81 e0       	ldi	r24, 0x01	; 1
    6caa:	88 83       	st	Y, r24
	if(comp->Index == 1)
    6cac:	fe 01       	movw	r30, r28
    6cae:	ee 58       	subi	r30, 0x8E	; 142
    6cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    6cb2:	80 81       	ld	r24, Z
    6cb4:	91 81       	ldd	r25, Z+1	; 0x01
    6cb6:	81 30       	cpi	r24, 0x01	; 1
    6cb8:	91 05       	cpc	r25, r1
    6cba:	09 f0       	breq	.+2      	; 0x6cbe <Comp_Stop+0x30>
    6cbc:	6c c0       	rjmp	.+216    	; 0x6d96 <Comp_Stop+0x108>
	{
		if(PIN_COMPRESSOR_1 > 0)
    6cbe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6cc2:	85 ff       	sbrs	r24, 5
    6cc4:	57 c0       	rjmp	.+174    	; 0x6d74 <Comp_Stop+0xe6>
		{
			STOP_COMPRESSOR_1;
    6cc6:	e2 e0       	ldi	r30, 0x02	; 2
    6cc8:	f1 e0       	ldi	r31, 0x01	; 1
    6cca:	80 81       	ld	r24, Z
    6ccc:	8f 7d       	andi	r24, 0xDF	; 223
    6cce:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopCompressor_1\r\n");
    6cd0:	83 ed       	ldi	r24, 0xD3	; 211
    6cd2:	95 e0       	ldi	r25, 0x05	; 5
    6cd4:	9f 93       	push	r25
    6cd6:	8f 93       	push	r24
    6cd8:	82 e3       	ldi	r24, 0x32	; 50
    6cda:	98 e0       	ldi	r25, 0x08	; 8
    6cdc:	9f 93       	push	r25
    6cde:	8f 93       	push	r24
    6ce0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->checkErrors =false;
    6ce4:	1d 82       	std	Y+5, r1	; 0x05
			
			comp->checkTrv =false;
    6ce6:	19 82       	std	Y+1, r1	; 0x01
			comp->compOn=0;
    6ce8:	1b 86       	std	Y+11, r1	; 0x0b
			time_count_1+= difftime(time(&current_time), timeStartComp_1);
    6cea:	c0 90 83 09 	lds	r12, 0x0983	; 0x800983 <timeStartComp_1>
    6cee:	d0 90 84 09 	lds	r13, 0x0984	; 0x800984 <timeStartComp_1+0x1>
    6cf2:	e0 90 85 09 	lds	r14, 0x0985	; 0x800985 <timeStartComp_1+0x2>
    6cf6:	f0 90 86 09 	lds	r15, 0x0986	; 0x800986 <timeStartComp_1+0x3>
    6cfa:	8f e8       	ldi	r24, 0x8F	; 143
    6cfc:	99 e0       	ldi	r25, 0x09	; 9
    6cfe:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6d02:	a7 01       	movw	r20, r14
    6d04:	96 01       	movw	r18, r12
    6d06:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    6d0a:	c0 90 d5 07 	lds	r12, 0x07D5	; 0x8007d5 <time_count_1.3196>
    6d0e:	d0 90 d6 07 	lds	r13, 0x07D6	; 0x8007d6 <time_count_1.3196+0x1>
    6d12:	e0 90 d7 07 	lds	r14, 0x07D7	; 0x8007d7 <time_count_1.3196+0x2>
    6d16:	f0 90 d8 07 	lds	r15, 0x07D8	; 0x8007d8 <time_count_1.3196+0x3>
    6d1a:	dc 01       	movw	r26, r24
    6d1c:	cb 01       	movw	r24, r22
    6d1e:	8c 0d       	add	r24, r12
    6d20:	9d 1d       	adc	r25, r13
    6d22:	ae 1d       	adc	r26, r14
    6d24:	bf 1d       	adc	r27, r15
    6d26:	80 93 d5 07 	sts	0x07D5, r24	; 0x8007d5 <time_count_1.3196>
    6d2a:	90 93 d6 07 	sts	0x07D6, r25	; 0x8007d6 <time_count_1.3196+0x1>
    6d2e:	a0 93 d7 07 	sts	0x07D7, r26	; 0x8007d7 <time_count_1.3196+0x2>
    6d32:	b0 93 d8 07 	sts	0x07D8, r27	; 0x8007d8 <time_count_1.3196+0x3>
			
			//xSerialxPrintf(&xSerial3Port,"time_Compressor_=%d\r\n",time_count_1);
			if(time_count_1>ONE_HOUR){EEpromData.time_compressor_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    6d36:	0f 90       	pop	r0
    6d38:	0f 90       	pop	r0
    6d3a:	0f 90       	pop	r0
    6d3c:	0f 90       	pop	r0
    6d3e:	81 31       	cpi	r24, 0x11	; 17
    6d40:	9e 40       	sbci	r25, 0x0E	; 14
    6d42:	a1 05       	cpc	r26, r1
    6d44:	b1 05       	cpc	r27, r1
    6d46:	b0 f0       	brcs	.+44     	; 0x6d74 <Comp_Stop+0xe6>
    6d48:	e4 e9       	ldi	r30, 0x94	; 148
    6d4a:	f9 e0       	ldi	r31, 0x09	; 9
    6d4c:	82 ad       	ldd	r24, Z+58	; 0x3a
    6d4e:	93 ad       	ldd	r25, Z+59	; 0x3b
    6d50:	01 96       	adiw	r24, 0x01	; 1
    6d52:	93 af       	std	Z+59, r25	; 0x3b
    6d54:	82 af       	std	Z+58, r24	; 0x3a
    6d56:	40 e6       	ldi	r20, 0x60	; 96
    6d58:	50 e0       	ldi	r21, 0x00	; 0
    6d5a:	60 e0       	ldi	r22, 0x00	; 0
    6d5c:	70 e0       	ldi	r23, 0x00	; 0
    6d5e:	cf 01       	movw	r24, r30
    6d60:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <eeprom_update_block>
    6d64:	10 92 d5 07 	sts	0x07D5, r1	; 0x8007d5 <time_count_1.3196>
    6d68:	10 92 d6 07 	sts	0x07D6, r1	; 0x8007d6 <time_count_1.3196+0x1>
    6d6c:	10 92 d7 07 	sts	0x07D7, r1	; 0x8007d7 <time_count_1.3196+0x2>
    6d70:	10 92 d8 07 	sts	0x07D8, r1	; 0x8007d8 <time_count_1.3196+0x3>
			
		}
		xTimerStart(xSwitchRevOne_1_time, 0);
    6d74:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    6d78:	9b 01       	movw	r18, r22
    6d7a:	ac 01       	movw	r20, r24
    6d7c:	c1 2c       	mov	r12, r1
    6d7e:	d1 2c       	mov	r13, r1
    6d80:	76 01       	movw	r14, r12
    6d82:	00 e0       	ldi	r16, 0x00	; 0
    6d84:	10 e0       	ldi	r17, 0x00	; 0
    6d86:	61 e0       	ldi	r22, 0x01	; 1
    6d88:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <xSwitchRevOne_1_time>
    6d8c:	90 91 88 09 	lds	r25, 0x0988	; 0x800988 <xSwitchRevOne_1_time+0x1>
    6d90:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    6d94:	6f c0       	rjmp	.+222    	; 0x6e74 <Comp_Stop+0x1e6>
		
	}
	else if(comp->Index == 2)
    6d96:	02 97       	sbiw	r24, 0x02	; 2
    6d98:	09 f0       	breq	.+2      	; 0x6d9c <Comp_Stop+0x10e>
    6d9a:	6c c0       	rjmp	.+216    	; 0x6e74 <Comp_Stop+0x1e6>
	{
		if(PIN_COMPRESSOR_2 > 0)
    6d9c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6da0:	86 ff       	sbrs	r24, 6
    6da2:	58 c0       	rjmp	.+176    	; 0x6e54 <Comp_Stop+0x1c6>
		{
			
			STOP_COMPRESSOR_2;
    6da4:	e2 e0       	ldi	r30, 0x02	; 2
    6da6:	f1 e0       	ldi	r31, 0x01	; 1
    6da8:	80 81       	ld	r24, Z
    6daa:	8f 7b       	andi	r24, 0xBF	; 191
    6dac:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopCompressor_2\r\n");
    6dae:	86 ee       	ldi	r24, 0xE6	; 230
    6db0:	95 e0       	ldi	r25, 0x05	; 5
    6db2:	9f 93       	push	r25
    6db4:	8f 93       	push	r24
    6db6:	82 e3       	ldi	r24, 0x32	; 50
    6db8:	98 e0       	ldi	r25, 0x08	; 8
    6dba:	9f 93       	push	r25
    6dbc:	8f 93       	push	r24
    6dbe:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->checkErrors =false;
    6dc2:	1d 82       	std	Y+5, r1	; 0x05
			//comp->switchToMode=true;
			comp->checkTrv =false;
    6dc4:	19 82       	std	Y+1, r1	; 0x01
			comp->compOn=0;
    6dc6:	1b 86       	std	Y+11, r1	; 0x0b
			time_count_2+= difftime(time(&current_time), timeStartComp_2);
    6dc8:	c0 90 35 0b 	lds	r12, 0x0B35	; 0x800b35 <timeStartComp_2>
    6dcc:	d0 90 36 0b 	lds	r13, 0x0B36	; 0x800b36 <timeStartComp_2+0x1>
    6dd0:	e0 90 37 0b 	lds	r14, 0x0B37	; 0x800b37 <timeStartComp_2+0x2>
    6dd4:	f0 90 38 0b 	lds	r15, 0x0B38	; 0x800b38 <timeStartComp_2+0x3>
    6dd8:	8f e8       	ldi	r24, 0x8F	; 143
    6dda:	99 e0       	ldi	r25, 0x09	; 9
    6ddc:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6de0:	a7 01       	movw	r20, r14
    6de2:	96 01       	movw	r18, r12
    6de4:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    6de8:	c0 90 d1 07 	lds	r12, 0x07D1	; 0x8007d1 <time_count_2.3197>
    6dec:	d0 90 d2 07 	lds	r13, 0x07D2	; 0x8007d2 <time_count_2.3197+0x1>
    6df0:	e0 90 d3 07 	lds	r14, 0x07D3	; 0x8007d3 <time_count_2.3197+0x2>
    6df4:	f0 90 d4 07 	lds	r15, 0x07D4	; 0x8007d4 <time_count_2.3197+0x3>
    6df8:	dc 01       	movw	r26, r24
    6dfa:	cb 01       	movw	r24, r22
    6dfc:	8c 0d       	add	r24, r12
    6dfe:	9d 1d       	adc	r25, r13
    6e00:	ae 1d       	adc	r26, r14
    6e02:	bf 1d       	adc	r27, r15
    6e04:	80 93 d1 07 	sts	0x07D1, r24	; 0x8007d1 <time_count_2.3197>
    6e08:	90 93 d2 07 	sts	0x07D2, r25	; 0x8007d2 <time_count_2.3197+0x1>
    6e0c:	a0 93 d3 07 	sts	0x07D3, r26	; 0x8007d3 <time_count_2.3197+0x2>
    6e10:	b0 93 d4 07 	sts	0x07D4, r27	; 0x8007d4 <time_count_2.3197+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_compressor_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    6e14:	0f 90       	pop	r0
    6e16:	0f 90       	pop	r0
    6e18:	0f 90       	pop	r0
    6e1a:	0f 90       	pop	r0
    6e1c:	81 31       	cpi	r24, 0x11	; 17
    6e1e:	9e 40       	sbci	r25, 0x0E	; 14
    6e20:	a1 05       	cpc	r26, r1
    6e22:	b1 05       	cpc	r27, r1
    6e24:	b8 f0       	brcs	.+46     	; 0x6e54 <Comp_Stop+0x1c6>
    6e26:	e4 ee       	ldi	r30, 0xE4	; 228
    6e28:	f9 e0       	ldi	r31, 0x09	; 9
    6e2a:	80 81       	ld	r24, Z
    6e2c:	91 81       	ldd	r25, Z+1	; 0x01
    6e2e:	01 96       	adiw	r24, 0x01	; 1
    6e30:	91 83       	std	Z+1, r25	; 0x01
    6e32:	80 83       	st	Z, r24
    6e34:	40 e6       	ldi	r20, 0x60	; 96
    6e36:	50 e0       	ldi	r21, 0x00	; 0
    6e38:	60 e0       	ldi	r22, 0x00	; 0
    6e3a:	70 e0       	ldi	r23, 0x00	; 0
    6e3c:	84 e9       	ldi	r24, 0x94	; 148
    6e3e:	99 e0       	ldi	r25, 0x09	; 9
    6e40:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <eeprom_update_block>
    6e44:	10 92 d1 07 	sts	0x07D1, r1	; 0x8007d1 <time_count_2.3197>
    6e48:	10 92 d2 07 	sts	0x07D2, r1	; 0x8007d2 <time_count_2.3197+0x1>
    6e4c:	10 92 d3 07 	sts	0x07D3, r1	; 0x8007d3 <time_count_2.3197+0x2>
    6e50:	10 92 d4 07 	sts	0x07D4, r1	; 0x8007d4 <time_count_2.3197+0x3>
			
		}
		xTimerStart(xSwitchRevOne_2_time, 0);
    6e54:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    6e58:	9b 01       	movw	r18, r22
    6e5a:	ac 01       	movw	r20, r24
    6e5c:	c1 2c       	mov	r12, r1
    6e5e:	d1 2c       	mov	r13, r1
    6e60:	76 01       	movw	r14, r12
    6e62:	00 e0       	ldi	r16, 0x00	; 0
    6e64:	10 e0       	ldi	r17, 0x00	; 0
    6e66:	61 e0       	ldi	r22, 0x01	; 1
    6e68:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <xSwitchRevOne_2_time>
    6e6c:	90 91 45 0b 	lds	r25, 0x0B45	; 0x800b45 <xSwitchRevOne_2_time+0x1>
    6e70:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
	
	
}
    6e74:	df 91       	pop	r29
    6e76:	cf 91       	pop	r28
    6e78:	1f 91       	pop	r17
    6e7a:	0f 91       	pop	r16
    6e7c:	ff 90       	pop	r15
    6e7e:	ef 90       	pop	r14
    6e80:	df 90       	pop	r13
    6e82:	cf 90       	pop	r12
    6e84:	08 95       	ret

00006e86 <goToMode>:
	else return OFF;

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void goToMode(xCompressor *comp)
{   //calibration(comp);
    6e86:	cf 93       	push	r28
    6e88:	df 93       	push	r29
    6e8a:	ec 01       	movw	r28, r24
	stop_timers(comp);
    6e8c:	a5 dc       	rcall	.-1718   	; 0x67d8 <stop_timers>
	startTrvTimer(comp);
    6e8e:	ce 01       	movw	r24, r28
    6e90:	0e 94 6e 4f 	call	0x9edc	; 0x9edc <startTrvTimer>
	//comp->switchToMode=true;
	
	StarSoursePump(comp);
    6e94:	ce 01       	movw	r24, r28
    6e96:	98 db       	rcall	.-2256   	; 0x65c8 <StarSoursePump>
	//Comp_1.Steps = Fuzzy(&Comp_1,EEpromData.trv_corection_1);
	
}
    6e98:	df 91       	pop	r29
    6e9a:	cf 91       	pop	r28
    6e9c:	08 95       	ret

00006e9e <mod_pump>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void mod_pump( xCompressor *comp,xEEdata* eeData){
    6e9e:	2f 92       	push	r2
    6ea0:	3f 92       	push	r3
    6ea2:	4f 92       	push	r4
    6ea4:	5f 92       	push	r5
    6ea6:	6f 92       	push	r6
    6ea8:	7f 92       	push	r7
    6eaa:	8f 92       	push	r8
    6eac:	9f 92       	push	r9
    6eae:	af 92       	push	r10
    6eb0:	bf 92       	push	r11
    6eb2:	cf 92       	push	r12
    6eb4:	df 92       	push	r13
    6eb6:	ef 92       	push	r14
    6eb8:	ff 92       	push	r15
    6eba:	1f 93       	push	r17
    6ebc:	cf 93       	push	r28
    6ebe:	df 93       	push	r29
    6ec0:	ec 01       	movw	r28, r24
    6ec2:	1b 01       	movw	r2, r22

	uint8_t temp;
	temp = selmode(&EEpromData);
    6ec4:	84 e9       	ldi	r24, 0x94	; 148
    6ec6:	99 e0       	ldi	r25, 0x09	; 9
    6ec8:	5e dc       	rcall	.-1860   	; 0x6786 <selmode>
    6eca:	18 2f       	mov	r17, r24
	if(temp!=comp->modeOfPump ){comp->modeOfPump=temp; Comp_Stop(comp);}
    6ecc:	88 89       	ldd	r24, Y+16	; 0x10
    6ece:	18 17       	cp	r17, r24
    6ed0:	19 f0       	breq	.+6      	; 0x6ed8 <mod_pump+0x3a>
    6ed2:	18 8b       	std	Y+16, r17	; 0x10
    6ed4:	ce 01       	movw	r24, r28
    6ed6:	db de       	rcall	.-586    	; 0x6c8e <Comp_Stop>

	switch(temp){
    6ed8:	13 30       	cpi	r17, 0x03	; 3
    6eda:	09 f4       	brne	.+2      	; 0x6ede <mod_pump+0x40>
    6edc:	c8 c0       	rjmp	.+400    	; 0x706e <mod_pump+0x1d0>
    6ede:	30 f4       	brcc	.+12     	; 0x6eec <mod_pump+0x4e>
    6ee0:	11 30       	cpi	r17, 0x01	; 1
    6ee2:	59 f0       	breq	.+22     	; 0x6efa <mod_pump+0x5c>
    6ee4:	12 30       	cpi	r17, 0x02	; 2
    6ee6:	09 f4       	brne	.+2      	; 0x6eea <mod_pump+0x4c>
    6ee8:	6a c0       	rjmp	.+212    	; 0x6fbe <mod_pump+0x120>
    6eea:	14 c5       	rjmp	.+2600   	; 0x7914 <mod_pump+0xa76>
    6eec:	14 30       	cpi	r17, 0x04	; 4
    6eee:	09 f4       	brne	.+2      	; 0x6ef2 <mod_pump+0x54>
    6ef0:	18 c1       	rjmp	.+560    	; 0x7122 <mod_pump+0x284>
    6ef2:	15 30       	cpi	r17, 0x05	; 5
    6ef4:	09 f4       	brne	.+2      	; 0x6ef8 <mod_pump+0x5a>
    6ef6:	62 c2       	rjmp	.+1220   	; 0x73bc <mod_pump+0x51e>
    6ef8:	0d c5       	rjmp	.+2586   	; 0x7914 <mod_pump+0xa76>
		case DHW: {
		if(comp->Index==1){
    6efa:	fe 01       	movw	r30, r28
    6efc:	ee 58       	subi	r30, 0x8E	; 142
    6efe:	ff 4f       	sbci	r31, 0xFF	; 255
    6f00:	80 81       	ld	r24, Z
    6f02:	91 81       	ldd	r25, Z+1	; 0x01
    6f04:	01 97       	sbiw	r24, 0x01	; 1
    6f06:	09 f0       	breq	.+2      	; 0x6f0a <mod_pump+0x6c>
    6f08:	05 c5       	rjmp	.+2570   	; 0x7914 <mod_pump+0xa76>
			if ( comp->Dhw_Temp > eeData->Set_DHW && comp->heatingWater && !comp->switchToMode) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp);}
    6f0a:	8a 88       	ldd	r8, Y+18	; 0x12
    6f0c:	9b 88       	ldd	r9, Y+19	; 0x13
    6f0e:	ac 88       	ldd	r10, Y+20	; 0x14
    6f10:	bd 88       	ldd	r11, Y+21	; 0x15
    6f12:	f1 01       	movw	r30, r2
    6f14:	e3 8c       	ldd	r14, Z+27	; 0x1b
    6f16:	f1 2c       	mov	r15, r1
    6f18:	b7 01       	movw	r22, r14
    6f1a:	0f 2c       	mov	r0, r15
    6f1c:	00 0c       	add	r0, r0
    6f1e:	88 0b       	sbc	r24, r24
    6f20:	99 0b       	sbc	r25, r25
    6f22:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    6f26:	9b 01       	movw	r18, r22
    6f28:	ac 01       	movw	r20, r24
    6f2a:	c5 01       	movw	r24, r10
    6f2c:	b4 01       	movw	r22, r8
    6f2e:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    6f32:	18 16       	cp	r1, r24
    6f34:	6c f4       	brge	.+26     	; 0x6f50 <mod_pump+0xb2>
    6f36:	8c 81       	ldd	r24, Y+4	; 0x04
    6f38:	88 23       	and	r24, r24
    6f3a:	09 f4       	brne	.+2      	; 0x6f3e <mod_pump+0xa0>
    6f3c:	82 c3       	rjmp	.+1796   	; 0x7642 <mod_pump+0x7a4>
    6f3e:	88 81       	ld	r24, Y
    6f40:	81 11       	cpse	r24, r1
    6f42:	e8 c4       	rjmp	.+2512   	; 0x7914 <mod_pump+0xa76>
    6f44:	1c 82       	std	Y+4, r1	; 0x04
    6f46:	ce 01       	movw	r24, r28
    6f48:	a2 de       	rcall	.-700    	; 0x6c8e <Comp_Stop>
    6f4a:	ce 01       	movw	r24, r28
    6f4c:	0e 94 a6 4f 	call	0x9f4c	; 0x9f4c <stopTrvTimer>
			if ( comp->Dhw_Temp < (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->switchToMode){calibration(comp);Comp_1.error=0; comp->heatingWater=true; goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_Dhw\r\n");}//Start_Dhw();
    6f50:	f1 01       	movw	r30, r2
    6f52:	63 8d       	ldd	r22, Z+27	; 0x1b
    6f54:	70 e0       	ldi	r23, 0x00	; 0
    6f56:	86 8d       	ldd	r24, Z+30	; 0x1e
    6f58:	68 1b       	sub	r22, r24
    6f5a:	71 09       	sbc	r23, r1
    6f5c:	07 2e       	mov	r0, r23
    6f5e:	00 0c       	add	r0, r0
    6f60:	88 0b       	sbc	r24, r24
    6f62:	99 0b       	sbc	r25, r25
    6f64:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    6f68:	9b 01       	movw	r18, r22
    6f6a:	ac 01       	movw	r20, r24
    6f6c:	6a 89       	ldd	r22, Y+18	; 0x12
    6f6e:	7b 89       	ldd	r23, Y+19	; 0x13
    6f70:	8c 89       	ldd	r24, Y+20	; 0x14
    6f72:	9d 89       	ldd	r25, Y+21	; 0x15
    6f74:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    6f78:	88 23       	and	r24, r24
    6f7a:	0c f0       	brlt	.+2      	; 0x6f7e <mod_pump+0xe0>
    6f7c:	cb c4       	rjmp	.+2454   	; 0x7914 <mod_pump+0xa76>
    6f7e:	8c 81       	ldd	r24, Y+4	; 0x04
    6f80:	81 11       	cpse	r24, r1
    6f82:	c8 c4       	rjmp	.+2448   	; 0x7914 <mod_pump+0xa76>
    6f84:	88 81       	ld	r24, Y
    6f86:	81 11       	cpse	r24, r1
    6f88:	c5 c4       	rjmp	.+2442   	; 0x7914 <mod_pump+0xa76>
    6f8a:	ce 01       	movw	r24, r28
    6f8c:	0e 94 f7 51 	call	0xa3ee	; 0xa3ee <calibration>
    6f90:	10 92 65 0a 	sts	0x0A65, r1	; 0x800a65 <Comp_1+0x71>
    6f94:	10 92 64 0a 	sts	0x0A64, r1	; 0x800a64 <Comp_1+0x70>
    6f98:	81 e0       	ldi	r24, 0x01	; 1
    6f9a:	8c 83       	std	Y+4, r24	; 0x04
    6f9c:	ce 01       	movw	r24, r28
    6f9e:	73 df       	rcall	.-282    	; 0x6e86 <goToMode>
    6fa0:	89 ef       	ldi	r24, 0xF9	; 249
    6fa2:	95 e0       	ldi	r25, 0x05	; 5
    6fa4:	9f 93       	push	r25
    6fa6:	8f 93       	push	r24
    6fa8:	82 e3       	ldi	r24, 0x32	; 50
    6faa:	98 e0       	ldi	r25, 0x08	; 8
    6fac:	9f 93       	push	r25
    6fae:	8f 93       	push	r24
    6fb0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    6fb4:	0f 90       	pop	r0
    6fb6:	0f 90       	pop	r0
    6fb8:	0f 90       	pop	r0
    6fba:	0f 90       	pop	r0
    6fbc:	ab c4       	rjmp	.+2390   	; 0x7914 <mod_pump+0xa76>
		
		case HEAT:{
			//xSerialxPrintf(&xSerial3Port,"Set_Heating =%d\r\n,diffHEAT =%d\r\n,Bac_Temp =%f\r\n",eeData->Set_Heating,eeData->diffHEAT,data->Bac_Temp);
			//xSerialxPrintf(&xSerial3Port,"diffHEAT =%d\r\n",eeData->diffHEAT);
			//xSerialxPrintf(&xSerial3Port,"heat mode\r\n");
			if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {comp->Heating=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat\r\n");}
    6fbe:	8e 88       	ldd	r8, Y+22	; 0x16
    6fc0:	9f 88       	ldd	r9, Y+23	; 0x17
    6fc2:	a8 8c       	ldd	r10, Y+24	; 0x18
    6fc4:	b9 8c       	ldd	r11, Y+25	; 0x19
    6fc6:	f1 01       	movw	r30, r2
    6fc8:	e1 8c       	ldd	r14, Z+25	; 0x19
    6fca:	f1 2c       	mov	r15, r1
    6fcc:	84 8d       	ldd	r24, Z+28	; 0x1c
    6fce:	b7 01       	movw	r22, r14
    6fd0:	68 1b       	sub	r22, r24
    6fd2:	71 09       	sbc	r23, r1
    6fd4:	07 2e       	mov	r0, r23
    6fd6:	00 0c       	add	r0, r0
    6fd8:	88 0b       	sbc	r24, r24
    6fda:	99 0b       	sbc	r25, r25
    6fdc:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    6fe0:	9b 01       	movw	r18, r22
    6fe2:	ac 01       	movw	r20, r24
    6fe4:	c5 01       	movw	r24, r10
    6fe6:	b4 01       	movw	r22, r8
    6fe8:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    6fec:	88 23       	and	r24, r24
    6fee:	fc f4       	brge	.+62     	; 0x702e <mod_pump+0x190>
    6ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    6ff2:	81 11       	cpse	r24, r1
    6ff4:	3b c3       	rjmp	.+1654   	; 0x766c <mod_pump+0x7ce>
    6ff6:	88 81       	ld	r24, Y
    6ff8:	81 11       	cpse	r24, r1
    6ffa:	8c c4       	rjmp	.+2328   	; 0x7914 <mod_pump+0xa76>
    6ffc:	81 e0       	ldi	r24, 0x01	; 1
    6ffe:	8a 83       	std	Y+2, r24	; 0x02
    7000:	ce 01       	movw	r24, r28
    7002:	0e 94 f7 51 	call	0xa3ee	; 0xa3ee <calibration>
    7006:	10 92 65 0a 	sts	0x0A65, r1	; 0x800a65 <Comp_1+0x71>
    700a:	10 92 64 0a 	sts	0x0A64, r1	; 0x800a64 <Comp_1+0x70>
    700e:	ce 01       	movw	r24, r28
    7010:	3a df       	rcall	.-396    	; 0x6e86 <goToMode>
    7012:	85 e0       	ldi	r24, 0x05	; 5
    7014:	96 e0       	ldi	r25, 0x06	; 6
    7016:	9f 93       	push	r25
    7018:	8f 93       	push	r24
    701a:	82 e3       	ldi	r24, 0x32	; 50
    701c:	98 e0       	ldi	r25, 0x08	; 8
    701e:	9f 93       	push	r25
    7020:	8f 93       	push	r24
    7022:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7026:	0f 90       	pop	r0
    7028:	0f 90       	pop	r0
    702a:	0f 90       	pop	r0
    702c:	0f 90       	pop	r0
			if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    702e:	f1 01       	movw	r30, r2
    7030:	61 8d       	ldd	r22, Z+25	; 0x19
    7032:	70 e0       	ldi	r23, 0x00	; 0
    7034:	80 e0       	ldi	r24, 0x00	; 0
    7036:	90 e0       	ldi	r25, 0x00	; 0
    7038:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    703c:	9b 01       	movw	r18, r22
    703e:	ac 01       	movw	r20, r24
    7040:	6e 89       	ldd	r22, Y+22	; 0x16
    7042:	7f 89       	ldd	r23, Y+23	; 0x17
    7044:	88 8d       	ldd	r24, Y+24	; 0x18
    7046:	99 8d       	ldd	r25, Y+25	; 0x19
    7048:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    704c:	18 16       	cp	r1, r24
    704e:	0c f0       	brlt	.+2      	; 0x7052 <mod_pump+0x1b4>
    7050:	61 c4       	rjmp	.+2242   	; 0x7914 <mod_pump+0xa76>
    7052:	8a 81       	ldd	r24, Y+2	; 0x02
    7054:	88 23       	and	r24, r24
    7056:	09 f4       	brne	.+2      	; 0x705a <mod_pump+0x1bc>
    7058:	5d c4       	rjmp	.+2234   	; 0x7914 <mod_pump+0xa76>
    705a:	88 81       	ld	r24, Y
    705c:	81 11       	cpse	r24, r1
    705e:	5a c4       	rjmp	.+2228   	; 0x7914 <mod_pump+0xa76>
    7060:	1a 82       	std	Y+2, r1	; 0x02
    7062:	ce 01       	movw	r24, r28
    7064:	14 de       	rcall	.-984    	; 0x6c8e <Comp_Stop>
    7066:	ce 01       	movw	r24, r28
    7068:	0e 94 a6 4f 	call	0x9f4c	; 0x9f4c <stopTrvTimer>
    706c:	53 c4       	rjmp	.+2214   	; 0x7914 <mod_pump+0xa76>
		} break;
		
		case COOL:{
			//xSerialxPrintf(&xSerial3Port,"COOL mode\r\n");
			if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
    706e:	8e 88       	ldd	r8, Y+22	; 0x16
    7070:	9f 88       	ldd	r9, Y+23	; 0x17
    7072:	a8 8c       	ldd	r10, Y+24	; 0x18
    7074:	b9 8c       	ldd	r11, Y+25	; 0x19
    7076:	f1 01       	movw	r30, r2
    7078:	e2 8c       	ldd	r14, Z+26	; 0x1a
    707a:	f1 2c       	mov	r15, r1
    707c:	b7 01       	movw	r22, r14
    707e:	0f 2c       	mov	r0, r15
    7080:	00 0c       	add	r0, r0
    7082:	88 0b       	sbc	r24, r24
    7084:	99 0b       	sbc	r25, r25
    7086:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    708a:	9b 01       	movw	r18, r22
    708c:	ac 01       	movw	r20, r24
    708e:	c5 01       	movw	r24, r10
    7090:	b4 01       	movw	r22, r8
    7092:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    7096:	88 23       	and	r24, r24
    7098:	6c f4       	brge	.+26     	; 0x70b4 <mod_pump+0x216>
    709a:	8b 81       	ldd	r24, Y+3	; 0x03
    709c:	88 23       	and	r24, r24
    709e:	09 f4       	brne	.+2      	; 0x70a2 <mod_pump+0x204>
    70a0:	f5 c2       	rjmp	.+1514   	; 0x768c <mod_pump+0x7ee>
    70a2:	88 81       	ld	r24, Y
    70a4:	81 11       	cpse	r24, r1
    70a6:	36 c4       	rjmp	.+2156   	; 0x7914 <mod_pump+0xa76>
    70a8:	1b 82       	std	Y+3, r1	; 0x03
    70aa:	ce 01       	movw	r24, r28
    70ac:	f0 dd       	rcall	.-1056   	; 0x6c8e <Comp_Stop>
    70ae:	ce 01       	movw	r24, r28
    70b0:	0e 94 a6 4f 	call	0x9f4c	; 0x9f4c <stopTrvTimer>
			if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {comp->Cooling=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool\r\n");}//
    70b4:	f1 01       	movw	r30, r2
    70b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    70b8:	65 8d       	ldd	r22, Z+29	; 0x1d
    70ba:	70 e0       	ldi	r23, 0x00	; 0
    70bc:	68 0f       	add	r22, r24
    70be:	71 1d       	adc	r23, r1
    70c0:	07 2e       	mov	r0, r23
    70c2:	00 0c       	add	r0, r0
    70c4:	88 0b       	sbc	r24, r24
    70c6:	99 0b       	sbc	r25, r25
    70c8:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    70cc:	9b 01       	movw	r18, r22
    70ce:	ac 01       	movw	r20, r24
    70d0:	6e 89       	ldd	r22, Y+22	; 0x16
    70d2:	7f 89       	ldd	r23, Y+23	; 0x17
    70d4:	88 8d       	ldd	r24, Y+24	; 0x18
    70d6:	99 8d       	ldd	r25, Y+25	; 0x19
    70d8:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    70dc:	18 16       	cp	r1, r24
    70de:	0c f0       	brlt	.+2      	; 0x70e2 <mod_pump+0x244>
    70e0:	19 c4       	rjmp	.+2098   	; 0x7914 <mod_pump+0xa76>
    70e2:	8b 81       	ldd	r24, Y+3	; 0x03
    70e4:	81 11       	cpse	r24, r1
    70e6:	16 c4       	rjmp	.+2092   	; 0x7914 <mod_pump+0xa76>
    70e8:	88 81       	ld	r24, Y
    70ea:	81 11       	cpse	r24, r1
    70ec:	13 c4       	rjmp	.+2086   	; 0x7914 <mod_pump+0xa76>
    70ee:	81 e0       	ldi	r24, 0x01	; 1
    70f0:	8b 83       	std	Y+3, r24	; 0x03
    70f2:	ce 01       	movw	r24, r28
    70f4:	0e 94 f7 51 	call	0xa3ee	; 0xa3ee <calibration>
    70f8:	10 92 65 0a 	sts	0x0A65, r1	; 0x800a65 <Comp_1+0x71>
    70fc:	10 92 64 0a 	sts	0x0A64, r1	; 0x800a64 <Comp_1+0x70>
    7100:	ce 01       	movw	r24, r28
    7102:	c1 de       	rcall	.-638    	; 0x6e86 <goToMode>
    7104:	82 e1       	ldi	r24, 0x12	; 18
    7106:	96 e0       	ldi	r25, 0x06	; 6
    7108:	9f 93       	push	r25
    710a:	8f 93       	push	r24
    710c:	82 e3       	ldi	r24, 0x32	; 50
    710e:	98 e0       	ldi	r25, 0x08	; 8
    7110:	9f 93       	push	r25
    7112:	8f 93       	push	r24
    7114:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7118:	0f 90       	pop	r0
    711a:	0f 90       	pop	r0
    711c:	0f 90       	pop	r0
    711e:	0f 90       	pop	r0
    7120:	f9 c3       	rjmp	.+2034   	; 0x7914 <mod_pump+0xa76>
		}break;
		
		case HEAT_DHW:
		
		{
			if(comp->Index==1)
    7122:	fe 01       	movw	r30, r28
    7124:	ee 58       	subi	r30, 0x8E	; 142
    7126:	ff 4f       	sbci	r31, 0xFF	; 255
    7128:	80 81       	ld	r24, Z
    712a:	91 81       	ldd	r25, Z+1	; 0x01
    712c:	81 30       	cpi	r24, 0x01	; 1
    712e:	91 05       	cpc	r25, r1
    7130:	09 f0       	breq	.+2      	; 0x7134 <mod_pump+0x296>
    7132:	ed c0       	rjmp	.+474    	; 0x730e <mod_pump+0x470>
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
    7134:	8a 88       	ldd	r8, Y+18	; 0x12
    7136:	9b 88       	ldd	r9, Y+19	; 0x13
    7138:	ac 88       	ldd	r10, Y+20	; 0x14
    713a:	bd 88       	ldd	r11, Y+21	; 0x15
    713c:	f1 01       	movw	r30, r2
    713e:	e3 8c       	ldd	r14, Z+27	; 0x1b
    7140:	f1 2c       	mov	r15, r1
    7142:	86 8d       	ldd	r24, Z+30	; 0x1e
    7144:	b7 01       	movw	r22, r14
    7146:	68 1b       	sub	r22, r24
    7148:	71 09       	sbc	r23, r1
    714a:	07 2e       	mov	r0, r23
    714c:	00 0c       	add	r0, r0
    714e:	88 0b       	sbc	r24, r24
    7150:	99 0b       	sbc	r25, r25
    7152:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    7156:	9b 01       	movw	r18, r22
    7158:	ac 01       	movw	r20, r24
    715a:	c5 01       	movw	r24, r10
    715c:	b4 01       	movw	r22, r8
    715e:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    7162:	88 23       	and	r24, r24
    7164:	1c f5       	brge	.+70     	; 0x71ac <mod_pump+0x30e>
    7166:	8c 81       	ldd	r24, Y+4	; 0x04
    7168:	81 11       	cpse	r24, r1
    716a:	3c c3       	rjmp	.+1656   	; 0x77e4 <mod_pump+0x946>
    716c:	8a 81       	ldd	r24, Y+2	; 0x02
    716e:	81 11       	cpse	r24, r1
    7170:	a2 c2       	rjmp	.+1348   	; 0x76b6 <mod_pump+0x818>
    7172:	88 81       	ld	r24, Y
    7174:	81 11       	cpse	r24, r1
    7176:	98 c3       	rjmp	.+1840   	; 0x78a8 <mod_pump+0xa0a>
    7178:	81 e0       	ldi	r24, 0x01	; 1
    717a:	8c 83       	std	Y+4, r24	; 0x04
    717c:	ce 01       	movw	r24, r28
    717e:	0e 94 f7 51 	call	0xa3ee	; 0xa3ee <calibration>
    7182:	10 92 65 0a 	sts	0x0A65, r1	; 0x800a65 <Comp_1+0x71>
    7186:	10 92 64 0a 	sts	0x0A64, r1	; 0x800a64 <Comp_1+0x70>
    718a:	ce 01       	movw	r24, r28
    718c:	7c de       	rcall	.-776    	; 0x6e86 <goToMode>
    718e:	8f e1       	ldi	r24, 0x1F	; 31
    7190:	96 e0       	ldi	r25, 0x06	; 6
    7192:	9f 93       	push	r25
    7194:	8f 93       	push	r24
    7196:	82 e3       	ldi	r24, 0x32	; 50
    7198:	98 e0       	ldi	r25, 0x08	; 8
    719a:	9f 93       	push	r25
    719c:	8f 93       	push	r24
    719e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    71a2:	0f 90       	pop	r0
    71a4:	0f 90       	pop	r0
    71a6:	0f 90       	pop	r0
    71a8:	0f 90       	pop	r0
    71aa:	76 c0       	rjmp	.+236    	; 0x7298 <mod_pump+0x3fa>
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    71ac:	4e 88       	ldd	r4, Y+22	; 0x16
    71ae:	5f 88       	ldd	r5, Y+23	; 0x17
    71b0:	68 8c       	ldd	r6, Y+24	; 0x18
    71b2:	79 8c       	ldd	r7, Y+25	; 0x19
    71b4:	f1 01       	movw	r30, r2
    71b6:	c1 8c       	ldd	r12, Z+25	; 0x19
    71b8:	d1 2c       	mov	r13, r1
    71ba:	84 8d       	ldd	r24, Z+28	; 0x1c
    71bc:	b6 01       	movw	r22, r12
    71be:	68 1b       	sub	r22, r24
    71c0:	71 09       	sbc	r23, r1
    71c2:	07 2e       	mov	r0, r23
    71c4:	00 0c       	add	r0, r0
    71c6:	88 0b       	sbc	r24, r24
    71c8:	99 0b       	sbc	r25, r25
    71ca:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    71ce:	9b 01       	movw	r18, r22
    71d0:	ac 01       	movw	r20, r24
    71d2:	c3 01       	movw	r24, r6
    71d4:	b2 01       	movw	r22, r4
    71d6:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    71da:	88 23       	and	r24, r24
    71dc:	1c f5       	brge	.+70     	; 0x7224 <mod_pump+0x386>
    71de:	8c 81       	ldd	r24, Y+4	; 0x04
    71e0:	81 11       	cpse	r24, r1
    71e2:	84 c2       	rjmp	.+1288   	; 0x76ec <mod_pump+0x84e>
    71e4:	8a 81       	ldd	r24, Y+2	; 0x02
    71e6:	81 11       	cpse	r24, r1
    71e8:	1d c0       	rjmp	.+58     	; 0x7224 <mod_pump+0x386>
    71ea:	88 81       	ld	r24, Y
    71ec:	81 11       	cpse	r24, r1
    71ee:	1a c0       	rjmp	.+52     	; 0x7224 <mod_pump+0x386>
    71f0:	ce 01       	movw	r24, r28
    71f2:	0e 94 f7 51 	call	0xa3ee	; 0xa3ee <calibration>
    71f6:	10 92 65 0a 	sts	0x0A65, r1	; 0x800a65 <Comp_1+0x71>
    71fa:	10 92 64 0a 	sts	0x0A64, r1	; 0x800a64 <Comp_1+0x70>
    71fe:	81 e0       	ldi	r24, 0x01	; 1
    7200:	8a 83       	std	Y+2, r24	; 0x02
    7202:	ce 01       	movw	r24, r28
    7204:	40 de       	rcall	.-896    	; 0x6e86 <goToMode>
    7206:	8d e2       	ldi	r24, 0x2D	; 45
    7208:	96 e0       	ldi	r25, 0x06	; 6
    720a:	9f 93       	push	r25
    720c:	8f 93       	push	r24
    720e:	82 e3       	ldi	r24, 0x32	; 50
    7210:	98 e0       	ldi	r25, 0x08	; 8
    7212:	9f 93       	push	r25
    7214:	8f 93       	push	r24
    7216:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    721a:	0f 90       	pop	r0
    721c:	0f 90       	pop	r0
    721e:	0f 90       	pop	r0
    7220:	0f 90       	pop	r0
    7222:	3a c0       	rjmp	.+116    	; 0x7298 <mod_pump+0x3fa>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7224:	b7 01       	movw	r22, r14
    7226:	ff 0c       	add	r15, r15
    7228:	88 0b       	sbc	r24, r24
    722a:	99 0b       	sbc	r25, r25
    722c:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    7230:	9b 01       	movw	r18, r22
    7232:	ac 01       	movw	r20, r24
    7234:	c5 01       	movw	r24, r10
    7236:	b4 01       	movw	r22, r8
    7238:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    723c:	18 16       	cp	r1, r24
    723e:	8c f4       	brge	.+34     	; 0x7262 <mod_pump+0x3c4>
    7240:	8c 81       	ldd	r24, Y+4	; 0x04
    7242:	88 23       	and	r24, r24
    7244:	09 f4       	brne	.+2      	; 0x7248 <mod_pump+0x3aa>
    7246:	62 c2       	rjmp	.+1220   	; 0x770c <mod_pump+0x86e>
    7248:	8a 81       	ldd	r24, Y+2	; 0x02
    724a:	81 11       	cpse	r24, r1
    724c:	25 c0       	rjmp	.+74     	; 0x7298 <mod_pump+0x3fa>
    724e:	88 81       	ld	r24, Y
    7250:	81 11       	cpse	r24, r1
    7252:	22 c0       	rjmp	.+68     	; 0x7298 <mod_pump+0x3fa>
    7254:	1c 82       	std	Y+4, r1	; 0x04
    7256:	ce 01       	movw	r24, r28
    7258:	1a dd       	rcall	.-1484   	; 0x6c8e <Comp_Stop>
    725a:	ce 01       	movw	r24, r28
    725c:	0e 94 a6 4f 	call	0x9f4c	; 0x9f4c <stopTrvTimer>
    7260:	1b c0       	rjmp	.+54     	; 0x7298 <mod_pump+0x3fa>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7262:	b6 01       	movw	r22, r12
    7264:	dd 0c       	add	r13, r13
    7266:	88 0b       	sbc	r24, r24
    7268:	99 0b       	sbc	r25, r25
    726a:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    726e:	a3 01       	movw	r20, r6
    7270:	92 01       	movw	r18, r4
    7272:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    7276:	88 23       	and	r24, r24
    7278:	7c f4       	brge	.+30     	; 0x7298 <mod_pump+0x3fa>
    727a:	8c 81       	ldd	r24, Y+4	; 0x04
    727c:	81 11       	cpse	r24, r1
    727e:	0c c0       	rjmp	.+24     	; 0x7298 <mod_pump+0x3fa>
    7280:	8a 81       	ldd	r24, Y+2	; 0x02
    7282:	88 23       	and	r24, r24
    7284:	49 f0       	breq	.+18     	; 0x7298 <mod_pump+0x3fa>
    7286:	88 81       	ld	r24, Y
    7288:	81 11       	cpse	r24, r1
    728a:	06 c0       	rjmp	.+12     	; 0x7298 <mod_pump+0x3fa>
    728c:	1a 82       	std	Y+2, r1	; 0x02
    728e:	ce 01       	movw	r24, r28
    7290:	fe dc       	rcall	.-1540   	; 0x6c8e <Comp_Stop>
    7292:	ce 01       	movw	r24, r28
    7294:	0e 94 a6 4f 	call	0x9f4c	; 0x9f4c <stopTrvTimer>
				if(EEpromData.NombComp==2) if(comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW)&& !comp->heatingWater && comp->Heating && !comp->switchToMode){comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_again\r\n");}	
    7298:	80 91 b4 09 	lds	r24, 0x09B4	; 0x8009b4 <EEpromData+0x20>
    729c:	82 30       	cpi	r24, 0x02	; 2
    729e:	09 f0       	breq	.+2      	; 0x72a2 <mod_pump+0x404>
    72a0:	39 c3       	rjmp	.+1650   	; 0x7914 <mod_pump+0xa76>
    72a2:	f1 01       	movw	r30, r2
    72a4:	63 8d       	ldd	r22, Z+27	; 0x1b
    72a6:	70 e0       	ldi	r23, 0x00	; 0
    72a8:	86 8d       	ldd	r24, Z+30	; 0x1e
    72aa:	68 1b       	sub	r22, r24
    72ac:	71 09       	sbc	r23, r1
    72ae:	07 2e       	mov	r0, r23
    72b0:	00 0c       	add	r0, r0
    72b2:	88 0b       	sbc	r24, r24
    72b4:	99 0b       	sbc	r25, r25
    72b6:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    72ba:	9b 01       	movw	r18, r22
    72bc:	ac 01       	movw	r20, r24
    72be:	6a 89       	ldd	r22, Y+18	; 0x12
    72c0:	7b 89       	ldd	r23, Y+19	; 0x13
    72c2:	8c 89       	ldd	r24, Y+20	; 0x14
    72c4:	9d 89       	ldd	r25, Y+21	; 0x15
    72c6:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    72ca:	88 23       	and	r24, r24
    72cc:	0c f0       	brlt	.+2      	; 0x72d0 <mod_pump+0x432>
    72ce:	22 c3       	rjmp	.+1604   	; 0x7914 <mod_pump+0xa76>
    72d0:	8c 81       	ldd	r24, Y+4	; 0x04
    72d2:	81 11       	cpse	r24, r1
    72d4:	1f c3       	rjmp	.+1598   	; 0x7914 <mod_pump+0xa76>
    72d6:	8a 81       	ldd	r24, Y+2	; 0x02
    72d8:	88 23       	and	r24, r24
    72da:	09 f4       	brne	.+2      	; 0x72de <mod_pump+0x440>
    72dc:	1b c3       	rjmp	.+1590   	; 0x7914 <mod_pump+0xa76>
    72de:	88 81       	ld	r24, Y
    72e0:	81 11       	cpse	r24, r1
    72e2:	18 c3       	rjmp	.+1584   	; 0x7914 <mod_pump+0xa76>
    72e4:	1a 82       	std	Y+2, r1	; 0x02
    72e6:	ce 01       	movw	r24, r28
    72e8:	d2 dc       	rcall	.-1628   	; 0x6c8e <Comp_Stop>
    72ea:	ce 01       	movw	r24, r28
    72ec:	0e 94 a6 4f 	call	0x9f4c	; 0x9f4c <stopTrvTimer>
    72f0:	8c e3       	ldi	r24, 0x3C	; 60
    72f2:	96 e0       	ldi	r25, 0x06	; 6
    72f4:	9f 93       	push	r25
    72f6:	8f 93       	push	r24
    72f8:	82 e3       	ldi	r24, 0x32	; 50
    72fa:	98 e0       	ldi	r25, 0x08	; 8
    72fc:	9f 93       	push	r25
    72fe:	8f 93       	push	r24
    7300:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7304:	0f 90       	pop	r0
    7306:	0f 90       	pop	r0
    7308:	0f 90       	pop	r0
    730a:	0f 90       	pop	r0
    730c:	03 c3       	rjmp	.+1542   	; 0x7914 <mod_pump+0xa76>
			}
			else if(comp->Index==2)
    730e:	02 97       	sbiw	r24, 0x02	; 2
    7310:	09 f0       	breq	.+2      	; 0x7314 <mod_pump+0x476>
    7312:	00 c3       	rjmp	.+1536   	; 0x7914 <mod_pump+0xa76>
			{
				if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {calibration(comp);comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_2\r\n");}
    7314:	8e 88       	ldd	r8, Y+22	; 0x16
    7316:	9f 88       	ldd	r9, Y+23	; 0x17
    7318:	a8 8c       	ldd	r10, Y+24	; 0x18
    731a:	b9 8c       	ldd	r11, Y+25	; 0x19
    731c:	f1 01       	movw	r30, r2
    731e:	e1 8c       	ldd	r14, Z+25	; 0x19
    7320:	f1 2c       	mov	r15, r1
    7322:	84 8d       	ldd	r24, Z+28	; 0x1c
    7324:	b7 01       	movw	r22, r14
    7326:	68 1b       	sub	r22, r24
    7328:	71 09       	sbc	r23, r1
    732a:	07 2e       	mov	r0, r23
    732c:	00 0c       	add	r0, r0
    732e:	88 0b       	sbc	r24, r24
    7330:	99 0b       	sbc	r25, r25
    7332:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    7336:	9b 01       	movw	r18, r22
    7338:	ac 01       	movw	r20, r24
    733a:	c5 01       	movw	r24, r10
    733c:	b4 01       	movw	r22, r8
    733e:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    7342:	88 23       	and	r24, r24
    7344:	dc f4       	brge	.+54     	; 0x737c <mod_pump+0x4de>
    7346:	8a 81       	ldd	r24, Y+2	; 0x02
    7348:	81 11       	cpse	r24, r1
    734a:	ee c1       	rjmp	.+988    	; 0x7728 <mod_pump+0x88a>
    734c:	88 81       	ld	r24, Y
    734e:	81 11       	cpse	r24, r1
    7350:	e1 c2       	rjmp	.+1474   	; 0x7914 <mod_pump+0xa76>
    7352:	ce 01       	movw	r24, r28
    7354:	0e 94 f7 51 	call	0xa3ee	; 0xa3ee <calibration>
    7358:	81 e0       	ldi	r24, 0x01	; 1
    735a:	8a 83       	std	Y+2, r24	; 0x02
    735c:	ce 01       	movw	r24, r28
    735e:	93 dd       	rcall	.-1242   	; 0x6e86 <goToMode>
    7360:	8e e4       	ldi	r24, 0x4E	; 78
    7362:	96 e0       	ldi	r25, 0x06	; 6
    7364:	9f 93       	push	r25
    7366:	8f 93       	push	r24
    7368:	82 e3       	ldi	r24, 0x32	; 50
    736a:	98 e0       	ldi	r25, 0x08	; 8
    736c:	9f 93       	push	r25
    736e:	8f 93       	push	r24
    7370:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7374:	0f 90       	pop	r0
    7376:	0f 90       	pop	r0
    7378:	0f 90       	pop	r0
    737a:	0f 90       	pop	r0
				if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    737c:	f1 01       	movw	r30, r2
    737e:	61 8d       	ldd	r22, Z+25	; 0x19
    7380:	70 e0       	ldi	r23, 0x00	; 0
    7382:	80 e0       	ldi	r24, 0x00	; 0
    7384:	90 e0       	ldi	r25, 0x00	; 0
    7386:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    738a:	9b 01       	movw	r18, r22
    738c:	ac 01       	movw	r20, r24
    738e:	6e 89       	ldd	r22, Y+22	; 0x16
    7390:	7f 89       	ldd	r23, Y+23	; 0x17
    7392:	88 8d       	ldd	r24, Y+24	; 0x18
    7394:	99 8d       	ldd	r25, Y+25	; 0x19
    7396:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    739a:	18 16       	cp	r1, r24
    739c:	0c f0       	brlt	.+2      	; 0x73a0 <mod_pump+0x502>
    739e:	ba c2       	rjmp	.+1396   	; 0x7914 <mod_pump+0xa76>
    73a0:	8a 81       	ldd	r24, Y+2	; 0x02
    73a2:	88 23       	and	r24, r24
    73a4:	09 f4       	brne	.+2      	; 0x73a8 <mod_pump+0x50a>
    73a6:	b6 c2       	rjmp	.+1388   	; 0x7914 <mod_pump+0xa76>
    73a8:	88 81       	ld	r24, Y
    73aa:	81 11       	cpse	r24, r1
    73ac:	b3 c2       	rjmp	.+1382   	; 0x7914 <mod_pump+0xa76>
    73ae:	1a 82       	std	Y+2, r1	; 0x02
    73b0:	ce 01       	movw	r24, r28
    73b2:	6d dc       	rcall	.-1830   	; 0x6c8e <Comp_Stop>
    73b4:	ce 01       	movw	r24, r28
    73b6:	0e 94 a6 4f 	call	0x9f4c	; 0x9f4c <stopTrvTimer>
    73ba:	ac c2       	rjmp	.+1368   	; 0x7914 <mod_pump+0xa76>
			
		}break;
		
		case COOL_DHW:
		{
			if(comp->Index==1)
    73bc:	fe 01       	movw	r30, r28
    73be:	ee 58       	subi	r30, 0x8E	; 142
    73c0:	ff 4f       	sbci	r31, 0xFF	; 255
    73c2:	80 81       	ld	r24, Z
    73c4:	91 81       	ldd	r25, Z+1	; 0x01
    73c6:	81 30       	cpi	r24, 0x01	; 1
    73c8:	91 05       	cpc	r25, r1
    73ca:	09 f0       	breq	.+2      	; 0x73ce <mod_pump+0x530>
    73cc:	e1 c0       	rjmp	.+450    	; 0x7590 <mod_pump+0x6f2>
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
    73ce:	8a 88       	ldd	r8, Y+18	; 0x12
    73d0:	9b 88       	ldd	r9, Y+19	; 0x13
    73d2:	ac 88       	ldd	r10, Y+20	; 0x14
    73d4:	bd 88       	ldd	r11, Y+21	; 0x15
    73d6:	f1 01       	movw	r30, r2
    73d8:	e3 8c       	ldd	r14, Z+27	; 0x1b
    73da:	f1 2c       	mov	r15, r1
    73dc:	86 8d       	ldd	r24, Z+30	; 0x1e
    73de:	b7 01       	movw	r22, r14
    73e0:	68 1b       	sub	r22, r24
    73e2:	71 09       	sbc	r23, r1
    73e4:	07 2e       	mov	r0, r23
    73e6:	00 0c       	add	r0, r0
    73e8:	88 0b       	sbc	r24, r24
    73ea:	99 0b       	sbc	r25, r25
    73ec:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    73f0:	9b 01       	movw	r18, r22
    73f2:	ac 01       	movw	r20, r24
    73f4:	c5 01       	movw	r24, r10
    73f6:	b4 01       	movw	r22, r8
    73f8:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    73fc:	88 23       	and	r24, r24
    73fe:	2c f5       	brge	.+74     	; 0x744a <mod_pump+0x5ac>
    7400:	8c 81       	ldd	r24, Y+4	; 0x04
    7402:	81 11       	cpse	r24, r1
    7404:	21 c2       	rjmp	.+1090   	; 0x7848 <mod_pump+0x9aa>
    7406:	8b 81       	ldd	r24, Y+3	; 0x03
    7408:	81 11       	cpse	r24, r1
    740a:	9e c1       	rjmp	.+828    	; 0x7748 <mod_pump+0x8aa>
    740c:	88 81       	ld	r24, Y
    740e:	81 11       	cpse	r24, r1
    7410:	66 c2       	rjmp	.+1228   	; 0x78de <mod_pump+0xa40>
    7412:	ff 24       	eor	r15, r15
    7414:	f3 94       	inc	r15
    7416:	fc 82       	std	Y+4, r15	; 0x04
    7418:	ce 01       	movw	r24, r28
    741a:	0e 94 f7 51 	call	0xa3ee	; 0xa3ee <calibration>
    741e:	10 92 65 0a 	sts	0x0A65, r1	; 0x800a65 <Comp_1+0x71>
    7422:	10 92 64 0a 	sts	0x0A64, r1	; 0x800a64 <Comp_1+0x70>
    7426:	fc 82       	std	Y+4, r15	; 0x04
    7428:	ce 01       	movw	r24, r28
    742a:	2d dd       	rcall	.-1446   	; 0x6e86 <goToMode>
    742c:	8d e5       	ldi	r24, 0x5D	; 93
    742e:	96 e0       	ldi	r25, 0x06	; 6
    7430:	9f 93       	push	r25
    7432:	8f 93       	push	r24
    7434:	82 e3       	ldi	r24, 0x32	; 50
    7436:	98 e0       	ldi	r25, 0x08	; 8
    7438:	9f 93       	push	r25
    743a:	8f 93       	push	r24
    743c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7440:	0f 90       	pop	r0
    7442:	0f 90       	pop	r0
    7444:	0f 90       	pop	r0
    7446:	0f 90       	pop	r0
    7448:	76 c0       	rjmp	.+236    	; 0x7536 <mod_pump+0x698>
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    744a:	4e 88       	ldd	r4, Y+22	; 0x16
    744c:	5f 88       	ldd	r5, Y+23	; 0x17
    744e:	68 8c       	ldd	r6, Y+24	; 0x18
    7450:	79 8c       	ldd	r7, Y+25	; 0x19
    7452:	f1 01       	movw	r30, r2
    7454:	c1 8c       	ldd	r12, Z+25	; 0x19
    7456:	d1 2c       	mov	r13, r1
    7458:	84 8d       	ldd	r24, Z+28	; 0x1c
    745a:	b6 01       	movw	r22, r12
    745c:	68 1b       	sub	r22, r24
    745e:	71 09       	sbc	r23, r1
    7460:	07 2e       	mov	r0, r23
    7462:	00 0c       	add	r0, r0
    7464:	88 0b       	sbc	r24, r24
    7466:	99 0b       	sbc	r25, r25
    7468:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    746c:	9b 01       	movw	r18, r22
    746e:	ac 01       	movw	r20, r24
    7470:	c3 01       	movw	r24, r6
    7472:	b2 01       	movw	r22, r4
    7474:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    7478:	88 23       	and	r24, r24
    747a:	1c f5       	brge	.+70     	; 0x74c2 <mod_pump+0x624>
    747c:	8c 81       	ldd	r24, Y+4	; 0x04
    747e:	81 11       	cpse	r24, r1
    7480:	7e c1       	rjmp	.+764    	; 0x777e <mod_pump+0x8e0>
    7482:	8b 81       	ldd	r24, Y+3	; 0x03
    7484:	81 11       	cpse	r24, r1
    7486:	1d c0       	rjmp	.+58     	; 0x74c2 <mod_pump+0x624>
    7488:	88 81       	ld	r24, Y
    748a:	81 11       	cpse	r24, r1
    748c:	1a c0       	rjmp	.+52     	; 0x74c2 <mod_pump+0x624>
    748e:	ce 01       	movw	r24, r28
    7490:	0e 94 f7 51 	call	0xa3ee	; 0xa3ee <calibration>
    7494:	10 92 65 0a 	sts	0x0A65, r1	; 0x800a65 <Comp_1+0x71>
    7498:	10 92 64 0a 	sts	0x0A64, r1	; 0x800a64 <Comp_1+0x70>
    749c:	81 e0       	ldi	r24, 0x01	; 1
    749e:	8b 83       	std	Y+3, r24	; 0x03
    74a0:	ce 01       	movw	r24, r28
    74a2:	f1 dc       	rcall	.-1566   	; 0x6e86 <goToMode>
    74a4:	8f e6       	ldi	r24, 0x6F	; 111
    74a6:	96 e0       	ldi	r25, 0x06	; 6
    74a8:	9f 93       	push	r25
    74aa:	8f 93       	push	r24
    74ac:	82 e3       	ldi	r24, 0x32	; 50
    74ae:	98 e0       	ldi	r25, 0x08	; 8
    74b0:	9f 93       	push	r25
    74b2:	8f 93       	push	r24
    74b4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    74b8:	0f 90       	pop	r0
    74ba:	0f 90       	pop	r0
    74bc:	0f 90       	pop	r0
    74be:	0f 90       	pop	r0
    74c0:	3a c0       	rjmp	.+116    	; 0x7536 <mod_pump+0x698>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    74c2:	b7 01       	movw	r22, r14
    74c4:	ff 0c       	add	r15, r15
    74c6:	88 0b       	sbc	r24, r24
    74c8:	99 0b       	sbc	r25, r25
    74ca:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    74ce:	9b 01       	movw	r18, r22
    74d0:	ac 01       	movw	r20, r24
    74d2:	c5 01       	movw	r24, r10
    74d4:	b4 01       	movw	r22, r8
    74d6:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    74da:	18 16       	cp	r1, r24
    74dc:	8c f4       	brge	.+34     	; 0x7500 <mod_pump+0x662>
    74de:	8c 81       	ldd	r24, Y+4	; 0x04
    74e0:	88 23       	and	r24, r24
    74e2:	09 f4       	brne	.+2      	; 0x74e6 <mod_pump+0x648>
    74e4:	5c c1       	rjmp	.+696    	; 0x779e <mod_pump+0x900>
    74e6:	8b 81       	ldd	r24, Y+3	; 0x03
    74e8:	81 11       	cpse	r24, r1
    74ea:	25 c0       	rjmp	.+74     	; 0x7536 <mod_pump+0x698>
    74ec:	88 81       	ld	r24, Y
    74ee:	81 11       	cpse	r24, r1
    74f0:	22 c0       	rjmp	.+68     	; 0x7536 <mod_pump+0x698>
    74f2:	1c 82       	std	Y+4, r1	; 0x04
    74f4:	ce 01       	movw	r24, r28
    74f6:	cb db       	rcall	.-2154   	; 0x6c8e <Comp_Stop>
    74f8:	ce 01       	movw	r24, r28
    74fa:	0e 94 a6 4f 	call	0x9f4c	; 0x9f4c <stopTrvTimer>
    74fe:	1b c0       	rjmp	.+54     	; 0x7536 <mod_pump+0x698>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7500:	b6 01       	movw	r22, r12
    7502:	dd 0c       	add	r13, r13
    7504:	88 0b       	sbc	r24, r24
    7506:	99 0b       	sbc	r25, r25
    7508:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    750c:	a3 01       	movw	r20, r6
    750e:	92 01       	movw	r18, r4
    7510:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    7514:	88 23       	and	r24, r24
    7516:	7c f4       	brge	.+30     	; 0x7536 <mod_pump+0x698>
    7518:	8c 81       	ldd	r24, Y+4	; 0x04
    751a:	81 11       	cpse	r24, r1
    751c:	0c c0       	rjmp	.+24     	; 0x7536 <mod_pump+0x698>
    751e:	8b 81       	ldd	r24, Y+3	; 0x03
    7520:	88 23       	and	r24, r24
    7522:	49 f0       	breq	.+18     	; 0x7536 <mod_pump+0x698>
    7524:	88 81       	ld	r24, Y
    7526:	81 11       	cpse	r24, r1
    7528:	06 c0       	rjmp	.+12     	; 0x7536 <mod_pump+0x698>
    752a:	1b 82       	std	Y+3, r1	; 0x03
    752c:	ce 01       	movw	r24, r28
    752e:	af db       	rcall	.-2210   	; 0x6c8e <Comp_Stop>
    7530:	ce 01       	movw	r24, r28
    7532:	0e 94 a6 4f 	call	0x9f4c	; 0x9f4c <stopTrvTimer>
				if(EEpromData.NombComp==2) if (comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && comp->Cooling && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}	
    7536:	80 91 b4 09 	lds	r24, 0x09B4	; 0x8009b4 <EEpromData+0x20>
    753a:	82 30       	cpi	r24, 0x02	; 2
    753c:	09 f0       	breq	.+2      	; 0x7540 <mod_pump+0x6a2>
    753e:	ea c1       	rjmp	.+980    	; 0x7914 <mod_pump+0xa76>
    7540:	f1 01       	movw	r30, r2
    7542:	63 8d       	ldd	r22, Z+27	; 0x1b
    7544:	70 e0       	ldi	r23, 0x00	; 0
    7546:	86 8d       	ldd	r24, Z+30	; 0x1e
    7548:	68 1b       	sub	r22, r24
    754a:	71 09       	sbc	r23, r1
    754c:	07 2e       	mov	r0, r23
    754e:	00 0c       	add	r0, r0
    7550:	88 0b       	sbc	r24, r24
    7552:	99 0b       	sbc	r25, r25
    7554:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    7558:	9b 01       	movw	r18, r22
    755a:	ac 01       	movw	r20, r24
    755c:	6a 89       	ldd	r22, Y+18	; 0x12
    755e:	7b 89       	ldd	r23, Y+19	; 0x13
    7560:	8c 89       	ldd	r24, Y+20	; 0x14
    7562:	9d 89       	ldd	r25, Y+21	; 0x15
    7564:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    7568:	88 23       	and	r24, r24
    756a:	0c f0       	brlt	.+2      	; 0x756e <mod_pump+0x6d0>
    756c:	d3 c1       	rjmp	.+934    	; 0x7914 <mod_pump+0xa76>
    756e:	8c 81       	ldd	r24, Y+4	; 0x04
    7570:	81 11       	cpse	r24, r1
    7572:	d0 c1       	rjmp	.+928    	; 0x7914 <mod_pump+0xa76>
    7574:	8b 81       	ldd	r24, Y+3	; 0x03
    7576:	88 23       	and	r24, r24
    7578:	09 f4       	brne	.+2      	; 0x757c <mod_pump+0x6de>
    757a:	cc c1       	rjmp	.+920    	; 0x7914 <mod_pump+0xa76>
    757c:	88 81       	ld	r24, Y
    757e:	81 11       	cpse	r24, r1
    7580:	c9 c1       	rjmp	.+914    	; 0x7914 <mod_pump+0xa76>
    7582:	1b 82       	std	Y+3, r1	; 0x03
    7584:	ce 01       	movw	r24, r28
    7586:	83 db       	rcall	.-2298   	; 0x6c8e <Comp_Stop>
    7588:	ce 01       	movw	r24, r28
    758a:	0e 94 a6 4f 	call	0x9f4c	; 0x9f4c <stopTrvTimer>
    758e:	c2 c1       	rjmp	.+900    	; 0x7914 <mod_pump+0xa76>
			}
			else if(comp->Index==2)
    7590:	02 97       	sbiw	r24, 0x02	; 2
    7592:	09 f0       	breq	.+2      	; 0x7596 <mod_pump+0x6f8>
    7594:	bf c1       	rjmp	.+894    	; 0x7914 <mod_pump+0xa76>
			{
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
    7596:	8e 88       	ldd	r8, Y+22	; 0x16
    7598:	9f 88       	ldd	r9, Y+23	; 0x17
    759a:	a8 8c       	ldd	r10, Y+24	; 0x18
    759c:	b9 8c       	ldd	r11, Y+25	; 0x19
    759e:	f1 01       	movw	r30, r2
    75a0:	e2 8c       	ldd	r14, Z+26	; 0x1a
    75a2:	f1 2c       	mov	r15, r1
    75a4:	b7 01       	movw	r22, r14
    75a6:	0f 2c       	mov	r0, r15
    75a8:	00 0c       	add	r0, r0
    75aa:	88 0b       	sbc	r24, r24
    75ac:	99 0b       	sbc	r25, r25
    75ae:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    75b2:	9b 01       	movw	r18, r22
    75b4:	ac 01       	movw	r20, r24
    75b6:	c5 01       	movw	r24, r10
    75b8:	b4 01       	movw	r22, r8
    75ba:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    75be:	88 23       	and	r24, r24
    75c0:	6c f4       	brge	.+26     	; 0x75dc <mod_pump+0x73e>
    75c2:	8b 81       	ldd	r24, Y+3	; 0x03
    75c4:	88 23       	and	r24, r24
    75c6:	09 f4       	brne	.+2      	; 0x75ca <mod_pump+0x72c>
    75c8:	f8 c0       	rjmp	.+496    	; 0x77ba <mod_pump+0x91c>
    75ca:	88 81       	ld	r24, Y
    75cc:	81 11       	cpse	r24, r1
    75ce:	a2 c1       	rjmp	.+836    	; 0x7914 <mod_pump+0xa76>
    75d0:	1b 82       	std	Y+3, r1	; 0x03
    75d2:	ce 01       	movw	r24, r28
    75d4:	5c db       	rcall	.-2376   	; 0x6c8e <Comp_Stop>
    75d6:	ce 01       	movw	r24, r28
    75d8:	0e 94 a6 4f 	call	0x9f4c	; 0x9f4c <stopTrvTimer>
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
    75dc:	f1 01       	movw	r30, r2
    75de:	82 8d       	ldd	r24, Z+26	; 0x1a
    75e0:	65 8d       	ldd	r22, Z+29	; 0x1d
    75e2:	70 e0       	ldi	r23, 0x00	; 0
    75e4:	68 0f       	add	r22, r24
    75e6:	71 1d       	adc	r23, r1
    75e8:	07 2e       	mov	r0, r23
    75ea:	00 0c       	add	r0, r0
    75ec:	88 0b       	sbc	r24, r24
    75ee:	99 0b       	sbc	r25, r25
    75f0:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    75f4:	9b 01       	movw	r18, r22
    75f6:	ac 01       	movw	r20, r24
    75f8:	6e 89       	ldd	r22, Y+22	; 0x16
    75fa:	7f 89       	ldd	r23, Y+23	; 0x17
    75fc:	88 8d       	ldd	r24, Y+24	; 0x18
    75fe:	99 8d       	ldd	r25, Y+25	; 0x19
    7600:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    7604:	18 16       	cp	r1, r24
    7606:	0c f0       	brlt	.+2      	; 0x760a <mod_pump+0x76c>
    7608:	85 c1       	rjmp	.+778    	; 0x7914 <mod_pump+0xa76>
    760a:	8b 81       	ldd	r24, Y+3	; 0x03
    760c:	81 11       	cpse	r24, r1
    760e:	82 c1       	rjmp	.+772    	; 0x7914 <mod_pump+0xa76>
    7610:	88 81       	ld	r24, Y
    7612:	81 11       	cpse	r24, r1
    7614:	7f c1       	rjmp	.+766    	; 0x7914 <mod_pump+0xa76>
    7616:	ce 01       	movw	r24, r28
    7618:	0e 94 f7 51 	call	0xa3ee	; 0xa3ee <calibration>
    761c:	81 e0       	ldi	r24, 0x01	; 1
    761e:	8b 83       	std	Y+3, r24	; 0x03
    7620:	ce 01       	movw	r24, r28
    7622:	31 dc       	rcall	.-1950   	; 0x6e86 <goToMode>
    7624:	81 e8       	ldi	r24, 0x81	; 129
    7626:	96 e0       	ldi	r25, 0x06	; 6
    7628:	9f 93       	push	r25
    762a:	8f 93       	push	r24
    762c:	82 e3       	ldi	r24, 0x32	; 50
    762e:	98 e0       	ldi	r25, 0x08	; 8
    7630:	9f 93       	push	r25
    7632:	8f 93       	push	r24
    7634:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7638:	0f 90       	pop	r0
    763a:	0f 90       	pop	r0
    763c:	0f 90       	pop	r0
    763e:	0f 90       	pop	r0
			}
		}break;
	}
}
    7640:	69 c1       	rjmp	.+722    	; 0x7914 <mod_pump+0xa76>

	switch(temp){
		case DHW: {
		if(comp->Index==1){
			if ( comp->Dhw_Temp > eeData->Set_DHW && comp->heatingWater && !comp->switchToMode) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp);}
			if ( comp->Dhw_Temp < (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->switchToMode){calibration(comp);Comp_1.error=0; comp->heatingWater=true; goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_Dhw\r\n");}//Start_Dhw();
    7642:	f1 01       	movw	r30, r2
    7644:	86 8d       	ldd	r24, Z+30	; 0x1e
    7646:	b7 01       	movw	r22, r14
    7648:	68 1b       	sub	r22, r24
    764a:	71 09       	sbc	r23, r1
    764c:	07 2e       	mov	r0, r23
    764e:	00 0c       	add	r0, r0
    7650:	88 0b       	sbc	r24, r24
    7652:	99 0b       	sbc	r25, r25
    7654:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    7658:	9b 01       	movw	r18, r22
    765a:	ac 01       	movw	r20, r24
    765c:	c5 01       	movw	r24, r10
    765e:	b4 01       	movw	r22, r8
    7660:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    7664:	88 23       	and	r24, r24
    7666:	0c f4       	brge	.+2      	; 0x766a <mod_pump+0x7cc>
    7668:	8d cc       	rjmp	.-1766   	; 0x6f84 <mod_pump+0xe6>
    766a:	54 c1       	rjmp	.+680    	; 0x7914 <mod_pump+0xa76>
		case HEAT:{
			//xSerialxPrintf(&xSerial3Port,"Set_Heating =%d\r\n,diffHEAT =%d\r\n,Bac_Temp =%f\r\n",eeData->Set_Heating,eeData->diffHEAT,data->Bac_Temp);
			//xSerialxPrintf(&xSerial3Port,"diffHEAT =%d\r\n",eeData->diffHEAT);
			//xSerialxPrintf(&xSerial3Port,"heat mode\r\n");
			if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {comp->Heating=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat\r\n");}
			if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    766c:	b7 01       	movw	r22, r14
    766e:	ff 0c       	add	r15, r15
    7670:	88 0b       	sbc	r24, r24
    7672:	99 0b       	sbc	r25, r25
    7674:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    7678:	9b 01       	movw	r18, r22
    767a:	ac 01       	movw	r20, r24
    767c:	c5 01       	movw	r24, r10
    767e:	b4 01       	movw	r22, r8
    7680:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    7684:	18 16       	cp	r1, r24
    7686:	0c f4       	brge	.+2      	; 0x768a <mod_pump+0x7ec>
    7688:	e8 cc       	rjmp	.-1584   	; 0x705a <mod_pump+0x1bc>
    768a:	44 c1       	rjmp	.+648    	; 0x7914 <mod_pump+0xa76>
		} break;
		
		case COOL:{
			//xSerialxPrintf(&xSerial3Port,"COOL mode\r\n");
			if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
			if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {comp->Cooling=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool\r\n");}//
    768c:	f1 01       	movw	r30, r2
    768e:	85 8d       	ldd	r24, Z+29	; 0x1d
    7690:	b7 01       	movw	r22, r14
    7692:	68 0f       	add	r22, r24
    7694:	71 1d       	adc	r23, r1
    7696:	07 2e       	mov	r0, r23
    7698:	00 0c       	add	r0, r0
    769a:	88 0b       	sbc	r24, r24
    769c:	99 0b       	sbc	r25, r25
    769e:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    76a2:	9b 01       	movw	r18, r22
    76a4:	ac 01       	movw	r20, r24
    76a6:	c5 01       	movw	r24, r10
    76a8:	b4 01       	movw	r22, r8
    76aa:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    76ae:	18 16       	cp	r1, r24
    76b0:	0c f4       	brge	.+2      	; 0x76b4 <mod_pump+0x816>
    76b2:	1a cd       	rjmp	.-1484   	; 0x70e8 <mod_pump+0x24a>
    76b4:	2f c1       	rjmp	.+606    	; 0x7914 <mod_pump+0xa76>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    76b6:	4e 88       	ldd	r4, Y+22	; 0x16
    76b8:	5f 88       	ldd	r5, Y+23	; 0x17
    76ba:	68 8c       	ldd	r6, Y+24	; 0x18
    76bc:	79 8c       	ldd	r7, Y+25	; 0x19
    76be:	f1 01       	movw	r30, r2
    76c0:	c1 8c       	ldd	r12, Z+25	; 0x19
    76c2:	d1 2c       	mov	r13, r1
    76c4:	84 8d       	ldd	r24, Z+28	; 0x1c
    76c6:	b6 01       	movw	r22, r12
    76c8:	68 1b       	sub	r22, r24
    76ca:	71 09       	sbc	r23, r1
    76cc:	07 2e       	mov	r0, r23
    76ce:	00 0c       	add	r0, r0
    76d0:	88 0b       	sbc	r24, r24
    76d2:	99 0b       	sbc	r25, r25
    76d4:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    76d8:	9b 01       	movw	r18, r22
    76da:	ac 01       	movw	r20, r24
    76dc:	c3 01       	movw	r24, r6
    76de:	b2 01       	movw	r22, r4
    76e0:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    76e4:	88 23       	and	r24, r24
    76e6:	0c f4       	brge	.+2      	; 0x76ea <mod_pump+0x84c>
    76e8:	7d cd       	rjmp	.-1286   	; 0x71e4 <mod_pump+0x346>
    76ea:	97 c0       	rjmp	.+302    	; 0x781a <mod_pump+0x97c>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    76ec:	b7 01       	movw	r22, r14
    76ee:	ff 0c       	add	r15, r15
    76f0:	88 0b       	sbc	r24, r24
    76f2:	99 0b       	sbc	r25, r25
    76f4:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    76f8:	9b 01       	movw	r18, r22
    76fa:	ac 01       	movw	r20, r24
    76fc:	c5 01       	movw	r24, r10
    76fe:	b4 01       	movw	r22, r8
    7700:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    7704:	18 16       	cp	r1, r24
    7706:	0c f4       	brge	.+2      	; 0x770a <mod_pump+0x86c>
    7708:	9f cd       	rjmp	.-1218   	; 0x7248 <mod_pump+0x3aa>
    770a:	97 c0       	rjmp	.+302    	; 0x783a <mod_pump+0x99c>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    770c:	b6 01       	movw	r22, r12
    770e:	dd 0c       	add	r13, r13
    7710:	88 0b       	sbc	r24, r24
    7712:	99 0b       	sbc	r25, r25
    7714:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    7718:	a3 01       	movw	r20, r6
    771a:	92 01       	movw	r18, r4
    771c:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    7720:	88 23       	and	r24, r24
    7722:	0c f4       	brge	.+2      	; 0x7726 <mod_pump+0x888>
    7724:	ad cd       	rjmp	.-1190   	; 0x7280 <mod_pump+0x3e2>
    7726:	b8 cd       	rjmp	.-1168   	; 0x7298 <mod_pump+0x3fa>
				if(EEpromData.NombComp==2) if(comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW)&& !comp->heatingWater && comp->Heating && !comp->switchToMode){comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_again\r\n");}	
			}
			else if(comp->Index==2)
			{
				if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {calibration(comp);comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_2\r\n");}
				if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    7728:	b7 01       	movw	r22, r14
    772a:	ff 0c       	add	r15, r15
    772c:	88 0b       	sbc	r24, r24
    772e:	99 0b       	sbc	r25, r25
    7730:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    7734:	9b 01       	movw	r18, r22
    7736:	ac 01       	movw	r20, r24
    7738:	c5 01       	movw	r24, r10
    773a:	b4 01       	movw	r22, r8
    773c:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    7740:	18 16       	cp	r1, r24
    7742:	0c f4       	brge	.+2      	; 0x7746 <mod_pump+0x8a8>
    7744:	31 ce       	rjmp	.-926    	; 0x73a8 <mod_pump+0x50a>
    7746:	e6 c0       	rjmp	.+460    	; 0x7914 <mod_pump+0xa76>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7748:	4e 88       	ldd	r4, Y+22	; 0x16
    774a:	5f 88       	ldd	r5, Y+23	; 0x17
    774c:	68 8c       	ldd	r6, Y+24	; 0x18
    774e:	79 8c       	ldd	r7, Y+25	; 0x19
    7750:	f1 01       	movw	r30, r2
    7752:	c1 8c       	ldd	r12, Z+25	; 0x19
    7754:	d1 2c       	mov	r13, r1
    7756:	84 8d       	ldd	r24, Z+28	; 0x1c
    7758:	b6 01       	movw	r22, r12
    775a:	68 1b       	sub	r22, r24
    775c:	71 09       	sbc	r23, r1
    775e:	07 2e       	mov	r0, r23
    7760:	00 0c       	add	r0, r0
    7762:	88 0b       	sbc	r24, r24
    7764:	99 0b       	sbc	r25, r25
    7766:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    776a:	9b 01       	movw	r18, r22
    776c:	ac 01       	movw	r20, r24
    776e:	c3 01       	movw	r24, r6
    7770:	b2 01       	movw	r22, r4
    7772:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    7776:	88 23       	and	r24, r24
    7778:	0c f4       	brge	.+2      	; 0x777c <mod_pump+0x8de>
    777a:	83 ce       	rjmp	.-762    	; 0x7482 <mod_pump+0x5e4>
    777c:	7e c0       	rjmp	.+252    	; 0x787a <mod_pump+0x9dc>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    777e:	b7 01       	movw	r22, r14
    7780:	ff 0c       	add	r15, r15
    7782:	88 0b       	sbc	r24, r24
    7784:	99 0b       	sbc	r25, r25
    7786:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    778a:	9b 01       	movw	r18, r22
    778c:	ac 01       	movw	r20, r24
    778e:	c5 01       	movw	r24, r10
    7790:	b4 01       	movw	r22, r8
    7792:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    7796:	18 16       	cp	r1, r24
    7798:	0c f4       	brge	.+2      	; 0x779c <mod_pump+0x8fe>
    779a:	a5 ce       	rjmp	.-694    	; 0x74e6 <mod_pump+0x648>
    779c:	7e c0       	rjmp	.+252    	; 0x789a <mod_pump+0x9fc>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    779e:	b6 01       	movw	r22, r12
    77a0:	dd 0c       	add	r13, r13
    77a2:	88 0b       	sbc	r24, r24
    77a4:	99 0b       	sbc	r25, r25
    77a6:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    77aa:	a3 01       	movw	r20, r6
    77ac:	92 01       	movw	r18, r4
    77ae:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    77b2:	88 23       	and	r24, r24
    77b4:	0c f4       	brge	.+2      	; 0x77b8 <mod_pump+0x91a>
    77b6:	b3 ce       	rjmp	.-666    	; 0x751e <mod_pump+0x680>
    77b8:	be ce       	rjmp	.-644    	; 0x7536 <mod_pump+0x698>
				if(EEpromData.NombComp==2) if (comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && comp->Cooling && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}	
			}
			else if(comp->Index==2)
			{
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
    77ba:	f1 01       	movw	r30, r2
    77bc:	85 8d       	ldd	r24, Z+29	; 0x1d
    77be:	b7 01       	movw	r22, r14
    77c0:	68 0f       	add	r22, r24
    77c2:	71 1d       	adc	r23, r1
    77c4:	07 2e       	mov	r0, r23
    77c6:	00 0c       	add	r0, r0
    77c8:	88 0b       	sbc	r24, r24
    77ca:	99 0b       	sbc	r25, r25
    77cc:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    77d0:	9b 01       	movw	r18, r22
    77d2:	ac 01       	movw	r20, r24
    77d4:	c5 01       	movw	r24, r10
    77d6:	b4 01       	movw	r22, r8
    77d8:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    77dc:	18 16       	cp	r1, r24
    77de:	0c f4       	brge	.+2      	; 0x77e2 <mod_pump+0x944>
    77e0:	17 cf       	rjmp	.-466    	; 0x7610 <mod_pump+0x772>
    77e2:	98 c0       	rjmp	.+304    	; 0x7914 <mod_pump+0xa76>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    77e4:	4e 88       	ldd	r4, Y+22	; 0x16
    77e6:	5f 88       	ldd	r5, Y+23	; 0x17
    77e8:	68 8c       	ldd	r6, Y+24	; 0x18
    77ea:	79 8c       	ldd	r7, Y+25	; 0x19
    77ec:	f1 01       	movw	r30, r2
    77ee:	c1 8c       	ldd	r12, Z+25	; 0x19
    77f0:	d1 2c       	mov	r13, r1
    77f2:	84 8d       	ldd	r24, Z+28	; 0x1c
    77f4:	b6 01       	movw	r22, r12
    77f6:	68 1b       	sub	r22, r24
    77f8:	71 09       	sbc	r23, r1
    77fa:	07 2e       	mov	r0, r23
    77fc:	00 0c       	add	r0, r0
    77fe:	88 0b       	sbc	r24, r24
    7800:	99 0b       	sbc	r25, r25
    7802:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    7806:	9b 01       	movw	r18, r22
    7808:	ac 01       	movw	r20, r24
    780a:	c3 01       	movw	r24, r6
    780c:	b2 01       	movw	r22, r4
    780e:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    7812:	88 23       	and	r24, r24
    7814:	0c f4       	brge	.+2      	; 0x7818 <mod_pump+0x97a>
    7816:	6a cf       	rjmp	.-300    	; 0x76ec <mod_pump+0x84e>
    7818:	05 cd       	rjmp	.-1526   	; 0x7224 <mod_pump+0x386>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    781a:	b7 01       	movw	r22, r14
    781c:	ff 0c       	add	r15, r15
    781e:	88 0b       	sbc	r24, r24
    7820:	99 0b       	sbc	r25, r25
    7822:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    7826:	9b 01       	movw	r18, r22
    7828:	ac 01       	movw	r20, r24
    782a:	c5 01       	movw	r24, r10
    782c:	b4 01       	movw	r22, r8
    782e:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    7832:	18 16       	cp	r1, r24
    7834:	0c f4       	brge	.+2      	; 0x7838 <mod_pump+0x99a>
    7836:	6a cf       	rjmp	.-300    	; 0x770c <mod_pump+0x86e>
    7838:	14 cd       	rjmp	.-1496   	; 0x7262 <mod_pump+0x3c4>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    783a:	b6 01       	movw	r22, r12
    783c:	dd 0c       	add	r13, r13
    783e:	88 0b       	sbc	r24, r24
    7840:	99 0b       	sbc	r25, r25
    7842:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    7846:	28 cd       	rjmp	.-1456   	; 0x7298 <mod_pump+0x3fa>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7848:	4e 88       	ldd	r4, Y+22	; 0x16
    784a:	5f 88       	ldd	r5, Y+23	; 0x17
    784c:	68 8c       	ldd	r6, Y+24	; 0x18
    784e:	79 8c       	ldd	r7, Y+25	; 0x19
    7850:	f1 01       	movw	r30, r2
    7852:	c1 8c       	ldd	r12, Z+25	; 0x19
    7854:	d1 2c       	mov	r13, r1
    7856:	84 8d       	ldd	r24, Z+28	; 0x1c
    7858:	b6 01       	movw	r22, r12
    785a:	68 1b       	sub	r22, r24
    785c:	71 09       	sbc	r23, r1
    785e:	07 2e       	mov	r0, r23
    7860:	00 0c       	add	r0, r0
    7862:	88 0b       	sbc	r24, r24
    7864:	99 0b       	sbc	r25, r25
    7866:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    786a:	a3 01       	movw	r20, r6
    786c:	92 01       	movw	r18, r4
    786e:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    7872:	18 16       	cp	r1, r24
    7874:	0c f4       	brge	.+2      	; 0x7878 <mod_pump+0x9da>
    7876:	83 cf       	rjmp	.-250    	; 0x777e <mod_pump+0x8e0>
    7878:	24 ce       	rjmp	.-952    	; 0x74c2 <mod_pump+0x624>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    787a:	b7 01       	movw	r22, r14
    787c:	ff 0c       	add	r15, r15
    787e:	88 0b       	sbc	r24, r24
    7880:	99 0b       	sbc	r25, r25
    7882:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    7886:	9b 01       	movw	r18, r22
    7888:	ac 01       	movw	r20, r24
    788a:	c5 01       	movw	r24, r10
    788c:	b4 01       	movw	r22, r8
    788e:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    7892:	18 16       	cp	r1, r24
    7894:	0c f4       	brge	.+2      	; 0x7898 <mod_pump+0x9fa>
    7896:	83 cf       	rjmp	.-250    	; 0x779e <mod_pump+0x900>
    7898:	33 ce       	rjmp	.-922    	; 0x7500 <mod_pump+0x662>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    789a:	b6 01       	movw	r22, r12
    789c:	dd 0c       	add	r13, r13
    789e:	88 0b       	sbc	r24, r24
    78a0:	99 0b       	sbc	r25, r25
    78a2:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    78a6:	47 ce       	rjmp	.-882    	; 0x7536 <mod_pump+0x698>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    78a8:	4e 88       	ldd	r4, Y+22	; 0x16
    78aa:	5f 88       	ldd	r5, Y+23	; 0x17
    78ac:	68 8c       	ldd	r6, Y+24	; 0x18
    78ae:	79 8c       	ldd	r7, Y+25	; 0x19
    78b0:	f1 01       	movw	r30, r2
    78b2:	c1 8c       	ldd	r12, Z+25	; 0x19
    78b4:	d1 2c       	mov	r13, r1
    78b6:	84 8d       	ldd	r24, Z+28	; 0x1c
    78b8:	b6 01       	movw	r22, r12
    78ba:	68 1b       	sub	r22, r24
    78bc:	71 09       	sbc	r23, r1
    78be:	07 2e       	mov	r0, r23
    78c0:	00 0c       	add	r0, r0
    78c2:	88 0b       	sbc	r24, r24
    78c4:	99 0b       	sbc	r25, r25
    78c6:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    78ca:	9b 01       	movw	r18, r22
    78cc:	ac 01       	movw	r20, r24
    78ce:	c3 01       	movw	r24, r6
    78d0:	b2 01       	movw	r22, r4
    78d2:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    78d6:	88 23       	and	r24, r24
    78d8:	0c f4       	brge	.+2      	; 0x78dc <mod_pump+0xa3e>
    78da:	87 cc       	rjmp	.-1778   	; 0x71ea <mod_pump+0x34c>
    78dc:	9e cf       	rjmp	.-196    	; 0x781a <mod_pump+0x97c>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    78de:	4e 88       	ldd	r4, Y+22	; 0x16
    78e0:	5f 88       	ldd	r5, Y+23	; 0x17
    78e2:	68 8c       	ldd	r6, Y+24	; 0x18
    78e4:	79 8c       	ldd	r7, Y+25	; 0x19
    78e6:	f1 01       	movw	r30, r2
    78e8:	c1 8c       	ldd	r12, Z+25	; 0x19
    78ea:	d1 2c       	mov	r13, r1
    78ec:	84 8d       	ldd	r24, Z+28	; 0x1c
    78ee:	b6 01       	movw	r22, r12
    78f0:	68 1b       	sub	r22, r24
    78f2:	71 09       	sbc	r23, r1
    78f4:	07 2e       	mov	r0, r23
    78f6:	00 0c       	add	r0, r0
    78f8:	88 0b       	sbc	r24, r24
    78fa:	99 0b       	sbc	r25, r25
    78fc:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    7900:	9b 01       	movw	r18, r22
    7902:	ac 01       	movw	r20, r24
    7904:	c3 01       	movw	r24, r6
    7906:	b2 01       	movw	r22, r4
    7908:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    790c:	88 23       	and	r24, r24
    790e:	0c f4       	brge	.+2      	; 0x7912 <mod_pump+0xa74>
    7910:	bb cd       	rjmp	.-1162   	; 0x7488 <mod_pump+0x5ea>
    7912:	b3 cf       	rjmp	.-154    	; 0x787a <mod_pump+0x9dc>
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
			}
		}break;
	}
}
    7914:	df 91       	pop	r29
    7916:	cf 91       	pop	r28
    7918:	1f 91       	pop	r17
    791a:	ff 90       	pop	r15
    791c:	ef 90       	pop	r14
    791e:	df 90       	pop	r13
    7920:	cf 90       	pop	r12
    7922:	bf 90       	pop	r11
    7924:	af 90       	pop	r10
    7926:	9f 90       	pop	r9
    7928:	8f 90       	pop	r8
    792a:	7f 90       	pop	r7
    792c:	6f 90       	pop	r6
    792e:	5f 90       	pop	r5
    7930:	4f 90       	pop	r4
    7932:	3f 90       	pop	r3
    7934:	2f 90       	pop	r2
    7936:	08 95       	ret

00007938 <initPins>:
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void initPins()
{

	DDRG |= (_BV(PG4) | _BV(PG3));
    7938:	83 b3       	in	r24, 0x13	; 19
    793a:	88 61       	ori	r24, 0x18	; 24
    793c:	83 bb       	out	0x13, r24	; 19
	DDRH |= (_BV(PH7) | _BV(PH6) | _BV(PH5) | _BV(PH4) | _BV(PH3) | _BV(PH1) | _BV(PH2));
    793e:	e1 e0       	ldi	r30, 0x01	; 1
    7940:	f1 e0       	ldi	r31, 0x01	; 1
    7942:	80 81       	ld	r24, Z
    7944:	8e 6f       	ori	r24, 0xFE	; 254
    7946:	80 83       	st	Z, r24
	DDRL |= (_BV(PL2) | _BV(PL1) | _BV(PL0));
    7948:	ea e0       	ldi	r30, 0x0A	; 10
    794a:	f1 e0       	ldi	r31, 0x01	; 1
    794c:	80 81       	ld	r24, Z
    794e:	87 60       	ori	r24, 0x07	; 7
    7950:	80 83       	st	Z, r24
	DDRD &= (_BV(PD2) | _BV(PD3));
    7952:	8a b1       	in	r24, 0x0a	; 10
    7954:	8c 70       	andi	r24, 0x0C	; 12
    7956:	8a b9       	out	0x0a, r24	; 10
	DDRE &= (_BV(PE5));
    7958:	8d b1       	in	r24, 0x0d	; 13
    795a:	80 72       	andi	r24, 0x20	; 32
    795c:	8d b9       	out	0x0d, r24	; 13
	DDRA = 0xFF;
    795e:	8f ef       	ldi	r24, 0xFF	; 255
    7960:	81 b9       	out	0x01, r24	; 1
	PORTD|= (_BV(PD2) | _BV(PD3));
    7962:	8b b1       	in	r24, 0x0b	; 11
    7964:	8c 60       	ori	r24, 0x0C	; 12
    7966:	8b b9       	out	0x0b, r24	; 11
	PORTE|= (_BV(PE5));
    7968:	75 9a       	sbi	0x0e, 5	; 14
	
    DDRJ|= (_BV(PIN_rs485));
    796a:	e4 e0       	ldi	r30, 0x04	; 4
    796c:	f1 e0       	ldi	r31, 0x01	; 1
    796e:	80 81       	ld	r24, Z
    7970:	84 60       	ori	r24, 0x04	; 4
    7972:	80 83       	st	Z, r24
    7974:	08 95       	ret

00007976 <ConvertToTemp>:
	return (ADC_value - Low_Limit_HP) * HP_max/ (Hi_Limit_HP - Low_Limit_HP);
}

float ConvertToLowPress(uint16_t ADC_value){
	return (ADC_value - Low_Limit_LP) * LP_max/ (Hi_Limit_LP - Low_Limit_LP) ;
}
    7976:	8f 92       	push	r8
    7978:	9f 92       	push	r9
    797a:	af 92       	push	r10
    797c:	bf 92       	push	r11
    797e:	cf 92       	push	r12
    7980:	df 92       	push	r13
    7982:	ef 92       	push	r14
    7984:	ff 92       	push	r15
    7986:	bc 01       	movw	r22, r24
    7988:	80 e0       	ldi	r24, 0x00	; 0
    798a:	90 e0       	ldi	r25, 0x00	; 0
    798c:	0e 94 08 53 	call	0xa610	; 0xa610 <__floatunsisf>
    7990:	9b 01       	movw	r18, r22
    7992:	ac 01       	movw	r20, r24
    7994:	60 e0       	ldi	r22, 0x00	; 0
    7996:	70 ec       	ldi	r23, 0xC0	; 192
    7998:	8f e7       	ldi	r24, 0x7F	; 127
    799a:	94 e4       	ldi	r25, 0x44	; 68
    799c:	0e 94 6f 52 	call	0xa4de	; 0xa4de <__divsf3>
    79a0:	20 e0       	ldi	r18, 0x00	; 0
    79a2:	30 e0       	ldi	r19, 0x00	; 0
    79a4:	40 e8       	ldi	r20, 0x80	; 128
    79a6:	5f e3       	ldi	r21, 0x3F	; 63
    79a8:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    79ac:	20 e0       	ldi	r18, 0x00	; 0
    79ae:	30 e4       	ldi	r19, 0x40	; 64
    79b0:	4c e1       	ldi	r20, 0x1C	; 28
    79b2:	56 e4       	ldi	r21, 0x46	; 70
    79b4:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    79b8:	0e 94 c3 53 	call	0xa786	; 0xa786 <log>
    79bc:	6b 01       	movw	r12, r22
    79be:	7c 01       	movw	r14, r24
    79c0:	29 e5       	ldi	r18, 0x59	; 89
    79c2:	37 e4       	ldi	r19, 0x47	; 71
    79c4:	4c eb       	ldi	r20, 0xBC	; 188
    79c6:	53 e3       	ldi	r21, 0x33	; 51
    79c8:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    79cc:	a7 01       	movw	r20, r14
    79ce:	96 01       	movw	r18, r12
    79d0:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    79d4:	a7 01       	movw	r20, r14
    79d6:	96 01       	movw	r18, r12
    79d8:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    79dc:	4b 01       	movw	r8, r22
    79de:	5c 01       	movw	r10, r24
    79e0:	2b e0       	ldi	r18, 0x0B	; 11
    79e2:	31 ee       	ldi	r19, 0xE1	; 225
    79e4:	45 e7       	ldi	r20, 0x75	; 117
    79e6:	59 e3       	ldi	r21, 0x39	; 57
    79e8:	c7 01       	movw	r24, r14
    79ea:	b6 01       	movw	r22, r12
    79ec:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    79f0:	29 ed       	ldi	r18, 0xD9	; 217
    79f2:	3d ea       	ldi	r19, 0xAD	; 173
    79f4:	49 ea       	ldi	r20, 0xA9	; 169
    79f6:	5a e3       	ldi	r21, 0x3A	; 58
    79f8:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    79fc:	9b 01       	movw	r18, r22
    79fe:	ac 01       	movw	r20, r24
    7a00:	c5 01       	movw	r24, r10
    7a02:	b4 01       	movw	r22, r8
    7a04:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    7a08:	9b 01       	movw	r18, r22
    7a0a:	ac 01       	movw	r20, r24
    7a0c:	60 e0       	ldi	r22, 0x00	; 0
    7a0e:	70 e0       	ldi	r23, 0x00	; 0
    7a10:	80 e8       	ldi	r24, 0x80	; 128
    7a12:	9f e3       	ldi	r25, 0x3F	; 63
    7a14:	0e 94 6f 52 	call	0xa4de	; 0xa4de <__divsf3>
    7a18:	23 e3       	ldi	r18, 0x33	; 51
    7a1a:	33 e9       	ldi	r19, 0x93	; 147
    7a1c:	48 e8       	ldi	r20, 0x88	; 136
    7a1e:	53 e4       	ldi	r21, 0x43	; 67
    7a20:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    7a24:	ff 90       	pop	r15
    7a26:	ef 90       	pop	r14
    7a28:	df 90       	pop	r13
    7a2a:	cf 90       	pop	r12
    7a2c:	bf 90       	pop	r11
    7a2e:	af 90       	pop	r10
    7a30:	9f 90       	pop	r9
    7a32:	8f 90       	pop	r8
    7a34:	08 95       	ret

00007a36 <ReadSuperHeat>:
					}

return;	
}

float  ReadSuperHeat (xCompressor *comp){
    7a36:	4f 92       	push	r4
    7a38:	5f 92       	push	r5
    7a3a:	6f 92       	push	r6
    7a3c:	7f 92       	push	r7
    7a3e:	8f 92       	push	r8
    7a40:	9f 92       	push	r9
    7a42:	af 92       	push	r10
    7a44:	bf 92       	push	r11
    7a46:	cf 92       	push	r12
    7a48:	df 92       	push	r13
    7a4a:	ef 92       	push	r14
    7a4c:	ff 92       	push	r15
    7a4e:	cf 93       	push	r28
    7a50:	df 93       	push	r29
    7a52:	ec 01       	movw	r28, r24
	float Val, Next_val, Span, Saturation_Temp, decimals, work;
	int I;
	work = ((comp->Low_Press - 1.0) / 1.0);
    7a54:	20 e0       	ldi	r18, 0x00	; 0
    7a56:	30 e0       	ldi	r19, 0x00	; 0
    7a58:	40 e8       	ldi	r20, 0x80	; 128
    7a5a:	5f e3       	ldi	r21, 0x3F	; 63
    7a5c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    7a5e:	7f 8d       	ldd	r23, Y+31	; 0x1f
    7a60:	88 a1       	ldd	r24, Y+32	; 0x20
    7a62:	99 a1       	ldd	r25, Y+33	; 0x21
    7a64:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    7a68:	4b 01       	movw	r8, r22
    7a6a:	5c 01       	movw	r10, r24
	I = work;                                //drop decimals to get array index
    7a6c:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixsfsi>
	decimals = work - I; //restore decimals for interpolation between array points
	Val = pgm_read_float(&R22_Saturation_Temp[I]);           //get array value
    7a70:	fb 01       	movw	r30, r22
    7a72:	ee 0f       	add	r30, r30
    7a74:	ff 1f       	adc	r31, r31
    7a76:	ee 0f       	add	r30, r30
    7a78:	ff 1f       	adc	r31, r31
    7a7a:	e0 51       	subi	r30, 0x10	; 16
    7a7c:	f6 4f       	sbci	r31, 0xF6	; 246
    7a7e:	c5 90       	lpm	r12, Z+
    7a80:	d5 90       	lpm	r13, Z+
    7a82:	e5 90       	lpm	r14, Z+
    7a84:	f4 90       	lpm	r15, Z
	Next_val = pgm_read_float(&R22_Saturation_Temp[I + 1]);  //get Next array value
    7a86:	fb 01       	movw	r30, r22
    7a88:	31 96       	adiw	r30, 0x01	; 1
    7a8a:	ee 0f       	add	r30, r30
    7a8c:	ff 1f       	adc	r31, r31
    7a8e:	ee 0f       	add	r30, r30
    7a90:	ff 1f       	adc	r31, r31
    7a92:	e0 51       	subi	r30, 0x10	; 16
    7a94:	f6 4f       	sbci	r31, 0xF6	; 246
    7a96:	45 90       	lpm	r4, Z+
    7a98:	55 90       	lpm	r5, Z+
    7a9a:	65 90       	lpm	r6, Z+
    7a9c:	74 90       	lpm	r7, Z
	Span = Next_val - Val;                  //Calc Span
	Saturation_Temp = Val + (Span * decimals);//interpolate between array points
		
	return(comp->Suc_Comp - Saturation_Temp);// Suct_T - Saturation_Temp;
    7a9e:	ee 96       	adiw	r28, 0x3e	; 62
    7aa0:	07 2e       	mov	r0, r23
    7aa2:	00 0c       	add	r0, r0
    7aa4:	88 0b       	sbc	r24, r24
    7aa6:	99 0b       	sbc	r25, r25
    7aa8:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    7aac:	9b 01       	movw	r18, r22
    7aae:	ac 01       	movw	r20, r24
    7ab0:	c5 01       	movw	r24, r10
    7ab2:	b4 01       	movw	r22, r8
    7ab4:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    7ab8:	4b 01       	movw	r8, r22
    7aba:	5c 01       	movw	r10, r24
    7abc:	a7 01       	movw	r20, r14
    7abe:	96 01       	movw	r18, r12
    7ac0:	c3 01       	movw	r24, r6
    7ac2:	b2 01       	movw	r22, r4
    7ac4:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    7ac8:	9b 01       	movw	r18, r22
    7aca:	ac 01       	movw	r20, r24
    7acc:	c5 01       	movw	r24, r10
    7ace:	b4 01       	movw	r22, r8
    7ad0:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7ad4:	a7 01       	movw	r20, r14
    7ad6:	96 01       	movw	r18, r12
    7ad8:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    7adc:	9b 01       	movw	r18, r22
    7ade:	ac 01       	movw	r20, r24
    7ae0:	68 81       	ld	r22, Y
    7ae2:	79 81       	ldd	r23, Y+1	; 0x01
    7ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    7ae6:	9b 81       	ldd	r25, Y+3	; 0x03
    7ae8:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>

}
    7aec:	df 91       	pop	r29
    7aee:	cf 91       	pop	r28
    7af0:	ff 90       	pop	r15
    7af2:	ef 90       	pop	r14
    7af4:	df 90       	pop	r13
    7af6:	cf 90       	pop	r12
    7af8:	bf 90       	pop	r11
    7afa:	af 90       	pop	r10
    7afc:	9f 90       	pop	r9
    7afe:	8f 90       	pop	r8
    7b00:	7f 90       	pop	r7
    7b02:	6f 90       	pop	r6
    7b04:	5f 90       	pop	r5
    7b06:	4f 90       	pop	r4
    7b08:	08 95       	ret

00007b0a <ReadSuperCool>:
float ReadSuperCool (xCompressor *comp){
    7b0a:	4f 92       	push	r4
    7b0c:	5f 92       	push	r5
    7b0e:	6f 92       	push	r6
    7b10:	7f 92       	push	r7
    7b12:	8f 92       	push	r8
    7b14:	9f 92       	push	r9
    7b16:	af 92       	push	r10
    7b18:	bf 92       	push	r11
    7b1a:	cf 92       	push	r12
    7b1c:	df 92       	push	r13
    7b1e:	ef 92       	push	r14
    7b20:	ff 92       	push	r15
    7b22:	cf 93       	push	r28
    7b24:	df 93       	push	r29
    7b26:	ec 01       	movw	r28, r24
	float Val, Next_val, Span, Saturation_Temp, decimals, work;
	int I;
	work = ((comp->High_Press - 1.0) / 1.0);
    7b28:	20 e0       	ldi	r18, 0x00	; 0
    7b2a:	30 e0       	ldi	r19, 0x00	; 0
    7b2c:	40 e8       	ldi	r20, 0x80	; 128
    7b2e:	5f e3       	ldi	r21, 0x3F	; 63
    7b30:	6a 8d       	ldd	r22, Y+26	; 0x1a
    7b32:	7b 8d       	ldd	r23, Y+27	; 0x1b
    7b34:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7b36:	9d 8d       	ldd	r25, Y+29	; 0x1d
    7b38:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    7b3c:	4b 01       	movw	r8, r22
    7b3e:	5c 01       	movw	r10, r24

	I = work;                                //drop decimals to get array index
    7b40:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixsfsi>

	decimals = work - I; //restore decimals for interpolation between array points
	Val = pgm_read_float(&R22_Saturation_Temp[I]);           //get array value
    7b44:	fb 01       	movw	r30, r22
    7b46:	ee 0f       	add	r30, r30
    7b48:	ff 1f       	adc	r31, r31
    7b4a:	ee 0f       	add	r30, r30
    7b4c:	ff 1f       	adc	r31, r31
    7b4e:	e0 51       	subi	r30, 0x10	; 16
    7b50:	f6 4f       	sbci	r31, 0xF6	; 246
    7b52:	c5 90       	lpm	r12, Z+
    7b54:	d5 90       	lpm	r13, Z+
    7b56:	e5 90       	lpm	r14, Z+
    7b58:	f4 90       	lpm	r15, Z
	Next_val = pgm_read_float(&R22_Saturation_Temp[I + 1]);  //get Next array value
    7b5a:	fb 01       	movw	r30, r22
    7b5c:	31 96       	adiw	r30, 0x01	; 1
    7b5e:	ee 0f       	add	r30, r30
    7b60:	ff 1f       	adc	r31, r31
    7b62:	ee 0f       	add	r30, r30
    7b64:	ff 1f       	adc	r31, r31
    7b66:	e0 51       	subi	r30, 0x10	; 16
    7b68:	f6 4f       	sbci	r31, 0xF6	; 246
    7b6a:	45 90       	lpm	r4, Z+
    7b6c:	55 90       	lpm	r5, Z+
    7b6e:	65 90       	lpm	r6, Z+
    7b70:	74 90       	lpm	r7, Z
	Span = Next_val - Val;                   //Calc Span
	Saturation_Temp = Val + (Span * decimals);//interpolate between array points
	
    return(Saturation_Temp - comp->Cond_Temp);// Suct_T - Saturation_Temp;	
    7b72:	07 2e       	mov	r0, r23
    7b74:	00 0c       	add	r0, r0
    7b76:	88 0b       	sbc	r24, r24
    7b78:	99 0b       	sbc	r25, r25
    7b7a:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    7b7e:	9b 01       	movw	r18, r22
    7b80:	ac 01       	movw	r20, r24
    7b82:	c5 01       	movw	r24, r10
    7b84:	b4 01       	movw	r22, r8
    7b86:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    7b8a:	4b 01       	movw	r8, r22
    7b8c:	5c 01       	movw	r10, r24
    7b8e:	a7 01       	movw	r20, r14
    7b90:	96 01       	movw	r18, r12
    7b92:	c3 01       	movw	r24, r6
    7b94:	b2 01       	movw	r22, r4
    7b96:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    7b9a:	9b 01       	movw	r18, r22
    7b9c:	ac 01       	movw	r20, r24
    7b9e:	c5 01       	movw	r24, r10
    7ba0:	b4 01       	movw	r22, r8
    7ba2:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7ba6:	a7 01       	movw	r20, r14
    7ba8:	96 01       	movw	r18, r12
    7baa:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    7bae:	ce 5b       	subi	r28, 0xBE	; 190
    7bb0:	df 4f       	sbci	r29, 0xFF	; 255
    7bb2:	28 81       	ld	r18, Y
    7bb4:	39 81       	ldd	r19, Y+1	; 0x01
    7bb6:	4a 81       	ldd	r20, Y+2	; 0x02
    7bb8:	5b 81       	ldd	r21, Y+3	; 0x03
    7bba:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
}
    7bbe:	df 91       	pop	r29
    7bc0:	cf 91       	pop	r28
    7bc2:	ff 90       	pop	r15
    7bc4:	ef 90       	pop	r14
    7bc6:	df 90       	pop	r13
    7bc8:	cf 90       	pop	r12
    7bca:	bf 90       	pop	r11
    7bcc:	af 90       	pop	r10
    7bce:	9f 90       	pop	r9
    7bd0:	8f 90       	pop	r8
    7bd2:	7f 90       	pop	r7
    7bd4:	6f 90       	pop	r6
    7bd6:	5f 90       	pop	r5
    7bd8:	4f 90       	pop	r4
    7bda:	08 95       	ret

00007bdc <corectTrv>:
//-------------------------------------------------------------
float  corectTrv(xCompressor *comp){
    7bdc:	4f 92       	push	r4
    7bde:	5f 92       	push	r5
    7be0:	6f 92       	push	r6
    7be2:	7f 92       	push	r7
    7be4:	8f 92       	push	r8
    7be6:	9f 92       	push	r9
    7be8:	af 92       	push	r10
    7bea:	bf 92       	push	r11
    7bec:	cf 92       	push	r12
    7bee:	df 92       	push	r13
    7bf0:	ef 92       	push	r14
    7bf2:	ff 92       	push	r15
    7bf4:	cf 93       	push	r28
    7bf6:	df 93       	push	r29
	static float Superheat_old=0;
	int SSet;
	float ds;
	float Superheat;
	Superheat=comp->SuperHeat;
    7bf8:	8a 5b       	subi	r24, 0xBA	; 186
    7bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    7bfc:	fc 01       	movw	r30, r24
    7bfe:	c0 80       	ld	r12, Z
    7c00:	d1 80       	ldd	r13, Z+1	; 0x01
    7c02:	e2 80       	ldd	r14, Z+2	; 0x02
    7c04:	f3 80       	ldd	r15, Z+3	; 0x03
	ds = Superheat - Superheat_old; // calculate the change in Superheat
    7c06:	20 91 dd 07 	lds	r18, 0x07DD	; 0x8007dd <Superheat_old.3263>
    7c0a:	30 91 de 07 	lds	r19, 0x07DE	; 0x8007de <Superheat_old.3263+0x1>
    7c0e:	40 91 df 07 	lds	r20, 0x07DF	; 0x8007df <Superheat_old.3263+0x2>
    7c12:	50 91 e0 07 	lds	r21, 0x07E0	; 0x8007e0 <Superheat_old.3263+0x3>
    7c16:	c7 01       	movw	r24, r14
    7c18:	b6 01       	movw	r22, r12
    7c1a:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
	ds = ds * 2; // scaling factor for DS
    7c1e:	9b 01       	movw	r18, r22
    7c20:	ac 01       	movw	r20, r24
    7c22:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    7c26:	4b 01       	movw	r8, r22
    7c28:	5c 01       	movw	r10, r24
	SSet=7;

	// Variable sampling rate --------------------------------------------
	int  k = 1; // Gain for the steps

	if ( Superheat - SSet > 3)
    7c2a:	20 e0       	ldi	r18, 0x00	; 0
    7c2c:	30 e0       	ldi	r19, 0x00	; 0
    7c2e:	40 ee       	ldi	r20, 0xE0	; 224
    7c30:	50 e4       	ldi	r21, 0x40	; 64
    7c32:	c7 01       	movw	r24, r14
    7c34:	b6 01       	movw	r22, r12
    7c36:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    7c3a:	2b 01       	movw	r4, r22
    7c3c:	3c 01       	movw	r6, r24
    7c3e:	20 e0       	ldi	r18, 0x00	; 0
    7c40:	30 e0       	ldi	r19, 0x00	; 0
    7c42:	40 e4       	ldi	r20, 0x40	; 64
    7c44:	50 e4       	ldi	r21, 0x40	; 64
    7c46:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    7c4a:	18 16       	cp	r1, r24
    7c4c:	e4 f4       	brge	.+56     	; 0x7c86 <corectTrv+0xaa>
	{
		if (ds > 2 || ds < -2)
    7c4e:	20 e0       	ldi	r18, 0x00	; 0
    7c50:	30 e0       	ldi	r19, 0x00	; 0
    7c52:	40 e0       	ldi	r20, 0x00	; 0
    7c54:	50 e4       	ldi	r21, 0x40	; 64
    7c56:	c5 01       	movw	r24, r10
    7c58:	b4 01       	movw	r22, r8
    7c5a:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    7c5e:	18 16       	cp	r1, r24
    7c60:	ac f0       	brlt	.+42     	; 0x7c8c <corectTrv+0xb0>
    7c62:	20 e0       	ldi	r18, 0x00	; 0
    7c64:	30 e0       	ldi	r19, 0x00	; 0
    7c66:	40 e0       	ldi	r20, 0x00	; 0
    7c68:	50 ec       	ldi	r21, 0xC0	; 192
    7c6a:	c5 01       	movw	r24, r10
    7c6c:	b4 01       	movw	r22, r8
    7c6e:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
	ds = Superheat - Superheat_old; // calculate the change in Superheat
	ds = ds * 2; // scaling factor for DS
	SSet=7;

	// Variable sampling rate --------------------------------------------
	int  k = 1; // Gain for the steps
    7c72:	68 2f       	mov	r22, r24
    7c74:	88 0f       	add	r24, r24
    7c76:	77 0b       	sbc	r23, r23
    7c78:	eb 01       	movw	r28, r22
    7c7a:	cc 27       	eor	r28, r28
    7c7c:	dd 0f       	add	r29, r29
    7c7e:	cc 1f       	adc	r28, r28
    7c80:	dd 27       	eor	r29, r29
    7c82:	21 96       	adiw	r28, 0x01	; 1
    7c84:	05 c0       	rjmp	.+10     	; 0x7c90 <corectTrv+0xb4>
    7c86:	c1 e0       	ldi	r28, 0x01	; 1
    7c88:	d0 e0       	ldi	r29, 0x00	; 0
    7c8a:	02 c0       	rjmp	.+4      	; 0x7c90 <corectTrv+0xb4>
	if ( Superheat - SSet > 3)
	{
		if (ds > 2 || ds < -2)

		{
			k = 2; // Gain for the steps
    7c8c:	c2 e0       	ldi	r28, 0x02	; 2
    7c8e:	d0 e0       	ldi	r29, 0x00	; 0
			
		}
	}

	if ( Superheat - SSet >= 5)
    7c90:	20 e0       	ldi	r18, 0x00	; 0
    7c92:	30 e0       	ldi	r19, 0x00	; 0
    7c94:	40 ea       	ldi	r20, 0xA0	; 160
    7c96:	50 e4       	ldi	r21, 0x40	; 64
    7c98:	c3 01       	movw	r24, r6
    7c9a:	b2 01       	movw	r22, r4
    7c9c:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    7ca0:	88 23       	and	r24, r24
    7ca2:	cc f0       	brlt	.+50     	; 0x7cd6 <corectTrv+0xfa>
	{
		if (ds > 2 || ds < -2)
    7ca4:	20 e0       	ldi	r18, 0x00	; 0
    7ca6:	30 e0       	ldi	r19, 0x00	; 0
    7ca8:	40 e0       	ldi	r20, 0x00	; 0
    7caa:	50 e4       	ldi	r21, 0x40	; 64
    7cac:	c5 01       	movw	r24, r10
    7cae:	b4 01       	movw	r22, r8
    7cb0:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    7cb4:	18 16       	cp	r1, r24
    7cb6:	6c f0       	brlt	.+26     	; 0x7cd2 <corectTrv+0xf6>
    7cb8:	20 e0       	ldi	r18, 0x00	; 0
    7cba:	30 e0       	ldi	r19, 0x00	; 0
    7cbc:	40 e0       	ldi	r20, 0x00	; 0
    7cbe:	50 ec       	ldi	r21, 0xC0	; 192
    7cc0:	c5 01       	movw	r24, r10
    7cc2:	b4 01       	movw	r22, r8
    7cc4:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    7cc8:	88 23       	and	r24, r24
    7cca:	2c f4       	brge	.+10     	; 0x7cd6 <corectTrv+0xfa>
		{
			k = 3; // Gain for the steps
    7ccc:	c3 e0       	ldi	r28, 0x03	; 3
    7cce:	d0 e0       	ldi	r29, 0x00	; 0
    7cd0:	02 c0       	rjmp	.+4      	; 0x7cd6 <corectTrv+0xfa>
    7cd2:	c3 e0       	ldi	r28, 0x03	; 3
    7cd4:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}

	//------------------------

	if (Superheat < SSet)
    7cd6:	20 e0       	ldi	r18, 0x00	; 0
    7cd8:	30 e0       	ldi	r19, 0x00	; 0
    7cda:	40 ee       	ldi	r20, 0xE0	; 224
    7cdc:	50 e4       	ldi	r21, 0x40	; 64
    7cde:	c7 01       	movw	r24, r14
    7ce0:	b6 01       	movw	r22, r12
    7ce2:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    7ce6:	88 23       	and	r24, r24
    7ce8:	84 f4       	brge	.+32     	; 0x7d0a <corectTrv+0x12e>
	{
		k = -1; // if the Superheat is too low, this gain changes the step direction
		Superheat = SSet + 10 - Superheat;
    7cea:	a7 01       	movw	r20, r14
    7cec:	96 01       	movw	r18, r12
    7cee:	60 e0       	ldi	r22, 0x00	; 0
    7cf0:	70 e0       	ldi	r23, 0x00	; 0
    7cf2:	88 e8       	ldi	r24, 0x88	; 136
    7cf4:	91 e4       	ldi	r25, 0x41	; 65
    7cf6:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    7cfa:	6b 01       	movw	r12, r22
    7cfc:	7c 01       	movw	r14, r24
		ds = -ds;
    7cfe:	b7 fa       	bst	r11, 7
    7d00:	b0 94       	com	r11
    7d02:	b7 f8       	bld	r11, 7
    7d04:	b0 94       	com	r11

	//------------------------

	if (Superheat < SSet)
	{
		k = -1; // if the Superheat is too low, this gain changes the step direction
    7d06:	cf ef       	ldi	r28, 0xFF	; 255
    7d08:	df ef       	ldi	r29, 0xFF	; 255
		Superheat = SSet + 10 - Superheat;
		ds = -ds;
	}
	
	Superheat_old = Superheat;
    7d0a:	c0 92 dd 07 	sts	0x07DD, r12	; 0x8007dd <Superheat_old.3263>
    7d0e:	d0 92 de 07 	sts	0x07DE, r13	; 0x8007de <Superheat_old.3263+0x1>
    7d12:	e0 92 df 07 	sts	0x07DF, r14	; 0x8007df <Superheat_old.3263+0x2>
    7d16:	f0 92 e0 07 	sts	0x07E0, r15	; 0x8007e0 <Superheat_old.3263+0x3>
	
	if (ds > 20)
    7d1a:	20 e0       	ldi	r18, 0x00	; 0
    7d1c:	30 e0       	ldi	r19, 0x00	; 0
    7d1e:	40 ea       	ldi	r20, 0xA0	; 160
    7d20:	51 e4       	ldi	r21, 0x41	; 65
    7d22:	c5 01       	movw	r24, r10
    7d24:	b4 01       	movw	r22, r8
    7d26:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    7d2a:	18 16       	cp	r1, r24
    7d2c:	14 f4       	brge	.+4      	; 0x7d32 <corectTrv+0x156>
    7d2e:	0c 94 38 49 	jmp	0x9270	; 0x9270 <corectTrv+0x1694>
	{
		ds = 20;
	}

	 else if (ds < -20)
    7d32:	20 e0       	ldi	r18, 0x00	; 0
    7d34:	30 e0       	ldi	r19, 0x00	; 0
    7d36:	40 ea       	ldi	r20, 0xA0	; 160
    7d38:	51 ec       	ldi	r21, 0xC1	; 193
    7d3a:	c5 01       	movw	r24, r10
    7d3c:	b4 01       	movw	r22, r8
    7d3e:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    7d42:	88 23       	and	r24, r24
    7d44:	64 f0       	brlt	.+24     	; 0x7d5e <corectTrv+0x182>
	{
		ds = -20;
	}
//--------------------------------------
	if (ds < -10)
    7d46:	20 e0       	ldi	r18, 0x00	; 0
    7d48:	30 e0       	ldi	r19, 0x00	; 0
    7d4a:	40 e2       	ldi	r20, 0x20	; 32
    7d4c:	51 ec       	ldi	r21, 0xC1	; 193
    7d4e:	c5 01       	movw	r24, r10
    7d50:	b4 01       	movw	r22, r8
    7d52:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    7d56:	88 23       	and	r24, r24
    7d58:	0c f0       	brlt	.+2      	; 0x7d5c <corectTrv+0x180>
    7d5a:	ab c3       	rjmp	.+1878   	; 0x84b2 <corectTrv+0x8d6>
    7d5c:	08 c0       	rjmp	.+16     	; 0x7d6e <corectTrv+0x192>
		ds = 20;
	}

	 else if (ds < -20)
	{
		ds = -20;
    7d5e:	0f 2e       	mov	r0, r31
    7d60:	81 2c       	mov	r8, r1
    7d62:	91 2c       	mov	r9, r1
    7d64:	f0 ea       	ldi	r31, 0xA0	; 160
    7d66:	af 2e       	mov	r10, r31
    7d68:	f1 ec       	ldi	r31, 0xC1	; 193
    7d6a:	bf 2e       	mov	r11, r31
    7d6c:	f0 2d       	mov	r31, r0
	}
//--------------------------------------
	if (ds < -10)
	{
		if (Superheat == SSet)
    7d6e:	20 e0       	ldi	r18, 0x00	; 0
    7d70:	30 e0       	ldi	r19, 0x00	; 0
    7d72:	40 ee       	ldi	r20, 0xE0	; 224
    7d74:	50 e4       	ldi	r21, 0x40	; 64
    7d76:	c7 01       	movw	r24, r14
    7d78:	b6 01       	movw	r22, r12
    7d7a:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    7d7e:	81 11       	cpse	r24, r1
    7d80:	32 c0       	rjmp	.+100    	; 0x7de6 <corectTrv+0x20a>
		{
			return(-0.123 * ds * ds - 2.768 * ds - 30.62)* k ;
    7d82:	2d e6       	ldi	r18, 0x6D	; 109
    7d84:	37 ee       	ldi	r19, 0xE7	; 231
    7d86:	4b ef       	ldi	r20, 0xFB	; 251
    7d88:	5d eb       	ldi	r21, 0xBD	; 189
    7d8a:	c5 01       	movw	r24, r10
    7d8c:	b4 01       	movw	r22, r8
    7d8e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7d92:	a5 01       	movw	r20, r10
    7d94:	94 01       	movw	r18, r8
    7d96:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7d9a:	6b 01       	movw	r12, r22
    7d9c:	7c 01       	movw	r14, r24
    7d9e:	29 ee       	ldi	r18, 0xE9	; 233
    7da0:	36 e2       	ldi	r19, 0x26	; 38
    7da2:	41 e3       	ldi	r20, 0x31	; 49
    7da4:	50 e4       	ldi	r21, 0x40	; 64
    7da6:	c5 01       	movw	r24, r10
    7da8:	b4 01       	movw	r22, r8
    7daa:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7dae:	9b 01       	movw	r18, r22
    7db0:	ac 01       	movw	r20, r24
    7db2:	c7 01       	movw	r24, r14
    7db4:	b6 01       	movw	r22, r12
    7db6:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    7dba:	23 ec       	ldi	r18, 0xC3	; 195
    7dbc:	35 ef       	ldi	r19, 0xF5	; 245
    7dbe:	44 ef       	ldi	r20, 0xF4	; 244
    7dc0:	51 e4       	ldi	r21, 0x41	; 65
    7dc2:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    7dc6:	6b 01       	movw	r12, r22
    7dc8:	7c 01       	movw	r14, r24
    7dca:	be 01       	movw	r22, r28
    7dcc:	dd 0f       	add	r29, r29
    7dce:	88 0b       	sbc	r24, r24
    7dd0:	99 0b       	sbc	r25, r25
    7dd2:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    7dd6:	9b 01       	movw	r18, r22
    7dd8:	ac 01       	movw	r20, r24
    7dda:	c7 01       	movw	r24, r14
    7ddc:	b6 01       	movw	r22, r12
    7dde:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7de2:	0c 94 e6 4a 	jmp	0x95cc	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    7de6:	20 e0       	ldi	r18, 0x00	; 0
    7de8:	30 e0       	ldi	r19, 0x00	; 0
    7dea:	40 ee       	ldi	r20, 0xE0	; 224
    7dec:	50 e4       	ldi	r21, 0x40	; 64
    7dee:	c7 01       	movw	r24, r14
    7df0:	b6 01       	movw	r22, r12
    7df2:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    7df6:	18 16       	cp	r1, r24
    7df8:	0c f0       	brlt	.+2      	; 0x7dfc <corectTrv+0x220>
    7dfa:	55 c0       	rjmp	.+170    	; 0x7ea6 <corectTrv+0x2ca>
    7dfc:	20 e0       	ldi	r18, 0x00	; 0
    7dfe:	30 e0       	ldi	r19, 0x00	; 0
    7e00:	40 e0       	ldi	r20, 0x00	; 0
    7e02:	51 e4       	ldi	r21, 0x41	; 65
    7e04:	c7 01       	movw	r24, r14
    7e06:	b6 01       	movw	r22, r12
    7e08:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    7e0c:	18 16       	cp	r1, r24
    7e0e:	0c f4       	brge	.+2      	; 0x7e12 <corectTrv+0x236>
    7e10:	4a c0       	rjmp	.+148    	; 0x7ea6 <corectTrv+0x2ca>
		{
			return( 0.02416 * ds * ds * ds + 0.95688 * ds * ds + 12.69588 * ds + 44.31142)* k;
    7e12:	21 e3       	ldi	r18, 0x31	; 49
    7e14:	3b ee       	ldi	r19, 0xEB	; 235
    7e16:	45 ec       	ldi	r20, 0xC5	; 197
    7e18:	5c e3       	ldi	r21, 0x3C	; 60
    7e1a:	c5 01       	movw	r24, r10
    7e1c:	b4 01       	movw	r22, r8
    7e1e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7e22:	a5 01       	movw	r20, r10
    7e24:	94 01       	movw	r18, r8
    7e26:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7e2a:	a5 01       	movw	r20, r10
    7e2c:	94 01       	movw	r18, r8
    7e2e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7e32:	6b 01       	movw	r12, r22
    7e34:	7c 01       	movw	r14, r24
    7e36:	26 e1       	ldi	r18, 0x16	; 22
    7e38:	36 ef       	ldi	r19, 0xF6	; 246
    7e3a:	44 e7       	ldi	r20, 0x74	; 116
    7e3c:	5f e3       	ldi	r21, 0x3F	; 63
    7e3e:	c5 01       	movw	r24, r10
    7e40:	b4 01       	movw	r22, r8
    7e42:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7e46:	a5 01       	movw	r20, r10
    7e48:	94 01       	movw	r18, r8
    7e4a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7e4e:	9b 01       	movw	r18, r22
    7e50:	ac 01       	movw	r20, r24
    7e52:	c7 01       	movw	r24, r14
    7e54:	b6 01       	movw	r22, r12
    7e56:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    7e5a:	6b 01       	movw	r12, r22
    7e5c:	7c 01       	movw	r14, r24
    7e5e:	23 e5       	ldi	r18, 0x53	; 83
    7e60:	32 e2       	ldi	r19, 0x22	; 34
    7e62:	4b e4       	ldi	r20, 0x4B	; 75
    7e64:	51 e4       	ldi	r21, 0x41	; 65
    7e66:	c5 01       	movw	r24, r10
    7e68:	b4 01       	movw	r22, r8
    7e6a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7e6e:	9b 01       	movw	r18, r22
    7e70:	ac 01       	movw	r20, r24
    7e72:	c7 01       	movw	r24, r14
    7e74:	b6 01       	movw	r22, r12
    7e76:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    7e7a:	25 ee       	ldi	r18, 0xE5	; 229
    7e7c:	3e e3       	ldi	r19, 0x3E	; 62
    7e7e:	41 e3       	ldi	r20, 0x31	; 49
    7e80:	52 e4       	ldi	r21, 0x42	; 66
    7e82:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    7e86:	6b 01       	movw	r12, r22
    7e88:	7c 01       	movw	r14, r24
    7e8a:	be 01       	movw	r22, r28
    7e8c:	dd 0f       	add	r29, r29
    7e8e:	88 0b       	sbc	r24, r24
    7e90:	99 0b       	sbc	r25, r25
    7e92:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    7e96:	9b 01       	movw	r18, r22
    7e98:	ac 01       	movw	r20, r24
    7e9a:	c7 01       	movw	r24, r14
    7e9c:	b6 01       	movw	r22, r12
    7e9e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7ea2:	0c 94 e6 4a 	jmp	0x95cc	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    7ea6:	20 e0       	ldi	r18, 0x00	; 0
    7ea8:	30 e0       	ldi	r19, 0x00	; 0
    7eaa:	40 e0       	ldi	r20, 0x00	; 0
    7eac:	51 e4       	ldi	r21, 0x41	; 65
    7eae:	c7 01       	movw	r24, r14
    7eb0:	b6 01       	movw	r22, r12
    7eb2:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    7eb6:	18 16       	cp	r1, r24
    7eb8:	0c f0       	brlt	.+2      	; 0x7ebc <corectTrv+0x2e0>
    7eba:	55 c0       	rjmp	.+170    	; 0x7f66 <corectTrv+0x38a>
    7ebc:	20 e0       	ldi	r18, 0x00	; 0
    7ebe:	30 e0       	ldi	r19, 0x00	; 0
    7ec0:	40 e1       	ldi	r20, 0x10	; 16
    7ec2:	51 e4       	ldi	r21, 0x41	; 65
    7ec4:	c7 01       	movw	r24, r14
    7ec6:	b6 01       	movw	r22, r12
    7ec8:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    7ecc:	18 16       	cp	r1, r24
    7ece:	0c f4       	brge	.+2      	; 0x7ed2 <corectTrv+0x2f6>
    7ed0:	4a c0       	rjmp	.+148    	; 0x7f66 <corectTrv+0x38a>
		{
			return( 0.01715 * ds * ds * ds + 0.64880 * ds * ds + 8.39021 * ds + 27.61058)* k;
    7ed2:	28 e2       	ldi	r18, 0x28	; 40
    7ed4:	3e e7       	ldi	r19, 0x7E	; 126
    7ed6:	4c e8       	ldi	r20, 0x8C	; 140
    7ed8:	5c e3       	ldi	r21, 0x3C	; 60
    7eda:	c5 01       	movw	r24, r10
    7edc:	b4 01       	movw	r22, r8
    7ede:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7ee2:	a5 01       	movw	r20, r10
    7ee4:	94 01       	movw	r18, r8
    7ee6:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7eea:	a5 01       	movw	r20, r10
    7eec:	94 01       	movw	r18, r8
    7eee:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7ef2:	6b 01       	movw	r12, r22
    7ef4:	7c 01       	movw	r14, r24
    7ef6:	22 ec       	ldi	r18, 0xC2	; 194
    7ef8:	37 e1       	ldi	r19, 0x17	; 23
    7efa:	46 e2       	ldi	r20, 0x26	; 38
    7efc:	5f e3       	ldi	r21, 0x3F	; 63
    7efe:	c5 01       	movw	r24, r10
    7f00:	b4 01       	movw	r22, r8
    7f02:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7f06:	a5 01       	movw	r20, r10
    7f08:	94 01       	movw	r18, r8
    7f0a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7f0e:	9b 01       	movw	r18, r22
    7f10:	ac 01       	movw	r20, r24
    7f12:	c7 01       	movw	r24, r14
    7f14:	b6 01       	movw	r22, r12
    7f16:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    7f1a:	6b 01       	movw	r12, r22
    7f1c:	7c 01       	movw	r14, r24
    7f1e:	2d e4       	ldi	r18, 0x4D	; 77
    7f20:	3e e3       	ldi	r19, 0x3E	; 62
    7f22:	46 e0       	ldi	r20, 0x06	; 6
    7f24:	51 e4       	ldi	r21, 0x41	; 65
    7f26:	c5 01       	movw	r24, r10
    7f28:	b4 01       	movw	r22, r8
    7f2a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7f2e:	9b 01       	movw	r18, r22
    7f30:	ac 01       	movw	r20, r24
    7f32:	c7 01       	movw	r24, r14
    7f34:	b6 01       	movw	r22, r12
    7f36:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    7f3a:	28 e7       	ldi	r18, 0x78	; 120
    7f3c:	32 ee       	ldi	r19, 0xE2	; 226
    7f3e:	4c ed       	ldi	r20, 0xDC	; 220
    7f40:	51 e4       	ldi	r21, 0x41	; 65
    7f42:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    7f46:	6b 01       	movw	r12, r22
    7f48:	7c 01       	movw	r14, r24
    7f4a:	be 01       	movw	r22, r28
    7f4c:	dd 0f       	add	r29, r29
    7f4e:	88 0b       	sbc	r24, r24
    7f50:	99 0b       	sbc	r25, r25
    7f52:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    7f56:	9b 01       	movw	r18, r22
    7f58:	ac 01       	movw	r20, r24
    7f5a:	c7 01       	movw	r24, r14
    7f5c:	b6 01       	movw	r22, r12
    7f5e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7f62:	0c 94 e6 4a 	jmp	0x95cc	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    7f66:	20 e0       	ldi	r18, 0x00	; 0
    7f68:	30 e0       	ldi	r19, 0x00	; 0
    7f6a:	40 e1       	ldi	r20, 0x10	; 16
    7f6c:	51 e4       	ldi	r21, 0x41	; 65
    7f6e:	c7 01       	movw	r24, r14
    7f70:	b6 01       	movw	r22, r12
    7f72:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    7f76:	18 16       	cp	r1, r24
    7f78:	74 f5       	brge	.+92     	; 0x7fd6 <corectTrv+0x3fa>
    7f7a:	20 e0       	ldi	r18, 0x00	; 0
    7f7c:	30 e0       	ldi	r19, 0x00	; 0
    7f7e:	40 e2       	ldi	r20, 0x20	; 32
    7f80:	51 e4       	ldi	r21, 0x41	; 65
    7f82:	c7 01       	movw	r24, r14
    7f84:	b6 01       	movw	r22, r12
    7f86:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    7f8a:	18 16       	cp	r1, r24
    7f8c:	24 f1       	brlt	.+72     	; 0x7fd6 <corectTrv+0x3fa>
		{
			return( -0.099 * ds * ds - 2.002 * ds - 16.444);
    7f8e:	23 e8       	ldi	r18, 0x83	; 131
    7f90:	30 ec       	ldi	r19, 0xC0	; 192
    7f92:	4a ec       	ldi	r20, 0xCA	; 202
    7f94:	5d eb       	ldi	r21, 0xBD	; 189
    7f96:	c5 01       	movw	r24, r10
    7f98:	b4 01       	movw	r22, r8
    7f9a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7f9e:	a5 01       	movw	r20, r10
    7fa0:	94 01       	movw	r18, r8
    7fa2:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7fa6:	6b 01       	movw	r12, r22
    7fa8:	7c 01       	movw	r14, r24
    7faa:	25 ec       	ldi	r18, 0xC5	; 197
    7fac:	30 e2       	ldi	r19, 0x20	; 32
    7fae:	40 e0       	ldi	r20, 0x00	; 0
    7fb0:	50 e4       	ldi	r21, 0x40	; 64
    7fb2:	c5 01       	movw	r24, r10
    7fb4:	b4 01       	movw	r22, r8
    7fb6:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    7fba:	9b 01       	movw	r18, r22
    7fbc:	ac 01       	movw	r20, r24
    7fbe:	c7 01       	movw	r24, r14
    7fc0:	b6 01       	movw	r22, r12
    7fc2:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    7fc6:	20 e5       	ldi	r18, 0x50	; 80
    7fc8:	3d e8       	ldi	r19, 0x8D	; 141
    7fca:	43 e8       	ldi	r20, 0x83	; 131
    7fcc:	51 e4       	ldi	r21, 0x41	; 65
    7fce:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    7fd2:	0c 94 e6 4a 	jmp	0x95cc	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    7fd6:	20 e0       	ldi	r18, 0x00	; 0
    7fd8:	30 e0       	ldi	r19, 0x00	; 0
    7fda:	40 e2       	ldi	r20, 0x20	; 32
    7fdc:	51 e4       	ldi	r21, 0x41	; 65
    7fde:	c7 01       	movw	r24, r14
    7fe0:	b6 01       	movw	r22, r12
    7fe2:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    7fe6:	18 16       	cp	r1, r24
    7fe8:	74 f5       	brge	.+92     	; 0x8046 <corectTrv+0x46a>
    7fea:	20 e0       	ldi	r18, 0x00	; 0
    7fec:	30 e0       	ldi	r19, 0x00	; 0
    7fee:	40 e3       	ldi	r20, 0x30	; 48
    7ff0:	51 e4       	ldi	r21, 0x41	; 65
    7ff2:	c7 01       	movw	r24, r14
    7ff4:	b6 01       	movw	r22, r12
    7ff6:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    7ffa:	18 16       	cp	r1, r24
    7ffc:	24 f1       	brlt	.+72     	; 0x8046 <corectTrv+0x46a>
		{
			return( -0.065 * ds * ds - 0.773 * ds - 4.451);
    7ffe:	28 eb       	ldi	r18, 0xB8	; 184
    8000:	3e e1       	ldi	r19, 0x1E	; 30
    8002:	45 e8       	ldi	r20, 0x85	; 133
    8004:	5d eb       	ldi	r21, 0xBD	; 189
    8006:	c5 01       	movw	r24, r10
    8008:	b4 01       	movw	r22, r8
    800a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    800e:	a5 01       	movw	r20, r10
    8010:	94 01       	movw	r18, r8
    8012:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8016:	6b 01       	movw	r12, r22
    8018:	7c 01       	movw	r14, r24
    801a:	24 e5       	ldi	r18, 0x54	; 84
    801c:	33 ee       	ldi	r19, 0xE3	; 227
    801e:	45 e4       	ldi	r20, 0x45	; 69
    8020:	5f e3       	ldi	r21, 0x3F	; 63
    8022:	c5 01       	movw	r24, r10
    8024:	b4 01       	movw	r22, r8
    8026:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    802a:	9b 01       	movw	r18, r22
    802c:	ac 01       	movw	r20, r24
    802e:	c7 01       	movw	r24, r14
    8030:	b6 01       	movw	r22, r12
    8032:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    8036:	28 e9       	ldi	r18, 0x98	; 152
    8038:	3e e6       	ldi	r19, 0x6E	; 110
    803a:	4e e8       	ldi	r20, 0x8E	; 142
    803c:	50 e4       	ldi	r21, 0x40	; 64
    803e:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    8042:	0c 94 e6 4a 	jmp	0x95cc	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    8046:	20 e0       	ldi	r18, 0x00	; 0
    8048:	30 e0       	ldi	r19, 0x00	; 0
    804a:	40 e3       	ldi	r20, 0x30	; 48
    804c:	51 e4       	ldi	r21, 0x41	; 65
    804e:	c7 01       	movw	r24, r14
    8050:	b6 01       	movw	r22, r12
    8052:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    8056:	18 16       	cp	r1, r24
    8058:	0c f0       	brlt	.+2      	; 0x805c <corectTrv+0x480>
    805a:	55 c0       	rjmp	.+170    	; 0x8106 <corectTrv+0x52a>
    805c:	20 e0       	ldi	r18, 0x00	; 0
    805e:	30 e0       	ldi	r19, 0x00	; 0
    8060:	40 e4       	ldi	r20, 0x40	; 64
    8062:	51 e4       	ldi	r21, 0x41	; 65
    8064:	c7 01       	movw	r24, r14
    8066:	b6 01       	movw	r22, r12
    8068:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    806c:	18 16       	cp	r1, r24
    806e:	0c f4       	brge	.+2      	; 0x8072 <corectTrv+0x496>
    8070:	4a c0       	rjmp	.+148    	; 0x8106 <corectTrv+0x52a>
		{
			return( 0.01315 * ds * ds * ds + 0.59145 * ds * ds + 10.05298 * ds + 54.52301)* k;
    8072:	29 e1       	ldi	r18, 0x19	; 25
    8074:	33 e7       	ldi	r19, 0x73	; 115
    8076:	47 e5       	ldi	r20, 0x57	; 87
    8078:	5c e3       	ldi	r21, 0x3C	; 60
    807a:	c5 01       	movw	r24, r10
    807c:	b4 01       	movw	r22, r8
    807e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8082:	a5 01       	movw	r20, r10
    8084:	94 01       	movw	r18, r8
    8086:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    808a:	a5 01       	movw	r20, r10
    808c:	94 01       	movw	r18, r8
    808e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8092:	6b 01       	movw	r12, r22
    8094:	7c 01       	movw	r14, r24
    8096:	24 e4       	ldi	r18, 0x44	; 68
    8098:	39 e6       	ldi	r19, 0x69	; 105
    809a:	47 e1       	ldi	r20, 0x17	; 23
    809c:	5f e3       	ldi	r21, 0x3F	; 63
    809e:	c5 01       	movw	r24, r10
    80a0:	b4 01       	movw	r22, r8
    80a2:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    80a6:	a5 01       	movw	r20, r10
    80a8:	94 01       	movw	r18, r8
    80aa:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    80ae:	9b 01       	movw	r18, r22
    80b0:	ac 01       	movw	r20, r24
    80b2:	c7 01       	movw	r24, r14
    80b4:	b6 01       	movw	r22, r12
    80b6:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    80ba:	6b 01       	movw	r12, r22
    80bc:	7c 01       	movw	r14, r24
    80be:	22 e0       	ldi	r18, 0x02	; 2
    80c0:	39 ed       	ldi	r19, 0xD9	; 217
    80c2:	40 e2       	ldi	r20, 0x20	; 32
    80c4:	51 e4       	ldi	r21, 0x41	; 65
    80c6:	c5 01       	movw	r24, r10
    80c8:	b4 01       	movw	r22, r8
    80ca:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    80ce:	9b 01       	movw	r18, r22
    80d0:	ac 01       	movw	r20, r24
    80d2:	c7 01       	movw	r24, r14
    80d4:	b6 01       	movw	r22, r12
    80d6:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    80da:	20 e9       	ldi	r18, 0x90	; 144
    80dc:	37 e1       	ldi	r19, 0x17	; 23
    80de:	4a e5       	ldi	r20, 0x5A	; 90
    80e0:	52 e4       	ldi	r21, 0x42	; 66
    80e2:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    80e6:	6b 01       	movw	r12, r22
    80e8:	7c 01       	movw	r14, r24
    80ea:	be 01       	movw	r22, r28
    80ec:	dd 0f       	add	r29, r29
    80ee:	88 0b       	sbc	r24, r24
    80f0:	99 0b       	sbc	r25, r25
    80f2:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    80f6:	9b 01       	movw	r18, r22
    80f8:	ac 01       	movw	r20, r24
    80fa:	c7 01       	movw	r24, r14
    80fc:	b6 01       	movw	r22, r12
    80fe:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8102:	0c 94 e6 4a 	jmp	0x95cc	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    8106:	20 e0       	ldi	r18, 0x00	; 0
    8108:	30 e0       	ldi	r19, 0x00	; 0
    810a:	40 e4       	ldi	r20, 0x40	; 64
    810c:	51 e4       	ldi	r21, 0x41	; 65
    810e:	c7 01       	movw	r24, r14
    8110:	b6 01       	movw	r22, r12
    8112:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    8116:	18 16       	cp	r1, r24
    8118:	0c f0       	brlt	.+2      	; 0x811c <corectTrv+0x540>
    811a:	55 c0       	rjmp	.+170    	; 0x81c6 <corectTrv+0x5ea>
    811c:	20 e0       	ldi	r18, 0x00	; 0
    811e:	30 e0       	ldi	r19, 0x00	; 0
    8120:	40 e5       	ldi	r20, 0x50	; 80
    8122:	51 e4       	ldi	r21, 0x41	; 65
    8124:	c7 01       	movw	r24, r14
    8126:	b6 01       	movw	r22, r12
    8128:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    812c:	18 16       	cp	r1, r24
    812e:	0c f4       	brge	.+2      	; 0x8132 <corectTrv+0x556>
    8130:	4a c0       	rjmp	.+148    	; 0x81c6 <corectTrv+0x5ea>
		{
			return( 0.02485 * ds * ds * ds + 1.09724 * ds * ds + 17.05530 * ds + 89.43916)* k;
    8132:	2a e3       	ldi	r18, 0x3A	; 58
    8134:	32 e9       	ldi	r19, 0x92	; 146
    8136:	4b ec       	ldi	r20, 0xCB	; 203
    8138:	5c e3       	ldi	r21, 0x3C	; 60
    813a:	c5 01       	movw	r24, r10
    813c:	b4 01       	movw	r22, r8
    813e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8142:	a5 01       	movw	r20, r10
    8144:	94 01       	movw	r18, r8
    8146:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    814a:	a5 01       	movw	r20, r10
    814c:	94 01       	movw	r18, r8
    814e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8152:	6b 01       	movw	r12, r22
    8154:	7c 01       	movw	r14, r24
    8156:	2c e5       	ldi	r18, 0x5C	; 92
    8158:	32 e7       	ldi	r19, 0x72	; 114
    815a:	4c e8       	ldi	r20, 0x8C	; 140
    815c:	5f e3       	ldi	r21, 0x3F	; 63
    815e:	c5 01       	movw	r24, r10
    8160:	b4 01       	movw	r22, r8
    8162:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8166:	a5 01       	movw	r20, r10
    8168:	94 01       	movw	r18, r8
    816a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    816e:	9b 01       	movw	r18, r22
    8170:	ac 01       	movw	r20, r24
    8172:	c7 01       	movw	r24, r14
    8174:	b6 01       	movw	r22, r12
    8176:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    817a:	6b 01       	movw	r12, r22
    817c:	7c 01       	movw	r14, r24
    817e:	21 e4       	ldi	r18, 0x41	; 65
    8180:	31 e7       	ldi	r19, 0x71	; 113
    8182:	48 e8       	ldi	r20, 0x88	; 136
    8184:	51 e4       	ldi	r21, 0x41	; 65
    8186:	c5 01       	movw	r24, r10
    8188:	b4 01       	movw	r22, r8
    818a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    818e:	9b 01       	movw	r18, r22
    8190:	ac 01       	movw	r20, r24
    8192:	c7 01       	movw	r24, r14
    8194:	b6 01       	movw	r22, r12
    8196:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    819a:	2a ed       	ldi	r18, 0xDA	; 218
    819c:	30 ee       	ldi	r19, 0xE0	; 224
    819e:	42 eb       	ldi	r20, 0xB2	; 178
    81a0:	52 e4       	ldi	r21, 0x42	; 66
    81a2:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    81a6:	6b 01       	movw	r12, r22
    81a8:	7c 01       	movw	r14, r24
    81aa:	be 01       	movw	r22, r28
    81ac:	dd 0f       	add	r29, r29
    81ae:	88 0b       	sbc	r24, r24
    81b0:	99 0b       	sbc	r25, r25
    81b2:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    81b6:	9b 01       	movw	r18, r22
    81b8:	ac 01       	movw	r20, r24
    81ba:	c7 01       	movw	r24, r14
    81bc:	b6 01       	movw	r22, r12
    81be:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    81c2:	0c 94 e6 4a 	jmp	0x95cc	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    81c6:	20 e0       	ldi	r18, 0x00	; 0
    81c8:	30 e0       	ldi	r19, 0x00	; 0
    81ca:	40 e5       	ldi	r20, 0x50	; 80
    81cc:	51 e4       	ldi	r21, 0x41	; 65
    81ce:	c7 01       	movw	r24, r14
    81d0:	b6 01       	movw	r22, r12
    81d2:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    81d6:	18 16       	cp	r1, r24
    81d8:	0c f0       	brlt	.+2      	; 0x81dc <corectTrv+0x600>
    81da:	55 c0       	rjmp	.+170    	; 0x8286 <corectTrv+0x6aa>
    81dc:	20 e0       	ldi	r18, 0x00	; 0
    81de:	30 e0       	ldi	r19, 0x00	; 0
    81e0:	40 e6       	ldi	r20, 0x60	; 96
    81e2:	51 e4       	ldi	r21, 0x41	; 65
    81e4:	c7 01       	movw	r24, r14
    81e6:	b6 01       	movw	r22, r12
    81e8:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    81ec:	18 16       	cp	r1, r24
    81ee:	0c f4       	brge	.+2      	; 0x81f2 <corectTrv+0x616>
    81f0:	4a c0       	rjmp	.+148    	; 0x8286 <corectTrv+0x6aa>
		{
			return( 0.02257 * ds * ds * ds + 0.99967 * ds * ds + 15.71735 * ds + 86.11652)* k;
    81f2:	28 eb       	ldi	r18, 0xB8	; 184
    81f4:	34 ee       	ldi	r19, 0xE4	; 228
    81f6:	48 eb       	ldi	r20, 0xB8	; 184
    81f8:	5c e3       	ldi	r21, 0x3C	; 60
    81fa:	c5 01       	movw	r24, r10
    81fc:	b4 01       	movw	r22, r8
    81fe:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8202:	a5 01       	movw	r20, r10
    8204:	94 01       	movw	r18, r8
    8206:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    820a:	a5 01       	movw	r20, r10
    820c:	94 01       	movw	r18, r8
    820e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8212:	6b 01       	movw	r12, r22
    8214:	7c 01       	movw	r14, r24
    8216:	20 e6       	ldi	r18, 0x60	; 96
    8218:	3a ee       	ldi	r19, 0xEA	; 234
    821a:	4f e7       	ldi	r20, 0x7F	; 127
    821c:	5f e3       	ldi	r21, 0x3F	; 63
    821e:	c5 01       	movw	r24, r10
    8220:	b4 01       	movw	r22, r8
    8222:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8226:	a5 01       	movw	r20, r10
    8228:	94 01       	movw	r18, r8
    822a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    822e:	9b 01       	movw	r18, r22
    8230:	ac 01       	movw	r20, r24
    8232:	c7 01       	movw	r24, r14
    8234:	b6 01       	movw	r22, r12
    8236:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    823a:	6b 01       	movw	r12, r22
    823c:	7c 01       	movw	r14, r24
    823e:	24 e4       	ldi	r18, 0x44	; 68
    8240:	3a e7       	ldi	r19, 0x7A	; 122
    8242:	4b e7       	ldi	r20, 0x7B	; 123
    8244:	51 e4       	ldi	r21, 0x41	; 65
    8246:	c5 01       	movw	r24, r10
    8248:	b4 01       	movw	r22, r8
    824a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    824e:	9b 01       	movw	r18, r22
    8250:	ac 01       	movw	r20, r24
    8252:	c7 01       	movw	r24, r14
    8254:	b6 01       	movw	r22, r12
    8256:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    825a:	29 ea       	ldi	r18, 0xA9	; 169
    825c:	3b e3       	ldi	r19, 0x3B	; 59
    825e:	4c ea       	ldi	r20, 0xAC	; 172
    8260:	52 e4       	ldi	r21, 0x42	; 66
    8262:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8266:	6b 01       	movw	r12, r22
    8268:	7c 01       	movw	r14, r24
    826a:	be 01       	movw	r22, r28
    826c:	dd 0f       	add	r29, r29
    826e:	88 0b       	sbc	r24, r24
    8270:	99 0b       	sbc	r25, r25
    8272:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    8276:	9b 01       	movw	r18, r22
    8278:	ac 01       	movw	r20, r24
    827a:	c7 01       	movw	r24, r14
    827c:	b6 01       	movw	r22, r12
    827e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8282:	0c 94 e6 4a 	jmp	0x95cc	; 0x95cc <corectTrv+0x19f0>
		}
		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    8286:	20 e0       	ldi	r18, 0x00	; 0
    8288:	30 e0       	ldi	r19, 0x00	; 0
    828a:	40 e6       	ldi	r20, 0x60	; 96
    828c:	51 e4       	ldi	r21, 0x41	; 65
    828e:	c7 01       	movw	r24, r14
    8290:	b6 01       	movw	r22, r12
    8292:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    8296:	18 16       	cp	r1, r24
    8298:	0c f0       	brlt	.+2      	; 0x829c <corectTrv+0x6c0>
    829a:	55 c0       	rjmp	.+170    	; 0x8346 <corectTrv+0x76a>
    829c:	20 e0       	ldi	r18, 0x00	; 0
    829e:	30 e0       	ldi	r19, 0x00	; 0
    82a0:	40 e7       	ldi	r20, 0x70	; 112
    82a2:	51 e4       	ldi	r21, 0x41	; 65
    82a4:	c7 01       	movw	r24, r14
    82a6:	b6 01       	movw	r22, r12
    82a8:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    82ac:	18 16       	cp	r1, r24
    82ae:	0c f4       	brge	.+2      	; 0x82b2 <corectTrv+0x6d6>
    82b0:	4a c0       	rjmp	.+148    	; 0x8346 <corectTrv+0x76a>
		{
			return( 0.02199 * ds * ds * ds + 0.99841 * ds * ds + 16.07877 * ds + 91.69972)* k;
    82b2:	2f e5       	ldi	r18, 0x5F	; 95
    82b4:	34 e2       	ldi	r19, 0x24	; 36
    82b6:	44 eb       	ldi	r20, 0xB4	; 180
    82b8:	5c e3       	ldi	r21, 0x3C	; 60
    82ba:	c5 01       	movw	r24, r10
    82bc:	b4 01       	movw	r22, r8
    82be:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    82c2:	a5 01       	movw	r20, r10
    82c4:	94 01       	movw	r18, r8
    82c6:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    82ca:	a5 01       	movw	r20, r10
    82cc:	94 01       	movw	r18, r8
    82ce:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    82d2:	6b 01       	movw	r12, r22
    82d4:	7c 01       	movw	r14, r24
    82d6:	2c ec       	ldi	r18, 0xCC	; 204
    82d8:	37 e9       	ldi	r19, 0x97	; 151
    82da:	4f e7       	ldi	r20, 0x7F	; 127
    82dc:	5f e3       	ldi	r21, 0x3F	; 63
    82de:	c5 01       	movw	r24, r10
    82e0:	b4 01       	movw	r22, r8
    82e2:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    82e6:	a5 01       	movw	r20, r10
    82e8:	94 01       	movw	r18, r8
    82ea:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    82ee:	9b 01       	movw	r18, r22
    82f0:	ac 01       	movw	r20, r24
    82f2:	c7 01       	movw	r24, r14
    82f4:	b6 01       	movw	r22, r12
    82f6:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    82fa:	6b 01       	movw	r12, r22
    82fc:	7c 01       	movw	r14, r24
    82fe:	22 e5       	ldi	r18, 0x52	; 82
    8300:	31 ea       	ldi	r19, 0xA1	; 161
    8302:	40 e8       	ldi	r20, 0x80	; 128
    8304:	51 e4       	ldi	r21, 0x41	; 65
    8306:	c5 01       	movw	r24, r10
    8308:	b4 01       	movw	r22, r8
    830a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    830e:	9b 01       	movw	r18, r22
    8310:	ac 01       	movw	r20, r24
    8312:	c7 01       	movw	r24, r14
    8314:	b6 01       	movw	r22, r12
    8316:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    831a:	22 e4       	ldi	r18, 0x42	; 66
    831c:	36 e6       	ldi	r19, 0x66	; 102
    831e:	47 eb       	ldi	r20, 0xB7	; 183
    8320:	52 e4       	ldi	r21, 0x42	; 66
    8322:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8326:	6b 01       	movw	r12, r22
    8328:	7c 01       	movw	r14, r24
    832a:	be 01       	movw	r22, r28
    832c:	dd 0f       	add	r29, r29
    832e:	88 0b       	sbc	r24, r24
    8330:	99 0b       	sbc	r25, r25
    8332:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    8336:	9b 01       	movw	r18, r22
    8338:	ac 01       	movw	r20, r24
    833a:	c7 01       	movw	r24, r14
    833c:	b6 01       	movw	r22, r12
    833e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8342:	0c 94 e6 4a 	jmp	0x95cc	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    8346:	20 e0       	ldi	r18, 0x00	; 0
    8348:	30 e0       	ldi	r19, 0x00	; 0
    834a:	40 e7       	ldi	r20, 0x70	; 112
    834c:	51 e4       	ldi	r21, 0x41	; 65
    834e:	c7 01       	movw	r24, r14
    8350:	b6 01       	movw	r22, r12
    8352:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    8356:	18 16       	cp	r1, r24
    8358:	0c f0       	brlt	.+2      	; 0x835c <corectTrv+0x780>
    835a:	55 c0       	rjmp	.+170    	; 0x8406 <corectTrv+0x82a>
    835c:	20 e0       	ldi	r18, 0x00	; 0
    835e:	30 e0       	ldi	r19, 0x00	; 0
    8360:	40 e8       	ldi	r20, 0x80	; 128
    8362:	51 e4       	ldi	r21, 0x41	; 65
    8364:	c7 01       	movw	r24, r14
    8366:	b6 01       	movw	r22, r12
    8368:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    836c:	18 16       	cp	r1, r24
    836e:	0c f4       	brge	.+2      	; 0x8372 <corectTrv+0x796>
    8370:	4a c0       	rjmp	.+148    	; 0x8406 <corectTrv+0x82a>
		{
			return( 0.02293 * ds * ds * ds + 1.04454 * ds * ds + 16.79148 * ds + 97.65075)* k;
    8372:	22 eb       	ldi	r18, 0xB2	; 178
    8374:	37 ed       	ldi	r19, 0xD7	; 215
    8376:	4b eb       	ldi	r20, 0xBB	; 187
    8378:	5c e3       	ldi	r21, 0x3C	; 60
    837a:	c5 01       	movw	r24, r10
    837c:	b4 01       	movw	r22, r8
    837e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8382:	a5 01       	movw	r20, r10
    8384:	94 01       	movw	r18, r8
    8386:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    838a:	a5 01       	movw	r20, r10
    838c:	94 01       	movw	r18, r8
    838e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8392:	6b 01       	movw	r12, r22
    8394:	7c 01       	movw	r14, r24
    8396:	2d e7       	ldi	r18, 0x7D	; 125
    8398:	33 eb       	ldi	r19, 0xB3	; 179
    839a:	45 e8       	ldi	r20, 0x85	; 133
    839c:	5f e3       	ldi	r21, 0x3F	; 63
    839e:	c5 01       	movw	r24, r10
    83a0:	b4 01       	movw	r22, r8
    83a2:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    83a6:	a5 01       	movw	r20, r10
    83a8:	94 01       	movw	r18, r8
    83aa:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    83ae:	9b 01       	movw	r18, r22
    83b0:	ac 01       	movw	r20, r24
    83b2:	c7 01       	movw	r24, r14
    83b4:	b6 01       	movw	r22, r12
    83b6:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    83ba:	6b 01       	movw	r12, r22
    83bc:	7c 01       	movw	r14, r24
    83be:	23 ef       	ldi	r18, 0xF3	; 243
    83c0:	34 e5       	ldi	r19, 0x54	; 84
    83c2:	46 e8       	ldi	r20, 0x86	; 134
    83c4:	51 e4       	ldi	r21, 0x41	; 65
    83c6:	c5 01       	movw	r24, r10
    83c8:	b4 01       	movw	r22, r8
    83ca:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    83ce:	9b 01       	movw	r18, r22
    83d0:	ac 01       	movw	r20, r24
    83d2:	c7 01       	movw	r24, r14
    83d4:	b6 01       	movw	r22, r12
    83d6:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    83da:	2f e2       	ldi	r18, 0x2F	; 47
    83dc:	3d e4       	ldi	r19, 0x4D	; 77
    83de:	43 ec       	ldi	r20, 0xC3	; 195
    83e0:	52 e4       	ldi	r21, 0x42	; 66
    83e2:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    83e6:	6b 01       	movw	r12, r22
    83e8:	7c 01       	movw	r14, r24
    83ea:	be 01       	movw	r22, r28
    83ec:	dd 0f       	add	r29, r29
    83ee:	88 0b       	sbc	r24, r24
    83f0:	99 0b       	sbc	r25, r25
    83f2:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    83f6:	9b 01       	movw	r18, r22
    83f8:	ac 01       	movw	r20, r24
    83fa:	c7 01       	movw	r24, r14
    83fc:	b6 01       	movw	r22, r12
    83fe:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8402:	0c 94 e6 4a 	jmp	0x95cc	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 9)
    8406:	20 e0       	ldi	r18, 0x00	; 0
    8408:	30 e0       	ldi	r19, 0x00	; 0
    840a:	40 e8       	ldi	r20, 0x80	; 128
    840c:	51 e4       	ldi	r21, 0x41	; 65
    840e:	c7 01       	movw	r24, r14
    8410:	b6 01       	movw	r22, r12
    8412:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    8416:	18 16       	cp	r1, r24
    8418:	14 f0       	brlt	.+4      	; 0x841e <corectTrv+0x842>
    841a:	0c 94 d3 4a 	jmp	0x95a6	; 0x95a6 <corectTrv+0x19ca>
		{
			return( 0.01242 * ds * ds * ds + 0.55907 * ds * ds + 9.57142 * ds + 67.21499)* k;
    841e:	21 e4       	ldi	r18, 0x41	; 65
    8420:	3d e7       	ldi	r19, 0x7D	; 125
    8422:	4b e4       	ldi	r20, 0x4B	; 75
    8424:	5c e3       	ldi	r21, 0x3C	; 60
    8426:	c5 01       	movw	r24, r10
    8428:	b4 01       	movw	r22, r8
    842a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    842e:	a5 01       	movw	r20, r10
    8430:	94 01       	movw	r18, r8
    8432:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8436:	a5 01       	movw	r20, r10
    8438:	94 01       	movw	r18, r8
    843a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    843e:	6b 01       	movw	r12, r22
    8440:	7c 01       	movw	r14, r24
    8442:	26 e3       	ldi	r18, 0x36	; 54
    8444:	3f e1       	ldi	r19, 0x1F	; 31
    8446:	4f e0       	ldi	r20, 0x0F	; 15
    8448:	5f e3       	ldi	r21, 0x3F	; 63
    844a:	c5 01       	movw	r24, r10
    844c:	b4 01       	movw	r22, r8
    844e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8452:	a5 01       	movw	r20, r10
    8454:	94 01       	movw	r18, r8
    8456:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    845a:	9b 01       	movw	r18, r22
    845c:	ac 01       	movw	r20, r24
    845e:	c7 01       	movw	r24, r14
    8460:	b6 01       	movw	r22, r12
    8462:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8466:	6b 01       	movw	r12, r22
    8468:	7c 01       	movw	r14, r24
    846a:	29 e8       	ldi	r18, 0x89	; 137
    846c:	34 e2       	ldi	r19, 0x24	; 36
    846e:	49 e1       	ldi	r20, 0x19	; 25
    8470:	51 e4       	ldi	r21, 0x41	; 65
    8472:	c5 01       	movw	r24, r10
    8474:	b4 01       	movw	r22, r8
    8476:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    847a:	9b 01       	movw	r18, r22
    847c:	ac 01       	movw	r20, r24
    847e:	c7 01       	movw	r24, r14
    8480:	b6 01       	movw	r22, r12
    8482:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8486:	23 e1       	ldi	r18, 0x13	; 19
    8488:	3e e6       	ldi	r19, 0x6E	; 110
    848a:	46 e8       	ldi	r20, 0x86	; 134
    848c:	52 e4       	ldi	r21, 0x42	; 66
    848e:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8492:	6b 01       	movw	r12, r22
    8494:	7c 01       	movw	r14, r24
    8496:	be 01       	movw	r22, r28
    8498:	dd 0f       	add	r29, r29
    849a:	88 0b       	sbc	r24, r24
    849c:	99 0b       	sbc	r25, r25
    849e:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    84a2:	9b 01       	movw	r18, r22
    84a4:	ac 01       	movw	r20, r24
    84a6:	c7 01       	movw	r24, r14
    84a8:	b6 01       	movw	r22, r12
    84aa:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    84ae:	0c 94 e6 4a 	jmp	0x95cc	; 0x95cc <corectTrv+0x19f0>
		}
	}

	else if (ds < 0 && ds >= -10)
    84b2:	20 e0       	ldi	r18, 0x00	; 0
    84b4:	30 e0       	ldi	r19, 0x00	; 0
    84b6:	a9 01       	movw	r20, r18
    84b8:	c5 01       	movw	r24, r10
    84ba:	b4 01       	movw	r22, r8
    84bc:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    84c0:	88 23       	and	r24, r24
    84c2:	0c f0       	brlt	.+2      	; 0x84c6 <corectTrv+0x8ea>
    84c4:	d6 c3       	rjmp	.+1964   	; 0x8c72 <corectTrv+0x1096>
    84c6:	20 e0       	ldi	r18, 0x00	; 0
    84c8:	30 e0       	ldi	r19, 0x00	; 0
    84ca:	40 e2       	ldi	r20, 0x20	; 32
    84cc:	51 ec       	ldi	r21, 0xC1	; 193
    84ce:	c5 01       	movw	r24, r10
    84d0:	b4 01       	movw	r22, r8
    84d2:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    84d6:	88 23       	and	r24, r24
    84d8:	0c f4       	brge	.+2      	; 0x84dc <corectTrv+0x900>
    84da:	cb c3       	rjmp	.+1942   	; 0x8c72 <corectTrv+0x1096>
	{
		if (Superheat == SSet)
    84dc:	20 e0       	ldi	r18, 0x00	; 0
    84de:	30 e0       	ldi	r19, 0x00	; 0
    84e0:	40 ee       	ldi	r20, 0xE0	; 224
    84e2:	50 e4       	ldi	r21, 0x40	; 64
    84e4:	c7 01       	movw	r24, r14
    84e6:	b6 01       	movw	r22, r12
    84e8:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    84ec:	81 11       	cpse	r24, r1
    84ee:	4a c0       	rjmp	.+148    	; 0x8584 <corectTrv+0x9a8>
		{
			return( 0.01259 * ds * ds * ds + 0.18896 * ds * ds + 2.12770 * ds - 0.01350)* k;
    84f0:	2a e4       	ldi	r18, 0x4A	; 74
    84f2:	36 e4       	ldi	r19, 0x46	; 70
    84f4:	4e e4       	ldi	r20, 0x4E	; 78
    84f6:	5c e3       	ldi	r21, 0x3C	; 60
    84f8:	c5 01       	movw	r24, r10
    84fa:	b4 01       	movw	r22, r8
    84fc:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8500:	a5 01       	movw	r20, r10
    8502:	94 01       	movw	r18, r8
    8504:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8508:	a5 01       	movw	r20, r10
    850a:	94 01       	movw	r18, r8
    850c:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8510:	6b 01       	movw	r12, r22
    8512:	7c 01       	movw	r14, r24
    8514:	2b eb       	ldi	r18, 0xBB	; 187
    8516:	3e e7       	ldi	r19, 0x7E	; 126
    8518:	41 e4       	ldi	r20, 0x41	; 65
    851a:	5e e3       	ldi	r21, 0x3E	; 62
    851c:	c5 01       	movw	r24, r10
    851e:	b4 01       	movw	r22, r8
    8520:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8524:	a5 01       	movw	r20, r10
    8526:	94 01       	movw	r18, r8
    8528:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    852c:	9b 01       	movw	r18, r22
    852e:	ac 01       	movw	r20, r24
    8530:	c7 01       	movw	r24, r14
    8532:	b6 01       	movw	r22, r12
    8534:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8538:	6b 01       	movw	r12, r22
    853a:	7c 01       	movw	r14, r24
    853c:	2d e3       	ldi	r18, 0x3D	; 61
    853e:	3c e2       	ldi	r19, 0x2C	; 44
    8540:	48 e0       	ldi	r20, 0x08	; 8
    8542:	50 e4       	ldi	r21, 0x40	; 64
    8544:	c5 01       	movw	r24, r10
    8546:	b4 01       	movw	r22, r8
    8548:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    854c:	9b 01       	movw	r18, r22
    854e:	ac 01       	movw	r20, r24
    8550:	c7 01       	movw	r24, r14
    8552:	b6 01       	movw	r22, r12
    8554:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8558:	2b e1       	ldi	r18, 0x1B	; 27
    855a:	3f e2       	ldi	r19, 0x2F	; 47
    855c:	4d e5       	ldi	r20, 0x5D	; 93
    855e:	5c e3       	ldi	r21, 0x3C	; 60
    8560:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    8564:	6b 01       	movw	r12, r22
    8566:	7c 01       	movw	r14, r24
    8568:	be 01       	movw	r22, r28
    856a:	dd 0f       	add	r29, r29
    856c:	88 0b       	sbc	r24, r24
    856e:	99 0b       	sbc	r25, r25
    8570:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    8574:	9b 01       	movw	r18, r22
    8576:	ac 01       	movw	r20, r24
    8578:	c7 01       	movw	r24, r14
    857a:	b6 01       	movw	r22, r12
    857c:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8580:	0c 94 e6 4a 	jmp	0x95cc	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    8584:	20 e0       	ldi	r18, 0x00	; 0
    8586:	30 e0       	ldi	r19, 0x00	; 0
    8588:	40 ee       	ldi	r20, 0xE0	; 224
    858a:	50 e4       	ldi	r21, 0x40	; 64
    858c:	c7 01       	movw	r24, r14
    858e:	b6 01       	movw	r22, r12
    8590:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    8594:	18 16       	cp	r1, r24
    8596:	0c f0       	brlt	.+2      	; 0x859a <corectTrv+0x9be>
    8598:	54 c0       	rjmp	.+168    	; 0x8642 <corectTrv+0xa66>
    859a:	20 e0       	ldi	r18, 0x00	; 0
    859c:	30 e0       	ldi	r19, 0x00	; 0
    859e:	40 e0       	ldi	r20, 0x00	; 0
    85a0:	51 e4       	ldi	r21, 0x41	; 65
    85a2:	c7 01       	movw	r24, r14
    85a4:	b6 01       	movw	r22, r12
    85a6:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    85aa:	18 16       	cp	r1, r24
    85ac:	0c f4       	brge	.+2      	; 0x85b0 <corectTrv+0x9d4>
    85ae:	49 c0       	rjmp	.+146    	; 0x8642 <corectTrv+0xa66>
		{
			return( 0.02252 * ds * ds * ds + 0.32376 * ds * ds + 2.48397 * ds + 3.72657)* k;
    85b0:	2d ed       	ldi	r18, 0xDD	; 221
    85b2:	3b e7       	ldi	r19, 0x7B	; 123
    85b4:	48 eb       	ldi	r20, 0xB8	; 184
    85b6:	5c e3       	ldi	r21, 0x3C	; 60
    85b8:	c5 01       	movw	r24, r10
    85ba:	b4 01       	movw	r22, r8
    85bc:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    85c0:	a5 01       	movw	r20, r10
    85c2:	94 01       	movw	r18, r8
    85c4:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    85c8:	a5 01       	movw	r20, r10
    85ca:	94 01       	movw	r18, r8
    85cc:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    85d0:	6b 01       	movw	r12, r22
    85d2:	7c 01       	movw	r14, r24
    85d4:	2f ed       	ldi	r18, 0xDF	; 223
    85d6:	33 ec       	ldi	r19, 0xC3	; 195
    85d8:	45 ea       	ldi	r20, 0xA5	; 165
    85da:	5e e3       	ldi	r21, 0x3E	; 62
    85dc:	c5 01       	movw	r24, r10
    85de:	b4 01       	movw	r22, r8
    85e0:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    85e4:	a5 01       	movw	r20, r10
    85e6:	94 01       	movw	r18, r8
    85e8:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    85ec:	9b 01       	movw	r18, r22
    85ee:	ac 01       	movw	r20, r24
    85f0:	c7 01       	movw	r24, r14
    85f2:	b6 01       	movw	r22, r12
    85f4:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    85f8:	6b 01       	movw	r12, r22
    85fa:	7c 01       	movw	r14, r24
    85fc:	2d e5       	ldi	r18, 0x5D	; 93
    85fe:	39 ef       	ldi	r19, 0xF9	; 249
    8600:	4e e1       	ldi	r20, 0x1E	; 30
    8602:	50 e4       	ldi	r21, 0x40	; 64
    8604:	c5 01       	movw	r24, r10
    8606:	b4 01       	movw	r22, r8
    8608:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    860c:	9b 01       	movw	r18, r22
    860e:	ac 01       	movw	r20, r24
    8610:	c7 01       	movw	r24, r14
    8612:	b6 01       	movw	r22, r12
    8614:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8618:	2f e1       	ldi	r18, 0x1F	; 31
    861a:	30 e8       	ldi	r19, 0x80	; 128
    861c:	4e e6       	ldi	r20, 0x6E	; 110
    861e:	50 e4       	ldi	r21, 0x40	; 64
    8620:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8624:	6b 01       	movw	r12, r22
    8626:	7c 01       	movw	r14, r24
    8628:	be 01       	movw	r22, r28
    862a:	dd 0f       	add	r29, r29
    862c:	88 0b       	sbc	r24, r24
    862e:	99 0b       	sbc	r25, r25
    8630:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    8634:	9b 01       	movw	r18, r22
    8636:	ac 01       	movw	r20, r24
    8638:	c7 01       	movw	r24, r14
    863a:	b6 01       	movw	r22, r12
    863c:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8640:	c5 c7       	rjmp	.+3978   	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    8642:	20 e0       	ldi	r18, 0x00	; 0
    8644:	30 e0       	ldi	r19, 0x00	; 0
    8646:	40 e0       	ldi	r20, 0x00	; 0
    8648:	51 e4       	ldi	r21, 0x41	; 65
    864a:	c7 01       	movw	r24, r14
    864c:	b6 01       	movw	r22, r12
    864e:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    8652:	18 16       	cp	r1, r24
    8654:	0c f0       	brlt	.+2      	; 0x8658 <corectTrv+0xa7c>
    8656:	54 c0       	rjmp	.+168    	; 0x8700 <corectTrv+0xb24>
    8658:	20 e0       	ldi	r18, 0x00	; 0
    865a:	30 e0       	ldi	r19, 0x00	; 0
    865c:	40 e1       	ldi	r20, 0x10	; 16
    865e:	51 e4       	ldi	r21, 0x41	; 65
    8660:	c7 01       	movw	r24, r14
    8662:	b6 01       	movw	r22, r12
    8664:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    8668:	18 16       	cp	r1, r24
    866a:	0c f4       	brge	.+2      	; 0x866e <corectTrv+0xa92>
    866c:	49 c0       	rjmp	.+146    	; 0x8700 <corectTrv+0xb24>
		{
			return( 0.02106 * ds * ds * ds + 0.30427 * ds * ds + 2.44311 * ds + 6.31417)* k;
    866e:	25 e0       	ldi	r18, 0x05	; 5
    8670:	36 e8       	ldi	r19, 0x86	; 134
    8672:	4c ea       	ldi	r20, 0xAC	; 172
    8674:	5c e3       	ldi	r21, 0x3C	; 60
    8676:	c5 01       	movw	r24, r10
    8678:	b4 01       	movw	r22, r8
    867a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    867e:	a5 01       	movw	r20, r10
    8680:	94 01       	movw	r18, r8
    8682:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8686:	a5 01       	movw	r20, r10
    8688:	94 01       	movw	r18, r8
    868a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    868e:	6b 01       	movw	r12, r22
    8690:	7c 01       	movw	r14, r24
    8692:	27 e4       	ldi	r18, 0x47	; 71
    8694:	39 ec       	ldi	r19, 0xC9	; 201
    8696:	4b e9       	ldi	r20, 0x9B	; 155
    8698:	5e e3       	ldi	r21, 0x3E	; 62
    869a:	c5 01       	movw	r24, r10
    869c:	b4 01       	movw	r22, r8
    869e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    86a2:	a5 01       	movw	r20, r10
    86a4:	94 01       	movw	r18, r8
    86a6:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    86aa:	9b 01       	movw	r18, r22
    86ac:	ac 01       	movw	r20, r24
    86ae:	c7 01       	movw	r24, r14
    86b0:	b6 01       	movw	r22, r12
    86b2:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    86b6:	6b 01       	movw	r12, r22
    86b8:	7c 01       	movw	r14, r24
    86ba:	2a ee       	ldi	r18, 0xEA	; 234
    86bc:	3b e5       	ldi	r19, 0x5B	; 91
    86be:	4c e1       	ldi	r20, 0x1C	; 28
    86c0:	50 e4       	ldi	r21, 0x40	; 64
    86c2:	c5 01       	movw	r24, r10
    86c4:	b4 01       	movw	r22, r8
    86c6:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    86ca:	9b 01       	movw	r18, r22
    86cc:	ac 01       	movw	r20, r24
    86ce:	c7 01       	movw	r24, r14
    86d0:	b6 01       	movw	r22, r12
    86d2:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    86d6:	2e ea       	ldi	r18, 0xAE	; 174
    86d8:	3d e0       	ldi	r19, 0x0D	; 13
    86da:	4a ec       	ldi	r20, 0xCA	; 202
    86dc:	50 e4       	ldi	r21, 0x40	; 64
    86de:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    86e2:	6b 01       	movw	r12, r22
    86e4:	7c 01       	movw	r14, r24
    86e6:	be 01       	movw	r22, r28
    86e8:	dd 0f       	add	r29, r29
    86ea:	88 0b       	sbc	r24, r24
    86ec:	99 0b       	sbc	r25, r25
    86ee:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    86f2:	9b 01       	movw	r18, r22
    86f4:	ac 01       	movw	r20, r24
    86f6:	c7 01       	movw	r24, r14
    86f8:	b6 01       	movw	r22, r12
    86fa:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    86fe:	66 c7       	rjmp	.+3788   	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    8700:	20 e0       	ldi	r18, 0x00	; 0
    8702:	30 e0       	ldi	r19, 0x00	; 0
    8704:	40 e1       	ldi	r20, 0x10	; 16
    8706:	51 e4       	ldi	r21, 0x41	; 65
    8708:	c7 01       	movw	r24, r14
    870a:	b6 01       	movw	r22, r12
    870c:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    8710:	18 16       	cp	r1, r24
    8712:	0c f0       	brlt	.+2      	; 0x8716 <corectTrv+0xb3a>
    8714:	54 c0       	rjmp	.+168    	; 0x87be <corectTrv+0xbe2>
    8716:	20 e0       	ldi	r18, 0x00	; 0
    8718:	30 e0       	ldi	r19, 0x00	; 0
    871a:	40 e2       	ldi	r20, 0x20	; 32
    871c:	51 e4       	ldi	r21, 0x41	; 65
    871e:	c7 01       	movw	r24, r14
    8720:	b6 01       	movw	r22, r12
    8722:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    8726:	18 16       	cp	r1, r24
    8728:	0c f4       	brge	.+2      	; 0x872c <corectTrv+0xb50>
    872a:	49 c0       	rjmp	.+146    	; 0x87be <corectTrv+0xbe2>
		{
			return( 0.02106 * ds * ds * ds + 0.32749 * ds * ds + 2.67528 * ds + 8.74842)* k;
    872c:	25 e0       	ldi	r18, 0x05	; 5
    872e:	36 e8       	ldi	r19, 0x86	; 134
    8730:	4c ea       	ldi	r20, 0xAC	; 172
    8732:	5c e3       	ldi	r21, 0x3C	; 60
    8734:	c5 01       	movw	r24, r10
    8736:	b4 01       	movw	r22, r8
    8738:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    873c:	a5 01       	movw	r20, r10
    873e:	94 01       	movw	r18, r8
    8740:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8744:	a5 01       	movw	r20, r10
    8746:	94 01       	movw	r18, r8
    8748:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    874c:	6b 01       	movw	r12, r22
    874e:	7c 01       	movw	r14, r24
    8750:	25 ec       	ldi	r18, 0xC5	; 197
    8752:	3c ea       	ldi	r19, 0xAC	; 172
    8754:	47 ea       	ldi	r20, 0xA7	; 167
    8756:	5e e3       	ldi	r21, 0x3E	; 62
    8758:	c5 01       	movw	r24, r10
    875a:	b4 01       	movw	r22, r8
    875c:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8760:	a5 01       	movw	r20, r10
    8762:	94 01       	movw	r18, r8
    8764:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8768:	9b 01       	movw	r18, r22
    876a:	ac 01       	movw	r20, r24
    876c:	c7 01       	movw	r24, r14
    876e:	b6 01       	movw	r22, r12
    8770:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8774:	6b 01       	movw	r12, r22
    8776:	7c 01       	movw	r14, r24
    8778:	2a ec       	ldi	r18, 0xCA	; 202
    877a:	37 e3       	ldi	r19, 0x37	; 55
    877c:	4b e2       	ldi	r20, 0x2B	; 43
    877e:	50 e4       	ldi	r21, 0x40	; 64
    8780:	c5 01       	movw	r24, r10
    8782:	b4 01       	movw	r22, r8
    8784:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8788:	9b 01       	movw	r18, r22
    878a:	ac 01       	movw	r20, r24
    878c:	c7 01       	movw	r24, r14
    878e:	b6 01       	movw	r22, r12
    8790:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8794:	27 e8       	ldi	r18, 0x87	; 135
    8796:	39 ef       	ldi	r19, 0xF9	; 249
    8798:	4b e0       	ldi	r20, 0x0B	; 11
    879a:	51 e4       	ldi	r21, 0x41	; 65
    879c:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    87a0:	6b 01       	movw	r12, r22
    87a2:	7c 01       	movw	r14, r24
    87a4:	be 01       	movw	r22, r28
    87a6:	dd 0f       	add	r29, r29
    87a8:	88 0b       	sbc	r24, r24
    87aa:	99 0b       	sbc	r25, r25
    87ac:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    87b0:	9b 01       	movw	r18, r22
    87b2:	ac 01       	movw	r20, r24
    87b4:	c7 01       	movw	r24, r14
    87b6:	b6 01       	movw	r22, r12
    87b8:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    87bc:	07 c7       	rjmp	.+3598   	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    87be:	20 e0       	ldi	r18, 0x00	; 0
    87c0:	30 e0       	ldi	r19, 0x00	; 0
    87c2:	40 e2       	ldi	r20, 0x20	; 32
    87c4:	51 e4       	ldi	r21, 0x41	; 65
    87c6:	c7 01       	movw	r24, r14
    87c8:	b6 01       	movw	r22, r12
    87ca:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    87ce:	18 16       	cp	r1, r24
    87d0:	0c f0       	brlt	.+2      	; 0x87d4 <corectTrv+0xbf8>
    87d2:	54 c0       	rjmp	.+168    	; 0x887c <corectTrv+0xca0>
    87d4:	20 e0       	ldi	r18, 0x00	; 0
    87d6:	30 e0       	ldi	r19, 0x00	; 0
    87d8:	40 e3       	ldi	r20, 0x30	; 48
    87da:	51 e4       	ldi	r21, 0x41	; 65
    87dc:	c7 01       	movw	r24, r14
    87de:	b6 01       	movw	r22, r12
    87e0:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    87e4:	18 16       	cp	r1, r24
    87e6:	0c f4       	brge	.+2      	; 0x87ea <corectTrv+0xc0e>
    87e8:	49 c0       	rjmp	.+146    	; 0x887c <corectTrv+0xca0>
		{
			return( 0.02252 * ds * ds * ds + 0.35182 * ds * ds + 2.76462 * ds + 11.25664)* k;
    87ea:	2d ed       	ldi	r18, 0xDD	; 221
    87ec:	3b e7       	ldi	r19, 0x7B	; 123
    87ee:	48 eb       	ldi	r20, 0xB8	; 184
    87f0:	5c e3       	ldi	r21, 0x3C	; 60
    87f2:	c5 01       	movw	r24, r10
    87f4:	b4 01       	movw	r22, r8
    87f6:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    87fa:	a5 01       	movw	r20, r10
    87fc:	94 01       	movw	r18, r8
    87fe:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8802:	a5 01       	movw	r20, r10
    8804:	94 01       	movw	r18, r8
    8806:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    880a:	6b 01       	movw	r12, r22
    880c:	7c 01       	movw	r14, r24
    880e:	20 ec       	ldi	r18, 0xC0	; 192
    8810:	31 e2       	ldi	r19, 0x21	; 33
    8812:	44 eb       	ldi	r20, 0xB4	; 180
    8814:	5e e3       	ldi	r21, 0x3E	; 62
    8816:	c5 01       	movw	r24, r10
    8818:	b4 01       	movw	r22, r8
    881a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    881e:	a5 01       	movw	r20, r10
    8820:	94 01       	movw	r18, r8
    8822:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8826:	9b 01       	movw	r18, r22
    8828:	ac 01       	movw	r20, r24
    882a:	c7 01       	movw	r24, r14
    882c:	b6 01       	movw	r22, r12
    882e:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8832:	6b 01       	movw	r12, r22
    8834:	7c 01       	movw	r14, r24
    8836:	29 e8       	ldi	r18, 0x89	; 137
    8838:	3f ee       	ldi	r19, 0xEF	; 239
    883a:	40 e3       	ldi	r20, 0x30	; 48
    883c:	50 e4       	ldi	r21, 0x40	; 64
    883e:	c5 01       	movw	r24, r10
    8840:	b4 01       	movw	r22, r8
    8842:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8846:	9b 01       	movw	r18, r22
    8848:	ac 01       	movw	r20, r24
    884a:	c7 01       	movw	r24, r14
    884c:	b6 01       	movw	r22, r12
    884e:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8852:	23 e3       	ldi	r18, 0x33	; 51
    8854:	3b e1       	ldi	r19, 0x1B	; 27
    8856:	44 e3       	ldi	r20, 0x34	; 52
    8858:	51 e4       	ldi	r21, 0x41	; 65
    885a:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    885e:	6b 01       	movw	r12, r22
    8860:	7c 01       	movw	r14, r24
    8862:	be 01       	movw	r22, r28
    8864:	dd 0f       	add	r29, r29
    8866:	88 0b       	sbc	r24, r24
    8868:	99 0b       	sbc	r25, r25
    886a:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    886e:	9b 01       	movw	r18, r22
    8870:	ac 01       	movw	r20, r24
    8872:	c7 01       	movw	r24, r14
    8874:	b6 01       	movw	r22, r12
    8876:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    887a:	a8 c6       	rjmp	.+3408   	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    887c:	20 e0       	ldi	r18, 0x00	; 0
    887e:	30 e0       	ldi	r19, 0x00	; 0
    8880:	40 e3       	ldi	r20, 0x30	; 48
    8882:	51 e4       	ldi	r21, 0x41	; 65
    8884:	c7 01       	movw	r24, r14
    8886:	b6 01       	movw	r22, r12
    8888:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    888c:	18 16       	cp	r1, r24
    888e:	0c f0       	brlt	.+2      	; 0x8892 <corectTrv+0xcb6>
    8890:	54 c0       	rjmp	.+168    	; 0x893a <corectTrv+0xd5e>
    8892:	20 e0       	ldi	r18, 0x00	; 0
    8894:	30 e0       	ldi	r19, 0x00	; 0
    8896:	40 e4       	ldi	r20, 0x40	; 64
    8898:	51 e4       	ldi	r21, 0x41	; 65
    889a:	c7 01       	movw	r24, r14
    889c:	b6 01       	movw	r22, r12
    889e:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    88a2:	18 16       	cp	r1, r24
    88a4:	0c f4       	brge	.+2      	; 0x88a8 <corectTrv+0xccc>
    88a6:	49 c0       	rjmp	.+146    	; 0x893a <corectTrv+0xd5e>
		{
			return( 0.01251 * ds * ds * ds + 0.18754 * ds * ds + 2.12069 * ds + 14.98441)* k;
    88a8:	2e eb       	ldi	r18, 0xBE	; 190
    88aa:	36 ef       	ldi	r19, 0xF6	; 246
    88ac:	4c e4       	ldi	r20, 0x4C	; 76
    88ae:	5c e3       	ldi	r21, 0x3C	; 60
    88b0:	c5 01       	movw	r24, r10
    88b2:	b4 01       	movw	r22, r8
    88b4:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    88b8:	a5 01       	movw	r20, r10
    88ba:	94 01       	movw	r18, r8
    88bc:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    88c0:	a5 01       	movw	r20, r10
    88c2:	94 01       	movw	r18, r8
    88c4:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    88c8:	6b 01       	movw	r12, r22
    88ca:	7c 01       	movw	r14, r24
    88cc:	2c e7       	ldi	r18, 0x7C	; 124
    88ce:	3a e0       	ldi	r19, 0x0A	; 10
    88d0:	40 e4       	ldi	r20, 0x40	; 64
    88d2:	5e e3       	ldi	r21, 0x3E	; 62
    88d4:	c5 01       	movw	r24, r10
    88d6:	b4 01       	movw	r22, r8
    88d8:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    88dc:	a5 01       	movw	r20, r10
    88de:	94 01       	movw	r18, r8
    88e0:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    88e4:	9b 01       	movw	r18, r22
    88e6:	ac 01       	movw	r20, r24
    88e8:	c7 01       	movw	r24, r14
    88ea:	b6 01       	movw	r22, r12
    88ec:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    88f0:	6b 01       	movw	r12, r22
    88f2:	7c 01       	movw	r14, r24
    88f4:	23 e6       	ldi	r18, 0x63	; 99
    88f6:	39 eb       	ldi	r19, 0xB9	; 185
    88f8:	47 e0       	ldi	r20, 0x07	; 7
    88fa:	50 e4       	ldi	r21, 0x40	; 64
    88fc:	c5 01       	movw	r24, r10
    88fe:	b4 01       	movw	r22, r8
    8900:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8904:	9b 01       	movw	r18, r22
    8906:	ac 01       	movw	r20, r24
    8908:	c7 01       	movw	r24, r14
    890a:	b6 01       	movw	r22, r12
    890c:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8910:	25 e2       	ldi	r18, 0x25	; 37
    8912:	30 ec       	ldi	r19, 0xC0	; 192
    8914:	4f e6       	ldi	r20, 0x6F	; 111
    8916:	51 e4       	ldi	r21, 0x41	; 65
    8918:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    891c:	6b 01       	movw	r12, r22
    891e:	7c 01       	movw	r14, r24
    8920:	be 01       	movw	r22, r28
    8922:	dd 0f       	add	r29, r29
    8924:	88 0b       	sbc	r24, r24
    8926:	99 0b       	sbc	r25, r25
    8928:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    892c:	9b 01       	movw	r18, r22
    892e:	ac 01       	movw	r20, r24
    8930:	c7 01       	movw	r24, r14
    8932:	b6 01       	movw	r22, r12
    8934:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8938:	49 c6       	rjmp	.+3218   	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    893a:	20 e0       	ldi	r18, 0x00	; 0
    893c:	30 e0       	ldi	r19, 0x00	; 0
    893e:	40 e4       	ldi	r20, 0x40	; 64
    8940:	51 e4       	ldi	r21, 0x41	; 65
    8942:	c7 01       	movw	r24, r14
    8944:	b6 01       	movw	r22, r12
    8946:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    894a:	18 16       	cp	r1, r24
    894c:	dc f5       	brge	.+118    	; 0x89c4 <corectTrv+0xde8>
    894e:	20 e0       	ldi	r18, 0x00	; 0
    8950:	30 e0       	ldi	r19, 0x00	; 0
    8952:	40 e5       	ldi	r20, 0x50	; 80
    8954:	51 e4       	ldi	r21, 0x41	; 65
    8956:	c7 01       	movw	r24, r14
    8958:	b6 01       	movw	r22, r12
    895a:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    895e:	18 16       	cp	r1, r24
    8960:	8c f1       	brlt	.+98     	; 0x89c4 <corectTrv+0xde8>
		{
			return(0.062 * ds * ds + 1.818 * ds + 15.22)* k;
    8962:	26 eb       	ldi	r18, 0xB6	; 182
    8964:	33 ef       	ldi	r19, 0xF3	; 243
    8966:	4d e7       	ldi	r20, 0x7D	; 125
    8968:	5d e3       	ldi	r21, 0x3D	; 61
    896a:	c5 01       	movw	r24, r10
    896c:	b4 01       	movw	r22, r8
    896e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8972:	a5 01       	movw	r20, r10
    8974:	94 01       	movw	r18, r8
    8976:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    897a:	6b 01       	movw	r12, r22
    897c:	7c 01       	movw	r14, r24
    897e:	29 e3       	ldi	r18, 0x39	; 57
    8980:	34 eb       	ldi	r19, 0xB4	; 180
    8982:	48 ee       	ldi	r20, 0xE8	; 232
    8984:	5f e3       	ldi	r21, 0x3F	; 63
    8986:	c5 01       	movw	r24, r10
    8988:	b4 01       	movw	r22, r8
    898a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    898e:	9b 01       	movw	r18, r22
    8990:	ac 01       	movw	r20, r24
    8992:	c7 01       	movw	r24, r14
    8994:	b6 01       	movw	r22, r12
    8996:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    899a:	2f e1       	ldi	r18, 0x1F	; 31
    899c:	35 e8       	ldi	r19, 0x85	; 133
    899e:	43 e7       	ldi	r20, 0x73	; 115
    89a0:	51 e4       	ldi	r21, 0x41	; 65
    89a2:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    89a6:	6b 01       	movw	r12, r22
    89a8:	7c 01       	movw	r14, r24
    89aa:	be 01       	movw	r22, r28
    89ac:	dd 0f       	add	r29, r29
    89ae:	88 0b       	sbc	r24, r24
    89b0:	99 0b       	sbc	r25, r25
    89b2:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    89b6:	9b 01       	movw	r18, r22
    89b8:	ac 01       	movw	r20, r24
    89ba:	c7 01       	movw	r24, r14
    89bc:	b6 01       	movw	r22, r12
    89be:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    89c2:	04 c6       	rjmp	.+3080   	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    89c4:	20 e0       	ldi	r18, 0x00	; 0
    89c6:	30 e0       	ldi	r19, 0x00	; 0
    89c8:	40 e5       	ldi	r20, 0x50	; 80
    89ca:	51 e4       	ldi	r21, 0x41	; 65
    89cc:	c7 01       	movw	r24, r14
    89ce:	b6 01       	movw	r22, r12
    89d0:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    89d4:	18 16       	cp	r1, r24
    89d6:	dc f5       	brge	.+118    	; 0x8a4e <corectTrv+0xe72>
    89d8:	20 e0       	ldi	r18, 0x00	; 0
    89da:	30 e0       	ldi	r19, 0x00	; 0
    89dc:	40 e6       	ldi	r20, 0x60	; 96
    89de:	51 e4       	ldi	r21, 0x41	; 65
    89e0:	c7 01       	movw	r24, r14
    89e2:	b6 01       	movw	r22, r12
    89e4:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    89e8:	18 16       	cp	r1, r24
    89ea:	8c f1       	brlt	.+98     	; 0x8a4e <corectTrv+0xe72>
		{
			return( 0.097 * ds * ds + 1.941 * ds + 16.00)* k;
    89ec:	20 ef       	ldi	r18, 0xF0	; 240
    89ee:	37 ea       	ldi	r19, 0xA7	; 167
    89f0:	46 ec       	ldi	r20, 0xC6	; 198
    89f2:	5d e3       	ldi	r21, 0x3D	; 61
    89f4:	c5 01       	movw	r24, r10
    89f6:	b4 01       	movw	r22, r8
    89f8:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    89fc:	a5 01       	movw	r20, r10
    89fe:	94 01       	movw	r18, r8
    8a00:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8a04:	6b 01       	movw	r12, r22
    8a06:	7c 01       	movw	r14, r24
    8a08:	20 eb       	ldi	r18, 0xB0	; 176
    8a0a:	32 e7       	ldi	r19, 0x72	; 114
    8a0c:	48 ef       	ldi	r20, 0xF8	; 248
    8a0e:	5f e3       	ldi	r21, 0x3F	; 63
    8a10:	c5 01       	movw	r24, r10
    8a12:	b4 01       	movw	r22, r8
    8a14:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8a18:	9b 01       	movw	r18, r22
    8a1a:	ac 01       	movw	r20, r24
    8a1c:	c7 01       	movw	r24, r14
    8a1e:	b6 01       	movw	r22, r12
    8a20:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8a24:	20 e0       	ldi	r18, 0x00	; 0
    8a26:	30 e0       	ldi	r19, 0x00	; 0
    8a28:	40 e8       	ldi	r20, 0x80	; 128
    8a2a:	51 e4       	ldi	r21, 0x41	; 65
    8a2c:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8a30:	6b 01       	movw	r12, r22
    8a32:	7c 01       	movw	r14, r24
    8a34:	be 01       	movw	r22, r28
    8a36:	dd 0f       	add	r29, r29
    8a38:	88 0b       	sbc	r24, r24
    8a3a:	99 0b       	sbc	r25, r25
    8a3c:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    8a40:	9b 01       	movw	r18, r22
    8a42:	ac 01       	movw	r20, r24
    8a44:	c7 01       	movw	r24, r14
    8a46:	b6 01       	movw	r22, r12
    8a48:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8a4c:	bf c5       	rjmp	.+2942   	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    8a4e:	20 e0       	ldi	r18, 0x00	; 0
    8a50:	30 e0       	ldi	r19, 0x00	; 0
    8a52:	40 e6       	ldi	r20, 0x60	; 96
    8a54:	51 e4       	ldi	r21, 0x41	; 65
    8a56:	c7 01       	movw	r24, r14
    8a58:	b6 01       	movw	r22, r12
    8a5a:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    8a5e:	18 16       	cp	r1, r24
    8a60:	0c f0       	brlt	.+2      	; 0x8a64 <corectTrv+0xe88>
    8a62:	54 c0       	rjmp	.+168    	; 0x8b0c <corectTrv+0xf30>
    8a64:	20 e0       	ldi	r18, 0x00	; 0
    8a66:	30 e0       	ldi	r19, 0x00	; 0
    8a68:	40 e7       	ldi	r20, 0x70	; 112
    8a6a:	51 e4       	ldi	r21, 0x41	; 65
    8a6c:	c7 01       	movw	r24, r14
    8a6e:	b6 01       	movw	r22, r12
    8a70:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    8a74:	18 16       	cp	r1, r24
    8a76:	0c f4       	brge	.+2      	; 0x8a7a <corectTrv+0xe9e>
    8a78:	49 c0       	rjmp	.+146    	; 0x8b0c <corectTrv+0xf30>
		{
			return( 0.01598 * ds * ds * ds + 0.35913 * ds * ds + 2.90559 * ds + 17.70294)* k;
    8a7a:	2d e7       	ldi	r18, 0x7D	; 125
    8a7c:	38 ee       	ldi	r19, 0xE8	; 232
    8a7e:	42 e8       	ldi	r20, 0x82	; 130
    8a80:	5c e3       	ldi	r21, 0x3C	; 60
    8a82:	c5 01       	movw	r24, r10
    8a84:	b4 01       	movw	r22, r8
    8a86:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8a8a:	a5 01       	movw	r20, r10
    8a8c:	94 01       	movw	r18, r8
    8a8e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8a92:	a5 01       	movw	r20, r10
    8a94:	94 01       	movw	r18, r8
    8a96:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8a9a:	6b 01       	movw	r12, r22
    8a9c:	7c 01       	movw	r14, r24
    8a9e:	23 ee       	ldi	r18, 0xE3	; 227
    8aa0:	3f ed       	ldi	r19, 0xDF	; 223
    8aa2:	47 eb       	ldi	r20, 0xB7	; 183
    8aa4:	5e e3       	ldi	r21, 0x3E	; 62
    8aa6:	c5 01       	movw	r24, r10
    8aa8:	b4 01       	movw	r22, r8
    8aaa:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8aae:	a5 01       	movw	r20, r10
    8ab0:	94 01       	movw	r18, r8
    8ab2:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8ab6:	9b 01       	movw	r18, r22
    8ab8:	ac 01       	movw	r20, r24
    8aba:	c7 01       	movw	r24, r14
    8abc:	b6 01       	movw	r22, r12
    8abe:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8ac2:	6b 01       	movw	r12, r22
    8ac4:	7c 01       	movw	r14, r24
    8ac6:	20 e3       	ldi	r18, 0x30	; 48
    8ac8:	35 ef       	ldi	r19, 0xF5	; 245
    8aca:	49 e3       	ldi	r20, 0x39	; 57
    8acc:	50 e4       	ldi	r21, 0x40	; 64
    8ace:	c5 01       	movw	r24, r10
    8ad0:	b4 01       	movw	r22, r8
    8ad2:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8ad6:	9b 01       	movw	r18, r22
    8ad8:	ac 01       	movw	r20, r24
    8ada:	c7 01       	movw	r24, r14
    8adc:	b6 01       	movw	r22, r12
    8ade:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8ae2:	2f e9       	ldi	r18, 0x9F	; 159
    8ae4:	3f e9       	ldi	r19, 0x9F	; 159
    8ae6:	4d e8       	ldi	r20, 0x8D	; 141
    8ae8:	51 e4       	ldi	r21, 0x41	; 65
    8aea:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8aee:	6b 01       	movw	r12, r22
    8af0:	7c 01       	movw	r14, r24
    8af2:	be 01       	movw	r22, r28
    8af4:	dd 0f       	add	r29, r29
    8af6:	88 0b       	sbc	r24, r24
    8af8:	99 0b       	sbc	r25, r25
    8afa:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    8afe:	9b 01       	movw	r18, r22
    8b00:	ac 01       	movw	r20, r24
    8b02:	c7 01       	movw	r24, r14
    8b04:	b6 01       	movw	r22, r12
    8b06:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8b0a:	60 c5       	rjmp	.+2752   	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    8b0c:	20 e0       	ldi	r18, 0x00	; 0
    8b0e:	30 e0       	ldi	r19, 0x00	; 0
    8b10:	40 e7       	ldi	r20, 0x70	; 112
    8b12:	51 e4       	ldi	r21, 0x41	; 65
    8b14:	c7 01       	movw	r24, r14
    8b16:	b6 01       	movw	r22, r12
    8b18:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    8b1c:	18 16       	cp	r1, r24
    8b1e:	0c f0       	brlt	.+2      	; 0x8b22 <corectTrv+0xf46>
    8b20:	54 c0       	rjmp	.+168    	; 0x8bca <corectTrv+0xfee>
    8b22:	20 e0       	ldi	r18, 0x00	; 0
    8b24:	30 e0       	ldi	r19, 0x00	; 0
    8b26:	40 e8       	ldi	r20, 0x80	; 128
    8b28:	51 e4       	ldi	r21, 0x41	; 65
    8b2a:	c7 01       	movw	r24, r14
    8b2c:	b6 01       	movw	r22, r12
    8b2e:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    8b32:	18 16       	cp	r1, r24
    8b34:	0c f4       	brge	.+2      	; 0x8b38 <corectTrv+0xf5c>
    8b36:	49 c0       	rjmp	.+146    	; 0x8bca <corectTrv+0xfee>
		{
			return( 0.02358 * ds * ds * ds + 0.48252 * ds * ds + 3.36313 * ds + 20.09441)* k;
    8b38:	28 ed       	ldi	r18, 0xD8	; 216
    8b3a:	3a e2       	ldi	r19, 0x2A	; 42
    8b3c:	41 ec       	ldi	r20, 0xC1	; 193
    8b3e:	5c e3       	ldi	r21, 0x3C	; 60
    8b40:	c5 01       	movw	r24, r10
    8b42:	b4 01       	movw	r22, r8
    8b44:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8b48:	a5 01       	movw	r20, r10
    8b4a:	94 01       	movw	r18, r8
    8b4c:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8b50:	a5 01       	movw	r20, r10
    8b52:	94 01       	movw	r18, r8
    8b54:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8b58:	6b 01       	movw	r12, r22
    8b5a:	7c 01       	movw	r14, r24
    8b5c:	2d ed       	ldi	r18, 0xDD	; 221
    8b5e:	3c e0       	ldi	r19, 0x0C	; 12
    8b60:	47 ef       	ldi	r20, 0xF7	; 247
    8b62:	5e e3       	ldi	r21, 0x3E	; 62
    8b64:	c5 01       	movw	r24, r10
    8b66:	b4 01       	movw	r22, r8
    8b68:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8b6c:	a5 01       	movw	r20, r10
    8b6e:	94 01       	movw	r18, r8
    8b70:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8b74:	9b 01       	movw	r18, r22
    8b76:	ac 01       	movw	r20, r24
    8b78:	c7 01       	movw	r24, r14
    8b7a:	b6 01       	movw	r22, r12
    8b7c:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8b80:	6b 01       	movw	r12, r22
    8b82:	7c 01       	movw	r14, r24
    8b84:	26 e8       	ldi	r18, 0x86	; 134
    8b86:	3d e3       	ldi	r19, 0x3D	; 61
    8b88:	47 e5       	ldi	r20, 0x57	; 87
    8b8a:	50 e4       	ldi	r21, 0x40	; 64
    8b8c:	c5 01       	movw	r24, r10
    8b8e:	b4 01       	movw	r22, r8
    8b90:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8b94:	9b 01       	movw	r18, r22
    8b96:	ac 01       	movw	r20, r24
    8b98:	c7 01       	movw	r24, r14
    8b9a:	b6 01       	movw	r22, r12
    8b9c:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8ba0:	2a e5       	ldi	r18, 0x5A	; 90
    8ba2:	31 ec       	ldi	r19, 0xC1	; 193
    8ba4:	40 ea       	ldi	r20, 0xA0	; 160
    8ba6:	51 e4       	ldi	r21, 0x41	; 65
    8ba8:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8bac:	6b 01       	movw	r12, r22
    8bae:	7c 01       	movw	r14, r24
    8bb0:	be 01       	movw	r22, r28
    8bb2:	dd 0f       	add	r29, r29
    8bb4:	88 0b       	sbc	r24, r24
    8bb6:	99 0b       	sbc	r25, r25
    8bb8:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    8bbc:	9b 01       	movw	r18, r22
    8bbe:	ac 01       	movw	r20, r24
    8bc0:	c7 01       	movw	r24, r14
    8bc2:	b6 01       	movw	r22, r12
    8bc4:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8bc8:	01 c5       	rjmp	.+2562   	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 9)
    8bca:	20 e0       	ldi	r18, 0x00	; 0
    8bcc:	30 e0       	ldi	r19, 0x00	; 0
    8bce:	40 e8       	ldi	r20, 0x80	; 128
    8bd0:	51 e4       	ldi	r21, 0x41	; 65
    8bd2:	c7 01       	movw	r24, r14
    8bd4:	b6 01       	movw	r22, r12
    8bd6:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    8bda:	18 16       	cp	r1, r24
    8bdc:	0c f0       	brlt	.+2      	; 0x8be0 <corectTrv+0x1004>
    8bde:	e7 c4       	rjmp	.+2510   	; 0x95ae <corectTrv+0x19d2>
		{
			return( 0.01076 * ds * ds * ds + 0.28823 * ds * ds + 2.82362 * ds + 25.08042)* k;
    8be0:	26 eb       	ldi	r18, 0xB6	; 182
    8be2:	3a e4       	ldi	r19, 0x4A	; 74
    8be4:	40 e3       	ldi	r20, 0x30	; 48
    8be6:	5c e3       	ldi	r21, 0x3C	; 60
    8be8:	c5 01       	movw	r24, r10
    8bea:	b4 01       	movw	r22, r8
    8bec:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8bf0:	a5 01       	movw	r20, r10
    8bf2:	94 01       	movw	r18, r8
    8bf4:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8bf8:	a5 01       	movw	r20, r10
    8bfa:	94 01       	movw	r18, r8
    8bfc:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8c00:	6b 01       	movw	r12, r22
    8c02:	7c 01       	movw	r14, r24
    8c04:	22 ee       	ldi	r18, 0xE2	; 226
    8c06:	32 e9       	ldi	r19, 0x92	; 146
    8c08:	43 e9       	ldi	r20, 0x93	; 147
    8c0a:	5e e3       	ldi	r21, 0x3E	; 62
    8c0c:	c5 01       	movw	r24, r10
    8c0e:	b4 01       	movw	r22, r8
    8c10:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8c14:	a5 01       	movw	r20, r10
    8c16:	94 01       	movw	r18, r8
    8c18:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8c1c:	9b 01       	movw	r18, r22
    8c1e:	ac 01       	movw	r20, r24
    8c20:	c7 01       	movw	r24, r14
    8c22:	b6 01       	movw	r22, r12
    8c24:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8c28:	6b 01       	movw	r12, r22
    8c2a:	7c 01       	movw	r14, r24
    8c2c:	21 e3       	ldi	r18, 0x31	; 49
    8c2e:	36 eb       	ldi	r19, 0xB6	; 182
    8c30:	44 e3       	ldi	r20, 0x34	; 52
    8c32:	50 e4       	ldi	r21, 0x40	; 64
    8c34:	c5 01       	movw	r24, r10
    8c36:	b4 01       	movw	r22, r8
    8c38:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8c3c:	9b 01       	movw	r18, r22
    8c3e:	ac 01       	movw	r20, r24
    8c40:	c7 01       	movw	r24, r14
    8c42:	b6 01       	movw	r22, r12
    8c44:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8c48:	23 eb       	ldi	r18, 0xB3	; 179
    8c4a:	34 ea       	ldi	r19, 0xA4	; 164
    8c4c:	48 ec       	ldi	r20, 0xC8	; 200
    8c4e:	51 e4       	ldi	r21, 0x41	; 65
    8c50:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8c54:	6b 01       	movw	r12, r22
    8c56:	7c 01       	movw	r14, r24
    8c58:	be 01       	movw	r22, r28
    8c5a:	dd 0f       	add	r29, r29
    8c5c:	88 0b       	sbc	r24, r24
    8c5e:	99 0b       	sbc	r25, r25
    8c60:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    8c64:	9b 01       	movw	r18, r22
    8c66:	ac 01       	movw	r20, r24
    8c68:	c7 01       	movw	r24, r14
    8c6a:	b6 01       	movw	r22, r12
    8c6c:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8c70:	ad c4       	rjmp	.+2394   	; 0x95cc <corectTrv+0x19f0>
		}
	}

	else if (ds >= 0 && ds <= 10)
    8c72:	20 e0       	ldi	r18, 0x00	; 0
    8c74:	30 e0       	ldi	r19, 0x00	; 0
    8c76:	a9 01       	movw	r20, r18
    8c78:	c5 01       	movw	r24, r10
    8c7a:	b4 01       	movw	r22, r8
    8c7c:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    8c80:	88 23       	and	r24, r24
    8c82:	0c f4       	brge	.+2      	; 0x8c86 <corectTrv+0x10aa>
    8c84:	e9 c2       	rjmp	.+1490   	; 0x9258 <corectTrv+0x167c>
    8c86:	20 e0       	ldi	r18, 0x00	; 0
    8c88:	30 e0       	ldi	r19, 0x00	; 0
    8c8a:	40 e2       	ldi	r20, 0x20	; 32
    8c8c:	51 e4       	ldi	r21, 0x41	; 65
    8c8e:	c5 01       	movw	r24, r10
    8c90:	b4 01       	movw	r22, r8
    8c92:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    8c96:	18 16       	cp	r1, r24
    8c98:	0c f4       	brge	.+2      	; 0x8c9c <corectTrv+0x10c0>
    8c9a:	de c2       	rjmp	.+1468   	; 0x9258 <corectTrv+0x167c>
	{
		if (Superheat == SSet)
    8c9c:	20 e0       	ldi	r18, 0x00	; 0
    8c9e:	30 e0       	ldi	r19, 0x00	; 0
    8ca0:	40 ee       	ldi	r20, 0xE0	; 224
    8ca2:	50 e4       	ldi	r21, 0x40	; 64
    8ca4:	c7 01       	movw	r24, r14
    8ca6:	b6 01       	movw	r22, r12
    8ca8:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    8cac:	81 11       	cpse	r24, r1
    8cae:	2b c0       	rjmp	.+86     	; 0x8d06 <corectTrv+0x112a>
		{
			return( -2 * .00001 * ds * ds + 1.406 * ds)* k;
    8cb0:	2c ea       	ldi	r18, 0xAC	; 172
    8cb2:	35 ec       	ldi	r19, 0xC5	; 197
    8cb4:	47 ea       	ldi	r20, 0xA7	; 167
    8cb6:	57 eb       	ldi	r21, 0xB7	; 183
    8cb8:	c5 01       	movw	r24, r10
    8cba:	b4 01       	movw	r22, r8
    8cbc:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8cc0:	a5 01       	movw	r20, r10
    8cc2:	94 01       	movw	r18, r8
    8cc4:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8cc8:	6b 01       	movw	r12, r22
    8cca:	7c 01       	movw	r14, r24
    8ccc:	2f ec       	ldi	r18, 0xCF	; 207
    8cce:	37 ef       	ldi	r19, 0xF7	; 247
    8cd0:	43 eb       	ldi	r20, 0xB3	; 179
    8cd2:	5f e3       	ldi	r21, 0x3F	; 63
    8cd4:	c5 01       	movw	r24, r10
    8cd6:	b4 01       	movw	r22, r8
    8cd8:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8cdc:	9b 01       	movw	r18, r22
    8cde:	ac 01       	movw	r20, r24
    8ce0:	c7 01       	movw	r24, r14
    8ce2:	b6 01       	movw	r22, r12
    8ce4:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8ce8:	6b 01       	movw	r12, r22
    8cea:	7c 01       	movw	r14, r24
    8cec:	be 01       	movw	r22, r28
    8cee:	dd 0f       	add	r29, r29
    8cf0:	88 0b       	sbc	r24, r24
    8cf2:	99 0b       	sbc	r25, r25
    8cf4:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    8cf8:	9b 01       	movw	r18, r22
    8cfa:	ac 01       	movw	r20, r24
    8cfc:	c7 01       	movw	r24, r14
    8cfe:	b6 01       	movw	r22, r12
    8d00:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8d04:	63 c4       	rjmp	.+2246   	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    8d06:	20 e0       	ldi	r18, 0x00	; 0
    8d08:	30 e0       	ldi	r19, 0x00	; 0
    8d0a:	40 ee       	ldi	r20, 0xE0	; 224
    8d0c:	50 e4       	ldi	r21, 0x40	; 64
    8d0e:	c7 01       	movw	r24, r14
    8d10:	b6 01       	movw	r22, r12
    8d12:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    8d16:	18 16       	cp	r1, r24
    8d18:	dc f5       	brge	.+118    	; 0x8d90 <corectTrv+0x11b4>
    8d1a:	20 e0       	ldi	r18, 0x00	; 0
    8d1c:	30 e0       	ldi	r19, 0x00	; 0
    8d1e:	40 e0       	ldi	r20, 0x00	; 0
    8d20:	51 e4       	ldi	r21, 0x41	; 65
    8d22:	c7 01       	movw	r24, r14
    8d24:	b6 01       	movw	r22, r12
    8d26:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    8d2a:	18 16       	cp	r1, r24
    8d2c:	8c f1       	brlt	.+98     	; 0x8d90 <corectTrv+0x11b4>
		{
			return( 0.062 * ds * ds + 0.570 * ds + 3.280)* k;
    8d2e:	26 eb       	ldi	r18, 0xB6	; 182
    8d30:	33 ef       	ldi	r19, 0xF3	; 243
    8d32:	4d e7       	ldi	r20, 0x7D	; 125
    8d34:	5d e3       	ldi	r21, 0x3D	; 61
    8d36:	c5 01       	movw	r24, r10
    8d38:	b4 01       	movw	r22, r8
    8d3a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8d3e:	a5 01       	movw	r20, r10
    8d40:	94 01       	movw	r18, r8
    8d42:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8d46:	6b 01       	movw	r12, r22
    8d48:	7c 01       	movw	r14, r24
    8d4a:	25 e8       	ldi	r18, 0x85	; 133
    8d4c:	3b ee       	ldi	r19, 0xEB	; 235
    8d4e:	41 e1       	ldi	r20, 0x11	; 17
    8d50:	5f e3       	ldi	r21, 0x3F	; 63
    8d52:	c5 01       	movw	r24, r10
    8d54:	b4 01       	movw	r22, r8
    8d56:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8d5a:	9b 01       	movw	r18, r22
    8d5c:	ac 01       	movw	r20, r24
    8d5e:	c7 01       	movw	r24, r14
    8d60:	b6 01       	movw	r22, r12
    8d62:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8d66:	25 e8       	ldi	r18, 0x85	; 133
    8d68:	3b ee       	ldi	r19, 0xEB	; 235
    8d6a:	41 e5       	ldi	r20, 0x51	; 81
    8d6c:	50 e4       	ldi	r21, 0x40	; 64
    8d6e:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8d72:	6b 01       	movw	r12, r22
    8d74:	7c 01       	movw	r14, r24
    8d76:	be 01       	movw	r22, r28
    8d78:	dd 0f       	add	r29, r29
    8d7a:	88 0b       	sbc	r24, r24
    8d7c:	99 0b       	sbc	r25, r25
    8d7e:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    8d82:	9b 01       	movw	r18, r22
    8d84:	ac 01       	movw	r20, r24
    8d86:	c7 01       	movw	r24, r14
    8d88:	b6 01       	movw	r22, r12
    8d8a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8d8e:	1e c4       	rjmp	.+2108   	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    8d90:	20 e0       	ldi	r18, 0x00	; 0
    8d92:	30 e0       	ldi	r19, 0x00	; 0
    8d94:	40 e0       	ldi	r20, 0x00	; 0
    8d96:	51 e4       	ldi	r21, 0x41	; 65
    8d98:	c7 01       	movw	r24, r14
    8d9a:	b6 01       	movw	r22, r12
    8d9c:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    8da0:	18 16       	cp	r1, r24
    8da2:	dc f5       	brge	.+118    	; 0x8e1a <corectTrv+0x123e>
    8da4:	20 e0       	ldi	r18, 0x00	; 0
    8da6:	30 e0       	ldi	r19, 0x00	; 0
    8da8:	40 e1       	ldi	r20, 0x10	; 16
    8daa:	51 e4       	ldi	r21, 0x41	; 65
    8dac:	c7 01       	movw	r24, r14
    8dae:	b6 01       	movw	r22, r12
    8db0:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    8db4:	18 16       	cp	r1, r24
    8db6:	8c f1       	brlt	.+98     	; 0x8e1a <corectTrv+0x123e>
		{
			return( 0.099 * ds * ds - 0.019 * ds + 6.338)* k;
    8db8:	23 e8       	ldi	r18, 0x83	; 131
    8dba:	30 ec       	ldi	r19, 0xC0	; 192
    8dbc:	4a ec       	ldi	r20, 0xCA	; 202
    8dbe:	5d e3       	ldi	r21, 0x3D	; 61
    8dc0:	c5 01       	movw	r24, r10
    8dc2:	b4 01       	movw	r22, r8
    8dc4:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8dc8:	a5 01       	movw	r20, r10
    8dca:	94 01       	movw	r18, r8
    8dcc:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8dd0:	6b 01       	movw	r12, r22
    8dd2:	7c 01       	movw	r14, r24
    8dd4:	23 ee       	ldi	r18, 0xE3	; 227
    8dd6:	35 ea       	ldi	r19, 0xA5	; 165
    8dd8:	4b e9       	ldi	r20, 0x9B	; 155
    8dda:	5c e3       	ldi	r21, 0x3C	; 60
    8ddc:	c5 01       	movw	r24, r10
    8dde:	b4 01       	movw	r22, r8
    8de0:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8de4:	9b 01       	movw	r18, r22
    8de6:	ac 01       	movw	r20, r24
    8de8:	c7 01       	movw	r24, r14
    8dea:	b6 01       	movw	r22, r12
    8dec:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    8df0:	25 ee       	ldi	r18, 0xE5	; 229
    8df2:	30 ed       	ldi	r19, 0xD0	; 208
    8df4:	4a ec       	ldi	r20, 0xCA	; 202
    8df6:	50 e4       	ldi	r21, 0x40	; 64
    8df8:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8dfc:	6b 01       	movw	r12, r22
    8dfe:	7c 01       	movw	r14, r24
    8e00:	be 01       	movw	r22, r28
    8e02:	dd 0f       	add	r29, r29
    8e04:	88 0b       	sbc	r24, r24
    8e06:	99 0b       	sbc	r25, r25
    8e08:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    8e0c:	9b 01       	movw	r18, r22
    8e0e:	ac 01       	movw	r20, r24
    8e10:	c7 01       	movw	r24, r14
    8e12:	b6 01       	movw	r22, r12
    8e14:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8e18:	d9 c3       	rjmp	.+1970   	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    8e1a:	20 e0       	ldi	r18, 0x00	; 0
    8e1c:	30 e0       	ldi	r19, 0x00	; 0
    8e1e:	40 e1       	ldi	r20, 0x10	; 16
    8e20:	51 e4       	ldi	r21, 0x41	; 65
    8e22:	c7 01       	movw	r24, r14
    8e24:	b6 01       	movw	r22, r12
    8e26:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    8e2a:	18 16       	cp	r1, r24
    8e2c:	dc f5       	brge	.+118    	; 0x8ea4 <corectTrv+0x12c8>
    8e2e:	20 e0       	ldi	r18, 0x00	; 0
    8e30:	30 e0       	ldi	r19, 0x00	; 0
    8e32:	40 e2       	ldi	r20, 0x20	; 32
    8e34:	51 e4       	ldi	r21, 0x41	; 65
    8e36:	c7 01       	movw	r24, r14
    8e38:	b6 01       	movw	r22, r12
    8e3a:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    8e3e:	18 16       	cp	r1, r24
    8e40:	8c f1       	brlt	.+98     	; 0x8ea4 <corectTrv+0x12c8>
		{
			return( 0.121 * ds * ds - 0.409 * ds + 9.164)* k;
    8e42:	29 ed       	ldi	r18, 0xD9	; 217
    8e44:	3e ec       	ldi	r19, 0xCE	; 206
    8e46:	47 ef       	ldi	r20, 0xF7	; 247
    8e48:	5d e3       	ldi	r21, 0x3D	; 61
    8e4a:	c5 01       	movw	r24, r10
    8e4c:	b4 01       	movw	r22, r8
    8e4e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8e52:	a5 01       	movw	r20, r10
    8e54:	94 01       	movw	r18, r8
    8e56:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8e5a:	6b 01       	movw	r12, r22
    8e5c:	7c 01       	movw	r14, r24
    8e5e:	23 e7       	ldi	r18, 0x73	; 115
    8e60:	38 e6       	ldi	r19, 0x68	; 104
    8e62:	41 ed       	ldi	r20, 0xD1	; 209
    8e64:	5e e3       	ldi	r21, 0x3E	; 62
    8e66:	c5 01       	movw	r24, r10
    8e68:	b4 01       	movw	r22, r8
    8e6a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8e6e:	9b 01       	movw	r18, r22
    8e70:	ac 01       	movw	r20, r24
    8e72:	c7 01       	movw	r24, r14
    8e74:	b6 01       	movw	r22, r12
    8e76:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    8e7a:	2e eb       	ldi	r18, 0xBE	; 190
    8e7c:	3f e9       	ldi	r19, 0x9F	; 159
    8e7e:	42 e1       	ldi	r20, 0x12	; 18
    8e80:	51 e4       	ldi	r21, 0x41	; 65
    8e82:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8e86:	6b 01       	movw	r12, r22
    8e88:	7c 01       	movw	r14, r24
    8e8a:	be 01       	movw	r22, r28
    8e8c:	dd 0f       	add	r29, r29
    8e8e:	88 0b       	sbc	r24, r24
    8e90:	99 0b       	sbc	r25, r25
    8e92:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    8e96:	9b 01       	movw	r18, r22
    8e98:	ac 01       	movw	r20, r24
    8e9a:	c7 01       	movw	r24, r14
    8e9c:	b6 01       	movw	r22, r12
    8e9e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8ea2:	94 c3       	rjmp	.+1832   	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    8ea4:	20 e0       	ldi	r18, 0x00	; 0
    8ea6:	30 e0       	ldi	r19, 0x00	; 0
    8ea8:	40 e2       	ldi	r20, 0x20	; 32
    8eaa:	51 e4       	ldi	r21, 0x41	; 65
    8eac:	c7 01       	movw	r24, r14
    8eae:	b6 01       	movw	r22, r12
    8eb0:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    8eb4:	18 16       	cp	r1, r24
    8eb6:	dc f5       	brge	.+118    	; 0x8f2e <corectTrv+0x1352>
    8eb8:	20 e0       	ldi	r18, 0x00	; 0
    8eba:	30 e0       	ldi	r19, 0x00	; 0
    8ebc:	40 e3       	ldi	r20, 0x30	; 48
    8ebe:	51 e4       	ldi	r21, 0x41	; 65
    8ec0:	c7 01       	movw	r24, r14
    8ec2:	b6 01       	movw	r22, r12
    8ec4:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    8ec8:	18 16       	cp	r1, r24
    8eca:	8c f1       	brlt	.+98     	; 0x8f2e <corectTrv+0x1352>
		{
			return( 0.128 * ds * ds - 0.340 * ds + 11.4)* k;
    8ecc:	2f e6       	ldi	r18, 0x6F	; 111
    8ece:	32 e1       	ldi	r19, 0x12	; 18
    8ed0:	43 e0       	ldi	r20, 0x03	; 3
    8ed2:	5e e3       	ldi	r21, 0x3E	; 62
    8ed4:	c5 01       	movw	r24, r10
    8ed6:	b4 01       	movw	r22, r8
    8ed8:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8edc:	a5 01       	movw	r20, r10
    8ede:	94 01       	movw	r18, r8
    8ee0:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8ee4:	6b 01       	movw	r12, r22
    8ee6:	7c 01       	movw	r14, r24
    8ee8:	2b e7       	ldi	r18, 0x7B	; 123
    8eea:	34 e1       	ldi	r19, 0x14	; 20
    8eec:	4e ea       	ldi	r20, 0xAE	; 174
    8eee:	5e e3       	ldi	r21, 0x3E	; 62
    8ef0:	c5 01       	movw	r24, r10
    8ef2:	b4 01       	movw	r22, r8
    8ef4:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8ef8:	9b 01       	movw	r18, r22
    8efa:	ac 01       	movw	r20, r24
    8efc:	c7 01       	movw	r24, r14
    8efe:	b6 01       	movw	r22, r12
    8f00:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    8f04:	26 e6       	ldi	r18, 0x66	; 102
    8f06:	36 e6       	ldi	r19, 0x66	; 102
    8f08:	46 e3       	ldi	r20, 0x36	; 54
    8f0a:	51 e4       	ldi	r21, 0x41	; 65
    8f0c:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8f10:	6b 01       	movw	r12, r22
    8f12:	7c 01       	movw	r14, r24
    8f14:	be 01       	movw	r22, r28
    8f16:	dd 0f       	add	r29, r29
    8f18:	88 0b       	sbc	r24, r24
    8f1a:	99 0b       	sbc	r25, r25
    8f1c:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    8f20:	9b 01       	movw	r18, r22
    8f22:	ac 01       	movw	r20, r24
    8f24:	c7 01       	movw	r24, r14
    8f26:	b6 01       	movw	r22, r12
    8f28:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8f2c:	4f c3       	rjmp	.+1694   	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    8f2e:	20 e0       	ldi	r18, 0x00	; 0
    8f30:	30 e0       	ldi	r19, 0x00	; 0
    8f32:	40 e3       	ldi	r20, 0x30	; 48
    8f34:	51 e4       	ldi	r21, 0x41	; 65
    8f36:	c7 01       	movw	r24, r14
    8f38:	b6 01       	movw	r22, r12
    8f3a:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    8f3e:	18 16       	cp	r1, r24
    8f40:	dc f5       	brge	.+118    	; 0x8fb8 <corectTrv+0x13dc>
    8f42:	20 e0       	ldi	r18, 0x00	; 0
    8f44:	30 e0       	ldi	r19, 0x00	; 0
    8f46:	40 e4       	ldi	r20, 0x40	; 64
    8f48:	51 e4       	ldi	r21, 0x41	; 65
    8f4a:	c7 01       	movw	r24, r14
    8f4c:	b6 01       	movw	r22, r12
    8f4e:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    8f52:	18 16       	cp	r1, r24
    8f54:	8c f1       	brlt	.+98     	; 0x8fb8 <corectTrv+0x13dc>
		{
			return( 0.128 * ds * ds - 0.382 * ds + 15.51)* k;
    8f56:	2f e6       	ldi	r18, 0x6F	; 111
    8f58:	32 e1       	ldi	r19, 0x12	; 18
    8f5a:	43 e0       	ldi	r20, 0x03	; 3
    8f5c:	5e e3       	ldi	r21, 0x3E	; 62
    8f5e:	c5 01       	movw	r24, r10
    8f60:	b4 01       	movw	r22, r8
    8f62:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8f66:	a5 01       	movw	r20, r10
    8f68:	94 01       	movw	r18, r8
    8f6a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8f6e:	6b 01       	movw	r12, r22
    8f70:	7c 01       	movw	r14, r24
    8f72:	21 e8       	ldi	r18, 0x81	; 129
    8f74:	35 e9       	ldi	r19, 0x95	; 149
    8f76:	43 ec       	ldi	r20, 0xC3	; 195
    8f78:	5e e3       	ldi	r21, 0x3E	; 62
    8f7a:	c5 01       	movw	r24, r10
    8f7c:	b4 01       	movw	r22, r8
    8f7e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8f82:	9b 01       	movw	r18, r22
    8f84:	ac 01       	movw	r20, r24
    8f86:	c7 01       	movw	r24, r14
    8f88:	b6 01       	movw	r22, r12
    8f8a:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    8f8e:	26 ef       	ldi	r18, 0xF6	; 246
    8f90:	38 e2       	ldi	r19, 0x28	; 40
    8f92:	48 e7       	ldi	r20, 0x78	; 120
    8f94:	51 e4       	ldi	r21, 0x41	; 65
    8f96:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8f9a:	6b 01       	movw	r12, r22
    8f9c:	7c 01       	movw	r14, r24
    8f9e:	be 01       	movw	r22, r28
    8fa0:	dd 0f       	add	r29, r29
    8fa2:	88 0b       	sbc	r24, r24
    8fa4:	99 0b       	sbc	r25, r25
    8fa6:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    8faa:	9b 01       	movw	r18, r22
    8fac:	ac 01       	movw	r20, r24
    8fae:	c7 01       	movw	r24, r14
    8fb0:	b6 01       	movw	r22, r12
    8fb2:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8fb6:	0a c3       	rjmp	.+1556   	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    8fb8:	20 e0       	ldi	r18, 0x00	; 0
    8fba:	30 e0       	ldi	r19, 0x00	; 0
    8fbc:	40 e4       	ldi	r20, 0x40	; 64
    8fbe:	51 e4       	ldi	r21, 0x41	; 65
    8fc0:	c7 01       	movw	r24, r14
    8fc2:	b6 01       	movw	r22, r12
    8fc4:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    8fc8:	18 16       	cp	r1, r24
    8fca:	dc f5       	brge	.+118    	; 0x9042 <corectTrv+0x1466>
    8fcc:	20 e0       	ldi	r18, 0x00	; 0
    8fce:	30 e0       	ldi	r19, 0x00	; 0
    8fd0:	40 e5       	ldi	r20, 0x50	; 80
    8fd2:	51 e4       	ldi	r21, 0x41	; 65
    8fd4:	c7 01       	movw	r24, r14
    8fd6:	b6 01       	movw	r22, r12
    8fd8:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    8fdc:	18 16       	cp	r1, r24
    8fde:	8c f1       	brlt	.+98     	; 0x9042 <corectTrv+0x1466>
		{
			return( 0.128 * ds * ds - 0.382 * ds + 15.51)* k;
    8fe0:	2f e6       	ldi	r18, 0x6F	; 111
    8fe2:	32 e1       	ldi	r19, 0x12	; 18
    8fe4:	43 e0       	ldi	r20, 0x03	; 3
    8fe6:	5e e3       	ldi	r21, 0x3E	; 62
    8fe8:	c5 01       	movw	r24, r10
    8fea:	b4 01       	movw	r22, r8
    8fec:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8ff0:	a5 01       	movw	r20, r10
    8ff2:	94 01       	movw	r18, r8
    8ff4:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    8ff8:	6b 01       	movw	r12, r22
    8ffa:	7c 01       	movw	r14, r24
    8ffc:	21 e8       	ldi	r18, 0x81	; 129
    8ffe:	35 e9       	ldi	r19, 0x95	; 149
    9000:	43 ec       	ldi	r20, 0xC3	; 195
    9002:	5e e3       	ldi	r21, 0x3E	; 62
    9004:	c5 01       	movw	r24, r10
    9006:	b4 01       	movw	r22, r8
    9008:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    900c:	9b 01       	movw	r18, r22
    900e:	ac 01       	movw	r20, r24
    9010:	c7 01       	movw	r24, r14
    9012:	b6 01       	movw	r22, r12
    9014:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    9018:	26 ef       	ldi	r18, 0xF6	; 246
    901a:	38 e2       	ldi	r19, 0x28	; 40
    901c:	48 e7       	ldi	r20, 0x78	; 120
    901e:	51 e4       	ldi	r21, 0x41	; 65
    9020:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    9024:	6b 01       	movw	r12, r22
    9026:	7c 01       	movw	r14, r24
    9028:	be 01       	movw	r22, r28
    902a:	dd 0f       	add	r29, r29
    902c:	88 0b       	sbc	r24, r24
    902e:	99 0b       	sbc	r25, r25
    9030:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    9034:	9b 01       	movw	r18, r22
    9036:	ac 01       	movw	r20, r24
    9038:	c7 01       	movw	r24, r14
    903a:	b6 01       	movw	r22, r12
    903c:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    9040:	c5 c2       	rjmp	.+1418   	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    9042:	20 e0       	ldi	r18, 0x00	; 0
    9044:	30 e0       	ldi	r19, 0x00	; 0
    9046:	40 e5       	ldi	r20, 0x50	; 80
    9048:	51 e4       	ldi	r21, 0x41	; 65
    904a:	c7 01       	movw	r24, r14
    904c:	b6 01       	movw	r22, r12
    904e:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    9052:	18 16       	cp	r1, r24
    9054:	dc f5       	brge	.+118    	; 0x90cc <corectTrv+0x14f0>
    9056:	20 e0       	ldi	r18, 0x00	; 0
    9058:	30 e0       	ldi	r19, 0x00	; 0
    905a:	40 e6       	ldi	r20, 0x60	; 96
    905c:	51 e4       	ldi	r21, 0x41	; 65
    905e:	c7 01       	movw	r24, r14
    9060:	b6 01       	movw	r22, r12
    9062:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    9066:	18 16       	cp	r1, r24
    9068:	8c f1       	brlt	.+98     	; 0x90cc <corectTrv+0x14f0>
		{
			return( 0.137 * ds * ds - 0.652 * ds + 16.63)* k;
    906a:	2a eb       	ldi	r18, 0xBA	; 186
    906c:	39 e4       	ldi	r19, 0x49	; 73
    906e:	4c e0       	ldi	r20, 0x0C	; 12
    9070:	5e e3       	ldi	r21, 0x3E	; 62
    9072:	c5 01       	movw	r24, r10
    9074:	b4 01       	movw	r22, r8
    9076:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    907a:	a5 01       	movw	r20, r10
    907c:	94 01       	movw	r18, r8
    907e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    9082:	6b 01       	movw	r12, r22
    9084:	7c 01       	movw	r14, r24
    9086:	29 e7       	ldi	r18, 0x79	; 121
    9088:	39 ee       	ldi	r19, 0xE9	; 233
    908a:	46 e2       	ldi	r20, 0x26	; 38
    908c:	5f e3       	ldi	r21, 0x3F	; 63
    908e:	c5 01       	movw	r24, r10
    9090:	b4 01       	movw	r22, r8
    9092:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    9096:	9b 01       	movw	r18, r22
    9098:	ac 01       	movw	r20, r24
    909a:	c7 01       	movw	r24, r14
    909c:	b6 01       	movw	r22, r12
    909e:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    90a2:	2d e3       	ldi	r18, 0x3D	; 61
    90a4:	3a e0       	ldi	r19, 0x0A	; 10
    90a6:	45 e8       	ldi	r20, 0x85	; 133
    90a8:	51 e4       	ldi	r21, 0x41	; 65
    90aa:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    90ae:	6b 01       	movw	r12, r22
    90b0:	7c 01       	movw	r14, r24
    90b2:	be 01       	movw	r22, r28
    90b4:	dd 0f       	add	r29, r29
    90b6:	88 0b       	sbc	r24, r24
    90b8:	99 0b       	sbc	r25, r25
    90ba:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    90be:	9b 01       	movw	r18, r22
    90c0:	ac 01       	movw	r20, r24
    90c2:	c7 01       	movw	r24, r14
    90c4:	b6 01       	movw	r22, r12
    90c6:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    90ca:	80 c2       	rjmp	.+1280   	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    90cc:	20 e0       	ldi	r18, 0x00	; 0
    90ce:	30 e0       	ldi	r19, 0x00	; 0
    90d0:	40 e6       	ldi	r20, 0x60	; 96
    90d2:	51 e4       	ldi	r21, 0x41	; 65
    90d4:	c7 01       	movw	r24, r14
    90d6:	b6 01       	movw	r22, r12
    90d8:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    90dc:	18 16       	cp	r1, r24
    90de:	dc f5       	brge	.+118    	; 0x9156 <corectTrv+0x157a>
    90e0:	20 e0       	ldi	r18, 0x00	; 0
    90e2:	30 e0       	ldi	r19, 0x00	; 0
    90e4:	40 e7       	ldi	r20, 0x70	; 112
    90e6:	51 e4       	ldi	r21, 0x41	; 65
    90e8:	c7 01       	movw	r24, r14
    90ea:	b6 01       	movw	r22, r12
    90ec:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    90f0:	18 16       	cp	r1, r24
    90f2:	8c f1       	brlt	.+98     	; 0x9156 <corectTrv+0x157a>
		{
			return( 0.142 * ds * ds - 0.630 * ds + 17.7)* k;
    90f4:	23 e7       	ldi	r18, 0x73	; 115
    90f6:	38 e6       	ldi	r19, 0x68	; 104
    90f8:	41 e1       	ldi	r20, 0x11	; 17
    90fa:	5e e3       	ldi	r21, 0x3E	; 62
    90fc:	c5 01       	movw	r24, r10
    90fe:	b4 01       	movw	r22, r8
    9100:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    9104:	a5 01       	movw	r20, r10
    9106:	94 01       	movw	r18, r8
    9108:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    910c:	6b 01       	movw	r12, r22
    910e:	7c 01       	movw	r14, r24
    9110:	2e ea       	ldi	r18, 0xAE	; 174
    9112:	37 e4       	ldi	r19, 0x47	; 71
    9114:	41 e2       	ldi	r20, 0x21	; 33
    9116:	5f e3       	ldi	r21, 0x3F	; 63
    9118:	c5 01       	movw	r24, r10
    911a:	b4 01       	movw	r22, r8
    911c:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    9120:	9b 01       	movw	r18, r22
    9122:	ac 01       	movw	r20, r24
    9124:	c7 01       	movw	r24, r14
    9126:	b6 01       	movw	r22, r12
    9128:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    912c:	2a e9       	ldi	r18, 0x9A	; 154
    912e:	39 e9       	ldi	r19, 0x99	; 153
    9130:	4d e8       	ldi	r20, 0x8D	; 141
    9132:	51 e4       	ldi	r21, 0x41	; 65
    9134:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    9138:	6b 01       	movw	r12, r22
    913a:	7c 01       	movw	r14, r24
    913c:	be 01       	movw	r22, r28
    913e:	dd 0f       	add	r29, r29
    9140:	88 0b       	sbc	r24, r24
    9142:	99 0b       	sbc	r25, r25
    9144:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    9148:	9b 01       	movw	r18, r22
    914a:	ac 01       	movw	r20, r24
    914c:	c7 01       	movw	r24, r14
    914e:	b6 01       	movw	r22, r12
    9150:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    9154:	3b c2       	rjmp	.+1142   	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    9156:	20 e0       	ldi	r18, 0x00	; 0
    9158:	30 e0       	ldi	r19, 0x00	; 0
    915a:	40 e7       	ldi	r20, 0x70	; 112
    915c:	51 e4       	ldi	r21, 0x41	; 65
    915e:	c7 01       	movw	r24, r14
    9160:	b6 01       	movw	r22, r12
    9162:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    9166:	18 16       	cp	r1, r24
    9168:	dc f5       	brge	.+118    	; 0x91e0 <corectTrv+0x1604>
    916a:	20 e0       	ldi	r18, 0x00	; 0
    916c:	30 e0       	ldi	r19, 0x00	; 0
    916e:	40 e8       	ldi	r20, 0x80	; 128
    9170:	51 e4       	ldi	r21, 0x41	; 65
    9172:	c7 01       	movw	r24, r14
    9174:	b6 01       	movw	r22, r12
    9176:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    917a:	18 16       	cp	r1, r24
    917c:	8c f1       	brlt	.+98     	; 0x91e0 <corectTrv+0x1604>
		{
			return( 0.126 * ds * ds - 0.683 * ds + 20.4)* k;
    917e:	25 e2       	ldi	r18, 0x25	; 37
    9180:	36 e0       	ldi	r19, 0x06	; 6
    9182:	41 e0       	ldi	r20, 0x01	; 1
    9184:	5e e3       	ldi	r21, 0x3E	; 62
    9186:	c5 01       	movw	r24, r10
    9188:	b4 01       	movw	r22, r8
    918a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    918e:	a5 01       	movw	r20, r10
    9190:	94 01       	movw	r18, r8
    9192:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    9196:	6b 01       	movw	r12, r22
    9198:	7c 01       	movw	r14, r24
    919a:	27 e1       	ldi	r18, 0x17	; 23
    919c:	39 ed       	ldi	r19, 0xD9	; 217
    919e:	4e e2       	ldi	r20, 0x2E	; 46
    91a0:	5f e3       	ldi	r21, 0x3F	; 63
    91a2:	c5 01       	movw	r24, r10
    91a4:	b4 01       	movw	r22, r8
    91a6:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    91aa:	9b 01       	movw	r18, r22
    91ac:	ac 01       	movw	r20, r24
    91ae:	c7 01       	movw	r24, r14
    91b0:	b6 01       	movw	r22, r12
    91b2:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    91b6:	23 e3       	ldi	r18, 0x33	; 51
    91b8:	33 e3       	ldi	r19, 0x33	; 51
    91ba:	43 ea       	ldi	r20, 0xA3	; 163
    91bc:	51 e4       	ldi	r21, 0x41	; 65
    91be:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    91c2:	6b 01       	movw	r12, r22
    91c4:	7c 01       	movw	r14, r24
    91c6:	be 01       	movw	r22, r28
    91c8:	dd 0f       	add	r29, r29
    91ca:	88 0b       	sbc	r24, r24
    91cc:	99 0b       	sbc	r25, r25
    91ce:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    91d2:	9b 01       	movw	r18, r22
    91d4:	ac 01       	movw	r20, r24
    91d6:	c7 01       	movw	r24, r14
    91d8:	b6 01       	movw	r22, r12
    91da:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    91de:	f6 c1       	rjmp	.+1004   	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 9)
    91e0:	20 e0       	ldi	r18, 0x00	; 0
    91e2:	30 e0       	ldi	r19, 0x00	; 0
    91e4:	40 e8       	ldi	r20, 0x80	; 128
    91e6:	51 e4       	ldi	r21, 0x41	; 65
    91e8:	c7 01       	movw	r24, r14
    91ea:	b6 01       	movw	r22, r12
    91ec:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    91f0:	18 16       	cp	r1, r24
    91f2:	0c f0       	brlt	.+2      	; 0x91f6 <corectTrv+0x161a>
    91f4:	e0 c1       	rjmp	.+960    	; 0x95b6 <corectTrv+0x19da>
		{
			return( 0.027 * ds * ds - 0.277 * ds + 25.29)* k;
    91f6:	2b e1       	ldi	r18, 0x1B	; 27
    91f8:	3f e2       	ldi	r19, 0x2F	; 47
    91fa:	4d ed       	ldi	r20, 0xDD	; 221
    91fc:	5c e3       	ldi	r21, 0x3C	; 60
    91fe:	c5 01       	movw	r24, r10
    9200:	b4 01       	movw	r22, r8
    9202:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    9206:	a5 01       	movw	r20, r10
    9208:	94 01       	movw	r18, r8
    920a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    920e:	6b 01       	movw	r12, r22
    9210:	7c 01       	movw	r14, r24
    9212:	22 ef       	ldi	r18, 0xF2	; 242
    9214:	32 ed       	ldi	r19, 0xD2	; 210
    9216:	4d e8       	ldi	r20, 0x8D	; 141
    9218:	5e e3       	ldi	r21, 0x3E	; 62
    921a:	c5 01       	movw	r24, r10
    921c:	b4 01       	movw	r22, r8
    921e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    9222:	9b 01       	movw	r18, r22
    9224:	ac 01       	movw	r20, r24
    9226:	c7 01       	movw	r24, r14
    9228:	b6 01       	movw	r22, r12
    922a:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    922e:	2c ee       	ldi	r18, 0xEC	; 236
    9230:	31 e5       	ldi	r19, 0x51	; 81
    9232:	4a ec       	ldi	r20, 0xCA	; 202
    9234:	51 e4       	ldi	r21, 0x41	; 65
    9236:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    923a:	6b 01       	movw	r12, r22
    923c:	7c 01       	movw	r14, r24
    923e:	be 01       	movw	r22, r28
    9240:	dd 0f       	add	r29, r29
    9242:	88 0b       	sbc	r24, r24
    9244:	99 0b       	sbc	r25, r25
    9246:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    924a:	9b 01       	movw	r18, r22
    924c:	ac 01       	movw	r20, r24
    924e:	c7 01       	movw	r24, r14
    9250:	b6 01       	movw	r22, r12
    9252:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    9256:	ba c1       	rjmp	.+884    	; 0x95cc <corectTrv+0x19f0>
		}
	}

	else if (ds > 10)
    9258:	20 e0       	ldi	r18, 0x00	; 0
    925a:	30 e0       	ldi	r19, 0x00	; 0
    925c:	40 e2       	ldi	r20, 0x20	; 32
    925e:	51 e4       	ldi	r21, 0x41	; 65
    9260:	c5 01       	movw	r24, r10
    9262:	b4 01       	movw	r22, r8
    9264:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    9268:	18 16       	cp	r1, r24
    926a:	0c f0       	brlt	.+2      	; 0x926e <corectTrv+0x1692>
    926c:	a8 c1       	rjmp	.+848    	; 0x95be <corectTrv+0x19e2>
    926e:	08 c0       	rjmp	.+16     	; 0x9280 <corectTrv+0x16a4>
	
	Superheat_old = Superheat;
	
	if (ds > 20)
	{
		ds = 20;
    9270:	0f 2e       	mov	r0, r31
    9272:	81 2c       	mov	r8, r1
    9274:	91 2c       	mov	r9, r1
    9276:	f0 ea       	ldi	r31, 0xA0	; 160
    9278:	af 2e       	mov	r10, r31
    927a:	f1 e4       	ldi	r31, 0x41	; 65
    927c:	bf 2e       	mov	r11, r31
    927e:	f0 2d       	mov	r31, r0
		}
	}

	else if (ds > 10)
	{
		if (Superheat == SSet)
    9280:	20 e0       	ldi	r18, 0x00	; 0
    9282:	30 e0       	ldi	r19, 0x00	; 0
    9284:	40 ee       	ldi	r20, 0xE0	; 224
    9286:	50 e4       	ldi	r21, 0x40	; 64
    9288:	c7 01       	movw	r24, r14
    928a:	b6 01       	movw	r22, r12
    928c:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    9290:	81 11       	cpse	r24, r1
    9292:	31 c0       	rjmp	.+98     	; 0x92f6 <corectTrv+0x171a>
		{
			return( 0.137 * ds * ds - 3.245 * ds + 34.51)* k;
    9294:	2a eb       	ldi	r18, 0xBA	; 186
    9296:	39 e4       	ldi	r19, 0x49	; 73
    9298:	4c e0       	ldi	r20, 0x0C	; 12
    929a:	5e e3       	ldi	r21, 0x3E	; 62
    929c:	c5 01       	movw	r24, r10
    929e:	b4 01       	movw	r22, r8
    92a0:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    92a4:	a5 01       	movw	r20, r10
    92a6:	94 01       	movw	r18, r8
    92a8:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    92ac:	6b 01       	movw	r12, r22
    92ae:	7c 01       	movw	r14, r24
    92b0:	24 e1       	ldi	r18, 0x14	; 20
    92b2:	3e ea       	ldi	r19, 0xAE	; 174
    92b4:	4f e4       	ldi	r20, 0x4F	; 79
    92b6:	50 e4       	ldi	r21, 0x40	; 64
    92b8:	c5 01       	movw	r24, r10
    92ba:	b4 01       	movw	r22, r8
    92bc:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    92c0:	9b 01       	movw	r18, r22
    92c2:	ac 01       	movw	r20, r24
    92c4:	c7 01       	movw	r24, r14
    92c6:	b6 01       	movw	r22, r12
    92c8:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    92cc:	2d e3       	ldi	r18, 0x3D	; 61
    92ce:	3a e0       	ldi	r19, 0x0A	; 10
    92d0:	4a e0       	ldi	r20, 0x0A	; 10
    92d2:	52 e4       	ldi	r21, 0x42	; 66
    92d4:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    92d8:	6b 01       	movw	r12, r22
    92da:	7c 01       	movw	r14, r24
    92dc:	be 01       	movw	r22, r28
    92de:	dd 0f       	add	r29, r29
    92e0:	88 0b       	sbc	r24, r24
    92e2:	99 0b       	sbc	r25, r25
    92e4:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    92e8:	9b 01       	movw	r18, r22
    92ea:	ac 01       	movw	r20, r24
    92ec:	c7 01       	movw	r24, r14
    92ee:	b6 01       	movw	r22, r12
    92f0:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    92f4:	6b c1       	rjmp	.+726    	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    92f6:	20 e0       	ldi	r18, 0x00	; 0
    92f8:	30 e0       	ldi	r19, 0x00	; 0
    92fa:	40 ee       	ldi	r20, 0xE0	; 224
    92fc:	50 e4       	ldi	r21, 0x40	; 64
    92fe:	c7 01       	movw	r24, r14
    9300:	b6 01       	movw	r22, r12
    9302:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    9306:	18 16       	cp	r1, r24
    9308:	dc f5       	brge	.+118    	; 0x9380 <corectTrv+0x17a4>
    930a:	20 e0       	ldi	r18, 0x00	; 0
    930c:	30 e0       	ldi	r19, 0x00	; 0
    930e:	40 e0       	ldi	r20, 0x00	; 0
    9310:	51 e4       	ldi	r21, 0x41	; 65
    9312:	c7 01       	movw	r24, r14
    9314:	b6 01       	movw	r22, r12
    9316:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    931a:	18 16       	cp	r1, r24
    931c:	8c f1       	brlt	.+98     	; 0x9380 <corectTrv+0x17a4>
		{
			return( 0.137 * ds * ds - 3.245 * ds + 34.51)* k;
    931e:	2a eb       	ldi	r18, 0xBA	; 186
    9320:	39 e4       	ldi	r19, 0x49	; 73
    9322:	4c e0       	ldi	r20, 0x0C	; 12
    9324:	5e e3       	ldi	r21, 0x3E	; 62
    9326:	c5 01       	movw	r24, r10
    9328:	b4 01       	movw	r22, r8
    932a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    932e:	a5 01       	movw	r20, r10
    9330:	94 01       	movw	r18, r8
    9332:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    9336:	6b 01       	movw	r12, r22
    9338:	7c 01       	movw	r14, r24
    933a:	24 e1       	ldi	r18, 0x14	; 20
    933c:	3e ea       	ldi	r19, 0xAE	; 174
    933e:	4f e4       	ldi	r20, 0x4F	; 79
    9340:	50 e4       	ldi	r21, 0x40	; 64
    9342:	c5 01       	movw	r24, r10
    9344:	b4 01       	movw	r22, r8
    9346:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    934a:	9b 01       	movw	r18, r22
    934c:	ac 01       	movw	r20, r24
    934e:	c7 01       	movw	r24, r14
    9350:	b6 01       	movw	r22, r12
    9352:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    9356:	2d e3       	ldi	r18, 0x3D	; 61
    9358:	3a e0       	ldi	r19, 0x0A	; 10
    935a:	4a e0       	ldi	r20, 0x0A	; 10
    935c:	52 e4       	ldi	r21, 0x42	; 66
    935e:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    9362:	6b 01       	movw	r12, r22
    9364:	7c 01       	movw	r14, r24
    9366:	be 01       	movw	r22, r28
    9368:	dd 0f       	add	r29, r29
    936a:	88 0b       	sbc	r24, r24
    936c:	99 0b       	sbc	r25, r25
    936e:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    9372:	9b 01       	movw	r18, r22
    9374:	ac 01       	movw	r20, r24
    9376:	c7 01       	movw	r24, r14
    9378:	b6 01       	movw	r22, r12
    937a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    937e:	26 c1       	rjmp	.+588    	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    9380:	20 e0       	ldi	r18, 0x00	; 0
    9382:	30 e0       	ldi	r19, 0x00	; 0
    9384:	40 e0       	ldi	r20, 0x00	; 0
    9386:	51 e4       	ldi	r21, 0x41	; 65
    9388:	c7 01       	movw	r24, r14
    938a:	b6 01       	movw	r22, r12
    938c:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    9390:	18 16       	cp	r1, r24
    9392:	dc f5       	brge	.+118    	; 0x940a <corectTrv+0x182e>
    9394:	20 e0       	ldi	r18, 0x00	; 0
    9396:	30 e0       	ldi	r19, 0x00	; 0
    9398:	40 e1       	ldi	r20, 0x10	; 16
    939a:	51 e4       	ldi	r21, 0x41	; 65
    939c:	c7 01       	movw	r24, r14
    939e:	b6 01       	movw	r22, r12
    93a0:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    93a4:	18 16       	cp	r1, r24
    93a6:	8c f1       	brlt	.+98     	; 0x940a <corectTrv+0x182e>
		{
			return( 0.158 * ds * ds - 4.086 * ds + 42.41)* k;
    93a8:	21 ec       	ldi	r18, 0xC1	; 193
    93aa:	3a ec       	ldi	r19, 0xCA	; 202
    93ac:	41 e2       	ldi	r20, 0x21	; 33
    93ae:	5e e3       	ldi	r21, 0x3E	; 62
    93b0:	c5 01       	movw	r24, r10
    93b2:	b4 01       	movw	r22, r8
    93b4:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    93b8:	a5 01       	movw	r20, r10
    93ba:	94 01       	movw	r18, r8
    93bc:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    93c0:	6b 01       	movw	r12, r22
    93c2:	7c 01       	movw	r14, r24
    93c4:	23 e8       	ldi	r18, 0x83	; 131
    93c6:	30 ec       	ldi	r19, 0xC0	; 192
    93c8:	42 e8       	ldi	r20, 0x82	; 130
    93ca:	50 e4       	ldi	r21, 0x40	; 64
    93cc:	c5 01       	movw	r24, r10
    93ce:	b4 01       	movw	r22, r8
    93d0:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    93d4:	9b 01       	movw	r18, r22
    93d6:	ac 01       	movw	r20, r24
    93d8:	c7 01       	movw	r24, r14
    93da:	b6 01       	movw	r22, r12
    93dc:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    93e0:	27 ed       	ldi	r18, 0xD7	; 215
    93e2:	33 ea       	ldi	r19, 0xA3	; 163
    93e4:	49 e2       	ldi	r20, 0x29	; 41
    93e6:	52 e4       	ldi	r21, 0x42	; 66
    93e8:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    93ec:	6b 01       	movw	r12, r22
    93ee:	7c 01       	movw	r14, r24
    93f0:	be 01       	movw	r22, r28
    93f2:	dd 0f       	add	r29, r29
    93f4:	88 0b       	sbc	r24, r24
    93f6:	99 0b       	sbc	r25, r25
    93f8:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    93fc:	9b 01       	movw	r18, r22
    93fe:	ac 01       	movw	r20, r24
    9400:	c7 01       	movw	r24, r14
    9402:	b6 01       	movw	r22, r12
    9404:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    9408:	e1 c0       	rjmp	.+450    	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    940a:	20 e0       	ldi	r18, 0x00	; 0
    940c:	30 e0       	ldi	r19, 0x00	; 0
    940e:	40 e1       	ldi	r20, 0x10	; 16
    9410:	51 e4       	ldi	r21, 0x41	; 65
    9412:	c7 01       	movw	r24, r14
    9414:	b6 01       	movw	r22, r12
    9416:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    941a:	18 16       	cp	r1, r24
    941c:	0c f0       	brlt	.+2      	; 0x9420 <corectTrv+0x1844>
    941e:	51 c0       	rjmp	.+162    	; 0x94c2 <corectTrv+0x18e6>
    9420:	20 e0       	ldi	r18, 0x00	; 0
    9422:	30 e0       	ldi	r19, 0x00	; 0
    9424:	40 e2       	ldi	r20, 0x20	; 32
    9426:	51 e4       	ldi	r21, 0x41	; 65
    9428:	c7 01       	movw	r24, r14
    942a:	b6 01       	movw	r22, r12
    942c:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    9430:	18 16       	cp	r1, r24
    9432:	0c f4       	brge	.+2      	; 0x9436 <corectTrv+0x185a>
    9434:	46 c0       	rjmp	.+140    	; 0x94c2 <corectTrv+0x18e6>
		{
			return( 0.027 * ds * ds * ds - 1.086 * ds * ds + 14.32 * ds - 44.48)* k;
    9436:	2b e1       	ldi	r18, 0x1B	; 27
    9438:	3f e2       	ldi	r19, 0x2F	; 47
    943a:	4d ed       	ldi	r20, 0xDD	; 221
    943c:	5c e3       	ldi	r21, 0x3C	; 60
    943e:	c5 01       	movw	r24, r10
    9440:	b4 01       	movw	r22, r8
    9442:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    9446:	a5 01       	movw	r20, r10
    9448:	94 01       	movw	r18, r8
    944a:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    944e:	a5 01       	movw	r20, r10
    9450:	94 01       	movw	r18, r8
    9452:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    9456:	6b 01       	movw	r12, r22
    9458:	7c 01       	movw	r14, r24
    945a:	2c e0       	ldi	r18, 0x0C	; 12
    945c:	32 e0       	ldi	r19, 0x02	; 2
    945e:	4b e8       	ldi	r20, 0x8B	; 139
    9460:	5f e3       	ldi	r21, 0x3F	; 63
    9462:	c5 01       	movw	r24, r10
    9464:	b4 01       	movw	r22, r8
    9466:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    946a:	a5 01       	movw	r20, r10
    946c:	94 01       	movw	r18, r8
    946e:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    9472:	9b 01       	movw	r18, r22
    9474:	ac 01       	movw	r20, r24
    9476:	c7 01       	movw	r24, r14
    9478:	b6 01       	movw	r22, r12
    947a:	c8 d7       	rcall	.+3984   	; 0xa40c <__subsf3>
    947c:	6b 01       	movw	r12, r22
    947e:	7c 01       	movw	r14, r24
    9480:	28 eb       	ldi	r18, 0xB8	; 184
    9482:	3e e1       	ldi	r19, 0x1E	; 30
    9484:	45 e6       	ldi	r20, 0x65	; 101
    9486:	51 e4       	ldi	r21, 0x41	; 65
    9488:	c5 01       	movw	r24, r10
    948a:	b4 01       	movw	r22, r8
    948c:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    9490:	9b 01       	movw	r18, r22
    9492:	ac 01       	movw	r20, r24
    9494:	c7 01       	movw	r24, r14
    9496:	b6 01       	movw	r22, r12
    9498:	ba d7       	rcall	.+3956   	; 0xa40e <__addsf3>
    949a:	25 e8       	ldi	r18, 0x85	; 133
    949c:	3b ee       	ldi	r19, 0xEB	; 235
    949e:	41 e3       	ldi	r20, 0x31	; 49
    94a0:	52 e4       	ldi	r21, 0x42	; 66
    94a2:	b4 d7       	rcall	.+3944   	; 0xa40c <__subsf3>
    94a4:	6b 01       	movw	r12, r22
    94a6:	7c 01       	movw	r14, r24
    94a8:	be 01       	movw	r22, r28
    94aa:	dd 0f       	add	r29, r29
    94ac:	88 0b       	sbc	r24, r24
    94ae:	99 0b       	sbc	r25, r25
    94b0:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    94b4:	9b 01       	movw	r18, r22
    94b6:	ac 01       	movw	r20, r24
    94b8:	c7 01       	movw	r24, r14
    94ba:	b6 01       	movw	r22, r12
    94bc:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    94c0:	85 c0       	rjmp	.+266    	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    94c2:	20 e0       	ldi	r18, 0x00	; 0
    94c4:	30 e0       	ldi	r19, 0x00	; 0
    94c6:	40 e2       	ldi	r20, 0x20	; 32
    94c8:	51 e4       	ldi	r21, 0x41	; 65
    94ca:	c7 01       	movw	r24, r14
    94cc:	b6 01       	movw	r22, r12
    94ce:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    94d2:	18 16       	cp	r1, r24
    94d4:	0c f0       	brlt	.+2      	; 0x94d8 <corectTrv+0x18fc>
    94d6:	50 c0       	rjmp	.+160    	; 0x9578 <corectTrv+0x199c>
    94d8:	20 e0       	ldi	r18, 0x00	; 0
    94da:	30 e0       	ldi	r19, 0x00	; 0
    94dc:	40 e3       	ldi	r20, 0x30	; 48
    94de:	51 e4       	ldi	r21, 0x41	; 65
    94e0:	c7 01       	movw	r24, r14
    94e2:	b6 01       	movw	r22, r12
    94e4:	f8 d7       	rcall	.+4080   	; 0xa4d6 <__cmpsf2>
    94e6:	18 16       	cp	r1, r24
    94e8:	0c f4       	brge	.+2      	; 0x94ec <corectTrv+0x1910>
    94ea:	46 c0       	rjmp	.+140    	; 0x9578 <corectTrv+0x199c>
		{
			return( 0.026 * ds * ds * ds - 1.084 * ds * ds + 14.27 * ds - 40.99)* k;
    94ec:	24 ef       	ldi	r18, 0xF4	; 244
    94ee:	3d ef       	ldi	r19, 0xFD	; 253
    94f0:	44 ed       	ldi	r20, 0xD4	; 212
    94f2:	5c e3       	ldi	r21, 0x3C	; 60
    94f4:	c5 01       	movw	r24, r10
    94f6:	b4 01       	movw	r22, r8
    94f8:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    94fc:	a5 01       	movw	r20, r10
    94fe:	94 01       	movw	r18, r8
    9500:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    9504:	a5 01       	movw	r20, r10
    9506:	94 01       	movw	r18, r8
    9508:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    950c:	6b 01       	movw	r12, r22
    950e:	7c 01       	movw	r14, r24
    9510:	23 e8       	ldi	r18, 0x83	; 131
    9512:	30 ec       	ldi	r19, 0xC0	; 192
    9514:	4a e8       	ldi	r20, 0x8A	; 138
    9516:	5f e3       	ldi	r21, 0x3F	; 63
    9518:	c5 01       	movw	r24, r10
    951a:	b4 01       	movw	r22, r8
    951c:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    9520:	a5 01       	movw	r20, r10
    9522:	94 01       	movw	r18, r8
    9524:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    9528:	9b 01       	movw	r18, r22
    952a:	ac 01       	movw	r20, r24
    952c:	c7 01       	movw	r24, r14
    952e:	b6 01       	movw	r22, r12
    9530:	6d d7       	rcall	.+3802   	; 0xa40c <__subsf3>
    9532:	6b 01       	movw	r12, r22
    9534:	7c 01       	movw	r14, r24
    9536:	2c ee       	ldi	r18, 0xEC	; 236
    9538:	31 e5       	ldi	r19, 0x51	; 81
    953a:	44 e6       	ldi	r20, 0x64	; 100
    953c:	51 e4       	ldi	r21, 0x41	; 65
    953e:	c5 01       	movw	r24, r10
    9540:	b4 01       	movw	r22, r8
    9542:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    9546:	9b 01       	movw	r18, r22
    9548:	ac 01       	movw	r20, r24
    954a:	c7 01       	movw	r24, r14
    954c:	b6 01       	movw	r22, r12
    954e:	5f d7       	rcall	.+3774   	; 0xa40e <__addsf3>
    9550:	23 ec       	ldi	r18, 0xC3	; 195
    9552:	35 ef       	ldi	r19, 0xF5	; 245
    9554:	43 e2       	ldi	r20, 0x23	; 35
    9556:	52 e4       	ldi	r21, 0x42	; 66
    9558:	59 d7       	rcall	.+3762   	; 0xa40c <__subsf3>
    955a:	6b 01       	movw	r12, r22
    955c:	7c 01       	movw	r14, r24
    955e:	be 01       	movw	r22, r28
    9560:	dd 0f       	add	r29, r29
    9562:	88 0b       	sbc	r24, r24
    9564:	99 0b       	sbc	r25, r25
    9566:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    956a:	9b 01       	movw	r18, r22
    956c:	ac 01       	movw	r20, r24
    956e:	c7 01       	movw	r24, r14
    9570:	b6 01       	movw	r22, r12
    9572:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    9576:	2a c0       	rjmp	.+84     	; 0x95cc <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 4)
    9578:	20 e0       	ldi	r18, 0x00	; 0
    957a:	30 e0       	ldi	r19, 0x00	; 0
    957c:	40 e3       	ldi	r20, 0x30	; 48
    957e:	51 e4       	ldi	r21, 0x41	; 65
    9580:	c7 01       	movw	r24, r14
    9582:	b6 01       	movw	r22, r12
    9584:	0e 94 ba 53 	call	0xa774	; 0xa774 <__gesf2>
    9588:	18 16       	cp	r1, r24
    958a:	ec f4       	brge	.+58     	; 0x95c6 <corectTrv+0x19ea>
		{
			return 25* k;
    958c:	89 e1       	ldi	r24, 0x19	; 25
    958e:	8c 9f       	mul	r24, r28
    9590:	b0 01       	movw	r22, r0
    9592:	8d 9f       	mul	r24, r29
    9594:	70 0d       	add	r23, r0
    9596:	11 24       	eor	r1, r1
    9598:	07 2e       	mov	r0, r23
    959a:	00 0c       	add	r0, r0
    959c:	88 0b       	sbc	r24, r24
    959e:	99 0b       	sbc	r25, r25
    95a0:	0e 94 0a 53 	call	0xa614	; 0xa614 <__floatsisf>
    95a4:	13 c0       	rjmp	.+38     	; 0x95cc <corectTrv+0x19f0>
		}
	}

	
	return 0;
    95a6:	60 e0       	ldi	r22, 0x00	; 0
    95a8:	70 e0       	ldi	r23, 0x00	; 0
    95aa:	cb 01       	movw	r24, r22
    95ac:	0f c0       	rjmp	.+30     	; 0x95cc <corectTrv+0x19f0>
    95ae:	60 e0       	ldi	r22, 0x00	; 0
    95b0:	70 e0       	ldi	r23, 0x00	; 0
    95b2:	cb 01       	movw	r24, r22
    95b4:	0b c0       	rjmp	.+22     	; 0x95cc <corectTrv+0x19f0>
    95b6:	60 e0       	ldi	r22, 0x00	; 0
    95b8:	70 e0       	ldi	r23, 0x00	; 0
    95ba:	cb 01       	movw	r24, r22
    95bc:	07 c0       	rjmp	.+14     	; 0x95cc <corectTrv+0x19f0>
    95be:	60 e0       	ldi	r22, 0x00	; 0
    95c0:	70 e0       	ldi	r23, 0x00	; 0
    95c2:	cb 01       	movw	r24, r22
    95c4:	03 c0       	rjmp	.+6      	; 0x95cc <corectTrv+0x19f0>
    95c6:	60 e0       	ldi	r22, 0x00	; 0
    95c8:	70 e0       	ldi	r23, 0x00	; 0
    95ca:	cb 01       	movw	r24, r22

}
    95cc:	df 91       	pop	r29
    95ce:	cf 91       	pop	r28
    95d0:	ff 90       	pop	r15
    95d2:	ef 90       	pop	r14
    95d4:	df 90       	pop	r13
    95d6:	cf 90       	pop	r12
    95d8:	bf 90       	pop	r11
    95da:	af 90       	pop	r10
    95dc:	9f 90       	pop	r9
    95de:	8f 90       	pop	r8
    95e0:	7f 90       	pop	r7
    95e2:	6f 90       	pop	r6
    95e4:	5f 90       	pop	r5
    95e6:	4f 90       	pop	r4
    95e8:	08 95       	ret

000095ea <ReadSensors>:
float ConvertToLowPress(uint16_t ADC_value){
	return (ADC_value - Low_Limit_LP) * LP_max/ (Hi_Limit_LP - Low_Limit_LP) ;
}

void ReadSensors(xCompressor *comp)  
{ 
    95ea:	ef 92       	push	r14
    95ec:	ff 92       	push	r15
    95ee:	0f 93       	push	r16
    95f0:	1f 93       	push	r17
    95f2:	cf 93       	push	r28
    95f4:	df 93       	push	r29
    95f6:	7c 01       	movw	r14, r24
 uint16_t temp = 0;
 const uint8_t samples = 10;        // determines the number of samples taken
 unsigned int sum;               // holds the summated samples
 uint8_t i;
 //static TickType_t countTrvTime=0;
 setAnalogMode(MODE_10_BIT);
    95f8:	80 e0       	ldi	r24, 0x00	; 0
    95fa:	0e 94 98 07 	call	0xf30	; 0xf30 <setAnalogMode>
    95fe:	ca e0       	ldi	r28, 0x0A	; 10
 i = samples;                     // clean up for next channel
 sum = 0;
    9600:	00 e0       	ldi	r16, 0x00	; 0
    9602:	10 e0       	ldi	r17, 0x00	; 0
 
 do
 {
	 startAnalogConversion(1, 0);
    9604:	60 e0       	ldi	r22, 0x00	; 0
    9606:	81 e0       	ldi	r24, 0x01	; 1
    9608:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
	 while( analogIsConverting() )_delay_us(25);//portYIELD();
    960c:	01 c0       	rjmp	.+2      	; 0x9610 <ReadSensors+0x26>
    960e:	00 00       	nop
    9610:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9614:	81 11       	cpse	r24, r1
    9616:	fb cf       	rjmp	.-10     	; 0x960e <ReadSensors+0x24>
	 sum += 	analogConversionResult();
    9618:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    961c:	08 0f       	add	r16, r24
    961e:	19 1f       	adc	r17, r25
    9620:	c1 50       	subi	r28, 0x01	; 1
	 //temp =analogConversionResult();
 } while (--i);
    9622:	81 f7       	brne	.-32     	; 0x9604 <ReadSensors+0x1a>
 temp = (unsigned int) (sum / samples);
 comp->Bac_Temp = ConvertToTemp(temp);
    9624:	98 01       	movw	r18, r16
    9626:	ad ec       	ldi	r26, 0xCD	; 205
    9628:	bc ec       	ldi	r27, 0xCC	; 204
    962a:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    962e:	96 95       	lsr	r25
    9630:	87 95       	ror	r24
    9632:	96 95       	lsr	r25
    9634:	87 95       	ror	r24
    9636:	96 95       	lsr	r25
    9638:	87 95       	ror	r24
    963a:	0e 94 bb 3c 	call	0x7976	; 0x7976 <ConvertToTemp>
    963e:	f7 01       	movw	r30, r14
    9640:	66 8b       	std	Z+22, r22	; 0x16
    9642:	77 8b       	std	Z+23, r23	; 0x17
    9644:	80 8f       	std	Z+24, r24	; 0x18
    9646:	91 8f       	std	Z+25, r25	; 0x19
 //read DHW
 PORTL &= ~ (1 << PL2);//A0
    9648:	eb e0       	ldi	r30, 0x0B	; 11
    964a:	f1 e0       	ldi	r31, 0x01	; 1
    964c:	80 81       	ld	r24, Z
    964e:	8b 7f       	andi	r24, 0xFB	; 251
    9650:	80 83       	st	Z, r24
 PORTL &= ~ (1 << PL1);//A1
    9652:	80 81       	ld	r24, Z
    9654:	8d 7f       	andi	r24, 0xFD	; 253
    9656:	80 83       	st	Z, r24
 PORTL |=   (1 << PL0);//A2
    9658:	80 81       	ld	r24, Z
    965a:	81 60       	ori	r24, 0x01	; 1
    965c:	80 83       	st	Z, r24
    965e:	ca e0       	ldi	r28, 0x0A	; 10
 i = samples;
 sum = 0;
    9660:	00 e0       	ldi	r16, 0x00	; 0
    9662:	10 e0       	ldi	r17, 0x00	; 0

 do
 {
	 startAnalogConversion(0, 0);
    9664:	60 e0       	ldi	r22, 0x00	; 0
    9666:	80 e0       	ldi	r24, 0x00	; 0
    9668:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
	 while( analogIsConverting())_delay_us(25);// portYIELD();
    966c:	01 c0       	rjmp	.+2      	; 0x9670 <ReadSensors+0x86>
    966e:	00 00       	nop
    9670:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9674:	81 11       	cpse	r24, r1
    9676:	fb cf       	rjmp	.-10     	; 0x966e <ReadSensors+0x84>
	 sum += 	analogConversionResult();
    9678:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    967c:	08 0f       	add	r16, r24
    967e:	19 1f       	adc	r17, r25
    9680:	c1 50       	subi	r28, 0x01	; 1
 } while (--i);
    9682:	81 f7       	brne	.-32     	; 0x9664 <ReadSensors+0x7a>
 //temp = analogConversionResult();
 temp = (unsigned int) (sum / samples);
 comp->Dhw_Temp = ConvertToTemp(temp);
    9684:	98 01       	movw	r18, r16
    9686:	ad ec       	ldi	r26, 0xCD	; 205
    9688:	bc ec       	ldi	r27, 0xCC	; 204
    968a:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    968e:	96 95       	lsr	r25
    9690:	87 95       	ror	r24
    9692:	96 95       	lsr	r25
    9694:	87 95       	ror	r24
    9696:	96 95       	lsr	r25
    9698:	87 95       	ror	r24
    969a:	0e 94 bb 3c 	call	0x7976	; 0x7976 <ConvertToTemp>
    969e:	f7 01       	movw	r30, r14
    96a0:	62 8b       	std	Z+18, r22	; 0x12
    96a2:	73 8b       	std	Z+19, r23	; 0x13
    96a4:	84 8b       	std	Z+20, r24	; 0x14
    96a6:	95 8b       	std	Z+21, r25	; 0x15
  //------------------------------------------
  
  //read tempout
  PORTL |=   (1 << PL2);//A0
    96a8:	eb e0       	ldi	r30, 0x0B	; 11
    96aa:	f1 e0       	ldi	r31, 0x01	; 1
    96ac:	80 81       	ld	r24, Z
    96ae:	84 60       	ori	r24, 0x04	; 4
    96b0:	80 83       	st	Z, r24
  PORTL &= ~ (1 << PL1);//A1
    96b2:	80 81       	ld	r24, Z
    96b4:	8d 7f       	andi	r24, 0xFD	; 253
    96b6:	80 83       	st	Z, r24
  PORTL |=   (1 << PL0);//A2
    96b8:	80 81       	ld	r24, Z
    96ba:	81 60       	ori	r24, 0x01	; 1
    96bc:	80 83       	st	Z, r24
    96be:	ca e0       	ldi	r28, 0x0A	; 10
  i = samples;
  sum = 0;
    96c0:	00 e0       	ldi	r16, 0x00	; 0
    96c2:	10 e0       	ldi	r17, 0x00	; 0

  do
  {
	  startAnalogConversion(0, 0);
    96c4:	60 e0       	ldi	r22, 0x00	; 0
    96c6:	80 e0       	ldi	r24, 0x00	; 0
    96c8:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
	  while( analogIsConverting())_delay_us(25);// portYIELD();
    96cc:	01 c0       	rjmp	.+2      	; 0x96d0 <ReadSensors+0xe6>
    96ce:	00 00       	nop
    96d0:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    96d4:	81 11       	cpse	r24, r1
    96d6:	fb cf       	rjmp	.-10     	; 0x96ce <ReadSensors+0xe4>
	  sum += 	analogConversionResult();
    96d8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    96dc:	08 0f       	add	r16, r24
    96de:	19 1f       	adc	r17, r25
    96e0:	c1 50       	subi	r28, 0x01	; 1
  } while (--i);
    96e2:	81 f7       	brne	.-32     	; 0x96c4 <ReadSensors+0xda>
 //temp = analogConversionResult();
  temp = (unsigned int) (sum / samples);
  comp->Temp_Out = ConvertToTemp(temp);
    96e4:	98 01       	movw	r18, r16
    96e6:	ad ec       	ldi	r26, 0xCD	; 205
    96e8:	bc ec       	ldi	r27, 0xCC	; 204
    96ea:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    96ee:	96 95       	lsr	r25
    96f0:	87 95       	ror	r24
    96f2:	96 95       	lsr	r25
    96f4:	87 95       	ror	r24
    96f6:	96 95       	lsr	r25
    96f8:	87 95       	ror	r24
    96fa:	0e 94 bb 3c 	call	0x7976	; 0x7976 <ConvertToTemp>
    96fe:	f7 01       	movw	r30, r14
    9700:	e2 5b       	subi	r30, 0xB2	; 178
    9702:	ff 4f       	sbci	r31, 0xFF	; 255
    9704:	60 83       	st	Z, r22
    9706:	71 83       	std	Z+1, r23	; 0x01
    9708:	82 83       	std	Z+2, r24	; 0x02
    970a:	93 83       	std	Z+3, r25	; 0x03
   /*
  */
  //------------------------------------------
 if(comp->Index==1){
    970c:	b4 96       	adiw	r30, 0x24	; 36
    970e:	80 81       	ld	r24, Z
    9710:	91 81       	ldd	r25, Z+1	; 0x01
    9712:	01 97       	sbiw	r24, 0x01	; 1
    9714:	09 f0       	breq	.+2      	; 0x9718 <ReadSensors+0x12e>
    9716:	9d c1       	rjmp	.+826    	; 0x9a52 <ReadSensors+0x468>
	 
	 //read High_Pressure_1
	 PORTL |=    (1 << PL2);//a0
    9718:	eb e0       	ldi	r30, 0x0B	; 11
    971a:	f1 e0       	ldi	r31, 0x01	; 1
    971c:	80 81       	ld	r24, Z
    971e:	84 60       	ori	r24, 0x04	; 4
    9720:	80 83       	st	Z, r24
	 PORTL |=    (1 << PL1);//a1
    9722:	80 81       	ld	r24, Z
    9724:	82 60       	ori	r24, 0x02	; 2
    9726:	80 83       	st	Z, r24
	 PORTL &= ~  (1 << PL0);//a2
    9728:	80 81       	ld	r24, Z
    972a:	8e 7f       	andi	r24, 0xFE	; 254
    972c:	80 83       	st	Z, r24
    972e:	ca e0       	ldi	r28, 0x0A	; 10
	 i = samples;
	 sum = 0;
    9730:	00 e0       	ldi	r16, 0x00	; 0
    9732:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {		     startAnalogConversion(0, 0);
    9734:	60 e0       	ldi	r22, 0x00	; 0
    9736:	80 e0       	ldi	r24, 0x00	; 0
    9738:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() ) _delay_us(25);//portYIELD();
    973c:	01 c0       	rjmp	.+2      	; 0x9740 <ReadSensors+0x156>
    973e:	00 00       	nop
    9740:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9744:	81 11       	cpse	r24, r1
    9746:	fb cf       	rjmp	.-10     	; 0x973e <ReadSensors+0x154>
		 sum += analogConversionResult();
    9748:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    974c:	08 0f       	add	r16, r24
    974e:	19 1f       	adc	r17, r25
    9750:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9752:	81 f7       	brne	.-32     	; 0x9734 <ReadSensors+0x14a>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->High_Press = ConvertToHighPress(temp);
    9754:	98 01       	movw	r18, r16
    9756:	ad ec       	ldi	r26, 0xCD	; 205
    9758:	bc ec       	ldi	r27, 0xCC	; 204
    975a:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    975e:	96 95       	lsr	r25
    9760:	87 95       	ror	r24
    9762:	96 95       	lsr	r25
    9764:	87 95       	ror	r24
    9766:	96 95       	lsr	r25
    9768:	87 95       	ror	r24
    976a:	bc 01       	movw	r22, r24
    976c:	80 e0       	ldi	r24, 0x00	; 0
    976e:	90 e0       	ldi	r25, 0x00	; 0
    9770:	4f d7       	rcall	.+3742   	; 0xa610 <__floatunsisf>
    9772:	20 e0       	ldi	r18, 0x00	; 0
    9774:	30 e0       	ldi	r19, 0x00	; 0
    9776:	4c ec       	ldi	r20, 0xCC	; 204
    9778:	52 e4       	ldi	r21, 0x42	; 66
    977a:	48 d6       	rcall	.+3216   	; 0xa40c <__subsf3>
    977c:	20 e0       	ldi	r18, 0x00	; 0
    977e:	30 e0       	ldi	r19, 0x00	; 0
    9780:	48 e0       	ldi	r20, 0x08	; 8
    9782:	52 e4       	ldi	r21, 0x42	; 66
    9784:	0e 94 03 54 	call	0xa806	; 0xa806 <__mulsf3>
    9788:	20 e0       	ldi	r18, 0x00	; 0
    978a:	30 e0       	ldi	r19, 0x00	; 0
    978c:	4d e4       	ldi	r20, 0x4D	; 77
    978e:	54 e4       	ldi	r21, 0x44	; 68
    9790:	a6 d6       	rcall	.+3404   	; 0xa4de <__divsf3>
    9792:	f7 01       	movw	r30, r14
    9794:	62 8f       	std	Z+26, r22	; 0x1a
    9796:	73 8f       	std	Z+27, r23	; 0x1b
    9798:	84 8f       	std	Z+28, r24	; 0x1c
    979a:	95 8f       	std	Z+29, r25	; 0x1d
	 //read Low_Pressure_1
	 PORTL &= ~   (1 << PL2);
    979c:	eb e0       	ldi	r30, 0x0B	; 11
    979e:	f1 e0       	ldi	r31, 0x01	; 1
    97a0:	80 81       	ld	r24, Z
    97a2:	8b 7f       	andi	r24, 0xFB	; 251
    97a4:	80 83       	st	Z, r24
	 PORTL &= ~   (1 << PL1);
    97a6:	80 81       	ld	r24, Z
    97a8:	8d 7f       	andi	r24, 0xFD	; 253
    97aa:	80 83       	st	Z, r24
	 PORTL &= ~   (1 << PL0);
    97ac:	80 81       	ld	r24, Z
    97ae:	8e 7f       	andi	r24, 0xFE	; 254
    97b0:	80 83       	st	Z, r24
    97b2:	ca e0       	ldi	r28, 0x0A	; 10
	 i = samples;
	 sum = 0;
    97b4:	00 e0       	ldi	r16, 0x00	; 0
    97b6:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(0, 0);
    97b8:	60 e0       	ldi	r22, 0x00	; 0
    97ba:	80 e0       	ldi	r24, 0x00	; 0
    97bc:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    97c0:	01 c0       	rjmp	.+2      	; 0x97c4 <ReadSensors+0x1da>
    97c2:	00 00       	nop
    97c4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    97c8:	81 11       	cpse	r24, r1
    97ca:	fb cf       	rjmp	.-10     	; 0x97c2 <ReadSensors+0x1d8>
		 sum += analogConversionResult();
    97cc:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    97d0:	08 0f       	add	r16, r24
    97d2:	19 1f       	adc	r17, r25
    97d4:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    97d6:	81 f7       	brne	.-32     	; 0x97b8 <ReadSensors+0x1ce>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Low_Press = ConvertToLowPress( temp );
    97d8:	98 01       	movw	r18, r16
    97da:	ad ec       	ldi	r26, 0xCD	; 205
    97dc:	bc ec       	ldi	r27, 0xCC	; 204
    97de:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    97e2:	96 95       	lsr	r25
    97e4:	87 95       	ror	r24
    97e6:	96 95       	lsr	r25
    97e8:	87 95       	ror	r24
    97ea:	96 95       	lsr	r25
    97ec:	87 95       	ror	r24
    97ee:	bc 01       	movw	r22, r24
    97f0:	80 e0       	ldi	r24, 0x00	; 0
    97f2:	90 e0       	ldi	r25, 0x00	; 0
    97f4:	0d d7       	rcall	.+3610   	; 0xa610 <__floatunsisf>
    97f6:	20 e0       	ldi	r18, 0x00	; 0
    97f8:	30 e0       	ldi	r19, 0x00	; 0
    97fa:	4c e5       	ldi	r20, 0x5C	; 92
    97fc:	52 e4       	ldi	r21, 0x42	; 66
    97fe:	06 d6       	rcall	.+3084   	; 0xa40c <__subsf3>
    9800:	20 e0       	ldi	r18, 0x00	; 0
    9802:	30 e0       	ldi	r19, 0x00	; 0
    9804:	40 e9       	ldi	r20, 0x90	; 144
    9806:	51 e4       	ldi	r21, 0x41	; 65
    9808:	fe d7       	rcall	.+4092   	; 0xa806 <__mulsf3>
    980a:	20 e0       	ldi	r18, 0x00	; 0
    980c:	30 ec       	ldi	r19, 0xC0	; 192
    980e:	48 e5       	ldi	r20, 0x58	; 88
    9810:	54 e4       	ldi	r21, 0x44	; 68
    9812:	65 d6       	rcall	.+3274   	; 0xa4de <__divsf3>
    9814:	f7 01       	movw	r30, r14
    9816:	66 8f       	std	Z+30, r22	; 0x1e
    9818:	77 8f       	std	Z+31, r23	; 0x1f
    981a:	80 a3       	std	Z+32, r24	; 0x20
    981c:	91 a3       	std	Z+33, r25	; 0x21
    981e:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9820:	00 e0       	ldi	r16, 0x00	; 0
    9822:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(9, 0);
    9824:	60 e0       	ldi	r22, 0x00	; 0
    9826:	89 e0       	ldi	r24, 0x09	; 9
    9828:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    982c:	01 c0       	rjmp	.+2      	; 0x9830 <ReadSensors+0x246>
    982e:	00 00       	nop
    9830:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9834:	81 11       	cpse	r24, r1
    9836:	fb cf       	rjmp	.-10     	; 0x982e <ReadSensors+0x244>
		 sum += analogConversionResult();
    9838:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    983c:	08 0f       	add	r16, r24
    983e:	19 1f       	adc	r17, r25
    9840:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9842:	81 f7       	brne	.-32     	; 0x9824 <ReadSensors+0x23a>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Heat_Out = ConvertToTemp( temp );
    9844:	98 01       	movw	r18, r16
    9846:	ad ec       	ldi	r26, 0xCD	; 205
    9848:	bc ec       	ldi	r27, 0xCC	; 204
    984a:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    984e:	96 95       	lsr	r25
    9850:	87 95       	ror	r24
    9852:	96 95       	lsr	r25
    9854:	87 95       	ror	r24
    9856:	96 95       	lsr	r25
    9858:	87 95       	ror	r24
    985a:	0e 94 bb 3c 	call	0x7976	; 0x7976 <ConvertToTemp>
    985e:	f7 01       	movw	r30, r14
    9860:	62 a7       	std	Z+42, r22	; 0x2a
    9862:	73 a7       	std	Z+43, r23	; 0x2b
    9864:	84 a7       	std	Z+44, r24	; 0x2c
    9866:	95 a7       	std	Z+45, r25	; 0x2d
    9868:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    986a:	00 e0       	ldi	r16, 0x00	; 0
    986c:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(10, 0);
    986e:	60 e0       	ldi	r22, 0x00	; 0
    9870:	8a e0       	ldi	r24, 0x0A	; 10
    9872:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9876:	01 c0       	rjmp	.+2      	; 0x987a <ReadSensors+0x290>
    9878:	00 00       	nop
    987a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    987e:	81 11       	cpse	r24, r1
    9880:	fb cf       	rjmp	.-10     	; 0x9878 <ReadSensors+0x28e>
		 sum += analogConversionResult();
    9882:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9886:	08 0f       	add	r16, r24
    9888:	19 1f       	adc	r17, r25
    988a:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    988c:	81 f7       	brne	.-32     	; 0x986e <ReadSensors+0x284>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Heat_In = ConvertToTemp( temp );
    988e:	98 01       	movw	r18, r16
    9890:	ad ec       	ldi	r26, 0xCD	; 205
    9892:	bc ec       	ldi	r27, 0xCC	; 204
    9894:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    9898:	96 95       	lsr	r25
    989a:	87 95       	ror	r24
    989c:	96 95       	lsr	r25
    989e:	87 95       	ror	r24
    98a0:	96 95       	lsr	r25
    98a2:	87 95       	ror	r24
    98a4:	0e 94 bb 3c 	call	0x7976	; 0x7976 <ConvertToTemp>
    98a8:	f7 01       	movw	r30, r14
    98aa:	66 a7       	std	Z+46, r22	; 0x2e
    98ac:	77 a7       	std	Z+47, r23	; 0x2f
    98ae:	80 ab       	std	Z+48, r24	; 0x30
    98b0:	91 ab       	std	Z+49, r25	; 0x31
    98b2:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    98b4:	00 e0       	ldi	r16, 0x00	; 0
    98b6:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(11, 0);
    98b8:	60 e0       	ldi	r22, 0x00	; 0
    98ba:	8b e0       	ldi	r24, 0x0B	; 11
    98bc:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    98c0:	01 c0       	rjmp	.+2      	; 0x98c4 <ReadSensors+0x2da>
    98c2:	00 00       	nop
    98c4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    98c8:	81 11       	cpse	r24, r1
    98ca:	fb cf       	rjmp	.-10     	; 0x98c2 <ReadSensors+0x2d8>
		 sum += analogConversionResult();
    98cc:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    98d0:	08 0f       	add	r16, r24
    98d2:	19 1f       	adc	r17, r25
    98d4:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    98d6:	81 f7       	brne	.-32     	; 0x98b8 <ReadSensors+0x2ce>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Src_In = ConvertToTemp( temp );
    98d8:	98 01       	movw	r18, r16
    98da:	ad ec       	ldi	r26, 0xCD	; 205
    98dc:	bc ec       	ldi	r27, 0xCC	; 204
    98de:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    98e2:	96 95       	lsr	r25
    98e4:	87 95       	ror	r24
    98e6:	96 95       	lsr	r25
    98e8:	87 95       	ror	r24
    98ea:	96 95       	lsr	r25
    98ec:	87 95       	ror	r24
    98ee:	0e 94 bb 3c 	call	0x7976	; 0x7976 <ConvertToTemp>
    98f2:	f7 01       	movw	r30, r14
    98f4:	62 ab       	std	Z+50, r22	; 0x32
    98f6:	73 ab       	std	Z+51, r23	; 0x33
    98f8:	84 ab       	std	Z+52, r24	; 0x34
    98fa:	95 ab       	std	Z+53, r25	; 0x35
    98fc:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    98fe:	00 e0       	ldi	r16, 0x00	; 0
    9900:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(12, 0);
    9902:	60 e0       	ldi	r22, 0x00	; 0
    9904:	8c e0       	ldi	r24, 0x0C	; 12
    9906:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);
    990a:	01 c0       	rjmp	.+2      	; 0x990e <ReadSensors+0x324>
    990c:	00 00       	nop
    990e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9912:	81 11       	cpse	r24, r1
    9914:	fb cf       	rjmp	.-10     	; 0x990c <ReadSensors+0x322>
		 sum += analogConversionResult();
    9916:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    991a:	08 0f       	add	r16, r24
    991c:	19 1f       	adc	r17, r25
    991e:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9920:	81 f7       	brne	.-32     	; 0x9902 <ReadSensors+0x318>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Src_Out = ConvertToTemp( temp );
    9922:	98 01       	movw	r18, r16
    9924:	ad ec       	ldi	r26, 0xCD	; 205
    9926:	bc ec       	ldi	r27, 0xCC	; 204
    9928:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    992c:	96 95       	lsr	r25
    992e:	87 95       	ror	r24
    9930:	96 95       	lsr	r25
    9932:	87 95       	ror	r24
    9934:	96 95       	lsr	r25
    9936:	87 95       	ror	r24
    9938:	0e 94 bb 3c 	call	0x7976	; 0x7976 <ConvertToTemp>
    993c:	f7 01       	movw	r30, r14
    993e:	66 ab       	std	Z+54, r22	; 0x36
    9940:	77 ab       	std	Z+55, r23	; 0x37
    9942:	80 af       	std	Z+56, r24	; 0x38
    9944:	91 af       	std	Z+57, r25	; 0x39
    9946:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9948:	00 e0       	ldi	r16, 0x00	; 0
    994a:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(13, 0);
    994c:	60 e0       	ldi	r22, 0x00	; 0
    994e:	8d e0       	ldi	r24, 0x0D	; 13
    9950:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9954:	01 c0       	rjmp	.+2      	; 0x9958 <ReadSensors+0x36e>
    9956:	00 00       	nop
    9958:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    995c:	81 11       	cpse	r24, r1
    995e:	fb cf       	rjmp	.-10     	; 0x9956 <ReadSensors+0x36c>
		 sum += analogConversionResult();
    9960:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9964:	08 0f       	add	r16, r24
    9966:	19 1f       	adc	r17, r25
    9968:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    996a:	81 f7       	brne	.-32     	; 0x994c <ReadSensors+0x362>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Ex_Comp = ConvertToTemp( temp );
    996c:	98 01       	movw	r18, r16
    996e:	ad ec       	ldi	r26, 0xCD	; 205
    9970:	bc ec       	ldi	r27, 0xCC	; 204
    9972:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    9976:	96 95       	lsr	r25
    9978:	87 95       	ror	r24
    997a:	96 95       	lsr	r25
    997c:	87 95       	ror	r24
    997e:	96 95       	lsr	r25
    9980:	87 95       	ror	r24
    9982:	0e 94 bb 3c 	call	0x7976	; 0x7976 <ConvertToTemp>
    9986:	f7 01       	movw	r30, r14
    9988:	62 af       	std	Z+58, r22	; 0x3a
    998a:	73 af       	std	Z+59, r23	; 0x3b
    998c:	84 af       	std	Z+60, r24	; 0x3c
    998e:	95 af       	std	Z+61, r25	; 0x3d
    9990:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9992:	00 e0       	ldi	r16, 0x00	; 0
    9994:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(14, 0);
    9996:	60 e0       	ldi	r22, 0x00	; 0
    9998:	8e e0       	ldi	r24, 0x0E	; 14
    999a:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    999e:	01 c0       	rjmp	.+2      	; 0x99a2 <ReadSensors+0x3b8>
    99a0:	00 00       	nop
    99a2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    99a6:	81 11       	cpse	r24, r1
    99a8:	fb cf       	rjmp	.-10     	; 0x99a0 <ReadSensors+0x3b6>
		 sum += analogConversionResult();
    99aa:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    99ae:	08 0f       	add	r16, r24
    99b0:	19 1f       	adc	r17, r25
    99b2:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    99b4:	81 f7       	brne	.-32     	; 0x9996 <ReadSensors+0x3ac>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Suc_Comp = ConvertToTemp( temp );
    99b6:	98 01       	movw	r18, r16
    99b8:	ad ec       	ldi	r26, 0xCD	; 205
    99ba:	bc ec       	ldi	r27, 0xCC	; 204
    99bc:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    99c0:	96 95       	lsr	r25
    99c2:	87 95       	ror	r24
    99c4:	96 95       	lsr	r25
    99c6:	87 95       	ror	r24
    99c8:	96 95       	lsr	r25
    99ca:	87 95       	ror	r24
    99cc:	0e 94 bb 3c 	call	0x7976	; 0x7976 <ConvertToTemp>
    99d0:	f7 01       	movw	r30, r14
    99d2:	fe 96       	adiw	r30, 0x3e	; 62
    99d4:	60 83       	st	Z, r22
    99d6:	71 83       	std	Z+1, r23	; 0x01
    99d8:	82 83       	std	Z+2, r24	; 0x02
    99da:	93 83       	std	Z+3, r25	; 0x03
    99dc:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    99de:	00 e0       	ldi	r16, 0x00	; 0
    99e0:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(15, 0);
    99e2:	60 e0       	ldi	r22, 0x00	; 0
    99e4:	8f e0       	ldi	r24, 0x0F	; 15
    99e6:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    99ea:	01 c0       	rjmp	.+2      	; 0x99ee <ReadSensors+0x404>
    99ec:	00 00       	nop
    99ee:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    99f2:	81 11       	cpse	r24, r1
    99f4:	fb cf       	rjmp	.-10     	; 0x99ec <ReadSensors+0x402>
		 sum += analogConversionResult();
    99f6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    99fa:	08 0f       	add	r16, r24
    99fc:	19 1f       	adc	r17, r25
    99fe:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9a00:	81 f7       	brne	.-32     	; 0x99e2 <ReadSensors+0x3f8>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Cond_Temp = ConvertToTemp( temp )	;
    9a02:	98 01       	movw	r18, r16
    9a04:	ad ec       	ldi	r26, 0xCD	; 205
    9a06:	bc ec       	ldi	r27, 0xCC	; 204
    9a08:	0e 94 4c 58 	call	0xb098	; 0xb098 <__umulhisi3>
    9a0c:	96 95       	lsr	r25
    9a0e:	87 95       	ror	r24
    9a10:	96 95       	lsr	r25
    9a12:	87 95       	ror	r24
    9a14:	96 95       	lsr	r25
    9a16:	87 95       	ror	r24
    9a18:	0e 94 bb 3c 	call	0x7976	; 0x7976 <ConvertToTemp>
    9a1c:	f7 01       	movw	r30, r14
    9a1e:	ee 5b       	subi	r30, 0xBE	; 190
    9a20:	ff 4f       	sbci	r31, 0xFF	; 255
    9a22:	60 83       	st	Z, r22
    9a24:	71 83       	std	Z+1, r23	; 0x01
    9a26:	82 83       	std	Z+2, r24	; 0x02
    9a28:	93 83       	std	Z+3, r25	; 0x03
	 //--------------------------------------------------------------
	 comp->SuperHeat=ReadSuperHeat (comp);
    9a2a:	c7 01       	movw	r24, r14
    9a2c:	0e 94 1b 3d 	call	0x7a36	; 0x7a36 <ReadSuperHeat>
    9a30:	f7 01       	movw	r30, r14
    9a32:	ea 5b       	subi	r30, 0xBA	; 186
    9a34:	ff 4f       	sbci	r31, 0xFF	; 255
    9a36:	60 83       	st	Z, r22
    9a38:	71 83       	std	Z+1, r23	; 0x01
    9a3a:	82 83       	std	Z+2, r24	; 0x02
    9a3c:	93 83       	std	Z+3, r25	; 0x03
	 comp->SuperCool=ReadSuperCool (comp);				
    9a3e:	c7 01       	movw	r24, r14
    9a40:	0e 94 85 3d 	call	0x7b0a	; 0x7b0a <ReadSuperCool>
    9a44:	f7 01       	movw	r30, r14
    9a46:	e6 5b       	subi	r30, 0xB6	; 182
    9a48:	ff 4f       	sbci	r31, 0xFF	; 255
    9a4a:	60 83       	st	Z, r22
    9a4c:	71 83       	std	Z+1, r23	; 0x01
    9a4e:	82 83       	std	Z+2, r24	; 0x02
    9a50:	93 83       	std	Z+3, r25	; 0x03
						}
						
    if(comp->Index==2) 
    9a52:	f7 01       	movw	r30, r14
    9a54:	ee 58       	subi	r30, 0x8E	; 142
    9a56:	ff 4f       	sbci	r31, 0xFF	; 255
    9a58:	80 81       	ld	r24, Z
    9a5a:	91 81       	ldd	r25, Z+1	; 0x01
    9a5c:	02 97       	sbiw	r24, 0x02	; 2
    9a5e:	09 f0       	breq	.+2      	; 0x9a62 <ReadSensors+0x478>
    9a60:	07 c1       	rjmp	.+526    	; 0x9c70 <ReadSensors+0x686>
	{
					 //read High_Pressure_1
					 PORTL |=    (1 << PL2);//a0
    9a62:	eb e0       	ldi	r30, 0x0B	; 11
    9a64:	f1 e0       	ldi	r31, 0x01	; 1
    9a66:	80 81       	ld	r24, Z
    9a68:	84 60       	ori	r24, 0x04	; 4
    9a6a:	80 83       	st	Z, r24
					 PORTL &= ~  (1 << PL1);//a1
    9a6c:	80 81       	ld	r24, Z
    9a6e:	8d 7f       	andi	r24, 0xFD	; 253
    9a70:	80 83       	st	Z, r24
					 PORTL &= ~  (1 << PL0);//a2
    9a72:	80 81       	ld	r24, Z
    9a74:	8e 7f       	andi	r24, 0xFE	; 254
    9a76:	80 83       	st	Z, r24
					 startAnalogConversion(0, 0);
    9a78:	60 e0       	ldi	r22, 0x00	; 0
    9a7a:	80 e0       	ldi	r24, 0x00	; 0
    9a7c:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					 while( analogIsConverting() )
    9a80:	01 c0       	rjmp	.+2      	; 0x9a84 <ReadSensors+0x49a>
    9a82:	00 00       	nop
    9a84:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9a88:	81 11       	cpse	r24, r1
					 _delay_us(25);//portYIELD();
					 temp = analogConversionResult();
    9a8a:	fb cf       	rjmp	.-10     	; 0x9a82 <ReadSensors+0x498>
    9a8c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					 comp->High_Press = ConvertToHighPress(temp);
    9a90:	bc 01       	movw	r22, r24
    9a92:	80 e0       	ldi	r24, 0x00	; 0
    9a94:	90 e0       	ldi	r25, 0x00	; 0
    9a96:	bc d5       	rcall	.+2936   	; 0xa610 <__floatunsisf>
    9a98:	20 e0       	ldi	r18, 0x00	; 0
    9a9a:	30 e0       	ldi	r19, 0x00	; 0
    9a9c:	4c ec       	ldi	r20, 0xCC	; 204
    9a9e:	52 e4       	ldi	r21, 0x42	; 66
    9aa0:	b5 d4       	rcall	.+2410   	; 0xa40c <__subsf3>
    9aa2:	20 e0       	ldi	r18, 0x00	; 0
    9aa4:	30 e0       	ldi	r19, 0x00	; 0
    9aa6:	48 e0       	ldi	r20, 0x08	; 8
    9aa8:	52 e4       	ldi	r21, 0x42	; 66
    9aaa:	ad d6       	rcall	.+3418   	; 0xa806 <__mulsf3>
    9aac:	20 e0       	ldi	r18, 0x00	; 0
    9aae:	30 e0       	ldi	r19, 0x00	; 0
    9ab0:	4d e4       	ldi	r20, 0x4D	; 77
    9ab2:	54 e4       	ldi	r21, 0x44	; 68
    9ab4:	14 d5       	rcall	.+2600   	; 0xa4de <__divsf3>
    9ab6:	f7 01       	movw	r30, r14
    9ab8:	62 8f       	std	Z+26, r22	; 0x1a
    9aba:	73 8f       	std	Z+27, r23	; 0x1b
    9abc:	84 8f       	std	Z+28, r24	; 0x1c
    9abe:	95 8f       	std	Z+29, r25	; 0x1d
					 //read Low_Pressure_1
					 PORTL &= ~   (1 << PL2);
    9ac0:	eb e0       	ldi	r30, 0x0B	; 11
    9ac2:	f1 e0       	ldi	r31, 0x01	; 1
    9ac4:	80 81       	ld	r24, Z
    9ac6:	8b 7f       	andi	r24, 0xFB	; 251
    9ac8:	80 83       	st	Z, r24
					 PORTL |=     (1 << PL1);
    9aca:	80 81       	ld	r24, Z
    9acc:	82 60       	ori	r24, 0x02	; 2
    9ace:	80 83       	st	Z, r24
					 PORTL &= ~   (1 << PL0);
    9ad0:	80 81       	ld	r24, Z
    9ad2:	8e 7f       	andi	r24, 0xFE	; 254
    9ad4:	80 83       	st	Z, r24
					 startAnalogConversion(0, 0);
    9ad6:	60 e0       	ldi	r22, 0x00	; 0
    9ad8:	80 e0       	ldi	r24, 0x00	; 0
    9ada:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					 while( analogIsConverting() )
    9ade:	01 c0       	rjmp	.+2      	; 0x9ae2 <ReadSensors+0x4f8>
    9ae0:	00 00       	nop
    9ae2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9ae6:	81 11       	cpse	r24, r1
					_delay_us(25);// portYIELD();
					 temp = analogConversionResult();
    9ae8:	fb cf       	rjmp	.-10     	; 0x9ae0 <ReadSensors+0x4f6>
					 comp->Low_Press = ConvertToLowPress( temp );
    9aea:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9aee:	bc 01       	movw	r22, r24
    9af0:	80 e0       	ldi	r24, 0x00	; 0
    9af2:	90 e0       	ldi	r25, 0x00	; 0
    9af4:	8d d5       	rcall	.+2842   	; 0xa610 <__floatunsisf>
    9af6:	20 e0       	ldi	r18, 0x00	; 0
    9af8:	30 e0       	ldi	r19, 0x00	; 0
    9afa:	4c e5       	ldi	r20, 0x5C	; 92
    9afc:	52 e4       	ldi	r21, 0x42	; 66
    9afe:	86 d4       	rcall	.+2316   	; 0xa40c <__subsf3>
    9b00:	20 e0       	ldi	r18, 0x00	; 0
    9b02:	30 e0       	ldi	r19, 0x00	; 0
    9b04:	40 e9       	ldi	r20, 0x90	; 144
    9b06:	51 e4       	ldi	r21, 0x41	; 65
    9b08:	7e d6       	rcall	.+3324   	; 0xa806 <__mulsf3>
    9b0a:	20 e0       	ldi	r18, 0x00	; 0
    9b0c:	30 ec       	ldi	r19, 0xC0	; 192
    9b0e:	48 e5       	ldi	r20, 0x58	; 88
    9b10:	54 e4       	ldi	r21, 0x44	; 68
    9b12:	e5 d4       	rcall	.+2506   	; 0xa4de <__divsf3>
    9b14:	f7 01       	movw	r30, r14
    9b16:	66 8f       	std	Z+30, r22	; 0x1e
    9b18:	77 8f       	std	Z+31, r23	; 0x1f
    9b1a:	80 a3       	std	Z+32, r24	; 0x20
    9b1c:	91 a3       	std	Z+33, r25	; 0x21
					startAnalogConversion(2, 0);
    9b1e:	60 e0       	ldi	r22, 0x00	; 0
    9b20:	82 e0       	ldi	r24, 0x02	; 2
    9b22:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9b26:	01 c0       	rjmp	.+2      	; 0x9b2a <ReadSensors+0x540>
    9b28:	00 00       	nop
    9b2a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9b2e:	81 11       	cpse	r24, r1
    9b30:	fb cf       	rjmp	.-10     	; 0x9b28 <ReadSensors+0x53e>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9b32:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Heat_Out = ConvertToTemp( temp );
    9b36:	0e 94 bb 3c 	call	0x7976	; 0x7976 <ConvertToTemp>
    9b3a:	f7 01       	movw	r30, r14
    9b3c:	62 a7       	std	Z+42, r22	; 0x2a
    9b3e:	73 a7       	std	Z+43, r23	; 0x2b
    9b40:	84 a7       	std	Z+44, r24	; 0x2c
    9b42:	95 a7       	std	Z+45, r25	; 0x2d
					//---------------------------------------------------------------
					startAnalogConversion(3, 0);
    9b44:	60 e0       	ldi	r22, 0x00	; 0
    9b46:	83 e0       	ldi	r24, 0x03	; 3
    9b48:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9b4c:	01 c0       	rjmp	.+2      	; 0x9b50 <ReadSensors+0x566>
    9b4e:	00 00       	nop
    9b50:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9b54:	81 11       	cpse	r24, r1
    9b56:	fb cf       	rjmp	.-10     	; 0x9b4e <ReadSensors+0x564>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9b58:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Heat_In = ConvertToTemp( temp );
    9b5c:	0e 94 bb 3c 	call	0x7976	; 0x7976 <ConvertToTemp>
    9b60:	f7 01       	movw	r30, r14
    9b62:	66 a7       	std	Z+46, r22	; 0x2e
    9b64:	77 a7       	std	Z+47, r23	; 0x2f
    9b66:	80 ab       	std	Z+48, r24	; 0x30
    9b68:	91 ab       	std	Z+49, r25	; 0x31
					//---------------------------------------------------------------
					startAnalogConversion(4, 0);
    9b6a:	60 e0       	ldi	r22, 0x00	; 0
    9b6c:	84 e0       	ldi	r24, 0x04	; 4
    9b6e:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9b72:	01 c0       	rjmp	.+2      	; 0x9b76 <ReadSensors+0x58c>
    9b74:	00 00       	nop
    9b76:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9b7a:	81 11       	cpse	r24, r1
    9b7c:	fb cf       	rjmp	.-10     	; 0x9b74 <ReadSensors+0x58a>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9b7e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Src_In = ConvertToTemp( temp );
    9b82:	0e 94 bb 3c 	call	0x7976	; 0x7976 <ConvertToTemp>
    9b86:	f7 01       	movw	r30, r14
    9b88:	62 ab       	std	Z+50, r22	; 0x32
    9b8a:	73 ab       	std	Z+51, r23	; 0x33
    9b8c:	84 ab       	std	Z+52, r24	; 0x34
    9b8e:	95 ab       	std	Z+53, r25	; 0x35
					//---------------------------------------------------------------
					startAnalogConversion(5, 0);
    9b90:	60 e0       	ldi	r22, 0x00	; 0
    9b92:	85 e0       	ldi	r24, 0x05	; 5
    9b94:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9b98:	01 c0       	rjmp	.+2      	; 0x9b9c <ReadSensors+0x5b2>
    9b9a:	00 00       	nop
    9b9c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9ba0:	81 11       	cpse	r24, r1
    9ba2:	fb cf       	rjmp	.-10     	; 0x9b9a <ReadSensors+0x5b0>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9ba4:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Src_Out = ConvertToTemp( temp );
    9ba8:	0e 94 bb 3c 	call	0x7976	; 0x7976 <ConvertToTemp>
    9bac:	f7 01       	movw	r30, r14
    9bae:	66 ab       	std	Z+54, r22	; 0x36
    9bb0:	77 ab       	std	Z+55, r23	; 0x37
    9bb2:	80 af       	std	Z+56, r24	; 0x38
    9bb4:	91 af       	std	Z+57, r25	; 0x39
					//---------------------------------------------------------------
					startAnalogConversion(6, 0);
    9bb6:	60 e0       	ldi	r22, 0x00	; 0
    9bb8:	86 e0       	ldi	r24, 0x06	; 6
    9bba:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9bbe:	01 c0       	rjmp	.+2      	; 0x9bc2 <ReadSensors+0x5d8>
    9bc0:	00 00       	nop
    9bc2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9bc6:	81 11       	cpse	r24, r1
    9bc8:	fb cf       	rjmp	.-10     	; 0x9bc0 <ReadSensors+0x5d6>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9bca:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Ex_Comp = ConvertToTemp( temp );
    9bce:	0e 94 bb 3c 	call	0x7976	; 0x7976 <ConvertToTemp>
    9bd2:	f7 01       	movw	r30, r14
    9bd4:	62 af       	std	Z+58, r22	; 0x3a
    9bd6:	73 af       	std	Z+59, r23	; 0x3b
    9bd8:	84 af       	std	Z+60, r24	; 0x3c
    9bda:	95 af       	std	Z+61, r25	; 0x3d
					//---------------------------------------------------------------
					startAnalogConversion(7, 0);
    9bdc:	60 e0       	ldi	r22, 0x00	; 0
    9bde:	87 e0       	ldi	r24, 0x07	; 7
    9be0:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9be4:	01 c0       	rjmp	.+2      	; 0x9be8 <ReadSensors+0x5fe>
    9be6:	00 00       	nop
    9be8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9bec:	81 11       	cpse	r24, r1
    9bee:	fb cf       	rjmp	.-10     	; 0x9be6 <ReadSensors+0x5fc>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9bf0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Suc_Comp = ConvertToTemp( temp );
    9bf4:	0e 94 bb 3c 	call	0x7976	; 0x7976 <ConvertToTemp>
    9bf8:	f7 01       	movw	r30, r14
    9bfa:	fe 96       	adiw	r30, 0x3e	; 62
    9bfc:	60 83       	st	Z, r22
    9bfe:	71 83       	std	Z+1, r23	; 0x01
    9c00:	82 83       	std	Z+2, r24	; 0x02
    9c02:	93 83       	std	Z+3, r25	; 0x03
					//---------------------------------------------------------------
					startAnalogConversion(8, 0);
    9c04:	60 e0       	ldi	r22, 0x00	; 0
    9c06:	88 e0       	ldi	r24, 0x08	; 8
    9c08:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9c0c:	01 c0       	rjmp	.+2      	; 0x9c10 <ReadSensors+0x626>
    9c0e:	00 00       	nop
    9c10:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9c14:	81 11       	cpse	r24, r1
    9c16:	fb cf       	rjmp	.-10     	; 0x9c0e <ReadSensors+0x624>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9c18:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Cond_Temp = ConvertToTemp( temp )	;
    9c1c:	0e 94 bb 3c 	call	0x7976	; 0x7976 <ConvertToTemp>
    9c20:	f7 01       	movw	r30, r14
    9c22:	ee 5b       	subi	r30, 0xBE	; 190
    9c24:	ff 4f       	sbci	r31, 0xFF	; 255
    9c26:	60 83       	st	Z, r22
    9c28:	71 83       	std	Z+1, r23	; 0x01
    9c2a:	82 83       	std	Z+2, r24	; 0x02
    9c2c:	93 83       	std	Z+3, r25	; 0x03
					//--------------------------------------------------------------
					comp->SuperHeat=ReadSuperHeat (comp);
    9c2e:	c7 01       	movw	r24, r14
    9c30:	0e 94 1b 3d 	call	0x7a36	; 0x7a36 <ReadSuperHeat>
    9c34:	f7 01       	movw	r30, r14
    9c36:	ea 5b       	subi	r30, 0xBA	; 186
    9c38:	ff 4f       	sbci	r31, 0xFF	; 255
    9c3a:	60 83       	st	Z, r22
    9c3c:	71 83       	std	Z+1, r23	; 0x01
    9c3e:	82 83       	std	Z+2, r24	; 0x02
    9c40:	93 83       	std	Z+3, r25	; 0x03
					comp->SuperCool=ReadSuperCool (comp);
    9c42:	c7 01       	movw	r24, r14
    9c44:	0e 94 85 3d 	call	0x7b0a	; 0x7b0a <ReadSuperCool>
    9c48:	f7 01       	movw	r30, r14
    9c4a:	e6 5b       	subi	r30, 0xB6	; 182
    9c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    9c4e:	60 83       	st	Z, r22
    9c50:	71 83       	std	Z+1, r23	; 0x01
    9c52:	82 83       	std	Z+2, r24	; 0x02
					if(comp->checkTrv)comp->trvCorection=corectTrv(comp);
    9c54:	93 83       	std	Z+3, r25	; 0x03
    9c56:	f7 01       	movw	r30, r14
    9c58:	81 81       	ldd	r24, Z+1	; 0x01
    9c5a:	88 23       	and	r24, r24
    9c5c:	49 f0       	breq	.+18     	; 0x9c70 <ReadSensors+0x686>
    9c5e:	c7 01       	movw	r24, r14
    9c60:	0e 94 ee 3d 	call	0x7bdc	; 0x7bdc <corectTrv>
    9c64:	e7 01       	movw	r28, r14
    9c66:	c6 59       	subi	r28, 0x96	; 150
    9c68:	df 4f       	sbci	r29, 0xFF	; 255
    9c6a:	a1 d4       	rcall	.+2370   	; 0xa5ae <__fixsfsi>
    9c6c:	79 83       	std	Y+1, r23	; 0x01
    9c6e:	68 83       	st	Y, r22
					//EEpromData.Volt_B= ADE7758_bvrms();
					//EEpromData.Volt_C= ADE7758_cvrms();
					}

return;	
}
    9c70:	df 91       	pop	r29
    9c72:	cf 91       	pop	r28
    9c74:	1f 91       	pop	r17
    9c76:	0f 91       	pop	r16
    9c78:	ff 90       	pop	r15
    9c7a:	ef 90       	pop	r14
    9c7c:	08 95       	ret

00009c7e <ComutateTrv>:
	}
	if(comp->Index==2)
	{
		xTimerDelete(xComutateTrv_2,0);
	}
}
    9c7e:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    9c82:	fc 01       	movw	r30, r24
    9c84:	20 81       	ld	r18, Z
    9c86:	2a 31       	cpi	r18, 0x1A	; 26
    9c88:	09 f0       	breq	.+2      	; 0x9c8c <ComutateTrv+0xe>
    9c8a:	74 c0       	rjmp	.+232    	; 0x9d74 <ComutateTrv+0xf6>
    9c8c:	22 b1       	in	r18, 0x02	; 2
    9c8e:	20 7f       	andi	r18, 0xF0	; 240
    9c90:	22 b9       	out	0x02, r18	; 2
    9c92:	20 91 60 0a 	lds	r18, 0x0A60	; 0x800a60 <Comp_1+0x6c>
    9c96:	30 91 61 0a 	lds	r19, 0x0A61	; 0x800a61 <Comp_1+0x6d>
    9c9a:	12 16       	cp	r1, r18
    9c9c:	13 06       	cpc	r1, r19
    9c9e:	54 f5       	brge	.+84     	; 0x9cf4 <ComutateTrv+0x76>
    9ca0:	e0 91 e2 07 	lds	r30, 0x07E2	; 0x8007e2 <step_index.2938>
    9ca4:	21 e0       	ldi	r18, 0x01	; 1
    9ca6:	2e 0f       	add	r18, r30
    9ca8:	20 93 e2 07 	sts	0x07E2, r18	; 0x8007e2 <step_index.2938>
    9cac:	32 b1       	in	r19, 0x02	; 2
    9cae:	f0 e0       	ldi	r31, 0x00	; 0
    9cb0:	ee 5e       	subi	r30, 0xEE	; 238
    9cb2:	fd 4f       	sbci	r31, 0xFD	; 253
    9cb4:	20 81       	ld	r18, Z
    9cb6:	23 2b       	or	r18, r19
    9cb8:	22 b9       	out	0x02, r18	; 2
    9cba:	e0 e6       	ldi	r30, 0x60	; 96
    9cbc:	fa e0       	ldi	r31, 0x0A	; 10
    9cbe:	20 81       	ld	r18, Z
    9cc0:	31 81       	ldd	r19, Z+1	; 0x01
    9cc2:	21 50       	subi	r18, 0x01	; 1
    9cc4:	31 09       	sbc	r19, r1
    9cc6:	31 83       	std	Z+1, r19	; 0x01
    9cc8:	20 83       	st	Z, r18
    9cca:	20 91 62 0a 	lds	r18, 0x0A62	; 0x800a62 <Comp_1+0x6e>
    9cce:	30 91 63 0a 	lds	r19, 0x0A63	; 0x800a63 <Comp_1+0x6f>
    9cd2:	2f 5f       	subi	r18, 0xFF	; 255
    9cd4:	3f 4f       	sbci	r19, 0xFF	; 255
    9cd6:	21 3f       	cpi	r18, 0xF1	; 241
    9cd8:	31 05       	cpc	r19, r1
    9cda:	2c f4       	brge	.+10     	; 0x9ce6 <ComutateTrv+0x68>
    9cdc:	30 93 63 0a 	sts	0x0A63, r19	; 0x800a63 <Comp_1+0x6f>
    9ce0:	20 93 62 0a 	sts	0x0A62, r18	; 0x800a62 <Comp_1+0x6e>
    9ce4:	41 c0       	rjmp	.+130    	; 0x9d68 <ComutateTrv+0xea>
    9ce6:	20 ef       	ldi	r18, 0xF0	; 240
    9ce8:	30 e0       	ldi	r19, 0x00	; 0
    9cea:	30 93 63 0a 	sts	0x0A63, r19	; 0x800a63 <Comp_1+0x6f>
    9cee:	20 93 62 0a 	sts	0x0A62, r18	; 0x800a62 <Comp_1+0x6e>
    9cf2:	3a c0       	rjmp	.+116    	; 0x9d68 <ComutateTrv+0xea>
    9cf4:	33 23       	and	r19, r19
    9cf6:	24 f5       	brge	.+72     	; 0x9d40 <ComutateTrv+0xc2>
    9cf8:	e0 91 e2 07 	lds	r30, 0x07E2	; 0x8007e2 <step_index.2938>
    9cfc:	21 e0       	ldi	r18, 0x01	; 1
    9cfe:	2e 0f       	add	r18, r30
    9d00:	20 93 e2 07 	sts	0x07E2, r18	; 0x8007e2 <step_index.2938>
    9d04:	f0 e0       	ldi	r31, 0x00	; 0
    9d06:	e2 5f       	subi	r30, 0xF2	; 242
    9d08:	fd 4f       	sbci	r31, 0xFD	; 253
    9d0a:	20 81       	ld	r18, Z
    9d0c:	22 b9       	out	0x02, r18	; 2
    9d0e:	e0 e6       	ldi	r30, 0x60	; 96
    9d10:	fa e0       	ldi	r31, 0x0A	; 10
    9d12:	20 81       	ld	r18, Z
    9d14:	31 81       	ldd	r19, Z+1	; 0x01
    9d16:	2f 5f       	subi	r18, 0xFF	; 255
    9d18:	3f 4f       	sbci	r19, 0xFF	; 255
    9d1a:	31 83       	std	Z+1, r19	; 0x01
    9d1c:	20 83       	st	Z, r18
    9d1e:	20 91 62 0a 	lds	r18, 0x0A62	; 0x800a62 <Comp_1+0x6e>
    9d22:	30 91 63 0a 	lds	r19, 0x0A63	; 0x800a63 <Comp_1+0x6f>
    9d26:	21 50       	subi	r18, 0x01	; 1
    9d28:	31 09       	sbc	r19, r1
    9d2a:	2a f0       	brmi	.+10     	; 0x9d36 <ComutateTrv+0xb8>
    9d2c:	30 93 63 0a 	sts	0x0A63, r19	; 0x800a63 <Comp_1+0x6f>
    9d30:	20 93 62 0a 	sts	0x0A62, r18	; 0x800a62 <Comp_1+0x6e>
    9d34:	19 c0       	rjmp	.+50     	; 0x9d68 <ComutateTrv+0xea>
    9d36:	10 92 63 0a 	sts	0x0A63, r1	; 0x800a63 <Comp_1+0x6f>
    9d3a:	10 92 62 0a 	sts	0x0A62, r1	; 0x800a62 <Comp_1+0x6e>
    9d3e:	14 c0       	rjmp	.+40     	; 0x9d68 <ComutateTrv+0xea>
    9d40:	23 2b       	or	r18, r19
    9d42:	69 f4       	brne	.+26     	; 0x9d5e <ComutateTrv+0xe0>
    9d44:	20 91 fb 09 	lds	r18, 0x09FB	; 0x8009fb <Comp_1+0x7>
    9d48:	22 23       	and	r18, r18
    9d4a:	49 f0       	breq	.+18     	; 0x9d5e <ComutateTrv+0xe0>
    9d4c:	20 ef       	ldi	r18, 0xF0	; 240
    9d4e:	30 e0       	ldi	r19, 0x00	; 0
    9d50:	30 93 61 0a 	sts	0x0A61, r19	; 0x800a61 <Comp_1+0x6d>
    9d54:	20 93 60 0a 	sts	0x0A60, r18	; 0x800a60 <Comp_1+0x6c>
    9d58:	10 92 fb 09 	sts	0x09FB, r1	; 0x8009fb <Comp_1+0x7>
    9d5c:	05 c0       	rjmp	.+10     	; 0x9d68 <ComutateTrv+0xea>
    9d5e:	22 b1       	in	r18, 0x02	; 2
    9d60:	20 7f       	andi	r18, 0xF0	; 240
    9d62:	22 b9       	out	0x02, r18	; 2
    9d64:	10 92 fb 09 	sts	0x09FB, r1	; 0x8009fb <Comp_1+0x7>
    9d68:	20 91 e2 07 	lds	r18, 0x07E2	; 0x8007e2 <step_index.2938>
    9d6c:	24 30       	cpi	r18, 0x04	; 4
    9d6e:	10 f0       	brcs	.+4      	; 0x9d74 <ComutateTrv+0xf6>
    9d70:	10 92 e2 07 	sts	0x07E2, r1	; 0x8007e2 <step_index.2938>
    9d74:	fc 01       	movw	r30, r24
    9d76:	80 81       	ld	r24, Z
    9d78:	8b 31       	cpi	r24, 0x1B	; 27
    9d7a:	09 f0       	breq	.+2      	; 0x9d7e <ComutateTrv+0x100>
    9d7c:	70 c0       	rjmp	.+224    	; 0x9e5e <ComutateTrv+0x1e0>
    9d7e:	82 b1       	in	r24, 0x02	; 2
    9d80:	8f 70       	andi	r24, 0x0F	; 15
    9d82:	82 b9       	out	0x02, r24	; 2
    9d84:	80 91 ea 0a 	lds	r24, 0x0AEA	; 0x800aea <Comp_2+0x6c>
    9d88:	90 91 eb 0a 	lds	r25, 0x0AEB	; 0x800aeb <Comp_2+0x6d>
    9d8c:	18 16       	cp	r1, r24
    9d8e:	19 06       	cpc	r1, r25
    9d90:	44 f5       	brge	.+80     	; 0x9de2 <ComutateTrv+0x164>
    9d92:	e0 91 e1 07 	lds	r30, 0x07E1	; 0x8007e1 <step_index.2939>
    9d96:	81 e0       	ldi	r24, 0x01	; 1
    9d98:	8e 0f       	add	r24, r30
    9d9a:	80 93 e1 07 	sts	0x07E1, r24	; 0x8007e1 <step_index.2939>
    9d9e:	92 b1       	in	r25, 0x02	; 2
    9da0:	f0 e0       	ldi	r31, 0x00	; 0
    9da2:	e6 5f       	subi	r30, 0xF6	; 246
    9da4:	fd 4f       	sbci	r31, 0xFD	; 253
    9da6:	80 81       	ld	r24, Z
    9da8:	89 2b       	or	r24, r25
    9daa:	82 b9       	out	0x02, r24	; 2
    9dac:	ea ee       	ldi	r30, 0xEA	; 234
    9dae:	fa e0       	ldi	r31, 0x0A	; 10
    9db0:	80 81       	ld	r24, Z
    9db2:	91 81       	ldd	r25, Z+1	; 0x01
    9db4:	01 97       	sbiw	r24, 0x01	; 1
    9db6:	91 83       	std	Z+1, r25	; 0x01
    9db8:	80 83       	st	Z, r24
    9dba:	80 91 ec 0a 	lds	r24, 0x0AEC	; 0x800aec <Comp_2+0x6e>
    9dbe:	90 91 ed 0a 	lds	r25, 0x0AED	; 0x800aed <Comp_2+0x6f>
    9dc2:	01 96       	adiw	r24, 0x01	; 1
    9dc4:	81 3f       	cpi	r24, 0xF1	; 241
    9dc6:	91 05       	cpc	r25, r1
    9dc8:	2c f4       	brge	.+10     	; 0x9dd4 <ComutateTrv+0x156>
    9dca:	90 93 ed 0a 	sts	0x0AED, r25	; 0x800aed <Comp_2+0x6f>
    9dce:	80 93 ec 0a 	sts	0x0AEC, r24	; 0x800aec <Comp_2+0x6e>
    9dd2:	3f c0       	rjmp	.+126    	; 0x9e52 <ComutateTrv+0x1d4>
    9dd4:	80 ef       	ldi	r24, 0xF0	; 240
    9dd6:	90 e0       	ldi	r25, 0x00	; 0
    9dd8:	90 93 ed 0a 	sts	0x0AED, r25	; 0x800aed <Comp_2+0x6f>
    9ddc:	80 93 ec 0a 	sts	0x0AEC, r24	; 0x800aec <Comp_2+0x6e>
    9de0:	38 c0       	rjmp	.+112    	; 0x9e52 <ComutateTrv+0x1d4>
    9de2:	99 23       	and	r25, r25
    9de4:	14 f5       	brge	.+68     	; 0x9e2a <ComutateTrv+0x1ac>
    9de6:	e0 91 e1 07 	lds	r30, 0x07E1	; 0x8007e1 <step_index.2939>
    9dea:	81 e0       	ldi	r24, 0x01	; 1
    9dec:	8e 0f       	add	r24, r30
    9dee:	80 93 e1 07 	sts	0x07E1, r24	; 0x8007e1 <step_index.2939>
    9df2:	f0 e0       	ldi	r31, 0x00	; 0
    9df4:	ea 5f       	subi	r30, 0xFA	; 250
    9df6:	fd 4f       	sbci	r31, 0xFD	; 253
    9df8:	80 81       	ld	r24, Z
    9dfa:	82 b9       	out	0x02, r24	; 2
    9dfc:	ea ee       	ldi	r30, 0xEA	; 234
    9dfe:	fa e0       	ldi	r31, 0x0A	; 10
    9e00:	80 81       	ld	r24, Z
    9e02:	91 81       	ldd	r25, Z+1	; 0x01
    9e04:	01 96       	adiw	r24, 0x01	; 1
    9e06:	91 83       	std	Z+1, r25	; 0x01
    9e08:	80 83       	st	Z, r24
    9e0a:	80 91 ec 0a 	lds	r24, 0x0AEC	; 0x800aec <Comp_2+0x6e>
    9e0e:	90 91 ed 0a 	lds	r25, 0x0AED	; 0x800aed <Comp_2+0x6f>
    9e12:	01 97       	sbiw	r24, 0x01	; 1
    9e14:	2a f0       	brmi	.+10     	; 0x9e20 <ComutateTrv+0x1a2>
    9e16:	90 93 ed 0a 	sts	0x0AED, r25	; 0x800aed <Comp_2+0x6f>
    9e1a:	80 93 ec 0a 	sts	0x0AEC, r24	; 0x800aec <Comp_2+0x6e>
    9e1e:	19 c0       	rjmp	.+50     	; 0x9e52 <ComutateTrv+0x1d4>
    9e20:	10 92 ed 0a 	sts	0x0AED, r1	; 0x800aed <Comp_2+0x6f>
    9e24:	10 92 ec 0a 	sts	0x0AEC, r1	; 0x800aec <Comp_2+0x6e>
    9e28:	14 c0       	rjmp	.+40     	; 0x9e52 <ComutateTrv+0x1d4>
    9e2a:	89 2b       	or	r24, r25
    9e2c:	69 f4       	brne	.+26     	; 0x9e48 <ComutateTrv+0x1ca>
    9e2e:	80 91 85 0a 	lds	r24, 0x0A85	; 0x800a85 <Comp_2+0x7>
    9e32:	88 23       	and	r24, r24
    9e34:	49 f0       	breq	.+18     	; 0x9e48 <ComutateTrv+0x1ca>
    9e36:	80 ef       	ldi	r24, 0xF0	; 240
    9e38:	90 e0       	ldi	r25, 0x00	; 0
    9e3a:	90 93 eb 0a 	sts	0x0AEB, r25	; 0x800aeb <Comp_2+0x6d>
    9e3e:	80 93 ea 0a 	sts	0x0AEA, r24	; 0x800aea <Comp_2+0x6c>
    9e42:	10 92 85 0a 	sts	0x0A85, r1	; 0x800a85 <Comp_2+0x7>
    9e46:	05 c0       	rjmp	.+10     	; 0x9e52 <ComutateTrv+0x1d4>
    9e48:	82 b1       	in	r24, 0x02	; 2
    9e4a:	8f 70       	andi	r24, 0x0F	; 15
    9e4c:	82 b9       	out	0x02, r24	; 2
    9e4e:	10 92 85 0a 	sts	0x0A85, r1	; 0x800a85 <Comp_2+0x7>
    9e52:	80 91 e1 07 	lds	r24, 0x07E1	; 0x8007e1 <step_index.2939>
    9e56:	84 30       	cpi	r24, 0x04	; 4
    9e58:	10 f0       	brcs	.+4      	; 0x9e5e <ComutateTrv+0x1e0>
    9e5a:	10 92 e1 07 	sts	0x07E1, r1	; 0x8007e1 <step_index.2939>
    9e5e:	08 95       	ret

00009e60 <activateTrvTimer>:
    9e60:	ef 92       	push	r14
    9e62:	ff 92       	push	r15
    9e64:	0f 93       	push	r16
    9e66:	1f 93       	push	r17
    9e68:	8e 58       	subi	r24, 0x8E	; 142
    9e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    9e6c:	fc 01       	movw	r30, r24
    9e6e:	80 81       	ld	r24, Z
    9e70:	91 81       	ldd	r25, Z+1	; 0x01
    9e72:	81 30       	cpi	r24, 0x01	; 1
    9e74:	91 05       	cpc	r25, r1
    9e76:	b1 f4       	brne	.+44     	; 0x9ea4 <activateTrvTimer+0x44>
    9e78:	0f 2e       	mov	r0, r31
    9e7a:	ff e3       	ldi	r31, 0x3F	; 63
    9e7c:	ef 2e       	mov	r14, r31
    9e7e:	fe e4       	ldi	r31, 0x4E	; 78
    9e80:	ff 2e       	mov	r15, r31
    9e82:	f0 2d       	mov	r31, r0
    9e84:	0a e0       	ldi	r16, 0x0A	; 10
    9e86:	17 e0       	ldi	r17, 0x07	; 7
    9e88:	21 e0       	ldi	r18, 0x01	; 1
    9e8a:	42 e3       	ldi	r20, 0x32	; 50
    9e8c:	50 e0       	ldi	r21, 0x00	; 0
    9e8e:	60 e0       	ldi	r22, 0x00	; 0
    9e90:	70 e0       	ldi	r23, 0x00	; 0
    9e92:	86 ea       	ldi	r24, 0xA6	; 166
    9e94:	96 e0       	ldi	r25, 0x06	; 6
    9e96:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    9e9a:	90 93 7a 09 	sts	0x097A, r25	; 0x80097a <xComutateTrv_1+0x1>
    9e9e:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <xComutateTrv_1>
    9ea2:	17 c0       	rjmp	.+46     	; 0x9ed2 <activateTrvTimer+0x72>
    9ea4:	02 97       	sbiw	r24, 0x02	; 2
    9ea6:	a9 f4       	brne	.+42     	; 0x9ed2 <activateTrvTimer+0x72>
    9ea8:	0f 2e       	mov	r0, r31
    9eaa:	ff e3       	ldi	r31, 0x3F	; 63
    9eac:	ef 2e       	mov	r14, r31
    9eae:	fe e4       	ldi	r31, 0x4E	; 78
    9eb0:	ff 2e       	mov	r15, r31
    9eb2:	f0 2d       	mov	r31, r0
    9eb4:	09 e0       	ldi	r16, 0x09	; 9
    9eb6:	17 e0       	ldi	r17, 0x07	; 7
    9eb8:	21 e0       	ldi	r18, 0x01	; 1
    9eba:	42 e3       	ldi	r20, 0x32	; 50
    9ebc:	50 e0       	ldi	r21, 0x00	; 0
    9ebe:	60 e0       	ldi	r22, 0x00	; 0
    9ec0:	70 e0       	ldi	r23, 0x00	; 0
    9ec2:	8f ea       	ldi	r24, 0xAF	; 175
    9ec4:	96 e0       	ldi	r25, 0x06	; 6
    9ec6:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    9eca:	90 93 75 0a 	sts	0x0A75, r25	; 0x800a75 <xComutateTrv_2+0x1>
    9ece:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <xComutateTrv_2>
    9ed2:	1f 91       	pop	r17
    9ed4:	0f 91       	pop	r16
    9ed6:	ff 90       	pop	r15
    9ed8:	ef 90       	pop	r14
    9eda:	08 95       	ret

00009edc <startTrvTimer>:
    9edc:	cf 92       	push	r12
    9ede:	df 92       	push	r13
    9ee0:	ef 92       	push	r14
    9ee2:	ff 92       	push	r15
    9ee4:	0f 93       	push	r16
    9ee6:	1f 93       	push	r17
    9ee8:	8e 58       	subi	r24, 0x8E	; 142
    9eea:	9f 4f       	sbci	r25, 0xFF	; 255
    9eec:	fc 01       	movw	r30, r24
    9eee:	80 81       	ld	r24, Z
    9ef0:	91 81       	ldd	r25, Z+1	; 0x01
    9ef2:	81 30       	cpi	r24, 0x01	; 1
    9ef4:	91 05       	cpc	r25, r1
    9ef6:	89 f4       	brne	.+34     	; 0x9f1a <startTrvTimer+0x3e>
    9ef8:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    9efc:	9b 01       	movw	r18, r22
    9efe:	ac 01       	movw	r20, r24
    9f00:	c1 2c       	mov	r12, r1
    9f02:	d1 2c       	mov	r13, r1
    9f04:	76 01       	movw	r14, r12
    9f06:	00 e0       	ldi	r16, 0x00	; 0
    9f08:	10 e0       	ldi	r17, 0x00	; 0
    9f0a:	61 e0       	ldi	r22, 0x01	; 1
    9f0c:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <xComutateTrv_1>
    9f10:	90 91 7a 09 	lds	r25, 0x097A	; 0x80097a <xComutateTrv_1+0x1>
    9f14:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    9f18:	12 c0       	rjmp	.+36     	; 0x9f3e <startTrvTimer+0x62>
    9f1a:	02 97       	sbiw	r24, 0x02	; 2
    9f1c:	81 f4       	brne	.+32     	; 0x9f3e <startTrvTimer+0x62>
    9f1e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    9f22:	9b 01       	movw	r18, r22
    9f24:	ac 01       	movw	r20, r24
    9f26:	c1 2c       	mov	r12, r1
    9f28:	d1 2c       	mov	r13, r1
    9f2a:	76 01       	movw	r14, r12
    9f2c:	00 e0       	ldi	r16, 0x00	; 0
    9f2e:	10 e0       	ldi	r17, 0x00	; 0
    9f30:	61 e0       	ldi	r22, 0x01	; 1
    9f32:	80 91 74 0a 	lds	r24, 0x0A74	; 0x800a74 <xComutateTrv_2>
    9f36:	90 91 75 0a 	lds	r25, 0x0A75	; 0x800a75 <xComutateTrv_2+0x1>
    9f3a:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    9f3e:	1f 91       	pop	r17
    9f40:	0f 91       	pop	r16
    9f42:	ff 90       	pop	r15
    9f44:	ef 90       	pop	r14
    9f46:	df 90       	pop	r13
    9f48:	cf 90       	pop	r12
    9f4a:	08 95       	ret

00009f4c <stopTrvTimer>:
void stopTrvTimer(xCompressor *comp)
{
    9f4c:	cf 92       	push	r12
    9f4e:	df 92       	push	r13
    9f50:	ef 92       	push	r14
    9f52:	ff 92       	push	r15
    9f54:	0f 93       	push	r16
    9f56:	1f 93       	push	r17
    9f58:	cf 93       	push	r28
    9f5a:	df 93       	push	r29
    9f5c:	ec 01       	movw	r28, r24
	if(comp->Index==1)
    9f5e:	fc 01       	movw	r30, r24
    9f60:	ee 58       	subi	r30, 0x8E	; 142
    9f62:	ff 4f       	sbci	r31, 0xFF	; 255
    9f64:	80 81       	ld	r24, Z
    9f66:	91 81       	ldd	r25, Z+1	; 0x01
    9f68:	01 97       	sbiw	r24, 0x01	; 1
    9f6a:	c1 f4       	brne	.+48     	; 0x9f9c <stopTrvTimer+0x50>
	{
		if( xTimerIsTimerActive( xComutateTrv_1 ) != pdFALSE )	xTimerStop(xComutateTrv_1, 1);
    9f6c:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <xComutateTrv_1>
    9f70:	90 91 7a 09 	lds	r25, 0x097A	; 0x80097a <xComutateTrv_1+0x1>
    9f74:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    9f78:	88 23       	and	r24, r24
    9f7a:	81 f0       	breq	.+32     	; 0x9f9c <stopTrvTimer+0x50>
    9f7c:	c1 2c       	mov	r12, r1
    9f7e:	d1 2c       	mov	r13, r1
    9f80:	76 01       	movw	r14, r12
    9f82:	c3 94       	inc	r12
    9f84:	00 e0       	ldi	r16, 0x00	; 0
    9f86:	10 e0       	ldi	r17, 0x00	; 0
    9f88:	20 e0       	ldi	r18, 0x00	; 0
    9f8a:	30 e0       	ldi	r19, 0x00	; 0
    9f8c:	a9 01       	movw	r20, r18
    9f8e:	63 e0       	ldi	r22, 0x03	; 3
    9f90:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <xComutateTrv_1>
    9f94:	90 91 7a 09 	lds	r25, 0x097A	; 0x80097a <xComutateTrv_1+0x1>
    9f98:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if(comp->Index==2)
    9f9c:	ce 58       	subi	r28, 0x8E	; 142
    9f9e:	df 4f       	sbci	r29, 0xFF	; 255
    9fa0:	88 81       	ld	r24, Y
    9fa2:	99 81       	ldd	r25, Y+1	; 0x01
    9fa4:	02 97       	sbiw	r24, 0x02	; 2
    9fa6:	c1 f4       	brne	.+48     	; 0x9fd8 <stopTrvTimer+0x8c>
	{
		if( xTimerIsTimerActive( xComutateTrv_2 ) != pdFALSE )	xTimerStop(xComutateTrv_2, 1);
    9fa8:	80 91 74 0a 	lds	r24, 0x0A74	; 0x800a74 <xComutateTrv_2>
    9fac:	90 91 75 0a 	lds	r25, 0x0A75	; 0x800a75 <xComutateTrv_2+0x1>
    9fb0:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    9fb4:	88 23       	and	r24, r24
    9fb6:	81 f0       	breq	.+32     	; 0x9fd8 <stopTrvTimer+0x8c>
    9fb8:	c1 2c       	mov	r12, r1
    9fba:	d1 2c       	mov	r13, r1
    9fbc:	76 01       	movw	r14, r12
    9fbe:	c3 94       	inc	r12
    9fc0:	00 e0       	ldi	r16, 0x00	; 0
    9fc2:	10 e0       	ldi	r17, 0x00	; 0
    9fc4:	20 e0       	ldi	r18, 0x00	; 0
    9fc6:	30 e0       	ldi	r19, 0x00	; 0
    9fc8:	a9 01       	movw	r20, r18
    9fca:	63 e0       	ldi	r22, 0x03	; 3
    9fcc:	80 91 74 0a 	lds	r24, 0x0A74	; 0x800a74 <xComutateTrv_2>
    9fd0:	90 91 75 0a 	lds	r25, 0x0A75	; 0x800a75 <xComutateTrv_2+0x1>
    9fd4:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
}
    9fd8:	df 91       	pop	r29
    9fda:	cf 91       	pop	r28
    9fdc:	1f 91       	pop	r17
    9fde:	0f 91       	pop	r16
    9fe0:	ff 90       	pop	r15
    9fe2:	ef 90       	pop	r14
    9fe4:	df 90       	pop	r13
    9fe6:	cf 90       	pop	r12
    9fe8:	08 95       	ret

00009fea <Fuzzy>:
		
	}
}
//----------------------------------------------------------------------------------------------------------
int Fuzzy(xCompressor *comp,int corection)
{
    9fea:	8f 92       	push	r8
    9fec:	9f 92       	push	r9
    9fee:	af 92       	push	r10
    9ff0:	bf 92       	push	r11
    9ff2:	cf 92       	push	r12
    9ff4:	df 92       	push	r13
    9ff6:	ef 92       	push	r14
    9ff8:	ff 92       	push	r15
    9ffa:	0f 93       	push	r16
    9ffc:	1f 93       	push	r17
    9ffe:	cf 93       	push	r28
    a000:	df 93       	push	r29
    a002:	ec 01       	movw	r28, r24
    a004:	8b 01       	movw	r16, r22
	int steps=0;
	//static int old_corection=0;
	//static int old_corection_1=0;
	if(comp->Index==2)xSerialxPrintf(&xSerial3Port,"corection_2 = %d \r\n", corection);
    a006:	fc 01       	movw	r30, r24
    a008:	ee 58       	subi	r30, 0x8E	; 142
    a00a:	ff 4f       	sbci	r31, 0xFF	; 255
    a00c:	80 81       	ld	r24, Z
    a00e:	91 81       	ldd	r25, Z+1	; 0x01
    a010:	02 97       	sbiw	r24, 0x02	; 2
    a012:	91 f4       	brne	.+36     	; 0xa038 <Fuzzy+0x4e>
    a014:	1f 93       	push	r17
    a016:	6f 93       	push	r22
    a018:	8b eb       	ldi	r24, 0xBB	; 187
    a01a:	96 e0       	ldi	r25, 0x06	; 6
    a01c:	9f 93       	push	r25
    a01e:	8f 93       	push	r24
    a020:	82 e3       	ldi	r24, 0x32	; 50
    a022:	98 e0       	ldi	r25, 0x08	; 8
    a024:	9f 93       	push	r25
    a026:	8f 93       	push	r24
    a028:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a02c:	0f 90       	pop	r0
    a02e:	0f 90       	pop	r0
    a030:	0f 90       	pop	r0
    a032:	0f 90       	pop	r0
    a034:	0f 90       	pop	r0
    a036:	0f 90       	pop	r0
	if(comp->Src_In<=10 && comp->Heating==1 ){steps=(comp->Src_In)/10 * 100 ;}
    a038:	ca a8       	ldd	r12, Y+50	; 0x32
    a03a:	db a8       	ldd	r13, Y+51	; 0x33
    a03c:	ec a8       	ldd	r14, Y+52	; 0x34
    a03e:	fd a8       	ldd	r15, Y+53	; 0x35
    a040:	20 e0       	ldi	r18, 0x00	; 0
    a042:	30 e0       	ldi	r19, 0x00	; 0
    a044:	40 e2       	ldi	r20, 0x20	; 32
    a046:	51 e4       	ldi	r21, 0x41	; 65
    a048:	c7 01       	movw	r24, r14
    a04a:	b6 01       	movw	r22, r12
    a04c:	44 d2       	rcall	.+1160   	; 0xa4d6 <__cmpsf2>
    a04e:	18 16       	cp	r1, r24
    a050:	94 f0       	brlt	.+36     	; 0xa076 <Fuzzy+0x8c>
    a052:	8a 81       	ldd	r24, Y+2	; 0x02
    a054:	88 23       	and	r24, r24
    a056:	79 f0       	breq	.+30     	; 0xa076 <Fuzzy+0x8c>
    a058:	20 e0       	ldi	r18, 0x00	; 0
    a05a:	30 e0       	ldi	r19, 0x00	; 0
    a05c:	40 e2       	ldi	r20, 0x20	; 32
    a05e:	51 e4       	ldi	r21, 0x41	; 65
    a060:	c7 01       	movw	r24, r14
    a062:	b6 01       	movw	r22, r12
    a064:	3c d2       	rcall	.+1144   	; 0xa4de <__divsf3>
    a066:	20 e0       	ldi	r18, 0x00	; 0
    a068:	30 e0       	ldi	r19, 0x00	; 0
    a06a:	48 ec       	ldi	r20, 0xC8	; 200
    a06c:	52 e4       	ldi	r21, 0x42	; 66
    a06e:	cb d3       	rcall	.+1942   	; 0xa806 <__mulsf3>
    a070:	9e d2       	rcall	.+1340   	; 0xa5ae <__fixsfsi>
    a072:	7b 01       	movw	r14, r22
    a074:	3b c1       	rjmp	.+630    	; 0xa2ec <Fuzzy+0x302>
	else if(comp->Src_Out<=10 && comp->Cooling==1){steps=(comp->Src_Out)/10 * 100 ;}
    a076:	8e a8       	ldd	r8, Y+54	; 0x36
    a078:	9f a8       	ldd	r9, Y+55	; 0x37
    a07a:	a8 ac       	ldd	r10, Y+56	; 0x38
    a07c:	b9 ac       	ldd	r11, Y+57	; 0x39
    a07e:	20 e0       	ldi	r18, 0x00	; 0
    a080:	30 e0       	ldi	r19, 0x00	; 0
    a082:	40 e2       	ldi	r20, 0x20	; 32
    a084:	51 e4       	ldi	r21, 0x41	; 65
    a086:	c5 01       	movw	r24, r10
    a088:	b4 01       	movw	r22, r8
    a08a:	25 d2       	rcall	.+1098   	; 0xa4d6 <__cmpsf2>
    a08c:	18 16       	cp	r1, r24
    a08e:	94 f0       	brlt	.+36     	; 0xa0b4 <Fuzzy+0xca>
    a090:	8b 81       	ldd	r24, Y+3	; 0x03
    a092:	88 23       	and	r24, r24
    a094:	79 f0       	breq	.+30     	; 0xa0b4 <Fuzzy+0xca>
    a096:	20 e0       	ldi	r18, 0x00	; 0
    a098:	30 e0       	ldi	r19, 0x00	; 0
    a09a:	40 e2       	ldi	r20, 0x20	; 32
    a09c:	51 e4       	ldi	r21, 0x41	; 65
    a09e:	c5 01       	movw	r24, r10
    a0a0:	b4 01       	movw	r22, r8
    a0a2:	1d d2       	rcall	.+1082   	; 0xa4de <__divsf3>
    a0a4:	20 e0       	ldi	r18, 0x00	; 0
    a0a6:	30 e0       	ldi	r19, 0x00	; 0
    a0a8:	48 ec       	ldi	r20, 0xC8	; 200
    a0aa:	52 e4       	ldi	r21, 0x42	; 66
    a0ac:	ac d3       	rcall	.+1880   	; 0xa806 <__mulsf3>
    a0ae:	7f d2       	rcall	.+1278   	; 0xa5ae <__fixsfsi>
    a0b0:	7b 01       	movw	r14, r22
    a0b2:	1c c1       	rjmp	.+568    	; 0xa2ec <Fuzzy+0x302>
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps); }//comp->trvCorection;
	else if(comp->Src_In>10 && comp->Src_In<=20 && comp->Heating==1)  {steps = (comp->Src_In-10)/10 * 100 + 100;}
    a0b4:	20 e0       	ldi	r18, 0x00	; 0
    a0b6:	30 e0       	ldi	r19, 0x00	; 0
    a0b8:	40 e2       	ldi	r20, 0x20	; 32
    a0ba:	51 e4       	ldi	r21, 0x41	; 65
    a0bc:	c7 01       	movw	r24, r14
    a0be:	b6 01       	movw	r22, r12
    a0c0:	59 d3       	rcall	.+1714   	; 0xa774 <__gesf2>
    a0c2:	18 16       	cp	r1, r24
    a0c4:	2c f5       	brge	.+74     	; 0xa110 <Fuzzy+0x126>
    a0c6:	20 e0       	ldi	r18, 0x00	; 0
    a0c8:	30 e0       	ldi	r19, 0x00	; 0
    a0ca:	40 ea       	ldi	r20, 0xA0	; 160
    a0cc:	51 e4       	ldi	r21, 0x41	; 65
    a0ce:	c7 01       	movw	r24, r14
    a0d0:	b6 01       	movw	r22, r12
    a0d2:	01 d2       	rcall	.+1026   	; 0xa4d6 <__cmpsf2>
    a0d4:	18 16       	cp	r1, r24
    a0d6:	e4 f0       	brlt	.+56     	; 0xa110 <Fuzzy+0x126>
    a0d8:	8a 81       	ldd	r24, Y+2	; 0x02
    a0da:	88 23       	and	r24, r24
    a0dc:	c9 f0       	breq	.+50     	; 0xa110 <Fuzzy+0x126>
    a0de:	20 e0       	ldi	r18, 0x00	; 0
    a0e0:	30 e0       	ldi	r19, 0x00	; 0
    a0e2:	40 e2       	ldi	r20, 0x20	; 32
    a0e4:	51 e4       	ldi	r21, 0x41	; 65
    a0e6:	c7 01       	movw	r24, r14
    a0e8:	b6 01       	movw	r22, r12
    a0ea:	90 d1       	rcall	.+800    	; 0xa40c <__subsf3>
    a0ec:	20 e0       	ldi	r18, 0x00	; 0
    a0ee:	30 e0       	ldi	r19, 0x00	; 0
    a0f0:	40 e2       	ldi	r20, 0x20	; 32
    a0f2:	51 e4       	ldi	r21, 0x41	; 65
    a0f4:	f4 d1       	rcall	.+1000   	; 0xa4de <__divsf3>
    a0f6:	20 e0       	ldi	r18, 0x00	; 0
    a0f8:	30 e0       	ldi	r19, 0x00	; 0
    a0fa:	48 ec       	ldi	r20, 0xC8	; 200
    a0fc:	52 e4       	ldi	r21, 0x42	; 66
    a0fe:	83 d3       	rcall	.+1798   	; 0xa806 <__mulsf3>
    a100:	20 e0       	ldi	r18, 0x00	; 0
    a102:	30 e0       	ldi	r19, 0x00	; 0
    a104:	48 ec       	ldi	r20, 0xC8	; 200
    a106:	52 e4       	ldi	r21, 0x42	; 66
    a108:	82 d1       	rcall	.+772    	; 0xa40e <__addsf3>
    a10a:	51 d2       	rcall	.+1186   	; 0xa5ae <__fixsfsi>
    a10c:	7b 01       	movw	r14, r22
    a10e:	ee c0       	rjmp	.+476    	; 0xa2ec <Fuzzy+0x302>
	else if(comp->Src_Out>10 && comp->Src_Out<=20 && comp->Cooling==1)  {steps = (comp->Src_Out-10)/10 * 100 + 100;}	
    a110:	20 e0       	ldi	r18, 0x00	; 0
    a112:	30 e0       	ldi	r19, 0x00	; 0
    a114:	40 e2       	ldi	r20, 0x20	; 32
    a116:	51 e4       	ldi	r21, 0x41	; 65
    a118:	c5 01       	movw	r24, r10
    a11a:	b4 01       	movw	r22, r8
    a11c:	2b d3       	rcall	.+1622   	; 0xa774 <__gesf2>
    a11e:	18 16       	cp	r1, r24
    a120:	2c f5       	brge	.+74     	; 0xa16c <Fuzzy+0x182>
    a122:	20 e0       	ldi	r18, 0x00	; 0
    a124:	30 e0       	ldi	r19, 0x00	; 0
    a126:	40 ea       	ldi	r20, 0xA0	; 160
    a128:	51 e4       	ldi	r21, 0x41	; 65
    a12a:	c5 01       	movw	r24, r10
    a12c:	b4 01       	movw	r22, r8
    a12e:	d3 d1       	rcall	.+934    	; 0xa4d6 <__cmpsf2>
    a130:	18 16       	cp	r1, r24
    a132:	e4 f0       	brlt	.+56     	; 0xa16c <Fuzzy+0x182>
    a134:	8b 81       	ldd	r24, Y+3	; 0x03
    a136:	88 23       	and	r24, r24
    a138:	c9 f0       	breq	.+50     	; 0xa16c <Fuzzy+0x182>
    a13a:	20 e0       	ldi	r18, 0x00	; 0
    a13c:	30 e0       	ldi	r19, 0x00	; 0
    a13e:	40 e2       	ldi	r20, 0x20	; 32
    a140:	51 e4       	ldi	r21, 0x41	; 65
    a142:	c5 01       	movw	r24, r10
    a144:	b4 01       	movw	r22, r8
    a146:	62 d1       	rcall	.+708    	; 0xa40c <__subsf3>
    a148:	20 e0       	ldi	r18, 0x00	; 0
    a14a:	30 e0       	ldi	r19, 0x00	; 0
    a14c:	40 e2       	ldi	r20, 0x20	; 32
    a14e:	51 e4       	ldi	r21, 0x41	; 65
    a150:	c6 d1       	rcall	.+908    	; 0xa4de <__divsf3>
    a152:	20 e0       	ldi	r18, 0x00	; 0
    a154:	30 e0       	ldi	r19, 0x00	; 0
    a156:	48 ec       	ldi	r20, 0xC8	; 200
    a158:	52 e4       	ldi	r21, 0x42	; 66
    a15a:	55 d3       	rcall	.+1706   	; 0xa806 <__mulsf3>
    a15c:	20 e0       	ldi	r18, 0x00	; 0
    a15e:	30 e0       	ldi	r19, 0x00	; 0
    a160:	48 ec       	ldi	r20, 0xC8	; 200
    a162:	52 e4       	ldi	r21, 0x42	; 66
    a164:	54 d1       	rcall	.+680    	; 0xa40e <__addsf3>
    a166:	23 d2       	rcall	.+1094   	; 0xa5ae <__fixsfsi>
    a168:	7b 01       	movw	r14, r22
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps); }//;
	else if(comp->Src_In >20 && comp->Src_In<=30 && comp->Heating==1) {steps = (comp->Src_In-20)/10 * 100 + 150;}
    a16a:	c0 c0       	rjmp	.+384    	; 0xa2ec <Fuzzy+0x302>
    a16c:	20 e0       	ldi	r18, 0x00	; 0
    a16e:	30 e0       	ldi	r19, 0x00	; 0
    a170:	40 ea       	ldi	r20, 0xA0	; 160
    a172:	51 e4       	ldi	r21, 0x41	; 65
    a174:	c7 01       	movw	r24, r14
    a176:	b6 01       	movw	r22, r12
    a178:	fd d2       	rcall	.+1530   	; 0xa774 <__gesf2>
    a17a:	18 16       	cp	r1, r24
    a17c:	2c f5       	brge	.+74     	; 0xa1c8 <Fuzzy+0x1de>
    a17e:	20 e0       	ldi	r18, 0x00	; 0
    a180:	30 e0       	ldi	r19, 0x00	; 0
    a182:	40 ef       	ldi	r20, 0xF0	; 240
    a184:	51 e4       	ldi	r21, 0x41	; 65
    a186:	c7 01       	movw	r24, r14
    a188:	b6 01       	movw	r22, r12
    a18a:	a5 d1       	rcall	.+842    	; 0xa4d6 <__cmpsf2>
    a18c:	18 16       	cp	r1, r24
    a18e:	e4 f0       	brlt	.+56     	; 0xa1c8 <Fuzzy+0x1de>
    a190:	8a 81       	ldd	r24, Y+2	; 0x02
    a192:	88 23       	and	r24, r24
    a194:	c9 f0       	breq	.+50     	; 0xa1c8 <Fuzzy+0x1de>
    a196:	20 e0       	ldi	r18, 0x00	; 0
    a198:	30 e0       	ldi	r19, 0x00	; 0
    a19a:	40 ea       	ldi	r20, 0xA0	; 160
    a19c:	51 e4       	ldi	r21, 0x41	; 65
    a19e:	c7 01       	movw	r24, r14
    a1a0:	b6 01       	movw	r22, r12
    a1a2:	34 d1       	rcall	.+616    	; 0xa40c <__subsf3>
    a1a4:	20 e0       	ldi	r18, 0x00	; 0
    a1a6:	30 e0       	ldi	r19, 0x00	; 0
    a1a8:	40 e2       	ldi	r20, 0x20	; 32
    a1aa:	51 e4       	ldi	r21, 0x41	; 65
    a1ac:	98 d1       	rcall	.+816    	; 0xa4de <__divsf3>
    a1ae:	20 e0       	ldi	r18, 0x00	; 0
    a1b0:	30 e0       	ldi	r19, 0x00	; 0
    a1b2:	48 ec       	ldi	r20, 0xC8	; 200
    a1b4:	52 e4       	ldi	r21, 0x42	; 66
    a1b6:	27 d3       	rcall	.+1614   	; 0xa806 <__mulsf3>
    a1b8:	20 e0       	ldi	r18, 0x00	; 0
    a1ba:	30 e0       	ldi	r19, 0x00	; 0
    a1bc:	46 e1       	ldi	r20, 0x16	; 22
    a1be:	53 e4       	ldi	r21, 0x43	; 67
    a1c0:	26 d1       	rcall	.+588    	; 0xa40e <__addsf3>
    a1c2:	f5 d1       	rcall	.+1002   	; 0xa5ae <__fixsfsi>
    a1c4:	7b 01       	movw	r14, r22
	else if(comp->Src_Out >20 && comp->Src_Out<=30 && comp->Cooling==1) {steps = (comp->Src_Out-20)/10 * 100 + 150;}	
    a1c6:	92 c0       	rjmp	.+292    	; 0xa2ec <Fuzzy+0x302>
    a1c8:	20 e0       	ldi	r18, 0x00	; 0
    a1ca:	30 e0       	ldi	r19, 0x00	; 0
    a1cc:	40 ea       	ldi	r20, 0xA0	; 160
    a1ce:	51 e4       	ldi	r21, 0x41	; 65
    a1d0:	c5 01       	movw	r24, r10
    a1d2:	b4 01       	movw	r22, r8
    a1d4:	cf d2       	rcall	.+1438   	; 0xa774 <__gesf2>
    a1d6:	18 16       	cp	r1, r24
    a1d8:	2c f5       	brge	.+74     	; 0xa224 <Fuzzy+0x23a>
    a1da:	20 e0       	ldi	r18, 0x00	; 0
    a1dc:	30 e0       	ldi	r19, 0x00	; 0
    a1de:	40 ef       	ldi	r20, 0xF0	; 240
    a1e0:	51 e4       	ldi	r21, 0x41	; 65
    a1e2:	c5 01       	movw	r24, r10
    a1e4:	b4 01       	movw	r22, r8
    a1e6:	77 d1       	rcall	.+750    	; 0xa4d6 <__cmpsf2>
    a1e8:	18 16       	cp	r1, r24
    a1ea:	e4 f0       	brlt	.+56     	; 0xa224 <Fuzzy+0x23a>
    a1ec:	8b 81       	ldd	r24, Y+3	; 0x03
    a1ee:	88 23       	and	r24, r24
    a1f0:	c9 f0       	breq	.+50     	; 0xa224 <Fuzzy+0x23a>
    a1f2:	20 e0       	ldi	r18, 0x00	; 0
    a1f4:	30 e0       	ldi	r19, 0x00	; 0
    a1f6:	40 ea       	ldi	r20, 0xA0	; 160
    a1f8:	51 e4       	ldi	r21, 0x41	; 65
    a1fa:	c5 01       	movw	r24, r10
    a1fc:	b4 01       	movw	r22, r8
    a1fe:	06 d1       	rcall	.+524    	; 0xa40c <__subsf3>
    a200:	20 e0       	ldi	r18, 0x00	; 0
    a202:	30 e0       	ldi	r19, 0x00	; 0
    a204:	40 e2       	ldi	r20, 0x20	; 32
    a206:	51 e4       	ldi	r21, 0x41	; 65
    a208:	6a d1       	rcall	.+724    	; 0xa4de <__divsf3>
    a20a:	20 e0       	ldi	r18, 0x00	; 0
    a20c:	30 e0       	ldi	r19, 0x00	; 0
    a20e:	48 ec       	ldi	r20, 0xC8	; 200
    a210:	52 e4       	ldi	r21, 0x42	; 66
    a212:	f9 d2       	rcall	.+1522   	; 0xa806 <__mulsf3>
    a214:	20 e0       	ldi	r18, 0x00	; 0
    a216:	30 e0       	ldi	r19, 0x00	; 0
    a218:	46 e1       	ldi	r20, 0x16	; 22
    a21a:	53 e4       	ldi	r21, 0x43	; 67
    a21c:	f8 d0       	rcall	.+496    	; 0xa40e <__addsf3>
    a21e:	c7 d1       	rcall	.+910    	; 0xa5ae <__fixsfsi>
		
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps);}// comp->trvCorection;
	else if(comp->Src_In>30 && comp->Src_In<=40 && comp->Heating==1)  {steps = (comp->Src_In-30)/10 * 100 + 200;}
    a220:	7b 01       	movw	r14, r22
    a222:	64 c0       	rjmp	.+200    	; 0xa2ec <Fuzzy+0x302>
    a224:	20 e0       	ldi	r18, 0x00	; 0
    a226:	30 e0       	ldi	r19, 0x00	; 0
    a228:	40 ef       	ldi	r20, 0xF0	; 240
    a22a:	51 e4       	ldi	r21, 0x41	; 65
    a22c:	c7 01       	movw	r24, r14
    a22e:	b6 01       	movw	r22, r12
    a230:	a1 d2       	rcall	.+1346   	; 0xa774 <__gesf2>
    a232:	18 16       	cp	r1, r24
    a234:	2c f5       	brge	.+74     	; 0xa280 <Fuzzy+0x296>
    a236:	20 e0       	ldi	r18, 0x00	; 0
    a238:	30 e0       	ldi	r19, 0x00	; 0
    a23a:	40 e2       	ldi	r20, 0x20	; 32
    a23c:	52 e4       	ldi	r21, 0x42	; 66
    a23e:	c7 01       	movw	r24, r14
    a240:	b6 01       	movw	r22, r12
    a242:	49 d1       	rcall	.+658    	; 0xa4d6 <__cmpsf2>
    a244:	18 16       	cp	r1, r24
    a246:	e4 f0       	brlt	.+56     	; 0xa280 <Fuzzy+0x296>
    a248:	8a 81       	ldd	r24, Y+2	; 0x02
    a24a:	88 23       	and	r24, r24
    a24c:	c9 f0       	breq	.+50     	; 0xa280 <Fuzzy+0x296>
    a24e:	20 e0       	ldi	r18, 0x00	; 0
    a250:	30 e0       	ldi	r19, 0x00	; 0
    a252:	40 ef       	ldi	r20, 0xF0	; 240
    a254:	51 e4       	ldi	r21, 0x41	; 65
    a256:	c7 01       	movw	r24, r14
    a258:	b6 01       	movw	r22, r12
    a25a:	d8 d0       	rcall	.+432    	; 0xa40c <__subsf3>
    a25c:	20 e0       	ldi	r18, 0x00	; 0
    a25e:	30 e0       	ldi	r19, 0x00	; 0
    a260:	40 e2       	ldi	r20, 0x20	; 32
    a262:	51 e4       	ldi	r21, 0x41	; 65
    a264:	3c d1       	rcall	.+632    	; 0xa4de <__divsf3>
    a266:	20 e0       	ldi	r18, 0x00	; 0
    a268:	30 e0       	ldi	r19, 0x00	; 0
    a26a:	48 ec       	ldi	r20, 0xC8	; 200
    a26c:	52 e4       	ldi	r21, 0x42	; 66
    a26e:	cb d2       	rcall	.+1430   	; 0xa806 <__mulsf3>
    a270:	20 e0       	ldi	r18, 0x00	; 0
    a272:	30 e0       	ldi	r19, 0x00	; 0
    a274:	48 e4       	ldi	r20, 0x48	; 72
    a276:	53 e4       	ldi	r21, 0x43	; 67
    a278:	ca d0       	rcall	.+404    	; 0xa40e <__addsf3>
	else if(comp->Src_Out>30 && comp->Src_Out<=40 && comp->Cooling==1)  {steps = (comp->Src_Out-30)/10 * 100 + 200;}	
    a27a:	99 d1       	rcall	.+818    	; 0xa5ae <__fixsfsi>
    a27c:	7b 01       	movw	r14, r22
    a27e:	36 c0       	rjmp	.+108    	; 0xa2ec <Fuzzy+0x302>
    a280:	20 e0       	ldi	r18, 0x00	; 0
    a282:	30 e0       	ldi	r19, 0x00	; 0
    a284:	40 ef       	ldi	r20, 0xF0	; 240
    a286:	51 e4       	ldi	r21, 0x41	; 65
    a288:	c5 01       	movw	r24, r10
    a28a:	b4 01       	movw	r22, r8
    a28c:	73 d2       	rcall	.+1254   	; 0xa774 <__gesf2>
    a28e:	18 16       	cp	r1, r24
    a290:	2c f5       	brge	.+74     	; 0xa2dc <Fuzzy+0x2f2>
    a292:	20 e0       	ldi	r18, 0x00	; 0
    a294:	30 e0       	ldi	r19, 0x00	; 0
    a296:	40 e2       	ldi	r20, 0x20	; 32
    a298:	52 e4       	ldi	r21, 0x42	; 66
    a29a:	c5 01       	movw	r24, r10
    a29c:	b4 01       	movw	r22, r8
    a29e:	1b d1       	rcall	.+566    	; 0xa4d6 <__cmpsf2>
    a2a0:	18 16       	cp	r1, r24
    a2a2:	fc f0       	brlt	.+62     	; 0xa2e2 <Fuzzy+0x2f8>
    a2a4:	8b 81       	ldd	r24, Y+3	; 0x03
    a2a6:	88 23       	and	r24, r24
    a2a8:	f9 f0       	breq	.+62     	; 0xa2e8 <Fuzzy+0x2fe>
    a2aa:	20 e0       	ldi	r18, 0x00	; 0
    a2ac:	30 e0       	ldi	r19, 0x00	; 0
    a2ae:	40 ef       	ldi	r20, 0xF0	; 240
    a2b0:	51 e4       	ldi	r21, 0x41	; 65
    a2b2:	c5 01       	movw	r24, r10
    a2b4:	b4 01       	movw	r22, r8
    a2b6:	aa d0       	rcall	.+340    	; 0xa40c <__subsf3>
    a2b8:	20 e0       	ldi	r18, 0x00	; 0
    a2ba:	30 e0       	ldi	r19, 0x00	; 0
    a2bc:	40 e2       	ldi	r20, 0x20	; 32
    a2be:	51 e4       	ldi	r21, 0x41	; 65
    a2c0:	0e d1       	rcall	.+540    	; 0xa4de <__divsf3>
    a2c2:	20 e0       	ldi	r18, 0x00	; 0
    a2c4:	30 e0       	ldi	r19, 0x00	; 0
    a2c6:	48 ec       	ldi	r20, 0xC8	; 200
    a2c8:	52 e4       	ldi	r21, 0x42	; 66
    a2ca:	9d d2       	rcall	.+1338   	; 0xa806 <__mulsf3>
    a2cc:	20 e0       	ldi	r18, 0x00	; 0
    a2ce:	30 e0       	ldi	r19, 0x00	; 0
    a2d0:	48 e4       	ldi	r20, 0x48	; 72
    a2d2:	53 e4       	ldi	r21, 0x43	; 67
    a2d4:	9c d0       	rcall	.+312    	; 0xa40e <__addsf3>
    a2d6:	6b d1       	rcall	.+726    	; 0xa5ae <__fixsfsi>
    a2d8:	7b 01       	movw	r14, r22
    a2da:	08 c0       	rjmp	.+16     	; 0xa2ec <Fuzzy+0x302>
    a2dc:	e1 2c       	mov	r14, r1
    a2de:	f1 2c       	mov	r15, r1
    a2e0:	05 c0       	rjmp	.+10     	; 0xa2ec <Fuzzy+0x302>
	}
}
//----------------------------------------------------------------------------------------------------------
int Fuzzy(xCompressor *comp,int corection)
{
	int steps=0;
    a2e2:	e1 2c       	mov	r14, r1
    a2e4:	f1 2c       	mov	r15, r1
    a2e6:	02 c0       	rjmp	.+4      	; 0xa2ec <Fuzzy+0x302>
    a2e8:	e1 2c       	mov	r14, r1
    a2ea:	f1 2c       	mov	r15, r1
    a2ec:	0e 19       	sub	r16, r14
    a2ee:	1f 09       	sbc	r17, r15
    a2f0:	fe 01       	movw	r30, r28
		 //if(old_corection_2!=corection && comp->Index==2){comp->trvCorection=corection-steps;old_corection_2=corection;}
	//xSerialxPrintf(&xSerial3Port,"TRVcorection_%d = %d \r\n",comp->Index, corection);
			
	
	
	comp->trvCorection=corection-steps;
    a2f2:	e6 59       	subi	r30, 0x96	; 150
    a2f4:	ff 4f       	sbci	r31, 0xFF	; 255
    a2f6:	11 83       	std	Z+1, r17	; 0x01
    a2f8:	00 83       	st	Z, r16
    a2fa:	38 96       	adiw	r30, 0x08	; 8
    a2fc:	80 81       	ld	r24, Z
    a2fe:	91 81       	ldd	r25, Z+1	; 0x01
	if(comp->Index==2)xSerialxPrintf(&xSerial3Port,"TRVcorection_2 = %d \r\n", comp->trvCorection);
    a300:	02 97       	sbiw	r24, 0x02	; 2
    a302:	91 f4       	brne	.+36     	; 0xa328 <Fuzzy+0x33e>
    a304:	1f 93       	push	r17
    a306:	0f 93       	push	r16
    a308:	88 eb       	ldi	r24, 0xB8	; 184
    a30a:	96 e0       	ldi	r25, 0x06	; 6
    a30c:	9f 93       	push	r25
    a30e:	8f 93       	push	r24
    a310:	82 e3       	ldi	r24, 0x32	; 50
    a312:	98 e0       	ldi	r25, 0x08	; 8
    a314:	9f 93       	push	r25
    a316:	8f 93       	push	r24
    a318:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a31c:	0f 90       	pop	r0
    a31e:	0f 90       	pop	r0
    a320:	0f 90       	pop	r0
    a322:	0f 90       	pop	r0
    a324:	0f 90       	pop	r0
    a326:	0f 90       	pop	r0
    a328:	fe 01       	movw	r30, r28
    a32a:	ee 58       	subi	r30, 0x8E	; 142
    a32c:	ff 4f       	sbci	r31, 0xFF	; 255
	if(comp->Index==1)xSerialxPrintf(&xSerial3Port,"TRVcorection_1 = %d \r\n", comp->trvCorection);
    a32e:	80 81       	ld	r24, Z
    a330:	91 81       	ldd	r25, Z+1	; 0x01
    a332:	01 97       	sbiw	r24, 0x01	; 1
    a334:	a9 f4       	brne	.+42     	; 0xa360 <Fuzzy+0x376>
    a336:	38 97       	sbiw	r30, 0x08	; 8
    a338:	81 81       	ldd	r24, Z+1	; 0x01
    a33a:	8f 93       	push	r24
    a33c:	80 81       	ld	r24, Z
    a33e:	8f 93       	push	r24
    a340:	8f ec       	ldi	r24, 0xCF	; 207
    a342:	96 e0       	ldi	r25, 0x06	; 6
    a344:	9f 93       	push	r25
    a346:	8f 93       	push	r24
    a348:	82 e3       	ldi	r24, 0x32	; 50
    a34a:	98 e0       	ldi	r25, 0x08	; 8
    a34c:	9f 93       	push	r25
    a34e:	8f 93       	push	r24
    a350:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a354:	0f 90       	pop	r0
    a356:	0f 90       	pop	r0
    a358:	0f 90       	pop	r0
    a35a:	0f 90       	pop	r0
    a35c:	0f 90       	pop	r0
    a35e:	0f 90       	pop	r0
    a360:	fe 01       	movw	r30, r28
    a362:	e6 59       	subi	r30, 0x96	; 150
    a364:	ff 4f       	sbci	r31, 0xFF	; 255
	steps=steps+comp->trvCorection;
    a366:	60 81       	ld	r22, Z
    a368:	71 81       	ldd	r23, Z+1	; 0x01
    a36a:	e6 0e       	add	r14, r22
    a36c:	f7 1e       	adc	r15, r23
    a36e:	8e 01       	movw	r16, r28
    a370:	02 59       	subi	r16, 0x92	; 146
    a372:	1f 4f       	sbci	r17, 0xFF	; 255
	comp->Steps=comp->Trv_position;		
    a374:	f8 01       	movw	r30, r16
    a376:	80 81       	ld	r24, Z
    a378:	91 81       	ldd	r25, Z+1	; 0x01
    a37a:	c4 59       	subi	r28, 0x94	; 148
    a37c:	df 4f       	sbci	r29, 0xFF	; 255
    a37e:	88 83       	st	Y, r24
    a380:	99 83       	std	Y+1, r25	; 0x01
    a382:	9f 93       	push	r25
    a384:	8f 93       	push	r24
    a386:	86 ee       	ldi	r24, 0xE6	; 230
	//comp->Steps=steps - comp->Trv_position;
xSerialxPrintf(&xSerial3Port,"Steps = %d \r\n", comp->Steps);
    a388:	96 e0       	ldi	r25, 0x06	; 6
    a38a:	9f 93       	push	r25
    a38c:	8f 93       	push	r24
    a38e:	c2 e3       	ldi	r28, 0x32	; 50
    a390:	d8 e0       	ldi	r29, 0x08	; 8
    a392:	df 93       	push	r29
    a394:	cf 93       	push	r28
    a396:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a39a:	f8 01       	movw	r30, r16
    a39c:	81 81       	ldd	r24, Z+1	; 0x01
    a39e:	8f 93       	push	r24
xSerialxPrintf(&xSerial3Port,"Trv_position = %d \r\n", comp->Trv_position);	
    a3a0:	80 81       	ld	r24, Z
    a3a2:	8f 93       	push	r24
    a3a4:	84 ef       	ldi	r24, 0xF4	; 244
    a3a6:	96 e0       	ldi	r25, 0x06	; 6
    a3a8:	9f 93       	push	r25
    a3aa:	8f 93       	push	r24
    a3ac:	df 93       	push	r29
    a3ae:	cf 93       	push	r28
    a3b0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a3b4:	f8 01       	movw	r30, r16
    a3b6:	80 81       	ld	r24, Z
    a3b8:	91 81       	ldd	r25, Z+1	; 0x01
return (steps - comp->Trv_position);//comp->Steps;
    a3ba:	2d b7       	in	r18, 0x3d	; 61
    a3bc:	3e b7       	in	r19, 0x3e	; 62
    a3be:	24 5f       	subi	r18, 0xF4	; 244
    a3c0:	3f 4f       	sbci	r19, 0xFF	; 255
    a3c2:	0f b6       	in	r0, 0x3f	; 63
    a3c4:	f8 94       	cli
    a3c6:	3e bf       	out	0x3e, r19	; 62
    a3c8:	0f be       	out	0x3f, r0	; 63
    a3ca:	2d bf       	out	0x3d, r18	; 61
    a3cc:	f7 01       	movw	r30, r14
    a3ce:	e8 1b       	sub	r30, r24
    a3d0:	f9 0b       	sbc	r31, r25
}
    a3d2:	cf 01       	movw	r24, r30
    a3d4:	df 91       	pop	r29
    a3d6:	cf 91       	pop	r28
    a3d8:	1f 91       	pop	r17
    a3da:	0f 91       	pop	r16
    a3dc:	ff 90       	pop	r15
    a3de:	ef 90       	pop	r14
    a3e0:	df 90       	pop	r13
    a3e2:	cf 90       	pop	r12
    a3e4:	bf 90       	pop	r11
    a3e6:	af 90       	pop	r10
    a3e8:	9f 90       	pop	r9
    a3ea:	8f 90       	pop	r8
    a3ec:	08 95       	ret

0000a3ee <calibration>:
    a3ee:	21 e0       	ldi	r18, 0x01	; 1
    a3f0:	fc 01       	movw	r30, r24
    a3f2:	27 83       	std	Z+7, r18	; 0x07
////////////////////////////////////////////////////////////////////////////////////////////////////////
void calibration(xCompressor *comp)
{
	comp->calibrate=true;
	comp->Steps=-240;
    a3f4:	e4 59       	subi	r30, 0x94	; 148
    a3f6:	ff 4f       	sbci	r31, 0xFF	; 255
    a3f8:	20 e1       	ldi	r18, 0x10	; 16
    a3fa:	3f ef       	ldi	r19, 0xFF	; 255
    a3fc:	31 83       	std	Z+1, r19	; 0x01
    a3fe:	20 83       	st	Z, r18
	comp->Trv_position=240;
    a400:	32 96       	adiw	r30, 0x02	; 2
    a402:	20 ef       	ldi	r18, 0xF0	; 240
    a404:	30 e0       	ldi	r19, 0x00	; 0
    a406:	31 83       	std	Z+1, r19	; 0x01
    a408:	20 83       	st	Z, r18
    a40a:	08 95       	ret

0000a40c <__subsf3>:
    a40c:	50 58       	subi	r21, 0x80	; 128

0000a40e <__addsf3>:
    a40e:	bb 27       	eor	r27, r27
    a410:	aa 27       	eor	r26, r26
    a412:	0e d0       	rcall	.+28     	; 0xa430 <__addsf3x>
    a414:	75 c1       	rjmp	.+746    	; 0xa700 <__fp_round>
    a416:	66 d1       	rcall	.+716    	; 0xa6e4 <__fp_pscA>
    a418:	30 f0       	brcs	.+12     	; 0xa426 <__addsf3+0x18>
    a41a:	6b d1       	rcall	.+726    	; 0xa6f2 <__fp_pscB>
    a41c:	20 f0       	brcs	.+8      	; 0xa426 <__addsf3+0x18>
    a41e:	31 f4       	brne	.+12     	; 0xa42c <__addsf3+0x1e>
    a420:	9f 3f       	cpi	r25, 0xFF	; 255
    a422:	11 f4       	brne	.+4      	; 0xa428 <__addsf3+0x1a>
    a424:	1e f4       	brtc	.+6      	; 0xa42c <__addsf3+0x1e>
    a426:	5b c1       	rjmp	.+694    	; 0xa6de <__fp_nan>
    a428:	0e f4       	brtc	.+2      	; 0xa42c <__addsf3+0x1e>
    a42a:	e0 95       	com	r30
    a42c:	e7 fb       	bst	r30, 7
    a42e:	51 c1       	rjmp	.+674    	; 0xa6d2 <__fp_inf>

0000a430 <__addsf3x>:
    a430:	e9 2f       	mov	r30, r25
    a432:	77 d1       	rcall	.+750    	; 0xa722 <__fp_split3>
    a434:	80 f3       	brcs	.-32     	; 0xa416 <__addsf3+0x8>
    a436:	ba 17       	cp	r27, r26
    a438:	62 07       	cpc	r22, r18
    a43a:	73 07       	cpc	r23, r19
    a43c:	84 07       	cpc	r24, r20
    a43e:	95 07       	cpc	r25, r21
    a440:	18 f0       	brcs	.+6      	; 0xa448 <__addsf3x+0x18>
    a442:	71 f4       	brne	.+28     	; 0xa460 <__addsf3x+0x30>
    a444:	9e f5       	brtc	.+102    	; 0xa4ac <__addsf3x+0x7c>
    a446:	8f c1       	rjmp	.+798    	; 0xa766 <__fp_zero>
    a448:	0e f4       	brtc	.+2      	; 0xa44c <__addsf3x+0x1c>
    a44a:	e0 95       	com	r30
    a44c:	0b 2e       	mov	r0, r27
    a44e:	ba 2f       	mov	r27, r26
    a450:	a0 2d       	mov	r26, r0
    a452:	0b 01       	movw	r0, r22
    a454:	b9 01       	movw	r22, r18
    a456:	90 01       	movw	r18, r0
    a458:	0c 01       	movw	r0, r24
    a45a:	ca 01       	movw	r24, r20
    a45c:	a0 01       	movw	r20, r0
    a45e:	11 24       	eor	r1, r1
    a460:	ff 27       	eor	r31, r31
    a462:	59 1b       	sub	r21, r25
    a464:	99 f0       	breq	.+38     	; 0xa48c <__addsf3x+0x5c>
    a466:	59 3f       	cpi	r21, 0xF9	; 249
    a468:	50 f4       	brcc	.+20     	; 0xa47e <__addsf3x+0x4e>
    a46a:	50 3e       	cpi	r21, 0xE0	; 224
    a46c:	68 f1       	brcs	.+90     	; 0xa4c8 <__addsf3x+0x98>
    a46e:	1a 16       	cp	r1, r26
    a470:	f0 40       	sbci	r31, 0x00	; 0
    a472:	a2 2f       	mov	r26, r18
    a474:	23 2f       	mov	r18, r19
    a476:	34 2f       	mov	r19, r20
    a478:	44 27       	eor	r20, r20
    a47a:	58 5f       	subi	r21, 0xF8	; 248
    a47c:	f3 cf       	rjmp	.-26     	; 0xa464 <__addsf3x+0x34>
    a47e:	46 95       	lsr	r20
    a480:	37 95       	ror	r19
    a482:	27 95       	ror	r18
    a484:	a7 95       	ror	r26
    a486:	f0 40       	sbci	r31, 0x00	; 0
    a488:	53 95       	inc	r21
    a48a:	c9 f7       	brne	.-14     	; 0xa47e <__addsf3x+0x4e>
    a48c:	7e f4       	brtc	.+30     	; 0xa4ac <__addsf3x+0x7c>
    a48e:	1f 16       	cp	r1, r31
    a490:	ba 0b       	sbc	r27, r26
    a492:	62 0b       	sbc	r22, r18
    a494:	73 0b       	sbc	r23, r19
    a496:	84 0b       	sbc	r24, r20
    a498:	ba f0       	brmi	.+46     	; 0xa4c8 <__addsf3x+0x98>
    a49a:	91 50       	subi	r25, 0x01	; 1
    a49c:	a1 f0       	breq	.+40     	; 0xa4c6 <__addsf3x+0x96>
    a49e:	ff 0f       	add	r31, r31
    a4a0:	bb 1f       	adc	r27, r27
    a4a2:	66 1f       	adc	r22, r22
    a4a4:	77 1f       	adc	r23, r23
    a4a6:	88 1f       	adc	r24, r24
    a4a8:	c2 f7       	brpl	.-16     	; 0xa49a <__addsf3x+0x6a>
    a4aa:	0e c0       	rjmp	.+28     	; 0xa4c8 <__addsf3x+0x98>
    a4ac:	ba 0f       	add	r27, r26
    a4ae:	62 1f       	adc	r22, r18
    a4b0:	73 1f       	adc	r23, r19
    a4b2:	84 1f       	adc	r24, r20
    a4b4:	48 f4       	brcc	.+18     	; 0xa4c8 <__addsf3x+0x98>
    a4b6:	87 95       	ror	r24
    a4b8:	77 95       	ror	r23
    a4ba:	67 95       	ror	r22
    a4bc:	b7 95       	ror	r27
    a4be:	f7 95       	ror	r31
    a4c0:	9e 3f       	cpi	r25, 0xFE	; 254
    a4c2:	08 f0       	brcs	.+2      	; 0xa4c6 <__addsf3x+0x96>
    a4c4:	b3 cf       	rjmp	.-154    	; 0xa42c <__addsf3+0x1e>
    a4c6:	93 95       	inc	r25
    a4c8:	88 0f       	add	r24, r24
    a4ca:	08 f0       	brcs	.+2      	; 0xa4ce <__addsf3x+0x9e>
    a4cc:	99 27       	eor	r25, r25
    a4ce:	ee 0f       	add	r30, r30
    a4d0:	97 95       	ror	r25
    a4d2:	87 95       	ror	r24
    a4d4:	08 95       	ret

0000a4d6 <__cmpsf2>:
    a4d6:	d9 d0       	rcall	.+434    	; 0xa68a <__fp_cmp>
    a4d8:	08 f4       	brcc	.+2      	; 0xa4dc <__cmpsf2+0x6>
    a4da:	81 e0       	ldi	r24, 0x01	; 1
    a4dc:	08 95       	ret

0000a4de <__divsf3>:
    a4de:	0c d0       	rcall	.+24     	; 0xa4f8 <__divsf3x>
    a4e0:	0f c1       	rjmp	.+542    	; 0xa700 <__fp_round>
    a4e2:	07 d1       	rcall	.+526    	; 0xa6f2 <__fp_pscB>
    a4e4:	40 f0       	brcs	.+16     	; 0xa4f6 <__divsf3+0x18>
    a4e6:	fe d0       	rcall	.+508    	; 0xa6e4 <__fp_pscA>
    a4e8:	30 f0       	brcs	.+12     	; 0xa4f6 <__divsf3+0x18>
    a4ea:	21 f4       	brne	.+8      	; 0xa4f4 <__divsf3+0x16>
    a4ec:	5f 3f       	cpi	r21, 0xFF	; 255
    a4ee:	19 f0       	breq	.+6      	; 0xa4f6 <__divsf3+0x18>
    a4f0:	f0 c0       	rjmp	.+480    	; 0xa6d2 <__fp_inf>
    a4f2:	51 11       	cpse	r21, r1
    a4f4:	39 c1       	rjmp	.+626    	; 0xa768 <__fp_szero>
    a4f6:	f3 c0       	rjmp	.+486    	; 0xa6de <__fp_nan>

0000a4f8 <__divsf3x>:
    a4f8:	14 d1       	rcall	.+552    	; 0xa722 <__fp_split3>
    a4fa:	98 f3       	brcs	.-26     	; 0xa4e2 <__divsf3+0x4>

0000a4fc <__divsf3_pse>:
    a4fc:	99 23       	and	r25, r25
    a4fe:	c9 f3       	breq	.-14     	; 0xa4f2 <__divsf3+0x14>
    a500:	55 23       	and	r21, r21
    a502:	b1 f3       	breq	.-20     	; 0xa4f0 <__divsf3+0x12>
    a504:	95 1b       	sub	r25, r21
    a506:	55 0b       	sbc	r21, r21
    a508:	bb 27       	eor	r27, r27
    a50a:	aa 27       	eor	r26, r26
    a50c:	62 17       	cp	r22, r18
    a50e:	73 07       	cpc	r23, r19
    a510:	84 07       	cpc	r24, r20
    a512:	38 f0       	brcs	.+14     	; 0xa522 <__divsf3_pse+0x26>
    a514:	9f 5f       	subi	r25, 0xFF	; 255
    a516:	5f 4f       	sbci	r21, 0xFF	; 255
    a518:	22 0f       	add	r18, r18
    a51a:	33 1f       	adc	r19, r19
    a51c:	44 1f       	adc	r20, r20
    a51e:	aa 1f       	adc	r26, r26
    a520:	a9 f3       	breq	.-22     	; 0xa50c <__divsf3_pse+0x10>
    a522:	33 d0       	rcall	.+102    	; 0xa58a <__divsf3_pse+0x8e>
    a524:	0e 2e       	mov	r0, r30
    a526:	3a f0       	brmi	.+14     	; 0xa536 <__divsf3_pse+0x3a>
    a528:	e0 e8       	ldi	r30, 0x80	; 128
    a52a:	30 d0       	rcall	.+96     	; 0xa58c <__divsf3_pse+0x90>
    a52c:	91 50       	subi	r25, 0x01	; 1
    a52e:	50 40       	sbci	r21, 0x00	; 0
    a530:	e6 95       	lsr	r30
    a532:	00 1c       	adc	r0, r0
    a534:	ca f7       	brpl	.-14     	; 0xa528 <__divsf3_pse+0x2c>
    a536:	29 d0       	rcall	.+82     	; 0xa58a <__divsf3_pse+0x8e>
    a538:	fe 2f       	mov	r31, r30
    a53a:	27 d0       	rcall	.+78     	; 0xa58a <__divsf3_pse+0x8e>
    a53c:	66 0f       	add	r22, r22
    a53e:	77 1f       	adc	r23, r23
    a540:	88 1f       	adc	r24, r24
    a542:	bb 1f       	adc	r27, r27
    a544:	26 17       	cp	r18, r22
    a546:	37 07       	cpc	r19, r23
    a548:	48 07       	cpc	r20, r24
    a54a:	ab 07       	cpc	r26, r27
    a54c:	b0 e8       	ldi	r27, 0x80	; 128
    a54e:	09 f0       	breq	.+2      	; 0xa552 <__divsf3_pse+0x56>
    a550:	bb 0b       	sbc	r27, r27
    a552:	80 2d       	mov	r24, r0
    a554:	bf 01       	movw	r22, r30
    a556:	ff 27       	eor	r31, r31
    a558:	93 58       	subi	r25, 0x83	; 131
    a55a:	5f 4f       	sbci	r21, 0xFF	; 255
    a55c:	2a f0       	brmi	.+10     	; 0xa568 <__divsf3_pse+0x6c>
    a55e:	9e 3f       	cpi	r25, 0xFE	; 254
    a560:	51 05       	cpc	r21, r1
    a562:	68 f0       	brcs	.+26     	; 0xa57e <__divsf3_pse+0x82>
    a564:	b6 c0       	rjmp	.+364    	; 0xa6d2 <__fp_inf>
    a566:	00 c1       	rjmp	.+512    	; 0xa768 <__fp_szero>
    a568:	5f 3f       	cpi	r21, 0xFF	; 255
    a56a:	ec f3       	brlt	.-6      	; 0xa566 <__divsf3_pse+0x6a>
    a56c:	98 3e       	cpi	r25, 0xE8	; 232
    a56e:	dc f3       	brlt	.-10     	; 0xa566 <__divsf3_pse+0x6a>
    a570:	86 95       	lsr	r24
    a572:	77 95       	ror	r23
    a574:	67 95       	ror	r22
    a576:	b7 95       	ror	r27
    a578:	f7 95       	ror	r31
    a57a:	9f 5f       	subi	r25, 0xFF	; 255
    a57c:	c9 f7       	brne	.-14     	; 0xa570 <__divsf3_pse+0x74>
    a57e:	88 0f       	add	r24, r24
    a580:	91 1d       	adc	r25, r1
    a582:	96 95       	lsr	r25
    a584:	87 95       	ror	r24
    a586:	97 f9       	bld	r25, 7
    a588:	08 95       	ret
    a58a:	e1 e0       	ldi	r30, 0x01	; 1
    a58c:	66 0f       	add	r22, r22
    a58e:	77 1f       	adc	r23, r23
    a590:	88 1f       	adc	r24, r24
    a592:	bb 1f       	adc	r27, r27
    a594:	62 17       	cp	r22, r18
    a596:	73 07       	cpc	r23, r19
    a598:	84 07       	cpc	r24, r20
    a59a:	ba 07       	cpc	r27, r26
    a59c:	20 f0       	brcs	.+8      	; 0xa5a6 <__divsf3_pse+0xaa>
    a59e:	62 1b       	sub	r22, r18
    a5a0:	73 0b       	sbc	r23, r19
    a5a2:	84 0b       	sbc	r24, r20
    a5a4:	ba 0b       	sbc	r27, r26
    a5a6:	ee 1f       	adc	r30, r30
    a5a8:	88 f7       	brcc	.-30     	; 0xa58c <__divsf3_pse+0x90>
    a5aa:	e0 95       	com	r30
    a5ac:	08 95       	ret

0000a5ae <__fixsfsi>:
    a5ae:	04 d0       	rcall	.+8      	; 0xa5b8 <__fixunssfsi>
    a5b0:	68 94       	set
    a5b2:	b1 11       	cpse	r27, r1
    a5b4:	d9 c0       	rjmp	.+434    	; 0xa768 <__fp_szero>
    a5b6:	08 95       	ret

0000a5b8 <__fixunssfsi>:
    a5b8:	bc d0       	rcall	.+376    	; 0xa732 <__fp_splitA>
    a5ba:	88 f0       	brcs	.+34     	; 0xa5de <__fixunssfsi+0x26>
    a5bc:	9f 57       	subi	r25, 0x7F	; 127
    a5be:	90 f0       	brcs	.+36     	; 0xa5e4 <__fixunssfsi+0x2c>
    a5c0:	b9 2f       	mov	r27, r25
    a5c2:	99 27       	eor	r25, r25
    a5c4:	b7 51       	subi	r27, 0x17	; 23
    a5c6:	a0 f0       	brcs	.+40     	; 0xa5f0 <__fixunssfsi+0x38>
    a5c8:	d1 f0       	breq	.+52     	; 0xa5fe <__fixunssfsi+0x46>
    a5ca:	66 0f       	add	r22, r22
    a5cc:	77 1f       	adc	r23, r23
    a5ce:	88 1f       	adc	r24, r24
    a5d0:	99 1f       	adc	r25, r25
    a5d2:	1a f0       	brmi	.+6      	; 0xa5da <__fixunssfsi+0x22>
    a5d4:	ba 95       	dec	r27
    a5d6:	c9 f7       	brne	.-14     	; 0xa5ca <__fixunssfsi+0x12>
    a5d8:	12 c0       	rjmp	.+36     	; 0xa5fe <__fixunssfsi+0x46>
    a5da:	b1 30       	cpi	r27, 0x01	; 1
    a5dc:	81 f0       	breq	.+32     	; 0xa5fe <__fixunssfsi+0x46>
    a5de:	c3 d0       	rcall	.+390    	; 0xa766 <__fp_zero>
    a5e0:	b1 e0       	ldi	r27, 0x01	; 1
    a5e2:	08 95       	ret
    a5e4:	c0 c0       	rjmp	.+384    	; 0xa766 <__fp_zero>
    a5e6:	67 2f       	mov	r22, r23
    a5e8:	78 2f       	mov	r23, r24
    a5ea:	88 27       	eor	r24, r24
    a5ec:	b8 5f       	subi	r27, 0xF8	; 248
    a5ee:	39 f0       	breq	.+14     	; 0xa5fe <__fixunssfsi+0x46>
    a5f0:	b9 3f       	cpi	r27, 0xF9	; 249
    a5f2:	cc f3       	brlt	.-14     	; 0xa5e6 <__fixunssfsi+0x2e>
    a5f4:	86 95       	lsr	r24
    a5f6:	77 95       	ror	r23
    a5f8:	67 95       	ror	r22
    a5fa:	b3 95       	inc	r27
    a5fc:	d9 f7       	brne	.-10     	; 0xa5f4 <__fixunssfsi+0x3c>
    a5fe:	3e f4       	brtc	.+14     	; 0xa60e <__fixunssfsi+0x56>
    a600:	90 95       	com	r25
    a602:	80 95       	com	r24
    a604:	70 95       	com	r23
    a606:	61 95       	neg	r22
    a608:	7f 4f       	sbci	r23, 0xFF	; 255
    a60a:	8f 4f       	sbci	r24, 0xFF	; 255
    a60c:	9f 4f       	sbci	r25, 0xFF	; 255
    a60e:	08 95       	ret

0000a610 <__floatunsisf>:
    a610:	e8 94       	clt
    a612:	09 c0       	rjmp	.+18     	; 0xa626 <__floatsisf+0x12>

0000a614 <__floatsisf>:
    a614:	97 fb       	bst	r25, 7
    a616:	3e f4       	brtc	.+14     	; 0xa626 <__floatsisf+0x12>
    a618:	90 95       	com	r25
    a61a:	80 95       	com	r24
    a61c:	70 95       	com	r23
    a61e:	61 95       	neg	r22
    a620:	7f 4f       	sbci	r23, 0xFF	; 255
    a622:	8f 4f       	sbci	r24, 0xFF	; 255
    a624:	9f 4f       	sbci	r25, 0xFF	; 255
    a626:	99 23       	and	r25, r25
    a628:	a9 f0       	breq	.+42     	; 0xa654 <__floatsisf+0x40>
    a62a:	f9 2f       	mov	r31, r25
    a62c:	96 e9       	ldi	r25, 0x96	; 150
    a62e:	bb 27       	eor	r27, r27
    a630:	93 95       	inc	r25
    a632:	f6 95       	lsr	r31
    a634:	87 95       	ror	r24
    a636:	77 95       	ror	r23
    a638:	67 95       	ror	r22
    a63a:	b7 95       	ror	r27
    a63c:	f1 11       	cpse	r31, r1
    a63e:	f8 cf       	rjmp	.-16     	; 0xa630 <__floatsisf+0x1c>
    a640:	fa f4       	brpl	.+62     	; 0xa680 <__floatsisf+0x6c>
    a642:	bb 0f       	add	r27, r27
    a644:	11 f4       	brne	.+4      	; 0xa64a <__floatsisf+0x36>
    a646:	60 ff       	sbrs	r22, 0
    a648:	1b c0       	rjmp	.+54     	; 0xa680 <__floatsisf+0x6c>
    a64a:	6f 5f       	subi	r22, 0xFF	; 255
    a64c:	7f 4f       	sbci	r23, 0xFF	; 255
    a64e:	8f 4f       	sbci	r24, 0xFF	; 255
    a650:	9f 4f       	sbci	r25, 0xFF	; 255
    a652:	16 c0       	rjmp	.+44     	; 0xa680 <__floatsisf+0x6c>
    a654:	88 23       	and	r24, r24
    a656:	11 f0       	breq	.+4      	; 0xa65c <__floatsisf+0x48>
    a658:	96 e9       	ldi	r25, 0x96	; 150
    a65a:	11 c0       	rjmp	.+34     	; 0xa67e <__floatsisf+0x6a>
    a65c:	77 23       	and	r23, r23
    a65e:	21 f0       	breq	.+8      	; 0xa668 <__floatsisf+0x54>
    a660:	9e e8       	ldi	r25, 0x8E	; 142
    a662:	87 2f       	mov	r24, r23
    a664:	76 2f       	mov	r23, r22
    a666:	05 c0       	rjmp	.+10     	; 0xa672 <__floatsisf+0x5e>
    a668:	66 23       	and	r22, r22
    a66a:	71 f0       	breq	.+28     	; 0xa688 <__floatsisf+0x74>
    a66c:	96 e8       	ldi	r25, 0x86	; 134
    a66e:	86 2f       	mov	r24, r22
    a670:	70 e0       	ldi	r23, 0x00	; 0
    a672:	60 e0       	ldi	r22, 0x00	; 0
    a674:	2a f0       	brmi	.+10     	; 0xa680 <__floatsisf+0x6c>
    a676:	9a 95       	dec	r25
    a678:	66 0f       	add	r22, r22
    a67a:	77 1f       	adc	r23, r23
    a67c:	88 1f       	adc	r24, r24
    a67e:	da f7       	brpl	.-10     	; 0xa676 <__floatsisf+0x62>
    a680:	88 0f       	add	r24, r24
    a682:	96 95       	lsr	r25
    a684:	87 95       	ror	r24
    a686:	97 f9       	bld	r25, 7
    a688:	08 95       	ret

0000a68a <__fp_cmp>:
    a68a:	99 0f       	add	r25, r25
    a68c:	00 08       	sbc	r0, r0
    a68e:	55 0f       	add	r21, r21
    a690:	aa 0b       	sbc	r26, r26
    a692:	e0 e8       	ldi	r30, 0x80	; 128
    a694:	fe ef       	ldi	r31, 0xFE	; 254
    a696:	16 16       	cp	r1, r22
    a698:	17 06       	cpc	r1, r23
    a69a:	e8 07       	cpc	r30, r24
    a69c:	f9 07       	cpc	r31, r25
    a69e:	c0 f0       	brcs	.+48     	; 0xa6d0 <__fp_cmp+0x46>
    a6a0:	12 16       	cp	r1, r18
    a6a2:	13 06       	cpc	r1, r19
    a6a4:	e4 07       	cpc	r30, r20
    a6a6:	f5 07       	cpc	r31, r21
    a6a8:	98 f0       	brcs	.+38     	; 0xa6d0 <__fp_cmp+0x46>
    a6aa:	62 1b       	sub	r22, r18
    a6ac:	73 0b       	sbc	r23, r19
    a6ae:	84 0b       	sbc	r24, r20
    a6b0:	95 0b       	sbc	r25, r21
    a6b2:	39 f4       	brne	.+14     	; 0xa6c2 <__fp_cmp+0x38>
    a6b4:	0a 26       	eor	r0, r26
    a6b6:	61 f0       	breq	.+24     	; 0xa6d0 <__fp_cmp+0x46>
    a6b8:	23 2b       	or	r18, r19
    a6ba:	24 2b       	or	r18, r20
    a6bc:	25 2b       	or	r18, r21
    a6be:	21 f4       	brne	.+8      	; 0xa6c8 <__fp_cmp+0x3e>
    a6c0:	08 95       	ret
    a6c2:	0a 26       	eor	r0, r26
    a6c4:	09 f4       	brne	.+2      	; 0xa6c8 <__fp_cmp+0x3e>
    a6c6:	a1 40       	sbci	r26, 0x01	; 1
    a6c8:	a6 95       	lsr	r26
    a6ca:	8f ef       	ldi	r24, 0xFF	; 255
    a6cc:	81 1d       	adc	r24, r1
    a6ce:	81 1d       	adc	r24, r1
    a6d0:	08 95       	ret

0000a6d2 <__fp_inf>:
    a6d2:	97 f9       	bld	r25, 7
    a6d4:	9f 67       	ori	r25, 0x7F	; 127
    a6d6:	80 e8       	ldi	r24, 0x80	; 128
    a6d8:	70 e0       	ldi	r23, 0x00	; 0
    a6da:	60 e0       	ldi	r22, 0x00	; 0
    a6dc:	08 95       	ret

0000a6de <__fp_nan>:
    a6de:	9f ef       	ldi	r25, 0xFF	; 255
    a6e0:	80 ec       	ldi	r24, 0xC0	; 192
    a6e2:	08 95       	ret

0000a6e4 <__fp_pscA>:
    a6e4:	00 24       	eor	r0, r0
    a6e6:	0a 94       	dec	r0
    a6e8:	16 16       	cp	r1, r22
    a6ea:	17 06       	cpc	r1, r23
    a6ec:	18 06       	cpc	r1, r24
    a6ee:	09 06       	cpc	r0, r25
    a6f0:	08 95       	ret

0000a6f2 <__fp_pscB>:
    a6f2:	00 24       	eor	r0, r0
    a6f4:	0a 94       	dec	r0
    a6f6:	12 16       	cp	r1, r18
    a6f8:	13 06       	cpc	r1, r19
    a6fa:	14 06       	cpc	r1, r20
    a6fc:	05 06       	cpc	r0, r21
    a6fe:	08 95       	ret

0000a700 <__fp_round>:
    a700:	09 2e       	mov	r0, r25
    a702:	03 94       	inc	r0
    a704:	00 0c       	add	r0, r0
    a706:	11 f4       	brne	.+4      	; 0xa70c <__fp_round+0xc>
    a708:	88 23       	and	r24, r24
    a70a:	52 f0       	brmi	.+20     	; 0xa720 <__fp_round+0x20>
    a70c:	bb 0f       	add	r27, r27
    a70e:	40 f4       	brcc	.+16     	; 0xa720 <__fp_round+0x20>
    a710:	bf 2b       	or	r27, r31
    a712:	11 f4       	brne	.+4      	; 0xa718 <__fp_round+0x18>
    a714:	60 ff       	sbrs	r22, 0
    a716:	04 c0       	rjmp	.+8      	; 0xa720 <__fp_round+0x20>
    a718:	6f 5f       	subi	r22, 0xFF	; 255
    a71a:	7f 4f       	sbci	r23, 0xFF	; 255
    a71c:	8f 4f       	sbci	r24, 0xFF	; 255
    a71e:	9f 4f       	sbci	r25, 0xFF	; 255
    a720:	08 95       	ret

0000a722 <__fp_split3>:
    a722:	57 fd       	sbrc	r21, 7
    a724:	90 58       	subi	r25, 0x80	; 128
    a726:	44 0f       	add	r20, r20
    a728:	55 1f       	adc	r21, r21
    a72a:	59 f0       	breq	.+22     	; 0xa742 <__fp_splitA+0x10>
    a72c:	5f 3f       	cpi	r21, 0xFF	; 255
    a72e:	71 f0       	breq	.+28     	; 0xa74c <__fp_splitA+0x1a>
    a730:	47 95       	ror	r20

0000a732 <__fp_splitA>:
    a732:	88 0f       	add	r24, r24
    a734:	97 fb       	bst	r25, 7
    a736:	99 1f       	adc	r25, r25
    a738:	61 f0       	breq	.+24     	; 0xa752 <__fp_splitA+0x20>
    a73a:	9f 3f       	cpi	r25, 0xFF	; 255
    a73c:	79 f0       	breq	.+30     	; 0xa75c <__fp_splitA+0x2a>
    a73e:	87 95       	ror	r24
    a740:	08 95       	ret
    a742:	12 16       	cp	r1, r18
    a744:	13 06       	cpc	r1, r19
    a746:	14 06       	cpc	r1, r20
    a748:	55 1f       	adc	r21, r21
    a74a:	f2 cf       	rjmp	.-28     	; 0xa730 <__fp_split3+0xe>
    a74c:	46 95       	lsr	r20
    a74e:	f1 df       	rcall	.-30     	; 0xa732 <__fp_splitA>
    a750:	08 c0       	rjmp	.+16     	; 0xa762 <__fp_splitA+0x30>
    a752:	16 16       	cp	r1, r22
    a754:	17 06       	cpc	r1, r23
    a756:	18 06       	cpc	r1, r24
    a758:	99 1f       	adc	r25, r25
    a75a:	f1 cf       	rjmp	.-30     	; 0xa73e <__fp_splitA+0xc>
    a75c:	86 95       	lsr	r24
    a75e:	71 05       	cpc	r23, r1
    a760:	61 05       	cpc	r22, r1
    a762:	08 94       	sec
    a764:	08 95       	ret

0000a766 <__fp_zero>:
    a766:	e8 94       	clt

0000a768 <__fp_szero>:
    a768:	bb 27       	eor	r27, r27
    a76a:	66 27       	eor	r22, r22
    a76c:	77 27       	eor	r23, r23
    a76e:	cb 01       	movw	r24, r22
    a770:	97 f9       	bld	r25, 7
    a772:	08 95       	ret

0000a774 <__gesf2>:
    a774:	8a df       	rcall	.-236    	; 0xa68a <__fp_cmp>
    a776:	08 f4       	brcc	.+2      	; 0xa77a <__gesf2+0x6>
    a778:	8f ef       	ldi	r24, 0xFF	; 255
    a77a:	08 95       	ret
    a77c:	0e f0       	brts	.+2      	; 0xa780 <__gesf2+0xc>
    a77e:	a6 c0       	rjmp	.+332    	; 0xa8cc <__fp_mpack>
    a780:	ae cf       	rjmp	.-164    	; 0xa6de <__fp_nan>
    a782:	68 94       	set
    a784:	a6 cf       	rjmp	.-180    	; 0xa6d2 <__fp_inf>

0000a786 <log>:
    a786:	d5 df       	rcall	.-86     	; 0xa732 <__fp_splitA>
    a788:	c8 f3       	brcs	.-14     	; 0xa77c <__gesf2+0x8>
    a78a:	99 23       	and	r25, r25
    a78c:	d1 f3       	breq	.-12     	; 0xa782 <__gesf2+0xe>
    a78e:	c6 f3       	brts	.-16     	; 0xa780 <__gesf2+0xc>
    a790:	df 93       	push	r29
    a792:	cf 93       	push	r28
    a794:	1f 93       	push	r17
    a796:	0f 93       	push	r16
    a798:	ff 92       	push	r15
    a79a:	c9 2f       	mov	r28, r25
    a79c:	dd 27       	eor	r29, r29
    a79e:	88 23       	and	r24, r24
    a7a0:	2a f0       	brmi	.+10     	; 0xa7ac <log+0x26>
    a7a2:	21 97       	sbiw	r28, 0x01	; 1
    a7a4:	66 0f       	add	r22, r22
    a7a6:	77 1f       	adc	r23, r23
    a7a8:	88 1f       	adc	r24, r24
    a7aa:	da f7       	brpl	.-10     	; 0xa7a2 <log+0x1c>
    a7ac:	20 e0       	ldi	r18, 0x00	; 0
    a7ae:	30 e0       	ldi	r19, 0x00	; 0
    a7b0:	40 e8       	ldi	r20, 0x80	; 128
    a7b2:	5f eb       	ldi	r21, 0xBF	; 191
    a7b4:	9f e3       	ldi	r25, 0x3F	; 63
    a7b6:	88 39       	cpi	r24, 0x98	; 152
    a7b8:	20 f0       	brcs	.+8      	; 0xa7c2 <log+0x3c>
    a7ba:	80 3e       	cpi	r24, 0xE0	; 224
    a7bc:	30 f0       	brcs	.+12     	; 0xa7ca <log+0x44>
    a7be:	21 96       	adiw	r28, 0x01	; 1
    a7c0:	8f 77       	andi	r24, 0x7F	; 127
    a7c2:	25 de       	rcall	.-950    	; 0xa40e <__addsf3>
    a7c4:	e4 e9       	ldi	r30, 0x94	; 148
    a7c6:	f8 e0       	ldi	r31, 0x08	; 8
    a7c8:	03 c0       	rjmp	.+6      	; 0xa7d0 <log+0x4a>
    a7ca:	21 de       	rcall	.-958    	; 0xa40e <__addsf3>
    a7cc:	e1 ec       	ldi	r30, 0xC1	; 193
    a7ce:	f8 e0       	ldi	r31, 0x08	; 8
    a7d0:	8b d0       	rcall	.+278    	; 0xa8e8 <__fp_powser>
    a7d2:	8b 01       	movw	r16, r22
    a7d4:	be 01       	movw	r22, r28
    a7d6:	ec 01       	movw	r28, r24
    a7d8:	fb 2e       	mov	r15, r27
    a7da:	6f 57       	subi	r22, 0x7F	; 127
    a7dc:	71 09       	sbc	r23, r1
    a7de:	75 95       	asr	r23
    a7e0:	77 1f       	adc	r23, r23
    a7e2:	88 0b       	sbc	r24, r24
    a7e4:	99 0b       	sbc	r25, r25
    a7e6:	16 df       	rcall	.-468    	; 0xa614 <__floatsisf>
    a7e8:	28 e1       	ldi	r18, 0x18	; 24
    a7ea:	32 e7       	ldi	r19, 0x72	; 114
    a7ec:	41 e3       	ldi	r20, 0x31	; 49
    a7ee:	5f e3       	ldi	r21, 0x3F	; 63
    a7f0:	16 d0       	rcall	.+44     	; 0xa81e <__mulsf3x>
    a7f2:	af 2d       	mov	r26, r15
    a7f4:	98 01       	movw	r18, r16
    a7f6:	ae 01       	movw	r20, r28
    a7f8:	ff 90       	pop	r15
    a7fa:	0f 91       	pop	r16
    a7fc:	1f 91       	pop	r17
    a7fe:	cf 91       	pop	r28
    a800:	df 91       	pop	r29
    a802:	16 de       	rcall	.-980    	; 0xa430 <__addsf3x>
    a804:	7d cf       	rjmp	.-262    	; 0xa700 <__fp_round>

0000a806 <__mulsf3>:
    a806:	0b d0       	rcall	.+22     	; 0xa81e <__mulsf3x>
    a808:	7b cf       	rjmp	.-266    	; 0xa700 <__fp_round>
    a80a:	6c df       	rcall	.-296    	; 0xa6e4 <__fp_pscA>
    a80c:	28 f0       	brcs	.+10     	; 0xa818 <__mulsf3+0x12>
    a80e:	71 df       	rcall	.-286    	; 0xa6f2 <__fp_pscB>
    a810:	18 f0       	brcs	.+6      	; 0xa818 <__mulsf3+0x12>
    a812:	95 23       	and	r25, r21
    a814:	09 f0       	breq	.+2      	; 0xa818 <__mulsf3+0x12>
    a816:	5d cf       	rjmp	.-326    	; 0xa6d2 <__fp_inf>
    a818:	62 cf       	rjmp	.-316    	; 0xa6de <__fp_nan>
    a81a:	11 24       	eor	r1, r1
    a81c:	a5 cf       	rjmp	.-182    	; 0xa768 <__fp_szero>

0000a81e <__mulsf3x>:
    a81e:	81 df       	rcall	.-254    	; 0xa722 <__fp_split3>
    a820:	a0 f3       	brcs	.-24     	; 0xa80a <__mulsf3+0x4>

0000a822 <__mulsf3_pse>:
    a822:	95 9f       	mul	r25, r21
    a824:	d1 f3       	breq	.-12     	; 0xa81a <__mulsf3+0x14>
    a826:	95 0f       	add	r25, r21
    a828:	50 e0       	ldi	r21, 0x00	; 0
    a82a:	55 1f       	adc	r21, r21
    a82c:	62 9f       	mul	r22, r18
    a82e:	f0 01       	movw	r30, r0
    a830:	72 9f       	mul	r23, r18
    a832:	bb 27       	eor	r27, r27
    a834:	f0 0d       	add	r31, r0
    a836:	b1 1d       	adc	r27, r1
    a838:	63 9f       	mul	r22, r19
    a83a:	aa 27       	eor	r26, r26
    a83c:	f0 0d       	add	r31, r0
    a83e:	b1 1d       	adc	r27, r1
    a840:	aa 1f       	adc	r26, r26
    a842:	64 9f       	mul	r22, r20
    a844:	66 27       	eor	r22, r22
    a846:	b0 0d       	add	r27, r0
    a848:	a1 1d       	adc	r26, r1
    a84a:	66 1f       	adc	r22, r22
    a84c:	82 9f       	mul	r24, r18
    a84e:	22 27       	eor	r18, r18
    a850:	b0 0d       	add	r27, r0
    a852:	a1 1d       	adc	r26, r1
    a854:	62 1f       	adc	r22, r18
    a856:	73 9f       	mul	r23, r19
    a858:	b0 0d       	add	r27, r0
    a85a:	a1 1d       	adc	r26, r1
    a85c:	62 1f       	adc	r22, r18
    a85e:	83 9f       	mul	r24, r19
    a860:	a0 0d       	add	r26, r0
    a862:	61 1d       	adc	r22, r1
    a864:	22 1f       	adc	r18, r18
    a866:	74 9f       	mul	r23, r20
    a868:	33 27       	eor	r19, r19
    a86a:	a0 0d       	add	r26, r0
    a86c:	61 1d       	adc	r22, r1
    a86e:	23 1f       	adc	r18, r19
    a870:	84 9f       	mul	r24, r20
    a872:	60 0d       	add	r22, r0
    a874:	21 1d       	adc	r18, r1
    a876:	82 2f       	mov	r24, r18
    a878:	76 2f       	mov	r23, r22
    a87a:	6a 2f       	mov	r22, r26
    a87c:	11 24       	eor	r1, r1
    a87e:	9f 57       	subi	r25, 0x7F	; 127
    a880:	50 40       	sbci	r21, 0x00	; 0
    a882:	8a f0       	brmi	.+34     	; 0xa8a6 <__mulsf3_pse+0x84>
    a884:	e1 f0       	breq	.+56     	; 0xa8be <__mulsf3_pse+0x9c>
    a886:	88 23       	and	r24, r24
    a888:	4a f0       	brmi	.+18     	; 0xa89c <__mulsf3_pse+0x7a>
    a88a:	ee 0f       	add	r30, r30
    a88c:	ff 1f       	adc	r31, r31
    a88e:	bb 1f       	adc	r27, r27
    a890:	66 1f       	adc	r22, r22
    a892:	77 1f       	adc	r23, r23
    a894:	88 1f       	adc	r24, r24
    a896:	91 50       	subi	r25, 0x01	; 1
    a898:	50 40       	sbci	r21, 0x00	; 0
    a89a:	a9 f7       	brne	.-22     	; 0xa886 <__mulsf3_pse+0x64>
    a89c:	9e 3f       	cpi	r25, 0xFE	; 254
    a89e:	51 05       	cpc	r21, r1
    a8a0:	70 f0       	brcs	.+28     	; 0xa8be <__mulsf3_pse+0x9c>
    a8a2:	17 cf       	rjmp	.-466    	; 0xa6d2 <__fp_inf>
    a8a4:	61 cf       	rjmp	.-318    	; 0xa768 <__fp_szero>
    a8a6:	5f 3f       	cpi	r21, 0xFF	; 255
    a8a8:	ec f3       	brlt	.-6      	; 0xa8a4 <__mulsf3_pse+0x82>
    a8aa:	98 3e       	cpi	r25, 0xE8	; 232
    a8ac:	dc f3       	brlt	.-10     	; 0xa8a4 <__mulsf3_pse+0x82>
    a8ae:	86 95       	lsr	r24
    a8b0:	77 95       	ror	r23
    a8b2:	67 95       	ror	r22
    a8b4:	b7 95       	ror	r27
    a8b6:	f7 95       	ror	r31
    a8b8:	e7 95       	ror	r30
    a8ba:	9f 5f       	subi	r25, 0xFF	; 255
    a8bc:	c1 f7       	brne	.-16     	; 0xa8ae <__mulsf3_pse+0x8c>
    a8be:	fe 2b       	or	r31, r30
    a8c0:	88 0f       	add	r24, r24
    a8c2:	91 1d       	adc	r25, r1
    a8c4:	96 95       	lsr	r25
    a8c6:	87 95       	ror	r24
    a8c8:	97 f9       	bld	r25, 7
    a8ca:	08 95       	ret

0000a8cc <__fp_mpack>:
    a8cc:	9f 3f       	cpi	r25, 0xFF	; 255
    a8ce:	31 f0       	breq	.+12     	; 0xa8dc <__fp_mpack_finite+0xc>

0000a8d0 <__fp_mpack_finite>:
    a8d0:	91 50       	subi	r25, 0x01	; 1
    a8d2:	20 f4       	brcc	.+8      	; 0xa8dc <__fp_mpack_finite+0xc>
    a8d4:	87 95       	ror	r24
    a8d6:	77 95       	ror	r23
    a8d8:	67 95       	ror	r22
    a8da:	b7 95       	ror	r27
    a8dc:	88 0f       	add	r24, r24
    a8de:	91 1d       	adc	r25, r1
    a8e0:	96 95       	lsr	r25
    a8e2:	87 95       	ror	r24
    a8e4:	97 f9       	bld	r25, 7
    a8e6:	08 95       	ret

0000a8e8 <__fp_powser>:
    a8e8:	df 93       	push	r29
    a8ea:	cf 93       	push	r28
    a8ec:	1f 93       	push	r17
    a8ee:	0f 93       	push	r16
    a8f0:	ff 92       	push	r15
    a8f2:	ef 92       	push	r14
    a8f4:	df 92       	push	r13
    a8f6:	7b 01       	movw	r14, r22
    a8f8:	8c 01       	movw	r16, r24
    a8fa:	68 94       	set
    a8fc:	05 c0       	rjmp	.+10     	; 0xa908 <__fp_powser+0x20>
    a8fe:	da 2e       	mov	r13, r26
    a900:	ef 01       	movw	r28, r30
    a902:	8d df       	rcall	.-230    	; 0xa81e <__mulsf3x>
    a904:	fe 01       	movw	r30, r28
    a906:	e8 94       	clt
    a908:	a5 91       	lpm	r26, Z+
    a90a:	25 91       	lpm	r18, Z+
    a90c:	35 91       	lpm	r19, Z+
    a90e:	45 91       	lpm	r20, Z+
    a910:	55 91       	lpm	r21, Z+
    a912:	ae f3       	brts	.-22     	; 0xa8fe <__fp_powser+0x16>
    a914:	ef 01       	movw	r28, r30
    a916:	8c dd       	rcall	.-1256   	; 0xa430 <__addsf3x>
    a918:	fe 01       	movw	r30, r28
    a91a:	97 01       	movw	r18, r14
    a91c:	a8 01       	movw	r20, r16
    a91e:	da 94       	dec	r13
    a920:	79 f7       	brne	.-34     	; 0xa900 <__fp_powser+0x18>
    a922:	df 90       	pop	r13
    a924:	ef 90       	pop	r14
    a926:	ff 90       	pop	r15
    a928:	0f 91       	pop	r16
    a92a:	1f 91       	pop	r17
    a92c:	cf 91       	pop	r28
    a92e:	df 91       	pop	r29
    a930:	08 95       	ret

0000a932 <vfprintf>:
    a932:	2f 92       	push	r2
    a934:	3f 92       	push	r3
    a936:	4f 92       	push	r4
    a938:	5f 92       	push	r5
    a93a:	6f 92       	push	r6
    a93c:	7f 92       	push	r7
    a93e:	8f 92       	push	r8
    a940:	9f 92       	push	r9
    a942:	af 92       	push	r10
    a944:	bf 92       	push	r11
    a946:	cf 92       	push	r12
    a948:	df 92       	push	r13
    a94a:	ef 92       	push	r14
    a94c:	ff 92       	push	r15
    a94e:	0f 93       	push	r16
    a950:	1f 93       	push	r17
    a952:	cf 93       	push	r28
    a954:	df 93       	push	r29
    a956:	cd b7       	in	r28, 0x3d	; 61
    a958:	de b7       	in	r29, 0x3e	; 62
    a95a:	60 97       	sbiw	r28, 0x10	; 16
    a95c:	0f b6       	in	r0, 0x3f	; 63
    a95e:	f8 94       	cli
    a960:	de bf       	out	0x3e, r29	; 62
    a962:	0f be       	out	0x3f, r0	; 63
    a964:	cd bf       	out	0x3d, r28	; 61
    a966:	7c 01       	movw	r14, r24
    a968:	1b 01       	movw	r2, r22
    a96a:	6a 01       	movw	r12, r20
    a96c:	fc 01       	movw	r30, r24
    a96e:	17 82       	std	Z+7, r1	; 0x07
    a970:	16 82       	std	Z+6, r1	; 0x06
    a972:	83 81       	ldd	r24, Z+3	; 0x03
    a974:	81 ff       	sbrs	r24, 1
    a976:	2a c3       	rjmp	.+1620   	; 0xafcc <vfprintf+0x69a>
    a978:	9e 01       	movw	r18, r28
    a97a:	2f 5f       	subi	r18, 0xFF	; 255
    a97c:	3f 4f       	sbci	r19, 0xFF	; 255
    a97e:	39 01       	movw	r6, r18
    a980:	f7 01       	movw	r30, r14
    a982:	93 81       	ldd	r25, Z+3	; 0x03
    a984:	f1 01       	movw	r30, r2
    a986:	93 fd       	sbrc	r25, 3
    a988:	85 91       	lpm	r24, Z+
    a98a:	93 ff       	sbrs	r25, 3
    a98c:	81 91       	ld	r24, Z+
    a98e:	1f 01       	movw	r2, r30
    a990:	88 23       	and	r24, r24
    a992:	09 f4       	brne	.+2      	; 0xa996 <vfprintf+0x64>
    a994:	17 c3       	rjmp	.+1582   	; 0xafc4 <vfprintf+0x692>
    a996:	85 32       	cpi	r24, 0x25	; 37
    a998:	39 f4       	brne	.+14     	; 0xa9a8 <vfprintf+0x76>
    a99a:	93 fd       	sbrc	r25, 3
    a99c:	85 91       	lpm	r24, Z+
    a99e:	93 ff       	sbrs	r25, 3
    a9a0:	81 91       	ld	r24, Z+
    a9a2:	1f 01       	movw	r2, r30
    a9a4:	85 32       	cpi	r24, 0x25	; 37
    a9a6:	31 f4       	brne	.+12     	; 0xa9b4 <vfprintf+0x82>
    a9a8:	b7 01       	movw	r22, r14
    a9aa:	90 e0       	ldi	r25, 0x00	; 0
    a9ac:	a3 d5       	rcall	.+2886   	; 0xb4f4 <fputc>
    a9ae:	56 01       	movw	r10, r12
    a9b0:	65 01       	movw	r12, r10
    a9b2:	e6 cf       	rjmp	.-52     	; 0xa980 <vfprintf+0x4e>
    a9b4:	10 e0       	ldi	r17, 0x00	; 0
    a9b6:	51 2c       	mov	r5, r1
    a9b8:	91 2c       	mov	r9, r1
    a9ba:	ff e1       	ldi	r31, 0x1F	; 31
    a9bc:	f9 15       	cp	r31, r9
    a9be:	d8 f0       	brcs	.+54     	; 0xa9f6 <vfprintf+0xc4>
    a9c0:	8b 32       	cpi	r24, 0x2B	; 43
    a9c2:	79 f0       	breq	.+30     	; 0xa9e2 <vfprintf+0xb0>
    a9c4:	38 f4       	brcc	.+14     	; 0xa9d4 <vfprintf+0xa2>
    a9c6:	80 32       	cpi	r24, 0x20	; 32
    a9c8:	79 f0       	breq	.+30     	; 0xa9e8 <vfprintf+0xb6>
    a9ca:	83 32       	cpi	r24, 0x23	; 35
    a9cc:	a1 f4       	brne	.+40     	; 0xa9f6 <vfprintf+0xc4>
    a9ce:	f9 2d       	mov	r31, r9
    a9d0:	f0 61       	ori	r31, 0x10	; 16
    a9d2:	2e c0       	rjmp	.+92     	; 0xaa30 <vfprintf+0xfe>
    a9d4:	8d 32       	cpi	r24, 0x2D	; 45
    a9d6:	61 f0       	breq	.+24     	; 0xa9f0 <vfprintf+0xbe>
    a9d8:	80 33       	cpi	r24, 0x30	; 48
    a9da:	69 f4       	brne	.+26     	; 0xa9f6 <vfprintf+0xc4>
    a9dc:	29 2d       	mov	r18, r9
    a9de:	21 60       	ori	r18, 0x01	; 1
    a9e0:	2d c0       	rjmp	.+90     	; 0xaa3c <vfprintf+0x10a>
    a9e2:	39 2d       	mov	r19, r9
    a9e4:	32 60       	ori	r19, 0x02	; 2
    a9e6:	93 2e       	mov	r9, r19
    a9e8:	89 2d       	mov	r24, r9
    a9ea:	84 60       	ori	r24, 0x04	; 4
    a9ec:	98 2e       	mov	r9, r24
    a9ee:	2a c0       	rjmp	.+84     	; 0xaa44 <vfprintf+0x112>
    a9f0:	e9 2d       	mov	r30, r9
    a9f2:	e8 60       	ori	r30, 0x08	; 8
    a9f4:	15 c0       	rjmp	.+42     	; 0xaa20 <vfprintf+0xee>
    a9f6:	97 fc       	sbrc	r9, 7
    a9f8:	2d c0       	rjmp	.+90     	; 0xaa54 <vfprintf+0x122>
    a9fa:	20 ed       	ldi	r18, 0xD0	; 208
    a9fc:	28 0f       	add	r18, r24
    a9fe:	2a 30       	cpi	r18, 0x0A	; 10
    aa00:	88 f4       	brcc	.+34     	; 0xaa24 <vfprintf+0xf2>
    aa02:	96 fe       	sbrs	r9, 6
    aa04:	06 c0       	rjmp	.+12     	; 0xaa12 <vfprintf+0xe0>
    aa06:	3a e0       	ldi	r19, 0x0A	; 10
    aa08:	13 9f       	mul	r17, r19
    aa0a:	20 0d       	add	r18, r0
    aa0c:	11 24       	eor	r1, r1
    aa0e:	12 2f       	mov	r17, r18
    aa10:	19 c0       	rjmp	.+50     	; 0xaa44 <vfprintf+0x112>
    aa12:	8a e0       	ldi	r24, 0x0A	; 10
    aa14:	58 9e       	mul	r5, r24
    aa16:	20 0d       	add	r18, r0
    aa18:	11 24       	eor	r1, r1
    aa1a:	52 2e       	mov	r5, r18
    aa1c:	e9 2d       	mov	r30, r9
    aa1e:	e0 62       	ori	r30, 0x20	; 32
    aa20:	9e 2e       	mov	r9, r30
    aa22:	10 c0       	rjmp	.+32     	; 0xaa44 <vfprintf+0x112>
    aa24:	8e 32       	cpi	r24, 0x2E	; 46
    aa26:	31 f4       	brne	.+12     	; 0xaa34 <vfprintf+0x102>
    aa28:	96 fc       	sbrc	r9, 6
    aa2a:	cc c2       	rjmp	.+1432   	; 0xafc4 <vfprintf+0x692>
    aa2c:	f9 2d       	mov	r31, r9
    aa2e:	f0 64       	ori	r31, 0x40	; 64
    aa30:	9f 2e       	mov	r9, r31
    aa32:	08 c0       	rjmp	.+16     	; 0xaa44 <vfprintf+0x112>
    aa34:	8c 36       	cpi	r24, 0x6C	; 108
    aa36:	21 f4       	brne	.+8      	; 0xaa40 <vfprintf+0x10e>
    aa38:	29 2d       	mov	r18, r9
    aa3a:	20 68       	ori	r18, 0x80	; 128
    aa3c:	92 2e       	mov	r9, r18
    aa3e:	02 c0       	rjmp	.+4      	; 0xaa44 <vfprintf+0x112>
    aa40:	88 36       	cpi	r24, 0x68	; 104
    aa42:	41 f4       	brne	.+16     	; 0xaa54 <vfprintf+0x122>
    aa44:	f1 01       	movw	r30, r2
    aa46:	93 fd       	sbrc	r25, 3
    aa48:	85 91       	lpm	r24, Z+
    aa4a:	93 ff       	sbrs	r25, 3
    aa4c:	81 91       	ld	r24, Z+
    aa4e:	1f 01       	movw	r2, r30
    aa50:	81 11       	cpse	r24, r1
    aa52:	b3 cf       	rjmp	.-154    	; 0xa9ba <vfprintf+0x88>
    aa54:	9b eb       	ldi	r25, 0xBB	; 187
    aa56:	98 0f       	add	r25, r24
    aa58:	93 30       	cpi	r25, 0x03	; 3
    aa5a:	20 f4       	brcc	.+8      	; 0xaa64 <vfprintf+0x132>
    aa5c:	99 2d       	mov	r25, r9
    aa5e:	90 61       	ori	r25, 0x10	; 16
    aa60:	80 5e       	subi	r24, 0xE0	; 224
    aa62:	07 c0       	rjmp	.+14     	; 0xaa72 <vfprintf+0x140>
    aa64:	9b e9       	ldi	r25, 0x9B	; 155
    aa66:	98 0f       	add	r25, r24
    aa68:	93 30       	cpi	r25, 0x03	; 3
    aa6a:	08 f0       	brcs	.+2      	; 0xaa6e <vfprintf+0x13c>
    aa6c:	59 c1       	rjmp	.+690    	; 0xad20 <vfprintf+0x3ee>
    aa6e:	99 2d       	mov	r25, r9
    aa70:	9f 7e       	andi	r25, 0xEF	; 239
    aa72:	96 ff       	sbrs	r25, 6
    aa74:	16 e0       	ldi	r17, 0x06	; 6
    aa76:	9f 73       	andi	r25, 0x3F	; 63
    aa78:	99 2e       	mov	r9, r25
    aa7a:	85 36       	cpi	r24, 0x65	; 101
    aa7c:	19 f4       	brne	.+6      	; 0xaa84 <vfprintf+0x152>
    aa7e:	90 64       	ori	r25, 0x40	; 64
    aa80:	99 2e       	mov	r9, r25
    aa82:	08 c0       	rjmp	.+16     	; 0xaa94 <vfprintf+0x162>
    aa84:	86 36       	cpi	r24, 0x66	; 102
    aa86:	21 f4       	brne	.+8      	; 0xaa90 <vfprintf+0x15e>
    aa88:	39 2f       	mov	r19, r25
    aa8a:	30 68       	ori	r19, 0x80	; 128
    aa8c:	93 2e       	mov	r9, r19
    aa8e:	02 c0       	rjmp	.+4      	; 0xaa94 <vfprintf+0x162>
    aa90:	11 11       	cpse	r17, r1
    aa92:	11 50       	subi	r17, 0x01	; 1
    aa94:	97 fe       	sbrs	r9, 7
    aa96:	07 c0       	rjmp	.+14     	; 0xaaa6 <vfprintf+0x174>
    aa98:	1c 33       	cpi	r17, 0x3C	; 60
    aa9a:	50 f4       	brcc	.+20     	; 0xaab0 <vfprintf+0x17e>
    aa9c:	44 24       	eor	r4, r4
    aa9e:	43 94       	inc	r4
    aaa0:	41 0e       	add	r4, r17
    aaa2:	27 e0       	ldi	r18, 0x07	; 7
    aaa4:	0b c0       	rjmp	.+22     	; 0xaabc <vfprintf+0x18a>
    aaa6:	18 30       	cpi	r17, 0x08	; 8
    aaa8:	38 f0       	brcs	.+14     	; 0xaab8 <vfprintf+0x186>
    aaaa:	27 e0       	ldi	r18, 0x07	; 7
    aaac:	17 e0       	ldi	r17, 0x07	; 7
    aaae:	05 c0       	rjmp	.+10     	; 0xaaba <vfprintf+0x188>
    aab0:	27 e0       	ldi	r18, 0x07	; 7
    aab2:	9c e3       	ldi	r25, 0x3C	; 60
    aab4:	49 2e       	mov	r4, r25
    aab6:	02 c0       	rjmp	.+4      	; 0xaabc <vfprintf+0x18a>
    aab8:	21 2f       	mov	r18, r17
    aaba:	41 2c       	mov	r4, r1
    aabc:	56 01       	movw	r10, r12
    aabe:	84 e0       	ldi	r24, 0x04	; 4
    aac0:	a8 0e       	add	r10, r24
    aac2:	b1 1c       	adc	r11, r1
    aac4:	f6 01       	movw	r30, r12
    aac6:	60 81       	ld	r22, Z
    aac8:	71 81       	ldd	r23, Z+1	; 0x01
    aaca:	82 81       	ldd	r24, Z+2	; 0x02
    aacc:	93 81       	ldd	r25, Z+3	; 0x03
    aace:	04 2d       	mov	r16, r4
    aad0:	a3 01       	movw	r20, r6
    aad2:	12 d4       	rcall	.+2084   	; 0xb2f8 <__ftoa_engine>
    aad4:	6c 01       	movw	r12, r24
    aad6:	f9 81       	ldd	r31, Y+1	; 0x01
    aad8:	fc 87       	std	Y+12, r31	; 0x0c
    aada:	f0 ff       	sbrs	r31, 0
    aadc:	02 c0       	rjmp	.+4      	; 0xaae2 <vfprintf+0x1b0>
    aade:	f3 ff       	sbrs	r31, 3
    aae0:	06 c0       	rjmp	.+12     	; 0xaaee <vfprintf+0x1bc>
    aae2:	91 fc       	sbrc	r9, 1
    aae4:	06 c0       	rjmp	.+12     	; 0xaaf2 <vfprintf+0x1c0>
    aae6:	92 fe       	sbrs	r9, 2
    aae8:	06 c0       	rjmp	.+12     	; 0xaaf6 <vfprintf+0x1c4>
    aaea:	00 e2       	ldi	r16, 0x20	; 32
    aaec:	05 c0       	rjmp	.+10     	; 0xaaf8 <vfprintf+0x1c6>
    aaee:	0d e2       	ldi	r16, 0x2D	; 45
    aaf0:	03 c0       	rjmp	.+6      	; 0xaaf8 <vfprintf+0x1c6>
    aaf2:	0b e2       	ldi	r16, 0x2B	; 43
    aaf4:	01 c0       	rjmp	.+2      	; 0xaaf8 <vfprintf+0x1c6>
    aaf6:	00 e0       	ldi	r16, 0x00	; 0
    aaf8:	8c 85       	ldd	r24, Y+12	; 0x0c
    aafa:	8c 70       	andi	r24, 0x0C	; 12
    aafc:	19 f0       	breq	.+6      	; 0xab04 <vfprintf+0x1d2>
    aafe:	01 11       	cpse	r16, r1
    ab00:	43 c2       	rjmp	.+1158   	; 0xaf88 <vfprintf+0x656>
    ab02:	80 c2       	rjmp	.+1280   	; 0xb004 <vfprintf+0x6d2>
    ab04:	97 fe       	sbrs	r9, 7
    ab06:	10 c0       	rjmp	.+32     	; 0xab28 <vfprintf+0x1f6>
    ab08:	4c 0c       	add	r4, r12
    ab0a:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab0c:	f4 ff       	sbrs	r31, 4
    ab0e:	04 c0       	rjmp	.+8      	; 0xab18 <vfprintf+0x1e6>
    ab10:	8a 81       	ldd	r24, Y+2	; 0x02
    ab12:	81 33       	cpi	r24, 0x31	; 49
    ab14:	09 f4       	brne	.+2      	; 0xab18 <vfprintf+0x1e6>
    ab16:	4a 94       	dec	r4
    ab18:	14 14       	cp	r1, r4
    ab1a:	74 f5       	brge	.+92     	; 0xab78 <vfprintf+0x246>
    ab1c:	28 e0       	ldi	r18, 0x08	; 8
    ab1e:	24 15       	cp	r18, r4
    ab20:	78 f5       	brcc	.+94     	; 0xab80 <vfprintf+0x24e>
    ab22:	88 e0       	ldi	r24, 0x08	; 8
    ab24:	48 2e       	mov	r4, r24
    ab26:	2c c0       	rjmp	.+88     	; 0xab80 <vfprintf+0x24e>
    ab28:	96 fc       	sbrc	r9, 6
    ab2a:	2a c0       	rjmp	.+84     	; 0xab80 <vfprintf+0x24e>
    ab2c:	81 2f       	mov	r24, r17
    ab2e:	90 e0       	ldi	r25, 0x00	; 0
    ab30:	8c 15       	cp	r24, r12
    ab32:	9d 05       	cpc	r25, r13
    ab34:	9c f0       	brlt	.+38     	; 0xab5c <vfprintf+0x22a>
    ab36:	3c ef       	ldi	r19, 0xFC	; 252
    ab38:	c3 16       	cp	r12, r19
    ab3a:	3f ef       	ldi	r19, 0xFF	; 255
    ab3c:	d3 06       	cpc	r13, r19
    ab3e:	74 f0       	brlt	.+28     	; 0xab5c <vfprintf+0x22a>
    ab40:	89 2d       	mov	r24, r9
    ab42:	80 68       	ori	r24, 0x80	; 128
    ab44:	98 2e       	mov	r9, r24
    ab46:	0a c0       	rjmp	.+20     	; 0xab5c <vfprintf+0x22a>
    ab48:	e2 e0       	ldi	r30, 0x02	; 2
    ab4a:	f0 e0       	ldi	r31, 0x00	; 0
    ab4c:	ec 0f       	add	r30, r28
    ab4e:	fd 1f       	adc	r31, r29
    ab50:	e1 0f       	add	r30, r17
    ab52:	f1 1d       	adc	r31, r1
    ab54:	80 81       	ld	r24, Z
    ab56:	80 33       	cpi	r24, 0x30	; 48
    ab58:	19 f4       	brne	.+6      	; 0xab60 <vfprintf+0x22e>
    ab5a:	11 50       	subi	r17, 0x01	; 1
    ab5c:	11 11       	cpse	r17, r1
    ab5e:	f4 cf       	rjmp	.-24     	; 0xab48 <vfprintf+0x216>
    ab60:	97 fe       	sbrs	r9, 7
    ab62:	0e c0       	rjmp	.+28     	; 0xab80 <vfprintf+0x24e>
    ab64:	44 24       	eor	r4, r4
    ab66:	43 94       	inc	r4
    ab68:	41 0e       	add	r4, r17
    ab6a:	81 2f       	mov	r24, r17
    ab6c:	90 e0       	ldi	r25, 0x00	; 0
    ab6e:	c8 16       	cp	r12, r24
    ab70:	d9 06       	cpc	r13, r25
    ab72:	2c f4       	brge	.+10     	; 0xab7e <vfprintf+0x24c>
    ab74:	1c 19       	sub	r17, r12
    ab76:	04 c0       	rjmp	.+8      	; 0xab80 <vfprintf+0x24e>
    ab78:	44 24       	eor	r4, r4
    ab7a:	43 94       	inc	r4
    ab7c:	01 c0       	rjmp	.+2      	; 0xab80 <vfprintf+0x24e>
    ab7e:	10 e0       	ldi	r17, 0x00	; 0
    ab80:	97 fe       	sbrs	r9, 7
    ab82:	06 c0       	rjmp	.+12     	; 0xab90 <vfprintf+0x25e>
    ab84:	1c 14       	cp	r1, r12
    ab86:	1d 04       	cpc	r1, r13
    ab88:	34 f4       	brge	.+12     	; 0xab96 <vfprintf+0x264>
    ab8a:	c6 01       	movw	r24, r12
    ab8c:	01 96       	adiw	r24, 0x01	; 1
    ab8e:	05 c0       	rjmp	.+10     	; 0xab9a <vfprintf+0x268>
    ab90:	85 e0       	ldi	r24, 0x05	; 5
    ab92:	90 e0       	ldi	r25, 0x00	; 0
    ab94:	02 c0       	rjmp	.+4      	; 0xab9a <vfprintf+0x268>
    ab96:	81 e0       	ldi	r24, 0x01	; 1
    ab98:	90 e0       	ldi	r25, 0x00	; 0
    ab9a:	01 11       	cpse	r16, r1
    ab9c:	01 96       	adiw	r24, 0x01	; 1
    ab9e:	11 23       	and	r17, r17
    aba0:	31 f0       	breq	.+12     	; 0xabae <vfprintf+0x27c>
    aba2:	21 2f       	mov	r18, r17
    aba4:	30 e0       	ldi	r19, 0x00	; 0
    aba6:	2f 5f       	subi	r18, 0xFF	; 255
    aba8:	3f 4f       	sbci	r19, 0xFF	; 255
    abaa:	82 0f       	add	r24, r18
    abac:	93 1f       	adc	r25, r19
    abae:	25 2d       	mov	r18, r5
    abb0:	30 e0       	ldi	r19, 0x00	; 0
    abb2:	82 17       	cp	r24, r18
    abb4:	93 07       	cpc	r25, r19
    abb6:	14 f4       	brge	.+4      	; 0xabbc <vfprintf+0x28a>
    abb8:	58 1a       	sub	r5, r24
    abba:	01 c0       	rjmp	.+2      	; 0xabbe <vfprintf+0x28c>
    abbc:	51 2c       	mov	r5, r1
    abbe:	89 2d       	mov	r24, r9
    abc0:	89 70       	andi	r24, 0x09	; 9
    abc2:	41 f4       	brne	.+16     	; 0xabd4 <vfprintf+0x2a2>
    abc4:	55 20       	and	r5, r5
    abc6:	31 f0       	breq	.+12     	; 0xabd4 <vfprintf+0x2a2>
    abc8:	b7 01       	movw	r22, r14
    abca:	80 e2       	ldi	r24, 0x20	; 32
    abcc:	90 e0       	ldi	r25, 0x00	; 0
    abce:	92 d4       	rcall	.+2340   	; 0xb4f4 <fputc>
    abd0:	5a 94       	dec	r5
    abd2:	f8 cf       	rjmp	.-16     	; 0xabc4 <vfprintf+0x292>
    abd4:	00 23       	and	r16, r16
    abd6:	21 f0       	breq	.+8      	; 0xabe0 <vfprintf+0x2ae>
    abd8:	b7 01       	movw	r22, r14
    abda:	80 2f       	mov	r24, r16
    abdc:	90 e0       	ldi	r25, 0x00	; 0
    abde:	8a d4       	rcall	.+2324   	; 0xb4f4 <fputc>
    abe0:	93 fc       	sbrc	r9, 3
    abe2:	08 c0       	rjmp	.+16     	; 0xabf4 <vfprintf+0x2c2>
    abe4:	55 20       	and	r5, r5
    abe6:	31 f0       	breq	.+12     	; 0xabf4 <vfprintf+0x2c2>
    abe8:	b7 01       	movw	r22, r14
    abea:	80 e3       	ldi	r24, 0x30	; 48
    abec:	90 e0       	ldi	r25, 0x00	; 0
    abee:	82 d4       	rcall	.+2308   	; 0xb4f4 <fputc>
    abf0:	5a 94       	dec	r5
    abf2:	f8 cf       	rjmp	.-16     	; 0xabe4 <vfprintf+0x2b2>
    abf4:	97 fe       	sbrs	r9, 7
    abf6:	4a c0       	rjmp	.+148    	; 0xac8c <vfprintf+0x35a>
    abf8:	46 01       	movw	r8, r12
    abfa:	d7 fe       	sbrs	r13, 7
    abfc:	02 c0       	rjmp	.+4      	; 0xac02 <vfprintf+0x2d0>
    abfe:	81 2c       	mov	r8, r1
    ac00:	91 2c       	mov	r9, r1
    ac02:	c6 01       	movw	r24, r12
    ac04:	88 19       	sub	r24, r8
    ac06:	99 09       	sbc	r25, r9
    ac08:	f3 01       	movw	r30, r6
    ac0a:	e8 0f       	add	r30, r24
    ac0c:	f9 1f       	adc	r31, r25
    ac0e:	fe 87       	std	Y+14, r31	; 0x0e
    ac10:	ed 87       	std	Y+13, r30	; 0x0d
    ac12:	96 01       	movw	r18, r12
    ac14:	24 19       	sub	r18, r4
    ac16:	31 09       	sbc	r19, r1
    ac18:	38 8b       	std	Y+16, r19	; 0x10
    ac1a:	2f 87       	std	Y+15, r18	; 0x0f
    ac1c:	01 2f       	mov	r16, r17
    ac1e:	10 e0       	ldi	r17, 0x00	; 0
    ac20:	11 95       	neg	r17
    ac22:	01 95       	neg	r16
    ac24:	11 09       	sbc	r17, r1
    ac26:	3f ef       	ldi	r19, 0xFF	; 255
    ac28:	83 16       	cp	r8, r19
    ac2a:	93 06       	cpc	r9, r19
    ac2c:	21 f4       	brne	.+8      	; 0xac36 <vfprintf+0x304>
    ac2e:	b7 01       	movw	r22, r14
    ac30:	8e e2       	ldi	r24, 0x2E	; 46
    ac32:	90 e0       	ldi	r25, 0x00	; 0
    ac34:	5f d4       	rcall	.+2238   	; 0xb4f4 <fputc>
    ac36:	c8 14       	cp	r12, r8
    ac38:	d9 04       	cpc	r13, r9
    ac3a:	4c f0       	brlt	.+18     	; 0xac4e <vfprintf+0x31c>
    ac3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    ac3e:	98 89       	ldd	r25, Y+16	; 0x10
    ac40:	88 15       	cp	r24, r8
    ac42:	99 05       	cpc	r25, r9
    ac44:	24 f4       	brge	.+8      	; 0xac4e <vfprintf+0x31c>
    ac46:	ed 85       	ldd	r30, Y+13	; 0x0d
    ac48:	fe 85       	ldd	r31, Y+14	; 0x0e
    ac4a:	81 81       	ldd	r24, Z+1	; 0x01
    ac4c:	01 c0       	rjmp	.+2      	; 0xac50 <vfprintf+0x31e>
    ac4e:	80 e3       	ldi	r24, 0x30	; 48
    ac50:	f1 e0       	ldi	r31, 0x01	; 1
    ac52:	8f 1a       	sub	r8, r31
    ac54:	91 08       	sbc	r9, r1
    ac56:	2d 85       	ldd	r18, Y+13	; 0x0d
    ac58:	3e 85       	ldd	r19, Y+14	; 0x0e
    ac5a:	2f 5f       	subi	r18, 0xFF	; 255
    ac5c:	3f 4f       	sbci	r19, 0xFF	; 255
    ac5e:	3e 87       	std	Y+14, r19	; 0x0e
    ac60:	2d 87       	std	Y+13, r18	; 0x0d
    ac62:	80 16       	cp	r8, r16
    ac64:	91 06       	cpc	r9, r17
    ac66:	24 f0       	brlt	.+8      	; 0xac70 <vfprintf+0x33e>
    ac68:	b7 01       	movw	r22, r14
    ac6a:	90 e0       	ldi	r25, 0x00	; 0
    ac6c:	43 d4       	rcall	.+2182   	; 0xb4f4 <fputc>
    ac6e:	db cf       	rjmp	.-74     	; 0xac26 <vfprintf+0x2f4>
    ac70:	c8 14       	cp	r12, r8
    ac72:	d9 04       	cpc	r13, r9
    ac74:	41 f4       	brne	.+16     	; 0xac86 <vfprintf+0x354>
    ac76:	9a 81       	ldd	r25, Y+2	; 0x02
    ac78:	96 33       	cpi	r25, 0x36	; 54
    ac7a:	20 f4       	brcc	.+8      	; 0xac84 <vfprintf+0x352>
    ac7c:	95 33       	cpi	r25, 0x35	; 53
    ac7e:	19 f4       	brne	.+6      	; 0xac86 <vfprintf+0x354>
    ac80:	3c 85       	ldd	r19, Y+12	; 0x0c
    ac82:	34 ff       	sbrs	r19, 4
    ac84:	81 e3       	ldi	r24, 0x31	; 49
    ac86:	b7 01       	movw	r22, r14
    ac88:	90 e0       	ldi	r25, 0x00	; 0
    ac8a:	48 c0       	rjmp	.+144    	; 0xad1c <vfprintf+0x3ea>
    ac8c:	8a 81       	ldd	r24, Y+2	; 0x02
    ac8e:	81 33       	cpi	r24, 0x31	; 49
    ac90:	19 f0       	breq	.+6      	; 0xac98 <vfprintf+0x366>
    ac92:	9c 85       	ldd	r25, Y+12	; 0x0c
    ac94:	9f 7e       	andi	r25, 0xEF	; 239
    ac96:	9c 87       	std	Y+12, r25	; 0x0c
    ac98:	b7 01       	movw	r22, r14
    ac9a:	90 e0       	ldi	r25, 0x00	; 0
    ac9c:	2b d4       	rcall	.+2134   	; 0xb4f4 <fputc>
    ac9e:	11 11       	cpse	r17, r1
    aca0:	05 c0       	rjmp	.+10     	; 0xacac <vfprintf+0x37a>
    aca2:	94 fc       	sbrc	r9, 4
    aca4:	16 c0       	rjmp	.+44     	; 0xacd2 <vfprintf+0x3a0>
    aca6:	85 e6       	ldi	r24, 0x65	; 101
    aca8:	90 e0       	ldi	r25, 0x00	; 0
    acaa:	15 c0       	rjmp	.+42     	; 0xacd6 <vfprintf+0x3a4>
    acac:	b7 01       	movw	r22, r14
    acae:	8e e2       	ldi	r24, 0x2E	; 46
    acb0:	90 e0       	ldi	r25, 0x00	; 0
    acb2:	20 d4       	rcall	.+2112   	; 0xb4f4 <fputc>
    acb4:	1e 5f       	subi	r17, 0xFE	; 254
    acb6:	82 e0       	ldi	r24, 0x02	; 2
    acb8:	01 e0       	ldi	r16, 0x01	; 1
    acba:	08 0f       	add	r16, r24
    acbc:	f3 01       	movw	r30, r6
    acbe:	e8 0f       	add	r30, r24
    acc0:	f1 1d       	adc	r31, r1
    acc2:	80 81       	ld	r24, Z
    acc4:	b7 01       	movw	r22, r14
    acc6:	90 e0       	ldi	r25, 0x00	; 0
    acc8:	15 d4       	rcall	.+2090   	; 0xb4f4 <fputc>
    acca:	80 2f       	mov	r24, r16
    accc:	01 13       	cpse	r16, r17
    acce:	f4 cf       	rjmp	.-24     	; 0xacb8 <vfprintf+0x386>
    acd0:	e8 cf       	rjmp	.-48     	; 0xaca2 <vfprintf+0x370>
    acd2:	85 e4       	ldi	r24, 0x45	; 69
    acd4:	90 e0       	ldi	r25, 0x00	; 0
    acd6:	b7 01       	movw	r22, r14
    acd8:	0d d4       	rcall	.+2074   	; 0xb4f4 <fputc>
    acda:	d7 fc       	sbrc	r13, 7
    acdc:	06 c0       	rjmp	.+12     	; 0xacea <vfprintf+0x3b8>
    acde:	c1 14       	cp	r12, r1
    ace0:	d1 04       	cpc	r13, r1
    ace2:	41 f4       	brne	.+16     	; 0xacf4 <vfprintf+0x3c2>
    ace4:	ec 85       	ldd	r30, Y+12	; 0x0c
    ace6:	e4 ff       	sbrs	r30, 4
    ace8:	05 c0       	rjmp	.+10     	; 0xacf4 <vfprintf+0x3c2>
    acea:	d1 94       	neg	r13
    acec:	c1 94       	neg	r12
    acee:	d1 08       	sbc	r13, r1
    acf0:	8d e2       	ldi	r24, 0x2D	; 45
    acf2:	01 c0       	rjmp	.+2      	; 0xacf6 <vfprintf+0x3c4>
    acf4:	8b e2       	ldi	r24, 0x2B	; 43
    acf6:	b7 01       	movw	r22, r14
    acf8:	90 e0       	ldi	r25, 0x00	; 0
    acfa:	fc d3       	rcall	.+2040   	; 0xb4f4 <fputc>
    acfc:	80 e3       	ldi	r24, 0x30	; 48
    acfe:	2a e0       	ldi	r18, 0x0A	; 10
    ad00:	c2 16       	cp	r12, r18
    ad02:	d1 04       	cpc	r13, r1
    ad04:	2c f0       	brlt	.+10     	; 0xad10 <vfprintf+0x3de>
    ad06:	8f 5f       	subi	r24, 0xFF	; 255
    ad08:	fa e0       	ldi	r31, 0x0A	; 10
    ad0a:	cf 1a       	sub	r12, r31
    ad0c:	d1 08       	sbc	r13, r1
    ad0e:	f7 cf       	rjmp	.-18     	; 0xacfe <vfprintf+0x3cc>
    ad10:	b7 01       	movw	r22, r14
    ad12:	90 e0       	ldi	r25, 0x00	; 0
    ad14:	ef d3       	rcall	.+2014   	; 0xb4f4 <fputc>
    ad16:	b7 01       	movw	r22, r14
    ad18:	c6 01       	movw	r24, r12
    ad1a:	c0 96       	adiw	r24, 0x30	; 48
    ad1c:	eb d3       	rcall	.+2006   	; 0xb4f4 <fputc>
    ad1e:	49 c1       	rjmp	.+658    	; 0xafb2 <vfprintf+0x680>
    ad20:	83 36       	cpi	r24, 0x63	; 99
    ad22:	31 f0       	breq	.+12     	; 0xad30 <vfprintf+0x3fe>
    ad24:	83 37       	cpi	r24, 0x73	; 115
    ad26:	79 f0       	breq	.+30     	; 0xad46 <vfprintf+0x414>
    ad28:	83 35       	cpi	r24, 0x53	; 83
    ad2a:	09 f0       	breq	.+2      	; 0xad2e <vfprintf+0x3fc>
    ad2c:	52 c0       	rjmp	.+164    	; 0xadd2 <vfprintf+0x4a0>
    ad2e:	1f c0       	rjmp	.+62     	; 0xad6e <vfprintf+0x43c>
    ad30:	56 01       	movw	r10, r12
    ad32:	32 e0       	ldi	r19, 0x02	; 2
    ad34:	a3 0e       	add	r10, r19
    ad36:	b1 1c       	adc	r11, r1
    ad38:	f6 01       	movw	r30, r12
    ad3a:	80 81       	ld	r24, Z
    ad3c:	89 83       	std	Y+1, r24	; 0x01
    ad3e:	01 e0       	ldi	r16, 0x01	; 1
    ad40:	10 e0       	ldi	r17, 0x00	; 0
    ad42:	63 01       	movw	r12, r6
    ad44:	11 c0       	rjmp	.+34     	; 0xad68 <vfprintf+0x436>
    ad46:	56 01       	movw	r10, r12
    ad48:	f2 e0       	ldi	r31, 0x02	; 2
    ad4a:	af 0e       	add	r10, r31
    ad4c:	b1 1c       	adc	r11, r1
    ad4e:	f6 01       	movw	r30, r12
    ad50:	c0 80       	ld	r12, Z
    ad52:	d1 80       	ldd	r13, Z+1	; 0x01
    ad54:	96 fe       	sbrs	r9, 6
    ad56:	03 c0       	rjmp	.+6      	; 0xad5e <vfprintf+0x42c>
    ad58:	61 2f       	mov	r22, r17
    ad5a:	70 e0       	ldi	r23, 0x00	; 0
    ad5c:	02 c0       	rjmp	.+4      	; 0xad62 <vfprintf+0x430>
    ad5e:	6f ef       	ldi	r22, 0xFF	; 255
    ad60:	7f ef       	ldi	r23, 0xFF	; 255
    ad62:	c6 01       	movw	r24, r12
    ad64:	bc d3       	rcall	.+1912   	; 0xb4de <strnlen>
    ad66:	8c 01       	movw	r16, r24
    ad68:	f9 2d       	mov	r31, r9
    ad6a:	ff 77       	andi	r31, 0x7F	; 127
    ad6c:	13 c0       	rjmp	.+38     	; 0xad94 <vfprintf+0x462>
    ad6e:	56 01       	movw	r10, r12
    ad70:	22 e0       	ldi	r18, 0x02	; 2
    ad72:	a2 0e       	add	r10, r18
    ad74:	b1 1c       	adc	r11, r1
    ad76:	f6 01       	movw	r30, r12
    ad78:	c0 80       	ld	r12, Z
    ad7a:	d1 80       	ldd	r13, Z+1	; 0x01
    ad7c:	96 fe       	sbrs	r9, 6
    ad7e:	03 c0       	rjmp	.+6      	; 0xad86 <vfprintf+0x454>
    ad80:	61 2f       	mov	r22, r17
    ad82:	70 e0       	ldi	r23, 0x00	; 0
    ad84:	02 c0       	rjmp	.+4      	; 0xad8a <vfprintf+0x458>
    ad86:	6f ef       	ldi	r22, 0xFF	; 255
    ad88:	7f ef       	ldi	r23, 0xFF	; 255
    ad8a:	c6 01       	movw	r24, r12
    ad8c:	8d d3       	rcall	.+1818   	; 0xb4a8 <strnlen_P>
    ad8e:	8c 01       	movw	r16, r24
    ad90:	f9 2d       	mov	r31, r9
    ad92:	f0 68       	ori	r31, 0x80	; 128
    ad94:	9f 2e       	mov	r9, r31
    ad96:	f3 fd       	sbrc	r31, 3
    ad98:	18 c0       	rjmp	.+48     	; 0xadca <vfprintf+0x498>
    ad9a:	85 2d       	mov	r24, r5
    ad9c:	90 e0       	ldi	r25, 0x00	; 0
    ad9e:	08 17       	cp	r16, r24
    ada0:	19 07       	cpc	r17, r25
    ada2:	98 f4       	brcc	.+38     	; 0xadca <vfprintf+0x498>
    ada4:	b7 01       	movw	r22, r14
    ada6:	80 e2       	ldi	r24, 0x20	; 32
    ada8:	90 e0       	ldi	r25, 0x00	; 0
    adaa:	a4 d3       	rcall	.+1864   	; 0xb4f4 <fputc>
    adac:	5a 94       	dec	r5
    adae:	f5 cf       	rjmp	.-22     	; 0xad9a <vfprintf+0x468>
    adb0:	f6 01       	movw	r30, r12
    adb2:	97 fc       	sbrc	r9, 7
    adb4:	85 91       	lpm	r24, Z+
    adb6:	97 fe       	sbrs	r9, 7
    adb8:	81 91       	ld	r24, Z+
    adba:	6f 01       	movw	r12, r30
    adbc:	b7 01       	movw	r22, r14
    adbe:	90 e0       	ldi	r25, 0x00	; 0
    adc0:	99 d3       	rcall	.+1842   	; 0xb4f4 <fputc>
    adc2:	51 10       	cpse	r5, r1
    adc4:	5a 94       	dec	r5
    adc6:	01 50       	subi	r16, 0x01	; 1
    adc8:	11 09       	sbc	r17, r1
    adca:	01 15       	cp	r16, r1
    adcc:	11 05       	cpc	r17, r1
    adce:	81 f7       	brne	.-32     	; 0xadb0 <vfprintf+0x47e>
    add0:	f0 c0       	rjmp	.+480    	; 0xafb2 <vfprintf+0x680>
    add2:	84 36       	cpi	r24, 0x64	; 100
    add4:	11 f0       	breq	.+4      	; 0xadda <vfprintf+0x4a8>
    add6:	89 36       	cpi	r24, 0x69	; 105
    add8:	59 f5       	brne	.+86     	; 0xae30 <vfprintf+0x4fe>
    adda:	56 01       	movw	r10, r12
    addc:	97 fe       	sbrs	r9, 7
    adde:	09 c0       	rjmp	.+18     	; 0xadf2 <vfprintf+0x4c0>
    ade0:	24 e0       	ldi	r18, 0x04	; 4
    ade2:	a2 0e       	add	r10, r18
    ade4:	b1 1c       	adc	r11, r1
    ade6:	f6 01       	movw	r30, r12
    ade8:	60 81       	ld	r22, Z
    adea:	71 81       	ldd	r23, Z+1	; 0x01
    adec:	82 81       	ldd	r24, Z+2	; 0x02
    adee:	93 81       	ldd	r25, Z+3	; 0x03
    adf0:	0a c0       	rjmp	.+20     	; 0xae06 <vfprintf+0x4d4>
    adf2:	f2 e0       	ldi	r31, 0x02	; 2
    adf4:	af 0e       	add	r10, r31
    adf6:	b1 1c       	adc	r11, r1
    adf8:	f6 01       	movw	r30, r12
    adfa:	60 81       	ld	r22, Z
    adfc:	71 81       	ldd	r23, Z+1	; 0x01
    adfe:	07 2e       	mov	r0, r23
    ae00:	00 0c       	add	r0, r0
    ae02:	88 0b       	sbc	r24, r24
    ae04:	99 0b       	sbc	r25, r25
    ae06:	f9 2d       	mov	r31, r9
    ae08:	ff 76       	andi	r31, 0x6F	; 111
    ae0a:	9f 2e       	mov	r9, r31
    ae0c:	97 ff       	sbrs	r25, 7
    ae0e:	09 c0       	rjmp	.+18     	; 0xae22 <vfprintf+0x4f0>
    ae10:	90 95       	com	r25
    ae12:	80 95       	com	r24
    ae14:	70 95       	com	r23
    ae16:	61 95       	neg	r22
    ae18:	7f 4f       	sbci	r23, 0xFF	; 255
    ae1a:	8f 4f       	sbci	r24, 0xFF	; 255
    ae1c:	9f 4f       	sbci	r25, 0xFF	; 255
    ae1e:	f0 68       	ori	r31, 0x80	; 128
    ae20:	9f 2e       	mov	r9, r31
    ae22:	2a e0       	ldi	r18, 0x0A	; 10
    ae24:	30 e0       	ldi	r19, 0x00	; 0
    ae26:	a3 01       	movw	r20, r6
    ae28:	d9 d3       	rcall	.+1970   	; 0xb5dc <__ultoa_invert>
    ae2a:	c8 2e       	mov	r12, r24
    ae2c:	c6 18       	sub	r12, r6
    ae2e:	3e c0       	rjmp	.+124    	; 0xaeac <vfprintf+0x57a>
    ae30:	09 2d       	mov	r16, r9
    ae32:	85 37       	cpi	r24, 0x75	; 117
    ae34:	21 f4       	brne	.+8      	; 0xae3e <vfprintf+0x50c>
    ae36:	0f 7e       	andi	r16, 0xEF	; 239
    ae38:	2a e0       	ldi	r18, 0x0A	; 10
    ae3a:	30 e0       	ldi	r19, 0x00	; 0
    ae3c:	1d c0       	rjmp	.+58     	; 0xae78 <vfprintf+0x546>
    ae3e:	09 7f       	andi	r16, 0xF9	; 249
    ae40:	8f 36       	cpi	r24, 0x6F	; 111
    ae42:	91 f0       	breq	.+36     	; 0xae68 <vfprintf+0x536>
    ae44:	18 f4       	brcc	.+6      	; 0xae4c <vfprintf+0x51a>
    ae46:	88 35       	cpi	r24, 0x58	; 88
    ae48:	59 f0       	breq	.+22     	; 0xae60 <vfprintf+0x52e>
    ae4a:	bc c0       	rjmp	.+376    	; 0xafc4 <vfprintf+0x692>
    ae4c:	80 37       	cpi	r24, 0x70	; 112
    ae4e:	19 f0       	breq	.+6      	; 0xae56 <vfprintf+0x524>
    ae50:	88 37       	cpi	r24, 0x78	; 120
    ae52:	11 f0       	breq	.+4      	; 0xae58 <vfprintf+0x526>
    ae54:	b7 c0       	rjmp	.+366    	; 0xafc4 <vfprintf+0x692>
    ae56:	00 61       	ori	r16, 0x10	; 16
    ae58:	04 ff       	sbrs	r16, 4
    ae5a:	09 c0       	rjmp	.+18     	; 0xae6e <vfprintf+0x53c>
    ae5c:	04 60       	ori	r16, 0x04	; 4
    ae5e:	07 c0       	rjmp	.+14     	; 0xae6e <vfprintf+0x53c>
    ae60:	94 fe       	sbrs	r9, 4
    ae62:	08 c0       	rjmp	.+16     	; 0xae74 <vfprintf+0x542>
    ae64:	06 60       	ori	r16, 0x06	; 6
    ae66:	06 c0       	rjmp	.+12     	; 0xae74 <vfprintf+0x542>
    ae68:	28 e0       	ldi	r18, 0x08	; 8
    ae6a:	30 e0       	ldi	r19, 0x00	; 0
    ae6c:	05 c0       	rjmp	.+10     	; 0xae78 <vfprintf+0x546>
    ae6e:	20 e1       	ldi	r18, 0x10	; 16
    ae70:	30 e0       	ldi	r19, 0x00	; 0
    ae72:	02 c0       	rjmp	.+4      	; 0xae78 <vfprintf+0x546>
    ae74:	20 e1       	ldi	r18, 0x10	; 16
    ae76:	32 e0       	ldi	r19, 0x02	; 2
    ae78:	56 01       	movw	r10, r12
    ae7a:	07 ff       	sbrs	r16, 7
    ae7c:	09 c0       	rjmp	.+18     	; 0xae90 <vfprintf+0x55e>
    ae7e:	84 e0       	ldi	r24, 0x04	; 4
    ae80:	a8 0e       	add	r10, r24
    ae82:	b1 1c       	adc	r11, r1
    ae84:	f6 01       	movw	r30, r12
    ae86:	60 81       	ld	r22, Z
    ae88:	71 81       	ldd	r23, Z+1	; 0x01
    ae8a:	82 81       	ldd	r24, Z+2	; 0x02
    ae8c:	93 81       	ldd	r25, Z+3	; 0x03
    ae8e:	08 c0       	rjmp	.+16     	; 0xaea0 <vfprintf+0x56e>
    ae90:	f2 e0       	ldi	r31, 0x02	; 2
    ae92:	af 0e       	add	r10, r31
    ae94:	b1 1c       	adc	r11, r1
    ae96:	f6 01       	movw	r30, r12
    ae98:	60 81       	ld	r22, Z
    ae9a:	71 81       	ldd	r23, Z+1	; 0x01
    ae9c:	80 e0       	ldi	r24, 0x00	; 0
    ae9e:	90 e0       	ldi	r25, 0x00	; 0
    aea0:	a3 01       	movw	r20, r6
    aea2:	9c d3       	rcall	.+1848   	; 0xb5dc <__ultoa_invert>
    aea4:	c8 2e       	mov	r12, r24
    aea6:	c6 18       	sub	r12, r6
    aea8:	0f 77       	andi	r16, 0x7F	; 127
    aeaa:	90 2e       	mov	r9, r16
    aeac:	96 fe       	sbrs	r9, 6
    aeae:	0b c0       	rjmp	.+22     	; 0xaec6 <vfprintf+0x594>
    aeb0:	09 2d       	mov	r16, r9
    aeb2:	0e 7f       	andi	r16, 0xFE	; 254
    aeb4:	c1 16       	cp	r12, r17
    aeb6:	50 f4       	brcc	.+20     	; 0xaecc <vfprintf+0x59a>
    aeb8:	94 fe       	sbrs	r9, 4
    aeba:	0a c0       	rjmp	.+20     	; 0xaed0 <vfprintf+0x59e>
    aebc:	92 fc       	sbrc	r9, 2
    aebe:	08 c0       	rjmp	.+16     	; 0xaed0 <vfprintf+0x59e>
    aec0:	09 2d       	mov	r16, r9
    aec2:	0e 7e       	andi	r16, 0xEE	; 238
    aec4:	05 c0       	rjmp	.+10     	; 0xaed0 <vfprintf+0x59e>
    aec6:	dc 2c       	mov	r13, r12
    aec8:	09 2d       	mov	r16, r9
    aeca:	03 c0       	rjmp	.+6      	; 0xaed2 <vfprintf+0x5a0>
    aecc:	dc 2c       	mov	r13, r12
    aece:	01 c0       	rjmp	.+2      	; 0xaed2 <vfprintf+0x5a0>
    aed0:	d1 2e       	mov	r13, r17
    aed2:	04 ff       	sbrs	r16, 4
    aed4:	0d c0       	rjmp	.+26     	; 0xaef0 <vfprintf+0x5be>
    aed6:	fe 01       	movw	r30, r28
    aed8:	ec 0d       	add	r30, r12
    aeda:	f1 1d       	adc	r31, r1
    aedc:	80 81       	ld	r24, Z
    aede:	80 33       	cpi	r24, 0x30	; 48
    aee0:	11 f4       	brne	.+4      	; 0xaee6 <vfprintf+0x5b4>
    aee2:	09 7e       	andi	r16, 0xE9	; 233
    aee4:	09 c0       	rjmp	.+18     	; 0xaef8 <vfprintf+0x5c6>
    aee6:	02 ff       	sbrs	r16, 2
    aee8:	06 c0       	rjmp	.+12     	; 0xaef6 <vfprintf+0x5c4>
    aeea:	d3 94       	inc	r13
    aeec:	d3 94       	inc	r13
    aeee:	04 c0       	rjmp	.+8      	; 0xaef8 <vfprintf+0x5c6>
    aef0:	80 2f       	mov	r24, r16
    aef2:	86 78       	andi	r24, 0x86	; 134
    aef4:	09 f0       	breq	.+2      	; 0xaef8 <vfprintf+0x5c6>
    aef6:	d3 94       	inc	r13
    aef8:	03 fd       	sbrc	r16, 3
    aefa:	10 c0       	rjmp	.+32     	; 0xaf1c <vfprintf+0x5ea>
    aefc:	00 ff       	sbrs	r16, 0
    aefe:	06 c0       	rjmp	.+12     	; 0xaf0c <vfprintf+0x5da>
    af00:	1c 2d       	mov	r17, r12
    af02:	d5 14       	cp	r13, r5
    af04:	78 f4       	brcc	.+30     	; 0xaf24 <vfprintf+0x5f2>
    af06:	15 0d       	add	r17, r5
    af08:	1d 19       	sub	r17, r13
    af0a:	0c c0       	rjmp	.+24     	; 0xaf24 <vfprintf+0x5f2>
    af0c:	d5 14       	cp	r13, r5
    af0e:	50 f4       	brcc	.+20     	; 0xaf24 <vfprintf+0x5f2>
    af10:	b7 01       	movw	r22, r14
    af12:	80 e2       	ldi	r24, 0x20	; 32
    af14:	90 e0       	ldi	r25, 0x00	; 0
    af16:	ee d2       	rcall	.+1500   	; 0xb4f4 <fputc>
    af18:	d3 94       	inc	r13
    af1a:	f8 cf       	rjmp	.-16     	; 0xaf0c <vfprintf+0x5da>
    af1c:	d5 14       	cp	r13, r5
    af1e:	10 f4       	brcc	.+4      	; 0xaf24 <vfprintf+0x5f2>
    af20:	5d 18       	sub	r5, r13
    af22:	01 c0       	rjmp	.+2      	; 0xaf26 <vfprintf+0x5f4>
    af24:	51 2c       	mov	r5, r1
    af26:	04 ff       	sbrs	r16, 4
    af28:	0f c0       	rjmp	.+30     	; 0xaf48 <vfprintf+0x616>
    af2a:	b7 01       	movw	r22, r14
    af2c:	80 e3       	ldi	r24, 0x30	; 48
    af2e:	90 e0       	ldi	r25, 0x00	; 0
    af30:	e1 d2       	rcall	.+1474   	; 0xb4f4 <fputc>
    af32:	02 ff       	sbrs	r16, 2
    af34:	16 c0       	rjmp	.+44     	; 0xaf62 <vfprintf+0x630>
    af36:	01 fd       	sbrc	r16, 1
    af38:	03 c0       	rjmp	.+6      	; 0xaf40 <vfprintf+0x60e>
    af3a:	88 e7       	ldi	r24, 0x78	; 120
    af3c:	90 e0       	ldi	r25, 0x00	; 0
    af3e:	02 c0       	rjmp	.+4      	; 0xaf44 <vfprintf+0x612>
    af40:	88 e5       	ldi	r24, 0x58	; 88
    af42:	90 e0       	ldi	r25, 0x00	; 0
    af44:	b7 01       	movw	r22, r14
    af46:	0c c0       	rjmp	.+24     	; 0xaf60 <vfprintf+0x62e>
    af48:	80 2f       	mov	r24, r16
    af4a:	86 78       	andi	r24, 0x86	; 134
    af4c:	51 f0       	breq	.+20     	; 0xaf62 <vfprintf+0x630>
    af4e:	01 ff       	sbrs	r16, 1
    af50:	02 c0       	rjmp	.+4      	; 0xaf56 <vfprintf+0x624>
    af52:	8b e2       	ldi	r24, 0x2B	; 43
    af54:	01 c0       	rjmp	.+2      	; 0xaf58 <vfprintf+0x626>
    af56:	80 e2       	ldi	r24, 0x20	; 32
    af58:	07 fd       	sbrc	r16, 7
    af5a:	8d e2       	ldi	r24, 0x2D	; 45
    af5c:	b7 01       	movw	r22, r14
    af5e:	90 e0       	ldi	r25, 0x00	; 0
    af60:	c9 d2       	rcall	.+1426   	; 0xb4f4 <fputc>
    af62:	c1 16       	cp	r12, r17
    af64:	30 f4       	brcc	.+12     	; 0xaf72 <vfprintf+0x640>
    af66:	b7 01       	movw	r22, r14
    af68:	80 e3       	ldi	r24, 0x30	; 48
    af6a:	90 e0       	ldi	r25, 0x00	; 0
    af6c:	c3 d2       	rcall	.+1414   	; 0xb4f4 <fputc>
    af6e:	11 50       	subi	r17, 0x01	; 1
    af70:	f8 cf       	rjmp	.-16     	; 0xaf62 <vfprintf+0x630>
    af72:	ca 94       	dec	r12
    af74:	f3 01       	movw	r30, r6
    af76:	ec 0d       	add	r30, r12
    af78:	f1 1d       	adc	r31, r1
    af7a:	80 81       	ld	r24, Z
    af7c:	b7 01       	movw	r22, r14
    af7e:	90 e0       	ldi	r25, 0x00	; 0
    af80:	b9 d2       	rcall	.+1394   	; 0xb4f4 <fputc>
    af82:	c1 10       	cpse	r12, r1
    af84:	f6 cf       	rjmp	.-20     	; 0xaf72 <vfprintf+0x640>
    af86:	15 c0       	rjmp	.+42     	; 0xafb2 <vfprintf+0x680>
    af88:	f4 e0       	ldi	r31, 0x04	; 4
    af8a:	f5 15       	cp	r31, r5
    af8c:	50 f5       	brcc	.+84     	; 0xafe2 <vfprintf+0x6b0>
    af8e:	84 e0       	ldi	r24, 0x04	; 4
    af90:	58 1a       	sub	r5, r24
    af92:	93 fe       	sbrs	r9, 3
    af94:	1e c0       	rjmp	.+60     	; 0xafd2 <vfprintf+0x6a0>
    af96:	01 11       	cpse	r16, r1
    af98:	25 c0       	rjmp	.+74     	; 0xafe4 <vfprintf+0x6b2>
    af9a:	2c 85       	ldd	r18, Y+12	; 0x0c
    af9c:	23 ff       	sbrs	r18, 3
    af9e:	27 c0       	rjmp	.+78     	; 0xafee <vfprintf+0x6bc>
    afa0:	0e ee       	ldi	r16, 0xEE	; 238
    afa2:	18 e0       	ldi	r17, 0x08	; 8
    afa4:	39 2d       	mov	r19, r9
    afa6:	30 71       	andi	r19, 0x10	; 16
    afa8:	93 2e       	mov	r9, r19
    afaa:	f8 01       	movw	r30, r16
    afac:	84 91       	lpm	r24, Z
    afae:	81 11       	cpse	r24, r1
    afb0:	21 c0       	rjmp	.+66     	; 0xaff4 <vfprintf+0x6c2>
    afb2:	55 20       	and	r5, r5
    afb4:	09 f4       	brne	.+2      	; 0xafb8 <vfprintf+0x686>
    afb6:	fc cc       	rjmp	.-1544   	; 0xa9b0 <vfprintf+0x7e>
    afb8:	b7 01       	movw	r22, r14
    afba:	80 e2       	ldi	r24, 0x20	; 32
    afbc:	90 e0       	ldi	r25, 0x00	; 0
    afbe:	9a d2       	rcall	.+1332   	; 0xb4f4 <fputc>
    afc0:	5a 94       	dec	r5
    afc2:	f7 cf       	rjmp	.-18     	; 0xafb2 <vfprintf+0x680>
    afc4:	f7 01       	movw	r30, r14
    afc6:	86 81       	ldd	r24, Z+6	; 0x06
    afc8:	97 81       	ldd	r25, Z+7	; 0x07
    afca:	23 c0       	rjmp	.+70     	; 0xb012 <vfprintf+0x6e0>
    afcc:	8f ef       	ldi	r24, 0xFF	; 255
    afce:	9f ef       	ldi	r25, 0xFF	; 255
    afd0:	20 c0       	rjmp	.+64     	; 0xb012 <vfprintf+0x6e0>
    afd2:	b7 01       	movw	r22, r14
    afd4:	80 e2       	ldi	r24, 0x20	; 32
    afd6:	90 e0       	ldi	r25, 0x00	; 0
    afd8:	8d d2       	rcall	.+1306   	; 0xb4f4 <fputc>
    afda:	5a 94       	dec	r5
    afdc:	51 10       	cpse	r5, r1
    afde:	f9 cf       	rjmp	.-14     	; 0xafd2 <vfprintf+0x6a0>
    afe0:	da cf       	rjmp	.-76     	; 0xaf96 <vfprintf+0x664>
    afe2:	51 2c       	mov	r5, r1
    afe4:	b7 01       	movw	r22, r14
    afe6:	80 2f       	mov	r24, r16
    afe8:	90 e0       	ldi	r25, 0x00	; 0
    afea:	84 d2       	rcall	.+1288   	; 0xb4f4 <fputc>
    afec:	d6 cf       	rjmp	.-84     	; 0xaf9a <vfprintf+0x668>
    afee:	02 ef       	ldi	r16, 0xF2	; 242
    aff0:	18 e0       	ldi	r17, 0x08	; 8
    aff2:	d8 cf       	rjmp	.-80     	; 0xafa4 <vfprintf+0x672>
    aff4:	91 10       	cpse	r9, r1
    aff6:	80 52       	subi	r24, 0x20	; 32
    aff8:	b7 01       	movw	r22, r14
    affa:	90 e0       	ldi	r25, 0x00	; 0
    affc:	7b d2       	rcall	.+1270   	; 0xb4f4 <fputc>
    affe:	0f 5f       	subi	r16, 0xFF	; 255
    b000:	1f 4f       	sbci	r17, 0xFF	; 255
    b002:	d3 cf       	rjmp	.-90     	; 0xafaa <vfprintf+0x678>
    b004:	23 e0       	ldi	r18, 0x03	; 3
    b006:	25 15       	cp	r18, r5
    b008:	10 f4       	brcc	.+4      	; 0xb00e <vfprintf+0x6dc>
    b00a:	83 e0       	ldi	r24, 0x03	; 3
    b00c:	c1 cf       	rjmp	.-126    	; 0xaf90 <vfprintf+0x65e>
    b00e:	51 2c       	mov	r5, r1
    b010:	c4 cf       	rjmp	.-120    	; 0xaf9a <vfprintf+0x668>
    b012:	60 96       	adiw	r28, 0x10	; 16
    b014:	0f b6       	in	r0, 0x3f	; 63
    b016:	f8 94       	cli
    b018:	de bf       	out	0x3e, r29	; 62
    b01a:	0f be       	out	0x3f, r0	; 63
    b01c:	cd bf       	out	0x3d, r28	; 61
    b01e:	df 91       	pop	r29
    b020:	cf 91       	pop	r28
    b022:	1f 91       	pop	r17
    b024:	0f 91       	pop	r16
    b026:	ff 90       	pop	r15
    b028:	ef 90       	pop	r14
    b02a:	df 90       	pop	r13
    b02c:	cf 90       	pop	r12
    b02e:	bf 90       	pop	r11
    b030:	af 90       	pop	r10
    b032:	9f 90       	pop	r9
    b034:	8f 90       	pop	r8
    b036:	7f 90       	pop	r7
    b038:	6f 90       	pop	r6
    b03a:	5f 90       	pop	r5
    b03c:	4f 90       	pop	r4
    b03e:	3f 90       	pop	r3
    b040:	2f 90       	pop	r2
    b042:	08 95       	ret

0000b044 <__udivmodsi4>:
    b044:	a1 e2       	ldi	r26, 0x21	; 33
    b046:	1a 2e       	mov	r1, r26
    b048:	aa 1b       	sub	r26, r26
    b04a:	bb 1b       	sub	r27, r27
    b04c:	fd 01       	movw	r30, r26
    b04e:	0d c0       	rjmp	.+26     	; 0xb06a <__udivmodsi4_ep>

0000b050 <__udivmodsi4_loop>:
    b050:	aa 1f       	adc	r26, r26
    b052:	bb 1f       	adc	r27, r27
    b054:	ee 1f       	adc	r30, r30
    b056:	ff 1f       	adc	r31, r31
    b058:	a2 17       	cp	r26, r18
    b05a:	b3 07       	cpc	r27, r19
    b05c:	e4 07       	cpc	r30, r20
    b05e:	f5 07       	cpc	r31, r21
    b060:	20 f0       	brcs	.+8      	; 0xb06a <__udivmodsi4_ep>
    b062:	a2 1b       	sub	r26, r18
    b064:	b3 0b       	sbc	r27, r19
    b066:	e4 0b       	sbc	r30, r20
    b068:	f5 0b       	sbc	r31, r21

0000b06a <__udivmodsi4_ep>:
    b06a:	66 1f       	adc	r22, r22
    b06c:	77 1f       	adc	r23, r23
    b06e:	88 1f       	adc	r24, r24
    b070:	99 1f       	adc	r25, r25
    b072:	1a 94       	dec	r1
    b074:	69 f7       	brne	.-38     	; 0xb050 <__udivmodsi4_loop>
    b076:	60 95       	com	r22
    b078:	70 95       	com	r23
    b07a:	80 95       	com	r24
    b07c:	90 95       	com	r25
    b07e:	9b 01       	movw	r18, r22
    b080:	ac 01       	movw	r20, r24
    b082:	bd 01       	movw	r22, r26
    b084:	cf 01       	movw	r24, r30
    b086:	08 95       	ret

0000b088 <__tablejump2__>:
    b088:	ee 0f       	add	r30, r30
    b08a:	ff 1f       	adc	r31, r31
    b08c:	88 1f       	adc	r24, r24
    b08e:	8b bf       	out	0x3b, r24	; 59
    b090:	07 90       	elpm	r0, Z+
    b092:	f6 91       	elpm	r31, Z
    b094:	e0 2d       	mov	r30, r0
    b096:	19 94       	eijmp

0000b098 <__umulhisi3>:
    b098:	a2 9f       	mul	r26, r18
    b09a:	b0 01       	movw	r22, r0
    b09c:	b3 9f       	mul	r27, r19
    b09e:	c0 01       	movw	r24, r0
    b0a0:	a3 9f       	mul	r26, r19
    b0a2:	70 0d       	add	r23, r0
    b0a4:	81 1d       	adc	r24, r1
    b0a6:	11 24       	eor	r1, r1
    b0a8:	91 1d       	adc	r25, r1
    b0aa:	b2 9f       	mul	r27, r18
    b0ac:	70 0d       	add	r23, r0
    b0ae:	81 1d       	adc	r24, r1
    b0b0:	11 24       	eor	r1, r1
    b0b2:	91 1d       	adc	r25, r1
    b0b4:	08 95       	ret

0000b0b6 <malloc>:
    b0b6:	0f 93       	push	r16
    b0b8:	1f 93       	push	r17
    b0ba:	cf 93       	push	r28
    b0bc:	df 93       	push	r29
    b0be:	82 30       	cpi	r24, 0x02	; 2
    b0c0:	91 05       	cpc	r25, r1
    b0c2:	10 f4       	brcc	.+4      	; 0xb0c8 <malloc+0x12>
    b0c4:	82 e0       	ldi	r24, 0x02	; 2
    b0c6:	90 e0       	ldi	r25, 0x00	; 0
    b0c8:	e0 91 4d 0b 	lds	r30, 0x0B4D	; 0x800b4d <__flp>
    b0cc:	f0 91 4e 0b 	lds	r31, 0x0B4E	; 0x800b4e <__flp+0x1>
    b0d0:	20 e0       	ldi	r18, 0x00	; 0
    b0d2:	30 e0       	ldi	r19, 0x00	; 0
    b0d4:	a0 e0       	ldi	r26, 0x00	; 0
    b0d6:	b0 e0       	ldi	r27, 0x00	; 0
    b0d8:	30 97       	sbiw	r30, 0x00	; 0
    b0da:	19 f1       	breq	.+70     	; 0xb122 <malloc+0x6c>
    b0dc:	40 81       	ld	r20, Z
    b0de:	51 81       	ldd	r21, Z+1	; 0x01
    b0e0:	02 81       	ldd	r16, Z+2	; 0x02
    b0e2:	13 81       	ldd	r17, Z+3	; 0x03
    b0e4:	48 17       	cp	r20, r24
    b0e6:	59 07       	cpc	r21, r25
    b0e8:	c8 f0       	brcs	.+50     	; 0xb11c <malloc+0x66>
    b0ea:	84 17       	cp	r24, r20
    b0ec:	95 07       	cpc	r25, r21
    b0ee:	69 f4       	brne	.+26     	; 0xb10a <malloc+0x54>
    b0f0:	10 97       	sbiw	r26, 0x00	; 0
    b0f2:	31 f0       	breq	.+12     	; 0xb100 <malloc+0x4a>
    b0f4:	12 96       	adiw	r26, 0x02	; 2
    b0f6:	0c 93       	st	X, r16
    b0f8:	12 97       	sbiw	r26, 0x02	; 2
    b0fa:	13 96       	adiw	r26, 0x03	; 3
    b0fc:	1c 93       	st	X, r17
    b0fe:	27 c0       	rjmp	.+78     	; 0xb14e <malloc+0x98>
    b100:	00 93 4d 0b 	sts	0x0B4D, r16	; 0x800b4d <__flp>
    b104:	10 93 4e 0b 	sts	0x0B4E, r17	; 0x800b4e <__flp+0x1>
    b108:	22 c0       	rjmp	.+68     	; 0xb14e <malloc+0x98>
    b10a:	21 15       	cp	r18, r1
    b10c:	31 05       	cpc	r19, r1
    b10e:	19 f0       	breq	.+6      	; 0xb116 <malloc+0x60>
    b110:	42 17       	cp	r20, r18
    b112:	53 07       	cpc	r21, r19
    b114:	18 f4       	brcc	.+6      	; 0xb11c <malloc+0x66>
    b116:	9a 01       	movw	r18, r20
    b118:	bd 01       	movw	r22, r26
    b11a:	ef 01       	movw	r28, r30
    b11c:	df 01       	movw	r26, r30
    b11e:	f8 01       	movw	r30, r16
    b120:	db cf       	rjmp	.-74     	; 0xb0d8 <malloc+0x22>
    b122:	21 15       	cp	r18, r1
    b124:	31 05       	cpc	r19, r1
    b126:	f9 f0       	breq	.+62     	; 0xb166 <malloc+0xb0>
    b128:	28 1b       	sub	r18, r24
    b12a:	39 0b       	sbc	r19, r25
    b12c:	24 30       	cpi	r18, 0x04	; 4
    b12e:	31 05       	cpc	r19, r1
    b130:	80 f4       	brcc	.+32     	; 0xb152 <malloc+0x9c>
    b132:	8a 81       	ldd	r24, Y+2	; 0x02
    b134:	9b 81       	ldd	r25, Y+3	; 0x03
    b136:	61 15       	cp	r22, r1
    b138:	71 05       	cpc	r23, r1
    b13a:	21 f0       	breq	.+8      	; 0xb144 <malloc+0x8e>
    b13c:	fb 01       	movw	r30, r22
    b13e:	93 83       	std	Z+3, r25	; 0x03
    b140:	82 83       	std	Z+2, r24	; 0x02
    b142:	04 c0       	rjmp	.+8      	; 0xb14c <malloc+0x96>
    b144:	90 93 4e 0b 	sts	0x0B4E, r25	; 0x800b4e <__flp+0x1>
    b148:	80 93 4d 0b 	sts	0x0B4D, r24	; 0x800b4d <__flp>
    b14c:	fe 01       	movw	r30, r28
    b14e:	32 96       	adiw	r30, 0x02	; 2
    b150:	44 c0       	rjmp	.+136    	; 0xb1da <malloc+0x124>
    b152:	fe 01       	movw	r30, r28
    b154:	e2 0f       	add	r30, r18
    b156:	f3 1f       	adc	r31, r19
    b158:	81 93       	st	Z+, r24
    b15a:	91 93       	st	Z+, r25
    b15c:	22 50       	subi	r18, 0x02	; 2
    b15e:	31 09       	sbc	r19, r1
    b160:	39 83       	std	Y+1, r19	; 0x01
    b162:	28 83       	st	Y, r18
    b164:	3a c0       	rjmp	.+116    	; 0xb1da <malloc+0x124>
    b166:	20 91 4b 0b 	lds	r18, 0x0B4B	; 0x800b4b <__brkval>
    b16a:	30 91 4c 0b 	lds	r19, 0x0B4C	; 0x800b4c <__brkval+0x1>
    b16e:	23 2b       	or	r18, r19
    b170:	41 f4       	brne	.+16     	; 0xb182 <malloc+0xcc>
    b172:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    b176:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    b17a:	30 93 4c 0b 	sts	0x0B4C, r19	; 0x800b4c <__brkval+0x1>
    b17e:	20 93 4b 0b 	sts	0x0B4B, r18	; 0x800b4b <__brkval>
    b182:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    b186:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    b18a:	21 15       	cp	r18, r1
    b18c:	31 05       	cpc	r19, r1
    b18e:	41 f4       	brne	.+16     	; 0xb1a0 <malloc+0xea>
    b190:	2d b7       	in	r18, 0x3d	; 61
    b192:	3e b7       	in	r19, 0x3e	; 62
    b194:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    b198:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    b19c:	24 1b       	sub	r18, r20
    b19e:	35 0b       	sbc	r19, r21
    b1a0:	e0 91 4b 0b 	lds	r30, 0x0B4B	; 0x800b4b <__brkval>
    b1a4:	f0 91 4c 0b 	lds	r31, 0x0B4C	; 0x800b4c <__brkval+0x1>
    b1a8:	e2 17       	cp	r30, r18
    b1aa:	f3 07       	cpc	r31, r19
    b1ac:	a0 f4       	brcc	.+40     	; 0xb1d6 <malloc+0x120>
    b1ae:	2e 1b       	sub	r18, r30
    b1b0:	3f 0b       	sbc	r19, r31
    b1b2:	28 17       	cp	r18, r24
    b1b4:	39 07       	cpc	r19, r25
    b1b6:	78 f0       	brcs	.+30     	; 0xb1d6 <malloc+0x120>
    b1b8:	ac 01       	movw	r20, r24
    b1ba:	4e 5f       	subi	r20, 0xFE	; 254
    b1bc:	5f 4f       	sbci	r21, 0xFF	; 255
    b1be:	24 17       	cp	r18, r20
    b1c0:	35 07       	cpc	r19, r21
    b1c2:	48 f0       	brcs	.+18     	; 0xb1d6 <malloc+0x120>
    b1c4:	4e 0f       	add	r20, r30
    b1c6:	5f 1f       	adc	r21, r31
    b1c8:	50 93 4c 0b 	sts	0x0B4C, r21	; 0x800b4c <__brkval+0x1>
    b1cc:	40 93 4b 0b 	sts	0x0B4B, r20	; 0x800b4b <__brkval>
    b1d0:	81 93       	st	Z+, r24
    b1d2:	91 93       	st	Z+, r25
    b1d4:	02 c0       	rjmp	.+4      	; 0xb1da <malloc+0x124>
    b1d6:	e0 e0       	ldi	r30, 0x00	; 0
    b1d8:	f0 e0       	ldi	r31, 0x00	; 0
    b1da:	cf 01       	movw	r24, r30
    b1dc:	df 91       	pop	r29
    b1de:	cf 91       	pop	r28
    b1e0:	1f 91       	pop	r17
    b1e2:	0f 91       	pop	r16
    b1e4:	08 95       	ret

0000b1e6 <free>:
    b1e6:	cf 93       	push	r28
    b1e8:	df 93       	push	r29
    b1ea:	00 97       	sbiw	r24, 0x00	; 0
    b1ec:	09 f4       	brne	.+2      	; 0xb1f0 <free+0xa>
    b1ee:	81 c0       	rjmp	.+258    	; 0xb2f2 <free+0x10c>
    b1f0:	fc 01       	movw	r30, r24
    b1f2:	32 97       	sbiw	r30, 0x02	; 2
    b1f4:	13 82       	std	Z+3, r1	; 0x03
    b1f6:	12 82       	std	Z+2, r1	; 0x02
    b1f8:	a0 91 4d 0b 	lds	r26, 0x0B4D	; 0x800b4d <__flp>
    b1fc:	b0 91 4e 0b 	lds	r27, 0x0B4E	; 0x800b4e <__flp+0x1>
    b200:	10 97       	sbiw	r26, 0x00	; 0
    b202:	81 f4       	brne	.+32     	; 0xb224 <free+0x3e>
    b204:	20 81       	ld	r18, Z
    b206:	31 81       	ldd	r19, Z+1	; 0x01
    b208:	82 0f       	add	r24, r18
    b20a:	93 1f       	adc	r25, r19
    b20c:	20 91 4b 0b 	lds	r18, 0x0B4B	; 0x800b4b <__brkval>
    b210:	30 91 4c 0b 	lds	r19, 0x0B4C	; 0x800b4c <__brkval+0x1>
    b214:	28 17       	cp	r18, r24
    b216:	39 07       	cpc	r19, r25
    b218:	51 f5       	brne	.+84     	; 0xb26e <free+0x88>
    b21a:	f0 93 4c 0b 	sts	0x0B4C, r31	; 0x800b4c <__brkval+0x1>
    b21e:	e0 93 4b 0b 	sts	0x0B4B, r30	; 0x800b4b <__brkval>
    b222:	67 c0       	rjmp	.+206    	; 0xb2f2 <free+0x10c>
    b224:	ed 01       	movw	r28, r26
    b226:	20 e0       	ldi	r18, 0x00	; 0
    b228:	30 e0       	ldi	r19, 0x00	; 0
    b22a:	ce 17       	cp	r28, r30
    b22c:	df 07       	cpc	r29, r31
    b22e:	40 f4       	brcc	.+16     	; 0xb240 <free+0x5a>
    b230:	4a 81       	ldd	r20, Y+2	; 0x02
    b232:	5b 81       	ldd	r21, Y+3	; 0x03
    b234:	9e 01       	movw	r18, r28
    b236:	41 15       	cp	r20, r1
    b238:	51 05       	cpc	r21, r1
    b23a:	f1 f0       	breq	.+60     	; 0xb278 <free+0x92>
    b23c:	ea 01       	movw	r28, r20
    b23e:	f5 cf       	rjmp	.-22     	; 0xb22a <free+0x44>
    b240:	d3 83       	std	Z+3, r29	; 0x03
    b242:	c2 83       	std	Z+2, r28	; 0x02
    b244:	40 81       	ld	r20, Z
    b246:	51 81       	ldd	r21, Z+1	; 0x01
    b248:	84 0f       	add	r24, r20
    b24a:	95 1f       	adc	r25, r21
    b24c:	c8 17       	cp	r28, r24
    b24e:	d9 07       	cpc	r29, r25
    b250:	59 f4       	brne	.+22     	; 0xb268 <free+0x82>
    b252:	88 81       	ld	r24, Y
    b254:	99 81       	ldd	r25, Y+1	; 0x01
    b256:	84 0f       	add	r24, r20
    b258:	95 1f       	adc	r25, r21
    b25a:	02 96       	adiw	r24, 0x02	; 2
    b25c:	91 83       	std	Z+1, r25	; 0x01
    b25e:	80 83       	st	Z, r24
    b260:	8a 81       	ldd	r24, Y+2	; 0x02
    b262:	9b 81       	ldd	r25, Y+3	; 0x03
    b264:	93 83       	std	Z+3, r25	; 0x03
    b266:	82 83       	std	Z+2, r24	; 0x02
    b268:	21 15       	cp	r18, r1
    b26a:	31 05       	cpc	r19, r1
    b26c:	29 f4       	brne	.+10     	; 0xb278 <free+0x92>
    b26e:	f0 93 4e 0b 	sts	0x0B4E, r31	; 0x800b4e <__flp+0x1>
    b272:	e0 93 4d 0b 	sts	0x0B4D, r30	; 0x800b4d <__flp>
    b276:	3d c0       	rjmp	.+122    	; 0xb2f2 <free+0x10c>
    b278:	e9 01       	movw	r28, r18
    b27a:	fb 83       	std	Y+3, r31	; 0x03
    b27c:	ea 83       	std	Y+2, r30	; 0x02
    b27e:	49 91       	ld	r20, Y+
    b280:	59 91       	ld	r21, Y+
    b282:	c4 0f       	add	r28, r20
    b284:	d5 1f       	adc	r29, r21
    b286:	ec 17       	cp	r30, r28
    b288:	fd 07       	cpc	r31, r29
    b28a:	61 f4       	brne	.+24     	; 0xb2a4 <free+0xbe>
    b28c:	80 81       	ld	r24, Z
    b28e:	91 81       	ldd	r25, Z+1	; 0x01
    b290:	84 0f       	add	r24, r20
    b292:	95 1f       	adc	r25, r21
    b294:	02 96       	adiw	r24, 0x02	; 2
    b296:	e9 01       	movw	r28, r18
    b298:	99 83       	std	Y+1, r25	; 0x01
    b29a:	88 83       	st	Y, r24
    b29c:	82 81       	ldd	r24, Z+2	; 0x02
    b29e:	93 81       	ldd	r25, Z+3	; 0x03
    b2a0:	9b 83       	std	Y+3, r25	; 0x03
    b2a2:	8a 83       	std	Y+2, r24	; 0x02
    b2a4:	e0 e0       	ldi	r30, 0x00	; 0
    b2a6:	f0 e0       	ldi	r31, 0x00	; 0
    b2a8:	12 96       	adiw	r26, 0x02	; 2
    b2aa:	8d 91       	ld	r24, X+
    b2ac:	9c 91       	ld	r25, X
    b2ae:	13 97       	sbiw	r26, 0x03	; 3
    b2b0:	00 97       	sbiw	r24, 0x00	; 0
    b2b2:	19 f0       	breq	.+6      	; 0xb2ba <free+0xd4>
    b2b4:	fd 01       	movw	r30, r26
    b2b6:	dc 01       	movw	r26, r24
    b2b8:	f7 cf       	rjmp	.-18     	; 0xb2a8 <free+0xc2>
    b2ba:	8d 91       	ld	r24, X+
    b2bc:	9c 91       	ld	r25, X
    b2be:	11 97       	sbiw	r26, 0x01	; 1
    b2c0:	9d 01       	movw	r18, r26
    b2c2:	2e 5f       	subi	r18, 0xFE	; 254
    b2c4:	3f 4f       	sbci	r19, 0xFF	; 255
    b2c6:	82 0f       	add	r24, r18
    b2c8:	93 1f       	adc	r25, r19
    b2ca:	20 91 4b 0b 	lds	r18, 0x0B4B	; 0x800b4b <__brkval>
    b2ce:	30 91 4c 0b 	lds	r19, 0x0B4C	; 0x800b4c <__brkval+0x1>
    b2d2:	28 17       	cp	r18, r24
    b2d4:	39 07       	cpc	r19, r25
    b2d6:	69 f4       	brne	.+26     	; 0xb2f2 <free+0x10c>
    b2d8:	30 97       	sbiw	r30, 0x00	; 0
    b2da:	29 f4       	brne	.+10     	; 0xb2e6 <free+0x100>
    b2dc:	10 92 4e 0b 	sts	0x0B4E, r1	; 0x800b4e <__flp+0x1>
    b2e0:	10 92 4d 0b 	sts	0x0B4D, r1	; 0x800b4d <__flp>
    b2e4:	02 c0       	rjmp	.+4      	; 0xb2ea <free+0x104>
    b2e6:	13 82       	std	Z+3, r1	; 0x03
    b2e8:	12 82       	std	Z+2, r1	; 0x02
    b2ea:	b0 93 4c 0b 	sts	0x0B4C, r27	; 0x800b4c <__brkval+0x1>
    b2ee:	a0 93 4b 0b 	sts	0x0B4B, r26	; 0x800b4b <__brkval>
    b2f2:	df 91       	pop	r29
    b2f4:	cf 91       	pop	r28
    b2f6:	08 95       	ret

0000b2f8 <__ftoa_engine>:
    b2f8:	28 30       	cpi	r18, 0x08	; 8
    b2fa:	08 f0       	brcs	.+2      	; 0xb2fe <__ftoa_engine+0x6>
    b2fc:	27 e0       	ldi	r18, 0x07	; 7
    b2fe:	33 27       	eor	r19, r19
    b300:	da 01       	movw	r26, r20
    b302:	99 0f       	add	r25, r25
    b304:	31 1d       	adc	r19, r1
    b306:	87 fd       	sbrc	r24, 7
    b308:	91 60       	ori	r25, 0x01	; 1
    b30a:	00 96       	adiw	r24, 0x00	; 0
    b30c:	61 05       	cpc	r22, r1
    b30e:	71 05       	cpc	r23, r1
    b310:	39 f4       	brne	.+14     	; 0xb320 <__ftoa_engine+0x28>
    b312:	32 60       	ori	r19, 0x02	; 2
    b314:	2e 5f       	subi	r18, 0xFE	; 254
    b316:	3d 93       	st	X+, r19
    b318:	30 e3       	ldi	r19, 0x30	; 48
    b31a:	2a 95       	dec	r18
    b31c:	e1 f7       	brne	.-8      	; 0xb316 <__ftoa_engine+0x1e>
    b31e:	08 95       	ret
    b320:	9f 3f       	cpi	r25, 0xFF	; 255
    b322:	30 f0       	brcs	.+12     	; 0xb330 <__ftoa_engine+0x38>
    b324:	80 38       	cpi	r24, 0x80	; 128
    b326:	71 05       	cpc	r23, r1
    b328:	61 05       	cpc	r22, r1
    b32a:	09 f0       	breq	.+2      	; 0xb32e <__ftoa_engine+0x36>
    b32c:	3c 5f       	subi	r19, 0xFC	; 252
    b32e:	3c 5f       	subi	r19, 0xFC	; 252
    b330:	3d 93       	st	X+, r19
    b332:	91 30       	cpi	r25, 0x01	; 1
    b334:	08 f0       	brcs	.+2      	; 0xb338 <__ftoa_engine+0x40>
    b336:	80 68       	ori	r24, 0x80	; 128
    b338:	91 1d       	adc	r25, r1
    b33a:	df 93       	push	r29
    b33c:	cf 93       	push	r28
    b33e:	1f 93       	push	r17
    b340:	0f 93       	push	r16
    b342:	ff 92       	push	r15
    b344:	ef 92       	push	r14
    b346:	19 2f       	mov	r17, r25
    b348:	98 7f       	andi	r25, 0xF8	; 248
    b34a:	96 95       	lsr	r25
    b34c:	e9 2f       	mov	r30, r25
    b34e:	96 95       	lsr	r25
    b350:	96 95       	lsr	r25
    b352:	e9 0f       	add	r30, r25
    b354:	ff 27       	eor	r31, r31
    b356:	e0 5b       	subi	r30, 0xB0	; 176
    b358:	f6 4f       	sbci	r31, 0xF6	; 246
    b35a:	99 27       	eor	r25, r25
    b35c:	33 27       	eor	r19, r19
    b35e:	ee 24       	eor	r14, r14
    b360:	ff 24       	eor	r15, r15
    b362:	a7 01       	movw	r20, r14
    b364:	e7 01       	movw	r28, r14
    b366:	05 90       	lpm	r0, Z+
    b368:	08 94       	sec
    b36a:	07 94       	ror	r0
    b36c:	28 f4       	brcc	.+10     	; 0xb378 <__ftoa_engine+0x80>
    b36e:	36 0f       	add	r19, r22
    b370:	e7 1e       	adc	r14, r23
    b372:	f8 1e       	adc	r15, r24
    b374:	49 1f       	adc	r20, r25
    b376:	51 1d       	adc	r21, r1
    b378:	66 0f       	add	r22, r22
    b37a:	77 1f       	adc	r23, r23
    b37c:	88 1f       	adc	r24, r24
    b37e:	99 1f       	adc	r25, r25
    b380:	06 94       	lsr	r0
    b382:	a1 f7       	brne	.-24     	; 0xb36c <__ftoa_engine+0x74>
    b384:	05 90       	lpm	r0, Z+
    b386:	07 94       	ror	r0
    b388:	28 f4       	brcc	.+10     	; 0xb394 <__ftoa_engine+0x9c>
    b38a:	e7 0e       	add	r14, r23
    b38c:	f8 1e       	adc	r15, r24
    b38e:	49 1f       	adc	r20, r25
    b390:	56 1f       	adc	r21, r22
    b392:	c1 1d       	adc	r28, r1
    b394:	77 0f       	add	r23, r23
    b396:	88 1f       	adc	r24, r24
    b398:	99 1f       	adc	r25, r25
    b39a:	66 1f       	adc	r22, r22
    b39c:	06 94       	lsr	r0
    b39e:	a1 f7       	brne	.-24     	; 0xb388 <__ftoa_engine+0x90>
    b3a0:	05 90       	lpm	r0, Z+
    b3a2:	07 94       	ror	r0
    b3a4:	28 f4       	brcc	.+10     	; 0xb3b0 <__ftoa_engine+0xb8>
    b3a6:	f8 0e       	add	r15, r24
    b3a8:	49 1f       	adc	r20, r25
    b3aa:	56 1f       	adc	r21, r22
    b3ac:	c7 1f       	adc	r28, r23
    b3ae:	d1 1d       	adc	r29, r1
    b3b0:	88 0f       	add	r24, r24
    b3b2:	99 1f       	adc	r25, r25
    b3b4:	66 1f       	adc	r22, r22
    b3b6:	77 1f       	adc	r23, r23
    b3b8:	06 94       	lsr	r0
    b3ba:	a1 f7       	brne	.-24     	; 0xb3a4 <__ftoa_engine+0xac>
    b3bc:	05 90       	lpm	r0, Z+
    b3be:	07 94       	ror	r0
    b3c0:	20 f4       	brcc	.+8      	; 0xb3ca <__ftoa_engine+0xd2>
    b3c2:	49 0f       	add	r20, r25
    b3c4:	56 1f       	adc	r21, r22
    b3c6:	c7 1f       	adc	r28, r23
    b3c8:	d8 1f       	adc	r29, r24
    b3ca:	99 0f       	add	r25, r25
    b3cc:	66 1f       	adc	r22, r22
    b3ce:	77 1f       	adc	r23, r23
    b3d0:	88 1f       	adc	r24, r24
    b3d2:	06 94       	lsr	r0
    b3d4:	a9 f7       	brne	.-22     	; 0xb3c0 <__ftoa_engine+0xc8>
    b3d6:	84 91       	lpm	r24, Z
    b3d8:	10 95       	com	r17
    b3da:	17 70       	andi	r17, 0x07	; 7
    b3dc:	41 f0       	breq	.+16     	; 0xb3ee <__ftoa_engine+0xf6>
    b3de:	d6 95       	lsr	r29
    b3e0:	c7 95       	ror	r28
    b3e2:	57 95       	ror	r21
    b3e4:	47 95       	ror	r20
    b3e6:	f7 94       	ror	r15
    b3e8:	e7 94       	ror	r14
    b3ea:	1a 95       	dec	r17
    b3ec:	c1 f7       	brne	.-16     	; 0xb3de <__ftoa_engine+0xe6>
    b3ee:	e6 ef       	ldi	r30, 0xF6	; 246
    b3f0:	f8 e0       	ldi	r31, 0x08	; 8
    b3f2:	68 94       	set
    b3f4:	15 90       	lpm	r1, Z+
    b3f6:	15 91       	lpm	r17, Z+
    b3f8:	35 91       	lpm	r19, Z+
    b3fa:	65 91       	lpm	r22, Z+
    b3fc:	95 91       	lpm	r25, Z+
    b3fe:	05 90       	lpm	r0, Z+
    b400:	7f e2       	ldi	r23, 0x2F	; 47
    b402:	73 95       	inc	r23
    b404:	e1 18       	sub	r14, r1
    b406:	f1 0a       	sbc	r15, r17
    b408:	43 0b       	sbc	r20, r19
    b40a:	56 0b       	sbc	r21, r22
    b40c:	c9 0b       	sbc	r28, r25
    b40e:	d0 09       	sbc	r29, r0
    b410:	c0 f7       	brcc	.-16     	; 0xb402 <__ftoa_engine+0x10a>
    b412:	e1 0c       	add	r14, r1
    b414:	f1 1e       	adc	r15, r17
    b416:	43 1f       	adc	r20, r19
    b418:	56 1f       	adc	r21, r22
    b41a:	c9 1f       	adc	r28, r25
    b41c:	d0 1d       	adc	r29, r0
    b41e:	7e f4       	brtc	.+30     	; 0xb43e <__ftoa_engine+0x146>
    b420:	70 33       	cpi	r23, 0x30	; 48
    b422:	11 f4       	brne	.+4      	; 0xb428 <__ftoa_engine+0x130>
    b424:	8a 95       	dec	r24
    b426:	e6 cf       	rjmp	.-52     	; 0xb3f4 <__ftoa_engine+0xfc>
    b428:	e8 94       	clt
    b42a:	01 50       	subi	r16, 0x01	; 1
    b42c:	30 f0       	brcs	.+12     	; 0xb43a <__ftoa_engine+0x142>
    b42e:	08 0f       	add	r16, r24
    b430:	0a f4       	brpl	.+2      	; 0xb434 <__ftoa_engine+0x13c>
    b432:	00 27       	eor	r16, r16
    b434:	02 17       	cp	r16, r18
    b436:	08 f4       	brcc	.+2      	; 0xb43a <__ftoa_engine+0x142>
    b438:	20 2f       	mov	r18, r16
    b43a:	23 95       	inc	r18
    b43c:	02 2f       	mov	r16, r18
    b43e:	7a 33       	cpi	r23, 0x3A	; 58
    b440:	28 f0       	brcs	.+10     	; 0xb44c <__ftoa_engine+0x154>
    b442:	79 e3       	ldi	r23, 0x39	; 57
    b444:	7d 93       	st	X+, r23
    b446:	2a 95       	dec	r18
    b448:	e9 f7       	brne	.-6      	; 0xb444 <__ftoa_engine+0x14c>
    b44a:	10 c0       	rjmp	.+32     	; 0xb46c <__ftoa_engine+0x174>
    b44c:	7d 93       	st	X+, r23
    b44e:	2a 95       	dec	r18
    b450:	89 f6       	brne	.-94     	; 0xb3f4 <__ftoa_engine+0xfc>
    b452:	06 94       	lsr	r0
    b454:	97 95       	ror	r25
    b456:	67 95       	ror	r22
    b458:	37 95       	ror	r19
    b45a:	17 95       	ror	r17
    b45c:	17 94       	ror	r1
    b45e:	e1 18       	sub	r14, r1
    b460:	f1 0a       	sbc	r15, r17
    b462:	43 0b       	sbc	r20, r19
    b464:	56 0b       	sbc	r21, r22
    b466:	c9 0b       	sbc	r28, r25
    b468:	d0 09       	sbc	r29, r0
    b46a:	98 f0       	brcs	.+38     	; 0xb492 <__ftoa_engine+0x19a>
    b46c:	23 95       	inc	r18
    b46e:	7e 91       	ld	r23, -X
    b470:	73 95       	inc	r23
    b472:	7a 33       	cpi	r23, 0x3A	; 58
    b474:	08 f0       	brcs	.+2      	; 0xb478 <__ftoa_engine+0x180>
    b476:	70 e3       	ldi	r23, 0x30	; 48
    b478:	7c 93       	st	X, r23
    b47a:	20 13       	cpse	r18, r16
    b47c:	b8 f7       	brcc	.-18     	; 0xb46c <__ftoa_engine+0x174>
    b47e:	7e 91       	ld	r23, -X
    b480:	70 61       	ori	r23, 0x10	; 16
    b482:	7d 93       	st	X+, r23
    b484:	30 f0       	brcs	.+12     	; 0xb492 <__ftoa_engine+0x19a>
    b486:	83 95       	inc	r24
    b488:	71 e3       	ldi	r23, 0x31	; 49
    b48a:	7d 93       	st	X+, r23
    b48c:	70 e3       	ldi	r23, 0x30	; 48
    b48e:	2a 95       	dec	r18
    b490:	e1 f7       	brne	.-8      	; 0xb48a <__ftoa_engine+0x192>
    b492:	11 24       	eor	r1, r1
    b494:	ef 90       	pop	r14
    b496:	ff 90       	pop	r15
    b498:	0f 91       	pop	r16
    b49a:	1f 91       	pop	r17
    b49c:	cf 91       	pop	r28
    b49e:	df 91       	pop	r29
    b4a0:	99 27       	eor	r25, r25
    b4a2:	87 fd       	sbrc	r24, 7
    b4a4:	90 95       	com	r25
    b4a6:	08 95       	ret

0000b4a8 <strnlen_P>:
    b4a8:	fc 01       	movw	r30, r24
    b4aa:	05 90       	lpm	r0, Z+
    b4ac:	61 50       	subi	r22, 0x01	; 1
    b4ae:	70 40       	sbci	r23, 0x00	; 0
    b4b0:	01 10       	cpse	r0, r1
    b4b2:	d8 f7       	brcc	.-10     	; 0xb4aa <strnlen_P+0x2>
    b4b4:	80 95       	com	r24
    b4b6:	90 95       	com	r25
    b4b8:	8e 0f       	add	r24, r30
    b4ba:	9f 1f       	adc	r25, r31
    b4bc:	08 95       	ret

0000b4be <memcpy>:
    b4be:	fb 01       	movw	r30, r22
    b4c0:	dc 01       	movw	r26, r24
    b4c2:	02 c0       	rjmp	.+4      	; 0xb4c8 <memcpy+0xa>
    b4c4:	01 90       	ld	r0, Z+
    b4c6:	0d 92       	st	X+, r0
    b4c8:	41 50       	subi	r20, 0x01	; 1
    b4ca:	50 40       	sbci	r21, 0x00	; 0
    b4cc:	d8 f7       	brcc	.-10     	; 0xb4c4 <memcpy+0x6>
    b4ce:	08 95       	ret

0000b4d0 <memset>:
    b4d0:	dc 01       	movw	r26, r24
    b4d2:	01 c0       	rjmp	.+2      	; 0xb4d6 <memset+0x6>
    b4d4:	6d 93       	st	X+, r22
    b4d6:	41 50       	subi	r20, 0x01	; 1
    b4d8:	50 40       	sbci	r21, 0x00	; 0
    b4da:	e0 f7       	brcc	.-8      	; 0xb4d4 <memset+0x4>
    b4dc:	08 95       	ret

0000b4de <strnlen>:
    b4de:	fc 01       	movw	r30, r24
    b4e0:	61 50       	subi	r22, 0x01	; 1
    b4e2:	70 40       	sbci	r23, 0x00	; 0
    b4e4:	01 90       	ld	r0, Z+
    b4e6:	01 10       	cpse	r0, r1
    b4e8:	d8 f7       	brcc	.-10     	; 0xb4e0 <strnlen+0x2>
    b4ea:	80 95       	com	r24
    b4ec:	90 95       	com	r25
    b4ee:	8e 0f       	add	r24, r30
    b4f0:	9f 1f       	adc	r25, r31
    b4f2:	08 95       	ret

0000b4f4 <fputc>:
    b4f4:	0f 93       	push	r16
    b4f6:	1f 93       	push	r17
    b4f8:	cf 93       	push	r28
    b4fa:	df 93       	push	r29
    b4fc:	fb 01       	movw	r30, r22
    b4fe:	23 81       	ldd	r18, Z+3	; 0x03
    b500:	21 fd       	sbrc	r18, 1
    b502:	03 c0       	rjmp	.+6      	; 0xb50a <fputc+0x16>
    b504:	8f ef       	ldi	r24, 0xFF	; 255
    b506:	9f ef       	ldi	r25, 0xFF	; 255
    b508:	2c c0       	rjmp	.+88     	; 0xb562 <fputc+0x6e>
    b50a:	22 ff       	sbrs	r18, 2
    b50c:	16 c0       	rjmp	.+44     	; 0xb53a <fputc+0x46>
    b50e:	46 81       	ldd	r20, Z+6	; 0x06
    b510:	57 81       	ldd	r21, Z+7	; 0x07
    b512:	24 81       	ldd	r18, Z+4	; 0x04
    b514:	35 81       	ldd	r19, Z+5	; 0x05
    b516:	42 17       	cp	r20, r18
    b518:	53 07       	cpc	r21, r19
    b51a:	44 f4       	brge	.+16     	; 0xb52c <fputc+0x38>
    b51c:	a0 81       	ld	r26, Z
    b51e:	b1 81       	ldd	r27, Z+1	; 0x01
    b520:	9d 01       	movw	r18, r26
    b522:	2f 5f       	subi	r18, 0xFF	; 255
    b524:	3f 4f       	sbci	r19, 0xFF	; 255
    b526:	31 83       	std	Z+1, r19	; 0x01
    b528:	20 83       	st	Z, r18
    b52a:	8c 93       	st	X, r24
    b52c:	26 81       	ldd	r18, Z+6	; 0x06
    b52e:	37 81       	ldd	r19, Z+7	; 0x07
    b530:	2f 5f       	subi	r18, 0xFF	; 255
    b532:	3f 4f       	sbci	r19, 0xFF	; 255
    b534:	37 83       	std	Z+7, r19	; 0x07
    b536:	26 83       	std	Z+6, r18	; 0x06
    b538:	14 c0       	rjmp	.+40     	; 0xb562 <fputc+0x6e>
    b53a:	8b 01       	movw	r16, r22
    b53c:	ec 01       	movw	r28, r24
    b53e:	fb 01       	movw	r30, r22
    b540:	00 84       	ldd	r0, Z+8	; 0x08
    b542:	f1 85       	ldd	r31, Z+9	; 0x09
    b544:	e0 2d       	mov	r30, r0
    b546:	19 95       	eicall
    b548:	89 2b       	or	r24, r25
    b54a:	e1 f6       	brne	.-72     	; 0xb504 <fputc+0x10>
    b54c:	d8 01       	movw	r26, r16
    b54e:	16 96       	adiw	r26, 0x06	; 6
    b550:	8d 91       	ld	r24, X+
    b552:	9c 91       	ld	r25, X
    b554:	17 97       	sbiw	r26, 0x07	; 7
    b556:	01 96       	adiw	r24, 0x01	; 1
    b558:	17 96       	adiw	r26, 0x07	; 7
    b55a:	9c 93       	st	X, r25
    b55c:	8e 93       	st	-X, r24
    b55e:	16 97       	sbiw	r26, 0x06	; 6
    b560:	ce 01       	movw	r24, r28
    b562:	df 91       	pop	r29
    b564:	cf 91       	pop	r28
    b566:	1f 91       	pop	r17
    b568:	0f 91       	pop	r16
    b56a:	08 95       	ret

0000b56c <vsnprintf>:
    b56c:	0f 93       	push	r16
    b56e:	1f 93       	push	r17
    b570:	cf 93       	push	r28
    b572:	df 93       	push	r29
    b574:	cd b7       	in	r28, 0x3d	; 61
    b576:	de b7       	in	r29, 0x3e	; 62
    b578:	2e 97       	sbiw	r28, 0x0e	; 14
    b57a:	0f b6       	in	r0, 0x3f	; 63
    b57c:	f8 94       	cli
    b57e:	de bf       	out	0x3e, r29	; 62
    b580:	0f be       	out	0x3f, r0	; 63
    b582:	cd bf       	out	0x3d, r28	; 61
    b584:	8c 01       	movw	r16, r24
    b586:	fa 01       	movw	r30, r20
    b588:	86 e0       	ldi	r24, 0x06	; 6
    b58a:	8c 83       	std	Y+4, r24	; 0x04
    b58c:	1a 83       	std	Y+2, r17	; 0x02
    b58e:	09 83       	std	Y+1, r16	; 0x01
    b590:	77 ff       	sbrs	r23, 7
    b592:	02 c0       	rjmp	.+4      	; 0xb598 <vsnprintf+0x2c>
    b594:	60 e0       	ldi	r22, 0x00	; 0
    b596:	70 e8       	ldi	r23, 0x80	; 128
    b598:	cb 01       	movw	r24, r22
    b59a:	01 97       	sbiw	r24, 0x01	; 1
    b59c:	9e 83       	std	Y+6, r25	; 0x06
    b59e:	8d 83       	std	Y+5, r24	; 0x05
    b5a0:	a9 01       	movw	r20, r18
    b5a2:	bf 01       	movw	r22, r30
    b5a4:	ce 01       	movw	r24, r28
    b5a6:	01 96       	adiw	r24, 0x01	; 1
    b5a8:	c4 d9       	rcall	.-3192   	; 0xa932 <vfprintf>
    b5aa:	4d 81       	ldd	r20, Y+5	; 0x05
    b5ac:	5e 81       	ldd	r21, Y+6	; 0x06
    b5ae:	57 fd       	sbrc	r21, 7
    b5b0:	0a c0       	rjmp	.+20     	; 0xb5c6 <vsnprintf+0x5a>
    b5b2:	2f 81       	ldd	r18, Y+7	; 0x07
    b5b4:	38 85       	ldd	r19, Y+8	; 0x08
    b5b6:	42 17       	cp	r20, r18
    b5b8:	53 07       	cpc	r21, r19
    b5ba:	0c f4       	brge	.+2      	; 0xb5be <vsnprintf+0x52>
    b5bc:	9a 01       	movw	r18, r20
    b5be:	f8 01       	movw	r30, r16
    b5c0:	e2 0f       	add	r30, r18
    b5c2:	f3 1f       	adc	r31, r19
    b5c4:	10 82       	st	Z, r1
    b5c6:	2e 96       	adiw	r28, 0x0e	; 14
    b5c8:	0f b6       	in	r0, 0x3f	; 63
    b5ca:	f8 94       	cli
    b5cc:	de bf       	out	0x3e, r29	; 62
    b5ce:	0f be       	out	0x3f, r0	; 63
    b5d0:	cd bf       	out	0x3d, r28	; 61
    b5d2:	df 91       	pop	r29
    b5d4:	cf 91       	pop	r28
    b5d6:	1f 91       	pop	r17
    b5d8:	0f 91       	pop	r16
    b5da:	08 95       	ret

0000b5dc <__ultoa_invert>:
    b5dc:	fa 01       	movw	r30, r20
    b5de:	aa 27       	eor	r26, r26
    b5e0:	28 30       	cpi	r18, 0x08	; 8
    b5e2:	51 f1       	breq	.+84     	; 0xb638 <__ultoa_invert+0x5c>
    b5e4:	20 31       	cpi	r18, 0x10	; 16
    b5e6:	81 f1       	breq	.+96     	; 0xb648 <__ultoa_invert+0x6c>
    b5e8:	e8 94       	clt
    b5ea:	6f 93       	push	r22
    b5ec:	6e 7f       	andi	r22, 0xFE	; 254
    b5ee:	6e 5f       	subi	r22, 0xFE	; 254
    b5f0:	7f 4f       	sbci	r23, 0xFF	; 255
    b5f2:	8f 4f       	sbci	r24, 0xFF	; 255
    b5f4:	9f 4f       	sbci	r25, 0xFF	; 255
    b5f6:	af 4f       	sbci	r26, 0xFF	; 255
    b5f8:	b1 e0       	ldi	r27, 0x01	; 1
    b5fa:	3e d0       	rcall	.+124    	; 0xb678 <__ultoa_invert+0x9c>
    b5fc:	b4 e0       	ldi	r27, 0x04	; 4
    b5fe:	3c d0       	rcall	.+120    	; 0xb678 <__ultoa_invert+0x9c>
    b600:	67 0f       	add	r22, r23
    b602:	78 1f       	adc	r23, r24
    b604:	89 1f       	adc	r24, r25
    b606:	9a 1f       	adc	r25, r26
    b608:	a1 1d       	adc	r26, r1
    b60a:	68 0f       	add	r22, r24
    b60c:	79 1f       	adc	r23, r25
    b60e:	8a 1f       	adc	r24, r26
    b610:	91 1d       	adc	r25, r1
    b612:	a1 1d       	adc	r26, r1
    b614:	6a 0f       	add	r22, r26
    b616:	71 1d       	adc	r23, r1
    b618:	81 1d       	adc	r24, r1
    b61a:	91 1d       	adc	r25, r1
    b61c:	a1 1d       	adc	r26, r1
    b61e:	20 d0       	rcall	.+64     	; 0xb660 <__ultoa_invert+0x84>
    b620:	09 f4       	brne	.+2      	; 0xb624 <__ultoa_invert+0x48>
    b622:	68 94       	set
    b624:	3f 91       	pop	r19
    b626:	2a e0       	ldi	r18, 0x0A	; 10
    b628:	26 9f       	mul	r18, r22
    b62a:	11 24       	eor	r1, r1
    b62c:	30 19       	sub	r19, r0
    b62e:	30 5d       	subi	r19, 0xD0	; 208
    b630:	31 93       	st	Z+, r19
    b632:	de f6       	brtc	.-74     	; 0xb5ea <__ultoa_invert+0xe>
    b634:	cf 01       	movw	r24, r30
    b636:	08 95       	ret
    b638:	46 2f       	mov	r20, r22
    b63a:	47 70       	andi	r20, 0x07	; 7
    b63c:	40 5d       	subi	r20, 0xD0	; 208
    b63e:	41 93       	st	Z+, r20
    b640:	b3 e0       	ldi	r27, 0x03	; 3
    b642:	0f d0       	rcall	.+30     	; 0xb662 <__ultoa_invert+0x86>
    b644:	c9 f7       	brne	.-14     	; 0xb638 <__ultoa_invert+0x5c>
    b646:	f6 cf       	rjmp	.-20     	; 0xb634 <__ultoa_invert+0x58>
    b648:	46 2f       	mov	r20, r22
    b64a:	4f 70       	andi	r20, 0x0F	; 15
    b64c:	40 5d       	subi	r20, 0xD0	; 208
    b64e:	4a 33       	cpi	r20, 0x3A	; 58
    b650:	18 f0       	brcs	.+6      	; 0xb658 <__ultoa_invert+0x7c>
    b652:	49 5d       	subi	r20, 0xD9	; 217
    b654:	31 fd       	sbrc	r19, 1
    b656:	40 52       	subi	r20, 0x20	; 32
    b658:	41 93       	st	Z+, r20
    b65a:	02 d0       	rcall	.+4      	; 0xb660 <__ultoa_invert+0x84>
    b65c:	a9 f7       	brne	.-22     	; 0xb648 <__ultoa_invert+0x6c>
    b65e:	ea cf       	rjmp	.-44     	; 0xb634 <__ultoa_invert+0x58>
    b660:	b4 e0       	ldi	r27, 0x04	; 4
    b662:	a6 95       	lsr	r26
    b664:	97 95       	ror	r25
    b666:	87 95       	ror	r24
    b668:	77 95       	ror	r23
    b66a:	67 95       	ror	r22
    b66c:	ba 95       	dec	r27
    b66e:	c9 f7       	brne	.-14     	; 0xb662 <__ultoa_invert+0x86>
    b670:	00 97       	sbiw	r24, 0x00	; 0
    b672:	61 05       	cpc	r22, r1
    b674:	71 05       	cpc	r23, r1
    b676:	08 95       	ret
    b678:	9b 01       	movw	r18, r22
    b67a:	ac 01       	movw	r20, r24
    b67c:	0a 2e       	mov	r0, r26
    b67e:	06 94       	lsr	r0
    b680:	57 95       	ror	r21
    b682:	47 95       	ror	r20
    b684:	37 95       	ror	r19
    b686:	27 95       	ror	r18
    b688:	ba 95       	dec	r27
    b68a:	c9 f7       	brne	.-14     	; 0xb67e <__ultoa_invert+0xa2>
    b68c:	62 0f       	add	r22, r18
    b68e:	73 1f       	adc	r23, r19
    b690:	84 1f       	adc	r24, r20
    b692:	95 1f       	adc	r25, r21
    b694:	a0 1d       	adc	r26, r0
    b696:	08 95       	ret

0000b698 <eeprom_read_block>:
    b698:	dc 01       	movw	r26, r24
    b69a:	cb 01       	movw	r24, r22

0000b69c <eeprom_read_blraw>:
    b69c:	fc 01       	movw	r30, r24
    b69e:	f9 99       	sbic	0x1f, 1	; 31
    b6a0:	fe cf       	rjmp	.-4      	; 0xb69e <eeprom_read_blraw+0x2>
    b6a2:	06 c0       	rjmp	.+12     	; 0xb6b0 <eeprom_read_blraw+0x14>
    b6a4:	f2 bd       	out	0x22, r31	; 34
    b6a6:	e1 bd       	out	0x21, r30	; 33
    b6a8:	f8 9a       	sbi	0x1f, 0	; 31
    b6aa:	31 96       	adiw	r30, 0x01	; 1
    b6ac:	00 b4       	in	r0, 0x20	; 32
    b6ae:	0d 92       	st	X+, r0
    b6b0:	41 50       	subi	r20, 0x01	; 1
    b6b2:	50 40       	sbci	r21, 0x00	; 0
    b6b4:	b8 f7       	brcc	.-18     	; 0xb6a4 <eeprom_read_blraw+0x8>
    b6b6:	08 95       	ret

0000b6b8 <eeprom_update_block>:
    b6b8:	dc 01       	movw	r26, r24
    b6ba:	a4 0f       	add	r26, r20
    b6bc:	b5 1f       	adc	r27, r21
    b6be:	41 50       	subi	r20, 0x01	; 1
    b6c0:	50 40       	sbci	r21, 0x00	; 0
    b6c2:	40 f0       	brcs	.+16     	; 0xb6d4 <eeprom_update_block+0x1c>
    b6c4:	cb 01       	movw	r24, r22
    b6c6:	84 0f       	add	r24, r20
    b6c8:	95 1f       	adc	r25, r21
    b6ca:	2e 91       	ld	r18, -X
    b6cc:	05 d0       	rcall	.+10     	; 0xb6d8 <eeprom_update_r18>
    b6ce:	41 50       	subi	r20, 0x01	; 1
    b6d0:	50 40       	sbci	r21, 0x00	; 0
    b6d2:	d8 f7       	brcc	.-10     	; 0xb6ca <eeprom_update_block+0x12>
    b6d4:	08 95       	ret

0000b6d6 <eeprom_update_byte>:
    b6d6:	26 2f       	mov	r18, r22

0000b6d8 <eeprom_update_r18>:
    b6d8:	f9 99       	sbic	0x1f, 1	; 31
    b6da:	fe cf       	rjmp	.-4      	; 0xb6d8 <eeprom_update_r18>
    b6dc:	92 bd       	out	0x22, r25	; 34
    b6de:	81 bd       	out	0x21, r24	; 33
    b6e0:	f8 9a       	sbi	0x1f, 0	; 31
    b6e2:	01 97       	sbiw	r24, 0x01	; 1
    b6e4:	00 b4       	in	r0, 0x20	; 32
    b6e6:	02 16       	cp	r0, r18
    b6e8:	39 f0       	breq	.+14     	; 0xb6f8 <eeprom_update_r18+0x20>
    b6ea:	1f ba       	out	0x1f, r1	; 31
    b6ec:	20 bd       	out	0x20, r18	; 32
    b6ee:	0f b6       	in	r0, 0x3f	; 63
    b6f0:	f8 94       	cli
    b6f2:	fa 9a       	sbi	0x1f, 2	; 31
    b6f4:	f9 9a       	sbi	0x1f, 1	; 31
    b6f6:	0f be       	out	0x3f, r0	; 63
    b6f8:	08 95       	ret

0000b6fa <eeprom_write_block>:
    b6fa:	dc 01       	movw	r26, r24
    b6fc:	cb 01       	movw	r24, r22
    b6fe:	02 c0       	rjmp	.+4      	; 0xb704 <eeprom_write_block+0xa>
    b700:	2d 91       	ld	r18, X+
    b702:	05 d0       	rcall	.+10     	; 0xb70e <eeprom_write_r18>
    b704:	41 50       	subi	r20, 0x01	; 1
    b706:	50 40       	sbci	r21, 0x00	; 0
    b708:	d8 f7       	brcc	.-10     	; 0xb700 <eeprom_write_block+0x6>
    b70a:	08 95       	ret

0000b70c <eeprom_write_byte>:
    b70c:	26 2f       	mov	r18, r22

0000b70e <eeprom_write_r18>:
    b70e:	f9 99       	sbic	0x1f, 1	; 31
    b710:	fe cf       	rjmp	.-4      	; 0xb70e <eeprom_write_r18>
    b712:	1f ba       	out	0x1f, r1	; 31
    b714:	92 bd       	out	0x22, r25	; 34
    b716:	81 bd       	out	0x21, r24	; 33
    b718:	20 bd       	out	0x20, r18	; 32
    b71a:	0f b6       	in	r0, 0x3f	; 63
    b71c:	f8 94       	cli
    b71e:	fa 9a       	sbi	0x1f, 2	; 31
    b720:	f9 9a       	sbi	0x1f, 1	; 31
    b722:	0f be       	out	0x3f, r0	; 63
    b724:	01 96       	adiw	r24, 0x01	; 1
    b726:	08 95       	ret

0000b728 <_exit>:
    b728:	f8 94       	cli

0000b72a <__stop_program>:
    b72a:	ff cf       	rjmp	.-2      	; 0xb72a <__stop_program>
