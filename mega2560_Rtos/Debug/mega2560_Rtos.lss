
mega2560_Rtos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000480  00800200  0000bb5a  0000bbee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000bb5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000457  00800680  00800680  0000c06e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000c06e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000c0cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000aa8  00000000  00000000  0000c110  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011bb0  00000000  00000000  0000cbb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e8a  00000000  00000000  0001e768  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008e9d  00000000  00000000  000215f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000295c  00000000  00000000  0002a490  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003a53  00000000  00000000  0002cdec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f4b7  00000000  00000000  0003083f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ca0  00000000  00000000  0003fcf6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6c c5       	rjmp	.+2776   	; 0xada <__ctors_end>
       2:	00 00       	nop
       4:	8b c5       	rjmp	.+2838   	; 0xb1c <__bad_interrupt>
       6:	00 00       	nop
       8:	89 c5       	rjmp	.+2834   	; 0xb1c <__bad_interrupt>
       a:	00 00       	nop
       c:	87 c5       	rjmp	.+2830   	; 0xb1c <__bad_interrupt>
       e:	00 00       	nop
      10:	85 c5       	rjmp	.+2826   	; 0xb1c <__bad_interrupt>
      12:	00 00       	nop
      14:	83 c5       	rjmp	.+2822   	; 0xb1c <__bad_interrupt>
      16:	00 00       	nop
      18:	81 c5       	rjmp	.+2818   	; 0xb1c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7f c5       	rjmp	.+2814   	; 0xb1c <__bad_interrupt>
      1e:	00 00       	nop
      20:	7d c5       	rjmp	.+2810   	; 0xb1c <__bad_interrupt>
      22:	00 00       	nop
      24:	7b c5       	rjmp	.+2806   	; 0xb1c <__bad_interrupt>
      26:	00 00       	nop
      28:	79 c5       	rjmp	.+2802   	; 0xb1c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	77 c5       	rjmp	.+2798   	; 0xb1c <__bad_interrupt>
      2e:	00 00       	nop
      30:	75 c5       	rjmp	.+2794   	; 0xb1c <__bad_interrupt>
      32:	00 00       	nop
      34:	73 c5       	rjmp	.+2790   	; 0xb1c <__bad_interrupt>
      36:	00 00       	nop
      38:	71 c5       	rjmp	.+2786   	; 0xb1c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6f c5       	rjmp	.+2782   	; 0xb1c <__bad_interrupt>
      3e:	00 00       	nop
      40:	6d c5       	rjmp	.+2778   	; 0xb1c <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 b3 21 	jmp	0x4366	; 0x4366 <__vector_17>
      48:	69 c5       	rjmp	.+2770   	; 0xb1c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	67 c5       	rjmp	.+2766   	; 0xb1c <__bad_interrupt>
      4e:	00 00       	nop
      50:	65 c5       	rjmp	.+2762   	; 0xb1c <__bad_interrupt>
      52:	00 00       	nop
      54:	63 c5       	rjmp	.+2758   	; 0xb1c <__bad_interrupt>
      56:	00 00       	nop
      58:	61 c5       	rjmp	.+2754   	; 0xb1c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5f c5       	rjmp	.+2750   	; 0xb1c <__bad_interrupt>
      5e:	00 00       	nop
      60:	5d c5       	rjmp	.+2746   	; 0xb1c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 8f 10 	jmp	0x211e	; 0x211e <__vector_25>
      68:	0c 94 17 11 	jmp	0x222e	; 0x222e <__vector_26>
      6c:	57 c5       	rjmp	.+2734   	; 0xb1c <__bad_interrupt>
      6e:	00 00       	nop
      70:	55 c5       	rjmp	.+2730   	; 0xb1c <__bad_interrupt>
      72:	00 00       	nop
      74:	53 c5       	rjmp	.+2726   	; 0xb1c <__bad_interrupt>
      76:	00 00       	nop
      78:	51 c5       	rjmp	.+2722   	; 0xb1c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4f c5       	rjmp	.+2718   	; 0xb1c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c7       	rjmp	.+3754   	; 0xf2c <__vector_32>
      82:	00 00       	nop
      84:	4b c5       	rjmp	.+2710   	; 0xb1c <__bad_interrupt>
      86:	00 00       	nop
      88:	49 c5       	rjmp	.+2706   	; 0xb1c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	47 c5       	rjmp	.+2702   	; 0xb1c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__vector_36>
      94:	0c 94 bf 11 	jmp	0x237e	; 0x237e <__vector_37>
      98:	41 c5       	rjmp	.+2690   	; 0xb1c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	3f c5       	rjmp	.+2686   	; 0xb1c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3d c5       	rjmp	.+2682   	; 0xb1c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3b c5       	rjmp	.+2678   	; 0xb1c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	39 c5       	rjmp	.+2674   	; 0xb1c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	37 c5       	rjmp	.+2670   	; 0xb1c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	35 c5       	rjmp	.+2666   	; 0xb1c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	33 c5       	rjmp	.+2662   	; 0xb1c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	31 c5       	rjmp	.+2658   	; 0xb1c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2f c5       	rjmp	.+2654   	; 0xb1c <__bad_interrupt>
      be:	00 00       	nop
      c0:	2d c5       	rjmp	.+2650   	; 0xb1c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2b c5       	rjmp	.+2646   	; 0xb1c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	29 c5       	rjmp	.+2642   	; 0xb1c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__vector_51>
      d0:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__vector_52>
      d4:	23 c5       	rjmp	.+2630   	; 0xb1c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <__vector_54>
      dc:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__vector_55>
      e0:	1d c5       	rjmp	.+2618   	; 0xb1c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0c 0d       	add	r16, r12
      e6:	0c 0d       	add	r16, r12
      e8:	11 0d       	add	r17, r1
      ea:	11 0d       	add	r17, r1
      ec:	16 0d       	add	r17, r6
      ee:	16 0d       	add	r17, r6
      f0:	1b 0d       	add	r17, r11
      f2:	1b 0d       	add	r17, r11
      f4:	7d 0d       	add	r23, r13
      f6:	7d 0d       	add	r23, r13
      f8:	78 0d       	add	r23, r8
      fa:	78 0d       	add	r23, r8
      fc:	73 0d       	add	r23, r3
      fe:	73 0d       	add	r23, r3
     100:	6e 0d       	add	r22, r14
     102:	6e 0d       	add	r22, r14
     104:	31 0e       	add	r3, r17
     106:	31 0e       	add	r3, r17
     108:	38 0e       	add	r3, r24
     10a:	38 0e       	add	r3, r24
     10c:	3f 0e       	add	r3, r31
     10e:	3f 0e       	add	r3, r31
     110:	46 0e       	add	r4, r22
     112:	46 0e       	add	r4, r22
     114:	bd 0e       	add	r11, r29
     116:	ee 0e       	add	r14, r30
     118:	28 0f       	add	r18, r24
     11a:	59 0f       	add	r21, r25
     11c:	93 0f       	add	r25, r19
     11e:	c4 0f       	add	r28, r20
     120:	02 10       	cpse	r0, r2
     122:	33 10       	cpse	r3, r3
     124:	39 1d       	adc	r19, r9
     126:	39 1d       	adc	r19, r9
     128:	39 1d       	adc	r19, r9
     12a:	84 1d       	adc	r24, r4
     12c:	6d 1d       	adc	r22, r13
     12e:	81 1d       	adc	r24, r1
     130:	39 1d       	adc	r19, r9
     132:	39 1d       	adc	r19, r9
     134:	84 1d       	adc	r24, r4
     136:	6d 1d       	adc	r22, r13
     138:	3d 26       	eor	r3, r29
     13a:	51 25       	eor	r21, r1
     13c:	51 25       	eor	r21, r1
     13e:	5a 27       	eor	r21, r26
     140:	5a 27       	eor	r21, r26
     142:	5a 27       	eor	r21, r26
     144:	5a 27       	eor	r21, r26
     146:	5a 27       	eor	r21, r26
     148:	5a 27       	eor	r21, r26
     14a:	5a 27       	eor	r21, r26
     14c:	41 26       	eor	r4, r17
     14e:	56 25       	eor	r21, r6
     150:	56 25       	eor	r21, r6
     152:	5a 27       	eor	r21, r26
     154:	5a 27       	eor	r21, r26
     156:	5a 27       	eor	r21, r26
     158:	5a 27       	eor	r21, r26
     15a:	5a 27       	eor	r21, r26
     15c:	5a 27       	eor	r21, r26
     15e:	5a 27       	eor	r21, r26
     160:	45 26       	eor	r4, r21
     162:	5b 25       	eor	r21, r11
     164:	5b 25       	eor	r21, r11
     166:	5a 27       	eor	r21, r26
     168:	5a 27       	eor	r21, r26
     16a:	5a 27       	eor	r21, r26
     16c:	5a 27       	eor	r21, r26
     16e:	5a 27       	eor	r21, r26
     170:	5a 27       	eor	r21, r26
     172:	5a 27       	eor	r21, r26
     174:	49 26       	eor	r4, r25
     176:	60 25       	eor	r22, r0
     178:	60 25       	eor	r22, r0
     17a:	5a 27       	eor	r21, r26
     17c:	5a 27       	eor	r21, r26
     17e:	5a 27       	eor	r21, r26
     180:	5a 27       	eor	r21, r26
     182:	5a 27       	eor	r21, r26
     184:	5a 27       	eor	r21, r26
     186:	5a 27       	eor	r21, r26
     188:	4d 26       	eor	r4, r29
     18a:	65 25       	eor	r22, r5
     18c:	65 25       	eor	r22, r5
     18e:	5a 27       	eor	r21, r26
     190:	5a 27       	eor	r21, r26
     192:	5a 27       	eor	r21, r26
     194:	5a 27       	eor	r21, r26
     196:	5a 27       	eor	r21, r26
     198:	5a 27       	eor	r21, r26
     19a:	5a 27       	eor	r21, r26
     19c:	51 26       	eor	r5, r17
     19e:	6a 25       	eor	r22, r10
     1a0:	6a 25       	eor	r22, r10
     1a2:	5a 27       	eor	r21, r26
     1a4:	5a 27       	eor	r21, r26
     1a6:	5a 27       	eor	r21, r26
     1a8:	5a 27       	eor	r21, r26
     1aa:	5a 27       	eor	r21, r26
     1ac:	5a 27       	eor	r21, r26
     1ae:	5a 27       	eor	r21, r26
     1b0:	55 26       	eor	r5, r21
     1b2:	6f 25       	eor	r22, r15
     1b4:	6f 25       	eor	r22, r15
     1b6:	5a 27       	eor	r21, r26
     1b8:	5a 27       	eor	r21, r26
     1ba:	5a 27       	eor	r21, r26
     1bc:	5a 27       	eor	r21, r26
     1be:	5a 27       	eor	r21, r26
     1c0:	5a 27       	eor	r21, r26
     1c2:	5a 27       	eor	r21, r26
     1c4:	59 26       	eor	r5, r25
     1c6:	7f 25       	eor	r23, r15
     1c8:	7f 25       	eor	r23, r15
     1ca:	5a 27       	eor	r21, r26
     1cc:	5a 27       	eor	r21, r26
     1ce:	5a 27       	eor	r21, r26
     1d0:	5a 27       	eor	r21, r26
     1d2:	5a 27       	eor	r21, r26
     1d4:	5a 27       	eor	r21, r26
     1d6:	5a 27       	eor	r21, r26
     1d8:	5d 26       	eor	r5, r29
     1da:	8f 25       	eor	r24, r15
     1dc:	8f 25       	eor	r24, r15
     1de:	5a 27       	eor	r21, r26
     1e0:	5a 27       	eor	r21, r26
     1e2:	5a 27       	eor	r21, r26
     1e4:	5a 27       	eor	r21, r26
     1e6:	5a 27       	eor	r21, r26
     1e8:	5a 27       	eor	r21, r26
     1ea:	5a 27       	eor	r21, r26
     1ec:	61 26       	eor	r6, r17
     1ee:	9f 25       	eor	r25, r15
     1f0:	9f 25       	eor	r25, r15
     1f2:	5a 27       	eor	r21, r26
     1f4:	5a 27       	eor	r21, r26
     1f6:	5a 27       	eor	r21, r26
     1f8:	5a 27       	eor	r21, r26
     1fa:	5a 27       	eor	r21, r26
     1fc:	5a 27       	eor	r21, r26
     1fe:	5a 27       	eor	r21, r26
     200:	65 26       	eor	r6, r21
     202:	af 25       	eor	r26, r15
     204:	af 25       	eor	r26, r15
     206:	5a 27       	eor	r21, r26
     208:	5a 27       	eor	r21, r26
     20a:	5a 27       	eor	r21, r26
     20c:	5a 27       	eor	r21, r26
     20e:	5a 27       	eor	r21, r26
     210:	5a 27       	eor	r21, r26
     212:	5a 27       	eor	r21, r26
     214:	69 26       	eor	r6, r25
     216:	b4 25       	eor	r27, r4
     218:	b4 25       	eor	r27, r4
     21a:	5a 27       	eor	r21, r26
     21c:	5a 27       	eor	r21, r26
     21e:	5a 27       	eor	r21, r26
     220:	5a 27       	eor	r21, r26
     222:	5a 27       	eor	r21, r26
     224:	5a 27       	eor	r21, r26
     226:	5a 27       	eor	r21, r26
     228:	6d 26       	eor	r6, r29
     22a:	c4 25       	eor	r28, r4
     22c:	c4 25       	eor	r28, r4
     22e:	5a 27       	eor	r21, r26
     230:	5a 27       	eor	r21, r26
     232:	5a 27       	eor	r21, r26
     234:	5a 27       	eor	r21, r26
     236:	5a 27       	eor	r21, r26
     238:	5a 27       	eor	r21, r26
     23a:	5a 27       	eor	r21, r26
     23c:	71 26       	eor	r7, r17
     23e:	d3 25       	eor	r29, r3
     240:	d3 25       	eor	r29, r3
     242:	5a 27       	eor	r21, r26
     244:	5a 27       	eor	r21, r26
     246:	5a 27       	eor	r21, r26
     248:	5a 27       	eor	r21, r26
     24a:	5a 27       	eor	r21, r26
     24c:	5a 27       	eor	r21, r26
     24e:	5a 27       	eor	r21, r26
     250:	75 26       	eor	r7, r21
     252:	e3 25       	eor	r30, r3
     254:	e3 25       	eor	r30, r3
     256:	5a 27       	eor	r21, r26
     258:	5a 27       	eor	r21, r26
     25a:	5a 27       	eor	r21, r26
     25c:	5a 27       	eor	r21, r26
     25e:	5a 27       	eor	r21, r26
     260:	5a 27       	eor	r21, r26
     262:	5a 27       	eor	r21, r26
     264:	79 26       	eor	r7, r25
     266:	f3 25       	eor	r31, r3
     268:	f3 25       	eor	r31, r3
     26a:	5a 27       	eor	r21, r26
     26c:	5a 27       	eor	r21, r26
     26e:	5a 27       	eor	r21, r26
     270:	5a 27       	eor	r21, r26
     272:	5a 27       	eor	r21, r26
     274:	5a 27       	eor	r21, r26
     276:	5a 27       	eor	r21, r26
     278:	7d 26       	eor	r7, r29
     27a:	03 26       	eor	r0, r19
     27c:	03 26       	eor	r0, r19
     27e:	5a 27       	eor	r21, r26
     280:	5a 27       	eor	r21, r26
     282:	5a 27       	eor	r21, r26
     284:	5a 27       	eor	r21, r26
     286:	5a 27       	eor	r21, r26
     288:	5a 27       	eor	r21, r26
     28a:	5a 27       	eor	r21, r26
     28c:	81 26       	eor	r8, r17
     28e:	13 26       	eor	r1, r19
     290:	13 26       	eor	r1, r19
     292:	5a 27       	eor	r21, r26
     294:	5a 27       	eor	r21, r26
     296:	5a 27       	eor	r21, r26
     298:	5a 27       	eor	r21, r26
     29a:	5a 27       	eor	r21, r26
     29c:	5a 27       	eor	r21, r26
     29e:	5a 27       	eor	r21, r26
     2a0:	85 26       	eor	r8, r21
     2a2:	23 26       	eor	r2, r19
     2a4:	23 26       	eor	r2, r19
     2a6:	5a 27       	eor	r21, r26
     2a8:	5a 27       	eor	r21, r26
     2aa:	5a 27       	eor	r21, r26
     2ac:	5a 27       	eor	r21, r26
     2ae:	5a 27       	eor	r21, r26
     2b0:	5a 27       	eor	r21, r26
     2b2:	5a 27       	eor	r21, r26
     2b4:	89 26       	eor	r8, r25
     2b6:	33 26       	eor	r3, r19
     2b8:	33 26       	eor	r3, r19
     2ba:	5a 27       	eor	r21, r26
     2bc:	5a 27       	eor	r21, r26
     2be:	5a 27       	eor	r21, r26
     2c0:	5a 27       	eor	r21, r26
     2c2:	5a 27       	eor	r21, r26
     2c4:	5a 27       	eor	r21, r26
     2c6:	5a 27       	eor	r21, r26
     2c8:	8d 26       	eor	r8, r29
     2ca:	5a 27       	eor	r21, r26
     2cc:	5a 27       	eor	r21, r26
     2ce:	5a 27       	eor	r21, r26
     2d0:	5a 27       	eor	r21, r26
     2d2:	5a 27       	eor	r21, r26
     2d4:	5a 27       	eor	r21, r26
     2d6:	5a 27       	eor	r21, r26
     2d8:	5a 27       	eor	r21, r26
     2da:	5a 27       	eor	r21, r26
     2dc:	91 26       	eor	r9, r17
     2de:	5a 27       	eor	r21, r26
     2e0:	5a 27       	eor	r21, r26
     2e2:	5a 27       	eor	r21, r26
     2e4:	5a 27       	eor	r21, r26
     2e6:	5a 27       	eor	r21, r26
     2e8:	5a 27       	eor	r21, r26
     2ea:	5a 27       	eor	r21, r26
     2ec:	5a 27       	eor	r21, r26
     2ee:	5a 27       	eor	r21, r26
     2f0:	95 26       	eor	r9, r21
     2f2:	5a 27       	eor	r21, r26
     2f4:	5a 27       	eor	r21, r26
     2f6:	5a 27       	eor	r21, r26
     2f8:	5a 27       	eor	r21, r26
     2fa:	5a 27       	eor	r21, r26
     2fc:	5a 27       	eor	r21, r26
     2fe:	5a 27       	eor	r21, r26
     300:	5a 27       	eor	r21, r26
     302:	5a 27       	eor	r21, r26
     304:	99 26       	eor	r9, r25
     306:	5a 27       	eor	r21, r26
     308:	5a 27       	eor	r21, r26
     30a:	5a 27       	eor	r21, r26
     30c:	5a 27       	eor	r21, r26
     30e:	5a 27       	eor	r21, r26
     310:	5a 27       	eor	r21, r26
     312:	5a 27       	eor	r21, r26
     314:	5a 27       	eor	r21, r26
     316:	5a 27       	eor	r21, r26
     318:	9d 26       	eor	r9, r29
     31a:	5a 27       	eor	r21, r26
     31c:	5a 27       	eor	r21, r26
     31e:	5a 27       	eor	r21, r26
     320:	5a 27       	eor	r21, r26
     322:	5a 27       	eor	r21, r26
     324:	5a 27       	eor	r21, r26
     326:	5a 27       	eor	r21, r26
     328:	5a 27       	eor	r21, r26
     32a:	5a 27       	eor	r21, r26
     32c:	a8 26       	eor	r10, r24
     32e:	5a 27       	eor	r21, r26
     330:	5a 27       	eor	r21, r26
     332:	5a 27       	eor	r21, r26
     334:	5a 27       	eor	r21, r26
     336:	5a 27       	eor	r21, r26
     338:	5a 27       	eor	r21, r26
     33a:	5a 27       	eor	r21, r26
     33c:	5a 27       	eor	r21, r26
     33e:	5a 27       	eor	r21, r26
     340:	ac 26       	eor	r10, r28
     342:	5a 27       	eor	r21, r26
     344:	5a 27       	eor	r21, r26
     346:	5a 27       	eor	r21, r26
     348:	5a 27       	eor	r21, r26
     34a:	5a 27       	eor	r21, r26
     34c:	5a 27       	eor	r21, r26
     34e:	5a 27       	eor	r21, r26
     350:	5a 27       	eor	r21, r26
     352:	5a 27       	eor	r21, r26
     354:	b0 26       	eor	r11, r16
     356:	5a 27       	eor	r21, r26
     358:	5a 27       	eor	r21, r26
     35a:	5a 27       	eor	r21, r26
     35c:	5a 27       	eor	r21, r26
     35e:	5a 27       	eor	r21, r26
     360:	5a 27       	eor	r21, r26
     362:	5a 27       	eor	r21, r26
     364:	5a 27       	eor	r21, r26
     366:	5a 27       	eor	r21, r26
     368:	b4 26       	eor	r11, r20
     36a:	5a 27       	eor	r21, r26
     36c:	5a 27       	eor	r21, r26
     36e:	5a 27       	eor	r21, r26
     370:	5a 27       	eor	r21, r26
     372:	5a 27       	eor	r21, r26
     374:	5a 27       	eor	r21, r26
     376:	5a 27       	eor	r21, r26
     378:	5a 27       	eor	r21, r26
     37a:	5a 27       	eor	r21, r26
     37c:	b8 26       	eor	r11, r24
     37e:	01 27       	eor	r16, r17
     380:	25 27       	eor	r18, r21
     382:	5a 27       	eor	r21, r26
     384:	5a 27       	eor	r21, r26
     386:	5a 27       	eor	r21, r26
     388:	5a 27       	eor	r21, r26
     38a:	5a 27       	eor	r21, r26
     38c:	5a 27       	eor	r21, r26
     38e:	5a 27       	eor	r21, r26
     390:	be 26       	eor	r11, r30
     392:	04 27       	eor	r16, r20
     394:	2b 27       	eor	r18, r27
     396:	5a 27       	eor	r21, r26
     398:	5a 27       	eor	r21, r26
     39a:	5a 27       	eor	r21, r26
     39c:	5a 27       	eor	r21, r26
     39e:	5a 27       	eor	r21, r26
     3a0:	5a 27       	eor	r21, r26
     3a2:	5a 27       	eor	r21, r26
     3a4:	c2 26       	eor	r12, r18
     3a6:	0a 27       	eor	r16, r26
     3a8:	31 27       	eor	r19, r17
     3aa:	5a 27       	eor	r21, r26
     3ac:	5a 27       	eor	r21, r26
     3ae:	5a 27       	eor	r21, r26
     3b0:	5a 27       	eor	r21, r26
     3b2:	5a 27       	eor	r21, r26
     3b4:	5a 27       	eor	r21, r26
     3b6:	5a 27       	eor	r21, r26
     3b8:	c6 26       	eor	r12, r22
     3ba:	10 27       	eor	r17, r16
     3bc:	37 27       	eor	r19, r23
     3be:	5a 27       	eor	r21, r26
     3c0:	5a 27       	eor	r21, r26
     3c2:	5a 27       	eor	r21, r26
     3c4:	5a 27       	eor	r21, r26
     3c6:	5a 27       	eor	r21, r26
     3c8:	5a 27       	eor	r21, r26
     3ca:	5a 27       	eor	r21, r26
     3cc:	ca 26       	eor	r12, r26
     3ce:	16 27       	eor	r17, r22
     3d0:	3d 27       	eor	r19, r29
     3d2:	5a 27       	eor	r21, r26
     3d4:	5a 27       	eor	r21, r26
     3d6:	5a 27       	eor	r21, r26
     3d8:	5a 27       	eor	r21, r26
     3da:	5a 27       	eor	r21, r26
     3dc:	5a 27       	eor	r21, r26
     3de:	5a 27       	eor	r21, r26
     3e0:	ce 26       	eor	r12, r30
     3e2:	19 27       	eor	r17, r25
     3e4:	43 27       	eor	r20, r19
     3e6:	5a 27       	eor	r21, r26
     3e8:	5a 27       	eor	r21, r26
     3ea:	5a 27       	eor	r21, r26
     3ec:	5a 27       	eor	r21, r26
     3ee:	5a 27       	eor	r21, r26
     3f0:	5a 27       	eor	r21, r26
     3f2:	5a 27       	eor	r21, r26
     3f4:	d1 26       	eor	r13, r17
     3f6:	5a 27       	eor	r21, r26
     3f8:	5a 27       	eor	r21, r26
     3fa:	5a 27       	eor	r21, r26
     3fc:	5a 27       	eor	r21, r26
     3fe:	5a 27       	eor	r21, r26
     400:	5a 27       	eor	r21, r26
     402:	5a 27       	eor	r21, r26
     404:	5a 27       	eor	r21, r26
     406:	5a 27       	eor	r21, r26
     408:	d5 26       	eor	r13, r21
     40a:	1c 27       	eor	r17, r28
     40c:	49 27       	eor	r20, r25
     40e:	5a 27       	eor	r21, r26
     410:	5a 27       	eor	r21, r26
     412:	5a 27       	eor	r21, r26
     414:	5a 27       	eor	r21, r26
     416:	5a 27       	eor	r21, r26
     418:	5a 27       	eor	r21, r26
     41a:	5a 27       	eor	r21, r26
     41c:	d8 26       	eor	r13, r24
     41e:	1f 27       	eor	r17, r31
     420:	4f 27       	eor	r20, r31
     422:	5a 27       	eor	r21, r26
     424:	5a 27       	eor	r21, r26
     426:	5a 27       	eor	r21, r26
     428:	5a 27       	eor	r21, r26
     42a:	5a 27       	eor	r21, r26
     42c:	5a 27       	eor	r21, r26
     42e:	5a 27       	eor	r21, r26
     430:	db 26       	eor	r13, r27
     432:	22 27       	eor	r18, r18
     434:	55 27       	eor	r21, r21
     436:	5a 27       	eor	r21, r26
     438:	5a 27       	eor	r21, r26
     43a:	5a 27       	eor	r21, r26
     43c:	5a 27       	eor	r21, r26
     43e:	5a 27       	eor	r21, r26
     440:	5a 27       	eor	r21, r26
     442:	5a 27       	eor	r21, r26
     444:	de 26       	eor	r13, r30
     446:	5a 27       	eor	r21, r26
     448:	5a 27       	eor	r21, r26
     44a:	5a 27       	eor	r21, r26
     44c:	5a 27       	eor	r21, r26
     44e:	5a 27       	eor	r21, r26
     450:	5a 27       	eor	r21, r26
     452:	5a 27       	eor	r21, r26
     454:	5a 27       	eor	r21, r26
     456:	5a 27       	eor	r21, r26
     458:	e2 26       	eor	r14, r18
     45a:	5a 27       	eor	r21, r26
     45c:	5a 27       	eor	r21, r26
     45e:	5a 27       	eor	r21, r26
     460:	5a 27       	eor	r21, r26
     462:	5a 27       	eor	r21, r26
     464:	5a 27       	eor	r21, r26
     466:	5a 27       	eor	r21, r26
     468:	5a 27       	eor	r21, r26
     46a:	5a 27       	eor	r21, r26
     46c:	e6 26       	eor	r14, r22
     46e:	5a 27       	eor	r21, r26
     470:	5a 27       	eor	r21, r26
     472:	5a 27       	eor	r21, r26
     474:	5a 27       	eor	r21, r26
     476:	5a 27       	eor	r21, r26
     478:	5a 27       	eor	r21, r26
     47a:	5a 27       	eor	r21, r26
     47c:	5a 27       	eor	r21, r26
     47e:	5a 27       	eor	r21, r26
     480:	ea 26       	eor	r14, r26
     482:	5a 27       	eor	r21, r26
     484:	5a 27       	eor	r21, r26
     486:	5a 27       	eor	r21, r26
     488:	5a 27       	eor	r21, r26
     48a:	5a 27       	eor	r21, r26
     48c:	5a 27       	eor	r21, r26
     48e:	5a 27       	eor	r21, r26
     490:	5a 27       	eor	r21, r26
     492:	5a 27       	eor	r21, r26
     494:	ee 26       	eor	r14, r30
     496:	5a 27       	eor	r21, r26
     498:	5a 27       	eor	r21, r26
     49a:	5a 27       	eor	r21, r26
     49c:	5a 27       	eor	r21, r26
     49e:	5a 27       	eor	r21, r26
     4a0:	5a 27       	eor	r21, r26
     4a2:	5a 27       	eor	r21, r26
     4a4:	5a 27       	eor	r21, r26
     4a6:	5a 27       	eor	r21, r26
     4a8:	f1 26       	eor	r15, r17
     4aa:	5a 27       	eor	r21, r26
     4ac:	5a 27       	eor	r21, r26
     4ae:	5a 27       	eor	r21, r26
     4b0:	5a 27       	eor	r21, r26
     4b2:	5a 27       	eor	r21, r26
     4b4:	5a 27       	eor	r21, r26
     4b6:	5a 27       	eor	r21, r26
     4b8:	5a 27       	eor	r21, r26
     4ba:	5a 27       	eor	r21, r26
     4bc:	f5 26       	eor	r15, r21
     4be:	5a 27       	eor	r21, r26
     4c0:	5a 27       	eor	r21, r26
     4c2:	5a 27       	eor	r21, r26
     4c4:	5a 27       	eor	r21, r26
     4c6:	5a 27       	eor	r21, r26
     4c8:	5a 27       	eor	r21, r26
     4ca:	5a 27       	eor	r21, r26
     4cc:	5a 27       	eor	r21, r26
     4ce:	5a 27       	eor	r21, r26
     4d0:	f9 26       	eor	r15, r25
     4d2:	5a 27       	eor	r21, r26
     4d4:	5a 27       	eor	r21, r26
     4d6:	5a 27       	eor	r21, r26
     4d8:	5a 27       	eor	r21, r26
     4da:	5a 27       	eor	r21, r26
     4dc:	5a 27       	eor	r21, r26
     4de:	5a 27       	eor	r21, r26
     4e0:	5a 27       	eor	r21, r26
     4e2:	5a 27       	eor	r21, r26
     4e4:	fd 26       	eor	r15, r29
     4e6:	6e 27       	eor	r22, r30
     4e8:	23 28       	or	r2, r3
     4ea:	23 28       	or	r2, r3
     4ec:	23 28       	or	r2, r3
     4ee:	23 28       	or	r2, r3
     4f0:	23 28       	or	r2, r3
     4f2:	23 28       	or	r2, r3
     4f4:	23 28       	or	r2, r3
     4f6:	23 28       	or	r2, r3
     4f8:	23 28       	or	r2, r3
     4fa:	70 27       	eor	r23, r16
     4fc:	23 28       	or	r2, r3
     4fe:	23 28       	or	r2, r3
     500:	23 28       	or	r2, r3
     502:	23 28       	or	r2, r3
     504:	23 28       	or	r2, r3
     506:	23 28       	or	r2, r3
     508:	23 28       	or	r2, r3
     50a:	23 28       	or	r2, r3
     50c:	23 28       	or	r2, r3
     50e:	73 27       	eor	r23, r19
     510:	23 28       	or	r2, r3
     512:	23 28       	or	r2, r3
     514:	23 28       	or	r2, r3
     516:	23 28       	or	r2, r3
     518:	23 28       	or	r2, r3
     51a:	23 28       	or	r2, r3
     51c:	23 28       	or	r2, r3
     51e:	23 28       	or	r2, r3
     520:	23 28       	or	r2, r3
     522:	76 27       	eor	r23, r22
     524:	23 28       	or	r2, r3
     526:	23 28       	or	r2, r3
     528:	23 28       	or	r2, r3
     52a:	23 28       	or	r2, r3
     52c:	23 28       	or	r2, r3
     52e:	23 28       	or	r2, r3
     530:	23 28       	or	r2, r3
     532:	23 28       	or	r2, r3
     534:	23 28       	or	r2, r3
     536:	79 27       	eor	r23, r25
     538:	23 28       	or	r2, r3
     53a:	23 28       	or	r2, r3
     53c:	23 28       	or	r2, r3
     53e:	23 28       	or	r2, r3
     540:	23 28       	or	r2, r3
     542:	23 28       	or	r2, r3
     544:	23 28       	or	r2, r3
     546:	23 28       	or	r2, r3
     548:	23 28       	or	r2, r3
     54a:	7c 27       	eor	r23, r28
     54c:	23 28       	or	r2, r3
     54e:	23 28       	or	r2, r3
     550:	23 28       	or	r2, r3
     552:	23 28       	or	r2, r3
     554:	23 28       	or	r2, r3
     556:	23 28       	or	r2, r3
     558:	23 28       	or	r2, r3
     55a:	23 28       	or	r2, r3
     55c:	23 28       	or	r2, r3
     55e:	7f 27       	eor	r23, r31
     560:	23 28       	or	r2, r3
     562:	23 28       	or	r2, r3
     564:	23 28       	or	r2, r3
     566:	23 28       	or	r2, r3
     568:	23 28       	or	r2, r3
     56a:	23 28       	or	r2, r3
     56c:	23 28       	or	r2, r3
     56e:	23 28       	or	r2, r3
     570:	23 28       	or	r2, r3
     572:	82 27       	eor	r24, r18
     574:	23 28       	or	r2, r3
     576:	23 28       	or	r2, r3
     578:	23 28       	or	r2, r3
     57a:	23 28       	or	r2, r3
     57c:	23 28       	or	r2, r3
     57e:	23 28       	or	r2, r3
     580:	23 28       	or	r2, r3
     582:	23 28       	or	r2, r3
     584:	23 28       	or	r2, r3
     586:	85 27       	eor	r24, r21
     588:	23 28       	or	r2, r3
     58a:	23 28       	or	r2, r3
     58c:	23 28       	or	r2, r3
     58e:	23 28       	or	r2, r3
     590:	23 28       	or	r2, r3
     592:	23 28       	or	r2, r3
     594:	23 28       	or	r2, r3
     596:	23 28       	or	r2, r3
     598:	23 28       	or	r2, r3
     59a:	88 27       	eor	r24, r24
     59c:	23 28       	or	r2, r3
     59e:	23 28       	or	r2, r3
     5a0:	23 28       	or	r2, r3
     5a2:	23 28       	or	r2, r3
     5a4:	23 28       	or	r2, r3
     5a6:	23 28       	or	r2, r3
     5a8:	23 28       	or	r2, r3
     5aa:	23 28       	or	r2, r3
     5ac:	23 28       	or	r2, r3
     5ae:	8b 27       	eor	r24, r27
     5b0:	23 28       	or	r2, r3
     5b2:	23 28       	or	r2, r3
     5b4:	23 28       	or	r2, r3
     5b6:	23 28       	or	r2, r3
     5b8:	23 28       	or	r2, r3
     5ba:	23 28       	or	r2, r3
     5bc:	23 28       	or	r2, r3
     5be:	23 28       	or	r2, r3
     5c0:	23 28       	or	r2, r3
     5c2:	8e 27       	eor	r24, r30
     5c4:	23 28       	or	r2, r3
     5c6:	23 28       	or	r2, r3
     5c8:	23 28       	or	r2, r3
     5ca:	23 28       	or	r2, r3
     5cc:	23 28       	or	r2, r3
     5ce:	23 28       	or	r2, r3
     5d0:	23 28       	or	r2, r3
     5d2:	23 28       	or	r2, r3
     5d4:	23 28       	or	r2, r3
     5d6:	91 27       	eor	r25, r17
     5d8:	23 28       	or	r2, r3
     5da:	23 28       	or	r2, r3
     5dc:	23 28       	or	r2, r3
     5de:	23 28       	or	r2, r3
     5e0:	23 28       	or	r2, r3
     5e2:	23 28       	or	r2, r3
     5e4:	23 28       	or	r2, r3
     5e6:	23 28       	or	r2, r3
     5e8:	23 28       	or	r2, r3
     5ea:	94 27       	eor	r25, r20
     5ec:	23 28       	or	r2, r3
     5ee:	23 28       	or	r2, r3
     5f0:	23 28       	or	r2, r3
     5f2:	23 28       	or	r2, r3
     5f4:	23 28       	or	r2, r3
     5f6:	23 28       	or	r2, r3
     5f8:	23 28       	or	r2, r3
     5fa:	23 28       	or	r2, r3
     5fc:	23 28       	or	r2, r3
     5fe:	97 27       	eor	r25, r23
     600:	23 28       	or	r2, r3
     602:	23 28       	or	r2, r3
     604:	23 28       	or	r2, r3
     606:	23 28       	or	r2, r3
     608:	23 28       	or	r2, r3
     60a:	23 28       	or	r2, r3
     60c:	23 28       	or	r2, r3
     60e:	23 28       	or	r2, r3
     610:	23 28       	or	r2, r3
     612:	9a 27       	eor	r25, r26
     614:	23 28       	or	r2, r3
     616:	23 28       	or	r2, r3
     618:	23 28       	or	r2, r3
     61a:	23 28       	or	r2, r3
     61c:	23 28       	or	r2, r3
     61e:	23 28       	or	r2, r3
     620:	23 28       	or	r2, r3
     622:	23 28       	or	r2, r3
     624:	23 28       	or	r2, r3
     626:	9d 27       	eor	r25, r29
     628:	23 28       	or	r2, r3
     62a:	23 28       	or	r2, r3
     62c:	23 28       	or	r2, r3
     62e:	23 28       	or	r2, r3
     630:	23 28       	or	r2, r3
     632:	23 28       	or	r2, r3
     634:	23 28       	or	r2, r3
     636:	23 28       	or	r2, r3
     638:	23 28       	or	r2, r3
     63a:	a0 27       	eor	r26, r16
     63c:	23 28       	or	r2, r3
     63e:	23 28       	or	r2, r3
     640:	23 28       	or	r2, r3
     642:	23 28       	or	r2, r3
     644:	23 28       	or	r2, r3
     646:	23 28       	or	r2, r3
     648:	23 28       	or	r2, r3
     64a:	23 28       	or	r2, r3
     64c:	23 28       	or	r2, r3
     64e:	a3 27       	eor	r26, r19
     650:	23 28       	or	r2, r3
     652:	23 28       	or	r2, r3
     654:	23 28       	or	r2, r3
     656:	23 28       	or	r2, r3
     658:	23 28       	or	r2, r3
     65a:	23 28       	or	r2, r3
     65c:	23 28       	or	r2, r3
     65e:	23 28       	or	r2, r3
     660:	23 28       	or	r2, r3
     662:	a6 27       	eor	r26, r22
     664:	23 28       	or	r2, r3
     666:	23 28       	or	r2, r3
     668:	23 28       	or	r2, r3
     66a:	23 28       	or	r2, r3
     66c:	23 28       	or	r2, r3
     66e:	23 28       	or	r2, r3
     670:	23 28       	or	r2, r3
     672:	23 28       	or	r2, r3
     674:	23 28       	or	r2, r3
     676:	a9 27       	eor	r26, r25
     678:	23 28       	or	r2, r3
     67a:	23 28       	or	r2, r3
     67c:	23 28       	or	r2, r3
     67e:	23 28       	or	r2, r3
     680:	23 28       	or	r2, r3
     682:	23 28       	or	r2, r3
     684:	23 28       	or	r2, r3
     686:	23 28       	or	r2, r3
     688:	23 28       	or	r2, r3
     68a:	ac 27       	eor	r26, r28
     68c:	23 28       	or	r2, r3
     68e:	23 28       	or	r2, r3
     690:	23 28       	or	r2, r3
     692:	23 28       	or	r2, r3
     694:	23 28       	or	r2, r3
     696:	23 28       	or	r2, r3
     698:	23 28       	or	r2, r3
     69a:	23 28       	or	r2, r3
     69c:	23 28       	or	r2, r3
     69e:	af 27       	eor	r26, r31
     6a0:	23 28       	or	r2, r3
     6a2:	23 28       	or	r2, r3
     6a4:	23 28       	or	r2, r3
     6a6:	23 28       	or	r2, r3
     6a8:	23 28       	or	r2, r3
     6aa:	23 28       	or	r2, r3
     6ac:	23 28       	or	r2, r3
     6ae:	23 28       	or	r2, r3
     6b0:	23 28       	or	r2, r3
     6b2:	b2 27       	eor	r27, r18
     6b4:	23 28       	or	r2, r3
     6b6:	23 28       	or	r2, r3
     6b8:	23 28       	or	r2, r3
     6ba:	23 28       	or	r2, r3
     6bc:	23 28       	or	r2, r3
     6be:	23 28       	or	r2, r3
     6c0:	23 28       	or	r2, r3
     6c2:	23 28       	or	r2, r3
     6c4:	23 28       	or	r2, r3
     6c6:	b5 27       	eor	r27, r21
     6c8:	23 28       	or	r2, r3
     6ca:	23 28       	or	r2, r3
     6cc:	23 28       	or	r2, r3
     6ce:	23 28       	or	r2, r3
     6d0:	23 28       	or	r2, r3
     6d2:	23 28       	or	r2, r3
     6d4:	23 28       	or	r2, r3
     6d6:	23 28       	or	r2, r3
     6d8:	23 28       	or	r2, r3
     6da:	c2 27       	eor	r28, r18
     6dc:	23 28       	or	r2, r3
     6de:	23 28       	or	r2, r3
     6e0:	23 28       	or	r2, r3
     6e2:	23 28       	or	r2, r3
     6e4:	23 28       	or	r2, r3
     6e6:	23 28       	or	r2, r3
     6e8:	23 28       	or	r2, r3
     6ea:	23 28       	or	r2, r3
     6ec:	23 28       	or	r2, r3
     6ee:	c5 27       	eor	r28, r21
     6f0:	23 28       	or	r2, r3
     6f2:	23 28       	or	r2, r3
     6f4:	23 28       	or	r2, r3
     6f6:	23 28       	or	r2, r3
     6f8:	23 28       	or	r2, r3
     6fa:	23 28       	or	r2, r3
     6fc:	23 28       	or	r2, r3
     6fe:	23 28       	or	r2, r3
     700:	23 28       	or	r2, r3
     702:	c8 27       	eor	r28, r24
     704:	23 28       	or	r2, r3
     706:	23 28       	or	r2, r3
     708:	23 28       	or	r2, r3
     70a:	23 28       	or	r2, r3
     70c:	23 28       	or	r2, r3
     70e:	23 28       	or	r2, r3
     710:	23 28       	or	r2, r3
     712:	23 28       	or	r2, r3
     714:	23 28       	or	r2, r3
     716:	cb 27       	eor	r28, r27
     718:	23 28       	or	r2, r3
     71a:	23 28       	or	r2, r3
     71c:	23 28       	or	r2, r3
     71e:	23 28       	or	r2, r3
     720:	23 28       	or	r2, r3
     722:	23 28       	or	r2, r3
     724:	23 28       	or	r2, r3
     726:	23 28       	or	r2, r3
     728:	23 28       	or	r2, r3
     72a:	ce 27       	eor	r28, r30
     72c:	23 28       	or	r2, r3
     72e:	23 28       	or	r2, r3
     730:	23 28       	or	r2, r3
     732:	23 28       	or	r2, r3
     734:	23 28       	or	r2, r3
     736:	23 28       	or	r2, r3
     738:	23 28       	or	r2, r3
     73a:	23 28       	or	r2, r3
     73c:	23 28       	or	r2, r3
     73e:	d3 27       	eor	r29, r19
     740:	23 28       	or	r2, r3
     742:	23 28       	or	r2, r3
     744:	23 28       	or	r2, r3
     746:	23 28       	or	r2, r3
     748:	23 28       	or	r2, r3
     74a:	23 28       	or	r2, r3
     74c:	23 28       	or	r2, r3
     74e:	23 28       	or	r2, r3
     750:	23 28       	or	r2, r3
     752:	d6 27       	eor	r29, r22
     754:	23 28       	or	r2, r3
     756:	23 28       	or	r2, r3
     758:	23 28       	or	r2, r3
     75a:	23 28       	or	r2, r3
     75c:	23 28       	or	r2, r3
     75e:	23 28       	or	r2, r3
     760:	23 28       	or	r2, r3
     762:	23 28       	or	r2, r3
     764:	23 28       	or	r2, r3
     766:	d9 27       	eor	r29, r25
     768:	23 28       	or	r2, r3
     76a:	23 28       	or	r2, r3
     76c:	23 28       	or	r2, r3
     76e:	23 28       	or	r2, r3
     770:	23 28       	or	r2, r3
     772:	23 28       	or	r2, r3
     774:	23 28       	or	r2, r3
     776:	23 28       	or	r2, r3
     778:	23 28       	or	r2, r3
     77a:	dc 27       	eor	r29, r28
     77c:	23 28       	or	r2, r3
     77e:	23 28       	or	r2, r3
     780:	23 28       	or	r2, r3
     782:	23 28       	or	r2, r3
     784:	23 28       	or	r2, r3
     786:	23 28       	or	r2, r3
     788:	23 28       	or	r2, r3
     78a:	23 28       	or	r2, r3
     78c:	23 28       	or	r2, r3
     78e:	df 27       	eor	r29, r31
     790:	23 28       	or	r2, r3
     792:	23 28       	or	r2, r3
     794:	23 28       	or	r2, r3
     796:	23 28       	or	r2, r3
     798:	23 28       	or	r2, r3
     79a:	23 28       	or	r2, r3
     79c:	23 28       	or	r2, r3
     79e:	23 28       	or	r2, r3
     7a0:	23 28       	or	r2, r3
     7a2:	e4 27       	eor	r30, r20
     7a4:	23 28       	or	r2, r3
     7a6:	23 28       	or	r2, r3
     7a8:	23 28       	or	r2, r3
     7aa:	23 28       	or	r2, r3
     7ac:	23 28       	or	r2, r3
     7ae:	23 28       	or	r2, r3
     7b0:	23 28       	or	r2, r3
     7b2:	23 28       	or	r2, r3
     7b4:	23 28       	or	r2, r3
     7b6:	e7 27       	eor	r30, r23
     7b8:	23 28       	or	r2, r3
     7ba:	23 28       	or	r2, r3
     7bc:	23 28       	or	r2, r3
     7be:	23 28       	or	r2, r3
     7c0:	23 28       	or	r2, r3
     7c2:	23 28       	or	r2, r3
     7c4:	23 28       	or	r2, r3
     7c6:	23 28       	or	r2, r3
     7c8:	23 28       	or	r2, r3
     7ca:	ec 27       	eor	r30, r28
     7cc:	23 28       	or	r2, r3
     7ce:	23 28       	or	r2, r3
     7d0:	23 28       	or	r2, r3
     7d2:	23 28       	or	r2, r3
     7d4:	23 28       	or	r2, r3
     7d6:	23 28       	or	r2, r3
     7d8:	23 28       	or	r2, r3
     7da:	23 28       	or	r2, r3
     7dc:	23 28       	or	r2, r3
     7de:	f1 27       	eor	r31, r17
     7e0:	13 28       	or	r1, r3
     7e2:	18 28       	or	r1, r8
     7e4:	1d 28       	or	r1, r13
     7e6:	23 28       	or	r2, r3
     7e8:	23 28       	or	r2, r3
     7ea:	23 28       	or	r2, r3
     7ec:	23 28       	or	r2, r3
     7ee:	23 28       	or	r2, r3
     7f0:	23 28       	or	r2, r3
     7f2:	f6 27       	eor	r31, r22
     7f4:	23 28       	or	r2, r3
     7f6:	23 28       	or	r2, r3
     7f8:	23 28       	or	r2, r3
     7fa:	23 28       	or	r2, r3
     7fc:	23 28       	or	r2, r3
     7fe:	23 28       	or	r2, r3
     800:	23 28       	or	r2, r3
     802:	23 28       	or	r2, r3
     804:	23 28       	or	r2, r3
     806:	f9 27       	eor	r31, r25
     808:	23 28       	or	r2, r3
     80a:	23 28       	or	r2, r3
     80c:	23 28       	or	r2, r3
     80e:	23 28       	or	r2, r3
     810:	23 28       	or	r2, r3
     812:	23 28       	or	r2, r3
     814:	23 28       	or	r2, r3
     816:	23 28       	or	r2, r3
     818:	23 28       	or	r2, r3
     81a:	fc 27       	eor	r31, r28
     81c:	23 28       	or	r2, r3
     81e:	23 28       	or	r2, r3
     820:	23 28       	or	r2, r3
     822:	23 28       	or	r2, r3
     824:	23 28       	or	r2, r3
     826:	23 28       	or	r2, r3
     828:	23 28       	or	r2, r3
     82a:	23 28       	or	r2, r3
     82c:	23 28       	or	r2, r3
     82e:	ff 27       	eor	r31, r31
     830:	23 28       	or	r2, r3
     832:	23 28       	or	r2, r3
     834:	23 28       	or	r2, r3
     836:	23 28       	or	r2, r3
     838:	23 28       	or	r2, r3
     83a:	23 28       	or	r2, r3
     83c:	23 28       	or	r2, r3
     83e:	23 28       	or	r2, r3
     840:	23 28       	or	r2, r3
     842:	02 28       	or	r0, r2
     844:	23 28       	or	r2, r3
     846:	23 28       	or	r2, r3
     848:	23 28       	or	r2, r3
     84a:	23 28       	or	r2, r3
     84c:	23 28       	or	r2, r3
     84e:	23 28       	or	r2, r3
     850:	23 28       	or	r2, r3
     852:	23 28       	or	r2, r3
     854:	23 28       	or	r2, r3
     856:	07 28       	or	r0, r7
     858:	23 28       	or	r2, r3
     85a:	23 28       	or	r2, r3
     85c:	23 28       	or	r2, r3
     85e:	23 28       	or	r2, r3
     860:	23 28       	or	r2, r3
     862:	23 28       	or	r2, r3
     864:	23 28       	or	r2, r3
     866:	23 28       	or	r2, r3
     868:	23 28       	or	r2, r3
     86a:	0a 28       	or	r0, r10
     86c:	23 28       	or	r2, r3
     86e:	23 28       	or	r2, r3
     870:	23 28       	or	r2, r3
     872:	23 28       	or	r2, r3
     874:	23 28       	or	r2, r3
     876:	23 28       	or	r2, r3
     878:	23 28       	or	r2, r3
     87a:	23 28       	or	r2, r3
     87c:	23 28       	or	r2, r3
     87e:	0d 28       	or	r0, r13
     880:	23 28       	or	r2, r3
     882:	23 28       	or	r2, r3
     884:	23 28       	or	r2, r3
     886:	23 28       	or	r2, r3
     888:	23 28       	or	r2, r3
     88a:	23 28       	or	r2, r3
     88c:	23 28       	or	r2, r3
     88e:	23 28       	or	r2, r3
     890:	23 28       	or	r2, r3
     892:	10 28       	or	r1, r0
     894:	08 00       	.word	0x0008	; ????
     896:	00 00       	nop
     898:	be 92       	st	-X, r11
     89a:	24 49       	sbci	r18, 0x94	; 148
     89c:	12 3e       	cpi	r17, 0xE2	; 226
     89e:	ab aa       	std	Y+51, r10	; 0x33
     8a0:	aa 2a       	or	r10, r26
     8a2:	be cd       	rjmp	.-1156   	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     8a4:	cc cc       	rjmp	.-1640   	; 0x23e <__SREG__+0x1ff>
     8a6:	4c 3e       	cpi	r20, 0xEC	; 236
     8a8:	00 00       	nop
     8aa:	00 80       	ld	r0, Z
     8ac:	be ab       	std	Y+54, r27	; 0x36
     8ae:	aa aa       	std	Y+50, r10	; 0x32
     8b0:	aa 3e       	cpi	r26, 0xEA	; 234
     8b2:	00 00       	nop
     8b4:	00 00       	nop
     8b6:	bf 00       	.word	0x00bf	; ????
     8b8:	00 00       	nop
     8ba:	80 3f       	cpi	r24, 0xF0	; 240
     8bc:	00 00       	nop
     8be:	00 00       	nop
     8c0:	00 08       	sbc	r0, r0
     8c2:	41 78       	andi	r20, 0x81	; 129
     8c4:	d3 bb       	out	0x13, r29	; 19
     8c6:	43 87       	std	Z+11, r20	; 0x0b
     8c8:	d1 13       	cpse	r29, r17
     8ca:	3d 19       	sub	r19, r13
     8cc:	0e 3c       	cpi	r16, 0xCE	; 206
     8ce:	c3 bd       	out	0x23, r28	; 35
     8d0:	42 82       	std	Z+2, r4	; 0x02
     8d2:	ad 2b       	or	r26, r29
     8d4:	3e 68       	ori	r19, 0x8E	; 142
     8d6:	ec 82       	std	Y+4, r14	; 0x04
     8d8:	76 be       	out	0x36, r7	; 54
     8da:	d9 8f       	std	Y+25, r29	; 0x19
     8dc:	e1 a9       	ldd	r30, Z+49	; 0x31
     8de:	3e 4c       	sbci	r19, 0xCE	; 206
     8e0:	80 ef       	ldi	r24, 0xF0	; 240
     8e2:	ff be       	out	0x3f, r15	; 63
     8e4:	01 c4       	rjmp	.+2050   	; 0x10e8 <vListInsert+0x78>
     8e6:	ff 7f       	andi	r31, 0xFF	; 255
     8e8:	3f 00       	.word	0x003f	; ????
     8ea:	00 00       	nop
	...

000008ee <__trampolines_end>:
     8ee:	6e 61       	ori	r22, 0x1E	; 30
     8f0:	6e 00       	.word	0x006e	; ????

000008f2 <__c.2332>:
     8f2:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     902:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     912:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     922:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     932:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     942:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     952:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     962:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     972:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     982:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     992:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     9a2:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     9b2:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     9c2:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     9d2:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     9e2:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000009f0 <R22_Saturation_Temp>:
     9f0:	9a 99 c9 c1 33 33 6b c1 33 33 d3 c0 cd cc cc 3d     ....33k.33.....=
     a00:	48 e1 a2 40 66 66 2e 41 00 00 78 41 9a 99 9d 41     H..@ff.A..xA...A
     a10:	00 00 bc 41 cd cc d8 41 33 33 f3 41 66 66 06 42     ...A...A33.Aff.B
     a20:	66 66 12 42 9a 99 1d 42 66 66 28 42 cd cc 32 42     ff.B...Bff(B..2B
     a30:	cd cc 28 42 66 66 46 42 9a 99 4f 42 66 66 58 42     ..(BffFB..OBffXB
     a40:	33 33 61 42 9a 99 69 42 9a 99 71 42 33 33 79 42     33aB..iB..qB33yB
     a50:	9a 99 80 42 33 33 84 42 cd cc 87 42 66 66 8b 42     ...B33.B...Bff.B
     a60:	00 00 8f 42 66 66 92 42 9a 99 95 42 cd cc 98 42     ...Bff.B...B...B

00000a70 <prvIdleTask>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
     a70:	00 ea       	ldi	r16, 0xA0	; 160
     a72:	16 e0       	ldi	r17, 0x06	; 6
     a74:	0f 2e       	mov	r0, r31
     a76:	f0 ed       	ldi	r31, 0xD0	; 208
     a78:	ef 2e       	mov	r14, r31
     a7a:	f6 e0       	ldi	r31, 0x06	; 6
     a7c:	ff 2e       	mov	r15, r31
     a7e:	f0 2d       	mov	r31, r0
     a80:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <uxDeletedTasksWaitingCleanUp>
     a84:	88 23       	and	r24, r24
     a86:	11 f1       	breq	.+68     	; 0xacc <prvIdleTask+0x5c>
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	0f 92       	push	r0
     a8e:	d8 01       	movw	r26, r16
     a90:	17 96       	adiw	r26, 0x07	; 7
     a92:	ed 91       	ld	r30, X+
     a94:	fc 91       	ld	r31, X
     a96:	18 97       	sbiw	r26, 0x08	; 8
     a98:	c0 85       	ldd	r28, Z+8	; 0x08
     a9a:	d1 85       	ldd	r29, Z+9	; 0x09
     a9c:	ce 01       	movw	r24, r28
     a9e:	02 96       	adiw	r24, 0x02	; 2
     aa0:	24 d3       	rcall	.+1608   	; 0x10ea <uxListRemove>
     aa2:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <uxCurrentNumberOfTasks>
     aa6:	81 50       	subi	r24, 0x01	; 1
     aa8:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <uxCurrentNumberOfTasks>
     aac:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <uxDeletedTasksWaitingCleanUp>
     ab0:	81 50       	subi	r24, 0x01	; 1
     ab2:	80 93 9f 06 	sts	0x069F, r24	; 0x80069f <uxDeletedTasksWaitingCleanUp>
     ab6:	0f 90       	pop	r0
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     abc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     abe:	75 d0       	rcall	.+234    	; 0xbaa <vPortFree>
     ac0:	ce 01       	movw	r24, r28
     ac2:	73 d0       	rcall	.+230    	; 0xbaa <vPortFree>
     ac4:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <uxDeletedTasksWaitingCleanUp>
     ac8:	81 11       	cpse	r24, r1
     aca:	de cf       	rjmp	.-68     	; 0xa88 <prvIdleTask+0x18>
     acc:	f7 01       	movw	r30, r14
     ace:	80 81       	ld	r24, Z
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	08 f0       	brcs	.+2      	; 0xad6 <prvIdleTask+0x66>
     ad4:	3d d1       	rcall	.+634    	; 0xd50 <vPortYield>
     ad6:	73 d2       	rcall	.+1254   	; 0xfbe <vApplicationIdleHook>
     ad8:	d3 cf       	rjmp	.-90     	; 0xa80 <prvIdleTask+0x10>

00000ada <__ctors_end>:
     ada:	11 24       	eor	r1, r1
     adc:	1f be       	out	0x3f, r1	; 63
     ade:	cf ef       	ldi	r28, 0xFF	; 255
     ae0:	d1 e2       	ldi	r29, 0x21	; 33
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	cd bf       	out	0x3d, r28	; 61
     ae6:	00 e0       	ldi	r16, 0x00	; 0
     ae8:	0c bf       	out	0x3c, r16	; 60

00000aea <__do_copy_data>:
     aea:	16 e0       	ldi	r17, 0x06	; 6
     aec:	a0 e0       	ldi	r26, 0x00	; 0
     aee:	b2 e0       	ldi	r27, 0x02	; 2
     af0:	ea e5       	ldi	r30, 0x5A	; 90
     af2:	fb eb       	ldi	r31, 0xBB	; 187
     af4:	00 e0       	ldi	r16, 0x00	; 0
     af6:	0b bf       	out	0x3b, r16	; 59
     af8:	02 c0       	rjmp	.+4      	; 0xafe <__do_copy_data+0x14>
     afa:	07 90       	elpm	r0, Z+
     afc:	0d 92       	st	X+, r0
     afe:	a0 38       	cpi	r26, 0x80	; 128
     b00:	b1 07       	cpc	r27, r17
     b02:	d9 f7       	brne	.-10     	; 0xafa <__do_copy_data+0x10>

00000b04 <__do_clear_bss>:
     b04:	2a e0       	ldi	r18, 0x0A	; 10
     b06:	a0 e8       	ldi	r26, 0x80	; 128
     b08:	b6 e0       	ldi	r27, 0x06	; 6
     b0a:	01 c0       	rjmp	.+2      	; 0xb0e <.do_clear_bss_start>

00000b0c <.do_clear_bss_loop>:
     b0c:	1d 92       	st	X+, r1

00000b0e <.do_clear_bss_start>:
     b0e:	a7 3d       	cpi	r26, 0xD7	; 215
     b10:	b2 07       	cpc	r27, r18
     b12:	e1 f7       	brne	.-8      	; 0xb0c <.do_clear_bss_loop>
     b14:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <main>
     b18:	0c 94 ab 5d 	jmp	0xbb56	; 0xbb56 <_exit>

00000b1c <__bad_interrupt>:
     b1c:	71 ca       	rjmp	.-2846   	; 0x0 <__vectors>

00000b1e <difftime>:
     b1e:	62 1b       	sub	r22, r18
     b20:	73 0b       	sbc	r23, r19
     b22:	84 0b       	sbc	r24, r20
     b24:	95 0b       	sbc	r25, r21
     b26:	08 95       	ret

00000b28 <time>:
     b28:	fc 01       	movw	r30, r24
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	60 91 d3 0a 	lds	r22, 0x0AD3	; 0x800ad3 <__system_time>
     b32:	70 91 d4 0a 	lds	r23, 0x0AD4	; 0x800ad4 <__system_time+0x1>
     b36:	80 91 d5 0a 	lds	r24, 0x0AD5	; 0x800ad5 <__system_time+0x2>
     b3a:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <__system_time+0x3>
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	30 97       	sbiw	r30, 0x00	; 0
     b42:	21 f0       	breq	.+8      	; 0xb4c <time+0x24>
     b44:	60 83       	st	Z, r22
     b46:	71 83       	std	Z+1, r23	; 0x01
     b48:	82 83       	std	Z+2, r24	; 0x02
     b4a:	93 83       	std	Z+3, r25	; 0x03
     b4c:	08 95       	ret

00000b4e <system_tick>:
     b4e:	8f 93       	push	r24
     b50:	8f b7       	in	r24, 0x3f	; 63
     b52:	8f 93       	push	r24
     b54:	f8 94       	cli
     b56:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <__system_time>
     b5a:	8f 5f       	subi	r24, 0xFF	; 255
     b5c:	80 93 d3 0a 	sts	0x0AD3, r24	; 0x800ad3 <__system_time>
     b60:	80 91 d4 0a 	lds	r24, 0x0AD4	; 0x800ad4 <__system_time+0x1>
     b64:	8f 4f       	sbci	r24, 0xFF	; 255
     b66:	80 93 d4 0a 	sts	0x0AD4, r24	; 0x800ad4 <__system_time+0x1>
     b6a:	80 91 d5 0a 	lds	r24, 0x0AD5	; 0x800ad5 <__system_time+0x2>
     b6e:	8f 4f       	sbci	r24, 0xFF	; 255
     b70:	80 93 d5 0a 	sts	0x0AD5, r24	; 0x800ad5 <__system_time+0x2>
     b74:	80 91 d6 0a 	lds	r24, 0x0AD6	; 0x800ad6 <__system_time+0x3>
     b78:	8f 4f       	sbci	r24, 0xFF	; 255
     b7a:	80 93 d6 0a 	sts	0x0AD6, r24	; 0x800ad6 <__system_time+0x3>
     b7e:	8f 91       	pop	r24
     b80:	8f bf       	out	0x3f, r24	; 63
     b82:	8f 91       	pop	r24
     b84:	08 95       	ret

00000b86 <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
     b8c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
     b90:	ce 01       	movw	r24, r28
     b92:	0e 94 72 5a 	call	0xb4e4	; 0xb4e4 <malloc>
     b96:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     b98:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     b9c:	20 97       	sbiw	r28, 0x00	; 0
     b9e:	09 f4       	brne	.+2      	; 0xba2 <pvPortMalloc+0x1c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     ba0:	27 d2       	rcall	.+1102   	; 0xff0 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
     ba2:	ce 01       	movw	r24, r28
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
	if( pv )
     bae:	00 97       	sbiw	r24, 0x00	; 0
     bb0:	41 f0       	breq	.+16     	; 0xbc2 <vPortFree+0x18>
     bb2:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
     bb4:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
		{
			free( pv );
     bb8:	ce 01       	movw	r24, r28
     bba:	0e 94 0a 5b 	call	0xb614	; 0xb614 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
     bbe:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
	}
}
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <pxPortInitialiseStack>:
#elif defined( portUSE_TIMER2 )
        portTIMSK &= ~( _BV(OCIE2B)|_BV(OCIE2A)|_BV(TOIE2) );	// disable all Timer2 interrupts
        ASSR = 0x00;              								// set Timer/Counter2 to be off

#elif defined( portUSE_TIMER3 )
        portTIMSK &= ~( _BV(OCIE3B)|_BV(OCIE3A)|_BV(TOIE3) );	// disable all Timer3 interrupts
     bc8:	31 e1       	ldi	r19, 0x11	; 17
     bca:	fc 01       	movw	r30, r24
     bcc:	30 83       	st	Z, r19
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	22 e2       	ldi	r18, 0x22	; 34
     bd2:	20 83       	st	Z, r18
     bd4:	31 97       	sbiw	r30, 0x01	; 1
     bd6:	a3 e3       	ldi	r26, 0x33	; 51
     bd8:	a0 83       	st	Z, r26
     bda:	31 97       	sbiw	r30, 0x01	; 1
     bdc:	60 83       	st	Z, r22
     bde:	31 97       	sbiw	r30, 0x01	; 1
     be0:	70 83       	st	Z, r23
     be2:	31 97       	sbiw	r30, 0x01	; 1
     be4:	10 82       	st	Z, r1
     be6:	31 97       	sbiw	r30, 0x01	; 1
     be8:	10 82       	st	Z, r1
     bea:	31 97       	sbiw	r30, 0x01	; 1
     bec:	60 e8       	ldi	r22, 0x80	; 128
     bee:	60 83       	st	Z, r22
     bf0:	31 97       	sbiw	r30, 0x01	; 1
     bf2:	10 82       	st	Z, r1
     bf4:	31 97       	sbiw	r30, 0x01	; 1
     bf6:	10 82       	st	Z, r1
     bf8:	31 97       	sbiw	r30, 0x01	; 1
     bfa:	10 82       	st	Z, r1
     bfc:	31 97       	sbiw	r30, 0x01	; 1
     bfe:	62 e0       	ldi	r22, 0x02	; 2
     c00:	60 83       	st	Z, r22
     c02:	31 97       	sbiw	r30, 0x01	; 1
     c04:	63 e0       	ldi	r22, 0x03	; 3
     c06:	60 83       	st	Z, r22
     c08:	31 97       	sbiw	r30, 0x01	; 1
     c0a:	64 e0       	ldi	r22, 0x04	; 4
     c0c:	60 83       	st	Z, r22
     c0e:	31 97       	sbiw	r30, 0x01	; 1
     c10:	65 e0       	ldi	r22, 0x05	; 5
     c12:	60 83       	st	Z, r22
     c14:	31 97       	sbiw	r30, 0x01	; 1
     c16:	66 e0       	ldi	r22, 0x06	; 6
     c18:	60 83       	st	Z, r22
     c1a:	31 97       	sbiw	r30, 0x01	; 1
     c1c:	67 e0       	ldi	r22, 0x07	; 7
     c1e:	60 83       	st	Z, r22
     c20:	31 97       	sbiw	r30, 0x01	; 1
     c22:	68 e0       	ldi	r22, 0x08	; 8
     c24:	60 83       	st	Z, r22
     c26:	31 97       	sbiw	r30, 0x01	; 1
     c28:	69 e0       	ldi	r22, 0x09	; 9
     c2a:	60 83       	st	Z, r22
     c2c:	31 97       	sbiw	r30, 0x01	; 1
     c2e:	60 e1       	ldi	r22, 0x10	; 16
     c30:	60 83       	st	Z, r22
     c32:	31 97       	sbiw	r30, 0x01	; 1
     c34:	30 83       	st	Z, r19
     c36:	31 97       	sbiw	r30, 0x01	; 1
     c38:	32 e1       	ldi	r19, 0x12	; 18
     c3a:	30 83       	st	Z, r19
     c3c:	31 97       	sbiw	r30, 0x01	; 1
     c3e:	33 e1       	ldi	r19, 0x13	; 19
     c40:	30 83       	st	Z, r19
     c42:	31 97       	sbiw	r30, 0x01	; 1
     c44:	34 e1       	ldi	r19, 0x14	; 20
     c46:	30 83       	st	Z, r19
     c48:	31 97       	sbiw	r30, 0x01	; 1
     c4a:	35 e1       	ldi	r19, 0x15	; 21
     c4c:	30 83       	st	Z, r19
     c4e:	31 97       	sbiw	r30, 0x01	; 1
     c50:	36 e1       	ldi	r19, 0x16	; 22
     c52:	30 83       	st	Z, r19
     c54:	31 97       	sbiw	r30, 0x01	; 1
     c56:	37 e1       	ldi	r19, 0x17	; 23
     c58:	30 83       	st	Z, r19
     c5a:	31 97       	sbiw	r30, 0x01	; 1
     c5c:	38 e1       	ldi	r19, 0x18	; 24
     c5e:	30 83       	st	Z, r19
     c60:	31 97       	sbiw	r30, 0x01	; 1
     c62:	39 e1       	ldi	r19, 0x19	; 25
     c64:	30 83       	st	Z, r19
     c66:	31 97       	sbiw	r30, 0x01	; 1
     c68:	30 e2       	ldi	r19, 0x20	; 32
     c6a:	30 83       	st	Z, r19
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	31 e2       	ldi	r19, 0x21	; 33
     c70:	30 83       	st	Z, r19
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	20 83       	st	Z, r18
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	23 e2       	ldi	r18, 0x23	; 35
     c7a:	20 83       	st	Z, r18
     c7c:	31 97       	sbiw	r30, 0x01	; 1
     c7e:	40 83       	st	Z, r20
     c80:	31 97       	sbiw	r30, 0x01	; 1
     c82:	50 83       	st	Z, r21
     c84:	31 97       	sbiw	r30, 0x01	; 1
     c86:	26 e2       	ldi	r18, 0x26	; 38
     c88:	20 83       	st	Z, r18
     c8a:	31 97       	sbiw	r30, 0x01	; 1
     c8c:	27 e2       	ldi	r18, 0x27	; 39
     c8e:	20 83       	st	Z, r18
     c90:	31 97       	sbiw	r30, 0x01	; 1
     c92:	28 e2       	ldi	r18, 0x28	; 40
     c94:	20 83       	st	Z, r18
     c96:	31 97       	sbiw	r30, 0x01	; 1
     c98:	29 e2       	ldi	r18, 0x29	; 41
     c9a:	20 83       	st	Z, r18
     c9c:	31 97       	sbiw	r30, 0x01	; 1
     c9e:	20 e3       	ldi	r18, 0x30	; 48
     ca0:	20 83       	st	Z, r18
     ca2:	31 97       	sbiw	r30, 0x01	; 1
     ca4:	21 e3       	ldi	r18, 0x31	; 49
     ca6:	20 83       	st	Z, r18
     ca8:	89 97       	sbiw	r24, 0x29	; 41
     caa:	08 95       	ret

00000cac <xPortStartScheduler>:
     cac:	88 ee       	ldi	r24, 0xE8	; 232
     cae:	93 e0       	ldi	r25, 0x03	; 3
     cb0:	a0 e0       	ldi	r26, 0x00	; 0
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	80 93 67 07 	sts	0x0767, r24	; 0x800767 <portTickRateHz>
     cb8:	90 93 68 07 	sts	0x0768, r25	; 0x800768 <portTickRateHz+0x1>
     cbc:	a0 93 69 07 	sts	0x0769, r26	; 0x800769 <portTickRateHz+0x2>
     cc0:	b0 93 6a 07 	sts	0x076A, r27	; 0x80076a <portTickRateHz+0x3>
     cc4:	80 93 6b 07 	sts	0x076B, r24	; 0x80076b <ticksRemainingInSec>
     cc8:	90 93 6c 07 	sts	0x076C, r25	; 0x80076c <ticksRemainingInSec+0x1>
     ccc:	a0 93 6d 07 	sts	0x076D, r26	; 0x80076d <ticksRemainingInSec+0x2>
     cd0:	b0 93 6e 07 	sts	0x076E, r27	; 0x80076e <ticksRemainingInSec+0x3>
     cd4:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     cd8:	89 ef       	ldi	r24, 0xF9	; 249
     cda:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     cde:	8b e0       	ldi	r24, 0x0B	; 11
     ce0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
     ce4:	e1 e7       	ldi	r30, 0x71	; 113
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	82 60       	ori	r24, 0x02	; 2
     cec:	80 83       	st	Z, r24
     cee:	a0 91 fc 06 	lds	r26, 0x06FC	; 0x8006fc <pxCurrentTCB>
     cf2:	b0 91 fd 06 	lds	r27, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
     cf6:	cd 91       	ld	r28, X+
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	dd 91       	ld	r29, X+
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	ff 91       	pop	r31
     d00:	ef 91       	pop	r30
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	bf 91       	pop	r27
     d08:	af 91       	pop	r26
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	7f 91       	pop	r23
     d10:	6f 91       	pop	r22
     d12:	5f 91       	pop	r21
     d14:	4f 91       	pop	r20
     d16:	3f 91       	pop	r19
     d18:	2f 91       	pop	r18
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	ff 90       	pop	r15
     d20:	ef 90       	pop	r14
     d22:	df 90       	pop	r13
     d24:	cf 90       	pop	r12
     d26:	bf 90       	pop	r11
     d28:	af 90       	pop	r10
     d2a:	9f 90       	pop	r9
     d2c:	8f 90       	pop	r8
     d2e:	7f 90       	pop	r7
     d30:	6f 90       	pop	r6
     d32:	5f 90       	pop	r5
     d34:	4f 90       	pop	r4
     d36:	3f 90       	pop	r3
     d38:	2f 90       	pop	r2
     d3a:	1f 90       	pop	r1
     d3c:	0f 90       	pop	r0
     d3e:	0c be       	out	0x3c, r0	; 60
     d40:	0f 90       	pop	r0
     d42:	0b be       	out	0x3b, r0	; 59
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	0f 90       	pop	r0
     d4a:	08 95       	ret
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	08 95       	ret

00000d50 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	0f 92       	push	r0
     d58:	0b b6       	in	r0, 0x3b	; 59
     d5a:	0f 92       	push	r0
     d5c:	0c b6       	in	r0, 0x3c	; 60
     d5e:	0f 92       	push	r0
     d60:	1f 92       	push	r1
     d62:	11 24       	eor	r1, r1
     d64:	2f 92       	push	r2
     d66:	3f 92       	push	r3
     d68:	4f 92       	push	r4
     d6a:	5f 92       	push	r5
     d6c:	6f 92       	push	r6
     d6e:	7f 92       	push	r7
     d70:	8f 92       	push	r8
     d72:	9f 92       	push	r9
     d74:	af 92       	push	r10
     d76:	bf 92       	push	r11
     d78:	cf 92       	push	r12
     d7a:	df 92       	push	r13
     d7c:	ef 92       	push	r14
     d7e:	ff 92       	push	r15
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	2f 93       	push	r18
     d86:	3f 93       	push	r19
     d88:	4f 93       	push	r20
     d8a:	5f 93       	push	r21
     d8c:	6f 93       	push	r22
     d8e:	7f 93       	push	r23
     d90:	8f 93       	push	r24
     d92:	9f 93       	push	r25
     d94:	af 93       	push	r26
     d96:	bf 93       	push	r27
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31
     da0:	a0 91 fc 06 	lds	r26, 0x06FC	; 0x8006fc <pxCurrentTCB>
     da4:	b0 91 fd 06 	lds	r27, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
     da8:	0d b6       	in	r0, 0x3d	; 61
     daa:	0d 92       	st	X+, r0
     dac:	0e b6       	in	r0, 0x3e	; 62
     dae:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     db0:	0e 94 09 18 	call	0x3012	; 0x3012 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     db4:	a0 91 fc 06 	lds	r26, 0x06FC	; 0x8006fc <pxCurrentTCB>
     db8:	b0 91 fd 06 	lds	r27, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
     dbc:	cd 91       	ld	r28, X+
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	dd 91       	ld	r29, X+
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	bf 91       	pop	r27
     dce:	af 91       	pop	r26
     dd0:	9f 91       	pop	r25
     dd2:	8f 91       	pop	r24
     dd4:	7f 91       	pop	r23
     dd6:	6f 91       	pop	r22
     dd8:	5f 91       	pop	r21
     dda:	4f 91       	pop	r20
     ddc:	3f 91       	pop	r19
     dde:	2f 91       	pop	r18
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	ff 90       	pop	r15
     de6:	ef 90       	pop	r14
     de8:	df 90       	pop	r13
     dea:	cf 90       	pop	r12
     dec:	bf 90       	pop	r11
     dee:	af 90       	pop	r10
     df0:	9f 90       	pop	r9
     df2:	8f 90       	pop	r8
     df4:	7f 90       	pop	r7
     df6:	6f 90       	pop	r6
     df8:	5f 90       	pop	r5
     dfa:	4f 90       	pop	r4
     dfc:	3f 90       	pop	r3
     dfe:	2f 90       	pop	r2
     e00:	1f 90       	pop	r1
     e02:	0f 90       	pop	r0
     e04:	0c be       	out	0x3c, r0	; 60
     e06:	0f 90       	pop	r0
     e08:	0b be       	out	0x3b, r0	; 59
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
     e10:	08 95       	ret

00000e12 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     e12:	0f 92       	push	r0
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	0f 92       	push	r0
     e1a:	0b b6       	in	r0, 0x3b	; 59
     e1c:	0f 92       	push	r0
     e1e:	0c b6       	in	r0, 0x3c	; 60
     e20:	0f 92       	push	r0
     e22:	1f 92       	push	r1
     e24:	11 24       	eor	r1, r1
     e26:	2f 92       	push	r2
     e28:	3f 92       	push	r3
     e2a:	4f 92       	push	r4
     e2c:	5f 92       	push	r5
     e2e:	6f 92       	push	r6
     e30:	7f 92       	push	r7
     e32:	8f 92       	push	r8
     e34:	9f 92       	push	r9
     e36:	af 92       	push	r10
     e38:	bf 92       	push	r11
     e3a:	cf 92       	push	r12
     e3c:	df 92       	push	r13
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	2f 93       	push	r18
     e48:	3f 93       	push	r19
     e4a:	4f 93       	push	r20
     e4c:	5f 93       	push	r21
     e4e:	6f 93       	push	r22
     e50:	7f 93       	push	r23
     e52:	8f 93       	push	r24
     e54:	9f 93       	push	r25
     e56:	af 93       	push	r26
     e58:	bf 93       	push	r27
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
     e62:	a0 91 fc 06 	lds	r26, 0x06FC	; 0x8006fc <pxCurrentTCB>
     e66:	b0 91 fd 06 	lds	r27, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
     e6a:	0d b6       	in	r0, 0x3d	; 61
     e6c:	0d 92       	st	X+, r0
     e6e:	0e b6       	in	r0, 0x3e	; 62
     e70:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
     e72:	13 be       	out	0x33, r1	; 51
	// start mark - check for start of interrupt - for debugging only
	PORTD |=  _BV(PORTD7);				// Ping IO line.
#endif

#if !defined(portUSE_TIMER2_RTC)
	if (--ticksRemainingInSec == 0)
     e74:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <ticksRemainingInSec>
     e78:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <ticksRemainingInSec+0x1>
     e7c:	a0 91 6d 07 	lds	r26, 0x076D	; 0x80076d <ticksRemainingInSec+0x2>
     e80:	b0 91 6e 07 	lds	r27, 0x076E	; 0x80076e <ticksRemainingInSec+0x3>
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	a1 09       	sbc	r26, r1
     e88:	b1 09       	sbc	r27, r1
     e8a:	80 93 6b 07 	sts	0x076B, r24	; 0x80076b <ticksRemainingInSec>
     e8e:	90 93 6c 07 	sts	0x076C, r25	; 0x80076c <ticksRemainingInSec+0x1>
     e92:	a0 93 6d 07 	sts	0x076D, r26	; 0x80076d <ticksRemainingInSec+0x2>
     e96:	b0 93 6e 07 	sts	0x076E, r27	; 0x80076e <ticksRemainingInSec+0x3>
     e9a:	89 2b       	or	r24, r25
     e9c:	8a 2b       	or	r24, r26
     e9e:	8b 2b       	or	r24, r27
     ea0:	89 f4       	brne	.+34     	; 0xec4 <vPortYieldFromTick+0xb2>
	{
		system_tick();
     ea2:	55 de       	rcall	.-854    	; 0xb4e <system_tick>
		ticksRemainingInSec = portTickRateHz;
     ea4:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <portTickRateHz>
     ea8:	90 91 68 07 	lds	r25, 0x0768	; 0x800768 <portTickRateHz+0x1>
     eac:	a0 91 69 07 	lds	r26, 0x0769	; 0x800769 <portTickRateHz+0x2>
     eb0:	b0 91 6a 07 	lds	r27, 0x076A	; 0x80076a <portTickRateHz+0x3>
     eb4:	80 93 6b 07 	sts	0x076B, r24	; 0x80076b <ticksRemainingInSec>
     eb8:	90 93 6c 07 	sts	0x076C, r25	; 0x80076c <ticksRemainingInSec+0x1>
     ebc:	a0 93 6d 07 	sts	0x076D, r26	; 0x80076d <ticksRemainingInSec+0x2>
     ec0:	b0 93 6e 07 	sts	0x076E, r27	; 0x80076e <ticksRemainingInSec+0x3>
	}
#endif

	if( xTaskIncrementTick() != pdFALSE )
     ec4:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <xTaskIncrementTick>
     ec8:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     eca:	0e 94 09 18 	call	0x3012	; 0x3012 <vTaskSwitchContext>
#if defined(DEBUG_PING)
	// end mark - check for end of interrupt - for debugging only
	PORTD &= ~_BV(PORTD7);
#endif

	portRESTORE_CONTEXT();
     ece:	a0 91 fc 06 	lds	r26, 0x06FC	; 0x8006fc <pxCurrentTCB>
     ed2:	b0 91 fd 06 	lds	r27, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
     ed6:	cd 91       	ld	r28, X+
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	dd 91       	ld	r29, X+
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	ff 91       	pop	r31
     ee0:	ef 91       	pop	r30
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	bf 91       	pop	r27
     ee8:	af 91       	pop	r26
     eea:	9f 91       	pop	r25
     eec:	8f 91       	pop	r24
     eee:	7f 91       	pop	r23
     ef0:	6f 91       	pop	r22
     ef2:	5f 91       	pop	r21
     ef4:	4f 91       	pop	r20
     ef6:	3f 91       	pop	r19
     ef8:	2f 91       	pop	r18
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
     f02:	df 90       	pop	r13
     f04:	cf 90       	pop	r12
     f06:	bf 90       	pop	r11
     f08:	af 90       	pop	r10
     f0a:	9f 90       	pop	r9
     f0c:	8f 90       	pop	r8
     f0e:	7f 90       	pop	r7
     f10:	6f 90       	pop	r6
     f12:	5f 90       	pop	r5
     f14:	4f 90       	pop	r4
     f16:	3f 90       	pop	r3
     f18:	2f 90       	pop	r2
     f1a:	1f 90       	pop	r1
     f1c:	0f 90       	pop	r0
     f1e:	0c be       	out	0x3c, r0	; 60
     f20:	0f 90       	pop	r0
     f22:	0b be       	out	0x3b, r0	; 59
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
     f2a:	08 95       	ret

00000f2c <__vector_32>:
	 * count is incremented after the context is saved.
	 */
	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
     f2c:	72 df       	rcall	.-284    	; 0xe12 <vPortYieldFromTick>
		__asm__ __volatile__ ( "reti" );
     f2e:	18 95       	reti

00000f30 <setAnalogMode>:
// For example: if (getMode() == MODE_8_BIT) ...

inline uint8_t getAnalogMode(void)
{
	return (ADMUX >> ADLAR) & 1;
}
     f30:	81 11       	cpse	r24, r1
     f32:	06 c0       	rjmp	.+12     	; 0xf40 <setAnalogMode+0x10>
     f34:	ec e7       	ldi	r30, 0x7C	; 124
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	8f 7d       	andi	r24, 0xDF	; 223
     f3c:	80 83       	st	Z, r24
     f3e:	08 95       	ret
     f40:	ec e7       	ldi	r30, 0x7C	; 124
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	80 62       	ori	r24, 0x20	; 32
     f48:	80 83       	st	Z, r24
     f4a:	08 95       	ret

00000f4c <analogIsConverting>:

// returns 1 if the ADC is in the middle of an conversion, otherwise
// returns 0
inline uint8_t analogIsConverting(void)
{
	return (ADCSRA >> ADSC) & 1;
     f4c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
}
     f50:	86 fb       	bst	r24, 6
     f52:	88 27       	eor	r24, r24
     f54:	80 f9       	bld	r24, 0
     f56:	08 95       	ret

00000f58 <startAnalogConversion>:
//  Orangutan SVP.

inline void startAnalogConversion(uint8_t channel, uint8_t use_internal_reference)
{
	// Channel numbers greater than 15 on 328p or 1284p or 31 on 2560 are invalid.
	if (channel > 0x1F)
     f58:	80 32       	cpi	r24, 0x20	; 32
     f5a:	18 f5       	brcc	.+70     	; 0xfa2 <startAnalogConversion+0x4a>
	{
		return;
	}

	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
     f5c:	97 e8       	ldi	r25, 0x87	; 135
     f5e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	// to channel 0, which can affect the ADC charge capacitor.  For example, if you have a
	// high output impedance voltage on channel 1 and a low output impedance voltage on channel
	// 0, the voltage on channel 0 be briefly applied to the ADC capacitor before every conversion,
	// which could prevent the capacitor from settling to the voltage on channel 1, even over
	// many reads.
	uint8_t tempADMUX = ADMUX;
     f62:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	tempADMUX |= _BV(REFS0);		// Use external capacitor on ARef
	if(use_internal_reference)		// Note: internal reference should NOT be used on devices
     f66:	66 23       	and	r22, r22
     f68:	11 f0       	breq	.+4      	; 0xf6e <startAnalogConversion+0x16>
	{								//  where AREF is connected to an external voltage!
		// use the internal voltage reference
		tempADMUX |= _BV(REFS1);	// Internal reference: 1.1 V on ATmega48/168/328; 2.56 V on ATmega324/644/1284
     f6a:	90 6c       	ori	r25, 0xC0	; 192
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <startAnalogConversion+0x1a>
     f6e:	9f 77       	andi	r25, 0x7F	; 127
	}
	else
	{
		// use AVcc as a reference
		tempADMUX &= ~_BV(REFS1);	// External reference: on AVcc
     f70:	90 64       	ori	r25, 0x40	; 64
	}

	tempADMUX &= ~0x1F;		 // clear channel selection bits of ADMUX
     f72:	90 7e       	andi	r25, 0xE0	; 224
	#ifdef MUX5
	if (channel > 7) {
     f74:	88 30       	cpi	r24, 0x08	; 8
     f76:	40 f0       	brcs	.+16     	; 0xf88 <startAnalogConversion+0x30>
		ADCSRB |= _BV(MUX5);
     f78:	eb e7       	ldi	r30, 0x7B	; 123
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	20 81       	ld	r18, Z
     f7e:	28 60       	ori	r18, 0x08	; 8
     f80:	20 83       	st	Z, r18
		tempADMUX |= channel - 8; 
     f82:	88 50       	subi	r24, 0x08	; 8
     f84:	89 2b       	or	r24, r25
     f86:	06 c0       	rjmp	.+12     	; 0xf94 <startAnalogConversion+0x3c>
		} else {
		ADCSRB &= ~(_BV(MUX5));
     f88:	eb e7       	ldi	r30, 0x7B	; 123
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	20 81       	ld	r18, Z
     f8e:	27 7f       	andi	r18, 0xF7	; 247
     f90:	20 83       	st	Z, r18
		tempADMUX |= channel;
     f92:	89 2b       	or	r24, r25
	}
	#endif
	
	   // we only get this far if channel is less than 32
	ADMUX = tempADMUX;
     f94:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA |= _BV(ADSC); // start the conversion
     f98:	ea e7       	ldi	r30, 0x7A	; 122
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	80 64       	ori	r24, 0x40	; 64
     fa0:	80 83       	st	Z, r24
     fa2:	08 95       	ret

00000fa4 <analogConversionResult>:
// MODE_8_BIT and MODE_10_BIT:
// For example: if (getMode() == MODE_8_BIT) ...

inline uint8_t getAnalogMode(void)
{
	return (ADMUX >> ADLAR) & 1;
     fa4:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
}

// returns the result of the previous ADC conversion.
inline uint16_t analogConversionResult(void)
{
	if (getAnalogMode())				// if left-adjusted (i.e. 8-bit mode)
     fa8:	85 ff       	sbrs	r24, 5
     faa:	04 c0       	rjmp	.+8      	; 0xfb4 <analogConversionResult+0x10>
	{
		return (uint16_t) ADCH;			// 8-bit result
     fac:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	08 95       	ret
	}
	else
	{
		return ADC;				// 10-bit result
     fb4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     fb8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	}
}
     fbc:	08 95       	ret

00000fbe <vApplicationIdleHook>:
	// The corresponding PIN Register bit will always read as zero when this bit is set. When an
	// analogue signal is applied to the ADC7..0 pin and the digital input from this pin is not needed, this
	// bit should be written logic one to reduce power consumption in the digital input buffer.

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
	DIDR0 = 0xFF;
     fbe:	8f ef       	ldi	r24, 0xFF	; 255
     fc0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xFF;
     fc4:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	// When the ACD bit is written logic one, the power to the Analogue Comparator is switched off.
	// This bit can be set at any time to turn off the Analogue Comparator.
	// This will reduce power consumption in Active and Idle mode.
	// When changing the ACD bit, the Analogue Comparator Interrupt must be disabled by clearing the ACIE bit in ACSR.
	// Otherwise an interrupt can occur when the ACD bit is changed.
	ACSR &= ~_BV(ACIE);
     fc8:	80 b7       	in	r24, 0x30	; 48
     fca:	87 7f       	andi	r24, 0xF7	; 247
     fcc:	80 bf       	out	0x30, r24	; 48
	ACSR |=  _BV(ACD);
     fce:	80 b7       	in	r24, 0x30	; 48
     fd0:	80 68       	ori	r24, 0x80	; 128
     fd2:	80 bf       	out	0x30, r24	; 48
	// SLEEP_MODE_PWR_DOWN     _BV(SM1)
	// SLEEP_MODE_PWR_SAVE     (_BV(SM0) | _BV(SM1))
	// SLEEP_MODE_STANDBY      (_BV(SM1) | _BV(SM2))
	// SLEEP_MODE_EXT_STANDBY  (_BV(SM0) | _BV(SM1) | _BV(SM2))

	set_sleep_mode( SLEEP_MODE_IDLE );
     fd4:	83 b7       	in	r24, 0x33	; 51
     fd6:	81 7f       	andi	r24, 0xF1	; 241
     fd8:	83 bf       	out	0x33, r24	; 51

	portENTER_CRITICAL();
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	0f 92       	push	r0
	sleep_enable();
     fe0:	83 b7       	in	r24, 0x33	; 51
     fe2:	81 60       	ori	r24, 0x01	; 1
     fe4:	83 bf       	out	0x33, r24	; 51

#if defined(BODS) && defined(BODSE) // only if there is support to disable the BOD.
	sleep_bod_disable();
#endif

	portEXIT_CRITICAL();
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
	sleep_cpu();		// good night.
     fea:	88 95       	sleep

	sleep_reset();		// reset the sleep_mode() faster than sleep_disable();
     fec:	13 be       	out	0x33, r1	; 51
     fee:	08 95       	ret

00000ff0 <vApplicationMallocFailedHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
     ff0:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     ff2:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ff4:	00 00       	nop
	for(;;)
	{
		_delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
     ff6:	1f 9a       	sbi	0x03, 7	; 3
     ff8:	fd cf       	rjmp	.-6      	; 0xff4 <vApplicationMallocFailedHook+0x4>

00000ffa <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
     ffa:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     ffc:	2f 9a       	sbi	0x05, 7	; 5
     ffe:	00 c0       	rjmp	.+0      	; 0x1000 <vApplicationStackOverflowHook+0x6>
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    1000:	1f 9a       	sbi	0x03, 7	; 3
    1002:	fd cf       	rjmp	.-6      	; 0xffe <vApplicationStackOverflowHook+0x4>

00001004 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1004:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1006:	03 96       	adiw	r24, 0x03	; 3
    1008:	92 83       	std	Z+2, r25	; 0x02
    100a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    100c:	4f ef       	ldi	r20, 0xFF	; 255
    100e:	5f ef       	ldi	r21, 0xFF	; 255
    1010:	ba 01       	movw	r22, r20
    1012:	43 83       	std	Z+3, r20	; 0x03
    1014:	54 83       	std	Z+4, r21	; 0x04
    1016:	65 83       	std	Z+5, r22	; 0x05
    1018:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    101a:	90 87       	std	Z+8, r25	; 0x08
    101c:	87 83       	std	Z+7, r24	; 0x07
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    101e:	92 87       	std	Z+10, r25	; 0x0a
    1020:	81 87       	std	Z+9, r24	; 0x09

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1022:	10 82       	st	Z, r1
    1024:	08 95       	ret

00001026 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1026:	fc 01       	movw	r30, r24
    1028:	13 86       	std	Z+11, r1	; 0x0b
    102a:	12 86       	std	Z+10, r1	; 0x0a
    102c:	08 95       	ret

0000102e <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	9c 01       	movw	r18, r24
    1034:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1036:	dc 01       	movw	r26, r24
    1038:	11 96       	adiw	r26, 0x01	; 1
    103a:	cd 91       	ld	r28, X+
    103c:	dc 91       	ld	r29, X
    103e:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1040:	d5 83       	std	Z+5, r29	; 0x05
    1042:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1044:	8e 81       	ldd	r24, Y+6	; 0x06
    1046:	9f 81       	ldd	r25, Y+7	; 0x07
    1048:	97 83       	std	Z+7, r25	; 0x07
    104a:	86 83       	std	Z+6, r24	; 0x06

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    104c:	8e 81       	ldd	r24, Y+6	; 0x06
    104e:	9f 81       	ldd	r25, Y+7	; 0x07
    1050:	dc 01       	movw	r26, r24
    1052:	15 96       	adiw	r26, 0x05	; 5
    1054:	7c 93       	st	X, r23
    1056:	6e 93       	st	-X, r22
    1058:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxPrevious = pxNewListItem;
    105a:	7f 83       	std	Y+7, r23	; 0x07
    105c:	6e 83       	std	Y+6, r22	; 0x06

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    105e:	33 87       	std	Z+11, r19	; 0x0b
    1060:	22 87       	std	Z+10, r18	; 0x0a

	( pxList->uxNumberOfItems )++;
    1062:	f9 01       	movw	r30, r18
    1064:	80 81       	ld	r24, Z
    1066:	8f 5f       	subi	r24, 0xFF	; 255
    1068:	80 83       	st	Z, r24
}
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	08 95       	ret

00001070 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    107a:	08 81       	ld	r16, Y
    107c:	19 81       	ldd	r17, Y+1	; 0x01
    107e:	2a 81       	ldd	r18, Y+2	; 0x02
    1080:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1082:	0f 3f       	cpi	r16, 0xFF	; 255
    1084:	4f ef       	ldi	r20, 0xFF	; 255
    1086:	14 07       	cpc	r17, r20
    1088:	24 07       	cpc	r18, r20
    108a:	34 07       	cpc	r19, r20
    108c:	21 f4       	brne	.+8      	; 0x1096 <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    108e:	fc 01       	movw	r30, r24
    1090:	a1 85       	ldd	r26, Z+9	; 0x09
    1092:	b2 85       	ldd	r27, Z+10	; 0x0a
    1094:	11 c0       	rjmp	.+34     	; 0x10b8 <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1096:	dc 01       	movw	r26, r24
    1098:	13 96       	adiw	r26, 0x03	; 3
    109a:	01 c0       	rjmp	.+2      	; 0x109e <vListInsert+0x2e>
    109c:	df 01       	movw	r26, r30
    109e:	14 96       	adiw	r26, 0x04	; 4
    10a0:	ed 91       	ld	r30, X+
    10a2:	fc 91       	ld	r31, X
    10a4:	15 97       	sbiw	r26, 0x05	; 5
    10a6:	40 81       	ld	r20, Z
    10a8:	51 81       	ldd	r21, Z+1	; 0x01
    10aa:	62 81       	ldd	r22, Z+2	; 0x02
    10ac:	73 81       	ldd	r23, Z+3	; 0x03
    10ae:	04 17       	cp	r16, r20
    10b0:	15 07       	cpc	r17, r21
    10b2:	26 07       	cpc	r18, r22
    10b4:	37 07       	cpc	r19, r23
    10b6:	90 f7       	brcc	.-28     	; 0x109c <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    10b8:	14 96       	adiw	r26, 0x04	; 4
    10ba:	ed 91       	ld	r30, X+
    10bc:	fc 91       	ld	r31, X
    10be:	15 97       	sbiw	r26, 0x05	; 5
    10c0:	fd 83       	std	Y+5, r31	; 0x05
    10c2:	ec 83       	std	Y+4, r30	; 0x04
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    10c4:	d7 83       	std	Z+7, r29	; 0x07
    10c6:	c6 83       	std	Z+6, r28	; 0x06
	pxNewListItem->pxPrevious = pxIterator;
    10c8:	bf 83       	std	Y+7, r27	; 0x07
    10ca:	ae 83       	std	Y+6, r26	; 0x06
	pxIterator->pxNext = pxNewListItem;
    10cc:	15 96       	adiw	r26, 0x05	; 5
    10ce:	dc 93       	st	X, r29
    10d0:	ce 93       	st	-X, r28
    10d2:	14 97       	sbiw	r26, 0x04	; 4

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    10d4:	9b 87       	std	Y+11, r25	; 0x0b
    10d6:	8a 87       	std	Y+10, r24	; 0x0a

	( pxList->uxNumberOfItems )++;
    10d8:	fc 01       	movw	r30, r24
    10da:	20 81       	ld	r18, Z
    10dc:	2f 5f       	subi	r18, 0xFF	; 255
    10de:	20 83       	st	Z, r18
}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	08 95       	ret

000010ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    10f0:	a2 85       	ldd	r26, Z+10	; 0x0a
    10f2:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    10f4:	c4 81       	ldd	r28, Z+4	; 0x04
    10f6:	d5 81       	ldd	r29, Z+5	; 0x05
    10f8:	86 81       	ldd	r24, Z+6	; 0x06
    10fa:	97 81       	ldd	r25, Z+7	; 0x07
    10fc:	9f 83       	std	Y+7, r25	; 0x07
    10fe:	8e 83       	std	Y+6, r24	; 0x06
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1100:	c6 81       	ldd	r28, Z+6	; 0x06
    1102:	d7 81       	ldd	r29, Z+7	; 0x07
    1104:	84 81       	ldd	r24, Z+4	; 0x04
    1106:	95 81       	ldd	r25, Z+5	; 0x05
    1108:	9d 83       	std	Y+5, r25	; 0x05
    110a:	8c 83       	std	Y+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    110c:	11 96       	adiw	r26, 0x01	; 1
    110e:	8d 91       	ld	r24, X+
    1110:	9c 91       	ld	r25, X
    1112:	12 97       	sbiw	r26, 0x02	; 2
    1114:	e8 17       	cp	r30, r24
    1116:	f9 07       	cpc	r31, r25
    1118:	31 f4       	brne	.+12     	; 0x1126 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    111a:	86 81       	ldd	r24, Z+6	; 0x06
    111c:	97 81       	ldd	r25, Z+7	; 0x07
    111e:	12 96       	adiw	r26, 0x02	; 2
    1120:	9c 93       	st	X, r25
    1122:	8e 93       	st	-X, r24
    1124:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1126:	13 86       	std	Z+11, r1	; 0x0b
    1128:	12 86       	std	Z+10, r1	; 0x0a
	( pxList->uxNumberOfItems )--;
    112a:	8c 91       	ld	r24, X
    112c:	81 50       	subi	r24, 0x01	; 1
    112e:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
    1130:	8c 91       	ld	r24, X
}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	0f 92       	push	r0
    113e:	fc 01       	movw	r30, r24
    1140:	96 8d       	ldd	r25, Z+30	; 0x1e
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	91 11       	cpse	r25, r1
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	08 95       	ret

0000114e <prvCopyDataToQueue>:
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	ec 01       	movw	r28, r24
    1158:	04 2f       	mov	r16, r20
    115a:	1e 8d       	ldd	r17, Y+30	; 0x1e
    115c:	48 a1       	ldd	r20, Y+32	; 0x20
    115e:	41 11       	cpse	r20, r1
    1160:	0c c0       	rjmp	.+24     	; 0x117a <prvCopyDataToQueue+0x2c>
    1162:	88 81       	ld	r24, Y
    1164:	99 81       	ldd	r25, Y+1	; 0x01
    1166:	89 2b       	or	r24, r25
    1168:	09 f0       	breq	.+2      	; 0x116c <prvCopyDataToQueue+0x1e>
    116a:	42 c0       	rjmp	.+132    	; 0x11f0 <prvCopyDataToQueue+0xa2>
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	9b 81       	ldd	r25, Y+3	; 0x03
    1170:	0e 94 2a 1a 	call	0x3454	; 0x3454 <xTaskPriorityDisinherit>
    1174:	1b 82       	std	Y+3, r1	; 0x03
    1176:	1a 82       	std	Y+2, r1	; 0x02
    1178:	42 c0       	rjmp	.+132    	; 0x11fe <prvCopyDataToQueue+0xb0>
    117a:	01 11       	cpse	r16, r1
    117c:	17 c0       	rjmp	.+46     	; 0x11ac <prvCopyDataToQueue+0x5e>
    117e:	50 e0       	ldi	r21, 0x00	; 0
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	9d 81       	ldd	r25, Y+5	; 0x05
    1184:	0e 94 76 5c 	call	0xb8ec	; 0xb8ec <memcpy>
    1188:	28 a1       	ldd	r18, Y+32	; 0x20
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	9d 81       	ldd	r25, Y+5	; 0x05
    118e:	82 0f       	add	r24, r18
    1190:	91 1d       	adc	r25, r1
    1192:	9d 83       	std	Y+5, r25	; 0x05
    1194:	8c 83       	std	Y+4, r24	; 0x04
    1196:	2a 81       	ldd	r18, Y+2	; 0x02
    1198:	3b 81       	ldd	r19, Y+3	; 0x03
    119a:	82 17       	cp	r24, r18
    119c:	93 07       	cpc	r25, r19
    119e:	50 f1       	brcs	.+84     	; 0x11f4 <prvCopyDataToQueue+0xa6>
    11a0:	88 81       	ld	r24, Y
    11a2:	99 81       	ldd	r25, Y+1	; 0x01
    11a4:	9d 83       	std	Y+5, r25	; 0x05
    11a6:	8c 83       	std	Y+4, r24	; 0x04
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	29 c0       	rjmp	.+82     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11ac:	50 e0       	ldi	r21, 0x00	; 0
    11ae:	8e 81       	ldd	r24, Y+6	; 0x06
    11b0:	9f 81       	ldd	r25, Y+7	; 0x07
    11b2:	0e 94 76 5c 	call	0xb8ec	; 0xb8ec <memcpy>
    11b6:	88 a1       	ldd	r24, Y+32	; 0x20
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	91 95       	neg	r25
    11bc:	81 95       	neg	r24
    11be:	91 09       	sbc	r25, r1
    11c0:	2e 81       	ldd	r18, Y+6	; 0x06
    11c2:	3f 81       	ldd	r19, Y+7	; 0x07
    11c4:	28 0f       	add	r18, r24
    11c6:	39 1f       	adc	r19, r25
    11c8:	3f 83       	std	Y+7, r19	; 0x07
    11ca:	2e 83       	std	Y+6, r18	; 0x06
    11cc:	48 81       	ld	r20, Y
    11ce:	59 81       	ldd	r21, Y+1	; 0x01
    11d0:	24 17       	cp	r18, r20
    11d2:	35 07       	cpc	r19, r21
    11d4:	30 f4       	brcc	.+12     	; 0x11e2 <prvCopyDataToQueue+0x94>
    11d6:	2a 81       	ldd	r18, Y+2	; 0x02
    11d8:	3b 81       	ldd	r19, Y+3	; 0x03
    11da:	82 0f       	add	r24, r18
    11dc:	93 1f       	adc	r25, r19
    11de:	9f 83       	std	Y+7, r25	; 0x07
    11e0:	8e 83       	std	Y+6, r24	; 0x06
    11e2:	02 30       	cpi	r16, 0x02	; 2
    11e4:	49 f4       	brne	.+18     	; 0x11f8 <prvCopyDataToQueue+0xaa>
    11e6:	11 23       	and	r17, r17
    11e8:	49 f0       	breq	.+18     	; 0x11fc <prvCopyDataToQueue+0xae>
    11ea:	11 50       	subi	r17, 0x01	; 1
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	07 c0       	rjmp	.+14     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	05 c0       	rjmp	.+10     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <prvCopyDataToQueue+0xb0>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	1f 5f       	subi	r17, 0xFF	; 255
    1200:	1e 8f       	std	Y+30, r17	; 0x1e
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	08 95       	ret

0000120c <prvCopyDataFromQueue>:
    120c:	fc 01       	movw	r30, r24
    120e:	40 a1       	ldd	r20, Z+32	; 0x20
    1210:	44 23       	and	r20, r20
    1212:	a9 f0       	breq	.+42     	; 0x123e <prvCopyDataFromQueue+0x32>
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	26 81       	ldd	r18, Z+6	; 0x06
    1218:	37 81       	ldd	r19, Z+7	; 0x07
    121a:	24 0f       	add	r18, r20
    121c:	35 1f       	adc	r19, r21
    121e:	37 83       	std	Z+7, r19	; 0x07
    1220:	26 83       	std	Z+6, r18	; 0x06
    1222:	82 81       	ldd	r24, Z+2	; 0x02
    1224:	93 81       	ldd	r25, Z+3	; 0x03
    1226:	28 17       	cp	r18, r24
    1228:	39 07       	cpc	r19, r25
    122a:	20 f0       	brcs	.+8      	; 0x1234 <prvCopyDataFromQueue+0x28>
    122c:	80 81       	ld	r24, Z
    122e:	91 81       	ldd	r25, Z+1	; 0x01
    1230:	97 83       	std	Z+7, r25	; 0x07
    1232:	86 83       	std	Z+6, r24	; 0x06
    1234:	cb 01       	movw	r24, r22
    1236:	66 81       	ldd	r22, Z+6	; 0x06
    1238:	77 81       	ldd	r23, Z+7	; 0x07
    123a:	0c 94 76 5c 	jmp	0xb8ec	; 0xb8ec <memcpy>
    123e:	08 95       	ret

00001240 <prvUnlockQueue>:
    1240:	ef 92       	push	r14
    1242:	ff 92       	push	r15
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	8c 01       	movw	r16, r24
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	0f 92       	push	r0
    1252:	fc 01       	movw	r30, r24
    1254:	c2 a1       	ldd	r28, Z+34	; 0x22
    1256:	1c 16       	cp	r1, r28
    1258:	ac f4       	brge	.+42     	; 0x1284 <prvUnlockQueue+0x44>
    125a:	83 89       	ldd	r24, Z+19	; 0x13
    125c:	81 11       	cpse	r24, r1
    125e:	06 c0       	rjmp	.+12     	; 0x126c <prvUnlockQueue+0x2c>
    1260:	11 c0       	rjmp	.+34     	; 0x1284 <prvUnlockQueue+0x44>
    1262:	f8 01       	movw	r30, r16
    1264:	83 89       	ldd	r24, Z+19	; 0x13
    1266:	81 11       	cpse	r24, r1
    1268:	05 c0       	rjmp	.+10     	; 0x1274 <prvUnlockQueue+0x34>
    126a:	0c c0       	rjmp	.+24     	; 0x1284 <prvUnlockQueue+0x44>
    126c:	78 01       	movw	r14, r16
    126e:	f3 e1       	ldi	r31, 0x13	; 19
    1270:	ef 0e       	add	r14, r31
    1272:	f1 1c       	adc	r15, r1
    1274:	c7 01       	movw	r24, r14
    1276:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    127a:	81 11       	cpse	r24, r1
    127c:	0e 94 aa 19 	call	0x3354	; 0x3354 <vTaskMissedYield>
    1280:	c1 50       	subi	r28, 0x01	; 1
    1282:	79 f7       	brne	.-34     	; 0x1262 <prvUnlockQueue+0x22>
    1284:	8f ef       	ldi	r24, 0xFF	; 255
    1286:	f8 01       	movw	r30, r16
    1288:	82 a3       	std	Z+34, r24	; 0x22
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	0f 92       	push	r0
    1294:	c1 a1       	ldd	r28, Z+33	; 0x21
    1296:	1c 16       	cp	r1, r28
    1298:	ac f4       	brge	.+42     	; 0x12c4 <prvUnlockQueue+0x84>
    129a:	80 85       	ldd	r24, Z+8	; 0x08
    129c:	81 11       	cpse	r24, r1
    129e:	06 c0       	rjmp	.+12     	; 0x12ac <prvUnlockQueue+0x6c>
    12a0:	11 c0       	rjmp	.+34     	; 0x12c4 <prvUnlockQueue+0x84>
    12a2:	f8 01       	movw	r30, r16
    12a4:	80 85       	ldd	r24, Z+8	; 0x08
    12a6:	81 11       	cpse	r24, r1
    12a8:	05 c0       	rjmp	.+10     	; 0x12b4 <prvUnlockQueue+0x74>
    12aa:	0c c0       	rjmp	.+24     	; 0x12c4 <prvUnlockQueue+0x84>
    12ac:	78 01       	movw	r14, r16
    12ae:	f8 e0       	ldi	r31, 0x08	; 8
    12b0:	ef 0e       	add	r14, r31
    12b2:	f1 1c       	adc	r15, r1
    12b4:	c7 01       	movw	r24, r14
    12b6:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    12ba:	81 11       	cpse	r24, r1
    12bc:	0e 94 aa 19 	call	0x3354	; 0x3354 <vTaskMissedYield>
    12c0:	c1 50       	subi	r28, 0x01	; 1
    12c2:	79 f7       	brne	.-34     	; 0x12a2 <prvUnlockQueue+0x62>
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	f8 01       	movw	r30, r16
    12c8:	81 a3       	std	Z+33, r24	; 0x21
    12ca:	0f 90       	pop	r0
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	ff 90       	pop	r15
    12d6:	ef 90       	pop	r14
    12d8:	08 95       	ret

000012da <xQueueGenericReset>:
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	ec 01       	movw	r28, r24
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	0f 92       	push	r0
    12e6:	48 81       	ld	r20, Y
    12e8:	59 81       	ldd	r21, Y+1	; 0x01
    12ea:	28 a1       	ldd	r18, Y+32	; 0x20
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	7f 8d       	ldd	r23, Y+31	; 0x1f
    12f0:	72 9f       	mul	r23, r18
    12f2:	c0 01       	movw	r24, r0
    12f4:	73 9f       	mul	r23, r19
    12f6:	90 0d       	add	r25, r0
    12f8:	11 24       	eor	r1, r1
    12fa:	fa 01       	movw	r30, r20
    12fc:	e8 0f       	add	r30, r24
    12fe:	f9 1f       	adc	r31, r25
    1300:	fb 83       	std	Y+3, r31	; 0x03
    1302:	ea 83       	std	Y+2, r30	; 0x02
    1304:	1e 8e       	std	Y+30, r1	; 0x1e
    1306:	5d 83       	std	Y+5, r21	; 0x05
    1308:	4c 83       	std	Y+4, r20	; 0x04
    130a:	82 1b       	sub	r24, r18
    130c:	93 0b       	sbc	r25, r19
    130e:	84 0f       	add	r24, r20
    1310:	95 1f       	adc	r25, r21
    1312:	9f 83       	std	Y+7, r25	; 0x07
    1314:	8e 83       	std	Y+6, r24	; 0x06
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	89 a3       	std	Y+33, r24	; 0x21
    131a:	8a a3       	std	Y+34, r24	; 0x22
    131c:	61 11       	cpse	r22, r1
    131e:	0b c0       	rjmp	.+22     	; 0x1336 <xQueueGenericReset+0x5c>
    1320:	88 85       	ldd	r24, Y+8	; 0x08
    1322:	88 23       	and	r24, r24
    1324:	71 f0       	breq	.+28     	; 0x1342 <xQueueGenericReset+0x68>
    1326:	ce 01       	movw	r24, r28
    1328:	08 96       	adiw	r24, 0x08	; 8
    132a:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    132e:	88 23       	and	r24, r24
    1330:	41 f0       	breq	.+16     	; 0x1342 <xQueueGenericReset+0x68>
    1332:	0e dd       	rcall	.-1508   	; 0xd50 <vPortYield>
    1334:	06 c0       	rjmp	.+12     	; 0x1342 <xQueueGenericReset+0x68>
    1336:	ce 01       	movw	r24, r28
    1338:	08 96       	adiw	r24, 0x08	; 8
    133a:	64 de       	rcall	.-824    	; 0x1004 <vListInitialise>
    133c:	ce 01       	movw	r24, r28
    133e:	43 96       	adiw	r24, 0x13	; 19
    1340:	61 de       	rcall	.-830    	; 0x1004 <vListInitialise>
    1342:	0f 90       	pop	r0
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	08 95       	ret

0000134e <xQueueGenericCreate>:
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	08 2f       	mov	r16, r24
    1358:	16 2f       	mov	r17, r22
    135a:	66 23       	and	r22, r22
    135c:	b1 f0       	breq	.+44     	; 0x138a <xQueueGenericCreate+0x3c>
    135e:	86 9f       	mul	r24, r22
    1360:	c0 01       	movw	r24, r0
    1362:	11 24       	eor	r1, r1
    1364:	83 96       	adiw	r24, 0x23	; 35
    1366:	0f dc       	rcall	.-2018   	; 0xb86 <pvPortMalloc>
    1368:	ec 01       	movw	r28, r24
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	39 f4       	brne	.+14     	; 0x137c <xQueueGenericCreate+0x2e>
    136e:	13 c0       	rjmp	.+38     	; 0x1396 <xQueueGenericCreate+0x48>
    1370:	0f 8f       	std	Y+31, r16	; 0x1f
    1372:	18 a3       	std	Y+32, r17	; 0x20
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	ce 01       	movw	r24, r28
    1378:	b0 df       	rcall	.-160    	; 0x12da <xQueueGenericReset>
    137a:	0d c0       	rjmp	.+26     	; 0x1396 <xQueueGenericCreate+0x48>
    137c:	83 96       	adiw	r24, 0x23	; 35
    137e:	99 83       	std	Y+1, r25	; 0x01
    1380:	88 83       	st	Y, r24
    1382:	f6 cf       	rjmp	.-20     	; 0x1370 <xQueueGenericCreate+0x22>
    1384:	d9 83       	std	Y+1, r29	; 0x01
    1386:	c8 83       	st	Y, r28
    1388:	f3 cf       	rjmp	.-26     	; 0x1370 <xQueueGenericCreate+0x22>
    138a:	83 e2       	ldi	r24, 0x23	; 35
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	fb db       	rcall	.-2058   	; 0xb86 <pvPortMalloc>
    1390:	ec 01       	movw	r28, r24
    1392:	89 2b       	or	r24, r25
    1394:	b9 f7       	brne	.-18     	; 0x1384 <xQueueGenericCreate+0x36>
    1396:	ce 01       	movw	r24, r28
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	08 95       	ret

000013a2 <xQueueGenericSend>:
    13a2:	9f 92       	push	r9
    13a4:	af 92       	push	r10
    13a6:	bf 92       	push	r11
    13a8:	cf 92       	push	r12
    13aa:	df 92       	push	r13
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	29 97       	sbiw	r28, 0x09	; 9
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	7c 01       	movw	r14, r24
    13ca:	5b 01       	movw	r10, r22
    13cc:	2e 83       	std	Y+6, r18	; 0x06
    13ce:	3f 83       	std	Y+7, r19	; 0x07
    13d0:	48 87       	std	Y+8, r20	; 0x08
    13d2:	59 87       	std	Y+9, r21	; 0x09
    13d4:	10 e0       	ldi	r17, 0x00	; 0
    13d6:	99 24       	eor	r9, r9
    13d8:	93 94       	inc	r9
    13da:	6c 01       	movw	r12, r24
    13dc:	88 e0       	ldi	r24, 0x08	; 8
    13de:	c8 0e       	add	r12, r24
    13e0:	d1 1c       	adc	r13, r1
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	0f 92       	push	r0
    13e8:	f7 01       	movw	r30, r14
    13ea:	96 8d       	ldd	r25, Z+30	; 0x1e
    13ec:	87 8d       	ldd	r24, Z+31	; 0x1f
    13ee:	98 17       	cp	r25, r24
    13f0:	10 f0       	brcs	.+4      	; 0x13f6 <xQueueGenericSend+0x54>
    13f2:	02 30       	cpi	r16, 0x02	; 2
    13f4:	b1 f4       	brne	.+44     	; 0x1422 <xQueueGenericSend+0x80>
    13f6:	40 2f       	mov	r20, r16
    13f8:	b5 01       	movw	r22, r10
    13fa:	c7 01       	movw	r24, r14
    13fc:	a8 de       	rcall	.-688    	; 0x114e <prvCopyDataToQueue>
    13fe:	f7 01       	movw	r30, r14
    1400:	93 89       	ldd	r25, Z+19	; 0x13
    1402:	99 23       	and	r25, r25
    1404:	41 f0       	breq	.+16     	; 0x1416 <xQueueGenericSend+0x74>
    1406:	c7 01       	movw	r24, r14
    1408:	43 96       	adiw	r24, 0x13	; 19
    140a:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    140e:	88 23       	and	r24, r24
    1410:	21 f0       	breq	.+8      	; 0x141a <xQueueGenericSend+0x78>
    1412:	9e dc       	rcall	.-1732   	; 0xd50 <vPortYield>
    1414:	02 c0       	rjmp	.+4      	; 0x141a <xQueueGenericSend+0x78>
    1416:	81 11       	cpse	r24, r1
    1418:	9b dc       	rcall	.-1738   	; 0xd50 <vPortYield>
    141a:	0f 90       	pop	r0
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	52 c0       	rjmp	.+164    	; 0x14c6 <xQueueGenericSend+0x124>
    1422:	8e 81       	ldd	r24, Y+6	; 0x06
    1424:	9f 81       	ldd	r25, Y+7	; 0x07
    1426:	a8 85       	ldd	r26, Y+8	; 0x08
    1428:	b9 85       	ldd	r27, Y+9	; 0x09
    142a:	89 2b       	or	r24, r25
    142c:	8a 2b       	or	r24, r26
    142e:	8b 2b       	or	r24, r27
    1430:	21 f4       	brne	.+8      	; 0x143a <xQueueGenericSend+0x98>
    1432:	0f 90       	pop	r0
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	46 c0       	rjmp	.+140    	; 0x14c6 <xQueueGenericSend+0x124>
    143a:	11 11       	cpse	r17, r1
    143c:	05 c0       	rjmp	.+10     	; 0x1448 <xQueueGenericSend+0xa6>
    143e:	ce 01       	movw	r24, r28
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    1446:	19 2d       	mov	r17, r9
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	0f 92       	push	r0
    1456:	f7 01       	movw	r30, r14
    1458:	81 a1       	ldd	r24, Z+33	; 0x21
    145a:	8f 3f       	cpi	r24, 0xFF	; 255
    145c:	09 f4       	brne	.+2      	; 0x1460 <xQueueGenericSend+0xbe>
    145e:	11 a2       	std	Z+33, r1	; 0x21
    1460:	f7 01       	movw	r30, r14
    1462:	82 a1       	ldd	r24, Z+34	; 0x22
    1464:	8f 3f       	cpi	r24, 0xFF	; 255
    1466:	09 f4       	brne	.+2      	; 0x146a <xQueueGenericSend+0xc8>
    1468:	12 a2       	std	Z+34, r1	; 0x22
    146a:	0f 90       	pop	r0
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	be 01       	movw	r22, r28
    1470:	6a 5f       	subi	r22, 0xFA	; 250
    1472:	7f 4f       	sbci	r23, 0xFF	; 255
    1474:	ce 01       	movw	r24, r28
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    147c:	81 11       	cpse	r24, r1
    147e:	1e c0       	rjmp	.+60     	; 0x14bc <xQueueGenericSend+0x11a>
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	0f 92       	push	r0
    1486:	f7 01       	movw	r30, r14
    1488:	96 8d       	ldd	r25, Z+30	; 0x1e
    148a:	87 8d       	ldd	r24, Z+31	; 0x1f
    148c:	0f 90       	pop	r0
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	98 13       	cpse	r25, r24
    1492:	0f c0       	rjmp	.+30     	; 0x14b2 <xQueueGenericSend+0x110>
    1494:	4e 81       	ldd	r20, Y+6	; 0x06
    1496:	5f 81       	ldd	r21, Y+7	; 0x07
    1498:	68 85       	ldd	r22, Y+8	; 0x08
    149a:	79 85       	ldd	r23, Y+9	; 0x09
    149c:	c6 01       	movw	r24, r12
    149e:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    14a2:	c7 01       	movw	r24, r14
    14a4:	cd de       	rcall	.-614    	; 0x1240 <prvUnlockQueue>
    14a6:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14aa:	81 11       	cpse	r24, r1
    14ac:	9a cf       	rjmp	.-204    	; 0x13e2 <xQueueGenericSend+0x40>
    14ae:	50 dc       	rcall	.-1888   	; 0xd50 <vPortYield>
    14b0:	98 cf       	rjmp	.-208    	; 0x13e2 <xQueueGenericSend+0x40>
    14b2:	c7 01       	movw	r24, r14
    14b4:	c5 de       	rcall	.-630    	; 0x1240 <prvUnlockQueue>
    14b6:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14ba:	93 cf       	rjmp	.-218    	; 0x13e2 <xQueueGenericSend+0x40>
    14bc:	c7 01       	movw	r24, r14
    14be:	c0 de       	rcall	.-640    	; 0x1240 <prvUnlockQueue>
    14c0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	29 96       	adiw	r28, 0x09	; 9
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	ff 90       	pop	r15
    14dc:	ef 90       	pop	r14
    14de:	df 90       	pop	r13
    14e0:	cf 90       	pop	r12
    14e2:	bf 90       	pop	r11
    14e4:	af 90       	pop	r10
    14e6:	9f 90       	pop	r9
    14e8:	08 95       	ret

000014ea <xQueueCreateMutex>:
    14ea:	0f 93       	push	r16
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	48 2f       	mov	r20, r24
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	2b df       	rcall	.-426    	; 0x134e <xQueueGenericCreate>
    14f8:	ec 01       	movw	r28, r24
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	61 f0       	breq	.+24     	; 0x1516 <xQueueCreateMutex+0x2c>
    14fe:	1b 82       	std	Y+3, r1	; 0x03
    1500:	1a 82       	std	Y+2, r1	; 0x02
    1502:	19 82       	std	Y+1, r1	; 0x01
    1504:	18 82       	st	Y, r1
    1506:	1e 82       	std	Y+6, r1	; 0x06
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	a9 01       	movw	r20, r18
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	46 df       	rcall	.-372    	; 0x13a2 <xQueueGenericSend>
    1516:	ce 01       	movw	r24, r28
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	0f 91       	pop	r16
    151e:	08 95       	ret

00001520 <xQueueGenericSendFromISR>:
    1520:	ef 92       	push	r14
    1522:	ff 92       	push	r15
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	8a 01       	movw	r16, r20
    152e:	fc 01       	movw	r30, r24
    1530:	56 8d       	ldd	r21, Z+30	; 0x1e
    1532:	37 8d       	ldd	r19, Z+31	; 0x1f
    1534:	53 17       	cp	r21, r19
    1536:	10 f0       	brcs	.+4      	; 0x153c <xQueueGenericSendFromISR+0x1c>
    1538:	22 30       	cpi	r18, 0x02	; 2
    153a:	e9 f4       	brne	.+58     	; 0x1576 <xQueueGenericSendFromISR+0x56>
    153c:	42 2f       	mov	r20, r18
    153e:	78 01       	movw	r14, r16
    1540:	ec 01       	movw	r28, r24
    1542:	1a a1       	ldd	r17, Y+34	; 0x22
    1544:	04 de       	rcall	.-1016   	; 0x114e <prvCopyDataToQueue>
    1546:	1f 3f       	cpi	r17, 0xFF	; 255
    1548:	81 f4       	brne	.+32     	; 0x156a <xQueueGenericSendFromISR+0x4a>
    154a:	8b 89       	ldd	r24, Y+19	; 0x13
    154c:	88 23       	and	r24, r24
    154e:	a9 f0       	breq	.+42     	; 0x157a <xQueueGenericSendFromISR+0x5a>
    1550:	ce 01       	movw	r24, r28
    1552:	43 96       	adiw	r24, 0x13	; 19
    1554:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    1558:	88 23       	and	r24, r24
    155a:	89 f0       	breq	.+34     	; 0x157e <xQueueGenericSendFromISR+0x5e>
    155c:	e1 14       	cp	r14, r1
    155e:	f1 04       	cpc	r15, r1
    1560:	81 f0       	breq	.+32     	; 0x1582 <xQueueGenericSendFromISR+0x62>
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	f7 01       	movw	r30, r14
    1566:	80 83       	st	Z, r24
    1568:	0d c0       	rjmp	.+26     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    156a:	ff 24       	eor	r15, r15
    156c:	f3 94       	inc	r15
    156e:	f1 0e       	add	r15, r17
    1570:	fa a2       	std	Y+34, r15	; 0x22
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	07 c0       	rjmp	.+14     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	05 c0       	rjmp	.+10     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <xQueueGenericSendFromISR+0x64>
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	01 c0       	rjmp	.+2      	; 0x1584 <xQueueGenericSendFromISR+0x64>
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	ff 90       	pop	r15
    158e:	ef 90       	pop	r14
    1590:	08 95       	ret

00001592 <xQueueGiveFromISR>:
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	fc 01       	movw	r30, r24
    1598:	86 8d       	ldd	r24, Z+30	; 0x1e
    159a:	97 8d       	ldd	r25, Z+31	; 0x1f
    159c:	89 17       	cp	r24, r25
    159e:	c0 f4       	brcc	.+48     	; 0x15d0 <xQueueGiveFromISR+0x3e>
    15a0:	92 a1       	ldd	r25, Z+34	; 0x22
    15a2:	8f 5f       	subi	r24, 0xFF	; 255
    15a4:	86 8f       	std	Z+30, r24	; 0x1e
    15a6:	9f 3f       	cpi	r25, 0xFF	; 255
    15a8:	79 f4       	brne	.+30     	; 0x15c8 <xQueueGiveFromISR+0x36>
    15aa:	83 89       	ldd	r24, Z+19	; 0x13
    15ac:	88 23       	and	r24, r24
    15ae:	91 f0       	breq	.+36     	; 0x15d4 <xQueueGiveFromISR+0x42>
    15b0:	eb 01       	movw	r28, r22
    15b2:	cf 01       	movw	r24, r30
    15b4:	43 96       	adiw	r24, 0x13	; 19
    15b6:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    15ba:	88 23       	and	r24, r24
    15bc:	69 f0       	breq	.+26     	; 0x15d8 <xQueueGiveFromISR+0x46>
    15be:	20 97       	sbiw	r28, 0x00	; 0
    15c0:	69 f0       	breq	.+26     	; 0x15dc <xQueueGiveFromISR+0x4a>
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	88 83       	st	Y, r24
    15c6:	0b c0       	rjmp	.+22     	; 0x15de <xQueueGiveFromISR+0x4c>
    15c8:	9f 5f       	subi	r25, 0xFF	; 255
    15ca:	92 a3       	std	Z+34, r25	; 0x22
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	07 c0       	rjmp	.+14     	; 0x15de <xQueueGiveFromISR+0x4c>
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	05 c0       	rjmp	.+10     	; 0x15de <xQueueGiveFromISR+0x4c>
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	03 c0       	rjmp	.+6      	; 0x15de <xQueueGiveFromISR+0x4c>
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	01 c0       	rjmp	.+2      	; 0x15de <xQueueGiveFromISR+0x4c>
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	08 95       	ret

000015e4 <xQueueReceive>:
    15e4:	9f 92       	push	r9
    15e6:	af 92       	push	r10
    15e8:	bf 92       	push	r11
    15ea:	cf 92       	push	r12
    15ec:	df 92       	push	r13
    15ee:	ef 92       	push	r14
    15f0:	ff 92       	push	r15
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	29 97       	sbiw	r28, 0x09	; 9
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	8c 01       	movw	r16, r24
    160c:	5b 01       	movw	r10, r22
    160e:	2e 83       	std	Y+6, r18	; 0x06
    1610:	3f 83       	std	Y+7, r19	; 0x07
    1612:	48 87       	std	Y+8, r20	; 0x08
    1614:	59 87       	std	Y+9, r21	; 0x09
    1616:	e1 2c       	mov	r14, r1
    1618:	99 24       	eor	r9, r9
    161a:	93 94       	inc	r9
    161c:	6c 01       	movw	r12, r24
    161e:	83 e1       	ldi	r24, 0x13	; 19
    1620:	c8 0e       	add	r12, r24
    1622:	d1 1c       	adc	r13, r1
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	0f 92       	push	r0
    162a:	f8 01       	movw	r30, r16
    162c:	f6 8c       	ldd	r15, Z+30	; 0x1e
    162e:	ff 20       	and	r15, r15
    1630:	99 f0       	breq	.+38     	; 0x1658 <xQueueReceive+0x74>
    1632:	b5 01       	movw	r22, r10
    1634:	c8 01       	movw	r24, r16
    1636:	ea dd       	rcall	.-1068   	; 0x120c <prvCopyDataFromQueue>
    1638:	fa 94       	dec	r15
    163a:	f8 01       	movw	r30, r16
    163c:	f6 8e       	std	Z+30, r15	; 0x1e
    163e:	80 85       	ldd	r24, Z+8	; 0x08
    1640:	88 23       	and	r24, r24
    1642:	31 f0       	breq	.+12     	; 0x1650 <xQueueReceive+0x6c>
    1644:	c8 01       	movw	r24, r16
    1646:	08 96       	adiw	r24, 0x08	; 8
    1648:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    164c:	81 11       	cpse	r24, r1
    164e:	80 db       	rcall	.-2304   	; 0xd50 <vPortYield>
    1650:	0f 90       	pop	r0
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	51 c0       	rjmp	.+162    	; 0x16fa <xQueueReceive+0x116>
    1658:	8e 81       	ldd	r24, Y+6	; 0x06
    165a:	9f 81       	ldd	r25, Y+7	; 0x07
    165c:	a8 85       	ldd	r26, Y+8	; 0x08
    165e:	b9 85       	ldd	r27, Y+9	; 0x09
    1660:	89 2b       	or	r24, r25
    1662:	8a 2b       	or	r24, r26
    1664:	8b 2b       	or	r24, r27
    1666:	21 f4       	brne	.+8      	; 0x1670 <xQueueReceive+0x8c>
    1668:	0f 90       	pop	r0
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	45 c0       	rjmp	.+138    	; 0x16fa <xQueueReceive+0x116>
    1670:	e1 10       	cpse	r14, r1
    1672:	05 c0       	rjmp	.+10     	; 0x167e <xQueueReceive+0x9a>
    1674:	ce 01       	movw	r24, r28
    1676:	01 96       	adiw	r24, 0x01	; 1
    1678:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    167c:	e9 2c       	mov	r14, r9
    167e:	0f 90       	pop	r0
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	0f 92       	push	r0
    168c:	f8 01       	movw	r30, r16
    168e:	81 a1       	ldd	r24, Z+33	; 0x21
    1690:	8f 3f       	cpi	r24, 0xFF	; 255
    1692:	09 f4       	brne	.+2      	; 0x1696 <xQueueReceive+0xb2>
    1694:	11 a2       	std	Z+33, r1	; 0x21
    1696:	f8 01       	movw	r30, r16
    1698:	82 a1       	ldd	r24, Z+34	; 0x22
    169a:	8f 3f       	cpi	r24, 0xFF	; 255
    169c:	09 f4       	brne	.+2      	; 0x16a0 <xQueueReceive+0xbc>
    169e:	12 a2       	std	Z+34, r1	; 0x22
    16a0:	0f 90       	pop	r0
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	be 01       	movw	r22, r28
    16a6:	6a 5f       	subi	r22, 0xFA	; 250
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	ce 01       	movw	r24, r28
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    16b2:	81 11       	cpse	r24, r1
    16b4:	18 c0       	rjmp	.+48     	; 0x16e6 <xQueueReceive+0x102>
    16b6:	c8 01       	movw	r24, r16
    16b8:	3f dd       	rcall	.-1410   	; 0x1138 <prvIsQueueEmpty>
    16ba:	88 23       	and	r24, r24
    16bc:	79 f0       	breq	.+30     	; 0x16dc <xQueueReceive+0xf8>
    16be:	4e 81       	ldd	r20, Y+6	; 0x06
    16c0:	5f 81       	ldd	r21, Y+7	; 0x07
    16c2:	68 85       	ldd	r22, Y+8	; 0x08
    16c4:	79 85       	ldd	r23, Y+9	; 0x09
    16c6:	c6 01       	movw	r24, r12
    16c8:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    16cc:	c8 01       	movw	r24, r16
    16ce:	b8 dd       	rcall	.-1168   	; 0x1240 <prvUnlockQueue>
    16d0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16d4:	81 11       	cpse	r24, r1
    16d6:	a6 cf       	rjmp	.-180    	; 0x1624 <xQueueReceive+0x40>
    16d8:	3b db       	rcall	.-2442   	; 0xd50 <vPortYield>
    16da:	a4 cf       	rjmp	.-184    	; 0x1624 <xQueueReceive+0x40>
    16dc:	c8 01       	movw	r24, r16
    16de:	b0 dd       	rcall	.-1184   	; 0x1240 <prvUnlockQueue>
    16e0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16e4:	9f cf       	rjmp	.-194    	; 0x1624 <xQueueReceive+0x40>
    16e6:	c8 01       	movw	r24, r16
    16e8:	ab dd       	rcall	.-1194   	; 0x1240 <prvUnlockQueue>
    16ea:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16ee:	c8 01       	movw	r24, r16
    16f0:	23 dd       	rcall	.-1466   	; 0x1138 <prvIsQueueEmpty>
    16f2:	88 23       	and	r24, r24
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <xQueueReceive+0x114>
    16f6:	96 cf       	rjmp	.-212    	; 0x1624 <xQueueReceive+0x40>
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	29 96       	adiw	r28, 0x09	; 9
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	bf 90       	pop	r11
    1718:	af 90       	pop	r10
    171a:	9f 90       	pop	r9
    171c:	08 95       	ret

0000171e <xQueueSemaphoreTake>:
    171e:	bf 92       	push	r11
    1720:	cf 92       	push	r12
    1722:	df 92       	push	r13
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	29 97       	sbiw	r28, 0x09	; 9
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	8c 01       	movw	r16, r24
    1742:	4e 83       	std	Y+6, r20	; 0x06
    1744:	5f 83       	std	Y+7, r21	; 0x07
    1746:	68 87       	std	Y+8, r22	; 0x08
    1748:	79 87       	std	Y+9, r23	; 0x09
    174a:	b1 2c       	mov	r11, r1
    174c:	d1 2c       	mov	r13, r1
    174e:	cc 24       	eor	r12, r12
    1750:	c3 94       	inc	r12
    1752:	7c 01       	movw	r14, r24
    1754:	83 e1       	ldi	r24, 0x13	; 19
    1756:	e8 0e       	add	r14, r24
    1758:	f1 1c       	adc	r15, r1
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	0f 92       	push	r0
    1760:	d8 01       	movw	r26, r16
    1762:	5e 96       	adiw	r26, 0x1e	; 30
    1764:	8c 91       	ld	r24, X
    1766:	5e 97       	sbiw	r26, 0x1e	; 30
    1768:	88 23       	and	r24, r24
    176a:	e1 f0       	breq	.+56     	; 0x17a4 <xQueueSemaphoreTake+0x86>
    176c:	81 50       	subi	r24, 0x01	; 1
    176e:	5e 96       	adiw	r26, 0x1e	; 30
    1770:	8c 93       	st	X, r24
    1772:	5e 97       	sbiw	r26, 0x1e	; 30
    1774:	8d 91       	ld	r24, X+
    1776:	9c 91       	ld	r25, X
    1778:	89 2b       	or	r24, r25
    177a:	29 f4       	brne	.+10     	; 0x1786 <xQueueSemaphoreTake+0x68>
    177c:	0e 94 b6 1a 	call	0x356c	; 0x356c <pvTaskIncrementMutexHeldCount>
    1780:	f8 01       	movw	r30, r16
    1782:	93 83       	std	Z+3, r25	; 0x03
    1784:	82 83       	std	Z+2, r24	; 0x02
    1786:	d8 01       	movw	r26, r16
    1788:	18 96       	adiw	r26, 0x08	; 8
    178a:	8c 91       	ld	r24, X
    178c:	88 23       	and	r24, r24
    178e:	31 f0       	breq	.+12     	; 0x179c <xQueueSemaphoreTake+0x7e>
    1790:	c8 01       	movw	r24, r16
    1792:	08 96       	adiw	r24, 0x08	; 8
    1794:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    1798:	81 11       	cpse	r24, r1
    179a:	da da       	rcall	.-2636   	; 0xd50 <vPortYield>
    179c:	0f 90       	pop	r0
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	7f c0       	rjmp	.+254    	; 0x18a2 <xQueueSemaphoreTake+0x184>
    17a4:	8e 81       	ldd	r24, Y+6	; 0x06
    17a6:	9f 81       	ldd	r25, Y+7	; 0x07
    17a8:	a8 85       	ldd	r26, Y+8	; 0x08
    17aa:	b9 85       	ldd	r27, Y+9	; 0x09
    17ac:	89 2b       	or	r24, r25
    17ae:	8a 2b       	or	r24, r26
    17b0:	8b 2b       	or	r24, r27
    17b2:	21 f4       	brne	.+8      	; 0x17bc <xQueueSemaphoreTake+0x9e>
    17b4:	0f 90       	pop	r0
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	73 c0       	rjmp	.+230    	; 0x18a2 <xQueueSemaphoreTake+0x184>
    17bc:	d1 10       	cpse	r13, r1
    17be:	05 c0       	rjmp	.+10     	; 0x17ca <xQueueSemaphoreTake+0xac>
    17c0:	ce 01       	movw	r24, r28
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    17c8:	dc 2c       	mov	r13, r12
    17ca:	0f 90       	pop	r0
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	0f 92       	push	r0
    17d8:	f8 01       	movw	r30, r16
    17da:	81 a1       	ldd	r24, Z+33	; 0x21
    17dc:	8f 3f       	cpi	r24, 0xFF	; 255
    17de:	09 f4       	brne	.+2      	; 0x17e2 <xQueueSemaphoreTake+0xc4>
    17e0:	11 a2       	std	Z+33, r1	; 0x21
    17e2:	d8 01       	movw	r26, r16
    17e4:	92 96       	adiw	r26, 0x22	; 34
    17e6:	8c 91       	ld	r24, X
    17e8:	92 97       	sbiw	r26, 0x22	; 34
    17ea:	8f 3f       	cpi	r24, 0xFF	; 255
    17ec:	11 f4       	brne	.+4      	; 0x17f2 <xQueueSemaphoreTake+0xd4>
    17ee:	92 96       	adiw	r26, 0x22	; 34
    17f0:	1c 92       	st	X, r1
    17f2:	0f 90       	pop	r0
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	be 01       	movw	r22, r28
    17f8:	6a 5f       	subi	r22, 0xFA	; 250
    17fa:	7f 4f       	sbci	r23, 0xFF	; 255
    17fc:	ce 01       	movw	r24, r28
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    1804:	81 11       	cpse	r24, r1
    1806:	27 c0       	rjmp	.+78     	; 0x1856 <xQueueSemaphoreTake+0x138>
    1808:	c8 01       	movw	r24, r16
    180a:	96 dc       	rcall	.-1748   	; 0x1138 <prvIsQueueEmpty>
    180c:	88 23       	and	r24, r24
    180e:	f1 f0       	breq	.+60     	; 0x184c <xQueueSemaphoreTake+0x12e>
    1810:	f8 01       	movw	r30, r16
    1812:	80 81       	ld	r24, Z
    1814:	91 81       	ldd	r25, Z+1	; 0x01
    1816:	89 2b       	or	r24, r25
    1818:	51 f4       	brne	.+20     	; 0x182e <xQueueSemaphoreTake+0x110>
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	0f 92       	push	r0
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	93 81       	ldd	r25, Z+3	; 0x03
    1824:	0e 94 bc 19 	call	0x3378	; 0x3378 <xTaskPriorityInherit>
    1828:	b8 2e       	mov	r11, r24
    182a:	0f 90       	pop	r0
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	4e 81       	ldd	r20, Y+6	; 0x06
    1830:	5f 81       	ldd	r21, Y+7	; 0x07
    1832:	68 85       	ldd	r22, Y+8	; 0x08
    1834:	79 85       	ldd	r23, Y+9	; 0x09
    1836:	c7 01       	movw	r24, r14
    1838:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    183c:	c8 01       	movw	r24, r16
    183e:	00 dd       	rcall	.-1536   	; 0x1240 <prvUnlockQueue>
    1840:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    1844:	81 11       	cpse	r24, r1
    1846:	89 cf       	rjmp	.-238    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1848:	83 da       	rcall	.-2810   	; 0xd50 <vPortYield>
    184a:	87 cf       	rjmp	.-242    	; 0x175a <xQueueSemaphoreTake+0x3c>
    184c:	c8 01       	movw	r24, r16
    184e:	f8 dc       	rcall	.-1552   	; 0x1240 <prvUnlockQueue>
    1850:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    1854:	82 cf       	rjmp	.-252    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1856:	c8 01       	movw	r24, r16
    1858:	f3 dc       	rcall	.-1562   	; 0x1240 <prvUnlockQueue>
    185a:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    185e:	c8 01       	movw	r24, r16
    1860:	6b dc       	rcall	.-1834   	; 0x1138 <prvIsQueueEmpty>
    1862:	88 23       	and	r24, r24
    1864:	09 f4       	brne	.+2      	; 0x1868 <xQueueSemaphoreTake+0x14a>
    1866:	79 cf       	rjmp	.-270    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1868:	bb 20       	and	r11, r11
    186a:	d1 f0       	breq	.+52     	; 0x18a0 <xQueueSemaphoreTake+0x182>
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	0f 92       	push	r0
    1872:	f8 01       	movw	r30, r16
    1874:	83 89       	ldd	r24, Z+19	; 0x13
    1876:	88 23       	and	r24, r24
    1878:	39 f0       	breq	.+14     	; 0x1888 <xQueueSemaphoreTake+0x16a>
    187a:	02 8c       	ldd	r0, Z+26	; 0x1a
    187c:	f3 8d       	ldd	r31, Z+27	; 0x1b
    187e:	e0 2d       	mov	r30, r0
    1880:	80 81       	ld	r24, Z
    1882:	64 e0       	ldi	r22, 0x04	; 4
    1884:	68 1b       	sub	r22, r24
    1886:	01 c0       	rjmp	.+2      	; 0x188a <xQueueSemaphoreTake+0x16c>
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	d8 01       	movw	r26, r16
    188c:	12 96       	adiw	r26, 0x02	; 2
    188e:	8d 91       	ld	r24, X+
    1890:	9c 91       	ld	r25, X
    1892:	13 97       	sbiw	r26, 0x03	; 3
    1894:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <vTaskPriorityDisinheritAfterTimeout>
    1898:	0f 90       	pop	r0
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <xQueueSemaphoreTake+0x184>
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	29 96       	adiw	r28, 0x09	; 9
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	ff 90       	pop	r15
    18b8:	ef 90       	pop	r14
    18ba:	df 90       	pop	r13
    18bc:	cf 90       	pop	r12
    18be:	bf 90       	pop	r11
    18c0:	08 95       	ret

000018c2 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	0f 92       	push	r0
    18ce:	89 a1       	ldd	r24, Y+33	; 0x21
    18d0:	8f 3f       	cpi	r24, 0xFF	; 255
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <vQueueWaitForMessageRestricted+0x14>
    18d4:	19 a2       	std	Y+33, r1	; 0x21
    18d6:	8a a1       	ldd	r24, Y+34	; 0x22
    18d8:	8f 3f       	cpi	r24, 0xFF	; 255
    18da:	09 f4       	brne	.+2      	; 0x18de <vQueueWaitForMessageRestricted+0x1c>
    18dc:	1a a2       	std	Y+34, r1	; 0x22
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    18e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18e4:	81 11       	cpse	r24, r1
    18e6:	04 c0       	rjmp	.+8      	; 0x18f0 <vQueueWaitForMessageRestricted+0x2e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    18e8:	ce 01       	movw	r24, r28
    18ea:	43 96       	adiw	r24, 0x13	; 19
    18ec:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    18f0:	ce 01       	movw	r24, r28
    18f2:	a6 dc       	rcall	.-1716   	; 0x1240 <prvUnlockQueue>
	}
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	08 95       	ret

000018fa <xSerialxPrint>:

		default:
			break;
	}
	return 0;
}
    18fa:	4f 92       	push	r4
    18fc:	5f 92       	push	r5
    18fe:	6f 92       	push	r6
    1900:	7f 92       	push	r7
    1902:	8f 92       	push	r8
    1904:	9f 92       	push	r9
    1906:	af 92       	push	r10
    1908:	bf 92       	push	r11
    190a:	cf 92       	push	r12
    190c:	df 92       	push	r13
    190e:	ef 92       	push	r14
    1910:	ff 92       	push	r15
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	ec 01       	movw	r28, r24
    191c:	fb 01       	movw	r30, r22
    191e:	01 90       	ld	r0, Z+
    1920:	00 20       	and	r0, r0
    1922:	e9 f7       	brne	.-6      	; 0x191e <xSerialxPrint+0x24>
    1924:	4b 01       	movw	r8, r22
    1926:	9f 01       	movw	r18, r30
    1928:	21 50       	subi	r18, 0x01	; 1
    192a:	31 09       	sbc	r19, r1
    192c:	0f 2e       	mov	r0, r31
    192e:	f1 e3       	ldi	r31, 0x31	; 49
    1930:	ef 2e       	mov	r14, r31
    1932:	ff 24       	eor	r15, r15
    1934:	f3 94       	inc	r15
    1936:	f0 2d       	mov	r31, r0
    1938:	01 ed       	ldi	r16, 0xD1	; 209
    193a:	10 e0       	ldi	r17, 0x00	; 0
    193c:	69 ec       	ldi	r22, 0xC9	; 201
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	41 ec       	ldi	r20, 0xC1	; 193
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	5c 01       	movw	r10, r24
    1946:	8d e0       	ldi	r24, 0x0D	; 13
    1948:	a8 0e       	add	r10, r24
    194a:	b1 1c       	adc	r11, r1
    194c:	78 c0       	rjmp	.+240    	; 0x1a3e <xSerialxPrint+0x144>
    194e:	d4 01       	movw	r26, r8
    1950:	dd 90       	ld	r13, X+
    1952:	4d 01       	movw	r8, r26
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	0f 92       	push	r0
    195a:	ed 85       	ldd	r30, Y+13	; 0x0d
    195c:	fe 85       	ldd	r31, Y+14	; 0x0e
    195e:	0f 90       	pop	r0
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	8f 89       	ldd	r24, Y+23	; 0x17
    1964:	98 8d       	ldd	r25, Y+24	; 0x18
    1966:	e8 17       	cp	r30, r24
    1968:	f9 07       	cpc	r31, r25
    196a:	f1 f0       	breq	.+60     	; 0x19a8 <xSerialxPrint+0xae>
    196c:	f5 01       	movw	r30, r10
    196e:	82 81       	ldd	r24, Z+2	; 0x02
    1970:	93 81       	ldd	r25, Z+3	; 0x03
    1972:	dc 01       	movw	r26, r24
    1974:	dc 92       	st	X, r13
    1976:	82 81       	ldd	r24, Z+2	; 0x02
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	93 83       	std	Z+3, r25	; 0x03
    197e:	82 83       	std	Z+2, r24	; 0x02
    1980:	c0 84       	ldd	r12, Z+8	; 0x08
    1982:	d1 84       	ldd	r13, Z+9	; 0x09
    1984:	8c 15       	cp	r24, r12
    1986:	9d 05       	cpc	r25, r13
    1988:	21 f4       	brne	.+8      	; 0x1992 <xSerialxPrint+0x98>
    198a:	86 81       	ldd	r24, Z+6	; 0x06
    198c:	97 81       	ldd	r25, Z+7	; 0x07
    198e:	93 83       	std	Z+3, r25	; 0x03
    1990:	82 83       	std	Z+2, r24	; 0x02
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	0f 92       	push	r0
    1998:	80 81       	ld	r24, Z
    199a:	91 81       	ldd	r25, Z+1	; 0x01
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	80 83       	st	Z, r24
    19a2:	0f 90       	pop	r0
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	2b c0       	rjmp	.+86     	; 0x19fe <xSerialxPrint+0x104>
    19a8:	00 00       	nop
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	0f 92       	push	r0
    19b0:	ed 85       	ldd	r30, Y+13	; 0x0d
    19b2:	fe 85       	ldd	r31, Y+14	; 0x0e
    19b4:	0f 90       	pop	r0
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ba:	98 8d       	ldd	r25, Y+24	; 0x18
    19bc:	e8 17       	cp	r30, r24
    19be:	f9 07       	cpc	r31, r25
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <xSerialxPrint+0xca>
    19c2:	3d c0       	rjmp	.+122    	; 0x1a3e <xSerialxPrint+0x144>
    19c4:	f5 01       	movw	r30, r10
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	dc 01       	movw	r26, r24
    19cc:	dc 92       	st	X, r13
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	93 83       	std	Z+3, r25	; 0x03
    19d6:	82 83       	std	Z+2, r24	; 0x02
    19d8:	c0 84       	ldd	r12, Z+8	; 0x08
    19da:	d1 84       	ldd	r13, Z+9	; 0x09
    19dc:	8c 15       	cp	r24, r12
    19de:	9d 05       	cpc	r25, r13
    19e0:	21 f4       	brne	.+8      	; 0x19ea <xSerialxPrint+0xf0>
    19e2:	86 81       	ldd	r24, Z+6	; 0x06
    19e4:	97 81       	ldd	r25, Z+7	; 0x07
    19e6:	93 83       	std	Z+3, r25	; 0x03
    19e8:	82 83       	std	Z+2, r24	; 0x02
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	0f 92       	push	r0
    19f0:	80 81       	ld	r24, Z
    19f2:	91 81       	ldd	r25, Z+1	; 0x01
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	80 83       	st	Z, r24
    19fa:	0f 90       	pop	r0
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	48 80       	ld	r4, Y
    1a00:	51 2c       	mov	r5, r1
    1a02:	b8 e0       	ldi	r27, 0x08	; 8
    1a04:	4b 16       	cp	r4, r27
    1a06:	51 04       	cpc	r5, r1
    1a08:	d0 f4       	brcc	.+52     	; 0x1a3e <xSerialxPrint+0x144>
    1a0a:	f2 01       	movw	r30, r4
    1a0c:	88 27       	eor	r24, r24
    1a0e:	ee 58       	subi	r30, 0x8E	; 142
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	8f 4f       	sbci	r24, 0xFF	; 255
    1a14:	0c 94 5b 5a 	jmp	0xb4b6	; 0xb4b6 <__tablejump2__>
    1a18:	fa 01       	movw	r30, r20
    1a1a:	80 81       	ld	r24, Z
    1a1c:	80 62       	ori	r24, 0x20	; 32
    1a1e:	80 83       	st	Z, r24
    1a20:	0e c0       	rjmp	.+28     	; 0x1a3e <xSerialxPrint+0x144>
    1a22:	db 01       	movw	r26, r22
    1a24:	8c 91       	ld	r24, X
    1a26:	80 62       	ori	r24, 0x20	; 32
    1a28:	8c 93       	st	X, r24
    1a2a:	09 c0       	rjmp	.+18     	; 0x1a3e <xSerialxPrint+0x144>
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	80 81       	ld	r24, Z
    1a30:	80 62       	ori	r24, 0x20	; 32
    1a32:	80 83       	st	Z, r24
    1a34:	04 c0       	rjmp	.+8      	; 0x1a3e <xSerialxPrint+0x144>
    1a36:	d7 01       	movw	r26, r14
    1a38:	8c 91       	ld	r24, X
    1a3a:	80 62       	ori	r24, 0x20	; 32
    1a3c:	8c 93       	st	X, r24
    1a3e:	82 16       	cp	r8, r18
    1a40:	93 06       	cpc	r9, r19
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <xSerialxPrint+0x14c>
    1a44:	84 cf       	rjmp	.-248    	; 0x194e <xSerialxPrint+0x54>
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	ff 90       	pop	r15
    1a50:	ef 90       	pop	r14
    1a52:	df 90       	pop	r13
    1a54:	cf 90       	pop	r12
    1a56:	bf 90       	pop	r11
    1a58:	af 90       	pop	r10
    1a5a:	9f 90       	pop	r9
    1a5c:	8f 90       	pop	r8
    1a5e:	7f 90       	pop	r7
    1a60:	6f 90       	pop	r6
    1a62:	5f 90       	pop	r5
    1a64:	4f 90       	pop	r4
    1a66:	08 95       	ret

00001a68 <xSerialxPrintf>:
    1a68:	0f 93       	push	r16
    1a6a:	1f 93       	push	r17
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	08 85       	ldd	r16, Y+8	; 0x08
    1a76:	19 85       	ldd	r17, Y+9	; 0x09
    1a78:	f8 01       	movw	r30, r16
    1a7a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	29 f4       	brne	.+10     	; 0x1a8a <xSerialxPrintf+0x22>
    1a80:	67 d9       	rcall	.-3378   	; 0xd50 <vPortYield>
    1a82:	f8 01       	movw	r30, r16
    1a84:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a86:	81 30       	cpi	r24, 0x01	; 1
    1a88:	d9 f3       	breq	.-10     	; 0x1a80 <xSerialxPrintf+0x18>
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	85 8f       	std	Z+29, r24	; 0x1d
    1a90:	63 8d       	ldd	r22, Z+27	; 0x1b
    1a92:	74 8d       	ldd	r23, Z+28	; 0x1c
    1a94:	9e 01       	movw	r18, r28
    1a96:	24 5f       	subi	r18, 0xF4	; 244
    1a98:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9a:	4a 85       	ldd	r20, Y+10	; 0x0a
    1a9c:	5b 85       	ldd	r21, Y+11	; 0x0b
    1a9e:	81 8d       	ldd	r24, Z+25	; 0x19
    1aa0:	92 8d       	ldd	r25, Z+26	; 0x1a
    1aa2:	0e 94 cd 5c 	call	0xb99a	; 0xb99a <vsnprintf>
    1aa6:	f8 01       	movw	r30, r16
    1aa8:	61 8d       	ldd	r22, Z+25	; 0x19
    1aaa:	72 8d       	ldd	r23, Z+26	; 0x1a
    1aac:	c8 01       	movw	r24, r16
    1aae:	25 df       	rcall	.-438    	; 0x18fa <xSerialxPrint>
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	15 8e       	std	Z+29, r1	; 0x1d
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	08 95       	ret

00001abe <xSerialRxFlush>:
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	4c 91       	ld	r20, X
    1ac6:	50 e0       	ldi	r21, 0x00	; 0
    1ac8:	48 30       	cpi	r20, 0x08	; 8
    1aca:	51 05       	cpc	r21, r1
    1acc:	e8 f5       	brcc	.+122    	; 0x1b48 <xSerialRxFlush+0x8a>
    1ace:	fa 01       	movw	r30, r20
    1ad0:	88 27       	eor	r24, r24
    1ad2:	e6 58       	subi	r30, 0x86	; 134
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad8:	0c 94 5b 5a 	jmp	0xb4b6	; 0xb4b6 <__tablejump2__>
    1adc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1ae0:	88 23       	and	r24, r24
    1ae2:	54 f1       	brlt	.+84     	; 0x1b38 <xSerialRxFlush+0x7a>
    1ae4:	31 c0       	rjmp	.+98     	; 0x1b48 <xSerialRxFlush+0x8a>
    1ae6:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1aea:	88 23       	and	r24, r24
    1aec:	e4 f0       	brlt	.+56     	; 0x1b26 <xSerialRxFlush+0x68>
    1aee:	2c c0       	rjmp	.+88     	; 0x1b48 <xSerialRxFlush+0x8a>
    1af0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1af4:	88 23       	and	r24, r24
    1af6:	74 f0       	brlt	.+28     	; 0x1b14 <xSerialRxFlush+0x56>
    1af8:	27 c0       	rjmp	.+78     	; 0x1b48 <xSerialRxFlush+0x8a>
    1afa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1afe:	88 23       	and	r24, r24
    1b00:	1c f5       	brge	.+70     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b02:	c6 ec       	ldi	r28, 0xC6	; 198
    1b04:	d0 e0       	ldi	r29, 0x00	; 0
    1b06:	e0 ec       	ldi	r30, 0xC0	; 192
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	88 81       	ld	r24, Y
    1b0c:	80 81       	ld	r24, Z
    1b0e:	88 23       	and	r24, r24
    1b10:	e4 f3       	brlt	.-8      	; 0x1b0a <xSerialRxFlush+0x4c>
    1b12:	1a c0       	rjmp	.+52     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b14:	ce ec       	ldi	r28, 0xCE	; 206
    1b16:	d0 e0       	ldi	r29, 0x00	; 0
    1b18:	e8 ec       	ldi	r30, 0xC8	; 200
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	88 81       	ld	r24, Y
    1b1e:	80 81       	ld	r24, Z
    1b20:	88 23       	and	r24, r24
    1b22:	e4 f3       	brlt	.-8      	; 0x1b1c <xSerialRxFlush+0x5e>
    1b24:	11 c0       	rjmp	.+34     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b26:	c6 ed       	ldi	r28, 0xD6	; 214
    1b28:	d0 e0       	ldi	r29, 0x00	; 0
    1b2a:	e0 ed       	ldi	r30, 0xD0	; 208
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	88 81       	ld	r24, Y
    1b30:	80 81       	ld	r24, Z
    1b32:	88 23       	and	r24, r24
    1b34:	e4 f3       	brlt	.-8      	; 0x1b2e <xSerialRxFlush+0x70>
    1b36:	08 c0       	rjmp	.+16     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b38:	c6 e3       	ldi	r28, 0x36	; 54
    1b3a:	d1 e0       	ldi	r29, 0x01	; 1
    1b3c:	e0 e3       	ldi	r30, 0x30	; 48
    1b3e:	f1 e0       	ldi	r31, 0x01	; 1
    1b40:	88 81       	ld	r24, Y
    1b42:	80 81       	ld	r24, Z
    1b44:	88 23       	and	r24, r24
    1b46:	e4 f3       	brlt	.-8      	; 0x1b40 <xSerialRxFlush+0x82>
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	0f 92       	push	r0
    1b4e:	12 96       	adiw	r26, 0x02	; 2
    1b50:	1c 92       	st	X, r1
    1b52:	1e 92       	st	-X, r1
    1b54:	11 97       	sbiw	r26, 0x01	; 1
    1b56:	17 96       	adiw	r26, 0x07	; 7
    1b58:	8d 91       	ld	r24, X+
    1b5a:	9c 91       	ld	r25, X
    1b5c:	18 97       	sbiw	r26, 0x08	; 8
    1b5e:	14 96       	adiw	r26, 0x04	; 4
    1b60:	9c 93       	st	X, r25
    1b62:	8e 93       	st	-X, r24
    1b64:	13 97       	sbiw	r26, 0x03	; 3
    1b66:	16 96       	adiw	r26, 0x06	; 6
    1b68:	9c 93       	st	X, r25
    1b6a:	8e 93       	st	-X, r24
    1b6c:	15 97       	sbiw	r26, 0x05	; 5
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	08 95       	ret

00001b78 <xSerialAvailableChar>:
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	0f 92       	push	r0
    1b7e:	fc 01       	movw	r30, r24
    1b80:	81 81       	ldd	r24, Z+1	; 0x01
    1b82:	92 81       	ldd	r25, Z+2	; 0x02
    1b84:	0f 90       	pop	r0
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	08 95       	ret

00001b8a <xSerialPutChar>:
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	dc 01       	movw	r26, r24
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	0f 92       	push	r0
    1b96:	1d 96       	adiw	r26, 0x0d	; 13
    1b98:	2d 91       	ld	r18, X+
    1b9a:	3c 91       	ld	r19, X
    1b9c:	1e 97       	sbiw	r26, 0x0e	; 14
    1b9e:	0f 90       	pop	r0
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	57 96       	adiw	r26, 0x17	; 23
    1ba4:	8d 91       	ld	r24, X+
    1ba6:	9c 91       	ld	r25, X
    1ba8:	58 97       	sbiw	r26, 0x18	; 24
    1baa:	28 17       	cp	r18, r24
    1bac:	39 07       	cpc	r19, r25
    1bae:	f1 f0       	breq	.+60     	; 0x1bec <xSerialPutChar+0x62>
    1bb0:	fd 01       	movw	r30, r26
    1bb2:	3d 96       	adiw	r30, 0x0d	; 13
    1bb4:	c2 81       	ldd	r28, Z+2	; 0x02
    1bb6:	d3 81       	ldd	r29, Z+3	; 0x03
    1bb8:	68 83       	st	Y, r22
    1bba:	82 81       	ldd	r24, Z+2	; 0x02
    1bbc:	93 81       	ldd	r25, Z+3	; 0x03
    1bbe:	01 96       	adiw	r24, 0x01	; 1
    1bc0:	93 83       	std	Z+3, r25	; 0x03
    1bc2:	82 83       	std	Z+2, r24	; 0x02
    1bc4:	20 85       	ldd	r18, Z+8	; 0x08
    1bc6:	31 85       	ldd	r19, Z+9	; 0x09
    1bc8:	82 17       	cp	r24, r18
    1bca:	93 07       	cpc	r25, r19
    1bcc:	21 f4       	brne	.+8      	; 0x1bd6 <xSerialPutChar+0x4c>
    1bce:	86 81       	ldd	r24, Z+6	; 0x06
    1bd0:	97 81       	ldd	r25, Z+7	; 0x07
    1bd2:	93 83       	std	Z+3, r25	; 0x03
    1bd4:	82 83       	std	Z+2, r24	; 0x02
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	0f 92       	push	r0
    1bdc:	80 81       	ld	r24, Z
    1bde:	91 81       	ldd	r25, Z+1	; 0x01
    1be0:	01 96       	adiw	r24, 0x01	; 1
    1be2:	91 83       	std	Z+1, r25	; 0x01
    1be4:	80 83       	st	Z, r24
    1be6:	0f 90       	pop	r0
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	2f c0       	rjmp	.+94     	; 0x1c4a <xSerialPutChar+0xc0>
    1bec:	00 00       	nop
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	0f 92       	push	r0
    1bf4:	1d 96       	adiw	r26, 0x0d	; 13
    1bf6:	2d 91       	ld	r18, X+
    1bf8:	3c 91       	ld	r19, X
    1bfa:	1e 97       	sbiw	r26, 0x0e	; 14
    1bfc:	0f 90       	pop	r0
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	57 96       	adiw	r26, 0x17	; 23
    1c02:	8d 91       	ld	r24, X+
    1c04:	9c 91       	ld	r25, X
    1c06:	58 97       	sbiw	r26, 0x18	; 24
    1c08:	28 17       	cp	r18, r24
    1c0a:	39 07       	cpc	r19, r25
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <xSerialPutChar+0x86>
    1c0e:	45 c0       	rjmp	.+138    	; 0x1c9a <xSerialPutChar+0x110>
    1c10:	fd 01       	movw	r30, r26
    1c12:	3d 96       	adiw	r30, 0x0d	; 13
    1c14:	c2 81       	ldd	r28, Z+2	; 0x02
    1c16:	d3 81       	ldd	r29, Z+3	; 0x03
    1c18:	68 83       	st	Y, r22
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	01 96       	adiw	r24, 0x01	; 1
    1c20:	93 83       	std	Z+3, r25	; 0x03
    1c22:	82 83       	std	Z+2, r24	; 0x02
    1c24:	20 85       	ldd	r18, Z+8	; 0x08
    1c26:	31 85       	ldd	r19, Z+9	; 0x09
    1c28:	82 17       	cp	r24, r18
    1c2a:	93 07       	cpc	r25, r19
    1c2c:	21 f4       	brne	.+8      	; 0x1c36 <xSerialPutChar+0xac>
    1c2e:	86 81       	ldd	r24, Z+6	; 0x06
    1c30:	97 81       	ldd	r25, Z+7	; 0x07
    1c32:	93 83       	std	Z+3, r25	; 0x03
    1c34:	82 83       	std	Z+2, r24	; 0x02
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	0f 92       	push	r0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	91 81       	ldd	r25, Z+1	; 0x01
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	80 83       	st	Z, r24
    1c46:	0f 90       	pop	r0
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	8c 91       	ld	r24, X
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	88 30       	cpi	r24, 0x08	; 8
    1c50:	91 05       	cpc	r25, r1
    1c52:	28 f5       	brcc	.+74     	; 0x1c9e <xSerialPutChar+0x114>
    1c54:	fc 01       	movw	r30, r24
    1c56:	88 27       	eor	r24, r24
    1c58:	ee 57       	subi	r30, 0x7E	; 126
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5e:	0c 94 5b 5a 	jmp	0xb4b6	; 0xb4b6 <__tablejump2__>
    1c62:	e1 ec       	ldi	r30, 0xC1	; 193
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	80 62       	ori	r24, 0x20	; 32
    1c6a:	80 83       	st	Z, r24
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	18 c0       	rjmp	.+48     	; 0x1ca0 <xSerialPutChar+0x116>
    1c70:	e9 ec       	ldi	r30, 0xC9	; 201
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	80 62       	ori	r24, 0x20	; 32
    1c78:	80 83       	st	Z, r24
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	11 c0       	rjmp	.+34     	; 0x1ca0 <xSerialPutChar+0x116>
    1c7e:	e1 ed       	ldi	r30, 0xD1	; 209
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	80 62       	ori	r24, 0x20	; 32
    1c86:	80 83       	st	Z, r24
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	0a c0       	rjmp	.+20     	; 0x1ca0 <xSerialPutChar+0x116>
    1c8c:	e1 e3       	ldi	r30, 0x31	; 49
    1c8e:	f1 e0       	ldi	r31, 0x01	; 1
    1c90:	80 81       	ld	r24, Z
    1c92:	80 62       	ori	r24, 0x20	; 32
    1c94:	80 83       	st	Z, r24
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	03 c0       	rjmp	.+6      	; 0x1ca0 <xSerialPutChar+0x116>
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	01 c0       	rjmp	.+2      	; 0x1ca0 <xSerialPutChar+0x116>
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	08 95       	ret

00001ca6 <xSerialPortInitMinimal>:
    1ca6:	7f 92       	push	r7
    1ca8:	8f 92       	push	r8
    1caa:	9f 92       	push	r9
    1cac:	af 92       	push	r10
    1cae:	bf 92       	push	r11
    1cb0:	cf 92       	push	r12
    1cb2:	df 92       	push	r13
    1cb4:	ef 92       	push	r14
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	a2 97       	sbiw	r28, 0x22	; 34
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	6c 01       	movw	r12, r24
    1cd2:	76 2e       	mov	r7, r22
    1cd4:	49 01       	movw	r8, r18
    1cd6:	5a 01       	movw	r10, r20
    1cd8:	c7 01       	movw	r24, r14
    1cda:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	a9 f0       	breq	.+42     	; 0x1d0c <xSerialPortInitMinimal+0x66>
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	32 96       	adiw	r30, 0x02	; 2
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	0f 92       	push	r0
    1cec:	11 82       	std	Z+1, r1	; 0x01
    1cee:	10 82       	st	Z, r1
    1cf0:	93 83       	std	Z+3, r25	; 0x03
    1cf2:	82 83       	std	Z+2, r24	; 0x02
    1cf4:	95 83       	std	Z+5, r25	; 0x05
    1cf6:	84 83       	std	Z+4, r24	; 0x04
    1cf8:	97 83       	std	Z+7, r25	; 0x07
    1cfa:	86 83       	std	Z+6, r24	; 0x06
    1cfc:	8e 0d       	add	r24, r14
    1cfe:	9f 1d       	adc	r25, r15
    1d00:	91 87       	std	Z+9, r25	; 0x09
    1d02:	80 87       	std	Z+8, r24	; 0x08
    1d04:	f3 86       	std	Z+11, r15	; 0x0b
    1d06:	e2 86       	std	Z+10, r14	; 0x0a
    1d08:	0f 90       	pop	r0
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	c8 01       	movw	r24, r16
    1d0e:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	a9 f0       	breq	.+42     	; 0x1d40 <xSerialPortInitMinimal+0x9a>
    1d16:	fe 01       	movw	r30, r28
    1d18:	3e 96       	adiw	r30, 0x0e	; 14
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	0f 92       	push	r0
    1d20:	11 82       	std	Z+1, r1	; 0x01
    1d22:	10 82       	st	Z, r1
    1d24:	93 83       	std	Z+3, r25	; 0x03
    1d26:	82 83       	std	Z+2, r24	; 0x02
    1d28:	95 83       	std	Z+5, r25	; 0x05
    1d2a:	84 83       	std	Z+4, r24	; 0x04
    1d2c:	97 83       	std	Z+7, r25	; 0x07
    1d2e:	86 83       	std	Z+6, r24	; 0x06
    1d30:	80 0f       	add	r24, r16
    1d32:	91 1f       	adc	r25, r17
    1d34:	91 87       	std	Z+9, r25	; 0x09
    1d36:	80 87       	std	Z+8, r24	; 0x08
    1d38:	13 87       	std	Z+11, r17	; 0x0b
    1d3a:	02 87       	std	Z+10, r16	; 0x0a
    1d3c:	0f 90       	pop	r0
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	c8 01       	movw	r24, r16
    1d42:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1d46:	9b 8f       	std	Y+27, r25	; 0x1b
    1d48:	8a 8f       	std	Y+26, r24	; 0x1a
    1d4a:	79 82       	std	Y+1, r7	; 0x01
    1d4c:	1d 8f       	std	Y+29, r17	; 0x1d
    1d4e:	0c 8f       	std	Y+28, r16	; 0x1c
    1d50:	1e 8e       	std	Y+30, r1	; 0x1e
    1d52:	8f 8e       	std	Y+31, r8	; 0x1f
    1d54:	98 a2       	std	Y+32, r9	; 0x20
    1d56:	a9 a2       	std	Y+33, r10	; 0x21
    1d58:	ba a2       	std	Y+34, r11	; 0x22
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	f8 94       	cli
    1d5e:	0f 92       	push	r0
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	88 30       	cpi	r24, 0x08	; 8
    1d66:	91 05       	cpc	r25, r1
    1d68:	08 f0       	brcs	.+2      	; 0x1d6c <xSerialPortInitMinimal+0xc6>
    1d6a:	ba c1       	rjmp	.+884    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	88 27       	eor	r24, r24
    1d70:	e6 57       	subi	r30, 0x76	; 118
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	8f 4f       	sbci	r24, 0xFF	; 255
    1d76:	0c 94 5b 5a 	jmp	0xb4b6	; 0xb4b6 <__tablejump2__>
    1d7a:	d5 01       	movw	r26, r10
    1d7c:	c4 01       	movw	r24, r8
    1d7e:	97 5f       	subi	r25, 0xF7	; 247
    1d80:	a2 4c       	sbci	r26, 0xC2	; 194
    1d82:	bf 4f       	sbci	r27, 0xFF	; 255
    1d84:	bc 01       	movw	r22, r24
    1d86:	cd 01       	movw	r24, r26
    1d88:	66 0f       	add	r22, r22
    1d8a:	77 1f       	adc	r23, r23
    1d8c:	88 1f       	adc	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	66 0f       	add	r22, r22
    1d92:	77 1f       	adc	r23, r23
    1d94:	88 1f       	adc	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	95 01       	movw	r18, r10
    1d9a:	84 01       	movw	r16, r8
    1d9c:	00 0f       	add	r16, r16
    1d9e:	11 1f       	adc	r17, r17
    1da0:	22 1f       	adc	r18, r18
    1da2:	33 1f       	adc	r19, r19
    1da4:	00 0f       	add	r16, r16
    1da6:	11 1f       	adc	r17, r17
    1da8:	22 1f       	adc	r18, r18
    1daa:	33 1f       	adc	r19, r19
    1dac:	a9 01       	movw	r20, r18
    1dae:	98 01       	movw	r18, r16
    1db0:	22 0f       	add	r18, r18
    1db2:	33 1f       	adc	r19, r19
    1db4:	44 1f       	adc	r20, r20
    1db6:	55 1f       	adc	r21, r21
    1db8:	0e 94 39 5a 	call	0xb472	; 0xb472 <__udivmodsi4>
    1dbc:	21 50       	subi	r18, 0x01	; 1
    1dbe:	31 09       	sbc	r19, r1
    1dc0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1dc4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1dce:	88 e9       	ldi	r24, 0x98	; 152
    1dd0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1dd4:	8e e0       	ldi	r24, 0x0E	; 14
    1dd6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1dda:	82 c1       	rjmp	.+772    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1ddc:	04 ec       	ldi	r16, 0xC4	; 196
    1dde:	10 e0       	ldi	r17, 0x00	; 0
    1de0:	f8 01       	movw	r30, r16
    1de2:	11 82       	std	Z+1, r1	; 0x01
    1de4:	10 82       	st	Z, r1
    1de6:	6a 9a       	sbi	0x0d, 2	; 13
    1de8:	80 ec       	ldi	r24, 0xC0	; 192
    1dea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1dee:	88 e9       	ldi	r24, 0x98	; 152
    1df0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1df4:	d5 01       	movw	r26, r10
    1df6:	c4 01       	movw	r24, r8
    1df8:	80 58       	subi	r24, 0x80	; 128
    1dfa:	9b 47       	sbci	r25, 0x7B	; 123
    1dfc:	a1 4e       	sbci	r26, 0xE1	; 225
    1dfe:	bf 4f       	sbci	r27, 0xFF	; 255
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	aa 1f       	adc	r26, r26
    1e06:	bb 1f       	adc	r27, r27
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	aa 1f       	adc	r26, r26
    1e0e:	bb 1f       	adc	r27, r27
    1e10:	bc 01       	movw	r22, r24
    1e12:	cd 01       	movw	r24, r26
    1e14:	66 0f       	add	r22, r22
    1e16:	77 1f       	adc	r23, r23
    1e18:	88 1f       	adc	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	88 0c       	add	r8, r8
    1e1e:	99 1c       	adc	r9, r9
    1e20:	aa 1c       	adc	r10, r10
    1e22:	bb 1c       	adc	r11, r11
    1e24:	88 0c       	add	r8, r8
    1e26:	99 1c       	adc	r9, r9
    1e28:	aa 1c       	adc	r10, r10
    1e2a:	bb 1c       	adc	r11, r11
    1e2c:	a5 01       	movw	r20, r10
    1e2e:	94 01       	movw	r18, r8
    1e30:	22 0f       	add	r18, r18
    1e32:	33 1f       	adc	r19, r19
    1e34:	44 1f       	adc	r20, r20
    1e36:	55 1f       	adc	r21, r21
    1e38:	22 0f       	add	r18, r18
    1e3a:	33 1f       	adc	r19, r19
    1e3c:	44 1f       	adc	r20, r20
    1e3e:	55 1f       	adc	r21, r21
    1e40:	0e 94 39 5a 	call	0xb472	; 0xb472 <__udivmodsi4>
    1e44:	21 50       	subi	r18, 0x01	; 1
    1e46:	31 09       	sbc	r19, r1
    1e48:	f8 01       	movw	r30, r16
    1e4a:	31 83       	std	Z+1, r19	; 0x01
    1e4c:	20 83       	st	Z, r18
    1e4e:	48 c1       	rjmp	.+656    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1e50:	d5 01       	movw	r26, r10
    1e52:	c4 01       	movw	r24, r8
    1e54:	97 5f       	subi	r25, 0xF7	; 247
    1e56:	a2 4c       	sbci	r26, 0xC2	; 194
    1e58:	bf 4f       	sbci	r27, 0xFF	; 255
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	66 0f       	add	r22, r22
    1e60:	77 1f       	adc	r23, r23
    1e62:	88 1f       	adc	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	66 0f       	add	r22, r22
    1e68:	77 1f       	adc	r23, r23
    1e6a:	88 1f       	adc	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	95 01       	movw	r18, r10
    1e70:	84 01       	movw	r16, r8
    1e72:	00 0f       	add	r16, r16
    1e74:	11 1f       	adc	r17, r17
    1e76:	22 1f       	adc	r18, r18
    1e78:	33 1f       	adc	r19, r19
    1e7a:	00 0f       	add	r16, r16
    1e7c:	11 1f       	adc	r17, r17
    1e7e:	22 1f       	adc	r18, r18
    1e80:	33 1f       	adc	r19, r19
    1e82:	a9 01       	movw	r20, r18
    1e84:	98 01       	movw	r18, r16
    1e86:	22 0f       	add	r18, r18
    1e88:	33 1f       	adc	r19, r19
    1e8a:	44 1f       	adc	r20, r20
    1e8c:	55 1f       	adc	r21, r21
    1e8e:	0e 94 39 5a 	call	0xb472	; 0xb472 <__udivmodsi4>
    1e92:	21 50       	subi	r18, 0x01	; 1
    1e94:	31 09       	sbc	r19, r1
    1e96:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    1e9a:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    1e9e:	82 e0       	ldi	r24, 0x02	; 2
    1ea0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1ea4:	88 e9       	ldi	r24, 0x98	; 152
    1ea6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1eaa:	8e e0       	ldi	r24, 0x0E	; 14
    1eac:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1eb0:	17 c1       	rjmp	.+558    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1eb2:	0c ec       	ldi	r16, 0xCC	; 204
    1eb4:	10 e0       	ldi	r17, 0x00	; 0
    1eb6:	f8 01       	movw	r30, r16
    1eb8:	11 82       	std	Z+1, r1	; 0x01
    1eba:	10 82       	st	Z, r1
    1ebc:	55 9a       	sbi	0x0a, 5	; 10
    1ebe:	80 ec       	ldi	r24, 0xC0	; 192
    1ec0:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1ec4:	88 e9       	ldi	r24, 0x98	; 152
    1ec6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1eca:	d5 01       	movw	r26, r10
    1ecc:	c4 01       	movw	r24, r8
    1ece:	80 58       	subi	r24, 0x80	; 128
    1ed0:	9b 47       	sbci	r25, 0x7B	; 123
    1ed2:	a1 4e       	sbci	r26, 0xE1	; 225
    1ed4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	aa 1f       	adc	r26, r26
    1edc:	bb 1f       	adc	r27, r27
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	aa 1f       	adc	r26, r26
    1ee4:	bb 1f       	adc	r27, r27
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	66 0f       	add	r22, r22
    1eec:	77 1f       	adc	r23, r23
    1eee:	88 1f       	adc	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	88 0c       	add	r8, r8
    1ef4:	99 1c       	adc	r9, r9
    1ef6:	aa 1c       	adc	r10, r10
    1ef8:	bb 1c       	adc	r11, r11
    1efa:	88 0c       	add	r8, r8
    1efc:	99 1c       	adc	r9, r9
    1efe:	aa 1c       	adc	r10, r10
    1f00:	bb 1c       	adc	r11, r11
    1f02:	a5 01       	movw	r20, r10
    1f04:	94 01       	movw	r18, r8
    1f06:	22 0f       	add	r18, r18
    1f08:	33 1f       	adc	r19, r19
    1f0a:	44 1f       	adc	r20, r20
    1f0c:	55 1f       	adc	r21, r21
    1f0e:	22 0f       	add	r18, r18
    1f10:	33 1f       	adc	r19, r19
    1f12:	44 1f       	adc	r20, r20
    1f14:	55 1f       	adc	r21, r21
    1f16:	0e 94 39 5a 	call	0xb472	; 0xb472 <__udivmodsi4>
    1f1a:	21 50       	subi	r18, 0x01	; 1
    1f1c:	31 09       	sbc	r19, r1
    1f1e:	f8 01       	movw	r30, r16
    1f20:	31 83       	std	Z+1, r19	; 0x01
    1f22:	20 83       	st	Z, r18
    1f24:	dd c0       	rjmp	.+442    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1f26:	d5 01       	movw	r26, r10
    1f28:	c4 01       	movw	r24, r8
    1f2a:	97 5f       	subi	r25, 0xF7	; 247
    1f2c:	a2 4c       	sbci	r26, 0xC2	; 194
    1f2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	66 0f       	add	r22, r22
    1f36:	77 1f       	adc	r23, r23
    1f38:	88 1f       	adc	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	66 0f       	add	r22, r22
    1f3e:	77 1f       	adc	r23, r23
    1f40:	88 1f       	adc	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	95 01       	movw	r18, r10
    1f46:	84 01       	movw	r16, r8
    1f48:	00 0f       	add	r16, r16
    1f4a:	11 1f       	adc	r17, r17
    1f4c:	22 1f       	adc	r18, r18
    1f4e:	33 1f       	adc	r19, r19
    1f50:	00 0f       	add	r16, r16
    1f52:	11 1f       	adc	r17, r17
    1f54:	22 1f       	adc	r18, r18
    1f56:	33 1f       	adc	r19, r19
    1f58:	a9 01       	movw	r20, r18
    1f5a:	98 01       	movw	r18, r16
    1f5c:	22 0f       	add	r18, r18
    1f5e:	33 1f       	adc	r19, r19
    1f60:	44 1f       	adc	r20, r20
    1f62:	55 1f       	adc	r21, r21
    1f64:	0e 94 39 5a 	call	0xb472	; 0xb472 <__udivmodsi4>
    1f68:	21 50       	subi	r18, 0x01	; 1
    1f6a:	31 09       	sbc	r19, r1
    1f6c:	30 93 d5 00 	sts	0x00D5, r19	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    1f70:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    1f74:	82 e0       	ldi	r24, 0x02	; 2
    1f76:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1f7a:	88 e9       	ldi	r24, 0x98	; 152
    1f7c:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1f80:	8e e0       	ldi	r24, 0x0E	; 14
    1f82:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1f86:	ac c0       	rjmp	.+344    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1f88:	04 ed       	ldi	r16, 0xD4	; 212
    1f8a:	10 e0       	ldi	r17, 0x00	; 0
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	11 82       	std	Z+1, r1	; 0x01
    1f90:	10 82       	st	Z, r1
    1f92:	e1 e0       	ldi	r30, 0x01	; 1
    1f94:	f1 e0       	ldi	r31, 0x01	; 1
    1f96:	80 81       	ld	r24, Z
    1f98:	84 60       	ori	r24, 0x04	; 4
    1f9a:	80 83       	st	Z, r24
    1f9c:	80 ec       	ldi	r24, 0xC0	; 192
    1f9e:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1fa2:	88 e9       	ldi	r24, 0x98	; 152
    1fa4:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1fa8:	d5 01       	movw	r26, r10
    1faa:	c4 01       	movw	r24, r8
    1fac:	80 58       	subi	r24, 0x80	; 128
    1fae:	9b 47       	sbci	r25, 0x7B	; 123
    1fb0:	a1 4e       	sbci	r26, 0xE1	; 225
    1fb2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	aa 1f       	adc	r26, r26
    1fba:	bb 1f       	adc	r27, r27
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	aa 1f       	adc	r26, r26
    1fc2:	bb 1f       	adc	r27, r27
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	66 0f       	add	r22, r22
    1fca:	77 1f       	adc	r23, r23
    1fcc:	88 1f       	adc	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	88 0c       	add	r8, r8
    1fd2:	99 1c       	adc	r9, r9
    1fd4:	aa 1c       	adc	r10, r10
    1fd6:	bb 1c       	adc	r11, r11
    1fd8:	88 0c       	add	r8, r8
    1fda:	99 1c       	adc	r9, r9
    1fdc:	aa 1c       	adc	r10, r10
    1fde:	bb 1c       	adc	r11, r11
    1fe0:	a5 01       	movw	r20, r10
    1fe2:	94 01       	movw	r18, r8
    1fe4:	22 0f       	add	r18, r18
    1fe6:	33 1f       	adc	r19, r19
    1fe8:	44 1f       	adc	r20, r20
    1fea:	55 1f       	adc	r21, r21
    1fec:	22 0f       	add	r18, r18
    1fee:	33 1f       	adc	r19, r19
    1ff0:	44 1f       	adc	r20, r20
    1ff2:	55 1f       	adc	r21, r21
    1ff4:	0e 94 39 5a 	call	0xb472	; 0xb472 <__udivmodsi4>
    1ff8:	21 50       	subi	r18, 0x01	; 1
    1ffa:	31 09       	sbc	r19, r1
    1ffc:	f8 01       	movw	r30, r16
    1ffe:	31 83       	std	Z+1, r19	; 0x01
    2000:	20 83       	st	Z, r18
    2002:	6e c0       	rjmp	.+220    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    2004:	d5 01       	movw	r26, r10
    2006:	c4 01       	movw	r24, r8
    2008:	97 5f       	subi	r25, 0xF7	; 247
    200a:	a2 4c       	sbci	r26, 0xC2	; 194
    200c:	bf 4f       	sbci	r27, 0xFF	; 255
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	66 0f       	add	r22, r22
    2014:	77 1f       	adc	r23, r23
    2016:	88 1f       	adc	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	66 0f       	add	r22, r22
    201c:	77 1f       	adc	r23, r23
    201e:	88 1f       	adc	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	95 01       	movw	r18, r10
    2024:	84 01       	movw	r16, r8
    2026:	00 0f       	add	r16, r16
    2028:	11 1f       	adc	r17, r17
    202a:	22 1f       	adc	r18, r18
    202c:	33 1f       	adc	r19, r19
    202e:	00 0f       	add	r16, r16
    2030:	11 1f       	adc	r17, r17
    2032:	22 1f       	adc	r18, r18
    2034:	33 1f       	adc	r19, r19
    2036:	a9 01       	movw	r20, r18
    2038:	98 01       	movw	r18, r16
    203a:	22 0f       	add	r18, r18
    203c:	33 1f       	adc	r19, r19
    203e:	44 1f       	adc	r20, r20
    2040:	55 1f       	adc	r21, r21
    2042:	0e 94 39 5a 	call	0xb472	; 0xb472 <__udivmodsi4>
    2046:	21 50       	subi	r18, 0x01	; 1
    2048:	31 09       	sbc	r19, r1
    204a:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    204e:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2058:	88 e9       	ldi	r24, 0x98	; 152
    205a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    205e:	8e e0       	ldi	r24, 0x0E	; 14
    2060:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    2064:	3d c0       	rjmp	.+122    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    2066:	04 e3       	ldi	r16, 0x34	; 52
    2068:	11 e0       	ldi	r17, 0x01	; 1
    206a:	f8 01       	movw	r30, r16
    206c:	11 82       	std	Z+1, r1	; 0x01
    206e:	10 82       	st	Z, r1
    2070:	e4 e0       	ldi	r30, 0x04	; 4
    2072:	f1 e0       	ldi	r31, 0x01	; 1
    2074:	80 81       	ld	r24, Z
    2076:	84 60       	ori	r24, 0x04	; 4
    2078:	80 83       	st	Z, r24
    207a:	80 ec       	ldi	r24, 0xC0	; 192
    207c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    2080:	88 e9       	ldi	r24, 0x98	; 152
    2082:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    2086:	d5 01       	movw	r26, r10
    2088:	c4 01       	movw	r24, r8
    208a:	80 58       	subi	r24, 0x80	; 128
    208c:	9b 47       	sbci	r25, 0x7B	; 123
    208e:	a1 4e       	sbci	r26, 0xE1	; 225
    2090:	bf 4f       	sbci	r27, 0xFF	; 255
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	aa 1f       	adc	r26, r26
    2098:	bb 1f       	adc	r27, r27
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	aa 1f       	adc	r26, r26
    20a0:	bb 1f       	adc	r27, r27
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	66 0f       	add	r22, r22
    20a8:	77 1f       	adc	r23, r23
    20aa:	88 1f       	adc	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	88 0c       	add	r8, r8
    20b0:	99 1c       	adc	r9, r9
    20b2:	aa 1c       	adc	r10, r10
    20b4:	bb 1c       	adc	r11, r11
    20b6:	88 0c       	add	r8, r8
    20b8:	99 1c       	adc	r9, r9
    20ba:	aa 1c       	adc	r10, r10
    20bc:	bb 1c       	adc	r11, r11
    20be:	a5 01       	movw	r20, r10
    20c0:	94 01       	movw	r18, r8
    20c2:	22 0f       	add	r18, r18
    20c4:	33 1f       	adc	r19, r19
    20c6:	44 1f       	adc	r20, r20
    20c8:	55 1f       	adc	r21, r21
    20ca:	22 0f       	add	r18, r18
    20cc:	33 1f       	adc	r19, r19
    20ce:	44 1f       	adc	r20, r20
    20d0:	55 1f       	adc	r21, r21
    20d2:	0e 94 39 5a 	call	0xb472	; 0xb472 <__udivmodsi4>
    20d6:	21 50       	subi	r18, 0x01	; 1
    20d8:	31 09       	sbc	r19, r1
    20da:	f8 01       	movw	r30, r16
    20dc:	31 83       	std	Z+1, r19	; 0x01
    20de:	20 83       	st	Z, r18
    20e0:	0f 90       	pop	r0
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	82 e2       	ldi	r24, 0x22	; 34
    20e6:	fe 01       	movw	r30, r28
    20e8:	31 96       	adiw	r30, 0x01	; 1
    20ea:	d6 01       	movw	r26, r12
    20ec:	01 90       	ld	r0, Z+
    20ee:	0d 92       	st	X+, r0
    20f0:	8a 95       	dec	r24
    20f2:	e1 f7       	brne	.-8      	; 0x20ec <xSerialPortInitMinimal+0x446>
    20f4:	c6 01       	movw	r24, r12
    20f6:	a2 96       	adiw	r28, 0x22	; 34
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	ff 90       	pop	r15
    210c:	ef 90       	pop	r14
    210e:	df 90       	pop	r13
    2110:	cf 90       	pop	r12
    2112:	bf 90       	pop	r11
    2114:	af 90       	pop	r10
    2116:	9f 90       	pop	r9
    2118:	8f 90       	pop	r8
    211a:	7f 90       	pop	r7
    211c:	08 95       	ret

0000211e <__vector_25>:
#elif defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
ISR( USART0_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART0_RX_vect )

#endif
{
    211e:	1f 92       	push	r1
    2120:	0f 92       	push	r0
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	0f 92       	push	r0
    2126:	11 24       	eor	r1, r1
    2128:	0b b6       	in	r0, 0x3b	; 59
    212a:	0f 92       	push	r0
    212c:	2f 93       	push	r18
    212e:	3f 93       	push	r19
    2130:	4f 93       	push	r20
    2132:	5f 93       	push	r21
    2134:	6f 93       	push	r22
    2136:	7f 93       	push	r23
    2138:	8f 93       	push	r24
    213a:	9f 93       	push	r25
    213c:	af 93       	push	r26
    213e:	bf 93       	push	r27
    2140:	cf 93       	push	r28
    2142:	ef 93       	push	r30
    2144:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR0A & (_BV(FE0)|_BV(DOR0)|_BV(UPE0)) ) )
    2146:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    214a:	8c 71       	andi	r24, 0x1C	; 28
    214c:	71 f0       	breq	.+28     	; 0x216a <__vector_25+0x4c>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR0A & (1<<RXC0) ) erroredByte = UDR0;
    214e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    2152:	88 23       	and	r24, r24
    2154:	0c f0       	brlt	.+2      	; 0x2158 <__vector_25+0x3a>
    2156:	57 c0       	rjmp	.+174    	; 0x2206 <__stack+0x7>
    2158:	a6 ec       	ldi	r26, 0xC6	; 198
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e0 ec       	ldi	r30, 0xC0	; 192
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	8c 91       	ld	r24, X
    2162:	80 81       	ld	r24, Z
    2164:	88 23       	and	r24, r24
    2166:	e4 f3       	brlt	.-8      	; 0x2160 <__vector_25+0x42>
    2168:	4e c0       	rjmp	.+156    	; 0x2206 <__stack+0x7>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR0;
    216a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
//UCSR3B &= ~ ( _BV(RXCIE3) | _BV(RXEN3) | _BV(TXEN3));
if(!port_3)
    216e:	80 91 17 09 	lds	r24, 0x0917	; 0x800917 <port_3>
    2172:	81 11       	cpse	r24, r1
    2174:	1d c0       	rjmp	.+58     	; 0x21b0 <__vector_25+0x92>
{
port_0=true;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	80 93 c5 0a 	sts	0x0AC5, r24	; 0x800ac5 <port_0>
//timer_1_Init();
stop_1_Timer();
    217c:	0e 94 25 25 	call	0x4a4a	; 0x4a4a <stop_1_Timer>
TCNT1=0;//my cod		
    2180:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    2184:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
frame[indexBuf] = cChar;//my cod
    2188:	e0 91 b5 07 	lds	r30, 0x07B5	; 0x8007b5 <indexBuf>
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	e8 52       	subi	r30, 0x28	; 40
    2190:	f8 4f       	sbci	r31, 0xF8	; 248
    2192:	c0 83       	st	Z, r28
indexBuf++;//my cod
    2194:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <indexBuf>
    2198:	8f 5f       	subi	r24, 0xFF	; 255
    219a:	80 93 b5 07 	sts	0x07B5, r24	; 0x8007b5 <indexBuf>
if(indexBuf == portSERIAL_BUFFER_RX ) overflow=1;//my cod
    219e:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <indexBuf>
    21a2:	8f 3f       	cpi	r24, 0xFF	; 255
    21a4:	19 f4       	brne	.+6      	; 0x21ac <__vector_25+0x8e>
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <overflow>
start_1_Timer();//my cod
    21ac:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <start_1_Timer>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	0f 92       	push	r0
	{
	    count = buffer->count;
    21b6:	ef e6       	ldi	r30, 0x6F	; 111
    21b8:	f7 e0       	ldi	r31, 0x07	; 7
    21ba:	21 81       	ldd	r18, Z+1	; 0x01
    21bc:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    21be:	0f 90       	pop	r0
    21c0:	0f be       	out	0x3f, r0	; 63
}
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerialPort.xRxedChars) ) )
    21c2:	83 85       	ldd	r24, Z+11	; 0x0b
    21c4:	94 85       	ldd	r25, Z+12	; 0x0c
    21c6:	28 17       	cp	r18, r24
    21c8:	39 07       	cpc	r19, r25
    21ca:	e9 f0       	breq	.+58     	; 0x2206 <__stack+0x7>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    21cc:	e0 e7       	ldi	r30, 0x70	; 112
    21ce:	f7 e0       	ldi	r31, 0x07	; 7

	*buffer->in = data;
    21d0:	a2 81       	ldd	r26, Z+2	; 0x02
    21d2:	b3 81       	ldd	r27, Z+3	; 0x03
    21d4:	cc 93       	st	X, r28

	if (++buffer->in == buffer->end)
    21d6:	82 81       	ldd	r24, Z+2	; 0x02
    21d8:	93 81       	ldd	r25, Z+3	; 0x03
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	93 83       	std	Z+3, r25	; 0x03
    21de:	82 83       	std	Z+2, r24	; 0x02
    21e0:	20 85       	ldd	r18, Z+8	; 0x08
    21e2:	31 85       	ldd	r19, Z+9	; 0x09
    21e4:	82 17       	cp	r24, r18
    21e6:	93 07       	cpc	r25, r19
    21e8:	21 f4       	brne	.+8      	; 0x21f2 <__vector_25+0xd4>
	  buffer->in = buffer->start;
    21ea:	86 81       	ldd	r24, Z+6	; 0x06
    21ec:	97 81       	ldd	r25, Z+7	; 0x07
    21ee:	93 83       	std	Z+3, r25	; 0x03
    21f0:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	0f 92       	push	r0
	{
	    buffer->count++;
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	01 96       	adiw	r24, 0x01	; 1
    21fe:	91 83       	std	Z+1, r25	; 0x01
    2200:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    2202:	0f 90       	pop	r0
    2204:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerialPort.xRxedChars), cChar);
	}
}
    2206:	ff 91       	pop	r31
    2208:	ef 91       	pop	r30
    220a:	cf 91       	pop	r28
    220c:	bf 91       	pop	r27
    220e:	af 91       	pop	r26
    2210:	9f 91       	pop	r25
    2212:	8f 91       	pop	r24
    2214:	7f 91       	pop	r23
    2216:	6f 91       	pop	r22
    2218:	5f 91       	pop	r21
    221a:	4f 91       	pop	r20
    221c:	3f 91       	pop	r19
    221e:	2f 91       	pop	r18
    2220:	0f 90       	pop	r0
    2222:	0b be       	out	0x3b, r0	; 59
    2224:	0f 90       	pop	r0
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	0f 90       	pop	r0
    222a:	1f 90       	pop	r1
    222c:	18 95       	reti

0000222e <__vector_26>:
#elif defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
ISR( USART0_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART0_UDRE_vect )

#endif
{
    222e:	1f 92       	push	r1
    2230:	0f 92       	push	r0
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	0f 92       	push	r0
    2236:	11 24       	eor	r1, r1
    2238:	0b b6       	in	r0, 0x3b	; 59
    223a:	0f 92       	push	r0
    223c:	2f 93       	push	r18
    223e:	8f 93       	push	r24
    2240:	9f 93       	push	r25
    2242:	af 93       	push	r26
    2244:	bf 93       	push	r27
    2246:	ef 93       	push	r30
    2248:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	0f 92       	push	r0
	{
	    count = buffer->count;
    2250:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <xSerialPort+0xd>
    2254:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <xSerialPort+0xe>
	}
	portEXIT_CRITICAL();
    2258:	0f 90       	pop	r0
    225a:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerialPort.xCharsForTx) ) )
    225c:	89 2b       	or	r24, r25
    225e:	31 f4       	brne	.+12     	; 0x226c <__vector_26+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt0_Off();
    2260:	e1 ec       	ldi	r30, 0xC1	; 193
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	8f 7d       	andi	r24, 0xDF	; 223
    2268:	80 83       	st	Z, r24
    226a:	1c c0       	rjmp	.+56     	; 0x22a4 <__vector_26+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    226c:	ec e7       	ldi	r30, 0x7C	; 124
    226e:	f7 e0       	ldi	r31, 0x07	; 7

	uint8_t data = *buffer->out;
    2270:	a4 81       	ldd	r26, Z+4	; 0x04
    2272:	b5 81       	ldd	r27, Z+5	; 0x05
    2274:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    2276:	b5 83       	std	Z+5, r27	; 0x05
    2278:	a4 83       	std	Z+4, r26	; 0x04
    227a:	80 85       	ldd	r24, Z+8	; 0x08
    227c:	91 85       	ldd	r25, Z+9	; 0x09
    227e:	a8 17       	cp	r26, r24
    2280:	b9 07       	cpc	r27, r25
    2282:	21 f4       	brne	.+8      	; 0x228c <__vector_26+0x5e>
	  buffer->out = buffer->start;
    2284:	86 81       	ldd	r24, Z+6	; 0x06
    2286:	97 81       	ldd	r25, Z+7	; 0x07
    2288:	95 83       	std	Z+5, r25	; 0x05
    228a:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	0f 92       	push	r0
	{
	    buffer->count--;
    2292:	80 81       	ld	r24, Z
    2294:	91 81       	ldd	r25, Z+1	; 0x01
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    229c:	0f 90       	pop	r0
    229e:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR0 = ringBuffer_Pop( (ringBuffer_t*) &(xSerialPort.xCharsForTx) );
    22a0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    22a4:	ff 91       	pop	r31
    22a6:	ef 91       	pop	r30
    22a8:	bf 91       	pop	r27
    22aa:	af 91       	pop	r26
    22ac:	9f 91       	pop	r25
    22ae:	8f 91       	pop	r24
    22b0:	2f 91       	pop	r18
    22b2:	0f 90       	pop	r0
    22b4:	0b be       	out	0x3b, r0	; 59
    22b6:	0f 90       	pop	r0
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	0f 90       	pop	r0
    22bc:	1f 90       	pop	r1
    22be:	18 95       	reti

000022c0 <__vector_36>:

#if defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

ISR( USART1_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART1_RX_vect )
{
    22c0:	1f 92       	push	r1
    22c2:	0f 92       	push	r0
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	0f 92       	push	r0
    22c8:	11 24       	eor	r1, r1
    22ca:	0b b6       	in	r0, 0x3b	; 59
    22cc:	0f 92       	push	r0
    22ce:	2f 93       	push	r18
    22d0:	3f 93       	push	r19
    22d2:	4f 93       	push	r20
    22d4:	8f 93       	push	r24
    22d6:	9f 93       	push	r25
    22d8:	af 93       	push	r26
    22da:	bf 93       	push	r27
    22dc:	ef 93       	push	r30
    22de:	ff 93       	push	r31
	/* Get status and data from buffer */
     
	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR1A &  (_BV(FE1)|_BV(DOR1)|_BV(UPE1)) ) )
    22e0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    22e4:	8c 71       	andi	r24, 0x1C	; 28
    22e6:	71 f0       	breq	.+28     	; 0x2304 <__vector_36+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR1A & (1<<RXC1) ) erroredByte = UDR1;
    22e8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    22ec:	88 23       	and	r24, r24
    22ee:	0c f0       	brlt	.+2      	; 0x22f2 <__vector_36+0x32>
    22f0:	36 c0       	rjmp	.+108    	; 0x235e <__vector_36+0x9e>
    22f2:	ae ec       	ldi	r26, 0xCE	; 206
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e8 ec       	ldi	r30, 0xC8	; 200
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	8c 91       	ld	r24, X
    22fc:	80 81       	ld	r24, Z
    22fe:	88 23       	and	r24, r24
    2300:	e4 f3       	brlt	.-8      	; 0x22fa <__vector_36+0x3a>
    2302:	2d c0       	rjmp	.+90     	; 0x235e <__vector_36+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR1;
    2304:	40 91 ce 00 	lds	r20, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	0f 92       	push	r0
	{
	    count = buffer->count;
    230e:	e7 ed       	ldi	r30, 0xD7	; 215
    2310:	f8 e0       	ldi	r31, 0x08	; 8
    2312:	21 81       	ldd	r18, Z+1	; 0x01
    2314:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2316:	0f 90       	pop	r0
    2318:	0f be       	out	0x3f, r0	; 63
				
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial1Port.xRxedChars) ) )
    231a:	83 85       	ldd	r24, Z+11	; 0x0b
    231c:	94 85       	ldd	r25, Z+12	; 0x0c
    231e:	28 17       	cp	r18, r24
    2320:	39 07       	cpc	r19, r25
    2322:	e9 f0       	breq	.+58     	; 0x235e <__vector_36+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    2324:	e8 ed       	ldi	r30, 0xD8	; 216
    2326:	f8 e0       	ldi	r31, 0x08	; 8

	*buffer->in = data;
    2328:	a2 81       	ldd	r26, Z+2	; 0x02
    232a:	b3 81       	ldd	r27, Z+3	; 0x03
    232c:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	01 96       	adiw	r24, 0x01	; 1
    2334:	93 83       	std	Z+3, r25	; 0x03
    2336:	82 83       	std	Z+2, r24	; 0x02
    2338:	20 85       	ldd	r18, Z+8	; 0x08
    233a:	31 85       	ldd	r19, Z+9	; 0x09
    233c:	82 17       	cp	r24, r18
    233e:	93 07       	cpc	r25, r19
    2340:	21 f4       	brne	.+8      	; 0x234a <__vector_36+0x8a>
	  buffer->in = buffer->start;
    2342:	86 81       	ldd	r24, Z+6	; 0x06
    2344:	97 81       	ldd	r25, Z+7	; 0x07
    2346:	93 83       	std	Z+3, r25	; 0x03
    2348:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	0f 92       	push	r0
	{
	    buffer->count++;
    2350:	80 81       	ld	r24, Z
    2352:	91 81       	ldd	r25, Z+1	; 0x01
    2354:	01 96       	adiw	r24, 0x01	; 1
    2356:	91 83       	std	Z+1, r25	; 0x01
    2358:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    235a:	0f 90       	pop	r0
    235c:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial1Port.xRxedChars), cChar);
			
	}
}
    235e:	ff 91       	pop	r31
    2360:	ef 91       	pop	r30
    2362:	bf 91       	pop	r27
    2364:	af 91       	pop	r26
    2366:	9f 91       	pop	r25
    2368:	8f 91       	pop	r24
    236a:	4f 91       	pop	r20
    236c:	3f 91       	pop	r19
    236e:	2f 91       	pop	r18
    2370:	0f 90       	pop	r0
    2372:	0b be       	out	0x3b, r0	; 59
    2374:	0f 90       	pop	r0
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	0f 90       	pop	r0
    237a:	1f 90       	pop	r1
    237c:	18 95       	reti

0000237e <__vector_37>:
/*-----------------------------------------------------------*/

ISR( USART1_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART1_UDRE_vect )
{
    237e:	1f 92       	push	r1
    2380:	0f 92       	push	r0
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	0f 92       	push	r0
    2386:	11 24       	eor	r1, r1
    2388:	0b b6       	in	r0, 0x3b	; 59
    238a:	0f 92       	push	r0
    238c:	2f 93       	push	r18
    238e:	8f 93       	push	r24
    2390:	9f 93       	push	r25
    2392:	af 93       	push	r26
    2394:	bf 93       	push	r27
    2396:	ef 93       	push	r30
    2398:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	0f 92       	push	r0
	{
	    count = buffer->count;
    23a0:	80 91 e4 08 	lds	r24, 0x08E4	; 0x8008e4 <xSerial1Port+0xd>
    23a4:	90 91 e5 08 	lds	r25, 0x08E5	; 0x8008e5 <xSerial1Port+0xe>
	}
	portEXIT_CRITICAL();
    23a8:	0f 90       	pop	r0
    23aa:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) ) )
    23ac:	89 2b       	or	r24, r25
    23ae:	31 f4       	brne	.+12     	; 0x23bc <__vector_37+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt1_Off();
    23b0:	e9 ec       	ldi	r30, 0xC9	; 201
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	8f 7d       	andi	r24, 0xDF	; 223
    23b8:	80 83       	st	Z, r24
    23ba:	1c c0       	rjmp	.+56     	; 0x23f4 <__vector_37+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    23bc:	e4 ee       	ldi	r30, 0xE4	; 228
    23be:	f8 e0       	ldi	r31, 0x08	; 8

	uint8_t data = *buffer->out;
    23c0:	a4 81       	ldd	r26, Z+4	; 0x04
    23c2:	b5 81       	ldd	r27, Z+5	; 0x05
    23c4:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    23c6:	b5 83       	std	Z+5, r27	; 0x05
    23c8:	a4 83       	std	Z+4, r26	; 0x04
    23ca:	80 85       	ldd	r24, Z+8	; 0x08
    23cc:	91 85       	ldd	r25, Z+9	; 0x09
    23ce:	a8 17       	cp	r26, r24
    23d0:	b9 07       	cpc	r27, r25
    23d2:	21 f4       	brne	.+8      	; 0x23dc <__vector_37+0x5e>
	  buffer->out = buffer->start;
    23d4:	86 81       	ldd	r24, Z+6	; 0x06
    23d6:	97 81       	ldd	r25, Z+7	; 0x07
    23d8:	95 83       	std	Z+5, r25	; 0x05
    23da:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	0f 92       	push	r0
	{
	    buffer->count--;
    23e2:	80 81       	ld	r24, Z
    23e4:	91 81       	ldd	r25, Z+1	; 0x01
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	91 83       	std	Z+1, r25	; 0x01
    23ea:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    23ec:	0f 90       	pop	r0
    23ee:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR1 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) );
    23f0:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
	}
}
    23f4:	ff 91       	pop	r31
    23f6:	ef 91       	pop	r30
    23f8:	bf 91       	pop	r27
    23fa:	af 91       	pop	r26
    23fc:	9f 91       	pop	r25
    23fe:	8f 91       	pop	r24
    2400:	2f 91       	pop	r18
    2402:	0f 90       	pop	r0
    2404:	0b be       	out	0x3b, r0	; 59
    2406:	0f 90       	pop	r0
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	0f 90       	pop	r0
    240c:	1f 90       	pop	r1
    240e:	18 95       	reti

00002410 <__vector_51>:

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

ISR( USART2_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART2_RX_vect )
{
    2410:	1f 92       	push	r1
    2412:	0f 92       	push	r0
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	0f 92       	push	r0
    2418:	11 24       	eor	r1, r1
    241a:	0b b6       	in	r0, 0x3b	; 59
    241c:	0f 92       	push	r0
    241e:	2f 93       	push	r18
    2420:	3f 93       	push	r19
    2422:	4f 93       	push	r20
    2424:	8f 93       	push	r24
    2426:	9f 93       	push	r25
    2428:	af 93       	push	r26
    242a:	bf 93       	push	r27
    242c:	ef 93       	push	r30
    242e:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR2A & (_BV(FE2)|_BV(DOR2)|_BV(UPE2)) ) )
    2430:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    2434:	8c 71       	andi	r24, 0x1C	; 28
    2436:	71 f0       	breq	.+28     	; 0x2454 <__vector_51+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR2A & (1<<RXC2) ) erroredByte = UDR2;
    2438:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    243c:	88 23       	and	r24, r24
    243e:	0c f0       	brlt	.+2      	; 0x2442 <__vector_51+0x32>
    2440:	36 c0       	rjmp	.+108    	; 0x24ae <__vector_51+0x9e>
    2442:	a6 ed       	ldi	r26, 0xD6	; 214
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e0 ed       	ldi	r30, 0xD0	; 208
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	8c 91       	ld	r24, X
    244c:	80 81       	ld	r24, Z
    244e:	88 23       	and	r24, r24
    2450:	e4 f3       	brlt	.-8      	; 0x244a <__vector_51+0x3a>
    2452:	2d c0       	rjmp	.+90     	; 0x24ae <__vector_51+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR2;
    2454:	40 91 d6 00 	lds	r20, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	0f 92       	push	r0
	{
	    count = buffer->count;
    245e:	e3 e9       	ldi	r30, 0x93	; 147
    2460:	f7 e0       	ldi	r31, 0x07	; 7
    2462:	21 81       	ldd	r18, Z+1	; 0x01
    2464:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2466:	0f 90       	pop	r0
    2468:	0f be       	out	0x3f, r0	; 63

		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial2Port.xRxedChars) ) )
    246a:	83 85       	ldd	r24, Z+11	; 0x0b
    246c:	94 85       	ldd	r25, Z+12	; 0x0c
    246e:	28 17       	cp	r18, r24
    2470:	39 07       	cpc	r19, r25
    2472:	e9 f0       	breq	.+58     	; 0x24ae <__vector_51+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    2474:	e4 e9       	ldi	r30, 0x94	; 148
    2476:	f7 e0       	ldi	r31, 0x07	; 7

	*buffer->in = data;
    2478:	a2 81       	ldd	r26, Z+2	; 0x02
    247a:	b3 81       	ldd	r27, Z+3	; 0x03
    247c:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	93 81       	ldd	r25, Z+3	; 0x03
    2482:	01 96       	adiw	r24, 0x01	; 1
    2484:	93 83       	std	Z+3, r25	; 0x03
    2486:	82 83       	std	Z+2, r24	; 0x02
    2488:	20 85       	ldd	r18, Z+8	; 0x08
    248a:	31 85       	ldd	r19, Z+9	; 0x09
    248c:	82 17       	cp	r24, r18
    248e:	93 07       	cpc	r25, r19
    2490:	21 f4       	brne	.+8      	; 0x249a <__vector_51+0x8a>
	  buffer->in = buffer->start;
    2492:	86 81       	ldd	r24, Z+6	; 0x06
    2494:	97 81       	ldd	r25, Z+7	; 0x07
    2496:	93 83       	std	Z+3, r25	; 0x03
    2498:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	0f 92       	push	r0
	{
	    buffer->count++;
    24a0:	80 81       	ld	r24, Z
    24a2:	91 81       	ldd	r25, Z+1	; 0x01
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    24aa:	0f 90       	pop	r0
    24ac:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial2Port.xRxedChars), cChar);
	}
}
    24ae:	ff 91       	pop	r31
    24b0:	ef 91       	pop	r30
    24b2:	bf 91       	pop	r27
    24b4:	af 91       	pop	r26
    24b6:	9f 91       	pop	r25
    24b8:	8f 91       	pop	r24
    24ba:	4f 91       	pop	r20
    24bc:	3f 91       	pop	r19
    24be:	2f 91       	pop	r18
    24c0:	0f 90       	pop	r0
    24c2:	0b be       	out	0x3b, r0	; 59
    24c4:	0f 90       	pop	r0
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	0f 90       	pop	r0
    24ca:	1f 90       	pop	r1
    24cc:	18 95       	reti

000024ce <__vector_52>:
/*-----------------------------------------------------------*/

ISR( USART2_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART2_UDRE_vect )
{
    24ce:	1f 92       	push	r1
    24d0:	0f 92       	push	r0
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	0f 92       	push	r0
    24d6:	11 24       	eor	r1, r1
    24d8:	0b b6       	in	r0, 0x3b	; 59
    24da:	0f 92       	push	r0
    24dc:	2f 93       	push	r18
    24de:	8f 93       	push	r24
    24e0:	9f 93       	push	r25
    24e2:	af 93       	push	r26
    24e4:	bf 93       	push	r27
    24e6:	ef 93       	push	r30
    24e8:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	0f 92       	push	r0
	{
	    count = buffer->count;
    24f0:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <xSerial2Port+0xd>
    24f4:	90 91 a1 07 	lds	r25, 0x07A1	; 0x8007a1 <xSerial2Port+0xe>
	}
	portEXIT_CRITICAL();
    24f8:	0f 90       	pop	r0
    24fa:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) ) )
    24fc:	89 2b       	or	r24, r25
    24fe:	31 f4       	brne	.+12     	; 0x250c <__vector_52+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt2_Off();
    2500:	e1 ed       	ldi	r30, 0xD1	; 209
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	8f 7d       	andi	r24, 0xDF	; 223
    2508:	80 83       	st	Z, r24
    250a:	1c c0       	rjmp	.+56     	; 0x2544 <__vector_52+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    250c:	e0 ea       	ldi	r30, 0xA0	; 160
    250e:	f7 e0       	ldi	r31, 0x07	; 7

	uint8_t data = *buffer->out;
    2510:	a4 81       	ldd	r26, Z+4	; 0x04
    2512:	b5 81       	ldd	r27, Z+5	; 0x05
    2514:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    2516:	b5 83       	std	Z+5, r27	; 0x05
    2518:	a4 83       	std	Z+4, r26	; 0x04
    251a:	80 85       	ldd	r24, Z+8	; 0x08
    251c:	91 85       	ldd	r25, Z+9	; 0x09
    251e:	a8 17       	cp	r26, r24
    2520:	b9 07       	cpc	r27, r25
    2522:	21 f4       	brne	.+8      	; 0x252c <__vector_52+0x5e>
	  buffer->out = buffer->start;
    2524:	86 81       	ldd	r24, Z+6	; 0x06
    2526:	97 81       	ldd	r25, Z+7	; 0x07
    2528:	95 83       	std	Z+5, r25	; 0x05
    252a:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	0f 92       	push	r0
	{
	    buffer->count--;
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	91 83       	std	Z+1, r25	; 0x01
    253a:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    253c:	0f 90       	pop	r0
    253e:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR2 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) );
    2540:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	}
}
    2544:	ff 91       	pop	r31
    2546:	ef 91       	pop	r30
    2548:	bf 91       	pop	r27
    254a:	af 91       	pop	r26
    254c:	9f 91       	pop	r25
    254e:	8f 91       	pop	r24
    2550:	2f 91       	pop	r18
    2552:	0f 90       	pop	r0
    2554:	0b be       	out	0x3b, r0	; 59
    2556:	0f 90       	pop	r0
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	0f 90       	pop	r0
    255c:	1f 90       	pop	r1
    255e:	18 95       	reti

00002560 <__vector_54>:
/*-----------------------------------------------------------*/

ISR( USART3_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART3_RX_vect )
{
    2560:	1f 92       	push	r1
    2562:	0f 92       	push	r0
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	0f 92       	push	r0
    2568:	11 24       	eor	r1, r1
    256a:	0b b6       	in	r0, 0x3b	; 59
    256c:	0f 92       	push	r0
    256e:	2f 93       	push	r18
    2570:	3f 93       	push	r19
    2572:	4f 93       	push	r20
    2574:	5f 93       	push	r21
    2576:	6f 93       	push	r22
    2578:	7f 93       	push	r23
    257a:	8f 93       	push	r24
    257c:	9f 93       	push	r25
    257e:	af 93       	push	r26
    2580:	bf 93       	push	r27
    2582:	cf 93       	push	r28
    2584:	ef 93       	push	r30
    2586:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR3A & (_BV(FE3)|_BV(DOR3)|_BV(UPE3)) ) )
    2588:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    258c:	8c 71       	andi	r24, 0x1C	; 28
    258e:	71 f0       	breq	.+28     	; 0x25ac <__vector_54+0x4c>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR3A & (1<<RXC3) ) erroredByte = UDR3;
    2590:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2594:	88 23       	and	r24, r24
    2596:	0c f0       	brlt	.+2      	; 0x259a <__vector_54+0x3a>
    2598:	57 c0       	rjmp	.+174    	; 0x2648 <__vector_54+0xe8>
    259a:	a6 e3       	ldi	r26, 0x36	; 54
    259c:	b1 e0       	ldi	r27, 0x01	; 1
    259e:	e0 e3       	ldi	r30, 0x30	; 48
    25a0:	f1 e0       	ldi	r31, 0x01	; 1
    25a2:	8c 91       	ld	r24, X
    25a4:	80 81       	ld	r24, Z
    25a6:	88 23       	and	r24, r24
    25a8:	e4 f3       	brlt	.-8      	; 0x25a2 <__vector_54+0x42>
    25aa:	4e c0       	rjmp	.+156    	; 0x2648 <__vector_54+0xe8>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR3;
    25ac:	c0 91 36 01 	lds	r28, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		
	//xSerialxPrintf(&xSerial3Port,"interrupt\r\n");	
if(!port_0)
    25b0:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <port_0>
    25b4:	81 11       	cpse	r24, r1
    25b6:	1d c0       	rjmp	.+58     	; 0x25f2 <__vector_54+0x92>
{			//xSerialxPrintf(&xSerial3Port,"port_3\r\n");
			port_3=true;
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	80 93 17 09 	sts	0x0917, r24	; 0x800917 <port_3>
			//timer_1_Init();
			stop_1_Timer();
    25be:	0e 94 25 25 	call	0x4a4a	; 0x4a4a <stop_1_Timer>
			TCNT1=0;//my cod
    25c2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    25c6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
			frame[indexBuf] = cChar;//my cod
    25ca:	e0 91 b5 07 	lds	r30, 0x07B5	; 0x8007b5 <indexBuf>
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	e8 52       	subi	r30, 0x28	; 40
    25d2:	f8 4f       	sbci	r31, 0xF8	; 248
    25d4:	c0 83       	st	Z, r28
			indexBuf++;//my cod
    25d6:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <indexBuf>
    25da:	8f 5f       	subi	r24, 0xFF	; 255
    25dc:	80 93 b5 07 	sts	0x07B5, r24	; 0x8007b5 <indexBuf>
			if(indexBuf == portSERIAL_BUFFER_RX ) overflow=1;//my cod
    25e0:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <indexBuf>
    25e4:	8f 3f       	cpi	r24, 0xFF	; 255
    25e6:	19 f4       	brne	.+6      	; 0x25ee <__vector_54+0x8e>
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <overflow>
			start_1_Timer();//my cod
    25ee:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <start_1_Timer>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	0f 92       	push	r0
	{
	    count = buffer->count;
    25f8:	e6 eb       	ldi	r30, 0xB6	; 182
    25fa:	f7 e0       	ldi	r31, 0x07	; 7
    25fc:	21 81       	ldd	r18, Z+1	; 0x01
    25fe:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2600:	0f 90       	pop	r0
    2602:	0f be       	out	0x3f, r0	; 63
}
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial3Port.xRxedChars) ) )
    2604:	83 85       	ldd	r24, Z+11	; 0x0b
    2606:	94 85       	ldd	r25, Z+12	; 0x0c
    2608:	28 17       	cp	r18, r24
    260a:	39 07       	cpc	r19, r25
    260c:	e9 f0       	breq	.+58     	; 0x2648 <__vector_54+0xe8>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    260e:	e7 eb       	ldi	r30, 0xB7	; 183
    2610:	f7 e0       	ldi	r31, 0x07	; 7

	*buffer->in = data;
    2612:	a2 81       	ldd	r26, Z+2	; 0x02
    2614:	b3 81       	ldd	r27, Z+3	; 0x03
    2616:	cc 93       	st	X, r28

	if (++buffer->in == buffer->end)
    2618:	82 81       	ldd	r24, Z+2	; 0x02
    261a:	93 81       	ldd	r25, Z+3	; 0x03
    261c:	01 96       	adiw	r24, 0x01	; 1
    261e:	93 83       	std	Z+3, r25	; 0x03
    2620:	82 83       	std	Z+2, r24	; 0x02
    2622:	20 85       	ldd	r18, Z+8	; 0x08
    2624:	31 85       	ldd	r19, Z+9	; 0x09
    2626:	82 17       	cp	r24, r18
    2628:	93 07       	cpc	r25, r19
    262a:	21 f4       	brne	.+8      	; 0x2634 <__vector_54+0xd4>
	  buffer->in = buffer->start;
    262c:	86 81       	ldd	r24, Z+6	; 0x06
    262e:	97 81       	ldd	r25, Z+7	; 0x07
    2630:	93 83       	std	Z+3, r25	; 0x03
    2632:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	0f 92       	push	r0
	{
	    buffer->count++;
    263a:	80 81       	ld	r24, Z
    263c:	91 81       	ldd	r25, Z+1	; 0x01
    263e:	01 96       	adiw	r24, 0x01	; 1
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    2644:	0f 90       	pop	r0
    2646:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial3Port.xRxedChars), cChar);
	}
}
    2648:	ff 91       	pop	r31
    264a:	ef 91       	pop	r30
    264c:	cf 91       	pop	r28
    264e:	bf 91       	pop	r27
    2650:	af 91       	pop	r26
    2652:	9f 91       	pop	r25
    2654:	8f 91       	pop	r24
    2656:	7f 91       	pop	r23
    2658:	6f 91       	pop	r22
    265a:	5f 91       	pop	r21
    265c:	4f 91       	pop	r20
    265e:	3f 91       	pop	r19
    2660:	2f 91       	pop	r18
    2662:	0f 90       	pop	r0
    2664:	0b be       	out	0x3b, r0	; 59
    2666:	0f 90       	pop	r0
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	0f 90       	pop	r0
    266c:	1f 90       	pop	r1
    266e:	18 95       	reti

00002670 <__vector_55>:
/*-----------------------------------------------------------*/

ISR( USART3_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART3_UDRE_vect )
{
    2670:	1f 92       	push	r1
    2672:	0f 92       	push	r0
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	0f 92       	push	r0
    2678:	11 24       	eor	r1, r1
    267a:	0b b6       	in	r0, 0x3b	; 59
    267c:	0f 92       	push	r0
    267e:	2f 93       	push	r18
    2680:	8f 93       	push	r24
    2682:	9f 93       	push	r25
    2684:	af 93       	push	r26
    2686:	bf 93       	push	r27
    2688:	ef 93       	push	r30
    268a:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	0f 92       	push	r0
	{
	    count = buffer->count;
    2692:	80 91 c3 07 	lds	r24, 0x07C3	; 0x8007c3 <xSerial3Port+0xd>
    2696:	90 91 c4 07 	lds	r25, 0x07C4	; 0x8007c4 <xSerial3Port+0xe>
	}
	portEXIT_CRITICAL();
    269a:	0f 90       	pop	r0
    269c:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) ) )
    269e:	89 2b       	or	r24, r25
    26a0:	31 f4       	brne	.+12     	; 0x26ae <__vector_55+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt3_Off();
    26a2:	e1 e3       	ldi	r30, 0x31	; 49
    26a4:	f1 e0       	ldi	r31, 0x01	; 1
    26a6:	80 81       	ld	r24, Z
    26a8:	8f 7d       	andi	r24, 0xDF	; 223
    26aa:	80 83       	st	Z, r24
    26ac:	1c c0       	rjmp	.+56     	; 0x26e6 <__vector_55+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    26ae:	e3 ec       	ldi	r30, 0xC3	; 195
    26b0:	f7 e0       	ldi	r31, 0x07	; 7

	uint8_t data = *buffer->out;
    26b2:	a4 81       	ldd	r26, Z+4	; 0x04
    26b4:	b5 81       	ldd	r27, Z+5	; 0x05
    26b6:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    26b8:	b5 83       	std	Z+5, r27	; 0x05
    26ba:	a4 83       	std	Z+4, r26	; 0x04
    26bc:	80 85       	ldd	r24, Z+8	; 0x08
    26be:	91 85       	ldd	r25, Z+9	; 0x09
    26c0:	a8 17       	cp	r26, r24
    26c2:	b9 07       	cpc	r27, r25
    26c4:	21 f4       	brne	.+8      	; 0x26ce <__vector_55+0x5e>
	  buffer->out = buffer->start;
    26c6:	86 81       	ldd	r24, Z+6	; 0x06
    26c8:	97 81       	ldd	r25, Z+7	; 0x07
    26ca:	95 83       	std	Z+5, r25	; 0x05
    26cc:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	0f 92       	push	r0
	{
	    buffer->count--;
    26d4:	80 81       	ld	r24, Z
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    26de:	0f 90       	pop	r0
    26e0:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR3 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) );
    26e2:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	}
}
    26e6:	ff 91       	pop	r31
    26e8:	ef 91       	pop	r30
    26ea:	bf 91       	pop	r27
    26ec:	af 91       	pop	r26
    26ee:	9f 91       	pop	r25
    26f0:	8f 91       	pop	r24
    26f2:	2f 91       	pop	r18
    26f4:	0f 90       	pop	r0
    26f6:	0b be       	out	0x3b, r0	; 59
    26f8:	0f 90       	pop	r0
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	0f 90       	pop	r0
    26fe:	1f 90       	pop	r1
    2700:	18 95       	reti

00002702 <spiBegin>:
	SPCR |= _BV(SPIE);
}

void spiDetachInterrupt(void)
{
	SPCR &= ~_BV(SPIE);
    2702:	0f 93       	push	r16
    2704:	81 30       	cpi	r24, 0x01	; 1
    2706:	71 f0       	breq	.+28     	; 0x2724 <spiBegin+0x22>
    2708:	18 f0       	brcs	.+6      	; 0x2710 <spiBegin+0xe>
    270a:	82 30       	cpi	r24, 0x02	; 2
    270c:	a9 f0       	breq	.+42     	; 0x2738 <spiBegin+0x36>
    270e:	26 c0       	rjmp	.+76     	; 0x275c <spiBegin+0x5a>
    2710:	84 b1       	in	r24, 0x04	; 4
    2712:	87 60       	ori	r24, 0x07	; 7
    2714:	84 b9       	out	0x04, r24	; 4
    2716:	23 98       	cbi	0x04, 3	; 4
    2718:	85 b1       	in	r24, 0x05	; 5
    271a:	89 60       	ori	r24, 0x09	; 9
    271c:	85 b9       	out	0x05, r24	; 5
    271e:	24 9a       	sbi	0x04, 4	; 4
    2720:	2c 9a       	sbi	0x05, 4	; 5
    2722:	23 c0       	rjmp	.+70     	; 0x276a <spiBegin+0x68>
    2724:	84 b1       	in	r24, 0x04	; 4
    2726:	87 60       	ori	r24, 0x07	; 7
    2728:	84 b9       	out	0x04, r24	; 4
    272a:	23 98       	cbi	0x04, 3	; 4
    272c:	85 b1       	in	r24, 0x05	; 5
    272e:	89 60       	ori	r24, 0x09	; 9
    2730:	85 b9       	out	0x05, r24	; 5
    2732:	9d 9a       	sbi	0x13, 5	; 19
    2734:	a5 9a       	sbi	0x14, 5	; 20
    2736:	19 c0       	rjmp	.+50     	; 0x276a <spiBegin+0x68>
    2738:	84 b1       	in	r24, 0x04	; 4
    273a:	87 60       	ori	r24, 0x07	; 7
    273c:	84 b9       	out	0x04, r24	; 4
    273e:	23 98       	cbi	0x04, 3	; 4
    2740:	85 b1       	in	r24, 0x05	; 5
    2742:	89 60       	ori	r24, 0x09	; 9
    2744:	85 b9       	out	0x05, r24	; 5
    2746:	e1 e0       	ldi	r30, 0x01	; 1
    2748:	f1 e0       	ldi	r31, 0x01	; 1
    274a:	80 81       	ld	r24, Z
    274c:	80 62       	ori	r24, 0x20	; 32
    274e:	80 83       	st	Z, r24
    2750:	e2 e0       	ldi	r30, 0x02	; 2
    2752:	f1 e0       	ldi	r31, 0x01	; 1
    2754:	80 81       	ld	r24, Z
    2756:	80 62       	ori	r24, 0x20	; 32
    2758:	80 83       	st	Z, r24
    275a:	07 c0       	rjmp	.+14     	; 0x276a <spiBegin+0x68>
    275c:	84 b1       	in	r24, 0x04	; 4
    275e:	87 60       	ori	r24, 0x07	; 7
    2760:	84 b9       	out	0x04, r24	; 4
    2762:	23 98       	cbi	0x04, 3	; 4
    2764:	85 b1       	in	r24, 0x05	; 5
    2766:	89 60       	ori	r24, 0x09	; 9
    2768:	85 b9       	out	0x05, r24	; 5
    276a:	8c b5       	in	r24, 0x2c	; 44
    276c:	80 65       	ori	r24, 0x50	; 80
    276e:	8c bd       	out	0x2c, r24	; 44
    2770:	8d b5       	in	r24, 0x2d	; 45
    2772:	8e b5       	in	r24, 0x2e	; 46
    2774:	80 91 80 06 	lds	r24, 0x0680	; 0x800680 <__data_end>
    2778:	90 91 81 06 	lds	r25, 0x0681	; 0x800681 <__data_end+0x1>
    277c:	89 2b       	or	r24, r25
    277e:	89 f4       	brne	.+34     	; 0x27a2 <spiBegin+0xa0>
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	0e 94 75 0a 	call	0x14ea	; 0x14ea <xQueueCreateMutex>
    2786:	90 93 81 06 	sts	0x0681, r25	; 0x800681 <__data_end+0x1>
    278a:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <__data_end>
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	41 f0       	breq	.+16     	; 0x27a2 <spiBegin+0xa0>
    2792:	00 e0       	ldi	r16, 0x00	; 0
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	a9 01       	movw	r20, r18
    279a:	60 e0       	ldi	r22, 0x00	; 0
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    27a2:	0f 91       	pop	r16
    27a4:	08 95       	ret

000027a6 <spiSetClockDivider>:
    27a6:	9c b5       	in	r25, 0x2c	; 44
    27a8:	9c 7f       	andi	r25, 0xFC	; 252
    27aa:	28 2f       	mov	r18, r24
    27ac:	23 70       	andi	r18, 0x03	; 3
    27ae:	92 2b       	or	r25, r18
    27b0:	9c bd       	out	0x2c, r25	; 44
    27b2:	9d b5       	in	r25, 0x2d	; 45
    27b4:	82 fb       	bst	r24, 2
    27b6:	88 27       	eor	r24, r24
    27b8:	80 f9       	bld	r24, 0
    27ba:	9e 7f       	andi	r25, 0xFE	; 254
    27bc:	89 2b       	or	r24, r25
    27be:	8d bd       	out	0x2d, r24	; 45
    27c0:	08 95       	ret

000027c2 <spiSetBitOrder>:
    27c2:	81 11       	cpse	r24, r1
    27c4:	04 c0       	rjmp	.+8      	; 0x27ce <spiSetBitOrder+0xc>
    27c6:	8c b5       	in	r24, 0x2c	; 44
    27c8:	80 62       	ori	r24, 0x20	; 32
    27ca:	8c bd       	out	0x2c, r24	; 44
    27cc:	08 95       	ret
    27ce:	8c b5       	in	r24, 0x2c	; 44
    27d0:	8f 7d       	andi	r24, 0xDF	; 223
    27d2:	8c bd       	out	0x2c, r24	; 44
    27d4:	08 95       	ret

000027d6 <spiSetDataMode>:
    27d6:	9c b5       	in	r25, 0x2c	; 44
    27d8:	93 7f       	andi	r25, 0xF3	; 243
    27da:	89 2b       	or	r24, r25
    27dc:	8c bd       	out	0x2c, r24	; 44
    27de:	08 95       	ret

000027e0 <spiSelect>:
/*-----------------------------------------------------------------------*/
/* Select the SPI device                                    */
/*-----------------------------------------------------------------------*/

uint8_t spiSelect(SPI_SLAVE_SELECT SS_pin)	/* 1:Successful, 0:Timeout */
{
    27e0:	cf 93       	push	r28
    27e2:	c8 2f       	mov	r28, r24

	if( (xSemaphoreTake( xSPISemaphore, (SPI_TIMEOUT / portTICK_PERIOD_MS )) == pdTRUE ) )
    27e4:	48 ee       	ldi	r20, 0xE8	; 232
    27e6:	53 e0       	ldi	r21, 0x03	; 3
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	70 e0       	ldi	r23, 0x00	; 0
    27ec:	80 91 80 06 	lds	r24, 0x0680	; 0x800680 <__data_end>
    27f0:	90 91 81 06 	lds	r25, 0x0681	; 0x800681 <__data_end+0x1>
    27f4:	0e 94 8f 0b 	call	0x171e	; 0x171e <xQueueSemaphoreTake>
    27f8:	81 30       	cpi	r24, 0x01	; 1
    27fa:	b1 f4       	brne	.+44     	; 0x2828 <spiSelect+0x48>
	{

		switch( SS_pin )
    27fc:	c1 30       	cpi	r28, 0x01	; 1
    27fe:	39 f0       	breq	.+14     	; 0x280e <spiSelect+0x2e>
    2800:	18 f0       	brcs	.+6      	; 0x2808 <spiSelect+0x28>
    2802:	c2 30       	cpi	r28, 0x02	; 2
    2804:	39 f0       	breq	.+14     	; 0x2814 <spiSelect+0x34>
    2806:	0d c0       	rjmp	.+26     	; 0x2822 <spiSelect+0x42>
		{
		case Wiznet:	// added for EtherMega Wiznet 5100/5200 support
#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
			W5100_SEN_ENABLE(1); // Enable SEN, to get on the SPI bus. PORT D7
#endif
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
    2808:	2c 98       	cbi	0x05, 4	; 5
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    280a:	81 e0       	ldi	r24, 0x01	; 1
		case Wiznet:	// added for EtherMega Wiznet 5100/5200 support
#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
			W5100_SEN_ENABLE(1); // Enable SEN, to get on the SPI bus. PORT D7
#endif
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
			break;
    280c:	0e c0       	rjmp	.+28     	; 0x282a <spiSelect+0x4a>

		case SDCard:	// added for  SD Card support
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
    280e:	a5 98       	cbi	0x14, 5	; 20
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    2810:	81 e0       	ldi	r24, 0x01	; 1
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
			break;

		case SDCard:	// added for  SD Card support
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
			break;
    2812:	0b c0       	rjmp	.+22     	; 0x282a <spiSelect+0x4a>

		case Gameduino2:// added for Gameduino2 using FTDI FT800
			SPI_PORT_SS_G2 &= ~SPI_BIT_SS_G2; // Pull SS low to select the Gameduino 2.
    2814:	e2 e0       	ldi	r30, 0x02	; 2
    2816:	f1 e0       	ldi	r31, 0x01	; 1
    2818:	80 81       	ld	r24, Z
    281a:	8f 7d       	andi	r24, 0xDF	; 223
    281c:	80 83       	st	Z, r24
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    281e:	81 e0       	ldi	r24, 0x01	; 1
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
			break;

		case Gameduino2:// added for Gameduino2 using FTDI FT800
			SPI_PORT_SS_G2 &= ~SPI_BIT_SS_G2; // Pull SS low to select the Gameduino 2.
			break;
    2820:	04 c0       	rjmp	.+8      	; 0x282a <spiSelect+0x4a>
			break;
#endif

		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
    2822:	28 98       	cbi	0x05, 0	; 5
			break;
		}
		return 1;		// OK /
    2824:	81 e0       	ldi	r24, 0x01	; 1
#endif

		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
    2826:	01 c0       	rjmp	.+2      	; 0x282a <spiSelect+0x4a>
		}
		return 1;		// OK /
	}
	else
		return 0;		// Timeout
    2828:	80 e0       	ldi	r24, 0x00	; 0
}
    282a:	cf 91       	pop	r28
    282c:	08 95       	ret

0000282e <spiDeselect>:
/*-----------------------------------------------------------------------*/
/* Deselect the SPI device                                 */
/*-----------------------------------------------------------------------*/

void spiDeselect(SPI_SLAVE_SELECT SS_pin)
{
    282e:	0f 93       	push	r16
	// Pull SS high to Deselect the card.
	switch( SS_pin )
    2830:	81 30       	cpi	r24, 0x01	; 1
    2832:	31 f0       	breq	.+12     	; 0x2840 <spiDeselect+0x12>
    2834:	18 f0       	brcs	.+6      	; 0x283c <spiDeselect+0xe>
    2836:	82 30       	cpi	r24, 0x02	; 2
    2838:	29 f0       	breq	.+10     	; 0x2844 <spiDeselect+0x16>
    283a:	0a c0       	rjmp	.+20     	; 0x2850 <spiDeselect+0x22>
	{
	case Wiznet:		// added for EtherMega Wiznet 5100/5200 support
		SPI_PORT |= SPI_BIT_SS_WIZNET;
    283c:	2c 9a       	sbi	0x05, 4	; 5

#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
		W5100_SEN_ENABLE(0); // Disable SEN, to get off the SPI bus. PORT D7
#endif
		break;
    283e:	09 c0       	rjmp	.+18     	; 0x2852 <spiDeselect+0x24>

	case SDCard:		// added for  SD Card support
		SPI_PORT_SS_SD |= SPI_BIT_SS_SD;	// Pull SS high to deselect the uSD card.
    2840:	a5 9a       	sbi	0x14, 5	; 20
		break;
    2842:	07 c0       	rjmp	.+14     	; 0x2852 <spiDeselect+0x24>

	case Gameduino2:	// added for Gameduino 2 using FTDI FT800
		SPI_PORT_SS_G2 |= SPI_BIT_SS_G2;	// Pull SS high to deselect the Gameduino 2.
    2844:	e2 e0       	ldi	r30, 0x02	; 2
    2846:	f1 e0       	ldi	r31, 0x01	; 1
    2848:	80 81       	ld	r24, Z
    284a:	80 62       	ori	r24, 0x20	; 32
    284c:	80 83       	st	Z, r24
		break;
    284e:	01 c0       	rjmp	.+2      	; 0x2852 <spiDeselect+0x24>
		break;
#endif

	case Default:		// default SS line for Arduino Uno
	default:
		SPI_PORT |= SPI_BIT_SS;
    2850:	28 9a       	sbi	0x05, 0	; 5
		break;
	}

	xSemaphoreGive( xSPISemaphore );	/* Free FreeRTOS semaphore to allow other SPI access */
    2852:	00 e0       	ldi	r16, 0x00	; 0
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	a9 01       	movw	r20, r18
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	80 91 80 06 	lds	r24, 0x0680	; 0x800680 <__data_end>
    2862:	90 91 81 06 	lds	r25, 0x0681	; 0x800681 <__data_end+0x1>
    2866:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
}
    286a:	0f 91       	pop	r16
    286c:	08 95       	ret

0000286e <spiTransfer>:



uint8_t spiTransfer(uint8_t data)
{
    286e:	28 2f       	mov	r18, r24
	// That is NOT done by this function..., because...
	// Some devices need to have their SS held low across multiple transfer calls.
	// Using spiSelect (SS_pin);

	// If the SPI module has not been enabled yet, then return with nothing.
	if( !(SPCR & _BV(SPE)) ) return 0;
    2870:	9c b5       	in	r25, 0x2c	; 44
    2872:	89 2f       	mov	r24, r25
    2874:	80 74       	andi	r24, 0x40	; 64
    2876:	96 ff       	sbrs	r25, 6
    2878:	17 c0       	rjmp	.+46     	; 0x28a8 <spiTransfer+0x3a>

	// The SPI module is enabled, but it is in slave mode, so we can not
	// transmit the byte. This can happen if SSbar is an input and it went low.
	// We will try to recover by setting the MSTR bit.
	if( !(SPCR & _BV(MSTR)) )
    287a:	0c b4       	in	r0, 0x2c	; 44
    287c:	04 fc       	sbrc	r0, 4
    287e:	08 c0       	rjmp	.+16     	; 0x2890 <spiTransfer+0x22>
		{
			SPCR |= _BV(MSTR);
    2880:	8c b5       	in	r24, 0x2c	; 44
    2882:	80 61       	ori	r24, 0x10	; 16
    2884:	8c bd       	out	0x2c, r24	; 44
			if( !(SPCR & _BV(MSTR)) ) return 0;
    2886:	9c b5       	in	r25, 0x2c	; 44
    2888:	89 2f       	mov	r24, r25
    288a:	80 71       	andi	r24, 0x10	; 16
    288c:	94 ff       	sbrs	r25, 4
    288e:	0c c0       	rjmp	.+24     	; 0x28a8 <spiTransfer+0x3a>
		}

	SPDR = data; 	// Begin transmission
    2890:	2e bd       	out	0x2e, r18	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop from iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
	__asm__ __volatile__("nop");
    2892:	00 00       	nop

	while( !(SPSR & _BV(SPIF)) )
    2894:	05 c0       	rjmp	.+10     	; 0x28a0 <spiTransfer+0x32>
	{
		if( !(SPCR & _BV(MSTR)) ) return 0;
    2896:	9c b5       	in	r25, 0x2c	; 44
    2898:	89 2f       	mov	r24, r25
    289a:	80 71       	andi	r24, 0x10	; 16
    289c:	94 ff       	sbrs	r25, 4
    289e:	04 c0       	rjmp	.+8      	; 0x28a8 <spiTransfer+0x3a>
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
	__asm__ __volatile__("nop");

	while( !(SPSR & _BV(SPIF)) )
    28a0:	0d b4       	in	r0, 0x2d	; 45
    28a2:	07 fe       	sbrs	r0, 7
    28a4:	f8 cf       	rjmp	.-16     	; 0x2896 <spiTransfer+0x28>
		if( !(SPCR & _BV(MSTR)) ) return 0;
			// The SPI module has left master mode, so return.
			// Otherwise, this will be an infinite loop.
	}

	return SPDR;
    28a6:	8e b5       	in	r24, 0x2e	; 46

	// Make sure you pull slave select high to indicate end of transfer.
	// That is NOT done by this function.
	// Using spiDeselect (SS_pin);
}
    28a8:	08 95       	ret

000028aa <prvResetNextTaskUnblockTime>:
    28aa:	e0 91 b8 06 	lds	r30, 0x06B8	; 0x8006b8 <pxDelayedTaskList>
    28ae:	f0 91 b9 06 	lds	r31, 0x06B9	; 0x8006b9 <pxDelayedTaskList+0x1>
    28b2:	80 81       	ld	r24, Z
    28b4:	81 11       	cpse	r24, r1
    28b6:	0c c0       	rjmp	.+24     	; 0x28d0 <prvResetNextTaskUnblockTime+0x26>
    28b8:	8f ef       	ldi	r24, 0xFF	; 255
    28ba:	9f ef       	ldi	r25, 0xFF	; 255
    28bc:	dc 01       	movw	r26, r24
    28be:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <xNextTaskUnblockTime>
    28c2:	90 93 86 06 	sts	0x0686, r25	; 0x800686 <xNextTaskUnblockTime+0x1>
    28c6:	a0 93 87 06 	sts	0x0687, r26	; 0x800687 <xNextTaskUnblockTime+0x2>
    28ca:	b0 93 88 06 	sts	0x0688, r27	; 0x800688 <xNextTaskUnblockTime+0x3>
    28ce:	08 95       	ret
    28d0:	e0 91 b8 06 	lds	r30, 0x06B8	; 0x8006b8 <pxDelayedTaskList>
    28d4:	f0 91 b9 06 	lds	r31, 0x06B9	; 0x8006b9 <pxDelayedTaskList+0x1>
    28d8:	07 80       	ldd	r0, Z+7	; 0x07
    28da:	f0 85       	ldd	r31, Z+8	; 0x08
    28dc:	e0 2d       	mov	r30, r0
    28de:	00 84       	ldd	r0, Z+8	; 0x08
    28e0:	f1 85       	ldd	r31, Z+9	; 0x09
    28e2:	e0 2d       	mov	r30, r0
    28e4:	82 81       	ldd	r24, Z+2	; 0x02
    28e6:	93 81       	ldd	r25, Z+3	; 0x03
    28e8:	a4 81       	ldd	r26, Z+4	; 0x04
    28ea:	b5 81       	ldd	r27, Z+5	; 0x05
    28ec:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <xNextTaskUnblockTime>
    28f0:	90 93 86 06 	sts	0x0686, r25	; 0x800686 <xNextTaskUnblockTime+0x1>
    28f4:	a0 93 87 06 	sts	0x0687, r26	; 0x800687 <xNextTaskUnblockTime+0x2>
    28f8:	b0 93 88 06 	sts	0x0688, r27	; 0x800688 <xNextTaskUnblockTime+0x3>
    28fc:	08 95       	ret

000028fe <prvAddCurrentTaskToDelayedList>:
    28fe:	8f 92       	push	r8
    2900:	9f 92       	push	r9
    2902:	af 92       	push	r10
    2904:	bf 92       	push	r11
    2906:	cf 92       	push	r12
    2908:	df 92       	push	r13
    290a:	ef 92       	push	r14
    290c:	ff 92       	push	r15
    290e:	cf 93       	push	r28
    2910:	6b 01       	movw	r12, r22
    2912:	7c 01       	movw	r14, r24
    2914:	c4 2f       	mov	r28, r20
    2916:	80 90 8f 06 	lds	r8, 0x068F	; 0x80068f <xTickCount>
    291a:	90 90 90 06 	lds	r9, 0x0690	; 0x800690 <xTickCount+0x1>
    291e:	a0 90 91 06 	lds	r10, 0x0691	; 0x800691 <xTickCount+0x2>
    2922:	b0 90 92 06 	lds	r11, 0x0692	; 0x800692 <xTickCount+0x3>
    2926:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <pxCurrentTCB>
    292a:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    292e:	02 96       	adiw	r24, 0x02	; 2
    2930:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2934:	8f ef       	ldi	r24, 0xFF	; 255
    2936:	c8 16       	cp	r12, r24
    2938:	d8 06       	cpc	r13, r24
    293a:	e8 06       	cpc	r14, r24
    293c:	f8 06       	cpc	r15, r24
    293e:	69 f4       	brne	.+26     	; 0x295a <prvAddCurrentTaskToDelayedList+0x5c>
    2940:	cc 23       	and	r28, r28
    2942:	59 f0       	breq	.+22     	; 0x295a <prvAddCurrentTaskToDelayedList+0x5c>
    2944:	60 91 fc 06 	lds	r22, 0x06FC	; 0x8006fc <pxCurrentTCB>
    2948:	70 91 fd 06 	lds	r23, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    294c:	6e 5f       	subi	r22, 0xFE	; 254
    294e:	7f 4f       	sbci	r23, 0xFF	; 255
    2950:	84 e9       	ldi	r24, 0x94	; 148
    2952:	96 e0       	ldi	r25, 0x06	; 6
    2954:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2958:	3f c0       	rjmp	.+126    	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    295a:	c8 0c       	add	r12, r8
    295c:	d9 1c       	adc	r13, r9
    295e:	ea 1c       	adc	r14, r10
    2960:	fb 1c       	adc	r15, r11
    2962:	e0 91 fc 06 	lds	r30, 0x06FC	; 0x8006fc <pxCurrentTCB>
    2966:	f0 91 fd 06 	lds	r31, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    296a:	c2 82       	std	Z+2, r12	; 0x02
    296c:	d3 82       	std	Z+3, r13	; 0x03
    296e:	e4 82       	std	Z+4, r14	; 0x04
    2970:	f5 82       	std	Z+5, r15	; 0x05
    2972:	c8 14       	cp	r12, r8
    2974:	d9 04       	cpc	r13, r9
    2976:	ea 04       	cpc	r14, r10
    2978:	fb 04       	cpc	r15, r11
    297a:	68 f4       	brcc	.+26     	; 0x2996 <prvAddCurrentTaskToDelayedList+0x98>
    297c:	60 91 fc 06 	lds	r22, 0x06FC	; 0x8006fc <pxCurrentTCB>
    2980:	70 91 fd 06 	lds	r23, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    2984:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <pxOverflowDelayedTaskList>
    2988:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <pxOverflowDelayedTaskList+0x1>
    298c:	6e 5f       	subi	r22, 0xFE	; 254
    298e:	7f 4f       	sbci	r23, 0xFF	; 255
    2990:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    2994:	21 c0       	rjmp	.+66     	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    2996:	60 91 fc 06 	lds	r22, 0x06FC	; 0x8006fc <pxCurrentTCB>
    299a:	70 91 fd 06 	lds	r23, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    299e:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <pxDelayedTaskList>
    29a2:	90 91 b9 06 	lds	r25, 0x06B9	; 0x8006b9 <pxDelayedTaskList+0x1>
    29a6:	6e 5f       	subi	r22, 0xFE	; 254
    29a8:	7f 4f       	sbci	r23, 0xFF	; 255
    29aa:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    29ae:	80 91 85 06 	lds	r24, 0x0685	; 0x800685 <xNextTaskUnblockTime>
    29b2:	90 91 86 06 	lds	r25, 0x0686	; 0x800686 <xNextTaskUnblockTime+0x1>
    29b6:	a0 91 87 06 	lds	r26, 0x0687	; 0x800687 <xNextTaskUnblockTime+0x2>
    29ba:	b0 91 88 06 	lds	r27, 0x0688	; 0x800688 <xNextTaskUnblockTime+0x3>
    29be:	c8 16       	cp	r12, r24
    29c0:	d9 06       	cpc	r13, r25
    29c2:	ea 06       	cpc	r14, r26
    29c4:	fb 06       	cpc	r15, r27
    29c6:	40 f4       	brcc	.+16     	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    29c8:	c0 92 85 06 	sts	0x0685, r12	; 0x800685 <xNextTaskUnblockTime>
    29cc:	d0 92 86 06 	sts	0x0686, r13	; 0x800686 <xNextTaskUnblockTime+0x1>
    29d0:	e0 92 87 06 	sts	0x0687, r14	; 0x800687 <xNextTaskUnblockTime+0x2>
    29d4:	f0 92 88 06 	sts	0x0688, r15	; 0x800688 <xNextTaskUnblockTime+0x3>
    29d8:	cf 91       	pop	r28
    29da:	ff 90       	pop	r15
    29dc:	ef 90       	pop	r14
    29de:	df 90       	pop	r13
    29e0:	cf 90       	pop	r12
    29e2:	bf 90       	pop	r11
    29e4:	af 90       	pop	r10
    29e6:	9f 90       	pop	r9
    29e8:	8f 90       	pop	r8
    29ea:	08 95       	ret

000029ec <xTaskCreate>:
    29ec:	4f 92       	push	r4
    29ee:	5f 92       	push	r5
    29f0:	6f 92       	push	r6
    29f2:	7f 92       	push	r7
    29f4:	8f 92       	push	r8
    29f6:	9f 92       	push	r9
    29f8:	af 92       	push	r10
    29fa:	bf 92       	push	r11
    29fc:	cf 92       	push	r12
    29fe:	df 92       	push	r13
    2a00:	ef 92       	push	r14
    2a02:	ff 92       	push	r15
    2a04:	0f 93       	push	r16
    2a06:	cf 93       	push	r28
    2a08:	df 93       	push	r29
    2a0a:	4c 01       	movw	r8, r24
    2a0c:	6b 01       	movw	r12, r22
    2a0e:	5a 01       	movw	r10, r20
    2a10:	29 01       	movw	r4, r18
    2a12:	ca 01       	movw	r24, r20
    2a14:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    2a18:	3c 01       	movw	r6, r24
    2a1a:	89 2b       	or	r24, r25
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <xTaskCreate+0x34>
    2a1e:	ec c0       	rjmp	.+472    	; 0x2bf8 <xTaskCreate+0x20c>
    2a20:	83 e3       	ldi	r24, 0x33	; 51
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    2a28:	ec 01       	movw	r28, r24
    2a2a:	89 2b       	or	r24, r25
    2a2c:	b1 f0       	breq	.+44     	; 0x2a5a <xTaskCreate+0x6e>
    2a2e:	7c 8e       	std	Y+28, r7	; 0x1c
    2a30:	6b 8e       	std	Y+27, r6	; 0x1b
    2a32:	a5 01       	movw	r20, r10
    2a34:	65 ea       	ldi	r22, 0xA5	; 165
    2a36:	70 e0       	ldi	r23, 0x00	; 0
    2a38:	c3 01       	movw	r24, r6
    2a3a:	0e 94 7f 5c 	call	0xb8fe	; 0xb8fe <memset>
    2a3e:	21 e0       	ldi	r18, 0x01	; 1
    2a40:	a2 1a       	sub	r10, r18
    2a42:	b1 08       	sbc	r11, r1
    2a44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a48:	a8 0e       	add	r10, r24
    2a4a:	b9 1e       	adc	r11, r25
    2a4c:	d6 01       	movw	r26, r12
    2a4e:	8c 91       	ld	r24, X
    2a50:	8d 8f       	std	Y+29, r24	; 0x1d
    2a52:	8c 91       	ld	r24, X
    2a54:	81 11       	cpse	r24, r1
    2a56:	05 c0       	rjmp	.+10     	; 0x2a62 <xTaskCreate+0x76>
    2a58:	18 c0       	rjmp	.+48     	; 0x2a8a <xTaskCreate+0x9e>
    2a5a:	c3 01       	movw	r24, r6
    2a5c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vPortFree>
    2a60:	cb c0       	rjmp	.+406    	; 0x2bf8 <xTaskCreate+0x20c>
    2a62:	ae 01       	movw	r20, r28
    2a64:	42 5e       	subi	r20, 0xE2	; 226
    2a66:	5f 4f       	sbci	r21, 0xFF	; 255
    2a68:	f6 01       	movw	r30, r12
    2a6a:	31 96       	adiw	r30, 0x01	; 1
    2a6c:	bf e0       	ldi	r27, 0x0F	; 15
    2a6e:	cb 0e       	add	r12, r27
    2a70:	d1 1c       	adc	r13, r1
    2a72:	cf 01       	movw	r24, r30
    2a74:	21 91       	ld	r18, Z+
    2a76:	da 01       	movw	r26, r20
    2a78:	2d 93       	st	X+, r18
    2a7a:	ad 01       	movw	r20, r26
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	8c 91       	ld	r24, X
    2a80:	88 23       	and	r24, r24
    2a82:	19 f0       	breq	.+6      	; 0x2a8a <xTaskCreate+0x9e>
    2a84:	ec 15       	cp	r30, r12
    2a86:	fd 05       	cpc	r31, r13
    2a88:	a1 f7       	brne	.-24     	; 0x2a72 <xTaskCreate+0x86>
    2a8a:	1b a6       	std	Y+43, r1	; 0x2b
    2a8c:	04 30       	cpi	r16, 0x04	; 4
    2a8e:	08 f0       	brcs	.+2      	; 0x2a92 <xTaskCreate+0xa6>
    2a90:	03 e0       	ldi	r16, 0x03	; 3
    2a92:	0a 8f       	std	Y+26, r16	; 0x1a
    2a94:	0c a7       	std	Y+44, r16	; 0x2c
    2a96:	1d a6       	std	Y+45, r1	; 0x2d
    2a98:	6e 01       	movw	r12, r28
    2a9a:	b2 e0       	ldi	r27, 0x02	; 2
    2a9c:	cb 0e       	add	r12, r27
    2a9e:	d1 1c       	adc	r13, r1
    2aa0:	c6 01       	movw	r24, r12
    2aa2:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    2aa6:	ce 01       	movw	r24, r28
    2aa8:	0e 96       	adiw	r24, 0x0e	; 14
    2aaa:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    2aae:	db 87       	std	Y+11, r29	; 0x0b
    2ab0:	ca 87       	std	Y+10, r28	; 0x0a
    2ab2:	84 e0       	ldi	r24, 0x04	; 4
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	a0 e0       	ldi	r26, 0x00	; 0
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	80 1b       	sub	r24, r16
    2abc:	91 09       	sbc	r25, r1
    2abe:	a1 09       	sbc	r26, r1
    2ac0:	b1 09       	sbc	r27, r1
    2ac2:	8e 87       	std	Y+14, r24	; 0x0e
    2ac4:	9f 87       	std	Y+15, r25	; 0x0f
    2ac6:	a8 8b       	std	Y+16, r26	; 0x10
    2ac8:	b9 8b       	std	Y+17, r27	; 0x11
    2aca:	df 8b       	std	Y+23, r29	; 0x17
    2acc:	ce 8b       	std	Y+22, r28	; 0x16
    2ace:	1e a6       	std	Y+46, r1	; 0x2e
    2ad0:	1f a6       	std	Y+47, r1	; 0x2f
    2ad2:	18 aa       	std	Y+48, r1	; 0x30
    2ad4:	19 aa       	std	Y+49, r1	; 0x31
    2ad6:	1a aa       	std	Y+50, r1	; 0x32
    2ad8:	a2 01       	movw	r20, r4
    2ada:	b4 01       	movw	r22, r8
    2adc:	c5 01       	movw	r24, r10
    2ade:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pxPortInitialiseStack>
    2ae2:	99 83       	std	Y+1, r25	; 0x01
    2ae4:	88 83       	st	Y, r24
    2ae6:	e1 14       	cp	r14, r1
    2ae8:	f1 04       	cpc	r15, r1
    2aea:	19 f0       	breq	.+6      	; 0x2af2 <xTaskCreate+0x106>
    2aec:	f7 01       	movw	r30, r14
    2aee:	d1 83       	std	Z+1, r29	; 0x01
    2af0:	c0 83       	st	Z, r28
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	0f 92       	push	r0
    2af8:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <uxCurrentNumberOfTasks>
    2afc:	8f 5f       	subi	r24, 0xFF	; 255
    2afe:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <uxCurrentNumberOfTasks>
    2b02:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <pxCurrentTCB>
    2b06:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    2b0a:	89 2b       	or	r24, r25
    2b0c:	d1 f5       	brne	.+116    	; 0x2b82 <xTaskCreate+0x196>
    2b0e:	d0 93 fd 06 	sts	0x06FD, r29	; 0x8006fd <pxCurrentTCB+0x1>
    2b12:	c0 93 fc 06 	sts	0x06FC, r28	; 0x8006fc <pxCurrentTCB>
    2b16:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <uxCurrentNumberOfTasks>
    2b1a:	81 30       	cpi	r24, 0x01	; 1
    2b1c:	09 f0       	breq	.+2      	; 0x2b20 <xTaskCreate+0x134>
    2b1e:	41 c0       	rjmp	.+130    	; 0x2ba2 <xTaskCreate+0x1b6>
    2b20:	80 ed       	ldi	r24, 0xD0	; 208
    2b22:	96 e0       	ldi	r25, 0x06	; 6
    2b24:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b28:	8b ed       	ldi	r24, 0xDB	; 219
    2b2a:	96 e0       	ldi	r25, 0x06	; 6
    2b2c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b30:	86 ee       	ldi	r24, 0xE6	; 230
    2b32:	96 e0       	ldi	r25, 0x06	; 6
    2b34:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b38:	81 ef       	ldi	r24, 0xF1	; 241
    2b3a:	96 e0       	ldi	r25, 0x06	; 6
    2b3c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b40:	85 ec       	ldi	r24, 0xC5	; 197
    2b42:	96 e0       	ldi	r25, 0x06	; 6
    2b44:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b48:	8a eb       	ldi	r24, 0xBA	; 186
    2b4a:	96 e0       	ldi	r25, 0x06	; 6
    2b4c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b50:	8b ea       	ldi	r24, 0xAB	; 171
    2b52:	96 e0       	ldi	r25, 0x06	; 6
    2b54:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b58:	80 ea       	ldi	r24, 0xA0	; 160
    2b5a:	96 e0       	ldi	r25, 0x06	; 6
    2b5c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b60:	84 e9       	ldi	r24, 0x94	; 148
    2b62:	96 e0       	ldi	r25, 0x06	; 6
    2b64:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b68:	85 ec       	ldi	r24, 0xC5	; 197
    2b6a:	96 e0       	ldi	r25, 0x06	; 6
    2b6c:	90 93 b9 06 	sts	0x06B9, r25	; 0x8006b9 <pxDelayedTaskList+0x1>
    2b70:	80 93 b8 06 	sts	0x06B8, r24	; 0x8006b8 <pxDelayedTaskList>
    2b74:	8a eb       	ldi	r24, 0xBA	; 186
    2b76:	96 e0       	ldi	r25, 0x06	; 6
    2b78:	90 93 b7 06 	sts	0x06B7, r25	; 0x8006b7 <pxOverflowDelayedTaskList+0x1>
    2b7c:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <pxOverflowDelayedTaskList>
    2b80:	10 c0       	rjmp	.+32     	; 0x2ba2 <xTaskCreate+0x1b6>
    2b82:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <xSchedulerRunning>
    2b86:	81 11       	cpse	r24, r1
    2b88:	0c c0       	rjmp	.+24     	; 0x2ba2 <xTaskCreate+0x1b6>
    2b8a:	e0 91 fc 06 	lds	r30, 0x06FC	; 0x8006fc <pxCurrentTCB>
    2b8e:	f0 91 fd 06 	lds	r31, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    2b92:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b94:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b96:	89 17       	cp	r24, r25
    2b98:	20 f0       	brcs	.+8      	; 0x2ba2 <xTaskCreate+0x1b6>
    2b9a:	d0 93 fd 06 	sts	0x06FD, r29	; 0x8006fd <pxCurrentTCB+0x1>
    2b9e:	c0 93 fc 06 	sts	0x06FC, r28	; 0x8006fc <pxCurrentTCB>
    2ba2:	80 91 89 06 	lds	r24, 0x0689	; 0x800689 <uxTaskNumber>
    2ba6:	8f 5f       	subi	r24, 0xFF	; 255
    2ba8:	80 93 89 06 	sts	0x0689, r24	; 0x800689 <uxTaskNumber>
    2bac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bae:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <uxTopReadyPriority>
    2bb2:	98 17       	cp	r25, r24
    2bb4:	10 f4       	brcc	.+4      	; 0x2bba <xTaskCreate+0x1ce>
    2bb6:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <uxTopReadyPriority>
    2bba:	fb e0       	ldi	r31, 0x0B	; 11
    2bbc:	8f 9f       	mul	r24, r31
    2bbe:	c0 01       	movw	r24, r0
    2bc0:	11 24       	eor	r1, r1
    2bc2:	b6 01       	movw	r22, r12
    2bc4:	80 53       	subi	r24, 0x30	; 48
    2bc6:	99 4f       	sbci	r25, 0xF9	; 249
    2bc8:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2bcc:	0f 90       	pop	r0
    2bce:	0f be       	out	0x3f, r0	; 63
    2bd0:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <xSchedulerRunning>
    2bd4:	88 23       	and	r24, r24
    2bd6:	61 f0       	breq	.+24     	; 0x2bf0 <xTaskCreate+0x204>
    2bd8:	e0 91 fc 06 	lds	r30, 0x06FC	; 0x8006fc <pxCurrentTCB>
    2bdc:	f0 91 fd 06 	lds	r31, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    2be0:	92 8d       	ldd	r25, Z+26	; 0x1a
    2be2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2be4:	98 17       	cp	r25, r24
    2be6:	30 f4       	brcc	.+12     	; 0x2bf4 <xTaskCreate+0x208>
    2be8:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	05 c0       	rjmp	.+10     	; 0x2bfa <xTaskCreate+0x20e>
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	03 c0       	rjmp	.+6      	; 0x2bfa <xTaskCreate+0x20e>
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	01 c0       	rjmp	.+2      	; 0x2bfa <xTaskCreate+0x20e>
    2bf8:	8f ef       	ldi	r24, 0xFF	; 255
    2bfa:	df 91       	pop	r29
    2bfc:	cf 91       	pop	r28
    2bfe:	0f 91       	pop	r16
    2c00:	ff 90       	pop	r15
    2c02:	ef 90       	pop	r14
    2c04:	df 90       	pop	r13
    2c06:	cf 90       	pop	r12
    2c08:	bf 90       	pop	r11
    2c0a:	af 90       	pop	r10
    2c0c:	9f 90       	pop	r9
    2c0e:	8f 90       	pop	r8
    2c10:	7f 90       	pop	r7
    2c12:	6f 90       	pop	r6
    2c14:	5f 90       	pop	r5
    2c16:	4f 90       	pop	r4
    2c18:	08 95       	ret

00002c1a <vTaskResume>:
    2c1a:	0f 93       	push	r16
    2c1c:	1f 93       	push	r17
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
    2c22:	00 97       	sbiw	r24, 0x00	; 0
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <vTaskResume+0xe>
    2c26:	3d c0       	rjmp	.+122    	; 0x2ca2 <vTaskResume+0x88>
    2c28:	20 91 fc 06 	lds	r18, 0x06FC	; 0x8006fc <pxCurrentTCB>
    2c2c:	30 91 fd 06 	lds	r19, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    2c30:	82 17       	cp	r24, r18
    2c32:	93 07       	cpc	r25, r19
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <vTaskResume+0x1e>
    2c36:	35 c0       	rjmp	.+106    	; 0x2ca2 <vTaskResume+0x88>
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	0f 92       	push	r0
    2c3e:	fc 01       	movw	r30, r24
    2c40:	24 85       	ldd	r18, Z+12	; 0x0c
    2c42:	35 85       	ldd	r19, Z+13	; 0x0d
    2c44:	24 59       	subi	r18, 0x94	; 148
    2c46:	36 40       	sbci	r19, 0x06	; 6
    2c48:	51 f5       	brne	.+84     	; 0x2c9e <vTaskResume+0x84>
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	20 8d       	ldd	r18, Z+24	; 0x18
    2c4e:	31 8d       	ldd	r19, Z+25	; 0x19
    2c50:	f6 e0       	ldi	r31, 0x06	; 6
    2c52:	2b 3a       	cpi	r18, 0xAB	; 171
    2c54:	3f 07       	cpc	r19, r31
    2c56:	19 f1       	breq	.+70     	; 0x2c9e <vTaskResume+0x84>
    2c58:	23 2b       	or	r18, r19
    2c5a:	09 f5       	brne	.+66     	; 0x2c9e <vTaskResume+0x84>
    2c5c:	ec 01       	movw	r28, r24
    2c5e:	8c 01       	movw	r16, r24
    2c60:	0e 5f       	subi	r16, 0xFE	; 254
    2c62:	1f 4f       	sbci	r17, 0xFF	; 255
    2c64:	c8 01       	movw	r24, r16
    2c66:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2c6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c6c:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <uxTopReadyPriority>
    2c70:	98 17       	cp	r25, r24
    2c72:	10 f4       	brcc	.+4      	; 0x2c78 <vTaskResume+0x5e>
    2c74:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <uxTopReadyPriority>
    2c78:	2b e0       	ldi	r18, 0x0B	; 11
    2c7a:	82 9f       	mul	r24, r18
    2c7c:	c0 01       	movw	r24, r0
    2c7e:	11 24       	eor	r1, r1
    2c80:	b8 01       	movw	r22, r16
    2c82:	80 53       	subi	r24, 0x30	; 48
    2c84:	99 4f       	sbci	r25, 0xF9	; 249
    2c86:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2c8a:	e0 91 fc 06 	lds	r30, 0x06FC	; 0x8006fc <pxCurrentTCB>
    2c8e:	f0 91 fd 06 	lds	r31, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    2c92:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c94:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c96:	98 17       	cp	r25, r24
    2c98:	10 f0       	brcs	.+4      	; 0x2c9e <vTaskResume+0x84>
    2c9a:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2c9e:	0f 90       	pop	r0
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	df 91       	pop	r29
    2ca4:	cf 91       	pop	r28
    2ca6:	1f 91       	pop	r17
    2ca8:	0f 91       	pop	r16
    2caa:	08 95       	ret

00002cac <vTaskStartScheduler>:
    2cac:	ef 92       	push	r14
    2cae:	ff 92       	push	r15
    2cb0:	0f 93       	push	r16
    2cb2:	0f 2e       	mov	r0, r31
    2cb4:	f3 e8       	ldi	r31, 0x83	; 131
    2cb6:	ef 2e       	mov	r14, r31
    2cb8:	f6 e0       	ldi	r31, 0x06	; 6
    2cba:	ff 2e       	mov	r15, r31
    2cbc:	f0 2d       	mov	r31, r0
    2cbe:	00 e0       	ldi	r16, 0x00	; 0
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	40 e8       	ldi	r20, 0x80	; 128
    2cc6:	50 e0       	ldi	r21, 0x00	; 0
    2cc8:	66 e1       	ldi	r22, 0x16	; 22
    2cca:	72 e0       	ldi	r23, 0x02	; 2
    2ccc:	88 e3       	ldi	r24, 0x38	; 56
    2cce:	95 e0       	ldi	r25, 0x05	; 5
    2cd0:	8d de       	rcall	.-742    	; 0x29ec <xTaskCreate>
    2cd2:	81 30       	cpi	r24, 0x01	; 1
    2cd4:	e1 f4       	brne	.+56     	; 0x2d0e <vTaskStartScheduler+0x62>
    2cd6:	ce d4       	rcall	.+2460   	; 0x3674 <xTimerCreateTimerTask>
    2cd8:	81 30       	cpi	r24, 0x01	; 1
    2cda:	c9 f4       	brne	.+50     	; 0x2d0e <vTaskStartScheduler+0x62>
    2cdc:	f8 94       	cli
    2cde:	8f ef       	ldi	r24, 0xFF	; 255
    2ce0:	9f ef       	ldi	r25, 0xFF	; 255
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <xNextTaskUnblockTime>
    2ce8:	90 93 86 06 	sts	0x0686, r25	; 0x800686 <xNextTaskUnblockTime+0x1>
    2cec:	a0 93 87 06 	sts	0x0687, r26	; 0x800687 <xNextTaskUnblockTime+0x2>
    2cf0:	b0 93 88 06 	sts	0x0688, r27	; 0x800688 <xNextTaskUnblockTime+0x3>
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	80 93 8d 06 	sts	0x068D, r24	; 0x80068d <xSchedulerRunning>
    2cfa:	10 92 8f 06 	sts	0x068F, r1	; 0x80068f <xTickCount>
    2cfe:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <xTickCount+0x1>
    2d02:	10 92 91 06 	sts	0x0691, r1	; 0x800691 <xTickCount+0x2>
    2d06:	10 92 92 06 	sts	0x0692, r1	; 0x800692 <xTickCount+0x3>
    2d0a:	0e 94 56 06 	call	0xcac	; 0xcac <xPortStartScheduler>
    2d0e:	0f 91       	pop	r16
    2d10:	ff 90       	pop	r15
    2d12:	ef 90       	pop	r14
    2d14:	08 95       	ret

00002d16 <vTaskSuspendAll>:
    2d16:	80 91 82 06 	lds	r24, 0x0682	; 0x800682 <uxSchedulerSuspended>
    2d1a:	8f 5f       	subi	r24, 0xFF	; 255
    2d1c:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <uxSchedulerSuspended>
    2d20:	08 95       	ret

00002d22 <xTaskGetTickCount>:
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	0f 92       	push	r0
    2d28:	60 91 8f 06 	lds	r22, 0x068F	; 0x80068f <xTickCount>
    2d2c:	70 91 90 06 	lds	r23, 0x0690	; 0x800690 <xTickCount+0x1>
    2d30:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <xTickCount+0x2>
    2d34:	90 91 92 06 	lds	r25, 0x0692	; 0x800692 <xTickCount+0x3>
    2d38:	0f 90       	pop	r0
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	08 95       	ret

00002d3e <xTaskIncrementTick>:
    2d3e:	9f 92       	push	r9
    2d40:	af 92       	push	r10
    2d42:	bf 92       	push	r11
    2d44:	cf 92       	push	r12
    2d46:	df 92       	push	r13
    2d48:	ef 92       	push	r14
    2d4a:	ff 92       	push	r15
    2d4c:	0f 93       	push	r16
    2d4e:	1f 93       	push	r17
    2d50:	cf 93       	push	r28
    2d52:	df 93       	push	r29
    2d54:	80 91 82 06 	lds	r24, 0x0682	; 0x800682 <uxSchedulerSuspended>
    2d58:	81 11       	cpse	r24, r1
    2d5a:	ad c0       	rjmp	.+346    	; 0x2eb6 <xTaskIncrementTick+0x178>
    2d5c:	c0 90 8f 06 	lds	r12, 0x068F	; 0x80068f <xTickCount>
    2d60:	d0 90 90 06 	lds	r13, 0x0690	; 0x800690 <xTickCount+0x1>
    2d64:	e0 90 91 06 	lds	r14, 0x0691	; 0x800691 <xTickCount+0x2>
    2d68:	f0 90 92 06 	lds	r15, 0x0692	; 0x800692 <xTickCount+0x3>
    2d6c:	8f ef       	ldi	r24, 0xFF	; 255
    2d6e:	c8 1a       	sub	r12, r24
    2d70:	d8 0a       	sbc	r13, r24
    2d72:	e8 0a       	sbc	r14, r24
    2d74:	f8 0a       	sbc	r15, r24
    2d76:	c0 92 8f 06 	sts	0x068F, r12	; 0x80068f <xTickCount>
    2d7a:	d0 92 90 06 	sts	0x0690, r13	; 0x800690 <xTickCount+0x1>
    2d7e:	e0 92 91 06 	sts	0x0691, r14	; 0x800691 <xTickCount+0x2>
    2d82:	f0 92 92 06 	sts	0x0692, r15	; 0x800692 <xTickCount+0x3>
    2d86:	c1 14       	cp	r12, r1
    2d88:	d1 04       	cpc	r13, r1
    2d8a:	e1 04       	cpc	r14, r1
    2d8c:	f1 04       	cpc	r15, r1
    2d8e:	b1 f4       	brne	.+44     	; 0x2dbc <xTaskIncrementTick+0x7e>
    2d90:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <pxDelayedTaskList>
    2d94:	90 91 b9 06 	lds	r25, 0x06B9	; 0x8006b9 <pxDelayedTaskList+0x1>
    2d98:	20 91 b6 06 	lds	r18, 0x06B6	; 0x8006b6 <pxOverflowDelayedTaskList>
    2d9c:	30 91 b7 06 	lds	r19, 0x06B7	; 0x8006b7 <pxOverflowDelayedTaskList+0x1>
    2da0:	30 93 b9 06 	sts	0x06B9, r19	; 0x8006b9 <pxDelayedTaskList+0x1>
    2da4:	20 93 b8 06 	sts	0x06B8, r18	; 0x8006b8 <pxDelayedTaskList>
    2da8:	90 93 b7 06 	sts	0x06B7, r25	; 0x8006b7 <pxOverflowDelayedTaskList+0x1>
    2dac:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <pxOverflowDelayedTaskList>
    2db0:	80 91 8a 06 	lds	r24, 0x068A	; 0x80068a <xNumOfOverflows>
    2db4:	8f 5f       	subi	r24, 0xFF	; 255
    2db6:	80 93 8a 06 	sts	0x068A, r24	; 0x80068a <xNumOfOverflows>
    2dba:	77 dd       	rcall	.-1298   	; 0x28aa <prvResetNextTaskUnblockTime>
    2dbc:	80 91 85 06 	lds	r24, 0x0685	; 0x800685 <xNextTaskUnblockTime>
    2dc0:	90 91 86 06 	lds	r25, 0x0686	; 0x800686 <xNextTaskUnblockTime+0x1>
    2dc4:	a0 91 87 06 	lds	r26, 0x0687	; 0x800687 <xNextTaskUnblockTime+0x2>
    2dc8:	b0 91 88 06 	lds	r27, 0x0688	; 0x800688 <xNextTaskUnblockTime+0x3>
    2dcc:	c8 16       	cp	r12, r24
    2dce:	d9 06       	cpc	r13, r25
    2dd0:	ea 06       	cpc	r14, r26
    2dd2:	fb 06       	cpc	r15, r27
    2dd4:	10 f4       	brcc	.+4      	; 0x2dda <xTaskIncrementTick+0x9c>
    2dd6:	b1 2c       	mov	r11, r1
    2dd8:	5d c0       	rjmp	.+186    	; 0x2e94 <xTaskIncrementTick+0x156>
    2dda:	b1 2c       	mov	r11, r1
    2ddc:	0f 2e       	mov	r0, r31
    2dde:	fb e0       	ldi	r31, 0x0B	; 11
    2de0:	af 2e       	mov	r10, r31
    2de2:	f0 2d       	mov	r31, r0
    2de4:	99 24       	eor	r9, r9
    2de6:	93 94       	inc	r9
    2de8:	e0 91 b8 06 	lds	r30, 0x06B8	; 0x8006b8 <pxDelayedTaskList>
    2dec:	f0 91 b9 06 	lds	r31, 0x06B9	; 0x8006b9 <pxDelayedTaskList+0x1>
    2df0:	80 81       	ld	r24, Z
    2df2:	81 11       	cpse	r24, r1
    2df4:	0c c0       	rjmp	.+24     	; 0x2e0e <xTaskIncrementTick+0xd0>
    2df6:	8f ef       	ldi	r24, 0xFF	; 255
    2df8:	9f ef       	ldi	r25, 0xFF	; 255
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <xNextTaskUnblockTime>
    2e00:	90 93 86 06 	sts	0x0686, r25	; 0x800686 <xNextTaskUnblockTime+0x1>
    2e04:	a0 93 87 06 	sts	0x0687, r26	; 0x800687 <xNextTaskUnblockTime+0x2>
    2e08:	b0 93 88 06 	sts	0x0688, r27	; 0x800688 <xNextTaskUnblockTime+0x3>
    2e0c:	43 c0       	rjmp	.+134    	; 0x2e94 <xTaskIncrementTick+0x156>
    2e0e:	e0 91 b8 06 	lds	r30, 0x06B8	; 0x8006b8 <pxDelayedTaskList>
    2e12:	f0 91 b9 06 	lds	r31, 0x06B9	; 0x8006b9 <pxDelayedTaskList+0x1>
    2e16:	07 80       	ldd	r0, Z+7	; 0x07
    2e18:	f0 85       	ldd	r31, Z+8	; 0x08
    2e1a:	e0 2d       	mov	r30, r0
    2e1c:	c0 85       	ldd	r28, Z+8	; 0x08
    2e1e:	d1 85       	ldd	r29, Z+9	; 0x09
    2e20:	8a 81       	ldd	r24, Y+2	; 0x02
    2e22:	9b 81       	ldd	r25, Y+3	; 0x03
    2e24:	ac 81       	ldd	r26, Y+4	; 0x04
    2e26:	bd 81       	ldd	r27, Y+5	; 0x05
    2e28:	c8 16       	cp	r12, r24
    2e2a:	d9 06       	cpc	r13, r25
    2e2c:	ea 06       	cpc	r14, r26
    2e2e:	fb 06       	cpc	r15, r27
    2e30:	48 f4       	brcc	.+18     	; 0x2e44 <xTaskIncrementTick+0x106>
    2e32:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <xNextTaskUnblockTime>
    2e36:	90 93 86 06 	sts	0x0686, r25	; 0x800686 <xNextTaskUnblockTime+0x1>
    2e3a:	a0 93 87 06 	sts	0x0687, r26	; 0x800687 <xNextTaskUnblockTime+0x2>
    2e3e:	b0 93 88 06 	sts	0x0688, r27	; 0x800688 <xNextTaskUnblockTime+0x3>
    2e42:	28 c0       	rjmp	.+80     	; 0x2e94 <xTaskIncrementTick+0x156>
    2e44:	8e 01       	movw	r16, r28
    2e46:	0e 5f       	subi	r16, 0xFE	; 254
    2e48:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4a:	c8 01       	movw	r24, r16
    2e4c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2e50:	88 8d       	ldd	r24, Y+24	; 0x18
    2e52:	99 8d       	ldd	r25, Y+25	; 0x19
    2e54:	89 2b       	or	r24, r25
    2e56:	21 f0       	breq	.+8      	; 0x2e60 <xTaskIncrementTick+0x122>
    2e58:	ce 01       	movw	r24, r28
    2e5a:	0e 96       	adiw	r24, 0x0e	; 14
    2e5c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2e60:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e62:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <uxTopReadyPriority>
    2e66:	98 17       	cp	r25, r24
    2e68:	10 f4       	brcc	.+4      	; 0x2e6e <xTaskIncrementTick+0x130>
    2e6a:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <uxTopReadyPriority>
    2e6e:	a8 9e       	mul	r10, r24
    2e70:	c0 01       	movw	r24, r0
    2e72:	11 24       	eor	r1, r1
    2e74:	b8 01       	movw	r22, r16
    2e76:	80 53       	subi	r24, 0x30	; 48
    2e78:	99 4f       	sbci	r25, 0xF9	; 249
    2e7a:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2e7e:	e0 91 fc 06 	lds	r30, 0x06FC	; 0x8006fc <pxCurrentTCB>
    2e82:	f0 91 fd 06 	lds	r31, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    2e86:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e88:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e8a:	98 17       	cp	r25, r24
    2e8c:	08 f4       	brcc	.+2      	; 0x2e90 <xTaskIncrementTick+0x152>
    2e8e:	ac cf       	rjmp	.-168    	; 0x2de8 <xTaskIncrementTick+0xaa>
    2e90:	b9 2c       	mov	r11, r9
    2e92:	aa cf       	rjmp	.-172    	; 0x2de8 <xTaskIncrementTick+0xaa>
    2e94:	e0 91 fc 06 	lds	r30, 0x06FC	; 0x8006fc <pxCurrentTCB>
    2e98:	f0 91 fd 06 	lds	r31, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    2e9c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2e9e:	8b e0       	ldi	r24, 0x0B	; 11
    2ea0:	e8 9f       	mul	r30, r24
    2ea2:	f0 01       	movw	r30, r0
    2ea4:	11 24       	eor	r1, r1
    2ea6:	e0 53       	subi	r30, 0x30	; 48
    2ea8:	f9 4f       	sbci	r31, 0xF9	; 249
    2eaa:	80 81       	ld	r24, Z
    2eac:	82 30       	cpi	r24, 0x02	; 2
    2eae:	48 f0       	brcs	.+18     	; 0x2ec2 <xTaskIncrementTick+0x184>
    2eb0:	bb 24       	eor	r11, r11
    2eb2:	b3 94       	inc	r11
    2eb4:	06 c0       	rjmp	.+12     	; 0x2ec2 <xTaskIncrementTick+0x184>
    2eb6:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <uxPendedTicks>
    2eba:	8f 5f       	subi	r24, 0xFF	; 255
    2ebc:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <uxPendedTicks>
    2ec0:	b1 2c       	mov	r11, r1
    2ec2:	80 91 8b 06 	lds	r24, 0x068B	; 0x80068b <xYieldPending>
    2ec6:	88 23       	and	r24, r24
    2ec8:	11 f0       	breq	.+4      	; 0x2ece <xTaskIncrementTick+0x190>
    2eca:	bb 24       	eor	r11, r11
    2ecc:	b3 94       	inc	r11
    2ece:	8b 2d       	mov	r24, r11
    2ed0:	df 91       	pop	r29
    2ed2:	cf 91       	pop	r28
    2ed4:	1f 91       	pop	r17
    2ed6:	0f 91       	pop	r16
    2ed8:	ff 90       	pop	r15
    2eda:	ef 90       	pop	r14
    2edc:	df 90       	pop	r13
    2ede:	cf 90       	pop	r12
    2ee0:	bf 90       	pop	r11
    2ee2:	af 90       	pop	r10
    2ee4:	9f 90       	pop	r9
    2ee6:	08 95       	ret

00002ee8 <xTaskResumeAll>:
    2ee8:	cf 92       	push	r12
    2eea:	df 92       	push	r13
    2eec:	ef 92       	push	r14
    2eee:	ff 92       	push	r15
    2ef0:	0f 93       	push	r16
    2ef2:	1f 93       	push	r17
    2ef4:	cf 93       	push	r28
    2ef6:	df 93       	push	r29
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	f8 94       	cli
    2efc:	0f 92       	push	r0
    2efe:	80 91 82 06 	lds	r24, 0x0682	; 0x800682 <uxSchedulerSuspended>
    2f02:	81 50       	subi	r24, 0x01	; 1
    2f04:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <uxSchedulerSuspended>
    2f08:	80 91 82 06 	lds	r24, 0x0682	; 0x800682 <uxSchedulerSuspended>
    2f0c:	81 11       	cpse	r24, r1
    2f0e:	5a c0       	rjmp	.+180    	; 0x2fc4 <xTaskResumeAll+0xdc>
    2f10:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <uxCurrentNumberOfTasks>
    2f14:	81 11       	cpse	r24, r1
    2f16:	2c c0       	rjmp	.+88     	; 0x2f70 <xTaskResumeAll+0x88>
    2f18:	58 c0       	rjmp	.+176    	; 0x2fca <xTaskResumeAll+0xe2>
    2f1a:	d7 01       	movw	r26, r14
    2f1c:	17 96       	adiw	r26, 0x07	; 7
    2f1e:	ed 91       	ld	r30, X+
    2f20:	fc 91       	ld	r31, X
    2f22:	18 97       	sbiw	r26, 0x08	; 8
    2f24:	c0 85       	ldd	r28, Z+8	; 0x08
    2f26:	d1 85       	ldd	r29, Z+9	; 0x09
    2f28:	ce 01       	movw	r24, r28
    2f2a:	0e 96       	adiw	r24, 0x0e	; 14
    2f2c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2f30:	8e 01       	movw	r16, r28
    2f32:	0e 5f       	subi	r16, 0xFE	; 254
    2f34:	1f 4f       	sbci	r17, 0xFF	; 255
    2f36:	c8 01       	movw	r24, r16
    2f38:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2f3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f3e:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <uxTopReadyPriority>
    2f42:	98 17       	cp	r25, r24
    2f44:	10 f4       	brcc	.+4      	; 0x2f4a <xTaskResumeAll+0x62>
    2f46:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <uxTopReadyPriority>
    2f4a:	d8 9e       	mul	r13, r24
    2f4c:	c0 01       	movw	r24, r0
    2f4e:	11 24       	eor	r1, r1
    2f50:	b8 01       	movw	r22, r16
    2f52:	80 53       	subi	r24, 0x30	; 48
    2f54:	99 4f       	sbci	r25, 0xF9	; 249
    2f56:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2f5a:	e0 91 fc 06 	lds	r30, 0x06FC	; 0x8006fc <pxCurrentTCB>
    2f5e:	f0 91 fd 06 	lds	r31, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    2f62:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f64:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f66:	98 17       	cp	r25, r24
    2f68:	88 f0       	brcs	.+34     	; 0x2f8c <xTaskResumeAll+0xa4>
    2f6a:	c0 92 8b 06 	sts	0x068B, r12	; 0x80068b <xYieldPending>
    2f6e:	0e c0       	rjmp	.+28     	; 0x2f8c <xTaskResumeAll+0xa4>
    2f70:	c0 e0       	ldi	r28, 0x00	; 0
    2f72:	d0 e0       	ldi	r29, 0x00	; 0
    2f74:	0f 2e       	mov	r0, r31
    2f76:	fb ea       	ldi	r31, 0xAB	; 171
    2f78:	ef 2e       	mov	r14, r31
    2f7a:	f6 e0       	ldi	r31, 0x06	; 6
    2f7c:	ff 2e       	mov	r15, r31
    2f7e:	f0 2d       	mov	r31, r0
    2f80:	0f 2e       	mov	r0, r31
    2f82:	fb e0       	ldi	r31, 0x0B	; 11
    2f84:	df 2e       	mov	r13, r31
    2f86:	f0 2d       	mov	r31, r0
    2f88:	cc 24       	eor	r12, r12
    2f8a:	c3 94       	inc	r12
    2f8c:	f7 01       	movw	r30, r14
    2f8e:	80 81       	ld	r24, Z
    2f90:	81 11       	cpse	r24, r1
    2f92:	c3 cf       	rjmp	.-122    	; 0x2f1a <xTaskResumeAll+0x32>
    2f94:	cd 2b       	or	r28, r29
    2f96:	09 f0       	breq	.+2      	; 0x2f9a <xTaskResumeAll+0xb2>
    2f98:	88 dc       	rcall	.-1776   	; 0x28aa <prvResetNextTaskUnblockTime>
    2f9a:	c0 91 8c 06 	lds	r28, 0x068C	; 0x80068c <uxPendedTicks>
    2f9e:	cc 23       	and	r28, r28
    2fa0:	49 f0       	breq	.+18     	; 0x2fb4 <xTaskResumeAll+0xcc>
    2fa2:	d1 e0       	ldi	r29, 0x01	; 1
    2fa4:	cc de       	rcall	.-616    	; 0x2d3e <xTaskIncrementTick>
    2fa6:	81 11       	cpse	r24, r1
    2fa8:	d0 93 8b 06 	sts	0x068B, r29	; 0x80068b <xYieldPending>
    2fac:	c1 50       	subi	r28, 0x01	; 1
    2fae:	d1 f7       	brne	.-12     	; 0x2fa4 <xTaskResumeAll+0xbc>
    2fb0:	10 92 8c 06 	sts	0x068C, r1	; 0x80068c <uxPendedTicks>
    2fb4:	80 91 8b 06 	lds	r24, 0x068B	; 0x80068b <xYieldPending>
    2fb8:	88 23       	and	r24, r24
    2fba:	31 f0       	breq	.+12     	; 0x2fc8 <xTaskResumeAll+0xe0>
    2fbc:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	03 c0       	rjmp	.+6      	; 0x2fca <xTaskResumeAll+0xe2>
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	01 c0       	rjmp	.+2      	; 0x2fca <xTaskResumeAll+0xe2>
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	0f 90       	pop	r0
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	ff 90       	pop	r15
    2fd8:	ef 90       	pop	r14
    2fda:	df 90       	pop	r13
    2fdc:	cf 90       	pop	r12
    2fde:	08 95       	ret

00002fe0 <vTaskDelay>:
    2fe0:	cf 92       	push	r12
    2fe2:	df 92       	push	r13
    2fe4:	ef 92       	push	r14
    2fe6:	ff 92       	push	r15
    2fe8:	6b 01       	movw	r12, r22
    2fea:	7c 01       	movw	r14, r24
    2fec:	67 2b       	or	r22, r23
    2fee:	68 2b       	or	r22, r24
    2ff0:	69 2b       	or	r22, r25
    2ff2:	41 f0       	breq	.+16     	; 0x3004 <vTaskDelay+0x24>
    2ff4:	90 de       	rcall	.-736    	; 0x2d16 <vTaskSuspendAll>
    2ff6:	40 e0       	ldi	r20, 0x00	; 0
    2ff8:	c7 01       	movw	r24, r14
    2ffa:	b6 01       	movw	r22, r12
    2ffc:	80 dc       	rcall	.-1792   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    2ffe:	74 df       	rcall	.-280    	; 0x2ee8 <xTaskResumeAll>
    3000:	81 11       	cpse	r24, r1
    3002:	02 c0       	rjmp	.+4      	; 0x3008 <vTaskDelay+0x28>
    3004:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3008:	ff 90       	pop	r15
    300a:	ef 90       	pop	r14
    300c:	df 90       	pop	r13
    300e:	cf 90       	pop	r12
    3010:	08 95       	ret

00003012 <vTaskSwitchContext>:
    3012:	80 91 82 06 	lds	r24, 0x0682	; 0x800682 <uxSchedulerSuspended>
    3016:	88 23       	and	r24, r24
    3018:	21 f0       	breq	.+8      	; 0x3022 <vTaskSwitchContext+0x10>
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <xYieldPending>
    3020:	08 95       	ret
    3022:	10 92 8b 06 	sts	0x068B, r1	; 0x80068b <xYieldPending>
    3026:	a0 91 fc 06 	lds	r26, 0x06FC	; 0x8006fc <pxCurrentTCB>
    302a:	b0 91 fd 06 	lds	r27, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    302e:	e0 91 fc 06 	lds	r30, 0x06FC	; 0x8006fc <pxCurrentTCB>
    3032:	f0 91 fd 06 	lds	r31, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    3036:	2d 91       	ld	r18, X+
    3038:	3c 91       	ld	r19, X
    303a:	83 8d       	ldd	r24, Z+27	; 0x1b
    303c:	94 8d       	ldd	r25, Z+28	; 0x1c
    303e:	82 17       	cp	r24, r18
    3040:	93 07       	cpc	r25, r19
    3042:	60 f0       	brcs	.+24     	; 0x305c <vTaskSwitchContext+0x4a>
    3044:	60 91 fc 06 	lds	r22, 0x06FC	; 0x8006fc <pxCurrentTCB>
    3048:	70 91 fd 06 	lds	r23, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    304c:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <pxCurrentTCB>
    3050:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    3054:	63 5e       	subi	r22, 0xE3	; 227
    3056:	7f 4f       	sbci	r23, 0xFF	; 255
    3058:	0e 94 fd 07 	call	0xffa	; 0xffa <vApplicationStackOverflowHook>
    305c:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <uxTopReadyPriority>
    3060:	28 2f       	mov	r18, r24
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	9b e0       	ldi	r25, 0x0B	; 11
    3066:	89 9f       	mul	r24, r25
    3068:	f0 01       	movw	r30, r0
    306a:	11 24       	eor	r1, r1
    306c:	e0 53       	subi	r30, 0x30	; 48
    306e:	f9 4f       	sbci	r31, 0xF9	; 249
    3070:	90 81       	ld	r25, Z
    3072:	91 11       	cpse	r25, r1
    3074:	0e c0       	rjmp	.+28     	; 0x3092 <vTaskSwitchContext+0x80>
    3076:	4b e0       	ldi	r20, 0x0B	; 11
    3078:	81 50       	subi	r24, 0x01	; 1
    307a:	28 2f       	mov	r18, r24
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	42 9f       	mul	r20, r18
    3080:	f0 01       	movw	r30, r0
    3082:	43 9f       	mul	r20, r19
    3084:	f0 0d       	add	r31, r0
    3086:	11 24       	eor	r1, r1
    3088:	e0 53       	subi	r30, 0x30	; 48
    308a:	f9 4f       	sbci	r31, 0xF9	; 249
    308c:	90 81       	ld	r25, Z
    308e:	99 23       	and	r25, r25
    3090:	99 f3       	breq	.-26     	; 0x3078 <vTaskSwitchContext+0x66>
    3092:	9b e0       	ldi	r25, 0x0B	; 11
    3094:	92 9f       	mul	r25, r18
    3096:	a0 01       	movw	r20, r0
    3098:	93 9f       	mul	r25, r19
    309a:	50 0d       	add	r21, r0
    309c:	11 24       	eor	r1, r1
    309e:	da 01       	movw	r26, r20
    30a0:	a0 53       	subi	r26, 0x30	; 48
    30a2:	b9 4f       	sbci	r27, 0xF9	; 249
    30a4:	11 96       	adiw	r26, 0x01	; 1
    30a6:	ed 91       	ld	r30, X+
    30a8:	fc 91       	ld	r31, X
    30aa:	12 97       	sbiw	r26, 0x02	; 2
    30ac:	04 80       	ldd	r0, Z+4	; 0x04
    30ae:	f5 81       	ldd	r31, Z+5	; 0x05
    30b0:	e0 2d       	mov	r30, r0
    30b2:	12 96       	adiw	r26, 0x02	; 2
    30b4:	fc 93       	st	X, r31
    30b6:	ee 93       	st	-X, r30
    30b8:	11 97       	sbiw	r26, 0x01	; 1
    30ba:	4d 52       	subi	r20, 0x2D	; 45
    30bc:	59 4f       	sbci	r21, 0xF9	; 249
    30be:	e4 17       	cp	r30, r20
    30c0:	f5 07       	cpc	r31, r21
    30c2:	29 f4       	brne	.+10     	; 0x30ce <vTaskSwitchContext+0xbc>
    30c4:	44 81       	ldd	r20, Z+4	; 0x04
    30c6:	55 81       	ldd	r21, Z+5	; 0x05
    30c8:	fd 01       	movw	r30, r26
    30ca:	52 83       	std	Z+2, r21	; 0x02
    30cc:	41 83       	std	Z+1, r20	; 0x01
    30ce:	9b e0       	ldi	r25, 0x0B	; 11
    30d0:	92 9f       	mul	r25, r18
    30d2:	f0 01       	movw	r30, r0
    30d4:	93 9f       	mul	r25, r19
    30d6:	f0 0d       	add	r31, r0
    30d8:	11 24       	eor	r1, r1
    30da:	e0 53       	subi	r30, 0x30	; 48
    30dc:	f9 4f       	sbci	r31, 0xF9	; 249
    30de:	01 80       	ldd	r0, Z+1	; 0x01
    30e0:	f2 81       	ldd	r31, Z+2	; 0x02
    30e2:	e0 2d       	mov	r30, r0
    30e4:	20 85       	ldd	r18, Z+8	; 0x08
    30e6:	31 85       	ldd	r19, Z+9	; 0x09
    30e8:	30 93 fd 06 	sts	0x06FD, r19	; 0x8006fd <pxCurrentTCB+0x1>
    30ec:	20 93 fc 06 	sts	0x06FC, r18	; 0x8006fc <pxCurrentTCB>
    30f0:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <uxTopReadyPriority>
    30f4:	08 95       	ret

000030f6 <vTaskSuspend>:
    30f6:	0f 93       	push	r16
    30f8:	1f 93       	push	r17
    30fa:	cf 93       	push	r28
    30fc:	df 93       	push	r29
    30fe:	ec 01       	movw	r28, r24
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	0f 92       	push	r0
    3106:	89 2b       	or	r24, r25
    3108:	21 f4       	brne	.+8      	; 0x3112 <vTaskSuspend+0x1c>
    310a:	c0 91 fc 06 	lds	r28, 0x06FC	; 0x8006fc <pxCurrentTCB>
    310e:	d0 91 fd 06 	lds	r29, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    3112:	8e 01       	movw	r16, r28
    3114:	0e 5f       	subi	r16, 0xFE	; 254
    3116:	1f 4f       	sbci	r17, 0xFF	; 255
    3118:	c8 01       	movw	r24, r16
    311a:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    311e:	88 8d       	ldd	r24, Y+24	; 0x18
    3120:	99 8d       	ldd	r25, Y+25	; 0x19
    3122:	89 2b       	or	r24, r25
    3124:	21 f0       	breq	.+8      	; 0x312e <vTaskSuspend+0x38>
    3126:	ce 01       	movw	r24, r28
    3128:	0e 96       	adiw	r24, 0x0e	; 14
    312a:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    312e:	b8 01       	movw	r22, r16
    3130:	84 e9       	ldi	r24, 0x94	; 148
    3132:	96 e0       	ldi	r25, 0x06	; 6
    3134:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3138:	8a a9       	ldd	r24, Y+50	; 0x32
    313a:	81 30       	cpi	r24, 0x01	; 1
    313c:	09 f4       	brne	.+2      	; 0x3140 <vTaskSuspend+0x4a>
    313e:	1a aa       	std	Y+50, r1	; 0x32
    3140:	0f 90       	pop	r0
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <xSchedulerRunning>
    3148:	88 23       	and	r24, r24
    314a:	31 f0       	breq	.+12     	; 0x3158 <vTaskSuspend+0x62>
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	0f 92       	push	r0
    3152:	ab db       	rcall	.-2218   	; 0x28aa <prvResetNextTaskUnblockTime>
    3154:	0f 90       	pop	r0
    3156:	0f be       	out	0x3f, r0	; 63
    3158:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <pxCurrentTCB>
    315c:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    3160:	c8 17       	cp	r28, r24
    3162:	d9 07       	cpc	r29, r25
    3164:	99 f4       	brne	.+38     	; 0x318c <vTaskSuspend+0x96>
    3166:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <xSchedulerRunning>
    316a:	88 23       	and	r24, r24
    316c:	19 f0       	breq	.+6      	; 0x3174 <vTaskSuspend+0x7e>
    316e:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3172:	0c c0       	rjmp	.+24     	; 0x318c <vTaskSuspend+0x96>
    3174:	90 91 94 06 	lds	r25, 0x0694	; 0x800694 <xSuspendedTaskList>
    3178:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <uxCurrentNumberOfTasks>
    317c:	98 13       	cpse	r25, r24
    317e:	05 c0       	rjmp	.+10     	; 0x318a <vTaskSuspend+0x94>
    3180:	10 92 fd 06 	sts	0x06FD, r1	; 0x8006fd <pxCurrentTCB+0x1>
    3184:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <pxCurrentTCB>
    3188:	01 c0       	rjmp	.+2      	; 0x318c <vTaskSuspend+0x96>
    318a:	43 df       	rcall	.-378    	; 0x3012 <vTaskSwitchContext>
    318c:	df 91       	pop	r29
    318e:	cf 91       	pop	r28
    3190:	1f 91       	pop	r17
    3192:	0f 91       	pop	r16
    3194:	08 95       	ret

00003196 <vTaskPlaceOnEventList>:
    3196:	cf 92       	push	r12
    3198:	df 92       	push	r13
    319a:	ef 92       	push	r14
    319c:	ff 92       	push	r15
    319e:	6a 01       	movw	r12, r20
    31a0:	7b 01       	movw	r14, r22
    31a2:	60 91 fc 06 	lds	r22, 0x06FC	; 0x8006fc <pxCurrentTCB>
    31a6:	70 91 fd 06 	lds	r23, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    31aa:	62 5f       	subi	r22, 0xF2	; 242
    31ac:	7f 4f       	sbci	r23, 0xFF	; 255
    31ae:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    31b2:	41 e0       	ldi	r20, 0x01	; 1
    31b4:	c7 01       	movw	r24, r14
    31b6:	b6 01       	movw	r22, r12
    31b8:	a2 db       	rcall	.-2236   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    31ba:	ff 90       	pop	r15
    31bc:	ef 90       	pop	r14
    31be:	df 90       	pop	r13
    31c0:	cf 90       	pop	r12
    31c2:	08 95       	ret

000031c4 <vTaskPlaceOnEventListRestricted>:
    31c4:	cf 92       	push	r12
    31c6:	df 92       	push	r13
    31c8:	ef 92       	push	r14
    31ca:	ff 92       	push	r15
    31cc:	cf 93       	push	r28
    31ce:	6a 01       	movw	r12, r20
    31d0:	7b 01       	movw	r14, r22
    31d2:	c2 2f       	mov	r28, r18
    31d4:	60 91 fc 06 	lds	r22, 0x06FC	; 0x8006fc <pxCurrentTCB>
    31d8:	70 91 fd 06 	lds	r23, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    31dc:	62 5f       	subi	r22, 0xF2	; 242
    31de:	7f 4f       	sbci	r23, 0xFF	; 255
    31e0:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    31e4:	cc 23       	and	r28, r28
    31e6:	21 f0       	breq	.+8      	; 0x31f0 <vTaskPlaceOnEventListRestricted+0x2c>
    31e8:	cc 24       	eor	r12, r12
    31ea:	ca 94       	dec	r12
    31ec:	dc 2c       	mov	r13, r12
    31ee:	76 01       	movw	r14, r12
    31f0:	4c 2f       	mov	r20, r28
    31f2:	c7 01       	movw	r24, r14
    31f4:	b6 01       	movw	r22, r12
    31f6:	83 db       	rcall	.-2298   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    31f8:	cf 91       	pop	r28
    31fa:	ff 90       	pop	r15
    31fc:	ef 90       	pop	r14
    31fe:	df 90       	pop	r13
    3200:	cf 90       	pop	r12
    3202:	08 95       	ret

00003204 <xTaskRemoveFromEventList>:
    3204:	0f 93       	push	r16
    3206:	1f 93       	push	r17
    3208:	cf 93       	push	r28
    320a:	df 93       	push	r29
    320c:	dc 01       	movw	r26, r24
    320e:	17 96       	adiw	r26, 0x07	; 7
    3210:	ed 91       	ld	r30, X+
    3212:	fc 91       	ld	r31, X
    3214:	18 97       	sbiw	r26, 0x08	; 8
    3216:	c0 85       	ldd	r28, Z+8	; 0x08
    3218:	d1 85       	ldd	r29, Z+9	; 0x09
    321a:	8e 01       	movw	r16, r28
    321c:	02 5f       	subi	r16, 0xF2	; 242
    321e:	1f 4f       	sbci	r17, 0xFF	; 255
    3220:	c8 01       	movw	r24, r16
    3222:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3226:	80 91 82 06 	lds	r24, 0x0682	; 0x800682 <uxSchedulerSuspended>
    322a:	81 11       	cpse	r24, r1
    322c:	16 c0       	rjmp	.+44     	; 0x325a <xTaskRemoveFromEventList+0x56>
    322e:	0c 50       	subi	r16, 0x0C	; 12
    3230:	11 09       	sbc	r17, r1
    3232:	c8 01       	movw	r24, r16
    3234:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3238:	8a 8d       	ldd	r24, Y+26	; 0x1a
    323a:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <uxTopReadyPriority>
    323e:	98 17       	cp	r25, r24
    3240:	10 f4       	brcc	.+4      	; 0x3246 <xTaskRemoveFromEventList+0x42>
    3242:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <uxTopReadyPriority>
    3246:	bb e0       	ldi	r27, 0x0B	; 11
    3248:	8b 9f       	mul	r24, r27
    324a:	c0 01       	movw	r24, r0
    324c:	11 24       	eor	r1, r1
    324e:	b8 01       	movw	r22, r16
    3250:	80 53       	subi	r24, 0x30	; 48
    3252:	99 4f       	sbci	r25, 0xF9	; 249
    3254:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3258:	05 c0       	rjmp	.+10     	; 0x3264 <xTaskRemoveFromEventList+0x60>
    325a:	b8 01       	movw	r22, r16
    325c:	8b ea       	ldi	r24, 0xAB	; 171
    325e:	96 e0       	ldi	r25, 0x06	; 6
    3260:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3264:	e0 91 fc 06 	lds	r30, 0x06FC	; 0x8006fc <pxCurrentTCB>
    3268:	f0 91 fd 06 	lds	r31, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    326c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    326e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3270:	89 17       	cp	r24, r25
    3272:	20 f4       	brcc	.+8      	; 0x327c <xTaskRemoveFromEventList+0x78>
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <xYieldPending>
    327a:	01 c0       	rjmp	.+2      	; 0x327e <xTaskRemoveFromEventList+0x7a>
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	df 91       	pop	r29
    3280:	cf 91       	pop	r28
    3282:	1f 91       	pop	r17
    3284:	0f 91       	pop	r16
    3286:	08 95       	ret

00003288 <vTaskInternalSetTimeOutState>:
    3288:	20 91 8a 06 	lds	r18, 0x068A	; 0x80068a <xNumOfOverflows>
    328c:	fc 01       	movw	r30, r24
    328e:	20 83       	st	Z, r18
    3290:	40 91 8f 06 	lds	r20, 0x068F	; 0x80068f <xTickCount>
    3294:	50 91 90 06 	lds	r21, 0x0690	; 0x800690 <xTickCount+0x1>
    3298:	60 91 91 06 	lds	r22, 0x0691	; 0x800691 <xTickCount+0x2>
    329c:	70 91 92 06 	lds	r23, 0x0692	; 0x800692 <xTickCount+0x3>
    32a0:	41 83       	std	Z+1, r20	; 0x01
    32a2:	52 83       	std	Z+2, r21	; 0x02
    32a4:	63 83       	std	Z+3, r22	; 0x03
    32a6:	74 83       	std	Z+4, r23	; 0x04
    32a8:	08 95       	ret

000032aa <xTaskCheckForTimeOut>:
    32aa:	cf 92       	push	r12
    32ac:	df 92       	push	r13
    32ae:	ef 92       	push	r14
    32b0:	ff 92       	push	r15
    32b2:	0f 93       	push	r16
    32b4:	1f 93       	push	r17
    32b6:	cf 93       	push	r28
    32b8:	df 93       	push	r29
    32ba:	fb 01       	movw	r30, r22
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	f8 94       	cli
    32c0:	0f 92       	push	r0
    32c2:	40 91 8f 06 	lds	r20, 0x068F	; 0x80068f <xTickCount>
    32c6:	50 91 90 06 	lds	r21, 0x0690	; 0x800690 <xTickCount+0x1>
    32ca:	60 91 91 06 	lds	r22, 0x0691	; 0x800691 <xTickCount+0x2>
    32ce:	70 91 92 06 	lds	r23, 0x0692	; 0x800692 <xTickCount+0x3>
    32d2:	00 81       	ld	r16, Z
    32d4:	11 81       	ldd	r17, Z+1	; 0x01
    32d6:	22 81       	ldd	r18, Z+2	; 0x02
    32d8:	33 81       	ldd	r19, Z+3	; 0x03
    32da:	0f 3f       	cpi	r16, 0xFF	; 255
    32dc:	af ef       	ldi	r26, 0xFF	; 255
    32de:	1a 07       	cpc	r17, r26
    32e0:	2a 07       	cpc	r18, r26
    32e2:	3a 07       	cpc	r19, r26
    32e4:	49 f1       	breq	.+82     	; 0x3338 <xTaskCheckForTimeOut+0x8e>
    32e6:	ec 01       	movw	r28, r24
    32e8:	c9 80       	ldd	r12, Y+1	; 0x01
    32ea:	da 80       	ldd	r13, Y+2	; 0x02
    32ec:	eb 80       	ldd	r14, Y+3	; 0x03
    32ee:	fc 80       	ldd	r15, Y+4	; 0x04
    32f0:	a0 91 8a 06 	lds	r26, 0x068A	; 0x80068a <xNumOfOverflows>
    32f4:	b8 81       	ld	r27, Y
    32f6:	ba 17       	cp	r27, r26
    32f8:	29 f0       	breq	.+10     	; 0x3304 <xTaskCheckForTimeOut+0x5a>
    32fa:	4c 15       	cp	r20, r12
    32fc:	5d 05       	cpc	r21, r13
    32fe:	6e 05       	cpc	r22, r14
    3300:	7f 05       	cpc	r23, r15
    3302:	e0 f4       	brcc	.+56     	; 0x333c <xTaskCheckForTimeOut+0x92>
    3304:	4c 19       	sub	r20, r12
    3306:	5d 09       	sbc	r21, r13
    3308:	6e 09       	sbc	r22, r14
    330a:	7f 09       	sbc	r23, r15
    330c:	40 17       	cp	r20, r16
    330e:	51 07       	cpc	r21, r17
    3310:	62 07       	cpc	r22, r18
    3312:	73 07       	cpc	r23, r19
    3314:	58 f4       	brcc	.+22     	; 0x332c <xTaskCheckForTimeOut+0x82>
    3316:	04 1b       	sub	r16, r20
    3318:	15 0b       	sbc	r17, r21
    331a:	26 0b       	sbc	r18, r22
    331c:	37 0b       	sbc	r19, r23
    331e:	00 83       	st	Z, r16
    3320:	11 83       	std	Z+1, r17	; 0x01
    3322:	22 83       	std	Z+2, r18	; 0x02
    3324:	33 83       	std	Z+3, r19	; 0x03
    3326:	b0 df       	rcall	.-160    	; 0x3288 <vTaskInternalSetTimeOutState>
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	09 c0       	rjmp	.+18     	; 0x333e <xTaskCheckForTimeOut+0x94>
    332c:	10 82       	st	Z, r1
    332e:	11 82       	std	Z+1, r1	; 0x01
    3330:	12 82       	std	Z+2, r1	; 0x02
    3332:	13 82       	std	Z+3, r1	; 0x03
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	03 c0       	rjmp	.+6      	; 0x333e <xTaskCheckForTimeOut+0x94>
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	01 c0       	rjmp	.+2      	; 0x333e <xTaskCheckForTimeOut+0x94>
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	0f 90       	pop	r0
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	1f 91       	pop	r17
    3348:	0f 91       	pop	r16
    334a:	ff 90       	pop	r15
    334c:	ef 90       	pop	r14
    334e:	df 90       	pop	r13
    3350:	cf 90       	pop	r12
    3352:	08 95       	ret

00003354 <vTaskMissedYield>:
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <xYieldPending>
    335a:	08 95       	ret

0000335c <xTaskGetSchedulerState>:
    335c:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <xSchedulerRunning>
    3360:	88 23       	and	r24, r24
    3362:	31 f0       	breq	.+12     	; 0x3370 <xTaskGetSchedulerState+0x14>
    3364:	80 91 82 06 	lds	r24, 0x0682	; 0x800682 <uxSchedulerSuspended>
    3368:	88 23       	and	r24, r24
    336a:	21 f0       	breq	.+8      	; 0x3374 <xTaskGetSchedulerState+0x18>
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	08 95       	ret
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	08 95       	ret
    3374:	82 e0       	ldi	r24, 0x02	; 2
    3376:	08 95       	ret

00003378 <xTaskPriorityInherit>:
    3378:	0f 93       	push	r16
    337a:	1f 93       	push	r17
    337c:	cf 93       	push	r28
    337e:	df 93       	push	r29
    3380:	fc 01       	movw	r30, r24
    3382:	89 2b       	or	r24, r25
    3384:	09 f4       	brne	.+2      	; 0x3388 <xTaskPriorityInherit+0x10>
    3386:	60 c0       	rjmp	.+192    	; 0x3448 <xTaskPriorityInherit+0xd0>
    3388:	82 8d       	ldd	r24, Z+26	; 0x1a
    338a:	a0 91 fc 06 	lds	r26, 0x06FC	; 0x8006fc <pxCurrentTCB>
    338e:	b0 91 fd 06 	lds	r27, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    3392:	5a 96       	adiw	r26, 0x1a	; 26
    3394:	9c 91       	ld	r25, X
    3396:	89 17       	cp	r24, r25
    3398:	08 f0       	brcs	.+2      	; 0x339c <xTaskPriorityInherit+0x24>
    339a:	4a c0       	rjmp	.+148    	; 0x3430 <xTaskPriorityInherit+0xb8>
    339c:	46 85       	ldd	r20, Z+14	; 0x0e
    339e:	57 85       	ldd	r21, Z+15	; 0x0f
    33a0:	60 89       	ldd	r22, Z+16	; 0x10
    33a2:	71 89       	ldd	r23, Z+17	; 0x11
    33a4:	77 23       	and	r23, r23
    33a6:	94 f0       	brlt	.+36     	; 0x33cc <xTaskPriorityInherit+0x54>
    33a8:	a0 91 fc 06 	lds	r26, 0x06FC	; 0x8006fc <pxCurrentTCB>
    33ac:	b0 91 fd 06 	lds	r27, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    33b0:	5a 96       	adiw	r26, 0x1a	; 26
    33b2:	9c 91       	ld	r25, X
    33b4:	44 e0       	ldi	r20, 0x04	; 4
    33b6:	50 e0       	ldi	r21, 0x00	; 0
    33b8:	60 e0       	ldi	r22, 0x00	; 0
    33ba:	70 e0       	ldi	r23, 0x00	; 0
    33bc:	49 1b       	sub	r20, r25
    33be:	51 09       	sbc	r21, r1
    33c0:	61 09       	sbc	r22, r1
    33c2:	71 09       	sbc	r23, r1
    33c4:	46 87       	std	Z+14, r20	; 0x0e
    33c6:	57 87       	std	Z+15, r21	; 0x0f
    33c8:	60 8b       	std	Z+16, r22	; 0x10
    33ca:	71 8b       	std	Z+17, r23	; 0x11
    33cc:	2b e0       	ldi	r18, 0x0B	; 11
    33ce:	82 9f       	mul	r24, r18
    33d0:	c0 01       	movw	r24, r0
    33d2:	11 24       	eor	r1, r1
    33d4:	80 53       	subi	r24, 0x30	; 48
    33d6:	99 4f       	sbci	r25, 0xF9	; 249
    33d8:	24 85       	ldd	r18, Z+12	; 0x0c
    33da:	35 85       	ldd	r19, Z+13	; 0x0d
    33dc:	28 17       	cp	r18, r24
    33de:	39 07       	cpc	r19, r25
    33e0:	f1 f4       	brne	.+60     	; 0x341e <xTaskPriorityInherit+0xa6>
    33e2:	8f 01       	movw	r16, r30
    33e4:	ef 01       	movw	r28, r30
    33e6:	22 96       	adiw	r28, 0x02	; 2
    33e8:	ce 01       	movw	r24, r28
    33ea:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    33ee:	e0 91 fc 06 	lds	r30, 0x06FC	; 0x8006fc <pxCurrentTCB>
    33f2:	f0 91 fd 06 	lds	r31, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    33f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    33f8:	f8 01       	movw	r30, r16
    33fa:	82 8f       	std	Z+26, r24	; 0x1a
    33fc:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <uxTopReadyPriority>
    3400:	98 17       	cp	r25, r24
    3402:	10 f4       	brcc	.+4      	; 0x3408 <xTaskPriorityInherit+0x90>
    3404:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <uxTopReadyPriority>
    3408:	fb e0       	ldi	r31, 0x0B	; 11
    340a:	8f 9f       	mul	r24, r31
    340c:	c0 01       	movw	r24, r0
    340e:	11 24       	eor	r1, r1
    3410:	be 01       	movw	r22, r28
    3412:	80 53       	subi	r24, 0x30	; 48
    3414:	99 4f       	sbci	r25, 0xF9	; 249
    3416:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	16 c0       	rjmp	.+44     	; 0x344a <xTaskPriorityInherit+0xd2>
    341e:	a0 91 fc 06 	lds	r26, 0x06FC	; 0x8006fc <pxCurrentTCB>
    3422:	b0 91 fd 06 	lds	r27, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    3426:	5a 96       	adiw	r26, 0x1a	; 26
    3428:	8c 91       	ld	r24, X
    342a:	82 8f       	std	Z+26, r24	; 0x1a
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	0d c0       	rjmp	.+26     	; 0x344a <xTaskPriorityInherit+0xd2>
    3430:	a0 91 fc 06 	lds	r26, 0x06FC	; 0x8006fc <pxCurrentTCB>
    3434:	b0 91 fd 06 	lds	r27, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	24 a5       	ldd	r18, Z+44	; 0x2c
    343c:	5a 96       	adiw	r26, 0x1a	; 26
    343e:	9c 91       	ld	r25, X
    3440:	29 17       	cp	r18, r25
    3442:	18 f0       	brcs	.+6      	; 0x344a <xTaskPriorityInherit+0xd2>
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	01 c0       	rjmp	.+2      	; 0x344a <xTaskPriorityInherit+0xd2>
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	df 91       	pop	r29
    344c:	cf 91       	pop	r28
    344e:	1f 91       	pop	r17
    3450:	0f 91       	pop	r16
    3452:	08 95       	ret

00003454 <xTaskPriorityDisinherit>:
    3454:	0f 93       	push	r16
    3456:	1f 93       	push	r17
    3458:	cf 93       	push	r28
    345a:	df 93       	push	r29
    345c:	fc 01       	movw	r30, r24
    345e:	89 2b       	or	r24, r25
    3460:	79 f1       	breq	.+94     	; 0x34c0 <xTaskPriorityDisinherit+0x6c>
    3462:	85 a5       	ldd	r24, Z+45	; 0x2d
    3464:	81 50       	subi	r24, 0x01	; 1
    3466:	85 a7       	std	Z+45, r24	; 0x2d
    3468:	22 8d       	ldd	r18, Z+26	; 0x1a
    346a:	94 a5       	ldd	r25, Z+44	; 0x2c
    346c:	29 17       	cp	r18, r25
    346e:	51 f1       	breq	.+84     	; 0x34c4 <xTaskPriorityDisinherit+0x70>
    3470:	81 11       	cpse	r24, r1
    3472:	2a c0       	rjmp	.+84     	; 0x34c8 <xTaskPriorityDisinherit+0x74>
    3474:	ef 01       	movw	r28, r30
    3476:	8f 01       	movw	r16, r30
    3478:	0e 5f       	subi	r16, 0xFE	; 254
    347a:	1f 4f       	sbci	r17, 0xFF	; 255
    347c:	c8 01       	movw	r24, r16
    347e:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3482:	8c a5       	ldd	r24, Y+44	; 0x2c
    3484:	8a 8f       	std	Y+26, r24	; 0x1a
    3486:	44 e0       	ldi	r20, 0x04	; 4
    3488:	50 e0       	ldi	r21, 0x00	; 0
    348a:	60 e0       	ldi	r22, 0x00	; 0
    348c:	70 e0       	ldi	r23, 0x00	; 0
    348e:	48 1b       	sub	r20, r24
    3490:	51 09       	sbc	r21, r1
    3492:	61 09       	sbc	r22, r1
    3494:	71 09       	sbc	r23, r1
    3496:	4e 87       	std	Y+14, r20	; 0x0e
    3498:	5f 87       	std	Y+15, r21	; 0x0f
    349a:	68 8b       	std	Y+16, r22	; 0x10
    349c:	79 8b       	std	Y+17, r23	; 0x11
    349e:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <uxTopReadyPriority>
    34a2:	98 17       	cp	r25, r24
    34a4:	10 f4       	brcc	.+4      	; 0x34aa <xTaskPriorityDisinherit+0x56>
    34a6:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <uxTopReadyPriority>
    34aa:	2b e0       	ldi	r18, 0x0B	; 11
    34ac:	82 9f       	mul	r24, r18
    34ae:	c0 01       	movw	r24, r0
    34b0:	11 24       	eor	r1, r1
    34b2:	b8 01       	movw	r22, r16
    34b4:	80 53       	subi	r24, 0x30	; 48
    34b6:	99 4f       	sbci	r25, 0xF9	; 249
    34b8:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	05 c0       	rjmp	.+10     	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	03 c0       	rjmp	.+6      	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	01 c0       	rjmp	.+2      	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	df 91       	pop	r29
    34cc:	cf 91       	pop	r28
    34ce:	1f 91       	pop	r17
    34d0:	0f 91       	pop	r16
    34d2:	08 95       	ret

000034d4 <vTaskPriorityDisinheritAfterTimeout>:
    34d4:	0f 93       	push	r16
    34d6:	1f 93       	push	r17
    34d8:	cf 93       	push	r28
    34da:	df 93       	push	r29
    34dc:	fc 01       	movw	r30, r24
    34de:	89 2b       	or	r24, r25
    34e0:	09 f4       	brne	.+2      	; 0x34e4 <vTaskPriorityDisinheritAfterTimeout+0x10>
    34e2:	3f c0       	rjmp	.+126    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34e4:	84 a5       	ldd	r24, Z+44	; 0x2c
    34e6:	86 17       	cp	r24, r22
    34e8:	08 f4       	brcc	.+2      	; 0x34ec <vTaskPriorityDisinheritAfterTimeout+0x18>
    34ea:	86 2f       	mov	r24, r22
    34ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    34ee:	98 17       	cp	r25, r24
    34f0:	c1 f1       	breq	.+112    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34f2:	25 a5       	ldd	r18, Z+45	; 0x2d
    34f4:	21 30       	cpi	r18, 0x01	; 1
    34f6:	a9 f5       	brne	.+106    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34f8:	82 8f       	std	Z+26, r24	; 0x1a
    34fa:	46 85       	ldd	r20, Z+14	; 0x0e
    34fc:	57 85       	ldd	r21, Z+15	; 0x0f
    34fe:	60 89       	ldd	r22, Z+16	; 0x10
    3500:	71 89       	ldd	r23, Z+17	; 0x11
    3502:	77 23       	and	r23, r23
    3504:	64 f0       	brlt	.+24     	; 0x351e <vTaskPriorityDisinheritAfterTimeout+0x4a>
    3506:	44 e0       	ldi	r20, 0x04	; 4
    3508:	50 e0       	ldi	r21, 0x00	; 0
    350a:	60 e0       	ldi	r22, 0x00	; 0
    350c:	70 e0       	ldi	r23, 0x00	; 0
    350e:	48 1b       	sub	r20, r24
    3510:	51 09       	sbc	r21, r1
    3512:	61 09       	sbc	r22, r1
    3514:	71 09       	sbc	r23, r1
    3516:	46 87       	std	Z+14, r20	; 0x0e
    3518:	57 87       	std	Z+15, r21	; 0x0f
    351a:	60 8b       	std	Z+16, r22	; 0x10
    351c:	71 8b       	std	Z+17, r23	; 0x11
    351e:	2b e0       	ldi	r18, 0x0B	; 11
    3520:	92 9f       	mul	r25, r18
    3522:	c0 01       	movw	r24, r0
    3524:	11 24       	eor	r1, r1
    3526:	80 53       	subi	r24, 0x30	; 48
    3528:	99 4f       	sbci	r25, 0xF9	; 249
    352a:	24 85       	ldd	r18, Z+12	; 0x0c
    352c:	35 85       	ldd	r19, Z+13	; 0x0d
    352e:	28 17       	cp	r18, r24
    3530:	39 07       	cpc	r19, r25
    3532:	b9 f4       	brne	.+46     	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3534:	ef 01       	movw	r28, r30
    3536:	8f 01       	movw	r16, r30
    3538:	0e 5f       	subi	r16, 0xFE	; 254
    353a:	1f 4f       	sbci	r17, 0xFF	; 255
    353c:	c8 01       	movw	r24, r16
    353e:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3542:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3544:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <uxTopReadyPriority>
    3548:	98 17       	cp	r25, r24
    354a:	10 f4       	brcc	.+4      	; 0x3550 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    354c:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <uxTopReadyPriority>
    3550:	2b e0       	ldi	r18, 0x0B	; 11
    3552:	82 9f       	mul	r24, r18
    3554:	c0 01       	movw	r24, r0
    3556:	11 24       	eor	r1, r1
    3558:	b8 01       	movw	r22, r16
    355a:	80 53       	subi	r24, 0x30	; 48
    355c:	99 4f       	sbci	r25, 0xF9	; 249
    355e:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3562:	df 91       	pop	r29
    3564:	cf 91       	pop	r28
    3566:	1f 91       	pop	r17
    3568:	0f 91       	pop	r16
    356a:	08 95       	ret

0000356c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    356c:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <pxCurrentTCB>
    3570:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    3574:	89 2b       	or	r24, r25
    3576:	39 f0       	breq	.+14     	; 0x3586 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    3578:	e0 91 fc 06 	lds	r30, 0x06FC	; 0x8006fc <pxCurrentTCB>
    357c:	f0 91 fd 06 	lds	r31, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
    3580:	85 a5       	ldd	r24, Z+45	; 0x2d
    3582:	8f 5f       	subi	r24, 0xFF	; 255
    3584:	85 a7       	std	Z+45, r24	; 0x2d
		}

		return pxCurrentTCB;
    3586:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <pxCurrentTCB>
    358a:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <pxCurrentTCB+0x1>
	}
    358e:	08 95       	ret

00003590 <prvInsertTimerInActiveList>:
{
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );
	return pxTimer->pcTimerName;
}
    3590:	cf 92       	push	r12
    3592:	df 92       	push	r13
    3594:	ef 92       	push	r14
    3596:	ff 92       	push	r15
    3598:	0f 93       	push	r16
    359a:	1f 93       	push	r17
    359c:	fc 01       	movw	r30, r24
    359e:	42 83       	std	Z+2, r20	; 0x02
    35a0:	53 83       	std	Z+3, r21	; 0x03
    35a2:	64 83       	std	Z+4, r22	; 0x04
    35a4:	75 83       	std	Z+5, r23	; 0x05
    35a6:	93 87       	std	Z+11, r25	; 0x0b
    35a8:	82 87       	std	Z+10, r24	; 0x0a
    35aa:	04 17       	cp	r16, r20
    35ac:	15 07       	cpc	r17, r21
    35ae:	26 07       	cpc	r18, r22
    35b0:	37 07       	cpc	r19, r23
    35b2:	c0 f0       	brcs	.+48     	; 0x35e4 <prvInsertTimerInActiveList+0x54>
    35b4:	0c 19       	sub	r16, r12
    35b6:	1d 09       	sbc	r17, r13
    35b8:	2e 09       	sbc	r18, r14
    35ba:	3f 09       	sbc	r19, r15
    35bc:	86 85       	ldd	r24, Z+14	; 0x0e
    35be:	97 85       	ldd	r25, Z+15	; 0x0f
    35c0:	a0 89       	ldd	r26, Z+16	; 0x10
    35c2:	b1 89       	ldd	r27, Z+17	; 0x11
    35c4:	08 17       	cp	r16, r24
    35c6:	19 07       	cpc	r17, r25
    35c8:	2a 07       	cpc	r18, r26
    35ca:	3b 07       	cpc	r19, r27
    35cc:	00 f5       	brcc	.+64     	; 0x360e <prvInsertTimerInActiveList+0x7e>
    35ce:	bf 01       	movw	r22, r30
    35d0:	6e 5f       	subi	r22, 0xFE	; 254
    35d2:	7f 4f       	sbci	r23, 0xFF	; 255
    35d4:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <pxOverflowTimerList>
    35d8:	90 91 07 07 	lds	r25, 0x0707	; 0x800707 <pxOverflowTimerList+0x1>
    35dc:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	18 c0       	rjmp	.+48     	; 0x3614 <prvInsertTimerInActiveList+0x84>
    35e4:	0c 15       	cp	r16, r12
    35e6:	1d 05       	cpc	r17, r13
    35e8:	2e 05       	cpc	r18, r14
    35ea:	3f 05       	cpc	r19, r15
    35ec:	28 f4       	brcc	.+10     	; 0x35f8 <prvInsertTimerInActiveList+0x68>
    35ee:	4c 15       	cp	r20, r12
    35f0:	5d 05       	cpc	r21, r13
    35f2:	6e 05       	cpc	r22, r14
    35f4:	7f 05       	cpc	r23, r15
    35f6:	68 f4       	brcc	.+26     	; 0x3612 <prvInsertTimerInActiveList+0x82>
    35f8:	bf 01       	movw	r22, r30
    35fa:	6e 5f       	subi	r22, 0xFE	; 254
    35fc:	7f 4f       	sbci	r23, 0xFF	; 255
    35fe:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <pxCurrentTimerList>
    3602:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <pxCurrentTimerList+0x1>
    3606:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	03 c0       	rjmp	.+6      	; 0x3614 <prvInsertTimerInActiveList+0x84>
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	01 c0       	rjmp	.+2      	; 0x3614 <prvInsertTimerInActiveList+0x84>
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	1f 91       	pop	r17
    3616:	0f 91       	pop	r16
    3618:	ff 90       	pop	r15
    361a:	ef 90       	pop	r14
    361c:	df 90       	pop	r13
    361e:	cf 90       	pop	r12
    3620:	08 95       	ret

00003622 <prvCheckForValidListAndQueue>:
    3622:	0f b6       	in	r0, 0x3f	; 63
    3624:	f8 94       	cli
    3626:	0f 92       	push	r0
    3628:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <xTimerQueue>
    362c:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <xTimerQueue+0x1>
    3630:	89 2b       	or	r24, r25
    3632:	e9 f4       	brne	.+58     	; 0x366e <prvCheckForValidListAndQueue+0x4c>
    3634:	85 e1       	ldi	r24, 0x15	; 21
    3636:	97 e0       	ldi	r25, 0x07	; 7
    3638:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    363c:	8a e0       	ldi	r24, 0x0A	; 10
    363e:	97 e0       	ldi	r25, 0x07	; 7
    3640:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    3644:	85 e1       	ldi	r24, 0x15	; 21
    3646:	97 e0       	ldi	r25, 0x07	; 7
    3648:	90 93 09 07 	sts	0x0709, r25	; 0x800709 <pxCurrentTimerList+0x1>
    364c:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <pxCurrentTimerList>
    3650:	8a e0       	ldi	r24, 0x0A	; 10
    3652:	97 e0       	ldi	r25, 0x07	; 7
    3654:	90 93 07 07 	sts	0x0707, r25	; 0x800707 <pxOverflowTimerList+0x1>
    3658:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <pxOverflowTimerList>
    365c:	40 e0       	ldi	r20, 0x00	; 0
    365e:	67 e0       	ldi	r22, 0x07	; 7
    3660:	8a e0       	ldi	r24, 0x0A	; 10
    3662:	0e 94 a7 09 	call	0x134e	; 0x134e <xQueueGenericCreate>
    3666:	90 93 05 07 	sts	0x0705, r25	; 0x800705 <xTimerQueue+0x1>
    366a:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <xTimerQueue>
    366e:	0f 90       	pop	r0
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	08 95       	ret

00003674 <xTimerCreateTimerTask>:
    3674:	ef 92       	push	r14
    3676:	ff 92       	push	r15
    3678:	0f 93       	push	r16
    367a:	d3 df       	rcall	.-90     	; 0x3622 <prvCheckForValidListAndQueue>
    367c:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <xTimerQueue>
    3680:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <xTimerQueue+0x1>
    3684:	89 2b       	or	r24, r25
    3686:	89 f0       	breq	.+34     	; 0x36aa <xTimerCreateTimerTask+0x36>
    3688:	0f 2e       	mov	r0, r31
    368a:	f2 e0       	ldi	r31, 0x02	; 2
    368c:	ef 2e       	mov	r14, r31
    368e:	f7 e0       	ldi	r31, 0x07	; 7
    3690:	ff 2e       	mov	r15, r31
    3692:	f0 2d       	mov	r31, r0
    3694:	03 e0       	ldi	r16, 0x03	; 3
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	40 e8       	ldi	r20, 0x80	; 128
    369c:	50 e0       	ldi	r21, 0x00	; 0
    369e:	6b e1       	ldi	r22, 0x1B	; 27
    36a0:	72 e0       	ldi	r23, 0x02	; 2
    36a2:	85 e8       	ldi	r24, 0x85	; 133
    36a4:	9c e1       	ldi	r25, 0x1C	; 28
    36a6:	a2 d9       	rcall	.-3260   	; 0x29ec <xTaskCreate>
    36a8:	01 c0       	rjmp	.+2      	; 0x36ac <xTimerCreateTimerTask+0x38>
    36aa:	80 e0       	ldi	r24, 0x00	; 0
    36ac:	0f 91       	pop	r16
    36ae:	ff 90       	pop	r15
    36b0:	ef 90       	pop	r14
    36b2:	08 95       	ret

000036b4 <xTimerCreate>:
    36b4:	7f 92       	push	r7
    36b6:	8f 92       	push	r8
    36b8:	9f 92       	push	r9
    36ba:	af 92       	push	r10
    36bc:	bf 92       	push	r11
    36be:	cf 92       	push	r12
    36c0:	df 92       	push	r13
    36c2:	ef 92       	push	r14
    36c4:	ff 92       	push	r15
    36c6:	0f 93       	push	r16
    36c8:	1f 93       	push	r17
    36ca:	cf 93       	push	r28
    36cc:	df 93       	push	r29
    36ce:	6c 01       	movw	r12, r24
    36d0:	4a 01       	movw	r8, r20
    36d2:	5b 01       	movw	r10, r22
    36d4:	72 2e       	mov	r7, r18
    36d6:	87 e1       	ldi	r24, 0x17	; 23
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    36de:	ec 01       	movw	r28, r24
    36e0:	89 2b       	or	r24, r25
    36e2:	81 f0       	breq	.+32     	; 0x3704 <xTimerCreate+0x50>
    36e4:	9e df       	rcall	.-196    	; 0x3622 <prvCheckForValidListAndQueue>
    36e6:	d9 82       	std	Y+1, r13	; 0x01
    36e8:	c8 82       	st	Y, r12
    36ea:	8e 86       	std	Y+14, r8	; 0x0e
    36ec:	9f 86       	std	Y+15, r9	; 0x0f
    36ee:	a8 8a       	std	Y+16, r10	; 0x10
    36f0:	b9 8a       	std	Y+17, r11	; 0x11
    36f2:	7a 8a       	std	Y+18, r7	; 0x12
    36f4:	1c 8b       	std	Y+20, r17	; 0x14
    36f6:	0b 8b       	std	Y+19, r16	; 0x13
    36f8:	fe 8a       	std	Y+22, r15	; 0x16
    36fa:	ed 8a       	std	Y+21, r14	; 0x15
    36fc:	ce 01       	movw	r24, r28
    36fe:	02 96       	adiw	r24, 0x02	; 2
    3700:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    3704:	ce 01       	movw	r24, r28
    3706:	df 91       	pop	r29
    3708:	cf 91       	pop	r28
    370a:	1f 91       	pop	r17
    370c:	0f 91       	pop	r16
    370e:	ff 90       	pop	r15
    3710:	ef 90       	pop	r14
    3712:	df 90       	pop	r13
    3714:	cf 90       	pop	r12
    3716:	bf 90       	pop	r11
    3718:	af 90       	pop	r10
    371a:	9f 90       	pop	r9
    371c:	8f 90       	pop	r8
    371e:	7f 90       	pop	r7
    3720:	08 95       	ret

00003722 <xTimerGenericCommand>:
    3722:	8f 92       	push	r8
    3724:	9f 92       	push	r9
    3726:	af 92       	push	r10
    3728:	bf 92       	push	r11
    372a:	cf 92       	push	r12
    372c:	df 92       	push	r13
    372e:	ef 92       	push	r14
    3730:	ff 92       	push	r15
    3732:	0f 93       	push	r16
    3734:	1f 93       	push	r17
    3736:	cf 93       	push	r28
    3738:	df 93       	push	r29
    373a:	cd b7       	in	r28, 0x3d	; 61
    373c:	de b7       	in	r29, 0x3e	; 62
    373e:	27 97       	sbiw	r28, 0x07	; 7
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	f8 94       	cli
    3744:	de bf       	out	0x3e, r29	; 62
    3746:	0f be       	out	0x3f, r0	; 63
    3748:	cd bf       	out	0x3d, r28	; 61
    374a:	e0 91 04 07 	lds	r30, 0x0704	; 0x800704 <xTimerQueue>
    374e:	f0 91 05 07 	lds	r31, 0x0705	; 0x800705 <xTimerQueue+0x1>
    3752:	30 97       	sbiw	r30, 0x00	; 0
    3754:	81 f1       	breq	.+96     	; 0x37b6 <xTimerGenericCommand+0x94>
    3756:	69 83       	std	Y+1, r22	; 0x01
    3758:	2a 83       	std	Y+2, r18	; 0x02
    375a:	3b 83       	std	Y+3, r19	; 0x03
    375c:	4c 83       	std	Y+4, r20	; 0x04
    375e:	5d 83       	std	Y+5, r21	; 0x05
    3760:	9f 83       	std	Y+7, r25	; 0x07
    3762:	8e 83       	std	Y+6, r24	; 0x06
    3764:	66 30       	cpi	r22, 0x06	; 6
    3766:	f4 f4       	brge	.+60     	; 0x37a4 <xTimerGenericCommand+0x82>
    3768:	f9 dd       	rcall	.-1038   	; 0x335c <xTaskGetSchedulerState>
    376a:	82 30       	cpi	r24, 0x02	; 2
    376c:	69 f4       	brne	.+26     	; 0x3788 <xTimerGenericCommand+0x66>
    376e:	00 e0       	ldi	r16, 0x00	; 0
    3770:	a7 01       	movw	r20, r14
    3772:	96 01       	movw	r18, r12
    3774:	be 01       	movw	r22, r28
    3776:	6f 5f       	subi	r22, 0xFF	; 255
    3778:	7f 4f       	sbci	r23, 0xFF	; 255
    377a:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <xTimerQueue>
    377e:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <xTimerQueue+0x1>
    3782:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    3786:	18 c0       	rjmp	.+48     	; 0x37b8 <xTimerGenericCommand+0x96>
    3788:	00 e0       	ldi	r16, 0x00	; 0
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	a9 01       	movw	r20, r18
    3790:	be 01       	movw	r22, r28
    3792:	6f 5f       	subi	r22, 0xFF	; 255
    3794:	7f 4f       	sbci	r23, 0xFF	; 255
    3796:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <xTimerQueue>
    379a:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <xTimerQueue+0x1>
    379e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    37a2:	0a c0       	rjmp	.+20     	; 0x37b8 <xTimerGenericCommand+0x96>
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	a8 01       	movw	r20, r16
    37a8:	be 01       	movw	r22, r28
    37aa:	6f 5f       	subi	r22, 0xFF	; 255
    37ac:	7f 4f       	sbci	r23, 0xFF	; 255
    37ae:	cf 01       	movw	r24, r30
    37b0:	0e 94 90 0a 	call	0x1520	; 0x1520 <xQueueGenericSendFromISR>
    37b4:	01 c0       	rjmp	.+2      	; 0x37b8 <xTimerGenericCommand+0x96>
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	27 96       	adiw	r28, 0x07	; 7
    37ba:	0f b6       	in	r0, 0x3f	; 63
    37bc:	f8 94       	cli
    37be:	de bf       	out	0x3e, r29	; 62
    37c0:	0f be       	out	0x3f, r0	; 63
    37c2:	cd bf       	out	0x3d, r28	; 61
    37c4:	df 91       	pop	r29
    37c6:	cf 91       	pop	r28
    37c8:	1f 91       	pop	r17
    37ca:	0f 91       	pop	r16
    37cc:	ff 90       	pop	r15
    37ce:	ef 90       	pop	r14
    37d0:	df 90       	pop	r13
    37d2:	cf 90       	pop	r12
    37d4:	bf 90       	pop	r11
    37d6:	af 90       	pop	r10
    37d8:	9f 90       	pop	r9
    37da:	8f 90       	pop	r8
    37dc:	08 95       	ret

000037de <prvSampleTimeNow>:
    37de:	2f 92       	push	r2
    37e0:	3f 92       	push	r3
    37e2:	4f 92       	push	r4
    37e4:	5f 92       	push	r5
    37e6:	6f 92       	push	r6
    37e8:	7f 92       	push	r7
    37ea:	8f 92       	push	r8
    37ec:	9f 92       	push	r9
    37ee:	af 92       	push	r10
    37f0:	bf 92       	push	r11
    37f2:	cf 92       	push	r12
    37f4:	df 92       	push	r13
    37f6:	ef 92       	push	r14
    37f8:	ff 92       	push	r15
    37fa:	0f 93       	push	r16
    37fc:	1f 93       	push	r17
    37fe:	cf 93       	push	r28
    3800:	df 93       	push	r29
    3802:	1c 01       	movw	r2, r24
    3804:	8e da       	rcall	.-2788   	; 0x2d22 <xTaskGetTickCount>
    3806:	2b 01       	movw	r4, r22
    3808:	3c 01       	movw	r6, r24
    380a:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <xLastTime.2378>
    380e:	90 91 ff 06 	lds	r25, 0x06FF	; 0x8006ff <xLastTime.2378+0x1>
    3812:	a0 91 00 07 	lds	r26, 0x0700	; 0x800700 <xLastTime.2378+0x2>
    3816:	b0 91 01 07 	lds	r27, 0x0701	; 0x800701 <xLastTime.2378+0x3>
    381a:	48 16       	cp	r4, r24
    381c:	59 06       	cpc	r5, r25
    381e:	6a 06       	cpc	r6, r26
    3820:	7b 06       	cpc	r7, r27
    3822:	08 f0       	brcs	.+2      	; 0x3826 <prvSampleTimeNow+0x48>
    3824:	53 c0       	rjmp	.+166    	; 0x38cc <prvSampleTimeNow+0xee>
    3826:	3b c0       	rjmp	.+118    	; 0x389e <prvSampleTimeNow+0xc0>
    3828:	07 80       	ldd	r0, Z+7	; 0x07
    382a:	f0 85       	ldd	r31, Z+8	; 0x08
    382c:	e0 2d       	mov	r30, r0
    382e:	80 80       	ld	r8, Z
    3830:	91 80       	ldd	r9, Z+1	; 0x01
    3832:	a2 80       	ldd	r10, Z+2	; 0x02
    3834:	b3 80       	ldd	r11, Z+3	; 0x03
    3836:	c0 85       	ldd	r28, Z+8	; 0x08
    3838:	d1 85       	ldd	r29, Z+9	; 0x09
    383a:	8e 01       	movw	r16, r28
    383c:	0e 5f       	subi	r16, 0xFE	; 254
    383e:	1f 4f       	sbci	r17, 0xFF	; 255
    3840:	c8 01       	movw	r24, r16
    3842:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3846:	ed 89       	ldd	r30, Y+21	; 0x15
    3848:	fe 89       	ldd	r31, Y+22	; 0x16
    384a:	ce 01       	movw	r24, r28
    384c:	19 95       	eicall
    384e:	8a 89       	ldd	r24, Y+18	; 0x12
    3850:	81 30       	cpi	r24, 0x01	; 1
    3852:	29 f5       	brne	.+74     	; 0x389e <prvSampleTimeNow+0xc0>
    3854:	8e 85       	ldd	r24, Y+14	; 0x0e
    3856:	9f 85       	ldd	r25, Y+15	; 0x0f
    3858:	a8 89       	ldd	r26, Y+16	; 0x10
    385a:	b9 89       	ldd	r27, Y+17	; 0x11
    385c:	88 0d       	add	r24, r8
    385e:	99 1d       	adc	r25, r9
    3860:	aa 1d       	adc	r26, r10
    3862:	bb 1d       	adc	r27, r11
    3864:	88 16       	cp	r8, r24
    3866:	99 06       	cpc	r9, r25
    3868:	aa 06       	cpc	r10, r26
    386a:	bb 06       	cpc	r11, r27
    386c:	70 f4       	brcc	.+28     	; 0x388a <prvSampleTimeNow+0xac>
    386e:	8a 83       	std	Y+2, r24	; 0x02
    3870:	9b 83       	std	Y+3, r25	; 0x03
    3872:	ac 83       	std	Y+4, r26	; 0x04
    3874:	bd 83       	std	Y+5, r27	; 0x05
    3876:	db 87       	std	Y+11, r29	; 0x0b
    3878:	ca 87       	std	Y+10, r28	; 0x0a
    387a:	b8 01       	movw	r22, r16
    387c:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <pxCurrentTimerList>
    3880:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <pxCurrentTimerList+0x1>
    3884:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    3888:	0a c0       	rjmp	.+20     	; 0x389e <prvSampleTimeNow+0xc0>
    388a:	c1 2c       	mov	r12, r1
    388c:	d1 2c       	mov	r13, r1
    388e:	76 01       	movw	r14, r12
    3890:	00 e0       	ldi	r16, 0x00	; 0
    3892:	10 e0       	ldi	r17, 0x00	; 0
    3894:	a5 01       	movw	r20, r10
    3896:	94 01       	movw	r18, r8
    3898:	60 e0       	ldi	r22, 0x00	; 0
    389a:	ce 01       	movw	r24, r28
    389c:	42 df       	rcall	.-380    	; 0x3722 <xTimerGenericCommand>
    389e:	e0 91 08 07 	lds	r30, 0x0708	; 0x800708 <pxCurrentTimerList>
    38a2:	f0 91 09 07 	lds	r31, 0x0709	; 0x800709 <pxCurrentTimerList+0x1>
    38a6:	80 81       	ld	r24, Z
    38a8:	81 11       	cpse	r24, r1
    38aa:	be cf       	rjmp	.-132    	; 0x3828 <prvSampleTimeNow+0x4a>
    38ac:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <pxOverflowTimerList>
    38b0:	90 91 07 07 	lds	r25, 0x0707	; 0x800707 <pxOverflowTimerList+0x1>
    38b4:	90 93 09 07 	sts	0x0709, r25	; 0x800709 <pxCurrentTimerList+0x1>
    38b8:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <pxCurrentTimerList>
    38bc:	f0 93 07 07 	sts	0x0707, r31	; 0x800707 <pxOverflowTimerList+0x1>
    38c0:	e0 93 06 07 	sts	0x0706, r30	; 0x800706 <pxOverflowTimerList>
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	f1 01       	movw	r30, r2
    38c8:	80 83       	st	Z, r24
    38ca:	02 c0       	rjmp	.+4      	; 0x38d0 <prvSampleTimeNow+0xf2>
    38cc:	f1 01       	movw	r30, r2
    38ce:	10 82       	st	Z, r1
    38d0:	40 92 fe 06 	sts	0x06FE, r4	; 0x8006fe <xLastTime.2378>
    38d4:	50 92 ff 06 	sts	0x06FF, r5	; 0x8006ff <xLastTime.2378+0x1>
    38d8:	60 92 00 07 	sts	0x0700, r6	; 0x800700 <xLastTime.2378+0x2>
    38dc:	70 92 01 07 	sts	0x0701, r7	; 0x800701 <xLastTime.2378+0x3>
    38e0:	c3 01       	movw	r24, r6
    38e2:	b2 01       	movw	r22, r4
    38e4:	df 91       	pop	r29
    38e6:	cf 91       	pop	r28
    38e8:	1f 91       	pop	r17
    38ea:	0f 91       	pop	r16
    38ec:	ff 90       	pop	r15
    38ee:	ef 90       	pop	r14
    38f0:	df 90       	pop	r13
    38f2:	cf 90       	pop	r12
    38f4:	bf 90       	pop	r11
    38f6:	af 90       	pop	r10
    38f8:	9f 90       	pop	r9
    38fa:	8f 90       	pop	r8
    38fc:	7f 90       	pop	r7
    38fe:	6f 90       	pop	r6
    3900:	5f 90       	pop	r5
    3902:	4f 90       	pop	r4
    3904:	3f 90       	pop	r3
    3906:	2f 90       	pop	r2
    3908:	08 95       	ret

0000390a <prvTimerTask>:
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
    3912:	60 97       	sbiw	r28, 0x10	; 16
    3914:	0f b6       	in	r0, 0x3f	; 63
    3916:	f8 94       	cli
    3918:	de bf       	out	0x3e, r29	; 62
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	cd bf       	out	0x3d, r28	; 61
    391e:	ce 01       	movw	r24, r28
    3920:	01 96       	adiw	r24, 0x01	; 1
    3922:	9a 87       	std	Y+10, r25	; 0x0a
    3924:	89 87       	std	Y+9, r24	; 0x09
    3926:	81 2c       	mov	r8, r1
    3928:	91 2c       	mov	r9, r1
    392a:	a1 2c       	mov	r10, r1
    392c:	b1 2c       	mov	r11, r1
    392e:	69 84       	ldd	r6, Y+9	; 0x09
    3930:	7a 84       	ldd	r7, Y+10	; 0x0a
    3932:	e0 91 08 07 	lds	r30, 0x0708	; 0x800708 <pxCurrentTimerList>
    3936:	f0 91 09 07 	lds	r31, 0x0709	; 0x800709 <pxCurrentTimerList+0x1>
    393a:	80 81       	ld	r24, Z
    393c:	88 23       	and	r24, r24
    393e:	09 f4       	brne	.+2      	; 0x3942 <prvTimerTask+0x38>
    3940:	f2 c0       	rjmp	.+484    	; 0x3b26 <prvTimerTask+0x21c>
    3942:	07 80       	ldd	r0, Z+7	; 0x07
    3944:	f0 85       	ldd	r31, Z+8	; 0x08
    3946:	e0 2d       	mov	r30, r0
    3948:	20 80       	ld	r2, Z
    394a:	31 80       	ldd	r3, Z+1	; 0x01
    394c:	42 80       	ldd	r4, Z+2	; 0x02
    394e:	53 80       	ldd	r5, Z+3	; 0x03
    3950:	e2 d9       	rcall	.-3132   	; 0x2d16 <vTaskSuspendAll>
    3952:	ce 01       	movw	r24, r28
    3954:	01 96       	adiw	r24, 0x01	; 1
    3956:	43 df       	rcall	.-378    	; 0x37de <prvSampleTimeNow>
    3958:	6b 87       	std	Y+11, r22	; 0x0b
    395a:	7c 87       	std	Y+12, r23	; 0x0c
    395c:	8d 87       	std	Y+13, r24	; 0x0d
    395e:	9e 87       	std	Y+14, r25	; 0x0e
    3960:	89 81       	ldd	r24, Y+1	; 0x01
    3962:	81 11       	cpse	r24, r1
    3964:	5d c0       	rjmp	.+186    	; 0x3a20 <prvTimerTask+0x116>
    3966:	8b 85       	ldd	r24, Y+11	; 0x0b
    3968:	9c 85       	ldd	r25, Y+12	; 0x0c
    396a:	ad 85       	ldd	r26, Y+13	; 0x0d
    396c:	be 85       	ldd	r27, Y+14	; 0x0e
    396e:	82 15       	cp	r24, r2
    3970:	93 05       	cpc	r25, r3
    3972:	a4 05       	cpc	r26, r4
    3974:	b5 05       	cpc	r27, r5
    3976:	08 f4       	brcc	.+2      	; 0x397a <prvTimerTask+0x70>
    3978:	3c c0       	rjmp	.+120    	; 0x39f2 <prvTimerTask+0xe8>
    397a:	b6 da       	rcall	.-2708   	; 0x2ee8 <xTaskResumeAll>
    397c:	e0 91 08 07 	lds	r30, 0x0708	; 0x800708 <pxCurrentTimerList>
    3980:	f0 91 09 07 	lds	r31, 0x0709	; 0x800709 <pxCurrentTimerList+0x1>
    3984:	07 80       	ldd	r0, Z+7	; 0x07
    3986:	f0 85       	ldd	r31, Z+8	; 0x08
    3988:	e0 2d       	mov	r30, r0
    398a:	a0 85       	ldd	r26, Z+8	; 0x08
    398c:	b1 85       	ldd	r27, Z+9	; 0x09
    398e:	b8 8b       	std	Y+16, r27	; 0x10
    3990:	af 87       	std	Y+15, r26	; 0x0f
    3992:	cd 01       	movw	r24, r26
    3994:	02 96       	adiw	r24, 0x02	; 2
    3996:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    399a:	ef 85       	ldd	r30, Y+15	; 0x0f
    399c:	f8 89       	ldd	r31, Y+16	; 0x10
    399e:	82 89       	ldd	r24, Z+18	; 0x12
    39a0:	81 30       	cpi	r24, 0x01	; 1
    39a2:	f1 f4       	brne	.+60     	; 0x39e0 <prvTimerTask+0xd6>
    39a4:	46 85       	ldd	r20, Z+14	; 0x0e
    39a6:	57 85       	ldd	r21, Z+15	; 0x0f
    39a8:	60 89       	ldd	r22, Z+16	; 0x10
    39aa:	71 89       	ldd	r23, Z+17	; 0x11
    39ac:	42 0d       	add	r20, r2
    39ae:	53 1d       	adc	r21, r3
    39b0:	64 1d       	adc	r22, r4
    39b2:	75 1d       	adc	r23, r5
    39b4:	72 01       	movw	r14, r4
    39b6:	61 01       	movw	r12, r2
    39b8:	0b 85       	ldd	r16, Y+11	; 0x0b
    39ba:	1c 85       	ldd	r17, Y+12	; 0x0c
    39bc:	2d 85       	ldd	r18, Y+13	; 0x0d
    39be:	3e 85       	ldd	r19, Y+14	; 0x0e
    39c0:	cf 01       	movw	r24, r30
    39c2:	e6 dd       	rcall	.-1076   	; 0x3590 <prvInsertTimerInActiveList>
    39c4:	88 23       	and	r24, r24
    39c6:	61 f0       	breq	.+24     	; 0x39e0 <prvTimerTask+0xd6>
    39c8:	c8 2c       	mov	r12, r8
    39ca:	d9 2c       	mov	r13, r9
    39cc:	ea 2c       	mov	r14, r10
    39ce:	fb 2c       	mov	r15, r11
    39d0:	00 e0       	ldi	r16, 0x00	; 0
    39d2:	10 e0       	ldi	r17, 0x00	; 0
    39d4:	a2 01       	movw	r20, r4
    39d6:	91 01       	movw	r18, r2
    39d8:	60 e0       	ldi	r22, 0x00	; 0
    39da:	8f 85       	ldd	r24, Y+15	; 0x0f
    39dc:	98 89       	ldd	r25, Y+16	; 0x10
    39de:	a1 de       	rcall	.-702    	; 0x3722 <xTimerGenericCommand>
    39e0:	af 85       	ldd	r26, Y+15	; 0x0f
    39e2:	b8 89       	ldd	r27, Y+16	; 0x10
    39e4:	55 96       	adiw	r26, 0x15	; 21
    39e6:	ed 91       	ld	r30, X+
    39e8:	fc 91       	ld	r31, X
    39ea:	56 97       	sbiw	r26, 0x16	; 22
    39ec:	cd 01       	movw	r24, r26
    39ee:	19 95       	eicall
    39f0:	8b c0       	rjmp	.+278    	; 0x3b08 <prvTimerTask+0x1fe>
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	b2 01       	movw	r22, r4
    39f6:	a1 01       	movw	r20, r2
    39f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    39fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    39fc:	ad 85       	ldd	r26, Y+13	; 0x0d
    39fe:	be 85       	ldd	r27, Y+14	; 0x0e
    3a00:	48 1b       	sub	r20, r24
    3a02:	59 0b       	sbc	r21, r25
    3a04:	6a 0b       	sbc	r22, r26
    3a06:	7b 0b       	sbc	r23, r27
    3a08:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <xTimerQueue>
    3a0c:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <xTimerQueue+0x1>
    3a10:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <vQueueWaitForMessageRestricted>
    3a14:	69 da       	rcall	.-2862   	; 0x2ee8 <xTaskResumeAll>
    3a16:	81 11       	cpse	r24, r1
    3a18:	77 c0       	rjmp	.+238    	; 0x3b08 <prvTimerTask+0x1fe>
    3a1a:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3a1e:	74 c0       	rjmp	.+232    	; 0x3b08 <prvTimerTask+0x1fe>
    3a20:	63 da       	rcall	.-2874   	; 0x2ee8 <xTaskResumeAll>
    3a22:	72 c0       	rjmp	.+228    	; 0x3b08 <prvTimerTask+0x1fe>
    3a24:	89 81       	ldd	r24, Y+1	; 0x01
    3a26:	88 23       	and	r24, r24
    3a28:	0c f4       	brge	.+2      	; 0x3a2c <prvTimerTask+0x122>
    3a2a:	6e c0       	rjmp	.+220    	; 0x3b08 <prvTimerTask+0x1fe>
    3a2c:	4e 80       	ldd	r4, Y+6	; 0x06
    3a2e:	5f 80       	ldd	r5, Y+7	; 0x07
    3a30:	d2 01       	movw	r26, r4
    3a32:	1c 96       	adiw	r26, 0x0c	; 12
    3a34:	8d 91       	ld	r24, X+
    3a36:	9c 91       	ld	r25, X
    3a38:	1d 97       	sbiw	r26, 0x0d	; 13
    3a3a:	89 2b       	or	r24, r25
    3a3c:	21 f0       	breq	.+8      	; 0x3a46 <prvTimerTask+0x13c>
    3a3e:	c2 01       	movw	r24, r4
    3a40:	02 96       	adiw	r24, 0x02	; 2
    3a42:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3a46:	ce 01       	movw	r24, r28
    3a48:	08 96       	adiw	r24, 0x08	; 8
    3a4a:	c9 de       	rcall	.-622    	; 0x37de <prvSampleTimeNow>
    3a4c:	8b 01       	movw	r16, r22
    3a4e:	9c 01       	movw	r18, r24
    3a50:	89 81       	ldd	r24, Y+1	; 0x01
    3a52:	08 2e       	mov	r0, r24
    3a54:	00 0c       	add	r0, r0
    3a56:	99 0b       	sbc	r25, r25
    3a58:	aa 0b       	sbc	r26, r26
    3a5a:	bb 0b       	sbc	r27, r27
    3a5c:	8a 30       	cpi	r24, 0x0A	; 10
    3a5e:	91 05       	cpc	r25, r1
    3a60:	08 f0       	brcs	.+2      	; 0x3a64 <prvTimerTask+0x15a>
    3a62:	52 c0       	rjmp	.+164    	; 0x3b08 <prvTimerTask+0x1fe>
    3a64:	fc 01       	movw	r30, r24
    3a66:	88 27       	eor	r24, r24
    3a68:	ee 56       	subi	r30, 0x6E	; 110
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a6e:	0c 94 5b 5a 	jmp	0xb4b6	; 0xb4b6 <__tablejump2__>
    3a72:	ca 80       	ldd	r12, Y+2	; 0x02
    3a74:	db 80       	ldd	r13, Y+3	; 0x03
    3a76:	ec 80       	ldd	r14, Y+4	; 0x04
    3a78:	fd 80       	ldd	r15, Y+5	; 0x05
    3a7a:	f2 01       	movw	r30, r4
    3a7c:	46 85       	ldd	r20, Z+14	; 0x0e
    3a7e:	57 85       	ldd	r21, Z+15	; 0x0f
    3a80:	60 89       	ldd	r22, Z+16	; 0x10
    3a82:	71 89       	ldd	r23, Z+17	; 0x11
    3a84:	4c 0d       	add	r20, r12
    3a86:	5d 1d       	adc	r21, r13
    3a88:	6e 1d       	adc	r22, r14
    3a8a:	7f 1d       	adc	r23, r15
    3a8c:	c2 01       	movw	r24, r4
    3a8e:	80 dd       	rcall	.-1280   	; 0x3590 <prvInsertTimerInActiveList>
    3a90:	88 23       	and	r24, r24
    3a92:	d1 f1       	breq	.+116    	; 0x3b08 <prvTimerTask+0x1fe>
    3a94:	d2 01       	movw	r26, r4
    3a96:	55 96       	adiw	r26, 0x15	; 21
    3a98:	ed 91       	ld	r30, X+
    3a9a:	fc 91       	ld	r31, X
    3a9c:	56 97       	sbiw	r26, 0x16	; 22
    3a9e:	c2 01       	movw	r24, r4
    3aa0:	19 95       	eicall
    3aa2:	f2 01       	movw	r30, r4
    3aa4:	82 89       	ldd	r24, Z+18	; 0x12
    3aa6:	81 30       	cpi	r24, 0x01	; 1
    3aa8:	79 f5       	brne	.+94     	; 0x3b08 <prvTimerTask+0x1fe>
    3aaa:	4a 81       	ldd	r20, Y+2	; 0x02
    3aac:	5b 81       	ldd	r21, Y+3	; 0x03
    3aae:	6c 81       	ldd	r22, Y+4	; 0x04
    3ab0:	7d 81       	ldd	r23, Y+5	; 0x05
    3ab2:	86 85       	ldd	r24, Z+14	; 0x0e
    3ab4:	97 85       	ldd	r25, Z+15	; 0x0f
    3ab6:	a0 89       	ldd	r26, Z+16	; 0x10
    3ab8:	b1 89       	ldd	r27, Z+17	; 0x11
    3aba:	9a 01       	movw	r18, r20
    3abc:	ab 01       	movw	r20, r22
    3abe:	28 0f       	add	r18, r24
    3ac0:	39 1f       	adc	r19, r25
    3ac2:	4a 1f       	adc	r20, r26
    3ac4:	5b 1f       	adc	r21, r27
    3ac6:	c8 2c       	mov	r12, r8
    3ac8:	d9 2c       	mov	r13, r9
    3aca:	ea 2c       	mov	r14, r10
    3acc:	fb 2c       	mov	r15, r11
    3ace:	00 e0       	ldi	r16, 0x00	; 0
    3ad0:	10 e0       	ldi	r17, 0x00	; 0
    3ad2:	60 e0       	ldi	r22, 0x00	; 0
    3ad4:	c2 01       	movw	r24, r4
    3ad6:	25 de       	rcall	.-950    	; 0x3722 <xTimerGenericCommand>
    3ad8:	17 c0       	rjmp	.+46     	; 0x3b08 <prvTimerTask+0x1fe>
    3ada:	4a 81       	ldd	r20, Y+2	; 0x02
    3adc:	5b 81       	ldd	r21, Y+3	; 0x03
    3ade:	6c 81       	ldd	r22, Y+4	; 0x04
    3ae0:	7d 81       	ldd	r23, Y+5	; 0x05
    3ae2:	d2 01       	movw	r26, r4
    3ae4:	1e 96       	adiw	r26, 0x0e	; 14
    3ae6:	4d 93       	st	X+, r20
    3ae8:	5d 93       	st	X+, r21
    3aea:	6d 93       	st	X+, r22
    3aec:	7c 93       	st	X, r23
    3aee:	51 97       	sbiw	r26, 0x11	; 17
    3af0:	40 0f       	add	r20, r16
    3af2:	51 1f       	adc	r21, r17
    3af4:	62 1f       	adc	r22, r18
    3af6:	73 1f       	adc	r23, r19
    3af8:	68 01       	movw	r12, r16
    3afa:	79 01       	movw	r14, r18
    3afc:	c2 01       	movw	r24, r4
    3afe:	48 dd       	rcall	.-1392   	; 0x3590 <prvInsertTimerInActiveList>
    3b00:	03 c0       	rjmp	.+6      	; 0x3b08 <prvTimerTask+0x1fe>
    3b02:	c2 01       	movw	r24, r4
    3b04:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vPortFree>
    3b08:	28 2d       	mov	r18, r8
    3b0a:	39 2d       	mov	r19, r9
    3b0c:	4a 2d       	mov	r20, r10
    3b0e:	5b 2d       	mov	r21, r11
    3b10:	66 2d       	mov	r22, r6
    3b12:	77 2d       	mov	r23, r7
    3b14:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <xTimerQueue>
    3b18:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <xTimerQueue+0x1>
    3b1c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <xQueueReceive>
    3b20:	81 11       	cpse	r24, r1
    3b22:	80 cf       	rjmp	.-256    	; 0x3a24 <prvTimerTask+0x11a>
    3b24:	06 cf       	rjmp	.-500    	; 0x3932 <prvTimerTask+0x28>
    3b26:	f7 d8       	rcall	.-3602   	; 0x2d16 <vTaskSuspendAll>
    3b28:	ce 01       	movw	r24, r28
    3b2a:	01 96       	adiw	r24, 0x01	; 1
    3b2c:	58 de       	rcall	.-848    	; 0x37de <prvSampleTimeNow>
    3b2e:	6b 87       	std	Y+11, r22	; 0x0b
    3b30:	7c 87       	std	Y+12, r23	; 0x0c
    3b32:	8d 87       	std	Y+13, r24	; 0x0d
    3b34:	9e 87       	std	Y+14, r25	; 0x0e
    3b36:	89 81       	ldd	r24, Y+1	; 0x01
    3b38:	81 11       	cpse	r24, r1
    3b3a:	72 cf       	rjmp	.-284    	; 0x3a20 <prvTimerTask+0x116>
    3b3c:	e0 91 06 07 	lds	r30, 0x0706	; 0x800706 <pxOverflowTimerList>
    3b40:	f0 91 07 07 	lds	r31, 0x0707	; 0x800707 <pxOverflowTimerList+0x1>
    3b44:	80 81       	ld	r24, Z
    3b46:	21 e0       	ldi	r18, 0x01	; 1
    3b48:	81 11       	cpse	r24, r1
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	28 2c       	mov	r2, r8
    3b4e:	39 2c       	mov	r3, r9
    3b50:	4a 2c       	mov	r4, r10
    3b52:	5b 2c       	mov	r5, r11
    3b54:	4f cf       	rjmp	.-354    	; 0x39f4 <prvTimerTask+0xea>

00003b56 <xTimerIsTimerActive>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
    3b56:	fc 01       	movw	r30, r24
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
    3b58:	0f b6       	in	r0, 0x3f	; 63
    3b5a:	f8 94       	cli
    3b5c:	0f 92       	push	r0
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	24 85       	ldd	r18, Z+12	; 0x0c
    3b62:	35 85       	ldd	r19, Z+13	; 0x0d
    3b64:	23 2b       	or	r18, r19
    3b66:	09 f4       	brne	.+2      	; 0x3b6a <xTimerIsTimerActive+0x14>
    3b68:	80 e0       	ldi	r24, 0x00	; 0
	}
	taskEXIT_CRITICAL();
    3b6a:	0f 90       	pop	r0
    3b6c:	0f be       	out	0x3f, r0	; 63

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
    3b6e:	08 95       	ret

00003b70 <pvTimerGetTimerID>:
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
    3b70:	0f b6       	in	r0, 0x3f	; 63
    3b72:	f8 94       	cli
    3b74:	0f 92       	push	r0
	{
		pvReturn = pxTimer->pvTimerID;
    3b76:	fc 01       	movw	r30, r24
    3b78:	83 89       	ldd	r24, Z+19	; 0x13
    3b7a:	94 89       	ldd	r25, Z+20	; 0x14
	}
	taskEXIT_CRITICAL();
    3b7c:	0f 90       	pop	r0
    3b7e:	0f be       	out	0x3f, r0	; 63

	return pvReturn;
}
    3b80:	08 95       	ret

00003b82 <Defrost>:
{
	
while(1){
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
    3b82:	c8 e1       	ldi	r28, 0x18	; 24
    3b84:	d9 e0       	ldi	r29, 0x09	; 9
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Temp_Out<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3b86:	08 e7       	ldi	r16, 0x78	; 120
    3b88:	19 e0       	ldi	r17, 0x09	; 9
				if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
				else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3b8a:	0f 2e       	mov	r0, r31
    3b8c:	fe e3       	ldi	r31, 0x3E	; 62
    3b8e:	cf 2e       	mov	r12, r31
    3b90:	f2 e0       	ldi	r31, 0x02	; 2
    3b92:	df 2e       	mov	r13, r31
    3b94:	f0 2d       	mov	r31, r0
    3b96:	0f 2e       	mov	r0, r31
    3b98:	f6 eb       	ldi	r31, 0xB6	; 182
    3b9a:	ef 2e       	mov	r14, r31
    3b9c:	f7 e0       	ldi	r31, 0x07	; 7
    3b9e:	ff 2e       	mov	r15, r31
    3ba0:	f0 2d       	mov	r31, r0
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Temp_Out<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3ba2:	0f 2e       	mov	r0, r31
    3ba4:	f6 ec       	ldi	r31, 0xC6	; 198
    3ba6:	8f 2e       	mov	r8, r31
    3ba8:	f9 e0       	ldi	r31, 0x09	; 9
    3baa:	9f 2e       	mov	r9, r31
    3bac:	f0 2d       	mov	r31, r0
    3bae:	33 24       	eor	r3, r3
    3bb0:	33 94       	inc	r3
while(1){
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
    3bb2:	0f 2e       	mov	r0, r31
    3bb4:	f3 e2       	ldi	r31, 0x23	; 35
    3bb6:	af 2e       	mov	r10, r31
    3bb8:	f2 e0       	ldi	r31, 0x02	; 2
    3bba:	bf 2e       	mov	r11, r31
    3bbc:	f0 2d       	mov	r31, r0
//////////////////////////////////////////////////
static void Defrost(void *pvParameters)
{
	
while(1){
			wdt_reset();
    3bbe:	a8 95       	wdr
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
    3bc0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bc2:	81 30       	cpi	r24, 0x01	; 1
    3bc4:	09 f0       	breq	.+2      	; 0x3bc8 <Defrost+0x46>
    3bc6:	d1 c0       	rjmp	.+418    	; 0x3d6a <Defrost+0x1e8>
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
    3bc8:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <forsDefrost>
    3bcc:	81 30       	cpi	r24, 0x01	; 1
    3bce:	91 f4       	brne	.+36     	; 0x3bf4 <Defrost+0x72>
    3bd0:	be 01       	movw	r22, r28
    3bd2:	c8 01       	movw	r24, r16
    3bd4:	0e 94 d3 34 	call	0x69a6	; 0x69a6 <startDefrost>
    3bd8:	f8 01       	movw	r30, r16
    3bda:	31 86       	std	Z+9, r3	; 0x09
    3bdc:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <forsDefrost>
    3be0:	bf 92       	push	r11
    3be2:	af 92       	push	r10
    3be4:	ff 92       	push	r15
    3be6:	ef 92       	push	r14
    3be8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3bec:	0f 90       	pop	r0
    3bee:	0f 90       	pop	r0
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Temp_Out<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3bf4:	f8 01       	movw	r30, r16
    3bf6:	81 85       	ldd	r24, Z+9	; 0x09
    3bf8:	81 11       	cpse	r24, r1
    3bfa:	4a c0       	rjmp	.+148    	; 0x3c90 <Defrost+0x10e>
    3bfc:	92 d8       	rcall	.-3804   	; 0x2d22 <xTaskGetTickCount>
    3bfe:	40 90 f9 08 	lds	r4, 0x08F9	; 0x8008f9 <timeTillDef>
    3c02:	50 90 fa 08 	lds	r5, 0x08FA	; 0x8008fa <timeTillDef+0x1>
    3c06:	60 90 fb 08 	lds	r6, 0x08FB	; 0x8008fb <timeTillDef+0x2>
    3c0a:	70 90 fc 08 	lds	r7, 0x08FC	; 0x8008fc <timeTillDef+0x3>
    3c0e:	9b 01       	movw	r18, r22
    3c10:	ac 01       	movw	r20, r24
    3c12:	24 19       	sub	r18, r4
    3c14:	35 09       	sbc	r19, r5
    3c16:	46 09       	sbc	r20, r6
    3c18:	57 09       	sbc	r21, r7
    3c1a:	29 01       	movw	r4, r18
    3c1c:	3a 01       	movw	r6, r20
    3c1e:	2a a1       	ldd	r18, Y+34	; 0x22
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	a0 e6       	ldi	r26, 0x60	; 96
    3c24:	ba ee       	ldi	r27, 0xEA	; 234
    3c26:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    3c2a:	64 15       	cp	r22, r4
    3c2c:	75 05       	cpc	r23, r5
    3c2e:	86 05       	cpc	r24, r6
    3c30:	97 05       	cpc	r25, r7
    3c32:	48 f5       	brcc	.+82     	; 0x3c86 <Defrost+0x104>
    3c34:	6a a5       	ldd	r22, Y+42	; 0x2a
    3c36:	7b a5       	ldd	r23, Y+43	; 0x2b
    3c38:	07 2e       	mov	r0, r23
    3c3a:	00 0c       	add	r0, r0
    3c3c:	88 0b       	sbc	r24, r24
    3c3e:	99 0b       	sbc	r25, r25
    3c40:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    3c44:	9b 01       	movw	r18, r22
    3c46:	ac 01       	movw	r20, r24
    3c48:	f4 01       	movw	r30, r8
    3c4a:	60 81       	ld	r22, Z
    3c4c:	71 81       	ldd	r23, Z+1	; 0x01
    3c4e:	82 81       	ldd	r24, Z+2	; 0x02
    3c50:	93 81       	ldd	r25, Z+3	; 0x03
    3c52:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    3c56:	88 23       	and	r24, r24
    3c58:	b4 f4       	brge	.+44     	; 0x3c86 <Defrost+0x104>
    3c5a:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <forsDefrost>
    3c5e:	81 11       	cpse	r24, r1
    3c60:	12 c0       	rjmp	.+36     	; 0x3c86 <Defrost+0x104>
    3c62:	be 01       	movw	r22, r28
    3c64:	c8 01       	movw	r24, r16
    3c66:	0e 94 d3 34 	call	0x69a6	; 0x69a6 <startDefrost>
    3c6a:	f8 01       	movw	r30, r16
    3c6c:	31 86       	std	Z+9, r3	; 0x09
    3c6e:	23 e3       	ldi	r18, 0x33	; 51
    3c70:	32 e0       	ldi	r19, 0x02	; 2
    3c72:	3f 93       	push	r19
    3c74:	2f 93       	push	r18
    3c76:	ff 92       	push	r15
    3c78:	ef 92       	push	r14
    3c7a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3c7e:	0f 90       	pop	r0
    3c80:	0f 90       	pop	r0
    3c82:	0f 90       	pop	r0
    3c84:	0f 90       	pop	r0
				if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3c86:	f8 01       	movw	r30, r16
    3c88:	81 85       	ldd	r24, Z+9	; 0x09
    3c8a:	88 23       	and	r24, r24
    3c8c:	09 f4       	brne	.+2      	; 0x3c90 <Defrost+0x10e>
    3c8e:	6d c0       	rjmp	.+218    	; 0x3d6a <Defrost+0x1e8>
    3c90:	48 d8       	rcall	.-3952   	; 0x2d22 <xTaskGetTickCount>
    3c92:	40 90 f9 08 	lds	r4, 0x08F9	; 0x8008f9 <timeTillDef>
    3c96:	50 90 fa 08 	lds	r5, 0x08FA	; 0x8008fa <timeTillDef+0x1>
    3c9a:	60 90 fb 08 	lds	r6, 0x08FB	; 0x8008fb <timeTillDef+0x2>
    3c9e:	70 90 fc 08 	lds	r7, 0x08FC	; 0x8008fc <timeTillDef+0x3>
    3ca2:	9b 01       	movw	r18, r22
    3ca4:	ac 01       	movw	r20, r24
    3ca6:	24 19       	sub	r18, r4
    3ca8:	35 09       	sbc	r19, r5
    3caa:	46 09       	sbc	r20, r6
    3cac:	57 09       	sbc	r21, r7
    3cae:	29 01       	movw	r4, r18
    3cb0:	3a 01       	movw	r6, r20
    3cb2:	29 a1       	ldd	r18, Y+33	; 0x21
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	a0 e6       	ldi	r26, 0x60	; 96
    3cb8:	ba ee       	ldi	r27, 0xEA	; 234
    3cba:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    3cbe:	64 15       	cp	r22, r4
    3cc0:	75 05       	cpc	r23, r5
    3cc2:	86 05       	cpc	r24, r6
    3cc4:	97 05       	cpc	r25, r7
    3cc6:	f8 f4       	brcc	.+62     	; 0x3d06 <Defrost+0x184>
    3cc8:	f8 01       	movw	r30, r16
    3cca:	82 85       	ldd	r24, Z+10	; 0x0a
    3ccc:	88 23       	and	r24, r24
    3cce:	d9 f0       	breq	.+54     	; 0x3d06 <Defrost+0x184>
    3cd0:	be 01       	movw	r22, r28
    3cd2:	c8 01       	movw	r24, r16
    3cd4:	0e 94 ee 34 	call	0x69dc	; 0x69dc <stopDefrost>
    3cd8:	f8 01       	movw	r30, r16
    3cda:	11 86       	std	Z+9, r1	; 0x09
    3cdc:	12 86       	std	Z+10, r1	; 0x0a
    3cde:	21 d8       	rcall	.-4030   	; 0x2d22 <xTaskGetTickCount>
    3ce0:	60 93 f9 08 	sts	0x08F9, r22	; 0x8008f9 <timeTillDef>
    3ce4:	70 93 fa 08 	sts	0x08FA, r23	; 0x8008fa <timeTillDef+0x1>
    3ce8:	80 93 fb 08 	sts	0x08FB, r24	; 0x8008fb <timeTillDef+0x2>
    3cec:	90 93 fc 08 	sts	0x08FC, r25	; 0x8008fc <timeTillDef+0x3>
    3cf0:	df 92       	push	r13
    3cf2:	cf 92       	push	r12
    3cf4:	ff 92       	push	r15
    3cf6:	ef 92       	push	r14
    3cf8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3cfc:	0f 90       	pop	r0
    3cfe:	0f 90       	pop	r0
    3d00:	0f 90       	pop	r0
    3d02:	0f 90       	pop	r0
    3d04:	32 c0       	rjmp	.+100    	; 0x3d6a <Defrost+0x1e8>
				else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3d06:	f8 01       	movw	r30, r16
    3d08:	81 85       	ldd	r24, Z+9	; 0x09
    3d0a:	88 23       	and	r24, r24
    3d0c:	71 f1       	breq	.+92     	; 0x3d6a <Defrost+0x1e8>
    3d0e:	6c a5       	ldd	r22, Y+44	; 0x2c
    3d10:	7d a5       	ldd	r23, Y+45	; 0x2d
    3d12:	07 2e       	mov	r0, r23
    3d14:	00 0c       	add	r0, r0
    3d16:	88 0b       	sbc	r24, r24
    3d18:	99 0b       	sbc	r25, r25
    3d1a:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    3d1e:	9b 01       	movw	r18, r22
    3d20:	ac 01       	movw	r20, r24
    3d22:	f8 01       	movw	r30, r16
    3d24:	62 a9       	ldd	r22, Z+50	; 0x32
    3d26:	73 a9       	ldd	r23, Z+51	; 0x33
    3d28:	84 a9       	ldd	r24, Z+52	; 0x34
    3d2a:	95 a9       	ldd	r25, Z+53	; 0x35
    3d2c:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    3d30:	18 16       	cp	r1, r24
    3d32:	dc f4       	brge	.+54     	; 0x3d6a <Defrost+0x1e8>
    3d34:	be 01       	movw	r22, r28
    3d36:	c8 01       	movw	r24, r16
    3d38:	0e 94 ee 34 	call	0x69dc	; 0x69dc <stopDefrost>
    3d3c:	f8 01       	movw	r30, r16
    3d3e:	11 86       	std	Z+9, r1	; 0x09
    3d40:	12 86       	std	Z+10, r1	; 0x0a
    3d42:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3d46:	60 93 f9 08 	sts	0x08F9, r22	; 0x8008f9 <timeTillDef>
    3d4a:	70 93 fa 08 	sts	0x08FA, r23	; 0x8008fa <timeTillDef+0x1>
    3d4e:	80 93 fb 08 	sts	0x08FB, r24	; 0x8008fb <timeTillDef+0x2>
    3d52:	90 93 fc 08 	sts	0x08FC, r25	; 0x8008fc <timeTillDef+0x3>
    3d56:	df 92       	push	r13
    3d58:	cf 92       	push	r12
    3d5a:	ff 92       	push	r15
    3d5c:	ef 92       	push	r14
    3d5e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3d62:	0f 90       	pop	r0
    3d64:	0f 90       	pop	r0
    3d66:	0f 90       	pop	r0
    3d68:	0f 90       	pop	r0
	
			}
			//xSerialxPrintf(&xSerial3Port,"defrost\r\n");
vTaskDelay(2000);
    3d6a:	60 ed       	ldi	r22, 0xD0	; 208
    3d6c:	77 e0       	ldi	r23, 0x07	; 7
    3d6e:	80 e0       	ldi	r24, 0x00	; 0
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	36 d9       	rcall	.-3476   	; 0x2fe0 <vTaskDelay>
//xSerialxPrintf(&xSerial3Port,"Stack_0 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
//portYIELD();			
}
    3d74:	24 cf       	rjmp	.-440    	; 0x3bbe <Defrost+0x3c>

00003d76 <System_2>:
ReadSensors(&Comp_2);
portEXIT_CRITICAL();
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3d76:	c8 e1       	ldi	r28, 0x18	; 24
    3d78:	d9 e0       	ldi	r29, 0x09	; 9
		{
			_err2=Check_Erors(&Comp_2,&EEpromData);
		
			if(_err2>0 && Comp_1.error==0){Comp_2.error=_err2;Comp_2.countError++;Comp_2.Steps=0;Comp_Stop(&Comp_2);}//if(Comp_2.countError==3)EEpromData.power=0;
			mod_pump(&Comp_2,&EEpromData);
	       if(Comp_2.checkTrv && xTaskGetTickCount()-countTrvTime_2>10000 ){Comp_2.Steps = Fuzzy(&Comp_2,EEpromData.trv_corection_2);countTrvTime_2=xTaskGetTickCount();}
    3d7a:	0f 2e       	mov	r0, r31
    3d7c:	f0 e6       	ldi	r31, 0x60	; 96
    3d7e:	4f 2e       	mov	r4, r31
    3d80:	f9 e0       	ldi	r31, 0x09	; 9
    3d82:	5f 2e       	mov	r5, r31
    3d84:	f0 2d       	mov	r31, r0
    3d86:	0f 2e       	mov	r0, r31
    3d88:	fe e6       	ldi	r31, 0x6E	; 110
    3d8a:	8f 2e       	mov	r8, r31
    3d8c:	fa e0       	ldi	r31, 0x0A	; 10
    3d8e:	9f 2e       	mov	r9, r31
    3d90:	f0 2d       	mov	r31, r0
	
		if(Comp_2.suply && Comp_2.countError<3)
		{
			_err2=Check_Erors(&Comp_2,&EEpromData);
		
			if(_err2>0 && Comp_1.error==0){Comp_2.error=_err2;Comp_2.countError++;Comp_2.Steps=0;Comp_Stop(&Comp_2);}//if(Comp_2.countError==3)EEpromData.power=0;
    3d92:	0f 2e       	mov	r0, r31
    3d94:	f8 ee       	ldi	r31, 0xE8	; 232
    3d96:	af 2e       	mov	r10, r31
    3d98:	f9 e0       	ldi	r31, 0x09	; 9
    3d9a:	bf 2e       	mov	r11, r31
    3d9c:	f0 2d       	mov	r31, r0
    3d9e:	0f 2e       	mov	r0, r31
    3da0:	f2 e7       	ldi	r31, 0x72	; 114
    3da2:	cf 2e       	mov	r12, r31
    3da4:	fa e0       	ldi	r31, 0x0A	; 10
    3da6:	df 2e       	mov	r13, r31
    3da8:	f0 2d       	mov	r31, r0
portEXIT_CRITICAL();
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
		else if(EEpromData.power==0 && Comp_2.suply){Comp_2.suply=false;Comp_2.error=0;_err2=0;Comp_2.countError=0; xSerialxPrintf(&xSerial3Port,"OFF_System_2\r\n");stopTrvTimer(&Comp_2);Comp_Stop(&Comp_2);}
    3daa:	0f 2e       	mov	r0, r31
    3dac:	f6 e5       	ldi	r31, 0x56	; 86
    3dae:	ef 2e       	mov	r14, r31
    3db0:	f2 e0       	ldi	r31, 0x02	; 2
    3db2:	ff 2e       	mov	r15, r31
    3db4:	f0 2d       	mov	r31, r0
    3db6:	06 eb       	ldi	r16, 0xB6	; 182
    3db8:	17 e0       	ldi	r17, 0x07	; 7
ReadSensors(&Comp_2);
portEXIT_CRITICAL();
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3dba:	33 24       	eor	r3, r3
    3dbc:	33 94       	inc	r3
    3dbe:	0f 2e       	mov	r0, r31
    3dc0:	f8 e4       	ldi	r31, 0x48	; 72
    3dc2:	6f 2e       	mov	r6, r31
    3dc4:	f2 e0       	ldi	r31, 0x02	; 2
    3dc6:	7f 2e       	mov	r7, r31
    3dc8:	f0 2d       	mov	r31, r0
	(void) pvParameters;

	while (1)
	{
		
    	wdt_reset();
    3dca:	a8 95       	wdr
		//xSerialxPrintf(&xSerial3Port,"System_2_task\r\n");
vTaskSuspend( xHandleFirst );				
    3dcc:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <xHandleFirst>
    3dd0:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <xHandleFirst+0x1>
    3dd4:	90 d9       	rcall	.-3296   	; 0x30f6 <vTaskSuspend>
portENTER_CRITICAL();
    3dd6:	0f b6       	in	r0, 0x3f	; 63
    3dd8:	f8 94       	cli
    3dda:	0f 92       	push	r0
ReadSensors(&Comp_2);
    3ddc:	82 e0       	ldi	r24, 0x02	; 2
    3dde:	9a e0       	ldi	r25, 0x0A	; 10
    3de0:	0e 94 0c 4d 	call	0x9a18	; 0x9a18 <ReadSensors>
portEXIT_CRITICAL();
    3de4:	0f 90       	pop	r0
    3de6:	0f be       	out	0x3f, r0	; 63
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
    3de8:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <xHandleFirst>
    3dec:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <xHandleFirst+0x1>
    3df0:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <vTaskResume>
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3df4:	8c a1       	ldd	r24, Y+36	; 0x24
    3df6:	81 30       	cpi	r24, 0x01	; 1
    3df8:	a9 f4       	brne	.+42     	; 0x3e24 <System_2+0xae>
    3dfa:	80 91 08 0a 	lds	r24, 0x0A08	; 0x800a08 <Comp_2+0x6>
    3dfe:	81 11       	cpse	r24, r1
    3e00:	3a c0       	rjmp	.+116    	; 0x3e76 <System_2+0x100>
    3e02:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <Comp_2>
    3e06:	81 11       	cpse	r24, r1
    3e08:	8c c0       	rjmp	.+280    	; 0x3f22 <System_2+0x1ac>
    3e0a:	30 92 08 0a 	sts	0x0A08, r3	; 0x800a08 <Comp_2+0x6>
    3e0e:	7f 92       	push	r7
    3e10:	6f 92       	push	r6
    3e12:	1f 93       	push	r17
    3e14:	0f 93       	push	r16
    3e16:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3e1a:	0f 90       	pop	r0
    3e1c:	0f 90       	pop	r0
    3e1e:	0f 90       	pop	r0
    3e20:	0f 90       	pop	r0
    3e22:	24 c0       	rjmp	.+72     	; 0x3e6c <System_2+0xf6>
		else if(EEpromData.power==0 && Comp_2.suply){Comp_2.suply=false;Comp_2.error=0;_err2=0;Comp_2.countError=0; xSerialxPrintf(&xSerial3Port,"OFF_System_2\r\n");stopTrvTimer(&Comp_2);Comp_Stop(&Comp_2);}
    3e24:	81 11       	cpse	r24, r1
    3e26:	22 c0       	rjmp	.+68     	; 0x3e6c <System_2+0xf6>
    3e28:	80 91 08 0a 	lds	r24, 0x0A08	; 0x800a08 <Comp_2+0x6>
    3e2c:	88 23       	and	r24, r24
    3e2e:	09 f4       	brne	.+2      	; 0x3e32 <System_2+0xbc>
    3e30:	78 c0       	rjmp	.+240    	; 0x3f22 <System_2+0x1ac>
    3e32:	e2 e0       	ldi	r30, 0x02	; 2
    3e34:	fa e0       	ldi	r31, 0x0A	; 10
    3e36:	16 82       	std	Z+6, r1	; 0x06
    3e38:	d6 01       	movw	r26, r12
    3e3a:	1d 92       	st	X+, r1
    3e3c:	1c 92       	st	X, r1
    3e3e:	10 92 be 0a 	sts	0x0ABE, r1	; 0x800abe <_err2+0x1>
    3e42:	10 92 bd 0a 	sts	0x0ABD, r1	; 0x800abd <_err2>
    3e46:	11 8a       	std	Z+17, r1	; 0x11
    3e48:	ff 92       	push	r15
    3e4a:	ef 92       	push	r14
    3e4c:	1f 93       	push	r17
    3e4e:	0f 93       	push	r16
    3e50:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3e54:	82 e0       	ldi	r24, 0x02	; 2
    3e56:	9a e0       	ldi	r25, 0x0A	; 10
    3e58:	0e 94 bd 51 	call	0xa37a	; 0xa37a <stopTrvTimer>
    3e5c:	82 e0       	ldi	r24, 0x02	; 2
    3e5e:	9a e0       	ldi	r25, 0x0A	; 10
    3e60:	0e 94 5c 38 	call	0x70b8	; 0x70b8 <Comp_Stop>
    3e64:	0f 90       	pop	r0
    3e66:	0f 90       	pop	r0
    3e68:	0f 90       	pop	r0
    3e6a:	0f 90       	pop	r0
	
		if(Comp_2.suply && Comp_2.countError<3)
    3e6c:	80 91 08 0a 	lds	r24, 0x0A08	; 0x800a08 <Comp_2+0x6>
    3e70:	88 23       	and	r24, r24
    3e72:	09 f4       	brne	.+2      	; 0x3e76 <System_2+0x100>
    3e74:	56 c0       	rjmp	.+172    	; 0x3f22 <System_2+0x1ac>
    3e76:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <Comp_2+0x11>
    3e7a:	83 30       	cpi	r24, 0x03	; 3
    3e7c:	08 f0       	brcs	.+2      	; 0x3e80 <System_2+0x10a>
    3e7e:	51 c0       	rjmp	.+162    	; 0x3f22 <System_2+0x1ac>
		{
			_err2=Check_Erors(&Comp_2,&EEpromData);
    3e80:	be 01       	movw	r22, r28
    3e82:	82 e0       	ldi	r24, 0x02	; 2
    3e84:	9a e0       	ldi	r25, 0x0A	; 10
    3e86:	4a d3       	rcall	.+1684   	; 0x451c <Check_Erors>
    3e88:	90 93 be 0a 	sts	0x0ABE, r25	; 0x800abe <_err2+0x1>
    3e8c:	80 93 bd 0a 	sts	0x0ABD, r24	; 0x800abd <_err2>
		
			if(_err2>0 && Comp_1.error==0){Comp_2.error=_err2;Comp_2.countError++;Comp_2.Steps=0;Comp_Stop(&Comp_2);}//if(Comp_2.countError==3)EEpromData.power=0;
    3e90:	18 16       	cp	r1, r24
    3e92:	19 06       	cpc	r1, r25
    3e94:	a4 f4       	brge	.+40     	; 0x3ebe <System_2+0x148>
    3e96:	f5 01       	movw	r30, r10
    3e98:	20 81       	ld	r18, Z
    3e9a:	31 81       	ldd	r19, Z+1	; 0x01
    3e9c:	23 2b       	or	r18, r19
    3e9e:	79 f4       	brne	.+30     	; 0x3ebe <System_2+0x148>
    3ea0:	e2 e0       	ldi	r30, 0x02	; 2
    3ea2:	fa e0       	ldi	r31, 0x0A	; 10
    3ea4:	d6 01       	movw	r26, r12
    3ea6:	8d 93       	st	X+, r24
    3ea8:	9c 93       	st	X, r25
    3eaa:	81 89       	ldd	r24, Z+17	; 0x11
    3eac:	8f 5f       	subi	r24, 0xFF	; 255
    3eae:	81 8b       	std	Z+17, r24	; 0x11
    3eb0:	f4 01       	movw	r30, r8
    3eb2:	11 82       	std	Z+1, r1	; 0x01
    3eb4:	10 82       	st	Z, r1
    3eb6:	82 e0       	ldi	r24, 0x02	; 2
    3eb8:	9a e0       	ldi	r25, 0x0A	; 10
    3eba:	0e 94 5c 38 	call	0x70b8	; 0x70b8 <Comp_Stop>
			mod_pump(&Comp_2,&EEpromData);
    3ebe:	be 01       	movw	r22, r28
    3ec0:	82 e0       	ldi	r24, 0x02	; 2
    3ec2:	9a e0       	ldi	r25, 0x0A	; 10
    3ec4:	0e 94 66 39 	call	0x72cc	; 0x72cc <mod_pump>
	       if(Comp_2.checkTrv && xTaskGetTickCount()-countTrvTime_2>10000 ){Comp_2.Steps = Fuzzy(&Comp_2,EEpromData.trv_corection_2);countTrvTime_2=xTaskGetTickCount();}
    3ec8:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <Comp_2+0x1>
    3ecc:	88 23       	and	r24, r24
    3ece:	49 f1       	breq	.+82     	; 0x3f22 <System_2+0x1ac>
    3ed0:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3ed4:	20 91 25 07 	lds	r18, 0x0725	; 0x800725 <countTrvTime_2>
    3ed8:	30 91 26 07 	lds	r19, 0x0726	; 0x800726 <countTrvTime_2+0x1>
    3edc:	40 91 27 07 	lds	r20, 0x0727	; 0x800727 <countTrvTime_2+0x2>
    3ee0:	50 91 28 07 	lds	r21, 0x0728	; 0x800728 <countTrvTime_2+0x3>
    3ee4:	dc 01       	movw	r26, r24
    3ee6:	cb 01       	movw	r24, r22
    3ee8:	82 1b       	sub	r24, r18
    3eea:	93 0b       	sbc	r25, r19
    3eec:	a4 0b       	sbc	r26, r20
    3eee:	b5 0b       	sbc	r27, r21
    3ef0:	81 31       	cpi	r24, 0x11	; 17
    3ef2:	97 42       	sbci	r25, 0x27	; 39
    3ef4:	a1 05       	cpc	r26, r1
    3ef6:	b1 05       	cpc	r27, r1
    3ef8:	a0 f0       	brcs	.+40     	; 0x3f22 <System_2+0x1ac>
    3efa:	d2 01       	movw	r26, r4
    3efc:	6d 91       	ld	r22, X+
    3efe:	7c 91       	ld	r23, X
    3f00:	82 e0       	ldi	r24, 0x02	; 2
    3f02:	9a e0       	ldi	r25, 0x0A	; 10
    3f04:	0e 94 0c 52 	call	0xa418	; 0xa418 <Fuzzy>
    3f08:	f4 01       	movw	r30, r8
    3f0a:	91 83       	std	Z+1, r25	; 0x01
    3f0c:	80 83       	st	Z, r24
    3f0e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3f12:	60 93 25 07 	sts	0x0725, r22	; 0x800725 <countTrvTime_2>
    3f16:	70 93 26 07 	sts	0x0726, r23	; 0x800726 <countTrvTime_2+0x1>
    3f1a:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <countTrvTime_2+0x2>
    3f1e:	90 93 28 07 	sts	0x0728, r25	; 0x800728 <countTrvTime_2+0x3>
		}

		vTaskDelay(1000);
    3f22:	68 ee       	ldi	r22, 0xE8	; 232
    3f24:	73 e0       	ldi	r23, 0x03	; 3
    3f26:	80 e0       	ldi	r24, 0x00	; 0
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	5a d8       	rcall	.-3916   	; 0x2fe0 <vTaskDelay>
		//xSerialxPrintf(&xSerial3Port,"Stack_2 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
		//portYIELD();
		//xSerialxPrintf(&xSerial3Port,"Stack2 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
	}
    3f2c:	4e cf       	rjmp	.-356    	; 0x3dca <System_2+0x54>

00003f2e <System_1>:
portENTER_CRITICAL();
ReadSensors(&Comp_1);
portEXIT_CRITICAL();
//EEpromData.AireToWater==1 &&

		if(EEpromData.NombComp==2 )
    3f2e:	c8 e1       	ldi	r28, 0x18	; 24
    3f30:	d9 e0       	ldi	r29, 0x09	; 9
			vTaskResume( xHandleSecond );
			stop_second=false;
			
		}
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
    3f32:	55 24       	eor	r5, r5
    3f34:	53 94       	inc	r5
				
			if(_err1>0 && Comp_1.error==0){Comp_1.error=_err1;Comp_1.countError++;Comp_1.Steps=0;Comp_Stop(&Comp_1);xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);}//
				
			 mod_pump(&Comp_1,&EEpromData);
			//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);
			if(Comp_1.checkTrv && xTaskGetTickCount()-countTrvTime_1>10000 ){Comp_1.Steps = Fuzzy(&Comp_1,EEpromData.trv_corection_1);countTrvTime_1=xTaskGetTickCount();}
    3f36:	0f 2e       	mov	r0, r31
    3f38:	f4 ee       	ldi	r31, 0xE4	; 228
    3f3a:	af 2e       	mov	r10, r31
    3f3c:	f9 e0       	ldi	r31, 0x09	; 9
    3f3e:	bf 2e       	mov	r11, r31
    3f40:	f0 2d       	mov	r31, r0
			
			}
			*/
			if(!init_system){_err1=Check_Erors(&Comp_1,&EEpromData);ADE7758_resetStatus();} else init_system=false;
				
			if(_err1>0 && Comp_1.error==0){Comp_1.error=_err1;Comp_1.countError++;Comp_1.Steps=0;Comp_Stop(&Comp_1);xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);}//
    3f42:	08 ee       	ldi	r16, 0xE8	; 232
    3f44:	19 e0       	ldi	r17, 0x09	; 9
    3f46:	0f 2e       	mov	r0, r31
    3f48:	f2 e8       	ldi	r31, 0x82	; 130
    3f4a:	8f 2e       	mov	r8, r31
    3f4c:	f2 e0       	ldi	r31, 0x02	; 2
    3f4e:	9f 2e       	mov	r9, r31
    3f50:	f0 2d       	mov	r31, r0
    3f52:	0f 2e       	mov	r0, r31
    3f54:	f6 eb       	ldi	r31, 0xB6	; 182
    3f56:	ef 2e       	mov	r14, r31
    3f58:	f7 e0       	ldi	r31, 0x07	; 7
    3f5a:	ff 2e       	mov	r15, r31
    3f5c:	f0 2d       	mov	r31, r0
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
//xSerialxPrintf(&xSerial3Port,"temp_out =%f\r\n",Comp_1.Temp_Out);
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
		else if(EEpromData.power==0 && Comp_1.suply){Comp_1.suply=false;PORTA &= 0x0;Comp_1.error=0;_err1=0;Comp_1.countError=0;xSerialxPrintf(&xSerial3Port,"OFF_System_1\r\n"); stopTrvTimer(&Comp_1);Comp_Stop(&Comp_1);}
    3f5e:	0f 2e       	mov	r0, r31
    3f60:	f3 e7       	ldi	r31, 0x73	; 115
    3f62:	cf 2e       	mov	r12, r31
    3f64:	f2 e0       	ldi	r31, 0x02	; 2
    3f66:	df 2e       	mov	r13, r31
    3f68:	f0 2d       	mov	r31, r0
		}
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
//xSerialxPrintf(&xSerial3Port,"temp_out =%f\r\n",Comp_1.Temp_Out);
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
    3f6a:	0f 2e       	mov	r0, r31
    3f6c:	f5 e6       	ldi	r31, 0x65	; 101
    3f6e:	6f 2e       	mov	r6, r31
    3f70:	f2 e0       	ldi	r31, 0x02	; 2
    3f72:	7f 2e       	mov	r7, r31
    3f74:	f0 2d       	mov	r31, r0
	
	
	while (1)
	{

		wdt_reset();
    3f76:	a8 95       	wdr
		//xSerialxPrintf(&xSerial3Port,"System_1_task\r\n");
vTaskSuspend( xHandleSecond );		
    3f78:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <xHandleSecond>
    3f7c:	90 91 2e 07 	lds	r25, 0x072E	; 0x80072e <xHandleSecond+0x1>
    3f80:	ba d8       	rcall	.-3724   	; 0x30f6 <vTaskSuspend>
portENTER_CRITICAL();
    3f82:	0f b6       	in	r0, 0x3f	; 63
    3f84:	f8 94       	cli
    3f86:	0f 92       	push	r0
ReadSensors(&Comp_1);
    3f88:	88 e7       	ldi	r24, 0x78	; 120
    3f8a:	99 e0       	ldi	r25, 0x09	; 9
    3f8c:	0e 94 0c 4d 	call	0x9a18	; 0x9a18 <ReadSensors>
portEXIT_CRITICAL();
    3f90:	0f 90       	pop	r0
    3f92:	0f be       	out	0x3f, r0	; 63
//EEpromData.AireToWater==1 &&

		if(EEpromData.NombComp==2 )
    3f94:	88 a1       	ldd	r24, Y+32	; 0x20
    3f96:	82 30       	cpi	r24, 0x02	; 2
    3f98:	61 f4       	brne	.+24     	; 0x3fb2 <System_1+0x84>
		{
			vTaskResume( xHandleSecond );
    3f9a:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <xHandleSecond>
    3f9e:	90 91 2e 07 	lds	r25, 0x072E	; 0x80072e <xHandleSecond+0x1>
    3fa2:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <vTaskResume>
			stop_second=false;
    3fa6:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <stop_second>
			
		}
		
		 if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
    3faa:	88 a1       	ldd	r24, Y+32	; 0x20
    3fac:	81 30       	cpi	r24, 0x01	; 1
    3fae:	69 f4       	brne	.+26     	; 0x3fca <System_1+0x9c>
    3fb0:	06 c0       	rjmp	.+12     	; 0x3fbe <System_1+0x90>
    3fb2:	81 30       	cpi	r24, 0x01	; 1
    3fb4:	51 f4       	brne	.+20     	; 0x3fca <System_1+0x9c>
    3fb6:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <stop_second>
    3fba:	81 11       	cpse	r24, r1
    3fbc:	06 c0       	rjmp	.+12     	; 0x3fca <System_1+0x9c>
    3fbe:	50 92 ce 0a 	sts	0x0ACE, r5	; 0x800ace <stop_second>
    3fc2:	82 e0       	ldi	r24, 0x02	; 2
    3fc4:	9a e0       	ldi	r25, 0x0A	; 10
    3fc6:	0e 94 5c 38 	call	0x70b8	; 0x70b8 <Comp_Stop>
//xSerialxPrintf(&xSerial3Port,"temp_out =%f\r\n",Comp_1.Temp_Out);
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
    3fca:	8c a1       	ldd	r24, Y+36	; 0x24
    3fcc:	81 30       	cpi	r24, 0x01	; 1
    3fce:	f9 f4       	brne	.+62     	; 0x400e <System_1+0xe0>
    3fd0:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <Comp_1+0x6>
    3fd4:	81 11       	cpse	r24, r1
    3fd6:	46 c0       	rjmp	.+140    	; 0x4064 <System_1+0x136>
    3fd8:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <Comp_1>
    3fdc:	81 11       	cpse	r24, r1
    3fde:	b6 c0       	rjmp	.+364    	; 0x414c <System_1+0x21e>
    3fe0:	50 92 7e 09 	sts	0x097E, r5	; 0x80097e <Comp_1+0x6>
    3fe4:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3fe8:	60 93 f9 08 	sts	0x08F9, r22	; 0x8008f9 <timeTillDef>
    3fec:	70 93 fa 08 	sts	0x08FA, r23	; 0x8008fa <timeTillDef+0x1>
    3ff0:	80 93 fb 08 	sts	0x08FB, r24	; 0x8008fb <timeTillDef+0x2>
    3ff4:	90 93 fc 08 	sts	0x08FC, r25	; 0x8008fc <timeTillDef+0x3>
    3ff8:	7f 92       	push	r7
    3ffa:	6f 92       	push	r6
    3ffc:	ff 92       	push	r15
    3ffe:	ef 92       	push	r14
    4000:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    4004:	0f 90       	pop	r0
    4006:	0f 90       	pop	r0
    4008:	0f 90       	pop	r0
    400a:	0f 90       	pop	r0
    400c:	26 c0       	rjmp	.+76     	; 0x405a <System_1+0x12c>
		else if(EEpromData.power==0 && Comp_1.suply){Comp_1.suply=false;PORTA &= 0x0;Comp_1.error=0;_err1=0;Comp_1.countError=0;xSerialxPrintf(&xSerial3Port,"OFF_System_1\r\n"); stopTrvTimer(&Comp_1);Comp_Stop(&Comp_1);}
    400e:	81 11       	cpse	r24, r1
    4010:	24 c0       	rjmp	.+72     	; 0x405a <System_1+0x12c>
    4012:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <Comp_1+0x6>
    4016:	88 23       	and	r24, r24
    4018:	09 f4       	brne	.+2      	; 0x401c <System_1+0xee>
    401a:	98 c0       	rjmp	.+304    	; 0x414c <System_1+0x21e>
    401c:	e8 e7       	ldi	r30, 0x78	; 120
    401e:	f9 e0       	ldi	r31, 0x09	; 9
    4020:	16 82       	std	Z+6, r1	; 0x06
    4022:	82 b1       	in	r24, 0x02	; 2
    4024:	12 b8       	out	0x02, r1	; 2
    4026:	d8 01       	movw	r26, r16
    4028:	1d 92       	st	X+, r1
    402a:	1c 92       	st	X, r1
    402c:	10 92 8b 0a 	sts	0x0A8B, r1	; 0x800a8b <_err1+0x1>
    4030:	10 92 8a 0a 	sts	0x0A8A, r1	; 0x800a8a <_err1>
    4034:	11 8a       	std	Z+17, r1	; 0x11
    4036:	df 92       	push	r13
    4038:	cf 92       	push	r12
    403a:	ff 92       	push	r15
    403c:	ef 92       	push	r14
    403e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    4042:	88 e7       	ldi	r24, 0x78	; 120
    4044:	99 e0       	ldi	r25, 0x09	; 9
    4046:	0e 94 bd 51 	call	0xa37a	; 0xa37a <stopTrvTimer>
    404a:	88 e7       	ldi	r24, 0x78	; 120
    404c:	99 e0       	ldi	r25, 0x09	; 9
    404e:	0e 94 5c 38 	call	0x70b8	; 0x70b8 <Comp_Stop>
    4052:	0f 90       	pop	r0
    4054:	0f 90       	pop	r0
    4056:	0f 90       	pop	r0
    4058:	0f 90       	pop	r0
		//xSerialxPrintf(&xSerial3Port,"mod =%d\r\n",EEpromData.AireToWater);
		//xSerialxPrintf(&xSerial3Port,"TimeBetweenDef =%d\r\n",EEpromData.TimeBetweenDef);
		
	
		
		if(Comp_1.suply &&  Comp_1.countError<3)
    405a:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <Comp_1+0x6>
    405e:	88 23       	and	r24, r24
    4060:	09 f4       	brne	.+2      	; 0x4064 <System_1+0x136>
    4062:	74 c0       	rjmp	.+232    	; 0x414c <System_1+0x21e>
    4064:	80 91 89 09 	lds	r24, 0x0989	; 0x800989 <Comp_1+0x11>
    4068:	83 30       	cpi	r24, 0x03	; 3
    406a:	08 f0       	brcs	.+2      	; 0x406e <System_1+0x140>
    406c:	6f c0       	rjmp	.+222    	; 0x414c <System_1+0x21e>
			if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
			else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
			
			}
			*/
			if(!init_system){_err1=Check_Erors(&Comp_1,&EEpromData);ADE7758_resetStatus();} else init_system=false;
    406e:	80 91 aa 0a 	lds	r24, 0x0AAA	; 0x800aaa <init_system>
    4072:	81 11       	cpse	r24, r1
    4074:	0a c0       	rjmp	.+20     	; 0x408a <System_1+0x15c>
    4076:	be 01       	movw	r22, r28
    4078:	88 e7       	ldi	r24, 0x78	; 120
    407a:	99 e0       	ldi	r25, 0x09	; 9
    407c:	4f d2       	rcall	.+1182   	; 0x451c <Check_Erors>
    407e:	90 93 8b 0a 	sts	0x0A8B, r25	; 0x800a8b <_err1+0x1>
    4082:	80 93 8a 0a 	sts	0x0A8A, r24	; 0x800a8a <_err1>
    4086:	47 d2       	rcall	.+1166   	; 0x4516 <ADE7758_resetStatus>
    4088:	02 c0       	rjmp	.+4      	; 0x408e <System_1+0x160>
    408a:	10 92 aa 0a 	sts	0x0AAA, r1	; 0x800aaa <init_system>
				
			if(_err1>0 && Comp_1.error==0){Comp_1.error=_err1;Comp_1.countError++;Comp_1.Steps=0;Comp_Stop(&Comp_1);xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);}//
    408e:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <_err1>
    4092:	90 91 8b 0a 	lds	r25, 0x0A8B	; 0x800a8b <_err1+0x1>
    4096:	18 16       	cp	r1, r24
    4098:	19 06       	cpc	r1, r25
    409a:	3c f5       	brge	.+78     	; 0x40ea <System_1+0x1bc>
    409c:	f8 01       	movw	r30, r16
    409e:	20 81       	ld	r18, Z
    40a0:	31 81       	ldd	r19, Z+1	; 0x01
    40a2:	23 2b       	or	r18, r19
    40a4:	11 f5       	brne	.+68     	; 0x40ea <System_1+0x1bc>
    40a6:	e8 e7       	ldi	r30, 0x78	; 120
    40a8:	f9 e0       	ldi	r31, 0x09	; 9
    40aa:	d8 01       	movw	r26, r16
    40ac:	8d 93       	st	X+, r24
    40ae:	9c 93       	st	X, r25
    40b0:	81 89       	ldd	r24, Z+17	; 0x11
    40b2:	8f 5f       	subi	r24, 0xFF	; 255
    40b4:	81 8b       	std	Z+17, r24	; 0x11
    40b6:	f5 01       	movw	r30, r10
    40b8:	11 82       	std	Z+1, r1	; 0x01
    40ba:	10 82       	st	Z, r1
    40bc:	88 e7       	ldi	r24, 0x78	; 120
    40be:	99 e0       	ldi	r25, 0x09	; 9
    40c0:	0e 94 5c 38 	call	0x70b8	; 0x70b8 <Comp_Stop>
    40c4:	d8 01       	movw	r26, r16
    40c6:	11 96       	adiw	r26, 0x01	; 1
    40c8:	8c 91       	ld	r24, X
    40ca:	11 97       	sbiw	r26, 0x01	; 1
    40cc:	8f 93       	push	r24
    40ce:	8c 91       	ld	r24, X
    40d0:	8f 93       	push	r24
    40d2:	9f 92       	push	r9
    40d4:	8f 92       	push	r8
    40d6:	ff 92       	push	r15
    40d8:	ef 92       	push	r14
    40da:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    40de:	0f 90       	pop	r0
    40e0:	0f 90       	pop	r0
    40e2:	0f 90       	pop	r0
    40e4:	0f 90       	pop	r0
    40e6:	0f 90       	pop	r0
    40e8:	0f 90       	pop	r0
				
			 mod_pump(&Comp_1,&EEpromData);
    40ea:	be 01       	movw	r22, r28
    40ec:	88 e7       	ldi	r24, 0x78	; 120
    40ee:	99 e0       	ldi	r25, 0x09	; 9
    40f0:	0e 94 66 39 	call	0x72cc	; 0x72cc <mod_pump>
			//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);
			if(Comp_1.checkTrv && xTaskGetTickCount()-countTrvTime_1>10000 ){Comp_1.Steps = Fuzzy(&Comp_1,EEpromData.trv_corection_1);countTrvTime_1=xTaskGetTickCount();}
    40f4:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <Comp_1+0x1>
    40f8:	88 23       	and	r24, r24
    40fa:	41 f1       	breq	.+80     	; 0x414c <System_1+0x21e>
    40fc:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    4100:	20 91 29 07 	lds	r18, 0x0729	; 0x800729 <countTrvTime_1>
    4104:	30 91 2a 07 	lds	r19, 0x072A	; 0x80072a <countTrvTime_1+0x1>
    4108:	40 91 2b 07 	lds	r20, 0x072B	; 0x80072b <countTrvTime_1+0x2>
    410c:	50 91 2c 07 	lds	r21, 0x072C	; 0x80072c <countTrvTime_1+0x3>
    4110:	dc 01       	movw	r26, r24
    4112:	cb 01       	movw	r24, r22
    4114:	82 1b       	sub	r24, r18
    4116:	93 0b       	sbc	r25, r19
    4118:	a4 0b       	sbc	r26, r20
    411a:	b5 0b       	sbc	r27, r21
    411c:	81 31       	cpi	r24, 0x11	; 17
    411e:	97 42       	sbci	r25, 0x27	; 39
    4120:	a1 05       	cpc	r26, r1
    4122:	b1 05       	cpc	r27, r1
    4124:	98 f0       	brcs	.+38     	; 0x414c <System_1+0x21e>
    4126:	6a a9       	ldd	r22, Y+50	; 0x32
    4128:	7b a9       	ldd	r23, Y+51	; 0x33
    412a:	88 e7       	ldi	r24, 0x78	; 120
    412c:	99 e0       	ldi	r25, 0x09	; 9
    412e:	0e 94 0c 52 	call	0xa418	; 0xa418 <Fuzzy>
    4132:	d5 01       	movw	r26, r10
    4134:	8d 93       	st	X+, r24
    4136:	9c 93       	st	X, r25
    4138:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    413c:	60 93 29 07 	sts	0x0729, r22	; 0x800729 <countTrvTime_1>
    4140:	70 93 2a 07 	sts	0x072A, r23	; 0x80072a <countTrvTime_1+0x1>
    4144:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <countTrvTime_1+0x2>
    4148:	90 93 2c 07 	sts	0x072C, r25	; 0x80072c <countTrvTime_1+0x3>
			
			
		}
		
		vTaskDelay(1000);
    414c:	68 ee       	ldi	r22, 0xE8	; 232
    414e:	73 e0       	ldi	r23, 0x03	; 3
    4150:	80 e0       	ldi	r24, 0x00	; 0
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <vTaskDelay>
		//xSerialxPrintf(&xSerial3Port,"Stack1 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
	}
    4158:	0e cf       	rjmp	.-484    	; 0x3f76 <System_1+0x48>

0000415a <ModBus>:

	while (1)
	{   
		//wdt_reset();
		//xSerialxPrintf(&xSerial3Port,"ModBus_task\r\n");
		if (xSemaphoreTake(xMbBinarySemaphore, portMAX_DELAY) == pdTRUE )
    415a:	4f ef       	ldi	r20, 0xFF	; 255
    415c:	5f ef       	ldi	r21, 0xFF	; 255
    415e:	ba 01       	movw	r22, r20
    4160:	80 91 ab 0a 	lds	r24, 0x0AAB	; 0x800aab <xMbBinarySemaphore>
    4164:	90 91 ac 0a 	lds	r25, 0x0AAC	; 0x800aac <xMbBinarySemaphore+0x1>
    4168:	0e 94 8f 0b 	call	0x171e	; 0x171e <xQueueSemaphoreTake>
    416c:	81 30       	cpi	r24, 0x01	; 1
    416e:	a9 f7       	brne	.-22     	; 0x415a <ModBus>
		{
			modbus_update();
    4170:	d9 d7       	rcall	.+4018   	; 0x5124 <modbus_update>
			//xSerialxPrintf(&xSerial3Port,"Interrupt\r\n");
			if(port_0){xSerialRxFlush( &xSerialPort );port_0=false;indexBuf=0;}
    4172:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <port_0>
    4176:	88 23       	and	r24, r24
    4178:	49 f0       	breq	.+18     	; 0x418c <ModBus+0x32>
    417a:	8f e6       	ldi	r24, 0x6F	; 111
    417c:	97 e0       	ldi	r25, 0x07	; 7
    417e:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xSerialRxFlush>
    4182:	10 92 c5 0a 	sts	0x0AC5, r1	; 0x800ac5 <port_0>
    4186:	10 92 b5 07 	sts	0x07B5, r1	; 0x8007b5 <indexBuf>
    418a:	e7 cf       	rjmp	.-50     	; 0x415a <ModBus>
			else if(port_3){xSerialRxFlush( &xSerial3Port );port_3=false;indexBuf=0;}
    418c:	80 91 17 09 	lds	r24, 0x0917	; 0x800917 <port_3>
    4190:	88 23       	and	r24, r24
    4192:	19 f3       	breq	.-58     	; 0x415a <ModBus>
    4194:	86 eb       	ldi	r24, 0xB6	; 182
    4196:	97 e0       	ldi	r25, 0x07	; 7
    4198:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xSerialRxFlush>
    419c:	10 92 17 09 	sts	0x0917, r1	; 0x800917 <port_3>
    41a0:	10 92 b5 07 	sts	0x07B5, r1	; 0x8007b5 <indexBuf>
    41a4:	da cf       	rjmp	.-76     	; 0x415a <ModBus>

000041a6 <main>:
//--------------------------------------------------------
volatile long  countTimer;
int main(void) __attribute__ ((OS_main));

int main(void)
{
    41a6:	cd b7       	in	r28, 0x3d	; 61
    41a8:	de b7       	in	r29, 0x3e	; 62
    41aa:	a2 97       	sbiw	r28, 0x22	; 34
    41ac:	de bf       	out	0x3e, r29	; 62
    41ae:	cd bf       	out	0x3d, r28	; 61

	initPins();
    41b0:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <initPins>
	ADE7758_Init();
    41b4:	93 d1       	rcall	.+806    	; 0x44dc <ADE7758_Init>
	timer_1_Init();
    41b6:	59 d4       	rcall	.+2226   	; 0x4a6a <timer_1_Init>
    41b8:	81 e0       	ldi	r24, 0x01	; 1
	Comp_1.Index=1;
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	90 93 eb 09 	sts	0x09EB, r25	; 0x8009eb <Comp_1+0x73>
    41c0:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <Comp_1+0x72>
    41c4:	82 e0       	ldi	r24, 0x02	; 2
	Comp_2.Index=2;
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	90 93 75 0a 	sts	0x0A75, r25	; 0x800a75 <Comp_2+0x73>
    41cc:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <Comp_2+0x72>
    41d0:	80 e0       	ldi	r24, 0x00	; 0
	//eeprom_write_block((void*)&EEpromData, ( void*)0, sizeof (xEEdata));
	current_time = time(NULL);
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    41d8:	60 93 13 09 	sts	0x0913, r22	; 0x800913 <current_time>
    41dc:	70 93 14 09 	sts	0x0914, r23	; 0x800914 <current_time+0x1>
    41e0:	80 93 15 09 	sts	0x0915, r24	; 0x800915 <current_time+0x2>
    41e4:	90 93 16 09 	sts	0x0916, r25	; 0x800916 <current_time+0x3>
    41e8:	ee 24       	eor	r14, r14
	xSerialPort = xSerialPortInitMinimal( USART0, 9600, portSERIAL_BUFFER_TX, portSERIAL_BUFFER_RX);
    41ea:	ea 94       	dec	r14
    41ec:	f1 2c       	mov	r15, r1
    41ee:	0f ef       	ldi	r16, 0xFF	; 255
    41f0:	10 e0       	ldi	r17, 0x00	; 0
    41f2:	20 e8       	ldi	r18, 0x80	; 128
    41f4:	35 e2       	ldi	r19, 0x25	; 37
    41f6:	40 e0       	ldi	r20, 0x00	; 0
    41f8:	50 e0       	ldi	r21, 0x00	; 0
    41fa:	60 e0       	ldi	r22, 0x00	; 0
    41fc:	ce 01       	movw	r24, r28
    41fe:	01 96       	adiw	r24, 0x01	; 1
    4200:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <xSerialPortInitMinimal>
    4204:	82 e2       	ldi	r24, 0x22	; 34
    4206:	fe 01       	movw	r30, r28
    4208:	31 96       	adiw	r30, 0x01	; 1
    420a:	af e6       	ldi	r26, 0x6F	; 111
    420c:	b7 e0       	ldi	r27, 0x07	; 7
    420e:	01 90       	ld	r0, Z+
    4210:	0d 92       	st	X+, r0
    4212:	8a 95       	dec	r24
    4214:	e1 f7       	brne	.-8      	; 0x420e <main+0x68>
    4216:	20 e8       	ldi	r18, 0x80	; 128
	xSerial3Port = xSerialPortInitMinimal( USART3, 9600, portSERIAL_BUFFER_TX, portSERIAL_BUFFER_RX);
    4218:	35 e2       	ldi	r19, 0x25	; 37
    421a:	40 e0       	ldi	r20, 0x00	; 0
    421c:	50 e0       	ldi	r21, 0x00	; 0
    421e:	66 e0       	ldi	r22, 0x06	; 6
    4220:	ce 01       	movw	r24, r28
    4222:	01 96       	adiw	r24, 0x01	; 1
    4224:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <xSerialPortInitMinimal>
    4228:	82 e2       	ldi	r24, 0x22	; 34
    422a:	fe 01       	movw	r30, r28
    422c:	31 96       	adiw	r30, 0x01	; 1
    422e:	a6 eb       	ldi	r26, 0xB6	; 182
    4230:	b7 e0       	ldi	r27, 0x07	; 7
    4232:	01 90       	ld	r0, Z+
    4234:	0d 92       	st	X+, r0
    4236:	8a 95       	dec	r24
    4238:	e1 f7       	brne	.-8      	; 0x4232 <main+0x8c>
    423a:	43 e0       	ldi	r20, 0x03	; 3
	vSemaphoreCreateBinary(xMbBinarySemaphore);
    423c:	60 e0       	ldi	r22, 0x00	; 0
    423e:	81 e0       	ldi	r24, 0x01	; 1
    4240:	0e 94 a7 09 	call	0x134e	; 0x134e <xQueueGenericCreate>
    4244:	90 93 ac 0a 	sts	0x0AAC, r25	; 0x800aac <xMbBinarySemaphore+0x1>
    4248:	80 93 ab 0a 	sts	0x0AAB, r24	; 0x800aab <xMbBinarySemaphore>
    424c:	00 97       	sbiw	r24, 0x00	; 0
    424e:	41 f0       	breq	.+16     	; 0x4260 <main+0xba>
    4250:	00 e0       	ldi	r16, 0x00	; 0
    4252:	20 e0       	ldi	r18, 0x00	; 0
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	a9 01       	movw	r20, r18
    4258:	60 e0       	ldi	r22, 0x00	; 0
    425a:	70 e0       	ldi	r23, 0x00	; 0
    425c:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    4260:	40 e6       	ldi	r20, 0x60	; 96

    
	eeprom_read_block((void*)&EEpromData, (const void*)0, sizeof (xEEdata));
    4262:	50 e0       	ldi	r21, 0x00	; 0
    4264:	60 e0       	ldi	r22, 0x00	; 0
    4266:	70 e0       	ldi	r23, 0x00	; 0
    4268:	88 e1       	ldi	r24, 0x18	; 24
    426a:	99 e0       	ldi	r25, 0x09	; 9
    426c:	0e 94 63 5d 	call	0xbac6	; 0xbac6 <eeprom_read_block>
    4270:	88 e7       	ldi	r24, 0x78	; 120
	activateTimers(&Comp_1);
    4272:	99 e0       	ldi	r25, 0x09	; 9
    4274:	0e 94 e8 32 	call	0x65d0	; 0x65d0 <activateTimers>
    4278:	82 e0       	ldi	r24, 0x02	; 2
	activateTimers(&Comp_2);
    427a:	9a e0       	ldi	r25, 0x0A	; 10
    427c:	0e 94 e8 32 	call	0x65d0	; 0x65d0 <activateTimers>
    4280:	88 e7       	ldi	r24, 0x78	; 120
	activateTrvTimer(&Comp_1);
    4282:	99 e0       	ldi	r25, 0x09	; 9
    4284:	0e 94 47 51 	call	0xa28e	; 0xa28e <activateTrvTimer>
    4288:	82 e0       	ldi	r24, 0x02	; 2
	activateTrvTimer(&Comp_2);
    428a:	9a e0       	ldi	r25, 0x0A	; 10
    428c:	0e 94 47 51 	call	0xa28e	; 0xa28e <activateTrvTimer>
    4290:	81 e0       	ldi	r24, 0x01	; 1
	init_system=true;
    4292:	80 93 aa 0a 	sts	0x0AAA, r24	; 0x800aaa <init_system>
    4296:	80 91 4a 09 	lds	r24, 0x094A	; 0x80094a <EEpromData+0x32>
	old_corection_1=EEpromData.trv_corection_1;
    429a:	90 91 4b 09 	lds	r25, 0x094B	; 0x80094b <EEpromData+0x33>
    429e:	90 93 91 0a 	sts	0x0A91, r25	; 0x800a91 <old_corection_1+0x1>
    42a2:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <old_corection_1>
    42a6:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <EEpromData+0x48>
	old_corection_2=EEpromData.trv_corection_2;
    42aa:	90 91 61 09 	lds	r25, 0x0961	; 0x800961 <EEpromData+0x49>
    42ae:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <old_corection_2+0x1>
    42b2:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <old_corection_2>
    42b6:	88 e1       	ldi	r24, 0x18	; 24
	Comp_1.modeOfPump=Comp_2.modeOfPump=selmode(&EEpromData);
    42b8:	99 e0       	ldi	r25, 0x09	; 9
    42ba:	0e 94 d8 35 	call	0x6bb0	; 0x6bb0 <selmode>
    42be:	80 93 12 0a 	sts	0x0A12, r24	; 0x800a12 <Comp_2+0x10>
    42c2:	80 93 88 09 	sts	0x0988, r24	; 0x800988 <Comp_1+0x10>
    42c6:	99 e2       	ldi	r25, 0x29	; 41
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    42c8:	88 e1       	ldi	r24, 0x18	; 24
    42ca:	0f b6       	in	r0, 0x3f	; 63
    42cc:	f8 94       	cli
    42ce:	a8 95       	wdr
    42d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    42d4:	0f be       	out	0x3f, r0	; 63
    42d6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    42da:	78 94       	sei
	wdt_enable(WDTO_8S);
	//-------------------------------------
	sei(); 
    42dc:	e1 2c       	mov	r14, r1
	//-------------------------------------
	xTaskCreate(ModBus,(const portCHAR *)"ModBus",256,NULL,2, NULL );
    42de:	f1 2c       	mov	r15, r1
    42e0:	02 e0       	ldi	r16, 0x02	; 2
    42e2:	20 e0       	ldi	r18, 0x00	; 0
    42e4:	30 e0       	ldi	r19, 0x00	; 0
    42e6:	40 e0       	ldi	r20, 0x00	; 0
    42e8:	51 e0       	ldi	r21, 0x01	; 1
    42ea:	6e e8       	ldi	r22, 0x8E	; 142
    42ec:	72 e0       	ldi	r23, 0x02	; 2
    42ee:	8d ea       	ldi	r24, 0xAD	; 173
    42f0:	90 e2       	ldi	r25, 0x20	; 32
    42f2:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    42f6:	0f 2e       	mov	r0, r31
	xTaskCreate(System_1,(const portCHAR *)"System_1",512,NULL,0, &xHandleFirst );
    42f8:	ff e2       	ldi	r31, 0x2F	; 47
    42fa:	ef 2e       	mov	r14, r31
    42fc:	f7 e0       	ldi	r31, 0x07	; 7
    42fe:	ff 2e       	mov	r15, r31
    4300:	f0 2d       	mov	r31, r0
    4302:	00 e0       	ldi	r16, 0x00	; 0
    4304:	20 e0       	ldi	r18, 0x00	; 0
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	40 e0       	ldi	r20, 0x00	; 0
    430a:	52 e0       	ldi	r21, 0x02	; 2
    430c:	65 e9       	ldi	r22, 0x95	; 149
    430e:	72 e0       	ldi	r23, 0x02	; 2
    4310:	87 e9       	ldi	r24, 0x97	; 151
    4312:	9f e1       	ldi	r25, 0x1F	; 31
    4314:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    4318:	0f 2e       	mov	r0, r31
	xTaskCreate(System_2,(const portCHAR *)"System_2",512,NULL,0, &xHandleSecond );
    431a:	fd e2       	ldi	r31, 0x2D	; 45
    431c:	ef 2e       	mov	r14, r31
    431e:	f7 e0       	ldi	r31, 0x07	; 7
    4320:	ff 2e       	mov	r15, r31
    4322:	f0 2d       	mov	r31, r0
    4324:	20 e0       	ldi	r18, 0x00	; 0
    4326:	30 e0       	ldi	r19, 0x00	; 0
    4328:	40 e0       	ldi	r20, 0x00	; 0
    432a:	52 e0       	ldi	r21, 0x02	; 2
    432c:	6e e9       	ldi	r22, 0x9E	; 158
    432e:	72 e0       	ldi	r23, 0x02	; 2
    4330:	8b eb       	ldi	r24, 0xBB	; 187
    4332:	9e e1       	ldi	r25, 0x1E	; 30
    4334:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    4338:	e1 2c       	mov	r14, r1
	xTaskCreate(Defrost,(const portCHAR *)"Defrost",256,NULL,0, NULL );
    433a:	f1 2c       	mov	r15, r1
    433c:	20 e0       	ldi	r18, 0x00	; 0
    433e:	30 e0       	ldi	r19, 0x00	; 0
    4340:	40 e0       	ldi	r20, 0x00	; 0
    4342:	51 e0       	ldi	r21, 0x01	; 1
    4344:	67 ea       	ldi	r22, 0xA7	; 167
    4346:	72 e0       	ldi	r23, 0x02	; 2
    4348:	81 ec       	ldi	r24, 0xC1	; 193
    434a:	9d e1       	ldi	r25, 0x1D	; 29
    434c:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
    4350:	0e 94 56 16 	call	0x2cac	; 0x2cac <vTaskStartScheduler>
	//--------------------------------------
	vTaskStartScheduler();
    4354:	80 e0       	ldi	r24, 0x00	; 0
}
    4356:	90 e0       	ldi	r25, 0x00	; 0
    4358:	a2 96       	adiw	r28, 0x22	; 34
    435a:	0f b6       	in	r0, 0x3f	; 63
    435c:	f8 94       	cli
    435e:	de bf       	out	0x3e, r29	; 62
    4360:	0f be       	out	0x3f, r0	; 63
    4362:	cd bf       	out	0x3d, r28	; 61
    4364:	08 95       	ret

00004366 <__vector_17>:
    4366:	1f 92       	push	r1

ISR(TIMER1_COMPA_vect) // timer_compare_a
{
    4368:	0f 92       	push	r0
    436a:	0f b6       	in	r0, 0x3f	; 63
    436c:	0f 92       	push	r0
    436e:	11 24       	eor	r1, r1
    4370:	0b b6       	in	r0, 0x3b	; 59
    4372:	0f 92       	push	r0
    4374:	2f 93       	push	r18
    4376:	3f 93       	push	r19
    4378:	4f 93       	push	r20
    437a:	5f 93       	push	r21
    437c:	6f 93       	push	r22
    437e:	7f 93       	push	r23
    4380:	8f 93       	push	r24
    4382:	9f 93       	push	r25
    4384:	af 93       	push	r26
    4386:	bf 93       	push	r27
    4388:	ef 93       	push	r30
    438a:	ff 93       	push	r31
	
	static BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
    438c:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <xHigherPriorityTaskWoken.3697>
	countTimer++;
    4390:	80 91 c1 0a 	lds	r24, 0x0AC1	; 0x800ac1 <countTimer>
    4394:	90 91 c2 0a 	lds	r25, 0x0AC2	; 0x800ac2 <countTimer+0x1>
    4398:	a0 91 c3 0a 	lds	r26, 0x0AC3	; 0x800ac3 <countTimer+0x2>
    439c:	b0 91 c4 0a 	lds	r27, 0x0AC4	; 0x800ac4 <countTimer+0x3>
    43a0:	01 96       	adiw	r24, 0x01	; 1
    43a2:	a1 1d       	adc	r26, r1
    43a4:	b1 1d       	adc	r27, r1
    43a6:	80 93 c1 0a 	sts	0x0AC1, r24	; 0x800ac1 <countTimer>
    43aa:	90 93 c2 0a 	sts	0x0AC2, r25	; 0x800ac2 <countTimer+0x1>
    43ae:	a0 93 c3 0a 	sts	0x0AC3, r26	; 0x800ac3 <countTimer+0x2>
    43b2:	b0 93 c4 0a 	sts	0x0AC4, r27	; 0x800ac4 <countTimer+0x3>
	if(countTimer==7){stop_1_Timer();countTimer=0;xSemaphoreGiveFromISR(xMbBinarySemaphore,&xHigherPriorityTaskWoken);}
    43b6:	80 91 c1 0a 	lds	r24, 0x0AC1	; 0x800ac1 <countTimer>
    43ba:	90 91 c2 0a 	lds	r25, 0x0AC2	; 0x800ac2 <countTimer+0x1>
    43be:	a0 91 c3 0a 	lds	r26, 0x0AC3	; 0x800ac3 <countTimer+0x2>
    43c2:	b0 91 c4 0a 	lds	r27, 0x0AC4	; 0x800ac4 <countTimer+0x3>
    43c6:	07 97       	sbiw	r24, 0x07	; 7
    43c8:	a1 05       	cpc	r26, r1
    43ca:	b1 05       	cpc	r27, r1
    43cc:	89 f4       	brne	.+34     	; 0x43f0 <__vector_17+0x8a>
    43ce:	3d d3       	rcall	.+1658   	; 0x4a4a <stop_1_Timer>
    43d0:	10 92 c1 0a 	sts	0x0AC1, r1	; 0x800ac1 <countTimer>
    43d4:	10 92 c2 0a 	sts	0x0AC2, r1	; 0x800ac2 <countTimer+0x1>
    43d8:	10 92 c3 0a 	sts	0x0AC3, r1	; 0x800ac3 <countTimer+0x2>
    43dc:	10 92 c4 0a 	sts	0x0AC4, r1	; 0x800ac4 <countTimer+0x3>
    43e0:	60 e2       	ldi	r22, 0x20	; 32
    43e2:	77 e0       	ldi	r23, 0x07	; 7
    43e4:	80 91 ab 0a 	lds	r24, 0x0AAB	; 0x800aab <xMbBinarySemaphore>
    43e8:	90 91 ac 0a 	lds	r25, 0x0AAC	; 0x800aac <xMbBinarySemaphore+0x1>
    43ec:	0e 94 c9 0a 	call	0x1592	; 0x1592 <xQueueGiveFromISR>
	//if( xHigherPriorityTaskWoken == pdTRUE )portYIELD();

}
    43f0:	ff 91       	pop	r31
    43f2:	ef 91       	pop	r30
    43f4:	bf 91       	pop	r27
    43f6:	af 91       	pop	r26
    43f8:	9f 91       	pop	r25
    43fa:	8f 91       	pop	r24
    43fc:	7f 91       	pop	r23
    43fe:	6f 91       	pop	r22
    4400:	5f 91       	pop	r21
    4402:	4f 91       	pop	r20
    4404:	3f 91       	pop	r19
    4406:	2f 91       	pop	r18
    4408:	0f 90       	pop	r0
    440a:	0b be       	out	0x3b, r0	; 59
    440c:	0f 90       	pop	r0
    440e:	0f be       	out	0x3f, r0	; 63
    4410:	0f 90       	pop	r0
    4412:	1f 90       	pop	r1
    4414:	18 95       	reti

00004416 <ADE7758_read24>:
}
long ADE7758_getMaskInterrupts(void){
	return ADE7758_read24(MASK);
}
void ADE7758_setMaskInterrupts(unsigned long data){
	return ADE7758_write24(MASK, data);
    4416:	1f 93       	push	r17
    4418:	cf 93       	push	r28
    441a:	df 93       	push	r29
    441c:	c8 2f       	mov	r28, r24
    441e:	0f b6       	in	r0, 0x3f	; 63
    4420:	f8 94       	cli
    4422:	0f 92       	push	r0
    4424:	84 e0       	ldi	r24, 0x04	; 4
    4426:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <spiSelect>
    442a:	8c 2f       	mov	r24, r28
    442c:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    4430:	80 e0       	ldi	r24, 0x00	; 0
    4432:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    4436:	18 2f       	mov	r17, r24
    4438:	80 e0       	ldi	r24, 0x00	; 0
    443a:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    443e:	c8 2f       	mov	r28, r24
    4440:	80 e0       	ldi	r24, 0x00	; 0
    4442:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    4446:	d8 2f       	mov	r29, r24
    4448:	84 e0       	ldi	r24, 0x04	; 4
    444a:	0e 94 17 14 	call	0x282e	; 0x282e <spiDeselect>
    444e:	0f 90       	pop	r0
    4450:	0f be       	out	0x3f, r0	; 63
    4452:	8c 2f       	mov	r24, r28
    4454:	90 e0       	ldi	r25, 0x00	; 0
    4456:	a0 e0       	ldi	r26, 0x00	; 0
    4458:	b0 e0       	ldi	r27, 0x00	; 0
    445a:	ba 2f       	mov	r27, r26
    445c:	a9 2f       	mov	r26, r25
    445e:	98 2f       	mov	r25, r24
    4460:	88 27       	eor	r24, r24
    4462:	a1 2b       	or	r26, r17
    4464:	bc 01       	movw	r22, r24
    4466:	cd 01       	movw	r24, r26
    4468:	6d 2b       	or	r22, r29
    446a:	df 91       	pop	r29
    446c:	cf 91       	pop	r28
    446e:	1f 91       	pop	r17
    4470:	08 95       	ret

00004472 <ADE7758_write8>:
    4472:	cf 93       	push	r28
    4474:	df 93       	push	r29
    4476:	d8 2f       	mov	r29, r24
    4478:	c6 2f       	mov	r28, r22
    447a:	0f b6       	in	r0, 0x3f	; 63
    447c:	f8 94       	cli
    447e:	0f 92       	push	r0
    4480:	84 e0       	ldi	r24, 0x04	; 4
    4482:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <spiSelect>
    4486:	8d 2f       	mov	r24, r29
    4488:	80 68       	ori	r24, 0x80	; 128
    448a:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    448e:	8c 2f       	mov	r24, r28
    4490:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    4494:	84 e0       	ldi	r24, 0x04	; 4
    4496:	0e 94 17 14 	call	0x282e	; 0x282e <spiDeselect>
    449a:	0f 90       	pop	r0
    449c:	0f be       	out	0x3f, r0	; 63
    449e:	df 91       	pop	r29
    44a0:	cf 91       	pop	r28
    44a2:	08 95       	ret

000044a4 <ADE7758_setOpMode>:
    44a4:	68 2f       	mov	r22, r24
    44a6:	83 e1       	ldi	r24, 0x13	; 19
    44a8:	e4 cf       	rjmp	.-56     	; 0x4472 <ADE7758_write8>
    44aa:	08 95       	ret

000044ac <ADE7758_setWavMode>:
    44ac:	68 2f       	mov	r22, r24
    44ae:	85 e1       	ldi	r24, 0x15	; 21
    44b0:	e0 cf       	rjmp	.-64     	; 0x4472 <ADE7758_write8>
    44b2:	08 95       	ret

000044b4 <ADE7758_setLcycMode>:
    44b4:	68 2f       	mov	r22, r24
    44b6:	87 e1       	ldi	r24, 0x17	; 23
    44b8:	dc cf       	rjmp	.-72     	; 0x4472 <ADE7758_write8>
    44ba:	08 95       	ret

000044bc <ADE7758_setupDivs>:
    44bc:	cf 93       	push	r28
    44be:	df 93       	push	r29
    44c0:	d6 2f       	mov	r29, r22
    44c2:	c4 2f       	mov	r28, r20
    44c4:	68 2f       	mov	r22, r24
    44c6:	82 e4       	ldi	r24, 0x42	; 66
    44c8:	d4 df       	rcall	.-88     	; 0x4472 <ADE7758_write8>
    44ca:	6d 2f       	mov	r22, r29
    44cc:	83 e4       	ldi	r24, 0x43	; 67
    44ce:	d1 df       	rcall	.-94     	; 0x4472 <ADE7758_write8>
    44d0:	6c 2f       	mov	r22, r28
    44d2:	84 e4       	ldi	r24, 0x44	; 68
    44d4:	ce df       	rcall	.-100    	; 0x4472 <ADE7758_write8>
    44d6:	df 91       	pop	r29
    44d8:	cf 91       	pop	r28
    44da:	08 95       	ret

000044dc <ADE7758_Init>:
    44dc:	88 e0       	ldi	r24, 0x08	; 8
    44de:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <spiSetDataMode>
    44e2:	86 e0       	ldi	r24, 0x06	; 6
    44e4:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <spiSetClockDivider>
    44e8:	81 e0       	ldi	r24, 0x01	; 1
    44ea:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <spiSetBitOrder>
    44ee:	84 e0       	ldi	r24, 0x04	; 4
    44f0:	0e 94 81 13 	call	0x2702	; 0x2702 <spiBegin>
    44f4:	80 e0       	ldi	r24, 0x00	; 0
    44f6:	de df       	rcall	.-68     	; 0x44b4 <ADE7758_setLcycMode>
    44f8:	60 e0       	ldi	r22, 0x00	; 0
    44fa:	83 e2       	ldi	r24, 0x23	; 35
    44fc:	ba df       	rcall	.-140    	; 0x4472 <ADE7758_write8>
    44fe:	42 e0       	ldi	r20, 0x02	; 2
    4500:	62 e0       	ldi	r22, 0x02	; 2
    4502:	82 e0       	ldi	r24, 0x02	; 2
    4504:	db df       	rcall	.-74     	; 0x44bc <ADE7758_setupDivs>
    4506:	84 e0       	ldi	r24, 0x04	; 4
    4508:	cd df       	rcall	.-102    	; 0x44a4 <ADE7758_setOpMode>
    450a:	80 e1       	ldi	r24, 0x10	; 16
    450c:	cf cf       	rjmp	.-98     	; 0x44ac <ADE7758_setWavMode>
    450e:	08 95       	ret

00004510 <ADE7758_getStatus>:
}
unsigned long ADE7758_getStatus(){
	return ADE7758_read24(STATUS);
    4510:	89 e1       	ldi	r24, 0x19	; 25
    4512:	81 cf       	rjmp	.-254    	; 0x4416 <ADE7758_read24>
}
    4514:	08 95       	ret

00004516 <ADE7758_resetStatus>:
unsigned long ADE7758_resetStatus(){
	return ADE7758_read24(RSTATUS);
    4516:	8a e1       	ldi	r24, 0x1A	; 26
    4518:	7e cf       	rjmp	.-260    	; 0x4416 <ADE7758_read24>
}
    451a:	08 95       	ret

0000451c <Check_Erors>:
#include "Errors.h"

extern  bool def;
int Check_Erors(xCompressor *comp,xEEdata *EElimit)
{
    451c:	4f 92       	push	r4
    451e:	5f 92       	push	r5
    4520:	6f 92       	push	r6
    4522:	7f 92       	push	r7
    4524:	8f 92       	push	r8
    4526:	9f 92       	push	r9
    4528:	af 92       	push	r10
    452a:	bf 92       	push	r11
    452c:	cf 92       	push	r12
    452e:	df 92       	push	r13
    4530:	ef 92       	push	r14
    4532:	ff 92       	push	r15
    4534:	0f 93       	push	r16
    4536:	1f 93       	push	r17
    4538:	cf 93       	push	r28
    453a:	df 93       	push	r29
    453c:	00 d0       	rcall	.+0      	; 0x453e <Check_Erors+0x22>
    453e:	00 d0       	rcall	.+0      	; 0x4540 <Check_Erors+0x24>
    4540:	cd b7       	in	r28, 0x3d	; 61
    4542:	de b7       	in	r29, 0x3e	; 62
    4544:	9e 83       	std	Y+6, r25	; 0x06
    4546:	8d 83       	std	Y+5, r24	; 0x05
    4548:	8b 01       	movw	r16, r22
		if( comp->Dhw_Temp<-100){return (10+comp->Index);}
    454a:	20 e0       	ldi	r18, 0x00	; 0
    454c:	30 e0       	ldi	r19, 0x00	; 0
    454e:	48 ec       	ldi	r20, 0xC8	; 200
    4550:	52 ec       	ldi	r21, 0xC2	; 194
    4552:	dc 01       	movw	r26, r24
    4554:	52 96       	adiw	r26, 0x12	; 18
    4556:	6d 91       	ld	r22, X+
    4558:	7d 91       	ld	r23, X+
    455a:	8d 91       	ld	r24, X+
    455c:	9c 91       	ld	r25, X
    455e:	55 97       	sbiw	r26, 0x15	; 21
    4560:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    4564:	88 23       	and	r24, r24
    4566:	44 f4       	brge	.+16     	; 0x4578 <Check_Erors+0x5c>
    4568:	ed 81       	ldd	r30, Y+5	; 0x05
    456a:	fe 81       	ldd	r31, Y+6	; 0x06
    456c:	ee 58       	subi	r30, 0x8E	; 142
    456e:	ff 4f       	sbci	r31, 0xFF	; 255
    4570:	80 81       	ld	r24, Z
    4572:	91 81       	ldd	r25, Z+1	; 0x01
    4574:	0a 96       	adiw	r24, 0x0a	; 10
    4576:	47 c2       	rjmp	.+1166   	; 0x4a06 <Check_Erors+0x4ea>
		else if(comp->Bac_Temp<-100) {return (20+comp->Index);}
    4578:	ad 81       	ldd	r26, Y+5	; 0x05
    457a:	be 81       	ldd	r27, Y+6	; 0x06
    457c:	56 96       	adiw	r26, 0x16	; 22
    457e:	cd 90       	ld	r12, X+
    4580:	dd 90       	ld	r13, X+
    4582:	ed 90       	ld	r14, X+
    4584:	fc 90       	ld	r15, X
    4586:	59 97       	sbiw	r26, 0x19	; 25
    4588:	20 e0       	ldi	r18, 0x00	; 0
    458a:	30 e0       	ldi	r19, 0x00	; 0
    458c:	48 ec       	ldi	r20, 0xC8	; 200
    458e:	52 ec       	ldi	r21, 0xC2	; 194
    4590:	c7 01       	movw	r24, r14
    4592:	b6 01       	movw	r22, r12
    4594:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    4598:	88 23       	and	r24, r24
    459a:	44 f4       	brge	.+16     	; 0x45ac <Check_Erors+0x90>
    459c:	ed 81       	ldd	r30, Y+5	; 0x05
    459e:	fe 81       	ldd	r31, Y+6	; 0x06
    45a0:	ee 58       	subi	r30, 0x8E	; 142
    45a2:	ff 4f       	sbci	r31, 0xFF	; 255
    45a4:	80 81       	ld	r24, Z
    45a6:	91 81       	ldd	r25, Z+1	; 0x01
    45a8:	44 96       	adiw	r24, 0x14	; 20
    45aa:	2d c2       	rjmp	.+1114   	; 0x4a06 <Check_Erors+0x4ea>
		else if (comp->Heat_Out<-100) {return (30+comp->Index);}
    45ac:	ad 81       	ldd	r26, Y+5	; 0x05
    45ae:	be 81       	ldd	r27, Y+6	; 0x06
    45b0:	9a 96       	adiw	r26, 0x2a	; 42
    45b2:	4d 90       	ld	r4, X+
    45b4:	5d 90       	ld	r5, X+
    45b6:	6d 90       	ld	r6, X+
    45b8:	7c 90       	ld	r7, X
    45ba:	9d 97       	sbiw	r26, 0x2d	; 45
    45bc:	20 e0       	ldi	r18, 0x00	; 0
    45be:	30 e0       	ldi	r19, 0x00	; 0
    45c0:	48 ec       	ldi	r20, 0xC8	; 200
    45c2:	52 ec       	ldi	r21, 0xC2	; 194
    45c4:	c3 01       	movw	r24, r6
    45c6:	b2 01       	movw	r22, r4
    45c8:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    45cc:	88 23       	and	r24, r24
    45ce:	44 f4       	brge	.+16     	; 0x45e0 <Check_Erors+0xc4>
    45d0:	ed 81       	ldd	r30, Y+5	; 0x05
    45d2:	fe 81       	ldd	r31, Y+6	; 0x06
    45d4:	ee 58       	subi	r30, 0x8E	; 142
    45d6:	ff 4f       	sbci	r31, 0xFF	; 255
    45d8:	80 81       	ld	r24, Z
    45da:	91 81       	ldd	r25, Z+1	; 0x01
    45dc:	4e 96       	adiw	r24, 0x1e	; 30
    45de:	13 c2       	rjmp	.+1062   	; 0x4a06 <Check_Erors+0x4ea>
		else if (comp->Heat_In<-100){return (40+comp->Index);}
    45e0:	ad 81       	ldd	r26, Y+5	; 0x05
    45e2:	be 81       	ldd	r27, Y+6	; 0x06
    45e4:	9e 96       	adiw	r26, 0x2e	; 46
    45e6:	8d 90       	ld	r8, X+
    45e8:	9d 90       	ld	r9, X+
    45ea:	ad 90       	ld	r10, X+
    45ec:	bc 90       	ld	r11, X
    45ee:	d1 97       	sbiw	r26, 0x31	; 49
    45f0:	20 e0       	ldi	r18, 0x00	; 0
    45f2:	30 e0       	ldi	r19, 0x00	; 0
    45f4:	48 ec       	ldi	r20, 0xC8	; 200
    45f6:	52 ec       	ldi	r21, 0xC2	; 194
    45f8:	c5 01       	movw	r24, r10
    45fa:	b4 01       	movw	r22, r8
    45fc:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    4600:	88 23       	and	r24, r24
    4602:	44 f4       	brge	.+16     	; 0x4614 <Check_Erors+0xf8>
    4604:	ed 81       	ldd	r30, Y+5	; 0x05
    4606:	fe 81       	ldd	r31, Y+6	; 0x06
    4608:	ee 58       	subi	r30, 0x8E	; 142
    460a:	ff 4f       	sbci	r31, 0xFF	; 255
    460c:	80 81       	ld	r24, Z
    460e:	91 81       	ldd	r25, Z+1	; 0x01
    4610:	88 96       	adiw	r24, 0x28	; 40
    4612:	f9 c1       	rjmp	.+1010   	; 0x4a06 <Check_Erors+0x4ea>
		else if(comp->Src_In<-100) {return (50+comp->Index);}
    4614:	20 e0       	ldi	r18, 0x00	; 0
    4616:	30 e0       	ldi	r19, 0x00	; 0
    4618:	48 ec       	ldi	r20, 0xC8	; 200
    461a:	52 ec       	ldi	r21, 0xC2	; 194
    461c:	ad 81       	ldd	r26, Y+5	; 0x05
    461e:	be 81       	ldd	r27, Y+6	; 0x06
    4620:	d2 96       	adiw	r26, 0x32	; 50
    4622:	6d 91       	ld	r22, X+
    4624:	7d 91       	ld	r23, X+
    4626:	8d 91       	ld	r24, X+
    4628:	9c 91       	ld	r25, X
    462a:	d5 97       	sbiw	r26, 0x35	; 53
    462c:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    4630:	88 23       	and	r24, r24
    4632:	44 f4       	brge	.+16     	; 0x4644 <Check_Erors+0x128>
    4634:	ed 81       	ldd	r30, Y+5	; 0x05
    4636:	fe 81       	ldd	r31, Y+6	; 0x06
    4638:	ee 58       	subi	r30, 0x8E	; 142
    463a:	ff 4f       	sbci	r31, 0xFF	; 255
    463c:	80 81       	ld	r24, Z
    463e:	91 81       	ldd	r25, Z+1	; 0x01
    4640:	c2 96       	adiw	r24, 0x32	; 50
    4642:	e1 c1       	rjmp	.+962    	; 0x4a06 <Check_Erors+0x4ea>
		else if (comp->Src_Out<-100) {return (60+comp->Index);}
    4644:	20 e0       	ldi	r18, 0x00	; 0
    4646:	30 e0       	ldi	r19, 0x00	; 0
    4648:	48 ec       	ldi	r20, 0xC8	; 200
    464a:	52 ec       	ldi	r21, 0xC2	; 194
    464c:	ad 81       	ldd	r26, Y+5	; 0x05
    464e:	be 81       	ldd	r27, Y+6	; 0x06
    4650:	d6 96       	adiw	r26, 0x36	; 54
    4652:	6d 91       	ld	r22, X+
    4654:	7d 91       	ld	r23, X+
    4656:	8d 91       	ld	r24, X+
    4658:	9c 91       	ld	r25, X
    465a:	d9 97       	sbiw	r26, 0x39	; 57
    465c:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    4660:	88 23       	and	r24, r24
    4662:	44 f4       	brge	.+16     	; 0x4674 <Check_Erors+0x158>
    4664:	ed 81       	ldd	r30, Y+5	; 0x05
    4666:	fe 81       	ldd	r31, Y+6	; 0x06
    4668:	ee 58       	subi	r30, 0x8E	; 142
    466a:	ff 4f       	sbci	r31, 0xFF	; 255
    466c:	80 81       	ld	r24, Z
    466e:	91 81       	ldd	r25, Z+1	; 0x01
    4670:	cc 96       	adiw	r24, 0x3c	; 60
    4672:	c9 c1       	rjmp	.+914    	; 0x4a06 <Check_Erors+0x4ea>
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
    4674:	ad 81       	ldd	r26, Y+5	; 0x05
    4676:	be 81       	ldd	r27, Y+6	; 0x06
    4678:	da 96       	adiw	r26, 0x3a	; 58
    467a:	8d 91       	ld	r24, X+
    467c:	9d 91       	ld	r25, X+
    467e:	0d 90       	ld	r0, X+
    4680:	bc 91       	ld	r27, X
    4682:	a0 2d       	mov	r26, r0
    4684:	89 83       	std	Y+1, r24	; 0x01
    4686:	9a 83       	std	Y+2, r25	; 0x02
    4688:	ab 83       	std	Y+3, r26	; 0x03
    468a:	bc 83       	std	Y+4, r27	; 0x04
    468c:	20 e0       	ldi	r18, 0x00	; 0
    468e:	30 e0       	ldi	r19, 0x00	; 0
    4690:	48 ec       	ldi	r20, 0xC8	; 200
    4692:	52 ec       	ldi	r21, 0xC2	; 194
    4694:	bc 01       	movw	r22, r24
    4696:	cd 01       	movw	r24, r26
    4698:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    469c:	88 23       	and	r24, r24
    469e:	4c f4       	brge	.+18     	; 0x46b2 <Check_Erors+0x196>
    46a0:	ed 81       	ldd	r30, Y+5	; 0x05
    46a2:	fe 81       	ldd	r31, Y+6	; 0x06
    46a4:	ee 58       	subi	r30, 0x8E	; 142
    46a6:	ff 4f       	sbci	r31, 0xFF	; 255
    46a8:	80 81       	ld	r24, Z
    46aa:	91 81       	ldd	r25, Z+1	; 0x01
    46ac:	8a 5b       	subi	r24, 0xBA	; 186
    46ae:	9f 4f       	sbci	r25, 0xFF	; 255
    46b0:	aa c1       	rjmp	.+852    	; 0x4a06 <Check_Erors+0x4ea>
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
    46b2:	20 e0       	ldi	r18, 0x00	; 0
    46b4:	30 e0       	ldi	r19, 0x00	; 0
    46b6:	48 ec       	ldi	r20, 0xC8	; 200
    46b8:	52 ec       	ldi	r21, 0xC2	; 194
    46ba:	ed 81       	ldd	r30, Y+5	; 0x05
    46bc:	fe 81       	ldd	r31, Y+6	; 0x06
    46be:	fe 96       	adiw	r30, 0x3e	; 62
    46c0:	60 81       	ld	r22, Z
    46c2:	71 81       	ldd	r23, Z+1	; 0x01
    46c4:	82 81       	ldd	r24, Z+2	; 0x02
    46c6:	93 81       	ldd	r25, Z+3	; 0x03
    46c8:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    46cc:	88 23       	and	r24, r24
    46ce:	54 f4       	brge	.+20     	; 0x46e4 <Check_Erors+0x1c8>
    46d0:	8d 81       	ldd	r24, Y+5	; 0x05
    46d2:	9e 81       	ldd	r25, Y+6	; 0x06
    46d4:	8e 58       	subi	r24, 0x8E	; 142
    46d6:	9f 4f       	sbci	r25, 0xFF	; 255
    46d8:	dc 01       	movw	r26, r24
    46da:	8d 91       	ld	r24, X+
    46dc:	9c 91       	ld	r25, X
    46de:	80 5b       	subi	r24, 0xB0	; 176
    46e0:	9f 4f       	sbci	r25, 0xFF	; 255
    46e2:	91 c1       	rjmp	.+802    	; 0x4a06 <Check_Erors+0x4ea>
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
    46e4:	20 e0       	ldi	r18, 0x00	; 0
    46e6:	30 e0       	ldi	r19, 0x00	; 0
    46e8:	48 ec       	ldi	r20, 0xC8	; 200
    46ea:	52 ec       	ldi	r21, 0xC2	; 194
    46ec:	ed 81       	ldd	r30, Y+5	; 0x05
    46ee:	fe 81       	ldd	r31, Y+6	; 0x06
    46f0:	ee 5b       	subi	r30, 0xBE	; 190
    46f2:	ff 4f       	sbci	r31, 0xFF	; 255
    46f4:	60 81       	ld	r22, Z
    46f6:	71 81       	ldd	r23, Z+1	; 0x01
    46f8:	82 81       	ldd	r24, Z+2	; 0x02
    46fa:	93 81       	ldd	r25, Z+3	; 0x03
    46fc:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    4700:	88 23       	and	r24, r24
    4702:	4c f4       	brge	.+18     	; 0x4716 <Check_Erors+0x1fa>
    4704:	ed 81       	ldd	r30, Y+5	; 0x05
    4706:	fe 81       	ldd	r31, Y+6	; 0x06
    4708:	ee 58       	subi	r30, 0x8E	; 142
    470a:	ff 4f       	sbci	r31, 0xFF	; 255
    470c:	80 81       	ld	r24, Z
    470e:	91 81       	ldd	r25, Z+1	; 0x01
    4710:	86 5a       	subi	r24, 0xA6	; 166
    4712:	9f 4f       	sbci	r25, 0xFF	; 255
    4714:	78 c1       	rjmp	.+752    	; 0x4a06 <Check_Erors+0x4ea>
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
    4716:	4a 9b       	sbis	0x09, 2	; 9
    4718:	10 c0       	rjmp	.+32     	; 0x473a <Check_Erors+0x21e>
    471a:	ad 81       	ldd	r26, Y+5	; 0x05
    471c:	be 81       	ldd	r27, Y+6	; 0x06
    471e:	1f 96       	adiw	r26, 0x0f	; 15
    4720:	8c 91       	ld	r24, X
    4722:	1f 97       	sbiw	r26, 0x0f	; 15
    4724:	81 30       	cpi	r24, 0x01	; 1
    4726:	49 f4       	brne	.+18     	; 0x473a <Check_Erors+0x21e>
    4728:	fd 01       	movw	r30, r26
    472a:	ee 58       	subi	r30, 0x8E	; 142
    472c:	ff 4f       	sbci	r31, 0xFF	; 255
    472e:	80 81       	ld	r24, Z
    4730:	91 81       	ldd	r25, Z+1	; 0x01
    4732:	01 97       	sbiw	r24, 0x01	; 1
    4734:	09 f0       	breq	.+2      	; 0x4738 <Check_Erors+0x21c>
    4736:	56 c1       	rjmp	.+684    	; 0x49e4 <Check_Erors+0x4c8>
    4738:	34 c1       	rjmp	.+616    	; 0x49a2 <Check_Erors+0x486>
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    473a:	4b 9b       	sbis	0x09, 3	; 9
    473c:	10 c0       	rjmp	.+32     	; 0x475e <Check_Erors+0x242>
    473e:	ed 81       	ldd	r30, Y+5	; 0x05
    4740:	fe 81       	ldd	r31, Y+6	; 0x06
    4742:	87 85       	ldd	r24, Z+15	; 0x0f
    4744:	81 30       	cpi	r24, 0x01	; 1
    4746:	09 f0       	breq	.+2      	; 0x474a <Check_Erors+0x22e>
    4748:	5b c1       	rjmp	.+694    	; 0x4a00 <Check_Erors+0x4e4>
    474a:	ed 81       	ldd	r30, Y+5	; 0x05
    474c:	fe 81       	ldd	r31, Y+6	; 0x06
    474e:	ee 58       	subi	r30, 0x8E	; 142
    4750:	ff 4f       	sbci	r31, 0xFF	; 255
    4752:	80 81       	ld	r24, Z
    4754:	91 81       	ldd	r25, Z+1	; 0x01
    4756:	02 97       	sbiw	r24, 0x02	; 2
    4758:	09 f0       	breq	.+2      	; 0x475c <Check_Erors+0x240>
    475a:	47 c1       	rjmp	.+654    	; 0x49ea <Check_Erors+0x4ce>
    475c:	25 c1       	rjmp	.+586    	; 0x49a8 <Check_Erors+0x48c>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    475e:	65 9b       	sbis	0x0c, 5	; 12
    4760:	11 c0       	rjmp	.+34     	; 0x4784 <Check_Erors+0x268>
    4762:	ad 81       	ldd	r26, Y+5	; 0x05
    4764:	be 81       	ldd	r27, Y+6	; 0x06
    4766:	1f 96       	adiw	r26, 0x0f	; 15
    4768:	8c 91       	ld	r24, X
    476a:	81 30       	cpi	r24, 0x01	; 1
    476c:	09 f0       	breq	.+2      	; 0x4770 <Check_Erors+0x254>
    476e:	40 c1       	rjmp	.+640    	; 0x49f0 <Check_Erors+0x4d4>
    4770:	ed 81       	ldd	r30, Y+5	; 0x05
    4772:	fe 81       	ldd	r31, Y+6	; 0x06
    4774:	ee 58       	subi	r30, 0x8E	; 142
    4776:	ff 4f       	sbci	r31, 0xFF	; 255
    4778:	80 81       	ld	r24, Z
    477a:	91 81       	ldd	r25, Z+1	; 0x01
    477c:	01 97       	sbiw	r24, 0x01	; 1
    477e:	09 f0       	breq	.+2      	; 0x4782 <Check_Erors+0x266>
    4780:	39 c1       	rjmp	.+626    	; 0x49f4 <Check_Erors+0x4d8>
    4782:	15 c1       	rjmp	.+554    	; 0x49ae <Check_Erors+0x492>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    4784:	65 9b       	sbis	0x0c, 5	; 12
    4786:	0e c0       	rjmp	.+28     	; 0x47a4 <Check_Erors+0x288>
    4788:	ed 81       	ldd	r30, Y+5	; 0x05
    478a:	fe 81       	ldd	r31, Y+6	; 0x06
    478c:	87 85       	ldd	r24, Z+15	; 0x0f
    478e:	81 30       	cpi	r24, 0x01	; 1
    4790:	49 f4       	brne	.+18     	; 0x47a4 <Check_Erors+0x288>
    4792:	ed 81       	ldd	r30, Y+5	; 0x05
    4794:	fe 81       	ldd	r31, Y+6	; 0x06
    4796:	ee 58       	subi	r30, 0x8E	; 142
    4798:	ff 4f       	sbci	r31, 0xFF	; 255
    479a:	80 81       	ld	r24, Z
    479c:	91 81       	ldd	r25, Z+1	; 0x01
    479e:	02 97       	sbiw	r24, 0x02	; 2
    47a0:	09 f4       	brne	.+2      	; 0x47a4 <Check_Erors+0x288>
    47a2:	08 c1       	rjmp	.+528    	; 0x49b4 <Check_Erors+0x498>
		// else if ( comp->High_Press > 0){return (140+comp->Index);}
		// else if ( comp->Low_Press>0 ) {return (120+comp->Index);}
		 else if ( comp->Low_Press< EElimit->LP_Min ) {return (120+comp->Index);}
    47a4:	f8 01       	movw	r30, r16
    47a6:	e4 5a       	subi	r30, 0xA4	; 164
    47a8:	ff 4f       	sbci	r31, 0xFF	; 255
    47aa:	20 81       	ld	r18, Z
    47ac:	31 81       	ldd	r19, Z+1	; 0x01
    47ae:	42 81       	ldd	r20, Z+2	; 0x02
    47b0:	53 81       	ldd	r21, Z+3	; 0x03
    47b2:	ad 81       	ldd	r26, Y+5	; 0x05
    47b4:	be 81       	ldd	r27, Y+6	; 0x06
    47b6:	5e 96       	adiw	r26, 0x1e	; 30
    47b8:	6d 91       	ld	r22, X+
    47ba:	7d 91       	ld	r23, X+
    47bc:	8d 91       	ld	r24, X+
    47be:	9c 91       	ld	r25, X
    47c0:	91 97       	sbiw	r26, 0x21	; 33
    47c2:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    47c6:	88 23       	and	r24, r24
    47c8:	4c f4       	brge	.+18     	; 0x47dc <Check_Erors+0x2c0>
    47ca:	ed 81       	ldd	r30, Y+5	; 0x05
    47cc:	fe 81       	ldd	r31, Y+6	; 0x06
    47ce:	ee 58       	subi	r30, 0x8E	; 142
    47d0:	ff 4f       	sbci	r31, 0xFF	; 255
    47d2:	80 81       	ld	r24, Z
    47d4:	91 81       	ldd	r25, Z+1	; 0x01
    47d6:	88 58       	subi	r24, 0x88	; 136
    47d8:	9f 4f       	sbci	r25, 0xFF	; 255
    47da:	15 c1       	rjmp	.+554    	; 0x4a06 <Check_Erors+0x4ea>
		 else if ( comp->High_Press > EElimit->HP_Max){return (140+comp->Index);}	
    47dc:	d8 01       	movw	r26, r16
    47de:	16 96       	adiw	r26, 0x06	; 6
    47e0:	6c 91       	ld	r22, X
    47e2:	70 e0       	ldi	r23, 0x00	; 0
    47e4:	80 e0       	ldi	r24, 0x00	; 0
    47e6:	90 e0       	ldi	r25, 0x00	; 0
    47e8:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    47ec:	9b 01       	movw	r18, r22
    47ee:	ac 01       	movw	r20, r24
    47f0:	ed 81       	ldd	r30, Y+5	; 0x05
    47f2:	fe 81       	ldd	r31, Y+6	; 0x06
    47f4:	62 8d       	ldd	r22, Z+26	; 0x1a
    47f6:	73 8d       	ldd	r23, Z+27	; 0x1b
    47f8:	84 8d       	ldd	r24, Z+28	; 0x1c
    47fa:	95 8d       	ldd	r25, Z+29	; 0x1d
    47fc:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    4800:	18 16       	cp	r1, r24
    4802:	54 f4       	brge	.+20     	; 0x4818 <Check_Erors+0x2fc>
    4804:	8d 81       	ldd	r24, Y+5	; 0x05
    4806:	9e 81       	ldd	r25, Y+6	; 0x06
    4808:	8e 58       	subi	r24, 0x8E	; 142
    480a:	9f 4f       	sbci	r25, 0xFF	; 255
    480c:	dc 01       	movw	r26, r24
    480e:	8d 91       	ld	r24, X+
    4810:	9c 91       	ld	r25, X
    4812:	84 57       	subi	r24, 0x74	; 116
    4814:	9f 4f       	sbci	r25, 0xFF	; 255
    4816:	f7 c0       	rjmp	.+494    	; 0x4a06 <Check_Erors+0x4ea>
		 else if ( comp->Bac_Temp > EElimit->HEAT_Max && comp->Heating==1){return (160+comp->Index);}
    4818:	f8 01       	movw	r30, r16
    481a:	61 85       	ldd	r22, Z+9	; 0x09
    481c:	70 e0       	ldi	r23, 0x00	; 0
    481e:	80 e0       	ldi	r24, 0x00	; 0
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    4826:	9b 01       	movw	r18, r22
    4828:	ac 01       	movw	r20, r24
    482a:	c7 01       	movw	r24, r14
    482c:	b6 01       	movw	r22, r12
    482e:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    4832:	18 16       	cp	r1, r24
    4834:	74 f4       	brge	.+28     	; 0x4852 <Check_Erors+0x336>
    4836:	ad 81       	ldd	r26, Y+5	; 0x05
    4838:	be 81       	ldd	r27, Y+6	; 0x06
    483a:	12 96       	adiw	r26, 0x02	; 2
    483c:	8c 91       	ld	r24, X
    483e:	12 97       	sbiw	r26, 0x02	; 2
    4840:	88 23       	and	r24, r24
    4842:	39 f0       	breq	.+14     	; 0x4852 <Check_Erors+0x336>
    4844:	ae 58       	subi	r26, 0x8E	; 142
    4846:	bf 4f       	sbci	r27, 0xFF	; 255
    4848:	8d 91       	ld	r24, X+
    484a:	9c 91       	ld	r25, X
    484c:	80 56       	subi	r24, 0x60	; 96
    484e:	9f 4f       	sbci	r25, 0xFF	; 255
    4850:	da c0       	rjmp	.+436    	; 0x4a06 <Check_Erors+0x4ea>
		//else if ( comp->Bac_Temp < EElimit->HEAT_Min && comp->Cooling==1) {return (170+comp->Index);}	
		//else if ( comp->Bac_Temp < EElimit->HEAT_Min && comp->Heating==1) {return (170+comp->Index);}
		//else if ( comp->Bac_Temp > EElimit->Cool_Max && comp->Cooling==1){return (180+comp->Index);}
		else if ( comp->Bac_Temp < EElimit->Cool_Min && comp->Cooling==1){return (170+comp->Index);}
    4852:	f8 01       	movw	r30, r16
    4854:	65 85       	ldd	r22, Z+13	; 0x0d
    4856:	70 e0       	ldi	r23, 0x00	; 0
    4858:	80 e0       	ldi	r24, 0x00	; 0
    485a:	90 e0       	ldi	r25, 0x00	; 0
    485c:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    4860:	9b 01       	movw	r18, r22
    4862:	ac 01       	movw	r20, r24
    4864:	c7 01       	movw	r24, r14
    4866:	b6 01       	movw	r22, r12
    4868:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    486c:	88 23       	and	r24, r24
    486e:	74 f4       	brge	.+28     	; 0x488c <Check_Erors+0x370>
    4870:	ad 81       	ldd	r26, Y+5	; 0x05
    4872:	be 81       	ldd	r27, Y+6	; 0x06
    4874:	13 96       	adiw	r26, 0x03	; 3
    4876:	8c 91       	ld	r24, X
    4878:	13 97       	sbiw	r26, 0x03	; 3
    487a:	88 23       	and	r24, r24
    487c:	39 f0       	breq	.+14     	; 0x488c <Check_Erors+0x370>
    487e:	ae 58       	subi	r26, 0x8E	; 142
    4880:	bf 4f       	sbci	r27, 0xFF	; 255
    4882:	8d 91       	ld	r24, X+
    4884:	9c 91       	ld	r25, X
    4886:	86 55       	subi	r24, 0x56	; 86
    4888:	9f 4f       	sbci	r25, 0xFF	; 255
    488a:	bd c0       	rjmp	.+378    	; 0x4a06 <Check_Erors+0x4ea>
		//else if ( comp->SuperHeat < EElimit->MinSuperheat && comp->checkTrv) {return (180+comp->Index);}
		//else if ( comp->SuperHeat > EElimit->MaxSuperheat && comp->checkTrv && !comp->def) {return (190+comp->Index);}
		//else if ( comp->SuperCool < EElimit->MinSupercool && comp->checkTrv){return (200+comp->Index);}
		//else if ( comp->SuperCool > EElimit->MaxSupercool && comp->checkTrv && !comp->def){return (210+comp->Index);}
		else if ( comp->Ex_Comp > EElimit->ExhaustMax){return 220;}	
    488c:	f8 01       	movw	r30, r16
    488e:	66 85       	ldd	r22, Z+14	; 0x0e
    4890:	70 e0       	ldi	r23, 0x00	; 0
    4892:	80 e0       	ldi	r24, 0x00	; 0
    4894:	90 e0       	ldi	r25, 0x00	; 0
    4896:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    489a:	9b 01       	movw	r18, r22
    489c:	ac 01       	movw	r20, r24
    489e:	69 81       	ldd	r22, Y+1	; 0x01
    48a0:	7a 81       	ldd	r23, Y+2	; 0x02
    48a2:	8b 81       	ldd	r24, Y+3	; 0x03
    48a4:	9c 81       	ldd	r25, Y+4	; 0x04
    48a6:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    48aa:	18 16       	cp	r1, r24
    48ac:	0c f4       	brge	.+2      	; 0x48b0 <Check_Erors+0x394>
    48ae:	85 c0       	rjmp	.+266    	; 0x49ba <Check_Erors+0x49e>
		//else if (abs(comp->Src_In - comp->Src_Out) > EElimit->Delta_source_max && comp->checkErrors && EEpromData.AireToWater==0) {return (230+comp->Index);}
		//else if (abs(comp->Src_In - comp->Src_Out) <  EElimit->Delta_source_min && comp->checkErrors && EEpromData.AireToWater==0) {return (240+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out)  > EElimit->Delta_heating_max && comp->checkErrors) {return (250+comp->Index);}
    48b0:	a3 01       	movw	r20, r6
    48b2:	92 01       	movw	r18, r4
    48b4:	c5 01       	movw	r24, r10
    48b6:	b4 01       	movw	r22, r8
    48b8:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    48bc:	0e 94 ee 54 	call	0xa9dc	; 0xa9dc <__fixsfsi>
    48c0:	9b 01       	movw	r18, r22
    48c2:	77 23       	and	r23, r23
    48c4:	24 f4       	brge	.+8      	; 0x48ce <Check_Erors+0x3b2>
    48c6:	22 27       	eor	r18, r18
    48c8:	33 27       	eor	r19, r19
    48ca:	26 1b       	sub	r18, r22
    48cc:	37 0b       	sbc	r19, r23
    48ce:	c9 01       	movw	r24, r18
    48d0:	d8 01       	movw	r26, r16
    48d2:	54 96       	adiw	r26, 0x14	; 20
    48d4:	2c 91       	ld	r18, X
    48d6:	30 e0       	ldi	r19, 0x00	; 0
    48d8:	28 17       	cp	r18, r24
    48da:	39 07       	cpc	r19, r25
    48dc:	64 f4       	brge	.+24     	; 0x48f6 <Check_Erors+0x3da>
    48de:	ed 81       	ldd	r30, Y+5	; 0x05
    48e0:	fe 81       	ldd	r31, Y+6	; 0x06
    48e2:	85 81       	ldd	r24, Z+5	; 0x05
    48e4:	88 23       	and	r24, r24
    48e6:	d1 f0       	breq	.+52     	; 0x491c <Check_Erors+0x400>
    48e8:	ee 58       	subi	r30, 0x8E	; 142
    48ea:	ff 4f       	sbci	r31, 0xFF	; 255
    48ec:	80 81       	ld	r24, Z
    48ee:	91 81       	ldd	r25, Z+1	; 0x01
    48f0:	86 50       	subi	r24, 0x06	; 6
    48f2:	9f 4f       	sbci	r25, 0xFF	; 255
    48f4:	88 c0       	rjmp	.+272    	; 0x4a06 <Check_Erors+0x4ea>
		else if (abs(comp->Heat_In - comp->Heat_Out) < EElimit->Delta_heating_min &&  comp->checkErrors) {return (260+comp->Index);} 
    48f6:	d8 01       	movw	r26, r16
    48f8:	53 96       	adiw	r26, 0x13	; 19
    48fa:	2c 91       	ld	r18, X
    48fc:	30 e0       	ldi	r19, 0x00	; 0
    48fe:	82 17       	cp	r24, r18
    4900:	93 07       	cpc	r25, r19
    4902:	64 f4       	brge	.+24     	; 0x491c <Check_Erors+0x400>
    4904:	ed 81       	ldd	r30, Y+5	; 0x05
    4906:	fe 81       	ldd	r31, Y+6	; 0x06
    4908:	85 81       	ldd	r24, Z+5	; 0x05
    490a:	88 23       	and	r24, r24
    490c:	39 f0       	breq	.+14     	; 0x491c <Check_Erors+0x400>
    490e:	ee 58       	subi	r30, 0x8E	; 142
    4910:	ff 4f       	sbci	r31, 0xFF	; 255
    4912:	80 81       	ld	r24, Z
    4914:	91 81       	ldd	r25, Z+1	; 0x01
    4916:	8c 5f       	subi	r24, 0xFC	; 252
    4918:	9e 4f       	sbci	r25, 0xFE	; 254
    491a:	75 c0       	rjmp	.+234    	; 0x4a06 <Check_Erors+0x4ea>
		else if (!(ADE7758_getStatus() & ZXA) && EElimit->Power_380==1 && comp->Index==1){return 271;} // ADE7758_resetStatus();
    491c:	f9 dd       	rcall	.-1038   	; 0x4510 <ADE7758_getStatus>
    491e:	71 fd       	sbrc	r23, 1
    4920:	0e c0       	rjmp	.+28     	; 0x493e <Check_Erors+0x422>
    4922:	d8 01       	movw	r26, r16
    4924:	99 96       	adiw	r26, 0x29	; 41
    4926:	8c 91       	ld	r24, X
    4928:	81 30       	cpi	r24, 0x01	; 1
    492a:	49 f4       	brne	.+18     	; 0x493e <Check_Erors+0x422>
    492c:	ed 81       	ldd	r30, Y+5	; 0x05
    492e:	fe 81       	ldd	r31, Y+6	; 0x06
    4930:	ee 58       	subi	r30, 0x8E	; 142
    4932:	ff 4f       	sbci	r31, 0xFF	; 255
    4934:	80 81       	ld	r24, Z
    4936:	91 81       	ldd	r25, Z+1	; 0x01
    4938:	01 97       	sbiw	r24, 0x01	; 1
    493a:	09 f4       	brne	.+2      	; 0x493e <Check_Erors+0x422>
		else if (!(ADE7758_getStatus() & ZXB) && EElimit->Power_380==1 && comp->Index==1){return 281;}//ADE7758_resetStatus();
    493c:	41 c0       	rjmp	.+130    	; 0x49c0 <Check_Erors+0x4a4>
    493e:	e8 dd       	rcall	.-1072   	; 0x4510 <ADE7758_getStatus>
    4940:	72 fd       	sbrc	r23, 2
    4942:	0c c0       	rjmp	.+24     	; 0x495c <Check_Erors+0x440>
    4944:	f8 01       	movw	r30, r16
    4946:	81 a5       	ldd	r24, Z+41	; 0x29
    4948:	81 30       	cpi	r24, 0x01	; 1
    494a:	41 f4       	brne	.+16     	; 0x495c <Check_Erors+0x440>
    494c:	ed 81       	ldd	r30, Y+5	; 0x05
    494e:	fe 81       	ldd	r31, Y+6	; 0x06
    4950:	ee 58       	subi	r30, 0x8E	; 142
    4952:	ff 4f       	sbci	r31, 0xFF	; 255
    4954:	80 81       	ld	r24, Z
    4956:	91 81       	ldd	r25, Z+1	; 0x01
    4958:	01 97       	sbiw	r24, 0x01	; 1
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 && comp->Index==1){return 291;}//ADE7758_resetStatus();
    495a:	a9 f1       	breq	.+106    	; 0x49c6 <Check_Erors+0x4aa>
    495c:	d9 dd       	rcall	.-1102   	; 0x4510 <ADE7758_getStatus>
    495e:	73 fd       	sbrc	r23, 3
    4960:	0d c0       	rjmp	.+26     	; 0x497c <Check_Erors+0x460>
    4962:	d8 01       	movw	r26, r16
    4964:	99 96       	adiw	r26, 0x29	; 41
    4966:	8c 91       	ld	r24, X
    4968:	81 30       	cpi	r24, 0x01	; 1
    496a:	41 f4       	brne	.+16     	; 0x497c <Check_Erors+0x460>
    496c:	ed 81       	ldd	r30, Y+5	; 0x05
    496e:	fe 81       	ldd	r31, Y+6	; 0x06
    4970:	ee 58       	subi	r30, 0x8E	; 142
    4972:	ff 4f       	sbci	r31, 0xFF	; 255
    4974:	80 81       	ld	r24, Z
    4976:	91 81       	ldd	r25, Z+1	; 0x01
    4978:	01 97       	sbiw	r24, 0x01	; 1
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1 && comp->Index==1){return 301;}//ADE7758_resetStatus();
    497a:	41 f1       	breq	.+80     	; 0x49cc <Check_Erors+0x4b0>
    497c:	c9 dd       	rcall	.-1134   	; 0x4510 <ADE7758_getStatus>
    497e:	83 fd       	sbrc	r24, 3
    4980:	28 c0       	rjmp	.+80     	; 0x49d2 <Check_Erors+0x4b6>
    4982:	f8 01       	movw	r30, r16
    4984:	81 a5       	ldd	r24, Z+41	; 0x29
    4986:	81 30       	cpi	r24, 0x01	; 1
    4988:	39 f5       	brne	.+78     	; 0x49d8 <Check_Erors+0x4bc>
    498a:	8d 81       	ldd	r24, Y+5	; 0x05
    498c:	9e 81       	ldd	r25, Y+6	; 0x06
    498e:	8e 58       	subi	r24, 0x8E	; 142
    4990:	9f 4f       	sbci	r25, 0xFF	; 255
    4992:	dc 01       	movw	r26, r24
    4994:	8d 91       	ld	r24, X+
    4996:	9c 91       	ld	r25, X
    4998:	01 97       	sbiw	r24, 0x01	; 1
    499a:	09 f5       	brne	.+66     	; 0x49de <Check_Erors+0x4c2>
    499c:	8d e2       	ldi	r24, 0x2D	; 45
    499e:	91 e0       	ldi	r25, 0x01	; 1
    49a0:	32 c0       	rjmp	.+100    	; 0x4a06 <Check_Erors+0x4ea>
		else if (comp->Src_Out<-100) {return (60+comp->Index);}
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
    49a2:	85 e6       	ldi	r24, 0x65	; 101
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	2f c0       	rjmp	.+94     	; 0x4a06 <Check_Erors+0x4ea>
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    49a8:	86 e6       	ldi	r24, 0x66	; 102
    49aa:	90 e0       	ldi	r25, 0x00	; 0
    49ac:	2c c0       	rjmp	.+88     	; 0x4a06 <Check_Erors+0x4ea>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    49ae:	8f e6       	ldi	r24, 0x6F	; 111
    49b0:	90 e0       	ldi	r25, 0x00	; 0
    49b2:	29 c0       	rjmp	.+82     	; 0x4a06 <Check_Erors+0x4ea>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    49b4:	80 e7       	ldi	r24, 0x70	; 112
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	26 c0       	rjmp	.+76     	; 0x4a06 <Check_Erors+0x4ea>
		else if ( comp->Bac_Temp < EElimit->Cool_Min && comp->Cooling==1){return (170+comp->Index);}
		//else if ( comp->SuperHeat < EElimit->MinSuperheat && comp->checkTrv) {return (180+comp->Index);}
		//else if ( comp->SuperHeat > EElimit->MaxSuperheat && comp->checkTrv && !comp->def) {return (190+comp->Index);}
		//else if ( comp->SuperCool < EElimit->MinSupercool && comp->checkTrv){return (200+comp->Index);}
		//else if ( comp->SuperCool > EElimit->MaxSupercool && comp->checkTrv && !comp->def){return (210+comp->Index);}
		else if ( comp->Ex_Comp > EElimit->ExhaustMax){return 220;}	
    49ba:	8c ed       	ldi	r24, 0xDC	; 220
    49bc:	90 e0       	ldi	r25, 0x00	; 0
    49be:	23 c0       	rjmp	.+70     	; 0x4a06 <Check_Erors+0x4ea>
		//else if (abs(comp->Src_In - comp->Src_Out) > EElimit->Delta_source_max && comp->checkErrors && EEpromData.AireToWater==0) {return (230+comp->Index);}
		//else if (abs(comp->Src_In - comp->Src_Out) <  EElimit->Delta_source_min && comp->checkErrors && EEpromData.AireToWater==0) {return (240+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out)  > EElimit->Delta_heating_max && comp->checkErrors) {return (250+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out) < EElimit->Delta_heating_min &&  comp->checkErrors) {return (260+comp->Index);} 
		else if (!(ADE7758_getStatus() & ZXA) && EElimit->Power_380==1 && comp->Index==1){return 271;} // ADE7758_resetStatus();
    49c0:	8f e0       	ldi	r24, 0x0F	; 15
    49c2:	91 e0       	ldi	r25, 0x01	; 1
    49c4:	20 c0       	rjmp	.+64     	; 0x4a06 <Check_Erors+0x4ea>
		else if (!(ADE7758_getStatus() & ZXB) && EElimit->Power_380==1 && comp->Index==1){return 281;}//ADE7758_resetStatus();
    49c6:	89 e1       	ldi	r24, 0x19	; 25
    49c8:	91 e0       	ldi	r25, 0x01	; 1
    49ca:	1d c0       	rjmp	.+58     	; 0x4a06 <Check_Erors+0x4ea>
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 && comp->Index==1){return 291;}//ADE7758_resetStatus();
    49cc:	83 e2       	ldi	r24, 0x23	; 35
    49ce:	91 e0       	ldi	r25, 0x01	; 1
    49d0:	1a c0       	rjmp	.+52     	; 0x4a06 <Check_Erors+0x4ea>
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1 && comp->Index==1){return 301;}//ADE7758_resetStatus();
		//else if (comp->Src_In > EElimit->Source_Max){return (400+comp->Index);}
		//else if (comp->Src_In < EElimit->Source_Min){return (410+comp->Index);}			
		else {return 0;}
    49d2:	80 e0       	ldi	r24, 0x00	; 0
    49d4:	90 e0       	ldi	r25, 0x00	; 0
    49d6:	17 c0       	rjmp	.+46     	; 0x4a06 <Check_Erors+0x4ea>
    49d8:	80 e0       	ldi	r24, 0x00	; 0
    49da:	90 e0       	ldi	r25, 0x00	; 0
    49dc:	14 c0       	rjmp	.+40     	; 0x4a06 <Check_Erors+0x4ea>
    49de:	80 e0       	ldi	r24, 0x00	; 0
    49e0:	90 e0       	ldi	r25, 0x00	; 0
    49e2:	11 c0       	rjmp	.+34     	; 0x4a06 <Check_Erors+0x4ea>
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    49e4:	4b 99       	sbic	0x09, 3	; 9
    49e6:	b1 ce       	rjmp	.-670    	; 0x474a <Check_Erors+0x22e>
    49e8:	08 c0       	rjmp	.+16     	; 0x49fa <Check_Erors+0x4de>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    49ea:	65 99       	sbic	0x0c, 5	; 12
    49ec:	c1 ce       	rjmp	.-638    	; 0x4770 <Check_Erors+0x254>
    49ee:	ca ce       	rjmp	.-620    	; 0x4784 <Check_Erors+0x268>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    49f0:	8c b1       	in	r24, 0x0c	; 12
    49f2:	d8 ce       	rjmp	.-592    	; 0x47a4 <Check_Erors+0x288>
    49f4:	65 99       	sbic	0x0c, 5	; 12
    49f6:	cd ce       	rjmp	.-614    	; 0x4792 <Check_Erors+0x276>
    49f8:	d5 ce       	rjmp	.-598    	; 0x47a4 <Check_Erors+0x288>
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    49fa:	65 99       	sbic	0x0c, 5	; 12
    49fc:	b9 ce       	rjmp	.-654    	; 0x4770 <Check_Erors+0x254>
    49fe:	c2 ce       	rjmp	.-636    	; 0x4784 <Check_Erors+0x268>
    4a00:	65 99       	sbic	0x0c, 5	; 12
    4a02:	f6 cf       	rjmp	.-20     	; 0x49f0 <Check_Erors+0x4d4>
    4a04:	bf ce       	rjmp	.-642    	; 0x4784 <Check_Erors+0x268>
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 && comp->Index==1){return 291;}//ADE7758_resetStatus();
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1 && comp->Index==1){return 301;}//ADE7758_resetStatus();
		//else if (comp->Src_In > EElimit->Source_Max){return (400+comp->Index);}
		//else if (comp->Src_In < EElimit->Source_Min){return (410+comp->Index);}			
		else {return 0;}
    4a06:	26 96       	adiw	r28, 0x06	; 6
    4a08:	0f b6       	in	r0, 0x3f	; 63
    4a0a:	f8 94       	cli
    4a0c:	de bf       	out	0x3e, r29	; 62
    4a0e:	0f be       	out	0x3f, r0	; 63
    4a10:	cd bf       	out	0x3d, r28	; 61
    4a12:	df 91       	pop	r29
    4a14:	cf 91       	pop	r28
    4a16:	1f 91       	pop	r17
    4a18:	0f 91       	pop	r16
    4a1a:	ff 90       	pop	r15
    4a1c:	ef 90       	pop	r14
    4a1e:	df 90       	pop	r13
    4a20:	cf 90       	pop	r12
    4a22:	bf 90       	pop	r11
    4a24:	af 90       	pop	r10
    4a26:	9f 90       	pop	r9
    4a28:	8f 90       	pop	r8
    4a2a:	7f 90       	pop	r7
    4a2c:	6f 90       	pop	r6
    4a2e:	5f 90       	pop	r5
    4a30:	4f 90       	pop	r4
    4a32:	08 95       	ret

00004a34 <start_1_Timer>:
	
	
}
void start_1_Timer()
{
	TIMSK1 |= (1<<OCIE1A);
    4a34:	ef e6       	ldi	r30, 0x6F	; 111
    4a36:	f0 e0       	ldi	r31, 0x00	; 0
    4a38:	80 81       	ld	r24, Z
    4a3a:	82 60       	ori	r24, 0x02	; 2
    4a3c:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11);//1<<CS10 |
    4a3e:	e1 e8       	ldi	r30, 0x81	; 129
    4a40:	f0 e0       	ldi	r31, 0x00	; 0
    4a42:	80 81       	ld	r24, Z
    4a44:	82 60       	ori	r24, 0x02	; 2
    4a46:	80 83       	st	Z, r24
    4a48:	08 95       	ret

00004a4a <stop_1_Timer>:
	
}
void stop_1_Timer()
{
	TCCR1B &= ~ (1<<CS10);
    4a4a:	e1 e8       	ldi	r30, 0x81	; 129
    4a4c:	f0 e0       	ldi	r31, 0x00	; 0
    4a4e:	80 81       	ld	r24, Z
    4a50:	8e 7f       	andi	r24, 0xFE	; 254
    4a52:	80 83       	st	Z, r24
	TCNT1=0;
    4a54:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    4a58:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TIMSK1 &= ~( _BV( OCIE1A ) );
    4a5c:	ef e6       	ldi	r30, 0x6F	; 111
    4a5e:	f0 e0       	ldi	r31, 0x00	; 0
    4a60:	80 81       	ld	r24, Z
    4a62:	8d 7f       	andi	r24, 0xFD	; 253
    4a64:	80 83       	st	Z, r24
	TIFR1 |= _BV( OCF1A );
    4a66:	b1 9a       	sbi	0x16, 1	; 22
    4a68:	08 95       	ret

00004a6a <timer_1_Init>:
void timer_1_Init()
{
	// --- TIMER1_COMPA irq ---
	// selected time = 1562 us (24992 ticks)
	// prescaler = 1 (1 ticks ... 4.096 ms)
	TCCR1B = (1<<WGM12);//|(1<<CS10)
    4a6a:	88 e0       	ldi	r24, 0x08	; 8
    4a6c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	OCR1AH = 158 ;//158
    4a70:	8e e9       	ldi	r24, 0x9E	; 158
    4a72:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL =96;//96
    4a76:	80 e6       	ldi	r24, 0x60	; 96
    4a78:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	stop_1_Timer();
    4a7c:	e6 cf       	rjmp	.-52     	; 0x4a4a <stop_1_Timer>
    4a7e:	08 95       	ret

00004a80 <readSysReg>:
	TIMSK1 &= ~( _BV( OCIE1A ) );
	TIFR1 |= _BV( OCF1A );
}

int readSysReg(xCompressor*compPtr,xEEdata *eeprom,uint16_t adress)
{
    4a80:	cf 93       	push	r28
    4a82:	df 93       	push	r29
	int temp;
	switch(adress)
    4a84:	fa 01       	movw	r30, r20
    4a86:	3a 97       	sbiw	r30, 0x0a	; 10
    4a88:	e7 3d       	cpi	r30, 0xD7	; 215
    4a8a:	41 e0       	ldi	r20, 0x01	; 1
    4a8c:	f4 07       	cpc	r31, r20
    4a8e:	08 f0       	brcs	.+2      	; 0x4a92 <readSysReg+0x12>
    4a90:	11 c2       	rjmp	.+1058   	; 0x4eb4 <readSysReg+0x434>
    4a92:	eb 01       	movw	r28, r22
    4a94:	dc 01       	movw	r26, r24
    4a96:	88 27       	eor	r24, r24
    4a98:	e4 56       	subi	r30, 0x64	; 100
    4a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a9c:	8f 4f       	sbci	r24, 0xFF	; 255
    4a9e:	0c 94 5b 5a 	jmp	0xb4b6	; 0xb4b6 <__tablejump2__>
	{
		case 11: case 12: temp =  (int)   compPtr->compOn;break;
    4aa2:	1b 96       	adiw	r26, 0x0b	; 11
    4aa4:	6c 91       	ld	r22, X
    4aa6:	26 2f       	mov	r18, r22
    4aa8:	30 e0       	ldi	r19, 0x00	; 0
    4aaa:	04 c2       	rjmp	.+1032   	; 0x4eb4 <readSysReg+0x434>
		case 21: case 22: temp =   (int)  compPtr->srcPOn;break;
    4aac:	1f 96       	adiw	r26, 0x0f	; 15
    4aae:	6c 91       	ld	r22, X
    4ab0:	26 2f       	mov	r18, r22
    4ab2:	30 e0       	ldi	r19, 0x00	; 0
    4ab4:	ff c1       	rjmp	.+1022   	; 0x4eb4 <readSysReg+0x434>
		case 31: case 32: temp =   (int)  compPtr->heatPOn;break;
    4ab6:	1c 96       	adiw	r26, 0x0c	; 12
    4ab8:	6c 91       	ld	r22, X
    4aba:	26 2f       	mov	r18, r22
    4abc:	30 e0       	ldi	r19, 0x00	; 0
    4abe:	fa c1       	rjmp	.+1012   	; 0x4eb4 <readSysReg+0x434>
		case 41: case 42: temp =   (int)  compPtr->revVOn;break;
    4ac0:	1e 96       	adiw	r26, 0x0e	; 14
    4ac2:	6c 91       	ld	r22, X
    4ac4:	26 2f       	mov	r18, r22
    4ac6:	30 e0       	ldi	r19, 0x00	; 0
    4ac8:	f5 c1       	rjmp	.+1002   	; 0x4eb4 <readSysReg+0x434>
		case 51: case 52: temp =   (int)  compPtr->threeWOn;break;
    4aca:	1d 96       	adiw	r26, 0x0d	; 13
    4acc:	6c 91       	ld	r22, X
    4ace:	26 2f       	mov	r18, r22
    4ad0:	30 e0       	ldi	r19, 0x00	; 0
    4ad2:	f0 c1       	rjmp	.+992    	; 0x4eb4 <readSysReg+0x434>
		case 61: case 62: temp =   (int)  compPtr->Trv_position;break;
    4ad4:	a2 59       	subi	r26, 0x92	; 146
    4ad6:	bf 4f       	sbci	r27, 0xFF	; 255
    4ad8:	2d 91       	ld	r18, X+
    4ada:	3c 91       	ld	r19, X
    4adc:	eb c1       	rjmp	.+982    	; 0x4eb4 <readSysReg+0x434>
		
		case 71: case 72: temp =   (int)   (compPtr->Bac_Temp*10);break;
    4ade:	20 e0       	ldi	r18, 0x00	; 0
    4ae0:	30 e0       	ldi	r19, 0x00	; 0
    4ae2:	40 e2       	ldi	r20, 0x20	; 32
    4ae4:	51 e4       	ldi	r21, 0x41	; 65
    4ae6:	56 96       	adiw	r26, 0x16	; 22
    4ae8:	6d 91       	ld	r22, X+
    4aea:	7d 91       	ld	r23, X+
    4aec:	8d 91       	ld	r24, X+
    4aee:	9c 91       	ld	r25, X
    4af0:	59 97       	sbiw	r26, 0x19	; 25
    4af2:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    4af6:	0e 94 ee 54 	call	0xa9dc	; 0xa9dc <__fixsfsi>
    4afa:	9b 01       	movw	r18, r22
    4afc:	db c1       	rjmp	.+950    	; 0x4eb4 <readSysReg+0x434>
		case 81: case 82:  temp =   (int)  (compPtr->Dhw_Temp*10);break;
    4afe:	20 e0       	ldi	r18, 0x00	; 0
    4b00:	30 e0       	ldi	r19, 0x00	; 0
    4b02:	40 e2       	ldi	r20, 0x20	; 32
    4b04:	51 e4       	ldi	r21, 0x41	; 65
    4b06:	52 96       	adiw	r26, 0x12	; 18
    4b08:	6d 91       	ld	r22, X+
    4b0a:	7d 91       	ld	r23, X+
    4b0c:	8d 91       	ld	r24, X+
    4b0e:	9c 91       	ld	r25, X
    4b10:	55 97       	sbiw	r26, 0x15	; 21
    4b12:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    4b16:	0e 94 ee 54 	call	0xa9dc	; 0xa9dc <__fixsfsi>
    4b1a:	9b 01       	movw	r18, r22
    4b1c:	cb c1       	rjmp	.+918    	; 0x4eb4 <readSysReg+0x434>
		case 91:case 92:  temp =  (int)  (compPtr->Src_In*10);break;
    4b1e:	20 e0       	ldi	r18, 0x00	; 0
    4b20:	30 e0       	ldi	r19, 0x00	; 0
    4b22:	40 e2       	ldi	r20, 0x20	; 32
    4b24:	51 e4       	ldi	r21, 0x41	; 65
    4b26:	d2 96       	adiw	r26, 0x32	; 50
    4b28:	6d 91       	ld	r22, X+
    4b2a:	7d 91       	ld	r23, X+
    4b2c:	8d 91       	ld	r24, X+
    4b2e:	9c 91       	ld	r25, X
    4b30:	d5 97       	sbiw	r26, 0x35	; 53
    4b32:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    4b36:	0e 94 ee 54 	call	0xa9dc	; 0xa9dc <__fixsfsi>
    4b3a:	9b 01       	movw	r18, r22
    4b3c:	bb c1       	rjmp	.+886    	; 0x4eb4 <readSysReg+0x434>
		case 101:case 102:  temp =  (int)  (compPtr->Src_Out*10);break;
    4b3e:	20 e0       	ldi	r18, 0x00	; 0
    4b40:	30 e0       	ldi	r19, 0x00	; 0
    4b42:	40 e2       	ldi	r20, 0x20	; 32
    4b44:	51 e4       	ldi	r21, 0x41	; 65
    4b46:	d6 96       	adiw	r26, 0x36	; 54
    4b48:	6d 91       	ld	r22, X+
    4b4a:	7d 91       	ld	r23, X+
    4b4c:	8d 91       	ld	r24, X+
    4b4e:	9c 91       	ld	r25, X
    4b50:	d9 97       	sbiw	r26, 0x39	; 57
    4b52:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    4b56:	0e 94 ee 54 	call	0xa9dc	; 0xa9dc <__fixsfsi>
    4b5a:	9b 01       	movw	r18, r22
    4b5c:	ab c1       	rjmp	.+854    	; 0x4eb4 <readSysReg+0x434>
		case 111:case 112: temp =   (int)  (compPtr->error);break;
    4b5e:	a0 59       	subi	r26, 0x90	; 144
    4b60:	bf 4f       	sbci	r27, 0xFF	; 255
    4b62:	2d 91       	ld	r18, X+
    4b64:	3c 91       	ld	r19, X
    4b66:	a6 c1       	rjmp	.+844    	; 0x4eb4 <readSysReg+0x434>
		case 121: case 122: temp =   (int)   (compPtr->Cond_Temp*10);break;
    4b68:	ae 5b       	subi	r26, 0xBE	; 190
    4b6a:	bf 4f       	sbci	r27, 0xFF	; 255
    4b6c:	20 e0       	ldi	r18, 0x00	; 0
    4b6e:	30 e0       	ldi	r19, 0x00	; 0
    4b70:	40 e2       	ldi	r20, 0x20	; 32
    4b72:	51 e4       	ldi	r21, 0x41	; 65
    4b74:	6d 91       	ld	r22, X+
    4b76:	7d 91       	ld	r23, X+
    4b78:	8d 91       	ld	r24, X+
    4b7a:	9c 91       	ld	r25, X
    4b7c:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    4b80:	0e 94 ee 54 	call	0xa9dc	; 0xa9dc <__fixsfsi>
    4b84:	9b 01       	movw	r18, r22
    4b86:	96 c1       	rjmp	.+812    	; 0x4eb4 <readSysReg+0x434>
		case 131:case 132: temp =   (int)  (compPtr->Suc_Comp*10);break;
    4b88:	de 96       	adiw	r26, 0x3e	; 62
    4b8a:	20 e0       	ldi	r18, 0x00	; 0
    4b8c:	30 e0       	ldi	r19, 0x00	; 0
    4b8e:	40 e2       	ldi	r20, 0x20	; 32
    4b90:	51 e4       	ldi	r21, 0x41	; 65
    4b92:	6d 91       	ld	r22, X+
    4b94:	7d 91       	ld	r23, X+
    4b96:	8d 91       	ld	r24, X+
    4b98:	9c 91       	ld	r25, X
    4b9a:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    4b9e:	0e 94 ee 54 	call	0xa9dc	; 0xa9dc <__fixsfsi>
    4ba2:	9b 01       	movw	r18, r22
    4ba4:	87 c1       	rjmp	.+782    	; 0x4eb4 <readSysReg+0x434>
		case 141:case 142: temp =   (int)  (compPtr->SuperCool*10);break;
    4ba6:	a6 5b       	subi	r26, 0xB6	; 182
    4ba8:	bf 4f       	sbci	r27, 0xFF	; 255
    4baa:	20 e0       	ldi	r18, 0x00	; 0
    4bac:	30 e0       	ldi	r19, 0x00	; 0
    4bae:	40 e2       	ldi	r20, 0x20	; 32
    4bb0:	51 e4       	ldi	r21, 0x41	; 65
    4bb2:	6d 91       	ld	r22, X+
    4bb4:	7d 91       	ld	r23, X+
    4bb6:	8d 91       	ld	r24, X+
    4bb8:	9c 91       	ld	r25, X
    4bba:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    4bbe:	0e 94 ee 54 	call	0xa9dc	; 0xa9dc <__fixsfsi>
    4bc2:	9b 01       	movw	r18, r22
    4bc4:	77 c1       	rjmp	.+750    	; 0x4eb4 <readSysReg+0x434>
		case 151:case 152: temp =   (int)  (compPtr->SuperHeat*10);break;
    4bc6:	aa 5b       	subi	r26, 0xBA	; 186
    4bc8:	bf 4f       	sbci	r27, 0xFF	; 255
    4bca:	20 e0       	ldi	r18, 0x00	; 0
    4bcc:	30 e0       	ldi	r19, 0x00	; 0
    4bce:	40 e2       	ldi	r20, 0x20	; 32
    4bd0:	51 e4       	ldi	r21, 0x41	; 65
    4bd2:	6d 91       	ld	r22, X+
    4bd4:	7d 91       	ld	r23, X+
    4bd6:	8d 91       	ld	r24, X+
    4bd8:	9c 91       	ld	r25, X
    4bda:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    4bde:	0e 94 ee 54 	call	0xa9dc	; 0xa9dc <__fixsfsi>
    4be2:	9b 01       	movw	r18, r22
    4be4:	67 c1       	rjmp	.+718    	; 0x4eb4 <readSysReg+0x434>
		case 161:case 162:  temp =  (int)  (compPtr->Heat_In*10);break;
    4be6:	20 e0       	ldi	r18, 0x00	; 0
    4be8:	30 e0       	ldi	r19, 0x00	; 0
    4bea:	40 e2       	ldi	r20, 0x20	; 32
    4bec:	51 e4       	ldi	r21, 0x41	; 65
    4bee:	9e 96       	adiw	r26, 0x2e	; 46
    4bf0:	6d 91       	ld	r22, X+
    4bf2:	7d 91       	ld	r23, X+
    4bf4:	8d 91       	ld	r24, X+
    4bf6:	9c 91       	ld	r25, X
    4bf8:	d1 97       	sbiw	r26, 0x31	; 49
    4bfa:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    4bfe:	0e 94 ee 54 	call	0xa9dc	; 0xa9dc <__fixsfsi>
    4c02:	9b 01       	movw	r18, r22
    4c04:	57 c1       	rjmp	.+686    	; 0x4eb4 <readSysReg+0x434>
		case 171:case 172:  temp =  (int)  (compPtr->Heat_Out*10);break;		
    4c06:	20 e0       	ldi	r18, 0x00	; 0
    4c08:	30 e0       	ldi	r19, 0x00	; 0
    4c0a:	40 e2       	ldi	r20, 0x20	; 32
    4c0c:	51 e4       	ldi	r21, 0x41	; 65
    4c0e:	9a 96       	adiw	r26, 0x2a	; 42
    4c10:	6d 91       	ld	r22, X+
    4c12:	7d 91       	ld	r23, X+
    4c14:	8d 91       	ld	r24, X+
    4c16:	9c 91       	ld	r25, X
    4c18:	9d 97       	sbiw	r26, 0x2d	; 45
    4c1a:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    4c1e:	0e 94 ee 54 	call	0xa9dc	; 0xa9dc <__fixsfsi>
    4c22:	9b 01       	movw	r18, r22
    4c24:	47 c1       	rjmp	.+654    	; 0x4eb4 <readSysReg+0x434>
		case 181:case 182: temp =   (int)  (compPtr->High_Press*10);break;
    4c26:	20 e0       	ldi	r18, 0x00	; 0
    4c28:	30 e0       	ldi	r19, 0x00	; 0
    4c2a:	40 e2       	ldi	r20, 0x20	; 32
    4c2c:	51 e4       	ldi	r21, 0x41	; 65
    4c2e:	5a 96       	adiw	r26, 0x1a	; 26
    4c30:	6d 91       	ld	r22, X+
    4c32:	7d 91       	ld	r23, X+
    4c34:	8d 91       	ld	r24, X+
    4c36:	9c 91       	ld	r25, X
    4c38:	5d 97       	sbiw	r26, 0x1d	; 29
    4c3a:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    4c3e:	0e 94 ee 54 	call	0xa9dc	; 0xa9dc <__fixsfsi>
    4c42:	9b 01       	movw	r18, r22
    4c44:	37 c1       	rjmp	.+622    	; 0x4eb4 <readSysReg+0x434>
		case 191:case 192: temp =   (int)  (compPtr->Low_Press*10);break;
    4c46:	20 e0       	ldi	r18, 0x00	; 0
    4c48:	30 e0       	ldi	r19, 0x00	; 0
    4c4a:	40 e2       	ldi	r20, 0x20	; 32
    4c4c:	51 e4       	ldi	r21, 0x41	; 65
    4c4e:	5e 96       	adiw	r26, 0x1e	; 30
    4c50:	6d 91       	ld	r22, X+
    4c52:	7d 91       	ld	r23, X+
    4c54:	8d 91       	ld	r24, X+
    4c56:	9c 91       	ld	r25, X
    4c58:	91 97       	sbiw	r26, 0x21	; 33
    4c5a:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    4c5e:	0e 94 ee 54 	call	0xa9dc	; 0xa9dc <__fixsfsi>
    4c62:	9b 01       	movw	r18, r22
    4c64:	27 c1       	rjmp	.+590    	; 0x4eb4 <readSysReg+0x434>
		case 201:case 202: temp =   (int)  (compPtr->Ex_Comp);break;
    4c66:	da 96       	adiw	r26, 0x3a	; 58
    4c68:	6d 91       	ld	r22, X+
    4c6a:	7d 91       	ld	r23, X+
    4c6c:	8d 91       	ld	r24, X+
    4c6e:	9c 91       	ld	r25, X
    4c70:	dd 97       	sbiw	r26, 0x3d	; 61
    4c72:	0e 94 ee 54 	call	0xa9dc	; 0xa9dc <__fixsfsi>
    4c76:	9b 01       	movw	r18, r22
    4c78:	1d c1       	rjmp	.+570    	; 0x4eb4 <readSysReg+0x434>
		
	
		
		//-----------------------------------eeprom--------
		case 10:  temp =    eeprom->Compressor_delay;break;
    4c7a:	68 81       	ld	r22, Y
    4c7c:	26 2f       	mov	r18, r22
    4c7e:	30 e0       	ldi	r19, 0x00	; 0
    4c80:	19 c1       	rjmp	.+562    	; 0x4eb4 <readSysReg+0x434>
		case 20:  temp =    eeprom->HeatingPump_delay;break;
    4c82:	6b 81       	ldd	r22, Y+3	; 0x03
    4c84:	26 2f       	mov	r18, r22
    4c86:	30 e0       	ldi	r19, 0x00	; 0
    4c88:	15 c1       	rjmp	.+554    	; 0x4eb4 <readSysReg+0x434>
		case 30:  temp =    eeprom->Source_Pump_delay;break;
    4c8a:	69 81       	ldd	r22, Y+1	; 0x01
    4c8c:	26 2f       	mov	r18, r22
    4c8e:	30 e0       	ldi	r19, 0x00	; 0
    4c90:	11 c1       	rjmp	.+546    	; 0x4eb4 <readSysReg+0x434>
		case 40:  temp =    eeprom->Revers_Valve_delay;break;
    4c92:	6a 81       	ldd	r22, Y+2	; 0x02
    4c94:	26 2f       	mov	r18, r22
    4c96:	30 e0       	ldi	r19, 0x00	; 0
    4c98:	0d c1       	rjmp	.+538    	; 0x4eb4 <readSysReg+0x434>
		case 50:  temp =    eeprom->Three_Way_delay;break;
    4c9a:	6c 81       	ldd	r22, Y+4	; 0x04
    4c9c:	26 2f       	mov	r18, r22
    4c9e:	30 e0       	ldi	r19, 0x00	; 0
    4ca0:	09 c1       	rjmp	.+530    	; 0x4eb4 <readSysReg+0x434>
		case 60:  temp =    (int)  eeprom->Cool_Max;break;
    4ca2:	6c 85       	ldd	r22, Y+12	; 0x0c
    4ca4:	26 2f       	mov	r18, r22
    4ca6:	30 e0       	ldi	r19, 0x00	; 0
    4ca8:	05 c1       	rjmp	.+522    	; 0x4eb4 <readSysReg+0x434>
		case 70:  temp =    (int)  eeprom->Cool_Min;break;
    4caa:	6d 85       	ldd	r22, Y+13	; 0x0d
    4cac:	26 2f       	mov	r18, r22
    4cae:	30 e0       	ldi	r19, 0x00	; 0
    4cb0:	01 c1       	rjmp	.+514    	; 0x4eb4 <readSysReg+0x434>
		case 80:  temp =    (int)  eeprom->HEAT_Max;break;
    4cb2:	69 85       	ldd	r22, Y+9	; 0x09
    4cb4:	26 2f       	mov	r18, r22
    4cb6:	30 e0       	ldi	r19, 0x00	; 0
    4cb8:	fd c0       	rjmp	.+506    	; 0x4eb4 <readSysReg+0x434>
		case 90:  temp =    (int)  eeprom->HEAT_Min;break;
    4cba:	6a 85       	ldd	r22, Y+10	; 0x0a
    4cbc:	26 2f       	mov	r18, r22
    4cbe:	30 e0       	ldi	r19, 0x00	; 0
    4cc0:	f9 c0       	rjmp	.+498    	; 0x4eb4 <readSysReg+0x434>
		case 100: temp =    (int)  eeprom->Delta_heating_max;break;
    4cc2:	6c 89       	ldd	r22, Y+20	; 0x14
    4cc4:	26 2f       	mov	r18, r22
    4cc6:	30 e0       	ldi	r19, 0x00	; 0
    4cc8:	f5 c0       	rjmp	.+490    	; 0x4eb4 <readSysReg+0x434>
		case 110: temp =    (int)  eeprom->Delta_heating_min;break;
    4cca:	6b 89       	ldd	r22, Y+19	; 0x13
    4ccc:	26 2f       	mov	r18, r22
    4cce:	30 e0       	ldi	r19, 0x00	; 0
    4cd0:	f1 c0       	rjmp	.+482    	; 0x4eb4 <readSysReg+0x434>
		case 120: temp =    (int)  eeprom->Delta_source_max;break;
    4cd2:	6e 89       	ldd	r22, Y+22	; 0x16
    4cd4:	26 2f       	mov	r18, r22
    4cd6:	30 e0       	ldi	r19, 0x00	; 0
    4cd8:	ed c0       	rjmp	.+474    	; 0x4eb4 <readSysReg+0x434>
		case 130: temp =    (int)  eeprom->Delta_source_min;break;
    4cda:	6d 89       	ldd	r22, Y+21	; 0x15
    4cdc:	26 2f       	mov	r18, r22
    4cde:	30 e0       	ldi	r19, 0x00	; 0
    4ce0:	e9 c0       	rjmp	.+466    	; 0x4eb4 <readSysReg+0x434>
		case 140: temp =    (int)  eeprom->diffCOOL;break;
    4ce2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4ce4:	26 2f       	mov	r18, r22
    4ce6:	30 e0       	ldi	r19, 0x00	; 0
    4ce8:	e5 c0       	rjmp	.+458    	; 0x4eb4 <readSysReg+0x434>
		case 150: temp =    (int)  eeprom->diffDHW ;break;
    4cea:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4cec:	26 2f       	mov	r18, r22
    4cee:	30 e0       	ldi	r19, 0x00	; 0
    4cf0:	e1 c0       	rjmp	.+450    	; 0x4eb4 <readSysReg+0x434>
		case 160: temp =    (int)  eeprom->diffHEAT;break;
    4cf2:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4cf4:	26 2f       	mov	r18, r22
    4cf6:	30 e0       	ldi	r19, 0x00	; 0
    4cf8:	dd c0       	rjmp	.+442    	; 0x4eb4 <readSysReg+0x434>
		case 170: temp =    (int)  eeprom->AireToWater;break;
    4cfa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4cfc:	26 2f       	mov	r18, r22
    4cfe:	30 e0       	ldi	r19, 0x00	; 0
    4d00:	d9 c0       	rjmp	.+434    	; 0x4eb4 <readSysReg+0x434>
		case 180: temp =    (int)  eeprom->ExhaustMax;break;
    4d02:	6e 85       	ldd	r22, Y+14	; 0x0e
    4d04:	26 2f       	mov	r18, r22
    4d06:	30 e0       	ldi	r19, 0x00	; 0
    4d08:	d5 c0       	rjmp	.+426    	; 0x4eb4 <readSysReg+0x434>
		case 190: temp =    (int)  eeprom->cool;break;
    4d0a:	6f a1       	ldd	r22, Y+39	; 0x27
    4d0c:	26 2f       	mov	r18, r22
    4d0e:	30 e0       	ldi	r19, 0x00	; 0
    4d10:	d1 c0       	rjmp	.+418    	; 0x4eb4 <readSysReg+0x434>
		case 200: temp =    (int)  eeprom->heat;break;
    4d12:	6e a1       	ldd	r22, Y+38	; 0x26
    4d14:	26 2f       	mov	r18, r22
    4d16:	30 e0       	ldi	r19, 0x00	; 0
    4d18:	cd c0       	rjmp	.+410    	; 0x4eb4 <readSysReg+0x434>
		case 210: temp =    (int)  eeprom->heatWater;break;
    4d1a:	6d a1       	ldd	r22, Y+37	; 0x25
    4d1c:	26 2f       	mov	r18, r22
    4d1e:	30 e0       	ldi	r19, 0x00	; 0
    4d20:	c9 c0       	rjmp	.+402    	; 0x4eb4 <readSysReg+0x434>
		case 220: temp =    (int)  eeprom->HP_Max;break;
    4d22:	6e 81       	ldd	r22, Y+6	; 0x06
    4d24:	26 2f       	mov	r18, r22
    4d26:	30 e0       	ldi	r19, 0x00	; 0
    4d28:	c5 c0       	rjmp	.+394    	; 0x4eb4 <readSysReg+0x434>
		case 230: temp =    (int)  eeprom->LP_Max;break;
    4d2a:	68 85       	ldd	r22, Y+8	; 0x08
    4d2c:	26 2f       	mov	r18, r22
    4d2e:	30 e0       	ldi	r19, 0x00	; 0
    4d30:	c1 c0       	rjmp	.+386    	; 0x4eb4 <readSysReg+0x434>
		case 240: temp =    (int)  eeprom->HP_Min;break;
    4d32:	6f 81       	ldd	r22, Y+7	; 0x07
    4d34:	26 2f       	mov	r18, r22
    4d36:	30 e0       	ldi	r19, 0x00	; 0
    4d38:	bd c0       	rjmp	.+378    	; 0x4eb4 <readSysReg+0x434>
		case 250: temp =    (int)  eeprom->LP_Min;break;
    4d3a:	fb 01       	movw	r30, r22
    4d3c:	e4 5a       	subi	r30, 0xA4	; 164
    4d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d40:	60 81       	ld	r22, Z
    4d42:	71 81       	ldd	r23, Z+1	; 0x01
    4d44:	82 81       	ldd	r24, Z+2	; 0x02
    4d46:	93 81       	ldd	r25, Z+3	; 0x03
    4d48:	0e 94 ee 54 	call	0xa9dc	; 0xa9dc <__fixsfsi>
    4d4c:	9b 01       	movw	r18, r22
    4d4e:	b2 c0       	rjmp	.+356    	; 0x4eb4 <readSysReg+0x434>
		case 260: temp =    (int)  eeprom->MaxSupercool;break;
    4d50:	6a 89       	ldd	r22, Y+18	; 0x12
    4d52:	26 2f       	mov	r18, r22
    4d54:	30 e0       	ldi	r19, 0x00	; 0
    4d56:	ae c0       	rjmp	.+348    	; 0x4eb4 <readSysReg+0x434>
		case 270: temp =    (int)  eeprom->MinSupercool;break;
    4d58:	69 89       	ldd	r22, Y+17	; 0x11
    4d5a:	26 2f       	mov	r18, r22
    4d5c:	30 e0       	ldi	r19, 0x00	; 0
    4d5e:	aa c0       	rjmp	.+340    	; 0x4eb4 <readSysReg+0x434>
		case 280: temp =    (int)  eeprom->MaxSuperheat;break;
    4d60:	68 89       	ldd	r22, Y+16	; 0x10
    4d62:	26 2f       	mov	r18, r22
    4d64:	30 e0       	ldi	r19, 0x00	; 0
    4d66:	a6 c0       	rjmp	.+332    	; 0x4eb4 <readSysReg+0x434>
		case 290: temp =    (int)  eeprom->MinSuperheat;break;
    4d68:	6f 85       	ldd	r22, Y+15	; 0x0f
    4d6a:	26 2f       	mov	r18, r22
    4d6c:	30 e0       	ldi	r19, 0x00	; 0
    4d6e:	a2 c0       	rjmp	.+324    	; 0x4eb4 <readSysReg+0x434>
		case 300: temp =    (int)  eeprom->number_turnon_threeway;break;
    4d70:	fb 01       	movw	r30, r22
    4d72:	ea 5b       	subi	r30, 0xBA	; 186
    4d74:	ff 4f       	sbci	r31, 0xFF	; 255
    4d76:	20 81       	ld	r18, Z
    4d78:	31 81       	ldd	r19, Z+1	; 0x01
    4d7a:	9c c0       	rjmp	.+312    	; 0x4eb4 <readSysReg+0x434>
		case 310: temp =    (int)  eeprom->power;break;
    4d7c:	6c a1       	ldd	r22, Y+36	; 0x24
    4d7e:	26 2f       	mov	r18, r22
    4d80:	30 e0       	ldi	r19, 0x00	; 0
    4d82:	98 c0       	rjmp	.+304    	; 0x4eb4 <readSysReg+0x434>
		case 320: temp =    (int)  eeprom->Set_Cooling;break;
    4d84:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4d86:	26 2f       	mov	r18, r22
    4d88:	30 e0       	ldi	r19, 0x00	; 0
    4d8a:	94 c0       	rjmp	.+296    	; 0x4eb4 <readSysReg+0x434>
		case 330: temp =    (int)  eeprom->Set_DHW;break;
    4d8c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    4d8e:	26 2f       	mov	r18, r22
    4d90:	30 e0       	ldi	r19, 0x00	; 0
    4d92:	90 c0       	rjmp	.+288    	; 0x4eb4 <readSysReg+0x434>
		case 340: temp =    (int)  eeprom->Set_Heating;break;
    4d94:	69 8d       	ldd	r22, Y+25	; 0x19
    4d96:	26 2f       	mov	r18, r22
    4d98:	30 e0       	ldi	r19, 0x00	; 0
    4d9a:	8c c0       	rjmp	.+280    	; 0x4eb4 <readSysReg+0x434>
		case 350: temp =    (int)  eeprom->TempDef;break;
    4d9c:	2a a5       	ldd	r18, Y+42	; 0x2a
    4d9e:	3b a5       	ldd	r19, Y+43	; 0x2b
    4da0:	89 c0       	rjmp	.+274    	; 0x4eb4 <readSysReg+0x434>
		case 360: temp =    (int)  eeprom->TimeDef;break;
    4da2:	69 a1       	ldd	r22, Y+33	; 0x21
    4da4:	26 2f       	mov	r18, r22
    4da6:	30 e0       	ldi	r19, 0x00	; 0
    4da8:	85 c0       	rjmp	.+266    	; 0x4eb4 <readSysReg+0x434>
		
		
		case 370: temp =    (int)  eeprom->TempOut;break;
    4daa:	2e a5       	ldd	r18, Y+46	; 0x2e
    4dac:	3f a5       	ldd	r19, Y+47	; 0x2f
    4dae:	82 c0       	rjmp	.+260    	; 0x4eb4 <readSysReg+0x434>
		case 380: temp =    (int)  eeprom->TempStopDef;break;
    4db0:	2c a5       	ldd	r18, Y+44	; 0x2c
    4db2:	3d a5       	ldd	r19, Y+45	; 0x2d
    4db4:	7f c0       	rjmp	.+254    	; 0x4eb4 <readSysReg+0x434>
		case 390: temp =    (int)  eeprom->time_threeway;break;
    4db6:	2c ad       	ldd	r18, Y+60	; 0x3c
    4db8:	3d ad       	ldd	r19, Y+61	; 0x3d
    4dba:	7c c0       	rjmp	.+248    	; 0x4eb4 <readSysReg+0x434>
		case 400: temp =    (int)  eeprom->NombComp;break;
    4dbc:	68 a1       	ldd	r22, Y+32	; 0x20
    4dbe:	26 2f       	mov	r18, r22
    4dc0:	30 e0       	ldi	r19, 0x00	; 0
    4dc2:	78 c0       	rjmp	.+240    	; 0x4eb4 <readSysReg+0x434>
		case 410: temp =    (int)  eeprom->reversMod;break;
    4dc4:	68 a5       	ldd	r22, Y+40	; 0x28
    4dc6:	26 2f       	mov	r18, r22
    4dc8:	30 e0       	ldi	r19, 0x00	; 0
    4dca:	74 c0       	rjmp	.+232    	; 0x4eb4 <readSysReg+0x434>
		case 420: temp =    (int)  eeprom->TRV_Delay;break;
    4dcc:	6d 81       	ldd	r22, Y+5	; 0x05
    4dce:	26 2f       	mov	r18, r22
    4dd0:	30 e0       	ldi	r19, 0x00	; 0
    4dd2:	70 c0       	rjmp	.+224    	; 0x4eb4 <readSysReg+0x434>
		case 430: temp =    (int)  eeprom->Source_Max;break;
    4dd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dd6:	26 2f       	mov	r18, r22
    4dd8:	30 e0       	ldi	r19, 0x00	; 0
    4dda:	6c c0       	rjmp	.+216    	; 0x4eb4 <readSysReg+0x434>
		case 440: temp =    (int)  eeprom->Source_Min;break;
    4ddc:	28 a9       	ldd	r18, Y+48	; 0x30
    4dde:	39 a9       	ldd	r19, Y+49	; 0x31
    4de0:	69 c0       	rjmp	.+210    	; 0x4eb4 <readSysReg+0x434>
		case 450: temp =    (int)  eeprom->Delta_dhw_max;break;
    4de2:	68 8d       	ldd	r22, Y+24	; 0x18
    4de4:	26 2f       	mov	r18, r22
    4de6:	30 e0       	ldi	r19, 0x00	; 0
    4de8:	65 c0       	rjmp	.+202    	; 0x4eb4 <readSysReg+0x434>
		case 460: temp =    (int)  eeprom->Delta_dhw_min;break;
    4dea:	6f 89       	ldd	r22, Y+23	; 0x17
    4dec:	26 2f       	mov	r18, r22
    4dee:	30 e0       	ldi	r19, 0x00	; 0
    4df0:	61 c0       	rjmp	.+194    	; 0x4eb4 <readSysReg+0x434>
		case 470: temp =    (int)  eeprom->Power_380;break;
    4df2:	69 a5       	ldd	r22, Y+41	; 0x29
    4df4:	26 2f       	mov	r18, r22
    4df6:	30 e0       	ldi	r19, 0x00	; 0
    4df8:	5d c0       	rjmp	.+186    	; 0x4eb4 <readSysReg+0x434>
		case 480: temp =    (int)  eeprom->TimeBetweenDef;break;
    4dfa:	6a a1       	ldd	r22, Y+34	; 0x22
    4dfc:	26 2f       	mov	r18, r22
    4dfe:	30 e0       	ldi	r19, 0x00	; 0
    4e00:	59 c0       	rjmp	.+178    	; 0x4eb4 <readSysReg+0x434>
		//case 500: temp =    (int)  compPtr-> Curr_A;break;
		//case 510: temp =    (int)  compPtr-> Curr_B;break;
		//case 520: temp =    (int)  compPtr-> Curr_C;break;
		
		//--------------------------------------
		case 301: temp =    (int)  eeprom->number_turnon_compressor_1;break;
    4e02:	2e ad       	ldd	r18, Y+62	; 0x3e
    4e04:	3f ad       	ldd	r19, Y+63	; 0x3f
    4e06:	56 c0       	rjmp	.+172    	; 0x4eb4 <readSysReg+0x434>
		case 311: temp =    (int)  eeprom->number_turnon_hiter_1;break;
    4e08:	fb 01       	movw	r30, r22
    4e0a:	ee 5b       	subi	r30, 0xBE	; 190
    4e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e0e:	20 81       	ld	r18, Z
    4e10:	31 81       	ldd	r19, Z+1	; 0x01
    4e12:	50 c0       	rjmp	.+160    	; 0x4eb4 <readSysReg+0x434>
		case 321: temp =    (int)  eeprom->number_turnon_revers_1;break;
    4e14:	fb 01       	movw	r30, r22
    4e16:	ec 5b       	subi	r30, 0xBC	; 188
    4e18:	ff 4f       	sbci	r31, 0xFF	; 255
    4e1a:	20 81       	ld	r18, Z
    4e1c:	31 81       	ldd	r19, Z+1	; 0x01
    4e1e:	4a c0       	rjmp	.+148    	; 0x4eb4 <readSysReg+0x434>
		case 331: temp =    (int)  eeprom->number_turnon_source_1;break;
    4e20:	fb 01       	movw	r30, r22
    4e22:	e0 5c       	subi	r30, 0xC0	; 192
    4e24:	ff 4f       	sbci	r31, 0xFF	; 255
    4e26:	20 81       	ld	r18, Z
    4e28:	31 81       	ldd	r19, Z+1	; 0x01
    4e2a:	44 c0       	rjmp	.+136    	; 0x4eb4 <readSysReg+0x434>
		case 341: temp =    (int)  eeprom->time_compressor_1;break;
    4e2c:	2a ad       	ldd	r18, Y+58	; 0x3a
    4e2e:	3b ad       	ldd	r19, Y+59	; 0x3b
    4e30:	41 c0       	rjmp	.+130    	; 0x4eb4 <readSysReg+0x434>
		case 351: temp =    (int)  eeprom->time_pump_hiter_1;break;
    4e32:	2c a9       	ldd	r18, Y+52	; 0x34
    4e34:	3d a9       	ldd	r19, Y+53	; 0x35
    4e36:	3e c0       	rjmp	.+124    	; 0x4eb4 <readSysReg+0x434>
		case 371: temp =    (int)  eeprom->time_pump_source_1;break;
    4e38:	2e a9       	ldd	r18, Y+54	; 0x36
    4e3a:	3f a9       	ldd	r19, Y+55	; 0x37
    4e3c:	3b c0       	rjmp	.+118    	; 0x4eb4 <readSysReg+0x434>
		case 381: temp =    (int)  eeprom->time_revers_1;break;
    4e3e:	28 ad       	ldd	r18, Y+56	; 0x38
    4e40:	39 ad       	ldd	r19, Y+57	; 0x39
    4e42:	38 c0       	rjmp	.+112    	; 0x4eb4 <readSysReg+0x434>
		case 391: temp =    (int)  eeprom->trv_corection_1;break;
    4e44:	2a a9       	ldd	r18, Y+50	; 0x32
    4e46:	3b a9       	ldd	r19, Y+51	; 0x33
    4e48:	35 c0       	rjmp	.+106    	; 0x4eb4 <readSysReg+0x434>
		//------------------------------------
		case 302: temp =    (int)  eeprom->number_turnon_compressor_2;break;
    4e4a:	fb 01       	movw	r30, r22
    4e4c:	ee 5a       	subi	r30, 0xAE	; 174
    4e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e50:	20 81       	ld	r18, Z
    4e52:	31 81       	ldd	r19, Z+1	; 0x01
    4e54:	2f c0       	rjmp	.+94     	; 0x4eb4 <readSysReg+0x434>
		case 312: temp =    (int)  eeprom->number_turnon_hiter_2;break;
    4e56:	fb 01       	movw	r30, r22
    4e58:	ea 5a       	subi	r30, 0xAA	; 170
    4e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e5c:	20 81       	ld	r18, Z
    4e5e:	31 81       	ldd	r19, Z+1	; 0x01
    4e60:	29 c0       	rjmp	.+82     	; 0x4eb4 <readSysReg+0x434>
		case 322: temp =    (int)  eeprom->number_turnon_revers_2;break;
    4e62:	fb 01       	movw	r30, r22
    4e64:	e8 5a       	subi	r30, 0xA8	; 168
    4e66:	ff 4f       	sbci	r31, 0xFF	; 255
    4e68:	20 81       	ld	r18, Z
    4e6a:	31 81       	ldd	r19, Z+1	; 0x01
    4e6c:	23 c0       	rjmp	.+70     	; 0x4eb4 <readSysReg+0x434>
		case 332: temp =    (int)  eeprom->number_turnon_source_2;break;
    4e6e:	fb 01       	movw	r30, r22
    4e70:	ec 5a       	subi	r30, 0xAC	; 172
    4e72:	ff 4f       	sbci	r31, 0xFF	; 255
    4e74:	20 81       	ld	r18, Z
    4e76:	31 81       	ldd	r19, Z+1	; 0x01
    4e78:	1d c0       	rjmp	.+58     	; 0x4eb4 <readSysReg+0x434>
		case 342: temp =    (int)  eeprom->time_compressor_2;break;
    4e7a:	fb 01       	movw	r30, r22
    4e7c:	e0 5b       	subi	r30, 0xB0	; 176
    4e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e80:	20 81       	ld	r18, Z
    4e82:	31 81       	ldd	r19, Z+1	; 0x01
    4e84:	17 c0       	rjmp	.+46     	; 0x4eb4 <readSysReg+0x434>
		case 352: temp =    (int)  eeprom->time_pump_hiter_2;break;
    4e86:	fb 01       	movw	r30, r22
    4e88:	e6 5b       	subi	r30, 0xB6	; 182
    4e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8c:	20 81       	ld	r18, Z
    4e8e:	31 81       	ldd	r19, Z+1	; 0x01
    4e90:	11 c0       	rjmp	.+34     	; 0x4eb4 <readSysReg+0x434>
		case 372: temp =    (int)  eeprom->time_pump_source_2;break;
    4e92:	fb 01       	movw	r30, r22
    4e94:	e4 5b       	subi	r30, 0xB4	; 180
    4e96:	ff 4f       	sbci	r31, 0xFF	; 255
    4e98:	20 81       	ld	r18, Z
    4e9a:	31 81       	ldd	r19, Z+1	; 0x01
    4e9c:	0b c0       	rjmp	.+22     	; 0x4eb4 <readSysReg+0x434>
		case 382: temp =    (int)  eeprom->time_revers_2;break;
    4e9e:	fb 01       	movw	r30, r22
    4ea0:	e2 5b       	subi	r30, 0xB2	; 178
    4ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea4:	20 81       	ld	r18, Z
    4ea6:	31 81       	ldd	r19, Z+1	; 0x01
    4ea8:	05 c0       	rjmp	.+10     	; 0x4eb4 <readSysReg+0x434>
		case 392: temp =    (int)  eeprom->trv_corection_2;break;
    4eaa:	fb 01       	movw	r30, r22
    4eac:	e8 5b       	subi	r30, 0xB8	; 184
    4eae:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb0:	20 81       	ld	r18, Z
    4eb2:	31 81       	ldd	r19, Z+1	; 0x01
		
	}
	return temp;
}
    4eb4:	c9 01       	movw	r24, r18
    4eb6:	df 91       	pop	r29
    4eb8:	cf 91       	pop	r28
    4eba:	08 95       	ret

00004ebc <writeSysReg>:
void writeSysReg(xEEdata*comp,uint16_t adress,uint16_t value)
{
    4ebc:	cf 93       	push	r28
    4ebe:	df 93       	push	r29
    4ec0:	dc 01       	movw	r26, r24
	
	switch(adress)
    4ec2:	fb 01       	movw	r30, r22
    4ec4:	3a 97       	sbiw	r30, 0x0a	; 10
    4ec6:	e7 3d       	cpi	r30, 0xD7	; 215
    4ec8:	81 e0       	ldi	r24, 0x01	; 1
    4eca:	f8 07       	cpc	r31, r24
    4ecc:	08 f0       	brcs	.+2      	; 0x4ed0 <writeSysReg+0x14>
    4ece:	bb c0       	rjmp	.+374    	; 0x5046 <writeSysReg+0x18a>
    4ed0:	88 27       	eor	r24, r24
    4ed2:	ed 58       	subi	r30, 0x8D	; 141
    4ed4:	fd 4f       	sbci	r31, 0xFD	; 253
    4ed6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ed8:	0c 94 5b 5a 	jmp	0xb4b6	; 0xb4b6 <__tablejump2__>
	{
		case 10:  comp->Compressor_delay  = value;break;
    4edc:	4c 93       	st	X, r20
    4ede:	b3 c0       	rjmp	.+358    	; 0x5046 <writeSysReg+0x18a>
		case 20:  comp->HeatingPump_delay = value;break;
    4ee0:	13 96       	adiw	r26, 0x03	; 3
    4ee2:	4c 93       	st	X, r20
    4ee4:	b0 c0       	rjmp	.+352    	; 0x5046 <writeSysReg+0x18a>
		case 30:  comp->Source_Pump_delay = value;break;
    4ee6:	11 96       	adiw	r26, 0x01	; 1
    4ee8:	4c 93       	st	X, r20
    4eea:	ad c0       	rjmp	.+346    	; 0x5046 <writeSysReg+0x18a>
		case 40:  comp->Revers_Valve_delay = value;break;
    4eec:	12 96       	adiw	r26, 0x02	; 2
    4eee:	4c 93       	st	X, r20
    4ef0:	aa c0       	rjmp	.+340    	; 0x5046 <writeSysReg+0x18a>
		case 50:  comp->Three_Way_delay  = value;break;
    4ef2:	14 96       	adiw	r26, 0x04	; 4
    4ef4:	4c 93       	st	X, r20
    4ef6:	a7 c0       	rjmp	.+334    	; 0x5046 <writeSysReg+0x18a>
		case 60:  comp->Cool_Max = value;break;
    4ef8:	1c 96       	adiw	r26, 0x0c	; 12
    4efa:	4c 93       	st	X, r20
    4efc:	a4 c0       	rjmp	.+328    	; 0x5046 <writeSysReg+0x18a>
		case 70:  comp->Cool_Min = value;break;
    4efe:	1d 96       	adiw	r26, 0x0d	; 13
    4f00:	4c 93       	st	X, r20
    4f02:	a1 c0       	rjmp	.+322    	; 0x5046 <writeSysReg+0x18a>
		case 80:  comp->HEAT_Max  = value;break;
    4f04:	19 96       	adiw	r26, 0x09	; 9
    4f06:	4c 93       	st	X, r20
    4f08:	9e c0       	rjmp	.+316    	; 0x5046 <writeSysReg+0x18a>
		case 90:  comp->HEAT_Min = value;break;
    4f0a:	1a 96       	adiw	r26, 0x0a	; 10
    4f0c:	4c 93       	st	X, r20
    4f0e:	9b c0       	rjmp	.+310    	; 0x5046 <writeSysReg+0x18a>
		case 100: comp->Delta_heating_max  = value;break;
    4f10:	54 96       	adiw	r26, 0x14	; 20
    4f12:	4c 93       	st	X, r20
    4f14:	98 c0       	rjmp	.+304    	; 0x5046 <writeSysReg+0x18a>
		case 110: comp->Delta_heating_min  = value;break;
    4f16:	53 96       	adiw	r26, 0x13	; 19
    4f18:	4c 93       	st	X, r20
    4f1a:	95 c0       	rjmp	.+298    	; 0x5046 <writeSysReg+0x18a>
		case 120: comp->Delta_source_max  = value;break;
    4f1c:	56 96       	adiw	r26, 0x16	; 22
    4f1e:	4c 93       	st	X, r20
    4f20:	92 c0       	rjmp	.+292    	; 0x5046 <writeSysReg+0x18a>
		case 130: comp->Delta_source_min  = value;break;
    4f22:	55 96       	adiw	r26, 0x15	; 21
    4f24:	4c 93       	st	X, r20
    4f26:	8f c0       	rjmp	.+286    	; 0x5046 <writeSysReg+0x18a>
		case 140: comp->diffCOOL  = value;break;
    4f28:	5d 96       	adiw	r26, 0x1d	; 29
    4f2a:	4c 93       	st	X, r20
    4f2c:	8c c0       	rjmp	.+280    	; 0x5046 <writeSysReg+0x18a>
		case 150: comp->diffDHW  = value;break;
    4f2e:	5e 96       	adiw	r26, 0x1e	; 30
    4f30:	4c 93       	st	X, r20
    4f32:	89 c0       	rjmp	.+274    	; 0x5046 <writeSysReg+0x18a>
		case 160: comp->diffHEAT  = value;break;
    4f34:	5c 96       	adiw	r26, 0x1c	; 28
    4f36:	4c 93       	st	X, r20
    4f38:	86 c0       	rjmp	.+268    	; 0x5046 <writeSysReg+0x18a>
		case 170: comp->AireToWater  = value;break;
    4f3a:	5f 96       	adiw	r26, 0x1f	; 31
    4f3c:	4c 93       	st	X, r20
    4f3e:	83 c0       	rjmp	.+262    	; 0x5046 <writeSysReg+0x18a>
		case 180: comp->ExhaustMax  = value;break;
    4f40:	1e 96       	adiw	r26, 0x0e	; 14
    4f42:	4c 93       	st	X, r20
    4f44:	80 c0       	rjmp	.+256    	; 0x5046 <writeSysReg+0x18a>
		case 190: comp->cool  = value;break;
    4f46:	97 96       	adiw	r26, 0x27	; 39
    4f48:	4c 93       	st	X, r20
    4f4a:	7d c0       	rjmp	.+250    	; 0x5046 <writeSysReg+0x18a>
		case 200: comp->heat  = value;break;
    4f4c:	96 96       	adiw	r26, 0x26	; 38
    4f4e:	4c 93       	st	X, r20
    4f50:	7a c0       	rjmp	.+244    	; 0x5046 <writeSysReg+0x18a>
		case 210: comp->heatWater  = value;break;
    4f52:	95 96       	adiw	r26, 0x25	; 37
    4f54:	4c 93       	st	X, r20
    4f56:	77 c0       	rjmp	.+238    	; 0x5046 <writeSysReg+0x18a>
		case 220: comp->HP_Max  = value;break;
    4f58:	16 96       	adiw	r26, 0x06	; 6
    4f5a:	4c 93       	st	X, r20
    4f5c:	74 c0       	rjmp	.+232    	; 0x5046 <writeSysReg+0x18a>
		case 230: comp->LP_Max  = value;break;
    4f5e:	18 96       	adiw	r26, 0x08	; 8
    4f60:	4c 93       	st	X, r20
    4f62:	71 c0       	rjmp	.+226    	; 0x5046 <writeSysReg+0x18a>
		case 240: comp->HP_Min  = value;break;
    4f64:	17 96       	adiw	r26, 0x07	; 7
    4f66:	4c 93       	st	X, r20
    4f68:	6e c0       	rjmp	.+220    	; 0x5046 <writeSysReg+0x18a>
		case 250: comp->LP_Min  = value;break;
    4f6a:	ed 01       	movw	r28, r26
    4f6c:	c4 5a       	subi	r28, 0xA4	; 164
    4f6e:	df 4f       	sbci	r29, 0xFF	; 255
    4f70:	ba 01       	movw	r22, r20
    4f72:	80 e0       	ldi	r24, 0x00	; 0
    4f74:	90 e0       	ldi	r25, 0x00	; 0
    4f76:	0e 94 1f 55 	call	0xaa3e	; 0xaa3e <__floatunsisf>
    4f7a:	68 83       	st	Y, r22
    4f7c:	79 83       	std	Y+1, r23	; 0x01
    4f7e:	8a 83       	std	Y+2, r24	; 0x02
    4f80:	9b 83       	std	Y+3, r25	; 0x03
    4f82:	61 c0       	rjmp	.+194    	; 0x5046 <writeSysReg+0x18a>
		case 260: comp->MaxSupercool  = value;break;
    4f84:	52 96       	adiw	r26, 0x12	; 18
    4f86:	4c 93       	st	X, r20
    4f88:	5e c0       	rjmp	.+188    	; 0x5046 <writeSysReg+0x18a>
		case 270: comp->MinSupercool  = value;break;
    4f8a:	51 96       	adiw	r26, 0x11	; 17
    4f8c:	4c 93       	st	X, r20
    4f8e:	5b c0       	rjmp	.+182    	; 0x5046 <writeSysReg+0x18a>
		case 280: comp->MaxSuperheat  = value;break;
    4f90:	50 96       	adiw	r26, 0x10	; 16
    4f92:	4c 93       	st	X, r20
    4f94:	58 c0       	rjmp	.+176    	; 0x5046 <writeSysReg+0x18a>
		case 290: comp->MinSuperheat  = value;break;
    4f96:	1f 96       	adiw	r26, 0x0f	; 15
    4f98:	4c 93       	st	X, r20
    4f9a:	55 c0       	rjmp	.+170    	; 0x5046 <writeSysReg+0x18a>
		case 300: comp->number_turnon_threeway  = value;break;
    4f9c:	aa 5b       	subi	r26, 0xBA	; 186
    4f9e:	bf 4f       	sbci	r27, 0xFF	; 255
    4fa0:	4d 93       	st	X+, r20
    4fa2:	5c 93       	st	X, r21
    4fa4:	50 c0       	rjmp	.+160    	; 0x5046 <writeSysReg+0x18a>
		case 310: comp->power  = value;break;
    4fa6:	94 96       	adiw	r26, 0x24	; 36
    4fa8:	4c 93       	st	X, r20
    4faa:	4d c0       	rjmp	.+154    	; 0x5046 <writeSysReg+0x18a>
		case 320: comp->Set_Cooling  = value;break;
    4fac:	5a 96       	adiw	r26, 0x1a	; 26
    4fae:	4c 93       	st	X, r20
    4fb0:	4a c0       	rjmp	.+148    	; 0x5046 <writeSysReg+0x18a>
		case 330: comp->Set_DHW  = value;break;
    4fb2:	5b 96       	adiw	r26, 0x1b	; 27
    4fb4:	4c 93       	st	X, r20
    4fb6:	47 c0       	rjmp	.+142    	; 0x5046 <writeSysReg+0x18a>
		case 340: comp->Set_Heating  = value;break;
    4fb8:	59 96       	adiw	r26, 0x19	; 25
    4fba:	4c 93       	st	X, r20
    4fbc:	44 c0       	rjmp	.+136    	; 0x5046 <writeSysReg+0x18a>
		case 350: comp->TempDef  = value;break;//
    4fbe:	9b 96       	adiw	r26, 0x2b	; 43
    4fc0:	5c 93       	st	X, r21
    4fc2:	4e 93       	st	-X, r20
    4fc4:	9a 97       	sbiw	r26, 0x2a	; 42
    4fc6:	3f c0       	rjmp	.+126    	; 0x5046 <writeSysReg+0x18a>
		case 360: comp->TimeDef  = value;break;//
    4fc8:	91 96       	adiw	r26, 0x21	; 33
    4fca:	4c 93       	st	X, r20
    4fcc:	3c c0       	rjmp	.+120    	; 0x5046 <writeSysReg+0x18a>
		case 370: comp->TempOut  = value;break;
    4fce:	9f 96       	adiw	r26, 0x2f	; 47
    4fd0:	5c 93       	st	X, r21
    4fd2:	4e 93       	st	-X, r20
    4fd4:	9e 97       	sbiw	r26, 0x2e	; 46
    4fd6:	37 c0       	rjmp	.+110    	; 0x5046 <writeSysReg+0x18a>
		case 380: comp->TempStopDef  = value;break;//
    4fd8:	9d 96       	adiw	r26, 0x2d	; 45
    4fda:	5c 93       	st	X, r21
    4fdc:	4e 93       	st	-X, r20
    4fde:	9c 97       	sbiw	r26, 0x2c	; 44
    4fe0:	32 c0       	rjmp	.+100    	; 0x5046 <writeSysReg+0x18a>
		case 390: comp->time_threeway  = value;break;
    4fe2:	dd 96       	adiw	r26, 0x3d	; 61
    4fe4:	5c 93       	st	X, r21
    4fe6:	4e 93       	st	-X, r20
    4fe8:	dc 97       	sbiw	r26, 0x3c	; 60
    4fea:	2d c0       	rjmp	.+90     	; 0x5046 <writeSysReg+0x18a>
		case 400: comp->NombComp  = value;break;
    4fec:	90 96       	adiw	r26, 0x20	; 32
    4fee:	4c 93       	st	X, r20
    4ff0:	2a c0       	rjmp	.+84     	; 0x5046 <writeSysReg+0x18a>
		case 410: comp->reversMod =value;break;
    4ff2:	98 96       	adiw	r26, 0x28	; 40
    4ff4:	4c 93       	st	X, r20
    4ff6:	27 c0       	rjmp	.+78     	; 0x5046 <writeSysReg+0x18a>
		case 420: comp->TRV_Delay=value;break;
    4ff8:	15 96       	adiw	r26, 0x05	; 5
    4ffa:	4c 93       	st	X, r20
    4ffc:	24 c0       	rjmp	.+72     	; 0x5046 <writeSysReg+0x18a>
		case 430: comp->Source_Max=value;break;
    4ffe:	1b 96       	adiw	r26, 0x0b	; 11
    5000:	4c 93       	st	X, r20
    5002:	21 c0       	rjmp	.+66     	; 0x5046 <writeSysReg+0x18a>
		case 440: comp->Source_Min=value;break;
    5004:	d1 96       	adiw	r26, 0x31	; 49
    5006:	5c 93       	st	X, r21
    5008:	4e 93       	st	-X, r20
    500a:	d0 97       	sbiw	r26, 0x30	; 48
    500c:	1c c0       	rjmp	.+56     	; 0x5046 <writeSysReg+0x18a>
		case 450: comp->Delta_dhw_max  = value;break;
    500e:	58 96       	adiw	r26, 0x18	; 24
    5010:	4c 93       	st	X, r20
    5012:	19 c0       	rjmp	.+50     	; 0x5046 <writeSysReg+0x18a>
		case 460: comp->Delta_dhw_min  = value;break;
    5014:	57 96       	adiw	r26, 0x17	; 23
    5016:	4c 93       	st	X, r20
    5018:	16 c0       	rjmp	.+44     	; 0x5046 <writeSysReg+0x18a>
		case 470: comp->Power_380 = value;break;
    501a:	99 96       	adiw	r26, 0x29	; 41
    501c:	4c 93       	st	X, r20
    501e:	13 c0       	rjmp	.+38     	; 0x5046 <writeSysReg+0x18a>
		case 480: comp->TimeBetweenDef = value;break;//
    5020:	92 96       	adiw	r26, 0x22	; 34
    5022:	4c 93       	st	X, r20
    5024:	10 c0       	rjmp	.+32     	; 0x5046 <writeSysReg+0x18a>
		case 391: comp->trv_corection_1 = value;break;
    5026:	d3 96       	adiw	r26, 0x33	; 51
    5028:	5c 93       	st	X, r21
    502a:	4e 93       	st	-X, r20
    502c:	d2 97       	sbiw	r26, 0x32	; 50
    502e:	0b c0       	rjmp	.+22     	; 0x5046 <writeSysReg+0x18a>
		case 392: comp->trv_corection_2 = value;break;
    5030:	a8 5b       	subi	r26, 0xB8	; 184
    5032:	bf 4f       	sbci	r27, 0xFF	; 255
    5034:	4d 93       	st	X+, r20
    5036:	5c 93       	st	X, r21
    5038:	06 c0       	rjmp	.+12     	; 0x5046 <writeSysReg+0x18a>
		case 393:if(comp->AireToWater==1) forsDefrost = value;break;
    503a:	5f 96       	adiw	r26, 0x1f	; 31
    503c:	8c 91       	ld	r24, X
    503e:	81 30       	cpi	r24, 0x01	; 1
    5040:	11 f4       	brne	.+4      	; 0x5046 <writeSysReg+0x18a>
    5042:	40 93 21 07 	sts	0x0721, r20	; 0x800721 <forsDefrost>
	}
}
    5046:	df 91       	pop	r29
    5048:	cf 91       	pop	r28
    504a:	08 95       	ret

0000504c <calculateCRC>:
}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
    504c:	88 23       	and	r24, r24
    504e:	09 f1       	breq	.+66     	; 0x5092 <calculateCRC+0x46>
    5050:	af ef       	ldi	r26, 0xFF	; 255
    5052:	a8 0f       	add	r26, r24
    5054:	b0 e0       	ldi	r27, 0x00	; 0
    5056:	11 96       	adiw	r26, 0x01	; 1
    5058:	60 e0       	ldi	r22, 0x00	; 0
    505a:	70 e0       	ldi	r23, 0x00	; 0
    505c:	8f ef       	ldi	r24, 0xFF	; 255
    505e:	9f ef       	ldi	r25, 0xFF	; 255
	{
		temp = temp ^ frame[i];
    5060:	fb 01       	movw	r30, r22
    5062:	e8 52       	subi	r30, 0x28	; 40
    5064:	f8 4f       	sbci	r31, 0xF8	; 248
    5066:	20 81       	ld	r18, Z
    5068:	82 27       	eor	r24, r18
    506a:	28 e0       	ldi	r18, 0x08	; 8
		for (unsigned char j = 1; j <= 8; j++)
		{
			flag = temp & 0x0001;
    506c:	ac 01       	movw	r20, r24
    506e:	41 70       	andi	r20, 0x01	; 1
    5070:	55 27       	eor	r21, r21
			temp >>= 1;
    5072:	96 95       	lsr	r25
    5074:	87 95       	ror	r24
			if (flag)
    5076:	45 2b       	or	r20, r21
    5078:	21 f0       	breq	.+8      	; 0x5082 <calculateCRC+0x36>
			temp ^= 0xA001;
    507a:	31 e0       	ldi	r19, 0x01	; 1
    507c:	83 27       	eor	r24, r19
    507e:	30 ea       	ldi	r19, 0xA0	; 160
    5080:	93 27       	eor	r25, r19
    5082:	21 50       	subi	r18, 0x01	; 1
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
	{
		temp = temp ^ frame[i];
		for (unsigned char j = 1; j <= 8; j++)
    5084:	99 f7       	brne	.-26     	; 0x506c <calculateCRC+0x20>
    5086:	6f 5f       	subi	r22, 0xFF	; 255
    5088:	7f 4f       	sbci	r23, 0xFF	; 255
}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
    508a:	6a 17       	cp	r22, r26
    508c:	7b 07       	cpc	r23, r27
    508e:	41 f7       	brne	.-48     	; 0x5060 <calculateCRC+0x14>
    5090:	02 c0       	rjmp	.+4      	; 0x5096 <calculateCRC+0x4a>

}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
    5092:	8f ef       	ldi	r24, 0xFF	; 255
    5094:	9f ef       	ldi	r25, 0xFF	; 255
	// Reverse byte order.
	temp2 = temp >> 8;
	temp = (temp << 8) | temp2;
	temp &= 0xFFFF;
	return temp; // the returned value is already swopped - crcLo byte is first & crcHi byte is last
}
    5096:	98 27       	eor	r25, r24
    5098:	89 27       	eor	r24, r25
    509a:	98 27       	eor	r25, r24
    509c:	08 95       	ret

0000509e <sendPacket>:

void sendPacket(unsigned char bufferSize)
{
    509e:	ef 92       	push	r14
    50a0:	ff 92       	push	r15
    50a2:	0f 93       	push	r16
    50a4:	1f 93       	push	r17
    50a6:	cf 93       	push	r28
    50a8:	df 93       	push	r29
	
	for (unsigned char i = 0; i < bufferSize; i++) if(port_0)xSerialPutChar(&xSerialPort,frame[i]); else if(port_3){PORTJ|= (_BV(PIN_rs485));xSerialPutChar(&xSerial3Port,frame[i]);}
    50aa:	88 23       	and	r24, r24
    50ac:	71 f1       	breq	.+92     	; 0x510a <sendPacket+0x6c>
    50ae:	81 50       	subi	r24, 0x01	; 1
    50b0:	08 2f       	mov	r16, r24
    50b2:	10 e0       	ldi	r17, 0x00	; 0
    50b4:	0f 5f       	subi	r16, 0xFF	; 255
    50b6:	1f 4f       	sbci	r17, 0xFF	; 255
    50b8:	c0 e0       	ldi	r28, 0x00	; 0
    50ba:	d0 e0       	ldi	r29, 0x00	; 0
    50bc:	0f 2e       	mov	r0, r31
    50be:	f5 e0       	ldi	r31, 0x05	; 5
    50c0:	ef 2e       	mov	r14, r31
    50c2:	ff 24       	eor	r15, r15
    50c4:	f3 94       	inc	r15
    50c6:	f0 2d       	mov	r31, r0
    50c8:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <port_0>
    50cc:	88 23       	and	r24, r24
    50ce:	49 f0       	breq	.+18     	; 0x50e2 <sendPacket+0x44>
    50d0:	fe 01       	movw	r30, r28
    50d2:	e8 52       	subi	r30, 0x28	; 40
    50d4:	f8 4f       	sbci	r31, 0xF8	; 248
    50d6:	60 81       	ld	r22, Z
    50d8:	8f e6       	ldi	r24, 0x6F	; 111
    50da:	97 e0       	ldi	r25, 0x07	; 7
    50dc:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <xSerialPutChar>
    50e0:	10 c0       	rjmp	.+32     	; 0x5102 <sendPacket+0x64>
    50e2:	80 91 17 09 	lds	r24, 0x0917	; 0x800917 <port_3>
    50e6:	88 23       	and	r24, r24
    50e8:	61 f0       	breq	.+24     	; 0x5102 <sendPacket+0x64>
    50ea:	f7 01       	movw	r30, r14
    50ec:	80 81       	ld	r24, Z
    50ee:	84 60       	ori	r24, 0x04	; 4
    50f0:	80 83       	st	Z, r24
    50f2:	fe 01       	movw	r30, r28
    50f4:	e8 52       	subi	r30, 0x28	; 40
    50f6:	f8 4f       	sbci	r31, 0xF8	; 248
    50f8:	60 81       	ld	r22, Z
    50fa:	86 eb       	ldi	r24, 0xB6	; 182
    50fc:	97 e0       	ldi	r25, 0x07	; 7
    50fe:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <xSerialPutChar>
    5102:	21 96       	adiw	r28, 0x01	; 1
    5104:	c0 17       	cp	r28, r16
    5106:	d1 07       	cpc	r29, r17
    5108:	f9 f6       	brne	.-66     	; 0x50c8 <sendPacket+0x2a>
	//xSerialRxFlush(&xSerialPort);
	PORTJ &= (_BV(PIN_rs485));
    510a:	e5 e0       	ldi	r30, 0x05	; 5
    510c:	f1 e0       	ldi	r31, 0x01	; 1
    510e:	80 81       	ld	r24, Z
    5110:	84 70       	andi	r24, 0x04	; 4
    5112:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5114:	00 00       	nop

	_delay_us(3645);
	
	
    5116:	df 91       	pop	r29
    5118:	cf 91       	pop	r28
    511a:	1f 91       	pop	r17
    511c:	0f 91       	pop	r16
    511e:	ff 90       	pop	r15
    5120:	ef 90       	pop	r14
    5122:	08 95       	ret

00005124 <modbus_update>:
		case 393:if(comp->AireToWater==1) forsDefrost = value;break;
	}
}

void modbus_update()
{
    5124:	af 92       	push	r10
    5126:	bf 92       	push	r11
    5128:	cf 92       	push	r12
    512a:	df 92       	push	r13
    512c:	ef 92       	push	r14
    512e:	ff 92       	push	r15
    5130:	0f 93       	push	r16
    5132:	1f 93       	push	r17
    5134:	cf 93       	push	r28
    5136:	df 93       	push	r29
	unsigned char noOfBytes;
	unsigned char responseFrameSize;
	unsigned int temp;
	void* ptr=NULL;
	
	if(port_0)buffer=xSerialAvailableChar( &xSerialPort );
    5138:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <port_0>
    513c:	88 23       	and	r24, r24
    513e:	29 f0       	breq	.+10     	; 0x514a <modbus_update+0x26>
    5140:	8f e6       	ldi	r24, 0x6F	; 111
    5142:	97 e0       	ldi	r25, 0x07	; 7
    5144:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <xSerialAvailableChar>
    5148:	09 c0       	rjmp	.+18     	; 0x515c <modbus_update+0x38>
	else if (port_3)buffer=xSerialAvailableChar( &xSerial3Port );
    514a:	80 91 17 09 	lds	r24, 0x0917	; 0x800917 <port_3>
    514e:	88 23       	and	r24, r24
    5150:	09 f4       	brne	.+2      	; 0x5154 <modbus_update+0x30>
    5152:	da c0       	rjmp	.+436    	; 0x5308 <modbus_update+0x1e4>
    5154:	86 eb       	ldi	r24, 0xB6	; 182
    5156:	97 e0       	ldi	r25, 0x07	; 7
    5158:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <xSerialAvailableChar>
	
	//avrSerialPrintf("buffer = %d \r\n",buffer );
	//avrSerialPrintf("overflow= %d \r\n",overflow);
	if (overflow){ return;}//exceptionResponse(OVERFLOW_BUFF);
    515c:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <overflow>
    5160:	91 11       	cpse	r25, r1
    5162:	d7 c0       	rjmp	.+430    	; 0x5312 <modbus_update+0x1ee>
	if (buffer > 0 && buffer < 8) {  return;}// exceptionResponse(CORRUPT_PACKET);
    5164:	9f ef       	ldi	r25, 0xFF	; 255
    5166:	98 0f       	add	r25, r24
    5168:	97 30       	cpi	r25, 0x07	; 7
    516a:	08 f4       	brcc	.+2      	; 0x516e <modbus_update+0x4a>
    516c:	d2 c0       	rjmp	.+420    	; 0x5312 <modbus_update+0x1ee>
	
	// The minimum request packet is 8 bytes for function 3 & 16
	
	id = frame[0];
    516e:	90 91 d8 07 	lds	r25, 0x07D8	; 0x8007d8 <frame>
	//avrSerialPrintf("buffer= %d \r\n",buffer);
	
	if (id == slaveID ) // if the recieved ID matches the slaveID or broadcasting id (0), continue
    5172:	91 30       	cpi	r25, 0x01	; 1
    5174:	09 f0       	breq	.+2      	; 0x5178 <modbus_update+0x54>
    5176:	cd c0       	rjmp	.+410    	; 0x5312 <modbus_update+0x1ee>
	{
		crc = ((frame[buffer - 2] << 8) | frame[buffer - 1]); // combine the crc Low & High bytes
    5178:	28 2f       	mov	r18, r24
    517a:	30 e0       	ldi	r19, 0x00	; 0
    517c:	f9 01       	movw	r30, r18
    517e:	ea 52       	subi	r30, 0x2A	; 42
    5180:	f8 4f       	sbci	r31, 0xF8	; 248
    5182:	d0 81       	ld	r29, Z
    5184:	f9 01       	movw	r30, r18
    5186:	e9 52       	subi	r30, 0x29	; 41
    5188:	f8 4f       	sbci	r31, 0xF8	; 248
    518a:	c0 81       	ld	r28, Z
		//avrSerialPrintf("crc= %d \r\n",crc);
		if (calculateCRC(buffer - 2) == crc) // if the calculated crc matches the recieved crc continue
    518c:	82 50       	subi	r24, 0x02	; 2
    518e:	5e df       	rcall	.-324    	; 0x504c <calculateCRC>
    5190:	2c 2f       	mov	r18, r28
    5192:	30 e0       	ldi	r19, 0x00	; 0
    5194:	3d 2b       	or	r19, r29
    5196:	28 17       	cp	r18, r24
    5198:	39 07       	cpc	r19, r25
    519a:	09 f0       	breq	.+2      	; 0x519e <modbus_update+0x7a>
    519c:	ba c0       	rjmp	.+372    	; 0x5312 <modbus_update+0x1ee>
		{
			function = frame[1];
    519e:	e8 ed       	ldi	r30, 0xD8	; 216
    51a0:	f7 e0       	ldi	r31, 0x07	; 7
    51a2:	21 81       	ldd	r18, Z+1	; 0x01
    51a4:	20 93 92 07 	sts	0x0792, r18	; 0x800792 <function>
			startingAddress = ((frame[2] << 8) | frame[3]); // combine the starting address bytes
    51a8:	82 81       	ldd	r24, Z+2	; 0x02
    51aa:	c3 81       	ldd	r28, Z+3	; 0x03
    51ac:	d0 e0       	ldi	r29, 0x00	; 0
    51ae:	d8 2b       	or	r29, r24
			no_of_registers = ((frame[4] << 8) | frame[5]);
    51b0:	84 81       	ldd	r24, Z+4	; 0x04
    51b2:	45 81       	ldd	r20, Z+5	; 0x05
    51b4:	50 e0       	ldi	r21, 0x00	; 0
    51b6:	58 2b       	or	r21, r24
			maxData = startingAddress + no_of_registers *10;
    51b8:	7a 01       	movw	r14, r20
    51ba:	ee 0c       	add	r14, r14
    51bc:	ff 1c       	adc	r15, r15
    51be:	ca 01       	movw	r24, r20
    51c0:	88 0f       	add	r24, r24
    51c2:	99 1f       	adc	r25, r25
    51c4:	88 0f       	add	r24, r24
    51c6:	99 1f       	adc	r25, r25
    51c8:	88 0f       	add	r24, r24
    51ca:	99 1f       	adc	r25, r25
    51cc:	e8 0e       	add	r14, r24
    51ce:	f9 1e       	adc	r15, r25
    51d0:	ec 0e       	add	r14, r28
    51d2:	fd 1e       	adc	r15, r29
			//avrSerialPrintf("function= %d \r\n",function);
			//avrSerialPrintf("startingAddress= %d \r\n",startingAddress);
			//avrSerialPrintf("no_of_registers= %d \r\n",no_of_registers);
			//avrSerialPrintf("maxData= %d \r\n",maxData);
			if (function == 3)
    51d4:	23 30       	cpi	r18, 0x03	; 3
    51d6:	09 f0       	breq	.+2      	; 0x51da <modbus_update+0xb6>
    51d8:	65 c0       	rjmp	.+202    	; 0x52a4 <modbus_update+0x180>
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
    51da:	9e 01       	movw	r18, r28
    51dc:	ad ec       	ldi	r26, 0xCD	; 205
    51de:	bc ec       	ldi	r27, 0xCC	; 204
    51e0:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    51e4:	96 95       	lsr	r25
    51e6:	87 95       	ror	r24
    51e8:	96 95       	lsr	r25
    51ea:	87 95       	ror	r24
    51ec:	96 95       	lsr	r25
    51ee:	87 95       	ror	r24
    51f0:	9c 01       	movw	r18, r24
    51f2:	22 0f       	add	r18, r18
    51f4:	33 1f       	adc	r19, r19
    51f6:	88 0f       	add	r24, r24
    51f8:	99 1f       	adc	r25, r25
    51fa:	88 0f       	add	r24, r24
    51fc:	99 1f       	adc	r25, r25
    51fe:	88 0f       	add	r24, r24
    5200:	99 1f       	adc	r25, r25
    5202:	82 0f       	add	r24, r18
    5204:	93 1f       	adc	r25, r19
    5206:	9e 01       	movw	r18, r28
    5208:	28 1b       	sub	r18, r24
    520a:	39 0b       	sbc	r19, r25
    520c:	21 30       	cpi	r18, 0x01	; 1
    520e:	31 05       	cpc	r19, r1
    5210:	51 f0       	breq	.+20     	; 0x5226 <modbus_update+0x102>
				else if(startingAddress%10==2){ptr=&Comp_2;}
    5212:	22 30       	cpi	r18, 0x02	; 2
    5214:	31 05       	cpc	r19, r1
    5216:	71 f4       	brne	.+28     	; 0x5234 <modbus_update+0x110>
    5218:	0f 2e       	mov	r0, r31
    521a:	f2 e0       	ldi	r31, 0x02	; 2
    521c:	cf 2e       	mov	r12, r31
    521e:	fa e0       	ldi	r31, 0x0A	; 10
    5220:	df 2e       	mov	r13, r31
    5222:	f0 2d       	mov	r31, r0
    5224:	09 c0       	rjmp	.+18     	; 0x5238 <modbus_update+0x114>
			//avrSerialPrintf("startingAddress= %d \r\n",startingAddress);
			//avrSerialPrintf("no_of_registers= %d \r\n",no_of_registers);
			//avrSerialPrintf("maxData= %d \r\n",maxData);
			if (function == 3)
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
    5226:	0f 2e       	mov	r0, r31
    5228:	f8 e7       	ldi	r31, 0x78	; 120
    522a:	cf 2e       	mov	r12, r31
    522c:	f9 e0       	ldi	r31, 0x09	; 9
    522e:	df 2e       	mov	r13, r31
    5230:	f0 2d       	mov	r31, r0
    5232:	02 c0       	rjmp	.+4      	; 0x5238 <modbus_update+0x114>
	unsigned int crc16;
	unsigned int crc;
	unsigned char noOfBytes;
	unsigned char responseFrameSize;
	unsigned int temp;
	void* ptr=NULL;
    5234:	c1 2c       	mov	r12, r1
    5236:	d1 2c       	mov	r13, r1
			if (function == 3)
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
				else if(startingAddress%10==2){ptr=&Comp_2;}
				
				noOfBytes = no_of_registers * 2;
    5238:	a4 2e       	mov	r10, r20
    523a:	aa 0c       	add	r10, r10
				responseFrameSize = 5 + noOfBytes; // ID, function, noOfBytes, (dataLo + dataHi) * number of registers, crcLo, crcHi
    523c:	0f 2e       	mov	r0, r31
    523e:	f5 e0       	ldi	r31, 0x05	; 5
    5240:	bf 2e       	mov	r11, r31
    5242:	f0 2d       	mov	r31, r0
    5244:	ba 0c       	add	r11, r10
				frame[0] = slaveID;
    5246:	e8 ed       	ldi	r30, 0xD8	; 216
    5248:	f7 e0       	ldi	r31, 0x07	; 7
    524a:	81 e0       	ldi	r24, 0x01	; 1
    524c:	80 83       	st	Z, r24
				frame[1] = function;
    524e:	83 e0       	ldi	r24, 0x03	; 3
    5250:	81 83       	std	Z+1, r24	; 0x01
				frame[2] = noOfBytes;
    5252:	a2 82       	std	Z+2, r10	; 0x02
				//avrSerialPrintf("FrameSize= %d \r\n",responseFrameSize);
				//avrSerialPrintf("frame[1]= %d \r\n",frame[1]);
				//avrSerialPrintf("frame[2]= %d \r\n",frame[2]);
				address = 3; // PDU starts at the 4th byte
				for (index = startingAddress; index < maxData; )
    5254:	ce 15       	cp	r28, r14
    5256:	df 05       	cpc	r29, r15
    5258:	a8 f4       	brcc	.+42     	; 0x5284 <modbus_update+0x160>
    525a:	03 e0       	ldi	r16, 0x03	; 3
    525c:	10 e0       	ldi	r17, 0x00	; 0
				{
					temp = readSysReg(ptr,&EEpromData,index);//holdingRegs[index]
    525e:	ae 01       	movw	r20, r28
    5260:	68 e1       	ldi	r22, 0x18	; 24
    5262:	79 e0       	ldi	r23, 0x09	; 9
    5264:	c6 01       	movw	r24, r12
    5266:	0c dc       	rcall	.-2024   	; 0x4a80 <readSysReg>
					frame[address] = temp >> 8; // split the register into 2 bytes
    5268:	f8 01       	movw	r30, r16
    526a:	e8 52       	subi	r30, 0x28	; 40
    526c:	f8 4f       	sbci	r31, 0xF8	; 248
    526e:	90 83       	st	Z, r25
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
					frame[address] = temp & 0xFF;
    5270:	f8 01       	movw	r30, r16
    5272:	e7 52       	subi	r30, 0x27	; 39
    5274:	f8 4f       	sbci	r31, 0xF8	; 248
    5276:	80 83       	st	Z, r24
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
    5278:	0e 5f       	subi	r16, 0xFE	; 254
    527a:	1f 4f       	sbci	r17, 0xFF	; 255
					index +=10;
    527c:	2a 96       	adiw	r28, 0x0a	; 10
				frame[2] = noOfBytes;
				//avrSerialPrintf("FrameSize= %d \r\n",responseFrameSize);
				//avrSerialPrintf("frame[1]= %d \r\n",frame[1]);
				//avrSerialPrintf("frame[2]= %d \r\n",frame[2]);
				address = 3; // PDU starts at the 4th byte
				for (index = startingAddress; index < maxData; )
    527e:	ce 15       	cp	r28, r14
    5280:	df 05       	cpc	r29, r15
    5282:	68 f3       	brcs	.-38     	; 0x525e <modbus_update+0x13a>
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
					index +=10;
				}
				
				crc16 = calculateCRC(responseFrameSize - 2);
    5284:	83 e0       	ldi	r24, 0x03	; 3
    5286:	8a 0d       	add	r24, r10
    5288:	e1 de       	rcall	.-574    	; 0x504c <calculateCRC>
				frame[responseFrameSize - 2] = crc16 >> 8; // split crc into 2 bytes
    528a:	2b 2d       	mov	r18, r11
    528c:	30 e0       	ldi	r19, 0x00	; 0
    528e:	f9 01       	movw	r30, r18
    5290:	ea 52       	subi	r30, 0x2A	; 42
    5292:	f8 4f       	sbci	r31, 0xF8	; 248
    5294:	90 83       	st	Z, r25
				frame[responseFrameSize - 1] = crc16 & 0xFF;
    5296:	f9 01       	movw	r30, r18
    5298:	e9 52       	subi	r30, 0x29	; 41
    529a:	f8 4f       	sbci	r31, 0xF8	; 248
				//return;
				sendPacket(responseFrameSize);
    529c:	80 83       	st	Z, r24
    529e:	8b 2d       	mov	r24, r11
    52a0:	fe de       	rcall	.-516    	; 0x509e <sendPacket>
    52a2:	37 c0       	rjmp	.+110    	; 0x5312 <modbus_update+0x1ee>
				
			}
			
			else if (function == 16)
    52a4:	20 31       	cpi	r18, 0x10	; 16
    52a6:	09 f0       	breq	.+2      	; 0x52aa <modbus_update+0x186>
    52a8:	34 c0       	rjmp	.+104    	; 0x5312 <modbus_update+0x1ee>
			{
				address = 7; // start at the 8th byte in the frame
				
				for (index = startingAddress; index < maxData; )
    52aa:	ce 15       	cp	r28, r14
    52ac:	df 05       	cpc	r29, r15
    52ae:	b0 f4       	brcc	.+44     	; 0x52dc <modbus_update+0x1b8>
    52b0:	07 e0       	ldi	r16, 0x07	; 7
    52b2:	10 e0       	ldi	r17, 0x00	; 0
				{
					temp = ((frame[address] << 8) | frame[address + 1]);
    52b4:	f8 01       	movw	r30, r16
    52b6:	e8 52       	subi	r30, 0x28	; 40
    52b8:	f8 4f       	sbci	r31, 0xF8	; 248
    52ba:	80 81       	ld	r24, Z
    52bc:	f8 01       	movw	r30, r16
    52be:	e7 52       	subi	r30, 0x27	; 39
    52c0:	f8 4f       	sbci	r31, 0xF8	; 248
    52c2:	40 81       	ld	r20, Z
					writeSysReg(&EEpromData,index,temp);
    52c4:	50 e0       	ldi	r21, 0x00	; 0
    52c6:	58 2b       	or	r21, r24
    52c8:	be 01       	movw	r22, r28
    52ca:	88 e1       	ldi	r24, 0x18	; 24
    52cc:	99 e0       	ldi	r25, 0x09	; 9
    52ce:	f6 dd       	rcall	.-1044   	; 0x4ebc <writeSysReg>
					address += 2;
    52d0:	0e 5f       	subi	r16, 0xFE	; 254
    52d2:	1f 4f       	sbci	r17, 0xFF	; 255
					index+=10;
    52d4:	2a 96       	adiw	r28, 0x0a	; 10
			
			else if (function == 16)
			{
				address = 7; // start at the 8th byte in the frame
				
				for (index = startingAddress; index < maxData; )
    52d6:	ce 15       	cp	r28, r14
    52d8:	df 05       	cpc	r29, r15
    52da:	60 f3       	brcs	.-40     	; 0x52b4 <modbus_update+0x190>
					temp = ((frame[address] << 8) | frame[address + 1]);
					writeSysReg(&EEpromData,index,temp);
					address += 2;
					index+=10;
				}
				portENTER_CRITICAL();
    52dc:	0f b6       	in	r0, 0x3f	; 63
    52de:	f8 94       	cli
    52e0:	0f 92       	push	r0
				eeprom_write_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));
    52e2:	40 e6       	ldi	r20, 0x60	; 96
    52e4:	50 e0       	ldi	r21, 0x00	; 0
    52e6:	60 e0       	ldi	r22, 0x00	; 0
    52e8:	70 e0       	ldi	r23, 0x00	; 0
    52ea:	88 e1       	ldi	r24, 0x18	; 24
    52ec:	99 e0       	ldi	r25, 0x09	; 9
    52ee:	0e 94 94 5d 	call	0xbb28	; 0xbb28 <eeprom_write_block>
				portEXIT_CRITICAL();
    52f2:	0f 90       	pop	r0
				// only the first 6 bytes are used for CRC calculation
				crc16 = calculateCRC(6);
    52f4:	0f be       	out	0x3f, r0	; 63
    52f6:	86 e0       	ldi	r24, 0x06	; 6
				frame[6] = crc16 >> 8; // split crc into 2 bytes
    52f8:	a9 de       	rcall	.-686    	; 0x504c <calculateCRC>
    52fa:	e8 ed       	ldi	r30, 0xD8	; 216
    52fc:	f7 e0       	ldi	r31, 0x07	; 7
				frame[7] = crc16 & 0xFF;
    52fe:	96 83       	std	Z+6, r25	; 0x06
				
				// a function 16 response is an echo of the first 6 bytes from the request + 2 crc bytes
				
				sendPacket(8);
    5300:	87 83       	std	Z+7, r24	; 0x07
    5302:	88 e0       	ldi	r24, 0x08	; 8
    5304:	cc de       	rcall	.-616    	; 0x509e <sendPacket>
    5306:	05 c0       	rjmp	.+10     	; 0x5312 <modbus_update+0x1ee>
	if(port_0)buffer=xSerialAvailableChar( &xSerialPort );
	else if (port_3)buffer=xSerialAvailableChar( &xSerial3Port );
	
	//avrSerialPrintf("buffer = %d \r\n",buffer );
	//avrSerialPrintf("overflow= %d \r\n",overflow);
	if (overflow){ return;}//exceptionResponse(OVERFLOW_BUFF);
    5308:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <overflow>
    530c:	88 23       	and	r24, r24
    530e:	09 f4       	brne	.+2      	; 0x5312 <modbus_update+0x1ee>
    5310:	2e cf       	rjmp	.-420    	; 0x516e <modbus_update+0x4a>
			
		}
		else {return;}// exceptionResponse(CHECKSUM_FAIL);
	}
	else {return;}//exceptionResponse(ERROR_FUNC);
}
    5312:	df 91       	pop	r29
    5314:	cf 91       	pop	r28
    5316:	1f 91       	pop	r17
    5318:	0f 91       	pop	r16
    531a:	ff 90       	pop	r15
    531c:	ef 90       	pop	r14
    531e:	df 90       	pop	r13
    5320:	cf 90       	pop	r12
    5322:	bf 90       	pop	r11
    5324:	af 90       	pop	r10
    5326:	08 95       	ret

00005328 <StartHeatPump>:
}

//------------------------------------------------

void StartHeatPump(TimerHandle_t xTimer)
{
    5328:	8f 92       	push	r8
    532a:	9f 92       	push	r9
    532c:	af 92       	push	r10
    532e:	bf 92       	push	r11
    5330:	cf 92       	push	r12
    5332:	df 92       	push	r13
    5334:	ef 92       	push	r14
    5336:	ff 92       	push	r15
    5338:	0f 93       	push	r16
    533a:	1f 93       	push	r17
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    533c:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    5340:	fc 01       	movw	r30, r24
	TickType_t period;
	period=(TickType_t)EEpromData.Compressor_delay;
    5342:	20 91 18 09 	lds	r18, 0x0918	; 0x800918 <EEpromData>
	period*=1000;
    5346:	30 e0       	ldi	r19, 0x00	; 0
    5348:	a8 ee       	ldi	r26, 0xE8	; 232
    534a:	b3 e0       	ldi	r27, 0x03	; 3
    534c:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    5350:	4b 01       	movw	r8, r22
    5352:	5c 01       	movw	r10, r24
	//xSerialxPrintf(&xSerial3Port,"StartHeatPump\r\n");
	if((*pxTimerID) == uxStartDelayHeatPTimer_1_ID) {
    5354:	80 81       	ld	r24, Z
    5356:	82 30       	cpi	r24, 0x02	; 2
    5358:	09 f0       	breq	.+2      	; 0x535c <StartHeatPump+0x34>
    535a:	40 c0       	rjmp	.+128    	; 0x53dc <StartHeatPump+0xb4>
		xSerialxPrintf(&xSerial3Port,"StartHeatPump_1\r\n");
    535c:	8f ea       	ldi	r24, 0xAF	; 175
    535e:	92 e0       	ldi	r25, 0x02	; 2
    5360:	9f 93       	push	r25
    5362:	8f 93       	push	r24
    5364:	86 eb       	ldi	r24, 0xB6	; 182
    5366:	97 e0       	ldi	r25, 0x07	; 7
    5368:	9f 93       	push	r25
    536a:	8f 93       	push	r24
    536c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_1 ==0)
    5370:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5374:	0f 90       	pop	r0
    5376:	0f 90       	pop	r0
    5378:	0f 90       	pop	r0
    537a:	0f 90       	pop	r0
    537c:	83 fd       	sbrc	r24, 3
    537e:	70 c0       	rjmp	.+224    	; 0x5460 <StartHeatPump+0x138>
		{
			
			//xSerialxPrintf(&xSerial3Port,"StartHeatPump_1\r\n");
			Comp_1.heatPOn=1;
    5380:	81 e0       	ldi	r24, 0x01	; 1
    5382:	80 93 84 09 	sts	0x0984, r24	; 0x800984 <Comp_1+0xc>
			START_HEAT_PUMP_1;
    5386:	e2 e0       	ldi	r30, 0x02	; 2
    5388:	f1 e0       	ldi	r31, 0x01	; 1
    538a:	80 81       	ld	r24, Z
    538c:	88 60       	ori	r24, 0x08	; 8
    538e:	80 83       	st	Z, r24
			timeStartHeatP_1=time(&current_time);
    5390:	83 e1       	ldi	r24, 0x13	; 19
    5392:	99 e0       	ldi	r25, 0x09	; 9
    5394:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5398:	60 93 8c 0a 	sts	0x0A8C, r22	; 0x800a8c <timeStartHeatP_1>
    539c:	70 93 8d 0a 	sts	0x0A8D, r23	; 0x800a8d <timeStartHeatP_1+0x1>
    53a0:	80 93 8e 0a 	sts	0x0A8E, r24	; 0x800a8e <timeStartHeatP_1+0x2>
    53a4:	90 93 8f 0a 	sts	0x0A8F, r25	; 0x800a8f <timeStartHeatP_1+0x3>
			EEpromData.number_turnon_hiter_1+=1;			
    53a8:	ea e5       	ldi	r30, 0x5A	; 90
    53aa:	f9 e0       	ldi	r31, 0x09	; 9
    53ac:	80 81       	ld	r24, Z
    53ae:	91 81       	ldd	r25, Z+1	; 0x01
    53b0:	01 96       	adiw	r24, 0x01	; 1
    53b2:	91 83       	std	Z+1, r25	; 0x01
    53b4:	80 83       	st	Z, r24
			xTimerChangePeriod( xStartCompressor_1,period, 100 );
    53b6:	0f 2e       	mov	r0, r31
    53b8:	f4 e6       	ldi	r31, 0x64	; 100
    53ba:	cf 2e       	mov	r12, r31
    53bc:	d1 2c       	mov	r13, r1
    53be:	e1 2c       	mov	r14, r1
    53c0:	f1 2c       	mov	r15, r1
    53c2:	f0 2d       	mov	r31, r0
    53c4:	00 e0       	ldi	r16, 0x00	; 0
    53c6:	10 e0       	ldi	r17, 0x00	; 0
    53c8:	a5 01       	movw	r20, r10
    53ca:	94 01       	movw	r18, r8
    53cc:	64 e0       	ldi	r22, 0x04	; 4
    53ce:	80 91 96 0a 	lds	r24, 0x0A96	; 0x800a96 <xStartCompressor_1>
    53d2:	90 91 97 0a 	lds	r25, 0x0A97	; 0x800a97 <xStartCompressor_1+0x1>
    53d6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    53da:	42 c0       	rjmp	.+132    	; 0x5460 <StartHeatPump+0x138>
			
		}
	}

	else if((*pxTimerID) == uxStartDelayHeatPTimer_2_ID) {
    53dc:	8f 30       	cpi	r24, 0x0F	; 15
    53de:	09 f0       	breq	.+2      	; 0x53e2 <StartHeatPump+0xba>
    53e0:	3f c0       	rjmp	.+126    	; 0x5460 <StartHeatPump+0x138>
		xSerialxPrintf(&xSerial3Port,"StartHeatPump_2\r\n");
    53e2:	81 ec       	ldi	r24, 0xC1	; 193
    53e4:	92 e0       	ldi	r25, 0x02	; 2
    53e6:	9f 93       	push	r25
    53e8:	8f 93       	push	r24
    53ea:	86 eb       	ldi	r24, 0xB6	; 182
    53ec:	97 e0       	ldi	r25, 0x07	; 7
    53ee:	9f 93       	push	r25
    53f0:	8f 93       	push	r24
    53f2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_2 == 0)
    53f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    53fa:	0f 90       	pop	r0
    53fc:	0f 90       	pop	r0
    53fe:	0f 90       	pop	r0
    5400:	0f 90       	pop	r0
    5402:	84 fd       	sbrc	r24, 4
    5404:	2d c0       	rjmp	.+90     	; 0x5460 <StartHeatPump+0x138>
		{
			Comp_2.heatPOn=2;
    5406:	82 e0       	ldi	r24, 0x02	; 2
    5408:	80 93 0e 0a 	sts	0x0A0E, r24	; 0x800a0e <Comp_2+0xc>
			START_HEAT_PUMP_2;
    540c:	e2 e0       	ldi	r30, 0x02	; 2
    540e:	f1 e0       	ldi	r31, 0x01	; 1
    5410:	80 81       	ld	r24, Z
    5412:	80 61       	ori	r24, 0x10	; 16
    5414:	80 83       	st	Z, r24
			timeStartHeatP_2=time(&current_time);
    5416:	83 e1       	ldi	r24, 0x13	; 19
    5418:	99 e0       	ldi	r25, 0x09	; 9
    541a:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    541e:	60 93 a0 0a 	sts	0x0AA0, r22	; 0x800aa0 <timeStartHeatP_2>
    5422:	70 93 a1 0a 	sts	0x0AA1, r23	; 0x800aa1 <timeStartHeatP_2+0x1>
    5426:	80 93 a2 0a 	sts	0x0AA2, r24	; 0x800aa2 <timeStartHeatP_2+0x2>
    542a:	90 93 a3 0a 	sts	0x0AA3, r25	; 0x800aa3 <timeStartHeatP_2+0x3>
			EEpromData.number_turnon_hiter_2+=1;
    542e:	ee e6       	ldi	r30, 0x6E	; 110
    5430:	f9 e0       	ldi	r31, 0x09	; 9
    5432:	80 81       	ld	r24, Z
    5434:	91 81       	ldd	r25, Z+1	; 0x01
    5436:	01 96       	adiw	r24, 0x01	; 1
    5438:	91 83       	std	Z+1, r25	; 0x01
    543a:	80 83       	st	Z, r24
			xTimerChangePeriod( xStartCompressor_2,period, 100 );
    543c:	0f 2e       	mov	r0, r31
    543e:	f4 e6       	ldi	r31, 0x64	; 100
    5440:	cf 2e       	mov	r12, r31
    5442:	d1 2c       	mov	r13, r1
    5444:	e1 2c       	mov	r14, r1
    5446:	f1 2c       	mov	r15, r1
    5448:	f0 2d       	mov	r31, r0
    544a:	00 e0       	ldi	r16, 0x00	; 0
    544c:	10 e0       	ldi	r17, 0x00	; 0
    544e:	a5 01       	movw	r20, r10
    5450:	94 01       	movw	r18, r8
    5452:	64 e0       	ldi	r22, 0x04	; 4
    5454:	80 91 a8 0a 	lds	r24, 0x0AA8	; 0x800aa8 <xStartCompressor_2>
    5458:	90 91 a9 0a 	lds	r25, 0x0AA9	; 0x800aa9 <xStartCompressor_2+0x1>
    545c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		}
		
	}
}
    5460:	1f 91       	pop	r17
    5462:	0f 91       	pop	r16
    5464:	ff 90       	pop	r15
    5466:	ef 90       	pop	r14
    5468:	df 90       	pop	r13
    546a:	cf 90       	pop	r12
    546c:	bf 90       	pop	r11
    546e:	af 90       	pop	r10
    5470:	9f 90       	pop	r9
    5472:	8f 90       	pop	r8
    5474:	08 95       	ret

00005476 <SwitchRev_2_Time>:
		xTimerStart(xSwitchRevTwo_2_time, 0);
	}
}
//-------------------------------------------------------------------------
void SwitchRev_2_Time(TimerHandle_t xTimer)
{
    5476:	8f 92       	push	r8
    5478:	9f 92       	push	r9
    547a:	af 92       	push	r10
    547c:	bf 92       	push	r11
    547e:	cf 92       	push	r12
    5480:	df 92       	push	r13
    5482:	ef 92       	push	r14
    5484:	ff 92       	push	r15
    5486:	0f 93       	push	r16
    5488:	1f 93       	push	r17
    548a:	cf 93       	push	r28
    548c:	df 93       	push	r29
    548e:	ac 01       	movw	r20, r24
	portBASE_TYPE *pxTimerID;
	
	TickType_t period;
	period=(TickType_t)EEpromData.HeatingPump_delay;
    5490:	20 91 1b 09 	lds	r18, 0x091B	; 0x80091b <EEpromData+0x3>
	period*=1000;
    5494:	30 e0       	ldi	r19, 0x00	; 0
    5496:	a8 ee       	ldi	r26, 0xE8	; 232
    5498:	b3 e0       	ldi	r27, 0x03	; 3
    549a:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    549e:	4b 01       	movw	r8, r22
    54a0:	5c 01       	movw	r10, r24
	pxTimerID = pvTimerGetTimerID(xTimer);
    54a2:	ca 01       	movw	r24, r20
    54a4:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    54a8:	ec 01       	movw	r28, r24
	
	//xSerialxPrintf(&xSerial3Port,"SwitchRev_2\r\n");
	
	if((*pxTimerID) == uxSwitchRevTwo_1_ID)
    54aa:	88 81       	ld	r24, Y
    54ac:	8d 30       	cpi	r24, 0x0D	; 13
    54ae:	29 f5       	brne	.+74     	; 0x54fa <SwitchRev_2_Time+0x84>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_ON_1_2\r\n");
    54b0:	83 ed       	ldi	r24, 0xD3	; 211
    54b2:	92 e0       	ldi	r25, 0x02	; 2
    54b4:	9f 93       	push	r25
    54b6:	8f 93       	push	r24
    54b8:	86 eb       	ldi	r24, 0xB6	; 182
    54ba:	97 e0       	ldi	r25, 0x07	; 7
    54bc:	9f 93       	push	r25
    54be:	8f 93       	push	r24
    54c0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_REV_VALVE_1 == 0){START_REV_VALVE_1;}//
    54c4:	0f 90       	pop	r0
    54c6:	0f 90       	pop	r0
    54c8:	0f 90       	pop	r0
    54ca:	0f 90       	pop	r0
    54cc:	94 99       	sbic	0x12, 4	; 18
    54ce:	02 c0       	rjmp	.+4      	; 0x54d4 <SwitchRev_2_Time+0x5e>
    54d0:	a4 9a       	sbi	0x14, 4	; 20
    54d2:	01 c0       	rjmp	.+2      	; 0x54d6 <SwitchRev_2_Time+0x60>
		else {STOP_REV_VALVE_1;}//xSerialxPrintf(&xSerial3Port,"SwitchRev_OFF_2\r\n");
    54d4:	a4 98       	cbi	0x14, 4	; 20
		xTimerChangePeriod( xStopHeatPump_1,period, 100 );
    54d6:	0f 2e       	mov	r0, r31
    54d8:	f4 e6       	ldi	r31, 0x64	; 100
    54da:	cf 2e       	mov	r12, r31
    54dc:	d1 2c       	mov	r13, r1
    54de:	e1 2c       	mov	r14, r1
    54e0:	f1 2c       	mov	r15, r1
    54e2:	f0 2d       	mov	r31, r0
    54e4:	00 e0       	ldi	r16, 0x00	; 0
    54e6:	10 e0       	ldi	r17, 0x00	; 0
    54e8:	a5 01       	movw	r20, r10
    54ea:	94 01       	movw	r18, r8
    54ec:	64 e0       	ldi	r22, 0x04	; 4
    54ee:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <xStopHeatPump_1>
    54f2:	90 91 06 09 	lds	r25, 0x0906	; 0x800906 <xStopHeatPump_1+0x1>
    54f6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
	if((*pxTimerID) == uxSwitchRevTwo_2_ID)
    54fa:	88 81       	ld	r24, Y
    54fc:	89 31       	cpi	r24, 0x19	; 25
    54fe:	b9 f4       	brne	.+46     	; 0x552e <SwitchRev_2_Time+0xb8>
	{
		//xSerialxPrintf(&xSerial3Port,"SwitchRev_2_2\r\n");
		if(PIN_REV_VALVE_2 == 0) START_REV_VALVE_2;
    5500:	93 99       	sbic	0x12, 3	; 18
    5502:	02 c0       	rjmp	.+4      	; 0x5508 <SwitchRev_2_Time+0x92>
    5504:	a3 9a       	sbi	0x14, 3	; 20
    5506:	01 c0       	rjmp	.+2      	; 0x550a <SwitchRev_2_Time+0x94>
		else STOP_REV_VALVE_2;
    5508:	a3 98       	cbi	0x14, 3	; 20
		xTimerChangePeriod( xStopHeatPump_2,period, 100 );
    550a:	0f 2e       	mov	r0, r31
    550c:	f4 e6       	ldi	r31, 0x64	; 100
    550e:	cf 2e       	mov	r12, r31
    5510:	d1 2c       	mov	r13, r1
    5512:	e1 2c       	mov	r14, r1
    5514:	f1 2c       	mov	r15, r1
    5516:	f0 2d       	mov	r31, r0
    5518:	00 e0       	ldi	r16, 0x00	; 0
    551a:	10 e0       	ldi	r17, 0x00	; 0
    551c:	a5 01       	movw	r20, r10
    551e:	94 01       	movw	r18, r8
    5520:	64 e0       	ldi	r22, 0x04	; 4
    5522:	80 91 86 0a 	lds	r24, 0x0A86	; 0x800a86 <xStopHeatPump_2>
    5526:	90 91 87 0a 	lds	r25, 0x0A87	; 0x800a87 <xStopHeatPump_2+0x1>
    552a:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
}
    552e:	df 91       	pop	r29
    5530:	cf 91       	pop	r28
    5532:	1f 91       	pop	r17
    5534:	0f 91       	pop	r16
    5536:	ff 90       	pop	r15
    5538:	ef 90       	pop	r14
    553a:	df 90       	pop	r13
    553c:	cf 90       	pop	r12
    553e:	bf 90       	pop	r11
    5540:	af 90       	pop	r10
    5542:	9f 90       	pop	r9
    5544:	8f 90       	pop	r8
    5546:	08 95       	ret

00005548 <StartCheckErrors>:
}
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------
void StartCheckErrors(TimerHandle_t xTimer)
{
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5548:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
	
	
	if((*pxTimerID) == uxStartDelayChekErrTimer_1_ID){Comp_1.countError=0; Comp_1.checkErrors=true;xSerialxPrintf(&xSerial3Port,"StartCheckErrors_1\r\n");}
    554c:	fc 01       	movw	r30, r24
    554e:	80 81       	ld	r24, Z
    5550:	87 30       	cpi	r24, 0x07	; 7
    5552:	a1 f4       	brne	.+40     	; 0x557c <StartCheckErrors+0x34>
    5554:	e8 e7       	ldi	r30, 0x78	; 120
    5556:	f9 e0       	ldi	r31, 0x09	; 9
    5558:	11 8a       	std	Z+17, r1	; 0x11
    555a:	81 e0       	ldi	r24, 0x01	; 1
    555c:	85 83       	std	Z+5, r24	; 0x05
    555e:	86 ee       	ldi	r24, 0xE6	; 230
    5560:	92 e0       	ldi	r25, 0x02	; 2
    5562:	9f 93       	push	r25
    5564:	8f 93       	push	r24
    5566:	86 eb       	ldi	r24, 0xB6	; 182
    5568:	97 e0       	ldi	r25, 0x07	; 7
    556a:	9f 93       	push	r25
    556c:	8f 93       	push	r24
    556e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    5572:	0f 90       	pop	r0
    5574:	0f 90       	pop	r0
    5576:	0f 90       	pop	r0
    5578:	0f 90       	pop	r0
    557a:	08 95       	ret
	else if((*pxTimerID) == uxStartDelayChekErrTimer_2_ID){Comp_2.countError=0;Comp_2.checkErrors=true;xSerialxPrintf(&xSerial3Port,"StartCheckErrors_2\r\n");}
    557c:	84 31       	cpi	r24, 0x14	; 20
    557e:	99 f4       	brne	.+38     	; 0x55a6 <StartCheckErrors+0x5e>
    5580:	e2 e0       	ldi	r30, 0x02	; 2
    5582:	fa e0       	ldi	r31, 0x0A	; 10
    5584:	11 8a       	std	Z+17, r1	; 0x11
    5586:	81 e0       	ldi	r24, 0x01	; 1
    5588:	85 83       	std	Z+5, r24	; 0x05
    558a:	8b ef       	ldi	r24, 0xFB	; 251
    558c:	92 e0       	ldi	r25, 0x02	; 2
    558e:	9f 93       	push	r25
    5590:	8f 93       	push	r24
    5592:	86 eb       	ldi	r24, 0xB6	; 182
    5594:	97 e0       	ldi	r25, 0x07	; 7
    5596:	9f 93       	push	r25
    5598:	8f 93       	push	r24
    559a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    559e:	0f 90       	pop	r0
    55a0:	0f 90       	pop	r0
    55a2:	0f 90       	pop	r0
    55a4:	0f 90       	pop	r0
    55a6:	08 95       	ret

000055a8 <StartCheckTrv>:
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------
void StartCheckTrv(TimerHandle_t xTimer)
{
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    55a8:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	if((*pxTimerID) == uxStartDelayChekTrvTimer_1_ID)       {Comp_1.checkTrv=true;xSerialxPrintf(&xSerial3Port,"StartCheckTrv_1\r\n");}
    55ac:	fc 01       	movw	r30, r24
    55ae:	80 81       	ld	r24, Z
    55b0:	86 30       	cpi	r24, 0x06	; 6
    55b2:	91 f4       	brne	.+36     	; 0x55d8 <StartCheckTrv+0x30>
    55b4:	81 e0       	ldi	r24, 0x01	; 1
    55b6:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <Comp_1+0x1>
    55ba:	80 e1       	ldi	r24, 0x10	; 16
    55bc:	93 e0       	ldi	r25, 0x03	; 3
    55be:	9f 93       	push	r25
    55c0:	8f 93       	push	r24
    55c2:	86 eb       	ldi	r24, 0xB6	; 182
    55c4:	97 e0       	ldi	r25, 0x07	; 7
    55c6:	9f 93       	push	r25
    55c8:	8f 93       	push	r24
    55ca:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    55ce:	0f 90       	pop	r0
    55d0:	0f 90       	pop	r0
    55d2:	0f 90       	pop	r0
    55d4:	0f 90       	pop	r0
    55d6:	08 95       	ret
	else if((*pxTimerID) == uxStartDelayChekTrvTimer_2_ID) {Comp_2.checkTrv=true;xSerialxPrintf(&xSerial3Port,"StartCheckTrv_2\r\n");}
    55d8:	83 31       	cpi	r24, 0x13	; 19
    55da:	89 f4       	brne	.+34     	; 0x55fe <StartCheckTrv+0x56>
    55dc:	81 e0       	ldi	r24, 0x01	; 1
    55de:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <Comp_2+0x1>
    55e2:	82 e2       	ldi	r24, 0x22	; 34
    55e4:	93 e0       	ldi	r25, 0x03	; 3
    55e6:	9f 93       	push	r25
    55e8:	8f 93       	push	r24
    55ea:	86 eb       	ldi	r24, 0xB6	; 182
    55ec:	97 e0       	ldi	r25, 0x07	; 7
    55ee:	9f 93       	push	r25
    55f0:	8f 93       	push	r24
    55f2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    55f6:	0f 90       	pop	r0
    55f8:	0f 90       	pop	r0
    55fa:	0f 90       	pop	r0
    55fc:	0f 90       	pop	r0
    55fe:	08 95       	ret

00005600 <StartReversingValve>:
		xTimerChangePeriod( xStartRevValve_2,period, 100 );
	}
	
}
//------------------------------------------------
void StartReversingValve(TimerHandle_t xTimer){
    5600:	8f 92       	push	r8
    5602:	9f 92       	push	r9
    5604:	af 92       	push	r10
    5606:	bf 92       	push	r11
    5608:	cf 92       	push	r12
    560a:	df 92       	push	r13
    560c:	ef 92       	push	r14
    560e:	ff 92       	push	r15
    5610:	0f 93       	push	r16
    5612:	1f 93       	push	r17
	TickType_t period;
	static time_t time_count_1;
	static time_t time_count_2;
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5614:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
	if((*pxTimerID) == uxStartDelayRevVTimer_1_ID)
    5618:	fc 01       	movw	r30, r24
    561a:	80 81       	ld	r24, Z
    561c:	84 30       	cpi	r24, 0x04	; 4
    561e:	09 f0       	breq	.+2      	; 0x5622 <StartReversingValve+0x22>
    5620:	3a c1       	rjmp	.+628    	; 0x5896 <StartReversingValve+0x296>
	{	period=(TickType_t)EEpromData.Three_Way_delay;
    5622:	20 91 1c 09 	lds	r18, 0x091C	; 0x80091c <EEpromData+0x4>
		period*=1000;
    5626:	30 e0       	ldi	r19, 0x00	; 0
    5628:	a8 ee       	ldi	r26, 0xE8	; 232
    562a:	b3 e0       	ldi	r27, 0x03	; 3
    562c:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
		period+=10000;
    5630:	4b 01       	movw	r8, r22
    5632:	5c 01       	movw	r10, r24
    5634:	f0 e1       	ldi	r31, 0x10	; 16
    5636:	8f 0e       	add	r8, r31
    5638:	f7 e2       	ldi	r31, 0x27	; 39
    563a:	9f 1e       	adc	r9, r31
    563c:	a1 1c       	adc	r10, r1
    563e:	b1 1c       	adc	r11, r1
		//////////////////////////////////////////

     //xSerialxPrintf(&xSerial3Port,"StartReversingValve\r\n");

		if(Comp_1.Cooling  )
    5640:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <Comp_1+0x3>
    5644:	88 23       	and	r24, r24
    5646:	09 f4       	brne	.+2      	; 0x564a <StartReversingValve+0x4a>
    5648:	86 c0       	rjmp	.+268    	; 0x5756 <StartReversingValve+0x156>
		{
			
			if(PIN_REV_VALVE_1 >0 && EEpromData.reversMod==1){
    564a:	94 9b       	sbis	0x12, 4	; 18
    564c:	59 c0       	rjmp	.+178    	; 0x5700 <StartReversingValve+0x100>
    564e:	80 91 40 09 	lds	r24, 0x0940	; 0x800940 <EEpromData+0x28>
    5652:	81 30       	cpi	r24, 0x01	; 1
    5654:	09 f0       	breq	.+2      	; 0x5658 <StartReversingValve+0x58>
    5656:	54 c0       	rjmp	.+168    	; 0x5700 <StartReversingValve+0x100>
				
				STOP_REV_VALVE_1;//
    5658:	a4 98       	cbi	0x14, 4	; 20
				xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    565a:	84 e3       	ldi	r24, 0x34	; 52
    565c:	93 e0       	ldi	r25, 0x03	; 3
    565e:	9f 93       	push	r25
    5660:	8f 93       	push	r24
    5662:	86 eb       	ldi	r24, 0xB6	; 182
    5664:	97 e0       	ldi	r25, 0x07	; 7
    5666:	9f 93       	push	r25
    5668:	8f 93       	push	r24
    566a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_1.revVOn=0;
    566e:	10 92 86 09 	sts	0x0986, r1	; 0x800986 <Comp_1+0xe>
				time_count_1+= difftime(time(&current_time), timeStartRevV_1);
    5672:	c0 90 af 0a 	lds	r12, 0x0AAF	; 0x800aaf <timeStartRevV_1>
    5676:	d0 90 b0 0a 	lds	r13, 0x0AB0	; 0x800ab0 <timeStartRevV_1+0x1>
    567a:	e0 90 b1 0a 	lds	r14, 0x0AB1	; 0x800ab1 <timeStartRevV_1+0x2>
    567e:	f0 90 b2 0a 	lds	r15, 0x0AB2	; 0x800ab2 <timeStartRevV_1+0x3>
    5682:	83 e1       	ldi	r24, 0x13	; 19
    5684:	99 e0       	ldi	r25, 0x09	; 9
    5686:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    568a:	a7 01       	movw	r20, r14
    568c:	96 01       	movw	r18, r12
    568e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5692:	c0 90 5d 07 	lds	r12, 0x075D	; 0x80075d <time_count_1.3176>
    5696:	d0 90 5e 07 	lds	r13, 0x075E	; 0x80075e <time_count_1.3176+0x1>
    569a:	e0 90 5f 07 	lds	r14, 0x075F	; 0x80075f <time_count_1.3176+0x2>
    569e:	f0 90 60 07 	lds	r15, 0x0760	; 0x800760 <time_count_1.3176+0x3>
    56a2:	dc 01       	movw	r26, r24
    56a4:	cb 01       	movw	r24, r22
    56a6:	8c 0d       	add	r24, r12
    56a8:	9d 1d       	adc	r25, r13
    56aa:	ae 1d       	adc	r26, r14
    56ac:	bf 1d       	adc	r27, r15
    56ae:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <time_count_1.3176>
    56b2:	90 93 5e 07 	sts	0x075E, r25	; 0x80075e <time_count_1.3176+0x1>
    56b6:	a0 93 5f 07 	sts	0x075F, r26	; 0x80075f <time_count_1.3176+0x2>
    56ba:	b0 93 60 07 	sts	0x0760, r27	; 0x800760 <time_count_1.3176+0x3>
				if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    56be:	0f 90       	pop	r0
    56c0:	0f 90       	pop	r0
    56c2:	0f 90       	pop	r0
    56c4:	0f 90       	pop	r0
    56c6:	81 31       	cpi	r24, 0x11	; 17
    56c8:	9e 40       	sbci	r25, 0x0E	; 14
    56ca:	a1 05       	cpc	r26, r1
    56cc:	b1 05       	cpc	r27, r1
    56ce:	08 f4       	brcc	.+2      	; 0x56d2 <StartReversingValve+0xd2>
    56d0:	42 c0       	rjmp	.+132    	; 0x5756 <StartReversingValve+0x156>
    56d2:	e8 e1       	ldi	r30, 0x18	; 24
    56d4:	f9 e0       	ldi	r31, 0x09	; 9
    56d6:	80 ad       	ldd	r24, Z+56	; 0x38
    56d8:	91 ad       	ldd	r25, Z+57	; 0x39
    56da:	01 96       	adiw	r24, 0x01	; 1
    56dc:	91 af       	std	Z+57, r25	; 0x39
    56de:	80 af       	std	Z+56, r24	; 0x38
    56e0:	40 e6       	ldi	r20, 0x60	; 96
    56e2:	50 e0       	ldi	r21, 0x00	; 0
    56e4:	60 e0       	ldi	r22, 0x00	; 0
    56e6:	70 e0       	ldi	r23, 0x00	; 0
    56e8:	cf 01       	movw	r24, r30
    56ea:	0e 94 73 5d 	call	0xbae6	; 0xbae6 <eeprom_update_block>
    56ee:	10 92 5d 07 	sts	0x075D, r1	; 0x80075d <time_count_1.3176>
    56f2:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <time_count_1.3176+0x1>
    56f6:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <time_count_1.3176+0x2>
    56fa:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <time_count_1.3176+0x3>
    56fe:	2b c0       	rjmp	.+86     	; 0x5756 <StartReversingValve+0x156>
				
				
			}
			else if(PIN_REV_VALVE_1 == 0 && EEpromData.reversMod==0){
    5700:	94 99       	sbic	0x12, 4	; 18
    5702:	29 c0       	rjmp	.+82     	; 0x5756 <StartReversingValve+0x156>
    5704:	80 91 40 09 	lds	r24, 0x0940	; 0x800940 <EEpromData+0x28>
    5708:	81 11       	cpse	r24, r1
    570a:	25 c0       	rjmp	.+74     	; 0x5756 <StartReversingValve+0x156>
				START_REV_VALVE_1;
    570c:	a4 9a       	sbi	0x14, 4	; 20
				Comp_1.revVOn=1;
    570e:	81 e0       	ldi	r24, 0x01	; 1
    5710:	80 93 86 09 	sts	0x0986, r24	; 0x800986 <Comp_1+0xe>
				xSerialxPrintf(&xSerial3Port,"StarRevValve_1\r\n");
    5714:	85 e4       	ldi	r24, 0x45	; 69
    5716:	93 e0       	ldi	r25, 0x03	; 3
    5718:	9f 93       	push	r25
    571a:	8f 93       	push	r24
    571c:	86 eb       	ldi	r24, 0xB6	; 182
    571e:	97 e0       	ldi	r25, 0x07	; 7
    5720:	9f 93       	push	r25
    5722:	8f 93       	push	r24
    5724:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_1=time(&current_time);
    5728:	83 e1       	ldi	r24, 0x13	; 19
    572a:	99 e0       	ldi	r25, 0x09	; 9
    572c:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5730:	60 93 af 0a 	sts	0x0AAF, r22	; 0x800aaf <timeStartRevV_1>
    5734:	70 93 b0 0a 	sts	0x0AB0, r23	; 0x800ab0 <timeStartRevV_1+0x1>
    5738:	80 93 b1 0a 	sts	0x0AB1, r24	; 0x800ab1 <timeStartRevV_1+0x2>
    573c:	90 93 b2 0a 	sts	0x0AB2, r25	; 0x800ab2 <timeStartRevV_1+0x3>
				EEpromData.number_turnon_revers_1+=1;
    5740:	ec e5       	ldi	r30, 0x5C	; 92
    5742:	f9 e0       	ldi	r31, 0x09	; 9
    5744:	80 81       	ld	r24, Z
    5746:	91 81       	ldd	r25, Z+1	; 0x01
    5748:	01 96       	adiw	r24, 0x01	; 1
    574a:	91 83       	std	Z+1, r25	; 0x01
    574c:	80 83       	st	Z, r24
    574e:	0f 90       	pop	r0
    5750:	0f 90       	pop	r0
    5752:	0f 90       	pop	r0
    5754:	0f 90       	pop	r0
			}
		}
		if(Comp_1.heatingWater || Comp_1.Heating)
    5756:	80 91 7c 09 	lds	r24, 0x097C	; 0x80097c <Comp_1+0x4>
    575a:	81 11       	cpse	r24, r1
    575c:	05 c0       	rjmp	.+10     	; 0x5768 <StartReversingValve+0x168>
    575e:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <Comp_1+0x2>
    5762:	88 23       	and	r24, r24
    5764:	09 f4       	brne	.+2      	; 0x5768 <StartReversingValve+0x168>
    5766:	84 c0       	rjmp	.+264    	; 0x5870 <StartReversingValve+0x270>
		{
			
			if(PIN_REV_VALVE_1 > 0 && EEpromData.reversMod==0){//
    5768:	94 9b       	sbis	0x12, 4	; 18
    576a:	58 c0       	rjmp	.+176    	; 0x581c <StartReversingValve+0x21c>
    576c:	80 91 40 09 	lds	r24, 0x0940	; 0x800940 <EEpromData+0x28>
    5770:	81 11       	cpse	r24, r1
    5772:	54 c0       	rjmp	.+168    	; 0x581c <StartReversingValve+0x21c>
				
				STOP_REV_VALVE_1;
    5774:	a4 98       	cbi	0x14, 4	; 20
				
				xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    5776:	84 e3       	ldi	r24, 0x34	; 52
    5778:	93 e0       	ldi	r25, 0x03	; 3
    577a:	9f 93       	push	r25
    577c:	8f 93       	push	r24
    577e:	86 eb       	ldi	r24, 0xB6	; 182
    5780:	97 e0       	ldi	r25, 0x07	; 7
    5782:	9f 93       	push	r25
    5784:	8f 93       	push	r24
    5786:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_1.revVOn=0;
    578a:	10 92 86 09 	sts	0x0986, r1	; 0x800986 <Comp_1+0xe>
				time_count_1+= difftime(time(&current_time), timeStartRevV_1);
    578e:	c0 90 af 0a 	lds	r12, 0x0AAF	; 0x800aaf <timeStartRevV_1>
    5792:	d0 90 b0 0a 	lds	r13, 0x0AB0	; 0x800ab0 <timeStartRevV_1+0x1>
    5796:	e0 90 b1 0a 	lds	r14, 0x0AB1	; 0x800ab1 <timeStartRevV_1+0x2>
    579a:	f0 90 b2 0a 	lds	r15, 0x0AB2	; 0x800ab2 <timeStartRevV_1+0x3>
    579e:	83 e1       	ldi	r24, 0x13	; 19
    57a0:	99 e0       	ldi	r25, 0x09	; 9
    57a2:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    57a6:	a7 01       	movw	r20, r14
    57a8:	96 01       	movw	r18, r12
    57aa:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    57ae:	c0 90 5d 07 	lds	r12, 0x075D	; 0x80075d <time_count_1.3176>
    57b2:	d0 90 5e 07 	lds	r13, 0x075E	; 0x80075e <time_count_1.3176+0x1>
    57b6:	e0 90 5f 07 	lds	r14, 0x075F	; 0x80075f <time_count_1.3176+0x2>
    57ba:	f0 90 60 07 	lds	r15, 0x0760	; 0x800760 <time_count_1.3176+0x3>
    57be:	dc 01       	movw	r26, r24
    57c0:	cb 01       	movw	r24, r22
    57c2:	8c 0d       	add	r24, r12
    57c4:	9d 1d       	adc	r25, r13
    57c6:	ae 1d       	adc	r26, r14
    57c8:	bf 1d       	adc	r27, r15
    57ca:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <time_count_1.3176>
    57ce:	90 93 5e 07 	sts	0x075E, r25	; 0x80075e <time_count_1.3176+0x1>
    57d2:	a0 93 5f 07 	sts	0x075F, r26	; 0x80075f <time_count_1.3176+0x2>
    57d6:	b0 93 60 07 	sts	0x0760, r27	; 0x800760 <time_count_1.3176+0x3>
				if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    57da:	0f 90       	pop	r0
    57dc:	0f 90       	pop	r0
    57de:	0f 90       	pop	r0
    57e0:	0f 90       	pop	r0
    57e2:	81 31       	cpi	r24, 0x11	; 17
    57e4:	9e 40       	sbci	r25, 0x0E	; 14
    57e6:	a1 05       	cpc	r26, r1
    57e8:	b1 05       	cpc	r27, r1
    57ea:	08 f4       	brcc	.+2      	; 0x57ee <StartReversingValve+0x1ee>
    57ec:	41 c0       	rjmp	.+130    	; 0x5870 <StartReversingValve+0x270>
    57ee:	e8 e1       	ldi	r30, 0x18	; 24
    57f0:	f9 e0       	ldi	r31, 0x09	; 9
    57f2:	80 ad       	ldd	r24, Z+56	; 0x38
    57f4:	91 ad       	ldd	r25, Z+57	; 0x39
    57f6:	01 96       	adiw	r24, 0x01	; 1
    57f8:	91 af       	std	Z+57, r25	; 0x39
    57fa:	80 af       	std	Z+56, r24	; 0x38
    57fc:	40 e6       	ldi	r20, 0x60	; 96
    57fe:	50 e0       	ldi	r21, 0x00	; 0
    5800:	60 e0       	ldi	r22, 0x00	; 0
    5802:	70 e0       	ldi	r23, 0x00	; 0
    5804:	cf 01       	movw	r24, r30
    5806:	0e 94 73 5d 	call	0xbae6	; 0xbae6 <eeprom_update_block>
    580a:	10 92 5d 07 	sts	0x075D, r1	; 0x80075d <time_count_1.3176>
    580e:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <time_count_1.3176+0x1>
    5812:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <time_count_1.3176+0x2>
    5816:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <time_count_1.3176+0x3>
    581a:	2a c0       	rjmp	.+84     	; 0x5870 <StartReversingValve+0x270>
				
			}
			else if(PIN_REV_VALVE_1 == 0 && EEpromData.reversMod==1){
    581c:	94 99       	sbic	0x12, 4	; 18
    581e:	28 c0       	rjmp	.+80     	; 0x5870 <StartReversingValve+0x270>
    5820:	80 91 40 09 	lds	r24, 0x0940	; 0x800940 <EEpromData+0x28>
    5824:	81 30       	cpi	r24, 0x01	; 1
    5826:	21 f5       	brne	.+72     	; 0x5870 <StartReversingValve+0x270>
				START_REV_VALVE_1;
    5828:	a4 9a       	sbi	0x14, 4	; 20
				Comp_1.revVOn=1;
    582a:	80 93 86 09 	sts	0x0986, r24	; 0x800986 <Comp_1+0xe>
				xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    582e:	84 e3       	ldi	r24, 0x34	; 52
    5830:	93 e0       	ldi	r25, 0x03	; 3
    5832:	9f 93       	push	r25
    5834:	8f 93       	push	r24
    5836:	86 eb       	ldi	r24, 0xB6	; 182
    5838:	97 e0       	ldi	r25, 0x07	; 7
    583a:	9f 93       	push	r25
    583c:	8f 93       	push	r24
    583e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_1=time(&current_time);
    5842:	83 e1       	ldi	r24, 0x13	; 19
    5844:	99 e0       	ldi	r25, 0x09	; 9
    5846:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    584a:	60 93 af 0a 	sts	0x0AAF, r22	; 0x800aaf <timeStartRevV_1>
    584e:	70 93 b0 0a 	sts	0x0AB0, r23	; 0x800ab0 <timeStartRevV_1+0x1>
    5852:	80 93 b1 0a 	sts	0x0AB1, r24	; 0x800ab1 <timeStartRevV_1+0x2>
    5856:	90 93 b2 0a 	sts	0x0AB2, r25	; 0x800ab2 <timeStartRevV_1+0x3>
				EEpromData.number_turnon_revers_1+=1;
    585a:	ec e5       	ldi	r30, 0x5C	; 92
    585c:	f9 e0       	ldi	r31, 0x09	; 9
    585e:	80 81       	ld	r24, Z
    5860:	91 81       	ldd	r25, Z+1	; 0x01
    5862:	01 96       	adiw	r24, 0x01	; 1
    5864:	91 83       	std	Z+1, r25	; 0x01
    5866:	80 83       	st	Z, r24
    5868:	0f 90       	pop	r0
    586a:	0f 90       	pop	r0
    586c:	0f 90       	pop	r0
    586e:	0f 90       	pop	r0
			}
		}
		
		xTimerChangePeriod( xStartThreeWay,period, 100 );
    5870:	0f 2e       	mov	r0, r31
    5872:	f4 e6       	ldi	r31, 0x64	; 100
    5874:	cf 2e       	mov	r12, r31
    5876:	d1 2c       	mov	r13, r1
    5878:	e1 2c       	mov	r14, r1
    587a:	f1 2c       	mov	r15, r1
    587c:	f0 2d       	mov	r31, r0
    587e:	00 e0       	ldi	r16, 0x00	; 0
    5880:	10 e0       	ldi	r17, 0x00	; 0
    5882:	a5 01       	movw	r20, r10
    5884:	94 01       	movw	r18, r8
    5886:	64 e0       	ldi	r22, 0x04	; 4
    5888:	80 91 f0 09 	lds	r24, 0x09F0	; 0x8009f0 <xStartThreeWay>
    588c:	90 91 f1 09 	lds	r25, 0x09F1	; 0x8009f1 <xStartThreeWay+0x1>
    5890:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    5894:	34 c1       	rjmp	.+616    	; 0x5afe <StartReversingValve+0x4fe>
		
	}
	else if((*pxTimerID) == uxStartDelayRevVTimer_2_ID)
    5896:	81 31       	cpi	r24, 0x11	; 17
    5898:	09 f0       	breq	.+2      	; 0x589c <StartReversingValve+0x29c>
    589a:	31 c1       	rjmp	.+610    	; 0x5afe <StartReversingValve+0x4fe>
	{
		period=(TickType_t)EEpromData.HeatingPump_delay;
    589c:	20 91 1b 09 	lds	r18, 0x091B	; 0x80091b <EEpromData+0x3>
		period*=1000;
    58a0:	30 e0       	ldi	r19, 0x00	; 0
    58a2:	a8 ee       	ldi	r26, 0xE8	; 232
    58a4:	b3 e0       	ldi	r27, 0x03	; 3
    58a6:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    58aa:	4b 01       	movw	r8, r22
    58ac:	5c 01       	movw	r10, r24
		
		if(Comp_2.Cooling)
    58ae:	80 91 05 0a 	lds	r24, 0x0A05	; 0x800a05 <Comp_2+0x3>
    58b2:	88 23       	and	r24, r24
    58b4:	09 f4       	brne	.+2      	; 0x58b8 <StartReversingValve+0x2b8>
    58b6:	87 c0       	rjmp	.+270    	; 0x59c6 <StartReversingValve+0x3c6>
		{
			if(PIN_REV_VALVE_2 >0 && EEpromData.reversMod==1){
    58b8:	93 9b       	sbis	0x12, 3	; 18
    58ba:	5a c0       	rjmp	.+180    	; 0x5970 <StartReversingValve+0x370>
    58bc:	80 91 40 09 	lds	r24, 0x0940	; 0x800940 <EEpromData+0x28>
    58c0:	81 30       	cpi	r24, 0x01	; 1
    58c2:	09 f0       	breq	.+2      	; 0x58c6 <StartReversingValve+0x2c6>
    58c4:	55 c0       	rjmp	.+170    	; 0x5970 <StartReversingValve+0x370>
				
				STOP_REV_VALVE_2;//
    58c6:	a3 98       	cbi	0x14, 3	; 20
				
				xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    58c8:	86 e5       	ldi	r24, 0x56	; 86
    58ca:	93 e0       	ldi	r25, 0x03	; 3
    58cc:	9f 93       	push	r25
    58ce:	8f 93       	push	r24
    58d0:	86 eb       	ldi	r24, 0xB6	; 182
    58d2:	97 e0       	ldi	r25, 0x07	; 7
    58d4:	9f 93       	push	r25
    58d6:	8f 93       	push	r24
    58d8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_2.revVOn=0;
    58dc:	10 92 10 0a 	sts	0x0A10, r1	; 0x800a10 <Comp_2+0xe>
				time_count_2+= difftime(time(&current_time), timeStartRevV_2);
    58e0:	c0 90 ca 0a 	lds	r12, 0x0ACA	; 0x800aca <timeStartRevV_2>
    58e4:	d0 90 cb 0a 	lds	r13, 0x0ACB	; 0x800acb <timeStartRevV_2+0x1>
    58e8:	e0 90 cc 0a 	lds	r14, 0x0ACC	; 0x800acc <timeStartRevV_2+0x2>
    58ec:	f0 90 cd 0a 	lds	r15, 0x0ACD	; 0x800acd <timeStartRevV_2+0x3>
    58f0:	83 e1       	ldi	r24, 0x13	; 19
    58f2:	99 e0       	ldi	r25, 0x09	; 9
    58f4:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    58f8:	a7 01       	movw	r20, r14
    58fa:	96 01       	movw	r18, r12
    58fc:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5900:	c0 90 59 07 	lds	r12, 0x0759	; 0x800759 <time_count_2.3177>
    5904:	d0 90 5a 07 	lds	r13, 0x075A	; 0x80075a <time_count_2.3177+0x1>
    5908:	e0 90 5b 07 	lds	r14, 0x075B	; 0x80075b <time_count_2.3177+0x2>
    590c:	f0 90 5c 07 	lds	r15, 0x075C	; 0x80075c <time_count_2.3177+0x3>
    5910:	dc 01       	movw	r26, r24
    5912:	cb 01       	movw	r24, r22
    5914:	8c 0d       	add	r24, r12
    5916:	9d 1d       	adc	r25, r13
    5918:	ae 1d       	adc	r26, r14
    591a:	bf 1d       	adc	r27, r15
    591c:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <time_count_2.3177>
    5920:	90 93 5a 07 	sts	0x075A, r25	; 0x80075a <time_count_2.3177+0x1>
    5924:	a0 93 5b 07 	sts	0x075B, r26	; 0x80075b <time_count_2.3177+0x2>
    5928:	b0 93 5c 07 	sts	0x075C, r27	; 0x80075c <time_count_2.3177+0x3>
				if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    592c:	0f 90       	pop	r0
    592e:	0f 90       	pop	r0
    5930:	0f 90       	pop	r0
    5932:	0f 90       	pop	r0
    5934:	81 31       	cpi	r24, 0x11	; 17
    5936:	9e 40       	sbci	r25, 0x0E	; 14
    5938:	a1 05       	cpc	r26, r1
    593a:	b1 05       	cpc	r27, r1
    593c:	08 f4       	brcc	.+2      	; 0x5940 <StartReversingValve+0x340>
    593e:	43 c0       	rjmp	.+134    	; 0x59c6 <StartReversingValve+0x3c6>
    5940:	e6 e6       	ldi	r30, 0x66	; 102
    5942:	f9 e0       	ldi	r31, 0x09	; 9
    5944:	80 81       	ld	r24, Z
    5946:	91 81       	ldd	r25, Z+1	; 0x01
    5948:	01 96       	adiw	r24, 0x01	; 1
    594a:	91 83       	std	Z+1, r25	; 0x01
    594c:	80 83       	st	Z, r24
    594e:	40 e6       	ldi	r20, 0x60	; 96
    5950:	50 e0       	ldi	r21, 0x00	; 0
    5952:	60 e0       	ldi	r22, 0x00	; 0
    5954:	70 e0       	ldi	r23, 0x00	; 0
    5956:	88 e1       	ldi	r24, 0x18	; 24
    5958:	99 e0       	ldi	r25, 0x09	; 9
    595a:	0e 94 73 5d 	call	0xbae6	; 0xbae6 <eeprom_update_block>
    595e:	10 92 59 07 	sts	0x0759, r1	; 0x800759 <time_count_2.3177>
    5962:	10 92 5a 07 	sts	0x075A, r1	; 0x80075a <time_count_2.3177+0x1>
    5966:	10 92 5b 07 	sts	0x075B, r1	; 0x80075b <time_count_2.3177+0x2>
    596a:	10 92 5c 07 	sts	0x075C, r1	; 0x80075c <time_count_2.3177+0x3>
    596e:	2b c0       	rjmp	.+86     	; 0x59c6 <StartReversingValve+0x3c6>
				
				
			}
			else if(PIN_REV_VALVE_2 == 0 && EEpromData.reversMod==0){
    5970:	93 99       	sbic	0x12, 3	; 18
    5972:	29 c0       	rjmp	.+82     	; 0x59c6 <StartReversingValve+0x3c6>
    5974:	80 91 40 09 	lds	r24, 0x0940	; 0x800940 <EEpromData+0x28>
    5978:	81 11       	cpse	r24, r1
    597a:	25 c0       	rjmp	.+74     	; 0x59c6 <StartReversingValve+0x3c6>
				START_REV_VALVE_2;
    597c:	a3 9a       	sbi	0x14, 3	; 20
				Comp_1.revVOn=1;
    597e:	81 e0       	ldi	r24, 0x01	; 1
    5980:	80 93 86 09 	sts	0x0986, r24	; 0x800986 <Comp_1+0xe>
				xSerialxPrintf(&xSerial3Port,"StarRevValve_2\r\n");
    5984:	87 e6       	ldi	r24, 0x67	; 103
    5986:	93 e0       	ldi	r25, 0x03	; 3
    5988:	9f 93       	push	r25
    598a:	8f 93       	push	r24
    598c:	86 eb       	ldi	r24, 0xB6	; 182
    598e:	97 e0       	ldi	r25, 0x07	; 7
    5990:	9f 93       	push	r25
    5992:	8f 93       	push	r24
    5994:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_2=time(&current_time);
    5998:	83 e1       	ldi	r24, 0x13	; 19
    599a:	99 e0       	ldi	r25, 0x09	; 9
    599c:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    59a0:	60 93 ca 0a 	sts	0x0ACA, r22	; 0x800aca <timeStartRevV_2>
    59a4:	70 93 cb 0a 	sts	0x0ACB, r23	; 0x800acb <timeStartRevV_2+0x1>
    59a8:	80 93 cc 0a 	sts	0x0ACC, r24	; 0x800acc <timeStartRevV_2+0x2>
    59ac:	90 93 cd 0a 	sts	0x0ACD, r25	; 0x800acd <timeStartRevV_2+0x3>
				EEpromData.number_turnon_revers_2+=1;
    59b0:	e0 e7       	ldi	r30, 0x70	; 112
    59b2:	f9 e0       	ldi	r31, 0x09	; 9
    59b4:	80 81       	ld	r24, Z
    59b6:	91 81       	ldd	r25, Z+1	; 0x01
    59b8:	01 96       	adiw	r24, 0x01	; 1
    59ba:	91 83       	std	Z+1, r25	; 0x01
    59bc:	80 83       	st	Z, r24
    59be:	0f 90       	pop	r0
    59c0:	0f 90       	pop	r0
    59c2:	0f 90       	pop	r0
    59c4:	0f 90       	pop	r0
			}
		}
		if(Comp_2.Heating)
    59c6:	80 91 04 0a 	lds	r24, 0x0A04	; 0x800a04 <Comp_2+0x2>
    59ca:	88 23       	and	r24, r24
    59cc:	09 f4       	brne	.+2      	; 0x59d0 <StartReversingValve+0x3d0>
    59ce:	85 c0       	rjmp	.+266    	; 0x5ada <StartReversingValve+0x4da>
		{
			if(PIN_REV_VALVE_2 > 0 && EEpromData.reversMod==0){//
    59d0:	93 9b       	sbis	0x12, 3	; 18
    59d2:	59 c0       	rjmp	.+178    	; 0x5a86 <StartReversingValve+0x486>
    59d4:	80 91 40 09 	lds	r24, 0x0940	; 0x800940 <EEpromData+0x28>
    59d8:	81 11       	cpse	r24, r1
    59da:	55 c0       	rjmp	.+170    	; 0x5a86 <StartReversingValve+0x486>
				
				STOP_REV_VALVE_2;
    59dc:	a3 98       	cbi	0x14, 3	; 20
				
				xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    59de:	86 e5       	ldi	r24, 0x56	; 86
    59e0:	93 e0       	ldi	r25, 0x03	; 3
    59e2:	9f 93       	push	r25
    59e4:	8f 93       	push	r24
    59e6:	86 eb       	ldi	r24, 0xB6	; 182
    59e8:	97 e0       	ldi	r25, 0x07	; 7
    59ea:	9f 93       	push	r25
    59ec:	8f 93       	push	r24
    59ee:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_2.revVOn=0;
    59f2:	10 92 10 0a 	sts	0x0A10, r1	; 0x800a10 <Comp_2+0xe>
				time_count_2+= difftime(time(&current_time), timeStartRevV_2);
    59f6:	c0 90 ca 0a 	lds	r12, 0x0ACA	; 0x800aca <timeStartRevV_2>
    59fa:	d0 90 cb 0a 	lds	r13, 0x0ACB	; 0x800acb <timeStartRevV_2+0x1>
    59fe:	e0 90 cc 0a 	lds	r14, 0x0ACC	; 0x800acc <timeStartRevV_2+0x2>
    5a02:	f0 90 cd 0a 	lds	r15, 0x0ACD	; 0x800acd <timeStartRevV_2+0x3>
    5a06:	83 e1       	ldi	r24, 0x13	; 19
    5a08:	99 e0       	ldi	r25, 0x09	; 9
    5a0a:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5a0e:	a7 01       	movw	r20, r14
    5a10:	96 01       	movw	r18, r12
    5a12:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5a16:	c0 90 59 07 	lds	r12, 0x0759	; 0x800759 <time_count_2.3177>
    5a1a:	d0 90 5a 07 	lds	r13, 0x075A	; 0x80075a <time_count_2.3177+0x1>
    5a1e:	e0 90 5b 07 	lds	r14, 0x075B	; 0x80075b <time_count_2.3177+0x2>
    5a22:	f0 90 5c 07 	lds	r15, 0x075C	; 0x80075c <time_count_2.3177+0x3>
    5a26:	dc 01       	movw	r26, r24
    5a28:	cb 01       	movw	r24, r22
    5a2a:	8c 0d       	add	r24, r12
    5a2c:	9d 1d       	adc	r25, r13
    5a2e:	ae 1d       	adc	r26, r14
    5a30:	bf 1d       	adc	r27, r15
    5a32:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <time_count_2.3177>
    5a36:	90 93 5a 07 	sts	0x075A, r25	; 0x80075a <time_count_2.3177+0x1>
    5a3a:	a0 93 5b 07 	sts	0x075B, r26	; 0x80075b <time_count_2.3177+0x2>
    5a3e:	b0 93 5c 07 	sts	0x075C, r27	; 0x80075c <time_count_2.3177+0x3>
				if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    5a42:	0f 90       	pop	r0
    5a44:	0f 90       	pop	r0
    5a46:	0f 90       	pop	r0
    5a48:	0f 90       	pop	r0
    5a4a:	81 31       	cpi	r24, 0x11	; 17
    5a4c:	9e 40       	sbci	r25, 0x0E	; 14
    5a4e:	a1 05       	cpc	r26, r1
    5a50:	b1 05       	cpc	r27, r1
    5a52:	08 f4       	brcc	.+2      	; 0x5a56 <StartReversingValve+0x456>
    5a54:	42 c0       	rjmp	.+132    	; 0x5ada <StartReversingValve+0x4da>
    5a56:	e6 e6       	ldi	r30, 0x66	; 102
    5a58:	f9 e0       	ldi	r31, 0x09	; 9
    5a5a:	80 81       	ld	r24, Z
    5a5c:	91 81       	ldd	r25, Z+1	; 0x01
    5a5e:	01 96       	adiw	r24, 0x01	; 1
    5a60:	91 83       	std	Z+1, r25	; 0x01
    5a62:	80 83       	st	Z, r24
    5a64:	40 e6       	ldi	r20, 0x60	; 96
    5a66:	50 e0       	ldi	r21, 0x00	; 0
    5a68:	60 e0       	ldi	r22, 0x00	; 0
    5a6a:	70 e0       	ldi	r23, 0x00	; 0
    5a6c:	88 e1       	ldi	r24, 0x18	; 24
    5a6e:	99 e0       	ldi	r25, 0x09	; 9
    5a70:	0e 94 73 5d 	call	0xbae6	; 0xbae6 <eeprom_update_block>
    5a74:	10 92 59 07 	sts	0x0759, r1	; 0x800759 <time_count_2.3177>
    5a78:	10 92 5a 07 	sts	0x075A, r1	; 0x80075a <time_count_2.3177+0x1>
    5a7c:	10 92 5b 07 	sts	0x075B, r1	; 0x80075b <time_count_2.3177+0x2>
    5a80:	10 92 5c 07 	sts	0x075C, r1	; 0x80075c <time_count_2.3177+0x3>
    5a84:	2a c0       	rjmp	.+84     	; 0x5ada <StartReversingValve+0x4da>
				
			}
			else if(PIN_REV_VALVE_2 == 0 && EEpromData.reversMod==1){
    5a86:	93 99       	sbic	0x12, 3	; 18
    5a88:	28 c0       	rjmp	.+80     	; 0x5ada <StartReversingValve+0x4da>
    5a8a:	80 91 40 09 	lds	r24, 0x0940	; 0x800940 <EEpromData+0x28>
    5a8e:	81 30       	cpi	r24, 0x01	; 1
    5a90:	21 f5       	brne	.+72     	; 0x5ada <StartReversingValve+0x4da>
				START_REV_VALVE_2;
    5a92:	a3 9a       	sbi	0x14, 3	; 20
				Comp_2.revVOn=1;
    5a94:	80 93 10 0a 	sts	0x0A10, r24	; 0x800a10 <Comp_2+0xe>
				xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    5a98:	86 e5       	ldi	r24, 0x56	; 86
    5a9a:	93 e0       	ldi	r25, 0x03	; 3
    5a9c:	9f 93       	push	r25
    5a9e:	8f 93       	push	r24
    5aa0:	86 eb       	ldi	r24, 0xB6	; 182
    5aa2:	97 e0       	ldi	r25, 0x07	; 7
    5aa4:	9f 93       	push	r25
    5aa6:	8f 93       	push	r24
    5aa8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_2=time(&current_time);
    5aac:	83 e1       	ldi	r24, 0x13	; 19
    5aae:	99 e0       	ldi	r25, 0x09	; 9
    5ab0:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5ab4:	60 93 ca 0a 	sts	0x0ACA, r22	; 0x800aca <timeStartRevV_2>
    5ab8:	70 93 cb 0a 	sts	0x0ACB, r23	; 0x800acb <timeStartRevV_2+0x1>
    5abc:	80 93 cc 0a 	sts	0x0ACC, r24	; 0x800acc <timeStartRevV_2+0x2>
    5ac0:	90 93 cd 0a 	sts	0x0ACD, r25	; 0x800acd <timeStartRevV_2+0x3>
				EEpromData.number_turnon_revers_2+=1;
    5ac4:	e0 e7       	ldi	r30, 0x70	; 112
    5ac6:	f9 e0       	ldi	r31, 0x09	; 9
    5ac8:	80 81       	ld	r24, Z
    5aca:	91 81       	ldd	r25, Z+1	; 0x01
    5acc:	01 96       	adiw	r24, 0x01	; 1
    5ace:	91 83       	std	Z+1, r25	; 0x01
    5ad0:	80 83       	st	Z, r24
    5ad2:	0f 90       	pop	r0
    5ad4:	0f 90       	pop	r0
    5ad6:	0f 90       	pop	r0
    5ad8:	0f 90       	pop	r0
			}
		}

		xTimerChangePeriod( xStartHeatPump_2,period, 100 );
    5ada:	0f 2e       	mov	r0, r31
    5adc:	f4 e6       	ldi	r31, 0x64	; 100
    5ade:	cf 2e       	mov	r12, r31
    5ae0:	d1 2c       	mov	r13, r1
    5ae2:	e1 2c       	mov	r14, r1
    5ae4:	f1 2c       	mov	r15, r1
    5ae6:	f0 2d       	mov	r31, r0
    5ae8:	00 e0       	ldi	r16, 0x00	; 0
    5aea:	10 e0       	ldi	r17, 0x00	; 0
    5aec:	a5 01       	movw	r20, r10
    5aee:	94 01       	movw	r18, r8
    5af0:	64 e0       	ldi	r22, 0x04	; 4
    5af2:	80 91 f2 09 	lds	r24, 0x09F2	; 0x8009f2 <xStartHeatPump_2>
    5af6:	90 91 f3 09 	lds	r25, 0x09F3	; 0x8009f3 <xStartHeatPump_2+0x1>
    5afa:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}


}
    5afe:	1f 91       	pop	r17
    5b00:	0f 91       	pop	r16
    5b02:	ff 90       	pop	r15
    5b04:	ef 90       	pop	r14
    5b06:	df 90       	pop	r13
    5b08:	cf 90       	pop	r12
    5b0a:	bf 90       	pop	r11
    5b0c:	af 90       	pop	r10
    5b0e:	9f 90       	pop	r9
    5b10:	8f 90       	pop	r8
    5b12:	08 95       	ret

00005b14 <StartThreeWay>:
//------------------------------------------------
void StartThreeWay()
{
    5b14:	8f 92       	push	r8
    5b16:	9f 92       	push	r9
    5b18:	af 92       	push	r10
    5b1a:	bf 92       	push	r11
    5b1c:	cf 92       	push	r12
    5b1e:	df 92       	push	r13
    5b20:	ef 92       	push	r14
    5b22:	ff 92       	push	r15
    5b24:	0f 93       	push	r16
    5b26:	1f 93       	push	r17
	static time_t time_count;
    TickType_t period;
	
	
	period=(TickType_t)EEpromData.HeatingPump_delay;
    5b28:	20 91 1b 09 	lds	r18, 0x091B	; 0x80091b <EEpromData+0x3>
	period*=1000;
    5b2c:	30 e0       	ldi	r19, 0x00	; 0
    5b2e:	a8 ee       	ldi	r26, 0xE8	; 232
    5b30:	b3 e0       	ldi	r27, 0x03	; 3
    5b32:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    5b36:	4b 01       	movw	r8, r22
    5b38:	5c 01       	movw	r10, r24
	xSerialxPrintf(&xSerial3Port,"StartThreeWay\r\n");
    5b3a:	88 e7       	ldi	r24, 0x78	; 120
    5b3c:	93 e0       	ldi	r25, 0x03	; 3
    5b3e:	9f 93       	push	r25
    5b40:	8f 93       	push	r24
    5b42:	86 eb       	ldi	r24, 0xB6	; 182
    5b44:	97 e0       	ldi	r25, 0x07	; 7
    5b46:	9f 93       	push	r25
    5b48:	8f 93       	push	r24
    5b4a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(Comp_1.heatingWater)
    5b4e:	0f 90       	pop	r0
    5b50:	0f 90       	pop	r0
    5b52:	0f 90       	pop	r0
    5b54:	0f 90       	pop	r0
    5b56:	80 91 7c 09 	lds	r24, 0x097C	; 0x80097c <Comp_1+0x4>
    5b5a:	88 23       	and	r24, r24
    5b5c:	71 f1       	breq	.+92     	; 0x5bba <StartThreeWay+0xa6>
	{
		
		if(PIN_THWAY_VALVE == 0)//
    5b5e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5b62:	88 23       	and	r24, r24
    5b64:	e4 f0       	brlt	.+56     	; 0x5b9e <StartThreeWay+0x8a>
		{
			START_THWAY_VALVE;
    5b66:	e2 e0       	ldi	r30, 0x02	; 2
    5b68:	f1 e0       	ldi	r31, 0x01	; 1
    5b6a:	80 81       	ld	r24, Z
    5b6c:	80 68       	ori	r24, 0x80	; 128
    5b6e:	80 83       	st	Z, r24
			
			//xSerialxPrintf(&xSerial3Port,"StartThreeWay\r\n");
			Comp_1.threeWOn=1;
    5b70:	81 e0       	ldi	r24, 0x01	; 1
    5b72:	80 93 85 09 	sts	0x0985, r24	; 0x800985 <Comp_1+0xd>
			timeStartThreeW=time(&current_time);
    5b76:	83 e1       	ldi	r24, 0x13	; 19
    5b78:	99 e0       	ldi	r25, 0x09	; 9
    5b7a:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5b7e:	60 93 a4 0a 	sts	0x0AA4, r22	; 0x800aa4 <timeStartThreeW>
    5b82:	70 93 a5 0a 	sts	0x0AA5, r23	; 0x800aa5 <timeStartThreeW+0x1>
    5b86:	80 93 a6 0a 	sts	0x0AA6, r24	; 0x800aa6 <timeStartThreeW+0x2>
    5b8a:	90 93 a7 0a 	sts	0x0AA7, r25	; 0x800aa7 <timeStartThreeW+0x3>
			EEpromData.number_turnon_threeway+=1;
    5b8e:	ee e5       	ldi	r30, 0x5E	; 94
    5b90:	f9 e0       	ldi	r31, 0x09	; 9
    5b92:	80 81       	ld	r24, Z
    5b94:	91 81       	ldd	r25, Z+1	; 0x01
    5b96:	01 96       	adiw	r24, 0x01	; 1
    5b98:	91 83       	std	Z+1, r25	; 0x01
    5b9a:	80 83       	st	Z, r24
    5b9c:	0e c0       	rjmp	.+28     	; 0x5bba <StartThreeWay+0xa6>
			
		} else xSerialxPrintf(&xSerial3Port,"StopThreeWay\r\n");
    5b9e:	88 e8       	ldi	r24, 0x88	; 136
    5ba0:	93 e0       	ldi	r25, 0x03	; 3
    5ba2:	9f 93       	push	r25
    5ba4:	8f 93       	push	r24
    5ba6:	86 eb       	ldi	r24, 0xB6	; 182
    5ba8:	97 e0       	ldi	r25, 0x07	; 7
    5baa:	9f 93       	push	r25
    5bac:	8f 93       	push	r24
    5bae:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    5bb2:	0f 90       	pop	r0
    5bb4:	0f 90       	pop	r0
    5bb6:	0f 90       	pop	r0
    5bb8:	0f 90       	pop	r0
	}
	if(Comp_1.Heating || Comp_1.Cooling)
    5bba:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <Comp_1+0x2>
    5bbe:	81 11       	cpse	r24, r1
    5bc0:	05 c0       	rjmp	.+10     	; 0x5bcc <StartThreeWay+0xb8>
    5bc2:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <Comp_1+0x3>
    5bc6:	88 23       	and	r24, r24
    5bc8:	09 f4       	brne	.+2      	; 0x5bcc <StartThreeWay+0xb8>
    5bca:	4d c0       	rjmp	.+154    	; 0x5c66 <StartThreeWay+0x152>
	{
		if(PIN_THWAY_VALVE > 0)//
    5bcc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5bd0:	88 23       	and	r24, r24
    5bd2:	0c f0       	brlt	.+2      	; 0x5bd6 <StartThreeWay+0xc2>
    5bd4:	48 c0       	rjmp	.+144    	; 0x5c66 <StartThreeWay+0x152>
		{
			STOP_THWAY_VALVE;
    5bd6:	e2 e0       	ldi	r30, 0x02	; 2
    5bd8:	f1 e0       	ldi	r31, 0x01	; 1
    5bda:	80 81       	ld	r24, Z
    5bdc:	8f 77       	andi	r24, 0x7F	; 127
    5bde:	80 83       	st	Z, r24
			
			//xSerialxPrintf(&xSerial3Port,"StopThreeWay\r\n");
			Comp_1.threeWOn=0;
    5be0:	10 92 85 09 	sts	0x0985, r1	; 0x800985 <Comp_1+0xd>
			time_count+= difftime(time(&current_time), timeStartThreeW);
    5be4:	c0 90 a4 0a 	lds	r12, 0x0AA4	; 0x800aa4 <timeStartThreeW>
    5be8:	d0 90 a5 0a 	lds	r13, 0x0AA5	; 0x800aa5 <timeStartThreeW+0x1>
    5bec:	e0 90 a6 0a 	lds	r14, 0x0AA6	; 0x800aa6 <timeStartThreeW+0x2>
    5bf0:	f0 90 a7 0a 	lds	r15, 0x0AA7	; 0x800aa7 <timeStartThreeW+0x3>
    5bf4:	83 e1       	ldi	r24, 0x13	; 19
    5bf6:	99 e0       	ldi	r25, 0x09	; 9
    5bf8:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5bfc:	a7 01       	movw	r20, r14
    5bfe:	96 01       	movw	r18, r12
    5c00:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5c04:	c0 90 55 07 	lds	r12, 0x0755	; 0x800755 <time_count.3181>
    5c08:	d0 90 56 07 	lds	r13, 0x0756	; 0x800756 <time_count.3181+0x1>
    5c0c:	e0 90 57 07 	lds	r14, 0x0757	; 0x800757 <time_count.3181+0x2>
    5c10:	f0 90 58 07 	lds	r15, 0x0758	; 0x800758 <time_count.3181+0x3>
    5c14:	dc 01       	movw	r26, r24
    5c16:	cb 01       	movw	r24, r22
    5c18:	8c 0d       	add	r24, r12
    5c1a:	9d 1d       	adc	r25, r13
    5c1c:	ae 1d       	adc	r26, r14
    5c1e:	bf 1d       	adc	r27, r15
    5c20:	80 93 55 07 	sts	0x0755, r24	; 0x800755 <time_count.3181>
    5c24:	90 93 56 07 	sts	0x0756, r25	; 0x800756 <time_count.3181+0x1>
    5c28:	a0 93 57 07 	sts	0x0757, r26	; 0x800757 <time_count.3181+0x2>
    5c2c:	b0 93 58 07 	sts	0x0758, r27	; 0x800758 <time_count.3181+0x3>
			if(time_count>ONE_HOUR){EEpromData.time_threeway++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count=0;}
    5c30:	81 31       	cpi	r24, 0x11	; 17
    5c32:	9e 40       	sbci	r25, 0x0E	; 14
    5c34:	a1 05       	cpc	r26, r1
    5c36:	b1 05       	cpc	r27, r1
    5c38:	b0 f0       	brcs	.+44     	; 0x5c66 <StartThreeWay+0x152>
    5c3a:	e8 e1       	ldi	r30, 0x18	; 24
    5c3c:	f9 e0       	ldi	r31, 0x09	; 9
    5c3e:	84 ad       	ldd	r24, Z+60	; 0x3c
    5c40:	95 ad       	ldd	r25, Z+61	; 0x3d
    5c42:	01 96       	adiw	r24, 0x01	; 1
    5c44:	95 af       	std	Z+61, r25	; 0x3d
    5c46:	84 af       	std	Z+60, r24	; 0x3c
    5c48:	40 e6       	ldi	r20, 0x60	; 96
    5c4a:	50 e0       	ldi	r21, 0x00	; 0
    5c4c:	60 e0       	ldi	r22, 0x00	; 0
    5c4e:	70 e0       	ldi	r23, 0x00	; 0
    5c50:	cf 01       	movw	r24, r30
    5c52:	0e 94 73 5d 	call	0xbae6	; 0xbae6 <eeprom_update_block>
    5c56:	10 92 55 07 	sts	0x0755, r1	; 0x800755 <time_count.3181>
    5c5a:	10 92 56 07 	sts	0x0756, r1	; 0x800756 <time_count.3181+0x1>
    5c5e:	10 92 57 07 	sts	0x0757, r1	; 0x800757 <time_count.3181+0x2>
    5c62:	10 92 58 07 	sts	0x0758, r1	; 0x800758 <time_count.3181+0x3>
		}
	}
	
	xTimerChangePeriod( xStartHeatPump_1,period, 100 );
    5c66:	0f 2e       	mov	r0, r31
    5c68:	f4 e6       	ldi	r31, 0x64	; 100
    5c6a:	cf 2e       	mov	r12, r31
    5c6c:	d1 2c       	mov	r13, r1
    5c6e:	e1 2c       	mov	r14, r1
    5c70:	f1 2c       	mov	r15, r1
    5c72:	f0 2d       	mov	r31, r0
    5c74:	00 e0       	ldi	r16, 0x00	; 0
    5c76:	10 e0       	ldi	r17, 0x00	; 0
    5c78:	a5 01       	movw	r20, r10
    5c7a:	94 01       	movw	r18, r8
    5c7c:	64 e0       	ldi	r22, 0x04	; 4
    5c7e:	80 91 94 0a 	lds	r24, 0x0A94	; 0x800a94 <xStartHeatPump_1>
    5c82:	90 91 95 0a 	lds	r25, 0x0A95	; 0x800a95 <xStartHeatPump_1+0x1>
    5c86:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	
}
    5c8a:	1f 91       	pop	r17
    5c8c:	0f 91       	pop	r16
    5c8e:	ff 90       	pop	r15
    5c90:	ef 90       	pop	r14
    5c92:	df 90       	pop	r13
    5c94:	cf 90       	pop	r12
    5c96:	bf 90       	pop	r11
    5c98:	af 90       	pop	r10
    5c9a:	9f 90       	pop	r9
    5c9c:	8f 90       	pop	r8
    5c9e:	08 95       	ret

00005ca0 <HeatPump_Stop>:
		
	}
}
//-------------------------------------------------------------------------
void HeatPump_Stop(TimerHandle_t xTimer)
{
    5ca0:	8f 92       	push	r8
    5ca2:	9f 92       	push	r9
    5ca4:	af 92       	push	r10
    5ca6:	bf 92       	push	r11
    5ca8:	cf 92       	push	r12
    5caa:	df 92       	push	r13
    5cac:	ef 92       	push	r14
    5cae:	ff 92       	push	r15
    5cb0:	0f 93       	push	r16
    5cb2:	1f 93       	push	r17
	
	TickType_t period;
	
	//xSerialxPrintf(&xSerial3Port,"StopHeatPump\r\n");
	
	pxTimerID = pvTimerGetTimerID(xTimer);
    5cb4:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>

	if((*pxTimerID) == uxStopDelayHeatPTimer_1_ID)
    5cb8:	fc 01       	movw	r30, r24
    5cba:	80 81       	ld	r24, Z
    5cbc:	88 30       	cpi	r24, 0x08	; 8
    5cbe:	09 f0       	breq	.+2      	; 0x5cc2 <HeatPump_Stop+0x22>
    5cc0:	76 c0       	rjmp	.+236    	; 0x5dae <HeatPump_Stop+0x10e>
	{
		period=(TickType_t)EEpromData.Three_Way_delay;
    5cc2:	20 91 1c 09 	lds	r18, 0x091C	; 0x80091c <EEpromData+0x4>
		period*=1000;
    5cc6:	30 e0       	ldi	r19, 0x00	; 0
    5cc8:	a8 ee       	ldi	r26, 0xE8	; 232
    5cca:	b3 e0       	ldi	r27, 0x03	; 3
    5ccc:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    5cd0:	4b 01       	movw	r8, r22
    5cd2:	5c 01       	movw	r10, r24
		
		if(PIN_HEAT_PUMP_1 > 0)//
    5cd4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5cd8:	83 ff       	sbrs	r24, 3
    5cda:	56 c0       	rjmp	.+172    	; 0x5d88 <HeatPump_Stop+0xe8>
		{
			STOP_HEAT_PUMP_1;
    5cdc:	e2 e0       	ldi	r30, 0x02	; 2
    5cde:	f1 e0       	ldi	r31, 0x01	; 1
    5ce0:	80 81       	ld	r24, Z
    5ce2:	87 7f       	andi	r24, 0xF7	; 247
    5ce4:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopHeatPump_1\r\n");
    5ce6:	87 e9       	ldi	r24, 0x97	; 151
    5ce8:	93 e0       	ldi	r25, 0x03	; 3
    5cea:	9f 93       	push	r25
    5cec:	8f 93       	push	r24
    5cee:	86 eb       	ldi	r24, 0xB6	; 182
    5cf0:	97 e0       	ldi	r25, 0x07	; 7
    5cf2:	9f 93       	push	r25
    5cf4:	8f 93       	push	r24
    5cf6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.heatPOn=0;
    5cfa:	10 92 84 09 	sts	0x0984, r1	; 0x800984 <Comp_1+0xc>
			time_count_1+= difftime(time(&current_time), timeStartHeatP_1);
    5cfe:	c0 90 8c 0a 	lds	r12, 0x0A8C	; 0x800a8c <timeStartHeatP_1>
    5d02:	d0 90 8d 0a 	lds	r13, 0x0A8D	; 0x800a8d <timeStartHeatP_1+0x1>
    5d06:	e0 90 8e 0a 	lds	r14, 0x0A8E	; 0x800a8e <timeStartHeatP_1+0x2>
    5d0a:	f0 90 8f 0a 	lds	r15, 0x0A8F	; 0x800a8f <timeStartHeatP_1+0x3>
    5d0e:	83 e1       	ldi	r24, 0x13	; 19
    5d10:	99 e0       	ldi	r25, 0x09	; 9
    5d12:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5d16:	a7 01       	movw	r20, r14
    5d18:	96 01       	movw	r18, r12
    5d1a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5d1e:	c0 90 49 07 	lds	r12, 0x0749	; 0x800749 <time_count_1.3210>
    5d22:	d0 90 4a 07 	lds	r13, 0x074A	; 0x80074a <time_count_1.3210+0x1>
    5d26:	e0 90 4b 07 	lds	r14, 0x074B	; 0x80074b <time_count_1.3210+0x2>
    5d2a:	f0 90 4c 07 	lds	r15, 0x074C	; 0x80074c <time_count_1.3210+0x3>
    5d2e:	dc 01       	movw	r26, r24
    5d30:	cb 01       	movw	r24, r22
    5d32:	8c 0d       	add	r24, r12
    5d34:	9d 1d       	adc	r25, r13
    5d36:	ae 1d       	adc	r26, r14
    5d38:	bf 1d       	adc	r27, r15
    5d3a:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <time_count_1.3210>
    5d3e:	90 93 4a 07 	sts	0x074A, r25	; 0x80074a <time_count_1.3210+0x1>
    5d42:	a0 93 4b 07 	sts	0x074B, r26	; 0x80074b <time_count_1.3210+0x2>
    5d46:	b0 93 4c 07 	sts	0x074C, r27	; 0x80074c <time_count_1.3210+0x3>
			if(time_count_1>ONE_HOUR){EEpromData.time_pump_hiter_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    5d4a:	0f 90       	pop	r0
    5d4c:	0f 90       	pop	r0
    5d4e:	0f 90       	pop	r0
    5d50:	0f 90       	pop	r0
    5d52:	81 31       	cpi	r24, 0x11	; 17
    5d54:	9e 40       	sbci	r25, 0x0E	; 14
    5d56:	a1 05       	cpc	r26, r1
    5d58:	b1 05       	cpc	r27, r1
    5d5a:	b0 f0       	brcs	.+44     	; 0x5d88 <HeatPump_Stop+0xe8>
    5d5c:	e8 e1       	ldi	r30, 0x18	; 24
    5d5e:	f9 e0       	ldi	r31, 0x09	; 9
    5d60:	84 a9       	ldd	r24, Z+52	; 0x34
    5d62:	95 a9       	ldd	r25, Z+53	; 0x35
    5d64:	01 96       	adiw	r24, 0x01	; 1
    5d66:	95 ab       	std	Z+53, r25	; 0x35
    5d68:	84 ab       	std	Z+52, r24	; 0x34
    5d6a:	40 e6       	ldi	r20, 0x60	; 96
    5d6c:	50 e0       	ldi	r21, 0x00	; 0
    5d6e:	60 e0       	ldi	r22, 0x00	; 0
    5d70:	70 e0       	ldi	r23, 0x00	; 0
    5d72:	cf 01       	movw	r24, r30
    5d74:	0e 94 73 5d 	call	0xbae6	; 0xbae6 <eeprom_update_block>
    5d78:	10 92 49 07 	sts	0x0749, r1	; 0x800749 <time_count_1.3210>
    5d7c:	10 92 4a 07 	sts	0x074A, r1	; 0x80074a <time_count_1.3210+0x1>
    5d80:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <time_count_1.3210+0x2>
    5d84:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <time_count_1.3210+0x3>
			
		}
		xTimerChangePeriod( xStopThreeWay,period, 100 );
    5d88:	0f 2e       	mov	r0, r31
    5d8a:	f4 e6       	ldi	r31, 0x64	; 100
    5d8c:	cf 2e       	mov	r12, r31
    5d8e:	d1 2c       	mov	r13, r1
    5d90:	e1 2c       	mov	r14, r1
    5d92:	f1 2c       	mov	r15, r1
    5d94:	f0 2d       	mov	r31, r0
    5d96:	00 e0       	ldi	r16, 0x00	; 0
    5d98:	10 e0       	ldi	r17, 0x00	; 0
    5d9a:	a5 01       	movw	r20, r10
    5d9c:	94 01       	movw	r18, r8
    5d9e:	64 e0       	ldi	r22, 0x04	; 4
    5da0:	80 91 ee 09 	lds	r24, 0x09EE	; 0x8009ee <xStopThreeWay>
    5da4:	90 91 ef 09 	lds	r25, 0x09EF	; 0x8009ef <xStopThreeWay+0x1>
    5da8:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    5dac:	7b c0       	rjmp	.+246    	; 0x5ea4 <HeatPump_Stop+0x204>
		//xTimerStart(xStopThreeWay, 0);
	}

	else if((*pxTimerID) == uxStopDelayHeatPTimer_2_ID)
    5dae:	85 31       	cpi	r24, 0x15	; 21
    5db0:	09 f0       	breq	.+2      	; 0x5db4 <HeatPump_Stop+0x114>
    5db2:	78 c0       	rjmp	.+240    	; 0x5ea4 <HeatPump_Stop+0x204>
	{
		period=(TickType_t)EEpromData.Revers_Valve_delay;
		period*=1000;
		xSerialxPrintf(&xSerial3Port,"StopHeatPump_2\r\n");
    5db4:	88 ea       	ldi	r24, 0xA8	; 168
    5db6:	93 e0       	ldi	r25, 0x03	; 3
    5db8:	9f 93       	push	r25
    5dba:	8f 93       	push	r24
    5dbc:	86 eb       	ldi	r24, 0xB6	; 182
    5dbe:	97 e0       	ldi	r25, 0x07	; 7
    5dc0:	9f 93       	push	r25
    5dc2:	8f 93       	push	r24
    5dc4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_2 > 0)//
    5dc8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5dcc:	0f 90       	pop	r0
    5dce:	0f 90       	pop	r0
    5dd0:	0f 90       	pop	r0
    5dd2:	0f 90       	pop	r0
    5dd4:	84 ff       	sbrs	r24, 4
    5dd6:	49 c0       	rjmp	.+146    	; 0x5e6a <HeatPump_Stop+0x1ca>
		{
			STOP_HEAT_PUMP_2;
    5dd8:	e2 e0       	ldi	r30, 0x02	; 2
    5dda:	f1 e0       	ldi	r31, 0x01	; 1
    5ddc:	80 81       	ld	r24, Z
    5dde:	8f 7e       	andi	r24, 0xEF	; 239
    5de0:	80 83       	st	Z, r24
			
			
			Comp_2.heatPOn=0;
    5de2:	10 92 0e 0a 	sts	0x0A0E, r1	; 0x800a0e <Comp_2+0xc>
			time_count_2+= difftime(time(&current_time), timeStartHeatP_2);
    5de6:	c0 90 a0 0a 	lds	r12, 0x0AA0	; 0x800aa0 <timeStartHeatP_2>
    5dea:	d0 90 a1 0a 	lds	r13, 0x0AA1	; 0x800aa1 <timeStartHeatP_2+0x1>
    5dee:	e0 90 a2 0a 	lds	r14, 0x0AA2	; 0x800aa2 <timeStartHeatP_2+0x2>
    5df2:	f0 90 a3 0a 	lds	r15, 0x0AA3	; 0x800aa3 <timeStartHeatP_2+0x3>
    5df6:	83 e1       	ldi	r24, 0x13	; 19
    5df8:	99 e0       	ldi	r25, 0x09	; 9
    5dfa:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5dfe:	a7 01       	movw	r20, r14
    5e00:	96 01       	movw	r18, r12
    5e02:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5e06:	c0 90 45 07 	lds	r12, 0x0745	; 0x800745 <time_count_2.3211>
    5e0a:	d0 90 46 07 	lds	r13, 0x0746	; 0x800746 <time_count_2.3211+0x1>
    5e0e:	e0 90 47 07 	lds	r14, 0x0747	; 0x800747 <time_count_2.3211+0x2>
    5e12:	f0 90 48 07 	lds	r15, 0x0748	; 0x800748 <time_count_2.3211+0x3>
    5e16:	dc 01       	movw	r26, r24
    5e18:	cb 01       	movw	r24, r22
    5e1a:	8c 0d       	add	r24, r12
    5e1c:	9d 1d       	adc	r25, r13
    5e1e:	ae 1d       	adc	r26, r14
    5e20:	bf 1d       	adc	r27, r15
    5e22:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <time_count_2.3211>
    5e26:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <time_count_2.3211+0x1>
    5e2a:	a0 93 47 07 	sts	0x0747, r26	; 0x800747 <time_count_2.3211+0x2>
    5e2e:	b0 93 48 07 	sts	0x0748, r27	; 0x800748 <time_count_2.3211+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_pump_hiter_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    5e32:	81 31       	cpi	r24, 0x11	; 17
    5e34:	9e 40       	sbci	r25, 0x0E	; 14
    5e36:	a1 05       	cpc	r26, r1
    5e38:	b1 05       	cpc	r27, r1
    5e3a:	b8 f0       	brcs	.+46     	; 0x5e6a <HeatPump_Stop+0x1ca>
    5e3c:	e2 e6       	ldi	r30, 0x62	; 98
    5e3e:	f9 e0       	ldi	r31, 0x09	; 9
    5e40:	80 81       	ld	r24, Z
    5e42:	91 81       	ldd	r25, Z+1	; 0x01
    5e44:	01 96       	adiw	r24, 0x01	; 1
    5e46:	91 83       	std	Z+1, r25	; 0x01
    5e48:	80 83       	st	Z, r24
    5e4a:	40 e6       	ldi	r20, 0x60	; 96
    5e4c:	50 e0       	ldi	r21, 0x00	; 0
    5e4e:	60 e0       	ldi	r22, 0x00	; 0
    5e50:	70 e0       	ldi	r23, 0x00	; 0
    5e52:	88 e1       	ldi	r24, 0x18	; 24
    5e54:	99 e0       	ldi	r25, 0x09	; 9
    5e56:	0e 94 73 5d 	call	0xbae6	; 0xbae6 <eeprom_update_block>
    5e5a:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <time_count_2.3211>
    5e5e:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <time_count_2.3211+0x1>
    5e62:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <time_count_2.3211+0x2>
    5e66:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <time_count_2.3211+0x3>
			
		}
		xTimerChangePeriod( xStopRevValve_2,(EEpromData.Revers_Valve_delay*1000) / portTICK_PERIOD_MS, 100 );
    5e6a:	40 91 1a 09 	lds	r20, 0x091A	; 0x80091a <EEpromData+0x2>
    5e6e:	88 ee       	ldi	r24, 0xE8	; 232
    5e70:	93 e0       	ldi	r25, 0x03	; 3
    5e72:	48 9f       	mul	r20, r24
    5e74:	90 01       	movw	r18, r0
    5e76:	49 9f       	mul	r20, r25
    5e78:	30 0d       	add	r19, r0
    5e7a:	11 24       	eor	r1, r1
    5e7c:	03 2e       	mov	r0, r19
    5e7e:	00 0c       	add	r0, r0
    5e80:	44 0b       	sbc	r20, r20
    5e82:	55 0b       	sbc	r21, r21
    5e84:	0f 2e       	mov	r0, r31
    5e86:	f4 e6       	ldi	r31, 0x64	; 100
    5e88:	cf 2e       	mov	r12, r31
    5e8a:	d1 2c       	mov	r13, r1
    5e8c:	e1 2c       	mov	r14, r1
    5e8e:	f1 2c       	mov	r15, r1
    5e90:	f0 2d       	mov	r31, r0
    5e92:	00 e0       	ldi	r16, 0x00	; 0
    5e94:	10 e0       	ldi	r17, 0x00	; 0
    5e96:	64 e0       	ldi	r22, 0x04	; 4
    5e98:	80 91 0d 09 	lds	r24, 0x090D	; 0x80090d <xStopRevValve_2>
    5e9c:	90 91 0e 09 	lds	r25, 0x090E	; 0x80090e <xStopRevValve_2+0x1>
    5ea0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
}
    5ea4:	1f 91       	pop	r17
    5ea6:	0f 91       	pop	r16
    5ea8:	ff 90       	pop	r15
    5eaa:	ef 90       	pop	r14
    5eac:	df 90       	pop	r13
    5eae:	cf 90       	pop	r12
    5eb0:	bf 90       	pop	r11
    5eb2:	af 90       	pop	r10
    5eb4:	9f 90       	pop	r9
    5eb6:	8f 90       	pop	r8
    5eb8:	08 95       	ret

00005eba <ThreeWay_Stop>:
//-------------------------------------------------------------------------
void ThreeWay_Stop()
{
    5eba:	8f 92       	push	r8
    5ebc:	9f 92       	push	r9
    5ebe:	af 92       	push	r10
    5ec0:	bf 92       	push	r11
    5ec2:	cf 92       	push	r12
    5ec4:	df 92       	push	r13
    5ec6:	ef 92       	push	r14
    5ec8:	ff 92       	push	r15
    5eca:	0f 93       	push	r16
    5ecc:	1f 93       	push	r17
	static time_t time_count;
	TickType_t period;
	period=(TickType_t)EEpromData.Revers_Valve_delay;
    5ece:	20 91 1a 09 	lds	r18, 0x091A	; 0x80091a <EEpromData+0x2>
	period*=1000;
    5ed2:	30 e0       	ldi	r19, 0x00	; 0
    5ed4:	a8 ee       	ldi	r26, 0xE8	; 232
    5ed6:	b3 e0       	ldi	r27, 0x03	; 3
    5ed8:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    5edc:	4b 01       	movw	r8, r22
    5ede:	5c 01       	movw	r10, r24
	
	xSerialxPrintf(&xSerial3Port,"ThreeWay_Stop\r\n");
    5ee0:	89 eb       	ldi	r24, 0xB9	; 185
    5ee2:	93 e0       	ldi	r25, 0x03	; 3
    5ee4:	9f 93       	push	r25
    5ee6:	8f 93       	push	r24
    5ee8:	86 eb       	ldi	r24, 0xB6	; 182
    5eea:	97 e0       	ldi	r25, 0x07	; 7
    5eec:	9f 93       	push	r25
    5eee:	8f 93       	push	r24
    5ef0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(PIN_THWAY_VALVE > 0)
    5ef4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5ef8:	0f 90       	pop	r0
    5efa:	0f 90       	pop	r0
    5efc:	0f 90       	pop	r0
    5efe:	0f 90       	pop	r0
    5f00:	88 23       	and	r24, r24
    5f02:	0c f0       	brlt	.+2      	; 0x5f06 <ThreeWay_Stop+0x4c>
    5f04:	48 c0       	rjmp	.+144    	; 0x5f96 <ThreeWay_Stop+0xdc>
	{
		STOP_THWAY_VALVE;
    5f06:	e2 e0       	ldi	r30, 0x02	; 2
    5f08:	f1 e0       	ldi	r31, 0x01	; 1
    5f0a:	80 81       	ld	r24, Z
    5f0c:	8f 77       	andi	r24, 0x7F	; 127
    5f0e:	80 83       	st	Z, r24
		//xSerialxPrintf(&xSerial3Port,"ThreeWay_Stop\r\n");
		Comp_1.threeWOn=0;
    5f10:	10 92 85 09 	sts	0x0985, r1	; 0x800985 <Comp_1+0xd>
		time_count+= difftime(time(&current_time), timeStartThreeW);
    5f14:	c0 90 a4 0a 	lds	r12, 0x0AA4	; 0x800aa4 <timeStartThreeW>
    5f18:	d0 90 a5 0a 	lds	r13, 0x0AA5	; 0x800aa5 <timeStartThreeW+0x1>
    5f1c:	e0 90 a6 0a 	lds	r14, 0x0AA6	; 0x800aa6 <timeStartThreeW+0x2>
    5f20:	f0 90 a7 0a 	lds	r15, 0x0AA7	; 0x800aa7 <timeStartThreeW+0x3>
    5f24:	83 e1       	ldi	r24, 0x13	; 19
    5f26:	99 e0       	ldi	r25, 0x09	; 9
    5f28:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5f2c:	a7 01       	movw	r20, r14
    5f2e:	96 01       	movw	r18, r12
    5f30:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5f34:	c0 90 41 07 	lds	r12, 0x0741	; 0x800741 <time_count.3216>
    5f38:	d0 90 42 07 	lds	r13, 0x0742	; 0x800742 <time_count.3216+0x1>
    5f3c:	e0 90 43 07 	lds	r14, 0x0743	; 0x800743 <time_count.3216+0x2>
    5f40:	f0 90 44 07 	lds	r15, 0x0744	; 0x800744 <time_count.3216+0x3>
    5f44:	dc 01       	movw	r26, r24
    5f46:	cb 01       	movw	r24, r22
    5f48:	8c 0d       	add	r24, r12
    5f4a:	9d 1d       	adc	r25, r13
    5f4c:	ae 1d       	adc	r26, r14
    5f4e:	bf 1d       	adc	r27, r15
    5f50:	80 93 41 07 	sts	0x0741, r24	; 0x800741 <time_count.3216>
    5f54:	90 93 42 07 	sts	0x0742, r25	; 0x800742 <time_count.3216+0x1>
    5f58:	a0 93 43 07 	sts	0x0743, r26	; 0x800743 <time_count.3216+0x2>
    5f5c:	b0 93 44 07 	sts	0x0744, r27	; 0x800744 <time_count.3216+0x3>
		if(time_count>ONE_HOUR){EEpromData.time_threeway++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count=0;}
    5f60:	81 31       	cpi	r24, 0x11	; 17
    5f62:	9e 40       	sbci	r25, 0x0E	; 14
    5f64:	a1 05       	cpc	r26, r1
    5f66:	b1 05       	cpc	r27, r1
    5f68:	b0 f0       	brcs	.+44     	; 0x5f96 <ThreeWay_Stop+0xdc>
    5f6a:	e8 e1       	ldi	r30, 0x18	; 24
    5f6c:	f9 e0       	ldi	r31, 0x09	; 9
    5f6e:	84 ad       	ldd	r24, Z+60	; 0x3c
    5f70:	95 ad       	ldd	r25, Z+61	; 0x3d
    5f72:	01 96       	adiw	r24, 0x01	; 1
    5f74:	95 af       	std	Z+61, r25	; 0x3d
    5f76:	84 af       	std	Z+60, r24	; 0x3c
    5f78:	40 e6       	ldi	r20, 0x60	; 96
    5f7a:	50 e0       	ldi	r21, 0x00	; 0
    5f7c:	60 e0       	ldi	r22, 0x00	; 0
    5f7e:	70 e0       	ldi	r23, 0x00	; 0
    5f80:	cf 01       	movw	r24, r30
    5f82:	0e 94 73 5d 	call	0xbae6	; 0xbae6 <eeprom_update_block>
    5f86:	10 92 41 07 	sts	0x0741, r1	; 0x800741 <time_count.3216>
    5f8a:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <time_count.3216+0x1>
    5f8e:	10 92 43 07 	sts	0x0743, r1	; 0x800743 <time_count.3216+0x2>
    5f92:	10 92 44 07 	sts	0x0744, r1	; 0x800744 <time_count.3216+0x3>
		
	} else{ }//xSerialxPrintf(&xSerial3Port,"ThreeWay_isRun\r\n");
	xTimerChangePeriod( xStopRevValve_1,period, 100 );
    5f96:	0f 2e       	mov	r0, r31
    5f98:	f4 e6       	ldi	r31, 0x64	; 100
    5f9a:	cf 2e       	mov	r12, r31
    5f9c:	d1 2c       	mov	r13, r1
    5f9e:	e1 2c       	mov	r14, r1
    5fa0:	f1 2c       	mov	r15, r1
    5fa2:	f0 2d       	mov	r31, r0
    5fa4:	00 e0       	ldi	r16, 0x00	; 0
    5fa6:	10 e0       	ldi	r17, 0x00	; 0
    5fa8:	a5 01       	movw	r20, r10
    5faa:	94 01       	movw	r18, r8
    5fac:	64 e0       	ldi	r22, 0x04	; 4
    5fae:	80 91 88 0a 	lds	r24, 0x0A88	; 0x800a88 <xStopRevValve_1>
    5fb2:	90 91 89 0a 	lds	r25, 0x0A89	; 0x800a89 <xStopRevValve_1+0x1>
    5fb6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	
}
    5fba:	1f 91       	pop	r17
    5fbc:	0f 91       	pop	r16
    5fbe:	ff 90       	pop	r15
    5fc0:	ef 90       	pop	r14
    5fc2:	df 90       	pop	r13
    5fc4:	cf 90       	pop	r12
    5fc6:	bf 90       	pop	r11
    5fc8:	af 90       	pop	r10
    5fca:	9f 90       	pop	r9
    5fcc:	8f 90       	pop	r8
    5fce:	08 95       	ret

00005fd0 <Revers_Stop>:

//-------------------------------------------------------------------------
void Revers_Stop(TimerHandle_t xTimer)
{
    5fd0:	8f 92       	push	r8
    5fd2:	9f 92       	push	r9
    5fd4:	af 92       	push	r10
    5fd6:	bf 92       	push	r11
    5fd8:	cf 92       	push	r12
    5fda:	df 92       	push	r13
    5fdc:	ef 92       	push	r14
    5fde:	ff 92       	push	r15
    5fe0:	0f 93       	push	r16
    5fe2:	1f 93       	push	r17
    5fe4:	ac 01       	movw	r20, r24
	static time_t time_count_1;
	static time_t time_count_2;
	TickType_t period;
	period=(TickType_t)EEpromData.Source_Pump_delay;
    5fe6:	20 91 19 09 	lds	r18, 0x0919	; 0x800919 <EEpromData+0x1>
	period*=1000;
    5fea:	30 e0       	ldi	r19, 0x00	; 0
    5fec:	a8 ee       	ldi	r26, 0xE8	; 232
    5fee:	b3 e0       	ldi	r27, 0x03	; 3
    5ff0:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    5ff4:	4b 01       	movw	r8, r22
    5ff6:	5c 01       	movw	r10, r24

	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5ff8:	ca 01       	movw	r24, r20
    5ffa:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
   // xSerialxPrintf(&xSerial3Port,"StopRevValve\r\n");

	if((*pxTimerID) == uxStopDelayRevVTimer_1_ID)
    5ffe:	fc 01       	movw	r30, r24
    6000:	80 81       	ld	r24, Z
    6002:	8a 30       	cpi	r24, 0x0A	; 10
    6004:	09 f0       	breq	.+2      	; 0x6008 <Revers_Stop+0x38>
    6006:	67 c0       	rjmp	.+206    	; 0x60d6 <Revers_Stop+0x106>
	{
		
		
		if(PIN_REV_VALVE_1 > 0)//
    6008:	94 9b       	sbis	0x12, 4	; 18
    600a:	52 c0       	rjmp	.+164    	; 0x60b0 <Revers_Stop+0xe0>
		{
			STOP_REV_VALVE_1;
    600c:	a4 98       	cbi	0x14, 4	; 20
			xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    600e:	84 e3       	ldi	r24, 0x34	; 52
    6010:	93 e0       	ldi	r25, 0x03	; 3
    6012:	9f 93       	push	r25
    6014:	8f 93       	push	r24
    6016:	86 eb       	ldi	r24, 0xB6	; 182
    6018:	97 e0       	ldi	r25, 0x07	; 7
    601a:	9f 93       	push	r25
    601c:	8f 93       	push	r24
    601e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.revVOn=0;
    6022:	10 92 86 09 	sts	0x0986, r1	; 0x800986 <Comp_1+0xe>
			time_count_1+= difftime(time(&current_time), timeStartRevV_1);
    6026:	c0 90 af 0a 	lds	r12, 0x0AAF	; 0x800aaf <timeStartRevV_1>
    602a:	d0 90 b0 0a 	lds	r13, 0x0AB0	; 0x800ab0 <timeStartRevV_1+0x1>
    602e:	e0 90 b1 0a 	lds	r14, 0x0AB1	; 0x800ab1 <timeStartRevV_1+0x2>
    6032:	f0 90 b2 0a 	lds	r15, 0x0AB2	; 0x800ab2 <timeStartRevV_1+0x3>
    6036:	83 e1       	ldi	r24, 0x13	; 19
    6038:	99 e0       	ldi	r25, 0x09	; 9
    603a:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    603e:	a7 01       	movw	r20, r14
    6040:	96 01       	movw	r18, r12
    6042:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    6046:	c0 90 3d 07 	lds	r12, 0x073D	; 0x80073d <time_count_1.3221>
    604a:	d0 90 3e 07 	lds	r13, 0x073E	; 0x80073e <time_count_1.3221+0x1>
    604e:	e0 90 3f 07 	lds	r14, 0x073F	; 0x80073f <time_count_1.3221+0x2>
    6052:	f0 90 40 07 	lds	r15, 0x0740	; 0x800740 <time_count_1.3221+0x3>
    6056:	dc 01       	movw	r26, r24
    6058:	cb 01       	movw	r24, r22
    605a:	8c 0d       	add	r24, r12
    605c:	9d 1d       	adc	r25, r13
    605e:	ae 1d       	adc	r26, r14
    6060:	bf 1d       	adc	r27, r15
    6062:	80 93 3d 07 	sts	0x073D, r24	; 0x80073d <time_count_1.3221>
    6066:	90 93 3e 07 	sts	0x073E, r25	; 0x80073e <time_count_1.3221+0x1>
    606a:	a0 93 3f 07 	sts	0x073F, r26	; 0x80073f <time_count_1.3221+0x2>
    606e:	b0 93 40 07 	sts	0x0740, r27	; 0x800740 <time_count_1.3221+0x3>
			if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    6072:	0f 90       	pop	r0
    6074:	0f 90       	pop	r0
    6076:	0f 90       	pop	r0
    6078:	0f 90       	pop	r0
    607a:	81 31       	cpi	r24, 0x11	; 17
    607c:	9e 40       	sbci	r25, 0x0E	; 14
    607e:	a1 05       	cpc	r26, r1
    6080:	b1 05       	cpc	r27, r1
    6082:	b0 f0       	brcs	.+44     	; 0x60b0 <Revers_Stop+0xe0>
    6084:	e8 e1       	ldi	r30, 0x18	; 24
    6086:	f9 e0       	ldi	r31, 0x09	; 9
    6088:	80 ad       	ldd	r24, Z+56	; 0x38
    608a:	91 ad       	ldd	r25, Z+57	; 0x39
    608c:	01 96       	adiw	r24, 0x01	; 1
    608e:	91 af       	std	Z+57, r25	; 0x39
    6090:	80 af       	std	Z+56, r24	; 0x38
    6092:	40 e6       	ldi	r20, 0x60	; 96
    6094:	50 e0       	ldi	r21, 0x00	; 0
    6096:	60 e0       	ldi	r22, 0x00	; 0
    6098:	70 e0       	ldi	r23, 0x00	; 0
    609a:	cf 01       	movw	r24, r30
    609c:	0e 94 73 5d 	call	0xbae6	; 0xbae6 <eeprom_update_block>
    60a0:	10 92 3d 07 	sts	0x073D, r1	; 0x80073d <time_count_1.3221>
    60a4:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <time_count_1.3221+0x1>
    60a8:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <time_count_1.3221+0x2>
    60ac:	10 92 40 07 	sts	0x0740, r1	; 0x800740 <time_count_1.3221+0x3>

		}
		xTimerChangePeriod( xStopSource_1,period, 100 );
    60b0:	0f 2e       	mov	r0, r31
    60b2:	f4 e6       	ldi	r31, 0x64	; 100
    60b4:	cf 2e       	mov	r12, r31
    60b6:	d1 2c       	mov	r13, r1
    60b8:	e1 2c       	mov	r14, r1
    60ba:	f1 2c       	mov	r15, r1
    60bc:	f0 2d       	mov	r31, r0
    60be:	00 e0       	ldi	r16, 0x00	; 0
    60c0:	10 e0       	ldi	r17, 0x00	; 0
    60c2:	a5 01       	movw	r20, r10
    60c4:	94 01       	movw	r18, r8
    60c6:	64 e0       	ldi	r22, 0x04	; 4
    60c8:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <xStopSource_1>
    60cc:	90 91 10 09 	lds	r25, 0x0910	; 0x800910 <xStopSource_1+0x1>
    60d0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    60d4:	6a c0       	rjmp	.+212    	; 0x61aa <Revers_Stop+0x1da>
		//xTimerStart(xStopSource_1, 0);
	}
	
	else if((*pxTimerID) == uxStopDelayRevVTimer_2_ID)
    60d6:	87 31       	cpi	r24, 0x17	; 23
    60d8:	09 f0       	breq	.+2      	; 0x60dc <Revers_Stop+0x10c>
    60da:	67 c0       	rjmp	.+206    	; 0x61aa <Revers_Stop+0x1da>
	{
		
		if(PIN_REV_VALVE_2 > 0)//
    60dc:	93 9b       	sbis	0x12, 3	; 18
    60de:	53 c0       	rjmp	.+166    	; 0x6186 <Revers_Stop+0x1b6>
		{   
			xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    60e0:	86 e5       	ldi	r24, 0x56	; 86
    60e2:	93 e0       	ldi	r25, 0x03	; 3
    60e4:	9f 93       	push	r25
    60e6:	8f 93       	push	r24
    60e8:	86 eb       	ldi	r24, 0xB6	; 182
    60ea:	97 e0       	ldi	r25, 0x07	; 7
    60ec:	9f 93       	push	r25
    60ee:	8f 93       	push	r24
    60f0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			STOP_REV_VALVE_2;
    60f4:	a3 98       	cbi	0x14, 3	; 20
			
			
			Comp_2.revVOn=0;
    60f6:	10 92 10 0a 	sts	0x0A10, r1	; 0x800a10 <Comp_2+0xe>
			time_count_2+= difftime(time(&current_time), timeStartRevV_2);
    60fa:	c0 90 ca 0a 	lds	r12, 0x0ACA	; 0x800aca <timeStartRevV_2>
    60fe:	d0 90 cb 0a 	lds	r13, 0x0ACB	; 0x800acb <timeStartRevV_2+0x1>
    6102:	e0 90 cc 0a 	lds	r14, 0x0ACC	; 0x800acc <timeStartRevV_2+0x2>
    6106:	f0 90 cd 0a 	lds	r15, 0x0ACD	; 0x800acd <timeStartRevV_2+0x3>
    610a:	83 e1       	ldi	r24, 0x13	; 19
    610c:	99 e0       	ldi	r25, 0x09	; 9
    610e:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6112:	a7 01       	movw	r20, r14
    6114:	96 01       	movw	r18, r12
    6116:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    611a:	c0 90 39 07 	lds	r12, 0x0739	; 0x800739 <time_count_2.3222>
    611e:	d0 90 3a 07 	lds	r13, 0x073A	; 0x80073a <time_count_2.3222+0x1>
    6122:	e0 90 3b 07 	lds	r14, 0x073B	; 0x80073b <time_count_2.3222+0x2>
    6126:	f0 90 3c 07 	lds	r15, 0x073C	; 0x80073c <time_count_2.3222+0x3>
    612a:	dc 01       	movw	r26, r24
    612c:	cb 01       	movw	r24, r22
    612e:	8c 0d       	add	r24, r12
    6130:	9d 1d       	adc	r25, r13
    6132:	ae 1d       	adc	r26, r14
    6134:	bf 1d       	adc	r27, r15
    6136:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <time_count_2.3222>
    613a:	90 93 3a 07 	sts	0x073A, r25	; 0x80073a <time_count_2.3222+0x1>
    613e:	a0 93 3b 07 	sts	0x073B, r26	; 0x80073b <time_count_2.3222+0x2>
    6142:	b0 93 3c 07 	sts	0x073C, r27	; 0x80073c <time_count_2.3222+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    6146:	0f 90       	pop	r0
    6148:	0f 90       	pop	r0
    614a:	0f 90       	pop	r0
    614c:	0f 90       	pop	r0
    614e:	81 31       	cpi	r24, 0x11	; 17
    6150:	9e 40       	sbci	r25, 0x0E	; 14
    6152:	a1 05       	cpc	r26, r1
    6154:	b1 05       	cpc	r27, r1
    6156:	b8 f0       	brcs	.+46     	; 0x6186 <Revers_Stop+0x1b6>
    6158:	e6 e6       	ldi	r30, 0x66	; 102
    615a:	f9 e0       	ldi	r31, 0x09	; 9
    615c:	80 81       	ld	r24, Z
    615e:	91 81       	ldd	r25, Z+1	; 0x01
    6160:	01 96       	adiw	r24, 0x01	; 1
    6162:	91 83       	std	Z+1, r25	; 0x01
    6164:	80 83       	st	Z, r24
    6166:	40 e6       	ldi	r20, 0x60	; 96
    6168:	50 e0       	ldi	r21, 0x00	; 0
    616a:	60 e0       	ldi	r22, 0x00	; 0
    616c:	70 e0       	ldi	r23, 0x00	; 0
    616e:	88 e1       	ldi	r24, 0x18	; 24
    6170:	99 e0       	ldi	r25, 0x09	; 9
    6172:	0e 94 73 5d 	call	0xbae6	; 0xbae6 <eeprom_update_block>
    6176:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <time_count_2.3222>
    617a:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <time_count_2.3222+0x1>
    617e:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <time_count_2.3222+0x2>
    6182:	10 92 3c 07 	sts	0x073C, r1	; 0x80073c <time_count_2.3222+0x3>

		}
		xTimerChangePeriod( xStopSource_2,period, 100 );
    6186:	0f 2e       	mov	r0, r31
    6188:	f4 e6       	ldi	r31, 0x64	; 100
    618a:	cf 2e       	mov	r12, r31
    618c:	d1 2c       	mov	r13, r1
    618e:	e1 2c       	mov	r14, r1
    6190:	f1 2c       	mov	r15, r1
    6192:	f0 2d       	mov	r31, r0
    6194:	00 e0       	ldi	r16, 0x00	; 0
    6196:	10 e0       	ldi	r17, 0x00	; 0
    6198:	a5 01       	movw	r20, r10
    619a:	94 01       	movw	r18, r8
    619c:	64 e0       	ldi	r22, 0x04	; 4
    619e:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <xStopSource_2>
    61a2:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <xStopSource_2+0x1>
    61a6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		//xTimerStart(xStopSource_2, 0);
	}
	
	
}
    61aa:	1f 91       	pop	r17
    61ac:	0f 91       	pop	r16
    61ae:	ff 90       	pop	r15
    61b0:	ef 90       	pop	r14
    61b2:	df 90       	pop	r13
    61b4:	cf 90       	pop	r12
    61b6:	bf 90       	pop	r11
    61b8:	af 90       	pop	r10
    61ba:	9f 90       	pop	r9
    61bc:	8f 90       	pop	r8
    61be:	08 95       	ret

000061c0 <SorcePump_Stop>:
//---------------------------------------------------------------------------
void SorcePump_Stop(TimerHandle_t xTimer)
{
    61c0:	cf 92       	push	r12
    61c2:	df 92       	push	r13
    61c4:	ef 92       	push	r14
    61c6:	ff 92       	push	r15
	static time_t time_count_1;
	static time_t time_count_2;
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    61c8:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
     // xSerialxPrintf(&xSerial3Port,"StopSource\r\n");
    
	 	
	 
	if((*pxTimerID) == uxStopDelaySourcePTimer_1_ID)
    61cc:	fc 01       	movw	r30, r24
    61ce:	80 81       	ld	r24, Z
    61d0:	89 30       	cpi	r24, 0x09	; 9
    61d2:	09 f0       	breq	.+2      	; 0x61d6 <SorcePump_Stop+0x16>
    61d4:	5e c0       	rjmp	.+188    	; 0x6292 <SorcePump_Stop+0xd2>
	{
		Comp_1.switchToMode=false ;
    61d6:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <Comp_1>
		
		
		if(PIN_SOURCE_PUMP_1 > 0)//
    61da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    61de:	81 ff       	sbrs	r24, 1
    61e0:	b8 c0       	rjmp	.+368    	; 0x6352 <SorcePump_Stop+0x192>
		{
			STOP_SOURCE_PUMP_1;
    61e2:	e2 e0       	ldi	r30, 0x02	; 2
    61e4:	f1 e0       	ldi	r31, 0x01	; 1
    61e6:	80 81       	ld	r24, Z
    61e8:	8d 7f       	andi	r24, 0xFD	; 253
    61ea:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopSource_1\r\n");
    61ec:	89 ec       	ldi	r24, 0xC9	; 201
    61ee:	93 e0       	ldi	r25, 0x03	; 3
    61f0:	9f 93       	push	r25
    61f2:	8f 93       	push	r24
    61f4:	86 eb       	ldi	r24, 0xB6	; 182
    61f6:	97 e0       	ldi	r25, 0x07	; 7
    61f8:	9f 93       	push	r25
    61fa:	8f 93       	push	r24
    61fc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.srcPOn=0;
    6200:	10 92 87 09 	sts	0x0987, r1	; 0x800987 <Comp_1+0xf>
			
			
			time_count_1+= difftime(time(&current_time), timeStartSrcP_1);
    6204:	c0 90 f4 09 	lds	r12, 0x09F4	; 0x8009f4 <timeStartSrcP_1>
    6208:	d0 90 f5 09 	lds	r13, 0x09F5	; 0x8009f5 <timeStartSrcP_1+0x1>
    620c:	e0 90 f6 09 	lds	r14, 0x09F6	; 0x8009f6 <timeStartSrcP_1+0x2>
    6210:	f0 90 f7 09 	lds	r15, 0x09F7	; 0x8009f7 <timeStartSrcP_1+0x3>
    6214:	83 e1       	ldi	r24, 0x13	; 19
    6216:	99 e0       	ldi	r25, 0x09	; 9
    6218:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    621c:	a7 01       	movw	r20, r14
    621e:	96 01       	movw	r18, r12
    6220:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    6224:	c0 90 35 07 	lds	r12, 0x0735	; 0x800735 <time_count_1.3228>
    6228:	d0 90 36 07 	lds	r13, 0x0736	; 0x800736 <time_count_1.3228+0x1>
    622c:	e0 90 37 07 	lds	r14, 0x0737	; 0x800737 <time_count_1.3228+0x2>
    6230:	f0 90 38 07 	lds	r15, 0x0738	; 0x800738 <time_count_1.3228+0x3>
    6234:	dc 01       	movw	r26, r24
    6236:	cb 01       	movw	r24, r22
    6238:	8c 0d       	add	r24, r12
    623a:	9d 1d       	adc	r25, r13
    623c:	ae 1d       	adc	r26, r14
    623e:	bf 1d       	adc	r27, r15
    6240:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <time_count_1.3228>
    6244:	90 93 36 07 	sts	0x0736, r25	; 0x800736 <time_count_1.3228+0x1>
    6248:	a0 93 37 07 	sts	0x0737, r26	; 0x800737 <time_count_1.3228+0x2>
    624c:	b0 93 38 07 	sts	0x0738, r27	; 0x800738 <time_count_1.3228+0x3>
			//xSerialxPrintf(&xSerial3Port,"time_count_1=%d\r\n",time_count_1);
			if(time_count_1>ONE_HOUR){EEpromData.time_pump_source_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    6250:	0f 90       	pop	r0
    6252:	0f 90       	pop	r0
    6254:	0f 90       	pop	r0
    6256:	0f 90       	pop	r0
    6258:	81 31       	cpi	r24, 0x11	; 17
    625a:	9e 40       	sbci	r25, 0x0E	; 14
    625c:	a1 05       	cpc	r26, r1
    625e:	b1 05       	cpc	r27, r1
    6260:	08 f4       	brcc	.+2      	; 0x6264 <SorcePump_Stop+0xa4>
    6262:	77 c0       	rjmp	.+238    	; 0x6352 <SorcePump_Stop+0x192>
    6264:	e8 e1       	ldi	r30, 0x18	; 24
    6266:	f9 e0       	ldi	r31, 0x09	; 9
    6268:	86 a9       	ldd	r24, Z+54	; 0x36
    626a:	97 a9       	ldd	r25, Z+55	; 0x37
    626c:	01 96       	adiw	r24, 0x01	; 1
    626e:	97 ab       	std	Z+55, r25	; 0x37
    6270:	86 ab       	std	Z+54, r24	; 0x36
    6272:	40 e6       	ldi	r20, 0x60	; 96
    6274:	50 e0       	ldi	r21, 0x00	; 0
    6276:	60 e0       	ldi	r22, 0x00	; 0
    6278:	70 e0       	ldi	r23, 0x00	; 0
    627a:	cf 01       	movw	r24, r30
    627c:	0e 94 73 5d 	call	0xbae6	; 0xbae6 <eeprom_update_block>
    6280:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <time_count_1.3228>
    6284:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <time_count_1.3228+0x1>
    6288:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <time_count_1.3228+0x2>
    628c:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <time_count_1.3228+0x3>
    6290:	60 c0       	rjmp	.+192    	; 0x6352 <SorcePump_Stop+0x192>

		}
		
	}
	
	else if((*pxTimerID) == uxStopDelaySourcePTimer_2_ID)
    6292:	86 31       	cpi	r24, 0x16	; 22
    6294:	09 f0       	breq	.+2      	; 0x6298 <SorcePump_Stop+0xd8>
    6296:	5d c0       	rjmp	.+186    	; 0x6352 <SorcePump_Stop+0x192>
	{
		//xSerialxPrintf(&xSerial3Port,"StopSource_2\r\n");
		if(PIN_SOURCE_PUMP_2 > 0)//
    6298:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    629c:	82 ff       	sbrs	r24, 2
    629e:	59 c0       	rjmp	.+178    	; 0x6352 <SorcePump_Stop+0x192>
		{
			STOP_SOURCE_PUMP_2;
    62a0:	e2 e0       	ldi	r30, 0x02	; 2
    62a2:	f1 e0       	ldi	r31, 0x01	; 1
    62a4:	80 81       	ld	r24, Z
    62a6:	8b 7f       	andi	r24, 0xFB	; 251
    62a8:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopSource_2\r\n");
    62aa:	88 ed       	ldi	r24, 0xD8	; 216
    62ac:	93 e0       	ldi	r25, 0x03	; 3
    62ae:	9f 93       	push	r25
    62b0:	8f 93       	push	r24
    62b2:	86 eb       	ldi	r24, 0xB6	; 182
    62b4:	97 e0       	ldi	r25, 0x07	; 7
    62b6:	9f 93       	push	r25
    62b8:	8f 93       	push	r24
    62ba:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			Comp_2.srcPOn=0;
    62be:	e2 e0       	ldi	r30, 0x02	; 2
    62c0:	fa e0       	ldi	r31, 0x0A	; 10
    62c2:	17 86       	std	Z+15, r1	; 0x0f
			Comp_2.switchToMode=false;
    62c4:	10 82       	st	Z, r1
			time_count_2+= difftime(time(&current_time), timeStartSrcP_2);
    62c6:	c0 90 b3 0a 	lds	r12, 0x0AB3	; 0x800ab3 <timeStartSrcP_2>
    62ca:	d0 90 b4 0a 	lds	r13, 0x0AB4	; 0x800ab4 <timeStartSrcP_2+0x1>
    62ce:	e0 90 b5 0a 	lds	r14, 0x0AB5	; 0x800ab5 <timeStartSrcP_2+0x2>
    62d2:	f0 90 b6 0a 	lds	r15, 0x0AB6	; 0x800ab6 <timeStartSrcP_2+0x3>
    62d6:	83 e1       	ldi	r24, 0x13	; 19
    62d8:	99 e0       	ldi	r25, 0x09	; 9
    62da:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    62de:	a7 01       	movw	r20, r14
    62e0:	96 01       	movw	r18, r12
    62e2:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    62e6:	c0 90 31 07 	lds	r12, 0x0731	; 0x800731 <time_count_2.3229>
    62ea:	d0 90 32 07 	lds	r13, 0x0732	; 0x800732 <time_count_2.3229+0x1>
    62ee:	e0 90 33 07 	lds	r14, 0x0733	; 0x800733 <time_count_2.3229+0x2>
    62f2:	f0 90 34 07 	lds	r15, 0x0734	; 0x800734 <time_count_2.3229+0x3>
    62f6:	dc 01       	movw	r26, r24
    62f8:	cb 01       	movw	r24, r22
    62fa:	8c 0d       	add	r24, r12
    62fc:	9d 1d       	adc	r25, r13
    62fe:	ae 1d       	adc	r26, r14
    6300:	bf 1d       	adc	r27, r15
    6302:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <time_count_2.3229>
    6306:	90 93 32 07 	sts	0x0732, r25	; 0x800732 <time_count_2.3229+0x1>
    630a:	a0 93 33 07 	sts	0x0733, r26	; 0x800733 <time_count_2.3229+0x2>
    630e:	b0 93 34 07 	sts	0x0734, r27	; 0x800734 <time_count_2.3229+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_pump_source_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    6312:	0f 90       	pop	r0
    6314:	0f 90       	pop	r0
    6316:	0f 90       	pop	r0
    6318:	0f 90       	pop	r0
    631a:	81 31       	cpi	r24, 0x11	; 17
    631c:	9e 40       	sbci	r25, 0x0E	; 14
    631e:	a1 05       	cpc	r26, r1
    6320:	b1 05       	cpc	r27, r1
    6322:	b8 f0       	brcs	.+46     	; 0x6352 <SorcePump_Stop+0x192>
    6324:	e4 e6       	ldi	r30, 0x64	; 100
    6326:	f9 e0       	ldi	r31, 0x09	; 9
    6328:	80 81       	ld	r24, Z
    632a:	91 81       	ldd	r25, Z+1	; 0x01
    632c:	01 96       	adiw	r24, 0x01	; 1
    632e:	91 83       	std	Z+1, r25	; 0x01
    6330:	80 83       	st	Z, r24
    6332:	40 e6       	ldi	r20, 0x60	; 96
    6334:	50 e0       	ldi	r21, 0x00	; 0
    6336:	60 e0       	ldi	r22, 0x00	; 0
    6338:	70 e0       	ldi	r23, 0x00	; 0
    633a:	88 e1       	ldi	r24, 0x18	; 24
    633c:	99 e0       	ldi	r25, 0x09	; 9
    633e:	0e 94 73 5d 	call	0xbae6	; 0xbae6 <eeprom_update_block>
    6342:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <time_count_2.3229>
    6346:	10 92 32 07 	sts	0x0732, r1	; 0x800732 <time_count_2.3229+0x1>
    634a:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <time_count_2.3229+0x2>
    634e:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <time_count_2.3229+0x3>

		}
	}
}
    6352:	ff 90       	pop	r15
    6354:	ef 90       	pop	r14
    6356:	df 90       	pop	r13
    6358:	cf 90       	pop	r12
    635a:	08 95       	ret

0000635c <StartComp>:
		
	}
}


void StartComp(TimerHandle_t xTimer){
    635c:	8f 92       	push	r8
    635e:	9f 92       	push	r9
    6360:	af 92       	push	r10
    6362:	bf 92       	push	r11
    6364:	cf 92       	push	r12
    6366:	df 92       	push	r13
    6368:	ef 92       	push	r14
    636a:	ff 92       	push	r15
    636c:	0f 93       	push	r16
    636e:	1f 93       	push	r17
    6370:	ac 01       	movw	r20, r24
	
	portBASE_TYPE *pxTimerID;
	
	TickType_t period;	
	period=(TickType_t)EEpromData.TRV_Delay;
    6372:	20 91 1d 09 	lds	r18, 0x091D	; 0x80091d <EEpromData+0x5>
    period*=1000;
    6376:	30 e0       	ldi	r19, 0x00	; 0
    6378:	a8 ee       	ldi	r26, 0xE8	; 232
    637a:	b3 e0       	ldi	r27, 0x03	; 3
    637c:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    6380:	4b 01       	movw	r8, r22
    6382:	5c 01       	movw	r10, r24
	
	pxTimerID = pvTimerGetTimerID(xTimer);
    6384:	ca 01       	movw	r24, r20
    6386:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
//xSerialxPrintf(&xSerial3Port,"StartCompressor\r\n");
	if((*pxTimerID) == uxStartDelayCompTimer_1_ID) {
    638a:	fc 01       	movw	r30, r24
    638c:	80 81       	ld	r24, Z
    638e:	81 30       	cpi	r24, 0x01	; 1
    6390:	09 f0       	breq	.+2      	; 0x6394 <StartComp+0x38>
    6392:	61 c0       	rjmp	.+194    	; 0x6456 <StartComp+0xfa>
		Comp_1.switchToMode=false;
    6394:	e8 e7       	ldi	r30, 0x78	; 120
    6396:	f9 e0       	ldi	r31, 0x09	; 9
    6398:	10 82       	st	Z, r1
		 if(Comp_1.def) {timeTillDef=xTaskGetTickCount();Comp_1.stopdef=true;}
    639a:	81 85       	ldd	r24, Z+9	; 0x09
    639c:	88 23       	and	r24, r24
    639e:	69 f0       	breq	.+26     	; 0x63ba <StartComp+0x5e>
    63a0:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    63a4:	60 93 f9 08 	sts	0x08F9, r22	; 0x8008f9 <timeTillDef>
    63a8:	70 93 fa 08 	sts	0x08FA, r23	; 0x8008fa <timeTillDef+0x1>
    63ac:	80 93 fb 08 	sts	0x08FB, r24	; 0x8008fb <timeTillDef+0x2>
    63b0:	90 93 fc 08 	sts	0x08FC, r25	; 0x8008fc <timeTillDef+0x3>
    63b4:	81 e0       	ldi	r24, 0x01	; 1
    63b6:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <Comp_1+0xa>
		if(PIN_COMPRESSOR_1 == 0)
    63ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    63be:	85 fd       	sbrc	r24, 5
    63c0:	9c c0       	rjmp	.+312    	; 0x64fa <StartComp+0x19e>
		{   
			
			Comp_1.compOn=1;
    63c2:	81 e0       	ldi	r24, 0x01	; 1
    63c4:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <Comp_1+0xb>
			//if(Comp_2.compOn)vTaskDelay(5000);
			START_COMPRESSOR_1;
    63c8:	e2 e0       	ldi	r30, 0x02	; 2
    63ca:	f1 e0       	ldi	r31, 0x01	; 1
    63cc:	80 81       	ld	r24, Z
    63ce:	80 62       	ori	r24, 0x20	; 32
    63d0:	80 83       	st	Z, r24
			
			xSerialxPrintf(&xSerial3Port,"StartCompressor_1\r\n");
    63d2:	87 ee       	ldi	r24, 0xE7	; 231
    63d4:	93 e0       	ldi	r25, 0x03	; 3
    63d6:	9f 93       	push	r25
    63d8:	8f 93       	push	r24
    63da:	86 eb       	ldi	r24, 0xB6	; 182
    63dc:	97 e0       	ldi	r25, 0x07	; 7
    63de:	9f 93       	push	r25
    63e0:	8f 93       	push	r24
    63e2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			
			timeStartComp_1=time(&current_time);
    63e6:	83 e1       	ldi	r24, 0x13	; 19
    63e8:	99 e0       	ldi	r25, 0x09	; 9
    63ea:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    63ee:	60 93 07 09 	sts	0x0907, r22	; 0x800907 <timeStartComp_1>
    63f2:	70 93 08 09 	sts	0x0908, r23	; 0x800908 <timeStartComp_1+0x1>
    63f6:	80 93 09 09 	sts	0x0909, r24	; 0x800909 <timeStartComp_1+0x2>
    63fa:	90 93 0a 09 	sts	0x090A, r25	; 0x80090a <timeStartComp_1+0x3>
			EEpromData.number_turnon_compressor_1+=1;
    63fe:	e8 e1       	ldi	r30, 0x18	; 24
    6400:	f9 e0       	ldi	r31, 0x09	; 9
    6402:	86 ad       	ldd	r24, Z+62	; 0x3e
    6404:	97 ad       	ldd	r25, Z+63	; 0x3f
    6406:	01 96       	adiw	r24, 0x01	; 1
    6408:	97 af       	std	Z+63, r25	; 0x3f
    640a:	86 af       	std	Z+62, r24	; 0x3e
			//xSerialxPrintf(&xSerial3Port,"Number_turnon_Compressor_=%d\r\n",EEpromData.number_turnon_compressor_1);
			xTimerChangePeriod( xTStartCheckTrv_1,period, 100 );
    640c:	0f 2e       	mov	r0, r31
    640e:	f4 e6       	ldi	r31, 0x64	; 100
    6410:	cf 2e       	mov	r12, r31
    6412:	d1 2c       	mov	r13, r1
    6414:	e1 2c       	mov	r14, r1
    6416:	f1 2c       	mov	r15, r1
    6418:	f0 2d       	mov	r31, r0
    641a:	00 e0       	ldi	r16, 0x00	; 0
    641c:	10 e0       	ldi	r17, 0x00	; 0
    641e:	a5 01       	movw	r20, r10
    6420:	94 01       	movw	r18, r8
    6422:	64 e0       	ldi	r22, 0x04	; 4
    6424:	80 91 11 09 	lds	r24, 0x0911	; 0x800911 <xTStartCheckTrv_1>
    6428:	90 91 12 09 	lds	r25, 0x0912	; 0x800912 <xTStartCheckTrv_1+0x1>
    642c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
			xTimerStart(xTStartCheckErrors_1, 0);
    6430:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    6434:	9b 01       	movw	r18, r22
    6436:	ac 01       	movw	r20, r24
    6438:	c1 2c       	mov	r12, r1
    643a:	d1 2c       	mov	r13, r1
    643c:	76 01       	movw	r14, r12
    643e:	61 e0       	ldi	r22, 0x01	; 1
    6440:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <xTStartCheckErrors_1>
    6444:	90 91 b8 0a 	lds	r25, 0x0AB8	; 0x800ab8 <xTStartCheckErrors_1+0x1>
    6448:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    644c:	0f 90       	pop	r0
    644e:	0f 90       	pop	r0
    6450:	0f 90       	pop	r0
    6452:	0f 90       	pop	r0
    6454:	52 c0       	rjmp	.+164    	; 0x64fa <StartComp+0x19e>
	
		}
	}
	else if((*pxTimerID) == uxStartDelayCompTimer_2_ID) {
    6456:	8e 30       	cpi	r24, 0x0E	; 14
    6458:	09 f0       	breq	.+2      	; 0x645c <StartComp+0x100>
    645a:	4f c0       	rjmp	.+158    	; 0x64fa <StartComp+0x19e>
		xSerialxPrintf(&xSerial3Port,"StartCompressor_2\r\n");
    645c:	8b ef       	ldi	r24, 0xFB	; 251
    645e:	93 e0       	ldi	r25, 0x03	; 3
    6460:	9f 93       	push	r25
    6462:	8f 93       	push	r24
    6464:	86 eb       	ldi	r24, 0xB6	; 182
    6466:	97 e0       	ldi	r25, 0x07	; 7
    6468:	9f 93       	push	r25
    646a:	8f 93       	push	r24
    646c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_COMPRESSOR_2 == 0)
    6470:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6474:	0f 90       	pop	r0
    6476:	0f 90       	pop	r0
    6478:	0f 90       	pop	r0
    647a:	0f 90       	pop	r0
    647c:	86 fd       	sbrc	r24, 6
    647e:	3d c0       	rjmp	.+122    	; 0x64fa <StartComp+0x19e>
		{
			//if(Comp_1.compOn)vTaskDelay(5000);
			Comp_2.compOn=1;
    6480:	e2 e0       	ldi	r30, 0x02	; 2
    6482:	fa e0       	ldi	r31, 0x0A	; 10
    6484:	81 e0       	ldi	r24, 0x01	; 1
    6486:	83 87       	std	Z+11, r24	; 0x0b
			START_COMPRESSOR_2;
    6488:	a2 e0       	ldi	r26, 0x02	; 2
    648a:	b1 e0       	ldi	r27, 0x01	; 1
    648c:	8c 91       	ld	r24, X
    648e:	80 64       	ori	r24, 0x40	; 64
    6490:	8c 93       	st	X, r24
			
			
			Comp_2.switchToMode=false;
    6492:	10 82       	st	Z, r1
			
			timeStartComp_2=time(&current_time);
    6494:	83 e1       	ldi	r24, 0x13	; 19
    6496:	99 e0       	ldi	r25, 0x09	; 9
    6498:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    649c:	60 93 b9 0a 	sts	0x0AB9, r22	; 0x800ab9 <timeStartComp_2>
    64a0:	70 93 ba 0a 	sts	0x0ABA, r23	; 0x800aba <timeStartComp_2+0x1>
    64a4:	80 93 bb 0a 	sts	0x0ABB, r24	; 0x800abb <timeStartComp_2+0x2>
    64a8:	90 93 bc 0a 	sts	0x0ABC, r25	; 0x800abc <timeStartComp_2+0x3>
			EEpromData.number_turnon_compressor_2+=1;
    64ac:	ea e6       	ldi	r30, 0x6A	; 106
    64ae:	f9 e0       	ldi	r31, 0x09	; 9
    64b0:	80 81       	ld	r24, Z
    64b2:	91 81       	ldd	r25, Z+1	; 0x01
    64b4:	01 96       	adiw	r24, 0x01	; 1
    64b6:	91 83       	std	Z+1, r25	; 0x01
    64b8:	80 83       	st	Z, r24
			xTimerChangePeriod( xTStartCheckTrv_2,period, 100 );
    64ba:	0f 2e       	mov	r0, r31
    64bc:	f4 e6       	ldi	r31, 0x64	; 100
    64be:	cf 2e       	mov	r12, r31
    64c0:	d1 2c       	mov	r13, r1
    64c2:	e1 2c       	mov	r14, r1
    64c4:	f1 2c       	mov	r15, r1
    64c6:	f0 2d       	mov	r31, r0
    64c8:	00 e0       	ldi	r16, 0x00	; 0
    64ca:	10 e0       	ldi	r17, 0x00	; 0
    64cc:	a5 01       	movw	r20, r10
    64ce:	94 01       	movw	r18, r8
    64d0:	64 e0       	ldi	r22, 0x04	; 4
    64d2:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <xTStartCheckTrv_2>
    64d6:	90 91 ed 09 	lds	r25, 0x09ED	; 0x8009ed <xTStartCheckTrv_2+0x1>
    64da:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
			xTimerStart(xTStartCheckErrors_2, 0);
    64de:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    64e2:	9b 01       	movw	r18, r22
    64e4:	ac 01       	movw	r20, r24
    64e6:	c1 2c       	mov	r12, r1
    64e8:	d1 2c       	mov	r13, r1
    64ea:	76 01       	movw	r14, r12
    64ec:	61 e0       	ldi	r22, 0x01	; 1
    64ee:	80 91 ff 08 	lds	r24, 0x08FF	; 0x8008ff <xTStartCheckErrors_2>
    64f2:	90 91 00 09 	lds	r25, 0x0900	; 0x800900 <xTStartCheckErrors_2+0x1>
    64f6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		}
	}
	
	
}
    64fa:	1f 91       	pop	r17
    64fc:	0f 91       	pop	r16
    64fe:	ff 90       	pop	r15
    6500:	ef 90       	pop	r14
    6502:	df 90       	pop	r13
    6504:	cf 90       	pop	r12
    6506:	bf 90       	pop	r11
    6508:	af 90       	pop	r10
    650a:	9f 90       	pop	r9
    650c:	8f 90       	pop	r8
    650e:	08 95       	ret

00006510 <SwitchRev_1_Time>:
	
	
}
//-------------------------------------------------------------------------
void SwitchRev_1_Time(TimerHandle_t xTimer)
{
    6510:	cf 92       	push	r12
    6512:	df 92       	push	r13
    6514:	ef 92       	push	r14
    6516:	ff 92       	push	r15
    6518:	0f 93       	push	r16
    651a:	1f 93       	push	r17
    651c:	cf 93       	push	r28
    651e:	df 93       	push	r29
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    6520:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    6524:	ec 01       	movw	r28, r24
	
	//xSerialxPrintf(&xSerial3Port,"SwitchRev_1\r\n");
	
	if((*pxTimerID) == uxSwitchRevOne_1_ID)
    6526:	88 81       	ld	r24, Y
    6528:	8c 30       	cpi	r24, 0x0C	; 12
    652a:	19 f5       	brne	.+70     	; 0x6572 <SwitchRev_1_Time+0x62>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_ON_1_1\r\n");
    652c:	8f e0       	ldi	r24, 0x0F	; 15
    652e:	94 e0       	ldi	r25, 0x04	; 4
    6530:	9f 93       	push	r25
    6532:	8f 93       	push	r24
    6534:	86 eb       	ldi	r24, 0xB6	; 182
    6536:	97 e0       	ldi	r25, 0x07	; 7
    6538:	9f 93       	push	r25
    653a:	8f 93       	push	r24
    653c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_REV_VALVE_1 == 0){START_REV_VALVE_1;}//
    6540:	0f 90       	pop	r0
    6542:	0f 90       	pop	r0
    6544:	0f 90       	pop	r0
    6546:	0f 90       	pop	r0
    6548:	94 99       	sbic	0x12, 4	; 18
    654a:	02 c0       	rjmp	.+4      	; 0x6550 <SwitchRev_1_Time+0x40>
    654c:	a4 9a       	sbi	0x14, 4	; 20
    654e:	01 c0       	rjmp	.+2      	; 0x6552 <SwitchRev_1_Time+0x42>
		else {STOP_REV_VALVE_1;}//xSerialxPrintf(&xSerial3Port,"SwitchRev_OFF_1\r\n");
    6550:	a4 98       	cbi	0x14, 4	; 20
		xTimerStart(xSwitchRevTwo_1_time, 0);
    6552:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    6556:	9b 01       	movw	r18, r22
    6558:	ac 01       	movw	r20, r24
    655a:	c1 2c       	mov	r12, r1
    655c:	d1 2c       	mov	r13, r1
    655e:	76 01       	movw	r14, r12
    6560:	00 e0       	ldi	r16, 0x00	; 0
    6562:	10 e0       	ldi	r17, 0x00	; 0
    6564:	61 e0       	ldi	r22, 0x01	; 1
    6566:	80 91 92 0a 	lds	r24, 0x0A92	; 0x800a92 <xSwitchRevTwo_1_time>
    656a:	90 91 93 0a 	lds	r25, 0x0A93	; 0x800a93 <xSwitchRevTwo_1_time+0x1>
    656e:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if((*pxTimerID) == uxSwitchRevOne_2_ID)
    6572:	88 81       	ld	r24, Y
    6574:	88 31       	cpi	r24, 0x18	; 24
    6576:	19 f5       	brne	.+70     	; 0x65be <SwitchRev_1_Time+0xae>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_2_1\r\n");
    6578:	82 e2       	ldi	r24, 0x22	; 34
    657a:	94 e0       	ldi	r25, 0x04	; 4
    657c:	9f 93       	push	r25
    657e:	8f 93       	push	r24
    6580:	86 eb       	ldi	r24, 0xB6	; 182
    6582:	97 e0       	ldi	r25, 0x07	; 7
    6584:	9f 93       	push	r25
    6586:	8f 93       	push	r24
    6588:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		
		if(PIN_REV_VALVE_2 == 0)START_REV_VALVE_2;
    658c:	0f 90       	pop	r0
    658e:	0f 90       	pop	r0
    6590:	0f 90       	pop	r0
    6592:	0f 90       	pop	r0
    6594:	93 99       	sbic	0x12, 3	; 18
    6596:	02 c0       	rjmp	.+4      	; 0x659c <SwitchRev_1_Time+0x8c>
    6598:	a3 9a       	sbi	0x14, 3	; 20
    659a:	01 c0       	rjmp	.+2      	; 0x659e <SwitchRev_1_Time+0x8e>
		else STOP_REV_VALVE_2;
    659c:	a3 98       	cbi	0x14, 3	; 20
		xTimerStart(xSwitchRevTwo_2_time, 0);
    659e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    65a2:	9b 01       	movw	r18, r22
    65a4:	ac 01       	movw	r20, r24
    65a6:	c1 2c       	mov	r12, r1
    65a8:	d1 2c       	mov	r13, r1
    65aa:	76 01       	movw	r14, r12
    65ac:	00 e0       	ldi	r16, 0x00	; 0
    65ae:	10 e0       	ldi	r17, 0x00	; 0
    65b0:	61 e0       	ldi	r22, 0x01	; 1
    65b2:	80 91 ad 0a 	lds	r24, 0x0AAD	; 0x800aad <xSwitchRevTwo_2_time>
    65b6:	90 91 ae 0a 	lds	r25, 0x0AAE	; 0x800aae <xSwitchRevTwo_2_time+0x1>
    65ba:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
}
    65be:	df 91       	pop	r29
    65c0:	cf 91       	pop	r28
    65c2:	1f 91       	pop	r17
    65c4:	0f 91       	pop	r16
    65c6:	ff 90       	pop	r15
    65c8:	ef 90       	pop	r14
    65ca:	df 90       	pop	r13
    65cc:	cf 90       	pop	r12
    65ce:	08 95       	ret

000065d0 <activateTimers>:
const portBASE_TYPE uxStopDelayRevVTimer_2_ID		= 23;
const portBASE_TYPE uxSwitchRevOne_2_ID				= 24;
const portBASE_TYPE uxSwitchRevTwo_2_ID				= 25;

void activateTimers(xCompressor *comp)
{
    65d0:	ef 92       	push	r14
    65d2:	ff 92       	push	r15
    65d4:	0f 93       	push	r16
    65d6:	1f 93       	push	r17
    65d8:	cf 93       	push	r28
    65da:	df 93       	push	r29
    65dc:	ec 01       	movw	r28, r24
	
	
	if(comp->Index==1)
    65de:	fc 01       	movw	r30, r24
    65e0:	ee 58       	subi	r30, 0x8E	; 142
    65e2:	ff 4f       	sbci	r31, 0xFF	; 255
    65e4:	80 81       	ld	r24, Z
    65e6:	91 81       	ldd	r25, Z+1	; 0x01
    65e8:	01 97       	sbiw	r24, 0x01	; 1
    65ea:	09 f0       	breq	.+2      	; 0x65ee <activateTimers+0x1e>
    65ec:	fc c0       	rjmp	.+504    	; 0x67e6 <activateTimers+0x216>
	{
		
		xStartRevValve_1   =	xTimerCreate("StRevV_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayRevVTimer_1_ID, StartReversingValve);//(EEpromData.Revers_Valve_delay*1000) 
    65ee:	0f 2e       	mov	r0, r31
    65f0:	f0 e0       	ldi	r31, 0x00	; 0
    65f2:	ef 2e       	mov	r14, r31
    65f4:	fb e2       	ldi	r31, 0x2B	; 43
    65f6:	ff 2e       	mov	r15, r31
    65f8:	f0 2d       	mov	r31, r0
    65fa:	07 e1       	ldi	r16, 0x17	; 23
    65fc:	16 e0       	ldi	r17, 0x06	; 6
    65fe:	20 e0       	ldi	r18, 0x00	; 0
    6600:	48 e5       	ldi	r20, 0x58	; 88
    6602:	5b e1       	ldi	r21, 0x1B	; 27
    6604:	60 e0       	ldi	r22, 0x00	; 0
    6606:	70 e0       	ldi	r23, 0x00	; 0
    6608:	82 e3       	ldi	r24, 0x32	; 50
    660a:	94 e0       	ldi	r25, 0x04	; 4
    660c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6610:	90 93 c0 0a 	sts	0x0AC0, r25	; 0x800ac0 <xStartRevValve_1+0x1>
    6614:	80 93 bf 0a 	sts	0x0ABF, r24	; 0x800abf <xStartRevValve_1>
		xStartThreeWay     =	xTimerCreate("StThreeW",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayThreeVTimer_1_ID, StartThreeWay);//(EEpromData.Three_Way_delay*1000)
    6618:	0f 2e       	mov	r0, r31
    661a:	fa e8       	ldi	r31, 0x8A	; 138
    661c:	ef 2e       	mov	r14, r31
    661e:	fd e2       	ldi	r31, 0x2D	; 45
    6620:	ff 2e       	mov	r15, r31
    6622:	f0 2d       	mov	r31, r0
    6624:	06 e1       	ldi	r16, 0x16	; 22
    6626:	16 e0       	ldi	r17, 0x06	; 6
    6628:	20 e0       	ldi	r18, 0x00	; 0
    662a:	48 e5       	ldi	r20, 0x58	; 88
    662c:	5b e1       	ldi	r21, 0x1B	; 27
    662e:	60 e0       	ldi	r22, 0x00	; 0
    6630:	70 e0       	ldi	r23, 0x00	; 0
    6632:	8b e3       	ldi	r24, 0x3B	; 59
    6634:	94 e0       	ldi	r25, 0x04	; 4
    6636:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    663a:	90 93 f1 09 	sts	0x09F1, r25	; 0x8009f1 <xStartThreeWay+0x1>
    663e:	80 93 f0 09 	sts	0x09F0, r24	; 0x8009f0 <xStartThreeWay>
		xStartHeatPump_1   =	xTimerCreate("StHeatP_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayHeatPTimer_1_ID, StartHeatPump);//(EEpromData.HeatingPump_delay*1000) 
    6642:	0f 2e       	mov	r0, r31
    6644:	f4 e9       	ldi	r31, 0x94	; 148
    6646:	ef 2e       	mov	r14, r31
    6648:	f9 e2       	ldi	r31, 0x29	; 41
    664a:	ff 2e       	mov	r15, r31
    664c:	f0 2d       	mov	r31, r0
    664e:	08 e1       	ldi	r16, 0x18	; 24
    6650:	16 e0       	ldi	r17, 0x06	; 6
    6652:	20 e0       	ldi	r18, 0x00	; 0
    6654:	48 e5       	ldi	r20, 0x58	; 88
    6656:	5b e1       	ldi	r21, 0x1B	; 27
    6658:	60 e0       	ldi	r22, 0x00	; 0
    665a:	70 e0       	ldi	r23, 0x00	; 0
    665c:	84 e4       	ldi	r24, 0x44	; 68
    665e:	94 e0       	ldi	r25, 0x04	; 4
    6660:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6664:	90 93 95 0a 	sts	0x0A95, r25	; 0x800a95 <xStartHeatPump_1+0x1>
    6668:	80 93 94 0a 	sts	0x0A94, r24	; 0x800a94 <xStartHeatPump_1>
		xStartCompressor_1 =	xTimerCreate("StComp_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayCompTimer_1_ID, StartComp);//(EEpromData.Compressor_delay*1000)
    666c:	0f 2e       	mov	r0, r31
    666e:	fe ea       	ldi	r31, 0xAE	; 174
    6670:	ef 2e       	mov	r14, r31
    6672:	f1 e3       	ldi	r31, 0x31	; 49
    6674:	ff 2e       	mov	r15, r31
    6676:	f0 2d       	mov	r31, r0
    6678:	09 e1       	ldi	r16, 0x19	; 25
    667a:	16 e0       	ldi	r17, 0x06	; 6
    667c:	20 e0       	ldi	r18, 0x00	; 0
    667e:	48 e5       	ldi	r20, 0x58	; 88
    6680:	5b e1       	ldi	r21, 0x1B	; 27
    6682:	60 e0       	ldi	r22, 0x00	; 0
    6684:	70 e0       	ldi	r23, 0x00	; 0
    6686:	8e e4       	ldi	r24, 0x4E	; 78
    6688:	94 e0       	ldi	r25, 0x04	; 4
    668a:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    668e:	90 93 97 0a 	sts	0x0A97, r25	; 0x800a97 <xStartCompressor_1+0x1>
    6692:	80 93 96 0a 	sts	0x0A96, r24	; 0x800a96 <xStartCompressor_1>
		xTStartCheckErrors_1 =	xTimerCreate("ChErr_1",			300000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayChekErrTimer_1_ID, StartCheckErrors);
    6696:	0f 2e       	mov	r0, r31
    6698:	f4 ea       	ldi	r31, 0xA4	; 164
    669a:	ef 2e       	mov	r14, r31
    669c:	fa e2       	ldi	r31, 0x2A	; 42
    669e:	ff 2e       	mov	r15, r31
    66a0:	f0 2d       	mov	r31, r0
    66a2:	04 e1       	ldi	r16, 0x14	; 20
    66a4:	16 e0       	ldi	r17, 0x06	; 6
    66a6:	20 e0       	ldi	r18, 0x00	; 0
    66a8:	40 ee       	ldi	r20, 0xE0	; 224
    66aa:	53 e9       	ldi	r21, 0x93	; 147
    66ac:	64 e0       	ldi	r22, 0x04	; 4
    66ae:	70 e0       	ldi	r23, 0x00	; 0
    66b0:	87 e5       	ldi	r24, 0x57	; 87
    66b2:	94 e0       	ldi	r25, 0x04	; 4
    66b4:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    66b8:	90 93 b8 0a 	sts	0x0AB8, r25	; 0x800ab8 <xTStartCheckErrors_1+0x1>
    66bc:	80 93 b7 0a 	sts	0x0AB7, r24	; 0x800ab7 <xTStartCheckErrors_1>
		xTStartCheckTrv_1 =		xTimerCreate("ChTrv_1",			7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayChekTrvTimer_1_ID, StartCheckTrv);//(EEpromData.TRV_Delay*1000)
    66c0:	0f 2e       	mov	r0, r31
    66c2:	f4 ed       	ldi	r31, 0xD4	; 212
    66c4:	ef 2e       	mov	r14, r31
    66c6:	fa e2       	ldi	r31, 0x2A	; 42
    66c8:	ff 2e       	mov	r15, r31
    66ca:	f0 2d       	mov	r31, r0
    66cc:	05 e1       	ldi	r16, 0x15	; 21
    66ce:	16 e0       	ldi	r17, 0x06	; 6
    66d0:	20 e0       	ldi	r18, 0x00	; 0
    66d2:	48 e5       	ldi	r20, 0x58	; 88
    66d4:	5b e1       	ldi	r21, 0x1B	; 27
    66d6:	60 e0       	ldi	r22, 0x00	; 0
    66d8:	70 e0       	ldi	r23, 0x00	; 0
    66da:	8f e5       	ldi	r24, 0x5F	; 95
    66dc:	94 e0       	ldi	r25, 0x04	; 4
    66de:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    66e2:	90 93 12 09 	sts	0x0912, r25	; 0x800912 <xTStartCheckTrv_1+0x1>
    66e6:	80 93 11 09 	sts	0x0911, r24	; 0x800911 <xTStartCheckTrv_1>
		//----------stop

		xSwitchRevOne_1_time =	xTimerCreate("swRevOne_1",		5000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxSwitchRevOne_1_ID, SwitchRev_1_Time);
    66ea:	0f 2e       	mov	r0, r31
    66ec:	f8 e8       	ldi	r31, 0x88	; 136
    66ee:	ef 2e       	mov	r14, r31
    66f0:	f2 e3       	ldi	r31, 0x32	; 50
    66f2:	ff 2e       	mov	r15, r31
    66f4:	f0 2d       	mov	r31, r0
    66f6:	0f e0       	ldi	r16, 0x0F	; 15
    66f8:	16 e0       	ldi	r17, 0x06	; 6
    66fa:	20 e0       	ldi	r18, 0x00	; 0
    66fc:	48 e8       	ldi	r20, 0x88	; 136
    66fe:	53 e1       	ldi	r21, 0x13	; 19
    6700:	60 e0       	ldi	r22, 0x00	; 0
    6702:	70 e0       	ldi	r23, 0x00	; 0
    6704:	87 e6       	ldi	r24, 0x67	; 103
    6706:	94 e0       	ldi	r25, 0x04	; 4
    6708:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    670c:	90 93 0c 09 	sts	0x090C, r25	; 0x80090c <xSwitchRevOne_1_time+0x1>
    6710:	80 93 0b 09 	sts	0x090B, r24	; 0x80090b <xSwitchRevOne_1_time>
		xSwitchRevTwo_1_time =	xTimerCreate("swRevTwo_1",		5000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxSwitchRevTwo_1_ID, SwitchRev_2_Time);
    6714:	0f 2e       	mov	r0, r31
    6716:	fb e3       	ldi	r31, 0x3B	; 59
    6718:	ef 2e       	mov	r14, r31
    671a:	fa e2       	ldi	r31, 0x2A	; 42
    671c:	ff 2e       	mov	r15, r31
    671e:	f0 2d       	mov	r31, r0
    6720:	0e e0       	ldi	r16, 0x0E	; 14
    6722:	16 e0       	ldi	r17, 0x06	; 6
    6724:	20 e0       	ldi	r18, 0x00	; 0
    6726:	48 e8       	ldi	r20, 0x88	; 136
    6728:	53 e1       	ldi	r21, 0x13	; 19
    672a:	60 e0       	ldi	r22, 0x00	; 0
    672c:	70 e0       	ldi	r23, 0x00	; 0
    672e:	82 e7       	ldi	r24, 0x72	; 114
    6730:	94 e0       	ldi	r25, 0x04	; 4
    6732:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6736:	90 93 93 0a 	sts	0x0A93, r25	; 0x800a93 <xSwitchRevTwo_1_time+0x1>
    673a:	80 93 92 0a 	sts	0x0A92, r24	; 0x800a92 <xSwitchRevTwo_1_time>
		xStopHeatPump_1   =		xTimerCreate("offHeatP_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayHeatPTimer_1_ID, HeatPump_Stop);//(EEpromData.HeatingPump_delay*1000)
    673e:	0f 2e       	mov	r0, r31
    6740:	f0 e5       	ldi	r31, 0x50	; 80
    6742:	ef 2e       	mov	r14, r31
    6744:	fe e2       	ldi	r31, 0x2E	; 46
    6746:	ff 2e       	mov	r15, r31
    6748:	f0 2d       	mov	r31, r0
    674a:	03 e1       	ldi	r16, 0x13	; 19
    674c:	16 e0       	ldi	r17, 0x06	; 6
    674e:	20 e0       	ldi	r18, 0x00	; 0
    6750:	48 e5       	ldi	r20, 0x58	; 88
    6752:	5b e1       	ldi	r21, 0x1B	; 27
    6754:	60 e0       	ldi	r22, 0x00	; 0
    6756:	70 e0       	ldi	r23, 0x00	; 0
    6758:	8d e7       	ldi	r24, 0x7D	; 125
    675a:	94 e0       	ldi	r25, 0x04	; 4
    675c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6760:	90 93 06 09 	sts	0x0906, r25	; 0x800906 <xStopHeatPump_1+0x1>
    6764:	80 93 05 09 	sts	0x0905, r24	; 0x800905 <xStopHeatPump_1>
		xStopThreeWay     =		xTimerCreate("offThreeW",		7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayThreeVTimer_1_ID, ThreeWay_Stop);//(EEpromData.Three_Way_delay*1000)
    6768:	0f 2e       	mov	r0, r31
    676a:	fd e5       	ldi	r31, 0x5D	; 93
    676c:	ef 2e       	mov	r14, r31
    676e:	ff e2       	ldi	r31, 0x2F	; 47
    6770:	ff 2e       	mov	r15, r31
    6772:	f0 2d       	mov	r31, r0
    6774:	00 e1       	ldi	r16, 0x10	; 16
    6776:	16 e0       	ldi	r17, 0x06	; 6
    6778:	20 e0       	ldi	r18, 0x00	; 0
    677a:	48 e5       	ldi	r20, 0x58	; 88
    677c:	5b e1       	ldi	r21, 0x1B	; 27
    677e:	60 e0       	ldi	r22, 0x00	; 0
    6780:	70 e0       	ldi	r23, 0x00	; 0
    6782:	88 e8       	ldi	r24, 0x88	; 136
    6784:	94 e0       	ldi	r25, 0x04	; 4
    6786:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    678a:	90 93 ef 09 	sts	0x09EF, r25	; 0x8009ef <xStopThreeWay+0x1>
    678e:	80 93 ee 09 	sts	0x09EE, r24	; 0x8009ee <xStopThreeWay>
		xStopRevValve_1   =		xTimerCreate("offRevV_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayRevVTimer_1_ID, Revers_Stop);//(EEpromData.Revers_Valve_delay*1000)
    6792:	0f 2e       	mov	r0, r31
    6794:	f8 ee       	ldi	r31, 0xE8	; 232
    6796:	ef 2e       	mov	r14, r31
    6798:	ff e2       	ldi	r31, 0x2F	; 47
    679a:	ff 2e       	mov	r15, r31
    679c:	f0 2d       	mov	r31, r0
    679e:	01 e1       	ldi	r16, 0x11	; 17
    67a0:	16 e0       	ldi	r17, 0x06	; 6
    67a2:	20 e0       	ldi	r18, 0x00	; 0
    67a4:	48 e5       	ldi	r20, 0x58	; 88
    67a6:	5b e1       	ldi	r21, 0x1B	; 27
    67a8:	60 e0       	ldi	r22, 0x00	; 0
    67aa:	70 e0       	ldi	r23, 0x00	; 0
    67ac:	82 e9       	ldi	r24, 0x92	; 146
    67ae:	94 e0       	ldi	r25, 0x04	; 4
    67b0:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    67b4:	90 93 89 0a 	sts	0x0A89, r25	; 0x800a89 <xStopRevValve_1+0x1>
    67b8:	80 93 88 0a 	sts	0x0A88, r24	; 0x800a88 <xStopRevValve_1>
		xStopSource_1   =		xTimerCreate("offSourceP_1",	7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelaySourcePTimer_1_ID, SorcePump_Stop);//(EEpromData.Source_Pump_delay*1000)
    67bc:	0f 2e       	mov	r0, r31
    67be:	f0 ee       	ldi	r31, 0xE0	; 224
    67c0:	ef 2e       	mov	r14, r31
    67c2:	f0 e3       	ldi	r31, 0x30	; 48
    67c4:	ff 2e       	mov	r15, r31
    67c6:	f0 2d       	mov	r31, r0
    67c8:	02 e1       	ldi	r16, 0x12	; 18
    67ca:	16 e0       	ldi	r17, 0x06	; 6
    67cc:	20 e0       	ldi	r18, 0x00	; 0
    67ce:	48 e5       	ldi	r20, 0x58	; 88
    67d0:	5b e1       	ldi	r21, 0x1B	; 27
    67d2:	60 e0       	ldi	r22, 0x00	; 0
    67d4:	70 e0       	ldi	r23, 0x00	; 0
    67d6:	8c e9       	ldi	r24, 0x9C	; 156
    67d8:	94 e0       	ldi	r25, 0x04	; 4
    67da:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    67de:	90 93 10 09 	sts	0x0910, r25	; 0x800910 <xStopSource_1+0x1>
    67e2:	80 93 0f 09 	sts	0x090F, r24	; 0x80090f <xStopSource_1>
	}
	if (comp->Index==2)
    67e6:	ce 58       	subi	r28, 0x8E	; 142
    67e8:	df 4f       	sbci	r29, 0xFF	; 255
    67ea:	88 81       	ld	r24, Y
    67ec:	99 81       	ldd	r25, Y+1	; 0x01
    67ee:	02 97       	sbiw	r24, 0x02	; 2
    67f0:	09 f0       	breq	.+2      	; 0x67f4 <activateTimers+0x224>
    67f2:	d2 c0       	rjmp	.+420    	; 0x6998 <activateTimers+0x3c8>
	{
		
		xStartRevValve_2   =	xTimerCreate("StRevV_2",		7000, pdFALSE, (void*) &uxStartDelayRevVTimer_2_ID, StartReversingValve);
    67f4:	0f 2e       	mov	r0, r31
    67f6:	f0 e0       	ldi	r31, 0x00	; 0
    67f8:	ef 2e       	mov	r14, r31
    67fa:	fb e2       	ldi	r31, 0x2B	; 43
    67fc:	ff 2e       	mov	r15, r31
    67fe:	f0 2d       	mov	r31, r0
    6800:	0b e0       	ldi	r16, 0x0B	; 11
    6802:	16 e0       	ldi	r17, 0x06	; 6
    6804:	20 e0       	ldi	r18, 0x00	; 0
    6806:	48 e5       	ldi	r20, 0x58	; 88
    6808:	5b e1       	ldi	r21, 0x1B	; 27
    680a:	60 e0       	ldi	r22, 0x00	; 0
    680c:	70 e0       	ldi	r23, 0x00	; 0
    680e:	89 ea       	ldi	r24, 0xA9	; 169
    6810:	94 e0       	ldi	r25, 0x04	; 4
    6812:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6816:	90 93 81 0a 	sts	0x0A81, r25	; 0x800a81 <xStartRevValve_2+0x1>
    681a:	80 93 80 0a 	sts	0x0A80, r24	; 0x800a80 <xStartRevValve_2>
		xStartHeatPump_2   =	xTimerCreate("StHeatP_2",		7000, pdFALSE, (void*) &uxStartDelayHeatPTimer_2_ID, StartHeatPump);
    681e:	0f 2e       	mov	r0, r31
    6820:	f4 e9       	ldi	r31, 0x94	; 148
    6822:	ef 2e       	mov	r14, r31
    6824:	f9 e2       	ldi	r31, 0x29	; 41
    6826:	ff 2e       	mov	r15, r31
    6828:	f0 2d       	mov	r31, r0
    682a:	0c e0       	ldi	r16, 0x0C	; 12
    682c:	16 e0       	ldi	r17, 0x06	; 6
    682e:	20 e0       	ldi	r18, 0x00	; 0
    6830:	48 e5       	ldi	r20, 0x58	; 88
    6832:	5b e1       	ldi	r21, 0x1B	; 27
    6834:	60 e0       	ldi	r22, 0x00	; 0
    6836:	70 e0       	ldi	r23, 0x00	; 0
    6838:	82 eb       	ldi	r24, 0xB2	; 178
    683a:	94 e0       	ldi	r25, 0x04	; 4
    683c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6840:	90 93 f3 09 	sts	0x09F3, r25	; 0x8009f3 <xStartHeatPump_2+0x1>
    6844:	80 93 f2 09 	sts	0x09F2, r24	; 0x8009f2 <xStartHeatPump_2>
		xStartCompressor_2 =	xTimerCreate("StComp_2",		7000, pdFALSE, (void*) &uxStartDelayCompTimer_2_ID, StartComp);
    6848:	0f 2e       	mov	r0, r31
    684a:	fe ea       	ldi	r31, 0xAE	; 174
    684c:	ef 2e       	mov	r14, r31
    684e:	f1 e3       	ldi	r31, 0x31	; 49
    6850:	ff 2e       	mov	r15, r31
    6852:	f0 2d       	mov	r31, r0
    6854:	0d e0       	ldi	r16, 0x0D	; 13
    6856:	16 e0       	ldi	r17, 0x06	; 6
    6858:	20 e0       	ldi	r18, 0x00	; 0
    685a:	48 e5       	ldi	r20, 0x58	; 88
    685c:	5b e1       	ldi	r21, 0x1B	; 27
    685e:	60 e0       	ldi	r22, 0x00	; 0
    6860:	70 e0       	ldi	r23, 0x00	; 0
    6862:	8c eb       	ldi	r24, 0xBC	; 188
    6864:	94 e0       	ldi	r25, 0x04	; 4
    6866:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    686a:	90 93 a9 0a 	sts	0x0AA9, r25	; 0x800aa9 <xStartCompressor_2+0x1>
    686e:	80 93 a8 0a 	sts	0x0AA8, r24	; 0x800aa8 <xStartCompressor_2>
		xTStartCheckErrors_2 =	xTimerCreate("ChErr_2",			300000, pdFALSE, (void*) &uxStartDelayChekErrTimer_2_ID, StartCheckErrors);
    6872:	0f 2e       	mov	r0, r31
    6874:	f4 ea       	ldi	r31, 0xA4	; 164
    6876:	ef 2e       	mov	r14, r31
    6878:	fa e2       	ldi	r31, 0x2A	; 42
    687a:	ff 2e       	mov	r15, r31
    687c:	f0 2d       	mov	r31, r0
    687e:	09 e0       	ldi	r16, 0x09	; 9
    6880:	16 e0       	ldi	r17, 0x06	; 6
    6882:	20 e0       	ldi	r18, 0x00	; 0
    6884:	40 ee       	ldi	r20, 0xE0	; 224
    6886:	53 e9       	ldi	r21, 0x93	; 147
    6888:	64 e0       	ldi	r22, 0x04	; 4
    688a:	70 e0       	ldi	r23, 0x00	; 0
    688c:	85 ec       	ldi	r24, 0xC5	; 197
    688e:	94 e0       	ldi	r25, 0x04	; 4
    6890:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6894:	90 93 00 09 	sts	0x0900, r25	; 0x800900 <xTStartCheckErrors_2+0x1>
    6898:	80 93 ff 08 	sts	0x08FF, r24	; 0x8008ff <xTStartCheckErrors_2>
		xTStartCheckTrv_2 =		xTimerCreate("ChTrv_2",			7000, pdFALSE, (void*) &uxStartDelayChekTrvTimer_2_ID, StartCheckTrv);
    689c:	0f 2e       	mov	r0, r31
    689e:	f4 ed       	ldi	r31, 0xD4	; 212
    68a0:	ef 2e       	mov	r14, r31
    68a2:	fa e2       	ldi	r31, 0x2A	; 42
    68a4:	ff 2e       	mov	r15, r31
    68a6:	f0 2d       	mov	r31, r0
    68a8:	0a e0       	ldi	r16, 0x0A	; 10
    68aa:	16 e0       	ldi	r17, 0x06	; 6
    68ac:	20 e0       	ldi	r18, 0x00	; 0
    68ae:	48 e5       	ldi	r20, 0x58	; 88
    68b0:	5b e1       	ldi	r21, 0x1B	; 27
    68b2:	60 e0       	ldi	r22, 0x00	; 0
    68b4:	70 e0       	ldi	r23, 0x00	; 0
    68b6:	8d ec       	ldi	r24, 0xCD	; 205
    68b8:	94 e0       	ldi	r25, 0x04	; 4
    68ba:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    68be:	90 93 ed 09 	sts	0x09ED, r25	; 0x8009ed <xTStartCheckTrv_2+0x1>
    68c2:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <xTStartCheckTrv_2>
		//---------stop
		xSwitchRevOne_2_time =	xTimerCreate("swRevOne_2",		5000, pdFALSE, (void*) &uxSwitchRevOne_2_ID, SwitchRev_1_Time);
    68c6:	0f 2e       	mov	r0, r31
    68c8:	f8 e8       	ldi	r31, 0x88	; 136
    68ca:	ef 2e       	mov	r14, r31
    68cc:	f2 e3       	ldi	r31, 0x32	; 50
    68ce:	ff 2e       	mov	r15, r31
    68d0:	f0 2d       	mov	r31, r0
    68d2:	05 e0       	ldi	r16, 0x05	; 5
    68d4:	16 e0       	ldi	r17, 0x06	; 6
    68d6:	20 e0       	ldi	r18, 0x00	; 0
    68d8:	48 e8       	ldi	r20, 0x88	; 136
    68da:	53 e1       	ldi	r21, 0x13	; 19
    68dc:	60 e0       	ldi	r22, 0x00	; 0
    68de:	70 e0       	ldi	r23, 0x00	; 0
    68e0:	85 ed       	ldi	r24, 0xD5	; 213
    68e2:	94 e0       	ldi	r25, 0x04	; 4
    68e4:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    68e8:	90 93 c9 0a 	sts	0x0AC9, r25	; 0x800ac9 <xSwitchRevOne_2_time+0x1>
    68ec:	80 93 c8 0a 	sts	0x0AC8, r24	; 0x800ac8 <xSwitchRevOne_2_time>
		xSwitchRevTwo_2_time =	xTimerCreate("swRevTwo_2",		5000, pdFALSE, (void*) &uxSwitchRevTwo_2_ID, SwitchRev_2_Time);
    68f0:	0f 2e       	mov	r0, r31
    68f2:	fb e3       	ldi	r31, 0x3B	; 59
    68f4:	ef 2e       	mov	r14, r31
    68f6:	fa e2       	ldi	r31, 0x2A	; 42
    68f8:	ff 2e       	mov	r15, r31
    68fa:	f0 2d       	mov	r31, r0
    68fc:	04 e0       	ldi	r16, 0x04	; 4
    68fe:	16 e0       	ldi	r17, 0x06	; 6
    6900:	20 e0       	ldi	r18, 0x00	; 0
    6902:	48 e8       	ldi	r20, 0x88	; 136
    6904:	53 e1       	ldi	r21, 0x13	; 19
    6906:	60 e0       	ldi	r22, 0x00	; 0
    6908:	70 e0       	ldi	r23, 0x00	; 0
    690a:	80 ee       	ldi	r24, 0xE0	; 224
    690c:	94 e0       	ldi	r25, 0x04	; 4
    690e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6912:	90 93 ae 0a 	sts	0x0AAE, r25	; 0x800aae <xSwitchRevTwo_2_time+0x1>
    6916:	80 93 ad 0a 	sts	0x0AAD, r24	; 0x800aad <xSwitchRevTwo_2_time>
		xStopHeatPump_2   =		xTimerCreate("offHeatP_2",		7000, pdFALSE, (void*) &uxStopDelayHeatPTimer_2_ID, HeatPump_Stop);
    691a:	0f 2e       	mov	r0, r31
    691c:	f0 e5       	ldi	r31, 0x50	; 80
    691e:	ef 2e       	mov	r14, r31
    6920:	fe e2       	ldi	r31, 0x2E	; 46
    6922:	ff 2e       	mov	r15, r31
    6924:	f0 2d       	mov	r31, r0
    6926:	08 e0       	ldi	r16, 0x08	; 8
    6928:	16 e0       	ldi	r17, 0x06	; 6
    692a:	20 e0       	ldi	r18, 0x00	; 0
    692c:	48 e5       	ldi	r20, 0x58	; 88
    692e:	5b e1       	ldi	r21, 0x1B	; 27
    6930:	60 e0       	ldi	r22, 0x00	; 0
    6932:	70 e0       	ldi	r23, 0x00	; 0
    6934:	8b ee       	ldi	r24, 0xEB	; 235
    6936:	94 e0       	ldi	r25, 0x04	; 4
    6938:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    693c:	90 93 87 0a 	sts	0x0A87, r25	; 0x800a87 <xStopHeatPump_2+0x1>
    6940:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <xStopHeatPump_2>
		xStopRevValve_2    =	xTimerCreate("offRevV_2",		7000, pdFALSE, (void*) &uxStopDelayRevVTimer_2_ID, Revers_Stop);
    6944:	0f 2e       	mov	r0, r31
    6946:	f8 ee       	ldi	r31, 0xE8	; 232
    6948:	ef 2e       	mov	r14, r31
    694a:	ff e2       	ldi	r31, 0x2F	; 47
    694c:	ff 2e       	mov	r15, r31
    694e:	f0 2d       	mov	r31, r0
    6950:	06 e0       	ldi	r16, 0x06	; 6
    6952:	16 e0       	ldi	r17, 0x06	; 6
    6954:	20 e0       	ldi	r18, 0x00	; 0
    6956:	48 e5       	ldi	r20, 0x58	; 88
    6958:	5b e1       	ldi	r21, 0x1B	; 27
    695a:	60 e0       	ldi	r22, 0x00	; 0
    695c:	70 e0       	ldi	r23, 0x00	; 0
    695e:	86 ef       	ldi	r24, 0xF6	; 246
    6960:	94 e0       	ldi	r25, 0x04	; 4
    6962:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6966:	90 93 0e 09 	sts	0x090E, r25	; 0x80090e <xStopRevValve_2+0x1>
    696a:	80 93 0d 09 	sts	0x090D, r24	; 0x80090d <xStopRevValve_2>
		xStopSource_2   =		xTimerCreate("offSourceP_2",	7000, pdFALSE, (void*) &uxStopDelaySourcePTimer_2_ID, SorcePump_Stop);
    696e:	0f 2e       	mov	r0, r31
    6970:	f0 ee       	ldi	r31, 0xE0	; 224
    6972:	ef 2e       	mov	r14, r31
    6974:	f0 e3       	ldi	r31, 0x30	; 48
    6976:	ff 2e       	mov	r15, r31
    6978:	f0 2d       	mov	r31, r0
    697a:	07 e0       	ldi	r16, 0x07	; 7
    697c:	16 e0       	ldi	r17, 0x06	; 6
    697e:	20 e0       	ldi	r18, 0x00	; 0
    6980:	48 e5       	ldi	r20, 0x58	; 88
    6982:	5b e1       	ldi	r21, 0x1B	; 27
    6984:	60 e0       	ldi	r22, 0x00	; 0
    6986:	70 e0       	ldi	r23, 0x00	; 0
    6988:	80 e0       	ldi	r24, 0x00	; 0
    698a:	95 e0       	ldi	r25, 0x05	; 5
    698c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6990:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <xStopSource_2+0x1>
    6994:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <xStopSource_2>
	}
	
	
}
    6998:	df 91       	pop	r29
    699a:	cf 91       	pop	r28
    699c:	1f 91       	pop	r17
    699e:	0f 91       	pop	r16
    69a0:	ff 90       	pop	r15
    69a2:	ef 90       	pop	r14
    69a4:	08 95       	ret

000069a6 <startDefrost>:
//------------------------------------------------
void startDefrost(xCompressor *comp,xEEdata* eeData){
    69a6:	fb 01       	movw	r30, r22
	_heatWater=eeData->heatWater;
    69a8:	81 e0       	ldi	r24, 0x01	; 1
    69aa:	95 a1       	ldd	r25, Z+37	; 0x25
    69ac:	91 11       	cpse	r25, r1
    69ae:	01 c0       	rjmp	.+2      	; 0x69b2 <startDefrost+0xc>
    69b0:	80 e0       	ldi	r24, 0x00	; 0
    69b2:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <_heatWater>
	_heat =eeData->heat;
    69b6:	81 e0       	ldi	r24, 0x01	; 1
    69b8:	96 a1       	ldd	r25, Z+38	; 0x26
    69ba:	91 11       	cpse	r25, r1
    69bc:	01 c0       	rjmp	.+2      	; 0x69c0 <startDefrost+0x1a>
    69be:	80 e0       	ldi	r24, 0x00	; 0
    69c0:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <_heat>
	_cool =eeData->cool;
    69c4:	81 e0       	ldi	r24, 0x01	; 1
    69c6:	97 a1       	ldd	r25, Z+39	; 0x27
    69c8:	91 11       	cpse	r25, r1
    69ca:	01 c0       	rjmp	.+2      	; 0x69ce <startDefrost+0x28>
    69cc:	80 e0       	ldi	r24, 0x00	; 0
    69ce:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <_cool>
	eeData->heatWater=false;
    69d2:	15 a2       	std	Z+37, r1	; 0x25
	eeData->heat =false;
    69d4:	16 a2       	std	Z+38, r1	; 0x26
	eeData->cool =true;
    69d6:	81 e0       	ldi	r24, 0x01	; 1
    69d8:	87 a3       	std	Z+39, r24	; 0x27
    69da:	08 95       	ret

000069dc <stopDefrost>:
	//Comp_Stop(comp);
		
}
void stopDefrost(xCompressor *comp,xEEdata* eeData){
    69dc:	fb 01       	movw	r30, r22
	
	//Comp_Stop(comp);
	//eeData->heatWater=false;
	//eeData->heat =true;
	//eeData->cool =false;
	eeData->heatWater=_heatWater;
    69de:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <_heatWater>
    69e2:	85 a3       	std	Z+37, r24	; 0x25
	eeData->heat =_heat;
    69e4:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <_heat>
    69e8:	86 a3       	std	Z+38, r24	; 0x26
	eeData->cool =_cool;
    69ea:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <_cool>
    69ee:	87 a3       	std	Z+39, r24	; 0x27
    69f0:	08 95       	ret

000069f2 <StarSoursePump>:




//------------------------------------------------
void StarSoursePump(xCompressor *comp){
    69f2:	4f 92       	push	r4
    69f4:	5f 92       	push	r5
    69f6:	6f 92       	push	r6
    69f8:	7f 92       	push	r7
    69fa:	af 92       	push	r10
    69fc:	bf 92       	push	r11
    69fe:	cf 92       	push	r12
    6a00:	df 92       	push	r13
    6a02:	ef 92       	push	r14
    6a04:	ff 92       	push	r15
    6a06:	0f 93       	push	r16
    6a08:	1f 93       	push	r17
    6a0a:	cf 93       	push	r28
    6a0c:	df 93       	push	r29
    6a0e:	5c 01       	movw	r10, r24
TickType_t period;

	period=(TickType_t)EEpromData.Revers_Valve_delay;
    6a10:	20 91 1a 09 	lds	r18, 0x091A	; 0x80091a <EEpromData+0x2>
	period*=1000;
    6a14:	30 e0       	ldi	r19, 0x00	; 0
    6a16:	a8 ee       	ldi	r26, 0xE8	; 232
    6a18:	b3 e0       	ldi	r27, 0x03	; 3
    6a1a:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    6a1e:	2b 01       	movw	r4, r22
    6a20:	3c 01       	movw	r6, r24
	xSerialxPrintf(&xSerial3Port,"SoursePump_f_%d\r\n",comp->Index);
    6a22:	e5 01       	movw	r28, r10
    6a24:	ce 58       	subi	r28, 0x8E	; 142
    6a26:	df 4f       	sbci	r29, 0xFF	; 255
    6a28:	89 81       	ldd	r24, Y+1	; 0x01
    6a2a:	8f 93       	push	r24
    6a2c:	88 81       	ld	r24, Y
    6a2e:	8f 93       	push	r24
    6a30:	8d e0       	ldi	r24, 0x0D	; 13
    6a32:	95 e0       	ldi	r25, 0x05	; 5
    6a34:	9f 93       	push	r25
    6a36:	8f 93       	push	r24
    6a38:	86 eb       	ldi	r24, 0xB6	; 182
    6a3a:	97 e0       	ldi	r25, 0x07	; 7
    6a3c:	9f 93       	push	r25
    6a3e:	8f 93       	push	r24
    6a40:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(comp->Index == 1)
    6a44:	0f 90       	pop	r0
    6a46:	0f 90       	pop	r0
    6a48:	0f 90       	pop	r0
    6a4a:	0f 90       	pop	r0
    6a4c:	0f 90       	pop	r0
    6a4e:	0f 90       	pop	r0
    6a50:	88 81       	ld	r24, Y
    6a52:	99 81       	ldd	r25, Y+1	; 0x01
    6a54:	01 97       	sbiw	r24, 0x01	; 1
    6a56:	09 f0       	breq	.+2      	; 0x6a5a <StarSoursePump+0x68>
    6a58:	4a c0       	rjmp	.+148    	; 0x6aee <StarSoursePump+0xfc>
	{
		
		Comp_1.error=0;
    6a5a:	10 92 e9 09 	sts	0x09E9, r1	; 0x8009e9 <Comp_1+0x71>
    6a5e:	10 92 e8 09 	sts	0x09E8, r1	; 0x8009e8 <Comp_1+0x70>
		Comp_1.switchToMode=true;
    6a62:	81 e0       	ldi	r24, 0x01	; 1
    6a64:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <Comp_1>
		if(PIN_SOURCE_PUMP_1 == 0 && !comp->def )
    6a68:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6a6c:	81 fd       	sbrc	r24, 1
    6a6e:	2d c0       	rjmp	.+90     	; 0x6aca <StarSoursePump+0xd8>
    6a70:	f5 01       	movw	r30, r10
    6a72:	81 85       	ldd	r24, Z+9	; 0x09
    6a74:	81 11       	cpse	r24, r1
    6a76:	29 c0       	rjmp	.+82     	; 0x6aca <StarSoursePump+0xd8>
		{
			START_SOURCE_PUMP_1;
    6a78:	e2 e0       	ldi	r30, 0x02	; 2
    6a7a:	f1 e0       	ldi	r31, 0x01	; 1
    6a7c:	80 81       	ld	r24, Z
    6a7e:	82 60       	ori	r24, 0x02	; 2
    6a80:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StartSourcePump_1\r\n");
    6a82:	8f e1       	ldi	r24, 0x1F	; 31
    6a84:	95 e0       	ldi	r25, 0x05	; 5
    6a86:	9f 93       	push	r25
    6a88:	8f 93       	push	r24
    6a8a:	86 eb       	ldi	r24, 0xB6	; 182
    6a8c:	97 e0       	ldi	r25, 0x07	; 7
    6a8e:	9f 93       	push	r25
    6a90:	8f 93       	push	r24
    6a92:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->srcPOn=1;
    6a96:	81 e0       	ldi	r24, 0x01	; 1
    6a98:	f5 01       	movw	r30, r10
    6a9a:	87 87       	std	Z+15, r24	; 0x0f
			timeStartSrcP_1=time(&current_time);
    6a9c:	83 e1       	ldi	r24, 0x13	; 19
    6a9e:	99 e0       	ldi	r25, 0x09	; 9
    6aa0:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6aa4:	60 93 f4 09 	sts	0x09F4, r22	; 0x8009f4 <timeStartSrcP_1>
    6aa8:	70 93 f5 09 	sts	0x09F5, r23	; 0x8009f5 <timeStartSrcP_1+0x1>
    6aac:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <timeStartSrcP_1+0x2>
    6ab0:	90 93 f7 09 	sts	0x09F7, r25	; 0x8009f7 <timeStartSrcP_1+0x3>
			EEpromData.number_turnon_source_1+=1;
    6ab4:	e8 e5       	ldi	r30, 0x58	; 88
    6ab6:	f9 e0       	ldi	r31, 0x09	; 9
    6ab8:	80 81       	ld	r24, Z
    6aba:	91 81       	ldd	r25, Z+1	; 0x01
    6abc:	01 96       	adiw	r24, 0x01	; 1
    6abe:	91 83       	std	Z+1, r25	; 0x01
    6ac0:	80 83       	st	Z, r24
    6ac2:	0f 90       	pop	r0
    6ac4:	0f 90       	pop	r0
    6ac6:	0f 90       	pop	r0
    6ac8:	0f 90       	pop	r0
			//xSerialxPrintf(&xSerial3Port,"Number_turnon_source_=%d\r\n",EEpromData.number_turnon_source_1);
			
						
		}
		xTimerChangePeriod( xStartRevValve_1,period, 100 );
    6aca:	0f 2e       	mov	r0, r31
    6acc:	f4 e6       	ldi	r31, 0x64	; 100
    6ace:	cf 2e       	mov	r12, r31
    6ad0:	d1 2c       	mov	r13, r1
    6ad2:	e1 2c       	mov	r14, r1
    6ad4:	f1 2c       	mov	r15, r1
    6ad6:	f0 2d       	mov	r31, r0
    6ad8:	00 e0       	ldi	r16, 0x00	; 0
    6ada:	10 e0       	ldi	r17, 0x00	; 0
    6adc:	a3 01       	movw	r20, r6
    6ade:	92 01       	movw	r18, r4
    6ae0:	64 e0       	ldi	r22, 0x04	; 4
    6ae2:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <xStartRevValve_1>
    6ae6:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <xStartRevValve_1+0x1>
    6aea:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if(comp->Index == 2)
    6aee:	f5 01       	movw	r30, r10
    6af0:	ee 58       	subi	r30, 0x8E	; 142
    6af2:	ff 4f       	sbci	r31, 0xFF	; 255
    6af4:	80 81       	ld	r24, Z
    6af6:	91 81       	ldd	r25, Z+1	; 0x01
    6af8:	02 97       	sbiw	r24, 0x02	; 2
    6afa:	09 f0       	breq	.+2      	; 0x6afe <StarSoursePump+0x10c>
    6afc:	4a c0       	rjmp	.+148    	; 0x6b92 <StarSoursePump+0x1a0>
	{
		Comp_2.error=0;
    6afe:	10 92 73 0a 	sts	0x0A73, r1	; 0x800a73 <Comp_2+0x71>
    6b02:	10 92 72 0a 	sts	0x0A72, r1	; 0x800a72 <Comp_2+0x70>
		Comp_1.switchToMode=true;
    6b06:	81 e0       	ldi	r24, 0x01	; 1
    6b08:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <Comp_1>
		
		xSerialxPrintf(&xSerial3Port,"StartSourcePump_2\r\n");
    6b0c:	83 e3       	ldi	r24, 0x33	; 51
    6b0e:	95 e0       	ldi	r25, 0x05	; 5
    6b10:	9f 93       	push	r25
    6b12:	8f 93       	push	r24
    6b14:	86 eb       	ldi	r24, 0xB6	; 182
    6b16:	97 e0       	ldi	r25, 0x07	; 7
    6b18:	9f 93       	push	r25
    6b1a:	8f 93       	push	r24
    6b1c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		
		if(PIN_SOURCE_PUMP_2 == 0 && !comp->def)
    6b20:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6b24:	0f 90       	pop	r0
    6b26:	0f 90       	pop	r0
    6b28:	0f 90       	pop	r0
    6b2a:	0f 90       	pop	r0
    6b2c:	82 fd       	sbrc	r24, 2
    6b2e:	1f c0       	rjmp	.+62     	; 0x6b6e <StarSoursePump+0x17c>
    6b30:	f5 01       	movw	r30, r10
    6b32:	81 85       	ldd	r24, Z+9	; 0x09
    6b34:	81 11       	cpse	r24, r1
    6b36:	1b c0       	rjmp	.+54     	; 0x6b6e <StarSoursePump+0x17c>
		{
			START_SOURCE_PUMP_2;						
    6b38:	e2 e0       	ldi	r30, 0x02	; 2
    6b3a:	f1 e0       	ldi	r31, 0x01	; 1
    6b3c:	80 81       	ld	r24, Z
    6b3e:	84 60       	ori	r24, 0x04	; 4
    6b40:	80 83       	st	Z, r24
			comp->srcPOn=1;
    6b42:	81 e0       	ldi	r24, 0x01	; 1
    6b44:	f5 01       	movw	r30, r10
    6b46:	87 87       	std	Z+15, r24	; 0x0f
			timeStartSrcP_2=time(&current_time);
    6b48:	83 e1       	ldi	r24, 0x13	; 19
    6b4a:	99 e0       	ldi	r25, 0x09	; 9
    6b4c:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6b50:	60 93 b3 0a 	sts	0x0AB3, r22	; 0x800ab3 <timeStartSrcP_2>
    6b54:	70 93 b4 0a 	sts	0x0AB4, r23	; 0x800ab4 <timeStartSrcP_2+0x1>
    6b58:	80 93 b5 0a 	sts	0x0AB5, r24	; 0x800ab5 <timeStartSrcP_2+0x2>
    6b5c:	90 93 b6 0a 	sts	0x0AB6, r25	; 0x800ab6 <timeStartSrcP_2+0x3>
			EEpromData.number_turnon_source_2+=1;
    6b60:	ec e6       	ldi	r30, 0x6C	; 108
    6b62:	f9 e0       	ldi	r31, 0x09	; 9
    6b64:	80 81       	ld	r24, Z
    6b66:	91 81       	ldd	r25, Z+1	; 0x01
    6b68:	01 96       	adiw	r24, 0x01	; 1
    6b6a:	91 83       	std	Z+1, r25	; 0x01
    6b6c:	80 83       	st	Z, r24
						
		}
		xTimerChangePeriod( xStartRevValve_2,period, 100 );
    6b6e:	0f 2e       	mov	r0, r31
    6b70:	f4 e6       	ldi	r31, 0x64	; 100
    6b72:	cf 2e       	mov	r12, r31
    6b74:	d1 2c       	mov	r13, r1
    6b76:	e1 2c       	mov	r14, r1
    6b78:	f1 2c       	mov	r15, r1
    6b7a:	f0 2d       	mov	r31, r0
    6b7c:	00 e0       	ldi	r16, 0x00	; 0
    6b7e:	10 e0       	ldi	r17, 0x00	; 0
    6b80:	a3 01       	movw	r20, r6
    6b82:	92 01       	movw	r18, r4
    6b84:	64 e0       	ldi	r22, 0x04	; 4
    6b86:	80 91 80 0a 	lds	r24, 0x0A80	; 0x800a80 <xStartRevValve_2>
    6b8a:	90 91 81 0a 	lds	r25, 0x0A81	; 0x800a81 <xStartRevValve_2+0x1>
    6b8e:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
}
    6b92:	df 91       	pop	r29
    6b94:	cf 91       	pop	r28
    6b96:	1f 91       	pop	r17
    6b98:	0f 91       	pop	r16
    6b9a:	ff 90       	pop	r15
    6b9c:	ef 90       	pop	r14
    6b9e:	df 90       	pop	r13
    6ba0:	cf 90       	pop	r12
    6ba2:	bf 90       	pop	r11
    6ba4:	af 90       	pop	r10
    6ba6:	7f 90       	pop	r7
    6ba8:	6f 90       	pop	r6
    6baa:	5f 90       	pop	r5
    6bac:	4f 90       	pop	r4
    6bae:	08 95       	ret

00006bb0 <selmode>:
   
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t selmode(xEEdata* eeData)
{
    6bb0:	fc 01       	movw	r30, r24

	if(eeData->heatWater && !eeData->heat && !eeData->cool)
    6bb2:	85 a1       	ldd	r24, Z+37	; 0x25
    6bb4:	88 23       	and	r24, r24
    6bb6:	39 f0       	breq	.+14     	; 0x6bc6 <selmode+0x16>
    6bb8:	86 a1       	ldd	r24, Z+38	; 0x26
    6bba:	81 11       	cpse	r24, r1
    6bbc:	1a c0       	rjmp	.+52     	; 0x6bf2 <selmode+0x42>
    6bbe:	97 a1       	ldd	r25, Z+39	; 0x27
    6bc0:	91 11       	cpse	r25, r1
    6bc2:	1c c0       	rjmp	.+56     	; 0x6bfc <selmode+0x4c>
    6bc4:	0d c0       	rjmp	.+26     	; 0x6be0 <selmode+0x30>
	{
		return DHW;
		
	}
	if(!eeData->heatWater && eeData->heat && !eeData->cool)
    6bc6:	96 a1       	ldd	r25, Z+38	; 0x26
    6bc8:	99 23       	and	r25, r25
    6bca:	71 f0       	breq	.+28     	; 0x6be8 <selmode+0x38>
    6bcc:	97 a1       	ldd	r25, Z+39	; 0x27
    6bce:	91 11       	cpse	r25, r1
    6bd0:	17 c0       	rjmp	.+46     	; 0x6c00 <selmode+0x50>
	{
		return HEAT;
    6bd2:	82 e0       	ldi	r24, 0x02	; 2
    6bd4:	08 95       	ret
	}
	if(eeData->heatWater && eeData->heat && !eeData->cool)
	{
		return HEAT_DHW;
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
    6bd6:	87 a1       	ldd	r24, Z+39	; 0x27
    6bd8:	88 23       	and	r24, r24
    6bda:	91 f0       	breq	.+36     	; 0x6c00 <selmode+0x50>
	{
		return COOL_DHW;
    6bdc:	85 e0       	ldi	r24, 0x05	; 5
    6bde:	08 95       	ret
uint8_t selmode(xEEdata* eeData)
{

	if(eeData->heatWater && !eeData->heat && !eeData->cool)
	{
		return DHW;
    6be0:	81 e0       	ldi	r24, 0x01	; 1
    6be2:	08 95       	ret
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
	{
		return COOL_DHW;
	}
	else return OFF;
    6be4:	80 e0       	ldi	r24, 0x00	; 0
    6be6:	08 95       	ret
	}
	if(!eeData->heatWater && eeData->heat && !eeData->cool)
	{
		return HEAT;
	}
	if(!eeData->heatWater && !eeData->heat && eeData->cool)
    6be8:	87 a1       	ldd	r24, Z+39	; 0x27
    6bea:	88 23       	and	r24, r24
    6bec:	49 f0       	breq	.+18     	; 0x6c00 <selmode+0x50>
	{
		return COOL;
    6bee:	83 e0       	ldi	r24, 0x03	; 3
    6bf0:	08 95       	ret
	}
	if(eeData->heatWater && eeData->heat && !eeData->cool)
    6bf2:	87 a1       	ldd	r24, Z+39	; 0x27
    6bf4:	81 11       	cpse	r24, r1
    6bf6:	f6 cf       	rjmp	.-20     	; 0x6be4 <selmode+0x34>
	{
		return HEAT_DHW;
    6bf8:	84 e0       	ldi	r24, 0x04	; 4
    6bfa:	08 95       	ret
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
    6bfc:	88 23       	and	r24, r24
    6bfe:	59 f3       	breq	.-42     	; 0x6bd6 <selmode+0x26>
	{
		return COOL_DHW;
	}
	else return OFF;

}
    6c00:	08 95       	ret

00006c02 <stop_timers>:
			}
		}break;
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void stop_timers( xCompressor *comp){
    6c02:	cf 92       	push	r12
    6c04:	df 92       	push	r13
    6c06:	ef 92       	push	r14
    6c08:	ff 92       	push	r15
    6c0a:	0f 93       	push	r16
    6c0c:	1f 93       	push	r17
	if(comp->Index==1)
    6c0e:	8e 58       	subi	r24, 0x8E	; 142
    6c10:	9f 4f       	sbci	r25, 0xFF	; 255
    6c12:	fc 01       	movw	r30, r24
    6c14:	80 81       	ld	r24, Z
    6c16:	91 81       	ldd	r25, Z+1	; 0x01
    6c18:	81 30       	cpi	r24, 0x01	; 1
    6c1a:	91 05       	cpc	r25, r1
    6c1c:	09 f0       	breq	.+2      	; 0x6c20 <stop_timers+0x1e>
    6c1e:	3a c1       	rjmp	.+628    	; 0x6e94 <stop_timers+0x292>
	{
		if( xTimerIsTimerActive( xStartCompressor_1 ) != pdFALSE )      xTimerStop(xStartCompressor_1,1);
    6c20:	80 91 96 0a 	lds	r24, 0x0A96	; 0x800a96 <xStartCompressor_1>
    6c24:	90 91 97 0a 	lds	r25, 0x0A97	; 0x800a97 <xStartCompressor_1+0x1>
    6c28:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6c2c:	88 23       	and	r24, r24
    6c2e:	81 f0       	breq	.+32     	; 0x6c50 <stop_timers+0x4e>
    6c30:	c1 2c       	mov	r12, r1
    6c32:	d1 2c       	mov	r13, r1
    6c34:	76 01       	movw	r14, r12
    6c36:	c3 94       	inc	r12
    6c38:	00 e0       	ldi	r16, 0x00	; 0
    6c3a:	10 e0       	ldi	r17, 0x00	; 0
    6c3c:	20 e0       	ldi	r18, 0x00	; 0
    6c3e:	30 e0       	ldi	r19, 0x00	; 0
    6c40:	a9 01       	movw	r20, r18
    6c42:	63 e0       	ldi	r22, 0x03	; 3
    6c44:	80 91 96 0a 	lds	r24, 0x0A96	; 0x800a96 <xStartCompressor_1>
    6c48:	90 91 97 0a 	lds	r25, 0x0A97	; 0x800a97 <xStartCompressor_1+0x1>
    6c4c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartHeatPump_1 ) != pdFALSE )        xTimerStop(xStartHeatPump_1,1);
    6c50:	80 91 94 0a 	lds	r24, 0x0A94	; 0x800a94 <xStartHeatPump_1>
    6c54:	90 91 95 0a 	lds	r25, 0x0A95	; 0x800a95 <xStartHeatPump_1+0x1>
    6c58:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6c5c:	88 23       	and	r24, r24
    6c5e:	81 f0       	breq	.+32     	; 0x6c80 <stop_timers+0x7e>
    6c60:	c1 2c       	mov	r12, r1
    6c62:	d1 2c       	mov	r13, r1
    6c64:	76 01       	movw	r14, r12
    6c66:	c3 94       	inc	r12
    6c68:	00 e0       	ldi	r16, 0x00	; 0
    6c6a:	10 e0       	ldi	r17, 0x00	; 0
    6c6c:	20 e0       	ldi	r18, 0x00	; 0
    6c6e:	30 e0       	ldi	r19, 0x00	; 0
    6c70:	a9 01       	movw	r20, r18
    6c72:	63 e0       	ldi	r22, 0x03	; 3
    6c74:	80 91 94 0a 	lds	r24, 0x0A94	; 0x800a94 <xStartHeatPump_1>
    6c78:	90 91 95 0a 	lds	r25, 0x0A95	; 0x800a95 <xStartHeatPump_1+0x1>
    6c7c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartThreeWay ) != pdFALSE )			xTimerStop(xStartThreeWay,1);
    6c80:	80 91 f0 09 	lds	r24, 0x09F0	; 0x8009f0 <xStartThreeWay>
    6c84:	90 91 f1 09 	lds	r25, 0x09F1	; 0x8009f1 <xStartThreeWay+0x1>
    6c88:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6c8c:	88 23       	and	r24, r24
    6c8e:	81 f0       	breq	.+32     	; 0x6cb0 <stop_timers+0xae>
    6c90:	c1 2c       	mov	r12, r1
    6c92:	d1 2c       	mov	r13, r1
    6c94:	76 01       	movw	r14, r12
    6c96:	c3 94       	inc	r12
    6c98:	00 e0       	ldi	r16, 0x00	; 0
    6c9a:	10 e0       	ldi	r17, 0x00	; 0
    6c9c:	20 e0       	ldi	r18, 0x00	; 0
    6c9e:	30 e0       	ldi	r19, 0x00	; 0
    6ca0:	a9 01       	movw	r20, r18
    6ca2:	63 e0       	ldi	r22, 0x03	; 3
    6ca4:	80 91 f0 09 	lds	r24, 0x09F0	; 0x8009f0 <xStartThreeWay>
    6ca8:	90 91 f1 09 	lds	r25, 0x09F1	; 0x8009f1 <xStartThreeWay+0x1>
    6cac:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartRevValve_1 ) != pdFALSE )		xTimerStop(xStartRevValve_1,1);
    6cb0:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <xStartRevValve_1>
    6cb4:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <xStartRevValve_1+0x1>
    6cb8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6cbc:	88 23       	and	r24, r24
    6cbe:	81 f0       	breq	.+32     	; 0x6ce0 <stop_timers+0xde>
    6cc0:	c1 2c       	mov	r12, r1
    6cc2:	d1 2c       	mov	r13, r1
    6cc4:	76 01       	movw	r14, r12
    6cc6:	c3 94       	inc	r12
    6cc8:	00 e0       	ldi	r16, 0x00	; 0
    6cca:	10 e0       	ldi	r17, 0x00	; 0
    6ccc:	20 e0       	ldi	r18, 0x00	; 0
    6cce:	30 e0       	ldi	r19, 0x00	; 0
    6cd0:	a9 01       	movw	r20, r18
    6cd2:	63 e0       	ldi	r22, 0x03	; 3
    6cd4:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <xStartRevValve_1>
    6cd8:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <xStartRevValve_1+0x1>
    6cdc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevOne_1_time ) != pdFALSE )    xTimerStop(xSwitchRevOne_1_time,1);
    6ce0:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <xSwitchRevOne_1_time>
    6ce4:	90 91 0c 09 	lds	r25, 0x090C	; 0x80090c <xSwitchRevOne_1_time+0x1>
    6ce8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6cec:	88 23       	and	r24, r24
    6cee:	81 f0       	breq	.+32     	; 0x6d10 <stop_timers+0x10e>
    6cf0:	c1 2c       	mov	r12, r1
    6cf2:	d1 2c       	mov	r13, r1
    6cf4:	76 01       	movw	r14, r12
    6cf6:	c3 94       	inc	r12
    6cf8:	00 e0       	ldi	r16, 0x00	; 0
    6cfa:	10 e0       	ldi	r17, 0x00	; 0
    6cfc:	20 e0       	ldi	r18, 0x00	; 0
    6cfe:	30 e0       	ldi	r19, 0x00	; 0
    6d00:	a9 01       	movw	r20, r18
    6d02:	63 e0       	ldi	r22, 0x03	; 3
    6d04:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <xSwitchRevOne_1_time>
    6d08:	90 91 0c 09 	lds	r25, 0x090C	; 0x80090c <xSwitchRevOne_1_time+0x1>
    6d0c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevTwo_1_time ) != pdFALSE )	xTimerStop(xSwitchRevTwo_1_time,1);
    6d10:	80 91 92 0a 	lds	r24, 0x0A92	; 0x800a92 <xSwitchRevTwo_1_time>
    6d14:	90 91 93 0a 	lds	r25, 0x0A93	; 0x800a93 <xSwitchRevTwo_1_time+0x1>
    6d18:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6d1c:	88 23       	and	r24, r24
    6d1e:	81 f0       	breq	.+32     	; 0x6d40 <stop_timers+0x13e>
    6d20:	c1 2c       	mov	r12, r1
    6d22:	d1 2c       	mov	r13, r1
    6d24:	76 01       	movw	r14, r12
    6d26:	c3 94       	inc	r12
    6d28:	00 e0       	ldi	r16, 0x00	; 0
    6d2a:	10 e0       	ldi	r17, 0x00	; 0
    6d2c:	20 e0       	ldi	r18, 0x00	; 0
    6d2e:	30 e0       	ldi	r19, 0x00	; 0
    6d30:	a9 01       	movw	r20, r18
    6d32:	63 e0       	ldi	r22, 0x03	; 3
    6d34:	80 91 92 0a 	lds	r24, 0x0A92	; 0x800a92 <xSwitchRevTwo_1_time>
    6d38:	90 91 93 0a 	lds	r25, 0x0A93	; 0x800a93 <xSwitchRevTwo_1_time+0x1>
    6d3c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopHeatPump_1 ) != pdFALSE )			xTimerStop(xStopHeatPump_1,1);
    6d40:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <xStopHeatPump_1>
    6d44:	90 91 06 09 	lds	r25, 0x0906	; 0x800906 <xStopHeatPump_1+0x1>
    6d48:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6d4c:	88 23       	and	r24, r24
    6d4e:	81 f0       	breq	.+32     	; 0x6d70 <stop_timers+0x16e>
    6d50:	c1 2c       	mov	r12, r1
    6d52:	d1 2c       	mov	r13, r1
    6d54:	76 01       	movw	r14, r12
    6d56:	c3 94       	inc	r12
    6d58:	00 e0       	ldi	r16, 0x00	; 0
    6d5a:	10 e0       	ldi	r17, 0x00	; 0
    6d5c:	20 e0       	ldi	r18, 0x00	; 0
    6d5e:	30 e0       	ldi	r19, 0x00	; 0
    6d60:	a9 01       	movw	r20, r18
    6d62:	63 e0       	ldi	r22, 0x03	; 3
    6d64:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <xStopHeatPump_1>
    6d68:	90 91 06 09 	lds	r25, 0x0906	; 0x800906 <xStopHeatPump_1+0x1>
    6d6c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopThreeWay ) != pdFALSE )			xTimerStop(xStopThreeWay,1);
    6d70:	80 91 ee 09 	lds	r24, 0x09EE	; 0x8009ee <xStopThreeWay>
    6d74:	90 91 ef 09 	lds	r25, 0x09EF	; 0x8009ef <xStopThreeWay+0x1>
    6d78:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6d7c:	88 23       	and	r24, r24
    6d7e:	81 f0       	breq	.+32     	; 0x6da0 <stop_timers+0x19e>
    6d80:	c1 2c       	mov	r12, r1
    6d82:	d1 2c       	mov	r13, r1
    6d84:	76 01       	movw	r14, r12
    6d86:	c3 94       	inc	r12
    6d88:	00 e0       	ldi	r16, 0x00	; 0
    6d8a:	10 e0       	ldi	r17, 0x00	; 0
    6d8c:	20 e0       	ldi	r18, 0x00	; 0
    6d8e:	30 e0       	ldi	r19, 0x00	; 0
    6d90:	a9 01       	movw	r20, r18
    6d92:	63 e0       	ldi	r22, 0x03	; 3
    6d94:	80 91 ee 09 	lds	r24, 0x09EE	; 0x8009ee <xStopThreeWay>
    6d98:	90 91 ef 09 	lds	r25, 0x09EF	; 0x8009ef <xStopThreeWay+0x1>
    6d9c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopRevValve_1 ) != pdFALSE )			xTimerStop(xStopRevValve_1,1);
    6da0:	80 91 88 0a 	lds	r24, 0x0A88	; 0x800a88 <xStopRevValve_1>
    6da4:	90 91 89 0a 	lds	r25, 0x0A89	; 0x800a89 <xStopRevValve_1+0x1>
    6da8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6dac:	88 23       	and	r24, r24
    6dae:	81 f0       	breq	.+32     	; 0x6dd0 <stop_timers+0x1ce>
    6db0:	c1 2c       	mov	r12, r1
    6db2:	d1 2c       	mov	r13, r1
    6db4:	76 01       	movw	r14, r12
    6db6:	c3 94       	inc	r12
    6db8:	00 e0       	ldi	r16, 0x00	; 0
    6dba:	10 e0       	ldi	r17, 0x00	; 0
    6dbc:	20 e0       	ldi	r18, 0x00	; 0
    6dbe:	30 e0       	ldi	r19, 0x00	; 0
    6dc0:	a9 01       	movw	r20, r18
    6dc2:	63 e0       	ldi	r22, 0x03	; 3
    6dc4:	80 91 88 0a 	lds	r24, 0x0A88	; 0x800a88 <xStopRevValve_1>
    6dc8:	90 91 89 0a 	lds	r25, 0x0A89	; 0x800a89 <xStopRevValve_1+0x1>
    6dcc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopSource_1 ) != pdFALSE )			xTimerStop(xStopSource_1,1);
    6dd0:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <xStopSource_1>
    6dd4:	90 91 10 09 	lds	r25, 0x0910	; 0x800910 <xStopSource_1+0x1>
    6dd8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6ddc:	88 23       	and	r24, r24
    6dde:	81 f0       	breq	.+32     	; 0x6e00 <stop_timers+0x1fe>
    6de0:	c1 2c       	mov	r12, r1
    6de2:	d1 2c       	mov	r13, r1
    6de4:	76 01       	movw	r14, r12
    6de6:	c3 94       	inc	r12
    6de8:	00 e0       	ldi	r16, 0x00	; 0
    6dea:	10 e0       	ldi	r17, 0x00	; 0
    6dec:	20 e0       	ldi	r18, 0x00	; 0
    6dee:	30 e0       	ldi	r19, 0x00	; 0
    6df0:	a9 01       	movw	r20, r18
    6df2:	63 e0       	ldi	r22, 0x03	; 3
    6df4:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <xStopSource_1>
    6df8:	90 91 10 09 	lds	r25, 0x0910	; 0x800910 <xStopSource_1+0x1>
    6dfc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckErrors_1 ) != pdFALSE )    xTimerStop(xTStartCheckErrors_1,1);
    6e00:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <xTStartCheckErrors_1>
    6e04:	90 91 b8 0a 	lds	r25, 0x0AB8	; 0x800ab8 <xTStartCheckErrors_1+0x1>
    6e08:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6e0c:	88 23       	and	r24, r24
    6e0e:	81 f0       	breq	.+32     	; 0x6e30 <stop_timers+0x22e>
    6e10:	c1 2c       	mov	r12, r1
    6e12:	d1 2c       	mov	r13, r1
    6e14:	76 01       	movw	r14, r12
    6e16:	c3 94       	inc	r12
    6e18:	00 e0       	ldi	r16, 0x00	; 0
    6e1a:	10 e0       	ldi	r17, 0x00	; 0
    6e1c:	20 e0       	ldi	r18, 0x00	; 0
    6e1e:	30 e0       	ldi	r19, 0x00	; 0
    6e20:	a9 01       	movw	r20, r18
    6e22:	63 e0       	ldi	r22, 0x03	; 3
    6e24:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <xTStartCheckErrors_1>
    6e28:	90 91 b8 0a 	lds	r25, 0x0AB8	; 0x800ab8 <xTStartCheckErrors_1+0x1>
    6e2c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckTrv_1 ) != pdFALSE )       xTimerStop(xTStartCheckTrv_1,1);
    6e30:	80 91 11 09 	lds	r24, 0x0911	; 0x800911 <xTStartCheckTrv_1>
    6e34:	90 91 12 09 	lds	r25, 0x0912	; 0x800912 <xTStartCheckTrv_1+0x1>
    6e38:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6e3c:	88 23       	and	r24, r24
    6e3e:	81 f0       	breq	.+32     	; 0x6e60 <stop_timers+0x25e>
    6e40:	c1 2c       	mov	r12, r1
    6e42:	d1 2c       	mov	r13, r1
    6e44:	76 01       	movw	r14, r12
    6e46:	c3 94       	inc	r12
    6e48:	00 e0       	ldi	r16, 0x00	; 0
    6e4a:	10 e0       	ldi	r17, 0x00	; 0
    6e4c:	20 e0       	ldi	r18, 0x00	; 0
    6e4e:	30 e0       	ldi	r19, 0x00	; 0
    6e50:	a9 01       	movw	r20, r18
    6e52:	63 e0       	ldi	r22, 0x03	; 3
    6e54:	80 91 11 09 	lds	r24, 0x0911	; 0x800911 <xTStartCheckTrv_1>
    6e58:	90 91 12 09 	lds	r25, 0x0912	; 0x800912 <xTStartCheckTrv_1+0x1>
    6e5c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xComutateTrv_1 ) != pdFALSE )          xTimerStop(xComutateTrv_1,1);
    6e60:	80 91 fd 08 	lds	r24, 0x08FD	; 0x8008fd <xComutateTrv_1>
    6e64:	90 91 fe 08 	lds	r25, 0x08FE	; 0x8008fe <xComutateTrv_1+0x1>
    6e68:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6e6c:	88 23       	and	r24, r24
    6e6e:	09 f4       	brne	.+2      	; 0x6e72 <stop_timers+0x270>
    6e70:	1c c1       	rjmp	.+568    	; 0x70aa <stop_timers+0x4a8>
    6e72:	c1 2c       	mov	r12, r1
    6e74:	d1 2c       	mov	r13, r1
    6e76:	76 01       	movw	r14, r12
    6e78:	c3 94       	inc	r12
    6e7a:	00 e0       	ldi	r16, 0x00	; 0
    6e7c:	10 e0       	ldi	r17, 0x00	; 0
    6e7e:	20 e0       	ldi	r18, 0x00	; 0
    6e80:	30 e0       	ldi	r19, 0x00	; 0
    6e82:	a9 01       	movw	r20, r18
    6e84:	63 e0       	ldi	r22, 0x03	; 3
    6e86:	80 91 fd 08 	lds	r24, 0x08FD	; 0x8008fd <xComutateTrv_1>
    6e8a:	90 91 fe 08 	lds	r25, 0x08FE	; 0x8008fe <xComutateTrv_1+0x1>
    6e8e:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    6e92:	0b c1       	rjmp	.+534    	; 0x70aa <stop_timers+0x4a8>
	}
	else if (comp->Index==2)
    6e94:	02 97       	sbiw	r24, 0x02	; 2
    6e96:	09 f0       	breq	.+2      	; 0x6e9a <stop_timers+0x298>
    6e98:	08 c1       	rjmp	.+528    	; 0x70aa <stop_timers+0x4a8>
	{
		if( xTimerIsTimerActive( xStartCompressor_2 ) != pdFALSE )      xTimerStop(xStartCompressor_2,1);
    6e9a:	80 91 a8 0a 	lds	r24, 0x0AA8	; 0x800aa8 <xStartCompressor_2>
    6e9e:	90 91 a9 0a 	lds	r25, 0x0AA9	; 0x800aa9 <xStartCompressor_2+0x1>
    6ea2:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6ea6:	88 23       	and	r24, r24
    6ea8:	81 f0       	breq	.+32     	; 0x6eca <stop_timers+0x2c8>
    6eaa:	c1 2c       	mov	r12, r1
    6eac:	d1 2c       	mov	r13, r1
    6eae:	76 01       	movw	r14, r12
    6eb0:	c3 94       	inc	r12
    6eb2:	00 e0       	ldi	r16, 0x00	; 0
    6eb4:	10 e0       	ldi	r17, 0x00	; 0
    6eb6:	20 e0       	ldi	r18, 0x00	; 0
    6eb8:	30 e0       	ldi	r19, 0x00	; 0
    6eba:	a9 01       	movw	r20, r18
    6ebc:	63 e0       	ldi	r22, 0x03	; 3
    6ebe:	80 91 a8 0a 	lds	r24, 0x0AA8	; 0x800aa8 <xStartCompressor_2>
    6ec2:	90 91 a9 0a 	lds	r25, 0x0AA9	; 0x800aa9 <xStartCompressor_2+0x1>
    6ec6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartHeatPump_2 ) != pdFALSE )        xTimerStop(xStartHeatPump_2,1);
    6eca:	80 91 f2 09 	lds	r24, 0x09F2	; 0x8009f2 <xStartHeatPump_2>
    6ece:	90 91 f3 09 	lds	r25, 0x09F3	; 0x8009f3 <xStartHeatPump_2+0x1>
    6ed2:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6ed6:	88 23       	and	r24, r24
    6ed8:	81 f0       	breq	.+32     	; 0x6efa <stop_timers+0x2f8>
    6eda:	c1 2c       	mov	r12, r1
    6edc:	d1 2c       	mov	r13, r1
    6ede:	76 01       	movw	r14, r12
    6ee0:	c3 94       	inc	r12
    6ee2:	00 e0       	ldi	r16, 0x00	; 0
    6ee4:	10 e0       	ldi	r17, 0x00	; 0
    6ee6:	20 e0       	ldi	r18, 0x00	; 0
    6ee8:	30 e0       	ldi	r19, 0x00	; 0
    6eea:	a9 01       	movw	r20, r18
    6eec:	63 e0       	ldi	r22, 0x03	; 3
    6eee:	80 91 f2 09 	lds	r24, 0x09F2	; 0x8009f2 <xStartHeatPump_2>
    6ef2:	90 91 f3 09 	lds	r25, 0x09F3	; 0x8009f3 <xStartHeatPump_2+0x1>
    6ef6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartRevValve_2 ) != pdFALSE )		xTimerStop(xStartRevValve_2,1);
    6efa:	80 91 80 0a 	lds	r24, 0x0A80	; 0x800a80 <xStartRevValve_2>
    6efe:	90 91 81 0a 	lds	r25, 0x0A81	; 0x800a81 <xStartRevValve_2+0x1>
    6f02:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6f06:	88 23       	and	r24, r24
    6f08:	81 f0       	breq	.+32     	; 0x6f2a <stop_timers+0x328>
    6f0a:	c1 2c       	mov	r12, r1
    6f0c:	d1 2c       	mov	r13, r1
    6f0e:	76 01       	movw	r14, r12
    6f10:	c3 94       	inc	r12
    6f12:	00 e0       	ldi	r16, 0x00	; 0
    6f14:	10 e0       	ldi	r17, 0x00	; 0
    6f16:	20 e0       	ldi	r18, 0x00	; 0
    6f18:	30 e0       	ldi	r19, 0x00	; 0
    6f1a:	a9 01       	movw	r20, r18
    6f1c:	63 e0       	ldi	r22, 0x03	; 3
    6f1e:	80 91 80 0a 	lds	r24, 0x0A80	; 0x800a80 <xStartRevValve_2>
    6f22:	90 91 81 0a 	lds	r25, 0x0A81	; 0x800a81 <xStartRevValve_2+0x1>
    6f26:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevOne_2_time ) != pdFALSE )    xTimerStop(xSwitchRevOne_2_time,1);
    6f2a:	80 91 c8 0a 	lds	r24, 0x0AC8	; 0x800ac8 <xSwitchRevOne_2_time>
    6f2e:	90 91 c9 0a 	lds	r25, 0x0AC9	; 0x800ac9 <xSwitchRevOne_2_time+0x1>
    6f32:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6f36:	88 23       	and	r24, r24
    6f38:	81 f0       	breq	.+32     	; 0x6f5a <stop_timers+0x358>
    6f3a:	c1 2c       	mov	r12, r1
    6f3c:	d1 2c       	mov	r13, r1
    6f3e:	76 01       	movw	r14, r12
    6f40:	c3 94       	inc	r12
    6f42:	00 e0       	ldi	r16, 0x00	; 0
    6f44:	10 e0       	ldi	r17, 0x00	; 0
    6f46:	20 e0       	ldi	r18, 0x00	; 0
    6f48:	30 e0       	ldi	r19, 0x00	; 0
    6f4a:	a9 01       	movw	r20, r18
    6f4c:	63 e0       	ldi	r22, 0x03	; 3
    6f4e:	80 91 c8 0a 	lds	r24, 0x0AC8	; 0x800ac8 <xSwitchRevOne_2_time>
    6f52:	90 91 c9 0a 	lds	r25, 0x0AC9	; 0x800ac9 <xSwitchRevOne_2_time+0x1>
    6f56:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevTwo_2_time ) != pdFALSE )	xTimerStop(xSwitchRevTwo_1_time,1);
    6f5a:	80 91 ad 0a 	lds	r24, 0x0AAD	; 0x800aad <xSwitchRevTwo_2_time>
    6f5e:	90 91 ae 0a 	lds	r25, 0x0AAE	; 0x800aae <xSwitchRevTwo_2_time+0x1>
    6f62:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6f66:	88 23       	and	r24, r24
    6f68:	81 f0       	breq	.+32     	; 0x6f8a <stop_timers+0x388>
    6f6a:	c1 2c       	mov	r12, r1
    6f6c:	d1 2c       	mov	r13, r1
    6f6e:	76 01       	movw	r14, r12
    6f70:	c3 94       	inc	r12
    6f72:	00 e0       	ldi	r16, 0x00	; 0
    6f74:	10 e0       	ldi	r17, 0x00	; 0
    6f76:	20 e0       	ldi	r18, 0x00	; 0
    6f78:	30 e0       	ldi	r19, 0x00	; 0
    6f7a:	a9 01       	movw	r20, r18
    6f7c:	63 e0       	ldi	r22, 0x03	; 3
    6f7e:	80 91 92 0a 	lds	r24, 0x0A92	; 0x800a92 <xSwitchRevTwo_1_time>
    6f82:	90 91 93 0a 	lds	r25, 0x0A93	; 0x800a93 <xSwitchRevTwo_1_time+0x1>
    6f86:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopHeatPump_2 ) != pdFALSE )			xTimerStop(xStopHeatPump_2,1);
    6f8a:	80 91 86 0a 	lds	r24, 0x0A86	; 0x800a86 <xStopHeatPump_2>
    6f8e:	90 91 87 0a 	lds	r25, 0x0A87	; 0x800a87 <xStopHeatPump_2+0x1>
    6f92:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6f96:	88 23       	and	r24, r24
    6f98:	81 f0       	breq	.+32     	; 0x6fba <stop_timers+0x3b8>
    6f9a:	c1 2c       	mov	r12, r1
    6f9c:	d1 2c       	mov	r13, r1
    6f9e:	76 01       	movw	r14, r12
    6fa0:	c3 94       	inc	r12
    6fa2:	00 e0       	ldi	r16, 0x00	; 0
    6fa4:	10 e0       	ldi	r17, 0x00	; 0
    6fa6:	20 e0       	ldi	r18, 0x00	; 0
    6fa8:	30 e0       	ldi	r19, 0x00	; 0
    6faa:	a9 01       	movw	r20, r18
    6fac:	63 e0       	ldi	r22, 0x03	; 3
    6fae:	80 91 86 0a 	lds	r24, 0x0A86	; 0x800a86 <xStopHeatPump_2>
    6fb2:	90 91 87 0a 	lds	r25, 0x0A87	; 0x800a87 <xStopHeatPump_2+0x1>
    6fb6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopRevValve_2 ) != pdFALSE )			xTimerStop(xStopRevValve_2,1);
    6fba:	80 91 0d 09 	lds	r24, 0x090D	; 0x80090d <xStopRevValve_2>
    6fbe:	90 91 0e 09 	lds	r25, 0x090E	; 0x80090e <xStopRevValve_2+0x1>
    6fc2:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6fc6:	88 23       	and	r24, r24
    6fc8:	81 f0       	breq	.+32     	; 0x6fea <stop_timers+0x3e8>
    6fca:	c1 2c       	mov	r12, r1
    6fcc:	d1 2c       	mov	r13, r1
    6fce:	76 01       	movw	r14, r12
    6fd0:	c3 94       	inc	r12
    6fd2:	00 e0       	ldi	r16, 0x00	; 0
    6fd4:	10 e0       	ldi	r17, 0x00	; 0
    6fd6:	20 e0       	ldi	r18, 0x00	; 0
    6fd8:	30 e0       	ldi	r19, 0x00	; 0
    6fda:	a9 01       	movw	r20, r18
    6fdc:	63 e0       	ldi	r22, 0x03	; 3
    6fde:	80 91 0d 09 	lds	r24, 0x090D	; 0x80090d <xStopRevValve_2>
    6fe2:	90 91 0e 09 	lds	r25, 0x090E	; 0x80090e <xStopRevValve_2+0x1>
    6fe6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopSource_2 ) != pdFALSE )			xTimerStop(xStopSource_2,1);
    6fea:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <xStopSource_2>
    6fee:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <xStopSource_2+0x1>
    6ff2:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6ff6:	88 23       	and	r24, r24
    6ff8:	81 f0       	breq	.+32     	; 0x701a <stop_timers+0x418>
    6ffa:	c1 2c       	mov	r12, r1
    6ffc:	d1 2c       	mov	r13, r1
    6ffe:	76 01       	movw	r14, r12
    7000:	c3 94       	inc	r12
    7002:	00 e0       	ldi	r16, 0x00	; 0
    7004:	10 e0       	ldi	r17, 0x00	; 0
    7006:	20 e0       	ldi	r18, 0x00	; 0
    7008:	30 e0       	ldi	r19, 0x00	; 0
    700a:	a9 01       	movw	r20, r18
    700c:	63 e0       	ldi	r22, 0x03	; 3
    700e:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <xStopSource_2>
    7012:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <xStopSource_2+0x1>
    7016:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckErrors_2 ) != pdFALSE )    xTimerStop(xTStartCheckErrors_2,1);
    701a:	80 91 ff 08 	lds	r24, 0x08FF	; 0x8008ff <xTStartCheckErrors_2>
    701e:	90 91 00 09 	lds	r25, 0x0900	; 0x800900 <xTStartCheckErrors_2+0x1>
    7022:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7026:	88 23       	and	r24, r24
    7028:	81 f0       	breq	.+32     	; 0x704a <stop_timers+0x448>
    702a:	c1 2c       	mov	r12, r1
    702c:	d1 2c       	mov	r13, r1
    702e:	76 01       	movw	r14, r12
    7030:	c3 94       	inc	r12
    7032:	00 e0       	ldi	r16, 0x00	; 0
    7034:	10 e0       	ldi	r17, 0x00	; 0
    7036:	20 e0       	ldi	r18, 0x00	; 0
    7038:	30 e0       	ldi	r19, 0x00	; 0
    703a:	a9 01       	movw	r20, r18
    703c:	63 e0       	ldi	r22, 0x03	; 3
    703e:	80 91 ff 08 	lds	r24, 0x08FF	; 0x8008ff <xTStartCheckErrors_2>
    7042:	90 91 00 09 	lds	r25, 0x0900	; 0x800900 <xTStartCheckErrors_2+0x1>
    7046:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckTrv_2 ) != pdFALSE )       xTimerStop(xTStartCheckTrv_2,1);
    704a:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <xTStartCheckTrv_2>
    704e:	90 91 ed 09 	lds	r25, 0x09ED	; 0x8009ed <xTStartCheckTrv_2+0x1>
    7052:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7056:	88 23       	and	r24, r24
    7058:	81 f0       	breq	.+32     	; 0x707a <stop_timers+0x478>
    705a:	c1 2c       	mov	r12, r1
    705c:	d1 2c       	mov	r13, r1
    705e:	76 01       	movw	r14, r12
    7060:	c3 94       	inc	r12
    7062:	00 e0       	ldi	r16, 0x00	; 0
    7064:	10 e0       	ldi	r17, 0x00	; 0
    7066:	20 e0       	ldi	r18, 0x00	; 0
    7068:	30 e0       	ldi	r19, 0x00	; 0
    706a:	a9 01       	movw	r20, r18
    706c:	63 e0       	ldi	r22, 0x03	; 3
    706e:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <xTStartCheckTrv_2>
    7072:	90 91 ed 09 	lds	r25, 0x09ED	; 0x8009ed <xTStartCheckTrv_2+0x1>
    7076:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xComutateTrv_2 ) != pdFALSE )          xTimerStop(xComutateTrv_2,1);
    707a:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <xComutateTrv_2>
    707e:	90 91 f9 09 	lds	r25, 0x09F9	; 0x8009f9 <xComutateTrv_2+0x1>
    7082:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    7086:	88 23       	and	r24, r24
    7088:	81 f0       	breq	.+32     	; 0x70aa <stop_timers+0x4a8>
    708a:	c1 2c       	mov	r12, r1
    708c:	d1 2c       	mov	r13, r1
    708e:	76 01       	movw	r14, r12
    7090:	c3 94       	inc	r12
    7092:	00 e0       	ldi	r16, 0x00	; 0
    7094:	10 e0       	ldi	r17, 0x00	; 0
    7096:	20 e0       	ldi	r18, 0x00	; 0
    7098:	30 e0       	ldi	r19, 0x00	; 0
    709a:	a9 01       	movw	r20, r18
    709c:	63 e0       	ldi	r22, 0x03	; 3
    709e:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <xComutateTrv_2>
    70a2:	90 91 f9 09 	lds	r25, 0x09F9	; 0x8009f9 <xComutateTrv_2+0x1>
    70a6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
}
    70aa:	1f 91       	pop	r17
    70ac:	0f 91       	pop	r16
    70ae:	ff 90       	pop	r15
    70b0:	ef 90       	pop	r14
    70b2:	df 90       	pop	r13
    70b4:	cf 90       	pop	r12
    70b6:	08 95       	ret

000070b8 <Comp_Stop>:
	}
	
	
}
//-------------------------------------------------------------------------Stop mod
void Comp_Stop(xCompressor *comp){
    70b8:	cf 92       	push	r12
    70ba:	df 92       	push	r13
    70bc:	ef 92       	push	r14
    70be:	ff 92       	push	r15
    70c0:	0f 93       	push	r16
    70c2:	1f 93       	push	r17
    70c4:	cf 93       	push	r28
    70c6:	df 93       	push	r29
    70c8:	ec 01       	movw	r28, r24
	static time_t time_count_1;
	static time_t time_count_2;
	
	//xSerialxPrintf(&xSerial3Port,"StopCompressor\r\n");
	stop_timers(comp);
    70ca:	9b dd       	rcall	.-1226   	; 0x6c02 <stop_timers>
	comp->Cooling=comp->heatingWater=comp->Heating=false;
    70cc:	1a 82       	std	Y+2, r1	; 0x02
    70ce:	1c 82       	std	Y+4, r1	; 0x04
    70d0:	1b 82       	std	Y+3, r1	; 0x03
    comp->switchToMode=true;
    70d2:	81 e0       	ldi	r24, 0x01	; 1
    70d4:	88 83       	st	Y, r24
	if(comp->Index == 1)
    70d6:	fe 01       	movw	r30, r28
    70d8:	ee 58       	subi	r30, 0x8E	; 142
    70da:	ff 4f       	sbci	r31, 0xFF	; 255
    70dc:	80 81       	ld	r24, Z
    70de:	91 81       	ldd	r25, Z+1	; 0x01
    70e0:	81 30       	cpi	r24, 0x01	; 1
    70e2:	91 05       	cpc	r25, r1
    70e4:	09 f0       	breq	.+2      	; 0x70e8 <Comp_Stop+0x30>
    70e6:	6c c0       	rjmp	.+216    	; 0x71c0 <Comp_Stop+0x108>
	{
		if(PIN_COMPRESSOR_1 > 0)
    70e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    70ec:	85 ff       	sbrs	r24, 5
    70ee:	57 c0       	rjmp	.+174    	; 0x719e <Comp_Stop+0xe6>
		{
			STOP_COMPRESSOR_1;
    70f0:	e2 e0       	ldi	r30, 0x02	; 2
    70f2:	f1 e0       	ldi	r31, 0x01	; 1
    70f4:	80 81       	ld	r24, Z
    70f6:	8f 7d       	andi	r24, 0xDF	; 223
    70f8:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopCompressor_1\r\n");
    70fa:	87 e4       	ldi	r24, 0x47	; 71
    70fc:	95 e0       	ldi	r25, 0x05	; 5
    70fe:	9f 93       	push	r25
    7100:	8f 93       	push	r24
    7102:	86 eb       	ldi	r24, 0xB6	; 182
    7104:	97 e0       	ldi	r25, 0x07	; 7
    7106:	9f 93       	push	r25
    7108:	8f 93       	push	r24
    710a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->checkErrors =false;
    710e:	1d 82       	std	Y+5, r1	; 0x05
			
			comp->checkTrv =false;
    7110:	19 82       	std	Y+1, r1	; 0x01
			comp->compOn=0;
    7112:	1b 86       	std	Y+11, r1	; 0x0b
			time_count_1+= difftime(time(&current_time), timeStartComp_1);
    7114:	c0 90 07 09 	lds	r12, 0x0907	; 0x800907 <timeStartComp_1>
    7118:	d0 90 08 09 	lds	r13, 0x0908	; 0x800908 <timeStartComp_1+0x1>
    711c:	e0 90 09 09 	lds	r14, 0x0909	; 0x800909 <timeStartComp_1+0x2>
    7120:	f0 90 0a 09 	lds	r15, 0x090A	; 0x80090a <timeStartComp_1+0x3>
    7124:	83 e1       	ldi	r24, 0x13	; 19
    7126:	99 e0       	ldi	r25, 0x09	; 9
    7128:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    712c:	a7 01       	movw	r20, r14
    712e:	96 01       	movw	r18, r12
    7130:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    7134:	c0 90 51 07 	lds	r12, 0x0751	; 0x800751 <time_count_1.3196>
    7138:	d0 90 52 07 	lds	r13, 0x0752	; 0x800752 <time_count_1.3196+0x1>
    713c:	e0 90 53 07 	lds	r14, 0x0753	; 0x800753 <time_count_1.3196+0x2>
    7140:	f0 90 54 07 	lds	r15, 0x0754	; 0x800754 <time_count_1.3196+0x3>
    7144:	dc 01       	movw	r26, r24
    7146:	cb 01       	movw	r24, r22
    7148:	8c 0d       	add	r24, r12
    714a:	9d 1d       	adc	r25, r13
    714c:	ae 1d       	adc	r26, r14
    714e:	bf 1d       	adc	r27, r15
    7150:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <time_count_1.3196>
    7154:	90 93 52 07 	sts	0x0752, r25	; 0x800752 <time_count_1.3196+0x1>
    7158:	a0 93 53 07 	sts	0x0753, r26	; 0x800753 <time_count_1.3196+0x2>
    715c:	b0 93 54 07 	sts	0x0754, r27	; 0x800754 <time_count_1.3196+0x3>
			
			//xSerialxPrintf(&xSerial3Port,"time_Compressor_=%d\r\n",time_count_1);
			if(time_count_1>ONE_HOUR){EEpromData.time_compressor_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    7160:	0f 90       	pop	r0
    7162:	0f 90       	pop	r0
    7164:	0f 90       	pop	r0
    7166:	0f 90       	pop	r0
    7168:	81 31       	cpi	r24, 0x11	; 17
    716a:	9e 40       	sbci	r25, 0x0E	; 14
    716c:	a1 05       	cpc	r26, r1
    716e:	b1 05       	cpc	r27, r1
    7170:	b0 f0       	brcs	.+44     	; 0x719e <Comp_Stop+0xe6>
    7172:	e8 e1       	ldi	r30, 0x18	; 24
    7174:	f9 e0       	ldi	r31, 0x09	; 9
    7176:	82 ad       	ldd	r24, Z+58	; 0x3a
    7178:	93 ad       	ldd	r25, Z+59	; 0x3b
    717a:	01 96       	adiw	r24, 0x01	; 1
    717c:	93 af       	std	Z+59, r25	; 0x3b
    717e:	82 af       	std	Z+58, r24	; 0x3a
    7180:	40 e6       	ldi	r20, 0x60	; 96
    7182:	50 e0       	ldi	r21, 0x00	; 0
    7184:	60 e0       	ldi	r22, 0x00	; 0
    7186:	70 e0       	ldi	r23, 0x00	; 0
    7188:	cf 01       	movw	r24, r30
    718a:	0e 94 73 5d 	call	0xbae6	; 0xbae6 <eeprom_update_block>
    718e:	10 92 51 07 	sts	0x0751, r1	; 0x800751 <time_count_1.3196>
    7192:	10 92 52 07 	sts	0x0752, r1	; 0x800752 <time_count_1.3196+0x1>
    7196:	10 92 53 07 	sts	0x0753, r1	; 0x800753 <time_count_1.3196+0x2>
    719a:	10 92 54 07 	sts	0x0754, r1	; 0x800754 <time_count_1.3196+0x3>
			
		}
		xTimerStart(xSwitchRevOne_1_time, 0);
    719e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    71a2:	9b 01       	movw	r18, r22
    71a4:	ac 01       	movw	r20, r24
    71a6:	c1 2c       	mov	r12, r1
    71a8:	d1 2c       	mov	r13, r1
    71aa:	76 01       	movw	r14, r12
    71ac:	00 e0       	ldi	r16, 0x00	; 0
    71ae:	10 e0       	ldi	r17, 0x00	; 0
    71b0:	61 e0       	ldi	r22, 0x01	; 1
    71b2:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <xSwitchRevOne_1_time>
    71b6:	90 91 0c 09 	lds	r25, 0x090C	; 0x80090c <xSwitchRevOne_1_time+0x1>
    71ba:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    71be:	71 c0       	rjmp	.+226    	; 0x72a2 <Comp_Stop+0x1ea>
		
	}
	else if(comp->Index == 2)
    71c0:	02 97       	sbiw	r24, 0x02	; 2
    71c2:	09 f0       	breq	.+2      	; 0x71c6 <Comp_Stop+0x10e>
    71c4:	6e c0       	rjmp	.+220    	; 0x72a2 <Comp_Stop+0x1ea>
	{
		if(PIN_COMPRESSOR_2 > 0)
    71c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    71ca:	86 ff       	sbrs	r24, 6
    71cc:	5a c0       	rjmp	.+180    	; 0x7282 <Comp_Stop+0x1ca>
		{
			
			STOP_COMPRESSOR_2;
    71ce:	e2 e0       	ldi	r30, 0x02	; 2
    71d0:	f1 e0       	ldi	r31, 0x01	; 1
    71d2:	80 81       	ld	r24, Z
    71d4:	8f 7b       	andi	r24, 0xBF	; 191
    71d6:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopCompressor_2\r\n");
    71d8:	8a e5       	ldi	r24, 0x5A	; 90
    71da:	95 e0       	ldi	r25, 0x05	; 5
    71dc:	9f 93       	push	r25
    71de:	8f 93       	push	r24
    71e0:	86 eb       	ldi	r24, 0xB6	; 182
    71e2:	97 e0       	ldi	r25, 0x07	; 7
    71e4:	9f 93       	push	r25
    71e6:	8f 93       	push	r24
    71e8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->checkErrors =false;
    71ec:	1d 82       	std	Y+5, r1	; 0x05
			comp->switchToMode=true;
    71ee:	81 e0       	ldi	r24, 0x01	; 1
    71f0:	88 83       	st	Y, r24
			comp->checkTrv =false;
    71f2:	19 82       	std	Y+1, r1	; 0x01
			comp->compOn=0;
    71f4:	1b 86       	std	Y+11, r1	; 0x0b
			time_count_2+= difftime(time(&current_time), timeStartComp_2);
    71f6:	c0 90 b9 0a 	lds	r12, 0x0AB9	; 0x800ab9 <timeStartComp_2>
    71fa:	d0 90 ba 0a 	lds	r13, 0x0ABA	; 0x800aba <timeStartComp_2+0x1>
    71fe:	e0 90 bb 0a 	lds	r14, 0x0ABB	; 0x800abb <timeStartComp_2+0x2>
    7202:	f0 90 bc 0a 	lds	r15, 0x0ABC	; 0x800abc <timeStartComp_2+0x3>
    7206:	83 e1       	ldi	r24, 0x13	; 19
    7208:	99 e0       	ldi	r25, 0x09	; 9
    720a:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    720e:	a7 01       	movw	r20, r14
    7210:	96 01       	movw	r18, r12
    7212:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    7216:	c0 90 4d 07 	lds	r12, 0x074D	; 0x80074d <time_count_2.3197>
    721a:	d0 90 4e 07 	lds	r13, 0x074E	; 0x80074e <time_count_2.3197+0x1>
    721e:	e0 90 4f 07 	lds	r14, 0x074F	; 0x80074f <time_count_2.3197+0x2>
    7222:	f0 90 50 07 	lds	r15, 0x0750	; 0x800750 <time_count_2.3197+0x3>
    7226:	dc 01       	movw	r26, r24
    7228:	cb 01       	movw	r24, r22
    722a:	8c 0d       	add	r24, r12
    722c:	9d 1d       	adc	r25, r13
    722e:	ae 1d       	adc	r26, r14
    7230:	bf 1d       	adc	r27, r15
    7232:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <time_count_2.3197>
    7236:	90 93 4e 07 	sts	0x074E, r25	; 0x80074e <time_count_2.3197+0x1>
    723a:	a0 93 4f 07 	sts	0x074F, r26	; 0x80074f <time_count_2.3197+0x2>
    723e:	b0 93 50 07 	sts	0x0750, r27	; 0x800750 <time_count_2.3197+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_compressor_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    7242:	0f 90       	pop	r0
    7244:	0f 90       	pop	r0
    7246:	0f 90       	pop	r0
    7248:	0f 90       	pop	r0
    724a:	81 31       	cpi	r24, 0x11	; 17
    724c:	9e 40       	sbci	r25, 0x0E	; 14
    724e:	a1 05       	cpc	r26, r1
    7250:	b1 05       	cpc	r27, r1
    7252:	b8 f0       	brcs	.+46     	; 0x7282 <Comp_Stop+0x1ca>
    7254:	e8 e6       	ldi	r30, 0x68	; 104
    7256:	f9 e0       	ldi	r31, 0x09	; 9
    7258:	80 81       	ld	r24, Z
    725a:	91 81       	ldd	r25, Z+1	; 0x01
    725c:	01 96       	adiw	r24, 0x01	; 1
    725e:	91 83       	std	Z+1, r25	; 0x01
    7260:	80 83       	st	Z, r24
    7262:	40 e6       	ldi	r20, 0x60	; 96
    7264:	50 e0       	ldi	r21, 0x00	; 0
    7266:	60 e0       	ldi	r22, 0x00	; 0
    7268:	70 e0       	ldi	r23, 0x00	; 0
    726a:	88 e1       	ldi	r24, 0x18	; 24
    726c:	99 e0       	ldi	r25, 0x09	; 9
    726e:	0e 94 73 5d 	call	0xbae6	; 0xbae6 <eeprom_update_block>
    7272:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <time_count_2.3197>
    7276:	10 92 4e 07 	sts	0x074E, r1	; 0x80074e <time_count_2.3197+0x1>
    727a:	10 92 4f 07 	sts	0x074F, r1	; 0x80074f <time_count_2.3197+0x2>
    727e:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <time_count_2.3197+0x3>
			
		}
		xTimerStart(xSwitchRevOne_2_time, 0);
    7282:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    7286:	9b 01       	movw	r18, r22
    7288:	ac 01       	movw	r20, r24
    728a:	c1 2c       	mov	r12, r1
    728c:	d1 2c       	mov	r13, r1
    728e:	76 01       	movw	r14, r12
    7290:	00 e0       	ldi	r16, 0x00	; 0
    7292:	10 e0       	ldi	r17, 0x00	; 0
    7294:	61 e0       	ldi	r22, 0x01	; 1
    7296:	80 91 c8 0a 	lds	r24, 0x0AC8	; 0x800ac8 <xSwitchRevOne_2_time>
    729a:	90 91 c9 0a 	lds	r25, 0x0AC9	; 0x800ac9 <xSwitchRevOne_2_time+0x1>
    729e:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
	
	
}
    72a2:	df 91       	pop	r29
    72a4:	cf 91       	pop	r28
    72a6:	1f 91       	pop	r17
    72a8:	0f 91       	pop	r16
    72aa:	ff 90       	pop	r15
    72ac:	ef 90       	pop	r14
    72ae:	df 90       	pop	r13
    72b0:	cf 90       	pop	r12
    72b2:	08 95       	ret

000072b4 <goToMode>:
	else return OFF;

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void goToMode(xCompressor *comp)
{   //calibration(comp);
    72b4:	cf 93       	push	r28
    72b6:	df 93       	push	r29
    72b8:	ec 01       	movw	r28, r24
	stop_timers(comp);
    72ba:	a3 dc       	rcall	.-1722   	; 0x6c02 <stop_timers>
	startTrvTimer(comp);
    72bc:	ce 01       	movw	r24, r28
    72be:	0e 94 85 51 	call	0xa30a	; 0xa30a <startTrvTimer>
	//comp->switchToMode=true;
	
	StarSoursePump(comp);
    72c2:	ce 01       	movw	r24, r28
    72c4:	96 db       	rcall	.-2260   	; 0x69f2 <StarSoursePump>
	//Comp_1.Steps = Fuzzy(&Comp_1,EEpromData.trv_corection_1);
	
}
    72c6:	df 91       	pop	r29
    72c8:	cf 91       	pop	r28
    72ca:	08 95       	ret

000072cc <mod_pump>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void mod_pump( xCompressor *comp,xEEdata* eeData){
    72cc:	2f 92       	push	r2
    72ce:	3f 92       	push	r3
    72d0:	4f 92       	push	r4
    72d2:	5f 92       	push	r5
    72d4:	6f 92       	push	r6
    72d6:	7f 92       	push	r7
    72d8:	8f 92       	push	r8
    72da:	9f 92       	push	r9
    72dc:	af 92       	push	r10
    72de:	bf 92       	push	r11
    72e0:	cf 92       	push	r12
    72e2:	df 92       	push	r13
    72e4:	ef 92       	push	r14
    72e6:	ff 92       	push	r15
    72e8:	1f 93       	push	r17
    72ea:	cf 93       	push	r28
    72ec:	df 93       	push	r29
    72ee:	ec 01       	movw	r28, r24
    72f0:	1b 01       	movw	r2, r22

	uint8_t temp;
	temp = selmode(&EEpromData);
    72f2:	88 e1       	ldi	r24, 0x18	; 24
    72f4:	99 e0       	ldi	r25, 0x09	; 9
    72f6:	5c dc       	rcall	.-1864   	; 0x6bb0 <selmode>
    72f8:	18 2f       	mov	r17, r24
	if(temp!=comp->modeOfPump ){comp->modeOfPump=temp; Comp_Stop(comp);}
    72fa:	88 89       	ldd	r24, Y+16	; 0x10
    72fc:	18 17       	cp	r17, r24
    72fe:	19 f0       	breq	.+6      	; 0x7306 <mod_pump+0x3a>
    7300:	18 8b       	std	Y+16, r17	; 0x10
    7302:	ce 01       	movw	r24, r28
    7304:	d9 de       	rcall	.-590    	; 0x70b8 <Comp_Stop>

	switch(temp){
    7306:	13 30       	cpi	r17, 0x03	; 3
    7308:	09 f4       	brne	.+2      	; 0x730c <mod_pump+0x40>
    730a:	c8 c0       	rjmp	.+400    	; 0x749c <mod_pump+0x1d0>
    730c:	30 f4       	brcc	.+12     	; 0x731a <mod_pump+0x4e>
    730e:	11 30       	cpi	r17, 0x01	; 1
    7310:	59 f0       	breq	.+22     	; 0x7328 <mod_pump+0x5c>
    7312:	12 30       	cpi	r17, 0x02	; 2
    7314:	09 f4       	brne	.+2      	; 0x7318 <mod_pump+0x4c>
    7316:	6a c0       	rjmp	.+212    	; 0x73ec <mod_pump+0x120>
    7318:	14 c5       	rjmp	.+2600   	; 0x7d42 <mod_pump+0xa76>
    731a:	14 30       	cpi	r17, 0x04	; 4
    731c:	09 f4       	brne	.+2      	; 0x7320 <mod_pump+0x54>
    731e:	18 c1       	rjmp	.+560    	; 0x7550 <mod_pump+0x284>
    7320:	15 30       	cpi	r17, 0x05	; 5
    7322:	09 f4       	brne	.+2      	; 0x7326 <mod_pump+0x5a>
    7324:	62 c2       	rjmp	.+1220   	; 0x77ea <mod_pump+0x51e>
    7326:	0d c5       	rjmp	.+2586   	; 0x7d42 <mod_pump+0xa76>
		case DHW: {
		if(comp->Index==1){
    7328:	fe 01       	movw	r30, r28
    732a:	ee 58       	subi	r30, 0x8E	; 142
    732c:	ff 4f       	sbci	r31, 0xFF	; 255
    732e:	80 81       	ld	r24, Z
    7330:	91 81       	ldd	r25, Z+1	; 0x01
    7332:	01 97       	sbiw	r24, 0x01	; 1
    7334:	09 f0       	breq	.+2      	; 0x7338 <mod_pump+0x6c>
    7336:	05 c5       	rjmp	.+2570   	; 0x7d42 <mod_pump+0xa76>
			if ( comp->Dhw_Temp > eeData->Set_DHW && comp->heatingWater && !comp->switchToMode) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp);}
    7338:	8a 88       	ldd	r8, Y+18	; 0x12
    733a:	9b 88       	ldd	r9, Y+19	; 0x13
    733c:	ac 88       	ldd	r10, Y+20	; 0x14
    733e:	bd 88       	ldd	r11, Y+21	; 0x15
    7340:	f1 01       	movw	r30, r2
    7342:	e3 8c       	ldd	r14, Z+27	; 0x1b
    7344:	f1 2c       	mov	r15, r1
    7346:	b7 01       	movw	r22, r14
    7348:	0f 2c       	mov	r0, r15
    734a:	00 0c       	add	r0, r0
    734c:	88 0b       	sbc	r24, r24
    734e:	99 0b       	sbc	r25, r25
    7350:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7354:	9b 01       	movw	r18, r22
    7356:	ac 01       	movw	r20, r24
    7358:	c5 01       	movw	r24, r10
    735a:	b4 01       	movw	r22, r8
    735c:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    7360:	18 16       	cp	r1, r24
    7362:	6c f4       	brge	.+26     	; 0x737e <mod_pump+0xb2>
    7364:	8c 81       	ldd	r24, Y+4	; 0x04
    7366:	88 23       	and	r24, r24
    7368:	09 f4       	brne	.+2      	; 0x736c <mod_pump+0xa0>
    736a:	82 c3       	rjmp	.+1796   	; 0x7a70 <mod_pump+0x7a4>
    736c:	88 81       	ld	r24, Y
    736e:	81 11       	cpse	r24, r1
    7370:	e8 c4       	rjmp	.+2512   	; 0x7d42 <mod_pump+0xa76>
    7372:	1c 82       	std	Y+4, r1	; 0x04
    7374:	ce 01       	movw	r24, r28
    7376:	a0 de       	rcall	.-704    	; 0x70b8 <Comp_Stop>
    7378:	ce 01       	movw	r24, r28
    737a:	0e 94 bd 51 	call	0xa37a	; 0xa37a <stopTrvTimer>
			if ( comp->Dhw_Temp < (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->switchToMode){calibration(comp);Comp_1.error=0; comp->heatingWater=true; goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_Dhw\r\n");}//Start_Dhw();
    737e:	f1 01       	movw	r30, r2
    7380:	63 8d       	ldd	r22, Z+27	; 0x1b
    7382:	70 e0       	ldi	r23, 0x00	; 0
    7384:	86 8d       	ldd	r24, Z+30	; 0x1e
    7386:	68 1b       	sub	r22, r24
    7388:	71 09       	sbc	r23, r1
    738a:	07 2e       	mov	r0, r23
    738c:	00 0c       	add	r0, r0
    738e:	88 0b       	sbc	r24, r24
    7390:	99 0b       	sbc	r25, r25
    7392:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7396:	9b 01       	movw	r18, r22
    7398:	ac 01       	movw	r20, r24
    739a:	6a 89       	ldd	r22, Y+18	; 0x12
    739c:	7b 89       	ldd	r23, Y+19	; 0x13
    739e:	8c 89       	ldd	r24, Y+20	; 0x14
    73a0:	9d 89       	ldd	r25, Y+21	; 0x15
    73a2:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    73a6:	88 23       	and	r24, r24
    73a8:	0c f0       	brlt	.+2      	; 0x73ac <mod_pump+0xe0>
    73aa:	cb c4       	rjmp	.+2454   	; 0x7d42 <mod_pump+0xa76>
    73ac:	8c 81       	ldd	r24, Y+4	; 0x04
    73ae:	81 11       	cpse	r24, r1
    73b0:	c8 c4       	rjmp	.+2448   	; 0x7d42 <mod_pump+0xa76>
    73b2:	88 81       	ld	r24, Y
    73b4:	81 11       	cpse	r24, r1
    73b6:	c5 c4       	rjmp	.+2442   	; 0x7d42 <mod_pump+0xa76>
    73b8:	ce 01       	movw	r24, r28
    73ba:	0e 94 0e 54 	call	0xa81c	; 0xa81c <calibration>
    73be:	10 92 e9 09 	sts	0x09E9, r1	; 0x8009e9 <Comp_1+0x71>
    73c2:	10 92 e8 09 	sts	0x09E8, r1	; 0x8009e8 <Comp_1+0x70>
    73c6:	81 e0       	ldi	r24, 0x01	; 1
    73c8:	8c 83       	std	Y+4, r24	; 0x04
    73ca:	ce 01       	movw	r24, r28
    73cc:	73 df       	rcall	.-282    	; 0x72b4 <goToMode>
    73ce:	8d e6       	ldi	r24, 0x6D	; 109
    73d0:	95 e0       	ldi	r25, 0x05	; 5
    73d2:	9f 93       	push	r25
    73d4:	8f 93       	push	r24
    73d6:	86 eb       	ldi	r24, 0xB6	; 182
    73d8:	97 e0       	ldi	r25, 0x07	; 7
    73da:	9f 93       	push	r25
    73dc:	8f 93       	push	r24
    73de:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    73e2:	0f 90       	pop	r0
    73e4:	0f 90       	pop	r0
    73e6:	0f 90       	pop	r0
    73e8:	0f 90       	pop	r0
    73ea:	ab c4       	rjmp	.+2390   	; 0x7d42 <mod_pump+0xa76>
		
		case HEAT:{
			//xSerialxPrintf(&xSerial3Port,"Set_Heating =%d\r\n,diffHEAT =%d\r\n,Bac_Temp =%f\r\n",eeData->Set_Heating,eeData->diffHEAT,data->Bac_Temp);
			//xSerialxPrintf(&xSerial3Port,"diffHEAT =%d\r\n",eeData->diffHEAT);
			//xSerialxPrintf(&xSerial3Port,"heat mode\r\n");
			if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {comp->Heating=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat\r\n");}
    73ec:	8e 88       	ldd	r8, Y+22	; 0x16
    73ee:	9f 88       	ldd	r9, Y+23	; 0x17
    73f0:	a8 8c       	ldd	r10, Y+24	; 0x18
    73f2:	b9 8c       	ldd	r11, Y+25	; 0x19
    73f4:	f1 01       	movw	r30, r2
    73f6:	e1 8c       	ldd	r14, Z+25	; 0x19
    73f8:	f1 2c       	mov	r15, r1
    73fa:	84 8d       	ldd	r24, Z+28	; 0x1c
    73fc:	b7 01       	movw	r22, r14
    73fe:	68 1b       	sub	r22, r24
    7400:	71 09       	sbc	r23, r1
    7402:	07 2e       	mov	r0, r23
    7404:	00 0c       	add	r0, r0
    7406:	88 0b       	sbc	r24, r24
    7408:	99 0b       	sbc	r25, r25
    740a:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    740e:	9b 01       	movw	r18, r22
    7410:	ac 01       	movw	r20, r24
    7412:	c5 01       	movw	r24, r10
    7414:	b4 01       	movw	r22, r8
    7416:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    741a:	88 23       	and	r24, r24
    741c:	fc f4       	brge	.+62     	; 0x745c <mod_pump+0x190>
    741e:	8a 81       	ldd	r24, Y+2	; 0x02
    7420:	81 11       	cpse	r24, r1
    7422:	3b c3       	rjmp	.+1654   	; 0x7a9a <mod_pump+0x7ce>
    7424:	88 81       	ld	r24, Y
    7426:	81 11       	cpse	r24, r1
    7428:	8c c4       	rjmp	.+2328   	; 0x7d42 <mod_pump+0xa76>
    742a:	81 e0       	ldi	r24, 0x01	; 1
    742c:	8a 83       	std	Y+2, r24	; 0x02
    742e:	ce 01       	movw	r24, r28
    7430:	0e 94 0e 54 	call	0xa81c	; 0xa81c <calibration>
    7434:	10 92 e9 09 	sts	0x09E9, r1	; 0x8009e9 <Comp_1+0x71>
    7438:	10 92 e8 09 	sts	0x09E8, r1	; 0x8009e8 <Comp_1+0x70>
    743c:	ce 01       	movw	r24, r28
    743e:	3a df       	rcall	.-396    	; 0x72b4 <goToMode>
    7440:	89 e7       	ldi	r24, 0x79	; 121
    7442:	95 e0       	ldi	r25, 0x05	; 5
    7444:	9f 93       	push	r25
    7446:	8f 93       	push	r24
    7448:	86 eb       	ldi	r24, 0xB6	; 182
    744a:	97 e0       	ldi	r25, 0x07	; 7
    744c:	9f 93       	push	r25
    744e:	8f 93       	push	r24
    7450:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7454:	0f 90       	pop	r0
    7456:	0f 90       	pop	r0
    7458:	0f 90       	pop	r0
    745a:	0f 90       	pop	r0
			if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    745c:	f1 01       	movw	r30, r2
    745e:	61 8d       	ldd	r22, Z+25	; 0x19
    7460:	70 e0       	ldi	r23, 0x00	; 0
    7462:	80 e0       	ldi	r24, 0x00	; 0
    7464:	90 e0       	ldi	r25, 0x00	; 0
    7466:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    746a:	9b 01       	movw	r18, r22
    746c:	ac 01       	movw	r20, r24
    746e:	6e 89       	ldd	r22, Y+22	; 0x16
    7470:	7f 89       	ldd	r23, Y+23	; 0x17
    7472:	88 8d       	ldd	r24, Y+24	; 0x18
    7474:	99 8d       	ldd	r25, Y+25	; 0x19
    7476:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    747a:	18 16       	cp	r1, r24
    747c:	0c f0       	brlt	.+2      	; 0x7480 <mod_pump+0x1b4>
    747e:	61 c4       	rjmp	.+2242   	; 0x7d42 <mod_pump+0xa76>
    7480:	8a 81       	ldd	r24, Y+2	; 0x02
    7482:	88 23       	and	r24, r24
    7484:	09 f4       	brne	.+2      	; 0x7488 <mod_pump+0x1bc>
    7486:	5d c4       	rjmp	.+2234   	; 0x7d42 <mod_pump+0xa76>
    7488:	88 81       	ld	r24, Y
    748a:	81 11       	cpse	r24, r1
    748c:	5a c4       	rjmp	.+2228   	; 0x7d42 <mod_pump+0xa76>
    748e:	1a 82       	std	Y+2, r1	; 0x02
    7490:	ce 01       	movw	r24, r28
    7492:	12 de       	rcall	.-988    	; 0x70b8 <Comp_Stop>
    7494:	ce 01       	movw	r24, r28
    7496:	0e 94 bd 51 	call	0xa37a	; 0xa37a <stopTrvTimer>
    749a:	53 c4       	rjmp	.+2214   	; 0x7d42 <mod_pump+0xa76>
		} break;
		
		case COOL:{
			//xSerialxPrintf(&xSerial3Port,"COOL mode\r\n");
			if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
    749c:	8e 88       	ldd	r8, Y+22	; 0x16
    749e:	9f 88       	ldd	r9, Y+23	; 0x17
    74a0:	a8 8c       	ldd	r10, Y+24	; 0x18
    74a2:	b9 8c       	ldd	r11, Y+25	; 0x19
    74a4:	f1 01       	movw	r30, r2
    74a6:	e2 8c       	ldd	r14, Z+26	; 0x1a
    74a8:	f1 2c       	mov	r15, r1
    74aa:	b7 01       	movw	r22, r14
    74ac:	0f 2c       	mov	r0, r15
    74ae:	00 0c       	add	r0, r0
    74b0:	88 0b       	sbc	r24, r24
    74b2:	99 0b       	sbc	r25, r25
    74b4:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    74b8:	9b 01       	movw	r18, r22
    74ba:	ac 01       	movw	r20, r24
    74bc:	c5 01       	movw	r24, r10
    74be:	b4 01       	movw	r22, r8
    74c0:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    74c4:	88 23       	and	r24, r24
    74c6:	6c f4       	brge	.+26     	; 0x74e2 <mod_pump+0x216>
    74c8:	8b 81       	ldd	r24, Y+3	; 0x03
    74ca:	88 23       	and	r24, r24
    74cc:	09 f4       	brne	.+2      	; 0x74d0 <mod_pump+0x204>
    74ce:	f5 c2       	rjmp	.+1514   	; 0x7aba <mod_pump+0x7ee>
    74d0:	88 81       	ld	r24, Y
    74d2:	81 11       	cpse	r24, r1
    74d4:	36 c4       	rjmp	.+2156   	; 0x7d42 <mod_pump+0xa76>
    74d6:	1b 82       	std	Y+3, r1	; 0x03
    74d8:	ce 01       	movw	r24, r28
    74da:	ee dd       	rcall	.-1060   	; 0x70b8 <Comp_Stop>
    74dc:	ce 01       	movw	r24, r28
    74de:	0e 94 bd 51 	call	0xa37a	; 0xa37a <stopTrvTimer>
			if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {comp->Cooling=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool\r\n");}//
    74e2:	f1 01       	movw	r30, r2
    74e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    74e6:	65 8d       	ldd	r22, Z+29	; 0x1d
    74e8:	70 e0       	ldi	r23, 0x00	; 0
    74ea:	68 0f       	add	r22, r24
    74ec:	71 1d       	adc	r23, r1
    74ee:	07 2e       	mov	r0, r23
    74f0:	00 0c       	add	r0, r0
    74f2:	88 0b       	sbc	r24, r24
    74f4:	99 0b       	sbc	r25, r25
    74f6:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    74fa:	9b 01       	movw	r18, r22
    74fc:	ac 01       	movw	r20, r24
    74fe:	6e 89       	ldd	r22, Y+22	; 0x16
    7500:	7f 89       	ldd	r23, Y+23	; 0x17
    7502:	88 8d       	ldd	r24, Y+24	; 0x18
    7504:	99 8d       	ldd	r25, Y+25	; 0x19
    7506:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    750a:	18 16       	cp	r1, r24
    750c:	0c f0       	brlt	.+2      	; 0x7510 <mod_pump+0x244>
    750e:	19 c4       	rjmp	.+2098   	; 0x7d42 <mod_pump+0xa76>
    7510:	8b 81       	ldd	r24, Y+3	; 0x03
    7512:	81 11       	cpse	r24, r1
    7514:	16 c4       	rjmp	.+2092   	; 0x7d42 <mod_pump+0xa76>
    7516:	88 81       	ld	r24, Y
    7518:	81 11       	cpse	r24, r1
    751a:	13 c4       	rjmp	.+2086   	; 0x7d42 <mod_pump+0xa76>
    751c:	81 e0       	ldi	r24, 0x01	; 1
    751e:	8b 83       	std	Y+3, r24	; 0x03
    7520:	ce 01       	movw	r24, r28
    7522:	0e 94 0e 54 	call	0xa81c	; 0xa81c <calibration>
    7526:	10 92 e9 09 	sts	0x09E9, r1	; 0x8009e9 <Comp_1+0x71>
    752a:	10 92 e8 09 	sts	0x09E8, r1	; 0x8009e8 <Comp_1+0x70>
    752e:	ce 01       	movw	r24, r28
    7530:	c1 de       	rcall	.-638    	; 0x72b4 <goToMode>
    7532:	86 e8       	ldi	r24, 0x86	; 134
    7534:	95 e0       	ldi	r25, 0x05	; 5
    7536:	9f 93       	push	r25
    7538:	8f 93       	push	r24
    753a:	86 eb       	ldi	r24, 0xB6	; 182
    753c:	97 e0       	ldi	r25, 0x07	; 7
    753e:	9f 93       	push	r25
    7540:	8f 93       	push	r24
    7542:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7546:	0f 90       	pop	r0
    7548:	0f 90       	pop	r0
    754a:	0f 90       	pop	r0
    754c:	0f 90       	pop	r0
    754e:	f9 c3       	rjmp	.+2034   	; 0x7d42 <mod_pump+0xa76>
		}break;
		
		case HEAT_DHW:
		
		{
			if(comp->Index==1)
    7550:	fe 01       	movw	r30, r28
    7552:	ee 58       	subi	r30, 0x8E	; 142
    7554:	ff 4f       	sbci	r31, 0xFF	; 255
    7556:	80 81       	ld	r24, Z
    7558:	91 81       	ldd	r25, Z+1	; 0x01
    755a:	81 30       	cpi	r24, 0x01	; 1
    755c:	91 05       	cpc	r25, r1
    755e:	09 f0       	breq	.+2      	; 0x7562 <mod_pump+0x296>
    7560:	ed c0       	rjmp	.+474    	; 0x773c <mod_pump+0x470>
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
    7562:	8a 88       	ldd	r8, Y+18	; 0x12
    7564:	9b 88       	ldd	r9, Y+19	; 0x13
    7566:	ac 88       	ldd	r10, Y+20	; 0x14
    7568:	bd 88       	ldd	r11, Y+21	; 0x15
    756a:	f1 01       	movw	r30, r2
    756c:	e3 8c       	ldd	r14, Z+27	; 0x1b
    756e:	f1 2c       	mov	r15, r1
    7570:	86 8d       	ldd	r24, Z+30	; 0x1e
    7572:	b7 01       	movw	r22, r14
    7574:	68 1b       	sub	r22, r24
    7576:	71 09       	sbc	r23, r1
    7578:	07 2e       	mov	r0, r23
    757a:	00 0c       	add	r0, r0
    757c:	88 0b       	sbc	r24, r24
    757e:	99 0b       	sbc	r25, r25
    7580:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7584:	9b 01       	movw	r18, r22
    7586:	ac 01       	movw	r20, r24
    7588:	c5 01       	movw	r24, r10
    758a:	b4 01       	movw	r22, r8
    758c:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    7590:	88 23       	and	r24, r24
    7592:	1c f5       	brge	.+70     	; 0x75da <mod_pump+0x30e>
    7594:	8c 81       	ldd	r24, Y+4	; 0x04
    7596:	81 11       	cpse	r24, r1
    7598:	3c c3       	rjmp	.+1656   	; 0x7c12 <mod_pump+0x946>
    759a:	8a 81       	ldd	r24, Y+2	; 0x02
    759c:	81 11       	cpse	r24, r1
    759e:	a2 c2       	rjmp	.+1348   	; 0x7ae4 <mod_pump+0x818>
    75a0:	88 81       	ld	r24, Y
    75a2:	81 11       	cpse	r24, r1
    75a4:	98 c3       	rjmp	.+1840   	; 0x7cd6 <mod_pump+0xa0a>
    75a6:	81 e0       	ldi	r24, 0x01	; 1
    75a8:	8c 83       	std	Y+4, r24	; 0x04
    75aa:	ce 01       	movw	r24, r28
    75ac:	0e 94 0e 54 	call	0xa81c	; 0xa81c <calibration>
    75b0:	10 92 e9 09 	sts	0x09E9, r1	; 0x8009e9 <Comp_1+0x71>
    75b4:	10 92 e8 09 	sts	0x09E8, r1	; 0x8009e8 <Comp_1+0x70>
    75b8:	ce 01       	movw	r24, r28
    75ba:	7c de       	rcall	.-776    	; 0x72b4 <goToMode>
    75bc:	83 e9       	ldi	r24, 0x93	; 147
    75be:	95 e0       	ldi	r25, 0x05	; 5
    75c0:	9f 93       	push	r25
    75c2:	8f 93       	push	r24
    75c4:	86 eb       	ldi	r24, 0xB6	; 182
    75c6:	97 e0       	ldi	r25, 0x07	; 7
    75c8:	9f 93       	push	r25
    75ca:	8f 93       	push	r24
    75cc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    75d0:	0f 90       	pop	r0
    75d2:	0f 90       	pop	r0
    75d4:	0f 90       	pop	r0
    75d6:	0f 90       	pop	r0
    75d8:	76 c0       	rjmp	.+236    	; 0x76c6 <mod_pump+0x3fa>
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    75da:	4e 88       	ldd	r4, Y+22	; 0x16
    75dc:	5f 88       	ldd	r5, Y+23	; 0x17
    75de:	68 8c       	ldd	r6, Y+24	; 0x18
    75e0:	79 8c       	ldd	r7, Y+25	; 0x19
    75e2:	f1 01       	movw	r30, r2
    75e4:	c1 8c       	ldd	r12, Z+25	; 0x19
    75e6:	d1 2c       	mov	r13, r1
    75e8:	84 8d       	ldd	r24, Z+28	; 0x1c
    75ea:	b6 01       	movw	r22, r12
    75ec:	68 1b       	sub	r22, r24
    75ee:	71 09       	sbc	r23, r1
    75f0:	07 2e       	mov	r0, r23
    75f2:	00 0c       	add	r0, r0
    75f4:	88 0b       	sbc	r24, r24
    75f6:	99 0b       	sbc	r25, r25
    75f8:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    75fc:	9b 01       	movw	r18, r22
    75fe:	ac 01       	movw	r20, r24
    7600:	c3 01       	movw	r24, r6
    7602:	b2 01       	movw	r22, r4
    7604:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    7608:	88 23       	and	r24, r24
    760a:	1c f5       	brge	.+70     	; 0x7652 <mod_pump+0x386>
    760c:	8c 81       	ldd	r24, Y+4	; 0x04
    760e:	81 11       	cpse	r24, r1
    7610:	84 c2       	rjmp	.+1288   	; 0x7b1a <mod_pump+0x84e>
    7612:	8a 81       	ldd	r24, Y+2	; 0x02
    7614:	81 11       	cpse	r24, r1
    7616:	1d c0       	rjmp	.+58     	; 0x7652 <mod_pump+0x386>
    7618:	88 81       	ld	r24, Y
    761a:	81 11       	cpse	r24, r1
    761c:	1a c0       	rjmp	.+52     	; 0x7652 <mod_pump+0x386>
    761e:	ce 01       	movw	r24, r28
    7620:	0e 94 0e 54 	call	0xa81c	; 0xa81c <calibration>
    7624:	10 92 e9 09 	sts	0x09E9, r1	; 0x8009e9 <Comp_1+0x71>
    7628:	10 92 e8 09 	sts	0x09E8, r1	; 0x8009e8 <Comp_1+0x70>
    762c:	81 e0       	ldi	r24, 0x01	; 1
    762e:	8a 83       	std	Y+2, r24	; 0x02
    7630:	ce 01       	movw	r24, r28
    7632:	40 de       	rcall	.-896    	; 0x72b4 <goToMode>
    7634:	81 ea       	ldi	r24, 0xA1	; 161
    7636:	95 e0       	ldi	r25, 0x05	; 5
    7638:	9f 93       	push	r25
    763a:	8f 93       	push	r24
    763c:	86 eb       	ldi	r24, 0xB6	; 182
    763e:	97 e0       	ldi	r25, 0x07	; 7
    7640:	9f 93       	push	r25
    7642:	8f 93       	push	r24
    7644:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7648:	0f 90       	pop	r0
    764a:	0f 90       	pop	r0
    764c:	0f 90       	pop	r0
    764e:	0f 90       	pop	r0
    7650:	3a c0       	rjmp	.+116    	; 0x76c6 <mod_pump+0x3fa>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7652:	b7 01       	movw	r22, r14
    7654:	ff 0c       	add	r15, r15
    7656:	88 0b       	sbc	r24, r24
    7658:	99 0b       	sbc	r25, r25
    765a:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    765e:	9b 01       	movw	r18, r22
    7660:	ac 01       	movw	r20, r24
    7662:	c5 01       	movw	r24, r10
    7664:	b4 01       	movw	r22, r8
    7666:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    766a:	18 16       	cp	r1, r24
    766c:	8c f4       	brge	.+34     	; 0x7690 <mod_pump+0x3c4>
    766e:	8c 81       	ldd	r24, Y+4	; 0x04
    7670:	88 23       	and	r24, r24
    7672:	09 f4       	brne	.+2      	; 0x7676 <mod_pump+0x3aa>
    7674:	62 c2       	rjmp	.+1220   	; 0x7b3a <mod_pump+0x86e>
    7676:	8a 81       	ldd	r24, Y+2	; 0x02
    7678:	81 11       	cpse	r24, r1
    767a:	25 c0       	rjmp	.+74     	; 0x76c6 <mod_pump+0x3fa>
    767c:	88 81       	ld	r24, Y
    767e:	81 11       	cpse	r24, r1
    7680:	22 c0       	rjmp	.+68     	; 0x76c6 <mod_pump+0x3fa>
    7682:	1c 82       	std	Y+4, r1	; 0x04
    7684:	ce 01       	movw	r24, r28
    7686:	18 dd       	rcall	.-1488   	; 0x70b8 <Comp_Stop>
    7688:	ce 01       	movw	r24, r28
    768a:	0e 94 bd 51 	call	0xa37a	; 0xa37a <stopTrvTimer>
    768e:	1b c0       	rjmp	.+54     	; 0x76c6 <mod_pump+0x3fa>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7690:	b6 01       	movw	r22, r12
    7692:	dd 0c       	add	r13, r13
    7694:	88 0b       	sbc	r24, r24
    7696:	99 0b       	sbc	r25, r25
    7698:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    769c:	a3 01       	movw	r20, r6
    769e:	92 01       	movw	r18, r4
    76a0:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    76a4:	88 23       	and	r24, r24
    76a6:	7c f4       	brge	.+30     	; 0x76c6 <mod_pump+0x3fa>
    76a8:	8c 81       	ldd	r24, Y+4	; 0x04
    76aa:	81 11       	cpse	r24, r1
    76ac:	0c c0       	rjmp	.+24     	; 0x76c6 <mod_pump+0x3fa>
    76ae:	8a 81       	ldd	r24, Y+2	; 0x02
    76b0:	88 23       	and	r24, r24
    76b2:	49 f0       	breq	.+18     	; 0x76c6 <mod_pump+0x3fa>
    76b4:	88 81       	ld	r24, Y
    76b6:	81 11       	cpse	r24, r1
    76b8:	06 c0       	rjmp	.+12     	; 0x76c6 <mod_pump+0x3fa>
    76ba:	1a 82       	std	Y+2, r1	; 0x02
    76bc:	ce 01       	movw	r24, r28
    76be:	fc dc       	rcall	.-1544   	; 0x70b8 <Comp_Stop>
    76c0:	ce 01       	movw	r24, r28
    76c2:	0e 94 bd 51 	call	0xa37a	; 0xa37a <stopTrvTimer>
				if(EEpromData.NombComp==2) if(comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW)&& !comp->heatingWater && comp->Heating && !comp->switchToMode){comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_again\r\n");}	
    76c6:	80 91 38 09 	lds	r24, 0x0938	; 0x800938 <EEpromData+0x20>
    76ca:	82 30       	cpi	r24, 0x02	; 2
    76cc:	09 f0       	breq	.+2      	; 0x76d0 <mod_pump+0x404>
    76ce:	39 c3       	rjmp	.+1650   	; 0x7d42 <mod_pump+0xa76>
    76d0:	f1 01       	movw	r30, r2
    76d2:	63 8d       	ldd	r22, Z+27	; 0x1b
    76d4:	70 e0       	ldi	r23, 0x00	; 0
    76d6:	86 8d       	ldd	r24, Z+30	; 0x1e
    76d8:	68 1b       	sub	r22, r24
    76da:	71 09       	sbc	r23, r1
    76dc:	07 2e       	mov	r0, r23
    76de:	00 0c       	add	r0, r0
    76e0:	88 0b       	sbc	r24, r24
    76e2:	99 0b       	sbc	r25, r25
    76e4:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    76e8:	9b 01       	movw	r18, r22
    76ea:	ac 01       	movw	r20, r24
    76ec:	6a 89       	ldd	r22, Y+18	; 0x12
    76ee:	7b 89       	ldd	r23, Y+19	; 0x13
    76f0:	8c 89       	ldd	r24, Y+20	; 0x14
    76f2:	9d 89       	ldd	r25, Y+21	; 0x15
    76f4:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    76f8:	88 23       	and	r24, r24
    76fa:	0c f0       	brlt	.+2      	; 0x76fe <mod_pump+0x432>
    76fc:	22 c3       	rjmp	.+1604   	; 0x7d42 <mod_pump+0xa76>
    76fe:	8c 81       	ldd	r24, Y+4	; 0x04
    7700:	81 11       	cpse	r24, r1
    7702:	1f c3       	rjmp	.+1598   	; 0x7d42 <mod_pump+0xa76>
    7704:	8a 81       	ldd	r24, Y+2	; 0x02
    7706:	88 23       	and	r24, r24
    7708:	09 f4       	brne	.+2      	; 0x770c <mod_pump+0x440>
    770a:	1b c3       	rjmp	.+1590   	; 0x7d42 <mod_pump+0xa76>
    770c:	88 81       	ld	r24, Y
    770e:	81 11       	cpse	r24, r1
    7710:	18 c3       	rjmp	.+1584   	; 0x7d42 <mod_pump+0xa76>
    7712:	1a 82       	std	Y+2, r1	; 0x02
    7714:	ce 01       	movw	r24, r28
    7716:	d0 dc       	rcall	.-1632   	; 0x70b8 <Comp_Stop>
    7718:	ce 01       	movw	r24, r28
    771a:	0e 94 bd 51 	call	0xa37a	; 0xa37a <stopTrvTimer>
    771e:	80 eb       	ldi	r24, 0xB0	; 176
    7720:	95 e0       	ldi	r25, 0x05	; 5
    7722:	9f 93       	push	r25
    7724:	8f 93       	push	r24
    7726:	86 eb       	ldi	r24, 0xB6	; 182
    7728:	97 e0       	ldi	r25, 0x07	; 7
    772a:	9f 93       	push	r25
    772c:	8f 93       	push	r24
    772e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7732:	0f 90       	pop	r0
    7734:	0f 90       	pop	r0
    7736:	0f 90       	pop	r0
    7738:	0f 90       	pop	r0
    773a:	03 c3       	rjmp	.+1542   	; 0x7d42 <mod_pump+0xa76>
			}
			else if(comp->Index==2)
    773c:	02 97       	sbiw	r24, 0x02	; 2
    773e:	09 f0       	breq	.+2      	; 0x7742 <mod_pump+0x476>
    7740:	00 c3       	rjmp	.+1536   	; 0x7d42 <mod_pump+0xa76>
			{
				if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {calibration(comp);comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_2\r\n");}
    7742:	8e 88       	ldd	r8, Y+22	; 0x16
    7744:	9f 88       	ldd	r9, Y+23	; 0x17
    7746:	a8 8c       	ldd	r10, Y+24	; 0x18
    7748:	b9 8c       	ldd	r11, Y+25	; 0x19
    774a:	f1 01       	movw	r30, r2
    774c:	e1 8c       	ldd	r14, Z+25	; 0x19
    774e:	f1 2c       	mov	r15, r1
    7750:	84 8d       	ldd	r24, Z+28	; 0x1c
    7752:	b7 01       	movw	r22, r14
    7754:	68 1b       	sub	r22, r24
    7756:	71 09       	sbc	r23, r1
    7758:	07 2e       	mov	r0, r23
    775a:	00 0c       	add	r0, r0
    775c:	88 0b       	sbc	r24, r24
    775e:	99 0b       	sbc	r25, r25
    7760:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7764:	9b 01       	movw	r18, r22
    7766:	ac 01       	movw	r20, r24
    7768:	c5 01       	movw	r24, r10
    776a:	b4 01       	movw	r22, r8
    776c:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    7770:	88 23       	and	r24, r24
    7772:	dc f4       	brge	.+54     	; 0x77aa <mod_pump+0x4de>
    7774:	8a 81       	ldd	r24, Y+2	; 0x02
    7776:	81 11       	cpse	r24, r1
    7778:	ee c1       	rjmp	.+988    	; 0x7b56 <mod_pump+0x88a>
    777a:	88 81       	ld	r24, Y
    777c:	81 11       	cpse	r24, r1
    777e:	e1 c2       	rjmp	.+1474   	; 0x7d42 <mod_pump+0xa76>
    7780:	ce 01       	movw	r24, r28
    7782:	0e 94 0e 54 	call	0xa81c	; 0xa81c <calibration>
    7786:	81 e0       	ldi	r24, 0x01	; 1
    7788:	8a 83       	std	Y+2, r24	; 0x02
    778a:	ce 01       	movw	r24, r28
    778c:	93 dd       	rcall	.-1242   	; 0x72b4 <goToMode>
    778e:	82 ec       	ldi	r24, 0xC2	; 194
    7790:	95 e0       	ldi	r25, 0x05	; 5
    7792:	9f 93       	push	r25
    7794:	8f 93       	push	r24
    7796:	86 eb       	ldi	r24, 0xB6	; 182
    7798:	97 e0       	ldi	r25, 0x07	; 7
    779a:	9f 93       	push	r25
    779c:	8f 93       	push	r24
    779e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    77a2:	0f 90       	pop	r0
    77a4:	0f 90       	pop	r0
    77a6:	0f 90       	pop	r0
    77a8:	0f 90       	pop	r0
				if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    77aa:	f1 01       	movw	r30, r2
    77ac:	61 8d       	ldd	r22, Z+25	; 0x19
    77ae:	70 e0       	ldi	r23, 0x00	; 0
    77b0:	80 e0       	ldi	r24, 0x00	; 0
    77b2:	90 e0       	ldi	r25, 0x00	; 0
    77b4:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    77b8:	9b 01       	movw	r18, r22
    77ba:	ac 01       	movw	r20, r24
    77bc:	6e 89       	ldd	r22, Y+22	; 0x16
    77be:	7f 89       	ldd	r23, Y+23	; 0x17
    77c0:	88 8d       	ldd	r24, Y+24	; 0x18
    77c2:	99 8d       	ldd	r25, Y+25	; 0x19
    77c4:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    77c8:	18 16       	cp	r1, r24
    77ca:	0c f0       	brlt	.+2      	; 0x77ce <mod_pump+0x502>
    77cc:	ba c2       	rjmp	.+1396   	; 0x7d42 <mod_pump+0xa76>
    77ce:	8a 81       	ldd	r24, Y+2	; 0x02
    77d0:	88 23       	and	r24, r24
    77d2:	09 f4       	brne	.+2      	; 0x77d6 <mod_pump+0x50a>
    77d4:	b6 c2       	rjmp	.+1388   	; 0x7d42 <mod_pump+0xa76>
    77d6:	88 81       	ld	r24, Y
    77d8:	81 11       	cpse	r24, r1
    77da:	b3 c2       	rjmp	.+1382   	; 0x7d42 <mod_pump+0xa76>
    77dc:	1a 82       	std	Y+2, r1	; 0x02
    77de:	ce 01       	movw	r24, r28
    77e0:	6b dc       	rcall	.-1834   	; 0x70b8 <Comp_Stop>
    77e2:	ce 01       	movw	r24, r28
    77e4:	0e 94 bd 51 	call	0xa37a	; 0xa37a <stopTrvTimer>
    77e8:	ac c2       	rjmp	.+1368   	; 0x7d42 <mod_pump+0xa76>
			
		}break;
		
		case COOL_DHW:
		{
			if(comp->Index==1)
    77ea:	fe 01       	movw	r30, r28
    77ec:	ee 58       	subi	r30, 0x8E	; 142
    77ee:	ff 4f       	sbci	r31, 0xFF	; 255
    77f0:	80 81       	ld	r24, Z
    77f2:	91 81       	ldd	r25, Z+1	; 0x01
    77f4:	81 30       	cpi	r24, 0x01	; 1
    77f6:	91 05       	cpc	r25, r1
    77f8:	09 f0       	breq	.+2      	; 0x77fc <mod_pump+0x530>
    77fa:	e1 c0       	rjmp	.+450    	; 0x79be <mod_pump+0x6f2>
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
    77fc:	8a 88       	ldd	r8, Y+18	; 0x12
    77fe:	9b 88       	ldd	r9, Y+19	; 0x13
    7800:	ac 88       	ldd	r10, Y+20	; 0x14
    7802:	bd 88       	ldd	r11, Y+21	; 0x15
    7804:	f1 01       	movw	r30, r2
    7806:	e3 8c       	ldd	r14, Z+27	; 0x1b
    7808:	f1 2c       	mov	r15, r1
    780a:	86 8d       	ldd	r24, Z+30	; 0x1e
    780c:	b7 01       	movw	r22, r14
    780e:	68 1b       	sub	r22, r24
    7810:	71 09       	sbc	r23, r1
    7812:	07 2e       	mov	r0, r23
    7814:	00 0c       	add	r0, r0
    7816:	88 0b       	sbc	r24, r24
    7818:	99 0b       	sbc	r25, r25
    781a:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    781e:	9b 01       	movw	r18, r22
    7820:	ac 01       	movw	r20, r24
    7822:	c5 01       	movw	r24, r10
    7824:	b4 01       	movw	r22, r8
    7826:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    782a:	88 23       	and	r24, r24
    782c:	2c f5       	brge	.+74     	; 0x7878 <mod_pump+0x5ac>
    782e:	8c 81       	ldd	r24, Y+4	; 0x04
    7830:	81 11       	cpse	r24, r1
    7832:	21 c2       	rjmp	.+1090   	; 0x7c76 <mod_pump+0x9aa>
    7834:	8b 81       	ldd	r24, Y+3	; 0x03
    7836:	81 11       	cpse	r24, r1
    7838:	9e c1       	rjmp	.+828    	; 0x7b76 <mod_pump+0x8aa>
    783a:	88 81       	ld	r24, Y
    783c:	81 11       	cpse	r24, r1
    783e:	66 c2       	rjmp	.+1228   	; 0x7d0c <mod_pump+0xa40>
    7840:	ff 24       	eor	r15, r15
    7842:	f3 94       	inc	r15
    7844:	fc 82       	std	Y+4, r15	; 0x04
    7846:	ce 01       	movw	r24, r28
    7848:	0e 94 0e 54 	call	0xa81c	; 0xa81c <calibration>
    784c:	10 92 e9 09 	sts	0x09E9, r1	; 0x8009e9 <Comp_1+0x71>
    7850:	10 92 e8 09 	sts	0x09E8, r1	; 0x8009e8 <Comp_1+0x70>
    7854:	fc 82       	std	Y+4, r15	; 0x04
    7856:	ce 01       	movw	r24, r28
    7858:	2d dd       	rcall	.-1446   	; 0x72b4 <goToMode>
    785a:	81 ed       	ldi	r24, 0xD1	; 209
    785c:	95 e0       	ldi	r25, 0x05	; 5
    785e:	9f 93       	push	r25
    7860:	8f 93       	push	r24
    7862:	86 eb       	ldi	r24, 0xB6	; 182
    7864:	97 e0       	ldi	r25, 0x07	; 7
    7866:	9f 93       	push	r25
    7868:	8f 93       	push	r24
    786a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    786e:	0f 90       	pop	r0
    7870:	0f 90       	pop	r0
    7872:	0f 90       	pop	r0
    7874:	0f 90       	pop	r0
    7876:	76 c0       	rjmp	.+236    	; 0x7964 <mod_pump+0x698>
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7878:	4e 88       	ldd	r4, Y+22	; 0x16
    787a:	5f 88       	ldd	r5, Y+23	; 0x17
    787c:	68 8c       	ldd	r6, Y+24	; 0x18
    787e:	79 8c       	ldd	r7, Y+25	; 0x19
    7880:	f1 01       	movw	r30, r2
    7882:	c1 8c       	ldd	r12, Z+25	; 0x19
    7884:	d1 2c       	mov	r13, r1
    7886:	84 8d       	ldd	r24, Z+28	; 0x1c
    7888:	b6 01       	movw	r22, r12
    788a:	68 1b       	sub	r22, r24
    788c:	71 09       	sbc	r23, r1
    788e:	07 2e       	mov	r0, r23
    7890:	00 0c       	add	r0, r0
    7892:	88 0b       	sbc	r24, r24
    7894:	99 0b       	sbc	r25, r25
    7896:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    789a:	9b 01       	movw	r18, r22
    789c:	ac 01       	movw	r20, r24
    789e:	c3 01       	movw	r24, r6
    78a0:	b2 01       	movw	r22, r4
    78a2:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    78a6:	88 23       	and	r24, r24
    78a8:	1c f5       	brge	.+70     	; 0x78f0 <mod_pump+0x624>
    78aa:	8c 81       	ldd	r24, Y+4	; 0x04
    78ac:	81 11       	cpse	r24, r1
    78ae:	7e c1       	rjmp	.+764    	; 0x7bac <mod_pump+0x8e0>
    78b0:	8b 81       	ldd	r24, Y+3	; 0x03
    78b2:	81 11       	cpse	r24, r1
    78b4:	1d c0       	rjmp	.+58     	; 0x78f0 <mod_pump+0x624>
    78b6:	88 81       	ld	r24, Y
    78b8:	81 11       	cpse	r24, r1
    78ba:	1a c0       	rjmp	.+52     	; 0x78f0 <mod_pump+0x624>
    78bc:	ce 01       	movw	r24, r28
    78be:	0e 94 0e 54 	call	0xa81c	; 0xa81c <calibration>
    78c2:	10 92 e9 09 	sts	0x09E9, r1	; 0x8009e9 <Comp_1+0x71>
    78c6:	10 92 e8 09 	sts	0x09E8, r1	; 0x8009e8 <Comp_1+0x70>
    78ca:	81 e0       	ldi	r24, 0x01	; 1
    78cc:	8b 83       	std	Y+3, r24	; 0x03
    78ce:	ce 01       	movw	r24, r28
    78d0:	f1 dc       	rcall	.-1566   	; 0x72b4 <goToMode>
    78d2:	83 ee       	ldi	r24, 0xE3	; 227
    78d4:	95 e0       	ldi	r25, 0x05	; 5
    78d6:	9f 93       	push	r25
    78d8:	8f 93       	push	r24
    78da:	86 eb       	ldi	r24, 0xB6	; 182
    78dc:	97 e0       	ldi	r25, 0x07	; 7
    78de:	9f 93       	push	r25
    78e0:	8f 93       	push	r24
    78e2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    78e6:	0f 90       	pop	r0
    78e8:	0f 90       	pop	r0
    78ea:	0f 90       	pop	r0
    78ec:	0f 90       	pop	r0
    78ee:	3a c0       	rjmp	.+116    	; 0x7964 <mod_pump+0x698>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    78f0:	b7 01       	movw	r22, r14
    78f2:	ff 0c       	add	r15, r15
    78f4:	88 0b       	sbc	r24, r24
    78f6:	99 0b       	sbc	r25, r25
    78f8:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    78fc:	9b 01       	movw	r18, r22
    78fe:	ac 01       	movw	r20, r24
    7900:	c5 01       	movw	r24, r10
    7902:	b4 01       	movw	r22, r8
    7904:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    7908:	18 16       	cp	r1, r24
    790a:	8c f4       	brge	.+34     	; 0x792e <mod_pump+0x662>
    790c:	8c 81       	ldd	r24, Y+4	; 0x04
    790e:	88 23       	and	r24, r24
    7910:	09 f4       	brne	.+2      	; 0x7914 <mod_pump+0x648>
    7912:	5c c1       	rjmp	.+696    	; 0x7bcc <mod_pump+0x900>
    7914:	8b 81       	ldd	r24, Y+3	; 0x03
    7916:	81 11       	cpse	r24, r1
    7918:	25 c0       	rjmp	.+74     	; 0x7964 <mod_pump+0x698>
    791a:	88 81       	ld	r24, Y
    791c:	81 11       	cpse	r24, r1
    791e:	22 c0       	rjmp	.+68     	; 0x7964 <mod_pump+0x698>
    7920:	1c 82       	std	Y+4, r1	; 0x04
    7922:	ce 01       	movw	r24, r28
    7924:	c9 db       	rcall	.-2158   	; 0x70b8 <Comp_Stop>
    7926:	ce 01       	movw	r24, r28
    7928:	0e 94 bd 51 	call	0xa37a	; 0xa37a <stopTrvTimer>
    792c:	1b c0       	rjmp	.+54     	; 0x7964 <mod_pump+0x698>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    792e:	b6 01       	movw	r22, r12
    7930:	dd 0c       	add	r13, r13
    7932:	88 0b       	sbc	r24, r24
    7934:	99 0b       	sbc	r25, r25
    7936:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    793a:	a3 01       	movw	r20, r6
    793c:	92 01       	movw	r18, r4
    793e:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    7942:	88 23       	and	r24, r24
    7944:	7c f4       	brge	.+30     	; 0x7964 <mod_pump+0x698>
    7946:	8c 81       	ldd	r24, Y+4	; 0x04
    7948:	81 11       	cpse	r24, r1
    794a:	0c c0       	rjmp	.+24     	; 0x7964 <mod_pump+0x698>
    794c:	8b 81       	ldd	r24, Y+3	; 0x03
    794e:	88 23       	and	r24, r24
    7950:	49 f0       	breq	.+18     	; 0x7964 <mod_pump+0x698>
    7952:	88 81       	ld	r24, Y
    7954:	81 11       	cpse	r24, r1
    7956:	06 c0       	rjmp	.+12     	; 0x7964 <mod_pump+0x698>
    7958:	1b 82       	std	Y+3, r1	; 0x03
    795a:	ce 01       	movw	r24, r28
    795c:	ad db       	rcall	.-2214   	; 0x70b8 <Comp_Stop>
    795e:	ce 01       	movw	r24, r28
    7960:	0e 94 bd 51 	call	0xa37a	; 0xa37a <stopTrvTimer>
				if(EEpromData.NombComp==2) if (comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && comp->Cooling && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}	
    7964:	80 91 38 09 	lds	r24, 0x0938	; 0x800938 <EEpromData+0x20>
    7968:	82 30       	cpi	r24, 0x02	; 2
    796a:	09 f0       	breq	.+2      	; 0x796e <mod_pump+0x6a2>
    796c:	ea c1       	rjmp	.+980    	; 0x7d42 <mod_pump+0xa76>
    796e:	f1 01       	movw	r30, r2
    7970:	63 8d       	ldd	r22, Z+27	; 0x1b
    7972:	70 e0       	ldi	r23, 0x00	; 0
    7974:	86 8d       	ldd	r24, Z+30	; 0x1e
    7976:	68 1b       	sub	r22, r24
    7978:	71 09       	sbc	r23, r1
    797a:	07 2e       	mov	r0, r23
    797c:	00 0c       	add	r0, r0
    797e:	88 0b       	sbc	r24, r24
    7980:	99 0b       	sbc	r25, r25
    7982:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7986:	9b 01       	movw	r18, r22
    7988:	ac 01       	movw	r20, r24
    798a:	6a 89       	ldd	r22, Y+18	; 0x12
    798c:	7b 89       	ldd	r23, Y+19	; 0x13
    798e:	8c 89       	ldd	r24, Y+20	; 0x14
    7990:	9d 89       	ldd	r25, Y+21	; 0x15
    7992:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    7996:	88 23       	and	r24, r24
    7998:	0c f0       	brlt	.+2      	; 0x799c <mod_pump+0x6d0>
    799a:	d3 c1       	rjmp	.+934    	; 0x7d42 <mod_pump+0xa76>
    799c:	8c 81       	ldd	r24, Y+4	; 0x04
    799e:	81 11       	cpse	r24, r1
    79a0:	d0 c1       	rjmp	.+928    	; 0x7d42 <mod_pump+0xa76>
    79a2:	8b 81       	ldd	r24, Y+3	; 0x03
    79a4:	88 23       	and	r24, r24
    79a6:	09 f4       	brne	.+2      	; 0x79aa <mod_pump+0x6de>
    79a8:	cc c1       	rjmp	.+920    	; 0x7d42 <mod_pump+0xa76>
    79aa:	88 81       	ld	r24, Y
    79ac:	81 11       	cpse	r24, r1
    79ae:	c9 c1       	rjmp	.+914    	; 0x7d42 <mod_pump+0xa76>
    79b0:	1b 82       	std	Y+3, r1	; 0x03
    79b2:	ce 01       	movw	r24, r28
    79b4:	81 db       	rcall	.-2302   	; 0x70b8 <Comp_Stop>
    79b6:	ce 01       	movw	r24, r28
    79b8:	0e 94 bd 51 	call	0xa37a	; 0xa37a <stopTrvTimer>
    79bc:	c2 c1       	rjmp	.+900    	; 0x7d42 <mod_pump+0xa76>
			}
			else if(comp->Index==2)
    79be:	02 97       	sbiw	r24, 0x02	; 2
    79c0:	09 f0       	breq	.+2      	; 0x79c4 <mod_pump+0x6f8>
    79c2:	bf c1       	rjmp	.+894    	; 0x7d42 <mod_pump+0xa76>
			{
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
    79c4:	8e 88       	ldd	r8, Y+22	; 0x16
    79c6:	9f 88       	ldd	r9, Y+23	; 0x17
    79c8:	a8 8c       	ldd	r10, Y+24	; 0x18
    79ca:	b9 8c       	ldd	r11, Y+25	; 0x19
    79cc:	f1 01       	movw	r30, r2
    79ce:	e2 8c       	ldd	r14, Z+26	; 0x1a
    79d0:	f1 2c       	mov	r15, r1
    79d2:	b7 01       	movw	r22, r14
    79d4:	0f 2c       	mov	r0, r15
    79d6:	00 0c       	add	r0, r0
    79d8:	88 0b       	sbc	r24, r24
    79da:	99 0b       	sbc	r25, r25
    79dc:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    79e0:	9b 01       	movw	r18, r22
    79e2:	ac 01       	movw	r20, r24
    79e4:	c5 01       	movw	r24, r10
    79e6:	b4 01       	movw	r22, r8
    79e8:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    79ec:	88 23       	and	r24, r24
    79ee:	6c f4       	brge	.+26     	; 0x7a0a <mod_pump+0x73e>
    79f0:	8b 81       	ldd	r24, Y+3	; 0x03
    79f2:	88 23       	and	r24, r24
    79f4:	09 f4       	brne	.+2      	; 0x79f8 <mod_pump+0x72c>
    79f6:	f8 c0       	rjmp	.+496    	; 0x7be8 <mod_pump+0x91c>
    79f8:	88 81       	ld	r24, Y
    79fa:	81 11       	cpse	r24, r1
    79fc:	a2 c1       	rjmp	.+836    	; 0x7d42 <mod_pump+0xa76>
    79fe:	1b 82       	std	Y+3, r1	; 0x03
    7a00:	ce 01       	movw	r24, r28
    7a02:	5a db       	rcall	.-2380   	; 0x70b8 <Comp_Stop>
    7a04:	ce 01       	movw	r24, r28
    7a06:	0e 94 bd 51 	call	0xa37a	; 0xa37a <stopTrvTimer>
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
    7a0a:	f1 01       	movw	r30, r2
    7a0c:	82 8d       	ldd	r24, Z+26	; 0x1a
    7a0e:	65 8d       	ldd	r22, Z+29	; 0x1d
    7a10:	70 e0       	ldi	r23, 0x00	; 0
    7a12:	68 0f       	add	r22, r24
    7a14:	71 1d       	adc	r23, r1
    7a16:	07 2e       	mov	r0, r23
    7a18:	00 0c       	add	r0, r0
    7a1a:	88 0b       	sbc	r24, r24
    7a1c:	99 0b       	sbc	r25, r25
    7a1e:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7a22:	9b 01       	movw	r18, r22
    7a24:	ac 01       	movw	r20, r24
    7a26:	6e 89       	ldd	r22, Y+22	; 0x16
    7a28:	7f 89       	ldd	r23, Y+23	; 0x17
    7a2a:	88 8d       	ldd	r24, Y+24	; 0x18
    7a2c:	99 8d       	ldd	r25, Y+25	; 0x19
    7a2e:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    7a32:	18 16       	cp	r1, r24
    7a34:	0c f0       	brlt	.+2      	; 0x7a38 <mod_pump+0x76c>
    7a36:	85 c1       	rjmp	.+778    	; 0x7d42 <mod_pump+0xa76>
    7a38:	8b 81       	ldd	r24, Y+3	; 0x03
    7a3a:	81 11       	cpse	r24, r1
    7a3c:	82 c1       	rjmp	.+772    	; 0x7d42 <mod_pump+0xa76>
    7a3e:	88 81       	ld	r24, Y
    7a40:	81 11       	cpse	r24, r1
    7a42:	7f c1       	rjmp	.+766    	; 0x7d42 <mod_pump+0xa76>
    7a44:	ce 01       	movw	r24, r28
    7a46:	0e 94 0e 54 	call	0xa81c	; 0xa81c <calibration>
    7a4a:	81 e0       	ldi	r24, 0x01	; 1
    7a4c:	8b 83       	std	Y+3, r24	; 0x03
    7a4e:	ce 01       	movw	r24, r28
    7a50:	31 dc       	rcall	.-1950   	; 0x72b4 <goToMode>
    7a52:	85 ef       	ldi	r24, 0xF5	; 245
    7a54:	95 e0       	ldi	r25, 0x05	; 5
    7a56:	9f 93       	push	r25
    7a58:	8f 93       	push	r24
    7a5a:	86 eb       	ldi	r24, 0xB6	; 182
    7a5c:	97 e0       	ldi	r25, 0x07	; 7
    7a5e:	9f 93       	push	r25
    7a60:	8f 93       	push	r24
    7a62:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7a66:	0f 90       	pop	r0
    7a68:	0f 90       	pop	r0
    7a6a:	0f 90       	pop	r0
    7a6c:	0f 90       	pop	r0
			}
		}break;
	}
}
    7a6e:	69 c1       	rjmp	.+722    	; 0x7d42 <mod_pump+0xa76>

	switch(temp){
		case DHW: {
		if(comp->Index==1){
			if ( comp->Dhw_Temp > eeData->Set_DHW && comp->heatingWater && !comp->switchToMode) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp);}
			if ( comp->Dhw_Temp < (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->switchToMode){calibration(comp);Comp_1.error=0; comp->heatingWater=true; goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_Dhw\r\n");}//Start_Dhw();
    7a70:	f1 01       	movw	r30, r2
    7a72:	86 8d       	ldd	r24, Z+30	; 0x1e
    7a74:	b7 01       	movw	r22, r14
    7a76:	68 1b       	sub	r22, r24
    7a78:	71 09       	sbc	r23, r1
    7a7a:	07 2e       	mov	r0, r23
    7a7c:	00 0c       	add	r0, r0
    7a7e:	88 0b       	sbc	r24, r24
    7a80:	99 0b       	sbc	r25, r25
    7a82:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7a86:	9b 01       	movw	r18, r22
    7a88:	ac 01       	movw	r20, r24
    7a8a:	c5 01       	movw	r24, r10
    7a8c:	b4 01       	movw	r22, r8
    7a8e:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    7a92:	88 23       	and	r24, r24
    7a94:	0c f4       	brge	.+2      	; 0x7a98 <mod_pump+0x7cc>
    7a96:	8d cc       	rjmp	.-1766   	; 0x73b2 <mod_pump+0xe6>
    7a98:	54 c1       	rjmp	.+680    	; 0x7d42 <mod_pump+0xa76>
		case HEAT:{
			//xSerialxPrintf(&xSerial3Port,"Set_Heating =%d\r\n,diffHEAT =%d\r\n,Bac_Temp =%f\r\n",eeData->Set_Heating,eeData->diffHEAT,data->Bac_Temp);
			//xSerialxPrintf(&xSerial3Port,"diffHEAT =%d\r\n",eeData->diffHEAT);
			//xSerialxPrintf(&xSerial3Port,"heat mode\r\n");
			if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {comp->Heating=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat\r\n");}
			if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    7a9a:	b7 01       	movw	r22, r14
    7a9c:	ff 0c       	add	r15, r15
    7a9e:	88 0b       	sbc	r24, r24
    7aa0:	99 0b       	sbc	r25, r25
    7aa2:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7aa6:	9b 01       	movw	r18, r22
    7aa8:	ac 01       	movw	r20, r24
    7aaa:	c5 01       	movw	r24, r10
    7aac:	b4 01       	movw	r22, r8
    7aae:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    7ab2:	18 16       	cp	r1, r24
    7ab4:	0c f4       	brge	.+2      	; 0x7ab8 <mod_pump+0x7ec>
    7ab6:	e8 cc       	rjmp	.-1584   	; 0x7488 <mod_pump+0x1bc>
    7ab8:	44 c1       	rjmp	.+648    	; 0x7d42 <mod_pump+0xa76>
		} break;
		
		case COOL:{
			//xSerialxPrintf(&xSerial3Port,"COOL mode\r\n");
			if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
			if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {comp->Cooling=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool\r\n");}//
    7aba:	f1 01       	movw	r30, r2
    7abc:	85 8d       	ldd	r24, Z+29	; 0x1d
    7abe:	b7 01       	movw	r22, r14
    7ac0:	68 0f       	add	r22, r24
    7ac2:	71 1d       	adc	r23, r1
    7ac4:	07 2e       	mov	r0, r23
    7ac6:	00 0c       	add	r0, r0
    7ac8:	88 0b       	sbc	r24, r24
    7aca:	99 0b       	sbc	r25, r25
    7acc:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7ad0:	9b 01       	movw	r18, r22
    7ad2:	ac 01       	movw	r20, r24
    7ad4:	c5 01       	movw	r24, r10
    7ad6:	b4 01       	movw	r22, r8
    7ad8:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    7adc:	18 16       	cp	r1, r24
    7ade:	0c f4       	brge	.+2      	; 0x7ae2 <mod_pump+0x816>
    7ae0:	1a cd       	rjmp	.-1484   	; 0x7516 <mod_pump+0x24a>
    7ae2:	2f c1       	rjmp	.+606    	; 0x7d42 <mod_pump+0xa76>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    7ae4:	4e 88       	ldd	r4, Y+22	; 0x16
    7ae6:	5f 88       	ldd	r5, Y+23	; 0x17
    7ae8:	68 8c       	ldd	r6, Y+24	; 0x18
    7aea:	79 8c       	ldd	r7, Y+25	; 0x19
    7aec:	f1 01       	movw	r30, r2
    7aee:	c1 8c       	ldd	r12, Z+25	; 0x19
    7af0:	d1 2c       	mov	r13, r1
    7af2:	84 8d       	ldd	r24, Z+28	; 0x1c
    7af4:	b6 01       	movw	r22, r12
    7af6:	68 1b       	sub	r22, r24
    7af8:	71 09       	sbc	r23, r1
    7afa:	07 2e       	mov	r0, r23
    7afc:	00 0c       	add	r0, r0
    7afe:	88 0b       	sbc	r24, r24
    7b00:	99 0b       	sbc	r25, r25
    7b02:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7b06:	9b 01       	movw	r18, r22
    7b08:	ac 01       	movw	r20, r24
    7b0a:	c3 01       	movw	r24, r6
    7b0c:	b2 01       	movw	r22, r4
    7b0e:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    7b12:	88 23       	and	r24, r24
    7b14:	0c f4       	brge	.+2      	; 0x7b18 <mod_pump+0x84c>
    7b16:	7d cd       	rjmp	.-1286   	; 0x7612 <mod_pump+0x346>
    7b18:	97 c0       	rjmp	.+302    	; 0x7c48 <mod_pump+0x97c>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7b1a:	b7 01       	movw	r22, r14
    7b1c:	ff 0c       	add	r15, r15
    7b1e:	88 0b       	sbc	r24, r24
    7b20:	99 0b       	sbc	r25, r25
    7b22:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7b26:	9b 01       	movw	r18, r22
    7b28:	ac 01       	movw	r20, r24
    7b2a:	c5 01       	movw	r24, r10
    7b2c:	b4 01       	movw	r22, r8
    7b2e:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    7b32:	18 16       	cp	r1, r24
    7b34:	0c f4       	brge	.+2      	; 0x7b38 <mod_pump+0x86c>
    7b36:	9f cd       	rjmp	.-1218   	; 0x7676 <mod_pump+0x3aa>
    7b38:	97 c0       	rjmp	.+302    	; 0x7c68 <mod_pump+0x99c>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7b3a:	b6 01       	movw	r22, r12
    7b3c:	dd 0c       	add	r13, r13
    7b3e:	88 0b       	sbc	r24, r24
    7b40:	99 0b       	sbc	r25, r25
    7b42:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7b46:	a3 01       	movw	r20, r6
    7b48:	92 01       	movw	r18, r4
    7b4a:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    7b4e:	88 23       	and	r24, r24
    7b50:	0c f4       	brge	.+2      	; 0x7b54 <mod_pump+0x888>
    7b52:	ad cd       	rjmp	.-1190   	; 0x76ae <mod_pump+0x3e2>
    7b54:	b8 cd       	rjmp	.-1168   	; 0x76c6 <mod_pump+0x3fa>
				if(EEpromData.NombComp==2) if(comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW)&& !comp->heatingWater && comp->Heating && !comp->switchToMode){comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_again\r\n");}	
			}
			else if(comp->Index==2)
			{
				if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {calibration(comp);comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_2\r\n");}
				if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    7b56:	b7 01       	movw	r22, r14
    7b58:	ff 0c       	add	r15, r15
    7b5a:	88 0b       	sbc	r24, r24
    7b5c:	99 0b       	sbc	r25, r25
    7b5e:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7b62:	9b 01       	movw	r18, r22
    7b64:	ac 01       	movw	r20, r24
    7b66:	c5 01       	movw	r24, r10
    7b68:	b4 01       	movw	r22, r8
    7b6a:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    7b6e:	18 16       	cp	r1, r24
    7b70:	0c f4       	brge	.+2      	; 0x7b74 <mod_pump+0x8a8>
    7b72:	31 ce       	rjmp	.-926    	; 0x77d6 <mod_pump+0x50a>
    7b74:	e6 c0       	rjmp	.+460    	; 0x7d42 <mod_pump+0xa76>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7b76:	4e 88       	ldd	r4, Y+22	; 0x16
    7b78:	5f 88       	ldd	r5, Y+23	; 0x17
    7b7a:	68 8c       	ldd	r6, Y+24	; 0x18
    7b7c:	79 8c       	ldd	r7, Y+25	; 0x19
    7b7e:	f1 01       	movw	r30, r2
    7b80:	c1 8c       	ldd	r12, Z+25	; 0x19
    7b82:	d1 2c       	mov	r13, r1
    7b84:	84 8d       	ldd	r24, Z+28	; 0x1c
    7b86:	b6 01       	movw	r22, r12
    7b88:	68 1b       	sub	r22, r24
    7b8a:	71 09       	sbc	r23, r1
    7b8c:	07 2e       	mov	r0, r23
    7b8e:	00 0c       	add	r0, r0
    7b90:	88 0b       	sbc	r24, r24
    7b92:	99 0b       	sbc	r25, r25
    7b94:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7b98:	9b 01       	movw	r18, r22
    7b9a:	ac 01       	movw	r20, r24
    7b9c:	c3 01       	movw	r24, r6
    7b9e:	b2 01       	movw	r22, r4
    7ba0:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    7ba4:	88 23       	and	r24, r24
    7ba6:	0c f4       	brge	.+2      	; 0x7baa <mod_pump+0x8de>
    7ba8:	83 ce       	rjmp	.-762    	; 0x78b0 <mod_pump+0x5e4>
    7baa:	7e c0       	rjmp	.+252    	; 0x7ca8 <mod_pump+0x9dc>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7bac:	b7 01       	movw	r22, r14
    7bae:	ff 0c       	add	r15, r15
    7bb0:	88 0b       	sbc	r24, r24
    7bb2:	99 0b       	sbc	r25, r25
    7bb4:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7bb8:	9b 01       	movw	r18, r22
    7bba:	ac 01       	movw	r20, r24
    7bbc:	c5 01       	movw	r24, r10
    7bbe:	b4 01       	movw	r22, r8
    7bc0:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    7bc4:	18 16       	cp	r1, r24
    7bc6:	0c f4       	brge	.+2      	; 0x7bca <mod_pump+0x8fe>
    7bc8:	a5 ce       	rjmp	.-694    	; 0x7914 <mod_pump+0x648>
    7bca:	7e c0       	rjmp	.+252    	; 0x7cc8 <mod_pump+0x9fc>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7bcc:	b6 01       	movw	r22, r12
    7bce:	dd 0c       	add	r13, r13
    7bd0:	88 0b       	sbc	r24, r24
    7bd2:	99 0b       	sbc	r25, r25
    7bd4:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7bd8:	a3 01       	movw	r20, r6
    7bda:	92 01       	movw	r18, r4
    7bdc:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    7be0:	88 23       	and	r24, r24
    7be2:	0c f4       	brge	.+2      	; 0x7be6 <mod_pump+0x91a>
    7be4:	b3 ce       	rjmp	.-666    	; 0x794c <mod_pump+0x680>
    7be6:	be ce       	rjmp	.-644    	; 0x7964 <mod_pump+0x698>
				if(EEpromData.NombComp==2) if (comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && comp->Cooling && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}	
			}
			else if(comp->Index==2)
			{
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
    7be8:	f1 01       	movw	r30, r2
    7bea:	85 8d       	ldd	r24, Z+29	; 0x1d
    7bec:	b7 01       	movw	r22, r14
    7bee:	68 0f       	add	r22, r24
    7bf0:	71 1d       	adc	r23, r1
    7bf2:	07 2e       	mov	r0, r23
    7bf4:	00 0c       	add	r0, r0
    7bf6:	88 0b       	sbc	r24, r24
    7bf8:	99 0b       	sbc	r25, r25
    7bfa:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7bfe:	9b 01       	movw	r18, r22
    7c00:	ac 01       	movw	r20, r24
    7c02:	c5 01       	movw	r24, r10
    7c04:	b4 01       	movw	r22, r8
    7c06:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    7c0a:	18 16       	cp	r1, r24
    7c0c:	0c f4       	brge	.+2      	; 0x7c10 <mod_pump+0x944>
    7c0e:	17 cf       	rjmp	.-466    	; 0x7a3e <mod_pump+0x772>
    7c10:	98 c0       	rjmp	.+304    	; 0x7d42 <mod_pump+0xa76>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    7c12:	4e 88       	ldd	r4, Y+22	; 0x16
    7c14:	5f 88       	ldd	r5, Y+23	; 0x17
    7c16:	68 8c       	ldd	r6, Y+24	; 0x18
    7c18:	79 8c       	ldd	r7, Y+25	; 0x19
    7c1a:	f1 01       	movw	r30, r2
    7c1c:	c1 8c       	ldd	r12, Z+25	; 0x19
    7c1e:	d1 2c       	mov	r13, r1
    7c20:	84 8d       	ldd	r24, Z+28	; 0x1c
    7c22:	b6 01       	movw	r22, r12
    7c24:	68 1b       	sub	r22, r24
    7c26:	71 09       	sbc	r23, r1
    7c28:	07 2e       	mov	r0, r23
    7c2a:	00 0c       	add	r0, r0
    7c2c:	88 0b       	sbc	r24, r24
    7c2e:	99 0b       	sbc	r25, r25
    7c30:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7c34:	9b 01       	movw	r18, r22
    7c36:	ac 01       	movw	r20, r24
    7c38:	c3 01       	movw	r24, r6
    7c3a:	b2 01       	movw	r22, r4
    7c3c:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    7c40:	88 23       	and	r24, r24
    7c42:	0c f4       	brge	.+2      	; 0x7c46 <mod_pump+0x97a>
    7c44:	6a cf       	rjmp	.-300    	; 0x7b1a <mod_pump+0x84e>
    7c46:	05 cd       	rjmp	.-1526   	; 0x7652 <mod_pump+0x386>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7c48:	b7 01       	movw	r22, r14
    7c4a:	ff 0c       	add	r15, r15
    7c4c:	88 0b       	sbc	r24, r24
    7c4e:	99 0b       	sbc	r25, r25
    7c50:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7c54:	9b 01       	movw	r18, r22
    7c56:	ac 01       	movw	r20, r24
    7c58:	c5 01       	movw	r24, r10
    7c5a:	b4 01       	movw	r22, r8
    7c5c:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    7c60:	18 16       	cp	r1, r24
    7c62:	0c f4       	brge	.+2      	; 0x7c66 <mod_pump+0x99a>
    7c64:	6a cf       	rjmp	.-300    	; 0x7b3a <mod_pump+0x86e>
    7c66:	14 cd       	rjmp	.-1496   	; 0x7690 <mod_pump+0x3c4>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7c68:	b6 01       	movw	r22, r12
    7c6a:	dd 0c       	add	r13, r13
    7c6c:	88 0b       	sbc	r24, r24
    7c6e:	99 0b       	sbc	r25, r25
    7c70:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7c74:	28 cd       	rjmp	.-1456   	; 0x76c6 <mod_pump+0x3fa>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7c76:	4e 88       	ldd	r4, Y+22	; 0x16
    7c78:	5f 88       	ldd	r5, Y+23	; 0x17
    7c7a:	68 8c       	ldd	r6, Y+24	; 0x18
    7c7c:	79 8c       	ldd	r7, Y+25	; 0x19
    7c7e:	f1 01       	movw	r30, r2
    7c80:	c1 8c       	ldd	r12, Z+25	; 0x19
    7c82:	d1 2c       	mov	r13, r1
    7c84:	84 8d       	ldd	r24, Z+28	; 0x1c
    7c86:	b6 01       	movw	r22, r12
    7c88:	68 1b       	sub	r22, r24
    7c8a:	71 09       	sbc	r23, r1
    7c8c:	07 2e       	mov	r0, r23
    7c8e:	00 0c       	add	r0, r0
    7c90:	88 0b       	sbc	r24, r24
    7c92:	99 0b       	sbc	r25, r25
    7c94:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7c98:	a3 01       	movw	r20, r6
    7c9a:	92 01       	movw	r18, r4
    7c9c:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    7ca0:	18 16       	cp	r1, r24
    7ca2:	0c f4       	brge	.+2      	; 0x7ca6 <mod_pump+0x9da>
    7ca4:	83 cf       	rjmp	.-250    	; 0x7bac <mod_pump+0x8e0>
    7ca6:	24 ce       	rjmp	.-952    	; 0x78f0 <mod_pump+0x624>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7ca8:	b7 01       	movw	r22, r14
    7caa:	ff 0c       	add	r15, r15
    7cac:	88 0b       	sbc	r24, r24
    7cae:	99 0b       	sbc	r25, r25
    7cb0:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7cb4:	9b 01       	movw	r18, r22
    7cb6:	ac 01       	movw	r20, r24
    7cb8:	c5 01       	movw	r24, r10
    7cba:	b4 01       	movw	r22, r8
    7cbc:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    7cc0:	18 16       	cp	r1, r24
    7cc2:	0c f4       	brge	.+2      	; 0x7cc6 <mod_pump+0x9fa>
    7cc4:	83 cf       	rjmp	.-250    	; 0x7bcc <mod_pump+0x900>
    7cc6:	33 ce       	rjmp	.-922    	; 0x792e <mod_pump+0x662>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7cc8:	b6 01       	movw	r22, r12
    7cca:	dd 0c       	add	r13, r13
    7ccc:	88 0b       	sbc	r24, r24
    7cce:	99 0b       	sbc	r25, r25
    7cd0:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7cd4:	47 ce       	rjmp	.-882    	; 0x7964 <mod_pump+0x698>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    7cd6:	4e 88       	ldd	r4, Y+22	; 0x16
    7cd8:	5f 88       	ldd	r5, Y+23	; 0x17
    7cda:	68 8c       	ldd	r6, Y+24	; 0x18
    7cdc:	79 8c       	ldd	r7, Y+25	; 0x19
    7cde:	f1 01       	movw	r30, r2
    7ce0:	c1 8c       	ldd	r12, Z+25	; 0x19
    7ce2:	d1 2c       	mov	r13, r1
    7ce4:	84 8d       	ldd	r24, Z+28	; 0x1c
    7ce6:	b6 01       	movw	r22, r12
    7ce8:	68 1b       	sub	r22, r24
    7cea:	71 09       	sbc	r23, r1
    7cec:	07 2e       	mov	r0, r23
    7cee:	00 0c       	add	r0, r0
    7cf0:	88 0b       	sbc	r24, r24
    7cf2:	99 0b       	sbc	r25, r25
    7cf4:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7cf8:	9b 01       	movw	r18, r22
    7cfa:	ac 01       	movw	r20, r24
    7cfc:	c3 01       	movw	r24, r6
    7cfe:	b2 01       	movw	r22, r4
    7d00:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    7d04:	88 23       	and	r24, r24
    7d06:	0c f4       	brge	.+2      	; 0x7d0a <mod_pump+0xa3e>
    7d08:	87 cc       	rjmp	.-1778   	; 0x7618 <mod_pump+0x34c>
    7d0a:	9e cf       	rjmp	.-196    	; 0x7c48 <mod_pump+0x97c>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7d0c:	4e 88       	ldd	r4, Y+22	; 0x16
    7d0e:	5f 88       	ldd	r5, Y+23	; 0x17
    7d10:	68 8c       	ldd	r6, Y+24	; 0x18
    7d12:	79 8c       	ldd	r7, Y+25	; 0x19
    7d14:	f1 01       	movw	r30, r2
    7d16:	c1 8c       	ldd	r12, Z+25	; 0x19
    7d18:	d1 2c       	mov	r13, r1
    7d1a:	84 8d       	ldd	r24, Z+28	; 0x1c
    7d1c:	b6 01       	movw	r22, r12
    7d1e:	68 1b       	sub	r22, r24
    7d20:	71 09       	sbc	r23, r1
    7d22:	07 2e       	mov	r0, r23
    7d24:	00 0c       	add	r0, r0
    7d26:	88 0b       	sbc	r24, r24
    7d28:	99 0b       	sbc	r25, r25
    7d2a:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7d2e:	9b 01       	movw	r18, r22
    7d30:	ac 01       	movw	r20, r24
    7d32:	c3 01       	movw	r24, r6
    7d34:	b2 01       	movw	r22, r4
    7d36:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    7d3a:	88 23       	and	r24, r24
    7d3c:	0c f4       	brge	.+2      	; 0x7d40 <mod_pump+0xa74>
    7d3e:	bb cd       	rjmp	.-1162   	; 0x78b6 <mod_pump+0x5ea>
    7d40:	b3 cf       	rjmp	.-154    	; 0x7ca8 <mod_pump+0x9dc>
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
			}
		}break;
	}
}
    7d42:	df 91       	pop	r29
    7d44:	cf 91       	pop	r28
    7d46:	1f 91       	pop	r17
    7d48:	ff 90       	pop	r15
    7d4a:	ef 90       	pop	r14
    7d4c:	df 90       	pop	r13
    7d4e:	cf 90       	pop	r12
    7d50:	bf 90       	pop	r11
    7d52:	af 90       	pop	r10
    7d54:	9f 90       	pop	r9
    7d56:	8f 90       	pop	r8
    7d58:	7f 90       	pop	r7
    7d5a:	6f 90       	pop	r6
    7d5c:	5f 90       	pop	r5
    7d5e:	4f 90       	pop	r4
    7d60:	3f 90       	pop	r3
    7d62:	2f 90       	pop	r2
    7d64:	08 95       	ret

00007d66 <initPins>:
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void initPins()
{

	DDRG |= (_BV(PG4) | _BV(PG3));
    7d66:	83 b3       	in	r24, 0x13	; 19
    7d68:	88 61       	ori	r24, 0x18	; 24
    7d6a:	83 bb       	out	0x13, r24	; 19
	DDRH |= (_BV(PH7) | _BV(PH6) | _BV(PH5) | _BV(PH4) | _BV(PH3) | _BV(PH1) | _BV(PH2));
    7d6c:	e1 e0       	ldi	r30, 0x01	; 1
    7d6e:	f1 e0       	ldi	r31, 0x01	; 1
    7d70:	80 81       	ld	r24, Z
    7d72:	8e 6f       	ori	r24, 0xFE	; 254
    7d74:	80 83       	st	Z, r24
	DDRL |= (_BV(PL2) | _BV(PL1) | _BV(PL0));
    7d76:	ea e0       	ldi	r30, 0x0A	; 10
    7d78:	f1 e0       	ldi	r31, 0x01	; 1
    7d7a:	80 81       	ld	r24, Z
    7d7c:	87 60       	ori	r24, 0x07	; 7
    7d7e:	80 83       	st	Z, r24
	DDRD &= (_BV(PD2) | _BV(PD3));
    7d80:	8a b1       	in	r24, 0x0a	; 10
    7d82:	8c 70       	andi	r24, 0x0C	; 12
    7d84:	8a b9       	out	0x0a, r24	; 10
	DDRE &= (_BV(PE5));
    7d86:	8d b1       	in	r24, 0x0d	; 13
    7d88:	80 72       	andi	r24, 0x20	; 32
    7d8a:	8d b9       	out	0x0d, r24	; 13
	DDRA = 0xFF;
    7d8c:	8f ef       	ldi	r24, 0xFF	; 255
    7d8e:	81 b9       	out	0x01, r24	; 1
	PORTD|= (_BV(PD2) | _BV(PD3));
    7d90:	8b b1       	in	r24, 0x0b	; 11
    7d92:	8c 60       	ori	r24, 0x0C	; 12
    7d94:	8b b9       	out	0x0b, r24	; 11
	PORTE|= (_BV(PE5));
    7d96:	75 9a       	sbi	0x0e, 5	; 14
	
    DDRJ|= (_BV(PIN_rs485));
    7d98:	e4 e0       	ldi	r30, 0x04	; 4
    7d9a:	f1 e0       	ldi	r31, 0x01	; 1
    7d9c:	80 81       	ld	r24, Z
    7d9e:	84 60       	ori	r24, 0x04	; 4
    7da0:	80 83       	st	Z, r24
    7da2:	08 95       	ret

00007da4 <ConvertToTemp>:
	return (ADC_value - Low_Limit_HP) * HP_max/ (Hi_Limit_HP - Low_Limit_HP);
}

float ConvertToLowPress(uint16_t ADC_value){
	return (ADC_value - Low_Limit_LP) * LP_max/ (Hi_Limit_LP - Low_Limit_LP) ;
}
    7da4:	8f 92       	push	r8
    7da6:	9f 92       	push	r9
    7da8:	af 92       	push	r10
    7daa:	bf 92       	push	r11
    7dac:	cf 92       	push	r12
    7dae:	df 92       	push	r13
    7db0:	ef 92       	push	r14
    7db2:	ff 92       	push	r15
    7db4:	bc 01       	movw	r22, r24
    7db6:	80 e0       	ldi	r24, 0x00	; 0
    7db8:	90 e0       	ldi	r25, 0x00	; 0
    7dba:	0e 94 1f 55 	call	0xaa3e	; 0xaa3e <__floatunsisf>
    7dbe:	9b 01       	movw	r18, r22
    7dc0:	ac 01       	movw	r20, r24
    7dc2:	60 e0       	ldi	r22, 0x00	; 0
    7dc4:	70 ec       	ldi	r23, 0xC0	; 192
    7dc6:	8f e7       	ldi	r24, 0x7F	; 127
    7dc8:	94 e4       	ldi	r25, 0x44	; 68
    7dca:	0e 94 86 54 	call	0xa90c	; 0xa90c <__divsf3>
    7dce:	20 e0       	ldi	r18, 0x00	; 0
    7dd0:	30 e0       	ldi	r19, 0x00	; 0
    7dd2:	40 e8       	ldi	r20, 0x80	; 128
    7dd4:	5f e3       	ldi	r21, 0x3F	; 63
    7dd6:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    7dda:	20 e0       	ldi	r18, 0x00	; 0
    7ddc:	30 e4       	ldi	r19, 0x40	; 64
    7dde:	4c e1       	ldi	r20, 0x1C	; 28
    7de0:	56 e4       	ldi	r21, 0x46	; 70
    7de2:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    7de6:	0e 94 da 55 	call	0xabb4	; 0xabb4 <log>
    7dea:	6b 01       	movw	r12, r22
    7dec:	7c 01       	movw	r14, r24
    7dee:	29 e5       	ldi	r18, 0x59	; 89
    7df0:	37 e4       	ldi	r19, 0x47	; 71
    7df2:	4c eb       	ldi	r20, 0xBC	; 188
    7df4:	53 e3       	ldi	r21, 0x33	; 51
    7df6:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    7dfa:	a7 01       	movw	r20, r14
    7dfc:	96 01       	movw	r18, r12
    7dfe:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    7e02:	a7 01       	movw	r20, r14
    7e04:	96 01       	movw	r18, r12
    7e06:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    7e0a:	4b 01       	movw	r8, r22
    7e0c:	5c 01       	movw	r10, r24
    7e0e:	2b e0       	ldi	r18, 0x0B	; 11
    7e10:	31 ee       	ldi	r19, 0xE1	; 225
    7e12:	45 e7       	ldi	r20, 0x75	; 117
    7e14:	59 e3       	ldi	r21, 0x39	; 57
    7e16:	c7 01       	movw	r24, r14
    7e18:	b6 01       	movw	r22, r12
    7e1a:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    7e1e:	29 ed       	ldi	r18, 0xD9	; 217
    7e20:	3d ea       	ldi	r19, 0xAD	; 173
    7e22:	49 ea       	ldi	r20, 0xA9	; 169
    7e24:	5a e3       	ldi	r21, 0x3A	; 58
    7e26:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    7e2a:	9b 01       	movw	r18, r22
    7e2c:	ac 01       	movw	r20, r24
    7e2e:	c5 01       	movw	r24, r10
    7e30:	b4 01       	movw	r22, r8
    7e32:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    7e36:	9b 01       	movw	r18, r22
    7e38:	ac 01       	movw	r20, r24
    7e3a:	60 e0       	ldi	r22, 0x00	; 0
    7e3c:	70 e0       	ldi	r23, 0x00	; 0
    7e3e:	80 e8       	ldi	r24, 0x80	; 128
    7e40:	9f e3       	ldi	r25, 0x3F	; 63
    7e42:	0e 94 86 54 	call	0xa90c	; 0xa90c <__divsf3>
    7e46:	23 e3       	ldi	r18, 0x33	; 51
    7e48:	33 e9       	ldi	r19, 0x93	; 147
    7e4a:	48 e8       	ldi	r20, 0x88	; 136
    7e4c:	53 e4       	ldi	r21, 0x43	; 67
    7e4e:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    7e52:	ff 90       	pop	r15
    7e54:	ef 90       	pop	r14
    7e56:	df 90       	pop	r13
    7e58:	cf 90       	pop	r12
    7e5a:	bf 90       	pop	r11
    7e5c:	af 90       	pop	r10
    7e5e:	9f 90       	pop	r9
    7e60:	8f 90       	pop	r8
    7e62:	08 95       	ret

00007e64 <ReadSuperHeat>:
					}

return;	
}

float  ReadSuperHeat (xCompressor *comp){
    7e64:	4f 92       	push	r4
    7e66:	5f 92       	push	r5
    7e68:	6f 92       	push	r6
    7e6a:	7f 92       	push	r7
    7e6c:	8f 92       	push	r8
    7e6e:	9f 92       	push	r9
    7e70:	af 92       	push	r10
    7e72:	bf 92       	push	r11
    7e74:	cf 92       	push	r12
    7e76:	df 92       	push	r13
    7e78:	ef 92       	push	r14
    7e7a:	ff 92       	push	r15
    7e7c:	cf 93       	push	r28
    7e7e:	df 93       	push	r29
    7e80:	ec 01       	movw	r28, r24
	float Val, Next_val, Span, Saturation_Temp, decimals, work;
	int I;
	work = ((comp->Low_Press - 1.0) / 1.0);
    7e82:	20 e0       	ldi	r18, 0x00	; 0
    7e84:	30 e0       	ldi	r19, 0x00	; 0
    7e86:	40 e8       	ldi	r20, 0x80	; 128
    7e88:	5f e3       	ldi	r21, 0x3F	; 63
    7e8a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    7e8c:	7f 8d       	ldd	r23, Y+31	; 0x1f
    7e8e:	88 a1       	ldd	r24, Y+32	; 0x20
    7e90:	99 a1       	ldd	r25, Y+33	; 0x21
    7e92:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    7e96:	4b 01       	movw	r8, r22
    7e98:	5c 01       	movw	r10, r24
	I = work;                                //drop decimals to get array index
    7e9a:	0e 94 ee 54 	call	0xa9dc	; 0xa9dc <__fixsfsi>
	decimals = work - I; //restore decimals for interpolation between array points
	Val = pgm_read_float(&R22_Saturation_Temp[I]);           //get array value
    7e9e:	fb 01       	movw	r30, r22
    7ea0:	ee 0f       	add	r30, r30
    7ea2:	ff 1f       	adc	r31, r31
    7ea4:	ee 0f       	add	r30, r30
    7ea6:	ff 1f       	adc	r31, r31
    7ea8:	e0 51       	subi	r30, 0x10	; 16
    7eaa:	f6 4f       	sbci	r31, 0xF6	; 246
    7eac:	c5 90       	lpm	r12, Z+
    7eae:	d5 90       	lpm	r13, Z+
    7eb0:	e5 90       	lpm	r14, Z+
    7eb2:	f4 90       	lpm	r15, Z
	Next_val = pgm_read_float(&R22_Saturation_Temp[I + 1]);  //get Next array value
    7eb4:	fb 01       	movw	r30, r22
    7eb6:	31 96       	adiw	r30, 0x01	; 1
    7eb8:	ee 0f       	add	r30, r30
    7eba:	ff 1f       	adc	r31, r31
    7ebc:	ee 0f       	add	r30, r30
    7ebe:	ff 1f       	adc	r31, r31
    7ec0:	e0 51       	subi	r30, 0x10	; 16
    7ec2:	f6 4f       	sbci	r31, 0xF6	; 246
    7ec4:	45 90       	lpm	r4, Z+
    7ec6:	55 90       	lpm	r5, Z+
    7ec8:	65 90       	lpm	r6, Z+
    7eca:	74 90       	lpm	r7, Z
	Span = Next_val - Val;                  //Calc Span
	Saturation_Temp = Val + (Span * decimals);//interpolate between array points
		
	return(comp->Suc_Comp - Saturation_Temp);// Suct_T - Saturation_Temp;
    7ecc:	ee 96       	adiw	r28, 0x3e	; 62
    7ece:	07 2e       	mov	r0, r23
    7ed0:	00 0c       	add	r0, r0
    7ed2:	88 0b       	sbc	r24, r24
    7ed4:	99 0b       	sbc	r25, r25
    7ed6:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7eda:	9b 01       	movw	r18, r22
    7edc:	ac 01       	movw	r20, r24
    7ede:	c5 01       	movw	r24, r10
    7ee0:	b4 01       	movw	r22, r8
    7ee2:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    7ee6:	4b 01       	movw	r8, r22
    7ee8:	5c 01       	movw	r10, r24
    7eea:	a7 01       	movw	r20, r14
    7eec:	96 01       	movw	r18, r12
    7eee:	c3 01       	movw	r24, r6
    7ef0:	b2 01       	movw	r22, r4
    7ef2:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    7ef6:	9b 01       	movw	r18, r22
    7ef8:	ac 01       	movw	r20, r24
    7efa:	c5 01       	movw	r24, r10
    7efc:	b4 01       	movw	r22, r8
    7efe:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    7f02:	a7 01       	movw	r20, r14
    7f04:	96 01       	movw	r18, r12
    7f06:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    7f0a:	9b 01       	movw	r18, r22
    7f0c:	ac 01       	movw	r20, r24
    7f0e:	68 81       	ld	r22, Y
    7f10:	79 81       	ldd	r23, Y+1	; 0x01
    7f12:	8a 81       	ldd	r24, Y+2	; 0x02
    7f14:	9b 81       	ldd	r25, Y+3	; 0x03
    7f16:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>

}
    7f1a:	df 91       	pop	r29
    7f1c:	cf 91       	pop	r28
    7f1e:	ff 90       	pop	r15
    7f20:	ef 90       	pop	r14
    7f22:	df 90       	pop	r13
    7f24:	cf 90       	pop	r12
    7f26:	bf 90       	pop	r11
    7f28:	af 90       	pop	r10
    7f2a:	9f 90       	pop	r9
    7f2c:	8f 90       	pop	r8
    7f2e:	7f 90       	pop	r7
    7f30:	6f 90       	pop	r6
    7f32:	5f 90       	pop	r5
    7f34:	4f 90       	pop	r4
    7f36:	08 95       	ret

00007f38 <ReadSuperCool>:
float ReadSuperCool (xCompressor *comp){
    7f38:	4f 92       	push	r4
    7f3a:	5f 92       	push	r5
    7f3c:	6f 92       	push	r6
    7f3e:	7f 92       	push	r7
    7f40:	8f 92       	push	r8
    7f42:	9f 92       	push	r9
    7f44:	af 92       	push	r10
    7f46:	bf 92       	push	r11
    7f48:	cf 92       	push	r12
    7f4a:	df 92       	push	r13
    7f4c:	ef 92       	push	r14
    7f4e:	ff 92       	push	r15
    7f50:	cf 93       	push	r28
    7f52:	df 93       	push	r29
    7f54:	ec 01       	movw	r28, r24
	float Val, Next_val, Span, Saturation_Temp, decimals, work;
	int I;
	work = ((comp->High_Press - 1.0) / 1.0);
    7f56:	20 e0       	ldi	r18, 0x00	; 0
    7f58:	30 e0       	ldi	r19, 0x00	; 0
    7f5a:	40 e8       	ldi	r20, 0x80	; 128
    7f5c:	5f e3       	ldi	r21, 0x3F	; 63
    7f5e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    7f60:	7b 8d       	ldd	r23, Y+27	; 0x1b
    7f62:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7f64:	9d 8d       	ldd	r25, Y+29	; 0x1d
    7f66:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    7f6a:	4b 01       	movw	r8, r22
    7f6c:	5c 01       	movw	r10, r24

	I = work;                                //drop decimals to get array index
    7f6e:	0e 94 ee 54 	call	0xa9dc	; 0xa9dc <__fixsfsi>

	decimals = work - I; //restore decimals for interpolation between array points
	Val = pgm_read_float(&R22_Saturation_Temp[I]);           //get array value
    7f72:	fb 01       	movw	r30, r22
    7f74:	ee 0f       	add	r30, r30
    7f76:	ff 1f       	adc	r31, r31
    7f78:	ee 0f       	add	r30, r30
    7f7a:	ff 1f       	adc	r31, r31
    7f7c:	e0 51       	subi	r30, 0x10	; 16
    7f7e:	f6 4f       	sbci	r31, 0xF6	; 246
    7f80:	c5 90       	lpm	r12, Z+
    7f82:	d5 90       	lpm	r13, Z+
    7f84:	e5 90       	lpm	r14, Z+
    7f86:	f4 90       	lpm	r15, Z
	Next_val = pgm_read_float(&R22_Saturation_Temp[I + 1]);  //get Next array value
    7f88:	fb 01       	movw	r30, r22
    7f8a:	31 96       	adiw	r30, 0x01	; 1
    7f8c:	ee 0f       	add	r30, r30
    7f8e:	ff 1f       	adc	r31, r31
    7f90:	ee 0f       	add	r30, r30
    7f92:	ff 1f       	adc	r31, r31
    7f94:	e0 51       	subi	r30, 0x10	; 16
    7f96:	f6 4f       	sbci	r31, 0xF6	; 246
    7f98:	45 90       	lpm	r4, Z+
    7f9a:	55 90       	lpm	r5, Z+
    7f9c:	65 90       	lpm	r6, Z+
    7f9e:	74 90       	lpm	r7, Z
	Span = Next_val - Val;                   //Calc Span
	Saturation_Temp = Val + (Span * decimals);//interpolate between array points
	
    return(Saturation_Temp - comp->Cond_Temp);// Suct_T - Saturation_Temp;	
    7fa0:	07 2e       	mov	r0, r23
    7fa2:	00 0c       	add	r0, r0
    7fa4:	88 0b       	sbc	r24, r24
    7fa6:	99 0b       	sbc	r25, r25
    7fa8:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    7fac:	9b 01       	movw	r18, r22
    7fae:	ac 01       	movw	r20, r24
    7fb0:	c5 01       	movw	r24, r10
    7fb2:	b4 01       	movw	r22, r8
    7fb4:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    7fb8:	4b 01       	movw	r8, r22
    7fba:	5c 01       	movw	r10, r24
    7fbc:	a7 01       	movw	r20, r14
    7fbe:	96 01       	movw	r18, r12
    7fc0:	c3 01       	movw	r24, r6
    7fc2:	b2 01       	movw	r22, r4
    7fc4:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    7fc8:	9b 01       	movw	r18, r22
    7fca:	ac 01       	movw	r20, r24
    7fcc:	c5 01       	movw	r24, r10
    7fce:	b4 01       	movw	r22, r8
    7fd0:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    7fd4:	a7 01       	movw	r20, r14
    7fd6:	96 01       	movw	r18, r12
    7fd8:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    7fdc:	ce 5b       	subi	r28, 0xBE	; 190
    7fde:	df 4f       	sbci	r29, 0xFF	; 255
    7fe0:	28 81       	ld	r18, Y
    7fe2:	39 81       	ldd	r19, Y+1	; 0x01
    7fe4:	4a 81       	ldd	r20, Y+2	; 0x02
    7fe6:	5b 81       	ldd	r21, Y+3	; 0x03
    7fe8:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
}
    7fec:	df 91       	pop	r29
    7fee:	cf 91       	pop	r28
    7ff0:	ff 90       	pop	r15
    7ff2:	ef 90       	pop	r14
    7ff4:	df 90       	pop	r13
    7ff6:	cf 90       	pop	r12
    7ff8:	bf 90       	pop	r11
    7ffa:	af 90       	pop	r10
    7ffc:	9f 90       	pop	r9
    7ffe:	8f 90       	pop	r8
    8000:	7f 90       	pop	r7
    8002:	6f 90       	pop	r6
    8004:	5f 90       	pop	r5
    8006:	4f 90       	pop	r4
    8008:	08 95       	ret

0000800a <corectTrv>:
//-------------------------------------------------------------
float  corectTrv(xCompressor *comp){
    800a:	4f 92       	push	r4
    800c:	5f 92       	push	r5
    800e:	6f 92       	push	r6
    8010:	7f 92       	push	r7
    8012:	8f 92       	push	r8
    8014:	9f 92       	push	r9
    8016:	af 92       	push	r10
    8018:	bf 92       	push	r11
    801a:	cf 92       	push	r12
    801c:	df 92       	push	r13
    801e:	ef 92       	push	r14
    8020:	ff 92       	push	r15
    8022:	cf 93       	push	r28
    8024:	df 93       	push	r29
	static float Superheat_old=0;
	int SSet;
	float ds;
	float Superheat;
	Superheat=comp->SuperHeat;
    8026:	8a 5b       	subi	r24, 0xBA	; 186
    8028:	9f 4f       	sbci	r25, 0xFF	; 255
    802a:	fc 01       	movw	r30, r24
    802c:	c0 80       	ld	r12, Z
    802e:	d1 80       	ldd	r13, Z+1	; 0x01
    8030:	e2 80       	ldd	r14, Z+2	; 0x02
    8032:	f3 80       	ldd	r15, Z+3	; 0x03
	ds = Superheat - Superheat_old; // calculate the change in Superheat
    8034:	20 91 61 07 	lds	r18, 0x0761	; 0x800761 <Superheat_old.3263>
    8038:	30 91 62 07 	lds	r19, 0x0762	; 0x800762 <Superheat_old.3263+0x1>
    803c:	40 91 63 07 	lds	r20, 0x0763	; 0x800763 <Superheat_old.3263+0x2>
    8040:	50 91 64 07 	lds	r21, 0x0764	; 0x800764 <Superheat_old.3263+0x3>
    8044:	c7 01       	movw	r24, r14
    8046:	b6 01       	movw	r22, r12
    8048:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
	ds = ds * 2; // scaling factor for DS
    804c:	9b 01       	movw	r18, r22
    804e:	ac 01       	movw	r20, r24
    8050:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8054:	4b 01       	movw	r8, r22
    8056:	5c 01       	movw	r10, r24
	SSet=7;

	// Variable sampling rate --------------------------------------------
	int  k = 1; // Gain for the steps

	if ( Superheat - SSet > 3)
    8058:	20 e0       	ldi	r18, 0x00	; 0
    805a:	30 e0       	ldi	r19, 0x00	; 0
    805c:	40 ee       	ldi	r20, 0xE0	; 224
    805e:	50 e4       	ldi	r21, 0x40	; 64
    8060:	c7 01       	movw	r24, r14
    8062:	b6 01       	movw	r22, r12
    8064:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    8068:	2b 01       	movw	r4, r22
    806a:	3c 01       	movw	r6, r24
    806c:	20 e0       	ldi	r18, 0x00	; 0
    806e:	30 e0       	ldi	r19, 0x00	; 0
    8070:	40 e4       	ldi	r20, 0x40	; 64
    8072:	50 e4       	ldi	r21, 0x40	; 64
    8074:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    8078:	18 16       	cp	r1, r24
    807a:	e4 f4       	brge	.+56     	; 0x80b4 <corectTrv+0xaa>
	{
		if (ds > 2 || ds < -2)
    807c:	20 e0       	ldi	r18, 0x00	; 0
    807e:	30 e0       	ldi	r19, 0x00	; 0
    8080:	40 e0       	ldi	r20, 0x00	; 0
    8082:	50 e4       	ldi	r21, 0x40	; 64
    8084:	c5 01       	movw	r24, r10
    8086:	b4 01       	movw	r22, r8
    8088:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    808c:	18 16       	cp	r1, r24
    808e:	ac f0       	brlt	.+42     	; 0x80ba <corectTrv+0xb0>
    8090:	20 e0       	ldi	r18, 0x00	; 0
    8092:	30 e0       	ldi	r19, 0x00	; 0
    8094:	40 e0       	ldi	r20, 0x00	; 0
    8096:	50 ec       	ldi	r21, 0xC0	; 192
    8098:	c5 01       	movw	r24, r10
    809a:	b4 01       	movw	r22, r8
    809c:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
	ds = Superheat - Superheat_old; // calculate the change in Superheat
	ds = ds * 2; // scaling factor for DS
	SSet=7;

	// Variable sampling rate --------------------------------------------
	int  k = 1; // Gain for the steps
    80a0:	68 2f       	mov	r22, r24
    80a2:	88 0f       	add	r24, r24
    80a4:	77 0b       	sbc	r23, r23
    80a6:	eb 01       	movw	r28, r22
    80a8:	cc 27       	eor	r28, r28
    80aa:	dd 0f       	add	r29, r29
    80ac:	cc 1f       	adc	r28, r28
    80ae:	dd 27       	eor	r29, r29
    80b0:	21 96       	adiw	r28, 0x01	; 1
    80b2:	05 c0       	rjmp	.+10     	; 0x80be <corectTrv+0xb4>
    80b4:	c1 e0       	ldi	r28, 0x01	; 1
    80b6:	d0 e0       	ldi	r29, 0x00	; 0
    80b8:	02 c0       	rjmp	.+4      	; 0x80be <corectTrv+0xb4>
	if ( Superheat - SSet > 3)
	{
		if (ds > 2 || ds < -2)

		{
			k = 2; // Gain for the steps
    80ba:	c2 e0       	ldi	r28, 0x02	; 2
    80bc:	d0 e0       	ldi	r29, 0x00	; 0
			
		}
	}

	if ( Superheat - SSet >= 5)
    80be:	20 e0       	ldi	r18, 0x00	; 0
    80c0:	30 e0       	ldi	r19, 0x00	; 0
    80c2:	40 ea       	ldi	r20, 0xA0	; 160
    80c4:	50 e4       	ldi	r21, 0x40	; 64
    80c6:	c3 01       	movw	r24, r6
    80c8:	b2 01       	movw	r22, r4
    80ca:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    80ce:	88 23       	and	r24, r24
    80d0:	cc f0       	brlt	.+50     	; 0x8104 <corectTrv+0xfa>
	{
		if (ds > 2 || ds < -2)
    80d2:	20 e0       	ldi	r18, 0x00	; 0
    80d4:	30 e0       	ldi	r19, 0x00	; 0
    80d6:	40 e0       	ldi	r20, 0x00	; 0
    80d8:	50 e4       	ldi	r21, 0x40	; 64
    80da:	c5 01       	movw	r24, r10
    80dc:	b4 01       	movw	r22, r8
    80de:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    80e2:	18 16       	cp	r1, r24
    80e4:	6c f0       	brlt	.+26     	; 0x8100 <corectTrv+0xf6>
    80e6:	20 e0       	ldi	r18, 0x00	; 0
    80e8:	30 e0       	ldi	r19, 0x00	; 0
    80ea:	40 e0       	ldi	r20, 0x00	; 0
    80ec:	50 ec       	ldi	r21, 0xC0	; 192
    80ee:	c5 01       	movw	r24, r10
    80f0:	b4 01       	movw	r22, r8
    80f2:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    80f6:	88 23       	and	r24, r24
    80f8:	2c f4       	brge	.+10     	; 0x8104 <corectTrv+0xfa>
		{
			k = 3; // Gain for the steps
    80fa:	c3 e0       	ldi	r28, 0x03	; 3
    80fc:	d0 e0       	ldi	r29, 0x00	; 0
    80fe:	02 c0       	rjmp	.+4      	; 0x8104 <corectTrv+0xfa>
    8100:	c3 e0       	ldi	r28, 0x03	; 3
    8102:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}

	//------------------------

	if (Superheat < SSet)
    8104:	20 e0       	ldi	r18, 0x00	; 0
    8106:	30 e0       	ldi	r19, 0x00	; 0
    8108:	40 ee       	ldi	r20, 0xE0	; 224
    810a:	50 e4       	ldi	r21, 0x40	; 64
    810c:	c7 01       	movw	r24, r14
    810e:	b6 01       	movw	r22, r12
    8110:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    8114:	88 23       	and	r24, r24
    8116:	84 f4       	brge	.+32     	; 0x8138 <corectTrv+0x12e>
	{
		k = -1; // if the Superheat is too low, this gain changes the step direction
		Superheat = SSet + 10 - Superheat;
    8118:	a7 01       	movw	r20, r14
    811a:	96 01       	movw	r18, r12
    811c:	60 e0       	ldi	r22, 0x00	; 0
    811e:	70 e0       	ldi	r23, 0x00	; 0
    8120:	88 e8       	ldi	r24, 0x88	; 136
    8122:	91 e4       	ldi	r25, 0x41	; 65
    8124:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    8128:	6b 01       	movw	r12, r22
    812a:	7c 01       	movw	r14, r24
		ds = -ds;
    812c:	b7 fa       	bst	r11, 7
    812e:	b0 94       	com	r11
    8130:	b7 f8       	bld	r11, 7
    8132:	b0 94       	com	r11

	//------------------------

	if (Superheat < SSet)
	{
		k = -1; // if the Superheat is too low, this gain changes the step direction
    8134:	cf ef       	ldi	r28, 0xFF	; 255
    8136:	df ef       	ldi	r29, 0xFF	; 255
		Superheat = SSet + 10 - Superheat;
		ds = -ds;
	}
	
	Superheat_old = Superheat;
    8138:	c0 92 61 07 	sts	0x0761, r12	; 0x800761 <Superheat_old.3263>
    813c:	d0 92 62 07 	sts	0x0762, r13	; 0x800762 <Superheat_old.3263+0x1>
    8140:	e0 92 63 07 	sts	0x0763, r14	; 0x800763 <Superheat_old.3263+0x2>
    8144:	f0 92 64 07 	sts	0x0764, r15	; 0x800764 <Superheat_old.3263+0x3>
	
	if (ds > 20)
    8148:	20 e0       	ldi	r18, 0x00	; 0
    814a:	30 e0       	ldi	r19, 0x00	; 0
    814c:	40 ea       	ldi	r20, 0xA0	; 160
    814e:	51 e4       	ldi	r21, 0x41	; 65
    8150:	c5 01       	movw	r24, r10
    8152:	b4 01       	movw	r22, r8
    8154:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    8158:	18 16       	cp	r1, r24
    815a:	14 f4       	brge	.+4      	; 0x8160 <corectTrv+0x156>
    815c:	0c 94 4f 4b 	jmp	0x969e	; 0x969e <corectTrv+0x1694>
	{
		ds = 20;
	}

	 else if (ds < -20)
    8160:	20 e0       	ldi	r18, 0x00	; 0
    8162:	30 e0       	ldi	r19, 0x00	; 0
    8164:	40 ea       	ldi	r20, 0xA0	; 160
    8166:	51 ec       	ldi	r21, 0xC1	; 193
    8168:	c5 01       	movw	r24, r10
    816a:	b4 01       	movw	r22, r8
    816c:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    8170:	88 23       	and	r24, r24
    8172:	64 f0       	brlt	.+24     	; 0x818c <corectTrv+0x182>
	{
		ds = -20;
	}
//--------------------------------------
	if (ds < -10)
    8174:	20 e0       	ldi	r18, 0x00	; 0
    8176:	30 e0       	ldi	r19, 0x00	; 0
    8178:	40 e2       	ldi	r20, 0x20	; 32
    817a:	51 ec       	ldi	r21, 0xC1	; 193
    817c:	c5 01       	movw	r24, r10
    817e:	b4 01       	movw	r22, r8
    8180:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    8184:	88 23       	and	r24, r24
    8186:	0c f0       	brlt	.+2      	; 0x818a <corectTrv+0x180>
    8188:	ab c3       	rjmp	.+1878   	; 0x88e0 <corectTrv+0x8d6>
    818a:	08 c0       	rjmp	.+16     	; 0x819c <corectTrv+0x192>
		ds = 20;
	}

	 else if (ds < -20)
	{
		ds = -20;
    818c:	0f 2e       	mov	r0, r31
    818e:	81 2c       	mov	r8, r1
    8190:	91 2c       	mov	r9, r1
    8192:	f0 ea       	ldi	r31, 0xA0	; 160
    8194:	af 2e       	mov	r10, r31
    8196:	f1 ec       	ldi	r31, 0xC1	; 193
    8198:	bf 2e       	mov	r11, r31
    819a:	f0 2d       	mov	r31, r0
	}
//--------------------------------------
	if (ds < -10)
	{
		if (Superheat == SSet)
    819c:	20 e0       	ldi	r18, 0x00	; 0
    819e:	30 e0       	ldi	r19, 0x00	; 0
    81a0:	40 ee       	ldi	r20, 0xE0	; 224
    81a2:	50 e4       	ldi	r21, 0x40	; 64
    81a4:	c7 01       	movw	r24, r14
    81a6:	b6 01       	movw	r22, r12
    81a8:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    81ac:	81 11       	cpse	r24, r1
    81ae:	32 c0       	rjmp	.+100    	; 0x8214 <corectTrv+0x20a>
		{
			return(-0.123 * ds * ds - 2.768 * ds - 30.62)* k ;
    81b0:	2d e6       	ldi	r18, 0x6D	; 109
    81b2:	37 ee       	ldi	r19, 0xE7	; 231
    81b4:	4b ef       	ldi	r20, 0xFB	; 251
    81b6:	5d eb       	ldi	r21, 0xBD	; 189
    81b8:	c5 01       	movw	r24, r10
    81ba:	b4 01       	movw	r22, r8
    81bc:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    81c0:	a5 01       	movw	r20, r10
    81c2:	94 01       	movw	r18, r8
    81c4:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    81c8:	6b 01       	movw	r12, r22
    81ca:	7c 01       	movw	r14, r24
    81cc:	29 ee       	ldi	r18, 0xE9	; 233
    81ce:	36 e2       	ldi	r19, 0x26	; 38
    81d0:	41 e3       	ldi	r20, 0x31	; 49
    81d2:	50 e4       	ldi	r21, 0x40	; 64
    81d4:	c5 01       	movw	r24, r10
    81d6:	b4 01       	movw	r22, r8
    81d8:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    81dc:	9b 01       	movw	r18, r22
    81de:	ac 01       	movw	r20, r24
    81e0:	c7 01       	movw	r24, r14
    81e2:	b6 01       	movw	r22, r12
    81e4:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    81e8:	23 ec       	ldi	r18, 0xC3	; 195
    81ea:	35 ef       	ldi	r19, 0xF5	; 245
    81ec:	44 ef       	ldi	r20, 0xF4	; 244
    81ee:	51 e4       	ldi	r21, 0x41	; 65
    81f0:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    81f4:	6b 01       	movw	r12, r22
    81f6:	7c 01       	movw	r14, r24
    81f8:	be 01       	movw	r22, r28
    81fa:	dd 0f       	add	r29, r29
    81fc:	88 0b       	sbc	r24, r24
    81fe:	99 0b       	sbc	r25, r25
    8200:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    8204:	9b 01       	movw	r18, r22
    8206:	ac 01       	movw	r20, r24
    8208:	c7 01       	movw	r24, r14
    820a:	b6 01       	movw	r22, r12
    820c:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8210:	0c 94 fd 4c 	jmp	0x99fa	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    8214:	20 e0       	ldi	r18, 0x00	; 0
    8216:	30 e0       	ldi	r19, 0x00	; 0
    8218:	40 ee       	ldi	r20, 0xE0	; 224
    821a:	50 e4       	ldi	r21, 0x40	; 64
    821c:	c7 01       	movw	r24, r14
    821e:	b6 01       	movw	r22, r12
    8220:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    8224:	18 16       	cp	r1, r24
    8226:	0c f0       	brlt	.+2      	; 0x822a <corectTrv+0x220>
    8228:	55 c0       	rjmp	.+170    	; 0x82d4 <corectTrv+0x2ca>
    822a:	20 e0       	ldi	r18, 0x00	; 0
    822c:	30 e0       	ldi	r19, 0x00	; 0
    822e:	40 e0       	ldi	r20, 0x00	; 0
    8230:	51 e4       	ldi	r21, 0x41	; 65
    8232:	c7 01       	movw	r24, r14
    8234:	b6 01       	movw	r22, r12
    8236:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    823a:	18 16       	cp	r1, r24
    823c:	0c f4       	brge	.+2      	; 0x8240 <corectTrv+0x236>
    823e:	4a c0       	rjmp	.+148    	; 0x82d4 <corectTrv+0x2ca>
		{
			return( 0.02416 * ds * ds * ds + 0.95688 * ds * ds + 12.69588 * ds + 44.31142)* k;
    8240:	21 e3       	ldi	r18, 0x31	; 49
    8242:	3b ee       	ldi	r19, 0xEB	; 235
    8244:	45 ec       	ldi	r20, 0xC5	; 197
    8246:	5c e3       	ldi	r21, 0x3C	; 60
    8248:	c5 01       	movw	r24, r10
    824a:	b4 01       	movw	r22, r8
    824c:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8250:	a5 01       	movw	r20, r10
    8252:	94 01       	movw	r18, r8
    8254:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8258:	a5 01       	movw	r20, r10
    825a:	94 01       	movw	r18, r8
    825c:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8260:	6b 01       	movw	r12, r22
    8262:	7c 01       	movw	r14, r24
    8264:	26 e1       	ldi	r18, 0x16	; 22
    8266:	36 ef       	ldi	r19, 0xF6	; 246
    8268:	44 e7       	ldi	r20, 0x74	; 116
    826a:	5f e3       	ldi	r21, 0x3F	; 63
    826c:	c5 01       	movw	r24, r10
    826e:	b4 01       	movw	r22, r8
    8270:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8274:	a5 01       	movw	r20, r10
    8276:	94 01       	movw	r18, r8
    8278:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    827c:	9b 01       	movw	r18, r22
    827e:	ac 01       	movw	r20, r24
    8280:	c7 01       	movw	r24, r14
    8282:	b6 01       	movw	r22, r12
    8284:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8288:	6b 01       	movw	r12, r22
    828a:	7c 01       	movw	r14, r24
    828c:	23 e5       	ldi	r18, 0x53	; 83
    828e:	32 e2       	ldi	r19, 0x22	; 34
    8290:	4b e4       	ldi	r20, 0x4B	; 75
    8292:	51 e4       	ldi	r21, 0x41	; 65
    8294:	c5 01       	movw	r24, r10
    8296:	b4 01       	movw	r22, r8
    8298:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    829c:	9b 01       	movw	r18, r22
    829e:	ac 01       	movw	r20, r24
    82a0:	c7 01       	movw	r24, r14
    82a2:	b6 01       	movw	r22, r12
    82a4:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    82a8:	25 ee       	ldi	r18, 0xE5	; 229
    82aa:	3e e3       	ldi	r19, 0x3E	; 62
    82ac:	41 e3       	ldi	r20, 0x31	; 49
    82ae:	52 e4       	ldi	r21, 0x42	; 66
    82b0:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    82b4:	6b 01       	movw	r12, r22
    82b6:	7c 01       	movw	r14, r24
    82b8:	be 01       	movw	r22, r28
    82ba:	dd 0f       	add	r29, r29
    82bc:	88 0b       	sbc	r24, r24
    82be:	99 0b       	sbc	r25, r25
    82c0:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    82c4:	9b 01       	movw	r18, r22
    82c6:	ac 01       	movw	r20, r24
    82c8:	c7 01       	movw	r24, r14
    82ca:	b6 01       	movw	r22, r12
    82cc:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    82d0:	0c 94 fd 4c 	jmp	0x99fa	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    82d4:	20 e0       	ldi	r18, 0x00	; 0
    82d6:	30 e0       	ldi	r19, 0x00	; 0
    82d8:	40 e0       	ldi	r20, 0x00	; 0
    82da:	51 e4       	ldi	r21, 0x41	; 65
    82dc:	c7 01       	movw	r24, r14
    82de:	b6 01       	movw	r22, r12
    82e0:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    82e4:	18 16       	cp	r1, r24
    82e6:	0c f0       	brlt	.+2      	; 0x82ea <corectTrv+0x2e0>
    82e8:	55 c0       	rjmp	.+170    	; 0x8394 <corectTrv+0x38a>
    82ea:	20 e0       	ldi	r18, 0x00	; 0
    82ec:	30 e0       	ldi	r19, 0x00	; 0
    82ee:	40 e1       	ldi	r20, 0x10	; 16
    82f0:	51 e4       	ldi	r21, 0x41	; 65
    82f2:	c7 01       	movw	r24, r14
    82f4:	b6 01       	movw	r22, r12
    82f6:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    82fa:	18 16       	cp	r1, r24
    82fc:	0c f4       	brge	.+2      	; 0x8300 <corectTrv+0x2f6>
    82fe:	4a c0       	rjmp	.+148    	; 0x8394 <corectTrv+0x38a>
		{
			return( 0.01715 * ds * ds * ds + 0.64880 * ds * ds + 8.39021 * ds + 27.61058)* k;
    8300:	28 e2       	ldi	r18, 0x28	; 40
    8302:	3e e7       	ldi	r19, 0x7E	; 126
    8304:	4c e8       	ldi	r20, 0x8C	; 140
    8306:	5c e3       	ldi	r21, 0x3C	; 60
    8308:	c5 01       	movw	r24, r10
    830a:	b4 01       	movw	r22, r8
    830c:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8310:	a5 01       	movw	r20, r10
    8312:	94 01       	movw	r18, r8
    8314:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8318:	a5 01       	movw	r20, r10
    831a:	94 01       	movw	r18, r8
    831c:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8320:	6b 01       	movw	r12, r22
    8322:	7c 01       	movw	r14, r24
    8324:	22 ec       	ldi	r18, 0xC2	; 194
    8326:	37 e1       	ldi	r19, 0x17	; 23
    8328:	46 e2       	ldi	r20, 0x26	; 38
    832a:	5f e3       	ldi	r21, 0x3F	; 63
    832c:	c5 01       	movw	r24, r10
    832e:	b4 01       	movw	r22, r8
    8330:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8334:	a5 01       	movw	r20, r10
    8336:	94 01       	movw	r18, r8
    8338:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    833c:	9b 01       	movw	r18, r22
    833e:	ac 01       	movw	r20, r24
    8340:	c7 01       	movw	r24, r14
    8342:	b6 01       	movw	r22, r12
    8344:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8348:	6b 01       	movw	r12, r22
    834a:	7c 01       	movw	r14, r24
    834c:	2d e4       	ldi	r18, 0x4D	; 77
    834e:	3e e3       	ldi	r19, 0x3E	; 62
    8350:	46 e0       	ldi	r20, 0x06	; 6
    8352:	51 e4       	ldi	r21, 0x41	; 65
    8354:	c5 01       	movw	r24, r10
    8356:	b4 01       	movw	r22, r8
    8358:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    835c:	9b 01       	movw	r18, r22
    835e:	ac 01       	movw	r20, r24
    8360:	c7 01       	movw	r24, r14
    8362:	b6 01       	movw	r22, r12
    8364:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8368:	28 e7       	ldi	r18, 0x78	; 120
    836a:	32 ee       	ldi	r19, 0xE2	; 226
    836c:	4c ed       	ldi	r20, 0xDC	; 220
    836e:	51 e4       	ldi	r21, 0x41	; 65
    8370:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8374:	6b 01       	movw	r12, r22
    8376:	7c 01       	movw	r14, r24
    8378:	be 01       	movw	r22, r28
    837a:	dd 0f       	add	r29, r29
    837c:	88 0b       	sbc	r24, r24
    837e:	99 0b       	sbc	r25, r25
    8380:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    8384:	9b 01       	movw	r18, r22
    8386:	ac 01       	movw	r20, r24
    8388:	c7 01       	movw	r24, r14
    838a:	b6 01       	movw	r22, r12
    838c:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8390:	0c 94 fd 4c 	jmp	0x99fa	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    8394:	20 e0       	ldi	r18, 0x00	; 0
    8396:	30 e0       	ldi	r19, 0x00	; 0
    8398:	40 e1       	ldi	r20, 0x10	; 16
    839a:	51 e4       	ldi	r21, 0x41	; 65
    839c:	c7 01       	movw	r24, r14
    839e:	b6 01       	movw	r22, r12
    83a0:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    83a4:	18 16       	cp	r1, r24
    83a6:	74 f5       	brge	.+92     	; 0x8404 <corectTrv+0x3fa>
    83a8:	20 e0       	ldi	r18, 0x00	; 0
    83aa:	30 e0       	ldi	r19, 0x00	; 0
    83ac:	40 e2       	ldi	r20, 0x20	; 32
    83ae:	51 e4       	ldi	r21, 0x41	; 65
    83b0:	c7 01       	movw	r24, r14
    83b2:	b6 01       	movw	r22, r12
    83b4:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    83b8:	18 16       	cp	r1, r24
    83ba:	24 f1       	brlt	.+72     	; 0x8404 <corectTrv+0x3fa>
		{
			return( -0.099 * ds * ds - 2.002 * ds - 16.444);
    83bc:	23 e8       	ldi	r18, 0x83	; 131
    83be:	30 ec       	ldi	r19, 0xC0	; 192
    83c0:	4a ec       	ldi	r20, 0xCA	; 202
    83c2:	5d eb       	ldi	r21, 0xBD	; 189
    83c4:	c5 01       	movw	r24, r10
    83c6:	b4 01       	movw	r22, r8
    83c8:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    83cc:	a5 01       	movw	r20, r10
    83ce:	94 01       	movw	r18, r8
    83d0:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    83d4:	6b 01       	movw	r12, r22
    83d6:	7c 01       	movw	r14, r24
    83d8:	25 ec       	ldi	r18, 0xC5	; 197
    83da:	30 e2       	ldi	r19, 0x20	; 32
    83dc:	40 e0       	ldi	r20, 0x00	; 0
    83de:	50 e4       	ldi	r21, 0x40	; 64
    83e0:	c5 01       	movw	r24, r10
    83e2:	b4 01       	movw	r22, r8
    83e4:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    83e8:	9b 01       	movw	r18, r22
    83ea:	ac 01       	movw	r20, r24
    83ec:	c7 01       	movw	r24, r14
    83ee:	b6 01       	movw	r22, r12
    83f0:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    83f4:	20 e5       	ldi	r18, 0x50	; 80
    83f6:	3d e8       	ldi	r19, 0x8D	; 141
    83f8:	43 e8       	ldi	r20, 0x83	; 131
    83fa:	51 e4       	ldi	r21, 0x41	; 65
    83fc:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    8400:	0c 94 fd 4c 	jmp	0x99fa	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    8404:	20 e0       	ldi	r18, 0x00	; 0
    8406:	30 e0       	ldi	r19, 0x00	; 0
    8408:	40 e2       	ldi	r20, 0x20	; 32
    840a:	51 e4       	ldi	r21, 0x41	; 65
    840c:	c7 01       	movw	r24, r14
    840e:	b6 01       	movw	r22, r12
    8410:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    8414:	18 16       	cp	r1, r24
    8416:	74 f5       	brge	.+92     	; 0x8474 <corectTrv+0x46a>
    8418:	20 e0       	ldi	r18, 0x00	; 0
    841a:	30 e0       	ldi	r19, 0x00	; 0
    841c:	40 e3       	ldi	r20, 0x30	; 48
    841e:	51 e4       	ldi	r21, 0x41	; 65
    8420:	c7 01       	movw	r24, r14
    8422:	b6 01       	movw	r22, r12
    8424:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    8428:	18 16       	cp	r1, r24
    842a:	24 f1       	brlt	.+72     	; 0x8474 <corectTrv+0x46a>
		{
			return( -0.065 * ds * ds - 0.773 * ds - 4.451);
    842c:	28 eb       	ldi	r18, 0xB8	; 184
    842e:	3e e1       	ldi	r19, 0x1E	; 30
    8430:	45 e8       	ldi	r20, 0x85	; 133
    8432:	5d eb       	ldi	r21, 0xBD	; 189
    8434:	c5 01       	movw	r24, r10
    8436:	b4 01       	movw	r22, r8
    8438:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    843c:	a5 01       	movw	r20, r10
    843e:	94 01       	movw	r18, r8
    8440:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8444:	6b 01       	movw	r12, r22
    8446:	7c 01       	movw	r14, r24
    8448:	24 e5       	ldi	r18, 0x54	; 84
    844a:	33 ee       	ldi	r19, 0xE3	; 227
    844c:	45 e4       	ldi	r20, 0x45	; 69
    844e:	5f e3       	ldi	r21, 0x3F	; 63
    8450:	c5 01       	movw	r24, r10
    8452:	b4 01       	movw	r22, r8
    8454:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8458:	9b 01       	movw	r18, r22
    845a:	ac 01       	movw	r20, r24
    845c:	c7 01       	movw	r24, r14
    845e:	b6 01       	movw	r22, r12
    8460:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    8464:	28 e9       	ldi	r18, 0x98	; 152
    8466:	3e e6       	ldi	r19, 0x6E	; 110
    8468:	4e e8       	ldi	r20, 0x8E	; 142
    846a:	50 e4       	ldi	r21, 0x40	; 64
    846c:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    8470:	0c 94 fd 4c 	jmp	0x99fa	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    8474:	20 e0       	ldi	r18, 0x00	; 0
    8476:	30 e0       	ldi	r19, 0x00	; 0
    8478:	40 e3       	ldi	r20, 0x30	; 48
    847a:	51 e4       	ldi	r21, 0x41	; 65
    847c:	c7 01       	movw	r24, r14
    847e:	b6 01       	movw	r22, r12
    8480:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    8484:	18 16       	cp	r1, r24
    8486:	0c f0       	brlt	.+2      	; 0x848a <corectTrv+0x480>
    8488:	55 c0       	rjmp	.+170    	; 0x8534 <corectTrv+0x52a>
    848a:	20 e0       	ldi	r18, 0x00	; 0
    848c:	30 e0       	ldi	r19, 0x00	; 0
    848e:	40 e4       	ldi	r20, 0x40	; 64
    8490:	51 e4       	ldi	r21, 0x41	; 65
    8492:	c7 01       	movw	r24, r14
    8494:	b6 01       	movw	r22, r12
    8496:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    849a:	18 16       	cp	r1, r24
    849c:	0c f4       	brge	.+2      	; 0x84a0 <corectTrv+0x496>
    849e:	4a c0       	rjmp	.+148    	; 0x8534 <corectTrv+0x52a>
		{
			return( 0.01315 * ds * ds * ds + 0.59145 * ds * ds + 10.05298 * ds + 54.52301)* k;
    84a0:	29 e1       	ldi	r18, 0x19	; 25
    84a2:	33 e7       	ldi	r19, 0x73	; 115
    84a4:	47 e5       	ldi	r20, 0x57	; 87
    84a6:	5c e3       	ldi	r21, 0x3C	; 60
    84a8:	c5 01       	movw	r24, r10
    84aa:	b4 01       	movw	r22, r8
    84ac:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    84b0:	a5 01       	movw	r20, r10
    84b2:	94 01       	movw	r18, r8
    84b4:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    84b8:	a5 01       	movw	r20, r10
    84ba:	94 01       	movw	r18, r8
    84bc:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    84c0:	6b 01       	movw	r12, r22
    84c2:	7c 01       	movw	r14, r24
    84c4:	24 e4       	ldi	r18, 0x44	; 68
    84c6:	39 e6       	ldi	r19, 0x69	; 105
    84c8:	47 e1       	ldi	r20, 0x17	; 23
    84ca:	5f e3       	ldi	r21, 0x3F	; 63
    84cc:	c5 01       	movw	r24, r10
    84ce:	b4 01       	movw	r22, r8
    84d0:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    84d4:	a5 01       	movw	r20, r10
    84d6:	94 01       	movw	r18, r8
    84d8:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    84dc:	9b 01       	movw	r18, r22
    84de:	ac 01       	movw	r20, r24
    84e0:	c7 01       	movw	r24, r14
    84e2:	b6 01       	movw	r22, r12
    84e4:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    84e8:	6b 01       	movw	r12, r22
    84ea:	7c 01       	movw	r14, r24
    84ec:	22 e0       	ldi	r18, 0x02	; 2
    84ee:	39 ed       	ldi	r19, 0xD9	; 217
    84f0:	40 e2       	ldi	r20, 0x20	; 32
    84f2:	51 e4       	ldi	r21, 0x41	; 65
    84f4:	c5 01       	movw	r24, r10
    84f6:	b4 01       	movw	r22, r8
    84f8:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    84fc:	9b 01       	movw	r18, r22
    84fe:	ac 01       	movw	r20, r24
    8500:	c7 01       	movw	r24, r14
    8502:	b6 01       	movw	r22, r12
    8504:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8508:	20 e9       	ldi	r18, 0x90	; 144
    850a:	37 e1       	ldi	r19, 0x17	; 23
    850c:	4a e5       	ldi	r20, 0x5A	; 90
    850e:	52 e4       	ldi	r21, 0x42	; 66
    8510:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8514:	6b 01       	movw	r12, r22
    8516:	7c 01       	movw	r14, r24
    8518:	be 01       	movw	r22, r28
    851a:	dd 0f       	add	r29, r29
    851c:	88 0b       	sbc	r24, r24
    851e:	99 0b       	sbc	r25, r25
    8520:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    8524:	9b 01       	movw	r18, r22
    8526:	ac 01       	movw	r20, r24
    8528:	c7 01       	movw	r24, r14
    852a:	b6 01       	movw	r22, r12
    852c:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8530:	0c 94 fd 4c 	jmp	0x99fa	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    8534:	20 e0       	ldi	r18, 0x00	; 0
    8536:	30 e0       	ldi	r19, 0x00	; 0
    8538:	40 e4       	ldi	r20, 0x40	; 64
    853a:	51 e4       	ldi	r21, 0x41	; 65
    853c:	c7 01       	movw	r24, r14
    853e:	b6 01       	movw	r22, r12
    8540:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    8544:	18 16       	cp	r1, r24
    8546:	0c f0       	brlt	.+2      	; 0x854a <corectTrv+0x540>
    8548:	55 c0       	rjmp	.+170    	; 0x85f4 <corectTrv+0x5ea>
    854a:	20 e0       	ldi	r18, 0x00	; 0
    854c:	30 e0       	ldi	r19, 0x00	; 0
    854e:	40 e5       	ldi	r20, 0x50	; 80
    8550:	51 e4       	ldi	r21, 0x41	; 65
    8552:	c7 01       	movw	r24, r14
    8554:	b6 01       	movw	r22, r12
    8556:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    855a:	18 16       	cp	r1, r24
    855c:	0c f4       	brge	.+2      	; 0x8560 <corectTrv+0x556>
    855e:	4a c0       	rjmp	.+148    	; 0x85f4 <corectTrv+0x5ea>
		{
			return( 0.02485 * ds * ds * ds + 1.09724 * ds * ds + 17.05530 * ds + 89.43916)* k;
    8560:	2a e3       	ldi	r18, 0x3A	; 58
    8562:	32 e9       	ldi	r19, 0x92	; 146
    8564:	4b ec       	ldi	r20, 0xCB	; 203
    8566:	5c e3       	ldi	r21, 0x3C	; 60
    8568:	c5 01       	movw	r24, r10
    856a:	b4 01       	movw	r22, r8
    856c:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8570:	a5 01       	movw	r20, r10
    8572:	94 01       	movw	r18, r8
    8574:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8578:	a5 01       	movw	r20, r10
    857a:	94 01       	movw	r18, r8
    857c:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8580:	6b 01       	movw	r12, r22
    8582:	7c 01       	movw	r14, r24
    8584:	2c e5       	ldi	r18, 0x5C	; 92
    8586:	32 e7       	ldi	r19, 0x72	; 114
    8588:	4c e8       	ldi	r20, 0x8C	; 140
    858a:	5f e3       	ldi	r21, 0x3F	; 63
    858c:	c5 01       	movw	r24, r10
    858e:	b4 01       	movw	r22, r8
    8590:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8594:	a5 01       	movw	r20, r10
    8596:	94 01       	movw	r18, r8
    8598:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    859c:	9b 01       	movw	r18, r22
    859e:	ac 01       	movw	r20, r24
    85a0:	c7 01       	movw	r24, r14
    85a2:	b6 01       	movw	r22, r12
    85a4:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    85a8:	6b 01       	movw	r12, r22
    85aa:	7c 01       	movw	r14, r24
    85ac:	21 e4       	ldi	r18, 0x41	; 65
    85ae:	31 e7       	ldi	r19, 0x71	; 113
    85b0:	48 e8       	ldi	r20, 0x88	; 136
    85b2:	51 e4       	ldi	r21, 0x41	; 65
    85b4:	c5 01       	movw	r24, r10
    85b6:	b4 01       	movw	r22, r8
    85b8:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    85bc:	9b 01       	movw	r18, r22
    85be:	ac 01       	movw	r20, r24
    85c0:	c7 01       	movw	r24, r14
    85c2:	b6 01       	movw	r22, r12
    85c4:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    85c8:	2a ed       	ldi	r18, 0xDA	; 218
    85ca:	30 ee       	ldi	r19, 0xE0	; 224
    85cc:	42 eb       	ldi	r20, 0xB2	; 178
    85ce:	52 e4       	ldi	r21, 0x42	; 66
    85d0:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    85d4:	6b 01       	movw	r12, r22
    85d6:	7c 01       	movw	r14, r24
    85d8:	be 01       	movw	r22, r28
    85da:	dd 0f       	add	r29, r29
    85dc:	88 0b       	sbc	r24, r24
    85de:	99 0b       	sbc	r25, r25
    85e0:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    85e4:	9b 01       	movw	r18, r22
    85e6:	ac 01       	movw	r20, r24
    85e8:	c7 01       	movw	r24, r14
    85ea:	b6 01       	movw	r22, r12
    85ec:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    85f0:	0c 94 fd 4c 	jmp	0x99fa	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    85f4:	20 e0       	ldi	r18, 0x00	; 0
    85f6:	30 e0       	ldi	r19, 0x00	; 0
    85f8:	40 e5       	ldi	r20, 0x50	; 80
    85fa:	51 e4       	ldi	r21, 0x41	; 65
    85fc:	c7 01       	movw	r24, r14
    85fe:	b6 01       	movw	r22, r12
    8600:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    8604:	18 16       	cp	r1, r24
    8606:	0c f0       	brlt	.+2      	; 0x860a <corectTrv+0x600>
    8608:	55 c0       	rjmp	.+170    	; 0x86b4 <corectTrv+0x6aa>
    860a:	20 e0       	ldi	r18, 0x00	; 0
    860c:	30 e0       	ldi	r19, 0x00	; 0
    860e:	40 e6       	ldi	r20, 0x60	; 96
    8610:	51 e4       	ldi	r21, 0x41	; 65
    8612:	c7 01       	movw	r24, r14
    8614:	b6 01       	movw	r22, r12
    8616:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    861a:	18 16       	cp	r1, r24
    861c:	0c f4       	brge	.+2      	; 0x8620 <corectTrv+0x616>
    861e:	4a c0       	rjmp	.+148    	; 0x86b4 <corectTrv+0x6aa>
		{
			return( 0.02257 * ds * ds * ds + 0.99967 * ds * ds + 15.71735 * ds + 86.11652)* k;
    8620:	28 eb       	ldi	r18, 0xB8	; 184
    8622:	34 ee       	ldi	r19, 0xE4	; 228
    8624:	48 eb       	ldi	r20, 0xB8	; 184
    8626:	5c e3       	ldi	r21, 0x3C	; 60
    8628:	c5 01       	movw	r24, r10
    862a:	b4 01       	movw	r22, r8
    862c:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8630:	a5 01       	movw	r20, r10
    8632:	94 01       	movw	r18, r8
    8634:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8638:	a5 01       	movw	r20, r10
    863a:	94 01       	movw	r18, r8
    863c:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8640:	6b 01       	movw	r12, r22
    8642:	7c 01       	movw	r14, r24
    8644:	20 e6       	ldi	r18, 0x60	; 96
    8646:	3a ee       	ldi	r19, 0xEA	; 234
    8648:	4f e7       	ldi	r20, 0x7F	; 127
    864a:	5f e3       	ldi	r21, 0x3F	; 63
    864c:	c5 01       	movw	r24, r10
    864e:	b4 01       	movw	r22, r8
    8650:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8654:	a5 01       	movw	r20, r10
    8656:	94 01       	movw	r18, r8
    8658:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    865c:	9b 01       	movw	r18, r22
    865e:	ac 01       	movw	r20, r24
    8660:	c7 01       	movw	r24, r14
    8662:	b6 01       	movw	r22, r12
    8664:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8668:	6b 01       	movw	r12, r22
    866a:	7c 01       	movw	r14, r24
    866c:	24 e4       	ldi	r18, 0x44	; 68
    866e:	3a e7       	ldi	r19, 0x7A	; 122
    8670:	4b e7       	ldi	r20, 0x7B	; 123
    8672:	51 e4       	ldi	r21, 0x41	; 65
    8674:	c5 01       	movw	r24, r10
    8676:	b4 01       	movw	r22, r8
    8678:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    867c:	9b 01       	movw	r18, r22
    867e:	ac 01       	movw	r20, r24
    8680:	c7 01       	movw	r24, r14
    8682:	b6 01       	movw	r22, r12
    8684:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8688:	29 ea       	ldi	r18, 0xA9	; 169
    868a:	3b e3       	ldi	r19, 0x3B	; 59
    868c:	4c ea       	ldi	r20, 0xAC	; 172
    868e:	52 e4       	ldi	r21, 0x42	; 66
    8690:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8694:	6b 01       	movw	r12, r22
    8696:	7c 01       	movw	r14, r24
    8698:	be 01       	movw	r22, r28
    869a:	dd 0f       	add	r29, r29
    869c:	88 0b       	sbc	r24, r24
    869e:	99 0b       	sbc	r25, r25
    86a0:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    86a4:	9b 01       	movw	r18, r22
    86a6:	ac 01       	movw	r20, r24
    86a8:	c7 01       	movw	r24, r14
    86aa:	b6 01       	movw	r22, r12
    86ac:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    86b0:	0c 94 fd 4c 	jmp	0x99fa	; 0x99fa <corectTrv+0x19f0>
		}
		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    86b4:	20 e0       	ldi	r18, 0x00	; 0
    86b6:	30 e0       	ldi	r19, 0x00	; 0
    86b8:	40 e6       	ldi	r20, 0x60	; 96
    86ba:	51 e4       	ldi	r21, 0x41	; 65
    86bc:	c7 01       	movw	r24, r14
    86be:	b6 01       	movw	r22, r12
    86c0:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    86c4:	18 16       	cp	r1, r24
    86c6:	0c f0       	brlt	.+2      	; 0x86ca <corectTrv+0x6c0>
    86c8:	55 c0       	rjmp	.+170    	; 0x8774 <corectTrv+0x76a>
    86ca:	20 e0       	ldi	r18, 0x00	; 0
    86cc:	30 e0       	ldi	r19, 0x00	; 0
    86ce:	40 e7       	ldi	r20, 0x70	; 112
    86d0:	51 e4       	ldi	r21, 0x41	; 65
    86d2:	c7 01       	movw	r24, r14
    86d4:	b6 01       	movw	r22, r12
    86d6:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    86da:	18 16       	cp	r1, r24
    86dc:	0c f4       	brge	.+2      	; 0x86e0 <corectTrv+0x6d6>
    86de:	4a c0       	rjmp	.+148    	; 0x8774 <corectTrv+0x76a>
		{
			return( 0.02199 * ds * ds * ds + 0.99841 * ds * ds + 16.07877 * ds + 91.69972)* k;
    86e0:	2f e5       	ldi	r18, 0x5F	; 95
    86e2:	34 e2       	ldi	r19, 0x24	; 36
    86e4:	44 eb       	ldi	r20, 0xB4	; 180
    86e6:	5c e3       	ldi	r21, 0x3C	; 60
    86e8:	c5 01       	movw	r24, r10
    86ea:	b4 01       	movw	r22, r8
    86ec:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    86f0:	a5 01       	movw	r20, r10
    86f2:	94 01       	movw	r18, r8
    86f4:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    86f8:	a5 01       	movw	r20, r10
    86fa:	94 01       	movw	r18, r8
    86fc:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8700:	6b 01       	movw	r12, r22
    8702:	7c 01       	movw	r14, r24
    8704:	2c ec       	ldi	r18, 0xCC	; 204
    8706:	37 e9       	ldi	r19, 0x97	; 151
    8708:	4f e7       	ldi	r20, 0x7F	; 127
    870a:	5f e3       	ldi	r21, 0x3F	; 63
    870c:	c5 01       	movw	r24, r10
    870e:	b4 01       	movw	r22, r8
    8710:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8714:	a5 01       	movw	r20, r10
    8716:	94 01       	movw	r18, r8
    8718:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    871c:	9b 01       	movw	r18, r22
    871e:	ac 01       	movw	r20, r24
    8720:	c7 01       	movw	r24, r14
    8722:	b6 01       	movw	r22, r12
    8724:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8728:	6b 01       	movw	r12, r22
    872a:	7c 01       	movw	r14, r24
    872c:	22 e5       	ldi	r18, 0x52	; 82
    872e:	31 ea       	ldi	r19, 0xA1	; 161
    8730:	40 e8       	ldi	r20, 0x80	; 128
    8732:	51 e4       	ldi	r21, 0x41	; 65
    8734:	c5 01       	movw	r24, r10
    8736:	b4 01       	movw	r22, r8
    8738:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    873c:	9b 01       	movw	r18, r22
    873e:	ac 01       	movw	r20, r24
    8740:	c7 01       	movw	r24, r14
    8742:	b6 01       	movw	r22, r12
    8744:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8748:	22 e4       	ldi	r18, 0x42	; 66
    874a:	36 e6       	ldi	r19, 0x66	; 102
    874c:	47 eb       	ldi	r20, 0xB7	; 183
    874e:	52 e4       	ldi	r21, 0x42	; 66
    8750:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8754:	6b 01       	movw	r12, r22
    8756:	7c 01       	movw	r14, r24
    8758:	be 01       	movw	r22, r28
    875a:	dd 0f       	add	r29, r29
    875c:	88 0b       	sbc	r24, r24
    875e:	99 0b       	sbc	r25, r25
    8760:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    8764:	9b 01       	movw	r18, r22
    8766:	ac 01       	movw	r20, r24
    8768:	c7 01       	movw	r24, r14
    876a:	b6 01       	movw	r22, r12
    876c:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8770:	0c 94 fd 4c 	jmp	0x99fa	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    8774:	20 e0       	ldi	r18, 0x00	; 0
    8776:	30 e0       	ldi	r19, 0x00	; 0
    8778:	40 e7       	ldi	r20, 0x70	; 112
    877a:	51 e4       	ldi	r21, 0x41	; 65
    877c:	c7 01       	movw	r24, r14
    877e:	b6 01       	movw	r22, r12
    8780:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    8784:	18 16       	cp	r1, r24
    8786:	0c f0       	brlt	.+2      	; 0x878a <corectTrv+0x780>
    8788:	55 c0       	rjmp	.+170    	; 0x8834 <corectTrv+0x82a>
    878a:	20 e0       	ldi	r18, 0x00	; 0
    878c:	30 e0       	ldi	r19, 0x00	; 0
    878e:	40 e8       	ldi	r20, 0x80	; 128
    8790:	51 e4       	ldi	r21, 0x41	; 65
    8792:	c7 01       	movw	r24, r14
    8794:	b6 01       	movw	r22, r12
    8796:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    879a:	18 16       	cp	r1, r24
    879c:	0c f4       	brge	.+2      	; 0x87a0 <corectTrv+0x796>
    879e:	4a c0       	rjmp	.+148    	; 0x8834 <corectTrv+0x82a>
		{
			return( 0.02293 * ds * ds * ds + 1.04454 * ds * ds + 16.79148 * ds + 97.65075)* k;
    87a0:	22 eb       	ldi	r18, 0xB2	; 178
    87a2:	37 ed       	ldi	r19, 0xD7	; 215
    87a4:	4b eb       	ldi	r20, 0xBB	; 187
    87a6:	5c e3       	ldi	r21, 0x3C	; 60
    87a8:	c5 01       	movw	r24, r10
    87aa:	b4 01       	movw	r22, r8
    87ac:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    87b0:	a5 01       	movw	r20, r10
    87b2:	94 01       	movw	r18, r8
    87b4:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    87b8:	a5 01       	movw	r20, r10
    87ba:	94 01       	movw	r18, r8
    87bc:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    87c0:	6b 01       	movw	r12, r22
    87c2:	7c 01       	movw	r14, r24
    87c4:	2d e7       	ldi	r18, 0x7D	; 125
    87c6:	33 eb       	ldi	r19, 0xB3	; 179
    87c8:	45 e8       	ldi	r20, 0x85	; 133
    87ca:	5f e3       	ldi	r21, 0x3F	; 63
    87cc:	c5 01       	movw	r24, r10
    87ce:	b4 01       	movw	r22, r8
    87d0:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    87d4:	a5 01       	movw	r20, r10
    87d6:	94 01       	movw	r18, r8
    87d8:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    87dc:	9b 01       	movw	r18, r22
    87de:	ac 01       	movw	r20, r24
    87e0:	c7 01       	movw	r24, r14
    87e2:	b6 01       	movw	r22, r12
    87e4:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    87e8:	6b 01       	movw	r12, r22
    87ea:	7c 01       	movw	r14, r24
    87ec:	23 ef       	ldi	r18, 0xF3	; 243
    87ee:	34 e5       	ldi	r19, 0x54	; 84
    87f0:	46 e8       	ldi	r20, 0x86	; 134
    87f2:	51 e4       	ldi	r21, 0x41	; 65
    87f4:	c5 01       	movw	r24, r10
    87f6:	b4 01       	movw	r22, r8
    87f8:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    87fc:	9b 01       	movw	r18, r22
    87fe:	ac 01       	movw	r20, r24
    8800:	c7 01       	movw	r24, r14
    8802:	b6 01       	movw	r22, r12
    8804:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8808:	2f e2       	ldi	r18, 0x2F	; 47
    880a:	3d e4       	ldi	r19, 0x4D	; 77
    880c:	43 ec       	ldi	r20, 0xC3	; 195
    880e:	52 e4       	ldi	r21, 0x42	; 66
    8810:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8814:	6b 01       	movw	r12, r22
    8816:	7c 01       	movw	r14, r24
    8818:	be 01       	movw	r22, r28
    881a:	dd 0f       	add	r29, r29
    881c:	88 0b       	sbc	r24, r24
    881e:	99 0b       	sbc	r25, r25
    8820:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    8824:	9b 01       	movw	r18, r22
    8826:	ac 01       	movw	r20, r24
    8828:	c7 01       	movw	r24, r14
    882a:	b6 01       	movw	r22, r12
    882c:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8830:	0c 94 fd 4c 	jmp	0x99fa	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 9)
    8834:	20 e0       	ldi	r18, 0x00	; 0
    8836:	30 e0       	ldi	r19, 0x00	; 0
    8838:	40 e8       	ldi	r20, 0x80	; 128
    883a:	51 e4       	ldi	r21, 0x41	; 65
    883c:	c7 01       	movw	r24, r14
    883e:	b6 01       	movw	r22, r12
    8840:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    8844:	18 16       	cp	r1, r24
    8846:	14 f0       	brlt	.+4      	; 0x884c <corectTrv+0x842>
    8848:	0c 94 ea 4c 	jmp	0x99d4	; 0x99d4 <corectTrv+0x19ca>
		{
			return( 0.01242 * ds * ds * ds + 0.55907 * ds * ds + 9.57142 * ds + 67.21499)* k;
    884c:	21 e4       	ldi	r18, 0x41	; 65
    884e:	3d e7       	ldi	r19, 0x7D	; 125
    8850:	4b e4       	ldi	r20, 0x4B	; 75
    8852:	5c e3       	ldi	r21, 0x3C	; 60
    8854:	c5 01       	movw	r24, r10
    8856:	b4 01       	movw	r22, r8
    8858:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    885c:	a5 01       	movw	r20, r10
    885e:	94 01       	movw	r18, r8
    8860:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8864:	a5 01       	movw	r20, r10
    8866:	94 01       	movw	r18, r8
    8868:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    886c:	6b 01       	movw	r12, r22
    886e:	7c 01       	movw	r14, r24
    8870:	26 e3       	ldi	r18, 0x36	; 54
    8872:	3f e1       	ldi	r19, 0x1F	; 31
    8874:	4f e0       	ldi	r20, 0x0F	; 15
    8876:	5f e3       	ldi	r21, 0x3F	; 63
    8878:	c5 01       	movw	r24, r10
    887a:	b4 01       	movw	r22, r8
    887c:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8880:	a5 01       	movw	r20, r10
    8882:	94 01       	movw	r18, r8
    8884:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8888:	9b 01       	movw	r18, r22
    888a:	ac 01       	movw	r20, r24
    888c:	c7 01       	movw	r24, r14
    888e:	b6 01       	movw	r22, r12
    8890:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8894:	6b 01       	movw	r12, r22
    8896:	7c 01       	movw	r14, r24
    8898:	29 e8       	ldi	r18, 0x89	; 137
    889a:	34 e2       	ldi	r19, 0x24	; 36
    889c:	49 e1       	ldi	r20, 0x19	; 25
    889e:	51 e4       	ldi	r21, 0x41	; 65
    88a0:	c5 01       	movw	r24, r10
    88a2:	b4 01       	movw	r22, r8
    88a4:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    88a8:	9b 01       	movw	r18, r22
    88aa:	ac 01       	movw	r20, r24
    88ac:	c7 01       	movw	r24, r14
    88ae:	b6 01       	movw	r22, r12
    88b0:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    88b4:	23 e1       	ldi	r18, 0x13	; 19
    88b6:	3e e6       	ldi	r19, 0x6E	; 110
    88b8:	46 e8       	ldi	r20, 0x86	; 134
    88ba:	52 e4       	ldi	r21, 0x42	; 66
    88bc:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    88c0:	6b 01       	movw	r12, r22
    88c2:	7c 01       	movw	r14, r24
    88c4:	be 01       	movw	r22, r28
    88c6:	dd 0f       	add	r29, r29
    88c8:	88 0b       	sbc	r24, r24
    88ca:	99 0b       	sbc	r25, r25
    88cc:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    88d0:	9b 01       	movw	r18, r22
    88d2:	ac 01       	movw	r20, r24
    88d4:	c7 01       	movw	r24, r14
    88d6:	b6 01       	movw	r22, r12
    88d8:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    88dc:	0c 94 fd 4c 	jmp	0x99fa	; 0x99fa <corectTrv+0x19f0>
		}
	}

	else if (ds < 0 && ds >= -10)
    88e0:	20 e0       	ldi	r18, 0x00	; 0
    88e2:	30 e0       	ldi	r19, 0x00	; 0
    88e4:	a9 01       	movw	r20, r18
    88e6:	c5 01       	movw	r24, r10
    88e8:	b4 01       	movw	r22, r8
    88ea:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    88ee:	88 23       	and	r24, r24
    88f0:	0c f0       	brlt	.+2      	; 0x88f4 <corectTrv+0x8ea>
    88f2:	d6 c3       	rjmp	.+1964   	; 0x90a0 <corectTrv+0x1096>
    88f4:	20 e0       	ldi	r18, 0x00	; 0
    88f6:	30 e0       	ldi	r19, 0x00	; 0
    88f8:	40 e2       	ldi	r20, 0x20	; 32
    88fa:	51 ec       	ldi	r21, 0xC1	; 193
    88fc:	c5 01       	movw	r24, r10
    88fe:	b4 01       	movw	r22, r8
    8900:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    8904:	88 23       	and	r24, r24
    8906:	0c f4       	brge	.+2      	; 0x890a <corectTrv+0x900>
    8908:	cb c3       	rjmp	.+1942   	; 0x90a0 <corectTrv+0x1096>
	{
		if (Superheat == SSet)
    890a:	20 e0       	ldi	r18, 0x00	; 0
    890c:	30 e0       	ldi	r19, 0x00	; 0
    890e:	40 ee       	ldi	r20, 0xE0	; 224
    8910:	50 e4       	ldi	r21, 0x40	; 64
    8912:	c7 01       	movw	r24, r14
    8914:	b6 01       	movw	r22, r12
    8916:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    891a:	81 11       	cpse	r24, r1
    891c:	4a c0       	rjmp	.+148    	; 0x89b2 <corectTrv+0x9a8>
		{
			return( 0.01259 * ds * ds * ds + 0.18896 * ds * ds + 2.12770 * ds - 0.01350)* k;
    891e:	2a e4       	ldi	r18, 0x4A	; 74
    8920:	36 e4       	ldi	r19, 0x46	; 70
    8922:	4e e4       	ldi	r20, 0x4E	; 78
    8924:	5c e3       	ldi	r21, 0x3C	; 60
    8926:	c5 01       	movw	r24, r10
    8928:	b4 01       	movw	r22, r8
    892a:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    892e:	a5 01       	movw	r20, r10
    8930:	94 01       	movw	r18, r8
    8932:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8936:	a5 01       	movw	r20, r10
    8938:	94 01       	movw	r18, r8
    893a:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    893e:	6b 01       	movw	r12, r22
    8940:	7c 01       	movw	r14, r24
    8942:	2b eb       	ldi	r18, 0xBB	; 187
    8944:	3e e7       	ldi	r19, 0x7E	; 126
    8946:	41 e4       	ldi	r20, 0x41	; 65
    8948:	5e e3       	ldi	r21, 0x3E	; 62
    894a:	c5 01       	movw	r24, r10
    894c:	b4 01       	movw	r22, r8
    894e:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8952:	a5 01       	movw	r20, r10
    8954:	94 01       	movw	r18, r8
    8956:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    895a:	9b 01       	movw	r18, r22
    895c:	ac 01       	movw	r20, r24
    895e:	c7 01       	movw	r24, r14
    8960:	b6 01       	movw	r22, r12
    8962:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8966:	6b 01       	movw	r12, r22
    8968:	7c 01       	movw	r14, r24
    896a:	2d e3       	ldi	r18, 0x3D	; 61
    896c:	3c e2       	ldi	r19, 0x2C	; 44
    896e:	48 e0       	ldi	r20, 0x08	; 8
    8970:	50 e4       	ldi	r21, 0x40	; 64
    8972:	c5 01       	movw	r24, r10
    8974:	b4 01       	movw	r22, r8
    8976:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    897a:	9b 01       	movw	r18, r22
    897c:	ac 01       	movw	r20, r24
    897e:	c7 01       	movw	r24, r14
    8980:	b6 01       	movw	r22, r12
    8982:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8986:	2b e1       	ldi	r18, 0x1B	; 27
    8988:	3f e2       	ldi	r19, 0x2F	; 47
    898a:	4d e5       	ldi	r20, 0x5D	; 93
    898c:	5c e3       	ldi	r21, 0x3C	; 60
    898e:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    8992:	6b 01       	movw	r12, r22
    8994:	7c 01       	movw	r14, r24
    8996:	be 01       	movw	r22, r28
    8998:	dd 0f       	add	r29, r29
    899a:	88 0b       	sbc	r24, r24
    899c:	99 0b       	sbc	r25, r25
    899e:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    89a2:	9b 01       	movw	r18, r22
    89a4:	ac 01       	movw	r20, r24
    89a6:	c7 01       	movw	r24, r14
    89a8:	b6 01       	movw	r22, r12
    89aa:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    89ae:	0c 94 fd 4c 	jmp	0x99fa	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    89b2:	20 e0       	ldi	r18, 0x00	; 0
    89b4:	30 e0       	ldi	r19, 0x00	; 0
    89b6:	40 ee       	ldi	r20, 0xE0	; 224
    89b8:	50 e4       	ldi	r21, 0x40	; 64
    89ba:	c7 01       	movw	r24, r14
    89bc:	b6 01       	movw	r22, r12
    89be:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    89c2:	18 16       	cp	r1, r24
    89c4:	0c f0       	brlt	.+2      	; 0x89c8 <corectTrv+0x9be>
    89c6:	54 c0       	rjmp	.+168    	; 0x8a70 <corectTrv+0xa66>
    89c8:	20 e0       	ldi	r18, 0x00	; 0
    89ca:	30 e0       	ldi	r19, 0x00	; 0
    89cc:	40 e0       	ldi	r20, 0x00	; 0
    89ce:	51 e4       	ldi	r21, 0x41	; 65
    89d0:	c7 01       	movw	r24, r14
    89d2:	b6 01       	movw	r22, r12
    89d4:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    89d8:	18 16       	cp	r1, r24
    89da:	0c f4       	brge	.+2      	; 0x89de <corectTrv+0x9d4>
    89dc:	49 c0       	rjmp	.+146    	; 0x8a70 <corectTrv+0xa66>
		{
			return( 0.02252 * ds * ds * ds + 0.32376 * ds * ds + 2.48397 * ds + 3.72657)* k;
    89de:	2d ed       	ldi	r18, 0xDD	; 221
    89e0:	3b e7       	ldi	r19, 0x7B	; 123
    89e2:	48 eb       	ldi	r20, 0xB8	; 184
    89e4:	5c e3       	ldi	r21, 0x3C	; 60
    89e6:	c5 01       	movw	r24, r10
    89e8:	b4 01       	movw	r22, r8
    89ea:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    89ee:	a5 01       	movw	r20, r10
    89f0:	94 01       	movw	r18, r8
    89f2:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    89f6:	a5 01       	movw	r20, r10
    89f8:	94 01       	movw	r18, r8
    89fa:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    89fe:	6b 01       	movw	r12, r22
    8a00:	7c 01       	movw	r14, r24
    8a02:	2f ed       	ldi	r18, 0xDF	; 223
    8a04:	33 ec       	ldi	r19, 0xC3	; 195
    8a06:	45 ea       	ldi	r20, 0xA5	; 165
    8a08:	5e e3       	ldi	r21, 0x3E	; 62
    8a0a:	c5 01       	movw	r24, r10
    8a0c:	b4 01       	movw	r22, r8
    8a0e:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8a12:	a5 01       	movw	r20, r10
    8a14:	94 01       	movw	r18, r8
    8a16:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8a1a:	9b 01       	movw	r18, r22
    8a1c:	ac 01       	movw	r20, r24
    8a1e:	c7 01       	movw	r24, r14
    8a20:	b6 01       	movw	r22, r12
    8a22:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8a26:	6b 01       	movw	r12, r22
    8a28:	7c 01       	movw	r14, r24
    8a2a:	2d e5       	ldi	r18, 0x5D	; 93
    8a2c:	39 ef       	ldi	r19, 0xF9	; 249
    8a2e:	4e e1       	ldi	r20, 0x1E	; 30
    8a30:	50 e4       	ldi	r21, 0x40	; 64
    8a32:	c5 01       	movw	r24, r10
    8a34:	b4 01       	movw	r22, r8
    8a36:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8a3a:	9b 01       	movw	r18, r22
    8a3c:	ac 01       	movw	r20, r24
    8a3e:	c7 01       	movw	r24, r14
    8a40:	b6 01       	movw	r22, r12
    8a42:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8a46:	2f e1       	ldi	r18, 0x1F	; 31
    8a48:	30 e8       	ldi	r19, 0x80	; 128
    8a4a:	4e e6       	ldi	r20, 0x6E	; 110
    8a4c:	50 e4       	ldi	r21, 0x40	; 64
    8a4e:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8a52:	6b 01       	movw	r12, r22
    8a54:	7c 01       	movw	r14, r24
    8a56:	be 01       	movw	r22, r28
    8a58:	dd 0f       	add	r29, r29
    8a5a:	88 0b       	sbc	r24, r24
    8a5c:	99 0b       	sbc	r25, r25
    8a5e:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    8a62:	9b 01       	movw	r18, r22
    8a64:	ac 01       	movw	r20, r24
    8a66:	c7 01       	movw	r24, r14
    8a68:	b6 01       	movw	r22, r12
    8a6a:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8a6e:	c5 c7       	rjmp	.+3978   	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    8a70:	20 e0       	ldi	r18, 0x00	; 0
    8a72:	30 e0       	ldi	r19, 0x00	; 0
    8a74:	40 e0       	ldi	r20, 0x00	; 0
    8a76:	51 e4       	ldi	r21, 0x41	; 65
    8a78:	c7 01       	movw	r24, r14
    8a7a:	b6 01       	movw	r22, r12
    8a7c:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    8a80:	18 16       	cp	r1, r24
    8a82:	0c f0       	brlt	.+2      	; 0x8a86 <corectTrv+0xa7c>
    8a84:	54 c0       	rjmp	.+168    	; 0x8b2e <corectTrv+0xb24>
    8a86:	20 e0       	ldi	r18, 0x00	; 0
    8a88:	30 e0       	ldi	r19, 0x00	; 0
    8a8a:	40 e1       	ldi	r20, 0x10	; 16
    8a8c:	51 e4       	ldi	r21, 0x41	; 65
    8a8e:	c7 01       	movw	r24, r14
    8a90:	b6 01       	movw	r22, r12
    8a92:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    8a96:	18 16       	cp	r1, r24
    8a98:	0c f4       	brge	.+2      	; 0x8a9c <corectTrv+0xa92>
    8a9a:	49 c0       	rjmp	.+146    	; 0x8b2e <corectTrv+0xb24>
		{
			return( 0.02106 * ds * ds * ds + 0.30427 * ds * ds + 2.44311 * ds + 6.31417)* k;
    8a9c:	25 e0       	ldi	r18, 0x05	; 5
    8a9e:	36 e8       	ldi	r19, 0x86	; 134
    8aa0:	4c ea       	ldi	r20, 0xAC	; 172
    8aa2:	5c e3       	ldi	r21, 0x3C	; 60
    8aa4:	c5 01       	movw	r24, r10
    8aa6:	b4 01       	movw	r22, r8
    8aa8:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8aac:	a5 01       	movw	r20, r10
    8aae:	94 01       	movw	r18, r8
    8ab0:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8ab4:	a5 01       	movw	r20, r10
    8ab6:	94 01       	movw	r18, r8
    8ab8:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8abc:	6b 01       	movw	r12, r22
    8abe:	7c 01       	movw	r14, r24
    8ac0:	27 e4       	ldi	r18, 0x47	; 71
    8ac2:	39 ec       	ldi	r19, 0xC9	; 201
    8ac4:	4b e9       	ldi	r20, 0x9B	; 155
    8ac6:	5e e3       	ldi	r21, 0x3E	; 62
    8ac8:	c5 01       	movw	r24, r10
    8aca:	b4 01       	movw	r22, r8
    8acc:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8ad0:	a5 01       	movw	r20, r10
    8ad2:	94 01       	movw	r18, r8
    8ad4:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8ad8:	9b 01       	movw	r18, r22
    8ada:	ac 01       	movw	r20, r24
    8adc:	c7 01       	movw	r24, r14
    8ade:	b6 01       	movw	r22, r12
    8ae0:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8ae4:	6b 01       	movw	r12, r22
    8ae6:	7c 01       	movw	r14, r24
    8ae8:	2a ee       	ldi	r18, 0xEA	; 234
    8aea:	3b e5       	ldi	r19, 0x5B	; 91
    8aec:	4c e1       	ldi	r20, 0x1C	; 28
    8aee:	50 e4       	ldi	r21, 0x40	; 64
    8af0:	c5 01       	movw	r24, r10
    8af2:	b4 01       	movw	r22, r8
    8af4:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8af8:	9b 01       	movw	r18, r22
    8afa:	ac 01       	movw	r20, r24
    8afc:	c7 01       	movw	r24, r14
    8afe:	b6 01       	movw	r22, r12
    8b00:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8b04:	2e ea       	ldi	r18, 0xAE	; 174
    8b06:	3d e0       	ldi	r19, 0x0D	; 13
    8b08:	4a ec       	ldi	r20, 0xCA	; 202
    8b0a:	50 e4       	ldi	r21, 0x40	; 64
    8b0c:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8b10:	6b 01       	movw	r12, r22
    8b12:	7c 01       	movw	r14, r24
    8b14:	be 01       	movw	r22, r28
    8b16:	dd 0f       	add	r29, r29
    8b18:	88 0b       	sbc	r24, r24
    8b1a:	99 0b       	sbc	r25, r25
    8b1c:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    8b20:	9b 01       	movw	r18, r22
    8b22:	ac 01       	movw	r20, r24
    8b24:	c7 01       	movw	r24, r14
    8b26:	b6 01       	movw	r22, r12
    8b28:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8b2c:	66 c7       	rjmp	.+3788   	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    8b2e:	20 e0       	ldi	r18, 0x00	; 0
    8b30:	30 e0       	ldi	r19, 0x00	; 0
    8b32:	40 e1       	ldi	r20, 0x10	; 16
    8b34:	51 e4       	ldi	r21, 0x41	; 65
    8b36:	c7 01       	movw	r24, r14
    8b38:	b6 01       	movw	r22, r12
    8b3a:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    8b3e:	18 16       	cp	r1, r24
    8b40:	0c f0       	brlt	.+2      	; 0x8b44 <corectTrv+0xb3a>
    8b42:	54 c0       	rjmp	.+168    	; 0x8bec <corectTrv+0xbe2>
    8b44:	20 e0       	ldi	r18, 0x00	; 0
    8b46:	30 e0       	ldi	r19, 0x00	; 0
    8b48:	40 e2       	ldi	r20, 0x20	; 32
    8b4a:	51 e4       	ldi	r21, 0x41	; 65
    8b4c:	c7 01       	movw	r24, r14
    8b4e:	b6 01       	movw	r22, r12
    8b50:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    8b54:	18 16       	cp	r1, r24
    8b56:	0c f4       	brge	.+2      	; 0x8b5a <corectTrv+0xb50>
    8b58:	49 c0       	rjmp	.+146    	; 0x8bec <corectTrv+0xbe2>
		{
			return( 0.02106 * ds * ds * ds + 0.32749 * ds * ds + 2.67528 * ds + 8.74842)* k;
    8b5a:	25 e0       	ldi	r18, 0x05	; 5
    8b5c:	36 e8       	ldi	r19, 0x86	; 134
    8b5e:	4c ea       	ldi	r20, 0xAC	; 172
    8b60:	5c e3       	ldi	r21, 0x3C	; 60
    8b62:	c5 01       	movw	r24, r10
    8b64:	b4 01       	movw	r22, r8
    8b66:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8b6a:	a5 01       	movw	r20, r10
    8b6c:	94 01       	movw	r18, r8
    8b6e:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8b72:	a5 01       	movw	r20, r10
    8b74:	94 01       	movw	r18, r8
    8b76:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8b7a:	6b 01       	movw	r12, r22
    8b7c:	7c 01       	movw	r14, r24
    8b7e:	25 ec       	ldi	r18, 0xC5	; 197
    8b80:	3c ea       	ldi	r19, 0xAC	; 172
    8b82:	47 ea       	ldi	r20, 0xA7	; 167
    8b84:	5e e3       	ldi	r21, 0x3E	; 62
    8b86:	c5 01       	movw	r24, r10
    8b88:	b4 01       	movw	r22, r8
    8b8a:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8b8e:	a5 01       	movw	r20, r10
    8b90:	94 01       	movw	r18, r8
    8b92:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8b96:	9b 01       	movw	r18, r22
    8b98:	ac 01       	movw	r20, r24
    8b9a:	c7 01       	movw	r24, r14
    8b9c:	b6 01       	movw	r22, r12
    8b9e:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8ba2:	6b 01       	movw	r12, r22
    8ba4:	7c 01       	movw	r14, r24
    8ba6:	2a ec       	ldi	r18, 0xCA	; 202
    8ba8:	37 e3       	ldi	r19, 0x37	; 55
    8baa:	4b e2       	ldi	r20, 0x2B	; 43
    8bac:	50 e4       	ldi	r21, 0x40	; 64
    8bae:	c5 01       	movw	r24, r10
    8bb0:	b4 01       	movw	r22, r8
    8bb2:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8bb6:	9b 01       	movw	r18, r22
    8bb8:	ac 01       	movw	r20, r24
    8bba:	c7 01       	movw	r24, r14
    8bbc:	b6 01       	movw	r22, r12
    8bbe:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8bc2:	27 e8       	ldi	r18, 0x87	; 135
    8bc4:	39 ef       	ldi	r19, 0xF9	; 249
    8bc6:	4b e0       	ldi	r20, 0x0B	; 11
    8bc8:	51 e4       	ldi	r21, 0x41	; 65
    8bca:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8bce:	6b 01       	movw	r12, r22
    8bd0:	7c 01       	movw	r14, r24
    8bd2:	be 01       	movw	r22, r28
    8bd4:	dd 0f       	add	r29, r29
    8bd6:	88 0b       	sbc	r24, r24
    8bd8:	99 0b       	sbc	r25, r25
    8bda:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    8bde:	9b 01       	movw	r18, r22
    8be0:	ac 01       	movw	r20, r24
    8be2:	c7 01       	movw	r24, r14
    8be4:	b6 01       	movw	r22, r12
    8be6:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8bea:	07 c7       	rjmp	.+3598   	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    8bec:	20 e0       	ldi	r18, 0x00	; 0
    8bee:	30 e0       	ldi	r19, 0x00	; 0
    8bf0:	40 e2       	ldi	r20, 0x20	; 32
    8bf2:	51 e4       	ldi	r21, 0x41	; 65
    8bf4:	c7 01       	movw	r24, r14
    8bf6:	b6 01       	movw	r22, r12
    8bf8:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    8bfc:	18 16       	cp	r1, r24
    8bfe:	0c f0       	brlt	.+2      	; 0x8c02 <corectTrv+0xbf8>
    8c00:	54 c0       	rjmp	.+168    	; 0x8caa <corectTrv+0xca0>
    8c02:	20 e0       	ldi	r18, 0x00	; 0
    8c04:	30 e0       	ldi	r19, 0x00	; 0
    8c06:	40 e3       	ldi	r20, 0x30	; 48
    8c08:	51 e4       	ldi	r21, 0x41	; 65
    8c0a:	c7 01       	movw	r24, r14
    8c0c:	b6 01       	movw	r22, r12
    8c0e:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    8c12:	18 16       	cp	r1, r24
    8c14:	0c f4       	brge	.+2      	; 0x8c18 <corectTrv+0xc0e>
    8c16:	49 c0       	rjmp	.+146    	; 0x8caa <corectTrv+0xca0>
		{
			return( 0.02252 * ds * ds * ds + 0.35182 * ds * ds + 2.76462 * ds + 11.25664)* k;
    8c18:	2d ed       	ldi	r18, 0xDD	; 221
    8c1a:	3b e7       	ldi	r19, 0x7B	; 123
    8c1c:	48 eb       	ldi	r20, 0xB8	; 184
    8c1e:	5c e3       	ldi	r21, 0x3C	; 60
    8c20:	c5 01       	movw	r24, r10
    8c22:	b4 01       	movw	r22, r8
    8c24:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8c28:	a5 01       	movw	r20, r10
    8c2a:	94 01       	movw	r18, r8
    8c2c:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8c30:	a5 01       	movw	r20, r10
    8c32:	94 01       	movw	r18, r8
    8c34:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8c38:	6b 01       	movw	r12, r22
    8c3a:	7c 01       	movw	r14, r24
    8c3c:	20 ec       	ldi	r18, 0xC0	; 192
    8c3e:	31 e2       	ldi	r19, 0x21	; 33
    8c40:	44 eb       	ldi	r20, 0xB4	; 180
    8c42:	5e e3       	ldi	r21, 0x3E	; 62
    8c44:	c5 01       	movw	r24, r10
    8c46:	b4 01       	movw	r22, r8
    8c48:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8c4c:	a5 01       	movw	r20, r10
    8c4e:	94 01       	movw	r18, r8
    8c50:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8c54:	9b 01       	movw	r18, r22
    8c56:	ac 01       	movw	r20, r24
    8c58:	c7 01       	movw	r24, r14
    8c5a:	b6 01       	movw	r22, r12
    8c5c:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8c60:	6b 01       	movw	r12, r22
    8c62:	7c 01       	movw	r14, r24
    8c64:	29 e8       	ldi	r18, 0x89	; 137
    8c66:	3f ee       	ldi	r19, 0xEF	; 239
    8c68:	40 e3       	ldi	r20, 0x30	; 48
    8c6a:	50 e4       	ldi	r21, 0x40	; 64
    8c6c:	c5 01       	movw	r24, r10
    8c6e:	b4 01       	movw	r22, r8
    8c70:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8c74:	9b 01       	movw	r18, r22
    8c76:	ac 01       	movw	r20, r24
    8c78:	c7 01       	movw	r24, r14
    8c7a:	b6 01       	movw	r22, r12
    8c7c:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8c80:	23 e3       	ldi	r18, 0x33	; 51
    8c82:	3b e1       	ldi	r19, 0x1B	; 27
    8c84:	44 e3       	ldi	r20, 0x34	; 52
    8c86:	51 e4       	ldi	r21, 0x41	; 65
    8c88:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8c8c:	6b 01       	movw	r12, r22
    8c8e:	7c 01       	movw	r14, r24
    8c90:	be 01       	movw	r22, r28
    8c92:	dd 0f       	add	r29, r29
    8c94:	88 0b       	sbc	r24, r24
    8c96:	99 0b       	sbc	r25, r25
    8c98:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    8c9c:	9b 01       	movw	r18, r22
    8c9e:	ac 01       	movw	r20, r24
    8ca0:	c7 01       	movw	r24, r14
    8ca2:	b6 01       	movw	r22, r12
    8ca4:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8ca8:	a8 c6       	rjmp	.+3408   	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    8caa:	20 e0       	ldi	r18, 0x00	; 0
    8cac:	30 e0       	ldi	r19, 0x00	; 0
    8cae:	40 e3       	ldi	r20, 0x30	; 48
    8cb0:	51 e4       	ldi	r21, 0x41	; 65
    8cb2:	c7 01       	movw	r24, r14
    8cb4:	b6 01       	movw	r22, r12
    8cb6:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    8cba:	18 16       	cp	r1, r24
    8cbc:	0c f0       	brlt	.+2      	; 0x8cc0 <corectTrv+0xcb6>
    8cbe:	54 c0       	rjmp	.+168    	; 0x8d68 <corectTrv+0xd5e>
    8cc0:	20 e0       	ldi	r18, 0x00	; 0
    8cc2:	30 e0       	ldi	r19, 0x00	; 0
    8cc4:	40 e4       	ldi	r20, 0x40	; 64
    8cc6:	51 e4       	ldi	r21, 0x41	; 65
    8cc8:	c7 01       	movw	r24, r14
    8cca:	b6 01       	movw	r22, r12
    8ccc:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    8cd0:	18 16       	cp	r1, r24
    8cd2:	0c f4       	brge	.+2      	; 0x8cd6 <corectTrv+0xccc>
    8cd4:	49 c0       	rjmp	.+146    	; 0x8d68 <corectTrv+0xd5e>
		{
			return( 0.01251 * ds * ds * ds + 0.18754 * ds * ds + 2.12069 * ds + 14.98441)* k;
    8cd6:	2e eb       	ldi	r18, 0xBE	; 190
    8cd8:	36 ef       	ldi	r19, 0xF6	; 246
    8cda:	4c e4       	ldi	r20, 0x4C	; 76
    8cdc:	5c e3       	ldi	r21, 0x3C	; 60
    8cde:	c5 01       	movw	r24, r10
    8ce0:	b4 01       	movw	r22, r8
    8ce2:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8ce6:	a5 01       	movw	r20, r10
    8ce8:	94 01       	movw	r18, r8
    8cea:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8cee:	a5 01       	movw	r20, r10
    8cf0:	94 01       	movw	r18, r8
    8cf2:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8cf6:	6b 01       	movw	r12, r22
    8cf8:	7c 01       	movw	r14, r24
    8cfa:	2c e7       	ldi	r18, 0x7C	; 124
    8cfc:	3a e0       	ldi	r19, 0x0A	; 10
    8cfe:	40 e4       	ldi	r20, 0x40	; 64
    8d00:	5e e3       	ldi	r21, 0x3E	; 62
    8d02:	c5 01       	movw	r24, r10
    8d04:	b4 01       	movw	r22, r8
    8d06:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8d0a:	a5 01       	movw	r20, r10
    8d0c:	94 01       	movw	r18, r8
    8d0e:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8d12:	9b 01       	movw	r18, r22
    8d14:	ac 01       	movw	r20, r24
    8d16:	c7 01       	movw	r24, r14
    8d18:	b6 01       	movw	r22, r12
    8d1a:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8d1e:	6b 01       	movw	r12, r22
    8d20:	7c 01       	movw	r14, r24
    8d22:	23 e6       	ldi	r18, 0x63	; 99
    8d24:	39 eb       	ldi	r19, 0xB9	; 185
    8d26:	47 e0       	ldi	r20, 0x07	; 7
    8d28:	50 e4       	ldi	r21, 0x40	; 64
    8d2a:	c5 01       	movw	r24, r10
    8d2c:	b4 01       	movw	r22, r8
    8d2e:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8d32:	9b 01       	movw	r18, r22
    8d34:	ac 01       	movw	r20, r24
    8d36:	c7 01       	movw	r24, r14
    8d38:	b6 01       	movw	r22, r12
    8d3a:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8d3e:	25 e2       	ldi	r18, 0x25	; 37
    8d40:	30 ec       	ldi	r19, 0xC0	; 192
    8d42:	4f e6       	ldi	r20, 0x6F	; 111
    8d44:	51 e4       	ldi	r21, 0x41	; 65
    8d46:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8d4a:	6b 01       	movw	r12, r22
    8d4c:	7c 01       	movw	r14, r24
    8d4e:	be 01       	movw	r22, r28
    8d50:	dd 0f       	add	r29, r29
    8d52:	88 0b       	sbc	r24, r24
    8d54:	99 0b       	sbc	r25, r25
    8d56:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    8d5a:	9b 01       	movw	r18, r22
    8d5c:	ac 01       	movw	r20, r24
    8d5e:	c7 01       	movw	r24, r14
    8d60:	b6 01       	movw	r22, r12
    8d62:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8d66:	49 c6       	rjmp	.+3218   	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    8d68:	20 e0       	ldi	r18, 0x00	; 0
    8d6a:	30 e0       	ldi	r19, 0x00	; 0
    8d6c:	40 e4       	ldi	r20, 0x40	; 64
    8d6e:	51 e4       	ldi	r21, 0x41	; 65
    8d70:	c7 01       	movw	r24, r14
    8d72:	b6 01       	movw	r22, r12
    8d74:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    8d78:	18 16       	cp	r1, r24
    8d7a:	dc f5       	brge	.+118    	; 0x8df2 <corectTrv+0xde8>
    8d7c:	20 e0       	ldi	r18, 0x00	; 0
    8d7e:	30 e0       	ldi	r19, 0x00	; 0
    8d80:	40 e5       	ldi	r20, 0x50	; 80
    8d82:	51 e4       	ldi	r21, 0x41	; 65
    8d84:	c7 01       	movw	r24, r14
    8d86:	b6 01       	movw	r22, r12
    8d88:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    8d8c:	18 16       	cp	r1, r24
    8d8e:	8c f1       	brlt	.+98     	; 0x8df2 <corectTrv+0xde8>
		{
			return(0.062 * ds * ds + 1.818 * ds + 15.22)* k;
    8d90:	26 eb       	ldi	r18, 0xB6	; 182
    8d92:	33 ef       	ldi	r19, 0xF3	; 243
    8d94:	4d e7       	ldi	r20, 0x7D	; 125
    8d96:	5d e3       	ldi	r21, 0x3D	; 61
    8d98:	c5 01       	movw	r24, r10
    8d9a:	b4 01       	movw	r22, r8
    8d9c:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8da0:	a5 01       	movw	r20, r10
    8da2:	94 01       	movw	r18, r8
    8da4:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8da8:	6b 01       	movw	r12, r22
    8daa:	7c 01       	movw	r14, r24
    8dac:	29 e3       	ldi	r18, 0x39	; 57
    8dae:	34 eb       	ldi	r19, 0xB4	; 180
    8db0:	48 ee       	ldi	r20, 0xE8	; 232
    8db2:	5f e3       	ldi	r21, 0x3F	; 63
    8db4:	c5 01       	movw	r24, r10
    8db6:	b4 01       	movw	r22, r8
    8db8:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8dbc:	9b 01       	movw	r18, r22
    8dbe:	ac 01       	movw	r20, r24
    8dc0:	c7 01       	movw	r24, r14
    8dc2:	b6 01       	movw	r22, r12
    8dc4:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8dc8:	2f e1       	ldi	r18, 0x1F	; 31
    8dca:	35 e8       	ldi	r19, 0x85	; 133
    8dcc:	43 e7       	ldi	r20, 0x73	; 115
    8dce:	51 e4       	ldi	r21, 0x41	; 65
    8dd0:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8dd4:	6b 01       	movw	r12, r22
    8dd6:	7c 01       	movw	r14, r24
    8dd8:	be 01       	movw	r22, r28
    8dda:	dd 0f       	add	r29, r29
    8ddc:	88 0b       	sbc	r24, r24
    8dde:	99 0b       	sbc	r25, r25
    8de0:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    8de4:	9b 01       	movw	r18, r22
    8de6:	ac 01       	movw	r20, r24
    8de8:	c7 01       	movw	r24, r14
    8dea:	b6 01       	movw	r22, r12
    8dec:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8df0:	04 c6       	rjmp	.+3080   	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    8df2:	20 e0       	ldi	r18, 0x00	; 0
    8df4:	30 e0       	ldi	r19, 0x00	; 0
    8df6:	40 e5       	ldi	r20, 0x50	; 80
    8df8:	51 e4       	ldi	r21, 0x41	; 65
    8dfa:	c7 01       	movw	r24, r14
    8dfc:	b6 01       	movw	r22, r12
    8dfe:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    8e02:	18 16       	cp	r1, r24
    8e04:	dc f5       	brge	.+118    	; 0x8e7c <corectTrv+0xe72>
    8e06:	20 e0       	ldi	r18, 0x00	; 0
    8e08:	30 e0       	ldi	r19, 0x00	; 0
    8e0a:	40 e6       	ldi	r20, 0x60	; 96
    8e0c:	51 e4       	ldi	r21, 0x41	; 65
    8e0e:	c7 01       	movw	r24, r14
    8e10:	b6 01       	movw	r22, r12
    8e12:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    8e16:	18 16       	cp	r1, r24
    8e18:	8c f1       	brlt	.+98     	; 0x8e7c <corectTrv+0xe72>
		{
			return( 0.097 * ds * ds + 1.941 * ds + 16.00)* k;
    8e1a:	20 ef       	ldi	r18, 0xF0	; 240
    8e1c:	37 ea       	ldi	r19, 0xA7	; 167
    8e1e:	46 ec       	ldi	r20, 0xC6	; 198
    8e20:	5d e3       	ldi	r21, 0x3D	; 61
    8e22:	c5 01       	movw	r24, r10
    8e24:	b4 01       	movw	r22, r8
    8e26:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8e2a:	a5 01       	movw	r20, r10
    8e2c:	94 01       	movw	r18, r8
    8e2e:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8e32:	6b 01       	movw	r12, r22
    8e34:	7c 01       	movw	r14, r24
    8e36:	20 eb       	ldi	r18, 0xB0	; 176
    8e38:	32 e7       	ldi	r19, 0x72	; 114
    8e3a:	48 ef       	ldi	r20, 0xF8	; 248
    8e3c:	5f e3       	ldi	r21, 0x3F	; 63
    8e3e:	c5 01       	movw	r24, r10
    8e40:	b4 01       	movw	r22, r8
    8e42:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8e46:	9b 01       	movw	r18, r22
    8e48:	ac 01       	movw	r20, r24
    8e4a:	c7 01       	movw	r24, r14
    8e4c:	b6 01       	movw	r22, r12
    8e4e:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8e52:	20 e0       	ldi	r18, 0x00	; 0
    8e54:	30 e0       	ldi	r19, 0x00	; 0
    8e56:	40 e8       	ldi	r20, 0x80	; 128
    8e58:	51 e4       	ldi	r21, 0x41	; 65
    8e5a:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8e5e:	6b 01       	movw	r12, r22
    8e60:	7c 01       	movw	r14, r24
    8e62:	be 01       	movw	r22, r28
    8e64:	dd 0f       	add	r29, r29
    8e66:	88 0b       	sbc	r24, r24
    8e68:	99 0b       	sbc	r25, r25
    8e6a:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    8e6e:	9b 01       	movw	r18, r22
    8e70:	ac 01       	movw	r20, r24
    8e72:	c7 01       	movw	r24, r14
    8e74:	b6 01       	movw	r22, r12
    8e76:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8e7a:	bf c5       	rjmp	.+2942   	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    8e7c:	20 e0       	ldi	r18, 0x00	; 0
    8e7e:	30 e0       	ldi	r19, 0x00	; 0
    8e80:	40 e6       	ldi	r20, 0x60	; 96
    8e82:	51 e4       	ldi	r21, 0x41	; 65
    8e84:	c7 01       	movw	r24, r14
    8e86:	b6 01       	movw	r22, r12
    8e88:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    8e8c:	18 16       	cp	r1, r24
    8e8e:	0c f0       	brlt	.+2      	; 0x8e92 <corectTrv+0xe88>
    8e90:	54 c0       	rjmp	.+168    	; 0x8f3a <corectTrv+0xf30>
    8e92:	20 e0       	ldi	r18, 0x00	; 0
    8e94:	30 e0       	ldi	r19, 0x00	; 0
    8e96:	40 e7       	ldi	r20, 0x70	; 112
    8e98:	51 e4       	ldi	r21, 0x41	; 65
    8e9a:	c7 01       	movw	r24, r14
    8e9c:	b6 01       	movw	r22, r12
    8e9e:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    8ea2:	18 16       	cp	r1, r24
    8ea4:	0c f4       	brge	.+2      	; 0x8ea8 <corectTrv+0xe9e>
    8ea6:	49 c0       	rjmp	.+146    	; 0x8f3a <corectTrv+0xf30>
		{
			return( 0.01598 * ds * ds * ds + 0.35913 * ds * ds + 2.90559 * ds + 17.70294)* k;
    8ea8:	2d e7       	ldi	r18, 0x7D	; 125
    8eaa:	38 ee       	ldi	r19, 0xE8	; 232
    8eac:	42 e8       	ldi	r20, 0x82	; 130
    8eae:	5c e3       	ldi	r21, 0x3C	; 60
    8eb0:	c5 01       	movw	r24, r10
    8eb2:	b4 01       	movw	r22, r8
    8eb4:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8eb8:	a5 01       	movw	r20, r10
    8eba:	94 01       	movw	r18, r8
    8ebc:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8ec0:	a5 01       	movw	r20, r10
    8ec2:	94 01       	movw	r18, r8
    8ec4:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8ec8:	6b 01       	movw	r12, r22
    8eca:	7c 01       	movw	r14, r24
    8ecc:	23 ee       	ldi	r18, 0xE3	; 227
    8ece:	3f ed       	ldi	r19, 0xDF	; 223
    8ed0:	47 eb       	ldi	r20, 0xB7	; 183
    8ed2:	5e e3       	ldi	r21, 0x3E	; 62
    8ed4:	c5 01       	movw	r24, r10
    8ed6:	b4 01       	movw	r22, r8
    8ed8:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8edc:	a5 01       	movw	r20, r10
    8ede:	94 01       	movw	r18, r8
    8ee0:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8ee4:	9b 01       	movw	r18, r22
    8ee6:	ac 01       	movw	r20, r24
    8ee8:	c7 01       	movw	r24, r14
    8eea:	b6 01       	movw	r22, r12
    8eec:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8ef0:	6b 01       	movw	r12, r22
    8ef2:	7c 01       	movw	r14, r24
    8ef4:	20 e3       	ldi	r18, 0x30	; 48
    8ef6:	35 ef       	ldi	r19, 0xF5	; 245
    8ef8:	49 e3       	ldi	r20, 0x39	; 57
    8efa:	50 e4       	ldi	r21, 0x40	; 64
    8efc:	c5 01       	movw	r24, r10
    8efe:	b4 01       	movw	r22, r8
    8f00:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8f04:	9b 01       	movw	r18, r22
    8f06:	ac 01       	movw	r20, r24
    8f08:	c7 01       	movw	r24, r14
    8f0a:	b6 01       	movw	r22, r12
    8f0c:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8f10:	2f e9       	ldi	r18, 0x9F	; 159
    8f12:	3f e9       	ldi	r19, 0x9F	; 159
    8f14:	4d e8       	ldi	r20, 0x8D	; 141
    8f16:	51 e4       	ldi	r21, 0x41	; 65
    8f18:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8f1c:	6b 01       	movw	r12, r22
    8f1e:	7c 01       	movw	r14, r24
    8f20:	be 01       	movw	r22, r28
    8f22:	dd 0f       	add	r29, r29
    8f24:	88 0b       	sbc	r24, r24
    8f26:	99 0b       	sbc	r25, r25
    8f28:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    8f2c:	9b 01       	movw	r18, r22
    8f2e:	ac 01       	movw	r20, r24
    8f30:	c7 01       	movw	r24, r14
    8f32:	b6 01       	movw	r22, r12
    8f34:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8f38:	60 c5       	rjmp	.+2752   	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    8f3a:	20 e0       	ldi	r18, 0x00	; 0
    8f3c:	30 e0       	ldi	r19, 0x00	; 0
    8f3e:	40 e7       	ldi	r20, 0x70	; 112
    8f40:	51 e4       	ldi	r21, 0x41	; 65
    8f42:	c7 01       	movw	r24, r14
    8f44:	b6 01       	movw	r22, r12
    8f46:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    8f4a:	18 16       	cp	r1, r24
    8f4c:	0c f0       	brlt	.+2      	; 0x8f50 <corectTrv+0xf46>
    8f4e:	54 c0       	rjmp	.+168    	; 0x8ff8 <corectTrv+0xfee>
    8f50:	20 e0       	ldi	r18, 0x00	; 0
    8f52:	30 e0       	ldi	r19, 0x00	; 0
    8f54:	40 e8       	ldi	r20, 0x80	; 128
    8f56:	51 e4       	ldi	r21, 0x41	; 65
    8f58:	c7 01       	movw	r24, r14
    8f5a:	b6 01       	movw	r22, r12
    8f5c:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    8f60:	18 16       	cp	r1, r24
    8f62:	0c f4       	brge	.+2      	; 0x8f66 <corectTrv+0xf5c>
    8f64:	49 c0       	rjmp	.+146    	; 0x8ff8 <corectTrv+0xfee>
		{
			return( 0.02358 * ds * ds * ds + 0.48252 * ds * ds + 3.36313 * ds + 20.09441)* k;
    8f66:	28 ed       	ldi	r18, 0xD8	; 216
    8f68:	3a e2       	ldi	r19, 0x2A	; 42
    8f6a:	41 ec       	ldi	r20, 0xC1	; 193
    8f6c:	5c e3       	ldi	r21, 0x3C	; 60
    8f6e:	c5 01       	movw	r24, r10
    8f70:	b4 01       	movw	r22, r8
    8f72:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8f76:	a5 01       	movw	r20, r10
    8f78:	94 01       	movw	r18, r8
    8f7a:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8f7e:	a5 01       	movw	r20, r10
    8f80:	94 01       	movw	r18, r8
    8f82:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8f86:	6b 01       	movw	r12, r22
    8f88:	7c 01       	movw	r14, r24
    8f8a:	2d ed       	ldi	r18, 0xDD	; 221
    8f8c:	3c e0       	ldi	r19, 0x0C	; 12
    8f8e:	47 ef       	ldi	r20, 0xF7	; 247
    8f90:	5e e3       	ldi	r21, 0x3E	; 62
    8f92:	c5 01       	movw	r24, r10
    8f94:	b4 01       	movw	r22, r8
    8f96:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8f9a:	a5 01       	movw	r20, r10
    8f9c:	94 01       	movw	r18, r8
    8f9e:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8fa2:	9b 01       	movw	r18, r22
    8fa4:	ac 01       	movw	r20, r24
    8fa6:	c7 01       	movw	r24, r14
    8fa8:	b6 01       	movw	r22, r12
    8faa:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8fae:	6b 01       	movw	r12, r22
    8fb0:	7c 01       	movw	r14, r24
    8fb2:	26 e8       	ldi	r18, 0x86	; 134
    8fb4:	3d e3       	ldi	r19, 0x3D	; 61
    8fb6:	47 e5       	ldi	r20, 0x57	; 87
    8fb8:	50 e4       	ldi	r21, 0x40	; 64
    8fba:	c5 01       	movw	r24, r10
    8fbc:	b4 01       	movw	r22, r8
    8fbe:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8fc2:	9b 01       	movw	r18, r22
    8fc4:	ac 01       	movw	r20, r24
    8fc6:	c7 01       	movw	r24, r14
    8fc8:	b6 01       	movw	r22, r12
    8fca:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8fce:	2a e5       	ldi	r18, 0x5A	; 90
    8fd0:	31 ec       	ldi	r19, 0xC1	; 193
    8fd2:	40 ea       	ldi	r20, 0xA0	; 160
    8fd4:	51 e4       	ldi	r21, 0x41	; 65
    8fd6:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    8fda:	6b 01       	movw	r12, r22
    8fdc:	7c 01       	movw	r14, r24
    8fde:	be 01       	movw	r22, r28
    8fe0:	dd 0f       	add	r29, r29
    8fe2:	88 0b       	sbc	r24, r24
    8fe4:	99 0b       	sbc	r25, r25
    8fe6:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    8fea:	9b 01       	movw	r18, r22
    8fec:	ac 01       	movw	r20, r24
    8fee:	c7 01       	movw	r24, r14
    8ff0:	b6 01       	movw	r22, r12
    8ff2:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    8ff6:	01 c5       	rjmp	.+2562   	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 9)
    8ff8:	20 e0       	ldi	r18, 0x00	; 0
    8ffa:	30 e0       	ldi	r19, 0x00	; 0
    8ffc:	40 e8       	ldi	r20, 0x80	; 128
    8ffe:	51 e4       	ldi	r21, 0x41	; 65
    9000:	c7 01       	movw	r24, r14
    9002:	b6 01       	movw	r22, r12
    9004:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    9008:	18 16       	cp	r1, r24
    900a:	0c f0       	brlt	.+2      	; 0x900e <corectTrv+0x1004>
    900c:	e7 c4       	rjmp	.+2510   	; 0x99dc <corectTrv+0x19d2>
		{
			return( 0.01076 * ds * ds * ds + 0.28823 * ds * ds + 2.82362 * ds + 25.08042)* k;
    900e:	26 eb       	ldi	r18, 0xB6	; 182
    9010:	3a e4       	ldi	r19, 0x4A	; 74
    9012:	40 e3       	ldi	r20, 0x30	; 48
    9014:	5c e3       	ldi	r21, 0x3C	; 60
    9016:	c5 01       	movw	r24, r10
    9018:	b4 01       	movw	r22, r8
    901a:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    901e:	a5 01       	movw	r20, r10
    9020:	94 01       	movw	r18, r8
    9022:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9026:	a5 01       	movw	r20, r10
    9028:	94 01       	movw	r18, r8
    902a:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    902e:	6b 01       	movw	r12, r22
    9030:	7c 01       	movw	r14, r24
    9032:	22 ee       	ldi	r18, 0xE2	; 226
    9034:	32 e9       	ldi	r19, 0x92	; 146
    9036:	43 e9       	ldi	r20, 0x93	; 147
    9038:	5e e3       	ldi	r21, 0x3E	; 62
    903a:	c5 01       	movw	r24, r10
    903c:	b4 01       	movw	r22, r8
    903e:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9042:	a5 01       	movw	r20, r10
    9044:	94 01       	movw	r18, r8
    9046:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    904a:	9b 01       	movw	r18, r22
    904c:	ac 01       	movw	r20, r24
    904e:	c7 01       	movw	r24, r14
    9050:	b6 01       	movw	r22, r12
    9052:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    9056:	6b 01       	movw	r12, r22
    9058:	7c 01       	movw	r14, r24
    905a:	21 e3       	ldi	r18, 0x31	; 49
    905c:	36 eb       	ldi	r19, 0xB6	; 182
    905e:	44 e3       	ldi	r20, 0x34	; 52
    9060:	50 e4       	ldi	r21, 0x40	; 64
    9062:	c5 01       	movw	r24, r10
    9064:	b4 01       	movw	r22, r8
    9066:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    906a:	9b 01       	movw	r18, r22
    906c:	ac 01       	movw	r20, r24
    906e:	c7 01       	movw	r24, r14
    9070:	b6 01       	movw	r22, r12
    9072:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    9076:	23 eb       	ldi	r18, 0xB3	; 179
    9078:	34 ea       	ldi	r19, 0xA4	; 164
    907a:	48 ec       	ldi	r20, 0xC8	; 200
    907c:	51 e4       	ldi	r21, 0x41	; 65
    907e:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    9082:	6b 01       	movw	r12, r22
    9084:	7c 01       	movw	r14, r24
    9086:	be 01       	movw	r22, r28
    9088:	dd 0f       	add	r29, r29
    908a:	88 0b       	sbc	r24, r24
    908c:	99 0b       	sbc	r25, r25
    908e:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    9092:	9b 01       	movw	r18, r22
    9094:	ac 01       	movw	r20, r24
    9096:	c7 01       	movw	r24, r14
    9098:	b6 01       	movw	r22, r12
    909a:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    909e:	ad c4       	rjmp	.+2394   	; 0x99fa <corectTrv+0x19f0>
		}
	}

	else if (ds >= 0 && ds <= 10)
    90a0:	20 e0       	ldi	r18, 0x00	; 0
    90a2:	30 e0       	ldi	r19, 0x00	; 0
    90a4:	a9 01       	movw	r20, r18
    90a6:	c5 01       	movw	r24, r10
    90a8:	b4 01       	movw	r22, r8
    90aa:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    90ae:	88 23       	and	r24, r24
    90b0:	0c f4       	brge	.+2      	; 0x90b4 <corectTrv+0x10aa>
    90b2:	e9 c2       	rjmp	.+1490   	; 0x9686 <corectTrv+0x167c>
    90b4:	20 e0       	ldi	r18, 0x00	; 0
    90b6:	30 e0       	ldi	r19, 0x00	; 0
    90b8:	40 e2       	ldi	r20, 0x20	; 32
    90ba:	51 e4       	ldi	r21, 0x41	; 65
    90bc:	c5 01       	movw	r24, r10
    90be:	b4 01       	movw	r22, r8
    90c0:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    90c4:	18 16       	cp	r1, r24
    90c6:	0c f4       	brge	.+2      	; 0x90ca <corectTrv+0x10c0>
    90c8:	de c2       	rjmp	.+1468   	; 0x9686 <corectTrv+0x167c>
	{
		if (Superheat == SSet)
    90ca:	20 e0       	ldi	r18, 0x00	; 0
    90cc:	30 e0       	ldi	r19, 0x00	; 0
    90ce:	40 ee       	ldi	r20, 0xE0	; 224
    90d0:	50 e4       	ldi	r21, 0x40	; 64
    90d2:	c7 01       	movw	r24, r14
    90d4:	b6 01       	movw	r22, r12
    90d6:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    90da:	81 11       	cpse	r24, r1
    90dc:	2b c0       	rjmp	.+86     	; 0x9134 <corectTrv+0x112a>
		{
			return( -2 * .00001 * ds * ds + 1.406 * ds)* k;
    90de:	2c ea       	ldi	r18, 0xAC	; 172
    90e0:	35 ec       	ldi	r19, 0xC5	; 197
    90e2:	47 ea       	ldi	r20, 0xA7	; 167
    90e4:	57 eb       	ldi	r21, 0xB7	; 183
    90e6:	c5 01       	movw	r24, r10
    90e8:	b4 01       	movw	r22, r8
    90ea:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    90ee:	a5 01       	movw	r20, r10
    90f0:	94 01       	movw	r18, r8
    90f2:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    90f6:	6b 01       	movw	r12, r22
    90f8:	7c 01       	movw	r14, r24
    90fa:	2f ec       	ldi	r18, 0xCF	; 207
    90fc:	37 ef       	ldi	r19, 0xF7	; 247
    90fe:	43 eb       	ldi	r20, 0xB3	; 179
    9100:	5f e3       	ldi	r21, 0x3F	; 63
    9102:	c5 01       	movw	r24, r10
    9104:	b4 01       	movw	r22, r8
    9106:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    910a:	9b 01       	movw	r18, r22
    910c:	ac 01       	movw	r20, r24
    910e:	c7 01       	movw	r24, r14
    9110:	b6 01       	movw	r22, r12
    9112:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    9116:	6b 01       	movw	r12, r22
    9118:	7c 01       	movw	r14, r24
    911a:	be 01       	movw	r22, r28
    911c:	dd 0f       	add	r29, r29
    911e:	88 0b       	sbc	r24, r24
    9120:	99 0b       	sbc	r25, r25
    9122:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    9126:	9b 01       	movw	r18, r22
    9128:	ac 01       	movw	r20, r24
    912a:	c7 01       	movw	r24, r14
    912c:	b6 01       	movw	r22, r12
    912e:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9132:	63 c4       	rjmp	.+2246   	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    9134:	20 e0       	ldi	r18, 0x00	; 0
    9136:	30 e0       	ldi	r19, 0x00	; 0
    9138:	40 ee       	ldi	r20, 0xE0	; 224
    913a:	50 e4       	ldi	r21, 0x40	; 64
    913c:	c7 01       	movw	r24, r14
    913e:	b6 01       	movw	r22, r12
    9140:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    9144:	18 16       	cp	r1, r24
    9146:	dc f5       	brge	.+118    	; 0x91be <corectTrv+0x11b4>
    9148:	20 e0       	ldi	r18, 0x00	; 0
    914a:	30 e0       	ldi	r19, 0x00	; 0
    914c:	40 e0       	ldi	r20, 0x00	; 0
    914e:	51 e4       	ldi	r21, 0x41	; 65
    9150:	c7 01       	movw	r24, r14
    9152:	b6 01       	movw	r22, r12
    9154:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    9158:	18 16       	cp	r1, r24
    915a:	8c f1       	brlt	.+98     	; 0x91be <corectTrv+0x11b4>
		{
			return( 0.062 * ds * ds + 0.570 * ds + 3.280)* k;
    915c:	26 eb       	ldi	r18, 0xB6	; 182
    915e:	33 ef       	ldi	r19, 0xF3	; 243
    9160:	4d e7       	ldi	r20, 0x7D	; 125
    9162:	5d e3       	ldi	r21, 0x3D	; 61
    9164:	c5 01       	movw	r24, r10
    9166:	b4 01       	movw	r22, r8
    9168:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    916c:	a5 01       	movw	r20, r10
    916e:	94 01       	movw	r18, r8
    9170:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9174:	6b 01       	movw	r12, r22
    9176:	7c 01       	movw	r14, r24
    9178:	25 e8       	ldi	r18, 0x85	; 133
    917a:	3b ee       	ldi	r19, 0xEB	; 235
    917c:	41 e1       	ldi	r20, 0x11	; 17
    917e:	5f e3       	ldi	r21, 0x3F	; 63
    9180:	c5 01       	movw	r24, r10
    9182:	b4 01       	movw	r22, r8
    9184:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9188:	9b 01       	movw	r18, r22
    918a:	ac 01       	movw	r20, r24
    918c:	c7 01       	movw	r24, r14
    918e:	b6 01       	movw	r22, r12
    9190:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    9194:	25 e8       	ldi	r18, 0x85	; 133
    9196:	3b ee       	ldi	r19, 0xEB	; 235
    9198:	41 e5       	ldi	r20, 0x51	; 81
    919a:	50 e4       	ldi	r21, 0x40	; 64
    919c:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    91a0:	6b 01       	movw	r12, r22
    91a2:	7c 01       	movw	r14, r24
    91a4:	be 01       	movw	r22, r28
    91a6:	dd 0f       	add	r29, r29
    91a8:	88 0b       	sbc	r24, r24
    91aa:	99 0b       	sbc	r25, r25
    91ac:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    91b0:	9b 01       	movw	r18, r22
    91b2:	ac 01       	movw	r20, r24
    91b4:	c7 01       	movw	r24, r14
    91b6:	b6 01       	movw	r22, r12
    91b8:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    91bc:	1e c4       	rjmp	.+2108   	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    91be:	20 e0       	ldi	r18, 0x00	; 0
    91c0:	30 e0       	ldi	r19, 0x00	; 0
    91c2:	40 e0       	ldi	r20, 0x00	; 0
    91c4:	51 e4       	ldi	r21, 0x41	; 65
    91c6:	c7 01       	movw	r24, r14
    91c8:	b6 01       	movw	r22, r12
    91ca:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    91ce:	18 16       	cp	r1, r24
    91d0:	dc f5       	brge	.+118    	; 0x9248 <corectTrv+0x123e>
    91d2:	20 e0       	ldi	r18, 0x00	; 0
    91d4:	30 e0       	ldi	r19, 0x00	; 0
    91d6:	40 e1       	ldi	r20, 0x10	; 16
    91d8:	51 e4       	ldi	r21, 0x41	; 65
    91da:	c7 01       	movw	r24, r14
    91dc:	b6 01       	movw	r22, r12
    91de:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    91e2:	18 16       	cp	r1, r24
    91e4:	8c f1       	brlt	.+98     	; 0x9248 <corectTrv+0x123e>
		{
			return( 0.099 * ds * ds - 0.019 * ds + 6.338)* k;
    91e6:	23 e8       	ldi	r18, 0x83	; 131
    91e8:	30 ec       	ldi	r19, 0xC0	; 192
    91ea:	4a ec       	ldi	r20, 0xCA	; 202
    91ec:	5d e3       	ldi	r21, 0x3D	; 61
    91ee:	c5 01       	movw	r24, r10
    91f0:	b4 01       	movw	r22, r8
    91f2:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    91f6:	a5 01       	movw	r20, r10
    91f8:	94 01       	movw	r18, r8
    91fa:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    91fe:	6b 01       	movw	r12, r22
    9200:	7c 01       	movw	r14, r24
    9202:	23 ee       	ldi	r18, 0xE3	; 227
    9204:	35 ea       	ldi	r19, 0xA5	; 165
    9206:	4b e9       	ldi	r20, 0x9B	; 155
    9208:	5c e3       	ldi	r21, 0x3C	; 60
    920a:	c5 01       	movw	r24, r10
    920c:	b4 01       	movw	r22, r8
    920e:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9212:	9b 01       	movw	r18, r22
    9214:	ac 01       	movw	r20, r24
    9216:	c7 01       	movw	r24, r14
    9218:	b6 01       	movw	r22, r12
    921a:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    921e:	25 ee       	ldi	r18, 0xE5	; 229
    9220:	30 ed       	ldi	r19, 0xD0	; 208
    9222:	4a ec       	ldi	r20, 0xCA	; 202
    9224:	50 e4       	ldi	r21, 0x40	; 64
    9226:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    922a:	6b 01       	movw	r12, r22
    922c:	7c 01       	movw	r14, r24
    922e:	be 01       	movw	r22, r28
    9230:	dd 0f       	add	r29, r29
    9232:	88 0b       	sbc	r24, r24
    9234:	99 0b       	sbc	r25, r25
    9236:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    923a:	9b 01       	movw	r18, r22
    923c:	ac 01       	movw	r20, r24
    923e:	c7 01       	movw	r24, r14
    9240:	b6 01       	movw	r22, r12
    9242:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9246:	d9 c3       	rjmp	.+1970   	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    9248:	20 e0       	ldi	r18, 0x00	; 0
    924a:	30 e0       	ldi	r19, 0x00	; 0
    924c:	40 e1       	ldi	r20, 0x10	; 16
    924e:	51 e4       	ldi	r21, 0x41	; 65
    9250:	c7 01       	movw	r24, r14
    9252:	b6 01       	movw	r22, r12
    9254:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    9258:	18 16       	cp	r1, r24
    925a:	dc f5       	brge	.+118    	; 0x92d2 <corectTrv+0x12c8>
    925c:	20 e0       	ldi	r18, 0x00	; 0
    925e:	30 e0       	ldi	r19, 0x00	; 0
    9260:	40 e2       	ldi	r20, 0x20	; 32
    9262:	51 e4       	ldi	r21, 0x41	; 65
    9264:	c7 01       	movw	r24, r14
    9266:	b6 01       	movw	r22, r12
    9268:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    926c:	18 16       	cp	r1, r24
    926e:	8c f1       	brlt	.+98     	; 0x92d2 <corectTrv+0x12c8>
		{
			return( 0.121 * ds * ds - 0.409 * ds + 9.164)* k;
    9270:	29 ed       	ldi	r18, 0xD9	; 217
    9272:	3e ec       	ldi	r19, 0xCE	; 206
    9274:	47 ef       	ldi	r20, 0xF7	; 247
    9276:	5d e3       	ldi	r21, 0x3D	; 61
    9278:	c5 01       	movw	r24, r10
    927a:	b4 01       	movw	r22, r8
    927c:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9280:	a5 01       	movw	r20, r10
    9282:	94 01       	movw	r18, r8
    9284:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9288:	6b 01       	movw	r12, r22
    928a:	7c 01       	movw	r14, r24
    928c:	23 e7       	ldi	r18, 0x73	; 115
    928e:	38 e6       	ldi	r19, 0x68	; 104
    9290:	41 ed       	ldi	r20, 0xD1	; 209
    9292:	5e e3       	ldi	r21, 0x3E	; 62
    9294:	c5 01       	movw	r24, r10
    9296:	b4 01       	movw	r22, r8
    9298:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    929c:	9b 01       	movw	r18, r22
    929e:	ac 01       	movw	r20, r24
    92a0:	c7 01       	movw	r24, r14
    92a2:	b6 01       	movw	r22, r12
    92a4:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    92a8:	2e eb       	ldi	r18, 0xBE	; 190
    92aa:	3f e9       	ldi	r19, 0x9F	; 159
    92ac:	42 e1       	ldi	r20, 0x12	; 18
    92ae:	51 e4       	ldi	r21, 0x41	; 65
    92b0:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    92b4:	6b 01       	movw	r12, r22
    92b6:	7c 01       	movw	r14, r24
    92b8:	be 01       	movw	r22, r28
    92ba:	dd 0f       	add	r29, r29
    92bc:	88 0b       	sbc	r24, r24
    92be:	99 0b       	sbc	r25, r25
    92c0:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    92c4:	9b 01       	movw	r18, r22
    92c6:	ac 01       	movw	r20, r24
    92c8:	c7 01       	movw	r24, r14
    92ca:	b6 01       	movw	r22, r12
    92cc:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    92d0:	94 c3       	rjmp	.+1832   	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    92d2:	20 e0       	ldi	r18, 0x00	; 0
    92d4:	30 e0       	ldi	r19, 0x00	; 0
    92d6:	40 e2       	ldi	r20, 0x20	; 32
    92d8:	51 e4       	ldi	r21, 0x41	; 65
    92da:	c7 01       	movw	r24, r14
    92dc:	b6 01       	movw	r22, r12
    92de:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    92e2:	18 16       	cp	r1, r24
    92e4:	dc f5       	brge	.+118    	; 0x935c <corectTrv+0x1352>
    92e6:	20 e0       	ldi	r18, 0x00	; 0
    92e8:	30 e0       	ldi	r19, 0x00	; 0
    92ea:	40 e3       	ldi	r20, 0x30	; 48
    92ec:	51 e4       	ldi	r21, 0x41	; 65
    92ee:	c7 01       	movw	r24, r14
    92f0:	b6 01       	movw	r22, r12
    92f2:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    92f6:	18 16       	cp	r1, r24
    92f8:	8c f1       	brlt	.+98     	; 0x935c <corectTrv+0x1352>
		{
			return( 0.128 * ds * ds - 0.340 * ds + 11.4)* k;
    92fa:	2f e6       	ldi	r18, 0x6F	; 111
    92fc:	32 e1       	ldi	r19, 0x12	; 18
    92fe:	43 e0       	ldi	r20, 0x03	; 3
    9300:	5e e3       	ldi	r21, 0x3E	; 62
    9302:	c5 01       	movw	r24, r10
    9304:	b4 01       	movw	r22, r8
    9306:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    930a:	a5 01       	movw	r20, r10
    930c:	94 01       	movw	r18, r8
    930e:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9312:	6b 01       	movw	r12, r22
    9314:	7c 01       	movw	r14, r24
    9316:	2b e7       	ldi	r18, 0x7B	; 123
    9318:	34 e1       	ldi	r19, 0x14	; 20
    931a:	4e ea       	ldi	r20, 0xAE	; 174
    931c:	5e e3       	ldi	r21, 0x3E	; 62
    931e:	c5 01       	movw	r24, r10
    9320:	b4 01       	movw	r22, r8
    9322:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9326:	9b 01       	movw	r18, r22
    9328:	ac 01       	movw	r20, r24
    932a:	c7 01       	movw	r24, r14
    932c:	b6 01       	movw	r22, r12
    932e:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    9332:	26 e6       	ldi	r18, 0x66	; 102
    9334:	36 e6       	ldi	r19, 0x66	; 102
    9336:	46 e3       	ldi	r20, 0x36	; 54
    9338:	51 e4       	ldi	r21, 0x41	; 65
    933a:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    933e:	6b 01       	movw	r12, r22
    9340:	7c 01       	movw	r14, r24
    9342:	be 01       	movw	r22, r28
    9344:	dd 0f       	add	r29, r29
    9346:	88 0b       	sbc	r24, r24
    9348:	99 0b       	sbc	r25, r25
    934a:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    934e:	9b 01       	movw	r18, r22
    9350:	ac 01       	movw	r20, r24
    9352:	c7 01       	movw	r24, r14
    9354:	b6 01       	movw	r22, r12
    9356:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    935a:	4f c3       	rjmp	.+1694   	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    935c:	20 e0       	ldi	r18, 0x00	; 0
    935e:	30 e0       	ldi	r19, 0x00	; 0
    9360:	40 e3       	ldi	r20, 0x30	; 48
    9362:	51 e4       	ldi	r21, 0x41	; 65
    9364:	c7 01       	movw	r24, r14
    9366:	b6 01       	movw	r22, r12
    9368:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    936c:	18 16       	cp	r1, r24
    936e:	dc f5       	brge	.+118    	; 0x93e6 <corectTrv+0x13dc>
    9370:	20 e0       	ldi	r18, 0x00	; 0
    9372:	30 e0       	ldi	r19, 0x00	; 0
    9374:	40 e4       	ldi	r20, 0x40	; 64
    9376:	51 e4       	ldi	r21, 0x41	; 65
    9378:	c7 01       	movw	r24, r14
    937a:	b6 01       	movw	r22, r12
    937c:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    9380:	18 16       	cp	r1, r24
    9382:	8c f1       	brlt	.+98     	; 0x93e6 <corectTrv+0x13dc>
		{
			return( 0.128 * ds * ds - 0.382 * ds + 15.51)* k;
    9384:	2f e6       	ldi	r18, 0x6F	; 111
    9386:	32 e1       	ldi	r19, 0x12	; 18
    9388:	43 e0       	ldi	r20, 0x03	; 3
    938a:	5e e3       	ldi	r21, 0x3E	; 62
    938c:	c5 01       	movw	r24, r10
    938e:	b4 01       	movw	r22, r8
    9390:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9394:	a5 01       	movw	r20, r10
    9396:	94 01       	movw	r18, r8
    9398:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    939c:	6b 01       	movw	r12, r22
    939e:	7c 01       	movw	r14, r24
    93a0:	21 e8       	ldi	r18, 0x81	; 129
    93a2:	35 e9       	ldi	r19, 0x95	; 149
    93a4:	43 ec       	ldi	r20, 0xC3	; 195
    93a6:	5e e3       	ldi	r21, 0x3E	; 62
    93a8:	c5 01       	movw	r24, r10
    93aa:	b4 01       	movw	r22, r8
    93ac:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    93b0:	9b 01       	movw	r18, r22
    93b2:	ac 01       	movw	r20, r24
    93b4:	c7 01       	movw	r24, r14
    93b6:	b6 01       	movw	r22, r12
    93b8:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    93bc:	26 ef       	ldi	r18, 0xF6	; 246
    93be:	38 e2       	ldi	r19, 0x28	; 40
    93c0:	48 e7       	ldi	r20, 0x78	; 120
    93c2:	51 e4       	ldi	r21, 0x41	; 65
    93c4:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    93c8:	6b 01       	movw	r12, r22
    93ca:	7c 01       	movw	r14, r24
    93cc:	be 01       	movw	r22, r28
    93ce:	dd 0f       	add	r29, r29
    93d0:	88 0b       	sbc	r24, r24
    93d2:	99 0b       	sbc	r25, r25
    93d4:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    93d8:	9b 01       	movw	r18, r22
    93da:	ac 01       	movw	r20, r24
    93dc:	c7 01       	movw	r24, r14
    93de:	b6 01       	movw	r22, r12
    93e0:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    93e4:	0a c3       	rjmp	.+1556   	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    93e6:	20 e0       	ldi	r18, 0x00	; 0
    93e8:	30 e0       	ldi	r19, 0x00	; 0
    93ea:	40 e4       	ldi	r20, 0x40	; 64
    93ec:	51 e4       	ldi	r21, 0x41	; 65
    93ee:	c7 01       	movw	r24, r14
    93f0:	b6 01       	movw	r22, r12
    93f2:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    93f6:	18 16       	cp	r1, r24
    93f8:	dc f5       	brge	.+118    	; 0x9470 <corectTrv+0x1466>
    93fa:	20 e0       	ldi	r18, 0x00	; 0
    93fc:	30 e0       	ldi	r19, 0x00	; 0
    93fe:	40 e5       	ldi	r20, 0x50	; 80
    9400:	51 e4       	ldi	r21, 0x41	; 65
    9402:	c7 01       	movw	r24, r14
    9404:	b6 01       	movw	r22, r12
    9406:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    940a:	18 16       	cp	r1, r24
    940c:	8c f1       	brlt	.+98     	; 0x9470 <corectTrv+0x1466>
		{
			return( 0.128 * ds * ds - 0.382 * ds + 15.51)* k;
    940e:	2f e6       	ldi	r18, 0x6F	; 111
    9410:	32 e1       	ldi	r19, 0x12	; 18
    9412:	43 e0       	ldi	r20, 0x03	; 3
    9414:	5e e3       	ldi	r21, 0x3E	; 62
    9416:	c5 01       	movw	r24, r10
    9418:	b4 01       	movw	r22, r8
    941a:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    941e:	a5 01       	movw	r20, r10
    9420:	94 01       	movw	r18, r8
    9422:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9426:	6b 01       	movw	r12, r22
    9428:	7c 01       	movw	r14, r24
    942a:	21 e8       	ldi	r18, 0x81	; 129
    942c:	35 e9       	ldi	r19, 0x95	; 149
    942e:	43 ec       	ldi	r20, 0xC3	; 195
    9430:	5e e3       	ldi	r21, 0x3E	; 62
    9432:	c5 01       	movw	r24, r10
    9434:	b4 01       	movw	r22, r8
    9436:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    943a:	9b 01       	movw	r18, r22
    943c:	ac 01       	movw	r20, r24
    943e:	c7 01       	movw	r24, r14
    9440:	b6 01       	movw	r22, r12
    9442:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    9446:	26 ef       	ldi	r18, 0xF6	; 246
    9448:	38 e2       	ldi	r19, 0x28	; 40
    944a:	48 e7       	ldi	r20, 0x78	; 120
    944c:	51 e4       	ldi	r21, 0x41	; 65
    944e:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    9452:	6b 01       	movw	r12, r22
    9454:	7c 01       	movw	r14, r24
    9456:	be 01       	movw	r22, r28
    9458:	dd 0f       	add	r29, r29
    945a:	88 0b       	sbc	r24, r24
    945c:	99 0b       	sbc	r25, r25
    945e:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    9462:	9b 01       	movw	r18, r22
    9464:	ac 01       	movw	r20, r24
    9466:	c7 01       	movw	r24, r14
    9468:	b6 01       	movw	r22, r12
    946a:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    946e:	c5 c2       	rjmp	.+1418   	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    9470:	20 e0       	ldi	r18, 0x00	; 0
    9472:	30 e0       	ldi	r19, 0x00	; 0
    9474:	40 e5       	ldi	r20, 0x50	; 80
    9476:	51 e4       	ldi	r21, 0x41	; 65
    9478:	c7 01       	movw	r24, r14
    947a:	b6 01       	movw	r22, r12
    947c:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    9480:	18 16       	cp	r1, r24
    9482:	dc f5       	brge	.+118    	; 0x94fa <corectTrv+0x14f0>
    9484:	20 e0       	ldi	r18, 0x00	; 0
    9486:	30 e0       	ldi	r19, 0x00	; 0
    9488:	40 e6       	ldi	r20, 0x60	; 96
    948a:	51 e4       	ldi	r21, 0x41	; 65
    948c:	c7 01       	movw	r24, r14
    948e:	b6 01       	movw	r22, r12
    9490:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    9494:	18 16       	cp	r1, r24
    9496:	8c f1       	brlt	.+98     	; 0x94fa <corectTrv+0x14f0>
		{
			return( 0.137 * ds * ds - 0.652 * ds + 16.63)* k;
    9498:	2a eb       	ldi	r18, 0xBA	; 186
    949a:	39 e4       	ldi	r19, 0x49	; 73
    949c:	4c e0       	ldi	r20, 0x0C	; 12
    949e:	5e e3       	ldi	r21, 0x3E	; 62
    94a0:	c5 01       	movw	r24, r10
    94a2:	b4 01       	movw	r22, r8
    94a4:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    94a8:	a5 01       	movw	r20, r10
    94aa:	94 01       	movw	r18, r8
    94ac:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    94b0:	6b 01       	movw	r12, r22
    94b2:	7c 01       	movw	r14, r24
    94b4:	29 e7       	ldi	r18, 0x79	; 121
    94b6:	39 ee       	ldi	r19, 0xE9	; 233
    94b8:	46 e2       	ldi	r20, 0x26	; 38
    94ba:	5f e3       	ldi	r21, 0x3F	; 63
    94bc:	c5 01       	movw	r24, r10
    94be:	b4 01       	movw	r22, r8
    94c0:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    94c4:	9b 01       	movw	r18, r22
    94c6:	ac 01       	movw	r20, r24
    94c8:	c7 01       	movw	r24, r14
    94ca:	b6 01       	movw	r22, r12
    94cc:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    94d0:	2d e3       	ldi	r18, 0x3D	; 61
    94d2:	3a e0       	ldi	r19, 0x0A	; 10
    94d4:	45 e8       	ldi	r20, 0x85	; 133
    94d6:	51 e4       	ldi	r21, 0x41	; 65
    94d8:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    94dc:	6b 01       	movw	r12, r22
    94de:	7c 01       	movw	r14, r24
    94e0:	be 01       	movw	r22, r28
    94e2:	dd 0f       	add	r29, r29
    94e4:	88 0b       	sbc	r24, r24
    94e6:	99 0b       	sbc	r25, r25
    94e8:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    94ec:	9b 01       	movw	r18, r22
    94ee:	ac 01       	movw	r20, r24
    94f0:	c7 01       	movw	r24, r14
    94f2:	b6 01       	movw	r22, r12
    94f4:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    94f8:	80 c2       	rjmp	.+1280   	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    94fa:	20 e0       	ldi	r18, 0x00	; 0
    94fc:	30 e0       	ldi	r19, 0x00	; 0
    94fe:	40 e6       	ldi	r20, 0x60	; 96
    9500:	51 e4       	ldi	r21, 0x41	; 65
    9502:	c7 01       	movw	r24, r14
    9504:	b6 01       	movw	r22, r12
    9506:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    950a:	18 16       	cp	r1, r24
    950c:	dc f5       	brge	.+118    	; 0x9584 <corectTrv+0x157a>
    950e:	20 e0       	ldi	r18, 0x00	; 0
    9510:	30 e0       	ldi	r19, 0x00	; 0
    9512:	40 e7       	ldi	r20, 0x70	; 112
    9514:	51 e4       	ldi	r21, 0x41	; 65
    9516:	c7 01       	movw	r24, r14
    9518:	b6 01       	movw	r22, r12
    951a:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    951e:	18 16       	cp	r1, r24
    9520:	8c f1       	brlt	.+98     	; 0x9584 <corectTrv+0x157a>
		{
			return( 0.142 * ds * ds - 0.630 * ds + 17.7)* k;
    9522:	23 e7       	ldi	r18, 0x73	; 115
    9524:	38 e6       	ldi	r19, 0x68	; 104
    9526:	41 e1       	ldi	r20, 0x11	; 17
    9528:	5e e3       	ldi	r21, 0x3E	; 62
    952a:	c5 01       	movw	r24, r10
    952c:	b4 01       	movw	r22, r8
    952e:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9532:	a5 01       	movw	r20, r10
    9534:	94 01       	movw	r18, r8
    9536:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    953a:	6b 01       	movw	r12, r22
    953c:	7c 01       	movw	r14, r24
    953e:	2e ea       	ldi	r18, 0xAE	; 174
    9540:	37 e4       	ldi	r19, 0x47	; 71
    9542:	41 e2       	ldi	r20, 0x21	; 33
    9544:	5f e3       	ldi	r21, 0x3F	; 63
    9546:	c5 01       	movw	r24, r10
    9548:	b4 01       	movw	r22, r8
    954a:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    954e:	9b 01       	movw	r18, r22
    9550:	ac 01       	movw	r20, r24
    9552:	c7 01       	movw	r24, r14
    9554:	b6 01       	movw	r22, r12
    9556:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    955a:	2a e9       	ldi	r18, 0x9A	; 154
    955c:	39 e9       	ldi	r19, 0x99	; 153
    955e:	4d e8       	ldi	r20, 0x8D	; 141
    9560:	51 e4       	ldi	r21, 0x41	; 65
    9562:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    9566:	6b 01       	movw	r12, r22
    9568:	7c 01       	movw	r14, r24
    956a:	be 01       	movw	r22, r28
    956c:	dd 0f       	add	r29, r29
    956e:	88 0b       	sbc	r24, r24
    9570:	99 0b       	sbc	r25, r25
    9572:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    9576:	9b 01       	movw	r18, r22
    9578:	ac 01       	movw	r20, r24
    957a:	c7 01       	movw	r24, r14
    957c:	b6 01       	movw	r22, r12
    957e:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9582:	3b c2       	rjmp	.+1142   	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    9584:	20 e0       	ldi	r18, 0x00	; 0
    9586:	30 e0       	ldi	r19, 0x00	; 0
    9588:	40 e7       	ldi	r20, 0x70	; 112
    958a:	51 e4       	ldi	r21, 0x41	; 65
    958c:	c7 01       	movw	r24, r14
    958e:	b6 01       	movw	r22, r12
    9590:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    9594:	18 16       	cp	r1, r24
    9596:	dc f5       	brge	.+118    	; 0x960e <corectTrv+0x1604>
    9598:	20 e0       	ldi	r18, 0x00	; 0
    959a:	30 e0       	ldi	r19, 0x00	; 0
    959c:	40 e8       	ldi	r20, 0x80	; 128
    959e:	51 e4       	ldi	r21, 0x41	; 65
    95a0:	c7 01       	movw	r24, r14
    95a2:	b6 01       	movw	r22, r12
    95a4:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    95a8:	18 16       	cp	r1, r24
    95aa:	8c f1       	brlt	.+98     	; 0x960e <corectTrv+0x1604>
		{
			return( 0.126 * ds * ds - 0.683 * ds + 20.4)* k;
    95ac:	25 e2       	ldi	r18, 0x25	; 37
    95ae:	36 e0       	ldi	r19, 0x06	; 6
    95b0:	41 e0       	ldi	r20, 0x01	; 1
    95b2:	5e e3       	ldi	r21, 0x3E	; 62
    95b4:	c5 01       	movw	r24, r10
    95b6:	b4 01       	movw	r22, r8
    95b8:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    95bc:	a5 01       	movw	r20, r10
    95be:	94 01       	movw	r18, r8
    95c0:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    95c4:	6b 01       	movw	r12, r22
    95c6:	7c 01       	movw	r14, r24
    95c8:	27 e1       	ldi	r18, 0x17	; 23
    95ca:	39 ed       	ldi	r19, 0xD9	; 217
    95cc:	4e e2       	ldi	r20, 0x2E	; 46
    95ce:	5f e3       	ldi	r21, 0x3F	; 63
    95d0:	c5 01       	movw	r24, r10
    95d2:	b4 01       	movw	r22, r8
    95d4:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    95d8:	9b 01       	movw	r18, r22
    95da:	ac 01       	movw	r20, r24
    95dc:	c7 01       	movw	r24, r14
    95de:	b6 01       	movw	r22, r12
    95e0:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    95e4:	23 e3       	ldi	r18, 0x33	; 51
    95e6:	33 e3       	ldi	r19, 0x33	; 51
    95e8:	43 ea       	ldi	r20, 0xA3	; 163
    95ea:	51 e4       	ldi	r21, 0x41	; 65
    95ec:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    95f0:	6b 01       	movw	r12, r22
    95f2:	7c 01       	movw	r14, r24
    95f4:	be 01       	movw	r22, r28
    95f6:	dd 0f       	add	r29, r29
    95f8:	88 0b       	sbc	r24, r24
    95fa:	99 0b       	sbc	r25, r25
    95fc:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    9600:	9b 01       	movw	r18, r22
    9602:	ac 01       	movw	r20, r24
    9604:	c7 01       	movw	r24, r14
    9606:	b6 01       	movw	r22, r12
    9608:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    960c:	f6 c1       	rjmp	.+1004   	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 9)
    960e:	20 e0       	ldi	r18, 0x00	; 0
    9610:	30 e0       	ldi	r19, 0x00	; 0
    9612:	40 e8       	ldi	r20, 0x80	; 128
    9614:	51 e4       	ldi	r21, 0x41	; 65
    9616:	c7 01       	movw	r24, r14
    9618:	b6 01       	movw	r22, r12
    961a:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    961e:	18 16       	cp	r1, r24
    9620:	0c f0       	brlt	.+2      	; 0x9624 <corectTrv+0x161a>
    9622:	e0 c1       	rjmp	.+960    	; 0x99e4 <corectTrv+0x19da>
		{
			return( 0.027 * ds * ds - 0.277 * ds + 25.29)* k;
    9624:	2b e1       	ldi	r18, 0x1B	; 27
    9626:	3f e2       	ldi	r19, 0x2F	; 47
    9628:	4d ed       	ldi	r20, 0xDD	; 221
    962a:	5c e3       	ldi	r21, 0x3C	; 60
    962c:	c5 01       	movw	r24, r10
    962e:	b4 01       	movw	r22, r8
    9630:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9634:	a5 01       	movw	r20, r10
    9636:	94 01       	movw	r18, r8
    9638:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    963c:	6b 01       	movw	r12, r22
    963e:	7c 01       	movw	r14, r24
    9640:	22 ef       	ldi	r18, 0xF2	; 242
    9642:	32 ed       	ldi	r19, 0xD2	; 210
    9644:	4d e8       	ldi	r20, 0x8D	; 141
    9646:	5e e3       	ldi	r21, 0x3E	; 62
    9648:	c5 01       	movw	r24, r10
    964a:	b4 01       	movw	r22, r8
    964c:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9650:	9b 01       	movw	r18, r22
    9652:	ac 01       	movw	r20, r24
    9654:	c7 01       	movw	r24, r14
    9656:	b6 01       	movw	r22, r12
    9658:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    965c:	2c ee       	ldi	r18, 0xEC	; 236
    965e:	31 e5       	ldi	r19, 0x51	; 81
    9660:	4a ec       	ldi	r20, 0xCA	; 202
    9662:	51 e4       	ldi	r21, 0x41	; 65
    9664:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    9668:	6b 01       	movw	r12, r22
    966a:	7c 01       	movw	r14, r24
    966c:	be 01       	movw	r22, r28
    966e:	dd 0f       	add	r29, r29
    9670:	88 0b       	sbc	r24, r24
    9672:	99 0b       	sbc	r25, r25
    9674:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    9678:	9b 01       	movw	r18, r22
    967a:	ac 01       	movw	r20, r24
    967c:	c7 01       	movw	r24, r14
    967e:	b6 01       	movw	r22, r12
    9680:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9684:	ba c1       	rjmp	.+884    	; 0x99fa <corectTrv+0x19f0>
		}
	}

	else if (ds > 10)
    9686:	20 e0       	ldi	r18, 0x00	; 0
    9688:	30 e0       	ldi	r19, 0x00	; 0
    968a:	40 e2       	ldi	r20, 0x20	; 32
    968c:	51 e4       	ldi	r21, 0x41	; 65
    968e:	c5 01       	movw	r24, r10
    9690:	b4 01       	movw	r22, r8
    9692:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    9696:	18 16       	cp	r1, r24
    9698:	0c f0       	brlt	.+2      	; 0x969c <corectTrv+0x1692>
    969a:	a8 c1       	rjmp	.+848    	; 0x99ec <corectTrv+0x19e2>
    969c:	08 c0       	rjmp	.+16     	; 0x96ae <corectTrv+0x16a4>
	
	Superheat_old = Superheat;
	
	if (ds > 20)
	{
		ds = 20;
    969e:	0f 2e       	mov	r0, r31
    96a0:	81 2c       	mov	r8, r1
    96a2:	91 2c       	mov	r9, r1
    96a4:	f0 ea       	ldi	r31, 0xA0	; 160
    96a6:	af 2e       	mov	r10, r31
    96a8:	f1 e4       	ldi	r31, 0x41	; 65
    96aa:	bf 2e       	mov	r11, r31
    96ac:	f0 2d       	mov	r31, r0
		}
	}

	else if (ds > 10)
	{
		if (Superheat == SSet)
    96ae:	20 e0       	ldi	r18, 0x00	; 0
    96b0:	30 e0       	ldi	r19, 0x00	; 0
    96b2:	40 ee       	ldi	r20, 0xE0	; 224
    96b4:	50 e4       	ldi	r21, 0x40	; 64
    96b6:	c7 01       	movw	r24, r14
    96b8:	b6 01       	movw	r22, r12
    96ba:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    96be:	81 11       	cpse	r24, r1
    96c0:	31 c0       	rjmp	.+98     	; 0x9724 <corectTrv+0x171a>
		{
			return( 0.137 * ds * ds - 3.245 * ds + 34.51)* k;
    96c2:	2a eb       	ldi	r18, 0xBA	; 186
    96c4:	39 e4       	ldi	r19, 0x49	; 73
    96c6:	4c e0       	ldi	r20, 0x0C	; 12
    96c8:	5e e3       	ldi	r21, 0x3E	; 62
    96ca:	c5 01       	movw	r24, r10
    96cc:	b4 01       	movw	r22, r8
    96ce:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    96d2:	a5 01       	movw	r20, r10
    96d4:	94 01       	movw	r18, r8
    96d6:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    96da:	6b 01       	movw	r12, r22
    96dc:	7c 01       	movw	r14, r24
    96de:	24 e1       	ldi	r18, 0x14	; 20
    96e0:	3e ea       	ldi	r19, 0xAE	; 174
    96e2:	4f e4       	ldi	r20, 0x4F	; 79
    96e4:	50 e4       	ldi	r21, 0x40	; 64
    96e6:	c5 01       	movw	r24, r10
    96e8:	b4 01       	movw	r22, r8
    96ea:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    96ee:	9b 01       	movw	r18, r22
    96f0:	ac 01       	movw	r20, r24
    96f2:	c7 01       	movw	r24, r14
    96f4:	b6 01       	movw	r22, r12
    96f6:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    96fa:	2d e3       	ldi	r18, 0x3D	; 61
    96fc:	3a e0       	ldi	r19, 0x0A	; 10
    96fe:	4a e0       	ldi	r20, 0x0A	; 10
    9700:	52 e4       	ldi	r21, 0x42	; 66
    9702:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    9706:	6b 01       	movw	r12, r22
    9708:	7c 01       	movw	r14, r24
    970a:	be 01       	movw	r22, r28
    970c:	dd 0f       	add	r29, r29
    970e:	88 0b       	sbc	r24, r24
    9710:	99 0b       	sbc	r25, r25
    9712:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    9716:	9b 01       	movw	r18, r22
    9718:	ac 01       	movw	r20, r24
    971a:	c7 01       	movw	r24, r14
    971c:	b6 01       	movw	r22, r12
    971e:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9722:	6b c1       	rjmp	.+726    	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    9724:	20 e0       	ldi	r18, 0x00	; 0
    9726:	30 e0       	ldi	r19, 0x00	; 0
    9728:	40 ee       	ldi	r20, 0xE0	; 224
    972a:	50 e4       	ldi	r21, 0x40	; 64
    972c:	c7 01       	movw	r24, r14
    972e:	b6 01       	movw	r22, r12
    9730:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    9734:	18 16       	cp	r1, r24
    9736:	dc f5       	brge	.+118    	; 0x97ae <corectTrv+0x17a4>
    9738:	20 e0       	ldi	r18, 0x00	; 0
    973a:	30 e0       	ldi	r19, 0x00	; 0
    973c:	40 e0       	ldi	r20, 0x00	; 0
    973e:	51 e4       	ldi	r21, 0x41	; 65
    9740:	c7 01       	movw	r24, r14
    9742:	b6 01       	movw	r22, r12
    9744:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    9748:	18 16       	cp	r1, r24
    974a:	8c f1       	brlt	.+98     	; 0x97ae <corectTrv+0x17a4>
		{
			return( 0.137 * ds * ds - 3.245 * ds + 34.51)* k;
    974c:	2a eb       	ldi	r18, 0xBA	; 186
    974e:	39 e4       	ldi	r19, 0x49	; 73
    9750:	4c e0       	ldi	r20, 0x0C	; 12
    9752:	5e e3       	ldi	r21, 0x3E	; 62
    9754:	c5 01       	movw	r24, r10
    9756:	b4 01       	movw	r22, r8
    9758:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    975c:	a5 01       	movw	r20, r10
    975e:	94 01       	movw	r18, r8
    9760:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9764:	6b 01       	movw	r12, r22
    9766:	7c 01       	movw	r14, r24
    9768:	24 e1       	ldi	r18, 0x14	; 20
    976a:	3e ea       	ldi	r19, 0xAE	; 174
    976c:	4f e4       	ldi	r20, 0x4F	; 79
    976e:	50 e4       	ldi	r21, 0x40	; 64
    9770:	c5 01       	movw	r24, r10
    9772:	b4 01       	movw	r22, r8
    9774:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9778:	9b 01       	movw	r18, r22
    977a:	ac 01       	movw	r20, r24
    977c:	c7 01       	movw	r24, r14
    977e:	b6 01       	movw	r22, r12
    9780:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    9784:	2d e3       	ldi	r18, 0x3D	; 61
    9786:	3a e0       	ldi	r19, 0x0A	; 10
    9788:	4a e0       	ldi	r20, 0x0A	; 10
    978a:	52 e4       	ldi	r21, 0x42	; 66
    978c:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    9790:	6b 01       	movw	r12, r22
    9792:	7c 01       	movw	r14, r24
    9794:	be 01       	movw	r22, r28
    9796:	dd 0f       	add	r29, r29
    9798:	88 0b       	sbc	r24, r24
    979a:	99 0b       	sbc	r25, r25
    979c:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    97a0:	9b 01       	movw	r18, r22
    97a2:	ac 01       	movw	r20, r24
    97a4:	c7 01       	movw	r24, r14
    97a6:	b6 01       	movw	r22, r12
    97a8:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    97ac:	26 c1       	rjmp	.+588    	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    97ae:	20 e0       	ldi	r18, 0x00	; 0
    97b0:	30 e0       	ldi	r19, 0x00	; 0
    97b2:	40 e0       	ldi	r20, 0x00	; 0
    97b4:	51 e4       	ldi	r21, 0x41	; 65
    97b6:	c7 01       	movw	r24, r14
    97b8:	b6 01       	movw	r22, r12
    97ba:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    97be:	18 16       	cp	r1, r24
    97c0:	dc f5       	brge	.+118    	; 0x9838 <corectTrv+0x182e>
    97c2:	20 e0       	ldi	r18, 0x00	; 0
    97c4:	30 e0       	ldi	r19, 0x00	; 0
    97c6:	40 e1       	ldi	r20, 0x10	; 16
    97c8:	51 e4       	ldi	r21, 0x41	; 65
    97ca:	c7 01       	movw	r24, r14
    97cc:	b6 01       	movw	r22, r12
    97ce:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    97d2:	18 16       	cp	r1, r24
    97d4:	8c f1       	brlt	.+98     	; 0x9838 <corectTrv+0x182e>
		{
			return( 0.158 * ds * ds - 4.086 * ds + 42.41)* k;
    97d6:	21 ec       	ldi	r18, 0xC1	; 193
    97d8:	3a ec       	ldi	r19, 0xCA	; 202
    97da:	41 e2       	ldi	r20, 0x21	; 33
    97dc:	5e e3       	ldi	r21, 0x3E	; 62
    97de:	c5 01       	movw	r24, r10
    97e0:	b4 01       	movw	r22, r8
    97e2:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    97e6:	a5 01       	movw	r20, r10
    97e8:	94 01       	movw	r18, r8
    97ea:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    97ee:	6b 01       	movw	r12, r22
    97f0:	7c 01       	movw	r14, r24
    97f2:	23 e8       	ldi	r18, 0x83	; 131
    97f4:	30 ec       	ldi	r19, 0xC0	; 192
    97f6:	42 e8       	ldi	r20, 0x82	; 130
    97f8:	50 e4       	ldi	r21, 0x40	; 64
    97fa:	c5 01       	movw	r24, r10
    97fc:	b4 01       	movw	r22, r8
    97fe:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9802:	9b 01       	movw	r18, r22
    9804:	ac 01       	movw	r20, r24
    9806:	c7 01       	movw	r24, r14
    9808:	b6 01       	movw	r22, r12
    980a:	0e 94 1d 54 	call	0xa83a	; 0xa83a <__subsf3>
    980e:	27 ed       	ldi	r18, 0xD7	; 215
    9810:	33 ea       	ldi	r19, 0xA3	; 163
    9812:	49 e2       	ldi	r20, 0x29	; 41
    9814:	52 e4       	ldi	r21, 0x42	; 66
    9816:	0e 94 1e 54 	call	0xa83c	; 0xa83c <__addsf3>
    981a:	6b 01       	movw	r12, r22
    981c:	7c 01       	movw	r14, r24
    981e:	be 01       	movw	r22, r28
    9820:	dd 0f       	add	r29, r29
    9822:	88 0b       	sbc	r24, r24
    9824:	99 0b       	sbc	r25, r25
    9826:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    982a:	9b 01       	movw	r18, r22
    982c:	ac 01       	movw	r20, r24
    982e:	c7 01       	movw	r24, r14
    9830:	b6 01       	movw	r22, r12
    9832:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9836:	e1 c0       	rjmp	.+450    	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    9838:	20 e0       	ldi	r18, 0x00	; 0
    983a:	30 e0       	ldi	r19, 0x00	; 0
    983c:	40 e1       	ldi	r20, 0x10	; 16
    983e:	51 e4       	ldi	r21, 0x41	; 65
    9840:	c7 01       	movw	r24, r14
    9842:	b6 01       	movw	r22, r12
    9844:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    9848:	18 16       	cp	r1, r24
    984a:	0c f0       	brlt	.+2      	; 0x984e <corectTrv+0x1844>
    984c:	51 c0       	rjmp	.+162    	; 0x98f0 <corectTrv+0x18e6>
    984e:	20 e0       	ldi	r18, 0x00	; 0
    9850:	30 e0       	ldi	r19, 0x00	; 0
    9852:	40 e2       	ldi	r20, 0x20	; 32
    9854:	51 e4       	ldi	r21, 0x41	; 65
    9856:	c7 01       	movw	r24, r14
    9858:	b6 01       	movw	r22, r12
    985a:	0e 94 82 54 	call	0xa904	; 0xa904 <__cmpsf2>
    985e:	18 16       	cp	r1, r24
    9860:	0c f4       	brge	.+2      	; 0x9864 <corectTrv+0x185a>
    9862:	46 c0       	rjmp	.+140    	; 0x98f0 <corectTrv+0x18e6>
		{
			return( 0.027 * ds * ds * ds - 1.086 * ds * ds + 14.32 * ds - 44.48)* k;
    9864:	2b e1       	ldi	r18, 0x1B	; 27
    9866:	3f e2       	ldi	r19, 0x2F	; 47
    9868:	4d ed       	ldi	r20, 0xDD	; 221
    986a:	5c e3       	ldi	r21, 0x3C	; 60
    986c:	c5 01       	movw	r24, r10
    986e:	b4 01       	movw	r22, r8
    9870:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9874:	a5 01       	movw	r20, r10
    9876:	94 01       	movw	r18, r8
    9878:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    987c:	a5 01       	movw	r20, r10
    987e:	94 01       	movw	r18, r8
    9880:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9884:	6b 01       	movw	r12, r22
    9886:	7c 01       	movw	r14, r24
    9888:	2c e0       	ldi	r18, 0x0C	; 12
    988a:	32 e0       	ldi	r19, 0x02	; 2
    988c:	4b e8       	ldi	r20, 0x8B	; 139
    988e:	5f e3       	ldi	r21, 0x3F	; 63
    9890:	c5 01       	movw	r24, r10
    9892:	b4 01       	movw	r22, r8
    9894:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9898:	a5 01       	movw	r20, r10
    989a:	94 01       	movw	r18, r8
    989c:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    98a0:	9b 01       	movw	r18, r22
    98a2:	ac 01       	movw	r20, r24
    98a4:	c7 01       	movw	r24, r14
    98a6:	b6 01       	movw	r22, r12
    98a8:	c8 d7       	rcall	.+3984   	; 0xa83a <__subsf3>
    98aa:	6b 01       	movw	r12, r22
    98ac:	7c 01       	movw	r14, r24
    98ae:	28 eb       	ldi	r18, 0xB8	; 184
    98b0:	3e e1       	ldi	r19, 0x1E	; 30
    98b2:	45 e6       	ldi	r20, 0x65	; 101
    98b4:	51 e4       	ldi	r21, 0x41	; 65
    98b6:	c5 01       	movw	r24, r10
    98b8:	b4 01       	movw	r22, r8
    98ba:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    98be:	9b 01       	movw	r18, r22
    98c0:	ac 01       	movw	r20, r24
    98c2:	c7 01       	movw	r24, r14
    98c4:	b6 01       	movw	r22, r12
    98c6:	ba d7       	rcall	.+3956   	; 0xa83c <__addsf3>
    98c8:	25 e8       	ldi	r18, 0x85	; 133
    98ca:	3b ee       	ldi	r19, 0xEB	; 235
    98cc:	41 e3       	ldi	r20, 0x31	; 49
    98ce:	52 e4       	ldi	r21, 0x42	; 66
    98d0:	b4 d7       	rcall	.+3944   	; 0xa83a <__subsf3>
    98d2:	6b 01       	movw	r12, r22
    98d4:	7c 01       	movw	r14, r24
    98d6:	be 01       	movw	r22, r28
    98d8:	dd 0f       	add	r29, r29
    98da:	88 0b       	sbc	r24, r24
    98dc:	99 0b       	sbc	r25, r25
    98de:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    98e2:	9b 01       	movw	r18, r22
    98e4:	ac 01       	movw	r20, r24
    98e6:	c7 01       	movw	r24, r14
    98e8:	b6 01       	movw	r22, r12
    98ea:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    98ee:	85 c0       	rjmp	.+266    	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    98f0:	20 e0       	ldi	r18, 0x00	; 0
    98f2:	30 e0       	ldi	r19, 0x00	; 0
    98f4:	40 e2       	ldi	r20, 0x20	; 32
    98f6:	51 e4       	ldi	r21, 0x41	; 65
    98f8:	c7 01       	movw	r24, r14
    98fa:	b6 01       	movw	r22, r12
    98fc:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    9900:	18 16       	cp	r1, r24
    9902:	0c f0       	brlt	.+2      	; 0x9906 <corectTrv+0x18fc>
    9904:	50 c0       	rjmp	.+160    	; 0x99a6 <corectTrv+0x199c>
    9906:	20 e0       	ldi	r18, 0x00	; 0
    9908:	30 e0       	ldi	r19, 0x00	; 0
    990a:	40 e3       	ldi	r20, 0x30	; 48
    990c:	51 e4       	ldi	r21, 0x41	; 65
    990e:	c7 01       	movw	r24, r14
    9910:	b6 01       	movw	r22, r12
    9912:	f8 d7       	rcall	.+4080   	; 0xa904 <__cmpsf2>
    9914:	18 16       	cp	r1, r24
    9916:	0c f4       	brge	.+2      	; 0x991a <corectTrv+0x1910>
    9918:	46 c0       	rjmp	.+140    	; 0x99a6 <corectTrv+0x199c>
		{
			return( 0.026 * ds * ds * ds - 1.084 * ds * ds + 14.27 * ds - 40.99)* k;
    991a:	24 ef       	ldi	r18, 0xF4	; 244
    991c:	3d ef       	ldi	r19, 0xFD	; 253
    991e:	44 ed       	ldi	r20, 0xD4	; 212
    9920:	5c e3       	ldi	r21, 0x3C	; 60
    9922:	c5 01       	movw	r24, r10
    9924:	b4 01       	movw	r22, r8
    9926:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    992a:	a5 01       	movw	r20, r10
    992c:	94 01       	movw	r18, r8
    992e:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9932:	a5 01       	movw	r20, r10
    9934:	94 01       	movw	r18, r8
    9936:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    993a:	6b 01       	movw	r12, r22
    993c:	7c 01       	movw	r14, r24
    993e:	23 e8       	ldi	r18, 0x83	; 131
    9940:	30 ec       	ldi	r19, 0xC0	; 192
    9942:	4a e8       	ldi	r20, 0x8A	; 138
    9944:	5f e3       	ldi	r21, 0x3F	; 63
    9946:	c5 01       	movw	r24, r10
    9948:	b4 01       	movw	r22, r8
    994a:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    994e:	a5 01       	movw	r20, r10
    9950:	94 01       	movw	r18, r8
    9952:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9956:	9b 01       	movw	r18, r22
    9958:	ac 01       	movw	r20, r24
    995a:	c7 01       	movw	r24, r14
    995c:	b6 01       	movw	r22, r12
    995e:	6d d7       	rcall	.+3802   	; 0xa83a <__subsf3>
    9960:	6b 01       	movw	r12, r22
    9962:	7c 01       	movw	r14, r24
    9964:	2c ee       	ldi	r18, 0xEC	; 236
    9966:	31 e5       	ldi	r19, 0x51	; 81
    9968:	44 e6       	ldi	r20, 0x64	; 100
    996a:	51 e4       	ldi	r21, 0x41	; 65
    996c:	c5 01       	movw	r24, r10
    996e:	b4 01       	movw	r22, r8
    9970:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9974:	9b 01       	movw	r18, r22
    9976:	ac 01       	movw	r20, r24
    9978:	c7 01       	movw	r24, r14
    997a:	b6 01       	movw	r22, r12
    997c:	5f d7       	rcall	.+3774   	; 0xa83c <__addsf3>
    997e:	23 ec       	ldi	r18, 0xC3	; 195
    9980:	35 ef       	ldi	r19, 0xF5	; 245
    9982:	43 e2       	ldi	r20, 0x23	; 35
    9984:	52 e4       	ldi	r21, 0x42	; 66
    9986:	59 d7       	rcall	.+3762   	; 0xa83a <__subsf3>
    9988:	6b 01       	movw	r12, r22
    998a:	7c 01       	movw	r14, r24
    998c:	be 01       	movw	r22, r28
    998e:	dd 0f       	add	r29, r29
    9990:	88 0b       	sbc	r24, r24
    9992:	99 0b       	sbc	r25, r25
    9994:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    9998:	9b 01       	movw	r18, r22
    999a:	ac 01       	movw	r20, r24
    999c:	c7 01       	movw	r24, r14
    999e:	b6 01       	movw	r22, r12
    99a0:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    99a4:	2a c0       	rjmp	.+84     	; 0x99fa <corectTrv+0x19f0>
		}

		if (Superheat > SSet + 4)
    99a6:	20 e0       	ldi	r18, 0x00	; 0
    99a8:	30 e0       	ldi	r19, 0x00	; 0
    99aa:	40 e3       	ldi	r20, 0x30	; 48
    99ac:	51 e4       	ldi	r21, 0x41	; 65
    99ae:	c7 01       	movw	r24, r14
    99b0:	b6 01       	movw	r22, r12
    99b2:	0e 94 d1 55 	call	0xaba2	; 0xaba2 <__gesf2>
    99b6:	18 16       	cp	r1, r24
    99b8:	ec f4       	brge	.+58     	; 0x99f4 <corectTrv+0x19ea>
		{
			return 25* k;
    99ba:	89 e1       	ldi	r24, 0x19	; 25
    99bc:	8c 9f       	mul	r24, r28
    99be:	b0 01       	movw	r22, r0
    99c0:	8d 9f       	mul	r24, r29
    99c2:	70 0d       	add	r23, r0
    99c4:	11 24       	eor	r1, r1
    99c6:	07 2e       	mov	r0, r23
    99c8:	00 0c       	add	r0, r0
    99ca:	88 0b       	sbc	r24, r24
    99cc:	99 0b       	sbc	r25, r25
    99ce:	0e 94 21 55 	call	0xaa42	; 0xaa42 <__floatsisf>
    99d2:	13 c0       	rjmp	.+38     	; 0x99fa <corectTrv+0x19f0>
		}
	}

	
	return 0;
    99d4:	60 e0       	ldi	r22, 0x00	; 0
    99d6:	70 e0       	ldi	r23, 0x00	; 0
    99d8:	cb 01       	movw	r24, r22
    99da:	0f c0       	rjmp	.+30     	; 0x99fa <corectTrv+0x19f0>
    99dc:	60 e0       	ldi	r22, 0x00	; 0
    99de:	70 e0       	ldi	r23, 0x00	; 0
    99e0:	cb 01       	movw	r24, r22
    99e2:	0b c0       	rjmp	.+22     	; 0x99fa <corectTrv+0x19f0>
    99e4:	60 e0       	ldi	r22, 0x00	; 0
    99e6:	70 e0       	ldi	r23, 0x00	; 0
    99e8:	cb 01       	movw	r24, r22
    99ea:	07 c0       	rjmp	.+14     	; 0x99fa <corectTrv+0x19f0>
    99ec:	60 e0       	ldi	r22, 0x00	; 0
    99ee:	70 e0       	ldi	r23, 0x00	; 0
    99f0:	cb 01       	movw	r24, r22
    99f2:	03 c0       	rjmp	.+6      	; 0x99fa <corectTrv+0x19f0>
    99f4:	60 e0       	ldi	r22, 0x00	; 0
    99f6:	70 e0       	ldi	r23, 0x00	; 0
    99f8:	cb 01       	movw	r24, r22

}
    99fa:	df 91       	pop	r29
    99fc:	cf 91       	pop	r28
    99fe:	ff 90       	pop	r15
    9a00:	ef 90       	pop	r14
    9a02:	df 90       	pop	r13
    9a04:	cf 90       	pop	r12
    9a06:	bf 90       	pop	r11
    9a08:	af 90       	pop	r10
    9a0a:	9f 90       	pop	r9
    9a0c:	8f 90       	pop	r8
    9a0e:	7f 90       	pop	r7
    9a10:	6f 90       	pop	r6
    9a12:	5f 90       	pop	r5
    9a14:	4f 90       	pop	r4
    9a16:	08 95       	ret

00009a18 <ReadSensors>:
float ConvertToLowPress(uint16_t ADC_value){
	return (ADC_value - Low_Limit_LP) * LP_max/ (Hi_Limit_LP - Low_Limit_LP) ;
}

void ReadSensors(xCompressor *comp)  
{ 
    9a18:	ef 92       	push	r14
    9a1a:	ff 92       	push	r15
    9a1c:	0f 93       	push	r16
    9a1e:	1f 93       	push	r17
    9a20:	cf 93       	push	r28
    9a22:	df 93       	push	r29
    9a24:	7c 01       	movw	r14, r24
 uint16_t temp = 0;
 const uint8_t samples = 10;        // determines the number of samples taken
 unsigned int sum;               // holds the summated samples
 uint8_t i;
 //static TickType_t countTrvTime=0;
 setAnalogMode(MODE_10_BIT);
    9a26:	80 e0       	ldi	r24, 0x00	; 0
    9a28:	0e 94 98 07 	call	0xf30	; 0xf30 <setAnalogMode>
    9a2c:	ca e0       	ldi	r28, 0x0A	; 10
 i = samples;                     // clean up for next channel
 sum = 0;
    9a2e:	00 e0       	ldi	r16, 0x00	; 0
    9a30:	10 e0       	ldi	r17, 0x00	; 0
 
 do
 {
	 startAnalogConversion(1, 0);
    9a32:	60 e0       	ldi	r22, 0x00	; 0
    9a34:	81 e0       	ldi	r24, 0x01	; 1
    9a36:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
	 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9a3a:	01 c0       	rjmp	.+2      	; 0x9a3e <ReadSensors+0x26>
    9a3c:	00 00       	nop
    9a3e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9a42:	81 11       	cpse	r24, r1
    9a44:	fb cf       	rjmp	.-10     	; 0x9a3c <ReadSensors+0x24>
	 sum += 	analogConversionResult();
    9a46:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9a4a:	08 0f       	add	r16, r24
    9a4c:	19 1f       	adc	r17, r25
    9a4e:	c1 50       	subi	r28, 0x01	; 1
	 //temp =analogConversionResult();
 } while (--i);
    9a50:	81 f7       	brne	.-32     	; 0x9a32 <ReadSensors+0x1a>
 temp = (unsigned int) (sum / samples);
 comp->Bac_Temp = ConvertToTemp(temp);
    9a52:	98 01       	movw	r18, r16
    9a54:	ad ec       	ldi	r26, 0xCD	; 205
    9a56:	bc ec       	ldi	r27, 0xCC	; 204
    9a58:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    9a5c:	96 95       	lsr	r25
    9a5e:	87 95       	ror	r24
    9a60:	96 95       	lsr	r25
    9a62:	87 95       	ror	r24
    9a64:	96 95       	lsr	r25
    9a66:	87 95       	ror	r24
    9a68:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <ConvertToTemp>
    9a6c:	f7 01       	movw	r30, r14
    9a6e:	66 8b       	std	Z+22, r22	; 0x16
    9a70:	77 8b       	std	Z+23, r23	; 0x17
    9a72:	80 8f       	std	Z+24, r24	; 0x18
    9a74:	91 8f       	std	Z+25, r25	; 0x19
 //read DHW
 PORTL &= ~ (1 << PL2);//A0
    9a76:	eb e0       	ldi	r30, 0x0B	; 11
    9a78:	f1 e0       	ldi	r31, 0x01	; 1
    9a7a:	80 81       	ld	r24, Z
    9a7c:	8b 7f       	andi	r24, 0xFB	; 251
    9a7e:	80 83       	st	Z, r24
 PORTL &= ~ (1 << PL1);//A1
    9a80:	80 81       	ld	r24, Z
    9a82:	8d 7f       	andi	r24, 0xFD	; 253
    9a84:	80 83       	st	Z, r24
 PORTL |=   (1 << PL0);//A2
    9a86:	80 81       	ld	r24, Z
    9a88:	81 60       	ori	r24, 0x01	; 1
    9a8a:	80 83       	st	Z, r24
    9a8c:	ca e0       	ldi	r28, 0x0A	; 10
 i = samples;
 sum = 0;
    9a8e:	00 e0       	ldi	r16, 0x00	; 0
    9a90:	10 e0       	ldi	r17, 0x00	; 0

 do
 {
	 startAnalogConversion(0, 0);
    9a92:	60 e0       	ldi	r22, 0x00	; 0
    9a94:	80 e0       	ldi	r24, 0x00	; 0
    9a96:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
	 while( analogIsConverting())_delay_us(25);// portYIELD();
    9a9a:	01 c0       	rjmp	.+2      	; 0x9a9e <ReadSensors+0x86>
    9a9c:	00 00       	nop
    9a9e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9aa2:	81 11       	cpse	r24, r1
    9aa4:	fb cf       	rjmp	.-10     	; 0x9a9c <ReadSensors+0x84>
	 sum += 	analogConversionResult();
    9aa6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9aaa:	08 0f       	add	r16, r24
    9aac:	19 1f       	adc	r17, r25
    9aae:	c1 50       	subi	r28, 0x01	; 1
 } while (--i);
    9ab0:	81 f7       	brne	.-32     	; 0x9a92 <ReadSensors+0x7a>
 //temp = analogConversionResult();
 temp = (unsigned int) (sum / samples);
 comp->Dhw_Temp = ConvertToTemp(temp);
    9ab2:	98 01       	movw	r18, r16
    9ab4:	ad ec       	ldi	r26, 0xCD	; 205
    9ab6:	bc ec       	ldi	r27, 0xCC	; 204
    9ab8:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    9abc:	96 95       	lsr	r25
    9abe:	87 95       	ror	r24
    9ac0:	96 95       	lsr	r25
    9ac2:	87 95       	ror	r24
    9ac4:	96 95       	lsr	r25
    9ac6:	87 95       	ror	r24
    9ac8:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <ConvertToTemp>
    9acc:	f7 01       	movw	r30, r14
    9ace:	62 8b       	std	Z+18, r22	; 0x12
    9ad0:	73 8b       	std	Z+19, r23	; 0x13
    9ad2:	84 8b       	std	Z+20, r24	; 0x14
    9ad4:	95 8b       	std	Z+21, r25	; 0x15
  //------------------------------------------
  
  //read tempout
  PORTL |=   (1 << PL2);//A0
    9ad6:	eb e0       	ldi	r30, 0x0B	; 11
    9ad8:	f1 e0       	ldi	r31, 0x01	; 1
    9ada:	80 81       	ld	r24, Z
    9adc:	84 60       	ori	r24, 0x04	; 4
    9ade:	80 83       	st	Z, r24
  PORTL &= ~ (1 << PL1);//A1
    9ae0:	80 81       	ld	r24, Z
    9ae2:	8d 7f       	andi	r24, 0xFD	; 253
    9ae4:	80 83       	st	Z, r24
  PORTL |=   (1 << PL0);//A2
    9ae6:	80 81       	ld	r24, Z
    9ae8:	81 60       	ori	r24, 0x01	; 1
    9aea:	80 83       	st	Z, r24
    9aec:	ca e0       	ldi	r28, 0x0A	; 10
  i = samples;
  sum = 0;
    9aee:	00 e0       	ldi	r16, 0x00	; 0
    9af0:	10 e0       	ldi	r17, 0x00	; 0

  do
  {
	  startAnalogConversion(0, 0);
    9af2:	60 e0       	ldi	r22, 0x00	; 0
    9af4:	80 e0       	ldi	r24, 0x00	; 0
    9af6:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
	  while( analogIsConverting())_delay_us(25);// portYIELD();
    9afa:	01 c0       	rjmp	.+2      	; 0x9afe <ReadSensors+0xe6>
    9afc:	00 00       	nop
    9afe:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9b02:	81 11       	cpse	r24, r1
    9b04:	fb cf       	rjmp	.-10     	; 0x9afc <ReadSensors+0xe4>
	  sum += 	analogConversionResult();
    9b06:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9b0a:	08 0f       	add	r16, r24
    9b0c:	19 1f       	adc	r17, r25
    9b0e:	c1 50       	subi	r28, 0x01	; 1
  } while (--i);
    9b10:	81 f7       	brne	.-32     	; 0x9af2 <ReadSensors+0xda>
 //temp = analogConversionResult();
  temp = (unsigned int) (sum / samples);
  comp->Temp_Out = ConvertToTemp(temp);
    9b12:	98 01       	movw	r18, r16
    9b14:	ad ec       	ldi	r26, 0xCD	; 205
    9b16:	bc ec       	ldi	r27, 0xCC	; 204
    9b18:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    9b1c:	96 95       	lsr	r25
    9b1e:	87 95       	ror	r24
    9b20:	96 95       	lsr	r25
    9b22:	87 95       	ror	r24
    9b24:	96 95       	lsr	r25
    9b26:	87 95       	ror	r24
    9b28:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <ConvertToTemp>
    9b2c:	f7 01       	movw	r30, r14
    9b2e:	e2 5b       	subi	r30, 0xB2	; 178
    9b30:	ff 4f       	sbci	r31, 0xFF	; 255
    9b32:	60 83       	st	Z, r22
    9b34:	71 83       	std	Z+1, r23	; 0x01
    9b36:	82 83       	std	Z+2, r24	; 0x02
    9b38:	93 83       	std	Z+3, r25	; 0x03
   /*
  */
  //------------------------------------------
 if(comp->Index==1){
    9b3a:	b4 96       	adiw	r30, 0x24	; 36
    9b3c:	80 81       	ld	r24, Z
    9b3e:	91 81       	ldd	r25, Z+1	; 0x01
    9b40:	01 97       	sbiw	r24, 0x01	; 1
    9b42:	09 f0       	breq	.+2      	; 0x9b46 <ReadSensors+0x12e>
    9b44:	9d c1       	rjmp	.+826    	; 0x9e80 <ReadSensors+0x468>
	 
	 //read High_Pressure_1
	 PORTL |=    (1 << PL2);//a0
    9b46:	eb e0       	ldi	r30, 0x0B	; 11
    9b48:	f1 e0       	ldi	r31, 0x01	; 1
    9b4a:	80 81       	ld	r24, Z
    9b4c:	84 60       	ori	r24, 0x04	; 4
    9b4e:	80 83       	st	Z, r24
	 PORTL |=    (1 << PL1);//a1
    9b50:	80 81       	ld	r24, Z
    9b52:	82 60       	ori	r24, 0x02	; 2
    9b54:	80 83       	st	Z, r24
	 PORTL &= ~  (1 << PL0);//a2
    9b56:	80 81       	ld	r24, Z
    9b58:	8e 7f       	andi	r24, 0xFE	; 254
    9b5a:	80 83       	st	Z, r24
    9b5c:	ca e0       	ldi	r28, 0x0A	; 10
	 i = samples;
	 sum = 0;
    9b5e:	00 e0       	ldi	r16, 0x00	; 0
    9b60:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {		     startAnalogConversion(0, 0);
    9b62:	60 e0       	ldi	r22, 0x00	; 0
    9b64:	80 e0       	ldi	r24, 0x00	; 0
    9b66:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() ) _delay_us(25);//portYIELD();
    9b6a:	01 c0       	rjmp	.+2      	; 0x9b6e <ReadSensors+0x156>
    9b6c:	00 00       	nop
    9b6e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9b72:	81 11       	cpse	r24, r1
    9b74:	fb cf       	rjmp	.-10     	; 0x9b6c <ReadSensors+0x154>
		 sum += analogConversionResult();
    9b76:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9b7a:	08 0f       	add	r16, r24
    9b7c:	19 1f       	adc	r17, r25
    9b7e:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9b80:	81 f7       	brne	.-32     	; 0x9b62 <ReadSensors+0x14a>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->High_Press = ConvertToHighPress(temp);
    9b82:	98 01       	movw	r18, r16
    9b84:	ad ec       	ldi	r26, 0xCD	; 205
    9b86:	bc ec       	ldi	r27, 0xCC	; 204
    9b88:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    9b8c:	96 95       	lsr	r25
    9b8e:	87 95       	ror	r24
    9b90:	96 95       	lsr	r25
    9b92:	87 95       	ror	r24
    9b94:	96 95       	lsr	r25
    9b96:	87 95       	ror	r24
    9b98:	bc 01       	movw	r22, r24
    9b9a:	80 e0       	ldi	r24, 0x00	; 0
    9b9c:	90 e0       	ldi	r25, 0x00	; 0
    9b9e:	4f d7       	rcall	.+3742   	; 0xaa3e <__floatunsisf>
    9ba0:	20 e0       	ldi	r18, 0x00	; 0
    9ba2:	30 e0       	ldi	r19, 0x00	; 0
    9ba4:	4c ec       	ldi	r20, 0xCC	; 204
    9ba6:	52 e4       	ldi	r21, 0x42	; 66
    9ba8:	48 d6       	rcall	.+3216   	; 0xa83a <__subsf3>
    9baa:	20 e0       	ldi	r18, 0x00	; 0
    9bac:	30 e0       	ldi	r19, 0x00	; 0
    9bae:	48 e0       	ldi	r20, 0x08	; 8
    9bb0:	52 e4       	ldi	r21, 0x42	; 66
    9bb2:	0e 94 1a 56 	call	0xac34	; 0xac34 <__mulsf3>
    9bb6:	20 e0       	ldi	r18, 0x00	; 0
    9bb8:	30 e0       	ldi	r19, 0x00	; 0
    9bba:	4d e4       	ldi	r20, 0x4D	; 77
    9bbc:	54 e4       	ldi	r21, 0x44	; 68
    9bbe:	a6 d6       	rcall	.+3404   	; 0xa90c <__divsf3>
    9bc0:	f7 01       	movw	r30, r14
    9bc2:	62 8f       	std	Z+26, r22	; 0x1a
    9bc4:	73 8f       	std	Z+27, r23	; 0x1b
    9bc6:	84 8f       	std	Z+28, r24	; 0x1c
    9bc8:	95 8f       	std	Z+29, r25	; 0x1d
	 //read Low_Pressure_1
	 PORTL &= ~   (1 << PL2);
    9bca:	eb e0       	ldi	r30, 0x0B	; 11
    9bcc:	f1 e0       	ldi	r31, 0x01	; 1
    9bce:	80 81       	ld	r24, Z
    9bd0:	8b 7f       	andi	r24, 0xFB	; 251
    9bd2:	80 83       	st	Z, r24
	 PORTL &= ~   (1 << PL1);
    9bd4:	80 81       	ld	r24, Z
    9bd6:	8d 7f       	andi	r24, 0xFD	; 253
    9bd8:	80 83       	st	Z, r24
	 PORTL &= ~   (1 << PL0);
    9bda:	80 81       	ld	r24, Z
    9bdc:	8e 7f       	andi	r24, 0xFE	; 254
    9bde:	80 83       	st	Z, r24
    9be0:	ca e0       	ldi	r28, 0x0A	; 10
	 i = samples;
	 sum = 0;
    9be2:	00 e0       	ldi	r16, 0x00	; 0
    9be4:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(0, 0);
    9be6:	60 e0       	ldi	r22, 0x00	; 0
    9be8:	80 e0       	ldi	r24, 0x00	; 0
    9bea:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9bee:	01 c0       	rjmp	.+2      	; 0x9bf2 <ReadSensors+0x1da>
    9bf0:	00 00       	nop
    9bf2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9bf6:	81 11       	cpse	r24, r1
    9bf8:	fb cf       	rjmp	.-10     	; 0x9bf0 <ReadSensors+0x1d8>
		 sum += analogConversionResult();
    9bfa:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9bfe:	08 0f       	add	r16, r24
    9c00:	19 1f       	adc	r17, r25
    9c02:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9c04:	81 f7       	brne	.-32     	; 0x9be6 <ReadSensors+0x1ce>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Low_Press = ConvertToLowPress( temp );
    9c06:	98 01       	movw	r18, r16
    9c08:	ad ec       	ldi	r26, 0xCD	; 205
    9c0a:	bc ec       	ldi	r27, 0xCC	; 204
    9c0c:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    9c10:	96 95       	lsr	r25
    9c12:	87 95       	ror	r24
    9c14:	96 95       	lsr	r25
    9c16:	87 95       	ror	r24
    9c18:	96 95       	lsr	r25
    9c1a:	87 95       	ror	r24
    9c1c:	bc 01       	movw	r22, r24
    9c1e:	80 e0       	ldi	r24, 0x00	; 0
    9c20:	90 e0       	ldi	r25, 0x00	; 0
    9c22:	0d d7       	rcall	.+3610   	; 0xaa3e <__floatunsisf>
    9c24:	20 e0       	ldi	r18, 0x00	; 0
    9c26:	30 e0       	ldi	r19, 0x00	; 0
    9c28:	4c e5       	ldi	r20, 0x5C	; 92
    9c2a:	52 e4       	ldi	r21, 0x42	; 66
    9c2c:	06 d6       	rcall	.+3084   	; 0xa83a <__subsf3>
    9c2e:	20 e0       	ldi	r18, 0x00	; 0
    9c30:	30 e0       	ldi	r19, 0x00	; 0
    9c32:	40 e9       	ldi	r20, 0x90	; 144
    9c34:	51 e4       	ldi	r21, 0x41	; 65
    9c36:	fe d7       	rcall	.+4092   	; 0xac34 <__mulsf3>
    9c38:	20 e0       	ldi	r18, 0x00	; 0
    9c3a:	30 ec       	ldi	r19, 0xC0	; 192
    9c3c:	48 e5       	ldi	r20, 0x58	; 88
    9c3e:	54 e4       	ldi	r21, 0x44	; 68
    9c40:	65 d6       	rcall	.+3274   	; 0xa90c <__divsf3>
    9c42:	f7 01       	movw	r30, r14
    9c44:	66 8f       	std	Z+30, r22	; 0x1e
    9c46:	77 8f       	std	Z+31, r23	; 0x1f
    9c48:	80 a3       	std	Z+32, r24	; 0x20
    9c4a:	91 a3       	std	Z+33, r25	; 0x21
    9c4c:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9c4e:	00 e0       	ldi	r16, 0x00	; 0
    9c50:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(9, 0);
    9c52:	60 e0       	ldi	r22, 0x00	; 0
    9c54:	89 e0       	ldi	r24, 0x09	; 9
    9c56:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9c5a:	01 c0       	rjmp	.+2      	; 0x9c5e <ReadSensors+0x246>
    9c5c:	00 00       	nop
    9c5e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9c62:	81 11       	cpse	r24, r1
    9c64:	fb cf       	rjmp	.-10     	; 0x9c5c <ReadSensors+0x244>
		 sum += analogConversionResult();
    9c66:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9c6a:	08 0f       	add	r16, r24
    9c6c:	19 1f       	adc	r17, r25
    9c6e:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9c70:	81 f7       	brne	.-32     	; 0x9c52 <ReadSensors+0x23a>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Heat_Out = ConvertToTemp( temp );
    9c72:	98 01       	movw	r18, r16
    9c74:	ad ec       	ldi	r26, 0xCD	; 205
    9c76:	bc ec       	ldi	r27, 0xCC	; 204
    9c78:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    9c7c:	96 95       	lsr	r25
    9c7e:	87 95       	ror	r24
    9c80:	96 95       	lsr	r25
    9c82:	87 95       	ror	r24
    9c84:	96 95       	lsr	r25
    9c86:	87 95       	ror	r24
    9c88:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <ConvertToTemp>
    9c8c:	f7 01       	movw	r30, r14
    9c8e:	62 a7       	std	Z+42, r22	; 0x2a
    9c90:	73 a7       	std	Z+43, r23	; 0x2b
    9c92:	84 a7       	std	Z+44, r24	; 0x2c
    9c94:	95 a7       	std	Z+45, r25	; 0x2d
    9c96:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9c98:	00 e0       	ldi	r16, 0x00	; 0
    9c9a:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(10, 0);
    9c9c:	60 e0       	ldi	r22, 0x00	; 0
    9c9e:	8a e0       	ldi	r24, 0x0A	; 10
    9ca0:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9ca4:	01 c0       	rjmp	.+2      	; 0x9ca8 <ReadSensors+0x290>
    9ca6:	00 00       	nop
    9ca8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9cac:	81 11       	cpse	r24, r1
    9cae:	fb cf       	rjmp	.-10     	; 0x9ca6 <ReadSensors+0x28e>
		 sum += analogConversionResult();
    9cb0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9cb4:	08 0f       	add	r16, r24
    9cb6:	19 1f       	adc	r17, r25
    9cb8:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9cba:	81 f7       	brne	.-32     	; 0x9c9c <ReadSensors+0x284>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Heat_In = ConvertToTemp( temp );
    9cbc:	98 01       	movw	r18, r16
    9cbe:	ad ec       	ldi	r26, 0xCD	; 205
    9cc0:	bc ec       	ldi	r27, 0xCC	; 204
    9cc2:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    9cc6:	96 95       	lsr	r25
    9cc8:	87 95       	ror	r24
    9cca:	96 95       	lsr	r25
    9ccc:	87 95       	ror	r24
    9cce:	96 95       	lsr	r25
    9cd0:	87 95       	ror	r24
    9cd2:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <ConvertToTemp>
    9cd6:	f7 01       	movw	r30, r14
    9cd8:	66 a7       	std	Z+46, r22	; 0x2e
    9cda:	77 a7       	std	Z+47, r23	; 0x2f
    9cdc:	80 ab       	std	Z+48, r24	; 0x30
    9cde:	91 ab       	std	Z+49, r25	; 0x31
    9ce0:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9ce2:	00 e0       	ldi	r16, 0x00	; 0
    9ce4:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(11, 0);
    9ce6:	60 e0       	ldi	r22, 0x00	; 0
    9ce8:	8b e0       	ldi	r24, 0x0B	; 11
    9cea:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9cee:	01 c0       	rjmp	.+2      	; 0x9cf2 <ReadSensors+0x2da>
    9cf0:	00 00       	nop
    9cf2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9cf6:	81 11       	cpse	r24, r1
    9cf8:	fb cf       	rjmp	.-10     	; 0x9cf0 <ReadSensors+0x2d8>
		 sum += analogConversionResult();
    9cfa:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9cfe:	08 0f       	add	r16, r24
    9d00:	19 1f       	adc	r17, r25
    9d02:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9d04:	81 f7       	brne	.-32     	; 0x9ce6 <ReadSensors+0x2ce>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Src_In = ConvertToTemp( temp );
    9d06:	98 01       	movw	r18, r16
    9d08:	ad ec       	ldi	r26, 0xCD	; 205
    9d0a:	bc ec       	ldi	r27, 0xCC	; 204
    9d0c:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    9d10:	96 95       	lsr	r25
    9d12:	87 95       	ror	r24
    9d14:	96 95       	lsr	r25
    9d16:	87 95       	ror	r24
    9d18:	96 95       	lsr	r25
    9d1a:	87 95       	ror	r24
    9d1c:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <ConvertToTemp>
    9d20:	f7 01       	movw	r30, r14
    9d22:	62 ab       	std	Z+50, r22	; 0x32
    9d24:	73 ab       	std	Z+51, r23	; 0x33
    9d26:	84 ab       	std	Z+52, r24	; 0x34
    9d28:	95 ab       	std	Z+53, r25	; 0x35
    9d2a:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9d2c:	00 e0       	ldi	r16, 0x00	; 0
    9d2e:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(12, 0);
    9d30:	60 e0       	ldi	r22, 0x00	; 0
    9d32:	8c e0       	ldi	r24, 0x0C	; 12
    9d34:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);
    9d38:	01 c0       	rjmp	.+2      	; 0x9d3c <ReadSensors+0x324>
    9d3a:	00 00       	nop
    9d3c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9d40:	81 11       	cpse	r24, r1
    9d42:	fb cf       	rjmp	.-10     	; 0x9d3a <ReadSensors+0x322>
		 sum += analogConversionResult();
    9d44:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9d48:	08 0f       	add	r16, r24
    9d4a:	19 1f       	adc	r17, r25
    9d4c:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9d4e:	81 f7       	brne	.-32     	; 0x9d30 <ReadSensors+0x318>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Src_Out = ConvertToTemp( temp );
    9d50:	98 01       	movw	r18, r16
    9d52:	ad ec       	ldi	r26, 0xCD	; 205
    9d54:	bc ec       	ldi	r27, 0xCC	; 204
    9d56:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    9d5a:	96 95       	lsr	r25
    9d5c:	87 95       	ror	r24
    9d5e:	96 95       	lsr	r25
    9d60:	87 95       	ror	r24
    9d62:	96 95       	lsr	r25
    9d64:	87 95       	ror	r24
    9d66:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <ConvertToTemp>
    9d6a:	f7 01       	movw	r30, r14
    9d6c:	66 ab       	std	Z+54, r22	; 0x36
    9d6e:	77 ab       	std	Z+55, r23	; 0x37
    9d70:	80 af       	std	Z+56, r24	; 0x38
    9d72:	91 af       	std	Z+57, r25	; 0x39
    9d74:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9d76:	00 e0       	ldi	r16, 0x00	; 0
    9d78:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(13, 0);
    9d7a:	60 e0       	ldi	r22, 0x00	; 0
    9d7c:	8d e0       	ldi	r24, 0x0D	; 13
    9d7e:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9d82:	01 c0       	rjmp	.+2      	; 0x9d86 <ReadSensors+0x36e>
    9d84:	00 00       	nop
    9d86:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9d8a:	81 11       	cpse	r24, r1
    9d8c:	fb cf       	rjmp	.-10     	; 0x9d84 <ReadSensors+0x36c>
		 sum += analogConversionResult();
    9d8e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9d92:	08 0f       	add	r16, r24
    9d94:	19 1f       	adc	r17, r25
    9d96:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9d98:	81 f7       	brne	.-32     	; 0x9d7a <ReadSensors+0x362>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Ex_Comp = ConvertToTemp( temp );
    9d9a:	98 01       	movw	r18, r16
    9d9c:	ad ec       	ldi	r26, 0xCD	; 205
    9d9e:	bc ec       	ldi	r27, 0xCC	; 204
    9da0:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    9da4:	96 95       	lsr	r25
    9da6:	87 95       	ror	r24
    9da8:	96 95       	lsr	r25
    9daa:	87 95       	ror	r24
    9dac:	96 95       	lsr	r25
    9dae:	87 95       	ror	r24
    9db0:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <ConvertToTemp>
    9db4:	f7 01       	movw	r30, r14
    9db6:	62 af       	std	Z+58, r22	; 0x3a
    9db8:	73 af       	std	Z+59, r23	; 0x3b
    9dba:	84 af       	std	Z+60, r24	; 0x3c
    9dbc:	95 af       	std	Z+61, r25	; 0x3d
    9dbe:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9dc0:	00 e0       	ldi	r16, 0x00	; 0
    9dc2:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(14, 0);
    9dc4:	60 e0       	ldi	r22, 0x00	; 0
    9dc6:	8e e0       	ldi	r24, 0x0E	; 14
    9dc8:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9dcc:	01 c0       	rjmp	.+2      	; 0x9dd0 <ReadSensors+0x3b8>
    9dce:	00 00       	nop
    9dd0:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9dd4:	81 11       	cpse	r24, r1
    9dd6:	fb cf       	rjmp	.-10     	; 0x9dce <ReadSensors+0x3b6>
		 sum += analogConversionResult();
    9dd8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9ddc:	08 0f       	add	r16, r24
    9dde:	19 1f       	adc	r17, r25
    9de0:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9de2:	81 f7       	brne	.-32     	; 0x9dc4 <ReadSensors+0x3ac>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Suc_Comp = ConvertToTemp( temp );
    9de4:	98 01       	movw	r18, r16
    9de6:	ad ec       	ldi	r26, 0xCD	; 205
    9de8:	bc ec       	ldi	r27, 0xCC	; 204
    9dea:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    9dee:	96 95       	lsr	r25
    9df0:	87 95       	ror	r24
    9df2:	96 95       	lsr	r25
    9df4:	87 95       	ror	r24
    9df6:	96 95       	lsr	r25
    9df8:	87 95       	ror	r24
    9dfa:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <ConvertToTemp>
    9dfe:	f7 01       	movw	r30, r14
    9e00:	fe 96       	adiw	r30, 0x3e	; 62
    9e02:	60 83       	st	Z, r22
    9e04:	71 83       	std	Z+1, r23	; 0x01
    9e06:	82 83       	std	Z+2, r24	; 0x02
    9e08:	93 83       	std	Z+3, r25	; 0x03
    9e0a:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9e0c:	00 e0       	ldi	r16, 0x00	; 0
    9e0e:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(15, 0);
    9e10:	60 e0       	ldi	r22, 0x00	; 0
    9e12:	8f e0       	ldi	r24, 0x0F	; 15
    9e14:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9e18:	01 c0       	rjmp	.+2      	; 0x9e1c <ReadSensors+0x404>
    9e1a:	00 00       	nop
    9e1c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9e20:	81 11       	cpse	r24, r1
    9e22:	fb cf       	rjmp	.-10     	; 0x9e1a <ReadSensors+0x402>
		 sum += analogConversionResult();
    9e24:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9e28:	08 0f       	add	r16, r24
    9e2a:	19 1f       	adc	r17, r25
    9e2c:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9e2e:	81 f7       	brne	.-32     	; 0x9e10 <ReadSensors+0x3f8>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Cond_Temp = ConvertToTemp( temp )	;
    9e30:	98 01       	movw	r18, r16
    9e32:	ad ec       	ldi	r26, 0xCD	; 205
    9e34:	bc ec       	ldi	r27, 0xCC	; 204
    9e36:	0e 94 63 5a 	call	0xb4c6	; 0xb4c6 <__umulhisi3>
    9e3a:	96 95       	lsr	r25
    9e3c:	87 95       	ror	r24
    9e3e:	96 95       	lsr	r25
    9e40:	87 95       	ror	r24
    9e42:	96 95       	lsr	r25
    9e44:	87 95       	ror	r24
    9e46:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <ConvertToTemp>
    9e4a:	f7 01       	movw	r30, r14
    9e4c:	ee 5b       	subi	r30, 0xBE	; 190
    9e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    9e50:	60 83       	st	Z, r22
    9e52:	71 83       	std	Z+1, r23	; 0x01
    9e54:	82 83       	std	Z+2, r24	; 0x02
    9e56:	93 83       	std	Z+3, r25	; 0x03
	 //--------------------------------------------------------------
	 comp->SuperHeat=ReadSuperHeat (comp);
    9e58:	c7 01       	movw	r24, r14
    9e5a:	0e 94 32 3f 	call	0x7e64	; 0x7e64 <ReadSuperHeat>
    9e5e:	f7 01       	movw	r30, r14
    9e60:	ea 5b       	subi	r30, 0xBA	; 186
    9e62:	ff 4f       	sbci	r31, 0xFF	; 255
    9e64:	60 83       	st	Z, r22
    9e66:	71 83       	std	Z+1, r23	; 0x01
    9e68:	82 83       	std	Z+2, r24	; 0x02
    9e6a:	93 83       	std	Z+3, r25	; 0x03
	 comp->SuperCool=ReadSuperCool (comp);				
    9e6c:	c7 01       	movw	r24, r14
    9e6e:	0e 94 9c 3f 	call	0x7f38	; 0x7f38 <ReadSuperCool>
    9e72:	f7 01       	movw	r30, r14
    9e74:	e6 5b       	subi	r30, 0xB6	; 182
    9e76:	ff 4f       	sbci	r31, 0xFF	; 255
    9e78:	60 83       	st	Z, r22
    9e7a:	71 83       	std	Z+1, r23	; 0x01
    9e7c:	82 83       	std	Z+2, r24	; 0x02
    9e7e:	93 83       	std	Z+3, r25	; 0x03
						}
						
    if(comp->Index==2) 
    9e80:	f7 01       	movw	r30, r14
    9e82:	ee 58       	subi	r30, 0x8E	; 142
    9e84:	ff 4f       	sbci	r31, 0xFF	; 255
    9e86:	80 81       	ld	r24, Z
    9e88:	91 81       	ldd	r25, Z+1	; 0x01
    9e8a:	02 97       	sbiw	r24, 0x02	; 2
    9e8c:	09 f0       	breq	.+2      	; 0x9e90 <ReadSensors+0x478>
    9e8e:	07 c1       	rjmp	.+526    	; 0xa09e <ReadSensors+0x686>
	{
					 //read High_Pressure_1
					 PORTL |=    (1 << PL2);//a0
    9e90:	eb e0       	ldi	r30, 0x0B	; 11
    9e92:	f1 e0       	ldi	r31, 0x01	; 1
    9e94:	80 81       	ld	r24, Z
    9e96:	84 60       	ori	r24, 0x04	; 4
    9e98:	80 83       	st	Z, r24
					 PORTL &= ~  (1 << PL1);//a1
    9e9a:	80 81       	ld	r24, Z
    9e9c:	8d 7f       	andi	r24, 0xFD	; 253
    9e9e:	80 83       	st	Z, r24
					 PORTL &= ~  (1 << PL0);//a2
    9ea0:	80 81       	ld	r24, Z
    9ea2:	8e 7f       	andi	r24, 0xFE	; 254
    9ea4:	80 83       	st	Z, r24
					 startAnalogConversion(0, 0);
    9ea6:	60 e0       	ldi	r22, 0x00	; 0
    9ea8:	80 e0       	ldi	r24, 0x00	; 0
    9eaa:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					 while( analogIsConverting() )
    9eae:	01 c0       	rjmp	.+2      	; 0x9eb2 <ReadSensors+0x49a>
    9eb0:	00 00       	nop
    9eb2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9eb6:	81 11       	cpse	r24, r1
					 _delay_us(25);//portYIELD();
					 temp = analogConversionResult();
    9eb8:	fb cf       	rjmp	.-10     	; 0x9eb0 <ReadSensors+0x498>
    9eba:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					 comp->High_Press = ConvertToHighPress(temp);
    9ebe:	bc 01       	movw	r22, r24
    9ec0:	80 e0       	ldi	r24, 0x00	; 0
    9ec2:	90 e0       	ldi	r25, 0x00	; 0
    9ec4:	bc d5       	rcall	.+2936   	; 0xaa3e <__floatunsisf>
    9ec6:	20 e0       	ldi	r18, 0x00	; 0
    9ec8:	30 e0       	ldi	r19, 0x00	; 0
    9eca:	4c ec       	ldi	r20, 0xCC	; 204
    9ecc:	52 e4       	ldi	r21, 0x42	; 66
    9ece:	b5 d4       	rcall	.+2410   	; 0xa83a <__subsf3>
    9ed0:	20 e0       	ldi	r18, 0x00	; 0
    9ed2:	30 e0       	ldi	r19, 0x00	; 0
    9ed4:	48 e0       	ldi	r20, 0x08	; 8
    9ed6:	52 e4       	ldi	r21, 0x42	; 66
    9ed8:	ad d6       	rcall	.+3418   	; 0xac34 <__mulsf3>
    9eda:	20 e0       	ldi	r18, 0x00	; 0
    9edc:	30 e0       	ldi	r19, 0x00	; 0
    9ede:	4d e4       	ldi	r20, 0x4D	; 77
    9ee0:	54 e4       	ldi	r21, 0x44	; 68
    9ee2:	14 d5       	rcall	.+2600   	; 0xa90c <__divsf3>
    9ee4:	f7 01       	movw	r30, r14
    9ee6:	62 8f       	std	Z+26, r22	; 0x1a
    9ee8:	73 8f       	std	Z+27, r23	; 0x1b
    9eea:	84 8f       	std	Z+28, r24	; 0x1c
    9eec:	95 8f       	std	Z+29, r25	; 0x1d
					 //read Low_Pressure_1
					 PORTL &= ~   (1 << PL2);
    9eee:	eb e0       	ldi	r30, 0x0B	; 11
    9ef0:	f1 e0       	ldi	r31, 0x01	; 1
    9ef2:	80 81       	ld	r24, Z
    9ef4:	8b 7f       	andi	r24, 0xFB	; 251
    9ef6:	80 83       	st	Z, r24
					 PORTL |=     (1 << PL1);
    9ef8:	80 81       	ld	r24, Z
    9efa:	82 60       	ori	r24, 0x02	; 2
    9efc:	80 83       	st	Z, r24
					 PORTL &= ~   (1 << PL0);
    9efe:	80 81       	ld	r24, Z
    9f00:	8e 7f       	andi	r24, 0xFE	; 254
    9f02:	80 83       	st	Z, r24
					 startAnalogConversion(0, 0);
    9f04:	60 e0       	ldi	r22, 0x00	; 0
    9f06:	80 e0       	ldi	r24, 0x00	; 0
    9f08:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					 while( analogIsConverting() )
    9f0c:	01 c0       	rjmp	.+2      	; 0x9f10 <ReadSensors+0x4f8>
    9f0e:	00 00       	nop
    9f10:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9f14:	81 11       	cpse	r24, r1
					_delay_us(25);// portYIELD();
					 temp = analogConversionResult();
    9f16:	fb cf       	rjmp	.-10     	; 0x9f0e <ReadSensors+0x4f6>
					 comp->Low_Press = ConvertToLowPress( temp );
    9f18:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9f1c:	bc 01       	movw	r22, r24
    9f1e:	80 e0       	ldi	r24, 0x00	; 0
    9f20:	90 e0       	ldi	r25, 0x00	; 0
    9f22:	8d d5       	rcall	.+2842   	; 0xaa3e <__floatunsisf>
    9f24:	20 e0       	ldi	r18, 0x00	; 0
    9f26:	30 e0       	ldi	r19, 0x00	; 0
    9f28:	4c e5       	ldi	r20, 0x5C	; 92
    9f2a:	52 e4       	ldi	r21, 0x42	; 66
    9f2c:	86 d4       	rcall	.+2316   	; 0xa83a <__subsf3>
    9f2e:	20 e0       	ldi	r18, 0x00	; 0
    9f30:	30 e0       	ldi	r19, 0x00	; 0
    9f32:	40 e9       	ldi	r20, 0x90	; 144
    9f34:	51 e4       	ldi	r21, 0x41	; 65
    9f36:	7e d6       	rcall	.+3324   	; 0xac34 <__mulsf3>
    9f38:	20 e0       	ldi	r18, 0x00	; 0
    9f3a:	30 ec       	ldi	r19, 0xC0	; 192
    9f3c:	48 e5       	ldi	r20, 0x58	; 88
    9f3e:	54 e4       	ldi	r21, 0x44	; 68
    9f40:	e5 d4       	rcall	.+2506   	; 0xa90c <__divsf3>
    9f42:	f7 01       	movw	r30, r14
    9f44:	66 8f       	std	Z+30, r22	; 0x1e
    9f46:	77 8f       	std	Z+31, r23	; 0x1f
    9f48:	80 a3       	std	Z+32, r24	; 0x20
    9f4a:	91 a3       	std	Z+33, r25	; 0x21
					startAnalogConversion(2, 0);
    9f4c:	60 e0       	ldi	r22, 0x00	; 0
    9f4e:	82 e0       	ldi	r24, 0x02	; 2
    9f50:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9f54:	01 c0       	rjmp	.+2      	; 0x9f58 <ReadSensors+0x540>
    9f56:	00 00       	nop
    9f58:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9f5c:	81 11       	cpse	r24, r1
    9f5e:	fb cf       	rjmp	.-10     	; 0x9f56 <ReadSensors+0x53e>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9f60:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Heat_Out = ConvertToTemp( temp );
    9f64:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <ConvertToTemp>
    9f68:	f7 01       	movw	r30, r14
    9f6a:	62 a7       	std	Z+42, r22	; 0x2a
    9f6c:	73 a7       	std	Z+43, r23	; 0x2b
    9f6e:	84 a7       	std	Z+44, r24	; 0x2c
    9f70:	95 a7       	std	Z+45, r25	; 0x2d
					//---------------------------------------------------------------
					startAnalogConversion(3, 0);
    9f72:	60 e0       	ldi	r22, 0x00	; 0
    9f74:	83 e0       	ldi	r24, 0x03	; 3
    9f76:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9f7a:	01 c0       	rjmp	.+2      	; 0x9f7e <ReadSensors+0x566>
    9f7c:	00 00       	nop
    9f7e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9f82:	81 11       	cpse	r24, r1
    9f84:	fb cf       	rjmp	.-10     	; 0x9f7c <ReadSensors+0x564>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9f86:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Heat_In = ConvertToTemp( temp );
    9f8a:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <ConvertToTemp>
    9f8e:	f7 01       	movw	r30, r14
    9f90:	66 a7       	std	Z+46, r22	; 0x2e
    9f92:	77 a7       	std	Z+47, r23	; 0x2f
    9f94:	80 ab       	std	Z+48, r24	; 0x30
    9f96:	91 ab       	std	Z+49, r25	; 0x31
					//---------------------------------------------------------------
					startAnalogConversion(4, 0);
    9f98:	60 e0       	ldi	r22, 0x00	; 0
    9f9a:	84 e0       	ldi	r24, 0x04	; 4
    9f9c:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9fa0:	01 c0       	rjmp	.+2      	; 0x9fa4 <ReadSensors+0x58c>
    9fa2:	00 00       	nop
    9fa4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9fa8:	81 11       	cpse	r24, r1
    9faa:	fb cf       	rjmp	.-10     	; 0x9fa2 <ReadSensors+0x58a>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9fac:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Src_In = ConvertToTemp( temp );
    9fb0:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <ConvertToTemp>
    9fb4:	f7 01       	movw	r30, r14
    9fb6:	62 ab       	std	Z+50, r22	; 0x32
    9fb8:	73 ab       	std	Z+51, r23	; 0x33
    9fba:	84 ab       	std	Z+52, r24	; 0x34
    9fbc:	95 ab       	std	Z+53, r25	; 0x35
					//---------------------------------------------------------------
					startAnalogConversion(5, 0);
    9fbe:	60 e0       	ldi	r22, 0x00	; 0
    9fc0:	85 e0       	ldi	r24, 0x05	; 5
    9fc2:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9fc6:	01 c0       	rjmp	.+2      	; 0x9fca <ReadSensors+0x5b2>
    9fc8:	00 00       	nop
    9fca:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9fce:	81 11       	cpse	r24, r1
    9fd0:	fb cf       	rjmp	.-10     	; 0x9fc8 <ReadSensors+0x5b0>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9fd2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Src_Out = ConvertToTemp( temp );
    9fd6:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <ConvertToTemp>
    9fda:	f7 01       	movw	r30, r14
    9fdc:	66 ab       	std	Z+54, r22	; 0x36
    9fde:	77 ab       	std	Z+55, r23	; 0x37
    9fe0:	80 af       	std	Z+56, r24	; 0x38
    9fe2:	91 af       	std	Z+57, r25	; 0x39
					//---------------------------------------------------------------
					startAnalogConversion(6, 0);
    9fe4:	60 e0       	ldi	r22, 0x00	; 0
    9fe6:	86 e0       	ldi	r24, 0x06	; 6
    9fe8:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9fec:	01 c0       	rjmp	.+2      	; 0x9ff0 <ReadSensors+0x5d8>
    9fee:	00 00       	nop
    9ff0:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9ff4:	81 11       	cpse	r24, r1
    9ff6:	fb cf       	rjmp	.-10     	; 0x9fee <ReadSensors+0x5d6>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9ff8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Ex_Comp = ConvertToTemp( temp );
    9ffc:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <ConvertToTemp>
    a000:	f7 01       	movw	r30, r14
    a002:	62 af       	std	Z+58, r22	; 0x3a
    a004:	73 af       	std	Z+59, r23	; 0x3b
    a006:	84 af       	std	Z+60, r24	; 0x3c
    a008:	95 af       	std	Z+61, r25	; 0x3d
					//---------------------------------------------------------------
					startAnalogConversion(7, 0);
    a00a:	60 e0       	ldi	r22, 0x00	; 0
    a00c:	87 e0       	ldi	r24, 0x07	; 7
    a00e:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    a012:	01 c0       	rjmp	.+2      	; 0xa016 <ReadSensors+0x5fe>
    a014:	00 00       	nop
    a016:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    a01a:	81 11       	cpse	r24, r1
    a01c:	fb cf       	rjmp	.-10     	; 0xa014 <ReadSensors+0x5fc>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    a01e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Suc_Comp = ConvertToTemp( temp );
    a022:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <ConvertToTemp>
    a026:	f7 01       	movw	r30, r14
    a028:	fe 96       	adiw	r30, 0x3e	; 62
    a02a:	60 83       	st	Z, r22
    a02c:	71 83       	std	Z+1, r23	; 0x01
    a02e:	82 83       	std	Z+2, r24	; 0x02
    a030:	93 83       	std	Z+3, r25	; 0x03
					//---------------------------------------------------------------
					startAnalogConversion(8, 0);
    a032:	60 e0       	ldi	r22, 0x00	; 0
    a034:	88 e0       	ldi	r24, 0x08	; 8
    a036:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    a03a:	01 c0       	rjmp	.+2      	; 0xa03e <ReadSensors+0x626>
    a03c:	00 00       	nop
    a03e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    a042:	81 11       	cpse	r24, r1
    a044:	fb cf       	rjmp	.-10     	; 0xa03c <ReadSensors+0x624>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    a046:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Cond_Temp = ConvertToTemp( temp )	;
    a04a:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <ConvertToTemp>
    a04e:	f7 01       	movw	r30, r14
    a050:	ee 5b       	subi	r30, 0xBE	; 190
    a052:	ff 4f       	sbci	r31, 0xFF	; 255
    a054:	60 83       	st	Z, r22
    a056:	71 83       	std	Z+1, r23	; 0x01
    a058:	82 83       	std	Z+2, r24	; 0x02
    a05a:	93 83       	std	Z+3, r25	; 0x03
					//--------------------------------------------------------------
					comp->SuperHeat=ReadSuperHeat (comp);
    a05c:	c7 01       	movw	r24, r14
    a05e:	0e 94 32 3f 	call	0x7e64	; 0x7e64 <ReadSuperHeat>
    a062:	f7 01       	movw	r30, r14
    a064:	ea 5b       	subi	r30, 0xBA	; 186
    a066:	ff 4f       	sbci	r31, 0xFF	; 255
    a068:	60 83       	st	Z, r22
    a06a:	71 83       	std	Z+1, r23	; 0x01
    a06c:	82 83       	std	Z+2, r24	; 0x02
    a06e:	93 83       	std	Z+3, r25	; 0x03
					comp->SuperCool=ReadSuperCool (comp);
    a070:	c7 01       	movw	r24, r14
    a072:	0e 94 9c 3f 	call	0x7f38	; 0x7f38 <ReadSuperCool>
    a076:	f7 01       	movw	r30, r14
    a078:	e6 5b       	subi	r30, 0xB6	; 182
    a07a:	ff 4f       	sbci	r31, 0xFF	; 255
    a07c:	60 83       	st	Z, r22
    a07e:	71 83       	std	Z+1, r23	; 0x01
    a080:	82 83       	std	Z+2, r24	; 0x02
					if(comp->checkTrv)comp->trvCorection=corectTrv(comp);
    a082:	93 83       	std	Z+3, r25	; 0x03
    a084:	f7 01       	movw	r30, r14
    a086:	81 81       	ldd	r24, Z+1	; 0x01
    a088:	88 23       	and	r24, r24
    a08a:	49 f0       	breq	.+18     	; 0xa09e <ReadSensors+0x686>
    a08c:	c7 01       	movw	r24, r14
    a08e:	0e 94 05 40 	call	0x800a	; 0x800a <corectTrv>
    a092:	e7 01       	movw	r28, r14
    a094:	c6 59       	subi	r28, 0x96	; 150
    a096:	df 4f       	sbci	r29, 0xFF	; 255
    a098:	a1 d4       	rcall	.+2370   	; 0xa9dc <__fixsfsi>
    a09a:	79 83       	std	Y+1, r23	; 0x01
    a09c:	68 83       	st	Y, r22
					//EEpromData.Volt_B= ADE7758_bvrms();
					//EEpromData.Volt_C= ADE7758_cvrms();
					}

return;	
}
    a09e:	df 91       	pop	r29
    a0a0:	cf 91       	pop	r28
    a0a2:	1f 91       	pop	r17
    a0a4:	0f 91       	pop	r16
    a0a6:	ff 90       	pop	r15
    a0a8:	ef 90       	pop	r14
    a0aa:	08 95       	ret

0000a0ac <ComutateTrv>:
	}
	if(comp->Index==2)
	{
		xTimerDelete(xComutateTrv_2,0);
	}
}
    a0ac:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    a0b0:	fc 01       	movw	r30, r24
    a0b2:	20 81       	ld	r18, Z
    a0b4:	2a 31       	cpi	r18, 0x1A	; 26
    a0b6:	09 f0       	breq	.+2      	; 0xa0ba <ComutateTrv+0xe>
    a0b8:	74 c0       	rjmp	.+232    	; 0xa1a2 <ComutateTrv+0xf6>
    a0ba:	22 b1       	in	r18, 0x02	; 2
    a0bc:	20 7f       	andi	r18, 0xF0	; 240
    a0be:	22 b9       	out	0x02, r18	; 2
    a0c0:	20 91 e4 09 	lds	r18, 0x09E4	; 0x8009e4 <Comp_1+0x6c>
    a0c4:	30 91 e5 09 	lds	r19, 0x09E5	; 0x8009e5 <Comp_1+0x6d>
    a0c8:	12 16       	cp	r1, r18
    a0ca:	13 06       	cpc	r1, r19
    a0cc:	54 f5       	brge	.+84     	; 0xa122 <ComutateTrv+0x76>
    a0ce:	e0 91 66 07 	lds	r30, 0x0766	; 0x800766 <step_index.2938>
    a0d2:	21 e0       	ldi	r18, 0x01	; 1
    a0d4:	2e 0f       	add	r18, r30
    a0d6:	20 93 66 07 	sts	0x0766, r18	; 0x800766 <step_index.2938>
    a0da:	32 b1       	in	r19, 0x02	; 2
    a0dc:	f0 e0       	ldi	r31, 0x00	; 0
    a0de:	ee 5e       	subi	r30, 0xEE	; 238
    a0e0:	fd 4f       	sbci	r31, 0xFD	; 253
    a0e2:	20 81       	ld	r18, Z
    a0e4:	23 2b       	or	r18, r19
    a0e6:	22 b9       	out	0x02, r18	; 2
    a0e8:	e4 ee       	ldi	r30, 0xE4	; 228
    a0ea:	f9 e0       	ldi	r31, 0x09	; 9
    a0ec:	20 81       	ld	r18, Z
    a0ee:	31 81       	ldd	r19, Z+1	; 0x01
    a0f0:	21 50       	subi	r18, 0x01	; 1
    a0f2:	31 09       	sbc	r19, r1
    a0f4:	31 83       	std	Z+1, r19	; 0x01
    a0f6:	20 83       	st	Z, r18
    a0f8:	20 91 e6 09 	lds	r18, 0x09E6	; 0x8009e6 <Comp_1+0x6e>
    a0fc:	30 91 e7 09 	lds	r19, 0x09E7	; 0x8009e7 <Comp_1+0x6f>
    a100:	2f 5f       	subi	r18, 0xFF	; 255
    a102:	3f 4f       	sbci	r19, 0xFF	; 255
    a104:	21 3f       	cpi	r18, 0xF1	; 241
    a106:	31 05       	cpc	r19, r1
    a108:	2c f4       	brge	.+10     	; 0xa114 <ComutateTrv+0x68>
    a10a:	30 93 e7 09 	sts	0x09E7, r19	; 0x8009e7 <Comp_1+0x6f>
    a10e:	20 93 e6 09 	sts	0x09E6, r18	; 0x8009e6 <Comp_1+0x6e>
    a112:	41 c0       	rjmp	.+130    	; 0xa196 <ComutateTrv+0xea>
    a114:	20 ef       	ldi	r18, 0xF0	; 240
    a116:	30 e0       	ldi	r19, 0x00	; 0
    a118:	30 93 e7 09 	sts	0x09E7, r19	; 0x8009e7 <Comp_1+0x6f>
    a11c:	20 93 e6 09 	sts	0x09E6, r18	; 0x8009e6 <Comp_1+0x6e>
    a120:	3a c0       	rjmp	.+116    	; 0xa196 <ComutateTrv+0xea>
    a122:	33 23       	and	r19, r19
    a124:	24 f5       	brge	.+72     	; 0xa16e <ComutateTrv+0xc2>
    a126:	e0 91 66 07 	lds	r30, 0x0766	; 0x800766 <step_index.2938>
    a12a:	21 e0       	ldi	r18, 0x01	; 1
    a12c:	2e 0f       	add	r18, r30
    a12e:	20 93 66 07 	sts	0x0766, r18	; 0x800766 <step_index.2938>
    a132:	f0 e0       	ldi	r31, 0x00	; 0
    a134:	e2 5f       	subi	r30, 0xF2	; 242
    a136:	fd 4f       	sbci	r31, 0xFD	; 253
    a138:	20 81       	ld	r18, Z
    a13a:	22 b9       	out	0x02, r18	; 2
    a13c:	e4 ee       	ldi	r30, 0xE4	; 228
    a13e:	f9 e0       	ldi	r31, 0x09	; 9
    a140:	20 81       	ld	r18, Z
    a142:	31 81       	ldd	r19, Z+1	; 0x01
    a144:	2f 5f       	subi	r18, 0xFF	; 255
    a146:	3f 4f       	sbci	r19, 0xFF	; 255
    a148:	31 83       	std	Z+1, r19	; 0x01
    a14a:	20 83       	st	Z, r18
    a14c:	20 91 e6 09 	lds	r18, 0x09E6	; 0x8009e6 <Comp_1+0x6e>
    a150:	30 91 e7 09 	lds	r19, 0x09E7	; 0x8009e7 <Comp_1+0x6f>
    a154:	21 50       	subi	r18, 0x01	; 1
    a156:	31 09       	sbc	r19, r1
    a158:	2a f0       	brmi	.+10     	; 0xa164 <ComutateTrv+0xb8>
    a15a:	30 93 e7 09 	sts	0x09E7, r19	; 0x8009e7 <Comp_1+0x6f>
    a15e:	20 93 e6 09 	sts	0x09E6, r18	; 0x8009e6 <Comp_1+0x6e>
    a162:	19 c0       	rjmp	.+50     	; 0xa196 <ComutateTrv+0xea>
    a164:	10 92 e7 09 	sts	0x09E7, r1	; 0x8009e7 <Comp_1+0x6f>
    a168:	10 92 e6 09 	sts	0x09E6, r1	; 0x8009e6 <Comp_1+0x6e>
    a16c:	14 c0       	rjmp	.+40     	; 0xa196 <ComutateTrv+0xea>
    a16e:	23 2b       	or	r18, r19
    a170:	69 f4       	brne	.+26     	; 0xa18c <ComutateTrv+0xe0>
    a172:	20 91 7f 09 	lds	r18, 0x097F	; 0x80097f <Comp_1+0x7>
    a176:	22 23       	and	r18, r18
    a178:	49 f0       	breq	.+18     	; 0xa18c <ComutateTrv+0xe0>
    a17a:	20 ef       	ldi	r18, 0xF0	; 240
    a17c:	30 e0       	ldi	r19, 0x00	; 0
    a17e:	30 93 e5 09 	sts	0x09E5, r19	; 0x8009e5 <Comp_1+0x6d>
    a182:	20 93 e4 09 	sts	0x09E4, r18	; 0x8009e4 <Comp_1+0x6c>
    a186:	10 92 7f 09 	sts	0x097F, r1	; 0x80097f <Comp_1+0x7>
    a18a:	05 c0       	rjmp	.+10     	; 0xa196 <ComutateTrv+0xea>
    a18c:	22 b1       	in	r18, 0x02	; 2
    a18e:	20 7f       	andi	r18, 0xF0	; 240
    a190:	22 b9       	out	0x02, r18	; 2
    a192:	10 92 7f 09 	sts	0x097F, r1	; 0x80097f <Comp_1+0x7>
    a196:	20 91 66 07 	lds	r18, 0x0766	; 0x800766 <step_index.2938>
    a19a:	24 30       	cpi	r18, 0x04	; 4
    a19c:	10 f0       	brcs	.+4      	; 0xa1a2 <ComutateTrv+0xf6>
    a19e:	10 92 66 07 	sts	0x0766, r1	; 0x800766 <step_index.2938>
    a1a2:	fc 01       	movw	r30, r24
    a1a4:	80 81       	ld	r24, Z
    a1a6:	8b 31       	cpi	r24, 0x1B	; 27
    a1a8:	09 f0       	breq	.+2      	; 0xa1ac <ComutateTrv+0x100>
    a1aa:	70 c0       	rjmp	.+224    	; 0xa28c <ComutateTrv+0x1e0>
    a1ac:	82 b1       	in	r24, 0x02	; 2
    a1ae:	8f 70       	andi	r24, 0x0F	; 15
    a1b0:	82 b9       	out	0x02, r24	; 2
    a1b2:	80 91 6e 0a 	lds	r24, 0x0A6E	; 0x800a6e <Comp_2+0x6c>
    a1b6:	90 91 6f 0a 	lds	r25, 0x0A6F	; 0x800a6f <Comp_2+0x6d>
    a1ba:	18 16       	cp	r1, r24
    a1bc:	19 06       	cpc	r1, r25
    a1be:	44 f5       	brge	.+80     	; 0xa210 <ComutateTrv+0x164>
    a1c0:	e0 91 65 07 	lds	r30, 0x0765	; 0x800765 <step_index.2939>
    a1c4:	81 e0       	ldi	r24, 0x01	; 1
    a1c6:	8e 0f       	add	r24, r30
    a1c8:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <step_index.2939>
    a1cc:	92 b1       	in	r25, 0x02	; 2
    a1ce:	f0 e0       	ldi	r31, 0x00	; 0
    a1d0:	e6 5f       	subi	r30, 0xF6	; 246
    a1d2:	fd 4f       	sbci	r31, 0xFD	; 253
    a1d4:	80 81       	ld	r24, Z
    a1d6:	89 2b       	or	r24, r25
    a1d8:	82 b9       	out	0x02, r24	; 2
    a1da:	ee e6       	ldi	r30, 0x6E	; 110
    a1dc:	fa e0       	ldi	r31, 0x0A	; 10
    a1de:	80 81       	ld	r24, Z
    a1e0:	91 81       	ldd	r25, Z+1	; 0x01
    a1e2:	01 97       	sbiw	r24, 0x01	; 1
    a1e4:	91 83       	std	Z+1, r25	; 0x01
    a1e6:	80 83       	st	Z, r24
    a1e8:	80 91 70 0a 	lds	r24, 0x0A70	; 0x800a70 <Comp_2+0x6e>
    a1ec:	90 91 71 0a 	lds	r25, 0x0A71	; 0x800a71 <Comp_2+0x6f>
    a1f0:	01 96       	adiw	r24, 0x01	; 1
    a1f2:	81 3f       	cpi	r24, 0xF1	; 241
    a1f4:	91 05       	cpc	r25, r1
    a1f6:	2c f4       	brge	.+10     	; 0xa202 <ComutateTrv+0x156>
    a1f8:	90 93 71 0a 	sts	0x0A71, r25	; 0x800a71 <Comp_2+0x6f>
    a1fc:	80 93 70 0a 	sts	0x0A70, r24	; 0x800a70 <Comp_2+0x6e>
    a200:	3f c0       	rjmp	.+126    	; 0xa280 <ComutateTrv+0x1d4>
    a202:	80 ef       	ldi	r24, 0xF0	; 240
    a204:	90 e0       	ldi	r25, 0x00	; 0
    a206:	90 93 71 0a 	sts	0x0A71, r25	; 0x800a71 <Comp_2+0x6f>
    a20a:	80 93 70 0a 	sts	0x0A70, r24	; 0x800a70 <Comp_2+0x6e>
    a20e:	38 c0       	rjmp	.+112    	; 0xa280 <ComutateTrv+0x1d4>
    a210:	99 23       	and	r25, r25
    a212:	14 f5       	brge	.+68     	; 0xa258 <ComutateTrv+0x1ac>
    a214:	e0 91 65 07 	lds	r30, 0x0765	; 0x800765 <step_index.2939>
    a218:	81 e0       	ldi	r24, 0x01	; 1
    a21a:	8e 0f       	add	r24, r30
    a21c:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <step_index.2939>
    a220:	f0 e0       	ldi	r31, 0x00	; 0
    a222:	ea 5f       	subi	r30, 0xFA	; 250
    a224:	fd 4f       	sbci	r31, 0xFD	; 253
    a226:	80 81       	ld	r24, Z
    a228:	82 b9       	out	0x02, r24	; 2
    a22a:	ee e6       	ldi	r30, 0x6E	; 110
    a22c:	fa e0       	ldi	r31, 0x0A	; 10
    a22e:	80 81       	ld	r24, Z
    a230:	91 81       	ldd	r25, Z+1	; 0x01
    a232:	01 96       	adiw	r24, 0x01	; 1
    a234:	91 83       	std	Z+1, r25	; 0x01
    a236:	80 83       	st	Z, r24
    a238:	80 91 70 0a 	lds	r24, 0x0A70	; 0x800a70 <Comp_2+0x6e>
    a23c:	90 91 71 0a 	lds	r25, 0x0A71	; 0x800a71 <Comp_2+0x6f>
    a240:	01 97       	sbiw	r24, 0x01	; 1
    a242:	2a f0       	brmi	.+10     	; 0xa24e <ComutateTrv+0x1a2>
    a244:	90 93 71 0a 	sts	0x0A71, r25	; 0x800a71 <Comp_2+0x6f>
    a248:	80 93 70 0a 	sts	0x0A70, r24	; 0x800a70 <Comp_2+0x6e>
    a24c:	19 c0       	rjmp	.+50     	; 0xa280 <ComutateTrv+0x1d4>
    a24e:	10 92 71 0a 	sts	0x0A71, r1	; 0x800a71 <Comp_2+0x6f>
    a252:	10 92 70 0a 	sts	0x0A70, r1	; 0x800a70 <Comp_2+0x6e>
    a256:	14 c0       	rjmp	.+40     	; 0xa280 <ComutateTrv+0x1d4>
    a258:	89 2b       	or	r24, r25
    a25a:	69 f4       	brne	.+26     	; 0xa276 <ComutateTrv+0x1ca>
    a25c:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <Comp_2+0x7>
    a260:	88 23       	and	r24, r24
    a262:	49 f0       	breq	.+18     	; 0xa276 <ComutateTrv+0x1ca>
    a264:	80 ef       	ldi	r24, 0xF0	; 240
    a266:	90 e0       	ldi	r25, 0x00	; 0
    a268:	90 93 6f 0a 	sts	0x0A6F, r25	; 0x800a6f <Comp_2+0x6d>
    a26c:	80 93 6e 0a 	sts	0x0A6E, r24	; 0x800a6e <Comp_2+0x6c>
    a270:	10 92 09 0a 	sts	0x0A09, r1	; 0x800a09 <Comp_2+0x7>
    a274:	05 c0       	rjmp	.+10     	; 0xa280 <ComutateTrv+0x1d4>
    a276:	82 b1       	in	r24, 0x02	; 2
    a278:	8f 70       	andi	r24, 0x0F	; 15
    a27a:	82 b9       	out	0x02, r24	; 2
    a27c:	10 92 09 0a 	sts	0x0A09, r1	; 0x800a09 <Comp_2+0x7>
    a280:	80 91 65 07 	lds	r24, 0x0765	; 0x800765 <step_index.2939>
    a284:	84 30       	cpi	r24, 0x04	; 4
    a286:	10 f0       	brcs	.+4      	; 0xa28c <ComutateTrv+0x1e0>
    a288:	10 92 65 07 	sts	0x0765, r1	; 0x800765 <step_index.2939>
    a28c:	08 95       	ret

0000a28e <activateTrvTimer>:
    a28e:	ef 92       	push	r14
    a290:	ff 92       	push	r15
    a292:	0f 93       	push	r16
    a294:	1f 93       	push	r17
    a296:	8e 58       	subi	r24, 0x8E	; 142
    a298:	9f 4f       	sbci	r25, 0xFF	; 255
    a29a:	fc 01       	movw	r30, r24
    a29c:	80 81       	ld	r24, Z
    a29e:	91 81       	ldd	r25, Z+1	; 0x01
    a2a0:	81 30       	cpi	r24, 0x01	; 1
    a2a2:	91 05       	cpc	r25, r1
    a2a4:	b1 f4       	brne	.+44     	; 0xa2d2 <activateTrvTimer+0x44>
    a2a6:	0f 2e       	mov	r0, r31
    a2a8:	f6 e5       	ldi	r31, 0x56	; 86
    a2aa:	ef 2e       	mov	r14, r31
    a2ac:	f0 e5       	ldi	r31, 0x50	; 80
    a2ae:	ff 2e       	mov	r15, r31
    a2b0:	f0 2d       	mov	r31, r0
    a2b2:	0e e7       	ldi	r16, 0x7E	; 126
    a2b4:	16 e0       	ldi	r17, 0x06	; 6
    a2b6:	21 e0       	ldi	r18, 0x01	; 1
    a2b8:	42 e3       	ldi	r20, 0x32	; 50
    a2ba:	50 e0       	ldi	r21, 0x00	; 0
    a2bc:	60 e0       	ldi	r22, 0x00	; 0
    a2be:	70 e0       	ldi	r23, 0x00	; 0
    a2c0:	8a e1       	ldi	r24, 0x1A	; 26
    a2c2:	96 e0       	ldi	r25, 0x06	; 6
    a2c4:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    a2c8:	90 93 fe 08 	sts	0x08FE, r25	; 0x8008fe <xComutateTrv_1+0x1>
    a2cc:	80 93 fd 08 	sts	0x08FD, r24	; 0x8008fd <xComutateTrv_1>
    a2d0:	17 c0       	rjmp	.+46     	; 0xa300 <activateTrvTimer+0x72>
    a2d2:	02 97       	sbiw	r24, 0x02	; 2
    a2d4:	a9 f4       	brne	.+42     	; 0xa300 <activateTrvTimer+0x72>
    a2d6:	0f 2e       	mov	r0, r31
    a2d8:	f6 e5       	ldi	r31, 0x56	; 86
    a2da:	ef 2e       	mov	r14, r31
    a2dc:	f0 e5       	ldi	r31, 0x50	; 80
    a2de:	ff 2e       	mov	r15, r31
    a2e0:	f0 2d       	mov	r31, r0
    a2e2:	0d e7       	ldi	r16, 0x7D	; 125
    a2e4:	16 e0       	ldi	r17, 0x06	; 6
    a2e6:	21 e0       	ldi	r18, 0x01	; 1
    a2e8:	42 e3       	ldi	r20, 0x32	; 50
    a2ea:	50 e0       	ldi	r21, 0x00	; 0
    a2ec:	60 e0       	ldi	r22, 0x00	; 0
    a2ee:	70 e0       	ldi	r23, 0x00	; 0
    a2f0:	83 e2       	ldi	r24, 0x23	; 35
    a2f2:	96 e0       	ldi	r25, 0x06	; 6
    a2f4:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    a2f8:	90 93 f9 09 	sts	0x09F9, r25	; 0x8009f9 <xComutateTrv_2+0x1>
    a2fc:	80 93 f8 09 	sts	0x09F8, r24	; 0x8009f8 <xComutateTrv_2>
    a300:	1f 91       	pop	r17
    a302:	0f 91       	pop	r16
    a304:	ff 90       	pop	r15
    a306:	ef 90       	pop	r14
    a308:	08 95       	ret

0000a30a <startTrvTimer>:
    a30a:	cf 92       	push	r12
    a30c:	df 92       	push	r13
    a30e:	ef 92       	push	r14
    a310:	ff 92       	push	r15
    a312:	0f 93       	push	r16
    a314:	1f 93       	push	r17
    a316:	8e 58       	subi	r24, 0x8E	; 142
    a318:	9f 4f       	sbci	r25, 0xFF	; 255
    a31a:	fc 01       	movw	r30, r24
    a31c:	80 81       	ld	r24, Z
    a31e:	91 81       	ldd	r25, Z+1	; 0x01
    a320:	81 30       	cpi	r24, 0x01	; 1
    a322:	91 05       	cpc	r25, r1
    a324:	89 f4       	brne	.+34     	; 0xa348 <startTrvTimer+0x3e>
    a326:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    a32a:	9b 01       	movw	r18, r22
    a32c:	ac 01       	movw	r20, r24
    a32e:	c1 2c       	mov	r12, r1
    a330:	d1 2c       	mov	r13, r1
    a332:	76 01       	movw	r14, r12
    a334:	00 e0       	ldi	r16, 0x00	; 0
    a336:	10 e0       	ldi	r17, 0x00	; 0
    a338:	61 e0       	ldi	r22, 0x01	; 1
    a33a:	80 91 fd 08 	lds	r24, 0x08FD	; 0x8008fd <xComutateTrv_1>
    a33e:	90 91 fe 08 	lds	r25, 0x08FE	; 0x8008fe <xComutateTrv_1+0x1>
    a342:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    a346:	12 c0       	rjmp	.+36     	; 0xa36c <startTrvTimer+0x62>
    a348:	02 97       	sbiw	r24, 0x02	; 2
    a34a:	81 f4       	brne	.+32     	; 0xa36c <startTrvTimer+0x62>
    a34c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    a350:	9b 01       	movw	r18, r22
    a352:	ac 01       	movw	r20, r24
    a354:	c1 2c       	mov	r12, r1
    a356:	d1 2c       	mov	r13, r1
    a358:	76 01       	movw	r14, r12
    a35a:	00 e0       	ldi	r16, 0x00	; 0
    a35c:	10 e0       	ldi	r17, 0x00	; 0
    a35e:	61 e0       	ldi	r22, 0x01	; 1
    a360:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <xComutateTrv_2>
    a364:	90 91 f9 09 	lds	r25, 0x09F9	; 0x8009f9 <xComutateTrv_2+0x1>
    a368:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    a36c:	1f 91       	pop	r17
    a36e:	0f 91       	pop	r16
    a370:	ff 90       	pop	r15
    a372:	ef 90       	pop	r14
    a374:	df 90       	pop	r13
    a376:	cf 90       	pop	r12
    a378:	08 95       	ret

0000a37a <stopTrvTimer>:
void stopTrvTimer(xCompressor *comp)
{
    a37a:	cf 92       	push	r12
    a37c:	df 92       	push	r13
    a37e:	ef 92       	push	r14
    a380:	ff 92       	push	r15
    a382:	0f 93       	push	r16
    a384:	1f 93       	push	r17
    a386:	cf 93       	push	r28
    a388:	df 93       	push	r29
    a38a:	ec 01       	movw	r28, r24
	if(comp->Index==1)
    a38c:	fc 01       	movw	r30, r24
    a38e:	ee 58       	subi	r30, 0x8E	; 142
    a390:	ff 4f       	sbci	r31, 0xFF	; 255
    a392:	80 81       	ld	r24, Z
    a394:	91 81       	ldd	r25, Z+1	; 0x01
    a396:	01 97       	sbiw	r24, 0x01	; 1
    a398:	c1 f4       	brne	.+48     	; 0xa3ca <stopTrvTimer+0x50>
	{
		if( xTimerIsTimerActive( xComutateTrv_1 ) != pdFALSE )	xTimerStop(xComutateTrv_1, 1);
    a39a:	80 91 fd 08 	lds	r24, 0x08FD	; 0x8008fd <xComutateTrv_1>
    a39e:	90 91 fe 08 	lds	r25, 0x08FE	; 0x8008fe <xComutateTrv_1+0x1>
    a3a2:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    a3a6:	88 23       	and	r24, r24
    a3a8:	81 f0       	breq	.+32     	; 0xa3ca <stopTrvTimer+0x50>
    a3aa:	c1 2c       	mov	r12, r1
    a3ac:	d1 2c       	mov	r13, r1
    a3ae:	76 01       	movw	r14, r12
    a3b0:	c3 94       	inc	r12
    a3b2:	00 e0       	ldi	r16, 0x00	; 0
    a3b4:	10 e0       	ldi	r17, 0x00	; 0
    a3b6:	20 e0       	ldi	r18, 0x00	; 0
    a3b8:	30 e0       	ldi	r19, 0x00	; 0
    a3ba:	a9 01       	movw	r20, r18
    a3bc:	63 e0       	ldi	r22, 0x03	; 3
    a3be:	80 91 fd 08 	lds	r24, 0x08FD	; 0x8008fd <xComutateTrv_1>
    a3c2:	90 91 fe 08 	lds	r25, 0x08FE	; 0x8008fe <xComutateTrv_1+0x1>
    a3c6:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if(comp->Index==2)
    a3ca:	ce 58       	subi	r28, 0x8E	; 142
    a3cc:	df 4f       	sbci	r29, 0xFF	; 255
    a3ce:	88 81       	ld	r24, Y
    a3d0:	99 81       	ldd	r25, Y+1	; 0x01
    a3d2:	02 97       	sbiw	r24, 0x02	; 2
    a3d4:	c1 f4       	brne	.+48     	; 0xa406 <stopTrvTimer+0x8c>
	{
		if( xTimerIsTimerActive( xComutateTrv_2 ) != pdFALSE )	xTimerStop(xComutateTrv_2, 1);
    a3d6:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <xComutateTrv_2>
    a3da:	90 91 f9 09 	lds	r25, 0x09F9	; 0x8009f9 <xComutateTrv_2+0x1>
    a3de:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    a3e2:	88 23       	and	r24, r24
    a3e4:	81 f0       	breq	.+32     	; 0xa406 <stopTrvTimer+0x8c>
    a3e6:	c1 2c       	mov	r12, r1
    a3e8:	d1 2c       	mov	r13, r1
    a3ea:	76 01       	movw	r14, r12
    a3ec:	c3 94       	inc	r12
    a3ee:	00 e0       	ldi	r16, 0x00	; 0
    a3f0:	10 e0       	ldi	r17, 0x00	; 0
    a3f2:	20 e0       	ldi	r18, 0x00	; 0
    a3f4:	30 e0       	ldi	r19, 0x00	; 0
    a3f6:	a9 01       	movw	r20, r18
    a3f8:	63 e0       	ldi	r22, 0x03	; 3
    a3fa:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <xComutateTrv_2>
    a3fe:	90 91 f9 09 	lds	r25, 0x09F9	; 0x8009f9 <xComutateTrv_2+0x1>
    a402:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
}
    a406:	df 91       	pop	r29
    a408:	cf 91       	pop	r28
    a40a:	1f 91       	pop	r17
    a40c:	0f 91       	pop	r16
    a40e:	ff 90       	pop	r15
    a410:	ef 90       	pop	r14
    a412:	df 90       	pop	r13
    a414:	cf 90       	pop	r12
    a416:	08 95       	ret

0000a418 <Fuzzy>:
		
	}
}
//----------------------------------------------------------------------------------------------------------
int Fuzzy(xCompressor *comp,int corection)
{
    a418:	8f 92       	push	r8
    a41a:	9f 92       	push	r9
    a41c:	af 92       	push	r10
    a41e:	bf 92       	push	r11
    a420:	cf 92       	push	r12
    a422:	df 92       	push	r13
    a424:	ef 92       	push	r14
    a426:	ff 92       	push	r15
    a428:	0f 93       	push	r16
    a42a:	1f 93       	push	r17
    a42c:	cf 93       	push	r28
    a42e:	df 93       	push	r29
    a430:	ec 01       	movw	r28, r24
    a432:	8b 01       	movw	r16, r22
	int steps=0;
	//static int old_corection=0;
	//static int old_corection_1=0;
	if(comp->Index==2)xSerialxPrintf(&xSerial3Port,"corection_2 = %d \r\n", corection);
    a434:	fc 01       	movw	r30, r24
    a436:	ee 58       	subi	r30, 0x8E	; 142
    a438:	ff 4f       	sbci	r31, 0xFF	; 255
    a43a:	80 81       	ld	r24, Z
    a43c:	91 81       	ldd	r25, Z+1	; 0x01
    a43e:	02 97       	sbiw	r24, 0x02	; 2
    a440:	91 f4       	brne	.+36     	; 0xa466 <Fuzzy+0x4e>
    a442:	1f 93       	push	r17
    a444:	6f 93       	push	r22
    a446:	8f e2       	ldi	r24, 0x2F	; 47
    a448:	96 e0       	ldi	r25, 0x06	; 6
    a44a:	9f 93       	push	r25
    a44c:	8f 93       	push	r24
    a44e:	86 eb       	ldi	r24, 0xB6	; 182
    a450:	97 e0       	ldi	r25, 0x07	; 7
    a452:	9f 93       	push	r25
    a454:	8f 93       	push	r24
    a456:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a45a:	0f 90       	pop	r0
    a45c:	0f 90       	pop	r0
    a45e:	0f 90       	pop	r0
    a460:	0f 90       	pop	r0
    a462:	0f 90       	pop	r0
    a464:	0f 90       	pop	r0
	if(comp->Src_In<=10 && comp->Heating==1 ){steps=(comp->Src_In)/10 * 100 ;}
    a466:	ca a8       	ldd	r12, Y+50	; 0x32
    a468:	db a8       	ldd	r13, Y+51	; 0x33
    a46a:	ec a8       	ldd	r14, Y+52	; 0x34
    a46c:	fd a8       	ldd	r15, Y+53	; 0x35
    a46e:	20 e0       	ldi	r18, 0x00	; 0
    a470:	30 e0       	ldi	r19, 0x00	; 0
    a472:	40 e2       	ldi	r20, 0x20	; 32
    a474:	51 e4       	ldi	r21, 0x41	; 65
    a476:	c7 01       	movw	r24, r14
    a478:	b6 01       	movw	r22, r12
    a47a:	44 d2       	rcall	.+1160   	; 0xa904 <__cmpsf2>
    a47c:	18 16       	cp	r1, r24
    a47e:	94 f0       	brlt	.+36     	; 0xa4a4 <Fuzzy+0x8c>
    a480:	8a 81       	ldd	r24, Y+2	; 0x02
    a482:	88 23       	and	r24, r24
    a484:	79 f0       	breq	.+30     	; 0xa4a4 <Fuzzy+0x8c>
    a486:	20 e0       	ldi	r18, 0x00	; 0
    a488:	30 e0       	ldi	r19, 0x00	; 0
    a48a:	40 e2       	ldi	r20, 0x20	; 32
    a48c:	51 e4       	ldi	r21, 0x41	; 65
    a48e:	c7 01       	movw	r24, r14
    a490:	b6 01       	movw	r22, r12
    a492:	3c d2       	rcall	.+1144   	; 0xa90c <__divsf3>
    a494:	20 e0       	ldi	r18, 0x00	; 0
    a496:	30 e0       	ldi	r19, 0x00	; 0
    a498:	48 ec       	ldi	r20, 0xC8	; 200
    a49a:	52 e4       	ldi	r21, 0x42	; 66
    a49c:	cb d3       	rcall	.+1942   	; 0xac34 <__mulsf3>
    a49e:	9e d2       	rcall	.+1340   	; 0xa9dc <__fixsfsi>
    a4a0:	7b 01       	movw	r14, r22
    a4a2:	3b c1       	rjmp	.+630    	; 0xa71a <Fuzzy+0x302>
	else if(comp->Src_Out<=10 && comp->Cooling==1){steps=(comp->Src_Out)/10 * 100 ;}
    a4a4:	8e a8       	ldd	r8, Y+54	; 0x36
    a4a6:	9f a8       	ldd	r9, Y+55	; 0x37
    a4a8:	a8 ac       	ldd	r10, Y+56	; 0x38
    a4aa:	b9 ac       	ldd	r11, Y+57	; 0x39
    a4ac:	20 e0       	ldi	r18, 0x00	; 0
    a4ae:	30 e0       	ldi	r19, 0x00	; 0
    a4b0:	40 e2       	ldi	r20, 0x20	; 32
    a4b2:	51 e4       	ldi	r21, 0x41	; 65
    a4b4:	c5 01       	movw	r24, r10
    a4b6:	b4 01       	movw	r22, r8
    a4b8:	25 d2       	rcall	.+1098   	; 0xa904 <__cmpsf2>
    a4ba:	18 16       	cp	r1, r24
    a4bc:	94 f0       	brlt	.+36     	; 0xa4e2 <Fuzzy+0xca>
    a4be:	8b 81       	ldd	r24, Y+3	; 0x03
    a4c0:	88 23       	and	r24, r24
    a4c2:	79 f0       	breq	.+30     	; 0xa4e2 <Fuzzy+0xca>
    a4c4:	20 e0       	ldi	r18, 0x00	; 0
    a4c6:	30 e0       	ldi	r19, 0x00	; 0
    a4c8:	40 e2       	ldi	r20, 0x20	; 32
    a4ca:	51 e4       	ldi	r21, 0x41	; 65
    a4cc:	c5 01       	movw	r24, r10
    a4ce:	b4 01       	movw	r22, r8
    a4d0:	1d d2       	rcall	.+1082   	; 0xa90c <__divsf3>
    a4d2:	20 e0       	ldi	r18, 0x00	; 0
    a4d4:	30 e0       	ldi	r19, 0x00	; 0
    a4d6:	48 ec       	ldi	r20, 0xC8	; 200
    a4d8:	52 e4       	ldi	r21, 0x42	; 66
    a4da:	ac d3       	rcall	.+1880   	; 0xac34 <__mulsf3>
    a4dc:	7f d2       	rcall	.+1278   	; 0xa9dc <__fixsfsi>
    a4de:	7b 01       	movw	r14, r22
    a4e0:	1c c1       	rjmp	.+568    	; 0xa71a <Fuzzy+0x302>
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps); }//comp->trvCorection;
	else if(comp->Src_In>10 && comp->Src_In<=20 && comp->Heating==1)  {steps = (comp->Src_In-10)/10 * 100 + 100;}
    a4e2:	20 e0       	ldi	r18, 0x00	; 0
    a4e4:	30 e0       	ldi	r19, 0x00	; 0
    a4e6:	40 e2       	ldi	r20, 0x20	; 32
    a4e8:	51 e4       	ldi	r21, 0x41	; 65
    a4ea:	c7 01       	movw	r24, r14
    a4ec:	b6 01       	movw	r22, r12
    a4ee:	59 d3       	rcall	.+1714   	; 0xaba2 <__gesf2>
    a4f0:	18 16       	cp	r1, r24
    a4f2:	2c f5       	brge	.+74     	; 0xa53e <Fuzzy+0x126>
    a4f4:	20 e0       	ldi	r18, 0x00	; 0
    a4f6:	30 e0       	ldi	r19, 0x00	; 0
    a4f8:	40 ea       	ldi	r20, 0xA0	; 160
    a4fa:	51 e4       	ldi	r21, 0x41	; 65
    a4fc:	c7 01       	movw	r24, r14
    a4fe:	b6 01       	movw	r22, r12
    a500:	01 d2       	rcall	.+1026   	; 0xa904 <__cmpsf2>
    a502:	18 16       	cp	r1, r24
    a504:	e4 f0       	brlt	.+56     	; 0xa53e <Fuzzy+0x126>
    a506:	8a 81       	ldd	r24, Y+2	; 0x02
    a508:	88 23       	and	r24, r24
    a50a:	c9 f0       	breq	.+50     	; 0xa53e <Fuzzy+0x126>
    a50c:	20 e0       	ldi	r18, 0x00	; 0
    a50e:	30 e0       	ldi	r19, 0x00	; 0
    a510:	40 e2       	ldi	r20, 0x20	; 32
    a512:	51 e4       	ldi	r21, 0x41	; 65
    a514:	c7 01       	movw	r24, r14
    a516:	b6 01       	movw	r22, r12
    a518:	90 d1       	rcall	.+800    	; 0xa83a <__subsf3>
    a51a:	20 e0       	ldi	r18, 0x00	; 0
    a51c:	30 e0       	ldi	r19, 0x00	; 0
    a51e:	40 e2       	ldi	r20, 0x20	; 32
    a520:	51 e4       	ldi	r21, 0x41	; 65
    a522:	f4 d1       	rcall	.+1000   	; 0xa90c <__divsf3>
    a524:	20 e0       	ldi	r18, 0x00	; 0
    a526:	30 e0       	ldi	r19, 0x00	; 0
    a528:	48 ec       	ldi	r20, 0xC8	; 200
    a52a:	52 e4       	ldi	r21, 0x42	; 66
    a52c:	83 d3       	rcall	.+1798   	; 0xac34 <__mulsf3>
    a52e:	20 e0       	ldi	r18, 0x00	; 0
    a530:	30 e0       	ldi	r19, 0x00	; 0
    a532:	48 ec       	ldi	r20, 0xC8	; 200
    a534:	52 e4       	ldi	r21, 0x42	; 66
    a536:	82 d1       	rcall	.+772    	; 0xa83c <__addsf3>
    a538:	51 d2       	rcall	.+1186   	; 0xa9dc <__fixsfsi>
    a53a:	7b 01       	movw	r14, r22
    a53c:	ee c0       	rjmp	.+476    	; 0xa71a <Fuzzy+0x302>
	else if(comp->Src_Out>10 && comp->Src_Out<=20 && comp->Cooling==1)  {steps = (comp->Src_Out-10)/10 * 100 + 100;}	
    a53e:	20 e0       	ldi	r18, 0x00	; 0
    a540:	30 e0       	ldi	r19, 0x00	; 0
    a542:	40 e2       	ldi	r20, 0x20	; 32
    a544:	51 e4       	ldi	r21, 0x41	; 65
    a546:	c5 01       	movw	r24, r10
    a548:	b4 01       	movw	r22, r8
    a54a:	2b d3       	rcall	.+1622   	; 0xaba2 <__gesf2>
    a54c:	18 16       	cp	r1, r24
    a54e:	2c f5       	brge	.+74     	; 0xa59a <Fuzzy+0x182>
    a550:	20 e0       	ldi	r18, 0x00	; 0
    a552:	30 e0       	ldi	r19, 0x00	; 0
    a554:	40 ea       	ldi	r20, 0xA0	; 160
    a556:	51 e4       	ldi	r21, 0x41	; 65
    a558:	c5 01       	movw	r24, r10
    a55a:	b4 01       	movw	r22, r8
    a55c:	d3 d1       	rcall	.+934    	; 0xa904 <__cmpsf2>
    a55e:	18 16       	cp	r1, r24
    a560:	e4 f0       	brlt	.+56     	; 0xa59a <Fuzzy+0x182>
    a562:	8b 81       	ldd	r24, Y+3	; 0x03
    a564:	88 23       	and	r24, r24
    a566:	c9 f0       	breq	.+50     	; 0xa59a <Fuzzy+0x182>
    a568:	20 e0       	ldi	r18, 0x00	; 0
    a56a:	30 e0       	ldi	r19, 0x00	; 0
    a56c:	40 e2       	ldi	r20, 0x20	; 32
    a56e:	51 e4       	ldi	r21, 0x41	; 65
    a570:	c5 01       	movw	r24, r10
    a572:	b4 01       	movw	r22, r8
    a574:	62 d1       	rcall	.+708    	; 0xa83a <__subsf3>
    a576:	20 e0       	ldi	r18, 0x00	; 0
    a578:	30 e0       	ldi	r19, 0x00	; 0
    a57a:	40 e2       	ldi	r20, 0x20	; 32
    a57c:	51 e4       	ldi	r21, 0x41	; 65
    a57e:	c6 d1       	rcall	.+908    	; 0xa90c <__divsf3>
    a580:	20 e0       	ldi	r18, 0x00	; 0
    a582:	30 e0       	ldi	r19, 0x00	; 0
    a584:	48 ec       	ldi	r20, 0xC8	; 200
    a586:	52 e4       	ldi	r21, 0x42	; 66
    a588:	55 d3       	rcall	.+1706   	; 0xac34 <__mulsf3>
    a58a:	20 e0       	ldi	r18, 0x00	; 0
    a58c:	30 e0       	ldi	r19, 0x00	; 0
    a58e:	48 ec       	ldi	r20, 0xC8	; 200
    a590:	52 e4       	ldi	r21, 0x42	; 66
    a592:	54 d1       	rcall	.+680    	; 0xa83c <__addsf3>
    a594:	23 d2       	rcall	.+1094   	; 0xa9dc <__fixsfsi>
    a596:	7b 01       	movw	r14, r22
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps); }//;
	else if(comp->Src_In >20 && comp->Src_In<=30 && comp->Heating==1) {steps = (comp->Src_In-20)/10 * 100 + 150;}
    a598:	c0 c0       	rjmp	.+384    	; 0xa71a <Fuzzy+0x302>
    a59a:	20 e0       	ldi	r18, 0x00	; 0
    a59c:	30 e0       	ldi	r19, 0x00	; 0
    a59e:	40 ea       	ldi	r20, 0xA0	; 160
    a5a0:	51 e4       	ldi	r21, 0x41	; 65
    a5a2:	c7 01       	movw	r24, r14
    a5a4:	b6 01       	movw	r22, r12
    a5a6:	fd d2       	rcall	.+1530   	; 0xaba2 <__gesf2>
    a5a8:	18 16       	cp	r1, r24
    a5aa:	2c f5       	brge	.+74     	; 0xa5f6 <Fuzzy+0x1de>
    a5ac:	20 e0       	ldi	r18, 0x00	; 0
    a5ae:	30 e0       	ldi	r19, 0x00	; 0
    a5b0:	40 ef       	ldi	r20, 0xF0	; 240
    a5b2:	51 e4       	ldi	r21, 0x41	; 65
    a5b4:	c7 01       	movw	r24, r14
    a5b6:	b6 01       	movw	r22, r12
    a5b8:	a5 d1       	rcall	.+842    	; 0xa904 <__cmpsf2>
    a5ba:	18 16       	cp	r1, r24
    a5bc:	e4 f0       	brlt	.+56     	; 0xa5f6 <Fuzzy+0x1de>
    a5be:	8a 81       	ldd	r24, Y+2	; 0x02
    a5c0:	88 23       	and	r24, r24
    a5c2:	c9 f0       	breq	.+50     	; 0xa5f6 <Fuzzy+0x1de>
    a5c4:	20 e0       	ldi	r18, 0x00	; 0
    a5c6:	30 e0       	ldi	r19, 0x00	; 0
    a5c8:	40 ea       	ldi	r20, 0xA0	; 160
    a5ca:	51 e4       	ldi	r21, 0x41	; 65
    a5cc:	c7 01       	movw	r24, r14
    a5ce:	b6 01       	movw	r22, r12
    a5d0:	34 d1       	rcall	.+616    	; 0xa83a <__subsf3>
    a5d2:	20 e0       	ldi	r18, 0x00	; 0
    a5d4:	30 e0       	ldi	r19, 0x00	; 0
    a5d6:	40 e2       	ldi	r20, 0x20	; 32
    a5d8:	51 e4       	ldi	r21, 0x41	; 65
    a5da:	98 d1       	rcall	.+816    	; 0xa90c <__divsf3>
    a5dc:	20 e0       	ldi	r18, 0x00	; 0
    a5de:	30 e0       	ldi	r19, 0x00	; 0
    a5e0:	48 ec       	ldi	r20, 0xC8	; 200
    a5e2:	52 e4       	ldi	r21, 0x42	; 66
    a5e4:	27 d3       	rcall	.+1614   	; 0xac34 <__mulsf3>
    a5e6:	20 e0       	ldi	r18, 0x00	; 0
    a5e8:	30 e0       	ldi	r19, 0x00	; 0
    a5ea:	46 e1       	ldi	r20, 0x16	; 22
    a5ec:	53 e4       	ldi	r21, 0x43	; 67
    a5ee:	26 d1       	rcall	.+588    	; 0xa83c <__addsf3>
    a5f0:	f5 d1       	rcall	.+1002   	; 0xa9dc <__fixsfsi>
    a5f2:	7b 01       	movw	r14, r22
	else if(comp->Src_Out >20 && comp->Src_Out<=30 && comp->Cooling==1) {steps = (comp->Src_Out-20)/10 * 100 + 150;}	
    a5f4:	92 c0       	rjmp	.+292    	; 0xa71a <Fuzzy+0x302>
    a5f6:	20 e0       	ldi	r18, 0x00	; 0
    a5f8:	30 e0       	ldi	r19, 0x00	; 0
    a5fa:	40 ea       	ldi	r20, 0xA0	; 160
    a5fc:	51 e4       	ldi	r21, 0x41	; 65
    a5fe:	c5 01       	movw	r24, r10
    a600:	b4 01       	movw	r22, r8
    a602:	cf d2       	rcall	.+1438   	; 0xaba2 <__gesf2>
    a604:	18 16       	cp	r1, r24
    a606:	2c f5       	brge	.+74     	; 0xa652 <Fuzzy+0x23a>
    a608:	20 e0       	ldi	r18, 0x00	; 0
    a60a:	30 e0       	ldi	r19, 0x00	; 0
    a60c:	40 ef       	ldi	r20, 0xF0	; 240
    a60e:	51 e4       	ldi	r21, 0x41	; 65
    a610:	c5 01       	movw	r24, r10
    a612:	b4 01       	movw	r22, r8
    a614:	77 d1       	rcall	.+750    	; 0xa904 <__cmpsf2>
    a616:	18 16       	cp	r1, r24
    a618:	e4 f0       	brlt	.+56     	; 0xa652 <Fuzzy+0x23a>
    a61a:	8b 81       	ldd	r24, Y+3	; 0x03
    a61c:	88 23       	and	r24, r24
    a61e:	c9 f0       	breq	.+50     	; 0xa652 <Fuzzy+0x23a>
    a620:	20 e0       	ldi	r18, 0x00	; 0
    a622:	30 e0       	ldi	r19, 0x00	; 0
    a624:	40 ea       	ldi	r20, 0xA0	; 160
    a626:	51 e4       	ldi	r21, 0x41	; 65
    a628:	c5 01       	movw	r24, r10
    a62a:	b4 01       	movw	r22, r8
    a62c:	06 d1       	rcall	.+524    	; 0xa83a <__subsf3>
    a62e:	20 e0       	ldi	r18, 0x00	; 0
    a630:	30 e0       	ldi	r19, 0x00	; 0
    a632:	40 e2       	ldi	r20, 0x20	; 32
    a634:	51 e4       	ldi	r21, 0x41	; 65
    a636:	6a d1       	rcall	.+724    	; 0xa90c <__divsf3>
    a638:	20 e0       	ldi	r18, 0x00	; 0
    a63a:	30 e0       	ldi	r19, 0x00	; 0
    a63c:	48 ec       	ldi	r20, 0xC8	; 200
    a63e:	52 e4       	ldi	r21, 0x42	; 66
    a640:	f9 d2       	rcall	.+1522   	; 0xac34 <__mulsf3>
    a642:	20 e0       	ldi	r18, 0x00	; 0
    a644:	30 e0       	ldi	r19, 0x00	; 0
    a646:	46 e1       	ldi	r20, 0x16	; 22
    a648:	53 e4       	ldi	r21, 0x43	; 67
    a64a:	f8 d0       	rcall	.+496    	; 0xa83c <__addsf3>
    a64c:	c7 d1       	rcall	.+910    	; 0xa9dc <__fixsfsi>
		
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps);}// comp->trvCorection;
	else if(comp->Src_In>30 && comp->Src_In<=40 && comp->Heating==1)  {steps = (comp->Src_In-30)/10 * 100 + 200;}
    a64e:	7b 01       	movw	r14, r22
    a650:	64 c0       	rjmp	.+200    	; 0xa71a <Fuzzy+0x302>
    a652:	20 e0       	ldi	r18, 0x00	; 0
    a654:	30 e0       	ldi	r19, 0x00	; 0
    a656:	40 ef       	ldi	r20, 0xF0	; 240
    a658:	51 e4       	ldi	r21, 0x41	; 65
    a65a:	c7 01       	movw	r24, r14
    a65c:	b6 01       	movw	r22, r12
    a65e:	a1 d2       	rcall	.+1346   	; 0xaba2 <__gesf2>
    a660:	18 16       	cp	r1, r24
    a662:	2c f5       	brge	.+74     	; 0xa6ae <Fuzzy+0x296>
    a664:	20 e0       	ldi	r18, 0x00	; 0
    a666:	30 e0       	ldi	r19, 0x00	; 0
    a668:	40 e2       	ldi	r20, 0x20	; 32
    a66a:	52 e4       	ldi	r21, 0x42	; 66
    a66c:	c7 01       	movw	r24, r14
    a66e:	b6 01       	movw	r22, r12
    a670:	49 d1       	rcall	.+658    	; 0xa904 <__cmpsf2>
    a672:	18 16       	cp	r1, r24
    a674:	e4 f0       	brlt	.+56     	; 0xa6ae <Fuzzy+0x296>
    a676:	8a 81       	ldd	r24, Y+2	; 0x02
    a678:	88 23       	and	r24, r24
    a67a:	c9 f0       	breq	.+50     	; 0xa6ae <Fuzzy+0x296>
    a67c:	20 e0       	ldi	r18, 0x00	; 0
    a67e:	30 e0       	ldi	r19, 0x00	; 0
    a680:	40 ef       	ldi	r20, 0xF0	; 240
    a682:	51 e4       	ldi	r21, 0x41	; 65
    a684:	c7 01       	movw	r24, r14
    a686:	b6 01       	movw	r22, r12
    a688:	d8 d0       	rcall	.+432    	; 0xa83a <__subsf3>
    a68a:	20 e0       	ldi	r18, 0x00	; 0
    a68c:	30 e0       	ldi	r19, 0x00	; 0
    a68e:	40 e2       	ldi	r20, 0x20	; 32
    a690:	51 e4       	ldi	r21, 0x41	; 65
    a692:	3c d1       	rcall	.+632    	; 0xa90c <__divsf3>
    a694:	20 e0       	ldi	r18, 0x00	; 0
    a696:	30 e0       	ldi	r19, 0x00	; 0
    a698:	48 ec       	ldi	r20, 0xC8	; 200
    a69a:	52 e4       	ldi	r21, 0x42	; 66
    a69c:	cb d2       	rcall	.+1430   	; 0xac34 <__mulsf3>
    a69e:	20 e0       	ldi	r18, 0x00	; 0
    a6a0:	30 e0       	ldi	r19, 0x00	; 0
    a6a2:	48 e4       	ldi	r20, 0x48	; 72
    a6a4:	53 e4       	ldi	r21, 0x43	; 67
    a6a6:	ca d0       	rcall	.+404    	; 0xa83c <__addsf3>
	else if(comp->Src_Out>30 && comp->Src_Out<=40 && comp->Cooling==1)  {steps = (comp->Src_Out-30)/10 * 100 + 200;}	
    a6a8:	99 d1       	rcall	.+818    	; 0xa9dc <__fixsfsi>
    a6aa:	7b 01       	movw	r14, r22
    a6ac:	36 c0       	rjmp	.+108    	; 0xa71a <Fuzzy+0x302>
    a6ae:	20 e0       	ldi	r18, 0x00	; 0
    a6b0:	30 e0       	ldi	r19, 0x00	; 0
    a6b2:	40 ef       	ldi	r20, 0xF0	; 240
    a6b4:	51 e4       	ldi	r21, 0x41	; 65
    a6b6:	c5 01       	movw	r24, r10
    a6b8:	b4 01       	movw	r22, r8
    a6ba:	73 d2       	rcall	.+1254   	; 0xaba2 <__gesf2>
    a6bc:	18 16       	cp	r1, r24
    a6be:	2c f5       	brge	.+74     	; 0xa70a <Fuzzy+0x2f2>
    a6c0:	20 e0       	ldi	r18, 0x00	; 0
    a6c2:	30 e0       	ldi	r19, 0x00	; 0
    a6c4:	40 e2       	ldi	r20, 0x20	; 32
    a6c6:	52 e4       	ldi	r21, 0x42	; 66
    a6c8:	c5 01       	movw	r24, r10
    a6ca:	b4 01       	movw	r22, r8
    a6cc:	1b d1       	rcall	.+566    	; 0xa904 <__cmpsf2>
    a6ce:	18 16       	cp	r1, r24
    a6d0:	fc f0       	brlt	.+62     	; 0xa710 <Fuzzy+0x2f8>
    a6d2:	8b 81       	ldd	r24, Y+3	; 0x03
    a6d4:	88 23       	and	r24, r24
    a6d6:	f9 f0       	breq	.+62     	; 0xa716 <Fuzzy+0x2fe>
    a6d8:	20 e0       	ldi	r18, 0x00	; 0
    a6da:	30 e0       	ldi	r19, 0x00	; 0
    a6dc:	40 ef       	ldi	r20, 0xF0	; 240
    a6de:	51 e4       	ldi	r21, 0x41	; 65
    a6e0:	c5 01       	movw	r24, r10
    a6e2:	b4 01       	movw	r22, r8
    a6e4:	aa d0       	rcall	.+340    	; 0xa83a <__subsf3>
    a6e6:	20 e0       	ldi	r18, 0x00	; 0
    a6e8:	30 e0       	ldi	r19, 0x00	; 0
    a6ea:	40 e2       	ldi	r20, 0x20	; 32
    a6ec:	51 e4       	ldi	r21, 0x41	; 65
    a6ee:	0e d1       	rcall	.+540    	; 0xa90c <__divsf3>
    a6f0:	20 e0       	ldi	r18, 0x00	; 0
    a6f2:	30 e0       	ldi	r19, 0x00	; 0
    a6f4:	48 ec       	ldi	r20, 0xC8	; 200
    a6f6:	52 e4       	ldi	r21, 0x42	; 66
    a6f8:	9d d2       	rcall	.+1338   	; 0xac34 <__mulsf3>
    a6fa:	20 e0       	ldi	r18, 0x00	; 0
    a6fc:	30 e0       	ldi	r19, 0x00	; 0
    a6fe:	48 e4       	ldi	r20, 0x48	; 72
    a700:	53 e4       	ldi	r21, 0x43	; 67
    a702:	9c d0       	rcall	.+312    	; 0xa83c <__addsf3>
    a704:	6b d1       	rcall	.+726    	; 0xa9dc <__fixsfsi>
    a706:	7b 01       	movw	r14, r22
    a708:	08 c0       	rjmp	.+16     	; 0xa71a <Fuzzy+0x302>
    a70a:	e1 2c       	mov	r14, r1
    a70c:	f1 2c       	mov	r15, r1
    a70e:	05 c0       	rjmp	.+10     	; 0xa71a <Fuzzy+0x302>
	}
}
//----------------------------------------------------------------------------------------------------------
int Fuzzy(xCompressor *comp,int corection)
{
	int steps=0;
    a710:	e1 2c       	mov	r14, r1
    a712:	f1 2c       	mov	r15, r1
    a714:	02 c0       	rjmp	.+4      	; 0xa71a <Fuzzy+0x302>
    a716:	e1 2c       	mov	r14, r1
    a718:	f1 2c       	mov	r15, r1
    a71a:	0e 19       	sub	r16, r14
    a71c:	1f 09       	sbc	r17, r15
    a71e:	fe 01       	movw	r30, r28
		 //if(old_corection_2!=corection && comp->Index==2){comp->trvCorection=corection-steps;old_corection_2=corection;}
	//xSerialxPrintf(&xSerial3Port,"TRVcorection_%d = %d \r\n",comp->Index, corection);
			
	
	
	comp->trvCorection=corection-steps;
    a720:	e6 59       	subi	r30, 0x96	; 150
    a722:	ff 4f       	sbci	r31, 0xFF	; 255
    a724:	11 83       	std	Z+1, r17	; 0x01
    a726:	00 83       	st	Z, r16
    a728:	38 96       	adiw	r30, 0x08	; 8
    a72a:	80 81       	ld	r24, Z
    a72c:	91 81       	ldd	r25, Z+1	; 0x01
	if(comp->Index==2)xSerialxPrintf(&xSerial3Port,"TRVcorection_2 = %d \r\n", comp->trvCorection);
    a72e:	02 97       	sbiw	r24, 0x02	; 2
    a730:	91 f4       	brne	.+36     	; 0xa756 <Fuzzy+0x33e>
    a732:	1f 93       	push	r17
    a734:	0f 93       	push	r16
    a736:	8c e2       	ldi	r24, 0x2C	; 44
    a738:	96 e0       	ldi	r25, 0x06	; 6
    a73a:	9f 93       	push	r25
    a73c:	8f 93       	push	r24
    a73e:	86 eb       	ldi	r24, 0xB6	; 182
    a740:	97 e0       	ldi	r25, 0x07	; 7
    a742:	9f 93       	push	r25
    a744:	8f 93       	push	r24
    a746:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a74a:	0f 90       	pop	r0
    a74c:	0f 90       	pop	r0
    a74e:	0f 90       	pop	r0
    a750:	0f 90       	pop	r0
    a752:	0f 90       	pop	r0
    a754:	0f 90       	pop	r0
    a756:	fe 01       	movw	r30, r28
    a758:	ee 58       	subi	r30, 0x8E	; 142
    a75a:	ff 4f       	sbci	r31, 0xFF	; 255
	if(comp->Index==1)xSerialxPrintf(&xSerial3Port,"TRVcorection_1 = %d \r\n", comp->trvCorection);
    a75c:	80 81       	ld	r24, Z
    a75e:	91 81       	ldd	r25, Z+1	; 0x01
    a760:	01 97       	sbiw	r24, 0x01	; 1
    a762:	a9 f4       	brne	.+42     	; 0xa78e <Fuzzy+0x376>
    a764:	38 97       	sbiw	r30, 0x08	; 8
    a766:	81 81       	ldd	r24, Z+1	; 0x01
    a768:	8f 93       	push	r24
    a76a:	80 81       	ld	r24, Z
    a76c:	8f 93       	push	r24
    a76e:	83 e4       	ldi	r24, 0x43	; 67
    a770:	96 e0       	ldi	r25, 0x06	; 6
    a772:	9f 93       	push	r25
    a774:	8f 93       	push	r24
    a776:	86 eb       	ldi	r24, 0xB6	; 182
    a778:	97 e0       	ldi	r25, 0x07	; 7
    a77a:	9f 93       	push	r25
    a77c:	8f 93       	push	r24
    a77e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a782:	0f 90       	pop	r0
    a784:	0f 90       	pop	r0
    a786:	0f 90       	pop	r0
    a788:	0f 90       	pop	r0
    a78a:	0f 90       	pop	r0
    a78c:	0f 90       	pop	r0
    a78e:	fe 01       	movw	r30, r28
    a790:	e6 59       	subi	r30, 0x96	; 150
    a792:	ff 4f       	sbci	r31, 0xFF	; 255
	steps=steps+comp->trvCorection;
    a794:	60 81       	ld	r22, Z
    a796:	71 81       	ldd	r23, Z+1	; 0x01
    a798:	e6 0e       	add	r14, r22
    a79a:	f7 1e       	adc	r15, r23
    a79c:	8e 01       	movw	r16, r28
    a79e:	02 59       	subi	r16, 0x92	; 146
    a7a0:	1f 4f       	sbci	r17, 0xFF	; 255
	comp->Steps=comp->Trv_position;		
    a7a2:	f8 01       	movw	r30, r16
    a7a4:	80 81       	ld	r24, Z
    a7a6:	91 81       	ldd	r25, Z+1	; 0x01
    a7a8:	c4 59       	subi	r28, 0x94	; 148
    a7aa:	df 4f       	sbci	r29, 0xFF	; 255
    a7ac:	88 83       	st	Y, r24
    a7ae:	99 83       	std	Y+1, r25	; 0x01
    a7b0:	9f 93       	push	r25
    a7b2:	8f 93       	push	r24
    a7b4:	8a e5       	ldi	r24, 0x5A	; 90
	//comp->Steps=steps - comp->Trv_position;
xSerialxPrintf(&xSerial3Port,"Steps = %d \r\n", comp->Steps);
    a7b6:	96 e0       	ldi	r25, 0x06	; 6
    a7b8:	9f 93       	push	r25
    a7ba:	8f 93       	push	r24
    a7bc:	c6 eb       	ldi	r28, 0xB6	; 182
    a7be:	d7 e0       	ldi	r29, 0x07	; 7
    a7c0:	df 93       	push	r29
    a7c2:	cf 93       	push	r28
    a7c4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a7c8:	f8 01       	movw	r30, r16
    a7ca:	81 81       	ldd	r24, Z+1	; 0x01
    a7cc:	8f 93       	push	r24
xSerialxPrintf(&xSerial3Port,"Trv_position = %d \r\n", comp->Trv_position);	
    a7ce:	80 81       	ld	r24, Z
    a7d0:	8f 93       	push	r24
    a7d2:	88 e6       	ldi	r24, 0x68	; 104
    a7d4:	96 e0       	ldi	r25, 0x06	; 6
    a7d6:	9f 93       	push	r25
    a7d8:	8f 93       	push	r24
    a7da:	df 93       	push	r29
    a7dc:	cf 93       	push	r28
    a7de:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a7e2:	f8 01       	movw	r30, r16
    a7e4:	80 81       	ld	r24, Z
    a7e6:	91 81       	ldd	r25, Z+1	; 0x01
return (steps - comp->Trv_position);//comp->Steps;
    a7e8:	2d b7       	in	r18, 0x3d	; 61
    a7ea:	3e b7       	in	r19, 0x3e	; 62
    a7ec:	24 5f       	subi	r18, 0xF4	; 244
    a7ee:	3f 4f       	sbci	r19, 0xFF	; 255
    a7f0:	0f b6       	in	r0, 0x3f	; 63
    a7f2:	f8 94       	cli
    a7f4:	3e bf       	out	0x3e, r19	; 62
    a7f6:	0f be       	out	0x3f, r0	; 63
    a7f8:	2d bf       	out	0x3d, r18	; 61
    a7fa:	f7 01       	movw	r30, r14
    a7fc:	e8 1b       	sub	r30, r24
    a7fe:	f9 0b       	sbc	r31, r25
}
    a800:	cf 01       	movw	r24, r30
    a802:	df 91       	pop	r29
    a804:	cf 91       	pop	r28
    a806:	1f 91       	pop	r17
    a808:	0f 91       	pop	r16
    a80a:	ff 90       	pop	r15
    a80c:	ef 90       	pop	r14
    a80e:	df 90       	pop	r13
    a810:	cf 90       	pop	r12
    a812:	bf 90       	pop	r11
    a814:	af 90       	pop	r10
    a816:	9f 90       	pop	r9
    a818:	8f 90       	pop	r8
    a81a:	08 95       	ret

0000a81c <calibration>:
    a81c:	21 e0       	ldi	r18, 0x01	; 1
    a81e:	fc 01       	movw	r30, r24
    a820:	27 83       	std	Z+7, r18	; 0x07
////////////////////////////////////////////////////////////////////////////////////////////////////////
void calibration(xCompressor *comp)
{
	comp->calibrate=true;
	comp->Steps=-240;
    a822:	e4 59       	subi	r30, 0x94	; 148
    a824:	ff 4f       	sbci	r31, 0xFF	; 255
    a826:	20 e1       	ldi	r18, 0x10	; 16
    a828:	3f ef       	ldi	r19, 0xFF	; 255
    a82a:	31 83       	std	Z+1, r19	; 0x01
    a82c:	20 83       	st	Z, r18
	comp->Trv_position=240;
    a82e:	32 96       	adiw	r30, 0x02	; 2
    a830:	20 ef       	ldi	r18, 0xF0	; 240
    a832:	30 e0       	ldi	r19, 0x00	; 0
    a834:	31 83       	std	Z+1, r19	; 0x01
    a836:	20 83       	st	Z, r18
    a838:	08 95       	ret

0000a83a <__subsf3>:
    a83a:	50 58       	subi	r21, 0x80	; 128

0000a83c <__addsf3>:
    a83c:	bb 27       	eor	r27, r27
    a83e:	aa 27       	eor	r26, r26
    a840:	0e d0       	rcall	.+28     	; 0xa85e <__addsf3x>
    a842:	75 c1       	rjmp	.+746    	; 0xab2e <__fp_round>
    a844:	66 d1       	rcall	.+716    	; 0xab12 <__fp_pscA>
    a846:	30 f0       	brcs	.+12     	; 0xa854 <__addsf3+0x18>
    a848:	6b d1       	rcall	.+726    	; 0xab20 <__fp_pscB>
    a84a:	20 f0       	brcs	.+8      	; 0xa854 <__addsf3+0x18>
    a84c:	31 f4       	brne	.+12     	; 0xa85a <__addsf3+0x1e>
    a84e:	9f 3f       	cpi	r25, 0xFF	; 255
    a850:	11 f4       	brne	.+4      	; 0xa856 <__addsf3+0x1a>
    a852:	1e f4       	brtc	.+6      	; 0xa85a <__addsf3+0x1e>
    a854:	5b c1       	rjmp	.+694    	; 0xab0c <__fp_nan>
    a856:	0e f4       	brtc	.+2      	; 0xa85a <__addsf3+0x1e>
    a858:	e0 95       	com	r30
    a85a:	e7 fb       	bst	r30, 7
    a85c:	51 c1       	rjmp	.+674    	; 0xab00 <__fp_inf>

0000a85e <__addsf3x>:
    a85e:	e9 2f       	mov	r30, r25
    a860:	77 d1       	rcall	.+750    	; 0xab50 <__fp_split3>
    a862:	80 f3       	brcs	.-32     	; 0xa844 <__addsf3+0x8>
    a864:	ba 17       	cp	r27, r26
    a866:	62 07       	cpc	r22, r18
    a868:	73 07       	cpc	r23, r19
    a86a:	84 07       	cpc	r24, r20
    a86c:	95 07       	cpc	r25, r21
    a86e:	18 f0       	brcs	.+6      	; 0xa876 <__addsf3x+0x18>
    a870:	71 f4       	brne	.+28     	; 0xa88e <__addsf3x+0x30>
    a872:	9e f5       	brtc	.+102    	; 0xa8da <__addsf3x+0x7c>
    a874:	8f c1       	rjmp	.+798    	; 0xab94 <__fp_zero>
    a876:	0e f4       	brtc	.+2      	; 0xa87a <__addsf3x+0x1c>
    a878:	e0 95       	com	r30
    a87a:	0b 2e       	mov	r0, r27
    a87c:	ba 2f       	mov	r27, r26
    a87e:	a0 2d       	mov	r26, r0
    a880:	0b 01       	movw	r0, r22
    a882:	b9 01       	movw	r22, r18
    a884:	90 01       	movw	r18, r0
    a886:	0c 01       	movw	r0, r24
    a888:	ca 01       	movw	r24, r20
    a88a:	a0 01       	movw	r20, r0
    a88c:	11 24       	eor	r1, r1
    a88e:	ff 27       	eor	r31, r31
    a890:	59 1b       	sub	r21, r25
    a892:	99 f0       	breq	.+38     	; 0xa8ba <__addsf3x+0x5c>
    a894:	59 3f       	cpi	r21, 0xF9	; 249
    a896:	50 f4       	brcc	.+20     	; 0xa8ac <__addsf3x+0x4e>
    a898:	50 3e       	cpi	r21, 0xE0	; 224
    a89a:	68 f1       	brcs	.+90     	; 0xa8f6 <__addsf3x+0x98>
    a89c:	1a 16       	cp	r1, r26
    a89e:	f0 40       	sbci	r31, 0x00	; 0
    a8a0:	a2 2f       	mov	r26, r18
    a8a2:	23 2f       	mov	r18, r19
    a8a4:	34 2f       	mov	r19, r20
    a8a6:	44 27       	eor	r20, r20
    a8a8:	58 5f       	subi	r21, 0xF8	; 248
    a8aa:	f3 cf       	rjmp	.-26     	; 0xa892 <__addsf3x+0x34>
    a8ac:	46 95       	lsr	r20
    a8ae:	37 95       	ror	r19
    a8b0:	27 95       	ror	r18
    a8b2:	a7 95       	ror	r26
    a8b4:	f0 40       	sbci	r31, 0x00	; 0
    a8b6:	53 95       	inc	r21
    a8b8:	c9 f7       	brne	.-14     	; 0xa8ac <__addsf3x+0x4e>
    a8ba:	7e f4       	brtc	.+30     	; 0xa8da <__addsf3x+0x7c>
    a8bc:	1f 16       	cp	r1, r31
    a8be:	ba 0b       	sbc	r27, r26
    a8c0:	62 0b       	sbc	r22, r18
    a8c2:	73 0b       	sbc	r23, r19
    a8c4:	84 0b       	sbc	r24, r20
    a8c6:	ba f0       	brmi	.+46     	; 0xa8f6 <__addsf3x+0x98>
    a8c8:	91 50       	subi	r25, 0x01	; 1
    a8ca:	a1 f0       	breq	.+40     	; 0xa8f4 <__addsf3x+0x96>
    a8cc:	ff 0f       	add	r31, r31
    a8ce:	bb 1f       	adc	r27, r27
    a8d0:	66 1f       	adc	r22, r22
    a8d2:	77 1f       	adc	r23, r23
    a8d4:	88 1f       	adc	r24, r24
    a8d6:	c2 f7       	brpl	.-16     	; 0xa8c8 <__addsf3x+0x6a>
    a8d8:	0e c0       	rjmp	.+28     	; 0xa8f6 <__addsf3x+0x98>
    a8da:	ba 0f       	add	r27, r26
    a8dc:	62 1f       	adc	r22, r18
    a8de:	73 1f       	adc	r23, r19
    a8e0:	84 1f       	adc	r24, r20
    a8e2:	48 f4       	brcc	.+18     	; 0xa8f6 <__addsf3x+0x98>
    a8e4:	87 95       	ror	r24
    a8e6:	77 95       	ror	r23
    a8e8:	67 95       	ror	r22
    a8ea:	b7 95       	ror	r27
    a8ec:	f7 95       	ror	r31
    a8ee:	9e 3f       	cpi	r25, 0xFE	; 254
    a8f0:	08 f0       	brcs	.+2      	; 0xa8f4 <__addsf3x+0x96>
    a8f2:	b3 cf       	rjmp	.-154    	; 0xa85a <__addsf3+0x1e>
    a8f4:	93 95       	inc	r25
    a8f6:	88 0f       	add	r24, r24
    a8f8:	08 f0       	brcs	.+2      	; 0xa8fc <__addsf3x+0x9e>
    a8fa:	99 27       	eor	r25, r25
    a8fc:	ee 0f       	add	r30, r30
    a8fe:	97 95       	ror	r25
    a900:	87 95       	ror	r24
    a902:	08 95       	ret

0000a904 <__cmpsf2>:
    a904:	d9 d0       	rcall	.+434    	; 0xaab8 <__fp_cmp>
    a906:	08 f4       	brcc	.+2      	; 0xa90a <__cmpsf2+0x6>
    a908:	81 e0       	ldi	r24, 0x01	; 1
    a90a:	08 95       	ret

0000a90c <__divsf3>:
    a90c:	0c d0       	rcall	.+24     	; 0xa926 <__divsf3x>
    a90e:	0f c1       	rjmp	.+542    	; 0xab2e <__fp_round>
    a910:	07 d1       	rcall	.+526    	; 0xab20 <__fp_pscB>
    a912:	40 f0       	brcs	.+16     	; 0xa924 <__divsf3+0x18>
    a914:	fe d0       	rcall	.+508    	; 0xab12 <__fp_pscA>
    a916:	30 f0       	brcs	.+12     	; 0xa924 <__divsf3+0x18>
    a918:	21 f4       	brne	.+8      	; 0xa922 <__divsf3+0x16>
    a91a:	5f 3f       	cpi	r21, 0xFF	; 255
    a91c:	19 f0       	breq	.+6      	; 0xa924 <__divsf3+0x18>
    a91e:	f0 c0       	rjmp	.+480    	; 0xab00 <__fp_inf>
    a920:	51 11       	cpse	r21, r1
    a922:	39 c1       	rjmp	.+626    	; 0xab96 <__fp_szero>
    a924:	f3 c0       	rjmp	.+486    	; 0xab0c <__fp_nan>

0000a926 <__divsf3x>:
    a926:	14 d1       	rcall	.+552    	; 0xab50 <__fp_split3>
    a928:	98 f3       	brcs	.-26     	; 0xa910 <__divsf3+0x4>

0000a92a <__divsf3_pse>:
    a92a:	99 23       	and	r25, r25
    a92c:	c9 f3       	breq	.-14     	; 0xa920 <__divsf3+0x14>
    a92e:	55 23       	and	r21, r21
    a930:	b1 f3       	breq	.-20     	; 0xa91e <__divsf3+0x12>
    a932:	95 1b       	sub	r25, r21
    a934:	55 0b       	sbc	r21, r21
    a936:	bb 27       	eor	r27, r27
    a938:	aa 27       	eor	r26, r26
    a93a:	62 17       	cp	r22, r18
    a93c:	73 07       	cpc	r23, r19
    a93e:	84 07       	cpc	r24, r20
    a940:	38 f0       	brcs	.+14     	; 0xa950 <__divsf3_pse+0x26>
    a942:	9f 5f       	subi	r25, 0xFF	; 255
    a944:	5f 4f       	sbci	r21, 0xFF	; 255
    a946:	22 0f       	add	r18, r18
    a948:	33 1f       	adc	r19, r19
    a94a:	44 1f       	adc	r20, r20
    a94c:	aa 1f       	adc	r26, r26
    a94e:	a9 f3       	breq	.-22     	; 0xa93a <__divsf3_pse+0x10>
    a950:	33 d0       	rcall	.+102    	; 0xa9b8 <__divsf3_pse+0x8e>
    a952:	0e 2e       	mov	r0, r30
    a954:	3a f0       	brmi	.+14     	; 0xa964 <__divsf3_pse+0x3a>
    a956:	e0 e8       	ldi	r30, 0x80	; 128
    a958:	30 d0       	rcall	.+96     	; 0xa9ba <__divsf3_pse+0x90>
    a95a:	91 50       	subi	r25, 0x01	; 1
    a95c:	50 40       	sbci	r21, 0x00	; 0
    a95e:	e6 95       	lsr	r30
    a960:	00 1c       	adc	r0, r0
    a962:	ca f7       	brpl	.-14     	; 0xa956 <__divsf3_pse+0x2c>
    a964:	29 d0       	rcall	.+82     	; 0xa9b8 <__divsf3_pse+0x8e>
    a966:	fe 2f       	mov	r31, r30
    a968:	27 d0       	rcall	.+78     	; 0xa9b8 <__divsf3_pse+0x8e>
    a96a:	66 0f       	add	r22, r22
    a96c:	77 1f       	adc	r23, r23
    a96e:	88 1f       	adc	r24, r24
    a970:	bb 1f       	adc	r27, r27
    a972:	26 17       	cp	r18, r22
    a974:	37 07       	cpc	r19, r23
    a976:	48 07       	cpc	r20, r24
    a978:	ab 07       	cpc	r26, r27
    a97a:	b0 e8       	ldi	r27, 0x80	; 128
    a97c:	09 f0       	breq	.+2      	; 0xa980 <__divsf3_pse+0x56>
    a97e:	bb 0b       	sbc	r27, r27
    a980:	80 2d       	mov	r24, r0
    a982:	bf 01       	movw	r22, r30
    a984:	ff 27       	eor	r31, r31
    a986:	93 58       	subi	r25, 0x83	; 131
    a988:	5f 4f       	sbci	r21, 0xFF	; 255
    a98a:	2a f0       	brmi	.+10     	; 0xa996 <__divsf3_pse+0x6c>
    a98c:	9e 3f       	cpi	r25, 0xFE	; 254
    a98e:	51 05       	cpc	r21, r1
    a990:	68 f0       	brcs	.+26     	; 0xa9ac <__divsf3_pse+0x82>
    a992:	b6 c0       	rjmp	.+364    	; 0xab00 <__fp_inf>
    a994:	00 c1       	rjmp	.+512    	; 0xab96 <__fp_szero>
    a996:	5f 3f       	cpi	r21, 0xFF	; 255
    a998:	ec f3       	brlt	.-6      	; 0xa994 <__divsf3_pse+0x6a>
    a99a:	98 3e       	cpi	r25, 0xE8	; 232
    a99c:	dc f3       	brlt	.-10     	; 0xa994 <__divsf3_pse+0x6a>
    a99e:	86 95       	lsr	r24
    a9a0:	77 95       	ror	r23
    a9a2:	67 95       	ror	r22
    a9a4:	b7 95       	ror	r27
    a9a6:	f7 95       	ror	r31
    a9a8:	9f 5f       	subi	r25, 0xFF	; 255
    a9aa:	c9 f7       	brne	.-14     	; 0xa99e <__divsf3_pse+0x74>
    a9ac:	88 0f       	add	r24, r24
    a9ae:	91 1d       	adc	r25, r1
    a9b0:	96 95       	lsr	r25
    a9b2:	87 95       	ror	r24
    a9b4:	97 f9       	bld	r25, 7
    a9b6:	08 95       	ret
    a9b8:	e1 e0       	ldi	r30, 0x01	; 1
    a9ba:	66 0f       	add	r22, r22
    a9bc:	77 1f       	adc	r23, r23
    a9be:	88 1f       	adc	r24, r24
    a9c0:	bb 1f       	adc	r27, r27
    a9c2:	62 17       	cp	r22, r18
    a9c4:	73 07       	cpc	r23, r19
    a9c6:	84 07       	cpc	r24, r20
    a9c8:	ba 07       	cpc	r27, r26
    a9ca:	20 f0       	brcs	.+8      	; 0xa9d4 <__divsf3_pse+0xaa>
    a9cc:	62 1b       	sub	r22, r18
    a9ce:	73 0b       	sbc	r23, r19
    a9d0:	84 0b       	sbc	r24, r20
    a9d2:	ba 0b       	sbc	r27, r26
    a9d4:	ee 1f       	adc	r30, r30
    a9d6:	88 f7       	brcc	.-30     	; 0xa9ba <__divsf3_pse+0x90>
    a9d8:	e0 95       	com	r30
    a9da:	08 95       	ret

0000a9dc <__fixsfsi>:
    a9dc:	04 d0       	rcall	.+8      	; 0xa9e6 <__fixunssfsi>
    a9de:	68 94       	set
    a9e0:	b1 11       	cpse	r27, r1
    a9e2:	d9 c0       	rjmp	.+434    	; 0xab96 <__fp_szero>
    a9e4:	08 95       	ret

0000a9e6 <__fixunssfsi>:
    a9e6:	bc d0       	rcall	.+376    	; 0xab60 <__fp_splitA>
    a9e8:	88 f0       	brcs	.+34     	; 0xaa0c <__fixunssfsi+0x26>
    a9ea:	9f 57       	subi	r25, 0x7F	; 127
    a9ec:	90 f0       	brcs	.+36     	; 0xaa12 <__fixunssfsi+0x2c>
    a9ee:	b9 2f       	mov	r27, r25
    a9f0:	99 27       	eor	r25, r25
    a9f2:	b7 51       	subi	r27, 0x17	; 23
    a9f4:	a0 f0       	brcs	.+40     	; 0xaa1e <__fixunssfsi+0x38>
    a9f6:	d1 f0       	breq	.+52     	; 0xaa2c <__fixunssfsi+0x46>
    a9f8:	66 0f       	add	r22, r22
    a9fa:	77 1f       	adc	r23, r23
    a9fc:	88 1f       	adc	r24, r24
    a9fe:	99 1f       	adc	r25, r25
    aa00:	1a f0       	brmi	.+6      	; 0xaa08 <__fixunssfsi+0x22>
    aa02:	ba 95       	dec	r27
    aa04:	c9 f7       	brne	.-14     	; 0xa9f8 <__fixunssfsi+0x12>
    aa06:	12 c0       	rjmp	.+36     	; 0xaa2c <__fixunssfsi+0x46>
    aa08:	b1 30       	cpi	r27, 0x01	; 1
    aa0a:	81 f0       	breq	.+32     	; 0xaa2c <__fixunssfsi+0x46>
    aa0c:	c3 d0       	rcall	.+390    	; 0xab94 <__fp_zero>
    aa0e:	b1 e0       	ldi	r27, 0x01	; 1
    aa10:	08 95       	ret
    aa12:	c0 c0       	rjmp	.+384    	; 0xab94 <__fp_zero>
    aa14:	67 2f       	mov	r22, r23
    aa16:	78 2f       	mov	r23, r24
    aa18:	88 27       	eor	r24, r24
    aa1a:	b8 5f       	subi	r27, 0xF8	; 248
    aa1c:	39 f0       	breq	.+14     	; 0xaa2c <__fixunssfsi+0x46>
    aa1e:	b9 3f       	cpi	r27, 0xF9	; 249
    aa20:	cc f3       	brlt	.-14     	; 0xaa14 <__fixunssfsi+0x2e>
    aa22:	86 95       	lsr	r24
    aa24:	77 95       	ror	r23
    aa26:	67 95       	ror	r22
    aa28:	b3 95       	inc	r27
    aa2a:	d9 f7       	brne	.-10     	; 0xaa22 <__fixunssfsi+0x3c>
    aa2c:	3e f4       	brtc	.+14     	; 0xaa3c <__fixunssfsi+0x56>
    aa2e:	90 95       	com	r25
    aa30:	80 95       	com	r24
    aa32:	70 95       	com	r23
    aa34:	61 95       	neg	r22
    aa36:	7f 4f       	sbci	r23, 0xFF	; 255
    aa38:	8f 4f       	sbci	r24, 0xFF	; 255
    aa3a:	9f 4f       	sbci	r25, 0xFF	; 255
    aa3c:	08 95       	ret

0000aa3e <__floatunsisf>:
    aa3e:	e8 94       	clt
    aa40:	09 c0       	rjmp	.+18     	; 0xaa54 <__floatsisf+0x12>

0000aa42 <__floatsisf>:
    aa42:	97 fb       	bst	r25, 7
    aa44:	3e f4       	brtc	.+14     	; 0xaa54 <__floatsisf+0x12>
    aa46:	90 95       	com	r25
    aa48:	80 95       	com	r24
    aa4a:	70 95       	com	r23
    aa4c:	61 95       	neg	r22
    aa4e:	7f 4f       	sbci	r23, 0xFF	; 255
    aa50:	8f 4f       	sbci	r24, 0xFF	; 255
    aa52:	9f 4f       	sbci	r25, 0xFF	; 255
    aa54:	99 23       	and	r25, r25
    aa56:	a9 f0       	breq	.+42     	; 0xaa82 <__floatsisf+0x40>
    aa58:	f9 2f       	mov	r31, r25
    aa5a:	96 e9       	ldi	r25, 0x96	; 150
    aa5c:	bb 27       	eor	r27, r27
    aa5e:	93 95       	inc	r25
    aa60:	f6 95       	lsr	r31
    aa62:	87 95       	ror	r24
    aa64:	77 95       	ror	r23
    aa66:	67 95       	ror	r22
    aa68:	b7 95       	ror	r27
    aa6a:	f1 11       	cpse	r31, r1
    aa6c:	f8 cf       	rjmp	.-16     	; 0xaa5e <__floatsisf+0x1c>
    aa6e:	fa f4       	brpl	.+62     	; 0xaaae <__floatsisf+0x6c>
    aa70:	bb 0f       	add	r27, r27
    aa72:	11 f4       	brne	.+4      	; 0xaa78 <__floatsisf+0x36>
    aa74:	60 ff       	sbrs	r22, 0
    aa76:	1b c0       	rjmp	.+54     	; 0xaaae <__floatsisf+0x6c>
    aa78:	6f 5f       	subi	r22, 0xFF	; 255
    aa7a:	7f 4f       	sbci	r23, 0xFF	; 255
    aa7c:	8f 4f       	sbci	r24, 0xFF	; 255
    aa7e:	9f 4f       	sbci	r25, 0xFF	; 255
    aa80:	16 c0       	rjmp	.+44     	; 0xaaae <__floatsisf+0x6c>
    aa82:	88 23       	and	r24, r24
    aa84:	11 f0       	breq	.+4      	; 0xaa8a <__floatsisf+0x48>
    aa86:	96 e9       	ldi	r25, 0x96	; 150
    aa88:	11 c0       	rjmp	.+34     	; 0xaaac <__floatsisf+0x6a>
    aa8a:	77 23       	and	r23, r23
    aa8c:	21 f0       	breq	.+8      	; 0xaa96 <__floatsisf+0x54>
    aa8e:	9e e8       	ldi	r25, 0x8E	; 142
    aa90:	87 2f       	mov	r24, r23
    aa92:	76 2f       	mov	r23, r22
    aa94:	05 c0       	rjmp	.+10     	; 0xaaa0 <__floatsisf+0x5e>
    aa96:	66 23       	and	r22, r22
    aa98:	71 f0       	breq	.+28     	; 0xaab6 <__floatsisf+0x74>
    aa9a:	96 e8       	ldi	r25, 0x86	; 134
    aa9c:	86 2f       	mov	r24, r22
    aa9e:	70 e0       	ldi	r23, 0x00	; 0
    aaa0:	60 e0       	ldi	r22, 0x00	; 0
    aaa2:	2a f0       	brmi	.+10     	; 0xaaae <__floatsisf+0x6c>
    aaa4:	9a 95       	dec	r25
    aaa6:	66 0f       	add	r22, r22
    aaa8:	77 1f       	adc	r23, r23
    aaaa:	88 1f       	adc	r24, r24
    aaac:	da f7       	brpl	.-10     	; 0xaaa4 <__floatsisf+0x62>
    aaae:	88 0f       	add	r24, r24
    aab0:	96 95       	lsr	r25
    aab2:	87 95       	ror	r24
    aab4:	97 f9       	bld	r25, 7
    aab6:	08 95       	ret

0000aab8 <__fp_cmp>:
    aab8:	99 0f       	add	r25, r25
    aaba:	00 08       	sbc	r0, r0
    aabc:	55 0f       	add	r21, r21
    aabe:	aa 0b       	sbc	r26, r26
    aac0:	e0 e8       	ldi	r30, 0x80	; 128
    aac2:	fe ef       	ldi	r31, 0xFE	; 254
    aac4:	16 16       	cp	r1, r22
    aac6:	17 06       	cpc	r1, r23
    aac8:	e8 07       	cpc	r30, r24
    aaca:	f9 07       	cpc	r31, r25
    aacc:	c0 f0       	brcs	.+48     	; 0xaafe <__fp_cmp+0x46>
    aace:	12 16       	cp	r1, r18
    aad0:	13 06       	cpc	r1, r19
    aad2:	e4 07       	cpc	r30, r20
    aad4:	f5 07       	cpc	r31, r21
    aad6:	98 f0       	brcs	.+38     	; 0xaafe <__fp_cmp+0x46>
    aad8:	62 1b       	sub	r22, r18
    aada:	73 0b       	sbc	r23, r19
    aadc:	84 0b       	sbc	r24, r20
    aade:	95 0b       	sbc	r25, r21
    aae0:	39 f4       	brne	.+14     	; 0xaaf0 <__fp_cmp+0x38>
    aae2:	0a 26       	eor	r0, r26
    aae4:	61 f0       	breq	.+24     	; 0xaafe <__fp_cmp+0x46>
    aae6:	23 2b       	or	r18, r19
    aae8:	24 2b       	or	r18, r20
    aaea:	25 2b       	or	r18, r21
    aaec:	21 f4       	brne	.+8      	; 0xaaf6 <__fp_cmp+0x3e>
    aaee:	08 95       	ret
    aaf0:	0a 26       	eor	r0, r26
    aaf2:	09 f4       	brne	.+2      	; 0xaaf6 <__fp_cmp+0x3e>
    aaf4:	a1 40       	sbci	r26, 0x01	; 1
    aaf6:	a6 95       	lsr	r26
    aaf8:	8f ef       	ldi	r24, 0xFF	; 255
    aafa:	81 1d       	adc	r24, r1
    aafc:	81 1d       	adc	r24, r1
    aafe:	08 95       	ret

0000ab00 <__fp_inf>:
    ab00:	97 f9       	bld	r25, 7
    ab02:	9f 67       	ori	r25, 0x7F	; 127
    ab04:	80 e8       	ldi	r24, 0x80	; 128
    ab06:	70 e0       	ldi	r23, 0x00	; 0
    ab08:	60 e0       	ldi	r22, 0x00	; 0
    ab0a:	08 95       	ret

0000ab0c <__fp_nan>:
    ab0c:	9f ef       	ldi	r25, 0xFF	; 255
    ab0e:	80 ec       	ldi	r24, 0xC0	; 192
    ab10:	08 95       	ret

0000ab12 <__fp_pscA>:
    ab12:	00 24       	eor	r0, r0
    ab14:	0a 94       	dec	r0
    ab16:	16 16       	cp	r1, r22
    ab18:	17 06       	cpc	r1, r23
    ab1a:	18 06       	cpc	r1, r24
    ab1c:	09 06       	cpc	r0, r25
    ab1e:	08 95       	ret

0000ab20 <__fp_pscB>:
    ab20:	00 24       	eor	r0, r0
    ab22:	0a 94       	dec	r0
    ab24:	12 16       	cp	r1, r18
    ab26:	13 06       	cpc	r1, r19
    ab28:	14 06       	cpc	r1, r20
    ab2a:	05 06       	cpc	r0, r21
    ab2c:	08 95       	ret

0000ab2e <__fp_round>:
    ab2e:	09 2e       	mov	r0, r25
    ab30:	03 94       	inc	r0
    ab32:	00 0c       	add	r0, r0
    ab34:	11 f4       	brne	.+4      	; 0xab3a <__fp_round+0xc>
    ab36:	88 23       	and	r24, r24
    ab38:	52 f0       	brmi	.+20     	; 0xab4e <__fp_round+0x20>
    ab3a:	bb 0f       	add	r27, r27
    ab3c:	40 f4       	brcc	.+16     	; 0xab4e <__fp_round+0x20>
    ab3e:	bf 2b       	or	r27, r31
    ab40:	11 f4       	brne	.+4      	; 0xab46 <__fp_round+0x18>
    ab42:	60 ff       	sbrs	r22, 0
    ab44:	04 c0       	rjmp	.+8      	; 0xab4e <__fp_round+0x20>
    ab46:	6f 5f       	subi	r22, 0xFF	; 255
    ab48:	7f 4f       	sbci	r23, 0xFF	; 255
    ab4a:	8f 4f       	sbci	r24, 0xFF	; 255
    ab4c:	9f 4f       	sbci	r25, 0xFF	; 255
    ab4e:	08 95       	ret

0000ab50 <__fp_split3>:
    ab50:	57 fd       	sbrc	r21, 7
    ab52:	90 58       	subi	r25, 0x80	; 128
    ab54:	44 0f       	add	r20, r20
    ab56:	55 1f       	adc	r21, r21
    ab58:	59 f0       	breq	.+22     	; 0xab70 <__fp_splitA+0x10>
    ab5a:	5f 3f       	cpi	r21, 0xFF	; 255
    ab5c:	71 f0       	breq	.+28     	; 0xab7a <__fp_splitA+0x1a>
    ab5e:	47 95       	ror	r20

0000ab60 <__fp_splitA>:
    ab60:	88 0f       	add	r24, r24
    ab62:	97 fb       	bst	r25, 7
    ab64:	99 1f       	adc	r25, r25
    ab66:	61 f0       	breq	.+24     	; 0xab80 <__fp_splitA+0x20>
    ab68:	9f 3f       	cpi	r25, 0xFF	; 255
    ab6a:	79 f0       	breq	.+30     	; 0xab8a <__fp_splitA+0x2a>
    ab6c:	87 95       	ror	r24
    ab6e:	08 95       	ret
    ab70:	12 16       	cp	r1, r18
    ab72:	13 06       	cpc	r1, r19
    ab74:	14 06       	cpc	r1, r20
    ab76:	55 1f       	adc	r21, r21
    ab78:	f2 cf       	rjmp	.-28     	; 0xab5e <__fp_split3+0xe>
    ab7a:	46 95       	lsr	r20
    ab7c:	f1 df       	rcall	.-30     	; 0xab60 <__fp_splitA>
    ab7e:	08 c0       	rjmp	.+16     	; 0xab90 <__fp_splitA+0x30>
    ab80:	16 16       	cp	r1, r22
    ab82:	17 06       	cpc	r1, r23
    ab84:	18 06       	cpc	r1, r24
    ab86:	99 1f       	adc	r25, r25
    ab88:	f1 cf       	rjmp	.-30     	; 0xab6c <__fp_splitA+0xc>
    ab8a:	86 95       	lsr	r24
    ab8c:	71 05       	cpc	r23, r1
    ab8e:	61 05       	cpc	r22, r1
    ab90:	08 94       	sec
    ab92:	08 95       	ret

0000ab94 <__fp_zero>:
    ab94:	e8 94       	clt

0000ab96 <__fp_szero>:
    ab96:	bb 27       	eor	r27, r27
    ab98:	66 27       	eor	r22, r22
    ab9a:	77 27       	eor	r23, r23
    ab9c:	cb 01       	movw	r24, r22
    ab9e:	97 f9       	bld	r25, 7
    aba0:	08 95       	ret

0000aba2 <__gesf2>:
    aba2:	8a df       	rcall	.-236    	; 0xaab8 <__fp_cmp>
    aba4:	08 f4       	brcc	.+2      	; 0xaba8 <__gesf2+0x6>
    aba6:	8f ef       	ldi	r24, 0xFF	; 255
    aba8:	08 95       	ret
    abaa:	0e f0       	brts	.+2      	; 0xabae <__gesf2+0xc>
    abac:	a6 c0       	rjmp	.+332    	; 0xacfa <__fp_mpack>
    abae:	ae cf       	rjmp	.-164    	; 0xab0c <__fp_nan>
    abb0:	68 94       	set
    abb2:	a6 cf       	rjmp	.-180    	; 0xab00 <__fp_inf>

0000abb4 <log>:
    abb4:	d5 df       	rcall	.-86     	; 0xab60 <__fp_splitA>
    abb6:	c8 f3       	brcs	.-14     	; 0xabaa <__gesf2+0x8>
    abb8:	99 23       	and	r25, r25
    abba:	d1 f3       	breq	.-12     	; 0xabb0 <__gesf2+0xe>
    abbc:	c6 f3       	brts	.-16     	; 0xabae <__gesf2+0xc>
    abbe:	df 93       	push	r29
    abc0:	cf 93       	push	r28
    abc2:	1f 93       	push	r17
    abc4:	0f 93       	push	r16
    abc6:	ff 92       	push	r15
    abc8:	c9 2f       	mov	r28, r25
    abca:	dd 27       	eor	r29, r29
    abcc:	88 23       	and	r24, r24
    abce:	2a f0       	brmi	.+10     	; 0xabda <log+0x26>
    abd0:	21 97       	sbiw	r28, 0x01	; 1
    abd2:	66 0f       	add	r22, r22
    abd4:	77 1f       	adc	r23, r23
    abd6:	88 1f       	adc	r24, r24
    abd8:	da f7       	brpl	.-10     	; 0xabd0 <log+0x1c>
    abda:	20 e0       	ldi	r18, 0x00	; 0
    abdc:	30 e0       	ldi	r19, 0x00	; 0
    abde:	40 e8       	ldi	r20, 0x80	; 128
    abe0:	5f eb       	ldi	r21, 0xBF	; 191
    abe2:	9f e3       	ldi	r25, 0x3F	; 63
    abe4:	88 39       	cpi	r24, 0x98	; 152
    abe6:	20 f0       	brcs	.+8      	; 0xabf0 <log+0x3c>
    abe8:	80 3e       	cpi	r24, 0xE0	; 224
    abea:	30 f0       	brcs	.+12     	; 0xabf8 <log+0x44>
    abec:	21 96       	adiw	r28, 0x01	; 1
    abee:	8f 77       	andi	r24, 0x7F	; 127
    abf0:	25 de       	rcall	.-950    	; 0xa83c <__addsf3>
    abf2:	e4 e9       	ldi	r30, 0x94	; 148
    abf4:	f8 e0       	ldi	r31, 0x08	; 8
    abf6:	03 c0       	rjmp	.+6      	; 0xabfe <log+0x4a>
    abf8:	21 de       	rcall	.-958    	; 0xa83c <__addsf3>
    abfa:	e1 ec       	ldi	r30, 0xC1	; 193
    abfc:	f8 e0       	ldi	r31, 0x08	; 8
    abfe:	8b d0       	rcall	.+278    	; 0xad16 <__fp_powser>
    ac00:	8b 01       	movw	r16, r22
    ac02:	be 01       	movw	r22, r28
    ac04:	ec 01       	movw	r28, r24
    ac06:	fb 2e       	mov	r15, r27
    ac08:	6f 57       	subi	r22, 0x7F	; 127
    ac0a:	71 09       	sbc	r23, r1
    ac0c:	75 95       	asr	r23
    ac0e:	77 1f       	adc	r23, r23
    ac10:	88 0b       	sbc	r24, r24
    ac12:	99 0b       	sbc	r25, r25
    ac14:	16 df       	rcall	.-468    	; 0xaa42 <__floatsisf>
    ac16:	28 e1       	ldi	r18, 0x18	; 24
    ac18:	32 e7       	ldi	r19, 0x72	; 114
    ac1a:	41 e3       	ldi	r20, 0x31	; 49
    ac1c:	5f e3       	ldi	r21, 0x3F	; 63
    ac1e:	16 d0       	rcall	.+44     	; 0xac4c <__mulsf3x>
    ac20:	af 2d       	mov	r26, r15
    ac22:	98 01       	movw	r18, r16
    ac24:	ae 01       	movw	r20, r28
    ac26:	ff 90       	pop	r15
    ac28:	0f 91       	pop	r16
    ac2a:	1f 91       	pop	r17
    ac2c:	cf 91       	pop	r28
    ac2e:	df 91       	pop	r29
    ac30:	16 de       	rcall	.-980    	; 0xa85e <__addsf3x>
    ac32:	7d cf       	rjmp	.-262    	; 0xab2e <__fp_round>

0000ac34 <__mulsf3>:
    ac34:	0b d0       	rcall	.+22     	; 0xac4c <__mulsf3x>
    ac36:	7b cf       	rjmp	.-266    	; 0xab2e <__fp_round>
    ac38:	6c df       	rcall	.-296    	; 0xab12 <__fp_pscA>
    ac3a:	28 f0       	brcs	.+10     	; 0xac46 <__mulsf3+0x12>
    ac3c:	71 df       	rcall	.-286    	; 0xab20 <__fp_pscB>
    ac3e:	18 f0       	brcs	.+6      	; 0xac46 <__mulsf3+0x12>
    ac40:	95 23       	and	r25, r21
    ac42:	09 f0       	breq	.+2      	; 0xac46 <__mulsf3+0x12>
    ac44:	5d cf       	rjmp	.-326    	; 0xab00 <__fp_inf>
    ac46:	62 cf       	rjmp	.-316    	; 0xab0c <__fp_nan>
    ac48:	11 24       	eor	r1, r1
    ac4a:	a5 cf       	rjmp	.-182    	; 0xab96 <__fp_szero>

0000ac4c <__mulsf3x>:
    ac4c:	81 df       	rcall	.-254    	; 0xab50 <__fp_split3>
    ac4e:	a0 f3       	brcs	.-24     	; 0xac38 <__mulsf3+0x4>

0000ac50 <__mulsf3_pse>:
    ac50:	95 9f       	mul	r25, r21
    ac52:	d1 f3       	breq	.-12     	; 0xac48 <__mulsf3+0x14>
    ac54:	95 0f       	add	r25, r21
    ac56:	50 e0       	ldi	r21, 0x00	; 0
    ac58:	55 1f       	adc	r21, r21
    ac5a:	62 9f       	mul	r22, r18
    ac5c:	f0 01       	movw	r30, r0
    ac5e:	72 9f       	mul	r23, r18
    ac60:	bb 27       	eor	r27, r27
    ac62:	f0 0d       	add	r31, r0
    ac64:	b1 1d       	adc	r27, r1
    ac66:	63 9f       	mul	r22, r19
    ac68:	aa 27       	eor	r26, r26
    ac6a:	f0 0d       	add	r31, r0
    ac6c:	b1 1d       	adc	r27, r1
    ac6e:	aa 1f       	adc	r26, r26
    ac70:	64 9f       	mul	r22, r20
    ac72:	66 27       	eor	r22, r22
    ac74:	b0 0d       	add	r27, r0
    ac76:	a1 1d       	adc	r26, r1
    ac78:	66 1f       	adc	r22, r22
    ac7a:	82 9f       	mul	r24, r18
    ac7c:	22 27       	eor	r18, r18
    ac7e:	b0 0d       	add	r27, r0
    ac80:	a1 1d       	adc	r26, r1
    ac82:	62 1f       	adc	r22, r18
    ac84:	73 9f       	mul	r23, r19
    ac86:	b0 0d       	add	r27, r0
    ac88:	a1 1d       	adc	r26, r1
    ac8a:	62 1f       	adc	r22, r18
    ac8c:	83 9f       	mul	r24, r19
    ac8e:	a0 0d       	add	r26, r0
    ac90:	61 1d       	adc	r22, r1
    ac92:	22 1f       	adc	r18, r18
    ac94:	74 9f       	mul	r23, r20
    ac96:	33 27       	eor	r19, r19
    ac98:	a0 0d       	add	r26, r0
    ac9a:	61 1d       	adc	r22, r1
    ac9c:	23 1f       	adc	r18, r19
    ac9e:	84 9f       	mul	r24, r20
    aca0:	60 0d       	add	r22, r0
    aca2:	21 1d       	adc	r18, r1
    aca4:	82 2f       	mov	r24, r18
    aca6:	76 2f       	mov	r23, r22
    aca8:	6a 2f       	mov	r22, r26
    acaa:	11 24       	eor	r1, r1
    acac:	9f 57       	subi	r25, 0x7F	; 127
    acae:	50 40       	sbci	r21, 0x00	; 0
    acb0:	8a f0       	brmi	.+34     	; 0xacd4 <__mulsf3_pse+0x84>
    acb2:	e1 f0       	breq	.+56     	; 0xacec <__mulsf3_pse+0x9c>
    acb4:	88 23       	and	r24, r24
    acb6:	4a f0       	brmi	.+18     	; 0xacca <__mulsf3_pse+0x7a>
    acb8:	ee 0f       	add	r30, r30
    acba:	ff 1f       	adc	r31, r31
    acbc:	bb 1f       	adc	r27, r27
    acbe:	66 1f       	adc	r22, r22
    acc0:	77 1f       	adc	r23, r23
    acc2:	88 1f       	adc	r24, r24
    acc4:	91 50       	subi	r25, 0x01	; 1
    acc6:	50 40       	sbci	r21, 0x00	; 0
    acc8:	a9 f7       	brne	.-22     	; 0xacb4 <__mulsf3_pse+0x64>
    acca:	9e 3f       	cpi	r25, 0xFE	; 254
    accc:	51 05       	cpc	r21, r1
    acce:	70 f0       	brcs	.+28     	; 0xacec <__mulsf3_pse+0x9c>
    acd0:	17 cf       	rjmp	.-466    	; 0xab00 <__fp_inf>
    acd2:	61 cf       	rjmp	.-318    	; 0xab96 <__fp_szero>
    acd4:	5f 3f       	cpi	r21, 0xFF	; 255
    acd6:	ec f3       	brlt	.-6      	; 0xacd2 <__mulsf3_pse+0x82>
    acd8:	98 3e       	cpi	r25, 0xE8	; 232
    acda:	dc f3       	brlt	.-10     	; 0xacd2 <__mulsf3_pse+0x82>
    acdc:	86 95       	lsr	r24
    acde:	77 95       	ror	r23
    ace0:	67 95       	ror	r22
    ace2:	b7 95       	ror	r27
    ace4:	f7 95       	ror	r31
    ace6:	e7 95       	ror	r30
    ace8:	9f 5f       	subi	r25, 0xFF	; 255
    acea:	c1 f7       	brne	.-16     	; 0xacdc <__mulsf3_pse+0x8c>
    acec:	fe 2b       	or	r31, r30
    acee:	88 0f       	add	r24, r24
    acf0:	91 1d       	adc	r25, r1
    acf2:	96 95       	lsr	r25
    acf4:	87 95       	ror	r24
    acf6:	97 f9       	bld	r25, 7
    acf8:	08 95       	ret

0000acfa <__fp_mpack>:
    acfa:	9f 3f       	cpi	r25, 0xFF	; 255
    acfc:	31 f0       	breq	.+12     	; 0xad0a <__fp_mpack_finite+0xc>

0000acfe <__fp_mpack_finite>:
    acfe:	91 50       	subi	r25, 0x01	; 1
    ad00:	20 f4       	brcc	.+8      	; 0xad0a <__fp_mpack_finite+0xc>
    ad02:	87 95       	ror	r24
    ad04:	77 95       	ror	r23
    ad06:	67 95       	ror	r22
    ad08:	b7 95       	ror	r27
    ad0a:	88 0f       	add	r24, r24
    ad0c:	91 1d       	adc	r25, r1
    ad0e:	96 95       	lsr	r25
    ad10:	87 95       	ror	r24
    ad12:	97 f9       	bld	r25, 7
    ad14:	08 95       	ret

0000ad16 <__fp_powser>:
    ad16:	df 93       	push	r29
    ad18:	cf 93       	push	r28
    ad1a:	1f 93       	push	r17
    ad1c:	0f 93       	push	r16
    ad1e:	ff 92       	push	r15
    ad20:	ef 92       	push	r14
    ad22:	df 92       	push	r13
    ad24:	7b 01       	movw	r14, r22
    ad26:	8c 01       	movw	r16, r24
    ad28:	68 94       	set
    ad2a:	05 c0       	rjmp	.+10     	; 0xad36 <__fp_powser+0x20>
    ad2c:	da 2e       	mov	r13, r26
    ad2e:	ef 01       	movw	r28, r30
    ad30:	8d df       	rcall	.-230    	; 0xac4c <__mulsf3x>
    ad32:	fe 01       	movw	r30, r28
    ad34:	e8 94       	clt
    ad36:	a5 91       	lpm	r26, Z+
    ad38:	25 91       	lpm	r18, Z+
    ad3a:	35 91       	lpm	r19, Z+
    ad3c:	45 91       	lpm	r20, Z+
    ad3e:	55 91       	lpm	r21, Z+
    ad40:	ae f3       	brts	.-22     	; 0xad2c <__fp_powser+0x16>
    ad42:	ef 01       	movw	r28, r30
    ad44:	8c dd       	rcall	.-1256   	; 0xa85e <__addsf3x>
    ad46:	fe 01       	movw	r30, r28
    ad48:	97 01       	movw	r18, r14
    ad4a:	a8 01       	movw	r20, r16
    ad4c:	da 94       	dec	r13
    ad4e:	79 f7       	brne	.-34     	; 0xad2e <__fp_powser+0x18>
    ad50:	df 90       	pop	r13
    ad52:	ef 90       	pop	r14
    ad54:	ff 90       	pop	r15
    ad56:	0f 91       	pop	r16
    ad58:	1f 91       	pop	r17
    ad5a:	cf 91       	pop	r28
    ad5c:	df 91       	pop	r29
    ad5e:	08 95       	ret

0000ad60 <vfprintf>:
    ad60:	2f 92       	push	r2
    ad62:	3f 92       	push	r3
    ad64:	4f 92       	push	r4
    ad66:	5f 92       	push	r5
    ad68:	6f 92       	push	r6
    ad6a:	7f 92       	push	r7
    ad6c:	8f 92       	push	r8
    ad6e:	9f 92       	push	r9
    ad70:	af 92       	push	r10
    ad72:	bf 92       	push	r11
    ad74:	cf 92       	push	r12
    ad76:	df 92       	push	r13
    ad78:	ef 92       	push	r14
    ad7a:	ff 92       	push	r15
    ad7c:	0f 93       	push	r16
    ad7e:	1f 93       	push	r17
    ad80:	cf 93       	push	r28
    ad82:	df 93       	push	r29
    ad84:	cd b7       	in	r28, 0x3d	; 61
    ad86:	de b7       	in	r29, 0x3e	; 62
    ad88:	60 97       	sbiw	r28, 0x10	; 16
    ad8a:	0f b6       	in	r0, 0x3f	; 63
    ad8c:	f8 94       	cli
    ad8e:	de bf       	out	0x3e, r29	; 62
    ad90:	0f be       	out	0x3f, r0	; 63
    ad92:	cd bf       	out	0x3d, r28	; 61
    ad94:	7c 01       	movw	r14, r24
    ad96:	1b 01       	movw	r2, r22
    ad98:	6a 01       	movw	r12, r20
    ad9a:	fc 01       	movw	r30, r24
    ad9c:	17 82       	std	Z+7, r1	; 0x07
    ad9e:	16 82       	std	Z+6, r1	; 0x06
    ada0:	83 81       	ldd	r24, Z+3	; 0x03
    ada2:	81 ff       	sbrs	r24, 1
    ada4:	2a c3       	rjmp	.+1620   	; 0xb3fa <vfprintf+0x69a>
    ada6:	9e 01       	movw	r18, r28
    ada8:	2f 5f       	subi	r18, 0xFF	; 255
    adaa:	3f 4f       	sbci	r19, 0xFF	; 255
    adac:	39 01       	movw	r6, r18
    adae:	f7 01       	movw	r30, r14
    adb0:	93 81       	ldd	r25, Z+3	; 0x03
    adb2:	f1 01       	movw	r30, r2
    adb4:	93 fd       	sbrc	r25, 3
    adb6:	85 91       	lpm	r24, Z+
    adb8:	93 ff       	sbrs	r25, 3
    adba:	81 91       	ld	r24, Z+
    adbc:	1f 01       	movw	r2, r30
    adbe:	88 23       	and	r24, r24
    adc0:	09 f4       	brne	.+2      	; 0xadc4 <vfprintf+0x64>
    adc2:	17 c3       	rjmp	.+1582   	; 0xb3f2 <vfprintf+0x692>
    adc4:	85 32       	cpi	r24, 0x25	; 37
    adc6:	39 f4       	brne	.+14     	; 0xadd6 <vfprintf+0x76>
    adc8:	93 fd       	sbrc	r25, 3
    adca:	85 91       	lpm	r24, Z+
    adcc:	93 ff       	sbrs	r25, 3
    adce:	81 91       	ld	r24, Z+
    add0:	1f 01       	movw	r2, r30
    add2:	85 32       	cpi	r24, 0x25	; 37
    add4:	31 f4       	brne	.+12     	; 0xade2 <vfprintf+0x82>
    add6:	b7 01       	movw	r22, r14
    add8:	90 e0       	ldi	r25, 0x00	; 0
    adda:	a3 d5       	rcall	.+2886   	; 0xb922 <fputc>
    addc:	56 01       	movw	r10, r12
    adde:	65 01       	movw	r12, r10
    ade0:	e6 cf       	rjmp	.-52     	; 0xadae <vfprintf+0x4e>
    ade2:	10 e0       	ldi	r17, 0x00	; 0
    ade4:	51 2c       	mov	r5, r1
    ade6:	91 2c       	mov	r9, r1
    ade8:	ff e1       	ldi	r31, 0x1F	; 31
    adea:	f9 15       	cp	r31, r9
    adec:	d8 f0       	brcs	.+54     	; 0xae24 <vfprintf+0xc4>
    adee:	8b 32       	cpi	r24, 0x2B	; 43
    adf0:	79 f0       	breq	.+30     	; 0xae10 <vfprintf+0xb0>
    adf2:	38 f4       	brcc	.+14     	; 0xae02 <vfprintf+0xa2>
    adf4:	80 32       	cpi	r24, 0x20	; 32
    adf6:	79 f0       	breq	.+30     	; 0xae16 <vfprintf+0xb6>
    adf8:	83 32       	cpi	r24, 0x23	; 35
    adfa:	a1 f4       	brne	.+40     	; 0xae24 <vfprintf+0xc4>
    adfc:	f9 2d       	mov	r31, r9
    adfe:	f0 61       	ori	r31, 0x10	; 16
    ae00:	2e c0       	rjmp	.+92     	; 0xae5e <vfprintf+0xfe>
    ae02:	8d 32       	cpi	r24, 0x2D	; 45
    ae04:	61 f0       	breq	.+24     	; 0xae1e <vfprintf+0xbe>
    ae06:	80 33       	cpi	r24, 0x30	; 48
    ae08:	69 f4       	brne	.+26     	; 0xae24 <vfprintf+0xc4>
    ae0a:	29 2d       	mov	r18, r9
    ae0c:	21 60       	ori	r18, 0x01	; 1
    ae0e:	2d c0       	rjmp	.+90     	; 0xae6a <vfprintf+0x10a>
    ae10:	39 2d       	mov	r19, r9
    ae12:	32 60       	ori	r19, 0x02	; 2
    ae14:	93 2e       	mov	r9, r19
    ae16:	89 2d       	mov	r24, r9
    ae18:	84 60       	ori	r24, 0x04	; 4
    ae1a:	98 2e       	mov	r9, r24
    ae1c:	2a c0       	rjmp	.+84     	; 0xae72 <vfprintf+0x112>
    ae1e:	e9 2d       	mov	r30, r9
    ae20:	e8 60       	ori	r30, 0x08	; 8
    ae22:	15 c0       	rjmp	.+42     	; 0xae4e <vfprintf+0xee>
    ae24:	97 fc       	sbrc	r9, 7
    ae26:	2d c0       	rjmp	.+90     	; 0xae82 <vfprintf+0x122>
    ae28:	20 ed       	ldi	r18, 0xD0	; 208
    ae2a:	28 0f       	add	r18, r24
    ae2c:	2a 30       	cpi	r18, 0x0A	; 10
    ae2e:	88 f4       	brcc	.+34     	; 0xae52 <vfprintf+0xf2>
    ae30:	96 fe       	sbrs	r9, 6
    ae32:	06 c0       	rjmp	.+12     	; 0xae40 <vfprintf+0xe0>
    ae34:	3a e0       	ldi	r19, 0x0A	; 10
    ae36:	13 9f       	mul	r17, r19
    ae38:	20 0d       	add	r18, r0
    ae3a:	11 24       	eor	r1, r1
    ae3c:	12 2f       	mov	r17, r18
    ae3e:	19 c0       	rjmp	.+50     	; 0xae72 <vfprintf+0x112>
    ae40:	8a e0       	ldi	r24, 0x0A	; 10
    ae42:	58 9e       	mul	r5, r24
    ae44:	20 0d       	add	r18, r0
    ae46:	11 24       	eor	r1, r1
    ae48:	52 2e       	mov	r5, r18
    ae4a:	e9 2d       	mov	r30, r9
    ae4c:	e0 62       	ori	r30, 0x20	; 32
    ae4e:	9e 2e       	mov	r9, r30
    ae50:	10 c0       	rjmp	.+32     	; 0xae72 <vfprintf+0x112>
    ae52:	8e 32       	cpi	r24, 0x2E	; 46
    ae54:	31 f4       	brne	.+12     	; 0xae62 <vfprintf+0x102>
    ae56:	96 fc       	sbrc	r9, 6
    ae58:	cc c2       	rjmp	.+1432   	; 0xb3f2 <vfprintf+0x692>
    ae5a:	f9 2d       	mov	r31, r9
    ae5c:	f0 64       	ori	r31, 0x40	; 64
    ae5e:	9f 2e       	mov	r9, r31
    ae60:	08 c0       	rjmp	.+16     	; 0xae72 <vfprintf+0x112>
    ae62:	8c 36       	cpi	r24, 0x6C	; 108
    ae64:	21 f4       	brne	.+8      	; 0xae6e <vfprintf+0x10e>
    ae66:	29 2d       	mov	r18, r9
    ae68:	20 68       	ori	r18, 0x80	; 128
    ae6a:	92 2e       	mov	r9, r18
    ae6c:	02 c0       	rjmp	.+4      	; 0xae72 <vfprintf+0x112>
    ae6e:	88 36       	cpi	r24, 0x68	; 104
    ae70:	41 f4       	brne	.+16     	; 0xae82 <vfprintf+0x122>
    ae72:	f1 01       	movw	r30, r2
    ae74:	93 fd       	sbrc	r25, 3
    ae76:	85 91       	lpm	r24, Z+
    ae78:	93 ff       	sbrs	r25, 3
    ae7a:	81 91       	ld	r24, Z+
    ae7c:	1f 01       	movw	r2, r30
    ae7e:	81 11       	cpse	r24, r1
    ae80:	b3 cf       	rjmp	.-154    	; 0xade8 <vfprintf+0x88>
    ae82:	9b eb       	ldi	r25, 0xBB	; 187
    ae84:	98 0f       	add	r25, r24
    ae86:	93 30       	cpi	r25, 0x03	; 3
    ae88:	20 f4       	brcc	.+8      	; 0xae92 <vfprintf+0x132>
    ae8a:	99 2d       	mov	r25, r9
    ae8c:	90 61       	ori	r25, 0x10	; 16
    ae8e:	80 5e       	subi	r24, 0xE0	; 224
    ae90:	07 c0       	rjmp	.+14     	; 0xaea0 <vfprintf+0x140>
    ae92:	9b e9       	ldi	r25, 0x9B	; 155
    ae94:	98 0f       	add	r25, r24
    ae96:	93 30       	cpi	r25, 0x03	; 3
    ae98:	08 f0       	brcs	.+2      	; 0xae9c <vfprintf+0x13c>
    ae9a:	59 c1       	rjmp	.+690    	; 0xb14e <vfprintf+0x3ee>
    ae9c:	99 2d       	mov	r25, r9
    ae9e:	9f 7e       	andi	r25, 0xEF	; 239
    aea0:	96 ff       	sbrs	r25, 6
    aea2:	16 e0       	ldi	r17, 0x06	; 6
    aea4:	9f 73       	andi	r25, 0x3F	; 63
    aea6:	99 2e       	mov	r9, r25
    aea8:	85 36       	cpi	r24, 0x65	; 101
    aeaa:	19 f4       	brne	.+6      	; 0xaeb2 <vfprintf+0x152>
    aeac:	90 64       	ori	r25, 0x40	; 64
    aeae:	99 2e       	mov	r9, r25
    aeb0:	08 c0       	rjmp	.+16     	; 0xaec2 <vfprintf+0x162>
    aeb2:	86 36       	cpi	r24, 0x66	; 102
    aeb4:	21 f4       	brne	.+8      	; 0xaebe <vfprintf+0x15e>
    aeb6:	39 2f       	mov	r19, r25
    aeb8:	30 68       	ori	r19, 0x80	; 128
    aeba:	93 2e       	mov	r9, r19
    aebc:	02 c0       	rjmp	.+4      	; 0xaec2 <vfprintf+0x162>
    aebe:	11 11       	cpse	r17, r1
    aec0:	11 50       	subi	r17, 0x01	; 1
    aec2:	97 fe       	sbrs	r9, 7
    aec4:	07 c0       	rjmp	.+14     	; 0xaed4 <vfprintf+0x174>
    aec6:	1c 33       	cpi	r17, 0x3C	; 60
    aec8:	50 f4       	brcc	.+20     	; 0xaede <vfprintf+0x17e>
    aeca:	44 24       	eor	r4, r4
    aecc:	43 94       	inc	r4
    aece:	41 0e       	add	r4, r17
    aed0:	27 e0       	ldi	r18, 0x07	; 7
    aed2:	0b c0       	rjmp	.+22     	; 0xaeea <vfprintf+0x18a>
    aed4:	18 30       	cpi	r17, 0x08	; 8
    aed6:	38 f0       	brcs	.+14     	; 0xaee6 <vfprintf+0x186>
    aed8:	27 e0       	ldi	r18, 0x07	; 7
    aeda:	17 e0       	ldi	r17, 0x07	; 7
    aedc:	05 c0       	rjmp	.+10     	; 0xaee8 <vfprintf+0x188>
    aede:	27 e0       	ldi	r18, 0x07	; 7
    aee0:	9c e3       	ldi	r25, 0x3C	; 60
    aee2:	49 2e       	mov	r4, r25
    aee4:	02 c0       	rjmp	.+4      	; 0xaeea <vfprintf+0x18a>
    aee6:	21 2f       	mov	r18, r17
    aee8:	41 2c       	mov	r4, r1
    aeea:	56 01       	movw	r10, r12
    aeec:	84 e0       	ldi	r24, 0x04	; 4
    aeee:	a8 0e       	add	r10, r24
    aef0:	b1 1c       	adc	r11, r1
    aef2:	f6 01       	movw	r30, r12
    aef4:	60 81       	ld	r22, Z
    aef6:	71 81       	ldd	r23, Z+1	; 0x01
    aef8:	82 81       	ldd	r24, Z+2	; 0x02
    aefa:	93 81       	ldd	r25, Z+3	; 0x03
    aefc:	04 2d       	mov	r16, r4
    aefe:	a3 01       	movw	r20, r6
    af00:	12 d4       	rcall	.+2084   	; 0xb726 <__ftoa_engine>
    af02:	6c 01       	movw	r12, r24
    af04:	f9 81       	ldd	r31, Y+1	; 0x01
    af06:	fc 87       	std	Y+12, r31	; 0x0c
    af08:	f0 ff       	sbrs	r31, 0
    af0a:	02 c0       	rjmp	.+4      	; 0xaf10 <vfprintf+0x1b0>
    af0c:	f3 ff       	sbrs	r31, 3
    af0e:	06 c0       	rjmp	.+12     	; 0xaf1c <vfprintf+0x1bc>
    af10:	91 fc       	sbrc	r9, 1
    af12:	06 c0       	rjmp	.+12     	; 0xaf20 <vfprintf+0x1c0>
    af14:	92 fe       	sbrs	r9, 2
    af16:	06 c0       	rjmp	.+12     	; 0xaf24 <vfprintf+0x1c4>
    af18:	00 e2       	ldi	r16, 0x20	; 32
    af1a:	05 c0       	rjmp	.+10     	; 0xaf26 <vfprintf+0x1c6>
    af1c:	0d e2       	ldi	r16, 0x2D	; 45
    af1e:	03 c0       	rjmp	.+6      	; 0xaf26 <vfprintf+0x1c6>
    af20:	0b e2       	ldi	r16, 0x2B	; 43
    af22:	01 c0       	rjmp	.+2      	; 0xaf26 <vfprintf+0x1c6>
    af24:	00 e0       	ldi	r16, 0x00	; 0
    af26:	8c 85       	ldd	r24, Y+12	; 0x0c
    af28:	8c 70       	andi	r24, 0x0C	; 12
    af2a:	19 f0       	breq	.+6      	; 0xaf32 <vfprintf+0x1d2>
    af2c:	01 11       	cpse	r16, r1
    af2e:	43 c2       	rjmp	.+1158   	; 0xb3b6 <vfprintf+0x656>
    af30:	80 c2       	rjmp	.+1280   	; 0xb432 <vfprintf+0x6d2>
    af32:	97 fe       	sbrs	r9, 7
    af34:	10 c0       	rjmp	.+32     	; 0xaf56 <vfprintf+0x1f6>
    af36:	4c 0c       	add	r4, r12
    af38:	fc 85       	ldd	r31, Y+12	; 0x0c
    af3a:	f4 ff       	sbrs	r31, 4
    af3c:	04 c0       	rjmp	.+8      	; 0xaf46 <vfprintf+0x1e6>
    af3e:	8a 81       	ldd	r24, Y+2	; 0x02
    af40:	81 33       	cpi	r24, 0x31	; 49
    af42:	09 f4       	brne	.+2      	; 0xaf46 <vfprintf+0x1e6>
    af44:	4a 94       	dec	r4
    af46:	14 14       	cp	r1, r4
    af48:	74 f5       	brge	.+92     	; 0xafa6 <vfprintf+0x246>
    af4a:	28 e0       	ldi	r18, 0x08	; 8
    af4c:	24 15       	cp	r18, r4
    af4e:	78 f5       	brcc	.+94     	; 0xafae <vfprintf+0x24e>
    af50:	88 e0       	ldi	r24, 0x08	; 8
    af52:	48 2e       	mov	r4, r24
    af54:	2c c0       	rjmp	.+88     	; 0xafae <vfprintf+0x24e>
    af56:	96 fc       	sbrc	r9, 6
    af58:	2a c0       	rjmp	.+84     	; 0xafae <vfprintf+0x24e>
    af5a:	81 2f       	mov	r24, r17
    af5c:	90 e0       	ldi	r25, 0x00	; 0
    af5e:	8c 15       	cp	r24, r12
    af60:	9d 05       	cpc	r25, r13
    af62:	9c f0       	brlt	.+38     	; 0xaf8a <vfprintf+0x22a>
    af64:	3c ef       	ldi	r19, 0xFC	; 252
    af66:	c3 16       	cp	r12, r19
    af68:	3f ef       	ldi	r19, 0xFF	; 255
    af6a:	d3 06       	cpc	r13, r19
    af6c:	74 f0       	brlt	.+28     	; 0xaf8a <vfprintf+0x22a>
    af6e:	89 2d       	mov	r24, r9
    af70:	80 68       	ori	r24, 0x80	; 128
    af72:	98 2e       	mov	r9, r24
    af74:	0a c0       	rjmp	.+20     	; 0xaf8a <vfprintf+0x22a>
    af76:	e2 e0       	ldi	r30, 0x02	; 2
    af78:	f0 e0       	ldi	r31, 0x00	; 0
    af7a:	ec 0f       	add	r30, r28
    af7c:	fd 1f       	adc	r31, r29
    af7e:	e1 0f       	add	r30, r17
    af80:	f1 1d       	adc	r31, r1
    af82:	80 81       	ld	r24, Z
    af84:	80 33       	cpi	r24, 0x30	; 48
    af86:	19 f4       	brne	.+6      	; 0xaf8e <vfprintf+0x22e>
    af88:	11 50       	subi	r17, 0x01	; 1
    af8a:	11 11       	cpse	r17, r1
    af8c:	f4 cf       	rjmp	.-24     	; 0xaf76 <vfprintf+0x216>
    af8e:	97 fe       	sbrs	r9, 7
    af90:	0e c0       	rjmp	.+28     	; 0xafae <vfprintf+0x24e>
    af92:	44 24       	eor	r4, r4
    af94:	43 94       	inc	r4
    af96:	41 0e       	add	r4, r17
    af98:	81 2f       	mov	r24, r17
    af9a:	90 e0       	ldi	r25, 0x00	; 0
    af9c:	c8 16       	cp	r12, r24
    af9e:	d9 06       	cpc	r13, r25
    afa0:	2c f4       	brge	.+10     	; 0xafac <vfprintf+0x24c>
    afa2:	1c 19       	sub	r17, r12
    afa4:	04 c0       	rjmp	.+8      	; 0xafae <vfprintf+0x24e>
    afa6:	44 24       	eor	r4, r4
    afa8:	43 94       	inc	r4
    afaa:	01 c0       	rjmp	.+2      	; 0xafae <vfprintf+0x24e>
    afac:	10 e0       	ldi	r17, 0x00	; 0
    afae:	97 fe       	sbrs	r9, 7
    afb0:	06 c0       	rjmp	.+12     	; 0xafbe <vfprintf+0x25e>
    afb2:	1c 14       	cp	r1, r12
    afb4:	1d 04       	cpc	r1, r13
    afb6:	34 f4       	brge	.+12     	; 0xafc4 <vfprintf+0x264>
    afb8:	c6 01       	movw	r24, r12
    afba:	01 96       	adiw	r24, 0x01	; 1
    afbc:	05 c0       	rjmp	.+10     	; 0xafc8 <vfprintf+0x268>
    afbe:	85 e0       	ldi	r24, 0x05	; 5
    afc0:	90 e0       	ldi	r25, 0x00	; 0
    afc2:	02 c0       	rjmp	.+4      	; 0xafc8 <vfprintf+0x268>
    afc4:	81 e0       	ldi	r24, 0x01	; 1
    afc6:	90 e0       	ldi	r25, 0x00	; 0
    afc8:	01 11       	cpse	r16, r1
    afca:	01 96       	adiw	r24, 0x01	; 1
    afcc:	11 23       	and	r17, r17
    afce:	31 f0       	breq	.+12     	; 0xafdc <vfprintf+0x27c>
    afd0:	21 2f       	mov	r18, r17
    afd2:	30 e0       	ldi	r19, 0x00	; 0
    afd4:	2f 5f       	subi	r18, 0xFF	; 255
    afd6:	3f 4f       	sbci	r19, 0xFF	; 255
    afd8:	82 0f       	add	r24, r18
    afda:	93 1f       	adc	r25, r19
    afdc:	25 2d       	mov	r18, r5
    afde:	30 e0       	ldi	r19, 0x00	; 0
    afe0:	82 17       	cp	r24, r18
    afe2:	93 07       	cpc	r25, r19
    afe4:	14 f4       	brge	.+4      	; 0xafea <vfprintf+0x28a>
    afe6:	58 1a       	sub	r5, r24
    afe8:	01 c0       	rjmp	.+2      	; 0xafec <vfprintf+0x28c>
    afea:	51 2c       	mov	r5, r1
    afec:	89 2d       	mov	r24, r9
    afee:	89 70       	andi	r24, 0x09	; 9
    aff0:	41 f4       	brne	.+16     	; 0xb002 <vfprintf+0x2a2>
    aff2:	55 20       	and	r5, r5
    aff4:	31 f0       	breq	.+12     	; 0xb002 <vfprintf+0x2a2>
    aff6:	b7 01       	movw	r22, r14
    aff8:	80 e2       	ldi	r24, 0x20	; 32
    affa:	90 e0       	ldi	r25, 0x00	; 0
    affc:	92 d4       	rcall	.+2340   	; 0xb922 <fputc>
    affe:	5a 94       	dec	r5
    b000:	f8 cf       	rjmp	.-16     	; 0xaff2 <vfprintf+0x292>
    b002:	00 23       	and	r16, r16
    b004:	21 f0       	breq	.+8      	; 0xb00e <vfprintf+0x2ae>
    b006:	b7 01       	movw	r22, r14
    b008:	80 2f       	mov	r24, r16
    b00a:	90 e0       	ldi	r25, 0x00	; 0
    b00c:	8a d4       	rcall	.+2324   	; 0xb922 <fputc>
    b00e:	93 fc       	sbrc	r9, 3
    b010:	08 c0       	rjmp	.+16     	; 0xb022 <vfprintf+0x2c2>
    b012:	55 20       	and	r5, r5
    b014:	31 f0       	breq	.+12     	; 0xb022 <vfprintf+0x2c2>
    b016:	b7 01       	movw	r22, r14
    b018:	80 e3       	ldi	r24, 0x30	; 48
    b01a:	90 e0       	ldi	r25, 0x00	; 0
    b01c:	82 d4       	rcall	.+2308   	; 0xb922 <fputc>
    b01e:	5a 94       	dec	r5
    b020:	f8 cf       	rjmp	.-16     	; 0xb012 <vfprintf+0x2b2>
    b022:	97 fe       	sbrs	r9, 7
    b024:	4a c0       	rjmp	.+148    	; 0xb0ba <vfprintf+0x35a>
    b026:	46 01       	movw	r8, r12
    b028:	d7 fe       	sbrs	r13, 7
    b02a:	02 c0       	rjmp	.+4      	; 0xb030 <vfprintf+0x2d0>
    b02c:	81 2c       	mov	r8, r1
    b02e:	91 2c       	mov	r9, r1
    b030:	c6 01       	movw	r24, r12
    b032:	88 19       	sub	r24, r8
    b034:	99 09       	sbc	r25, r9
    b036:	f3 01       	movw	r30, r6
    b038:	e8 0f       	add	r30, r24
    b03a:	f9 1f       	adc	r31, r25
    b03c:	fe 87       	std	Y+14, r31	; 0x0e
    b03e:	ed 87       	std	Y+13, r30	; 0x0d
    b040:	96 01       	movw	r18, r12
    b042:	24 19       	sub	r18, r4
    b044:	31 09       	sbc	r19, r1
    b046:	38 8b       	std	Y+16, r19	; 0x10
    b048:	2f 87       	std	Y+15, r18	; 0x0f
    b04a:	01 2f       	mov	r16, r17
    b04c:	10 e0       	ldi	r17, 0x00	; 0
    b04e:	11 95       	neg	r17
    b050:	01 95       	neg	r16
    b052:	11 09       	sbc	r17, r1
    b054:	3f ef       	ldi	r19, 0xFF	; 255
    b056:	83 16       	cp	r8, r19
    b058:	93 06       	cpc	r9, r19
    b05a:	21 f4       	brne	.+8      	; 0xb064 <vfprintf+0x304>
    b05c:	b7 01       	movw	r22, r14
    b05e:	8e e2       	ldi	r24, 0x2E	; 46
    b060:	90 e0       	ldi	r25, 0x00	; 0
    b062:	5f d4       	rcall	.+2238   	; 0xb922 <fputc>
    b064:	c8 14       	cp	r12, r8
    b066:	d9 04       	cpc	r13, r9
    b068:	4c f0       	brlt	.+18     	; 0xb07c <vfprintf+0x31c>
    b06a:	8f 85       	ldd	r24, Y+15	; 0x0f
    b06c:	98 89       	ldd	r25, Y+16	; 0x10
    b06e:	88 15       	cp	r24, r8
    b070:	99 05       	cpc	r25, r9
    b072:	24 f4       	brge	.+8      	; 0xb07c <vfprintf+0x31c>
    b074:	ed 85       	ldd	r30, Y+13	; 0x0d
    b076:	fe 85       	ldd	r31, Y+14	; 0x0e
    b078:	81 81       	ldd	r24, Z+1	; 0x01
    b07a:	01 c0       	rjmp	.+2      	; 0xb07e <vfprintf+0x31e>
    b07c:	80 e3       	ldi	r24, 0x30	; 48
    b07e:	f1 e0       	ldi	r31, 0x01	; 1
    b080:	8f 1a       	sub	r8, r31
    b082:	91 08       	sbc	r9, r1
    b084:	2d 85       	ldd	r18, Y+13	; 0x0d
    b086:	3e 85       	ldd	r19, Y+14	; 0x0e
    b088:	2f 5f       	subi	r18, 0xFF	; 255
    b08a:	3f 4f       	sbci	r19, 0xFF	; 255
    b08c:	3e 87       	std	Y+14, r19	; 0x0e
    b08e:	2d 87       	std	Y+13, r18	; 0x0d
    b090:	80 16       	cp	r8, r16
    b092:	91 06       	cpc	r9, r17
    b094:	24 f0       	brlt	.+8      	; 0xb09e <vfprintf+0x33e>
    b096:	b7 01       	movw	r22, r14
    b098:	90 e0       	ldi	r25, 0x00	; 0
    b09a:	43 d4       	rcall	.+2182   	; 0xb922 <fputc>
    b09c:	db cf       	rjmp	.-74     	; 0xb054 <vfprintf+0x2f4>
    b09e:	c8 14       	cp	r12, r8
    b0a0:	d9 04       	cpc	r13, r9
    b0a2:	41 f4       	brne	.+16     	; 0xb0b4 <vfprintf+0x354>
    b0a4:	9a 81       	ldd	r25, Y+2	; 0x02
    b0a6:	96 33       	cpi	r25, 0x36	; 54
    b0a8:	20 f4       	brcc	.+8      	; 0xb0b2 <vfprintf+0x352>
    b0aa:	95 33       	cpi	r25, 0x35	; 53
    b0ac:	19 f4       	brne	.+6      	; 0xb0b4 <vfprintf+0x354>
    b0ae:	3c 85       	ldd	r19, Y+12	; 0x0c
    b0b0:	34 ff       	sbrs	r19, 4
    b0b2:	81 e3       	ldi	r24, 0x31	; 49
    b0b4:	b7 01       	movw	r22, r14
    b0b6:	90 e0       	ldi	r25, 0x00	; 0
    b0b8:	48 c0       	rjmp	.+144    	; 0xb14a <vfprintf+0x3ea>
    b0ba:	8a 81       	ldd	r24, Y+2	; 0x02
    b0bc:	81 33       	cpi	r24, 0x31	; 49
    b0be:	19 f0       	breq	.+6      	; 0xb0c6 <vfprintf+0x366>
    b0c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    b0c2:	9f 7e       	andi	r25, 0xEF	; 239
    b0c4:	9c 87       	std	Y+12, r25	; 0x0c
    b0c6:	b7 01       	movw	r22, r14
    b0c8:	90 e0       	ldi	r25, 0x00	; 0
    b0ca:	2b d4       	rcall	.+2134   	; 0xb922 <fputc>
    b0cc:	11 11       	cpse	r17, r1
    b0ce:	05 c0       	rjmp	.+10     	; 0xb0da <vfprintf+0x37a>
    b0d0:	94 fc       	sbrc	r9, 4
    b0d2:	16 c0       	rjmp	.+44     	; 0xb100 <vfprintf+0x3a0>
    b0d4:	85 e6       	ldi	r24, 0x65	; 101
    b0d6:	90 e0       	ldi	r25, 0x00	; 0
    b0d8:	15 c0       	rjmp	.+42     	; 0xb104 <vfprintf+0x3a4>
    b0da:	b7 01       	movw	r22, r14
    b0dc:	8e e2       	ldi	r24, 0x2E	; 46
    b0de:	90 e0       	ldi	r25, 0x00	; 0
    b0e0:	20 d4       	rcall	.+2112   	; 0xb922 <fputc>
    b0e2:	1e 5f       	subi	r17, 0xFE	; 254
    b0e4:	82 e0       	ldi	r24, 0x02	; 2
    b0e6:	01 e0       	ldi	r16, 0x01	; 1
    b0e8:	08 0f       	add	r16, r24
    b0ea:	f3 01       	movw	r30, r6
    b0ec:	e8 0f       	add	r30, r24
    b0ee:	f1 1d       	adc	r31, r1
    b0f0:	80 81       	ld	r24, Z
    b0f2:	b7 01       	movw	r22, r14
    b0f4:	90 e0       	ldi	r25, 0x00	; 0
    b0f6:	15 d4       	rcall	.+2090   	; 0xb922 <fputc>
    b0f8:	80 2f       	mov	r24, r16
    b0fa:	01 13       	cpse	r16, r17
    b0fc:	f4 cf       	rjmp	.-24     	; 0xb0e6 <vfprintf+0x386>
    b0fe:	e8 cf       	rjmp	.-48     	; 0xb0d0 <vfprintf+0x370>
    b100:	85 e4       	ldi	r24, 0x45	; 69
    b102:	90 e0       	ldi	r25, 0x00	; 0
    b104:	b7 01       	movw	r22, r14
    b106:	0d d4       	rcall	.+2074   	; 0xb922 <fputc>
    b108:	d7 fc       	sbrc	r13, 7
    b10a:	06 c0       	rjmp	.+12     	; 0xb118 <vfprintf+0x3b8>
    b10c:	c1 14       	cp	r12, r1
    b10e:	d1 04       	cpc	r13, r1
    b110:	41 f4       	brne	.+16     	; 0xb122 <vfprintf+0x3c2>
    b112:	ec 85       	ldd	r30, Y+12	; 0x0c
    b114:	e4 ff       	sbrs	r30, 4
    b116:	05 c0       	rjmp	.+10     	; 0xb122 <vfprintf+0x3c2>
    b118:	d1 94       	neg	r13
    b11a:	c1 94       	neg	r12
    b11c:	d1 08       	sbc	r13, r1
    b11e:	8d e2       	ldi	r24, 0x2D	; 45
    b120:	01 c0       	rjmp	.+2      	; 0xb124 <vfprintf+0x3c4>
    b122:	8b e2       	ldi	r24, 0x2B	; 43
    b124:	b7 01       	movw	r22, r14
    b126:	90 e0       	ldi	r25, 0x00	; 0
    b128:	fc d3       	rcall	.+2040   	; 0xb922 <fputc>
    b12a:	80 e3       	ldi	r24, 0x30	; 48
    b12c:	2a e0       	ldi	r18, 0x0A	; 10
    b12e:	c2 16       	cp	r12, r18
    b130:	d1 04       	cpc	r13, r1
    b132:	2c f0       	brlt	.+10     	; 0xb13e <vfprintf+0x3de>
    b134:	8f 5f       	subi	r24, 0xFF	; 255
    b136:	fa e0       	ldi	r31, 0x0A	; 10
    b138:	cf 1a       	sub	r12, r31
    b13a:	d1 08       	sbc	r13, r1
    b13c:	f7 cf       	rjmp	.-18     	; 0xb12c <vfprintf+0x3cc>
    b13e:	b7 01       	movw	r22, r14
    b140:	90 e0       	ldi	r25, 0x00	; 0
    b142:	ef d3       	rcall	.+2014   	; 0xb922 <fputc>
    b144:	b7 01       	movw	r22, r14
    b146:	c6 01       	movw	r24, r12
    b148:	c0 96       	adiw	r24, 0x30	; 48
    b14a:	eb d3       	rcall	.+2006   	; 0xb922 <fputc>
    b14c:	49 c1       	rjmp	.+658    	; 0xb3e0 <vfprintf+0x680>
    b14e:	83 36       	cpi	r24, 0x63	; 99
    b150:	31 f0       	breq	.+12     	; 0xb15e <vfprintf+0x3fe>
    b152:	83 37       	cpi	r24, 0x73	; 115
    b154:	79 f0       	breq	.+30     	; 0xb174 <vfprintf+0x414>
    b156:	83 35       	cpi	r24, 0x53	; 83
    b158:	09 f0       	breq	.+2      	; 0xb15c <vfprintf+0x3fc>
    b15a:	52 c0       	rjmp	.+164    	; 0xb200 <vfprintf+0x4a0>
    b15c:	1f c0       	rjmp	.+62     	; 0xb19c <vfprintf+0x43c>
    b15e:	56 01       	movw	r10, r12
    b160:	32 e0       	ldi	r19, 0x02	; 2
    b162:	a3 0e       	add	r10, r19
    b164:	b1 1c       	adc	r11, r1
    b166:	f6 01       	movw	r30, r12
    b168:	80 81       	ld	r24, Z
    b16a:	89 83       	std	Y+1, r24	; 0x01
    b16c:	01 e0       	ldi	r16, 0x01	; 1
    b16e:	10 e0       	ldi	r17, 0x00	; 0
    b170:	63 01       	movw	r12, r6
    b172:	11 c0       	rjmp	.+34     	; 0xb196 <vfprintf+0x436>
    b174:	56 01       	movw	r10, r12
    b176:	f2 e0       	ldi	r31, 0x02	; 2
    b178:	af 0e       	add	r10, r31
    b17a:	b1 1c       	adc	r11, r1
    b17c:	f6 01       	movw	r30, r12
    b17e:	c0 80       	ld	r12, Z
    b180:	d1 80       	ldd	r13, Z+1	; 0x01
    b182:	96 fe       	sbrs	r9, 6
    b184:	03 c0       	rjmp	.+6      	; 0xb18c <vfprintf+0x42c>
    b186:	61 2f       	mov	r22, r17
    b188:	70 e0       	ldi	r23, 0x00	; 0
    b18a:	02 c0       	rjmp	.+4      	; 0xb190 <vfprintf+0x430>
    b18c:	6f ef       	ldi	r22, 0xFF	; 255
    b18e:	7f ef       	ldi	r23, 0xFF	; 255
    b190:	c6 01       	movw	r24, r12
    b192:	bc d3       	rcall	.+1912   	; 0xb90c <strnlen>
    b194:	8c 01       	movw	r16, r24
    b196:	f9 2d       	mov	r31, r9
    b198:	ff 77       	andi	r31, 0x7F	; 127
    b19a:	13 c0       	rjmp	.+38     	; 0xb1c2 <vfprintf+0x462>
    b19c:	56 01       	movw	r10, r12
    b19e:	22 e0       	ldi	r18, 0x02	; 2
    b1a0:	a2 0e       	add	r10, r18
    b1a2:	b1 1c       	adc	r11, r1
    b1a4:	f6 01       	movw	r30, r12
    b1a6:	c0 80       	ld	r12, Z
    b1a8:	d1 80       	ldd	r13, Z+1	; 0x01
    b1aa:	96 fe       	sbrs	r9, 6
    b1ac:	03 c0       	rjmp	.+6      	; 0xb1b4 <vfprintf+0x454>
    b1ae:	61 2f       	mov	r22, r17
    b1b0:	70 e0       	ldi	r23, 0x00	; 0
    b1b2:	02 c0       	rjmp	.+4      	; 0xb1b8 <vfprintf+0x458>
    b1b4:	6f ef       	ldi	r22, 0xFF	; 255
    b1b6:	7f ef       	ldi	r23, 0xFF	; 255
    b1b8:	c6 01       	movw	r24, r12
    b1ba:	8d d3       	rcall	.+1818   	; 0xb8d6 <strnlen_P>
    b1bc:	8c 01       	movw	r16, r24
    b1be:	f9 2d       	mov	r31, r9
    b1c0:	f0 68       	ori	r31, 0x80	; 128
    b1c2:	9f 2e       	mov	r9, r31
    b1c4:	f3 fd       	sbrc	r31, 3
    b1c6:	18 c0       	rjmp	.+48     	; 0xb1f8 <vfprintf+0x498>
    b1c8:	85 2d       	mov	r24, r5
    b1ca:	90 e0       	ldi	r25, 0x00	; 0
    b1cc:	08 17       	cp	r16, r24
    b1ce:	19 07       	cpc	r17, r25
    b1d0:	98 f4       	brcc	.+38     	; 0xb1f8 <vfprintf+0x498>
    b1d2:	b7 01       	movw	r22, r14
    b1d4:	80 e2       	ldi	r24, 0x20	; 32
    b1d6:	90 e0       	ldi	r25, 0x00	; 0
    b1d8:	a4 d3       	rcall	.+1864   	; 0xb922 <fputc>
    b1da:	5a 94       	dec	r5
    b1dc:	f5 cf       	rjmp	.-22     	; 0xb1c8 <vfprintf+0x468>
    b1de:	f6 01       	movw	r30, r12
    b1e0:	97 fc       	sbrc	r9, 7
    b1e2:	85 91       	lpm	r24, Z+
    b1e4:	97 fe       	sbrs	r9, 7
    b1e6:	81 91       	ld	r24, Z+
    b1e8:	6f 01       	movw	r12, r30
    b1ea:	b7 01       	movw	r22, r14
    b1ec:	90 e0       	ldi	r25, 0x00	; 0
    b1ee:	99 d3       	rcall	.+1842   	; 0xb922 <fputc>
    b1f0:	51 10       	cpse	r5, r1
    b1f2:	5a 94       	dec	r5
    b1f4:	01 50       	subi	r16, 0x01	; 1
    b1f6:	11 09       	sbc	r17, r1
    b1f8:	01 15       	cp	r16, r1
    b1fa:	11 05       	cpc	r17, r1
    b1fc:	81 f7       	brne	.-32     	; 0xb1de <vfprintf+0x47e>
    b1fe:	f0 c0       	rjmp	.+480    	; 0xb3e0 <vfprintf+0x680>
    b200:	84 36       	cpi	r24, 0x64	; 100
    b202:	11 f0       	breq	.+4      	; 0xb208 <vfprintf+0x4a8>
    b204:	89 36       	cpi	r24, 0x69	; 105
    b206:	59 f5       	brne	.+86     	; 0xb25e <vfprintf+0x4fe>
    b208:	56 01       	movw	r10, r12
    b20a:	97 fe       	sbrs	r9, 7
    b20c:	09 c0       	rjmp	.+18     	; 0xb220 <vfprintf+0x4c0>
    b20e:	24 e0       	ldi	r18, 0x04	; 4
    b210:	a2 0e       	add	r10, r18
    b212:	b1 1c       	adc	r11, r1
    b214:	f6 01       	movw	r30, r12
    b216:	60 81       	ld	r22, Z
    b218:	71 81       	ldd	r23, Z+1	; 0x01
    b21a:	82 81       	ldd	r24, Z+2	; 0x02
    b21c:	93 81       	ldd	r25, Z+3	; 0x03
    b21e:	0a c0       	rjmp	.+20     	; 0xb234 <vfprintf+0x4d4>
    b220:	f2 e0       	ldi	r31, 0x02	; 2
    b222:	af 0e       	add	r10, r31
    b224:	b1 1c       	adc	r11, r1
    b226:	f6 01       	movw	r30, r12
    b228:	60 81       	ld	r22, Z
    b22a:	71 81       	ldd	r23, Z+1	; 0x01
    b22c:	07 2e       	mov	r0, r23
    b22e:	00 0c       	add	r0, r0
    b230:	88 0b       	sbc	r24, r24
    b232:	99 0b       	sbc	r25, r25
    b234:	f9 2d       	mov	r31, r9
    b236:	ff 76       	andi	r31, 0x6F	; 111
    b238:	9f 2e       	mov	r9, r31
    b23a:	97 ff       	sbrs	r25, 7
    b23c:	09 c0       	rjmp	.+18     	; 0xb250 <vfprintf+0x4f0>
    b23e:	90 95       	com	r25
    b240:	80 95       	com	r24
    b242:	70 95       	com	r23
    b244:	61 95       	neg	r22
    b246:	7f 4f       	sbci	r23, 0xFF	; 255
    b248:	8f 4f       	sbci	r24, 0xFF	; 255
    b24a:	9f 4f       	sbci	r25, 0xFF	; 255
    b24c:	f0 68       	ori	r31, 0x80	; 128
    b24e:	9f 2e       	mov	r9, r31
    b250:	2a e0       	ldi	r18, 0x0A	; 10
    b252:	30 e0       	ldi	r19, 0x00	; 0
    b254:	a3 01       	movw	r20, r6
    b256:	d9 d3       	rcall	.+1970   	; 0xba0a <__ultoa_invert>
    b258:	c8 2e       	mov	r12, r24
    b25a:	c6 18       	sub	r12, r6
    b25c:	3e c0       	rjmp	.+124    	; 0xb2da <vfprintf+0x57a>
    b25e:	09 2d       	mov	r16, r9
    b260:	85 37       	cpi	r24, 0x75	; 117
    b262:	21 f4       	brne	.+8      	; 0xb26c <vfprintf+0x50c>
    b264:	0f 7e       	andi	r16, 0xEF	; 239
    b266:	2a e0       	ldi	r18, 0x0A	; 10
    b268:	30 e0       	ldi	r19, 0x00	; 0
    b26a:	1d c0       	rjmp	.+58     	; 0xb2a6 <vfprintf+0x546>
    b26c:	09 7f       	andi	r16, 0xF9	; 249
    b26e:	8f 36       	cpi	r24, 0x6F	; 111
    b270:	91 f0       	breq	.+36     	; 0xb296 <vfprintf+0x536>
    b272:	18 f4       	brcc	.+6      	; 0xb27a <vfprintf+0x51a>
    b274:	88 35       	cpi	r24, 0x58	; 88
    b276:	59 f0       	breq	.+22     	; 0xb28e <vfprintf+0x52e>
    b278:	bc c0       	rjmp	.+376    	; 0xb3f2 <vfprintf+0x692>
    b27a:	80 37       	cpi	r24, 0x70	; 112
    b27c:	19 f0       	breq	.+6      	; 0xb284 <vfprintf+0x524>
    b27e:	88 37       	cpi	r24, 0x78	; 120
    b280:	11 f0       	breq	.+4      	; 0xb286 <vfprintf+0x526>
    b282:	b7 c0       	rjmp	.+366    	; 0xb3f2 <vfprintf+0x692>
    b284:	00 61       	ori	r16, 0x10	; 16
    b286:	04 ff       	sbrs	r16, 4
    b288:	09 c0       	rjmp	.+18     	; 0xb29c <vfprintf+0x53c>
    b28a:	04 60       	ori	r16, 0x04	; 4
    b28c:	07 c0       	rjmp	.+14     	; 0xb29c <vfprintf+0x53c>
    b28e:	94 fe       	sbrs	r9, 4
    b290:	08 c0       	rjmp	.+16     	; 0xb2a2 <vfprintf+0x542>
    b292:	06 60       	ori	r16, 0x06	; 6
    b294:	06 c0       	rjmp	.+12     	; 0xb2a2 <vfprintf+0x542>
    b296:	28 e0       	ldi	r18, 0x08	; 8
    b298:	30 e0       	ldi	r19, 0x00	; 0
    b29a:	05 c0       	rjmp	.+10     	; 0xb2a6 <vfprintf+0x546>
    b29c:	20 e1       	ldi	r18, 0x10	; 16
    b29e:	30 e0       	ldi	r19, 0x00	; 0
    b2a0:	02 c0       	rjmp	.+4      	; 0xb2a6 <vfprintf+0x546>
    b2a2:	20 e1       	ldi	r18, 0x10	; 16
    b2a4:	32 e0       	ldi	r19, 0x02	; 2
    b2a6:	56 01       	movw	r10, r12
    b2a8:	07 ff       	sbrs	r16, 7
    b2aa:	09 c0       	rjmp	.+18     	; 0xb2be <vfprintf+0x55e>
    b2ac:	84 e0       	ldi	r24, 0x04	; 4
    b2ae:	a8 0e       	add	r10, r24
    b2b0:	b1 1c       	adc	r11, r1
    b2b2:	f6 01       	movw	r30, r12
    b2b4:	60 81       	ld	r22, Z
    b2b6:	71 81       	ldd	r23, Z+1	; 0x01
    b2b8:	82 81       	ldd	r24, Z+2	; 0x02
    b2ba:	93 81       	ldd	r25, Z+3	; 0x03
    b2bc:	08 c0       	rjmp	.+16     	; 0xb2ce <vfprintf+0x56e>
    b2be:	f2 e0       	ldi	r31, 0x02	; 2
    b2c0:	af 0e       	add	r10, r31
    b2c2:	b1 1c       	adc	r11, r1
    b2c4:	f6 01       	movw	r30, r12
    b2c6:	60 81       	ld	r22, Z
    b2c8:	71 81       	ldd	r23, Z+1	; 0x01
    b2ca:	80 e0       	ldi	r24, 0x00	; 0
    b2cc:	90 e0       	ldi	r25, 0x00	; 0
    b2ce:	a3 01       	movw	r20, r6
    b2d0:	9c d3       	rcall	.+1848   	; 0xba0a <__ultoa_invert>
    b2d2:	c8 2e       	mov	r12, r24
    b2d4:	c6 18       	sub	r12, r6
    b2d6:	0f 77       	andi	r16, 0x7F	; 127
    b2d8:	90 2e       	mov	r9, r16
    b2da:	96 fe       	sbrs	r9, 6
    b2dc:	0b c0       	rjmp	.+22     	; 0xb2f4 <vfprintf+0x594>
    b2de:	09 2d       	mov	r16, r9
    b2e0:	0e 7f       	andi	r16, 0xFE	; 254
    b2e2:	c1 16       	cp	r12, r17
    b2e4:	50 f4       	brcc	.+20     	; 0xb2fa <vfprintf+0x59a>
    b2e6:	94 fe       	sbrs	r9, 4
    b2e8:	0a c0       	rjmp	.+20     	; 0xb2fe <vfprintf+0x59e>
    b2ea:	92 fc       	sbrc	r9, 2
    b2ec:	08 c0       	rjmp	.+16     	; 0xb2fe <vfprintf+0x59e>
    b2ee:	09 2d       	mov	r16, r9
    b2f0:	0e 7e       	andi	r16, 0xEE	; 238
    b2f2:	05 c0       	rjmp	.+10     	; 0xb2fe <vfprintf+0x59e>
    b2f4:	dc 2c       	mov	r13, r12
    b2f6:	09 2d       	mov	r16, r9
    b2f8:	03 c0       	rjmp	.+6      	; 0xb300 <vfprintf+0x5a0>
    b2fa:	dc 2c       	mov	r13, r12
    b2fc:	01 c0       	rjmp	.+2      	; 0xb300 <vfprintf+0x5a0>
    b2fe:	d1 2e       	mov	r13, r17
    b300:	04 ff       	sbrs	r16, 4
    b302:	0d c0       	rjmp	.+26     	; 0xb31e <vfprintf+0x5be>
    b304:	fe 01       	movw	r30, r28
    b306:	ec 0d       	add	r30, r12
    b308:	f1 1d       	adc	r31, r1
    b30a:	80 81       	ld	r24, Z
    b30c:	80 33       	cpi	r24, 0x30	; 48
    b30e:	11 f4       	brne	.+4      	; 0xb314 <vfprintf+0x5b4>
    b310:	09 7e       	andi	r16, 0xE9	; 233
    b312:	09 c0       	rjmp	.+18     	; 0xb326 <vfprintf+0x5c6>
    b314:	02 ff       	sbrs	r16, 2
    b316:	06 c0       	rjmp	.+12     	; 0xb324 <vfprintf+0x5c4>
    b318:	d3 94       	inc	r13
    b31a:	d3 94       	inc	r13
    b31c:	04 c0       	rjmp	.+8      	; 0xb326 <vfprintf+0x5c6>
    b31e:	80 2f       	mov	r24, r16
    b320:	86 78       	andi	r24, 0x86	; 134
    b322:	09 f0       	breq	.+2      	; 0xb326 <vfprintf+0x5c6>
    b324:	d3 94       	inc	r13
    b326:	03 fd       	sbrc	r16, 3
    b328:	10 c0       	rjmp	.+32     	; 0xb34a <vfprintf+0x5ea>
    b32a:	00 ff       	sbrs	r16, 0
    b32c:	06 c0       	rjmp	.+12     	; 0xb33a <vfprintf+0x5da>
    b32e:	1c 2d       	mov	r17, r12
    b330:	d5 14       	cp	r13, r5
    b332:	78 f4       	brcc	.+30     	; 0xb352 <vfprintf+0x5f2>
    b334:	15 0d       	add	r17, r5
    b336:	1d 19       	sub	r17, r13
    b338:	0c c0       	rjmp	.+24     	; 0xb352 <vfprintf+0x5f2>
    b33a:	d5 14       	cp	r13, r5
    b33c:	50 f4       	brcc	.+20     	; 0xb352 <vfprintf+0x5f2>
    b33e:	b7 01       	movw	r22, r14
    b340:	80 e2       	ldi	r24, 0x20	; 32
    b342:	90 e0       	ldi	r25, 0x00	; 0
    b344:	ee d2       	rcall	.+1500   	; 0xb922 <fputc>
    b346:	d3 94       	inc	r13
    b348:	f8 cf       	rjmp	.-16     	; 0xb33a <vfprintf+0x5da>
    b34a:	d5 14       	cp	r13, r5
    b34c:	10 f4       	brcc	.+4      	; 0xb352 <vfprintf+0x5f2>
    b34e:	5d 18       	sub	r5, r13
    b350:	01 c0       	rjmp	.+2      	; 0xb354 <vfprintf+0x5f4>
    b352:	51 2c       	mov	r5, r1
    b354:	04 ff       	sbrs	r16, 4
    b356:	0f c0       	rjmp	.+30     	; 0xb376 <vfprintf+0x616>
    b358:	b7 01       	movw	r22, r14
    b35a:	80 e3       	ldi	r24, 0x30	; 48
    b35c:	90 e0       	ldi	r25, 0x00	; 0
    b35e:	e1 d2       	rcall	.+1474   	; 0xb922 <fputc>
    b360:	02 ff       	sbrs	r16, 2
    b362:	16 c0       	rjmp	.+44     	; 0xb390 <vfprintf+0x630>
    b364:	01 fd       	sbrc	r16, 1
    b366:	03 c0       	rjmp	.+6      	; 0xb36e <vfprintf+0x60e>
    b368:	88 e7       	ldi	r24, 0x78	; 120
    b36a:	90 e0       	ldi	r25, 0x00	; 0
    b36c:	02 c0       	rjmp	.+4      	; 0xb372 <vfprintf+0x612>
    b36e:	88 e5       	ldi	r24, 0x58	; 88
    b370:	90 e0       	ldi	r25, 0x00	; 0
    b372:	b7 01       	movw	r22, r14
    b374:	0c c0       	rjmp	.+24     	; 0xb38e <vfprintf+0x62e>
    b376:	80 2f       	mov	r24, r16
    b378:	86 78       	andi	r24, 0x86	; 134
    b37a:	51 f0       	breq	.+20     	; 0xb390 <vfprintf+0x630>
    b37c:	01 ff       	sbrs	r16, 1
    b37e:	02 c0       	rjmp	.+4      	; 0xb384 <vfprintf+0x624>
    b380:	8b e2       	ldi	r24, 0x2B	; 43
    b382:	01 c0       	rjmp	.+2      	; 0xb386 <vfprintf+0x626>
    b384:	80 e2       	ldi	r24, 0x20	; 32
    b386:	07 fd       	sbrc	r16, 7
    b388:	8d e2       	ldi	r24, 0x2D	; 45
    b38a:	b7 01       	movw	r22, r14
    b38c:	90 e0       	ldi	r25, 0x00	; 0
    b38e:	c9 d2       	rcall	.+1426   	; 0xb922 <fputc>
    b390:	c1 16       	cp	r12, r17
    b392:	30 f4       	brcc	.+12     	; 0xb3a0 <vfprintf+0x640>
    b394:	b7 01       	movw	r22, r14
    b396:	80 e3       	ldi	r24, 0x30	; 48
    b398:	90 e0       	ldi	r25, 0x00	; 0
    b39a:	c3 d2       	rcall	.+1414   	; 0xb922 <fputc>
    b39c:	11 50       	subi	r17, 0x01	; 1
    b39e:	f8 cf       	rjmp	.-16     	; 0xb390 <vfprintf+0x630>
    b3a0:	ca 94       	dec	r12
    b3a2:	f3 01       	movw	r30, r6
    b3a4:	ec 0d       	add	r30, r12
    b3a6:	f1 1d       	adc	r31, r1
    b3a8:	80 81       	ld	r24, Z
    b3aa:	b7 01       	movw	r22, r14
    b3ac:	90 e0       	ldi	r25, 0x00	; 0
    b3ae:	b9 d2       	rcall	.+1394   	; 0xb922 <fputc>
    b3b0:	c1 10       	cpse	r12, r1
    b3b2:	f6 cf       	rjmp	.-20     	; 0xb3a0 <vfprintf+0x640>
    b3b4:	15 c0       	rjmp	.+42     	; 0xb3e0 <vfprintf+0x680>
    b3b6:	f4 e0       	ldi	r31, 0x04	; 4
    b3b8:	f5 15       	cp	r31, r5
    b3ba:	50 f5       	brcc	.+84     	; 0xb410 <vfprintf+0x6b0>
    b3bc:	84 e0       	ldi	r24, 0x04	; 4
    b3be:	58 1a       	sub	r5, r24
    b3c0:	93 fe       	sbrs	r9, 3
    b3c2:	1e c0       	rjmp	.+60     	; 0xb400 <vfprintf+0x6a0>
    b3c4:	01 11       	cpse	r16, r1
    b3c6:	25 c0       	rjmp	.+74     	; 0xb412 <vfprintf+0x6b2>
    b3c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    b3ca:	23 ff       	sbrs	r18, 3
    b3cc:	27 c0       	rjmp	.+78     	; 0xb41c <vfprintf+0x6bc>
    b3ce:	0e ee       	ldi	r16, 0xEE	; 238
    b3d0:	18 e0       	ldi	r17, 0x08	; 8
    b3d2:	39 2d       	mov	r19, r9
    b3d4:	30 71       	andi	r19, 0x10	; 16
    b3d6:	93 2e       	mov	r9, r19
    b3d8:	f8 01       	movw	r30, r16
    b3da:	84 91       	lpm	r24, Z
    b3dc:	81 11       	cpse	r24, r1
    b3de:	21 c0       	rjmp	.+66     	; 0xb422 <vfprintf+0x6c2>
    b3e0:	55 20       	and	r5, r5
    b3e2:	09 f4       	brne	.+2      	; 0xb3e6 <vfprintf+0x686>
    b3e4:	fc cc       	rjmp	.-1544   	; 0xadde <vfprintf+0x7e>
    b3e6:	b7 01       	movw	r22, r14
    b3e8:	80 e2       	ldi	r24, 0x20	; 32
    b3ea:	90 e0       	ldi	r25, 0x00	; 0
    b3ec:	9a d2       	rcall	.+1332   	; 0xb922 <fputc>
    b3ee:	5a 94       	dec	r5
    b3f0:	f7 cf       	rjmp	.-18     	; 0xb3e0 <vfprintf+0x680>
    b3f2:	f7 01       	movw	r30, r14
    b3f4:	86 81       	ldd	r24, Z+6	; 0x06
    b3f6:	97 81       	ldd	r25, Z+7	; 0x07
    b3f8:	23 c0       	rjmp	.+70     	; 0xb440 <vfprintf+0x6e0>
    b3fa:	8f ef       	ldi	r24, 0xFF	; 255
    b3fc:	9f ef       	ldi	r25, 0xFF	; 255
    b3fe:	20 c0       	rjmp	.+64     	; 0xb440 <vfprintf+0x6e0>
    b400:	b7 01       	movw	r22, r14
    b402:	80 e2       	ldi	r24, 0x20	; 32
    b404:	90 e0       	ldi	r25, 0x00	; 0
    b406:	8d d2       	rcall	.+1306   	; 0xb922 <fputc>
    b408:	5a 94       	dec	r5
    b40a:	51 10       	cpse	r5, r1
    b40c:	f9 cf       	rjmp	.-14     	; 0xb400 <vfprintf+0x6a0>
    b40e:	da cf       	rjmp	.-76     	; 0xb3c4 <vfprintf+0x664>
    b410:	51 2c       	mov	r5, r1
    b412:	b7 01       	movw	r22, r14
    b414:	80 2f       	mov	r24, r16
    b416:	90 e0       	ldi	r25, 0x00	; 0
    b418:	84 d2       	rcall	.+1288   	; 0xb922 <fputc>
    b41a:	d6 cf       	rjmp	.-84     	; 0xb3c8 <vfprintf+0x668>
    b41c:	02 ef       	ldi	r16, 0xF2	; 242
    b41e:	18 e0       	ldi	r17, 0x08	; 8
    b420:	d8 cf       	rjmp	.-80     	; 0xb3d2 <vfprintf+0x672>
    b422:	91 10       	cpse	r9, r1
    b424:	80 52       	subi	r24, 0x20	; 32
    b426:	b7 01       	movw	r22, r14
    b428:	90 e0       	ldi	r25, 0x00	; 0
    b42a:	7b d2       	rcall	.+1270   	; 0xb922 <fputc>
    b42c:	0f 5f       	subi	r16, 0xFF	; 255
    b42e:	1f 4f       	sbci	r17, 0xFF	; 255
    b430:	d3 cf       	rjmp	.-90     	; 0xb3d8 <vfprintf+0x678>
    b432:	23 e0       	ldi	r18, 0x03	; 3
    b434:	25 15       	cp	r18, r5
    b436:	10 f4       	brcc	.+4      	; 0xb43c <vfprintf+0x6dc>
    b438:	83 e0       	ldi	r24, 0x03	; 3
    b43a:	c1 cf       	rjmp	.-126    	; 0xb3be <vfprintf+0x65e>
    b43c:	51 2c       	mov	r5, r1
    b43e:	c4 cf       	rjmp	.-120    	; 0xb3c8 <vfprintf+0x668>
    b440:	60 96       	adiw	r28, 0x10	; 16
    b442:	0f b6       	in	r0, 0x3f	; 63
    b444:	f8 94       	cli
    b446:	de bf       	out	0x3e, r29	; 62
    b448:	0f be       	out	0x3f, r0	; 63
    b44a:	cd bf       	out	0x3d, r28	; 61
    b44c:	df 91       	pop	r29
    b44e:	cf 91       	pop	r28
    b450:	1f 91       	pop	r17
    b452:	0f 91       	pop	r16
    b454:	ff 90       	pop	r15
    b456:	ef 90       	pop	r14
    b458:	df 90       	pop	r13
    b45a:	cf 90       	pop	r12
    b45c:	bf 90       	pop	r11
    b45e:	af 90       	pop	r10
    b460:	9f 90       	pop	r9
    b462:	8f 90       	pop	r8
    b464:	7f 90       	pop	r7
    b466:	6f 90       	pop	r6
    b468:	5f 90       	pop	r5
    b46a:	4f 90       	pop	r4
    b46c:	3f 90       	pop	r3
    b46e:	2f 90       	pop	r2
    b470:	08 95       	ret

0000b472 <__udivmodsi4>:
    b472:	a1 e2       	ldi	r26, 0x21	; 33
    b474:	1a 2e       	mov	r1, r26
    b476:	aa 1b       	sub	r26, r26
    b478:	bb 1b       	sub	r27, r27
    b47a:	fd 01       	movw	r30, r26
    b47c:	0d c0       	rjmp	.+26     	; 0xb498 <__udivmodsi4_ep>

0000b47e <__udivmodsi4_loop>:
    b47e:	aa 1f       	adc	r26, r26
    b480:	bb 1f       	adc	r27, r27
    b482:	ee 1f       	adc	r30, r30
    b484:	ff 1f       	adc	r31, r31
    b486:	a2 17       	cp	r26, r18
    b488:	b3 07       	cpc	r27, r19
    b48a:	e4 07       	cpc	r30, r20
    b48c:	f5 07       	cpc	r31, r21
    b48e:	20 f0       	brcs	.+8      	; 0xb498 <__udivmodsi4_ep>
    b490:	a2 1b       	sub	r26, r18
    b492:	b3 0b       	sbc	r27, r19
    b494:	e4 0b       	sbc	r30, r20
    b496:	f5 0b       	sbc	r31, r21

0000b498 <__udivmodsi4_ep>:
    b498:	66 1f       	adc	r22, r22
    b49a:	77 1f       	adc	r23, r23
    b49c:	88 1f       	adc	r24, r24
    b49e:	99 1f       	adc	r25, r25
    b4a0:	1a 94       	dec	r1
    b4a2:	69 f7       	brne	.-38     	; 0xb47e <__udivmodsi4_loop>
    b4a4:	60 95       	com	r22
    b4a6:	70 95       	com	r23
    b4a8:	80 95       	com	r24
    b4aa:	90 95       	com	r25
    b4ac:	9b 01       	movw	r18, r22
    b4ae:	ac 01       	movw	r20, r24
    b4b0:	bd 01       	movw	r22, r26
    b4b2:	cf 01       	movw	r24, r30
    b4b4:	08 95       	ret

0000b4b6 <__tablejump2__>:
    b4b6:	ee 0f       	add	r30, r30
    b4b8:	ff 1f       	adc	r31, r31
    b4ba:	88 1f       	adc	r24, r24
    b4bc:	8b bf       	out	0x3b, r24	; 59
    b4be:	07 90       	elpm	r0, Z+
    b4c0:	f6 91       	elpm	r31, Z
    b4c2:	e0 2d       	mov	r30, r0
    b4c4:	19 94       	eijmp

0000b4c6 <__umulhisi3>:
    b4c6:	a2 9f       	mul	r26, r18
    b4c8:	b0 01       	movw	r22, r0
    b4ca:	b3 9f       	mul	r27, r19
    b4cc:	c0 01       	movw	r24, r0
    b4ce:	a3 9f       	mul	r26, r19
    b4d0:	70 0d       	add	r23, r0
    b4d2:	81 1d       	adc	r24, r1
    b4d4:	11 24       	eor	r1, r1
    b4d6:	91 1d       	adc	r25, r1
    b4d8:	b2 9f       	mul	r27, r18
    b4da:	70 0d       	add	r23, r0
    b4dc:	81 1d       	adc	r24, r1
    b4de:	11 24       	eor	r1, r1
    b4e0:	91 1d       	adc	r25, r1
    b4e2:	08 95       	ret

0000b4e4 <malloc>:
    b4e4:	0f 93       	push	r16
    b4e6:	1f 93       	push	r17
    b4e8:	cf 93       	push	r28
    b4ea:	df 93       	push	r29
    b4ec:	82 30       	cpi	r24, 0x02	; 2
    b4ee:	91 05       	cpc	r25, r1
    b4f0:	10 f4       	brcc	.+4      	; 0xb4f6 <malloc+0x12>
    b4f2:	82 e0       	ldi	r24, 0x02	; 2
    b4f4:	90 e0       	ldi	r25, 0x00	; 0
    b4f6:	e0 91 d1 0a 	lds	r30, 0x0AD1	; 0x800ad1 <__flp>
    b4fa:	f0 91 d2 0a 	lds	r31, 0x0AD2	; 0x800ad2 <__flp+0x1>
    b4fe:	20 e0       	ldi	r18, 0x00	; 0
    b500:	30 e0       	ldi	r19, 0x00	; 0
    b502:	a0 e0       	ldi	r26, 0x00	; 0
    b504:	b0 e0       	ldi	r27, 0x00	; 0
    b506:	30 97       	sbiw	r30, 0x00	; 0
    b508:	19 f1       	breq	.+70     	; 0xb550 <malloc+0x6c>
    b50a:	40 81       	ld	r20, Z
    b50c:	51 81       	ldd	r21, Z+1	; 0x01
    b50e:	02 81       	ldd	r16, Z+2	; 0x02
    b510:	13 81       	ldd	r17, Z+3	; 0x03
    b512:	48 17       	cp	r20, r24
    b514:	59 07       	cpc	r21, r25
    b516:	c8 f0       	brcs	.+50     	; 0xb54a <malloc+0x66>
    b518:	84 17       	cp	r24, r20
    b51a:	95 07       	cpc	r25, r21
    b51c:	69 f4       	brne	.+26     	; 0xb538 <malloc+0x54>
    b51e:	10 97       	sbiw	r26, 0x00	; 0
    b520:	31 f0       	breq	.+12     	; 0xb52e <malloc+0x4a>
    b522:	12 96       	adiw	r26, 0x02	; 2
    b524:	0c 93       	st	X, r16
    b526:	12 97       	sbiw	r26, 0x02	; 2
    b528:	13 96       	adiw	r26, 0x03	; 3
    b52a:	1c 93       	st	X, r17
    b52c:	27 c0       	rjmp	.+78     	; 0xb57c <malloc+0x98>
    b52e:	00 93 d1 0a 	sts	0x0AD1, r16	; 0x800ad1 <__flp>
    b532:	10 93 d2 0a 	sts	0x0AD2, r17	; 0x800ad2 <__flp+0x1>
    b536:	22 c0       	rjmp	.+68     	; 0xb57c <malloc+0x98>
    b538:	21 15       	cp	r18, r1
    b53a:	31 05       	cpc	r19, r1
    b53c:	19 f0       	breq	.+6      	; 0xb544 <malloc+0x60>
    b53e:	42 17       	cp	r20, r18
    b540:	53 07       	cpc	r21, r19
    b542:	18 f4       	brcc	.+6      	; 0xb54a <malloc+0x66>
    b544:	9a 01       	movw	r18, r20
    b546:	bd 01       	movw	r22, r26
    b548:	ef 01       	movw	r28, r30
    b54a:	df 01       	movw	r26, r30
    b54c:	f8 01       	movw	r30, r16
    b54e:	db cf       	rjmp	.-74     	; 0xb506 <malloc+0x22>
    b550:	21 15       	cp	r18, r1
    b552:	31 05       	cpc	r19, r1
    b554:	f9 f0       	breq	.+62     	; 0xb594 <malloc+0xb0>
    b556:	28 1b       	sub	r18, r24
    b558:	39 0b       	sbc	r19, r25
    b55a:	24 30       	cpi	r18, 0x04	; 4
    b55c:	31 05       	cpc	r19, r1
    b55e:	80 f4       	brcc	.+32     	; 0xb580 <malloc+0x9c>
    b560:	8a 81       	ldd	r24, Y+2	; 0x02
    b562:	9b 81       	ldd	r25, Y+3	; 0x03
    b564:	61 15       	cp	r22, r1
    b566:	71 05       	cpc	r23, r1
    b568:	21 f0       	breq	.+8      	; 0xb572 <malloc+0x8e>
    b56a:	fb 01       	movw	r30, r22
    b56c:	93 83       	std	Z+3, r25	; 0x03
    b56e:	82 83       	std	Z+2, r24	; 0x02
    b570:	04 c0       	rjmp	.+8      	; 0xb57a <malloc+0x96>
    b572:	90 93 d2 0a 	sts	0x0AD2, r25	; 0x800ad2 <__flp+0x1>
    b576:	80 93 d1 0a 	sts	0x0AD1, r24	; 0x800ad1 <__flp>
    b57a:	fe 01       	movw	r30, r28
    b57c:	32 96       	adiw	r30, 0x02	; 2
    b57e:	44 c0       	rjmp	.+136    	; 0xb608 <malloc+0x124>
    b580:	fe 01       	movw	r30, r28
    b582:	e2 0f       	add	r30, r18
    b584:	f3 1f       	adc	r31, r19
    b586:	81 93       	st	Z+, r24
    b588:	91 93       	st	Z+, r25
    b58a:	22 50       	subi	r18, 0x02	; 2
    b58c:	31 09       	sbc	r19, r1
    b58e:	39 83       	std	Y+1, r19	; 0x01
    b590:	28 83       	st	Y, r18
    b592:	3a c0       	rjmp	.+116    	; 0xb608 <malloc+0x124>
    b594:	20 91 cf 0a 	lds	r18, 0x0ACF	; 0x800acf <__brkval>
    b598:	30 91 d0 0a 	lds	r19, 0x0AD0	; 0x800ad0 <__brkval+0x1>
    b59c:	23 2b       	or	r18, r19
    b59e:	41 f4       	brne	.+16     	; 0xb5b0 <malloc+0xcc>
    b5a0:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    b5a4:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    b5a8:	30 93 d0 0a 	sts	0x0AD0, r19	; 0x800ad0 <__brkval+0x1>
    b5ac:	20 93 cf 0a 	sts	0x0ACF, r18	; 0x800acf <__brkval>
    b5b0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    b5b4:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    b5b8:	21 15       	cp	r18, r1
    b5ba:	31 05       	cpc	r19, r1
    b5bc:	41 f4       	brne	.+16     	; 0xb5ce <malloc+0xea>
    b5be:	2d b7       	in	r18, 0x3d	; 61
    b5c0:	3e b7       	in	r19, 0x3e	; 62
    b5c2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    b5c6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    b5ca:	24 1b       	sub	r18, r20
    b5cc:	35 0b       	sbc	r19, r21
    b5ce:	e0 91 cf 0a 	lds	r30, 0x0ACF	; 0x800acf <__brkval>
    b5d2:	f0 91 d0 0a 	lds	r31, 0x0AD0	; 0x800ad0 <__brkval+0x1>
    b5d6:	e2 17       	cp	r30, r18
    b5d8:	f3 07       	cpc	r31, r19
    b5da:	a0 f4       	brcc	.+40     	; 0xb604 <malloc+0x120>
    b5dc:	2e 1b       	sub	r18, r30
    b5de:	3f 0b       	sbc	r19, r31
    b5e0:	28 17       	cp	r18, r24
    b5e2:	39 07       	cpc	r19, r25
    b5e4:	78 f0       	brcs	.+30     	; 0xb604 <malloc+0x120>
    b5e6:	ac 01       	movw	r20, r24
    b5e8:	4e 5f       	subi	r20, 0xFE	; 254
    b5ea:	5f 4f       	sbci	r21, 0xFF	; 255
    b5ec:	24 17       	cp	r18, r20
    b5ee:	35 07       	cpc	r19, r21
    b5f0:	48 f0       	brcs	.+18     	; 0xb604 <malloc+0x120>
    b5f2:	4e 0f       	add	r20, r30
    b5f4:	5f 1f       	adc	r21, r31
    b5f6:	50 93 d0 0a 	sts	0x0AD0, r21	; 0x800ad0 <__brkval+0x1>
    b5fa:	40 93 cf 0a 	sts	0x0ACF, r20	; 0x800acf <__brkval>
    b5fe:	81 93       	st	Z+, r24
    b600:	91 93       	st	Z+, r25
    b602:	02 c0       	rjmp	.+4      	; 0xb608 <malloc+0x124>
    b604:	e0 e0       	ldi	r30, 0x00	; 0
    b606:	f0 e0       	ldi	r31, 0x00	; 0
    b608:	cf 01       	movw	r24, r30
    b60a:	df 91       	pop	r29
    b60c:	cf 91       	pop	r28
    b60e:	1f 91       	pop	r17
    b610:	0f 91       	pop	r16
    b612:	08 95       	ret

0000b614 <free>:
    b614:	cf 93       	push	r28
    b616:	df 93       	push	r29
    b618:	00 97       	sbiw	r24, 0x00	; 0
    b61a:	09 f4       	brne	.+2      	; 0xb61e <free+0xa>
    b61c:	81 c0       	rjmp	.+258    	; 0xb720 <free+0x10c>
    b61e:	fc 01       	movw	r30, r24
    b620:	32 97       	sbiw	r30, 0x02	; 2
    b622:	13 82       	std	Z+3, r1	; 0x03
    b624:	12 82       	std	Z+2, r1	; 0x02
    b626:	a0 91 d1 0a 	lds	r26, 0x0AD1	; 0x800ad1 <__flp>
    b62a:	b0 91 d2 0a 	lds	r27, 0x0AD2	; 0x800ad2 <__flp+0x1>
    b62e:	10 97       	sbiw	r26, 0x00	; 0
    b630:	81 f4       	brne	.+32     	; 0xb652 <free+0x3e>
    b632:	20 81       	ld	r18, Z
    b634:	31 81       	ldd	r19, Z+1	; 0x01
    b636:	82 0f       	add	r24, r18
    b638:	93 1f       	adc	r25, r19
    b63a:	20 91 cf 0a 	lds	r18, 0x0ACF	; 0x800acf <__brkval>
    b63e:	30 91 d0 0a 	lds	r19, 0x0AD0	; 0x800ad0 <__brkval+0x1>
    b642:	28 17       	cp	r18, r24
    b644:	39 07       	cpc	r19, r25
    b646:	51 f5       	brne	.+84     	; 0xb69c <free+0x88>
    b648:	f0 93 d0 0a 	sts	0x0AD0, r31	; 0x800ad0 <__brkval+0x1>
    b64c:	e0 93 cf 0a 	sts	0x0ACF, r30	; 0x800acf <__brkval>
    b650:	67 c0       	rjmp	.+206    	; 0xb720 <free+0x10c>
    b652:	ed 01       	movw	r28, r26
    b654:	20 e0       	ldi	r18, 0x00	; 0
    b656:	30 e0       	ldi	r19, 0x00	; 0
    b658:	ce 17       	cp	r28, r30
    b65a:	df 07       	cpc	r29, r31
    b65c:	40 f4       	brcc	.+16     	; 0xb66e <free+0x5a>
    b65e:	4a 81       	ldd	r20, Y+2	; 0x02
    b660:	5b 81       	ldd	r21, Y+3	; 0x03
    b662:	9e 01       	movw	r18, r28
    b664:	41 15       	cp	r20, r1
    b666:	51 05       	cpc	r21, r1
    b668:	f1 f0       	breq	.+60     	; 0xb6a6 <free+0x92>
    b66a:	ea 01       	movw	r28, r20
    b66c:	f5 cf       	rjmp	.-22     	; 0xb658 <free+0x44>
    b66e:	d3 83       	std	Z+3, r29	; 0x03
    b670:	c2 83       	std	Z+2, r28	; 0x02
    b672:	40 81       	ld	r20, Z
    b674:	51 81       	ldd	r21, Z+1	; 0x01
    b676:	84 0f       	add	r24, r20
    b678:	95 1f       	adc	r25, r21
    b67a:	c8 17       	cp	r28, r24
    b67c:	d9 07       	cpc	r29, r25
    b67e:	59 f4       	brne	.+22     	; 0xb696 <free+0x82>
    b680:	88 81       	ld	r24, Y
    b682:	99 81       	ldd	r25, Y+1	; 0x01
    b684:	84 0f       	add	r24, r20
    b686:	95 1f       	adc	r25, r21
    b688:	02 96       	adiw	r24, 0x02	; 2
    b68a:	91 83       	std	Z+1, r25	; 0x01
    b68c:	80 83       	st	Z, r24
    b68e:	8a 81       	ldd	r24, Y+2	; 0x02
    b690:	9b 81       	ldd	r25, Y+3	; 0x03
    b692:	93 83       	std	Z+3, r25	; 0x03
    b694:	82 83       	std	Z+2, r24	; 0x02
    b696:	21 15       	cp	r18, r1
    b698:	31 05       	cpc	r19, r1
    b69a:	29 f4       	brne	.+10     	; 0xb6a6 <free+0x92>
    b69c:	f0 93 d2 0a 	sts	0x0AD2, r31	; 0x800ad2 <__flp+0x1>
    b6a0:	e0 93 d1 0a 	sts	0x0AD1, r30	; 0x800ad1 <__flp>
    b6a4:	3d c0       	rjmp	.+122    	; 0xb720 <free+0x10c>
    b6a6:	e9 01       	movw	r28, r18
    b6a8:	fb 83       	std	Y+3, r31	; 0x03
    b6aa:	ea 83       	std	Y+2, r30	; 0x02
    b6ac:	49 91       	ld	r20, Y+
    b6ae:	59 91       	ld	r21, Y+
    b6b0:	c4 0f       	add	r28, r20
    b6b2:	d5 1f       	adc	r29, r21
    b6b4:	ec 17       	cp	r30, r28
    b6b6:	fd 07       	cpc	r31, r29
    b6b8:	61 f4       	brne	.+24     	; 0xb6d2 <free+0xbe>
    b6ba:	80 81       	ld	r24, Z
    b6bc:	91 81       	ldd	r25, Z+1	; 0x01
    b6be:	84 0f       	add	r24, r20
    b6c0:	95 1f       	adc	r25, r21
    b6c2:	02 96       	adiw	r24, 0x02	; 2
    b6c4:	e9 01       	movw	r28, r18
    b6c6:	99 83       	std	Y+1, r25	; 0x01
    b6c8:	88 83       	st	Y, r24
    b6ca:	82 81       	ldd	r24, Z+2	; 0x02
    b6cc:	93 81       	ldd	r25, Z+3	; 0x03
    b6ce:	9b 83       	std	Y+3, r25	; 0x03
    b6d0:	8a 83       	std	Y+2, r24	; 0x02
    b6d2:	e0 e0       	ldi	r30, 0x00	; 0
    b6d4:	f0 e0       	ldi	r31, 0x00	; 0
    b6d6:	12 96       	adiw	r26, 0x02	; 2
    b6d8:	8d 91       	ld	r24, X+
    b6da:	9c 91       	ld	r25, X
    b6dc:	13 97       	sbiw	r26, 0x03	; 3
    b6de:	00 97       	sbiw	r24, 0x00	; 0
    b6e0:	19 f0       	breq	.+6      	; 0xb6e8 <free+0xd4>
    b6e2:	fd 01       	movw	r30, r26
    b6e4:	dc 01       	movw	r26, r24
    b6e6:	f7 cf       	rjmp	.-18     	; 0xb6d6 <free+0xc2>
    b6e8:	8d 91       	ld	r24, X+
    b6ea:	9c 91       	ld	r25, X
    b6ec:	11 97       	sbiw	r26, 0x01	; 1
    b6ee:	9d 01       	movw	r18, r26
    b6f0:	2e 5f       	subi	r18, 0xFE	; 254
    b6f2:	3f 4f       	sbci	r19, 0xFF	; 255
    b6f4:	82 0f       	add	r24, r18
    b6f6:	93 1f       	adc	r25, r19
    b6f8:	20 91 cf 0a 	lds	r18, 0x0ACF	; 0x800acf <__brkval>
    b6fc:	30 91 d0 0a 	lds	r19, 0x0AD0	; 0x800ad0 <__brkval+0x1>
    b700:	28 17       	cp	r18, r24
    b702:	39 07       	cpc	r19, r25
    b704:	69 f4       	brne	.+26     	; 0xb720 <free+0x10c>
    b706:	30 97       	sbiw	r30, 0x00	; 0
    b708:	29 f4       	brne	.+10     	; 0xb714 <free+0x100>
    b70a:	10 92 d2 0a 	sts	0x0AD2, r1	; 0x800ad2 <__flp+0x1>
    b70e:	10 92 d1 0a 	sts	0x0AD1, r1	; 0x800ad1 <__flp>
    b712:	02 c0       	rjmp	.+4      	; 0xb718 <free+0x104>
    b714:	13 82       	std	Z+3, r1	; 0x03
    b716:	12 82       	std	Z+2, r1	; 0x02
    b718:	b0 93 d0 0a 	sts	0x0AD0, r27	; 0x800ad0 <__brkval+0x1>
    b71c:	a0 93 cf 0a 	sts	0x0ACF, r26	; 0x800acf <__brkval>
    b720:	df 91       	pop	r29
    b722:	cf 91       	pop	r28
    b724:	08 95       	ret

0000b726 <__ftoa_engine>:
    b726:	28 30       	cpi	r18, 0x08	; 8
    b728:	08 f0       	brcs	.+2      	; 0xb72c <__ftoa_engine+0x6>
    b72a:	27 e0       	ldi	r18, 0x07	; 7
    b72c:	33 27       	eor	r19, r19
    b72e:	da 01       	movw	r26, r20
    b730:	99 0f       	add	r25, r25
    b732:	31 1d       	adc	r19, r1
    b734:	87 fd       	sbrc	r24, 7
    b736:	91 60       	ori	r25, 0x01	; 1
    b738:	00 96       	adiw	r24, 0x00	; 0
    b73a:	61 05       	cpc	r22, r1
    b73c:	71 05       	cpc	r23, r1
    b73e:	39 f4       	brne	.+14     	; 0xb74e <__ftoa_engine+0x28>
    b740:	32 60       	ori	r19, 0x02	; 2
    b742:	2e 5f       	subi	r18, 0xFE	; 254
    b744:	3d 93       	st	X+, r19
    b746:	30 e3       	ldi	r19, 0x30	; 48
    b748:	2a 95       	dec	r18
    b74a:	e1 f7       	brne	.-8      	; 0xb744 <__ftoa_engine+0x1e>
    b74c:	08 95       	ret
    b74e:	9f 3f       	cpi	r25, 0xFF	; 255
    b750:	30 f0       	brcs	.+12     	; 0xb75e <__ftoa_engine+0x38>
    b752:	80 38       	cpi	r24, 0x80	; 128
    b754:	71 05       	cpc	r23, r1
    b756:	61 05       	cpc	r22, r1
    b758:	09 f0       	breq	.+2      	; 0xb75c <__ftoa_engine+0x36>
    b75a:	3c 5f       	subi	r19, 0xFC	; 252
    b75c:	3c 5f       	subi	r19, 0xFC	; 252
    b75e:	3d 93       	st	X+, r19
    b760:	91 30       	cpi	r25, 0x01	; 1
    b762:	08 f0       	brcs	.+2      	; 0xb766 <__ftoa_engine+0x40>
    b764:	80 68       	ori	r24, 0x80	; 128
    b766:	91 1d       	adc	r25, r1
    b768:	df 93       	push	r29
    b76a:	cf 93       	push	r28
    b76c:	1f 93       	push	r17
    b76e:	0f 93       	push	r16
    b770:	ff 92       	push	r15
    b772:	ef 92       	push	r14
    b774:	19 2f       	mov	r17, r25
    b776:	98 7f       	andi	r25, 0xF8	; 248
    b778:	96 95       	lsr	r25
    b77a:	e9 2f       	mov	r30, r25
    b77c:	96 95       	lsr	r25
    b77e:	96 95       	lsr	r25
    b780:	e9 0f       	add	r30, r25
    b782:	ff 27       	eor	r31, r31
    b784:	e0 5b       	subi	r30, 0xB0	; 176
    b786:	f6 4f       	sbci	r31, 0xF6	; 246
    b788:	99 27       	eor	r25, r25
    b78a:	33 27       	eor	r19, r19
    b78c:	ee 24       	eor	r14, r14
    b78e:	ff 24       	eor	r15, r15
    b790:	a7 01       	movw	r20, r14
    b792:	e7 01       	movw	r28, r14
    b794:	05 90       	lpm	r0, Z+
    b796:	08 94       	sec
    b798:	07 94       	ror	r0
    b79a:	28 f4       	brcc	.+10     	; 0xb7a6 <__ftoa_engine+0x80>
    b79c:	36 0f       	add	r19, r22
    b79e:	e7 1e       	adc	r14, r23
    b7a0:	f8 1e       	adc	r15, r24
    b7a2:	49 1f       	adc	r20, r25
    b7a4:	51 1d       	adc	r21, r1
    b7a6:	66 0f       	add	r22, r22
    b7a8:	77 1f       	adc	r23, r23
    b7aa:	88 1f       	adc	r24, r24
    b7ac:	99 1f       	adc	r25, r25
    b7ae:	06 94       	lsr	r0
    b7b0:	a1 f7       	brne	.-24     	; 0xb79a <__ftoa_engine+0x74>
    b7b2:	05 90       	lpm	r0, Z+
    b7b4:	07 94       	ror	r0
    b7b6:	28 f4       	brcc	.+10     	; 0xb7c2 <__ftoa_engine+0x9c>
    b7b8:	e7 0e       	add	r14, r23
    b7ba:	f8 1e       	adc	r15, r24
    b7bc:	49 1f       	adc	r20, r25
    b7be:	56 1f       	adc	r21, r22
    b7c0:	c1 1d       	adc	r28, r1
    b7c2:	77 0f       	add	r23, r23
    b7c4:	88 1f       	adc	r24, r24
    b7c6:	99 1f       	adc	r25, r25
    b7c8:	66 1f       	adc	r22, r22
    b7ca:	06 94       	lsr	r0
    b7cc:	a1 f7       	brne	.-24     	; 0xb7b6 <__ftoa_engine+0x90>
    b7ce:	05 90       	lpm	r0, Z+
    b7d0:	07 94       	ror	r0
    b7d2:	28 f4       	brcc	.+10     	; 0xb7de <__ftoa_engine+0xb8>
    b7d4:	f8 0e       	add	r15, r24
    b7d6:	49 1f       	adc	r20, r25
    b7d8:	56 1f       	adc	r21, r22
    b7da:	c7 1f       	adc	r28, r23
    b7dc:	d1 1d       	adc	r29, r1
    b7de:	88 0f       	add	r24, r24
    b7e0:	99 1f       	adc	r25, r25
    b7e2:	66 1f       	adc	r22, r22
    b7e4:	77 1f       	adc	r23, r23
    b7e6:	06 94       	lsr	r0
    b7e8:	a1 f7       	brne	.-24     	; 0xb7d2 <__ftoa_engine+0xac>
    b7ea:	05 90       	lpm	r0, Z+
    b7ec:	07 94       	ror	r0
    b7ee:	20 f4       	brcc	.+8      	; 0xb7f8 <__ftoa_engine+0xd2>
    b7f0:	49 0f       	add	r20, r25
    b7f2:	56 1f       	adc	r21, r22
    b7f4:	c7 1f       	adc	r28, r23
    b7f6:	d8 1f       	adc	r29, r24
    b7f8:	99 0f       	add	r25, r25
    b7fa:	66 1f       	adc	r22, r22
    b7fc:	77 1f       	adc	r23, r23
    b7fe:	88 1f       	adc	r24, r24
    b800:	06 94       	lsr	r0
    b802:	a9 f7       	brne	.-22     	; 0xb7ee <__ftoa_engine+0xc8>
    b804:	84 91       	lpm	r24, Z
    b806:	10 95       	com	r17
    b808:	17 70       	andi	r17, 0x07	; 7
    b80a:	41 f0       	breq	.+16     	; 0xb81c <__ftoa_engine+0xf6>
    b80c:	d6 95       	lsr	r29
    b80e:	c7 95       	ror	r28
    b810:	57 95       	ror	r21
    b812:	47 95       	ror	r20
    b814:	f7 94       	ror	r15
    b816:	e7 94       	ror	r14
    b818:	1a 95       	dec	r17
    b81a:	c1 f7       	brne	.-16     	; 0xb80c <__ftoa_engine+0xe6>
    b81c:	e6 ef       	ldi	r30, 0xF6	; 246
    b81e:	f8 e0       	ldi	r31, 0x08	; 8
    b820:	68 94       	set
    b822:	15 90       	lpm	r1, Z+
    b824:	15 91       	lpm	r17, Z+
    b826:	35 91       	lpm	r19, Z+
    b828:	65 91       	lpm	r22, Z+
    b82a:	95 91       	lpm	r25, Z+
    b82c:	05 90       	lpm	r0, Z+
    b82e:	7f e2       	ldi	r23, 0x2F	; 47
    b830:	73 95       	inc	r23
    b832:	e1 18       	sub	r14, r1
    b834:	f1 0a       	sbc	r15, r17
    b836:	43 0b       	sbc	r20, r19
    b838:	56 0b       	sbc	r21, r22
    b83a:	c9 0b       	sbc	r28, r25
    b83c:	d0 09       	sbc	r29, r0
    b83e:	c0 f7       	brcc	.-16     	; 0xb830 <__ftoa_engine+0x10a>
    b840:	e1 0c       	add	r14, r1
    b842:	f1 1e       	adc	r15, r17
    b844:	43 1f       	adc	r20, r19
    b846:	56 1f       	adc	r21, r22
    b848:	c9 1f       	adc	r28, r25
    b84a:	d0 1d       	adc	r29, r0
    b84c:	7e f4       	brtc	.+30     	; 0xb86c <__ftoa_engine+0x146>
    b84e:	70 33       	cpi	r23, 0x30	; 48
    b850:	11 f4       	brne	.+4      	; 0xb856 <__ftoa_engine+0x130>
    b852:	8a 95       	dec	r24
    b854:	e6 cf       	rjmp	.-52     	; 0xb822 <__ftoa_engine+0xfc>
    b856:	e8 94       	clt
    b858:	01 50       	subi	r16, 0x01	; 1
    b85a:	30 f0       	brcs	.+12     	; 0xb868 <__ftoa_engine+0x142>
    b85c:	08 0f       	add	r16, r24
    b85e:	0a f4       	brpl	.+2      	; 0xb862 <__ftoa_engine+0x13c>
    b860:	00 27       	eor	r16, r16
    b862:	02 17       	cp	r16, r18
    b864:	08 f4       	brcc	.+2      	; 0xb868 <__ftoa_engine+0x142>
    b866:	20 2f       	mov	r18, r16
    b868:	23 95       	inc	r18
    b86a:	02 2f       	mov	r16, r18
    b86c:	7a 33       	cpi	r23, 0x3A	; 58
    b86e:	28 f0       	brcs	.+10     	; 0xb87a <__ftoa_engine+0x154>
    b870:	79 e3       	ldi	r23, 0x39	; 57
    b872:	7d 93       	st	X+, r23
    b874:	2a 95       	dec	r18
    b876:	e9 f7       	brne	.-6      	; 0xb872 <__ftoa_engine+0x14c>
    b878:	10 c0       	rjmp	.+32     	; 0xb89a <__ftoa_engine+0x174>
    b87a:	7d 93       	st	X+, r23
    b87c:	2a 95       	dec	r18
    b87e:	89 f6       	brne	.-94     	; 0xb822 <__ftoa_engine+0xfc>
    b880:	06 94       	lsr	r0
    b882:	97 95       	ror	r25
    b884:	67 95       	ror	r22
    b886:	37 95       	ror	r19
    b888:	17 95       	ror	r17
    b88a:	17 94       	ror	r1
    b88c:	e1 18       	sub	r14, r1
    b88e:	f1 0a       	sbc	r15, r17
    b890:	43 0b       	sbc	r20, r19
    b892:	56 0b       	sbc	r21, r22
    b894:	c9 0b       	sbc	r28, r25
    b896:	d0 09       	sbc	r29, r0
    b898:	98 f0       	brcs	.+38     	; 0xb8c0 <__ftoa_engine+0x19a>
    b89a:	23 95       	inc	r18
    b89c:	7e 91       	ld	r23, -X
    b89e:	73 95       	inc	r23
    b8a0:	7a 33       	cpi	r23, 0x3A	; 58
    b8a2:	08 f0       	brcs	.+2      	; 0xb8a6 <__ftoa_engine+0x180>
    b8a4:	70 e3       	ldi	r23, 0x30	; 48
    b8a6:	7c 93       	st	X, r23
    b8a8:	20 13       	cpse	r18, r16
    b8aa:	b8 f7       	brcc	.-18     	; 0xb89a <__ftoa_engine+0x174>
    b8ac:	7e 91       	ld	r23, -X
    b8ae:	70 61       	ori	r23, 0x10	; 16
    b8b0:	7d 93       	st	X+, r23
    b8b2:	30 f0       	brcs	.+12     	; 0xb8c0 <__ftoa_engine+0x19a>
    b8b4:	83 95       	inc	r24
    b8b6:	71 e3       	ldi	r23, 0x31	; 49
    b8b8:	7d 93       	st	X+, r23
    b8ba:	70 e3       	ldi	r23, 0x30	; 48
    b8bc:	2a 95       	dec	r18
    b8be:	e1 f7       	brne	.-8      	; 0xb8b8 <__ftoa_engine+0x192>
    b8c0:	11 24       	eor	r1, r1
    b8c2:	ef 90       	pop	r14
    b8c4:	ff 90       	pop	r15
    b8c6:	0f 91       	pop	r16
    b8c8:	1f 91       	pop	r17
    b8ca:	cf 91       	pop	r28
    b8cc:	df 91       	pop	r29
    b8ce:	99 27       	eor	r25, r25
    b8d0:	87 fd       	sbrc	r24, 7
    b8d2:	90 95       	com	r25
    b8d4:	08 95       	ret

0000b8d6 <strnlen_P>:
    b8d6:	fc 01       	movw	r30, r24
    b8d8:	05 90       	lpm	r0, Z+
    b8da:	61 50       	subi	r22, 0x01	; 1
    b8dc:	70 40       	sbci	r23, 0x00	; 0
    b8de:	01 10       	cpse	r0, r1
    b8e0:	d8 f7       	brcc	.-10     	; 0xb8d8 <strnlen_P+0x2>
    b8e2:	80 95       	com	r24
    b8e4:	90 95       	com	r25
    b8e6:	8e 0f       	add	r24, r30
    b8e8:	9f 1f       	adc	r25, r31
    b8ea:	08 95       	ret

0000b8ec <memcpy>:
    b8ec:	fb 01       	movw	r30, r22
    b8ee:	dc 01       	movw	r26, r24
    b8f0:	02 c0       	rjmp	.+4      	; 0xb8f6 <memcpy+0xa>
    b8f2:	01 90       	ld	r0, Z+
    b8f4:	0d 92       	st	X+, r0
    b8f6:	41 50       	subi	r20, 0x01	; 1
    b8f8:	50 40       	sbci	r21, 0x00	; 0
    b8fa:	d8 f7       	brcc	.-10     	; 0xb8f2 <memcpy+0x6>
    b8fc:	08 95       	ret

0000b8fe <memset>:
    b8fe:	dc 01       	movw	r26, r24
    b900:	01 c0       	rjmp	.+2      	; 0xb904 <memset+0x6>
    b902:	6d 93       	st	X+, r22
    b904:	41 50       	subi	r20, 0x01	; 1
    b906:	50 40       	sbci	r21, 0x00	; 0
    b908:	e0 f7       	brcc	.-8      	; 0xb902 <memset+0x4>
    b90a:	08 95       	ret

0000b90c <strnlen>:
    b90c:	fc 01       	movw	r30, r24
    b90e:	61 50       	subi	r22, 0x01	; 1
    b910:	70 40       	sbci	r23, 0x00	; 0
    b912:	01 90       	ld	r0, Z+
    b914:	01 10       	cpse	r0, r1
    b916:	d8 f7       	brcc	.-10     	; 0xb90e <strnlen+0x2>
    b918:	80 95       	com	r24
    b91a:	90 95       	com	r25
    b91c:	8e 0f       	add	r24, r30
    b91e:	9f 1f       	adc	r25, r31
    b920:	08 95       	ret

0000b922 <fputc>:
    b922:	0f 93       	push	r16
    b924:	1f 93       	push	r17
    b926:	cf 93       	push	r28
    b928:	df 93       	push	r29
    b92a:	fb 01       	movw	r30, r22
    b92c:	23 81       	ldd	r18, Z+3	; 0x03
    b92e:	21 fd       	sbrc	r18, 1
    b930:	03 c0       	rjmp	.+6      	; 0xb938 <fputc+0x16>
    b932:	8f ef       	ldi	r24, 0xFF	; 255
    b934:	9f ef       	ldi	r25, 0xFF	; 255
    b936:	2c c0       	rjmp	.+88     	; 0xb990 <fputc+0x6e>
    b938:	22 ff       	sbrs	r18, 2
    b93a:	16 c0       	rjmp	.+44     	; 0xb968 <fputc+0x46>
    b93c:	46 81       	ldd	r20, Z+6	; 0x06
    b93e:	57 81       	ldd	r21, Z+7	; 0x07
    b940:	24 81       	ldd	r18, Z+4	; 0x04
    b942:	35 81       	ldd	r19, Z+5	; 0x05
    b944:	42 17       	cp	r20, r18
    b946:	53 07       	cpc	r21, r19
    b948:	44 f4       	brge	.+16     	; 0xb95a <fputc+0x38>
    b94a:	a0 81       	ld	r26, Z
    b94c:	b1 81       	ldd	r27, Z+1	; 0x01
    b94e:	9d 01       	movw	r18, r26
    b950:	2f 5f       	subi	r18, 0xFF	; 255
    b952:	3f 4f       	sbci	r19, 0xFF	; 255
    b954:	31 83       	std	Z+1, r19	; 0x01
    b956:	20 83       	st	Z, r18
    b958:	8c 93       	st	X, r24
    b95a:	26 81       	ldd	r18, Z+6	; 0x06
    b95c:	37 81       	ldd	r19, Z+7	; 0x07
    b95e:	2f 5f       	subi	r18, 0xFF	; 255
    b960:	3f 4f       	sbci	r19, 0xFF	; 255
    b962:	37 83       	std	Z+7, r19	; 0x07
    b964:	26 83       	std	Z+6, r18	; 0x06
    b966:	14 c0       	rjmp	.+40     	; 0xb990 <fputc+0x6e>
    b968:	8b 01       	movw	r16, r22
    b96a:	ec 01       	movw	r28, r24
    b96c:	fb 01       	movw	r30, r22
    b96e:	00 84       	ldd	r0, Z+8	; 0x08
    b970:	f1 85       	ldd	r31, Z+9	; 0x09
    b972:	e0 2d       	mov	r30, r0
    b974:	19 95       	eicall
    b976:	89 2b       	or	r24, r25
    b978:	e1 f6       	brne	.-72     	; 0xb932 <fputc+0x10>
    b97a:	d8 01       	movw	r26, r16
    b97c:	16 96       	adiw	r26, 0x06	; 6
    b97e:	8d 91       	ld	r24, X+
    b980:	9c 91       	ld	r25, X
    b982:	17 97       	sbiw	r26, 0x07	; 7
    b984:	01 96       	adiw	r24, 0x01	; 1
    b986:	17 96       	adiw	r26, 0x07	; 7
    b988:	9c 93       	st	X, r25
    b98a:	8e 93       	st	-X, r24
    b98c:	16 97       	sbiw	r26, 0x06	; 6
    b98e:	ce 01       	movw	r24, r28
    b990:	df 91       	pop	r29
    b992:	cf 91       	pop	r28
    b994:	1f 91       	pop	r17
    b996:	0f 91       	pop	r16
    b998:	08 95       	ret

0000b99a <vsnprintf>:
    b99a:	0f 93       	push	r16
    b99c:	1f 93       	push	r17
    b99e:	cf 93       	push	r28
    b9a0:	df 93       	push	r29
    b9a2:	cd b7       	in	r28, 0x3d	; 61
    b9a4:	de b7       	in	r29, 0x3e	; 62
    b9a6:	2e 97       	sbiw	r28, 0x0e	; 14
    b9a8:	0f b6       	in	r0, 0x3f	; 63
    b9aa:	f8 94       	cli
    b9ac:	de bf       	out	0x3e, r29	; 62
    b9ae:	0f be       	out	0x3f, r0	; 63
    b9b0:	cd bf       	out	0x3d, r28	; 61
    b9b2:	8c 01       	movw	r16, r24
    b9b4:	fa 01       	movw	r30, r20
    b9b6:	86 e0       	ldi	r24, 0x06	; 6
    b9b8:	8c 83       	std	Y+4, r24	; 0x04
    b9ba:	1a 83       	std	Y+2, r17	; 0x02
    b9bc:	09 83       	std	Y+1, r16	; 0x01
    b9be:	77 ff       	sbrs	r23, 7
    b9c0:	02 c0       	rjmp	.+4      	; 0xb9c6 <vsnprintf+0x2c>
    b9c2:	60 e0       	ldi	r22, 0x00	; 0
    b9c4:	70 e8       	ldi	r23, 0x80	; 128
    b9c6:	cb 01       	movw	r24, r22
    b9c8:	01 97       	sbiw	r24, 0x01	; 1
    b9ca:	9e 83       	std	Y+6, r25	; 0x06
    b9cc:	8d 83       	std	Y+5, r24	; 0x05
    b9ce:	a9 01       	movw	r20, r18
    b9d0:	bf 01       	movw	r22, r30
    b9d2:	ce 01       	movw	r24, r28
    b9d4:	01 96       	adiw	r24, 0x01	; 1
    b9d6:	c4 d9       	rcall	.-3192   	; 0xad60 <vfprintf>
    b9d8:	4d 81       	ldd	r20, Y+5	; 0x05
    b9da:	5e 81       	ldd	r21, Y+6	; 0x06
    b9dc:	57 fd       	sbrc	r21, 7
    b9de:	0a c0       	rjmp	.+20     	; 0xb9f4 <vsnprintf+0x5a>
    b9e0:	2f 81       	ldd	r18, Y+7	; 0x07
    b9e2:	38 85       	ldd	r19, Y+8	; 0x08
    b9e4:	42 17       	cp	r20, r18
    b9e6:	53 07       	cpc	r21, r19
    b9e8:	0c f4       	brge	.+2      	; 0xb9ec <vsnprintf+0x52>
    b9ea:	9a 01       	movw	r18, r20
    b9ec:	f8 01       	movw	r30, r16
    b9ee:	e2 0f       	add	r30, r18
    b9f0:	f3 1f       	adc	r31, r19
    b9f2:	10 82       	st	Z, r1
    b9f4:	2e 96       	adiw	r28, 0x0e	; 14
    b9f6:	0f b6       	in	r0, 0x3f	; 63
    b9f8:	f8 94       	cli
    b9fa:	de bf       	out	0x3e, r29	; 62
    b9fc:	0f be       	out	0x3f, r0	; 63
    b9fe:	cd bf       	out	0x3d, r28	; 61
    ba00:	df 91       	pop	r29
    ba02:	cf 91       	pop	r28
    ba04:	1f 91       	pop	r17
    ba06:	0f 91       	pop	r16
    ba08:	08 95       	ret

0000ba0a <__ultoa_invert>:
    ba0a:	fa 01       	movw	r30, r20
    ba0c:	aa 27       	eor	r26, r26
    ba0e:	28 30       	cpi	r18, 0x08	; 8
    ba10:	51 f1       	breq	.+84     	; 0xba66 <__ultoa_invert+0x5c>
    ba12:	20 31       	cpi	r18, 0x10	; 16
    ba14:	81 f1       	breq	.+96     	; 0xba76 <__ultoa_invert+0x6c>
    ba16:	e8 94       	clt
    ba18:	6f 93       	push	r22
    ba1a:	6e 7f       	andi	r22, 0xFE	; 254
    ba1c:	6e 5f       	subi	r22, 0xFE	; 254
    ba1e:	7f 4f       	sbci	r23, 0xFF	; 255
    ba20:	8f 4f       	sbci	r24, 0xFF	; 255
    ba22:	9f 4f       	sbci	r25, 0xFF	; 255
    ba24:	af 4f       	sbci	r26, 0xFF	; 255
    ba26:	b1 e0       	ldi	r27, 0x01	; 1
    ba28:	3e d0       	rcall	.+124    	; 0xbaa6 <__ultoa_invert+0x9c>
    ba2a:	b4 e0       	ldi	r27, 0x04	; 4
    ba2c:	3c d0       	rcall	.+120    	; 0xbaa6 <__ultoa_invert+0x9c>
    ba2e:	67 0f       	add	r22, r23
    ba30:	78 1f       	adc	r23, r24
    ba32:	89 1f       	adc	r24, r25
    ba34:	9a 1f       	adc	r25, r26
    ba36:	a1 1d       	adc	r26, r1
    ba38:	68 0f       	add	r22, r24
    ba3a:	79 1f       	adc	r23, r25
    ba3c:	8a 1f       	adc	r24, r26
    ba3e:	91 1d       	adc	r25, r1
    ba40:	a1 1d       	adc	r26, r1
    ba42:	6a 0f       	add	r22, r26
    ba44:	71 1d       	adc	r23, r1
    ba46:	81 1d       	adc	r24, r1
    ba48:	91 1d       	adc	r25, r1
    ba4a:	a1 1d       	adc	r26, r1
    ba4c:	20 d0       	rcall	.+64     	; 0xba8e <__ultoa_invert+0x84>
    ba4e:	09 f4       	brne	.+2      	; 0xba52 <__ultoa_invert+0x48>
    ba50:	68 94       	set
    ba52:	3f 91       	pop	r19
    ba54:	2a e0       	ldi	r18, 0x0A	; 10
    ba56:	26 9f       	mul	r18, r22
    ba58:	11 24       	eor	r1, r1
    ba5a:	30 19       	sub	r19, r0
    ba5c:	30 5d       	subi	r19, 0xD0	; 208
    ba5e:	31 93       	st	Z+, r19
    ba60:	de f6       	brtc	.-74     	; 0xba18 <__ultoa_invert+0xe>
    ba62:	cf 01       	movw	r24, r30
    ba64:	08 95       	ret
    ba66:	46 2f       	mov	r20, r22
    ba68:	47 70       	andi	r20, 0x07	; 7
    ba6a:	40 5d       	subi	r20, 0xD0	; 208
    ba6c:	41 93       	st	Z+, r20
    ba6e:	b3 e0       	ldi	r27, 0x03	; 3
    ba70:	0f d0       	rcall	.+30     	; 0xba90 <__ultoa_invert+0x86>
    ba72:	c9 f7       	brne	.-14     	; 0xba66 <__ultoa_invert+0x5c>
    ba74:	f6 cf       	rjmp	.-20     	; 0xba62 <__ultoa_invert+0x58>
    ba76:	46 2f       	mov	r20, r22
    ba78:	4f 70       	andi	r20, 0x0F	; 15
    ba7a:	40 5d       	subi	r20, 0xD0	; 208
    ba7c:	4a 33       	cpi	r20, 0x3A	; 58
    ba7e:	18 f0       	brcs	.+6      	; 0xba86 <__ultoa_invert+0x7c>
    ba80:	49 5d       	subi	r20, 0xD9	; 217
    ba82:	31 fd       	sbrc	r19, 1
    ba84:	40 52       	subi	r20, 0x20	; 32
    ba86:	41 93       	st	Z+, r20
    ba88:	02 d0       	rcall	.+4      	; 0xba8e <__ultoa_invert+0x84>
    ba8a:	a9 f7       	brne	.-22     	; 0xba76 <__ultoa_invert+0x6c>
    ba8c:	ea cf       	rjmp	.-44     	; 0xba62 <__ultoa_invert+0x58>
    ba8e:	b4 e0       	ldi	r27, 0x04	; 4
    ba90:	a6 95       	lsr	r26
    ba92:	97 95       	ror	r25
    ba94:	87 95       	ror	r24
    ba96:	77 95       	ror	r23
    ba98:	67 95       	ror	r22
    ba9a:	ba 95       	dec	r27
    ba9c:	c9 f7       	brne	.-14     	; 0xba90 <__ultoa_invert+0x86>
    ba9e:	00 97       	sbiw	r24, 0x00	; 0
    baa0:	61 05       	cpc	r22, r1
    baa2:	71 05       	cpc	r23, r1
    baa4:	08 95       	ret
    baa6:	9b 01       	movw	r18, r22
    baa8:	ac 01       	movw	r20, r24
    baaa:	0a 2e       	mov	r0, r26
    baac:	06 94       	lsr	r0
    baae:	57 95       	ror	r21
    bab0:	47 95       	ror	r20
    bab2:	37 95       	ror	r19
    bab4:	27 95       	ror	r18
    bab6:	ba 95       	dec	r27
    bab8:	c9 f7       	brne	.-14     	; 0xbaac <__ultoa_invert+0xa2>
    baba:	62 0f       	add	r22, r18
    babc:	73 1f       	adc	r23, r19
    babe:	84 1f       	adc	r24, r20
    bac0:	95 1f       	adc	r25, r21
    bac2:	a0 1d       	adc	r26, r0
    bac4:	08 95       	ret

0000bac6 <eeprom_read_block>:
    bac6:	dc 01       	movw	r26, r24
    bac8:	cb 01       	movw	r24, r22

0000baca <eeprom_read_blraw>:
    baca:	fc 01       	movw	r30, r24
    bacc:	f9 99       	sbic	0x1f, 1	; 31
    bace:	fe cf       	rjmp	.-4      	; 0xbacc <eeprom_read_blraw+0x2>
    bad0:	06 c0       	rjmp	.+12     	; 0xbade <eeprom_read_blraw+0x14>
    bad2:	f2 bd       	out	0x22, r31	; 34
    bad4:	e1 bd       	out	0x21, r30	; 33
    bad6:	f8 9a       	sbi	0x1f, 0	; 31
    bad8:	31 96       	adiw	r30, 0x01	; 1
    bada:	00 b4       	in	r0, 0x20	; 32
    badc:	0d 92       	st	X+, r0
    bade:	41 50       	subi	r20, 0x01	; 1
    bae0:	50 40       	sbci	r21, 0x00	; 0
    bae2:	b8 f7       	brcc	.-18     	; 0xbad2 <eeprom_read_blraw+0x8>
    bae4:	08 95       	ret

0000bae6 <eeprom_update_block>:
    bae6:	dc 01       	movw	r26, r24
    bae8:	a4 0f       	add	r26, r20
    baea:	b5 1f       	adc	r27, r21
    baec:	41 50       	subi	r20, 0x01	; 1
    baee:	50 40       	sbci	r21, 0x00	; 0
    baf0:	40 f0       	brcs	.+16     	; 0xbb02 <eeprom_update_block+0x1c>
    baf2:	cb 01       	movw	r24, r22
    baf4:	84 0f       	add	r24, r20
    baf6:	95 1f       	adc	r25, r21
    baf8:	2e 91       	ld	r18, -X
    bafa:	05 d0       	rcall	.+10     	; 0xbb06 <eeprom_update_r18>
    bafc:	41 50       	subi	r20, 0x01	; 1
    bafe:	50 40       	sbci	r21, 0x00	; 0
    bb00:	d8 f7       	brcc	.-10     	; 0xbaf8 <eeprom_update_block+0x12>
    bb02:	08 95       	ret

0000bb04 <eeprom_update_byte>:
    bb04:	26 2f       	mov	r18, r22

0000bb06 <eeprom_update_r18>:
    bb06:	f9 99       	sbic	0x1f, 1	; 31
    bb08:	fe cf       	rjmp	.-4      	; 0xbb06 <eeprom_update_r18>
    bb0a:	92 bd       	out	0x22, r25	; 34
    bb0c:	81 bd       	out	0x21, r24	; 33
    bb0e:	f8 9a       	sbi	0x1f, 0	; 31
    bb10:	01 97       	sbiw	r24, 0x01	; 1
    bb12:	00 b4       	in	r0, 0x20	; 32
    bb14:	02 16       	cp	r0, r18
    bb16:	39 f0       	breq	.+14     	; 0xbb26 <eeprom_update_r18+0x20>
    bb18:	1f ba       	out	0x1f, r1	; 31
    bb1a:	20 bd       	out	0x20, r18	; 32
    bb1c:	0f b6       	in	r0, 0x3f	; 63
    bb1e:	f8 94       	cli
    bb20:	fa 9a       	sbi	0x1f, 2	; 31
    bb22:	f9 9a       	sbi	0x1f, 1	; 31
    bb24:	0f be       	out	0x3f, r0	; 63
    bb26:	08 95       	ret

0000bb28 <eeprom_write_block>:
    bb28:	dc 01       	movw	r26, r24
    bb2a:	cb 01       	movw	r24, r22
    bb2c:	02 c0       	rjmp	.+4      	; 0xbb32 <eeprom_write_block+0xa>
    bb2e:	2d 91       	ld	r18, X+
    bb30:	05 d0       	rcall	.+10     	; 0xbb3c <eeprom_write_r18>
    bb32:	41 50       	subi	r20, 0x01	; 1
    bb34:	50 40       	sbci	r21, 0x00	; 0
    bb36:	d8 f7       	brcc	.-10     	; 0xbb2e <eeprom_write_block+0x6>
    bb38:	08 95       	ret

0000bb3a <eeprom_write_byte>:
    bb3a:	26 2f       	mov	r18, r22

0000bb3c <eeprom_write_r18>:
    bb3c:	f9 99       	sbic	0x1f, 1	; 31
    bb3e:	fe cf       	rjmp	.-4      	; 0xbb3c <eeprom_write_r18>
    bb40:	1f ba       	out	0x1f, r1	; 31
    bb42:	92 bd       	out	0x22, r25	; 34
    bb44:	81 bd       	out	0x21, r24	; 33
    bb46:	20 bd       	out	0x20, r18	; 32
    bb48:	0f b6       	in	r0, 0x3f	; 63
    bb4a:	f8 94       	cli
    bb4c:	fa 9a       	sbi	0x1f, 2	; 31
    bb4e:	f9 9a       	sbi	0x1f, 1	; 31
    bb50:	0f be       	out	0x3f, r0	; 63
    bb52:	01 96       	adiw	r24, 0x01	; 1
    bb54:	08 95       	ret

0000bb56 <_exit>:
    bb56:	f8 94       	cli

0000bb58 <__stop_program>:
    bb58:	ff cf       	rjmp	.-2      	; 0xbb58 <__stop_program>
