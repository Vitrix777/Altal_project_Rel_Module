
mega2560_Rtos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000428  00800200  0000b7c2  0000b856  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000b7c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000451  00800628  00800628  0000bc7e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000bc7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000bcdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000aa8  00000000  00000000  0000bd20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011a72  00000000  00000000  0000c7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e99  00000000  00000000  0001e23a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008d10  00000000  00000000  000210d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000028d4  00000000  00000000  00029de4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003a4e  00000000  00000000  0002c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f202  00000000  00000000  00030106  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ca0  00000000  00000000  0003f308  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6c c5       	rjmp	.+2776   	; 0xada <__ctors_end>
       2:	00 00       	nop
       4:	8b c5       	rjmp	.+2838   	; 0xb1c <__bad_interrupt>
       6:	00 00       	nop
       8:	89 c5       	rjmp	.+2834   	; 0xb1c <__bad_interrupt>
       a:	00 00       	nop
       c:	87 c5       	rjmp	.+2830   	; 0xb1c <__bad_interrupt>
       e:	00 00       	nop
      10:	85 c5       	rjmp	.+2826   	; 0xb1c <__bad_interrupt>
      12:	00 00       	nop
      14:	83 c5       	rjmp	.+2822   	; 0xb1c <__bad_interrupt>
      16:	00 00       	nop
      18:	81 c5       	rjmp	.+2818   	; 0xb1c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7f c5       	rjmp	.+2814   	; 0xb1c <__bad_interrupt>
      1e:	00 00       	nop
      20:	7d c5       	rjmp	.+2810   	; 0xb1c <__bad_interrupt>
      22:	00 00       	nop
      24:	7b c5       	rjmp	.+2806   	; 0xb1c <__bad_interrupt>
      26:	00 00       	nop
      28:	79 c5       	rjmp	.+2802   	; 0xb1c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	77 c5       	rjmp	.+2798   	; 0xb1c <__bad_interrupt>
      2e:	00 00       	nop
      30:	75 c5       	rjmp	.+2794   	; 0xb1c <__bad_interrupt>
      32:	00 00       	nop
      34:	73 c5       	rjmp	.+2790   	; 0xb1c <__bad_interrupt>
      36:	00 00       	nop
      38:	71 c5       	rjmp	.+2786   	; 0xb1c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6f c5       	rjmp	.+2782   	; 0xb1c <__bad_interrupt>
      3e:	00 00       	nop
      40:	6d c5       	rjmp	.+2778   	; 0xb1c <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 5a 21 	jmp	0x42b4	; 0x42b4 <__vector_17>
      48:	69 c5       	rjmp	.+2770   	; 0xb1c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	67 c5       	rjmp	.+2766   	; 0xb1c <__bad_interrupt>
      4e:	00 00       	nop
      50:	65 c5       	rjmp	.+2762   	; 0xb1c <__bad_interrupt>
      52:	00 00       	nop
      54:	63 c5       	rjmp	.+2758   	; 0xb1c <__bad_interrupt>
      56:	00 00       	nop
      58:	61 c5       	rjmp	.+2754   	; 0xb1c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5f c5       	rjmp	.+2750   	; 0xb1c <__bad_interrupt>
      5e:	00 00       	nop
      60:	5d c5       	rjmp	.+2746   	; 0xb1c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 8f 10 	jmp	0x211e	; 0x211e <__vector_25>
      68:	0c 94 17 11 	jmp	0x222e	; 0x222e <__vector_26>
      6c:	57 c5       	rjmp	.+2734   	; 0xb1c <__bad_interrupt>
      6e:	00 00       	nop
      70:	55 c5       	rjmp	.+2730   	; 0xb1c <__bad_interrupt>
      72:	00 00       	nop
      74:	53 c5       	rjmp	.+2726   	; 0xb1c <__bad_interrupt>
      76:	00 00       	nop
      78:	51 c5       	rjmp	.+2722   	; 0xb1c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4f c5       	rjmp	.+2718   	; 0xb1c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c7       	rjmp	.+3754   	; 0xf2c <__vector_32>
      82:	00 00       	nop
      84:	4b c5       	rjmp	.+2710   	; 0xb1c <__bad_interrupt>
      86:	00 00       	nop
      88:	49 c5       	rjmp	.+2706   	; 0xb1c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	47 c5       	rjmp	.+2702   	; 0xb1c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__vector_36>
      94:	0c 94 bf 11 	jmp	0x237e	; 0x237e <__vector_37>
      98:	41 c5       	rjmp	.+2690   	; 0xb1c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	3f c5       	rjmp	.+2686   	; 0xb1c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3d c5       	rjmp	.+2682   	; 0xb1c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3b c5       	rjmp	.+2678   	; 0xb1c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	39 c5       	rjmp	.+2674   	; 0xb1c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	37 c5       	rjmp	.+2670   	; 0xb1c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	35 c5       	rjmp	.+2666   	; 0xb1c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	33 c5       	rjmp	.+2662   	; 0xb1c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	31 c5       	rjmp	.+2658   	; 0xb1c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2f c5       	rjmp	.+2654   	; 0xb1c <__bad_interrupt>
      be:	00 00       	nop
      c0:	2d c5       	rjmp	.+2650   	; 0xb1c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2b c5       	rjmp	.+2646   	; 0xb1c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	29 c5       	rjmp	.+2642   	; 0xb1c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__vector_51>
      d0:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__vector_52>
      d4:	23 c5       	rjmp	.+2630   	; 0xb1c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <__vector_54>
      dc:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__vector_55>
      e0:	1d c5       	rjmp	.+2618   	; 0xb1c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0c 0d       	add	r16, r12
      e6:	0c 0d       	add	r16, r12
      e8:	11 0d       	add	r17, r1
      ea:	11 0d       	add	r17, r1
      ec:	16 0d       	add	r17, r6
      ee:	16 0d       	add	r17, r6
      f0:	1b 0d       	add	r17, r11
      f2:	1b 0d       	add	r17, r11
      f4:	7d 0d       	add	r23, r13
      f6:	7d 0d       	add	r23, r13
      f8:	78 0d       	add	r23, r8
      fa:	78 0d       	add	r23, r8
      fc:	73 0d       	add	r23, r3
      fe:	73 0d       	add	r23, r3
     100:	6e 0d       	add	r22, r14
     102:	6e 0d       	add	r22, r14
     104:	31 0e       	add	r3, r17
     106:	31 0e       	add	r3, r17
     108:	38 0e       	add	r3, r24
     10a:	38 0e       	add	r3, r24
     10c:	3f 0e       	add	r3, r31
     10e:	3f 0e       	add	r3, r31
     110:	46 0e       	add	r4, r22
     112:	46 0e       	add	r4, r22
     114:	bd 0e       	add	r11, r29
     116:	ee 0e       	add	r14, r30
     118:	28 0f       	add	r18, r24
     11a:	59 0f       	add	r21, r25
     11c:	93 0f       	add	r25, r19
     11e:	c4 0f       	add	r28, r20
     120:	02 10       	cpse	r0, r2
     122:	33 10       	cpse	r3, r3
     124:	39 1d       	adc	r19, r9
     126:	39 1d       	adc	r19, r9
     128:	39 1d       	adc	r19, r9
     12a:	84 1d       	adc	r24, r4
     12c:	6d 1d       	adc	r22, r13
     12e:	81 1d       	adc	r24, r1
     130:	39 1d       	adc	r19, r9
     132:	39 1d       	adc	r19, r9
     134:	84 1d       	adc	r24, r4
     136:	6d 1d       	adc	r22, r13
     138:	be 25       	eor	r27, r14
     13a:	d2 24       	eor	r13, r2
     13c:	d2 24       	eor	r13, r2
     13e:	db 26       	eor	r13, r27
     140:	db 26       	eor	r13, r27
     142:	db 26       	eor	r13, r27
     144:	db 26       	eor	r13, r27
     146:	db 26       	eor	r13, r27
     148:	db 26       	eor	r13, r27
     14a:	db 26       	eor	r13, r27
     14c:	c2 25       	eor	r28, r2
     14e:	d7 24       	eor	r13, r7
     150:	d7 24       	eor	r13, r7
     152:	db 26       	eor	r13, r27
     154:	db 26       	eor	r13, r27
     156:	db 26       	eor	r13, r27
     158:	db 26       	eor	r13, r27
     15a:	db 26       	eor	r13, r27
     15c:	db 26       	eor	r13, r27
     15e:	db 26       	eor	r13, r27
     160:	c6 25       	eor	r28, r6
     162:	dc 24       	eor	r13, r12
     164:	dc 24       	eor	r13, r12
     166:	db 26       	eor	r13, r27
     168:	db 26       	eor	r13, r27
     16a:	db 26       	eor	r13, r27
     16c:	db 26       	eor	r13, r27
     16e:	db 26       	eor	r13, r27
     170:	db 26       	eor	r13, r27
     172:	db 26       	eor	r13, r27
     174:	ca 25       	eor	r28, r10
     176:	e1 24       	eor	r14, r1
     178:	e1 24       	eor	r14, r1
     17a:	db 26       	eor	r13, r27
     17c:	db 26       	eor	r13, r27
     17e:	db 26       	eor	r13, r27
     180:	db 26       	eor	r13, r27
     182:	db 26       	eor	r13, r27
     184:	db 26       	eor	r13, r27
     186:	db 26       	eor	r13, r27
     188:	ce 25       	eor	r28, r14
     18a:	e6 24       	eor	r14, r6
     18c:	e6 24       	eor	r14, r6
     18e:	db 26       	eor	r13, r27
     190:	db 26       	eor	r13, r27
     192:	db 26       	eor	r13, r27
     194:	db 26       	eor	r13, r27
     196:	db 26       	eor	r13, r27
     198:	db 26       	eor	r13, r27
     19a:	db 26       	eor	r13, r27
     19c:	d2 25       	eor	r29, r2
     19e:	eb 24       	eor	r14, r11
     1a0:	eb 24       	eor	r14, r11
     1a2:	db 26       	eor	r13, r27
     1a4:	db 26       	eor	r13, r27
     1a6:	db 26       	eor	r13, r27
     1a8:	db 26       	eor	r13, r27
     1aa:	db 26       	eor	r13, r27
     1ac:	db 26       	eor	r13, r27
     1ae:	db 26       	eor	r13, r27
     1b0:	d6 25       	eor	r29, r6
     1b2:	f0 24       	eor	r15, r0
     1b4:	f0 24       	eor	r15, r0
     1b6:	db 26       	eor	r13, r27
     1b8:	db 26       	eor	r13, r27
     1ba:	db 26       	eor	r13, r27
     1bc:	db 26       	eor	r13, r27
     1be:	db 26       	eor	r13, r27
     1c0:	db 26       	eor	r13, r27
     1c2:	db 26       	eor	r13, r27
     1c4:	da 25       	eor	r29, r10
     1c6:	00 25       	eor	r16, r0
     1c8:	00 25       	eor	r16, r0
     1ca:	db 26       	eor	r13, r27
     1cc:	db 26       	eor	r13, r27
     1ce:	db 26       	eor	r13, r27
     1d0:	db 26       	eor	r13, r27
     1d2:	db 26       	eor	r13, r27
     1d4:	db 26       	eor	r13, r27
     1d6:	db 26       	eor	r13, r27
     1d8:	de 25       	eor	r29, r14
     1da:	10 25       	eor	r17, r0
     1dc:	10 25       	eor	r17, r0
     1de:	db 26       	eor	r13, r27
     1e0:	db 26       	eor	r13, r27
     1e2:	db 26       	eor	r13, r27
     1e4:	db 26       	eor	r13, r27
     1e6:	db 26       	eor	r13, r27
     1e8:	db 26       	eor	r13, r27
     1ea:	db 26       	eor	r13, r27
     1ec:	e2 25       	eor	r30, r2
     1ee:	20 25       	eor	r18, r0
     1f0:	20 25       	eor	r18, r0
     1f2:	db 26       	eor	r13, r27
     1f4:	db 26       	eor	r13, r27
     1f6:	db 26       	eor	r13, r27
     1f8:	db 26       	eor	r13, r27
     1fa:	db 26       	eor	r13, r27
     1fc:	db 26       	eor	r13, r27
     1fe:	db 26       	eor	r13, r27
     200:	e6 25       	eor	r30, r6
     202:	30 25       	eor	r19, r0
     204:	30 25       	eor	r19, r0
     206:	db 26       	eor	r13, r27
     208:	db 26       	eor	r13, r27
     20a:	db 26       	eor	r13, r27
     20c:	db 26       	eor	r13, r27
     20e:	db 26       	eor	r13, r27
     210:	db 26       	eor	r13, r27
     212:	db 26       	eor	r13, r27
     214:	ea 25       	eor	r30, r10
     216:	35 25       	eor	r19, r5
     218:	35 25       	eor	r19, r5
     21a:	db 26       	eor	r13, r27
     21c:	db 26       	eor	r13, r27
     21e:	db 26       	eor	r13, r27
     220:	db 26       	eor	r13, r27
     222:	db 26       	eor	r13, r27
     224:	db 26       	eor	r13, r27
     226:	db 26       	eor	r13, r27
     228:	ee 25       	eor	r30, r14
     22a:	45 25       	eor	r20, r5
     22c:	45 25       	eor	r20, r5
     22e:	db 26       	eor	r13, r27
     230:	db 26       	eor	r13, r27
     232:	db 26       	eor	r13, r27
     234:	db 26       	eor	r13, r27
     236:	db 26       	eor	r13, r27
     238:	db 26       	eor	r13, r27
     23a:	db 26       	eor	r13, r27
     23c:	f2 25       	eor	r31, r2
     23e:	54 25       	eor	r21, r4
     240:	54 25       	eor	r21, r4
     242:	db 26       	eor	r13, r27
     244:	db 26       	eor	r13, r27
     246:	db 26       	eor	r13, r27
     248:	db 26       	eor	r13, r27
     24a:	db 26       	eor	r13, r27
     24c:	db 26       	eor	r13, r27
     24e:	db 26       	eor	r13, r27
     250:	f6 25       	eor	r31, r6
     252:	64 25       	eor	r22, r4
     254:	64 25       	eor	r22, r4
     256:	db 26       	eor	r13, r27
     258:	db 26       	eor	r13, r27
     25a:	db 26       	eor	r13, r27
     25c:	db 26       	eor	r13, r27
     25e:	db 26       	eor	r13, r27
     260:	db 26       	eor	r13, r27
     262:	db 26       	eor	r13, r27
     264:	fa 25       	eor	r31, r10
     266:	74 25       	eor	r23, r4
     268:	74 25       	eor	r23, r4
     26a:	db 26       	eor	r13, r27
     26c:	db 26       	eor	r13, r27
     26e:	db 26       	eor	r13, r27
     270:	db 26       	eor	r13, r27
     272:	db 26       	eor	r13, r27
     274:	db 26       	eor	r13, r27
     276:	db 26       	eor	r13, r27
     278:	fe 25       	eor	r31, r14
     27a:	84 25       	eor	r24, r4
     27c:	84 25       	eor	r24, r4
     27e:	db 26       	eor	r13, r27
     280:	db 26       	eor	r13, r27
     282:	db 26       	eor	r13, r27
     284:	db 26       	eor	r13, r27
     286:	db 26       	eor	r13, r27
     288:	db 26       	eor	r13, r27
     28a:	db 26       	eor	r13, r27
     28c:	02 26       	eor	r0, r18
     28e:	94 25       	eor	r25, r4
     290:	94 25       	eor	r25, r4
     292:	db 26       	eor	r13, r27
     294:	db 26       	eor	r13, r27
     296:	db 26       	eor	r13, r27
     298:	db 26       	eor	r13, r27
     29a:	db 26       	eor	r13, r27
     29c:	db 26       	eor	r13, r27
     29e:	db 26       	eor	r13, r27
     2a0:	06 26       	eor	r0, r22
     2a2:	a4 25       	eor	r26, r4
     2a4:	a4 25       	eor	r26, r4
     2a6:	db 26       	eor	r13, r27
     2a8:	db 26       	eor	r13, r27
     2aa:	db 26       	eor	r13, r27
     2ac:	db 26       	eor	r13, r27
     2ae:	db 26       	eor	r13, r27
     2b0:	db 26       	eor	r13, r27
     2b2:	db 26       	eor	r13, r27
     2b4:	0a 26       	eor	r0, r26
     2b6:	b4 25       	eor	r27, r4
     2b8:	b4 25       	eor	r27, r4
     2ba:	db 26       	eor	r13, r27
     2bc:	db 26       	eor	r13, r27
     2be:	db 26       	eor	r13, r27
     2c0:	db 26       	eor	r13, r27
     2c2:	db 26       	eor	r13, r27
     2c4:	db 26       	eor	r13, r27
     2c6:	db 26       	eor	r13, r27
     2c8:	0e 26       	eor	r0, r30
     2ca:	db 26       	eor	r13, r27
     2cc:	db 26       	eor	r13, r27
     2ce:	db 26       	eor	r13, r27
     2d0:	db 26       	eor	r13, r27
     2d2:	db 26       	eor	r13, r27
     2d4:	db 26       	eor	r13, r27
     2d6:	db 26       	eor	r13, r27
     2d8:	db 26       	eor	r13, r27
     2da:	db 26       	eor	r13, r27
     2dc:	12 26       	eor	r1, r18
     2de:	db 26       	eor	r13, r27
     2e0:	db 26       	eor	r13, r27
     2e2:	db 26       	eor	r13, r27
     2e4:	db 26       	eor	r13, r27
     2e6:	db 26       	eor	r13, r27
     2e8:	db 26       	eor	r13, r27
     2ea:	db 26       	eor	r13, r27
     2ec:	db 26       	eor	r13, r27
     2ee:	db 26       	eor	r13, r27
     2f0:	16 26       	eor	r1, r22
     2f2:	db 26       	eor	r13, r27
     2f4:	db 26       	eor	r13, r27
     2f6:	db 26       	eor	r13, r27
     2f8:	db 26       	eor	r13, r27
     2fa:	db 26       	eor	r13, r27
     2fc:	db 26       	eor	r13, r27
     2fe:	db 26       	eor	r13, r27
     300:	db 26       	eor	r13, r27
     302:	db 26       	eor	r13, r27
     304:	1a 26       	eor	r1, r26
     306:	db 26       	eor	r13, r27
     308:	db 26       	eor	r13, r27
     30a:	db 26       	eor	r13, r27
     30c:	db 26       	eor	r13, r27
     30e:	db 26       	eor	r13, r27
     310:	db 26       	eor	r13, r27
     312:	db 26       	eor	r13, r27
     314:	db 26       	eor	r13, r27
     316:	db 26       	eor	r13, r27
     318:	1e 26       	eor	r1, r30
     31a:	db 26       	eor	r13, r27
     31c:	db 26       	eor	r13, r27
     31e:	db 26       	eor	r13, r27
     320:	db 26       	eor	r13, r27
     322:	db 26       	eor	r13, r27
     324:	db 26       	eor	r13, r27
     326:	db 26       	eor	r13, r27
     328:	db 26       	eor	r13, r27
     32a:	db 26       	eor	r13, r27
     32c:	29 26       	eor	r2, r25
     32e:	db 26       	eor	r13, r27
     330:	db 26       	eor	r13, r27
     332:	db 26       	eor	r13, r27
     334:	db 26       	eor	r13, r27
     336:	db 26       	eor	r13, r27
     338:	db 26       	eor	r13, r27
     33a:	db 26       	eor	r13, r27
     33c:	db 26       	eor	r13, r27
     33e:	db 26       	eor	r13, r27
     340:	2d 26       	eor	r2, r29
     342:	db 26       	eor	r13, r27
     344:	db 26       	eor	r13, r27
     346:	db 26       	eor	r13, r27
     348:	db 26       	eor	r13, r27
     34a:	db 26       	eor	r13, r27
     34c:	db 26       	eor	r13, r27
     34e:	db 26       	eor	r13, r27
     350:	db 26       	eor	r13, r27
     352:	db 26       	eor	r13, r27
     354:	31 26       	eor	r3, r17
     356:	db 26       	eor	r13, r27
     358:	db 26       	eor	r13, r27
     35a:	db 26       	eor	r13, r27
     35c:	db 26       	eor	r13, r27
     35e:	db 26       	eor	r13, r27
     360:	db 26       	eor	r13, r27
     362:	db 26       	eor	r13, r27
     364:	db 26       	eor	r13, r27
     366:	db 26       	eor	r13, r27
     368:	35 26       	eor	r3, r21
     36a:	db 26       	eor	r13, r27
     36c:	db 26       	eor	r13, r27
     36e:	db 26       	eor	r13, r27
     370:	db 26       	eor	r13, r27
     372:	db 26       	eor	r13, r27
     374:	db 26       	eor	r13, r27
     376:	db 26       	eor	r13, r27
     378:	db 26       	eor	r13, r27
     37a:	db 26       	eor	r13, r27
     37c:	39 26       	eor	r3, r25
     37e:	82 26       	eor	r8, r18
     380:	a6 26       	eor	r10, r22
     382:	db 26       	eor	r13, r27
     384:	db 26       	eor	r13, r27
     386:	db 26       	eor	r13, r27
     388:	db 26       	eor	r13, r27
     38a:	db 26       	eor	r13, r27
     38c:	db 26       	eor	r13, r27
     38e:	db 26       	eor	r13, r27
     390:	3f 26       	eor	r3, r31
     392:	85 26       	eor	r8, r21
     394:	ac 26       	eor	r10, r28
     396:	db 26       	eor	r13, r27
     398:	db 26       	eor	r13, r27
     39a:	db 26       	eor	r13, r27
     39c:	db 26       	eor	r13, r27
     39e:	db 26       	eor	r13, r27
     3a0:	db 26       	eor	r13, r27
     3a2:	db 26       	eor	r13, r27
     3a4:	43 26       	eor	r4, r19
     3a6:	8b 26       	eor	r8, r27
     3a8:	b2 26       	eor	r11, r18
     3aa:	db 26       	eor	r13, r27
     3ac:	db 26       	eor	r13, r27
     3ae:	db 26       	eor	r13, r27
     3b0:	db 26       	eor	r13, r27
     3b2:	db 26       	eor	r13, r27
     3b4:	db 26       	eor	r13, r27
     3b6:	db 26       	eor	r13, r27
     3b8:	47 26       	eor	r4, r23
     3ba:	91 26       	eor	r9, r17
     3bc:	b8 26       	eor	r11, r24
     3be:	db 26       	eor	r13, r27
     3c0:	db 26       	eor	r13, r27
     3c2:	db 26       	eor	r13, r27
     3c4:	db 26       	eor	r13, r27
     3c6:	db 26       	eor	r13, r27
     3c8:	db 26       	eor	r13, r27
     3ca:	db 26       	eor	r13, r27
     3cc:	4b 26       	eor	r4, r27
     3ce:	97 26       	eor	r9, r23
     3d0:	be 26       	eor	r11, r30
     3d2:	db 26       	eor	r13, r27
     3d4:	db 26       	eor	r13, r27
     3d6:	db 26       	eor	r13, r27
     3d8:	db 26       	eor	r13, r27
     3da:	db 26       	eor	r13, r27
     3dc:	db 26       	eor	r13, r27
     3de:	db 26       	eor	r13, r27
     3e0:	4f 26       	eor	r4, r31
     3e2:	9a 26       	eor	r9, r26
     3e4:	c4 26       	eor	r12, r20
     3e6:	db 26       	eor	r13, r27
     3e8:	db 26       	eor	r13, r27
     3ea:	db 26       	eor	r13, r27
     3ec:	db 26       	eor	r13, r27
     3ee:	db 26       	eor	r13, r27
     3f0:	db 26       	eor	r13, r27
     3f2:	db 26       	eor	r13, r27
     3f4:	52 26       	eor	r5, r18
     3f6:	db 26       	eor	r13, r27
     3f8:	db 26       	eor	r13, r27
     3fa:	db 26       	eor	r13, r27
     3fc:	db 26       	eor	r13, r27
     3fe:	db 26       	eor	r13, r27
     400:	db 26       	eor	r13, r27
     402:	db 26       	eor	r13, r27
     404:	db 26       	eor	r13, r27
     406:	db 26       	eor	r13, r27
     408:	56 26       	eor	r5, r22
     40a:	9d 26       	eor	r9, r29
     40c:	ca 26       	eor	r12, r26
     40e:	db 26       	eor	r13, r27
     410:	db 26       	eor	r13, r27
     412:	db 26       	eor	r13, r27
     414:	db 26       	eor	r13, r27
     416:	db 26       	eor	r13, r27
     418:	db 26       	eor	r13, r27
     41a:	db 26       	eor	r13, r27
     41c:	59 26       	eor	r5, r25
     41e:	a0 26       	eor	r10, r16
     420:	d0 26       	eor	r13, r16
     422:	db 26       	eor	r13, r27
     424:	db 26       	eor	r13, r27
     426:	db 26       	eor	r13, r27
     428:	db 26       	eor	r13, r27
     42a:	db 26       	eor	r13, r27
     42c:	db 26       	eor	r13, r27
     42e:	db 26       	eor	r13, r27
     430:	5c 26       	eor	r5, r28
     432:	a3 26       	eor	r10, r19
     434:	d6 26       	eor	r13, r22
     436:	db 26       	eor	r13, r27
     438:	db 26       	eor	r13, r27
     43a:	db 26       	eor	r13, r27
     43c:	db 26       	eor	r13, r27
     43e:	db 26       	eor	r13, r27
     440:	db 26       	eor	r13, r27
     442:	db 26       	eor	r13, r27
     444:	5f 26       	eor	r5, r31
     446:	db 26       	eor	r13, r27
     448:	db 26       	eor	r13, r27
     44a:	db 26       	eor	r13, r27
     44c:	db 26       	eor	r13, r27
     44e:	db 26       	eor	r13, r27
     450:	db 26       	eor	r13, r27
     452:	db 26       	eor	r13, r27
     454:	db 26       	eor	r13, r27
     456:	db 26       	eor	r13, r27
     458:	63 26       	eor	r6, r19
     45a:	db 26       	eor	r13, r27
     45c:	db 26       	eor	r13, r27
     45e:	db 26       	eor	r13, r27
     460:	db 26       	eor	r13, r27
     462:	db 26       	eor	r13, r27
     464:	db 26       	eor	r13, r27
     466:	db 26       	eor	r13, r27
     468:	db 26       	eor	r13, r27
     46a:	db 26       	eor	r13, r27
     46c:	67 26       	eor	r6, r23
     46e:	db 26       	eor	r13, r27
     470:	db 26       	eor	r13, r27
     472:	db 26       	eor	r13, r27
     474:	db 26       	eor	r13, r27
     476:	db 26       	eor	r13, r27
     478:	db 26       	eor	r13, r27
     47a:	db 26       	eor	r13, r27
     47c:	db 26       	eor	r13, r27
     47e:	db 26       	eor	r13, r27
     480:	6b 26       	eor	r6, r27
     482:	db 26       	eor	r13, r27
     484:	db 26       	eor	r13, r27
     486:	db 26       	eor	r13, r27
     488:	db 26       	eor	r13, r27
     48a:	db 26       	eor	r13, r27
     48c:	db 26       	eor	r13, r27
     48e:	db 26       	eor	r13, r27
     490:	db 26       	eor	r13, r27
     492:	db 26       	eor	r13, r27
     494:	6f 26       	eor	r6, r31
     496:	db 26       	eor	r13, r27
     498:	db 26       	eor	r13, r27
     49a:	db 26       	eor	r13, r27
     49c:	db 26       	eor	r13, r27
     49e:	db 26       	eor	r13, r27
     4a0:	db 26       	eor	r13, r27
     4a2:	db 26       	eor	r13, r27
     4a4:	db 26       	eor	r13, r27
     4a6:	db 26       	eor	r13, r27
     4a8:	72 26       	eor	r7, r18
     4aa:	db 26       	eor	r13, r27
     4ac:	db 26       	eor	r13, r27
     4ae:	db 26       	eor	r13, r27
     4b0:	db 26       	eor	r13, r27
     4b2:	db 26       	eor	r13, r27
     4b4:	db 26       	eor	r13, r27
     4b6:	db 26       	eor	r13, r27
     4b8:	db 26       	eor	r13, r27
     4ba:	db 26       	eor	r13, r27
     4bc:	76 26       	eor	r7, r22
     4be:	db 26       	eor	r13, r27
     4c0:	db 26       	eor	r13, r27
     4c2:	db 26       	eor	r13, r27
     4c4:	db 26       	eor	r13, r27
     4c6:	db 26       	eor	r13, r27
     4c8:	db 26       	eor	r13, r27
     4ca:	db 26       	eor	r13, r27
     4cc:	db 26       	eor	r13, r27
     4ce:	db 26       	eor	r13, r27
     4d0:	7a 26       	eor	r7, r26
     4d2:	db 26       	eor	r13, r27
     4d4:	db 26       	eor	r13, r27
     4d6:	db 26       	eor	r13, r27
     4d8:	db 26       	eor	r13, r27
     4da:	db 26       	eor	r13, r27
     4dc:	db 26       	eor	r13, r27
     4de:	db 26       	eor	r13, r27
     4e0:	db 26       	eor	r13, r27
     4e2:	db 26       	eor	r13, r27
     4e4:	7e 26       	eor	r7, r30
     4e6:	ef 26       	eor	r14, r31
     4e8:	a4 27       	eor	r26, r20
     4ea:	a4 27       	eor	r26, r20
     4ec:	a4 27       	eor	r26, r20
     4ee:	a4 27       	eor	r26, r20
     4f0:	a4 27       	eor	r26, r20
     4f2:	a4 27       	eor	r26, r20
     4f4:	a4 27       	eor	r26, r20
     4f6:	a4 27       	eor	r26, r20
     4f8:	a4 27       	eor	r26, r20
     4fa:	f1 26       	eor	r15, r17
     4fc:	a4 27       	eor	r26, r20
     4fe:	a4 27       	eor	r26, r20
     500:	a4 27       	eor	r26, r20
     502:	a4 27       	eor	r26, r20
     504:	a4 27       	eor	r26, r20
     506:	a4 27       	eor	r26, r20
     508:	a4 27       	eor	r26, r20
     50a:	a4 27       	eor	r26, r20
     50c:	a4 27       	eor	r26, r20
     50e:	f4 26       	eor	r15, r20
     510:	a4 27       	eor	r26, r20
     512:	a4 27       	eor	r26, r20
     514:	a4 27       	eor	r26, r20
     516:	a4 27       	eor	r26, r20
     518:	a4 27       	eor	r26, r20
     51a:	a4 27       	eor	r26, r20
     51c:	a4 27       	eor	r26, r20
     51e:	a4 27       	eor	r26, r20
     520:	a4 27       	eor	r26, r20
     522:	f7 26       	eor	r15, r23
     524:	a4 27       	eor	r26, r20
     526:	a4 27       	eor	r26, r20
     528:	a4 27       	eor	r26, r20
     52a:	a4 27       	eor	r26, r20
     52c:	a4 27       	eor	r26, r20
     52e:	a4 27       	eor	r26, r20
     530:	a4 27       	eor	r26, r20
     532:	a4 27       	eor	r26, r20
     534:	a4 27       	eor	r26, r20
     536:	fa 26       	eor	r15, r26
     538:	a4 27       	eor	r26, r20
     53a:	a4 27       	eor	r26, r20
     53c:	a4 27       	eor	r26, r20
     53e:	a4 27       	eor	r26, r20
     540:	a4 27       	eor	r26, r20
     542:	a4 27       	eor	r26, r20
     544:	a4 27       	eor	r26, r20
     546:	a4 27       	eor	r26, r20
     548:	a4 27       	eor	r26, r20
     54a:	fd 26       	eor	r15, r29
     54c:	a4 27       	eor	r26, r20
     54e:	a4 27       	eor	r26, r20
     550:	a4 27       	eor	r26, r20
     552:	a4 27       	eor	r26, r20
     554:	a4 27       	eor	r26, r20
     556:	a4 27       	eor	r26, r20
     558:	a4 27       	eor	r26, r20
     55a:	a4 27       	eor	r26, r20
     55c:	a4 27       	eor	r26, r20
     55e:	00 27       	eor	r16, r16
     560:	a4 27       	eor	r26, r20
     562:	a4 27       	eor	r26, r20
     564:	a4 27       	eor	r26, r20
     566:	a4 27       	eor	r26, r20
     568:	a4 27       	eor	r26, r20
     56a:	a4 27       	eor	r26, r20
     56c:	a4 27       	eor	r26, r20
     56e:	a4 27       	eor	r26, r20
     570:	a4 27       	eor	r26, r20
     572:	03 27       	eor	r16, r19
     574:	a4 27       	eor	r26, r20
     576:	a4 27       	eor	r26, r20
     578:	a4 27       	eor	r26, r20
     57a:	a4 27       	eor	r26, r20
     57c:	a4 27       	eor	r26, r20
     57e:	a4 27       	eor	r26, r20
     580:	a4 27       	eor	r26, r20
     582:	a4 27       	eor	r26, r20
     584:	a4 27       	eor	r26, r20
     586:	06 27       	eor	r16, r22
     588:	a4 27       	eor	r26, r20
     58a:	a4 27       	eor	r26, r20
     58c:	a4 27       	eor	r26, r20
     58e:	a4 27       	eor	r26, r20
     590:	a4 27       	eor	r26, r20
     592:	a4 27       	eor	r26, r20
     594:	a4 27       	eor	r26, r20
     596:	a4 27       	eor	r26, r20
     598:	a4 27       	eor	r26, r20
     59a:	09 27       	eor	r16, r25
     59c:	a4 27       	eor	r26, r20
     59e:	a4 27       	eor	r26, r20
     5a0:	a4 27       	eor	r26, r20
     5a2:	a4 27       	eor	r26, r20
     5a4:	a4 27       	eor	r26, r20
     5a6:	a4 27       	eor	r26, r20
     5a8:	a4 27       	eor	r26, r20
     5aa:	a4 27       	eor	r26, r20
     5ac:	a4 27       	eor	r26, r20
     5ae:	0c 27       	eor	r16, r28
     5b0:	a4 27       	eor	r26, r20
     5b2:	a4 27       	eor	r26, r20
     5b4:	a4 27       	eor	r26, r20
     5b6:	a4 27       	eor	r26, r20
     5b8:	a4 27       	eor	r26, r20
     5ba:	a4 27       	eor	r26, r20
     5bc:	a4 27       	eor	r26, r20
     5be:	a4 27       	eor	r26, r20
     5c0:	a4 27       	eor	r26, r20
     5c2:	0f 27       	eor	r16, r31
     5c4:	a4 27       	eor	r26, r20
     5c6:	a4 27       	eor	r26, r20
     5c8:	a4 27       	eor	r26, r20
     5ca:	a4 27       	eor	r26, r20
     5cc:	a4 27       	eor	r26, r20
     5ce:	a4 27       	eor	r26, r20
     5d0:	a4 27       	eor	r26, r20
     5d2:	a4 27       	eor	r26, r20
     5d4:	a4 27       	eor	r26, r20
     5d6:	12 27       	eor	r17, r18
     5d8:	a4 27       	eor	r26, r20
     5da:	a4 27       	eor	r26, r20
     5dc:	a4 27       	eor	r26, r20
     5de:	a4 27       	eor	r26, r20
     5e0:	a4 27       	eor	r26, r20
     5e2:	a4 27       	eor	r26, r20
     5e4:	a4 27       	eor	r26, r20
     5e6:	a4 27       	eor	r26, r20
     5e8:	a4 27       	eor	r26, r20
     5ea:	15 27       	eor	r17, r21
     5ec:	a4 27       	eor	r26, r20
     5ee:	a4 27       	eor	r26, r20
     5f0:	a4 27       	eor	r26, r20
     5f2:	a4 27       	eor	r26, r20
     5f4:	a4 27       	eor	r26, r20
     5f6:	a4 27       	eor	r26, r20
     5f8:	a4 27       	eor	r26, r20
     5fa:	a4 27       	eor	r26, r20
     5fc:	a4 27       	eor	r26, r20
     5fe:	18 27       	eor	r17, r24
     600:	a4 27       	eor	r26, r20
     602:	a4 27       	eor	r26, r20
     604:	a4 27       	eor	r26, r20
     606:	a4 27       	eor	r26, r20
     608:	a4 27       	eor	r26, r20
     60a:	a4 27       	eor	r26, r20
     60c:	a4 27       	eor	r26, r20
     60e:	a4 27       	eor	r26, r20
     610:	a4 27       	eor	r26, r20
     612:	1b 27       	eor	r17, r27
     614:	a4 27       	eor	r26, r20
     616:	a4 27       	eor	r26, r20
     618:	a4 27       	eor	r26, r20
     61a:	a4 27       	eor	r26, r20
     61c:	a4 27       	eor	r26, r20
     61e:	a4 27       	eor	r26, r20
     620:	a4 27       	eor	r26, r20
     622:	a4 27       	eor	r26, r20
     624:	a4 27       	eor	r26, r20
     626:	1e 27       	eor	r17, r30
     628:	a4 27       	eor	r26, r20
     62a:	a4 27       	eor	r26, r20
     62c:	a4 27       	eor	r26, r20
     62e:	a4 27       	eor	r26, r20
     630:	a4 27       	eor	r26, r20
     632:	a4 27       	eor	r26, r20
     634:	a4 27       	eor	r26, r20
     636:	a4 27       	eor	r26, r20
     638:	a4 27       	eor	r26, r20
     63a:	21 27       	eor	r18, r17
     63c:	a4 27       	eor	r26, r20
     63e:	a4 27       	eor	r26, r20
     640:	a4 27       	eor	r26, r20
     642:	a4 27       	eor	r26, r20
     644:	a4 27       	eor	r26, r20
     646:	a4 27       	eor	r26, r20
     648:	a4 27       	eor	r26, r20
     64a:	a4 27       	eor	r26, r20
     64c:	a4 27       	eor	r26, r20
     64e:	24 27       	eor	r18, r20
     650:	a4 27       	eor	r26, r20
     652:	a4 27       	eor	r26, r20
     654:	a4 27       	eor	r26, r20
     656:	a4 27       	eor	r26, r20
     658:	a4 27       	eor	r26, r20
     65a:	a4 27       	eor	r26, r20
     65c:	a4 27       	eor	r26, r20
     65e:	a4 27       	eor	r26, r20
     660:	a4 27       	eor	r26, r20
     662:	27 27       	eor	r18, r23
     664:	a4 27       	eor	r26, r20
     666:	a4 27       	eor	r26, r20
     668:	a4 27       	eor	r26, r20
     66a:	a4 27       	eor	r26, r20
     66c:	a4 27       	eor	r26, r20
     66e:	a4 27       	eor	r26, r20
     670:	a4 27       	eor	r26, r20
     672:	a4 27       	eor	r26, r20
     674:	a4 27       	eor	r26, r20
     676:	2a 27       	eor	r18, r26
     678:	a4 27       	eor	r26, r20
     67a:	a4 27       	eor	r26, r20
     67c:	a4 27       	eor	r26, r20
     67e:	a4 27       	eor	r26, r20
     680:	a4 27       	eor	r26, r20
     682:	a4 27       	eor	r26, r20
     684:	a4 27       	eor	r26, r20
     686:	a4 27       	eor	r26, r20
     688:	a4 27       	eor	r26, r20
     68a:	2d 27       	eor	r18, r29
     68c:	a4 27       	eor	r26, r20
     68e:	a4 27       	eor	r26, r20
     690:	a4 27       	eor	r26, r20
     692:	a4 27       	eor	r26, r20
     694:	a4 27       	eor	r26, r20
     696:	a4 27       	eor	r26, r20
     698:	a4 27       	eor	r26, r20
     69a:	a4 27       	eor	r26, r20
     69c:	a4 27       	eor	r26, r20
     69e:	30 27       	eor	r19, r16
     6a0:	a4 27       	eor	r26, r20
     6a2:	a4 27       	eor	r26, r20
     6a4:	a4 27       	eor	r26, r20
     6a6:	a4 27       	eor	r26, r20
     6a8:	a4 27       	eor	r26, r20
     6aa:	a4 27       	eor	r26, r20
     6ac:	a4 27       	eor	r26, r20
     6ae:	a4 27       	eor	r26, r20
     6b0:	a4 27       	eor	r26, r20
     6b2:	33 27       	eor	r19, r19
     6b4:	a4 27       	eor	r26, r20
     6b6:	a4 27       	eor	r26, r20
     6b8:	a4 27       	eor	r26, r20
     6ba:	a4 27       	eor	r26, r20
     6bc:	a4 27       	eor	r26, r20
     6be:	a4 27       	eor	r26, r20
     6c0:	a4 27       	eor	r26, r20
     6c2:	a4 27       	eor	r26, r20
     6c4:	a4 27       	eor	r26, r20
     6c6:	36 27       	eor	r19, r22
     6c8:	a4 27       	eor	r26, r20
     6ca:	a4 27       	eor	r26, r20
     6cc:	a4 27       	eor	r26, r20
     6ce:	a4 27       	eor	r26, r20
     6d0:	a4 27       	eor	r26, r20
     6d2:	a4 27       	eor	r26, r20
     6d4:	a4 27       	eor	r26, r20
     6d6:	a4 27       	eor	r26, r20
     6d8:	a4 27       	eor	r26, r20
     6da:	43 27       	eor	r20, r19
     6dc:	a4 27       	eor	r26, r20
     6de:	a4 27       	eor	r26, r20
     6e0:	a4 27       	eor	r26, r20
     6e2:	a4 27       	eor	r26, r20
     6e4:	a4 27       	eor	r26, r20
     6e6:	a4 27       	eor	r26, r20
     6e8:	a4 27       	eor	r26, r20
     6ea:	a4 27       	eor	r26, r20
     6ec:	a4 27       	eor	r26, r20
     6ee:	46 27       	eor	r20, r22
     6f0:	a4 27       	eor	r26, r20
     6f2:	a4 27       	eor	r26, r20
     6f4:	a4 27       	eor	r26, r20
     6f6:	a4 27       	eor	r26, r20
     6f8:	a4 27       	eor	r26, r20
     6fa:	a4 27       	eor	r26, r20
     6fc:	a4 27       	eor	r26, r20
     6fe:	a4 27       	eor	r26, r20
     700:	a4 27       	eor	r26, r20
     702:	49 27       	eor	r20, r25
     704:	a4 27       	eor	r26, r20
     706:	a4 27       	eor	r26, r20
     708:	a4 27       	eor	r26, r20
     70a:	a4 27       	eor	r26, r20
     70c:	a4 27       	eor	r26, r20
     70e:	a4 27       	eor	r26, r20
     710:	a4 27       	eor	r26, r20
     712:	a4 27       	eor	r26, r20
     714:	a4 27       	eor	r26, r20
     716:	4c 27       	eor	r20, r28
     718:	a4 27       	eor	r26, r20
     71a:	a4 27       	eor	r26, r20
     71c:	a4 27       	eor	r26, r20
     71e:	a4 27       	eor	r26, r20
     720:	a4 27       	eor	r26, r20
     722:	a4 27       	eor	r26, r20
     724:	a4 27       	eor	r26, r20
     726:	a4 27       	eor	r26, r20
     728:	a4 27       	eor	r26, r20
     72a:	4f 27       	eor	r20, r31
     72c:	a4 27       	eor	r26, r20
     72e:	a4 27       	eor	r26, r20
     730:	a4 27       	eor	r26, r20
     732:	a4 27       	eor	r26, r20
     734:	a4 27       	eor	r26, r20
     736:	a4 27       	eor	r26, r20
     738:	a4 27       	eor	r26, r20
     73a:	a4 27       	eor	r26, r20
     73c:	a4 27       	eor	r26, r20
     73e:	54 27       	eor	r21, r20
     740:	a4 27       	eor	r26, r20
     742:	a4 27       	eor	r26, r20
     744:	a4 27       	eor	r26, r20
     746:	a4 27       	eor	r26, r20
     748:	a4 27       	eor	r26, r20
     74a:	a4 27       	eor	r26, r20
     74c:	a4 27       	eor	r26, r20
     74e:	a4 27       	eor	r26, r20
     750:	a4 27       	eor	r26, r20
     752:	57 27       	eor	r21, r23
     754:	a4 27       	eor	r26, r20
     756:	a4 27       	eor	r26, r20
     758:	a4 27       	eor	r26, r20
     75a:	a4 27       	eor	r26, r20
     75c:	a4 27       	eor	r26, r20
     75e:	a4 27       	eor	r26, r20
     760:	a4 27       	eor	r26, r20
     762:	a4 27       	eor	r26, r20
     764:	a4 27       	eor	r26, r20
     766:	5a 27       	eor	r21, r26
     768:	a4 27       	eor	r26, r20
     76a:	a4 27       	eor	r26, r20
     76c:	a4 27       	eor	r26, r20
     76e:	a4 27       	eor	r26, r20
     770:	a4 27       	eor	r26, r20
     772:	a4 27       	eor	r26, r20
     774:	a4 27       	eor	r26, r20
     776:	a4 27       	eor	r26, r20
     778:	a4 27       	eor	r26, r20
     77a:	5d 27       	eor	r21, r29
     77c:	a4 27       	eor	r26, r20
     77e:	a4 27       	eor	r26, r20
     780:	a4 27       	eor	r26, r20
     782:	a4 27       	eor	r26, r20
     784:	a4 27       	eor	r26, r20
     786:	a4 27       	eor	r26, r20
     788:	a4 27       	eor	r26, r20
     78a:	a4 27       	eor	r26, r20
     78c:	a4 27       	eor	r26, r20
     78e:	60 27       	eor	r22, r16
     790:	a4 27       	eor	r26, r20
     792:	a4 27       	eor	r26, r20
     794:	a4 27       	eor	r26, r20
     796:	a4 27       	eor	r26, r20
     798:	a4 27       	eor	r26, r20
     79a:	a4 27       	eor	r26, r20
     79c:	a4 27       	eor	r26, r20
     79e:	a4 27       	eor	r26, r20
     7a0:	a4 27       	eor	r26, r20
     7a2:	65 27       	eor	r22, r21
     7a4:	a4 27       	eor	r26, r20
     7a6:	a4 27       	eor	r26, r20
     7a8:	a4 27       	eor	r26, r20
     7aa:	a4 27       	eor	r26, r20
     7ac:	a4 27       	eor	r26, r20
     7ae:	a4 27       	eor	r26, r20
     7b0:	a4 27       	eor	r26, r20
     7b2:	a4 27       	eor	r26, r20
     7b4:	a4 27       	eor	r26, r20
     7b6:	68 27       	eor	r22, r24
     7b8:	a4 27       	eor	r26, r20
     7ba:	a4 27       	eor	r26, r20
     7bc:	a4 27       	eor	r26, r20
     7be:	a4 27       	eor	r26, r20
     7c0:	a4 27       	eor	r26, r20
     7c2:	a4 27       	eor	r26, r20
     7c4:	a4 27       	eor	r26, r20
     7c6:	a4 27       	eor	r26, r20
     7c8:	a4 27       	eor	r26, r20
     7ca:	6d 27       	eor	r22, r29
     7cc:	a4 27       	eor	r26, r20
     7ce:	a4 27       	eor	r26, r20
     7d0:	a4 27       	eor	r26, r20
     7d2:	a4 27       	eor	r26, r20
     7d4:	a4 27       	eor	r26, r20
     7d6:	a4 27       	eor	r26, r20
     7d8:	a4 27       	eor	r26, r20
     7da:	a4 27       	eor	r26, r20
     7dc:	a4 27       	eor	r26, r20
     7de:	72 27       	eor	r23, r18
     7e0:	94 27       	eor	r25, r20
     7e2:	99 27       	eor	r25, r25
     7e4:	9e 27       	eor	r25, r30
     7e6:	a4 27       	eor	r26, r20
     7e8:	a4 27       	eor	r26, r20
     7ea:	a4 27       	eor	r26, r20
     7ec:	a4 27       	eor	r26, r20
     7ee:	a4 27       	eor	r26, r20
     7f0:	a4 27       	eor	r26, r20
     7f2:	77 27       	eor	r23, r23
     7f4:	a4 27       	eor	r26, r20
     7f6:	a4 27       	eor	r26, r20
     7f8:	a4 27       	eor	r26, r20
     7fa:	a4 27       	eor	r26, r20
     7fc:	a4 27       	eor	r26, r20
     7fe:	a4 27       	eor	r26, r20
     800:	a4 27       	eor	r26, r20
     802:	a4 27       	eor	r26, r20
     804:	a4 27       	eor	r26, r20
     806:	7a 27       	eor	r23, r26
     808:	a4 27       	eor	r26, r20
     80a:	a4 27       	eor	r26, r20
     80c:	a4 27       	eor	r26, r20
     80e:	a4 27       	eor	r26, r20
     810:	a4 27       	eor	r26, r20
     812:	a4 27       	eor	r26, r20
     814:	a4 27       	eor	r26, r20
     816:	a4 27       	eor	r26, r20
     818:	a4 27       	eor	r26, r20
     81a:	7d 27       	eor	r23, r29
     81c:	a4 27       	eor	r26, r20
     81e:	a4 27       	eor	r26, r20
     820:	a4 27       	eor	r26, r20
     822:	a4 27       	eor	r26, r20
     824:	a4 27       	eor	r26, r20
     826:	a4 27       	eor	r26, r20
     828:	a4 27       	eor	r26, r20
     82a:	a4 27       	eor	r26, r20
     82c:	a4 27       	eor	r26, r20
     82e:	80 27       	eor	r24, r16
     830:	a4 27       	eor	r26, r20
     832:	a4 27       	eor	r26, r20
     834:	a4 27       	eor	r26, r20
     836:	a4 27       	eor	r26, r20
     838:	a4 27       	eor	r26, r20
     83a:	a4 27       	eor	r26, r20
     83c:	a4 27       	eor	r26, r20
     83e:	a4 27       	eor	r26, r20
     840:	a4 27       	eor	r26, r20
     842:	83 27       	eor	r24, r19
     844:	a4 27       	eor	r26, r20
     846:	a4 27       	eor	r26, r20
     848:	a4 27       	eor	r26, r20
     84a:	a4 27       	eor	r26, r20
     84c:	a4 27       	eor	r26, r20
     84e:	a4 27       	eor	r26, r20
     850:	a4 27       	eor	r26, r20
     852:	a4 27       	eor	r26, r20
     854:	a4 27       	eor	r26, r20
     856:	88 27       	eor	r24, r24
     858:	a4 27       	eor	r26, r20
     85a:	a4 27       	eor	r26, r20
     85c:	a4 27       	eor	r26, r20
     85e:	a4 27       	eor	r26, r20
     860:	a4 27       	eor	r26, r20
     862:	a4 27       	eor	r26, r20
     864:	a4 27       	eor	r26, r20
     866:	a4 27       	eor	r26, r20
     868:	a4 27       	eor	r26, r20
     86a:	8b 27       	eor	r24, r27
     86c:	a4 27       	eor	r26, r20
     86e:	a4 27       	eor	r26, r20
     870:	a4 27       	eor	r26, r20
     872:	a4 27       	eor	r26, r20
     874:	a4 27       	eor	r26, r20
     876:	a4 27       	eor	r26, r20
     878:	a4 27       	eor	r26, r20
     87a:	a4 27       	eor	r26, r20
     87c:	a4 27       	eor	r26, r20
     87e:	8e 27       	eor	r24, r30
     880:	a4 27       	eor	r26, r20
     882:	a4 27       	eor	r26, r20
     884:	a4 27       	eor	r26, r20
     886:	a4 27       	eor	r26, r20
     888:	a4 27       	eor	r26, r20
     88a:	a4 27       	eor	r26, r20
     88c:	a4 27       	eor	r26, r20
     88e:	a4 27       	eor	r26, r20
     890:	a4 27       	eor	r26, r20
     892:	91 27       	eor	r25, r17
     894:	08 00       	.word	0x0008	; ????
     896:	00 00       	nop
     898:	be 92       	st	-X, r11
     89a:	24 49       	sbci	r18, 0x94	; 148
     89c:	12 3e       	cpi	r17, 0xE2	; 226
     89e:	ab aa       	std	Y+51, r10	; 0x33
     8a0:	aa 2a       	or	r10, r26
     8a2:	be cd       	rjmp	.-1156   	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     8a4:	cc cc       	rjmp	.-1640   	; 0x23e <__SREG__+0x1ff>
     8a6:	4c 3e       	cpi	r20, 0xEC	; 236
     8a8:	00 00       	nop
     8aa:	00 80       	ld	r0, Z
     8ac:	be ab       	std	Y+54, r27	; 0x36
     8ae:	aa aa       	std	Y+50, r10	; 0x32
     8b0:	aa 3e       	cpi	r26, 0xEA	; 234
     8b2:	00 00       	nop
     8b4:	00 00       	nop
     8b6:	bf 00       	.word	0x00bf	; ????
     8b8:	00 00       	nop
     8ba:	80 3f       	cpi	r24, 0xF0	; 240
     8bc:	00 00       	nop
     8be:	00 00       	nop
     8c0:	00 08       	sbc	r0, r0
     8c2:	41 78       	andi	r20, 0x81	; 129
     8c4:	d3 bb       	out	0x13, r29	; 19
     8c6:	43 87       	std	Z+11, r20	; 0x0b
     8c8:	d1 13       	cpse	r29, r17
     8ca:	3d 19       	sub	r19, r13
     8cc:	0e 3c       	cpi	r16, 0xCE	; 206
     8ce:	c3 bd       	out	0x23, r28	; 35
     8d0:	42 82       	std	Z+2, r4	; 0x02
     8d2:	ad 2b       	or	r26, r29
     8d4:	3e 68       	ori	r19, 0x8E	; 142
     8d6:	ec 82       	std	Y+4, r14	; 0x04
     8d8:	76 be       	out	0x36, r7	; 54
     8da:	d9 8f       	std	Y+25, r29	; 0x19
     8dc:	e1 a9       	ldd	r30, Z+49	; 0x31
     8de:	3e 4c       	sbci	r19, 0xCE	; 206
     8e0:	80 ef       	ldi	r24, 0xF0	; 240
     8e2:	ff be       	out	0x3f, r15	; 63
     8e4:	01 c4       	rjmp	.+2050   	; 0x10e8 <vListInsert+0x78>
     8e6:	ff 7f       	andi	r31, 0xFF	; 255
     8e8:	3f 00       	.word	0x003f	; ????
     8ea:	00 00       	nop
	...

000008ee <__trampolines_end>:
     8ee:	6e 61       	ori	r22, 0x1E	; 30
     8f0:	6e 00       	.word	0x006e	; ????

000008f2 <__c.2332>:
     8f2:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     902:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     912:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     922:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     932:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     942:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     952:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     962:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     972:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     982:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     992:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     9a2:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     9b2:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     9c2:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     9d2:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     9e2:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000009f0 <R22_Saturation_Temp>:
     9f0:	9a 99 c9 c1 33 33 6b c1 33 33 d3 c0 cd cc cc 3d     ....33k.33.....=
     a00:	48 e1 a2 40 66 66 2e 41 00 00 78 41 9a 99 9d 41     H..@ff.A..xA...A
     a10:	00 00 bc 41 cd cc d8 41 33 33 f3 41 66 66 06 42     ...A...A33.Aff.B
     a20:	66 66 12 42 9a 99 1d 42 66 66 28 42 cd cc 32 42     ff.B...Bff(B..2B
     a30:	cd cc 28 42 66 66 46 42 9a 99 4f 42 66 66 58 42     ..(BffFB..OBffXB
     a40:	33 33 61 42 9a 99 69 42 9a 99 71 42 33 33 79 42     33aB..iB..qB33yB
     a50:	9a 99 80 42 33 33 84 42 cd cc 87 42 66 66 8b 42     ...B33.B...Bff.B
     a60:	00 00 8f 42 66 66 92 42 9a 99 95 42 cd cc 98 42     ...Bff.B...B...B

00000a70 <prvIdleTask>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
     a70:	08 e4       	ldi	r16, 0x48	; 72
     a72:	16 e0       	ldi	r17, 0x06	; 6
     a74:	0f 2e       	mov	r0, r31
     a76:	f8 e7       	ldi	r31, 0x78	; 120
     a78:	ef 2e       	mov	r14, r31
     a7a:	f6 e0       	ldi	r31, 0x06	; 6
     a7c:	ff 2e       	mov	r15, r31
     a7e:	f0 2d       	mov	r31, r0
     a80:	80 91 47 06 	lds	r24, 0x0647	; 0x800647 <uxDeletedTasksWaitingCleanUp>
     a84:	88 23       	and	r24, r24
     a86:	11 f1       	breq	.+68     	; 0xacc <prvIdleTask+0x5c>
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	0f 92       	push	r0
     a8e:	d8 01       	movw	r26, r16
     a90:	17 96       	adiw	r26, 0x07	; 7
     a92:	ed 91       	ld	r30, X+
     a94:	fc 91       	ld	r31, X
     a96:	18 97       	sbiw	r26, 0x08	; 8
     a98:	c0 85       	ldd	r28, Z+8	; 0x08
     a9a:	d1 85       	ldd	r29, Z+9	; 0x09
     a9c:	ce 01       	movw	r24, r28
     a9e:	02 96       	adiw	r24, 0x02	; 2
     aa0:	24 d3       	rcall	.+1608   	; 0x10ea <uxListRemove>
     aa2:	80 91 3b 06 	lds	r24, 0x063B	; 0x80063b <uxCurrentNumberOfTasks>
     aa6:	81 50       	subi	r24, 0x01	; 1
     aa8:	80 93 3b 06 	sts	0x063B, r24	; 0x80063b <uxCurrentNumberOfTasks>
     aac:	80 91 47 06 	lds	r24, 0x0647	; 0x800647 <uxDeletedTasksWaitingCleanUp>
     ab0:	81 50       	subi	r24, 0x01	; 1
     ab2:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <uxDeletedTasksWaitingCleanUp>
     ab6:	0f 90       	pop	r0
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     abc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     abe:	75 d0       	rcall	.+234    	; 0xbaa <vPortFree>
     ac0:	ce 01       	movw	r24, r28
     ac2:	73 d0       	rcall	.+230    	; 0xbaa <vPortFree>
     ac4:	80 91 47 06 	lds	r24, 0x0647	; 0x800647 <uxDeletedTasksWaitingCleanUp>
     ac8:	81 11       	cpse	r24, r1
     aca:	de cf       	rjmp	.-68     	; 0xa88 <prvIdleTask+0x18>
     acc:	f7 01       	movw	r30, r14
     ace:	80 81       	ld	r24, Z
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	08 f0       	brcs	.+2      	; 0xad6 <prvIdleTask+0x66>
     ad4:	3d d1       	rcall	.+634    	; 0xd50 <vPortYield>
     ad6:	73 d2       	rcall	.+1254   	; 0xfbe <vApplicationIdleHook>
     ad8:	d3 cf       	rjmp	.-90     	; 0xa80 <prvIdleTask+0x10>

00000ada <__ctors_end>:
     ada:	11 24       	eor	r1, r1
     adc:	1f be       	out	0x3f, r1	; 63
     ade:	cf ef       	ldi	r28, 0xFF	; 255
     ae0:	d1 e2       	ldi	r29, 0x21	; 33
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	cd bf       	out	0x3d, r28	; 61
     ae6:	00 e0       	ldi	r16, 0x00	; 0
     ae8:	0c bf       	out	0x3c, r16	; 60

00000aea <__do_copy_data>:
     aea:	16 e0       	ldi	r17, 0x06	; 6
     aec:	a0 e0       	ldi	r26, 0x00	; 0
     aee:	b2 e0       	ldi	r27, 0x02	; 2
     af0:	e2 ec       	ldi	r30, 0xC2	; 194
     af2:	f7 eb       	ldi	r31, 0xB7	; 183
     af4:	00 e0       	ldi	r16, 0x00	; 0
     af6:	0b bf       	out	0x3b, r16	; 59
     af8:	02 c0       	rjmp	.+4      	; 0xafe <__do_copy_data+0x14>
     afa:	07 90       	elpm	r0, Z+
     afc:	0d 92       	st	X+, r0
     afe:	a8 32       	cpi	r26, 0x28	; 40
     b00:	b1 07       	cpc	r27, r17
     b02:	d9 f7       	brne	.-10     	; 0xafa <__do_copy_data+0x10>

00000b04 <__do_clear_bss>:
     b04:	2a e0       	ldi	r18, 0x0A	; 10
     b06:	a8 e2       	ldi	r26, 0x28	; 40
     b08:	b6 e0       	ldi	r27, 0x06	; 6
     b0a:	01 c0       	rjmp	.+2      	; 0xb0e <.do_clear_bss_start>

00000b0c <.do_clear_bss_loop>:
     b0c:	1d 92       	st	X+, r1

00000b0e <.do_clear_bss_start>:
     b0e:	a9 37       	cpi	r26, 0x79	; 121
     b10:	b2 07       	cpc	r27, r18
     b12:	e1 f7       	brne	.-8      	; 0xb0c <.do_clear_bss_loop>
     b14:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <main>
     b18:	0c 94 df 5b 	jmp	0xb7be	; 0xb7be <_exit>

00000b1c <__bad_interrupt>:
     b1c:	71 ca       	rjmp	.-2846   	; 0x0 <__vectors>

00000b1e <difftime>:
     b1e:	62 1b       	sub	r22, r18
     b20:	73 0b       	sbc	r23, r19
     b22:	84 0b       	sbc	r24, r20
     b24:	95 0b       	sbc	r25, r21
     b26:	08 95       	ret

00000b28 <time>:
     b28:	fc 01       	movw	r30, r24
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	60 91 75 0a 	lds	r22, 0x0A75	; 0x800a75 <__system_time>
     b32:	70 91 76 0a 	lds	r23, 0x0A76	; 0x800a76 <__system_time+0x1>
     b36:	80 91 77 0a 	lds	r24, 0x0A77	; 0x800a77 <__system_time+0x2>
     b3a:	90 91 78 0a 	lds	r25, 0x0A78	; 0x800a78 <__system_time+0x3>
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	30 97       	sbiw	r30, 0x00	; 0
     b42:	21 f0       	breq	.+8      	; 0xb4c <time+0x24>
     b44:	60 83       	st	Z, r22
     b46:	71 83       	std	Z+1, r23	; 0x01
     b48:	82 83       	std	Z+2, r24	; 0x02
     b4a:	93 83       	std	Z+3, r25	; 0x03
     b4c:	08 95       	ret

00000b4e <system_tick>:
     b4e:	8f 93       	push	r24
     b50:	8f b7       	in	r24, 0x3f	; 63
     b52:	8f 93       	push	r24
     b54:	f8 94       	cli
     b56:	80 91 75 0a 	lds	r24, 0x0A75	; 0x800a75 <__system_time>
     b5a:	8f 5f       	subi	r24, 0xFF	; 255
     b5c:	80 93 75 0a 	sts	0x0A75, r24	; 0x800a75 <__system_time>
     b60:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <__system_time+0x1>
     b64:	8f 4f       	sbci	r24, 0xFF	; 255
     b66:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <__system_time+0x1>
     b6a:	80 91 77 0a 	lds	r24, 0x0A77	; 0x800a77 <__system_time+0x2>
     b6e:	8f 4f       	sbci	r24, 0xFF	; 255
     b70:	80 93 77 0a 	sts	0x0A77, r24	; 0x800a77 <__system_time+0x2>
     b74:	80 91 78 0a 	lds	r24, 0x0A78	; 0x800a78 <__system_time+0x3>
     b78:	8f 4f       	sbci	r24, 0xFF	; 255
     b7a:	80 93 78 0a 	sts	0x0A78, r24	; 0x800a78 <__system_time+0x3>
     b7e:	8f 91       	pop	r24
     b80:	8f bf       	out	0x3f, r24	; 63
     b82:	8f 91       	pop	r24
     b84:	08 95       	ret

00000b86 <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
     b8c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
     b90:	ce 01       	movw	r24, r28
     b92:	0e 94 a6 58 	call	0xb14c	; 0xb14c <malloc>
     b96:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     b98:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     b9c:	20 97       	sbiw	r28, 0x00	; 0
     b9e:	09 f4       	brne	.+2      	; 0xba2 <pvPortMalloc+0x1c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     ba0:	27 d2       	rcall	.+1102   	; 0xff0 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
     ba2:	ce 01       	movw	r24, r28
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
	if( pv )
     bae:	00 97       	sbiw	r24, 0x00	; 0
     bb0:	41 f0       	breq	.+16     	; 0xbc2 <vPortFree+0x18>
     bb2:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
     bb4:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
		{
			free( pv );
     bb8:	ce 01       	movw	r24, r28
     bba:	0e 94 3e 59 	call	0xb27c	; 0xb27c <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
     bbe:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
	}
}
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <pxPortInitialiseStack>:
#elif defined( portUSE_TIMER2 )
        portTIMSK &= ~( _BV(OCIE2B)|_BV(OCIE2A)|_BV(TOIE2) );	// disable all Timer2 interrupts
        ASSR = 0x00;              								// set Timer/Counter2 to be off

#elif defined( portUSE_TIMER3 )
        portTIMSK &= ~( _BV(OCIE3B)|_BV(OCIE3A)|_BV(TOIE3) );	// disable all Timer3 interrupts
     bc8:	31 e1       	ldi	r19, 0x11	; 17
     bca:	fc 01       	movw	r30, r24
     bcc:	30 83       	st	Z, r19
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	22 e2       	ldi	r18, 0x22	; 34
     bd2:	20 83       	st	Z, r18
     bd4:	31 97       	sbiw	r30, 0x01	; 1
     bd6:	a3 e3       	ldi	r26, 0x33	; 51
     bd8:	a0 83       	st	Z, r26
     bda:	31 97       	sbiw	r30, 0x01	; 1
     bdc:	60 83       	st	Z, r22
     bde:	31 97       	sbiw	r30, 0x01	; 1
     be0:	70 83       	st	Z, r23
     be2:	31 97       	sbiw	r30, 0x01	; 1
     be4:	10 82       	st	Z, r1
     be6:	31 97       	sbiw	r30, 0x01	; 1
     be8:	10 82       	st	Z, r1
     bea:	31 97       	sbiw	r30, 0x01	; 1
     bec:	60 e8       	ldi	r22, 0x80	; 128
     bee:	60 83       	st	Z, r22
     bf0:	31 97       	sbiw	r30, 0x01	; 1
     bf2:	10 82       	st	Z, r1
     bf4:	31 97       	sbiw	r30, 0x01	; 1
     bf6:	10 82       	st	Z, r1
     bf8:	31 97       	sbiw	r30, 0x01	; 1
     bfa:	10 82       	st	Z, r1
     bfc:	31 97       	sbiw	r30, 0x01	; 1
     bfe:	62 e0       	ldi	r22, 0x02	; 2
     c00:	60 83       	st	Z, r22
     c02:	31 97       	sbiw	r30, 0x01	; 1
     c04:	63 e0       	ldi	r22, 0x03	; 3
     c06:	60 83       	st	Z, r22
     c08:	31 97       	sbiw	r30, 0x01	; 1
     c0a:	64 e0       	ldi	r22, 0x04	; 4
     c0c:	60 83       	st	Z, r22
     c0e:	31 97       	sbiw	r30, 0x01	; 1
     c10:	65 e0       	ldi	r22, 0x05	; 5
     c12:	60 83       	st	Z, r22
     c14:	31 97       	sbiw	r30, 0x01	; 1
     c16:	66 e0       	ldi	r22, 0x06	; 6
     c18:	60 83       	st	Z, r22
     c1a:	31 97       	sbiw	r30, 0x01	; 1
     c1c:	67 e0       	ldi	r22, 0x07	; 7
     c1e:	60 83       	st	Z, r22
     c20:	31 97       	sbiw	r30, 0x01	; 1
     c22:	68 e0       	ldi	r22, 0x08	; 8
     c24:	60 83       	st	Z, r22
     c26:	31 97       	sbiw	r30, 0x01	; 1
     c28:	69 e0       	ldi	r22, 0x09	; 9
     c2a:	60 83       	st	Z, r22
     c2c:	31 97       	sbiw	r30, 0x01	; 1
     c2e:	60 e1       	ldi	r22, 0x10	; 16
     c30:	60 83       	st	Z, r22
     c32:	31 97       	sbiw	r30, 0x01	; 1
     c34:	30 83       	st	Z, r19
     c36:	31 97       	sbiw	r30, 0x01	; 1
     c38:	32 e1       	ldi	r19, 0x12	; 18
     c3a:	30 83       	st	Z, r19
     c3c:	31 97       	sbiw	r30, 0x01	; 1
     c3e:	33 e1       	ldi	r19, 0x13	; 19
     c40:	30 83       	st	Z, r19
     c42:	31 97       	sbiw	r30, 0x01	; 1
     c44:	34 e1       	ldi	r19, 0x14	; 20
     c46:	30 83       	st	Z, r19
     c48:	31 97       	sbiw	r30, 0x01	; 1
     c4a:	35 e1       	ldi	r19, 0x15	; 21
     c4c:	30 83       	st	Z, r19
     c4e:	31 97       	sbiw	r30, 0x01	; 1
     c50:	36 e1       	ldi	r19, 0x16	; 22
     c52:	30 83       	st	Z, r19
     c54:	31 97       	sbiw	r30, 0x01	; 1
     c56:	37 e1       	ldi	r19, 0x17	; 23
     c58:	30 83       	st	Z, r19
     c5a:	31 97       	sbiw	r30, 0x01	; 1
     c5c:	38 e1       	ldi	r19, 0x18	; 24
     c5e:	30 83       	st	Z, r19
     c60:	31 97       	sbiw	r30, 0x01	; 1
     c62:	39 e1       	ldi	r19, 0x19	; 25
     c64:	30 83       	st	Z, r19
     c66:	31 97       	sbiw	r30, 0x01	; 1
     c68:	30 e2       	ldi	r19, 0x20	; 32
     c6a:	30 83       	st	Z, r19
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	31 e2       	ldi	r19, 0x21	; 33
     c70:	30 83       	st	Z, r19
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	20 83       	st	Z, r18
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	23 e2       	ldi	r18, 0x23	; 35
     c7a:	20 83       	st	Z, r18
     c7c:	31 97       	sbiw	r30, 0x01	; 1
     c7e:	40 83       	st	Z, r20
     c80:	31 97       	sbiw	r30, 0x01	; 1
     c82:	50 83       	st	Z, r21
     c84:	31 97       	sbiw	r30, 0x01	; 1
     c86:	26 e2       	ldi	r18, 0x26	; 38
     c88:	20 83       	st	Z, r18
     c8a:	31 97       	sbiw	r30, 0x01	; 1
     c8c:	27 e2       	ldi	r18, 0x27	; 39
     c8e:	20 83       	st	Z, r18
     c90:	31 97       	sbiw	r30, 0x01	; 1
     c92:	28 e2       	ldi	r18, 0x28	; 40
     c94:	20 83       	st	Z, r18
     c96:	31 97       	sbiw	r30, 0x01	; 1
     c98:	29 e2       	ldi	r18, 0x29	; 41
     c9a:	20 83       	st	Z, r18
     c9c:	31 97       	sbiw	r30, 0x01	; 1
     c9e:	20 e3       	ldi	r18, 0x30	; 48
     ca0:	20 83       	st	Z, r18
     ca2:	31 97       	sbiw	r30, 0x01	; 1
     ca4:	21 e3       	ldi	r18, 0x31	; 49
     ca6:	20 83       	st	Z, r18
     ca8:	89 97       	sbiw	r24, 0x29	; 41
     caa:	08 95       	ret

00000cac <xPortStartScheduler>:
     cac:	88 ee       	ldi	r24, 0xE8	; 232
     cae:	93 e0       	ldi	r25, 0x03	; 3
     cb0:	a0 e0       	ldi	r26, 0x00	; 0
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <portTickRateHz>
     cb8:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <portTickRateHz+0x1>
     cbc:	a0 93 13 07 	sts	0x0713, r26	; 0x800713 <portTickRateHz+0x2>
     cc0:	b0 93 14 07 	sts	0x0714, r27	; 0x800714 <portTickRateHz+0x3>
     cc4:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <ticksRemainingInSec>
     cc8:	90 93 16 07 	sts	0x0716, r25	; 0x800716 <ticksRemainingInSec+0x1>
     ccc:	a0 93 17 07 	sts	0x0717, r26	; 0x800717 <ticksRemainingInSec+0x2>
     cd0:	b0 93 18 07 	sts	0x0718, r27	; 0x800718 <ticksRemainingInSec+0x3>
     cd4:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     cd8:	89 ef       	ldi	r24, 0xF9	; 249
     cda:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     cde:	8b e0       	ldi	r24, 0x0B	; 11
     ce0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
     ce4:	e1 e7       	ldi	r30, 0x71	; 113
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	82 60       	ori	r24, 0x02	; 2
     cec:	80 83       	st	Z, r24
     cee:	a0 91 a4 06 	lds	r26, 0x06A4	; 0x8006a4 <pxCurrentTCB>
     cf2:	b0 91 a5 06 	lds	r27, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
     cf6:	cd 91       	ld	r28, X+
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	dd 91       	ld	r29, X+
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	ff 91       	pop	r31
     d00:	ef 91       	pop	r30
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	bf 91       	pop	r27
     d08:	af 91       	pop	r26
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	7f 91       	pop	r23
     d10:	6f 91       	pop	r22
     d12:	5f 91       	pop	r21
     d14:	4f 91       	pop	r20
     d16:	3f 91       	pop	r19
     d18:	2f 91       	pop	r18
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	ff 90       	pop	r15
     d20:	ef 90       	pop	r14
     d22:	df 90       	pop	r13
     d24:	cf 90       	pop	r12
     d26:	bf 90       	pop	r11
     d28:	af 90       	pop	r10
     d2a:	9f 90       	pop	r9
     d2c:	8f 90       	pop	r8
     d2e:	7f 90       	pop	r7
     d30:	6f 90       	pop	r6
     d32:	5f 90       	pop	r5
     d34:	4f 90       	pop	r4
     d36:	3f 90       	pop	r3
     d38:	2f 90       	pop	r2
     d3a:	1f 90       	pop	r1
     d3c:	0f 90       	pop	r0
     d3e:	0c be       	out	0x3c, r0	; 60
     d40:	0f 90       	pop	r0
     d42:	0b be       	out	0x3b, r0	; 59
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	0f 90       	pop	r0
     d4a:	08 95       	ret
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	08 95       	ret

00000d50 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	0f 92       	push	r0
     d58:	0b b6       	in	r0, 0x3b	; 59
     d5a:	0f 92       	push	r0
     d5c:	0c b6       	in	r0, 0x3c	; 60
     d5e:	0f 92       	push	r0
     d60:	1f 92       	push	r1
     d62:	11 24       	eor	r1, r1
     d64:	2f 92       	push	r2
     d66:	3f 92       	push	r3
     d68:	4f 92       	push	r4
     d6a:	5f 92       	push	r5
     d6c:	6f 92       	push	r6
     d6e:	7f 92       	push	r7
     d70:	8f 92       	push	r8
     d72:	9f 92       	push	r9
     d74:	af 92       	push	r10
     d76:	bf 92       	push	r11
     d78:	cf 92       	push	r12
     d7a:	df 92       	push	r13
     d7c:	ef 92       	push	r14
     d7e:	ff 92       	push	r15
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	2f 93       	push	r18
     d86:	3f 93       	push	r19
     d88:	4f 93       	push	r20
     d8a:	5f 93       	push	r21
     d8c:	6f 93       	push	r22
     d8e:	7f 93       	push	r23
     d90:	8f 93       	push	r24
     d92:	9f 93       	push	r25
     d94:	af 93       	push	r26
     d96:	bf 93       	push	r27
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31
     da0:	a0 91 a4 06 	lds	r26, 0x06A4	; 0x8006a4 <pxCurrentTCB>
     da4:	b0 91 a5 06 	lds	r27, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
     da8:	0d b6       	in	r0, 0x3d	; 61
     daa:	0d 92       	st	X+, r0
     dac:	0e b6       	in	r0, 0x3e	; 62
     dae:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     db0:	0e 94 09 18 	call	0x3012	; 0x3012 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     db4:	a0 91 a4 06 	lds	r26, 0x06A4	; 0x8006a4 <pxCurrentTCB>
     db8:	b0 91 a5 06 	lds	r27, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
     dbc:	cd 91       	ld	r28, X+
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	dd 91       	ld	r29, X+
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	bf 91       	pop	r27
     dce:	af 91       	pop	r26
     dd0:	9f 91       	pop	r25
     dd2:	8f 91       	pop	r24
     dd4:	7f 91       	pop	r23
     dd6:	6f 91       	pop	r22
     dd8:	5f 91       	pop	r21
     dda:	4f 91       	pop	r20
     ddc:	3f 91       	pop	r19
     dde:	2f 91       	pop	r18
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	ff 90       	pop	r15
     de6:	ef 90       	pop	r14
     de8:	df 90       	pop	r13
     dea:	cf 90       	pop	r12
     dec:	bf 90       	pop	r11
     dee:	af 90       	pop	r10
     df0:	9f 90       	pop	r9
     df2:	8f 90       	pop	r8
     df4:	7f 90       	pop	r7
     df6:	6f 90       	pop	r6
     df8:	5f 90       	pop	r5
     dfa:	4f 90       	pop	r4
     dfc:	3f 90       	pop	r3
     dfe:	2f 90       	pop	r2
     e00:	1f 90       	pop	r1
     e02:	0f 90       	pop	r0
     e04:	0c be       	out	0x3c, r0	; 60
     e06:	0f 90       	pop	r0
     e08:	0b be       	out	0x3b, r0	; 59
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
     e10:	08 95       	ret

00000e12 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     e12:	0f 92       	push	r0
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	0f 92       	push	r0
     e1a:	0b b6       	in	r0, 0x3b	; 59
     e1c:	0f 92       	push	r0
     e1e:	0c b6       	in	r0, 0x3c	; 60
     e20:	0f 92       	push	r0
     e22:	1f 92       	push	r1
     e24:	11 24       	eor	r1, r1
     e26:	2f 92       	push	r2
     e28:	3f 92       	push	r3
     e2a:	4f 92       	push	r4
     e2c:	5f 92       	push	r5
     e2e:	6f 92       	push	r6
     e30:	7f 92       	push	r7
     e32:	8f 92       	push	r8
     e34:	9f 92       	push	r9
     e36:	af 92       	push	r10
     e38:	bf 92       	push	r11
     e3a:	cf 92       	push	r12
     e3c:	df 92       	push	r13
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	2f 93       	push	r18
     e48:	3f 93       	push	r19
     e4a:	4f 93       	push	r20
     e4c:	5f 93       	push	r21
     e4e:	6f 93       	push	r22
     e50:	7f 93       	push	r23
     e52:	8f 93       	push	r24
     e54:	9f 93       	push	r25
     e56:	af 93       	push	r26
     e58:	bf 93       	push	r27
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
     e62:	a0 91 a4 06 	lds	r26, 0x06A4	; 0x8006a4 <pxCurrentTCB>
     e66:	b0 91 a5 06 	lds	r27, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
     e6a:	0d b6       	in	r0, 0x3d	; 61
     e6c:	0d 92       	st	X+, r0
     e6e:	0e b6       	in	r0, 0x3e	; 62
     e70:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
     e72:	13 be       	out	0x33, r1	; 51
	// start mark - check for start of interrupt - for debugging only
	PORTD |=  _BV(PORTD7);				// Ping IO line.
#endif

#if !defined(portUSE_TIMER2_RTC)
	if (--ticksRemainingInSec == 0)
     e74:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <ticksRemainingInSec>
     e78:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <ticksRemainingInSec+0x1>
     e7c:	a0 91 17 07 	lds	r26, 0x0717	; 0x800717 <ticksRemainingInSec+0x2>
     e80:	b0 91 18 07 	lds	r27, 0x0718	; 0x800718 <ticksRemainingInSec+0x3>
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	a1 09       	sbc	r26, r1
     e88:	b1 09       	sbc	r27, r1
     e8a:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <ticksRemainingInSec>
     e8e:	90 93 16 07 	sts	0x0716, r25	; 0x800716 <ticksRemainingInSec+0x1>
     e92:	a0 93 17 07 	sts	0x0717, r26	; 0x800717 <ticksRemainingInSec+0x2>
     e96:	b0 93 18 07 	sts	0x0718, r27	; 0x800718 <ticksRemainingInSec+0x3>
     e9a:	89 2b       	or	r24, r25
     e9c:	8a 2b       	or	r24, r26
     e9e:	8b 2b       	or	r24, r27
     ea0:	89 f4       	brne	.+34     	; 0xec4 <vPortYieldFromTick+0xb2>
	{
		system_tick();
     ea2:	55 de       	rcall	.-854    	; 0xb4e <system_tick>
		ticksRemainingInSec = portTickRateHz;
     ea4:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <portTickRateHz>
     ea8:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <portTickRateHz+0x1>
     eac:	a0 91 13 07 	lds	r26, 0x0713	; 0x800713 <portTickRateHz+0x2>
     eb0:	b0 91 14 07 	lds	r27, 0x0714	; 0x800714 <portTickRateHz+0x3>
     eb4:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <ticksRemainingInSec>
     eb8:	90 93 16 07 	sts	0x0716, r25	; 0x800716 <ticksRemainingInSec+0x1>
     ebc:	a0 93 17 07 	sts	0x0717, r26	; 0x800717 <ticksRemainingInSec+0x2>
     ec0:	b0 93 18 07 	sts	0x0718, r27	; 0x800718 <ticksRemainingInSec+0x3>
	}
#endif

	if( xTaskIncrementTick() != pdFALSE )
     ec4:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <xTaskIncrementTick>
     ec8:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     eca:	0e 94 09 18 	call	0x3012	; 0x3012 <vTaskSwitchContext>
#if defined(DEBUG_PING)
	// end mark - check for end of interrupt - for debugging only
	PORTD &= ~_BV(PORTD7);
#endif

	portRESTORE_CONTEXT();
     ece:	a0 91 a4 06 	lds	r26, 0x06A4	; 0x8006a4 <pxCurrentTCB>
     ed2:	b0 91 a5 06 	lds	r27, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
     ed6:	cd 91       	ld	r28, X+
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	dd 91       	ld	r29, X+
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	ff 91       	pop	r31
     ee0:	ef 91       	pop	r30
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	bf 91       	pop	r27
     ee8:	af 91       	pop	r26
     eea:	9f 91       	pop	r25
     eec:	8f 91       	pop	r24
     eee:	7f 91       	pop	r23
     ef0:	6f 91       	pop	r22
     ef2:	5f 91       	pop	r21
     ef4:	4f 91       	pop	r20
     ef6:	3f 91       	pop	r19
     ef8:	2f 91       	pop	r18
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
     f02:	df 90       	pop	r13
     f04:	cf 90       	pop	r12
     f06:	bf 90       	pop	r11
     f08:	af 90       	pop	r10
     f0a:	9f 90       	pop	r9
     f0c:	8f 90       	pop	r8
     f0e:	7f 90       	pop	r7
     f10:	6f 90       	pop	r6
     f12:	5f 90       	pop	r5
     f14:	4f 90       	pop	r4
     f16:	3f 90       	pop	r3
     f18:	2f 90       	pop	r2
     f1a:	1f 90       	pop	r1
     f1c:	0f 90       	pop	r0
     f1e:	0c be       	out	0x3c, r0	; 60
     f20:	0f 90       	pop	r0
     f22:	0b be       	out	0x3b, r0	; 59
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
     f2a:	08 95       	ret

00000f2c <__vector_32>:
	 * count is incremented after the context is saved.
	 */
	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
     f2c:	72 df       	rcall	.-284    	; 0xe12 <vPortYieldFromTick>
		__asm__ __volatile__ ( "reti" );
     f2e:	18 95       	reti

00000f30 <setAnalogMode>:
// For example: if (getMode() == MODE_8_BIT) ...

inline uint8_t getAnalogMode(void)
{
	return (ADMUX >> ADLAR) & 1;
}
     f30:	81 11       	cpse	r24, r1
     f32:	06 c0       	rjmp	.+12     	; 0xf40 <setAnalogMode+0x10>
     f34:	ec e7       	ldi	r30, 0x7C	; 124
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	8f 7d       	andi	r24, 0xDF	; 223
     f3c:	80 83       	st	Z, r24
     f3e:	08 95       	ret
     f40:	ec e7       	ldi	r30, 0x7C	; 124
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	80 62       	ori	r24, 0x20	; 32
     f48:	80 83       	st	Z, r24
     f4a:	08 95       	ret

00000f4c <analogIsConverting>:

// returns 1 if the ADC is in the middle of an conversion, otherwise
// returns 0
inline uint8_t analogIsConverting(void)
{
	return (ADCSRA >> ADSC) & 1;
     f4c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
}
     f50:	86 fb       	bst	r24, 6
     f52:	88 27       	eor	r24, r24
     f54:	80 f9       	bld	r24, 0
     f56:	08 95       	ret

00000f58 <startAnalogConversion>:
//  Orangutan SVP.

inline void startAnalogConversion(uint8_t channel, uint8_t use_internal_reference)
{
	// Channel numbers greater than 15 on 328p or 1284p or 31 on 2560 are invalid.
	if (channel > 0x1F)
     f58:	80 32       	cpi	r24, 0x20	; 32
     f5a:	18 f5       	brcc	.+70     	; 0xfa2 <startAnalogConversion+0x4a>
	{
		return;
	}

	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
     f5c:	97 e8       	ldi	r25, 0x87	; 135
     f5e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	// to channel 0, which can affect the ADC charge capacitor.  For example, if you have a
	// high output impedance voltage on channel 1 and a low output impedance voltage on channel
	// 0, the voltage on channel 0 be briefly applied to the ADC capacitor before every conversion,
	// which could prevent the capacitor from settling to the voltage on channel 1, even over
	// many reads.
	uint8_t tempADMUX = ADMUX;
     f62:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	tempADMUX |= _BV(REFS0);		// Use external capacitor on ARef
	if(use_internal_reference)		// Note: internal reference should NOT be used on devices
     f66:	66 23       	and	r22, r22
     f68:	11 f0       	breq	.+4      	; 0xf6e <startAnalogConversion+0x16>
	{								//  where AREF is connected to an external voltage!
		// use the internal voltage reference
		tempADMUX |= _BV(REFS1);	// Internal reference: 1.1 V on ATmega48/168/328; 2.56 V on ATmega324/644/1284
     f6a:	90 6c       	ori	r25, 0xC0	; 192
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <startAnalogConversion+0x1a>
     f6e:	9f 77       	andi	r25, 0x7F	; 127
	}
	else
	{
		// use AVcc as a reference
		tempADMUX &= ~_BV(REFS1);	// External reference: on AVcc
     f70:	90 64       	ori	r25, 0x40	; 64
	}

	tempADMUX &= ~0x1F;		 // clear channel selection bits of ADMUX
     f72:	90 7e       	andi	r25, 0xE0	; 224
	#ifdef MUX5
	if (channel > 7) {
     f74:	88 30       	cpi	r24, 0x08	; 8
     f76:	40 f0       	brcs	.+16     	; 0xf88 <startAnalogConversion+0x30>
		ADCSRB |= _BV(MUX5);
     f78:	eb e7       	ldi	r30, 0x7B	; 123
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	20 81       	ld	r18, Z
     f7e:	28 60       	ori	r18, 0x08	; 8
     f80:	20 83       	st	Z, r18
		tempADMUX |= channel - 8; 
     f82:	88 50       	subi	r24, 0x08	; 8
     f84:	89 2b       	or	r24, r25
     f86:	06 c0       	rjmp	.+12     	; 0xf94 <startAnalogConversion+0x3c>
		} else {
		ADCSRB &= ~(_BV(MUX5));
     f88:	eb e7       	ldi	r30, 0x7B	; 123
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	20 81       	ld	r18, Z
     f8e:	27 7f       	andi	r18, 0xF7	; 247
     f90:	20 83       	st	Z, r18
		tempADMUX |= channel;
     f92:	89 2b       	or	r24, r25
	}
	#endif
	
	   // we only get this far if channel is less than 32
	ADMUX = tempADMUX;
     f94:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA |= _BV(ADSC); // start the conversion
     f98:	ea e7       	ldi	r30, 0x7A	; 122
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	80 64       	ori	r24, 0x40	; 64
     fa0:	80 83       	st	Z, r24
     fa2:	08 95       	ret

00000fa4 <analogConversionResult>:
// MODE_8_BIT and MODE_10_BIT:
// For example: if (getMode() == MODE_8_BIT) ...

inline uint8_t getAnalogMode(void)
{
	return (ADMUX >> ADLAR) & 1;
     fa4:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
}

// returns the result of the previous ADC conversion.
inline uint16_t analogConversionResult(void)
{
	if (getAnalogMode())				// if left-adjusted (i.e. 8-bit mode)
     fa8:	85 ff       	sbrs	r24, 5
     faa:	04 c0       	rjmp	.+8      	; 0xfb4 <analogConversionResult+0x10>
	{
		return (uint16_t) ADCH;			// 8-bit result
     fac:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	08 95       	ret
	}
	else
	{
		return ADC;				// 10-bit result
     fb4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     fb8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	}
}
     fbc:	08 95       	ret

00000fbe <vApplicationIdleHook>:
	// The corresponding PIN Register bit will always read as zero when this bit is set. When an
	// analogue signal is applied to the ADC7..0 pin and the digital input from this pin is not needed, this
	// bit should be written logic one to reduce power consumption in the digital input buffer.

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
	DIDR0 = 0xFF;
     fbe:	8f ef       	ldi	r24, 0xFF	; 255
     fc0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xFF;
     fc4:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	// When the ACD bit is written logic one, the power to the Analogue Comparator is switched off.
	// This bit can be set at any time to turn off the Analogue Comparator.
	// This will reduce power consumption in Active and Idle mode.
	// When changing the ACD bit, the Analogue Comparator Interrupt must be disabled by clearing the ACIE bit in ACSR.
	// Otherwise an interrupt can occur when the ACD bit is changed.
	ACSR &= ~_BV(ACIE);
     fc8:	80 b7       	in	r24, 0x30	; 48
     fca:	87 7f       	andi	r24, 0xF7	; 247
     fcc:	80 bf       	out	0x30, r24	; 48
	ACSR |=  _BV(ACD);
     fce:	80 b7       	in	r24, 0x30	; 48
     fd0:	80 68       	ori	r24, 0x80	; 128
     fd2:	80 bf       	out	0x30, r24	; 48
	// SLEEP_MODE_PWR_DOWN     _BV(SM1)
	// SLEEP_MODE_PWR_SAVE     (_BV(SM0) | _BV(SM1))
	// SLEEP_MODE_STANDBY      (_BV(SM1) | _BV(SM2))
	// SLEEP_MODE_EXT_STANDBY  (_BV(SM0) | _BV(SM1) | _BV(SM2))

	set_sleep_mode( SLEEP_MODE_IDLE );
     fd4:	83 b7       	in	r24, 0x33	; 51
     fd6:	81 7f       	andi	r24, 0xF1	; 241
     fd8:	83 bf       	out	0x33, r24	; 51

	portENTER_CRITICAL();
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	0f 92       	push	r0
	sleep_enable();
     fe0:	83 b7       	in	r24, 0x33	; 51
     fe2:	81 60       	ori	r24, 0x01	; 1
     fe4:	83 bf       	out	0x33, r24	; 51

#if defined(BODS) && defined(BODSE) // only if there is support to disable the BOD.
	sleep_bod_disable();
#endif

	portEXIT_CRITICAL();
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
	sleep_cpu();		// good night.
     fea:	88 95       	sleep

	sleep_reset();		// reset the sleep_mode() faster than sleep_disable();
     fec:	13 be       	out	0x33, r1	; 51
     fee:	08 95       	ret

00000ff0 <vApplicationMallocFailedHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
     ff0:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     ff2:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ff4:	00 00       	nop
	for(;;)
	{
		_delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
     ff6:	1f 9a       	sbi	0x03, 7	; 3
     ff8:	fd cf       	rjmp	.-6      	; 0xff4 <vApplicationMallocFailedHook+0x4>

00000ffa <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
     ffa:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     ffc:	2f 9a       	sbi	0x05, 7	; 5
     ffe:	00 c0       	rjmp	.+0      	; 0x1000 <vApplicationStackOverflowHook+0x6>
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    1000:	1f 9a       	sbi	0x03, 7	; 3
    1002:	fd cf       	rjmp	.-6      	; 0xffe <vApplicationStackOverflowHook+0x4>

00001004 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1004:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1006:	03 96       	adiw	r24, 0x03	; 3
    1008:	92 83       	std	Z+2, r25	; 0x02
    100a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    100c:	4f ef       	ldi	r20, 0xFF	; 255
    100e:	5f ef       	ldi	r21, 0xFF	; 255
    1010:	ba 01       	movw	r22, r20
    1012:	43 83       	std	Z+3, r20	; 0x03
    1014:	54 83       	std	Z+4, r21	; 0x04
    1016:	65 83       	std	Z+5, r22	; 0x05
    1018:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    101a:	90 87       	std	Z+8, r25	; 0x08
    101c:	87 83       	std	Z+7, r24	; 0x07
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    101e:	92 87       	std	Z+10, r25	; 0x0a
    1020:	81 87       	std	Z+9, r24	; 0x09

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1022:	10 82       	st	Z, r1
    1024:	08 95       	ret

00001026 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1026:	fc 01       	movw	r30, r24
    1028:	13 86       	std	Z+11, r1	; 0x0b
    102a:	12 86       	std	Z+10, r1	; 0x0a
    102c:	08 95       	ret

0000102e <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	9c 01       	movw	r18, r24
    1034:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1036:	dc 01       	movw	r26, r24
    1038:	11 96       	adiw	r26, 0x01	; 1
    103a:	cd 91       	ld	r28, X+
    103c:	dc 91       	ld	r29, X
    103e:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1040:	d5 83       	std	Z+5, r29	; 0x05
    1042:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1044:	8e 81       	ldd	r24, Y+6	; 0x06
    1046:	9f 81       	ldd	r25, Y+7	; 0x07
    1048:	97 83       	std	Z+7, r25	; 0x07
    104a:	86 83       	std	Z+6, r24	; 0x06

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    104c:	8e 81       	ldd	r24, Y+6	; 0x06
    104e:	9f 81       	ldd	r25, Y+7	; 0x07
    1050:	dc 01       	movw	r26, r24
    1052:	15 96       	adiw	r26, 0x05	; 5
    1054:	7c 93       	st	X, r23
    1056:	6e 93       	st	-X, r22
    1058:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxPrevious = pxNewListItem;
    105a:	7f 83       	std	Y+7, r23	; 0x07
    105c:	6e 83       	std	Y+6, r22	; 0x06

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    105e:	33 87       	std	Z+11, r19	; 0x0b
    1060:	22 87       	std	Z+10, r18	; 0x0a

	( pxList->uxNumberOfItems )++;
    1062:	f9 01       	movw	r30, r18
    1064:	80 81       	ld	r24, Z
    1066:	8f 5f       	subi	r24, 0xFF	; 255
    1068:	80 83       	st	Z, r24
}
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	08 95       	ret

00001070 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    107a:	08 81       	ld	r16, Y
    107c:	19 81       	ldd	r17, Y+1	; 0x01
    107e:	2a 81       	ldd	r18, Y+2	; 0x02
    1080:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1082:	0f 3f       	cpi	r16, 0xFF	; 255
    1084:	4f ef       	ldi	r20, 0xFF	; 255
    1086:	14 07       	cpc	r17, r20
    1088:	24 07       	cpc	r18, r20
    108a:	34 07       	cpc	r19, r20
    108c:	21 f4       	brne	.+8      	; 0x1096 <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    108e:	fc 01       	movw	r30, r24
    1090:	a1 85       	ldd	r26, Z+9	; 0x09
    1092:	b2 85       	ldd	r27, Z+10	; 0x0a
    1094:	11 c0       	rjmp	.+34     	; 0x10b8 <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1096:	dc 01       	movw	r26, r24
    1098:	13 96       	adiw	r26, 0x03	; 3
    109a:	01 c0       	rjmp	.+2      	; 0x109e <vListInsert+0x2e>
    109c:	df 01       	movw	r26, r30
    109e:	14 96       	adiw	r26, 0x04	; 4
    10a0:	ed 91       	ld	r30, X+
    10a2:	fc 91       	ld	r31, X
    10a4:	15 97       	sbiw	r26, 0x05	; 5
    10a6:	40 81       	ld	r20, Z
    10a8:	51 81       	ldd	r21, Z+1	; 0x01
    10aa:	62 81       	ldd	r22, Z+2	; 0x02
    10ac:	73 81       	ldd	r23, Z+3	; 0x03
    10ae:	04 17       	cp	r16, r20
    10b0:	15 07       	cpc	r17, r21
    10b2:	26 07       	cpc	r18, r22
    10b4:	37 07       	cpc	r19, r23
    10b6:	90 f7       	brcc	.-28     	; 0x109c <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    10b8:	14 96       	adiw	r26, 0x04	; 4
    10ba:	ed 91       	ld	r30, X+
    10bc:	fc 91       	ld	r31, X
    10be:	15 97       	sbiw	r26, 0x05	; 5
    10c0:	fd 83       	std	Y+5, r31	; 0x05
    10c2:	ec 83       	std	Y+4, r30	; 0x04
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    10c4:	d7 83       	std	Z+7, r29	; 0x07
    10c6:	c6 83       	std	Z+6, r28	; 0x06
	pxNewListItem->pxPrevious = pxIterator;
    10c8:	bf 83       	std	Y+7, r27	; 0x07
    10ca:	ae 83       	std	Y+6, r26	; 0x06
	pxIterator->pxNext = pxNewListItem;
    10cc:	15 96       	adiw	r26, 0x05	; 5
    10ce:	dc 93       	st	X, r29
    10d0:	ce 93       	st	-X, r28
    10d2:	14 97       	sbiw	r26, 0x04	; 4

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    10d4:	9b 87       	std	Y+11, r25	; 0x0b
    10d6:	8a 87       	std	Y+10, r24	; 0x0a

	( pxList->uxNumberOfItems )++;
    10d8:	fc 01       	movw	r30, r24
    10da:	20 81       	ld	r18, Z
    10dc:	2f 5f       	subi	r18, 0xFF	; 255
    10de:	20 83       	st	Z, r18
}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	08 95       	ret

000010ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    10f0:	a2 85       	ldd	r26, Z+10	; 0x0a
    10f2:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    10f4:	c4 81       	ldd	r28, Z+4	; 0x04
    10f6:	d5 81       	ldd	r29, Z+5	; 0x05
    10f8:	86 81       	ldd	r24, Z+6	; 0x06
    10fa:	97 81       	ldd	r25, Z+7	; 0x07
    10fc:	9f 83       	std	Y+7, r25	; 0x07
    10fe:	8e 83       	std	Y+6, r24	; 0x06
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1100:	c6 81       	ldd	r28, Z+6	; 0x06
    1102:	d7 81       	ldd	r29, Z+7	; 0x07
    1104:	84 81       	ldd	r24, Z+4	; 0x04
    1106:	95 81       	ldd	r25, Z+5	; 0x05
    1108:	9d 83       	std	Y+5, r25	; 0x05
    110a:	8c 83       	std	Y+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    110c:	11 96       	adiw	r26, 0x01	; 1
    110e:	8d 91       	ld	r24, X+
    1110:	9c 91       	ld	r25, X
    1112:	12 97       	sbiw	r26, 0x02	; 2
    1114:	e8 17       	cp	r30, r24
    1116:	f9 07       	cpc	r31, r25
    1118:	31 f4       	brne	.+12     	; 0x1126 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    111a:	86 81       	ldd	r24, Z+6	; 0x06
    111c:	97 81       	ldd	r25, Z+7	; 0x07
    111e:	12 96       	adiw	r26, 0x02	; 2
    1120:	9c 93       	st	X, r25
    1122:	8e 93       	st	-X, r24
    1124:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1126:	13 86       	std	Z+11, r1	; 0x0b
    1128:	12 86       	std	Z+10, r1	; 0x0a
	( pxList->uxNumberOfItems )--;
    112a:	8c 91       	ld	r24, X
    112c:	81 50       	subi	r24, 0x01	; 1
    112e:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
    1130:	8c 91       	ld	r24, X
}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	0f 92       	push	r0
    113e:	fc 01       	movw	r30, r24
    1140:	96 8d       	ldd	r25, Z+30	; 0x1e
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	91 11       	cpse	r25, r1
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	08 95       	ret

0000114e <prvCopyDataToQueue>:
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	ec 01       	movw	r28, r24
    1158:	04 2f       	mov	r16, r20
    115a:	1e 8d       	ldd	r17, Y+30	; 0x1e
    115c:	48 a1       	ldd	r20, Y+32	; 0x20
    115e:	41 11       	cpse	r20, r1
    1160:	0c c0       	rjmp	.+24     	; 0x117a <prvCopyDataToQueue+0x2c>
    1162:	88 81       	ld	r24, Y
    1164:	99 81       	ldd	r25, Y+1	; 0x01
    1166:	89 2b       	or	r24, r25
    1168:	09 f0       	breq	.+2      	; 0x116c <prvCopyDataToQueue+0x1e>
    116a:	42 c0       	rjmp	.+132    	; 0x11f0 <prvCopyDataToQueue+0xa2>
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	9b 81       	ldd	r25, Y+3	; 0x03
    1170:	0e 94 2a 1a 	call	0x3454	; 0x3454 <xTaskPriorityDisinherit>
    1174:	1b 82       	std	Y+3, r1	; 0x03
    1176:	1a 82       	std	Y+2, r1	; 0x02
    1178:	42 c0       	rjmp	.+132    	; 0x11fe <prvCopyDataToQueue+0xb0>
    117a:	01 11       	cpse	r16, r1
    117c:	17 c0       	rjmp	.+46     	; 0x11ac <prvCopyDataToQueue+0x5e>
    117e:	50 e0       	ldi	r21, 0x00	; 0
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	9d 81       	ldd	r25, Y+5	; 0x05
    1184:	0e 94 aa 5a 	call	0xb554	; 0xb554 <memcpy>
    1188:	28 a1       	ldd	r18, Y+32	; 0x20
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	9d 81       	ldd	r25, Y+5	; 0x05
    118e:	82 0f       	add	r24, r18
    1190:	91 1d       	adc	r25, r1
    1192:	9d 83       	std	Y+5, r25	; 0x05
    1194:	8c 83       	std	Y+4, r24	; 0x04
    1196:	2a 81       	ldd	r18, Y+2	; 0x02
    1198:	3b 81       	ldd	r19, Y+3	; 0x03
    119a:	82 17       	cp	r24, r18
    119c:	93 07       	cpc	r25, r19
    119e:	50 f1       	brcs	.+84     	; 0x11f4 <prvCopyDataToQueue+0xa6>
    11a0:	88 81       	ld	r24, Y
    11a2:	99 81       	ldd	r25, Y+1	; 0x01
    11a4:	9d 83       	std	Y+5, r25	; 0x05
    11a6:	8c 83       	std	Y+4, r24	; 0x04
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	29 c0       	rjmp	.+82     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11ac:	50 e0       	ldi	r21, 0x00	; 0
    11ae:	8e 81       	ldd	r24, Y+6	; 0x06
    11b0:	9f 81       	ldd	r25, Y+7	; 0x07
    11b2:	0e 94 aa 5a 	call	0xb554	; 0xb554 <memcpy>
    11b6:	88 a1       	ldd	r24, Y+32	; 0x20
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	91 95       	neg	r25
    11bc:	81 95       	neg	r24
    11be:	91 09       	sbc	r25, r1
    11c0:	2e 81       	ldd	r18, Y+6	; 0x06
    11c2:	3f 81       	ldd	r19, Y+7	; 0x07
    11c4:	28 0f       	add	r18, r24
    11c6:	39 1f       	adc	r19, r25
    11c8:	3f 83       	std	Y+7, r19	; 0x07
    11ca:	2e 83       	std	Y+6, r18	; 0x06
    11cc:	48 81       	ld	r20, Y
    11ce:	59 81       	ldd	r21, Y+1	; 0x01
    11d0:	24 17       	cp	r18, r20
    11d2:	35 07       	cpc	r19, r21
    11d4:	30 f4       	brcc	.+12     	; 0x11e2 <prvCopyDataToQueue+0x94>
    11d6:	2a 81       	ldd	r18, Y+2	; 0x02
    11d8:	3b 81       	ldd	r19, Y+3	; 0x03
    11da:	82 0f       	add	r24, r18
    11dc:	93 1f       	adc	r25, r19
    11de:	9f 83       	std	Y+7, r25	; 0x07
    11e0:	8e 83       	std	Y+6, r24	; 0x06
    11e2:	02 30       	cpi	r16, 0x02	; 2
    11e4:	49 f4       	brne	.+18     	; 0x11f8 <prvCopyDataToQueue+0xaa>
    11e6:	11 23       	and	r17, r17
    11e8:	49 f0       	breq	.+18     	; 0x11fc <prvCopyDataToQueue+0xae>
    11ea:	11 50       	subi	r17, 0x01	; 1
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	07 c0       	rjmp	.+14     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	05 c0       	rjmp	.+10     	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <prvCopyDataToQueue+0xb0>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <prvCopyDataToQueue+0xb0>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	1f 5f       	subi	r17, 0xFF	; 255
    1200:	1e 8f       	std	Y+30, r17	; 0x1e
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	08 95       	ret

0000120c <prvCopyDataFromQueue>:
    120c:	fc 01       	movw	r30, r24
    120e:	40 a1       	ldd	r20, Z+32	; 0x20
    1210:	44 23       	and	r20, r20
    1212:	a9 f0       	breq	.+42     	; 0x123e <prvCopyDataFromQueue+0x32>
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	26 81       	ldd	r18, Z+6	; 0x06
    1218:	37 81       	ldd	r19, Z+7	; 0x07
    121a:	24 0f       	add	r18, r20
    121c:	35 1f       	adc	r19, r21
    121e:	37 83       	std	Z+7, r19	; 0x07
    1220:	26 83       	std	Z+6, r18	; 0x06
    1222:	82 81       	ldd	r24, Z+2	; 0x02
    1224:	93 81       	ldd	r25, Z+3	; 0x03
    1226:	28 17       	cp	r18, r24
    1228:	39 07       	cpc	r19, r25
    122a:	20 f0       	brcs	.+8      	; 0x1234 <prvCopyDataFromQueue+0x28>
    122c:	80 81       	ld	r24, Z
    122e:	91 81       	ldd	r25, Z+1	; 0x01
    1230:	97 83       	std	Z+7, r25	; 0x07
    1232:	86 83       	std	Z+6, r24	; 0x06
    1234:	cb 01       	movw	r24, r22
    1236:	66 81       	ldd	r22, Z+6	; 0x06
    1238:	77 81       	ldd	r23, Z+7	; 0x07
    123a:	0c 94 aa 5a 	jmp	0xb554	; 0xb554 <memcpy>
    123e:	08 95       	ret

00001240 <prvUnlockQueue>:
    1240:	ef 92       	push	r14
    1242:	ff 92       	push	r15
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	8c 01       	movw	r16, r24
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	0f 92       	push	r0
    1252:	fc 01       	movw	r30, r24
    1254:	c2 a1       	ldd	r28, Z+34	; 0x22
    1256:	1c 16       	cp	r1, r28
    1258:	ac f4       	brge	.+42     	; 0x1284 <prvUnlockQueue+0x44>
    125a:	83 89       	ldd	r24, Z+19	; 0x13
    125c:	81 11       	cpse	r24, r1
    125e:	06 c0       	rjmp	.+12     	; 0x126c <prvUnlockQueue+0x2c>
    1260:	11 c0       	rjmp	.+34     	; 0x1284 <prvUnlockQueue+0x44>
    1262:	f8 01       	movw	r30, r16
    1264:	83 89       	ldd	r24, Z+19	; 0x13
    1266:	81 11       	cpse	r24, r1
    1268:	05 c0       	rjmp	.+10     	; 0x1274 <prvUnlockQueue+0x34>
    126a:	0c c0       	rjmp	.+24     	; 0x1284 <prvUnlockQueue+0x44>
    126c:	78 01       	movw	r14, r16
    126e:	f3 e1       	ldi	r31, 0x13	; 19
    1270:	ef 0e       	add	r14, r31
    1272:	f1 1c       	adc	r15, r1
    1274:	c7 01       	movw	r24, r14
    1276:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    127a:	81 11       	cpse	r24, r1
    127c:	0e 94 aa 19 	call	0x3354	; 0x3354 <vTaskMissedYield>
    1280:	c1 50       	subi	r28, 0x01	; 1
    1282:	79 f7       	brne	.-34     	; 0x1262 <prvUnlockQueue+0x22>
    1284:	8f ef       	ldi	r24, 0xFF	; 255
    1286:	f8 01       	movw	r30, r16
    1288:	82 a3       	std	Z+34, r24	; 0x22
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	0f 92       	push	r0
    1294:	c1 a1       	ldd	r28, Z+33	; 0x21
    1296:	1c 16       	cp	r1, r28
    1298:	ac f4       	brge	.+42     	; 0x12c4 <prvUnlockQueue+0x84>
    129a:	80 85       	ldd	r24, Z+8	; 0x08
    129c:	81 11       	cpse	r24, r1
    129e:	06 c0       	rjmp	.+12     	; 0x12ac <prvUnlockQueue+0x6c>
    12a0:	11 c0       	rjmp	.+34     	; 0x12c4 <prvUnlockQueue+0x84>
    12a2:	f8 01       	movw	r30, r16
    12a4:	80 85       	ldd	r24, Z+8	; 0x08
    12a6:	81 11       	cpse	r24, r1
    12a8:	05 c0       	rjmp	.+10     	; 0x12b4 <prvUnlockQueue+0x74>
    12aa:	0c c0       	rjmp	.+24     	; 0x12c4 <prvUnlockQueue+0x84>
    12ac:	78 01       	movw	r14, r16
    12ae:	f8 e0       	ldi	r31, 0x08	; 8
    12b0:	ef 0e       	add	r14, r31
    12b2:	f1 1c       	adc	r15, r1
    12b4:	c7 01       	movw	r24, r14
    12b6:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    12ba:	81 11       	cpse	r24, r1
    12bc:	0e 94 aa 19 	call	0x3354	; 0x3354 <vTaskMissedYield>
    12c0:	c1 50       	subi	r28, 0x01	; 1
    12c2:	79 f7       	brne	.-34     	; 0x12a2 <prvUnlockQueue+0x62>
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	f8 01       	movw	r30, r16
    12c8:	81 a3       	std	Z+33, r24	; 0x21
    12ca:	0f 90       	pop	r0
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	ff 90       	pop	r15
    12d6:	ef 90       	pop	r14
    12d8:	08 95       	ret

000012da <xQueueGenericReset>:
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	ec 01       	movw	r28, r24
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	0f 92       	push	r0
    12e6:	48 81       	ld	r20, Y
    12e8:	59 81       	ldd	r21, Y+1	; 0x01
    12ea:	28 a1       	ldd	r18, Y+32	; 0x20
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	7f 8d       	ldd	r23, Y+31	; 0x1f
    12f0:	72 9f       	mul	r23, r18
    12f2:	c0 01       	movw	r24, r0
    12f4:	73 9f       	mul	r23, r19
    12f6:	90 0d       	add	r25, r0
    12f8:	11 24       	eor	r1, r1
    12fa:	fa 01       	movw	r30, r20
    12fc:	e8 0f       	add	r30, r24
    12fe:	f9 1f       	adc	r31, r25
    1300:	fb 83       	std	Y+3, r31	; 0x03
    1302:	ea 83       	std	Y+2, r30	; 0x02
    1304:	1e 8e       	std	Y+30, r1	; 0x1e
    1306:	5d 83       	std	Y+5, r21	; 0x05
    1308:	4c 83       	std	Y+4, r20	; 0x04
    130a:	82 1b       	sub	r24, r18
    130c:	93 0b       	sbc	r25, r19
    130e:	84 0f       	add	r24, r20
    1310:	95 1f       	adc	r25, r21
    1312:	9f 83       	std	Y+7, r25	; 0x07
    1314:	8e 83       	std	Y+6, r24	; 0x06
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	89 a3       	std	Y+33, r24	; 0x21
    131a:	8a a3       	std	Y+34, r24	; 0x22
    131c:	61 11       	cpse	r22, r1
    131e:	0b c0       	rjmp	.+22     	; 0x1336 <xQueueGenericReset+0x5c>
    1320:	88 85       	ldd	r24, Y+8	; 0x08
    1322:	88 23       	and	r24, r24
    1324:	71 f0       	breq	.+28     	; 0x1342 <xQueueGenericReset+0x68>
    1326:	ce 01       	movw	r24, r28
    1328:	08 96       	adiw	r24, 0x08	; 8
    132a:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    132e:	88 23       	and	r24, r24
    1330:	41 f0       	breq	.+16     	; 0x1342 <xQueueGenericReset+0x68>
    1332:	0e dd       	rcall	.-1508   	; 0xd50 <vPortYield>
    1334:	06 c0       	rjmp	.+12     	; 0x1342 <xQueueGenericReset+0x68>
    1336:	ce 01       	movw	r24, r28
    1338:	08 96       	adiw	r24, 0x08	; 8
    133a:	64 de       	rcall	.-824    	; 0x1004 <vListInitialise>
    133c:	ce 01       	movw	r24, r28
    133e:	43 96       	adiw	r24, 0x13	; 19
    1340:	61 de       	rcall	.-830    	; 0x1004 <vListInitialise>
    1342:	0f 90       	pop	r0
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	08 95       	ret

0000134e <xQueueGenericCreate>:
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	08 2f       	mov	r16, r24
    1358:	16 2f       	mov	r17, r22
    135a:	66 23       	and	r22, r22
    135c:	b1 f0       	breq	.+44     	; 0x138a <xQueueGenericCreate+0x3c>
    135e:	86 9f       	mul	r24, r22
    1360:	c0 01       	movw	r24, r0
    1362:	11 24       	eor	r1, r1
    1364:	83 96       	adiw	r24, 0x23	; 35
    1366:	0f dc       	rcall	.-2018   	; 0xb86 <pvPortMalloc>
    1368:	ec 01       	movw	r28, r24
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	39 f4       	brne	.+14     	; 0x137c <xQueueGenericCreate+0x2e>
    136e:	13 c0       	rjmp	.+38     	; 0x1396 <xQueueGenericCreate+0x48>
    1370:	0f 8f       	std	Y+31, r16	; 0x1f
    1372:	18 a3       	std	Y+32, r17	; 0x20
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	ce 01       	movw	r24, r28
    1378:	b0 df       	rcall	.-160    	; 0x12da <xQueueGenericReset>
    137a:	0d c0       	rjmp	.+26     	; 0x1396 <xQueueGenericCreate+0x48>
    137c:	83 96       	adiw	r24, 0x23	; 35
    137e:	99 83       	std	Y+1, r25	; 0x01
    1380:	88 83       	st	Y, r24
    1382:	f6 cf       	rjmp	.-20     	; 0x1370 <xQueueGenericCreate+0x22>
    1384:	d9 83       	std	Y+1, r29	; 0x01
    1386:	c8 83       	st	Y, r28
    1388:	f3 cf       	rjmp	.-26     	; 0x1370 <xQueueGenericCreate+0x22>
    138a:	83 e2       	ldi	r24, 0x23	; 35
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	fb db       	rcall	.-2058   	; 0xb86 <pvPortMalloc>
    1390:	ec 01       	movw	r28, r24
    1392:	89 2b       	or	r24, r25
    1394:	b9 f7       	brne	.-18     	; 0x1384 <xQueueGenericCreate+0x36>
    1396:	ce 01       	movw	r24, r28
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	08 95       	ret

000013a2 <xQueueGenericSend>:
    13a2:	9f 92       	push	r9
    13a4:	af 92       	push	r10
    13a6:	bf 92       	push	r11
    13a8:	cf 92       	push	r12
    13aa:	df 92       	push	r13
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	29 97       	sbiw	r28, 0x09	; 9
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	7c 01       	movw	r14, r24
    13ca:	5b 01       	movw	r10, r22
    13cc:	2e 83       	std	Y+6, r18	; 0x06
    13ce:	3f 83       	std	Y+7, r19	; 0x07
    13d0:	48 87       	std	Y+8, r20	; 0x08
    13d2:	59 87       	std	Y+9, r21	; 0x09
    13d4:	10 e0       	ldi	r17, 0x00	; 0
    13d6:	99 24       	eor	r9, r9
    13d8:	93 94       	inc	r9
    13da:	6c 01       	movw	r12, r24
    13dc:	88 e0       	ldi	r24, 0x08	; 8
    13de:	c8 0e       	add	r12, r24
    13e0:	d1 1c       	adc	r13, r1
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	0f 92       	push	r0
    13e8:	f7 01       	movw	r30, r14
    13ea:	96 8d       	ldd	r25, Z+30	; 0x1e
    13ec:	87 8d       	ldd	r24, Z+31	; 0x1f
    13ee:	98 17       	cp	r25, r24
    13f0:	10 f0       	brcs	.+4      	; 0x13f6 <xQueueGenericSend+0x54>
    13f2:	02 30       	cpi	r16, 0x02	; 2
    13f4:	b1 f4       	brne	.+44     	; 0x1422 <xQueueGenericSend+0x80>
    13f6:	40 2f       	mov	r20, r16
    13f8:	b5 01       	movw	r22, r10
    13fa:	c7 01       	movw	r24, r14
    13fc:	a8 de       	rcall	.-688    	; 0x114e <prvCopyDataToQueue>
    13fe:	f7 01       	movw	r30, r14
    1400:	93 89       	ldd	r25, Z+19	; 0x13
    1402:	99 23       	and	r25, r25
    1404:	41 f0       	breq	.+16     	; 0x1416 <xQueueGenericSend+0x74>
    1406:	c7 01       	movw	r24, r14
    1408:	43 96       	adiw	r24, 0x13	; 19
    140a:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    140e:	88 23       	and	r24, r24
    1410:	21 f0       	breq	.+8      	; 0x141a <xQueueGenericSend+0x78>
    1412:	9e dc       	rcall	.-1732   	; 0xd50 <vPortYield>
    1414:	02 c0       	rjmp	.+4      	; 0x141a <xQueueGenericSend+0x78>
    1416:	81 11       	cpse	r24, r1
    1418:	9b dc       	rcall	.-1738   	; 0xd50 <vPortYield>
    141a:	0f 90       	pop	r0
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	52 c0       	rjmp	.+164    	; 0x14c6 <xQueueGenericSend+0x124>
    1422:	8e 81       	ldd	r24, Y+6	; 0x06
    1424:	9f 81       	ldd	r25, Y+7	; 0x07
    1426:	a8 85       	ldd	r26, Y+8	; 0x08
    1428:	b9 85       	ldd	r27, Y+9	; 0x09
    142a:	89 2b       	or	r24, r25
    142c:	8a 2b       	or	r24, r26
    142e:	8b 2b       	or	r24, r27
    1430:	21 f4       	brne	.+8      	; 0x143a <xQueueGenericSend+0x98>
    1432:	0f 90       	pop	r0
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	46 c0       	rjmp	.+140    	; 0x14c6 <xQueueGenericSend+0x124>
    143a:	11 11       	cpse	r17, r1
    143c:	05 c0       	rjmp	.+10     	; 0x1448 <xQueueGenericSend+0xa6>
    143e:	ce 01       	movw	r24, r28
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    1446:	19 2d       	mov	r17, r9
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	0f 92       	push	r0
    1456:	f7 01       	movw	r30, r14
    1458:	81 a1       	ldd	r24, Z+33	; 0x21
    145a:	8f 3f       	cpi	r24, 0xFF	; 255
    145c:	09 f4       	brne	.+2      	; 0x1460 <xQueueGenericSend+0xbe>
    145e:	11 a2       	std	Z+33, r1	; 0x21
    1460:	f7 01       	movw	r30, r14
    1462:	82 a1       	ldd	r24, Z+34	; 0x22
    1464:	8f 3f       	cpi	r24, 0xFF	; 255
    1466:	09 f4       	brne	.+2      	; 0x146a <xQueueGenericSend+0xc8>
    1468:	12 a2       	std	Z+34, r1	; 0x22
    146a:	0f 90       	pop	r0
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	be 01       	movw	r22, r28
    1470:	6a 5f       	subi	r22, 0xFA	; 250
    1472:	7f 4f       	sbci	r23, 0xFF	; 255
    1474:	ce 01       	movw	r24, r28
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    147c:	81 11       	cpse	r24, r1
    147e:	1e c0       	rjmp	.+60     	; 0x14bc <xQueueGenericSend+0x11a>
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	0f 92       	push	r0
    1486:	f7 01       	movw	r30, r14
    1488:	96 8d       	ldd	r25, Z+30	; 0x1e
    148a:	87 8d       	ldd	r24, Z+31	; 0x1f
    148c:	0f 90       	pop	r0
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	98 13       	cpse	r25, r24
    1492:	0f c0       	rjmp	.+30     	; 0x14b2 <xQueueGenericSend+0x110>
    1494:	4e 81       	ldd	r20, Y+6	; 0x06
    1496:	5f 81       	ldd	r21, Y+7	; 0x07
    1498:	68 85       	ldd	r22, Y+8	; 0x08
    149a:	79 85       	ldd	r23, Y+9	; 0x09
    149c:	c6 01       	movw	r24, r12
    149e:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    14a2:	c7 01       	movw	r24, r14
    14a4:	cd de       	rcall	.-614    	; 0x1240 <prvUnlockQueue>
    14a6:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14aa:	81 11       	cpse	r24, r1
    14ac:	9a cf       	rjmp	.-204    	; 0x13e2 <xQueueGenericSend+0x40>
    14ae:	50 dc       	rcall	.-1888   	; 0xd50 <vPortYield>
    14b0:	98 cf       	rjmp	.-208    	; 0x13e2 <xQueueGenericSend+0x40>
    14b2:	c7 01       	movw	r24, r14
    14b4:	c5 de       	rcall	.-630    	; 0x1240 <prvUnlockQueue>
    14b6:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14ba:	93 cf       	rjmp	.-218    	; 0x13e2 <xQueueGenericSend+0x40>
    14bc:	c7 01       	movw	r24, r14
    14be:	c0 de       	rcall	.-640    	; 0x1240 <prvUnlockQueue>
    14c0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	29 96       	adiw	r28, 0x09	; 9
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	ff 90       	pop	r15
    14dc:	ef 90       	pop	r14
    14de:	df 90       	pop	r13
    14e0:	cf 90       	pop	r12
    14e2:	bf 90       	pop	r11
    14e4:	af 90       	pop	r10
    14e6:	9f 90       	pop	r9
    14e8:	08 95       	ret

000014ea <xQueueCreateMutex>:
    14ea:	0f 93       	push	r16
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	48 2f       	mov	r20, r24
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	2b df       	rcall	.-426    	; 0x134e <xQueueGenericCreate>
    14f8:	ec 01       	movw	r28, r24
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	61 f0       	breq	.+24     	; 0x1516 <xQueueCreateMutex+0x2c>
    14fe:	1b 82       	std	Y+3, r1	; 0x03
    1500:	1a 82       	std	Y+2, r1	; 0x02
    1502:	19 82       	std	Y+1, r1	; 0x01
    1504:	18 82       	st	Y, r1
    1506:	1e 82       	std	Y+6, r1	; 0x06
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	a9 01       	movw	r20, r18
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	46 df       	rcall	.-372    	; 0x13a2 <xQueueGenericSend>
    1516:	ce 01       	movw	r24, r28
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	0f 91       	pop	r16
    151e:	08 95       	ret

00001520 <xQueueGenericSendFromISR>:
    1520:	ef 92       	push	r14
    1522:	ff 92       	push	r15
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	8a 01       	movw	r16, r20
    152e:	fc 01       	movw	r30, r24
    1530:	56 8d       	ldd	r21, Z+30	; 0x1e
    1532:	37 8d       	ldd	r19, Z+31	; 0x1f
    1534:	53 17       	cp	r21, r19
    1536:	10 f0       	brcs	.+4      	; 0x153c <xQueueGenericSendFromISR+0x1c>
    1538:	22 30       	cpi	r18, 0x02	; 2
    153a:	e9 f4       	brne	.+58     	; 0x1576 <xQueueGenericSendFromISR+0x56>
    153c:	42 2f       	mov	r20, r18
    153e:	78 01       	movw	r14, r16
    1540:	ec 01       	movw	r28, r24
    1542:	1a a1       	ldd	r17, Y+34	; 0x22
    1544:	04 de       	rcall	.-1016   	; 0x114e <prvCopyDataToQueue>
    1546:	1f 3f       	cpi	r17, 0xFF	; 255
    1548:	81 f4       	brne	.+32     	; 0x156a <xQueueGenericSendFromISR+0x4a>
    154a:	8b 89       	ldd	r24, Y+19	; 0x13
    154c:	88 23       	and	r24, r24
    154e:	a9 f0       	breq	.+42     	; 0x157a <xQueueGenericSendFromISR+0x5a>
    1550:	ce 01       	movw	r24, r28
    1552:	43 96       	adiw	r24, 0x13	; 19
    1554:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    1558:	88 23       	and	r24, r24
    155a:	89 f0       	breq	.+34     	; 0x157e <xQueueGenericSendFromISR+0x5e>
    155c:	e1 14       	cp	r14, r1
    155e:	f1 04       	cpc	r15, r1
    1560:	81 f0       	breq	.+32     	; 0x1582 <xQueueGenericSendFromISR+0x62>
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	f7 01       	movw	r30, r14
    1566:	80 83       	st	Z, r24
    1568:	0d c0       	rjmp	.+26     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    156a:	ff 24       	eor	r15, r15
    156c:	f3 94       	inc	r15
    156e:	f1 0e       	add	r15, r17
    1570:	fa a2       	std	Y+34, r15	; 0x22
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	07 c0       	rjmp	.+14     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	05 c0       	rjmp	.+10     	; 0x1584 <xQueueGenericSendFromISR+0x64>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <xQueueGenericSendFromISR+0x64>
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	01 c0       	rjmp	.+2      	; 0x1584 <xQueueGenericSendFromISR+0x64>
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	ff 90       	pop	r15
    158e:	ef 90       	pop	r14
    1590:	08 95       	ret

00001592 <xQueueGiveFromISR>:
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	fc 01       	movw	r30, r24
    1598:	86 8d       	ldd	r24, Z+30	; 0x1e
    159a:	97 8d       	ldd	r25, Z+31	; 0x1f
    159c:	89 17       	cp	r24, r25
    159e:	c0 f4       	brcc	.+48     	; 0x15d0 <xQueueGiveFromISR+0x3e>
    15a0:	92 a1       	ldd	r25, Z+34	; 0x22
    15a2:	8f 5f       	subi	r24, 0xFF	; 255
    15a4:	86 8f       	std	Z+30, r24	; 0x1e
    15a6:	9f 3f       	cpi	r25, 0xFF	; 255
    15a8:	79 f4       	brne	.+30     	; 0x15c8 <xQueueGiveFromISR+0x36>
    15aa:	83 89       	ldd	r24, Z+19	; 0x13
    15ac:	88 23       	and	r24, r24
    15ae:	91 f0       	breq	.+36     	; 0x15d4 <xQueueGiveFromISR+0x42>
    15b0:	eb 01       	movw	r28, r22
    15b2:	cf 01       	movw	r24, r30
    15b4:	43 96       	adiw	r24, 0x13	; 19
    15b6:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    15ba:	88 23       	and	r24, r24
    15bc:	69 f0       	breq	.+26     	; 0x15d8 <xQueueGiveFromISR+0x46>
    15be:	20 97       	sbiw	r28, 0x00	; 0
    15c0:	69 f0       	breq	.+26     	; 0x15dc <xQueueGiveFromISR+0x4a>
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	88 83       	st	Y, r24
    15c6:	0b c0       	rjmp	.+22     	; 0x15de <xQueueGiveFromISR+0x4c>
    15c8:	9f 5f       	subi	r25, 0xFF	; 255
    15ca:	92 a3       	std	Z+34, r25	; 0x22
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	07 c0       	rjmp	.+14     	; 0x15de <xQueueGiveFromISR+0x4c>
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	05 c0       	rjmp	.+10     	; 0x15de <xQueueGiveFromISR+0x4c>
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	03 c0       	rjmp	.+6      	; 0x15de <xQueueGiveFromISR+0x4c>
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	01 c0       	rjmp	.+2      	; 0x15de <xQueueGiveFromISR+0x4c>
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	08 95       	ret

000015e4 <xQueueReceive>:
    15e4:	9f 92       	push	r9
    15e6:	af 92       	push	r10
    15e8:	bf 92       	push	r11
    15ea:	cf 92       	push	r12
    15ec:	df 92       	push	r13
    15ee:	ef 92       	push	r14
    15f0:	ff 92       	push	r15
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	29 97       	sbiw	r28, 0x09	; 9
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	8c 01       	movw	r16, r24
    160c:	5b 01       	movw	r10, r22
    160e:	2e 83       	std	Y+6, r18	; 0x06
    1610:	3f 83       	std	Y+7, r19	; 0x07
    1612:	48 87       	std	Y+8, r20	; 0x08
    1614:	59 87       	std	Y+9, r21	; 0x09
    1616:	e1 2c       	mov	r14, r1
    1618:	99 24       	eor	r9, r9
    161a:	93 94       	inc	r9
    161c:	6c 01       	movw	r12, r24
    161e:	83 e1       	ldi	r24, 0x13	; 19
    1620:	c8 0e       	add	r12, r24
    1622:	d1 1c       	adc	r13, r1
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	0f 92       	push	r0
    162a:	f8 01       	movw	r30, r16
    162c:	f6 8c       	ldd	r15, Z+30	; 0x1e
    162e:	ff 20       	and	r15, r15
    1630:	99 f0       	breq	.+38     	; 0x1658 <xQueueReceive+0x74>
    1632:	b5 01       	movw	r22, r10
    1634:	c8 01       	movw	r24, r16
    1636:	ea dd       	rcall	.-1068   	; 0x120c <prvCopyDataFromQueue>
    1638:	fa 94       	dec	r15
    163a:	f8 01       	movw	r30, r16
    163c:	f6 8e       	std	Z+30, r15	; 0x1e
    163e:	80 85       	ldd	r24, Z+8	; 0x08
    1640:	88 23       	and	r24, r24
    1642:	31 f0       	breq	.+12     	; 0x1650 <xQueueReceive+0x6c>
    1644:	c8 01       	movw	r24, r16
    1646:	08 96       	adiw	r24, 0x08	; 8
    1648:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    164c:	81 11       	cpse	r24, r1
    164e:	80 db       	rcall	.-2304   	; 0xd50 <vPortYield>
    1650:	0f 90       	pop	r0
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	51 c0       	rjmp	.+162    	; 0x16fa <xQueueReceive+0x116>
    1658:	8e 81       	ldd	r24, Y+6	; 0x06
    165a:	9f 81       	ldd	r25, Y+7	; 0x07
    165c:	a8 85       	ldd	r26, Y+8	; 0x08
    165e:	b9 85       	ldd	r27, Y+9	; 0x09
    1660:	89 2b       	or	r24, r25
    1662:	8a 2b       	or	r24, r26
    1664:	8b 2b       	or	r24, r27
    1666:	21 f4       	brne	.+8      	; 0x1670 <xQueueReceive+0x8c>
    1668:	0f 90       	pop	r0
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	45 c0       	rjmp	.+138    	; 0x16fa <xQueueReceive+0x116>
    1670:	e1 10       	cpse	r14, r1
    1672:	05 c0       	rjmp	.+10     	; 0x167e <xQueueReceive+0x9a>
    1674:	ce 01       	movw	r24, r28
    1676:	01 96       	adiw	r24, 0x01	; 1
    1678:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    167c:	e9 2c       	mov	r14, r9
    167e:	0f 90       	pop	r0
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	0f 92       	push	r0
    168c:	f8 01       	movw	r30, r16
    168e:	81 a1       	ldd	r24, Z+33	; 0x21
    1690:	8f 3f       	cpi	r24, 0xFF	; 255
    1692:	09 f4       	brne	.+2      	; 0x1696 <xQueueReceive+0xb2>
    1694:	11 a2       	std	Z+33, r1	; 0x21
    1696:	f8 01       	movw	r30, r16
    1698:	82 a1       	ldd	r24, Z+34	; 0x22
    169a:	8f 3f       	cpi	r24, 0xFF	; 255
    169c:	09 f4       	brne	.+2      	; 0x16a0 <xQueueReceive+0xbc>
    169e:	12 a2       	std	Z+34, r1	; 0x22
    16a0:	0f 90       	pop	r0
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	be 01       	movw	r22, r28
    16a6:	6a 5f       	subi	r22, 0xFA	; 250
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	ce 01       	movw	r24, r28
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    16b2:	81 11       	cpse	r24, r1
    16b4:	18 c0       	rjmp	.+48     	; 0x16e6 <xQueueReceive+0x102>
    16b6:	c8 01       	movw	r24, r16
    16b8:	3f dd       	rcall	.-1410   	; 0x1138 <prvIsQueueEmpty>
    16ba:	88 23       	and	r24, r24
    16bc:	79 f0       	breq	.+30     	; 0x16dc <xQueueReceive+0xf8>
    16be:	4e 81       	ldd	r20, Y+6	; 0x06
    16c0:	5f 81       	ldd	r21, Y+7	; 0x07
    16c2:	68 85       	ldd	r22, Y+8	; 0x08
    16c4:	79 85       	ldd	r23, Y+9	; 0x09
    16c6:	c6 01       	movw	r24, r12
    16c8:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    16cc:	c8 01       	movw	r24, r16
    16ce:	b8 dd       	rcall	.-1168   	; 0x1240 <prvUnlockQueue>
    16d0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16d4:	81 11       	cpse	r24, r1
    16d6:	a6 cf       	rjmp	.-180    	; 0x1624 <xQueueReceive+0x40>
    16d8:	3b db       	rcall	.-2442   	; 0xd50 <vPortYield>
    16da:	a4 cf       	rjmp	.-184    	; 0x1624 <xQueueReceive+0x40>
    16dc:	c8 01       	movw	r24, r16
    16de:	b0 dd       	rcall	.-1184   	; 0x1240 <prvUnlockQueue>
    16e0:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16e4:	9f cf       	rjmp	.-194    	; 0x1624 <xQueueReceive+0x40>
    16e6:	c8 01       	movw	r24, r16
    16e8:	ab dd       	rcall	.-1194   	; 0x1240 <prvUnlockQueue>
    16ea:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    16ee:	c8 01       	movw	r24, r16
    16f0:	23 dd       	rcall	.-1466   	; 0x1138 <prvIsQueueEmpty>
    16f2:	88 23       	and	r24, r24
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <xQueueReceive+0x114>
    16f6:	96 cf       	rjmp	.-212    	; 0x1624 <xQueueReceive+0x40>
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	29 96       	adiw	r28, 0x09	; 9
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	bf 90       	pop	r11
    1718:	af 90       	pop	r10
    171a:	9f 90       	pop	r9
    171c:	08 95       	ret

0000171e <xQueueSemaphoreTake>:
    171e:	bf 92       	push	r11
    1720:	cf 92       	push	r12
    1722:	df 92       	push	r13
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	29 97       	sbiw	r28, 0x09	; 9
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	8c 01       	movw	r16, r24
    1742:	4e 83       	std	Y+6, r20	; 0x06
    1744:	5f 83       	std	Y+7, r21	; 0x07
    1746:	68 87       	std	Y+8, r22	; 0x08
    1748:	79 87       	std	Y+9, r23	; 0x09
    174a:	b1 2c       	mov	r11, r1
    174c:	d1 2c       	mov	r13, r1
    174e:	cc 24       	eor	r12, r12
    1750:	c3 94       	inc	r12
    1752:	7c 01       	movw	r14, r24
    1754:	83 e1       	ldi	r24, 0x13	; 19
    1756:	e8 0e       	add	r14, r24
    1758:	f1 1c       	adc	r15, r1
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	0f 92       	push	r0
    1760:	d8 01       	movw	r26, r16
    1762:	5e 96       	adiw	r26, 0x1e	; 30
    1764:	8c 91       	ld	r24, X
    1766:	5e 97       	sbiw	r26, 0x1e	; 30
    1768:	88 23       	and	r24, r24
    176a:	e1 f0       	breq	.+56     	; 0x17a4 <xQueueSemaphoreTake+0x86>
    176c:	81 50       	subi	r24, 0x01	; 1
    176e:	5e 96       	adiw	r26, 0x1e	; 30
    1770:	8c 93       	st	X, r24
    1772:	5e 97       	sbiw	r26, 0x1e	; 30
    1774:	8d 91       	ld	r24, X+
    1776:	9c 91       	ld	r25, X
    1778:	89 2b       	or	r24, r25
    177a:	29 f4       	brne	.+10     	; 0x1786 <xQueueSemaphoreTake+0x68>
    177c:	0e 94 b6 1a 	call	0x356c	; 0x356c <pvTaskIncrementMutexHeldCount>
    1780:	f8 01       	movw	r30, r16
    1782:	93 83       	std	Z+3, r25	; 0x03
    1784:	82 83       	std	Z+2, r24	; 0x02
    1786:	d8 01       	movw	r26, r16
    1788:	18 96       	adiw	r26, 0x08	; 8
    178a:	8c 91       	ld	r24, X
    178c:	88 23       	and	r24, r24
    178e:	31 f0       	breq	.+12     	; 0x179c <xQueueSemaphoreTake+0x7e>
    1790:	c8 01       	movw	r24, r16
    1792:	08 96       	adiw	r24, 0x08	; 8
    1794:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    1798:	81 11       	cpse	r24, r1
    179a:	da da       	rcall	.-2636   	; 0xd50 <vPortYield>
    179c:	0f 90       	pop	r0
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	7f c0       	rjmp	.+254    	; 0x18a2 <xQueueSemaphoreTake+0x184>
    17a4:	8e 81       	ldd	r24, Y+6	; 0x06
    17a6:	9f 81       	ldd	r25, Y+7	; 0x07
    17a8:	a8 85       	ldd	r26, Y+8	; 0x08
    17aa:	b9 85       	ldd	r27, Y+9	; 0x09
    17ac:	89 2b       	or	r24, r25
    17ae:	8a 2b       	or	r24, r26
    17b0:	8b 2b       	or	r24, r27
    17b2:	21 f4       	brne	.+8      	; 0x17bc <xQueueSemaphoreTake+0x9e>
    17b4:	0f 90       	pop	r0
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	73 c0       	rjmp	.+230    	; 0x18a2 <xQueueSemaphoreTake+0x184>
    17bc:	d1 10       	cpse	r13, r1
    17be:	05 c0       	rjmp	.+10     	; 0x17ca <xQueueSemaphoreTake+0xac>
    17c0:	ce 01       	movw	r24, r28
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskInternalSetTimeOutState>
    17c8:	dc 2c       	mov	r13, r12
    17ca:	0f 90       	pop	r0
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskSuspendAll>
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	0f 92       	push	r0
    17d8:	f8 01       	movw	r30, r16
    17da:	81 a1       	ldd	r24, Z+33	; 0x21
    17dc:	8f 3f       	cpi	r24, 0xFF	; 255
    17de:	09 f4       	brne	.+2      	; 0x17e2 <xQueueSemaphoreTake+0xc4>
    17e0:	11 a2       	std	Z+33, r1	; 0x21
    17e2:	d8 01       	movw	r26, r16
    17e4:	92 96       	adiw	r26, 0x22	; 34
    17e6:	8c 91       	ld	r24, X
    17e8:	92 97       	sbiw	r26, 0x22	; 34
    17ea:	8f 3f       	cpi	r24, 0xFF	; 255
    17ec:	11 f4       	brne	.+4      	; 0x17f2 <xQueueSemaphoreTake+0xd4>
    17ee:	92 96       	adiw	r26, 0x22	; 34
    17f0:	1c 92       	st	X, r1
    17f2:	0f 90       	pop	r0
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	be 01       	movw	r22, r28
    17f8:	6a 5f       	subi	r22, 0xFA	; 250
    17fa:	7f 4f       	sbci	r23, 0xFF	; 255
    17fc:	ce 01       	movw	r24, r28
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	0e 94 55 19 	call	0x32aa	; 0x32aa <xTaskCheckForTimeOut>
    1804:	81 11       	cpse	r24, r1
    1806:	27 c0       	rjmp	.+78     	; 0x1856 <xQueueSemaphoreTake+0x138>
    1808:	c8 01       	movw	r24, r16
    180a:	96 dc       	rcall	.-1748   	; 0x1138 <prvIsQueueEmpty>
    180c:	88 23       	and	r24, r24
    180e:	f1 f0       	breq	.+60     	; 0x184c <xQueueSemaphoreTake+0x12e>
    1810:	f8 01       	movw	r30, r16
    1812:	80 81       	ld	r24, Z
    1814:	91 81       	ldd	r25, Z+1	; 0x01
    1816:	89 2b       	or	r24, r25
    1818:	51 f4       	brne	.+20     	; 0x182e <xQueueSemaphoreTake+0x110>
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	0f 92       	push	r0
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	93 81       	ldd	r25, Z+3	; 0x03
    1824:	0e 94 bc 19 	call	0x3378	; 0x3378 <xTaskPriorityInherit>
    1828:	b8 2e       	mov	r11, r24
    182a:	0f 90       	pop	r0
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	4e 81       	ldd	r20, Y+6	; 0x06
    1830:	5f 81       	ldd	r21, Y+7	; 0x07
    1832:	68 85       	ldd	r22, Y+8	; 0x08
    1834:	79 85       	ldd	r23, Y+9	; 0x09
    1836:	c7 01       	movw	r24, r14
    1838:	0e 94 cb 18 	call	0x3196	; 0x3196 <vTaskPlaceOnEventList>
    183c:	c8 01       	movw	r24, r16
    183e:	00 dd       	rcall	.-1536   	; 0x1240 <prvUnlockQueue>
    1840:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    1844:	81 11       	cpse	r24, r1
    1846:	89 cf       	rjmp	.-238    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1848:	83 da       	rcall	.-2810   	; 0xd50 <vPortYield>
    184a:	87 cf       	rjmp	.-242    	; 0x175a <xQueueSemaphoreTake+0x3c>
    184c:	c8 01       	movw	r24, r16
    184e:	f8 dc       	rcall	.-1552   	; 0x1240 <prvUnlockQueue>
    1850:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    1854:	82 cf       	rjmp	.-252    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1856:	c8 01       	movw	r24, r16
    1858:	f3 dc       	rcall	.-1562   	; 0x1240 <prvUnlockQueue>
    185a:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <xTaskResumeAll>
    185e:	c8 01       	movw	r24, r16
    1860:	6b dc       	rcall	.-1834   	; 0x1138 <prvIsQueueEmpty>
    1862:	88 23       	and	r24, r24
    1864:	09 f4       	brne	.+2      	; 0x1868 <xQueueSemaphoreTake+0x14a>
    1866:	79 cf       	rjmp	.-270    	; 0x175a <xQueueSemaphoreTake+0x3c>
    1868:	bb 20       	and	r11, r11
    186a:	d1 f0       	breq	.+52     	; 0x18a0 <xQueueSemaphoreTake+0x182>
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	0f 92       	push	r0
    1872:	f8 01       	movw	r30, r16
    1874:	83 89       	ldd	r24, Z+19	; 0x13
    1876:	88 23       	and	r24, r24
    1878:	39 f0       	breq	.+14     	; 0x1888 <xQueueSemaphoreTake+0x16a>
    187a:	02 8c       	ldd	r0, Z+26	; 0x1a
    187c:	f3 8d       	ldd	r31, Z+27	; 0x1b
    187e:	e0 2d       	mov	r30, r0
    1880:	80 81       	ld	r24, Z
    1882:	64 e0       	ldi	r22, 0x04	; 4
    1884:	68 1b       	sub	r22, r24
    1886:	01 c0       	rjmp	.+2      	; 0x188a <xQueueSemaphoreTake+0x16c>
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	d8 01       	movw	r26, r16
    188c:	12 96       	adiw	r26, 0x02	; 2
    188e:	8d 91       	ld	r24, X+
    1890:	9c 91       	ld	r25, X
    1892:	13 97       	sbiw	r26, 0x03	; 3
    1894:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <vTaskPriorityDisinheritAfterTimeout>
    1898:	0f 90       	pop	r0
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <xQueueSemaphoreTake+0x184>
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	29 96       	adiw	r28, 0x09	; 9
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	ff 90       	pop	r15
    18b8:	ef 90       	pop	r14
    18ba:	df 90       	pop	r13
    18bc:	cf 90       	pop	r12
    18be:	bf 90       	pop	r11
    18c0:	08 95       	ret

000018c2 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	0f 92       	push	r0
    18ce:	89 a1       	ldd	r24, Y+33	; 0x21
    18d0:	8f 3f       	cpi	r24, 0xFF	; 255
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <vQueueWaitForMessageRestricted+0x14>
    18d4:	19 a2       	std	Y+33, r1	; 0x21
    18d6:	8a a1       	ldd	r24, Y+34	; 0x22
    18d8:	8f 3f       	cpi	r24, 0xFF	; 255
    18da:	09 f4       	brne	.+2      	; 0x18de <vQueueWaitForMessageRestricted+0x1c>
    18dc:	1a a2       	std	Y+34, r1	; 0x22
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    18e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18e4:	81 11       	cpse	r24, r1
    18e6:	04 c0       	rjmp	.+8      	; 0x18f0 <vQueueWaitForMessageRestricted+0x2e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    18e8:	ce 01       	movw	r24, r28
    18ea:	43 96       	adiw	r24, 0x13	; 19
    18ec:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    18f0:	ce 01       	movw	r24, r28
    18f2:	a6 dc       	rcall	.-1716   	; 0x1240 <prvUnlockQueue>
	}
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	08 95       	ret

000018fa <xSerialxPrint>:

		default:
			break;
	}
	return 0;
}
    18fa:	4f 92       	push	r4
    18fc:	5f 92       	push	r5
    18fe:	6f 92       	push	r6
    1900:	7f 92       	push	r7
    1902:	8f 92       	push	r8
    1904:	9f 92       	push	r9
    1906:	af 92       	push	r10
    1908:	bf 92       	push	r11
    190a:	cf 92       	push	r12
    190c:	df 92       	push	r13
    190e:	ef 92       	push	r14
    1910:	ff 92       	push	r15
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	ec 01       	movw	r28, r24
    191c:	fb 01       	movw	r30, r22
    191e:	01 90       	ld	r0, Z+
    1920:	00 20       	and	r0, r0
    1922:	e9 f7       	brne	.-6      	; 0x191e <xSerialxPrint+0x24>
    1924:	4b 01       	movw	r8, r22
    1926:	9f 01       	movw	r18, r30
    1928:	21 50       	subi	r18, 0x01	; 1
    192a:	31 09       	sbc	r19, r1
    192c:	0f 2e       	mov	r0, r31
    192e:	f1 e3       	ldi	r31, 0x31	; 49
    1930:	ef 2e       	mov	r14, r31
    1932:	ff 24       	eor	r15, r15
    1934:	f3 94       	inc	r15
    1936:	f0 2d       	mov	r31, r0
    1938:	01 ed       	ldi	r16, 0xD1	; 209
    193a:	10 e0       	ldi	r17, 0x00	; 0
    193c:	69 ec       	ldi	r22, 0xC9	; 201
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	41 ec       	ldi	r20, 0xC1	; 193
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	5c 01       	movw	r10, r24
    1946:	8d e0       	ldi	r24, 0x0D	; 13
    1948:	a8 0e       	add	r10, r24
    194a:	b1 1c       	adc	r11, r1
    194c:	78 c0       	rjmp	.+240    	; 0x1a3e <xSerialxPrint+0x144>
    194e:	d4 01       	movw	r26, r8
    1950:	dd 90       	ld	r13, X+
    1952:	4d 01       	movw	r8, r26
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	0f 92       	push	r0
    195a:	ed 85       	ldd	r30, Y+13	; 0x0d
    195c:	fe 85       	ldd	r31, Y+14	; 0x0e
    195e:	0f 90       	pop	r0
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	8f 89       	ldd	r24, Y+23	; 0x17
    1964:	98 8d       	ldd	r25, Y+24	; 0x18
    1966:	e8 17       	cp	r30, r24
    1968:	f9 07       	cpc	r31, r25
    196a:	f1 f0       	breq	.+60     	; 0x19a8 <xSerialxPrint+0xae>
    196c:	f5 01       	movw	r30, r10
    196e:	82 81       	ldd	r24, Z+2	; 0x02
    1970:	93 81       	ldd	r25, Z+3	; 0x03
    1972:	dc 01       	movw	r26, r24
    1974:	dc 92       	st	X, r13
    1976:	82 81       	ldd	r24, Z+2	; 0x02
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	93 83       	std	Z+3, r25	; 0x03
    197e:	82 83       	std	Z+2, r24	; 0x02
    1980:	c0 84       	ldd	r12, Z+8	; 0x08
    1982:	d1 84       	ldd	r13, Z+9	; 0x09
    1984:	8c 15       	cp	r24, r12
    1986:	9d 05       	cpc	r25, r13
    1988:	21 f4       	brne	.+8      	; 0x1992 <xSerialxPrint+0x98>
    198a:	86 81       	ldd	r24, Z+6	; 0x06
    198c:	97 81       	ldd	r25, Z+7	; 0x07
    198e:	93 83       	std	Z+3, r25	; 0x03
    1990:	82 83       	std	Z+2, r24	; 0x02
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	0f 92       	push	r0
    1998:	80 81       	ld	r24, Z
    199a:	91 81       	ldd	r25, Z+1	; 0x01
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	80 83       	st	Z, r24
    19a2:	0f 90       	pop	r0
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	2b c0       	rjmp	.+86     	; 0x19fe <xSerialxPrint+0x104>
    19a8:	00 00       	nop
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	0f 92       	push	r0
    19b0:	ed 85       	ldd	r30, Y+13	; 0x0d
    19b2:	fe 85       	ldd	r31, Y+14	; 0x0e
    19b4:	0f 90       	pop	r0
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ba:	98 8d       	ldd	r25, Y+24	; 0x18
    19bc:	e8 17       	cp	r30, r24
    19be:	f9 07       	cpc	r31, r25
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <xSerialxPrint+0xca>
    19c2:	3d c0       	rjmp	.+122    	; 0x1a3e <xSerialxPrint+0x144>
    19c4:	f5 01       	movw	r30, r10
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	dc 01       	movw	r26, r24
    19cc:	dc 92       	st	X, r13
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	93 83       	std	Z+3, r25	; 0x03
    19d6:	82 83       	std	Z+2, r24	; 0x02
    19d8:	c0 84       	ldd	r12, Z+8	; 0x08
    19da:	d1 84       	ldd	r13, Z+9	; 0x09
    19dc:	8c 15       	cp	r24, r12
    19de:	9d 05       	cpc	r25, r13
    19e0:	21 f4       	brne	.+8      	; 0x19ea <xSerialxPrint+0xf0>
    19e2:	86 81       	ldd	r24, Z+6	; 0x06
    19e4:	97 81       	ldd	r25, Z+7	; 0x07
    19e6:	93 83       	std	Z+3, r25	; 0x03
    19e8:	82 83       	std	Z+2, r24	; 0x02
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	0f 92       	push	r0
    19f0:	80 81       	ld	r24, Z
    19f2:	91 81       	ldd	r25, Z+1	; 0x01
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	80 83       	st	Z, r24
    19fa:	0f 90       	pop	r0
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	48 80       	ld	r4, Y
    1a00:	51 2c       	mov	r5, r1
    1a02:	b8 e0       	ldi	r27, 0x08	; 8
    1a04:	4b 16       	cp	r4, r27
    1a06:	51 04       	cpc	r5, r1
    1a08:	d0 f4       	brcc	.+52     	; 0x1a3e <xSerialxPrint+0x144>
    1a0a:	f2 01       	movw	r30, r4
    1a0c:	88 27       	eor	r24, r24
    1a0e:	ee 58       	subi	r30, 0x8E	; 142
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	8f 4f       	sbci	r24, 0xFF	; 255
    1a14:	0c 94 8f 58 	jmp	0xb11e	; 0xb11e <__tablejump2__>
    1a18:	fa 01       	movw	r30, r20
    1a1a:	80 81       	ld	r24, Z
    1a1c:	80 62       	ori	r24, 0x20	; 32
    1a1e:	80 83       	st	Z, r24
    1a20:	0e c0       	rjmp	.+28     	; 0x1a3e <xSerialxPrint+0x144>
    1a22:	db 01       	movw	r26, r22
    1a24:	8c 91       	ld	r24, X
    1a26:	80 62       	ori	r24, 0x20	; 32
    1a28:	8c 93       	st	X, r24
    1a2a:	09 c0       	rjmp	.+18     	; 0x1a3e <xSerialxPrint+0x144>
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	80 81       	ld	r24, Z
    1a30:	80 62       	ori	r24, 0x20	; 32
    1a32:	80 83       	st	Z, r24
    1a34:	04 c0       	rjmp	.+8      	; 0x1a3e <xSerialxPrint+0x144>
    1a36:	d7 01       	movw	r26, r14
    1a38:	8c 91       	ld	r24, X
    1a3a:	80 62       	ori	r24, 0x20	; 32
    1a3c:	8c 93       	st	X, r24
    1a3e:	82 16       	cp	r8, r18
    1a40:	93 06       	cpc	r9, r19
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <xSerialxPrint+0x14c>
    1a44:	84 cf       	rjmp	.-248    	; 0x194e <xSerialxPrint+0x54>
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	ff 90       	pop	r15
    1a50:	ef 90       	pop	r14
    1a52:	df 90       	pop	r13
    1a54:	cf 90       	pop	r12
    1a56:	bf 90       	pop	r11
    1a58:	af 90       	pop	r10
    1a5a:	9f 90       	pop	r9
    1a5c:	8f 90       	pop	r8
    1a5e:	7f 90       	pop	r7
    1a60:	6f 90       	pop	r6
    1a62:	5f 90       	pop	r5
    1a64:	4f 90       	pop	r4
    1a66:	08 95       	ret

00001a68 <xSerialxPrintf>:
    1a68:	0f 93       	push	r16
    1a6a:	1f 93       	push	r17
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	08 85       	ldd	r16, Y+8	; 0x08
    1a76:	19 85       	ldd	r17, Y+9	; 0x09
    1a78:	f8 01       	movw	r30, r16
    1a7a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	29 f4       	brne	.+10     	; 0x1a8a <xSerialxPrintf+0x22>
    1a80:	67 d9       	rcall	.-3378   	; 0xd50 <vPortYield>
    1a82:	f8 01       	movw	r30, r16
    1a84:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a86:	81 30       	cpi	r24, 0x01	; 1
    1a88:	d9 f3       	breq	.-10     	; 0x1a80 <xSerialxPrintf+0x18>
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	85 8f       	std	Z+29, r24	; 0x1d
    1a90:	63 8d       	ldd	r22, Z+27	; 0x1b
    1a92:	74 8d       	ldd	r23, Z+28	; 0x1c
    1a94:	9e 01       	movw	r18, r28
    1a96:	24 5f       	subi	r18, 0xF4	; 244
    1a98:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9a:	4a 85       	ldd	r20, Y+10	; 0x0a
    1a9c:	5b 85       	ldd	r21, Y+11	; 0x0b
    1a9e:	81 8d       	ldd	r24, Z+25	; 0x19
    1aa0:	92 8d       	ldd	r25, Z+26	; 0x1a
    1aa2:	0e 94 01 5b 	call	0xb602	; 0xb602 <vsnprintf>
    1aa6:	f8 01       	movw	r30, r16
    1aa8:	61 8d       	ldd	r22, Z+25	; 0x19
    1aaa:	72 8d       	ldd	r23, Z+26	; 0x1a
    1aac:	c8 01       	movw	r24, r16
    1aae:	25 df       	rcall	.-438    	; 0x18fa <xSerialxPrint>
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	15 8e       	std	Z+29, r1	; 0x1d
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	08 95       	ret

00001abe <xSerialRxFlush>:
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	4c 91       	ld	r20, X
    1ac6:	50 e0       	ldi	r21, 0x00	; 0
    1ac8:	48 30       	cpi	r20, 0x08	; 8
    1aca:	51 05       	cpc	r21, r1
    1acc:	e8 f5       	brcc	.+122    	; 0x1b48 <xSerialRxFlush+0x8a>
    1ace:	fa 01       	movw	r30, r20
    1ad0:	88 27       	eor	r24, r24
    1ad2:	e6 58       	subi	r30, 0x86	; 134
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad8:	0c 94 8f 58 	jmp	0xb11e	; 0xb11e <__tablejump2__>
    1adc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1ae0:	88 23       	and	r24, r24
    1ae2:	54 f1       	brlt	.+84     	; 0x1b38 <xSerialRxFlush+0x7a>
    1ae4:	31 c0       	rjmp	.+98     	; 0x1b48 <xSerialRxFlush+0x8a>
    1ae6:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1aea:	88 23       	and	r24, r24
    1aec:	e4 f0       	brlt	.+56     	; 0x1b26 <xSerialRxFlush+0x68>
    1aee:	2c c0       	rjmp	.+88     	; 0x1b48 <xSerialRxFlush+0x8a>
    1af0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1af4:	88 23       	and	r24, r24
    1af6:	74 f0       	brlt	.+28     	; 0x1b14 <xSerialRxFlush+0x56>
    1af8:	27 c0       	rjmp	.+78     	; 0x1b48 <xSerialRxFlush+0x8a>
    1afa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1afe:	88 23       	and	r24, r24
    1b00:	1c f5       	brge	.+70     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b02:	c6 ec       	ldi	r28, 0xC6	; 198
    1b04:	d0 e0       	ldi	r29, 0x00	; 0
    1b06:	e0 ec       	ldi	r30, 0xC0	; 192
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	88 81       	ld	r24, Y
    1b0c:	80 81       	ld	r24, Z
    1b0e:	88 23       	and	r24, r24
    1b10:	e4 f3       	brlt	.-8      	; 0x1b0a <xSerialRxFlush+0x4c>
    1b12:	1a c0       	rjmp	.+52     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b14:	ce ec       	ldi	r28, 0xCE	; 206
    1b16:	d0 e0       	ldi	r29, 0x00	; 0
    1b18:	e8 ec       	ldi	r30, 0xC8	; 200
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	88 81       	ld	r24, Y
    1b1e:	80 81       	ld	r24, Z
    1b20:	88 23       	and	r24, r24
    1b22:	e4 f3       	brlt	.-8      	; 0x1b1c <xSerialRxFlush+0x5e>
    1b24:	11 c0       	rjmp	.+34     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b26:	c6 ed       	ldi	r28, 0xD6	; 214
    1b28:	d0 e0       	ldi	r29, 0x00	; 0
    1b2a:	e0 ed       	ldi	r30, 0xD0	; 208
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	88 81       	ld	r24, Y
    1b30:	80 81       	ld	r24, Z
    1b32:	88 23       	and	r24, r24
    1b34:	e4 f3       	brlt	.-8      	; 0x1b2e <xSerialRxFlush+0x70>
    1b36:	08 c0       	rjmp	.+16     	; 0x1b48 <xSerialRxFlush+0x8a>
    1b38:	c6 e3       	ldi	r28, 0x36	; 54
    1b3a:	d1 e0       	ldi	r29, 0x01	; 1
    1b3c:	e0 e3       	ldi	r30, 0x30	; 48
    1b3e:	f1 e0       	ldi	r31, 0x01	; 1
    1b40:	88 81       	ld	r24, Y
    1b42:	80 81       	ld	r24, Z
    1b44:	88 23       	and	r24, r24
    1b46:	e4 f3       	brlt	.-8      	; 0x1b40 <xSerialRxFlush+0x82>
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	0f 92       	push	r0
    1b4e:	12 96       	adiw	r26, 0x02	; 2
    1b50:	1c 92       	st	X, r1
    1b52:	1e 92       	st	-X, r1
    1b54:	11 97       	sbiw	r26, 0x01	; 1
    1b56:	17 96       	adiw	r26, 0x07	; 7
    1b58:	8d 91       	ld	r24, X+
    1b5a:	9c 91       	ld	r25, X
    1b5c:	18 97       	sbiw	r26, 0x08	; 8
    1b5e:	14 96       	adiw	r26, 0x04	; 4
    1b60:	9c 93       	st	X, r25
    1b62:	8e 93       	st	-X, r24
    1b64:	13 97       	sbiw	r26, 0x03	; 3
    1b66:	16 96       	adiw	r26, 0x06	; 6
    1b68:	9c 93       	st	X, r25
    1b6a:	8e 93       	st	-X, r24
    1b6c:	15 97       	sbiw	r26, 0x05	; 5
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	08 95       	ret

00001b78 <xSerialAvailableChar>:
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	0f 92       	push	r0
    1b7e:	fc 01       	movw	r30, r24
    1b80:	81 81       	ldd	r24, Z+1	; 0x01
    1b82:	92 81       	ldd	r25, Z+2	; 0x02
    1b84:	0f 90       	pop	r0
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	08 95       	ret

00001b8a <xSerialPutChar>:
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	dc 01       	movw	r26, r24
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	0f 92       	push	r0
    1b96:	1d 96       	adiw	r26, 0x0d	; 13
    1b98:	2d 91       	ld	r18, X+
    1b9a:	3c 91       	ld	r19, X
    1b9c:	1e 97       	sbiw	r26, 0x0e	; 14
    1b9e:	0f 90       	pop	r0
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	57 96       	adiw	r26, 0x17	; 23
    1ba4:	8d 91       	ld	r24, X+
    1ba6:	9c 91       	ld	r25, X
    1ba8:	58 97       	sbiw	r26, 0x18	; 24
    1baa:	28 17       	cp	r18, r24
    1bac:	39 07       	cpc	r19, r25
    1bae:	f1 f0       	breq	.+60     	; 0x1bec <xSerialPutChar+0x62>
    1bb0:	fd 01       	movw	r30, r26
    1bb2:	3d 96       	adiw	r30, 0x0d	; 13
    1bb4:	c2 81       	ldd	r28, Z+2	; 0x02
    1bb6:	d3 81       	ldd	r29, Z+3	; 0x03
    1bb8:	68 83       	st	Y, r22
    1bba:	82 81       	ldd	r24, Z+2	; 0x02
    1bbc:	93 81       	ldd	r25, Z+3	; 0x03
    1bbe:	01 96       	adiw	r24, 0x01	; 1
    1bc0:	93 83       	std	Z+3, r25	; 0x03
    1bc2:	82 83       	std	Z+2, r24	; 0x02
    1bc4:	20 85       	ldd	r18, Z+8	; 0x08
    1bc6:	31 85       	ldd	r19, Z+9	; 0x09
    1bc8:	82 17       	cp	r24, r18
    1bca:	93 07       	cpc	r25, r19
    1bcc:	21 f4       	brne	.+8      	; 0x1bd6 <xSerialPutChar+0x4c>
    1bce:	86 81       	ldd	r24, Z+6	; 0x06
    1bd0:	97 81       	ldd	r25, Z+7	; 0x07
    1bd2:	93 83       	std	Z+3, r25	; 0x03
    1bd4:	82 83       	std	Z+2, r24	; 0x02
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	0f 92       	push	r0
    1bdc:	80 81       	ld	r24, Z
    1bde:	91 81       	ldd	r25, Z+1	; 0x01
    1be0:	01 96       	adiw	r24, 0x01	; 1
    1be2:	91 83       	std	Z+1, r25	; 0x01
    1be4:	80 83       	st	Z, r24
    1be6:	0f 90       	pop	r0
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	2f c0       	rjmp	.+94     	; 0x1c4a <xSerialPutChar+0xc0>
    1bec:	00 00       	nop
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	0f 92       	push	r0
    1bf4:	1d 96       	adiw	r26, 0x0d	; 13
    1bf6:	2d 91       	ld	r18, X+
    1bf8:	3c 91       	ld	r19, X
    1bfa:	1e 97       	sbiw	r26, 0x0e	; 14
    1bfc:	0f 90       	pop	r0
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	57 96       	adiw	r26, 0x17	; 23
    1c02:	8d 91       	ld	r24, X+
    1c04:	9c 91       	ld	r25, X
    1c06:	58 97       	sbiw	r26, 0x18	; 24
    1c08:	28 17       	cp	r18, r24
    1c0a:	39 07       	cpc	r19, r25
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <xSerialPutChar+0x86>
    1c0e:	45 c0       	rjmp	.+138    	; 0x1c9a <xSerialPutChar+0x110>
    1c10:	fd 01       	movw	r30, r26
    1c12:	3d 96       	adiw	r30, 0x0d	; 13
    1c14:	c2 81       	ldd	r28, Z+2	; 0x02
    1c16:	d3 81       	ldd	r29, Z+3	; 0x03
    1c18:	68 83       	st	Y, r22
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	01 96       	adiw	r24, 0x01	; 1
    1c20:	93 83       	std	Z+3, r25	; 0x03
    1c22:	82 83       	std	Z+2, r24	; 0x02
    1c24:	20 85       	ldd	r18, Z+8	; 0x08
    1c26:	31 85       	ldd	r19, Z+9	; 0x09
    1c28:	82 17       	cp	r24, r18
    1c2a:	93 07       	cpc	r25, r19
    1c2c:	21 f4       	brne	.+8      	; 0x1c36 <xSerialPutChar+0xac>
    1c2e:	86 81       	ldd	r24, Z+6	; 0x06
    1c30:	97 81       	ldd	r25, Z+7	; 0x07
    1c32:	93 83       	std	Z+3, r25	; 0x03
    1c34:	82 83       	std	Z+2, r24	; 0x02
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	0f 92       	push	r0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	91 81       	ldd	r25, Z+1	; 0x01
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	80 83       	st	Z, r24
    1c46:	0f 90       	pop	r0
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	8c 91       	ld	r24, X
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	88 30       	cpi	r24, 0x08	; 8
    1c50:	91 05       	cpc	r25, r1
    1c52:	28 f5       	brcc	.+74     	; 0x1c9e <xSerialPutChar+0x114>
    1c54:	fc 01       	movw	r30, r24
    1c56:	88 27       	eor	r24, r24
    1c58:	ee 57       	subi	r30, 0x7E	; 126
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5e:	0c 94 8f 58 	jmp	0xb11e	; 0xb11e <__tablejump2__>
    1c62:	e1 ec       	ldi	r30, 0xC1	; 193
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	80 62       	ori	r24, 0x20	; 32
    1c6a:	80 83       	st	Z, r24
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	18 c0       	rjmp	.+48     	; 0x1ca0 <xSerialPutChar+0x116>
    1c70:	e9 ec       	ldi	r30, 0xC9	; 201
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	80 62       	ori	r24, 0x20	; 32
    1c78:	80 83       	st	Z, r24
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	11 c0       	rjmp	.+34     	; 0x1ca0 <xSerialPutChar+0x116>
    1c7e:	e1 ed       	ldi	r30, 0xD1	; 209
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	80 62       	ori	r24, 0x20	; 32
    1c86:	80 83       	st	Z, r24
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	0a c0       	rjmp	.+20     	; 0x1ca0 <xSerialPutChar+0x116>
    1c8c:	e1 e3       	ldi	r30, 0x31	; 49
    1c8e:	f1 e0       	ldi	r31, 0x01	; 1
    1c90:	80 81       	ld	r24, Z
    1c92:	80 62       	ori	r24, 0x20	; 32
    1c94:	80 83       	st	Z, r24
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	03 c0       	rjmp	.+6      	; 0x1ca0 <xSerialPutChar+0x116>
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	01 c0       	rjmp	.+2      	; 0x1ca0 <xSerialPutChar+0x116>
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	08 95       	ret

00001ca6 <xSerialPortInitMinimal>:
    1ca6:	7f 92       	push	r7
    1ca8:	8f 92       	push	r8
    1caa:	9f 92       	push	r9
    1cac:	af 92       	push	r10
    1cae:	bf 92       	push	r11
    1cb0:	cf 92       	push	r12
    1cb2:	df 92       	push	r13
    1cb4:	ef 92       	push	r14
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	a2 97       	sbiw	r28, 0x22	; 34
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	6c 01       	movw	r12, r24
    1cd2:	76 2e       	mov	r7, r22
    1cd4:	49 01       	movw	r8, r18
    1cd6:	5a 01       	movw	r10, r20
    1cd8:	c7 01       	movw	r24, r14
    1cda:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	a9 f0       	breq	.+42     	; 0x1d0c <xSerialPortInitMinimal+0x66>
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	32 96       	adiw	r30, 0x02	; 2
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	0f 92       	push	r0
    1cec:	11 82       	std	Z+1, r1	; 0x01
    1cee:	10 82       	st	Z, r1
    1cf0:	93 83       	std	Z+3, r25	; 0x03
    1cf2:	82 83       	std	Z+2, r24	; 0x02
    1cf4:	95 83       	std	Z+5, r25	; 0x05
    1cf6:	84 83       	std	Z+4, r24	; 0x04
    1cf8:	97 83       	std	Z+7, r25	; 0x07
    1cfa:	86 83       	std	Z+6, r24	; 0x06
    1cfc:	8e 0d       	add	r24, r14
    1cfe:	9f 1d       	adc	r25, r15
    1d00:	91 87       	std	Z+9, r25	; 0x09
    1d02:	80 87       	std	Z+8, r24	; 0x08
    1d04:	f3 86       	std	Z+11, r15	; 0x0b
    1d06:	e2 86       	std	Z+10, r14	; 0x0a
    1d08:	0f 90       	pop	r0
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	c8 01       	movw	r24, r16
    1d0e:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	a9 f0       	breq	.+42     	; 0x1d40 <xSerialPortInitMinimal+0x9a>
    1d16:	fe 01       	movw	r30, r28
    1d18:	3e 96       	adiw	r30, 0x0e	; 14
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	0f 92       	push	r0
    1d20:	11 82       	std	Z+1, r1	; 0x01
    1d22:	10 82       	st	Z, r1
    1d24:	93 83       	std	Z+3, r25	; 0x03
    1d26:	82 83       	std	Z+2, r24	; 0x02
    1d28:	95 83       	std	Z+5, r25	; 0x05
    1d2a:	84 83       	std	Z+4, r24	; 0x04
    1d2c:	97 83       	std	Z+7, r25	; 0x07
    1d2e:	86 83       	std	Z+6, r24	; 0x06
    1d30:	80 0f       	add	r24, r16
    1d32:	91 1f       	adc	r25, r17
    1d34:	91 87       	std	Z+9, r25	; 0x09
    1d36:	80 87       	std	Z+8, r24	; 0x08
    1d38:	13 87       	std	Z+11, r17	; 0x0b
    1d3a:	02 87       	std	Z+10, r16	; 0x0a
    1d3c:	0f 90       	pop	r0
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	c8 01       	movw	r24, r16
    1d42:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    1d46:	9b 8f       	std	Y+27, r25	; 0x1b
    1d48:	8a 8f       	std	Y+26, r24	; 0x1a
    1d4a:	79 82       	std	Y+1, r7	; 0x01
    1d4c:	1d 8f       	std	Y+29, r17	; 0x1d
    1d4e:	0c 8f       	std	Y+28, r16	; 0x1c
    1d50:	1e 8e       	std	Y+30, r1	; 0x1e
    1d52:	8f 8e       	std	Y+31, r8	; 0x1f
    1d54:	98 a2       	std	Y+32, r9	; 0x20
    1d56:	a9 a2       	std	Y+33, r10	; 0x21
    1d58:	ba a2       	std	Y+34, r11	; 0x22
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	f8 94       	cli
    1d5e:	0f 92       	push	r0
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	88 30       	cpi	r24, 0x08	; 8
    1d66:	91 05       	cpc	r25, r1
    1d68:	08 f0       	brcs	.+2      	; 0x1d6c <xSerialPortInitMinimal+0xc6>
    1d6a:	ba c1       	rjmp	.+884    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	88 27       	eor	r24, r24
    1d70:	e6 57       	subi	r30, 0x76	; 118
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	8f 4f       	sbci	r24, 0xFF	; 255
    1d76:	0c 94 8f 58 	jmp	0xb11e	; 0xb11e <__tablejump2__>
    1d7a:	d5 01       	movw	r26, r10
    1d7c:	c4 01       	movw	r24, r8
    1d7e:	97 5f       	subi	r25, 0xF7	; 247
    1d80:	a2 4c       	sbci	r26, 0xC2	; 194
    1d82:	bf 4f       	sbci	r27, 0xFF	; 255
    1d84:	bc 01       	movw	r22, r24
    1d86:	cd 01       	movw	r24, r26
    1d88:	66 0f       	add	r22, r22
    1d8a:	77 1f       	adc	r23, r23
    1d8c:	88 1f       	adc	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	66 0f       	add	r22, r22
    1d92:	77 1f       	adc	r23, r23
    1d94:	88 1f       	adc	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	95 01       	movw	r18, r10
    1d9a:	84 01       	movw	r16, r8
    1d9c:	00 0f       	add	r16, r16
    1d9e:	11 1f       	adc	r17, r17
    1da0:	22 1f       	adc	r18, r18
    1da2:	33 1f       	adc	r19, r19
    1da4:	00 0f       	add	r16, r16
    1da6:	11 1f       	adc	r17, r17
    1da8:	22 1f       	adc	r18, r18
    1daa:	33 1f       	adc	r19, r19
    1dac:	a9 01       	movw	r20, r18
    1dae:	98 01       	movw	r18, r16
    1db0:	22 0f       	add	r18, r18
    1db2:	33 1f       	adc	r19, r19
    1db4:	44 1f       	adc	r20, r20
    1db6:	55 1f       	adc	r21, r21
    1db8:	0e 94 6d 58 	call	0xb0da	; 0xb0da <__udivmodsi4>
    1dbc:	21 50       	subi	r18, 0x01	; 1
    1dbe:	31 09       	sbc	r19, r1
    1dc0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1dc4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1dce:	88 e9       	ldi	r24, 0x98	; 152
    1dd0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1dd4:	8e e0       	ldi	r24, 0x0E	; 14
    1dd6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1dda:	82 c1       	rjmp	.+772    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1ddc:	04 ec       	ldi	r16, 0xC4	; 196
    1dde:	10 e0       	ldi	r17, 0x00	; 0
    1de0:	f8 01       	movw	r30, r16
    1de2:	11 82       	std	Z+1, r1	; 0x01
    1de4:	10 82       	st	Z, r1
    1de6:	6a 9a       	sbi	0x0d, 2	; 13
    1de8:	80 ec       	ldi	r24, 0xC0	; 192
    1dea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1dee:	88 e9       	ldi	r24, 0x98	; 152
    1df0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1df4:	d5 01       	movw	r26, r10
    1df6:	c4 01       	movw	r24, r8
    1df8:	80 58       	subi	r24, 0x80	; 128
    1dfa:	9b 47       	sbci	r25, 0x7B	; 123
    1dfc:	a1 4e       	sbci	r26, 0xE1	; 225
    1dfe:	bf 4f       	sbci	r27, 0xFF	; 255
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	aa 1f       	adc	r26, r26
    1e06:	bb 1f       	adc	r27, r27
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	aa 1f       	adc	r26, r26
    1e0e:	bb 1f       	adc	r27, r27
    1e10:	bc 01       	movw	r22, r24
    1e12:	cd 01       	movw	r24, r26
    1e14:	66 0f       	add	r22, r22
    1e16:	77 1f       	adc	r23, r23
    1e18:	88 1f       	adc	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	88 0c       	add	r8, r8
    1e1e:	99 1c       	adc	r9, r9
    1e20:	aa 1c       	adc	r10, r10
    1e22:	bb 1c       	adc	r11, r11
    1e24:	88 0c       	add	r8, r8
    1e26:	99 1c       	adc	r9, r9
    1e28:	aa 1c       	adc	r10, r10
    1e2a:	bb 1c       	adc	r11, r11
    1e2c:	a5 01       	movw	r20, r10
    1e2e:	94 01       	movw	r18, r8
    1e30:	22 0f       	add	r18, r18
    1e32:	33 1f       	adc	r19, r19
    1e34:	44 1f       	adc	r20, r20
    1e36:	55 1f       	adc	r21, r21
    1e38:	22 0f       	add	r18, r18
    1e3a:	33 1f       	adc	r19, r19
    1e3c:	44 1f       	adc	r20, r20
    1e3e:	55 1f       	adc	r21, r21
    1e40:	0e 94 6d 58 	call	0xb0da	; 0xb0da <__udivmodsi4>
    1e44:	21 50       	subi	r18, 0x01	; 1
    1e46:	31 09       	sbc	r19, r1
    1e48:	f8 01       	movw	r30, r16
    1e4a:	31 83       	std	Z+1, r19	; 0x01
    1e4c:	20 83       	st	Z, r18
    1e4e:	48 c1       	rjmp	.+656    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1e50:	d5 01       	movw	r26, r10
    1e52:	c4 01       	movw	r24, r8
    1e54:	97 5f       	subi	r25, 0xF7	; 247
    1e56:	a2 4c       	sbci	r26, 0xC2	; 194
    1e58:	bf 4f       	sbci	r27, 0xFF	; 255
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	66 0f       	add	r22, r22
    1e60:	77 1f       	adc	r23, r23
    1e62:	88 1f       	adc	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	66 0f       	add	r22, r22
    1e68:	77 1f       	adc	r23, r23
    1e6a:	88 1f       	adc	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	95 01       	movw	r18, r10
    1e70:	84 01       	movw	r16, r8
    1e72:	00 0f       	add	r16, r16
    1e74:	11 1f       	adc	r17, r17
    1e76:	22 1f       	adc	r18, r18
    1e78:	33 1f       	adc	r19, r19
    1e7a:	00 0f       	add	r16, r16
    1e7c:	11 1f       	adc	r17, r17
    1e7e:	22 1f       	adc	r18, r18
    1e80:	33 1f       	adc	r19, r19
    1e82:	a9 01       	movw	r20, r18
    1e84:	98 01       	movw	r18, r16
    1e86:	22 0f       	add	r18, r18
    1e88:	33 1f       	adc	r19, r19
    1e8a:	44 1f       	adc	r20, r20
    1e8c:	55 1f       	adc	r21, r21
    1e8e:	0e 94 6d 58 	call	0xb0da	; 0xb0da <__udivmodsi4>
    1e92:	21 50       	subi	r18, 0x01	; 1
    1e94:	31 09       	sbc	r19, r1
    1e96:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    1e9a:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    1e9e:	82 e0       	ldi	r24, 0x02	; 2
    1ea0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1ea4:	88 e9       	ldi	r24, 0x98	; 152
    1ea6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1eaa:	8e e0       	ldi	r24, 0x0E	; 14
    1eac:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1eb0:	17 c1       	rjmp	.+558    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1eb2:	0c ec       	ldi	r16, 0xCC	; 204
    1eb4:	10 e0       	ldi	r17, 0x00	; 0
    1eb6:	f8 01       	movw	r30, r16
    1eb8:	11 82       	std	Z+1, r1	; 0x01
    1eba:	10 82       	st	Z, r1
    1ebc:	55 9a       	sbi	0x0a, 5	; 10
    1ebe:	80 ec       	ldi	r24, 0xC0	; 192
    1ec0:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1ec4:	88 e9       	ldi	r24, 0x98	; 152
    1ec6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1eca:	d5 01       	movw	r26, r10
    1ecc:	c4 01       	movw	r24, r8
    1ece:	80 58       	subi	r24, 0x80	; 128
    1ed0:	9b 47       	sbci	r25, 0x7B	; 123
    1ed2:	a1 4e       	sbci	r26, 0xE1	; 225
    1ed4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	aa 1f       	adc	r26, r26
    1edc:	bb 1f       	adc	r27, r27
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	aa 1f       	adc	r26, r26
    1ee4:	bb 1f       	adc	r27, r27
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	66 0f       	add	r22, r22
    1eec:	77 1f       	adc	r23, r23
    1eee:	88 1f       	adc	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	88 0c       	add	r8, r8
    1ef4:	99 1c       	adc	r9, r9
    1ef6:	aa 1c       	adc	r10, r10
    1ef8:	bb 1c       	adc	r11, r11
    1efa:	88 0c       	add	r8, r8
    1efc:	99 1c       	adc	r9, r9
    1efe:	aa 1c       	adc	r10, r10
    1f00:	bb 1c       	adc	r11, r11
    1f02:	a5 01       	movw	r20, r10
    1f04:	94 01       	movw	r18, r8
    1f06:	22 0f       	add	r18, r18
    1f08:	33 1f       	adc	r19, r19
    1f0a:	44 1f       	adc	r20, r20
    1f0c:	55 1f       	adc	r21, r21
    1f0e:	22 0f       	add	r18, r18
    1f10:	33 1f       	adc	r19, r19
    1f12:	44 1f       	adc	r20, r20
    1f14:	55 1f       	adc	r21, r21
    1f16:	0e 94 6d 58 	call	0xb0da	; 0xb0da <__udivmodsi4>
    1f1a:	21 50       	subi	r18, 0x01	; 1
    1f1c:	31 09       	sbc	r19, r1
    1f1e:	f8 01       	movw	r30, r16
    1f20:	31 83       	std	Z+1, r19	; 0x01
    1f22:	20 83       	st	Z, r18
    1f24:	dd c0       	rjmp	.+442    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1f26:	d5 01       	movw	r26, r10
    1f28:	c4 01       	movw	r24, r8
    1f2a:	97 5f       	subi	r25, 0xF7	; 247
    1f2c:	a2 4c       	sbci	r26, 0xC2	; 194
    1f2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	66 0f       	add	r22, r22
    1f36:	77 1f       	adc	r23, r23
    1f38:	88 1f       	adc	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	66 0f       	add	r22, r22
    1f3e:	77 1f       	adc	r23, r23
    1f40:	88 1f       	adc	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	95 01       	movw	r18, r10
    1f46:	84 01       	movw	r16, r8
    1f48:	00 0f       	add	r16, r16
    1f4a:	11 1f       	adc	r17, r17
    1f4c:	22 1f       	adc	r18, r18
    1f4e:	33 1f       	adc	r19, r19
    1f50:	00 0f       	add	r16, r16
    1f52:	11 1f       	adc	r17, r17
    1f54:	22 1f       	adc	r18, r18
    1f56:	33 1f       	adc	r19, r19
    1f58:	a9 01       	movw	r20, r18
    1f5a:	98 01       	movw	r18, r16
    1f5c:	22 0f       	add	r18, r18
    1f5e:	33 1f       	adc	r19, r19
    1f60:	44 1f       	adc	r20, r20
    1f62:	55 1f       	adc	r21, r21
    1f64:	0e 94 6d 58 	call	0xb0da	; 0xb0da <__udivmodsi4>
    1f68:	21 50       	subi	r18, 0x01	; 1
    1f6a:	31 09       	sbc	r19, r1
    1f6c:	30 93 d5 00 	sts	0x00D5, r19	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    1f70:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    1f74:	82 e0       	ldi	r24, 0x02	; 2
    1f76:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1f7a:	88 e9       	ldi	r24, 0x98	; 152
    1f7c:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1f80:	8e e0       	ldi	r24, 0x0E	; 14
    1f82:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1f86:	ac c0       	rjmp	.+344    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    1f88:	04 ed       	ldi	r16, 0xD4	; 212
    1f8a:	10 e0       	ldi	r17, 0x00	; 0
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	11 82       	std	Z+1, r1	; 0x01
    1f90:	10 82       	st	Z, r1
    1f92:	e1 e0       	ldi	r30, 0x01	; 1
    1f94:	f1 e0       	ldi	r31, 0x01	; 1
    1f96:	80 81       	ld	r24, Z
    1f98:	84 60       	ori	r24, 0x04	; 4
    1f9a:	80 83       	st	Z, r24
    1f9c:	80 ec       	ldi	r24, 0xC0	; 192
    1f9e:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1fa2:	88 e9       	ldi	r24, 0x98	; 152
    1fa4:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1fa8:	d5 01       	movw	r26, r10
    1faa:	c4 01       	movw	r24, r8
    1fac:	80 58       	subi	r24, 0x80	; 128
    1fae:	9b 47       	sbci	r25, 0x7B	; 123
    1fb0:	a1 4e       	sbci	r26, 0xE1	; 225
    1fb2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	aa 1f       	adc	r26, r26
    1fba:	bb 1f       	adc	r27, r27
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	aa 1f       	adc	r26, r26
    1fc2:	bb 1f       	adc	r27, r27
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	66 0f       	add	r22, r22
    1fca:	77 1f       	adc	r23, r23
    1fcc:	88 1f       	adc	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	88 0c       	add	r8, r8
    1fd2:	99 1c       	adc	r9, r9
    1fd4:	aa 1c       	adc	r10, r10
    1fd6:	bb 1c       	adc	r11, r11
    1fd8:	88 0c       	add	r8, r8
    1fda:	99 1c       	adc	r9, r9
    1fdc:	aa 1c       	adc	r10, r10
    1fde:	bb 1c       	adc	r11, r11
    1fe0:	a5 01       	movw	r20, r10
    1fe2:	94 01       	movw	r18, r8
    1fe4:	22 0f       	add	r18, r18
    1fe6:	33 1f       	adc	r19, r19
    1fe8:	44 1f       	adc	r20, r20
    1fea:	55 1f       	adc	r21, r21
    1fec:	22 0f       	add	r18, r18
    1fee:	33 1f       	adc	r19, r19
    1ff0:	44 1f       	adc	r20, r20
    1ff2:	55 1f       	adc	r21, r21
    1ff4:	0e 94 6d 58 	call	0xb0da	; 0xb0da <__udivmodsi4>
    1ff8:	21 50       	subi	r18, 0x01	; 1
    1ffa:	31 09       	sbc	r19, r1
    1ffc:	f8 01       	movw	r30, r16
    1ffe:	31 83       	std	Z+1, r19	; 0x01
    2000:	20 83       	st	Z, r18
    2002:	6e c0       	rjmp	.+220    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    2004:	d5 01       	movw	r26, r10
    2006:	c4 01       	movw	r24, r8
    2008:	97 5f       	subi	r25, 0xF7	; 247
    200a:	a2 4c       	sbci	r26, 0xC2	; 194
    200c:	bf 4f       	sbci	r27, 0xFF	; 255
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	66 0f       	add	r22, r22
    2014:	77 1f       	adc	r23, r23
    2016:	88 1f       	adc	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	66 0f       	add	r22, r22
    201c:	77 1f       	adc	r23, r23
    201e:	88 1f       	adc	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	95 01       	movw	r18, r10
    2024:	84 01       	movw	r16, r8
    2026:	00 0f       	add	r16, r16
    2028:	11 1f       	adc	r17, r17
    202a:	22 1f       	adc	r18, r18
    202c:	33 1f       	adc	r19, r19
    202e:	00 0f       	add	r16, r16
    2030:	11 1f       	adc	r17, r17
    2032:	22 1f       	adc	r18, r18
    2034:	33 1f       	adc	r19, r19
    2036:	a9 01       	movw	r20, r18
    2038:	98 01       	movw	r18, r16
    203a:	22 0f       	add	r18, r18
    203c:	33 1f       	adc	r19, r19
    203e:	44 1f       	adc	r20, r20
    2040:	55 1f       	adc	r21, r21
    2042:	0e 94 6d 58 	call	0xb0da	; 0xb0da <__udivmodsi4>
    2046:	21 50       	subi	r18, 0x01	; 1
    2048:	31 09       	sbc	r19, r1
    204a:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    204e:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2058:	88 e9       	ldi	r24, 0x98	; 152
    205a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    205e:	8e e0       	ldi	r24, 0x0E	; 14
    2060:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    2064:	3d c0       	rjmp	.+122    	; 0x20e0 <xSerialPortInitMinimal+0x43a>
    2066:	04 e3       	ldi	r16, 0x34	; 52
    2068:	11 e0       	ldi	r17, 0x01	; 1
    206a:	f8 01       	movw	r30, r16
    206c:	11 82       	std	Z+1, r1	; 0x01
    206e:	10 82       	st	Z, r1
    2070:	e4 e0       	ldi	r30, 0x04	; 4
    2072:	f1 e0       	ldi	r31, 0x01	; 1
    2074:	80 81       	ld	r24, Z
    2076:	84 60       	ori	r24, 0x04	; 4
    2078:	80 83       	st	Z, r24
    207a:	80 ec       	ldi	r24, 0xC0	; 192
    207c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    2080:	88 e9       	ldi	r24, 0x98	; 152
    2082:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    2086:	d5 01       	movw	r26, r10
    2088:	c4 01       	movw	r24, r8
    208a:	80 58       	subi	r24, 0x80	; 128
    208c:	9b 47       	sbci	r25, 0x7B	; 123
    208e:	a1 4e       	sbci	r26, 0xE1	; 225
    2090:	bf 4f       	sbci	r27, 0xFF	; 255
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	aa 1f       	adc	r26, r26
    2098:	bb 1f       	adc	r27, r27
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	aa 1f       	adc	r26, r26
    20a0:	bb 1f       	adc	r27, r27
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	66 0f       	add	r22, r22
    20a8:	77 1f       	adc	r23, r23
    20aa:	88 1f       	adc	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	88 0c       	add	r8, r8
    20b0:	99 1c       	adc	r9, r9
    20b2:	aa 1c       	adc	r10, r10
    20b4:	bb 1c       	adc	r11, r11
    20b6:	88 0c       	add	r8, r8
    20b8:	99 1c       	adc	r9, r9
    20ba:	aa 1c       	adc	r10, r10
    20bc:	bb 1c       	adc	r11, r11
    20be:	a5 01       	movw	r20, r10
    20c0:	94 01       	movw	r18, r8
    20c2:	22 0f       	add	r18, r18
    20c4:	33 1f       	adc	r19, r19
    20c6:	44 1f       	adc	r20, r20
    20c8:	55 1f       	adc	r21, r21
    20ca:	22 0f       	add	r18, r18
    20cc:	33 1f       	adc	r19, r19
    20ce:	44 1f       	adc	r20, r20
    20d0:	55 1f       	adc	r21, r21
    20d2:	0e 94 6d 58 	call	0xb0da	; 0xb0da <__udivmodsi4>
    20d6:	21 50       	subi	r18, 0x01	; 1
    20d8:	31 09       	sbc	r19, r1
    20da:	f8 01       	movw	r30, r16
    20dc:	31 83       	std	Z+1, r19	; 0x01
    20de:	20 83       	st	Z, r18
    20e0:	0f 90       	pop	r0
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	82 e2       	ldi	r24, 0x22	; 34
    20e6:	fe 01       	movw	r30, r28
    20e8:	31 96       	adiw	r30, 0x01	; 1
    20ea:	d6 01       	movw	r26, r12
    20ec:	01 90       	ld	r0, Z+
    20ee:	0d 92       	st	X+, r0
    20f0:	8a 95       	dec	r24
    20f2:	e1 f7       	brne	.-8      	; 0x20ec <xSerialPortInitMinimal+0x446>
    20f4:	c6 01       	movw	r24, r12
    20f6:	a2 96       	adiw	r28, 0x22	; 34
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	ff 90       	pop	r15
    210c:	ef 90       	pop	r14
    210e:	df 90       	pop	r13
    2110:	cf 90       	pop	r12
    2112:	bf 90       	pop	r11
    2114:	af 90       	pop	r10
    2116:	9f 90       	pop	r9
    2118:	8f 90       	pop	r8
    211a:	7f 90       	pop	r7
    211c:	08 95       	ret

0000211e <__vector_25>:
#elif defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
ISR( USART0_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART0_RX_vect )

#endif
{
    211e:	1f 92       	push	r1
    2120:	0f 92       	push	r0
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	0f 92       	push	r0
    2126:	11 24       	eor	r1, r1
    2128:	0b b6       	in	r0, 0x3b	; 59
    212a:	0f 92       	push	r0
    212c:	2f 93       	push	r18
    212e:	3f 93       	push	r19
    2130:	4f 93       	push	r20
    2132:	5f 93       	push	r21
    2134:	6f 93       	push	r22
    2136:	7f 93       	push	r23
    2138:	8f 93       	push	r24
    213a:	9f 93       	push	r25
    213c:	af 93       	push	r26
    213e:	bf 93       	push	r27
    2140:	cf 93       	push	r28
    2142:	ef 93       	push	r30
    2144:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR0A & (_BV(FE0)|_BV(DOR0)|_BV(UPE0)) ) )
    2146:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    214a:	8c 71       	andi	r24, 0x1C	; 28
    214c:	71 f0       	breq	.+28     	; 0x216a <__vector_25+0x4c>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR0A & (1<<RXC0) ) erroredByte = UDR0;
    214e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    2152:	88 23       	and	r24, r24
    2154:	0c f0       	brlt	.+2      	; 0x2158 <__vector_25+0x3a>
    2156:	57 c0       	rjmp	.+174    	; 0x2206 <__stack+0x7>
    2158:	a6 ec       	ldi	r26, 0xC6	; 198
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e0 ec       	ldi	r30, 0xC0	; 192
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	8c 91       	ld	r24, X
    2162:	80 81       	ld	r24, Z
    2164:	88 23       	and	r24, r24
    2166:	e4 f3       	brlt	.-8      	; 0x2160 <__vector_25+0x42>
    2168:	4e c0       	rjmp	.+156    	; 0x2206 <__stack+0x7>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR0;
    216a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
//UCSR3B &= ~ ( _BV(RXCIE3) | _BV(RXEN3) | _BV(TXEN3));
if(!port_3)
    216e:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <port_3>
    2172:	81 11       	cpse	r24, r1
    2174:	1d c0       	rjmp	.+58     	; 0x21b0 <__vector_25+0x92>
{
port_0=true;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	80 93 67 0a 	sts	0x0A67, r24	; 0x800a67 <port_0>
timer_1_Init();
    217c:	0e 94 b6 24 	call	0x496c	; 0x496c <timer_1_Init>
start_1_Timer();//my cod
    2180:	0e 94 9b 24 	call	0x4936	; 0x4936 <start_1_Timer>
TCNT1=0;//my cod		
    2184:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    2188:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
frame[indexBuf] = cChar;//my cod
    218c:	e0 91 5f 07 	lds	r30, 0x075F	; 0x80075f <indexBuf>
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	ee 57       	subi	r30, 0x7E	; 126
    2194:	f8 4f       	sbci	r31, 0xF8	; 248
    2196:	c0 83       	st	Z, r28
indexBuf++;//my cod
    2198:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <indexBuf>
    219c:	8f 5f       	subi	r24, 0xFF	; 255
    219e:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <indexBuf>
if(indexBuf == portSERIAL_BUFFER_RX ) overflow=1;//my cod
    21a2:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <indexBuf>
    21a6:	8f 3f       	cpi	r24, 0xFF	; 255
    21a8:	19 f4       	brne	.+6      	; 0x21b0 <__vector_25+0x92>
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <overflow>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	0f 92       	push	r0
	{
	    count = buffer->count;
    21b6:	e9 e1       	ldi	r30, 0x19	; 25
    21b8:	f7 e0       	ldi	r31, 0x07	; 7
    21ba:	21 81       	ldd	r18, Z+1	; 0x01
    21bc:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    21be:	0f 90       	pop	r0
    21c0:	0f be       	out	0x3f, r0	; 63
}
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerialPort.xRxedChars) ) )
    21c2:	83 85       	ldd	r24, Z+11	; 0x0b
    21c4:	94 85       	ldd	r25, Z+12	; 0x0c
    21c6:	28 17       	cp	r18, r24
    21c8:	39 07       	cpc	r19, r25
    21ca:	e9 f0       	breq	.+58     	; 0x2206 <__stack+0x7>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    21cc:	ea e1       	ldi	r30, 0x1A	; 26
    21ce:	f7 e0       	ldi	r31, 0x07	; 7

	*buffer->in = data;
    21d0:	a2 81       	ldd	r26, Z+2	; 0x02
    21d2:	b3 81       	ldd	r27, Z+3	; 0x03
    21d4:	cc 93       	st	X, r28

	if (++buffer->in == buffer->end)
    21d6:	82 81       	ldd	r24, Z+2	; 0x02
    21d8:	93 81       	ldd	r25, Z+3	; 0x03
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	93 83       	std	Z+3, r25	; 0x03
    21de:	82 83       	std	Z+2, r24	; 0x02
    21e0:	20 85       	ldd	r18, Z+8	; 0x08
    21e2:	31 85       	ldd	r19, Z+9	; 0x09
    21e4:	82 17       	cp	r24, r18
    21e6:	93 07       	cpc	r25, r19
    21e8:	21 f4       	brne	.+8      	; 0x21f2 <__vector_25+0xd4>
	  buffer->in = buffer->start;
    21ea:	86 81       	ldd	r24, Z+6	; 0x06
    21ec:	97 81       	ldd	r25, Z+7	; 0x07
    21ee:	93 83       	std	Z+3, r25	; 0x03
    21f0:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	0f 92       	push	r0
	{
	    buffer->count++;
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	01 96       	adiw	r24, 0x01	; 1
    21fe:	91 83       	std	Z+1, r25	; 0x01
    2200:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    2202:	0f 90       	pop	r0
    2204:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerialPort.xRxedChars), cChar);
	}
}
    2206:	ff 91       	pop	r31
    2208:	ef 91       	pop	r30
    220a:	cf 91       	pop	r28
    220c:	bf 91       	pop	r27
    220e:	af 91       	pop	r26
    2210:	9f 91       	pop	r25
    2212:	8f 91       	pop	r24
    2214:	7f 91       	pop	r23
    2216:	6f 91       	pop	r22
    2218:	5f 91       	pop	r21
    221a:	4f 91       	pop	r20
    221c:	3f 91       	pop	r19
    221e:	2f 91       	pop	r18
    2220:	0f 90       	pop	r0
    2222:	0b be       	out	0x3b, r0	; 59
    2224:	0f 90       	pop	r0
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	0f 90       	pop	r0
    222a:	1f 90       	pop	r1
    222c:	18 95       	reti

0000222e <__vector_26>:
#elif defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
ISR( USART0_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART0_UDRE_vect )

#endif
{
    222e:	1f 92       	push	r1
    2230:	0f 92       	push	r0
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	0f 92       	push	r0
    2236:	11 24       	eor	r1, r1
    2238:	0b b6       	in	r0, 0x3b	; 59
    223a:	0f 92       	push	r0
    223c:	2f 93       	push	r18
    223e:	8f 93       	push	r24
    2240:	9f 93       	push	r25
    2242:	af 93       	push	r26
    2244:	bf 93       	push	r27
    2246:	ef 93       	push	r30
    2248:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	0f 92       	push	r0
	{
	    count = buffer->count;
    2250:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <xSerialPort+0xd>
    2254:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <xSerialPort+0xe>
	}
	portEXIT_CRITICAL();
    2258:	0f 90       	pop	r0
    225a:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerialPort.xCharsForTx) ) )
    225c:	89 2b       	or	r24, r25
    225e:	31 f4       	brne	.+12     	; 0x226c <__vector_26+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt0_Off();
    2260:	e1 ec       	ldi	r30, 0xC1	; 193
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	8f 7d       	andi	r24, 0xDF	; 223
    2268:	80 83       	st	Z, r24
    226a:	1c c0       	rjmp	.+56     	; 0x22a4 <__vector_26+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    226c:	e6 e2       	ldi	r30, 0x26	; 38
    226e:	f7 e0       	ldi	r31, 0x07	; 7

	uint8_t data = *buffer->out;
    2270:	a4 81       	ldd	r26, Z+4	; 0x04
    2272:	b5 81       	ldd	r27, Z+5	; 0x05
    2274:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    2276:	b5 83       	std	Z+5, r27	; 0x05
    2278:	a4 83       	std	Z+4, r26	; 0x04
    227a:	80 85       	ldd	r24, Z+8	; 0x08
    227c:	91 85       	ldd	r25, Z+9	; 0x09
    227e:	a8 17       	cp	r26, r24
    2280:	b9 07       	cpc	r27, r25
    2282:	21 f4       	brne	.+8      	; 0x228c <__vector_26+0x5e>
	  buffer->out = buffer->start;
    2284:	86 81       	ldd	r24, Z+6	; 0x06
    2286:	97 81       	ldd	r25, Z+7	; 0x07
    2288:	95 83       	std	Z+5, r25	; 0x05
    228a:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	0f 92       	push	r0
	{
	    buffer->count--;
    2292:	80 81       	ld	r24, Z
    2294:	91 81       	ldd	r25, Z+1	; 0x01
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    229c:	0f 90       	pop	r0
    229e:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR0 = ringBuffer_Pop( (ringBuffer_t*) &(xSerialPort.xCharsForTx) );
    22a0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    22a4:	ff 91       	pop	r31
    22a6:	ef 91       	pop	r30
    22a8:	bf 91       	pop	r27
    22aa:	af 91       	pop	r26
    22ac:	9f 91       	pop	r25
    22ae:	8f 91       	pop	r24
    22b0:	2f 91       	pop	r18
    22b2:	0f 90       	pop	r0
    22b4:	0b be       	out	0x3b, r0	; 59
    22b6:	0f 90       	pop	r0
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	0f 90       	pop	r0
    22bc:	1f 90       	pop	r1
    22be:	18 95       	reti

000022c0 <__vector_36>:

#if defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

ISR( USART1_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART1_RX_vect )
{
    22c0:	1f 92       	push	r1
    22c2:	0f 92       	push	r0
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	0f 92       	push	r0
    22c8:	11 24       	eor	r1, r1
    22ca:	0b b6       	in	r0, 0x3b	; 59
    22cc:	0f 92       	push	r0
    22ce:	2f 93       	push	r18
    22d0:	3f 93       	push	r19
    22d2:	4f 93       	push	r20
    22d4:	8f 93       	push	r24
    22d6:	9f 93       	push	r25
    22d8:	af 93       	push	r26
    22da:	bf 93       	push	r27
    22dc:	ef 93       	push	r30
    22de:	ff 93       	push	r31
	/* Get status and data from buffer */
     
	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR1A &  (_BV(FE1)|_BV(DOR1)|_BV(UPE1)) ) )
    22e0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    22e4:	8c 71       	andi	r24, 0x1C	; 28
    22e6:	71 f0       	breq	.+28     	; 0x2304 <__vector_36+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR1A & (1<<RXC1) ) erroredByte = UDR1;
    22e8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    22ec:	88 23       	and	r24, r24
    22ee:	0c f0       	brlt	.+2      	; 0x22f2 <__vector_36+0x32>
    22f0:	36 c0       	rjmp	.+108    	; 0x235e <__vector_36+0x9e>
    22f2:	ae ec       	ldi	r26, 0xCE	; 206
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e8 ec       	ldi	r30, 0xC8	; 200
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	8c 91       	ld	r24, X
    22fc:	80 81       	ld	r24, Z
    22fe:	88 23       	and	r24, r24
    2300:	e4 f3       	brlt	.-8      	; 0x22fa <__vector_36+0x3a>
    2302:	2d c0       	rjmp	.+90     	; 0x235e <__vector_36+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR1;
    2304:	40 91 ce 00 	lds	r20, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	0f 92       	push	r0
	{
	    count = buffer->count;
    230e:	e1 e8       	ldi	r30, 0x81	; 129
    2310:	f8 e0       	ldi	r31, 0x08	; 8
    2312:	21 81       	ldd	r18, Z+1	; 0x01
    2314:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2316:	0f 90       	pop	r0
    2318:	0f be       	out	0x3f, r0	; 63
				
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial1Port.xRxedChars) ) )
    231a:	83 85       	ldd	r24, Z+11	; 0x0b
    231c:	94 85       	ldd	r25, Z+12	; 0x0c
    231e:	28 17       	cp	r18, r24
    2320:	39 07       	cpc	r19, r25
    2322:	e9 f0       	breq	.+58     	; 0x235e <__vector_36+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    2324:	e2 e8       	ldi	r30, 0x82	; 130
    2326:	f8 e0       	ldi	r31, 0x08	; 8

	*buffer->in = data;
    2328:	a2 81       	ldd	r26, Z+2	; 0x02
    232a:	b3 81       	ldd	r27, Z+3	; 0x03
    232c:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	01 96       	adiw	r24, 0x01	; 1
    2334:	93 83       	std	Z+3, r25	; 0x03
    2336:	82 83       	std	Z+2, r24	; 0x02
    2338:	20 85       	ldd	r18, Z+8	; 0x08
    233a:	31 85       	ldd	r19, Z+9	; 0x09
    233c:	82 17       	cp	r24, r18
    233e:	93 07       	cpc	r25, r19
    2340:	21 f4       	brne	.+8      	; 0x234a <__vector_36+0x8a>
	  buffer->in = buffer->start;
    2342:	86 81       	ldd	r24, Z+6	; 0x06
    2344:	97 81       	ldd	r25, Z+7	; 0x07
    2346:	93 83       	std	Z+3, r25	; 0x03
    2348:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	0f 92       	push	r0
	{
	    buffer->count++;
    2350:	80 81       	ld	r24, Z
    2352:	91 81       	ldd	r25, Z+1	; 0x01
    2354:	01 96       	adiw	r24, 0x01	; 1
    2356:	91 83       	std	Z+1, r25	; 0x01
    2358:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    235a:	0f 90       	pop	r0
    235c:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial1Port.xRxedChars), cChar);
			
	}
}
    235e:	ff 91       	pop	r31
    2360:	ef 91       	pop	r30
    2362:	bf 91       	pop	r27
    2364:	af 91       	pop	r26
    2366:	9f 91       	pop	r25
    2368:	8f 91       	pop	r24
    236a:	4f 91       	pop	r20
    236c:	3f 91       	pop	r19
    236e:	2f 91       	pop	r18
    2370:	0f 90       	pop	r0
    2372:	0b be       	out	0x3b, r0	; 59
    2374:	0f 90       	pop	r0
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	0f 90       	pop	r0
    237a:	1f 90       	pop	r1
    237c:	18 95       	reti

0000237e <__vector_37>:
/*-----------------------------------------------------------*/

ISR( USART1_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART1_UDRE_vect )
{
    237e:	1f 92       	push	r1
    2380:	0f 92       	push	r0
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	0f 92       	push	r0
    2386:	11 24       	eor	r1, r1
    2388:	0b b6       	in	r0, 0x3b	; 59
    238a:	0f 92       	push	r0
    238c:	2f 93       	push	r18
    238e:	8f 93       	push	r24
    2390:	9f 93       	push	r25
    2392:	af 93       	push	r26
    2394:	bf 93       	push	r27
    2396:	ef 93       	push	r30
    2398:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	0f 92       	push	r0
	{
	    count = buffer->count;
    23a0:	80 91 8e 08 	lds	r24, 0x088E	; 0x80088e <xSerial1Port+0xd>
    23a4:	90 91 8f 08 	lds	r25, 0x088F	; 0x80088f <xSerial1Port+0xe>
	}
	portEXIT_CRITICAL();
    23a8:	0f 90       	pop	r0
    23aa:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) ) )
    23ac:	89 2b       	or	r24, r25
    23ae:	31 f4       	brne	.+12     	; 0x23bc <__vector_37+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt1_Off();
    23b0:	e9 ec       	ldi	r30, 0xC9	; 201
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	8f 7d       	andi	r24, 0xDF	; 223
    23b8:	80 83       	st	Z, r24
    23ba:	1c c0       	rjmp	.+56     	; 0x23f4 <__vector_37+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    23bc:	ee e8       	ldi	r30, 0x8E	; 142
    23be:	f8 e0       	ldi	r31, 0x08	; 8

	uint8_t data = *buffer->out;
    23c0:	a4 81       	ldd	r26, Z+4	; 0x04
    23c2:	b5 81       	ldd	r27, Z+5	; 0x05
    23c4:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    23c6:	b5 83       	std	Z+5, r27	; 0x05
    23c8:	a4 83       	std	Z+4, r26	; 0x04
    23ca:	80 85       	ldd	r24, Z+8	; 0x08
    23cc:	91 85       	ldd	r25, Z+9	; 0x09
    23ce:	a8 17       	cp	r26, r24
    23d0:	b9 07       	cpc	r27, r25
    23d2:	21 f4       	brne	.+8      	; 0x23dc <__vector_37+0x5e>
	  buffer->out = buffer->start;
    23d4:	86 81       	ldd	r24, Z+6	; 0x06
    23d6:	97 81       	ldd	r25, Z+7	; 0x07
    23d8:	95 83       	std	Z+5, r25	; 0x05
    23da:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	0f 92       	push	r0
	{
	    buffer->count--;
    23e2:	80 81       	ld	r24, Z
    23e4:	91 81       	ldd	r25, Z+1	; 0x01
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	91 83       	std	Z+1, r25	; 0x01
    23ea:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    23ec:	0f 90       	pop	r0
    23ee:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR1 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) );
    23f0:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
	}
}
    23f4:	ff 91       	pop	r31
    23f6:	ef 91       	pop	r30
    23f8:	bf 91       	pop	r27
    23fa:	af 91       	pop	r26
    23fc:	9f 91       	pop	r25
    23fe:	8f 91       	pop	r24
    2400:	2f 91       	pop	r18
    2402:	0f 90       	pop	r0
    2404:	0b be       	out	0x3b, r0	; 59
    2406:	0f 90       	pop	r0
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	0f 90       	pop	r0
    240c:	1f 90       	pop	r1
    240e:	18 95       	reti

00002410 <__vector_51>:

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

ISR( USART2_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART2_RX_vect )
{
    2410:	1f 92       	push	r1
    2412:	0f 92       	push	r0
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	0f 92       	push	r0
    2418:	11 24       	eor	r1, r1
    241a:	0b b6       	in	r0, 0x3b	; 59
    241c:	0f 92       	push	r0
    241e:	2f 93       	push	r18
    2420:	3f 93       	push	r19
    2422:	4f 93       	push	r20
    2424:	8f 93       	push	r24
    2426:	9f 93       	push	r25
    2428:	af 93       	push	r26
    242a:	bf 93       	push	r27
    242c:	ef 93       	push	r30
    242e:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR2A & (_BV(FE2)|_BV(DOR2)|_BV(UPE2)) ) )
    2430:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    2434:	8c 71       	andi	r24, 0x1C	; 28
    2436:	71 f0       	breq	.+28     	; 0x2454 <__vector_51+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR2A & (1<<RXC2) ) erroredByte = UDR2;
    2438:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    243c:	88 23       	and	r24, r24
    243e:	0c f0       	brlt	.+2      	; 0x2442 <__vector_51+0x32>
    2440:	36 c0       	rjmp	.+108    	; 0x24ae <__vector_51+0x9e>
    2442:	a6 ed       	ldi	r26, 0xD6	; 214
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e0 ed       	ldi	r30, 0xD0	; 208
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	8c 91       	ld	r24, X
    244c:	80 81       	ld	r24, Z
    244e:	88 23       	and	r24, r24
    2450:	e4 f3       	brlt	.-8      	; 0x244a <__vector_51+0x3a>
    2452:	2d c0       	rjmp	.+90     	; 0x24ae <__vector_51+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR2;
    2454:	40 91 d6 00 	lds	r20, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	0f 92       	push	r0
	{
	    count = buffer->count;
    245e:	ed e3       	ldi	r30, 0x3D	; 61
    2460:	f7 e0       	ldi	r31, 0x07	; 7
    2462:	21 81       	ldd	r18, Z+1	; 0x01
    2464:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2466:	0f 90       	pop	r0
    2468:	0f be       	out	0x3f, r0	; 63

		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial2Port.xRxedChars) ) )
    246a:	83 85       	ldd	r24, Z+11	; 0x0b
    246c:	94 85       	ldd	r25, Z+12	; 0x0c
    246e:	28 17       	cp	r18, r24
    2470:	39 07       	cpc	r19, r25
    2472:	e9 f0       	breq	.+58     	; 0x24ae <__vector_51+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    2474:	ee e3       	ldi	r30, 0x3E	; 62
    2476:	f7 e0       	ldi	r31, 0x07	; 7

	*buffer->in = data;
    2478:	a2 81       	ldd	r26, Z+2	; 0x02
    247a:	b3 81       	ldd	r27, Z+3	; 0x03
    247c:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	93 81       	ldd	r25, Z+3	; 0x03
    2482:	01 96       	adiw	r24, 0x01	; 1
    2484:	93 83       	std	Z+3, r25	; 0x03
    2486:	82 83       	std	Z+2, r24	; 0x02
    2488:	20 85       	ldd	r18, Z+8	; 0x08
    248a:	31 85       	ldd	r19, Z+9	; 0x09
    248c:	82 17       	cp	r24, r18
    248e:	93 07       	cpc	r25, r19
    2490:	21 f4       	brne	.+8      	; 0x249a <__vector_51+0x8a>
	  buffer->in = buffer->start;
    2492:	86 81       	ldd	r24, Z+6	; 0x06
    2494:	97 81       	ldd	r25, Z+7	; 0x07
    2496:	93 83       	std	Z+3, r25	; 0x03
    2498:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	0f 92       	push	r0
	{
	    buffer->count++;
    24a0:	80 81       	ld	r24, Z
    24a2:	91 81       	ldd	r25, Z+1	; 0x01
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    24aa:	0f 90       	pop	r0
    24ac:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial2Port.xRxedChars), cChar);
	}
}
    24ae:	ff 91       	pop	r31
    24b0:	ef 91       	pop	r30
    24b2:	bf 91       	pop	r27
    24b4:	af 91       	pop	r26
    24b6:	9f 91       	pop	r25
    24b8:	8f 91       	pop	r24
    24ba:	4f 91       	pop	r20
    24bc:	3f 91       	pop	r19
    24be:	2f 91       	pop	r18
    24c0:	0f 90       	pop	r0
    24c2:	0b be       	out	0x3b, r0	; 59
    24c4:	0f 90       	pop	r0
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	0f 90       	pop	r0
    24ca:	1f 90       	pop	r1
    24cc:	18 95       	reti

000024ce <__vector_52>:
/*-----------------------------------------------------------*/

ISR( USART2_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART2_UDRE_vect )
{
    24ce:	1f 92       	push	r1
    24d0:	0f 92       	push	r0
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	0f 92       	push	r0
    24d6:	11 24       	eor	r1, r1
    24d8:	0b b6       	in	r0, 0x3b	; 59
    24da:	0f 92       	push	r0
    24dc:	2f 93       	push	r18
    24de:	8f 93       	push	r24
    24e0:	9f 93       	push	r25
    24e2:	af 93       	push	r26
    24e4:	bf 93       	push	r27
    24e6:	ef 93       	push	r30
    24e8:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	0f 92       	push	r0
	{
	    count = buffer->count;
    24f0:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <xSerial2Port+0xd>
    24f4:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <xSerial2Port+0xe>
	}
	portEXIT_CRITICAL();
    24f8:	0f 90       	pop	r0
    24fa:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) ) )
    24fc:	89 2b       	or	r24, r25
    24fe:	31 f4       	brne	.+12     	; 0x250c <__vector_52+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt2_Off();
    2500:	e1 ed       	ldi	r30, 0xD1	; 209
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	8f 7d       	andi	r24, 0xDF	; 223
    2508:	80 83       	st	Z, r24
    250a:	1c c0       	rjmp	.+56     	; 0x2544 <__vector_52+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    250c:	ea e4       	ldi	r30, 0x4A	; 74
    250e:	f7 e0       	ldi	r31, 0x07	; 7

	uint8_t data = *buffer->out;
    2510:	a4 81       	ldd	r26, Z+4	; 0x04
    2512:	b5 81       	ldd	r27, Z+5	; 0x05
    2514:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    2516:	b5 83       	std	Z+5, r27	; 0x05
    2518:	a4 83       	std	Z+4, r26	; 0x04
    251a:	80 85       	ldd	r24, Z+8	; 0x08
    251c:	91 85       	ldd	r25, Z+9	; 0x09
    251e:	a8 17       	cp	r26, r24
    2520:	b9 07       	cpc	r27, r25
    2522:	21 f4       	brne	.+8      	; 0x252c <__vector_52+0x5e>
	  buffer->out = buffer->start;
    2524:	86 81       	ldd	r24, Z+6	; 0x06
    2526:	97 81       	ldd	r25, Z+7	; 0x07
    2528:	95 83       	std	Z+5, r25	; 0x05
    252a:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	0f 92       	push	r0
	{
	    buffer->count--;
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	91 83       	std	Z+1, r25	; 0x01
    253a:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    253c:	0f 90       	pop	r0
    253e:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR2 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) );
    2540:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	}
}
    2544:	ff 91       	pop	r31
    2546:	ef 91       	pop	r30
    2548:	bf 91       	pop	r27
    254a:	af 91       	pop	r26
    254c:	9f 91       	pop	r25
    254e:	8f 91       	pop	r24
    2550:	2f 91       	pop	r18
    2552:	0f 90       	pop	r0
    2554:	0b be       	out	0x3b, r0	; 59
    2556:	0f 90       	pop	r0
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	0f 90       	pop	r0
    255c:	1f 90       	pop	r1
    255e:	18 95       	reti

00002560 <__vector_54>:
/*-----------------------------------------------------------*/

ISR( USART3_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART3_RX_vect )
{
    2560:	1f 92       	push	r1
    2562:	0f 92       	push	r0
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	0f 92       	push	r0
    2568:	11 24       	eor	r1, r1
    256a:	0b b6       	in	r0, 0x3b	; 59
    256c:	0f 92       	push	r0
    256e:	2f 93       	push	r18
    2570:	3f 93       	push	r19
    2572:	4f 93       	push	r20
    2574:	5f 93       	push	r21
    2576:	6f 93       	push	r22
    2578:	7f 93       	push	r23
    257a:	8f 93       	push	r24
    257c:	9f 93       	push	r25
    257e:	af 93       	push	r26
    2580:	bf 93       	push	r27
    2582:	cf 93       	push	r28
    2584:	ef 93       	push	r30
    2586:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR3A & (_BV(FE3)|_BV(DOR3)|_BV(UPE3)) ) )
    2588:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    258c:	8c 71       	andi	r24, 0x1C	; 28
    258e:	71 f0       	breq	.+28     	; 0x25ac <__vector_54+0x4c>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR3A & (1<<RXC3) ) erroredByte = UDR3;
    2590:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2594:	88 23       	and	r24, r24
    2596:	0c f0       	brlt	.+2      	; 0x259a <__vector_54+0x3a>
    2598:	57 c0       	rjmp	.+174    	; 0x2648 <__vector_54+0xe8>
    259a:	a6 e3       	ldi	r26, 0x36	; 54
    259c:	b1 e0       	ldi	r27, 0x01	; 1
    259e:	e0 e3       	ldi	r30, 0x30	; 48
    25a0:	f1 e0       	ldi	r31, 0x01	; 1
    25a2:	8c 91       	ld	r24, X
    25a4:	80 81       	ld	r24, Z
    25a6:	88 23       	and	r24, r24
    25a8:	e4 f3       	brlt	.-8      	; 0x25a2 <__vector_54+0x42>
    25aa:	4e c0       	rjmp	.+156    	; 0x2648 <__vector_54+0xe8>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR3;
    25ac:	c0 91 36 01 	lds	r28, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		
	//xSerialxPrintf(&xSerial3Port,"interrupt\r\n");	
if(!port_0)
    25b0:	80 91 67 0a 	lds	r24, 0x0A67	; 0x800a67 <port_0>
    25b4:	81 11       	cpse	r24, r1
    25b6:	1d c0       	rjmp	.+58     	; 0x25f2 <__vector_54+0x92>
{			//xSerialxPrintf(&xSerial3Port,"port_3\r\n");
			port_3=true;
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	80 93 c1 08 	sts	0x08C1, r24	; 0x8008c1 <port_3>
			timer_1_Init();
    25be:	0e 94 b6 24 	call	0x496c	; 0x496c <timer_1_Init>
			start_1_Timer();//my cod
    25c2:	0e 94 9b 24 	call	0x4936	; 0x4936 <start_1_Timer>
			TCNT1=0;//my cod
    25c6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    25ca:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
			frame[indexBuf] = cChar;//my cod
    25ce:	e0 91 5f 07 	lds	r30, 0x075F	; 0x80075f <indexBuf>
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	ee 57       	subi	r30, 0x7E	; 126
    25d6:	f8 4f       	sbci	r31, 0xF8	; 248
    25d8:	c0 83       	st	Z, r28
			indexBuf++;//my cod
    25da:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <indexBuf>
    25de:	8f 5f       	subi	r24, 0xFF	; 255
    25e0:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <indexBuf>
			if(indexBuf == portSERIAL_BUFFER_RX ) overflow=1;//my cod
    25e4:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <indexBuf>
    25e8:	8f 3f       	cpi	r24, 0xFF	; 255
    25ea:	19 f4       	brne	.+6      	; 0x25f2 <__vector_54+0x92>
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <overflow>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	0f 92       	push	r0
	{
	    count = buffer->count;
    25f8:	e0 e6       	ldi	r30, 0x60	; 96
    25fa:	f7 e0       	ldi	r31, 0x07	; 7
    25fc:	21 81       	ldd	r18, Z+1	; 0x01
    25fe:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    2600:	0f 90       	pop	r0
    2602:	0f be       	out	0x3f, r0	; 63
}
		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial3Port.xRxedChars) ) )
    2604:	83 85       	ldd	r24, Z+11	; 0x0b
    2606:	94 85       	ldd	r25, Z+12	; 0x0c
    2608:	28 17       	cp	r18, r24
    260a:	39 07       	cpc	r19, r25
    260c:	e9 f0       	breq	.+58     	; 0x2648 <__vector_54+0xe8>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    260e:	e1 e6       	ldi	r30, 0x61	; 97
    2610:	f7 e0       	ldi	r31, 0x07	; 7

	*buffer->in = data;
    2612:	a2 81       	ldd	r26, Z+2	; 0x02
    2614:	b3 81       	ldd	r27, Z+3	; 0x03
    2616:	cc 93       	st	X, r28

	if (++buffer->in == buffer->end)
    2618:	82 81       	ldd	r24, Z+2	; 0x02
    261a:	93 81       	ldd	r25, Z+3	; 0x03
    261c:	01 96       	adiw	r24, 0x01	; 1
    261e:	93 83       	std	Z+3, r25	; 0x03
    2620:	82 83       	std	Z+2, r24	; 0x02
    2622:	20 85       	ldd	r18, Z+8	; 0x08
    2624:	31 85       	ldd	r19, Z+9	; 0x09
    2626:	82 17       	cp	r24, r18
    2628:	93 07       	cpc	r25, r19
    262a:	21 f4       	brne	.+8      	; 0x2634 <__vector_54+0xd4>
	  buffer->in = buffer->start;
    262c:	86 81       	ldd	r24, Z+6	; 0x06
    262e:	97 81       	ldd	r25, Z+7	; 0x07
    2630:	93 83       	std	Z+3, r25	; 0x03
    2632:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	0f 92       	push	r0
	{
	    buffer->count++;
    263a:	80 81       	ld	r24, Z
    263c:	91 81       	ldd	r25, Z+1	; 0x01
    263e:	01 96       	adiw	r24, 0x01	; 1
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    2644:	0f 90       	pop	r0
    2646:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial3Port.xRxedChars), cChar);
	}
}
    2648:	ff 91       	pop	r31
    264a:	ef 91       	pop	r30
    264c:	cf 91       	pop	r28
    264e:	bf 91       	pop	r27
    2650:	af 91       	pop	r26
    2652:	9f 91       	pop	r25
    2654:	8f 91       	pop	r24
    2656:	7f 91       	pop	r23
    2658:	6f 91       	pop	r22
    265a:	5f 91       	pop	r21
    265c:	4f 91       	pop	r20
    265e:	3f 91       	pop	r19
    2660:	2f 91       	pop	r18
    2662:	0f 90       	pop	r0
    2664:	0b be       	out	0x3b, r0	; 59
    2666:	0f 90       	pop	r0
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	0f 90       	pop	r0
    266c:	1f 90       	pop	r1
    266e:	18 95       	reti

00002670 <__vector_55>:
/*-----------------------------------------------------------*/

ISR( USART3_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART3_UDRE_vect )
{
    2670:	1f 92       	push	r1
    2672:	0f 92       	push	r0
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	0f 92       	push	r0
    2678:	11 24       	eor	r1, r1
    267a:	0b b6       	in	r0, 0x3b	; 59
    267c:	0f 92       	push	r0
    267e:	2f 93       	push	r18
    2680:	8f 93       	push	r24
    2682:	9f 93       	push	r25
    2684:	af 93       	push	r26
    2686:	bf 93       	push	r27
    2688:	ef 93       	push	r30
    268a:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	0f 92       	push	r0
	{
	    count = buffer->count;
    2692:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <xSerial3Port+0xd>
    2696:	90 91 6e 07 	lds	r25, 0x076E	; 0x80076e <xSerial3Port+0xe>
	}
	portEXIT_CRITICAL();
    269a:	0f 90       	pop	r0
    269c:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) ) )
    269e:	89 2b       	or	r24, r25
    26a0:	31 f4       	brne	.+12     	; 0x26ae <__vector_55+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt3_Off();
    26a2:	e1 e3       	ldi	r30, 0x31	; 49
    26a4:	f1 e0       	ldi	r31, 0x01	; 1
    26a6:	80 81       	ld	r24, Z
    26a8:	8f 7d       	andi	r24, 0xDF	; 223
    26aa:	80 83       	st	Z, r24
    26ac:	1c c0       	rjmp	.+56     	; 0x26e6 <__vector_55+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    26ae:	ed e6       	ldi	r30, 0x6D	; 109
    26b0:	f7 e0       	ldi	r31, 0x07	; 7

	uint8_t data = *buffer->out;
    26b2:	a4 81       	ldd	r26, Z+4	; 0x04
    26b4:	b5 81       	ldd	r27, Z+5	; 0x05
    26b6:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    26b8:	b5 83       	std	Z+5, r27	; 0x05
    26ba:	a4 83       	std	Z+4, r26	; 0x04
    26bc:	80 85       	ldd	r24, Z+8	; 0x08
    26be:	91 85       	ldd	r25, Z+9	; 0x09
    26c0:	a8 17       	cp	r26, r24
    26c2:	b9 07       	cpc	r27, r25
    26c4:	21 f4       	brne	.+8      	; 0x26ce <__vector_55+0x5e>
	  buffer->out = buffer->start;
    26c6:	86 81       	ldd	r24, Z+6	; 0x06
    26c8:	97 81       	ldd	r25, Z+7	; 0x07
    26ca:	95 83       	std	Z+5, r25	; 0x05
    26cc:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	0f 92       	push	r0
	{
	    buffer->count--;
    26d4:	80 81       	ld	r24, Z
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    26de:	0f 90       	pop	r0
    26e0:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR3 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) );
    26e2:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	}
}
    26e6:	ff 91       	pop	r31
    26e8:	ef 91       	pop	r30
    26ea:	bf 91       	pop	r27
    26ec:	af 91       	pop	r26
    26ee:	9f 91       	pop	r25
    26f0:	8f 91       	pop	r24
    26f2:	2f 91       	pop	r18
    26f4:	0f 90       	pop	r0
    26f6:	0b be       	out	0x3b, r0	; 59
    26f8:	0f 90       	pop	r0
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	0f 90       	pop	r0
    26fe:	1f 90       	pop	r1
    2700:	18 95       	reti

00002702 <spiBegin>:
	SPCR |= _BV(SPIE);
}

void spiDetachInterrupt(void)
{
	SPCR &= ~_BV(SPIE);
    2702:	0f 93       	push	r16
    2704:	81 30       	cpi	r24, 0x01	; 1
    2706:	71 f0       	breq	.+28     	; 0x2724 <spiBegin+0x22>
    2708:	18 f0       	brcs	.+6      	; 0x2710 <spiBegin+0xe>
    270a:	82 30       	cpi	r24, 0x02	; 2
    270c:	a9 f0       	breq	.+42     	; 0x2738 <spiBegin+0x36>
    270e:	26 c0       	rjmp	.+76     	; 0x275c <spiBegin+0x5a>
    2710:	84 b1       	in	r24, 0x04	; 4
    2712:	87 60       	ori	r24, 0x07	; 7
    2714:	84 b9       	out	0x04, r24	; 4
    2716:	23 98       	cbi	0x04, 3	; 4
    2718:	85 b1       	in	r24, 0x05	; 5
    271a:	89 60       	ori	r24, 0x09	; 9
    271c:	85 b9       	out	0x05, r24	; 5
    271e:	24 9a       	sbi	0x04, 4	; 4
    2720:	2c 9a       	sbi	0x05, 4	; 5
    2722:	23 c0       	rjmp	.+70     	; 0x276a <spiBegin+0x68>
    2724:	84 b1       	in	r24, 0x04	; 4
    2726:	87 60       	ori	r24, 0x07	; 7
    2728:	84 b9       	out	0x04, r24	; 4
    272a:	23 98       	cbi	0x04, 3	; 4
    272c:	85 b1       	in	r24, 0x05	; 5
    272e:	89 60       	ori	r24, 0x09	; 9
    2730:	85 b9       	out	0x05, r24	; 5
    2732:	9d 9a       	sbi	0x13, 5	; 19
    2734:	a5 9a       	sbi	0x14, 5	; 20
    2736:	19 c0       	rjmp	.+50     	; 0x276a <spiBegin+0x68>
    2738:	84 b1       	in	r24, 0x04	; 4
    273a:	87 60       	ori	r24, 0x07	; 7
    273c:	84 b9       	out	0x04, r24	; 4
    273e:	23 98       	cbi	0x04, 3	; 4
    2740:	85 b1       	in	r24, 0x05	; 5
    2742:	89 60       	ori	r24, 0x09	; 9
    2744:	85 b9       	out	0x05, r24	; 5
    2746:	e1 e0       	ldi	r30, 0x01	; 1
    2748:	f1 e0       	ldi	r31, 0x01	; 1
    274a:	80 81       	ld	r24, Z
    274c:	80 62       	ori	r24, 0x20	; 32
    274e:	80 83       	st	Z, r24
    2750:	e2 e0       	ldi	r30, 0x02	; 2
    2752:	f1 e0       	ldi	r31, 0x01	; 1
    2754:	80 81       	ld	r24, Z
    2756:	80 62       	ori	r24, 0x20	; 32
    2758:	80 83       	st	Z, r24
    275a:	07 c0       	rjmp	.+14     	; 0x276a <spiBegin+0x68>
    275c:	84 b1       	in	r24, 0x04	; 4
    275e:	87 60       	ori	r24, 0x07	; 7
    2760:	84 b9       	out	0x04, r24	; 4
    2762:	23 98       	cbi	0x04, 3	; 4
    2764:	85 b1       	in	r24, 0x05	; 5
    2766:	89 60       	ori	r24, 0x09	; 9
    2768:	85 b9       	out	0x05, r24	; 5
    276a:	8c b5       	in	r24, 0x2c	; 44
    276c:	80 65       	ori	r24, 0x50	; 80
    276e:	8c bd       	out	0x2c, r24	; 44
    2770:	8d b5       	in	r24, 0x2d	; 45
    2772:	8e b5       	in	r24, 0x2e	; 46
    2774:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__data_end>
    2778:	90 91 29 06 	lds	r25, 0x0629	; 0x800629 <__data_end+0x1>
    277c:	89 2b       	or	r24, r25
    277e:	89 f4       	brne	.+34     	; 0x27a2 <spiBegin+0xa0>
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	0e 94 75 0a 	call	0x14ea	; 0x14ea <xQueueCreateMutex>
    2786:	90 93 29 06 	sts	0x0629, r25	; 0x800629 <__data_end+0x1>
    278a:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <__data_end>
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	41 f0       	breq	.+16     	; 0x27a2 <spiBegin+0xa0>
    2792:	00 e0       	ldi	r16, 0x00	; 0
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	a9 01       	movw	r20, r18
    279a:	60 e0       	ldi	r22, 0x00	; 0
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    27a2:	0f 91       	pop	r16
    27a4:	08 95       	ret

000027a6 <spiSetClockDivider>:
    27a6:	9c b5       	in	r25, 0x2c	; 44
    27a8:	9c 7f       	andi	r25, 0xFC	; 252
    27aa:	28 2f       	mov	r18, r24
    27ac:	23 70       	andi	r18, 0x03	; 3
    27ae:	92 2b       	or	r25, r18
    27b0:	9c bd       	out	0x2c, r25	; 44
    27b2:	9d b5       	in	r25, 0x2d	; 45
    27b4:	82 fb       	bst	r24, 2
    27b6:	88 27       	eor	r24, r24
    27b8:	80 f9       	bld	r24, 0
    27ba:	9e 7f       	andi	r25, 0xFE	; 254
    27bc:	89 2b       	or	r24, r25
    27be:	8d bd       	out	0x2d, r24	; 45
    27c0:	08 95       	ret

000027c2 <spiSetBitOrder>:
    27c2:	81 11       	cpse	r24, r1
    27c4:	04 c0       	rjmp	.+8      	; 0x27ce <spiSetBitOrder+0xc>
    27c6:	8c b5       	in	r24, 0x2c	; 44
    27c8:	80 62       	ori	r24, 0x20	; 32
    27ca:	8c bd       	out	0x2c, r24	; 44
    27cc:	08 95       	ret
    27ce:	8c b5       	in	r24, 0x2c	; 44
    27d0:	8f 7d       	andi	r24, 0xDF	; 223
    27d2:	8c bd       	out	0x2c, r24	; 44
    27d4:	08 95       	ret

000027d6 <spiSetDataMode>:
    27d6:	9c b5       	in	r25, 0x2c	; 44
    27d8:	93 7f       	andi	r25, 0xF3	; 243
    27da:	89 2b       	or	r24, r25
    27dc:	8c bd       	out	0x2c, r24	; 44
    27de:	08 95       	ret

000027e0 <spiSelect>:
/*-----------------------------------------------------------------------*/
/* Select the SPI device                                    */
/*-----------------------------------------------------------------------*/

uint8_t spiSelect(SPI_SLAVE_SELECT SS_pin)	/* 1:Successful, 0:Timeout */
{
    27e0:	cf 93       	push	r28
    27e2:	c8 2f       	mov	r28, r24

	if( (xSemaphoreTake( xSPISemaphore, (SPI_TIMEOUT / portTICK_PERIOD_MS )) == pdTRUE ) )
    27e4:	48 ee       	ldi	r20, 0xE8	; 232
    27e6:	53 e0       	ldi	r21, 0x03	; 3
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	70 e0       	ldi	r23, 0x00	; 0
    27ec:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__data_end>
    27f0:	90 91 29 06 	lds	r25, 0x0629	; 0x800629 <__data_end+0x1>
    27f4:	0e 94 8f 0b 	call	0x171e	; 0x171e <xQueueSemaphoreTake>
    27f8:	81 30       	cpi	r24, 0x01	; 1
    27fa:	b1 f4       	brne	.+44     	; 0x2828 <spiSelect+0x48>
	{

		switch( SS_pin )
    27fc:	c1 30       	cpi	r28, 0x01	; 1
    27fe:	39 f0       	breq	.+14     	; 0x280e <spiSelect+0x2e>
    2800:	18 f0       	brcs	.+6      	; 0x2808 <spiSelect+0x28>
    2802:	c2 30       	cpi	r28, 0x02	; 2
    2804:	39 f0       	breq	.+14     	; 0x2814 <spiSelect+0x34>
    2806:	0d c0       	rjmp	.+26     	; 0x2822 <spiSelect+0x42>
		{
		case Wiznet:	// added for EtherMega Wiznet 5100/5200 support
#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
			W5100_SEN_ENABLE(1); // Enable SEN, to get on the SPI bus. PORT D7
#endif
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
    2808:	2c 98       	cbi	0x05, 4	; 5
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    280a:	81 e0       	ldi	r24, 0x01	; 1
		case Wiznet:	// added for EtherMega Wiznet 5100/5200 support
#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
			W5100_SEN_ENABLE(1); // Enable SEN, to get on the SPI bus. PORT D7
#endif
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
			break;
    280c:	0e c0       	rjmp	.+28     	; 0x282a <spiSelect+0x4a>

		case SDCard:	// added for  SD Card support
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
    280e:	a5 98       	cbi	0x14, 5	; 20
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    2810:	81 e0       	ldi	r24, 0x01	; 1
			SPI_PORT &= ~SPI_BIT_SS_WIZNET;
			break;

		case SDCard:	// added for  SD Card support
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
			break;
    2812:	0b c0       	rjmp	.+22     	; 0x282a <spiSelect+0x4a>

		case Gameduino2:// added for Gameduino2 using FTDI FT800
			SPI_PORT_SS_G2 &= ~SPI_BIT_SS_G2; // Pull SS low to select the Gameduino 2.
    2814:	e2 e0       	ldi	r30, 0x02	; 2
    2816:	f1 e0       	ldi	r31, 0x01	; 1
    2818:	80 81       	ld	r24, Z
    281a:	8f 7d       	andi	r24, 0xDF	; 223
    281c:	80 83       	st	Z, r24
		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
		}
		return 1;		// OK /
    281e:	81 e0       	ldi	r24, 0x01	; 1
			SPI_PORT_SS_SD &= ~SPI_BIT_SS_SD; // Pull SS low to select the uSD card.
			break;

		case Gameduino2:// added for Gameduino2 using FTDI FT800
			SPI_PORT_SS_G2 &= ~SPI_BIT_SS_G2; // Pull SS low to select the Gameduino 2.
			break;
    2820:	04 c0       	rjmp	.+8      	; 0x282a <spiSelect+0x4a>
			break;
#endif

		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
    2822:	28 98       	cbi	0x05, 0	; 5
			break;
		}
		return 1;		// OK /
    2824:	81 e0       	ldi	r24, 0x01	; 1
#endif

		case Default:	// default SS line for Arduino Uno
		default:
			SPI_PORT &= ~SPI_BIT_SS;
			break;
    2826:	01 c0       	rjmp	.+2      	; 0x282a <spiSelect+0x4a>
		}
		return 1;		// OK /
	}
	else
		return 0;		// Timeout
    2828:	80 e0       	ldi	r24, 0x00	; 0
}
    282a:	cf 91       	pop	r28
    282c:	08 95       	ret

0000282e <spiDeselect>:
/*-----------------------------------------------------------------------*/
/* Deselect the SPI device                                 */
/*-----------------------------------------------------------------------*/

void spiDeselect(SPI_SLAVE_SELECT SS_pin)
{
    282e:	0f 93       	push	r16
	// Pull SS high to Deselect the card.
	switch( SS_pin )
    2830:	81 30       	cpi	r24, 0x01	; 1
    2832:	31 f0       	breq	.+12     	; 0x2840 <spiDeselect+0x12>
    2834:	18 f0       	brcs	.+6      	; 0x283c <spiDeselect+0xe>
    2836:	82 30       	cpi	r24, 0x02	; 2
    2838:	29 f0       	breq	.+10     	; 0x2844 <spiDeselect+0x16>
    283a:	0a c0       	rjmp	.+20     	; 0x2850 <spiDeselect+0x22>
	{
	case Wiznet:		// added for EtherMega Wiznet 5100/5200 support
		SPI_PORT |= SPI_BIT_SS_WIZNET;
    283c:	2c 9a       	sbi	0x05, 4	; 5

#if defined(__DEF_W5100_DFROBOT__) && defined(_W5100_H_)
		W5100_SEN_ENABLE(0); // Disable SEN, to get off the SPI bus. PORT D7
#endif
		break;
    283e:	09 c0       	rjmp	.+18     	; 0x2852 <spiDeselect+0x24>

	case SDCard:		// added for  SD Card support
		SPI_PORT_SS_SD |= SPI_BIT_SS_SD;	// Pull SS high to deselect the uSD card.
    2840:	a5 9a       	sbi	0x14, 5	; 20
		break;
    2842:	07 c0       	rjmp	.+14     	; 0x2852 <spiDeselect+0x24>

	case Gameduino2:	// added for Gameduino 2 using FTDI FT800
		SPI_PORT_SS_G2 |= SPI_BIT_SS_G2;	// Pull SS high to deselect the Gameduino 2.
    2844:	e2 e0       	ldi	r30, 0x02	; 2
    2846:	f1 e0       	ldi	r31, 0x01	; 1
    2848:	80 81       	ld	r24, Z
    284a:	80 62       	ori	r24, 0x20	; 32
    284c:	80 83       	st	Z, r24
		break;
    284e:	01 c0       	rjmp	.+2      	; 0x2852 <spiDeselect+0x24>
		break;
#endif

	case Default:		// default SS line for Arduino Uno
	default:
		SPI_PORT |= SPI_BIT_SS;
    2850:	28 9a       	sbi	0x05, 0	; 5
		break;
	}

	xSemaphoreGive( xSPISemaphore );	/* Free FreeRTOS semaphore to allow other SPI access */
    2852:	00 e0       	ldi	r16, 0x00	; 0
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	a9 01       	movw	r20, r18
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__data_end>
    2862:	90 91 29 06 	lds	r25, 0x0629	; 0x800629 <__data_end+0x1>
    2866:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
}
    286a:	0f 91       	pop	r16
    286c:	08 95       	ret

0000286e <spiTransfer>:



uint8_t spiTransfer(uint8_t data)
{
    286e:	28 2f       	mov	r18, r24
	// That is NOT done by this function..., because...
	// Some devices need to have their SS held low across multiple transfer calls.
	// Using spiSelect (SS_pin);

	// If the SPI module has not been enabled yet, then return with nothing.
	if( !(SPCR & _BV(SPE)) ) return 0;
    2870:	9c b5       	in	r25, 0x2c	; 44
    2872:	89 2f       	mov	r24, r25
    2874:	80 74       	andi	r24, 0x40	; 64
    2876:	96 ff       	sbrs	r25, 6
    2878:	17 c0       	rjmp	.+46     	; 0x28a8 <spiTransfer+0x3a>

	// The SPI module is enabled, but it is in slave mode, so we can not
	// transmit the byte. This can happen if SSbar is an input and it went low.
	// We will try to recover by setting the MSTR bit.
	if( !(SPCR & _BV(MSTR)) )
    287a:	0c b4       	in	r0, 0x2c	; 44
    287c:	04 fc       	sbrc	r0, 4
    287e:	08 c0       	rjmp	.+16     	; 0x2890 <spiTransfer+0x22>
		{
			SPCR |= _BV(MSTR);
    2880:	8c b5       	in	r24, 0x2c	; 44
    2882:	80 61       	ori	r24, 0x10	; 16
    2884:	8c bd       	out	0x2c, r24	; 44
			if( !(SPCR & _BV(MSTR)) ) return 0;
    2886:	9c b5       	in	r25, 0x2c	; 44
    2888:	89 2f       	mov	r24, r25
    288a:	80 71       	andi	r24, 0x10	; 16
    288c:	94 ff       	sbrs	r25, 4
    288e:	0c c0       	rjmp	.+24     	; 0x28a8 <spiTransfer+0x3a>
		}

	SPDR = data; 	// Begin transmission
    2890:	2e bd       	out	0x2e, r18	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop from iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
	__asm__ __volatile__("nop");
    2892:	00 00       	nop

	while( !(SPSR & _BV(SPIF)) )
    2894:	05 c0       	rjmp	.+10     	; 0x28a0 <spiTransfer+0x32>
	{
		if( !(SPCR & _BV(MSTR)) ) return 0;
    2896:	9c b5       	in	r25, 0x2c	; 44
    2898:	89 2f       	mov	r24, r25
    289a:	80 71       	andi	r24, 0x10	; 16
    289c:	94 ff       	sbrs	r25, 4
    289e:	04 c0       	rjmp	.+8      	; 0x28a8 <spiTransfer+0x3a>
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
	__asm__ __volatile__("nop");

	while( !(SPSR & _BV(SPIF)) )
    28a0:	0d b4       	in	r0, 0x2d	; 45
    28a2:	07 fe       	sbrs	r0, 7
    28a4:	f8 cf       	rjmp	.-16     	; 0x2896 <spiTransfer+0x28>
		if( !(SPCR & _BV(MSTR)) ) return 0;
			// The SPI module has left master mode, so return.
			// Otherwise, this will be an infinite loop.
	}

	return SPDR;
    28a6:	8e b5       	in	r24, 0x2e	; 46

	// Make sure you pull slave select high to indicate end of transfer.
	// That is NOT done by this function.
	// Using spiDeselect (SS_pin);
}
    28a8:	08 95       	ret

000028aa <prvResetNextTaskUnblockTime>:
    28aa:	e0 91 60 06 	lds	r30, 0x0660	; 0x800660 <pxDelayedTaskList>
    28ae:	f0 91 61 06 	lds	r31, 0x0661	; 0x800661 <pxDelayedTaskList+0x1>
    28b2:	80 81       	ld	r24, Z
    28b4:	81 11       	cpse	r24, r1
    28b6:	0c c0       	rjmp	.+24     	; 0x28d0 <prvResetNextTaskUnblockTime+0x26>
    28b8:	8f ef       	ldi	r24, 0xFF	; 255
    28ba:	9f ef       	ldi	r25, 0xFF	; 255
    28bc:	dc 01       	movw	r26, r24
    28be:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <xNextTaskUnblockTime>
    28c2:	90 93 2e 06 	sts	0x062E, r25	; 0x80062e <xNextTaskUnblockTime+0x1>
    28c6:	a0 93 2f 06 	sts	0x062F, r26	; 0x80062f <xNextTaskUnblockTime+0x2>
    28ca:	b0 93 30 06 	sts	0x0630, r27	; 0x800630 <xNextTaskUnblockTime+0x3>
    28ce:	08 95       	ret
    28d0:	e0 91 60 06 	lds	r30, 0x0660	; 0x800660 <pxDelayedTaskList>
    28d4:	f0 91 61 06 	lds	r31, 0x0661	; 0x800661 <pxDelayedTaskList+0x1>
    28d8:	07 80       	ldd	r0, Z+7	; 0x07
    28da:	f0 85       	ldd	r31, Z+8	; 0x08
    28dc:	e0 2d       	mov	r30, r0
    28de:	00 84       	ldd	r0, Z+8	; 0x08
    28e0:	f1 85       	ldd	r31, Z+9	; 0x09
    28e2:	e0 2d       	mov	r30, r0
    28e4:	82 81       	ldd	r24, Z+2	; 0x02
    28e6:	93 81       	ldd	r25, Z+3	; 0x03
    28e8:	a4 81       	ldd	r26, Z+4	; 0x04
    28ea:	b5 81       	ldd	r27, Z+5	; 0x05
    28ec:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <xNextTaskUnblockTime>
    28f0:	90 93 2e 06 	sts	0x062E, r25	; 0x80062e <xNextTaskUnblockTime+0x1>
    28f4:	a0 93 2f 06 	sts	0x062F, r26	; 0x80062f <xNextTaskUnblockTime+0x2>
    28f8:	b0 93 30 06 	sts	0x0630, r27	; 0x800630 <xNextTaskUnblockTime+0x3>
    28fc:	08 95       	ret

000028fe <prvAddCurrentTaskToDelayedList>:
    28fe:	8f 92       	push	r8
    2900:	9f 92       	push	r9
    2902:	af 92       	push	r10
    2904:	bf 92       	push	r11
    2906:	cf 92       	push	r12
    2908:	df 92       	push	r13
    290a:	ef 92       	push	r14
    290c:	ff 92       	push	r15
    290e:	cf 93       	push	r28
    2910:	6b 01       	movw	r12, r22
    2912:	7c 01       	movw	r14, r24
    2914:	c4 2f       	mov	r28, r20
    2916:	80 90 37 06 	lds	r8, 0x0637	; 0x800637 <xTickCount>
    291a:	90 90 38 06 	lds	r9, 0x0638	; 0x800638 <xTickCount+0x1>
    291e:	a0 90 39 06 	lds	r10, 0x0639	; 0x800639 <xTickCount+0x2>
    2922:	b0 90 3a 06 	lds	r11, 0x063A	; 0x80063a <xTickCount+0x3>
    2926:	80 91 a4 06 	lds	r24, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    292a:	90 91 a5 06 	lds	r25, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    292e:	02 96       	adiw	r24, 0x02	; 2
    2930:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2934:	8f ef       	ldi	r24, 0xFF	; 255
    2936:	c8 16       	cp	r12, r24
    2938:	d8 06       	cpc	r13, r24
    293a:	e8 06       	cpc	r14, r24
    293c:	f8 06       	cpc	r15, r24
    293e:	69 f4       	brne	.+26     	; 0x295a <prvAddCurrentTaskToDelayedList+0x5c>
    2940:	cc 23       	and	r28, r28
    2942:	59 f0       	breq	.+22     	; 0x295a <prvAddCurrentTaskToDelayedList+0x5c>
    2944:	60 91 a4 06 	lds	r22, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    2948:	70 91 a5 06 	lds	r23, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    294c:	6e 5f       	subi	r22, 0xFE	; 254
    294e:	7f 4f       	sbci	r23, 0xFF	; 255
    2950:	8c e3       	ldi	r24, 0x3C	; 60
    2952:	96 e0       	ldi	r25, 0x06	; 6
    2954:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2958:	3f c0       	rjmp	.+126    	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    295a:	c8 0c       	add	r12, r8
    295c:	d9 1c       	adc	r13, r9
    295e:	ea 1c       	adc	r14, r10
    2960:	fb 1c       	adc	r15, r11
    2962:	e0 91 a4 06 	lds	r30, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    2966:	f0 91 a5 06 	lds	r31, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    296a:	c2 82       	std	Z+2, r12	; 0x02
    296c:	d3 82       	std	Z+3, r13	; 0x03
    296e:	e4 82       	std	Z+4, r14	; 0x04
    2970:	f5 82       	std	Z+5, r15	; 0x05
    2972:	c8 14       	cp	r12, r8
    2974:	d9 04       	cpc	r13, r9
    2976:	ea 04       	cpc	r14, r10
    2978:	fb 04       	cpc	r15, r11
    297a:	68 f4       	brcc	.+26     	; 0x2996 <prvAddCurrentTaskToDelayedList+0x98>
    297c:	60 91 a4 06 	lds	r22, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    2980:	70 91 a5 06 	lds	r23, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    2984:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <pxOverflowDelayedTaskList>
    2988:	90 91 5f 06 	lds	r25, 0x065F	; 0x80065f <pxOverflowDelayedTaskList+0x1>
    298c:	6e 5f       	subi	r22, 0xFE	; 254
    298e:	7f 4f       	sbci	r23, 0xFF	; 255
    2990:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    2994:	21 c0       	rjmp	.+66     	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    2996:	60 91 a4 06 	lds	r22, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    299a:	70 91 a5 06 	lds	r23, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    299e:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <pxDelayedTaskList>
    29a2:	90 91 61 06 	lds	r25, 0x0661	; 0x800661 <pxDelayedTaskList+0x1>
    29a6:	6e 5f       	subi	r22, 0xFE	; 254
    29a8:	7f 4f       	sbci	r23, 0xFF	; 255
    29aa:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    29ae:	80 91 2d 06 	lds	r24, 0x062D	; 0x80062d <xNextTaskUnblockTime>
    29b2:	90 91 2e 06 	lds	r25, 0x062E	; 0x80062e <xNextTaskUnblockTime+0x1>
    29b6:	a0 91 2f 06 	lds	r26, 0x062F	; 0x80062f <xNextTaskUnblockTime+0x2>
    29ba:	b0 91 30 06 	lds	r27, 0x0630	; 0x800630 <xNextTaskUnblockTime+0x3>
    29be:	c8 16       	cp	r12, r24
    29c0:	d9 06       	cpc	r13, r25
    29c2:	ea 06       	cpc	r14, r26
    29c4:	fb 06       	cpc	r15, r27
    29c6:	40 f4       	brcc	.+16     	; 0x29d8 <prvAddCurrentTaskToDelayedList+0xda>
    29c8:	c0 92 2d 06 	sts	0x062D, r12	; 0x80062d <xNextTaskUnblockTime>
    29cc:	d0 92 2e 06 	sts	0x062E, r13	; 0x80062e <xNextTaskUnblockTime+0x1>
    29d0:	e0 92 2f 06 	sts	0x062F, r14	; 0x80062f <xNextTaskUnblockTime+0x2>
    29d4:	f0 92 30 06 	sts	0x0630, r15	; 0x800630 <xNextTaskUnblockTime+0x3>
    29d8:	cf 91       	pop	r28
    29da:	ff 90       	pop	r15
    29dc:	ef 90       	pop	r14
    29de:	df 90       	pop	r13
    29e0:	cf 90       	pop	r12
    29e2:	bf 90       	pop	r11
    29e4:	af 90       	pop	r10
    29e6:	9f 90       	pop	r9
    29e8:	8f 90       	pop	r8
    29ea:	08 95       	ret

000029ec <xTaskCreate>:
    29ec:	4f 92       	push	r4
    29ee:	5f 92       	push	r5
    29f0:	6f 92       	push	r6
    29f2:	7f 92       	push	r7
    29f4:	8f 92       	push	r8
    29f6:	9f 92       	push	r9
    29f8:	af 92       	push	r10
    29fa:	bf 92       	push	r11
    29fc:	cf 92       	push	r12
    29fe:	df 92       	push	r13
    2a00:	ef 92       	push	r14
    2a02:	ff 92       	push	r15
    2a04:	0f 93       	push	r16
    2a06:	cf 93       	push	r28
    2a08:	df 93       	push	r29
    2a0a:	4c 01       	movw	r8, r24
    2a0c:	6b 01       	movw	r12, r22
    2a0e:	5a 01       	movw	r10, r20
    2a10:	29 01       	movw	r4, r18
    2a12:	ca 01       	movw	r24, r20
    2a14:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    2a18:	3c 01       	movw	r6, r24
    2a1a:	89 2b       	or	r24, r25
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <xTaskCreate+0x34>
    2a1e:	ec c0       	rjmp	.+472    	; 0x2bf8 <xTaskCreate+0x20c>
    2a20:	83 e3       	ldi	r24, 0x33	; 51
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    2a28:	ec 01       	movw	r28, r24
    2a2a:	89 2b       	or	r24, r25
    2a2c:	b1 f0       	breq	.+44     	; 0x2a5a <xTaskCreate+0x6e>
    2a2e:	7c 8e       	std	Y+28, r7	; 0x1c
    2a30:	6b 8e       	std	Y+27, r6	; 0x1b
    2a32:	a5 01       	movw	r20, r10
    2a34:	65 ea       	ldi	r22, 0xA5	; 165
    2a36:	70 e0       	ldi	r23, 0x00	; 0
    2a38:	c3 01       	movw	r24, r6
    2a3a:	0e 94 b3 5a 	call	0xb566	; 0xb566 <memset>
    2a3e:	21 e0       	ldi	r18, 0x01	; 1
    2a40:	a2 1a       	sub	r10, r18
    2a42:	b1 08       	sbc	r11, r1
    2a44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a48:	a8 0e       	add	r10, r24
    2a4a:	b9 1e       	adc	r11, r25
    2a4c:	d6 01       	movw	r26, r12
    2a4e:	8c 91       	ld	r24, X
    2a50:	8d 8f       	std	Y+29, r24	; 0x1d
    2a52:	8c 91       	ld	r24, X
    2a54:	81 11       	cpse	r24, r1
    2a56:	05 c0       	rjmp	.+10     	; 0x2a62 <xTaskCreate+0x76>
    2a58:	18 c0       	rjmp	.+48     	; 0x2a8a <xTaskCreate+0x9e>
    2a5a:	c3 01       	movw	r24, r6
    2a5c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vPortFree>
    2a60:	cb c0       	rjmp	.+406    	; 0x2bf8 <xTaskCreate+0x20c>
    2a62:	ae 01       	movw	r20, r28
    2a64:	42 5e       	subi	r20, 0xE2	; 226
    2a66:	5f 4f       	sbci	r21, 0xFF	; 255
    2a68:	f6 01       	movw	r30, r12
    2a6a:	31 96       	adiw	r30, 0x01	; 1
    2a6c:	bf e0       	ldi	r27, 0x0F	; 15
    2a6e:	cb 0e       	add	r12, r27
    2a70:	d1 1c       	adc	r13, r1
    2a72:	cf 01       	movw	r24, r30
    2a74:	21 91       	ld	r18, Z+
    2a76:	da 01       	movw	r26, r20
    2a78:	2d 93       	st	X+, r18
    2a7a:	ad 01       	movw	r20, r26
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	8c 91       	ld	r24, X
    2a80:	88 23       	and	r24, r24
    2a82:	19 f0       	breq	.+6      	; 0x2a8a <xTaskCreate+0x9e>
    2a84:	ec 15       	cp	r30, r12
    2a86:	fd 05       	cpc	r31, r13
    2a88:	a1 f7       	brne	.-24     	; 0x2a72 <xTaskCreate+0x86>
    2a8a:	1b a6       	std	Y+43, r1	; 0x2b
    2a8c:	04 30       	cpi	r16, 0x04	; 4
    2a8e:	08 f0       	brcs	.+2      	; 0x2a92 <xTaskCreate+0xa6>
    2a90:	03 e0       	ldi	r16, 0x03	; 3
    2a92:	0a 8f       	std	Y+26, r16	; 0x1a
    2a94:	0c a7       	std	Y+44, r16	; 0x2c
    2a96:	1d a6       	std	Y+45, r1	; 0x2d
    2a98:	6e 01       	movw	r12, r28
    2a9a:	b2 e0       	ldi	r27, 0x02	; 2
    2a9c:	cb 0e       	add	r12, r27
    2a9e:	d1 1c       	adc	r13, r1
    2aa0:	c6 01       	movw	r24, r12
    2aa2:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    2aa6:	ce 01       	movw	r24, r28
    2aa8:	0e 96       	adiw	r24, 0x0e	; 14
    2aaa:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    2aae:	db 87       	std	Y+11, r29	; 0x0b
    2ab0:	ca 87       	std	Y+10, r28	; 0x0a
    2ab2:	84 e0       	ldi	r24, 0x04	; 4
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	a0 e0       	ldi	r26, 0x00	; 0
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	80 1b       	sub	r24, r16
    2abc:	91 09       	sbc	r25, r1
    2abe:	a1 09       	sbc	r26, r1
    2ac0:	b1 09       	sbc	r27, r1
    2ac2:	8e 87       	std	Y+14, r24	; 0x0e
    2ac4:	9f 87       	std	Y+15, r25	; 0x0f
    2ac6:	a8 8b       	std	Y+16, r26	; 0x10
    2ac8:	b9 8b       	std	Y+17, r27	; 0x11
    2aca:	df 8b       	std	Y+23, r29	; 0x17
    2acc:	ce 8b       	std	Y+22, r28	; 0x16
    2ace:	1e a6       	std	Y+46, r1	; 0x2e
    2ad0:	1f a6       	std	Y+47, r1	; 0x2f
    2ad2:	18 aa       	std	Y+48, r1	; 0x30
    2ad4:	19 aa       	std	Y+49, r1	; 0x31
    2ad6:	1a aa       	std	Y+50, r1	; 0x32
    2ad8:	a2 01       	movw	r20, r4
    2ada:	b4 01       	movw	r22, r8
    2adc:	c5 01       	movw	r24, r10
    2ade:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pxPortInitialiseStack>
    2ae2:	99 83       	std	Y+1, r25	; 0x01
    2ae4:	88 83       	st	Y, r24
    2ae6:	e1 14       	cp	r14, r1
    2ae8:	f1 04       	cpc	r15, r1
    2aea:	19 f0       	breq	.+6      	; 0x2af2 <xTaskCreate+0x106>
    2aec:	f7 01       	movw	r30, r14
    2aee:	d1 83       	std	Z+1, r29	; 0x01
    2af0:	c0 83       	st	Z, r28
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	0f 92       	push	r0
    2af8:	80 91 3b 06 	lds	r24, 0x063B	; 0x80063b <uxCurrentNumberOfTasks>
    2afc:	8f 5f       	subi	r24, 0xFF	; 255
    2afe:	80 93 3b 06 	sts	0x063B, r24	; 0x80063b <uxCurrentNumberOfTasks>
    2b02:	80 91 a4 06 	lds	r24, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    2b06:	90 91 a5 06 	lds	r25, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    2b0a:	89 2b       	or	r24, r25
    2b0c:	d1 f5       	brne	.+116    	; 0x2b82 <xTaskCreate+0x196>
    2b0e:	d0 93 a5 06 	sts	0x06A5, r29	; 0x8006a5 <pxCurrentTCB+0x1>
    2b12:	c0 93 a4 06 	sts	0x06A4, r28	; 0x8006a4 <pxCurrentTCB>
    2b16:	80 91 3b 06 	lds	r24, 0x063B	; 0x80063b <uxCurrentNumberOfTasks>
    2b1a:	81 30       	cpi	r24, 0x01	; 1
    2b1c:	09 f0       	breq	.+2      	; 0x2b20 <xTaskCreate+0x134>
    2b1e:	41 c0       	rjmp	.+130    	; 0x2ba2 <xTaskCreate+0x1b6>
    2b20:	88 e7       	ldi	r24, 0x78	; 120
    2b22:	96 e0       	ldi	r25, 0x06	; 6
    2b24:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b28:	83 e8       	ldi	r24, 0x83	; 131
    2b2a:	96 e0       	ldi	r25, 0x06	; 6
    2b2c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b30:	8e e8       	ldi	r24, 0x8E	; 142
    2b32:	96 e0       	ldi	r25, 0x06	; 6
    2b34:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b38:	89 e9       	ldi	r24, 0x99	; 153
    2b3a:	96 e0       	ldi	r25, 0x06	; 6
    2b3c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b40:	8d e6       	ldi	r24, 0x6D	; 109
    2b42:	96 e0       	ldi	r25, 0x06	; 6
    2b44:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b48:	82 e6       	ldi	r24, 0x62	; 98
    2b4a:	96 e0       	ldi	r25, 0x06	; 6
    2b4c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b50:	83 e5       	ldi	r24, 0x53	; 83
    2b52:	96 e0       	ldi	r25, 0x06	; 6
    2b54:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b58:	88 e4       	ldi	r24, 0x48	; 72
    2b5a:	96 e0       	ldi	r25, 0x06	; 6
    2b5c:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b60:	8c e3       	ldi	r24, 0x3C	; 60
    2b62:	96 e0       	ldi	r25, 0x06	; 6
    2b64:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    2b68:	8d e6       	ldi	r24, 0x6D	; 109
    2b6a:	96 e0       	ldi	r25, 0x06	; 6
    2b6c:	90 93 61 06 	sts	0x0661, r25	; 0x800661 <pxDelayedTaskList+0x1>
    2b70:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <pxDelayedTaskList>
    2b74:	82 e6       	ldi	r24, 0x62	; 98
    2b76:	96 e0       	ldi	r25, 0x06	; 6
    2b78:	90 93 5f 06 	sts	0x065F, r25	; 0x80065f <pxOverflowDelayedTaskList+0x1>
    2b7c:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <pxOverflowDelayedTaskList>
    2b80:	10 c0       	rjmp	.+32     	; 0x2ba2 <xTaskCreate+0x1b6>
    2b82:	80 91 35 06 	lds	r24, 0x0635	; 0x800635 <xSchedulerRunning>
    2b86:	81 11       	cpse	r24, r1
    2b88:	0c c0       	rjmp	.+24     	; 0x2ba2 <xTaskCreate+0x1b6>
    2b8a:	e0 91 a4 06 	lds	r30, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    2b8e:	f0 91 a5 06 	lds	r31, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    2b92:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b94:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b96:	89 17       	cp	r24, r25
    2b98:	20 f0       	brcs	.+8      	; 0x2ba2 <xTaskCreate+0x1b6>
    2b9a:	d0 93 a5 06 	sts	0x06A5, r29	; 0x8006a5 <pxCurrentTCB+0x1>
    2b9e:	c0 93 a4 06 	sts	0x06A4, r28	; 0x8006a4 <pxCurrentTCB>
    2ba2:	80 91 31 06 	lds	r24, 0x0631	; 0x800631 <uxTaskNumber>
    2ba6:	8f 5f       	subi	r24, 0xFF	; 255
    2ba8:	80 93 31 06 	sts	0x0631, r24	; 0x800631 <uxTaskNumber>
    2bac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bae:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <uxTopReadyPriority>
    2bb2:	98 17       	cp	r25, r24
    2bb4:	10 f4       	brcc	.+4      	; 0x2bba <xTaskCreate+0x1ce>
    2bb6:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <uxTopReadyPriority>
    2bba:	fb e0       	ldi	r31, 0x0B	; 11
    2bbc:	8f 9f       	mul	r24, r31
    2bbe:	c0 01       	movw	r24, r0
    2bc0:	11 24       	eor	r1, r1
    2bc2:	b6 01       	movw	r22, r12
    2bc4:	88 58       	subi	r24, 0x88	; 136
    2bc6:	99 4f       	sbci	r25, 0xF9	; 249
    2bc8:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2bcc:	0f 90       	pop	r0
    2bce:	0f be       	out	0x3f, r0	; 63
    2bd0:	80 91 35 06 	lds	r24, 0x0635	; 0x800635 <xSchedulerRunning>
    2bd4:	88 23       	and	r24, r24
    2bd6:	61 f0       	breq	.+24     	; 0x2bf0 <xTaskCreate+0x204>
    2bd8:	e0 91 a4 06 	lds	r30, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    2bdc:	f0 91 a5 06 	lds	r31, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    2be0:	92 8d       	ldd	r25, Z+26	; 0x1a
    2be2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2be4:	98 17       	cp	r25, r24
    2be6:	30 f4       	brcc	.+12     	; 0x2bf4 <xTaskCreate+0x208>
    2be8:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	05 c0       	rjmp	.+10     	; 0x2bfa <xTaskCreate+0x20e>
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	03 c0       	rjmp	.+6      	; 0x2bfa <xTaskCreate+0x20e>
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	01 c0       	rjmp	.+2      	; 0x2bfa <xTaskCreate+0x20e>
    2bf8:	8f ef       	ldi	r24, 0xFF	; 255
    2bfa:	df 91       	pop	r29
    2bfc:	cf 91       	pop	r28
    2bfe:	0f 91       	pop	r16
    2c00:	ff 90       	pop	r15
    2c02:	ef 90       	pop	r14
    2c04:	df 90       	pop	r13
    2c06:	cf 90       	pop	r12
    2c08:	bf 90       	pop	r11
    2c0a:	af 90       	pop	r10
    2c0c:	9f 90       	pop	r9
    2c0e:	8f 90       	pop	r8
    2c10:	7f 90       	pop	r7
    2c12:	6f 90       	pop	r6
    2c14:	5f 90       	pop	r5
    2c16:	4f 90       	pop	r4
    2c18:	08 95       	ret

00002c1a <vTaskResume>:
    2c1a:	0f 93       	push	r16
    2c1c:	1f 93       	push	r17
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
    2c22:	00 97       	sbiw	r24, 0x00	; 0
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <vTaskResume+0xe>
    2c26:	3d c0       	rjmp	.+122    	; 0x2ca2 <vTaskResume+0x88>
    2c28:	20 91 a4 06 	lds	r18, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    2c2c:	30 91 a5 06 	lds	r19, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    2c30:	82 17       	cp	r24, r18
    2c32:	93 07       	cpc	r25, r19
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <vTaskResume+0x1e>
    2c36:	35 c0       	rjmp	.+106    	; 0x2ca2 <vTaskResume+0x88>
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	0f 92       	push	r0
    2c3e:	fc 01       	movw	r30, r24
    2c40:	24 85       	ldd	r18, Z+12	; 0x0c
    2c42:	35 85       	ldd	r19, Z+13	; 0x0d
    2c44:	2c 53       	subi	r18, 0x3C	; 60
    2c46:	36 40       	sbci	r19, 0x06	; 6
    2c48:	51 f5       	brne	.+84     	; 0x2c9e <vTaskResume+0x84>
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	20 8d       	ldd	r18, Z+24	; 0x18
    2c4e:	31 8d       	ldd	r19, Z+25	; 0x19
    2c50:	f6 e0       	ldi	r31, 0x06	; 6
    2c52:	23 35       	cpi	r18, 0x53	; 83
    2c54:	3f 07       	cpc	r19, r31
    2c56:	19 f1       	breq	.+70     	; 0x2c9e <vTaskResume+0x84>
    2c58:	23 2b       	or	r18, r19
    2c5a:	09 f5       	brne	.+66     	; 0x2c9e <vTaskResume+0x84>
    2c5c:	ec 01       	movw	r28, r24
    2c5e:	8c 01       	movw	r16, r24
    2c60:	0e 5f       	subi	r16, 0xFE	; 254
    2c62:	1f 4f       	sbci	r17, 0xFF	; 255
    2c64:	c8 01       	movw	r24, r16
    2c66:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2c6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c6c:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <uxTopReadyPriority>
    2c70:	98 17       	cp	r25, r24
    2c72:	10 f4       	brcc	.+4      	; 0x2c78 <vTaskResume+0x5e>
    2c74:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <uxTopReadyPriority>
    2c78:	2b e0       	ldi	r18, 0x0B	; 11
    2c7a:	82 9f       	mul	r24, r18
    2c7c:	c0 01       	movw	r24, r0
    2c7e:	11 24       	eor	r1, r1
    2c80:	b8 01       	movw	r22, r16
    2c82:	88 58       	subi	r24, 0x88	; 136
    2c84:	99 4f       	sbci	r25, 0xF9	; 249
    2c86:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2c8a:	e0 91 a4 06 	lds	r30, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    2c8e:	f0 91 a5 06 	lds	r31, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    2c92:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c94:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c96:	98 17       	cp	r25, r24
    2c98:	10 f0       	brcs	.+4      	; 0x2c9e <vTaskResume+0x84>
    2c9a:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2c9e:	0f 90       	pop	r0
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	df 91       	pop	r29
    2ca4:	cf 91       	pop	r28
    2ca6:	1f 91       	pop	r17
    2ca8:	0f 91       	pop	r16
    2caa:	08 95       	ret

00002cac <vTaskStartScheduler>:
    2cac:	ef 92       	push	r14
    2cae:	ff 92       	push	r15
    2cb0:	0f 93       	push	r16
    2cb2:	0f 2e       	mov	r0, r31
    2cb4:	fb e2       	ldi	r31, 0x2B	; 43
    2cb6:	ef 2e       	mov	r14, r31
    2cb8:	f6 e0       	ldi	r31, 0x06	; 6
    2cba:	ff 2e       	mov	r15, r31
    2cbc:	f0 2d       	mov	r31, r0
    2cbe:	00 e0       	ldi	r16, 0x00	; 0
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	40 e8       	ldi	r20, 0x80	; 128
    2cc6:	50 e0       	ldi	r21, 0x00	; 0
    2cc8:	66 e1       	ldi	r22, 0x16	; 22
    2cca:	72 e0       	ldi	r23, 0x02	; 2
    2ccc:	88 e3       	ldi	r24, 0x38	; 56
    2cce:	95 e0       	ldi	r25, 0x05	; 5
    2cd0:	8d de       	rcall	.-742    	; 0x29ec <xTaskCreate>
    2cd2:	81 30       	cpi	r24, 0x01	; 1
    2cd4:	e1 f4       	brne	.+56     	; 0x2d0e <vTaskStartScheduler+0x62>
    2cd6:	ce d4       	rcall	.+2460   	; 0x3674 <xTimerCreateTimerTask>
    2cd8:	81 30       	cpi	r24, 0x01	; 1
    2cda:	c9 f4       	brne	.+50     	; 0x2d0e <vTaskStartScheduler+0x62>
    2cdc:	f8 94       	cli
    2cde:	8f ef       	ldi	r24, 0xFF	; 255
    2ce0:	9f ef       	ldi	r25, 0xFF	; 255
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <xNextTaskUnblockTime>
    2ce8:	90 93 2e 06 	sts	0x062E, r25	; 0x80062e <xNextTaskUnblockTime+0x1>
    2cec:	a0 93 2f 06 	sts	0x062F, r26	; 0x80062f <xNextTaskUnblockTime+0x2>
    2cf0:	b0 93 30 06 	sts	0x0630, r27	; 0x800630 <xNextTaskUnblockTime+0x3>
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	80 93 35 06 	sts	0x0635, r24	; 0x800635 <xSchedulerRunning>
    2cfa:	10 92 37 06 	sts	0x0637, r1	; 0x800637 <xTickCount>
    2cfe:	10 92 38 06 	sts	0x0638, r1	; 0x800638 <xTickCount+0x1>
    2d02:	10 92 39 06 	sts	0x0639, r1	; 0x800639 <xTickCount+0x2>
    2d06:	10 92 3a 06 	sts	0x063A, r1	; 0x80063a <xTickCount+0x3>
    2d0a:	0e 94 56 06 	call	0xcac	; 0xcac <xPortStartScheduler>
    2d0e:	0f 91       	pop	r16
    2d10:	ff 90       	pop	r15
    2d12:	ef 90       	pop	r14
    2d14:	08 95       	ret

00002d16 <vTaskSuspendAll>:
    2d16:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <uxSchedulerSuspended>
    2d1a:	8f 5f       	subi	r24, 0xFF	; 255
    2d1c:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <uxSchedulerSuspended>
    2d20:	08 95       	ret

00002d22 <xTaskGetTickCount>:
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	0f 92       	push	r0
    2d28:	60 91 37 06 	lds	r22, 0x0637	; 0x800637 <xTickCount>
    2d2c:	70 91 38 06 	lds	r23, 0x0638	; 0x800638 <xTickCount+0x1>
    2d30:	80 91 39 06 	lds	r24, 0x0639	; 0x800639 <xTickCount+0x2>
    2d34:	90 91 3a 06 	lds	r25, 0x063A	; 0x80063a <xTickCount+0x3>
    2d38:	0f 90       	pop	r0
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	08 95       	ret

00002d3e <xTaskIncrementTick>:
    2d3e:	9f 92       	push	r9
    2d40:	af 92       	push	r10
    2d42:	bf 92       	push	r11
    2d44:	cf 92       	push	r12
    2d46:	df 92       	push	r13
    2d48:	ef 92       	push	r14
    2d4a:	ff 92       	push	r15
    2d4c:	0f 93       	push	r16
    2d4e:	1f 93       	push	r17
    2d50:	cf 93       	push	r28
    2d52:	df 93       	push	r29
    2d54:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <uxSchedulerSuspended>
    2d58:	81 11       	cpse	r24, r1
    2d5a:	ad c0       	rjmp	.+346    	; 0x2eb6 <xTaskIncrementTick+0x178>
    2d5c:	c0 90 37 06 	lds	r12, 0x0637	; 0x800637 <xTickCount>
    2d60:	d0 90 38 06 	lds	r13, 0x0638	; 0x800638 <xTickCount+0x1>
    2d64:	e0 90 39 06 	lds	r14, 0x0639	; 0x800639 <xTickCount+0x2>
    2d68:	f0 90 3a 06 	lds	r15, 0x063A	; 0x80063a <xTickCount+0x3>
    2d6c:	8f ef       	ldi	r24, 0xFF	; 255
    2d6e:	c8 1a       	sub	r12, r24
    2d70:	d8 0a       	sbc	r13, r24
    2d72:	e8 0a       	sbc	r14, r24
    2d74:	f8 0a       	sbc	r15, r24
    2d76:	c0 92 37 06 	sts	0x0637, r12	; 0x800637 <xTickCount>
    2d7a:	d0 92 38 06 	sts	0x0638, r13	; 0x800638 <xTickCount+0x1>
    2d7e:	e0 92 39 06 	sts	0x0639, r14	; 0x800639 <xTickCount+0x2>
    2d82:	f0 92 3a 06 	sts	0x063A, r15	; 0x80063a <xTickCount+0x3>
    2d86:	c1 14       	cp	r12, r1
    2d88:	d1 04       	cpc	r13, r1
    2d8a:	e1 04       	cpc	r14, r1
    2d8c:	f1 04       	cpc	r15, r1
    2d8e:	b1 f4       	brne	.+44     	; 0x2dbc <xTaskIncrementTick+0x7e>
    2d90:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <pxDelayedTaskList>
    2d94:	90 91 61 06 	lds	r25, 0x0661	; 0x800661 <pxDelayedTaskList+0x1>
    2d98:	20 91 5e 06 	lds	r18, 0x065E	; 0x80065e <pxOverflowDelayedTaskList>
    2d9c:	30 91 5f 06 	lds	r19, 0x065F	; 0x80065f <pxOverflowDelayedTaskList+0x1>
    2da0:	30 93 61 06 	sts	0x0661, r19	; 0x800661 <pxDelayedTaskList+0x1>
    2da4:	20 93 60 06 	sts	0x0660, r18	; 0x800660 <pxDelayedTaskList>
    2da8:	90 93 5f 06 	sts	0x065F, r25	; 0x80065f <pxOverflowDelayedTaskList+0x1>
    2dac:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <pxOverflowDelayedTaskList>
    2db0:	80 91 32 06 	lds	r24, 0x0632	; 0x800632 <xNumOfOverflows>
    2db4:	8f 5f       	subi	r24, 0xFF	; 255
    2db6:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <xNumOfOverflows>
    2dba:	77 dd       	rcall	.-1298   	; 0x28aa <prvResetNextTaskUnblockTime>
    2dbc:	80 91 2d 06 	lds	r24, 0x062D	; 0x80062d <xNextTaskUnblockTime>
    2dc0:	90 91 2e 06 	lds	r25, 0x062E	; 0x80062e <xNextTaskUnblockTime+0x1>
    2dc4:	a0 91 2f 06 	lds	r26, 0x062F	; 0x80062f <xNextTaskUnblockTime+0x2>
    2dc8:	b0 91 30 06 	lds	r27, 0x0630	; 0x800630 <xNextTaskUnblockTime+0x3>
    2dcc:	c8 16       	cp	r12, r24
    2dce:	d9 06       	cpc	r13, r25
    2dd0:	ea 06       	cpc	r14, r26
    2dd2:	fb 06       	cpc	r15, r27
    2dd4:	10 f4       	brcc	.+4      	; 0x2dda <xTaskIncrementTick+0x9c>
    2dd6:	b1 2c       	mov	r11, r1
    2dd8:	5d c0       	rjmp	.+186    	; 0x2e94 <xTaskIncrementTick+0x156>
    2dda:	b1 2c       	mov	r11, r1
    2ddc:	0f 2e       	mov	r0, r31
    2dde:	fb e0       	ldi	r31, 0x0B	; 11
    2de0:	af 2e       	mov	r10, r31
    2de2:	f0 2d       	mov	r31, r0
    2de4:	99 24       	eor	r9, r9
    2de6:	93 94       	inc	r9
    2de8:	e0 91 60 06 	lds	r30, 0x0660	; 0x800660 <pxDelayedTaskList>
    2dec:	f0 91 61 06 	lds	r31, 0x0661	; 0x800661 <pxDelayedTaskList+0x1>
    2df0:	80 81       	ld	r24, Z
    2df2:	81 11       	cpse	r24, r1
    2df4:	0c c0       	rjmp	.+24     	; 0x2e0e <xTaskIncrementTick+0xd0>
    2df6:	8f ef       	ldi	r24, 0xFF	; 255
    2df8:	9f ef       	ldi	r25, 0xFF	; 255
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <xNextTaskUnblockTime>
    2e00:	90 93 2e 06 	sts	0x062E, r25	; 0x80062e <xNextTaskUnblockTime+0x1>
    2e04:	a0 93 2f 06 	sts	0x062F, r26	; 0x80062f <xNextTaskUnblockTime+0x2>
    2e08:	b0 93 30 06 	sts	0x0630, r27	; 0x800630 <xNextTaskUnblockTime+0x3>
    2e0c:	43 c0       	rjmp	.+134    	; 0x2e94 <xTaskIncrementTick+0x156>
    2e0e:	e0 91 60 06 	lds	r30, 0x0660	; 0x800660 <pxDelayedTaskList>
    2e12:	f0 91 61 06 	lds	r31, 0x0661	; 0x800661 <pxDelayedTaskList+0x1>
    2e16:	07 80       	ldd	r0, Z+7	; 0x07
    2e18:	f0 85       	ldd	r31, Z+8	; 0x08
    2e1a:	e0 2d       	mov	r30, r0
    2e1c:	c0 85       	ldd	r28, Z+8	; 0x08
    2e1e:	d1 85       	ldd	r29, Z+9	; 0x09
    2e20:	8a 81       	ldd	r24, Y+2	; 0x02
    2e22:	9b 81       	ldd	r25, Y+3	; 0x03
    2e24:	ac 81       	ldd	r26, Y+4	; 0x04
    2e26:	bd 81       	ldd	r27, Y+5	; 0x05
    2e28:	c8 16       	cp	r12, r24
    2e2a:	d9 06       	cpc	r13, r25
    2e2c:	ea 06       	cpc	r14, r26
    2e2e:	fb 06       	cpc	r15, r27
    2e30:	48 f4       	brcc	.+18     	; 0x2e44 <xTaskIncrementTick+0x106>
    2e32:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <xNextTaskUnblockTime>
    2e36:	90 93 2e 06 	sts	0x062E, r25	; 0x80062e <xNextTaskUnblockTime+0x1>
    2e3a:	a0 93 2f 06 	sts	0x062F, r26	; 0x80062f <xNextTaskUnblockTime+0x2>
    2e3e:	b0 93 30 06 	sts	0x0630, r27	; 0x800630 <xNextTaskUnblockTime+0x3>
    2e42:	28 c0       	rjmp	.+80     	; 0x2e94 <xTaskIncrementTick+0x156>
    2e44:	8e 01       	movw	r16, r28
    2e46:	0e 5f       	subi	r16, 0xFE	; 254
    2e48:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4a:	c8 01       	movw	r24, r16
    2e4c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2e50:	88 8d       	ldd	r24, Y+24	; 0x18
    2e52:	99 8d       	ldd	r25, Y+25	; 0x19
    2e54:	89 2b       	or	r24, r25
    2e56:	21 f0       	breq	.+8      	; 0x2e60 <xTaskIncrementTick+0x122>
    2e58:	ce 01       	movw	r24, r28
    2e5a:	0e 96       	adiw	r24, 0x0e	; 14
    2e5c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2e60:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e62:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <uxTopReadyPriority>
    2e66:	98 17       	cp	r25, r24
    2e68:	10 f4       	brcc	.+4      	; 0x2e6e <xTaskIncrementTick+0x130>
    2e6a:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <uxTopReadyPriority>
    2e6e:	a8 9e       	mul	r10, r24
    2e70:	c0 01       	movw	r24, r0
    2e72:	11 24       	eor	r1, r1
    2e74:	b8 01       	movw	r22, r16
    2e76:	88 58       	subi	r24, 0x88	; 136
    2e78:	99 4f       	sbci	r25, 0xF9	; 249
    2e7a:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2e7e:	e0 91 a4 06 	lds	r30, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    2e82:	f0 91 a5 06 	lds	r31, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    2e86:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e88:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e8a:	98 17       	cp	r25, r24
    2e8c:	08 f4       	brcc	.+2      	; 0x2e90 <xTaskIncrementTick+0x152>
    2e8e:	ac cf       	rjmp	.-168    	; 0x2de8 <xTaskIncrementTick+0xaa>
    2e90:	b9 2c       	mov	r11, r9
    2e92:	aa cf       	rjmp	.-172    	; 0x2de8 <xTaskIncrementTick+0xaa>
    2e94:	e0 91 a4 06 	lds	r30, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    2e98:	f0 91 a5 06 	lds	r31, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    2e9c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2e9e:	8b e0       	ldi	r24, 0x0B	; 11
    2ea0:	e8 9f       	mul	r30, r24
    2ea2:	f0 01       	movw	r30, r0
    2ea4:	11 24       	eor	r1, r1
    2ea6:	e8 58       	subi	r30, 0x88	; 136
    2ea8:	f9 4f       	sbci	r31, 0xF9	; 249
    2eaa:	80 81       	ld	r24, Z
    2eac:	82 30       	cpi	r24, 0x02	; 2
    2eae:	48 f0       	brcs	.+18     	; 0x2ec2 <xTaskIncrementTick+0x184>
    2eb0:	bb 24       	eor	r11, r11
    2eb2:	b3 94       	inc	r11
    2eb4:	06 c0       	rjmp	.+12     	; 0x2ec2 <xTaskIncrementTick+0x184>
    2eb6:	80 91 34 06 	lds	r24, 0x0634	; 0x800634 <uxPendedTicks>
    2eba:	8f 5f       	subi	r24, 0xFF	; 255
    2ebc:	80 93 34 06 	sts	0x0634, r24	; 0x800634 <uxPendedTicks>
    2ec0:	b1 2c       	mov	r11, r1
    2ec2:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <xYieldPending>
    2ec6:	88 23       	and	r24, r24
    2ec8:	11 f0       	breq	.+4      	; 0x2ece <xTaskIncrementTick+0x190>
    2eca:	bb 24       	eor	r11, r11
    2ecc:	b3 94       	inc	r11
    2ece:	8b 2d       	mov	r24, r11
    2ed0:	df 91       	pop	r29
    2ed2:	cf 91       	pop	r28
    2ed4:	1f 91       	pop	r17
    2ed6:	0f 91       	pop	r16
    2ed8:	ff 90       	pop	r15
    2eda:	ef 90       	pop	r14
    2edc:	df 90       	pop	r13
    2ede:	cf 90       	pop	r12
    2ee0:	bf 90       	pop	r11
    2ee2:	af 90       	pop	r10
    2ee4:	9f 90       	pop	r9
    2ee6:	08 95       	ret

00002ee8 <xTaskResumeAll>:
    2ee8:	cf 92       	push	r12
    2eea:	df 92       	push	r13
    2eec:	ef 92       	push	r14
    2eee:	ff 92       	push	r15
    2ef0:	0f 93       	push	r16
    2ef2:	1f 93       	push	r17
    2ef4:	cf 93       	push	r28
    2ef6:	df 93       	push	r29
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	f8 94       	cli
    2efc:	0f 92       	push	r0
    2efe:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <uxSchedulerSuspended>
    2f02:	81 50       	subi	r24, 0x01	; 1
    2f04:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <uxSchedulerSuspended>
    2f08:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <uxSchedulerSuspended>
    2f0c:	81 11       	cpse	r24, r1
    2f0e:	5a c0       	rjmp	.+180    	; 0x2fc4 <xTaskResumeAll+0xdc>
    2f10:	80 91 3b 06 	lds	r24, 0x063B	; 0x80063b <uxCurrentNumberOfTasks>
    2f14:	81 11       	cpse	r24, r1
    2f16:	2c c0       	rjmp	.+88     	; 0x2f70 <xTaskResumeAll+0x88>
    2f18:	58 c0       	rjmp	.+176    	; 0x2fca <xTaskResumeAll+0xe2>
    2f1a:	d7 01       	movw	r26, r14
    2f1c:	17 96       	adiw	r26, 0x07	; 7
    2f1e:	ed 91       	ld	r30, X+
    2f20:	fc 91       	ld	r31, X
    2f22:	18 97       	sbiw	r26, 0x08	; 8
    2f24:	c0 85       	ldd	r28, Z+8	; 0x08
    2f26:	d1 85       	ldd	r29, Z+9	; 0x09
    2f28:	ce 01       	movw	r24, r28
    2f2a:	0e 96       	adiw	r24, 0x0e	; 14
    2f2c:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2f30:	8e 01       	movw	r16, r28
    2f32:	0e 5f       	subi	r16, 0xFE	; 254
    2f34:	1f 4f       	sbci	r17, 0xFF	; 255
    2f36:	c8 01       	movw	r24, r16
    2f38:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    2f3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f3e:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <uxTopReadyPriority>
    2f42:	98 17       	cp	r25, r24
    2f44:	10 f4       	brcc	.+4      	; 0x2f4a <xTaskResumeAll+0x62>
    2f46:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <uxTopReadyPriority>
    2f4a:	d8 9e       	mul	r13, r24
    2f4c:	c0 01       	movw	r24, r0
    2f4e:	11 24       	eor	r1, r1
    2f50:	b8 01       	movw	r22, r16
    2f52:	88 58       	subi	r24, 0x88	; 136
    2f54:	99 4f       	sbci	r25, 0xF9	; 249
    2f56:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    2f5a:	e0 91 a4 06 	lds	r30, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    2f5e:	f0 91 a5 06 	lds	r31, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    2f62:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f64:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f66:	98 17       	cp	r25, r24
    2f68:	88 f0       	brcs	.+34     	; 0x2f8c <xTaskResumeAll+0xa4>
    2f6a:	c0 92 33 06 	sts	0x0633, r12	; 0x800633 <xYieldPending>
    2f6e:	0e c0       	rjmp	.+28     	; 0x2f8c <xTaskResumeAll+0xa4>
    2f70:	c0 e0       	ldi	r28, 0x00	; 0
    2f72:	d0 e0       	ldi	r29, 0x00	; 0
    2f74:	0f 2e       	mov	r0, r31
    2f76:	f3 e5       	ldi	r31, 0x53	; 83
    2f78:	ef 2e       	mov	r14, r31
    2f7a:	f6 e0       	ldi	r31, 0x06	; 6
    2f7c:	ff 2e       	mov	r15, r31
    2f7e:	f0 2d       	mov	r31, r0
    2f80:	0f 2e       	mov	r0, r31
    2f82:	fb e0       	ldi	r31, 0x0B	; 11
    2f84:	df 2e       	mov	r13, r31
    2f86:	f0 2d       	mov	r31, r0
    2f88:	cc 24       	eor	r12, r12
    2f8a:	c3 94       	inc	r12
    2f8c:	f7 01       	movw	r30, r14
    2f8e:	80 81       	ld	r24, Z
    2f90:	81 11       	cpse	r24, r1
    2f92:	c3 cf       	rjmp	.-122    	; 0x2f1a <xTaskResumeAll+0x32>
    2f94:	cd 2b       	or	r28, r29
    2f96:	09 f0       	breq	.+2      	; 0x2f9a <xTaskResumeAll+0xb2>
    2f98:	88 dc       	rcall	.-1776   	; 0x28aa <prvResetNextTaskUnblockTime>
    2f9a:	c0 91 34 06 	lds	r28, 0x0634	; 0x800634 <uxPendedTicks>
    2f9e:	cc 23       	and	r28, r28
    2fa0:	49 f0       	breq	.+18     	; 0x2fb4 <xTaskResumeAll+0xcc>
    2fa2:	d1 e0       	ldi	r29, 0x01	; 1
    2fa4:	cc de       	rcall	.-616    	; 0x2d3e <xTaskIncrementTick>
    2fa6:	81 11       	cpse	r24, r1
    2fa8:	d0 93 33 06 	sts	0x0633, r29	; 0x800633 <xYieldPending>
    2fac:	c1 50       	subi	r28, 0x01	; 1
    2fae:	d1 f7       	brne	.-12     	; 0x2fa4 <xTaskResumeAll+0xbc>
    2fb0:	10 92 34 06 	sts	0x0634, r1	; 0x800634 <uxPendedTicks>
    2fb4:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <xYieldPending>
    2fb8:	88 23       	and	r24, r24
    2fba:	31 f0       	breq	.+12     	; 0x2fc8 <xTaskResumeAll+0xe0>
    2fbc:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	03 c0       	rjmp	.+6      	; 0x2fca <xTaskResumeAll+0xe2>
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	01 c0       	rjmp	.+2      	; 0x2fca <xTaskResumeAll+0xe2>
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	0f 90       	pop	r0
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	ff 90       	pop	r15
    2fd8:	ef 90       	pop	r14
    2fda:	df 90       	pop	r13
    2fdc:	cf 90       	pop	r12
    2fde:	08 95       	ret

00002fe0 <vTaskDelay>:
    2fe0:	cf 92       	push	r12
    2fe2:	df 92       	push	r13
    2fe4:	ef 92       	push	r14
    2fe6:	ff 92       	push	r15
    2fe8:	6b 01       	movw	r12, r22
    2fea:	7c 01       	movw	r14, r24
    2fec:	67 2b       	or	r22, r23
    2fee:	68 2b       	or	r22, r24
    2ff0:	69 2b       	or	r22, r25
    2ff2:	41 f0       	breq	.+16     	; 0x3004 <vTaskDelay+0x24>
    2ff4:	90 de       	rcall	.-736    	; 0x2d16 <vTaskSuspendAll>
    2ff6:	40 e0       	ldi	r20, 0x00	; 0
    2ff8:	c7 01       	movw	r24, r14
    2ffa:	b6 01       	movw	r22, r12
    2ffc:	80 dc       	rcall	.-1792   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    2ffe:	74 df       	rcall	.-280    	; 0x2ee8 <xTaskResumeAll>
    3000:	81 11       	cpse	r24, r1
    3002:	02 c0       	rjmp	.+4      	; 0x3008 <vTaskDelay+0x28>
    3004:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3008:	ff 90       	pop	r15
    300a:	ef 90       	pop	r14
    300c:	df 90       	pop	r13
    300e:	cf 90       	pop	r12
    3010:	08 95       	ret

00003012 <vTaskSwitchContext>:
    3012:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <uxSchedulerSuspended>
    3016:	88 23       	and	r24, r24
    3018:	21 f0       	breq	.+8      	; 0x3022 <vTaskSwitchContext+0x10>
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <xYieldPending>
    3020:	08 95       	ret
    3022:	10 92 33 06 	sts	0x0633, r1	; 0x800633 <xYieldPending>
    3026:	a0 91 a4 06 	lds	r26, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    302a:	b0 91 a5 06 	lds	r27, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    302e:	e0 91 a4 06 	lds	r30, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    3032:	f0 91 a5 06 	lds	r31, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    3036:	2d 91       	ld	r18, X+
    3038:	3c 91       	ld	r19, X
    303a:	83 8d       	ldd	r24, Z+27	; 0x1b
    303c:	94 8d       	ldd	r25, Z+28	; 0x1c
    303e:	82 17       	cp	r24, r18
    3040:	93 07       	cpc	r25, r19
    3042:	60 f0       	brcs	.+24     	; 0x305c <vTaskSwitchContext+0x4a>
    3044:	60 91 a4 06 	lds	r22, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    3048:	70 91 a5 06 	lds	r23, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    304c:	80 91 a4 06 	lds	r24, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    3050:	90 91 a5 06 	lds	r25, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    3054:	63 5e       	subi	r22, 0xE3	; 227
    3056:	7f 4f       	sbci	r23, 0xFF	; 255
    3058:	0e 94 fd 07 	call	0xffa	; 0xffa <vApplicationStackOverflowHook>
    305c:	80 91 36 06 	lds	r24, 0x0636	; 0x800636 <uxTopReadyPriority>
    3060:	28 2f       	mov	r18, r24
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	9b e0       	ldi	r25, 0x0B	; 11
    3066:	89 9f       	mul	r24, r25
    3068:	f0 01       	movw	r30, r0
    306a:	11 24       	eor	r1, r1
    306c:	e8 58       	subi	r30, 0x88	; 136
    306e:	f9 4f       	sbci	r31, 0xF9	; 249
    3070:	90 81       	ld	r25, Z
    3072:	91 11       	cpse	r25, r1
    3074:	0e c0       	rjmp	.+28     	; 0x3092 <vTaskSwitchContext+0x80>
    3076:	4b e0       	ldi	r20, 0x0B	; 11
    3078:	81 50       	subi	r24, 0x01	; 1
    307a:	28 2f       	mov	r18, r24
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	42 9f       	mul	r20, r18
    3080:	f0 01       	movw	r30, r0
    3082:	43 9f       	mul	r20, r19
    3084:	f0 0d       	add	r31, r0
    3086:	11 24       	eor	r1, r1
    3088:	e8 58       	subi	r30, 0x88	; 136
    308a:	f9 4f       	sbci	r31, 0xF9	; 249
    308c:	90 81       	ld	r25, Z
    308e:	99 23       	and	r25, r25
    3090:	99 f3       	breq	.-26     	; 0x3078 <vTaskSwitchContext+0x66>
    3092:	9b e0       	ldi	r25, 0x0B	; 11
    3094:	92 9f       	mul	r25, r18
    3096:	a0 01       	movw	r20, r0
    3098:	93 9f       	mul	r25, r19
    309a:	50 0d       	add	r21, r0
    309c:	11 24       	eor	r1, r1
    309e:	da 01       	movw	r26, r20
    30a0:	a8 58       	subi	r26, 0x88	; 136
    30a2:	b9 4f       	sbci	r27, 0xF9	; 249
    30a4:	11 96       	adiw	r26, 0x01	; 1
    30a6:	ed 91       	ld	r30, X+
    30a8:	fc 91       	ld	r31, X
    30aa:	12 97       	sbiw	r26, 0x02	; 2
    30ac:	04 80       	ldd	r0, Z+4	; 0x04
    30ae:	f5 81       	ldd	r31, Z+5	; 0x05
    30b0:	e0 2d       	mov	r30, r0
    30b2:	12 96       	adiw	r26, 0x02	; 2
    30b4:	fc 93       	st	X, r31
    30b6:	ee 93       	st	-X, r30
    30b8:	11 97       	sbiw	r26, 0x01	; 1
    30ba:	45 58       	subi	r20, 0x85	; 133
    30bc:	59 4f       	sbci	r21, 0xF9	; 249
    30be:	e4 17       	cp	r30, r20
    30c0:	f5 07       	cpc	r31, r21
    30c2:	29 f4       	brne	.+10     	; 0x30ce <vTaskSwitchContext+0xbc>
    30c4:	44 81       	ldd	r20, Z+4	; 0x04
    30c6:	55 81       	ldd	r21, Z+5	; 0x05
    30c8:	fd 01       	movw	r30, r26
    30ca:	52 83       	std	Z+2, r21	; 0x02
    30cc:	41 83       	std	Z+1, r20	; 0x01
    30ce:	9b e0       	ldi	r25, 0x0B	; 11
    30d0:	92 9f       	mul	r25, r18
    30d2:	f0 01       	movw	r30, r0
    30d4:	93 9f       	mul	r25, r19
    30d6:	f0 0d       	add	r31, r0
    30d8:	11 24       	eor	r1, r1
    30da:	e8 58       	subi	r30, 0x88	; 136
    30dc:	f9 4f       	sbci	r31, 0xF9	; 249
    30de:	01 80       	ldd	r0, Z+1	; 0x01
    30e0:	f2 81       	ldd	r31, Z+2	; 0x02
    30e2:	e0 2d       	mov	r30, r0
    30e4:	20 85       	ldd	r18, Z+8	; 0x08
    30e6:	31 85       	ldd	r19, Z+9	; 0x09
    30e8:	30 93 a5 06 	sts	0x06A5, r19	; 0x8006a5 <pxCurrentTCB+0x1>
    30ec:	20 93 a4 06 	sts	0x06A4, r18	; 0x8006a4 <pxCurrentTCB>
    30f0:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <uxTopReadyPriority>
    30f4:	08 95       	ret

000030f6 <vTaskSuspend>:
    30f6:	0f 93       	push	r16
    30f8:	1f 93       	push	r17
    30fa:	cf 93       	push	r28
    30fc:	df 93       	push	r29
    30fe:	ec 01       	movw	r28, r24
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	0f 92       	push	r0
    3106:	89 2b       	or	r24, r25
    3108:	21 f4       	brne	.+8      	; 0x3112 <vTaskSuspend+0x1c>
    310a:	c0 91 a4 06 	lds	r28, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    310e:	d0 91 a5 06 	lds	r29, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    3112:	8e 01       	movw	r16, r28
    3114:	0e 5f       	subi	r16, 0xFE	; 254
    3116:	1f 4f       	sbci	r17, 0xFF	; 255
    3118:	c8 01       	movw	r24, r16
    311a:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    311e:	88 8d       	ldd	r24, Y+24	; 0x18
    3120:	99 8d       	ldd	r25, Y+25	; 0x19
    3122:	89 2b       	or	r24, r25
    3124:	21 f0       	breq	.+8      	; 0x312e <vTaskSuspend+0x38>
    3126:	ce 01       	movw	r24, r28
    3128:	0e 96       	adiw	r24, 0x0e	; 14
    312a:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    312e:	b8 01       	movw	r22, r16
    3130:	8c e3       	ldi	r24, 0x3C	; 60
    3132:	96 e0       	ldi	r25, 0x06	; 6
    3134:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3138:	8a a9       	ldd	r24, Y+50	; 0x32
    313a:	81 30       	cpi	r24, 0x01	; 1
    313c:	09 f4       	brne	.+2      	; 0x3140 <vTaskSuspend+0x4a>
    313e:	1a aa       	std	Y+50, r1	; 0x32
    3140:	0f 90       	pop	r0
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	80 91 35 06 	lds	r24, 0x0635	; 0x800635 <xSchedulerRunning>
    3148:	88 23       	and	r24, r24
    314a:	31 f0       	breq	.+12     	; 0x3158 <vTaskSuspend+0x62>
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	0f 92       	push	r0
    3152:	ab db       	rcall	.-2218   	; 0x28aa <prvResetNextTaskUnblockTime>
    3154:	0f 90       	pop	r0
    3156:	0f be       	out	0x3f, r0	; 63
    3158:	80 91 a4 06 	lds	r24, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    315c:	90 91 a5 06 	lds	r25, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    3160:	c8 17       	cp	r28, r24
    3162:	d9 07       	cpc	r29, r25
    3164:	99 f4       	brne	.+38     	; 0x318c <vTaskSuspend+0x96>
    3166:	80 91 35 06 	lds	r24, 0x0635	; 0x800635 <xSchedulerRunning>
    316a:	88 23       	and	r24, r24
    316c:	19 f0       	breq	.+6      	; 0x3174 <vTaskSuspend+0x7e>
    316e:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3172:	0c c0       	rjmp	.+24     	; 0x318c <vTaskSuspend+0x96>
    3174:	90 91 3c 06 	lds	r25, 0x063C	; 0x80063c <xSuspendedTaskList>
    3178:	80 91 3b 06 	lds	r24, 0x063B	; 0x80063b <uxCurrentNumberOfTasks>
    317c:	98 13       	cpse	r25, r24
    317e:	05 c0       	rjmp	.+10     	; 0x318a <vTaskSuspend+0x94>
    3180:	10 92 a5 06 	sts	0x06A5, r1	; 0x8006a5 <pxCurrentTCB+0x1>
    3184:	10 92 a4 06 	sts	0x06A4, r1	; 0x8006a4 <pxCurrentTCB>
    3188:	01 c0       	rjmp	.+2      	; 0x318c <vTaskSuspend+0x96>
    318a:	43 df       	rcall	.-378    	; 0x3012 <vTaskSwitchContext>
    318c:	df 91       	pop	r29
    318e:	cf 91       	pop	r28
    3190:	1f 91       	pop	r17
    3192:	0f 91       	pop	r16
    3194:	08 95       	ret

00003196 <vTaskPlaceOnEventList>:
    3196:	cf 92       	push	r12
    3198:	df 92       	push	r13
    319a:	ef 92       	push	r14
    319c:	ff 92       	push	r15
    319e:	6a 01       	movw	r12, r20
    31a0:	7b 01       	movw	r14, r22
    31a2:	60 91 a4 06 	lds	r22, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    31a6:	70 91 a5 06 	lds	r23, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    31aa:	62 5f       	subi	r22, 0xF2	; 242
    31ac:	7f 4f       	sbci	r23, 0xFF	; 255
    31ae:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    31b2:	41 e0       	ldi	r20, 0x01	; 1
    31b4:	c7 01       	movw	r24, r14
    31b6:	b6 01       	movw	r22, r12
    31b8:	a2 db       	rcall	.-2236   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    31ba:	ff 90       	pop	r15
    31bc:	ef 90       	pop	r14
    31be:	df 90       	pop	r13
    31c0:	cf 90       	pop	r12
    31c2:	08 95       	ret

000031c4 <vTaskPlaceOnEventListRestricted>:
    31c4:	cf 92       	push	r12
    31c6:	df 92       	push	r13
    31c8:	ef 92       	push	r14
    31ca:	ff 92       	push	r15
    31cc:	cf 93       	push	r28
    31ce:	6a 01       	movw	r12, r20
    31d0:	7b 01       	movw	r14, r22
    31d2:	c2 2f       	mov	r28, r18
    31d4:	60 91 a4 06 	lds	r22, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    31d8:	70 91 a5 06 	lds	r23, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    31dc:	62 5f       	subi	r22, 0xF2	; 242
    31de:	7f 4f       	sbci	r23, 0xFF	; 255
    31e0:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    31e4:	cc 23       	and	r28, r28
    31e6:	21 f0       	breq	.+8      	; 0x31f0 <vTaskPlaceOnEventListRestricted+0x2c>
    31e8:	cc 24       	eor	r12, r12
    31ea:	ca 94       	dec	r12
    31ec:	dc 2c       	mov	r13, r12
    31ee:	76 01       	movw	r14, r12
    31f0:	4c 2f       	mov	r20, r28
    31f2:	c7 01       	movw	r24, r14
    31f4:	b6 01       	movw	r22, r12
    31f6:	83 db       	rcall	.-2298   	; 0x28fe <prvAddCurrentTaskToDelayedList>
    31f8:	cf 91       	pop	r28
    31fa:	ff 90       	pop	r15
    31fc:	ef 90       	pop	r14
    31fe:	df 90       	pop	r13
    3200:	cf 90       	pop	r12
    3202:	08 95       	ret

00003204 <xTaskRemoveFromEventList>:
    3204:	0f 93       	push	r16
    3206:	1f 93       	push	r17
    3208:	cf 93       	push	r28
    320a:	df 93       	push	r29
    320c:	dc 01       	movw	r26, r24
    320e:	17 96       	adiw	r26, 0x07	; 7
    3210:	ed 91       	ld	r30, X+
    3212:	fc 91       	ld	r31, X
    3214:	18 97       	sbiw	r26, 0x08	; 8
    3216:	c0 85       	ldd	r28, Z+8	; 0x08
    3218:	d1 85       	ldd	r29, Z+9	; 0x09
    321a:	8e 01       	movw	r16, r28
    321c:	02 5f       	subi	r16, 0xF2	; 242
    321e:	1f 4f       	sbci	r17, 0xFF	; 255
    3220:	c8 01       	movw	r24, r16
    3222:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3226:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <uxSchedulerSuspended>
    322a:	81 11       	cpse	r24, r1
    322c:	16 c0       	rjmp	.+44     	; 0x325a <xTaskRemoveFromEventList+0x56>
    322e:	0c 50       	subi	r16, 0x0C	; 12
    3230:	11 09       	sbc	r17, r1
    3232:	c8 01       	movw	r24, r16
    3234:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3238:	8a 8d       	ldd	r24, Y+26	; 0x1a
    323a:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <uxTopReadyPriority>
    323e:	98 17       	cp	r25, r24
    3240:	10 f4       	brcc	.+4      	; 0x3246 <xTaskRemoveFromEventList+0x42>
    3242:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <uxTopReadyPriority>
    3246:	bb e0       	ldi	r27, 0x0B	; 11
    3248:	8b 9f       	mul	r24, r27
    324a:	c0 01       	movw	r24, r0
    324c:	11 24       	eor	r1, r1
    324e:	b8 01       	movw	r22, r16
    3250:	88 58       	subi	r24, 0x88	; 136
    3252:	99 4f       	sbci	r25, 0xF9	; 249
    3254:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3258:	05 c0       	rjmp	.+10     	; 0x3264 <xTaskRemoveFromEventList+0x60>
    325a:	b8 01       	movw	r22, r16
    325c:	83 e5       	ldi	r24, 0x53	; 83
    325e:	96 e0       	ldi	r25, 0x06	; 6
    3260:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3264:	e0 91 a4 06 	lds	r30, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    3268:	f0 91 a5 06 	lds	r31, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    326c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    326e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3270:	89 17       	cp	r24, r25
    3272:	20 f4       	brcc	.+8      	; 0x327c <xTaskRemoveFromEventList+0x78>
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <xYieldPending>
    327a:	01 c0       	rjmp	.+2      	; 0x327e <xTaskRemoveFromEventList+0x7a>
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	df 91       	pop	r29
    3280:	cf 91       	pop	r28
    3282:	1f 91       	pop	r17
    3284:	0f 91       	pop	r16
    3286:	08 95       	ret

00003288 <vTaskInternalSetTimeOutState>:
    3288:	20 91 32 06 	lds	r18, 0x0632	; 0x800632 <xNumOfOverflows>
    328c:	fc 01       	movw	r30, r24
    328e:	20 83       	st	Z, r18
    3290:	40 91 37 06 	lds	r20, 0x0637	; 0x800637 <xTickCount>
    3294:	50 91 38 06 	lds	r21, 0x0638	; 0x800638 <xTickCount+0x1>
    3298:	60 91 39 06 	lds	r22, 0x0639	; 0x800639 <xTickCount+0x2>
    329c:	70 91 3a 06 	lds	r23, 0x063A	; 0x80063a <xTickCount+0x3>
    32a0:	41 83       	std	Z+1, r20	; 0x01
    32a2:	52 83       	std	Z+2, r21	; 0x02
    32a4:	63 83       	std	Z+3, r22	; 0x03
    32a6:	74 83       	std	Z+4, r23	; 0x04
    32a8:	08 95       	ret

000032aa <xTaskCheckForTimeOut>:
    32aa:	cf 92       	push	r12
    32ac:	df 92       	push	r13
    32ae:	ef 92       	push	r14
    32b0:	ff 92       	push	r15
    32b2:	0f 93       	push	r16
    32b4:	1f 93       	push	r17
    32b6:	cf 93       	push	r28
    32b8:	df 93       	push	r29
    32ba:	fb 01       	movw	r30, r22
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	f8 94       	cli
    32c0:	0f 92       	push	r0
    32c2:	40 91 37 06 	lds	r20, 0x0637	; 0x800637 <xTickCount>
    32c6:	50 91 38 06 	lds	r21, 0x0638	; 0x800638 <xTickCount+0x1>
    32ca:	60 91 39 06 	lds	r22, 0x0639	; 0x800639 <xTickCount+0x2>
    32ce:	70 91 3a 06 	lds	r23, 0x063A	; 0x80063a <xTickCount+0x3>
    32d2:	00 81       	ld	r16, Z
    32d4:	11 81       	ldd	r17, Z+1	; 0x01
    32d6:	22 81       	ldd	r18, Z+2	; 0x02
    32d8:	33 81       	ldd	r19, Z+3	; 0x03
    32da:	0f 3f       	cpi	r16, 0xFF	; 255
    32dc:	af ef       	ldi	r26, 0xFF	; 255
    32de:	1a 07       	cpc	r17, r26
    32e0:	2a 07       	cpc	r18, r26
    32e2:	3a 07       	cpc	r19, r26
    32e4:	49 f1       	breq	.+82     	; 0x3338 <xTaskCheckForTimeOut+0x8e>
    32e6:	ec 01       	movw	r28, r24
    32e8:	c9 80       	ldd	r12, Y+1	; 0x01
    32ea:	da 80       	ldd	r13, Y+2	; 0x02
    32ec:	eb 80       	ldd	r14, Y+3	; 0x03
    32ee:	fc 80       	ldd	r15, Y+4	; 0x04
    32f0:	a0 91 32 06 	lds	r26, 0x0632	; 0x800632 <xNumOfOverflows>
    32f4:	b8 81       	ld	r27, Y
    32f6:	ba 17       	cp	r27, r26
    32f8:	29 f0       	breq	.+10     	; 0x3304 <xTaskCheckForTimeOut+0x5a>
    32fa:	4c 15       	cp	r20, r12
    32fc:	5d 05       	cpc	r21, r13
    32fe:	6e 05       	cpc	r22, r14
    3300:	7f 05       	cpc	r23, r15
    3302:	e0 f4       	brcc	.+56     	; 0x333c <xTaskCheckForTimeOut+0x92>
    3304:	4c 19       	sub	r20, r12
    3306:	5d 09       	sbc	r21, r13
    3308:	6e 09       	sbc	r22, r14
    330a:	7f 09       	sbc	r23, r15
    330c:	40 17       	cp	r20, r16
    330e:	51 07       	cpc	r21, r17
    3310:	62 07       	cpc	r22, r18
    3312:	73 07       	cpc	r23, r19
    3314:	58 f4       	brcc	.+22     	; 0x332c <xTaskCheckForTimeOut+0x82>
    3316:	04 1b       	sub	r16, r20
    3318:	15 0b       	sbc	r17, r21
    331a:	26 0b       	sbc	r18, r22
    331c:	37 0b       	sbc	r19, r23
    331e:	00 83       	st	Z, r16
    3320:	11 83       	std	Z+1, r17	; 0x01
    3322:	22 83       	std	Z+2, r18	; 0x02
    3324:	33 83       	std	Z+3, r19	; 0x03
    3326:	b0 df       	rcall	.-160    	; 0x3288 <vTaskInternalSetTimeOutState>
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	09 c0       	rjmp	.+18     	; 0x333e <xTaskCheckForTimeOut+0x94>
    332c:	10 82       	st	Z, r1
    332e:	11 82       	std	Z+1, r1	; 0x01
    3330:	12 82       	std	Z+2, r1	; 0x02
    3332:	13 82       	std	Z+3, r1	; 0x03
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	03 c0       	rjmp	.+6      	; 0x333e <xTaskCheckForTimeOut+0x94>
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	01 c0       	rjmp	.+2      	; 0x333e <xTaskCheckForTimeOut+0x94>
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	0f 90       	pop	r0
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	1f 91       	pop	r17
    3348:	0f 91       	pop	r16
    334a:	ff 90       	pop	r15
    334c:	ef 90       	pop	r14
    334e:	df 90       	pop	r13
    3350:	cf 90       	pop	r12
    3352:	08 95       	ret

00003354 <vTaskMissedYield>:
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <xYieldPending>
    335a:	08 95       	ret

0000335c <xTaskGetSchedulerState>:
    335c:	80 91 35 06 	lds	r24, 0x0635	; 0x800635 <xSchedulerRunning>
    3360:	88 23       	and	r24, r24
    3362:	31 f0       	breq	.+12     	; 0x3370 <xTaskGetSchedulerState+0x14>
    3364:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <uxSchedulerSuspended>
    3368:	88 23       	and	r24, r24
    336a:	21 f0       	breq	.+8      	; 0x3374 <xTaskGetSchedulerState+0x18>
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	08 95       	ret
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	08 95       	ret
    3374:	82 e0       	ldi	r24, 0x02	; 2
    3376:	08 95       	ret

00003378 <xTaskPriorityInherit>:
    3378:	0f 93       	push	r16
    337a:	1f 93       	push	r17
    337c:	cf 93       	push	r28
    337e:	df 93       	push	r29
    3380:	fc 01       	movw	r30, r24
    3382:	89 2b       	or	r24, r25
    3384:	09 f4       	brne	.+2      	; 0x3388 <xTaskPriorityInherit+0x10>
    3386:	60 c0       	rjmp	.+192    	; 0x3448 <xTaskPriorityInherit+0xd0>
    3388:	82 8d       	ldd	r24, Z+26	; 0x1a
    338a:	a0 91 a4 06 	lds	r26, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    338e:	b0 91 a5 06 	lds	r27, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    3392:	5a 96       	adiw	r26, 0x1a	; 26
    3394:	9c 91       	ld	r25, X
    3396:	89 17       	cp	r24, r25
    3398:	08 f0       	brcs	.+2      	; 0x339c <xTaskPriorityInherit+0x24>
    339a:	4a c0       	rjmp	.+148    	; 0x3430 <xTaskPriorityInherit+0xb8>
    339c:	46 85       	ldd	r20, Z+14	; 0x0e
    339e:	57 85       	ldd	r21, Z+15	; 0x0f
    33a0:	60 89       	ldd	r22, Z+16	; 0x10
    33a2:	71 89       	ldd	r23, Z+17	; 0x11
    33a4:	77 23       	and	r23, r23
    33a6:	94 f0       	brlt	.+36     	; 0x33cc <xTaskPriorityInherit+0x54>
    33a8:	a0 91 a4 06 	lds	r26, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    33ac:	b0 91 a5 06 	lds	r27, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    33b0:	5a 96       	adiw	r26, 0x1a	; 26
    33b2:	9c 91       	ld	r25, X
    33b4:	44 e0       	ldi	r20, 0x04	; 4
    33b6:	50 e0       	ldi	r21, 0x00	; 0
    33b8:	60 e0       	ldi	r22, 0x00	; 0
    33ba:	70 e0       	ldi	r23, 0x00	; 0
    33bc:	49 1b       	sub	r20, r25
    33be:	51 09       	sbc	r21, r1
    33c0:	61 09       	sbc	r22, r1
    33c2:	71 09       	sbc	r23, r1
    33c4:	46 87       	std	Z+14, r20	; 0x0e
    33c6:	57 87       	std	Z+15, r21	; 0x0f
    33c8:	60 8b       	std	Z+16, r22	; 0x10
    33ca:	71 8b       	std	Z+17, r23	; 0x11
    33cc:	2b e0       	ldi	r18, 0x0B	; 11
    33ce:	82 9f       	mul	r24, r18
    33d0:	c0 01       	movw	r24, r0
    33d2:	11 24       	eor	r1, r1
    33d4:	88 58       	subi	r24, 0x88	; 136
    33d6:	99 4f       	sbci	r25, 0xF9	; 249
    33d8:	24 85       	ldd	r18, Z+12	; 0x0c
    33da:	35 85       	ldd	r19, Z+13	; 0x0d
    33dc:	28 17       	cp	r18, r24
    33de:	39 07       	cpc	r19, r25
    33e0:	f1 f4       	brne	.+60     	; 0x341e <xTaskPriorityInherit+0xa6>
    33e2:	8f 01       	movw	r16, r30
    33e4:	ef 01       	movw	r28, r30
    33e6:	22 96       	adiw	r28, 0x02	; 2
    33e8:	ce 01       	movw	r24, r28
    33ea:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    33ee:	e0 91 a4 06 	lds	r30, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    33f2:	f0 91 a5 06 	lds	r31, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    33f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    33f8:	f8 01       	movw	r30, r16
    33fa:	82 8f       	std	Z+26, r24	; 0x1a
    33fc:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <uxTopReadyPriority>
    3400:	98 17       	cp	r25, r24
    3402:	10 f4       	brcc	.+4      	; 0x3408 <xTaskPriorityInherit+0x90>
    3404:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <uxTopReadyPriority>
    3408:	fb e0       	ldi	r31, 0x0B	; 11
    340a:	8f 9f       	mul	r24, r31
    340c:	c0 01       	movw	r24, r0
    340e:	11 24       	eor	r1, r1
    3410:	be 01       	movw	r22, r28
    3412:	88 58       	subi	r24, 0x88	; 136
    3414:	99 4f       	sbci	r25, 0xF9	; 249
    3416:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	16 c0       	rjmp	.+44     	; 0x344a <xTaskPriorityInherit+0xd2>
    341e:	a0 91 a4 06 	lds	r26, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    3422:	b0 91 a5 06 	lds	r27, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    3426:	5a 96       	adiw	r26, 0x1a	; 26
    3428:	8c 91       	ld	r24, X
    342a:	82 8f       	std	Z+26, r24	; 0x1a
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	0d c0       	rjmp	.+26     	; 0x344a <xTaskPriorityInherit+0xd2>
    3430:	a0 91 a4 06 	lds	r26, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    3434:	b0 91 a5 06 	lds	r27, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	24 a5       	ldd	r18, Z+44	; 0x2c
    343c:	5a 96       	adiw	r26, 0x1a	; 26
    343e:	9c 91       	ld	r25, X
    3440:	29 17       	cp	r18, r25
    3442:	18 f0       	brcs	.+6      	; 0x344a <xTaskPriorityInherit+0xd2>
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	01 c0       	rjmp	.+2      	; 0x344a <xTaskPriorityInherit+0xd2>
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	df 91       	pop	r29
    344c:	cf 91       	pop	r28
    344e:	1f 91       	pop	r17
    3450:	0f 91       	pop	r16
    3452:	08 95       	ret

00003454 <xTaskPriorityDisinherit>:
    3454:	0f 93       	push	r16
    3456:	1f 93       	push	r17
    3458:	cf 93       	push	r28
    345a:	df 93       	push	r29
    345c:	fc 01       	movw	r30, r24
    345e:	89 2b       	or	r24, r25
    3460:	79 f1       	breq	.+94     	; 0x34c0 <xTaskPriorityDisinherit+0x6c>
    3462:	85 a5       	ldd	r24, Z+45	; 0x2d
    3464:	81 50       	subi	r24, 0x01	; 1
    3466:	85 a7       	std	Z+45, r24	; 0x2d
    3468:	22 8d       	ldd	r18, Z+26	; 0x1a
    346a:	94 a5       	ldd	r25, Z+44	; 0x2c
    346c:	29 17       	cp	r18, r25
    346e:	51 f1       	breq	.+84     	; 0x34c4 <xTaskPriorityDisinherit+0x70>
    3470:	81 11       	cpse	r24, r1
    3472:	2a c0       	rjmp	.+84     	; 0x34c8 <xTaskPriorityDisinherit+0x74>
    3474:	ef 01       	movw	r28, r30
    3476:	8f 01       	movw	r16, r30
    3478:	0e 5f       	subi	r16, 0xFE	; 254
    347a:	1f 4f       	sbci	r17, 0xFF	; 255
    347c:	c8 01       	movw	r24, r16
    347e:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3482:	8c a5       	ldd	r24, Y+44	; 0x2c
    3484:	8a 8f       	std	Y+26, r24	; 0x1a
    3486:	44 e0       	ldi	r20, 0x04	; 4
    3488:	50 e0       	ldi	r21, 0x00	; 0
    348a:	60 e0       	ldi	r22, 0x00	; 0
    348c:	70 e0       	ldi	r23, 0x00	; 0
    348e:	48 1b       	sub	r20, r24
    3490:	51 09       	sbc	r21, r1
    3492:	61 09       	sbc	r22, r1
    3494:	71 09       	sbc	r23, r1
    3496:	4e 87       	std	Y+14, r20	; 0x0e
    3498:	5f 87       	std	Y+15, r21	; 0x0f
    349a:	68 8b       	std	Y+16, r22	; 0x10
    349c:	79 8b       	std	Y+17, r23	; 0x11
    349e:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <uxTopReadyPriority>
    34a2:	98 17       	cp	r25, r24
    34a4:	10 f4       	brcc	.+4      	; 0x34aa <xTaskPriorityDisinherit+0x56>
    34a6:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <uxTopReadyPriority>
    34aa:	2b e0       	ldi	r18, 0x0B	; 11
    34ac:	82 9f       	mul	r24, r18
    34ae:	c0 01       	movw	r24, r0
    34b0:	11 24       	eor	r1, r1
    34b2:	b8 01       	movw	r22, r16
    34b4:	88 58       	subi	r24, 0x88	; 136
    34b6:	99 4f       	sbci	r25, 0xF9	; 249
    34b8:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	05 c0       	rjmp	.+10     	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	03 c0       	rjmp	.+6      	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	01 c0       	rjmp	.+2      	; 0x34ca <xTaskPriorityDisinherit+0x76>
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	df 91       	pop	r29
    34cc:	cf 91       	pop	r28
    34ce:	1f 91       	pop	r17
    34d0:	0f 91       	pop	r16
    34d2:	08 95       	ret

000034d4 <vTaskPriorityDisinheritAfterTimeout>:
    34d4:	0f 93       	push	r16
    34d6:	1f 93       	push	r17
    34d8:	cf 93       	push	r28
    34da:	df 93       	push	r29
    34dc:	fc 01       	movw	r30, r24
    34de:	89 2b       	or	r24, r25
    34e0:	09 f4       	brne	.+2      	; 0x34e4 <vTaskPriorityDisinheritAfterTimeout+0x10>
    34e2:	3f c0       	rjmp	.+126    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34e4:	84 a5       	ldd	r24, Z+44	; 0x2c
    34e6:	86 17       	cp	r24, r22
    34e8:	08 f4       	brcc	.+2      	; 0x34ec <vTaskPriorityDisinheritAfterTimeout+0x18>
    34ea:	86 2f       	mov	r24, r22
    34ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    34ee:	98 17       	cp	r25, r24
    34f0:	c1 f1       	breq	.+112    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34f2:	25 a5       	ldd	r18, Z+45	; 0x2d
    34f4:	21 30       	cpi	r18, 0x01	; 1
    34f6:	a9 f5       	brne	.+106    	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    34f8:	82 8f       	std	Z+26, r24	; 0x1a
    34fa:	46 85       	ldd	r20, Z+14	; 0x0e
    34fc:	57 85       	ldd	r21, Z+15	; 0x0f
    34fe:	60 89       	ldd	r22, Z+16	; 0x10
    3500:	71 89       	ldd	r23, Z+17	; 0x11
    3502:	77 23       	and	r23, r23
    3504:	64 f0       	brlt	.+24     	; 0x351e <vTaskPriorityDisinheritAfterTimeout+0x4a>
    3506:	44 e0       	ldi	r20, 0x04	; 4
    3508:	50 e0       	ldi	r21, 0x00	; 0
    350a:	60 e0       	ldi	r22, 0x00	; 0
    350c:	70 e0       	ldi	r23, 0x00	; 0
    350e:	48 1b       	sub	r20, r24
    3510:	51 09       	sbc	r21, r1
    3512:	61 09       	sbc	r22, r1
    3514:	71 09       	sbc	r23, r1
    3516:	46 87       	std	Z+14, r20	; 0x0e
    3518:	57 87       	std	Z+15, r21	; 0x0f
    351a:	60 8b       	std	Z+16, r22	; 0x10
    351c:	71 8b       	std	Z+17, r23	; 0x11
    351e:	2b e0       	ldi	r18, 0x0B	; 11
    3520:	92 9f       	mul	r25, r18
    3522:	c0 01       	movw	r24, r0
    3524:	11 24       	eor	r1, r1
    3526:	88 58       	subi	r24, 0x88	; 136
    3528:	99 4f       	sbci	r25, 0xF9	; 249
    352a:	24 85       	ldd	r18, Z+12	; 0x0c
    352c:	35 85       	ldd	r19, Z+13	; 0x0d
    352e:	28 17       	cp	r18, r24
    3530:	39 07       	cpc	r19, r25
    3532:	b9 f4       	brne	.+46     	; 0x3562 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3534:	ef 01       	movw	r28, r30
    3536:	8f 01       	movw	r16, r30
    3538:	0e 5f       	subi	r16, 0xFE	; 254
    353a:	1f 4f       	sbci	r17, 0xFF	; 255
    353c:	c8 01       	movw	r24, r16
    353e:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3542:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3544:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <uxTopReadyPriority>
    3548:	98 17       	cp	r25, r24
    354a:	10 f4       	brcc	.+4      	; 0x3550 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    354c:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <uxTopReadyPriority>
    3550:	2b e0       	ldi	r18, 0x0B	; 11
    3552:	82 9f       	mul	r24, r18
    3554:	c0 01       	movw	r24, r0
    3556:	11 24       	eor	r1, r1
    3558:	b8 01       	movw	r22, r16
    355a:	88 58       	subi	r24, 0x88	; 136
    355c:	99 4f       	sbci	r25, 0xF9	; 249
    355e:	0e 94 17 08 	call	0x102e	; 0x102e <vListInsertEnd>
    3562:	df 91       	pop	r29
    3564:	cf 91       	pop	r28
    3566:	1f 91       	pop	r17
    3568:	0f 91       	pop	r16
    356a:	08 95       	ret

0000356c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    356c:	80 91 a4 06 	lds	r24, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    3570:	90 91 a5 06 	lds	r25, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    3574:	89 2b       	or	r24, r25
    3576:	39 f0       	breq	.+14     	; 0x3586 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    3578:	e0 91 a4 06 	lds	r30, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    357c:	f0 91 a5 06 	lds	r31, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
    3580:	85 a5       	ldd	r24, Z+45	; 0x2d
    3582:	8f 5f       	subi	r24, 0xFF	; 255
    3584:	85 a7       	std	Z+45, r24	; 0x2d
		}

		return pxCurrentTCB;
    3586:	80 91 a4 06 	lds	r24, 0x06A4	; 0x8006a4 <pxCurrentTCB>
    358a:	90 91 a5 06 	lds	r25, 0x06A5	; 0x8006a5 <pxCurrentTCB+0x1>
	}
    358e:	08 95       	ret

00003590 <prvInsertTimerInActiveList>:
{
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );
	return pxTimer->pcTimerName;
}
    3590:	cf 92       	push	r12
    3592:	df 92       	push	r13
    3594:	ef 92       	push	r14
    3596:	ff 92       	push	r15
    3598:	0f 93       	push	r16
    359a:	1f 93       	push	r17
    359c:	fc 01       	movw	r30, r24
    359e:	42 83       	std	Z+2, r20	; 0x02
    35a0:	53 83       	std	Z+3, r21	; 0x03
    35a2:	64 83       	std	Z+4, r22	; 0x04
    35a4:	75 83       	std	Z+5, r23	; 0x05
    35a6:	93 87       	std	Z+11, r25	; 0x0b
    35a8:	82 87       	std	Z+10, r24	; 0x0a
    35aa:	04 17       	cp	r16, r20
    35ac:	15 07       	cpc	r17, r21
    35ae:	26 07       	cpc	r18, r22
    35b0:	37 07       	cpc	r19, r23
    35b2:	c0 f0       	brcs	.+48     	; 0x35e4 <prvInsertTimerInActiveList+0x54>
    35b4:	0c 19       	sub	r16, r12
    35b6:	1d 09       	sbc	r17, r13
    35b8:	2e 09       	sbc	r18, r14
    35ba:	3f 09       	sbc	r19, r15
    35bc:	86 85       	ldd	r24, Z+14	; 0x0e
    35be:	97 85       	ldd	r25, Z+15	; 0x0f
    35c0:	a0 89       	ldd	r26, Z+16	; 0x10
    35c2:	b1 89       	ldd	r27, Z+17	; 0x11
    35c4:	08 17       	cp	r16, r24
    35c6:	19 07       	cpc	r17, r25
    35c8:	2a 07       	cpc	r18, r26
    35ca:	3b 07       	cpc	r19, r27
    35cc:	00 f5       	brcc	.+64     	; 0x360e <prvInsertTimerInActiveList+0x7e>
    35ce:	bf 01       	movw	r22, r30
    35d0:	6e 5f       	subi	r22, 0xFE	; 254
    35d2:	7f 4f       	sbci	r23, 0xFF	; 255
    35d4:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <pxOverflowTimerList>
    35d8:	90 91 af 06 	lds	r25, 0x06AF	; 0x8006af <pxOverflowTimerList+0x1>
    35dc:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	18 c0       	rjmp	.+48     	; 0x3614 <prvInsertTimerInActiveList+0x84>
    35e4:	0c 15       	cp	r16, r12
    35e6:	1d 05       	cpc	r17, r13
    35e8:	2e 05       	cpc	r18, r14
    35ea:	3f 05       	cpc	r19, r15
    35ec:	28 f4       	brcc	.+10     	; 0x35f8 <prvInsertTimerInActiveList+0x68>
    35ee:	4c 15       	cp	r20, r12
    35f0:	5d 05       	cpc	r21, r13
    35f2:	6e 05       	cpc	r22, r14
    35f4:	7f 05       	cpc	r23, r15
    35f6:	68 f4       	brcc	.+26     	; 0x3612 <prvInsertTimerInActiveList+0x82>
    35f8:	bf 01       	movw	r22, r30
    35fa:	6e 5f       	subi	r22, 0xFE	; 254
    35fc:	7f 4f       	sbci	r23, 0xFF	; 255
    35fe:	80 91 b0 06 	lds	r24, 0x06B0	; 0x8006b0 <pxCurrentTimerList>
    3602:	90 91 b1 06 	lds	r25, 0x06B1	; 0x8006b1 <pxCurrentTimerList+0x1>
    3606:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	03 c0       	rjmp	.+6      	; 0x3614 <prvInsertTimerInActiveList+0x84>
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	01 c0       	rjmp	.+2      	; 0x3614 <prvInsertTimerInActiveList+0x84>
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	1f 91       	pop	r17
    3616:	0f 91       	pop	r16
    3618:	ff 90       	pop	r15
    361a:	ef 90       	pop	r14
    361c:	df 90       	pop	r13
    361e:	cf 90       	pop	r12
    3620:	08 95       	ret

00003622 <prvCheckForValidListAndQueue>:
    3622:	0f b6       	in	r0, 0x3f	; 63
    3624:	f8 94       	cli
    3626:	0f 92       	push	r0
    3628:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <xTimerQueue>
    362c:	90 91 ad 06 	lds	r25, 0x06AD	; 0x8006ad <xTimerQueue+0x1>
    3630:	89 2b       	or	r24, r25
    3632:	e9 f4       	brne	.+58     	; 0x366e <prvCheckForValidListAndQueue+0x4c>
    3634:	8d eb       	ldi	r24, 0xBD	; 189
    3636:	96 e0       	ldi	r25, 0x06	; 6
    3638:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    363c:	82 eb       	ldi	r24, 0xB2	; 178
    363e:	96 e0       	ldi	r25, 0x06	; 6
    3640:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialise>
    3644:	8d eb       	ldi	r24, 0xBD	; 189
    3646:	96 e0       	ldi	r25, 0x06	; 6
    3648:	90 93 b1 06 	sts	0x06B1, r25	; 0x8006b1 <pxCurrentTimerList+0x1>
    364c:	80 93 b0 06 	sts	0x06B0, r24	; 0x8006b0 <pxCurrentTimerList>
    3650:	82 eb       	ldi	r24, 0xB2	; 178
    3652:	96 e0       	ldi	r25, 0x06	; 6
    3654:	90 93 af 06 	sts	0x06AF, r25	; 0x8006af <pxOverflowTimerList+0x1>
    3658:	80 93 ae 06 	sts	0x06AE, r24	; 0x8006ae <pxOverflowTimerList>
    365c:	40 e0       	ldi	r20, 0x00	; 0
    365e:	67 e0       	ldi	r22, 0x07	; 7
    3660:	8a e0       	ldi	r24, 0x0A	; 10
    3662:	0e 94 a7 09 	call	0x134e	; 0x134e <xQueueGenericCreate>
    3666:	90 93 ad 06 	sts	0x06AD, r25	; 0x8006ad <xTimerQueue+0x1>
    366a:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <xTimerQueue>
    366e:	0f 90       	pop	r0
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	08 95       	ret

00003674 <xTimerCreateTimerTask>:
    3674:	ef 92       	push	r14
    3676:	ff 92       	push	r15
    3678:	0f 93       	push	r16
    367a:	d3 df       	rcall	.-90     	; 0x3622 <prvCheckForValidListAndQueue>
    367c:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <xTimerQueue>
    3680:	90 91 ad 06 	lds	r25, 0x06AD	; 0x8006ad <xTimerQueue+0x1>
    3684:	89 2b       	or	r24, r25
    3686:	89 f0       	breq	.+34     	; 0x36aa <xTimerCreateTimerTask+0x36>
    3688:	0f 2e       	mov	r0, r31
    368a:	fa ea       	ldi	r31, 0xAA	; 170
    368c:	ef 2e       	mov	r14, r31
    368e:	f6 e0       	ldi	r31, 0x06	; 6
    3690:	ff 2e       	mov	r15, r31
    3692:	f0 2d       	mov	r31, r0
    3694:	03 e0       	ldi	r16, 0x03	; 3
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	40 e8       	ldi	r20, 0x80	; 128
    369c:	50 e0       	ldi	r21, 0x00	; 0
    369e:	6b e1       	ldi	r22, 0x1B	; 27
    36a0:	72 e0       	ldi	r23, 0x02	; 2
    36a2:	85 e8       	ldi	r24, 0x85	; 133
    36a4:	9c e1       	ldi	r25, 0x1C	; 28
    36a6:	a2 d9       	rcall	.-3260   	; 0x29ec <xTaskCreate>
    36a8:	01 c0       	rjmp	.+2      	; 0x36ac <xTimerCreateTimerTask+0x38>
    36aa:	80 e0       	ldi	r24, 0x00	; 0
    36ac:	0f 91       	pop	r16
    36ae:	ff 90       	pop	r15
    36b0:	ef 90       	pop	r14
    36b2:	08 95       	ret

000036b4 <xTimerCreate>:
    36b4:	7f 92       	push	r7
    36b6:	8f 92       	push	r8
    36b8:	9f 92       	push	r9
    36ba:	af 92       	push	r10
    36bc:	bf 92       	push	r11
    36be:	cf 92       	push	r12
    36c0:	df 92       	push	r13
    36c2:	ef 92       	push	r14
    36c4:	ff 92       	push	r15
    36c6:	0f 93       	push	r16
    36c8:	1f 93       	push	r17
    36ca:	cf 93       	push	r28
    36cc:	df 93       	push	r29
    36ce:	6c 01       	movw	r12, r24
    36d0:	4a 01       	movw	r8, r20
    36d2:	5b 01       	movw	r10, r22
    36d4:	72 2e       	mov	r7, r18
    36d6:	87 e1       	ldi	r24, 0x17	; 23
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	0e 94 c3 05 	call	0xb86	; 0xb86 <pvPortMalloc>
    36de:	ec 01       	movw	r28, r24
    36e0:	89 2b       	or	r24, r25
    36e2:	81 f0       	breq	.+32     	; 0x3704 <xTimerCreate+0x50>
    36e4:	9e df       	rcall	.-196    	; 0x3622 <prvCheckForValidListAndQueue>
    36e6:	d9 82       	std	Y+1, r13	; 0x01
    36e8:	c8 82       	st	Y, r12
    36ea:	8e 86       	std	Y+14, r8	; 0x0e
    36ec:	9f 86       	std	Y+15, r9	; 0x0f
    36ee:	a8 8a       	std	Y+16, r10	; 0x10
    36f0:	b9 8a       	std	Y+17, r11	; 0x11
    36f2:	7a 8a       	std	Y+18, r7	; 0x12
    36f4:	1c 8b       	std	Y+20, r17	; 0x14
    36f6:	0b 8b       	std	Y+19, r16	; 0x13
    36f8:	fe 8a       	std	Y+22, r15	; 0x16
    36fa:	ed 8a       	std	Y+21, r14	; 0x15
    36fc:	ce 01       	movw	r24, r28
    36fe:	02 96       	adiw	r24, 0x02	; 2
    3700:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInitialiseItem>
    3704:	ce 01       	movw	r24, r28
    3706:	df 91       	pop	r29
    3708:	cf 91       	pop	r28
    370a:	1f 91       	pop	r17
    370c:	0f 91       	pop	r16
    370e:	ff 90       	pop	r15
    3710:	ef 90       	pop	r14
    3712:	df 90       	pop	r13
    3714:	cf 90       	pop	r12
    3716:	bf 90       	pop	r11
    3718:	af 90       	pop	r10
    371a:	9f 90       	pop	r9
    371c:	8f 90       	pop	r8
    371e:	7f 90       	pop	r7
    3720:	08 95       	ret

00003722 <xTimerGenericCommand>:
    3722:	8f 92       	push	r8
    3724:	9f 92       	push	r9
    3726:	af 92       	push	r10
    3728:	bf 92       	push	r11
    372a:	cf 92       	push	r12
    372c:	df 92       	push	r13
    372e:	ef 92       	push	r14
    3730:	ff 92       	push	r15
    3732:	0f 93       	push	r16
    3734:	1f 93       	push	r17
    3736:	cf 93       	push	r28
    3738:	df 93       	push	r29
    373a:	cd b7       	in	r28, 0x3d	; 61
    373c:	de b7       	in	r29, 0x3e	; 62
    373e:	27 97       	sbiw	r28, 0x07	; 7
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	f8 94       	cli
    3744:	de bf       	out	0x3e, r29	; 62
    3746:	0f be       	out	0x3f, r0	; 63
    3748:	cd bf       	out	0x3d, r28	; 61
    374a:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <xTimerQueue>
    374e:	f0 91 ad 06 	lds	r31, 0x06AD	; 0x8006ad <xTimerQueue+0x1>
    3752:	30 97       	sbiw	r30, 0x00	; 0
    3754:	81 f1       	breq	.+96     	; 0x37b6 <xTimerGenericCommand+0x94>
    3756:	69 83       	std	Y+1, r22	; 0x01
    3758:	2a 83       	std	Y+2, r18	; 0x02
    375a:	3b 83       	std	Y+3, r19	; 0x03
    375c:	4c 83       	std	Y+4, r20	; 0x04
    375e:	5d 83       	std	Y+5, r21	; 0x05
    3760:	9f 83       	std	Y+7, r25	; 0x07
    3762:	8e 83       	std	Y+6, r24	; 0x06
    3764:	66 30       	cpi	r22, 0x06	; 6
    3766:	f4 f4       	brge	.+60     	; 0x37a4 <xTimerGenericCommand+0x82>
    3768:	f9 dd       	rcall	.-1038   	; 0x335c <xTaskGetSchedulerState>
    376a:	82 30       	cpi	r24, 0x02	; 2
    376c:	69 f4       	brne	.+26     	; 0x3788 <xTimerGenericCommand+0x66>
    376e:	00 e0       	ldi	r16, 0x00	; 0
    3770:	a7 01       	movw	r20, r14
    3772:	96 01       	movw	r18, r12
    3774:	be 01       	movw	r22, r28
    3776:	6f 5f       	subi	r22, 0xFF	; 255
    3778:	7f 4f       	sbci	r23, 0xFF	; 255
    377a:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <xTimerQueue>
    377e:	90 91 ad 06 	lds	r25, 0x06AD	; 0x8006ad <xTimerQueue+0x1>
    3782:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    3786:	18 c0       	rjmp	.+48     	; 0x37b8 <xTimerGenericCommand+0x96>
    3788:	00 e0       	ldi	r16, 0x00	; 0
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	a9 01       	movw	r20, r18
    3790:	be 01       	movw	r22, r28
    3792:	6f 5f       	subi	r22, 0xFF	; 255
    3794:	7f 4f       	sbci	r23, 0xFF	; 255
    3796:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <xTimerQueue>
    379a:	90 91 ad 06 	lds	r25, 0x06AD	; 0x8006ad <xTimerQueue+0x1>
    379e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>
    37a2:	0a c0       	rjmp	.+20     	; 0x37b8 <xTimerGenericCommand+0x96>
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	a8 01       	movw	r20, r16
    37a8:	be 01       	movw	r22, r28
    37aa:	6f 5f       	subi	r22, 0xFF	; 255
    37ac:	7f 4f       	sbci	r23, 0xFF	; 255
    37ae:	cf 01       	movw	r24, r30
    37b0:	0e 94 90 0a 	call	0x1520	; 0x1520 <xQueueGenericSendFromISR>
    37b4:	01 c0       	rjmp	.+2      	; 0x37b8 <xTimerGenericCommand+0x96>
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	27 96       	adiw	r28, 0x07	; 7
    37ba:	0f b6       	in	r0, 0x3f	; 63
    37bc:	f8 94       	cli
    37be:	de bf       	out	0x3e, r29	; 62
    37c0:	0f be       	out	0x3f, r0	; 63
    37c2:	cd bf       	out	0x3d, r28	; 61
    37c4:	df 91       	pop	r29
    37c6:	cf 91       	pop	r28
    37c8:	1f 91       	pop	r17
    37ca:	0f 91       	pop	r16
    37cc:	ff 90       	pop	r15
    37ce:	ef 90       	pop	r14
    37d0:	df 90       	pop	r13
    37d2:	cf 90       	pop	r12
    37d4:	bf 90       	pop	r11
    37d6:	af 90       	pop	r10
    37d8:	9f 90       	pop	r9
    37da:	8f 90       	pop	r8
    37dc:	08 95       	ret

000037de <prvSampleTimeNow>:
    37de:	2f 92       	push	r2
    37e0:	3f 92       	push	r3
    37e2:	4f 92       	push	r4
    37e4:	5f 92       	push	r5
    37e6:	6f 92       	push	r6
    37e8:	7f 92       	push	r7
    37ea:	8f 92       	push	r8
    37ec:	9f 92       	push	r9
    37ee:	af 92       	push	r10
    37f0:	bf 92       	push	r11
    37f2:	cf 92       	push	r12
    37f4:	df 92       	push	r13
    37f6:	ef 92       	push	r14
    37f8:	ff 92       	push	r15
    37fa:	0f 93       	push	r16
    37fc:	1f 93       	push	r17
    37fe:	cf 93       	push	r28
    3800:	df 93       	push	r29
    3802:	1c 01       	movw	r2, r24
    3804:	8e da       	rcall	.-2788   	; 0x2d22 <xTaskGetTickCount>
    3806:	2b 01       	movw	r4, r22
    3808:	3c 01       	movw	r6, r24
    380a:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <xLastTime.2378>
    380e:	90 91 a7 06 	lds	r25, 0x06A7	; 0x8006a7 <xLastTime.2378+0x1>
    3812:	a0 91 a8 06 	lds	r26, 0x06A8	; 0x8006a8 <xLastTime.2378+0x2>
    3816:	b0 91 a9 06 	lds	r27, 0x06A9	; 0x8006a9 <xLastTime.2378+0x3>
    381a:	48 16       	cp	r4, r24
    381c:	59 06       	cpc	r5, r25
    381e:	6a 06       	cpc	r6, r26
    3820:	7b 06       	cpc	r7, r27
    3822:	08 f0       	brcs	.+2      	; 0x3826 <prvSampleTimeNow+0x48>
    3824:	53 c0       	rjmp	.+166    	; 0x38cc <prvSampleTimeNow+0xee>
    3826:	3b c0       	rjmp	.+118    	; 0x389e <prvSampleTimeNow+0xc0>
    3828:	07 80       	ldd	r0, Z+7	; 0x07
    382a:	f0 85       	ldd	r31, Z+8	; 0x08
    382c:	e0 2d       	mov	r30, r0
    382e:	80 80       	ld	r8, Z
    3830:	91 80       	ldd	r9, Z+1	; 0x01
    3832:	a2 80       	ldd	r10, Z+2	; 0x02
    3834:	b3 80       	ldd	r11, Z+3	; 0x03
    3836:	c0 85       	ldd	r28, Z+8	; 0x08
    3838:	d1 85       	ldd	r29, Z+9	; 0x09
    383a:	8e 01       	movw	r16, r28
    383c:	0e 5f       	subi	r16, 0xFE	; 254
    383e:	1f 4f       	sbci	r17, 0xFF	; 255
    3840:	c8 01       	movw	r24, r16
    3842:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3846:	ed 89       	ldd	r30, Y+21	; 0x15
    3848:	fe 89       	ldd	r31, Y+22	; 0x16
    384a:	ce 01       	movw	r24, r28
    384c:	19 95       	eicall
    384e:	8a 89       	ldd	r24, Y+18	; 0x12
    3850:	81 30       	cpi	r24, 0x01	; 1
    3852:	29 f5       	brne	.+74     	; 0x389e <prvSampleTimeNow+0xc0>
    3854:	8e 85       	ldd	r24, Y+14	; 0x0e
    3856:	9f 85       	ldd	r25, Y+15	; 0x0f
    3858:	a8 89       	ldd	r26, Y+16	; 0x10
    385a:	b9 89       	ldd	r27, Y+17	; 0x11
    385c:	88 0d       	add	r24, r8
    385e:	99 1d       	adc	r25, r9
    3860:	aa 1d       	adc	r26, r10
    3862:	bb 1d       	adc	r27, r11
    3864:	88 16       	cp	r8, r24
    3866:	99 06       	cpc	r9, r25
    3868:	aa 06       	cpc	r10, r26
    386a:	bb 06       	cpc	r11, r27
    386c:	70 f4       	brcc	.+28     	; 0x388a <prvSampleTimeNow+0xac>
    386e:	8a 83       	std	Y+2, r24	; 0x02
    3870:	9b 83       	std	Y+3, r25	; 0x03
    3872:	ac 83       	std	Y+4, r26	; 0x04
    3874:	bd 83       	std	Y+5, r27	; 0x05
    3876:	db 87       	std	Y+11, r29	; 0x0b
    3878:	ca 87       	std	Y+10, r28	; 0x0a
    387a:	b8 01       	movw	r22, r16
    387c:	80 91 b0 06 	lds	r24, 0x06B0	; 0x8006b0 <pxCurrentTimerList>
    3880:	90 91 b1 06 	lds	r25, 0x06B1	; 0x8006b1 <pxCurrentTimerList+0x1>
    3884:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsert>
    3888:	0a c0       	rjmp	.+20     	; 0x389e <prvSampleTimeNow+0xc0>
    388a:	c1 2c       	mov	r12, r1
    388c:	d1 2c       	mov	r13, r1
    388e:	76 01       	movw	r14, r12
    3890:	00 e0       	ldi	r16, 0x00	; 0
    3892:	10 e0       	ldi	r17, 0x00	; 0
    3894:	a5 01       	movw	r20, r10
    3896:	94 01       	movw	r18, r8
    3898:	60 e0       	ldi	r22, 0x00	; 0
    389a:	ce 01       	movw	r24, r28
    389c:	42 df       	rcall	.-380    	; 0x3722 <xTimerGenericCommand>
    389e:	e0 91 b0 06 	lds	r30, 0x06B0	; 0x8006b0 <pxCurrentTimerList>
    38a2:	f0 91 b1 06 	lds	r31, 0x06B1	; 0x8006b1 <pxCurrentTimerList+0x1>
    38a6:	80 81       	ld	r24, Z
    38a8:	81 11       	cpse	r24, r1
    38aa:	be cf       	rjmp	.-132    	; 0x3828 <prvSampleTimeNow+0x4a>
    38ac:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <pxOverflowTimerList>
    38b0:	90 91 af 06 	lds	r25, 0x06AF	; 0x8006af <pxOverflowTimerList+0x1>
    38b4:	90 93 b1 06 	sts	0x06B1, r25	; 0x8006b1 <pxCurrentTimerList+0x1>
    38b8:	80 93 b0 06 	sts	0x06B0, r24	; 0x8006b0 <pxCurrentTimerList>
    38bc:	f0 93 af 06 	sts	0x06AF, r31	; 0x8006af <pxOverflowTimerList+0x1>
    38c0:	e0 93 ae 06 	sts	0x06AE, r30	; 0x8006ae <pxOverflowTimerList>
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	f1 01       	movw	r30, r2
    38c8:	80 83       	st	Z, r24
    38ca:	02 c0       	rjmp	.+4      	; 0x38d0 <prvSampleTimeNow+0xf2>
    38cc:	f1 01       	movw	r30, r2
    38ce:	10 82       	st	Z, r1
    38d0:	40 92 a6 06 	sts	0x06A6, r4	; 0x8006a6 <xLastTime.2378>
    38d4:	50 92 a7 06 	sts	0x06A7, r5	; 0x8006a7 <xLastTime.2378+0x1>
    38d8:	60 92 a8 06 	sts	0x06A8, r6	; 0x8006a8 <xLastTime.2378+0x2>
    38dc:	70 92 a9 06 	sts	0x06A9, r7	; 0x8006a9 <xLastTime.2378+0x3>
    38e0:	c3 01       	movw	r24, r6
    38e2:	b2 01       	movw	r22, r4
    38e4:	df 91       	pop	r29
    38e6:	cf 91       	pop	r28
    38e8:	1f 91       	pop	r17
    38ea:	0f 91       	pop	r16
    38ec:	ff 90       	pop	r15
    38ee:	ef 90       	pop	r14
    38f0:	df 90       	pop	r13
    38f2:	cf 90       	pop	r12
    38f4:	bf 90       	pop	r11
    38f6:	af 90       	pop	r10
    38f8:	9f 90       	pop	r9
    38fa:	8f 90       	pop	r8
    38fc:	7f 90       	pop	r7
    38fe:	6f 90       	pop	r6
    3900:	5f 90       	pop	r5
    3902:	4f 90       	pop	r4
    3904:	3f 90       	pop	r3
    3906:	2f 90       	pop	r2
    3908:	08 95       	ret

0000390a <prvTimerTask>:
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
    3912:	60 97       	sbiw	r28, 0x10	; 16
    3914:	0f b6       	in	r0, 0x3f	; 63
    3916:	f8 94       	cli
    3918:	de bf       	out	0x3e, r29	; 62
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	cd bf       	out	0x3d, r28	; 61
    391e:	ce 01       	movw	r24, r28
    3920:	01 96       	adiw	r24, 0x01	; 1
    3922:	9a 87       	std	Y+10, r25	; 0x0a
    3924:	89 87       	std	Y+9, r24	; 0x09
    3926:	81 2c       	mov	r8, r1
    3928:	91 2c       	mov	r9, r1
    392a:	a1 2c       	mov	r10, r1
    392c:	b1 2c       	mov	r11, r1
    392e:	69 84       	ldd	r6, Y+9	; 0x09
    3930:	7a 84       	ldd	r7, Y+10	; 0x0a
    3932:	e0 91 b0 06 	lds	r30, 0x06B0	; 0x8006b0 <pxCurrentTimerList>
    3936:	f0 91 b1 06 	lds	r31, 0x06B1	; 0x8006b1 <pxCurrentTimerList+0x1>
    393a:	80 81       	ld	r24, Z
    393c:	88 23       	and	r24, r24
    393e:	09 f4       	brne	.+2      	; 0x3942 <prvTimerTask+0x38>
    3940:	f2 c0       	rjmp	.+484    	; 0x3b26 <prvTimerTask+0x21c>
    3942:	07 80       	ldd	r0, Z+7	; 0x07
    3944:	f0 85       	ldd	r31, Z+8	; 0x08
    3946:	e0 2d       	mov	r30, r0
    3948:	20 80       	ld	r2, Z
    394a:	31 80       	ldd	r3, Z+1	; 0x01
    394c:	42 80       	ldd	r4, Z+2	; 0x02
    394e:	53 80       	ldd	r5, Z+3	; 0x03
    3950:	e2 d9       	rcall	.-3132   	; 0x2d16 <vTaskSuspendAll>
    3952:	ce 01       	movw	r24, r28
    3954:	01 96       	adiw	r24, 0x01	; 1
    3956:	43 df       	rcall	.-378    	; 0x37de <prvSampleTimeNow>
    3958:	6b 87       	std	Y+11, r22	; 0x0b
    395a:	7c 87       	std	Y+12, r23	; 0x0c
    395c:	8d 87       	std	Y+13, r24	; 0x0d
    395e:	9e 87       	std	Y+14, r25	; 0x0e
    3960:	89 81       	ldd	r24, Y+1	; 0x01
    3962:	81 11       	cpse	r24, r1
    3964:	5d c0       	rjmp	.+186    	; 0x3a20 <prvTimerTask+0x116>
    3966:	8b 85       	ldd	r24, Y+11	; 0x0b
    3968:	9c 85       	ldd	r25, Y+12	; 0x0c
    396a:	ad 85       	ldd	r26, Y+13	; 0x0d
    396c:	be 85       	ldd	r27, Y+14	; 0x0e
    396e:	82 15       	cp	r24, r2
    3970:	93 05       	cpc	r25, r3
    3972:	a4 05       	cpc	r26, r4
    3974:	b5 05       	cpc	r27, r5
    3976:	08 f4       	brcc	.+2      	; 0x397a <prvTimerTask+0x70>
    3978:	3c c0       	rjmp	.+120    	; 0x39f2 <prvTimerTask+0xe8>
    397a:	b6 da       	rcall	.-2708   	; 0x2ee8 <xTaskResumeAll>
    397c:	e0 91 b0 06 	lds	r30, 0x06B0	; 0x8006b0 <pxCurrentTimerList>
    3980:	f0 91 b1 06 	lds	r31, 0x06B1	; 0x8006b1 <pxCurrentTimerList+0x1>
    3984:	07 80       	ldd	r0, Z+7	; 0x07
    3986:	f0 85       	ldd	r31, Z+8	; 0x08
    3988:	e0 2d       	mov	r30, r0
    398a:	a0 85       	ldd	r26, Z+8	; 0x08
    398c:	b1 85       	ldd	r27, Z+9	; 0x09
    398e:	b8 8b       	std	Y+16, r27	; 0x10
    3990:	af 87       	std	Y+15, r26	; 0x0f
    3992:	cd 01       	movw	r24, r26
    3994:	02 96       	adiw	r24, 0x02	; 2
    3996:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    399a:	ef 85       	ldd	r30, Y+15	; 0x0f
    399c:	f8 89       	ldd	r31, Y+16	; 0x10
    399e:	82 89       	ldd	r24, Z+18	; 0x12
    39a0:	81 30       	cpi	r24, 0x01	; 1
    39a2:	f1 f4       	brne	.+60     	; 0x39e0 <prvTimerTask+0xd6>
    39a4:	46 85       	ldd	r20, Z+14	; 0x0e
    39a6:	57 85       	ldd	r21, Z+15	; 0x0f
    39a8:	60 89       	ldd	r22, Z+16	; 0x10
    39aa:	71 89       	ldd	r23, Z+17	; 0x11
    39ac:	42 0d       	add	r20, r2
    39ae:	53 1d       	adc	r21, r3
    39b0:	64 1d       	adc	r22, r4
    39b2:	75 1d       	adc	r23, r5
    39b4:	72 01       	movw	r14, r4
    39b6:	61 01       	movw	r12, r2
    39b8:	0b 85       	ldd	r16, Y+11	; 0x0b
    39ba:	1c 85       	ldd	r17, Y+12	; 0x0c
    39bc:	2d 85       	ldd	r18, Y+13	; 0x0d
    39be:	3e 85       	ldd	r19, Y+14	; 0x0e
    39c0:	cf 01       	movw	r24, r30
    39c2:	e6 dd       	rcall	.-1076   	; 0x3590 <prvInsertTimerInActiveList>
    39c4:	88 23       	and	r24, r24
    39c6:	61 f0       	breq	.+24     	; 0x39e0 <prvTimerTask+0xd6>
    39c8:	c8 2c       	mov	r12, r8
    39ca:	d9 2c       	mov	r13, r9
    39cc:	ea 2c       	mov	r14, r10
    39ce:	fb 2c       	mov	r15, r11
    39d0:	00 e0       	ldi	r16, 0x00	; 0
    39d2:	10 e0       	ldi	r17, 0x00	; 0
    39d4:	a2 01       	movw	r20, r4
    39d6:	91 01       	movw	r18, r2
    39d8:	60 e0       	ldi	r22, 0x00	; 0
    39da:	8f 85       	ldd	r24, Y+15	; 0x0f
    39dc:	98 89       	ldd	r25, Y+16	; 0x10
    39de:	a1 de       	rcall	.-702    	; 0x3722 <xTimerGenericCommand>
    39e0:	af 85       	ldd	r26, Y+15	; 0x0f
    39e2:	b8 89       	ldd	r27, Y+16	; 0x10
    39e4:	55 96       	adiw	r26, 0x15	; 21
    39e6:	ed 91       	ld	r30, X+
    39e8:	fc 91       	ld	r31, X
    39ea:	56 97       	sbiw	r26, 0x16	; 22
    39ec:	cd 01       	movw	r24, r26
    39ee:	19 95       	eicall
    39f0:	8b c0       	rjmp	.+278    	; 0x3b08 <prvTimerTask+0x1fe>
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	b2 01       	movw	r22, r4
    39f6:	a1 01       	movw	r20, r2
    39f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    39fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    39fc:	ad 85       	ldd	r26, Y+13	; 0x0d
    39fe:	be 85       	ldd	r27, Y+14	; 0x0e
    3a00:	48 1b       	sub	r20, r24
    3a02:	59 0b       	sbc	r21, r25
    3a04:	6a 0b       	sbc	r22, r26
    3a06:	7b 0b       	sbc	r23, r27
    3a08:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <xTimerQueue>
    3a0c:	90 91 ad 06 	lds	r25, 0x06AD	; 0x8006ad <xTimerQueue+0x1>
    3a10:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <vQueueWaitForMessageRestricted>
    3a14:	69 da       	rcall	.-2862   	; 0x2ee8 <xTaskResumeAll>
    3a16:	81 11       	cpse	r24, r1
    3a18:	77 c0       	rjmp	.+238    	; 0x3b08 <prvTimerTask+0x1fe>
    3a1a:	0e 94 a8 06 	call	0xd50	; 0xd50 <vPortYield>
    3a1e:	74 c0       	rjmp	.+232    	; 0x3b08 <prvTimerTask+0x1fe>
    3a20:	63 da       	rcall	.-2874   	; 0x2ee8 <xTaskResumeAll>
    3a22:	72 c0       	rjmp	.+228    	; 0x3b08 <prvTimerTask+0x1fe>
    3a24:	89 81       	ldd	r24, Y+1	; 0x01
    3a26:	88 23       	and	r24, r24
    3a28:	0c f4       	brge	.+2      	; 0x3a2c <prvTimerTask+0x122>
    3a2a:	6e c0       	rjmp	.+220    	; 0x3b08 <prvTimerTask+0x1fe>
    3a2c:	4e 80       	ldd	r4, Y+6	; 0x06
    3a2e:	5f 80       	ldd	r5, Y+7	; 0x07
    3a30:	d2 01       	movw	r26, r4
    3a32:	1c 96       	adiw	r26, 0x0c	; 12
    3a34:	8d 91       	ld	r24, X+
    3a36:	9c 91       	ld	r25, X
    3a38:	1d 97       	sbiw	r26, 0x0d	; 13
    3a3a:	89 2b       	or	r24, r25
    3a3c:	21 f0       	breq	.+8      	; 0x3a46 <prvTimerTask+0x13c>
    3a3e:	c2 01       	movw	r24, r4
    3a40:	02 96       	adiw	r24, 0x02	; 2
    3a42:	0e 94 75 08 	call	0x10ea	; 0x10ea <uxListRemove>
    3a46:	ce 01       	movw	r24, r28
    3a48:	08 96       	adiw	r24, 0x08	; 8
    3a4a:	c9 de       	rcall	.-622    	; 0x37de <prvSampleTimeNow>
    3a4c:	8b 01       	movw	r16, r22
    3a4e:	9c 01       	movw	r18, r24
    3a50:	89 81       	ldd	r24, Y+1	; 0x01
    3a52:	08 2e       	mov	r0, r24
    3a54:	00 0c       	add	r0, r0
    3a56:	99 0b       	sbc	r25, r25
    3a58:	aa 0b       	sbc	r26, r26
    3a5a:	bb 0b       	sbc	r27, r27
    3a5c:	8a 30       	cpi	r24, 0x0A	; 10
    3a5e:	91 05       	cpc	r25, r1
    3a60:	08 f0       	brcs	.+2      	; 0x3a64 <prvTimerTask+0x15a>
    3a62:	52 c0       	rjmp	.+164    	; 0x3b08 <prvTimerTask+0x1fe>
    3a64:	fc 01       	movw	r30, r24
    3a66:	88 27       	eor	r24, r24
    3a68:	ee 56       	subi	r30, 0x6E	; 110
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a6e:	0c 94 8f 58 	jmp	0xb11e	; 0xb11e <__tablejump2__>
    3a72:	ca 80       	ldd	r12, Y+2	; 0x02
    3a74:	db 80       	ldd	r13, Y+3	; 0x03
    3a76:	ec 80       	ldd	r14, Y+4	; 0x04
    3a78:	fd 80       	ldd	r15, Y+5	; 0x05
    3a7a:	f2 01       	movw	r30, r4
    3a7c:	46 85       	ldd	r20, Z+14	; 0x0e
    3a7e:	57 85       	ldd	r21, Z+15	; 0x0f
    3a80:	60 89       	ldd	r22, Z+16	; 0x10
    3a82:	71 89       	ldd	r23, Z+17	; 0x11
    3a84:	4c 0d       	add	r20, r12
    3a86:	5d 1d       	adc	r21, r13
    3a88:	6e 1d       	adc	r22, r14
    3a8a:	7f 1d       	adc	r23, r15
    3a8c:	c2 01       	movw	r24, r4
    3a8e:	80 dd       	rcall	.-1280   	; 0x3590 <prvInsertTimerInActiveList>
    3a90:	88 23       	and	r24, r24
    3a92:	d1 f1       	breq	.+116    	; 0x3b08 <prvTimerTask+0x1fe>
    3a94:	d2 01       	movw	r26, r4
    3a96:	55 96       	adiw	r26, 0x15	; 21
    3a98:	ed 91       	ld	r30, X+
    3a9a:	fc 91       	ld	r31, X
    3a9c:	56 97       	sbiw	r26, 0x16	; 22
    3a9e:	c2 01       	movw	r24, r4
    3aa0:	19 95       	eicall
    3aa2:	f2 01       	movw	r30, r4
    3aa4:	82 89       	ldd	r24, Z+18	; 0x12
    3aa6:	81 30       	cpi	r24, 0x01	; 1
    3aa8:	79 f5       	brne	.+94     	; 0x3b08 <prvTimerTask+0x1fe>
    3aaa:	4a 81       	ldd	r20, Y+2	; 0x02
    3aac:	5b 81       	ldd	r21, Y+3	; 0x03
    3aae:	6c 81       	ldd	r22, Y+4	; 0x04
    3ab0:	7d 81       	ldd	r23, Y+5	; 0x05
    3ab2:	86 85       	ldd	r24, Z+14	; 0x0e
    3ab4:	97 85       	ldd	r25, Z+15	; 0x0f
    3ab6:	a0 89       	ldd	r26, Z+16	; 0x10
    3ab8:	b1 89       	ldd	r27, Z+17	; 0x11
    3aba:	9a 01       	movw	r18, r20
    3abc:	ab 01       	movw	r20, r22
    3abe:	28 0f       	add	r18, r24
    3ac0:	39 1f       	adc	r19, r25
    3ac2:	4a 1f       	adc	r20, r26
    3ac4:	5b 1f       	adc	r21, r27
    3ac6:	c8 2c       	mov	r12, r8
    3ac8:	d9 2c       	mov	r13, r9
    3aca:	ea 2c       	mov	r14, r10
    3acc:	fb 2c       	mov	r15, r11
    3ace:	00 e0       	ldi	r16, 0x00	; 0
    3ad0:	10 e0       	ldi	r17, 0x00	; 0
    3ad2:	60 e0       	ldi	r22, 0x00	; 0
    3ad4:	c2 01       	movw	r24, r4
    3ad6:	25 de       	rcall	.-950    	; 0x3722 <xTimerGenericCommand>
    3ad8:	17 c0       	rjmp	.+46     	; 0x3b08 <prvTimerTask+0x1fe>
    3ada:	4a 81       	ldd	r20, Y+2	; 0x02
    3adc:	5b 81       	ldd	r21, Y+3	; 0x03
    3ade:	6c 81       	ldd	r22, Y+4	; 0x04
    3ae0:	7d 81       	ldd	r23, Y+5	; 0x05
    3ae2:	d2 01       	movw	r26, r4
    3ae4:	1e 96       	adiw	r26, 0x0e	; 14
    3ae6:	4d 93       	st	X+, r20
    3ae8:	5d 93       	st	X+, r21
    3aea:	6d 93       	st	X+, r22
    3aec:	7c 93       	st	X, r23
    3aee:	51 97       	sbiw	r26, 0x11	; 17
    3af0:	40 0f       	add	r20, r16
    3af2:	51 1f       	adc	r21, r17
    3af4:	62 1f       	adc	r22, r18
    3af6:	73 1f       	adc	r23, r19
    3af8:	68 01       	movw	r12, r16
    3afa:	79 01       	movw	r14, r18
    3afc:	c2 01       	movw	r24, r4
    3afe:	48 dd       	rcall	.-1392   	; 0x3590 <prvInsertTimerInActiveList>
    3b00:	03 c0       	rjmp	.+6      	; 0x3b08 <prvTimerTask+0x1fe>
    3b02:	c2 01       	movw	r24, r4
    3b04:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vPortFree>
    3b08:	28 2d       	mov	r18, r8
    3b0a:	39 2d       	mov	r19, r9
    3b0c:	4a 2d       	mov	r20, r10
    3b0e:	5b 2d       	mov	r21, r11
    3b10:	66 2d       	mov	r22, r6
    3b12:	77 2d       	mov	r23, r7
    3b14:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <xTimerQueue>
    3b18:	90 91 ad 06 	lds	r25, 0x06AD	; 0x8006ad <xTimerQueue+0x1>
    3b1c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <xQueueReceive>
    3b20:	81 11       	cpse	r24, r1
    3b22:	80 cf       	rjmp	.-256    	; 0x3a24 <prvTimerTask+0x11a>
    3b24:	06 cf       	rjmp	.-500    	; 0x3932 <prvTimerTask+0x28>
    3b26:	f7 d8       	rcall	.-3602   	; 0x2d16 <vTaskSuspendAll>
    3b28:	ce 01       	movw	r24, r28
    3b2a:	01 96       	adiw	r24, 0x01	; 1
    3b2c:	58 de       	rcall	.-848    	; 0x37de <prvSampleTimeNow>
    3b2e:	6b 87       	std	Y+11, r22	; 0x0b
    3b30:	7c 87       	std	Y+12, r23	; 0x0c
    3b32:	8d 87       	std	Y+13, r24	; 0x0d
    3b34:	9e 87       	std	Y+14, r25	; 0x0e
    3b36:	89 81       	ldd	r24, Y+1	; 0x01
    3b38:	81 11       	cpse	r24, r1
    3b3a:	72 cf       	rjmp	.-284    	; 0x3a20 <prvTimerTask+0x116>
    3b3c:	e0 91 ae 06 	lds	r30, 0x06AE	; 0x8006ae <pxOverflowTimerList>
    3b40:	f0 91 af 06 	lds	r31, 0x06AF	; 0x8006af <pxOverflowTimerList+0x1>
    3b44:	80 81       	ld	r24, Z
    3b46:	21 e0       	ldi	r18, 0x01	; 1
    3b48:	81 11       	cpse	r24, r1
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	28 2c       	mov	r2, r8
    3b4e:	39 2c       	mov	r3, r9
    3b50:	4a 2c       	mov	r4, r10
    3b52:	5b 2c       	mov	r5, r11
    3b54:	4f cf       	rjmp	.-354    	; 0x39f4 <prvTimerTask+0xea>

00003b56 <xTimerIsTimerActive>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
    3b56:	fc 01       	movw	r30, r24
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
    3b58:	0f b6       	in	r0, 0x3f	; 63
    3b5a:	f8 94       	cli
    3b5c:	0f 92       	push	r0
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	24 85       	ldd	r18, Z+12	; 0x0c
    3b62:	35 85       	ldd	r19, Z+13	; 0x0d
    3b64:	23 2b       	or	r18, r19
    3b66:	09 f4       	brne	.+2      	; 0x3b6a <xTimerIsTimerActive+0x14>
    3b68:	80 e0       	ldi	r24, 0x00	; 0
	}
	taskEXIT_CRITICAL();
    3b6a:	0f 90       	pop	r0
    3b6c:	0f be       	out	0x3f, r0	; 63

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
    3b6e:	08 95       	ret

00003b70 <pvTimerGetTimerID>:
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
    3b70:	0f b6       	in	r0, 0x3f	; 63
    3b72:	f8 94       	cli
    3b74:	0f 92       	push	r0
	{
		pvReturn = pxTimer->pvTimerID;
    3b76:	fc 01       	movw	r30, r24
    3b78:	83 89       	ldd	r24, Z+19	; 0x13
    3b7a:	94 89       	ldd	r25, Z+20	; 0x14
	}
	taskEXIT_CRITICAL();
    3b7c:	0f 90       	pop	r0
    3b7e:	0f be       	out	0x3f, r0	; 63

	return pvReturn;
}
    3b80:	08 95       	ret

00003b82 <Defrost>:
{
	
while(1){
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
    3b82:	c2 ec       	ldi	r28, 0xC2	; 194
    3b84:	d8 e0       	ldi	r29, 0x08	; 8
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Src_In<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3b86:	02 e2       	ldi	r16, 0x22	; 34
    3b88:	19 e0       	ldi	r17, 0x09	; 9
				if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
				else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3b8a:	0f 2e       	mov	r0, r31
    3b8c:	fe e3       	ldi	r31, 0x3E	; 62
    3b8e:	cf 2e       	mov	r12, r31
    3b90:	f2 e0       	ldi	r31, 0x02	; 2
    3b92:	df 2e       	mov	r13, r31
    3b94:	f0 2d       	mov	r31, r0
    3b96:	0f 2e       	mov	r0, r31
    3b98:	f0 e6       	ldi	r31, 0x60	; 96
    3b9a:	ef 2e       	mov	r14, r31
    3b9c:	f7 e0       	ldi	r31, 0x07	; 7
    3b9e:	ff 2e       	mov	r15, r31
    3ba0:	f0 2d       	mov	r31, r0
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Src_In<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3ba2:	33 24       	eor	r3, r3
    3ba4:	33 94       	inc	r3
    3ba6:	0f 2e       	mov	r0, r31
    3ba8:	f3 e3       	ldi	r31, 0x33	; 51
    3baa:	8f 2e       	mov	r8, r31
    3bac:	f2 e0       	ldi	r31, 0x02	; 2
    3bae:	9f 2e       	mov	r9, r31
    3bb0:	f0 2d       	mov	r31, r0
while(1){
			wdt_reset();
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
    3bb2:	0f 2e       	mov	r0, r31
    3bb4:	f3 e2       	ldi	r31, 0x23	; 35
    3bb6:	af 2e       	mov	r10, r31
    3bb8:	f2 e0       	ldi	r31, 0x02	; 2
    3bba:	bf 2e       	mov	r11, r31
    3bbc:	f0 2d       	mov	r31, r0
//////////////////////////////////////////////////
static void Defrost(void *pvParameters)
{
	
while(1){
			wdt_reset();
    3bbe:	a8 95       	wdr
			//xSerialxPrintf(&xSerial3Port,"Defrost_task\r\n");
			if(EEpromData.AireToWater==1){
    3bc0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bc2:	81 30       	cpi	r24, 0x01	; 1
    3bc4:	09 f0       	breq	.+2      	; 0x3bc8 <Defrost+0x46>
    3bc6:	cf c0       	rjmp	.+414    	; 0x3d66 <Defrost+0x1e4>
				
				if(forsDefrost==1){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;forsDefrost=0;xSerialxPrintf(&xSerial3Port,"StartForceDEF\r\n");}
    3bc8:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <forsDefrost>
    3bcc:	81 30       	cpi	r24, 0x01	; 1
    3bce:	91 f4       	brne	.+36     	; 0x3bf4 <Defrost+0x72>
    3bd0:	be 01       	movw	r22, r28
    3bd2:	c8 01       	movw	r24, r16
    3bd4:	0e 94 54 34 	call	0x68a8	; 0x68a8 <startDefrost>
    3bd8:	f8 01       	movw	r30, r16
    3bda:	31 86       	std	Z+9, r3	; 0x09
    3bdc:	10 92 c9 06 	sts	0x06C9, r1	; 0x8006c9 <forsDefrost>
    3be0:	bf 92       	push	r11
    3be2:	af 92       	push	r10
    3be4:	ff 92       	push	r15
    3be6:	ef 92       	push	r14
    3be8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3bec:	0f 90       	pop	r0
    3bee:	0f 90       	pop	r0
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
				if( !Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeBetweenDef *60000) && Comp_1.Src_In<EEpromData.TempDef && forsDefrost==0 ){startDefrost(&Comp_1,&EEpromData);Comp_1.def=true;xSerialxPrintf(&xSerial3Port,"StartDEF\r\n");}//
    3bf4:	f8 01       	movw	r30, r16
    3bf6:	81 85       	ldd	r24, Z+9	; 0x09
    3bf8:	81 11       	cpse	r24, r1
    3bfa:	48 c0       	rjmp	.+144    	; 0x3c8c <Defrost+0x10a>
    3bfc:	92 d8       	rcall	.-3804   	; 0x2d22 <xTaskGetTickCount>
    3bfe:	40 90 a3 08 	lds	r4, 0x08A3	; 0x8008a3 <timeTillDef>
    3c02:	50 90 a4 08 	lds	r5, 0x08A4	; 0x8008a4 <timeTillDef+0x1>
    3c06:	60 90 a5 08 	lds	r6, 0x08A5	; 0x8008a5 <timeTillDef+0x2>
    3c0a:	70 90 a6 08 	lds	r7, 0x08A6	; 0x8008a6 <timeTillDef+0x3>
    3c0e:	9b 01       	movw	r18, r22
    3c10:	ac 01       	movw	r20, r24
    3c12:	24 19       	sub	r18, r4
    3c14:	35 09       	sbc	r19, r5
    3c16:	46 09       	sbc	r20, r6
    3c18:	57 09       	sbc	r21, r7
    3c1a:	29 01       	movw	r4, r18
    3c1c:	3a 01       	movw	r6, r20
    3c1e:	2a a1       	ldd	r18, Y+34	; 0x22
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	a0 e6       	ldi	r26, 0x60	; 96
    3c24:	ba ee       	ldi	r27, 0xEA	; 234
    3c26:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    3c2a:	64 15       	cp	r22, r4
    3c2c:	75 05       	cpc	r23, r5
    3c2e:	86 05       	cpc	r24, r6
    3c30:	97 05       	cpc	r25, r7
    3c32:	38 f5       	brcc	.+78     	; 0x3c82 <Defrost+0x100>
    3c34:	6a a5       	ldd	r22, Y+42	; 0x2a
    3c36:	7b a5       	ldd	r23, Y+43	; 0x2b
    3c38:	07 2e       	mov	r0, r23
    3c3a:	00 0c       	add	r0, r0
    3c3c:	88 0b       	sbc	r24, r24
    3c3e:	99 0b       	sbc	r25, r25
    3c40:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    3c44:	9b 01       	movw	r18, r22
    3c46:	ac 01       	movw	r20, r24
    3c48:	f8 01       	movw	r30, r16
    3c4a:	62 a9       	ldd	r22, Z+50	; 0x32
    3c4c:	73 a9       	ldd	r23, Z+51	; 0x33
    3c4e:	84 a9       	ldd	r24, Z+52	; 0x34
    3c50:	95 a9       	ldd	r25, Z+53	; 0x35
    3c52:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    3c56:	88 23       	and	r24, r24
    3c58:	a4 f4       	brge	.+40     	; 0x3c82 <Defrost+0x100>
    3c5a:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <forsDefrost>
    3c5e:	81 11       	cpse	r24, r1
    3c60:	10 c0       	rjmp	.+32     	; 0x3c82 <Defrost+0x100>
    3c62:	be 01       	movw	r22, r28
    3c64:	c8 01       	movw	r24, r16
    3c66:	0e 94 54 34 	call	0x68a8	; 0x68a8 <startDefrost>
    3c6a:	f8 01       	movw	r30, r16
    3c6c:	31 86       	std	Z+9, r3	; 0x09
    3c6e:	9f 92       	push	r9
    3c70:	8f 92       	push	r8
    3c72:	ff 92       	push	r15
    3c74:	ef 92       	push	r14
    3c76:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3c7a:	0f 90       	pop	r0
    3c7c:	0f 90       	pop	r0
    3c7e:	0f 90       	pop	r0
    3c80:	0f 90       	pop	r0
				if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3c82:	f8 01       	movw	r30, r16
    3c84:	81 85       	ldd	r24, Z+9	; 0x09
    3c86:	88 23       	and	r24, r24
    3c88:	09 f4       	brne	.+2      	; 0x3c8c <Defrost+0x10a>
    3c8a:	6d c0       	rjmp	.+218    	; 0x3d66 <Defrost+0x1e4>
    3c8c:	4a d8       	rcall	.-3948   	; 0x2d22 <xTaskGetTickCount>
    3c8e:	40 90 a3 08 	lds	r4, 0x08A3	; 0x8008a3 <timeTillDef>
    3c92:	50 90 a4 08 	lds	r5, 0x08A4	; 0x8008a4 <timeTillDef+0x1>
    3c96:	60 90 a5 08 	lds	r6, 0x08A5	; 0x8008a5 <timeTillDef+0x2>
    3c9a:	70 90 a6 08 	lds	r7, 0x08A6	; 0x8008a6 <timeTillDef+0x3>
    3c9e:	9b 01       	movw	r18, r22
    3ca0:	ac 01       	movw	r20, r24
    3ca2:	24 19       	sub	r18, r4
    3ca4:	35 09       	sbc	r19, r5
    3ca6:	46 09       	sbc	r20, r6
    3ca8:	57 09       	sbc	r21, r7
    3caa:	29 01       	movw	r4, r18
    3cac:	3a 01       	movw	r6, r20
    3cae:	29 a1       	ldd	r18, Y+33	; 0x21
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	a0 e6       	ldi	r26, 0x60	; 96
    3cb4:	ba ee       	ldi	r27, 0xEA	; 234
    3cb6:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    3cba:	64 15       	cp	r22, r4
    3cbc:	75 05       	cpc	r23, r5
    3cbe:	86 05       	cpc	r24, r6
    3cc0:	97 05       	cpc	r25, r7
    3cc2:	f8 f4       	brcc	.+62     	; 0x3d02 <Defrost+0x180>
    3cc4:	f8 01       	movw	r30, r16
    3cc6:	82 85       	ldd	r24, Z+10	; 0x0a
    3cc8:	88 23       	and	r24, r24
    3cca:	d9 f0       	breq	.+54     	; 0x3d02 <Defrost+0x180>
    3ccc:	be 01       	movw	r22, r28
    3cce:	c8 01       	movw	r24, r16
    3cd0:	0e 94 6f 34 	call	0x68de	; 0x68de <stopDefrost>
    3cd4:	f8 01       	movw	r30, r16
    3cd6:	11 86       	std	Z+9, r1	; 0x09
    3cd8:	12 86       	std	Z+10, r1	; 0x0a
    3cda:	23 d8       	rcall	.-4026   	; 0x2d22 <xTaskGetTickCount>
    3cdc:	60 93 a3 08 	sts	0x08A3, r22	; 0x8008a3 <timeTillDef>
    3ce0:	70 93 a4 08 	sts	0x08A4, r23	; 0x8008a4 <timeTillDef+0x1>
    3ce4:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <timeTillDef+0x2>
    3ce8:	90 93 a6 08 	sts	0x08A6, r25	; 0x8008a6 <timeTillDef+0x3>
    3cec:	df 92       	push	r13
    3cee:	cf 92       	push	r12
    3cf0:	ff 92       	push	r15
    3cf2:	ef 92       	push	r14
    3cf4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3cf8:	0f 90       	pop	r0
    3cfa:	0f 90       	pop	r0
    3cfc:	0f 90       	pop	r0
    3cfe:	0f 90       	pop	r0
    3d00:	32 c0       	rjmp	.+100    	; 0x3d66 <Defrost+0x1e4>
				else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
    3d02:	f8 01       	movw	r30, r16
    3d04:	81 85       	ldd	r24, Z+9	; 0x09
    3d06:	88 23       	and	r24, r24
    3d08:	71 f1       	breq	.+92     	; 0x3d66 <Defrost+0x1e4>
    3d0a:	6c a5       	ldd	r22, Y+44	; 0x2c
    3d0c:	7d a5       	ldd	r23, Y+45	; 0x2d
    3d0e:	07 2e       	mov	r0, r23
    3d10:	00 0c       	add	r0, r0
    3d12:	88 0b       	sbc	r24, r24
    3d14:	99 0b       	sbc	r25, r25
    3d16:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    3d1a:	9b 01       	movw	r18, r22
    3d1c:	ac 01       	movw	r20, r24
    3d1e:	f8 01       	movw	r30, r16
    3d20:	62 a9       	ldd	r22, Z+50	; 0x32
    3d22:	73 a9       	ldd	r23, Z+51	; 0x33
    3d24:	84 a9       	ldd	r24, Z+52	; 0x34
    3d26:	95 a9       	ldd	r25, Z+53	; 0x35
    3d28:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    3d2c:	18 16       	cp	r1, r24
    3d2e:	dc f4       	brge	.+54     	; 0x3d66 <Defrost+0x1e4>
    3d30:	be 01       	movw	r22, r28
    3d32:	c8 01       	movw	r24, r16
    3d34:	0e 94 6f 34 	call	0x68de	; 0x68de <stopDefrost>
    3d38:	f8 01       	movw	r30, r16
    3d3a:	11 86       	std	Z+9, r1	; 0x09
    3d3c:	12 86       	std	Z+10, r1	; 0x0a
    3d3e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3d42:	60 93 a3 08 	sts	0x08A3, r22	; 0x8008a3 <timeTillDef>
    3d46:	70 93 a4 08 	sts	0x08A4, r23	; 0x8008a4 <timeTillDef+0x1>
    3d4a:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <timeTillDef+0x2>
    3d4e:	90 93 a6 08 	sts	0x08A6, r25	; 0x8008a6 <timeTillDef+0x3>
    3d52:	df 92       	push	r13
    3d54:	cf 92       	push	r12
    3d56:	ff 92       	push	r15
    3d58:	ef 92       	push	r14
    3d5a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3d5e:	0f 90       	pop	r0
    3d60:	0f 90       	pop	r0
    3d62:	0f 90       	pop	r0
    3d64:	0f 90       	pop	r0
	
			}
			//xSerialxPrintf(&xSerial3Port,"defrost\r\n");
vTaskDelay(2000);
    3d66:	60 ed       	ldi	r22, 0xD0	; 208
    3d68:	77 e0       	ldi	r23, 0x07	; 7
    3d6a:	80 e0       	ldi	r24, 0x00	; 0
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	38 d9       	rcall	.-3472   	; 0x2fe0 <vTaskDelay>
//xSerialxPrintf(&xSerial3Port,"Stack_0 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
//portYIELD();			
}
    3d70:	26 cf       	rjmp	.-436    	; 0x3bbe <Defrost+0x3c>

00003d72 <System_2>:
ReadSensors(&Comp_2);
portEXIT_CRITICAL();
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3d72:	c2 ec       	ldi	r28, 0xC2	; 194
    3d74:	d8 e0       	ldi	r29, 0x08	; 8
		{
			_err2=Check_Erors(&Comp_2,&EEpromData);
		
			//if(_err2>0 && Comp_1.error==0){Comp_2.error=_err2;Comp_2.countError++;Comp_2.Steps=0;Comp_Stop(&Comp_2);}//if(Comp_2.countError==3)EEpromData.power=0;
			mod_pump(&Comp_2,&EEpromData);
	       if(Comp_2.checkTrv && xTaskGetTickCount()-countTrvTime_2>10000 ){Comp_2.Steps = Fuzzy(&Comp_2,EEpromData.trv_corection_2);countTrvTime_2=xTaskGetTickCount();}
    3d76:	0f 2e       	mov	r0, r31
    3d78:	fa e0       	ldi	r31, 0x0A	; 10
    3d7a:	8f 2e       	mov	r8, r31
    3d7c:	f9 e0       	ldi	r31, 0x09	; 9
    3d7e:	9f 2e       	mov	r9, r31
    3d80:	f0 2d       	mov	r31, r0
    3d82:	0f 2e       	mov	r0, r31
    3d84:	f0 e1       	ldi	r31, 0x10	; 16
    3d86:	6f 2e       	mov	r6, r31
    3d88:	fa e0       	ldi	r31, 0x0A	; 10
    3d8a:	7f 2e       	mov	r7, r31
    3d8c:	f0 2d       	mov	r31, r0
portEXIT_CRITICAL();
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
		else if(EEpromData.power==0 && Comp_2.suply){Comp_2.suply=false;Comp_2.error=0;_err2=0;Comp_2.countError=0; xSerialxPrintf(&xSerial3Port,"OFF_System_2\r\n");stopTrvTimer(&Comp_2);Comp_Stop(&Comp_2);}
    3d8e:	0f 2e       	mov	r0, r31
    3d90:	f4 e1       	ldi	r31, 0x14	; 20
    3d92:	cf 2e       	mov	r12, r31
    3d94:	fa e0       	ldi	r31, 0x0A	; 10
    3d96:	df 2e       	mov	r13, r31
    3d98:	f0 2d       	mov	r31, r0
    3d9a:	0f 2e       	mov	r0, r31
    3d9c:	f6 e5       	ldi	r31, 0x56	; 86
    3d9e:	ef 2e       	mov	r14, r31
    3da0:	f2 e0       	ldi	r31, 0x02	; 2
    3da2:	ff 2e       	mov	r15, r31
    3da4:	f0 2d       	mov	r31, r0
    3da6:	00 e6       	ldi	r16, 0x60	; 96
    3da8:	17 e0       	ldi	r17, 0x07	; 7
ReadSensors(&Comp_2);
portEXIT_CRITICAL();
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3daa:	55 24       	eor	r5, r5
    3dac:	53 94       	inc	r5
    3dae:	0f 2e       	mov	r0, r31
    3db0:	f8 e4       	ldi	r31, 0x48	; 72
    3db2:	af 2e       	mov	r10, r31
    3db4:	f2 e0       	ldi	r31, 0x02	; 2
    3db6:	bf 2e       	mov	r11, r31
    3db8:	f0 2d       	mov	r31, r0
	(void) pvParameters;

	while (1)
	{
		
    	wdt_reset();
    3dba:	a8 95       	wdr
		//xSerialxPrintf(&xSerial3Port,"System_2_task\r\n");
vTaskSuspend( xHandleFirst );				
    3dbc:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <xHandleFirst>
    3dc0:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <xHandleFirst+0x1>
    3dc4:	98 d9       	rcall	.-3280   	; 0x30f6 <vTaskSuspend>
portENTER_CRITICAL();
    3dc6:	0f b6       	in	r0, 0x3f	; 63
    3dc8:	f8 94       	cli
    3dca:	0f 92       	push	r0
ReadSensors(&Comp_2);
    3dcc:	88 ea       	ldi	r24, 0xA8	; 168
    3dce:	99 e0       	ldi	r25, 0x09	; 9
    3dd0:	0e 94 5b 4c 	call	0x98b6	; 0x98b6 <ReadSensors>
portEXIT_CRITICAL();
    3dd4:	0f 90       	pop	r0
    3dd6:	0f be       	out	0x3f, r0	; 63
//xSerialxPrintf(&xSerial3Port,"task_2\r\n");
//xSerialxPrintf(&xSerial3Port,"TRVcorection2= %d \r\n",EEpromData.trv_corection_2);
vTaskResume( xHandleFirst );
    3dd8:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <xHandleFirst>
    3ddc:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <xHandleFirst+0x1>
    3de0:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <vTaskResume>
		if(EEpromData.power==1 && !Comp_2.suply && !Comp_2.switchToMode){Comp_2.suply=true;xSerialxPrintf(&xSerial3Port,"On_System_2\r\n");}//xTimerStart(xComutateTrv_2, 0);startTrvTimer(&Comp_2);
    3de4:	8c a1       	ldd	r24, Y+36	; 0x24
    3de6:	81 30       	cpi	r24, 0x01	; 1
    3de8:	a9 f4       	brne	.+42     	; 0x3e14 <System_2+0xa2>
    3dea:	80 91 ae 09 	lds	r24, 0x09AE	; 0x8009ae <Comp_2+0x6>
    3dee:	81 11       	cpse	r24, r1
    3df0:	3a c0       	rjmp	.+116    	; 0x3e66 <System_2+0xf4>
    3df2:	80 91 a8 09 	lds	r24, 0x09A8	; 0x8009a8 <Comp_2>
    3df6:	81 11       	cpse	r24, r1
    3df8:	74 c0       	rjmp	.+232    	; 0x3ee2 <System_2+0x170>
    3dfa:	50 92 ae 09 	sts	0x09AE, r5	; 0x8009ae <Comp_2+0x6>
    3dfe:	bf 92       	push	r11
    3e00:	af 92       	push	r10
    3e02:	1f 93       	push	r17
    3e04:	0f 93       	push	r16
    3e06:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3e0a:	0f 90       	pop	r0
    3e0c:	0f 90       	pop	r0
    3e0e:	0f 90       	pop	r0
    3e10:	0f 90       	pop	r0
    3e12:	24 c0       	rjmp	.+72     	; 0x3e5c <System_2+0xea>
		else if(EEpromData.power==0 && Comp_2.suply){Comp_2.suply=false;Comp_2.error=0;_err2=0;Comp_2.countError=0; xSerialxPrintf(&xSerial3Port,"OFF_System_2\r\n");stopTrvTimer(&Comp_2);Comp_Stop(&Comp_2);}
    3e14:	81 11       	cpse	r24, r1
    3e16:	22 c0       	rjmp	.+68     	; 0x3e5c <System_2+0xea>
    3e18:	80 91 ae 09 	lds	r24, 0x09AE	; 0x8009ae <Comp_2+0x6>
    3e1c:	88 23       	and	r24, r24
    3e1e:	09 f4       	brne	.+2      	; 0x3e22 <System_2+0xb0>
    3e20:	60 c0       	rjmp	.+192    	; 0x3ee2 <System_2+0x170>
    3e22:	e8 ea       	ldi	r30, 0xA8	; 168
    3e24:	f9 e0       	ldi	r31, 0x09	; 9
    3e26:	16 82       	std	Z+6, r1	; 0x06
    3e28:	d6 01       	movw	r26, r12
    3e2a:	1d 92       	st	X+, r1
    3e2c:	1c 92       	st	X, r1
    3e2e:	10 92 60 0a 	sts	0x0A60, r1	; 0x800a60 <_err2+0x1>
    3e32:	10 92 5f 0a 	sts	0x0A5F, r1	; 0x800a5f <_err2>
    3e36:	11 8a       	std	Z+17, r1	; 0x11
    3e38:	ff 92       	push	r15
    3e3a:	ef 92       	push	r14
    3e3c:	1f 93       	push	r17
    3e3e:	0f 93       	push	r16
    3e40:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3e44:	88 ea       	ldi	r24, 0xA8	; 168
    3e46:	99 e0       	ldi	r25, 0x09	; 9
    3e48:	0e 94 da 50 	call	0xa1b4	; 0xa1b4 <stopTrvTimer>
    3e4c:	88 ea       	ldi	r24, 0xA8	; 168
    3e4e:	99 e0       	ldi	r25, 0x09	; 9
    3e50:	0e 94 be 37 	call	0x6f7c	; 0x6f7c <Comp_Stop>
    3e54:	0f 90       	pop	r0
    3e56:	0f 90       	pop	r0
    3e58:	0f 90       	pop	r0
    3e5a:	0f 90       	pop	r0
	
		if(Comp_2.suply && Comp_2.countError<3)
    3e5c:	80 91 ae 09 	lds	r24, 0x09AE	; 0x8009ae <Comp_2+0x6>
    3e60:	88 23       	and	r24, r24
    3e62:	09 f4       	brne	.+2      	; 0x3e66 <System_2+0xf4>
    3e64:	3e c0       	rjmp	.+124    	; 0x3ee2 <System_2+0x170>
    3e66:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <Comp_2+0x11>
    3e6a:	83 30       	cpi	r24, 0x03	; 3
    3e6c:	d0 f5       	brcc	.+116    	; 0x3ee2 <System_2+0x170>
		{
			_err2=Check_Erors(&Comp_2,&EEpromData);
    3e6e:	be 01       	movw	r22, r28
    3e70:	88 ea       	ldi	r24, 0xA8	; 168
    3e72:	99 e0       	ldi	r25, 0x09	; 9
    3e74:	fa d2       	rcall	.+1524   	; 0x446a <Check_Erors>
    3e76:	90 93 60 0a 	sts	0x0A60, r25	; 0x800a60 <_err2+0x1>
    3e7a:	80 93 5f 0a 	sts	0x0A5F, r24	; 0x800a5f <_err2>
		
			//if(_err2>0 && Comp_1.error==0){Comp_2.error=_err2;Comp_2.countError++;Comp_2.Steps=0;Comp_Stop(&Comp_2);}//if(Comp_2.countError==3)EEpromData.power=0;
			mod_pump(&Comp_2,&EEpromData);
    3e7e:	be 01       	movw	r22, r28
    3e80:	88 ea       	ldi	r24, 0xA8	; 168
    3e82:	99 e0       	ldi	r25, 0x09	; 9
    3e84:	0e 94 c8 38 	call	0x7190	; 0x7190 <mod_pump>
	       if(Comp_2.checkTrv && xTaskGetTickCount()-countTrvTime_2>10000 ){Comp_2.Steps = Fuzzy(&Comp_2,EEpromData.trv_corection_2);countTrvTime_2=xTaskGetTickCount();}
    3e88:	80 91 a9 09 	lds	r24, 0x09A9	; 0x8009a9 <Comp_2+0x1>
    3e8c:	88 23       	and	r24, r24
    3e8e:	49 f1       	breq	.+82     	; 0x3ee2 <System_2+0x170>
    3e90:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3e94:	20 91 cd 06 	lds	r18, 0x06CD	; 0x8006cd <countTrvTime_2>
    3e98:	30 91 ce 06 	lds	r19, 0x06CE	; 0x8006ce <countTrvTime_2+0x1>
    3e9c:	40 91 cf 06 	lds	r20, 0x06CF	; 0x8006cf <countTrvTime_2+0x2>
    3ea0:	50 91 d0 06 	lds	r21, 0x06D0	; 0x8006d0 <countTrvTime_2+0x3>
    3ea4:	dc 01       	movw	r26, r24
    3ea6:	cb 01       	movw	r24, r22
    3ea8:	82 1b       	sub	r24, r18
    3eaa:	93 0b       	sbc	r25, r19
    3eac:	a4 0b       	sbc	r26, r20
    3eae:	b5 0b       	sbc	r27, r21
    3eb0:	81 31       	cpi	r24, 0x11	; 17
    3eb2:	97 42       	sbci	r25, 0x27	; 39
    3eb4:	a1 05       	cpc	r26, r1
    3eb6:	b1 05       	cpc	r27, r1
    3eb8:	a0 f0       	brcs	.+40     	; 0x3ee2 <System_2+0x170>
    3eba:	d4 01       	movw	r26, r8
    3ebc:	6d 91       	ld	r22, X+
    3ebe:	7c 91       	ld	r23, X
    3ec0:	88 ea       	ldi	r24, 0xA8	; 168
    3ec2:	99 e0       	ldi	r25, 0x09	; 9
    3ec4:	0e 94 29 51 	call	0xa252	; 0xa252 <Fuzzy>
    3ec8:	f3 01       	movw	r30, r6
    3eca:	91 83       	std	Z+1, r25	; 0x01
    3ecc:	80 83       	st	Z, r24
    3ece:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3ed2:	60 93 cd 06 	sts	0x06CD, r22	; 0x8006cd <countTrvTime_2>
    3ed6:	70 93 ce 06 	sts	0x06CE, r23	; 0x8006ce <countTrvTime_2+0x1>
    3eda:	80 93 cf 06 	sts	0x06CF, r24	; 0x8006cf <countTrvTime_2+0x2>
    3ede:	90 93 d0 06 	sts	0x06D0, r25	; 0x8006d0 <countTrvTime_2+0x3>
		}

		vTaskDelay(1000);
    3ee2:	68 ee       	ldi	r22, 0xE8	; 232
    3ee4:	73 e0       	ldi	r23, 0x03	; 3
    3ee6:	80 e0       	ldi	r24, 0x00	; 0
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	7a d8       	rcall	.-3852   	; 0x2fe0 <vTaskDelay>
		//xSerialxPrintf(&xSerial3Port,"Stack_2 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
		//portYIELD();
		//xSerialxPrintf(&xSerial3Port,"Stack2 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
	}
    3eec:	66 cf       	rjmp	.-308    	; 0x3dba <System_2+0x48>

00003eee <System_1>:
portENTER_CRITICAL();
ReadSensors(&Comp_1);
portEXIT_CRITICAL();
//EEpromData.AireToWater==1 &&

		if(EEpromData.NombComp==2)
    3eee:	c2 ec       	ldi	r28, 0xC2	; 194
    3ef0:	d8 e0       	ldi	r29, 0x08	; 8
		{
			vTaskResume( xHandleSecond );
			stop_second=false;
		}
		else if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
    3ef2:	77 24       	eor	r7, r7
    3ef4:	73 94       	inc	r7
				
			//if(_err1>0 && Comp_1.error==0){Comp_1.error=_err1;Comp_1.countError++;Comp_1.Steps=0;Comp_Stop(&Comp_1);xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);}//
				
			 mod_pump(&Comp_1,&EEpromData);
			//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);
			if(Comp_1.checkTrv && xTaskGetTickCount()-countTrvTime_1>10000 ){Comp_1.Steps = Fuzzy(&Comp_1,EEpromData.trv_corection_1);countTrvTime_1=xTaskGetTickCount();}
    3ef6:	0f 2e       	mov	r0, r31
    3ef8:	fa e8       	ldi	r31, 0x8A	; 138
    3efa:	8f 2e       	mov	r8, r31
    3efc:	f9 e0       	ldi	r31, 0x09	; 9
    3efe:	9f 2e       	mov	r9, r31
    3f00:	f0 2d       	mov	r31, r0
		}
		else if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",xTaskGetSchedulerState());
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
		else if(EEpromData.power==0 && Comp_1.suply){Comp_1.suply=false;PORTA &= 0x0;Comp_1.error=0;_err1=0;Comp_1.countError=0;xSerialxPrintf(&xSerial3Port,"OFF_System_1\r\n"); stopTrvTimer(&Comp_1);Comp_Stop(&Comp_1);}
    3f02:	0f 2e       	mov	r0, r31
    3f04:	fe e8       	ldi	r31, 0x8E	; 142
    3f06:	cf 2e       	mov	r12, r31
    3f08:	f9 e0       	ldi	r31, 0x09	; 9
    3f0a:	df 2e       	mov	r13, r31
    3f0c:	f0 2d       	mov	r31, r0
    3f0e:	0f 2e       	mov	r0, r31
    3f10:	f3 e7       	ldi	r31, 0x73	; 115
    3f12:	ef 2e       	mov	r14, r31
    3f14:	f2 e0       	ldi	r31, 0x02	; 2
    3f16:	ff 2e       	mov	r15, r31
    3f18:	f0 2d       	mov	r31, r0
    3f1a:	00 e6       	ldi	r16, 0x60	; 96
    3f1c:	17 e0       	ldi	r17, 0x07	; 7
			stop_second=false;
		}
		else if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",xTaskGetSchedulerState());
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
    3f1e:	0f 2e       	mov	r0, r31
    3f20:	f5 e6       	ldi	r31, 0x65	; 101
    3f22:	af 2e       	mov	r10, r31
    3f24:	f2 e0       	ldi	r31, 0x02	; 2
    3f26:	bf 2e       	mov	r11, r31
    3f28:	f0 2d       	mov	r31, r0
	
	
	while (1)
	{

		wdt_reset();
    3f2a:	a8 95       	wdr
		//xSerialxPrintf(&xSerial3Port,"System_1_task\r\n");
vTaskSuspend( xHandleSecond );		
    3f2c:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <xHandleSecond>
    3f30:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <xHandleSecond+0x1>
    3f34:	e0 d8       	rcall	.-3648   	; 0x30f6 <vTaskSuspend>
portENTER_CRITICAL();
    3f36:	0f b6       	in	r0, 0x3f	; 63
    3f38:	f8 94       	cli
    3f3a:	0f 92       	push	r0
ReadSensors(&Comp_1);
    3f3c:	82 e2       	ldi	r24, 0x22	; 34
    3f3e:	99 e0       	ldi	r25, 0x09	; 9
    3f40:	0e 94 5b 4c 	call	0x98b6	; 0x98b6 <ReadSensors>
portEXIT_CRITICAL();
    3f44:	0f 90       	pop	r0
    3f46:	0f be       	out	0x3f, r0	; 63
//EEpromData.AireToWater==1 &&

		if(EEpromData.NombComp==2)
    3f48:	88 a1       	ldd	r24, Y+32	; 0x20
    3f4a:	82 30       	cpi	r24, 0x02	; 2
    3f4c:	49 f4       	brne	.+18     	; 0x3f60 <System_1+0x72>
		{
			vTaskResume( xHandleSecond );
    3f4e:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <xHandleSecond>
    3f52:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <xHandleSecond+0x1>
    3f56:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <vTaskResume>
			stop_second=false;
    3f5a:	10 92 70 0a 	sts	0x0A70, r1	; 0x800a70 <stop_second>
    3f5e:	0c c0       	rjmp	.+24     	; 0x3f78 <System_1+0x8a>
		}
		else if(EEpromData.NombComp==1 && !stop_second){stop_second=true;Comp_Stop(&Comp_2);}
    3f60:	81 30       	cpi	r24, 0x01	; 1
    3f62:	51 f4       	brne	.+20     	; 0x3f78 <System_1+0x8a>
    3f64:	80 91 70 0a 	lds	r24, 0x0A70	; 0x800a70 <stop_second>
    3f68:	81 11       	cpse	r24, r1
    3f6a:	06 c0       	rjmp	.+12     	; 0x3f78 <System_1+0x8a>
    3f6c:	70 92 70 0a 	sts	0x0A70, r7	; 0x800a70 <stop_second>
    3f70:	88 ea       	ldi	r24, 0xA8	; 168
    3f72:	99 e0       	ldi	r25, 0x09	; 9
    3f74:	0e 94 be 37 	call	0x6f7c	; 0x6f7c <Comp_Stop>
//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",xTaskGetSchedulerState());
	
		if(EEpromData.power==1 && !Comp_1.suply && !Comp_1.switchToMode){Comp_1.suply=true;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"On_System_1\r\n");}//xTimerStart(xComutateTrv_1, 0);xTimerStart(xComutateTrv_1, 0);startTrvTimer(&Comp_1);
    3f78:	8c a1       	ldd	r24, Y+36	; 0x24
    3f7a:	81 30       	cpi	r24, 0x01	; 1
    3f7c:	f9 f4       	brne	.+62     	; 0x3fbc <System_1+0xce>
    3f7e:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <Comp_1+0x6>
    3f82:	81 11       	cpse	r24, r1
    3f84:	46 c0       	rjmp	.+140    	; 0x4012 <System_1+0x124>
    3f86:	80 91 22 09 	lds	r24, 0x0922	; 0x800922 <Comp_1>
    3f8a:	81 11       	cpse	r24, r1
    3f8c:	88 c0       	rjmp	.+272    	; 0x409e <System_1+0x1b0>
    3f8e:	70 92 28 09 	sts	0x0928, r7	; 0x800928 <Comp_1+0x6>
    3f92:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    3f96:	60 93 a3 08 	sts	0x08A3, r22	; 0x8008a3 <timeTillDef>
    3f9a:	70 93 a4 08 	sts	0x08A4, r23	; 0x8008a4 <timeTillDef+0x1>
    3f9e:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <timeTillDef+0x2>
    3fa2:	90 93 a6 08 	sts	0x08A6, r25	; 0x8008a6 <timeTillDef+0x3>
    3fa6:	bf 92       	push	r11
    3fa8:	af 92       	push	r10
    3faa:	1f 93       	push	r17
    3fac:	0f 93       	push	r16
    3fae:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3fb2:	0f 90       	pop	r0
    3fb4:	0f 90       	pop	r0
    3fb6:	0f 90       	pop	r0
    3fb8:	0f 90       	pop	r0
    3fba:	26 c0       	rjmp	.+76     	; 0x4008 <System_1+0x11a>
		else if(EEpromData.power==0 && Comp_1.suply){Comp_1.suply=false;PORTA &= 0x0;Comp_1.error=0;_err1=0;Comp_1.countError=0;xSerialxPrintf(&xSerial3Port,"OFF_System_1\r\n"); stopTrvTimer(&Comp_1);Comp_Stop(&Comp_1);}
    3fbc:	81 11       	cpse	r24, r1
    3fbe:	24 c0       	rjmp	.+72     	; 0x4008 <System_1+0x11a>
    3fc0:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <Comp_1+0x6>
    3fc4:	88 23       	and	r24, r24
    3fc6:	09 f4       	brne	.+2      	; 0x3fca <System_1+0xdc>
    3fc8:	6a c0       	rjmp	.+212    	; 0x409e <System_1+0x1b0>
    3fca:	e2 e2       	ldi	r30, 0x22	; 34
    3fcc:	f9 e0       	ldi	r31, 0x09	; 9
    3fce:	16 82       	std	Z+6, r1	; 0x06
    3fd0:	82 b1       	in	r24, 0x02	; 2
    3fd2:	12 b8       	out	0x02, r1	; 2
    3fd4:	d6 01       	movw	r26, r12
    3fd6:	1d 92       	st	X+, r1
    3fd8:	1c 92       	st	X, r1
    3fda:	10 92 2d 0a 	sts	0x0A2D, r1	; 0x800a2d <_err1+0x1>
    3fde:	10 92 2c 0a 	sts	0x0A2C, r1	; 0x800a2c <_err1>
    3fe2:	11 8a       	std	Z+17, r1	; 0x11
    3fe4:	ff 92       	push	r15
    3fe6:	ef 92       	push	r14
    3fe8:	1f 93       	push	r17
    3fea:	0f 93       	push	r16
    3fec:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    3ff0:	82 e2       	ldi	r24, 0x22	; 34
    3ff2:	99 e0       	ldi	r25, 0x09	; 9
    3ff4:	0e 94 da 50 	call	0xa1b4	; 0xa1b4 <stopTrvTimer>
    3ff8:	82 e2       	ldi	r24, 0x22	; 34
    3ffa:	99 e0       	ldi	r25, 0x09	; 9
    3ffc:	0e 94 be 37 	call	0x6f7c	; 0x6f7c <Comp_Stop>
    4000:	0f 90       	pop	r0
    4002:	0f 90       	pop	r0
    4004:	0f 90       	pop	r0
    4006:	0f 90       	pop	r0
		//xSerialxPrintf(&xSerial3Port,"mod =%d\r\n",EEpromData.AireToWater);
		//xSerialxPrintf(&xSerial3Port,"TimeBetweenDef =%d\r\n",EEpromData.TimeBetweenDef);
		
	
		
		if(Comp_1.suply &&  Comp_1.countError<3)
    4008:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <Comp_1+0x6>
    400c:	88 23       	and	r24, r24
    400e:	09 f4       	brne	.+2      	; 0x4012 <System_1+0x124>
    4010:	46 c0       	rjmp	.+140    	; 0x409e <System_1+0x1b0>
    4012:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <Comp_1+0x11>
    4016:	83 30       	cpi	r24, 0x03	; 3
    4018:	08 f0       	brcs	.+2      	; 0x401c <System_1+0x12e>
    401a:	41 c0       	rjmp	.+130    	; 0x409e <System_1+0x1b0>
			if( Comp_1.def && ((xTaskGetTickCount()-timeTillDef)>EEpromData.TimeDef*60000) && Comp_1.stopdef ){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
			else if(Comp_1.def && Comp_1.Src_In>EEpromData.TempStopDef){stopDefrost(&Comp_1,&EEpromData);Comp_1.stopdef=Comp_1.def=false;timeTillDef=xTaskGetTickCount();xSerialxPrintf(&xSerial3Port,"StopDEF\r\n");}
			
			}
			*/
			if(!init_system){_err1=Check_Erors(&Comp_1,&EEpromData);ADE7758_resetStatus();} else init_system=false;
    401c:	80 91 4c 0a 	lds	r24, 0x0A4C	; 0x800a4c <init_system>
    4020:	81 11       	cpse	r24, r1
    4022:	0a c0       	rjmp	.+20     	; 0x4038 <System_1+0x14a>
    4024:	be 01       	movw	r22, r28
    4026:	82 e2       	ldi	r24, 0x22	; 34
    4028:	99 e0       	ldi	r25, 0x09	; 9
    402a:	1f d2       	rcall	.+1086   	; 0x446a <Check_Erors>
    402c:	90 93 2d 0a 	sts	0x0A2D, r25	; 0x800a2d <_err1+0x1>
    4030:	80 93 2c 0a 	sts	0x0A2C, r24	; 0x800a2c <_err1>
    4034:	17 d2       	rcall	.+1070   	; 0x4464 <ADE7758_resetStatus>
    4036:	02 c0       	rjmp	.+4      	; 0x403c <System_1+0x14e>
    4038:	10 92 4c 0a 	sts	0x0A4C, r1	; 0x800a4c <init_system>
				
			//if(_err1>0 && Comp_1.error==0){Comp_1.error=_err1;Comp_1.countError++;Comp_1.Steps=0;Comp_Stop(&Comp_1);xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);}//
				
			 mod_pump(&Comp_1,&EEpromData);
    403c:	be 01       	movw	r22, r28
    403e:	82 e2       	ldi	r24, 0x22	; 34
    4040:	99 e0       	ldi	r25, 0x09	; 9
    4042:	0e 94 c8 38 	call	0x7190	; 0x7190 <mod_pump>
			//xSerialxPrintf(&xSerial3Port,"error =%d\r\n",Comp_1.error);
			if(Comp_1.checkTrv && xTaskGetTickCount()-countTrvTime_1>10000 ){Comp_1.Steps = Fuzzy(&Comp_1,EEpromData.trv_corection_1);countTrvTime_1=xTaskGetTickCount();}
    4046:	80 91 23 09 	lds	r24, 0x0923	; 0x800923 <Comp_1+0x1>
    404a:	88 23       	and	r24, r24
    404c:	41 f1       	breq	.+80     	; 0x409e <System_1+0x1b0>
    404e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    4052:	20 91 d1 06 	lds	r18, 0x06D1	; 0x8006d1 <countTrvTime_1>
    4056:	30 91 d2 06 	lds	r19, 0x06D2	; 0x8006d2 <countTrvTime_1+0x1>
    405a:	40 91 d3 06 	lds	r20, 0x06D3	; 0x8006d3 <countTrvTime_1+0x2>
    405e:	50 91 d4 06 	lds	r21, 0x06D4	; 0x8006d4 <countTrvTime_1+0x3>
    4062:	dc 01       	movw	r26, r24
    4064:	cb 01       	movw	r24, r22
    4066:	82 1b       	sub	r24, r18
    4068:	93 0b       	sbc	r25, r19
    406a:	a4 0b       	sbc	r26, r20
    406c:	b5 0b       	sbc	r27, r21
    406e:	81 31       	cpi	r24, 0x11	; 17
    4070:	97 42       	sbci	r25, 0x27	; 39
    4072:	a1 05       	cpc	r26, r1
    4074:	b1 05       	cpc	r27, r1
    4076:	98 f0       	brcs	.+38     	; 0x409e <System_1+0x1b0>
    4078:	6a a9       	ldd	r22, Y+50	; 0x32
    407a:	7b a9       	ldd	r23, Y+51	; 0x33
    407c:	82 e2       	ldi	r24, 0x22	; 34
    407e:	99 e0       	ldi	r25, 0x09	; 9
    4080:	0e 94 29 51 	call	0xa252	; 0xa252 <Fuzzy>
    4084:	d4 01       	movw	r26, r8
    4086:	8d 93       	st	X+, r24
    4088:	9c 93       	st	X, r25
    408a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    408e:	60 93 d1 06 	sts	0x06D1, r22	; 0x8006d1 <countTrvTime_1>
    4092:	70 93 d2 06 	sts	0x06D2, r23	; 0x8006d2 <countTrvTime_1+0x1>
    4096:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <countTrvTime_1+0x2>
    409a:	90 93 d4 06 	sts	0x06D4, r25	; 0x8006d4 <countTrvTime_1+0x3>
			
			
		}
		
		vTaskDelay(1000);
    409e:	68 ee       	ldi	r22, 0xE8	; 232
    40a0:	73 e0       	ldi	r23, 0x03	; 3
    40a2:	80 e0       	ldi	r24, 0x00	; 0
    40a4:	90 e0       	ldi	r25, 0x00	; 0
    40a6:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <vTaskDelay>
		//xSerialxPrintf(&xSerial3Port,"Stack1 =%d\r\n",uxTaskGetStackHighWaterMark( NULL ));
	}
    40aa:	3f cf       	rjmp	.-386    	; 0x3f2a <System_1+0x3c>

000040ac <ModBus>:

	while (1)
	{   
		//wdt_reset();
		//xSerialxPrintf(&xSerial3Port,"ModBus_task\r\n");
		if (xSemaphoreTake(xMbBinarySemaphore, portMAX_DELAY) == pdTRUE )
    40ac:	4f ef       	ldi	r20, 0xFF	; 255
    40ae:	5f ef       	ldi	r21, 0xFF	; 255
    40b0:	ba 01       	movw	r22, r20
    40b2:	80 91 4d 0a 	lds	r24, 0x0A4D	; 0x800a4d <xMbBinarySemaphore>
    40b6:	90 91 4e 0a 	lds	r25, 0x0A4E	; 0x800a4e <xMbBinarySemaphore+0x1>
    40ba:	0e 94 8f 0b 	call	0x171e	; 0x171e <xQueueSemaphoreTake>
    40be:	81 30       	cpi	r24, 0x01	; 1
    40c0:	a9 f7       	brne	.-22     	; 0x40ac <ModBus>
		{
			modbus_update();
    40c2:	b1 d7       	rcall	.+3938   	; 0x5026 <modbus_update>
			//xSerialxPrintf(&xSerial3Port,"Interrupt\r\n");
			if(port_0){xSerialRxFlush( &xSerialPort );port_0=false;indexBuf=0;}
    40c4:	80 91 67 0a 	lds	r24, 0x0A67	; 0x800a67 <port_0>
    40c8:	88 23       	and	r24, r24
    40ca:	49 f0       	breq	.+18     	; 0x40de <ModBus+0x32>
    40cc:	89 e1       	ldi	r24, 0x19	; 25
    40ce:	97 e0       	ldi	r25, 0x07	; 7
    40d0:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xSerialRxFlush>
    40d4:	10 92 67 0a 	sts	0x0A67, r1	; 0x800a67 <port_0>
    40d8:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <indexBuf>
    40dc:	e7 cf       	rjmp	.-50     	; 0x40ac <ModBus>
			else if(port_3){xSerialRxFlush( &xSerial3Port );port_3=false;indexBuf=0;}
    40de:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <port_3>
    40e2:	88 23       	and	r24, r24
    40e4:	19 f3       	breq	.-58     	; 0x40ac <ModBus>
    40e6:	80 e6       	ldi	r24, 0x60	; 96
    40e8:	97 e0       	ldi	r25, 0x07	; 7
    40ea:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xSerialRxFlush>
    40ee:	10 92 c1 08 	sts	0x08C1, r1	; 0x8008c1 <port_3>
    40f2:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <indexBuf>
    40f6:	da cf       	rjmp	.-76     	; 0x40ac <ModBus>

000040f8 <main>:
//--------------------------------------------------------
volatile long  countTimer;
int main(void) __attribute__ ((OS_main));

int main(void)
{
    40f8:	cd b7       	in	r28, 0x3d	; 61
    40fa:	de b7       	in	r29, 0x3e	; 62
    40fc:	a2 97       	sbiw	r28, 0x22	; 34
    40fe:	de bf       	out	0x3e, r29	; 62
    4100:	cd bf       	out	0x3d, r28	; 61

	initPins();
    4102:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <initPins>
	ADE7758_Init();
    4106:	91 d1       	rcall	.+802    	; 0x442a <ADE7758_Init>
	//timer_1_Init();
	Comp_1.Index=1;
    4108:	81 e0       	ldi	r24, 0x01	; 1
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	90 93 91 09 	sts	0x0991, r25	; 0x800991 <Comp_1+0x6f>
    4110:	80 93 90 09 	sts	0x0990, r24	; 0x800990 <Comp_1+0x6e>
	Comp_2.Index=2;
    4114:	82 e0       	ldi	r24, 0x02	; 2
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	90 93 17 0a 	sts	0x0A17, r25	; 0x800a17 <Comp_2+0x6f>
    411c:	80 93 16 0a 	sts	0x0A16, r24	; 0x800a16 <Comp_2+0x6e>
	//eeprom_write_block((void*)&EEpromData, ( void*)0, sizeof (xEEdata));
	current_time = time(NULL);
    4120:	80 e0       	ldi	r24, 0x00	; 0
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    4128:	60 93 bd 08 	sts	0x08BD, r22	; 0x8008bd <current_time>
    412c:	70 93 be 08 	sts	0x08BE, r23	; 0x8008be <current_time+0x1>
    4130:	80 93 bf 08 	sts	0x08BF, r24	; 0x8008bf <current_time+0x2>
    4134:	90 93 c0 08 	sts	0x08C0, r25	; 0x8008c0 <current_time+0x3>
	xSerialPort = xSerialPortInitMinimal( USART0, 9600, portSERIAL_BUFFER_TX, portSERIAL_BUFFER_RX);
    4138:	ee 24       	eor	r14, r14
    413a:	ea 94       	dec	r14
    413c:	f1 2c       	mov	r15, r1
    413e:	0f ef       	ldi	r16, 0xFF	; 255
    4140:	10 e0       	ldi	r17, 0x00	; 0
    4142:	20 e8       	ldi	r18, 0x80	; 128
    4144:	35 e2       	ldi	r19, 0x25	; 37
    4146:	40 e0       	ldi	r20, 0x00	; 0
    4148:	50 e0       	ldi	r21, 0x00	; 0
    414a:	60 e0       	ldi	r22, 0x00	; 0
    414c:	ce 01       	movw	r24, r28
    414e:	01 96       	adiw	r24, 0x01	; 1
    4150:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <xSerialPortInitMinimal>
    4154:	82 e2       	ldi	r24, 0x22	; 34
    4156:	fe 01       	movw	r30, r28
    4158:	31 96       	adiw	r30, 0x01	; 1
    415a:	a9 e1       	ldi	r26, 0x19	; 25
    415c:	b7 e0       	ldi	r27, 0x07	; 7
    415e:	01 90       	ld	r0, Z+
    4160:	0d 92       	st	X+, r0
    4162:	8a 95       	dec	r24
    4164:	e1 f7       	brne	.-8      	; 0x415e <main+0x66>
	xSerial3Port = xSerialPortInitMinimal( USART3, 9600, portSERIAL_BUFFER_TX, portSERIAL_BUFFER_RX);
    4166:	20 e8       	ldi	r18, 0x80	; 128
    4168:	35 e2       	ldi	r19, 0x25	; 37
    416a:	40 e0       	ldi	r20, 0x00	; 0
    416c:	50 e0       	ldi	r21, 0x00	; 0
    416e:	66 e0       	ldi	r22, 0x06	; 6
    4170:	ce 01       	movw	r24, r28
    4172:	01 96       	adiw	r24, 0x01	; 1
    4174:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <xSerialPortInitMinimal>
    4178:	82 e2       	ldi	r24, 0x22	; 34
    417a:	fe 01       	movw	r30, r28
    417c:	31 96       	adiw	r30, 0x01	; 1
    417e:	a0 e6       	ldi	r26, 0x60	; 96
    4180:	b7 e0       	ldi	r27, 0x07	; 7
    4182:	01 90       	ld	r0, Z+
    4184:	0d 92       	st	X+, r0
    4186:	8a 95       	dec	r24
    4188:	e1 f7       	brne	.-8      	; 0x4182 <main+0x8a>
	vSemaphoreCreateBinary(xMbBinarySemaphore);
    418a:	43 e0       	ldi	r20, 0x03	; 3
    418c:	60 e0       	ldi	r22, 0x00	; 0
    418e:	81 e0       	ldi	r24, 0x01	; 1
    4190:	0e 94 a7 09 	call	0x134e	; 0x134e <xQueueGenericCreate>
    4194:	90 93 4e 0a 	sts	0x0A4E, r25	; 0x800a4e <xMbBinarySemaphore+0x1>
    4198:	80 93 4d 0a 	sts	0x0A4D, r24	; 0x800a4d <xMbBinarySemaphore>
    419c:	00 97       	sbiw	r24, 0x00	; 0
    419e:	41 f0       	breq	.+16     	; 0x41b0 <main+0xb8>
    41a0:	00 e0       	ldi	r16, 0x00	; 0
    41a2:	20 e0       	ldi	r18, 0x00	; 0
    41a4:	30 e0       	ldi	r19, 0x00	; 0
    41a6:	a9 01       	movw	r20, r18
    41a8:	60 e0       	ldi	r22, 0x00	; 0
    41aa:	70 e0       	ldi	r23, 0x00	; 0
    41ac:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xQueueGenericSend>

    
	eeprom_read_block((void*)&EEpromData, (const void*)0, sizeof (xEEdata));
    41b0:	40 e6       	ldi	r20, 0x60	; 96
    41b2:	50 e0       	ldi	r21, 0x00	; 0
    41b4:	60 e0       	ldi	r22, 0x00	; 0
    41b6:	70 e0       	ldi	r23, 0x00	; 0
    41b8:	82 ec       	ldi	r24, 0xC2	; 194
    41ba:	98 e0       	ldi	r25, 0x08	; 8
    41bc:	0e 94 97 5b 	call	0xb72e	; 0xb72e <eeprom_read_block>
	activateTimers(&Comp_1);
    41c0:	82 e2       	ldi	r24, 0x22	; 34
    41c2:	99 e0       	ldi	r25, 0x09	; 9
    41c4:	0e 94 69 32 	call	0x64d2	; 0x64d2 <activateTimers>
	activateTimers(&Comp_2);
    41c8:	88 ea       	ldi	r24, 0xA8	; 168
    41ca:	99 e0       	ldi	r25, 0x09	; 9
    41cc:	0e 94 69 32 	call	0x64d2	; 0x64d2 <activateTimers>
	activateTrvTimer(&Comp_1);
    41d0:	82 e2       	ldi	r24, 0x22	; 34
    41d2:	99 e0       	ldi	r25, 0x09	; 9
    41d4:	0e 94 64 50 	call	0xa0c8	; 0xa0c8 <activateTrvTimer>
	activateTrvTimer(&Comp_2);
    41d8:	88 ea       	ldi	r24, 0xA8	; 168
    41da:	99 e0       	ldi	r25, 0x09	; 9
    41dc:	0e 94 64 50 	call	0xa0c8	; 0xa0c8 <activateTrvTimer>
	init_system=true;
    41e0:	81 e0       	ldi	r24, 0x01	; 1
    41e2:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <init_system>
	old_corection_1=EEpromData.trv_corection_1;
    41e6:	80 91 f4 08 	lds	r24, 0x08F4	; 0x8008f4 <EEpromData+0x32>
    41ea:	90 91 f5 08 	lds	r25, 0x08F5	; 0x8008f5 <EEpromData+0x33>
    41ee:	90 93 33 0a 	sts	0x0A33, r25	; 0x800a33 <old_corection_1+0x1>
    41f2:	80 93 32 0a 	sts	0x0A32, r24	; 0x800a32 <old_corection_1>
	old_corection_2=EEpromData.trv_corection_2;
    41f6:	80 91 0a 09 	lds	r24, 0x090A	; 0x80090a <EEpromData+0x48>
    41fa:	90 91 0b 09 	lds	r25, 0x090B	; 0x80090b <EEpromData+0x49>
    41fe:	90 93 a7 09 	sts	0x09A7, r25	; 0x8009a7 <old_corection_2+0x1>
    4202:	80 93 a6 09 	sts	0x09A6, r24	; 0x8009a6 <old_corection_2>
	Comp_1.modeOfPump=Comp_2.modeOfPump=selmode(&EEpromData);
    4206:	82 ec       	ldi	r24, 0xC2	; 194
    4208:	98 e0       	ldi	r25, 0x08	; 8
    420a:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <selmode>
    420e:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <Comp_2+0x10>
    4212:	80 93 32 09 	sts	0x0932, r24	; 0x800932 <Comp_1+0x10>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    4216:	99 e2       	ldi	r25, 0x29	; 41
    4218:	88 e1       	ldi	r24, 0x18	; 24
    421a:	0f b6       	in	r0, 0x3f	; 63
    421c:	f8 94       	cli
    421e:	a8 95       	wdr
    4220:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    4224:	0f be       	out	0x3f, r0	; 63
    4226:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	wdt_enable(WDTO_8S);
	//-------------------------------------
	xTaskCreate(ModBus,(const portCHAR *)"ModBus",256,NULL,2, NULL );
    422a:	e1 2c       	mov	r14, r1
    422c:	f1 2c       	mov	r15, r1
    422e:	02 e0       	ldi	r16, 0x02	; 2
    4230:	20 e0       	ldi	r18, 0x00	; 0
    4232:	30 e0       	ldi	r19, 0x00	; 0
    4234:	40 e0       	ldi	r20, 0x00	; 0
    4236:	51 e0       	ldi	r21, 0x01	; 1
    4238:	62 e8       	ldi	r22, 0x82	; 130
    423a:	72 e0       	ldi	r23, 0x02	; 2
    423c:	86 e5       	ldi	r24, 0x56	; 86
    423e:	90 e2       	ldi	r25, 0x20	; 32
    4240:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
	xTaskCreate(System_1,(const portCHAR *)"System_1",512,NULL,0, &xHandleFirst );
    4244:	0f 2e       	mov	r0, r31
    4246:	f7 ed       	ldi	r31, 0xD7	; 215
    4248:	ef 2e       	mov	r14, r31
    424a:	f6 e0       	ldi	r31, 0x06	; 6
    424c:	ff 2e       	mov	r15, r31
    424e:	f0 2d       	mov	r31, r0
    4250:	00 e0       	ldi	r16, 0x00	; 0
    4252:	20 e0       	ldi	r18, 0x00	; 0
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	40 e0       	ldi	r20, 0x00	; 0
    4258:	52 e0       	ldi	r21, 0x02	; 2
    425a:	69 e8       	ldi	r22, 0x89	; 137
    425c:	72 e0       	ldi	r23, 0x02	; 2
    425e:	87 e7       	ldi	r24, 0x77	; 119
    4260:	9f e1       	ldi	r25, 0x1F	; 31
    4262:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
	xTaskCreate(System_2,(const portCHAR *)"System_2",512,NULL,0, &xHandleSecond );
    4266:	0f 2e       	mov	r0, r31
    4268:	f5 ed       	ldi	r31, 0xD5	; 213
    426a:	ef 2e       	mov	r14, r31
    426c:	f6 e0       	ldi	r31, 0x06	; 6
    426e:	ff 2e       	mov	r15, r31
    4270:	f0 2d       	mov	r31, r0
    4272:	20 e0       	ldi	r18, 0x00	; 0
    4274:	30 e0       	ldi	r19, 0x00	; 0
    4276:	40 e0       	ldi	r20, 0x00	; 0
    4278:	52 e0       	ldi	r21, 0x02	; 2
    427a:	62 e9       	ldi	r22, 0x92	; 146
    427c:	72 e0       	ldi	r23, 0x02	; 2
    427e:	89 eb       	ldi	r24, 0xB9	; 185
    4280:	9e e1       	ldi	r25, 0x1E	; 30
    4282:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
	xTaskCreate(Defrost,(const portCHAR *)"Defrost",256,NULL,0, NULL );
    4286:	e1 2c       	mov	r14, r1
    4288:	f1 2c       	mov	r15, r1
    428a:	20 e0       	ldi	r18, 0x00	; 0
    428c:	30 e0       	ldi	r19, 0x00	; 0
    428e:	40 e0       	ldi	r20, 0x00	; 0
    4290:	51 e0       	ldi	r21, 0x01	; 1
    4292:	6b e9       	ldi	r22, 0x9B	; 155
    4294:	72 e0       	ldi	r23, 0x02	; 2
    4296:	81 ec       	ldi	r24, 0xC1	; 193
    4298:	9d e1       	ldi	r25, 0x1D	; 29
    429a:	0e 94 f6 14 	call	0x29ec	; 0x29ec <xTaskCreate>
	//--------------------------------------
	vTaskStartScheduler();
    429e:	0e 94 56 16 	call	0x2cac	; 0x2cac <vTaskStartScheduler>
}
    42a2:	80 e0       	ldi	r24, 0x00	; 0
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	a2 96       	adiw	r28, 0x22	; 34
    42a8:	0f b6       	in	r0, 0x3f	; 63
    42aa:	f8 94       	cli
    42ac:	de bf       	out	0x3e, r29	; 62
    42ae:	0f be       	out	0x3f, r0	; 63
    42b0:	cd bf       	out	0x3d, r28	; 61
    42b2:	08 95       	ret

000042b4 <__vector_17>:

ISR(TIMER1_COMPA_vect) // timer_compare_a
{
    42b4:	1f 92       	push	r1
    42b6:	0f 92       	push	r0
    42b8:	0f b6       	in	r0, 0x3f	; 63
    42ba:	0f 92       	push	r0
    42bc:	11 24       	eor	r1, r1
    42be:	0b b6       	in	r0, 0x3b	; 59
    42c0:	0f 92       	push	r0
    42c2:	2f 93       	push	r18
    42c4:	3f 93       	push	r19
    42c6:	4f 93       	push	r20
    42c8:	5f 93       	push	r21
    42ca:	6f 93       	push	r22
    42cc:	7f 93       	push	r23
    42ce:	8f 93       	push	r24
    42d0:	9f 93       	push	r25
    42d2:	af 93       	push	r26
    42d4:	bf 93       	push	r27
    42d6:	ef 93       	push	r30
    42d8:	ff 93       	push	r31
	
	static BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
    42da:	10 92 c8 06 	sts	0x06C8, r1	; 0x8006c8 <xHigherPriorityTaskWoken.3696>
	countTimer++;
    42de:	80 91 63 0a 	lds	r24, 0x0A63	; 0x800a63 <countTimer>
    42e2:	90 91 64 0a 	lds	r25, 0x0A64	; 0x800a64 <countTimer+0x1>
    42e6:	a0 91 65 0a 	lds	r26, 0x0A65	; 0x800a65 <countTimer+0x2>
    42ea:	b0 91 66 0a 	lds	r27, 0x0A66	; 0x800a66 <countTimer+0x3>
    42ee:	01 96       	adiw	r24, 0x01	; 1
    42f0:	a1 1d       	adc	r26, r1
    42f2:	b1 1d       	adc	r27, r1
    42f4:	80 93 63 0a 	sts	0x0A63, r24	; 0x800a63 <countTimer>
    42f8:	90 93 64 0a 	sts	0x0A64, r25	; 0x800a64 <countTimer+0x1>
    42fc:	a0 93 65 0a 	sts	0x0A65, r26	; 0x800a65 <countTimer+0x2>
    4300:	b0 93 66 0a 	sts	0x0A66, r27	; 0x800a66 <countTimer+0x3>
	if(countTimer==7){stop_1_Timer();countTimer=0;xSemaphoreGiveFromISR(xMbBinarySemaphore,&xHigherPriorityTaskWoken);}
    4304:	80 91 63 0a 	lds	r24, 0x0A63	; 0x800a63 <countTimer>
    4308:	90 91 64 0a 	lds	r25, 0x0A64	; 0x800a64 <countTimer+0x1>
    430c:	a0 91 65 0a 	lds	r26, 0x0A65	; 0x800a65 <countTimer+0x2>
    4310:	b0 91 66 0a 	lds	r27, 0x0A66	; 0x800a66 <countTimer+0x3>
    4314:	07 97       	sbiw	r24, 0x07	; 7
    4316:	a1 05       	cpc	r26, r1
    4318:	b1 05       	cpc	r27, r1
    431a:	89 f4       	brne	.+34     	; 0x433e <__vector_17+0x8a>
    431c:	17 d3       	rcall	.+1582   	; 0x494c <stop_1_Timer>
    431e:	10 92 63 0a 	sts	0x0A63, r1	; 0x800a63 <countTimer>
    4322:	10 92 64 0a 	sts	0x0A64, r1	; 0x800a64 <countTimer+0x1>
    4326:	10 92 65 0a 	sts	0x0A65, r1	; 0x800a65 <countTimer+0x2>
    432a:	10 92 66 0a 	sts	0x0A66, r1	; 0x800a66 <countTimer+0x3>
    432e:	68 ec       	ldi	r22, 0xC8	; 200
    4330:	76 e0       	ldi	r23, 0x06	; 6
    4332:	80 91 4d 0a 	lds	r24, 0x0A4D	; 0x800a4d <xMbBinarySemaphore>
    4336:	90 91 4e 0a 	lds	r25, 0x0A4E	; 0x800a4e <xMbBinarySemaphore+0x1>
    433a:	0e 94 c9 0a 	call	0x1592	; 0x1592 <xQueueGiveFromISR>
	//if( xHigherPriorityTaskWoken == pdTRUE )portYIELD();

}
    433e:	ff 91       	pop	r31
    4340:	ef 91       	pop	r30
    4342:	bf 91       	pop	r27
    4344:	af 91       	pop	r26
    4346:	9f 91       	pop	r25
    4348:	8f 91       	pop	r24
    434a:	7f 91       	pop	r23
    434c:	6f 91       	pop	r22
    434e:	5f 91       	pop	r21
    4350:	4f 91       	pop	r20
    4352:	3f 91       	pop	r19
    4354:	2f 91       	pop	r18
    4356:	0f 90       	pop	r0
    4358:	0b be       	out	0x3b, r0	; 59
    435a:	0f 90       	pop	r0
    435c:	0f be       	out	0x3f, r0	; 63
    435e:	0f 90       	pop	r0
    4360:	1f 90       	pop	r1
    4362:	18 95       	reti

00004364 <ADE7758_read24>:
}
long ADE7758_getMaskInterrupts(void){
	return ADE7758_read24(MASK);
}
void ADE7758_setMaskInterrupts(unsigned long data){
	return ADE7758_write24(MASK, data);
    4364:	1f 93       	push	r17
    4366:	cf 93       	push	r28
    4368:	df 93       	push	r29
    436a:	c8 2f       	mov	r28, r24
    436c:	0f b6       	in	r0, 0x3f	; 63
    436e:	f8 94       	cli
    4370:	0f 92       	push	r0
    4372:	84 e0       	ldi	r24, 0x04	; 4
    4374:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <spiSelect>
    4378:	8c 2f       	mov	r24, r28
    437a:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    437e:	80 e0       	ldi	r24, 0x00	; 0
    4380:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    4384:	18 2f       	mov	r17, r24
    4386:	80 e0       	ldi	r24, 0x00	; 0
    4388:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    438c:	c8 2f       	mov	r28, r24
    438e:	80 e0       	ldi	r24, 0x00	; 0
    4390:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    4394:	d8 2f       	mov	r29, r24
    4396:	84 e0       	ldi	r24, 0x04	; 4
    4398:	0e 94 17 14 	call	0x282e	; 0x282e <spiDeselect>
    439c:	0f 90       	pop	r0
    439e:	0f be       	out	0x3f, r0	; 63
    43a0:	8c 2f       	mov	r24, r28
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	a0 e0       	ldi	r26, 0x00	; 0
    43a6:	b0 e0       	ldi	r27, 0x00	; 0
    43a8:	ba 2f       	mov	r27, r26
    43aa:	a9 2f       	mov	r26, r25
    43ac:	98 2f       	mov	r25, r24
    43ae:	88 27       	eor	r24, r24
    43b0:	a1 2b       	or	r26, r17
    43b2:	bc 01       	movw	r22, r24
    43b4:	cd 01       	movw	r24, r26
    43b6:	6d 2b       	or	r22, r29
    43b8:	df 91       	pop	r29
    43ba:	cf 91       	pop	r28
    43bc:	1f 91       	pop	r17
    43be:	08 95       	ret

000043c0 <ADE7758_write8>:
    43c0:	cf 93       	push	r28
    43c2:	df 93       	push	r29
    43c4:	d8 2f       	mov	r29, r24
    43c6:	c6 2f       	mov	r28, r22
    43c8:	0f b6       	in	r0, 0x3f	; 63
    43ca:	f8 94       	cli
    43cc:	0f 92       	push	r0
    43ce:	84 e0       	ldi	r24, 0x04	; 4
    43d0:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <spiSelect>
    43d4:	8d 2f       	mov	r24, r29
    43d6:	80 68       	ori	r24, 0x80	; 128
    43d8:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    43dc:	8c 2f       	mov	r24, r28
    43de:	0e 94 37 14 	call	0x286e	; 0x286e <spiTransfer>
    43e2:	84 e0       	ldi	r24, 0x04	; 4
    43e4:	0e 94 17 14 	call	0x282e	; 0x282e <spiDeselect>
    43e8:	0f 90       	pop	r0
    43ea:	0f be       	out	0x3f, r0	; 63
    43ec:	df 91       	pop	r29
    43ee:	cf 91       	pop	r28
    43f0:	08 95       	ret

000043f2 <ADE7758_setOpMode>:
    43f2:	68 2f       	mov	r22, r24
    43f4:	83 e1       	ldi	r24, 0x13	; 19
    43f6:	e4 cf       	rjmp	.-56     	; 0x43c0 <ADE7758_write8>
    43f8:	08 95       	ret

000043fa <ADE7758_setWavMode>:
    43fa:	68 2f       	mov	r22, r24
    43fc:	85 e1       	ldi	r24, 0x15	; 21
    43fe:	e0 cf       	rjmp	.-64     	; 0x43c0 <ADE7758_write8>
    4400:	08 95       	ret

00004402 <ADE7758_setLcycMode>:
    4402:	68 2f       	mov	r22, r24
    4404:	87 e1       	ldi	r24, 0x17	; 23
    4406:	dc cf       	rjmp	.-72     	; 0x43c0 <ADE7758_write8>
    4408:	08 95       	ret

0000440a <ADE7758_setupDivs>:
    440a:	cf 93       	push	r28
    440c:	df 93       	push	r29
    440e:	d6 2f       	mov	r29, r22
    4410:	c4 2f       	mov	r28, r20
    4412:	68 2f       	mov	r22, r24
    4414:	82 e4       	ldi	r24, 0x42	; 66
    4416:	d4 df       	rcall	.-88     	; 0x43c0 <ADE7758_write8>
    4418:	6d 2f       	mov	r22, r29
    441a:	83 e4       	ldi	r24, 0x43	; 67
    441c:	d1 df       	rcall	.-94     	; 0x43c0 <ADE7758_write8>
    441e:	6c 2f       	mov	r22, r28
    4420:	84 e4       	ldi	r24, 0x44	; 68
    4422:	ce df       	rcall	.-100    	; 0x43c0 <ADE7758_write8>
    4424:	df 91       	pop	r29
    4426:	cf 91       	pop	r28
    4428:	08 95       	ret

0000442a <ADE7758_Init>:
    442a:	88 e0       	ldi	r24, 0x08	; 8
    442c:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <spiSetDataMode>
    4430:	86 e0       	ldi	r24, 0x06	; 6
    4432:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <spiSetClockDivider>
    4436:	81 e0       	ldi	r24, 0x01	; 1
    4438:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <spiSetBitOrder>
    443c:	84 e0       	ldi	r24, 0x04	; 4
    443e:	0e 94 81 13 	call	0x2702	; 0x2702 <spiBegin>
    4442:	80 e0       	ldi	r24, 0x00	; 0
    4444:	de df       	rcall	.-68     	; 0x4402 <ADE7758_setLcycMode>
    4446:	60 e0       	ldi	r22, 0x00	; 0
    4448:	83 e2       	ldi	r24, 0x23	; 35
    444a:	ba df       	rcall	.-140    	; 0x43c0 <ADE7758_write8>
    444c:	42 e0       	ldi	r20, 0x02	; 2
    444e:	62 e0       	ldi	r22, 0x02	; 2
    4450:	82 e0       	ldi	r24, 0x02	; 2
    4452:	db df       	rcall	.-74     	; 0x440a <ADE7758_setupDivs>
    4454:	84 e0       	ldi	r24, 0x04	; 4
    4456:	cd df       	rcall	.-102    	; 0x43f2 <ADE7758_setOpMode>
    4458:	80 e1       	ldi	r24, 0x10	; 16
    445a:	cf cf       	rjmp	.-98     	; 0x43fa <ADE7758_setWavMode>
    445c:	08 95       	ret

0000445e <ADE7758_getStatus>:
}
unsigned long ADE7758_getStatus(){
	return ADE7758_read24(STATUS);
    445e:	89 e1       	ldi	r24, 0x19	; 25
    4460:	81 cf       	rjmp	.-254    	; 0x4364 <ADE7758_read24>
}
    4462:	08 95       	ret

00004464 <ADE7758_resetStatus>:
unsigned long ADE7758_resetStatus(){
	return ADE7758_read24(RSTATUS);
    4464:	8a e1       	ldi	r24, 0x1A	; 26
    4466:	7e cf       	rjmp	.-260    	; 0x4364 <ADE7758_read24>
}
    4468:	08 95       	ret

0000446a <Check_Erors>:
#include "Errors.h"

extern  bool def;
int Check_Erors(xCompressor *comp,xEEdata *EElimit)
{
    446a:	4f 92       	push	r4
    446c:	5f 92       	push	r5
    446e:	6f 92       	push	r6
    4470:	7f 92       	push	r7
    4472:	8f 92       	push	r8
    4474:	9f 92       	push	r9
    4476:	af 92       	push	r10
    4478:	bf 92       	push	r11
    447a:	cf 92       	push	r12
    447c:	df 92       	push	r13
    447e:	ef 92       	push	r14
    4480:	ff 92       	push	r15
    4482:	0f 93       	push	r16
    4484:	1f 93       	push	r17
    4486:	cf 93       	push	r28
    4488:	df 93       	push	r29
    448a:	00 d0       	rcall	.+0      	; 0x448c <Check_Erors+0x22>
    448c:	00 d0       	rcall	.+0      	; 0x448e <Check_Erors+0x24>
    448e:	cd b7       	in	r28, 0x3d	; 61
    4490:	de b7       	in	r29, 0x3e	; 62
    4492:	9e 83       	std	Y+6, r25	; 0x06
    4494:	8d 83       	std	Y+5, r24	; 0x05
    4496:	8b 01       	movw	r16, r22
		if( comp->Dhw_Temp<-100){return (10+comp->Index);}
    4498:	20 e0       	ldi	r18, 0x00	; 0
    449a:	30 e0       	ldi	r19, 0x00	; 0
    449c:	48 ec       	ldi	r20, 0xC8	; 200
    449e:	52 ec       	ldi	r21, 0xC2	; 194
    44a0:	dc 01       	movw	r26, r24
    44a2:	52 96       	adiw	r26, 0x12	; 18
    44a4:	6d 91       	ld	r22, X+
    44a6:	7d 91       	ld	r23, X+
    44a8:	8d 91       	ld	r24, X+
    44aa:	9c 91       	ld	r25, X
    44ac:	55 97       	sbiw	r26, 0x15	; 21
    44ae:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    44b2:	88 23       	and	r24, r24
    44b4:	44 f4       	brge	.+16     	; 0x44c6 <Check_Erors+0x5c>
    44b6:	ed 81       	ldd	r30, Y+5	; 0x05
    44b8:	fe 81       	ldd	r31, Y+6	; 0x06
    44ba:	e2 59       	subi	r30, 0x92	; 146
    44bc:	ff 4f       	sbci	r31, 0xFF	; 255
    44be:	80 81       	ld	r24, Z
    44c0:	91 81       	ldd	r25, Z+1	; 0x01
    44c2:	0a 96       	adiw	r24, 0x0a	; 10
    44c4:	21 c2       	rjmp	.+1090   	; 0x4908 <Check_Erors+0x49e>
		else if(comp->Bac_Temp<-100) {return (20+comp->Index);}
    44c6:	ad 81       	ldd	r26, Y+5	; 0x05
    44c8:	be 81       	ldd	r27, Y+6	; 0x06
    44ca:	56 96       	adiw	r26, 0x16	; 22
    44cc:	cd 90       	ld	r12, X+
    44ce:	dd 90       	ld	r13, X+
    44d0:	ed 90       	ld	r14, X+
    44d2:	fc 90       	ld	r15, X
    44d4:	59 97       	sbiw	r26, 0x19	; 25
    44d6:	20 e0       	ldi	r18, 0x00	; 0
    44d8:	30 e0       	ldi	r19, 0x00	; 0
    44da:	48 ec       	ldi	r20, 0xC8	; 200
    44dc:	52 ec       	ldi	r21, 0xC2	; 194
    44de:	c7 01       	movw	r24, r14
    44e0:	b6 01       	movw	r22, r12
    44e2:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    44e6:	88 23       	and	r24, r24
    44e8:	44 f4       	brge	.+16     	; 0x44fa <Check_Erors+0x90>
    44ea:	ed 81       	ldd	r30, Y+5	; 0x05
    44ec:	fe 81       	ldd	r31, Y+6	; 0x06
    44ee:	e2 59       	subi	r30, 0x92	; 146
    44f0:	ff 4f       	sbci	r31, 0xFF	; 255
    44f2:	80 81       	ld	r24, Z
    44f4:	91 81       	ldd	r25, Z+1	; 0x01
    44f6:	44 96       	adiw	r24, 0x14	; 20
    44f8:	07 c2       	rjmp	.+1038   	; 0x4908 <Check_Erors+0x49e>
		else if (comp->Heat_Out<-100) {return (30+comp->Index);}
    44fa:	ad 81       	ldd	r26, Y+5	; 0x05
    44fc:	be 81       	ldd	r27, Y+6	; 0x06
    44fe:	9a 96       	adiw	r26, 0x2a	; 42
    4500:	4d 90       	ld	r4, X+
    4502:	5d 90       	ld	r5, X+
    4504:	6d 90       	ld	r6, X+
    4506:	7c 90       	ld	r7, X
    4508:	9d 97       	sbiw	r26, 0x2d	; 45
    450a:	20 e0       	ldi	r18, 0x00	; 0
    450c:	30 e0       	ldi	r19, 0x00	; 0
    450e:	48 ec       	ldi	r20, 0xC8	; 200
    4510:	52 ec       	ldi	r21, 0xC2	; 194
    4512:	c3 01       	movw	r24, r6
    4514:	b2 01       	movw	r22, r4
    4516:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    451a:	88 23       	and	r24, r24
    451c:	44 f4       	brge	.+16     	; 0x452e <Check_Erors+0xc4>
    451e:	ed 81       	ldd	r30, Y+5	; 0x05
    4520:	fe 81       	ldd	r31, Y+6	; 0x06
    4522:	e2 59       	subi	r30, 0x92	; 146
    4524:	ff 4f       	sbci	r31, 0xFF	; 255
    4526:	80 81       	ld	r24, Z
    4528:	91 81       	ldd	r25, Z+1	; 0x01
    452a:	4e 96       	adiw	r24, 0x1e	; 30
    452c:	ed c1       	rjmp	.+986    	; 0x4908 <Check_Erors+0x49e>
		else if (comp->Heat_In<-100){return (40+comp->Index);}
    452e:	ad 81       	ldd	r26, Y+5	; 0x05
    4530:	be 81       	ldd	r27, Y+6	; 0x06
    4532:	9e 96       	adiw	r26, 0x2e	; 46
    4534:	8d 90       	ld	r8, X+
    4536:	9d 90       	ld	r9, X+
    4538:	ad 90       	ld	r10, X+
    453a:	bc 90       	ld	r11, X
    453c:	d1 97       	sbiw	r26, 0x31	; 49
    453e:	20 e0       	ldi	r18, 0x00	; 0
    4540:	30 e0       	ldi	r19, 0x00	; 0
    4542:	48 ec       	ldi	r20, 0xC8	; 200
    4544:	52 ec       	ldi	r21, 0xC2	; 194
    4546:	c5 01       	movw	r24, r10
    4548:	b4 01       	movw	r22, r8
    454a:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    454e:	88 23       	and	r24, r24
    4550:	44 f4       	brge	.+16     	; 0x4562 <Check_Erors+0xf8>
    4552:	ed 81       	ldd	r30, Y+5	; 0x05
    4554:	fe 81       	ldd	r31, Y+6	; 0x06
    4556:	e2 59       	subi	r30, 0x92	; 146
    4558:	ff 4f       	sbci	r31, 0xFF	; 255
    455a:	80 81       	ld	r24, Z
    455c:	91 81       	ldd	r25, Z+1	; 0x01
    455e:	88 96       	adiw	r24, 0x28	; 40
    4560:	d3 c1       	rjmp	.+934    	; 0x4908 <Check_Erors+0x49e>
		else if(comp->Src_In<-100) {return (50+comp->Index);}
    4562:	20 e0       	ldi	r18, 0x00	; 0
    4564:	30 e0       	ldi	r19, 0x00	; 0
    4566:	48 ec       	ldi	r20, 0xC8	; 200
    4568:	52 ec       	ldi	r21, 0xC2	; 194
    456a:	ad 81       	ldd	r26, Y+5	; 0x05
    456c:	be 81       	ldd	r27, Y+6	; 0x06
    456e:	d2 96       	adiw	r26, 0x32	; 50
    4570:	6d 91       	ld	r22, X+
    4572:	7d 91       	ld	r23, X+
    4574:	8d 91       	ld	r24, X+
    4576:	9c 91       	ld	r25, X
    4578:	d5 97       	sbiw	r26, 0x35	; 53
    457a:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    457e:	88 23       	and	r24, r24
    4580:	44 f4       	brge	.+16     	; 0x4592 <Check_Erors+0x128>
    4582:	ed 81       	ldd	r30, Y+5	; 0x05
    4584:	fe 81       	ldd	r31, Y+6	; 0x06
    4586:	e2 59       	subi	r30, 0x92	; 146
    4588:	ff 4f       	sbci	r31, 0xFF	; 255
    458a:	80 81       	ld	r24, Z
    458c:	91 81       	ldd	r25, Z+1	; 0x01
    458e:	c2 96       	adiw	r24, 0x32	; 50
    4590:	bb c1       	rjmp	.+886    	; 0x4908 <Check_Erors+0x49e>
		else if (comp->Src_Out<-100) {return (60+comp->Index);}
    4592:	20 e0       	ldi	r18, 0x00	; 0
    4594:	30 e0       	ldi	r19, 0x00	; 0
    4596:	48 ec       	ldi	r20, 0xC8	; 200
    4598:	52 ec       	ldi	r21, 0xC2	; 194
    459a:	ad 81       	ldd	r26, Y+5	; 0x05
    459c:	be 81       	ldd	r27, Y+6	; 0x06
    459e:	d6 96       	adiw	r26, 0x36	; 54
    45a0:	6d 91       	ld	r22, X+
    45a2:	7d 91       	ld	r23, X+
    45a4:	8d 91       	ld	r24, X+
    45a6:	9c 91       	ld	r25, X
    45a8:	d9 97       	sbiw	r26, 0x39	; 57
    45aa:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    45ae:	88 23       	and	r24, r24
    45b0:	44 f4       	brge	.+16     	; 0x45c2 <Check_Erors+0x158>
    45b2:	ed 81       	ldd	r30, Y+5	; 0x05
    45b4:	fe 81       	ldd	r31, Y+6	; 0x06
    45b6:	e2 59       	subi	r30, 0x92	; 146
    45b8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ba:	80 81       	ld	r24, Z
    45bc:	91 81       	ldd	r25, Z+1	; 0x01
    45be:	cc 96       	adiw	r24, 0x3c	; 60
    45c0:	a3 c1       	rjmp	.+838    	; 0x4908 <Check_Erors+0x49e>
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
    45c2:	ad 81       	ldd	r26, Y+5	; 0x05
    45c4:	be 81       	ldd	r27, Y+6	; 0x06
    45c6:	da 96       	adiw	r26, 0x3a	; 58
    45c8:	8d 91       	ld	r24, X+
    45ca:	9d 91       	ld	r25, X+
    45cc:	0d 90       	ld	r0, X+
    45ce:	bc 91       	ld	r27, X
    45d0:	a0 2d       	mov	r26, r0
    45d2:	89 83       	std	Y+1, r24	; 0x01
    45d4:	9a 83       	std	Y+2, r25	; 0x02
    45d6:	ab 83       	std	Y+3, r26	; 0x03
    45d8:	bc 83       	std	Y+4, r27	; 0x04
    45da:	20 e0       	ldi	r18, 0x00	; 0
    45dc:	30 e0       	ldi	r19, 0x00	; 0
    45de:	48 ec       	ldi	r20, 0xC8	; 200
    45e0:	52 ec       	ldi	r21, 0xC2	; 194
    45e2:	bc 01       	movw	r22, r24
    45e4:	cd 01       	movw	r24, r26
    45e6:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    45ea:	88 23       	and	r24, r24
    45ec:	4c f4       	brge	.+18     	; 0x4600 <Check_Erors+0x196>
    45ee:	ed 81       	ldd	r30, Y+5	; 0x05
    45f0:	fe 81       	ldd	r31, Y+6	; 0x06
    45f2:	e2 59       	subi	r30, 0x92	; 146
    45f4:	ff 4f       	sbci	r31, 0xFF	; 255
    45f6:	80 81       	ld	r24, Z
    45f8:	91 81       	ldd	r25, Z+1	; 0x01
    45fa:	8a 5b       	subi	r24, 0xBA	; 186
    45fc:	9f 4f       	sbci	r25, 0xFF	; 255
    45fe:	84 c1       	rjmp	.+776    	; 0x4908 <Check_Erors+0x49e>
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
    4600:	20 e0       	ldi	r18, 0x00	; 0
    4602:	30 e0       	ldi	r19, 0x00	; 0
    4604:	48 ec       	ldi	r20, 0xC8	; 200
    4606:	52 ec       	ldi	r21, 0xC2	; 194
    4608:	ed 81       	ldd	r30, Y+5	; 0x05
    460a:	fe 81       	ldd	r31, Y+6	; 0x06
    460c:	fe 96       	adiw	r30, 0x3e	; 62
    460e:	60 81       	ld	r22, Z
    4610:	71 81       	ldd	r23, Z+1	; 0x01
    4612:	82 81       	ldd	r24, Z+2	; 0x02
    4614:	93 81       	ldd	r25, Z+3	; 0x03
    4616:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    461a:	88 23       	and	r24, r24
    461c:	54 f4       	brge	.+20     	; 0x4632 <Check_Erors+0x1c8>
    461e:	8d 81       	ldd	r24, Y+5	; 0x05
    4620:	9e 81       	ldd	r25, Y+6	; 0x06
    4622:	82 59       	subi	r24, 0x92	; 146
    4624:	9f 4f       	sbci	r25, 0xFF	; 255
    4626:	dc 01       	movw	r26, r24
    4628:	8d 91       	ld	r24, X+
    462a:	9c 91       	ld	r25, X
    462c:	80 5b       	subi	r24, 0xB0	; 176
    462e:	9f 4f       	sbci	r25, 0xFF	; 255
    4630:	6b c1       	rjmp	.+726    	; 0x4908 <Check_Erors+0x49e>
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
    4632:	20 e0       	ldi	r18, 0x00	; 0
    4634:	30 e0       	ldi	r19, 0x00	; 0
    4636:	48 ec       	ldi	r20, 0xC8	; 200
    4638:	52 ec       	ldi	r21, 0xC2	; 194
    463a:	ed 81       	ldd	r30, Y+5	; 0x05
    463c:	fe 81       	ldd	r31, Y+6	; 0x06
    463e:	ee 5b       	subi	r30, 0xBE	; 190
    4640:	ff 4f       	sbci	r31, 0xFF	; 255
    4642:	60 81       	ld	r22, Z
    4644:	71 81       	ldd	r23, Z+1	; 0x01
    4646:	82 81       	ldd	r24, Z+2	; 0x02
    4648:	93 81       	ldd	r25, Z+3	; 0x03
    464a:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    464e:	88 23       	and	r24, r24
    4650:	4c f4       	brge	.+18     	; 0x4664 <Check_Erors+0x1fa>
    4652:	ed 81       	ldd	r30, Y+5	; 0x05
    4654:	fe 81       	ldd	r31, Y+6	; 0x06
    4656:	e2 59       	subi	r30, 0x92	; 146
    4658:	ff 4f       	sbci	r31, 0xFF	; 255
    465a:	80 81       	ld	r24, Z
    465c:	91 81       	ldd	r25, Z+1	; 0x01
    465e:	86 5a       	subi	r24, 0xA6	; 166
    4660:	9f 4f       	sbci	r25, 0xFF	; 255
    4662:	52 c1       	rjmp	.+676    	; 0x4908 <Check_Erors+0x49e>
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
    4664:	4a 9b       	sbis	0x09, 2	; 9
    4666:	10 c0       	rjmp	.+32     	; 0x4688 <Check_Erors+0x21e>
    4668:	ad 81       	ldd	r26, Y+5	; 0x05
    466a:	be 81       	ldd	r27, Y+6	; 0x06
    466c:	1f 96       	adiw	r26, 0x0f	; 15
    466e:	8c 91       	ld	r24, X
    4670:	1f 97       	sbiw	r26, 0x0f	; 15
    4672:	81 30       	cpi	r24, 0x01	; 1
    4674:	49 f4       	brne	.+18     	; 0x4688 <Check_Erors+0x21e>
    4676:	fd 01       	movw	r30, r26
    4678:	e2 59       	subi	r30, 0x92	; 146
    467a:	ff 4f       	sbci	r31, 0xFF	; 255
    467c:	80 81       	ld	r24, Z
    467e:	91 81       	ldd	r25, Z+1	; 0x01
    4680:	01 97       	sbiw	r24, 0x01	; 1
    4682:	09 f0       	breq	.+2      	; 0x4686 <Check_Erors+0x21c>
    4684:	30 c1       	rjmp	.+608    	; 0x48e6 <Check_Erors+0x47c>
    4686:	0e c1       	rjmp	.+540    	; 0x48a4 <Check_Erors+0x43a>
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    4688:	4b 9b       	sbis	0x09, 3	; 9
    468a:	10 c0       	rjmp	.+32     	; 0x46ac <Check_Erors+0x242>
    468c:	ed 81       	ldd	r30, Y+5	; 0x05
    468e:	fe 81       	ldd	r31, Y+6	; 0x06
    4690:	87 85       	ldd	r24, Z+15	; 0x0f
    4692:	81 30       	cpi	r24, 0x01	; 1
    4694:	09 f0       	breq	.+2      	; 0x4698 <Check_Erors+0x22e>
    4696:	35 c1       	rjmp	.+618    	; 0x4902 <Check_Erors+0x498>
    4698:	ed 81       	ldd	r30, Y+5	; 0x05
    469a:	fe 81       	ldd	r31, Y+6	; 0x06
    469c:	e2 59       	subi	r30, 0x92	; 146
    469e:	ff 4f       	sbci	r31, 0xFF	; 255
    46a0:	80 81       	ld	r24, Z
    46a2:	91 81       	ldd	r25, Z+1	; 0x01
    46a4:	02 97       	sbiw	r24, 0x02	; 2
    46a6:	09 f0       	breq	.+2      	; 0x46aa <Check_Erors+0x240>
    46a8:	21 c1       	rjmp	.+578    	; 0x48ec <Check_Erors+0x482>
    46aa:	ff c0       	rjmp	.+510    	; 0x48aa <Check_Erors+0x440>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    46ac:	65 9b       	sbis	0x0c, 5	; 12
    46ae:	11 c0       	rjmp	.+34     	; 0x46d2 <Check_Erors+0x268>
    46b0:	ad 81       	ldd	r26, Y+5	; 0x05
    46b2:	be 81       	ldd	r27, Y+6	; 0x06
    46b4:	1f 96       	adiw	r26, 0x0f	; 15
    46b6:	8c 91       	ld	r24, X
    46b8:	81 30       	cpi	r24, 0x01	; 1
    46ba:	09 f0       	breq	.+2      	; 0x46be <Check_Erors+0x254>
    46bc:	1a c1       	rjmp	.+564    	; 0x48f2 <Check_Erors+0x488>
    46be:	ed 81       	ldd	r30, Y+5	; 0x05
    46c0:	fe 81       	ldd	r31, Y+6	; 0x06
    46c2:	e2 59       	subi	r30, 0x92	; 146
    46c4:	ff 4f       	sbci	r31, 0xFF	; 255
    46c6:	80 81       	ld	r24, Z
    46c8:	91 81       	ldd	r25, Z+1	; 0x01
    46ca:	01 97       	sbiw	r24, 0x01	; 1
    46cc:	09 f0       	breq	.+2      	; 0x46d0 <Check_Erors+0x266>
    46ce:	13 c1       	rjmp	.+550    	; 0x48f6 <Check_Erors+0x48c>
    46d0:	ef c0       	rjmp	.+478    	; 0x48b0 <Check_Erors+0x446>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    46d2:	65 9b       	sbis	0x0c, 5	; 12
    46d4:	0e c0       	rjmp	.+28     	; 0x46f2 <Check_Erors+0x288>
    46d6:	ed 81       	ldd	r30, Y+5	; 0x05
    46d8:	fe 81       	ldd	r31, Y+6	; 0x06
    46da:	87 85       	ldd	r24, Z+15	; 0x0f
    46dc:	81 30       	cpi	r24, 0x01	; 1
    46de:	49 f4       	brne	.+18     	; 0x46f2 <Check_Erors+0x288>
    46e0:	ed 81       	ldd	r30, Y+5	; 0x05
    46e2:	fe 81       	ldd	r31, Y+6	; 0x06
    46e4:	e2 59       	subi	r30, 0x92	; 146
    46e6:	ff 4f       	sbci	r31, 0xFF	; 255
    46e8:	80 81       	ld	r24, Z
    46ea:	91 81       	ldd	r25, Z+1	; 0x01
    46ec:	02 97       	sbiw	r24, 0x02	; 2
    46ee:	09 f4       	brne	.+2      	; 0x46f2 <Check_Erors+0x288>
    46f0:	e2 c0       	rjmp	.+452    	; 0x48b6 <Check_Erors+0x44c>
		else if ( comp->High_Press > 0){return (140+comp->Index);}
    46f2:	20 e0       	ldi	r18, 0x00	; 0
    46f4:	30 e0       	ldi	r19, 0x00	; 0
    46f6:	a9 01       	movw	r20, r18
    46f8:	ad 81       	ldd	r26, Y+5	; 0x05
    46fa:	be 81       	ldd	r27, Y+6	; 0x06
    46fc:	5a 96       	adiw	r26, 0x1a	; 26
    46fe:	6d 91       	ld	r22, X+
    4700:	7d 91       	ld	r23, X+
    4702:	8d 91       	ld	r24, X+
    4704:	9c 91       	ld	r25, X
    4706:	5d 97       	sbiw	r26, 0x1d	; 29
    4708:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    470c:	18 16       	cp	r1, r24
    470e:	4c f4       	brge	.+18     	; 0x4722 <Check_Erors+0x2b8>
    4710:	ed 81       	ldd	r30, Y+5	; 0x05
    4712:	fe 81       	ldd	r31, Y+6	; 0x06
    4714:	e2 59       	subi	r30, 0x92	; 146
    4716:	ff 4f       	sbci	r31, 0xFF	; 255
    4718:	80 81       	ld	r24, Z
    471a:	91 81       	ldd	r25, Z+1	; 0x01
    471c:	84 57       	subi	r24, 0x74	; 116
    471e:	9f 4f       	sbci	r25, 0xFF	; 255
    4720:	f3 c0       	rjmp	.+486    	; 0x4908 <Check_Erors+0x49e>
		else if ( comp->Low_Press>0 ) {return (120+comp->Index);}
    4722:	20 e0       	ldi	r18, 0x00	; 0
    4724:	30 e0       	ldi	r19, 0x00	; 0
    4726:	a9 01       	movw	r20, r18
    4728:	ad 81       	ldd	r26, Y+5	; 0x05
    472a:	be 81       	ldd	r27, Y+6	; 0x06
    472c:	5e 96       	adiw	r26, 0x1e	; 30
    472e:	6d 91       	ld	r22, X+
    4730:	7d 91       	ld	r23, X+
    4732:	8d 91       	ld	r24, X+
    4734:	9c 91       	ld	r25, X
    4736:	91 97       	sbiw	r26, 0x21	; 33
    4738:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    473c:	18 16       	cp	r1, r24
    473e:	4c f4       	brge	.+18     	; 0x4752 <Check_Erors+0x2e8>
    4740:	ed 81       	ldd	r30, Y+5	; 0x05
    4742:	fe 81       	ldd	r31, Y+6	; 0x06
    4744:	e2 59       	subi	r30, 0x92	; 146
    4746:	ff 4f       	sbci	r31, 0xFF	; 255
    4748:	80 81       	ld	r24, Z
    474a:	91 81       	ldd	r25, Z+1	; 0x01
    474c:	88 58       	subi	r24, 0x88	; 136
    474e:	9f 4f       	sbci	r25, 0xFF	; 255
    4750:	db c0       	rjmp	.+438    	; 0x4908 <Check_Erors+0x49e>
		else if ( comp->Bac_Temp > EElimit->HEAT_Max && comp->Heating==1){return (160+comp->Index);}
    4752:	d8 01       	movw	r26, r16
    4754:	19 96       	adiw	r26, 0x09	; 9
    4756:	6c 91       	ld	r22, X
    4758:	70 e0       	ldi	r23, 0x00	; 0
    475a:	80 e0       	ldi	r24, 0x00	; 0
    475c:	90 e0       	ldi	r25, 0x00	; 0
    475e:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    4762:	9b 01       	movw	r18, r22
    4764:	ac 01       	movw	r20, r24
    4766:	c7 01       	movw	r24, r14
    4768:	b6 01       	movw	r22, r12
    476a:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    476e:	18 16       	cp	r1, r24
    4770:	64 f4       	brge	.+24     	; 0x478a <Check_Erors+0x320>
    4772:	ed 81       	ldd	r30, Y+5	; 0x05
    4774:	fe 81       	ldd	r31, Y+6	; 0x06
    4776:	82 81       	ldd	r24, Z+2	; 0x02
    4778:	88 23       	and	r24, r24
    477a:	39 f0       	breq	.+14     	; 0x478a <Check_Erors+0x320>
    477c:	e2 59       	subi	r30, 0x92	; 146
    477e:	ff 4f       	sbci	r31, 0xFF	; 255
    4780:	80 81       	ld	r24, Z
    4782:	91 81       	ldd	r25, Z+1	; 0x01
    4784:	80 56       	subi	r24, 0x60	; 96
    4786:	9f 4f       	sbci	r25, 0xFF	; 255
    4788:	bf c0       	rjmp	.+382    	; 0x4908 <Check_Erors+0x49e>
		//else if ( comp->Bac_Temp < EElimit->Cool_Min && comp->Cooling==1){return (170+comp->Index);}
		//else if ( comp->SuperHeat < EElimit->MinSuperheat && comp->checkTrv) {return (180+comp->Index);}
		//else if ( comp->SuperHeat > EElimit->MaxSuperheat && comp->checkTrv && !comp->def) {return (190+comp->Index);}
		//else if ( comp->SuperCool < EElimit->MinSupercool && comp->checkTrv){return (200+comp->Index);}
		//else if ( comp->SuperCool > EElimit->MaxSupercool && comp->checkTrv && !comp->def){return (210+comp->Index);}
		else if ( comp->Ex_Comp > EElimit->ExhaustMax){return 220;}	
    478a:	d8 01       	movw	r26, r16
    478c:	1e 96       	adiw	r26, 0x0e	; 14
    478e:	6c 91       	ld	r22, X
    4790:	70 e0       	ldi	r23, 0x00	; 0
    4792:	80 e0       	ldi	r24, 0x00	; 0
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    479a:	9b 01       	movw	r18, r22
    479c:	ac 01       	movw	r20, r24
    479e:	69 81       	ldd	r22, Y+1	; 0x01
    47a0:	7a 81       	ldd	r23, Y+2	; 0x02
    47a2:	8b 81       	ldd	r24, Y+3	; 0x03
    47a4:	9c 81       	ldd	r25, Y+4	; 0x04
    47a6:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    47aa:	18 16       	cp	r1, r24
    47ac:	0c f4       	brge	.+2      	; 0x47b0 <Check_Erors+0x346>
    47ae:	86 c0       	rjmp	.+268    	; 0x48bc <Check_Erors+0x452>
		//else if (abs(comp->Src_In - comp->Src_Out) > EElimit->Delta_source_max && comp->checkErrors && EEpromData.AireToWater==0) {return (230+comp->Index);}
		//else if (abs(comp->Src_In - comp->Src_Out) <  EElimit->Delta_source_min && comp->checkErrors && EEpromData.AireToWater==0) {return (240+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out)  > EElimit->Delta_heating_max && comp->checkErrors) {return (250+comp->Index);}
    47b0:	a3 01       	movw	r20, r6
    47b2:	92 01       	movw	r18, r4
    47b4:	c5 01       	movw	r24, r10
    47b6:	b4 01       	movw	r22, r8
    47b8:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    47bc:	0e 94 22 53 	call	0xa644	; 0xa644 <__fixsfsi>
    47c0:	9b 01       	movw	r18, r22
    47c2:	77 23       	and	r23, r23
    47c4:	24 f4       	brge	.+8      	; 0x47ce <Check_Erors+0x364>
    47c6:	22 27       	eor	r18, r18
    47c8:	33 27       	eor	r19, r19
    47ca:	26 1b       	sub	r18, r22
    47cc:	37 0b       	sbc	r19, r23
    47ce:	c9 01       	movw	r24, r18
    47d0:	f8 01       	movw	r30, r16
    47d2:	24 89       	ldd	r18, Z+20	; 0x14
    47d4:	30 e0       	ldi	r19, 0x00	; 0
    47d6:	28 17       	cp	r18, r24
    47d8:	39 07       	cpc	r19, r25
    47da:	74 f4       	brge	.+28     	; 0x47f8 <Check_Erors+0x38e>
    47dc:	ad 81       	ldd	r26, Y+5	; 0x05
    47de:	be 81       	ldd	r27, Y+6	; 0x06
    47e0:	15 96       	adiw	r26, 0x05	; 5
    47e2:	8c 91       	ld	r24, X
    47e4:	15 97       	sbiw	r26, 0x05	; 5
    47e6:	88 23       	and	r24, r24
    47e8:	d9 f0       	breq	.+54     	; 0x4820 <Check_Erors+0x3b6>
    47ea:	a2 59       	subi	r26, 0x92	; 146
    47ec:	bf 4f       	sbci	r27, 0xFF	; 255
    47ee:	8d 91       	ld	r24, X+
    47f0:	9c 91       	ld	r25, X
    47f2:	86 50       	subi	r24, 0x06	; 6
    47f4:	9f 4f       	sbci	r25, 0xFF	; 255
    47f6:	88 c0       	rjmp	.+272    	; 0x4908 <Check_Erors+0x49e>
		else if (abs(comp->Heat_In - comp->Heat_Out) < EElimit->Delta_heating_min &&  comp->checkErrors) {return (260+comp->Index);} 
    47f8:	f8 01       	movw	r30, r16
    47fa:	23 89       	ldd	r18, Z+19	; 0x13
    47fc:	30 e0       	ldi	r19, 0x00	; 0
    47fe:	82 17       	cp	r24, r18
    4800:	93 07       	cpc	r25, r19
    4802:	74 f4       	brge	.+28     	; 0x4820 <Check_Erors+0x3b6>
    4804:	ad 81       	ldd	r26, Y+5	; 0x05
    4806:	be 81       	ldd	r27, Y+6	; 0x06
    4808:	15 96       	adiw	r26, 0x05	; 5
    480a:	8c 91       	ld	r24, X
    480c:	15 97       	sbiw	r26, 0x05	; 5
    480e:	88 23       	and	r24, r24
    4810:	39 f0       	breq	.+14     	; 0x4820 <Check_Erors+0x3b6>
    4812:	a2 59       	subi	r26, 0x92	; 146
    4814:	bf 4f       	sbci	r27, 0xFF	; 255
    4816:	8d 91       	ld	r24, X+
    4818:	9c 91       	ld	r25, X
    481a:	8c 5f       	subi	r24, 0xFC	; 252
    481c:	9e 4f       	sbci	r25, 0xFE	; 254
    481e:	74 c0       	rjmp	.+232    	; 0x4908 <Check_Erors+0x49e>
		else if (!(ADE7758_getStatus() & ZXA) && EElimit->Power_380==1 && comp->Index==1){return 271;} // ADE7758_resetStatus();
    4820:	1e de       	rcall	.-964    	; 0x445e <ADE7758_getStatus>
    4822:	71 fd       	sbrc	r23, 1
    4824:	0d c0       	rjmp	.+26     	; 0x4840 <Check_Erors+0x3d6>
    4826:	f8 01       	movw	r30, r16
    4828:	81 a5       	ldd	r24, Z+41	; 0x29
    482a:	81 30       	cpi	r24, 0x01	; 1
    482c:	49 f4       	brne	.+18     	; 0x4840 <Check_Erors+0x3d6>
    482e:	ed 81       	ldd	r30, Y+5	; 0x05
    4830:	fe 81       	ldd	r31, Y+6	; 0x06
    4832:	e2 59       	subi	r30, 0x92	; 146
    4834:	ff 4f       	sbci	r31, 0xFF	; 255
    4836:	80 81       	ld	r24, Z
    4838:	91 81       	ldd	r25, Z+1	; 0x01
    483a:	01 97       	sbiw	r24, 0x01	; 1
    483c:	09 f4       	brne	.+2      	; 0x4840 <Check_Erors+0x3d6>
		else if (!(ADE7758_getStatus() & ZXB) && EElimit->Power_380==1 && comp->Index==1){return 281;}//ADE7758_resetStatus();
    483e:	41 c0       	rjmp	.+130    	; 0x48c2 <Check_Erors+0x458>
    4840:	0e de       	rcall	.-996    	; 0x445e <ADE7758_getStatus>
    4842:	72 fd       	sbrc	r23, 2
    4844:	0d c0       	rjmp	.+26     	; 0x4860 <Check_Erors+0x3f6>
    4846:	d8 01       	movw	r26, r16
    4848:	99 96       	adiw	r26, 0x29	; 41
    484a:	8c 91       	ld	r24, X
    484c:	81 30       	cpi	r24, 0x01	; 1
    484e:	41 f4       	brne	.+16     	; 0x4860 <Check_Erors+0x3f6>
    4850:	ed 81       	ldd	r30, Y+5	; 0x05
    4852:	fe 81       	ldd	r31, Y+6	; 0x06
    4854:	e2 59       	subi	r30, 0x92	; 146
    4856:	ff 4f       	sbci	r31, 0xFF	; 255
    4858:	80 81       	ld	r24, Z
    485a:	91 81       	ldd	r25, Z+1	; 0x01
    485c:	01 97       	sbiw	r24, 0x01	; 1
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 && comp->Index==1){return 291;}//ADE7758_resetStatus();
    485e:	a1 f1       	breq	.+104    	; 0x48c8 <Check_Erors+0x45e>
    4860:	fe dd       	rcall	.-1028   	; 0x445e <ADE7758_getStatus>
    4862:	73 fd       	sbrc	r23, 3
    4864:	0c c0       	rjmp	.+24     	; 0x487e <Check_Erors+0x414>
    4866:	f8 01       	movw	r30, r16
    4868:	81 a5       	ldd	r24, Z+41	; 0x29
    486a:	81 30       	cpi	r24, 0x01	; 1
    486c:	41 f4       	brne	.+16     	; 0x487e <Check_Erors+0x414>
    486e:	ed 81       	ldd	r30, Y+5	; 0x05
    4870:	fe 81       	ldd	r31, Y+6	; 0x06
    4872:	e2 59       	subi	r30, 0x92	; 146
    4874:	ff 4f       	sbci	r31, 0xFF	; 255
    4876:	80 81       	ld	r24, Z
    4878:	91 81       	ldd	r25, Z+1	; 0x01
    487a:	01 97       	sbiw	r24, 0x01	; 1
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1 && comp->Index==1){return 301;}//ADE7758_resetStatus();
    487c:	41 f1       	breq	.+80     	; 0x48ce <Check_Erors+0x464>
    487e:	ef dd       	rcall	.-1058   	; 0x445e <ADE7758_getStatus>
    4880:	83 fd       	sbrc	r24, 3
    4882:	28 c0       	rjmp	.+80     	; 0x48d4 <Check_Erors+0x46a>
    4884:	d8 01       	movw	r26, r16
    4886:	99 96       	adiw	r26, 0x29	; 41
    4888:	8c 91       	ld	r24, X
    488a:	81 30       	cpi	r24, 0x01	; 1
    488c:	31 f5       	brne	.+76     	; 0x48da <Check_Erors+0x470>
    488e:	ed 81       	ldd	r30, Y+5	; 0x05
    4890:	fe 81       	ldd	r31, Y+6	; 0x06
    4892:	e2 59       	subi	r30, 0x92	; 146
    4894:	ff 4f       	sbci	r31, 0xFF	; 255
    4896:	80 81       	ld	r24, Z
    4898:	91 81       	ldd	r25, Z+1	; 0x01
    489a:	01 97       	sbiw	r24, 0x01	; 1
    489c:	09 f5       	brne	.+66     	; 0x48e0 <Check_Erors+0x476>
    489e:	8d e2       	ldi	r24, 0x2D	; 45
    48a0:	91 e0       	ldi	r25, 0x01	; 1
    48a2:	32 c0       	rjmp	.+100    	; 0x4908 <Check_Erors+0x49e>
		else if (comp->Src_Out<-100) {return (60+comp->Index);}
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
    48a4:	85 e6       	ldi	r24, 0x65	; 101
    48a6:	90 e0       	ldi	r25, 0x00	; 0
    48a8:	2f c0       	rjmp	.+94     	; 0x4908 <Check_Erors+0x49e>
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    48aa:	86 e6       	ldi	r24, 0x66	; 102
    48ac:	90 e0       	ldi	r25, 0x00	; 0
    48ae:	2c c0       	rjmp	.+88     	; 0x4908 <Check_Erors+0x49e>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    48b0:	8f e6       	ldi	r24, 0x6F	; 111
    48b2:	90 e0       	ldi	r25, 0x00	; 0
    48b4:	29 c0       	rjmp	.+82     	; 0x4908 <Check_Erors+0x49e>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    48b6:	80 e7       	ldi	r24, 0x70	; 112
    48b8:	90 e0       	ldi	r25, 0x00	; 0
    48ba:	26 c0       	rjmp	.+76     	; 0x4908 <Check_Erors+0x49e>
		//else if ( comp->Bac_Temp < EElimit->Cool_Min && comp->Cooling==1){return (170+comp->Index);}
		//else if ( comp->SuperHeat < EElimit->MinSuperheat && comp->checkTrv) {return (180+comp->Index);}
		//else if ( comp->SuperHeat > EElimit->MaxSuperheat && comp->checkTrv && !comp->def) {return (190+comp->Index);}
		//else if ( comp->SuperCool < EElimit->MinSupercool && comp->checkTrv){return (200+comp->Index);}
		//else if ( comp->SuperCool > EElimit->MaxSupercool && comp->checkTrv && !comp->def){return (210+comp->Index);}
		else if ( comp->Ex_Comp > EElimit->ExhaustMax){return 220;}	
    48bc:	8c ed       	ldi	r24, 0xDC	; 220
    48be:	90 e0       	ldi	r25, 0x00	; 0
    48c0:	23 c0       	rjmp	.+70     	; 0x4908 <Check_Erors+0x49e>
		//else if (abs(comp->Src_In - comp->Src_Out) > EElimit->Delta_source_max && comp->checkErrors && EEpromData.AireToWater==0) {return (230+comp->Index);}
		//else if (abs(comp->Src_In - comp->Src_Out) <  EElimit->Delta_source_min && comp->checkErrors && EEpromData.AireToWater==0) {return (240+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out)  > EElimit->Delta_heating_max && comp->checkErrors) {return (250+comp->Index);}
		else if (abs(comp->Heat_In - comp->Heat_Out) < EElimit->Delta_heating_min &&  comp->checkErrors) {return (260+comp->Index);} 
		else if (!(ADE7758_getStatus() & ZXA) && EElimit->Power_380==1 && comp->Index==1){return 271;} // ADE7758_resetStatus();
    48c2:	8f e0       	ldi	r24, 0x0F	; 15
    48c4:	91 e0       	ldi	r25, 0x01	; 1
    48c6:	20 c0       	rjmp	.+64     	; 0x4908 <Check_Erors+0x49e>
		else if (!(ADE7758_getStatus() & ZXB) && EElimit->Power_380==1 && comp->Index==1){return 281;}//ADE7758_resetStatus();
    48c8:	89 e1       	ldi	r24, 0x19	; 25
    48ca:	91 e0       	ldi	r25, 0x01	; 1
    48cc:	1d c0       	rjmp	.+58     	; 0x4908 <Check_Erors+0x49e>
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 && comp->Index==1){return 291;}//ADE7758_resetStatus();
    48ce:	83 e2       	ldi	r24, 0x23	; 35
    48d0:	91 e0       	ldi	r25, 0x01	; 1
    48d2:	1a c0       	rjmp	.+52     	; 0x4908 <Check_Erors+0x49e>
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1 && comp->Index==1){return 301;}//ADE7758_resetStatus();
		//else if (comp->Src_In > EElimit->Source_Max){return (400+comp->Index);}
		//else if (comp->Src_In < EElimit->Source_Min){return (410+comp->Index);}			
		else {return 0;}
    48d4:	80 e0       	ldi	r24, 0x00	; 0
    48d6:	90 e0       	ldi	r25, 0x00	; 0
    48d8:	17 c0       	rjmp	.+46     	; 0x4908 <Check_Erors+0x49e>
    48da:	80 e0       	ldi	r24, 0x00	; 0
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	14 c0       	rjmp	.+40     	; 0x4908 <Check_Erors+0x49e>
    48e0:	80 e0       	ldi	r24, 0x00	; 0
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	11 c0       	rjmp	.+34     	; 0x4908 <Check_Erors+0x49e>
		else if (comp->Ex_Comp<-100) {return (70+comp->Index);}
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
    48e6:	4b 99       	sbic	0x09, 3	; 9
    48e8:	d7 ce       	rjmp	.-594    	; 0x4698 <Check_Erors+0x22e>
    48ea:	08 c0       	rjmp	.+16     	; 0x48fc <Check_Erors+0x492>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    48ec:	65 99       	sbic	0x0c, 5	; 12
    48ee:	e7 ce       	rjmp	.-562    	; 0x46be <Check_Erors+0x254>
    48f0:	f0 ce       	rjmp	.-544    	; 0x46d2 <Check_Erors+0x268>
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==2) {return (110+comp->Index);}	
    48f2:	8c b1       	in	r24, 0x0c	; 12
    48f4:	fe ce       	rjmp	.-516    	; 0x46f2 <Check_Erors+0x288>
    48f6:	65 99       	sbic	0x0c, 5	; 12
    48f8:	f3 ce       	rjmp	.-538    	; 0x46e0 <Check_Erors+0x276>
    48fa:	fb ce       	rjmp	.-522    	; 0x46f2 <Check_Erors+0x288>
		else if(comp->Suc_Comp<-100) {return (80+comp->Index);}
		else if (comp->Cond_Temp<-100){return (90+comp->Index);}
		////
		else if ((PIN_HEAT_FLOW_1>0) && comp->srcPOn==1 && comp->Index==1) {return (100+comp->Index);} 
		else if ((PIN_HEAT_FLOW_2>0) && comp->srcPOn==1 && comp->Index==2) {return (100+comp->Index);} 	
		else if ((PIN_SOURCE_FLOW>0) && comp->srcPOn==1 && comp->Index==1) {return (110+comp->Index);} 
    48fc:	65 99       	sbic	0x0c, 5	; 12
    48fe:	df ce       	rjmp	.-578    	; 0x46be <Check_Erors+0x254>
    4900:	e8 ce       	rjmp	.-560    	; 0x46d2 <Check_Erors+0x268>
    4902:	65 99       	sbic	0x0c, 5	; 12
    4904:	f6 cf       	rjmp	.-20     	; 0x48f2 <Check_Erors+0x488>
    4906:	e5 ce       	rjmp	.-566    	; 0x46d2 <Check_Erors+0x268>
		else if (!(ADE7758_getStatus() & ZXC) && EElimit->Power_380==1 && comp->Index==1){return 291;}//ADE7758_resetStatus();
		else if (!(ADE7758_getStatus() & SEQERR) && EElimit->Power_380==1 && comp->Index==1){return 301;}//ADE7758_resetStatus();
		//else if (comp->Src_In > EElimit->Source_Max){return (400+comp->Index);}
		//else if (comp->Src_In < EElimit->Source_Min){return (410+comp->Index);}			
		else {return 0;}
    4908:	26 96       	adiw	r28, 0x06	; 6
    490a:	0f b6       	in	r0, 0x3f	; 63
    490c:	f8 94       	cli
    490e:	de bf       	out	0x3e, r29	; 62
    4910:	0f be       	out	0x3f, r0	; 63
    4912:	cd bf       	out	0x3d, r28	; 61
    4914:	df 91       	pop	r29
    4916:	cf 91       	pop	r28
    4918:	1f 91       	pop	r17
    491a:	0f 91       	pop	r16
    491c:	ff 90       	pop	r15
    491e:	ef 90       	pop	r14
    4920:	df 90       	pop	r13
    4922:	cf 90       	pop	r12
    4924:	bf 90       	pop	r11
    4926:	af 90       	pop	r10
    4928:	9f 90       	pop	r9
    492a:	8f 90       	pop	r8
    492c:	7f 90       	pop	r7
    492e:	6f 90       	pop	r6
    4930:	5f 90       	pop	r5
    4932:	4f 90       	pop	r4
    4934:	08 95       	ret

00004936 <start_1_Timer>:
	stop_1_Timer();
	
}
void start_1_Timer()
{
	TIMSK1 |= (1<<OCIE1A);
    4936:	ef e6       	ldi	r30, 0x6F	; 111
    4938:	f0 e0       	ldi	r31, 0x00	; 0
    493a:	80 81       	ld	r24, Z
    493c:	82 60       	ori	r24, 0x02	; 2
    493e:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS10);
    4940:	e1 e8       	ldi	r30, 0x81	; 129
    4942:	f0 e0       	ldi	r31, 0x00	; 0
    4944:	80 81       	ld	r24, Z
    4946:	81 60       	ori	r24, 0x01	; 1
    4948:	80 83       	st	Z, r24
    494a:	08 95       	ret

0000494c <stop_1_Timer>:
	
}
void stop_1_Timer()
{
	TCCR1B &= ~ (1<<CS10);
    494c:	e1 e8       	ldi	r30, 0x81	; 129
    494e:	f0 e0       	ldi	r31, 0x00	; 0
    4950:	80 81       	ld	r24, Z
    4952:	8e 7f       	andi	r24, 0xFE	; 254
    4954:	80 83       	st	Z, r24
	TCNT1=0;
    4956:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    495a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TIMSK1 &= ~( _BV( OCIE1A ) );
    495e:	ef e6       	ldi	r30, 0x6F	; 111
    4960:	f0 e0       	ldi	r31, 0x00	; 0
    4962:	80 81       	ld	r24, Z
    4964:	8d 7f       	andi	r24, 0xFD	; 253
    4966:	80 83       	st	Z, r24
	TIFR1 |= _BV( OCF1A ) ;
    4968:	b1 9a       	sbi	0x16, 1	; 22
    496a:	08 95       	ret

0000496c <timer_1_Init>:
void timer_1_Init()
{
	// --- TIMER1_COMPA irq ---
	// selected time = 1562 us (24992 ticks)
	// prescaler = 1 (1 ticks ... 4.096 ms)
	TCCR1B = (1<<WGM12);//|(1<<CS10)
    496c:	88 e0       	ldi	r24, 0x08	; 8
    496e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	OCR1AH = 158;
    4972:	8e e9       	ldi	r24, 0x9E	; 158
    4974:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL = 96;
    4978:	80 e6       	ldi	r24, 0x60	; 96
    497a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	stop_1_Timer();
    497e:	e6 cf       	rjmp	.-52     	; 0x494c <stop_1_Timer>
    4980:	08 95       	ret

00004982 <readSysReg>:
	TIMSK1 &= ~( _BV( OCIE1A ) );
	TIFR1 |= _BV( OCF1A ) ;
}

int readSysReg(xCompressor*compPtr,xEEdata *eeprom,uint16_t adress)
{
    4982:	cf 93       	push	r28
    4984:	df 93       	push	r29
	int temp;
	switch(adress)
    4986:	fa 01       	movw	r30, r20
    4988:	3a 97       	sbiw	r30, 0x0a	; 10
    498a:	e7 3d       	cpi	r30, 0xD7	; 215
    498c:	41 e0       	ldi	r20, 0x01	; 1
    498e:	f4 07       	cpc	r31, r20
    4990:	08 f0       	brcs	.+2      	; 0x4994 <readSysReg+0x12>
    4992:	11 c2       	rjmp	.+1058   	; 0x4db6 <readSysReg+0x434>
    4994:	eb 01       	movw	r28, r22
    4996:	dc 01       	movw	r26, r24
    4998:	88 27       	eor	r24, r24
    499a:	e4 56       	subi	r30, 0x64	; 100
    499c:	ff 4f       	sbci	r31, 0xFF	; 255
    499e:	8f 4f       	sbci	r24, 0xFF	; 255
    49a0:	0c 94 8f 58 	jmp	0xb11e	; 0xb11e <__tablejump2__>
	{
		case 11: case 12: temp =  (int)   compPtr->compOn;break;
    49a4:	1b 96       	adiw	r26, 0x0b	; 11
    49a6:	6c 91       	ld	r22, X
    49a8:	26 2f       	mov	r18, r22
    49aa:	30 e0       	ldi	r19, 0x00	; 0
    49ac:	04 c2       	rjmp	.+1032   	; 0x4db6 <readSysReg+0x434>
		case 21: case 22: temp =   (int)  compPtr->srcPOn;break;
    49ae:	1f 96       	adiw	r26, 0x0f	; 15
    49b0:	6c 91       	ld	r22, X
    49b2:	26 2f       	mov	r18, r22
    49b4:	30 e0       	ldi	r19, 0x00	; 0
    49b6:	ff c1       	rjmp	.+1022   	; 0x4db6 <readSysReg+0x434>
		case 31: case 32: temp =   (int)  compPtr->heatPOn;break;
    49b8:	1c 96       	adiw	r26, 0x0c	; 12
    49ba:	6c 91       	ld	r22, X
    49bc:	26 2f       	mov	r18, r22
    49be:	30 e0       	ldi	r19, 0x00	; 0
    49c0:	fa c1       	rjmp	.+1012   	; 0x4db6 <readSysReg+0x434>
		case 41: case 42: temp =   (int)  compPtr->revVOn;break;
    49c2:	1e 96       	adiw	r26, 0x0e	; 14
    49c4:	6c 91       	ld	r22, X
    49c6:	26 2f       	mov	r18, r22
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	f5 c1       	rjmp	.+1002   	; 0x4db6 <readSysReg+0x434>
		case 51: case 52: temp =   (int)  compPtr->threeWOn;break;
    49cc:	1d 96       	adiw	r26, 0x0d	; 13
    49ce:	6c 91       	ld	r22, X
    49d0:	26 2f       	mov	r18, r22
    49d2:	30 e0       	ldi	r19, 0x00	; 0
    49d4:	f0 c1       	rjmp	.+992    	; 0x4db6 <readSysReg+0x434>
		case 61: case 62: temp =   (int)  compPtr->Trv_position;break;
    49d6:	a6 59       	subi	r26, 0x96	; 150
    49d8:	bf 4f       	sbci	r27, 0xFF	; 255
    49da:	2d 91       	ld	r18, X+
    49dc:	3c 91       	ld	r19, X
    49de:	eb c1       	rjmp	.+982    	; 0x4db6 <readSysReg+0x434>
		
		case 71: case 72: temp =   (int)   (compPtr->Bac_Temp*10);break;
    49e0:	20 e0       	ldi	r18, 0x00	; 0
    49e2:	30 e0       	ldi	r19, 0x00	; 0
    49e4:	40 e2       	ldi	r20, 0x20	; 32
    49e6:	51 e4       	ldi	r21, 0x41	; 65
    49e8:	56 96       	adiw	r26, 0x16	; 22
    49ea:	6d 91       	ld	r22, X+
    49ec:	7d 91       	ld	r23, X+
    49ee:	8d 91       	ld	r24, X+
    49f0:	9c 91       	ld	r25, X
    49f2:	59 97       	sbiw	r26, 0x19	; 25
    49f4:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    49f8:	0e 94 22 53 	call	0xa644	; 0xa644 <__fixsfsi>
    49fc:	9b 01       	movw	r18, r22
    49fe:	db c1       	rjmp	.+950    	; 0x4db6 <readSysReg+0x434>
		case 81: case 82:  temp =   (int)  (compPtr->Dhw_Temp*10);break;
    4a00:	20 e0       	ldi	r18, 0x00	; 0
    4a02:	30 e0       	ldi	r19, 0x00	; 0
    4a04:	40 e2       	ldi	r20, 0x20	; 32
    4a06:	51 e4       	ldi	r21, 0x41	; 65
    4a08:	52 96       	adiw	r26, 0x12	; 18
    4a0a:	6d 91       	ld	r22, X+
    4a0c:	7d 91       	ld	r23, X+
    4a0e:	8d 91       	ld	r24, X+
    4a10:	9c 91       	ld	r25, X
    4a12:	55 97       	sbiw	r26, 0x15	; 21
    4a14:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    4a18:	0e 94 22 53 	call	0xa644	; 0xa644 <__fixsfsi>
    4a1c:	9b 01       	movw	r18, r22
    4a1e:	cb c1       	rjmp	.+918    	; 0x4db6 <readSysReg+0x434>
		case 91:case 92:  temp =  (int)  (compPtr->Src_In*10);break;
    4a20:	20 e0       	ldi	r18, 0x00	; 0
    4a22:	30 e0       	ldi	r19, 0x00	; 0
    4a24:	40 e2       	ldi	r20, 0x20	; 32
    4a26:	51 e4       	ldi	r21, 0x41	; 65
    4a28:	d2 96       	adiw	r26, 0x32	; 50
    4a2a:	6d 91       	ld	r22, X+
    4a2c:	7d 91       	ld	r23, X+
    4a2e:	8d 91       	ld	r24, X+
    4a30:	9c 91       	ld	r25, X
    4a32:	d5 97       	sbiw	r26, 0x35	; 53
    4a34:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    4a38:	0e 94 22 53 	call	0xa644	; 0xa644 <__fixsfsi>
    4a3c:	9b 01       	movw	r18, r22
    4a3e:	bb c1       	rjmp	.+886    	; 0x4db6 <readSysReg+0x434>
		case 101:case 102:  temp =  (int)  (compPtr->Src_Out*10);break;
    4a40:	20 e0       	ldi	r18, 0x00	; 0
    4a42:	30 e0       	ldi	r19, 0x00	; 0
    4a44:	40 e2       	ldi	r20, 0x20	; 32
    4a46:	51 e4       	ldi	r21, 0x41	; 65
    4a48:	d6 96       	adiw	r26, 0x36	; 54
    4a4a:	6d 91       	ld	r22, X+
    4a4c:	7d 91       	ld	r23, X+
    4a4e:	8d 91       	ld	r24, X+
    4a50:	9c 91       	ld	r25, X
    4a52:	d9 97       	sbiw	r26, 0x39	; 57
    4a54:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    4a58:	0e 94 22 53 	call	0xa644	; 0xa644 <__fixsfsi>
    4a5c:	9b 01       	movw	r18, r22
    4a5e:	ab c1       	rjmp	.+854    	; 0x4db6 <readSysReg+0x434>
		case 111:case 112: temp =   (int)  (compPtr->error);break;
    4a60:	a4 59       	subi	r26, 0x94	; 148
    4a62:	bf 4f       	sbci	r27, 0xFF	; 255
    4a64:	2d 91       	ld	r18, X+
    4a66:	3c 91       	ld	r19, X
    4a68:	a6 c1       	rjmp	.+844    	; 0x4db6 <readSysReg+0x434>
		case 121: case 122: temp =   (int)   (compPtr->Cond_Temp*10);break;
    4a6a:	ae 5b       	subi	r26, 0xBE	; 190
    4a6c:	bf 4f       	sbci	r27, 0xFF	; 255
    4a6e:	20 e0       	ldi	r18, 0x00	; 0
    4a70:	30 e0       	ldi	r19, 0x00	; 0
    4a72:	40 e2       	ldi	r20, 0x20	; 32
    4a74:	51 e4       	ldi	r21, 0x41	; 65
    4a76:	6d 91       	ld	r22, X+
    4a78:	7d 91       	ld	r23, X+
    4a7a:	8d 91       	ld	r24, X+
    4a7c:	9c 91       	ld	r25, X
    4a7e:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    4a82:	0e 94 22 53 	call	0xa644	; 0xa644 <__fixsfsi>
    4a86:	9b 01       	movw	r18, r22
    4a88:	96 c1       	rjmp	.+812    	; 0x4db6 <readSysReg+0x434>
		case 131:case 132: temp =   (int)  (compPtr->Suc_Comp*10);break;
    4a8a:	de 96       	adiw	r26, 0x3e	; 62
    4a8c:	20 e0       	ldi	r18, 0x00	; 0
    4a8e:	30 e0       	ldi	r19, 0x00	; 0
    4a90:	40 e2       	ldi	r20, 0x20	; 32
    4a92:	51 e4       	ldi	r21, 0x41	; 65
    4a94:	6d 91       	ld	r22, X+
    4a96:	7d 91       	ld	r23, X+
    4a98:	8d 91       	ld	r24, X+
    4a9a:	9c 91       	ld	r25, X
    4a9c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    4aa0:	0e 94 22 53 	call	0xa644	; 0xa644 <__fixsfsi>
    4aa4:	9b 01       	movw	r18, r22
    4aa6:	87 c1       	rjmp	.+782    	; 0x4db6 <readSysReg+0x434>
		case 141:case 142: temp =   (int)  (compPtr->SuperCool*10);break;
    4aa8:	a6 5b       	subi	r26, 0xB6	; 182
    4aaa:	bf 4f       	sbci	r27, 0xFF	; 255
    4aac:	20 e0       	ldi	r18, 0x00	; 0
    4aae:	30 e0       	ldi	r19, 0x00	; 0
    4ab0:	40 e2       	ldi	r20, 0x20	; 32
    4ab2:	51 e4       	ldi	r21, 0x41	; 65
    4ab4:	6d 91       	ld	r22, X+
    4ab6:	7d 91       	ld	r23, X+
    4ab8:	8d 91       	ld	r24, X+
    4aba:	9c 91       	ld	r25, X
    4abc:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    4ac0:	0e 94 22 53 	call	0xa644	; 0xa644 <__fixsfsi>
    4ac4:	9b 01       	movw	r18, r22
    4ac6:	77 c1       	rjmp	.+750    	; 0x4db6 <readSysReg+0x434>
		case 151:case 152: temp =   (int)  (compPtr->SuperHeat*10);break;
    4ac8:	aa 5b       	subi	r26, 0xBA	; 186
    4aca:	bf 4f       	sbci	r27, 0xFF	; 255
    4acc:	20 e0       	ldi	r18, 0x00	; 0
    4ace:	30 e0       	ldi	r19, 0x00	; 0
    4ad0:	40 e2       	ldi	r20, 0x20	; 32
    4ad2:	51 e4       	ldi	r21, 0x41	; 65
    4ad4:	6d 91       	ld	r22, X+
    4ad6:	7d 91       	ld	r23, X+
    4ad8:	8d 91       	ld	r24, X+
    4ada:	9c 91       	ld	r25, X
    4adc:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    4ae0:	0e 94 22 53 	call	0xa644	; 0xa644 <__fixsfsi>
    4ae4:	9b 01       	movw	r18, r22
    4ae6:	67 c1       	rjmp	.+718    	; 0x4db6 <readSysReg+0x434>
		case 161:case 162:  temp =  (int)  (compPtr->Heat_In*10);break;
    4ae8:	20 e0       	ldi	r18, 0x00	; 0
    4aea:	30 e0       	ldi	r19, 0x00	; 0
    4aec:	40 e2       	ldi	r20, 0x20	; 32
    4aee:	51 e4       	ldi	r21, 0x41	; 65
    4af0:	9e 96       	adiw	r26, 0x2e	; 46
    4af2:	6d 91       	ld	r22, X+
    4af4:	7d 91       	ld	r23, X+
    4af6:	8d 91       	ld	r24, X+
    4af8:	9c 91       	ld	r25, X
    4afa:	d1 97       	sbiw	r26, 0x31	; 49
    4afc:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    4b00:	0e 94 22 53 	call	0xa644	; 0xa644 <__fixsfsi>
    4b04:	9b 01       	movw	r18, r22
    4b06:	57 c1       	rjmp	.+686    	; 0x4db6 <readSysReg+0x434>
		case 171:case 172:  temp =  (int)  (compPtr->Heat_Out*10);break;		
    4b08:	20 e0       	ldi	r18, 0x00	; 0
    4b0a:	30 e0       	ldi	r19, 0x00	; 0
    4b0c:	40 e2       	ldi	r20, 0x20	; 32
    4b0e:	51 e4       	ldi	r21, 0x41	; 65
    4b10:	9a 96       	adiw	r26, 0x2a	; 42
    4b12:	6d 91       	ld	r22, X+
    4b14:	7d 91       	ld	r23, X+
    4b16:	8d 91       	ld	r24, X+
    4b18:	9c 91       	ld	r25, X
    4b1a:	9d 97       	sbiw	r26, 0x2d	; 45
    4b1c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    4b20:	0e 94 22 53 	call	0xa644	; 0xa644 <__fixsfsi>
    4b24:	9b 01       	movw	r18, r22
    4b26:	47 c1       	rjmp	.+654    	; 0x4db6 <readSysReg+0x434>
		case 181:case 182: temp =   (int)  (compPtr->High_Press*10);break;
    4b28:	20 e0       	ldi	r18, 0x00	; 0
    4b2a:	30 e0       	ldi	r19, 0x00	; 0
    4b2c:	40 e2       	ldi	r20, 0x20	; 32
    4b2e:	51 e4       	ldi	r21, 0x41	; 65
    4b30:	5a 96       	adiw	r26, 0x1a	; 26
    4b32:	6d 91       	ld	r22, X+
    4b34:	7d 91       	ld	r23, X+
    4b36:	8d 91       	ld	r24, X+
    4b38:	9c 91       	ld	r25, X
    4b3a:	5d 97       	sbiw	r26, 0x1d	; 29
    4b3c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    4b40:	0e 94 22 53 	call	0xa644	; 0xa644 <__fixsfsi>
    4b44:	9b 01       	movw	r18, r22
    4b46:	37 c1       	rjmp	.+622    	; 0x4db6 <readSysReg+0x434>
		case 191:case 192: temp =   (int)  (compPtr->Low_Press*10);break;
    4b48:	20 e0       	ldi	r18, 0x00	; 0
    4b4a:	30 e0       	ldi	r19, 0x00	; 0
    4b4c:	40 e2       	ldi	r20, 0x20	; 32
    4b4e:	51 e4       	ldi	r21, 0x41	; 65
    4b50:	5e 96       	adiw	r26, 0x1e	; 30
    4b52:	6d 91       	ld	r22, X+
    4b54:	7d 91       	ld	r23, X+
    4b56:	8d 91       	ld	r24, X+
    4b58:	9c 91       	ld	r25, X
    4b5a:	91 97       	sbiw	r26, 0x21	; 33
    4b5c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    4b60:	0e 94 22 53 	call	0xa644	; 0xa644 <__fixsfsi>
    4b64:	9b 01       	movw	r18, r22
    4b66:	27 c1       	rjmp	.+590    	; 0x4db6 <readSysReg+0x434>
		case 201:case 202: temp =   (int)  (compPtr->Ex_Comp);break;
    4b68:	da 96       	adiw	r26, 0x3a	; 58
    4b6a:	6d 91       	ld	r22, X+
    4b6c:	7d 91       	ld	r23, X+
    4b6e:	8d 91       	ld	r24, X+
    4b70:	9c 91       	ld	r25, X
    4b72:	dd 97       	sbiw	r26, 0x3d	; 61
    4b74:	0e 94 22 53 	call	0xa644	; 0xa644 <__fixsfsi>
    4b78:	9b 01       	movw	r18, r22
    4b7a:	1d c1       	rjmp	.+570    	; 0x4db6 <readSysReg+0x434>
		
	
		
		//-----------------------------------eeprom--------
		case 10:  temp =    eeprom->Compressor_delay;break;
    4b7c:	68 81       	ld	r22, Y
    4b7e:	26 2f       	mov	r18, r22
    4b80:	30 e0       	ldi	r19, 0x00	; 0
    4b82:	19 c1       	rjmp	.+562    	; 0x4db6 <readSysReg+0x434>
		case 20:  temp =    eeprom->HeatingPump_delay;break;
    4b84:	6b 81       	ldd	r22, Y+3	; 0x03
    4b86:	26 2f       	mov	r18, r22
    4b88:	30 e0       	ldi	r19, 0x00	; 0
    4b8a:	15 c1       	rjmp	.+554    	; 0x4db6 <readSysReg+0x434>
		case 30:  temp =    eeprom->Source_Pump_delay;break;
    4b8c:	69 81       	ldd	r22, Y+1	; 0x01
    4b8e:	26 2f       	mov	r18, r22
    4b90:	30 e0       	ldi	r19, 0x00	; 0
    4b92:	11 c1       	rjmp	.+546    	; 0x4db6 <readSysReg+0x434>
		case 40:  temp =    eeprom->Revers_Valve_delay;break;
    4b94:	6a 81       	ldd	r22, Y+2	; 0x02
    4b96:	26 2f       	mov	r18, r22
    4b98:	30 e0       	ldi	r19, 0x00	; 0
    4b9a:	0d c1       	rjmp	.+538    	; 0x4db6 <readSysReg+0x434>
		case 50:  temp =    eeprom->Three_Way_delay;break;
    4b9c:	6c 81       	ldd	r22, Y+4	; 0x04
    4b9e:	26 2f       	mov	r18, r22
    4ba0:	30 e0       	ldi	r19, 0x00	; 0
    4ba2:	09 c1       	rjmp	.+530    	; 0x4db6 <readSysReg+0x434>
		case 60:  temp =    (int)  eeprom->Cool_Max;break;
    4ba4:	6c 85       	ldd	r22, Y+12	; 0x0c
    4ba6:	26 2f       	mov	r18, r22
    4ba8:	30 e0       	ldi	r19, 0x00	; 0
    4baa:	05 c1       	rjmp	.+522    	; 0x4db6 <readSysReg+0x434>
		case 70:  temp =    (int)  eeprom->Cool_Min;break;
    4bac:	6d 85       	ldd	r22, Y+13	; 0x0d
    4bae:	26 2f       	mov	r18, r22
    4bb0:	30 e0       	ldi	r19, 0x00	; 0
    4bb2:	01 c1       	rjmp	.+514    	; 0x4db6 <readSysReg+0x434>
		case 80:  temp =    (int)  eeprom->HEAT_Max;break;
    4bb4:	69 85       	ldd	r22, Y+9	; 0x09
    4bb6:	26 2f       	mov	r18, r22
    4bb8:	30 e0       	ldi	r19, 0x00	; 0
    4bba:	fd c0       	rjmp	.+506    	; 0x4db6 <readSysReg+0x434>
		case 90:  temp =    (int)  eeprom->HEAT_Min;break;
    4bbc:	6a 85       	ldd	r22, Y+10	; 0x0a
    4bbe:	26 2f       	mov	r18, r22
    4bc0:	30 e0       	ldi	r19, 0x00	; 0
    4bc2:	f9 c0       	rjmp	.+498    	; 0x4db6 <readSysReg+0x434>
		case 100: temp =    (int)  eeprom->Delta_heating_max;break;
    4bc4:	6c 89       	ldd	r22, Y+20	; 0x14
    4bc6:	26 2f       	mov	r18, r22
    4bc8:	30 e0       	ldi	r19, 0x00	; 0
    4bca:	f5 c0       	rjmp	.+490    	; 0x4db6 <readSysReg+0x434>
		case 110: temp =    (int)  eeprom->Delta_heating_min;break;
    4bcc:	6b 89       	ldd	r22, Y+19	; 0x13
    4bce:	26 2f       	mov	r18, r22
    4bd0:	30 e0       	ldi	r19, 0x00	; 0
    4bd2:	f1 c0       	rjmp	.+482    	; 0x4db6 <readSysReg+0x434>
		case 120: temp =    (int)  eeprom->Delta_source_max;break;
    4bd4:	6e 89       	ldd	r22, Y+22	; 0x16
    4bd6:	26 2f       	mov	r18, r22
    4bd8:	30 e0       	ldi	r19, 0x00	; 0
    4bda:	ed c0       	rjmp	.+474    	; 0x4db6 <readSysReg+0x434>
		case 130: temp =    (int)  eeprom->Delta_source_min;break;
    4bdc:	6d 89       	ldd	r22, Y+21	; 0x15
    4bde:	26 2f       	mov	r18, r22
    4be0:	30 e0       	ldi	r19, 0x00	; 0
    4be2:	e9 c0       	rjmp	.+466    	; 0x4db6 <readSysReg+0x434>
		case 140: temp =    (int)  eeprom->diffCOOL;break;
    4be4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4be6:	26 2f       	mov	r18, r22
    4be8:	30 e0       	ldi	r19, 0x00	; 0
    4bea:	e5 c0       	rjmp	.+458    	; 0x4db6 <readSysReg+0x434>
		case 150: temp =    (int)  eeprom->diffDHW ;break;
    4bec:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4bee:	26 2f       	mov	r18, r22
    4bf0:	30 e0       	ldi	r19, 0x00	; 0
    4bf2:	e1 c0       	rjmp	.+450    	; 0x4db6 <readSysReg+0x434>
		case 160: temp =    (int)  eeprom->diffHEAT;break;
    4bf4:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4bf6:	26 2f       	mov	r18, r22
    4bf8:	30 e0       	ldi	r19, 0x00	; 0
    4bfa:	dd c0       	rjmp	.+442    	; 0x4db6 <readSysReg+0x434>
		case 170: temp =    (int)  eeprom->AireToWater;break;
    4bfc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4bfe:	26 2f       	mov	r18, r22
    4c00:	30 e0       	ldi	r19, 0x00	; 0
    4c02:	d9 c0       	rjmp	.+434    	; 0x4db6 <readSysReg+0x434>
		case 180: temp =    (int)  eeprom->ExhaustMax;break;
    4c04:	6e 85       	ldd	r22, Y+14	; 0x0e
    4c06:	26 2f       	mov	r18, r22
    4c08:	30 e0       	ldi	r19, 0x00	; 0
    4c0a:	d5 c0       	rjmp	.+426    	; 0x4db6 <readSysReg+0x434>
		case 190: temp =    (int)  eeprom->cool;break;
    4c0c:	6f a1       	ldd	r22, Y+39	; 0x27
    4c0e:	26 2f       	mov	r18, r22
    4c10:	30 e0       	ldi	r19, 0x00	; 0
    4c12:	d1 c0       	rjmp	.+418    	; 0x4db6 <readSysReg+0x434>
		case 200: temp =    (int)  eeprom->heat;break;
    4c14:	6e a1       	ldd	r22, Y+38	; 0x26
    4c16:	26 2f       	mov	r18, r22
    4c18:	30 e0       	ldi	r19, 0x00	; 0
    4c1a:	cd c0       	rjmp	.+410    	; 0x4db6 <readSysReg+0x434>
		case 210: temp =    (int)  eeprom->heatWater;break;
    4c1c:	6d a1       	ldd	r22, Y+37	; 0x25
    4c1e:	26 2f       	mov	r18, r22
    4c20:	30 e0       	ldi	r19, 0x00	; 0
    4c22:	c9 c0       	rjmp	.+402    	; 0x4db6 <readSysReg+0x434>
		case 220: temp =    (int)  eeprom->HP_Max;break;
    4c24:	6e 81       	ldd	r22, Y+6	; 0x06
    4c26:	26 2f       	mov	r18, r22
    4c28:	30 e0       	ldi	r19, 0x00	; 0
    4c2a:	c5 c0       	rjmp	.+394    	; 0x4db6 <readSysReg+0x434>
		case 230: temp =    (int)  eeprom->LP_Max;break;
    4c2c:	68 85       	ldd	r22, Y+8	; 0x08
    4c2e:	26 2f       	mov	r18, r22
    4c30:	30 e0       	ldi	r19, 0x00	; 0
    4c32:	c1 c0       	rjmp	.+386    	; 0x4db6 <readSysReg+0x434>
		case 240: temp =    (int)  eeprom->HP_Min;break;
    4c34:	6f 81       	ldd	r22, Y+7	; 0x07
    4c36:	26 2f       	mov	r18, r22
    4c38:	30 e0       	ldi	r19, 0x00	; 0
    4c3a:	bd c0       	rjmp	.+378    	; 0x4db6 <readSysReg+0x434>
		case 250: temp =    (int)  eeprom->LP_Min;break;
    4c3c:	fb 01       	movw	r30, r22
    4c3e:	e4 5a       	subi	r30, 0xA4	; 164
    4c40:	ff 4f       	sbci	r31, 0xFF	; 255
    4c42:	60 81       	ld	r22, Z
    4c44:	71 81       	ldd	r23, Z+1	; 0x01
    4c46:	82 81       	ldd	r24, Z+2	; 0x02
    4c48:	93 81       	ldd	r25, Z+3	; 0x03
    4c4a:	0e 94 22 53 	call	0xa644	; 0xa644 <__fixsfsi>
    4c4e:	9b 01       	movw	r18, r22
    4c50:	b2 c0       	rjmp	.+356    	; 0x4db6 <readSysReg+0x434>
		case 260: temp =    (int)  eeprom->MaxSupercool;break;
    4c52:	6a 89       	ldd	r22, Y+18	; 0x12
    4c54:	26 2f       	mov	r18, r22
    4c56:	30 e0       	ldi	r19, 0x00	; 0
    4c58:	ae c0       	rjmp	.+348    	; 0x4db6 <readSysReg+0x434>
		case 270: temp =    (int)  eeprom->MinSupercool;break;
    4c5a:	69 89       	ldd	r22, Y+17	; 0x11
    4c5c:	26 2f       	mov	r18, r22
    4c5e:	30 e0       	ldi	r19, 0x00	; 0
    4c60:	aa c0       	rjmp	.+340    	; 0x4db6 <readSysReg+0x434>
		case 280: temp =    (int)  eeprom->MaxSuperheat;break;
    4c62:	68 89       	ldd	r22, Y+16	; 0x10
    4c64:	26 2f       	mov	r18, r22
    4c66:	30 e0       	ldi	r19, 0x00	; 0
    4c68:	a6 c0       	rjmp	.+332    	; 0x4db6 <readSysReg+0x434>
		case 290: temp =    (int)  eeprom->MinSuperheat;break;
    4c6a:	6f 85       	ldd	r22, Y+15	; 0x0f
    4c6c:	26 2f       	mov	r18, r22
    4c6e:	30 e0       	ldi	r19, 0x00	; 0
    4c70:	a2 c0       	rjmp	.+324    	; 0x4db6 <readSysReg+0x434>
		case 300: temp =    (int)  eeprom->number_turnon_threeway;break;
    4c72:	fb 01       	movw	r30, r22
    4c74:	ea 5b       	subi	r30, 0xBA	; 186
    4c76:	ff 4f       	sbci	r31, 0xFF	; 255
    4c78:	20 81       	ld	r18, Z
    4c7a:	31 81       	ldd	r19, Z+1	; 0x01
    4c7c:	9c c0       	rjmp	.+312    	; 0x4db6 <readSysReg+0x434>
		case 310: temp =    (int)  eeprom->power;break;
    4c7e:	6c a1       	ldd	r22, Y+36	; 0x24
    4c80:	26 2f       	mov	r18, r22
    4c82:	30 e0       	ldi	r19, 0x00	; 0
    4c84:	98 c0       	rjmp	.+304    	; 0x4db6 <readSysReg+0x434>
		case 320: temp =    (int)  eeprom->Set_Cooling;break;
    4c86:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4c88:	26 2f       	mov	r18, r22
    4c8a:	30 e0       	ldi	r19, 0x00	; 0
    4c8c:	94 c0       	rjmp	.+296    	; 0x4db6 <readSysReg+0x434>
		case 330: temp =    (int)  eeprom->Set_DHW;break;
    4c8e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    4c90:	26 2f       	mov	r18, r22
    4c92:	30 e0       	ldi	r19, 0x00	; 0
    4c94:	90 c0       	rjmp	.+288    	; 0x4db6 <readSysReg+0x434>
		case 340: temp =    (int)  eeprom->Set_Heating;break;
    4c96:	69 8d       	ldd	r22, Y+25	; 0x19
    4c98:	26 2f       	mov	r18, r22
    4c9a:	30 e0       	ldi	r19, 0x00	; 0
    4c9c:	8c c0       	rjmp	.+280    	; 0x4db6 <readSysReg+0x434>
		case 350: temp =    (int)  eeprom->TempDef;break;
    4c9e:	2a a5       	ldd	r18, Y+42	; 0x2a
    4ca0:	3b a5       	ldd	r19, Y+43	; 0x2b
    4ca2:	89 c0       	rjmp	.+274    	; 0x4db6 <readSysReg+0x434>
		case 360: temp =    (int)  eeprom->TimeDef;break;
    4ca4:	69 a1       	ldd	r22, Y+33	; 0x21
    4ca6:	26 2f       	mov	r18, r22
    4ca8:	30 e0       	ldi	r19, 0x00	; 0
    4caa:	85 c0       	rjmp	.+266    	; 0x4db6 <readSysReg+0x434>
		
		
		case 370: temp =    (int)  eeprom->TempOut;break;
    4cac:	2e a5       	ldd	r18, Y+46	; 0x2e
    4cae:	3f a5       	ldd	r19, Y+47	; 0x2f
    4cb0:	82 c0       	rjmp	.+260    	; 0x4db6 <readSysReg+0x434>
		case 380: temp =    (int)  eeprom->TempStopDef;break;
    4cb2:	2c a5       	ldd	r18, Y+44	; 0x2c
    4cb4:	3d a5       	ldd	r19, Y+45	; 0x2d
    4cb6:	7f c0       	rjmp	.+254    	; 0x4db6 <readSysReg+0x434>
		case 390: temp =    (int)  eeprom->time_threeway;break;
    4cb8:	2c ad       	ldd	r18, Y+60	; 0x3c
    4cba:	3d ad       	ldd	r19, Y+61	; 0x3d
    4cbc:	7c c0       	rjmp	.+248    	; 0x4db6 <readSysReg+0x434>
		case 400: temp =    (int)  eeprom->NombComp;break;
    4cbe:	68 a1       	ldd	r22, Y+32	; 0x20
    4cc0:	26 2f       	mov	r18, r22
    4cc2:	30 e0       	ldi	r19, 0x00	; 0
    4cc4:	78 c0       	rjmp	.+240    	; 0x4db6 <readSysReg+0x434>
		case 410: temp =    (int)  eeprom->reversMod;break;
    4cc6:	68 a5       	ldd	r22, Y+40	; 0x28
    4cc8:	26 2f       	mov	r18, r22
    4cca:	30 e0       	ldi	r19, 0x00	; 0
    4ccc:	74 c0       	rjmp	.+232    	; 0x4db6 <readSysReg+0x434>
		case 420: temp =    (int)  eeprom->TRV_Delay;break;
    4cce:	6d 81       	ldd	r22, Y+5	; 0x05
    4cd0:	26 2f       	mov	r18, r22
    4cd2:	30 e0       	ldi	r19, 0x00	; 0
    4cd4:	70 c0       	rjmp	.+224    	; 0x4db6 <readSysReg+0x434>
		case 430: temp =    (int)  eeprom->Source_Max;break;
    4cd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cd8:	26 2f       	mov	r18, r22
    4cda:	30 e0       	ldi	r19, 0x00	; 0
    4cdc:	6c c0       	rjmp	.+216    	; 0x4db6 <readSysReg+0x434>
		case 440: temp =    (int)  eeprom->Source_Min;break;
    4cde:	28 a9       	ldd	r18, Y+48	; 0x30
    4ce0:	39 a9       	ldd	r19, Y+49	; 0x31
    4ce2:	69 c0       	rjmp	.+210    	; 0x4db6 <readSysReg+0x434>
		case 450: temp =    (int)  eeprom->Delta_dhw_max;break;
    4ce4:	68 8d       	ldd	r22, Y+24	; 0x18
    4ce6:	26 2f       	mov	r18, r22
    4ce8:	30 e0       	ldi	r19, 0x00	; 0
    4cea:	65 c0       	rjmp	.+202    	; 0x4db6 <readSysReg+0x434>
		case 460: temp =    (int)  eeprom->Delta_dhw_min;break;
    4cec:	6f 89       	ldd	r22, Y+23	; 0x17
    4cee:	26 2f       	mov	r18, r22
    4cf0:	30 e0       	ldi	r19, 0x00	; 0
    4cf2:	61 c0       	rjmp	.+194    	; 0x4db6 <readSysReg+0x434>
		case 470: temp =    (int)  eeprom->Power_380;break;
    4cf4:	69 a5       	ldd	r22, Y+41	; 0x29
    4cf6:	26 2f       	mov	r18, r22
    4cf8:	30 e0       	ldi	r19, 0x00	; 0
    4cfa:	5d c0       	rjmp	.+186    	; 0x4db6 <readSysReg+0x434>
		case 480: temp =    (int)  eeprom->TimeBetweenDef;break;
    4cfc:	6a a1       	ldd	r22, Y+34	; 0x22
    4cfe:	26 2f       	mov	r18, r22
    4d00:	30 e0       	ldi	r19, 0x00	; 0
    4d02:	59 c0       	rjmp	.+178    	; 0x4db6 <readSysReg+0x434>
		//case 500: temp =    (int)  compPtr-> Curr_A;break;
		//case 510: temp =    (int)  compPtr-> Curr_B;break;
		//case 520: temp =    (int)  compPtr-> Curr_C;break;
		
		//--------------------------------------
		case 301: temp =    (int)  eeprom->number_turnon_compressor_1;break;
    4d04:	2e ad       	ldd	r18, Y+62	; 0x3e
    4d06:	3f ad       	ldd	r19, Y+63	; 0x3f
    4d08:	56 c0       	rjmp	.+172    	; 0x4db6 <readSysReg+0x434>
		case 311: temp =    (int)  eeprom->number_turnon_hiter_1;break;
    4d0a:	fb 01       	movw	r30, r22
    4d0c:	ee 5b       	subi	r30, 0xBE	; 190
    4d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d10:	20 81       	ld	r18, Z
    4d12:	31 81       	ldd	r19, Z+1	; 0x01
    4d14:	50 c0       	rjmp	.+160    	; 0x4db6 <readSysReg+0x434>
		case 321: temp =    (int)  eeprom->number_turnon_revers_1;break;
    4d16:	fb 01       	movw	r30, r22
    4d18:	ec 5b       	subi	r30, 0xBC	; 188
    4d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d1c:	20 81       	ld	r18, Z
    4d1e:	31 81       	ldd	r19, Z+1	; 0x01
    4d20:	4a c0       	rjmp	.+148    	; 0x4db6 <readSysReg+0x434>
		case 331: temp =    (int)  eeprom->number_turnon_source_1;break;
    4d22:	fb 01       	movw	r30, r22
    4d24:	e0 5c       	subi	r30, 0xC0	; 192
    4d26:	ff 4f       	sbci	r31, 0xFF	; 255
    4d28:	20 81       	ld	r18, Z
    4d2a:	31 81       	ldd	r19, Z+1	; 0x01
    4d2c:	44 c0       	rjmp	.+136    	; 0x4db6 <readSysReg+0x434>
		case 341: temp =    (int)  eeprom->time_compressor_1;break;
    4d2e:	2a ad       	ldd	r18, Y+58	; 0x3a
    4d30:	3b ad       	ldd	r19, Y+59	; 0x3b
    4d32:	41 c0       	rjmp	.+130    	; 0x4db6 <readSysReg+0x434>
		case 351: temp =    (int)  eeprom->time_pump_hiter_1;break;
    4d34:	2c a9       	ldd	r18, Y+52	; 0x34
    4d36:	3d a9       	ldd	r19, Y+53	; 0x35
    4d38:	3e c0       	rjmp	.+124    	; 0x4db6 <readSysReg+0x434>
		case 371: temp =    (int)  eeprom->time_pump_source_1;break;
    4d3a:	2e a9       	ldd	r18, Y+54	; 0x36
    4d3c:	3f a9       	ldd	r19, Y+55	; 0x37
    4d3e:	3b c0       	rjmp	.+118    	; 0x4db6 <readSysReg+0x434>
		case 381: temp =    (int)  eeprom->time_revers_1;break;
    4d40:	28 ad       	ldd	r18, Y+56	; 0x38
    4d42:	39 ad       	ldd	r19, Y+57	; 0x39
    4d44:	38 c0       	rjmp	.+112    	; 0x4db6 <readSysReg+0x434>
		case 391: temp =    (int)  eeprom->trv_corection_1;break;
    4d46:	2a a9       	ldd	r18, Y+50	; 0x32
    4d48:	3b a9       	ldd	r19, Y+51	; 0x33
    4d4a:	35 c0       	rjmp	.+106    	; 0x4db6 <readSysReg+0x434>
		//------------------------------------
		case 302: temp =    (int)  eeprom->number_turnon_compressor_2;break;
    4d4c:	fb 01       	movw	r30, r22
    4d4e:	ee 5a       	subi	r30, 0xAE	; 174
    4d50:	ff 4f       	sbci	r31, 0xFF	; 255
    4d52:	20 81       	ld	r18, Z
    4d54:	31 81       	ldd	r19, Z+1	; 0x01
    4d56:	2f c0       	rjmp	.+94     	; 0x4db6 <readSysReg+0x434>
		case 312: temp =    (int)  eeprom->number_turnon_hiter_2;break;
    4d58:	fb 01       	movw	r30, r22
    4d5a:	ea 5a       	subi	r30, 0xAA	; 170
    4d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d5e:	20 81       	ld	r18, Z
    4d60:	31 81       	ldd	r19, Z+1	; 0x01
    4d62:	29 c0       	rjmp	.+82     	; 0x4db6 <readSysReg+0x434>
		case 322: temp =    (int)  eeprom->number_turnon_revers_2;break;
    4d64:	fb 01       	movw	r30, r22
    4d66:	e8 5a       	subi	r30, 0xA8	; 168
    4d68:	ff 4f       	sbci	r31, 0xFF	; 255
    4d6a:	20 81       	ld	r18, Z
    4d6c:	31 81       	ldd	r19, Z+1	; 0x01
    4d6e:	23 c0       	rjmp	.+70     	; 0x4db6 <readSysReg+0x434>
		case 332: temp =    (int)  eeprom->number_turnon_source_2;break;
    4d70:	fb 01       	movw	r30, r22
    4d72:	ec 5a       	subi	r30, 0xAC	; 172
    4d74:	ff 4f       	sbci	r31, 0xFF	; 255
    4d76:	20 81       	ld	r18, Z
    4d78:	31 81       	ldd	r19, Z+1	; 0x01
    4d7a:	1d c0       	rjmp	.+58     	; 0x4db6 <readSysReg+0x434>
		case 342: temp =    (int)  eeprom->time_compressor_2;break;
    4d7c:	fb 01       	movw	r30, r22
    4d7e:	e0 5b       	subi	r30, 0xB0	; 176
    4d80:	ff 4f       	sbci	r31, 0xFF	; 255
    4d82:	20 81       	ld	r18, Z
    4d84:	31 81       	ldd	r19, Z+1	; 0x01
    4d86:	17 c0       	rjmp	.+46     	; 0x4db6 <readSysReg+0x434>
		case 352: temp =    (int)  eeprom->time_pump_hiter_2;break;
    4d88:	fb 01       	movw	r30, r22
    4d8a:	e6 5b       	subi	r30, 0xB6	; 182
    4d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8e:	20 81       	ld	r18, Z
    4d90:	31 81       	ldd	r19, Z+1	; 0x01
    4d92:	11 c0       	rjmp	.+34     	; 0x4db6 <readSysReg+0x434>
		case 372: temp =    (int)  eeprom->time_pump_source_2;break;
    4d94:	fb 01       	movw	r30, r22
    4d96:	e4 5b       	subi	r30, 0xB4	; 180
    4d98:	ff 4f       	sbci	r31, 0xFF	; 255
    4d9a:	20 81       	ld	r18, Z
    4d9c:	31 81       	ldd	r19, Z+1	; 0x01
    4d9e:	0b c0       	rjmp	.+22     	; 0x4db6 <readSysReg+0x434>
		case 382: temp =    (int)  eeprom->time_revers_2;break;
    4da0:	fb 01       	movw	r30, r22
    4da2:	e2 5b       	subi	r30, 0xB2	; 178
    4da4:	ff 4f       	sbci	r31, 0xFF	; 255
    4da6:	20 81       	ld	r18, Z
    4da8:	31 81       	ldd	r19, Z+1	; 0x01
    4daa:	05 c0       	rjmp	.+10     	; 0x4db6 <readSysReg+0x434>
		case 392: temp =    (int)  eeprom->trv_corection_2;break;
    4dac:	fb 01       	movw	r30, r22
    4dae:	e8 5b       	subi	r30, 0xB8	; 184
    4db0:	ff 4f       	sbci	r31, 0xFF	; 255
    4db2:	20 81       	ld	r18, Z
    4db4:	31 81       	ldd	r19, Z+1	; 0x01
		
	}
	return temp;
}
    4db6:	c9 01       	movw	r24, r18
    4db8:	df 91       	pop	r29
    4dba:	cf 91       	pop	r28
    4dbc:	08 95       	ret

00004dbe <writeSysReg>:
void writeSysReg(xEEdata*comp,uint16_t adress,uint16_t value)
{
    4dbe:	cf 93       	push	r28
    4dc0:	df 93       	push	r29
    4dc2:	dc 01       	movw	r26, r24
	
	switch(adress)
    4dc4:	fb 01       	movw	r30, r22
    4dc6:	3a 97       	sbiw	r30, 0x0a	; 10
    4dc8:	e7 3d       	cpi	r30, 0xD7	; 215
    4dca:	81 e0       	ldi	r24, 0x01	; 1
    4dcc:	f8 07       	cpc	r31, r24
    4dce:	08 f0       	brcs	.+2      	; 0x4dd2 <writeSysReg+0x14>
    4dd0:	bb c0       	rjmp	.+374    	; 0x4f48 <writeSysReg+0x18a>
    4dd2:	88 27       	eor	r24, r24
    4dd4:	ed 58       	subi	r30, 0x8D	; 141
    4dd6:	fd 4f       	sbci	r31, 0xFD	; 253
    4dd8:	8f 4f       	sbci	r24, 0xFF	; 255
    4dda:	0c 94 8f 58 	jmp	0xb11e	; 0xb11e <__tablejump2__>
	{
		case 10:  comp->Compressor_delay  = value;break;
    4dde:	4c 93       	st	X, r20
    4de0:	b3 c0       	rjmp	.+358    	; 0x4f48 <writeSysReg+0x18a>
		case 20:  comp->HeatingPump_delay = value;break;
    4de2:	13 96       	adiw	r26, 0x03	; 3
    4de4:	4c 93       	st	X, r20
    4de6:	b0 c0       	rjmp	.+352    	; 0x4f48 <writeSysReg+0x18a>
		case 30:  comp->Source_Pump_delay = value;break;
    4de8:	11 96       	adiw	r26, 0x01	; 1
    4dea:	4c 93       	st	X, r20
    4dec:	ad c0       	rjmp	.+346    	; 0x4f48 <writeSysReg+0x18a>
		case 40:  comp->Revers_Valve_delay = value;break;
    4dee:	12 96       	adiw	r26, 0x02	; 2
    4df0:	4c 93       	st	X, r20
    4df2:	aa c0       	rjmp	.+340    	; 0x4f48 <writeSysReg+0x18a>
		case 50:  comp->Three_Way_delay  = value;break;
    4df4:	14 96       	adiw	r26, 0x04	; 4
    4df6:	4c 93       	st	X, r20
    4df8:	a7 c0       	rjmp	.+334    	; 0x4f48 <writeSysReg+0x18a>
		case 60:  comp->Cool_Max = value;break;
    4dfa:	1c 96       	adiw	r26, 0x0c	; 12
    4dfc:	4c 93       	st	X, r20
    4dfe:	a4 c0       	rjmp	.+328    	; 0x4f48 <writeSysReg+0x18a>
		case 70:  comp->Cool_Min = value;break;
    4e00:	1d 96       	adiw	r26, 0x0d	; 13
    4e02:	4c 93       	st	X, r20
    4e04:	a1 c0       	rjmp	.+322    	; 0x4f48 <writeSysReg+0x18a>
		case 80:  comp->HEAT_Max  = value;break;
    4e06:	19 96       	adiw	r26, 0x09	; 9
    4e08:	4c 93       	st	X, r20
    4e0a:	9e c0       	rjmp	.+316    	; 0x4f48 <writeSysReg+0x18a>
		case 90:  comp->HEAT_Min = value;break;
    4e0c:	1a 96       	adiw	r26, 0x0a	; 10
    4e0e:	4c 93       	st	X, r20
    4e10:	9b c0       	rjmp	.+310    	; 0x4f48 <writeSysReg+0x18a>
		case 100: comp->Delta_heating_max  = value;break;
    4e12:	54 96       	adiw	r26, 0x14	; 20
    4e14:	4c 93       	st	X, r20
    4e16:	98 c0       	rjmp	.+304    	; 0x4f48 <writeSysReg+0x18a>
		case 110: comp->Delta_heating_min  = value;break;
    4e18:	53 96       	adiw	r26, 0x13	; 19
    4e1a:	4c 93       	st	X, r20
    4e1c:	95 c0       	rjmp	.+298    	; 0x4f48 <writeSysReg+0x18a>
		case 120: comp->Delta_source_max  = value;break;
    4e1e:	56 96       	adiw	r26, 0x16	; 22
    4e20:	4c 93       	st	X, r20
    4e22:	92 c0       	rjmp	.+292    	; 0x4f48 <writeSysReg+0x18a>
		case 130: comp->Delta_source_min  = value;break;
    4e24:	55 96       	adiw	r26, 0x15	; 21
    4e26:	4c 93       	st	X, r20
    4e28:	8f c0       	rjmp	.+286    	; 0x4f48 <writeSysReg+0x18a>
		case 140: comp->diffCOOL  = value;break;
    4e2a:	5d 96       	adiw	r26, 0x1d	; 29
    4e2c:	4c 93       	st	X, r20
    4e2e:	8c c0       	rjmp	.+280    	; 0x4f48 <writeSysReg+0x18a>
		case 150: comp->diffDHW  = value;break;
    4e30:	5e 96       	adiw	r26, 0x1e	; 30
    4e32:	4c 93       	st	X, r20
    4e34:	89 c0       	rjmp	.+274    	; 0x4f48 <writeSysReg+0x18a>
		case 160: comp->diffHEAT  = value;break;
    4e36:	5c 96       	adiw	r26, 0x1c	; 28
    4e38:	4c 93       	st	X, r20
    4e3a:	86 c0       	rjmp	.+268    	; 0x4f48 <writeSysReg+0x18a>
		case 170: comp->AireToWater  = value;break;
    4e3c:	5f 96       	adiw	r26, 0x1f	; 31
    4e3e:	4c 93       	st	X, r20
    4e40:	83 c0       	rjmp	.+262    	; 0x4f48 <writeSysReg+0x18a>
		case 180: comp->ExhaustMax  = value;break;
    4e42:	1e 96       	adiw	r26, 0x0e	; 14
    4e44:	4c 93       	st	X, r20
    4e46:	80 c0       	rjmp	.+256    	; 0x4f48 <writeSysReg+0x18a>
		case 190: comp->cool  = value;break;
    4e48:	97 96       	adiw	r26, 0x27	; 39
    4e4a:	4c 93       	st	X, r20
    4e4c:	7d c0       	rjmp	.+250    	; 0x4f48 <writeSysReg+0x18a>
		case 200: comp->heat  = value;break;
    4e4e:	96 96       	adiw	r26, 0x26	; 38
    4e50:	4c 93       	st	X, r20
    4e52:	7a c0       	rjmp	.+244    	; 0x4f48 <writeSysReg+0x18a>
		case 210: comp->heatWater  = value;break;
    4e54:	95 96       	adiw	r26, 0x25	; 37
    4e56:	4c 93       	st	X, r20
    4e58:	77 c0       	rjmp	.+238    	; 0x4f48 <writeSysReg+0x18a>
		case 220: comp->HP_Max  = value;break;
    4e5a:	16 96       	adiw	r26, 0x06	; 6
    4e5c:	4c 93       	st	X, r20
    4e5e:	74 c0       	rjmp	.+232    	; 0x4f48 <writeSysReg+0x18a>
		case 230: comp->LP_Max  = value;break;
    4e60:	18 96       	adiw	r26, 0x08	; 8
    4e62:	4c 93       	st	X, r20
    4e64:	71 c0       	rjmp	.+226    	; 0x4f48 <writeSysReg+0x18a>
		case 240: comp->HP_Min  = value;break;
    4e66:	17 96       	adiw	r26, 0x07	; 7
    4e68:	4c 93       	st	X, r20
    4e6a:	6e c0       	rjmp	.+220    	; 0x4f48 <writeSysReg+0x18a>
		case 250: comp->LP_Min  = value;break;
    4e6c:	ed 01       	movw	r28, r26
    4e6e:	c4 5a       	subi	r28, 0xA4	; 164
    4e70:	df 4f       	sbci	r29, 0xFF	; 255
    4e72:	ba 01       	movw	r22, r20
    4e74:	80 e0       	ldi	r24, 0x00	; 0
    4e76:	90 e0       	ldi	r25, 0x00	; 0
    4e78:	0e 94 53 53 	call	0xa6a6	; 0xa6a6 <__floatunsisf>
    4e7c:	68 83       	st	Y, r22
    4e7e:	79 83       	std	Y+1, r23	; 0x01
    4e80:	8a 83       	std	Y+2, r24	; 0x02
    4e82:	9b 83       	std	Y+3, r25	; 0x03
    4e84:	61 c0       	rjmp	.+194    	; 0x4f48 <writeSysReg+0x18a>
		case 260: comp->MaxSupercool  = value;break;
    4e86:	52 96       	adiw	r26, 0x12	; 18
    4e88:	4c 93       	st	X, r20
    4e8a:	5e c0       	rjmp	.+188    	; 0x4f48 <writeSysReg+0x18a>
		case 270: comp->MinSupercool  = value;break;
    4e8c:	51 96       	adiw	r26, 0x11	; 17
    4e8e:	4c 93       	st	X, r20
    4e90:	5b c0       	rjmp	.+182    	; 0x4f48 <writeSysReg+0x18a>
		case 280: comp->MaxSuperheat  = value;break;
    4e92:	50 96       	adiw	r26, 0x10	; 16
    4e94:	4c 93       	st	X, r20
    4e96:	58 c0       	rjmp	.+176    	; 0x4f48 <writeSysReg+0x18a>
		case 290: comp->MinSuperheat  = value;break;
    4e98:	1f 96       	adiw	r26, 0x0f	; 15
    4e9a:	4c 93       	st	X, r20
    4e9c:	55 c0       	rjmp	.+170    	; 0x4f48 <writeSysReg+0x18a>
		case 300: comp->number_turnon_threeway  = value;break;
    4e9e:	aa 5b       	subi	r26, 0xBA	; 186
    4ea0:	bf 4f       	sbci	r27, 0xFF	; 255
    4ea2:	4d 93       	st	X+, r20
    4ea4:	5c 93       	st	X, r21
    4ea6:	50 c0       	rjmp	.+160    	; 0x4f48 <writeSysReg+0x18a>
		case 310: comp->power  = value;break;
    4ea8:	94 96       	adiw	r26, 0x24	; 36
    4eaa:	4c 93       	st	X, r20
    4eac:	4d c0       	rjmp	.+154    	; 0x4f48 <writeSysReg+0x18a>
		case 320: comp->Set_Cooling  = value;break;
    4eae:	5a 96       	adiw	r26, 0x1a	; 26
    4eb0:	4c 93       	st	X, r20
    4eb2:	4a c0       	rjmp	.+148    	; 0x4f48 <writeSysReg+0x18a>
		case 330: comp->Set_DHW  = value;break;
    4eb4:	5b 96       	adiw	r26, 0x1b	; 27
    4eb6:	4c 93       	st	X, r20
    4eb8:	47 c0       	rjmp	.+142    	; 0x4f48 <writeSysReg+0x18a>
		case 340: comp->Set_Heating  = value;break;
    4eba:	59 96       	adiw	r26, 0x19	; 25
    4ebc:	4c 93       	st	X, r20
    4ebe:	44 c0       	rjmp	.+136    	; 0x4f48 <writeSysReg+0x18a>
		case 350: comp->TempDef  = value;break;//
    4ec0:	9b 96       	adiw	r26, 0x2b	; 43
    4ec2:	5c 93       	st	X, r21
    4ec4:	4e 93       	st	-X, r20
    4ec6:	9a 97       	sbiw	r26, 0x2a	; 42
    4ec8:	3f c0       	rjmp	.+126    	; 0x4f48 <writeSysReg+0x18a>
		case 360: comp->TimeDef  = value;break;//
    4eca:	91 96       	adiw	r26, 0x21	; 33
    4ecc:	4c 93       	st	X, r20
    4ece:	3c c0       	rjmp	.+120    	; 0x4f48 <writeSysReg+0x18a>
		case 370: comp->TempOut  = value;break;
    4ed0:	9f 96       	adiw	r26, 0x2f	; 47
    4ed2:	5c 93       	st	X, r21
    4ed4:	4e 93       	st	-X, r20
    4ed6:	9e 97       	sbiw	r26, 0x2e	; 46
    4ed8:	37 c0       	rjmp	.+110    	; 0x4f48 <writeSysReg+0x18a>
		case 380: comp->TempStopDef  = value;break;//
    4eda:	9d 96       	adiw	r26, 0x2d	; 45
    4edc:	5c 93       	st	X, r21
    4ede:	4e 93       	st	-X, r20
    4ee0:	9c 97       	sbiw	r26, 0x2c	; 44
    4ee2:	32 c0       	rjmp	.+100    	; 0x4f48 <writeSysReg+0x18a>
		case 390: comp->time_threeway  = value;break;
    4ee4:	dd 96       	adiw	r26, 0x3d	; 61
    4ee6:	5c 93       	st	X, r21
    4ee8:	4e 93       	st	-X, r20
    4eea:	dc 97       	sbiw	r26, 0x3c	; 60
    4eec:	2d c0       	rjmp	.+90     	; 0x4f48 <writeSysReg+0x18a>
		case 400: comp->NombComp  = value;break;
    4eee:	90 96       	adiw	r26, 0x20	; 32
    4ef0:	4c 93       	st	X, r20
    4ef2:	2a c0       	rjmp	.+84     	; 0x4f48 <writeSysReg+0x18a>
		case 410: comp->reversMod =value;break;
    4ef4:	98 96       	adiw	r26, 0x28	; 40
    4ef6:	4c 93       	st	X, r20
    4ef8:	27 c0       	rjmp	.+78     	; 0x4f48 <writeSysReg+0x18a>
		case 420: comp->TRV_Delay=value;break;
    4efa:	15 96       	adiw	r26, 0x05	; 5
    4efc:	4c 93       	st	X, r20
    4efe:	24 c0       	rjmp	.+72     	; 0x4f48 <writeSysReg+0x18a>
		case 430: comp->Source_Max=value;break;
    4f00:	1b 96       	adiw	r26, 0x0b	; 11
    4f02:	4c 93       	st	X, r20
    4f04:	21 c0       	rjmp	.+66     	; 0x4f48 <writeSysReg+0x18a>
		case 440: comp->Source_Min=value;break;
    4f06:	d1 96       	adiw	r26, 0x31	; 49
    4f08:	5c 93       	st	X, r21
    4f0a:	4e 93       	st	-X, r20
    4f0c:	d0 97       	sbiw	r26, 0x30	; 48
    4f0e:	1c c0       	rjmp	.+56     	; 0x4f48 <writeSysReg+0x18a>
		case 450: comp->Delta_dhw_max  = value;break;
    4f10:	58 96       	adiw	r26, 0x18	; 24
    4f12:	4c 93       	st	X, r20
    4f14:	19 c0       	rjmp	.+50     	; 0x4f48 <writeSysReg+0x18a>
		case 460: comp->Delta_dhw_min  = value;break;
    4f16:	57 96       	adiw	r26, 0x17	; 23
    4f18:	4c 93       	st	X, r20
    4f1a:	16 c0       	rjmp	.+44     	; 0x4f48 <writeSysReg+0x18a>
		case 470: comp->Power_380 = value;break;
    4f1c:	99 96       	adiw	r26, 0x29	; 41
    4f1e:	4c 93       	st	X, r20
    4f20:	13 c0       	rjmp	.+38     	; 0x4f48 <writeSysReg+0x18a>
		case 480: comp->TimeBetweenDef = value;break;//
    4f22:	92 96       	adiw	r26, 0x22	; 34
    4f24:	4c 93       	st	X, r20
    4f26:	10 c0       	rjmp	.+32     	; 0x4f48 <writeSysReg+0x18a>
		case 391: comp->trv_corection_1 = value;break;
    4f28:	d3 96       	adiw	r26, 0x33	; 51
    4f2a:	5c 93       	st	X, r21
    4f2c:	4e 93       	st	-X, r20
    4f2e:	d2 97       	sbiw	r26, 0x32	; 50
    4f30:	0b c0       	rjmp	.+22     	; 0x4f48 <writeSysReg+0x18a>
		case 392: comp->trv_corection_2 = value;break;
    4f32:	a8 5b       	subi	r26, 0xB8	; 184
    4f34:	bf 4f       	sbci	r27, 0xFF	; 255
    4f36:	4d 93       	st	X+, r20
    4f38:	5c 93       	st	X, r21
    4f3a:	06 c0       	rjmp	.+12     	; 0x4f48 <writeSysReg+0x18a>
		case 393:if(comp->AireToWater==1) forsDefrost = value;break;
    4f3c:	5f 96       	adiw	r26, 0x1f	; 31
    4f3e:	8c 91       	ld	r24, X
    4f40:	81 30       	cpi	r24, 0x01	; 1
    4f42:	11 f4       	brne	.+4      	; 0x4f48 <writeSysReg+0x18a>
    4f44:	40 93 c9 06 	sts	0x06C9, r20	; 0x8006c9 <forsDefrost>
	}
}
    4f48:	df 91       	pop	r29
    4f4a:	cf 91       	pop	r28
    4f4c:	08 95       	ret

00004f4e <calculateCRC>:
}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
    4f4e:	88 23       	and	r24, r24
    4f50:	09 f1       	breq	.+66     	; 0x4f94 <calculateCRC+0x46>
    4f52:	af ef       	ldi	r26, 0xFF	; 255
    4f54:	a8 0f       	add	r26, r24
    4f56:	b0 e0       	ldi	r27, 0x00	; 0
    4f58:	11 96       	adiw	r26, 0x01	; 1
    4f5a:	60 e0       	ldi	r22, 0x00	; 0
    4f5c:	70 e0       	ldi	r23, 0x00	; 0
    4f5e:	8f ef       	ldi	r24, 0xFF	; 255
    4f60:	9f ef       	ldi	r25, 0xFF	; 255
	{
		temp = temp ^ frame[i];
    4f62:	fb 01       	movw	r30, r22
    4f64:	ee 57       	subi	r30, 0x7E	; 126
    4f66:	f8 4f       	sbci	r31, 0xF8	; 248
    4f68:	20 81       	ld	r18, Z
    4f6a:	82 27       	eor	r24, r18
    4f6c:	28 e0       	ldi	r18, 0x08	; 8
		for (unsigned char j = 1; j <= 8; j++)
		{
			flag = temp & 0x0001;
    4f6e:	ac 01       	movw	r20, r24
    4f70:	41 70       	andi	r20, 0x01	; 1
    4f72:	55 27       	eor	r21, r21
			temp >>= 1;
    4f74:	96 95       	lsr	r25
    4f76:	87 95       	ror	r24
			if (flag)
    4f78:	45 2b       	or	r20, r21
    4f7a:	21 f0       	breq	.+8      	; 0x4f84 <calculateCRC+0x36>
			temp ^= 0xA001;
    4f7c:	31 e0       	ldi	r19, 0x01	; 1
    4f7e:	83 27       	eor	r24, r19
    4f80:	30 ea       	ldi	r19, 0xA0	; 160
    4f82:	93 27       	eor	r25, r19
    4f84:	21 50       	subi	r18, 0x01	; 1
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
	{
		temp = temp ^ frame[i];
		for (unsigned char j = 1; j <= 8; j++)
    4f86:	99 f7       	brne	.-26     	; 0x4f6e <calculateCRC+0x20>
    4f88:	6f 5f       	subi	r22, 0xFF	; 255
    4f8a:	7f 4f       	sbci	r23, 0xFF	; 255
}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < bufferSize; i++)
    4f8c:	6a 17       	cp	r22, r26
    4f8e:	7b 07       	cpc	r23, r27
    4f90:	41 f7       	brne	.-48     	; 0x4f62 <calculateCRC+0x14>
    4f92:	02 c0       	rjmp	.+4      	; 0x4f98 <calculateCRC+0x4a>

}
unsigned int calculateCRC(unsigned char bufferSize)
{
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
    4f94:	8f ef       	ldi	r24, 0xFF	; 255
    4f96:	9f ef       	ldi	r25, 0xFF	; 255
	// Reverse byte order.
	temp2 = temp >> 8;
	temp = (temp << 8) | temp2;
	temp &= 0xFFFF;
	return temp; // the returned value is already swopped - crcLo byte is first & crcHi byte is last
}
    4f98:	98 27       	eor	r25, r24
    4f9a:	89 27       	eor	r24, r25
    4f9c:	98 27       	eor	r25, r24
    4f9e:	08 95       	ret

00004fa0 <sendPacket>:

void sendPacket(unsigned char bufferSize)
{
    4fa0:	ef 92       	push	r14
    4fa2:	ff 92       	push	r15
    4fa4:	0f 93       	push	r16
    4fa6:	1f 93       	push	r17
    4fa8:	cf 93       	push	r28
    4faa:	df 93       	push	r29
	
	for (unsigned char i = 0; i < bufferSize; i++) if(port_0)xSerialPutChar(&xSerialPort,frame[i]); else if(port_3){PORTJ|= (_BV(PIN_rs485));xSerialPutChar(&xSerial3Port,frame[i]);}
    4fac:	88 23       	and	r24, r24
    4fae:	71 f1       	breq	.+92     	; 0x500c <sendPacket+0x6c>
    4fb0:	81 50       	subi	r24, 0x01	; 1
    4fb2:	08 2f       	mov	r16, r24
    4fb4:	10 e0       	ldi	r17, 0x00	; 0
    4fb6:	0f 5f       	subi	r16, 0xFF	; 255
    4fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    4fba:	c0 e0       	ldi	r28, 0x00	; 0
    4fbc:	d0 e0       	ldi	r29, 0x00	; 0
    4fbe:	0f 2e       	mov	r0, r31
    4fc0:	f5 e0       	ldi	r31, 0x05	; 5
    4fc2:	ef 2e       	mov	r14, r31
    4fc4:	ff 24       	eor	r15, r15
    4fc6:	f3 94       	inc	r15
    4fc8:	f0 2d       	mov	r31, r0
    4fca:	80 91 67 0a 	lds	r24, 0x0A67	; 0x800a67 <port_0>
    4fce:	88 23       	and	r24, r24
    4fd0:	49 f0       	breq	.+18     	; 0x4fe4 <sendPacket+0x44>
    4fd2:	fe 01       	movw	r30, r28
    4fd4:	ee 57       	subi	r30, 0x7E	; 126
    4fd6:	f8 4f       	sbci	r31, 0xF8	; 248
    4fd8:	60 81       	ld	r22, Z
    4fda:	89 e1       	ldi	r24, 0x19	; 25
    4fdc:	97 e0       	ldi	r25, 0x07	; 7
    4fde:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <xSerialPutChar>
    4fe2:	10 c0       	rjmp	.+32     	; 0x5004 <sendPacket+0x64>
    4fe4:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <port_3>
    4fe8:	88 23       	and	r24, r24
    4fea:	61 f0       	breq	.+24     	; 0x5004 <sendPacket+0x64>
    4fec:	f7 01       	movw	r30, r14
    4fee:	80 81       	ld	r24, Z
    4ff0:	84 60       	ori	r24, 0x04	; 4
    4ff2:	80 83       	st	Z, r24
    4ff4:	fe 01       	movw	r30, r28
    4ff6:	ee 57       	subi	r30, 0x7E	; 126
    4ff8:	f8 4f       	sbci	r31, 0xF8	; 248
    4ffa:	60 81       	ld	r22, Z
    4ffc:	80 e6       	ldi	r24, 0x60	; 96
    4ffe:	97 e0       	ldi	r25, 0x07	; 7
    5000:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <xSerialPutChar>
    5004:	21 96       	adiw	r28, 0x01	; 1
    5006:	c0 17       	cp	r28, r16
    5008:	d1 07       	cpc	r29, r17
    500a:	f9 f6       	brne	.-66     	; 0x4fca <sendPacket+0x2a>
	//xSerialRxFlush(&xSerialPort);
	PORTJ &= (_BV(PIN_rs485));
    500c:	e5 e0       	ldi	r30, 0x05	; 5
    500e:	f1 e0       	ldi	r31, 0x01	; 1
    5010:	80 81       	ld	r24, Z
    5012:	84 70       	andi	r24, 0x04	; 4
    5014:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5016:	00 00       	nop

	_delay_us(3645);
	
	
    5018:	df 91       	pop	r29
    501a:	cf 91       	pop	r28
    501c:	1f 91       	pop	r17
    501e:	0f 91       	pop	r16
    5020:	ff 90       	pop	r15
    5022:	ef 90       	pop	r14
    5024:	08 95       	ret

00005026 <modbus_update>:
		case 393:if(comp->AireToWater==1) forsDefrost = value;break;
	}
}

void modbus_update()
{
    5026:	af 92       	push	r10
    5028:	bf 92       	push	r11
    502a:	cf 92       	push	r12
    502c:	df 92       	push	r13
    502e:	ef 92       	push	r14
    5030:	ff 92       	push	r15
    5032:	0f 93       	push	r16
    5034:	1f 93       	push	r17
    5036:	cf 93       	push	r28
    5038:	df 93       	push	r29
	unsigned char noOfBytes;
	unsigned char responseFrameSize;
	unsigned int temp;
	void* ptr=NULL;
	
	if(port_0)buffer=xSerialAvailableChar( &xSerialPort );
    503a:	80 91 67 0a 	lds	r24, 0x0A67	; 0x800a67 <port_0>
    503e:	88 23       	and	r24, r24
    5040:	29 f0       	breq	.+10     	; 0x504c <modbus_update+0x26>
    5042:	89 e1       	ldi	r24, 0x19	; 25
    5044:	97 e0       	ldi	r25, 0x07	; 7
    5046:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <xSerialAvailableChar>
    504a:	09 c0       	rjmp	.+18     	; 0x505e <modbus_update+0x38>
	else if (port_3)buffer=xSerialAvailableChar( &xSerial3Port );
    504c:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <port_3>
    5050:	88 23       	and	r24, r24
    5052:	09 f4       	brne	.+2      	; 0x5056 <modbus_update+0x30>
    5054:	da c0       	rjmp	.+436    	; 0x520a <modbus_update+0x1e4>
    5056:	80 e6       	ldi	r24, 0x60	; 96
    5058:	97 e0       	ldi	r25, 0x07	; 7
    505a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <xSerialAvailableChar>
	
	//avrSerialPrintf("buffer = %d \r\n",buffer );
	//avrSerialPrintf("overflow= %d \r\n",overflow);
	if (overflow){ return;}//exceptionResponse(OVERFLOW_BUFF);
    505e:	90 91 3b 07 	lds	r25, 0x073B	; 0x80073b <overflow>
    5062:	91 11       	cpse	r25, r1
    5064:	d7 c0       	rjmp	.+430    	; 0x5214 <modbus_update+0x1ee>
	if (buffer > 0 && buffer < 8) {  return;}// exceptionResponse(CORRUPT_PACKET);
    5066:	9f ef       	ldi	r25, 0xFF	; 255
    5068:	98 0f       	add	r25, r24
    506a:	97 30       	cpi	r25, 0x07	; 7
    506c:	08 f4       	brcc	.+2      	; 0x5070 <modbus_update+0x4a>
    506e:	d2 c0       	rjmp	.+420    	; 0x5214 <modbus_update+0x1ee>
	
	// The minimum request packet is 8 bytes for function 3 & 16
	
	id = frame[0];
    5070:	90 91 82 07 	lds	r25, 0x0782	; 0x800782 <frame>
	//avrSerialPrintf("buffer= %d \r\n",buffer);
	
	if (id == slaveID ) // if the recieved ID matches the slaveID or broadcasting id (0), continue
    5074:	91 30       	cpi	r25, 0x01	; 1
    5076:	09 f0       	breq	.+2      	; 0x507a <modbus_update+0x54>
    5078:	cd c0       	rjmp	.+410    	; 0x5214 <modbus_update+0x1ee>
	{
		crc = ((frame[buffer - 2] << 8) | frame[buffer - 1]); // combine the crc Low & High bytes
    507a:	28 2f       	mov	r18, r24
    507c:	30 e0       	ldi	r19, 0x00	; 0
    507e:	f9 01       	movw	r30, r18
    5080:	e0 58       	subi	r30, 0x80	; 128
    5082:	f8 4f       	sbci	r31, 0xF8	; 248
    5084:	d0 81       	ld	r29, Z
    5086:	f9 01       	movw	r30, r18
    5088:	ef 57       	subi	r30, 0x7F	; 127
    508a:	f8 4f       	sbci	r31, 0xF8	; 248
    508c:	c0 81       	ld	r28, Z
		//avrSerialPrintf("crc= %d \r\n",crc);
		if (calculateCRC(buffer - 2) == crc) // if the calculated crc matches the recieved crc continue
    508e:	82 50       	subi	r24, 0x02	; 2
    5090:	5e df       	rcall	.-324    	; 0x4f4e <calculateCRC>
    5092:	2c 2f       	mov	r18, r28
    5094:	30 e0       	ldi	r19, 0x00	; 0
    5096:	3d 2b       	or	r19, r29
    5098:	28 17       	cp	r18, r24
    509a:	39 07       	cpc	r19, r25
    509c:	09 f0       	breq	.+2      	; 0x50a0 <modbus_update+0x7a>
    509e:	ba c0       	rjmp	.+372    	; 0x5214 <modbus_update+0x1ee>
		{
			function = frame[1];
    50a0:	e2 e8       	ldi	r30, 0x82	; 130
    50a2:	f7 e0       	ldi	r31, 0x07	; 7
    50a4:	21 81       	ldd	r18, Z+1	; 0x01
    50a6:	20 93 3c 07 	sts	0x073C, r18	; 0x80073c <function>
			startingAddress = ((frame[2] << 8) | frame[3]); // combine the starting address bytes
    50aa:	82 81       	ldd	r24, Z+2	; 0x02
    50ac:	c3 81       	ldd	r28, Z+3	; 0x03
    50ae:	d0 e0       	ldi	r29, 0x00	; 0
    50b0:	d8 2b       	or	r29, r24
			no_of_registers = ((frame[4] << 8) | frame[5]);
    50b2:	84 81       	ldd	r24, Z+4	; 0x04
    50b4:	45 81       	ldd	r20, Z+5	; 0x05
    50b6:	50 e0       	ldi	r21, 0x00	; 0
    50b8:	58 2b       	or	r21, r24
			maxData = startingAddress + no_of_registers *10;
    50ba:	7a 01       	movw	r14, r20
    50bc:	ee 0c       	add	r14, r14
    50be:	ff 1c       	adc	r15, r15
    50c0:	ca 01       	movw	r24, r20
    50c2:	88 0f       	add	r24, r24
    50c4:	99 1f       	adc	r25, r25
    50c6:	88 0f       	add	r24, r24
    50c8:	99 1f       	adc	r25, r25
    50ca:	88 0f       	add	r24, r24
    50cc:	99 1f       	adc	r25, r25
    50ce:	e8 0e       	add	r14, r24
    50d0:	f9 1e       	adc	r15, r25
    50d2:	ec 0e       	add	r14, r28
    50d4:	fd 1e       	adc	r15, r29
			//avrSerialPrintf("function= %d \r\n",function);
			//avrSerialPrintf("startingAddress= %d \r\n",startingAddress);
			//avrSerialPrintf("no_of_registers= %d \r\n",no_of_registers);
			//avrSerialPrintf("maxData= %d \r\n",maxData);
			if (function == 3)
    50d6:	23 30       	cpi	r18, 0x03	; 3
    50d8:	09 f0       	breq	.+2      	; 0x50dc <modbus_update+0xb6>
    50da:	65 c0       	rjmp	.+202    	; 0x51a6 <modbus_update+0x180>
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
    50dc:	9e 01       	movw	r18, r28
    50de:	ad ec       	ldi	r26, 0xCD	; 205
    50e0:	bc ec       	ldi	r27, 0xCC	; 204
    50e2:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    50e6:	96 95       	lsr	r25
    50e8:	87 95       	ror	r24
    50ea:	96 95       	lsr	r25
    50ec:	87 95       	ror	r24
    50ee:	96 95       	lsr	r25
    50f0:	87 95       	ror	r24
    50f2:	9c 01       	movw	r18, r24
    50f4:	22 0f       	add	r18, r18
    50f6:	33 1f       	adc	r19, r19
    50f8:	88 0f       	add	r24, r24
    50fa:	99 1f       	adc	r25, r25
    50fc:	88 0f       	add	r24, r24
    50fe:	99 1f       	adc	r25, r25
    5100:	88 0f       	add	r24, r24
    5102:	99 1f       	adc	r25, r25
    5104:	82 0f       	add	r24, r18
    5106:	93 1f       	adc	r25, r19
    5108:	9e 01       	movw	r18, r28
    510a:	28 1b       	sub	r18, r24
    510c:	39 0b       	sbc	r19, r25
    510e:	21 30       	cpi	r18, 0x01	; 1
    5110:	31 05       	cpc	r19, r1
    5112:	51 f0       	breq	.+20     	; 0x5128 <modbus_update+0x102>
				else if(startingAddress%10==2){ptr=&Comp_2;}
    5114:	22 30       	cpi	r18, 0x02	; 2
    5116:	31 05       	cpc	r19, r1
    5118:	71 f4       	brne	.+28     	; 0x5136 <modbus_update+0x110>
    511a:	0f 2e       	mov	r0, r31
    511c:	f8 ea       	ldi	r31, 0xA8	; 168
    511e:	cf 2e       	mov	r12, r31
    5120:	f9 e0       	ldi	r31, 0x09	; 9
    5122:	df 2e       	mov	r13, r31
    5124:	f0 2d       	mov	r31, r0
    5126:	09 c0       	rjmp	.+18     	; 0x513a <modbus_update+0x114>
			//avrSerialPrintf("startingAddress= %d \r\n",startingAddress);
			//avrSerialPrintf("no_of_registers= %d \r\n",no_of_registers);
			//avrSerialPrintf("maxData= %d \r\n",maxData);
			if (function == 3)
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
    5128:	0f 2e       	mov	r0, r31
    512a:	f2 e2       	ldi	r31, 0x22	; 34
    512c:	cf 2e       	mov	r12, r31
    512e:	f9 e0       	ldi	r31, 0x09	; 9
    5130:	df 2e       	mov	r13, r31
    5132:	f0 2d       	mov	r31, r0
    5134:	02 c0       	rjmp	.+4      	; 0x513a <modbus_update+0x114>
	unsigned int crc16;
	unsigned int crc;
	unsigned char noOfBytes;
	unsigned char responseFrameSize;
	unsigned int temp;
	void* ptr=NULL;
    5136:	c1 2c       	mov	r12, r1
    5138:	d1 2c       	mov	r13, r1
			if (function == 3)
			{
				if(startingAddress%10==1) {ptr=&Comp_1;}
				else if(startingAddress%10==2){ptr=&Comp_2;}
				
				noOfBytes = no_of_registers * 2;
    513a:	a4 2e       	mov	r10, r20
    513c:	aa 0c       	add	r10, r10
				responseFrameSize = 5 + noOfBytes; // ID, function, noOfBytes, (dataLo + dataHi) * number of registers, crcLo, crcHi
    513e:	0f 2e       	mov	r0, r31
    5140:	f5 e0       	ldi	r31, 0x05	; 5
    5142:	bf 2e       	mov	r11, r31
    5144:	f0 2d       	mov	r31, r0
    5146:	ba 0c       	add	r11, r10
				frame[0] = slaveID;
    5148:	e2 e8       	ldi	r30, 0x82	; 130
    514a:	f7 e0       	ldi	r31, 0x07	; 7
    514c:	81 e0       	ldi	r24, 0x01	; 1
    514e:	80 83       	st	Z, r24
				frame[1] = function;
    5150:	83 e0       	ldi	r24, 0x03	; 3
    5152:	81 83       	std	Z+1, r24	; 0x01
				frame[2] = noOfBytes;
    5154:	a2 82       	std	Z+2, r10	; 0x02
				//avrSerialPrintf("FrameSize= %d \r\n",responseFrameSize);
				//avrSerialPrintf("frame[1]= %d \r\n",frame[1]);
				//avrSerialPrintf("frame[2]= %d \r\n",frame[2]);
				address = 3; // PDU starts at the 4th byte
				for (index = startingAddress; index < maxData; )
    5156:	ce 15       	cp	r28, r14
    5158:	df 05       	cpc	r29, r15
    515a:	a8 f4       	brcc	.+42     	; 0x5186 <modbus_update+0x160>
    515c:	03 e0       	ldi	r16, 0x03	; 3
    515e:	10 e0       	ldi	r17, 0x00	; 0
				{
					temp = readSysReg(ptr,&EEpromData,index);//holdingRegs[index]
    5160:	ae 01       	movw	r20, r28
    5162:	62 ec       	ldi	r22, 0xC2	; 194
    5164:	78 e0       	ldi	r23, 0x08	; 8
    5166:	c6 01       	movw	r24, r12
    5168:	0c dc       	rcall	.-2024   	; 0x4982 <readSysReg>
					frame[address] = temp >> 8; // split the register into 2 bytes
    516a:	f8 01       	movw	r30, r16
    516c:	ee 57       	subi	r30, 0x7E	; 126
    516e:	f8 4f       	sbci	r31, 0xF8	; 248
    5170:	90 83       	st	Z, r25
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
					frame[address] = temp & 0xFF;
    5172:	f8 01       	movw	r30, r16
    5174:	ed 57       	subi	r30, 0x7D	; 125
    5176:	f8 4f       	sbci	r31, 0xF8	; 248
    5178:	80 83       	st	Z, r24
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
    517a:	0e 5f       	subi	r16, 0xFE	; 254
    517c:	1f 4f       	sbci	r17, 0xFF	; 255
					index +=10;
    517e:	2a 96       	adiw	r28, 0x0a	; 10
				frame[2] = noOfBytes;
				//avrSerialPrintf("FrameSize= %d \r\n",responseFrameSize);
				//avrSerialPrintf("frame[1]= %d \r\n",frame[1]);
				//avrSerialPrintf("frame[2]= %d \r\n",frame[2]);
				address = 3; // PDU starts at the 4th byte
				for (index = startingAddress; index < maxData; )
    5180:	ce 15       	cp	r28, r14
    5182:	df 05       	cpc	r29, r15
    5184:	68 f3       	brcs	.-38     	; 0x5160 <modbus_update+0x13a>
					//avrSerialPrintf("frame[data]= %d \r\n",frame[address]);
					address++;
					index +=10;
				}
				
				crc16 = calculateCRC(responseFrameSize - 2);
    5186:	83 e0       	ldi	r24, 0x03	; 3
    5188:	8a 0d       	add	r24, r10
    518a:	e1 de       	rcall	.-574    	; 0x4f4e <calculateCRC>
				frame[responseFrameSize - 2] = crc16 >> 8; // split crc into 2 bytes
    518c:	2b 2d       	mov	r18, r11
    518e:	30 e0       	ldi	r19, 0x00	; 0
    5190:	f9 01       	movw	r30, r18
    5192:	e0 58       	subi	r30, 0x80	; 128
    5194:	f8 4f       	sbci	r31, 0xF8	; 248
    5196:	90 83       	st	Z, r25
				frame[responseFrameSize - 1] = crc16 & 0xFF;
    5198:	f9 01       	movw	r30, r18
    519a:	ef 57       	subi	r30, 0x7F	; 127
    519c:	f8 4f       	sbci	r31, 0xF8	; 248
				//return;
				sendPacket(responseFrameSize);
    519e:	80 83       	st	Z, r24
    51a0:	8b 2d       	mov	r24, r11
    51a2:	fe de       	rcall	.-516    	; 0x4fa0 <sendPacket>
    51a4:	37 c0       	rjmp	.+110    	; 0x5214 <modbus_update+0x1ee>
				
			}
			
			else if (function == 16)
    51a6:	20 31       	cpi	r18, 0x10	; 16
    51a8:	09 f0       	breq	.+2      	; 0x51ac <modbus_update+0x186>
    51aa:	34 c0       	rjmp	.+104    	; 0x5214 <modbus_update+0x1ee>
			{
				address = 7; // start at the 8th byte in the frame
				
				for (index = startingAddress; index < maxData; )
    51ac:	ce 15       	cp	r28, r14
    51ae:	df 05       	cpc	r29, r15
    51b0:	b0 f4       	brcc	.+44     	; 0x51de <modbus_update+0x1b8>
    51b2:	07 e0       	ldi	r16, 0x07	; 7
    51b4:	10 e0       	ldi	r17, 0x00	; 0
				{
					temp = ((frame[address] << 8) | frame[address + 1]);
    51b6:	f8 01       	movw	r30, r16
    51b8:	ee 57       	subi	r30, 0x7E	; 126
    51ba:	f8 4f       	sbci	r31, 0xF8	; 248
    51bc:	80 81       	ld	r24, Z
    51be:	f8 01       	movw	r30, r16
    51c0:	ed 57       	subi	r30, 0x7D	; 125
    51c2:	f8 4f       	sbci	r31, 0xF8	; 248
    51c4:	40 81       	ld	r20, Z
					writeSysReg(&EEpromData,index,temp);
    51c6:	50 e0       	ldi	r21, 0x00	; 0
    51c8:	58 2b       	or	r21, r24
    51ca:	be 01       	movw	r22, r28
    51cc:	82 ec       	ldi	r24, 0xC2	; 194
    51ce:	98 e0       	ldi	r25, 0x08	; 8
    51d0:	f6 dd       	rcall	.-1044   	; 0x4dbe <writeSysReg>
					address += 2;
    51d2:	0e 5f       	subi	r16, 0xFE	; 254
    51d4:	1f 4f       	sbci	r17, 0xFF	; 255
					index+=10;
    51d6:	2a 96       	adiw	r28, 0x0a	; 10
			
			else if (function == 16)
			{
				address = 7; // start at the 8th byte in the frame
				
				for (index = startingAddress; index < maxData; )
    51d8:	ce 15       	cp	r28, r14
    51da:	df 05       	cpc	r29, r15
    51dc:	60 f3       	brcs	.-40     	; 0x51b6 <modbus_update+0x190>
					temp = ((frame[address] << 8) | frame[address + 1]);
					writeSysReg(&EEpromData,index,temp);
					address += 2;
					index+=10;
				}
				portENTER_CRITICAL();
    51de:	0f b6       	in	r0, 0x3f	; 63
    51e0:	f8 94       	cli
    51e2:	0f 92       	push	r0
				eeprom_write_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));
    51e4:	40 e6       	ldi	r20, 0x60	; 96
    51e6:	50 e0       	ldi	r21, 0x00	; 0
    51e8:	60 e0       	ldi	r22, 0x00	; 0
    51ea:	70 e0       	ldi	r23, 0x00	; 0
    51ec:	82 ec       	ldi	r24, 0xC2	; 194
    51ee:	98 e0       	ldi	r25, 0x08	; 8
    51f0:	0e 94 c8 5b 	call	0xb790	; 0xb790 <eeprom_write_block>
				portEXIT_CRITICAL();
    51f4:	0f 90       	pop	r0
				// only the first 6 bytes are used for CRC calculation
				crc16 = calculateCRC(6);
    51f6:	0f be       	out	0x3f, r0	; 63
    51f8:	86 e0       	ldi	r24, 0x06	; 6
				frame[6] = crc16 >> 8; // split crc into 2 bytes
    51fa:	a9 de       	rcall	.-686    	; 0x4f4e <calculateCRC>
    51fc:	e2 e8       	ldi	r30, 0x82	; 130
    51fe:	f7 e0       	ldi	r31, 0x07	; 7
				frame[7] = crc16 & 0xFF;
    5200:	96 83       	std	Z+6, r25	; 0x06
				
				// a function 16 response is an echo of the first 6 bytes from the request + 2 crc bytes
				
				sendPacket(8);
    5202:	87 83       	std	Z+7, r24	; 0x07
    5204:	88 e0       	ldi	r24, 0x08	; 8
    5206:	cc de       	rcall	.-616    	; 0x4fa0 <sendPacket>
    5208:	05 c0       	rjmp	.+10     	; 0x5214 <modbus_update+0x1ee>
	if(port_0)buffer=xSerialAvailableChar( &xSerialPort );
	else if (port_3)buffer=xSerialAvailableChar( &xSerial3Port );
	
	//avrSerialPrintf("buffer = %d \r\n",buffer );
	//avrSerialPrintf("overflow= %d \r\n",overflow);
	if (overflow){ return;}//exceptionResponse(OVERFLOW_BUFF);
    520a:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <overflow>
    520e:	88 23       	and	r24, r24
    5210:	09 f4       	brne	.+2      	; 0x5214 <modbus_update+0x1ee>
    5212:	2e cf       	rjmp	.-420    	; 0x5070 <modbus_update+0x4a>
			
		}
		else {return;}// exceptionResponse(CHECKSUM_FAIL);
	}
	else {return;}//exceptionResponse(ERROR_FUNC);
}
    5214:	df 91       	pop	r29
    5216:	cf 91       	pop	r28
    5218:	1f 91       	pop	r17
    521a:	0f 91       	pop	r16
    521c:	ff 90       	pop	r15
    521e:	ef 90       	pop	r14
    5220:	df 90       	pop	r13
    5222:	cf 90       	pop	r12
    5224:	bf 90       	pop	r11
    5226:	af 90       	pop	r10
    5228:	08 95       	ret

0000522a <StartHeatPump>:
}

//------------------------------------------------

void StartHeatPump(TimerHandle_t xTimer)
{
    522a:	8f 92       	push	r8
    522c:	9f 92       	push	r9
    522e:	af 92       	push	r10
    5230:	bf 92       	push	r11
    5232:	cf 92       	push	r12
    5234:	df 92       	push	r13
    5236:	ef 92       	push	r14
    5238:	ff 92       	push	r15
    523a:	0f 93       	push	r16
    523c:	1f 93       	push	r17
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    523e:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    5242:	fc 01       	movw	r30, r24
	TickType_t period;
	period=(TickType_t)EEpromData.Compressor_delay;
    5244:	20 91 c2 08 	lds	r18, 0x08C2	; 0x8008c2 <EEpromData>
	period*=1000;
    5248:	30 e0       	ldi	r19, 0x00	; 0
    524a:	a8 ee       	ldi	r26, 0xE8	; 232
    524c:	b3 e0       	ldi	r27, 0x03	; 3
    524e:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    5252:	4b 01       	movw	r8, r22
    5254:	5c 01       	movw	r10, r24
	//xSerialxPrintf(&xSerial3Port,"StartHeatPump\r\n");
	if((*pxTimerID) == uxStartDelayHeatPTimer_1_ID) {
    5256:	80 81       	ld	r24, Z
    5258:	82 30       	cpi	r24, 0x02	; 2
    525a:	09 f0       	breq	.+2      	; 0x525e <StartHeatPump+0x34>
    525c:	40 c0       	rjmp	.+128    	; 0x52de <StartHeatPump+0xb4>
		xSerialxPrintf(&xSerial3Port,"StartHeatPump_1\r\n");
    525e:	83 ea       	ldi	r24, 0xA3	; 163
    5260:	92 e0       	ldi	r25, 0x02	; 2
    5262:	9f 93       	push	r25
    5264:	8f 93       	push	r24
    5266:	80 e6       	ldi	r24, 0x60	; 96
    5268:	97 e0       	ldi	r25, 0x07	; 7
    526a:	9f 93       	push	r25
    526c:	8f 93       	push	r24
    526e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_1 ==0)
    5272:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5276:	0f 90       	pop	r0
    5278:	0f 90       	pop	r0
    527a:	0f 90       	pop	r0
    527c:	0f 90       	pop	r0
    527e:	83 fd       	sbrc	r24, 3
    5280:	70 c0       	rjmp	.+224    	; 0x5362 <StartHeatPump+0x138>
		{
			
			//xSerialxPrintf(&xSerial3Port,"StartHeatPump_1\r\n");
			Comp_1.heatPOn=1;
    5282:	81 e0       	ldi	r24, 0x01	; 1
    5284:	80 93 2e 09 	sts	0x092E, r24	; 0x80092e <Comp_1+0xc>
			START_HEAT_PUMP_1;
    5288:	e2 e0       	ldi	r30, 0x02	; 2
    528a:	f1 e0       	ldi	r31, 0x01	; 1
    528c:	80 81       	ld	r24, Z
    528e:	88 60       	ori	r24, 0x08	; 8
    5290:	80 83       	st	Z, r24
			timeStartHeatP_1=time(&current_time);
    5292:	8d eb       	ldi	r24, 0xBD	; 189
    5294:	98 e0       	ldi	r25, 0x08	; 8
    5296:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    529a:	60 93 2e 0a 	sts	0x0A2E, r22	; 0x800a2e <timeStartHeatP_1>
    529e:	70 93 2f 0a 	sts	0x0A2F, r23	; 0x800a2f <timeStartHeatP_1+0x1>
    52a2:	80 93 30 0a 	sts	0x0A30, r24	; 0x800a30 <timeStartHeatP_1+0x2>
    52a6:	90 93 31 0a 	sts	0x0A31, r25	; 0x800a31 <timeStartHeatP_1+0x3>
			EEpromData.number_turnon_hiter_1+=1;			
    52aa:	e4 e0       	ldi	r30, 0x04	; 4
    52ac:	f9 e0       	ldi	r31, 0x09	; 9
    52ae:	80 81       	ld	r24, Z
    52b0:	91 81       	ldd	r25, Z+1	; 0x01
    52b2:	01 96       	adiw	r24, 0x01	; 1
    52b4:	91 83       	std	Z+1, r25	; 0x01
    52b6:	80 83       	st	Z, r24
			xTimerChangePeriod( xStartCompressor_1,period, 100 );
    52b8:	0f 2e       	mov	r0, r31
    52ba:	f4 e6       	ldi	r31, 0x64	; 100
    52bc:	cf 2e       	mov	r12, r31
    52be:	d1 2c       	mov	r13, r1
    52c0:	e1 2c       	mov	r14, r1
    52c2:	f1 2c       	mov	r15, r1
    52c4:	f0 2d       	mov	r31, r0
    52c6:	00 e0       	ldi	r16, 0x00	; 0
    52c8:	10 e0       	ldi	r17, 0x00	; 0
    52ca:	a5 01       	movw	r20, r10
    52cc:	94 01       	movw	r18, r8
    52ce:	64 e0       	ldi	r22, 0x04	; 4
    52d0:	80 91 38 0a 	lds	r24, 0x0A38	; 0x800a38 <xStartCompressor_1>
    52d4:	90 91 39 0a 	lds	r25, 0x0A39	; 0x800a39 <xStartCompressor_1+0x1>
    52d8:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    52dc:	42 c0       	rjmp	.+132    	; 0x5362 <StartHeatPump+0x138>
			
		}
	}

	else if((*pxTimerID) == uxStartDelayHeatPTimer_2_ID) {
    52de:	8f 30       	cpi	r24, 0x0F	; 15
    52e0:	09 f0       	breq	.+2      	; 0x52e4 <StartHeatPump+0xba>
    52e2:	3f c0       	rjmp	.+126    	; 0x5362 <StartHeatPump+0x138>
		xSerialxPrintf(&xSerial3Port,"StartHeatPump_2\r\n");
    52e4:	85 eb       	ldi	r24, 0xB5	; 181
    52e6:	92 e0       	ldi	r25, 0x02	; 2
    52e8:	9f 93       	push	r25
    52ea:	8f 93       	push	r24
    52ec:	80 e6       	ldi	r24, 0x60	; 96
    52ee:	97 e0       	ldi	r25, 0x07	; 7
    52f0:	9f 93       	push	r25
    52f2:	8f 93       	push	r24
    52f4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_2 == 0)
    52f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    52fc:	0f 90       	pop	r0
    52fe:	0f 90       	pop	r0
    5300:	0f 90       	pop	r0
    5302:	0f 90       	pop	r0
    5304:	84 fd       	sbrc	r24, 4
    5306:	2d c0       	rjmp	.+90     	; 0x5362 <StartHeatPump+0x138>
		{
			Comp_2.heatPOn=2;
    5308:	82 e0       	ldi	r24, 0x02	; 2
    530a:	80 93 b4 09 	sts	0x09B4, r24	; 0x8009b4 <Comp_2+0xc>
			START_HEAT_PUMP_2;
    530e:	e2 e0       	ldi	r30, 0x02	; 2
    5310:	f1 e0       	ldi	r31, 0x01	; 1
    5312:	80 81       	ld	r24, Z
    5314:	80 61       	ori	r24, 0x10	; 16
    5316:	80 83       	st	Z, r24
			timeStartHeatP_2=time(&current_time);
    5318:	8d eb       	ldi	r24, 0xBD	; 189
    531a:	98 e0       	ldi	r25, 0x08	; 8
    531c:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5320:	60 93 42 0a 	sts	0x0A42, r22	; 0x800a42 <timeStartHeatP_2>
    5324:	70 93 43 0a 	sts	0x0A43, r23	; 0x800a43 <timeStartHeatP_2+0x1>
    5328:	80 93 44 0a 	sts	0x0A44, r24	; 0x800a44 <timeStartHeatP_2+0x2>
    532c:	90 93 45 0a 	sts	0x0A45, r25	; 0x800a45 <timeStartHeatP_2+0x3>
			EEpromData.number_turnon_hiter_2+=1;
    5330:	e8 e1       	ldi	r30, 0x18	; 24
    5332:	f9 e0       	ldi	r31, 0x09	; 9
    5334:	80 81       	ld	r24, Z
    5336:	91 81       	ldd	r25, Z+1	; 0x01
    5338:	01 96       	adiw	r24, 0x01	; 1
    533a:	91 83       	std	Z+1, r25	; 0x01
    533c:	80 83       	st	Z, r24
			xTimerChangePeriod( xStartCompressor_2,period, 100 );
    533e:	0f 2e       	mov	r0, r31
    5340:	f4 e6       	ldi	r31, 0x64	; 100
    5342:	cf 2e       	mov	r12, r31
    5344:	d1 2c       	mov	r13, r1
    5346:	e1 2c       	mov	r14, r1
    5348:	f1 2c       	mov	r15, r1
    534a:	f0 2d       	mov	r31, r0
    534c:	00 e0       	ldi	r16, 0x00	; 0
    534e:	10 e0       	ldi	r17, 0x00	; 0
    5350:	a5 01       	movw	r20, r10
    5352:	94 01       	movw	r18, r8
    5354:	64 e0       	ldi	r22, 0x04	; 4
    5356:	80 91 4a 0a 	lds	r24, 0x0A4A	; 0x800a4a <xStartCompressor_2>
    535a:	90 91 4b 0a 	lds	r25, 0x0A4B	; 0x800a4b <xStartCompressor_2+0x1>
    535e:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		}
		
	}
}
    5362:	1f 91       	pop	r17
    5364:	0f 91       	pop	r16
    5366:	ff 90       	pop	r15
    5368:	ef 90       	pop	r14
    536a:	df 90       	pop	r13
    536c:	cf 90       	pop	r12
    536e:	bf 90       	pop	r11
    5370:	af 90       	pop	r10
    5372:	9f 90       	pop	r9
    5374:	8f 90       	pop	r8
    5376:	08 95       	ret

00005378 <SwitchRev_2_Time>:
		xTimerStart(xSwitchRevTwo_2_time, 0);
	}
}
//-------------------------------------------------------------------------
void SwitchRev_2_Time(TimerHandle_t xTimer)
{
    5378:	8f 92       	push	r8
    537a:	9f 92       	push	r9
    537c:	af 92       	push	r10
    537e:	bf 92       	push	r11
    5380:	cf 92       	push	r12
    5382:	df 92       	push	r13
    5384:	ef 92       	push	r14
    5386:	ff 92       	push	r15
    5388:	0f 93       	push	r16
    538a:	1f 93       	push	r17
    538c:	cf 93       	push	r28
    538e:	df 93       	push	r29
    5390:	ac 01       	movw	r20, r24
	portBASE_TYPE *pxTimerID;
	
	TickType_t period;
	period=(TickType_t)EEpromData.HeatingPump_delay;
    5392:	20 91 c5 08 	lds	r18, 0x08C5	; 0x8008c5 <EEpromData+0x3>
	period*=1000;
    5396:	30 e0       	ldi	r19, 0x00	; 0
    5398:	a8 ee       	ldi	r26, 0xE8	; 232
    539a:	b3 e0       	ldi	r27, 0x03	; 3
    539c:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    53a0:	4b 01       	movw	r8, r22
    53a2:	5c 01       	movw	r10, r24
	pxTimerID = pvTimerGetTimerID(xTimer);
    53a4:	ca 01       	movw	r24, r20
    53a6:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    53aa:	ec 01       	movw	r28, r24
	
	//xSerialxPrintf(&xSerial3Port,"SwitchRev_2\r\n");
	
	if((*pxTimerID) == uxSwitchRevTwo_1_ID)
    53ac:	88 81       	ld	r24, Y
    53ae:	8d 30       	cpi	r24, 0x0D	; 13
    53b0:	29 f5       	brne	.+74     	; 0x53fc <SwitchRev_2_Time+0x84>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_ON_1_2\r\n");
    53b2:	87 ec       	ldi	r24, 0xC7	; 199
    53b4:	92 e0       	ldi	r25, 0x02	; 2
    53b6:	9f 93       	push	r25
    53b8:	8f 93       	push	r24
    53ba:	80 e6       	ldi	r24, 0x60	; 96
    53bc:	97 e0       	ldi	r25, 0x07	; 7
    53be:	9f 93       	push	r25
    53c0:	8f 93       	push	r24
    53c2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_REV_VALVE_1 == 0){START_REV_VALVE_1;}//
    53c6:	0f 90       	pop	r0
    53c8:	0f 90       	pop	r0
    53ca:	0f 90       	pop	r0
    53cc:	0f 90       	pop	r0
    53ce:	94 99       	sbic	0x12, 4	; 18
    53d0:	02 c0       	rjmp	.+4      	; 0x53d6 <SwitchRev_2_Time+0x5e>
    53d2:	a4 9a       	sbi	0x14, 4	; 20
    53d4:	01 c0       	rjmp	.+2      	; 0x53d8 <SwitchRev_2_Time+0x60>
		else {STOP_REV_VALVE_1;}//xSerialxPrintf(&xSerial3Port,"SwitchRev_OFF_2\r\n");
    53d6:	a4 98       	cbi	0x14, 4	; 20
		xTimerChangePeriod( xStopHeatPump_1,period, 100 );
    53d8:	0f 2e       	mov	r0, r31
    53da:	f4 e6       	ldi	r31, 0x64	; 100
    53dc:	cf 2e       	mov	r12, r31
    53de:	d1 2c       	mov	r13, r1
    53e0:	e1 2c       	mov	r14, r1
    53e2:	f1 2c       	mov	r15, r1
    53e4:	f0 2d       	mov	r31, r0
    53e6:	00 e0       	ldi	r16, 0x00	; 0
    53e8:	10 e0       	ldi	r17, 0x00	; 0
    53ea:	a5 01       	movw	r20, r10
    53ec:	94 01       	movw	r18, r8
    53ee:	64 e0       	ldi	r22, 0x04	; 4
    53f0:	80 91 af 08 	lds	r24, 0x08AF	; 0x8008af <xStopHeatPump_1>
    53f4:	90 91 b0 08 	lds	r25, 0x08B0	; 0x8008b0 <xStopHeatPump_1+0x1>
    53f8:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
	if((*pxTimerID) == uxSwitchRevTwo_2_ID)
    53fc:	88 81       	ld	r24, Y
    53fe:	89 31       	cpi	r24, 0x19	; 25
    5400:	b9 f4       	brne	.+46     	; 0x5430 <SwitchRev_2_Time+0xb8>
	{
		//xSerialxPrintf(&xSerial3Port,"SwitchRev_2_2\r\n");
		if(PIN_REV_VALVE_2 == 0) START_REV_VALVE_2;
    5402:	93 99       	sbic	0x12, 3	; 18
    5404:	02 c0       	rjmp	.+4      	; 0x540a <SwitchRev_2_Time+0x92>
    5406:	a3 9a       	sbi	0x14, 3	; 20
    5408:	01 c0       	rjmp	.+2      	; 0x540c <SwitchRev_2_Time+0x94>
		else STOP_REV_VALVE_2;
    540a:	a3 98       	cbi	0x14, 3	; 20
		xTimerChangePeriod( xStopHeatPump_2,period, 100 );
    540c:	0f 2e       	mov	r0, r31
    540e:	f4 e6       	ldi	r31, 0x64	; 100
    5410:	cf 2e       	mov	r12, r31
    5412:	d1 2c       	mov	r13, r1
    5414:	e1 2c       	mov	r14, r1
    5416:	f1 2c       	mov	r15, r1
    5418:	f0 2d       	mov	r31, r0
    541a:	00 e0       	ldi	r16, 0x00	; 0
    541c:	10 e0       	ldi	r17, 0x00	; 0
    541e:	a5 01       	movw	r20, r10
    5420:	94 01       	movw	r18, r8
    5422:	64 e0       	ldi	r22, 0x04	; 4
    5424:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <xStopHeatPump_2>
    5428:	90 91 29 0a 	lds	r25, 0x0A29	; 0x800a29 <xStopHeatPump_2+0x1>
    542c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
}
    5430:	df 91       	pop	r29
    5432:	cf 91       	pop	r28
    5434:	1f 91       	pop	r17
    5436:	0f 91       	pop	r16
    5438:	ff 90       	pop	r15
    543a:	ef 90       	pop	r14
    543c:	df 90       	pop	r13
    543e:	cf 90       	pop	r12
    5440:	bf 90       	pop	r11
    5442:	af 90       	pop	r10
    5444:	9f 90       	pop	r9
    5446:	8f 90       	pop	r8
    5448:	08 95       	ret

0000544a <StartCheckErrors>:
}
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------
void StartCheckErrors(TimerHandle_t xTimer)
{
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    544a:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
	
	
	if((*pxTimerID) == uxStartDelayChekErrTimer_1_ID){Comp_1.countError=0; Comp_1.checkErrors=true;xSerialxPrintf(&xSerial3Port,"StartCheckErrors_1\r\n");}
    544e:	fc 01       	movw	r30, r24
    5450:	80 81       	ld	r24, Z
    5452:	87 30       	cpi	r24, 0x07	; 7
    5454:	a1 f4       	brne	.+40     	; 0x547e <StartCheckErrors+0x34>
    5456:	e2 e2       	ldi	r30, 0x22	; 34
    5458:	f9 e0       	ldi	r31, 0x09	; 9
    545a:	11 8a       	std	Z+17, r1	; 0x11
    545c:	81 e0       	ldi	r24, 0x01	; 1
    545e:	85 83       	std	Z+5, r24	; 0x05
    5460:	8a ed       	ldi	r24, 0xDA	; 218
    5462:	92 e0       	ldi	r25, 0x02	; 2
    5464:	9f 93       	push	r25
    5466:	8f 93       	push	r24
    5468:	80 e6       	ldi	r24, 0x60	; 96
    546a:	97 e0       	ldi	r25, 0x07	; 7
    546c:	9f 93       	push	r25
    546e:	8f 93       	push	r24
    5470:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    5474:	0f 90       	pop	r0
    5476:	0f 90       	pop	r0
    5478:	0f 90       	pop	r0
    547a:	0f 90       	pop	r0
    547c:	08 95       	ret
	else if((*pxTimerID) == uxStartDelayChekErrTimer_2_ID){Comp_2.countError=0;Comp_2.checkErrors=true;xSerialxPrintf(&xSerial3Port,"StartCheckErrors_2\r\n");}
    547e:	84 31       	cpi	r24, 0x14	; 20
    5480:	99 f4       	brne	.+38     	; 0x54a8 <StartCheckErrors+0x5e>
    5482:	e8 ea       	ldi	r30, 0xA8	; 168
    5484:	f9 e0       	ldi	r31, 0x09	; 9
    5486:	11 8a       	std	Z+17, r1	; 0x11
    5488:	81 e0       	ldi	r24, 0x01	; 1
    548a:	85 83       	std	Z+5, r24	; 0x05
    548c:	8f ee       	ldi	r24, 0xEF	; 239
    548e:	92 e0       	ldi	r25, 0x02	; 2
    5490:	9f 93       	push	r25
    5492:	8f 93       	push	r24
    5494:	80 e6       	ldi	r24, 0x60	; 96
    5496:	97 e0       	ldi	r25, 0x07	; 7
    5498:	9f 93       	push	r25
    549a:	8f 93       	push	r24
    549c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    54a0:	0f 90       	pop	r0
    54a2:	0f 90       	pop	r0
    54a4:	0f 90       	pop	r0
    54a6:	0f 90       	pop	r0
    54a8:	08 95       	ret

000054aa <StartCheckTrv>:
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------
void StartCheckTrv(TimerHandle_t xTimer)
{
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    54aa:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	if((*pxTimerID) == uxStartDelayChekTrvTimer_1_ID)       {Comp_1.checkTrv=true;xSerialxPrintf(&xSerial3Port,"StartCheckTrv_1\r\n");}
    54ae:	fc 01       	movw	r30, r24
    54b0:	80 81       	ld	r24, Z
    54b2:	86 30       	cpi	r24, 0x06	; 6
    54b4:	91 f4       	brne	.+36     	; 0x54da <StartCheckTrv+0x30>
    54b6:	81 e0       	ldi	r24, 0x01	; 1
    54b8:	80 93 23 09 	sts	0x0923, r24	; 0x800923 <Comp_1+0x1>
    54bc:	84 e0       	ldi	r24, 0x04	; 4
    54be:	93 e0       	ldi	r25, 0x03	; 3
    54c0:	9f 93       	push	r25
    54c2:	8f 93       	push	r24
    54c4:	80 e6       	ldi	r24, 0x60	; 96
    54c6:	97 e0       	ldi	r25, 0x07	; 7
    54c8:	9f 93       	push	r25
    54ca:	8f 93       	push	r24
    54cc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    54d0:	0f 90       	pop	r0
    54d2:	0f 90       	pop	r0
    54d4:	0f 90       	pop	r0
    54d6:	0f 90       	pop	r0
    54d8:	08 95       	ret
	else if((*pxTimerID) == uxStartDelayChekTrvTimer_2_ID) {Comp_2.checkTrv=true;xSerialxPrintf(&xSerial3Port,"StartCheckTrv_2\r\n");}
    54da:	83 31       	cpi	r24, 0x13	; 19
    54dc:	89 f4       	brne	.+34     	; 0x5500 <StartCheckTrv+0x56>
    54de:	81 e0       	ldi	r24, 0x01	; 1
    54e0:	80 93 a9 09 	sts	0x09A9, r24	; 0x8009a9 <Comp_2+0x1>
    54e4:	86 e1       	ldi	r24, 0x16	; 22
    54e6:	93 e0       	ldi	r25, 0x03	; 3
    54e8:	9f 93       	push	r25
    54ea:	8f 93       	push	r24
    54ec:	80 e6       	ldi	r24, 0x60	; 96
    54ee:	97 e0       	ldi	r25, 0x07	; 7
    54f0:	9f 93       	push	r25
    54f2:	8f 93       	push	r24
    54f4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    54f8:	0f 90       	pop	r0
    54fa:	0f 90       	pop	r0
    54fc:	0f 90       	pop	r0
    54fe:	0f 90       	pop	r0
    5500:	08 95       	ret

00005502 <StartReversingValve>:
		xTimerChangePeriod( xStartRevValve_2,period, 100 );
	}
	
}
//------------------------------------------------
void StartReversingValve(TimerHandle_t xTimer){
    5502:	8f 92       	push	r8
    5504:	9f 92       	push	r9
    5506:	af 92       	push	r10
    5508:	bf 92       	push	r11
    550a:	cf 92       	push	r12
    550c:	df 92       	push	r13
    550e:	ef 92       	push	r14
    5510:	ff 92       	push	r15
    5512:	0f 93       	push	r16
    5514:	1f 93       	push	r17
	TickType_t period;
	static time_t time_count_1;
	static time_t time_count_2;
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5516:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	//xSerialxPrintf(&xSerial3Port,"StarRevValve\r\n");
	if((*pxTimerID) == uxStartDelayRevVTimer_1_ID)
    551a:	fc 01       	movw	r30, r24
    551c:	80 81       	ld	r24, Z
    551e:	84 30       	cpi	r24, 0x04	; 4
    5520:	09 f0       	breq	.+2      	; 0x5524 <StartReversingValve+0x22>
    5522:	3a c1       	rjmp	.+628    	; 0x5798 <StartReversingValve+0x296>
	{	period=(TickType_t)EEpromData.Three_Way_delay;
    5524:	20 91 c6 08 	lds	r18, 0x08C6	; 0x8008c6 <EEpromData+0x4>
		period*=1000;
    5528:	30 e0       	ldi	r19, 0x00	; 0
    552a:	a8 ee       	ldi	r26, 0xE8	; 232
    552c:	b3 e0       	ldi	r27, 0x03	; 3
    552e:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
		period+=10000;
    5532:	4b 01       	movw	r8, r22
    5534:	5c 01       	movw	r10, r24
    5536:	f0 e1       	ldi	r31, 0x10	; 16
    5538:	8f 0e       	add	r8, r31
    553a:	f7 e2       	ldi	r31, 0x27	; 39
    553c:	9f 1e       	adc	r9, r31
    553e:	a1 1c       	adc	r10, r1
    5540:	b1 1c       	adc	r11, r1
		//////////////////////////////////////////

     //xSerialxPrintf(&xSerial3Port,"StartReversingValve\r\n");

		if(Comp_1.Cooling  )
    5542:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <Comp_1+0x3>
    5546:	88 23       	and	r24, r24
    5548:	09 f4       	brne	.+2      	; 0x554c <StartReversingValve+0x4a>
    554a:	86 c0       	rjmp	.+268    	; 0x5658 <StartReversingValve+0x156>
		{
			
			if(PIN_REV_VALVE_1 >0 && EEpromData.reversMod==1){
    554c:	94 9b       	sbis	0x12, 4	; 18
    554e:	59 c0       	rjmp	.+178    	; 0x5602 <StartReversingValve+0x100>
    5550:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <EEpromData+0x28>
    5554:	81 30       	cpi	r24, 0x01	; 1
    5556:	09 f0       	breq	.+2      	; 0x555a <StartReversingValve+0x58>
    5558:	54 c0       	rjmp	.+168    	; 0x5602 <StartReversingValve+0x100>
				
				STOP_REV_VALVE_1;//
    555a:	a4 98       	cbi	0x14, 4	; 20
				xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    555c:	88 e2       	ldi	r24, 0x28	; 40
    555e:	93 e0       	ldi	r25, 0x03	; 3
    5560:	9f 93       	push	r25
    5562:	8f 93       	push	r24
    5564:	80 e6       	ldi	r24, 0x60	; 96
    5566:	97 e0       	ldi	r25, 0x07	; 7
    5568:	9f 93       	push	r25
    556a:	8f 93       	push	r24
    556c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_1.revVOn=0;
    5570:	10 92 30 09 	sts	0x0930, r1	; 0x800930 <Comp_1+0xe>
				time_count_1+= difftime(time(&current_time), timeStartRevV_1);
    5574:	c0 90 51 0a 	lds	r12, 0x0A51	; 0x800a51 <timeStartRevV_1>
    5578:	d0 90 52 0a 	lds	r13, 0x0A52	; 0x800a52 <timeStartRevV_1+0x1>
    557c:	e0 90 53 0a 	lds	r14, 0x0A53	; 0x800a53 <timeStartRevV_1+0x2>
    5580:	f0 90 54 0a 	lds	r15, 0x0A54	; 0x800a54 <timeStartRevV_1+0x3>
    5584:	8d eb       	ldi	r24, 0xBD	; 189
    5586:	98 e0       	ldi	r25, 0x08	; 8
    5588:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    558c:	a7 01       	movw	r20, r14
    558e:	96 01       	movw	r18, r12
    5590:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5594:	c0 90 05 07 	lds	r12, 0x0705	; 0x800705 <time_count_1.3175>
    5598:	d0 90 06 07 	lds	r13, 0x0706	; 0x800706 <time_count_1.3175+0x1>
    559c:	e0 90 07 07 	lds	r14, 0x0707	; 0x800707 <time_count_1.3175+0x2>
    55a0:	f0 90 08 07 	lds	r15, 0x0708	; 0x800708 <time_count_1.3175+0x3>
    55a4:	dc 01       	movw	r26, r24
    55a6:	cb 01       	movw	r24, r22
    55a8:	8c 0d       	add	r24, r12
    55aa:	9d 1d       	adc	r25, r13
    55ac:	ae 1d       	adc	r26, r14
    55ae:	bf 1d       	adc	r27, r15
    55b0:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <time_count_1.3175>
    55b4:	90 93 06 07 	sts	0x0706, r25	; 0x800706 <time_count_1.3175+0x1>
    55b8:	a0 93 07 07 	sts	0x0707, r26	; 0x800707 <time_count_1.3175+0x2>
    55bc:	b0 93 08 07 	sts	0x0708, r27	; 0x800708 <time_count_1.3175+0x3>
				if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    55c0:	0f 90       	pop	r0
    55c2:	0f 90       	pop	r0
    55c4:	0f 90       	pop	r0
    55c6:	0f 90       	pop	r0
    55c8:	81 31       	cpi	r24, 0x11	; 17
    55ca:	9e 40       	sbci	r25, 0x0E	; 14
    55cc:	a1 05       	cpc	r26, r1
    55ce:	b1 05       	cpc	r27, r1
    55d0:	08 f4       	brcc	.+2      	; 0x55d4 <StartReversingValve+0xd2>
    55d2:	42 c0       	rjmp	.+132    	; 0x5658 <StartReversingValve+0x156>
    55d4:	e2 ec       	ldi	r30, 0xC2	; 194
    55d6:	f8 e0       	ldi	r31, 0x08	; 8
    55d8:	80 ad       	ldd	r24, Z+56	; 0x38
    55da:	91 ad       	ldd	r25, Z+57	; 0x39
    55dc:	01 96       	adiw	r24, 0x01	; 1
    55de:	91 af       	std	Z+57, r25	; 0x39
    55e0:	80 af       	std	Z+56, r24	; 0x38
    55e2:	40 e6       	ldi	r20, 0x60	; 96
    55e4:	50 e0       	ldi	r21, 0x00	; 0
    55e6:	60 e0       	ldi	r22, 0x00	; 0
    55e8:	70 e0       	ldi	r23, 0x00	; 0
    55ea:	cf 01       	movw	r24, r30
    55ec:	0e 94 a7 5b 	call	0xb74e	; 0xb74e <eeprom_update_block>
    55f0:	10 92 05 07 	sts	0x0705, r1	; 0x800705 <time_count_1.3175>
    55f4:	10 92 06 07 	sts	0x0706, r1	; 0x800706 <time_count_1.3175+0x1>
    55f8:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <time_count_1.3175+0x2>
    55fc:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <time_count_1.3175+0x3>
    5600:	2b c0       	rjmp	.+86     	; 0x5658 <StartReversingValve+0x156>
				
				
			}
			else if(PIN_REV_VALVE_1 == 0 && EEpromData.reversMod==0){
    5602:	94 99       	sbic	0x12, 4	; 18
    5604:	29 c0       	rjmp	.+82     	; 0x5658 <StartReversingValve+0x156>
    5606:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <EEpromData+0x28>
    560a:	81 11       	cpse	r24, r1
    560c:	25 c0       	rjmp	.+74     	; 0x5658 <StartReversingValve+0x156>
				START_REV_VALVE_1;
    560e:	a4 9a       	sbi	0x14, 4	; 20
				Comp_1.revVOn=1;
    5610:	81 e0       	ldi	r24, 0x01	; 1
    5612:	80 93 30 09 	sts	0x0930, r24	; 0x800930 <Comp_1+0xe>
				xSerialxPrintf(&xSerial3Port,"StarRevValve_1\r\n");
    5616:	89 e3       	ldi	r24, 0x39	; 57
    5618:	93 e0       	ldi	r25, 0x03	; 3
    561a:	9f 93       	push	r25
    561c:	8f 93       	push	r24
    561e:	80 e6       	ldi	r24, 0x60	; 96
    5620:	97 e0       	ldi	r25, 0x07	; 7
    5622:	9f 93       	push	r25
    5624:	8f 93       	push	r24
    5626:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_1=time(&current_time);
    562a:	8d eb       	ldi	r24, 0xBD	; 189
    562c:	98 e0       	ldi	r25, 0x08	; 8
    562e:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5632:	60 93 51 0a 	sts	0x0A51, r22	; 0x800a51 <timeStartRevV_1>
    5636:	70 93 52 0a 	sts	0x0A52, r23	; 0x800a52 <timeStartRevV_1+0x1>
    563a:	80 93 53 0a 	sts	0x0A53, r24	; 0x800a53 <timeStartRevV_1+0x2>
    563e:	90 93 54 0a 	sts	0x0A54, r25	; 0x800a54 <timeStartRevV_1+0x3>
				EEpromData.number_turnon_revers_1+=1;
    5642:	e6 e0       	ldi	r30, 0x06	; 6
    5644:	f9 e0       	ldi	r31, 0x09	; 9
    5646:	80 81       	ld	r24, Z
    5648:	91 81       	ldd	r25, Z+1	; 0x01
    564a:	01 96       	adiw	r24, 0x01	; 1
    564c:	91 83       	std	Z+1, r25	; 0x01
    564e:	80 83       	st	Z, r24
    5650:	0f 90       	pop	r0
    5652:	0f 90       	pop	r0
    5654:	0f 90       	pop	r0
    5656:	0f 90       	pop	r0
			}
		}
		if(Comp_1.heatingWater || Comp_1.Heating)
    5658:	80 91 26 09 	lds	r24, 0x0926	; 0x800926 <Comp_1+0x4>
    565c:	81 11       	cpse	r24, r1
    565e:	05 c0       	rjmp	.+10     	; 0x566a <StartReversingValve+0x168>
    5660:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <Comp_1+0x2>
    5664:	88 23       	and	r24, r24
    5666:	09 f4       	brne	.+2      	; 0x566a <StartReversingValve+0x168>
    5668:	84 c0       	rjmp	.+264    	; 0x5772 <StartReversingValve+0x270>
		{
			
			if(PIN_REV_VALVE_1 > 0 && EEpromData.reversMod==0){//
    566a:	94 9b       	sbis	0x12, 4	; 18
    566c:	58 c0       	rjmp	.+176    	; 0x571e <StartReversingValve+0x21c>
    566e:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <EEpromData+0x28>
    5672:	81 11       	cpse	r24, r1
    5674:	54 c0       	rjmp	.+168    	; 0x571e <StartReversingValve+0x21c>
				
				STOP_REV_VALVE_1;
    5676:	a4 98       	cbi	0x14, 4	; 20
				
				xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    5678:	88 e2       	ldi	r24, 0x28	; 40
    567a:	93 e0       	ldi	r25, 0x03	; 3
    567c:	9f 93       	push	r25
    567e:	8f 93       	push	r24
    5680:	80 e6       	ldi	r24, 0x60	; 96
    5682:	97 e0       	ldi	r25, 0x07	; 7
    5684:	9f 93       	push	r25
    5686:	8f 93       	push	r24
    5688:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_1.revVOn=0;
    568c:	10 92 30 09 	sts	0x0930, r1	; 0x800930 <Comp_1+0xe>
				time_count_1+= difftime(time(&current_time), timeStartRevV_1);
    5690:	c0 90 51 0a 	lds	r12, 0x0A51	; 0x800a51 <timeStartRevV_1>
    5694:	d0 90 52 0a 	lds	r13, 0x0A52	; 0x800a52 <timeStartRevV_1+0x1>
    5698:	e0 90 53 0a 	lds	r14, 0x0A53	; 0x800a53 <timeStartRevV_1+0x2>
    569c:	f0 90 54 0a 	lds	r15, 0x0A54	; 0x800a54 <timeStartRevV_1+0x3>
    56a0:	8d eb       	ldi	r24, 0xBD	; 189
    56a2:	98 e0       	ldi	r25, 0x08	; 8
    56a4:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    56a8:	a7 01       	movw	r20, r14
    56aa:	96 01       	movw	r18, r12
    56ac:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    56b0:	c0 90 05 07 	lds	r12, 0x0705	; 0x800705 <time_count_1.3175>
    56b4:	d0 90 06 07 	lds	r13, 0x0706	; 0x800706 <time_count_1.3175+0x1>
    56b8:	e0 90 07 07 	lds	r14, 0x0707	; 0x800707 <time_count_1.3175+0x2>
    56bc:	f0 90 08 07 	lds	r15, 0x0708	; 0x800708 <time_count_1.3175+0x3>
    56c0:	dc 01       	movw	r26, r24
    56c2:	cb 01       	movw	r24, r22
    56c4:	8c 0d       	add	r24, r12
    56c6:	9d 1d       	adc	r25, r13
    56c8:	ae 1d       	adc	r26, r14
    56ca:	bf 1d       	adc	r27, r15
    56cc:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <time_count_1.3175>
    56d0:	90 93 06 07 	sts	0x0706, r25	; 0x800706 <time_count_1.3175+0x1>
    56d4:	a0 93 07 07 	sts	0x0707, r26	; 0x800707 <time_count_1.3175+0x2>
    56d8:	b0 93 08 07 	sts	0x0708, r27	; 0x800708 <time_count_1.3175+0x3>
				if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    56dc:	0f 90       	pop	r0
    56de:	0f 90       	pop	r0
    56e0:	0f 90       	pop	r0
    56e2:	0f 90       	pop	r0
    56e4:	81 31       	cpi	r24, 0x11	; 17
    56e6:	9e 40       	sbci	r25, 0x0E	; 14
    56e8:	a1 05       	cpc	r26, r1
    56ea:	b1 05       	cpc	r27, r1
    56ec:	08 f4       	brcc	.+2      	; 0x56f0 <StartReversingValve+0x1ee>
    56ee:	41 c0       	rjmp	.+130    	; 0x5772 <StartReversingValve+0x270>
    56f0:	e2 ec       	ldi	r30, 0xC2	; 194
    56f2:	f8 e0       	ldi	r31, 0x08	; 8
    56f4:	80 ad       	ldd	r24, Z+56	; 0x38
    56f6:	91 ad       	ldd	r25, Z+57	; 0x39
    56f8:	01 96       	adiw	r24, 0x01	; 1
    56fa:	91 af       	std	Z+57, r25	; 0x39
    56fc:	80 af       	std	Z+56, r24	; 0x38
    56fe:	40 e6       	ldi	r20, 0x60	; 96
    5700:	50 e0       	ldi	r21, 0x00	; 0
    5702:	60 e0       	ldi	r22, 0x00	; 0
    5704:	70 e0       	ldi	r23, 0x00	; 0
    5706:	cf 01       	movw	r24, r30
    5708:	0e 94 a7 5b 	call	0xb74e	; 0xb74e <eeprom_update_block>
    570c:	10 92 05 07 	sts	0x0705, r1	; 0x800705 <time_count_1.3175>
    5710:	10 92 06 07 	sts	0x0706, r1	; 0x800706 <time_count_1.3175+0x1>
    5714:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <time_count_1.3175+0x2>
    5718:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <time_count_1.3175+0x3>
    571c:	2a c0       	rjmp	.+84     	; 0x5772 <StartReversingValve+0x270>
				
			}
			else if(PIN_REV_VALVE_1 == 0 && EEpromData.reversMod==1){
    571e:	94 99       	sbic	0x12, 4	; 18
    5720:	28 c0       	rjmp	.+80     	; 0x5772 <StartReversingValve+0x270>
    5722:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <EEpromData+0x28>
    5726:	81 30       	cpi	r24, 0x01	; 1
    5728:	21 f5       	brne	.+72     	; 0x5772 <StartReversingValve+0x270>
				START_REV_VALVE_1;
    572a:	a4 9a       	sbi	0x14, 4	; 20
				Comp_1.revVOn=1;
    572c:	80 93 30 09 	sts	0x0930, r24	; 0x800930 <Comp_1+0xe>
				xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    5730:	88 e2       	ldi	r24, 0x28	; 40
    5732:	93 e0       	ldi	r25, 0x03	; 3
    5734:	9f 93       	push	r25
    5736:	8f 93       	push	r24
    5738:	80 e6       	ldi	r24, 0x60	; 96
    573a:	97 e0       	ldi	r25, 0x07	; 7
    573c:	9f 93       	push	r25
    573e:	8f 93       	push	r24
    5740:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_1=time(&current_time);
    5744:	8d eb       	ldi	r24, 0xBD	; 189
    5746:	98 e0       	ldi	r25, 0x08	; 8
    5748:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    574c:	60 93 51 0a 	sts	0x0A51, r22	; 0x800a51 <timeStartRevV_1>
    5750:	70 93 52 0a 	sts	0x0A52, r23	; 0x800a52 <timeStartRevV_1+0x1>
    5754:	80 93 53 0a 	sts	0x0A53, r24	; 0x800a53 <timeStartRevV_1+0x2>
    5758:	90 93 54 0a 	sts	0x0A54, r25	; 0x800a54 <timeStartRevV_1+0x3>
				EEpromData.number_turnon_revers_1+=1;
    575c:	e6 e0       	ldi	r30, 0x06	; 6
    575e:	f9 e0       	ldi	r31, 0x09	; 9
    5760:	80 81       	ld	r24, Z
    5762:	91 81       	ldd	r25, Z+1	; 0x01
    5764:	01 96       	adiw	r24, 0x01	; 1
    5766:	91 83       	std	Z+1, r25	; 0x01
    5768:	80 83       	st	Z, r24
    576a:	0f 90       	pop	r0
    576c:	0f 90       	pop	r0
    576e:	0f 90       	pop	r0
    5770:	0f 90       	pop	r0
			}
		}
		
		xTimerChangePeriod( xStartThreeWay,period, 100 );
    5772:	0f 2e       	mov	r0, r31
    5774:	f4 e6       	ldi	r31, 0x64	; 100
    5776:	cf 2e       	mov	r12, r31
    5778:	d1 2c       	mov	r13, r1
    577a:	e1 2c       	mov	r14, r1
    577c:	f1 2c       	mov	r15, r1
    577e:	f0 2d       	mov	r31, r0
    5780:	00 e0       	ldi	r16, 0x00	; 0
    5782:	10 e0       	ldi	r17, 0x00	; 0
    5784:	a5 01       	movw	r20, r10
    5786:	94 01       	movw	r18, r8
    5788:	64 e0       	ldi	r22, 0x04	; 4
    578a:	80 91 96 09 	lds	r24, 0x0996	; 0x800996 <xStartThreeWay>
    578e:	90 91 97 09 	lds	r25, 0x0997	; 0x800997 <xStartThreeWay+0x1>
    5792:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    5796:	34 c1       	rjmp	.+616    	; 0x5a00 <StartReversingValve+0x4fe>
		
	}
	else if((*pxTimerID) == uxStartDelayRevVTimer_2_ID)
    5798:	81 31       	cpi	r24, 0x11	; 17
    579a:	09 f0       	breq	.+2      	; 0x579e <StartReversingValve+0x29c>
    579c:	31 c1       	rjmp	.+610    	; 0x5a00 <StartReversingValve+0x4fe>
	{
		period=(TickType_t)EEpromData.HeatingPump_delay;
    579e:	20 91 c5 08 	lds	r18, 0x08C5	; 0x8008c5 <EEpromData+0x3>
		period*=1000;
    57a2:	30 e0       	ldi	r19, 0x00	; 0
    57a4:	a8 ee       	ldi	r26, 0xE8	; 232
    57a6:	b3 e0       	ldi	r27, 0x03	; 3
    57a8:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    57ac:	4b 01       	movw	r8, r22
    57ae:	5c 01       	movw	r10, r24
		
		if(Comp_2.Cooling)
    57b0:	80 91 ab 09 	lds	r24, 0x09AB	; 0x8009ab <Comp_2+0x3>
    57b4:	88 23       	and	r24, r24
    57b6:	09 f4       	brne	.+2      	; 0x57ba <StartReversingValve+0x2b8>
    57b8:	87 c0       	rjmp	.+270    	; 0x58c8 <StartReversingValve+0x3c6>
		{
			if(PIN_REV_VALVE_2 >0 && EEpromData.reversMod==1){
    57ba:	93 9b       	sbis	0x12, 3	; 18
    57bc:	5a c0       	rjmp	.+180    	; 0x5872 <StartReversingValve+0x370>
    57be:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <EEpromData+0x28>
    57c2:	81 30       	cpi	r24, 0x01	; 1
    57c4:	09 f0       	breq	.+2      	; 0x57c8 <StartReversingValve+0x2c6>
    57c6:	55 c0       	rjmp	.+170    	; 0x5872 <StartReversingValve+0x370>
				
				STOP_REV_VALVE_2;//
    57c8:	a3 98       	cbi	0x14, 3	; 20
				
				xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    57ca:	8a e4       	ldi	r24, 0x4A	; 74
    57cc:	93 e0       	ldi	r25, 0x03	; 3
    57ce:	9f 93       	push	r25
    57d0:	8f 93       	push	r24
    57d2:	80 e6       	ldi	r24, 0x60	; 96
    57d4:	97 e0       	ldi	r25, 0x07	; 7
    57d6:	9f 93       	push	r25
    57d8:	8f 93       	push	r24
    57da:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_2.revVOn=0;
    57de:	10 92 b6 09 	sts	0x09B6, r1	; 0x8009b6 <Comp_2+0xe>
				time_count_2+= difftime(time(&current_time), timeStartRevV_2);
    57e2:	c0 90 6c 0a 	lds	r12, 0x0A6C	; 0x800a6c <timeStartRevV_2>
    57e6:	d0 90 6d 0a 	lds	r13, 0x0A6D	; 0x800a6d <timeStartRevV_2+0x1>
    57ea:	e0 90 6e 0a 	lds	r14, 0x0A6E	; 0x800a6e <timeStartRevV_2+0x2>
    57ee:	f0 90 6f 0a 	lds	r15, 0x0A6F	; 0x800a6f <timeStartRevV_2+0x3>
    57f2:	8d eb       	ldi	r24, 0xBD	; 189
    57f4:	98 e0       	ldi	r25, 0x08	; 8
    57f6:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    57fa:	a7 01       	movw	r20, r14
    57fc:	96 01       	movw	r18, r12
    57fe:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5802:	c0 90 01 07 	lds	r12, 0x0701	; 0x800701 <time_count_2.3176>
    5806:	d0 90 02 07 	lds	r13, 0x0702	; 0x800702 <time_count_2.3176+0x1>
    580a:	e0 90 03 07 	lds	r14, 0x0703	; 0x800703 <time_count_2.3176+0x2>
    580e:	f0 90 04 07 	lds	r15, 0x0704	; 0x800704 <time_count_2.3176+0x3>
    5812:	dc 01       	movw	r26, r24
    5814:	cb 01       	movw	r24, r22
    5816:	8c 0d       	add	r24, r12
    5818:	9d 1d       	adc	r25, r13
    581a:	ae 1d       	adc	r26, r14
    581c:	bf 1d       	adc	r27, r15
    581e:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <time_count_2.3176>
    5822:	90 93 02 07 	sts	0x0702, r25	; 0x800702 <time_count_2.3176+0x1>
    5826:	a0 93 03 07 	sts	0x0703, r26	; 0x800703 <time_count_2.3176+0x2>
    582a:	b0 93 04 07 	sts	0x0704, r27	; 0x800704 <time_count_2.3176+0x3>
				if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    582e:	0f 90       	pop	r0
    5830:	0f 90       	pop	r0
    5832:	0f 90       	pop	r0
    5834:	0f 90       	pop	r0
    5836:	81 31       	cpi	r24, 0x11	; 17
    5838:	9e 40       	sbci	r25, 0x0E	; 14
    583a:	a1 05       	cpc	r26, r1
    583c:	b1 05       	cpc	r27, r1
    583e:	08 f4       	brcc	.+2      	; 0x5842 <StartReversingValve+0x340>
    5840:	43 c0       	rjmp	.+134    	; 0x58c8 <StartReversingValve+0x3c6>
    5842:	e0 e1       	ldi	r30, 0x10	; 16
    5844:	f9 e0       	ldi	r31, 0x09	; 9
    5846:	80 81       	ld	r24, Z
    5848:	91 81       	ldd	r25, Z+1	; 0x01
    584a:	01 96       	adiw	r24, 0x01	; 1
    584c:	91 83       	std	Z+1, r25	; 0x01
    584e:	80 83       	st	Z, r24
    5850:	40 e6       	ldi	r20, 0x60	; 96
    5852:	50 e0       	ldi	r21, 0x00	; 0
    5854:	60 e0       	ldi	r22, 0x00	; 0
    5856:	70 e0       	ldi	r23, 0x00	; 0
    5858:	82 ec       	ldi	r24, 0xC2	; 194
    585a:	98 e0       	ldi	r25, 0x08	; 8
    585c:	0e 94 a7 5b 	call	0xb74e	; 0xb74e <eeprom_update_block>
    5860:	10 92 01 07 	sts	0x0701, r1	; 0x800701 <time_count_2.3176>
    5864:	10 92 02 07 	sts	0x0702, r1	; 0x800702 <time_count_2.3176+0x1>
    5868:	10 92 03 07 	sts	0x0703, r1	; 0x800703 <time_count_2.3176+0x2>
    586c:	10 92 04 07 	sts	0x0704, r1	; 0x800704 <time_count_2.3176+0x3>
    5870:	2b c0       	rjmp	.+86     	; 0x58c8 <StartReversingValve+0x3c6>
				
				
			}
			else if(PIN_REV_VALVE_2 == 0 && EEpromData.reversMod==0){
    5872:	93 99       	sbic	0x12, 3	; 18
    5874:	29 c0       	rjmp	.+82     	; 0x58c8 <StartReversingValve+0x3c6>
    5876:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <EEpromData+0x28>
    587a:	81 11       	cpse	r24, r1
    587c:	25 c0       	rjmp	.+74     	; 0x58c8 <StartReversingValve+0x3c6>
				START_REV_VALVE_2;
    587e:	a3 9a       	sbi	0x14, 3	; 20
				Comp_1.revVOn=1;
    5880:	81 e0       	ldi	r24, 0x01	; 1
    5882:	80 93 30 09 	sts	0x0930, r24	; 0x800930 <Comp_1+0xe>
				xSerialxPrintf(&xSerial3Port,"StarRevValve_2\r\n");
    5886:	8b e5       	ldi	r24, 0x5B	; 91
    5888:	93 e0       	ldi	r25, 0x03	; 3
    588a:	9f 93       	push	r25
    588c:	8f 93       	push	r24
    588e:	80 e6       	ldi	r24, 0x60	; 96
    5890:	97 e0       	ldi	r25, 0x07	; 7
    5892:	9f 93       	push	r25
    5894:	8f 93       	push	r24
    5896:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_2=time(&current_time);
    589a:	8d eb       	ldi	r24, 0xBD	; 189
    589c:	98 e0       	ldi	r25, 0x08	; 8
    589e:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    58a2:	60 93 6c 0a 	sts	0x0A6C, r22	; 0x800a6c <timeStartRevV_2>
    58a6:	70 93 6d 0a 	sts	0x0A6D, r23	; 0x800a6d <timeStartRevV_2+0x1>
    58aa:	80 93 6e 0a 	sts	0x0A6E, r24	; 0x800a6e <timeStartRevV_2+0x2>
    58ae:	90 93 6f 0a 	sts	0x0A6F, r25	; 0x800a6f <timeStartRevV_2+0x3>
				EEpromData.number_turnon_revers_2+=1;
    58b2:	ea e1       	ldi	r30, 0x1A	; 26
    58b4:	f9 e0       	ldi	r31, 0x09	; 9
    58b6:	80 81       	ld	r24, Z
    58b8:	91 81       	ldd	r25, Z+1	; 0x01
    58ba:	01 96       	adiw	r24, 0x01	; 1
    58bc:	91 83       	std	Z+1, r25	; 0x01
    58be:	80 83       	st	Z, r24
    58c0:	0f 90       	pop	r0
    58c2:	0f 90       	pop	r0
    58c4:	0f 90       	pop	r0
    58c6:	0f 90       	pop	r0
			}
		}
		if(Comp_2.Heating)
    58c8:	80 91 aa 09 	lds	r24, 0x09AA	; 0x8009aa <Comp_2+0x2>
    58cc:	88 23       	and	r24, r24
    58ce:	09 f4       	brne	.+2      	; 0x58d2 <StartReversingValve+0x3d0>
    58d0:	85 c0       	rjmp	.+266    	; 0x59dc <StartReversingValve+0x4da>
		{
			if(PIN_REV_VALVE_2 > 0 && EEpromData.reversMod==0){//
    58d2:	93 9b       	sbis	0x12, 3	; 18
    58d4:	59 c0       	rjmp	.+178    	; 0x5988 <StartReversingValve+0x486>
    58d6:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <EEpromData+0x28>
    58da:	81 11       	cpse	r24, r1
    58dc:	55 c0       	rjmp	.+170    	; 0x5988 <StartReversingValve+0x486>
				
				STOP_REV_VALVE_2;
    58de:	a3 98       	cbi	0x14, 3	; 20
				
				xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    58e0:	8a e4       	ldi	r24, 0x4A	; 74
    58e2:	93 e0       	ldi	r25, 0x03	; 3
    58e4:	9f 93       	push	r25
    58e6:	8f 93       	push	r24
    58e8:	80 e6       	ldi	r24, 0x60	; 96
    58ea:	97 e0       	ldi	r25, 0x07	; 7
    58ec:	9f 93       	push	r25
    58ee:	8f 93       	push	r24
    58f0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				Comp_2.revVOn=0;
    58f4:	10 92 b6 09 	sts	0x09B6, r1	; 0x8009b6 <Comp_2+0xe>
				time_count_2+= difftime(time(&current_time), timeStartRevV_2);
    58f8:	c0 90 6c 0a 	lds	r12, 0x0A6C	; 0x800a6c <timeStartRevV_2>
    58fc:	d0 90 6d 0a 	lds	r13, 0x0A6D	; 0x800a6d <timeStartRevV_2+0x1>
    5900:	e0 90 6e 0a 	lds	r14, 0x0A6E	; 0x800a6e <timeStartRevV_2+0x2>
    5904:	f0 90 6f 0a 	lds	r15, 0x0A6F	; 0x800a6f <timeStartRevV_2+0x3>
    5908:	8d eb       	ldi	r24, 0xBD	; 189
    590a:	98 e0       	ldi	r25, 0x08	; 8
    590c:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5910:	a7 01       	movw	r20, r14
    5912:	96 01       	movw	r18, r12
    5914:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5918:	c0 90 01 07 	lds	r12, 0x0701	; 0x800701 <time_count_2.3176>
    591c:	d0 90 02 07 	lds	r13, 0x0702	; 0x800702 <time_count_2.3176+0x1>
    5920:	e0 90 03 07 	lds	r14, 0x0703	; 0x800703 <time_count_2.3176+0x2>
    5924:	f0 90 04 07 	lds	r15, 0x0704	; 0x800704 <time_count_2.3176+0x3>
    5928:	dc 01       	movw	r26, r24
    592a:	cb 01       	movw	r24, r22
    592c:	8c 0d       	add	r24, r12
    592e:	9d 1d       	adc	r25, r13
    5930:	ae 1d       	adc	r26, r14
    5932:	bf 1d       	adc	r27, r15
    5934:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <time_count_2.3176>
    5938:	90 93 02 07 	sts	0x0702, r25	; 0x800702 <time_count_2.3176+0x1>
    593c:	a0 93 03 07 	sts	0x0703, r26	; 0x800703 <time_count_2.3176+0x2>
    5940:	b0 93 04 07 	sts	0x0704, r27	; 0x800704 <time_count_2.3176+0x3>
				if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    5944:	0f 90       	pop	r0
    5946:	0f 90       	pop	r0
    5948:	0f 90       	pop	r0
    594a:	0f 90       	pop	r0
    594c:	81 31       	cpi	r24, 0x11	; 17
    594e:	9e 40       	sbci	r25, 0x0E	; 14
    5950:	a1 05       	cpc	r26, r1
    5952:	b1 05       	cpc	r27, r1
    5954:	08 f4       	brcc	.+2      	; 0x5958 <StartReversingValve+0x456>
    5956:	42 c0       	rjmp	.+132    	; 0x59dc <StartReversingValve+0x4da>
    5958:	e0 e1       	ldi	r30, 0x10	; 16
    595a:	f9 e0       	ldi	r31, 0x09	; 9
    595c:	80 81       	ld	r24, Z
    595e:	91 81       	ldd	r25, Z+1	; 0x01
    5960:	01 96       	adiw	r24, 0x01	; 1
    5962:	91 83       	std	Z+1, r25	; 0x01
    5964:	80 83       	st	Z, r24
    5966:	40 e6       	ldi	r20, 0x60	; 96
    5968:	50 e0       	ldi	r21, 0x00	; 0
    596a:	60 e0       	ldi	r22, 0x00	; 0
    596c:	70 e0       	ldi	r23, 0x00	; 0
    596e:	82 ec       	ldi	r24, 0xC2	; 194
    5970:	98 e0       	ldi	r25, 0x08	; 8
    5972:	0e 94 a7 5b 	call	0xb74e	; 0xb74e <eeprom_update_block>
    5976:	10 92 01 07 	sts	0x0701, r1	; 0x800701 <time_count_2.3176>
    597a:	10 92 02 07 	sts	0x0702, r1	; 0x800702 <time_count_2.3176+0x1>
    597e:	10 92 03 07 	sts	0x0703, r1	; 0x800703 <time_count_2.3176+0x2>
    5982:	10 92 04 07 	sts	0x0704, r1	; 0x800704 <time_count_2.3176+0x3>
    5986:	2a c0       	rjmp	.+84     	; 0x59dc <StartReversingValve+0x4da>
				
			}
			else if(PIN_REV_VALVE_2 == 0 && EEpromData.reversMod==1){
    5988:	93 99       	sbic	0x12, 3	; 18
    598a:	28 c0       	rjmp	.+80     	; 0x59dc <StartReversingValve+0x4da>
    598c:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <EEpromData+0x28>
    5990:	81 30       	cpi	r24, 0x01	; 1
    5992:	21 f5       	brne	.+72     	; 0x59dc <StartReversingValve+0x4da>
				START_REV_VALVE_2;
    5994:	a3 9a       	sbi	0x14, 3	; 20
				Comp_2.revVOn=1;
    5996:	80 93 b6 09 	sts	0x09B6, r24	; 0x8009b6 <Comp_2+0xe>
				xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    599a:	8a e4       	ldi	r24, 0x4A	; 74
    599c:	93 e0       	ldi	r25, 0x03	; 3
    599e:	9f 93       	push	r25
    59a0:	8f 93       	push	r24
    59a2:	80 e6       	ldi	r24, 0x60	; 96
    59a4:	97 e0       	ldi	r25, 0x07	; 7
    59a6:	9f 93       	push	r25
    59a8:	8f 93       	push	r24
    59aa:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
				timeStartRevV_2=time(&current_time);
    59ae:	8d eb       	ldi	r24, 0xBD	; 189
    59b0:	98 e0       	ldi	r25, 0x08	; 8
    59b2:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    59b6:	60 93 6c 0a 	sts	0x0A6C, r22	; 0x800a6c <timeStartRevV_2>
    59ba:	70 93 6d 0a 	sts	0x0A6D, r23	; 0x800a6d <timeStartRevV_2+0x1>
    59be:	80 93 6e 0a 	sts	0x0A6E, r24	; 0x800a6e <timeStartRevV_2+0x2>
    59c2:	90 93 6f 0a 	sts	0x0A6F, r25	; 0x800a6f <timeStartRevV_2+0x3>
				EEpromData.number_turnon_revers_2+=1;
    59c6:	ea e1       	ldi	r30, 0x1A	; 26
    59c8:	f9 e0       	ldi	r31, 0x09	; 9
    59ca:	80 81       	ld	r24, Z
    59cc:	91 81       	ldd	r25, Z+1	; 0x01
    59ce:	01 96       	adiw	r24, 0x01	; 1
    59d0:	91 83       	std	Z+1, r25	; 0x01
    59d2:	80 83       	st	Z, r24
    59d4:	0f 90       	pop	r0
    59d6:	0f 90       	pop	r0
    59d8:	0f 90       	pop	r0
    59da:	0f 90       	pop	r0
			}
		}

		xTimerChangePeriod( xStartHeatPump_2,period, 100 );
    59dc:	0f 2e       	mov	r0, r31
    59de:	f4 e6       	ldi	r31, 0x64	; 100
    59e0:	cf 2e       	mov	r12, r31
    59e2:	d1 2c       	mov	r13, r1
    59e4:	e1 2c       	mov	r14, r1
    59e6:	f1 2c       	mov	r15, r1
    59e8:	f0 2d       	mov	r31, r0
    59ea:	00 e0       	ldi	r16, 0x00	; 0
    59ec:	10 e0       	ldi	r17, 0x00	; 0
    59ee:	a5 01       	movw	r20, r10
    59f0:	94 01       	movw	r18, r8
    59f2:	64 e0       	ldi	r22, 0x04	; 4
    59f4:	80 91 98 09 	lds	r24, 0x0998	; 0x800998 <xStartHeatPump_2>
    59f8:	90 91 99 09 	lds	r25, 0x0999	; 0x800999 <xStartHeatPump_2+0x1>
    59fc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}


}
    5a00:	1f 91       	pop	r17
    5a02:	0f 91       	pop	r16
    5a04:	ff 90       	pop	r15
    5a06:	ef 90       	pop	r14
    5a08:	df 90       	pop	r13
    5a0a:	cf 90       	pop	r12
    5a0c:	bf 90       	pop	r11
    5a0e:	af 90       	pop	r10
    5a10:	9f 90       	pop	r9
    5a12:	8f 90       	pop	r8
    5a14:	08 95       	ret

00005a16 <StartThreeWay>:
//------------------------------------------------
void StartThreeWay()
{
    5a16:	8f 92       	push	r8
    5a18:	9f 92       	push	r9
    5a1a:	af 92       	push	r10
    5a1c:	bf 92       	push	r11
    5a1e:	cf 92       	push	r12
    5a20:	df 92       	push	r13
    5a22:	ef 92       	push	r14
    5a24:	ff 92       	push	r15
    5a26:	0f 93       	push	r16
    5a28:	1f 93       	push	r17
	static time_t time_count;
    TickType_t period;
	
	
	period=(TickType_t)EEpromData.HeatingPump_delay;
    5a2a:	20 91 c5 08 	lds	r18, 0x08C5	; 0x8008c5 <EEpromData+0x3>
	period*=1000;
    5a2e:	30 e0       	ldi	r19, 0x00	; 0
    5a30:	a8 ee       	ldi	r26, 0xE8	; 232
    5a32:	b3 e0       	ldi	r27, 0x03	; 3
    5a34:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    5a38:	4b 01       	movw	r8, r22
    5a3a:	5c 01       	movw	r10, r24
	xSerialxPrintf(&xSerial3Port,"StartThreeWay\r\n");
    5a3c:	8c e6       	ldi	r24, 0x6C	; 108
    5a3e:	93 e0       	ldi	r25, 0x03	; 3
    5a40:	9f 93       	push	r25
    5a42:	8f 93       	push	r24
    5a44:	80 e6       	ldi	r24, 0x60	; 96
    5a46:	97 e0       	ldi	r25, 0x07	; 7
    5a48:	9f 93       	push	r25
    5a4a:	8f 93       	push	r24
    5a4c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(Comp_1.heatingWater)
    5a50:	0f 90       	pop	r0
    5a52:	0f 90       	pop	r0
    5a54:	0f 90       	pop	r0
    5a56:	0f 90       	pop	r0
    5a58:	80 91 26 09 	lds	r24, 0x0926	; 0x800926 <Comp_1+0x4>
    5a5c:	88 23       	and	r24, r24
    5a5e:	71 f1       	breq	.+92     	; 0x5abc <StartThreeWay+0xa6>
	{
		
		if(PIN_THWAY_VALVE == 0)//
    5a60:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5a64:	88 23       	and	r24, r24
    5a66:	e4 f0       	brlt	.+56     	; 0x5aa0 <StartThreeWay+0x8a>
		{
			START_THWAY_VALVE;
    5a68:	e2 e0       	ldi	r30, 0x02	; 2
    5a6a:	f1 e0       	ldi	r31, 0x01	; 1
    5a6c:	80 81       	ld	r24, Z
    5a6e:	80 68       	ori	r24, 0x80	; 128
    5a70:	80 83       	st	Z, r24
			
			//xSerialxPrintf(&xSerial3Port,"StartThreeWay\r\n");
			Comp_1.threeWOn=1;
    5a72:	81 e0       	ldi	r24, 0x01	; 1
    5a74:	80 93 2f 09 	sts	0x092F, r24	; 0x80092f <Comp_1+0xd>
			timeStartThreeW=time(&current_time);
    5a78:	8d eb       	ldi	r24, 0xBD	; 189
    5a7a:	98 e0       	ldi	r25, 0x08	; 8
    5a7c:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5a80:	60 93 46 0a 	sts	0x0A46, r22	; 0x800a46 <timeStartThreeW>
    5a84:	70 93 47 0a 	sts	0x0A47, r23	; 0x800a47 <timeStartThreeW+0x1>
    5a88:	80 93 48 0a 	sts	0x0A48, r24	; 0x800a48 <timeStartThreeW+0x2>
    5a8c:	90 93 49 0a 	sts	0x0A49, r25	; 0x800a49 <timeStartThreeW+0x3>
			EEpromData.number_turnon_threeway+=1;
    5a90:	e8 e0       	ldi	r30, 0x08	; 8
    5a92:	f9 e0       	ldi	r31, 0x09	; 9
    5a94:	80 81       	ld	r24, Z
    5a96:	91 81       	ldd	r25, Z+1	; 0x01
    5a98:	01 96       	adiw	r24, 0x01	; 1
    5a9a:	91 83       	std	Z+1, r25	; 0x01
    5a9c:	80 83       	st	Z, r24
    5a9e:	0e c0       	rjmp	.+28     	; 0x5abc <StartThreeWay+0xa6>
			
		} else xSerialxPrintf(&xSerial3Port,"StopThreeWay\r\n");
    5aa0:	8c e7       	ldi	r24, 0x7C	; 124
    5aa2:	93 e0       	ldi	r25, 0x03	; 3
    5aa4:	9f 93       	push	r25
    5aa6:	8f 93       	push	r24
    5aa8:	80 e6       	ldi	r24, 0x60	; 96
    5aaa:	97 e0       	ldi	r25, 0x07	; 7
    5aac:	9f 93       	push	r25
    5aae:	8f 93       	push	r24
    5ab0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    5ab4:	0f 90       	pop	r0
    5ab6:	0f 90       	pop	r0
    5ab8:	0f 90       	pop	r0
    5aba:	0f 90       	pop	r0
	}
	if(Comp_1.Heating || Comp_1.Cooling)
    5abc:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <Comp_1+0x2>
    5ac0:	81 11       	cpse	r24, r1
    5ac2:	05 c0       	rjmp	.+10     	; 0x5ace <StartThreeWay+0xb8>
    5ac4:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <Comp_1+0x3>
    5ac8:	88 23       	and	r24, r24
    5aca:	09 f4       	brne	.+2      	; 0x5ace <StartThreeWay+0xb8>
    5acc:	4d c0       	rjmp	.+154    	; 0x5b68 <StartThreeWay+0x152>
	{
		if(PIN_THWAY_VALVE > 0)//
    5ace:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5ad2:	88 23       	and	r24, r24
    5ad4:	0c f0       	brlt	.+2      	; 0x5ad8 <StartThreeWay+0xc2>
    5ad6:	48 c0       	rjmp	.+144    	; 0x5b68 <StartThreeWay+0x152>
		{
			STOP_THWAY_VALVE;
    5ad8:	e2 e0       	ldi	r30, 0x02	; 2
    5ada:	f1 e0       	ldi	r31, 0x01	; 1
    5adc:	80 81       	ld	r24, Z
    5ade:	8f 77       	andi	r24, 0x7F	; 127
    5ae0:	80 83       	st	Z, r24
			
			//xSerialxPrintf(&xSerial3Port,"StopThreeWay\r\n");
			Comp_1.threeWOn=0;
    5ae2:	10 92 2f 09 	sts	0x092F, r1	; 0x80092f <Comp_1+0xd>
			time_count+= difftime(time(&current_time), timeStartThreeW);
    5ae6:	c0 90 46 0a 	lds	r12, 0x0A46	; 0x800a46 <timeStartThreeW>
    5aea:	d0 90 47 0a 	lds	r13, 0x0A47	; 0x800a47 <timeStartThreeW+0x1>
    5aee:	e0 90 48 0a 	lds	r14, 0x0A48	; 0x800a48 <timeStartThreeW+0x2>
    5af2:	f0 90 49 0a 	lds	r15, 0x0A49	; 0x800a49 <timeStartThreeW+0x3>
    5af6:	8d eb       	ldi	r24, 0xBD	; 189
    5af8:	98 e0       	ldi	r25, 0x08	; 8
    5afa:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5afe:	a7 01       	movw	r20, r14
    5b00:	96 01       	movw	r18, r12
    5b02:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5b06:	c0 90 fd 06 	lds	r12, 0x06FD	; 0x8006fd <time_count.3180>
    5b0a:	d0 90 fe 06 	lds	r13, 0x06FE	; 0x8006fe <time_count.3180+0x1>
    5b0e:	e0 90 ff 06 	lds	r14, 0x06FF	; 0x8006ff <time_count.3180+0x2>
    5b12:	f0 90 00 07 	lds	r15, 0x0700	; 0x800700 <time_count.3180+0x3>
    5b16:	dc 01       	movw	r26, r24
    5b18:	cb 01       	movw	r24, r22
    5b1a:	8c 0d       	add	r24, r12
    5b1c:	9d 1d       	adc	r25, r13
    5b1e:	ae 1d       	adc	r26, r14
    5b20:	bf 1d       	adc	r27, r15
    5b22:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <time_count.3180>
    5b26:	90 93 fe 06 	sts	0x06FE, r25	; 0x8006fe <time_count.3180+0x1>
    5b2a:	a0 93 ff 06 	sts	0x06FF, r26	; 0x8006ff <time_count.3180+0x2>
    5b2e:	b0 93 00 07 	sts	0x0700, r27	; 0x800700 <time_count.3180+0x3>
			if(time_count>ONE_HOUR){EEpromData.time_threeway++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count=0;}
    5b32:	81 31       	cpi	r24, 0x11	; 17
    5b34:	9e 40       	sbci	r25, 0x0E	; 14
    5b36:	a1 05       	cpc	r26, r1
    5b38:	b1 05       	cpc	r27, r1
    5b3a:	b0 f0       	brcs	.+44     	; 0x5b68 <StartThreeWay+0x152>
    5b3c:	e2 ec       	ldi	r30, 0xC2	; 194
    5b3e:	f8 e0       	ldi	r31, 0x08	; 8
    5b40:	84 ad       	ldd	r24, Z+60	; 0x3c
    5b42:	95 ad       	ldd	r25, Z+61	; 0x3d
    5b44:	01 96       	adiw	r24, 0x01	; 1
    5b46:	95 af       	std	Z+61, r25	; 0x3d
    5b48:	84 af       	std	Z+60, r24	; 0x3c
    5b4a:	40 e6       	ldi	r20, 0x60	; 96
    5b4c:	50 e0       	ldi	r21, 0x00	; 0
    5b4e:	60 e0       	ldi	r22, 0x00	; 0
    5b50:	70 e0       	ldi	r23, 0x00	; 0
    5b52:	cf 01       	movw	r24, r30
    5b54:	0e 94 a7 5b 	call	0xb74e	; 0xb74e <eeprom_update_block>
    5b58:	10 92 fd 06 	sts	0x06FD, r1	; 0x8006fd <time_count.3180>
    5b5c:	10 92 fe 06 	sts	0x06FE, r1	; 0x8006fe <time_count.3180+0x1>
    5b60:	10 92 ff 06 	sts	0x06FF, r1	; 0x8006ff <time_count.3180+0x2>
    5b64:	10 92 00 07 	sts	0x0700, r1	; 0x800700 <time_count.3180+0x3>
		}
	}
	
	xTimerChangePeriod( xStartHeatPump_1,period, 100 );
    5b68:	0f 2e       	mov	r0, r31
    5b6a:	f4 e6       	ldi	r31, 0x64	; 100
    5b6c:	cf 2e       	mov	r12, r31
    5b6e:	d1 2c       	mov	r13, r1
    5b70:	e1 2c       	mov	r14, r1
    5b72:	f1 2c       	mov	r15, r1
    5b74:	f0 2d       	mov	r31, r0
    5b76:	00 e0       	ldi	r16, 0x00	; 0
    5b78:	10 e0       	ldi	r17, 0x00	; 0
    5b7a:	a5 01       	movw	r20, r10
    5b7c:	94 01       	movw	r18, r8
    5b7e:	64 e0       	ldi	r22, 0x04	; 4
    5b80:	80 91 36 0a 	lds	r24, 0x0A36	; 0x800a36 <xStartHeatPump_1>
    5b84:	90 91 37 0a 	lds	r25, 0x0A37	; 0x800a37 <xStartHeatPump_1+0x1>
    5b88:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	
}
    5b8c:	1f 91       	pop	r17
    5b8e:	0f 91       	pop	r16
    5b90:	ff 90       	pop	r15
    5b92:	ef 90       	pop	r14
    5b94:	df 90       	pop	r13
    5b96:	cf 90       	pop	r12
    5b98:	bf 90       	pop	r11
    5b9a:	af 90       	pop	r10
    5b9c:	9f 90       	pop	r9
    5b9e:	8f 90       	pop	r8
    5ba0:	08 95       	ret

00005ba2 <HeatPump_Stop>:
		
	}
}
//-------------------------------------------------------------------------
void HeatPump_Stop(TimerHandle_t xTimer)
{
    5ba2:	8f 92       	push	r8
    5ba4:	9f 92       	push	r9
    5ba6:	af 92       	push	r10
    5ba8:	bf 92       	push	r11
    5baa:	cf 92       	push	r12
    5bac:	df 92       	push	r13
    5bae:	ef 92       	push	r14
    5bb0:	ff 92       	push	r15
    5bb2:	0f 93       	push	r16
    5bb4:	1f 93       	push	r17
	
	TickType_t period;
	
	//xSerialxPrintf(&xSerial3Port,"StopHeatPump\r\n");
	
	pxTimerID = pvTimerGetTimerID(xTimer);
    5bb6:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>

	if((*pxTimerID) == uxStopDelayHeatPTimer_1_ID)
    5bba:	fc 01       	movw	r30, r24
    5bbc:	80 81       	ld	r24, Z
    5bbe:	88 30       	cpi	r24, 0x08	; 8
    5bc0:	09 f0       	breq	.+2      	; 0x5bc4 <HeatPump_Stop+0x22>
    5bc2:	76 c0       	rjmp	.+236    	; 0x5cb0 <HeatPump_Stop+0x10e>
	{
		period=(TickType_t)EEpromData.Three_Way_delay;
    5bc4:	20 91 c6 08 	lds	r18, 0x08C6	; 0x8008c6 <EEpromData+0x4>
		period*=1000;
    5bc8:	30 e0       	ldi	r19, 0x00	; 0
    5bca:	a8 ee       	ldi	r26, 0xE8	; 232
    5bcc:	b3 e0       	ldi	r27, 0x03	; 3
    5bce:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    5bd2:	4b 01       	movw	r8, r22
    5bd4:	5c 01       	movw	r10, r24
		
		if(PIN_HEAT_PUMP_1 > 0)//
    5bd6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5bda:	83 ff       	sbrs	r24, 3
    5bdc:	56 c0       	rjmp	.+172    	; 0x5c8a <HeatPump_Stop+0xe8>
		{
			STOP_HEAT_PUMP_1;
    5bde:	e2 e0       	ldi	r30, 0x02	; 2
    5be0:	f1 e0       	ldi	r31, 0x01	; 1
    5be2:	80 81       	ld	r24, Z
    5be4:	87 7f       	andi	r24, 0xF7	; 247
    5be6:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopHeatPump_1\r\n");
    5be8:	8b e8       	ldi	r24, 0x8B	; 139
    5bea:	93 e0       	ldi	r25, 0x03	; 3
    5bec:	9f 93       	push	r25
    5bee:	8f 93       	push	r24
    5bf0:	80 e6       	ldi	r24, 0x60	; 96
    5bf2:	97 e0       	ldi	r25, 0x07	; 7
    5bf4:	9f 93       	push	r25
    5bf6:	8f 93       	push	r24
    5bf8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.heatPOn=0;
    5bfc:	10 92 2e 09 	sts	0x092E, r1	; 0x80092e <Comp_1+0xc>
			time_count_1+= difftime(time(&current_time), timeStartHeatP_1);
    5c00:	c0 90 2e 0a 	lds	r12, 0x0A2E	; 0x800a2e <timeStartHeatP_1>
    5c04:	d0 90 2f 0a 	lds	r13, 0x0A2F	; 0x800a2f <timeStartHeatP_1+0x1>
    5c08:	e0 90 30 0a 	lds	r14, 0x0A30	; 0x800a30 <timeStartHeatP_1+0x2>
    5c0c:	f0 90 31 0a 	lds	r15, 0x0A31	; 0x800a31 <timeStartHeatP_1+0x3>
    5c10:	8d eb       	ldi	r24, 0xBD	; 189
    5c12:	98 e0       	ldi	r25, 0x08	; 8
    5c14:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5c18:	a7 01       	movw	r20, r14
    5c1a:	96 01       	movw	r18, r12
    5c1c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5c20:	c0 90 f1 06 	lds	r12, 0x06F1	; 0x8006f1 <time_count_1.3209>
    5c24:	d0 90 f2 06 	lds	r13, 0x06F2	; 0x8006f2 <time_count_1.3209+0x1>
    5c28:	e0 90 f3 06 	lds	r14, 0x06F3	; 0x8006f3 <time_count_1.3209+0x2>
    5c2c:	f0 90 f4 06 	lds	r15, 0x06F4	; 0x8006f4 <time_count_1.3209+0x3>
    5c30:	dc 01       	movw	r26, r24
    5c32:	cb 01       	movw	r24, r22
    5c34:	8c 0d       	add	r24, r12
    5c36:	9d 1d       	adc	r25, r13
    5c38:	ae 1d       	adc	r26, r14
    5c3a:	bf 1d       	adc	r27, r15
    5c3c:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <time_count_1.3209>
    5c40:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <time_count_1.3209+0x1>
    5c44:	a0 93 f3 06 	sts	0x06F3, r26	; 0x8006f3 <time_count_1.3209+0x2>
    5c48:	b0 93 f4 06 	sts	0x06F4, r27	; 0x8006f4 <time_count_1.3209+0x3>
			if(time_count_1>ONE_HOUR){EEpromData.time_pump_hiter_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    5c4c:	0f 90       	pop	r0
    5c4e:	0f 90       	pop	r0
    5c50:	0f 90       	pop	r0
    5c52:	0f 90       	pop	r0
    5c54:	81 31       	cpi	r24, 0x11	; 17
    5c56:	9e 40       	sbci	r25, 0x0E	; 14
    5c58:	a1 05       	cpc	r26, r1
    5c5a:	b1 05       	cpc	r27, r1
    5c5c:	b0 f0       	brcs	.+44     	; 0x5c8a <HeatPump_Stop+0xe8>
    5c5e:	e2 ec       	ldi	r30, 0xC2	; 194
    5c60:	f8 e0       	ldi	r31, 0x08	; 8
    5c62:	84 a9       	ldd	r24, Z+52	; 0x34
    5c64:	95 a9       	ldd	r25, Z+53	; 0x35
    5c66:	01 96       	adiw	r24, 0x01	; 1
    5c68:	95 ab       	std	Z+53, r25	; 0x35
    5c6a:	84 ab       	std	Z+52, r24	; 0x34
    5c6c:	40 e6       	ldi	r20, 0x60	; 96
    5c6e:	50 e0       	ldi	r21, 0x00	; 0
    5c70:	60 e0       	ldi	r22, 0x00	; 0
    5c72:	70 e0       	ldi	r23, 0x00	; 0
    5c74:	cf 01       	movw	r24, r30
    5c76:	0e 94 a7 5b 	call	0xb74e	; 0xb74e <eeprom_update_block>
    5c7a:	10 92 f1 06 	sts	0x06F1, r1	; 0x8006f1 <time_count_1.3209>
    5c7e:	10 92 f2 06 	sts	0x06F2, r1	; 0x8006f2 <time_count_1.3209+0x1>
    5c82:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <time_count_1.3209+0x2>
    5c86:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <time_count_1.3209+0x3>
			
		}
		xTimerChangePeriod( xStopThreeWay,period, 100 );
    5c8a:	0f 2e       	mov	r0, r31
    5c8c:	f4 e6       	ldi	r31, 0x64	; 100
    5c8e:	cf 2e       	mov	r12, r31
    5c90:	d1 2c       	mov	r13, r1
    5c92:	e1 2c       	mov	r14, r1
    5c94:	f1 2c       	mov	r15, r1
    5c96:	f0 2d       	mov	r31, r0
    5c98:	00 e0       	ldi	r16, 0x00	; 0
    5c9a:	10 e0       	ldi	r17, 0x00	; 0
    5c9c:	a5 01       	movw	r20, r10
    5c9e:	94 01       	movw	r18, r8
    5ca0:	64 e0       	ldi	r22, 0x04	; 4
    5ca2:	80 91 94 09 	lds	r24, 0x0994	; 0x800994 <xStopThreeWay>
    5ca6:	90 91 95 09 	lds	r25, 0x0995	; 0x800995 <xStopThreeWay+0x1>
    5caa:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    5cae:	7b c0       	rjmp	.+246    	; 0x5da6 <HeatPump_Stop+0x204>
		//xTimerStart(xStopThreeWay, 0);
	}

	else if((*pxTimerID) == uxStopDelayHeatPTimer_2_ID)
    5cb0:	85 31       	cpi	r24, 0x15	; 21
    5cb2:	09 f0       	breq	.+2      	; 0x5cb6 <HeatPump_Stop+0x114>
    5cb4:	78 c0       	rjmp	.+240    	; 0x5da6 <HeatPump_Stop+0x204>
	{
		period=(TickType_t)EEpromData.Revers_Valve_delay;
		period*=1000;
		xSerialxPrintf(&xSerial3Port,"StopHeatPump_2\r\n");
    5cb6:	8c e9       	ldi	r24, 0x9C	; 156
    5cb8:	93 e0       	ldi	r25, 0x03	; 3
    5cba:	9f 93       	push	r25
    5cbc:	8f 93       	push	r24
    5cbe:	80 e6       	ldi	r24, 0x60	; 96
    5cc0:	97 e0       	ldi	r25, 0x07	; 7
    5cc2:	9f 93       	push	r25
    5cc4:	8f 93       	push	r24
    5cc6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_HEAT_PUMP_2 > 0)//
    5cca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5cce:	0f 90       	pop	r0
    5cd0:	0f 90       	pop	r0
    5cd2:	0f 90       	pop	r0
    5cd4:	0f 90       	pop	r0
    5cd6:	84 ff       	sbrs	r24, 4
    5cd8:	49 c0       	rjmp	.+146    	; 0x5d6c <HeatPump_Stop+0x1ca>
		{
			STOP_HEAT_PUMP_2;
    5cda:	e2 e0       	ldi	r30, 0x02	; 2
    5cdc:	f1 e0       	ldi	r31, 0x01	; 1
    5cde:	80 81       	ld	r24, Z
    5ce0:	8f 7e       	andi	r24, 0xEF	; 239
    5ce2:	80 83       	st	Z, r24
			
			
			Comp_2.heatPOn=0;
    5ce4:	10 92 b4 09 	sts	0x09B4, r1	; 0x8009b4 <Comp_2+0xc>
			time_count_2+= difftime(time(&current_time), timeStartHeatP_2);
    5ce8:	c0 90 42 0a 	lds	r12, 0x0A42	; 0x800a42 <timeStartHeatP_2>
    5cec:	d0 90 43 0a 	lds	r13, 0x0A43	; 0x800a43 <timeStartHeatP_2+0x1>
    5cf0:	e0 90 44 0a 	lds	r14, 0x0A44	; 0x800a44 <timeStartHeatP_2+0x2>
    5cf4:	f0 90 45 0a 	lds	r15, 0x0A45	; 0x800a45 <timeStartHeatP_2+0x3>
    5cf8:	8d eb       	ldi	r24, 0xBD	; 189
    5cfa:	98 e0       	ldi	r25, 0x08	; 8
    5cfc:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5d00:	a7 01       	movw	r20, r14
    5d02:	96 01       	movw	r18, r12
    5d04:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5d08:	c0 90 ed 06 	lds	r12, 0x06ED	; 0x8006ed <time_count_2.3210>
    5d0c:	d0 90 ee 06 	lds	r13, 0x06EE	; 0x8006ee <time_count_2.3210+0x1>
    5d10:	e0 90 ef 06 	lds	r14, 0x06EF	; 0x8006ef <time_count_2.3210+0x2>
    5d14:	f0 90 f0 06 	lds	r15, 0x06F0	; 0x8006f0 <time_count_2.3210+0x3>
    5d18:	dc 01       	movw	r26, r24
    5d1a:	cb 01       	movw	r24, r22
    5d1c:	8c 0d       	add	r24, r12
    5d1e:	9d 1d       	adc	r25, r13
    5d20:	ae 1d       	adc	r26, r14
    5d22:	bf 1d       	adc	r27, r15
    5d24:	80 93 ed 06 	sts	0x06ED, r24	; 0x8006ed <time_count_2.3210>
    5d28:	90 93 ee 06 	sts	0x06EE, r25	; 0x8006ee <time_count_2.3210+0x1>
    5d2c:	a0 93 ef 06 	sts	0x06EF, r26	; 0x8006ef <time_count_2.3210+0x2>
    5d30:	b0 93 f0 06 	sts	0x06F0, r27	; 0x8006f0 <time_count_2.3210+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_pump_hiter_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    5d34:	81 31       	cpi	r24, 0x11	; 17
    5d36:	9e 40       	sbci	r25, 0x0E	; 14
    5d38:	a1 05       	cpc	r26, r1
    5d3a:	b1 05       	cpc	r27, r1
    5d3c:	b8 f0       	brcs	.+46     	; 0x5d6c <HeatPump_Stop+0x1ca>
    5d3e:	ec e0       	ldi	r30, 0x0C	; 12
    5d40:	f9 e0       	ldi	r31, 0x09	; 9
    5d42:	80 81       	ld	r24, Z
    5d44:	91 81       	ldd	r25, Z+1	; 0x01
    5d46:	01 96       	adiw	r24, 0x01	; 1
    5d48:	91 83       	std	Z+1, r25	; 0x01
    5d4a:	80 83       	st	Z, r24
    5d4c:	40 e6       	ldi	r20, 0x60	; 96
    5d4e:	50 e0       	ldi	r21, 0x00	; 0
    5d50:	60 e0       	ldi	r22, 0x00	; 0
    5d52:	70 e0       	ldi	r23, 0x00	; 0
    5d54:	82 ec       	ldi	r24, 0xC2	; 194
    5d56:	98 e0       	ldi	r25, 0x08	; 8
    5d58:	0e 94 a7 5b 	call	0xb74e	; 0xb74e <eeprom_update_block>
    5d5c:	10 92 ed 06 	sts	0x06ED, r1	; 0x8006ed <time_count_2.3210>
    5d60:	10 92 ee 06 	sts	0x06EE, r1	; 0x8006ee <time_count_2.3210+0x1>
    5d64:	10 92 ef 06 	sts	0x06EF, r1	; 0x8006ef <time_count_2.3210+0x2>
    5d68:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <time_count_2.3210+0x3>
			
		}
		xTimerChangePeriod( xStopRevValve_2,(EEpromData.Revers_Valve_delay*1000) / portTICK_PERIOD_MS, 100 );
    5d6c:	40 91 c4 08 	lds	r20, 0x08C4	; 0x8008c4 <EEpromData+0x2>
    5d70:	88 ee       	ldi	r24, 0xE8	; 232
    5d72:	93 e0       	ldi	r25, 0x03	; 3
    5d74:	48 9f       	mul	r20, r24
    5d76:	90 01       	movw	r18, r0
    5d78:	49 9f       	mul	r20, r25
    5d7a:	30 0d       	add	r19, r0
    5d7c:	11 24       	eor	r1, r1
    5d7e:	03 2e       	mov	r0, r19
    5d80:	00 0c       	add	r0, r0
    5d82:	44 0b       	sbc	r20, r20
    5d84:	55 0b       	sbc	r21, r21
    5d86:	0f 2e       	mov	r0, r31
    5d88:	f4 e6       	ldi	r31, 0x64	; 100
    5d8a:	cf 2e       	mov	r12, r31
    5d8c:	d1 2c       	mov	r13, r1
    5d8e:	e1 2c       	mov	r14, r1
    5d90:	f1 2c       	mov	r15, r1
    5d92:	f0 2d       	mov	r31, r0
    5d94:	00 e0       	ldi	r16, 0x00	; 0
    5d96:	10 e0       	ldi	r17, 0x00	; 0
    5d98:	64 e0       	ldi	r22, 0x04	; 4
    5d9a:	80 91 b7 08 	lds	r24, 0x08B7	; 0x8008b7 <xStopRevValve_2>
    5d9e:	90 91 b8 08 	lds	r25, 0x08B8	; 0x8008b8 <xStopRevValve_2+0x1>
    5da2:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		
	}
}
    5da6:	1f 91       	pop	r17
    5da8:	0f 91       	pop	r16
    5daa:	ff 90       	pop	r15
    5dac:	ef 90       	pop	r14
    5dae:	df 90       	pop	r13
    5db0:	cf 90       	pop	r12
    5db2:	bf 90       	pop	r11
    5db4:	af 90       	pop	r10
    5db6:	9f 90       	pop	r9
    5db8:	8f 90       	pop	r8
    5dba:	08 95       	ret

00005dbc <ThreeWay_Stop>:
//-------------------------------------------------------------------------
void ThreeWay_Stop()
{
    5dbc:	8f 92       	push	r8
    5dbe:	9f 92       	push	r9
    5dc0:	af 92       	push	r10
    5dc2:	bf 92       	push	r11
    5dc4:	cf 92       	push	r12
    5dc6:	df 92       	push	r13
    5dc8:	ef 92       	push	r14
    5dca:	ff 92       	push	r15
    5dcc:	0f 93       	push	r16
    5dce:	1f 93       	push	r17
	static time_t time_count;
	TickType_t period;
	period=(TickType_t)EEpromData.Revers_Valve_delay;
    5dd0:	20 91 c4 08 	lds	r18, 0x08C4	; 0x8008c4 <EEpromData+0x2>
	period*=1000;
    5dd4:	30 e0       	ldi	r19, 0x00	; 0
    5dd6:	a8 ee       	ldi	r26, 0xE8	; 232
    5dd8:	b3 e0       	ldi	r27, 0x03	; 3
    5dda:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    5dde:	4b 01       	movw	r8, r22
    5de0:	5c 01       	movw	r10, r24
	
	xSerialxPrintf(&xSerial3Port,"ThreeWay_Stop\r\n");
    5de2:	8d ea       	ldi	r24, 0xAD	; 173
    5de4:	93 e0       	ldi	r25, 0x03	; 3
    5de6:	9f 93       	push	r25
    5de8:	8f 93       	push	r24
    5dea:	80 e6       	ldi	r24, 0x60	; 96
    5dec:	97 e0       	ldi	r25, 0x07	; 7
    5dee:	9f 93       	push	r25
    5df0:	8f 93       	push	r24
    5df2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
	if(PIN_THWAY_VALVE > 0)
    5df6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    5dfa:	0f 90       	pop	r0
    5dfc:	0f 90       	pop	r0
    5dfe:	0f 90       	pop	r0
    5e00:	0f 90       	pop	r0
    5e02:	88 23       	and	r24, r24
    5e04:	0c f0       	brlt	.+2      	; 0x5e08 <ThreeWay_Stop+0x4c>
    5e06:	48 c0       	rjmp	.+144    	; 0x5e98 <ThreeWay_Stop+0xdc>
	{
		STOP_THWAY_VALVE;
    5e08:	e2 e0       	ldi	r30, 0x02	; 2
    5e0a:	f1 e0       	ldi	r31, 0x01	; 1
    5e0c:	80 81       	ld	r24, Z
    5e0e:	8f 77       	andi	r24, 0x7F	; 127
    5e10:	80 83       	st	Z, r24
		//xSerialxPrintf(&xSerial3Port,"ThreeWay_Stop\r\n");
		Comp_1.threeWOn=0;
    5e12:	10 92 2f 09 	sts	0x092F, r1	; 0x80092f <Comp_1+0xd>
		time_count+= difftime(time(&current_time), timeStartThreeW);
    5e16:	c0 90 46 0a 	lds	r12, 0x0A46	; 0x800a46 <timeStartThreeW>
    5e1a:	d0 90 47 0a 	lds	r13, 0x0A47	; 0x800a47 <timeStartThreeW+0x1>
    5e1e:	e0 90 48 0a 	lds	r14, 0x0A48	; 0x800a48 <timeStartThreeW+0x2>
    5e22:	f0 90 49 0a 	lds	r15, 0x0A49	; 0x800a49 <timeStartThreeW+0x3>
    5e26:	8d eb       	ldi	r24, 0xBD	; 189
    5e28:	98 e0       	ldi	r25, 0x08	; 8
    5e2a:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5e2e:	a7 01       	movw	r20, r14
    5e30:	96 01       	movw	r18, r12
    5e32:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5e36:	c0 90 e9 06 	lds	r12, 0x06E9	; 0x8006e9 <time_count.3215>
    5e3a:	d0 90 ea 06 	lds	r13, 0x06EA	; 0x8006ea <time_count.3215+0x1>
    5e3e:	e0 90 eb 06 	lds	r14, 0x06EB	; 0x8006eb <time_count.3215+0x2>
    5e42:	f0 90 ec 06 	lds	r15, 0x06EC	; 0x8006ec <time_count.3215+0x3>
    5e46:	dc 01       	movw	r26, r24
    5e48:	cb 01       	movw	r24, r22
    5e4a:	8c 0d       	add	r24, r12
    5e4c:	9d 1d       	adc	r25, r13
    5e4e:	ae 1d       	adc	r26, r14
    5e50:	bf 1d       	adc	r27, r15
    5e52:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <time_count.3215>
    5e56:	90 93 ea 06 	sts	0x06EA, r25	; 0x8006ea <time_count.3215+0x1>
    5e5a:	a0 93 eb 06 	sts	0x06EB, r26	; 0x8006eb <time_count.3215+0x2>
    5e5e:	b0 93 ec 06 	sts	0x06EC, r27	; 0x8006ec <time_count.3215+0x3>
		if(time_count>ONE_HOUR){EEpromData.time_threeway++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count=0;}
    5e62:	81 31       	cpi	r24, 0x11	; 17
    5e64:	9e 40       	sbci	r25, 0x0E	; 14
    5e66:	a1 05       	cpc	r26, r1
    5e68:	b1 05       	cpc	r27, r1
    5e6a:	b0 f0       	brcs	.+44     	; 0x5e98 <ThreeWay_Stop+0xdc>
    5e6c:	e2 ec       	ldi	r30, 0xC2	; 194
    5e6e:	f8 e0       	ldi	r31, 0x08	; 8
    5e70:	84 ad       	ldd	r24, Z+60	; 0x3c
    5e72:	95 ad       	ldd	r25, Z+61	; 0x3d
    5e74:	01 96       	adiw	r24, 0x01	; 1
    5e76:	95 af       	std	Z+61, r25	; 0x3d
    5e78:	84 af       	std	Z+60, r24	; 0x3c
    5e7a:	40 e6       	ldi	r20, 0x60	; 96
    5e7c:	50 e0       	ldi	r21, 0x00	; 0
    5e7e:	60 e0       	ldi	r22, 0x00	; 0
    5e80:	70 e0       	ldi	r23, 0x00	; 0
    5e82:	cf 01       	movw	r24, r30
    5e84:	0e 94 a7 5b 	call	0xb74e	; 0xb74e <eeprom_update_block>
    5e88:	10 92 e9 06 	sts	0x06E9, r1	; 0x8006e9 <time_count.3215>
    5e8c:	10 92 ea 06 	sts	0x06EA, r1	; 0x8006ea <time_count.3215+0x1>
    5e90:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <time_count.3215+0x2>
    5e94:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <time_count.3215+0x3>
		
	} else{ }//xSerialxPrintf(&xSerial3Port,"ThreeWay_isRun\r\n");
	xTimerChangePeriod( xStopRevValve_1,period, 100 );
    5e98:	0f 2e       	mov	r0, r31
    5e9a:	f4 e6       	ldi	r31, 0x64	; 100
    5e9c:	cf 2e       	mov	r12, r31
    5e9e:	d1 2c       	mov	r13, r1
    5ea0:	e1 2c       	mov	r14, r1
    5ea2:	f1 2c       	mov	r15, r1
    5ea4:	f0 2d       	mov	r31, r0
    5ea6:	00 e0       	ldi	r16, 0x00	; 0
    5ea8:	10 e0       	ldi	r17, 0x00	; 0
    5eaa:	a5 01       	movw	r20, r10
    5eac:	94 01       	movw	r18, r8
    5eae:	64 e0       	ldi	r22, 0x04	; 4
    5eb0:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <xStopRevValve_1>
    5eb4:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <xStopRevValve_1+0x1>
    5eb8:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	
}
    5ebc:	1f 91       	pop	r17
    5ebe:	0f 91       	pop	r16
    5ec0:	ff 90       	pop	r15
    5ec2:	ef 90       	pop	r14
    5ec4:	df 90       	pop	r13
    5ec6:	cf 90       	pop	r12
    5ec8:	bf 90       	pop	r11
    5eca:	af 90       	pop	r10
    5ecc:	9f 90       	pop	r9
    5ece:	8f 90       	pop	r8
    5ed0:	08 95       	ret

00005ed2 <Revers_Stop>:

//-------------------------------------------------------------------------
void Revers_Stop(TimerHandle_t xTimer)
{
    5ed2:	8f 92       	push	r8
    5ed4:	9f 92       	push	r9
    5ed6:	af 92       	push	r10
    5ed8:	bf 92       	push	r11
    5eda:	cf 92       	push	r12
    5edc:	df 92       	push	r13
    5ede:	ef 92       	push	r14
    5ee0:	ff 92       	push	r15
    5ee2:	0f 93       	push	r16
    5ee4:	1f 93       	push	r17
    5ee6:	ac 01       	movw	r20, r24
	static time_t time_count_1;
	static time_t time_count_2;
	TickType_t period;
	period=(TickType_t)EEpromData.Source_Pump_delay;
    5ee8:	20 91 c3 08 	lds	r18, 0x08C3	; 0x8008c3 <EEpromData+0x1>
	period*=1000;
    5eec:	30 e0       	ldi	r19, 0x00	; 0
    5eee:	a8 ee       	ldi	r26, 0xE8	; 232
    5ef0:	b3 e0       	ldi	r27, 0x03	; 3
    5ef2:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    5ef6:	4b 01       	movw	r8, r22
    5ef8:	5c 01       	movw	r10, r24

	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    5efa:	ca 01       	movw	r24, r20
    5efc:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
   // xSerialxPrintf(&xSerial3Port,"StopRevValve\r\n");

	if((*pxTimerID) == uxStopDelayRevVTimer_1_ID)
    5f00:	fc 01       	movw	r30, r24
    5f02:	80 81       	ld	r24, Z
    5f04:	8a 30       	cpi	r24, 0x0A	; 10
    5f06:	09 f0       	breq	.+2      	; 0x5f0a <Revers_Stop+0x38>
    5f08:	67 c0       	rjmp	.+206    	; 0x5fd8 <Revers_Stop+0x106>
	{
		
		
		if(PIN_REV_VALVE_1 > 0)//
    5f0a:	94 9b       	sbis	0x12, 4	; 18
    5f0c:	52 c0       	rjmp	.+164    	; 0x5fb2 <Revers_Stop+0xe0>
		{
			STOP_REV_VALVE_1;
    5f0e:	a4 98       	cbi	0x14, 4	; 20
			xSerialxPrintf(&xSerial3Port,"StopRevValve_1\r\n");
    5f10:	88 e2       	ldi	r24, 0x28	; 40
    5f12:	93 e0       	ldi	r25, 0x03	; 3
    5f14:	9f 93       	push	r25
    5f16:	8f 93       	push	r24
    5f18:	80 e6       	ldi	r24, 0x60	; 96
    5f1a:	97 e0       	ldi	r25, 0x07	; 7
    5f1c:	9f 93       	push	r25
    5f1e:	8f 93       	push	r24
    5f20:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.revVOn=0;
    5f24:	10 92 30 09 	sts	0x0930, r1	; 0x800930 <Comp_1+0xe>
			time_count_1+= difftime(time(&current_time), timeStartRevV_1);
    5f28:	c0 90 51 0a 	lds	r12, 0x0A51	; 0x800a51 <timeStartRevV_1>
    5f2c:	d0 90 52 0a 	lds	r13, 0x0A52	; 0x800a52 <timeStartRevV_1+0x1>
    5f30:	e0 90 53 0a 	lds	r14, 0x0A53	; 0x800a53 <timeStartRevV_1+0x2>
    5f34:	f0 90 54 0a 	lds	r15, 0x0A54	; 0x800a54 <timeStartRevV_1+0x3>
    5f38:	8d eb       	ldi	r24, 0xBD	; 189
    5f3a:	98 e0       	ldi	r25, 0x08	; 8
    5f3c:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    5f40:	a7 01       	movw	r20, r14
    5f42:	96 01       	movw	r18, r12
    5f44:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    5f48:	c0 90 e5 06 	lds	r12, 0x06E5	; 0x8006e5 <time_count_1.3220>
    5f4c:	d0 90 e6 06 	lds	r13, 0x06E6	; 0x8006e6 <time_count_1.3220+0x1>
    5f50:	e0 90 e7 06 	lds	r14, 0x06E7	; 0x8006e7 <time_count_1.3220+0x2>
    5f54:	f0 90 e8 06 	lds	r15, 0x06E8	; 0x8006e8 <time_count_1.3220+0x3>
    5f58:	dc 01       	movw	r26, r24
    5f5a:	cb 01       	movw	r24, r22
    5f5c:	8c 0d       	add	r24, r12
    5f5e:	9d 1d       	adc	r25, r13
    5f60:	ae 1d       	adc	r26, r14
    5f62:	bf 1d       	adc	r27, r15
    5f64:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <time_count_1.3220>
    5f68:	90 93 e6 06 	sts	0x06E6, r25	; 0x8006e6 <time_count_1.3220+0x1>
    5f6c:	a0 93 e7 06 	sts	0x06E7, r26	; 0x8006e7 <time_count_1.3220+0x2>
    5f70:	b0 93 e8 06 	sts	0x06E8, r27	; 0x8006e8 <time_count_1.3220+0x3>
			if(time_count_1>ONE_HOUR){EEpromData.time_revers_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    5f74:	0f 90       	pop	r0
    5f76:	0f 90       	pop	r0
    5f78:	0f 90       	pop	r0
    5f7a:	0f 90       	pop	r0
    5f7c:	81 31       	cpi	r24, 0x11	; 17
    5f7e:	9e 40       	sbci	r25, 0x0E	; 14
    5f80:	a1 05       	cpc	r26, r1
    5f82:	b1 05       	cpc	r27, r1
    5f84:	b0 f0       	brcs	.+44     	; 0x5fb2 <Revers_Stop+0xe0>
    5f86:	e2 ec       	ldi	r30, 0xC2	; 194
    5f88:	f8 e0       	ldi	r31, 0x08	; 8
    5f8a:	80 ad       	ldd	r24, Z+56	; 0x38
    5f8c:	91 ad       	ldd	r25, Z+57	; 0x39
    5f8e:	01 96       	adiw	r24, 0x01	; 1
    5f90:	91 af       	std	Z+57, r25	; 0x39
    5f92:	80 af       	std	Z+56, r24	; 0x38
    5f94:	40 e6       	ldi	r20, 0x60	; 96
    5f96:	50 e0       	ldi	r21, 0x00	; 0
    5f98:	60 e0       	ldi	r22, 0x00	; 0
    5f9a:	70 e0       	ldi	r23, 0x00	; 0
    5f9c:	cf 01       	movw	r24, r30
    5f9e:	0e 94 a7 5b 	call	0xb74e	; 0xb74e <eeprom_update_block>
    5fa2:	10 92 e5 06 	sts	0x06E5, r1	; 0x8006e5 <time_count_1.3220>
    5fa6:	10 92 e6 06 	sts	0x06E6, r1	; 0x8006e6 <time_count_1.3220+0x1>
    5faa:	10 92 e7 06 	sts	0x06E7, r1	; 0x8006e7 <time_count_1.3220+0x2>
    5fae:	10 92 e8 06 	sts	0x06E8, r1	; 0x8006e8 <time_count_1.3220+0x3>

		}
		xTimerChangePeriod( xStopSource_1,period, 100 );
    5fb2:	0f 2e       	mov	r0, r31
    5fb4:	f4 e6       	ldi	r31, 0x64	; 100
    5fb6:	cf 2e       	mov	r12, r31
    5fb8:	d1 2c       	mov	r13, r1
    5fba:	e1 2c       	mov	r14, r1
    5fbc:	f1 2c       	mov	r15, r1
    5fbe:	f0 2d       	mov	r31, r0
    5fc0:	00 e0       	ldi	r16, 0x00	; 0
    5fc2:	10 e0       	ldi	r17, 0x00	; 0
    5fc4:	a5 01       	movw	r20, r10
    5fc6:	94 01       	movw	r18, r8
    5fc8:	64 e0       	ldi	r22, 0x04	; 4
    5fca:	80 91 b9 08 	lds	r24, 0x08B9	; 0x8008b9 <xStopSource_1>
    5fce:	90 91 ba 08 	lds	r25, 0x08BA	; 0x8008ba <xStopSource_1+0x1>
    5fd2:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    5fd6:	6a c0       	rjmp	.+212    	; 0x60ac <Revers_Stop+0x1da>
		//xTimerStart(xStopSource_1, 0);
	}
	
	else if((*pxTimerID) == uxStopDelayRevVTimer_2_ID)
    5fd8:	87 31       	cpi	r24, 0x17	; 23
    5fda:	09 f0       	breq	.+2      	; 0x5fde <Revers_Stop+0x10c>
    5fdc:	67 c0       	rjmp	.+206    	; 0x60ac <Revers_Stop+0x1da>
	{
		
		if(PIN_REV_VALVE_2 > 0)//
    5fde:	93 9b       	sbis	0x12, 3	; 18
    5fe0:	53 c0       	rjmp	.+166    	; 0x6088 <Revers_Stop+0x1b6>
		{   
			xSerialxPrintf(&xSerial3Port,"StopRevValve_2\r\n");
    5fe2:	8a e4       	ldi	r24, 0x4A	; 74
    5fe4:	93 e0       	ldi	r25, 0x03	; 3
    5fe6:	9f 93       	push	r25
    5fe8:	8f 93       	push	r24
    5fea:	80 e6       	ldi	r24, 0x60	; 96
    5fec:	97 e0       	ldi	r25, 0x07	; 7
    5fee:	9f 93       	push	r25
    5ff0:	8f 93       	push	r24
    5ff2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			STOP_REV_VALVE_2;
    5ff6:	a3 98       	cbi	0x14, 3	; 20
			
			
			Comp_2.revVOn=0;
    5ff8:	10 92 b6 09 	sts	0x09B6, r1	; 0x8009b6 <Comp_2+0xe>
			time_count_2+= difftime(time(&current_time), timeStartRevV_2);
    5ffc:	c0 90 6c 0a 	lds	r12, 0x0A6C	; 0x800a6c <timeStartRevV_2>
    6000:	d0 90 6d 0a 	lds	r13, 0x0A6D	; 0x800a6d <timeStartRevV_2+0x1>
    6004:	e0 90 6e 0a 	lds	r14, 0x0A6E	; 0x800a6e <timeStartRevV_2+0x2>
    6008:	f0 90 6f 0a 	lds	r15, 0x0A6F	; 0x800a6f <timeStartRevV_2+0x3>
    600c:	8d eb       	ldi	r24, 0xBD	; 189
    600e:	98 e0       	ldi	r25, 0x08	; 8
    6010:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6014:	a7 01       	movw	r20, r14
    6016:	96 01       	movw	r18, r12
    6018:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    601c:	c0 90 e1 06 	lds	r12, 0x06E1	; 0x8006e1 <time_count_2.3221>
    6020:	d0 90 e2 06 	lds	r13, 0x06E2	; 0x8006e2 <time_count_2.3221+0x1>
    6024:	e0 90 e3 06 	lds	r14, 0x06E3	; 0x8006e3 <time_count_2.3221+0x2>
    6028:	f0 90 e4 06 	lds	r15, 0x06E4	; 0x8006e4 <time_count_2.3221+0x3>
    602c:	dc 01       	movw	r26, r24
    602e:	cb 01       	movw	r24, r22
    6030:	8c 0d       	add	r24, r12
    6032:	9d 1d       	adc	r25, r13
    6034:	ae 1d       	adc	r26, r14
    6036:	bf 1d       	adc	r27, r15
    6038:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <time_count_2.3221>
    603c:	90 93 e2 06 	sts	0x06E2, r25	; 0x8006e2 <time_count_2.3221+0x1>
    6040:	a0 93 e3 06 	sts	0x06E3, r26	; 0x8006e3 <time_count_2.3221+0x2>
    6044:	b0 93 e4 06 	sts	0x06E4, r27	; 0x8006e4 <time_count_2.3221+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_revers_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    6048:	0f 90       	pop	r0
    604a:	0f 90       	pop	r0
    604c:	0f 90       	pop	r0
    604e:	0f 90       	pop	r0
    6050:	81 31       	cpi	r24, 0x11	; 17
    6052:	9e 40       	sbci	r25, 0x0E	; 14
    6054:	a1 05       	cpc	r26, r1
    6056:	b1 05       	cpc	r27, r1
    6058:	b8 f0       	brcs	.+46     	; 0x6088 <Revers_Stop+0x1b6>
    605a:	e0 e1       	ldi	r30, 0x10	; 16
    605c:	f9 e0       	ldi	r31, 0x09	; 9
    605e:	80 81       	ld	r24, Z
    6060:	91 81       	ldd	r25, Z+1	; 0x01
    6062:	01 96       	adiw	r24, 0x01	; 1
    6064:	91 83       	std	Z+1, r25	; 0x01
    6066:	80 83       	st	Z, r24
    6068:	40 e6       	ldi	r20, 0x60	; 96
    606a:	50 e0       	ldi	r21, 0x00	; 0
    606c:	60 e0       	ldi	r22, 0x00	; 0
    606e:	70 e0       	ldi	r23, 0x00	; 0
    6070:	82 ec       	ldi	r24, 0xC2	; 194
    6072:	98 e0       	ldi	r25, 0x08	; 8
    6074:	0e 94 a7 5b 	call	0xb74e	; 0xb74e <eeprom_update_block>
    6078:	10 92 e1 06 	sts	0x06E1, r1	; 0x8006e1 <time_count_2.3221>
    607c:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <time_count_2.3221+0x1>
    6080:	10 92 e3 06 	sts	0x06E3, r1	; 0x8006e3 <time_count_2.3221+0x2>
    6084:	10 92 e4 06 	sts	0x06E4, r1	; 0x8006e4 <time_count_2.3221+0x3>

		}
		xTimerChangePeriod( xStopSource_2,period, 100 );
    6088:	0f 2e       	mov	r0, r31
    608a:	f4 e6       	ldi	r31, 0x64	; 100
    608c:	cf 2e       	mov	r12, r31
    608e:	d1 2c       	mov	r13, r1
    6090:	e1 2c       	mov	r14, r1
    6092:	f1 2c       	mov	r15, r1
    6094:	f0 2d       	mov	r31, r0
    6096:	00 e0       	ldi	r16, 0x00	; 0
    6098:	10 e0       	ldi	r17, 0x00	; 0
    609a:	a5 01       	movw	r20, r10
    609c:	94 01       	movw	r18, r8
    609e:	64 e0       	ldi	r22, 0x04	; 4
    60a0:	80 91 18 0a 	lds	r24, 0x0A18	; 0x800a18 <xStopSource_2>
    60a4:	90 91 19 0a 	lds	r25, 0x0A19	; 0x800a19 <xStopSource_2+0x1>
    60a8:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		//xTimerStart(xStopSource_2, 0);
	}
	
	
}
    60ac:	1f 91       	pop	r17
    60ae:	0f 91       	pop	r16
    60b0:	ff 90       	pop	r15
    60b2:	ef 90       	pop	r14
    60b4:	df 90       	pop	r13
    60b6:	cf 90       	pop	r12
    60b8:	bf 90       	pop	r11
    60ba:	af 90       	pop	r10
    60bc:	9f 90       	pop	r9
    60be:	8f 90       	pop	r8
    60c0:	08 95       	ret

000060c2 <SorcePump_Stop>:
//---------------------------------------------------------------------------
void SorcePump_Stop(TimerHandle_t xTimer)
{
    60c2:	cf 92       	push	r12
    60c4:	df 92       	push	r13
    60c6:	ef 92       	push	r14
    60c8:	ff 92       	push	r15
	static time_t time_count_1;
	static time_t time_count_2;
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    60ca:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
	
     // xSerialxPrintf(&xSerial3Port,"StopSource\r\n");
    
	 	
	 
	if((*pxTimerID) == uxStopDelaySourcePTimer_1_ID)
    60ce:	fc 01       	movw	r30, r24
    60d0:	80 81       	ld	r24, Z
    60d2:	89 30       	cpi	r24, 0x09	; 9
    60d4:	09 f0       	breq	.+2      	; 0x60d8 <SorcePump_Stop+0x16>
    60d6:	5e c0       	rjmp	.+188    	; 0x6194 <SorcePump_Stop+0xd2>
	{
		Comp_1.switchToMode=false ;
    60d8:	10 92 22 09 	sts	0x0922, r1	; 0x800922 <Comp_1>
		
		
		if(PIN_SOURCE_PUMP_1 > 0)//
    60dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    60e0:	81 ff       	sbrs	r24, 1
    60e2:	b8 c0       	rjmp	.+368    	; 0x6254 <SorcePump_Stop+0x192>
		{
			STOP_SOURCE_PUMP_1;
    60e4:	e2 e0       	ldi	r30, 0x02	; 2
    60e6:	f1 e0       	ldi	r31, 0x01	; 1
    60e8:	80 81       	ld	r24, Z
    60ea:	8d 7f       	andi	r24, 0xFD	; 253
    60ec:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopSource_1\r\n");
    60ee:	8d eb       	ldi	r24, 0xBD	; 189
    60f0:	93 e0       	ldi	r25, 0x03	; 3
    60f2:	9f 93       	push	r25
    60f4:	8f 93       	push	r24
    60f6:	80 e6       	ldi	r24, 0x60	; 96
    60f8:	97 e0       	ldi	r25, 0x07	; 7
    60fa:	9f 93       	push	r25
    60fc:	8f 93       	push	r24
    60fe:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			Comp_1.srcPOn=0;
    6102:	10 92 31 09 	sts	0x0931, r1	; 0x800931 <Comp_1+0xf>
			
			
			time_count_1+= difftime(time(&current_time), timeStartSrcP_1);
    6106:	c0 90 9a 09 	lds	r12, 0x099A	; 0x80099a <timeStartSrcP_1>
    610a:	d0 90 9b 09 	lds	r13, 0x099B	; 0x80099b <timeStartSrcP_1+0x1>
    610e:	e0 90 9c 09 	lds	r14, 0x099C	; 0x80099c <timeStartSrcP_1+0x2>
    6112:	f0 90 9d 09 	lds	r15, 0x099D	; 0x80099d <timeStartSrcP_1+0x3>
    6116:	8d eb       	ldi	r24, 0xBD	; 189
    6118:	98 e0       	ldi	r25, 0x08	; 8
    611a:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    611e:	a7 01       	movw	r20, r14
    6120:	96 01       	movw	r18, r12
    6122:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    6126:	c0 90 dd 06 	lds	r12, 0x06DD	; 0x8006dd <time_count_1.3227>
    612a:	d0 90 de 06 	lds	r13, 0x06DE	; 0x8006de <time_count_1.3227+0x1>
    612e:	e0 90 df 06 	lds	r14, 0x06DF	; 0x8006df <time_count_1.3227+0x2>
    6132:	f0 90 e0 06 	lds	r15, 0x06E0	; 0x8006e0 <time_count_1.3227+0x3>
    6136:	dc 01       	movw	r26, r24
    6138:	cb 01       	movw	r24, r22
    613a:	8c 0d       	add	r24, r12
    613c:	9d 1d       	adc	r25, r13
    613e:	ae 1d       	adc	r26, r14
    6140:	bf 1d       	adc	r27, r15
    6142:	80 93 dd 06 	sts	0x06DD, r24	; 0x8006dd <time_count_1.3227>
    6146:	90 93 de 06 	sts	0x06DE, r25	; 0x8006de <time_count_1.3227+0x1>
    614a:	a0 93 df 06 	sts	0x06DF, r26	; 0x8006df <time_count_1.3227+0x2>
    614e:	b0 93 e0 06 	sts	0x06E0, r27	; 0x8006e0 <time_count_1.3227+0x3>
			//xSerialxPrintf(&xSerial3Port,"time_count_1=%d\r\n",time_count_1);
			if(time_count_1>ONE_HOUR){EEpromData.time_pump_source_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    6152:	0f 90       	pop	r0
    6154:	0f 90       	pop	r0
    6156:	0f 90       	pop	r0
    6158:	0f 90       	pop	r0
    615a:	81 31       	cpi	r24, 0x11	; 17
    615c:	9e 40       	sbci	r25, 0x0E	; 14
    615e:	a1 05       	cpc	r26, r1
    6160:	b1 05       	cpc	r27, r1
    6162:	08 f4       	brcc	.+2      	; 0x6166 <SorcePump_Stop+0xa4>
    6164:	77 c0       	rjmp	.+238    	; 0x6254 <SorcePump_Stop+0x192>
    6166:	e2 ec       	ldi	r30, 0xC2	; 194
    6168:	f8 e0       	ldi	r31, 0x08	; 8
    616a:	86 a9       	ldd	r24, Z+54	; 0x36
    616c:	97 a9       	ldd	r25, Z+55	; 0x37
    616e:	01 96       	adiw	r24, 0x01	; 1
    6170:	97 ab       	std	Z+55, r25	; 0x37
    6172:	86 ab       	std	Z+54, r24	; 0x36
    6174:	40 e6       	ldi	r20, 0x60	; 96
    6176:	50 e0       	ldi	r21, 0x00	; 0
    6178:	60 e0       	ldi	r22, 0x00	; 0
    617a:	70 e0       	ldi	r23, 0x00	; 0
    617c:	cf 01       	movw	r24, r30
    617e:	0e 94 a7 5b 	call	0xb74e	; 0xb74e <eeprom_update_block>
    6182:	10 92 dd 06 	sts	0x06DD, r1	; 0x8006dd <time_count_1.3227>
    6186:	10 92 de 06 	sts	0x06DE, r1	; 0x8006de <time_count_1.3227+0x1>
    618a:	10 92 df 06 	sts	0x06DF, r1	; 0x8006df <time_count_1.3227+0x2>
    618e:	10 92 e0 06 	sts	0x06E0, r1	; 0x8006e0 <time_count_1.3227+0x3>
    6192:	60 c0       	rjmp	.+192    	; 0x6254 <SorcePump_Stop+0x192>

		}
		
	}
	
	else if((*pxTimerID) == uxStopDelaySourcePTimer_2_ID)
    6194:	86 31       	cpi	r24, 0x16	; 22
    6196:	09 f0       	breq	.+2      	; 0x619a <SorcePump_Stop+0xd8>
    6198:	5d c0       	rjmp	.+186    	; 0x6254 <SorcePump_Stop+0x192>
	{
		//xSerialxPrintf(&xSerial3Port,"StopSource_2\r\n");
		if(PIN_SOURCE_PUMP_2 > 0)//
    619a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    619e:	82 ff       	sbrs	r24, 2
    61a0:	59 c0       	rjmp	.+178    	; 0x6254 <SorcePump_Stop+0x192>
		{
			STOP_SOURCE_PUMP_2;
    61a2:	e2 e0       	ldi	r30, 0x02	; 2
    61a4:	f1 e0       	ldi	r31, 0x01	; 1
    61a6:	80 81       	ld	r24, Z
    61a8:	8b 7f       	andi	r24, 0xFB	; 251
    61aa:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopSource_2\r\n");
    61ac:	8c ec       	ldi	r24, 0xCC	; 204
    61ae:	93 e0       	ldi	r25, 0x03	; 3
    61b0:	9f 93       	push	r25
    61b2:	8f 93       	push	r24
    61b4:	80 e6       	ldi	r24, 0x60	; 96
    61b6:	97 e0       	ldi	r25, 0x07	; 7
    61b8:	9f 93       	push	r25
    61ba:	8f 93       	push	r24
    61bc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			Comp_2.srcPOn=0;
    61c0:	e8 ea       	ldi	r30, 0xA8	; 168
    61c2:	f9 e0       	ldi	r31, 0x09	; 9
    61c4:	17 86       	std	Z+15, r1	; 0x0f
			Comp_2.switchToMode=false;
    61c6:	10 82       	st	Z, r1
			time_count_2+= difftime(time(&current_time), timeStartSrcP_2);
    61c8:	c0 90 55 0a 	lds	r12, 0x0A55	; 0x800a55 <timeStartSrcP_2>
    61cc:	d0 90 56 0a 	lds	r13, 0x0A56	; 0x800a56 <timeStartSrcP_2+0x1>
    61d0:	e0 90 57 0a 	lds	r14, 0x0A57	; 0x800a57 <timeStartSrcP_2+0x2>
    61d4:	f0 90 58 0a 	lds	r15, 0x0A58	; 0x800a58 <timeStartSrcP_2+0x3>
    61d8:	8d eb       	ldi	r24, 0xBD	; 189
    61da:	98 e0       	ldi	r25, 0x08	; 8
    61dc:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    61e0:	a7 01       	movw	r20, r14
    61e2:	96 01       	movw	r18, r12
    61e4:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    61e8:	c0 90 d9 06 	lds	r12, 0x06D9	; 0x8006d9 <time_count_2.3228>
    61ec:	d0 90 da 06 	lds	r13, 0x06DA	; 0x8006da <time_count_2.3228+0x1>
    61f0:	e0 90 db 06 	lds	r14, 0x06DB	; 0x8006db <time_count_2.3228+0x2>
    61f4:	f0 90 dc 06 	lds	r15, 0x06DC	; 0x8006dc <time_count_2.3228+0x3>
    61f8:	dc 01       	movw	r26, r24
    61fa:	cb 01       	movw	r24, r22
    61fc:	8c 0d       	add	r24, r12
    61fe:	9d 1d       	adc	r25, r13
    6200:	ae 1d       	adc	r26, r14
    6202:	bf 1d       	adc	r27, r15
    6204:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <time_count_2.3228>
    6208:	90 93 da 06 	sts	0x06DA, r25	; 0x8006da <time_count_2.3228+0x1>
    620c:	a0 93 db 06 	sts	0x06DB, r26	; 0x8006db <time_count_2.3228+0x2>
    6210:	b0 93 dc 06 	sts	0x06DC, r27	; 0x8006dc <time_count_2.3228+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_pump_source_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    6214:	0f 90       	pop	r0
    6216:	0f 90       	pop	r0
    6218:	0f 90       	pop	r0
    621a:	0f 90       	pop	r0
    621c:	81 31       	cpi	r24, 0x11	; 17
    621e:	9e 40       	sbci	r25, 0x0E	; 14
    6220:	a1 05       	cpc	r26, r1
    6222:	b1 05       	cpc	r27, r1
    6224:	b8 f0       	brcs	.+46     	; 0x6254 <SorcePump_Stop+0x192>
    6226:	ee e0       	ldi	r30, 0x0E	; 14
    6228:	f9 e0       	ldi	r31, 0x09	; 9
    622a:	80 81       	ld	r24, Z
    622c:	91 81       	ldd	r25, Z+1	; 0x01
    622e:	01 96       	adiw	r24, 0x01	; 1
    6230:	91 83       	std	Z+1, r25	; 0x01
    6232:	80 83       	st	Z, r24
    6234:	40 e6       	ldi	r20, 0x60	; 96
    6236:	50 e0       	ldi	r21, 0x00	; 0
    6238:	60 e0       	ldi	r22, 0x00	; 0
    623a:	70 e0       	ldi	r23, 0x00	; 0
    623c:	82 ec       	ldi	r24, 0xC2	; 194
    623e:	98 e0       	ldi	r25, 0x08	; 8
    6240:	0e 94 a7 5b 	call	0xb74e	; 0xb74e <eeprom_update_block>
    6244:	10 92 d9 06 	sts	0x06D9, r1	; 0x8006d9 <time_count_2.3228>
    6248:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <time_count_2.3228+0x1>
    624c:	10 92 db 06 	sts	0x06DB, r1	; 0x8006db <time_count_2.3228+0x2>
    6250:	10 92 dc 06 	sts	0x06DC, r1	; 0x8006dc <time_count_2.3228+0x3>

		}
	}
}
    6254:	ff 90       	pop	r15
    6256:	ef 90       	pop	r14
    6258:	df 90       	pop	r13
    625a:	cf 90       	pop	r12
    625c:	08 95       	ret

0000625e <StartComp>:
		
	}
}


void StartComp(TimerHandle_t xTimer){
    625e:	8f 92       	push	r8
    6260:	9f 92       	push	r9
    6262:	af 92       	push	r10
    6264:	bf 92       	push	r11
    6266:	cf 92       	push	r12
    6268:	df 92       	push	r13
    626a:	ef 92       	push	r14
    626c:	ff 92       	push	r15
    626e:	0f 93       	push	r16
    6270:	1f 93       	push	r17
    6272:	ac 01       	movw	r20, r24
	
	portBASE_TYPE *pxTimerID;
	
	TickType_t period;	
	period=(TickType_t)EEpromData.TRV_Delay;
    6274:	20 91 c7 08 	lds	r18, 0x08C7	; 0x8008c7 <EEpromData+0x5>
    period*=1000;
    6278:	30 e0       	ldi	r19, 0x00	; 0
    627a:	a8 ee       	ldi	r26, 0xE8	; 232
    627c:	b3 e0       	ldi	r27, 0x03	; 3
    627e:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    6282:	4b 01       	movw	r8, r22
    6284:	5c 01       	movw	r10, r24
	
	pxTimerID = pvTimerGetTimerID(xTimer);
    6286:	ca 01       	movw	r24, r20
    6288:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
//xSerialxPrintf(&xSerial3Port,"StartCompressor\r\n");
	if((*pxTimerID) == uxStartDelayCompTimer_1_ID) {
    628c:	fc 01       	movw	r30, r24
    628e:	80 81       	ld	r24, Z
    6290:	81 30       	cpi	r24, 0x01	; 1
    6292:	09 f0       	breq	.+2      	; 0x6296 <StartComp+0x38>
    6294:	61 c0       	rjmp	.+194    	; 0x6358 <StartComp+0xfa>
		Comp_1.switchToMode=false;
    6296:	e2 e2       	ldi	r30, 0x22	; 34
    6298:	f9 e0       	ldi	r31, 0x09	; 9
    629a:	10 82       	st	Z, r1
		 if(Comp_1.def) {timeTillDef=xTaskGetTickCount();Comp_1.stopdef=true;}
    629c:	81 85       	ldd	r24, Z+9	; 0x09
    629e:	88 23       	and	r24, r24
    62a0:	69 f0       	breq	.+26     	; 0x62bc <StartComp+0x5e>
    62a2:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    62a6:	60 93 a3 08 	sts	0x08A3, r22	; 0x8008a3 <timeTillDef>
    62aa:	70 93 a4 08 	sts	0x08A4, r23	; 0x8008a4 <timeTillDef+0x1>
    62ae:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <timeTillDef+0x2>
    62b2:	90 93 a6 08 	sts	0x08A6, r25	; 0x8008a6 <timeTillDef+0x3>
    62b6:	81 e0       	ldi	r24, 0x01	; 1
    62b8:	80 93 2c 09 	sts	0x092C, r24	; 0x80092c <Comp_1+0xa>
		if(PIN_COMPRESSOR_1 == 0)
    62bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    62c0:	85 fd       	sbrc	r24, 5
    62c2:	9c c0       	rjmp	.+312    	; 0x63fc <StartComp+0x19e>
		{   
			
			Comp_1.compOn=1;
    62c4:	81 e0       	ldi	r24, 0x01	; 1
    62c6:	80 93 2d 09 	sts	0x092D, r24	; 0x80092d <Comp_1+0xb>
			//if(Comp_2.compOn)vTaskDelay(5000);
			START_COMPRESSOR_1;
    62ca:	e2 e0       	ldi	r30, 0x02	; 2
    62cc:	f1 e0       	ldi	r31, 0x01	; 1
    62ce:	80 81       	ld	r24, Z
    62d0:	80 62       	ori	r24, 0x20	; 32
    62d2:	80 83       	st	Z, r24
			
			xSerialxPrintf(&xSerial3Port,"StartCompressor_1\r\n");
    62d4:	8b ed       	ldi	r24, 0xDB	; 219
    62d6:	93 e0       	ldi	r25, 0x03	; 3
    62d8:	9f 93       	push	r25
    62da:	8f 93       	push	r24
    62dc:	80 e6       	ldi	r24, 0x60	; 96
    62de:	97 e0       	ldi	r25, 0x07	; 7
    62e0:	9f 93       	push	r25
    62e2:	8f 93       	push	r24
    62e4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			
			
			timeStartComp_1=time(&current_time);
    62e8:	8d eb       	ldi	r24, 0xBD	; 189
    62ea:	98 e0       	ldi	r25, 0x08	; 8
    62ec:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    62f0:	60 93 b1 08 	sts	0x08B1, r22	; 0x8008b1 <timeStartComp_1>
    62f4:	70 93 b2 08 	sts	0x08B2, r23	; 0x8008b2 <timeStartComp_1+0x1>
    62f8:	80 93 b3 08 	sts	0x08B3, r24	; 0x8008b3 <timeStartComp_1+0x2>
    62fc:	90 93 b4 08 	sts	0x08B4, r25	; 0x8008b4 <timeStartComp_1+0x3>
			EEpromData.number_turnon_compressor_1+=1;
    6300:	e2 ec       	ldi	r30, 0xC2	; 194
    6302:	f8 e0       	ldi	r31, 0x08	; 8
    6304:	86 ad       	ldd	r24, Z+62	; 0x3e
    6306:	97 ad       	ldd	r25, Z+63	; 0x3f
    6308:	01 96       	adiw	r24, 0x01	; 1
    630a:	97 af       	std	Z+63, r25	; 0x3f
    630c:	86 af       	std	Z+62, r24	; 0x3e
			//xSerialxPrintf(&xSerial3Port,"Number_turnon_Compressor_=%d\r\n",EEpromData.number_turnon_compressor_1);
			xTimerChangePeriod( xTStartCheckTrv_1,period, 100 );
    630e:	0f 2e       	mov	r0, r31
    6310:	f4 e6       	ldi	r31, 0x64	; 100
    6312:	cf 2e       	mov	r12, r31
    6314:	d1 2c       	mov	r13, r1
    6316:	e1 2c       	mov	r14, r1
    6318:	f1 2c       	mov	r15, r1
    631a:	f0 2d       	mov	r31, r0
    631c:	00 e0       	ldi	r16, 0x00	; 0
    631e:	10 e0       	ldi	r17, 0x00	; 0
    6320:	a5 01       	movw	r20, r10
    6322:	94 01       	movw	r18, r8
    6324:	64 e0       	ldi	r22, 0x04	; 4
    6326:	80 91 bb 08 	lds	r24, 0x08BB	; 0x8008bb <xTStartCheckTrv_1>
    632a:	90 91 bc 08 	lds	r25, 0x08BC	; 0x8008bc <xTStartCheckTrv_1+0x1>
    632e:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
			xTimerStart(xTStartCheckErrors_1, 0);
    6332:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    6336:	9b 01       	movw	r18, r22
    6338:	ac 01       	movw	r20, r24
    633a:	c1 2c       	mov	r12, r1
    633c:	d1 2c       	mov	r13, r1
    633e:	76 01       	movw	r14, r12
    6340:	61 e0       	ldi	r22, 0x01	; 1
    6342:	80 91 59 0a 	lds	r24, 0x0A59	; 0x800a59 <xTStartCheckErrors_1>
    6346:	90 91 5a 0a 	lds	r25, 0x0A5A	; 0x800a5a <xTStartCheckErrors_1+0x1>
    634a:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    634e:	0f 90       	pop	r0
    6350:	0f 90       	pop	r0
    6352:	0f 90       	pop	r0
    6354:	0f 90       	pop	r0
    6356:	52 c0       	rjmp	.+164    	; 0x63fc <StartComp+0x19e>
	
		}
	}
	else if((*pxTimerID) == uxStartDelayCompTimer_2_ID) {
    6358:	8e 30       	cpi	r24, 0x0E	; 14
    635a:	09 f0       	breq	.+2      	; 0x635e <StartComp+0x100>
    635c:	4f c0       	rjmp	.+158    	; 0x63fc <StartComp+0x19e>
		xSerialxPrintf(&xSerial3Port,"StartCompressor_2\r\n");
    635e:	8f ee       	ldi	r24, 0xEF	; 239
    6360:	93 e0       	ldi	r25, 0x03	; 3
    6362:	9f 93       	push	r25
    6364:	8f 93       	push	r24
    6366:	80 e6       	ldi	r24, 0x60	; 96
    6368:	97 e0       	ldi	r25, 0x07	; 7
    636a:	9f 93       	push	r25
    636c:	8f 93       	push	r24
    636e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_COMPRESSOR_2 == 0)
    6372:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6376:	0f 90       	pop	r0
    6378:	0f 90       	pop	r0
    637a:	0f 90       	pop	r0
    637c:	0f 90       	pop	r0
    637e:	86 fd       	sbrc	r24, 6
    6380:	3d c0       	rjmp	.+122    	; 0x63fc <StartComp+0x19e>
		{
			//if(Comp_1.compOn)vTaskDelay(5000);
			Comp_2.compOn=1;
    6382:	e8 ea       	ldi	r30, 0xA8	; 168
    6384:	f9 e0       	ldi	r31, 0x09	; 9
    6386:	81 e0       	ldi	r24, 0x01	; 1
    6388:	83 87       	std	Z+11, r24	; 0x0b
			START_COMPRESSOR_2;
    638a:	a2 e0       	ldi	r26, 0x02	; 2
    638c:	b1 e0       	ldi	r27, 0x01	; 1
    638e:	8c 91       	ld	r24, X
    6390:	80 64       	ori	r24, 0x40	; 64
    6392:	8c 93       	st	X, r24
			
			
			Comp_2.switchToMode=false;
    6394:	10 82       	st	Z, r1
			
			timeStartComp_2=time(&current_time);
    6396:	8d eb       	ldi	r24, 0xBD	; 189
    6398:	98 e0       	ldi	r25, 0x08	; 8
    639a:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    639e:	60 93 5b 0a 	sts	0x0A5B, r22	; 0x800a5b <timeStartComp_2>
    63a2:	70 93 5c 0a 	sts	0x0A5C, r23	; 0x800a5c <timeStartComp_2+0x1>
    63a6:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <timeStartComp_2+0x2>
    63aa:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <timeStartComp_2+0x3>
			EEpromData.number_turnon_compressor_2+=1;
    63ae:	e4 e1       	ldi	r30, 0x14	; 20
    63b0:	f9 e0       	ldi	r31, 0x09	; 9
    63b2:	80 81       	ld	r24, Z
    63b4:	91 81       	ldd	r25, Z+1	; 0x01
    63b6:	01 96       	adiw	r24, 0x01	; 1
    63b8:	91 83       	std	Z+1, r25	; 0x01
    63ba:	80 83       	st	Z, r24
			xTimerChangePeriod( xTStartCheckTrv_2,period, 100 );
    63bc:	0f 2e       	mov	r0, r31
    63be:	f4 e6       	ldi	r31, 0x64	; 100
    63c0:	cf 2e       	mov	r12, r31
    63c2:	d1 2c       	mov	r13, r1
    63c4:	e1 2c       	mov	r14, r1
    63c6:	f1 2c       	mov	r15, r1
    63c8:	f0 2d       	mov	r31, r0
    63ca:	00 e0       	ldi	r16, 0x00	; 0
    63cc:	10 e0       	ldi	r17, 0x00	; 0
    63ce:	a5 01       	movw	r20, r10
    63d0:	94 01       	movw	r18, r8
    63d2:	64 e0       	ldi	r22, 0x04	; 4
    63d4:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <xTStartCheckTrv_2>
    63d8:	90 91 93 09 	lds	r25, 0x0993	; 0x800993 <xTStartCheckTrv_2+0x1>
    63dc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
			xTimerStart(xTStartCheckErrors_2, 0);
    63e0:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    63e4:	9b 01       	movw	r18, r22
    63e6:	ac 01       	movw	r20, r24
    63e8:	c1 2c       	mov	r12, r1
    63ea:	d1 2c       	mov	r13, r1
    63ec:	76 01       	movw	r14, r12
    63ee:	61 e0       	ldi	r22, 0x01	; 1
    63f0:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <xTStartCheckErrors_2>
    63f4:	90 91 aa 08 	lds	r25, 0x08AA	; 0x8008aa <xTStartCheckErrors_2+0x1>
    63f8:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		}
	}
	
	
}
    63fc:	1f 91       	pop	r17
    63fe:	0f 91       	pop	r16
    6400:	ff 90       	pop	r15
    6402:	ef 90       	pop	r14
    6404:	df 90       	pop	r13
    6406:	cf 90       	pop	r12
    6408:	bf 90       	pop	r11
    640a:	af 90       	pop	r10
    640c:	9f 90       	pop	r9
    640e:	8f 90       	pop	r8
    6410:	08 95       	ret

00006412 <SwitchRev_1_Time>:
	
	
}
//-------------------------------------------------------------------------
void SwitchRev_1_Time(TimerHandle_t xTimer)
{
    6412:	cf 92       	push	r12
    6414:	df 92       	push	r13
    6416:	ef 92       	push	r14
    6418:	ff 92       	push	r15
    641a:	0f 93       	push	r16
    641c:	1f 93       	push	r17
    641e:	cf 93       	push	r28
    6420:	df 93       	push	r29
	portBASE_TYPE *pxTimerID;
	pxTimerID = pvTimerGetTimerID(xTimer);
    6422:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    6426:	ec 01       	movw	r28, r24
	
	//xSerialxPrintf(&xSerial3Port,"SwitchRev_1\r\n");
	
	if((*pxTimerID) == uxSwitchRevOne_1_ID)
    6428:	88 81       	ld	r24, Y
    642a:	8c 30       	cpi	r24, 0x0C	; 12
    642c:	19 f5       	brne	.+70     	; 0x6474 <SwitchRev_1_Time+0x62>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_ON_1_1\r\n");
    642e:	83 e0       	ldi	r24, 0x03	; 3
    6430:	94 e0       	ldi	r25, 0x04	; 4
    6432:	9f 93       	push	r25
    6434:	8f 93       	push	r24
    6436:	80 e6       	ldi	r24, 0x60	; 96
    6438:	97 e0       	ldi	r25, 0x07	; 7
    643a:	9f 93       	push	r25
    643c:	8f 93       	push	r24
    643e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		if(PIN_REV_VALVE_1 == 0){START_REV_VALVE_1;}//
    6442:	0f 90       	pop	r0
    6444:	0f 90       	pop	r0
    6446:	0f 90       	pop	r0
    6448:	0f 90       	pop	r0
    644a:	94 99       	sbic	0x12, 4	; 18
    644c:	02 c0       	rjmp	.+4      	; 0x6452 <SwitchRev_1_Time+0x40>
    644e:	a4 9a       	sbi	0x14, 4	; 20
    6450:	01 c0       	rjmp	.+2      	; 0x6454 <SwitchRev_1_Time+0x42>
		else {STOP_REV_VALVE_1;}//xSerialxPrintf(&xSerial3Port,"SwitchRev_OFF_1\r\n");
    6452:	a4 98       	cbi	0x14, 4	; 20
		xTimerStart(xSwitchRevTwo_1_time, 0);
    6454:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    6458:	9b 01       	movw	r18, r22
    645a:	ac 01       	movw	r20, r24
    645c:	c1 2c       	mov	r12, r1
    645e:	d1 2c       	mov	r13, r1
    6460:	76 01       	movw	r14, r12
    6462:	00 e0       	ldi	r16, 0x00	; 0
    6464:	10 e0       	ldi	r17, 0x00	; 0
    6466:	61 e0       	ldi	r22, 0x01	; 1
    6468:	80 91 34 0a 	lds	r24, 0x0A34	; 0x800a34 <xSwitchRevTwo_1_time>
    646c:	90 91 35 0a 	lds	r25, 0x0A35	; 0x800a35 <xSwitchRevTwo_1_time+0x1>
    6470:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if((*pxTimerID) == uxSwitchRevOne_2_ID)
    6474:	88 81       	ld	r24, Y
    6476:	88 31       	cpi	r24, 0x18	; 24
    6478:	19 f5       	brne	.+70     	; 0x64c0 <SwitchRev_1_Time+0xae>
	{
		xSerialxPrintf(&xSerial3Port,"SwitchRev_2_1\r\n");
    647a:	86 e1       	ldi	r24, 0x16	; 22
    647c:	94 e0       	ldi	r25, 0x04	; 4
    647e:	9f 93       	push	r25
    6480:	8f 93       	push	r24
    6482:	80 e6       	ldi	r24, 0x60	; 96
    6484:	97 e0       	ldi	r25, 0x07	; 7
    6486:	9f 93       	push	r25
    6488:	8f 93       	push	r24
    648a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		
		if(PIN_REV_VALVE_2 == 0)START_REV_VALVE_2;
    648e:	0f 90       	pop	r0
    6490:	0f 90       	pop	r0
    6492:	0f 90       	pop	r0
    6494:	0f 90       	pop	r0
    6496:	93 99       	sbic	0x12, 3	; 18
    6498:	02 c0       	rjmp	.+4      	; 0x649e <SwitchRev_1_Time+0x8c>
    649a:	a3 9a       	sbi	0x14, 3	; 20
    649c:	01 c0       	rjmp	.+2      	; 0x64a0 <SwitchRev_1_Time+0x8e>
		else STOP_REV_VALVE_2;
    649e:	a3 98       	cbi	0x14, 3	; 20
		xTimerStart(xSwitchRevTwo_2_time, 0);
    64a0:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    64a4:	9b 01       	movw	r18, r22
    64a6:	ac 01       	movw	r20, r24
    64a8:	c1 2c       	mov	r12, r1
    64aa:	d1 2c       	mov	r13, r1
    64ac:	76 01       	movw	r14, r12
    64ae:	00 e0       	ldi	r16, 0x00	; 0
    64b0:	10 e0       	ldi	r17, 0x00	; 0
    64b2:	61 e0       	ldi	r22, 0x01	; 1
    64b4:	80 91 4f 0a 	lds	r24, 0x0A4F	; 0x800a4f <xSwitchRevTwo_2_time>
    64b8:	90 91 50 0a 	lds	r25, 0x0A50	; 0x800a50 <xSwitchRevTwo_2_time+0x1>
    64bc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
}
    64c0:	df 91       	pop	r29
    64c2:	cf 91       	pop	r28
    64c4:	1f 91       	pop	r17
    64c6:	0f 91       	pop	r16
    64c8:	ff 90       	pop	r15
    64ca:	ef 90       	pop	r14
    64cc:	df 90       	pop	r13
    64ce:	cf 90       	pop	r12
    64d0:	08 95       	ret

000064d2 <activateTimers>:
const portBASE_TYPE uxStopDelayRevVTimer_2_ID		= 23;
const portBASE_TYPE uxSwitchRevOne_2_ID				= 24;
const portBASE_TYPE uxSwitchRevTwo_2_ID				= 25;

void activateTimers(xCompressor *comp)
{
    64d2:	ef 92       	push	r14
    64d4:	ff 92       	push	r15
    64d6:	0f 93       	push	r16
    64d8:	1f 93       	push	r17
    64da:	cf 93       	push	r28
    64dc:	df 93       	push	r29
    64de:	ec 01       	movw	r28, r24
	
	
	if(comp->Index==1)
    64e0:	fc 01       	movw	r30, r24
    64e2:	e2 59       	subi	r30, 0x92	; 146
    64e4:	ff 4f       	sbci	r31, 0xFF	; 255
    64e6:	80 81       	ld	r24, Z
    64e8:	91 81       	ldd	r25, Z+1	; 0x01
    64ea:	01 97       	sbiw	r24, 0x01	; 1
    64ec:	09 f0       	breq	.+2      	; 0x64f0 <activateTimers+0x1e>
    64ee:	fc c0       	rjmp	.+504    	; 0x66e8 <activateTimers+0x216>
	{
		
		xStartRevValve_1   =	xTimerCreate("StRevV_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayRevVTimer_1_ID, StartReversingValve);//(EEpromData.Revers_Valve_delay*1000) 
    64f0:	0f 2e       	mov	r0, r31
    64f2:	f1 e8       	ldi	r31, 0x81	; 129
    64f4:	ef 2e       	mov	r14, r31
    64f6:	fa e2       	ldi	r31, 0x2A	; 42
    64f8:	ff 2e       	mov	r15, r31
    64fa:	f0 2d       	mov	r31, r0
    64fc:	09 ef       	ldi	r16, 0xF9	; 249
    64fe:	15 e0       	ldi	r17, 0x05	; 5
    6500:	20 e0       	ldi	r18, 0x00	; 0
    6502:	48 e5       	ldi	r20, 0x58	; 88
    6504:	5b e1       	ldi	r21, 0x1B	; 27
    6506:	60 e0       	ldi	r22, 0x00	; 0
    6508:	70 e0       	ldi	r23, 0x00	; 0
    650a:	86 e2       	ldi	r24, 0x26	; 38
    650c:	94 e0       	ldi	r25, 0x04	; 4
    650e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6512:	90 93 62 0a 	sts	0x0A62, r25	; 0x800a62 <xStartRevValve_1+0x1>
    6516:	80 93 61 0a 	sts	0x0A61, r24	; 0x800a61 <xStartRevValve_1>
		xStartThreeWay     =	xTimerCreate("StThreeW",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayThreeVTimer_1_ID, StartThreeWay);//(EEpromData.Three_Way_delay*1000)
    651a:	0f 2e       	mov	r0, r31
    651c:	fb e0       	ldi	r31, 0x0B	; 11
    651e:	ef 2e       	mov	r14, r31
    6520:	fd e2       	ldi	r31, 0x2D	; 45
    6522:	ff 2e       	mov	r15, r31
    6524:	f0 2d       	mov	r31, r0
    6526:	08 ef       	ldi	r16, 0xF8	; 248
    6528:	15 e0       	ldi	r17, 0x05	; 5
    652a:	20 e0       	ldi	r18, 0x00	; 0
    652c:	48 e5       	ldi	r20, 0x58	; 88
    652e:	5b e1       	ldi	r21, 0x1B	; 27
    6530:	60 e0       	ldi	r22, 0x00	; 0
    6532:	70 e0       	ldi	r23, 0x00	; 0
    6534:	8f e2       	ldi	r24, 0x2F	; 47
    6536:	94 e0       	ldi	r25, 0x04	; 4
    6538:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    653c:	90 93 97 09 	sts	0x0997, r25	; 0x800997 <xStartThreeWay+0x1>
    6540:	80 93 96 09 	sts	0x0996, r24	; 0x800996 <xStartThreeWay>
		xStartHeatPump_1   =	xTimerCreate("StHeatP_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayHeatPTimer_1_ID, StartHeatPump);//(EEpromData.HeatingPump_delay*1000) 
    6544:	0f 2e       	mov	r0, r31
    6546:	f5 e1       	ldi	r31, 0x15	; 21
    6548:	ef 2e       	mov	r14, r31
    654a:	f9 e2       	ldi	r31, 0x29	; 41
    654c:	ff 2e       	mov	r15, r31
    654e:	f0 2d       	mov	r31, r0
    6550:	0a ef       	ldi	r16, 0xFA	; 250
    6552:	15 e0       	ldi	r17, 0x05	; 5
    6554:	20 e0       	ldi	r18, 0x00	; 0
    6556:	48 e5       	ldi	r20, 0x58	; 88
    6558:	5b e1       	ldi	r21, 0x1B	; 27
    655a:	60 e0       	ldi	r22, 0x00	; 0
    655c:	70 e0       	ldi	r23, 0x00	; 0
    655e:	88 e3       	ldi	r24, 0x38	; 56
    6560:	94 e0       	ldi	r25, 0x04	; 4
    6562:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6566:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <xStartHeatPump_1+0x1>
    656a:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <xStartHeatPump_1>
		xStartCompressor_1 =	xTimerCreate("StComp_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayCompTimer_1_ID, StartComp);//(EEpromData.Compressor_delay*1000)
    656e:	0f 2e       	mov	r0, r31
    6570:	ff e2       	ldi	r31, 0x2F	; 47
    6572:	ef 2e       	mov	r14, r31
    6574:	f1 e3       	ldi	r31, 0x31	; 49
    6576:	ff 2e       	mov	r15, r31
    6578:	f0 2d       	mov	r31, r0
    657a:	0b ef       	ldi	r16, 0xFB	; 251
    657c:	15 e0       	ldi	r17, 0x05	; 5
    657e:	20 e0       	ldi	r18, 0x00	; 0
    6580:	48 e5       	ldi	r20, 0x58	; 88
    6582:	5b e1       	ldi	r21, 0x1B	; 27
    6584:	60 e0       	ldi	r22, 0x00	; 0
    6586:	70 e0       	ldi	r23, 0x00	; 0
    6588:	82 e4       	ldi	r24, 0x42	; 66
    658a:	94 e0       	ldi	r25, 0x04	; 4
    658c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6590:	90 93 39 0a 	sts	0x0A39, r25	; 0x800a39 <xStartCompressor_1+0x1>
    6594:	80 93 38 0a 	sts	0x0A38, r24	; 0x800a38 <xStartCompressor_1>
		xTStartCheckErrors_1 =	xTimerCreate("ChErr_1",			300000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayChekErrTimer_1_ID, StartCheckErrors);
    6598:	0f 2e       	mov	r0, r31
    659a:	f5 e2       	ldi	r31, 0x25	; 37
    659c:	ef 2e       	mov	r14, r31
    659e:	fa e2       	ldi	r31, 0x2A	; 42
    65a0:	ff 2e       	mov	r15, r31
    65a2:	f0 2d       	mov	r31, r0
    65a4:	06 ef       	ldi	r16, 0xF6	; 246
    65a6:	15 e0       	ldi	r17, 0x05	; 5
    65a8:	20 e0       	ldi	r18, 0x00	; 0
    65aa:	40 ee       	ldi	r20, 0xE0	; 224
    65ac:	53 e9       	ldi	r21, 0x93	; 147
    65ae:	64 e0       	ldi	r22, 0x04	; 4
    65b0:	70 e0       	ldi	r23, 0x00	; 0
    65b2:	8b e4       	ldi	r24, 0x4B	; 75
    65b4:	94 e0       	ldi	r25, 0x04	; 4
    65b6:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    65ba:	90 93 5a 0a 	sts	0x0A5A, r25	; 0x800a5a <xTStartCheckErrors_1+0x1>
    65be:	80 93 59 0a 	sts	0x0A59, r24	; 0x800a59 <xTStartCheckErrors_1>
		xTStartCheckTrv_1 =		xTimerCreate("ChTrv_1",			7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStartDelayChekTrvTimer_1_ID, StartCheckTrv);//(EEpromData.TRV_Delay*1000)
    65c2:	0f 2e       	mov	r0, r31
    65c4:	f5 e5       	ldi	r31, 0x55	; 85
    65c6:	ef 2e       	mov	r14, r31
    65c8:	fa e2       	ldi	r31, 0x2A	; 42
    65ca:	ff 2e       	mov	r15, r31
    65cc:	f0 2d       	mov	r31, r0
    65ce:	07 ef       	ldi	r16, 0xF7	; 247
    65d0:	15 e0       	ldi	r17, 0x05	; 5
    65d2:	20 e0       	ldi	r18, 0x00	; 0
    65d4:	48 e5       	ldi	r20, 0x58	; 88
    65d6:	5b e1       	ldi	r21, 0x1B	; 27
    65d8:	60 e0       	ldi	r22, 0x00	; 0
    65da:	70 e0       	ldi	r23, 0x00	; 0
    65dc:	83 e5       	ldi	r24, 0x53	; 83
    65de:	94 e0       	ldi	r25, 0x04	; 4
    65e0:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    65e4:	90 93 bc 08 	sts	0x08BC, r25	; 0x8008bc <xTStartCheckTrv_1+0x1>
    65e8:	80 93 bb 08 	sts	0x08BB, r24	; 0x8008bb <xTStartCheckTrv_1>
		//----------stop

		xSwitchRevOne_1_time =	xTimerCreate("swRevOne_1",		5000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxSwitchRevOne_1_ID, SwitchRev_1_Time);
    65ec:	0f 2e       	mov	r0, r31
    65ee:	f9 e0       	ldi	r31, 0x09	; 9
    65f0:	ef 2e       	mov	r14, r31
    65f2:	f2 e3       	ldi	r31, 0x32	; 50
    65f4:	ff 2e       	mov	r15, r31
    65f6:	f0 2d       	mov	r31, r0
    65f8:	01 ef       	ldi	r16, 0xF1	; 241
    65fa:	15 e0       	ldi	r17, 0x05	; 5
    65fc:	20 e0       	ldi	r18, 0x00	; 0
    65fe:	48 e8       	ldi	r20, 0x88	; 136
    6600:	53 e1       	ldi	r21, 0x13	; 19
    6602:	60 e0       	ldi	r22, 0x00	; 0
    6604:	70 e0       	ldi	r23, 0x00	; 0
    6606:	8b e5       	ldi	r24, 0x5B	; 91
    6608:	94 e0       	ldi	r25, 0x04	; 4
    660a:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    660e:	90 93 b6 08 	sts	0x08B6, r25	; 0x8008b6 <xSwitchRevOne_1_time+0x1>
    6612:	80 93 b5 08 	sts	0x08B5, r24	; 0x8008b5 <xSwitchRevOne_1_time>
		xSwitchRevTwo_1_time =	xTimerCreate("swRevTwo_1",		5000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxSwitchRevTwo_1_ID, SwitchRev_2_Time);
    6616:	0f 2e       	mov	r0, r31
    6618:	fc eb       	ldi	r31, 0xBC	; 188
    661a:	ef 2e       	mov	r14, r31
    661c:	f9 e2       	ldi	r31, 0x29	; 41
    661e:	ff 2e       	mov	r15, r31
    6620:	f0 2d       	mov	r31, r0
    6622:	00 ef       	ldi	r16, 0xF0	; 240
    6624:	15 e0       	ldi	r17, 0x05	; 5
    6626:	20 e0       	ldi	r18, 0x00	; 0
    6628:	48 e8       	ldi	r20, 0x88	; 136
    662a:	53 e1       	ldi	r21, 0x13	; 19
    662c:	60 e0       	ldi	r22, 0x00	; 0
    662e:	70 e0       	ldi	r23, 0x00	; 0
    6630:	86 e6       	ldi	r24, 0x66	; 102
    6632:	94 e0       	ldi	r25, 0x04	; 4
    6634:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6638:	90 93 35 0a 	sts	0x0A35, r25	; 0x800a35 <xSwitchRevTwo_1_time+0x1>
    663c:	80 93 34 0a 	sts	0x0A34, r24	; 0x800a34 <xSwitchRevTwo_1_time>
		xStopHeatPump_1   =		xTimerCreate("offHeatP_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayHeatPTimer_1_ID, HeatPump_Stop);//(EEpromData.HeatingPump_delay*1000)
    6640:	0f 2e       	mov	r0, r31
    6642:	f1 ed       	ldi	r31, 0xD1	; 209
    6644:	ef 2e       	mov	r14, r31
    6646:	fd e2       	ldi	r31, 0x2D	; 45
    6648:	ff 2e       	mov	r15, r31
    664a:	f0 2d       	mov	r31, r0
    664c:	05 ef       	ldi	r16, 0xF5	; 245
    664e:	15 e0       	ldi	r17, 0x05	; 5
    6650:	20 e0       	ldi	r18, 0x00	; 0
    6652:	48 e5       	ldi	r20, 0x58	; 88
    6654:	5b e1       	ldi	r21, 0x1B	; 27
    6656:	60 e0       	ldi	r22, 0x00	; 0
    6658:	70 e0       	ldi	r23, 0x00	; 0
    665a:	81 e7       	ldi	r24, 0x71	; 113
    665c:	94 e0       	ldi	r25, 0x04	; 4
    665e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6662:	90 93 b0 08 	sts	0x08B0, r25	; 0x8008b0 <xStopHeatPump_1+0x1>
    6666:	80 93 af 08 	sts	0x08AF, r24	; 0x8008af <xStopHeatPump_1>
		xStopThreeWay     =		xTimerCreate("offThreeW",		7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayThreeVTimer_1_ID, ThreeWay_Stop);//(EEpromData.Three_Way_delay*1000)
    666a:	0f 2e       	mov	r0, r31
    666c:	fe ed       	ldi	r31, 0xDE	; 222
    666e:	ef 2e       	mov	r14, r31
    6670:	fe e2       	ldi	r31, 0x2E	; 46
    6672:	ff 2e       	mov	r15, r31
    6674:	f0 2d       	mov	r31, r0
    6676:	02 ef       	ldi	r16, 0xF2	; 242
    6678:	15 e0       	ldi	r17, 0x05	; 5
    667a:	20 e0       	ldi	r18, 0x00	; 0
    667c:	48 e5       	ldi	r20, 0x58	; 88
    667e:	5b e1       	ldi	r21, 0x1B	; 27
    6680:	60 e0       	ldi	r22, 0x00	; 0
    6682:	70 e0       	ldi	r23, 0x00	; 0
    6684:	8c e7       	ldi	r24, 0x7C	; 124
    6686:	94 e0       	ldi	r25, 0x04	; 4
    6688:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    668c:	90 93 95 09 	sts	0x0995, r25	; 0x800995 <xStopThreeWay+0x1>
    6690:	80 93 94 09 	sts	0x0994, r24	; 0x800994 <xStopThreeWay>
		xStopRevValve_1   =		xTimerCreate("offRevV_1",		7000/ portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelayRevVTimer_1_ID, Revers_Stop);//(EEpromData.Revers_Valve_delay*1000)
    6694:	0f 2e       	mov	r0, r31
    6696:	f9 e6       	ldi	r31, 0x69	; 105
    6698:	ef 2e       	mov	r14, r31
    669a:	ff e2       	ldi	r31, 0x2F	; 47
    669c:	ff 2e       	mov	r15, r31
    669e:	f0 2d       	mov	r31, r0
    66a0:	03 ef       	ldi	r16, 0xF3	; 243
    66a2:	15 e0       	ldi	r17, 0x05	; 5
    66a4:	20 e0       	ldi	r18, 0x00	; 0
    66a6:	48 e5       	ldi	r20, 0x58	; 88
    66a8:	5b e1       	ldi	r21, 0x1B	; 27
    66aa:	60 e0       	ldi	r22, 0x00	; 0
    66ac:	70 e0       	ldi	r23, 0x00	; 0
    66ae:	86 e8       	ldi	r24, 0x86	; 134
    66b0:	94 e0       	ldi	r25, 0x04	; 4
    66b2:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    66b6:	90 93 2b 0a 	sts	0x0A2B, r25	; 0x800a2b <xStopRevValve_1+0x1>
    66ba:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <xStopRevValve_1>
		xStopSource_1   =		xTimerCreate("offSourceP_1",	7000 / portTICK_PERIOD_MS, pdFALSE, (void*) &uxStopDelaySourcePTimer_1_ID, SorcePump_Stop);//(EEpromData.Source_Pump_delay*1000)
    66be:	0f 2e       	mov	r0, r31
    66c0:	f1 e6       	ldi	r31, 0x61	; 97
    66c2:	ef 2e       	mov	r14, r31
    66c4:	f0 e3       	ldi	r31, 0x30	; 48
    66c6:	ff 2e       	mov	r15, r31
    66c8:	f0 2d       	mov	r31, r0
    66ca:	04 ef       	ldi	r16, 0xF4	; 244
    66cc:	15 e0       	ldi	r17, 0x05	; 5
    66ce:	20 e0       	ldi	r18, 0x00	; 0
    66d0:	48 e5       	ldi	r20, 0x58	; 88
    66d2:	5b e1       	ldi	r21, 0x1B	; 27
    66d4:	60 e0       	ldi	r22, 0x00	; 0
    66d6:	70 e0       	ldi	r23, 0x00	; 0
    66d8:	80 e9       	ldi	r24, 0x90	; 144
    66da:	94 e0       	ldi	r25, 0x04	; 4
    66dc:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    66e0:	90 93 ba 08 	sts	0x08BA, r25	; 0x8008ba <xStopSource_1+0x1>
    66e4:	80 93 b9 08 	sts	0x08B9, r24	; 0x8008b9 <xStopSource_1>
	}
	if (comp->Index==2)
    66e8:	c2 59       	subi	r28, 0x92	; 146
    66ea:	df 4f       	sbci	r29, 0xFF	; 255
    66ec:	88 81       	ld	r24, Y
    66ee:	99 81       	ldd	r25, Y+1	; 0x01
    66f0:	02 97       	sbiw	r24, 0x02	; 2
    66f2:	09 f0       	breq	.+2      	; 0x66f6 <activateTimers+0x224>
    66f4:	d2 c0       	rjmp	.+420    	; 0x689a <activateTimers+0x3c8>
	{
		
		xStartRevValve_2   =	xTimerCreate("StRevV_2",		7000, pdFALSE, (void*) &uxStartDelayRevVTimer_2_ID, StartReversingValve);
    66f6:	0f 2e       	mov	r0, r31
    66f8:	f1 e8       	ldi	r31, 0x81	; 129
    66fa:	ef 2e       	mov	r14, r31
    66fc:	fa e2       	ldi	r31, 0x2A	; 42
    66fe:	ff 2e       	mov	r15, r31
    6700:	f0 2d       	mov	r31, r0
    6702:	0d ee       	ldi	r16, 0xED	; 237
    6704:	15 e0       	ldi	r17, 0x05	; 5
    6706:	20 e0       	ldi	r18, 0x00	; 0
    6708:	48 e5       	ldi	r20, 0x58	; 88
    670a:	5b e1       	ldi	r21, 0x1B	; 27
    670c:	60 e0       	ldi	r22, 0x00	; 0
    670e:	70 e0       	ldi	r23, 0x00	; 0
    6710:	8d e9       	ldi	r24, 0x9D	; 157
    6712:	94 e0       	ldi	r25, 0x04	; 4
    6714:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6718:	90 93 23 0a 	sts	0x0A23, r25	; 0x800a23 <xStartRevValve_2+0x1>
    671c:	80 93 22 0a 	sts	0x0A22, r24	; 0x800a22 <xStartRevValve_2>
		xStartHeatPump_2   =	xTimerCreate("StHeatP_2",		7000, pdFALSE, (void*) &uxStartDelayHeatPTimer_2_ID, StartHeatPump);
    6720:	0f 2e       	mov	r0, r31
    6722:	f5 e1       	ldi	r31, 0x15	; 21
    6724:	ef 2e       	mov	r14, r31
    6726:	f9 e2       	ldi	r31, 0x29	; 41
    6728:	ff 2e       	mov	r15, r31
    672a:	f0 2d       	mov	r31, r0
    672c:	0e ee       	ldi	r16, 0xEE	; 238
    672e:	15 e0       	ldi	r17, 0x05	; 5
    6730:	20 e0       	ldi	r18, 0x00	; 0
    6732:	48 e5       	ldi	r20, 0x58	; 88
    6734:	5b e1       	ldi	r21, 0x1B	; 27
    6736:	60 e0       	ldi	r22, 0x00	; 0
    6738:	70 e0       	ldi	r23, 0x00	; 0
    673a:	86 ea       	ldi	r24, 0xA6	; 166
    673c:	94 e0       	ldi	r25, 0x04	; 4
    673e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6742:	90 93 99 09 	sts	0x0999, r25	; 0x800999 <xStartHeatPump_2+0x1>
    6746:	80 93 98 09 	sts	0x0998, r24	; 0x800998 <xStartHeatPump_2>
		xStartCompressor_2 =	xTimerCreate("StComp_2",		7000, pdFALSE, (void*) &uxStartDelayCompTimer_2_ID, StartComp);
    674a:	0f 2e       	mov	r0, r31
    674c:	ff e2       	ldi	r31, 0x2F	; 47
    674e:	ef 2e       	mov	r14, r31
    6750:	f1 e3       	ldi	r31, 0x31	; 49
    6752:	ff 2e       	mov	r15, r31
    6754:	f0 2d       	mov	r31, r0
    6756:	0f ee       	ldi	r16, 0xEF	; 239
    6758:	15 e0       	ldi	r17, 0x05	; 5
    675a:	20 e0       	ldi	r18, 0x00	; 0
    675c:	48 e5       	ldi	r20, 0x58	; 88
    675e:	5b e1       	ldi	r21, 0x1B	; 27
    6760:	60 e0       	ldi	r22, 0x00	; 0
    6762:	70 e0       	ldi	r23, 0x00	; 0
    6764:	80 eb       	ldi	r24, 0xB0	; 176
    6766:	94 e0       	ldi	r25, 0x04	; 4
    6768:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    676c:	90 93 4b 0a 	sts	0x0A4B, r25	; 0x800a4b <xStartCompressor_2+0x1>
    6770:	80 93 4a 0a 	sts	0x0A4A, r24	; 0x800a4a <xStartCompressor_2>
		xTStartCheckErrors_2 =	xTimerCreate("ChErr_2",			300000, pdFALSE, (void*) &uxStartDelayChekErrTimer_2_ID, StartCheckErrors);
    6774:	0f 2e       	mov	r0, r31
    6776:	f5 e2       	ldi	r31, 0x25	; 37
    6778:	ef 2e       	mov	r14, r31
    677a:	fa e2       	ldi	r31, 0x2A	; 42
    677c:	ff 2e       	mov	r15, r31
    677e:	f0 2d       	mov	r31, r0
    6780:	0b ee       	ldi	r16, 0xEB	; 235
    6782:	15 e0       	ldi	r17, 0x05	; 5
    6784:	20 e0       	ldi	r18, 0x00	; 0
    6786:	40 ee       	ldi	r20, 0xE0	; 224
    6788:	53 e9       	ldi	r21, 0x93	; 147
    678a:	64 e0       	ldi	r22, 0x04	; 4
    678c:	70 e0       	ldi	r23, 0x00	; 0
    678e:	89 eb       	ldi	r24, 0xB9	; 185
    6790:	94 e0       	ldi	r25, 0x04	; 4
    6792:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6796:	90 93 aa 08 	sts	0x08AA, r25	; 0x8008aa <xTStartCheckErrors_2+0x1>
    679a:	80 93 a9 08 	sts	0x08A9, r24	; 0x8008a9 <xTStartCheckErrors_2>
		xTStartCheckTrv_2 =		xTimerCreate("ChTrv_2",			7000, pdFALSE, (void*) &uxStartDelayChekTrvTimer_2_ID, StartCheckTrv);
    679e:	0f 2e       	mov	r0, r31
    67a0:	f5 e5       	ldi	r31, 0x55	; 85
    67a2:	ef 2e       	mov	r14, r31
    67a4:	fa e2       	ldi	r31, 0x2A	; 42
    67a6:	ff 2e       	mov	r15, r31
    67a8:	f0 2d       	mov	r31, r0
    67aa:	0c ee       	ldi	r16, 0xEC	; 236
    67ac:	15 e0       	ldi	r17, 0x05	; 5
    67ae:	20 e0       	ldi	r18, 0x00	; 0
    67b0:	48 e5       	ldi	r20, 0x58	; 88
    67b2:	5b e1       	ldi	r21, 0x1B	; 27
    67b4:	60 e0       	ldi	r22, 0x00	; 0
    67b6:	70 e0       	ldi	r23, 0x00	; 0
    67b8:	81 ec       	ldi	r24, 0xC1	; 193
    67ba:	94 e0       	ldi	r25, 0x04	; 4
    67bc:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    67c0:	90 93 93 09 	sts	0x0993, r25	; 0x800993 <xTStartCheckTrv_2+0x1>
    67c4:	80 93 92 09 	sts	0x0992, r24	; 0x800992 <xTStartCheckTrv_2>
		//---------stop
		xSwitchRevOne_2_time =	xTimerCreate("swRevOne_2",		5000, pdFALSE, (void*) &uxSwitchRevOne_2_ID, SwitchRev_1_Time);
    67c8:	0f 2e       	mov	r0, r31
    67ca:	f9 e0       	ldi	r31, 0x09	; 9
    67cc:	ef 2e       	mov	r14, r31
    67ce:	f2 e3       	ldi	r31, 0x32	; 50
    67d0:	ff 2e       	mov	r15, r31
    67d2:	f0 2d       	mov	r31, r0
    67d4:	07 ee       	ldi	r16, 0xE7	; 231
    67d6:	15 e0       	ldi	r17, 0x05	; 5
    67d8:	20 e0       	ldi	r18, 0x00	; 0
    67da:	48 e8       	ldi	r20, 0x88	; 136
    67dc:	53 e1       	ldi	r21, 0x13	; 19
    67de:	60 e0       	ldi	r22, 0x00	; 0
    67e0:	70 e0       	ldi	r23, 0x00	; 0
    67e2:	89 ec       	ldi	r24, 0xC9	; 201
    67e4:	94 e0       	ldi	r25, 0x04	; 4
    67e6:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    67ea:	90 93 6b 0a 	sts	0x0A6B, r25	; 0x800a6b <xSwitchRevOne_2_time+0x1>
    67ee:	80 93 6a 0a 	sts	0x0A6A, r24	; 0x800a6a <xSwitchRevOne_2_time>
		xSwitchRevTwo_2_time =	xTimerCreate("swRevTwo_2",		5000, pdFALSE, (void*) &uxSwitchRevTwo_2_ID, SwitchRev_2_Time);
    67f2:	0f 2e       	mov	r0, r31
    67f4:	fc eb       	ldi	r31, 0xBC	; 188
    67f6:	ef 2e       	mov	r14, r31
    67f8:	f9 e2       	ldi	r31, 0x29	; 41
    67fa:	ff 2e       	mov	r15, r31
    67fc:	f0 2d       	mov	r31, r0
    67fe:	06 ee       	ldi	r16, 0xE6	; 230
    6800:	15 e0       	ldi	r17, 0x05	; 5
    6802:	20 e0       	ldi	r18, 0x00	; 0
    6804:	48 e8       	ldi	r20, 0x88	; 136
    6806:	53 e1       	ldi	r21, 0x13	; 19
    6808:	60 e0       	ldi	r22, 0x00	; 0
    680a:	70 e0       	ldi	r23, 0x00	; 0
    680c:	84 ed       	ldi	r24, 0xD4	; 212
    680e:	94 e0       	ldi	r25, 0x04	; 4
    6810:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6814:	90 93 50 0a 	sts	0x0A50, r25	; 0x800a50 <xSwitchRevTwo_2_time+0x1>
    6818:	80 93 4f 0a 	sts	0x0A4F, r24	; 0x800a4f <xSwitchRevTwo_2_time>
		xStopHeatPump_2   =		xTimerCreate("offHeatP_2",		7000, pdFALSE, (void*) &uxStopDelayHeatPTimer_2_ID, HeatPump_Stop);
    681c:	0f 2e       	mov	r0, r31
    681e:	f1 ed       	ldi	r31, 0xD1	; 209
    6820:	ef 2e       	mov	r14, r31
    6822:	fd e2       	ldi	r31, 0x2D	; 45
    6824:	ff 2e       	mov	r15, r31
    6826:	f0 2d       	mov	r31, r0
    6828:	0a ee       	ldi	r16, 0xEA	; 234
    682a:	15 e0       	ldi	r17, 0x05	; 5
    682c:	20 e0       	ldi	r18, 0x00	; 0
    682e:	48 e5       	ldi	r20, 0x58	; 88
    6830:	5b e1       	ldi	r21, 0x1B	; 27
    6832:	60 e0       	ldi	r22, 0x00	; 0
    6834:	70 e0       	ldi	r23, 0x00	; 0
    6836:	8f ed       	ldi	r24, 0xDF	; 223
    6838:	94 e0       	ldi	r25, 0x04	; 4
    683a:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    683e:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <xStopHeatPump_2+0x1>
    6842:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <xStopHeatPump_2>
		xStopRevValve_2    =	xTimerCreate("offRevV_2",		7000, pdFALSE, (void*) &uxStopDelayRevVTimer_2_ID, Revers_Stop);
    6846:	0f 2e       	mov	r0, r31
    6848:	f9 e6       	ldi	r31, 0x69	; 105
    684a:	ef 2e       	mov	r14, r31
    684c:	ff e2       	ldi	r31, 0x2F	; 47
    684e:	ff 2e       	mov	r15, r31
    6850:	f0 2d       	mov	r31, r0
    6852:	08 ee       	ldi	r16, 0xE8	; 232
    6854:	15 e0       	ldi	r17, 0x05	; 5
    6856:	20 e0       	ldi	r18, 0x00	; 0
    6858:	48 e5       	ldi	r20, 0x58	; 88
    685a:	5b e1       	ldi	r21, 0x1B	; 27
    685c:	60 e0       	ldi	r22, 0x00	; 0
    685e:	70 e0       	ldi	r23, 0x00	; 0
    6860:	8a ee       	ldi	r24, 0xEA	; 234
    6862:	94 e0       	ldi	r25, 0x04	; 4
    6864:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6868:	90 93 b8 08 	sts	0x08B8, r25	; 0x8008b8 <xStopRevValve_2+0x1>
    686c:	80 93 b7 08 	sts	0x08B7, r24	; 0x8008b7 <xStopRevValve_2>
		xStopSource_2   =		xTimerCreate("offSourceP_2",	7000, pdFALSE, (void*) &uxStopDelaySourcePTimer_2_ID, SorcePump_Stop);
    6870:	0f 2e       	mov	r0, r31
    6872:	f1 e6       	ldi	r31, 0x61	; 97
    6874:	ef 2e       	mov	r14, r31
    6876:	f0 e3       	ldi	r31, 0x30	; 48
    6878:	ff 2e       	mov	r15, r31
    687a:	f0 2d       	mov	r31, r0
    687c:	09 ee       	ldi	r16, 0xE9	; 233
    687e:	15 e0       	ldi	r17, 0x05	; 5
    6880:	20 e0       	ldi	r18, 0x00	; 0
    6882:	48 e5       	ldi	r20, 0x58	; 88
    6884:	5b e1       	ldi	r21, 0x1B	; 27
    6886:	60 e0       	ldi	r22, 0x00	; 0
    6888:	70 e0       	ldi	r23, 0x00	; 0
    688a:	84 ef       	ldi	r24, 0xF4	; 244
    688c:	94 e0       	ldi	r25, 0x04	; 4
    688e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    6892:	90 93 19 0a 	sts	0x0A19, r25	; 0x800a19 <xStopSource_2+0x1>
    6896:	80 93 18 0a 	sts	0x0A18, r24	; 0x800a18 <xStopSource_2>
	}
	
	
}
    689a:	df 91       	pop	r29
    689c:	cf 91       	pop	r28
    689e:	1f 91       	pop	r17
    68a0:	0f 91       	pop	r16
    68a2:	ff 90       	pop	r15
    68a4:	ef 90       	pop	r14
    68a6:	08 95       	ret

000068a8 <startDefrost>:
//------------------------------------------------
void startDefrost(xCompressor *comp,xEEdata* eeData){
    68a8:	fb 01       	movw	r30, r22
	_heatWater=eeData->heatWater;
    68aa:	81 e0       	ldi	r24, 0x01	; 1
    68ac:	95 a1       	ldd	r25, Z+37	; 0x25
    68ae:	91 11       	cpse	r25, r1
    68b0:	01 c0       	rjmp	.+2      	; 0x68b4 <startDefrost+0xc>
    68b2:	80 e0       	ldi	r24, 0x00	; 0
    68b4:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <_heatWater>
	_heat =eeData->heat;
    68b8:	81 e0       	ldi	r24, 0x01	; 1
    68ba:	96 a1       	ldd	r25, Z+38	; 0x26
    68bc:	91 11       	cpse	r25, r1
    68be:	01 c0       	rjmp	.+2      	; 0x68c2 <startDefrost+0x1a>
    68c0:	80 e0       	ldi	r24, 0x00	; 0
    68c2:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <_heat>
	_cool =eeData->cool;
    68c6:	81 e0       	ldi	r24, 0x01	; 1
    68c8:	97 a1       	ldd	r25, Z+39	; 0x27
    68ca:	91 11       	cpse	r25, r1
    68cc:	01 c0       	rjmp	.+2      	; 0x68d0 <startDefrost+0x28>
    68ce:	80 e0       	ldi	r24, 0x00	; 0
    68d0:	80 93 ca 06 	sts	0x06CA, r24	; 0x8006ca <_cool>
	eeData->heatWater=false;
    68d4:	15 a2       	std	Z+37, r1	; 0x25
	eeData->heat =false;
    68d6:	16 a2       	std	Z+38, r1	; 0x26
	eeData->cool =true;
    68d8:	81 e0       	ldi	r24, 0x01	; 1
    68da:	87 a3       	std	Z+39, r24	; 0x27
    68dc:	08 95       	ret

000068de <stopDefrost>:
	//Comp_Stop(comp);
		
}
void stopDefrost(xCompressor *comp,xEEdata* eeData){
    68de:	fb 01       	movw	r30, r22
	
	//Comp_Stop(comp);
	//eeData->heatWater=false;
	//eeData->heat =true;
	//eeData->cool =false;
	eeData->heatWater=_heatWater;
    68e0:	80 91 cc 06 	lds	r24, 0x06CC	; 0x8006cc <_heatWater>
    68e4:	85 a3       	std	Z+37, r24	; 0x25
	eeData->heat =_heat;
    68e6:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <_heat>
    68ea:	86 a3       	std	Z+38, r24	; 0x26
	eeData->cool =_cool;
    68ec:	80 91 ca 06 	lds	r24, 0x06CA	; 0x8006ca <_cool>
    68f0:	87 a3       	std	Z+39, r24	; 0x27
    68f2:	08 95       	ret

000068f4 <StarSoursePump>:




//------------------------------------------------
void StarSoursePump(xCompressor *comp){
    68f4:	8f 92       	push	r8
    68f6:	9f 92       	push	r9
    68f8:	af 92       	push	r10
    68fa:	bf 92       	push	r11
    68fc:	cf 92       	push	r12
    68fe:	df 92       	push	r13
    6900:	ef 92       	push	r14
    6902:	ff 92       	push	r15
    6904:	0f 93       	push	r16
    6906:	1f 93       	push	r17
    6908:	cf 93       	push	r28
    690a:	df 93       	push	r29
    690c:	ec 01       	movw	r28, r24
TickType_t period;

	period=(TickType_t)EEpromData.Revers_Valve_delay;
    690e:	20 91 c4 08 	lds	r18, 0x08C4	; 0x8008c4 <EEpromData+0x2>
	period*=1000;
    6912:	30 e0       	ldi	r19, 0x00	; 0
    6914:	a8 ee       	ldi	r26, 0xE8	; 232
    6916:	b3 e0       	ldi	r27, 0x03	; 3
    6918:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    691c:	4b 01       	movw	r8, r22
    691e:	5c 01       	movw	r10, r24
	//xSerialxPrintf(&xSerial3Port,"StartSourcePump\r\n");
	if(comp->Index == 1)
    6920:	fe 01       	movw	r30, r28
    6922:	e2 59       	subi	r30, 0x92	; 146
    6924:	ff 4f       	sbci	r31, 0xFF	; 255
    6926:	80 81       	ld	r24, Z
    6928:	91 81       	ldd	r25, Z+1	; 0x01
    692a:	01 97       	sbiw	r24, 0x01	; 1
    692c:	09 f0       	breq	.+2      	; 0x6930 <StarSoursePump+0x3c>
    692e:	48 c0       	rjmp	.+144    	; 0x69c0 <StarSoursePump+0xcc>
	{
		
		Comp_1.error=0;
    6930:	10 92 8f 09 	sts	0x098F, r1	; 0x80098f <Comp_1+0x6d>
    6934:	10 92 8e 09 	sts	0x098E, r1	; 0x80098e <Comp_1+0x6c>
		Comp_1.switchToMode=true;
    6938:	81 e0       	ldi	r24, 0x01	; 1
    693a:	80 93 22 09 	sts	0x0922, r24	; 0x800922 <Comp_1>
		if(PIN_SOURCE_PUMP_1 == 0 && !comp->def )
    693e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6942:	81 fd       	sbrc	r24, 1
    6944:	2b c0       	rjmp	.+86     	; 0x699c <StarSoursePump+0xa8>
    6946:	89 85       	ldd	r24, Y+9	; 0x09
    6948:	81 11       	cpse	r24, r1
    694a:	28 c0       	rjmp	.+80     	; 0x699c <StarSoursePump+0xa8>
		{
			START_SOURCE_PUMP_1;
    694c:	e2 e0       	ldi	r30, 0x02	; 2
    694e:	f1 e0       	ldi	r31, 0x01	; 1
    6950:	80 81       	ld	r24, Z
    6952:	82 60       	ori	r24, 0x02	; 2
    6954:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StartSourcePump_1\r\n");
    6956:	81 e0       	ldi	r24, 0x01	; 1
    6958:	95 e0       	ldi	r25, 0x05	; 5
    695a:	9f 93       	push	r25
    695c:	8f 93       	push	r24
    695e:	80 e6       	ldi	r24, 0x60	; 96
    6960:	97 e0       	ldi	r25, 0x07	; 7
    6962:	9f 93       	push	r25
    6964:	8f 93       	push	r24
    6966:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->srcPOn=1;
    696a:	81 e0       	ldi	r24, 0x01	; 1
    696c:	8f 87       	std	Y+15, r24	; 0x0f
			timeStartSrcP_1=time(&current_time);
    696e:	8d eb       	ldi	r24, 0xBD	; 189
    6970:	98 e0       	ldi	r25, 0x08	; 8
    6972:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6976:	60 93 9a 09 	sts	0x099A, r22	; 0x80099a <timeStartSrcP_1>
    697a:	70 93 9b 09 	sts	0x099B, r23	; 0x80099b <timeStartSrcP_1+0x1>
    697e:	80 93 9c 09 	sts	0x099C, r24	; 0x80099c <timeStartSrcP_1+0x2>
    6982:	90 93 9d 09 	sts	0x099D, r25	; 0x80099d <timeStartSrcP_1+0x3>
			EEpromData.number_turnon_source_1+=1;
    6986:	e2 e0       	ldi	r30, 0x02	; 2
    6988:	f9 e0       	ldi	r31, 0x09	; 9
    698a:	80 81       	ld	r24, Z
    698c:	91 81       	ldd	r25, Z+1	; 0x01
    698e:	01 96       	adiw	r24, 0x01	; 1
    6990:	91 83       	std	Z+1, r25	; 0x01
    6992:	80 83       	st	Z, r24
    6994:	0f 90       	pop	r0
    6996:	0f 90       	pop	r0
    6998:	0f 90       	pop	r0
    699a:	0f 90       	pop	r0
			//xSerialxPrintf(&xSerial3Port,"Number_turnon_source_=%d\r\n",EEpromData.number_turnon_source_1);
			
						
		}
		xTimerChangePeriod( xStartRevValve_1,period, 100 );
    699c:	0f 2e       	mov	r0, r31
    699e:	f4 e6       	ldi	r31, 0x64	; 100
    69a0:	cf 2e       	mov	r12, r31
    69a2:	d1 2c       	mov	r13, r1
    69a4:	e1 2c       	mov	r14, r1
    69a6:	f1 2c       	mov	r15, r1
    69a8:	f0 2d       	mov	r31, r0
    69aa:	00 e0       	ldi	r16, 0x00	; 0
    69ac:	10 e0       	ldi	r17, 0x00	; 0
    69ae:	a5 01       	movw	r20, r10
    69b0:	94 01       	movw	r18, r8
    69b2:	64 e0       	ldi	r22, 0x04	; 4
    69b4:	80 91 61 0a 	lds	r24, 0x0A61	; 0x800a61 <xStartRevValve_1>
    69b8:	90 91 62 0a 	lds	r25, 0x0A62	; 0x800a62 <xStartRevValve_1+0x1>
    69bc:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if(comp->Index == 2)
    69c0:	fe 01       	movw	r30, r28
    69c2:	e2 59       	subi	r30, 0x92	; 146
    69c4:	ff 4f       	sbci	r31, 0xFF	; 255
    69c6:	80 81       	ld	r24, Z
    69c8:	91 81       	ldd	r25, Z+1	; 0x01
    69ca:	02 97       	sbiw	r24, 0x02	; 2
    69cc:	09 f0       	breq	.+2      	; 0x69d0 <StarSoursePump+0xdc>
    69ce:	45 c0       	rjmp	.+138    	; 0x6a5a <StarSoursePump+0x166>
	{
		Comp_2.error=0;
    69d0:	10 92 15 0a 	sts	0x0A15, r1	; 0x800a15 <Comp_2+0x6d>
    69d4:	10 92 14 0a 	sts	0x0A14, r1	; 0x800a14 <Comp_2+0x6c>
		xSerialxPrintf(&xSerial3Port,"StartSourcePump_2\r\n");
    69d8:	85 e1       	ldi	r24, 0x15	; 21
    69da:	95 e0       	ldi	r25, 0x05	; 5
    69dc:	9f 93       	push	r25
    69de:	8f 93       	push	r24
    69e0:	80 e6       	ldi	r24, 0x60	; 96
    69e2:	97 e0       	ldi	r25, 0x07	; 7
    69e4:	9f 93       	push	r25
    69e6:	8f 93       	push	r24
    69e8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
		
		if(PIN_SOURCE_PUMP_2 == 0 && !comp->def)
    69ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    69f0:	0f 90       	pop	r0
    69f2:	0f 90       	pop	r0
    69f4:	0f 90       	pop	r0
    69f6:	0f 90       	pop	r0
    69f8:	82 fd       	sbrc	r24, 2
    69fa:	1d c0       	rjmp	.+58     	; 0x6a36 <StarSoursePump+0x142>
    69fc:	89 85       	ldd	r24, Y+9	; 0x09
    69fe:	81 11       	cpse	r24, r1
    6a00:	1a c0       	rjmp	.+52     	; 0x6a36 <StarSoursePump+0x142>
		{
			START_SOURCE_PUMP_2;						
    6a02:	e2 e0       	ldi	r30, 0x02	; 2
    6a04:	f1 e0       	ldi	r31, 0x01	; 1
    6a06:	80 81       	ld	r24, Z
    6a08:	84 60       	ori	r24, 0x04	; 4
    6a0a:	80 83       	st	Z, r24
			comp->srcPOn=1;
    6a0c:	81 e0       	ldi	r24, 0x01	; 1
    6a0e:	8f 87       	std	Y+15, r24	; 0x0f
			timeStartSrcP_2=time(&current_time);
    6a10:	8d eb       	ldi	r24, 0xBD	; 189
    6a12:	98 e0       	ldi	r25, 0x08	; 8
    6a14:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6a18:	60 93 55 0a 	sts	0x0A55, r22	; 0x800a55 <timeStartSrcP_2>
    6a1c:	70 93 56 0a 	sts	0x0A56, r23	; 0x800a56 <timeStartSrcP_2+0x1>
    6a20:	80 93 57 0a 	sts	0x0A57, r24	; 0x800a57 <timeStartSrcP_2+0x2>
    6a24:	90 93 58 0a 	sts	0x0A58, r25	; 0x800a58 <timeStartSrcP_2+0x3>
			EEpromData.number_turnon_source_2+=1;
    6a28:	e6 e1       	ldi	r30, 0x16	; 22
    6a2a:	f9 e0       	ldi	r31, 0x09	; 9
    6a2c:	80 81       	ld	r24, Z
    6a2e:	91 81       	ldd	r25, Z+1	; 0x01
    6a30:	01 96       	adiw	r24, 0x01	; 1
    6a32:	91 83       	std	Z+1, r25	; 0x01
    6a34:	80 83       	st	Z, r24
						
		}
		xTimerChangePeriod( xStartRevValve_2,period, 100 );
    6a36:	0f 2e       	mov	r0, r31
    6a38:	f4 e6       	ldi	r31, 0x64	; 100
    6a3a:	cf 2e       	mov	r12, r31
    6a3c:	d1 2c       	mov	r13, r1
    6a3e:	e1 2c       	mov	r14, r1
    6a40:	f1 2c       	mov	r15, r1
    6a42:	f0 2d       	mov	r31, r0
    6a44:	00 e0       	ldi	r16, 0x00	; 0
    6a46:	10 e0       	ldi	r17, 0x00	; 0
    6a48:	a5 01       	movw	r20, r10
    6a4a:	94 01       	movw	r18, r8
    6a4c:	64 e0       	ldi	r22, 0x04	; 4
    6a4e:	80 91 22 0a 	lds	r24, 0x0A22	; 0x800a22 <xStartRevValve_2>
    6a52:	90 91 23 0a 	lds	r25, 0x0A23	; 0x800a23 <xStartRevValve_2+0x1>
    6a56:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
}
    6a5a:	df 91       	pop	r29
    6a5c:	cf 91       	pop	r28
    6a5e:	1f 91       	pop	r17
    6a60:	0f 91       	pop	r16
    6a62:	ff 90       	pop	r15
    6a64:	ef 90       	pop	r14
    6a66:	df 90       	pop	r13
    6a68:	cf 90       	pop	r12
    6a6a:	bf 90       	pop	r11
    6a6c:	af 90       	pop	r10
    6a6e:	9f 90       	pop	r9
    6a70:	8f 90       	pop	r8
    6a72:	08 95       	ret

00006a74 <selmode>:
   
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t selmode(xEEdata* eeData)
{
    6a74:	fc 01       	movw	r30, r24

	if(eeData->heatWater && !eeData->heat && !eeData->cool)
    6a76:	85 a1       	ldd	r24, Z+37	; 0x25
    6a78:	88 23       	and	r24, r24
    6a7a:	39 f0       	breq	.+14     	; 0x6a8a <selmode+0x16>
    6a7c:	86 a1       	ldd	r24, Z+38	; 0x26
    6a7e:	81 11       	cpse	r24, r1
    6a80:	1a c0       	rjmp	.+52     	; 0x6ab6 <selmode+0x42>
    6a82:	97 a1       	ldd	r25, Z+39	; 0x27
    6a84:	91 11       	cpse	r25, r1
    6a86:	1c c0       	rjmp	.+56     	; 0x6ac0 <selmode+0x4c>
    6a88:	0d c0       	rjmp	.+26     	; 0x6aa4 <selmode+0x30>
	{
		return DHW;
		
	}
	if(!eeData->heatWater && eeData->heat && !eeData->cool)
    6a8a:	96 a1       	ldd	r25, Z+38	; 0x26
    6a8c:	99 23       	and	r25, r25
    6a8e:	71 f0       	breq	.+28     	; 0x6aac <selmode+0x38>
    6a90:	97 a1       	ldd	r25, Z+39	; 0x27
    6a92:	91 11       	cpse	r25, r1
    6a94:	17 c0       	rjmp	.+46     	; 0x6ac4 <selmode+0x50>
	{
		return HEAT;
    6a96:	82 e0       	ldi	r24, 0x02	; 2
    6a98:	08 95       	ret
	}
	if(eeData->heatWater && eeData->heat && !eeData->cool)
	{
		return HEAT_DHW;
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
    6a9a:	87 a1       	ldd	r24, Z+39	; 0x27
    6a9c:	88 23       	and	r24, r24
    6a9e:	91 f0       	breq	.+36     	; 0x6ac4 <selmode+0x50>
	{
		return COOL_DHW;
    6aa0:	85 e0       	ldi	r24, 0x05	; 5
    6aa2:	08 95       	ret
uint8_t selmode(xEEdata* eeData)
{

	if(eeData->heatWater && !eeData->heat && !eeData->cool)
	{
		return DHW;
    6aa4:	81 e0       	ldi	r24, 0x01	; 1
    6aa6:	08 95       	ret
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
	{
		return COOL_DHW;
	}
	else return OFF;
    6aa8:	80 e0       	ldi	r24, 0x00	; 0
    6aaa:	08 95       	ret
	}
	if(!eeData->heatWater && eeData->heat && !eeData->cool)
	{
		return HEAT;
	}
	if(!eeData->heatWater && !eeData->heat && eeData->cool)
    6aac:	87 a1       	ldd	r24, Z+39	; 0x27
    6aae:	88 23       	and	r24, r24
    6ab0:	49 f0       	breq	.+18     	; 0x6ac4 <selmode+0x50>
	{
		return COOL;
    6ab2:	83 e0       	ldi	r24, 0x03	; 3
    6ab4:	08 95       	ret
	}
	if(eeData->heatWater && eeData->heat && !eeData->cool)
    6ab6:	87 a1       	ldd	r24, Z+39	; 0x27
    6ab8:	81 11       	cpse	r24, r1
    6aba:	f6 cf       	rjmp	.-20     	; 0x6aa8 <selmode+0x34>
	{
		return HEAT_DHW;
    6abc:	84 e0       	ldi	r24, 0x04	; 4
    6abe:	08 95       	ret
	}
	if(eeData->heatWater && !eeData->heat && eeData->cool)
    6ac0:	88 23       	and	r24, r24
    6ac2:	59 f3       	breq	.-42     	; 0x6a9a <selmode+0x26>
	{
		return COOL_DHW;
	}
	else return OFF;

}
    6ac4:	08 95       	ret

00006ac6 <stop_timers>:
			}
		}break;
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void stop_timers( xCompressor *comp){
    6ac6:	cf 92       	push	r12
    6ac8:	df 92       	push	r13
    6aca:	ef 92       	push	r14
    6acc:	ff 92       	push	r15
    6ace:	0f 93       	push	r16
    6ad0:	1f 93       	push	r17
	if(comp->Index==1)
    6ad2:	82 59       	subi	r24, 0x92	; 146
    6ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    6ad6:	fc 01       	movw	r30, r24
    6ad8:	80 81       	ld	r24, Z
    6ada:	91 81       	ldd	r25, Z+1	; 0x01
    6adc:	81 30       	cpi	r24, 0x01	; 1
    6ade:	91 05       	cpc	r25, r1
    6ae0:	09 f0       	breq	.+2      	; 0x6ae4 <stop_timers+0x1e>
    6ae2:	3a c1       	rjmp	.+628    	; 0x6d58 <stop_timers+0x292>
	{
		if( xTimerIsTimerActive( xStartCompressor_1 ) != pdFALSE )      xTimerStop(xStartCompressor_1,1);
    6ae4:	80 91 38 0a 	lds	r24, 0x0A38	; 0x800a38 <xStartCompressor_1>
    6ae8:	90 91 39 0a 	lds	r25, 0x0A39	; 0x800a39 <xStartCompressor_1+0x1>
    6aec:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6af0:	88 23       	and	r24, r24
    6af2:	81 f0       	breq	.+32     	; 0x6b14 <stop_timers+0x4e>
    6af4:	c1 2c       	mov	r12, r1
    6af6:	d1 2c       	mov	r13, r1
    6af8:	76 01       	movw	r14, r12
    6afa:	c3 94       	inc	r12
    6afc:	00 e0       	ldi	r16, 0x00	; 0
    6afe:	10 e0       	ldi	r17, 0x00	; 0
    6b00:	20 e0       	ldi	r18, 0x00	; 0
    6b02:	30 e0       	ldi	r19, 0x00	; 0
    6b04:	a9 01       	movw	r20, r18
    6b06:	63 e0       	ldi	r22, 0x03	; 3
    6b08:	80 91 38 0a 	lds	r24, 0x0A38	; 0x800a38 <xStartCompressor_1>
    6b0c:	90 91 39 0a 	lds	r25, 0x0A39	; 0x800a39 <xStartCompressor_1+0x1>
    6b10:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartHeatPump_1 ) != pdFALSE )        xTimerStop(xStartHeatPump_1,1);
    6b14:	80 91 36 0a 	lds	r24, 0x0A36	; 0x800a36 <xStartHeatPump_1>
    6b18:	90 91 37 0a 	lds	r25, 0x0A37	; 0x800a37 <xStartHeatPump_1+0x1>
    6b1c:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6b20:	88 23       	and	r24, r24
    6b22:	81 f0       	breq	.+32     	; 0x6b44 <stop_timers+0x7e>
    6b24:	c1 2c       	mov	r12, r1
    6b26:	d1 2c       	mov	r13, r1
    6b28:	76 01       	movw	r14, r12
    6b2a:	c3 94       	inc	r12
    6b2c:	00 e0       	ldi	r16, 0x00	; 0
    6b2e:	10 e0       	ldi	r17, 0x00	; 0
    6b30:	20 e0       	ldi	r18, 0x00	; 0
    6b32:	30 e0       	ldi	r19, 0x00	; 0
    6b34:	a9 01       	movw	r20, r18
    6b36:	63 e0       	ldi	r22, 0x03	; 3
    6b38:	80 91 36 0a 	lds	r24, 0x0A36	; 0x800a36 <xStartHeatPump_1>
    6b3c:	90 91 37 0a 	lds	r25, 0x0A37	; 0x800a37 <xStartHeatPump_1+0x1>
    6b40:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartThreeWay ) != pdFALSE )			xTimerStop(xStartThreeWay,1);
    6b44:	80 91 96 09 	lds	r24, 0x0996	; 0x800996 <xStartThreeWay>
    6b48:	90 91 97 09 	lds	r25, 0x0997	; 0x800997 <xStartThreeWay+0x1>
    6b4c:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6b50:	88 23       	and	r24, r24
    6b52:	81 f0       	breq	.+32     	; 0x6b74 <stop_timers+0xae>
    6b54:	c1 2c       	mov	r12, r1
    6b56:	d1 2c       	mov	r13, r1
    6b58:	76 01       	movw	r14, r12
    6b5a:	c3 94       	inc	r12
    6b5c:	00 e0       	ldi	r16, 0x00	; 0
    6b5e:	10 e0       	ldi	r17, 0x00	; 0
    6b60:	20 e0       	ldi	r18, 0x00	; 0
    6b62:	30 e0       	ldi	r19, 0x00	; 0
    6b64:	a9 01       	movw	r20, r18
    6b66:	63 e0       	ldi	r22, 0x03	; 3
    6b68:	80 91 96 09 	lds	r24, 0x0996	; 0x800996 <xStartThreeWay>
    6b6c:	90 91 97 09 	lds	r25, 0x0997	; 0x800997 <xStartThreeWay+0x1>
    6b70:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartRevValve_1 ) != pdFALSE )		xTimerStop(xStartRevValve_1,1);
    6b74:	80 91 61 0a 	lds	r24, 0x0A61	; 0x800a61 <xStartRevValve_1>
    6b78:	90 91 62 0a 	lds	r25, 0x0A62	; 0x800a62 <xStartRevValve_1+0x1>
    6b7c:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6b80:	88 23       	and	r24, r24
    6b82:	81 f0       	breq	.+32     	; 0x6ba4 <stop_timers+0xde>
    6b84:	c1 2c       	mov	r12, r1
    6b86:	d1 2c       	mov	r13, r1
    6b88:	76 01       	movw	r14, r12
    6b8a:	c3 94       	inc	r12
    6b8c:	00 e0       	ldi	r16, 0x00	; 0
    6b8e:	10 e0       	ldi	r17, 0x00	; 0
    6b90:	20 e0       	ldi	r18, 0x00	; 0
    6b92:	30 e0       	ldi	r19, 0x00	; 0
    6b94:	a9 01       	movw	r20, r18
    6b96:	63 e0       	ldi	r22, 0x03	; 3
    6b98:	80 91 61 0a 	lds	r24, 0x0A61	; 0x800a61 <xStartRevValve_1>
    6b9c:	90 91 62 0a 	lds	r25, 0x0A62	; 0x800a62 <xStartRevValve_1+0x1>
    6ba0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevOne_1_time ) != pdFALSE )    xTimerStop(xSwitchRevOne_1_time,1);
    6ba4:	80 91 b5 08 	lds	r24, 0x08B5	; 0x8008b5 <xSwitchRevOne_1_time>
    6ba8:	90 91 b6 08 	lds	r25, 0x08B6	; 0x8008b6 <xSwitchRevOne_1_time+0x1>
    6bac:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6bb0:	88 23       	and	r24, r24
    6bb2:	81 f0       	breq	.+32     	; 0x6bd4 <stop_timers+0x10e>
    6bb4:	c1 2c       	mov	r12, r1
    6bb6:	d1 2c       	mov	r13, r1
    6bb8:	76 01       	movw	r14, r12
    6bba:	c3 94       	inc	r12
    6bbc:	00 e0       	ldi	r16, 0x00	; 0
    6bbe:	10 e0       	ldi	r17, 0x00	; 0
    6bc0:	20 e0       	ldi	r18, 0x00	; 0
    6bc2:	30 e0       	ldi	r19, 0x00	; 0
    6bc4:	a9 01       	movw	r20, r18
    6bc6:	63 e0       	ldi	r22, 0x03	; 3
    6bc8:	80 91 b5 08 	lds	r24, 0x08B5	; 0x8008b5 <xSwitchRevOne_1_time>
    6bcc:	90 91 b6 08 	lds	r25, 0x08B6	; 0x8008b6 <xSwitchRevOne_1_time+0x1>
    6bd0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevTwo_1_time ) != pdFALSE )	xTimerStop(xSwitchRevTwo_1_time,1);
    6bd4:	80 91 34 0a 	lds	r24, 0x0A34	; 0x800a34 <xSwitchRevTwo_1_time>
    6bd8:	90 91 35 0a 	lds	r25, 0x0A35	; 0x800a35 <xSwitchRevTwo_1_time+0x1>
    6bdc:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6be0:	88 23       	and	r24, r24
    6be2:	81 f0       	breq	.+32     	; 0x6c04 <stop_timers+0x13e>
    6be4:	c1 2c       	mov	r12, r1
    6be6:	d1 2c       	mov	r13, r1
    6be8:	76 01       	movw	r14, r12
    6bea:	c3 94       	inc	r12
    6bec:	00 e0       	ldi	r16, 0x00	; 0
    6bee:	10 e0       	ldi	r17, 0x00	; 0
    6bf0:	20 e0       	ldi	r18, 0x00	; 0
    6bf2:	30 e0       	ldi	r19, 0x00	; 0
    6bf4:	a9 01       	movw	r20, r18
    6bf6:	63 e0       	ldi	r22, 0x03	; 3
    6bf8:	80 91 34 0a 	lds	r24, 0x0A34	; 0x800a34 <xSwitchRevTwo_1_time>
    6bfc:	90 91 35 0a 	lds	r25, 0x0A35	; 0x800a35 <xSwitchRevTwo_1_time+0x1>
    6c00:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopHeatPump_1 ) != pdFALSE )			xTimerStop(xStopHeatPump_1,1);
    6c04:	80 91 af 08 	lds	r24, 0x08AF	; 0x8008af <xStopHeatPump_1>
    6c08:	90 91 b0 08 	lds	r25, 0x08B0	; 0x8008b0 <xStopHeatPump_1+0x1>
    6c0c:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6c10:	88 23       	and	r24, r24
    6c12:	81 f0       	breq	.+32     	; 0x6c34 <stop_timers+0x16e>
    6c14:	c1 2c       	mov	r12, r1
    6c16:	d1 2c       	mov	r13, r1
    6c18:	76 01       	movw	r14, r12
    6c1a:	c3 94       	inc	r12
    6c1c:	00 e0       	ldi	r16, 0x00	; 0
    6c1e:	10 e0       	ldi	r17, 0x00	; 0
    6c20:	20 e0       	ldi	r18, 0x00	; 0
    6c22:	30 e0       	ldi	r19, 0x00	; 0
    6c24:	a9 01       	movw	r20, r18
    6c26:	63 e0       	ldi	r22, 0x03	; 3
    6c28:	80 91 af 08 	lds	r24, 0x08AF	; 0x8008af <xStopHeatPump_1>
    6c2c:	90 91 b0 08 	lds	r25, 0x08B0	; 0x8008b0 <xStopHeatPump_1+0x1>
    6c30:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopThreeWay ) != pdFALSE )			xTimerStop(xStopThreeWay,1);
    6c34:	80 91 94 09 	lds	r24, 0x0994	; 0x800994 <xStopThreeWay>
    6c38:	90 91 95 09 	lds	r25, 0x0995	; 0x800995 <xStopThreeWay+0x1>
    6c3c:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6c40:	88 23       	and	r24, r24
    6c42:	81 f0       	breq	.+32     	; 0x6c64 <stop_timers+0x19e>
    6c44:	c1 2c       	mov	r12, r1
    6c46:	d1 2c       	mov	r13, r1
    6c48:	76 01       	movw	r14, r12
    6c4a:	c3 94       	inc	r12
    6c4c:	00 e0       	ldi	r16, 0x00	; 0
    6c4e:	10 e0       	ldi	r17, 0x00	; 0
    6c50:	20 e0       	ldi	r18, 0x00	; 0
    6c52:	30 e0       	ldi	r19, 0x00	; 0
    6c54:	a9 01       	movw	r20, r18
    6c56:	63 e0       	ldi	r22, 0x03	; 3
    6c58:	80 91 94 09 	lds	r24, 0x0994	; 0x800994 <xStopThreeWay>
    6c5c:	90 91 95 09 	lds	r25, 0x0995	; 0x800995 <xStopThreeWay+0x1>
    6c60:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopRevValve_1 ) != pdFALSE )			xTimerStop(xStopRevValve_1,1);
    6c64:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <xStopRevValve_1>
    6c68:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <xStopRevValve_1+0x1>
    6c6c:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6c70:	88 23       	and	r24, r24
    6c72:	81 f0       	breq	.+32     	; 0x6c94 <stop_timers+0x1ce>
    6c74:	c1 2c       	mov	r12, r1
    6c76:	d1 2c       	mov	r13, r1
    6c78:	76 01       	movw	r14, r12
    6c7a:	c3 94       	inc	r12
    6c7c:	00 e0       	ldi	r16, 0x00	; 0
    6c7e:	10 e0       	ldi	r17, 0x00	; 0
    6c80:	20 e0       	ldi	r18, 0x00	; 0
    6c82:	30 e0       	ldi	r19, 0x00	; 0
    6c84:	a9 01       	movw	r20, r18
    6c86:	63 e0       	ldi	r22, 0x03	; 3
    6c88:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <xStopRevValve_1>
    6c8c:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <xStopRevValve_1+0x1>
    6c90:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopSource_1 ) != pdFALSE )			xTimerStop(xStopSource_1,1);
    6c94:	80 91 b9 08 	lds	r24, 0x08B9	; 0x8008b9 <xStopSource_1>
    6c98:	90 91 ba 08 	lds	r25, 0x08BA	; 0x8008ba <xStopSource_1+0x1>
    6c9c:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6ca0:	88 23       	and	r24, r24
    6ca2:	81 f0       	breq	.+32     	; 0x6cc4 <stop_timers+0x1fe>
    6ca4:	c1 2c       	mov	r12, r1
    6ca6:	d1 2c       	mov	r13, r1
    6ca8:	76 01       	movw	r14, r12
    6caa:	c3 94       	inc	r12
    6cac:	00 e0       	ldi	r16, 0x00	; 0
    6cae:	10 e0       	ldi	r17, 0x00	; 0
    6cb0:	20 e0       	ldi	r18, 0x00	; 0
    6cb2:	30 e0       	ldi	r19, 0x00	; 0
    6cb4:	a9 01       	movw	r20, r18
    6cb6:	63 e0       	ldi	r22, 0x03	; 3
    6cb8:	80 91 b9 08 	lds	r24, 0x08B9	; 0x8008b9 <xStopSource_1>
    6cbc:	90 91 ba 08 	lds	r25, 0x08BA	; 0x8008ba <xStopSource_1+0x1>
    6cc0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckErrors_1 ) != pdFALSE )    xTimerStop(xTStartCheckErrors_1,1);
    6cc4:	80 91 59 0a 	lds	r24, 0x0A59	; 0x800a59 <xTStartCheckErrors_1>
    6cc8:	90 91 5a 0a 	lds	r25, 0x0A5A	; 0x800a5a <xTStartCheckErrors_1+0x1>
    6ccc:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6cd0:	88 23       	and	r24, r24
    6cd2:	81 f0       	breq	.+32     	; 0x6cf4 <stop_timers+0x22e>
    6cd4:	c1 2c       	mov	r12, r1
    6cd6:	d1 2c       	mov	r13, r1
    6cd8:	76 01       	movw	r14, r12
    6cda:	c3 94       	inc	r12
    6cdc:	00 e0       	ldi	r16, 0x00	; 0
    6cde:	10 e0       	ldi	r17, 0x00	; 0
    6ce0:	20 e0       	ldi	r18, 0x00	; 0
    6ce2:	30 e0       	ldi	r19, 0x00	; 0
    6ce4:	a9 01       	movw	r20, r18
    6ce6:	63 e0       	ldi	r22, 0x03	; 3
    6ce8:	80 91 59 0a 	lds	r24, 0x0A59	; 0x800a59 <xTStartCheckErrors_1>
    6cec:	90 91 5a 0a 	lds	r25, 0x0A5A	; 0x800a5a <xTStartCheckErrors_1+0x1>
    6cf0:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckTrv_1 ) != pdFALSE )       xTimerStop(xTStartCheckTrv_1,1);
    6cf4:	80 91 bb 08 	lds	r24, 0x08BB	; 0x8008bb <xTStartCheckTrv_1>
    6cf8:	90 91 bc 08 	lds	r25, 0x08BC	; 0x8008bc <xTStartCheckTrv_1+0x1>
    6cfc:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6d00:	88 23       	and	r24, r24
    6d02:	81 f0       	breq	.+32     	; 0x6d24 <stop_timers+0x25e>
    6d04:	c1 2c       	mov	r12, r1
    6d06:	d1 2c       	mov	r13, r1
    6d08:	76 01       	movw	r14, r12
    6d0a:	c3 94       	inc	r12
    6d0c:	00 e0       	ldi	r16, 0x00	; 0
    6d0e:	10 e0       	ldi	r17, 0x00	; 0
    6d10:	20 e0       	ldi	r18, 0x00	; 0
    6d12:	30 e0       	ldi	r19, 0x00	; 0
    6d14:	a9 01       	movw	r20, r18
    6d16:	63 e0       	ldi	r22, 0x03	; 3
    6d18:	80 91 bb 08 	lds	r24, 0x08BB	; 0x8008bb <xTStartCheckTrv_1>
    6d1c:	90 91 bc 08 	lds	r25, 0x08BC	; 0x8008bc <xTStartCheckTrv_1+0x1>
    6d20:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xComutateTrv_1 ) != pdFALSE )          xTimerStop(xComutateTrv_1,1);
    6d24:	80 91 a7 08 	lds	r24, 0x08A7	; 0x8008a7 <xComutateTrv_1>
    6d28:	90 91 a8 08 	lds	r25, 0x08A8	; 0x8008a8 <xComutateTrv_1+0x1>
    6d2c:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6d30:	88 23       	and	r24, r24
    6d32:	09 f4       	brne	.+2      	; 0x6d36 <stop_timers+0x270>
    6d34:	1c c1       	rjmp	.+568    	; 0x6f6e <stop_timers+0x4a8>
    6d36:	c1 2c       	mov	r12, r1
    6d38:	d1 2c       	mov	r13, r1
    6d3a:	76 01       	movw	r14, r12
    6d3c:	c3 94       	inc	r12
    6d3e:	00 e0       	ldi	r16, 0x00	; 0
    6d40:	10 e0       	ldi	r17, 0x00	; 0
    6d42:	20 e0       	ldi	r18, 0x00	; 0
    6d44:	30 e0       	ldi	r19, 0x00	; 0
    6d46:	a9 01       	movw	r20, r18
    6d48:	63 e0       	ldi	r22, 0x03	; 3
    6d4a:	80 91 a7 08 	lds	r24, 0x08A7	; 0x8008a7 <xComutateTrv_1>
    6d4e:	90 91 a8 08 	lds	r25, 0x08A8	; 0x8008a8 <xComutateTrv_1+0x1>
    6d52:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    6d56:	0b c1       	rjmp	.+534    	; 0x6f6e <stop_timers+0x4a8>
	}
	else if (comp->Index==2)
    6d58:	02 97       	sbiw	r24, 0x02	; 2
    6d5a:	09 f0       	breq	.+2      	; 0x6d5e <stop_timers+0x298>
    6d5c:	08 c1       	rjmp	.+528    	; 0x6f6e <stop_timers+0x4a8>
	{
		if( xTimerIsTimerActive( xStartCompressor_2 ) != pdFALSE )      xTimerStop(xStartCompressor_2,1);
    6d5e:	80 91 4a 0a 	lds	r24, 0x0A4A	; 0x800a4a <xStartCompressor_2>
    6d62:	90 91 4b 0a 	lds	r25, 0x0A4B	; 0x800a4b <xStartCompressor_2+0x1>
    6d66:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6d6a:	88 23       	and	r24, r24
    6d6c:	81 f0       	breq	.+32     	; 0x6d8e <stop_timers+0x2c8>
    6d6e:	c1 2c       	mov	r12, r1
    6d70:	d1 2c       	mov	r13, r1
    6d72:	76 01       	movw	r14, r12
    6d74:	c3 94       	inc	r12
    6d76:	00 e0       	ldi	r16, 0x00	; 0
    6d78:	10 e0       	ldi	r17, 0x00	; 0
    6d7a:	20 e0       	ldi	r18, 0x00	; 0
    6d7c:	30 e0       	ldi	r19, 0x00	; 0
    6d7e:	a9 01       	movw	r20, r18
    6d80:	63 e0       	ldi	r22, 0x03	; 3
    6d82:	80 91 4a 0a 	lds	r24, 0x0A4A	; 0x800a4a <xStartCompressor_2>
    6d86:	90 91 4b 0a 	lds	r25, 0x0A4B	; 0x800a4b <xStartCompressor_2+0x1>
    6d8a:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartHeatPump_2 ) != pdFALSE )        xTimerStop(xStartHeatPump_2,1);
    6d8e:	80 91 98 09 	lds	r24, 0x0998	; 0x800998 <xStartHeatPump_2>
    6d92:	90 91 99 09 	lds	r25, 0x0999	; 0x800999 <xStartHeatPump_2+0x1>
    6d96:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6d9a:	88 23       	and	r24, r24
    6d9c:	81 f0       	breq	.+32     	; 0x6dbe <stop_timers+0x2f8>
    6d9e:	c1 2c       	mov	r12, r1
    6da0:	d1 2c       	mov	r13, r1
    6da2:	76 01       	movw	r14, r12
    6da4:	c3 94       	inc	r12
    6da6:	00 e0       	ldi	r16, 0x00	; 0
    6da8:	10 e0       	ldi	r17, 0x00	; 0
    6daa:	20 e0       	ldi	r18, 0x00	; 0
    6dac:	30 e0       	ldi	r19, 0x00	; 0
    6dae:	a9 01       	movw	r20, r18
    6db0:	63 e0       	ldi	r22, 0x03	; 3
    6db2:	80 91 98 09 	lds	r24, 0x0998	; 0x800998 <xStartHeatPump_2>
    6db6:	90 91 99 09 	lds	r25, 0x0999	; 0x800999 <xStartHeatPump_2+0x1>
    6dba:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStartRevValve_2 ) != pdFALSE )		xTimerStop(xStartRevValve_2,1);
    6dbe:	80 91 22 0a 	lds	r24, 0x0A22	; 0x800a22 <xStartRevValve_2>
    6dc2:	90 91 23 0a 	lds	r25, 0x0A23	; 0x800a23 <xStartRevValve_2+0x1>
    6dc6:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6dca:	88 23       	and	r24, r24
    6dcc:	81 f0       	breq	.+32     	; 0x6dee <stop_timers+0x328>
    6dce:	c1 2c       	mov	r12, r1
    6dd0:	d1 2c       	mov	r13, r1
    6dd2:	76 01       	movw	r14, r12
    6dd4:	c3 94       	inc	r12
    6dd6:	00 e0       	ldi	r16, 0x00	; 0
    6dd8:	10 e0       	ldi	r17, 0x00	; 0
    6dda:	20 e0       	ldi	r18, 0x00	; 0
    6ddc:	30 e0       	ldi	r19, 0x00	; 0
    6dde:	a9 01       	movw	r20, r18
    6de0:	63 e0       	ldi	r22, 0x03	; 3
    6de2:	80 91 22 0a 	lds	r24, 0x0A22	; 0x800a22 <xStartRevValve_2>
    6de6:	90 91 23 0a 	lds	r25, 0x0A23	; 0x800a23 <xStartRevValve_2+0x1>
    6dea:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevOne_2_time ) != pdFALSE )    xTimerStop(xSwitchRevOne_2_time,1);
    6dee:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <xSwitchRevOne_2_time>
    6df2:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <xSwitchRevOne_2_time+0x1>
    6df6:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6dfa:	88 23       	and	r24, r24
    6dfc:	81 f0       	breq	.+32     	; 0x6e1e <stop_timers+0x358>
    6dfe:	c1 2c       	mov	r12, r1
    6e00:	d1 2c       	mov	r13, r1
    6e02:	76 01       	movw	r14, r12
    6e04:	c3 94       	inc	r12
    6e06:	00 e0       	ldi	r16, 0x00	; 0
    6e08:	10 e0       	ldi	r17, 0x00	; 0
    6e0a:	20 e0       	ldi	r18, 0x00	; 0
    6e0c:	30 e0       	ldi	r19, 0x00	; 0
    6e0e:	a9 01       	movw	r20, r18
    6e10:	63 e0       	ldi	r22, 0x03	; 3
    6e12:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <xSwitchRevOne_2_time>
    6e16:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <xSwitchRevOne_2_time+0x1>
    6e1a:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xSwitchRevTwo_2_time ) != pdFALSE )	xTimerStop(xSwitchRevTwo_1_time,1);
    6e1e:	80 91 4f 0a 	lds	r24, 0x0A4F	; 0x800a4f <xSwitchRevTwo_2_time>
    6e22:	90 91 50 0a 	lds	r25, 0x0A50	; 0x800a50 <xSwitchRevTwo_2_time+0x1>
    6e26:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6e2a:	88 23       	and	r24, r24
    6e2c:	81 f0       	breq	.+32     	; 0x6e4e <stop_timers+0x388>
    6e2e:	c1 2c       	mov	r12, r1
    6e30:	d1 2c       	mov	r13, r1
    6e32:	76 01       	movw	r14, r12
    6e34:	c3 94       	inc	r12
    6e36:	00 e0       	ldi	r16, 0x00	; 0
    6e38:	10 e0       	ldi	r17, 0x00	; 0
    6e3a:	20 e0       	ldi	r18, 0x00	; 0
    6e3c:	30 e0       	ldi	r19, 0x00	; 0
    6e3e:	a9 01       	movw	r20, r18
    6e40:	63 e0       	ldi	r22, 0x03	; 3
    6e42:	80 91 34 0a 	lds	r24, 0x0A34	; 0x800a34 <xSwitchRevTwo_1_time>
    6e46:	90 91 35 0a 	lds	r25, 0x0A35	; 0x800a35 <xSwitchRevTwo_1_time+0x1>
    6e4a:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopHeatPump_2 ) != pdFALSE )			xTimerStop(xStopHeatPump_2,1);
    6e4e:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <xStopHeatPump_2>
    6e52:	90 91 29 0a 	lds	r25, 0x0A29	; 0x800a29 <xStopHeatPump_2+0x1>
    6e56:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6e5a:	88 23       	and	r24, r24
    6e5c:	81 f0       	breq	.+32     	; 0x6e7e <stop_timers+0x3b8>
    6e5e:	c1 2c       	mov	r12, r1
    6e60:	d1 2c       	mov	r13, r1
    6e62:	76 01       	movw	r14, r12
    6e64:	c3 94       	inc	r12
    6e66:	00 e0       	ldi	r16, 0x00	; 0
    6e68:	10 e0       	ldi	r17, 0x00	; 0
    6e6a:	20 e0       	ldi	r18, 0x00	; 0
    6e6c:	30 e0       	ldi	r19, 0x00	; 0
    6e6e:	a9 01       	movw	r20, r18
    6e70:	63 e0       	ldi	r22, 0x03	; 3
    6e72:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <xStopHeatPump_2>
    6e76:	90 91 29 0a 	lds	r25, 0x0A29	; 0x800a29 <xStopHeatPump_2+0x1>
    6e7a:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopRevValve_2 ) != pdFALSE )			xTimerStop(xStopRevValve_2,1);
    6e7e:	80 91 b7 08 	lds	r24, 0x08B7	; 0x8008b7 <xStopRevValve_2>
    6e82:	90 91 b8 08 	lds	r25, 0x08B8	; 0x8008b8 <xStopRevValve_2+0x1>
    6e86:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6e8a:	88 23       	and	r24, r24
    6e8c:	81 f0       	breq	.+32     	; 0x6eae <stop_timers+0x3e8>
    6e8e:	c1 2c       	mov	r12, r1
    6e90:	d1 2c       	mov	r13, r1
    6e92:	76 01       	movw	r14, r12
    6e94:	c3 94       	inc	r12
    6e96:	00 e0       	ldi	r16, 0x00	; 0
    6e98:	10 e0       	ldi	r17, 0x00	; 0
    6e9a:	20 e0       	ldi	r18, 0x00	; 0
    6e9c:	30 e0       	ldi	r19, 0x00	; 0
    6e9e:	a9 01       	movw	r20, r18
    6ea0:	63 e0       	ldi	r22, 0x03	; 3
    6ea2:	80 91 b7 08 	lds	r24, 0x08B7	; 0x8008b7 <xStopRevValve_2>
    6ea6:	90 91 b8 08 	lds	r25, 0x08B8	; 0x8008b8 <xStopRevValve_2+0x1>
    6eaa:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xStopSource_2 ) != pdFALSE )			xTimerStop(xStopSource_2,1);
    6eae:	80 91 18 0a 	lds	r24, 0x0A18	; 0x800a18 <xStopSource_2>
    6eb2:	90 91 19 0a 	lds	r25, 0x0A19	; 0x800a19 <xStopSource_2+0x1>
    6eb6:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6eba:	88 23       	and	r24, r24
    6ebc:	81 f0       	breq	.+32     	; 0x6ede <stop_timers+0x418>
    6ebe:	c1 2c       	mov	r12, r1
    6ec0:	d1 2c       	mov	r13, r1
    6ec2:	76 01       	movw	r14, r12
    6ec4:	c3 94       	inc	r12
    6ec6:	00 e0       	ldi	r16, 0x00	; 0
    6ec8:	10 e0       	ldi	r17, 0x00	; 0
    6eca:	20 e0       	ldi	r18, 0x00	; 0
    6ecc:	30 e0       	ldi	r19, 0x00	; 0
    6ece:	a9 01       	movw	r20, r18
    6ed0:	63 e0       	ldi	r22, 0x03	; 3
    6ed2:	80 91 18 0a 	lds	r24, 0x0A18	; 0x800a18 <xStopSource_2>
    6ed6:	90 91 19 0a 	lds	r25, 0x0A19	; 0x800a19 <xStopSource_2+0x1>
    6eda:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckErrors_2 ) != pdFALSE )    xTimerStop(xTStartCheckErrors_2,1);
    6ede:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <xTStartCheckErrors_2>
    6ee2:	90 91 aa 08 	lds	r25, 0x08AA	; 0x8008aa <xTStartCheckErrors_2+0x1>
    6ee6:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6eea:	88 23       	and	r24, r24
    6eec:	81 f0       	breq	.+32     	; 0x6f0e <stop_timers+0x448>
    6eee:	c1 2c       	mov	r12, r1
    6ef0:	d1 2c       	mov	r13, r1
    6ef2:	76 01       	movw	r14, r12
    6ef4:	c3 94       	inc	r12
    6ef6:	00 e0       	ldi	r16, 0x00	; 0
    6ef8:	10 e0       	ldi	r17, 0x00	; 0
    6efa:	20 e0       	ldi	r18, 0x00	; 0
    6efc:	30 e0       	ldi	r19, 0x00	; 0
    6efe:	a9 01       	movw	r20, r18
    6f00:	63 e0       	ldi	r22, 0x03	; 3
    6f02:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <xTStartCheckErrors_2>
    6f06:	90 91 aa 08 	lds	r25, 0x08AA	; 0x8008aa <xTStartCheckErrors_2+0x1>
    6f0a:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xTStartCheckTrv_2 ) != pdFALSE )       xTimerStop(xTStartCheckTrv_2,1);
    6f0e:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <xTStartCheckTrv_2>
    6f12:	90 91 93 09 	lds	r25, 0x0993	; 0x800993 <xTStartCheckTrv_2+0x1>
    6f16:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6f1a:	88 23       	and	r24, r24
    6f1c:	81 f0       	breq	.+32     	; 0x6f3e <stop_timers+0x478>
    6f1e:	c1 2c       	mov	r12, r1
    6f20:	d1 2c       	mov	r13, r1
    6f22:	76 01       	movw	r14, r12
    6f24:	c3 94       	inc	r12
    6f26:	00 e0       	ldi	r16, 0x00	; 0
    6f28:	10 e0       	ldi	r17, 0x00	; 0
    6f2a:	20 e0       	ldi	r18, 0x00	; 0
    6f2c:	30 e0       	ldi	r19, 0x00	; 0
    6f2e:	a9 01       	movw	r20, r18
    6f30:	63 e0       	ldi	r22, 0x03	; 3
    6f32:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <xTStartCheckTrv_2>
    6f36:	90 91 93 09 	lds	r25, 0x0993	; 0x800993 <xTStartCheckTrv_2+0x1>
    6f3a:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
		if( xTimerIsTimerActive( xComutateTrv_2 ) != pdFALSE )          xTimerStop(xComutateTrv_2,1);
    6f3e:	80 91 9e 09 	lds	r24, 0x099E	; 0x80099e <xComutateTrv_2>
    6f42:	90 91 9f 09 	lds	r25, 0x099F	; 0x80099f <xComutateTrv_2+0x1>
    6f46:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    6f4a:	88 23       	and	r24, r24
    6f4c:	81 f0       	breq	.+32     	; 0x6f6e <stop_timers+0x4a8>
    6f4e:	c1 2c       	mov	r12, r1
    6f50:	d1 2c       	mov	r13, r1
    6f52:	76 01       	movw	r14, r12
    6f54:	c3 94       	inc	r12
    6f56:	00 e0       	ldi	r16, 0x00	; 0
    6f58:	10 e0       	ldi	r17, 0x00	; 0
    6f5a:	20 e0       	ldi	r18, 0x00	; 0
    6f5c:	30 e0       	ldi	r19, 0x00	; 0
    6f5e:	a9 01       	movw	r20, r18
    6f60:	63 e0       	ldi	r22, 0x03	; 3
    6f62:	80 91 9e 09 	lds	r24, 0x099E	; 0x80099e <xComutateTrv_2>
    6f66:	90 91 9f 09 	lds	r25, 0x099F	; 0x80099f <xComutateTrv_2+0x1>
    6f6a:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
}
    6f6e:	1f 91       	pop	r17
    6f70:	0f 91       	pop	r16
    6f72:	ff 90       	pop	r15
    6f74:	ef 90       	pop	r14
    6f76:	df 90       	pop	r13
    6f78:	cf 90       	pop	r12
    6f7a:	08 95       	ret

00006f7c <Comp_Stop>:
	}
	
	
}
//-------------------------------------------------------------------------Stop mod
void Comp_Stop(xCompressor *comp){
    6f7c:	cf 92       	push	r12
    6f7e:	df 92       	push	r13
    6f80:	ef 92       	push	r14
    6f82:	ff 92       	push	r15
    6f84:	0f 93       	push	r16
    6f86:	1f 93       	push	r17
    6f88:	cf 93       	push	r28
    6f8a:	df 93       	push	r29
    6f8c:	ec 01       	movw	r28, r24
	static time_t time_count_1;
	static time_t time_count_2;
	
	//xSerialxPrintf(&xSerial3Port,"StopCompressor\r\n");
	stop_timers(comp);
    6f8e:	9b dd       	rcall	.-1226   	; 0x6ac6 <stop_timers>
	comp->Cooling=comp->heatingWater=comp->Heating=false;
    6f90:	1a 82       	std	Y+2, r1	; 0x02
    6f92:	1c 82       	std	Y+4, r1	; 0x04
    6f94:	1b 82       	std	Y+3, r1	; 0x03
    comp->switchToMode=true;
    6f96:	81 e0       	ldi	r24, 0x01	; 1
    6f98:	88 83       	st	Y, r24
	if(comp->Index == 1)
    6f9a:	fe 01       	movw	r30, r28
    6f9c:	e2 59       	subi	r30, 0x92	; 146
    6f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    6fa0:	80 81       	ld	r24, Z
    6fa2:	91 81       	ldd	r25, Z+1	; 0x01
    6fa4:	81 30       	cpi	r24, 0x01	; 1
    6fa6:	91 05       	cpc	r25, r1
    6fa8:	09 f0       	breq	.+2      	; 0x6fac <Comp_Stop+0x30>
    6faa:	6c c0       	rjmp	.+216    	; 0x7084 <Comp_Stop+0x108>
	{
		if(PIN_COMPRESSOR_1 > 0)
    6fac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    6fb0:	85 ff       	sbrs	r24, 5
    6fb2:	57 c0       	rjmp	.+174    	; 0x7062 <Comp_Stop+0xe6>
		{
			STOP_COMPRESSOR_1;
    6fb4:	e2 e0       	ldi	r30, 0x02	; 2
    6fb6:	f1 e0       	ldi	r31, 0x01	; 1
    6fb8:	80 81       	ld	r24, Z
    6fba:	8f 7d       	andi	r24, 0xDF	; 223
    6fbc:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopCompressor_1\r\n");
    6fbe:	89 e2       	ldi	r24, 0x29	; 41
    6fc0:	95 e0       	ldi	r25, 0x05	; 5
    6fc2:	9f 93       	push	r25
    6fc4:	8f 93       	push	r24
    6fc6:	80 e6       	ldi	r24, 0x60	; 96
    6fc8:	97 e0       	ldi	r25, 0x07	; 7
    6fca:	9f 93       	push	r25
    6fcc:	8f 93       	push	r24
    6fce:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->checkErrors =false;
    6fd2:	1d 82       	std	Y+5, r1	; 0x05
			
			comp->checkTrv =false;
    6fd4:	19 82       	std	Y+1, r1	; 0x01
			comp->compOn=0;
    6fd6:	1b 86       	std	Y+11, r1	; 0x0b
			time_count_1+= difftime(time(&current_time), timeStartComp_1);
    6fd8:	c0 90 b1 08 	lds	r12, 0x08B1	; 0x8008b1 <timeStartComp_1>
    6fdc:	d0 90 b2 08 	lds	r13, 0x08B2	; 0x8008b2 <timeStartComp_1+0x1>
    6fe0:	e0 90 b3 08 	lds	r14, 0x08B3	; 0x8008b3 <timeStartComp_1+0x2>
    6fe4:	f0 90 b4 08 	lds	r15, 0x08B4	; 0x8008b4 <timeStartComp_1+0x3>
    6fe8:	8d eb       	ldi	r24, 0xBD	; 189
    6fea:	98 e0       	ldi	r25, 0x08	; 8
    6fec:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    6ff0:	a7 01       	movw	r20, r14
    6ff2:	96 01       	movw	r18, r12
    6ff4:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    6ff8:	c0 90 f9 06 	lds	r12, 0x06F9	; 0x8006f9 <time_count_1.3195>
    6ffc:	d0 90 fa 06 	lds	r13, 0x06FA	; 0x8006fa <time_count_1.3195+0x1>
    7000:	e0 90 fb 06 	lds	r14, 0x06FB	; 0x8006fb <time_count_1.3195+0x2>
    7004:	f0 90 fc 06 	lds	r15, 0x06FC	; 0x8006fc <time_count_1.3195+0x3>
    7008:	dc 01       	movw	r26, r24
    700a:	cb 01       	movw	r24, r22
    700c:	8c 0d       	add	r24, r12
    700e:	9d 1d       	adc	r25, r13
    7010:	ae 1d       	adc	r26, r14
    7012:	bf 1d       	adc	r27, r15
    7014:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <time_count_1.3195>
    7018:	90 93 fa 06 	sts	0x06FA, r25	; 0x8006fa <time_count_1.3195+0x1>
    701c:	a0 93 fb 06 	sts	0x06FB, r26	; 0x8006fb <time_count_1.3195+0x2>
    7020:	b0 93 fc 06 	sts	0x06FC, r27	; 0x8006fc <time_count_1.3195+0x3>
			
			//xSerialxPrintf(&xSerial3Port,"time_Compressor_=%d\r\n",time_count_1);
			if(time_count_1>ONE_HOUR){EEpromData.time_compressor_1++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_1=0;}
    7024:	0f 90       	pop	r0
    7026:	0f 90       	pop	r0
    7028:	0f 90       	pop	r0
    702a:	0f 90       	pop	r0
    702c:	81 31       	cpi	r24, 0x11	; 17
    702e:	9e 40       	sbci	r25, 0x0E	; 14
    7030:	a1 05       	cpc	r26, r1
    7032:	b1 05       	cpc	r27, r1
    7034:	b0 f0       	brcs	.+44     	; 0x7062 <Comp_Stop+0xe6>
    7036:	e2 ec       	ldi	r30, 0xC2	; 194
    7038:	f8 e0       	ldi	r31, 0x08	; 8
    703a:	82 ad       	ldd	r24, Z+58	; 0x3a
    703c:	93 ad       	ldd	r25, Z+59	; 0x3b
    703e:	01 96       	adiw	r24, 0x01	; 1
    7040:	93 af       	std	Z+59, r25	; 0x3b
    7042:	82 af       	std	Z+58, r24	; 0x3a
    7044:	40 e6       	ldi	r20, 0x60	; 96
    7046:	50 e0       	ldi	r21, 0x00	; 0
    7048:	60 e0       	ldi	r22, 0x00	; 0
    704a:	70 e0       	ldi	r23, 0x00	; 0
    704c:	cf 01       	movw	r24, r30
    704e:	0e 94 a7 5b 	call	0xb74e	; 0xb74e <eeprom_update_block>
    7052:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <time_count_1.3195>
    7056:	10 92 fa 06 	sts	0x06FA, r1	; 0x8006fa <time_count_1.3195+0x1>
    705a:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <time_count_1.3195+0x2>
    705e:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <time_count_1.3195+0x3>
			
		}
		xTimerStart(xSwitchRevOne_1_time, 0);
    7062:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    7066:	9b 01       	movw	r18, r22
    7068:	ac 01       	movw	r20, r24
    706a:	c1 2c       	mov	r12, r1
    706c:	d1 2c       	mov	r13, r1
    706e:	76 01       	movw	r14, r12
    7070:	00 e0       	ldi	r16, 0x00	; 0
    7072:	10 e0       	ldi	r17, 0x00	; 0
    7074:	61 e0       	ldi	r22, 0x01	; 1
    7076:	80 91 b5 08 	lds	r24, 0x08B5	; 0x8008b5 <xSwitchRevOne_1_time>
    707a:	90 91 b6 08 	lds	r25, 0x08B6	; 0x8008b6 <xSwitchRevOne_1_time+0x1>
    707e:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    7082:	71 c0       	rjmp	.+226    	; 0x7166 <Comp_Stop+0x1ea>
		
	}
	else if(comp->Index == 2)
    7084:	02 97       	sbiw	r24, 0x02	; 2
    7086:	09 f0       	breq	.+2      	; 0x708a <Comp_Stop+0x10e>
    7088:	6e c0       	rjmp	.+220    	; 0x7166 <Comp_Stop+0x1ea>
	{
		if(PIN_COMPRESSOR_2 > 0)
    708a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    708e:	86 ff       	sbrs	r24, 6
    7090:	5a c0       	rjmp	.+180    	; 0x7146 <Comp_Stop+0x1ca>
		{
			
			STOP_COMPRESSOR_2;
    7092:	e2 e0       	ldi	r30, 0x02	; 2
    7094:	f1 e0       	ldi	r31, 0x01	; 1
    7096:	80 81       	ld	r24, Z
    7098:	8f 7b       	andi	r24, 0xBF	; 191
    709a:	80 83       	st	Z, r24
			xSerialxPrintf(&xSerial3Port,"StopCompressor_2\r\n");
    709c:	8c e3       	ldi	r24, 0x3C	; 60
    709e:	95 e0       	ldi	r25, 0x05	; 5
    70a0:	9f 93       	push	r25
    70a2:	8f 93       	push	r24
    70a4:	80 e6       	ldi	r24, 0x60	; 96
    70a6:	97 e0       	ldi	r25, 0x07	; 7
    70a8:	9f 93       	push	r25
    70aa:	8f 93       	push	r24
    70ac:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
			comp->checkErrors =false;
    70b0:	1d 82       	std	Y+5, r1	; 0x05
			comp->switchToMode=true;
    70b2:	81 e0       	ldi	r24, 0x01	; 1
    70b4:	88 83       	st	Y, r24
			comp->checkTrv =false;
    70b6:	19 82       	std	Y+1, r1	; 0x01
			comp->compOn=0;
    70b8:	1b 86       	std	Y+11, r1	; 0x0b
			time_count_2+= difftime(time(&current_time), timeStartComp_2);
    70ba:	c0 90 5b 0a 	lds	r12, 0x0A5B	; 0x800a5b <timeStartComp_2>
    70be:	d0 90 5c 0a 	lds	r13, 0x0A5C	; 0x800a5c <timeStartComp_2+0x1>
    70c2:	e0 90 5d 0a 	lds	r14, 0x0A5D	; 0x800a5d <timeStartComp_2+0x2>
    70c6:	f0 90 5e 0a 	lds	r15, 0x0A5E	; 0x800a5e <timeStartComp_2+0x3>
    70ca:	8d eb       	ldi	r24, 0xBD	; 189
    70cc:	98 e0       	ldi	r25, 0x08	; 8
    70ce:	0e 94 94 05 	call	0xb28	; 0xb28 <time>
    70d2:	a7 01       	movw	r20, r14
    70d4:	96 01       	movw	r18, r12
    70d6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <difftime>
    70da:	c0 90 f5 06 	lds	r12, 0x06F5	; 0x8006f5 <time_count_2.3196>
    70de:	d0 90 f6 06 	lds	r13, 0x06F6	; 0x8006f6 <time_count_2.3196+0x1>
    70e2:	e0 90 f7 06 	lds	r14, 0x06F7	; 0x8006f7 <time_count_2.3196+0x2>
    70e6:	f0 90 f8 06 	lds	r15, 0x06F8	; 0x8006f8 <time_count_2.3196+0x3>
    70ea:	dc 01       	movw	r26, r24
    70ec:	cb 01       	movw	r24, r22
    70ee:	8c 0d       	add	r24, r12
    70f0:	9d 1d       	adc	r25, r13
    70f2:	ae 1d       	adc	r26, r14
    70f4:	bf 1d       	adc	r27, r15
    70f6:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <time_count_2.3196>
    70fa:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <time_count_2.3196+0x1>
    70fe:	a0 93 f7 06 	sts	0x06F7, r26	; 0x8006f7 <time_count_2.3196+0x2>
    7102:	b0 93 f8 06 	sts	0x06F8, r27	; 0x8006f8 <time_count_2.3196+0x3>
			if(time_count_2>ONE_HOUR){EEpromData.time_compressor_2++;eeprom_update_block((const void*)&EEpromData, (void*)0, sizeof (xEEdata));time_count_2=0;}
    7106:	0f 90       	pop	r0
    7108:	0f 90       	pop	r0
    710a:	0f 90       	pop	r0
    710c:	0f 90       	pop	r0
    710e:	81 31       	cpi	r24, 0x11	; 17
    7110:	9e 40       	sbci	r25, 0x0E	; 14
    7112:	a1 05       	cpc	r26, r1
    7114:	b1 05       	cpc	r27, r1
    7116:	b8 f0       	brcs	.+46     	; 0x7146 <Comp_Stop+0x1ca>
    7118:	e2 e1       	ldi	r30, 0x12	; 18
    711a:	f9 e0       	ldi	r31, 0x09	; 9
    711c:	80 81       	ld	r24, Z
    711e:	91 81       	ldd	r25, Z+1	; 0x01
    7120:	01 96       	adiw	r24, 0x01	; 1
    7122:	91 83       	std	Z+1, r25	; 0x01
    7124:	80 83       	st	Z, r24
    7126:	40 e6       	ldi	r20, 0x60	; 96
    7128:	50 e0       	ldi	r21, 0x00	; 0
    712a:	60 e0       	ldi	r22, 0x00	; 0
    712c:	70 e0       	ldi	r23, 0x00	; 0
    712e:	82 ec       	ldi	r24, 0xC2	; 194
    7130:	98 e0       	ldi	r25, 0x08	; 8
    7132:	0e 94 a7 5b 	call	0xb74e	; 0xb74e <eeprom_update_block>
    7136:	10 92 f5 06 	sts	0x06F5, r1	; 0x8006f5 <time_count_2.3196>
    713a:	10 92 f6 06 	sts	0x06F6, r1	; 0x8006f6 <time_count_2.3196+0x1>
    713e:	10 92 f7 06 	sts	0x06F7, r1	; 0x8006f7 <time_count_2.3196+0x2>
    7142:	10 92 f8 06 	sts	0x06F8, r1	; 0x8006f8 <time_count_2.3196+0x3>
			
		}
		xTimerStart(xSwitchRevOne_2_time, 0);
    7146:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    714a:	9b 01       	movw	r18, r22
    714c:	ac 01       	movw	r20, r24
    714e:	c1 2c       	mov	r12, r1
    7150:	d1 2c       	mov	r13, r1
    7152:	76 01       	movw	r14, r12
    7154:	00 e0       	ldi	r16, 0x00	; 0
    7156:	10 e0       	ldi	r17, 0x00	; 0
    7158:	61 e0       	ldi	r22, 0x01	; 1
    715a:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <xSwitchRevOne_2_time>
    715e:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <xSwitchRevOne_2_time+0x1>
    7162:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
	
	
}
    7166:	df 91       	pop	r29
    7168:	cf 91       	pop	r28
    716a:	1f 91       	pop	r17
    716c:	0f 91       	pop	r16
    716e:	ff 90       	pop	r15
    7170:	ef 90       	pop	r14
    7172:	df 90       	pop	r13
    7174:	cf 90       	pop	r12
    7176:	08 95       	ret

00007178 <goToMode>:
	else return OFF;

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void goToMode(xCompressor *comp)
{   //calibration(comp);
    7178:	cf 93       	push	r28
    717a:	df 93       	push	r29
    717c:	ec 01       	movw	r28, r24
	stop_timers(comp);
    717e:	a3 dc       	rcall	.-1722   	; 0x6ac6 <stop_timers>
	startTrvTimer(comp);
    7180:	ce 01       	movw	r24, r28
    7182:	0e 94 a2 50 	call	0xa144	; 0xa144 <startTrvTimer>
	//comp->switchToMode=true;
	
	StarSoursePump(comp);
    7186:	ce 01       	movw	r24, r28
    7188:	b5 db       	rcall	.-2198   	; 0x68f4 <StarSoursePump>
	//Comp_1.Steps = Fuzzy(&Comp_1,EEpromData.trv_corection_1);
	
}
    718a:	df 91       	pop	r29
    718c:	cf 91       	pop	r28
    718e:	08 95       	ret

00007190 <mod_pump>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void mod_pump( xCompressor *comp,xEEdata* eeData){
    7190:	2f 92       	push	r2
    7192:	3f 92       	push	r3
    7194:	4f 92       	push	r4
    7196:	5f 92       	push	r5
    7198:	6f 92       	push	r6
    719a:	7f 92       	push	r7
    719c:	8f 92       	push	r8
    719e:	9f 92       	push	r9
    71a0:	af 92       	push	r10
    71a2:	bf 92       	push	r11
    71a4:	cf 92       	push	r12
    71a6:	df 92       	push	r13
    71a8:	ef 92       	push	r14
    71aa:	ff 92       	push	r15
    71ac:	1f 93       	push	r17
    71ae:	cf 93       	push	r28
    71b0:	df 93       	push	r29
    71b2:	ec 01       	movw	r28, r24
    71b4:	1b 01       	movw	r2, r22

	uint8_t temp;
	temp = selmode(&EEpromData);
    71b6:	82 ec       	ldi	r24, 0xC2	; 194
    71b8:	98 e0       	ldi	r25, 0x08	; 8
    71ba:	5c dc       	rcall	.-1864   	; 0x6a74 <selmode>
    71bc:	18 2f       	mov	r17, r24
	if(temp!=comp->modeOfPump ){comp->modeOfPump=temp; Comp_Stop(comp);}
    71be:	88 89       	ldd	r24, Y+16	; 0x10
    71c0:	18 17       	cp	r17, r24
    71c2:	19 f0       	breq	.+6      	; 0x71ca <mod_pump+0x3a>
    71c4:	18 8b       	std	Y+16, r17	; 0x10
    71c6:	ce 01       	movw	r24, r28
    71c8:	d9 de       	rcall	.-590    	; 0x6f7c <Comp_Stop>

	switch(temp){
    71ca:	13 30       	cpi	r17, 0x03	; 3
    71cc:	09 f4       	brne	.+2      	; 0x71d0 <mod_pump+0x40>
    71ce:	c8 c0       	rjmp	.+400    	; 0x7360 <mod_pump+0x1d0>
    71d0:	30 f4       	brcc	.+12     	; 0x71de <mod_pump+0x4e>
    71d2:	11 30       	cpi	r17, 0x01	; 1
    71d4:	59 f0       	breq	.+22     	; 0x71ec <mod_pump+0x5c>
    71d6:	12 30       	cpi	r17, 0x02	; 2
    71d8:	09 f4       	brne	.+2      	; 0x71dc <mod_pump+0x4c>
    71da:	6a c0       	rjmp	.+212    	; 0x72b0 <mod_pump+0x120>
    71dc:	14 c5       	rjmp	.+2600   	; 0x7c06 <mod_pump+0xa76>
    71de:	14 30       	cpi	r17, 0x04	; 4
    71e0:	09 f4       	brne	.+2      	; 0x71e4 <mod_pump+0x54>
    71e2:	18 c1       	rjmp	.+560    	; 0x7414 <mod_pump+0x284>
    71e4:	15 30       	cpi	r17, 0x05	; 5
    71e6:	09 f4       	brne	.+2      	; 0x71ea <mod_pump+0x5a>
    71e8:	62 c2       	rjmp	.+1220   	; 0x76ae <mod_pump+0x51e>
    71ea:	0d c5       	rjmp	.+2586   	; 0x7c06 <mod_pump+0xa76>
		case DHW: {
		if(comp->Index==1){
    71ec:	fe 01       	movw	r30, r28
    71ee:	e2 59       	subi	r30, 0x92	; 146
    71f0:	ff 4f       	sbci	r31, 0xFF	; 255
    71f2:	80 81       	ld	r24, Z
    71f4:	91 81       	ldd	r25, Z+1	; 0x01
    71f6:	01 97       	sbiw	r24, 0x01	; 1
    71f8:	09 f0       	breq	.+2      	; 0x71fc <mod_pump+0x6c>
    71fa:	05 c5       	rjmp	.+2570   	; 0x7c06 <mod_pump+0xa76>
			if ( comp->Dhw_Temp > eeData->Set_DHW && comp->heatingWater && !comp->switchToMode) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp);}
    71fc:	8a 88       	ldd	r8, Y+18	; 0x12
    71fe:	9b 88       	ldd	r9, Y+19	; 0x13
    7200:	ac 88       	ldd	r10, Y+20	; 0x14
    7202:	bd 88       	ldd	r11, Y+21	; 0x15
    7204:	f1 01       	movw	r30, r2
    7206:	e3 8c       	ldd	r14, Z+27	; 0x1b
    7208:	f1 2c       	mov	r15, r1
    720a:	b7 01       	movw	r22, r14
    720c:	0f 2c       	mov	r0, r15
    720e:	00 0c       	add	r0, r0
    7210:	88 0b       	sbc	r24, r24
    7212:	99 0b       	sbc	r25, r25
    7214:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    7218:	9b 01       	movw	r18, r22
    721a:	ac 01       	movw	r20, r24
    721c:	c5 01       	movw	r24, r10
    721e:	b4 01       	movw	r22, r8
    7220:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    7224:	18 16       	cp	r1, r24
    7226:	6c f4       	brge	.+26     	; 0x7242 <mod_pump+0xb2>
    7228:	8c 81       	ldd	r24, Y+4	; 0x04
    722a:	88 23       	and	r24, r24
    722c:	09 f4       	brne	.+2      	; 0x7230 <mod_pump+0xa0>
    722e:	82 c3       	rjmp	.+1796   	; 0x7934 <mod_pump+0x7a4>
    7230:	88 81       	ld	r24, Y
    7232:	81 11       	cpse	r24, r1
    7234:	e8 c4       	rjmp	.+2512   	; 0x7c06 <mod_pump+0xa76>
    7236:	1c 82       	std	Y+4, r1	; 0x04
    7238:	ce 01       	movw	r24, r28
    723a:	a0 de       	rcall	.-704    	; 0x6f7c <Comp_Stop>
    723c:	ce 01       	movw	r24, r28
    723e:	0e 94 da 50 	call	0xa1b4	; 0xa1b4 <stopTrvTimer>
			if ( comp->Dhw_Temp < (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->switchToMode){calibration(comp);Comp_1.error=0; comp->heatingWater=true; goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_Dhw\r\n");}//Start_Dhw();
    7242:	f1 01       	movw	r30, r2
    7244:	63 8d       	ldd	r22, Z+27	; 0x1b
    7246:	70 e0       	ldi	r23, 0x00	; 0
    7248:	86 8d       	ldd	r24, Z+30	; 0x1e
    724a:	68 1b       	sub	r22, r24
    724c:	71 09       	sbc	r23, r1
    724e:	07 2e       	mov	r0, r23
    7250:	00 0c       	add	r0, r0
    7252:	88 0b       	sbc	r24, r24
    7254:	99 0b       	sbc	r25, r25
    7256:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    725a:	9b 01       	movw	r18, r22
    725c:	ac 01       	movw	r20, r24
    725e:	6a 89       	ldd	r22, Y+18	; 0x12
    7260:	7b 89       	ldd	r23, Y+19	; 0x13
    7262:	8c 89       	ldd	r24, Y+20	; 0x14
    7264:	9d 89       	ldd	r25, Y+21	; 0x15
    7266:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    726a:	88 23       	and	r24, r24
    726c:	0c f0       	brlt	.+2      	; 0x7270 <mod_pump+0xe0>
    726e:	cb c4       	rjmp	.+2454   	; 0x7c06 <mod_pump+0xa76>
    7270:	8c 81       	ldd	r24, Y+4	; 0x04
    7272:	81 11       	cpse	r24, r1
    7274:	c8 c4       	rjmp	.+2448   	; 0x7c06 <mod_pump+0xa76>
    7276:	88 81       	ld	r24, Y
    7278:	81 11       	cpse	r24, r1
    727a:	c5 c4       	rjmp	.+2442   	; 0x7c06 <mod_pump+0xa76>
    727c:	ce 01       	movw	r24, r28
    727e:	0e 94 42 52 	call	0xa484	; 0xa484 <calibration>
    7282:	10 92 8f 09 	sts	0x098F, r1	; 0x80098f <Comp_1+0x6d>
    7286:	10 92 8e 09 	sts	0x098E, r1	; 0x80098e <Comp_1+0x6c>
    728a:	81 e0       	ldi	r24, 0x01	; 1
    728c:	8c 83       	std	Y+4, r24	; 0x04
    728e:	ce 01       	movw	r24, r28
    7290:	73 df       	rcall	.-282    	; 0x7178 <goToMode>
    7292:	8f e4       	ldi	r24, 0x4F	; 79
    7294:	95 e0       	ldi	r25, 0x05	; 5
    7296:	9f 93       	push	r25
    7298:	8f 93       	push	r24
    729a:	80 e6       	ldi	r24, 0x60	; 96
    729c:	97 e0       	ldi	r25, 0x07	; 7
    729e:	9f 93       	push	r25
    72a0:	8f 93       	push	r24
    72a2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    72a6:	0f 90       	pop	r0
    72a8:	0f 90       	pop	r0
    72aa:	0f 90       	pop	r0
    72ac:	0f 90       	pop	r0
    72ae:	ab c4       	rjmp	.+2390   	; 0x7c06 <mod_pump+0xa76>
		
		case HEAT:{
			//xSerialxPrintf(&xSerial3Port,"Set_Heating =%d\r\n,diffHEAT =%d\r\n,Bac_Temp =%f\r\n",eeData->Set_Heating,eeData->diffHEAT,data->Bac_Temp);
			//xSerialxPrintf(&xSerial3Port,"diffHEAT =%d\r\n",eeData->diffHEAT);
			//xSerialxPrintf(&xSerial3Port,"heat mode\r\n");
			if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {comp->Heating=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat\r\n");}
    72b0:	8e 88       	ldd	r8, Y+22	; 0x16
    72b2:	9f 88       	ldd	r9, Y+23	; 0x17
    72b4:	a8 8c       	ldd	r10, Y+24	; 0x18
    72b6:	b9 8c       	ldd	r11, Y+25	; 0x19
    72b8:	f1 01       	movw	r30, r2
    72ba:	e1 8c       	ldd	r14, Z+25	; 0x19
    72bc:	f1 2c       	mov	r15, r1
    72be:	84 8d       	ldd	r24, Z+28	; 0x1c
    72c0:	b7 01       	movw	r22, r14
    72c2:	68 1b       	sub	r22, r24
    72c4:	71 09       	sbc	r23, r1
    72c6:	07 2e       	mov	r0, r23
    72c8:	00 0c       	add	r0, r0
    72ca:	88 0b       	sbc	r24, r24
    72cc:	99 0b       	sbc	r25, r25
    72ce:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    72d2:	9b 01       	movw	r18, r22
    72d4:	ac 01       	movw	r20, r24
    72d6:	c5 01       	movw	r24, r10
    72d8:	b4 01       	movw	r22, r8
    72da:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    72de:	88 23       	and	r24, r24
    72e0:	fc f4       	brge	.+62     	; 0x7320 <mod_pump+0x190>
    72e2:	8a 81       	ldd	r24, Y+2	; 0x02
    72e4:	81 11       	cpse	r24, r1
    72e6:	3b c3       	rjmp	.+1654   	; 0x795e <mod_pump+0x7ce>
    72e8:	88 81       	ld	r24, Y
    72ea:	81 11       	cpse	r24, r1
    72ec:	8c c4       	rjmp	.+2328   	; 0x7c06 <mod_pump+0xa76>
    72ee:	81 e0       	ldi	r24, 0x01	; 1
    72f0:	8a 83       	std	Y+2, r24	; 0x02
    72f2:	ce 01       	movw	r24, r28
    72f4:	0e 94 42 52 	call	0xa484	; 0xa484 <calibration>
    72f8:	10 92 8f 09 	sts	0x098F, r1	; 0x80098f <Comp_1+0x6d>
    72fc:	10 92 8e 09 	sts	0x098E, r1	; 0x80098e <Comp_1+0x6c>
    7300:	ce 01       	movw	r24, r28
    7302:	3a df       	rcall	.-396    	; 0x7178 <goToMode>
    7304:	8b e5       	ldi	r24, 0x5B	; 91
    7306:	95 e0       	ldi	r25, 0x05	; 5
    7308:	9f 93       	push	r25
    730a:	8f 93       	push	r24
    730c:	80 e6       	ldi	r24, 0x60	; 96
    730e:	97 e0       	ldi	r25, 0x07	; 7
    7310:	9f 93       	push	r25
    7312:	8f 93       	push	r24
    7314:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7318:	0f 90       	pop	r0
    731a:	0f 90       	pop	r0
    731c:	0f 90       	pop	r0
    731e:	0f 90       	pop	r0
			if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    7320:	f1 01       	movw	r30, r2
    7322:	61 8d       	ldd	r22, Z+25	; 0x19
    7324:	70 e0       	ldi	r23, 0x00	; 0
    7326:	80 e0       	ldi	r24, 0x00	; 0
    7328:	90 e0       	ldi	r25, 0x00	; 0
    732a:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    732e:	9b 01       	movw	r18, r22
    7330:	ac 01       	movw	r20, r24
    7332:	6e 89       	ldd	r22, Y+22	; 0x16
    7334:	7f 89       	ldd	r23, Y+23	; 0x17
    7336:	88 8d       	ldd	r24, Y+24	; 0x18
    7338:	99 8d       	ldd	r25, Y+25	; 0x19
    733a:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    733e:	18 16       	cp	r1, r24
    7340:	0c f0       	brlt	.+2      	; 0x7344 <mod_pump+0x1b4>
    7342:	61 c4       	rjmp	.+2242   	; 0x7c06 <mod_pump+0xa76>
    7344:	8a 81       	ldd	r24, Y+2	; 0x02
    7346:	88 23       	and	r24, r24
    7348:	09 f4       	brne	.+2      	; 0x734c <mod_pump+0x1bc>
    734a:	5d c4       	rjmp	.+2234   	; 0x7c06 <mod_pump+0xa76>
    734c:	88 81       	ld	r24, Y
    734e:	81 11       	cpse	r24, r1
    7350:	5a c4       	rjmp	.+2228   	; 0x7c06 <mod_pump+0xa76>
    7352:	1a 82       	std	Y+2, r1	; 0x02
    7354:	ce 01       	movw	r24, r28
    7356:	12 de       	rcall	.-988    	; 0x6f7c <Comp_Stop>
    7358:	ce 01       	movw	r24, r28
    735a:	0e 94 da 50 	call	0xa1b4	; 0xa1b4 <stopTrvTimer>
    735e:	53 c4       	rjmp	.+2214   	; 0x7c06 <mod_pump+0xa76>
		} break;
		
		case COOL:{
			//xSerialxPrintf(&xSerial3Port,"COOL mode\r\n");
			if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
    7360:	8e 88       	ldd	r8, Y+22	; 0x16
    7362:	9f 88       	ldd	r9, Y+23	; 0x17
    7364:	a8 8c       	ldd	r10, Y+24	; 0x18
    7366:	b9 8c       	ldd	r11, Y+25	; 0x19
    7368:	f1 01       	movw	r30, r2
    736a:	e2 8c       	ldd	r14, Z+26	; 0x1a
    736c:	f1 2c       	mov	r15, r1
    736e:	b7 01       	movw	r22, r14
    7370:	0f 2c       	mov	r0, r15
    7372:	00 0c       	add	r0, r0
    7374:	88 0b       	sbc	r24, r24
    7376:	99 0b       	sbc	r25, r25
    7378:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    737c:	9b 01       	movw	r18, r22
    737e:	ac 01       	movw	r20, r24
    7380:	c5 01       	movw	r24, r10
    7382:	b4 01       	movw	r22, r8
    7384:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    7388:	88 23       	and	r24, r24
    738a:	6c f4       	brge	.+26     	; 0x73a6 <mod_pump+0x216>
    738c:	8b 81       	ldd	r24, Y+3	; 0x03
    738e:	88 23       	and	r24, r24
    7390:	09 f4       	brne	.+2      	; 0x7394 <mod_pump+0x204>
    7392:	f5 c2       	rjmp	.+1514   	; 0x797e <mod_pump+0x7ee>
    7394:	88 81       	ld	r24, Y
    7396:	81 11       	cpse	r24, r1
    7398:	36 c4       	rjmp	.+2156   	; 0x7c06 <mod_pump+0xa76>
    739a:	1b 82       	std	Y+3, r1	; 0x03
    739c:	ce 01       	movw	r24, r28
    739e:	ee dd       	rcall	.-1060   	; 0x6f7c <Comp_Stop>
    73a0:	ce 01       	movw	r24, r28
    73a2:	0e 94 da 50 	call	0xa1b4	; 0xa1b4 <stopTrvTimer>
			if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {comp->Cooling=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool\r\n");}//
    73a6:	f1 01       	movw	r30, r2
    73a8:	82 8d       	ldd	r24, Z+26	; 0x1a
    73aa:	65 8d       	ldd	r22, Z+29	; 0x1d
    73ac:	70 e0       	ldi	r23, 0x00	; 0
    73ae:	68 0f       	add	r22, r24
    73b0:	71 1d       	adc	r23, r1
    73b2:	07 2e       	mov	r0, r23
    73b4:	00 0c       	add	r0, r0
    73b6:	88 0b       	sbc	r24, r24
    73b8:	99 0b       	sbc	r25, r25
    73ba:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    73be:	9b 01       	movw	r18, r22
    73c0:	ac 01       	movw	r20, r24
    73c2:	6e 89       	ldd	r22, Y+22	; 0x16
    73c4:	7f 89       	ldd	r23, Y+23	; 0x17
    73c6:	88 8d       	ldd	r24, Y+24	; 0x18
    73c8:	99 8d       	ldd	r25, Y+25	; 0x19
    73ca:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    73ce:	18 16       	cp	r1, r24
    73d0:	0c f0       	brlt	.+2      	; 0x73d4 <mod_pump+0x244>
    73d2:	19 c4       	rjmp	.+2098   	; 0x7c06 <mod_pump+0xa76>
    73d4:	8b 81       	ldd	r24, Y+3	; 0x03
    73d6:	81 11       	cpse	r24, r1
    73d8:	16 c4       	rjmp	.+2092   	; 0x7c06 <mod_pump+0xa76>
    73da:	88 81       	ld	r24, Y
    73dc:	81 11       	cpse	r24, r1
    73de:	13 c4       	rjmp	.+2086   	; 0x7c06 <mod_pump+0xa76>
    73e0:	81 e0       	ldi	r24, 0x01	; 1
    73e2:	8b 83       	std	Y+3, r24	; 0x03
    73e4:	ce 01       	movw	r24, r28
    73e6:	0e 94 42 52 	call	0xa484	; 0xa484 <calibration>
    73ea:	10 92 8f 09 	sts	0x098F, r1	; 0x80098f <Comp_1+0x6d>
    73ee:	10 92 8e 09 	sts	0x098E, r1	; 0x80098e <Comp_1+0x6c>
    73f2:	ce 01       	movw	r24, r28
    73f4:	c1 de       	rcall	.-638    	; 0x7178 <goToMode>
    73f6:	88 e6       	ldi	r24, 0x68	; 104
    73f8:	95 e0       	ldi	r25, 0x05	; 5
    73fa:	9f 93       	push	r25
    73fc:	8f 93       	push	r24
    73fe:	80 e6       	ldi	r24, 0x60	; 96
    7400:	97 e0       	ldi	r25, 0x07	; 7
    7402:	9f 93       	push	r25
    7404:	8f 93       	push	r24
    7406:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    740a:	0f 90       	pop	r0
    740c:	0f 90       	pop	r0
    740e:	0f 90       	pop	r0
    7410:	0f 90       	pop	r0
    7412:	f9 c3       	rjmp	.+2034   	; 0x7c06 <mod_pump+0xa76>
		}break;
		
		case HEAT_DHW:
		
		{
			if(comp->Index==1)
    7414:	fe 01       	movw	r30, r28
    7416:	e2 59       	subi	r30, 0x92	; 146
    7418:	ff 4f       	sbci	r31, 0xFF	; 255
    741a:	80 81       	ld	r24, Z
    741c:	91 81       	ldd	r25, Z+1	; 0x01
    741e:	81 30       	cpi	r24, 0x01	; 1
    7420:	91 05       	cpc	r25, r1
    7422:	09 f0       	breq	.+2      	; 0x7426 <mod_pump+0x296>
    7424:	ed c0       	rjmp	.+474    	; 0x7600 <mod_pump+0x470>
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
    7426:	8a 88       	ldd	r8, Y+18	; 0x12
    7428:	9b 88       	ldd	r9, Y+19	; 0x13
    742a:	ac 88       	ldd	r10, Y+20	; 0x14
    742c:	bd 88       	ldd	r11, Y+21	; 0x15
    742e:	f1 01       	movw	r30, r2
    7430:	e3 8c       	ldd	r14, Z+27	; 0x1b
    7432:	f1 2c       	mov	r15, r1
    7434:	86 8d       	ldd	r24, Z+30	; 0x1e
    7436:	b7 01       	movw	r22, r14
    7438:	68 1b       	sub	r22, r24
    743a:	71 09       	sbc	r23, r1
    743c:	07 2e       	mov	r0, r23
    743e:	00 0c       	add	r0, r0
    7440:	88 0b       	sbc	r24, r24
    7442:	99 0b       	sbc	r25, r25
    7444:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    7448:	9b 01       	movw	r18, r22
    744a:	ac 01       	movw	r20, r24
    744c:	c5 01       	movw	r24, r10
    744e:	b4 01       	movw	r22, r8
    7450:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    7454:	88 23       	and	r24, r24
    7456:	1c f5       	brge	.+70     	; 0x749e <mod_pump+0x30e>
    7458:	8c 81       	ldd	r24, Y+4	; 0x04
    745a:	81 11       	cpse	r24, r1
    745c:	3c c3       	rjmp	.+1656   	; 0x7ad6 <mod_pump+0x946>
    745e:	8a 81       	ldd	r24, Y+2	; 0x02
    7460:	81 11       	cpse	r24, r1
    7462:	a2 c2       	rjmp	.+1348   	; 0x79a8 <mod_pump+0x818>
    7464:	88 81       	ld	r24, Y
    7466:	81 11       	cpse	r24, r1
    7468:	98 c3       	rjmp	.+1840   	; 0x7b9a <mod_pump+0xa0a>
    746a:	81 e0       	ldi	r24, 0x01	; 1
    746c:	8c 83       	std	Y+4, r24	; 0x04
    746e:	ce 01       	movw	r24, r28
    7470:	0e 94 42 52 	call	0xa484	; 0xa484 <calibration>
    7474:	10 92 8f 09 	sts	0x098F, r1	; 0x80098f <Comp_1+0x6d>
    7478:	10 92 8e 09 	sts	0x098E, r1	; 0x80098e <Comp_1+0x6c>
    747c:	ce 01       	movw	r24, r28
    747e:	7c de       	rcall	.-776    	; 0x7178 <goToMode>
    7480:	85 e7       	ldi	r24, 0x75	; 117
    7482:	95 e0       	ldi	r25, 0x05	; 5
    7484:	9f 93       	push	r25
    7486:	8f 93       	push	r24
    7488:	80 e6       	ldi	r24, 0x60	; 96
    748a:	97 e0       	ldi	r25, 0x07	; 7
    748c:	9f 93       	push	r25
    748e:	8f 93       	push	r24
    7490:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7494:	0f 90       	pop	r0
    7496:	0f 90       	pop	r0
    7498:	0f 90       	pop	r0
    749a:	0f 90       	pop	r0
    749c:	76 c0       	rjmp	.+236    	; 0x758a <mod_pump+0x3fa>
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    749e:	4e 88       	ldd	r4, Y+22	; 0x16
    74a0:	5f 88       	ldd	r5, Y+23	; 0x17
    74a2:	68 8c       	ldd	r6, Y+24	; 0x18
    74a4:	79 8c       	ldd	r7, Y+25	; 0x19
    74a6:	f1 01       	movw	r30, r2
    74a8:	c1 8c       	ldd	r12, Z+25	; 0x19
    74aa:	d1 2c       	mov	r13, r1
    74ac:	84 8d       	ldd	r24, Z+28	; 0x1c
    74ae:	b6 01       	movw	r22, r12
    74b0:	68 1b       	sub	r22, r24
    74b2:	71 09       	sbc	r23, r1
    74b4:	07 2e       	mov	r0, r23
    74b6:	00 0c       	add	r0, r0
    74b8:	88 0b       	sbc	r24, r24
    74ba:	99 0b       	sbc	r25, r25
    74bc:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    74c0:	9b 01       	movw	r18, r22
    74c2:	ac 01       	movw	r20, r24
    74c4:	c3 01       	movw	r24, r6
    74c6:	b2 01       	movw	r22, r4
    74c8:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    74cc:	88 23       	and	r24, r24
    74ce:	1c f5       	brge	.+70     	; 0x7516 <mod_pump+0x386>
    74d0:	8c 81       	ldd	r24, Y+4	; 0x04
    74d2:	81 11       	cpse	r24, r1
    74d4:	84 c2       	rjmp	.+1288   	; 0x79de <mod_pump+0x84e>
    74d6:	8a 81       	ldd	r24, Y+2	; 0x02
    74d8:	81 11       	cpse	r24, r1
    74da:	1d c0       	rjmp	.+58     	; 0x7516 <mod_pump+0x386>
    74dc:	88 81       	ld	r24, Y
    74de:	81 11       	cpse	r24, r1
    74e0:	1a c0       	rjmp	.+52     	; 0x7516 <mod_pump+0x386>
    74e2:	ce 01       	movw	r24, r28
    74e4:	0e 94 42 52 	call	0xa484	; 0xa484 <calibration>
    74e8:	10 92 8f 09 	sts	0x098F, r1	; 0x80098f <Comp_1+0x6d>
    74ec:	10 92 8e 09 	sts	0x098E, r1	; 0x80098e <Comp_1+0x6c>
    74f0:	81 e0       	ldi	r24, 0x01	; 1
    74f2:	8a 83       	std	Y+2, r24	; 0x02
    74f4:	ce 01       	movw	r24, r28
    74f6:	40 de       	rcall	.-896    	; 0x7178 <goToMode>
    74f8:	83 e8       	ldi	r24, 0x83	; 131
    74fa:	95 e0       	ldi	r25, 0x05	; 5
    74fc:	9f 93       	push	r25
    74fe:	8f 93       	push	r24
    7500:	80 e6       	ldi	r24, 0x60	; 96
    7502:	97 e0       	ldi	r25, 0x07	; 7
    7504:	9f 93       	push	r25
    7506:	8f 93       	push	r24
    7508:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    750c:	0f 90       	pop	r0
    750e:	0f 90       	pop	r0
    7510:	0f 90       	pop	r0
    7512:	0f 90       	pop	r0
    7514:	3a c0       	rjmp	.+116    	; 0x758a <mod_pump+0x3fa>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7516:	b7 01       	movw	r22, r14
    7518:	ff 0c       	add	r15, r15
    751a:	88 0b       	sbc	r24, r24
    751c:	99 0b       	sbc	r25, r25
    751e:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    7522:	9b 01       	movw	r18, r22
    7524:	ac 01       	movw	r20, r24
    7526:	c5 01       	movw	r24, r10
    7528:	b4 01       	movw	r22, r8
    752a:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    752e:	18 16       	cp	r1, r24
    7530:	8c f4       	brge	.+34     	; 0x7554 <mod_pump+0x3c4>
    7532:	8c 81       	ldd	r24, Y+4	; 0x04
    7534:	88 23       	and	r24, r24
    7536:	09 f4       	brne	.+2      	; 0x753a <mod_pump+0x3aa>
    7538:	62 c2       	rjmp	.+1220   	; 0x79fe <mod_pump+0x86e>
    753a:	8a 81       	ldd	r24, Y+2	; 0x02
    753c:	81 11       	cpse	r24, r1
    753e:	25 c0       	rjmp	.+74     	; 0x758a <mod_pump+0x3fa>
    7540:	88 81       	ld	r24, Y
    7542:	81 11       	cpse	r24, r1
    7544:	22 c0       	rjmp	.+68     	; 0x758a <mod_pump+0x3fa>
    7546:	1c 82       	std	Y+4, r1	; 0x04
    7548:	ce 01       	movw	r24, r28
    754a:	18 dd       	rcall	.-1488   	; 0x6f7c <Comp_Stop>
    754c:	ce 01       	movw	r24, r28
    754e:	0e 94 da 50 	call	0xa1b4	; 0xa1b4 <stopTrvTimer>
    7552:	1b c0       	rjmp	.+54     	; 0x758a <mod_pump+0x3fa>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7554:	b6 01       	movw	r22, r12
    7556:	dd 0c       	add	r13, r13
    7558:	88 0b       	sbc	r24, r24
    755a:	99 0b       	sbc	r25, r25
    755c:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    7560:	a3 01       	movw	r20, r6
    7562:	92 01       	movw	r18, r4
    7564:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    7568:	88 23       	and	r24, r24
    756a:	7c f4       	brge	.+30     	; 0x758a <mod_pump+0x3fa>
    756c:	8c 81       	ldd	r24, Y+4	; 0x04
    756e:	81 11       	cpse	r24, r1
    7570:	0c c0       	rjmp	.+24     	; 0x758a <mod_pump+0x3fa>
    7572:	8a 81       	ldd	r24, Y+2	; 0x02
    7574:	88 23       	and	r24, r24
    7576:	49 f0       	breq	.+18     	; 0x758a <mod_pump+0x3fa>
    7578:	88 81       	ld	r24, Y
    757a:	81 11       	cpse	r24, r1
    757c:	06 c0       	rjmp	.+12     	; 0x758a <mod_pump+0x3fa>
    757e:	1a 82       	std	Y+2, r1	; 0x02
    7580:	ce 01       	movw	r24, r28
    7582:	fc dc       	rcall	.-1544   	; 0x6f7c <Comp_Stop>
    7584:	ce 01       	movw	r24, r28
    7586:	0e 94 da 50 	call	0xa1b4	; 0xa1b4 <stopTrvTimer>
				if(EEpromData.NombComp==2) if(comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW)&& !comp->heatingWater && comp->Heating && !comp->switchToMode){comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_again\r\n");}	
    758a:	80 91 e2 08 	lds	r24, 0x08E2	; 0x8008e2 <EEpromData+0x20>
    758e:	82 30       	cpi	r24, 0x02	; 2
    7590:	09 f0       	breq	.+2      	; 0x7594 <mod_pump+0x404>
    7592:	39 c3       	rjmp	.+1650   	; 0x7c06 <mod_pump+0xa76>
    7594:	f1 01       	movw	r30, r2
    7596:	63 8d       	ldd	r22, Z+27	; 0x1b
    7598:	70 e0       	ldi	r23, 0x00	; 0
    759a:	86 8d       	ldd	r24, Z+30	; 0x1e
    759c:	68 1b       	sub	r22, r24
    759e:	71 09       	sbc	r23, r1
    75a0:	07 2e       	mov	r0, r23
    75a2:	00 0c       	add	r0, r0
    75a4:	88 0b       	sbc	r24, r24
    75a6:	99 0b       	sbc	r25, r25
    75a8:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    75ac:	9b 01       	movw	r18, r22
    75ae:	ac 01       	movw	r20, r24
    75b0:	6a 89       	ldd	r22, Y+18	; 0x12
    75b2:	7b 89       	ldd	r23, Y+19	; 0x13
    75b4:	8c 89       	ldd	r24, Y+20	; 0x14
    75b6:	9d 89       	ldd	r25, Y+21	; 0x15
    75b8:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    75bc:	88 23       	and	r24, r24
    75be:	0c f0       	brlt	.+2      	; 0x75c2 <mod_pump+0x432>
    75c0:	22 c3       	rjmp	.+1604   	; 0x7c06 <mod_pump+0xa76>
    75c2:	8c 81       	ldd	r24, Y+4	; 0x04
    75c4:	81 11       	cpse	r24, r1
    75c6:	1f c3       	rjmp	.+1598   	; 0x7c06 <mod_pump+0xa76>
    75c8:	8a 81       	ldd	r24, Y+2	; 0x02
    75ca:	88 23       	and	r24, r24
    75cc:	09 f4       	brne	.+2      	; 0x75d0 <mod_pump+0x440>
    75ce:	1b c3       	rjmp	.+1590   	; 0x7c06 <mod_pump+0xa76>
    75d0:	88 81       	ld	r24, Y
    75d2:	81 11       	cpse	r24, r1
    75d4:	18 c3       	rjmp	.+1584   	; 0x7c06 <mod_pump+0xa76>
    75d6:	1a 82       	std	Y+2, r1	; 0x02
    75d8:	ce 01       	movw	r24, r28
    75da:	d0 dc       	rcall	.-1632   	; 0x6f7c <Comp_Stop>
    75dc:	ce 01       	movw	r24, r28
    75de:	0e 94 da 50 	call	0xa1b4	; 0xa1b4 <stopTrvTimer>
    75e2:	82 e9       	ldi	r24, 0x92	; 146
    75e4:	95 e0       	ldi	r25, 0x05	; 5
    75e6:	9f 93       	push	r25
    75e8:	8f 93       	push	r24
    75ea:	80 e6       	ldi	r24, 0x60	; 96
    75ec:	97 e0       	ldi	r25, 0x07	; 7
    75ee:	9f 93       	push	r25
    75f0:	8f 93       	push	r24
    75f2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    75f6:	0f 90       	pop	r0
    75f8:	0f 90       	pop	r0
    75fa:	0f 90       	pop	r0
    75fc:	0f 90       	pop	r0
    75fe:	03 c3       	rjmp	.+1542   	; 0x7c06 <mod_pump+0xa76>
			}
			else if(comp->Index==2)
    7600:	02 97       	sbiw	r24, 0x02	; 2
    7602:	09 f0       	breq	.+2      	; 0x7606 <mod_pump+0x476>
    7604:	00 c3       	rjmp	.+1536   	; 0x7c06 <mod_pump+0xa76>
			{
				if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {calibration(comp);comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_2\r\n");}
    7606:	8e 88       	ldd	r8, Y+22	; 0x16
    7608:	9f 88       	ldd	r9, Y+23	; 0x17
    760a:	a8 8c       	ldd	r10, Y+24	; 0x18
    760c:	b9 8c       	ldd	r11, Y+25	; 0x19
    760e:	f1 01       	movw	r30, r2
    7610:	e1 8c       	ldd	r14, Z+25	; 0x19
    7612:	f1 2c       	mov	r15, r1
    7614:	84 8d       	ldd	r24, Z+28	; 0x1c
    7616:	b7 01       	movw	r22, r14
    7618:	68 1b       	sub	r22, r24
    761a:	71 09       	sbc	r23, r1
    761c:	07 2e       	mov	r0, r23
    761e:	00 0c       	add	r0, r0
    7620:	88 0b       	sbc	r24, r24
    7622:	99 0b       	sbc	r25, r25
    7624:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    7628:	9b 01       	movw	r18, r22
    762a:	ac 01       	movw	r20, r24
    762c:	c5 01       	movw	r24, r10
    762e:	b4 01       	movw	r22, r8
    7630:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    7634:	88 23       	and	r24, r24
    7636:	dc f4       	brge	.+54     	; 0x766e <mod_pump+0x4de>
    7638:	8a 81       	ldd	r24, Y+2	; 0x02
    763a:	81 11       	cpse	r24, r1
    763c:	ee c1       	rjmp	.+988    	; 0x7a1a <mod_pump+0x88a>
    763e:	88 81       	ld	r24, Y
    7640:	81 11       	cpse	r24, r1
    7642:	e1 c2       	rjmp	.+1474   	; 0x7c06 <mod_pump+0xa76>
    7644:	ce 01       	movw	r24, r28
    7646:	0e 94 42 52 	call	0xa484	; 0xa484 <calibration>
    764a:	81 e0       	ldi	r24, 0x01	; 1
    764c:	8a 83       	std	Y+2, r24	; 0x02
    764e:	ce 01       	movw	r24, r28
    7650:	93 dd       	rcall	.-1242   	; 0x7178 <goToMode>
    7652:	84 ea       	ldi	r24, 0xA4	; 164
    7654:	95 e0       	ldi	r25, 0x05	; 5
    7656:	9f 93       	push	r25
    7658:	8f 93       	push	r24
    765a:	80 e6       	ldi	r24, 0x60	; 96
    765c:	97 e0       	ldi	r25, 0x07	; 7
    765e:	9f 93       	push	r25
    7660:	8f 93       	push	r24
    7662:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7666:	0f 90       	pop	r0
    7668:	0f 90       	pop	r0
    766a:	0f 90       	pop	r0
    766c:	0f 90       	pop	r0
				if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    766e:	f1 01       	movw	r30, r2
    7670:	61 8d       	ldd	r22, Z+25	; 0x19
    7672:	70 e0       	ldi	r23, 0x00	; 0
    7674:	80 e0       	ldi	r24, 0x00	; 0
    7676:	90 e0       	ldi	r25, 0x00	; 0
    7678:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    767c:	9b 01       	movw	r18, r22
    767e:	ac 01       	movw	r20, r24
    7680:	6e 89       	ldd	r22, Y+22	; 0x16
    7682:	7f 89       	ldd	r23, Y+23	; 0x17
    7684:	88 8d       	ldd	r24, Y+24	; 0x18
    7686:	99 8d       	ldd	r25, Y+25	; 0x19
    7688:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    768c:	18 16       	cp	r1, r24
    768e:	0c f0       	brlt	.+2      	; 0x7692 <mod_pump+0x502>
    7690:	ba c2       	rjmp	.+1396   	; 0x7c06 <mod_pump+0xa76>
    7692:	8a 81       	ldd	r24, Y+2	; 0x02
    7694:	88 23       	and	r24, r24
    7696:	09 f4       	brne	.+2      	; 0x769a <mod_pump+0x50a>
    7698:	b6 c2       	rjmp	.+1388   	; 0x7c06 <mod_pump+0xa76>
    769a:	88 81       	ld	r24, Y
    769c:	81 11       	cpse	r24, r1
    769e:	b3 c2       	rjmp	.+1382   	; 0x7c06 <mod_pump+0xa76>
    76a0:	1a 82       	std	Y+2, r1	; 0x02
    76a2:	ce 01       	movw	r24, r28
    76a4:	6b dc       	rcall	.-1834   	; 0x6f7c <Comp_Stop>
    76a6:	ce 01       	movw	r24, r28
    76a8:	0e 94 da 50 	call	0xa1b4	; 0xa1b4 <stopTrvTimer>
    76ac:	ac c2       	rjmp	.+1368   	; 0x7c06 <mod_pump+0xa76>
			
		}break;
		
		case COOL_DHW:
		{
			if(comp->Index==1)
    76ae:	fe 01       	movw	r30, r28
    76b0:	e2 59       	subi	r30, 0x92	; 146
    76b2:	ff 4f       	sbci	r31, 0xFF	; 255
    76b4:	80 81       	ld	r24, Z
    76b6:	91 81       	ldd	r25, Z+1	; 0x01
    76b8:	81 30       	cpi	r24, 0x01	; 1
    76ba:	91 05       	cpc	r25, r1
    76bc:	09 f0       	breq	.+2      	; 0x76c0 <mod_pump+0x530>
    76be:	e1 c0       	rjmp	.+450    	; 0x7882 <mod_pump+0x6f2>
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
    76c0:	8a 88       	ldd	r8, Y+18	; 0x12
    76c2:	9b 88       	ldd	r9, Y+19	; 0x13
    76c4:	ac 88       	ldd	r10, Y+20	; 0x14
    76c6:	bd 88       	ldd	r11, Y+21	; 0x15
    76c8:	f1 01       	movw	r30, r2
    76ca:	e3 8c       	ldd	r14, Z+27	; 0x1b
    76cc:	f1 2c       	mov	r15, r1
    76ce:	86 8d       	ldd	r24, Z+30	; 0x1e
    76d0:	b7 01       	movw	r22, r14
    76d2:	68 1b       	sub	r22, r24
    76d4:	71 09       	sbc	r23, r1
    76d6:	07 2e       	mov	r0, r23
    76d8:	00 0c       	add	r0, r0
    76da:	88 0b       	sbc	r24, r24
    76dc:	99 0b       	sbc	r25, r25
    76de:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    76e2:	9b 01       	movw	r18, r22
    76e4:	ac 01       	movw	r20, r24
    76e6:	c5 01       	movw	r24, r10
    76e8:	b4 01       	movw	r22, r8
    76ea:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    76ee:	88 23       	and	r24, r24
    76f0:	2c f5       	brge	.+74     	; 0x773c <mod_pump+0x5ac>
    76f2:	8c 81       	ldd	r24, Y+4	; 0x04
    76f4:	81 11       	cpse	r24, r1
    76f6:	21 c2       	rjmp	.+1090   	; 0x7b3a <mod_pump+0x9aa>
    76f8:	8b 81       	ldd	r24, Y+3	; 0x03
    76fa:	81 11       	cpse	r24, r1
    76fc:	9e c1       	rjmp	.+828    	; 0x7a3a <mod_pump+0x8aa>
    76fe:	88 81       	ld	r24, Y
    7700:	81 11       	cpse	r24, r1
    7702:	66 c2       	rjmp	.+1228   	; 0x7bd0 <mod_pump+0xa40>
    7704:	ff 24       	eor	r15, r15
    7706:	f3 94       	inc	r15
    7708:	fc 82       	std	Y+4, r15	; 0x04
    770a:	ce 01       	movw	r24, r28
    770c:	0e 94 42 52 	call	0xa484	; 0xa484 <calibration>
    7710:	10 92 8f 09 	sts	0x098F, r1	; 0x80098f <Comp_1+0x6d>
    7714:	10 92 8e 09 	sts	0x098E, r1	; 0x80098e <Comp_1+0x6c>
    7718:	fc 82       	std	Y+4, r15	; 0x04
    771a:	ce 01       	movw	r24, r28
    771c:	2d dd       	rcall	.-1446   	; 0x7178 <goToMode>
    771e:	83 eb       	ldi	r24, 0xB3	; 179
    7720:	95 e0       	ldi	r25, 0x05	; 5
    7722:	9f 93       	push	r25
    7724:	8f 93       	push	r24
    7726:	80 e6       	ldi	r24, 0x60	; 96
    7728:	97 e0       	ldi	r25, 0x07	; 7
    772a:	9f 93       	push	r25
    772c:	8f 93       	push	r24
    772e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    7732:	0f 90       	pop	r0
    7734:	0f 90       	pop	r0
    7736:	0f 90       	pop	r0
    7738:	0f 90       	pop	r0
    773a:	76 c0       	rjmp	.+236    	; 0x7828 <mod_pump+0x698>
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    773c:	4e 88       	ldd	r4, Y+22	; 0x16
    773e:	5f 88       	ldd	r5, Y+23	; 0x17
    7740:	68 8c       	ldd	r6, Y+24	; 0x18
    7742:	79 8c       	ldd	r7, Y+25	; 0x19
    7744:	f1 01       	movw	r30, r2
    7746:	c1 8c       	ldd	r12, Z+25	; 0x19
    7748:	d1 2c       	mov	r13, r1
    774a:	84 8d       	ldd	r24, Z+28	; 0x1c
    774c:	b6 01       	movw	r22, r12
    774e:	68 1b       	sub	r22, r24
    7750:	71 09       	sbc	r23, r1
    7752:	07 2e       	mov	r0, r23
    7754:	00 0c       	add	r0, r0
    7756:	88 0b       	sbc	r24, r24
    7758:	99 0b       	sbc	r25, r25
    775a:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    775e:	9b 01       	movw	r18, r22
    7760:	ac 01       	movw	r20, r24
    7762:	c3 01       	movw	r24, r6
    7764:	b2 01       	movw	r22, r4
    7766:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    776a:	88 23       	and	r24, r24
    776c:	1c f5       	brge	.+70     	; 0x77b4 <mod_pump+0x624>
    776e:	8c 81       	ldd	r24, Y+4	; 0x04
    7770:	81 11       	cpse	r24, r1
    7772:	7e c1       	rjmp	.+764    	; 0x7a70 <mod_pump+0x8e0>
    7774:	8b 81       	ldd	r24, Y+3	; 0x03
    7776:	81 11       	cpse	r24, r1
    7778:	1d c0       	rjmp	.+58     	; 0x77b4 <mod_pump+0x624>
    777a:	88 81       	ld	r24, Y
    777c:	81 11       	cpse	r24, r1
    777e:	1a c0       	rjmp	.+52     	; 0x77b4 <mod_pump+0x624>
    7780:	ce 01       	movw	r24, r28
    7782:	0e 94 42 52 	call	0xa484	; 0xa484 <calibration>
    7786:	10 92 8f 09 	sts	0x098F, r1	; 0x80098f <Comp_1+0x6d>
    778a:	10 92 8e 09 	sts	0x098E, r1	; 0x80098e <Comp_1+0x6c>
    778e:	81 e0       	ldi	r24, 0x01	; 1
    7790:	8b 83       	std	Y+3, r24	; 0x03
    7792:	ce 01       	movw	r24, r28
    7794:	f1 dc       	rcall	.-1566   	; 0x7178 <goToMode>
    7796:	85 ec       	ldi	r24, 0xC5	; 197
    7798:	95 e0       	ldi	r25, 0x05	; 5
    779a:	9f 93       	push	r25
    779c:	8f 93       	push	r24
    779e:	80 e6       	ldi	r24, 0x60	; 96
    77a0:	97 e0       	ldi	r25, 0x07	; 7
    77a2:	9f 93       	push	r25
    77a4:	8f 93       	push	r24
    77a6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    77aa:	0f 90       	pop	r0
    77ac:	0f 90       	pop	r0
    77ae:	0f 90       	pop	r0
    77b0:	0f 90       	pop	r0
    77b2:	3a c0       	rjmp	.+116    	; 0x7828 <mod_pump+0x698>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    77b4:	b7 01       	movw	r22, r14
    77b6:	ff 0c       	add	r15, r15
    77b8:	88 0b       	sbc	r24, r24
    77ba:	99 0b       	sbc	r25, r25
    77bc:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    77c0:	9b 01       	movw	r18, r22
    77c2:	ac 01       	movw	r20, r24
    77c4:	c5 01       	movw	r24, r10
    77c6:	b4 01       	movw	r22, r8
    77c8:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    77cc:	18 16       	cp	r1, r24
    77ce:	8c f4       	brge	.+34     	; 0x77f2 <mod_pump+0x662>
    77d0:	8c 81       	ldd	r24, Y+4	; 0x04
    77d2:	88 23       	and	r24, r24
    77d4:	09 f4       	brne	.+2      	; 0x77d8 <mod_pump+0x648>
    77d6:	5c c1       	rjmp	.+696    	; 0x7a90 <mod_pump+0x900>
    77d8:	8b 81       	ldd	r24, Y+3	; 0x03
    77da:	81 11       	cpse	r24, r1
    77dc:	25 c0       	rjmp	.+74     	; 0x7828 <mod_pump+0x698>
    77de:	88 81       	ld	r24, Y
    77e0:	81 11       	cpse	r24, r1
    77e2:	22 c0       	rjmp	.+68     	; 0x7828 <mod_pump+0x698>
    77e4:	1c 82       	std	Y+4, r1	; 0x04
    77e6:	ce 01       	movw	r24, r28
    77e8:	c9 db       	rcall	.-2158   	; 0x6f7c <Comp_Stop>
    77ea:	ce 01       	movw	r24, r28
    77ec:	0e 94 da 50 	call	0xa1b4	; 0xa1b4 <stopTrvTimer>
    77f0:	1b c0       	rjmp	.+54     	; 0x7828 <mod_pump+0x698>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    77f2:	b6 01       	movw	r22, r12
    77f4:	dd 0c       	add	r13, r13
    77f6:	88 0b       	sbc	r24, r24
    77f8:	99 0b       	sbc	r25, r25
    77fa:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    77fe:	a3 01       	movw	r20, r6
    7800:	92 01       	movw	r18, r4
    7802:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    7806:	88 23       	and	r24, r24
    7808:	7c f4       	brge	.+30     	; 0x7828 <mod_pump+0x698>
    780a:	8c 81       	ldd	r24, Y+4	; 0x04
    780c:	81 11       	cpse	r24, r1
    780e:	0c c0       	rjmp	.+24     	; 0x7828 <mod_pump+0x698>
    7810:	8b 81       	ldd	r24, Y+3	; 0x03
    7812:	88 23       	and	r24, r24
    7814:	49 f0       	breq	.+18     	; 0x7828 <mod_pump+0x698>
    7816:	88 81       	ld	r24, Y
    7818:	81 11       	cpse	r24, r1
    781a:	06 c0       	rjmp	.+12     	; 0x7828 <mod_pump+0x698>
    781c:	1b 82       	std	Y+3, r1	; 0x03
    781e:	ce 01       	movw	r24, r28
    7820:	ad db       	rcall	.-2214   	; 0x6f7c <Comp_Stop>
    7822:	ce 01       	movw	r24, r28
    7824:	0e 94 da 50 	call	0xa1b4	; 0xa1b4 <stopTrvTimer>
				if(EEpromData.NombComp==2) if (comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && comp->Cooling && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}	
    7828:	80 91 e2 08 	lds	r24, 0x08E2	; 0x8008e2 <EEpromData+0x20>
    782c:	82 30       	cpi	r24, 0x02	; 2
    782e:	09 f0       	breq	.+2      	; 0x7832 <mod_pump+0x6a2>
    7830:	ea c1       	rjmp	.+980    	; 0x7c06 <mod_pump+0xa76>
    7832:	f1 01       	movw	r30, r2
    7834:	63 8d       	ldd	r22, Z+27	; 0x1b
    7836:	70 e0       	ldi	r23, 0x00	; 0
    7838:	86 8d       	ldd	r24, Z+30	; 0x1e
    783a:	68 1b       	sub	r22, r24
    783c:	71 09       	sbc	r23, r1
    783e:	07 2e       	mov	r0, r23
    7840:	00 0c       	add	r0, r0
    7842:	88 0b       	sbc	r24, r24
    7844:	99 0b       	sbc	r25, r25
    7846:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    784a:	9b 01       	movw	r18, r22
    784c:	ac 01       	movw	r20, r24
    784e:	6a 89       	ldd	r22, Y+18	; 0x12
    7850:	7b 89       	ldd	r23, Y+19	; 0x13
    7852:	8c 89       	ldd	r24, Y+20	; 0x14
    7854:	9d 89       	ldd	r25, Y+21	; 0x15
    7856:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    785a:	88 23       	and	r24, r24
    785c:	0c f0       	brlt	.+2      	; 0x7860 <mod_pump+0x6d0>
    785e:	d3 c1       	rjmp	.+934    	; 0x7c06 <mod_pump+0xa76>
    7860:	8c 81       	ldd	r24, Y+4	; 0x04
    7862:	81 11       	cpse	r24, r1
    7864:	d0 c1       	rjmp	.+928    	; 0x7c06 <mod_pump+0xa76>
    7866:	8b 81       	ldd	r24, Y+3	; 0x03
    7868:	88 23       	and	r24, r24
    786a:	09 f4       	brne	.+2      	; 0x786e <mod_pump+0x6de>
    786c:	cc c1       	rjmp	.+920    	; 0x7c06 <mod_pump+0xa76>
    786e:	88 81       	ld	r24, Y
    7870:	81 11       	cpse	r24, r1
    7872:	c9 c1       	rjmp	.+914    	; 0x7c06 <mod_pump+0xa76>
    7874:	1b 82       	std	Y+3, r1	; 0x03
    7876:	ce 01       	movw	r24, r28
    7878:	81 db       	rcall	.-2302   	; 0x6f7c <Comp_Stop>
    787a:	ce 01       	movw	r24, r28
    787c:	0e 94 da 50 	call	0xa1b4	; 0xa1b4 <stopTrvTimer>
    7880:	c2 c1       	rjmp	.+900    	; 0x7c06 <mod_pump+0xa76>
			}
			else if(comp->Index==2)
    7882:	02 97       	sbiw	r24, 0x02	; 2
    7884:	09 f0       	breq	.+2      	; 0x7888 <mod_pump+0x6f8>
    7886:	bf c1       	rjmp	.+894    	; 0x7c06 <mod_pump+0xa76>
			{
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
    7888:	8e 88       	ldd	r8, Y+22	; 0x16
    788a:	9f 88       	ldd	r9, Y+23	; 0x17
    788c:	a8 8c       	ldd	r10, Y+24	; 0x18
    788e:	b9 8c       	ldd	r11, Y+25	; 0x19
    7890:	f1 01       	movw	r30, r2
    7892:	e2 8c       	ldd	r14, Z+26	; 0x1a
    7894:	f1 2c       	mov	r15, r1
    7896:	b7 01       	movw	r22, r14
    7898:	0f 2c       	mov	r0, r15
    789a:	00 0c       	add	r0, r0
    789c:	88 0b       	sbc	r24, r24
    789e:	99 0b       	sbc	r25, r25
    78a0:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    78a4:	9b 01       	movw	r18, r22
    78a6:	ac 01       	movw	r20, r24
    78a8:	c5 01       	movw	r24, r10
    78aa:	b4 01       	movw	r22, r8
    78ac:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    78b0:	88 23       	and	r24, r24
    78b2:	6c f4       	brge	.+26     	; 0x78ce <mod_pump+0x73e>
    78b4:	8b 81       	ldd	r24, Y+3	; 0x03
    78b6:	88 23       	and	r24, r24
    78b8:	09 f4       	brne	.+2      	; 0x78bc <mod_pump+0x72c>
    78ba:	f8 c0       	rjmp	.+496    	; 0x7aac <mod_pump+0x91c>
    78bc:	88 81       	ld	r24, Y
    78be:	81 11       	cpse	r24, r1
    78c0:	a2 c1       	rjmp	.+836    	; 0x7c06 <mod_pump+0xa76>
    78c2:	1b 82       	std	Y+3, r1	; 0x03
    78c4:	ce 01       	movw	r24, r28
    78c6:	5a db       	rcall	.-2380   	; 0x6f7c <Comp_Stop>
    78c8:	ce 01       	movw	r24, r28
    78ca:	0e 94 da 50 	call	0xa1b4	; 0xa1b4 <stopTrvTimer>
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
    78ce:	f1 01       	movw	r30, r2
    78d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    78d2:	65 8d       	ldd	r22, Z+29	; 0x1d
    78d4:	70 e0       	ldi	r23, 0x00	; 0
    78d6:	68 0f       	add	r22, r24
    78d8:	71 1d       	adc	r23, r1
    78da:	07 2e       	mov	r0, r23
    78dc:	00 0c       	add	r0, r0
    78de:	88 0b       	sbc	r24, r24
    78e0:	99 0b       	sbc	r25, r25
    78e2:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    78e6:	9b 01       	movw	r18, r22
    78e8:	ac 01       	movw	r20, r24
    78ea:	6e 89       	ldd	r22, Y+22	; 0x16
    78ec:	7f 89       	ldd	r23, Y+23	; 0x17
    78ee:	88 8d       	ldd	r24, Y+24	; 0x18
    78f0:	99 8d       	ldd	r25, Y+25	; 0x19
    78f2:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    78f6:	18 16       	cp	r1, r24
    78f8:	0c f0       	brlt	.+2      	; 0x78fc <mod_pump+0x76c>
    78fa:	85 c1       	rjmp	.+778    	; 0x7c06 <mod_pump+0xa76>
    78fc:	8b 81       	ldd	r24, Y+3	; 0x03
    78fe:	81 11       	cpse	r24, r1
    7900:	82 c1       	rjmp	.+772    	; 0x7c06 <mod_pump+0xa76>
    7902:	88 81       	ld	r24, Y
    7904:	81 11       	cpse	r24, r1
    7906:	7f c1       	rjmp	.+766    	; 0x7c06 <mod_pump+0xa76>
    7908:	ce 01       	movw	r24, r28
    790a:	0e 94 42 52 	call	0xa484	; 0xa484 <calibration>
    790e:	81 e0       	ldi	r24, 0x01	; 1
    7910:	8b 83       	std	Y+3, r24	; 0x03
    7912:	ce 01       	movw	r24, r28
    7914:	31 dc       	rcall	.-1950   	; 0x7178 <goToMode>
    7916:	87 ed       	ldi	r24, 0xD7	; 215
    7918:	95 e0       	ldi	r25, 0x05	; 5
    791a:	9f 93       	push	r25
    791c:	8f 93       	push	r24
    791e:	80 e6       	ldi	r24, 0x60	; 96
    7920:	97 e0       	ldi	r25, 0x07	; 7
    7922:	9f 93       	push	r25
    7924:	8f 93       	push	r24
    7926:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    792a:	0f 90       	pop	r0
    792c:	0f 90       	pop	r0
    792e:	0f 90       	pop	r0
    7930:	0f 90       	pop	r0
			}
		}break;
	}
}
    7932:	69 c1       	rjmp	.+722    	; 0x7c06 <mod_pump+0xa76>

	switch(temp){
		case DHW: {
		if(comp->Index==1){
			if ( comp->Dhw_Temp > eeData->Set_DHW && comp->heatingWater && !comp->switchToMode) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp);}
			if ( comp->Dhw_Temp < (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->switchToMode){calibration(comp);Comp_1.error=0; comp->heatingWater=true; goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_Dhw\r\n");}//Start_Dhw();
    7934:	f1 01       	movw	r30, r2
    7936:	86 8d       	ldd	r24, Z+30	; 0x1e
    7938:	b7 01       	movw	r22, r14
    793a:	68 1b       	sub	r22, r24
    793c:	71 09       	sbc	r23, r1
    793e:	07 2e       	mov	r0, r23
    7940:	00 0c       	add	r0, r0
    7942:	88 0b       	sbc	r24, r24
    7944:	99 0b       	sbc	r25, r25
    7946:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    794a:	9b 01       	movw	r18, r22
    794c:	ac 01       	movw	r20, r24
    794e:	c5 01       	movw	r24, r10
    7950:	b4 01       	movw	r22, r8
    7952:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    7956:	88 23       	and	r24, r24
    7958:	0c f4       	brge	.+2      	; 0x795c <mod_pump+0x7cc>
    795a:	8d cc       	rjmp	.-1766   	; 0x7276 <mod_pump+0xe6>
    795c:	54 c1       	rjmp	.+680    	; 0x7c06 <mod_pump+0xa76>
		case HEAT:{
			//xSerialxPrintf(&xSerial3Port,"Set_Heating =%d\r\n,diffHEAT =%d\r\n,Bac_Temp =%f\r\n",eeData->Set_Heating,eeData->diffHEAT,data->Bac_Temp);
			//xSerialxPrintf(&xSerial3Port,"diffHEAT =%d\r\n",eeData->diffHEAT);
			//xSerialxPrintf(&xSerial3Port,"heat mode\r\n");
			if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {comp->Heating=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat\r\n");}
			if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    795e:	b7 01       	movw	r22, r14
    7960:	ff 0c       	add	r15, r15
    7962:	88 0b       	sbc	r24, r24
    7964:	99 0b       	sbc	r25, r25
    7966:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    796a:	9b 01       	movw	r18, r22
    796c:	ac 01       	movw	r20, r24
    796e:	c5 01       	movw	r24, r10
    7970:	b4 01       	movw	r22, r8
    7972:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    7976:	18 16       	cp	r1, r24
    7978:	0c f4       	brge	.+2      	; 0x797c <mod_pump+0x7ec>
    797a:	e8 cc       	rjmp	.-1584   	; 0x734c <mod_pump+0x1bc>
    797c:	44 c1       	rjmp	.+648    	; 0x7c06 <mod_pump+0xa76>
		} break;
		
		case COOL:{
			//xSerialxPrintf(&xSerial3Port,"COOL mode\r\n");
			if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
			if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {comp->Cooling=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool\r\n");}//
    797e:	f1 01       	movw	r30, r2
    7980:	85 8d       	ldd	r24, Z+29	; 0x1d
    7982:	b7 01       	movw	r22, r14
    7984:	68 0f       	add	r22, r24
    7986:	71 1d       	adc	r23, r1
    7988:	07 2e       	mov	r0, r23
    798a:	00 0c       	add	r0, r0
    798c:	88 0b       	sbc	r24, r24
    798e:	99 0b       	sbc	r25, r25
    7990:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    7994:	9b 01       	movw	r18, r22
    7996:	ac 01       	movw	r20, r24
    7998:	c5 01       	movw	r24, r10
    799a:	b4 01       	movw	r22, r8
    799c:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    79a0:	18 16       	cp	r1, r24
    79a2:	0c f4       	brge	.+2      	; 0x79a6 <mod_pump+0x816>
    79a4:	1a cd       	rjmp	.-1484   	; 0x73da <mod_pump+0x24a>
    79a6:	2f c1       	rjmp	.+606    	; 0x7c06 <mod_pump+0xa76>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    79a8:	4e 88       	ldd	r4, Y+22	; 0x16
    79aa:	5f 88       	ldd	r5, Y+23	; 0x17
    79ac:	68 8c       	ldd	r6, Y+24	; 0x18
    79ae:	79 8c       	ldd	r7, Y+25	; 0x19
    79b0:	f1 01       	movw	r30, r2
    79b2:	c1 8c       	ldd	r12, Z+25	; 0x19
    79b4:	d1 2c       	mov	r13, r1
    79b6:	84 8d       	ldd	r24, Z+28	; 0x1c
    79b8:	b6 01       	movw	r22, r12
    79ba:	68 1b       	sub	r22, r24
    79bc:	71 09       	sbc	r23, r1
    79be:	07 2e       	mov	r0, r23
    79c0:	00 0c       	add	r0, r0
    79c2:	88 0b       	sbc	r24, r24
    79c4:	99 0b       	sbc	r25, r25
    79c6:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    79ca:	9b 01       	movw	r18, r22
    79cc:	ac 01       	movw	r20, r24
    79ce:	c3 01       	movw	r24, r6
    79d0:	b2 01       	movw	r22, r4
    79d2:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    79d6:	88 23       	and	r24, r24
    79d8:	0c f4       	brge	.+2      	; 0x79dc <mod_pump+0x84c>
    79da:	7d cd       	rjmp	.-1286   	; 0x74d6 <mod_pump+0x346>
    79dc:	97 c0       	rjmp	.+302    	; 0x7b0c <mod_pump+0x97c>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    79de:	b7 01       	movw	r22, r14
    79e0:	ff 0c       	add	r15, r15
    79e2:	88 0b       	sbc	r24, r24
    79e4:	99 0b       	sbc	r25, r25
    79e6:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    79ea:	9b 01       	movw	r18, r22
    79ec:	ac 01       	movw	r20, r24
    79ee:	c5 01       	movw	r24, r10
    79f0:	b4 01       	movw	r22, r8
    79f2:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    79f6:	18 16       	cp	r1, r24
    79f8:	0c f4       	brge	.+2      	; 0x79fc <mod_pump+0x86c>
    79fa:	9f cd       	rjmp	.-1218   	; 0x753a <mod_pump+0x3aa>
    79fc:	97 c0       	rjmp	.+302    	; 0x7b2c <mod_pump+0x99c>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    79fe:	b6 01       	movw	r22, r12
    7a00:	dd 0c       	add	r13, r13
    7a02:	88 0b       	sbc	r24, r24
    7a04:	99 0b       	sbc	r25, r25
    7a06:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    7a0a:	a3 01       	movw	r20, r6
    7a0c:	92 01       	movw	r18, r4
    7a0e:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    7a12:	88 23       	and	r24, r24
    7a14:	0c f4       	brge	.+2      	; 0x7a18 <mod_pump+0x888>
    7a16:	ad cd       	rjmp	.-1190   	; 0x7572 <mod_pump+0x3e2>
    7a18:	b8 cd       	rjmp	.-1168   	; 0x758a <mod_pump+0x3fa>
				if(EEpromData.NombComp==2) if(comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW)&& !comp->heatingWater && comp->Heating && !comp->switchToMode){comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_again\r\n");}	
			}
			else if(comp->Index==2)
			{
				if (comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->Heating && !comp->switchToMode) {calibration(comp);comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_2\r\n");}
				if (comp->Bac_Temp > eeData->Set_Heating && comp->Heating && !comp->switchToMode) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp);}
    7a1a:	b7 01       	movw	r22, r14
    7a1c:	ff 0c       	add	r15, r15
    7a1e:	88 0b       	sbc	r24, r24
    7a20:	99 0b       	sbc	r25, r25
    7a22:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    7a26:	9b 01       	movw	r18, r22
    7a28:	ac 01       	movw	r20, r24
    7a2a:	c5 01       	movw	r24, r10
    7a2c:	b4 01       	movw	r22, r8
    7a2e:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    7a32:	18 16       	cp	r1, r24
    7a34:	0c f4       	brge	.+2      	; 0x7a38 <mod_pump+0x8a8>
    7a36:	31 ce       	rjmp	.-926    	; 0x769a <mod_pump+0x50a>
    7a38:	e6 c0       	rjmp	.+460    	; 0x7c06 <mod_pump+0xa76>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7a3a:	4e 88       	ldd	r4, Y+22	; 0x16
    7a3c:	5f 88       	ldd	r5, Y+23	; 0x17
    7a3e:	68 8c       	ldd	r6, Y+24	; 0x18
    7a40:	79 8c       	ldd	r7, Y+25	; 0x19
    7a42:	f1 01       	movw	r30, r2
    7a44:	c1 8c       	ldd	r12, Z+25	; 0x19
    7a46:	d1 2c       	mov	r13, r1
    7a48:	84 8d       	ldd	r24, Z+28	; 0x1c
    7a4a:	b6 01       	movw	r22, r12
    7a4c:	68 1b       	sub	r22, r24
    7a4e:	71 09       	sbc	r23, r1
    7a50:	07 2e       	mov	r0, r23
    7a52:	00 0c       	add	r0, r0
    7a54:	88 0b       	sbc	r24, r24
    7a56:	99 0b       	sbc	r25, r25
    7a58:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    7a5c:	9b 01       	movw	r18, r22
    7a5e:	ac 01       	movw	r20, r24
    7a60:	c3 01       	movw	r24, r6
    7a62:	b2 01       	movw	r22, r4
    7a64:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    7a68:	88 23       	and	r24, r24
    7a6a:	0c f4       	brge	.+2      	; 0x7a6e <mod_pump+0x8de>
    7a6c:	83 ce       	rjmp	.-762    	; 0x7774 <mod_pump+0x5e4>
    7a6e:	7e c0       	rjmp	.+252    	; 0x7b6c <mod_pump+0x9dc>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7a70:	b7 01       	movw	r22, r14
    7a72:	ff 0c       	add	r15, r15
    7a74:	88 0b       	sbc	r24, r24
    7a76:	99 0b       	sbc	r25, r25
    7a78:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    7a7c:	9b 01       	movw	r18, r22
    7a7e:	ac 01       	movw	r20, r24
    7a80:	c5 01       	movw	r24, r10
    7a82:	b4 01       	movw	r22, r8
    7a84:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    7a88:	18 16       	cp	r1, r24
    7a8a:	0c f4       	brge	.+2      	; 0x7a8e <mod_pump+0x8fe>
    7a8c:	a5 ce       	rjmp	.-694    	; 0x77d8 <mod_pump+0x648>
    7a8e:	7e c0       	rjmp	.+252    	; 0x7b8c <mod_pump+0x9fc>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7a90:	b6 01       	movw	r22, r12
    7a92:	dd 0c       	add	r13, r13
    7a94:	88 0b       	sbc	r24, r24
    7a96:	99 0b       	sbc	r25, r25
    7a98:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    7a9c:	a3 01       	movw	r20, r6
    7a9e:	92 01       	movw	r18, r4
    7aa0:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    7aa4:	88 23       	and	r24, r24
    7aa6:	0c f4       	brge	.+2      	; 0x7aaa <mod_pump+0x91a>
    7aa8:	b3 ce       	rjmp	.-666    	; 0x7810 <mod_pump+0x680>
    7aaa:	be ce       	rjmp	.-644    	; 0x7828 <mod_pump+0x698>
				if(EEpromData.NombComp==2) if (comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && comp->Cooling && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}	
			}
			else if(comp->Index==2)
			{
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
    7aac:	f1 01       	movw	r30, r2
    7aae:	85 8d       	ldd	r24, Z+29	; 0x1d
    7ab0:	b7 01       	movw	r22, r14
    7ab2:	68 0f       	add	r22, r24
    7ab4:	71 1d       	adc	r23, r1
    7ab6:	07 2e       	mov	r0, r23
    7ab8:	00 0c       	add	r0, r0
    7aba:	88 0b       	sbc	r24, r24
    7abc:	99 0b       	sbc	r25, r25
    7abe:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    7ac2:	9b 01       	movw	r18, r22
    7ac4:	ac 01       	movw	r20, r24
    7ac6:	c5 01       	movw	r24, r10
    7ac8:	b4 01       	movw	r22, r8
    7aca:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    7ace:	18 16       	cp	r1, r24
    7ad0:	0c f4       	brge	.+2      	; 0x7ad4 <mod_pump+0x944>
    7ad2:	17 cf       	rjmp	.-466    	; 0x7902 <mod_pump+0x772>
    7ad4:	98 c0       	rjmp	.+304    	; 0x7c06 <mod_pump+0xa76>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    7ad6:	4e 88       	ldd	r4, Y+22	; 0x16
    7ad8:	5f 88       	ldd	r5, Y+23	; 0x17
    7ada:	68 8c       	ldd	r6, Y+24	; 0x18
    7adc:	79 8c       	ldd	r7, Y+25	; 0x19
    7ade:	f1 01       	movw	r30, r2
    7ae0:	c1 8c       	ldd	r12, Z+25	; 0x19
    7ae2:	d1 2c       	mov	r13, r1
    7ae4:	84 8d       	ldd	r24, Z+28	; 0x1c
    7ae6:	b6 01       	movw	r22, r12
    7ae8:	68 1b       	sub	r22, r24
    7aea:	71 09       	sbc	r23, r1
    7aec:	07 2e       	mov	r0, r23
    7aee:	00 0c       	add	r0, r0
    7af0:	88 0b       	sbc	r24, r24
    7af2:	99 0b       	sbc	r25, r25
    7af4:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    7af8:	9b 01       	movw	r18, r22
    7afa:	ac 01       	movw	r20, r24
    7afc:	c3 01       	movw	r24, r6
    7afe:	b2 01       	movw	r22, r4
    7b00:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    7b04:	88 23       	and	r24, r24
    7b06:	0c f4       	brge	.+2      	; 0x7b0a <mod_pump+0x97a>
    7b08:	6a cf       	rjmp	.-300    	; 0x79de <mod_pump+0x84e>
    7b0a:	05 cd       	rjmp	.-1526   	; 0x7516 <mod_pump+0x386>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7b0c:	b7 01       	movw	r22, r14
    7b0e:	ff 0c       	add	r15, r15
    7b10:	88 0b       	sbc	r24, r24
    7b12:	99 0b       	sbc	r25, r25
    7b14:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    7b18:	9b 01       	movw	r18, r22
    7b1a:	ac 01       	movw	r20, r24
    7b1c:	c5 01       	movw	r24, r10
    7b1e:	b4 01       	movw	r22, r8
    7b20:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    7b24:	18 16       	cp	r1, r24
    7b26:	0c f4       	brge	.+2      	; 0x7b2a <mod_pump+0x99a>
    7b28:	6a cf       	rjmp	.-300    	; 0x79fe <mod_pump+0x86e>
    7b2a:	14 cd       	rjmp	.-1496   	; 0x7554 <mod_pump+0x3c4>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Heating   && !comp->switchToMode  ) {comp->Heating=false;Comp_Stop(comp);stopTrvTimer(comp); }//
    7b2c:	b6 01       	movw	r22, r12
    7b2e:	dd 0c       	add	r13, r13
    7b30:	88 0b       	sbc	r24, r24
    7b32:	99 0b       	sbc	r25, r25
    7b34:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    7b38:	28 cd       	rjmp	.-1456   	; 0x758a <mod_pump+0x3fa>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7b3a:	4e 88       	ldd	r4, Y+22	; 0x16
    7b3c:	5f 88       	ldd	r5, Y+23	; 0x17
    7b3e:	68 8c       	ldd	r6, Y+24	; 0x18
    7b40:	79 8c       	ldd	r7, Y+25	; 0x19
    7b42:	f1 01       	movw	r30, r2
    7b44:	c1 8c       	ldd	r12, Z+25	; 0x19
    7b46:	d1 2c       	mov	r13, r1
    7b48:	84 8d       	ldd	r24, Z+28	; 0x1c
    7b4a:	b6 01       	movw	r22, r12
    7b4c:	68 1b       	sub	r22, r24
    7b4e:	71 09       	sbc	r23, r1
    7b50:	07 2e       	mov	r0, r23
    7b52:	00 0c       	add	r0, r0
    7b54:	88 0b       	sbc	r24, r24
    7b56:	99 0b       	sbc	r25, r25
    7b58:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    7b5c:	a3 01       	movw	r20, r6
    7b5e:	92 01       	movw	r18, r4
    7b60:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    7b64:	18 16       	cp	r1, r24
    7b66:	0c f4       	brge	.+2      	; 0x7b6a <mod_pump+0x9da>
    7b68:	83 cf       	rjmp	.-250    	; 0x7a70 <mod_pump+0x8e0>
    7b6a:	24 ce       	rjmp	.-952    	; 0x77b4 <mod_pump+0x624>
				else if( comp->Dhw_Temp>eeData->Set_DHW && comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7b6c:	b7 01       	movw	r22, r14
    7b6e:	ff 0c       	add	r15, r15
    7b70:	88 0b       	sbc	r24, r24
    7b72:	99 0b       	sbc	r25, r25
    7b74:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    7b78:	9b 01       	movw	r18, r22
    7b7a:	ac 01       	movw	r20, r24
    7b7c:	c5 01       	movw	r24, r10
    7b7e:	b4 01       	movw	r22, r8
    7b80:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    7b84:	18 16       	cp	r1, r24
    7b86:	0c f4       	brge	.+2      	; 0x7b8a <mod_pump+0x9fa>
    7b88:	83 cf       	rjmp	.-250    	; 0x7a90 <mod_pump+0x900>
    7b8a:	33 ce       	rjmp	.-922    	; 0x77f2 <mod_pump+0x662>
				else if (comp->Bac_Temp>eeData->Set_Heating && !comp->heatingWater && comp->Cooling  && !comp->switchToMode  ) {comp->Cooling=false;Comp_Stop(comp); stopTrvTimer(comp);}//
    7b8c:	b6 01       	movw	r22, r12
    7b8e:	dd 0c       	add	r13, r13
    7b90:	88 0b       	sbc	r24, r24
    7b92:	99 0b       	sbc	r25, r25
    7b94:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    7b98:	47 ce       	rjmp	.-882    	; 0x7828 <mod_pump+0x698>
		
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhw_1\r\n"); }//avrSerialPrintf("Start_dhwheat_1\r\n" );
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Heating && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Heating=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_heat_1\r\n");}//avrSerialPrintf("Start_heatdhw_1\r\n" );
    7b9a:	4e 88       	ldd	r4, Y+22	; 0x16
    7b9c:	5f 88       	ldd	r5, Y+23	; 0x17
    7b9e:	68 8c       	ldd	r6, Y+24	; 0x18
    7ba0:	79 8c       	ldd	r7, Y+25	; 0x19
    7ba2:	f1 01       	movw	r30, r2
    7ba4:	c1 8c       	ldd	r12, Z+25	; 0x19
    7ba6:	d1 2c       	mov	r13, r1
    7ba8:	84 8d       	ldd	r24, Z+28	; 0x1c
    7baa:	b6 01       	movw	r22, r12
    7bac:	68 1b       	sub	r22, r24
    7bae:	71 09       	sbc	r23, r1
    7bb0:	07 2e       	mov	r0, r23
    7bb2:	00 0c       	add	r0, r0
    7bb4:	88 0b       	sbc	r24, r24
    7bb6:	99 0b       	sbc	r25, r25
    7bb8:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    7bbc:	9b 01       	movw	r18, r22
    7bbe:	ac 01       	movw	r20, r24
    7bc0:	c3 01       	movw	r24, r6
    7bc2:	b2 01       	movw	r22, r4
    7bc4:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    7bc8:	88 23       	and	r24, r24
    7bca:	0c f4       	brge	.+2      	; 0x7bce <mod_pump+0xa3e>
    7bcc:	87 cc       	rjmp	.-1778   	; 0x74dc <mod_pump+0x34c>
    7bce:	9e cf       	rjmp	.-196    	; 0x7b0c <mod_pump+0x97c>
		case COOL_DHW:
		{
			if(comp->Index==1)
			{
				if( comp->Dhw_Temp< (eeData->Set_DHW-eeData->diffDHW) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {comp->heatingWater=true;calibration(comp);Comp_1.error=0;comp->heatingWater=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_dhwcool_1\r\n");}//
				else if( comp->Bac_Temp < (eeData->Set_Heating-eeData->diffHEAT) && !comp->heatingWater && !comp->Cooling && !comp->switchToMode ) {calibration(comp);Comp_1.error=0;comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cooldhw_1\r\n");}//
    7bd0:	4e 88       	ldd	r4, Y+22	; 0x16
    7bd2:	5f 88       	ldd	r5, Y+23	; 0x17
    7bd4:	68 8c       	ldd	r6, Y+24	; 0x18
    7bd6:	79 8c       	ldd	r7, Y+25	; 0x19
    7bd8:	f1 01       	movw	r30, r2
    7bda:	c1 8c       	ldd	r12, Z+25	; 0x19
    7bdc:	d1 2c       	mov	r13, r1
    7bde:	84 8d       	ldd	r24, Z+28	; 0x1c
    7be0:	b6 01       	movw	r22, r12
    7be2:	68 1b       	sub	r22, r24
    7be4:	71 09       	sbc	r23, r1
    7be6:	07 2e       	mov	r0, r23
    7be8:	00 0c       	add	r0, r0
    7bea:	88 0b       	sbc	r24, r24
    7bec:	99 0b       	sbc	r25, r25
    7bee:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    7bf2:	9b 01       	movw	r18, r22
    7bf4:	ac 01       	movw	r20, r24
    7bf6:	c3 01       	movw	r24, r6
    7bf8:	b2 01       	movw	r22, r4
    7bfa:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    7bfe:	88 23       	and	r24, r24
    7c00:	0c f4       	brge	.+2      	; 0x7c04 <mod_pump+0xa74>
    7c02:	bb cd       	rjmp	.-1162   	; 0x777a <mod_pump+0x5ea>
    7c04:	b3 cf       	rjmp	.-154    	; 0x7b6c <mod_pump+0x9dc>
				if (comp->Bac_Temp < eeData->Set_Cooling && comp->Cooling && !comp->switchToMode ){comp->Cooling=false;Comp_Stop(comp);stopTrvTimer(comp);}//
				if (comp->Bac_Temp  > (eeData->Set_Cooling + eeData->diffCOOL) && !comp->Cooling  && !comp->switchToMode ) {calibration(comp);comp->Cooling=true;goToMode(comp);xSerialxPrintf(&xSerial3Port,"Start_cool_1\r\n");}//
			}
		}break;
	}
}
    7c06:	df 91       	pop	r29
    7c08:	cf 91       	pop	r28
    7c0a:	1f 91       	pop	r17
    7c0c:	ff 90       	pop	r15
    7c0e:	ef 90       	pop	r14
    7c10:	df 90       	pop	r13
    7c12:	cf 90       	pop	r12
    7c14:	bf 90       	pop	r11
    7c16:	af 90       	pop	r10
    7c18:	9f 90       	pop	r9
    7c1a:	8f 90       	pop	r8
    7c1c:	7f 90       	pop	r7
    7c1e:	6f 90       	pop	r6
    7c20:	5f 90       	pop	r5
    7c22:	4f 90       	pop	r4
    7c24:	3f 90       	pop	r3
    7c26:	2f 90       	pop	r2
    7c28:	08 95       	ret

00007c2a <initPins>:
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void initPins()
{

	DDRG |= (_BV(PG4) | _BV(PG3));
    7c2a:	83 b3       	in	r24, 0x13	; 19
    7c2c:	88 61       	ori	r24, 0x18	; 24
    7c2e:	83 bb       	out	0x13, r24	; 19
	DDRH |= (_BV(PH7) | _BV(PH6) | _BV(PH5) | _BV(PH4) | _BV(PH3) | _BV(PH1) | _BV(PH2));
    7c30:	e1 e0       	ldi	r30, 0x01	; 1
    7c32:	f1 e0       	ldi	r31, 0x01	; 1
    7c34:	80 81       	ld	r24, Z
    7c36:	8e 6f       	ori	r24, 0xFE	; 254
    7c38:	80 83       	st	Z, r24
	DDRL |= (_BV(PL2) | _BV(PL1) | _BV(PL0));
    7c3a:	ea e0       	ldi	r30, 0x0A	; 10
    7c3c:	f1 e0       	ldi	r31, 0x01	; 1
    7c3e:	80 81       	ld	r24, Z
    7c40:	87 60       	ori	r24, 0x07	; 7
    7c42:	80 83       	st	Z, r24
	DDRD &= (_BV(PD2) | _BV(PD3));
    7c44:	8a b1       	in	r24, 0x0a	; 10
    7c46:	8c 70       	andi	r24, 0x0C	; 12
    7c48:	8a b9       	out	0x0a, r24	; 10
	DDRE &= (_BV(PE5));
    7c4a:	8d b1       	in	r24, 0x0d	; 13
    7c4c:	80 72       	andi	r24, 0x20	; 32
    7c4e:	8d b9       	out	0x0d, r24	; 13
	DDRA = 0xFF;
    7c50:	8f ef       	ldi	r24, 0xFF	; 255
    7c52:	81 b9       	out	0x01, r24	; 1
	PORTD|= (_BV(PD2) | _BV(PD3));
    7c54:	8b b1       	in	r24, 0x0b	; 11
    7c56:	8c 60       	ori	r24, 0x0C	; 12
    7c58:	8b b9       	out	0x0b, r24	; 11
	PORTE|= (_BV(PE5));
    7c5a:	75 9a       	sbi	0x0e, 5	; 14
	
    DDRJ|= (_BV(PIN_rs485));
    7c5c:	e4 e0       	ldi	r30, 0x04	; 4
    7c5e:	f1 e0       	ldi	r31, 0x01	; 1
    7c60:	80 81       	ld	r24, Z
    7c62:	84 60       	ori	r24, 0x04	; 4
    7c64:	80 83       	st	Z, r24
    7c66:	08 95       	ret

00007c68 <ConvertToTemp>:
	return (ADC_value - Low_Limit_HP) * HP_max/ (Hi_Limit_HP - Low_Limit_HP);
}

float ConvertToLowPress(uint16_t ADC_value){
	return (ADC_value - Low_Limit_LP) * LP_max/ (Hi_Limit_LP - Low_Limit_LP) ;
}
    7c68:	8f 92       	push	r8
    7c6a:	9f 92       	push	r9
    7c6c:	af 92       	push	r10
    7c6e:	bf 92       	push	r11
    7c70:	cf 92       	push	r12
    7c72:	df 92       	push	r13
    7c74:	ef 92       	push	r14
    7c76:	ff 92       	push	r15
    7c78:	bc 01       	movw	r22, r24
    7c7a:	80 e0       	ldi	r24, 0x00	; 0
    7c7c:	90 e0       	ldi	r25, 0x00	; 0
    7c7e:	0e 94 53 53 	call	0xa6a6	; 0xa6a6 <__floatunsisf>
    7c82:	9b 01       	movw	r18, r22
    7c84:	ac 01       	movw	r20, r24
    7c86:	60 e0       	ldi	r22, 0x00	; 0
    7c88:	70 ec       	ldi	r23, 0xC0	; 192
    7c8a:	8f e7       	ldi	r24, 0x7F	; 127
    7c8c:	94 e4       	ldi	r25, 0x44	; 68
    7c8e:	0e 94 ba 52 	call	0xa574	; 0xa574 <__divsf3>
    7c92:	20 e0       	ldi	r18, 0x00	; 0
    7c94:	30 e0       	ldi	r19, 0x00	; 0
    7c96:	40 e8       	ldi	r20, 0x80	; 128
    7c98:	5f e3       	ldi	r21, 0x3F	; 63
    7c9a:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    7c9e:	20 e0       	ldi	r18, 0x00	; 0
    7ca0:	30 e4       	ldi	r19, 0x40	; 64
    7ca2:	4c e1       	ldi	r20, 0x1C	; 28
    7ca4:	56 e4       	ldi	r21, 0x46	; 70
    7ca6:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    7caa:	0e 94 0e 54 	call	0xa81c	; 0xa81c <log>
    7cae:	6b 01       	movw	r12, r22
    7cb0:	7c 01       	movw	r14, r24
    7cb2:	29 e5       	ldi	r18, 0x59	; 89
    7cb4:	37 e4       	ldi	r19, 0x47	; 71
    7cb6:	4c eb       	ldi	r20, 0xBC	; 188
    7cb8:	53 e3       	ldi	r21, 0x33	; 51
    7cba:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    7cbe:	a7 01       	movw	r20, r14
    7cc0:	96 01       	movw	r18, r12
    7cc2:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    7cc6:	a7 01       	movw	r20, r14
    7cc8:	96 01       	movw	r18, r12
    7cca:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    7cce:	4b 01       	movw	r8, r22
    7cd0:	5c 01       	movw	r10, r24
    7cd2:	2b e0       	ldi	r18, 0x0B	; 11
    7cd4:	31 ee       	ldi	r19, 0xE1	; 225
    7cd6:	45 e7       	ldi	r20, 0x75	; 117
    7cd8:	59 e3       	ldi	r21, 0x39	; 57
    7cda:	c7 01       	movw	r24, r14
    7cdc:	b6 01       	movw	r22, r12
    7cde:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    7ce2:	29 ed       	ldi	r18, 0xD9	; 217
    7ce4:	3d ea       	ldi	r19, 0xAD	; 173
    7ce6:	49 ea       	ldi	r20, 0xA9	; 169
    7ce8:	5a e3       	ldi	r21, 0x3A	; 58
    7cea:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    7cee:	9b 01       	movw	r18, r22
    7cf0:	ac 01       	movw	r20, r24
    7cf2:	c5 01       	movw	r24, r10
    7cf4:	b4 01       	movw	r22, r8
    7cf6:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    7cfa:	9b 01       	movw	r18, r22
    7cfc:	ac 01       	movw	r20, r24
    7cfe:	60 e0       	ldi	r22, 0x00	; 0
    7d00:	70 e0       	ldi	r23, 0x00	; 0
    7d02:	80 e8       	ldi	r24, 0x80	; 128
    7d04:	9f e3       	ldi	r25, 0x3F	; 63
    7d06:	0e 94 ba 52 	call	0xa574	; 0xa574 <__divsf3>
    7d0a:	23 e3       	ldi	r18, 0x33	; 51
    7d0c:	33 e9       	ldi	r19, 0x93	; 147
    7d0e:	48 e8       	ldi	r20, 0x88	; 136
    7d10:	53 e4       	ldi	r21, 0x43	; 67
    7d12:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    7d16:	ff 90       	pop	r15
    7d18:	ef 90       	pop	r14
    7d1a:	df 90       	pop	r13
    7d1c:	cf 90       	pop	r12
    7d1e:	bf 90       	pop	r11
    7d20:	af 90       	pop	r10
    7d22:	9f 90       	pop	r9
    7d24:	8f 90       	pop	r8
    7d26:	08 95       	ret

00007d28 <ReadSuperHeat>:
					}

return;	
}

float  ReadSuperHeat (xCompressor *comp){
    7d28:	4f 92       	push	r4
    7d2a:	5f 92       	push	r5
    7d2c:	6f 92       	push	r6
    7d2e:	7f 92       	push	r7
    7d30:	8f 92       	push	r8
    7d32:	9f 92       	push	r9
    7d34:	af 92       	push	r10
    7d36:	bf 92       	push	r11
    7d38:	cf 92       	push	r12
    7d3a:	df 92       	push	r13
    7d3c:	ef 92       	push	r14
    7d3e:	ff 92       	push	r15
    7d40:	cf 93       	push	r28
    7d42:	df 93       	push	r29
    7d44:	ec 01       	movw	r28, r24
	float Val, Next_val, Span, Saturation_Temp, decimals, work;
	int I;
	work = ((comp->Low_Press - 1.0) / 1.0);
    7d46:	20 e0       	ldi	r18, 0x00	; 0
    7d48:	30 e0       	ldi	r19, 0x00	; 0
    7d4a:	40 e8       	ldi	r20, 0x80	; 128
    7d4c:	5f e3       	ldi	r21, 0x3F	; 63
    7d4e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    7d50:	7f 8d       	ldd	r23, Y+31	; 0x1f
    7d52:	88 a1       	ldd	r24, Y+32	; 0x20
    7d54:	99 a1       	ldd	r25, Y+33	; 0x21
    7d56:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    7d5a:	4b 01       	movw	r8, r22
    7d5c:	5c 01       	movw	r10, r24
	I = work;                                //drop decimals to get array index
    7d5e:	0e 94 22 53 	call	0xa644	; 0xa644 <__fixsfsi>
	decimals = work - I; //restore decimals for interpolation between array points
	Val = pgm_read_float(&R22_Saturation_Temp[I]);           //get array value
    7d62:	fb 01       	movw	r30, r22
    7d64:	ee 0f       	add	r30, r30
    7d66:	ff 1f       	adc	r31, r31
    7d68:	ee 0f       	add	r30, r30
    7d6a:	ff 1f       	adc	r31, r31
    7d6c:	e0 51       	subi	r30, 0x10	; 16
    7d6e:	f6 4f       	sbci	r31, 0xF6	; 246
    7d70:	c5 90       	lpm	r12, Z+
    7d72:	d5 90       	lpm	r13, Z+
    7d74:	e5 90       	lpm	r14, Z+
    7d76:	f4 90       	lpm	r15, Z
	Next_val = pgm_read_float(&R22_Saturation_Temp[I + 1]);  //get Next array value
    7d78:	fb 01       	movw	r30, r22
    7d7a:	31 96       	adiw	r30, 0x01	; 1
    7d7c:	ee 0f       	add	r30, r30
    7d7e:	ff 1f       	adc	r31, r31
    7d80:	ee 0f       	add	r30, r30
    7d82:	ff 1f       	adc	r31, r31
    7d84:	e0 51       	subi	r30, 0x10	; 16
    7d86:	f6 4f       	sbci	r31, 0xF6	; 246
    7d88:	45 90       	lpm	r4, Z+
    7d8a:	55 90       	lpm	r5, Z+
    7d8c:	65 90       	lpm	r6, Z+
    7d8e:	74 90       	lpm	r7, Z
	Span = Next_val - Val;                  //Calc Span
	Saturation_Temp = Val + (Span * decimals);//interpolate between array points
		
	return(comp->Suc_Comp - Saturation_Temp);// Suct_T - Saturation_Temp;
    7d90:	ee 96       	adiw	r28, 0x3e	; 62
    7d92:	07 2e       	mov	r0, r23
    7d94:	00 0c       	add	r0, r0
    7d96:	88 0b       	sbc	r24, r24
    7d98:	99 0b       	sbc	r25, r25
    7d9a:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    7d9e:	9b 01       	movw	r18, r22
    7da0:	ac 01       	movw	r20, r24
    7da2:	c5 01       	movw	r24, r10
    7da4:	b4 01       	movw	r22, r8
    7da6:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    7daa:	4b 01       	movw	r8, r22
    7dac:	5c 01       	movw	r10, r24
    7dae:	a7 01       	movw	r20, r14
    7db0:	96 01       	movw	r18, r12
    7db2:	c3 01       	movw	r24, r6
    7db4:	b2 01       	movw	r22, r4
    7db6:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    7dba:	9b 01       	movw	r18, r22
    7dbc:	ac 01       	movw	r20, r24
    7dbe:	c5 01       	movw	r24, r10
    7dc0:	b4 01       	movw	r22, r8
    7dc2:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    7dc6:	a7 01       	movw	r20, r14
    7dc8:	96 01       	movw	r18, r12
    7dca:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    7dce:	9b 01       	movw	r18, r22
    7dd0:	ac 01       	movw	r20, r24
    7dd2:	68 81       	ld	r22, Y
    7dd4:	79 81       	ldd	r23, Y+1	; 0x01
    7dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    7dd8:	9b 81       	ldd	r25, Y+3	; 0x03
    7dda:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>

}
    7dde:	df 91       	pop	r29
    7de0:	cf 91       	pop	r28
    7de2:	ff 90       	pop	r15
    7de4:	ef 90       	pop	r14
    7de6:	df 90       	pop	r13
    7de8:	cf 90       	pop	r12
    7dea:	bf 90       	pop	r11
    7dec:	af 90       	pop	r10
    7dee:	9f 90       	pop	r9
    7df0:	8f 90       	pop	r8
    7df2:	7f 90       	pop	r7
    7df4:	6f 90       	pop	r6
    7df6:	5f 90       	pop	r5
    7df8:	4f 90       	pop	r4
    7dfa:	08 95       	ret

00007dfc <ReadSuperCool>:
float ReadSuperCool (xCompressor *comp){
    7dfc:	4f 92       	push	r4
    7dfe:	5f 92       	push	r5
    7e00:	6f 92       	push	r6
    7e02:	7f 92       	push	r7
    7e04:	8f 92       	push	r8
    7e06:	9f 92       	push	r9
    7e08:	af 92       	push	r10
    7e0a:	bf 92       	push	r11
    7e0c:	cf 92       	push	r12
    7e0e:	df 92       	push	r13
    7e10:	ef 92       	push	r14
    7e12:	ff 92       	push	r15
    7e14:	cf 93       	push	r28
    7e16:	df 93       	push	r29
    7e18:	ec 01       	movw	r28, r24
	float Val, Next_val, Span, Saturation_Temp, decimals, work;
	int I;
	work = ((comp->High_Press - 1.0) / 1.0);
    7e1a:	20 e0       	ldi	r18, 0x00	; 0
    7e1c:	30 e0       	ldi	r19, 0x00	; 0
    7e1e:	40 e8       	ldi	r20, 0x80	; 128
    7e20:	5f e3       	ldi	r21, 0x3F	; 63
    7e22:	6a 8d       	ldd	r22, Y+26	; 0x1a
    7e24:	7b 8d       	ldd	r23, Y+27	; 0x1b
    7e26:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7e28:	9d 8d       	ldd	r25, Y+29	; 0x1d
    7e2a:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    7e2e:	4b 01       	movw	r8, r22
    7e30:	5c 01       	movw	r10, r24

	I = work;                                //drop decimals to get array index
    7e32:	0e 94 22 53 	call	0xa644	; 0xa644 <__fixsfsi>

	decimals = work - I; //restore decimals for interpolation between array points
	Val = pgm_read_float(&R22_Saturation_Temp[I]);           //get array value
    7e36:	fb 01       	movw	r30, r22
    7e38:	ee 0f       	add	r30, r30
    7e3a:	ff 1f       	adc	r31, r31
    7e3c:	ee 0f       	add	r30, r30
    7e3e:	ff 1f       	adc	r31, r31
    7e40:	e0 51       	subi	r30, 0x10	; 16
    7e42:	f6 4f       	sbci	r31, 0xF6	; 246
    7e44:	c5 90       	lpm	r12, Z+
    7e46:	d5 90       	lpm	r13, Z+
    7e48:	e5 90       	lpm	r14, Z+
    7e4a:	f4 90       	lpm	r15, Z
	Next_val = pgm_read_float(&R22_Saturation_Temp[I + 1]);  //get Next array value
    7e4c:	fb 01       	movw	r30, r22
    7e4e:	31 96       	adiw	r30, 0x01	; 1
    7e50:	ee 0f       	add	r30, r30
    7e52:	ff 1f       	adc	r31, r31
    7e54:	ee 0f       	add	r30, r30
    7e56:	ff 1f       	adc	r31, r31
    7e58:	e0 51       	subi	r30, 0x10	; 16
    7e5a:	f6 4f       	sbci	r31, 0xF6	; 246
    7e5c:	45 90       	lpm	r4, Z+
    7e5e:	55 90       	lpm	r5, Z+
    7e60:	65 90       	lpm	r6, Z+
    7e62:	74 90       	lpm	r7, Z
	Span = Next_val - Val;                   //Calc Span
	Saturation_Temp = Val + (Span * decimals);//interpolate between array points
	
    return(Saturation_Temp - comp->Cond_Temp);// Suct_T - Saturation_Temp;	
    7e64:	07 2e       	mov	r0, r23
    7e66:	00 0c       	add	r0, r0
    7e68:	88 0b       	sbc	r24, r24
    7e6a:	99 0b       	sbc	r25, r25
    7e6c:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    7e70:	9b 01       	movw	r18, r22
    7e72:	ac 01       	movw	r20, r24
    7e74:	c5 01       	movw	r24, r10
    7e76:	b4 01       	movw	r22, r8
    7e78:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    7e7c:	4b 01       	movw	r8, r22
    7e7e:	5c 01       	movw	r10, r24
    7e80:	a7 01       	movw	r20, r14
    7e82:	96 01       	movw	r18, r12
    7e84:	c3 01       	movw	r24, r6
    7e86:	b2 01       	movw	r22, r4
    7e88:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    7e8c:	9b 01       	movw	r18, r22
    7e8e:	ac 01       	movw	r20, r24
    7e90:	c5 01       	movw	r24, r10
    7e92:	b4 01       	movw	r22, r8
    7e94:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    7e98:	a7 01       	movw	r20, r14
    7e9a:	96 01       	movw	r18, r12
    7e9c:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    7ea0:	ce 5b       	subi	r28, 0xBE	; 190
    7ea2:	df 4f       	sbci	r29, 0xFF	; 255
    7ea4:	28 81       	ld	r18, Y
    7ea6:	39 81       	ldd	r19, Y+1	; 0x01
    7ea8:	4a 81       	ldd	r20, Y+2	; 0x02
    7eaa:	5b 81       	ldd	r21, Y+3	; 0x03
    7eac:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
}
    7eb0:	df 91       	pop	r29
    7eb2:	cf 91       	pop	r28
    7eb4:	ff 90       	pop	r15
    7eb6:	ef 90       	pop	r14
    7eb8:	df 90       	pop	r13
    7eba:	cf 90       	pop	r12
    7ebc:	bf 90       	pop	r11
    7ebe:	af 90       	pop	r10
    7ec0:	9f 90       	pop	r9
    7ec2:	8f 90       	pop	r8
    7ec4:	7f 90       	pop	r7
    7ec6:	6f 90       	pop	r6
    7ec8:	5f 90       	pop	r5
    7eca:	4f 90       	pop	r4
    7ecc:	08 95       	ret

00007ece <corectTrv>:
//-------------------------------------------------------------
float  corectTrv(xCompressor *comp){
    7ece:	4f 92       	push	r4
    7ed0:	5f 92       	push	r5
    7ed2:	6f 92       	push	r6
    7ed4:	7f 92       	push	r7
    7ed6:	8f 92       	push	r8
    7ed8:	9f 92       	push	r9
    7eda:	af 92       	push	r10
    7edc:	bf 92       	push	r11
    7ede:	cf 92       	push	r12
    7ee0:	df 92       	push	r13
    7ee2:	ef 92       	push	r14
    7ee4:	ff 92       	push	r15
    7ee6:	cf 93       	push	r28
    7ee8:	df 93       	push	r29
	static float Superheat_old=0;
	int SSet;
	float ds;
	float Superheat;
	Superheat=comp->SuperHeat;
    7eea:	8a 5b       	subi	r24, 0xBA	; 186
    7eec:	9f 4f       	sbci	r25, 0xFF	; 255
    7eee:	fc 01       	movw	r30, r24
    7ef0:	c0 80       	ld	r12, Z
    7ef2:	d1 80       	ldd	r13, Z+1	; 0x01
    7ef4:	e2 80       	ldd	r14, Z+2	; 0x02
    7ef6:	f3 80       	ldd	r15, Z+3	; 0x03
	ds = Superheat - Superheat_old; // calculate the change in Superheat
    7ef8:	20 91 09 07 	lds	r18, 0x0709	; 0x800709 <Superheat_old.3257>
    7efc:	30 91 0a 07 	lds	r19, 0x070A	; 0x80070a <Superheat_old.3257+0x1>
    7f00:	40 91 0b 07 	lds	r20, 0x070B	; 0x80070b <Superheat_old.3257+0x2>
    7f04:	50 91 0c 07 	lds	r21, 0x070C	; 0x80070c <Superheat_old.3257+0x3>
    7f08:	c7 01       	movw	r24, r14
    7f0a:	b6 01       	movw	r22, r12
    7f0c:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
	ds = ds * 2; // scaling factor for DS
    7f10:	9b 01       	movw	r18, r22
    7f12:	ac 01       	movw	r20, r24
    7f14:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    7f18:	4b 01       	movw	r8, r22
    7f1a:	5c 01       	movw	r10, r24
	SSet=7;

	// Variable sampling rate --------------------------------------------
	int  k = 1; // Gain for the steps

	if ( Superheat - SSet > 3)
    7f1c:	20 e0       	ldi	r18, 0x00	; 0
    7f1e:	30 e0       	ldi	r19, 0x00	; 0
    7f20:	40 ee       	ldi	r20, 0xE0	; 224
    7f22:	50 e4       	ldi	r21, 0x40	; 64
    7f24:	c7 01       	movw	r24, r14
    7f26:	b6 01       	movw	r22, r12
    7f28:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    7f2c:	2b 01       	movw	r4, r22
    7f2e:	3c 01       	movw	r6, r24
    7f30:	20 e0       	ldi	r18, 0x00	; 0
    7f32:	30 e0       	ldi	r19, 0x00	; 0
    7f34:	40 e4       	ldi	r20, 0x40	; 64
    7f36:	50 e4       	ldi	r21, 0x40	; 64
    7f38:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    7f3c:	18 16       	cp	r1, r24
    7f3e:	e4 f4       	brge	.+56     	; 0x7f78 <corectTrv+0xaa>
	{
		if (ds > 2 || ds < -2)
    7f40:	20 e0       	ldi	r18, 0x00	; 0
    7f42:	30 e0       	ldi	r19, 0x00	; 0
    7f44:	40 e0       	ldi	r20, 0x00	; 0
    7f46:	50 e4       	ldi	r21, 0x40	; 64
    7f48:	c5 01       	movw	r24, r10
    7f4a:	b4 01       	movw	r22, r8
    7f4c:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    7f50:	18 16       	cp	r1, r24
    7f52:	ac f0       	brlt	.+42     	; 0x7f7e <corectTrv+0xb0>
    7f54:	20 e0       	ldi	r18, 0x00	; 0
    7f56:	30 e0       	ldi	r19, 0x00	; 0
    7f58:	40 e0       	ldi	r20, 0x00	; 0
    7f5a:	50 ec       	ldi	r21, 0xC0	; 192
    7f5c:	c5 01       	movw	r24, r10
    7f5e:	b4 01       	movw	r22, r8
    7f60:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
	ds = Superheat - Superheat_old; // calculate the change in Superheat
	ds = ds * 2; // scaling factor for DS
	SSet=7;

	// Variable sampling rate --------------------------------------------
	int  k = 1; // Gain for the steps
    7f64:	68 2f       	mov	r22, r24
    7f66:	88 0f       	add	r24, r24
    7f68:	77 0b       	sbc	r23, r23
    7f6a:	eb 01       	movw	r28, r22
    7f6c:	cc 27       	eor	r28, r28
    7f6e:	dd 0f       	add	r29, r29
    7f70:	cc 1f       	adc	r28, r28
    7f72:	dd 27       	eor	r29, r29
    7f74:	21 96       	adiw	r28, 0x01	; 1
    7f76:	05 c0       	rjmp	.+10     	; 0x7f82 <corectTrv+0xb4>
    7f78:	c1 e0       	ldi	r28, 0x01	; 1
    7f7a:	d0 e0       	ldi	r29, 0x00	; 0
    7f7c:	02 c0       	rjmp	.+4      	; 0x7f82 <corectTrv+0xb4>
	if ( Superheat - SSet > 3)
	{
		if (ds > 2 || ds < -2)

		{
			k = 2; // Gain for the steps
    7f7e:	c2 e0       	ldi	r28, 0x02	; 2
    7f80:	d0 e0       	ldi	r29, 0x00	; 0
			
		}
	}

	if ( Superheat - SSet >= 5)
    7f82:	20 e0       	ldi	r18, 0x00	; 0
    7f84:	30 e0       	ldi	r19, 0x00	; 0
    7f86:	40 ea       	ldi	r20, 0xA0	; 160
    7f88:	50 e4       	ldi	r21, 0x40	; 64
    7f8a:	c3 01       	movw	r24, r6
    7f8c:	b2 01       	movw	r22, r4
    7f8e:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    7f92:	88 23       	and	r24, r24
    7f94:	cc f0       	brlt	.+50     	; 0x7fc8 <corectTrv+0xfa>
	{
		if (ds > 2 || ds < -2)
    7f96:	20 e0       	ldi	r18, 0x00	; 0
    7f98:	30 e0       	ldi	r19, 0x00	; 0
    7f9a:	40 e0       	ldi	r20, 0x00	; 0
    7f9c:	50 e4       	ldi	r21, 0x40	; 64
    7f9e:	c5 01       	movw	r24, r10
    7fa0:	b4 01       	movw	r22, r8
    7fa2:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    7fa6:	18 16       	cp	r1, r24
    7fa8:	6c f0       	brlt	.+26     	; 0x7fc4 <corectTrv+0xf6>
    7faa:	20 e0       	ldi	r18, 0x00	; 0
    7fac:	30 e0       	ldi	r19, 0x00	; 0
    7fae:	40 e0       	ldi	r20, 0x00	; 0
    7fb0:	50 ec       	ldi	r21, 0xC0	; 192
    7fb2:	c5 01       	movw	r24, r10
    7fb4:	b4 01       	movw	r22, r8
    7fb6:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    7fba:	88 23       	and	r24, r24
    7fbc:	2c f4       	brge	.+10     	; 0x7fc8 <corectTrv+0xfa>
		{
			k = 3; // Gain for the steps
    7fbe:	c3 e0       	ldi	r28, 0x03	; 3
    7fc0:	d0 e0       	ldi	r29, 0x00	; 0
    7fc2:	02 c0       	rjmp	.+4      	; 0x7fc8 <corectTrv+0xfa>
    7fc4:	c3 e0       	ldi	r28, 0x03	; 3
    7fc6:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}

	//------------------------

	if (Superheat < SSet)
    7fc8:	20 e0       	ldi	r18, 0x00	; 0
    7fca:	30 e0       	ldi	r19, 0x00	; 0
    7fcc:	40 ee       	ldi	r20, 0xE0	; 224
    7fce:	50 e4       	ldi	r21, 0x40	; 64
    7fd0:	c7 01       	movw	r24, r14
    7fd2:	b6 01       	movw	r22, r12
    7fd4:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    7fd8:	88 23       	and	r24, r24
    7fda:	84 f4       	brge	.+32     	; 0x7ffc <corectTrv+0x12e>
	{
		k = -1; // if the Superheat is too low, this gain changes the step direction
		Superheat = SSet + 10 - Superheat;
    7fdc:	a7 01       	movw	r20, r14
    7fde:	96 01       	movw	r18, r12
    7fe0:	60 e0       	ldi	r22, 0x00	; 0
    7fe2:	70 e0       	ldi	r23, 0x00	; 0
    7fe4:	88 e8       	ldi	r24, 0x88	; 136
    7fe6:	91 e4       	ldi	r25, 0x41	; 65
    7fe8:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    7fec:	6b 01       	movw	r12, r22
    7fee:	7c 01       	movw	r14, r24
		ds = -ds;
    7ff0:	b7 fa       	bst	r11, 7
    7ff2:	b0 94       	com	r11
    7ff4:	b7 f8       	bld	r11, 7
    7ff6:	b0 94       	com	r11

	//------------------------

	if (Superheat < SSet)
	{
		k = -1; // if the Superheat is too low, this gain changes the step direction
    7ff8:	cf ef       	ldi	r28, 0xFF	; 255
    7ffa:	df ef       	ldi	r29, 0xFF	; 255
		Superheat = SSet + 10 - Superheat;
		ds = -ds;
	}
	
	Superheat_old = Superheat;
    7ffc:	c0 92 09 07 	sts	0x0709, r12	; 0x800709 <Superheat_old.3257>
    8000:	d0 92 0a 07 	sts	0x070A, r13	; 0x80070a <Superheat_old.3257+0x1>
    8004:	e0 92 0b 07 	sts	0x070B, r14	; 0x80070b <Superheat_old.3257+0x2>
    8008:	f0 92 0c 07 	sts	0x070C, r15	; 0x80070c <Superheat_old.3257+0x3>
	
	if (ds > 20)
    800c:	20 e0       	ldi	r18, 0x00	; 0
    800e:	30 e0       	ldi	r19, 0x00	; 0
    8010:	40 ea       	ldi	r20, 0xA0	; 160
    8012:	51 e4       	ldi	r21, 0x41	; 65
    8014:	c5 01       	movw	r24, r10
    8016:	b4 01       	movw	r22, r8
    8018:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    801c:	18 16       	cp	r1, r24
    801e:	14 f4       	brge	.+4      	; 0x8024 <corectTrv+0x156>
    8020:	0c 94 ad 4a 	jmp	0x955a	; 0x955a <corectTrv+0x168c>
	{
		ds = 20;
	}

	 else if (ds < -20)
    8024:	20 e0       	ldi	r18, 0x00	; 0
    8026:	30 e0       	ldi	r19, 0x00	; 0
    8028:	40 ea       	ldi	r20, 0xA0	; 160
    802a:	51 ec       	ldi	r21, 0xC1	; 193
    802c:	c5 01       	movw	r24, r10
    802e:	b4 01       	movw	r22, r8
    8030:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    8034:	88 23       	and	r24, r24
    8036:	64 f0       	brlt	.+24     	; 0x8050 <corectTrv+0x182>
	{
		ds = -20;
	}
//--------------------------------------
	if (ds < -10)
    8038:	20 e0       	ldi	r18, 0x00	; 0
    803a:	30 e0       	ldi	r19, 0x00	; 0
    803c:	40 e2       	ldi	r20, 0x20	; 32
    803e:	51 ec       	ldi	r21, 0xC1	; 193
    8040:	c5 01       	movw	r24, r10
    8042:	b4 01       	movw	r22, r8
    8044:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    8048:	88 23       	and	r24, r24
    804a:	0c f0       	brlt	.+2      	; 0x804e <corectTrv+0x180>
    804c:	ab c3       	rjmp	.+1878   	; 0x87a4 <corectTrv+0x8d6>
    804e:	08 c0       	rjmp	.+16     	; 0x8060 <corectTrv+0x192>
		ds = 20;
	}

	 else if (ds < -20)
	{
		ds = -20;
    8050:	0f 2e       	mov	r0, r31
    8052:	81 2c       	mov	r8, r1
    8054:	91 2c       	mov	r9, r1
    8056:	f0 ea       	ldi	r31, 0xA0	; 160
    8058:	af 2e       	mov	r10, r31
    805a:	f1 ec       	ldi	r31, 0xC1	; 193
    805c:	bf 2e       	mov	r11, r31
    805e:	f0 2d       	mov	r31, r0
	}
//--------------------------------------
	if (ds < -10)
	{
		if (Superheat == SSet)
    8060:	20 e0       	ldi	r18, 0x00	; 0
    8062:	30 e0       	ldi	r19, 0x00	; 0
    8064:	40 ee       	ldi	r20, 0xE0	; 224
    8066:	50 e4       	ldi	r21, 0x40	; 64
    8068:	c7 01       	movw	r24, r14
    806a:	b6 01       	movw	r22, r12
    806c:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    8070:	81 11       	cpse	r24, r1
    8072:	32 c0       	rjmp	.+100    	; 0x80d8 <corectTrv+0x20a>
		{
			return(-0.123 * ds * ds - 2.768 * ds - 30.62)* k ;
    8074:	2d e6       	ldi	r18, 0x6D	; 109
    8076:	37 ee       	ldi	r19, 0xE7	; 231
    8078:	4b ef       	ldi	r20, 0xFB	; 251
    807a:	5d eb       	ldi	r21, 0xBD	; 189
    807c:	c5 01       	movw	r24, r10
    807e:	b4 01       	movw	r22, r8
    8080:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8084:	a5 01       	movw	r20, r10
    8086:	94 01       	movw	r18, r8
    8088:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    808c:	6b 01       	movw	r12, r22
    808e:	7c 01       	movw	r14, r24
    8090:	29 ee       	ldi	r18, 0xE9	; 233
    8092:	36 e2       	ldi	r19, 0x26	; 38
    8094:	41 e3       	ldi	r20, 0x31	; 49
    8096:	50 e4       	ldi	r21, 0x40	; 64
    8098:	c5 01       	movw	r24, r10
    809a:	b4 01       	movw	r22, r8
    809c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    80a0:	9b 01       	movw	r18, r22
    80a2:	ac 01       	movw	r20, r24
    80a4:	c7 01       	movw	r24, r14
    80a6:	b6 01       	movw	r22, r12
    80a8:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    80ac:	23 ec       	ldi	r18, 0xC3	; 195
    80ae:	35 ef       	ldi	r19, 0xF5	; 245
    80b0:	44 ef       	ldi	r20, 0xF4	; 244
    80b2:	51 e4       	ldi	r21, 0x41	; 65
    80b4:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    80b8:	6b 01       	movw	r12, r22
    80ba:	7c 01       	movw	r14, r24
    80bc:	be 01       	movw	r22, r28
    80be:	dd 0f       	add	r29, r29
    80c0:	88 0b       	sbc	r24, r24
    80c2:	99 0b       	sbc	r25, r25
    80c4:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    80c8:	9b 01       	movw	r18, r22
    80ca:	ac 01       	movw	r20, r24
    80cc:	c7 01       	movw	r24, r14
    80ce:	b6 01       	movw	r22, r12
    80d0:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    80d4:	0c 94 4c 4c 	jmp	0x9898	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    80d8:	20 e0       	ldi	r18, 0x00	; 0
    80da:	30 e0       	ldi	r19, 0x00	; 0
    80dc:	40 ee       	ldi	r20, 0xE0	; 224
    80de:	50 e4       	ldi	r21, 0x40	; 64
    80e0:	c7 01       	movw	r24, r14
    80e2:	b6 01       	movw	r22, r12
    80e4:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    80e8:	18 16       	cp	r1, r24
    80ea:	0c f0       	brlt	.+2      	; 0x80ee <corectTrv+0x220>
    80ec:	55 c0       	rjmp	.+170    	; 0x8198 <corectTrv+0x2ca>
    80ee:	20 e0       	ldi	r18, 0x00	; 0
    80f0:	30 e0       	ldi	r19, 0x00	; 0
    80f2:	40 e0       	ldi	r20, 0x00	; 0
    80f4:	51 e4       	ldi	r21, 0x41	; 65
    80f6:	c7 01       	movw	r24, r14
    80f8:	b6 01       	movw	r22, r12
    80fa:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    80fe:	18 16       	cp	r1, r24
    8100:	0c f4       	brge	.+2      	; 0x8104 <corectTrv+0x236>
    8102:	4a c0       	rjmp	.+148    	; 0x8198 <corectTrv+0x2ca>
		{
			return( 0.02416 * ds * ds * ds + 0.95688 * ds * ds + 12.69588 * ds + 44.31142)* k;
    8104:	21 e3       	ldi	r18, 0x31	; 49
    8106:	3b ee       	ldi	r19, 0xEB	; 235
    8108:	45 ec       	ldi	r20, 0xC5	; 197
    810a:	5c e3       	ldi	r21, 0x3C	; 60
    810c:	c5 01       	movw	r24, r10
    810e:	b4 01       	movw	r22, r8
    8110:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8114:	a5 01       	movw	r20, r10
    8116:	94 01       	movw	r18, r8
    8118:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    811c:	a5 01       	movw	r20, r10
    811e:	94 01       	movw	r18, r8
    8120:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8124:	6b 01       	movw	r12, r22
    8126:	7c 01       	movw	r14, r24
    8128:	26 e1       	ldi	r18, 0x16	; 22
    812a:	36 ef       	ldi	r19, 0xF6	; 246
    812c:	44 e7       	ldi	r20, 0x74	; 116
    812e:	5f e3       	ldi	r21, 0x3F	; 63
    8130:	c5 01       	movw	r24, r10
    8132:	b4 01       	movw	r22, r8
    8134:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8138:	a5 01       	movw	r20, r10
    813a:	94 01       	movw	r18, r8
    813c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8140:	9b 01       	movw	r18, r22
    8142:	ac 01       	movw	r20, r24
    8144:	c7 01       	movw	r24, r14
    8146:	b6 01       	movw	r22, r12
    8148:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    814c:	6b 01       	movw	r12, r22
    814e:	7c 01       	movw	r14, r24
    8150:	23 e5       	ldi	r18, 0x53	; 83
    8152:	32 e2       	ldi	r19, 0x22	; 34
    8154:	4b e4       	ldi	r20, 0x4B	; 75
    8156:	51 e4       	ldi	r21, 0x41	; 65
    8158:	c5 01       	movw	r24, r10
    815a:	b4 01       	movw	r22, r8
    815c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8160:	9b 01       	movw	r18, r22
    8162:	ac 01       	movw	r20, r24
    8164:	c7 01       	movw	r24, r14
    8166:	b6 01       	movw	r22, r12
    8168:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    816c:	25 ee       	ldi	r18, 0xE5	; 229
    816e:	3e e3       	ldi	r19, 0x3E	; 62
    8170:	41 e3       	ldi	r20, 0x31	; 49
    8172:	52 e4       	ldi	r21, 0x42	; 66
    8174:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8178:	6b 01       	movw	r12, r22
    817a:	7c 01       	movw	r14, r24
    817c:	be 01       	movw	r22, r28
    817e:	dd 0f       	add	r29, r29
    8180:	88 0b       	sbc	r24, r24
    8182:	99 0b       	sbc	r25, r25
    8184:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    8188:	9b 01       	movw	r18, r22
    818a:	ac 01       	movw	r20, r24
    818c:	c7 01       	movw	r24, r14
    818e:	b6 01       	movw	r22, r12
    8190:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8194:	0c 94 4c 4c 	jmp	0x9898	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    8198:	20 e0       	ldi	r18, 0x00	; 0
    819a:	30 e0       	ldi	r19, 0x00	; 0
    819c:	40 e0       	ldi	r20, 0x00	; 0
    819e:	51 e4       	ldi	r21, 0x41	; 65
    81a0:	c7 01       	movw	r24, r14
    81a2:	b6 01       	movw	r22, r12
    81a4:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    81a8:	18 16       	cp	r1, r24
    81aa:	0c f0       	brlt	.+2      	; 0x81ae <corectTrv+0x2e0>
    81ac:	55 c0       	rjmp	.+170    	; 0x8258 <corectTrv+0x38a>
    81ae:	20 e0       	ldi	r18, 0x00	; 0
    81b0:	30 e0       	ldi	r19, 0x00	; 0
    81b2:	40 e1       	ldi	r20, 0x10	; 16
    81b4:	51 e4       	ldi	r21, 0x41	; 65
    81b6:	c7 01       	movw	r24, r14
    81b8:	b6 01       	movw	r22, r12
    81ba:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    81be:	18 16       	cp	r1, r24
    81c0:	0c f4       	brge	.+2      	; 0x81c4 <corectTrv+0x2f6>
    81c2:	4a c0       	rjmp	.+148    	; 0x8258 <corectTrv+0x38a>
		{
			return( 0.01715 * ds * ds * ds + 0.64880 * ds * ds + 8.39021 * ds + 27.61058)* k;
    81c4:	28 e2       	ldi	r18, 0x28	; 40
    81c6:	3e e7       	ldi	r19, 0x7E	; 126
    81c8:	4c e8       	ldi	r20, 0x8C	; 140
    81ca:	5c e3       	ldi	r21, 0x3C	; 60
    81cc:	c5 01       	movw	r24, r10
    81ce:	b4 01       	movw	r22, r8
    81d0:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    81d4:	a5 01       	movw	r20, r10
    81d6:	94 01       	movw	r18, r8
    81d8:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    81dc:	a5 01       	movw	r20, r10
    81de:	94 01       	movw	r18, r8
    81e0:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    81e4:	6b 01       	movw	r12, r22
    81e6:	7c 01       	movw	r14, r24
    81e8:	22 ec       	ldi	r18, 0xC2	; 194
    81ea:	37 e1       	ldi	r19, 0x17	; 23
    81ec:	46 e2       	ldi	r20, 0x26	; 38
    81ee:	5f e3       	ldi	r21, 0x3F	; 63
    81f0:	c5 01       	movw	r24, r10
    81f2:	b4 01       	movw	r22, r8
    81f4:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    81f8:	a5 01       	movw	r20, r10
    81fa:	94 01       	movw	r18, r8
    81fc:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8200:	9b 01       	movw	r18, r22
    8202:	ac 01       	movw	r20, r24
    8204:	c7 01       	movw	r24, r14
    8206:	b6 01       	movw	r22, r12
    8208:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    820c:	6b 01       	movw	r12, r22
    820e:	7c 01       	movw	r14, r24
    8210:	2d e4       	ldi	r18, 0x4D	; 77
    8212:	3e e3       	ldi	r19, 0x3E	; 62
    8214:	46 e0       	ldi	r20, 0x06	; 6
    8216:	51 e4       	ldi	r21, 0x41	; 65
    8218:	c5 01       	movw	r24, r10
    821a:	b4 01       	movw	r22, r8
    821c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8220:	9b 01       	movw	r18, r22
    8222:	ac 01       	movw	r20, r24
    8224:	c7 01       	movw	r24, r14
    8226:	b6 01       	movw	r22, r12
    8228:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    822c:	28 e7       	ldi	r18, 0x78	; 120
    822e:	32 ee       	ldi	r19, 0xE2	; 226
    8230:	4c ed       	ldi	r20, 0xDC	; 220
    8232:	51 e4       	ldi	r21, 0x41	; 65
    8234:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8238:	6b 01       	movw	r12, r22
    823a:	7c 01       	movw	r14, r24
    823c:	be 01       	movw	r22, r28
    823e:	dd 0f       	add	r29, r29
    8240:	88 0b       	sbc	r24, r24
    8242:	99 0b       	sbc	r25, r25
    8244:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    8248:	9b 01       	movw	r18, r22
    824a:	ac 01       	movw	r20, r24
    824c:	c7 01       	movw	r24, r14
    824e:	b6 01       	movw	r22, r12
    8250:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8254:	0c 94 4c 4c 	jmp	0x9898	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    8258:	20 e0       	ldi	r18, 0x00	; 0
    825a:	30 e0       	ldi	r19, 0x00	; 0
    825c:	40 e1       	ldi	r20, 0x10	; 16
    825e:	51 e4       	ldi	r21, 0x41	; 65
    8260:	c7 01       	movw	r24, r14
    8262:	b6 01       	movw	r22, r12
    8264:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    8268:	18 16       	cp	r1, r24
    826a:	74 f5       	brge	.+92     	; 0x82c8 <corectTrv+0x3fa>
    826c:	20 e0       	ldi	r18, 0x00	; 0
    826e:	30 e0       	ldi	r19, 0x00	; 0
    8270:	40 e2       	ldi	r20, 0x20	; 32
    8272:	51 e4       	ldi	r21, 0x41	; 65
    8274:	c7 01       	movw	r24, r14
    8276:	b6 01       	movw	r22, r12
    8278:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    827c:	18 16       	cp	r1, r24
    827e:	24 f1       	brlt	.+72     	; 0x82c8 <corectTrv+0x3fa>
		{
			return( -0.099 * ds * ds - 2.002 * ds - 16.444);
    8280:	23 e8       	ldi	r18, 0x83	; 131
    8282:	30 ec       	ldi	r19, 0xC0	; 192
    8284:	4a ec       	ldi	r20, 0xCA	; 202
    8286:	5d eb       	ldi	r21, 0xBD	; 189
    8288:	c5 01       	movw	r24, r10
    828a:	b4 01       	movw	r22, r8
    828c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8290:	a5 01       	movw	r20, r10
    8292:	94 01       	movw	r18, r8
    8294:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8298:	6b 01       	movw	r12, r22
    829a:	7c 01       	movw	r14, r24
    829c:	25 ec       	ldi	r18, 0xC5	; 197
    829e:	30 e2       	ldi	r19, 0x20	; 32
    82a0:	40 e0       	ldi	r20, 0x00	; 0
    82a2:	50 e4       	ldi	r21, 0x40	; 64
    82a4:	c5 01       	movw	r24, r10
    82a6:	b4 01       	movw	r22, r8
    82a8:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    82ac:	9b 01       	movw	r18, r22
    82ae:	ac 01       	movw	r20, r24
    82b0:	c7 01       	movw	r24, r14
    82b2:	b6 01       	movw	r22, r12
    82b4:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    82b8:	20 e5       	ldi	r18, 0x50	; 80
    82ba:	3d e8       	ldi	r19, 0x8D	; 141
    82bc:	43 e8       	ldi	r20, 0x83	; 131
    82be:	51 e4       	ldi	r21, 0x41	; 65
    82c0:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    82c4:	0c 94 4c 4c 	jmp	0x9898	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    82c8:	20 e0       	ldi	r18, 0x00	; 0
    82ca:	30 e0       	ldi	r19, 0x00	; 0
    82cc:	40 e2       	ldi	r20, 0x20	; 32
    82ce:	51 e4       	ldi	r21, 0x41	; 65
    82d0:	c7 01       	movw	r24, r14
    82d2:	b6 01       	movw	r22, r12
    82d4:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    82d8:	18 16       	cp	r1, r24
    82da:	74 f5       	brge	.+92     	; 0x8338 <corectTrv+0x46a>
    82dc:	20 e0       	ldi	r18, 0x00	; 0
    82de:	30 e0       	ldi	r19, 0x00	; 0
    82e0:	40 e3       	ldi	r20, 0x30	; 48
    82e2:	51 e4       	ldi	r21, 0x41	; 65
    82e4:	c7 01       	movw	r24, r14
    82e6:	b6 01       	movw	r22, r12
    82e8:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    82ec:	18 16       	cp	r1, r24
    82ee:	24 f1       	brlt	.+72     	; 0x8338 <corectTrv+0x46a>
		{
			return( -0.065 * ds * ds - 0.773 * ds - 4.451);
    82f0:	28 eb       	ldi	r18, 0xB8	; 184
    82f2:	3e e1       	ldi	r19, 0x1E	; 30
    82f4:	45 e8       	ldi	r20, 0x85	; 133
    82f6:	5d eb       	ldi	r21, 0xBD	; 189
    82f8:	c5 01       	movw	r24, r10
    82fa:	b4 01       	movw	r22, r8
    82fc:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8300:	a5 01       	movw	r20, r10
    8302:	94 01       	movw	r18, r8
    8304:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8308:	6b 01       	movw	r12, r22
    830a:	7c 01       	movw	r14, r24
    830c:	24 e5       	ldi	r18, 0x54	; 84
    830e:	33 ee       	ldi	r19, 0xE3	; 227
    8310:	45 e4       	ldi	r20, 0x45	; 69
    8312:	5f e3       	ldi	r21, 0x3F	; 63
    8314:	c5 01       	movw	r24, r10
    8316:	b4 01       	movw	r22, r8
    8318:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    831c:	9b 01       	movw	r18, r22
    831e:	ac 01       	movw	r20, r24
    8320:	c7 01       	movw	r24, r14
    8322:	b6 01       	movw	r22, r12
    8324:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    8328:	28 e9       	ldi	r18, 0x98	; 152
    832a:	3e e6       	ldi	r19, 0x6E	; 110
    832c:	4e e8       	ldi	r20, 0x8E	; 142
    832e:	50 e4       	ldi	r21, 0x40	; 64
    8330:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    8334:	0c 94 4c 4c 	jmp	0x9898	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    8338:	20 e0       	ldi	r18, 0x00	; 0
    833a:	30 e0       	ldi	r19, 0x00	; 0
    833c:	40 e3       	ldi	r20, 0x30	; 48
    833e:	51 e4       	ldi	r21, 0x41	; 65
    8340:	c7 01       	movw	r24, r14
    8342:	b6 01       	movw	r22, r12
    8344:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    8348:	18 16       	cp	r1, r24
    834a:	0c f0       	brlt	.+2      	; 0x834e <corectTrv+0x480>
    834c:	55 c0       	rjmp	.+170    	; 0x83f8 <corectTrv+0x52a>
    834e:	20 e0       	ldi	r18, 0x00	; 0
    8350:	30 e0       	ldi	r19, 0x00	; 0
    8352:	40 e4       	ldi	r20, 0x40	; 64
    8354:	51 e4       	ldi	r21, 0x41	; 65
    8356:	c7 01       	movw	r24, r14
    8358:	b6 01       	movw	r22, r12
    835a:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    835e:	18 16       	cp	r1, r24
    8360:	0c f4       	brge	.+2      	; 0x8364 <corectTrv+0x496>
    8362:	4a c0       	rjmp	.+148    	; 0x83f8 <corectTrv+0x52a>
		{
			return( 0.01315 * ds * ds * ds + 0.59145 * ds * ds + 10.05298 * ds + 54.52301)* k;
    8364:	29 e1       	ldi	r18, 0x19	; 25
    8366:	33 e7       	ldi	r19, 0x73	; 115
    8368:	47 e5       	ldi	r20, 0x57	; 87
    836a:	5c e3       	ldi	r21, 0x3C	; 60
    836c:	c5 01       	movw	r24, r10
    836e:	b4 01       	movw	r22, r8
    8370:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8374:	a5 01       	movw	r20, r10
    8376:	94 01       	movw	r18, r8
    8378:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    837c:	a5 01       	movw	r20, r10
    837e:	94 01       	movw	r18, r8
    8380:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8384:	6b 01       	movw	r12, r22
    8386:	7c 01       	movw	r14, r24
    8388:	24 e4       	ldi	r18, 0x44	; 68
    838a:	39 e6       	ldi	r19, 0x69	; 105
    838c:	47 e1       	ldi	r20, 0x17	; 23
    838e:	5f e3       	ldi	r21, 0x3F	; 63
    8390:	c5 01       	movw	r24, r10
    8392:	b4 01       	movw	r22, r8
    8394:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8398:	a5 01       	movw	r20, r10
    839a:	94 01       	movw	r18, r8
    839c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    83a0:	9b 01       	movw	r18, r22
    83a2:	ac 01       	movw	r20, r24
    83a4:	c7 01       	movw	r24, r14
    83a6:	b6 01       	movw	r22, r12
    83a8:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    83ac:	6b 01       	movw	r12, r22
    83ae:	7c 01       	movw	r14, r24
    83b0:	22 e0       	ldi	r18, 0x02	; 2
    83b2:	39 ed       	ldi	r19, 0xD9	; 217
    83b4:	40 e2       	ldi	r20, 0x20	; 32
    83b6:	51 e4       	ldi	r21, 0x41	; 65
    83b8:	c5 01       	movw	r24, r10
    83ba:	b4 01       	movw	r22, r8
    83bc:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    83c0:	9b 01       	movw	r18, r22
    83c2:	ac 01       	movw	r20, r24
    83c4:	c7 01       	movw	r24, r14
    83c6:	b6 01       	movw	r22, r12
    83c8:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    83cc:	20 e9       	ldi	r18, 0x90	; 144
    83ce:	37 e1       	ldi	r19, 0x17	; 23
    83d0:	4a e5       	ldi	r20, 0x5A	; 90
    83d2:	52 e4       	ldi	r21, 0x42	; 66
    83d4:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    83d8:	6b 01       	movw	r12, r22
    83da:	7c 01       	movw	r14, r24
    83dc:	be 01       	movw	r22, r28
    83de:	dd 0f       	add	r29, r29
    83e0:	88 0b       	sbc	r24, r24
    83e2:	99 0b       	sbc	r25, r25
    83e4:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    83e8:	9b 01       	movw	r18, r22
    83ea:	ac 01       	movw	r20, r24
    83ec:	c7 01       	movw	r24, r14
    83ee:	b6 01       	movw	r22, r12
    83f0:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    83f4:	0c 94 4c 4c 	jmp	0x9898	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    83f8:	20 e0       	ldi	r18, 0x00	; 0
    83fa:	30 e0       	ldi	r19, 0x00	; 0
    83fc:	40 e4       	ldi	r20, 0x40	; 64
    83fe:	51 e4       	ldi	r21, 0x41	; 65
    8400:	c7 01       	movw	r24, r14
    8402:	b6 01       	movw	r22, r12
    8404:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    8408:	18 16       	cp	r1, r24
    840a:	0c f0       	brlt	.+2      	; 0x840e <corectTrv+0x540>
    840c:	55 c0       	rjmp	.+170    	; 0x84b8 <corectTrv+0x5ea>
    840e:	20 e0       	ldi	r18, 0x00	; 0
    8410:	30 e0       	ldi	r19, 0x00	; 0
    8412:	40 e5       	ldi	r20, 0x50	; 80
    8414:	51 e4       	ldi	r21, 0x41	; 65
    8416:	c7 01       	movw	r24, r14
    8418:	b6 01       	movw	r22, r12
    841a:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    841e:	18 16       	cp	r1, r24
    8420:	0c f4       	brge	.+2      	; 0x8424 <corectTrv+0x556>
    8422:	4a c0       	rjmp	.+148    	; 0x84b8 <corectTrv+0x5ea>
		{
			return( 0.02485 * ds * ds * ds + 1.09724 * ds * ds + 17.05530 * ds + 89.43916)* k;
    8424:	2a e3       	ldi	r18, 0x3A	; 58
    8426:	32 e9       	ldi	r19, 0x92	; 146
    8428:	4b ec       	ldi	r20, 0xCB	; 203
    842a:	5c e3       	ldi	r21, 0x3C	; 60
    842c:	c5 01       	movw	r24, r10
    842e:	b4 01       	movw	r22, r8
    8430:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8434:	a5 01       	movw	r20, r10
    8436:	94 01       	movw	r18, r8
    8438:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    843c:	a5 01       	movw	r20, r10
    843e:	94 01       	movw	r18, r8
    8440:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8444:	6b 01       	movw	r12, r22
    8446:	7c 01       	movw	r14, r24
    8448:	2c e5       	ldi	r18, 0x5C	; 92
    844a:	32 e7       	ldi	r19, 0x72	; 114
    844c:	4c e8       	ldi	r20, 0x8C	; 140
    844e:	5f e3       	ldi	r21, 0x3F	; 63
    8450:	c5 01       	movw	r24, r10
    8452:	b4 01       	movw	r22, r8
    8454:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8458:	a5 01       	movw	r20, r10
    845a:	94 01       	movw	r18, r8
    845c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8460:	9b 01       	movw	r18, r22
    8462:	ac 01       	movw	r20, r24
    8464:	c7 01       	movw	r24, r14
    8466:	b6 01       	movw	r22, r12
    8468:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    846c:	6b 01       	movw	r12, r22
    846e:	7c 01       	movw	r14, r24
    8470:	21 e4       	ldi	r18, 0x41	; 65
    8472:	31 e7       	ldi	r19, 0x71	; 113
    8474:	48 e8       	ldi	r20, 0x88	; 136
    8476:	51 e4       	ldi	r21, 0x41	; 65
    8478:	c5 01       	movw	r24, r10
    847a:	b4 01       	movw	r22, r8
    847c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8480:	9b 01       	movw	r18, r22
    8482:	ac 01       	movw	r20, r24
    8484:	c7 01       	movw	r24, r14
    8486:	b6 01       	movw	r22, r12
    8488:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    848c:	2a ed       	ldi	r18, 0xDA	; 218
    848e:	30 ee       	ldi	r19, 0xE0	; 224
    8490:	42 eb       	ldi	r20, 0xB2	; 178
    8492:	52 e4       	ldi	r21, 0x42	; 66
    8494:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8498:	6b 01       	movw	r12, r22
    849a:	7c 01       	movw	r14, r24
    849c:	be 01       	movw	r22, r28
    849e:	dd 0f       	add	r29, r29
    84a0:	88 0b       	sbc	r24, r24
    84a2:	99 0b       	sbc	r25, r25
    84a4:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    84a8:	9b 01       	movw	r18, r22
    84aa:	ac 01       	movw	r20, r24
    84ac:	c7 01       	movw	r24, r14
    84ae:	b6 01       	movw	r22, r12
    84b0:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    84b4:	0c 94 4c 4c 	jmp	0x9898	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    84b8:	20 e0       	ldi	r18, 0x00	; 0
    84ba:	30 e0       	ldi	r19, 0x00	; 0
    84bc:	40 e5       	ldi	r20, 0x50	; 80
    84be:	51 e4       	ldi	r21, 0x41	; 65
    84c0:	c7 01       	movw	r24, r14
    84c2:	b6 01       	movw	r22, r12
    84c4:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    84c8:	18 16       	cp	r1, r24
    84ca:	0c f0       	brlt	.+2      	; 0x84ce <corectTrv+0x600>
    84cc:	55 c0       	rjmp	.+170    	; 0x8578 <corectTrv+0x6aa>
    84ce:	20 e0       	ldi	r18, 0x00	; 0
    84d0:	30 e0       	ldi	r19, 0x00	; 0
    84d2:	40 e6       	ldi	r20, 0x60	; 96
    84d4:	51 e4       	ldi	r21, 0x41	; 65
    84d6:	c7 01       	movw	r24, r14
    84d8:	b6 01       	movw	r22, r12
    84da:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    84de:	18 16       	cp	r1, r24
    84e0:	0c f4       	brge	.+2      	; 0x84e4 <corectTrv+0x616>
    84e2:	4a c0       	rjmp	.+148    	; 0x8578 <corectTrv+0x6aa>
		{
			return( 0.02257 * ds * ds * ds + 0.99967 * ds * ds + 15.71735 * ds + 86.11652)* k;
    84e4:	28 eb       	ldi	r18, 0xB8	; 184
    84e6:	34 ee       	ldi	r19, 0xE4	; 228
    84e8:	48 eb       	ldi	r20, 0xB8	; 184
    84ea:	5c e3       	ldi	r21, 0x3C	; 60
    84ec:	c5 01       	movw	r24, r10
    84ee:	b4 01       	movw	r22, r8
    84f0:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    84f4:	a5 01       	movw	r20, r10
    84f6:	94 01       	movw	r18, r8
    84f8:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    84fc:	a5 01       	movw	r20, r10
    84fe:	94 01       	movw	r18, r8
    8500:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8504:	6b 01       	movw	r12, r22
    8506:	7c 01       	movw	r14, r24
    8508:	20 e6       	ldi	r18, 0x60	; 96
    850a:	3a ee       	ldi	r19, 0xEA	; 234
    850c:	4f e7       	ldi	r20, 0x7F	; 127
    850e:	5f e3       	ldi	r21, 0x3F	; 63
    8510:	c5 01       	movw	r24, r10
    8512:	b4 01       	movw	r22, r8
    8514:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8518:	a5 01       	movw	r20, r10
    851a:	94 01       	movw	r18, r8
    851c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8520:	9b 01       	movw	r18, r22
    8522:	ac 01       	movw	r20, r24
    8524:	c7 01       	movw	r24, r14
    8526:	b6 01       	movw	r22, r12
    8528:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    852c:	6b 01       	movw	r12, r22
    852e:	7c 01       	movw	r14, r24
    8530:	24 e4       	ldi	r18, 0x44	; 68
    8532:	3a e7       	ldi	r19, 0x7A	; 122
    8534:	4b e7       	ldi	r20, 0x7B	; 123
    8536:	51 e4       	ldi	r21, 0x41	; 65
    8538:	c5 01       	movw	r24, r10
    853a:	b4 01       	movw	r22, r8
    853c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8540:	9b 01       	movw	r18, r22
    8542:	ac 01       	movw	r20, r24
    8544:	c7 01       	movw	r24, r14
    8546:	b6 01       	movw	r22, r12
    8548:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    854c:	29 ea       	ldi	r18, 0xA9	; 169
    854e:	3b e3       	ldi	r19, 0x3B	; 59
    8550:	4c ea       	ldi	r20, 0xAC	; 172
    8552:	52 e4       	ldi	r21, 0x42	; 66
    8554:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8558:	6b 01       	movw	r12, r22
    855a:	7c 01       	movw	r14, r24
    855c:	be 01       	movw	r22, r28
    855e:	dd 0f       	add	r29, r29
    8560:	88 0b       	sbc	r24, r24
    8562:	99 0b       	sbc	r25, r25
    8564:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    8568:	9b 01       	movw	r18, r22
    856a:	ac 01       	movw	r20, r24
    856c:	c7 01       	movw	r24, r14
    856e:	b6 01       	movw	r22, r12
    8570:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8574:	0c 94 4c 4c 	jmp	0x9898	; 0x9898 <corectTrv+0x19ca>
		}
		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    8578:	20 e0       	ldi	r18, 0x00	; 0
    857a:	30 e0       	ldi	r19, 0x00	; 0
    857c:	40 e6       	ldi	r20, 0x60	; 96
    857e:	51 e4       	ldi	r21, 0x41	; 65
    8580:	c7 01       	movw	r24, r14
    8582:	b6 01       	movw	r22, r12
    8584:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    8588:	18 16       	cp	r1, r24
    858a:	0c f0       	brlt	.+2      	; 0x858e <corectTrv+0x6c0>
    858c:	55 c0       	rjmp	.+170    	; 0x8638 <corectTrv+0x76a>
    858e:	20 e0       	ldi	r18, 0x00	; 0
    8590:	30 e0       	ldi	r19, 0x00	; 0
    8592:	40 e7       	ldi	r20, 0x70	; 112
    8594:	51 e4       	ldi	r21, 0x41	; 65
    8596:	c7 01       	movw	r24, r14
    8598:	b6 01       	movw	r22, r12
    859a:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    859e:	18 16       	cp	r1, r24
    85a0:	0c f4       	brge	.+2      	; 0x85a4 <corectTrv+0x6d6>
    85a2:	4a c0       	rjmp	.+148    	; 0x8638 <corectTrv+0x76a>
		{
			return( 0.02199 * ds * ds * ds + 0.99841 * ds * ds + 16.07877 * ds + 91.69972)* k;
    85a4:	2f e5       	ldi	r18, 0x5F	; 95
    85a6:	34 e2       	ldi	r19, 0x24	; 36
    85a8:	44 eb       	ldi	r20, 0xB4	; 180
    85aa:	5c e3       	ldi	r21, 0x3C	; 60
    85ac:	c5 01       	movw	r24, r10
    85ae:	b4 01       	movw	r22, r8
    85b0:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    85b4:	a5 01       	movw	r20, r10
    85b6:	94 01       	movw	r18, r8
    85b8:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    85bc:	a5 01       	movw	r20, r10
    85be:	94 01       	movw	r18, r8
    85c0:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    85c4:	6b 01       	movw	r12, r22
    85c6:	7c 01       	movw	r14, r24
    85c8:	2c ec       	ldi	r18, 0xCC	; 204
    85ca:	37 e9       	ldi	r19, 0x97	; 151
    85cc:	4f e7       	ldi	r20, 0x7F	; 127
    85ce:	5f e3       	ldi	r21, 0x3F	; 63
    85d0:	c5 01       	movw	r24, r10
    85d2:	b4 01       	movw	r22, r8
    85d4:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    85d8:	a5 01       	movw	r20, r10
    85da:	94 01       	movw	r18, r8
    85dc:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    85e0:	9b 01       	movw	r18, r22
    85e2:	ac 01       	movw	r20, r24
    85e4:	c7 01       	movw	r24, r14
    85e6:	b6 01       	movw	r22, r12
    85e8:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    85ec:	6b 01       	movw	r12, r22
    85ee:	7c 01       	movw	r14, r24
    85f0:	22 e5       	ldi	r18, 0x52	; 82
    85f2:	31 ea       	ldi	r19, 0xA1	; 161
    85f4:	40 e8       	ldi	r20, 0x80	; 128
    85f6:	51 e4       	ldi	r21, 0x41	; 65
    85f8:	c5 01       	movw	r24, r10
    85fa:	b4 01       	movw	r22, r8
    85fc:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8600:	9b 01       	movw	r18, r22
    8602:	ac 01       	movw	r20, r24
    8604:	c7 01       	movw	r24, r14
    8606:	b6 01       	movw	r22, r12
    8608:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    860c:	22 e4       	ldi	r18, 0x42	; 66
    860e:	36 e6       	ldi	r19, 0x66	; 102
    8610:	47 eb       	ldi	r20, 0xB7	; 183
    8612:	52 e4       	ldi	r21, 0x42	; 66
    8614:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8618:	6b 01       	movw	r12, r22
    861a:	7c 01       	movw	r14, r24
    861c:	be 01       	movw	r22, r28
    861e:	dd 0f       	add	r29, r29
    8620:	88 0b       	sbc	r24, r24
    8622:	99 0b       	sbc	r25, r25
    8624:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    8628:	9b 01       	movw	r18, r22
    862a:	ac 01       	movw	r20, r24
    862c:	c7 01       	movw	r24, r14
    862e:	b6 01       	movw	r22, r12
    8630:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8634:	0c 94 4c 4c 	jmp	0x9898	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    8638:	20 e0       	ldi	r18, 0x00	; 0
    863a:	30 e0       	ldi	r19, 0x00	; 0
    863c:	40 e7       	ldi	r20, 0x70	; 112
    863e:	51 e4       	ldi	r21, 0x41	; 65
    8640:	c7 01       	movw	r24, r14
    8642:	b6 01       	movw	r22, r12
    8644:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    8648:	18 16       	cp	r1, r24
    864a:	0c f0       	brlt	.+2      	; 0x864e <corectTrv+0x780>
    864c:	55 c0       	rjmp	.+170    	; 0x86f8 <corectTrv+0x82a>
    864e:	20 e0       	ldi	r18, 0x00	; 0
    8650:	30 e0       	ldi	r19, 0x00	; 0
    8652:	40 e8       	ldi	r20, 0x80	; 128
    8654:	51 e4       	ldi	r21, 0x41	; 65
    8656:	c7 01       	movw	r24, r14
    8658:	b6 01       	movw	r22, r12
    865a:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    865e:	18 16       	cp	r1, r24
    8660:	0c f4       	brge	.+2      	; 0x8664 <corectTrv+0x796>
    8662:	4a c0       	rjmp	.+148    	; 0x86f8 <corectTrv+0x82a>
		{
			return( 0.02293 * ds * ds * ds + 1.04454 * ds * ds + 16.79148 * ds + 97.65075)* k;
    8664:	22 eb       	ldi	r18, 0xB2	; 178
    8666:	37 ed       	ldi	r19, 0xD7	; 215
    8668:	4b eb       	ldi	r20, 0xBB	; 187
    866a:	5c e3       	ldi	r21, 0x3C	; 60
    866c:	c5 01       	movw	r24, r10
    866e:	b4 01       	movw	r22, r8
    8670:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8674:	a5 01       	movw	r20, r10
    8676:	94 01       	movw	r18, r8
    8678:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    867c:	a5 01       	movw	r20, r10
    867e:	94 01       	movw	r18, r8
    8680:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8684:	6b 01       	movw	r12, r22
    8686:	7c 01       	movw	r14, r24
    8688:	2d e7       	ldi	r18, 0x7D	; 125
    868a:	33 eb       	ldi	r19, 0xB3	; 179
    868c:	45 e8       	ldi	r20, 0x85	; 133
    868e:	5f e3       	ldi	r21, 0x3F	; 63
    8690:	c5 01       	movw	r24, r10
    8692:	b4 01       	movw	r22, r8
    8694:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8698:	a5 01       	movw	r20, r10
    869a:	94 01       	movw	r18, r8
    869c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    86a0:	9b 01       	movw	r18, r22
    86a2:	ac 01       	movw	r20, r24
    86a4:	c7 01       	movw	r24, r14
    86a6:	b6 01       	movw	r22, r12
    86a8:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    86ac:	6b 01       	movw	r12, r22
    86ae:	7c 01       	movw	r14, r24
    86b0:	23 ef       	ldi	r18, 0xF3	; 243
    86b2:	34 e5       	ldi	r19, 0x54	; 84
    86b4:	46 e8       	ldi	r20, 0x86	; 134
    86b6:	51 e4       	ldi	r21, 0x41	; 65
    86b8:	c5 01       	movw	r24, r10
    86ba:	b4 01       	movw	r22, r8
    86bc:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    86c0:	9b 01       	movw	r18, r22
    86c2:	ac 01       	movw	r20, r24
    86c4:	c7 01       	movw	r24, r14
    86c6:	b6 01       	movw	r22, r12
    86c8:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    86cc:	2f e2       	ldi	r18, 0x2F	; 47
    86ce:	3d e4       	ldi	r19, 0x4D	; 77
    86d0:	43 ec       	ldi	r20, 0xC3	; 195
    86d2:	52 e4       	ldi	r21, 0x42	; 66
    86d4:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    86d8:	6b 01       	movw	r12, r22
    86da:	7c 01       	movw	r14, r24
    86dc:	be 01       	movw	r22, r28
    86de:	dd 0f       	add	r29, r29
    86e0:	88 0b       	sbc	r24, r24
    86e2:	99 0b       	sbc	r25, r25
    86e4:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    86e8:	9b 01       	movw	r18, r22
    86ea:	ac 01       	movw	r20, r24
    86ec:	c7 01       	movw	r24, r14
    86ee:	b6 01       	movw	r22, r12
    86f0:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    86f4:	0c 94 4c 4c 	jmp	0x9898	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 9)
    86f8:	20 e0       	ldi	r18, 0x00	; 0
    86fa:	30 e0       	ldi	r19, 0x00	; 0
    86fc:	40 e8       	ldi	r20, 0x80	; 128
    86fe:	51 e4       	ldi	r21, 0x41	; 65
    8700:	c7 01       	movw	r24, r14
    8702:	b6 01       	movw	r22, r12
    8704:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    8708:	18 16       	cp	r1, r24
    870a:	14 f0       	brlt	.+4      	; 0x8710 <corectTrv+0x842>
    870c:	0c 94 39 4c 	jmp	0x9872	; 0x9872 <corectTrv+0x19a4>
		{
			return( 0.01242 * ds * ds * ds + 0.55907 * ds * ds + 9.57142 * ds + 67.21499)* k;
    8710:	21 e4       	ldi	r18, 0x41	; 65
    8712:	3d e7       	ldi	r19, 0x7D	; 125
    8714:	4b e4       	ldi	r20, 0x4B	; 75
    8716:	5c e3       	ldi	r21, 0x3C	; 60
    8718:	c5 01       	movw	r24, r10
    871a:	b4 01       	movw	r22, r8
    871c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8720:	a5 01       	movw	r20, r10
    8722:	94 01       	movw	r18, r8
    8724:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8728:	a5 01       	movw	r20, r10
    872a:	94 01       	movw	r18, r8
    872c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8730:	6b 01       	movw	r12, r22
    8732:	7c 01       	movw	r14, r24
    8734:	26 e3       	ldi	r18, 0x36	; 54
    8736:	3f e1       	ldi	r19, 0x1F	; 31
    8738:	4f e0       	ldi	r20, 0x0F	; 15
    873a:	5f e3       	ldi	r21, 0x3F	; 63
    873c:	c5 01       	movw	r24, r10
    873e:	b4 01       	movw	r22, r8
    8740:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8744:	a5 01       	movw	r20, r10
    8746:	94 01       	movw	r18, r8
    8748:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    874c:	9b 01       	movw	r18, r22
    874e:	ac 01       	movw	r20, r24
    8750:	c7 01       	movw	r24, r14
    8752:	b6 01       	movw	r22, r12
    8754:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8758:	6b 01       	movw	r12, r22
    875a:	7c 01       	movw	r14, r24
    875c:	29 e8       	ldi	r18, 0x89	; 137
    875e:	34 e2       	ldi	r19, 0x24	; 36
    8760:	49 e1       	ldi	r20, 0x19	; 25
    8762:	51 e4       	ldi	r21, 0x41	; 65
    8764:	c5 01       	movw	r24, r10
    8766:	b4 01       	movw	r22, r8
    8768:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    876c:	9b 01       	movw	r18, r22
    876e:	ac 01       	movw	r20, r24
    8770:	c7 01       	movw	r24, r14
    8772:	b6 01       	movw	r22, r12
    8774:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8778:	23 e1       	ldi	r18, 0x13	; 19
    877a:	3e e6       	ldi	r19, 0x6E	; 110
    877c:	46 e8       	ldi	r20, 0x86	; 134
    877e:	52 e4       	ldi	r21, 0x42	; 66
    8780:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8784:	6b 01       	movw	r12, r22
    8786:	7c 01       	movw	r14, r24
    8788:	be 01       	movw	r22, r28
    878a:	dd 0f       	add	r29, r29
    878c:	88 0b       	sbc	r24, r24
    878e:	99 0b       	sbc	r25, r25
    8790:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    8794:	9b 01       	movw	r18, r22
    8796:	ac 01       	movw	r20, r24
    8798:	c7 01       	movw	r24, r14
    879a:	b6 01       	movw	r22, r12
    879c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    87a0:	0c 94 4c 4c 	jmp	0x9898	; 0x9898 <corectTrv+0x19ca>
		}
	}

	else if (ds < 0 && ds >= -10)
    87a4:	20 e0       	ldi	r18, 0x00	; 0
    87a6:	30 e0       	ldi	r19, 0x00	; 0
    87a8:	a9 01       	movw	r20, r18
    87aa:	c5 01       	movw	r24, r10
    87ac:	b4 01       	movw	r22, r8
    87ae:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    87b2:	88 23       	and	r24, r24
    87b4:	0c f0       	brlt	.+2      	; 0x87b8 <corectTrv+0x8ea>
    87b6:	d6 c3       	rjmp	.+1964   	; 0x8f64 <corectTrv+0x1096>
    87b8:	20 e0       	ldi	r18, 0x00	; 0
    87ba:	30 e0       	ldi	r19, 0x00	; 0
    87bc:	40 e2       	ldi	r20, 0x20	; 32
    87be:	51 ec       	ldi	r21, 0xC1	; 193
    87c0:	c5 01       	movw	r24, r10
    87c2:	b4 01       	movw	r22, r8
    87c4:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    87c8:	88 23       	and	r24, r24
    87ca:	0c f4       	brge	.+2      	; 0x87ce <corectTrv+0x900>
    87cc:	cb c3       	rjmp	.+1942   	; 0x8f64 <corectTrv+0x1096>
	{
		if (Superheat == SSet)
    87ce:	20 e0       	ldi	r18, 0x00	; 0
    87d0:	30 e0       	ldi	r19, 0x00	; 0
    87d2:	40 ee       	ldi	r20, 0xE0	; 224
    87d4:	50 e4       	ldi	r21, 0x40	; 64
    87d6:	c7 01       	movw	r24, r14
    87d8:	b6 01       	movw	r22, r12
    87da:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    87de:	81 11       	cpse	r24, r1
    87e0:	4a c0       	rjmp	.+148    	; 0x8876 <corectTrv+0x9a8>
		{
			return( 0.01259 * ds * ds * ds + 0.18896 * ds * ds + 2.12770 * ds - 0.01350)* k;
    87e2:	2a e4       	ldi	r18, 0x4A	; 74
    87e4:	36 e4       	ldi	r19, 0x46	; 70
    87e6:	4e e4       	ldi	r20, 0x4E	; 78
    87e8:	5c e3       	ldi	r21, 0x3C	; 60
    87ea:	c5 01       	movw	r24, r10
    87ec:	b4 01       	movw	r22, r8
    87ee:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    87f2:	a5 01       	movw	r20, r10
    87f4:	94 01       	movw	r18, r8
    87f6:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    87fa:	a5 01       	movw	r20, r10
    87fc:	94 01       	movw	r18, r8
    87fe:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8802:	6b 01       	movw	r12, r22
    8804:	7c 01       	movw	r14, r24
    8806:	2b eb       	ldi	r18, 0xBB	; 187
    8808:	3e e7       	ldi	r19, 0x7E	; 126
    880a:	41 e4       	ldi	r20, 0x41	; 65
    880c:	5e e3       	ldi	r21, 0x3E	; 62
    880e:	c5 01       	movw	r24, r10
    8810:	b4 01       	movw	r22, r8
    8812:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8816:	a5 01       	movw	r20, r10
    8818:	94 01       	movw	r18, r8
    881a:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    881e:	9b 01       	movw	r18, r22
    8820:	ac 01       	movw	r20, r24
    8822:	c7 01       	movw	r24, r14
    8824:	b6 01       	movw	r22, r12
    8826:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    882a:	6b 01       	movw	r12, r22
    882c:	7c 01       	movw	r14, r24
    882e:	2d e3       	ldi	r18, 0x3D	; 61
    8830:	3c e2       	ldi	r19, 0x2C	; 44
    8832:	48 e0       	ldi	r20, 0x08	; 8
    8834:	50 e4       	ldi	r21, 0x40	; 64
    8836:	c5 01       	movw	r24, r10
    8838:	b4 01       	movw	r22, r8
    883a:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    883e:	9b 01       	movw	r18, r22
    8840:	ac 01       	movw	r20, r24
    8842:	c7 01       	movw	r24, r14
    8844:	b6 01       	movw	r22, r12
    8846:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    884a:	2b e1       	ldi	r18, 0x1B	; 27
    884c:	3f e2       	ldi	r19, 0x2F	; 47
    884e:	4d e5       	ldi	r20, 0x5D	; 93
    8850:	5c e3       	ldi	r21, 0x3C	; 60
    8852:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    8856:	6b 01       	movw	r12, r22
    8858:	7c 01       	movw	r14, r24
    885a:	be 01       	movw	r22, r28
    885c:	dd 0f       	add	r29, r29
    885e:	88 0b       	sbc	r24, r24
    8860:	99 0b       	sbc	r25, r25
    8862:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    8866:	9b 01       	movw	r18, r22
    8868:	ac 01       	movw	r20, r24
    886a:	c7 01       	movw	r24, r14
    886c:	b6 01       	movw	r22, r12
    886e:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8872:	0c 94 4c 4c 	jmp	0x9898	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    8876:	20 e0       	ldi	r18, 0x00	; 0
    8878:	30 e0       	ldi	r19, 0x00	; 0
    887a:	40 ee       	ldi	r20, 0xE0	; 224
    887c:	50 e4       	ldi	r21, 0x40	; 64
    887e:	c7 01       	movw	r24, r14
    8880:	b6 01       	movw	r22, r12
    8882:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    8886:	18 16       	cp	r1, r24
    8888:	0c f0       	brlt	.+2      	; 0x888c <corectTrv+0x9be>
    888a:	54 c0       	rjmp	.+168    	; 0x8934 <corectTrv+0xa66>
    888c:	20 e0       	ldi	r18, 0x00	; 0
    888e:	30 e0       	ldi	r19, 0x00	; 0
    8890:	40 e0       	ldi	r20, 0x00	; 0
    8892:	51 e4       	ldi	r21, 0x41	; 65
    8894:	c7 01       	movw	r24, r14
    8896:	b6 01       	movw	r22, r12
    8898:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    889c:	18 16       	cp	r1, r24
    889e:	0c f4       	brge	.+2      	; 0x88a2 <corectTrv+0x9d4>
    88a0:	49 c0       	rjmp	.+146    	; 0x8934 <corectTrv+0xa66>
		{
			return( 0.02252 * ds * ds * ds + 0.32376 * ds * ds + 2.48397 * ds + 3.72657)* k;
    88a2:	2d ed       	ldi	r18, 0xDD	; 221
    88a4:	3b e7       	ldi	r19, 0x7B	; 123
    88a6:	48 eb       	ldi	r20, 0xB8	; 184
    88a8:	5c e3       	ldi	r21, 0x3C	; 60
    88aa:	c5 01       	movw	r24, r10
    88ac:	b4 01       	movw	r22, r8
    88ae:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    88b2:	a5 01       	movw	r20, r10
    88b4:	94 01       	movw	r18, r8
    88b6:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    88ba:	a5 01       	movw	r20, r10
    88bc:	94 01       	movw	r18, r8
    88be:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    88c2:	6b 01       	movw	r12, r22
    88c4:	7c 01       	movw	r14, r24
    88c6:	2f ed       	ldi	r18, 0xDF	; 223
    88c8:	33 ec       	ldi	r19, 0xC3	; 195
    88ca:	45 ea       	ldi	r20, 0xA5	; 165
    88cc:	5e e3       	ldi	r21, 0x3E	; 62
    88ce:	c5 01       	movw	r24, r10
    88d0:	b4 01       	movw	r22, r8
    88d2:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    88d6:	a5 01       	movw	r20, r10
    88d8:	94 01       	movw	r18, r8
    88da:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    88de:	9b 01       	movw	r18, r22
    88e0:	ac 01       	movw	r20, r24
    88e2:	c7 01       	movw	r24, r14
    88e4:	b6 01       	movw	r22, r12
    88e6:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    88ea:	6b 01       	movw	r12, r22
    88ec:	7c 01       	movw	r14, r24
    88ee:	2d e5       	ldi	r18, 0x5D	; 93
    88f0:	39 ef       	ldi	r19, 0xF9	; 249
    88f2:	4e e1       	ldi	r20, 0x1E	; 30
    88f4:	50 e4       	ldi	r21, 0x40	; 64
    88f6:	c5 01       	movw	r24, r10
    88f8:	b4 01       	movw	r22, r8
    88fa:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    88fe:	9b 01       	movw	r18, r22
    8900:	ac 01       	movw	r20, r24
    8902:	c7 01       	movw	r24, r14
    8904:	b6 01       	movw	r22, r12
    8906:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    890a:	2f e1       	ldi	r18, 0x1F	; 31
    890c:	30 e8       	ldi	r19, 0x80	; 128
    890e:	4e e6       	ldi	r20, 0x6E	; 110
    8910:	50 e4       	ldi	r21, 0x40	; 64
    8912:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8916:	6b 01       	movw	r12, r22
    8918:	7c 01       	movw	r14, r24
    891a:	be 01       	movw	r22, r28
    891c:	dd 0f       	add	r29, r29
    891e:	88 0b       	sbc	r24, r24
    8920:	99 0b       	sbc	r25, r25
    8922:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    8926:	9b 01       	movw	r18, r22
    8928:	ac 01       	movw	r20, r24
    892a:	c7 01       	movw	r24, r14
    892c:	b6 01       	movw	r22, r12
    892e:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8932:	b2 c7       	rjmp	.+3940   	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    8934:	20 e0       	ldi	r18, 0x00	; 0
    8936:	30 e0       	ldi	r19, 0x00	; 0
    8938:	40 e0       	ldi	r20, 0x00	; 0
    893a:	51 e4       	ldi	r21, 0x41	; 65
    893c:	c7 01       	movw	r24, r14
    893e:	b6 01       	movw	r22, r12
    8940:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    8944:	18 16       	cp	r1, r24
    8946:	0c f0       	brlt	.+2      	; 0x894a <corectTrv+0xa7c>
    8948:	54 c0       	rjmp	.+168    	; 0x89f2 <corectTrv+0xb24>
    894a:	20 e0       	ldi	r18, 0x00	; 0
    894c:	30 e0       	ldi	r19, 0x00	; 0
    894e:	40 e1       	ldi	r20, 0x10	; 16
    8950:	51 e4       	ldi	r21, 0x41	; 65
    8952:	c7 01       	movw	r24, r14
    8954:	b6 01       	movw	r22, r12
    8956:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    895a:	18 16       	cp	r1, r24
    895c:	0c f4       	brge	.+2      	; 0x8960 <corectTrv+0xa92>
    895e:	49 c0       	rjmp	.+146    	; 0x89f2 <corectTrv+0xb24>
		{
			return( 0.02106 * ds * ds * ds + 0.30427 * ds * ds + 2.44311 * ds + 6.31417)* k;
    8960:	25 e0       	ldi	r18, 0x05	; 5
    8962:	36 e8       	ldi	r19, 0x86	; 134
    8964:	4c ea       	ldi	r20, 0xAC	; 172
    8966:	5c e3       	ldi	r21, 0x3C	; 60
    8968:	c5 01       	movw	r24, r10
    896a:	b4 01       	movw	r22, r8
    896c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8970:	a5 01       	movw	r20, r10
    8972:	94 01       	movw	r18, r8
    8974:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8978:	a5 01       	movw	r20, r10
    897a:	94 01       	movw	r18, r8
    897c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8980:	6b 01       	movw	r12, r22
    8982:	7c 01       	movw	r14, r24
    8984:	27 e4       	ldi	r18, 0x47	; 71
    8986:	39 ec       	ldi	r19, 0xC9	; 201
    8988:	4b e9       	ldi	r20, 0x9B	; 155
    898a:	5e e3       	ldi	r21, 0x3E	; 62
    898c:	c5 01       	movw	r24, r10
    898e:	b4 01       	movw	r22, r8
    8990:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8994:	a5 01       	movw	r20, r10
    8996:	94 01       	movw	r18, r8
    8998:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    899c:	9b 01       	movw	r18, r22
    899e:	ac 01       	movw	r20, r24
    89a0:	c7 01       	movw	r24, r14
    89a2:	b6 01       	movw	r22, r12
    89a4:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    89a8:	6b 01       	movw	r12, r22
    89aa:	7c 01       	movw	r14, r24
    89ac:	2a ee       	ldi	r18, 0xEA	; 234
    89ae:	3b e5       	ldi	r19, 0x5B	; 91
    89b0:	4c e1       	ldi	r20, 0x1C	; 28
    89b2:	50 e4       	ldi	r21, 0x40	; 64
    89b4:	c5 01       	movw	r24, r10
    89b6:	b4 01       	movw	r22, r8
    89b8:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    89bc:	9b 01       	movw	r18, r22
    89be:	ac 01       	movw	r20, r24
    89c0:	c7 01       	movw	r24, r14
    89c2:	b6 01       	movw	r22, r12
    89c4:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    89c8:	2e ea       	ldi	r18, 0xAE	; 174
    89ca:	3d e0       	ldi	r19, 0x0D	; 13
    89cc:	4a ec       	ldi	r20, 0xCA	; 202
    89ce:	50 e4       	ldi	r21, 0x40	; 64
    89d0:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    89d4:	6b 01       	movw	r12, r22
    89d6:	7c 01       	movw	r14, r24
    89d8:	be 01       	movw	r22, r28
    89da:	dd 0f       	add	r29, r29
    89dc:	88 0b       	sbc	r24, r24
    89de:	99 0b       	sbc	r25, r25
    89e0:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    89e4:	9b 01       	movw	r18, r22
    89e6:	ac 01       	movw	r20, r24
    89e8:	c7 01       	movw	r24, r14
    89ea:	b6 01       	movw	r22, r12
    89ec:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    89f0:	53 c7       	rjmp	.+3750   	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    89f2:	20 e0       	ldi	r18, 0x00	; 0
    89f4:	30 e0       	ldi	r19, 0x00	; 0
    89f6:	40 e1       	ldi	r20, 0x10	; 16
    89f8:	51 e4       	ldi	r21, 0x41	; 65
    89fa:	c7 01       	movw	r24, r14
    89fc:	b6 01       	movw	r22, r12
    89fe:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    8a02:	18 16       	cp	r1, r24
    8a04:	0c f0       	brlt	.+2      	; 0x8a08 <corectTrv+0xb3a>
    8a06:	54 c0       	rjmp	.+168    	; 0x8ab0 <corectTrv+0xbe2>
    8a08:	20 e0       	ldi	r18, 0x00	; 0
    8a0a:	30 e0       	ldi	r19, 0x00	; 0
    8a0c:	40 e2       	ldi	r20, 0x20	; 32
    8a0e:	51 e4       	ldi	r21, 0x41	; 65
    8a10:	c7 01       	movw	r24, r14
    8a12:	b6 01       	movw	r22, r12
    8a14:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    8a18:	18 16       	cp	r1, r24
    8a1a:	0c f4       	brge	.+2      	; 0x8a1e <corectTrv+0xb50>
    8a1c:	49 c0       	rjmp	.+146    	; 0x8ab0 <corectTrv+0xbe2>
		{
			return( 0.02106 * ds * ds * ds + 0.32749 * ds * ds + 2.67528 * ds + 8.74842)* k;
    8a1e:	25 e0       	ldi	r18, 0x05	; 5
    8a20:	36 e8       	ldi	r19, 0x86	; 134
    8a22:	4c ea       	ldi	r20, 0xAC	; 172
    8a24:	5c e3       	ldi	r21, 0x3C	; 60
    8a26:	c5 01       	movw	r24, r10
    8a28:	b4 01       	movw	r22, r8
    8a2a:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8a2e:	a5 01       	movw	r20, r10
    8a30:	94 01       	movw	r18, r8
    8a32:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8a36:	a5 01       	movw	r20, r10
    8a38:	94 01       	movw	r18, r8
    8a3a:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8a3e:	6b 01       	movw	r12, r22
    8a40:	7c 01       	movw	r14, r24
    8a42:	25 ec       	ldi	r18, 0xC5	; 197
    8a44:	3c ea       	ldi	r19, 0xAC	; 172
    8a46:	47 ea       	ldi	r20, 0xA7	; 167
    8a48:	5e e3       	ldi	r21, 0x3E	; 62
    8a4a:	c5 01       	movw	r24, r10
    8a4c:	b4 01       	movw	r22, r8
    8a4e:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8a52:	a5 01       	movw	r20, r10
    8a54:	94 01       	movw	r18, r8
    8a56:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8a5a:	9b 01       	movw	r18, r22
    8a5c:	ac 01       	movw	r20, r24
    8a5e:	c7 01       	movw	r24, r14
    8a60:	b6 01       	movw	r22, r12
    8a62:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8a66:	6b 01       	movw	r12, r22
    8a68:	7c 01       	movw	r14, r24
    8a6a:	2a ec       	ldi	r18, 0xCA	; 202
    8a6c:	37 e3       	ldi	r19, 0x37	; 55
    8a6e:	4b e2       	ldi	r20, 0x2B	; 43
    8a70:	50 e4       	ldi	r21, 0x40	; 64
    8a72:	c5 01       	movw	r24, r10
    8a74:	b4 01       	movw	r22, r8
    8a76:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8a7a:	9b 01       	movw	r18, r22
    8a7c:	ac 01       	movw	r20, r24
    8a7e:	c7 01       	movw	r24, r14
    8a80:	b6 01       	movw	r22, r12
    8a82:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8a86:	27 e8       	ldi	r18, 0x87	; 135
    8a88:	39 ef       	ldi	r19, 0xF9	; 249
    8a8a:	4b e0       	ldi	r20, 0x0B	; 11
    8a8c:	51 e4       	ldi	r21, 0x41	; 65
    8a8e:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8a92:	6b 01       	movw	r12, r22
    8a94:	7c 01       	movw	r14, r24
    8a96:	be 01       	movw	r22, r28
    8a98:	dd 0f       	add	r29, r29
    8a9a:	88 0b       	sbc	r24, r24
    8a9c:	99 0b       	sbc	r25, r25
    8a9e:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    8aa2:	9b 01       	movw	r18, r22
    8aa4:	ac 01       	movw	r20, r24
    8aa6:	c7 01       	movw	r24, r14
    8aa8:	b6 01       	movw	r22, r12
    8aaa:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8aae:	f4 c6       	rjmp	.+3560   	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    8ab0:	20 e0       	ldi	r18, 0x00	; 0
    8ab2:	30 e0       	ldi	r19, 0x00	; 0
    8ab4:	40 e2       	ldi	r20, 0x20	; 32
    8ab6:	51 e4       	ldi	r21, 0x41	; 65
    8ab8:	c7 01       	movw	r24, r14
    8aba:	b6 01       	movw	r22, r12
    8abc:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    8ac0:	18 16       	cp	r1, r24
    8ac2:	0c f0       	brlt	.+2      	; 0x8ac6 <corectTrv+0xbf8>
    8ac4:	54 c0       	rjmp	.+168    	; 0x8b6e <corectTrv+0xca0>
    8ac6:	20 e0       	ldi	r18, 0x00	; 0
    8ac8:	30 e0       	ldi	r19, 0x00	; 0
    8aca:	40 e3       	ldi	r20, 0x30	; 48
    8acc:	51 e4       	ldi	r21, 0x41	; 65
    8ace:	c7 01       	movw	r24, r14
    8ad0:	b6 01       	movw	r22, r12
    8ad2:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    8ad6:	18 16       	cp	r1, r24
    8ad8:	0c f4       	brge	.+2      	; 0x8adc <corectTrv+0xc0e>
    8ada:	49 c0       	rjmp	.+146    	; 0x8b6e <corectTrv+0xca0>
		{
			return( 0.02252 * ds * ds * ds + 0.35182 * ds * ds + 2.76462 * ds + 11.25664)* k;
    8adc:	2d ed       	ldi	r18, 0xDD	; 221
    8ade:	3b e7       	ldi	r19, 0x7B	; 123
    8ae0:	48 eb       	ldi	r20, 0xB8	; 184
    8ae2:	5c e3       	ldi	r21, 0x3C	; 60
    8ae4:	c5 01       	movw	r24, r10
    8ae6:	b4 01       	movw	r22, r8
    8ae8:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8aec:	a5 01       	movw	r20, r10
    8aee:	94 01       	movw	r18, r8
    8af0:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8af4:	a5 01       	movw	r20, r10
    8af6:	94 01       	movw	r18, r8
    8af8:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8afc:	6b 01       	movw	r12, r22
    8afe:	7c 01       	movw	r14, r24
    8b00:	20 ec       	ldi	r18, 0xC0	; 192
    8b02:	31 e2       	ldi	r19, 0x21	; 33
    8b04:	44 eb       	ldi	r20, 0xB4	; 180
    8b06:	5e e3       	ldi	r21, 0x3E	; 62
    8b08:	c5 01       	movw	r24, r10
    8b0a:	b4 01       	movw	r22, r8
    8b0c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8b10:	a5 01       	movw	r20, r10
    8b12:	94 01       	movw	r18, r8
    8b14:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8b18:	9b 01       	movw	r18, r22
    8b1a:	ac 01       	movw	r20, r24
    8b1c:	c7 01       	movw	r24, r14
    8b1e:	b6 01       	movw	r22, r12
    8b20:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8b24:	6b 01       	movw	r12, r22
    8b26:	7c 01       	movw	r14, r24
    8b28:	29 e8       	ldi	r18, 0x89	; 137
    8b2a:	3f ee       	ldi	r19, 0xEF	; 239
    8b2c:	40 e3       	ldi	r20, 0x30	; 48
    8b2e:	50 e4       	ldi	r21, 0x40	; 64
    8b30:	c5 01       	movw	r24, r10
    8b32:	b4 01       	movw	r22, r8
    8b34:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8b38:	9b 01       	movw	r18, r22
    8b3a:	ac 01       	movw	r20, r24
    8b3c:	c7 01       	movw	r24, r14
    8b3e:	b6 01       	movw	r22, r12
    8b40:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8b44:	23 e3       	ldi	r18, 0x33	; 51
    8b46:	3b e1       	ldi	r19, 0x1B	; 27
    8b48:	44 e3       	ldi	r20, 0x34	; 52
    8b4a:	51 e4       	ldi	r21, 0x41	; 65
    8b4c:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8b50:	6b 01       	movw	r12, r22
    8b52:	7c 01       	movw	r14, r24
    8b54:	be 01       	movw	r22, r28
    8b56:	dd 0f       	add	r29, r29
    8b58:	88 0b       	sbc	r24, r24
    8b5a:	99 0b       	sbc	r25, r25
    8b5c:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    8b60:	9b 01       	movw	r18, r22
    8b62:	ac 01       	movw	r20, r24
    8b64:	c7 01       	movw	r24, r14
    8b66:	b6 01       	movw	r22, r12
    8b68:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8b6c:	95 c6       	rjmp	.+3370   	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    8b6e:	20 e0       	ldi	r18, 0x00	; 0
    8b70:	30 e0       	ldi	r19, 0x00	; 0
    8b72:	40 e3       	ldi	r20, 0x30	; 48
    8b74:	51 e4       	ldi	r21, 0x41	; 65
    8b76:	c7 01       	movw	r24, r14
    8b78:	b6 01       	movw	r22, r12
    8b7a:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    8b7e:	18 16       	cp	r1, r24
    8b80:	0c f0       	brlt	.+2      	; 0x8b84 <corectTrv+0xcb6>
    8b82:	54 c0       	rjmp	.+168    	; 0x8c2c <corectTrv+0xd5e>
    8b84:	20 e0       	ldi	r18, 0x00	; 0
    8b86:	30 e0       	ldi	r19, 0x00	; 0
    8b88:	40 e4       	ldi	r20, 0x40	; 64
    8b8a:	51 e4       	ldi	r21, 0x41	; 65
    8b8c:	c7 01       	movw	r24, r14
    8b8e:	b6 01       	movw	r22, r12
    8b90:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    8b94:	18 16       	cp	r1, r24
    8b96:	0c f4       	brge	.+2      	; 0x8b9a <corectTrv+0xccc>
    8b98:	49 c0       	rjmp	.+146    	; 0x8c2c <corectTrv+0xd5e>
		{
			return( 0.01251 * ds * ds * ds + 0.18754 * ds * ds + 2.12069 * ds + 14.98441)* k;
    8b9a:	2e eb       	ldi	r18, 0xBE	; 190
    8b9c:	36 ef       	ldi	r19, 0xF6	; 246
    8b9e:	4c e4       	ldi	r20, 0x4C	; 76
    8ba0:	5c e3       	ldi	r21, 0x3C	; 60
    8ba2:	c5 01       	movw	r24, r10
    8ba4:	b4 01       	movw	r22, r8
    8ba6:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8baa:	a5 01       	movw	r20, r10
    8bac:	94 01       	movw	r18, r8
    8bae:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8bb2:	a5 01       	movw	r20, r10
    8bb4:	94 01       	movw	r18, r8
    8bb6:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8bba:	6b 01       	movw	r12, r22
    8bbc:	7c 01       	movw	r14, r24
    8bbe:	2c e7       	ldi	r18, 0x7C	; 124
    8bc0:	3a e0       	ldi	r19, 0x0A	; 10
    8bc2:	40 e4       	ldi	r20, 0x40	; 64
    8bc4:	5e e3       	ldi	r21, 0x3E	; 62
    8bc6:	c5 01       	movw	r24, r10
    8bc8:	b4 01       	movw	r22, r8
    8bca:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8bce:	a5 01       	movw	r20, r10
    8bd0:	94 01       	movw	r18, r8
    8bd2:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8bd6:	9b 01       	movw	r18, r22
    8bd8:	ac 01       	movw	r20, r24
    8bda:	c7 01       	movw	r24, r14
    8bdc:	b6 01       	movw	r22, r12
    8bde:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8be2:	6b 01       	movw	r12, r22
    8be4:	7c 01       	movw	r14, r24
    8be6:	23 e6       	ldi	r18, 0x63	; 99
    8be8:	39 eb       	ldi	r19, 0xB9	; 185
    8bea:	47 e0       	ldi	r20, 0x07	; 7
    8bec:	50 e4       	ldi	r21, 0x40	; 64
    8bee:	c5 01       	movw	r24, r10
    8bf0:	b4 01       	movw	r22, r8
    8bf2:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8bf6:	9b 01       	movw	r18, r22
    8bf8:	ac 01       	movw	r20, r24
    8bfa:	c7 01       	movw	r24, r14
    8bfc:	b6 01       	movw	r22, r12
    8bfe:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8c02:	25 e2       	ldi	r18, 0x25	; 37
    8c04:	30 ec       	ldi	r19, 0xC0	; 192
    8c06:	4f e6       	ldi	r20, 0x6F	; 111
    8c08:	51 e4       	ldi	r21, 0x41	; 65
    8c0a:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8c0e:	6b 01       	movw	r12, r22
    8c10:	7c 01       	movw	r14, r24
    8c12:	be 01       	movw	r22, r28
    8c14:	dd 0f       	add	r29, r29
    8c16:	88 0b       	sbc	r24, r24
    8c18:	99 0b       	sbc	r25, r25
    8c1a:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    8c1e:	9b 01       	movw	r18, r22
    8c20:	ac 01       	movw	r20, r24
    8c22:	c7 01       	movw	r24, r14
    8c24:	b6 01       	movw	r22, r12
    8c26:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8c2a:	36 c6       	rjmp	.+3180   	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    8c2c:	20 e0       	ldi	r18, 0x00	; 0
    8c2e:	30 e0       	ldi	r19, 0x00	; 0
    8c30:	40 e4       	ldi	r20, 0x40	; 64
    8c32:	51 e4       	ldi	r21, 0x41	; 65
    8c34:	c7 01       	movw	r24, r14
    8c36:	b6 01       	movw	r22, r12
    8c38:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    8c3c:	18 16       	cp	r1, r24
    8c3e:	dc f5       	brge	.+118    	; 0x8cb6 <corectTrv+0xde8>
    8c40:	20 e0       	ldi	r18, 0x00	; 0
    8c42:	30 e0       	ldi	r19, 0x00	; 0
    8c44:	40 e5       	ldi	r20, 0x50	; 80
    8c46:	51 e4       	ldi	r21, 0x41	; 65
    8c48:	c7 01       	movw	r24, r14
    8c4a:	b6 01       	movw	r22, r12
    8c4c:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    8c50:	18 16       	cp	r1, r24
    8c52:	8c f1       	brlt	.+98     	; 0x8cb6 <corectTrv+0xde8>
		{
			return(0.062 * ds * ds + 1.818 * ds + 15.22)* k;
    8c54:	26 eb       	ldi	r18, 0xB6	; 182
    8c56:	33 ef       	ldi	r19, 0xF3	; 243
    8c58:	4d e7       	ldi	r20, 0x7D	; 125
    8c5a:	5d e3       	ldi	r21, 0x3D	; 61
    8c5c:	c5 01       	movw	r24, r10
    8c5e:	b4 01       	movw	r22, r8
    8c60:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8c64:	a5 01       	movw	r20, r10
    8c66:	94 01       	movw	r18, r8
    8c68:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8c6c:	6b 01       	movw	r12, r22
    8c6e:	7c 01       	movw	r14, r24
    8c70:	29 e3       	ldi	r18, 0x39	; 57
    8c72:	34 eb       	ldi	r19, 0xB4	; 180
    8c74:	48 ee       	ldi	r20, 0xE8	; 232
    8c76:	5f e3       	ldi	r21, 0x3F	; 63
    8c78:	c5 01       	movw	r24, r10
    8c7a:	b4 01       	movw	r22, r8
    8c7c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8c80:	9b 01       	movw	r18, r22
    8c82:	ac 01       	movw	r20, r24
    8c84:	c7 01       	movw	r24, r14
    8c86:	b6 01       	movw	r22, r12
    8c88:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8c8c:	2f e1       	ldi	r18, 0x1F	; 31
    8c8e:	35 e8       	ldi	r19, 0x85	; 133
    8c90:	43 e7       	ldi	r20, 0x73	; 115
    8c92:	51 e4       	ldi	r21, 0x41	; 65
    8c94:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8c98:	6b 01       	movw	r12, r22
    8c9a:	7c 01       	movw	r14, r24
    8c9c:	be 01       	movw	r22, r28
    8c9e:	dd 0f       	add	r29, r29
    8ca0:	88 0b       	sbc	r24, r24
    8ca2:	99 0b       	sbc	r25, r25
    8ca4:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    8ca8:	9b 01       	movw	r18, r22
    8caa:	ac 01       	movw	r20, r24
    8cac:	c7 01       	movw	r24, r14
    8cae:	b6 01       	movw	r22, r12
    8cb0:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8cb4:	f1 c5       	rjmp	.+3042   	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    8cb6:	20 e0       	ldi	r18, 0x00	; 0
    8cb8:	30 e0       	ldi	r19, 0x00	; 0
    8cba:	40 e5       	ldi	r20, 0x50	; 80
    8cbc:	51 e4       	ldi	r21, 0x41	; 65
    8cbe:	c7 01       	movw	r24, r14
    8cc0:	b6 01       	movw	r22, r12
    8cc2:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    8cc6:	18 16       	cp	r1, r24
    8cc8:	dc f5       	brge	.+118    	; 0x8d40 <corectTrv+0xe72>
    8cca:	20 e0       	ldi	r18, 0x00	; 0
    8ccc:	30 e0       	ldi	r19, 0x00	; 0
    8cce:	40 e6       	ldi	r20, 0x60	; 96
    8cd0:	51 e4       	ldi	r21, 0x41	; 65
    8cd2:	c7 01       	movw	r24, r14
    8cd4:	b6 01       	movw	r22, r12
    8cd6:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    8cda:	18 16       	cp	r1, r24
    8cdc:	8c f1       	brlt	.+98     	; 0x8d40 <corectTrv+0xe72>
		{
			return( 0.097 * ds * ds + 1.941 * ds + 16.00)* k;
    8cde:	20 ef       	ldi	r18, 0xF0	; 240
    8ce0:	37 ea       	ldi	r19, 0xA7	; 167
    8ce2:	46 ec       	ldi	r20, 0xC6	; 198
    8ce4:	5d e3       	ldi	r21, 0x3D	; 61
    8ce6:	c5 01       	movw	r24, r10
    8ce8:	b4 01       	movw	r22, r8
    8cea:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8cee:	a5 01       	movw	r20, r10
    8cf0:	94 01       	movw	r18, r8
    8cf2:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8cf6:	6b 01       	movw	r12, r22
    8cf8:	7c 01       	movw	r14, r24
    8cfa:	20 eb       	ldi	r18, 0xB0	; 176
    8cfc:	32 e7       	ldi	r19, 0x72	; 114
    8cfe:	48 ef       	ldi	r20, 0xF8	; 248
    8d00:	5f e3       	ldi	r21, 0x3F	; 63
    8d02:	c5 01       	movw	r24, r10
    8d04:	b4 01       	movw	r22, r8
    8d06:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8d0a:	9b 01       	movw	r18, r22
    8d0c:	ac 01       	movw	r20, r24
    8d0e:	c7 01       	movw	r24, r14
    8d10:	b6 01       	movw	r22, r12
    8d12:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8d16:	20 e0       	ldi	r18, 0x00	; 0
    8d18:	30 e0       	ldi	r19, 0x00	; 0
    8d1a:	40 e8       	ldi	r20, 0x80	; 128
    8d1c:	51 e4       	ldi	r21, 0x41	; 65
    8d1e:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8d22:	6b 01       	movw	r12, r22
    8d24:	7c 01       	movw	r14, r24
    8d26:	be 01       	movw	r22, r28
    8d28:	dd 0f       	add	r29, r29
    8d2a:	88 0b       	sbc	r24, r24
    8d2c:	99 0b       	sbc	r25, r25
    8d2e:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    8d32:	9b 01       	movw	r18, r22
    8d34:	ac 01       	movw	r20, r24
    8d36:	c7 01       	movw	r24, r14
    8d38:	b6 01       	movw	r22, r12
    8d3a:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8d3e:	ac c5       	rjmp	.+2904   	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    8d40:	20 e0       	ldi	r18, 0x00	; 0
    8d42:	30 e0       	ldi	r19, 0x00	; 0
    8d44:	40 e6       	ldi	r20, 0x60	; 96
    8d46:	51 e4       	ldi	r21, 0x41	; 65
    8d48:	c7 01       	movw	r24, r14
    8d4a:	b6 01       	movw	r22, r12
    8d4c:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    8d50:	18 16       	cp	r1, r24
    8d52:	0c f0       	brlt	.+2      	; 0x8d56 <corectTrv+0xe88>
    8d54:	54 c0       	rjmp	.+168    	; 0x8dfe <corectTrv+0xf30>
    8d56:	20 e0       	ldi	r18, 0x00	; 0
    8d58:	30 e0       	ldi	r19, 0x00	; 0
    8d5a:	40 e7       	ldi	r20, 0x70	; 112
    8d5c:	51 e4       	ldi	r21, 0x41	; 65
    8d5e:	c7 01       	movw	r24, r14
    8d60:	b6 01       	movw	r22, r12
    8d62:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    8d66:	18 16       	cp	r1, r24
    8d68:	0c f4       	brge	.+2      	; 0x8d6c <corectTrv+0xe9e>
    8d6a:	49 c0       	rjmp	.+146    	; 0x8dfe <corectTrv+0xf30>
		{
			return( 0.01598 * ds * ds * ds + 0.35913 * ds * ds + 2.90559 * ds + 17.70294)* k;
    8d6c:	2d e7       	ldi	r18, 0x7D	; 125
    8d6e:	38 ee       	ldi	r19, 0xE8	; 232
    8d70:	42 e8       	ldi	r20, 0x82	; 130
    8d72:	5c e3       	ldi	r21, 0x3C	; 60
    8d74:	c5 01       	movw	r24, r10
    8d76:	b4 01       	movw	r22, r8
    8d78:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8d7c:	a5 01       	movw	r20, r10
    8d7e:	94 01       	movw	r18, r8
    8d80:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8d84:	a5 01       	movw	r20, r10
    8d86:	94 01       	movw	r18, r8
    8d88:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8d8c:	6b 01       	movw	r12, r22
    8d8e:	7c 01       	movw	r14, r24
    8d90:	23 ee       	ldi	r18, 0xE3	; 227
    8d92:	3f ed       	ldi	r19, 0xDF	; 223
    8d94:	47 eb       	ldi	r20, 0xB7	; 183
    8d96:	5e e3       	ldi	r21, 0x3E	; 62
    8d98:	c5 01       	movw	r24, r10
    8d9a:	b4 01       	movw	r22, r8
    8d9c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8da0:	a5 01       	movw	r20, r10
    8da2:	94 01       	movw	r18, r8
    8da4:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8da8:	9b 01       	movw	r18, r22
    8daa:	ac 01       	movw	r20, r24
    8dac:	c7 01       	movw	r24, r14
    8dae:	b6 01       	movw	r22, r12
    8db0:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8db4:	6b 01       	movw	r12, r22
    8db6:	7c 01       	movw	r14, r24
    8db8:	20 e3       	ldi	r18, 0x30	; 48
    8dba:	35 ef       	ldi	r19, 0xF5	; 245
    8dbc:	49 e3       	ldi	r20, 0x39	; 57
    8dbe:	50 e4       	ldi	r21, 0x40	; 64
    8dc0:	c5 01       	movw	r24, r10
    8dc2:	b4 01       	movw	r22, r8
    8dc4:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8dc8:	9b 01       	movw	r18, r22
    8dca:	ac 01       	movw	r20, r24
    8dcc:	c7 01       	movw	r24, r14
    8dce:	b6 01       	movw	r22, r12
    8dd0:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8dd4:	2f e9       	ldi	r18, 0x9F	; 159
    8dd6:	3f e9       	ldi	r19, 0x9F	; 159
    8dd8:	4d e8       	ldi	r20, 0x8D	; 141
    8dda:	51 e4       	ldi	r21, 0x41	; 65
    8ddc:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8de0:	6b 01       	movw	r12, r22
    8de2:	7c 01       	movw	r14, r24
    8de4:	be 01       	movw	r22, r28
    8de6:	dd 0f       	add	r29, r29
    8de8:	88 0b       	sbc	r24, r24
    8dea:	99 0b       	sbc	r25, r25
    8dec:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    8df0:	9b 01       	movw	r18, r22
    8df2:	ac 01       	movw	r20, r24
    8df4:	c7 01       	movw	r24, r14
    8df6:	b6 01       	movw	r22, r12
    8df8:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8dfc:	4d c5       	rjmp	.+2714   	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    8dfe:	20 e0       	ldi	r18, 0x00	; 0
    8e00:	30 e0       	ldi	r19, 0x00	; 0
    8e02:	40 e7       	ldi	r20, 0x70	; 112
    8e04:	51 e4       	ldi	r21, 0x41	; 65
    8e06:	c7 01       	movw	r24, r14
    8e08:	b6 01       	movw	r22, r12
    8e0a:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    8e0e:	18 16       	cp	r1, r24
    8e10:	0c f0       	brlt	.+2      	; 0x8e14 <corectTrv+0xf46>
    8e12:	54 c0       	rjmp	.+168    	; 0x8ebc <corectTrv+0xfee>
    8e14:	20 e0       	ldi	r18, 0x00	; 0
    8e16:	30 e0       	ldi	r19, 0x00	; 0
    8e18:	40 e8       	ldi	r20, 0x80	; 128
    8e1a:	51 e4       	ldi	r21, 0x41	; 65
    8e1c:	c7 01       	movw	r24, r14
    8e1e:	b6 01       	movw	r22, r12
    8e20:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    8e24:	18 16       	cp	r1, r24
    8e26:	0c f4       	brge	.+2      	; 0x8e2a <corectTrv+0xf5c>
    8e28:	49 c0       	rjmp	.+146    	; 0x8ebc <corectTrv+0xfee>
		{
			return( 0.02358 * ds * ds * ds + 0.48252 * ds * ds + 3.36313 * ds + 20.09441)* k;
    8e2a:	28 ed       	ldi	r18, 0xD8	; 216
    8e2c:	3a e2       	ldi	r19, 0x2A	; 42
    8e2e:	41 ec       	ldi	r20, 0xC1	; 193
    8e30:	5c e3       	ldi	r21, 0x3C	; 60
    8e32:	c5 01       	movw	r24, r10
    8e34:	b4 01       	movw	r22, r8
    8e36:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8e3a:	a5 01       	movw	r20, r10
    8e3c:	94 01       	movw	r18, r8
    8e3e:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8e42:	a5 01       	movw	r20, r10
    8e44:	94 01       	movw	r18, r8
    8e46:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8e4a:	6b 01       	movw	r12, r22
    8e4c:	7c 01       	movw	r14, r24
    8e4e:	2d ed       	ldi	r18, 0xDD	; 221
    8e50:	3c e0       	ldi	r19, 0x0C	; 12
    8e52:	47 ef       	ldi	r20, 0xF7	; 247
    8e54:	5e e3       	ldi	r21, 0x3E	; 62
    8e56:	c5 01       	movw	r24, r10
    8e58:	b4 01       	movw	r22, r8
    8e5a:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8e5e:	a5 01       	movw	r20, r10
    8e60:	94 01       	movw	r18, r8
    8e62:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8e66:	9b 01       	movw	r18, r22
    8e68:	ac 01       	movw	r20, r24
    8e6a:	c7 01       	movw	r24, r14
    8e6c:	b6 01       	movw	r22, r12
    8e6e:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8e72:	6b 01       	movw	r12, r22
    8e74:	7c 01       	movw	r14, r24
    8e76:	26 e8       	ldi	r18, 0x86	; 134
    8e78:	3d e3       	ldi	r19, 0x3D	; 61
    8e7a:	47 e5       	ldi	r20, 0x57	; 87
    8e7c:	50 e4       	ldi	r21, 0x40	; 64
    8e7e:	c5 01       	movw	r24, r10
    8e80:	b4 01       	movw	r22, r8
    8e82:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8e86:	9b 01       	movw	r18, r22
    8e88:	ac 01       	movw	r20, r24
    8e8a:	c7 01       	movw	r24, r14
    8e8c:	b6 01       	movw	r22, r12
    8e8e:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8e92:	2a e5       	ldi	r18, 0x5A	; 90
    8e94:	31 ec       	ldi	r19, 0xC1	; 193
    8e96:	40 ea       	ldi	r20, 0xA0	; 160
    8e98:	51 e4       	ldi	r21, 0x41	; 65
    8e9a:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8e9e:	6b 01       	movw	r12, r22
    8ea0:	7c 01       	movw	r14, r24
    8ea2:	be 01       	movw	r22, r28
    8ea4:	dd 0f       	add	r29, r29
    8ea6:	88 0b       	sbc	r24, r24
    8ea8:	99 0b       	sbc	r25, r25
    8eaa:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    8eae:	9b 01       	movw	r18, r22
    8eb0:	ac 01       	movw	r20, r24
    8eb2:	c7 01       	movw	r24, r14
    8eb4:	b6 01       	movw	r22, r12
    8eb6:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8eba:	ee c4       	rjmp	.+2524   	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 9)
    8ebc:	20 e0       	ldi	r18, 0x00	; 0
    8ebe:	30 e0       	ldi	r19, 0x00	; 0
    8ec0:	40 e8       	ldi	r20, 0x80	; 128
    8ec2:	51 e4       	ldi	r21, 0x41	; 65
    8ec4:	c7 01       	movw	r24, r14
    8ec6:	b6 01       	movw	r22, r12
    8ec8:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    8ecc:	18 16       	cp	r1, r24
    8ece:	0c f0       	brlt	.+2      	; 0x8ed2 <corectTrv+0x1004>
    8ed0:	d4 c4       	rjmp	.+2472   	; 0x987a <corectTrv+0x19ac>
		{
			return( 0.01076 * ds * ds * ds + 0.28823 * ds * ds + 2.82362 * ds + 25.08042)* k;
    8ed2:	26 eb       	ldi	r18, 0xB6	; 182
    8ed4:	3a e4       	ldi	r19, 0x4A	; 74
    8ed6:	40 e3       	ldi	r20, 0x30	; 48
    8ed8:	5c e3       	ldi	r21, 0x3C	; 60
    8eda:	c5 01       	movw	r24, r10
    8edc:	b4 01       	movw	r22, r8
    8ede:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8ee2:	a5 01       	movw	r20, r10
    8ee4:	94 01       	movw	r18, r8
    8ee6:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8eea:	a5 01       	movw	r20, r10
    8eec:	94 01       	movw	r18, r8
    8eee:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8ef2:	6b 01       	movw	r12, r22
    8ef4:	7c 01       	movw	r14, r24
    8ef6:	22 ee       	ldi	r18, 0xE2	; 226
    8ef8:	32 e9       	ldi	r19, 0x92	; 146
    8efa:	43 e9       	ldi	r20, 0x93	; 147
    8efc:	5e e3       	ldi	r21, 0x3E	; 62
    8efe:	c5 01       	movw	r24, r10
    8f00:	b4 01       	movw	r22, r8
    8f02:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8f06:	a5 01       	movw	r20, r10
    8f08:	94 01       	movw	r18, r8
    8f0a:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8f0e:	9b 01       	movw	r18, r22
    8f10:	ac 01       	movw	r20, r24
    8f12:	c7 01       	movw	r24, r14
    8f14:	b6 01       	movw	r22, r12
    8f16:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8f1a:	6b 01       	movw	r12, r22
    8f1c:	7c 01       	movw	r14, r24
    8f1e:	21 e3       	ldi	r18, 0x31	; 49
    8f20:	36 eb       	ldi	r19, 0xB6	; 182
    8f22:	44 e3       	ldi	r20, 0x34	; 52
    8f24:	50 e4       	ldi	r21, 0x40	; 64
    8f26:	c5 01       	movw	r24, r10
    8f28:	b4 01       	movw	r22, r8
    8f2a:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8f2e:	9b 01       	movw	r18, r22
    8f30:	ac 01       	movw	r20, r24
    8f32:	c7 01       	movw	r24, r14
    8f34:	b6 01       	movw	r22, r12
    8f36:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8f3a:	23 eb       	ldi	r18, 0xB3	; 179
    8f3c:	34 ea       	ldi	r19, 0xA4	; 164
    8f3e:	48 ec       	ldi	r20, 0xC8	; 200
    8f40:	51 e4       	ldi	r21, 0x41	; 65
    8f42:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8f46:	6b 01       	movw	r12, r22
    8f48:	7c 01       	movw	r14, r24
    8f4a:	be 01       	movw	r22, r28
    8f4c:	dd 0f       	add	r29, r29
    8f4e:	88 0b       	sbc	r24, r24
    8f50:	99 0b       	sbc	r25, r25
    8f52:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    8f56:	9b 01       	movw	r18, r22
    8f58:	ac 01       	movw	r20, r24
    8f5a:	c7 01       	movw	r24, r14
    8f5c:	b6 01       	movw	r22, r12
    8f5e:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8f62:	9a c4       	rjmp	.+2356   	; 0x9898 <corectTrv+0x19ca>
		}
	}

	else if (ds >= 0 && ds <= 10)
    8f64:	20 e0       	ldi	r18, 0x00	; 0
    8f66:	30 e0       	ldi	r19, 0x00	; 0
    8f68:	a9 01       	movw	r20, r18
    8f6a:	c5 01       	movw	r24, r10
    8f6c:	b4 01       	movw	r22, r8
    8f6e:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    8f72:	88 23       	and	r24, r24
    8f74:	0c f4       	brge	.+2      	; 0x8f78 <corectTrv+0x10aa>
    8f76:	e5 c2       	rjmp	.+1482   	; 0x9542 <corectTrv+0x1674>
    8f78:	20 e0       	ldi	r18, 0x00	; 0
    8f7a:	30 e0       	ldi	r19, 0x00	; 0
    8f7c:	40 e2       	ldi	r20, 0x20	; 32
    8f7e:	51 e4       	ldi	r21, 0x41	; 65
    8f80:	c5 01       	movw	r24, r10
    8f82:	b4 01       	movw	r22, r8
    8f84:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    8f88:	18 16       	cp	r1, r24
    8f8a:	0c f4       	brge	.+2      	; 0x8f8e <corectTrv+0x10c0>
    8f8c:	da c2       	rjmp	.+1460   	; 0x9542 <corectTrv+0x1674>
	{
		if (Superheat == SSet)
    8f8e:	20 e0       	ldi	r18, 0x00	; 0
    8f90:	30 e0       	ldi	r19, 0x00	; 0
    8f92:	40 ee       	ldi	r20, 0xE0	; 224
    8f94:	50 e4       	ldi	r21, 0x40	; 64
    8f96:	c7 01       	movw	r24, r14
    8f98:	b6 01       	movw	r22, r12
    8f9a:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    8f9e:	81 11       	cpse	r24, r1
    8fa0:	2b c0       	rjmp	.+86     	; 0x8ff8 <corectTrv+0x112a>
		{
			return( -2 * .00001 * ds * ds + 1.406 * ds)* k;
    8fa2:	2c ea       	ldi	r18, 0xAC	; 172
    8fa4:	35 ec       	ldi	r19, 0xC5	; 197
    8fa6:	47 ea       	ldi	r20, 0xA7	; 167
    8fa8:	57 eb       	ldi	r21, 0xB7	; 183
    8faa:	c5 01       	movw	r24, r10
    8fac:	b4 01       	movw	r22, r8
    8fae:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8fb2:	a5 01       	movw	r20, r10
    8fb4:	94 01       	movw	r18, r8
    8fb6:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8fba:	6b 01       	movw	r12, r22
    8fbc:	7c 01       	movw	r14, r24
    8fbe:	2f ec       	ldi	r18, 0xCF	; 207
    8fc0:	37 ef       	ldi	r19, 0xF7	; 247
    8fc2:	43 eb       	ldi	r20, 0xB3	; 179
    8fc4:	5f e3       	ldi	r21, 0x3F	; 63
    8fc6:	c5 01       	movw	r24, r10
    8fc8:	b4 01       	movw	r22, r8
    8fca:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8fce:	9b 01       	movw	r18, r22
    8fd0:	ac 01       	movw	r20, r24
    8fd2:	c7 01       	movw	r24, r14
    8fd4:	b6 01       	movw	r22, r12
    8fd6:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    8fda:	6b 01       	movw	r12, r22
    8fdc:	7c 01       	movw	r14, r24
    8fde:	be 01       	movw	r22, r28
    8fe0:	dd 0f       	add	r29, r29
    8fe2:	88 0b       	sbc	r24, r24
    8fe4:	99 0b       	sbc	r25, r25
    8fe6:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    8fea:	9b 01       	movw	r18, r22
    8fec:	ac 01       	movw	r20, r24
    8fee:	c7 01       	movw	r24, r14
    8ff0:	b6 01       	movw	r22, r12
    8ff2:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    8ff6:	50 c4       	rjmp	.+2208   	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    8ff8:	20 e0       	ldi	r18, 0x00	; 0
    8ffa:	30 e0       	ldi	r19, 0x00	; 0
    8ffc:	40 ee       	ldi	r20, 0xE0	; 224
    8ffe:	50 e4       	ldi	r21, 0x40	; 64
    9000:	c7 01       	movw	r24, r14
    9002:	b6 01       	movw	r22, r12
    9004:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    9008:	18 16       	cp	r1, r24
    900a:	dc f5       	brge	.+118    	; 0x9082 <corectTrv+0x11b4>
    900c:	20 e0       	ldi	r18, 0x00	; 0
    900e:	30 e0       	ldi	r19, 0x00	; 0
    9010:	40 e0       	ldi	r20, 0x00	; 0
    9012:	51 e4       	ldi	r21, 0x41	; 65
    9014:	c7 01       	movw	r24, r14
    9016:	b6 01       	movw	r22, r12
    9018:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    901c:	18 16       	cp	r1, r24
    901e:	8c f1       	brlt	.+98     	; 0x9082 <corectTrv+0x11b4>
		{
			return( 0.062 * ds * ds + 0.570 * ds + 3.280)* k;
    9020:	26 eb       	ldi	r18, 0xB6	; 182
    9022:	33 ef       	ldi	r19, 0xF3	; 243
    9024:	4d e7       	ldi	r20, 0x7D	; 125
    9026:	5d e3       	ldi	r21, 0x3D	; 61
    9028:	c5 01       	movw	r24, r10
    902a:	b4 01       	movw	r22, r8
    902c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9030:	a5 01       	movw	r20, r10
    9032:	94 01       	movw	r18, r8
    9034:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9038:	6b 01       	movw	r12, r22
    903a:	7c 01       	movw	r14, r24
    903c:	25 e8       	ldi	r18, 0x85	; 133
    903e:	3b ee       	ldi	r19, 0xEB	; 235
    9040:	41 e1       	ldi	r20, 0x11	; 17
    9042:	5f e3       	ldi	r21, 0x3F	; 63
    9044:	c5 01       	movw	r24, r10
    9046:	b4 01       	movw	r22, r8
    9048:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    904c:	9b 01       	movw	r18, r22
    904e:	ac 01       	movw	r20, r24
    9050:	c7 01       	movw	r24, r14
    9052:	b6 01       	movw	r22, r12
    9054:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    9058:	25 e8       	ldi	r18, 0x85	; 133
    905a:	3b ee       	ldi	r19, 0xEB	; 235
    905c:	41 e5       	ldi	r20, 0x51	; 81
    905e:	50 e4       	ldi	r21, 0x40	; 64
    9060:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    9064:	6b 01       	movw	r12, r22
    9066:	7c 01       	movw	r14, r24
    9068:	be 01       	movw	r22, r28
    906a:	dd 0f       	add	r29, r29
    906c:	88 0b       	sbc	r24, r24
    906e:	99 0b       	sbc	r25, r25
    9070:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    9074:	9b 01       	movw	r18, r22
    9076:	ac 01       	movw	r20, r24
    9078:	c7 01       	movw	r24, r14
    907a:	b6 01       	movw	r22, r12
    907c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9080:	0b c4       	rjmp	.+2070   	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    9082:	20 e0       	ldi	r18, 0x00	; 0
    9084:	30 e0       	ldi	r19, 0x00	; 0
    9086:	40 e0       	ldi	r20, 0x00	; 0
    9088:	51 e4       	ldi	r21, 0x41	; 65
    908a:	c7 01       	movw	r24, r14
    908c:	b6 01       	movw	r22, r12
    908e:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    9092:	18 16       	cp	r1, r24
    9094:	dc f5       	brge	.+118    	; 0x910c <corectTrv+0x123e>
    9096:	20 e0       	ldi	r18, 0x00	; 0
    9098:	30 e0       	ldi	r19, 0x00	; 0
    909a:	40 e1       	ldi	r20, 0x10	; 16
    909c:	51 e4       	ldi	r21, 0x41	; 65
    909e:	c7 01       	movw	r24, r14
    90a0:	b6 01       	movw	r22, r12
    90a2:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    90a6:	18 16       	cp	r1, r24
    90a8:	8c f1       	brlt	.+98     	; 0x910c <corectTrv+0x123e>
		{
			return( 0.099 * ds * ds - 0.019 * ds + 6.338)* k;
    90aa:	23 e8       	ldi	r18, 0x83	; 131
    90ac:	30 ec       	ldi	r19, 0xC0	; 192
    90ae:	4a ec       	ldi	r20, 0xCA	; 202
    90b0:	5d e3       	ldi	r21, 0x3D	; 61
    90b2:	c5 01       	movw	r24, r10
    90b4:	b4 01       	movw	r22, r8
    90b6:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    90ba:	a5 01       	movw	r20, r10
    90bc:	94 01       	movw	r18, r8
    90be:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    90c2:	6b 01       	movw	r12, r22
    90c4:	7c 01       	movw	r14, r24
    90c6:	23 ee       	ldi	r18, 0xE3	; 227
    90c8:	35 ea       	ldi	r19, 0xA5	; 165
    90ca:	4b e9       	ldi	r20, 0x9B	; 155
    90cc:	5c e3       	ldi	r21, 0x3C	; 60
    90ce:	c5 01       	movw	r24, r10
    90d0:	b4 01       	movw	r22, r8
    90d2:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    90d6:	9b 01       	movw	r18, r22
    90d8:	ac 01       	movw	r20, r24
    90da:	c7 01       	movw	r24, r14
    90dc:	b6 01       	movw	r22, r12
    90de:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    90e2:	25 ee       	ldi	r18, 0xE5	; 229
    90e4:	30 ed       	ldi	r19, 0xD0	; 208
    90e6:	4a ec       	ldi	r20, 0xCA	; 202
    90e8:	50 e4       	ldi	r21, 0x40	; 64
    90ea:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    90ee:	6b 01       	movw	r12, r22
    90f0:	7c 01       	movw	r14, r24
    90f2:	be 01       	movw	r22, r28
    90f4:	dd 0f       	add	r29, r29
    90f6:	88 0b       	sbc	r24, r24
    90f8:	99 0b       	sbc	r25, r25
    90fa:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    90fe:	9b 01       	movw	r18, r22
    9100:	ac 01       	movw	r20, r24
    9102:	c7 01       	movw	r24, r14
    9104:	b6 01       	movw	r22, r12
    9106:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    910a:	c6 c3       	rjmp	.+1932   	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    910c:	20 e0       	ldi	r18, 0x00	; 0
    910e:	30 e0       	ldi	r19, 0x00	; 0
    9110:	40 e1       	ldi	r20, 0x10	; 16
    9112:	51 e4       	ldi	r21, 0x41	; 65
    9114:	c7 01       	movw	r24, r14
    9116:	b6 01       	movw	r22, r12
    9118:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    911c:	18 16       	cp	r1, r24
    911e:	dc f5       	brge	.+118    	; 0x9196 <corectTrv+0x12c8>
    9120:	20 e0       	ldi	r18, 0x00	; 0
    9122:	30 e0       	ldi	r19, 0x00	; 0
    9124:	40 e2       	ldi	r20, 0x20	; 32
    9126:	51 e4       	ldi	r21, 0x41	; 65
    9128:	c7 01       	movw	r24, r14
    912a:	b6 01       	movw	r22, r12
    912c:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    9130:	18 16       	cp	r1, r24
    9132:	8c f1       	brlt	.+98     	; 0x9196 <corectTrv+0x12c8>
		{
			return( 0.121 * ds * ds - 0.409 * ds + 9.164)* k;
    9134:	29 ed       	ldi	r18, 0xD9	; 217
    9136:	3e ec       	ldi	r19, 0xCE	; 206
    9138:	47 ef       	ldi	r20, 0xF7	; 247
    913a:	5d e3       	ldi	r21, 0x3D	; 61
    913c:	c5 01       	movw	r24, r10
    913e:	b4 01       	movw	r22, r8
    9140:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9144:	a5 01       	movw	r20, r10
    9146:	94 01       	movw	r18, r8
    9148:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    914c:	6b 01       	movw	r12, r22
    914e:	7c 01       	movw	r14, r24
    9150:	23 e7       	ldi	r18, 0x73	; 115
    9152:	38 e6       	ldi	r19, 0x68	; 104
    9154:	41 ed       	ldi	r20, 0xD1	; 209
    9156:	5e e3       	ldi	r21, 0x3E	; 62
    9158:	c5 01       	movw	r24, r10
    915a:	b4 01       	movw	r22, r8
    915c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9160:	9b 01       	movw	r18, r22
    9162:	ac 01       	movw	r20, r24
    9164:	c7 01       	movw	r24, r14
    9166:	b6 01       	movw	r22, r12
    9168:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    916c:	2e eb       	ldi	r18, 0xBE	; 190
    916e:	3f e9       	ldi	r19, 0x9F	; 159
    9170:	42 e1       	ldi	r20, 0x12	; 18
    9172:	51 e4       	ldi	r21, 0x41	; 65
    9174:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    9178:	6b 01       	movw	r12, r22
    917a:	7c 01       	movw	r14, r24
    917c:	be 01       	movw	r22, r28
    917e:	dd 0f       	add	r29, r29
    9180:	88 0b       	sbc	r24, r24
    9182:	99 0b       	sbc	r25, r25
    9184:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    9188:	9b 01       	movw	r18, r22
    918a:	ac 01       	movw	r20, r24
    918c:	c7 01       	movw	r24, r14
    918e:	b6 01       	movw	r22, r12
    9190:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9194:	81 c3       	rjmp	.+1794   	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    9196:	20 e0       	ldi	r18, 0x00	; 0
    9198:	30 e0       	ldi	r19, 0x00	; 0
    919a:	40 e2       	ldi	r20, 0x20	; 32
    919c:	51 e4       	ldi	r21, 0x41	; 65
    919e:	c7 01       	movw	r24, r14
    91a0:	b6 01       	movw	r22, r12
    91a2:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    91a6:	18 16       	cp	r1, r24
    91a8:	dc f5       	brge	.+118    	; 0x9220 <corectTrv+0x1352>
    91aa:	20 e0       	ldi	r18, 0x00	; 0
    91ac:	30 e0       	ldi	r19, 0x00	; 0
    91ae:	40 e3       	ldi	r20, 0x30	; 48
    91b0:	51 e4       	ldi	r21, 0x41	; 65
    91b2:	c7 01       	movw	r24, r14
    91b4:	b6 01       	movw	r22, r12
    91b6:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    91ba:	18 16       	cp	r1, r24
    91bc:	8c f1       	brlt	.+98     	; 0x9220 <corectTrv+0x1352>
		{
			return( 0.128 * ds * ds - 0.340 * ds + 11.4)* k;
    91be:	2f e6       	ldi	r18, 0x6F	; 111
    91c0:	32 e1       	ldi	r19, 0x12	; 18
    91c2:	43 e0       	ldi	r20, 0x03	; 3
    91c4:	5e e3       	ldi	r21, 0x3E	; 62
    91c6:	c5 01       	movw	r24, r10
    91c8:	b4 01       	movw	r22, r8
    91ca:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    91ce:	a5 01       	movw	r20, r10
    91d0:	94 01       	movw	r18, r8
    91d2:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    91d6:	6b 01       	movw	r12, r22
    91d8:	7c 01       	movw	r14, r24
    91da:	2b e7       	ldi	r18, 0x7B	; 123
    91dc:	34 e1       	ldi	r19, 0x14	; 20
    91de:	4e ea       	ldi	r20, 0xAE	; 174
    91e0:	5e e3       	ldi	r21, 0x3E	; 62
    91e2:	c5 01       	movw	r24, r10
    91e4:	b4 01       	movw	r22, r8
    91e6:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    91ea:	9b 01       	movw	r18, r22
    91ec:	ac 01       	movw	r20, r24
    91ee:	c7 01       	movw	r24, r14
    91f0:	b6 01       	movw	r22, r12
    91f2:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    91f6:	26 e6       	ldi	r18, 0x66	; 102
    91f8:	36 e6       	ldi	r19, 0x66	; 102
    91fa:	46 e3       	ldi	r20, 0x36	; 54
    91fc:	51 e4       	ldi	r21, 0x41	; 65
    91fe:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    9202:	6b 01       	movw	r12, r22
    9204:	7c 01       	movw	r14, r24
    9206:	be 01       	movw	r22, r28
    9208:	dd 0f       	add	r29, r29
    920a:	88 0b       	sbc	r24, r24
    920c:	99 0b       	sbc	r25, r25
    920e:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    9212:	9b 01       	movw	r18, r22
    9214:	ac 01       	movw	r20, r24
    9216:	c7 01       	movw	r24, r14
    9218:	b6 01       	movw	r22, r12
    921a:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    921e:	3c c3       	rjmp	.+1656   	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 4 && Superheat <= SSet + 5)
    9220:	20 e0       	ldi	r18, 0x00	; 0
    9222:	30 e0       	ldi	r19, 0x00	; 0
    9224:	40 e3       	ldi	r20, 0x30	; 48
    9226:	51 e4       	ldi	r21, 0x41	; 65
    9228:	c7 01       	movw	r24, r14
    922a:	b6 01       	movw	r22, r12
    922c:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    9230:	18 16       	cp	r1, r24
    9232:	dc f5       	brge	.+118    	; 0x92aa <corectTrv+0x13dc>
    9234:	20 e0       	ldi	r18, 0x00	; 0
    9236:	30 e0       	ldi	r19, 0x00	; 0
    9238:	40 e4       	ldi	r20, 0x40	; 64
    923a:	51 e4       	ldi	r21, 0x41	; 65
    923c:	c7 01       	movw	r24, r14
    923e:	b6 01       	movw	r22, r12
    9240:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    9244:	18 16       	cp	r1, r24
    9246:	8c f1       	brlt	.+98     	; 0x92aa <corectTrv+0x13dc>
		{
			return( 0.128 * ds * ds - 0.382 * ds + 15.51)* k;
    9248:	2f e6       	ldi	r18, 0x6F	; 111
    924a:	32 e1       	ldi	r19, 0x12	; 18
    924c:	43 e0       	ldi	r20, 0x03	; 3
    924e:	5e e3       	ldi	r21, 0x3E	; 62
    9250:	c5 01       	movw	r24, r10
    9252:	b4 01       	movw	r22, r8
    9254:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9258:	a5 01       	movw	r20, r10
    925a:	94 01       	movw	r18, r8
    925c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9260:	6b 01       	movw	r12, r22
    9262:	7c 01       	movw	r14, r24
    9264:	21 e8       	ldi	r18, 0x81	; 129
    9266:	35 e9       	ldi	r19, 0x95	; 149
    9268:	43 ec       	ldi	r20, 0xC3	; 195
    926a:	5e e3       	ldi	r21, 0x3E	; 62
    926c:	c5 01       	movw	r24, r10
    926e:	b4 01       	movw	r22, r8
    9270:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9274:	9b 01       	movw	r18, r22
    9276:	ac 01       	movw	r20, r24
    9278:	c7 01       	movw	r24, r14
    927a:	b6 01       	movw	r22, r12
    927c:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    9280:	26 ef       	ldi	r18, 0xF6	; 246
    9282:	38 e2       	ldi	r19, 0x28	; 40
    9284:	48 e7       	ldi	r20, 0x78	; 120
    9286:	51 e4       	ldi	r21, 0x41	; 65
    9288:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    928c:	6b 01       	movw	r12, r22
    928e:	7c 01       	movw	r14, r24
    9290:	be 01       	movw	r22, r28
    9292:	dd 0f       	add	r29, r29
    9294:	88 0b       	sbc	r24, r24
    9296:	99 0b       	sbc	r25, r25
    9298:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    929c:	9b 01       	movw	r18, r22
    929e:	ac 01       	movw	r20, r24
    92a0:	c7 01       	movw	r24, r14
    92a2:	b6 01       	movw	r22, r12
    92a4:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    92a8:	f7 c2       	rjmp	.+1518   	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 5 && Superheat <= SSet + 6)
    92aa:	20 e0       	ldi	r18, 0x00	; 0
    92ac:	30 e0       	ldi	r19, 0x00	; 0
    92ae:	40 e4       	ldi	r20, 0x40	; 64
    92b0:	51 e4       	ldi	r21, 0x41	; 65
    92b2:	c7 01       	movw	r24, r14
    92b4:	b6 01       	movw	r22, r12
    92b6:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    92ba:	18 16       	cp	r1, r24
    92bc:	dc f5       	brge	.+118    	; 0x9334 <corectTrv+0x1466>
    92be:	20 e0       	ldi	r18, 0x00	; 0
    92c0:	30 e0       	ldi	r19, 0x00	; 0
    92c2:	40 e5       	ldi	r20, 0x50	; 80
    92c4:	51 e4       	ldi	r21, 0x41	; 65
    92c6:	c7 01       	movw	r24, r14
    92c8:	b6 01       	movw	r22, r12
    92ca:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    92ce:	18 16       	cp	r1, r24
    92d0:	8c f1       	brlt	.+98     	; 0x9334 <corectTrv+0x1466>
		{
			return( 0.128 * ds * ds - 0.382 * ds + 15.51)* k;
    92d2:	2f e6       	ldi	r18, 0x6F	; 111
    92d4:	32 e1       	ldi	r19, 0x12	; 18
    92d6:	43 e0       	ldi	r20, 0x03	; 3
    92d8:	5e e3       	ldi	r21, 0x3E	; 62
    92da:	c5 01       	movw	r24, r10
    92dc:	b4 01       	movw	r22, r8
    92de:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    92e2:	a5 01       	movw	r20, r10
    92e4:	94 01       	movw	r18, r8
    92e6:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    92ea:	6b 01       	movw	r12, r22
    92ec:	7c 01       	movw	r14, r24
    92ee:	21 e8       	ldi	r18, 0x81	; 129
    92f0:	35 e9       	ldi	r19, 0x95	; 149
    92f2:	43 ec       	ldi	r20, 0xC3	; 195
    92f4:	5e e3       	ldi	r21, 0x3E	; 62
    92f6:	c5 01       	movw	r24, r10
    92f8:	b4 01       	movw	r22, r8
    92fa:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    92fe:	9b 01       	movw	r18, r22
    9300:	ac 01       	movw	r20, r24
    9302:	c7 01       	movw	r24, r14
    9304:	b6 01       	movw	r22, r12
    9306:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    930a:	26 ef       	ldi	r18, 0xF6	; 246
    930c:	38 e2       	ldi	r19, 0x28	; 40
    930e:	48 e7       	ldi	r20, 0x78	; 120
    9310:	51 e4       	ldi	r21, 0x41	; 65
    9312:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    9316:	6b 01       	movw	r12, r22
    9318:	7c 01       	movw	r14, r24
    931a:	be 01       	movw	r22, r28
    931c:	dd 0f       	add	r29, r29
    931e:	88 0b       	sbc	r24, r24
    9320:	99 0b       	sbc	r25, r25
    9322:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    9326:	9b 01       	movw	r18, r22
    9328:	ac 01       	movw	r20, r24
    932a:	c7 01       	movw	r24, r14
    932c:	b6 01       	movw	r22, r12
    932e:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9332:	b2 c2       	rjmp	.+1380   	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 6 && Superheat <= SSet + 7)
    9334:	20 e0       	ldi	r18, 0x00	; 0
    9336:	30 e0       	ldi	r19, 0x00	; 0
    9338:	40 e5       	ldi	r20, 0x50	; 80
    933a:	51 e4       	ldi	r21, 0x41	; 65
    933c:	c7 01       	movw	r24, r14
    933e:	b6 01       	movw	r22, r12
    9340:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    9344:	18 16       	cp	r1, r24
    9346:	dc f5       	brge	.+118    	; 0x93be <corectTrv+0x14f0>
    9348:	20 e0       	ldi	r18, 0x00	; 0
    934a:	30 e0       	ldi	r19, 0x00	; 0
    934c:	40 e6       	ldi	r20, 0x60	; 96
    934e:	51 e4       	ldi	r21, 0x41	; 65
    9350:	c7 01       	movw	r24, r14
    9352:	b6 01       	movw	r22, r12
    9354:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    9358:	18 16       	cp	r1, r24
    935a:	8c f1       	brlt	.+98     	; 0x93be <corectTrv+0x14f0>
		{
			return( 0.137 * ds * ds - 0.652 * ds + 16.63)* k;
    935c:	2a eb       	ldi	r18, 0xBA	; 186
    935e:	39 e4       	ldi	r19, 0x49	; 73
    9360:	4c e0       	ldi	r20, 0x0C	; 12
    9362:	5e e3       	ldi	r21, 0x3E	; 62
    9364:	c5 01       	movw	r24, r10
    9366:	b4 01       	movw	r22, r8
    9368:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    936c:	a5 01       	movw	r20, r10
    936e:	94 01       	movw	r18, r8
    9370:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9374:	6b 01       	movw	r12, r22
    9376:	7c 01       	movw	r14, r24
    9378:	29 e7       	ldi	r18, 0x79	; 121
    937a:	39 ee       	ldi	r19, 0xE9	; 233
    937c:	46 e2       	ldi	r20, 0x26	; 38
    937e:	5f e3       	ldi	r21, 0x3F	; 63
    9380:	c5 01       	movw	r24, r10
    9382:	b4 01       	movw	r22, r8
    9384:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9388:	9b 01       	movw	r18, r22
    938a:	ac 01       	movw	r20, r24
    938c:	c7 01       	movw	r24, r14
    938e:	b6 01       	movw	r22, r12
    9390:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    9394:	2d e3       	ldi	r18, 0x3D	; 61
    9396:	3a e0       	ldi	r19, 0x0A	; 10
    9398:	45 e8       	ldi	r20, 0x85	; 133
    939a:	51 e4       	ldi	r21, 0x41	; 65
    939c:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    93a0:	6b 01       	movw	r12, r22
    93a2:	7c 01       	movw	r14, r24
    93a4:	be 01       	movw	r22, r28
    93a6:	dd 0f       	add	r29, r29
    93a8:	88 0b       	sbc	r24, r24
    93aa:	99 0b       	sbc	r25, r25
    93ac:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    93b0:	9b 01       	movw	r18, r22
    93b2:	ac 01       	movw	r20, r24
    93b4:	c7 01       	movw	r24, r14
    93b6:	b6 01       	movw	r22, r12
    93b8:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    93bc:	6d c2       	rjmp	.+1242   	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 7 && Superheat <= SSet + 8)
    93be:	20 e0       	ldi	r18, 0x00	; 0
    93c0:	30 e0       	ldi	r19, 0x00	; 0
    93c2:	40 e6       	ldi	r20, 0x60	; 96
    93c4:	51 e4       	ldi	r21, 0x41	; 65
    93c6:	c7 01       	movw	r24, r14
    93c8:	b6 01       	movw	r22, r12
    93ca:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    93ce:	18 16       	cp	r1, r24
    93d0:	dc f5       	brge	.+118    	; 0x9448 <corectTrv+0x157a>
    93d2:	20 e0       	ldi	r18, 0x00	; 0
    93d4:	30 e0       	ldi	r19, 0x00	; 0
    93d6:	40 e7       	ldi	r20, 0x70	; 112
    93d8:	51 e4       	ldi	r21, 0x41	; 65
    93da:	c7 01       	movw	r24, r14
    93dc:	b6 01       	movw	r22, r12
    93de:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    93e2:	18 16       	cp	r1, r24
    93e4:	8c f1       	brlt	.+98     	; 0x9448 <corectTrv+0x157a>
		{
			return( 0.142 * ds * ds - 0.630 * ds + 17.7)* k;
    93e6:	23 e7       	ldi	r18, 0x73	; 115
    93e8:	38 e6       	ldi	r19, 0x68	; 104
    93ea:	41 e1       	ldi	r20, 0x11	; 17
    93ec:	5e e3       	ldi	r21, 0x3E	; 62
    93ee:	c5 01       	movw	r24, r10
    93f0:	b4 01       	movw	r22, r8
    93f2:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    93f6:	a5 01       	movw	r20, r10
    93f8:	94 01       	movw	r18, r8
    93fa:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    93fe:	6b 01       	movw	r12, r22
    9400:	7c 01       	movw	r14, r24
    9402:	2e ea       	ldi	r18, 0xAE	; 174
    9404:	37 e4       	ldi	r19, 0x47	; 71
    9406:	41 e2       	ldi	r20, 0x21	; 33
    9408:	5f e3       	ldi	r21, 0x3F	; 63
    940a:	c5 01       	movw	r24, r10
    940c:	b4 01       	movw	r22, r8
    940e:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9412:	9b 01       	movw	r18, r22
    9414:	ac 01       	movw	r20, r24
    9416:	c7 01       	movw	r24, r14
    9418:	b6 01       	movw	r22, r12
    941a:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <__subsf3>
    941e:	2a e9       	ldi	r18, 0x9A	; 154
    9420:	39 e9       	ldi	r19, 0x99	; 153
    9422:	4d e8       	ldi	r20, 0x8D	; 141
    9424:	51 e4       	ldi	r21, 0x41	; 65
    9426:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__addsf3>
    942a:	6b 01       	movw	r12, r22
    942c:	7c 01       	movw	r14, r24
    942e:	be 01       	movw	r22, r28
    9430:	dd 0f       	add	r29, r29
    9432:	88 0b       	sbc	r24, r24
    9434:	99 0b       	sbc	r25, r25
    9436:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    943a:	9b 01       	movw	r18, r22
    943c:	ac 01       	movw	r20, r24
    943e:	c7 01       	movw	r24, r14
    9440:	b6 01       	movw	r22, r12
    9442:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9446:	28 c2       	rjmp	.+1104   	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 8 && Superheat <= SSet + 9)
    9448:	20 e0       	ldi	r18, 0x00	; 0
    944a:	30 e0       	ldi	r19, 0x00	; 0
    944c:	40 e7       	ldi	r20, 0x70	; 112
    944e:	51 e4       	ldi	r21, 0x41	; 65
    9450:	c7 01       	movw	r24, r14
    9452:	b6 01       	movw	r22, r12
    9454:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    9458:	18 16       	cp	r1, r24
    945a:	cc f5       	brge	.+114    	; 0x94ce <corectTrv+0x1600>
    945c:	20 e0       	ldi	r18, 0x00	; 0
    945e:	30 e0       	ldi	r19, 0x00	; 0
    9460:	40 e8       	ldi	r20, 0x80	; 128
    9462:	51 e4       	ldi	r21, 0x41	; 65
    9464:	c7 01       	movw	r24, r14
    9466:	b6 01       	movw	r22, r12
    9468:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__cmpsf2>
    946c:	18 16       	cp	r1, r24
    946e:	7c f1       	brlt	.+94     	; 0x94ce <corectTrv+0x1600>
		{
			return( 0.126 * ds * ds - 0.683 * ds + 20.4)* k;
    9470:	25 e2       	ldi	r18, 0x25	; 37
    9472:	36 e0       	ldi	r19, 0x06	; 6
    9474:	41 e0       	ldi	r20, 0x01	; 1
    9476:	5e e3       	ldi	r21, 0x3E	; 62
    9478:	c5 01       	movw	r24, r10
    947a:	b4 01       	movw	r22, r8
    947c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9480:	a5 01       	movw	r20, r10
    9482:	94 01       	movw	r18, r8
    9484:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9488:	6b 01       	movw	r12, r22
    948a:	7c 01       	movw	r14, r24
    948c:	27 e1       	ldi	r18, 0x17	; 23
    948e:	39 ed       	ldi	r19, 0xD9	; 217
    9490:	4e e2       	ldi	r20, 0x2E	; 46
    9492:	5f e3       	ldi	r21, 0x3F	; 63
    9494:	c5 01       	movw	r24, r10
    9496:	b4 01       	movw	r22, r8
    9498:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    949c:	9b 01       	movw	r18, r22
    949e:	ac 01       	movw	r20, r24
    94a0:	c7 01       	movw	r24, r14
    94a2:	b6 01       	movw	r22, r12
    94a4:	fe d7       	rcall	.+4092   	; 0xa4a2 <__subsf3>
    94a6:	23 e3       	ldi	r18, 0x33	; 51
    94a8:	33 e3       	ldi	r19, 0x33	; 51
    94aa:	43 ea       	ldi	r20, 0xA3	; 163
    94ac:	51 e4       	ldi	r21, 0x41	; 65
    94ae:	fa d7       	rcall	.+4084   	; 0xa4a4 <__addsf3>
    94b0:	6b 01       	movw	r12, r22
    94b2:	7c 01       	movw	r14, r24
    94b4:	be 01       	movw	r22, r28
    94b6:	dd 0f       	add	r29, r29
    94b8:	88 0b       	sbc	r24, r24
    94ba:	99 0b       	sbc	r25, r25
    94bc:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    94c0:	9b 01       	movw	r18, r22
    94c2:	ac 01       	movw	r20, r24
    94c4:	c7 01       	movw	r24, r14
    94c6:	b6 01       	movw	r22, r12
    94c8:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    94cc:	e5 c1       	rjmp	.+970    	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 9)
    94ce:	20 e0       	ldi	r18, 0x00	; 0
    94d0:	30 e0       	ldi	r19, 0x00	; 0
    94d2:	40 e8       	ldi	r20, 0x80	; 128
    94d4:	51 e4       	ldi	r21, 0x41	; 65
    94d6:	c7 01       	movw	r24, r14
    94d8:	b6 01       	movw	r22, r12
    94da:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    94de:	18 16       	cp	r1, r24
    94e0:	0c f0       	brlt	.+2      	; 0x94e4 <corectTrv+0x1616>
    94e2:	cf c1       	rjmp	.+926    	; 0x9882 <corectTrv+0x19b4>
		{
			return( 0.027 * ds * ds - 0.277 * ds + 25.29)* k;
    94e4:	2b e1       	ldi	r18, 0x1B	; 27
    94e6:	3f e2       	ldi	r19, 0x2F	; 47
    94e8:	4d ed       	ldi	r20, 0xDD	; 221
    94ea:	5c e3       	ldi	r21, 0x3C	; 60
    94ec:	c5 01       	movw	r24, r10
    94ee:	b4 01       	movw	r22, r8
    94f0:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    94f4:	a5 01       	movw	r20, r10
    94f6:	94 01       	movw	r18, r8
    94f8:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    94fc:	6b 01       	movw	r12, r22
    94fe:	7c 01       	movw	r14, r24
    9500:	22 ef       	ldi	r18, 0xF2	; 242
    9502:	32 ed       	ldi	r19, 0xD2	; 210
    9504:	4d e8       	ldi	r20, 0x8D	; 141
    9506:	5e e3       	ldi	r21, 0x3E	; 62
    9508:	c5 01       	movw	r24, r10
    950a:	b4 01       	movw	r22, r8
    950c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9510:	9b 01       	movw	r18, r22
    9512:	ac 01       	movw	r20, r24
    9514:	c7 01       	movw	r24, r14
    9516:	b6 01       	movw	r22, r12
    9518:	c4 d7       	rcall	.+3976   	; 0xa4a2 <__subsf3>
    951a:	2c ee       	ldi	r18, 0xEC	; 236
    951c:	31 e5       	ldi	r19, 0x51	; 81
    951e:	4a ec       	ldi	r20, 0xCA	; 202
    9520:	51 e4       	ldi	r21, 0x41	; 65
    9522:	c0 d7       	rcall	.+3968   	; 0xa4a4 <__addsf3>
    9524:	6b 01       	movw	r12, r22
    9526:	7c 01       	movw	r14, r24
    9528:	be 01       	movw	r22, r28
    952a:	dd 0f       	add	r29, r29
    952c:	88 0b       	sbc	r24, r24
    952e:	99 0b       	sbc	r25, r25
    9530:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    9534:	9b 01       	movw	r18, r22
    9536:	ac 01       	movw	r20, r24
    9538:	c7 01       	movw	r24, r14
    953a:	b6 01       	movw	r22, r12
    953c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9540:	ab c1       	rjmp	.+854    	; 0x9898 <corectTrv+0x19ca>
		}
	}

	else if (ds > 10)
    9542:	20 e0       	ldi	r18, 0x00	; 0
    9544:	30 e0       	ldi	r19, 0x00	; 0
    9546:	40 e2       	ldi	r20, 0x20	; 32
    9548:	51 e4       	ldi	r21, 0x41	; 65
    954a:	c5 01       	movw	r24, r10
    954c:	b4 01       	movw	r22, r8
    954e:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    9552:	18 16       	cp	r1, r24
    9554:	0c f0       	brlt	.+2      	; 0x9558 <corectTrv+0x168a>
    9556:	99 c1       	rjmp	.+818    	; 0x988a <corectTrv+0x19bc>
    9558:	08 c0       	rjmp	.+16     	; 0x956a <corectTrv+0x169c>
	
	Superheat_old = Superheat;
	
	if (ds > 20)
	{
		ds = 20;
    955a:	0f 2e       	mov	r0, r31
    955c:	81 2c       	mov	r8, r1
    955e:	91 2c       	mov	r9, r1
    9560:	f0 ea       	ldi	r31, 0xA0	; 160
    9562:	af 2e       	mov	r10, r31
    9564:	f1 e4       	ldi	r31, 0x41	; 65
    9566:	bf 2e       	mov	r11, r31
    9568:	f0 2d       	mov	r31, r0
		}
	}

	else if (ds > 10)
	{
		if (Superheat == SSet)
    956a:	20 e0       	ldi	r18, 0x00	; 0
    956c:	30 e0       	ldi	r19, 0x00	; 0
    956e:	40 ee       	ldi	r20, 0xE0	; 224
    9570:	50 e4       	ldi	r21, 0x40	; 64
    9572:	c7 01       	movw	r24, r14
    9574:	b6 01       	movw	r22, r12
    9576:	fa d7       	rcall	.+4084   	; 0xa56c <__cmpsf2>
    9578:	81 11       	cpse	r24, r1
    957a:	2f c0       	rjmp	.+94     	; 0x95da <corectTrv+0x170c>
		{
			return( 0.137 * ds * ds - 3.245 * ds + 34.51)* k;
    957c:	2a eb       	ldi	r18, 0xBA	; 186
    957e:	39 e4       	ldi	r19, 0x49	; 73
    9580:	4c e0       	ldi	r20, 0x0C	; 12
    9582:	5e e3       	ldi	r21, 0x3E	; 62
    9584:	c5 01       	movw	r24, r10
    9586:	b4 01       	movw	r22, r8
    9588:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    958c:	a5 01       	movw	r20, r10
    958e:	94 01       	movw	r18, r8
    9590:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9594:	6b 01       	movw	r12, r22
    9596:	7c 01       	movw	r14, r24
    9598:	24 e1       	ldi	r18, 0x14	; 20
    959a:	3e ea       	ldi	r19, 0xAE	; 174
    959c:	4f e4       	ldi	r20, 0x4F	; 79
    959e:	50 e4       	ldi	r21, 0x40	; 64
    95a0:	c5 01       	movw	r24, r10
    95a2:	b4 01       	movw	r22, r8
    95a4:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    95a8:	9b 01       	movw	r18, r22
    95aa:	ac 01       	movw	r20, r24
    95ac:	c7 01       	movw	r24, r14
    95ae:	b6 01       	movw	r22, r12
    95b0:	78 d7       	rcall	.+3824   	; 0xa4a2 <__subsf3>
    95b2:	2d e3       	ldi	r18, 0x3D	; 61
    95b4:	3a e0       	ldi	r19, 0x0A	; 10
    95b6:	4a e0       	ldi	r20, 0x0A	; 10
    95b8:	52 e4       	ldi	r21, 0x42	; 66
    95ba:	74 d7       	rcall	.+3816   	; 0xa4a4 <__addsf3>
    95bc:	6b 01       	movw	r12, r22
    95be:	7c 01       	movw	r14, r24
    95c0:	be 01       	movw	r22, r28
    95c2:	dd 0f       	add	r29, r29
    95c4:	88 0b       	sbc	r24, r24
    95c6:	99 0b       	sbc	r25, r25
    95c8:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    95cc:	9b 01       	movw	r18, r22
    95ce:	ac 01       	movw	r20, r24
    95d0:	c7 01       	movw	r24, r14
    95d2:	b6 01       	movw	r22, r12
    95d4:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    95d8:	5f c1       	rjmp	.+702    	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet && Superheat <= SSet + 1)
    95da:	20 e0       	ldi	r18, 0x00	; 0
    95dc:	30 e0       	ldi	r19, 0x00	; 0
    95de:	40 ee       	ldi	r20, 0xE0	; 224
    95e0:	50 e4       	ldi	r21, 0x40	; 64
    95e2:	c7 01       	movw	r24, r14
    95e4:	b6 01       	movw	r22, r12
    95e6:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    95ea:	18 16       	cp	r1, r24
    95ec:	c4 f5       	brge	.+112    	; 0x965e <corectTrv+0x1790>
    95ee:	20 e0       	ldi	r18, 0x00	; 0
    95f0:	30 e0       	ldi	r19, 0x00	; 0
    95f2:	40 e0       	ldi	r20, 0x00	; 0
    95f4:	51 e4       	ldi	r21, 0x41	; 65
    95f6:	c7 01       	movw	r24, r14
    95f8:	b6 01       	movw	r22, r12
    95fa:	b8 d7       	rcall	.+3952   	; 0xa56c <__cmpsf2>
    95fc:	18 16       	cp	r1, r24
    95fe:	7c f1       	brlt	.+94     	; 0x965e <corectTrv+0x1790>
		{
			return( 0.137 * ds * ds - 3.245 * ds + 34.51)* k;
    9600:	2a eb       	ldi	r18, 0xBA	; 186
    9602:	39 e4       	ldi	r19, 0x49	; 73
    9604:	4c e0       	ldi	r20, 0x0C	; 12
    9606:	5e e3       	ldi	r21, 0x3E	; 62
    9608:	c5 01       	movw	r24, r10
    960a:	b4 01       	movw	r22, r8
    960c:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9610:	a5 01       	movw	r20, r10
    9612:	94 01       	movw	r18, r8
    9614:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9618:	6b 01       	movw	r12, r22
    961a:	7c 01       	movw	r14, r24
    961c:	24 e1       	ldi	r18, 0x14	; 20
    961e:	3e ea       	ldi	r19, 0xAE	; 174
    9620:	4f e4       	ldi	r20, 0x4F	; 79
    9622:	50 e4       	ldi	r21, 0x40	; 64
    9624:	c5 01       	movw	r24, r10
    9626:	b4 01       	movw	r22, r8
    9628:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    962c:	9b 01       	movw	r18, r22
    962e:	ac 01       	movw	r20, r24
    9630:	c7 01       	movw	r24, r14
    9632:	b6 01       	movw	r22, r12
    9634:	36 d7       	rcall	.+3692   	; 0xa4a2 <__subsf3>
    9636:	2d e3       	ldi	r18, 0x3D	; 61
    9638:	3a e0       	ldi	r19, 0x0A	; 10
    963a:	4a e0       	ldi	r20, 0x0A	; 10
    963c:	52 e4       	ldi	r21, 0x42	; 66
    963e:	32 d7       	rcall	.+3684   	; 0xa4a4 <__addsf3>
    9640:	6b 01       	movw	r12, r22
    9642:	7c 01       	movw	r14, r24
    9644:	be 01       	movw	r22, r28
    9646:	dd 0f       	add	r29, r29
    9648:	88 0b       	sbc	r24, r24
    964a:	99 0b       	sbc	r25, r25
    964c:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <__floatsisf>
    9650:	9b 01       	movw	r18, r22
    9652:	ac 01       	movw	r20, r24
    9654:	c7 01       	movw	r24, r14
    9656:	b6 01       	movw	r22, r12
    9658:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    965c:	1d c1       	rjmp	.+570    	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 1 && Superheat <= SSet + 2)
    965e:	20 e0       	ldi	r18, 0x00	; 0
    9660:	30 e0       	ldi	r19, 0x00	; 0
    9662:	40 e0       	ldi	r20, 0x00	; 0
    9664:	51 e4       	ldi	r21, 0x41	; 65
    9666:	c7 01       	movw	r24, r14
    9668:	b6 01       	movw	r22, r12
    966a:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    966e:	18 16       	cp	r1, r24
    9670:	bc f5       	brge	.+110    	; 0x96e0 <corectTrv+0x1812>
    9672:	20 e0       	ldi	r18, 0x00	; 0
    9674:	30 e0       	ldi	r19, 0x00	; 0
    9676:	40 e1       	ldi	r20, 0x10	; 16
    9678:	51 e4       	ldi	r21, 0x41	; 65
    967a:	c7 01       	movw	r24, r14
    967c:	b6 01       	movw	r22, r12
    967e:	76 d7       	rcall	.+3820   	; 0xa56c <__cmpsf2>
    9680:	18 16       	cp	r1, r24
    9682:	74 f1       	brlt	.+92     	; 0x96e0 <corectTrv+0x1812>
		{
			return( 0.158 * ds * ds - 4.086 * ds + 42.41)* k;
    9684:	21 ec       	ldi	r18, 0xC1	; 193
    9686:	3a ec       	ldi	r19, 0xCA	; 202
    9688:	41 e2       	ldi	r20, 0x21	; 33
    968a:	5e e3       	ldi	r21, 0x3E	; 62
    968c:	c5 01       	movw	r24, r10
    968e:	b4 01       	movw	r22, r8
    9690:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9694:	a5 01       	movw	r20, r10
    9696:	94 01       	movw	r18, r8
    9698:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    969c:	6b 01       	movw	r12, r22
    969e:	7c 01       	movw	r14, r24
    96a0:	23 e8       	ldi	r18, 0x83	; 131
    96a2:	30 ec       	ldi	r19, 0xC0	; 192
    96a4:	42 e8       	ldi	r20, 0x82	; 130
    96a6:	50 e4       	ldi	r21, 0x40	; 64
    96a8:	c5 01       	movw	r24, r10
    96aa:	b4 01       	movw	r22, r8
    96ac:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    96b0:	9b 01       	movw	r18, r22
    96b2:	ac 01       	movw	r20, r24
    96b4:	c7 01       	movw	r24, r14
    96b6:	b6 01       	movw	r22, r12
    96b8:	f4 d6       	rcall	.+3560   	; 0xa4a2 <__subsf3>
    96ba:	27 ed       	ldi	r18, 0xD7	; 215
    96bc:	33 ea       	ldi	r19, 0xA3	; 163
    96be:	49 e2       	ldi	r20, 0x29	; 41
    96c0:	52 e4       	ldi	r21, 0x42	; 66
    96c2:	f0 d6       	rcall	.+3552   	; 0xa4a4 <__addsf3>
    96c4:	6b 01       	movw	r12, r22
    96c6:	7c 01       	movw	r14, r24
    96c8:	be 01       	movw	r22, r28
    96ca:	dd 0f       	add	r29, r29
    96cc:	88 0b       	sbc	r24, r24
    96ce:	99 0b       	sbc	r25, r25
    96d0:	ec d7       	rcall	.+4056   	; 0xa6aa <__floatsisf>
    96d2:	9b 01       	movw	r18, r22
    96d4:	ac 01       	movw	r20, r24
    96d6:	c7 01       	movw	r24, r14
    96d8:	b6 01       	movw	r22, r12
    96da:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    96de:	dc c0       	rjmp	.+440    	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 2 && Superheat <= SSet + 3)
    96e0:	20 e0       	ldi	r18, 0x00	; 0
    96e2:	30 e0       	ldi	r19, 0x00	; 0
    96e4:	40 e1       	ldi	r20, 0x10	; 16
    96e6:	51 e4       	ldi	r21, 0x41	; 65
    96e8:	c7 01       	movw	r24, r14
    96ea:	b6 01       	movw	r22, r12
    96ec:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    96f0:	18 16       	cp	r1, r24
    96f2:	0c f0       	brlt	.+2      	; 0x96f6 <corectTrv+0x1828>
    96f4:	4f c0       	rjmp	.+158    	; 0x9794 <corectTrv+0x18c6>
    96f6:	20 e0       	ldi	r18, 0x00	; 0
    96f8:	30 e0       	ldi	r19, 0x00	; 0
    96fa:	40 e2       	ldi	r20, 0x20	; 32
    96fc:	51 e4       	ldi	r21, 0x41	; 65
    96fe:	c7 01       	movw	r24, r14
    9700:	b6 01       	movw	r22, r12
    9702:	34 d7       	rcall	.+3688   	; 0xa56c <__cmpsf2>
    9704:	18 16       	cp	r1, r24
    9706:	0c f4       	brge	.+2      	; 0x970a <corectTrv+0x183c>
    9708:	45 c0       	rjmp	.+138    	; 0x9794 <corectTrv+0x18c6>
		{
			return( 0.027 * ds * ds * ds - 1.086 * ds * ds + 14.32 * ds - 44.48)* k;
    970a:	2b e1       	ldi	r18, 0x1B	; 27
    970c:	3f e2       	ldi	r19, 0x2F	; 47
    970e:	4d ed       	ldi	r20, 0xDD	; 221
    9710:	5c e3       	ldi	r21, 0x3C	; 60
    9712:	c5 01       	movw	r24, r10
    9714:	b4 01       	movw	r22, r8
    9716:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    971a:	a5 01       	movw	r20, r10
    971c:	94 01       	movw	r18, r8
    971e:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9722:	a5 01       	movw	r20, r10
    9724:	94 01       	movw	r18, r8
    9726:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    972a:	6b 01       	movw	r12, r22
    972c:	7c 01       	movw	r14, r24
    972e:	2c e0       	ldi	r18, 0x0C	; 12
    9730:	32 e0       	ldi	r19, 0x02	; 2
    9732:	4b e8       	ldi	r20, 0x8B	; 139
    9734:	5f e3       	ldi	r21, 0x3F	; 63
    9736:	c5 01       	movw	r24, r10
    9738:	b4 01       	movw	r22, r8
    973a:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    973e:	a5 01       	movw	r20, r10
    9740:	94 01       	movw	r18, r8
    9742:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9746:	9b 01       	movw	r18, r22
    9748:	ac 01       	movw	r20, r24
    974a:	c7 01       	movw	r24, r14
    974c:	b6 01       	movw	r22, r12
    974e:	a9 d6       	rcall	.+3410   	; 0xa4a2 <__subsf3>
    9750:	6b 01       	movw	r12, r22
    9752:	7c 01       	movw	r14, r24
    9754:	28 eb       	ldi	r18, 0xB8	; 184
    9756:	3e e1       	ldi	r19, 0x1E	; 30
    9758:	45 e6       	ldi	r20, 0x65	; 101
    975a:	51 e4       	ldi	r21, 0x41	; 65
    975c:	c5 01       	movw	r24, r10
    975e:	b4 01       	movw	r22, r8
    9760:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9764:	9b 01       	movw	r18, r22
    9766:	ac 01       	movw	r20, r24
    9768:	c7 01       	movw	r24, r14
    976a:	b6 01       	movw	r22, r12
    976c:	9b d6       	rcall	.+3382   	; 0xa4a4 <__addsf3>
    976e:	25 e8       	ldi	r18, 0x85	; 133
    9770:	3b ee       	ldi	r19, 0xEB	; 235
    9772:	41 e3       	ldi	r20, 0x31	; 49
    9774:	52 e4       	ldi	r21, 0x42	; 66
    9776:	95 d6       	rcall	.+3370   	; 0xa4a2 <__subsf3>
    9778:	6b 01       	movw	r12, r22
    977a:	7c 01       	movw	r14, r24
    977c:	be 01       	movw	r22, r28
    977e:	dd 0f       	add	r29, r29
    9780:	88 0b       	sbc	r24, r24
    9782:	99 0b       	sbc	r25, r25
    9784:	92 d7       	rcall	.+3876   	; 0xa6aa <__floatsisf>
    9786:	9b 01       	movw	r18, r22
    9788:	ac 01       	movw	r20, r24
    978a:	c7 01       	movw	r24, r14
    978c:	b6 01       	movw	r22, r12
    978e:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9792:	82 c0       	rjmp	.+260    	; 0x9898 <corectTrv+0x19ca>
		}

		if (Superheat > SSet + 3 && Superheat <= SSet + 4)
    9794:	20 e0       	ldi	r18, 0x00	; 0
    9796:	30 e0       	ldi	r19, 0x00	; 0
    9798:	40 e2       	ldi	r20, 0x20	; 32
    979a:	51 e4       	ldi	r21, 0x41	; 65
    979c:	c7 01       	movw	r24, r14
    979e:	b6 01       	movw	r22, r12
    97a0:	0e 94 05 54 	call	0xa80a	; 0xa80a <__gesf2>
    97a4:	18 16       	cp	r1, r24
    97a6:	0c f0       	brlt	.+2      	; 0x97aa <corectTrv+0x18dc>
    97a8:	4f c0       	rjmp	.+158    	; 0x9848 <corectTrv+0x197a>
    97aa:	20 e0       	ldi	r18, 0x00	; 0
    97ac:	30 e0       	ldi	r19, 0x00	; 0
    97ae:	40 e3       	ldi	r20, 0x30	; 48
    97b0:	51 e4       	ldi	r21, 0x41	; 65
    97b2:	c7 01       	movw	r24, r14
    97b4:	b6 01       	movw	r22, r12
    97b6:	da d6       	rcall	.+3508   	; 0xa56c <__cmpsf2>
    97b8:	18 16       	cp	r1, r24
    97ba:	0c f4       	brge	.+2      	; 0x97be <corectTrv+0x18f0>
    97bc:	45 c0       	rjmp	.+138    	; 0x9848 <corectTrv+0x197a>
		{
			return( 0.026 * ds * ds * ds - 1.084 * ds * ds + 14.27 * ds - 40.99)* k;
    97be:	24 ef       	ldi	r18, 0xF4	; 244
    97c0:	3d ef       	ldi	r19, 0xFD	; 253
    97c2:	44 ed       	ldi	r20, 0xD4	; 212
    97c4:	5c e3       	ldi	r21, 0x3C	; 60
    97c6:	c5 01       	movw	r24, r10
    97c8:	b4 01       	movw	r22, r8
    97ca:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    97ce:	a5 01       	movw	r20, r10
    97d0:	94 01       	movw	r18, r8
    97d2:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    97d6:	a5 01       	movw	r20, r10
    97d8:	94 01       	movw	r18, r8
    97da:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    97de:	6b 01       	movw	r12, r22
    97e0:	7c 01       	movw	r14, r24
    97e2:	23 e8       	ldi	r18, 0x83	; 131
    97e4:	30 ec       	ldi	r19, 0xC0	; 192
    97e6:	4a e8       	ldi	r20, 0x8A	; 138
    97e8:	5f e3       	ldi	r21, 0x3F	; 63
    97ea:	c5 01       	movw	r24, r10
    97ec:	b4 01       	movw	r22, r8
    97ee:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    97f2:	a5 01       	movw	r20, r10
    97f4:	94 01       	movw	r18, r8
    97f6:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    97fa:	9b 01       	movw	r18, r22
    97fc:	ac 01       	movw	r20, r24
    97fe:	c7 01       	movw	r24, r14
    9800:	b6 01       	movw	r22, r12
    9802:	4f d6       	rcall	.+3230   	; 0xa4a2 <__subsf3>
    9804:	6b 01       	movw	r12, r22
    9806:	7c 01       	movw	r14, r24
    9808:	2c ee       	ldi	r18, 0xEC	; 236
    980a:	31 e5       	ldi	r19, 0x51	; 81
    980c:	44 e6       	ldi	r20, 0x64	; 100
    980e:	51 e4       	ldi	r21, 0x41	; 65
    9810:	c5 01       	movw	r24, r10
    9812:	b4 01       	movw	r22, r8
    9814:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
    9818:	9b 01       	movw	r18, r22
    981a:	ac 01       	movw	r20, r24
    981c:	c7 01       	movw	r24, r14
    981e:	b6 01       	movw	r22, r12
    9820:	41 d6       	rcall	.+3202   	; 0xa4a4 <__addsf3>
    9822:	23 ec       	ldi	r18, 0xC3	; 195
    9824:	35 ef       	ldi	r19, 0xF5	; 245
    9826:	43 e2       	ldi	r20, 0x23	; 35
    9828:	52 e4       	ldi	r21, 0x42	; 66
    982a:	3b d6       	rcall	.+3190   	; 0xa4a2 <__subsf3>
    982c:	6b 01       	movw	r12, r22
    982e:	7c 01       	movw	r14, r24
    9830:	be 01       	movw	r22, r28
    9832:	dd 0f       	add	r29, r29
    9834:	88 0b       	sbc	r24, r24
    9836:	99 0b       	sbc	r25, r25
    9838:	38 d7       	rcall	.+3696   	; 0xa6aa <__floatsisf>
    983a:	9b 01       	movw	r18, r22
    983c:	ac 01       	movw	r20, r24
    983e:	c7 01       	movw	r24, r14
    9840:	b6 01       	movw	r22, r12
    9842:	0e 94 4e 54 	call	0xa89c	; 0xa89c <__mulsf3>
		}

		if (Superheat > SSet + 4)
    9846:	28 c0       	rjmp	.+80     	; 0x9898 <corectTrv+0x19ca>
    9848:	20 e0       	ldi	r18, 0x00	; 0
    984a:	30 e0       	ldi	r19, 0x00	; 0
    984c:	40 e3       	ldi	r20, 0x30	; 48
    984e:	51 e4       	ldi	r21, 0x41	; 65
    9850:	c7 01       	movw	r24, r14
    9852:	b6 01       	movw	r22, r12
    9854:	da d7       	rcall	.+4020   	; 0xa80a <__gesf2>
    9856:	18 16       	cp	r1, r24
		{
			return 25* k;
    9858:	e4 f4       	brge	.+56     	; 0x9892 <corectTrv+0x19c4>
    985a:	89 e1       	ldi	r24, 0x19	; 25
    985c:	8c 9f       	mul	r24, r28
    985e:	b0 01       	movw	r22, r0
    9860:	8d 9f       	mul	r24, r29
    9862:	70 0d       	add	r23, r0
    9864:	11 24       	eor	r1, r1
    9866:	07 2e       	mov	r0, r23
    9868:	00 0c       	add	r0, r0
    986a:	88 0b       	sbc	r24, r24
    986c:	99 0b       	sbc	r25, r25
    986e:	1d d7       	rcall	.+3642   	; 0xa6aa <__floatsisf>
    9870:	13 c0       	rjmp	.+38     	; 0x9898 <corectTrv+0x19ca>
		}
	}

	
	return 0;
    9872:	60 e0       	ldi	r22, 0x00	; 0
    9874:	70 e0       	ldi	r23, 0x00	; 0
    9876:	cb 01       	movw	r24, r22
    9878:	0f c0       	rjmp	.+30     	; 0x9898 <corectTrv+0x19ca>
    987a:	60 e0       	ldi	r22, 0x00	; 0
    987c:	70 e0       	ldi	r23, 0x00	; 0
    987e:	cb 01       	movw	r24, r22
    9880:	0b c0       	rjmp	.+22     	; 0x9898 <corectTrv+0x19ca>
    9882:	60 e0       	ldi	r22, 0x00	; 0
    9884:	70 e0       	ldi	r23, 0x00	; 0
    9886:	cb 01       	movw	r24, r22
    9888:	07 c0       	rjmp	.+14     	; 0x9898 <corectTrv+0x19ca>
    988a:	60 e0       	ldi	r22, 0x00	; 0
    988c:	70 e0       	ldi	r23, 0x00	; 0
    988e:	cb 01       	movw	r24, r22
    9890:	03 c0       	rjmp	.+6      	; 0x9898 <corectTrv+0x19ca>
    9892:	60 e0       	ldi	r22, 0x00	; 0
    9894:	70 e0       	ldi	r23, 0x00	; 0
    9896:	cb 01       	movw	r24, r22

}
    9898:	df 91       	pop	r29
    989a:	cf 91       	pop	r28
    989c:	ff 90       	pop	r15
    989e:	ef 90       	pop	r14
    98a0:	df 90       	pop	r13
    98a2:	cf 90       	pop	r12
    98a4:	bf 90       	pop	r11
    98a6:	af 90       	pop	r10
    98a8:	9f 90       	pop	r9
    98aa:	8f 90       	pop	r8
    98ac:	7f 90       	pop	r7
    98ae:	6f 90       	pop	r6
    98b0:	5f 90       	pop	r5
    98b2:	4f 90       	pop	r4
    98b4:	08 95       	ret

000098b6 <ReadSensors>:
float ConvertToLowPress(uint16_t ADC_value){
	return (ADC_value - Low_Limit_LP) * LP_max/ (Hi_Limit_LP - Low_Limit_LP) ;
}

void ReadSensors(xCompressor *comp)  
{ 
    98b6:	ef 92       	push	r14
    98b8:	ff 92       	push	r15
    98ba:	0f 93       	push	r16
    98bc:	1f 93       	push	r17
    98be:	cf 93       	push	r28
    98c0:	df 93       	push	r29
    98c2:	7c 01       	movw	r14, r24
 uint16_t temp = 0;
 const uint8_t samples = 10;        // determines the number of samples taken
 unsigned int sum;               // holds the summated samples
 uint8_t i;
 //static TickType_t countTrvTime=0;
 setAnalogMode(MODE_10_BIT);
    98c4:	80 e0       	ldi	r24, 0x00	; 0
    98c6:	0e 94 98 07 	call	0xf30	; 0xf30 <setAnalogMode>
    98ca:	ca e0       	ldi	r28, 0x0A	; 10
 i = samples;                     // clean up for next channel
 sum = 0;
    98cc:	00 e0       	ldi	r16, 0x00	; 0
    98ce:	10 e0       	ldi	r17, 0x00	; 0
 
 do
 {
	 startAnalogConversion(1, 0);
    98d0:	60 e0       	ldi	r22, 0x00	; 0
    98d2:	81 e0       	ldi	r24, 0x01	; 1
    98d4:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
	 while( analogIsConverting() )_delay_us(25);//portYIELD();
    98d8:	01 c0       	rjmp	.+2      	; 0x98dc <ReadSensors+0x26>
    98da:	00 00       	nop
    98dc:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    98e0:	81 11       	cpse	r24, r1
    98e2:	fb cf       	rjmp	.-10     	; 0x98da <ReadSensors+0x24>
	 sum += 	analogConversionResult();
    98e4:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    98e8:	08 0f       	add	r16, r24
    98ea:	19 1f       	adc	r17, r25
    98ec:	c1 50       	subi	r28, 0x01	; 1
	 //temp =analogConversionResult();
 } while (--i);
    98ee:	81 f7       	brne	.-32     	; 0x98d0 <ReadSensors+0x1a>
 temp = (unsigned int) (sum / samples);
 comp->Bac_Temp = ConvertToTemp(temp);
    98f0:	98 01       	movw	r18, r16
    98f2:	ad ec       	ldi	r26, 0xCD	; 205
    98f4:	bc ec       	ldi	r27, 0xCC	; 204
    98f6:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    98fa:	96 95       	lsr	r25
    98fc:	87 95       	ror	r24
    98fe:	96 95       	lsr	r25
    9900:	87 95       	ror	r24
    9902:	96 95       	lsr	r25
    9904:	87 95       	ror	r24
    9906:	0e 94 34 3e 	call	0x7c68	; 0x7c68 <ConvertToTemp>
    990a:	f7 01       	movw	r30, r14
    990c:	66 8b       	std	Z+22, r22	; 0x16
    990e:	77 8b       	std	Z+23, r23	; 0x17
    9910:	80 8f       	std	Z+24, r24	; 0x18
    9912:	91 8f       	std	Z+25, r25	; 0x19
 //read DHW
 PORTL &= ~ (1 << PL2);//A0
    9914:	eb e0       	ldi	r30, 0x0B	; 11
    9916:	f1 e0       	ldi	r31, 0x01	; 1
    9918:	80 81       	ld	r24, Z
    991a:	8b 7f       	andi	r24, 0xFB	; 251
    991c:	80 83       	st	Z, r24
 PORTL &= ~ (1 << PL1);//A1
    991e:	80 81       	ld	r24, Z
    9920:	8d 7f       	andi	r24, 0xFD	; 253
    9922:	80 83       	st	Z, r24
 PORTL |=   (1 << PL0);//A2
    9924:	80 81       	ld	r24, Z
    9926:	81 60       	ori	r24, 0x01	; 1
    9928:	80 83       	st	Z, r24
    992a:	ca e0       	ldi	r28, 0x0A	; 10
 i = samples;
 sum = 0;
    992c:	00 e0       	ldi	r16, 0x00	; 0
    992e:	10 e0       	ldi	r17, 0x00	; 0
 do
 {
	 startAnalogConversion(0, 0);
    9930:	60 e0       	ldi	r22, 0x00	; 0
    9932:	80 e0       	ldi	r24, 0x00	; 0
    9934:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
	 while( analogIsConverting())_delay_us(25);// portYIELD();
    9938:	01 c0       	rjmp	.+2      	; 0x993c <ReadSensors+0x86>
    993a:	00 00       	nop
    993c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9940:	81 11       	cpse	r24, r1
    9942:	fb cf       	rjmp	.-10     	; 0x993a <ReadSensors+0x84>
	 sum += 	analogConversionResult();
    9944:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9948:	08 0f       	add	r16, r24
    994a:	19 1f       	adc	r17, r25
    994c:	c1 50       	subi	r28, 0x01	; 1
 } while (--i);
    994e:	81 f7       	brne	.-32     	; 0x9930 <ReadSensors+0x7a>
 //temp = analogConversionResult();
 temp = (unsigned int) (sum / samples);
 comp->Dhw_Temp = ConvertToTemp(temp);
    9950:	98 01       	movw	r18, r16
    9952:	ad ec       	ldi	r26, 0xCD	; 205
    9954:	bc ec       	ldi	r27, 0xCC	; 204
    9956:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    995a:	96 95       	lsr	r25
    995c:	87 95       	ror	r24
    995e:	96 95       	lsr	r25
    9960:	87 95       	ror	r24
    9962:	96 95       	lsr	r25
    9964:	87 95       	ror	r24
    9966:	0e 94 34 3e 	call	0x7c68	; 0x7c68 <ConvertToTemp>
    996a:	f7 01       	movw	r30, r14
    996c:	62 8b       	std	Z+18, r22	; 0x12
    996e:	73 8b       	std	Z+19, r23	; 0x13
    9970:	84 8b       	std	Z+20, r24	; 0x14
    9972:	95 8b       	std	Z+21, r25	; 0x15
 
 if(comp->Index==1){
    9974:	e2 59       	subi	r30, 0x92	; 146
    9976:	ff 4f       	sbci	r31, 0xFF	; 255
    9978:	80 81       	ld	r24, Z
    997a:	91 81       	ldd	r25, Z+1	; 0x01
    997c:	01 97       	sbiw	r24, 0x01	; 1
    997e:	09 f0       	breq	.+2      	; 0x9982 <ReadSensors+0xcc>
    9980:	9c c1       	rjmp	.+824    	; 0x9cba <ReadSensors+0x404>
	 
	 //read High_Pressure_1
	 PORTL |=    (1 << PL2);//a0
    9982:	eb e0       	ldi	r30, 0x0B	; 11
    9984:	f1 e0       	ldi	r31, 0x01	; 1
    9986:	80 81       	ld	r24, Z
    9988:	84 60       	ori	r24, 0x04	; 4
    998a:	80 83       	st	Z, r24
	 PORTL |=    (1 << PL1);//a1
    998c:	80 81       	ld	r24, Z
    998e:	82 60       	ori	r24, 0x02	; 2
    9990:	80 83       	st	Z, r24
	 PORTL &= ~  (1 << PL0);//a2
    9992:	80 81       	ld	r24, Z
    9994:	8e 7f       	andi	r24, 0xFE	; 254
    9996:	80 83       	st	Z, r24
    9998:	ca e0       	ldi	r28, 0x0A	; 10
	 i = samples;
	 sum = 0;
    999a:	00 e0       	ldi	r16, 0x00	; 0
    999c:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {		     startAnalogConversion(0, 0);
    999e:	60 e0       	ldi	r22, 0x00	; 0
    99a0:	80 e0       	ldi	r24, 0x00	; 0
    99a2:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() ) _delay_us(25);//portYIELD();
    99a6:	01 c0       	rjmp	.+2      	; 0x99aa <ReadSensors+0xf4>
    99a8:	00 00       	nop
    99aa:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    99ae:	81 11       	cpse	r24, r1
    99b0:	fb cf       	rjmp	.-10     	; 0x99a8 <ReadSensors+0xf2>
		 sum += analogConversionResult();
    99b2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    99b6:	08 0f       	add	r16, r24
    99b8:	19 1f       	adc	r17, r25
    99ba:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    99bc:	81 f7       	brne	.-32     	; 0x999e <ReadSensors+0xe8>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->High_Press = ConvertToHighPress(temp);
    99be:	98 01       	movw	r18, r16
    99c0:	ad ec       	ldi	r26, 0xCD	; 205
    99c2:	bc ec       	ldi	r27, 0xCC	; 204
    99c4:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    99c8:	96 95       	lsr	r25
    99ca:	87 95       	ror	r24
    99cc:	96 95       	lsr	r25
    99ce:	87 95       	ror	r24
    99d0:	96 95       	lsr	r25
    99d2:	87 95       	ror	r24
    99d4:	bc 01       	movw	r22, r24
    99d6:	80 e0       	ldi	r24, 0x00	; 0
    99d8:	90 e0       	ldi	r25, 0x00	; 0
    99da:	65 d6       	rcall	.+3274   	; 0xa6a6 <__floatunsisf>
    99dc:	20 e0       	ldi	r18, 0x00	; 0
    99de:	30 e0       	ldi	r19, 0x00	; 0
    99e0:	4c ec       	ldi	r20, 0xCC	; 204
    99e2:	52 e4       	ldi	r21, 0x42	; 66
    99e4:	5e d5       	rcall	.+2748   	; 0xa4a2 <__subsf3>
    99e6:	20 e0       	ldi	r18, 0x00	; 0
    99e8:	30 e0       	ldi	r19, 0x00	; 0
    99ea:	48 e0       	ldi	r20, 0x08	; 8
    99ec:	52 e4       	ldi	r21, 0x42	; 66
    99ee:	56 d7       	rcall	.+3756   	; 0xa89c <__mulsf3>
    99f0:	20 e0       	ldi	r18, 0x00	; 0
    99f2:	30 e0       	ldi	r19, 0x00	; 0
    99f4:	4d e4       	ldi	r20, 0x4D	; 77
    99f6:	54 e4       	ldi	r21, 0x44	; 68
    99f8:	bd d5       	rcall	.+2938   	; 0xa574 <__divsf3>
    99fa:	f7 01       	movw	r30, r14
    99fc:	62 8f       	std	Z+26, r22	; 0x1a
    99fe:	73 8f       	std	Z+27, r23	; 0x1b
    9a00:	84 8f       	std	Z+28, r24	; 0x1c
    9a02:	95 8f       	std	Z+29, r25	; 0x1d
	 //read Low_Pressure_1
	 PORTL &= ~   (1 << PL2);
    9a04:	eb e0       	ldi	r30, 0x0B	; 11
    9a06:	f1 e0       	ldi	r31, 0x01	; 1
    9a08:	80 81       	ld	r24, Z
    9a0a:	8b 7f       	andi	r24, 0xFB	; 251
    9a0c:	80 83       	st	Z, r24
	 PORTL &= ~   (1 << PL1);
    9a0e:	80 81       	ld	r24, Z
    9a10:	8d 7f       	andi	r24, 0xFD	; 253
    9a12:	80 83       	st	Z, r24
	 PORTL &= ~   (1 << PL0);
    9a14:	80 81       	ld	r24, Z
    9a16:	8e 7f       	andi	r24, 0xFE	; 254
    9a18:	80 83       	st	Z, r24
    9a1a:	ca e0       	ldi	r28, 0x0A	; 10
	 i = samples;
	 sum = 0;
    9a1c:	00 e0       	ldi	r16, 0x00	; 0
    9a1e:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(0, 0);
    9a20:	60 e0       	ldi	r22, 0x00	; 0
    9a22:	80 e0       	ldi	r24, 0x00	; 0
    9a24:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9a28:	01 c0       	rjmp	.+2      	; 0x9a2c <ReadSensors+0x176>
    9a2a:	00 00       	nop
    9a2c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9a30:	81 11       	cpse	r24, r1
    9a32:	fb cf       	rjmp	.-10     	; 0x9a2a <ReadSensors+0x174>
		 sum += analogConversionResult();
    9a34:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9a38:	08 0f       	add	r16, r24
    9a3a:	19 1f       	adc	r17, r25
    9a3c:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9a3e:	81 f7       	brne	.-32     	; 0x9a20 <ReadSensors+0x16a>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Low_Press = ConvertToLowPress( temp );
    9a40:	98 01       	movw	r18, r16
    9a42:	ad ec       	ldi	r26, 0xCD	; 205
    9a44:	bc ec       	ldi	r27, 0xCC	; 204
    9a46:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    9a4a:	96 95       	lsr	r25
    9a4c:	87 95       	ror	r24
    9a4e:	96 95       	lsr	r25
    9a50:	87 95       	ror	r24
    9a52:	96 95       	lsr	r25
    9a54:	87 95       	ror	r24
    9a56:	bc 01       	movw	r22, r24
    9a58:	80 e0       	ldi	r24, 0x00	; 0
    9a5a:	90 e0       	ldi	r25, 0x00	; 0
    9a5c:	24 d6       	rcall	.+3144   	; 0xa6a6 <__floatunsisf>
    9a5e:	20 e0       	ldi	r18, 0x00	; 0
    9a60:	30 e0       	ldi	r19, 0x00	; 0
    9a62:	4c e5       	ldi	r20, 0x5C	; 92
    9a64:	52 e4       	ldi	r21, 0x42	; 66
    9a66:	1d d5       	rcall	.+2618   	; 0xa4a2 <__subsf3>
    9a68:	20 e0       	ldi	r18, 0x00	; 0
    9a6a:	30 e0       	ldi	r19, 0x00	; 0
    9a6c:	40 e9       	ldi	r20, 0x90	; 144
    9a6e:	51 e4       	ldi	r21, 0x41	; 65
    9a70:	15 d7       	rcall	.+3626   	; 0xa89c <__mulsf3>
    9a72:	20 e0       	ldi	r18, 0x00	; 0
    9a74:	30 ec       	ldi	r19, 0xC0	; 192
    9a76:	48 e5       	ldi	r20, 0x58	; 88
    9a78:	54 e4       	ldi	r21, 0x44	; 68
    9a7a:	7c d5       	rcall	.+2808   	; 0xa574 <__divsf3>
    9a7c:	f7 01       	movw	r30, r14
    9a7e:	66 8f       	std	Z+30, r22	; 0x1e
    9a80:	77 8f       	std	Z+31, r23	; 0x1f
    9a82:	80 a3       	std	Z+32, r24	; 0x20
    9a84:	91 a3       	std	Z+33, r25	; 0x21
    9a86:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9a88:	00 e0       	ldi	r16, 0x00	; 0
    9a8a:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(9, 0);
    9a8c:	60 e0       	ldi	r22, 0x00	; 0
    9a8e:	89 e0       	ldi	r24, 0x09	; 9
    9a90:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9a94:	01 c0       	rjmp	.+2      	; 0x9a98 <ReadSensors+0x1e2>
    9a96:	00 00       	nop
    9a98:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9a9c:	81 11       	cpse	r24, r1
    9a9e:	fb cf       	rjmp	.-10     	; 0x9a96 <ReadSensors+0x1e0>
		 sum += analogConversionResult();
    9aa0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9aa4:	08 0f       	add	r16, r24
    9aa6:	19 1f       	adc	r17, r25
    9aa8:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9aaa:	81 f7       	brne	.-32     	; 0x9a8c <ReadSensors+0x1d6>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Heat_Out = ConvertToTemp( temp );
    9aac:	98 01       	movw	r18, r16
    9aae:	ad ec       	ldi	r26, 0xCD	; 205
    9ab0:	bc ec       	ldi	r27, 0xCC	; 204
    9ab2:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    9ab6:	96 95       	lsr	r25
    9ab8:	87 95       	ror	r24
    9aba:	96 95       	lsr	r25
    9abc:	87 95       	ror	r24
    9abe:	96 95       	lsr	r25
    9ac0:	87 95       	ror	r24
    9ac2:	0e 94 34 3e 	call	0x7c68	; 0x7c68 <ConvertToTemp>
    9ac6:	f7 01       	movw	r30, r14
    9ac8:	62 a7       	std	Z+42, r22	; 0x2a
    9aca:	73 a7       	std	Z+43, r23	; 0x2b
    9acc:	84 a7       	std	Z+44, r24	; 0x2c
    9ace:	95 a7       	std	Z+45, r25	; 0x2d
    9ad0:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9ad2:	00 e0       	ldi	r16, 0x00	; 0
    9ad4:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(10, 0);
    9ad6:	60 e0       	ldi	r22, 0x00	; 0
    9ad8:	8a e0       	ldi	r24, 0x0A	; 10
    9ada:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9ade:	01 c0       	rjmp	.+2      	; 0x9ae2 <ReadSensors+0x22c>
    9ae0:	00 00       	nop
    9ae2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9ae6:	81 11       	cpse	r24, r1
    9ae8:	fb cf       	rjmp	.-10     	; 0x9ae0 <ReadSensors+0x22a>
		 sum += analogConversionResult();
    9aea:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9aee:	08 0f       	add	r16, r24
    9af0:	19 1f       	adc	r17, r25
    9af2:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9af4:	81 f7       	brne	.-32     	; 0x9ad6 <ReadSensors+0x220>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Heat_In = ConvertToTemp( temp );
    9af6:	98 01       	movw	r18, r16
    9af8:	ad ec       	ldi	r26, 0xCD	; 205
    9afa:	bc ec       	ldi	r27, 0xCC	; 204
    9afc:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    9b00:	96 95       	lsr	r25
    9b02:	87 95       	ror	r24
    9b04:	96 95       	lsr	r25
    9b06:	87 95       	ror	r24
    9b08:	96 95       	lsr	r25
    9b0a:	87 95       	ror	r24
    9b0c:	0e 94 34 3e 	call	0x7c68	; 0x7c68 <ConvertToTemp>
    9b10:	f7 01       	movw	r30, r14
    9b12:	66 a7       	std	Z+46, r22	; 0x2e
    9b14:	77 a7       	std	Z+47, r23	; 0x2f
    9b16:	80 ab       	std	Z+48, r24	; 0x30
    9b18:	91 ab       	std	Z+49, r25	; 0x31
    9b1a:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9b1c:	00 e0       	ldi	r16, 0x00	; 0
    9b1e:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(11, 0);
    9b20:	60 e0       	ldi	r22, 0x00	; 0
    9b22:	8b e0       	ldi	r24, 0x0B	; 11
    9b24:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9b28:	01 c0       	rjmp	.+2      	; 0x9b2c <ReadSensors+0x276>
    9b2a:	00 00       	nop
    9b2c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9b30:	81 11       	cpse	r24, r1
    9b32:	fb cf       	rjmp	.-10     	; 0x9b2a <ReadSensors+0x274>
		 sum += analogConversionResult();
    9b34:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9b38:	08 0f       	add	r16, r24
    9b3a:	19 1f       	adc	r17, r25
    9b3c:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9b3e:	81 f7       	brne	.-32     	; 0x9b20 <ReadSensors+0x26a>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Src_In = ConvertToTemp( temp );
    9b40:	98 01       	movw	r18, r16
    9b42:	ad ec       	ldi	r26, 0xCD	; 205
    9b44:	bc ec       	ldi	r27, 0xCC	; 204
    9b46:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    9b4a:	96 95       	lsr	r25
    9b4c:	87 95       	ror	r24
    9b4e:	96 95       	lsr	r25
    9b50:	87 95       	ror	r24
    9b52:	96 95       	lsr	r25
    9b54:	87 95       	ror	r24
    9b56:	0e 94 34 3e 	call	0x7c68	; 0x7c68 <ConvertToTemp>
    9b5a:	f7 01       	movw	r30, r14
    9b5c:	62 ab       	std	Z+50, r22	; 0x32
    9b5e:	73 ab       	std	Z+51, r23	; 0x33
    9b60:	84 ab       	std	Z+52, r24	; 0x34
    9b62:	95 ab       	std	Z+53, r25	; 0x35
    9b64:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9b66:	00 e0       	ldi	r16, 0x00	; 0
    9b68:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(12, 0);
    9b6a:	60 e0       	ldi	r22, 0x00	; 0
    9b6c:	8c e0       	ldi	r24, 0x0C	; 12
    9b6e:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);
    9b72:	01 c0       	rjmp	.+2      	; 0x9b76 <ReadSensors+0x2c0>
    9b74:	00 00       	nop
    9b76:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9b7a:	81 11       	cpse	r24, r1
    9b7c:	fb cf       	rjmp	.-10     	; 0x9b74 <ReadSensors+0x2be>
		 sum += analogConversionResult();
    9b7e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9b82:	08 0f       	add	r16, r24
    9b84:	19 1f       	adc	r17, r25
    9b86:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9b88:	81 f7       	brne	.-32     	; 0x9b6a <ReadSensors+0x2b4>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Src_Out = ConvertToTemp( temp );
    9b8a:	98 01       	movw	r18, r16
    9b8c:	ad ec       	ldi	r26, 0xCD	; 205
    9b8e:	bc ec       	ldi	r27, 0xCC	; 204
    9b90:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    9b94:	96 95       	lsr	r25
    9b96:	87 95       	ror	r24
    9b98:	96 95       	lsr	r25
    9b9a:	87 95       	ror	r24
    9b9c:	96 95       	lsr	r25
    9b9e:	87 95       	ror	r24
    9ba0:	0e 94 34 3e 	call	0x7c68	; 0x7c68 <ConvertToTemp>
    9ba4:	f7 01       	movw	r30, r14
    9ba6:	66 ab       	std	Z+54, r22	; 0x36
    9ba8:	77 ab       	std	Z+55, r23	; 0x37
    9baa:	80 af       	std	Z+56, r24	; 0x38
    9bac:	91 af       	std	Z+57, r25	; 0x39
    9bae:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9bb0:	00 e0       	ldi	r16, 0x00	; 0
    9bb2:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(13, 0);
    9bb4:	60 e0       	ldi	r22, 0x00	; 0
    9bb6:	8d e0       	ldi	r24, 0x0D	; 13
    9bb8:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9bbc:	01 c0       	rjmp	.+2      	; 0x9bc0 <ReadSensors+0x30a>
    9bbe:	00 00       	nop
    9bc0:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9bc4:	81 11       	cpse	r24, r1
    9bc6:	fb cf       	rjmp	.-10     	; 0x9bbe <ReadSensors+0x308>
		 sum += analogConversionResult();
    9bc8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9bcc:	08 0f       	add	r16, r24
    9bce:	19 1f       	adc	r17, r25
    9bd0:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9bd2:	81 f7       	brne	.-32     	; 0x9bb4 <ReadSensors+0x2fe>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Ex_Comp = ConvertToTemp( temp );
    9bd4:	98 01       	movw	r18, r16
    9bd6:	ad ec       	ldi	r26, 0xCD	; 205
    9bd8:	bc ec       	ldi	r27, 0xCC	; 204
    9bda:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    9bde:	96 95       	lsr	r25
    9be0:	87 95       	ror	r24
    9be2:	96 95       	lsr	r25
    9be4:	87 95       	ror	r24
    9be6:	96 95       	lsr	r25
    9be8:	87 95       	ror	r24
    9bea:	0e 94 34 3e 	call	0x7c68	; 0x7c68 <ConvertToTemp>
    9bee:	f7 01       	movw	r30, r14
    9bf0:	62 af       	std	Z+58, r22	; 0x3a
    9bf2:	73 af       	std	Z+59, r23	; 0x3b
    9bf4:	84 af       	std	Z+60, r24	; 0x3c
    9bf6:	95 af       	std	Z+61, r25	; 0x3d
    9bf8:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9bfa:	00 e0       	ldi	r16, 0x00	; 0
    9bfc:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(14, 0);
    9bfe:	60 e0       	ldi	r22, 0x00	; 0
    9c00:	8e e0       	ldi	r24, 0x0E	; 14
    9c02:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9c06:	01 c0       	rjmp	.+2      	; 0x9c0a <ReadSensors+0x354>
    9c08:	00 00       	nop
    9c0a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9c0e:	81 11       	cpse	r24, r1
    9c10:	fb cf       	rjmp	.-10     	; 0x9c08 <ReadSensors+0x352>
		 sum += analogConversionResult();
    9c12:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9c16:	08 0f       	add	r16, r24
    9c18:	19 1f       	adc	r17, r25
    9c1a:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9c1c:	81 f7       	brne	.-32     	; 0x9bfe <ReadSensors+0x348>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Suc_Comp = ConvertToTemp( temp );
    9c1e:	98 01       	movw	r18, r16
    9c20:	ad ec       	ldi	r26, 0xCD	; 205
    9c22:	bc ec       	ldi	r27, 0xCC	; 204
    9c24:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    9c28:	96 95       	lsr	r25
    9c2a:	87 95       	ror	r24
    9c2c:	96 95       	lsr	r25
    9c2e:	87 95       	ror	r24
    9c30:	96 95       	lsr	r25
    9c32:	87 95       	ror	r24
    9c34:	0e 94 34 3e 	call	0x7c68	; 0x7c68 <ConvertToTemp>
    9c38:	f7 01       	movw	r30, r14
    9c3a:	fe 96       	adiw	r30, 0x3e	; 62
    9c3c:	60 83       	st	Z, r22
    9c3e:	71 83       	std	Z+1, r23	; 0x01
    9c40:	82 83       	std	Z+2, r24	; 0x02
    9c42:	93 83       	std	Z+3, r25	; 0x03
    9c44:	ca e0       	ldi	r28, 0x0A	; 10
	 //---------------------------------------------------------------
	 i = samples;
	 sum = 0;
    9c46:	00 e0       	ldi	r16, 0x00	; 0
    9c48:	10 e0       	ldi	r17, 0x00	; 0
	 do
	 {
		 startAnalogConversion(15, 0);
    9c4a:	60 e0       	ldi	r22, 0x00	; 0
    9c4c:	8f e0       	ldi	r24, 0x0F	; 15
    9c4e:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
		 while( analogIsConverting() )_delay_us(25);//portYIELD();
    9c52:	01 c0       	rjmp	.+2      	; 0x9c56 <ReadSensors+0x3a0>
    9c54:	00 00       	nop
    9c56:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9c5a:	81 11       	cpse	r24, r1
    9c5c:	fb cf       	rjmp	.-10     	; 0x9c54 <ReadSensors+0x39e>
		 sum += analogConversionResult();
    9c5e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9c62:	08 0f       	add	r16, r24
    9c64:	19 1f       	adc	r17, r25
    9c66:	c1 50       	subi	r28, 0x01	; 1
	 } while (--i);
    9c68:	81 f7       	brne	.-32     	; 0x9c4a <ReadSensors+0x394>
	 //temp = analogConversionResult();
	 temp = (unsigned int) (sum / samples);
	 comp->Cond_Temp = ConvertToTemp( temp )	;
    9c6a:	98 01       	movw	r18, r16
    9c6c:	ad ec       	ldi	r26, 0xCD	; 205
    9c6e:	bc ec       	ldi	r27, 0xCC	; 204
    9c70:	0e 94 97 58 	call	0xb12e	; 0xb12e <__umulhisi3>
    9c74:	96 95       	lsr	r25
    9c76:	87 95       	ror	r24
    9c78:	96 95       	lsr	r25
    9c7a:	87 95       	ror	r24
    9c7c:	96 95       	lsr	r25
    9c7e:	87 95       	ror	r24
    9c80:	0e 94 34 3e 	call	0x7c68	; 0x7c68 <ConvertToTemp>
    9c84:	f7 01       	movw	r30, r14
    9c86:	ee 5b       	subi	r30, 0xBE	; 190
    9c88:	ff 4f       	sbci	r31, 0xFF	; 255
    9c8a:	60 83       	st	Z, r22
    9c8c:	71 83       	std	Z+1, r23	; 0x01
    9c8e:	82 83       	std	Z+2, r24	; 0x02
    9c90:	93 83       	std	Z+3, r25	; 0x03
	 //--------------------------------------------------------------
	 comp->SuperHeat=ReadSuperHeat (comp);
    9c92:	c7 01       	movw	r24, r14
    9c94:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <ReadSuperHeat>
    9c98:	f7 01       	movw	r30, r14
    9c9a:	ea 5b       	subi	r30, 0xBA	; 186
    9c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    9c9e:	60 83       	st	Z, r22
    9ca0:	71 83       	std	Z+1, r23	; 0x01
    9ca2:	82 83       	std	Z+2, r24	; 0x02
    9ca4:	93 83       	std	Z+3, r25	; 0x03
	 comp->SuperCool=ReadSuperCool (comp);				
    9ca6:	c7 01       	movw	r24, r14
    9ca8:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <ReadSuperCool>
    9cac:	f7 01       	movw	r30, r14
    9cae:	e6 5b       	subi	r30, 0xB6	; 182
    9cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    9cb2:	60 83       	st	Z, r22
    9cb4:	71 83       	std	Z+1, r23	; 0x01
    9cb6:	82 83       	std	Z+2, r24	; 0x02
    9cb8:	93 83       	std	Z+3, r25	; 0x03
						}
						
    if(comp->Index==2) 
    9cba:	f7 01       	movw	r30, r14
    9cbc:	e2 59       	subi	r30, 0x92	; 146
    9cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    9cc0:	80 81       	ld	r24, Z
    9cc2:	91 81       	ldd	r25, Z+1	; 0x01
    9cc4:	02 97       	sbiw	r24, 0x02	; 2
    9cc6:	09 f0       	breq	.+2      	; 0x9cca <ReadSensors+0x414>
    9cc8:	07 c1       	rjmp	.+526    	; 0x9ed8 <ReadSensors+0x622>
	{
					 //read High_Pressure_1
					 PORTL |=    (1 << PL2);//a0
    9cca:	eb e0       	ldi	r30, 0x0B	; 11
    9ccc:	f1 e0       	ldi	r31, 0x01	; 1
    9cce:	80 81       	ld	r24, Z
    9cd0:	84 60       	ori	r24, 0x04	; 4
    9cd2:	80 83       	st	Z, r24
					 PORTL &= ~  (1 << PL1);//a1
    9cd4:	80 81       	ld	r24, Z
    9cd6:	8d 7f       	andi	r24, 0xFD	; 253
    9cd8:	80 83       	st	Z, r24
					 PORTL &= ~  (1 << PL0);//a2
    9cda:	80 81       	ld	r24, Z
    9cdc:	8e 7f       	andi	r24, 0xFE	; 254
    9cde:	80 83       	st	Z, r24
					 startAnalogConversion(0, 0);
    9ce0:	60 e0       	ldi	r22, 0x00	; 0
    9ce2:	80 e0       	ldi	r24, 0x00	; 0
    9ce4:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					 while( analogIsConverting() )
    9ce8:	01 c0       	rjmp	.+2      	; 0x9cec <ReadSensors+0x436>
    9cea:	00 00       	nop
    9cec:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9cf0:	81 11       	cpse	r24, r1
					 _delay_us(25);//portYIELD();
					 temp = analogConversionResult();
    9cf2:	fb cf       	rjmp	.-10     	; 0x9cea <ReadSensors+0x434>
    9cf4:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					 comp->High_Press = ConvertToHighPress(temp);
    9cf8:	bc 01       	movw	r22, r24
    9cfa:	80 e0       	ldi	r24, 0x00	; 0
    9cfc:	90 e0       	ldi	r25, 0x00	; 0
    9cfe:	d3 d4       	rcall	.+2470   	; 0xa6a6 <__floatunsisf>
    9d00:	20 e0       	ldi	r18, 0x00	; 0
    9d02:	30 e0       	ldi	r19, 0x00	; 0
    9d04:	4c ec       	ldi	r20, 0xCC	; 204
    9d06:	52 e4       	ldi	r21, 0x42	; 66
    9d08:	cc d3       	rcall	.+1944   	; 0xa4a2 <__subsf3>
    9d0a:	20 e0       	ldi	r18, 0x00	; 0
    9d0c:	30 e0       	ldi	r19, 0x00	; 0
    9d0e:	48 e0       	ldi	r20, 0x08	; 8
    9d10:	52 e4       	ldi	r21, 0x42	; 66
    9d12:	c4 d5       	rcall	.+2952   	; 0xa89c <__mulsf3>
    9d14:	20 e0       	ldi	r18, 0x00	; 0
    9d16:	30 e0       	ldi	r19, 0x00	; 0
    9d18:	4d e4       	ldi	r20, 0x4D	; 77
    9d1a:	54 e4       	ldi	r21, 0x44	; 68
    9d1c:	2b d4       	rcall	.+2134   	; 0xa574 <__divsf3>
    9d1e:	f7 01       	movw	r30, r14
    9d20:	62 8f       	std	Z+26, r22	; 0x1a
    9d22:	73 8f       	std	Z+27, r23	; 0x1b
    9d24:	84 8f       	std	Z+28, r24	; 0x1c
    9d26:	95 8f       	std	Z+29, r25	; 0x1d
					 //read Low_Pressure_1
					 PORTL &= ~   (1 << PL2);
    9d28:	eb e0       	ldi	r30, 0x0B	; 11
    9d2a:	f1 e0       	ldi	r31, 0x01	; 1
    9d2c:	80 81       	ld	r24, Z
    9d2e:	8b 7f       	andi	r24, 0xFB	; 251
    9d30:	80 83       	st	Z, r24
					 PORTL |=     (1 << PL1);
    9d32:	80 81       	ld	r24, Z
    9d34:	82 60       	ori	r24, 0x02	; 2
    9d36:	80 83       	st	Z, r24
					 PORTL &= ~   (1 << PL0);
    9d38:	80 81       	ld	r24, Z
    9d3a:	8e 7f       	andi	r24, 0xFE	; 254
    9d3c:	80 83       	st	Z, r24
					 startAnalogConversion(0, 0);
    9d3e:	60 e0       	ldi	r22, 0x00	; 0
    9d40:	80 e0       	ldi	r24, 0x00	; 0
    9d42:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
    9d46:	01 c0       	rjmp	.+2      	; 0x9d4a <ReadSensors+0x494>
					 while( analogIsConverting() )
    9d48:	00 00       	nop
    9d4a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
					_delay_us(25);// portYIELD();
					 temp = analogConversionResult();
    9d4e:	81 11       	cpse	r24, r1
    9d50:	fb cf       	rjmp	.-10     	; 0x9d48 <ReadSensors+0x492>
					 comp->Low_Press = ConvertToLowPress( temp );
    9d52:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
    9d56:	bc 01       	movw	r22, r24
    9d58:	80 e0       	ldi	r24, 0x00	; 0
    9d5a:	90 e0       	ldi	r25, 0x00	; 0
    9d5c:	a4 d4       	rcall	.+2376   	; 0xa6a6 <__floatunsisf>
    9d5e:	20 e0       	ldi	r18, 0x00	; 0
    9d60:	30 e0       	ldi	r19, 0x00	; 0
    9d62:	4c e5       	ldi	r20, 0x5C	; 92
    9d64:	52 e4       	ldi	r21, 0x42	; 66
    9d66:	9d d3       	rcall	.+1850   	; 0xa4a2 <__subsf3>
    9d68:	20 e0       	ldi	r18, 0x00	; 0
    9d6a:	30 e0       	ldi	r19, 0x00	; 0
    9d6c:	40 e9       	ldi	r20, 0x90	; 144
    9d6e:	51 e4       	ldi	r21, 0x41	; 65
    9d70:	95 d5       	rcall	.+2858   	; 0xa89c <__mulsf3>
    9d72:	20 e0       	ldi	r18, 0x00	; 0
    9d74:	30 ec       	ldi	r19, 0xC0	; 192
    9d76:	48 e5       	ldi	r20, 0x58	; 88
    9d78:	54 e4       	ldi	r21, 0x44	; 68
    9d7a:	fc d3       	rcall	.+2040   	; 0xa574 <__divsf3>
    9d7c:	f7 01       	movw	r30, r14
    9d7e:	66 8f       	std	Z+30, r22	; 0x1e
    9d80:	77 8f       	std	Z+31, r23	; 0x1f
    9d82:	80 a3       	std	Z+32, r24	; 0x20
    9d84:	91 a3       	std	Z+33, r25	; 0x21
					startAnalogConversion(2, 0);
    9d86:	60 e0       	ldi	r22, 0x00	; 0
    9d88:	82 e0       	ldi	r24, 0x02	; 2
    9d8a:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9d8e:	01 c0       	rjmp	.+2      	; 0x9d92 <ReadSensors+0x4dc>
    9d90:	00 00       	nop
    9d92:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9d96:	81 11       	cpse	r24, r1
    9d98:	fb cf       	rjmp	.-10     	; 0x9d90 <ReadSensors+0x4da>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9d9a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Heat_Out = ConvertToTemp( temp );
    9d9e:	0e 94 34 3e 	call	0x7c68	; 0x7c68 <ConvertToTemp>
    9da2:	f7 01       	movw	r30, r14
    9da4:	62 a7       	std	Z+42, r22	; 0x2a
    9da6:	73 a7       	std	Z+43, r23	; 0x2b
    9da8:	84 a7       	std	Z+44, r24	; 0x2c
    9daa:	95 a7       	std	Z+45, r25	; 0x2d
					//---------------------------------------------------------------
					startAnalogConversion(3, 0);
    9dac:	60 e0       	ldi	r22, 0x00	; 0
    9dae:	83 e0       	ldi	r24, 0x03	; 3
    9db0:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9db4:	01 c0       	rjmp	.+2      	; 0x9db8 <ReadSensors+0x502>
    9db6:	00 00       	nop
    9db8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9dbc:	81 11       	cpse	r24, r1
    9dbe:	fb cf       	rjmp	.-10     	; 0x9db6 <ReadSensors+0x500>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9dc0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Heat_In = ConvertToTemp( temp );
    9dc4:	0e 94 34 3e 	call	0x7c68	; 0x7c68 <ConvertToTemp>
    9dc8:	f7 01       	movw	r30, r14
    9dca:	66 a7       	std	Z+46, r22	; 0x2e
    9dcc:	77 a7       	std	Z+47, r23	; 0x2f
    9dce:	80 ab       	std	Z+48, r24	; 0x30
    9dd0:	91 ab       	std	Z+49, r25	; 0x31
					//---------------------------------------------------------------
					startAnalogConversion(4, 0);
    9dd2:	60 e0       	ldi	r22, 0x00	; 0
    9dd4:	84 e0       	ldi	r24, 0x04	; 4
    9dd6:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9dda:	01 c0       	rjmp	.+2      	; 0x9dde <ReadSensors+0x528>
    9ddc:	00 00       	nop
    9dde:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9de2:	81 11       	cpse	r24, r1
    9de4:	fb cf       	rjmp	.-10     	; 0x9ddc <ReadSensors+0x526>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9de6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Src_In = ConvertToTemp( temp );
    9dea:	0e 94 34 3e 	call	0x7c68	; 0x7c68 <ConvertToTemp>
    9dee:	f7 01       	movw	r30, r14
    9df0:	62 ab       	std	Z+50, r22	; 0x32
    9df2:	73 ab       	std	Z+51, r23	; 0x33
    9df4:	84 ab       	std	Z+52, r24	; 0x34
    9df6:	95 ab       	std	Z+53, r25	; 0x35
					//---------------------------------------------------------------
					startAnalogConversion(5, 0);
    9df8:	60 e0       	ldi	r22, 0x00	; 0
    9dfa:	85 e0       	ldi	r24, 0x05	; 5
    9dfc:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9e00:	01 c0       	rjmp	.+2      	; 0x9e04 <ReadSensors+0x54e>
    9e02:	00 00       	nop
    9e04:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9e08:	81 11       	cpse	r24, r1
    9e0a:	fb cf       	rjmp	.-10     	; 0x9e02 <ReadSensors+0x54c>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9e0c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Src_Out = ConvertToTemp( temp );
    9e10:	0e 94 34 3e 	call	0x7c68	; 0x7c68 <ConvertToTemp>
    9e14:	f7 01       	movw	r30, r14
    9e16:	66 ab       	std	Z+54, r22	; 0x36
    9e18:	77 ab       	std	Z+55, r23	; 0x37
    9e1a:	80 af       	std	Z+56, r24	; 0x38
    9e1c:	91 af       	std	Z+57, r25	; 0x39
					//---------------------------------------------------------------
					startAnalogConversion(6, 0);
    9e1e:	60 e0       	ldi	r22, 0x00	; 0
    9e20:	86 e0       	ldi	r24, 0x06	; 6
    9e22:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9e26:	01 c0       	rjmp	.+2      	; 0x9e2a <ReadSensors+0x574>
    9e28:	00 00       	nop
    9e2a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9e2e:	81 11       	cpse	r24, r1
    9e30:	fb cf       	rjmp	.-10     	; 0x9e28 <ReadSensors+0x572>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9e32:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Ex_Comp = ConvertToTemp( temp );
    9e36:	0e 94 34 3e 	call	0x7c68	; 0x7c68 <ConvertToTemp>
    9e3a:	f7 01       	movw	r30, r14
    9e3c:	62 af       	std	Z+58, r22	; 0x3a
    9e3e:	73 af       	std	Z+59, r23	; 0x3b
    9e40:	84 af       	std	Z+60, r24	; 0x3c
    9e42:	95 af       	std	Z+61, r25	; 0x3d
					//---------------------------------------------------------------
					startAnalogConversion(7, 0);
    9e44:	60 e0       	ldi	r22, 0x00	; 0
    9e46:	87 e0       	ldi	r24, 0x07	; 7
    9e48:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9e4c:	01 c0       	rjmp	.+2      	; 0x9e50 <ReadSensors+0x59a>
    9e4e:	00 00       	nop
    9e50:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9e54:	81 11       	cpse	r24, r1
    9e56:	fb cf       	rjmp	.-10     	; 0x9e4e <ReadSensors+0x598>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9e58:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Suc_Comp = ConvertToTemp( temp );
    9e5c:	0e 94 34 3e 	call	0x7c68	; 0x7c68 <ConvertToTemp>
    9e60:	f7 01       	movw	r30, r14
    9e62:	fe 96       	adiw	r30, 0x3e	; 62
    9e64:	60 83       	st	Z, r22
    9e66:	71 83       	std	Z+1, r23	; 0x01
    9e68:	82 83       	std	Z+2, r24	; 0x02
    9e6a:	93 83       	std	Z+3, r25	; 0x03
					//---------------------------------------------------------------
					startAnalogConversion(8, 0);
    9e6c:	60 e0       	ldi	r22, 0x00	; 0
    9e6e:	88 e0       	ldi	r24, 0x08	; 8
    9e70:	0e 94 ac 07 	call	0xf58	; 0xf58 <startAnalogConversion>
					while( analogIsConverting() )
    9e74:	01 c0       	rjmp	.+2      	; 0x9e78 <ReadSensors+0x5c2>
    9e76:	00 00       	nop
    9e78:	0e 94 a6 07 	call	0xf4c	; 0xf4c <analogIsConverting>
    9e7c:	81 11       	cpse	r24, r1
    9e7e:	fb cf       	rjmp	.-10     	; 0x9e76 <ReadSensors+0x5c0>
					_delay_us(25);//portYIELD();
					temp = analogConversionResult();
    9e80:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogConversionResult>
					comp->Cond_Temp = ConvertToTemp( temp )	;
    9e84:	0e 94 34 3e 	call	0x7c68	; 0x7c68 <ConvertToTemp>
    9e88:	f7 01       	movw	r30, r14
    9e8a:	ee 5b       	subi	r30, 0xBE	; 190
    9e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    9e8e:	60 83       	st	Z, r22
    9e90:	71 83       	std	Z+1, r23	; 0x01
    9e92:	82 83       	std	Z+2, r24	; 0x02
    9e94:	93 83       	std	Z+3, r25	; 0x03
					//--------------------------------------------------------------
					comp->SuperHeat=ReadSuperHeat (comp);
    9e96:	c7 01       	movw	r24, r14
    9e98:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <ReadSuperHeat>
    9e9c:	f7 01       	movw	r30, r14
    9e9e:	ea 5b       	subi	r30, 0xBA	; 186
    9ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    9ea2:	60 83       	st	Z, r22
    9ea4:	71 83       	std	Z+1, r23	; 0x01
    9ea6:	82 83       	std	Z+2, r24	; 0x02
    9ea8:	93 83       	std	Z+3, r25	; 0x03
					comp->SuperCool=ReadSuperCool (comp);
    9eaa:	c7 01       	movw	r24, r14
    9eac:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <ReadSuperCool>
    9eb0:	f7 01       	movw	r30, r14
    9eb2:	e6 5b       	subi	r30, 0xB6	; 182
    9eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    9eb6:	60 83       	st	Z, r22
    9eb8:	71 83       	std	Z+1, r23	; 0x01
    9eba:	82 83       	std	Z+2, r24	; 0x02
					if(comp->checkTrv)comp->trvCorection=corectTrv(comp);
    9ebc:	93 83       	std	Z+3, r25	; 0x03
    9ebe:	f7 01       	movw	r30, r14
    9ec0:	81 81       	ldd	r24, Z+1	; 0x01
    9ec2:	88 23       	and	r24, r24
    9ec4:	49 f0       	breq	.+18     	; 0x9ed8 <ReadSensors+0x622>
    9ec6:	c7 01       	movw	r24, r14
    9ec8:	0e 94 67 3f 	call	0x7ece	; 0x7ece <corectTrv>
    9ecc:	e7 01       	movw	r28, r14
    9ece:	ca 59       	subi	r28, 0x9A	; 154
    9ed0:	df 4f       	sbci	r29, 0xFF	; 255
    9ed2:	b8 d3       	rcall	.+1904   	; 0xa644 <__fixsfsi>
    9ed4:	79 83       	std	Y+1, r23	; 0x01
    9ed6:	68 83       	st	Y, r22
					//EEpromData.Volt_B= ADE7758_bvrms();
					//EEpromData.Volt_C= ADE7758_cvrms();
					}

return;	
}
    9ed8:	df 91       	pop	r29
    9eda:	cf 91       	pop	r28
    9edc:	1f 91       	pop	r17
    9ede:	0f 91       	pop	r16
    9ee0:	ff 90       	pop	r15
    9ee2:	ef 90       	pop	r14
    9ee4:	08 95       	ret

00009ee6 <ComutateTrv>:
	}
	if(comp->Index==2)
	{
		xTimerDelete(xComutateTrv_2,0);
	}
}
    9ee6:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <pvTimerGetTimerID>
    9eea:	fc 01       	movw	r30, r24
    9eec:	20 81       	ld	r18, Z
    9eee:	2a 31       	cpi	r18, 0x1A	; 26
    9ef0:	09 f0       	breq	.+2      	; 0x9ef4 <ComutateTrv+0xe>
    9ef2:	74 c0       	rjmp	.+232    	; 0x9fdc <ComutateTrv+0xf6>
    9ef4:	22 b1       	in	r18, 0x02	; 2
    9ef6:	20 7f       	andi	r18, 0xF0	; 240
    9ef8:	22 b9       	out	0x02, r18	; 2
    9efa:	20 91 8a 09 	lds	r18, 0x098A	; 0x80098a <Comp_1+0x68>
    9efe:	30 91 8b 09 	lds	r19, 0x098B	; 0x80098b <Comp_1+0x69>
    9f02:	12 16       	cp	r1, r18
    9f04:	13 06       	cpc	r1, r19
    9f06:	54 f5       	brge	.+84     	; 0x9f5c <ComutateTrv+0x76>
    9f08:	e0 91 10 07 	lds	r30, 0x0710	; 0x800710 <step_index.2937>
    9f0c:	21 e0       	ldi	r18, 0x01	; 1
    9f0e:	2e 0f       	add	r18, r30
    9f10:	20 93 10 07 	sts	0x0710, r18	; 0x800710 <step_index.2937>
    9f14:	32 b1       	in	r19, 0x02	; 2
    9f16:	f0 e0       	ldi	r31, 0x00	; 0
    9f18:	ee 5e       	subi	r30, 0xEE	; 238
    9f1a:	fd 4f       	sbci	r31, 0xFD	; 253
    9f1c:	20 81       	ld	r18, Z
    9f1e:	23 2b       	or	r18, r19
    9f20:	22 b9       	out	0x02, r18	; 2
    9f22:	ea e8       	ldi	r30, 0x8A	; 138
    9f24:	f9 e0       	ldi	r31, 0x09	; 9
    9f26:	20 81       	ld	r18, Z
    9f28:	31 81       	ldd	r19, Z+1	; 0x01
    9f2a:	21 50       	subi	r18, 0x01	; 1
    9f2c:	31 09       	sbc	r19, r1
    9f2e:	31 83       	std	Z+1, r19	; 0x01
    9f30:	20 83       	st	Z, r18
    9f32:	20 91 8c 09 	lds	r18, 0x098C	; 0x80098c <Comp_1+0x6a>
    9f36:	30 91 8d 09 	lds	r19, 0x098D	; 0x80098d <Comp_1+0x6b>
    9f3a:	2f 5f       	subi	r18, 0xFF	; 255
    9f3c:	3f 4f       	sbci	r19, 0xFF	; 255
    9f3e:	21 3f       	cpi	r18, 0xF1	; 241
    9f40:	31 05       	cpc	r19, r1
    9f42:	2c f4       	brge	.+10     	; 0x9f4e <ComutateTrv+0x68>
    9f44:	30 93 8d 09 	sts	0x098D, r19	; 0x80098d <Comp_1+0x6b>
    9f48:	20 93 8c 09 	sts	0x098C, r18	; 0x80098c <Comp_1+0x6a>
    9f4c:	41 c0       	rjmp	.+130    	; 0x9fd0 <ComutateTrv+0xea>
    9f4e:	20 ef       	ldi	r18, 0xF0	; 240
    9f50:	30 e0       	ldi	r19, 0x00	; 0
    9f52:	30 93 8d 09 	sts	0x098D, r19	; 0x80098d <Comp_1+0x6b>
    9f56:	20 93 8c 09 	sts	0x098C, r18	; 0x80098c <Comp_1+0x6a>
    9f5a:	3a c0       	rjmp	.+116    	; 0x9fd0 <ComutateTrv+0xea>
    9f5c:	33 23       	and	r19, r19
    9f5e:	24 f5       	brge	.+72     	; 0x9fa8 <ComutateTrv+0xc2>
    9f60:	e0 91 10 07 	lds	r30, 0x0710	; 0x800710 <step_index.2937>
    9f64:	21 e0       	ldi	r18, 0x01	; 1
    9f66:	2e 0f       	add	r18, r30
    9f68:	20 93 10 07 	sts	0x0710, r18	; 0x800710 <step_index.2937>
    9f6c:	f0 e0       	ldi	r31, 0x00	; 0
    9f6e:	e2 5f       	subi	r30, 0xF2	; 242
    9f70:	fd 4f       	sbci	r31, 0xFD	; 253
    9f72:	20 81       	ld	r18, Z
    9f74:	22 b9       	out	0x02, r18	; 2
    9f76:	ea e8       	ldi	r30, 0x8A	; 138
    9f78:	f9 e0       	ldi	r31, 0x09	; 9
    9f7a:	20 81       	ld	r18, Z
    9f7c:	31 81       	ldd	r19, Z+1	; 0x01
    9f7e:	2f 5f       	subi	r18, 0xFF	; 255
    9f80:	3f 4f       	sbci	r19, 0xFF	; 255
    9f82:	31 83       	std	Z+1, r19	; 0x01
    9f84:	20 83       	st	Z, r18
    9f86:	20 91 8c 09 	lds	r18, 0x098C	; 0x80098c <Comp_1+0x6a>
    9f8a:	30 91 8d 09 	lds	r19, 0x098D	; 0x80098d <Comp_1+0x6b>
    9f8e:	21 50       	subi	r18, 0x01	; 1
    9f90:	31 09       	sbc	r19, r1
    9f92:	2a f0       	brmi	.+10     	; 0x9f9e <ComutateTrv+0xb8>
    9f94:	30 93 8d 09 	sts	0x098D, r19	; 0x80098d <Comp_1+0x6b>
    9f98:	20 93 8c 09 	sts	0x098C, r18	; 0x80098c <Comp_1+0x6a>
    9f9c:	19 c0       	rjmp	.+50     	; 0x9fd0 <ComutateTrv+0xea>
    9f9e:	10 92 8d 09 	sts	0x098D, r1	; 0x80098d <Comp_1+0x6b>
    9fa2:	10 92 8c 09 	sts	0x098C, r1	; 0x80098c <Comp_1+0x6a>
    9fa6:	14 c0       	rjmp	.+40     	; 0x9fd0 <ComutateTrv+0xea>
    9fa8:	23 2b       	or	r18, r19
    9faa:	69 f4       	brne	.+26     	; 0x9fc6 <ComutateTrv+0xe0>
    9fac:	20 91 29 09 	lds	r18, 0x0929	; 0x800929 <Comp_1+0x7>
    9fb0:	22 23       	and	r18, r18
    9fb2:	49 f0       	breq	.+18     	; 0x9fc6 <ComutateTrv+0xe0>
    9fb4:	20 ef       	ldi	r18, 0xF0	; 240
    9fb6:	30 e0       	ldi	r19, 0x00	; 0
    9fb8:	30 93 8b 09 	sts	0x098B, r19	; 0x80098b <Comp_1+0x69>
    9fbc:	20 93 8a 09 	sts	0x098A, r18	; 0x80098a <Comp_1+0x68>
    9fc0:	10 92 29 09 	sts	0x0929, r1	; 0x800929 <Comp_1+0x7>
    9fc4:	05 c0       	rjmp	.+10     	; 0x9fd0 <ComutateTrv+0xea>
    9fc6:	22 b1       	in	r18, 0x02	; 2
    9fc8:	20 7f       	andi	r18, 0xF0	; 240
    9fca:	22 b9       	out	0x02, r18	; 2
    9fcc:	10 92 29 09 	sts	0x0929, r1	; 0x800929 <Comp_1+0x7>
    9fd0:	20 91 10 07 	lds	r18, 0x0710	; 0x800710 <step_index.2937>
    9fd4:	24 30       	cpi	r18, 0x04	; 4
    9fd6:	10 f0       	brcs	.+4      	; 0x9fdc <ComutateTrv+0xf6>
    9fd8:	10 92 10 07 	sts	0x0710, r1	; 0x800710 <step_index.2937>
    9fdc:	fc 01       	movw	r30, r24
    9fde:	80 81       	ld	r24, Z
    9fe0:	8b 31       	cpi	r24, 0x1B	; 27
    9fe2:	09 f0       	breq	.+2      	; 0x9fe6 <ComutateTrv+0x100>
    9fe4:	70 c0       	rjmp	.+224    	; 0xa0c6 <ComutateTrv+0x1e0>
    9fe6:	82 b1       	in	r24, 0x02	; 2
    9fe8:	8f 70       	andi	r24, 0x0F	; 15
    9fea:	82 b9       	out	0x02, r24	; 2
    9fec:	80 91 10 0a 	lds	r24, 0x0A10	; 0x800a10 <Comp_2+0x68>
    9ff0:	90 91 11 0a 	lds	r25, 0x0A11	; 0x800a11 <Comp_2+0x69>
    9ff4:	18 16       	cp	r1, r24
    9ff6:	19 06       	cpc	r1, r25
    9ff8:	44 f5       	brge	.+80     	; 0xa04a <ComutateTrv+0x164>
    9ffa:	e0 91 0f 07 	lds	r30, 0x070F	; 0x80070f <step_index.2938>
    9ffe:	81 e0       	ldi	r24, 0x01	; 1
    a000:	8e 0f       	add	r24, r30
    a002:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <step_index.2938>
    a006:	92 b1       	in	r25, 0x02	; 2
    a008:	f0 e0       	ldi	r31, 0x00	; 0
    a00a:	e6 5f       	subi	r30, 0xF6	; 246
    a00c:	fd 4f       	sbci	r31, 0xFD	; 253
    a00e:	80 81       	ld	r24, Z
    a010:	89 2b       	or	r24, r25
    a012:	82 b9       	out	0x02, r24	; 2
    a014:	e0 e1       	ldi	r30, 0x10	; 16
    a016:	fa e0       	ldi	r31, 0x0A	; 10
    a018:	80 81       	ld	r24, Z
    a01a:	91 81       	ldd	r25, Z+1	; 0x01
    a01c:	01 97       	sbiw	r24, 0x01	; 1
    a01e:	91 83       	std	Z+1, r25	; 0x01
    a020:	80 83       	st	Z, r24
    a022:	80 91 12 0a 	lds	r24, 0x0A12	; 0x800a12 <Comp_2+0x6a>
    a026:	90 91 13 0a 	lds	r25, 0x0A13	; 0x800a13 <Comp_2+0x6b>
    a02a:	01 96       	adiw	r24, 0x01	; 1
    a02c:	81 3f       	cpi	r24, 0xF1	; 241
    a02e:	91 05       	cpc	r25, r1
    a030:	2c f4       	brge	.+10     	; 0xa03c <ComutateTrv+0x156>
    a032:	90 93 13 0a 	sts	0x0A13, r25	; 0x800a13 <Comp_2+0x6b>
    a036:	80 93 12 0a 	sts	0x0A12, r24	; 0x800a12 <Comp_2+0x6a>
    a03a:	3f c0       	rjmp	.+126    	; 0xa0ba <ComutateTrv+0x1d4>
    a03c:	80 ef       	ldi	r24, 0xF0	; 240
    a03e:	90 e0       	ldi	r25, 0x00	; 0
    a040:	90 93 13 0a 	sts	0x0A13, r25	; 0x800a13 <Comp_2+0x6b>
    a044:	80 93 12 0a 	sts	0x0A12, r24	; 0x800a12 <Comp_2+0x6a>
    a048:	38 c0       	rjmp	.+112    	; 0xa0ba <ComutateTrv+0x1d4>
    a04a:	99 23       	and	r25, r25
    a04c:	14 f5       	brge	.+68     	; 0xa092 <ComutateTrv+0x1ac>
    a04e:	e0 91 0f 07 	lds	r30, 0x070F	; 0x80070f <step_index.2938>
    a052:	81 e0       	ldi	r24, 0x01	; 1
    a054:	8e 0f       	add	r24, r30
    a056:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <step_index.2938>
    a05a:	f0 e0       	ldi	r31, 0x00	; 0
    a05c:	ea 5f       	subi	r30, 0xFA	; 250
    a05e:	fd 4f       	sbci	r31, 0xFD	; 253
    a060:	80 81       	ld	r24, Z
    a062:	82 b9       	out	0x02, r24	; 2
    a064:	e0 e1       	ldi	r30, 0x10	; 16
    a066:	fa e0       	ldi	r31, 0x0A	; 10
    a068:	80 81       	ld	r24, Z
    a06a:	91 81       	ldd	r25, Z+1	; 0x01
    a06c:	01 96       	adiw	r24, 0x01	; 1
    a06e:	91 83       	std	Z+1, r25	; 0x01
    a070:	80 83       	st	Z, r24
    a072:	80 91 12 0a 	lds	r24, 0x0A12	; 0x800a12 <Comp_2+0x6a>
    a076:	90 91 13 0a 	lds	r25, 0x0A13	; 0x800a13 <Comp_2+0x6b>
    a07a:	01 97       	sbiw	r24, 0x01	; 1
    a07c:	2a f0       	brmi	.+10     	; 0xa088 <ComutateTrv+0x1a2>
    a07e:	90 93 13 0a 	sts	0x0A13, r25	; 0x800a13 <Comp_2+0x6b>
    a082:	80 93 12 0a 	sts	0x0A12, r24	; 0x800a12 <Comp_2+0x6a>
    a086:	19 c0       	rjmp	.+50     	; 0xa0ba <ComutateTrv+0x1d4>
    a088:	10 92 13 0a 	sts	0x0A13, r1	; 0x800a13 <Comp_2+0x6b>
    a08c:	10 92 12 0a 	sts	0x0A12, r1	; 0x800a12 <Comp_2+0x6a>
    a090:	14 c0       	rjmp	.+40     	; 0xa0ba <ComutateTrv+0x1d4>
    a092:	89 2b       	or	r24, r25
    a094:	69 f4       	brne	.+26     	; 0xa0b0 <ComutateTrv+0x1ca>
    a096:	80 91 af 09 	lds	r24, 0x09AF	; 0x8009af <Comp_2+0x7>
    a09a:	88 23       	and	r24, r24
    a09c:	49 f0       	breq	.+18     	; 0xa0b0 <ComutateTrv+0x1ca>
    a09e:	80 ef       	ldi	r24, 0xF0	; 240
    a0a0:	90 e0       	ldi	r25, 0x00	; 0
    a0a2:	90 93 11 0a 	sts	0x0A11, r25	; 0x800a11 <Comp_2+0x69>
    a0a6:	80 93 10 0a 	sts	0x0A10, r24	; 0x800a10 <Comp_2+0x68>
    a0aa:	10 92 af 09 	sts	0x09AF, r1	; 0x8009af <Comp_2+0x7>
    a0ae:	05 c0       	rjmp	.+10     	; 0xa0ba <ComutateTrv+0x1d4>
    a0b0:	82 b1       	in	r24, 0x02	; 2
    a0b2:	8f 70       	andi	r24, 0x0F	; 15
    a0b4:	82 b9       	out	0x02, r24	; 2
    a0b6:	10 92 af 09 	sts	0x09AF, r1	; 0x8009af <Comp_2+0x7>
    a0ba:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <step_index.2938>
    a0be:	84 30       	cpi	r24, 0x04	; 4
    a0c0:	10 f0       	brcs	.+4      	; 0xa0c6 <ComutateTrv+0x1e0>
    a0c2:	10 92 0f 07 	sts	0x070F, r1	; 0x80070f <step_index.2938>
    a0c6:	08 95       	ret

0000a0c8 <activateTrvTimer>:
    a0c8:	ef 92       	push	r14
    a0ca:	ff 92       	push	r15
    a0cc:	0f 93       	push	r16
    a0ce:	1f 93       	push	r17
    a0d0:	82 59       	subi	r24, 0x92	; 146
    a0d2:	9f 4f       	sbci	r25, 0xFF	; 255
    a0d4:	fc 01       	movw	r30, r24
    a0d6:	80 81       	ld	r24, Z
    a0d8:	91 81       	ldd	r25, Z+1	; 0x01
    a0da:	81 30       	cpi	r24, 0x01	; 1
    a0dc:	91 05       	cpc	r25, r1
    a0de:	b1 f4       	brne	.+44     	; 0xa10c <activateTrvTimer+0x44>
    a0e0:	0f 2e       	mov	r0, r31
    a0e2:	f3 e7       	ldi	r31, 0x73	; 115
    a0e4:	ef 2e       	mov	r14, r31
    a0e6:	ff e4       	ldi	r31, 0x4F	; 79
    a0e8:	ff 2e       	mov	r15, r31
    a0ea:	f0 2d       	mov	r31, r0
    a0ec:	06 e2       	ldi	r16, 0x26	; 38
    a0ee:	16 e0       	ldi	r17, 0x06	; 6
    a0f0:	21 e0       	ldi	r18, 0x01	; 1
    a0f2:	42 e3       	ldi	r20, 0x32	; 50
    a0f4:	50 e0       	ldi	r21, 0x00	; 0
    a0f6:	60 e0       	ldi	r22, 0x00	; 0
    a0f8:	70 e0       	ldi	r23, 0x00	; 0
    a0fa:	8c ef       	ldi	r24, 0xFC	; 252
    a0fc:	95 e0       	ldi	r25, 0x05	; 5
    a0fe:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    a102:	90 93 a8 08 	sts	0x08A8, r25	; 0x8008a8 <xComutateTrv_1+0x1>
    a106:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <xComutateTrv_1>
    a10a:	17 c0       	rjmp	.+46     	; 0xa13a <activateTrvTimer+0x72>
    a10c:	02 97       	sbiw	r24, 0x02	; 2
    a10e:	a9 f4       	brne	.+42     	; 0xa13a <activateTrvTimer+0x72>
    a110:	0f 2e       	mov	r0, r31
    a112:	f3 e7       	ldi	r31, 0x73	; 115
    a114:	ef 2e       	mov	r14, r31
    a116:	ff e4       	ldi	r31, 0x4F	; 79
    a118:	ff 2e       	mov	r15, r31
    a11a:	f0 2d       	mov	r31, r0
    a11c:	05 e2       	ldi	r16, 0x25	; 37
    a11e:	16 e0       	ldi	r17, 0x06	; 6
    a120:	21 e0       	ldi	r18, 0x01	; 1
    a122:	42 e3       	ldi	r20, 0x32	; 50
    a124:	50 e0       	ldi	r21, 0x00	; 0
    a126:	60 e0       	ldi	r22, 0x00	; 0
    a128:	70 e0       	ldi	r23, 0x00	; 0
    a12a:	85 e0       	ldi	r24, 0x05	; 5
    a12c:	96 e0       	ldi	r25, 0x06	; 6
    a12e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xTimerCreate>
    a132:	90 93 9f 09 	sts	0x099F, r25	; 0x80099f <xComutateTrv_2+0x1>
    a136:	80 93 9e 09 	sts	0x099E, r24	; 0x80099e <xComutateTrv_2>
    a13a:	1f 91       	pop	r17
    a13c:	0f 91       	pop	r16
    a13e:	ff 90       	pop	r15
    a140:	ef 90       	pop	r14
    a142:	08 95       	ret

0000a144 <startTrvTimer>:
    a144:	cf 92       	push	r12
    a146:	df 92       	push	r13
    a148:	ef 92       	push	r14
    a14a:	ff 92       	push	r15
    a14c:	0f 93       	push	r16
    a14e:	1f 93       	push	r17
    a150:	82 59       	subi	r24, 0x92	; 146
    a152:	9f 4f       	sbci	r25, 0xFF	; 255
    a154:	fc 01       	movw	r30, r24
    a156:	80 81       	ld	r24, Z
    a158:	91 81       	ldd	r25, Z+1	; 0x01
    a15a:	81 30       	cpi	r24, 0x01	; 1
    a15c:	91 05       	cpc	r25, r1
    a15e:	89 f4       	brne	.+34     	; 0xa182 <startTrvTimer+0x3e>
    a160:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    a164:	9b 01       	movw	r18, r22
    a166:	ac 01       	movw	r20, r24
    a168:	c1 2c       	mov	r12, r1
    a16a:	d1 2c       	mov	r13, r1
    a16c:	76 01       	movw	r14, r12
    a16e:	00 e0       	ldi	r16, 0x00	; 0
    a170:	10 e0       	ldi	r17, 0x00	; 0
    a172:	61 e0       	ldi	r22, 0x01	; 1
    a174:	80 91 a7 08 	lds	r24, 0x08A7	; 0x8008a7 <xComutateTrv_1>
    a178:	90 91 a8 08 	lds	r25, 0x08A8	; 0x8008a8 <xComutateTrv_1+0x1>
    a17c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    a180:	12 c0       	rjmp	.+36     	; 0xa1a6 <startTrvTimer+0x62>
    a182:	02 97       	sbiw	r24, 0x02	; 2
    a184:	81 f4       	brne	.+32     	; 0xa1a6 <startTrvTimer+0x62>
    a186:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGetTickCount>
    a18a:	9b 01       	movw	r18, r22
    a18c:	ac 01       	movw	r20, r24
    a18e:	c1 2c       	mov	r12, r1
    a190:	d1 2c       	mov	r13, r1
    a192:	76 01       	movw	r14, r12
    a194:	00 e0       	ldi	r16, 0x00	; 0
    a196:	10 e0       	ldi	r17, 0x00	; 0
    a198:	61 e0       	ldi	r22, 0x01	; 1
    a19a:	80 91 9e 09 	lds	r24, 0x099E	; 0x80099e <xComutateTrv_2>
    a19e:	90 91 9f 09 	lds	r25, 0x099F	; 0x80099f <xComutateTrv_2+0x1>
    a1a2:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
    a1a6:	1f 91       	pop	r17
    a1a8:	0f 91       	pop	r16
    a1aa:	ff 90       	pop	r15
    a1ac:	ef 90       	pop	r14
    a1ae:	df 90       	pop	r13
    a1b0:	cf 90       	pop	r12
    a1b2:	08 95       	ret

0000a1b4 <stopTrvTimer>:
void stopTrvTimer(xCompressor *comp)
{
    a1b4:	cf 92       	push	r12
    a1b6:	df 92       	push	r13
    a1b8:	ef 92       	push	r14
    a1ba:	ff 92       	push	r15
    a1bc:	0f 93       	push	r16
    a1be:	1f 93       	push	r17
    a1c0:	cf 93       	push	r28
    a1c2:	df 93       	push	r29
    a1c4:	ec 01       	movw	r28, r24
	if(comp->Index==1)
    a1c6:	fc 01       	movw	r30, r24
    a1c8:	e2 59       	subi	r30, 0x92	; 146
    a1ca:	ff 4f       	sbci	r31, 0xFF	; 255
    a1cc:	80 81       	ld	r24, Z
    a1ce:	91 81       	ldd	r25, Z+1	; 0x01
    a1d0:	01 97       	sbiw	r24, 0x01	; 1
    a1d2:	c1 f4       	brne	.+48     	; 0xa204 <stopTrvTimer+0x50>
	{
		if( xTimerIsTimerActive( xComutateTrv_1 ) != pdFALSE )	xTimerStop(xComutateTrv_1, 1);
    a1d4:	80 91 a7 08 	lds	r24, 0x08A7	; 0x8008a7 <xComutateTrv_1>
    a1d8:	90 91 a8 08 	lds	r25, 0x08A8	; 0x8008a8 <xComutateTrv_1+0x1>
    a1dc:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    a1e0:	88 23       	and	r24, r24
    a1e2:	81 f0       	breq	.+32     	; 0xa204 <stopTrvTimer+0x50>
    a1e4:	c1 2c       	mov	r12, r1
    a1e6:	d1 2c       	mov	r13, r1
    a1e8:	76 01       	movw	r14, r12
    a1ea:	c3 94       	inc	r12
    a1ec:	00 e0       	ldi	r16, 0x00	; 0
    a1ee:	10 e0       	ldi	r17, 0x00	; 0
    a1f0:	20 e0       	ldi	r18, 0x00	; 0
    a1f2:	30 e0       	ldi	r19, 0x00	; 0
    a1f4:	a9 01       	movw	r20, r18
    a1f6:	63 e0       	ldi	r22, 0x03	; 3
    a1f8:	80 91 a7 08 	lds	r24, 0x08A7	; 0x8008a7 <xComutateTrv_1>
    a1fc:	90 91 a8 08 	lds	r25, 0x08A8	; 0x8008a8 <xComutateTrv_1+0x1>
    a200:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	if(comp->Index==2)
    a204:	c2 59       	subi	r28, 0x92	; 146
    a206:	df 4f       	sbci	r29, 0xFF	; 255
    a208:	88 81       	ld	r24, Y
    a20a:	99 81       	ldd	r25, Y+1	; 0x01
    a20c:	02 97       	sbiw	r24, 0x02	; 2
    a20e:	c1 f4       	brne	.+48     	; 0xa240 <stopTrvTimer+0x8c>
	{
		if( xTimerIsTimerActive( xComutateTrv_2 ) != pdFALSE )	xTimerStop(xComutateTrv_2, 1);
    a210:	80 91 9e 09 	lds	r24, 0x099E	; 0x80099e <xComutateTrv_2>
    a214:	90 91 9f 09 	lds	r25, 0x099F	; 0x80099f <xComutateTrv_2+0x1>
    a218:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <xTimerIsTimerActive>
    a21c:	88 23       	and	r24, r24
    a21e:	81 f0       	breq	.+32     	; 0xa240 <stopTrvTimer+0x8c>
    a220:	c1 2c       	mov	r12, r1
    a222:	d1 2c       	mov	r13, r1
    a224:	76 01       	movw	r14, r12
    a226:	c3 94       	inc	r12
    a228:	00 e0       	ldi	r16, 0x00	; 0
    a22a:	10 e0       	ldi	r17, 0x00	; 0
    a22c:	20 e0       	ldi	r18, 0x00	; 0
    a22e:	30 e0       	ldi	r19, 0x00	; 0
    a230:	a9 01       	movw	r20, r18
    a232:	63 e0       	ldi	r22, 0x03	; 3
    a234:	80 91 9e 09 	lds	r24, 0x099E	; 0x80099e <xComutateTrv_2>
    a238:	90 91 9f 09 	lds	r25, 0x099F	; 0x80099f <xComutateTrv_2+0x1>
    a23c:	0e 94 91 1b 	call	0x3722	; 0x3722 <xTimerGenericCommand>
	}
	
}
    a240:	df 91       	pop	r29
    a242:	cf 91       	pop	r28
    a244:	1f 91       	pop	r17
    a246:	0f 91       	pop	r16
    a248:	ff 90       	pop	r15
    a24a:	ef 90       	pop	r14
    a24c:	df 90       	pop	r13
    a24e:	cf 90       	pop	r12
    a250:	08 95       	ret

0000a252 <Fuzzy>:
		
	}
}
//----------------------------------------------------------------------------------------------------------
int Fuzzy(xCompressor *comp,int corection)
{
    a252:	cf 92       	push	r12
    a254:	df 92       	push	r13
    a256:	ef 92       	push	r14
    a258:	ff 92       	push	r15
    a25a:	0f 93       	push	r16
    a25c:	1f 93       	push	r17
    a25e:	cf 93       	push	r28
    a260:	df 93       	push	r29
    a262:	ec 01       	movw	r28, r24
    a264:	8b 01       	movw	r16, r22
	int steps=0;
	static int old_corection=0;
	static int old_corection_1=0;
	
	if(comp->Src_In<=10 ){steps=(comp->Src_In)/10 * 100 ;}
    a266:	ca a8       	ldd	r12, Y+50	; 0x32
    a268:	db a8       	ldd	r13, Y+51	; 0x33
    a26a:	ec a8       	ldd	r14, Y+52	; 0x34
    a26c:	fd a8       	ldd	r15, Y+53	; 0x35
    a26e:	20 e0       	ldi	r18, 0x00	; 0
    a270:	30 e0       	ldi	r19, 0x00	; 0
    a272:	40 e2       	ldi	r20, 0x20	; 32
    a274:	51 e4       	ldi	r21, 0x41	; 65
    a276:	c7 01       	movw	r24, r14
    a278:	b6 01       	movw	r22, r12
    a27a:	78 d1       	rcall	.+752    	; 0xa56c <__cmpsf2>
    a27c:	18 16       	cp	r1, r24
    a27e:	7c f0       	brlt	.+30     	; 0xa29e <Fuzzy+0x4c>
    a280:	20 e0       	ldi	r18, 0x00	; 0
    a282:	30 e0       	ldi	r19, 0x00	; 0
    a284:	40 e2       	ldi	r20, 0x20	; 32
    a286:	51 e4       	ldi	r21, 0x41	; 65
    a288:	c7 01       	movw	r24, r14
    a28a:	b6 01       	movw	r22, r12
    a28c:	73 d1       	rcall	.+742    	; 0xa574 <__divsf3>
    a28e:	20 e0       	ldi	r18, 0x00	; 0
    a290:	30 e0       	ldi	r19, 0x00	; 0
    a292:	48 ec       	ldi	r20, 0xC8	; 200
    a294:	52 e4       	ldi	r21, 0x42	; 66
    a296:	02 d3       	rcall	.+1540   	; 0xa89c <__mulsf3>
    a298:	d5 d1       	rcall	.+938    	; 0xa644 <__fixsfsi>
    a29a:	7b 01       	movw	r14, r22
    a29c:	86 c0       	rjmp	.+268    	; 0xa3aa <Fuzzy+0x158>
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps); }//comp->trvCorection;
	else if(comp->Src_In>10 && comp->Src_In<=20)  {steps = (comp->Src_In-10)/10 * 100 + 100;}
    a29e:	20 e0       	ldi	r18, 0x00	; 0
    a2a0:	30 e0       	ldi	r19, 0x00	; 0
    a2a2:	40 e2       	ldi	r20, 0x20	; 32
    a2a4:	51 e4       	ldi	r21, 0x41	; 65
    a2a6:	c7 01       	movw	r24, r14
    a2a8:	b6 01       	movw	r22, r12
    a2aa:	af d2       	rcall	.+1374   	; 0xa80a <__gesf2>
    a2ac:	18 16       	cp	r1, r24
    a2ae:	14 f5       	brge	.+68     	; 0xa2f4 <Fuzzy+0xa2>
    a2b0:	20 e0       	ldi	r18, 0x00	; 0
    a2b2:	30 e0       	ldi	r19, 0x00	; 0
    a2b4:	40 ea       	ldi	r20, 0xA0	; 160
    a2b6:	51 e4       	ldi	r21, 0x41	; 65
    a2b8:	c7 01       	movw	r24, r14
    a2ba:	b6 01       	movw	r22, r12
    a2bc:	57 d1       	rcall	.+686    	; 0xa56c <__cmpsf2>
    a2be:	18 16       	cp	r1, r24
    a2c0:	cc f0       	brlt	.+50     	; 0xa2f4 <Fuzzy+0xa2>
    a2c2:	20 e0       	ldi	r18, 0x00	; 0
    a2c4:	30 e0       	ldi	r19, 0x00	; 0
    a2c6:	40 e2       	ldi	r20, 0x20	; 32
    a2c8:	51 e4       	ldi	r21, 0x41	; 65
    a2ca:	c7 01       	movw	r24, r14
    a2cc:	b6 01       	movw	r22, r12
    a2ce:	e9 d0       	rcall	.+466    	; 0xa4a2 <__subsf3>
    a2d0:	20 e0       	ldi	r18, 0x00	; 0
    a2d2:	30 e0       	ldi	r19, 0x00	; 0
    a2d4:	40 e2       	ldi	r20, 0x20	; 32
    a2d6:	51 e4       	ldi	r21, 0x41	; 65
    a2d8:	4d d1       	rcall	.+666    	; 0xa574 <__divsf3>
    a2da:	20 e0       	ldi	r18, 0x00	; 0
    a2dc:	30 e0       	ldi	r19, 0x00	; 0
    a2de:	48 ec       	ldi	r20, 0xC8	; 200
    a2e0:	52 e4       	ldi	r21, 0x42	; 66
    a2e2:	dc d2       	rcall	.+1464   	; 0xa89c <__mulsf3>
    a2e4:	20 e0       	ldi	r18, 0x00	; 0
    a2e6:	30 e0       	ldi	r19, 0x00	; 0
    a2e8:	48 ec       	ldi	r20, 0xC8	; 200
    a2ea:	52 e4       	ldi	r21, 0x42	; 66
    a2ec:	db d0       	rcall	.+438    	; 0xa4a4 <__addsf3>
    a2ee:	aa d1       	rcall	.+852    	; 0xa644 <__fixsfsi>
    a2f0:	7b 01       	movw	r14, r22
    a2f2:	5b c0       	rjmp	.+182    	; 0xa3aa <Fuzzy+0x158>
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps); }//;
	else if(comp->Src_In >20 && comp->Src_In<=30) {steps = (comp->Src_In-20)/10 * 100 + 150;}
    a2f4:	20 e0       	ldi	r18, 0x00	; 0
    a2f6:	30 e0       	ldi	r19, 0x00	; 0
    a2f8:	40 ea       	ldi	r20, 0xA0	; 160
    a2fa:	51 e4       	ldi	r21, 0x41	; 65
    a2fc:	c7 01       	movw	r24, r14
    a2fe:	b6 01       	movw	r22, r12
    a300:	84 d2       	rcall	.+1288   	; 0xa80a <__gesf2>
    a302:	18 16       	cp	r1, r24
    a304:	14 f5       	brge	.+68     	; 0xa34a <Fuzzy+0xf8>
    a306:	20 e0       	ldi	r18, 0x00	; 0
    a308:	30 e0       	ldi	r19, 0x00	; 0
    a30a:	40 ef       	ldi	r20, 0xF0	; 240
    a30c:	51 e4       	ldi	r21, 0x41	; 65
    a30e:	c7 01       	movw	r24, r14
    a310:	b6 01       	movw	r22, r12
    a312:	2c d1       	rcall	.+600    	; 0xa56c <__cmpsf2>
    a314:	18 16       	cp	r1, r24
    a316:	cc f0       	brlt	.+50     	; 0xa34a <Fuzzy+0xf8>
    a318:	20 e0       	ldi	r18, 0x00	; 0
    a31a:	30 e0       	ldi	r19, 0x00	; 0
    a31c:	40 ea       	ldi	r20, 0xA0	; 160
    a31e:	51 e4       	ldi	r21, 0x41	; 65
    a320:	c7 01       	movw	r24, r14
    a322:	b6 01       	movw	r22, r12
    a324:	be d0       	rcall	.+380    	; 0xa4a2 <__subsf3>
    a326:	20 e0       	ldi	r18, 0x00	; 0
    a328:	30 e0       	ldi	r19, 0x00	; 0
    a32a:	40 e2       	ldi	r20, 0x20	; 32
    a32c:	51 e4       	ldi	r21, 0x41	; 65
    a32e:	22 d1       	rcall	.+580    	; 0xa574 <__divsf3>
    a330:	20 e0       	ldi	r18, 0x00	; 0
    a332:	30 e0       	ldi	r19, 0x00	; 0
    a334:	48 ec       	ldi	r20, 0xC8	; 200
    a336:	52 e4       	ldi	r21, 0x42	; 66
    a338:	b1 d2       	rcall	.+1378   	; 0xa89c <__mulsf3>
    a33a:	20 e0       	ldi	r18, 0x00	; 0
    a33c:	30 e0       	ldi	r19, 0x00	; 0
    a33e:	46 e1       	ldi	r20, 0x16	; 22
    a340:	53 e4       	ldi	r21, 0x43	; 67
    a342:	b0 d0       	rcall	.+352    	; 0xa4a4 <__addsf3>
    a344:	7f d1       	rcall	.+766    	; 0xa644 <__fixsfsi>
    a346:	7b 01       	movw	r14, r22
    a348:	30 c0       	rjmp	.+96     	; 0xa3aa <Fuzzy+0x158>
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps);}// comp->trvCorection;
	else if(comp->Src_In>30 && comp->Src_In<=40)  {steps = (comp->Src_In-30)/10 * 100 + 200;}
    a34a:	20 e0       	ldi	r18, 0x00	; 0
    a34c:	30 e0       	ldi	r19, 0x00	; 0
    a34e:	40 ef       	ldi	r20, 0xF0	; 240
    a350:	51 e4       	ldi	r21, 0x41	; 65
    a352:	c7 01       	movw	r24, r14
    a354:	b6 01       	movw	r22, r12
    a356:	59 d2       	rcall	.+1202   	; 0xa80a <__gesf2>
    a358:	18 16       	cp	r1, r24
    a35a:	14 f5       	brge	.+68     	; 0xa3a0 <Fuzzy+0x14e>
    a35c:	20 e0       	ldi	r18, 0x00	; 0
    a35e:	30 e0       	ldi	r19, 0x00	; 0
    a360:	40 e2       	ldi	r20, 0x20	; 32
    a362:	52 e4       	ldi	r21, 0x42	; 66
    a364:	c7 01       	movw	r24, r14
    a366:	b6 01       	movw	r22, r12
    a368:	01 d1       	rcall	.+514    	; 0xa56c <__cmpsf2>
    a36a:	18 16       	cp	r1, r24
    a36c:	e4 f0       	brlt	.+56     	; 0xa3a6 <Fuzzy+0x154>
    a36e:	20 e0       	ldi	r18, 0x00	; 0
    a370:	30 e0       	ldi	r19, 0x00	; 0
    a372:	40 ef       	ldi	r20, 0xF0	; 240
    a374:	51 e4       	ldi	r21, 0x41	; 65
    a376:	c7 01       	movw	r24, r14
    a378:	b6 01       	movw	r22, r12
    a37a:	93 d0       	rcall	.+294    	; 0xa4a2 <__subsf3>
    a37c:	20 e0       	ldi	r18, 0x00	; 0
    a37e:	30 e0       	ldi	r19, 0x00	; 0
    a380:	40 e2       	ldi	r20, 0x20	; 32
    a382:	51 e4       	ldi	r21, 0x41	; 65
    a384:	f7 d0       	rcall	.+494    	; 0xa574 <__divsf3>
    a386:	20 e0       	ldi	r18, 0x00	; 0
    a388:	30 e0       	ldi	r19, 0x00	; 0
    a38a:	48 ec       	ldi	r20, 0xC8	; 200
    a38c:	52 e4       	ldi	r21, 0x42	; 66
    a38e:	86 d2       	rcall	.+1292   	; 0xa89c <__mulsf3>
    a390:	20 e0       	ldi	r18, 0x00	; 0
    a392:	30 e0       	ldi	r19, 0x00	; 0
    a394:	48 e4       	ldi	r20, 0x48	; 72
    a396:	53 e4       	ldi	r21, 0x43	; 67
    a398:	85 d0       	rcall	.+266    	; 0xa4a4 <__addsf3>
    a39a:	54 d1       	rcall	.+680    	; 0xa644 <__fixsfsi>
    a39c:	7b 01       	movw	r14, r22
    a39e:	05 c0       	rjmp	.+10     	; 0xa3aa <Fuzzy+0x158>
    a3a0:	e1 2c       	mov	r14, r1
    a3a2:	f1 2c       	mov	r15, r1
	}
}
//----------------------------------------------------------------------------------------------------------
int Fuzzy(xCompressor *comp,int corection)
{
	int steps=0;
    a3a4:	02 c0       	rjmp	.+4      	; 0xa3aa <Fuzzy+0x158>
    a3a6:	e1 2c       	mov	r14, r1
    a3a8:	f1 2c       	mov	r15, r1
    a3aa:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <old_corection_1.2945>
	else if(comp->Src_In>30 && comp->Src_In<=40)  {steps = (comp->Src_In-30)/10 * 100 + 200;}
		//if(old_corection!=corection){comp->trvCorection=corection-steps;old_corection=corection;}		
		//xSerialxPrintf(&xSerial3Port,"steps_%d = %d \r\n",comp->Index, steps);}//comp->trvCorection;
		
	//if(old_corection!=corection && comp->Index==1){comp->trvCorection=corection-steps;old_corection=corection;}
		 if(old_corection_1!=corection && comp->Index==2){comp->trvCorection=corection-steps;old_corection_1=corection;}
    a3ae:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <old_corection_1.2945+0x1>
    a3b2:	80 17       	cp	r24, r16
    a3b4:	91 07       	cpc	r25, r17
    a3b6:	99 f0       	breq	.+38     	; 0xa3de <Fuzzy+0x18c>
    a3b8:	fe 01       	movw	r30, r28
    a3ba:	e2 59       	subi	r30, 0x92	; 146
    a3bc:	ff 4f       	sbci	r31, 0xFF	; 255
    a3be:	80 81       	ld	r24, Z
    a3c0:	91 81       	ldd	r25, Z+1	; 0x01
    a3c2:	02 97       	sbiw	r24, 0x02	; 2
    a3c4:	09 f0       	breq	.+2      	; 0xa3c8 <Fuzzy+0x176>
    a3c6:	42 c0       	rjmp	.+132    	; 0xa44c <Fuzzy+0x1fa>
    a3c8:	38 97       	sbiw	r30, 0x08	; 8
    a3ca:	c8 01       	movw	r24, r16
    a3cc:	8e 19       	sub	r24, r14
    a3ce:	9f 09       	sbc	r25, r15
    a3d0:	91 83       	std	Z+1, r25	; 0x01
    a3d2:	80 83       	st	Z, r24
    a3d4:	10 93 0e 07 	sts	0x070E, r17	; 0x80070e <old_corection_1.2945+0x1>
    a3d8:	00 93 0d 07 	sts	0x070D, r16	; 0x80070d <old_corection_1.2945>
    a3dc:	07 c0       	rjmp	.+14     	; 0xa3ec <Fuzzy+0x19a>
    a3de:	fe 01       	movw	r30, r28
    a3e0:	e2 59       	subi	r30, 0x92	; 146
	//xSerialxPrintf(&xSerial3Port,"TRVcorection_%d = %d \r\n",comp->Index, corection);		
	if(comp->Index==2)xSerialxPrintf(&xSerial3Port,"TRVcorection_2 = %d \r\n", comp->trvCorection);
    a3e2:	ff 4f       	sbci	r31, 0xFF	; 255
    a3e4:	80 81       	ld	r24, Z
    a3e6:	91 81       	ldd	r25, Z+1	; 0x01
    a3e8:	02 97       	sbiw	r24, 0x02	; 2
    a3ea:	81 f5       	brne	.+96     	; 0xa44c <Fuzzy+0x1fa>
    a3ec:	fe 01       	movw	r30, r28
    a3ee:	ea 59       	subi	r30, 0x9A	; 154
    a3f0:	ff 4f       	sbci	r31, 0xFF	; 255
    a3f2:	81 81       	ldd	r24, Z+1	; 0x01
    a3f4:	8f 93       	push	r24
    a3f6:	80 81       	ld	r24, Z
    a3f8:	8f 93       	push	r24
    a3fa:	8e e0       	ldi	r24, 0x0E	; 14
    a3fc:	96 e0       	ldi	r25, 0x06	; 6
    a3fe:	9f 93       	push	r25
    a400:	8f 93       	push	r24
    a402:	80 e6       	ldi	r24, 0x60	; 96
    a404:	97 e0       	ldi	r25, 0x07	; 7
    a406:	9f 93       	push	r25
    a408:	8f 93       	push	r24
    a40a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a40e:	0f 90       	pop	r0
    a410:	0f 90       	pop	r0
	if(comp->Index==2)xSerialxPrintf(&xSerial3Port,"corection_2 = %d \r\n", corection);
    a412:	0f 90       	pop	r0
    a414:	0f 90       	pop	r0
    a416:	0f 90       	pop	r0
    a418:	0f 90       	pop	r0
    a41a:	fe 01       	movw	r30, r28
    a41c:	e2 59       	subi	r30, 0x92	; 146
    a41e:	ff 4f       	sbci	r31, 0xFF	; 255
    a420:	80 81       	ld	r24, Z
    a422:	91 81       	ldd	r25, Z+1	; 0x01
    a424:	02 97       	sbiw	r24, 0x02	; 2
    a426:	91 f4       	brne	.+36     	; 0xa44c <Fuzzy+0x1fa>
    a428:	1f 93       	push	r17
    a42a:	0f 93       	push	r16
    a42c:	81 e1       	ldi	r24, 0x11	; 17
    a42e:	96 e0       	ldi	r25, 0x06	; 6
    a430:	9f 93       	push	r25
    a432:	8f 93       	push	r24
    a434:	80 e6       	ldi	r24, 0x60	; 96
    a436:	97 e0       	ldi	r25, 0x07	; 7
    a438:	9f 93       	push	r25
    a43a:	8f 93       	push	r24
    a43c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xSerialxPrintf>
    a440:	0f 90       	pop	r0
    a442:	0f 90       	pop	r0
    a444:	0f 90       	pop	r0
    a446:	0f 90       	pop	r0
    a448:	0f 90       	pop	r0
    a44a:	0f 90       	pop	r0
    a44c:	fe 01       	movw	r30, r28
    a44e:	ea 59       	subi	r30, 0x9A	; 154
	steps=steps+comp->trvCorection;		
    a450:	ff 4f       	sbci	r31, 0xFF	; 255
    a452:	80 81       	ld	r24, Z
    a454:	91 81       	ldd	r25, Z+1	; 0x01
	comp->Steps=steps - comp->Trv_position;
    a456:	b7 01       	movw	r22, r14
    a458:	68 0f       	add	r22, r24
    a45a:	79 1f       	adc	r23, r25
    a45c:	34 96       	adiw	r30, 0x04	; 4
    a45e:	80 81       	ld	r24, Z
    a460:	91 81       	ldd	r25, Z+1	; 0x01
    a462:	9b 01       	movw	r18, r22
    a464:	28 1b       	sub	r18, r24
    a466:	39 0b       	sbc	r19, r25
    a468:	c9 01       	movw	r24, r18
    a46a:	c8 59       	subi	r28, 0x98	; 152
    a46c:	df 4f       	sbci	r29, 0xFF	; 255
    a46e:	39 83       	std	Y+1, r19	; 0x01
    a470:	28 83       	st	Y, r18
    a472:	df 91       	pop	r29
    a474:	cf 91       	pop	r28

	return comp->Steps;
}
    a476:	1f 91       	pop	r17
    a478:	0f 91       	pop	r16
    a47a:	ff 90       	pop	r15
    a47c:	ef 90       	pop	r14
    a47e:	df 90       	pop	r13
    a480:	cf 90       	pop	r12
    a482:	08 95       	ret

0000a484 <calibration>:
    a484:	21 e0       	ldi	r18, 0x01	; 1
    a486:	fc 01       	movw	r30, r24
////////////////////////////////////////////////////////////////////////////////////////////////////////
void calibration(xCompressor *comp)
{
	comp->calibrate=true;
    a488:	27 83       	std	Z+7, r18	; 0x07
	comp->Steps=-240;
    a48a:	e8 59       	subi	r30, 0x98	; 152
    a48c:	ff 4f       	sbci	r31, 0xFF	; 255
    a48e:	20 e1       	ldi	r18, 0x10	; 16
    a490:	3f ef       	ldi	r19, 0xFF	; 255
    a492:	31 83       	std	Z+1, r19	; 0x01
    a494:	20 83       	st	Z, r18
	comp->Trv_position=240;
    a496:	32 96       	adiw	r30, 0x02	; 2
    a498:	20 ef       	ldi	r18, 0xF0	; 240
    a49a:	30 e0       	ldi	r19, 0x00	; 0
    a49c:	31 83       	std	Z+1, r19	; 0x01
    a49e:	20 83       	st	Z, r18
    a4a0:	08 95       	ret

0000a4a2 <__subsf3>:
    a4a2:	50 58       	subi	r21, 0x80	; 128

0000a4a4 <__addsf3>:
    a4a4:	bb 27       	eor	r27, r27
    a4a6:	aa 27       	eor	r26, r26
    a4a8:	0e d0       	rcall	.+28     	; 0xa4c6 <__addsf3x>
    a4aa:	75 c1       	rjmp	.+746    	; 0xa796 <__fp_round>
    a4ac:	66 d1       	rcall	.+716    	; 0xa77a <__fp_pscA>
    a4ae:	30 f0       	brcs	.+12     	; 0xa4bc <__addsf3+0x18>
    a4b0:	6b d1       	rcall	.+726    	; 0xa788 <__fp_pscB>
    a4b2:	20 f0       	brcs	.+8      	; 0xa4bc <__addsf3+0x18>
    a4b4:	31 f4       	brne	.+12     	; 0xa4c2 <__addsf3+0x1e>
    a4b6:	9f 3f       	cpi	r25, 0xFF	; 255
    a4b8:	11 f4       	brne	.+4      	; 0xa4be <__addsf3+0x1a>
    a4ba:	1e f4       	brtc	.+6      	; 0xa4c2 <__addsf3+0x1e>
    a4bc:	5b c1       	rjmp	.+694    	; 0xa774 <__fp_nan>
    a4be:	0e f4       	brtc	.+2      	; 0xa4c2 <__addsf3+0x1e>
    a4c0:	e0 95       	com	r30
    a4c2:	e7 fb       	bst	r30, 7
    a4c4:	51 c1       	rjmp	.+674    	; 0xa768 <__fp_inf>

0000a4c6 <__addsf3x>:
    a4c6:	e9 2f       	mov	r30, r25
    a4c8:	77 d1       	rcall	.+750    	; 0xa7b8 <__fp_split3>
    a4ca:	80 f3       	brcs	.-32     	; 0xa4ac <__addsf3+0x8>
    a4cc:	ba 17       	cp	r27, r26
    a4ce:	62 07       	cpc	r22, r18
    a4d0:	73 07       	cpc	r23, r19
    a4d2:	84 07       	cpc	r24, r20
    a4d4:	95 07       	cpc	r25, r21
    a4d6:	18 f0       	brcs	.+6      	; 0xa4de <__addsf3x+0x18>
    a4d8:	71 f4       	brne	.+28     	; 0xa4f6 <__addsf3x+0x30>
    a4da:	9e f5       	brtc	.+102    	; 0xa542 <__addsf3x+0x7c>
    a4dc:	8f c1       	rjmp	.+798    	; 0xa7fc <__fp_zero>
    a4de:	0e f4       	brtc	.+2      	; 0xa4e2 <__addsf3x+0x1c>
    a4e0:	e0 95       	com	r30
    a4e2:	0b 2e       	mov	r0, r27
    a4e4:	ba 2f       	mov	r27, r26
    a4e6:	a0 2d       	mov	r26, r0
    a4e8:	0b 01       	movw	r0, r22
    a4ea:	b9 01       	movw	r22, r18
    a4ec:	90 01       	movw	r18, r0
    a4ee:	0c 01       	movw	r0, r24
    a4f0:	ca 01       	movw	r24, r20
    a4f2:	a0 01       	movw	r20, r0
    a4f4:	11 24       	eor	r1, r1
    a4f6:	ff 27       	eor	r31, r31
    a4f8:	59 1b       	sub	r21, r25
    a4fa:	99 f0       	breq	.+38     	; 0xa522 <__addsf3x+0x5c>
    a4fc:	59 3f       	cpi	r21, 0xF9	; 249
    a4fe:	50 f4       	brcc	.+20     	; 0xa514 <__addsf3x+0x4e>
    a500:	50 3e       	cpi	r21, 0xE0	; 224
    a502:	68 f1       	brcs	.+90     	; 0xa55e <__addsf3x+0x98>
    a504:	1a 16       	cp	r1, r26
    a506:	f0 40       	sbci	r31, 0x00	; 0
    a508:	a2 2f       	mov	r26, r18
    a50a:	23 2f       	mov	r18, r19
    a50c:	34 2f       	mov	r19, r20
    a50e:	44 27       	eor	r20, r20
    a510:	58 5f       	subi	r21, 0xF8	; 248
    a512:	f3 cf       	rjmp	.-26     	; 0xa4fa <__addsf3x+0x34>
    a514:	46 95       	lsr	r20
    a516:	37 95       	ror	r19
    a518:	27 95       	ror	r18
    a51a:	a7 95       	ror	r26
    a51c:	f0 40       	sbci	r31, 0x00	; 0
    a51e:	53 95       	inc	r21
    a520:	c9 f7       	brne	.-14     	; 0xa514 <__addsf3x+0x4e>
    a522:	7e f4       	brtc	.+30     	; 0xa542 <__addsf3x+0x7c>
    a524:	1f 16       	cp	r1, r31
    a526:	ba 0b       	sbc	r27, r26
    a528:	62 0b       	sbc	r22, r18
    a52a:	73 0b       	sbc	r23, r19
    a52c:	84 0b       	sbc	r24, r20
    a52e:	ba f0       	brmi	.+46     	; 0xa55e <__addsf3x+0x98>
    a530:	91 50       	subi	r25, 0x01	; 1
    a532:	a1 f0       	breq	.+40     	; 0xa55c <__addsf3x+0x96>
    a534:	ff 0f       	add	r31, r31
    a536:	bb 1f       	adc	r27, r27
    a538:	66 1f       	adc	r22, r22
    a53a:	77 1f       	adc	r23, r23
    a53c:	88 1f       	adc	r24, r24
    a53e:	c2 f7       	brpl	.-16     	; 0xa530 <__addsf3x+0x6a>
    a540:	0e c0       	rjmp	.+28     	; 0xa55e <__addsf3x+0x98>
    a542:	ba 0f       	add	r27, r26
    a544:	62 1f       	adc	r22, r18
    a546:	73 1f       	adc	r23, r19
    a548:	84 1f       	adc	r24, r20
    a54a:	48 f4       	brcc	.+18     	; 0xa55e <__addsf3x+0x98>
    a54c:	87 95       	ror	r24
    a54e:	77 95       	ror	r23
    a550:	67 95       	ror	r22
    a552:	b7 95       	ror	r27
    a554:	f7 95       	ror	r31
    a556:	9e 3f       	cpi	r25, 0xFE	; 254
    a558:	08 f0       	brcs	.+2      	; 0xa55c <__addsf3x+0x96>
    a55a:	b3 cf       	rjmp	.-154    	; 0xa4c2 <__addsf3+0x1e>
    a55c:	93 95       	inc	r25
    a55e:	88 0f       	add	r24, r24
    a560:	08 f0       	brcs	.+2      	; 0xa564 <__addsf3x+0x9e>
    a562:	99 27       	eor	r25, r25
    a564:	ee 0f       	add	r30, r30
    a566:	97 95       	ror	r25
    a568:	87 95       	ror	r24
    a56a:	08 95       	ret

0000a56c <__cmpsf2>:
    a56c:	d9 d0       	rcall	.+434    	; 0xa720 <__fp_cmp>
    a56e:	08 f4       	brcc	.+2      	; 0xa572 <__cmpsf2+0x6>
    a570:	81 e0       	ldi	r24, 0x01	; 1
    a572:	08 95       	ret

0000a574 <__divsf3>:
    a574:	0c d0       	rcall	.+24     	; 0xa58e <__divsf3x>
    a576:	0f c1       	rjmp	.+542    	; 0xa796 <__fp_round>
    a578:	07 d1       	rcall	.+526    	; 0xa788 <__fp_pscB>
    a57a:	40 f0       	brcs	.+16     	; 0xa58c <__divsf3+0x18>
    a57c:	fe d0       	rcall	.+508    	; 0xa77a <__fp_pscA>
    a57e:	30 f0       	brcs	.+12     	; 0xa58c <__divsf3+0x18>
    a580:	21 f4       	brne	.+8      	; 0xa58a <__divsf3+0x16>
    a582:	5f 3f       	cpi	r21, 0xFF	; 255
    a584:	19 f0       	breq	.+6      	; 0xa58c <__divsf3+0x18>
    a586:	f0 c0       	rjmp	.+480    	; 0xa768 <__fp_inf>
    a588:	51 11       	cpse	r21, r1
    a58a:	39 c1       	rjmp	.+626    	; 0xa7fe <__fp_szero>
    a58c:	f3 c0       	rjmp	.+486    	; 0xa774 <__fp_nan>

0000a58e <__divsf3x>:
    a58e:	14 d1       	rcall	.+552    	; 0xa7b8 <__fp_split3>
    a590:	98 f3       	brcs	.-26     	; 0xa578 <__divsf3+0x4>

0000a592 <__divsf3_pse>:
    a592:	99 23       	and	r25, r25
    a594:	c9 f3       	breq	.-14     	; 0xa588 <__divsf3+0x14>
    a596:	55 23       	and	r21, r21
    a598:	b1 f3       	breq	.-20     	; 0xa586 <__divsf3+0x12>
    a59a:	95 1b       	sub	r25, r21
    a59c:	55 0b       	sbc	r21, r21
    a59e:	bb 27       	eor	r27, r27
    a5a0:	aa 27       	eor	r26, r26
    a5a2:	62 17       	cp	r22, r18
    a5a4:	73 07       	cpc	r23, r19
    a5a6:	84 07       	cpc	r24, r20
    a5a8:	38 f0       	brcs	.+14     	; 0xa5b8 <__divsf3_pse+0x26>
    a5aa:	9f 5f       	subi	r25, 0xFF	; 255
    a5ac:	5f 4f       	sbci	r21, 0xFF	; 255
    a5ae:	22 0f       	add	r18, r18
    a5b0:	33 1f       	adc	r19, r19
    a5b2:	44 1f       	adc	r20, r20
    a5b4:	aa 1f       	adc	r26, r26
    a5b6:	a9 f3       	breq	.-22     	; 0xa5a2 <__divsf3_pse+0x10>
    a5b8:	33 d0       	rcall	.+102    	; 0xa620 <__divsf3_pse+0x8e>
    a5ba:	0e 2e       	mov	r0, r30
    a5bc:	3a f0       	brmi	.+14     	; 0xa5cc <__divsf3_pse+0x3a>
    a5be:	e0 e8       	ldi	r30, 0x80	; 128
    a5c0:	30 d0       	rcall	.+96     	; 0xa622 <__divsf3_pse+0x90>
    a5c2:	91 50       	subi	r25, 0x01	; 1
    a5c4:	50 40       	sbci	r21, 0x00	; 0
    a5c6:	e6 95       	lsr	r30
    a5c8:	00 1c       	adc	r0, r0
    a5ca:	ca f7       	brpl	.-14     	; 0xa5be <__divsf3_pse+0x2c>
    a5cc:	29 d0       	rcall	.+82     	; 0xa620 <__divsf3_pse+0x8e>
    a5ce:	fe 2f       	mov	r31, r30
    a5d0:	27 d0       	rcall	.+78     	; 0xa620 <__divsf3_pse+0x8e>
    a5d2:	66 0f       	add	r22, r22
    a5d4:	77 1f       	adc	r23, r23
    a5d6:	88 1f       	adc	r24, r24
    a5d8:	bb 1f       	adc	r27, r27
    a5da:	26 17       	cp	r18, r22
    a5dc:	37 07       	cpc	r19, r23
    a5de:	48 07       	cpc	r20, r24
    a5e0:	ab 07       	cpc	r26, r27
    a5e2:	b0 e8       	ldi	r27, 0x80	; 128
    a5e4:	09 f0       	breq	.+2      	; 0xa5e8 <__divsf3_pse+0x56>
    a5e6:	bb 0b       	sbc	r27, r27
    a5e8:	80 2d       	mov	r24, r0
    a5ea:	bf 01       	movw	r22, r30
    a5ec:	ff 27       	eor	r31, r31
    a5ee:	93 58       	subi	r25, 0x83	; 131
    a5f0:	5f 4f       	sbci	r21, 0xFF	; 255
    a5f2:	2a f0       	brmi	.+10     	; 0xa5fe <__divsf3_pse+0x6c>
    a5f4:	9e 3f       	cpi	r25, 0xFE	; 254
    a5f6:	51 05       	cpc	r21, r1
    a5f8:	68 f0       	brcs	.+26     	; 0xa614 <__divsf3_pse+0x82>
    a5fa:	b6 c0       	rjmp	.+364    	; 0xa768 <__fp_inf>
    a5fc:	00 c1       	rjmp	.+512    	; 0xa7fe <__fp_szero>
    a5fe:	5f 3f       	cpi	r21, 0xFF	; 255
    a600:	ec f3       	brlt	.-6      	; 0xa5fc <__divsf3_pse+0x6a>
    a602:	98 3e       	cpi	r25, 0xE8	; 232
    a604:	dc f3       	brlt	.-10     	; 0xa5fc <__divsf3_pse+0x6a>
    a606:	86 95       	lsr	r24
    a608:	77 95       	ror	r23
    a60a:	67 95       	ror	r22
    a60c:	b7 95       	ror	r27
    a60e:	f7 95       	ror	r31
    a610:	9f 5f       	subi	r25, 0xFF	; 255
    a612:	c9 f7       	brne	.-14     	; 0xa606 <__divsf3_pse+0x74>
    a614:	88 0f       	add	r24, r24
    a616:	91 1d       	adc	r25, r1
    a618:	96 95       	lsr	r25
    a61a:	87 95       	ror	r24
    a61c:	97 f9       	bld	r25, 7
    a61e:	08 95       	ret
    a620:	e1 e0       	ldi	r30, 0x01	; 1
    a622:	66 0f       	add	r22, r22
    a624:	77 1f       	adc	r23, r23
    a626:	88 1f       	adc	r24, r24
    a628:	bb 1f       	adc	r27, r27
    a62a:	62 17       	cp	r22, r18
    a62c:	73 07       	cpc	r23, r19
    a62e:	84 07       	cpc	r24, r20
    a630:	ba 07       	cpc	r27, r26
    a632:	20 f0       	brcs	.+8      	; 0xa63c <__divsf3_pse+0xaa>
    a634:	62 1b       	sub	r22, r18
    a636:	73 0b       	sbc	r23, r19
    a638:	84 0b       	sbc	r24, r20
    a63a:	ba 0b       	sbc	r27, r26
    a63c:	ee 1f       	adc	r30, r30
    a63e:	88 f7       	brcc	.-30     	; 0xa622 <__divsf3_pse+0x90>
    a640:	e0 95       	com	r30
    a642:	08 95       	ret

0000a644 <__fixsfsi>:
    a644:	04 d0       	rcall	.+8      	; 0xa64e <__fixunssfsi>
    a646:	68 94       	set
    a648:	b1 11       	cpse	r27, r1
    a64a:	d9 c0       	rjmp	.+434    	; 0xa7fe <__fp_szero>
    a64c:	08 95       	ret

0000a64e <__fixunssfsi>:
    a64e:	bc d0       	rcall	.+376    	; 0xa7c8 <__fp_splitA>
    a650:	88 f0       	brcs	.+34     	; 0xa674 <__fixunssfsi+0x26>
    a652:	9f 57       	subi	r25, 0x7F	; 127
    a654:	90 f0       	brcs	.+36     	; 0xa67a <__fixunssfsi+0x2c>
    a656:	b9 2f       	mov	r27, r25
    a658:	99 27       	eor	r25, r25
    a65a:	b7 51       	subi	r27, 0x17	; 23
    a65c:	a0 f0       	brcs	.+40     	; 0xa686 <__fixunssfsi+0x38>
    a65e:	d1 f0       	breq	.+52     	; 0xa694 <__fixunssfsi+0x46>
    a660:	66 0f       	add	r22, r22
    a662:	77 1f       	adc	r23, r23
    a664:	88 1f       	adc	r24, r24
    a666:	99 1f       	adc	r25, r25
    a668:	1a f0       	brmi	.+6      	; 0xa670 <__fixunssfsi+0x22>
    a66a:	ba 95       	dec	r27
    a66c:	c9 f7       	brne	.-14     	; 0xa660 <__fixunssfsi+0x12>
    a66e:	12 c0       	rjmp	.+36     	; 0xa694 <__fixunssfsi+0x46>
    a670:	b1 30       	cpi	r27, 0x01	; 1
    a672:	81 f0       	breq	.+32     	; 0xa694 <__fixunssfsi+0x46>
    a674:	c3 d0       	rcall	.+390    	; 0xa7fc <__fp_zero>
    a676:	b1 e0       	ldi	r27, 0x01	; 1
    a678:	08 95       	ret
    a67a:	c0 c0       	rjmp	.+384    	; 0xa7fc <__fp_zero>
    a67c:	67 2f       	mov	r22, r23
    a67e:	78 2f       	mov	r23, r24
    a680:	88 27       	eor	r24, r24
    a682:	b8 5f       	subi	r27, 0xF8	; 248
    a684:	39 f0       	breq	.+14     	; 0xa694 <__fixunssfsi+0x46>
    a686:	b9 3f       	cpi	r27, 0xF9	; 249
    a688:	cc f3       	brlt	.-14     	; 0xa67c <__fixunssfsi+0x2e>
    a68a:	86 95       	lsr	r24
    a68c:	77 95       	ror	r23
    a68e:	67 95       	ror	r22
    a690:	b3 95       	inc	r27
    a692:	d9 f7       	brne	.-10     	; 0xa68a <__fixunssfsi+0x3c>
    a694:	3e f4       	brtc	.+14     	; 0xa6a4 <__fixunssfsi+0x56>
    a696:	90 95       	com	r25
    a698:	80 95       	com	r24
    a69a:	70 95       	com	r23
    a69c:	61 95       	neg	r22
    a69e:	7f 4f       	sbci	r23, 0xFF	; 255
    a6a0:	8f 4f       	sbci	r24, 0xFF	; 255
    a6a2:	9f 4f       	sbci	r25, 0xFF	; 255
    a6a4:	08 95       	ret

0000a6a6 <__floatunsisf>:
    a6a6:	e8 94       	clt
    a6a8:	09 c0       	rjmp	.+18     	; 0xa6bc <__floatsisf+0x12>

0000a6aa <__floatsisf>:
    a6aa:	97 fb       	bst	r25, 7
    a6ac:	3e f4       	brtc	.+14     	; 0xa6bc <__floatsisf+0x12>
    a6ae:	90 95       	com	r25
    a6b0:	80 95       	com	r24
    a6b2:	70 95       	com	r23
    a6b4:	61 95       	neg	r22
    a6b6:	7f 4f       	sbci	r23, 0xFF	; 255
    a6b8:	8f 4f       	sbci	r24, 0xFF	; 255
    a6ba:	9f 4f       	sbci	r25, 0xFF	; 255
    a6bc:	99 23       	and	r25, r25
    a6be:	a9 f0       	breq	.+42     	; 0xa6ea <__floatsisf+0x40>
    a6c0:	f9 2f       	mov	r31, r25
    a6c2:	96 e9       	ldi	r25, 0x96	; 150
    a6c4:	bb 27       	eor	r27, r27
    a6c6:	93 95       	inc	r25
    a6c8:	f6 95       	lsr	r31
    a6ca:	87 95       	ror	r24
    a6cc:	77 95       	ror	r23
    a6ce:	67 95       	ror	r22
    a6d0:	b7 95       	ror	r27
    a6d2:	f1 11       	cpse	r31, r1
    a6d4:	f8 cf       	rjmp	.-16     	; 0xa6c6 <__floatsisf+0x1c>
    a6d6:	fa f4       	brpl	.+62     	; 0xa716 <__floatsisf+0x6c>
    a6d8:	bb 0f       	add	r27, r27
    a6da:	11 f4       	brne	.+4      	; 0xa6e0 <__floatsisf+0x36>
    a6dc:	60 ff       	sbrs	r22, 0
    a6de:	1b c0       	rjmp	.+54     	; 0xa716 <__floatsisf+0x6c>
    a6e0:	6f 5f       	subi	r22, 0xFF	; 255
    a6e2:	7f 4f       	sbci	r23, 0xFF	; 255
    a6e4:	8f 4f       	sbci	r24, 0xFF	; 255
    a6e6:	9f 4f       	sbci	r25, 0xFF	; 255
    a6e8:	16 c0       	rjmp	.+44     	; 0xa716 <__floatsisf+0x6c>
    a6ea:	88 23       	and	r24, r24
    a6ec:	11 f0       	breq	.+4      	; 0xa6f2 <__floatsisf+0x48>
    a6ee:	96 e9       	ldi	r25, 0x96	; 150
    a6f0:	11 c0       	rjmp	.+34     	; 0xa714 <__floatsisf+0x6a>
    a6f2:	77 23       	and	r23, r23
    a6f4:	21 f0       	breq	.+8      	; 0xa6fe <__floatsisf+0x54>
    a6f6:	9e e8       	ldi	r25, 0x8E	; 142
    a6f8:	87 2f       	mov	r24, r23
    a6fa:	76 2f       	mov	r23, r22
    a6fc:	05 c0       	rjmp	.+10     	; 0xa708 <__floatsisf+0x5e>
    a6fe:	66 23       	and	r22, r22
    a700:	71 f0       	breq	.+28     	; 0xa71e <__floatsisf+0x74>
    a702:	96 e8       	ldi	r25, 0x86	; 134
    a704:	86 2f       	mov	r24, r22
    a706:	70 e0       	ldi	r23, 0x00	; 0
    a708:	60 e0       	ldi	r22, 0x00	; 0
    a70a:	2a f0       	brmi	.+10     	; 0xa716 <__floatsisf+0x6c>
    a70c:	9a 95       	dec	r25
    a70e:	66 0f       	add	r22, r22
    a710:	77 1f       	adc	r23, r23
    a712:	88 1f       	adc	r24, r24
    a714:	da f7       	brpl	.-10     	; 0xa70c <__floatsisf+0x62>
    a716:	88 0f       	add	r24, r24
    a718:	96 95       	lsr	r25
    a71a:	87 95       	ror	r24
    a71c:	97 f9       	bld	r25, 7
    a71e:	08 95       	ret

0000a720 <__fp_cmp>:
    a720:	99 0f       	add	r25, r25
    a722:	00 08       	sbc	r0, r0
    a724:	55 0f       	add	r21, r21
    a726:	aa 0b       	sbc	r26, r26
    a728:	e0 e8       	ldi	r30, 0x80	; 128
    a72a:	fe ef       	ldi	r31, 0xFE	; 254
    a72c:	16 16       	cp	r1, r22
    a72e:	17 06       	cpc	r1, r23
    a730:	e8 07       	cpc	r30, r24
    a732:	f9 07       	cpc	r31, r25
    a734:	c0 f0       	brcs	.+48     	; 0xa766 <__fp_cmp+0x46>
    a736:	12 16       	cp	r1, r18
    a738:	13 06       	cpc	r1, r19
    a73a:	e4 07       	cpc	r30, r20
    a73c:	f5 07       	cpc	r31, r21
    a73e:	98 f0       	brcs	.+38     	; 0xa766 <__fp_cmp+0x46>
    a740:	62 1b       	sub	r22, r18
    a742:	73 0b       	sbc	r23, r19
    a744:	84 0b       	sbc	r24, r20
    a746:	95 0b       	sbc	r25, r21
    a748:	39 f4       	brne	.+14     	; 0xa758 <__fp_cmp+0x38>
    a74a:	0a 26       	eor	r0, r26
    a74c:	61 f0       	breq	.+24     	; 0xa766 <__fp_cmp+0x46>
    a74e:	23 2b       	or	r18, r19
    a750:	24 2b       	or	r18, r20
    a752:	25 2b       	or	r18, r21
    a754:	21 f4       	brne	.+8      	; 0xa75e <__fp_cmp+0x3e>
    a756:	08 95       	ret
    a758:	0a 26       	eor	r0, r26
    a75a:	09 f4       	brne	.+2      	; 0xa75e <__fp_cmp+0x3e>
    a75c:	a1 40       	sbci	r26, 0x01	; 1
    a75e:	a6 95       	lsr	r26
    a760:	8f ef       	ldi	r24, 0xFF	; 255
    a762:	81 1d       	adc	r24, r1
    a764:	81 1d       	adc	r24, r1
    a766:	08 95       	ret

0000a768 <__fp_inf>:
    a768:	97 f9       	bld	r25, 7
    a76a:	9f 67       	ori	r25, 0x7F	; 127
    a76c:	80 e8       	ldi	r24, 0x80	; 128
    a76e:	70 e0       	ldi	r23, 0x00	; 0
    a770:	60 e0       	ldi	r22, 0x00	; 0
    a772:	08 95       	ret

0000a774 <__fp_nan>:
    a774:	9f ef       	ldi	r25, 0xFF	; 255
    a776:	80 ec       	ldi	r24, 0xC0	; 192
    a778:	08 95       	ret

0000a77a <__fp_pscA>:
    a77a:	00 24       	eor	r0, r0
    a77c:	0a 94       	dec	r0
    a77e:	16 16       	cp	r1, r22
    a780:	17 06       	cpc	r1, r23
    a782:	18 06       	cpc	r1, r24
    a784:	09 06       	cpc	r0, r25
    a786:	08 95       	ret

0000a788 <__fp_pscB>:
    a788:	00 24       	eor	r0, r0
    a78a:	0a 94       	dec	r0
    a78c:	12 16       	cp	r1, r18
    a78e:	13 06       	cpc	r1, r19
    a790:	14 06       	cpc	r1, r20
    a792:	05 06       	cpc	r0, r21
    a794:	08 95       	ret

0000a796 <__fp_round>:
    a796:	09 2e       	mov	r0, r25
    a798:	03 94       	inc	r0
    a79a:	00 0c       	add	r0, r0
    a79c:	11 f4       	brne	.+4      	; 0xa7a2 <__fp_round+0xc>
    a79e:	88 23       	and	r24, r24
    a7a0:	52 f0       	brmi	.+20     	; 0xa7b6 <__fp_round+0x20>
    a7a2:	bb 0f       	add	r27, r27
    a7a4:	40 f4       	brcc	.+16     	; 0xa7b6 <__fp_round+0x20>
    a7a6:	bf 2b       	or	r27, r31
    a7a8:	11 f4       	brne	.+4      	; 0xa7ae <__fp_round+0x18>
    a7aa:	60 ff       	sbrs	r22, 0
    a7ac:	04 c0       	rjmp	.+8      	; 0xa7b6 <__fp_round+0x20>
    a7ae:	6f 5f       	subi	r22, 0xFF	; 255
    a7b0:	7f 4f       	sbci	r23, 0xFF	; 255
    a7b2:	8f 4f       	sbci	r24, 0xFF	; 255
    a7b4:	9f 4f       	sbci	r25, 0xFF	; 255
    a7b6:	08 95       	ret

0000a7b8 <__fp_split3>:
    a7b8:	57 fd       	sbrc	r21, 7
    a7ba:	90 58       	subi	r25, 0x80	; 128
    a7bc:	44 0f       	add	r20, r20
    a7be:	55 1f       	adc	r21, r21
    a7c0:	59 f0       	breq	.+22     	; 0xa7d8 <__fp_splitA+0x10>
    a7c2:	5f 3f       	cpi	r21, 0xFF	; 255
    a7c4:	71 f0       	breq	.+28     	; 0xa7e2 <__fp_splitA+0x1a>
    a7c6:	47 95       	ror	r20

0000a7c8 <__fp_splitA>:
    a7c8:	88 0f       	add	r24, r24
    a7ca:	97 fb       	bst	r25, 7
    a7cc:	99 1f       	adc	r25, r25
    a7ce:	61 f0       	breq	.+24     	; 0xa7e8 <__fp_splitA+0x20>
    a7d0:	9f 3f       	cpi	r25, 0xFF	; 255
    a7d2:	79 f0       	breq	.+30     	; 0xa7f2 <__fp_splitA+0x2a>
    a7d4:	87 95       	ror	r24
    a7d6:	08 95       	ret
    a7d8:	12 16       	cp	r1, r18
    a7da:	13 06       	cpc	r1, r19
    a7dc:	14 06       	cpc	r1, r20
    a7de:	55 1f       	adc	r21, r21
    a7e0:	f2 cf       	rjmp	.-28     	; 0xa7c6 <__fp_split3+0xe>
    a7e2:	46 95       	lsr	r20
    a7e4:	f1 df       	rcall	.-30     	; 0xa7c8 <__fp_splitA>
    a7e6:	08 c0       	rjmp	.+16     	; 0xa7f8 <__fp_splitA+0x30>
    a7e8:	16 16       	cp	r1, r22
    a7ea:	17 06       	cpc	r1, r23
    a7ec:	18 06       	cpc	r1, r24
    a7ee:	99 1f       	adc	r25, r25
    a7f0:	f1 cf       	rjmp	.-30     	; 0xa7d4 <__fp_splitA+0xc>
    a7f2:	86 95       	lsr	r24
    a7f4:	71 05       	cpc	r23, r1
    a7f6:	61 05       	cpc	r22, r1
    a7f8:	08 94       	sec
    a7fa:	08 95       	ret

0000a7fc <__fp_zero>:
    a7fc:	e8 94       	clt

0000a7fe <__fp_szero>:
    a7fe:	bb 27       	eor	r27, r27
    a800:	66 27       	eor	r22, r22
    a802:	77 27       	eor	r23, r23
    a804:	cb 01       	movw	r24, r22
    a806:	97 f9       	bld	r25, 7
    a808:	08 95       	ret

0000a80a <__gesf2>:
    a80a:	8a df       	rcall	.-236    	; 0xa720 <__fp_cmp>
    a80c:	08 f4       	brcc	.+2      	; 0xa810 <__gesf2+0x6>
    a80e:	8f ef       	ldi	r24, 0xFF	; 255
    a810:	08 95       	ret
    a812:	0e f0       	brts	.+2      	; 0xa816 <__gesf2+0xc>
    a814:	a6 c0       	rjmp	.+332    	; 0xa962 <__fp_mpack>
    a816:	ae cf       	rjmp	.-164    	; 0xa774 <__fp_nan>
    a818:	68 94       	set
    a81a:	a6 cf       	rjmp	.-180    	; 0xa768 <__fp_inf>

0000a81c <log>:
    a81c:	d5 df       	rcall	.-86     	; 0xa7c8 <__fp_splitA>
    a81e:	c8 f3       	brcs	.-14     	; 0xa812 <__gesf2+0x8>
    a820:	99 23       	and	r25, r25
    a822:	d1 f3       	breq	.-12     	; 0xa818 <__gesf2+0xe>
    a824:	c6 f3       	brts	.-16     	; 0xa816 <__gesf2+0xc>
    a826:	df 93       	push	r29
    a828:	cf 93       	push	r28
    a82a:	1f 93       	push	r17
    a82c:	0f 93       	push	r16
    a82e:	ff 92       	push	r15
    a830:	c9 2f       	mov	r28, r25
    a832:	dd 27       	eor	r29, r29
    a834:	88 23       	and	r24, r24
    a836:	2a f0       	brmi	.+10     	; 0xa842 <log+0x26>
    a838:	21 97       	sbiw	r28, 0x01	; 1
    a83a:	66 0f       	add	r22, r22
    a83c:	77 1f       	adc	r23, r23
    a83e:	88 1f       	adc	r24, r24
    a840:	da f7       	brpl	.-10     	; 0xa838 <log+0x1c>
    a842:	20 e0       	ldi	r18, 0x00	; 0
    a844:	30 e0       	ldi	r19, 0x00	; 0
    a846:	40 e8       	ldi	r20, 0x80	; 128
    a848:	5f eb       	ldi	r21, 0xBF	; 191
    a84a:	9f e3       	ldi	r25, 0x3F	; 63
    a84c:	88 39       	cpi	r24, 0x98	; 152
    a84e:	20 f0       	brcs	.+8      	; 0xa858 <log+0x3c>
    a850:	80 3e       	cpi	r24, 0xE0	; 224
    a852:	30 f0       	brcs	.+12     	; 0xa860 <log+0x44>
    a854:	21 96       	adiw	r28, 0x01	; 1
    a856:	8f 77       	andi	r24, 0x7F	; 127
    a858:	25 de       	rcall	.-950    	; 0xa4a4 <__addsf3>
    a85a:	e4 e9       	ldi	r30, 0x94	; 148
    a85c:	f8 e0       	ldi	r31, 0x08	; 8
    a85e:	03 c0       	rjmp	.+6      	; 0xa866 <log+0x4a>
    a860:	21 de       	rcall	.-958    	; 0xa4a4 <__addsf3>
    a862:	e1 ec       	ldi	r30, 0xC1	; 193
    a864:	f8 e0       	ldi	r31, 0x08	; 8
    a866:	8b d0       	rcall	.+278    	; 0xa97e <__fp_powser>
    a868:	8b 01       	movw	r16, r22
    a86a:	be 01       	movw	r22, r28
    a86c:	ec 01       	movw	r28, r24
    a86e:	fb 2e       	mov	r15, r27
    a870:	6f 57       	subi	r22, 0x7F	; 127
    a872:	71 09       	sbc	r23, r1
    a874:	75 95       	asr	r23
    a876:	77 1f       	adc	r23, r23
    a878:	88 0b       	sbc	r24, r24
    a87a:	99 0b       	sbc	r25, r25
    a87c:	16 df       	rcall	.-468    	; 0xa6aa <__floatsisf>
    a87e:	28 e1       	ldi	r18, 0x18	; 24
    a880:	32 e7       	ldi	r19, 0x72	; 114
    a882:	41 e3       	ldi	r20, 0x31	; 49
    a884:	5f e3       	ldi	r21, 0x3F	; 63
    a886:	16 d0       	rcall	.+44     	; 0xa8b4 <__mulsf3x>
    a888:	af 2d       	mov	r26, r15
    a88a:	98 01       	movw	r18, r16
    a88c:	ae 01       	movw	r20, r28
    a88e:	ff 90       	pop	r15
    a890:	0f 91       	pop	r16
    a892:	1f 91       	pop	r17
    a894:	cf 91       	pop	r28
    a896:	df 91       	pop	r29
    a898:	16 de       	rcall	.-980    	; 0xa4c6 <__addsf3x>
    a89a:	7d cf       	rjmp	.-262    	; 0xa796 <__fp_round>

0000a89c <__mulsf3>:
    a89c:	0b d0       	rcall	.+22     	; 0xa8b4 <__mulsf3x>
    a89e:	7b cf       	rjmp	.-266    	; 0xa796 <__fp_round>
    a8a0:	6c df       	rcall	.-296    	; 0xa77a <__fp_pscA>
    a8a2:	28 f0       	brcs	.+10     	; 0xa8ae <__mulsf3+0x12>
    a8a4:	71 df       	rcall	.-286    	; 0xa788 <__fp_pscB>
    a8a6:	18 f0       	brcs	.+6      	; 0xa8ae <__mulsf3+0x12>
    a8a8:	95 23       	and	r25, r21
    a8aa:	09 f0       	breq	.+2      	; 0xa8ae <__mulsf3+0x12>
    a8ac:	5d cf       	rjmp	.-326    	; 0xa768 <__fp_inf>
    a8ae:	62 cf       	rjmp	.-316    	; 0xa774 <__fp_nan>
    a8b0:	11 24       	eor	r1, r1
    a8b2:	a5 cf       	rjmp	.-182    	; 0xa7fe <__fp_szero>

0000a8b4 <__mulsf3x>:
    a8b4:	81 df       	rcall	.-254    	; 0xa7b8 <__fp_split3>
    a8b6:	a0 f3       	brcs	.-24     	; 0xa8a0 <__mulsf3+0x4>

0000a8b8 <__mulsf3_pse>:
    a8b8:	95 9f       	mul	r25, r21
    a8ba:	d1 f3       	breq	.-12     	; 0xa8b0 <__mulsf3+0x14>
    a8bc:	95 0f       	add	r25, r21
    a8be:	50 e0       	ldi	r21, 0x00	; 0
    a8c0:	55 1f       	adc	r21, r21
    a8c2:	62 9f       	mul	r22, r18
    a8c4:	f0 01       	movw	r30, r0
    a8c6:	72 9f       	mul	r23, r18
    a8c8:	bb 27       	eor	r27, r27
    a8ca:	f0 0d       	add	r31, r0
    a8cc:	b1 1d       	adc	r27, r1
    a8ce:	63 9f       	mul	r22, r19
    a8d0:	aa 27       	eor	r26, r26
    a8d2:	f0 0d       	add	r31, r0
    a8d4:	b1 1d       	adc	r27, r1
    a8d6:	aa 1f       	adc	r26, r26
    a8d8:	64 9f       	mul	r22, r20
    a8da:	66 27       	eor	r22, r22
    a8dc:	b0 0d       	add	r27, r0
    a8de:	a1 1d       	adc	r26, r1
    a8e0:	66 1f       	adc	r22, r22
    a8e2:	82 9f       	mul	r24, r18
    a8e4:	22 27       	eor	r18, r18
    a8e6:	b0 0d       	add	r27, r0
    a8e8:	a1 1d       	adc	r26, r1
    a8ea:	62 1f       	adc	r22, r18
    a8ec:	73 9f       	mul	r23, r19
    a8ee:	b0 0d       	add	r27, r0
    a8f0:	a1 1d       	adc	r26, r1
    a8f2:	62 1f       	adc	r22, r18
    a8f4:	83 9f       	mul	r24, r19
    a8f6:	a0 0d       	add	r26, r0
    a8f8:	61 1d       	adc	r22, r1
    a8fa:	22 1f       	adc	r18, r18
    a8fc:	74 9f       	mul	r23, r20
    a8fe:	33 27       	eor	r19, r19
    a900:	a0 0d       	add	r26, r0
    a902:	61 1d       	adc	r22, r1
    a904:	23 1f       	adc	r18, r19
    a906:	84 9f       	mul	r24, r20
    a908:	60 0d       	add	r22, r0
    a90a:	21 1d       	adc	r18, r1
    a90c:	82 2f       	mov	r24, r18
    a90e:	76 2f       	mov	r23, r22
    a910:	6a 2f       	mov	r22, r26
    a912:	11 24       	eor	r1, r1
    a914:	9f 57       	subi	r25, 0x7F	; 127
    a916:	50 40       	sbci	r21, 0x00	; 0
    a918:	8a f0       	brmi	.+34     	; 0xa93c <__mulsf3_pse+0x84>
    a91a:	e1 f0       	breq	.+56     	; 0xa954 <__mulsf3_pse+0x9c>
    a91c:	88 23       	and	r24, r24
    a91e:	4a f0       	brmi	.+18     	; 0xa932 <__mulsf3_pse+0x7a>
    a920:	ee 0f       	add	r30, r30
    a922:	ff 1f       	adc	r31, r31
    a924:	bb 1f       	adc	r27, r27
    a926:	66 1f       	adc	r22, r22
    a928:	77 1f       	adc	r23, r23
    a92a:	88 1f       	adc	r24, r24
    a92c:	91 50       	subi	r25, 0x01	; 1
    a92e:	50 40       	sbci	r21, 0x00	; 0
    a930:	a9 f7       	brne	.-22     	; 0xa91c <__mulsf3_pse+0x64>
    a932:	9e 3f       	cpi	r25, 0xFE	; 254
    a934:	51 05       	cpc	r21, r1
    a936:	70 f0       	brcs	.+28     	; 0xa954 <__mulsf3_pse+0x9c>
    a938:	17 cf       	rjmp	.-466    	; 0xa768 <__fp_inf>
    a93a:	61 cf       	rjmp	.-318    	; 0xa7fe <__fp_szero>
    a93c:	5f 3f       	cpi	r21, 0xFF	; 255
    a93e:	ec f3       	brlt	.-6      	; 0xa93a <__mulsf3_pse+0x82>
    a940:	98 3e       	cpi	r25, 0xE8	; 232
    a942:	dc f3       	brlt	.-10     	; 0xa93a <__mulsf3_pse+0x82>
    a944:	86 95       	lsr	r24
    a946:	77 95       	ror	r23
    a948:	67 95       	ror	r22
    a94a:	b7 95       	ror	r27
    a94c:	f7 95       	ror	r31
    a94e:	e7 95       	ror	r30
    a950:	9f 5f       	subi	r25, 0xFF	; 255
    a952:	c1 f7       	brne	.-16     	; 0xa944 <__mulsf3_pse+0x8c>
    a954:	fe 2b       	or	r31, r30
    a956:	88 0f       	add	r24, r24
    a958:	91 1d       	adc	r25, r1
    a95a:	96 95       	lsr	r25
    a95c:	87 95       	ror	r24
    a95e:	97 f9       	bld	r25, 7
    a960:	08 95       	ret

0000a962 <__fp_mpack>:
    a962:	9f 3f       	cpi	r25, 0xFF	; 255
    a964:	31 f0       	breq	.+12     	; 0xa972 <__fp_mpack_finite+0xc>

0000a966 <__fp_mpack_finite>:
    a966:	91 50       	subi	r25, 0x01	; 1
    a968:	20 f4       	brcc	.+8      	; 0xa972 <__fp_mpack_finite+0xc>
    a96a:	87 95       	ror	r24
    a96c:	77 95       	ror	r23
    a96e:	67 95       	ror	r22
    a970:	b7 95       	ror	r27
    a972:	88 0f       	add	r24, r24
    a974:	91 1d       	adc	r25, r1
    a976:	96 95       	lsr	r25
    a978:	87 95       	ror	r24
    a97a:	97 f9       	bld	r25, 7
    a97c:	08 95       	ret

0000a97e <__fp_powser>:
    a97e:	df 93       	push	r29
    a980:	cf 93       	push	r28
    a982:	1f 93       	push	r17
    a984:	0f 93       	push	r16
    a986:	ff 92       	push	r15
    a988:	ef 92       	push	r14
    a98a:	df 92       	push	r13
    a98c:	7b 01       	movw	r14, r22
    a98e:	8c 01       	movw	r16, r24
    a990:	68 94       	set
    a992:	05 c0       	rjmp	.+10     	; 0xa99e <__fp_powser+0x20>
    a994:	da 2e       	mov	r13, r26
    a996:	ef 01       	movw	r28, r30
    a998:	8d df       	rcall	.-230    	; 0xa8b4 <__mulsf3x>
    a99a:	fe 01       	movw	r30, r28
    a99c:	e8 94       	clt
    a99e:	a5 91       	lpm	r26, Z+
    a9a0:	25 91       	lpm	r18, Z+
    a9a2:	35 91       	lpm	r19, Z+
    a9a4:	45 91       	lpm	r20, Z+
    a9a6:	55 91       	lpm	r21, Z+
    a9a8:	ae f3       	brts	.-22     	; 0xa994 <__fp_powser+0x16>
    a9aa:	ef 01       	movw	r28, r30
    a9ac:	8c dd       	rcall	.-1256   	; 0xa4c6 <__addsf3x>
    a9ae:	fe 01       	movw	r30, r28
    a9b0:	97 01       	movw	r18, r14
    a9b2:	a8 01       	movw	r20, r16
    a9b4:	da 94       	dec	r13
    a9b6:	79 f7       	brne	.-34     	; 0xa996 <__fp_powser+0x18>
    a9b8:	df 90       	pop	r13
    a9ba:	ef 90       	pop	r14
    a9bc:	ff 90       	pop	r15
    a9be:	0f 91       	pop	r16
    a9c0:	1f 91       	pop	r17
    a9c2:	cf 91       	pop	r28
    a9c4:	df 91       	pop	r29
    a9c6:	08 95       	ret

0000a9c8 <vfprintf>:
    a9c8:	2f 92       	push	r2
    a9ca:	3f 92       	push	r3
    a9cc:	4f 92       	push	r4
    a9ce:	5f 92       	push	r5
    a9d0:	6f 92       	push	r6
    a9d2:	7f 92       	push	r7
    a9d4:	8f 92       	push	r8
    a9d6:	9f 92       	push	r9
    a9d8:	af 92       	push	r10
    a9da:	bf 92       	push	r11
    a9dc:	cf 92       	push	r12
    a9de:	df 92       	push	r13
    a9e0:	ef 92       	push	r14
    a9e2:	ff 92       	push	r15
    a9e4:	0f 93       	push	r16
    a9e6:	1f 93       	push	r17
    a9e8:	cf 93       	push	r28
    a9ea:	df 93       	push	r29
    a9ec:	cd b7       	in	r28, 0x3d	; 61
    a9ee:	de b7       	in	r29, 0x3e	; 62
    a9f0:	60 97       	sbiw	r28, 0x10	; 16
    a9f2:	0f b6       	in	r0, 0x3f	; 63
    a9f4:	f8 94       	cli
    a9f6:	de bf       	out	0x3e, r29	; 62
    a9f8:	0f be       	out	0x3f, r0	; 63
    a9fa:	cd bf       	out	0x3d, r28	; 61
    a9fc:	7c 01       	movw	r14, r24
    a9fe:	1b 01       	movw	r2, r22
    aa00:	6a 01       	movw	r12, r20
    aa02:	fc 01       	movw	r30, r24
    aa04:	17 82       	std	Z+7, r1	; 0x07
    aa06:	16 82       	std	Z+6, r1	; 0x06
    aa08:	83 81       	ldd	r24, Z+3	; 0x03
    aa0a:	81 ff       	sbrs	r24, 1
    aa0c:	2a c3       	rjmp	.+1620   	; 0xb062 <vfprintf+0x69a>
    aa0e:	9e 01       	movw	r18, r28
    aa10:	2f 5f       	subi	r18, 0xFF	; 255
    aa12:	3f 4f       	sbci	r19, 0xFF	; 255
    aa14:	39 01       	movw	r6, r18
    aa16:	f7 01       	movw	r30, r14
    aa18:	93 81       	ldd	r25, Z+3	; 0x03
    aa1a:	f1 01       	movw	r30, r2
    aa1c:	93 fd       	sbrc	r25, 3
    aa1e:	85 91       	lpm	r24, Z+
    aa20:	93 ff       	sbrs	r25, 3
    aa22:	81 91       	ld	r24, Z+
    aa24:	1f 01       	movw	r2, r30
    aa26:	88 23       	and	r24, r24
    aa28:	09 f4       	brne	.+2      	; 0xaa2c <vfprintf+0x64>
    aa2a:	17 c3       	rjmp	.+1582   	; 0xb05a <vfprintf+0x692>
    aa2c:	85 32       	cpi	r24, 0x25	; 37
    aa2e:	39 f4       	brne	.+14     	; 0xaa3e <vfprintf+0x76>
    aa30:	93 fd       	sbrc	r25, 3
    aa32:	85 91       	lpm	r24, Z+
    aa34:	93 ff       	sbrs	r25, 3
    aa36:	81 91       	ld	r24, Z+
    aa38:	1f 01       	movw	r2, r30
    aa3a:	85 32       	cpi	r24, 0x25	; 37
    aa3c:	31 f4       	brne	.+12     	; 0xaa4a <vfprintf+0x82>
    aa3e:	b7 01       	movw	r22, r14
    aa40:	90 e0       	ldi	r25, 0x00	; 0
    aa42:	a3 d5       	rcall	.+2886   	; 0xb58a <fputc>
    aa44:	56 01       	movw	r10, r12
    aa46:	65 01       	movw	r12, r10
    aa48:	e6 cf       	rjmp	.-52     	; 0xaa16 <vfprintf+0x4e>
    aa4a:	10 e0       	ldi	r17, 0x00	; 0
    aa4c:	51 2c       	mov	r5, r1
    aa4e:	91 2c       	mov	r9, r1
    aa50:	ff e1       	ldi	r31, 0x1F	; 31
    aa52:	f9 15       	cp	r31, r9
    aa54:	d8 f0       	brcs	.+54     	; 0xaa8c <vfprintf+0xc4>
    aa56:	8b 32       	cpi	r24, 0x2B	; 43
    aa58:	79 f0       	breq	.+30     	; 0xaa78 <vfprintf+0xb0>
    aa5a:	38 f4       	brcc	.+14     	; 0xaa6a <vfprintf+0xa2>
    aa5c:	80 32       	cpi	r24, 0x20	; 32
    aa5e:	79 f0       	breq	.+30     	; 0xaa7e <vfprintf+0xb6>
    aa60:	83 32       	cpi	r24, 0x23	; 35
    aa62:	a1 f4       	brne	.+40     	; 0xaa8c <vfprintf+0xc4>
    aa64:	f9 2d       	mov	r31, r9
    aa66:	f0 61       	ori	r31, 0x10	; 16
    aa68:	2e c0       	rjmp	.+92     	; 0xaac6 <vfprintf+0xfe>
    aa6a:	8d 32       	cpi	r24, 0x2D	; 45
    aa6c:	61 f0       	breq	.+24     	; 0xaa86 <vfprintf+0xbe>
    aa6e:	80 33       	cpi	r24, 0x30	; 48
    aa70:	69 f4       	brne	.+26     	; 0xaa8c <vfprintf+0xc4>
    aa72:	29 2d       	mov	r18, r9
    aa74:	21 60       	ori	r18, 0x01	; 1
    aa76:	2d c0       	rjmp	.+90     	; 0xaad2 <vfprintf+0x10a>
    aa78:	39 2d       	mov	r19, r9
    aa7a:	32 60       	ori	r19, 0x02	; 2
    aa7c:	93 2e       	mov	r9, r19
    aa7e:	89 2d       	mov	r24, r9
    aa80:	84 60       	ori	r24, 0x04	; 4
    aa82:	98 2e       	mov	r9, r24
    aa84:	2a c0       	rjmp	.+84     	; 0xaada <vfprintf+0x112>
    aa86:	e9 2d       	mov	r30, r9
    aa88:	e8 60       	ori	r30, 0x08	; 8
    aa8a:	15 c0       	rjmp	.+42     	; 0xaab6 <vfprintf+0xee>
    aa8c:	97 fc       	sbrc	r9, 7
    aa8e:	2d c0       	rjmp	.+90     	; 0xaaea <vfprintf+0x122>
    aa90:	20 ed       	ldi	r18, 0xD0	; 208
    aa92:	28 0f       	add	r18, r24
    aa94:	2a 30       	cpi	r18, 0x0A	; 10
    aa96:	88 f4       	brcc	.+34     	; 0xaaba <vfprintf+0xf2>
    aa98:	96 fe       	sbrs	r9, 6
    aa9a:	06 c0       	rjmp	.+12     	; 0xaaa8 <vfprintf+0xe0>
    aa9c:	3a e0       	ldi	r19, 0x0A	; 10
    aa9e:	13 9f       	mul	r17, r19
    aaa0:	20 0d       	add	r18, r0
    aaa2:	11 24       	eor	r1, r1
    aaa4:	12 2f       	mov	r17, r18
    aaa6:	19 c0       	rjmp	.+50     	; 0xaada <vfprintf+0x112>
    aaa8:	8a e0       	ldi	r24, 0x0A	; 10
    aaaa:	58 9e       	mul	r5, r24
    aaac:	20 0d       	add	r18, r0
    aaae:	11 24       	eor	r1, r1
    aab0:	52 2e       	mov	r5, r18
    aab2:	e9 2d       	mov	r30, r9
    aab4:	e0 62       	ori	r30, 0x20	; 32
    aab6:	9e 2e       	mov	r9, r30
    aab8:	10 c0       	rjmp	.+32     	; 0xaada <vfprintf+0x112>
    aaba:	8e 32       	cpi	r24, 0x2E	; 46
    aabc:	31 f4       	brne	.+12     	; 0xaaca <vfprintf+0x102>
    aabe:	96 fc       	sbrc	r9, 6
    aac0:	cc c2       	rjmp	.+1432   	; 0xb05a <vfprintf+0x692>
    aac2:	f9 2d       	mov	r31, r9
    aac4:	f0 64       	ori	r31, 0x40	; 64
    aac6:	9f 2e       	mov	r9, r31
    aac8:	08 c0       	rjmp	.+16     	; 0xaada <vfprintf+0x112>
    aaca:	8c 36       	cpi	r24, 0x6C	; 108
    aacc:	21 f4       	brne	.+8      	; 0xaad6 <vfprintf+0x10e>
    aace:	29 2d       	mov	r18, r9
    aad0:	20 68       	ori	r18, 0x80	; 128
    aad2:	92 2e       	mov	r9, r18
    aad4:	02 c0       	rjmp	.+4      	; 0xaada <vfprintf+0x112>
    aad6:	88 36       	cpi	r24, 0x68	; 104
    aad8:	41 f4       	brne	.+16     	; 0xaaea <vfprintf+0x122>
    aada:	f1 01       	movw	r30, r2
    aadc:	93 fd       	sbrc	r25, 3
    aade:	85 91       	lpm	r24, Z+
    aae0:	93 ff       	sbrs	r25, 3
    aae2:	81 91       	ld	r24, Z+
    aae4:	1f 01       	movw	r2, r30
    aae6:	81 11       	cpse	r24, r1
    aae8:	b3 cf       	rjmp	.-154    	; 0xaa50 <vfprintf+0x88>
    aaea:	9b eb       	ldi	r25, 0xBB	; 187
    aaec:	98 0f       	add	r25, r24
    aaee:	93 30       	cpi	r25, 0x03	; 3
    aaf0:	20 f4       	brcc	.+8      	; 0xaafa <vfprintf+0x132>
    aaf2:	99 2d       	mov	r25, r9
    aaf4:	90 61       	ori	r25, 0x10	; 16
    aaf6:	80 5e       	subi	r24, 0xE0	; 224
    aaf8:	07 c0       	rjmp	.+14     	; 0xab08 <vfprintf+0x140>
    aafa:	9b e9       	ldi	r25, 0x9B	; 155
    aafc:	98 0f       	add	r25, r24
    aafe:	93 30       	cpi	r25, 0x03	; 3
    ab00:	08 f0       	brcs	.+2      	; 0xab04 <vfprintf+0x13c>
    ab02:	59 c1       	rjmp	.+690    	; 0xadb6 <vfprintf+0x3ee>
    ab04:	99 2d       	mov	r25, r9
    ab06:	9f 7e       	andi	r25, 0xEF	; 239
    ab08:	96 ff       	sbrs	r25, 6
    ab0a:	16 e0       	ldi	r17, 0x06	; 6
    ab0c:	9f 73       	andi	r25, 0x3F	; 63
    ab0e:	99 2e       	mov	r9, r25
    ab10:	85 36       	cpi	r24, 0x65	; 101
    ab12:	19 f4       	brne	.+6      	; 0xab1a <vfprintf+0x152>
    ab14:	90 64       	ori	r25, 0x40	; 64
    ab16:	99 2e       	mov	r9, r25
    ab18:	08 c0       	rjmp	.+16     	; 0xab2a <vfprintf+0x162>
    ab1a:	86 36       	cpi	r24, 0x66	; 102
    ab1c:	21 f4       	brne	.+8      	; 0xab26 <vfprintf+0x15e>
    ab1e:	39 2f       	mov	r19, r25
    ab20:	30 68       	ori	r19, 0x80	; 128
    ab22:	93 2e       	mov	r9, r19
    ab24:	02 c0       	rjmp	.+4      	; 0xab2a <vfprintf+0x162>
    ab26:	11 11       	cpse	r17, r1
    ab28:	11 50       	subi	r17, 0x01	; 1
    ab2a:	97 fe       	sbrs	r9, 7
    ab2c:	07 c0       	rjmp	.+14     	; 0xab3c <vfprintf+0x174>
    ab2e:	1c 33       	cpi	r17, 0x3C	; 60
    ab30:	50 f4       	brcc	.+20     	; 0xab46 <vfprintf+0x17e>
    ab32:	44 24       	eor	r4, r4
    ab34:	43 94       	inc	r4
    ab36:	41 0e       	add	r4, r17
    ab38:	27 e0       	ldi	r18, 0x07	; 7
    ab3a:	0b c0       	rjmp	.+22     	; 0xab52 <vfprintf+0x18a>
    ab3c:	18 30       	cpi	r17, 0x08	; 8
    ab3e:	38 f0       	brcs	.+14     	; 0xab4e <vfprintf+0x186>
    ab40:	27 e0       	ldi	r18, 0x07	; 7
    ab42:	17 e0       	ldi	r17, 0x07	; 7
    ab44:	05 c0       	rjmp	.+10     	; 0xab50 <vfprintf+0x188>
    ab46:	27 e0       	ldi	r18, 0x07	; 7
    ab48:	9c e3       	ldi	r25, 0x3C	; 60
    ab4a:	49 2e       	mov	r4, r25
    ab4c:	02 c0       	rjmp	.+4      	; 0xab52 <vfprintf+0x18a>
    ab4e:	21 2f       	mov	r18, r17
    ab50:	41 2c       	mov	r4, r1
    ab52:	56 01       	movw	r10, r12
    ab54:	84 e0       	ldi	r24, 0x04	; 4
    ab56:	a8 0e       	add	r10, r24
    ab58:	b1 1c       	adc	r11, r1
    ab5a:	f6 01       	movw	r30, r12
    ab5c:	60 81       	ld	r22, Z
    ab5e:	71 81       	ldd	r23, Z+1	; 0x01
    ab60:	82 81       	ldd	r24, Z+2	; 0x02
    ab62:	93 81       	ldd	r25, Z+3	; 0x03
    ab64:	04 2d       	mov	r16, r4
    ab66:	a3 01       	movw	r20, r6
    ab68:	12 d4       	rcall	.+2084   	; 0xb38e <__ftoa_engine>
    ab6a:	6c 01       	movw	r12, r24
    ab6c:	f9 81       	ldd	r31, Y+1	; 0x01
    ab6e:	fc 87       	std	Y+12, r31	; 0x0c
    ab70:	f0 ff       	sbrs	r31, 0
    ab72:	02 c0       	rjmp	.+4      	; 0xab78 <vfprintf+0x1b0>
    ab74:	f3 ff       	sbrs	r31, 3
    ab76:	06 c0       	rjmp	.+12     	; 0xab84 <vfprintf+0x1bc>
    ab78:	91 fc       	sbrc	r9, 1
    ab7a:	06 c0       	rjmp	.+12     	; 0xab88 <vfprintf+0x1c0>
    ab7c:	92 fe       	sbrs	r9, 2
    ab7e:	06 c0       	rjmp	.+12     	; 0xab8c <vfprintf+0x1c4>
    ab80:	00 e2       	ldi	r16, 0x20	; 32
    ab82:	05 c0       	rjmp	.+10     	; 0xab8e <vfprintf+0x1c6>
    ab84:	0d e2       	ldi	r16, 0x2D	; 45
    ab86:	03 c0       	rjmp	.+6      	; 0xab8e <vfprintf+0x1c6>
    ab88:	0b e2       	ldi	r16, 0x2B	; 43
    ab8a:	01 c0       	rjmp	.+2      	; 0xab8e <vfprintf+0x1c6>
    ab8c:	00 e0       	ldi	r16, 0x00	; 0
    ab8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    ab90:	8c 70       	andi	r24, 0x0C	; 12
    ab92:	19 f0       	breq	.+6      	; 0xab9a <vfprintf+0x1d2>
    ab94:	01 11       	cpse	r16, r1
    ab96:	43 c2       	rjmp	.+1158   	; 0xb01e <vfprintf+0x656>
    ab98:	80 c2       	rjmp	.+1280   	; 0xb09a <vfprintf+0x6d2>
    ab9a:	97 fe       	sbrs	r9, 7
    ab9c:	10 c0       	rjmp	.+32     	; 0xabbe <vfprintf+0x1f6>
    ab9e:	4c 0c       	add	r4, r12
    aba0:	fc 85       	ldd	r31, Y+12	; 0x0c
    aba2:	f4 ff       	sbrs	r31, 4
    aba4:	04 c0       	rjmp	.+8      	; 0xabae <vfprintf+0x1e6>
    aba6:	8a 81       	ldd	r24, Y+2	; 0x02
    aba8:	81 33       	cpi	r24, 0x31	; 49
    abaa:	09 f4       	brne	.+2      	; 0xabae <vfprintf+0x1e6>
    abac:	4a 94       	dec	r4
    abae:	14 14       	cp	r1, r4
    abb0:	74 f5       	brge	.+92     	; 0xac0e <vfprintf+0x246>
    abb2:	28 e0       	ldi	r18, 0x08	; 8
    abb4:	24 15       	cp	r18, r4
    abb6:	78 f5       	brcc	.+94     	; 0xac16 <vfprintf+0x24e>
    abb8:	88 e0       	ldi	r24, 0x08	; 8
    abba:	48 2e       	mov	r4, r24
    abbc:	2c c0       	rjmp	.+88     	; 0xac16 <vfprintf+0x24e>
    abbe:	96 fc       	sbrc	r9, 6
    abc0:	2a c0       	rjmp	.+84     	; 0xac16 <vfprintf+0x24e>
    abc2:	81 2f       	mov	r24, r17
    abc4:	90 e0       	ldi	r25, 0x00	; 0
    abc6:	8c 15       	cp	r24, r12
    abc8:	9d 05       	cpc	r25, r13
    abca:	9c f0       	brlt	.+38     	; 0xabf2 <vfprintf+0x22a>
    abcc:	3c ef       	ldi	r19, 0xFC	; 252
    abce:	c3 16       	cp	r12, r19
    abd0:	3f ef       	ldi	r19, 0xFF	; 255
    abd2:	d3 06       	cpc	r13, r19
    abd4:	74 f0       	brlt	.+28     	; 0xabf2 <vfprintf+0x22a>
    abd6:	89 2d       	mov	r24, r9
    abd8:	80 68       	ori	r24, 0x80	; 128
    abda:	98 2e       	mov	r9, r24
    abdc:	0a c0       	rjmp	.+20     	; 0xabf2 <vfprintf+0x22a>
    abde:	e2 e0       	ldi	r30, 0x02	; 2
    abe0:	f0 e0       	ldi	r31, 0x00	; 0
    abe2:	ec 0f       	add	r30, r28
    abe4:	fd 1f       	adc	r31, r29
    abe6:	e1 0f       	add	r30, r17
    abe8:	f1 1d       	adc	r31, r1
    abea:	80 81       	ld	r24, Z
    abec:	80 33       	cpi	r24, 0x30	; 48
    abee:	19 f4       	brne	.+6      	; 0xabf6 <vfprintf+0x22e>
    abf0:	11 50       	subi	r17, 0x01	; 1
    abf2:	11 11       	cpse	r17, r1
    abf4:	f4 cf       	rjmp	.-24     	; 0xabde <vfprintf+0x216>
    abf6:	97 fe       	sbrs	r9, 7
    abf8:	0e c0       	rjmp	.+28     	; 0xac16 <vfprintf+0x24e>
    abfa:	44 24       	eor	r4, r4
    abfc:	43 94       	inc	r4
    abfe:	41 0e       	add	r4, r17
    ac00:	81 2f       	mov	r24, r17
    ac02:	90 e0       	ldi	r25, 0x00	; 0
    ac04:	c8 16       	cp	r12, r24
    ac06:	d9 06       	cpc	r13, r25
    ac08:	2c f4       	brge	.+10     	; 0xac14 <vfprintf+0x24c>
    ac0a:	1c 19       	sub	r17, r12
    ac0c:	04 c0       	rjmp	.+8      	; 0xac16 <vfprintf+0x24e>
    ac0e:	44 24       	eor	r4, r4
    ac10:	43 94       	inc	r4
    ac12:	01 c0       	rjmp	.+2      	; 0xac16 <vfprintf+0x24e>
    ac14:	10 e0       	ldi	r17, 0x00	; 0
    ac16:	97 fe       	sbrs	r9, 7
    ac18:	06 c0       	rjmp	.+12     	; 0xac26 <vfprintf+0x25e>
    ac1a:	1c 14       	cp	r1, r12
    ac1c:	1d 04       	cpc	r1, r13
    ac1e:	34 f4       	brge	.+12     	; 0xac2c <vfprintf+0x264>
    ac20:	c6 01       	movw	r24, r12
    ac22:	01 96       	adiw	r24, 0x01	; 1
    ac24:	05 c0       	rjmp	.+10     	; 0xac30 <vfprintf+0x268>
    ac26:	85 e0       	ldi	r24, 0x05	; 5
    ac28:	90 e0       	ldi	r25, 0x00	; 0
    ac2a:	02 c0       	rjmp	.+4      	; 0xac30 <vfprintf+0x268>
    ac2c:	81 e0       	ldi	r24, 0x01	; 1
    ac2e:	90 e0       	ldi	r25, 0x00	; 0
    ac30:	01 11       	cpse	r16, r1
    ac32:	01 96       	adiw	r24, 0x01	; 1
    ac34:	11 23       	and	r17, r17
    ac36:	31 f0       	breq	.+12     	; 0xac44 <vfprintf+0x27c>
    ac38:	21 2f       	mov	r18, r17
    ac3a:	30 e0       	ldi	r19, 0x00	; 0
    ac3c:	2f 5f       	subi	r18, 0xFF	; 255
    ac3e:	3f 4f       	sbci	r19, 0xFF	; 255
    ac40:	82 0f       	add	r24, r18
    ac42:	93 1f       	adc	r25, r19
    ac44:	25 2d       	mov	r18, r5
    ac46:	30 e0       	ldi	r19, 0x00	; 0
    ac48:	82 17       	cp	r24, r18
    ac4a:	93 07       	cpc	r25, r19
    ac4c:	14 f4       	brge	.+4      	; 0xac52 <vfprintf+0x28a>
    ac4e:	58 1a       	sub	r5, r24
    ac50:	01 c0       	rjmp	.+2      	; 0xac54 <vfprintf+0x28c>
    ac52:	51 2c       	mov	r5, r1
    ac54:	89 2d       	mov	r24, r9
    ac56:	89 70       	andi	r24, 0x09	; 9
    ac58:	41 f4       	brne	.+16     	; 0xac6a <vfprintf+0x2a2>
    ac5a:	55 20       	and	r5, r5
    ac5c:	31 f0       	breq	.+12     	; 0xac6a <vfprintf+0x2a2>
    ac5e:	b7 01       	movw	r22, r14
    ac60:	80 e2       	ldi	r24, 0x20	; 32
    ac62:	90 e0       	ldi	r25, 0x00	; 0
    ac64:	92 d4       	rcall	.+2340   	; 0xb58a <fputc>
    ac66:	5a 94       	dec	r5
    ac68:	f8 cf       	rjmp	.-16     	; 0xac5a <vfprintf+0x292>
    ac6a:	00 23       	and	r16, r16
    ac6c:	21 f0       	breq	.+8      	; 0xac76 <vfprintf+0x2ae>
    ac6e:	b7 01       	movw	r22, r14
    ac70:	80 2f       	mov	r24, r16
    ac72:	90 e0       	ldi	r25, 0x00	; 0
    ac74:	8a d4       	rcall	.+2324   	; 0xb58a <fputc>
    ac76:	93 fc       	sbrc	r9, 3
    ac78:	08 c0       	rjmp	.+16     	; 0xac8a <vfprintf+0x2c2>
    ac7a:	55 20       	and	r5, r5
    ac7c:	31 f0       	breq	.+12     	; 0xac8a <vfprintf+0x2c2>
    ac7e:	b7 01       	movw	r22, r14
    ac80:	80 e3       	ldi	r24, 0x30	; 48
    ac82:	90 e0       	ldi	r25, 0x00	; 0
    ac84:	82 d4       	rcall	.+2308   	; 0xb58a <fputc>
    ac86:	5a 94       	dec	r5
    ac88:	f8 cf       	rjmp	.-16     	; 0xac7a <vfprintf+0x2b2>
    ac8a:	97 fe       	sbrs	r9, 7
    ac8c:	4a c0       	rjmp	.+148    	; 0xad22 <vfprintf+0x35a>
    ac8e:	46 01       	movw	r8, r12
    ac90:	d7 fe       	sbrs	r13, 7
    ac92:	02 c0       	rjmp	.+4      	; 0xac98 <vfprintf+0x2d0>
    ac94:	81 2c       	mov	r8, r1
    ac96:	91 2c       	mov	r9, r1
    ac98:	c6 01       	movw	r24, r12
    ac9a:	88 19       	sub	r24, r8
    ac9c:	99 09       	sbc	r25, r9
    ac9e:	f3 01       	movw	r30, r6
    aca0:	e8 0f       	add	r30, r24
    aca2:	f9 1f       	adc	r31, r25
    aca4:	fe 87       	std	Y+14, r31	; 0x0e
    aca6:	ed 87       	std	Y+13, r30	; 0x0d
    aca8:	96 01       	movw	r18, r12
    acaa:	24 19       	sub	r18, r4
    acac:	31 09       	sbc	r19, r1
    acae:	38 8b       	std	Y+16, r19	; 0x10
    acb0:	2f 87       	std	Y+15, r18	; 0x0f
    acb2:	01 2f       	mov	r16, r17
    acb4:	10 e0       	ldi	r17, 0x00	; 0
    acb6:	11 95       	neg	r17
    acb8:	01 95       	neg	r16
    acba:	11 09       	sbc	r17, r1
    acbc:	3f ef       	ldi	r19, 0xFF	; 255
    acbe:	83 16       	cp	r8, r19
    acc0:	93 06       	cpc	r9, r19
    acc2:	21 f4       	brne	.+8      	; 0xaccc <vfprintf+0x304>
    acc4:	b7 01       	movw	r22, r14
    acc6:	8e e2       	ldi	r24, 0x2E	; 46
    acc8:	90 e0       	ldi	r25, 0x00	; 0
    acca:	5f d4       	rcall	.+2238   	; 0xb58a <fputc>
    accc:	c8 14       	cp	r12, r8
    acce:	d9 04       	cpc	r13, r9
    acd0:	4c f0       	brlt	.+18     	; 0xace4 <vfprintf+0x31c>
    acd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    acd4:	98 89       	ldd	r25, Y+16	; 0x10
    acd6:	88 15       	cp	r24, r8
    acd8:	99 05       	cpc	r25, r9
    acda:	24 f4       	brge	.+8      	; 0xace4 <vfprintf+0x31c>
    acdc:	ed 85       	ldd	r30, Y+13	; 0x0d
    acde:	fe 85       	ldd	r31, Y+14	; 0x0e
    ace0:	81 81       	ldd	r24, Z+1	; 0x01
    ace2:	01 c0       	rjmp	.+2      	; 0xace6 <vfprintf+0x31e>
    ace4:	80 e3       	ldi	r24, 0x30	; 48
    ace6:	f1 e0       	ldi	r31, 0x01	; 1
    ace8:	8f 1a       	sub	r8, r31
    acea:	91 08       	sbc	r9, r1
    acec:	2d 85       	ldd	r18, Y+13	; 0x0d
    acee:	3e 85       	ldd	r19, Y+14	; 0x0e
    acf0:	2f 5f       	subi	r18, 0xFF	; 255
    acf2:	3f 4f       	sbci	r19, 0xFF	; 255
    acf4:	3e 87       	std	Y+14, r19	; 0x0e
    acf6:	2d 87       	std	Y+13, r18	; 0x0d
    acf8:	80 16       	cp	r8, r16
    acfa:	91 06       	cpc	r9, r17
    acfc:	24 f0       	brlt	.+8      	; 0xad06 <vfprintf+0x33e>
    acfe:	b7 01       	movw	r22, r14
    ad00:	90 e0       	ldi	r25, 0x00	; 0
    ad02:	43 d4       	rcall	.+2182   	; 0xb58a <fputc>
    ad04:	db cf       	rjmp	.-74     	; 0xacbc <vfprintf+0x2f4>
    ad06:	c8 14       	cp	r12, r8
    ad08:	d9 04       	cpc	r13, r9
    ad0a:	41 f4       	brne	.+16     	; 0xad1c <vfprintf+0x354>
    ad0c:	9a 81       	ldd	r25, Y+2	; 0x02
    ad0e:	96 33       	cpi	r25, 0x36	; 54
    ad10:	20 f4       	brcc	.+8      	; 0xad1a <vfprintf+0x352>
    ad12:	95 33       	cpi	r25, 0x35	; 53
    ad14:	19 f4       	brne	.+6      	; 0xad1c <vfprintf+0x354>
    ad16:	3c 85       	ldd	r19, Y+12	; 0x0c
    ad18:	34 ff       	sbrs	r19, 4
    ad1a:	81 e3       	ldi	r24, 0x31	; 49
    ad1c:	b7 01       	movw	r22, r14
    ad1e:	90 e0       	ldi	r25, 0x00	; 0
    ad20:	48 c0       	rjmp	.+144    	; 0xadb2 <vfprintf+0x3ea>
    ad22:	8a 81       	ldd	r24, Y+2	; 0x02
    ad24:	81 33       	cpi	r24, 0x31	; 49
    ad26:	19 f0       	breq	.+6      	; 0xad2e <vfprintf+0x366>
    ad28:	9c 85       	ldd	r25, Y+12	; 0x0c
    ad2a:	9f 7e       	andi	r25, 0xEF	; 239
    ad2c:	9c 87       	std	Y+12, r25	; 0x0c
    ad2e:	b7 01       	movw	r22, r14
    ad30:	90 e0       	ldi	r25, 0x00	; 0
    ad32:	2b d4       	rcall	.+2134   	; 0xb58a <fputc>
    ad34:	11 11       	cpse	r17, r1
    ad36:	05 c0       	rjmp	.+10     	; 0xad42 <vfprintf+0x37a>
    ad38:	94 fc       	sbrc	r9, 4
    ad3a:	16 c0       	rjmp	.+44     	; 0xad68 <vfprintf+0x3a0>
    ad3c:	85 e6       	ldi	r24, 0x65	; 101
    ad3e:	90 e0       	ldi	r25, 0x00	; 0
    ad40:	15 c0       	rjmp	.+42     	; 0xad6c <vfprintf+0x3a4>
    ad42:	b7 01       	movw	r22, r14
    ad44:	8e e2       	ldi	r24, 0x2E	; 46
    ad46:	90 e0       	ldi	r25, 0x00	; 0
    ad48:	20 d4       	rcall	.+2112   	; 0xb58a <fputc>
    ad4a:	1e 5f       	subi	r17, 0xFE	; 254
    ad4c:	82 e0       	ldi	r24, 0x02	; 2
    ad4e:	01 e0       	ldi	r16, 0x01	; 1
    ad50:	08 0f       	add	r16, r24
    ad52:	f3 01       	movw	r30, r6
    ad54:	e8 0f       	add	r30, r24
    ad56:	f1 1d       	adc	r31, r1
    ad58:	80 81       	ld	r24, Z
    ad5a:	b7 01       	movw	r22, r14
    ad5c:	90 e0       	ldi	r25, 0x00	; 0
    ad5e:	15 d4       	rcall	.+2090   	; 0xb58a <fputc>
    ad60:	80 2f       	mov	r24, r16
    ad62:	01 13       	cpse	r16, r17
    ad64:	f4 cf       	rjmp	.-24     	; 0xad4e <vfprintf+0x386>
    ad66:	e8 cf       	rjmp	.-48     	; 0xad38 <vfprintf+0x370>
    ad68:	85 e4       	ldi	r24, 0x45	; 69
    ad6a:	90 e0       	ldi	r25, 0x00	; 0
    ad6c:	b7 01       	movw	r22, r14
    ad6e:	0d d4       	rcall	.+2074   	; 0xb58a <fputc>
    ad70:	d7 fc       	sbrc	r13, 7
    ad72:	06 c0       	rjmp	.+12     	; 0xad80 <vfprintf+0x3b8>
    ad74:	c1 14       	cp	r12, r1
    ad76:	d1 04       	cpc	r13, r1
    ad78:	41 f4       	brne	.+16     	; 0xad8a <vfprintf+0x3c2>
    ad7a:	ec 85       	ldd	r30, Y+12	; 0x0c
    ad7c:	e4 ff       	sbrs	r30, 4
    ad7e:	05 c0       	rjmp	.+10     	; 0xad8a <vfprintf+0x3c2>
    ad80:	d1 94       	neg	r13
    ad82:	c1 94       	neg	r12
    ad84:	d1 08       	sbc	r13, r1
    ad86:	8d e2       	ldi	r24, 0x2D	; 45
    ad88:	01 c0       	rjmp	.+2      	; 0xad8c <vfprintf+0x3c4>
    ad8a:	8b e2       	ldi	r24, 0x2B	; 43
    ad8c:	b7 01       	movw	r22, r14
    ad8e:	90 e0       	ldi	r25, 0x00	; 0
    ad90:	fc d3       	rcall	.+2040   	; 0xb58a <fputc>
    ad92:	80 e3       	ldi	r24, 0x30	; 48
    ad94:	2a e0       	ldi	r18, 0x0A	; 10
    ad96:	c2 16       	cp	r12, r18
    ad98:	d1 04       	cpc	r13, r1
    ad9a:	2c f0       	brlt	.+10     	; 0xada6 <vfprintf+0x3de>
    ad9c:	8f 5f       	subi	r24, 0xFF	; 255
    ad9e:	fa e0       	ldi	r31, 0x0A	; 10
    ada0:	cf 1a       	sub	r12, r31
    ada2:	d1 08       	sbc	r13, r1
    ada4:	f7 cf       	rjmp	.-18     	; 0xad94 <vfprintf+0x3cc>
    ada6:	b7 01       	movw	r22, r14
    ada8:	90 e0       	ldi	r25, 0x00	; 0
    adaa:	ef d3       	rcall	.+2014   	; 0xb58a <fputc>
    adac:	b7 01       	movw	r22, r14
    adae:	c6 01       	movw	r24, r12
    adb0:	c0 96       	adiw	r24, 0x30	; 48
    adb2:	eb d3       	rcall	.+2006   	; 0xb58a <fputc>
    adb4:	49 c1       	rjmp	.+658    	; 0xb048 <vfprintf+0x680>
    adb6:	83 36       	cpi	r24, 0x63	; 99
    adb8:	31 f0       	breq	.+12     	; 0xadc6 <vfprintf+0x3fe>
    adba:	83 37       	cpi	r24, 0x73	; 115
    adbc:	79 f0       	breq	.+30     	; 0xaddc <vfprintf+0x414>
    adbe:	83 35       	cpi	r24, 0x53	; 83
    adc0:	09 f0       	breq	.+2      	; 0xadc4 <vfprintf+0x3fc>
    adc2:	52 c0       	rjmp	.+164    	; 0xae68 <vfprintf+0x4a0>
    adc4:	1f c0       	rjmp	.+62     	; 0xae04 <vfprintf+0x43c>
    adc6:	56 01       	movw	r10, r12
    adc8:	32 e0       	ldi	r19, 0x02	; 2
    adca:	a3 0e       	add	r10, r19
    adcc:	b1 1c       	adc	r11, r1
    adce:	f6 01       	movw	r30, r12
    add0:	80 81       	ld	r24, Z
    add2:	89 83       	std	Y+1, r24	; 0x01
    add4:	01 e0       	ldi	r16, 0x01	; 1
    add6:	10 e0       	ldi	r17, 0x00	; 0
    add8:	63 01       	movw	r12, r6
    adda:	11 c0       	rjmp	.+34     	; 0xadfe <vfprintf+0x436>
    addc:	56 01       	movw	r10, r12
    adde:	f2 e0       	ldi	r31, 0x02	; 2
    ade0:	af 0e       	add	r10, r31
    ade2:	b1 1c       	adc	r11, r1
    ade4:	f6 01       	movw	r30, r12
    ade6:	c0 80       	ld	r12, Z
    ade8:	d1 80       	ldd	r13, Z+1	; 0x01
    adea:	96 fe       	sbrs	r9, 6
    adec:	03 c0       	rjmp	.+6      	; 0xadf4 <vfprintf+0x42c>
    adee:	61 2f       	mov	r22, r17
    adf0:	70 e0       	ldi	r23, 0x00	; 0
    adf2:	02 c0       	rjmp	.+4      	; 0xadf8 <vfprintf+0x430>
    adf4:	6f ef       	ldi	r22, 0xFF	; 255
    adf6:	7f ef       	ldi	r23, 0xFF	; 255
    adf8:	c6 01       	movw	r24, r12
    adfa:	bc d3       	rcall	.+1912   	; 0xb574 <strnlen>
    adfc:	8c 01       	movw	r16, r24
    adfe:	f9 2d       	mov	r31, r9
    ae00:	ff 77       	andi	r31, 0x7F	; 127
    ae02:	13 c0       	rjmp	.+38     	; 0xae2a <vfprintf+0x462>
    ae04:	56 01       	movw	r10, r12
    ae06:	22 e0       	ldi	r18, 0x02	; 2
    ae08:	a2 0e       	add	r10, r18
    ae0a:	b1 1c       	adc	r11, r1
    ae0c:	f6 01       	movw	r30, r12
    ae0e:	c0 80       	ld	r12, Z
    ae10:	d1 80       	ldd	r13, Z+1	; 0x01
    ae12:	96 fe       	sbrs	r9, 6
    ae14:	03 c0       	rjmp	.+6      	; 0xae1c <vfprintf+0x454>
    ae16:	61 2f       	mov	r22, r17
    ae18:	70 e0       	ldi	r23, 0x00	; 0
    ae1a:	02 c0       	rjmp	.+4      	; 0xae20 <vfprintf+0x458>
    ae1c:	6f ef       	ldi	r22, 0xFF	; 255
    ae1e:	7f ef       	ldi	r23, 0xFF	; 255
    ae20:	c6 01       	movw	r24, r12
    ae22:	8d d3       	rcall	.+1818   	; 0xb53e <strnlen_P>
    ae24:	8c 01       	movw	r16, r24
    ae26:	f9 2d       	mov	r31, r9
    ae28:	f0 68       	ori	r31, 0x80	; 128
    ae2a:	9f 2e       	mov	r9, r31
    ae2c:	f3 fd       	sbrc	r31, 3
    ae2e:	18 c0       	rjmp	.+48     	; 0xae60 <vfprintf+0x498>
    ae30:	85 2d       	mov	r24, r5
    ae32:	90 e0       	ldi	r25, 0x00	; 0
    ae34:	08 17       	cp	r16, r24
    ae36:	19 07       	cpc	r17, r25
    ae38:	98 f4       	brcc	.+38     	; 0xae60 <vfprintf+0x498>
    ae3a:	b7 01       	movw	r22, r14
    ae3c:	80 e2       	ldi	r24, 0x20	; 32
    ae3e:	90 e0       	ldi	r25, 0x00	; 0
    ae40:	a4 d3       	rcall	.+1864   	; 0xb58a <fputc>
    ae42:	5a 94       	dec	r5
    ae44:	f5 cf       	rjmp	.-22     	; 0xae30 <vfprintf+0x468>
    ae46:	f6 01       	movw	r30, r12
    ae48:	97 fc       	sbrc	r9, 7
    ae4a:	85 91       	lpm	r24, Z+
    ae4c:	97 fe       	sbrs	r9, 7
    ae4e:	81 91       	ld	r24, Z+
    ae50:	6f 01       	movw	r12, r30
    ae52:	b7 01       	movw	r22, r14
    ae54:	90 e0       	ldi	r25, 0x00	; 0
    ae56:	99 d3       	rcall	.+1842   	; 0xb58a <fputc>
    ae58:	51 10       	cpse	r5, r1
    ae5a:	5a 94       	dec	r5
    ae5c:	01 50       	subi	r16, 0x01	; 1
    ae5e:	11 09       	sbc	r17, r1
    ae60:	01 15       	cp	r16, r1
    ae62:	11 05       	cpc	r17, r1
    ae64:	81 f7       	brne	.-32     	; 0xae46 <vfprintf+0x47e>
    ae66:	f0 c0       	rjmp	.+480    	; 0xb048 <vfprintf+0x680>
    ae68:	84 36       	cpi	r24, 0x64	; 100
    ae6a:	11 f0       	breq	.+4      	; 0xae70 <vfprintf+0x4a8>
    ae6c:	89 36       	cpi	r24, 0x69	; 105
    ae6e:	59 f5       	brne	.+86     	; 0xaec6 <vfprintf+0x4fe>
    ae70:	56 01       	movw	r10, r12
    ae72:	97 fe       	sbrs	r9, 7
    ae74:	09 c0       	rjmp	.+18     	; 0xae88 <vfprintf+0x4c0>
    ae76:	24 e0       	ldi	r18, 0x04	; 4
    ae78:	a2 0e       	add	r10, r18
    ae7a:	b1 1c       	adc	r11, r1
    ae7c:	f6 01       	movw	r30, r12
    ae7e:	60 81       	ld	r22, Z
    ae80:	71 81       	ldd	r23, Z+1	; 0x01
    ae82:	82 81       	ldd	r24, Z+2	; 0x02
    ae84:	93 81       	ldd	r25, Z+3	; 0x03
    ae86:	0a c0       	rjmp	.+20     	; 0xae9c <vfprintf+0x4d4>
    ae88:	f2 e0       	ldi	r31, 0x02	; 2
    ae8a:	af 0e       	add	r10, r31
    ae8c:	b1 1c       	adc	r11, r1
    ae8e:	f6 01       	movw	r30, r12
    ae90:	60 81       	ld	r22, Z
    ae92:	71 81       	ldd	r23, Z+1	; 0x01
    ae94:	07 2e       	mov	r0, r23
    ae96:	00 0c       	add	r0, r0
    ae98:	88 0b       	sbc	r24, r24
    ae9a:	99 0b       	sbc	r25, r25
    ae9c:	f9 2d       	mov	r31, r9
    ae9e:	ff 76       	andi	r31, 0x6F	; 111
    aea0:	9f 2e       	mov	r9, r31
    aea2:	97 ff       	sbrs	r25, 7
    aea4:	09 c0       	rjmp	.+18     	; 0xaeb8 <vfprintf+0x4f0>
    aea6:	90 95       	com	r25
    aea8:	80 95       	com	r24
    aeaa:	70 95       	com	r23
    aeac:	61 95       	neg	r22
    aeae:	7f 4f       	sbci	r23, 0xFF	; 255
    aeb0:	8f 4f       	sbci	r24, 0xFF	; 255
    aeb2:	9f 4f       	sbci	r25, 0xFF	; 255
    aeb4:	f0 68       	ori	r31, 0x80	; 128
    aeb6:	9f 2e       	mov	r9, r31
    aeb8:	2a e0       	ldi	r18, 0x0A	; 10
    aeba:	30 e0       	ldi	r19, 0x00	; 0
    aebc:	a3 01       	movw	r20, r6
    aebe:	d9 d3       	rcall	.+1970   	; 0xb672 <__ultoa_invert>
    aec0:	c8 2e       	mov	r12, r24
    aec2:	c6 18       	sub	r12, r6
    aec4:	3e c0       	rjmp	.+124    	; 0xaf42 <vfprintf+0x57a>
    aec6:	09 2d       	mov	r16, r9
    aec8:	85 37       	cpi	r24, 0x75	; 117
    aeca:	21 f4       	brne	.+8      	; 0xaed4 <vfprintf+0x50c>
    aecc:	0f 7e       	andi	r16, 0xEF	; 239
    aece:	2a e0       	ldi	r18, 0x0A	; 10
    aed0:	30 e0       	ldi	r19, 0x00	; 0
    aed2:	1d c0       	rjmp	.+58     	; 0xaf0e <vfprintf+0x546>
    aed4:	09 7f       	andi	r16, 0xF9	; 249
    aed6:	8f 36       	cpi	r24, 0x6F	; 111
    aed8:	91 f0       	breq	.+36     	; 0xaefe <vfprintf+0x536>
    aeda:	18 f4       	brcc	.+6      	; 0xaee2 <vfprintf+0x51a>
    aedc:	88 35       	cpi	r24, 0x58	; 88
    aede:	59 f0       	breq	.+22     	; 0xaef6 <vfprintf+0x52e>
    aee0:	bc c0       	rjmp	.+376    	; 0xb05a <vfprintf+0x692>
    aee2:	80 37       	cpi	r24, 0x70	; 112
    aee4:	19 f0       	breq	.+6      	; 0xaeec <vfprintf+0x524>
    aee6:	88 37       	cpi	r24, 0x78	; 120
    aee8:	11 f0       	breq	.+4      	; 0xaeee <vfprintf+0x526>
    aeea:	b7 c0       	rjmp	.+366    	; 0xb05a <vfprintf+0x692>
    aeec:	00 61       	ori	r16, 0x10	; 16
    aeee:	04 ff       	sbrs	r16, 4
    aef0:	09 c0       	rjmp	.+18     	; 0xaf04 <vfprintf+0x53c>
    aef2:	04 60       	ori	r16, 0x04	; 4
    aef4:	07 c0       	rjmp	.+14     	; 0xaf04 <vfprintf+0x53c>
    aef6:	94 fe       	sbrs	r9, 4
    aef8:	08 c0       	rjmp	.+16     	; 0xaf0a <vfprintf+0x542>
    aefa:	06 60       	ori	r16, 0x06	; 6
    aefc:	06 c0       	rjmp	.+12     	; 0xaf0a <vfprintf+0x542>
    aefe:	28 e0       	ldi	r18, 0x08	; 8
    af00:	30 e0       	ldi	r19, 0x00	; 0
    af02:	05 c0       	rjmp	.+10     	; 0xaf0e <vfprintf+0x546>
    af04:	20 e1       	ldi	r18, 0x10	; 16
    af06:	30 e0       	ldi	r19, 0x00	; 0
    af08:	02 c0       	rjmp	.+4      	; 0xaf0e <vfprintf+0x546>
    af0a:	20 e1       	ldi	r18, 0x10	; 16
    af0c:	32 e0       	ldi	r19, 0x02	; 2
    af0e:	56 01       	movw	r10, r12
    af10:	07 ff       	sbrs	r16, 7
    af12:	09 c0       	rjmp	.+18     	; 0xaf26 <vfprintf+0x55e>
    af14:	84 e0       	ldi	r24, 0x04	; 4
    af16:	a8 0e       	add	r10, r24
    af18:	b1 1c       	adc	r11, r1
    af1a:	f6 01       	movw	r30, r12
    af1c:	60 81       	ld	r22, Z
    af1e:	71 81       	ldd	r23, Z+1	; 0x01
    af20:	82 81       	ldd	r24, Z+2	; 0x02
    af22:	93 81       	ldd	r25, Z+3	; 0x03
    af24:	08 c0       	rjmp	.+16     	; 0xaf36 <vfprintf+0x56e>
    af26:	f2 e0       	ldi	r31, 0x02	; 2
    af28:	af 0e       	add	r10, r31
    af2a:	b1 1c       	adc	r11, r1
    af2c:	f6 01       	movw	r30, r12
    af2e:	60 81       	ld	r22, Z
    af30:	71 81       	ldd	r23, Z+1	; 0x01
    af32:	80 e0       	ldi	r24, 0x00	; 0
    af34:	90 e0       	ldi	r25, 0x00	; 0
    af36:	a3 01       	movw	r20, r6
    af38:	9c d3       	rcall	.+1848   	; 0xb672 <__ultoa_invert>
    af3a:	c8 2e       	mov	r12, r24
    af3c:	c6 18       	sub	r12, r6
    af3e:	0f 77       	andi	r16, 0x7F	; 127
    af40:	90 2e       	mov	r9, r16
    af42:	96 fe       	sbrs	r9, 6
    af44:	0b c0       	rjmp	.+22     	; 0xaf5c <vfprintf+0x594>
    af46:	09 2d       	mov	r16, r9
    af48:	0e 7f       	andi	r16, 0xFE	; 254
    af4a:	c1 16       	cp	r12, r17
    af4c:	50 f4       	brcc	.+20     	; 0xaf62 <vfprintf+0x59a>
    af4e:	94 fe       	sbrs	r9, 4
    af50:	0a c0       	rjmp	.+20     	; 0xaf66 <vfprintf+0x59e>
    af52:	92 fc       	sbrc	r9, 2
    af54:	08 c0       	rjmp	.+16     	; 0xaf66 <vfprintf+0x59e>
    af56:	09 2d       	mov	r16, r9
    af58:	0e 7e       	andi	r16, 0xEE	; 238
    af5a:	05 c0       	rjmp	.+10     	; 0xaf66 <vfprintf+0x59e>
    af5c:	dc 2c       	mov	r13, r12
    af5e:	09 2d       	mov	r16, r9
    af60:	03 c0       	rjmp	.+6      	; 0xaf68 <vfprintf+0x5a0>
    af62:	dc 2c       	mov	r13, r12
    af64:	01 c0       	rjmp	.+2      	; 0xaf68 <vfprintf+0x5a0>
    af66:	d1 2e       	mov	r13, r17
    af68:	04 ff       	sbrs	r16, 4
    af6a:	0d c0       	rjmp	.+26     	; 0xaf86 <vfprintf+0x5be>
    af6c:	fe 01       	movw	r30, r28
    af6e:	ec 0d       	add	r30, r12
    af70:	f1 1d       	adc	r31, r1
    af72:	80 81       	ld	r24, Z
    af74:	80 33       	cpi	r24, 0x30	; 48
    af76:	11 f4       	brne	.+4      	; 0xaf7c <vfprintf+0x5b4>
    af78:	09 7e       	andi	r16, 0xE9	; 233
    af7a:	09 c0       	rjmp	.+18     	; 0xaf8e <vfprintf+0x5c6>
    af7c:	02 ff       	sbrs	r16, 2
    af7e:	06 c0       	rjmp	.+12     	; 0xaf8c <vfprintf+0x5c4>
    af80:	d3 94       	inc	r13
    af82:	d3 94       	inc	r13
    af84:	04 c0       	rjmp	.+8      	; 0xaf8e <vfprintf+0x5c6>
    af86:	80 2f       	mov	r24, r16
    af88:	86 78       	andi	r24, 0x86	; 134
    af8a:	09 f0       	breq	.+2      	; 0xaf8e <vfprintf+0x5c6>
    af8c:	d3 94       	inc	r13
    af8e:	03 fd       	sbrc	r16, 3
    af90:	10 c0       	rjmp	.+32     	; 0xafb2 <vfprintf+0x5ea>
    af92:	00 ff       	sbrs	r16, 0
    af94:	06 c0       	rjmp	.+12     	; 0xafa2 <vfprintf+0x5da>
    af96:	1c 2d       	mov	r17, r12
    af98:	d5 14       	cp	r13, r5
    af9a:	78 f4       	brcc	.+30     	; 0xafba <vfprintf+0x5f2>
    af9c:	15 0d       	add	r17, r5
    af9e:	1d 19       	sub	r17, r13
    afa0:	0c c0       	rjmp	.+24     	; 0xafba <vfprintf+0x5f2>
    afa2:	d5 14       	cp	r13, r5
    afa4:	50 f4       	brcc	.+20     	; 0xafba <vfprintf+0x5f2>
    afa6:	b7 01       	movw	r22, r14
    afa8:	80 e2       	ldi	r24, 0x20	; 32
    afaa:	90 e0       	ldi	r25, 0x00	; 0
    afac:	ee d2       	rcall	.+1500   	; 0xb58a <fputc>
    afae:	d3 94       	inc	r13
    afb0:	f8 cf       	rjmp	.-16     	; 0xafa2 <vfprintf+0x5da>
    afb2:	d5 14       	cp	r13, r5
    afb4:	10 f4       	brcc	.+4      	; 0xafba <vfprintf+0x5f2>
    afb6:	5d 18       	sub	r5, r13
    afb8:	01 c0       	rjmp	.+2      	; 0xafbc <vfprintf+0x5f4>
    afba:	51 2c       	mov	r5, r1
    afbc:	04 ff       	sbrs	r16, 4
    afbe:	0f c0       	rjmp	.+30     	; 0xafde <vfprintf+0x616>
    afc0:	b7 01       	movw	r22, r14
    afc2:	80 e3       	ldi	r24, 0x30	; 48
    afc4:	90 e0       	ldi	r25, 0x00	; 0
    afc6:	e1 d2       	rcall	.+1474   	; 0xb58a <fputc>
    afc8:	02 ff       	sbrs	r16, 2
    afca:	16 c0       	rjmp	.+44     	; 0xaff8 <vfprintf+0x630>
    afcc:	01 fd       	sbrc	r16, 1
    afce:	03 c0       	rjmp	.+6      	; 0xafd6 <vfprintf+0x60e>
    afd0:	88 e7       	ldi	r24, 0x78	; 120
    afd2:	90 e0       	ldi	r25, 0x00	; 0
    afd4:	02 c0       	rjmp	.+4      	; 0xafda <vfprintf+0x612>
    afd6:	88 e5       	ldi	r24, 0x58	; 88
    afd8:	90 e0       	ldi	r25, 0x00	; 0
    afda:	b7 01       	movw	r22, r14
    afdc:	0c c0       	rjmp	.+24     	; 0xaff6 <vfprintf+0x62e>
    afde:	80 2f       	mov	r24, r16
    afe0:	86 78       	andi	r24, 0x86	; 134
    afe2:	51 f0       	breq	.+20     	; 0xaff8 <vfprintf+0x630>
    afe4:	01 ff       	sbrs	r16, 1
    afe6:	02 c0       	rjmp	.+4      	; 0xafec <vfprintf+0x624>
    afe8:	8b e2       	ldi	r24, 0x2B	; 43
    afea:	01 c0       	rjmp	.+2      	; 0xafee <vfprintf+0x626>
    afec:	80 e2       	ldi	r24, 0x20	; 32
    afee:	07 fd       	sbrc	r16, 7
    aff0:	8d e2       	ldi	r24, 0x2D	; 45
    aff2:	b7 01       	movw	r22, r14
    aff4:	90 e0       	ldi	r25, 0x00	; 0
    aff6:	c9 d2       	rcall	.+1426   	; 0xb58a <fputc>
    aff8:	c1 16       	cp	r12, r17
    affa:	30 f4       	brcc	.+12     	; 0xb008 <vfprintf+0x640>
    affc:	b7 01       	movw	r22, r14
    affe:	80 e3       	ldi	r24, 0x30	; 48
    b000:	90 e0       	ldi	r25, 0x00	; 0
    b002:	c3 d2       	rcall	.+1414   	; 0xb58a <fputc>
    b004:	11 50       	subi	r17, 0x01	; 1
    b006:	f8 cf       	rjmp	.-16     	; 0xaff8 <vfprintf+0x630>
    b008:	ca 94       	dec	r12
    b00a:	f3 01       	movw	r30, r6
    b00c:	ec 0d       	add	r30, r12
    b00e:	f1 1d       	adc	r31, r1
    b010:	80 81       	ld	r24, Z
    b012:	b7 01       	movw	r22, r14
    b014:	90 e0       	ldi	r25, 0x00	; 0
    b016:	b9 d2       	rcall	.+1394   	; 0xb58a <fputc>
    b018:	c1 10       	cpse	r12, r1
    b01a:	f6 cf       	rjmp	.-20     	; 0xb008 <vfprintf+0x640>
    b01c:	15 c0       	rjmp	.+42     	; 0xb048 <vfprintf+0x680>
    b01e:	f4 e0       	ldi	r31, 0x04	; 4
    b020:	f5 15       	cp	r31, r5
    b022:	50 f5       	brcc	.+84     	; 0xb078 <vfprintf+0x6b0>
    b024:	84 e0       	ldi	r24, 0x04	; 4
    b026:	58 1a       	sub	r5, r24
    b028:	93 fe       	sbrs	r9, 3
    b02a:	1e c0       	rjmp	.+60     	; 0xb068 <vfprintf+0x6a0>
    b02c:	01 11       	cpse	r16, r1
    b02e:	25 c0       	rjmp	.+74     	; 0xb07a <vfprintf+0x6b2>
    b030:	2c 85       	ldd	r18, Y+12	; 0x0c
    b032:	23 ff       	sbrs	r18, 3
    b034:	27 c0       	rjmp	.+78     	; 0xb084 <vfprintf+0x6bc>
    b036:	0e ee       	ldi	r16, 0xEE	; 238
    b038:	18 e0       	ldi	r17, 0x08	; 8
    b03a:	39 2d       	mov	r19, r9
    b03c:	30 71       	andi	r19, 0x10	; 16
    b03e:	93 2e       	mov	r9, r19
    b040:	f8 01       	movw	r30, r16
    b042:	84 91       	lpm	r24, Z
    b044:	81 11       	cpse	r24, r1
    b046:	21 c0       	rjmp	.+66     	; 0xb08a <vfprintf+0x6c2>
    b048:	55 20       	and	r5, r5
    b04a:	09 f4       	brne	.+2      	; 0xb04e <vfprintf+0x686>
    b04c:	fc cc       	rjmp	.-1544   	; 0xaa46 <vfprintf+0x7e>
    b04e:	b7 01       	movw	r22, r14
    b050:	80 e2       	ldi	r24, 0x20	; 32
    b052:	90 e0       	ldi	r25, 0x00	; 0
    b054:	9a d2       	rcall	.+1332   	; 0xb58a <fputc>
    b056:	5a 94       	dec	r5
    b058:	f7 cf       	rjmp	.-18     	; 0xb048 <vfprintf+0x680>
    b05a:	f7 01       	movw	r30, r14
    b05c:	86 81       	ldd	r24, Z+6	; 0x06
    b05e:	97 81       	ldd	r25, Z+7	; 0x07
    b060:	23 c0       	rjmp	.+70     	; 0xb0a8 <vfprintf+0x6e0>
    b062:	8f ef       	ldi	r24, 0xFF	; 255
    b064:	9f ef       	ldi	r25, 0xFF	; 255
    b066:	20 c0       	rjmp	.+64     	; 0xb0a8 <vfprintf+0x6e0>
    b068:	b7 01       	movw	r22, r14
    b06a:	80 e2       	ldi	r24, 0x20	; 32
    b06c:	90 e0       	ldi	r25, 0x00	; 0
    b06e:	8d d2       	rcall	.+1306   	; 0xb58a <fputc>
    b070:	5a 94       	dec	r5
    b072:	51 10       	cpse	r5, r1
    b074:	f9 cf       	rjmp	.-14     	; 0xb068 <vfprintf+0x6a0>
    b076:	da cf       	rjmp	.-76     	; 0xb02c <vfprintf+0x664>
    b078:	51 2c       	mov	r5, r1
    b07a:	b7 01       	movw	r22, r14
    b07c:	80 2f       	mov	r24, r16
    b07e:	90 e0       	ldi	r25, 0x00	; 0
    b080:	84 d2       	rcall	.+1288   	; 0xb58a <fputc>
    b082:	d6 cf       	rjmp	.-84     	; 0xb030 <vfprintf+0x668>
    b084:	02 ef       	ldi	r16, 0xF2	; 242
    b086:	18 e0       	ldi	r17, 0x08	; 8
    b088:	d8 cf       	rjmp	.-80     	; 0xb03a <vfprintf+0x672>
    b08a:	91 10       	cpse	r9, r1
    b08c:	80 52       	subi	r24, 0x20	; 32
    b08e:	b7 01       	movw	r22, r14
    b090:	90 e0       	ldi	r25, 0x00	; 0
    b092:	7b d2       	rcall	.+1270   	; 0xb58a <fputc>
    b094:	0f 5f       	subi	r16, 0xFF	; 255
    b096:	1f 4f       	sbci	r17, 0xFF	; 255
    b098:	d3 cf       	rjmp	.-90     	; 0xb040 <vfprintf+0x678>
    b09a:	23 e0       	ldi	r18, 0x03	; 3
    b09c:	25 15       	cp	r18, r5
    b09e:	10 f4       	brcc	.+4      	; 0xb0a4 <vfprintf+0x6dc>
    b0a0:	83 e0       	ldi	r24, 0x03	; 3
    b0a2:	c1 cf       	rjmp	.-126    	; 0xb026 <vfprintf+0x65e>
    b0a4:	51 2c       	mov	r5, r1
    b0a6:	c4 cf       	rjmp	.-120    	; 0xb030 <vfprintf+0x668>
    b0a8:	60 96       	adiw	r28, 0x10	; 16
    b0aa:	0f b6       	in	r0, 0x3f	; 63
    b0ac:	f8 94       	cli
    b0ae:	de bf       	out	0x3e, r29	; 62
    b0b0:	0f be       	out	0x3f, r0	; 63
    b0b2:	cd bf       	out	0x3d, r28	; 61
    b0b4:	df 91       	pop	r29
    b0b6:	cf 91       	pop	r28
    b0b8:	1f 91       	pop	r17
    b0ba:	0f 91       	pop	r16
    b0bc:	ff 90       	pop	r15
    b0be:	ef 90       	pop	r14
    b0c0:	df 90       	pop	r13
    b0c2:	cf 90       	pop	r12
    b0c4:	bf 90       	pop	r11
    b0c6:	af 90       	pop	r10
    b0c8:	9f 90       	pop	r9
    b0ca:	8f 90       	pop	r8
    b0cc:	7f 90       	pop	r7
    b0ce:	6f 90       	pop	r6
    b0d0:	5f 90       	pop	r5
    b0d2:	4f 90       	pop	r4
    b0d4:	3f 90       	pop	r3
    b0d6:	2f 90       	pop	r2
    b0d8:	08 95       	ret

0000b0da <__udivmodsi4>:
    b0da:	a1 e2       	ldi	r26, 0x21	; 33
    b0dc:	1a 2e       	mov	r1, r26
    b0de:	aa 1b       	sub	r26, r26
    b0e0:	bb 1b       	sub	r27, r27
    b0e2:	fd 01       	movw	r30, r26
    b0e4:	0d c0       	rjmp	.+26     	; 0xb100 <__udivmodsi4_ep>

0000b0e6 <__udivmodsi4_loop>:
    b0e6:	aa 1f       	adc	r26, r26
    b0e8:	bb 1f       	adc	r27, r27
    b0ea:	ee 1f       	adc	r30, r30
    b0ec:	ff 1f       	adc	r31, r31
    b0ee:	a2 17       	cp	r26, r18
    b0f0:	b3 07       	cpc	r27, r19
    b0f2:	e4 07       	cpc	r30, r20
    b0f4:	f5 07       	cpc	r31, r21
    b0f6:	20 f0       	brcs	.+8      	; 0xb100 <__udivmodsi4_ep>
    b0f8:	a2 1b       	sub	r26, r18
    b0fa:	b3 0b       	sbc	r27, r19
    b0fc:	e4 0b       	sbc	r30, r20
    b0fe:	f5 0b       	sbc	r31, r21

0000b100 <__udivmodsi4_ep>:
    b100:	66 1f       	adc	r22, r22
    b102:	77 1f       	adc	r23, r23
    b104:	88 1f       	adc	r24, r24
    b106:	99 1f       	adc	r25, r25
    b108:	1a 94       	dec	r1
    b10a:	69 f7       	brne	.-38     	; 0xb0e6 <__udivmodsi4_loop>
    b10c:	60 95       	com	r22
    b10e:	70 95       	com	r23
    b110:	80 95       	com	r24
    b112:	90 95       	com	r25
    b114:	9b 01       	movw	r18, r22
    b116:	ac 01       	movw	r20, r24
    b118:	bd 01       	movw	r22, r26
    b11a:	cf 01       	movw	r24, r30
    b11c:	08 95       	ret

0000b11e <__tablejump2__>:
    b11e:	ee 0f       	add	r30, r30
    b120:	ff 1f       	adc	r31, r31
    b122:	88 1f       	adc	r24, r24
    b124:	8b bf       	out	0x3b, r24	; 59
    b126:	07 90       	elpm	r0, Z+
    b128:	f6 91       	elpm	r31, Z
    b12a:	e0 2d       	mov	r30, r0
    b12c:	19 94       	eijmp

0000b12e <__umulhisi3>:
    b12e:	a2 9f       	mul	r26, r18
    b130:	b0 01       	movw	r22, r0
    b132:	b3 9f       	mul	r27, r19
    b134:	c0 01       	movw	r24, r0
    b136:	a3 9f       	mul	r26, r19
    b138:	70 0d       	add	r23, r0
    b13a:	81 1d       	adc	r24, r1
    b13c:	11 24       	eor	r1, r1
    b13e:	91 1d       	adc	r25, r1
    b140:	b2 9f       	mul	r27, r18
    b142:	70 0d       	add	r23, r0
    b144:	81 1d       	adc	r24, r1
    b146:	11 24       	eor	r1, r1
    b148:	91 1d       	adc	r25, r1
    b14a:	08 95       	ret

0000b14c <malloc>:
    b14c:	0f 93       	push	r16
    b14e:	1f 93       	push	r17
    b150:	cf 93       	push	r28
    b152:	df 93       	push	r29
    b154:	82 30       	cpi	r24, 0x02	; 2
    b156:	91 05       	cpc	r25, r1
    b158:	10 f4       	brcc	.+4      	; 0xb15e <malloc+0x12>
    b15a:	82 e0       	ldi	r24, 0x02	; 2
    b15c:	90 e0       	ldi	r25, 0x00	; 0
    b15e:	e0 91 73 0a 	lds	r30, 0x0A73	; 0x800a73 <__flp>
    b162:	f0 91 74 0a 	lds	r31, 0x0A74	; 0x800a74 <__flp+0x1>
    b166:	20 e0       	ldi	r18, 0x00	; 0
    b168:	30 e0       	ldi	r19, 0x00	; 0
    b16a:	a0 e0       	ldi	r26, 0x00	; 0
    b16c:	b0 e0       	ldi	r27, 0x00	; 0
    b16e:	30 97       	sbiw	r30, 0x00	; 0
    b170:	19 f1       	breq	.+70     	; 0xb1b8 <malloc+0x6c>
    b172:	40 81       	ld	r20, Z
    b174:	51 81       	ldd	r21, Z+1	; 0x01
    b176:	02 81       	ldd	r16, Z+2	; 0x02
    b178:	13 81       	ldd	r17, Z+3	; 0x03
    b17a:	48 17       	cp	r20, r24
    b17c:	59 07       	cpc	r21, r25
    b17e:	c8 f0       	brcs	.+50     	; 0xb1b2 <malloc+0x66>
    b180:	84 17       	cp	r24, r20
    b182:	95 07       	cpc	r25, r21
    b184:	69 f4       	brne	.+26     	; 0xb1a0 <malloc+0x54>
    b186:	10 97       	sbiw	r26, 0x00	; 0
    b188:	31 f0       	breq	.+12     	; 0xb196 <malloc+0x4a>
    b18a:	12 96       	adiw	r26, 0x02	; 2
    b18c:	0c 93       	st	X, r16
    b18e:	12 97       	sbiw	r26, 0x02	; 2
    b190:	13 96       	adiw	r26, 0x03	; 3
    b192:	1c 93       	st	X, r17
    b194:	27 c0       	rjmp	.+78     	; 0xb1e4 <malloc+0x98>
    b196:	00 93 73 0a 	sts	0x0A73, r16	; 0x800a73 <__flp>
    b19a:	10 93 74 0a 	sts	0x0A74, r17	; 0x800a74 <__flp+0x1>
    b19e:	22 c0       	rjmp	.+68     	; 0xb1e4 <malloc+0x98>
    b1a0:	21 15       	cp	r18, r1
    b1a2:	31 05       	cpc	r19, r1
    b1a4:	19 f0       	breq	.+6      	; 0xb1ac <malloc+0x60>
    b1a6:	42 17       	cp	r20, r18
    b1a8:	53 07       	cpc	r21, r19
    b1aa:	18 f4       	brcc	.+6      	; 0xb1b2 <malloc+0x66>
    b1ac:	9a 01       	movw	r18, r20
    b1ae:	bd 01       	movw	r22, r26
    b1b0:	ef 01       	movw	r28, r30
    b1b2:	df 01       	movw	r26, r30
    b1b4:	f8 01       	movw	r30, r16
    b1b6:	db cf       	rjmp	.-74     	; 0xb16e <malloc+0x22>
    b1b8:	21 15       	cp	r18, r1
    b1ba:	31 05       	cpc	r19, r1
    b1bc:	f9 f0       	breq	.+62     	; 0xb1fc <malloc+0xb0>
    b1be:	28 1b       	sub	r18, r24
    b1c0:	39 0b       	sbc	r19, r25
    b1c2:	24 30       	cpi	r18, 0x04	; 4
    b1c4:	31 05       	cpc	r19, r1
    b1c6:	80 f4       	brcc	.+32     	; 0xb1e8 <malloc+0x9c>
    b1c8:	8a 81       	ldd	r24, Y+2	; 0x02
    b1ca:	9b 81       	ldd	r25, Y+3	; 0x03
    b1cc:	61 15       	cp	r22, r1
    b1ce:	71 05       	cpc	r23, r1
    b1d0:	21 f0       	breq	.+8      	; 0xb1da <malloc+0x8e>
    b1d2:	fb 01       	movw	r30, r22
    b1d4:	93 83       	std	Z+3, r25	; 0x03
    b1d6:	82 83       	std	Z+2, r24	; 0x02
    b1d8:	04 c0       	rjmp	.+8      	; 0xb1e2 <malloc+0x96>
    b1da:	90 93 74 0a 	sts	0x0A74, r25	; 0x800a74 <__flp+0x1>
    b1de:	80 93 73 0a 	sts	0x0A73, r24	; 0x800a73 <__flp>
    b1e2:	fe 01       	movw	r30, r28
    b1e4:	32 96       	adiw	r30, 0x02	; 2
    b1e6:	44 c0       	rjmp	.+136    	; 0xb270 <malloc+0x124>
    b1e8:	fe 01       	movw	r30, r28
    b1ea:	e2 0f       	add	r30, r18
    b1ec:	f3 1f       	adc	r31, r19
    b1ee:	81 93       	st	Z+, r24
    b1f0:	91 93       	st	Z+, r25
    b1f2:	22 50       	subi	r18, 0x02	; 2
    b1f4:	31 09       	sbc	r19, r1
    b1f6:	39 83       	std	Y+1, r19	; 0x01
    b1f8:	28 83       	st	Y, r18
    b1fa:	3a c0       	rjmp	.+116    	; 0xb270 <malloc+0x124>
    b1fc:	20 91 71 0a 	lds	r18, 0x0A71	; 0x800a71 <__brkval>
    b200:	30 91 72 0a 	lds	r19, 0x0A72	; 0x800a72 <__brkval+0x1>
    b204:	23 2b       	or	r18, r19
    b206:	41 f4       	brne	.+16     	; 0xb218 <malloc+0xcc>
    b208:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    b20c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    b210:	30 93 72 0a 	sts	0x0A72, r19	; 0x800a72 <__brkval+0x1>
    b214:	20 93 71 0a 	sts	0x0A71, r18	; 0x800a71 <__brkval>
    b218:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    b21c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    b220:	21 15       	cp	r18, r1
    b222:	31 05       	cpc	r19, r1
    b224:	41 f4       	brne	.+16     	; 0xb236 <malloc+0xea>
    b226:	2d b7       	in	r18, 0x3d	; 61
    b228:	3e b7       	in	r19, 0x3e	; 62
    b22a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    b22e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    b232:	24 1b       	sub	r18, r20
    b234:	35 0b       	sbc	r19, r21
    b236:	e0 91 71 0a 	lds	r30, 0x0A71	; 0x800a71 <__brkval>
    b23a:	f0 91 72 0a 	lds	r31, 0x0A72	; 0x800a72 <__brkval+0x1>
    b23e:	e2 17       	cp	r30, r18
    b240:	f3 07       	cpc	r31, r19
    b242:	a0 f4       	brcc	.+40     	; 0xb26c <malloc+0x120>
    b244:	2e 1b       	sub	r18, r30
    b246:	3f 0b       	sbc	r19, r31
    b248:	28 17       	cp	r18, r24
    b24a:	39 07       	cpc	r19, r25
    b24c:	78 f0       	brcs	.+30     	; 0xb26c <malloc+0x120>
    b24e:	ac 01       	movw	r20, r24
    b250:	4e 5f       	subi	r20, 0xFE	; 254
    b252:	5f 4f       	sbci	r21, 0xFF	; 255
    b254:	24 17       	cp	r18, r20
    b256:	35 07       	cpc	r19, r21
    b258:	48 f0       	brcs	.+18     	; 0xb26c <malloc+0x120>
    b25a:	4e 0f       	add	r20, r30
    b25c:	5f 1f       	adc	r21, r31
    b25e:	50 93 72 0a 	sts	0x0A72, r21	; 0x800a72 <__brkval+0x1>
    b262:	40 93 71 0a 	sts	0x0A71, r20	; 0x800a71 <__brkval>
    b266:	81 93       	st	Z+, r24
    b268:	91 93       	st	Z+, r25
    b26a:	02 c0       	rjmp	.+4      	; 0xb270 <malloc+0x124>
    b26c:	e0 e0       	ldi	r30, 0x00	; 0
    b26e:	f0 e0       	ldi	r31, 0x00	; 0
    b270:	cf 01       	movw	r24, r30
    b272:	df 91       	pop	r29
    b274:	cf 91       	pop	r28
    b276:	1f 91       	pop	r17
    b278:	0f 91       	pop	r16
    b27a:	08 95       	ret

0000b27c <free>:
    b27c:	cf 93       	push	r28
    b27e:	df 93       	push	r29
    b280:	00 97       	sbiw	r24, 0x00	; 0
    b282:	09 f4       	brne	.+2      	; 0xb286 <free+0xa>
    b284:	81 c0       	rjmp	.+258    	; 0xb388 <free+0x10c>
    b286:	fc 01       	movw	r30, r24
    b288:	32 97       	sbiw	r30, 0x02	; 2
    b28a:	13 82       	std	Z+3, r1	; 0x03
    b28c:	12 82       	std	Z+2, r1	; 0x02
    b28e:	a0 91 73 0a 	lds	r26, 0x0A73	; 0x800a73 <__flp>
    b292:	b0 91 74 0a 	lds	r27, 0x0A74	; 0x800a74 <__flp+0x1>
    b296:	10 97       	sbiw	r26, 0x00	; 0
    b298:	81 f4       	brne	.+32     	; 0xb2ba <free+0x3e>
    b29a:	20 81       	ld	r18, Z
    b29c:	31 81       	ldd	r19, Z+1	; 0x01
    b29e:	82 0f       	add	r24, r18
    b2a0:	93 1f       	adc	r25, r19
    b2a2:	20 91 71 0a 	lds	r18, 0x0A71	; 0x800a71 <__brkval>
    b2a6:	30 91 72 0a 	lds	r19, 0x0A72	; 0x800a72 <__brkval+0x1>
    b2aa:	28 17       	cp	r18, r24
    b2ac:	39 07       	cpc	r19, r25
    b2ae:	51 f5       	brne	.+84     	; 0xb304 <free+0x88>
    b2b0:	f0 93 72 0a 	sts	0x0A72, r31	; 0x800a72 <__brkval+0x1>
    b2b4:	e0 93 71 0a 	sts	0x0A71, r30	; 0x800a71 <__brkval>
    b2b8:	67 c0       	rjmp	.+206    	; 0xb388 <free+0x10c>
    b2ba:	ed 01       	movw	r28, r26
    b2bc:	20 e0       	ldi	r18, 0x00	; 0
    b2be:	30 e0       	ldi	r19, 0x00	; 0
    b2c0:	ce 17       	cp	r28, r30
    b2c2:	df 07       	cpc	r29, r31
    b2c4:	40 f4       	brcc	.+16     	; 0xb2d6 <free+0x5a>
    b2c6:	4a 81       	ldd	r20, Y+2	; 0x02
    b2c8:	5b 81       	ldd	r21, Y+3	; 0x03
    b2ca:	9e 01       	movw	r18, r28
    b2cc:	41 15       	cp	r20, r1
    b2ce:	51 05       	cpc	r21, r1
    b2d0:	f1 f0       	breq	.+60     	; 0xb30e <free+0x92>
    b2d2:	ea 01       	movw	r28, r20
    b2d4:	f5 cf       	rjmp	.-22     	; 0xb2c0 <free+0x44>
    b2d6:	d3 83       	std	Z+3, r29	; 0x03
    b2d8:	c2 83       	std	Z+2, r28	; 0x02
    b2da:	40 81       	ld	r20, Z
    b2dc:	51 81       	ldd	r21, Z+1	; 0x01
    b2de:	84 0f       	add	r24, r20
    b2e0:	95 1f       	adc	r25, r21
    b2e2:	c8 17       	cp	r28, r24
    b2e4:	d9 07       	cpc	r29, r25
    b2e6:	59 f4       	brne	.+22     	; 0xb2fe <free+0x82>
    b2e8:	88 81       	ld	r24, Y
    b2ea:	99 81       	ldd	r25, Y+1	; 0x01
    b2ec:	84 0f       	add	r24, r20
    b2ee:	95 1f       	adc	r25, r21
    b2f0:	02 96       	adiw	r24, 0x02	; 2
    b2f2:	91 83       	std	Z+1, r25	; 0x01
    b2f4:	80 83       	st	Z, r24
    b2f6:	8a 81       	ldd	r24, Y+2	; 0x02
    b2f8:	9b 81       	ldd	r25, Y+3	; 0x03
    b2fa:	93 83       	std	Z+3, r25	; 0x03
    b2fc:	82 83       	std	Z+2, r24	; 0x02
    b2fe:	21 15       	cp	r18, r1
    b300:	31 05       	cpc	r19, r1
    b302:	29 f4       	brne	.+10     	; 0xb30e <free+0x92>
    b304:	f0 93 74 0a 	sts	0x0A74, r31	; 0x800a74 <__flp+0x1>
    b308:	e0 93 73 0a 	sts	0x0A73, r30	; 0x800a73 <__flp>
    b30c:	3d c0       	rjmp	.+122    	; 0xb388 <free+0x10c>
    b30e:	e9 01       	movw	r28, r18
    b310:	fb 83       	std	Y+3, r31	; 0x03
    b312:	ea 83       	std	Y+2, r30	; 0x02
    b314:	49 91       	ld	r20, Y+
    b316:	59 91       	ld	r21, Y+
    b318:	c4 0f       	add	r28, r20
    b31a:	d5 1f       	adc	r29, r21
    b31c:	ec 17       	cp	r30, r28
    b31e:	fd 07       	cpc	r31, r29
    b320:	61 f4       	brne	.+24     	; 0xb33a <free+0xbe>
    b322:	80 81       	ld	r24, Z
    b324:	91 81       	ldd	r25, Z+1	; 0x01
    b326:	84 0f       	add	r24, r20
    b328:	95 1f       	adc	r25, r21
    b32a:	02 96       	adiw	r24, 0x02	; 2
    b32c:	e9 01       	movw	r28, r18
    b32e:	99 83       	std	Y+1, r25	; 0x01
    b330:	88 83       	st	Y, r24
    b332:	82 81       	ldd	r24, Z+2	; 0x02
    b334:	93 81       	ldd	r25, Z+3	; 0x03
    b336:	9b 83       	std	Y+3, r25	; 0x03
    b338:	8a 83       	std	Y+2, r24	; 0x02
    b33a:	e0 e0       	ldi	r30, 0x00	; 0
    b33c:	f0 e0       	ldi	r31, 0x00	; 0
    b33e:	12 96       	adiw	r26, 0x02	; 2
    b340:	8d 91       	ld	r24, X+
    b342:	9c 91       	ld	r25, X
    b344:	13 97       	sbiw	r26, 0x03	; 3
    b346:	00 97       	sbiw	r24, 0x00	; 0
    b348:	19 f0       	breq	.+6      	; 0xb350 <free+0xd4>
    b34a:	fd 01       	movw	r30, r26
    b34c:	dc 01       	movw	r26, r24
    b34e:	f7 cf       	rjmp	.-18     	; 0xb33e <free+0xc2>
    b350:	8d 91       	ld	r24, X+
    b352:	9c 91       	ld	r25, X
    b354:	11 97       	sbiw	r26, 0x01	; 1
    b356:	9d 01       	movw	r18, r26
    b358:	2e 5f       	subi	r18, 0xFE	; 254
    b35a:	3f 4f       	sbci	r19, 0xFF	; 255
    b35c:	82 0f       	add	r24, r18
    b35e:	93 1f       	adc	r25, r19
    b360:	20 91 71 0a 	lds	r18, 0x0A71	; 0x800a71 <__brkval>
    b364:	30 91 72 0a 	lds	r19, 0x0A72	; 0x800a72 <__brkval+0x1>
    b368:	28 17       	cp	r18, r24
    b36a:	39 07       	cpc	r19, r25
    b36c:	69 f4       	brne	.+26     	; 0xb388 <free+0x10c>
    b36e:	30 97       	sbiw	r30, 0x00	; 0
    b370:	29 f4       	brne	.+10     	; 0xb37c <free+0x100>
    b372:	10 92 74 0a 	sts	0x0A74, r1	; 0x800a74 <__flp+0x1>
    b376:	10 92 73 0a 	sts	0x0A73, r1	; 0x800a73 <__flp>
    b37a:	02 c0       	rjmp	.+4      	; 0xb380 <free+0x104>
    b37c:	13 82       	std	Z+3, r1	; 0x03
    b37e:	12 82       	std	Z+2, r1	; 0x02
    b380:	b0 93 72 0a 	sts	0x0A72, r27	; 0x800a72 <__brkval+0x1>
    b384:	a0 93 71 0a 	sts	0x0A71, r26	; 0x800a71 <__brkval>
    b388:	df 91       	pop	r29
    b38a:	cf 91       	pop	r28
    b38c:	08 95       	ret

0000b38e <__ftoa_engine>:
    b38e:	28 30       	cpi	r18, 0x08	; 8
    b390:	08 f0       	brcs	.+2      	; 0xb394 <__ftoa_engine+0x6>
    b392:	27 e0       	ldi	r18, 0x07	; 7
    b394:	33 27       	eor	r19, r19
    b396:	da 01       	movw	r26, r20
    b398:	99 0f       	add	r25, r25
    b39a:	31 1d       	adc	r19, r1
    b39c:	87 fd       	sbrc	r24, 7
    b39e:	91 60       	ori	r25, 0x01	; 1
    b3a0:	00 96       	adiw	r24, 0x00	; 0
    b3a2:	61 05       	cpc	r22, r1
    b3a4:	71 05       	cpc	r23, r1
    b3a6:	39 f4       	brne	.+14     	; 0xb3b6 <__ftoa_engine+0x28>
    b3a8:	32 60       	ori	r19, 0x02	; 2
    b3aa:	2e 5f       	subi	r18, 0xFE	; 254
    b3ac:	3d 93       	st	X+, r19
    b3ae:	30 e3       	ldi	r19, 0x30	; 48
    b3b0:	2a 95       	dec	r18
    b3b2:	e1 f7       	brne	.-8      	; 0xb3ac <__ftoa_engine+0x1e>
    b3b4:	08 95       	ret
    b3b6:	9f 3f       	cpi	r25, 0xFF	; 255
    b3b8:	30 f0       	brcs	.+12     	; 0xb3c6 <__ftoa_engine+0x38>
    b3ba:	80 38       	cpi	r24, 0x80	; 128
    b3bc:	71 05       	cpc	r23, r1
    b3be:	61 05       	cpc	r22, r1
    b3c0:	09 f0       	breq	.+2      	; 0xb3c4 <__ftoa_engine+0x36>
    b3c2:	3c 5f       	subi	r19, 0xFC	; 252
    b3c4:	3c 5f       	subi	r19, 0xFC	; 252
    b3c6:	3d 93       	st	X+, r19
    b3c8:	91 30       	cpi	r25, 0x01	; 1
    b3ca:	08 f0       	brcs	.+2      	; 0xb3ce <__ftoa_engine+0x40>
    b3cc:	80 68       	ori	r24, 0x80	; 128
    b3ce:	91 1d       	adc	r25, r1
    b3d0:	df 93       	push	r29
    b3d2:	cf 93       	push	r28
    b3d4:	1f 93       	push	r17
    b3d6:	0f 93       	push	r16
    b3d8:	ff 92       	push	r15
    b3da:	ef 92       	push	r14
    b3dc:	19 2f       	mov	r17, r25
    b3de:	98 7f       	andi	r25, 0xF8	; 248
    b3e0:	96 95       	lsr	r25
    b3e2:	e9 2f       	mov	r30, r25
    b3e4:	96 95       	lsr	r25
    b3e6:	96 95       	lsr	r25
    b3e8:	e9 0f       	add	r30, r25
    b3ea:	ff 27       	eor	r31, r31
    b3ec:	e0 5b       	subi	r30, 0xB0	; 176
    b3ee:	f6 4f       	sbci	r31, 0xF6	; 246
    b3f0:	99 27       	eor	r25, r25
    b3f2:	33 27       	eor	r19, r19
    b3f4:	ee 24       	eor	r14, r14
    b3f6:	ff 24       	eor	r15, r15
    b3f8:	a7 01       	movw	r20, r14
    b3fa:	e7 01       	movw	r28, r14
    b3fc:	05 90       	lpm	r0, Z+
    b3fe:	08 94       	sec
    b400:	07 94       	ror	r0
    b402:	28 f4       	brcc	.+10     	; 0xb40e <__ftoa_engine+0x80>
    b404:	36 0f       	add	r19, r22
    b406:	e7 1e       	adc	r14, r23
    b408:	f8 1e       	adc	r15, r24
    b40a:	49 1f       	adc	r20, r25
    b40c:	51 1d       	adc	r21, r1
    b40e:	66 0f       	add	r22, r22
    b410:	77 1f       	adc	r23, r23
    b412:	88 1f       	adc	r24, r24
    b414:	99 1f       	adc	r25, r25
    b416:	06 94       	lsr	r0
    b418:	a1 f7       	brne	.-24     	; 0xb402 <__ftoa_engine+0x74>
    b41a:	05 90       	lpm	r0, Z+
    b41c:	07 94       	ror	r0
    b41e:	28 f4       	brcc	.+10     	; 0xb42a <__ftoa_engine+0x9c>
    b420:	e7 0e       	add	r14, r23
    b422:	f8 1e       	adc	r15, r24
    b424:	49 1f       	adc	r20, r25
    b426:	56 1f       	adc	r21, r22
    b428:	c1 1d       	adc	r28, r1
    b42a:	77 0f       	add	r23, r23
    b42c:	88 1f       	adc	r24, r24
    b42e:	99 1f       	adc	r25, r25
    b430:	66 1f       	adc	r22, r22
    b432:	06 94       	lsr	r0
    b434:	a1 f7       	brne	.-24     	; 0xb41e <__ftoa_engine+0x90>
    b436:	05 90       	lpm	r0, Z+
    b438:	07 94       	ror	r0
    b43a:	28 f4       	brcc	.+10     	; 0xb446 <__ftoa_engine+0xb8>
    b43c:	f8 0e       	add	r15, r24
    b43e:	49 1f       	adc	r20, r25
    b440:	56 1f       	adc	r21, r22
    b442:	c7 1f       	adc	r28, r23
    b444:	d1 1d       	adc	r29, r1
    b446:	88 0f       	add	r24, r24
    b448:	99 1f       	adc	r25, r25
    b44a:	66 1f       	adc	r22, r22
    b44c:	77 1f       	adc	r23, r23
    b44e:	06 94       	lsr	r0
    b450:	a1 f7       	brne	.-24     	; 0xb43a <__ftoa_engine+0xac>
    b452:	05 90       	lpm	r0, Z+
    b454:	07 94       	ror	r0
    b456:	20 f4       	brcc	.+8      	; 0xb460 <__ftoa_engine+0xd2>
    b458:	49 0f       	add	r20, r25
    b45a:	56 1f       	adc	r21, r22
    b45c:	c7 1f       	adc	r28, r23
    b45e:	d8 1f       	adc	r29, r24
    b460:	99 0f       	add	r25, r25
    b462:	66 1f       	adc	r22, r22
    b464:	77 1f       	adc	r23, r23
    b466:	88 1f       	adc	r24, r24
    b468:	06 94       	lsr	r0
    b46a:	a9 f7       	brne	.-22     	; 0xb456 <__ftoa_engine+0xc8>
    b46c:	84 91       	lpm	r24, Z
    b46e:	10 95       	com	r17
    b470:	17 70       	andi	r17, 0x07	; 7
    b472:	41 f0       	breq	.+16     	; 0xb484 <__ftoa_engine+0xf6>
    b474:	d6 95       	lsr	r29
    b476:	c7 95       	ror	r28
    b478:	57 95       	ror	r21
    b47a:	47 95       	ror	r20
    b47c:	f7 94       	ror	r15
    b47e:	e7 94       	ror	r14
    b480:	1a 95       	dec	r17
    b482:	c1 f7       	brne	.-16     	; 0xb474 <__ftoa_engine+0xe6>
    b484:	e6 ef       	ldi	r30, 0xF6	; 246
    b486:	f8 e0       	ldi	r31, 0x08	; 8
    b488:	68 94       	set
    b48a:	15 90       	lpm	r1, Z+
    b48c:	15 91       	lpm	r17, Z+
    b48e:	35 91       	lpm	r19, Z+
    b490:	65 91       	lpm	r22, Z+
    b492:	95 91       	lpm	r25, Z+
    b494:	05 90       	lpm	r0, Z+
    b496:	7f e2       	ldi	r23, 0x2F	; 47
    b498:	73 95       	inc	r23
    b49a:	e1 18       	sub	r14, r1
    b49c:	f1 0a       	sbc	r15, r17
    b49e:	43 0b       	sbc	r20, r19
    b4a0:	56 0b       	sbc	r21, r22
    b4a2:	c9 0b       	sbc	r28, r25
    b4a4:	d0 09       	sbc	r29, r0
    b4a6:	c0 f7       	brcc	.-16     	; 0xb498 <__ftoa_engine+0x10a>
    b4a8:	e1 0c       	add	r14, r1
    b4aa:	f1 1e       	adc	r15, r17
    b4ac:	43 1f       	adc	r20, r19
    b4ae:	56 1f       	adc	r21, r22
    b4b0:	c9 1f       	adc	r28, r25
    b4b2:	d0 1d       	adc	r29, r0
    b4b4:	7e f4       	brtc	.+30     	; 0xb4d4 <__ftoa_engine+0x146>
    b4b6:	70 33       	cpi	r23, 0x30	; 48
    b4b8:	11 f4       	brne	.+4      	; 0xb4be <__ftoa_engine+0x130>
    b4ba:	8a 95       	dec	r24
    b4bc:	e6 cf       	rjmp	.-52     	; 0xb48a <__ftoa_engine+0xfc>
    b4be:	e8 94       	clt
    b4c0:	01 50       	subi	r16, 0x01	; 1
    b4c2:	30 f0       	brcs	.+12     	; 0xb4d0 <__ftoa_engine+0x142>
    b4c4:	08 0f       	add	r16, r24
    b4c6:	0a f4       	brpl	.+2      	; 0xb4ca <__ftoa_engine+0x13c>
    b4c8:	00 27       	eor	r16, r16
    b4ca:	02 17       	cp	r16, r18
    b4cc:	08 f4       	brcc	.+2      	; 0xb4d0 <__ftoa_engine+0x142>
    b4ce:	20 2f       	mov	r18, r16
    b4d0:	23 95       	inc	r18
    b4d2:	02 2f       	mov	r16, r18
    b4d4:	7a 33       	cpi	r23, 0x3A	; 58
    b4d6:	28 f0       	brcs	.+10     	; 0xb4e2 <__ftoa_engine+0x154>
    b4d8:	79 e3       	ldi	r23, 0x39	; 57
    b4da:	7d 93       	st	X+, r23
    b4dc:	2a 95       	dec	r18
    b4de:	e9 f7       	brne	.-6      	; 0xb4da <__ftoa_engine+0x14c>
    b4e0:	10 c0       	rjmp	.+32     	; 0xb502 <__ftoa_engine+0x174>
    b4e2:	7d 93       	st	X+, r23
    b4e4:	2a 95       	dec	r18
    b4e6:	89 f6       	brne	.-94     	; 0xb48a <__ftoa_engine+0xfc>
    b4e8:	06 94       	lsr	r0
    b4ea:	97 95       	ror	r25
    b4ec:	67 95       	ror	r22
    b4ee:	37 95       	ror	r19
    b4f0:	17 95       	ror	r17
    b4f2:	17 94       	ror	r1
    b4f4:	e1 18       	sub	r14, r1
    b4f6:	f1 0a       	sbc	r15, r17
    b4f8:	43 0b       	sbc	r20, r19
    b4fa:	56 0b       	sbc	r21, r22
    b4fc:	c9 0b       	sbc	r28, r25
    b4fe:	d0 09       	sbc	r29, r0
    b500:	98 f0       	brcs	.+38     	; 0xb528 <__ftoa_engine+0x19a>
    b502:	23 95       	inc	r18
    b504:	7e 91       	ld	r23, -X
    b506:	73 95       	inc	r23
    b508:	7a 33       	cpi	r23, 0x3A	; 58
    b50a:	08 f0       	brcs	.+2      	; 0xb50e <__ftoa_engine+0x180>
    b50c:	70 e3       	ldi	r23, 0x30	; 48
    b50e:	7c 93       	st	X, r23
    b510:	20 13       	cpse	r18, r16
    b512:	b8 f7       	brcc	.-18     	; 0xb502 <__ftoa_engine+0x174>
    b514:	7e 91       	ld	r23, -X
    b516:	70 61       	ori	r23, 0x10	; 16
    b518:	7d 93       	st	X+, r23
    b51a:	30 f0       	brcs	.+12     	; 0xb528 <__ftoa_engine+0x19a>
    b51c:	83 95       	inc	r24
    b51e:	71 e3       	ldi	r23, 0x31	; 49
    b520:	7d 93       	st	X+, r23
    b522:	70 e3       	ldi	r23, 0x30	; 48
    b524:	2a 95       	dec	r18
    b526:	e1 f7       	brne	.-8      	; 0xb520 <__ftoa_engine+0x192>
    b528:	11 24       	eor	r1, r1
    b52a:	ef 90       	pop	r14
    b52c:	ff 90       	pop	r15
    b52e:	0f 91       	pop	r16
    b530:	1f 91       	pop	r17
    b532:	cf 91       	pop	r28
    b534:	df 91       	pop	r29
    b536:	99 27       	eor	r25, r25
    b538:	87 fd       	sbrc	r24, 7
    b53a:	90 95       	com	r25
    b53c:	08 95       	ret

0000b53e <strnlen_P>:
    b53e:	fc 01       	movw	r30, r24
    b540:	05 90       	lpm	r0, Z+
    b542:	61 50       	subi	r22, 0x01	; 1
    b544:	70 40       	sbci	r23, 0x00	; 0
    b546:	01 10       	cpse	r0, r1
    b548:	d8 f7       	brcc	.-10     	; 0xb540 <strnlen_P+0x2>
    b54a:	80 95       	com	r24
    b54c:	90 95       	com	r25
    b54e:	8e 0f       	add	r24, r30
    b550:	9f 1f       	adc	r25, r31
    b552:	08 95       	ret

0000b554 <memcpy>:
    b554:	fb 01       	movw	r30, r22
    b556:	dc 01       	movw	r26, r24
    b558:	02 c0       	rjmp	.+4      	; 0xb55e <memcpy+0xa>
    b55a:	01 90       	ld	r0, Z+
    b55c:	0d 92       	st	X+, r0
    b55e:	41 50       	subi	r20, 0x01	; 1
    b560:	50 40       	sbci	r21, 0x00	; 0
    b562:	d8 f7       	brcc	.-10     	; 0xb55a <memcpy+0x6>
    b564:	08 95       	ret

0000b566 <memset>:
    b566:	dc 01       	movw	r26, r24
    b568:	01 c0       	rjmp	.+2      	; 0xb56c <memset+0x6>
    b56a:	6d 93       	st	X+, r22
    b56c:	41 50       	subi	r20, 0x01	; 1
    b56e:	50 40       	sbci	r21, 0x00	; 0
    b570:	e0 f7       	brcc	.-8      	; 0xb56a <memset+0x4>
    b572:	08 95       	ret

0000b574 <strnlen>:
    b574:	fc 01       	movw	r30, r24
    b576:	61 50       	subi	r22, 0x01	; 1
    b578:	70 40       	sbci	r23, 0x00	; 0
    b57a:	01 90       	ld	r0, Z+
    b57c:	01 10       	cpse	r0, r1
    b57e:	d8 f7       	brcc	.-10     	; 0xb576 <strnlen+0x2>
    b580:	80 95       	com	r24
    b582:	90 95       	com	r25
    b584:	8e 0f       	add	r24, r30
    b586:	9f 1f       	adc	r25, r31
    b588:	08 95       	ret

0000b58a <fputc>:
    b58a:	0f 93       	push	r16
    b58c:	1f 93       	push	r17
    b58e:	cf 93       	push	r28
    b590:	df 93       	push	r29
    b592:	fb 01       	movw	r30, r22
    b594:	23 81       	ldd	r18, Z+3	; 0x03
    b596:	21 fd       	sbrc	r18, 1
    b598:	03 c0       	rjmp	.+6      	; 0xb5a0 <fputc+0x16>
    b59a:	8f ef       	ldi	r24, 0xFF	; 255
    b59c:	9f ef       	ldi	r25, 0xFF	; 255
    b59e:	2c c0       	rjmp	.+88     	; 0xb5f8 <fputc+0x6e>
    b5a0:	22 ff       	sbrs	r18, 2
    b5a2:	16 c0       	rjmp	.+44     	; 0xb5d0 <fputc+0x46>
    b5a4:	46 81       	ldd	r20, Z+6	; 0x06
    b5a6:	57 81       	ldd	r21, Z+7	; 0x07
    b5a8:	24 81       	ldd	r18, Z+4	; 0x04
    b5aa:	35 81       	ldd	r19, Z+5	; 0x05
    b5ac:	42 17       	cp	r20, r18
    b5ae:	53 07       	cpc	r21, r19
    b5b0:	44 f4       	brge	.+16     	; 0xb5c2 <fputc+0x38>
    b5b2:	a0 81       	ld	r26, Z
    b5b4:	b1 81       	ldd	r27, Z+1	; 0x01
    b5b6:	9d 01       	movw	r18, r26
    b5b8:	2f 5f       	subi	r18, 0xFF	; 255
    b5ba:	3f 4f       	sbci	r19, 0xFF	; 255
    b5bc:	31 83       	std	Z+1, r19	; 0x01
    b5be:	20 83       	st	Z, r18
    b5c0:	8c 93       	st	X, r24
    b5c2:	26 81       	ldd	r18, Z+6	; 0x06
    b5c4:	37 81       	ldd	r19, Z+7	; 0x07
    b5c6:	2f 5f       	subi	r18, 0xFF	; 255
    b5c8:	3f 4f       	sbci	r19, 0xFF	; 255
    b5ca:	37 83       	std	Z+7, r19	; 0x07
    b5cc:	26 83       	std	Z+6, r18	; 0x06
    b5ce:	14 c0       	rjmp	.+40     	; 0xb5f8 <fputc+0x6e>
    b5d0:	8b 01       	movw	r16, r22
    b5d2:	ec 01       	movw	r28, r24
    b5d4:	fb 01       	movw	r30, r22
    b5d6:	00 84       	ldd	r0, Z+8	; 0x08
    b5d8:	f1 85       	ldd	r31, Z+9	; 0x09
    b5da:	e0 2d       	mov	r30, r0
    b5dc:	19 95       	eicall
    b5de:	89 2b       	or	r24, r25
    b5e0:	e1 f6       	brne	.-72     	; 0xb59a <fputc+0x10>
    b5e2:	d8 01       	movw	r26, r16
    b5e4:	16 96       	adiw	r26, 0x06	; 6
    b5e6:	8d 91       	ld	r24, X+
    b5e8:	9c 91       	ld	r25, X
    b5ea:	17 97       	sbiw	r26, 0x07	; 7
    b5ec:	01 96       	adiw	r24, 0x01	; 1
    b5ee:	17 96       	adiw	r26, 0x07	; 7
    b5f0:	9c 93       	st	X, r25
    b5f2:	8e 93       	st	-X, r24
    b5f4:	16 97       	sbiw	r26, 0x06	; 6
    b5f6:	ce 01       	movw	r24, r28
    b5f8:	df 91       	pop	r29
    b5fa:	cf 91       	pop	r28
    b5fc:	1f 91       	pop	r17
    b5fe:	0f 91       	pop	r16
    b600:	08 95       	ret

0000b602 <vsnprintf>:
    b602:	0f 93       	push	r16
    b604:	1f 93       	push	r17
    b606:	cf 93       	push	r28
    b608:	df 93       	push	r29
    b60a:	cd b7       	in	r28, 0x3d	; 61
    b60c:	de b7       	in	r29, 0x3e	; 62
    b60e:	2e 97       	sbiw	r28, 0x0e	; 14
    b610:	0f b6       	in	r0, 0x3f	; 63
    b612:	f8 94       	cli
    b614:	de bf       	out	0x3e, r29	; 62
    b616:	0f be       	out	0x3f, r0	; 63
    b618:	cd bf       	out	0x3d, r28	; 61
    b61a:	8c 01       	movw	r16, r24
    b61c:	fa 01       	movw	r30, r20
    b61e:	86 e0       	ldi	r24, 0x06	; 6
    b620:	8c 83       	std	Y+4, r24	; 0x04
    b622:	1a 83       	std	Y+2, r17	; 0x02
    b624:	09 83       	std	Y+1, r16	; 0x01
    b626:	77 ff       	sbrs	r23, 7
    b628:	02 c0       	rjmp	.+4      	; 0xb62e <vsnprintf+0x2c>
    b62a:	60 e0       	ldi	r22, 0x00	; 0
    b62c:	70 e8       	ldi	r23, 0x80	; 128
    b62e:	cb 01       	movw	r24, r22
    b630:	01 97       	sbiw	r24, 0x01	; 1
    b632:	9e 83       	std	Y+6, r25	; 0x06
    b634:	8d 83       	std	Y+5, r24	; 0x05
    b636:	a9 01       	movw	r20, r18
    b638:	bf 01       	movw	r22, r30
    b63a:	ce 01       	movw	r24, r28
    b63c:	01 96       	adiw	r24, 0x01	; 1
    b63e:	c4 d9       	rcall	.-3192   	; 0xa9c8 <vfprintf>
    b640:	4d 81       	ldd	r20, Y+5	; 0x05
    b642:	5e 81       	ldd	r21, Y+6	; 0x06
    b644:	57 fd       	sbrc	r21, 7
    b646:	0a c0       	rjmp	.+20     	; 0xb65c <vsnprintf+0x5a>
    b648:	2f 81       	ldd	r18, Y+7	; 0x07
    b64a:	38 85       	ldd	r19, Y+8	; 0x08
    b64c:	42 17       	cp	r20, r18
    b64e:	53 07       	cpc	r21, r19
    b650:	0c f4       	brge	.+2      	; 0xb654 <vsnprintf+0x52>
    b652:	9a 01       	movw	r18, r20
    b654:	f8 01       	movw	r30, r16
    b656:	e2 0f       	add	r30, r18
    b658:	f3 1f       	adc	r31, r19
    b65a:	10 82       	st	Z, r1
    b65c:	2e 96       	adiw	r28, 0x0e	; 14
    b65e:	0f b6       	in	r0, 0x3f	; 63
    b660:	f8 94       	cli
    b662:	de bf       	out	0x3e, r29	; 62
    b664:	0f be       	out	0x3f, r0	; 63
    b666:	cd bf       	out	0x3d, r28	; 61
    b668:	df 91       	pop	r29
    b66a:	cf 91       	pop	r28
    b66c:	1f 91       	pop	r17
    b66e:	0f 91       	pop	r16
    b670:	08 95       	ret

0000b672 <__ultoa_invert>:
    b672:	fa 01       	movw	r30, r20
    b674:	aa 27       	eor	r26, r26
    b676:	28 30       	cpi	r18, 0x08	; 8
    b678:	51 f1       	breq	.+84     	; 0xb6ce <__ultoa_invert+0x5c>
    b67a:	20 31       	cpi	r18, 0x10	; 16
    b67c:	81 f1       	breq	.+96     	; 0xb6de <__ultoa_invert+0x6c>
    b67e:	e8 94       	clt
    b680:	6f 93       	push	r22
    b682:	6e 7f       	andi	r22, 0xFE	; 254
    b684:	6e 5f       	subi	r22, 0xFE	; 254
    b686:	7f 4f       	sbci	r23, 0xFF	; 255
    b688:	8f 4f       	sbci	r24, 0xFF	; 255
    b68a:	9f 4f       	sbci	r25, 0xFF	; 255
    b68c:	af 4f       	sbci	r26, 0xFF	; 255
    b68e:	b1 e0       	ldi	r27, 0x01	; 1
    b690:	3e d0       	rcall	.+124    	; 0xb70e <__ultoa_invert+0x9c>
    b692:	b4 e0       	ldi	r27, 0x04	; 4
    b694:	3c d0       	rcall	.+120    	; 0xb70e <__ultoa_invert+0x9c>
    b696:	67 0f       	add	r22, r23
    b698:	78 1f       	adc	r23, r24
    b69a:	89 1f       	adc	r24, r25
    b69c:	9a 1f       	adc	r25, r26
    b69e:	a1 1d       	adc	r26, r1
    b6a0:	68 0f       	add	r22, r24
    b6a2:	79 1f       	adc	r23, r25
    b6a4:	8a 1f       	adc	r24, r26
    b6a6:	91 1d       	adc	r25, r1
    b6a8:	a1 1d       	adc	r26, r1
    b6aa:	6a 0f       	add	r22, r26
    b6ac:	71 1d       	adc	r23, r1
    b6ae:	81 1d       	adc	r24, r1
    b6b0:	91 1d       	adc	r25, r1
    b6b2:	a1 1d       	adc	r26, r1
    b6b4:	20 d0       	rcall	.+64     	; 0xb6f6 <__ultoa_invert+0x84>
    b6b6:	09 f4       	brne	.+2      	; 0xb6ba <__ultoa_invert+0x48>
    b6b8:	68 94       	set
    b6ba:	3f 91       	pop	r19
    b6bc:	2a e0       	ldi	r18, 0x0A	; 10
    b6be:	26 9f       	mul	r18, r22
    b6c0:	11 24       	eor	r1, r1
    b6c2:	30 19       	sub	r19, r0
    b6c4:	30 5d       	subi	r19, 0xD0	; 208
    b6c6:	31 93       	st	Z+, r19
    b6c8:	de f6       	brtc	.-74     	; 0xb680 <__ultoa_invert+0xe>
    b6ca:	cf 01       	movw	r24, r30
    b6cc:	08 95       	ret
    b6ce:	46 2f       	mov	r20, r22
    b6d0:	47 70       	andi	r20, 0x07	; 7
    b6d2:	40 5d       	subi	r20, 0xD0	; 208
    b6d4:	41 93       	st	Z+, r20
    b6d6:	b3 e0       	ldi	r27, 0x03	; 3
    b6d8:	0f d0       	rcall	.+30     	; 0xb6f8 <__ultoa_invert+0x86>
    b6da:	c9 f7       	brne	.-14     	; 0xb6ce <__ultoa_invert+0x5c>
    b6dc:	f6 cf       	rjmp	.-20     	; 0xb6ca <__ultoa_invert+0x58>
    b6de:	46 2f       	mov	r20, r22
    b6e0:	4f 70       	andi	r20, 0x0F	; 15
    b6e2:	40 5d       	subi	r20, 0xD0	; 208
    b6e4:	4a 33       	cpi	r20, 0x3A	; 58
    b6e6:	18 f0       	brcs	.+6      	; 0xb6ee <__ultoa_invert+0x7c>
    b6e8:	49 5d       	subi	r20, 0xD9	; 217
    b6ea:	31 fd       	sbrc	r19, 1
    b6ec:	40 52       	subi	r20, 0x20	; 32
    b6ee:	41 93       	st	Z+, r20
    b6f0:	02 d0       	rcall	.+4      	; 0xb6f6 <__ultoa_invert+0x84>
    b6f2:	a9 f7       	brne	.-22     	; 0xb6de <__ultoa_invert+0x6c>
    b6f4:	ea cf       	rjmp	.-44     	; 0xb6ca <__ultoa_invert+0x58>
    b6f6:	b4 e0       	ldi	r27, 0x04	; 4
    b6f8:	a6 95       	lsr	r26
    b6fa:	97 95       	ror	r25
    b6fc:	87 95       	ror	r24
    b6fe:	77 95       	ror	r23
    b700:	67 95       	ror	r22
    b702:	ba 95       	dec	r27
    b704:	c9 f7       	brne	.-14     	; 0xb6f8 <__ultoa_invert+0x86>
    b706:	00 97       	sbiw	r24, 0x00	; 0
    b708:	61 05       	cpc	r22, r1
    b70a:	71 05       	cpc	r23, r1
    b70c:	08 95       	ret
    b70e:	9b 01       	movw	r18, r22
    b710:	ac 01       	movw	r20, r24
    b712:	0a 2e       	mov	r0, r26
    b714:	06 94       	lsr	r0
    b716:	57 95       	ror	r21
    b718:	47 95       	ror	r20
    b71a:	37 95       	ror	r19
    b71c:	27 95       	ror	r18
    b71e:	ba 95       	dec	r27
    b720:	c9 f7       	brne	.-14     	; 0xb714 <__ultoa_invert+0xa2>
    b722:	62 0f       	add	r22, r18
    b724:	73 1f       	adc	r23, r19
    b726:	84 1f       	adc	r24, r20
    b728:	95 1f       	adc	r25, r21
    b72a:	a0 1d       	adc	r26, r0
    b72c:	08 95       	ret

0000b72e <eeprom_read_block>:
    b72e:	dc 01       	movw	r26, r24
    b730:	cb 01       	movw	r24, r22

0000b732 <eeprom_read_blraw>:
    b732:	fc 01       	movw	r30, r24
    b734:	f9 99       	sbic	0x1f, 1	; 31
    b736:	fe cf       	rjmp	.-4      	; 0xb734 <eeprom_read_blraw+0x2>
    b738:	06 c0       	rjmp	.+12     	; 0xb746 <eeprom_read_blraw+0x14>
    b73a:	f2 bd       	out	0x22, r31	; 34
    b73c:	e1 bd       	out	0x21, r30	; 33
    b73e:	f8 9a       	sbi	0x1f, 0	; 31
    b740:	31 96       	adiw	r30, 0x01	; 1
    b742:	00 b4       	in	r0, 0x20	; 32
    b744:	0d 92       	st	X+, r0
    b746:	41 50       	subi	r20, 0x01	; 1
    b748:	50 40       	sbci	r21, 0x00	; 0
    b74a:	b8 f7       	brcc	.-18     	; 0xb73a <eeprom_read_blraw+0x8>
    b74c:	08 95       	ret

0000b74e <eeprom_update_block>:
    b74e:	dc 01       	movw	r26, r24
    b750:	a4 0f       	add	r26, r20
    b752:	b5 1f       	adc	r27, r21
    b754:	41 50       	subi	r20, 0x01	; 1
    b756:	50 40       	sbci	r21, 0x00	; 0
    b758:	40 f0       	brcs	.+16     	; 0xb76a <eeprom_update_block+0x1c>
    b75a:	cb 01       	movw	r24, r22
    b75c:	84 0f       	add	r24, r20
    b75e:	95 1f       	adc	r25, r21
    b760:	2e 91       	ld	r18, -X
    b762:	05 d0       	rcall	.+10     	; 0xb76e <eeprom_update_r18>
    b764:	41 50       	subi	r20, 0x01	; 1
    b766:	50 40       	sbci	r21, 0x00	; 0
    b768:	d8 f7       	brcc	.-10     	; 0xb760 <eeprom_update_block+0x12>
    b76a:	08 95       	ret

0000b76c <eeprom_update_byte>:
    b76c:	26 2f       	mov	r18, r22

0000b76e <eeprom_update_r18>:
    b76e:	f9 99       	sbic	0x1f, 1	; 31
    b770:	fe cf       	rjmp	.-4      	; 0xb76e <eeprom_update_r18>
    b772:	92 bd       	out	0x22, r25	; 34
    b774:	81 bd       	out	0x21, r24	; 33
    b776:	f8 9a       	sbi	0x1f, 0	; 31
    b778:	01 97       	sbiw	r24, 0x01	; 1
    b77a:	00 b4       	in	r0, 0x20	; 32
    b77c:	02 16       	cp	r0, r18
    b77e:	39 f0       	breq	.+14     	; 0xb78e <eeprom_update_r18+0x20>
    b780:	1f ba       	out	0x1f, r1	; 31
    b782:	20 bd       	out	0x20, r18	; 32
    b784:	0f b6       	in	r0, 0x3f	; 63
    b786:	f8 94       	cli
    b788:	fa 9a       	sbi	0x1f, 2	; 31
    b78a:	f9 9a       	sbi	0x1f, 1	; 31
    b78c:	0f be       	out	0x3f, r0	; 63
    b78e:	08 95       	ret

0000b790 <eeprom_write_block>:
    b790:	dc 01       	movw	r26, r24
    b792:	cb 01       	movw	r24, r22
    b794:	02 c0       	rjmp	.+4      	; 0xb79a <eeprom_write_block+0xa>
    b796:	2d 91       	ld	r18, X+
    b798:	05 d0       	rcall	.+10     	; 0xb7a4 <eeprom_write_r18>
    b79a:	41 50       	subi	r20, 0x01	; 1
    b79c:	50 40       	sbci	r21, 0x00	; 0
    b79e:	d8 f7       	brcc	.-10     	; 0xb796 <eeprom_write_block+0x6>
    b7a0:	08 95       	ret

0000b7a2 <eeprom_write_byte>:
    b7a2:	26 2f       	mov	r18, r22

0000b7a4 <eeprom_write_r18>:
    b7a4:	f9 99       	sbic	0x1f, 1	; 31
    b7a6:	fe cf       	rjmp	.-4      	; 0xb7a4 <eeprom_write_r18>
    b7a8:	1f ba       	out	0x1f, r1	; 31
    b7aa:	92 bd       	out	0x22, r25	; 34
    b7ac:	81 bd       	out	0x21, r24	; 33
    b7ae:	20 bd       	out	0x20, r18	; 32
    b7b0:	0f b6       	in	r0, 0x3f	; 63
    b7b2:	f8 94       	cli
    b7b4:	fa 9a       	sbi	0x1f, 2	; 31
    b7b6:	f9 9a       	sbi	0x1f, 1	; 31
    b7b8:	0f be       	out	0x3f, r0	; 63
    b7ba:	01 96       	adiw	r24, 0x01	; 1
    b7bc:	08 95       	ret

0000b7be <_exit>:
    b7be:	f8 94       	cli

0000b7c0 <__stop_program>:
    b7c0:	ff cf       	rjmp	.-2      	; 0xb7c0 <__stop_program>
